
../repos/coreutils/src/pr:     file format elf32-littlearm


Disassembly of section .init:

00011064 <.init>:
   11064:	push	{r3, lr}
   11068:	bl	121d8 <__assert_fail@plt+0xdf4>
   1106c:	pop	{r3, pc}

Disassembly of section .plt:

00011070 <fdopen@plt-0x14>:
   11070:	push	{lr}		; (str lr, [sp, #-4]!)
   11074:	ldr	lr, [pc, #4]	; 11080 <fdopen@plt-0x4>
   11078:	add	lr, pc, lr
   1107c:	ldr	pc, [lr, #8]!
   11080:	andeq	sp, r1, r0, lsl #31

00011084 <fdopen@plt>:
   11084:	add	ip, pc, #0, 12
   11088:	add	ip, ip, #118784	; 0x1d000
   1108c:	ldr	pc, [ip, #3968]!	; 0xf80

00011090 <calloc@plt>:
   11090:	add	ip, pc, #0, 12
   11094:	add	ip, ip, #118784	; 0x1d000
   11098:	ldr	pc, [ip, #3960]!	; 0xf78

0001109c <fputs_unlocked@plt>:
   1109c:	add	ip, pc, #0, 12
   110a0:	add	ip, ip, #118784	; 0x1d000
   110a4:	ldr	pc, [ip, #3952]!	; 0xf70

000110a8 <raise@plt>:
   110a8:	add	ip, pc, #0, 12
   110ac:	add	ip, ip, #118784	; 0x1d000
   110b0:	ldr	pc, [ip, #3944]!	; 0xf68

000110b4 <gmtime_r@plt>:
   110b4:	add	ip, pc, #0, 12
   110b8:	add	ip, ip, #118784	; 0x1d000
   110bc:	ldr	pc, [ip, #3936]!	; 0xf60

000110c0 <strcmp@plt>:
   110c0:	add	ip, pc, #0, 12
   110c4:	add	ip, ip, #118784	; 0x1d000
   110c8:	ldr	pc, [ip, #3928]!	; 0xf58

000110cc <strtol@plt>:
   110cc:	add	ip, pc, #0, 12
   110d0:	add	ip, ip, #118784	; 0x1d000
   110d4:	ldr	pc, [ip, #3920]!	; 0xf50

000110d8 <posix_fadvise64@plt>:
   110d8:	add	ip, pc, #0, 12
   110dc:	add	ip, ip, #118784	; 0x1d000
   110e0:	ldr	pc, [ip, #3912]!	; 0xf48

000110e4 <mktime@plt>:
   110e4:	add	ip, pc, #0, 12
   110e8:	add	ip, ip, #118784	; 0x1d000
   110ec:	ldr	pc, [ip, #3904]!	; 0xf40

000110f0 <fflush@plt>:
   110f0:	add	ip, pc, #0, 12
   110f4:	add	ip, ip, #118784	; 0x1d000
   110f8:	ldr	pc, [ip, #3896]!	; 0xf38

000110fc <wcwidth@plt>:
   110fc:	add	ip, pc, #0, 12
   11100:	add	ip, ip, #118784	; 0x1d000
   11104:	ldr	pc, [ip, #3888]!	; 0xf30

00011108 <free@plt>:
   11108:	add	ip, pc, #0, 12
   1110c:	add	ip, ip, #118784	; 0x1d000
   11110:	ldr	pc, [ip, #3880]!	; 0xf28

00011114 <clock_gettime@plt>:
   11114:	add	ip, pc, #0, 12
   11118:	add	ip, ip, #118784	; 0x1d000
   1111c:	ldr	pc, [ip, #3872]!	; 0xf20

00011120 <_exit@plt>:
   11120:	add	ip, pc, #0, 12
   11124:	add	ip, ip, #118784	; 0x1d000
   11128:	ldr	pc, [ip, #3864]!	; 0xf18

0001112c <memcpy@plt>:
   1112c:	add	ip, pc, #0, 12
   11130:	add	ip, ip, #118784	; 0x1d000
   11134:	ldr	pc, [ip, #3856]!	; 0xf10

00011138 <__strtoull_internal@plt>:
   11138:	add	ip, pc, #0, 12
   1113c:	add	ip, ip, #118784	; 0x1d000
   11140:	ldr	pc, [ip, #3848]!	; 0xf08

00011144 <mbsinit@plt>:
   11144:	add	ip, pc, #0, 12
   11148:	add	ip, ip, #118784	; 0x1d000
   1114c:	ldr	pc, [ip, #3840]!	; 0xf00

00011150 <memcmp@plt>:
   11150:	add	ip, pc, #0, 12
   11154:	add	ip, ip, #118784	; 0x1d000
   11158:	ldr	pc, [ip, #3832]!	; 0xef8

0001115c <fputc_unlocked@plt>:
   1115c:	add	ip, pc, #0, 12
   11160:	add	ip, ip, #118784	; 0x1d000
   11164:	ldr	pc, [ip, #3824]!	; 0xef0

00011168 <dcgettext@plt>:
   11168:	add	ip, pc, #0, 12
   1116c:	add	ip, ip, #118784	; 0x1d000
   11170:	ldr	pc, [ip, #3816]!	; 0xee8

00011174 <realloc@plt>:
   11174:	add	ip, pc, #0, 12
   11178:	add	ip, ip, #118784	; 0x1d000
   1117c:	ldr	pc, [ip, #3808]!	; 0xee0

00011180 <localtime_r@plt>:
   11180:	add	ip, pc, #0, 12
   11184:	add	ip, ip, #118784	; 0x1d000
   11188:	ldr	pc, [ip, #3800]!	; 0xed8

0001118c <textdomain@plt>:
   1118c:	add	ip, pc, #0, 12
   11190:	add	ip, ip, #118784	; 0x1d000
   11194:	ldr	pc, [ip, #3792]!	; 0xed0

00011198 <iswcntrl@plt>:
   11198:	add	ip, pc, #0, 12
   1119c:	add	ip, ip, #118784	; 0x1d000
   111a0:	ldr	pc, [ip, #3784]!	; 0xec8

000111a4 <iswprint@plt>:
   111a4:	add	ip, pc, #0, 12
   111a8:	add	ip, ip, #118784	; 0x1d000
   111ac:	ldr	pc, [ip, #3776]!	; 0xec0

000111b0 <tzset@plt>:
   111b0:	add	ip, pc, #0, 12
   111b4:	add	ip, ip, #118784	; 0x1d000
   111b8:	ldr	pc, [ip, #3768]!	; 0xeb8

000111bc <__fxstat64@plt>:
   111bc:	add	ip, pc, #0, 12
   111c0:	add	ip, ip, #118784	; 0x1d000
   111c4:	ldr	pc, [ip, #3760]!	; 0xeb0

000111c8 <fwrite@plt>:
   111c8:	add	ip, pc, #0, 12
   111cc:	add	ip, ip, #118784	; 0x1d000
   111d0:	ldr	pc, [ip, #3752]!	; 0xea8

000111d4 <lseek64@plt>:
   111d4:	add	ip, pc, #0, 12
   111d8:	add	ip, ip, #118784	; 0x1d000
   111dc:	ldr	pc, [ip, #3744]!	; 0xea0

000111e0 <__ctype_get_mb_cur_max@plt>:
   111e0:	add	ip, pc, #0, 12
   111e4:	add	ip, ip, #118784	; 0x1d000
   111e8:	ldr	pc, [ip, #3736]!	; 0xe98

000111ec <__fpending@plt>:
   111ec:	add	ip, pc, #0, 12
   111f0:	add	ip, ip, #118784	; 0x1d000
   111f4:	ldr	pc, [ip, #3728]!	; 0xe90

000111f8 <mbrtowc@plt>:
   111f8:	add	ip, pc, #0, 12
   111fc:	add	ip, ip, #118784	; 0x1d000
   11200:	ldr	pc, [ip, #3720]!	; 0xe88

00011204 <error@plt>:
   11204:	add	ip, pc, #0, 12
   11208:	add	ip, ip, #118784	; 0x1d000
   1120c:	ldr	pc, [ip, #3712]!	; 0xe80

00011210 <getenv@plt>:
   11210:	add	ip, pc, #0, 12
   11214:	add	ip, ip, #118784	; 0x1d000
   11218:	ldr	pc, [ip, #3704]!	; 0xe78

0001121c <malloc@plt>:
   1121c:	add	ip, pc, #0, 12
   11220:	add	ip, ip, #118784	; 0x1d000
   11224:	ldr	pc, [ip, #3696]!	; 0xe70

00011228 <__libc_start_main@plt>:
   11228:	add	ip, pc, #0, 12
   1122c:	add	ip, ip, #118784	; 0x1d000
   11230:	ldr	pc, [ip, #3688]!	; 0xe68

00011234 <strftime@plt>:
   11234:	add	ip, pc, #0, 12
   11238:	add	ip, ip, #118784	; 0x1d000
   1123c:	ldr	pc, [ip, #3680]!	; 0xe60

00011240 <__freading@plt>:
   11240:	add	ip, pc, #0, 12
   11244:	add	ip, ip, #118784	; 0x1d000
   11248:	ldr	pc, [ip, #3672]!	; 0xe58

0001124c <__ctype_tolower_loc@plt>:
   1124c:	add	ip, pc, #0, 12
   11250:	add	ip, ip, #118784	; 0x1d000
   11254:	ldr	pc, [ip, #3664]!	; 0xe50

00011258 <__ctype_toupper_loc@plt>:
   11258:	add	ip, pc, #0, 12
   1125c:	add	ip, ip, #118784	; 0x1d000
   11260:	ldr	pc, [ip, #3656]!	; 0xe48

00011264 <__gmon_start__@plt>:
   11264:	add	ip, pc, #0, 12
   11268:	add	ip, ip, #118784	; 0x1d000
   1126c:	ldr	pc, [ip, #3648]!	; 0xe40

00011270 <getopt_long@plt>:
   11270:	add	ip, pc, #0, 12
   11274:	add	ip, ip, #118784	; 0x1d000
   11278:	ldr	pc, [ip, #3640]!	; 0xe38

0001127c <__ctype_b_loc@plt>:
   1127c:	add	ip, pc, #0, 12
   11280:	add	ip, ip, #118784	; 0x1d000
   11284:	ldr	pc, [ip, #3632]!	; 0xe30

00011288 <exit@plt>:
   11288:	add	ip, pc, #0, 12
   1128c:	add	ip, ip, #118784	; 0x1d000
   11290:	ldr	pc, [ip, #3624]!	; 0xe28

00011294 <strlen@plt>:
   11294:	add	ip, pc, #0, 12
   11298:	add	ip, ip, #118784	; 0x1d000
   1129c:	ldr	pc, [ip, #3616]!	; 0xe20

000112a0 <strchr@plt>:
   112a0:	add	ip, pc, #0, 12
   112a4:	add	ip, ip, #118784	; 0x1d000
   112a8:	ldr	pc, [ip, #3608]!	; 0xe18

000112ac <setenv@plt>:
   112ac:	add	ip, pc, #0, 12
   112b0:	add	ip, ip, #118784	; 0x1d000
   112b4:	ldr	pc, [ip, #3600]!	; 0xe10

000112b8 <ungetc@plt>:
   112b8:	add	ip, pc, #0, 12
   112bc:	add	ip, ip, #118784	; 0x1d000
   112c0:	ldr	pc, [ip, #3592]!	; 0xe08

000112c4 <__errno_location@plt>:
   112c4:	add	ip, pc, #0, 12
   112c8:	add	ip, ip, #118784	; 0x1d000
   112cc:	ldr	pc, [ip, #3584]!	; 0xe00

000112d0 <__sprintf_chk@plt>:
   112d0:	add	ip, pc, #0, 12
   112d4:	add	ip, ip, #118784	; 0x1d000
   112d8:	ldr	pc, [ip, #3576]!	; 0xdf8

000112dc <__cxa_atexit@plt>:
   112dc:	add	ip, pc, #0, 12
   112e0:	add	ip, ip, #118784	; 0x1d000
   112e4:	ldr	pc, [ip, #3568]!	; 0xdf0

000112e8 <memset@plt>:
   112e8:	add	ip, pc, #0, 12
   112ec:	add	ip, ip, #118784	; 0x1d000
   112f0:	ldr	pc, [ip, #3560]!	; 0xde8

000112f4 <__printf_chk@plt>:
   112f4:	add	ip, pc, #0, 12
   112f8:	add	ip, ip, #118784	; 0x1d000
   112fc:	ldr	pc, [ip, #3552]!	; 0xde0

00011300 <fileno@plt>:
   11300:	add	ip, pc, #0, 12
   11304:	add	ip, ip, #118784	; 0x1d000
   11308:	ldr	pc, [ip, #3544]!	; 0xdd8

0001130c <__fprintf_chk@plt>:
   1130c:	add	ip, pc, #0, 12
   11310:	add	ip, ip, #118784	; 0x1d000
   11314:	ldr	pc, [ip, #3536]!	; 0xdd0

00011318 <fclose@plt>:
   11318:	add	ip, pc, #0, 12
   1131c:	add	ip, ip, #118784	; 0x1d000
   11320:	ldr	pc, [ip, #3528]!	; 0xdc8

00011324 <fseeko64@plt>:
   11324:	add	ip, pc, #0, 12
   11328:	add	ip, ip, #118784	; 0x1d000
   1132c:	ldr	pc, [ip, #3520]!	; 0xdc0

00011330 <fcntl64@plt>:
   11330:	add	ip, pc, #0, 12
   11334:	add	ip, ip, #118784	; 0x1d000
   11338:	ldr	pc, [ip, #3512]!	; 0xdb8

0001133c <__uflow@plt>:
   1133c:	add	ip, pc, #0, 12
   11340:	add	ip, ip, #118784	; 0x1d000
   11344:	ldr	pc, [ip, #3504]!	; 0xdb0

00011348 <__overflow@plt>:
   11348:	add	ip, pc, #0, 12
   1134c:	add	ip, ip, #118784	; 0x1d000
   11350:	ldr	pc, [ip, #3496]!	; 0xda8

00011354 <setlocale@plt>:
   11354:	add	ip, pc, #0, 12
   11358:	add	ip, ip, #118784	; 0x1d000
   1135c:	ldr	pc, [ip, #3488]!	; 0xda0

00011360 <strrchr@plt>:
   11360:	add	ip, pc, #0, 12
   11364:	add	ip, ip, #118784	; 0x1d000
   11368:	ldr	pc, [ip, #3480]!	; 0xd98

0001136c <nl_langinfo@plt>:
   1136c:	add	ip, pc, #0, 12
   11370:	add	ip, ip, #118784	; 0x1d000
   11374:	ldr	pc, [ip, #3472]!	; 0xd90

00011378 <timegm@plt>:
   11378:	add	ip, pc, #0, 12
   1137c:	add	ip, ip, #118784	; 0x1d000
   11380:	ldr	pc, [ip, #3464]!	; 0xd88

00011384 <clearerr_unlocked@plt>:
   11384:	add	ip, pc, #0, 12
   11388:	add	ip, ip, #118784	; 0x1d000
   1138c:	ldr	pc, [ip, #3456]!	; 0xd80

00011390 <__strtoll_internal@plt>:
   11390:	add	ip, pc, #0, 12
   11394:	add	ip, ip, #118784	; 0x1d000
   11398:	ldr	pc, [ip, #3448]!	; 0xd78

0001139c <fopen64@plt>:
   1139c:	add	ip, pc, #0, 12
   113a0:	add	ip, ip, #118784	; 0x1d000
   113a4:	ldr	pc, [ip, #3440]!	; 0xd70

000113a8 <bindtextdomain@plt>:
   113a8:	add	ip, pc, #0, 12
   113ac:	add	ip, ip, #118784	; 0x1d000
   113b0:	ldr	pc, [ip, #3432]!	; 0xd68

000113b4 <unsetenv@plt>:
   113b4:	add	ip, pc, #0, 12
   113b8:	add	ip, ip, #118784	; 0x1d000
   113bc:	ldr	pc, [ip, #3424]!	; 0xd60

000113c0 <strncmp@plt>:
   113c0:	add	ip, pc, #0, 12
   113c4:	add	ip, ip, #118784	; 0x1d000
   113c8:	ldr	pc, [ip, #3416]!	; 0xd58

000113cc <abort@plt>:
   113cc:	add	ip, pc, #0, 12
   113d0:	add	ip, ip, #118784	; 0x1d000
   113d4:	ldr	pc, [ip, #3408]!	; 0xd50

000113d8 <close@plt>:
   113d8:	add	ip, pc, #0, 12
   113dc:	add	ip, ip, #118784	; 0x1d000
   113e0:	ldr	pc, [ip, #3400]!	; 0xd48

000113e4 <__assert_fail@plt>:
   113e4:	add	ip, pc, #0, 12
   113e8:	add	ip, ip, #118784	; 0x1d000
   113ec:	ldr	pc, [ip, #3392]!	; 0xd40

Disassembly of section .text:

000113f0 <.text>:
   113f0:	strd	r4, [sp, #-36]!	; 0xffffffdc
   113f4:	mov	r5, r0
   113f8:	mov	r4, r1
   113fc:	ldr	r0, [r1]
   11400:	strd	r6, [sp, #8]
   11404:	mov	r6, #0
   11408:	strd	r8, [sp, #16]
   1140c:	strd	sl, [sp, #24]
   11410:	str	lr, [sp, #32]
   11414:	sub	sp, sp, #68	; 0x44
   11418:	str	r6, [sp, #56]	; 0x38
   1141c:	bl	17660 <__assert_fail@plt+0x627c>
   11420:	movw	r1, #53980	; 0xd2dc
   11424:	movt	r1, #1
   11428:	mov	r0, #6
   1142c:	bl	11354 <setlocale@plt>
   11430:	movw	r1, #58504	; 0xe488
   11434:	movt	r1, #1
   11438:	movw	r0, #58240	; 0xe380
   1143c:	movt	r0, #1
   11440:	bl	113a8 <bindtextdomain@plt>
   11444:	movw	r0, #58240	; 0xe380
   11448:	movt	r0, #1
   1144c:	bl	1118c <textdomain@plt>
   11450:	movw	r0, #20396	; 0x4fac
   11454:	movt	r0, #1
   11458:	bl	1d038 <__assert_fail@plt+0xbc54>
   1145c:	cmp	r5, #1
   11460:	strle	r6, [sp, #44]	; 0x2c
   11464:	ble	11478 <__assert_fail@plt+0x94>
   11468:	mov	r1, #4
   1146c:	sub	r0, r5, #1
   11470:	bl	1a664 <__assert_fail@plt+0x9280>
   11474:	str	r0, [sp, #44]	; 0x2c
   11478:	mov	sl, #0
   1147c:	movw	r6, #53340	; 0xd05c
   11480:	movt	r6, #1
   11484:	movw	r9, #61936	; 0xf1f0
   11488:	movt	r9, #2
   1148c:	movw	r3, #61928	; 0xf1e8
   11490:	movt	r3, #2
   11494:	mov	r8, sl
   11498:	add	r7, sp, #60	; 0x3c
   1149c:	str	r3, [sp, #24]
   114a0:	str	sl, [sp, #28]
   114a4:	str	sl, [sp, #36]	; 0x24
   114a8:	str	sl, [sp, #40]	; 0x28
   114ac:	str	sl, [sp, #48]	; 0x30
   114b0:	mvn	ip, #0
   114b4:	mov	r3, r6
   114b8:	ldr	r2, [pc, #3276]	; 1218c <__assert_fail@plt+0xda8>
   114bc:	mov	r1, r4
   114c0:	mov	r0, r5
   114c4:	str	r7, [sp]
   114c8:	str	ip, [sp, #60]	; 0x3c
   114cc:	bl	11270 <getopt_long@plt>
   114d0:	cmn	r0, #1
   114d4:	mov	fp, r0
   114d8:	beq	11e58 <__assert_fail@plt+0xa74>
   114dc:	sub	r3, r0, #48	; 0x30
   114e0:	cmp	r3, #9
   114e4:	bls	1190c <__assert_fail@plt+0x528>
   114e8:	add	fp, r0, #3
   114ec:	cmp	fp, #260	; 0x104
   114f0:	ldrls	pc, [pc, fp, lsl #2]
   114f4:	b	11e50 <__assert_fail@plt+0xa6c>
   114f8:	andeq	r1, r1, r4, lsl #25
   114fc:	andeq	r1, r1, ip, ror ip
   11500:	andeq	r1, r1, r0, asr lr
   11504:	andeq	r1, r1, r0, asr lr
   11508:	andeq	r1, r1, r0, asr ip
   1150c:	andeq	r1, r1, r0, asr lr
   11510:	andeq	r1, r1, r0, asr lr
   11514:	andeq	r1, r1, r0, asr lr
   11518:	andeq	r1, r1, r0, asr lr
   1151c:	andeq	r1, r1, r0, asr lr
   11520:	andeq	r1, r1, r0, asr lr
   11524:	andeq	r1, r1, r0, asr lr
   11528:	andeq	r1, r1, r0, asr lr
   1152c:	andeq	r1, r1, r0, asr lr
   11530:	andeq	r1, r1, r0, asr lr
   11534:	andeq	r1, r1, r0, asr lr
   11538:	andeq	r1, r1, r0, asr lr
   1153c:	andeq	r1, r1, r0, asr lr
   11540:	andeq	r1, r1, r0, asr lr
   11544:	andeq	r1, r1, r0, asr lr
   11548:	andeq	r1, r1, r0, asr lr
   1154c:	andeq	r1, r1, r0, asr lr
   11550:	andeq	r1, r1, r0, asr lr
   11554:	andeq	r1, r1, r0, asr lr
   11558:	andeq	r1, r1, r0, asr lr
   1155c:	andeq	r1, r1, r0, asr lr
   11560:	andeq	r1, r1, r0, asr lr
   11564:	andeq	r1, r1, r0, asr lr
   11568:	andeq	r1, r1, r0, asr lr
   1156c:	andeq	r1, r1, r0, asr lr
   11570:	andeq	r1, r1, r0, asr lr
   11574:	andeq	r1, r1, r0, asr lr
   11578:	andeq	r1, r1, r0, asr lr
   1157c:	andeq	r1, r1, r0, asr lr
   11580:	andeq	r1, r1, r0, asr lr
   11584:	andeq	r1, r1, r0, asr lr
   11588:	andeq	r1, r1, r0, asr lr
   1158c:	andeq	r1, r1, r0, asr lr
   11590:	andeq	r1, r1, r0, asr lr
   11594:	andeq	r1, r1, r0, asr lr
   11598:	andeq	r1, r1, r0, asr lr
   1159c:	andeq	r1, r1, r0, asr lr
   115a0:	andeq	r1, r1, r0, asr lr
   115a4:	andeq	r1, r1, r0, asr lr
   115a8:	andeq	r1, r1, r0, asr lr
   115ac:	andeq	r1, r1, r0, asr lr
   115b0:	andeq	r1, r1, r0, asr lr
   115b4:	andeq	r1, r1, r0, asr lr
   115b8:	andeq	r1, r1, r0, asr lr
   115bc:	andeq	r1, r1, r0, asr lr
   115c0:	andeq	r1, r1, r0, asr lr
   115c4:	andeq	r1, r1, r0, asr lr
   115c8:	andeq	r1, r1, r0, asr lr
   115cc:	andeq	r1, r1, r0, asr lr
   115d0:	andeq	r1, r1, r0, asr lr
   115d4:	andeq	r1, r1, r0, asr lr
   115d8:	andeq	r1, r1, r0, asr lr
   115dc:	andeq	r1, r1, r0, asr lr
   115e0:	andeq	r1, r1, r0, asr lr
   115e4:	andeq	r1, r1, r0, asr lr
   115e8:	andeq	r1, r1, r0, asr lr
   115ec:	andeq	r1, r1, r0, asr lr
   115f0:	andeq	r1, r1, r0, asr lr
   115f4:	andeq	r1, r1, r0, asr lr
   115f8:	andeq	r1, r1, r0, asr lr
   115fc:	andeq	r1, r1, r0, asr lr
   11600:	andeq	r1, r1, r0, asr lr
   11604:	andeq	r1, r1, r0, asr lr
   11608:	andeq	r1, r1, r0, asr lr
   1160c:	andeq	r1, r1, r0, asr lr
   11610:	andeq	r1, r1, r0, asr lr
   11614:	andeq	r1, r1, r0, asr #24
   11618:	andeq	r1, r1, r0, asr lr
   1161c:	andeq	r1, r1, r4, lsr ip
   11620:	andeq	r1, r1, r0, asr lr
   11624:	andeq	r1, r1, r0, asr lr
   11628:	andeq	r1, r1, r0, asr lr
   1162c:	andeq	r1, r1, r8, lsr #24
   11630:	andeq	r1, r1, r0, asr lr
   11634:	andeq	r1, r1, r0, asr lr
   11638:	andeq	r1, r1, r0, asr lr
   1163c:	andeq	r1, r1, r8, lsr #27
   11640:	andeq	r1, r1, r0, asr lr
   11644:	andeq	r1, r1, r0, asr lr
   11648:	andeq	r1, r1, r0, asr lr
   1164c:	andeq	r1, r1, r0, asr lr
   11650:	andeq	r1, r1, r8, asr sp
   11654:	andeq	r1, r1, r0, asr #26
   11658:	andeq	r1, r1, r0, asr lr
   1165c:	andeq	r1, r1, r0, asr lr
   11660:	ldrdeq	r1, [r1], -r4
   11664:	andeq	r1, r1, r0, asr lr
   11668:	andeq	r1, r1, r0, asr lr
   1166c:	andeq	r1, r1, r0, asr lr
   11670:	andeq	r1, r1, r0, asr lr
   11674:	andeq	r1, r1, r0, asr lr
   11678:	andeq	r1, r1, r0, asr lr
   1167c:	andeq	r1, r1, r0, asr lr
   11680:	andeq	r1, r1, r0, asr lr
   11684:	andeq	r1, r1, r0, asr lr
   11688:	andeq	r1, r1, r8, lsr #28
   1168c:	andeq	r1, r1, ip, lsl lr
   11690:	andeq	r1, r1, r4, asr #28
   11694:	andeq	r1, r1, ip, lsl ip
   11698:	strdeq	r1, [r1], -r0
   1169c:	andeq	r1, r1, r4, lsr ip
   116a0:	andeq	r1, r1, r0, asr lr
   116a4:	andeq	r1, r1, r0, ror #23
   116a8:			; <UNDEFINED> instruction: 0x00011bb4
   116ac:	andeq	r1, r1, r0, asr lr
   116b0:	andeq	r1, r1, r0, asr lr
   116b4:	andeq	r1, r1, r0, asr fp
   116b8:	andeq	r1, r1, r4, lsr fp
   116bc:	andeq	r1, r1, r8, lsl #22
   116c0:	andeq	r1, r1, ip, lsr #21
   116c4:	andeq	r1, r1, r0, asr lr
   116c8:	andeq	r1, r1, r0, asr lr
   116cc:	andeq	r1, r1, r0, lsr #21
   116d0:	andeq	r1, r1, ip, asr #20
   116d4:	andeq	r1, r1, r0, lsr sl
   116d8:	andeq	r1, r1, r0, asr lr
   116dc:	andeq	r1, r1, r4, lsr #20
   116e0:	muleq	r1, ip, r9
   116e4:	andeq	r1, r1, r0, asr lr
   116e8:	andeq	r1, r1, r0, asr lr
   116ec:	andeq	r1, r1, r0, asr lr
   116f0:	andeq	r1, r1, r0, asr lr
   116f4:	andeq	r1, r1, r0, asr lr
   116f8:	andeq	r1, r1, r0, asr lr
   116fc:	andeq	r1, r1, r0, asr lr
   11700:	andeq	r1, r1, r0, asr lr
   11704:	andeq	r1, r1, r0, asr lr
   11708:	andeq	r1, r1, r0, asr lr
   1170c:	andeq	r1, r1, r0, asr lr
   11710:	andeq	r1, r1, r0, asr lr
   11714:	andeq	r1, r1, r0, asr lr
   11718:	andeq	r1, r1, r0, asr lr
   1171c:	andeq	r1, r1, r0, asr lr
   11720:	andeq	r1, r1, r0, asr lr
   11724:	andeq	r1, r1, r0, asr lr
   11728:	andeq	r1, r1, r0, asr lr
   1172c:	andeq	r1, r1, r0, asr lr
   11730:	andeq	r1, r1, r0, asr lr
   11734:	andeq	r1, r1, r0, asr lr
   11738:	andeq	r1, r1, r0, asr lr
   1173c:	andeq	r1, r1, r0, asr lr
   11740:	andeq	r1, r1, r0, asr lr
   11744:	andeq	r1, r1, r0, asr lr
   11748:	andeq	r1, r1, r0, asr lr
   1174c:	andeq	r1, r1, r0, asr lr
   11750:	andeq	r1, r1, r0, asr lr
   11754:	andeq	r1, r1, r0, asr lr
   11758:	andeq	r1, r1, r0, asr lr
   1175c:	andeq	r1, r1, r0, asr lr
   11760:	andeq	r1, r1, r0, asr lr
   11764:	andeq	r1, r1, r0, asr lr
   11768:	andeq	r1, r1, r0, asr lr
   1176c:	andeq	r1, r1, r0, asr lr
   11770:	andeq	r1, r1, r0, asr lr
   11774:	andeq	r1, r1, r0, asr lr
   11778:	andeq	r1, r1, r0, asr lr
   1177c:	andeq	r1, r1, r0, asr lr
   11780:	andeq	r1, r1, r0, asr lr
   11784:	andeq	r1, r1, r0, asr lr
   11788:	andeq	r1, r1, r0, asr lr
   1178c:	andeq	r1, r1, r0, asr lr
   11790:	andeq	r1, r1, r0, asr lr
   11794:	andeq	r1, r1, r0, asr lr
   11798:	andeq	r1, r1, r0, asr lr
   1179c:	andeq	r1, r1, r0, asr lr
   117a0:	andeq	r1, r1, r0, asr lr
   117a4:	andeq	r1, r1, r0, asr lr
   117a8:	andeq	r1, r1, r0, asr lr
   117ac:	andeq	r1, r1, r0, asr lr
   117b0:	andeq	r1, r1, r0, asr lr
   117b4:	andeq	r1, r1, r0, asr lr
   117b8:	andeq	r1, r1, r0, asr lr
   117bc:	andeq	r1, r1, r0, asr lr
   117c0:	andeq	r1, r1, r0, asr lr
   117c4:	andeq	r1, r1, r0, asr lr
   117c8:	andeq	r1, r1, r0, asr lr
   117cc:	andeq	r1, r1, r0, asr lr
   117d0:	andeq	r1, r1, r0, asr lr
   117d4:	andeq	r1, r1, r0, asr lr
   117d8:	andeq	r1, r1, r0, asr lr
   117dc:	andeq	r1, r1, r0, asr lr
   117e0:	andeq	r1, r1, r0, asr lr
   117e4:	andeq	r1, r1, r0, asr lr
   117e8:	andeq	r1, r1, r0, asr lr
   117ec:	andeq	r1, r1, r0, asr lr
   117f0:	andeq	r1, r1, r0, asr lr
   117f4:	andeq	r1, r1, r0, asr lr
   117f8:	andeq	r1, r1, r0, asr lr
   117fc:	andeq	r1, r1, r0, asr lr
   11800:	andeq	r1, r1, r0, asr lr
   11804:	andeq	r1, r1, r0, asr lr
   11808:	andeq	r1, r1, r0, asr lr
   1180c:	andeq	r1, r1, r0, asr lr
   11810:	andeq	r1, r1, r0, asr lr
   11814:	andeq	r1, r1, r0, asr lr
   11818:	andeq	r1, r1, r0, asr lr
   1181c:	andeq	r1, r1, r0, asr lr
   11820:	andeq	r1, r1, r0, asr lr
   11824:	andeq	r1, r1, r0, asr lr
   11828:	andeq	r1, r1, r0, asr lr
   1182c:	andeq	r1, r1, r0, asr lr
   11830:	andeq	r1, r1, r0, asr lr
   11834:	andeq	r1, r1, r0, asr lr
   11838:	andeq	r1, r1, r0, asr lr
   1183c:	andeq	r1, r1, r0, asr lr
   11840:	andeq	r1, r1, r0, asr lr
   11844:	andeq	r1, r1, r0, asr lr
   11848:	andeq	r1, r1, r0, asr lr
   1184c:	andeq	r1, r1, r0, asr lr
   11850:	andeq	r1, r1, r0, asr lr
   11854:	andeq	r1, r1, r0, asr lr
   11858:	andeq	r1, r1, r0, asr lr
   1185c:	andeq	r1, r1, r0, asr lr
   11860:	andeq	r1, r1, r0, asr lr
   11864:	andeq	r1, r1, r0, asr lr
   11868:	andeq	r1, r1, r0, asr lr
   1186c:	andeq	r1, r1, r0, asr lr
   11870:	andeq	r1, r1, r0, asr lr
   11874:	andeq	r1, r1, r0, asr lr
   11878:	andeq	r1, r1, r0, asr lr
   1187c:	andeq	r1, r1, r0, asr lr
   11880:	andeq	r1, r1, r0, asr lr
   11884:	andeq	r1, r1, r0, asr lr
   11888:	andeq	r1, r1, r0, asr lr
   1188c:	andeq	r1, r1, r0, asr lr
   11890:	andeq	r1, r1, r0, asr lr
   11894:	andeq	r1, r1, r0, asr lr
   11898:	andeq	r1, r1, r0, asr lr
   1189c:	andeq	r1, r1, r0, asr lr
   118a0:	andeq	r1, r1, r0, asr lr
   118a4:	andeq	r1, r1, r0, asr lr
   118a8:	andeq	r1, r1, r0, asr lr
   118ac:	andeq	r1, r1, r0, asr lr
   118b0:	andeq	r1, r1, r0, asr lr
   118b4:	andeq	r1, r1, r0, asr lr
   118b8:	andeq	r1, r1, r0, asr lr
   118bc:	andeq	r1, r1, r0, asr lr
   118c0:	andeq	r1, r1, r0, asr lr
   118c4:	andeq	r1, r1, r0, asr lr
   118c8:	andeq	r1, r1, r0, asr lr
   118cc:	andeq	r1, r1, r0, asr lr
   118d0:	andeq	r1, r1, r0, asr lr
   118d4:	andeq	r1, r1, r0, asr lr
   118d8:	andeq	r1, r1, r0, asr lr
   118dc:	andeq	r1, r1, r0, asr lr
   118e0:	andeq	r1, r1, r0, asr lr
   118e4:	andeq	r1, r1, r0, asr lr
   118e8:	andeq	r1, r1, r0, asr lr
   118ec:	andeq	r1, r1, r0, asr lr
   118f0:	andeq	r1, r1, r0, asr lr
   118f4:	andeq	r1, r1, r0, asr lr
   118f8:	andeq	r1, r1, r0, asr lr
   118fc:	andeq	r1, r1, r0, asr lr
   11900:	andeq	r1, r1, r0, asr lr
   11904:	andeq	r1, r1, r8, ror r9
   11908:	andeq	r1, r1, ip, asr #18
   1190c:	ldr	r2, [sp, #56]	; 0x38
   11910:	add	r3, sl, #1
   11914:	cmp	r3, r2
   11918:	bcs	11930 <__assert_fail@plt+0x54c>
   1191c:	mov	r2, #0
   11920:	strb	fp, [r8, sl]
   11924:	mov	sl, r3
   11928:	strb	r2, [r8, r3]
   1192c:	b	114b0 <__assert_fail@plt+0xcc>
   11930:	mov	r0, r8
   11934:	add	r1, sp, #56	; 0x38
   11938:	str	r3, [sp, #32]
   1193c:	bl	1a6ec <__assert_fail@plt+0x9308>
   11940:	mov	r8, r0
   11944:	ldr	r3, [sp, #32]
   11948:	b	1191c <__assert_fail@plt+0x538>
   1194c:	ldr	r3, [sp, #24]
   11950:	ldr	r2, [r3]
   11954:	cmp	r2, #0
   11958:	beq	12154 <__assert_fail@plt+0xd70>
   1195c:	mov	r1, #0
   11960:	ldr	r0, [sp, #60]	; 0x3c
   11964:	bl	123fc <__assert_fail@plt+0x1018>
   11968:	subs	sl, r0, #0
   1196c:	beq	12120 <__assert_fail@plt+0xd3c>
   11970:	mov	sl, #0
   11974:	b	114b0 <__assert_fail@plt+0xcc>
   11978:	ldr	r3, [sp, #24]
   1197c:	ldr	r0, [r3]
   11980:	bl	12520 <__assert_fail@plt+0x113c>
   11984:	mov	r0, r8
   11988:	bl	152ac <__assert_fail@plt+0x3ec8>
   1198c:	mov	r3, #0
   11990:	mov	r8, r3
   11994:	str	r3, [sp, #56]	; 0x38
   11998:	b	11970 <__assert_fail@plt+0x58c>
   1199c:	ldr	r3, [sp, #24]
   119a0:	mov	r2, #5
   119a4:	movw	r1, #58724	; 0xe564
   119a8:	movt	r1, #1
   119ac:	mov	r0, #0
   119b0:	mvn	sl, #-2147483648	; 0x80000000
   119b4:	mov	fp, #0
   119b8:	ldr	r3, [r3]
   119bc:	str	r3, [sp, #32]
   119c0:	bl	11168 <dcgettext@plt>
   119c4:	ldr	r3, [sp, #32]
   119c8:	mov	r1, #0
   119cc:	movw	r2, #53980	; 0xd2dc
   119d0:	movt	r2, #1
   119d4:	strd	sl, [sp]
   119d8:	str	r2, [sp, #8]
   119dc:	mov	r2, #1
   119e0:	strd	r0, [sp, #12]
   119e4:	mov	r0, r3
   119e8:	mov	r3, #0
   119ec:	bl	1ab20 <__assert_fail@plt+0x973c>
   119f0:	ldrb	r3, [r9, #156]	; 0x9c
   119f4:	cmp	r3, #0
   119f8:	str	r3, [sp, #36]	; 0x24
   119fc:	ldrne	r3, [sp, #36]	; 0x24
   11a00:	strne	r3, [sp, #40]	; 0x28
   11a04:	bne	11970 <__assert_fail@plt+0x58c>
   11a08:	mov	r2, #1
   11a0c:	movw	r3, #61760	; 0xf140
   11a10:	movt	r3, #2
   11a14:	str	r2, [sp, #36]	; 0x24
   11a18:	str	r0, [r3, #16]
   11a1c:	str	r2, [sp, #40]	; 0x28
   11a20:	b	11970 <__assert_fail@plt+0x58c>
   11a24:	mov	r3, #1
   11a28:	strb	r3, [r9, #117]	; 0x75
   11a2c:	b	11970 <__assert_fail@plt+0x58c>
   11a30:	movw	r3, #61760	; 0xf140
   11a34:	movt	r3, #2
   11a38:	mov	r1, #0
   11a3c:	mov	r2, #1
   11a40:	strb	r1, [r3, #40]	; 0x28
   11a44:	strb	r2, [r9, #158]	; 0x9e
   11a48:	b	11970 <__assert_fail@plt+0x58c>
   11a4c:	ldrb	r3, [r9, #132]	; 0x84
   11a50:	cmp	r3, #0
   11a54:	str	r3, [sp, #36]	; 0x24
   11a58:	ldrne	r3, [sp, #36]	; 0x24
   11a5c:	strne	r3, [sp, #48]	; 0x30
   11a60:	bne	11970 <__assert_fail@plt+0x58c>
   11a64:	ldr	r3, [sp, #24]
   11a68:	ldr	sl, [r3]
   11a6c:	cmp	sl, #0
   11a70:	beq	120e0 <__assert_fail@plt+0xcfc>
   11a74:	mov	r3, #1
   11a78:	mov	r0, sl
   11a7c:	mov	fp, r3
   11a80:	str	r3, [sp, #48]	; 0x30
   11a84:	bl	11294 <strlen@plt>
   11a88:	movw	r3, #61760	; 0xf140
   11a8c:	movt	r3, #2
   11a90:	str	fp, [sp, #36]	; 0x24
   11a94:	str	r0, [r9, #88]	; 0x58
   11a98:	str	sl, [r3, #28]
   11a9c:	b	11970 <__assert_fail@plt+0x58c>
   11aa0:	mov	r3, #1
   11aa4:	strb	r3, [r9, #168]	; 0xa8
   11aa8:	b	11970 <__assert_fail@plt+0x58c>
   11aac:	ldr	r3, [sp, #24]
   11ab0:	mov	r2, #5
   11ab4:	movw	r1, #58692	; 0xe544
   11ab8:	movt	r1, #1
   11abc:	mov	r0, #0
   11ac0:	mvn	sl, #-2147483648	; 0x80000000
   11ac4:	mov	fp, #0
   11ac8:	ldr	r3, [r3]
   11acc:	str	r3, [sp, #32]
   11ad0:	bl	11168 <dcgettext@plt>
   11ad4:	ldr	r3, [sp, #32]
   11ad8:	mov	r1, #0
   11adc:	movw	r2, #53980	; 0xd2dc
   11ae0:	movt	r2, #1
   11ae4:	strd	sl, [sp]
   11ae8:	str	r2, [sp, #8]
   11aec:	mov	r2, #0
   11af0:	strd	r0, [sp, #12]
   11af4:	mov	r0, r3
   11af8:	mov	r3, #0
   11afc:	bl	1ab20 <__assert_fail@plt+0x973c>
   11b00:	str	r0, [r9, #92]	; 0x5c
   11b04:	b	11970 <__assert_fail@plt+0x58c>
   11b08:	ldr	r3, [sp, #24]
   11b0c:	ldr	r0, [r3]
   11b10:	mov	r3, #1
   11b14:	strb	r3, [r9, #183]	; 0xb7
   11b18:	cmp	r0, #0
   11b1c:	beq	11970 <__assert_fail@plt+0x58c>
   11b20:	ldr	r3, [pc, #1640]	; 12190 <__assert_fail@plt+0xdac>
   11b24:	mov	r1, #110	; 0x6e
   11b28:	add	r2, r3, #4
   11b2c:	bl	14eb4 <__assert_fail@plt+0x3ad0>
   11b30:	b	11970 <__assert_fail@plt+0x58c>
   11b34:	movw	r3, #61760	; 0xf140
   11b38:	movt	r3, #2
   11b3c:	mov	r1, #0
   11b40:	mov	r2, #1
   11b44:	strb	r1, [r3, #4]
   11b48:	strb	r2, [r9, #68]	; 0x44
   11b4c:	b	11970 <__assert_fail@plt+0x58c>
   11b50:	ldr	r3, [sp, #24]
   11b54:	mov	r2, #5
   11b58:	movw	r1, #58604	; 0xe4ec
   11b5c:	movt	r1, #1
   11b60:	mov	r0, #0
   11b64:	mvn	sl, #-2147483648	; 0x80000000
   11b68:	mov	fp, #0
   11b6c:	ldr	r3, [r3]
   11b70:	str	r3, [sp, #32]
   11b74:	bl	11168 <dcgettext@plt>
   11b78:	ldr	r3, [sp, #32]
   11b7c:	mov	r1, #0
   11b80:	movw	r2, #53980	; 0xd2dc
   11b84:	movt	r2, #1
   11b88:	strd	sl, [sp]
   11b8c:	str	r2, [sp, #8]
   11b90:	mov	r2, #1
   11b94:	strd	r0, [sp, #12]
   11b98:	mov	r0, r3
   11b9c:	mov	r3, #0
   11ba0:	bl	1ab20 <__assert_fail@plt+0x973c>
   11ba4:	movw	r3, #61760	; 0xf140
   11ba8:	movt	r3, #2
   11bac:	str	r0, [r3, #56]	; 0x38
   11bb0:	b	11970 <__assert_fail@plt+0x58c>
   11bb4:	ldr	r3, [sp, #24]
   11bb8:	ldr	r0, [r3]
   11bbc:	cmp	r0, #0
   11bc0:	beq	11bd4 <__assert_fail@plt+0x7f0>
   11bc4:	ldr	r3, [pc, #1480]	; 12194 <__assert_fail@plt+0xdb0>
   11bc8:	mov	r1, #105	; 0x69
   11bcc:	sub	r2, r3, #4
   11bd0:	bl	14eb4 <__assert_fail@plt+0x3ad0>
   11bd4:	mov	r3, #1
   11bd8:	strb	r3, [r9, #76]	; 0x4c
   11bdc:	b	11970 <__assert_fail@plt+0x58c>
   11be0:	ldr	r3, [sp, #24]
   11be4:	ldr	r3, [r3]
   11be8:	str	r3, [r9, #56]	; 0x38
   11bec:	b	11970 <__assert_fail@plt+0x58c>
   11bf0:	ldr	r3, [sp, #24]
   11bf4:	ldr	r0, [r3]
   11bf8:	cmp	r0, #0
   11bfc:	beq	11c10 <__assert_fail@plt+0x82c>
   11c00:	ldr	r3, [pc, #1424]	; 12198 <__assert_fail@plt+0xdb4>
   11c04:	mov	r1, #101	; 0x65
   11c08:	sub	r2, r3, #4
   11c0c:	bl	14eb4 <__assert_fail@plt+0x3ad0>
   11c10:	mov	r3, #1
   11c14:	strb	r3, [r9, #116]	; 0x74
   11c18:	b	11970 <__assert_fail@plt+0x58c>
   11c1c:	mov	r3, #1
   11c20:	strb	r3, [r9, #180]	; 0xb4
   11c24:	b	11970 <__assert_fail@plt+0x58c>
   11c28:	mov	r3, #1
   11c2c:	strb	r3, [r9, #182]	; 0xb6
   11c30:	b	11970 <__assert_fail@plt+0x58c>
   11c34:	mov	r3, #1
   11c38:	strb	r3, [r9, #184]	; 0xb8
   11c3c:	b	11970 <__assert_fail@plt+0x58c>
   11c40:	ldr	r3, [sp, #24]
   11c44:	ldr	r3, [r3]
   11c48:	str	r3, [r9, #48]	; 0x30
   11c4c:	b	11970 <__assert_fail@plt+0x58c>
   11c50:	ldrd	r2, [r9, #24]
   11c54:	orrs	r3, r2, r3
   11c58:	beq	11fc8 <__assert_fail@plt+0xbe4>
   11c5c:	ldr	r3, [sp, #24]
   11c60:	ldr	r2, [sp, #28]
   11c64:	ldr	r1, [sp, #44]	; 0x2c
   11c68:	ldr	r3, [r3]
   11c6c:	str	r3, [r1, r2, lsl #2]
   11c70:	add	r3, r2, #1
   11c74:	str	r3, [sp, #28]
   11c78:	b	11970 <__assert_fail@plt+0x58c>
   11c7c:	mov	r0, #0
   11c80:	bl	149f8 <__assert_fail@plt+0x3614>
   11c84:	mov	r4, #0
   11c88:	movw	r1, #58820	; 0xe5c4
   11c8c:	movt	r1, #1
   11c90:	movw	r2, #58836	; 0xe5d4
   11c94:	movt	r2, #1
   11c98:	movw	r3, #61824	; 0xf180
   11c9c:	movt	r3, #2
   11ca0:	movw	r0, #61924	; 0xf1e4
   11ca4:	movt	r0, #2
   11ca8:	str	r2, [sp]
   11cac:	movw	r2, #58236	; 0xe37c
   11cb0:	movt	r2, #1
   11cb4:	stmib	sp, {r1, r4}
   11cb8:	movw	r1, #54116	; 0xd364
   11cbc:	movt	r1, #1
   11cc0:	ldr	r0, [r0]
   11cc4:	ldr	r3, [r3]
   11cc8:	bl	1a3ec <__assert_fail@plt+0x9008>
   11ccc:	mov	r0, r4
   11cd0:	bl	11288 <exit@plt>
   11cd4:	ldr	r3, [sp, #24]
   11cd8:	mov	r0, #0
   11cdc:	mov	r2, #5
   11ce0:	mov	sl, r0
   11ce4:	movw	r1, #58772	; 0xe594
   11ce8:	movt	r1, #1
   11cec:	ldr	fp, [r3]
   11cf0:	mov	r3, #1
   11cf4:	strb	r3, [r9, #156]	; 0x9c
   11cf8:	bl	11168 <dcgettext@plt>
   11cfc:	movw	r3, #53980	; 0xd2dc
   11d00:	movt	r3, #1
   11d04:	mov	r2, #1
   11d08:	str	r0, [sp, #12]
   11d0c:	mov	r0, fp
   11d10:	mov	fp, #0
   11d14:	str	sl, [sp, #16]
   11d18:	str	sl, [sp, #40]	; 0x28
   11d1c:	mvn	sl, #-2147483648	; 0x80000000
   11d20:	strd	sl, [sp]
   11d24:	str	r3, [sp, #8]
   11d28:	mov	r3, #0
   11d2c:	bl	1ab20 <__assert_fail@plt+0x973c>
   11d30:	movw	r3, #61760	; 0xf140
   11d34:	movt	r3, #2
   11d38:	str	r0, [r3, #16]
   11d3c:	b	11970 <__assert_fail@plt+0x58c>
   11d40:	mov	r2, #0
   11d44:	movw	r3, #61760	; 0xf140
   11d48:	movt	r3, #2
   11d4c:	strb	r2, [r9, #158]	; 0x9e
   11d50:	strb	r2, [r3, #40]	; 0x28
   11d54:	b	11970 <__assert_fail@plt+0x58c>
   11d58:	ldr	r3, [sp, #24]
   11d5c:	mov	r2, #0
   11d60:	movw	sl, #61760	; 0xf140
   11d64:	movt	sl, #2
   11d68:	mov	r1, #1
   11d6c:	str	r2, [r9, #88]	; 0x58
   11d70:	strb	r1, [r9, #132]	; 0x84
   11d74:	ldr	fp, [r3]
   11d78:	movw	r3, #53980	; 0xd2dc
   11d7c:	movt	r3, #1
   11d80:	str	r3, [sl, #28]
   11d84:	cmp	fp, r2
   11d88:	streq	fp, [sp, #48]	; 0x30
   11d8c:	beq	11970 <__assert_fail@plt+0x58c>
   11d90:	mov	r0, fp
   11d94:	str	r2, [sp, #48]	; 0x30
   11d98:	bl	11294 <strlen@plt>
   11d9c:	str	fp, [sl, #28]
   11da0:	str	r0, [r9, #88]	; 0x58
   11da4:	b	11970 <__assert_fail@plt+0x58c>
   11da8:	ldr	r3, [sp, #24]
   11dac:	mov	fp, #0
   11db0:	mov	r2, #5
   11db4:	mov	r0, fp
   11db8:	movw	r1, #58648	; 0xe518
   11dbc:	movt	r1, #1
   11dc0:	mvn	sl, #-2147483648	; 0x80000000
   11dc4:	ldr	r3, [r3]
   11dc8:	str	r3, [sp, #52]	; 0x34
   11dcc:	movw	r3, #61760	; 0xf140
   11dd0:	movt	r3, #2
   11dd4:	str	r3, [sp, #32]
   11dd8:	strb	fp, [r3, #41]	; 0x29
   11ddc:	bl	11168 <dcgettext@plt>
   11de0:	ldr	r3, [sp, #52]	; 0x34
   11de4:	movw	r2, #53980	; 0xd2dc
   11de8:	movt	r2, #1
   11dec:	str	fp, [sp, #16]
   11df0:	mov	fp, #0
   11df4:	str	r0, [sp, #12]
   11df8:	strd	sl, [sp]
   11dfc:	mov	r0, r3
   11e00:	mvn	r3, #0
   11e04:	str	r2, [sp, #8]
   11e08:	mov	r2, #-2147483648	; 0x80000000
   11e0c:	bl	1ab20 <__assert_fail@plt+0x973c>
   11e10:	ldr	r3, [sp, #32]
   11e14:	str	r0, [r3, #60]	; 0x3c
   11e18:	b	11970 <__assert_fail@plt+0x58c>
   11e1c:	mov	r3, #1
   11e20:	strb	r3, [r9, #181]	; 0xb5
   11e24:	b	11970 <__assert_fail@plt+0x58c>
   11e28:	movw	r3, #61760	; 0xf140
   11e2c:	movt	r3, #2
   11e30:	mov	r1, #0
   11e34:	mov	r2, #1
   11e38:	strb	r1, [r3, #4]
   11e3c:	strb	r2, [r9, #185]	; 0xb9
   11e40:	b	11970 <__assert_fail@plt+0x58c>
   11e44:	mov	r3, #1
   11e48:	strb	r3, [r9, #118]	; 0x76
   11e4c:	b	11970 <__assert_fail@plt+0x58c>
   11e50:	mov	r0, #1
   11e54:	bl	149f8 <__assert_fail@plt+0x3614>
   11e58:	cmp	r8, #0
   11e5c:	beq	11e70 <__assert_fail@plt+0xa8c>
   11e60:	mov	r0, r8
   11e64:	bl	12520 <__assert_fail@plt+0x113c>
   11e68:	mov	r0, r8
   11e6c:	bl	152ac <__assert_fail@plt+0x3ec8>
   11e70:	movw	r6, #61936	; 0xf1f0
   11e74:	movt	r6, #2
   11e78:	ldr	r3, [r6, #48]	; 0x30
   11e7c:	cmp	r3, #0
   11e80:	beq	12094 <__assert_fail@plt+0xcb0>
   11e84:	movw	r0, #58868	; 0xe5f4
   11e88:	movt	r0, #1
   11e8c:	bl	11210 <getenv@plt>
   11e90:	bl	19ae4 <__assert_fail@plt+0x8700>
   11e94:	ldrd	r2, [r6, #24]
   11e98:	str	r0, [r6, #44]	; 0x2c
   11e9c:	orrs	r3, r2, r3
   11ea0:	bne	11eb0 <__assert_fail@plt+0xacc>
   11ea4:	mov	r2, #1
   11ea8:	mov	r3, #0
   11eac:	strd	r2, [r6, #24]
   11eb0:	ldrb	r0, [r6, #68]	; 0x44
   11eb4:	cmp	r0, #0
   11eb8:	beq	11edc <__assert_fail@plt+0xaf8>
   11ebc:	ldrb	r7, [r6, #32]
   11ec0:	cmp	r7, #0
   11ec4:	bne	120fc <__assert_fail@plt+0xd18>
   11ec8:	ldrb	r3, [r6, #185]	; 0xb9
   11ecc:	cmp	r3, #0
   11ed0:	movwne	r1, #58932	; 0xe634
   11ed4:	movtne	r1, #1
   11ed8:	bne	12104 <__assert_fail@plt+0xd20>
   11edc:	ldr	r3, [sp, #36]	; 0x24
   11ee0:	cmp	r3, #0
   11ee4:	bne	11ff4 <__assert_fail@plt+0xc10>
   11ee8:	movw	lr, #61904	; 0xf1d0
   11eec:	movt	lr, #2
   11ef0:	ldr	ip, [lr]
   11ef4:	cmp	r5, ip
   11ef8:	ble	11f34 <__assert_fail@plt+0xb50>
   11efc:	ldr	r1, [sp, #28]
   11f00:	add	r3, r4, ip, lsl #2
   11f04:	add	r4, r4, r5, lsl #2
   11f08:	ldr	r2, [sp, #44]	; 0x2c
   11f0c:	add	r2, r2, r1, lsl #2
   11f10:	ldr	r1, [r3], #4
   11f14:	cmp	r3, r4
   11f18:	str	r1, [r2], #4
   11f1c:	bne	11f10 <__assert_fail@plt+0xb2c>
   11f20:	ldr	r3, [sp, #28]
   11f24:	sub	ip, r5, ip
   11f28:	str	r5, [lr]
   11f2c:	add	r3, r3, ip
   11f30:	str	r3, [sp, #28]
   11f34:	ldr	r3, [sp, #28]
   11f38:	cmp	r3, #0
   11f3c:	beq	12028 <__assert_fail@plt+0xc44>
   11f40:	cmp	r0, #0
   11f44:	ldreq	r3, [sp, #28]
   11f48:	ldreq	r4, [sp, #44]	; 0x2c
   11f4c:	addeq	r5, r4, r3, lsl #2
   11f50:	bne	12084 <__assert_fail@plt+0xca0>
   11f54:	mov	r1, r4
   11f58:	mov	r0, #1
   11f5c:	add	r4, r4, #4
   11f60:	bl	13b48 <__assert_fail@plt+0x2764>
   11f64:	cmp	r5, r4
   11f68:	bne	11f54 <__assert_fail@plt+0xb70>
   11f6c:	ldr	r0, [r6, #144]	; 0x90
   11f70:	bl	152ac <__assert_fail@plt+0x3ec8>
   11f74:	ldr	r0, [r6, #108]	; 0x6c
   11f78:	bl	152ac <__assert_fail@plt+0x3ec8>
   11f7c:	ldr	r0, [r6]
   11f80:	bl	152ac <__assert_fail@plt+0x3ec8>
   11f84:	ldr	r0, [r6, #120]	; 0x78
   11f88:	bl	152ac <__assert_fail@plt+0x3ec8>
   11f8c:	ldr	r0, [r6, #136]	; 0x88
   11f90:	bl	152ac <__assert_fail@plt+0x3ec8>
   11f94:	ldr	r0, [r6, #12]
   11f98:	bl	152ac <__assert_fail@plt+0x3ec8>
   11f9c:	ldrb	r3, [r6, #166]	; 0xa6
   11fa0:	cmp	r3, #0
   11fa4:	beq	11fc0 <__assert_fail@plt+0xbdc>
   11fa8:	movw	r3, #61920	; 0xf1e0
   11fac:	movt	r3, #2
   11fb0:	ldr	r0, [r3]
   11fb4:	bl	150ec <__assert_fail@plt+0x3d08>
   11fb8:	cmn	r0, #1
   11fbc:	beq	12160 <__assert_fail@plt+0xd7c>
   11fc0:	ldrb	r0, [r6, #167]	; 0xa7
   11fc4:	bl	11288 <exit@plt>
   11fc8:	ldr	r3, [sp, #24]
   11fcc:	ldr	r2, [r3]
   11fd0:	ldrb	r1, [r2]
   11fd4:	cmp	r1, #43	; 0x2b
   11fd8:	bne	11c5c <__assert_fail@plt+0x878>
   11fdc:	add	r2, r2, #1
   11fe0:	mvn	r0, #1
   11fe4:	bl	123fc <__assert_fail@plt+0x1018>
   11fe8:	cmp	r0, #0
   11fec:	bne	11970 <__assert_fail@plt+0x58c>
   11ff0:	b	11c5c <__assert_fail@plt+0x878>
   11ff4:	ldr	r3, [sp, #40]	; 0x28
   11ff8:	cmp	r3, #0
   11ffc:	beq	12038 <__assert_fail@plt+0xc54>
   12000:	cmp	r0, #0
   12004:	beq	120c8 <__assert_fail@plt+0xce4>
   12008:	ldr	r2, [sp, #48]	; 0x30
   1200c:	mov	r3, #1
   12010:	strb	r3, [r6, #156]	; 0x9c
   12014:	cmp	r2, #0
   12018:	beq	11ee8 <__assert_fail@plt+0xb04>
   1201c:	mov	r3, #1
   12020:	strb	r3, [r6, #132]	; 0x84
   12024:	b	11ee8 <__assert_fail@plt+0xb04>
   12028:	mov	r1, r3
   1202c:	mov	r0, r3
   12030:	bl	13b48 <__assert_fail@plt+0x2764>
   12034:	b	11f6c <__assert_fail@plt+0xb88>
   12038:	ldrb	r3, [r6, #132]	; 0x84
   1203c:	ldr	r2, [sp, #48]	; 0x30
   12040:	eor	r3, r3, #1
   12044:	tst	r2, r3
   12048:	beq	11ee8 <__assert_fail@plt+0xb04>
   1204c:	cmp	r0, #0
   12050:	bne	12060 <__assert_fail@plt+0xc7c>
   12054:	ldrb	r3, [r6, #32]
   12058:	cmp	r3, #0
   1205c:	beq	11ee8 <__assert_fail@plt+0xb04>
   12060:	ldrb	r3, [r6, #156]	; 0x9c
   12064:	cmp	r3, #0
   12068:	bne	1201c <__assert_fail@plt+0xc38>
   1206c:	ldr	r3, [r6, #88]	; 0x58
   12070:	mov	r2, #1
   12074:	strb	r2, [r6, #182]	; 0xb6
   12078:	cmp	r3, #0
   1207c:	bgt	1201c <__assert_fail@plt+0xc38>
   12080:	b	11ee8 <__assert_fail@plt+0xb04>
   12084:	ldr	r0, [sp, #28]
   12088:	ldr	r1, [sp, #44]	; 0x2c
   1208c:	bl	13b48 <__assert_fail@plt+0x2764>
   12090:	b	11f6c <__assert_fail@plt+0xb88>
   12094:	movw	r0, #58852	; 0xe5e4
   12098:	movt	r0, #1
   1209c:	bl	11210 <getenv@plt>
   120a0:	cmp	r0, #0
   120a4:	beq	120f0 <__assert_fail@plt+0xd0c>
   120a8:	mov	r0, #2
   120ac:	bl	15420 <__assert_fail@plt+0x403c>
   120b0:	cmp	r0, #0
   120b4:	bne	120f0 <__assert_fail@plt+0xd0c>
   120b8:	movw	r3, #58488	; 0xe478
   120bc:	movt	r3, #1
   120c0:	str	r3, [r6, #48]	; 0x30
   120c4:	b	11e84 <__assert_fail@plt+0xaa0>
   120c8:	ldrb	r3, [r6, #32]
   120cc:	cmp	r3, #0
   120d0:	moveq	r3, #1
   120d4:	strbeq	r3, [r6, #182]	; 0xb6
   120d8:	beq	11ee8 <__assert_fail@plt+0xb04>
   120dc:	b	12008 <__assert_fail@plt+0xc24>
   120e0:	mov	r3, #1
   120e4:	str	r3, [sp, #36]	; 0x24
   120e8:	str	r3, [sp, #48]	; 0x30
   120ec:	b	11970 <__assert_fail@plt+0x58c>
   120f0:	movw	r3, #58472	; 0xe468
   120f4:	movt	r3, #1
   120f8:	b	120c0 <__assert_fail@plt+0xcdc>
   120fc:	movw	r1, #58872	; 0xe5f8
   12100:	movt	r1, #1
   12104:	mov	r2, #5
   12108:	mov	r0, #0
   1210c:	bl	11168 <dcgettext@plt>
   12110:	mov	r2, r0
   12114:	mov	r1, #0
   12118:	mov	r0, #1
   1211c:	bl	11204 <error@plt>
   12120:	mov	r2, #5
   12124:	movw	r1, #58580	; 0xe4d4
   12128:	movt	r1, #1
   1212c:	bl	11168 <dcgettext@plt>
   12130:	ldr	r3, [sp, #24]
   12134:	mov	r4, r0
   12138:	ldr	r0, [r3]
   1213c:	bl	19950 <__assert_fail@plt+0x856c>
   12140:	mov	r3, r0
   12144:	mov	r2, r4
   12148:	mov	r1, sl
   1214c:	mov	r0, #1
   12150:	bl	11204 <error@plt>
   12154:	movw	r1, #58528	; 0xe4a0
   12158:	movt	r1, #1
   1215c:	b	12104 <__assert_fail@plt+0xd20>
   12160:	bl	112c4 <__errno_location@plt>
   12164:	ldr	r4, [r0]
   12168:	mov	r2, #5
   1216c:	movw	r1, #54000	; 0xd2f0
   12170:	movt	r1, #1
   12174:	mov	r0, #0
   12178:	bl	11168 <dcgettext@plt>
   1217c:	mov	r2, r0
   12180:	mov	r0, #1
   12184:	mov	r1, r4
   12188:	bl	11204 <error@plt>
   1218c:	andeq	sp, r1, r4, asr #4
   12190:	andeq	pc, r2, r0, ror r1	; <UNPREDICTABLE>
   12194:	andeq	pc, r2, r8, asr r1	; <UNPREDICTABLE>
   12198:	andeq	pc, r2, r4, ror #2
   1219c:	mov	fp, #0
   121a0:	mov	lr, #0
   121a4:	pop	{r1}		; (ldr r1, [sp], #4)
   121a8:	mov	r2, sp
   121ac:	push	{r2}		; (str r2, [sp, #-4]!)
   121b0:	push	{r0}		; (str r0, [sp, #-4]!)
   121b4:	ldr	ip, [pc, #16]	; 121cc <__assert_fail@plt+0xde8>
   121b8:	push	{ip}		; (str ip, [sp, #-4]!)
   121bc:	ldr	r0, [pc, #12]	; 121d0 <__assert_fail@plt+0xdec>
   121c0:	ldr	r3, [pc, #12]	; 121d4 <__assert_fail@plt+0xdf0>
   121c4:	bl	11228 <__libc_start_main@plt>
   121c8:	bl	113cc <abort@plt>
   121cc:	andeq	sp, r1, r4, lsr r0
   121d0:	strdeq	r1, [r1], -r0
   121d4:	ldrdeq	ip, [r1], -r4
   121d8:	ldr	r3, [pc, #20]	; 121f4 <__assert_fail@plt+0xe10>
   121dc:	ldr	r2, [pc, #20]	; 121f8 <__assert_fail@plt+0xe14>
   121e0:	add	r3, pc, r3
   121e4:	ldr	r2, [r3, r2]
   121e8:	cmp	r2, #0
   121ec:	bxeq	lr
   121f0:	b	11264 <__gmon_start__@plt>
   121f4:	andeq	ip, r1, r8, lsl lr
   121f8:	andeq	r0, r0, r0, lsr r1
   121fc:	ldr	r0, [pc, #24]	; 1221c <__assert_fail@plt+0xe38>
   12200:	ldr	r3, [pc, #24]	; 12220 <__assert_fail@plt+0xe3c>
   12204:	cmp	r3, r0
   12208:	bxeq	lr
   1220c:	ldr	r3, [pc, #16]	; 12224 <__assert_fail@plt+0xe40>
   12210:	cmp	r3, #0
   12214:	bxeq	lr
   12218:	bx	r3
   1221c:	andeq	pc, r2, r8, asr #3
   12220:	andeq	pc, r2, r8, asr #3
   12224:	andeq	r0, r0, r0
   12228:	ldr	r0, [pc, #36]	; 12254 <__assert_fail@plt+0xe70>
   1222c:	ldr	r1, [pc, #36]	; 12258 <__assert_fail@plt+0xe74>
   12230:	sub	r1, r1, r0
   12234:	asr	r1, r1, #2
   12238:	add	r1, r1, r1, lsr #31
   1223c:	asrs	r1, r1, #1
   12240:	bxeq	lr
   12244:	ldr	r3, [pc, #16]	; 1225c <__assert_fail@plt+0xe78>
   12248:	cmp	r3, #0
   1224c:	bxeq	lr
   12250:	bx	r3
   12254:	andeq	pc, r2, r8, asr #3
   12258:	andeq	pc, r2, r8, asr #3
   1225c:	andeq	r0, r0, r0
   12260:	push	{r4, lr}
   12264:	ldr	r4, [pc, #24]	; 12284 <__assert_fail@plt+0xea0>
   12268:	ldrb	r3, [r4]
   1226c:	cmp	r3, #0
   12270:	popne	{r4, pc}
   12274:	bl	121fc <__assert_fail@plt+0xe18>
   12278:	mov	r3, #1
   1227c:	strb	r3, [r4]
   12280:	pop	{r4, pc}
   12284:	andeq	pc, r2, ip, ror #3
   12288:	b	12228 <__assert_fail@plt+0xe44>
   1228c:	movw	r2, #61760	; 0xf140
   12290:	movt	r2, #2
   12294:	ldr	ip, [r2]
   12298:	movw	r3, #61936	; 0xf1f0
   1229c:	movt	r3, #2
   122a0:	ldr	r3, [r3]
   122a4:	cmp	ip, #0
   122a8:	beq	12300 <__assert_fail@plt+0xf1c>
   122ac:	mov	r0, #0
   122b0:	push	{lr}		; (str lr, [sp, #-4]!)
   122b4:	ldrb	lr, [r2, #4]
   122b8:	mov	r2, r0
   122bc:	add	r2, r2, #1
   122c0:	ldr	r1, [r3, #8]
   122c4:	cmp	r1, #1
   122c8:	bls	122ec <__assert_fail@plt+0xf08>
   122cc:	cmp	lr, #0
   122d0:	beq	122f0 <__assert_fail@plt+0xf0c>
   122d4:	ldr	r1, [r3, #24]
   122d8:	cmp	r1, #0
   122dc:	ble	122f0 <__assert_fail@plt+0xf0c>
   122e0:	ldr	r1, [r3, #28]
   122e4:	cmp	r1, #0
   122e8:	ble	122f0 <__assert_fail@plt+0xf0c>
   122ec:	add	r0, r0, #1
   122f0:	cmp	r2, ip
   122f4:	add	r3, r3, #40	; 0x28
   122f8:	bne	122bc <__assert_fail@plt+0xed8>
   122fc:	pop	{pc}		; (ldr pc, [sp], #4)
   12300:	mov	r0, ip
   12304:	bx	lr
   12308:	strd	r4, [sp, #-16]!
   1230c:	movw	r4, #61760	; 0xf140
   12310:	movt	r4, #2
   12314:	ldr	r2, [r4]
   12318:	movw	ip, #61936	; 0xf1f0
   1231c:	movt	ip, #2
   12320:	str	r6, [sp, #8]
   12324:	str	lr, [sp, #12]
   12328:	ldr	r6, [ip]
   1232c:	cmp	r2, #0
   12330:	beq	12370 <__assert_fail@plt+0xf8c>
   12334:	ldr	r0, [ip, #4]
   12338:	mov	lr, #0
   1233c:	mov	r3, r6
   12340:	mov	r5, lr
   12344:	ldr	r1, [r3, #8]
   12348:	cmp	r1, #2
   1234c:	bne	1235c <__assert_fail@plt+0xf78>
   12350:	add	r0, r0, #1
   12354:	mov	lr, #1
   12358:	str	r5, [r3, #8]
   1235c:	subs	r2, r2, #1
   12360:	add	r3, r3, #40	; 0x28
   12364:	bne	12344 <__assert_fail@plt+0xf60>
   12368:	cmp	lr, #0
   1236c:	strne	r0, [ip, #4]
   12370:	ldrb	r3, [r4, #4]
   12374:	cmp	r3, #0
   12378:	beq	12390 <__assert_fail@plt+0xfac>
   1237c:	ldr	r3, [r6, #8]
   12380:	cmp	r3, #3
   12384:	moveq	r3, #0
   12388:	movne	r3, #1
   1238c:	str	r3, [ip, #4]
   12390:	ldrd	r4, [sp]
   12394:	ldr	r6, [sp, #8]
   12398:	add	sp, sp, #12
   1239c:	pop	{pc}		; (ldr pc, [sp], #4)
   123a0:	strd	r4, [sp, #-16]!
   123a4:	movw	r4, #61936	; 0xf1f0
   123a8:	movt	r4, #2
   123ac:	ldr	r3, [r4, #8]
   123b0:	mov	r5, r0
   123b4:	str	r6, [sp, #8]
   123b8:	str	lr, [sp, #12]
   123bc:	ldr	r2, [r4, #16]
   123c0:	ldr	r0, [r4, #12]
   123c4:	cmp	r3, r2
   123c8:	bcs	123e8 <__assert_fail@plt+0x1004>
   123cc:	add	r2, r3, #1
   123d0:	strb	r5, [r0, r3]
   123d4:	ldr	r6, [sp, #8]
   123d8:	str	r2, [r4, #8]
   123dc:	ldrd	r4, [sp]
   123e0:	add	sp, sp, #12
   123e4:	pop	{pc}		; (ldr pc, [sp], #4)
   123e8:	add	r1, r4, #16
   123ec:	bl	1a6ec <__assert_fail@plt+0x9308>
   123f0:	str	r0, [r4, #12]
   123f4:	ldr	r3, [r4, #8]
   123f8:	b	123cc <__assert_fail@plt+0xfe8>
   123fc:	mvn	r3, #0
   12400:	strd	r4, [sp, #-24]!	; 0xffffffe8
   12404:	mov	r5, r2
   12408:	movw	r4, #53980	; 0xd2dc
   1240c:	movt	r4, #1
   12410:	strd	r6, [sp, #8]
   12414:	mvn	r2, #0
   12418:	str	r8, [sp, #16]
   1241c:	mov	r7, r0
   12420:	str	lr, [sp, #20]
   12424:	sub	sp, sp, #32
   12428:	mov	r8, r1
   1242c:	mov	r0, r5
   12430:	add	r1, sp, #12
   12434:	str	r4, [sp]
   12438:	strd	r2, [sp, #24]
   1243c:	add	r3, sp, #16
   12440:	mov	r2, #10
   12444:	bl	1bf78 <__assert_fail@plt+0xab94>
   12448:	bics	r3, r0, #2
   1244c:	bne	12508 <__assert_fail@plt+0x1124>
   12450:	ldr	r0, [sp, #12]
   12454:	cmp	r0, r5
   12458:	beq	124a0 <__assert_fail@plt+0x10bc>
   1245c:	ldrd	r2, [sp, #16]
   12460:	orrs	r1, r2, r3
   12464:	beq	124a0 <__assert_fail@plt+0x10bc>
   12468:	ldrb	r1, [r0]
   1246c:	cmp	r1, #58	; 0x3a
   12470:	beq	124bc <__assert_fail@plt+0x10d8>
   12474:	cmp	r1, #0
   12478:	bne	124a0 <__assert_fail@plt+0x10bc>
   1247c:	ldrd	r4, [sp, #24]
   12480:	movw	r0, #61936	; 0xf1f0
   12484:	movt	r0, #2
   12488:	movw	r1, #61760	; 0xf140
   1248c:	movt	r1, #2
   12490:	strd	r2, [r0, #24]
   12494:	mov	r0, #1
   12498:	strd	r4, [r1, #8]
   1249c:	b	124a4 <__assert_fail@plt+0x10c0>
   124a0:	mov	r0, #0
   124a4:	add	sp, sp, #32
   124a8:	ldrd	r4, [sp]
   124ac:	ldrd	r6, [sp, #8]
   124b0:	ldr	r8, [sp, #16]
   124b4:	add	sp, sp, #20
   124b8:	pop	{pc}		; (ldr pc, [sp], #4)
   124bc:	add	r6, r0, #1
   124c0:	add	r1, sp, #12
   124c4:	str	r4, [sp]
   124c8:	mov	r0, r6
   124cc:	add	r3, sp, #24
   124d0:	mov	r2, #10
   124d4:	bl	1bf78 <__assert_fail@plt+0xab94>
   124d8:	cmp	r0, #0
   124dc:	bne	12508 <__assert_fail@plt+0x1124>
   124e0:	ldr	r1, [sp, #12]
   124e4:	cmp	r1, r6
   124e8:	beq	124a0 <__assert_fail@plt+0x10bc>
   124ec:	ldrd	r2, [sp, #16]
   124f0:	ldrd	r4, [sp, #24]
   124f4:	cmp	r5, r3
   124f8:	cmpeq	r4, r2
   124fc:	bcc	124a0 <__assert_fail@plt+0x10bc>
   12500:	ldrb	r1, [r1]
   12504:	b	12474 <__assert_fail@plt+0x1090>
   12508:	movw	r3, #53340	; 0xd05c
   1250c:	movt	r3, #1
   12510:	str	r5, [sp]
   12514:	mov	r2, r8
   12518:	mov	r1, r7
   1251c:	bl	1bee8 <__assert_fail@plt+0xab04>
   12520:	mov	r2, #5
   12524:	movw	r1, #53884	; 0xd27c
   12528:	movt	r1, #1
   1252c:	strd	r4, [sp, #-16]!
   12530:	mvn	r4, #-2147483648	; 0x80000000
   12534:	str	r6, [sp, #8]
   12538:	mov	r6, r0
   1253c:	mov	r0, #0
   12540:	str	lr, [sp, #12]
   12544:	sub	sp, sp, #24
   12548:	mov	r5, #0
   1254c:	bl	11168 <dcgettext@plt>
   12550:	mov	r1, #0
   12554:	movw	r3, #53980	; 0xd2dc
   12558:	movt	r3, #1
   1255c:	mov	r2, #1
   12560:	strd	r4, [sp]
   12564:	str	r3, [sp, #8]
   12568:	mov	r3, #0
   1256c:	strd	r0, [sp, #12]
   12570:	mov	r0, r6
   12574:	bl	1ab20 <__assert_fail@plt+0x973c>
   12578:	mov	r1, #1
   1257c:	movw	r2, #61760	; 0xf140
   12580:	movt	r2, #2
   12584:	movw	r3, #61936	; 0xf1f0
   12588:	movt	r3, #2
   1258c:	str	r0, [r2]
   12590:	strb	r1, [r3, #32]
   12594:	add	sp, sp, #24
   12598:	ldrd	r4, [sp]
   1259c:	ldr	r6, [sp, #8]
   125a0:	add	sp, sp, #12
   125a4:	pop	{pc}		; (ldr pc, [sp], #4)
   125a8:	strd	r4, [sp, #-28]!	; 0xffffffe4
   125ac:	strd	r6, [sp, #8]
   125b0:	mov	r7, r1
   125b4:	movw	r1, #53912	; 0xd298
   125b8:	movt	r1, #1
   125bc:	strd	r8, [sp, #16]
   125c0:	mov	r9, r0
   125c4:	str	lr, [sp, #24]
   125c8:	sub	sp, sp, #196	; 0xc4
   125cc:	bl	110c0 <strcmp@plt>
   125d0:	cmp	r0, #0
   125d4:	beq	126c8 <__assert_fail@plt+0x12e4>
   125d8:	cmp	r7, #0
   125dc:	bge	126d0 <__assert_fail@plt+0x12ec>
   125e0:	movw	r4, #61936	; 0xf1f0
   125e4:	movt	r4, #2
   125e8:	ldr	r3, [r4, #36]	; 0x24
   125ec:	cmp	r3, #0
   125f0:	beq	12754 <__assert_fail@plt+0x1370>
   125f4:	ldrd	r2, [r4, #36]	; 0x24
   125f8:	strd	r2, [sp, #12]
   125fc:	ldr	r5, [sp, #16]
   12600:	add	r1, sp, #12
   12604:	add	r2, sp, #44	; 0x2c
   12608:	ldr	r0, [r4, #44]	; 0x2c
   1260c:	bl	19d80 <__assert_fail@plt+0x899c>
   12610:	cmp	r0, #0
   12614:	beq	12718 <__assert_fail@plt+0x1334>
   12618:	ldr	ip, [r4, #44]	; 0x2c
   1261c:	add	r3, sp, #44	; 0x2c
   12620:	mvn	r1, #0
   12624:	mov	r0, #0
   12628:	ldr	r2, [r4, #48]	; 0x30
   1262c:	str	ip, [sp]
   12630:	str	r5, [sp, #4]
   12634:	bl	17608 <__assert_fail@plt+0x6224>
   12638:	add	r8, r0, #1
   1263c:	mov	r0, r8
   12640:	bl	1a4fc <__assert_fail@plt+0x9118>
   12644:	ldr	ip, [r4, #44]	; 0x2c
   12648:	mov	r1, r8
   1264c:	add	r3, sp, #44	; 0x2c
   12650:	mov	r6, r0
   12654:	ldr	r2, [r4, #48]	; 0x30
   12658:	str	ip, [sp]
   1265c:	str	r5, [sp, #4]
   12660:	bl	17608 <__assert_fail@plt+0x6224>
   12664:	ldr	r0, [r4, #52]	; 0x34
   12668:	bl	152ac <__assert_fail@plt+0x3ec8>
   1266c:	ldr	r3, [r4, #56]	; 0x38
   12670:	str	r6, [r4, #52]	; 0x34
   12674:	cmp	r3, #0
   12678:	beq	12704 <__assert_fail@plt+0x1320>
   1267c:	movw	r2, #61760	; 0xf140
   12680:	movt	r2, #2
   12684:	str	r3, [r4, #60]	; 0x3c
   12688:	ldr	r5, [r2, #16]
   1268c:	mov	r0, r6
   12690:	mov	r1, #0
   12694:	bl	15724 <__assert_fail@plt+0x4340>
   12698:	mov	r1, #0
   1269c:	sub	r5, r5, r0
   126a0:	ldr	r0, [r4, #60]	; 0x3c
   126a4:	bl	15724 <__assert_fail@plt+0x4340>
   126a8:	sub	r0, r5, r0
   126ac:	str	r0, [r4, #64]	; 0x40
   126b0:	add	sp, sp, #196	; 0xc4
   126b4:	ldrd	r4, [sp]
   126b8:	ldrd	r6, [sp, #8]
   126bc:	ldrd	r8, [sp, #16]
   126c0:	add	sp, sp, #24
   126c4:	pop	{pc}		; (ldr pc, [sp], #4)
   126c8:	mvn	r7, #0
   126cc:	b	125e0 <__assert_fail@plt+0x11fc>
   126d0:	add	r2, sp, #88	; 0x58
   126d4:	mov	r1, r7
   126d8:	mov	r0, #3
   126dc:	bl	111bc <__fxstat64@plt>
   126e0:	cmp	r0, #0
   126e4:	bne	125e0 <__assert_fail@plt+0x11fc>
   126e8:	ldr	r3, [sp, #168]	; 0xa8
   126ec:	movw	r4, #61936	; 0xf1f0
   126f0:	movt	r4, #2
   126f4:	ldr	r5, [sp, #172]	; 0xac
   126f8:	str	r3, [sp, #12]
   126fc:	str	r5, [sp, #16]
   12700:	b	12600 <__assert_fail@plt+0x121c>
   12704:	cmp	r7, #0
   12708:	movw	r3, #53980	; 0xd2dc
   1270c:	movt	r3, #1
   12710:	movge	r3, r9
   12714:	b	1267c <__assert_fail@plt+0x1298>
   12718:	mov	r0, #33	; 0x21
   1271c:	bl	1a4fc <__assert_fail@plt+0x9118>
   12720:	mov	r6, r0
   12724:	ldr	r0, [sp, #12]
   12728:	add	r2, sp, #20
   1272c:	asr	r1, r0, #31
   12730:	bl	15478 <__assert_fail@plt+0x4094>
   12734:	movw	r3, #53916	; 0xd29c
   12738:	movt	r3, #1
   1273c:	stm	sp, {r0, r5}
   12740:	mov	r2, #33	; 0x21
   12744:	mov	r1, #1
   12748:	mov	r0, r6
   1274c:	bl	112d0 <__sprintf_chk@plt>
   12750:	b	12664 <__assert_fail@plt+0x1280>
   12754:	add	r0, r4, #36	; 0x24
   12758:	bl	153dc <__assert_fail@plt+0x3ff8>
   1275c:	b	125f4 <__assert_fail@plt+0x1210>
   12760:	ldr	r3, [r0, #8]
   12764:	cmp	r3, #3
   12768:	bxeq	lr
   1276c:	strd	r4, [sp, #-16]!
   12770:	mov	r4, r0
   12774:	str	r6, [sp, #8]
   12778:	str	lr, [sp, #12]
   1277c:	bl	112c4 <__errno_location@plt>
   12780:	mov	r6, r0
   12784:	ldr	r0, [r4]
   12788:	ldr	r5, [r6]
   1278c:	ldr	r3, [r0]
   12790:	tst	r3, #32
   12794:	moveq	r5, #0
   12798:	bl	11300 <fileno@plt>
   1279c:	cmp	r0, #0
   127a0:	ldr	r0, [r4]
   127a4:	bne	1281c <__assert_fail@plt+0x1438>
   127a8:	bl	11384 <clearerr_unlocked@plt>
   127ac:	cmp	r5, #0
   127b0:	bne	12830 <__assert_fail@plt+0x144c>
   127b4:	movw	r0, #61936	; 0xf1f0
   127b8:	movt	r0, #2
   127bc:	ldrb	r3, [r0, #68]	; 0x44
   127c0:	cmp	r3, #0
   127c4:	bne	12858 <__assert_fail@plt+0x1474>
   127c8:	movw	r2, #61760	; 0xf140
   127cc:	movt	r2, #2
   127d0:	ldr	r3, [r0]
   127d4:	ldr	r2, [r2]
   127d8:	cmp	r2, #0
   127dc:	beq	12800 <__assert_fail@plt+0x141c>
   127e0:	mov	ip, #3
   127e4:	ldr	r1, [r3, #24]
   127e8:	add	r3, r3, #40	; 0x28
   127ec:	str	ip, [r3, #-32]	; 0xffffffe0
   127f0:	cmp	r1, #0
   127f4:	streq	r1, [r3, #-12]
   127f8:	subs	r2, r2, #1
   127fc:	bne	127e4 <__assert_fail@plt+0x1400>
   12800:	ldr	r3, [r0, #4]
   12804:	ldrd	r4, [sp]
   12808:	ldr	r6, [sp, #8]
   1280c:	add	sp, sp, #12
   12810:	sub	r3, r3, #1
   12814:	str	r3, [r0, #4]
   12818:	pop	{pc}		; (ldr pc, [sp], #4)
   1281c:	bl	150ec <__assert_fail@plt+0x3d08>
   12820:	cmp	r0, #0
   12824:	beq	127ac <__assert_fail@plt+0x13c8>
   12828:	cmp	r5, #0
   1282c:	beq	12868 <__assert_fail@plt+0x1484>
   12830:	mov	r1, #3
   12834:	mov	r0, #0
   12838:	ldr	r2, [r4, #4]
   1283c:	bl	19778 <__assert_fail@plt+0x8394>
   12840:	mov	r3, r0
   12844:	movw	r2, #59452	; 0xe83c
   12848:	movt	r2, #1
   1284c:	mov	r1, r5
   12850:	mov	r0, #1
   12854:	bl	11204 <error@plt>
   12858:	mov	r3, #3
   1285c:	str	r3, [r4, #8]
   12860:	str	r5, [r4, #28]
   12864:	b	12800 <__assert_fail@plt+0x141c>
   12868:	ldr	r5, [r6]
   1286c:	b	127ac <__assert_fail@plt+0x13c8>
   12870:	strd	r4, [sp, #-24]!	; 0xffffffe8
   12874:	strd	r6, [sp, #8]
   12878:	movw	r6, #61936	; 0xf1f0
   1287c:	movt	r6, #2
   12880:	ldrb	r3, [r6, #76]	; 0x4c
   12884:	str	r8, [sp, #16]
   12888:	ldr	r4, [r6, #72]	; 0x48
   1288c:	str	lr, [sp, #20]
   12890:	cmp	r3, #0
   12894:	subne	r0, r0, r4
   12898:	strne	r0, [r6, #80]	; 0x50
   1289c:	bne	128e4 <__assert_fail@plt+0x1500>
   128a0:	movw	r7, #61924	; 0xf1e4
   128a4:	movt	r7, #2
   128a8:	mov	r5, r0
   128ac:	mov	r8, #32
   128b0:	b	128d4 <__assert_fail@plt+0x14f0>
   128b4:	ldr	r0, [r7]
   128b8:	ldr	r3, [r0, #20]
   128bc:	ldr	r2, [r0, #24]
   128c0:	add	r1, r3, #1
   128c4:	cmp	r3, r2
   128c8:	strcc	r1, [r0, #20]
   128cc:	strbcc	r8, [r3]
   128d0:	bcs	128f8 <__assert_fail@plt+0x1514>
   128d4:	add	r4, r4, #1
   128d8:	cmp	r5, r4
   128dc:	bge	128b4 <__assert_fail@plt+0x14d0>
   128e0:	str	r5, [r6, #72]	; 0x48
   128e4:	ldrd	r4, [sp]
   128e8:	ldrd	r6, [sp, #8]
   128ec:	ldr	r8, [sp, #16]
   128f0:	add	sp, sp, #20
   128f4:	pop	{pc}		; (ldr pc, [sp], #4)
   128f8:	mov	r1, #32
   128fc:	bl	11348 <__overflow@plt>
   12900:	b	128d4 <__assert_fail@plt+0x14f0>
   12904:	strd	r4, [sp, #-32]!	; 0xffffffe0
   12908:	strd	r6, [sp, #8]
   1290c:	movw	r7, #61760	; 0xf140
   12910:	movt	r7, #2
   12914:	strd	r8, [sp, #16]
   12918:	movw	r8, #61936	; 0xf1f0
   1291c:	movt	r8, #2
   12920:	ldr	r5, [r8, #72]	; 0x48
   12924:	movw	r9, #61924	; 0xf1e4
   12928:	movt	r9, #2
   1292c:	str	sl, [sp, #24]
   12930:	ldr	r6, [r8, #80]	; 0x50
   12934:	str	lr, [sp, #28]
   12938:	add	r6, r5, r6
   1293c:	b	12944 <__assert_fail@plt+0x1560>
   12940:	mov	r5, r4
   12944:	sub	r3, r6, r5
   12948:	cmp	r3, #1
   1294c:	ble	12990 <__assert_fail@plt+0x15ac>
   12950:	ldr	r3, [r7, #24]
   12954:	sdiv	r4, r5, r3
   12958:	mla	r4, r3, r4, r3
   1295c:	cmp	r6, r4
   12960:	blt	12990 <__assert_fail@plt+0x15ac>
   12964:	ldr	r0, [r9]
   12968:	ldrb	r1, [r7, #20]
   1296c:	ldr	r3, [r0, #20]
   12970:	ldr	r2, [r0, #24]
   12974:	add	ip, r3, #1
   12978:	cmp	r3, r2
   1297c:	strcc	ip, [r0, #20]
   12980:	strbcc	r1, [r3]
   12984:	bcc	12940 <__assert_fail@plt+0x155c>
   12988:	bl	11348 <__overflow@plt>
   1298c:	b	12940 <__assert_fail@plt+0x155c>
   12990:	movw	r4, #61924	; 0xf1e4
   12994:	movt	r4, #2
   12998:	mov	r7, #32
   1299c:	b	129c0 <__assert_fail@plt+0x15dc>
   129a0:	ldr	r0, [r4]
   129a4:	ldr	r3, [r0, #20]
   129a8:	ldr	r2, [r0, #24]
   129ac:	add	r1, r3, #1
   129b0:	cmp	r3, r2
   129b4:	strcc	r1, [r0, #20]
   129b8:	strbcc	r7, [r3]
   129bc:	bcs	129f0 <__assert_fail@plt+0x160c>
   129c0:	add	r5, r5, #1
   129c4:	cmp	r6, r5
   129c8:	bge	129a0 <__assert_fail@plt+0x15bc>
   129cc:	mov	r3, #0
   129d0:	str	r6, [r8, #72]	; 0x48
   129d4:	ldrd	r4, [sp]
   129d8:	str	r3, [r8, #80]	; 0x50
   129dc:	ldrd	r6, [sp, #8]
   129e0:	ldrd	r8, [sp, #16]
   129e4:	ldr	sl, [sp, #24]
   129e8:	add	sp, sp, #28
   129ec:	pop	{pc}		; (ldr pc, [sp], #4)
   129f0:	mov	r1, #32
   129f4:	bl	11348 <__overflow@plt>
   129f8:	b	129c0 <__assert_fail@plt+0x15dc>
   129fc:	strd	r4, [sp, #-32]!	; 0xffffffe0
   12a00:	movw	r5, #61936	; 0xf1f0
   12a04:	movt	r5, #2
   12a08:	ldrd	r2, [r5, #80]	; 0x50
   12a0c:	strd	r6, [sp, #8]
   12a10:	strd	r8, [sp, #16]
   12a14:	str	sl, [sp, #24]
   12a18:	str	lr, [sp, #28]
   12a1c:	cmp	r3, #0
   12a20:	ble	12af0 <__assert_fail@plt+0x170c>
   12a24:	movw	r3, #61760	; 0xf140
   12a28:	movt	r3, #2
   12a2c:	ldr	r6, [r5, #88]	; 0x58
   12a30:	movw	r7, #61924	; 0xf1e4
   12a34:	movt	r7, #2
   12a38:	ldr	r8, [r3, #28]
   12a3c:	mov	r4, r8
   12a40:	add	r9, r8, r6
   12a44:	sub	r3, r9, r4
   12a48:	cmp	r3, #0
   12a4c:	ble	12ab0 <__assert_fail@plt+0x16cc>
   12a50:	ldrb	r1, [r4], #1
   12a54:	cmp	r1, #32
   12a58:	addeq	r2, r2, #1
   12a5c:	streq	r2, [r5, #80]	; 0x50
   12a60:	beq	12a44 <__assert_fail@plt+0x1660>
   12a64:	cmp	r2, #0
   12a68:	ble	12a74 <__assert_fail@plt+0x1690>
   12a6c:	bl	12904 <__assert_fail@plt+0x1520>
   12a70:	ldrb	r1, [r4, #-1]
   12a74:	ldr	r0, [r7]
   12a78:	ldr	r3, [r0, #20]
   12a7c:	ldr	r2, [r0, #24]
   12a80:	add	ip, r3, #1
   12a84:	cmp	r3, r2
   12a88:	strcc	ip, [r0, #20]
   12a8c:	strbcc	r1, [r3]
   12a90:	bcs	12ae8 <__assert_fail@plt+0x1704>
   12a94:	ldr	r3, [r5, #72]	; 0x48
   12a98:	ldr	r2, [r5, #80]	; 0x50
   12a9c:	add	r3, r3, #1
   12aa0:	str	r3, [r5, #72]	; 0x48
   12aa4:	sub	r3, r9, r4
   12aa8:	cmp	r3, #0
   12aac:	bgt	12a50 <__assert_fail@plt+0x166c>
   12ab0:	bic	r3, r6, r6, asr #31
   12ab4:	cmp	r2, #0
   12ab8:	sub	r6, r6, #1
   12abc:	add	r8, r8, r3
   12ac0:	sub	r6, r6, r3
   12ac4:	ble	12acc <__assert_fail@plt+0x16e8>
   12ac8:	bl	12904 <__assert_fail@plt+0x1520>
   12acc:	ldr	r3, [r5, #84]	; 0x54
   12ad0:	sub	r3, r3, #1
   12ad4:	cmp	r3, #0
   12ad8:	str	r3, [r5, #84]	; 0x54
   12adc:	ble	12af8 <__assert_fail@plt+0x1714>
   12ae0:	ldr	r2, [r5, #80]	; 0x50
   12ae4:	b	12a3c <__assert_fail@plt+0x1658>
   12ae8:	bl	11348 <__overflow@plt>
   12aec:	b	12a94 <__assert_fail@plt+0x16b0>
   12af0:	cmp	r2, #0
   12af4:	bgt	12b10 <__assert_fail@plt+0x172c>
   12af8:	ldrd	r4, [sp]
   12afc:	ldrd	r6, [sp, #8]
   12b00:	ldrd	r8, [sp, #16]
   12b04:	ldr	sl, [sp, #24]
   12b08:	add	sp, sp, #28
   12b0c:	pop	{pc}		; (ldr pc, [sp], #4)
   12b10:	ldrd	r4, [sp]
   12b14:	ldrd	r6, [sp, #8]
   12b18:	ldrd	r8, [sp, #16]
   12b1c:	ldr	sl, [sp, #24]
   12b20:	ldr	lr, [sp, #28]
   12b24:	add	sp, sp, #32
   12b28:	b	12904 <__assert_fail@plt+0x1520>
   12b2c:	strd	r4, [sp, #-28]!	; 0xffffffe4
   12b30:	movw	r4, #61936	; 0xf1f0
   12b34:	movt	r4, #2
   12b38:	strd	r6, [sp, #8]
   12b3c:	mov	r6, #0
   12b40:	strd	r8, [sp, #16]
   12b44:	str	lr, [sp, #24]
   12b48:	sub	sp, sp, #316	; 0x13c
   12b4c:	ldr	r0, [r4, #92]	; 0x5c
   12b50:	str	r6, [r4, #72]	; 0x48
   12b54:	bl	12870 <__assert_fail@plt+0x148c>
   12b58:	bl	12904 <__assert_fail@plt+0x1520>
   12b5c:	ldrd	r8, [r4, #96]	; 0x60
   12b60:	orrs	r3, r8, r9
   12b64:	beq	12c20 <__assert_fail@plt+0x183c>
   12b68:	mov	r2, #5
   12b6c:	mov	r0, r6
   12b70:	movw	r1, #53948	; 0xd2bc
   12b74:	movt	r1, #1
   12b78:	bl	11168 <dcgettext@plt>
   12b7c:	add	r7, sp, #36	; 0x24
   12b80:	mov	r3, r0
   12b84:	strd	r8, [sp]
   12b88:	mov	r2, #276	; 0x114
   12b8c:	mov	r0, r7
   12b90:	mov	r1, #1
   12b94:	bl	112d0 <__sprintf_chk@plt>
   12b98:	ldr	r5, [r4, #64]	; 0x40
   12b9c:	mov	r1, r6
   12ba0:	mov	r0, r7
   12ba4:	bl	15724 <__assert_fail@plt+0x4340>
   12ba8:	ldr	lr, [r4, #52]	; 0x34
   12bac:	movw	r2, #53984	; 0xd2e0
   12bb0:	movt	r2, #1
   12bb4:	movw	r3, #53980	; 0xd2dc
   12bb8:	movt	r3, #1
   12bbc:	movw	r1, #53960	; 0xd2c8
   12bc0:	movt	r1, #1
   12bc4:	sub	ip, r5, r0
   12bc8:	mov	r0, #1
   12bcc:	ldr	r5, [r4, #60]	; 0x3c
   12bd0:	bic	ip, ip, ip, asr #31
   12bd4:	str	lr, [sp]
   12bd8:	asr	lr, ip, r0
   12bdc:	str	r2, [sp, #8]
   12be0:	str	r2, [sp, #20]
   12be4:	ldr	r2, [r4, #92]	; 0x5c
   12be8:	sub	ip, ip, lr
   12bec:	str	lr, [sp, #4]
   12bf0:	str	r5, [sp, #12]
   12bf4:	str	ip, [sp, #16]
   12bf8:	str	r7, [sp, #24]
   12bfc:	bl	112f4 <__printf_chk@plt>
   12c00:	str	r6, [r4, #72]	; 0x48
   12c04:	strb	r6, [r4, #104]	; 0x68
   12c08:	add	sp, sp, #316	; 0x13c
   12c0c:	ldrd	r4, [sp]
   12c10:	ldrd	r6, [sp, #8]
   12c14:	ldrd	r8, [sp, #16]
   12c18:	add	sp, sp, #24
   12c1c:	pop	{pc}		; (ldr pc, [sp], #4)
   12c20:	mov	r2, #5
   12c24:	movw	r1, #53924	; 0xd2a4
   12c28:	movt	r1, #1
   12c2c:	mov	r0, r6
   12c30:	bl	11168 <dcgettext@plt>
   12c34:	mov	r2, r0
   12c38:	mov	r1, r6
   12c3c:	mov	r0, #1
   12c40:	bl	11204 <error@plt>
   12c44:	movw	r3, #61760	; 0xf140
   12c48:	movt	r3, #2
   12c4c:	strd	r4, [sp, #-16]!
   12c50:	str	r6, [sp, #8]
   12c54:	movw	r5, #61936	; 0xf1f0
   12c58:	movt	r5, #2
   12c5c:	str	lr, [sp, #12]
   12c60:	mov	r6, r0
   12c64:	sub	sp, sp, #16
   12c68:	ldrb	r1, [r3, #32]
   12c6c:	ldr	r4, [r5, #108]	; 0x6c
   12c70:	cmp	r1, r0
   12c74:	beq	12d2c <__assert_fail@plt+0x1948>
   12c78:	cmp	r0, #9
   12c7c:	beq	12cd8 <__assert_fail@plt+0x18f4>
   12c80:	bl	1127c <__ctype_b_loc@plt>
   12c84:	ldr	r2, [r0]
   12c88:	lsl	r3, r6, #1
   12c8c:	ldrh	r3, [r2, r3]
   12c90:	tst	r3, #16384	; 0x4000
   12c94:	bne	12d94 <__assert_fail@plt+0x19b0>
   12c98:	ldrb	r3, [r5, #117]	; 0x75
   12c9c:	cmp	r3, #0
   12ca0:	bne	12db8 <__assert_fail@plt+0x19d4>
   12ca4:	ldrb	r3, [r5, #118]	; 0x76
   12ca8:	cmp	r3, #0
   12cac:	beq	12e04 <__assert_fail@plt+0x1a20>
   12cb0:	tst	r6, #128	; 0x80
   12cb4:	bne	12db8 <__assert_fail@plt+0x19d4>
   12cb8:	ldr	r3, [r5, #112]	; 0x70
   12cbc:	eor	r2, r6, #64	; 0x40
   12cc0:	mov	r1, #94	; 0x5e
   12cc4:	mov	r0, #2
   12cc8:	strb	r1, [r4]
   12ccc:	strb	r2, [r4, #1]
   12cd0:	add	r3, r3, r0
   12cd4:	b	12d14 <__assert_fail@plt+0x1930>
   12cd8:	ldr	r3, [r5, #112]	; 0x70
   12cdc:	ldrb	ip, [r5, #116]	; 0x74
   12ce0:	rsbs	r1, r3, #0
   12ce4:	and	r0, r3, #7
   12ce8:	and	r1, r1, #7
   12cec:	rsbpl	r0, r1, #0
   12cf0:	cmp	ip, #0
   12cf4:	rsb	r0, r0, #8
   12cf8:	moveq	r1, r0
   12cfc:	bne	12d54 <__assert_fail@plt+0x1970>
   12d00:	cmp	r1, #0
   12d04:	mov	r0, #1
   12d08:	strb	r6, [r4]
   12d0c:	blt	12d74 <__assert_fail@plt+0x1990>
   12d10:	add	r3, r3, r1
   12d14:	str	r3, [r5, #112]	; 0x70
   12d18:	add	sp, sp, #16
   12d1c:	ldrd	r4, [sp]
   12d20:	ldr	r6, [sp, #8]
   12d24:	add	sp, sp, #12
   12d28:	pop	{pc}		; (ldr pc, [sp], #4)
   12d2c:	ldr	r1, [r3, #36]	; 0x24
   12d30:	ldr	r3, [r5, #112]	; 0x70
   12d34:	ldrb	ip, [r5, #116]	; 0x74
   12d38:	sdiv	r0, r3, r1
   12d3c:	cmp	ip, #0
   12d40:	mls	r0, r1, r0, r3
   12d44:	sub	r1, r1, r0
   12d48:	beq	12d00 <__assert_fail@plt+0x191c>
   12d4c:	subs	r0, r1, #0
   12d50:	beq	12d14 <__assert_fail@plt+0x1930>
   12d54:	add	r1, r4, r0
   12d58:	mov	r2, #32
   12d5c:	strb	r2, [r4], #1
   12d60:	cmp	r1, r4
   12d64:	bne	12d5c <__assert_fail@plt+0x1978>
   12d68:	mov	r1, r0
   12d6c:	cmp	r1, #0
   12d70:	bge	12d10 <__assert_fail@plt+0x192c>
   12d74:	cmp	r3, #0
   12d78:	rsbne	r2, r1, #0
   12d7c:	beq	12da8 <__assert_fail@plt+0x19c4>
   12d80:	cmp	r3, r2
   12d84:	movle	r3, #0
   12d88:	strle	r3, [r5, #112]	; 0x70
   12d8c:	ble	12d18 <__assert_fail@plt+0x1934>
   12d90:	b	12d10 <__assert_fail@plt+0x192c>
   12d94:	ldr	r3, [r5, #112]	; 0x70
   12d98:	mov	r0, #1
   12d9c:	strb	r6, [r4]
   12da0:	add	r3, r3, r0
   12da4:	b	12d14 <__assert_fail@plt+0x1930>
   12da8:	mov	r3, #0
   12dac:	mov	r0, r3
   12db0:	str	r3, [r5, #112]	; 0x70
   12db4:	b	12d18 <__assert_fail@plt+0x1934>
   12db8:	mov	r1, #92	; 0x5c
   12dbc:	mov	r2, #4
   12dc0:	movw	r3, #53988	; 0xd2e4
   12dc4:	movt	r3, #1
   12dc8:	add	r0, sp, #12
   12dcc:	strb	r1, [r4]
   12dd0:	mov	r1, #1
   12dd4:	str	r6, [sp]
   12dd8:	bl	112d0 <__sprintf_chk@plt>
   12ddc:	ldrb	r2, [sp, #12]
   12de0:	mov	r0, #4
   12de4:	ldr	r3, [r5, #112]	; 0x70
   12de8:	strb	r2, [r4, #1]
   12dec:	ldrb	r2, [sp, #13]
   12df0:	add	r3, r3, r0
   12df4:	strb	r2, [r4, #2]
   12df8:	ldrb	r2, [sp, #14]
   12dfc:	strb	r2, [r4, #3]
   12e00:	b	12d14 <__assert_fail@plt+0x1930>
   12e04:	cmp	r6, #8
   12e08:	ldr	r3, [r5, #112]	; 0x70
   12e0c:	movne	r0, #1
   12e10:	strbne	r6, [r4]
   12e14:	bne	12d14 <__assert_fail@plt+0x1930>
   12e18:	cmp	r3, #0
   12e1c:	strb	r6, [r4]
   12e20:	beq	12da8 <__assert_fail@plt+0x19c4>
   12e24:	mov	r2, #1
   12e28:	mvn	r1, #0
   12e2c:	mov	r0, r2
   12e30:	b	12d80 <__assert_fail@plt+0x199c>
   12e34:	strd	r4, [sp, #-16]!
   12e38:	movw	r4, #61936	; 0xf1f0
   12e3c:	movt	r4, #2
   12e40:	ldrb	r3, [r4, #76]	; 0x4c
   12e44:	mov	r5, r0
   12e48:	str	r6, [sp, #8]
   12e4c:	str	lr, [sp, #12]
   12e50:	cmp	r3, #0
   12e54:	beq	12ea4 <__assert_fail@plt+0x1ac0>
   12e58:	ldr	r3, [r4, #80]	; 0x50
   12e5c:	cmp	r0, #32
   12e60:	addeq	r3, r3, #1
   12e64:	streq	r3, [r4, #80]	; 0x50
   12e68:	beq	12ecc <__assert_fail@plt+0x1ae8>
   12e6c:	cmp	r3, #0
   12e70:	ble	12e78 <__assert_fail@plt+0x1a94>
   12e74:	bl	12904 <__assert_fail@plt+0x1520>
   12e78:	bl	1127c <__ctype_b_loc@plt>
   12e7c:	ldr	r2, [r0]
   12e80:	lsl	r3, r5, #1
   12e84:	ldrh	r3, [r2, r3]
   12e88:	tst	r3, #16384	; 0x4000
   12e8c:	bne	12edc <__assert_fail@plt+0x1af8>
   12e90:	cmp	r5, #8
   12e94:	bne	12ea4 <__assert_fail@plt+0x1ac0>
   12e98:	ldr	r3, [r4, #72]	; 0x48
   12e9c:	sub	r3, r3, #1
   12ea0:	str	r3, [r4, #72]	; 0x48
   12ea4:	movw	r3, #61924	; 0xf1e4
   12ea8:	movt	r3, #2
   12eac:	ldr	r0, [r3]
   12eb0:	ldr	r3, [r0, #20]
   12eb4:	ldr	r2, [r0, #24]
   12eb8:	cmp	r3, r2
   12ebc:	addcc	r2, r3, #1
   12ec0:	strcc	r2, [r0, #20]
   12ec4:	strbcc	r5, [r3]
   12ec8:	bcs	12eec <__assert_fail@plt+0x1b08>
   12ecc:	ldrd	r4, [sp]
   12ed0:	ldr	r6, [sp, #8]
   12ed4:	add	sp, sp, #12
   12ed8:	pop	{pc}		; (ldr pc, [sp], #4)
   12edc:	ldr	r3, [r4, #72]	; 0x48
   12ee0:	add	r3, r3, #1
   12ee4:	str	r3, [r4, #72]	; 0x48
   12ee8:	b	12ea4 <__assert_fail@plt+0x1ac0>
   12eec:	mov	r1, r5
   12ef0:	ldrd	r4, [sp]
   12ef4:	ldr	r6, [sp, #8]
   12ef8:	ldr	lr, [sp, #12]
   12efc:	add	sp, sp, #16
   12f00:	b	11348 <__overflow@plt>
   12f04:	strd	r4, [sp, #-24]!	; 0xffffffe8
   12f08:	movw	r5, #61936	; 0xf1f0
   12f0c:	movt	r5, #2
   12f10:	strd	r6, [sp, #8]
   12f14:	mov	r2, #1
   12f18:	ldr	r7, [r0, #20]
   12f1c:	str	r8, [sp, #16]
   12f20:	mov	r8, r0
   12f24:	str	lr, [sp, #20]
   12f28:	ldr	r3, [r5, #120]	; 0x78
   12f2c:	strb	r2, [r5, #124]	; 0x7c
   12f30:	add	r1, r7, r2
   12f34:	ldrb	r2, [r5, #104]	; 0x68
   12f38:	str	r1, [r0, #20]
   12f3c:	add	r1, r3, r7, lsl #2
   12f40:	ldr	r4, [r3, r7, lsl #2]
   12f44:	ldr	r3, [r1, #4]
   12f48:	cmp	r2, #0
   12f4c:	ldr	r6, [r5, #12]
   12f50:	add	r4, r6, r4
   12f54:	add	r6, r6, r3
   12f58:	bne	13040 <__assert_fail@plt+0x1c5c>
   12f5c:	ldr	r3, [r8, #8]
   12f60:	cmp	r3, #1
   12f64:	beq	12fec <__assert_fail@plt+0x1c08>
   12f68:	ldr	r3, [r5, #88]	; 0x58
   12f6c:	ldr	r0, [r5, #128]	; 0x80
   12f70:	cmp	r3, r0
   12f74:	blt	13050 <__assert_fail@plt+0x1c6c>
   12f78:	ldrb	r3, [r5, #132]	; 0x84
   12f7c:	cmp	r3, #0
   12f80:	bne	13048 <__assert_fail@plt+0x1c64>
   12f84:	cmp	r4, r6
   12f88:	beq	12f9c <__assert_fail@plt+0x1bb8>
   12f8c:	ldrb	r0, [r4], #1
   12f90:	bl	12e34 <__assert_fail@plt+0x1a50>
   12f94:	cmp	r6, r4
   12f98:	bne	12f8c <__assert_fail@plt+0x1ba8>
   12f9c:	ldr	r3, [r5, #80]	; 0x50
   12fa0:	cmp	r3, #0
   12fa4:	bne	12fd4 <__assert_fail@plt+0x1bf0>
   12fa8:	ldr	r3, [r8, #32]
   12fac:	ldr	r1, [r5, #136]	; 0x88
   12fb0:	ldr	r2, [r5, #88]	; 0x58
   12fb4:	ldr	ip, [r1, r7, lsl #2]
   12fb8:	ldr	r1, [r5, #92]	; 0x5c
   12fbc:	sub	r0, r3, r2
   12fc0:	add	r3, r3, ip
   12fc4:	cmp	r0, r1
   12fc8:	str	r3, [r5, #72]	; 0x48
   12fcc:	subeq	r3, r3, r2
   12fd0:	streq	r3, [r5, #72]	; 0x48
   12fd4:	ldrd	r4, [sp]
   12fd8:	mov	r0, #1
   12fdc:	ldrd	r6, [sp, #8]
   12fe0:	ldr	r8, [sp, #16]
   12fe4:	add	sp, sp, #20
   12fe8:	pop	{pc}		; (ldr pc, [sp], #4)
   12fec:	movw	ip, #61760	; 0xf140
   12ff0:	movt	ip, #2
   12ff4:	ldr	lr, [r5]
   12ff8:	ldr	r1, [ip]
   12ffc:	cmp	r1, #0
   13000:	ble	13024 <__assert_fail@plt+0x1c40>
   13004:	add	r1, r1, #1
   13008:	mov	r2, lr
   1300c:	mov	r0, #2
   13010:	add	r3, r3, #1
   13014:	add	r2, r2, #40	; 0x28
   13018:	str	r0, [r2, #-32]	; 0xffffffe0
   1301c:	cmp	r3, r1
   13020:	bne	13010 <__assert_fail@plt+0x1c2c>
   13024:	ldr	r3, [lr, #28]
   13028:	cmp	r3, #0
   1302c:	bgt	12f68 <__assert_fail@plt+0x1b84>
   13030:	ldrb	r3, [ip, #40]	; 0x28
   13034:	cmp	r3, #0
   13038:	strbeq	r3, [r5, #124]	; 0x7c
   1303c:	b	12fd4 <__assert_fail@plt+0x1bf0>
   13040:	bl	12b2c <__assert_fail@plt+0x1748>
   13044:	b	12f5c <__assert_fail@plt+0x1b78>
   13048:	bl	129fc <__assert_fail@plt+0x1618>
   1304c:	b	12f84 <__assert_fail@plt+0x1ba0>
   13050:	sub	r0, r0, r3
   13054:	bl	12870 <__assert_fail@plt+0x148c>
   13058:	mov	r3, #0
   1305c:	str	r3, [r5, #128]	; 0x80
   13060:	b	12f78 <__assert_fail@plt+0x1b94>
   13064:	movw	ip, #61936	; 0xf1f0
   13068:	movt	ip, #2
   1306c:	ldrb	r3, [ip, #68]	; 0x44
   13070:	cmp	r3, #0
   13074:	movne	r3, #2
   13078:	strne	r3, [r0]
   1307c:	bne	130b8 <__assert_fail@plt+0x1cd4>
   13080:	movw	r0, #61760	; 0xf140
   13084:	movt	r0, #2
   13088:	ldr	r2, [ip]
   1308c:	ldr	r3, [r0]
   13090:	cmp	r3, #0
   13094:	beq	130b8 <__assert_fail@plt+0x1cd4>
   13098:	ldrb	r0, [r0, #4]
   1309c:	cmp	r0, #0
   130a0:	movne	r0, #1
   130a4:	moveq	r0, #2
   130a8:	subs	r3, r3, #1
   130ac:	add	r2, r2, #40	; 0x28
   130b0:	str	r0, [r2, #-32]	; 0xffffffe0
   130b4:	bne	130a8 <__assert_fail@plt+0x1cc4>
   130b8:	ldr	r3, [ip, #4]
   130bc:	mov	r2, #0
   130c0:	str	r2, [r1]
   130c4:	sub	r3, r3, #1
   130c8:	str	r3, [ip, #4]
   130cc:	bx	lr
   130d0:	strd	r4, [sp, #-32]!	; 0xffffffe0
   130d4:	ldr	r4, [r0]
   130d8:	ldr	r3, [r4, #4]
   130dc:	ldr	r2, [r4, #8]
   130e0:	strd	r6, [sp, #8]
   130e4:	mov	r6, r1
   130e8:	strd	r8, [sp, #16]
   130ec:	mov	r8, r0
   130f0:	str	sl, [sp, #24]
   130f4:	str	lr, [sp, #28]
   130f8:	cmp	r3, r2
   130fc:	bcs	132f8 <__assert_fail@plt+0x1f14>
   13100:	add	r2, r3, #1
   13104:	str	r2, [r4, #4]
   13108:	ldrb	r0, [r3]
   1310c:	cmp	r0, #12
   13110:	movne	r3, #0
   13114:	movne	r5, r3
   13118:	strbne	r3, [r8, #37]	; 0x25
   1311c:	beq	131dc <__assert_fail@plt+0x1df8>
   13120:	movw	r7, #61936	; 0xf1f0
   13124:	movt	r7, #2
   13128:	ldrb	r3, [r7, #140]	; 0x8c
   1312c:	cmp	r3, #0
   13130:	movne	r3, #1
   13134:	strbne	r3, [r8, #37]	; 0x25
   13138:	b	13144 <__assert_fail@plt+0x1d60>
   1313c:	str	r1, [r4, #4]
   13140:	ldrb	r0, [r3]
   13144:	cmp	r0, #10
   13148:	beq	13180 <__assert_fail@plt+0x1d9c>
   1314c:	cmp	r0, #12
   13150:	beq	13238 <__assert_fail@plt+0x1e54>
   13154:	cmn	r0, #1
   13158:	beq	13224 <__assert_fail@plt+0x1e40>
   1315c:	ldr	r3, [r4, #4]
   13160:	ldr	r2, [r4, #8]
   13164:	add	r1, r3, #1
   13168:	cmp	r3, r2
   1316c:	bcc	1313c <__assert_fail@plt+0x1d58>
   13170:	mov	r0, r4
   13174:	bl	1133c <__uflow@plt>
   13178:	cmp	r0, #10
   1317c:	bne	1314c <__assert_fail@plt+0x1d68>
   13180:	movw	r9, #61760	; 0xf140
   13184:	movt	r9, #2
   13188:	ldrb	r3, [r9, #41]	; 0x29
   1318c:	cmp	r3, #0
   13190:	beq	131c4 <__assert_fail@plt+0x1de0>
   13194:	ldrb	r3, [r7, #68]	; 0x44
   13198:	eor	r3, r3, #1
   1319c:	cmp	r6, #1
   131a0:	movne	r6, r3
   131a4:	orreq	r6, r3, #1
   131a8:	cmp	r6, #0
   131ac:	beq	131c4 <__assert_fail@plt+0x1de0>
   131b0:	cmp	r5, #0
   131b4:	bne	131c4 <__assert_fail@plt+0x1de0>
   131b8:	ldr	r3, [r9, #44]	; 0x2c
   131bc:	add	r3, r3, #1
   131c0:	str	r3, [r9, #44]	; 0x2c
   131c4:	ldrd	r4, [sp]
   131c8:	ldrd	r6, [sp, #8]
   131cc:	ldrd	r8, [sp, #16]
   131d0:	ldr	sl, [sp, #24]
   131d4:	add	sp, sp, #28
   131d8:	pop	{pc}		; (ldr pc, [sp], #4)
   131dc:	ldrb	r3, [r8, #37]	; 0x25
   131e0:	cmp	r3, #0
   131e4:	beq	132b4 <__assert_fail@plt+0x1ed0>
   131e8:	ldr	r3, [r4, #4]
   131ec:	ldr	r2, [r4, #8]
   131f0:	cmp	r3, r2
   131f4:	bcs	13344 <__assert_fail@plt+0x1f60>
   131f8:	add	r2, r3, #1
   131fc:	str	r2, [r4, #4]
   13200:	ldrb	r0, [r3]
   13204:	cmp	r0, #10
   13208:	beq	13318 <__assert_fail@plt+0x1f34>
   1320c:	mov	r3, #0
   13210:	sub	r5, r0, #12
   13214:	clz	r5, r5
   13218:	lsr	r5, r5, #5
   1321c:	strb	r3, [r8, #37]	; 0x25
   13220:	b	13120 <__assert_fail@plt+0x1d3c>
   13224:	mov	r0, r8
   13228:	movw	r9, #61760	; 0xf140
   1322c:	movt	r9, #2
   13230:	bl	12760 <__assert_fail@plt+0x137c>
   13234:	b	13188 <__assert_fail@plt+0x1da4>
   13238:	ldrb	r3, [r7, #140]	; 0x8c
   1323c:	cmp	r3, #0
   13240:	movweq	r9, #61760	; 0xf140
   13244:	movteq	r9, #2
   13248:	beq	13280 <__assert_fail@plt+0x1e9c>
   1324c:	ldrb	r1, [r7, #68]	; 0x44
   13250:	cmp	r1, #0
   13254:	bne	13304 <__assert_fail@plt+0x1f20>
   13258:	movw	r9, #61760	; 0xf140
   1325c:	movt	r9, #2
   13260:	ldr	r2, [r7]
   13264:	ldr	r3, [r9]
   13268:	cmp	r3, #0
   1326c:	beq	13280 <__assert_fail@plt+0x1e9c>
   13270:	subs	r3, r3, #1
   13274:	add	r2, r2, #40	; 0x28
   13278:	strb	r1, [r2, #-3]
   1327c:	bne	13270 <__assert_fail@plt+0x1e8c>
   13280:	ldr	r3, [r4, #4]
   13284:	ldr	r2, [r4, #8]
   13288:	cmp	r3, r2
   1328c:	bcs	13338 <__assert_fail@plt+0x1f54>
   13290:	add	r2, r3, #1
   13294:	str	r2, [r4, #4]
   13298:	ldrb	r0, [r3]
   1329c:	cmp	r0, #10
   132a0:	bne	132e0 <__assert_fail@plt+0x1efc>
   132a4:	add	r1, r8, #28
   132a8:	add	r0, r8, #8
   132ac:	bl	13064 <__assert_fail@plt+0x1c80>
   132b0:	b	13188 <__assert_fail@plt+0x1da4>
   132b4:	movw	r7, #61936	; 0xf1f0
   132b8:	movt	r7, #2
   132bc:	ldrb	r5, [r7, #140]	; 0x8c
   132c0:	cmp	r5, #0
   132c4:	movne	r3, #1
   132c8:	strbne	r3, [r8, #37]	; 0x25
   132cc:	bne	13238 <__assert_fail@plt+0x1e54>
   132d0:	movw	r9, #61760	; 0xf140
   132d4:	movt	r9, #2
   132d8:	mov	r5, #1
   132dc:	b	13280 <__assert_fail@plt+0x1e9c>
   132e0:	mov	r1, r4
   132e4:	bl	112b8 <ungetc@plt>
   132e8:	add	r1, r8, #28
   132ec:	add	r0, r8, #8
   132f0:	bl	13064 <__assert_fail@plt+0x1c80>
   132f4:	b	13188 <__assert_fail@plt+0x1da4>
   132f8:	mov	r0, r4
   132fc:	bl	1133c <__uflow@plt>
   13300:	b	1310c <__assert_fail@plt+0x1d28>
   13304:	mov	r3, #0
   13308:	movw	r9, #61760	; 0xf140
   1330c:	movt	r9, #2
   13310:	strb	r3, [r8, #37]	; 0x25
   13314:	b	13280 <__assert_fail@plt+0x1e9c>
   13318:	ldr	r3, [r4, #4]
   1331c:	ldr	r2, [r4, #8]
   13320:	cmp	r3, r2
   13324:	bcs	13350 <__assert_fail@plt+0x1f6c>
   13328:	add	r2, r3, #1
   1332c:	str	r2, [r4, #4]
   13330:	ldrb	r0, [r3]
   13334:	b	1320c <__assert_fail@plt+0x1e28>
   13338:	mov	r0, r4
   1333c:	bl	1133c <__uflow@plt>
   13340:	b	1329c <__assert_fail@plt+0x1eb8>
   13344:	mov	r0, r4
   13348:	bl	1133c <__uflow@plt>
   1334c:	b	13204 <__assert_fail@plt+0x1e20>
   13350:	mov	r0, r4
   13354:	bl	1133c <__uflow@plt>
   13358:	b	1320c <__assert_fail@plt+0x1e28>
   1335c:	strd	r4, [sp, #-24]!	; 0xffffffe8
   13360:	movw	r3, #53996	; 0xd2ec
   13364:	movt	r3, #1
   13368:	strd	r6, [sp, #8]
   1336c:	movw	r7, #61936	; 0xf1f0
   13370:	movt	r7, #2
   13374:	str	r8, [sp, #16]
   13378:	movw	r8, #61760	; 0xf140
   1337c:	movt	r8, #2
   13380:	str	lr, [sp, #20]
   13384:	sub	sp, sp, #8
   13388:	mvn	r2, #0
   1338c:	ldr	ip, [r8, #48]	; 0x30
   13390:	mov	r1, #1
   13394:	mov	r6, r0
   13398:	ldr	r0, [r7, #144]	; 0x90
   1339c:	ldr	lr, [r7, #148]	; 0x94
   133a0:	stm	sp, {ip, lr}
   133a4:	bl	112d0 <__sprintf_chk@plt>
   133a8:	ldr	r5, [r8, #48]	; 0x30
   133ac:	ldr	r4, [r7, #144]	; 0x90
   133b0:	ldr	r3, [r7, #148]	; 0x94
   133b4:	sub	r0, r0, r5
   133b8:	cmp	r5, #0
   133bc:	add	r4, r4, r0
   133c0:	addgt	r5, r4, r5
   133c4:	add	r3, r3, #1
   133c8:	str	r3, [r7, #148]	; 0x94
   133cc:	ble	133e4 <__assert_fail@plt+0x2000>
   133d0:	ldrb	r0, [r4], #1
   133d4:	ldr	r3, [r6]
   133d8:	blx	r3
   133dc:	cmp	r4, r5
   133e0:	bne	133d0 <__assert_fail@plt+0x1fec>
   133e4:	ldr	r3, [r8]
   133e8:	ldrb	r0, [r8, #52]	; 0x34
   133ec:	cmp	r3, #1
   133f0:	ble	13478 <__assert_fail@plt+0x2094>
   133f4:	cmp	r0, #9
   133f8:	beq	13444 <__assert_fail@plt+0x2060>
   133fc:	ldr	r3, [r6]
   13400:	blx	r3
   13404:	ldrb	r3, [r7, #156]	; 0x9c
   13408:	cmp	r3, #0
   1340c:	beq	1342c <__assert_fail@plt+0x2048>
   13410:	ldrb	r3, [r7, #68]	; 0x44
   13414:	cmp	r3, #0
   13418:	bne	1342c <__assert_fail@plt+0x2048>
   1341c:	ldr	r3, [r7, #112]	; 0x70
   13420:	ldr	r2, [r7, #152]	; 0x98
   13424:	add	r3, r3, r2
   13428:	str	r3, [r7, #112]	; 0x70
   1342c:	add	sp, sp, #8
   13430:	ldrd	r4, [sp]
   13434:	ldrd	r6, [sp, #8]
   13438:	ldr	r8, [sp, #16]
   1343c:	add	sp, sp, #20
   13440:	pop	{pc}		; (ldr pc, [sp], #4)
   13444:	ldr	r3, [r8, #48]	; 0x30
   13448:	ldr	r4, [r7, #152]	; 0x98
   1344c:	sub	r4, r4, r3
   13450:	cmp	r4, #0
   13454:	sub	r4, r4, #1
   13458:	ble	13404 <__assert_fail@plt+0x2020>
   1345c:	sub	r4, r4, #1
   13460:	mov	r0, #32
   13464:	ldr	r3, [r6]
   13468:	blx	r3
   1346c:	cmn	r4, #1
   13470:	bne	1345c <__assert_fail@plt+0x2078>
   13474:	b	13404 <__assert_fail@plt+0x2020>
   13478:	ldr	r3, [r6]
   1347c:	blx	r3
   13480:	ldrb	r3, [r8, #52]	; 0x34
   13484:	cmp	r3, #9
   13488:	bne	13404 <__assert_fail@plt+0x2020>
   1348c:	ldr	r3, [r8, #24]
   13490:	ldr	r2, [r7, #72]	; 0x48
   13494:	sdiv	r2, r2, r3
   13498:	mla	r3, r3, r2, r3
   1349c:	str	r3, [r7, #72]	; 0x48
   134a0:	b	13404 <__assert_fail@plt+0x2020>
   134a4:	strd	r4, [sp, #-16]!
   134a8:	movw	r4, #61936	; 0xf1f0
   134ac:	movt	r4, #2
   134b0:	mov	r5, r0
   134b4:	ldr	r3, [r0, #32]
   134b8:	str	r6, [sp, #8]
   134bc:	ldr	r0, [r4, #88]	; 0x58
   134c0:	str	lr, [sp, #12]
   134c4:	str	r3, [r4, #128]	; 0x80
   134c8:	cmp	r3, r0
   134cc:	bgt	134f8 <__assert_fail@plt+0x2114>
   134d0:	ldrb	r3, [r4, #132]	; 0x84
   134d4:	cmp	r3, #0
   134d8:	bne	13514 <__assert_fail@plt+0x2130>
   134dc:	ldrb	r3, [r5, #36]	; 0x24
   134e0:	cmp	r3, #0
   134e4:	bne	13524 <__assert_fail@plt+0x2140>
   134e8:	ldrd	r4, [sp]
   134ec:	ldr	r6, [sp, #8]
   134f0:	add	sp, sp, #12
   134f4:	pop	{pc}		; (ldr pc, [sp], #4)
   134f8:	sub	r0, r3, r0
   134fc:	bl	12870 <__assert_fail@plt+0x148c>
   13500:	mov	r3, #0
   13504:	str	r3, [r4, #128]	; 0x80
   13508:	ldrb	r3, [r4, #132]	; 0x84
   1350c:	cmp	r3, #0
   13510:	beq	134dc <__assert_fail@plt+0x20f8>
   13514:	bl	129fc <__assert_fail@plt+0x1618>
   13518:	ldrb	r3, [r5, #36]	; 0x24
   1351c:	cmp	r3, #0
   13520:	beq	134e8 <__assert_fail@plt+0x2104>
   13524:	add	r0, r5, #16
   13528:	ldrd	r4, [sp]
   1352c:	ldr	r6, [sp, #8]
   13530:	ldr	lr, [sp, #12]
   13534:	add	sp, sp, #16
   13538:	b	1335c <__assert_fail@plt+0x1f78>
   1353c:	strd	r4, [sp, #-32]!	; 0xffffffe0
   13540:	mov	r5, r0
   13544:	ldr	r0, [r0]
   13548:	ldr	r3, [r0, #4]
   1354c:	ldr	r2, [r0, #8]
   13550:	strd	r6, [sp, #8]
   13554:	strd	r8, [sp, #16]
   13558:	str	sl, [sp, #24]
   1355c:	str	lr, [sp, #28]
   13560:	cmp	r3, r2
   13564:	bcs	138f0 <__assert_fail@plt+0x250c>
   13568:	add	r2, r3, #1
   1356c:	str	r2, [r0, #4]
   13570:	ldrb	r6, [r3]
   13574:	movw	r4, #61936	; 0xf1f0
   13578:	movt	r4, #2
   1357c:	cmp	r6, #12
   13580:	ldr	r8, [r4, #112]	; 0x70
   13584:	beq	1378c <__assert_fail@plt+0x23a8>
   13588:	mov	r3, #0
   1358c:	cmp	r6, #10
   13590:	strb	r3, [r5, #37]	; 0x25
   13594:	beq	135b4 <__assert_fail@plt+0x21d0>
   13598:	cmp	r6, #12
   1359c:	beq	137e4 <__assert_fail@plt+0x2400>
   135a0:	cmn	r6, #1
   135a4:	beq	13694 <__assert_fail@plt+0x22b0>
   135a8:	uxtb	r0, r6
   135ac:	bl	12c44 <__assert_fail@plt+0x1860>
   135b0:	mov	r7, r0
   135b4:	ldrb	r3, [r4, #156]	; 0x9c
   135b8:	cmp	r3, #0
   135bc:	beq	135d8 <__assert_fail@plt+0x21f4>
   135c0:	ldr	r2, [r4, #112]	; 0x70
   135c4:	ldr	r3, [r4, #160]	; 0xa0
   135c8:	cmp	r2, r3
   135cc:	movgt	r0, #0
   135d0:	strgt	r8, [r4, #112]	; 0x70
   135d4:	bgt	136a0 <__assert_fail@plt+0x22bc>
   135d8:	ldr	r2, [r5, #16]
   135dc:	movw	r3, #9120	; 0x23a0
   135e0:	movt	r3, #1
   135e4:	cmp	r2, r3
   135e8:	beq	136d4 <__assert_fail@plt+0x22f0>
   135ec:	ldrb	r3, [r4, #104]	; 0x68
   135f0:	mov	r2, #1
   135f4:	strb	r2, [r4, #124]	; 0x7c
   135f8:	cmp	r3, #0
   135fc:	beq	13614 <__assert_fail@plt+0x2230>
   13600:	movw	r3, #61760	; 0xf140
   13604:	movt	r3, #2
   13608:	ldrb	r3, [r3, #4]
   1360c:	cmp	r3, #0
   13610:	beq	138fc <__assert_fail@plt+0x2518>
   13614:	ldrb	r3, [r4, #68]	; 0x44
   13618:	cmp	r3, #0
   1361c:	beq	136b8 <__assert_fail@plt+0x22d4>
   13620:	ldrb	r3, [r4, #164]	; 0xa4
   13624:	cmp	r3, #0
   13628:	beq	136b8 <__assert_fail@plt+0x22d4>
   1362c:	mov	r3, #0
   13630:	ldr	r8, [r4]
   13634:	ldr	r9, [r4, #84]	; 0x54
   13638:	str	r3, [r4, #84]	; 0x54
   1363c:	cmp	r9, r3
   13640:	addgt	r9, r9, #1
   13644:	movgt	sl, #1
   13648:	ble	13670 <__assert_fail@plt+0x228c>
   1364c:	mov	r0, r8
   13650:	add	sl, sl, #1
   13654:	bl	134a4 <__assert_fail@plt+0x20c0>
   13658:	ldr	r3, [r4, #84]	; 0x54
   1365c:	cmp	sl, r9
   13660:	add	r8, r8, #40	; 0x28
   13664:	add	r3, r3, #1
   13668:	str	r3, [r4, #84]	; 0x54
   1366c:	bne	1364c <__assert_fail@plt+0x2268>
   13670:	ldrb	r2, [r4, #156]	; 0x9c
   13674:	ldr	r3, [r5, #32]
   13678:	cmp	r2, #0
   1367c:	str	r3, [r4, #128]	; 0x80
   13680:	ldrne	r2, [r4, #160]	; 0xa0
   13684:	mov	r1, #0
   13688:	str	r2, [r4, #80]	; 0x50
   1368c:	strb	r1, [r4, #164]	; 0xa4
   13690:	b	136bc <__assert_fail@plt+0x22d8>
   13694:	mov	r0, r5
   13698:	bl	12760 <__assert_fail@plt+0x137c>
   1369c:	mov	r0, #1
   136a0:	ldrd	r4, [sp]
   136a4:	ldrd	r6, [sp, #8]
   136a8:	ldrd	r8, [sp, #16]
   136ac:	ldr	sl, [sp, #24]
   136b0:	add	sp, sp, #28
   136b4:	pop	{pc}		; (ldr pc, [sp], #4)
   136b8:	ldr	r3, [r4, #128]	; 0x80
   136bc:	ldr	r0, [r4, #88]	; 0x58
   136c0:	cmp	r0, r3
   136c4:	blt	13878 <__assert_fail@plt+0x2494>
   136c8:	ldrb	r3, [r4, #132]	; 0x84
   136cc:	cmp	r3, #0
   136d0:	bne	13870 <__assert_fail@plt+0x248c>
   136d4:	ldrb	r3, [r5, #36]	; 0x24
   136d8:	cmp	r3, #0
   136dc:	bne	138b0 <__assert_fail@plt+0x24cc>
   136e0:	mov	r3, #0
   136e4:	cmp	r6, #10
   136e8:	strb	r3, [r4, #165]	; 0xa5
   136ec:	beq	138a8 <__assert_fail@plt+0x24c4>
   136f0:	cmp	r7, r3
   136f4:	ldr	r6, [r4, #108]	; 0x6c
   136f8:	beq	13714 <__assert_fail@plt+0x2330>
   136fc:	add	r7, r6, r7
   13700:	ldrb	r0, [r6], #1
   13704:	ldr	r3, [r5, #16]
   13708:	blx	r3
   1370c:	cmp	r6, r7
   13710:	bne	13700 <__assert_fail@plt+0x231c>
   13714:	ldr	r0, [r5]
   13718:	ldr	r3, [r0, #4]
   1371c:	ldr	r2, [r0, #8]
   13720:	cmp	r3, r2
   13724:	bcs	13904 <__assert_fail@plt+0x2520>
   13728:	add	r2, r3, #1
   1372c:	str	r2, [r0, #4]
   13730:	ldrb	r0, [r3]
   13734:	cmp	r0, #10
   13738:	beq	138a8 <__assert_fail@plt+0x24c4>
   1373c:	cmp	r0, #12
   13740:	beq	138bc <__assert_fail@plt+0x24d8>
   13744:	cmn	r0, #1
   13748:	beq	13694 <__assert_fail@plt+0x22b0>
   1374c:	uxtb	r0, r0
   13750:	ldr	r6, [r4, #112]	; 0x70
   13754:	bl	12c44 <__assert_fail@plt+0x1860>
   13758:	ldrb	r3, [r4, #156]	; 0x9c
   1375c:	cmp	r3, #0
   13760:	bne	1388c <__assert_fail@plt+0x24a8>
   13764:	cmp	r0, #0
   13768:	ldr	r6, [r4, #108]	; 0x6c
   1376c:	beq	13714 <__assert_fail@plt+0x2330>
   13770:	add	r7, r6, r0
   13774:	ldrb	r0, [r6], #1
   13778:	ldr	r3, [r5, #16]
   1377c:	blx	r3
   13780:	cmp	r6, r7
   13784:	bne	13774 <__assert_fail@plt+0x2390>
   13788:	b	13714 <__assert_fail@plt+0x2330>
   1378c:	ldrb	r3, [r5, #37]	; 0x25
   13790:	ldr	r0, [r5]
   13794:	cmp	r3, #0
   13798:	ldr	r3, [r0, #4]
   1379c:	ldr	r2, [r0, #8]
   137a0:	beq	137f0 <__assert_fail@plt+0x240c>
   137a4:	cmp	r3, r2
   137a8:	bcs	13914 <__assert_fail@plt+0x2530>
   137ac:	add	r2, r3, #1
   137b0:	str	r2, [r0, #4]
   137b4:	ldrb	r6, [r3]
   137b8:	cmp	r6, #10
   137bc:	bne	13588 <__assert_fail@plt+0x21a4>
   137c0:	ldr	r0, [r5]
   137c4:	ldr	r3, [r0, #4]
   137c8:	ldr	r2, [r0, #8]
   137cc:	cmp	r3, r2
   137d0:	bcs	13928 <__assert_fail@plt+0x2544>
   137d4:	add	r2, r3, #1
   137d8:	str	r2, [r0, #4]
   137dc:	ldrb	r6, [r3]
   137e0:	b	13588 <__assert_fail@plt+0x21a4>
   137e4:	ldr	r0, [r5]
   137e8:	ldr	r3, [r0, #4]
   137ec:	ldr	r2, [r0, #8]
   137f0:	cmp	r3, r2
   137f4:	bcs	1390c <__assert_fail@plt+0x2528>
   137f8:	add	r2, r3, #1
   137fc:	str	r2, [r0, #4]
   13800:	ldrb	r0, [r3]
   13804:	cmp	r0, #10
   13808:	bne	13864 <__assert_fail@plt+0x2480>
   1380c:	ldrb	r2, [r4, #104]	; 0x68
   13810:	mov	r3, #1
   13814:	strb	r3, [r4, #157]	; 0x9d
   13818:	cmp	r2, #0
   1381c:	bne	13844 <__assert_fail@plt+0x2460>
   13820:	ldrb	r3, [r4, #158]	; 0x9e
   13824:	cmp	r3, #0
   13828:	movne	r3, #1
   1382c:	strbne	r3, [r4, #159]	; 0x9f
   13830:	add	r0, r5, #8
   13834:	add	r1, r5, #28
   13838:	bl	13064 <__assert_fail@plt+0x1c80>
   1383c:	mov	r0, #1
   13840:	b	136a0 <__assert_fail@plt+0x22bc>
   13844:	movw	r2, #61760	; 0xf140
   13848:	movt	r2, #2
   1384c:	ldrb	r2, [r2, #4]
   13850:	cmp	r2, #0
   13854:	bne	13820 <__assert_fail@plt+0x243c>
   13858:	strb	r3, [r4, #124]	; 0x7c
   1385c:	bl	12b2c <__assert_fail@plt+0x1748>
   13860:	b	13830 <__assert_fail@plt+0x244c>
   13864:	ldr	r1, [r5]
   13868:	bl	112b8 <ungetc@plt>
   1386c:	b	1380c <__assert_fail@plt+0x2428>
   13870:	bl	129fc <__assert_fail@plt+0x1618>
   13874:	b	136d4 <__assert_fail@plt+0x22f0>
   13878:	sub	r0, r3, r0
   1387c:	bl	12870 <__assert_fail@plt+0x148c>
   13880:	mov	r3, #0
   13884:	str	r3, [r4, #128]	; 0x80
   13888:	b	136c8 <__assert_fail@plt+0x22e4>
   1388c:	ldr	r2, [r4, #112]	; 0x70
   13890:	ldr	r3, [r4, #160]	; 0xa0
   13894:	cmp	r2, r3
   13898:	ble	13764 <__assert_fail@plt+0x2380>
   1389c:	mov	r0, #0
   138a0:	str	r6, [r4, #112]	; 0x70
   138a4:	b	136a0 <__assert_fail@plt+0x22bc>
   138a8:	mov	r0, #1
   138ac:	b	136a0 <__assert_fail@plt+0x22bc>
   138b0:	add	r0, r5, #16
   138b4:	bl	1335c <__assert_fail@plt+0x1f78>
   138b8:	b	136e0 <__assert_fail@plt+0x22fc>
   138bc:	ldr	r0, [r5]
   138c0:	ldr	r3, [r0, #4]
   138c4:	ldr	r2, [r0, #8]
   138c8:	cmp	r3, r2
   138cc:	bcs	13920 <__assert_fail@plt+0x253c>
   138d0:	add	r2, r3, #1
   138d4:	str	r2, [r0, #4]
   138d8:	ldrb	r0, [r3]
   138dc:	cmp	r0, #10
   138e0:	beq	13820 <__assert_fail@plt+0x243c>
   138e4:	ldr	r1, [r5]
   138e8:	bl	112b8 <ungetc@plt>
   138ec:	b	13820 <__assert_fail@plt+0x243c>
   138f0:	bl	1133c <__uflow@plt>
   138f4:	mov	r6, r0
   138f8:	b	13574 <__assert_fail@plt+0x2190>
   138fc:	bl	12b2c <__assert_fail@plt+0x1748>
   13900:	b	13614 <__assert_fail@plt+0x2230>
   13904:	bl	1133c <__uflow@plt>
   13908:	b	13734 <__assert_fail@plt+0x2350>
   1390c:	bl	1133c <__uflow@plt>
   13910:	b	13804 <__assert_fail@plt+0x2420>
   13914:	bl	1133c <__uflow@plt>
   13918:	mov	r6, r0
   1391c:	b	137b8 <__assert_fail@plt+0x23d4>
   13920:	bl	1133c <__uflow@plt>
   13924:	b	138dc <__assert_fail@plt+0x24f8>
   13928:	bl	1133c <__uflow@plt>
   1392c:	mov	r6, r0
   13930:	b	13588 <__assert_fail@plt+0x21a4>
   13934:	strd	r4, [sp, #-24]!	; 0xffffffe8
   13938:	mov	r5, r1
   1393c:	movw	r1, #53912	; 0xd298
   13940:	movt	r1, #1
   13944:	strd	r6, [sp, #8]
   13948:	str	r8, [sp, #16]
   1394c:	mov	r8, r0
   13950:	str	lr, [sp, #20]
   13954:	bl	110c0 <strcmp@plt>
   13958:	cmp	r0, #0
   1395c:	bne	139dc <__assert_fail@plt+0x25f8>
   13960:	movw	r1, #54000	; 0xd2f0
   13964:	movt	r1, #1
   13968:	mov	r2, #5
   1396c:	movw	r4, #61936	; 0xf1f0
   13970:	movt	r4, #2
   13974:	bl	11168 <dcgettext@plt>
   13978:	movw	r3, #61920	; 0xf1e0
   1397c:	movt	r3, #2
   13980:	str	r0, [r5, #4]
   13984:	ldr	r6, [r3]
   13988:	mov	r3, #1
   1398c:	strb	r3, [r4, #166]	; 0xa6
   13990:	cmp	r6, #0
   13994:	str	r6, [r5]
   13998:	beq	13a08 <__assert_fail@plt+0x2624>
   1399c:	mov	r0, r6
   139a0:	mov	r1, #2
   139a4:	bl	1509c <__assert_fail@plt+0x3cb8>
   139a8:	ldr	r3, [r4, #172]	; 0xac
   139ac:	mov	r7, #1
   139b0:	mov	r2, #0
   139b4:	str	r2, [r5, #8]
   139b8:	strb	r2, [r5, #37]	; 0x25
   139bc:	add	r3, r3, r7
   139c0:	str	r3, [r4, #172]	; 0xac
   139c4:	mov	r0, r7
   139c8:	ldrd	r4, [sp]
   139cc:	ldrd	r6, [sp, #8]
   139d0:	ldr	r8, [sp, #16]
   139d4:	add	sp, sp, #20
   139d8:	pop	{pc}		; (ldr pc, [sp], #4)
   139dc:	movw	r1, #59280	; 0xe790
   139e0:	movt	r1, #1
   139e4:	str	r8, [r5, #4]
   139e8:	mov	r0, r8
   139ec:	movw	r4, #61936	; 0xf1f0
   139f0:	movt	r4, #2
   139f4:	bl	15200 <__assert_fail@plt+0x3e1c>
   139f8:	mov	r6, r0
   139fc:	str	r0, [r5]
   13a00:	cmp	r6, #0
   13a04:	bne	1399c <__assert_fail@plt+0x25b8>
   13a08:	ldrb	r7, [r4, #168]	; 0xa8
   13a0c:	mov	r3, #1
   13a10:	strb	r3, [r4, #167]	; 0xa7
   13a14:	cmp	r7, #0
   13a18:	movne	r7, r6
   13a1c:	bne	139c4 <__assert_fail@plt+0x25e0>
   13a20:	bl	112c4 <__errno_location@plt>
   13a24:	ldr	r4, [r0]
   13a28:	mov	r2, r8
   13a2c:	mov	r1, #3
   13a30:	mov	r0, r6
   13a34:	bl	19778 <__assert_fail@plt+0x8394>
   13a38:	mov	r3, r0
   13a3c:	movw	r2, #59452	; 0xe83c
   13a40:	movt	r2, #1
   13a44:	mov	r0, r6
   13a48:	mov	r1, r4
   13a4c:	bl	11204 <error@plt>
   13a50:	b	139c4 <__assert_fail@plt+0x25e0>
   13a54:	strd	r4, [sp, #-16]!
   13a58:	mov	r5, r0
   13a5c:	ldr	r4, [r0]
   13a60:	str	r6, [sp, #8]
   13a64:	str	lr, [sp, #12]
   13a68:	b	13a8c <__assert_fail@plt+0x26a8>
   13a6c:	str	r1, [r4, #4]
   13a70:	ldrb	r0, [r3]
   13a74:	cmp	r0, #10
   13a78:	beq	13ab0 <__assert_fail@plt+0x26cc>
   13a7c:	cmp	r0, #12
   13a80:	beq	13ac0 <__assert_fail@plt+0x26dc>
   13a84:	cmn	r0, #1
   13a88:	beq	13b18 <__assert_fail@plt+0x2734>
   13a8c:	ldr	r3, [r4, #4]
   13a90:	ldr	r2, [r4, #8]
   13a94:	add	r1, r3, #1
   13a98:	cmp	r3, r2
   13a9c:	bcc	13a6c <__assert_fail@plt+0x2688>
   13aa0:	mov	r0, r4
   13aa4:	bl	1133c <__uflow@plt>
   13aa8:	cmp	r0, #10
   13aac:	bne	13a7c <__assert_fail@plt+0x2698>
   13ab0:	ldrd	r4, [sp]
   13ab4:	ldr	r6, [sp, #8]
   13ab8:	add	sp, sp, #12
   13abc:	pop	{pc}		; (ldr pc, [sp], #4)
   13ac0:	ldr	r3, [r4, #4]
   13ac4:	ldr	r2, [r4, #8]
   13ac8:	cmp	r3, r2
   13acc:	bcs	13b3c <__assert_fail@plt+0x2758>
   13ad0:	add	r2, r3, #1
   13ad4:	str	r2, [r4, #4]
   13ad8:	ldrb	r0, [r3]
   13adc:	cmp	r0, #10
   13ae0:	bne	13b30 <__assert_fail@plt+0x274c>
   13ae4:	movw	r3, #61936	; 0xf1f0
   13ae8:	movt	r3, #2
   13aec:	ldr	r6, [sp, #8]
   13af0:	add	r1, r5, #28
   13af4:	add	r0, r5, #8
   13af8:	ldrb	r2, [r3, #158]	; 0x9e
   13afc:	ldrd	r4, [sp]
   13b00:	ldr	lr, [sp, #12]
   13b04:	add	sp, sp, #16
   13b08:	cmp	r2, #0
   13b0c:	movne	r2, #1
   13b10:	strbne	r2, [r3, #159]	; 0x9f
   13b14:	b	13064 <__assert_fail@plt+0x1c80>
   13b18:	mov	r0, r5
   13b1c:	ldrd	r4, [sp]
   13b20:	ldr	r6, [sp, #8]
   13b24:	ldr	lr, [sp, #12]
   13b28:	add	sp, sp, #16
   13b2c:	b	12760 <__assert_fail@plt+0x137c>
   13b30:	mov	r1, r4
   13b34:	bl	112b8 <ungetc@plt>
   13b38:	b	13ae4 <__assert_fail@plt+0x2700>
   13b3c:	mov	r0, r4
   13b40:	bl	1133c <__uflow@plt>
   13b44:	b	13adc <__assert_fail@plt+0x26f8>
   13b48:	strd	r4, [sp, #-36]!	; 0xffffffdc
   13b4c:	movw	r5, #61760	; 0xf140
   13b50:	movt	r5, #2
   13b54:	ldr	r2, [r5, #56]	; 0x38
   13b58:	movw	r4, #61936	; 0xf1f0
   13b5c:	movt	r4, #2
   13b60:	strd	r6, [sp, #8]
   13b64:	mov	r7, r0
   13b68:	strd	r8, [sp, #16]
   13b6c:	mov	r8, r1
   13b70:	strd	sl, [sp, #24]
   13b74:	str	lr, [sp, #32]
   13b78:	sub	sp, sp, #52	; 0x34
   13b7c:	sub	r3, r2, #10
   13b80:	cmp	r3, #0
   13b84:	str	r3, [r4, #176]	; 0xb0
   13b88:	ble	140d4 <__assert_fail@plt+0x2cf0>
   13b8c:	ldrb	r3, [r5, #40]	; 0x28
   13b90:	cmp	r3, #0
   13b94:	beq	140e4 <__assert_fail@plt+0x2d00>
   13b98:	ldrb	r3, [r4, #180]	; 0xb4
   13b9c:	cmp	r3, #0
   13ba0:	beq	13bb4 <__assert_fail@plt+0x27d0>
   13ba4:	ldr	r3, [r4, #176]	; 0xb0
   13ba8:	add	r3, r3, r3, lsr #31
   13bac:	asr	r3, r3, #1
   13bb0:	str	r3, [r4, #176]	; 0xb0
   13bb4:	cmp	r7, #0
   13bb8:	bne	1461c <__assert_fail@plt+0x3238>
   13bbc:	ldr	ip, [r5]
   13bc0:	strb	r7, [r4, #68]	; 0x44
   13bc4:	ldrb	r3, [r5, #4]
   13bc8:	cmp	r3, #0
   13bcc:	movne	r3, #1
   13bd0:	strbne	r3, [r4, #181]	; 0xb5
   13bd4:	cmp	ip, #1
   13bd8:	ldrb	r3, [r4, #182]	; 0xb6
   13bdc:	ble	14634 <__assert_fail@plt+0x3250>
   13be0:	ldrb	r2, [r4, #132]	; 0x84
   13be4:	cmp	r2, #0
   13be8:	bne	140ec <__assert_fail@plt+0x2d08>
   13bec:	movw	r1, #54016	; 0xd300
   13bf0:	movt	r1, #1
   13bf4:	cmp	r3, #0
   13bf8:	movw	r2, #53984	; 0xd2e0
   13bfc:	movt	r2, #1
   13c00:	movne	r2, r1
   13c04:	mov	r1, #1
   13c08:	str	r2, [r5, #28]
   13c0c:	str	r1, [r4, #88]	; 0x58
   13c10:	strb	r1, [r4, #132]	; 0x84
   13c14:	strb	r1, [r4, #156]	; 0x9c
   13c18:	ldr	r2, [r5, #28]
   13c1c:	mov	r6, #1
   13c20:	ldrb	r2, [r2]
   13c24:	cmp	r2, #9
   13c28:	beq	13c34 <__assert_fail@plt+0x2850>
   13c2c:	mov	r2, #1
   13c30:	strb	r2, [r4, #116]	; 0x74
   13c34:	mov	r2, #1
   13c38:	strb	r2, [r4, #76]	; 0x4c
   13c3c:	ldrb	r0, [r4, #183]	; 0xb7
   13c40:	cmp	r3, #0
   13c44:	movne	r3, #0
   13c48:	strbne	r3, [r4, #156]	; 0x9c
   13c4c:	cmp	r0, #0
   13c50:	beq	13c98 <__assert_fail@plt+0x28b4>
   13c54:	ldrb	r3, [r5, #52]	; 0x34
   13c58:	ldr	r2, [r5, #60]	; 0x3c
   13c5c:	cmp	r3, #9
   13c60:	ldr	r3, [r5, #48]	; 0x30
   13c64:	str	r2, [r5, #44]	; 0x2c
   13c68:	addne	lr, r3, #1
   13c6c:	bne	13c88 <__assert_fail@plt+0x28a4>
   13c70:	rsbs	r2, r3, #0
   13c74:	and	lr, r3, #7
   13c78:	and	r2, r2, #7
   13c7c:	rsbpl	lr, r2, #0
   13c80:	rsb	lr, lr, #8
   13c84:	add	lr, lr, r3
   13c88:	ldrb	r3, [r4, #68]	; 0x44
   13c8c:	str	lr, [r4, #152]	; 0x98
   13c90:	cmp	r3, #0
   13c94:	bne	13c9c <__assert_fail@plt+0x28b8>
   13c98:	mov	lr, #0
   13c9c:	sub	r2, ip, #1
   13ca0:	ldr	r1, [r5, #16]
   13ca4:	smull	sl, fp, r2, r6
   13ca8:	cmp	fp, sl, asr #31
   13cac:	sub	r3, r1, lr
   13cb0:	moveq	r2, sl
   13cb4:	mvnne	r2, #-2147483648	; 0x80000000
   13cb8:	subs	r3, r3, r2
   13cbc:	bvs	149e4 <__assert_fail@plt+0x3600>
   13cc0:	sdiv	r3, r3, ip
   13cc4:	cmp	r3, #0
   13cc8:	str	r3, [r4, #160]	; 0xa0
   13ccc:	ble	149ec <__assert_fail@plt+0x3608>
   13cd0:	cmp	r0, #0
   13cd4:	bne	14644 <__assert_fail@plt+0x3260>
   13cd8:	ldr	r0, [r4, #108]	; 0x6c
   13cdc:	bl	152ac <__assert_fail@plt+0x3ec8>
   13ce0:	ldr	r0, [r5, #36]	; 0x24
   13ce4:	cmp	r0, #8
   13ce8:	movlt	r0, #8
   13cec:	bl	1a4fc <__assert_fail@plt+0x9118>
   13cf0:	mov	r3, #0
   13cf4:	str	r0, [r4, #108]	; 0x6c
   13cf8:	ldr	r0, [r4]
   13cfc:	str	r3, [r4, #172]	; 0xac
   13d00:	bl	152ac <__assert_fail@plt+0x3ec8>
   13d04:	mov	r1, #40	; 0x28
   13d08:	ldr	r0, [r5]
   13d0c:	bl	1a664 <__assert_fail@plt+0x9280>
   13d10:	ldrb	r9, [r4, #68]	; 0x44
   13d14:	mov	r6, r0
   13d18:	str	r0, [r4]
   13d1c:	cmp	r9, #0
   13d20:	beq	145e0 <__assert_fail@plt+0x31fc>
   13d24:	cmp	r7, #0
   13d28:	sub	r7, r7, #1
   13d2c:	subne	r8, r8, #4
   13d30:	beq	13d5c <__assert_fail@plt+0x2978>
   13d34:	mov	r1, r6
   13d38:	ldr	r0, [r8, #4]!
   13d3c:	bl	13934 <__assert_fail@plt+0x2550>
   13d40:	cmp	r0, #0
   13d44:	ldreq	r3, [r5]
   13d48:	addne	r6, r6, #40	; 0x28
   13d4c:	subeq	r3, r3, #1
   13d50:	streq	r3, [r5]
   13d54:	subs	r7, r7, #1
   13d58:	bcs	13d34 <__assert_fail@plt+0x2950>
   13d5c:	ldr	r3, [r5]
   13d60:	cmp	r3, #0
   13d64:	beq	14288 <__assert_fail@plt+0x2ea4>
   13d68:	movw	r0, #53980	; 0xd2dc
   13d6c:	movt	r0, #1
   13d70:	mvn	r1, #0
   13d74:	bl	125a8 <__assert_fail@plt+0x11c4>
   13d78:	ldrb	r2, [r5, #4]
   13d7c:	ldr	r3, [r4, #172]	; 0xac
   13d80:	cmp	r2, #0
   13d84:	str	r3, [r4, #4]
   13d88:	bne	147dc <__assert_fail@plt+0x33f8>
   13d8c:	ldrd	r2, [r4, #24]
   13d90:	cmp	r3, #0
   13d94:	strd	r2, [sp, #16]
   13d98:	cmpeq	r2, #1
   13d9c:	bhi	1469c <__assert_fail@plt+0x32b8>
   13da0:	mov	r2, #1
   13da4:	mov	r3, #0
   13da8:	strd	r2, [r4, #96]	; 0x60
   13dac:	ldrb	r0, [r4, #156]	; 0x9c
   13db0:	ldr	r1, [r4, #92]	; 0x5c
   13db4:	cmp	r0, #0
   13db8:	moveq	lr, r0
   13dbc:	beq	13dd4 <__assert_fail@plt+0x29f0>
   13dc0:	ldrb	r3, [r4, #68]	; 0x44
   13dc4:	ldr	lr, [r4, #160]	; 0xa0
   13dc8:	cmp	r3, #0
   13dcc:	add	lr, r1, lr
   13dd0:	bne	14934 <__assert_fail@plt+0x3550>
   13dd4:	ldr	r7, [r5]
   13dd8:	ldrb	r3, [r5, #4]
   13ddc:	ldr	r8, [r4]
   13de0:	cmp	r7, #1
   13de4:	ldr	ip, [r4, #88]	; 0x58
   13de8:	str	r3, [sp, #32]
   13dec:	add	r1, r1, ip
   13df0:	ble	149b8 <__assert_fail@plt+0x35d4>
   13df4:	movw	r2, #9120	; 0x23a0
   13df8:	movt	r2, #1
   13dfc:	ldrb	r9, [r4, #68]	; 0x44
   13e00:	movw	sl, #11828	; 0x2e34
   13e04:	movt	sl, #1
   13e08:	str	r2, [sp, #16]
   13e0c:	movw	r2, #12036	; 0x2f04
   13e10:	movt	r2, #1
   13e14:	movw	fp, #13628	; 0x353c
   13e18:	movt	fp, #1
   13e1c:	ldrb	r6, [r4, #183]	; 0xb7
   13e20:	str	r2, [sp, #36]	; 0x24
   13e24:	mov	r3, r8
   13e28:	ldr	r2, [r4, #160]	; 0xa0
   13e2c:	str	r2, [sp, #40]	; 0x28
   13e30:	mov	r2, #1
   13e34:	eor	r9, r9, r2
   13e38:	str	r8, [sp, #44]	; 0x2c
   13e3c:	ldr	r8, [sp, #40]	; 0x28
   13e40:	str	r4, [sp, #40]	; 0x28
   13e44:	ldr	r4, [sp, #32]
   13e48:	str	r5, [sp, #32]
   13e4c:	mov	r5, ip
   13e50:	cmp	r4, #0
   13e54:	streq	fp, [r3, #12]
   13e58:	streq	sl, [r3, #16]
   13e5c:	beq	13e70 <__assert_fail@plt+0x2a8c>
   13e60:	ldr	ip, [sp, #36]	; 0x24
   13e64:	str	ip, [r3, #12]
   13e68:	ldr	ip, [sp, #16]
   13e6c:	str	ip, [r3, #16]
   13e70:	cmp	r6, #0
   13e74:	moveq	ip, r6
   13e78:	beq	13e88 <__assert_fail@plt+0x2aa4>
   13e7c:	cmp	r2, #1
   13e80:	movne	ip, r9
   13e84:	orreq	ip, r9, #1
   13e88:	cmp	r0, #0
   13e8c:	add	r2, r2, #1
   13e90:	str	r1, [r3, #32]
   13e94:	addne	r1, r5, lr
   13e98:	moveq	lr, r0
   13e9c:	strb	ip, [r3, #36]	; 0x24
   13ea0:	addne	lr, r1, r8
   13ea4:	moveq	r1, r0
   13ea8:	cmp	r2, r7
   13eac:	add	r3, r3, #40	; 0x28
   13eb0:	bne	13e50 <__assert_fail@plt+0x2a6c>
   13eb4:	ldr	r5, [sp, #32]
   13eb8:	add	r3, r7, r7, lsl #2
   13ebc:	ldr	r4, [sp, #40]	; 0x28
   13ec0:	ldr	r8, [sp, #44]	; 0x2c
   13ec4:	ldrb	r2, [r5, #4]
   13ec8:	add	r8, r8, r3, lsl #3
   13ecc:	sub	r8, r8, #40	; 0x28
   13ed0:	str	r2, [sp, #32]
   13ed4:	ldr	r3, [sp, #32]
   13ed8:	cmp	r3, #0
   13edc:	beq	13eec <__assert_fail@plt+0x2b08>
   13ee0:	ldrb	r3, [r4, #181]	; 0xb5
   13ee4:	cmp	r3, #0
   13ee8:	bne	14918 <__assert_fail@plt+0x3534>
   13eec:	movw	r2, #11828	; 0x2e34
   13ef0:	movt	r2, #1
   13ef4:	movw	r3, #13628	; 0x353c
   13ef8:	movt	r3, #1
   13efc:	str	r3, [r8, #12]
   13f00:	str	r2, [r8, #16]
   13f04:	ldrb	r3, [r4, #183]	; 0xb7
   13f08:	cmp	r3, #0
   13f0c:	beq	13f20 <__assert_fail@plt+0x2b3c>
   13f10:	ldrb	r3, [r4, #68]	; 0x44
   13f14:	eor	r3, r3, #1
   13f18:	cmp	r7, #1
   13f1c:	orreq	r3, r3, #1
   13f20:	ldr	r2, [r5, #44]	; 0x2c
   13f24:	movw	r0, #61924	; 0xf1e4
   13f28:	movt	r0, #2
   13f2c:	mov	r7, #0
   13f30:	str	r1, [r8, #32]
   13f34:	str	r0, [sp, #16]
   13f38:	strb	r3, [r8, #36]	; 0x24
   13f3c:	str	r2, [r4, #148]	; 0x94
   13f40:	ldr	r3, [sp, #32]
   13f44:	ldr	r6, [r4]
   13f48:	cmp	r3, #0
   13f4c:	ldr	r3, [r5]
   13f50:	bne	142f8 <__assert_fail@plt+0x2f14>
   13f54:	cmp	r3, #0
   13f58:	beq	13f80 <__assert_fail@plt+0x2b9c>
   13f5c:	ldr	r1, [r4, #176]	; 0xb0
   13f60:	add	r6, r6, #40	; 0x28
   13f64:	ldr	r2, [r6, #-32]	; 0xffffffe0
   13f68:	cmp	r2, #0
   13f6c:	moveq	r2, r1
   13f70:	movne	r2, #0
   13f74:	subs	r3, r3, #1
   13f78:	str	r2, [r6, #-12]
   13f7c:	bne	13f60 <__assert_fail@plt+0x2b7c>
   13f80:	bl	1228c <__assert_fail@plt+0xea8>
   13f84:	cmp	r0, #0
   13f88:	beq	14288 <__assert_fail@plt+0x2ea4>
   13f8c:	ldrb	r3, [r5, #40]	; 0x28
   13f90:	strb	r7, [r4, #124]	; 0x7c
   13f94:	ldr	r6, [r4, #176]	; 0xb0
   13f98:	cmp	r3, #0
   13f9c:	movne	r3, #1
   13fa0:	strbne	r3, [r4, #104]	; 0x68
   13fa4:	ldrb	r3, [r4, #180]	; 0xb4
   13fa8:	cmp	r3, #0
   13fac:	lslne	r6, r6, #1
   13fb0:	cmp	r6, #0
   13fb4:	movgt	r9, #0
   13fb8:	ble	1498c <__assert_fail@plt+0x35a8>
   13fbc:	bl	1228c <__assert_fail@plt+0xea8>
   13fc0:	cmp	r0, #0
   13fc4:	beq	141fc <__assert_fail@plt+0x2e18>
   13fc8:	ldr	r3, [r5]
   13fcc:	mov	r8, #1
   13fd0:	str	r7, [r4, #72]	; 0x48
   13fd4:	str	r7, [r4, #80]	; 0x50
   13fd8:	str	r7, [r4, #84]	; 0x54
   13fdc:	strb	r7, [r4, #124]	; 0x7c
   13fe0:	cmp	r3, #0
   13fe4:	strb	r7, [r4, #164]	; 0xa4
   13fe8:	strb	r8, [r4, #165]	; 0xa5
   13fec:	ldr	sl, [r4]
   13ff0:	bgt	14094 <__assert_fail@plt+0x2cb0>
   13ff4:	b	14164 <__assert_fail@plt+0x2d80>
   13ff8:	mov	r0, sl
   13ffc:	ldr	r3, [sl, #12]
   14000:	strb	r7, [r4, #157]	; 0x9d
   14004:	ldr	r2, [sl, #32]
   14008:	str	r2, [r4, #128]	; 0x80
   1400c:	blx	r3
   14010:	cmp	r0, #0
   14014:	beq	142a4 <__assert_fail@plt+0x2ec0>
   14018:	ldr	r3, [sl, #28]
   1401c:	ldrb	fp, [r4, #124]	; 0x7c
   14020:	sub	r3, r3, #1
   14024:	cmp	r3, #0
   14028:	orr	r9, fp, r9
   1402c:	str	r3, [sl, #28]
   14030:	ble	142b0 <__assert_fail@plt+0x2ecc>
   14034:	ldrb	r3, [r4, #68]	; 0x44
   14038:	cmp	r3, #0
   1403c:	beq	14068 <__assert_fail@plt+0x2c84>
   14040:	ldr	r3, [sl, #8]
   14044:	cmp	r3, #0
   14048:	beq	14068 <__assert_fail@plt+0x2c84>
   1404c:	ldrb	r2, [r4, #165]	; 0xa5
   14050:	cmp	r2, #0
   14054:	bne	140c8 <__assert_fail@plt+0x2ce4>
   14058:	cmp	r3, #3
   1405c:	beq	142e0 <__assert_fail@plt+0x2efc>
   14060:	cmp	r3, #2
   14064:	beq	142d4 <__assert_fail@plt+0x2ef0>
   14068:	ldrb	r3, [r4, #132]	; 0x84
   1406c:	cmp	r3, #0
   14070:	beq	14080 <__assert_fail@plt+0x2c9c>
   14074:	ldr	r3, [r4, #84]	; 0x54
   14078:	add	r3, r3, #1
   1407c:	str	r3, [r4, #84]	; 0x54
   14080:	ldr	r3, [r5]
   14084:	add	r8, r8, #1
   14088:	add	sl, sl, #40	; 0x28
   1408c:	cmp	r8, r3
   14090:	bgt	1412c <__assert_fail@plt+0x2d48>
   14094:	ldr	r3, [sl, #28]
   14098:	str	r7, [r4, #112]	; 0x70
   1409c:	cmp	r3, #0
   140a0:	bgt	13ff8 <__assert_fail@plt+0x2c14>
   140a4:	ldr	r3, [sl, #8]
   140a8:	cmp	r3, #1
   140ac:	beq	13ff8 <__assert_fail@plt+0x2c14>
   140b0:	ldrb	r3, [r4, #68]	; 0x44
   140b4:	cmp	r3, #0
   140b8:	beq	14068 <__assert_fail@plt+0x2c84>
   140bc:	ldrb	r3, [r4, #165]	; 0xa5
   140c0:	cmp	r3, #0
   140c4:	beq	142e0 <__assert_fail@plt+0x2efc>
   140c8:	mov	r3, #1
   140cc:	strb	r3, [r4, #164]	; 0xa4
   140d0:	b	14068 <__assert_fail@plt+0x2c84>
   140d4:	mov	r1, #0
   140d8:	mov	r3, #1
   140dc:	strb	r1, [r5, #40]	; 0x28
   140e0:	strb	r3, [r4, #158]	; 0x9e
   140e4:	str	r2, [r4, #176]	; 0xb0
   140e8:	b	13b98 <__assert_fail@plt+0x27b4>
   140ec:	cmp	r3, #0
   140f0:	ldr	r6, [r4, #88]	; 0x58
   140f4:	bne	14904 <__assert_fail@plt+0x3520>
   140f8:	cmp	r6, #1
   140fc:	movne	r2, #1
   14100:	strbne	r2, [r4, #156]	; 0x9c
   14104:	bne	13c2c <__assert_fail@plt+0x2848>
   14108:	ldr	r2, [r5, #28]
   1410c:	ldrb	r2, [r2]
   14110:	cmp	r2, #9
   14114:	movweq	r2, #53984	; 0xd2e0
   14118:	movteq	r2, #1
   1411c:	streq	r2, [r5, #28]
   14120:	mov	r2, #1
   14124:	strb	r2, [r4, #156]	; 0x9c
   14128:	b	13c18 <__assert_fail@plt+0x2834>
   1412c:	ldrb	r3, [r4, #124]	; 0x7c
   14130:	cmp	r3, #0
   14134:	beq	14164 <__assert_fail@plt+0x2d80>
   14138:	ldr	r3, [sp, #16]
   1413c:	ldr	r0, [r3]
   14140:	ldr	r3, [r0, #20]
   14144:	ldr	r2, [r0, #24]
   14148:	cmp	r3, r2
   1414c:	addcc	r1, r3, #1
   14150:	movcc	r2, #10
   14154:	strcc	r1, [r0, #20]
   14158:	strbcc	r2, [r3]
   1415c:	bcs	142ec <__assert_fail@plt+0x2f08>
   14160:	sub	r6, r6, #1
   14164:	bl	1228c <__assert_fail@plt+0xea8>
   14168:	cmp	r0, #0
   1416c:	beq	142c4 <__assert_fail@plt+0x2ee0>
   14170:	ldrb	r3, [r4, #180]	; 0xb4
   14174:	cmp	r3, #0
   14178:	beq	141b0 <__assert_fail@plt+0x2dcc>
   1417c:	cmp	r9, #0
   14180:	beq	141b0 <__assert_fail@plt+0x2dcc>
   14184:	ldr	r3, [sp, #16]
   14188:	ldr	r0, [r3]
   1418c:	ldr	r3, [r0, #20]
   14190:	ldr	r2, [r0, #24]
   14194:	cmp	r3, r2
   14198:	addcc	r1, r3, #1
   1419c:	movcc	r2, #10
   141a0:	strcc	r1, [r0, #20]
   141a4:	strbcc	r2, [r3]
   141a8:	bcs	1452c <__assert_fail@plt+0x3148>
   141ac:	sub	r6, r6, #1
   141b0:	cmp	r6, #0
   141b4:	bgt	13fbc <__assert_fail@plt+0x2bd8>
   141b8:	cmp	r6, #0
   141bc:	bne	141fc <__assert_fail@plt+0x2e18>
   141c0:	ldr	r1, [r5]
   141c4:	ldr	r3, [r4]
   141c8:	cmp	r1, #0
   141cc:	ble	141fc <__assert_fail@plt+0x2e18>
   141d0:	mov	r2, #1
   141d4:	add	r1, r1, r2
   141d8:	mov	ip, r2
   141dc:	ldr	r0, [r3, #8]
   141e0:	add	r2, r2, #1
   141e4:	add	r3, r3, #40	; 0x28
   141e8:	cmp	r0, #0
   141ec:	strbeq	ip, [r3, #-3]
   141f0:	cmp	r1, r2
   141f4:	bne	141dc <__assert_fail@plt+0x2df8>
   141f8:	mov	r6, #0
   141fc:	cmp	r9, #0
   14200:	strb	r9, [r4, #124]	; 0x7c
   14204:	beq	14214 <__assert_fail@plt+0x2e30>
   14208:	ldrb	r3, [r5, #40]	; 0x28
   1420c:	cmp	r3, #0
   14210:	bne	1458c <__assert_fail@plt+0x31a8>
   14214:	ldrb	r3, [r4, #158]	; 0x9e
   14218:	cmp	r3, #0
   1421c:	beq	14258 <__assert_fail@plt+0x2e74>
   14220:	ldrb	r3, [r4, #159]	; 0x9f
   14224:	cmp	r3, #0
   14228:	beq	14258 <__assert_fail@plt+0x2e74>
   1422c:	ldr	r3, [sp, #16]
   14230:	ldr	r0, [r3]
   14234:	ldr	r3, [r0, #20]
   14238:	ldr	r2, [r0, #24]
   1423c:	cmp	r3, r2
   14240:	addcc	r1, r3, #1
   14244:	movcc	r2, #12
   14248:	strcc	r1, [r0, #20]
   1424c:	strbcc	r2, [r3]
   14250:	bcs	149ac <__assert_fail@plt+0x35c8>
   14254:	strb	r7, [r4, #159]	; 0x9f
   14258:	ldr	r1, [r4, #96]	; 0x60
   1425c:	ldr	r0, [r4, #100]	; 0x64
   14260:	ldrd	r2, [r5, #8]
   14264:	adds	r1, r1, #1
   14268:	str	r1, [sp, #24]
   1426c:	adc	r1, r0, #0
   14270:	str	r1, [sp, #28]
   14274:	ldrd	r0, [sp, #24]
   14278:	cmp	r1, r3
   1427c:	strd	r0, [r4, #96]	; 0x60
   14280:	cmpeq	r0, r2
   14284:	bls	1451c <__assert_fail@plt+0x3138>
   14288:	add	sp, sp, #52	; 0x34
   1428c:	ldrd	r4, [sp]
   14290:	ldrd	r6, [sp, #8]
   14294:	ldrd	r8, [sp, #16]
   14298:	ldrd	sl, [sp, #24]
   1429c:	add	sp, sp, #32
   142a0:	pop	{pc}		; (ldr pc, [sp], #4)
   142a4:	mov	r0, sl
   142a8:	bl	13a54 <__assert_fail@plt+0x2670>
   142ac:	b	14018 <__assert_fail@plt+0x2c34>
   142b0:	bl	1228c <__assert_fail@plt+0xea8>
   142b4:	cmp	r0, #0
   142b8:	bne	14034 <__assert_fail@plt+0x2c50>
   142bc:	cmp	fp, #0
   142c0:	bne	14138 <__assert_fail@plt+0x2d54>
   142c4:	ldrb	r3, [r5, #40]	; 0x28
   142c8:	cmp	r3, #0
   142cc:	bne	14170 <__assert_fail@plt+0x2d8c>
   142d0:	b	141b8 <__assert_fail@plt+0x2dd4>
   142d4:	ldrb	r3, [r4, #157]	; 0x9d
   142d8:	cmp	r3, #0
   142dc:	beq	14068 <__assert_fail@plt+0x2c84>
   142e0:	mov	r0, sl
   142e4:	bl	134a4 <__assert_fail@plt+0x20c0>
   142e8:	b	14068 <__assert_fail@plt+0x2c84>
   142ec:	mov	r1, #10
   142f0:	bl	11348 <__overflow@plt>
   142f4:	b	14160 <__assert_fail@plt+0x2d7c>
   142f8:	ldrb	ip, [r4, #181]	; 0xb5
   142fc:	str	r7, [r4, #8]
   14300:	cmp	ip, #0
   14304:	bne	14538 <__assert_fail@plt+0x3154>
   14308:	sub	r2, r3, #1
   1430c:	cmp	r2, #0
   14310:	str	r2, [sp, #36]	; 0x24
   14314:	ble	14558 <__assert_fail@plt+0x3174>
   14318:	ldr	r2, [sp, #36]	; 0x24
   1431c:	mov	r1, r6
   14320:	add	r0, r2, #1
   14324:	mov	r2, #1
   14328:	add	r2, r2, #1
   1432c:	add	r1, r1, #40	; 0x28
   14330:	str	r7, [r1, #-16]
   14334:	cmp	r2, r0
   14338:	bne	14328 <__assert_fail@plt+0x2f44>
   1433c:	ldr	r2, [r4, #4]
   14340:	cmp	r2, #0
   14344:	moveq	r1, r2
   14348:	moveq	r8, r2
   1434c:	beq	14478 <__assert_fail@plt+0x3094>
   14350:	mov	r9, #0
   14354:	mov	r3, #1
   14358:	str	r5, [sp, #40]	; 0x28
   1435c:	mov	r8, r9
   14360:	mov	fp, r9
   14364:	mov	r5, r3
   14368:	ldr	sl, [r4, #176]	; 0xb0
   1436c:	str	r8, [r6, #20]
   14370:	cmp	sl, #0
   14374:	beq	14408 <__assert_fail@plt+0x3024>
   14378:	ldr	r3, [r4, #4]
   1437c:	cmp	r3, #0
   14380:	beq	14458 <__assert_fail@plt+0x3074>
   14384:	ldr	r3, [r6, #8]
   14388:	b	143a0 <__assert_fail@plt+0x2fbc>
   1438c:	subs	sl, sl, #1
   14390:	beq	14408 <__assert_fail@plt+0x3024>
   14394:	ldr	r2, [r4, #4]
   14398:	cmp	r2, #0
   1439c:	beq	14458 <__assert_fail@plt+0x3074>
   143a0:	cmp	r3, #0
   143a4:	bne	1438c <__assert_fail@plt+0x2fa8>
   143a8:	mov	r0, r6
   143ac:	str	r3, [r4, #112]	; 0x70
   143b0:	bl	1353c <__assert_fail@plt+0x2158>
   143b4:	cmp	r0, #0
   143b8:	beq	1444c <__assert_fail@plt+0x3068>
   143bc:	ldr	r3, [r6, #8]
   143c0:	ldr	r1, [r4, #8]
   143c4:	cmp	r3, #0
   143c8:	beq	143d4 <__assert_fail@plt+0x2ff0>
   143cc:	cmp	r1, fp
   143d0:	beq	1438c <__assert_fail@plt+0x2fa8>
   143d4:	ldr	r2, [r6, #24]
   143d8:	add	r8, r8, #1
   143dc:	subs	sl, sl, #1
   143e0:	ldr	r0, [r4, #112]	; 0x70
   143e4:	ldr	ip, [r4, #120]	; 0x78
   143e8:	add	r2, r2, #1
   143ec:	ldr	lr, [r4, #136]	; 0x88
   143f0:	str	r2, [r6, #24]
   143f4:	str	fp, [ip, r9]
   143f8:	mov	fp, r1
   143fc:	str	r0, [lr, r9]
   14400:	lsl	r9, r8, #2
   14404:	bne	14394 <__assert_fail@plt+0x2fb0>
   14408:	ldr	r3, [sp, #36]	; 0x24
   1440c:	add	r5, r5, #1
   14410:	add	r6, r6, #40	; 0x28
   14414:	mov	r0, r9
   14418:	mov	ip, fp
   1441c:	cmp	r3, r5
   14420:	blt	14430 <__assert_fail@plt+0x304c>
   14424:	ldr	r3, [r4, #4]
   14428:	cmp	r3, #0
   1442c:	bne	14368 <__assert_fail@plt+0x2f84>
   14430:	ldr	r5, [sp, #40]	; 0x28
   14434:	mov	r2, ip
   14438:	mov	r1, r0
   1443c:	ldrb	ip, [r4, #181]	; 0xb5
   14440:	ldr	r6, [r4]
   14444:	ldr	r3, [r5]
   14448:	b	14478 <__assert_fail@plt+0x3094>
   1444c:	mov	r0, r6
   14450:	bl	13a54 <__assert_fail@plt+0x2670>
   14454:	b	143bc <__assert_fail@plt+0x2fd8>
   14458:	ldr	r5, [sp, #40]	; 0x28
   1445c:	mov	r3, r9
   14460:	mov	r9, fp
   14464:	mov	r1, r3
   14468:	mov	r2, r9
   1446c:	ldrb	ip, [r4, #181]	; 0xb5
   14470:	ldr	r6, [r4]
   14474:	ldr	r3, [r5]
   14478:	cmp	ip, #0
   1447c:	sub	r0, r3, #1
   14480:	ldr	ip, [r4, #120]	; 0x78
   14484:	str	r2, [ip, r1]
   14488:	beq	14564 <__assert_fail@plt+0x3180>
   1448c:	cmp	r3, #0
   14490:	ble	144d8 <__assert_fail@plt+0x30f4>
   14494:	sdiv	r9, r8, r3
   14498:	mov	r2, #1
   1449c:	add	fp, r3, #1
   144a0:	mov	ip, #0
   144a4:	mov	r1, r6
   144a8:	mls	r8, r3, r9, r8
   144ac:	add	sl, r9, r2
   144b0:	cmp	r8, r2
   144b4:	add	r2, r2, #1
   144b8:	str	ip, [r1, #20]
   144bc:	movge	lr, sl
   144c0:	movlt	lr, r9
   144c4:	cmp	r2, fp
   144c8:	add	ip, ip, lr
   144cc:	add	r1, r1, #40	; 0x28
   144d0:	str	lr, [r1, #-16]
   144d4:	bne	144b0 <__assert_fail@plt+0x30cc>
   144d8:	cmp	r0, #0
   144dc:	beq	14510 <__assert_fail@plt+0x312c>
   144e0:	mov	r2, r6
   144e4:	ldr	r1, [r2, #24]
   144e8:	subs	r0, r0, #1
   144ec:	add	r2, r2, #40	; 0x28
   144f0:	str	r1, [r2, #-12]
   144f4:	bne	144e4 <__assert_fail@plt+0x3100>
   144f8:	ldr	r2, [sp, #32]
   144fc:	add	r3, r3, r3, lsl #2
   14500:	add	r6, r6, r3, lsl #3
   14504:	sub	r6, r6, #40	; 0x28
   14508:	cmp	r2, #0
   1450c:	beq	14574 <__assert_fail@plt+0x3190>
   14510:	ldr	r3, [r6, #24]
   14514:	str	r3, [r6, #28]
   14518:	b	13f80 <__assert_fail@plt+0x2b9c>
   1451c:	bl	12308 <__assert_fail@plt+0xf24>
   14520:	ldrb	r3, [r5, #4]
   14524:	str	r3, [sp, #32]
   14528:	b	13f40 <__assert_fail@plt+0x2b5c>
   1452c:	mov	r1, #10
   14530:	bl	11348 <__overflow@plt>
   14534:	b	141ac <__assert_fail@plt+0x2dc8>
   14538:	cmp	r3, #0
   1453c:	strgt	r3, [sp, #36]	; 0x24
   14540:	bgt	14318 <__assert_fail@plt+0x2f34>
   14544:	ldr	r2, [r4, #120]	; 0x78
   14548:	sub	r0, r3, #1
   1454c:	mov	r8, #0
   14550:	str	r7, [r2]
   14554:	b	1448c <__assert_fail@plt+0x30a8>
   14558:	ldr	r0, [sp, #36]	; 0x24
   1455c:	ldr	r2, [r4, #120]	; 0x78
   14560:	str	ip, [r2]
   14564:	cmp	r0, #0
   14568:	movne	r2, #0
   1456c:	strne	r2, [sp, #32]
   14570:	bne	144e0 <__assert_fail@plt+0x30fc>
   14574:	ldr	r3, [r6, #8]
   14578:	cmp	r3, #0
   1457c:	ldreq	r3, [r4, #176]	; 0xb0
   14580:	strne	r7, [r6, #28]
   14584:	streq	r3, [r6, #28]
   14588:	b	13f80 <__assert_fail@plt+0x2b9c>
   1458c:	ldrb	r3, [r4, #184]	; 0xb8
   14590:	cmp	r3, #0
   14594:	bne	14668 <__assert_fail@plt+0x3284>
   14598:	adds	r6, r6, #5
   1459c:	beq	14258 <__assert_fail@plt+0x2e74>
   145a0:	mov	r8, #10
   145a4:	ldr	r9, [sp, #16]
   145a8:	b	145b4 <__assert_fail@plt+0x31d0>
   145ac:	subs	r6, r6, #1
   145b0:	beq	14258 <__assert_fail@plt+0x2e74>
   145b4:	ldr	r0, [r9]
   145b8:	ldr	r3, [r0, #20]
   145bc:	ldr	r2, [r0, #24]
   145c0:	cmp	r3, r2
   145c4:	addcc	r2, r3, #1
   145c8:	strcc	r2, [r0, #20]
   145cc:	strbcc	r8, [r3]
   145d0:	bcc	145ac <__assert_fail@plt+0x31c8>
   145d4:	mov	r1, #10
   145d8:	bl	11348 <__overflow@plt>
   145dc:	b	145ac <__assert_fail@plt+0x31c8>
   145e0:	cmp	r7, #0
   145e4:	ble	14870 <__assert_fail@plt+0x348c>
   145e8:	mov	r1, r0
   145ec:	ldr	r0, [r8]
   145f0:	bl	13934 <__assert_fail@plt+0x2550>
   145f4:	cmp	r0, #0
   145f8:	beq	14288 <__assert_fail@plt+0x2ea4>
   145fc:	ldr	r7, [r8]
   14600:	ldr	r0, [r6]
   14604:	bl	11300 <fileno@plt>
   14608:	mov	r1, r0
   1460c:	mov	r0, r7
   14610:	bl	125a8 <__assert_fail@plt+0x11c4>
   14614:	str	r9, [r6, #24]
   14618:	b	148c4 <__assert_fail@plt+0x34e0>
   1461c:	ldrb	r3, [r4, #68]	; 0x44
   14620:	cmp	r3, #0
   14624:	ldreq	ip, [r5]
   14628:	movne	ip, r7
   1462c:	strne	r7, [r5]
   14630:	b	13bc4 <__assert_fail@plt+0x27e0>
   14634:	mov	r2, #0
   14638:	ldr	r6, [r4, #88]	; 0x58
   1463c:	strb	r2, [r5, #4]
   14640:	b	13c3c <__assert_fail@plt+0x2858>
   14644:	ldr	r0, [r4, #144]	; 0x90
   14648:	bl	152ac <__assert_fail@plt+0x3ec8>
   1464c:	ldr	r0, [r5, #48]	; 0x30
   14650:	cmp	r0, #11
   14654:	movcc	r0, #11
   14658:	add	r0, r0, #1
   1465c:	bl	1a4fc <__assert_fail@plt+0x9118>
   14660:	str	r0, [r4, #144]	; 0x90
   14664:	b	13cd8 <__assert_fail@plt+0x28f4>
   14668:	ldr	r3, [sp, #16]
   1466c:	ldr	r0, [r3]
   14670:	ldr	r3, [r0, #20]
   14674:	ldr	r2, [r0, #24]
   14678:	cmp	r3, r2
   1467c:	addcc	r1, r3, #1
   14680:	movcc	r2, #12
   14684:	strcc	r1, [r0, #20]
   14688:	strbcc	r2, [r3]
   1468c:	bcc	14258 <__assert_fail@plt+0x2e74>
   14690:	mov	r1, #12
   14694:	bl	11348 <__overflow@plt>
   14698:	b	14258 <__assert_fail@plt+0x2e74>
   1469c:	mov	r8, #1
   146a0:	mov	r9, #0
   146a4:	mov	sl, #2
   146a8:	mov	fp, r5
   146ac:	ldr	r6, [r4]
   146b0:	ldr	r1, [r4, #176]	; 0xb0
   146b4:	ldr	r2, [fp]
   146b8:	cmp	r1, #1
   146bc:	movgt	r5, #1
   146c0:	ble	14718 <__assert_fail@plt+0x3334>
   146c4:	cmp	r2, #0
   146c8:	ble	14708 <__assert_fail@plt+0x3324>
   146cc:	mov	r7, #1
   146d0:	b	146e8 <__assert_fail@plt+0x3304>
   146d4:	ldr	r2, [fp]
   146d8:	add	r7, r7, #1
   146dc:	add	r6, r6, #40	; 0x28
   146e0:	cmp	r7, r2
   146e4:	bgt	14704 <__assert_fail@plt+0x3320>
   146e8:	ldr	r3, [r6, #8]
   146ec:	cmp	r3, #0
   146f0:	bne	146d4 <__assert_fail@plt+0x32f0>
   146f4:	mov	r1, r7
   146f8:	mov	r0, r6
   146fc:	bl	130d0 <__assert_fail@plt+0x1cec>
   14700:	b	146d4 <__assert_fail@plt+0x32f0>
   14704:	ldr	r6, [r4]
   14708:	add	r5, r5, #1
   1470c:	ldr	r3, [r4, #176]	; 0xb0
   14710:	cmp	r5, r3
   14714:	blt	146c4 <__assert_fail@plt+0x32e0>
   14718:	mov	r3, #1
   1471c:	cmp	r2, #0
   14720:	strb	r3, [r4, #140]	; 0x8c
   14724:	ble	1479c <__assert_fail@plt+0x33b8>
   14728:	mov	r7, #1
   1472c:	b	14744 <__assert_fail@plt+0x3360>
   14730:	ldr	r1, [fp]
   14734:	add	r7, r7, #1
   14738:	add	r6, r6, #40	; 0x28
   1473c:	cmp	r7, r1
   14740:	bgt	14760 <__assert_fail@plt+0x337c>
   14744:	ldr	r3, [r6, #8]
   14748:	cmp	r3, #0
   1474c:	bne	14730 <__assert_fail@plt+0x334c>
   14750:	mov	r1, r7
   14754:	mov	r0, r6
   14758:	bl	130d0 <__assert_fail@plt+0x1cec>
   1475c:	b	14730 <__assert_fail@plt+0x334c>
   14760:	ldrb	r2, [fp, #4]
   14764:	cmp	r2, #0
   14768:	beq	1479c <__assert_fail@plt+0x33b8>
   1476c:	cmp	r1, #0
   14770:	ldr	r2, [r4]
   14774:	ble	1479c <__assert_fail@plt+0x33b8>
   14778:	add	r1, r1, #1
   1477c:	mov	r0, #1
   14780:	ldr	r3, [r2, #8]
   14784:	add	r0, r0, #1
   14788:	add	r2, r2, #40	; 0x28
   1478c:	cmp	r3, #3
   14790:	strne	sl, [r2, #-32]	; 0xffffffe0
   14794:	cmp	r0, r1
   14798:	bne	14780 <__assert_fail@plt+0x339c>
   1479c:	bl	12308 <__assert_fail@plt+0xf24>
   147a0:	ldr	r2, [r4, #4]
   147a4:	mov	r6, #0
   147a8:	strb	r6, [r4, #140]	; 0x8c
   147ac:	cmp	r2, r6
   147b0:	ble	14948 <__assert_fail@plt+0x3564>
   147b4:	ldrd	r2, [sp, #16]
   147b8:	adds	r8, r8, #1
   147bc:	adc	r9, r9, #0
   147c0:	cmp	r3, r9
   147c4:	cmpeq	r2, r8
   147c8:	bne	146ac <__assert_fail@plt+0x32c8>
   147cc:	mov	r5, fp
   147d0:	ldrd	r2, [r4, #24]
   147d4:	strd	r2, [r4, #96]	; 0x60
   147d8:	b	13dac <__assert_fail@plt+0x29c8>
   147dc:	ldr	r3, [r5]
   147e0:	ldr	r8, [r4, #176]	; 0xb0
   147e4:	smull	r8, r9, r8, r3
   147e8:	cmp	r9, r8, asr #31
   147ec:	bne	149c0 <__assert_fail@plt+0x35dc>
   147f0:	mov	r3, #1
   147f4:	adds	sl, r8, r3
   147f8:	bvs	149c0 <__assert_fail@plt+0x35dc>
   147fc:	ldr	r6, [r4, #160]	; 0xa0
   14800:	adds	r6, r6, r3
   14804:	bvs	149c0 <__assert_fail@plt+0x35dc>
   14808:	smull	r6, r7, r8, r6
   1480c:	cmp	r7, r6, asr #31
   14810:	bne	149c0 <__assert_fail@plt+0x35dc>
   14814:	ldr	r0, [r4, #120]	; 0x78
   14818:	bl	152ac <__assert_fail@plt+0x3ec8>
   1481c:	mov	r1, #4
   14820:	mov	r0, sl
   14824:	bl	1a664 <__assert_fail@plt+0x9280>
   14828:	str	r0, [r4, #120]	; 0x78
   1482c:	ldr	r0, [r4, #136]	; 0x88
   14830:	bl	152ac <__assert_fail@plt+0x3ec8>
   14834:	mov	r1, #4
   14838:	mov	r0, r8
   1483c:	bl	1a664 <__assert_fail@plt+0x9280>
   14840:	str	r0, [r4, #136]	; 0x88
   14844:	ldr	r0, [r4, #12]
   14848:	bl	152ac <__assert_fail@plt+0x3ec8>
   1484c:	ldrb	r1, [r4, #132]	; 0x84
   14850:	mov	r0, r6
   14854:	add	r1, r1, #1
   14858:	bl	1a664 <__assert_fail@plt+0x9280>
   1485c:	ldrb	r3, [r4, #132]	; 0x84
   14860:	str	r0, [r4, #12]
   14864:	mla	r6, r3, r6, r6
   14868:	str	r6, [r4, #16]
   1486c:	b	13d8c <__assert_fail@plt+0x29a8>
   14870:	mov	r2, #5
   14874:	movw	r1, #54000	; 0xd2f0
   14878:	movt	r1, #1
   1487c:	mov	r0, r9
   14880:	bl	11168 <dcgettext@plt>
   14884:	movw	r2, #61920	; 0xf1e0
   14888:	movt	r2, #2
   1488c:	ldr	r3, [r4, #172]	; 0xac
   14890:	mov	ip, #1
   14894:	mvn	r1, #0
   14898:	stmib	r6, {r0, r9}
   1489c:	ldr	r2, [r2]
   148a0:	movw	r0, #53980	; 0xd2dc
   148a4:	movt	r0, #1
   148a8:	strb	ip, [r4, #166]	; 0xa6
   148ac:	add	r3, r3, ip
   148b0:	str	r2, [r6]
   148b4:	strb	r9, [r6, #37]	; 0x25
   148b8:	str	r3, [r4, #172]	; 0xac
   148bc:	bl	125a8 <__assert_fail@plt+0x11c4>
   148c0:	str	r9, [r6, #24]
   148c4:	ldr	r3, [r5]
   148c8:	ldr	ip, [r6]
   148cc:	ldr	r0, [r6, #4]
   148d0:	subs	r3, r3, #1
   148d4:	beq	13d78 <__assert_fail@plt+0x2994>
   148d8:	add	r1, r6, #80	; 0x50
   148dc:	mov	r2, #0
   148e0:	subs	r3, r3, #1
   148e4:	add	r1, r1, #40	; 0x28
   148e8:	str	ip, [r1, #-80]	; 0xffffffb0
   148ec:	str	r0, [r1, #-76]	; 0xffffffb4
   148f0:	str	r2, [r1, #-72]	; 0xffffffb8
   148f4:	str	r2, [r1, #-56]	; 0xffffffc8
   148f8:	strb	r2, [r1, #-43]	; 0xffffffd5
   148fc:	bne	148e0 <__assert_fail@plt+0x34fc>
   14900:	b	13d78 <__assert_fail@plt+0x2994>
   14904:	mov	r2, #1
   14908:	cmp	r6, r2
   1490c:	strb	r2, [r4, #156]	; 0x9c
   14910:	bne	13c2c <__assert_fail@plt+0x2848>
   14914:	b	13c18 <__assert_fail@plt+0x2834>
   14918:	movw	r2, #9120	; 0x23a0
   1491c:	movt	r2, #1
   14920:	movw	r3, #12036	; 0x2f04
   14924:	movt	r3, #1
   14928:	str	r3, [r8, #12]
   1492c:	str	r2, [r8, #16]
   14930:	b	13f04 <__assert_fail@plt+0x2b20>
   14934:	ldrb	r3, [r4, #183]	; 0xb7
   14938:	cmp	r3, #0
   1493c:	ldrne	r3, [r4, #152]	; 0x98
   14940:	addne	lr, lr, r3
   14944:	b	13dd4 <__assert_fail@plt+0x29f0>
   14948:	mov	r2, #5
   1494c:	mov	r0, r6
   14950:	movw	r1, #54064	; 0xd330
   14954:	movt	r1, #1
   14958:	bl	11168 <dcgettext@plt>
   1495c:	mov	r2, r0
   14960:	mov	r1, r6
   14964:	strd	r8, [sp, #8]
   14968:	mov	r0, r6
   1496c:	ldrd	r6, [sp, #16]
   14970:	mov	r5, fp
   14974:	strd	r6, [sp]
   14978:	bl	11204 <error@plt>
   1497c:	ldr	r3, [r4, #4]
   14980:	cmp	r3, #0
   14984:	ble	14288 <__assert_fail@plt+0x2ea4>
   14988:	b	147d0 <__assert_fail@plt+0x33ec>
   1498c:	bne	14214 <__assert_fail@plt+0x2e30>
   14990:	ldr	r1, [r5]
   14994:	ldr	r3, [r4]
   14998:	cmp	r1, #0
   1499c:	strble	r6, [r4, #124]	; 0x7c
   149a0:	ble	14214 <__assert_fail@plt+0x2e30>
   149a4:	mov	r9, r6
   149a8:	b	141d0 <__assert_fail@plt+0x2dec>
   149ac:	mov	r1, #12
   149b0:	bl	11348 <__overflow@plt>
   149b4:	b	14254 <__assert_fail@plt+0x2e70>
   149b8:	mov	r7, #1
   149bc:	b	13ed4 <__assert_fail@plt+0x2af0>
   149c0:	movw	r1, #54044	; 0xd31c
   149c4:	movt	r1, #1
   149c8:	mov	r2, #5
   149cc:	mov	r0, #0
   149d0:	bl	11168 <dcgettext@plt>
   149d4:	mov	r2, r0
   149d8:	mov	r1, #0
   149dc:	mov	r0, #1
   149e0:	bl	11204 <error@plt>
   149e4:	mov	r3, #0
   149e8:	str	r3, [r4, #160]	; 0xa0
   149ec:	movw	r1, #54020	; 0xd304
   149f0:	movt	r1, #1
   149f4:	b	149c8 <__assert_fail@plt+0x35e4>
   149f8:	subs	r6, r0, #0
   149fc:	str	r7, [sp, #-8]!
   14a00:	str	lr, [sp, #4]
   14a04:	sub	sp, sp, #56	; 0x38
   14a08:	beq	14a50 <__assert_fail@plt+0x366c>
   14a0c:	movw	r3, #61912	; 0xf1d8
   14a10:	movt	r3, #2
   14a14:	ldr	r4, [r3]
   14a18:	mov	r2, #5
   14a1c:	movw	r1, #54120	; 0xd368
   14a20:	movt	r1, #1
   14a24:	mov	r0, #0
   14a28:	bl	11168 <dcgettext@plt>
   14a2c:	movw	r3, #62132	; 0xf2b4
   14a30:	movt	r3, #2
   14a34:	mov	r2, r0
   14a38:	mov	r1, #1
   14a3c:	ldr	r3, [r3]
   14a40:	mov	r0, r4
   14a44:	bl	1130c <__fprintf_chk@plt>
   14a48:	mov	r0, r6
   14a4c:	bl	11288 <exit@plt>
   14a50:	mov	r2, #5
   14a54:	movw	r1, #54160	; 0xd390
   14a58:	movt	r1, #1
   14a5c:	movw	r7, #61924	; 0xf1e4
   14a60:	movt	r7, #2
   14a64:	bl	11168 <dcgettext@plt>
   14a68:	movw	r3, #62132	; 0xf2b4
   14a6c:	movt	r3, #2
   14a70:	mov	r1, r0
   14a74:	mov	r0, #1
   14a78:	ldr	r2, [r3]
   14a7c:	bl	112f4 <__printf_chk@plt>
   14a80:	mov	r2, #5
   14a84:	movw	r1, #54196	; 0xd3b4
   14a88:	movt	r1, #1
   14a8c:	mov	r0, r6
   14a90:	bl	11168 <dcgettext@plt>
   14a94:	ldr	r1, [r7]
   14a98:	bl	1109c <fputs_unlocked@plt>
   14a9c:	mov	r2, #5
   14aa0:	movw	r1, #54244	; 0xd3e4
   14aa4:	movt	r1, #1
   14aa8:	mov	r0, r6
   14aac:	bl	11168 <dcgettext@plt>
   14ab0:	ldr	r1, [r7]
   14ab4:	bl	1109c <fputs_unlocked@plt>
   14ab8:	mov	r2, #5
   14abc:	movw	r1, #54300	; 0xd41c
   14ac0:	movt	r1, #1
   14ac4:	mov	r0, r6
   14ac8:	bl	11168 <dcgettext@plt>
   14acc:	ldr	r1, [r7]
   14ad0:	bl	1109c <fputs_unlocked@plt>
   14ad4:	mov	r2, #5
   14ad8:	movw	r1, #54376	; 0xd468
   14adc:	movt	r1, #1
   14ae0:	mov	r0, r6
   14ae4:	bl	11168 <dcgettext@plt>
   14ae8:	ldr	r1, [r7]
   14aec:	bl	1109c <fputs_unlocked@plt>
   14af0:	mov	r2, #5
   14af4:	movw	r1, #54712	; 0xd5b8
   14af8:	movt	r1, #1
   14afc:	mov	r0, r6
   14b00:	bl	11168 <dcgettext@plt>
   14b04:	ldr	r1, [r7]
   14b08:	bl	1109c <fputs_unlocked@plt>
   14b0c:	mov	r2, #5
   14b10:	movw	r1, #54984	; 0xd6c8
   14b14:	movt	r1, #1
   14b18:	mov	r0, r6
   14b1c:	bl	11168 <dcgettext@plt>
   14b20:	ldr	r1, [r7]
   14b24:	bl	1109c <fputs_unlocked@plt>
   14b28:	mov	r2, #5
   14b2c:	movw	r1, #55384	; 0xd858
   14b30:	movt	r1, #1
   14b34:	mov	r0, r6
   14b38:	bl	11168 <dcgettext@plt>
   14b3c:	ldr	r1, [r7]
   14b40:	bl	1109c <fputs_unlocked@plt>
   14b44:	mov	r2, #5
   14b48:	movw	r1, #55812	; 0xda04
   14b4c:	movt	r1, #1
   14b50:	mov	r0, r6
   14b54:	bl	11168 <dcgettext@plt>
   14b58:	ldr	r1, [r7]
   14b5c:	bl	1109c <fputs_unlocked@plt>
   14b60:	mov	r2, #5
   14b64:	movw	r1, #56032	; 0xdae0
   14b68:	movt	r1, #1
   14b6c:	mov	r0, r6
   14b70:	bl	11168 <dcgettext@plt>
   14b74:	ldr	r1, [r7]
   14b78:	bl	1109c <fputs_unlocked@plt>
   14b7c:	mov	r2, #5
   14b80:	movw	r1, #56176	; 0xdb70
   14b84:	movt	r1, #1
   14b88:	mov	r0, r6
   14b8c:	bl	11168 <dcgettext@plt>
   14b90:	ldr	r1, [r7]
   14b94:	bl	1109c <fputs_unlocked@plt>
   14b98:	mov	r2, #5
   14b9c:	movw	r1, #56524	; 0xdccc
   14ba0:	movt	r1, #1
   14ba4:	mov	r0, r6
   14ba8:	bl	11168 <dcgettext@plt>
   14bac:	ldr	r1, [r7]
   14bb0:	bl	1109c <fputs_unlocked@plt>
   14bb4:	mov	r2, #5
   14bb8:	movw	r1, #56780	; 0xddcc
   14bbc:	movt	r1, #1
   14bc0:	mov	r0, r6
   14bc4:	bl	11168 <dcgettext@plt>
   14bc8:	ldr	r1, [r7]
   14bcc:	bl	1109c <fputs_unlocked@plt>
   14bd0:	mov	r2, #5
   14bd4:	movw	r1, #57108	; 0xdf14
   14bd8:	movt	r1, #1
   14bdc:	mov	r0, r6
   14be0:	bl	11168 <dcgettext@plt>
   14be4:	ldr	r1, [r7]
   14be8:	bl	1109c <fputs_unlocked@plt>
   14bec:	mov	r2, #5
   14bf0:	movw	r1, #57344	; 0xe000
   14bf4:	movt	r1, #1
   14bf8:	mov	r0, r6
   14bfc:	bl	11168 <dcgettext@plt>
   14c00:	ldr	r1, [r7]
   14c04:	bl	1109c <fputs_unlocked@plt>
   14c08:	mov	r2, #5
   14c0c:	movw	r1, #57448	; 0xe068
   14c10:	movt	r1, #1
   14c14:	mov	r0, r6
   14c18:	bl	11168 <dcgettext@plt>
   14c1c:	ldr	r1, [r7]
   14c20:	bl	1109c <fputs_unlocked@plt>
   14c24:	mov	r2, #5
   14c28:	movw	r1, #57852	; 0xe1fc
   14c2c:	movt	r1, #1
   14c30:	mov	r0, r6
   14c34:	bl	11168 <dcgettext@plt>
   14c38:	ldr	r1, [r7]
   14c3c:	bl	1109c <fputs_unlocked@plt>
   14c40:	mov	r2, #5
   14c44:	movw	r1, #58068	; 0xe2d4
   14c48:	movt	r1, #1
   14c4c:	mov	r0, r6
   14c50:	bl	11168 <dcgettext@plt>
   14c54:	ldr	r1, [r7]
   14c58:	bl	1109c <fputs_unlocked@plt>
   14c5c:	mov	r2, #5
   14c60:	movw	r1, #58116	; 0xe304
   14c64:	movt	r1, #1
   14c68:	mov	r0, r6
   14c6c:	bl	11168 <dcgettext@plt>
   14c70:	ldr	r1, [r7]
   14c74:	bl	1109c <fputs_unlocked@plt>
   14c78:	ldr	lr, [pc, #560]	; 14eb0 <__assert_fail@plt+0x3acc>
   14c7c:	ldr	ip, [lr]
   14c80:	ldr	r4, [lr, #4]
   14c84:	ldrd	r8, [lr, #8]
   14c88:	subs	r1, ip, #0
   14c8c:	str	ip, [sp]
   14c90:	ldrd	r2, [lr, #16]
   14c94:	str	r4, [sp, #4]
   14c98:	ldrd	r4, [lr, #24]
   14c9c:	strd	r8, [sp, #8]
   14ca0:	ldrd	r8, [lr, #32]
   14ca4:	strd	r2, [sp, #16]
   14ca8:	ldrd	r2, [lr, #40]	; 0x28
   14cac:	strd	r4, [sp, #24]
   14cb0:	ldrd	r4, [lr, #48]	; 0x30
   14cb4:	strd	r8, [sp, #32]
   14cb8:	strd	r2, [sp, #40]	; 0x28
   14cbc:	strd	r4, [sp, #48]	; 0x30
   14cc0:	movwne	r5, #54116	; 0xd364
   14cc4:	mov	r4, sp
   14cc8:	movtne	r5, #1
   14ccc:	bne	14dc4 <__assert_fail@plt+0x39e0>
   14cd0:	ldr	r4, [r4, #4]
   14cd4:	movw	r1, #58172	; 0xe33c
   14cd8:	movt	r1, #1
   14cdc:	mov	r2, #5
   14ce0:	cmp	r4, #0
   14ce4:	beq	14dd8 <__assert_fail@plt+0x39f4>
   14ce8:	mov	r0, #0
   14cec:	bl	11168 <dcgettext@plt>
   14cf0:	mov	r1, r0
   14cf4:	movw	r3, #58196	; 0xe354
   14cf8:	movt	r3, #1
   14cfc:	movw	r2, #58236	; 0xe37c
   14d00:	movt	r2, #1
   14d04:	mov	r0, #1
   14d08:	bl	112f4 <__printf_chk@plt>
   14d0c:	mov	r1, #0
   14d10:	mov	r0, #5
   14d14:	bl	11354 <setlocale@plt>
   14d18:	cmp	r0, #0
   14d1c:	movweq	r5, #54116	; 0xd364
   14d20:	movteq	r5, #1
   14d24:	beq	14d48 <__assert_fail@plt+0x3964>
   14d28:	movw	r1, #58252	; 0xe38c
   14d2c:	movt	r1, #1
   14d30:	mov	r2, #3
   14d34:	movw	r5, #54116	; 0xd364
   14d38:	movt	r5, #1
   14d3c:	bl	113c0 <strncmp@plt>
   14d40:	cmp	r0, #0
   14d44:	bne	14e90 <__assert_fail@plt+0x3aac>
   14d48:	mov	r2, #5
   14d4c:	movw	r1, #58328	; 0xe3d8
   14d50:	movt	r1, #1
   14d54:	mov	r0, #0
   14d58:	bl	11168 <dcgettext@plt>
   14d5c:	mov	r1, r0
   14d60:	movw	r3, #54116	; 0xd364
   14d64:	movt	r3, #1
   14d68:	movw	r2, #58196	; 0xe354
   14d6c:	movt	r2, #1
   14d70:	mov	r0, #1
   14d74:	bl	112f4 <__printf_chk@plt>
   14d78:	mov	r2, #5
   14d7c:	movw	r1, #58356	; 0xe3f4
   14d80:	movt	r1, #1
   14d84:	mov	r0, #0
   14d88:	bl	11168 <dcgettext@plt>
   14d8c:	movw	r2, #59004	; 0xe67c
   14d90:	movt	r2, #1
   14d94:	cmp	r4, r5
   14d98:	movw	r3, #53980	; 0xd2dc
   14d9c:	movt	r3, #1
   14da0:	mov	r1, r0
   14da4:	moveq	r3, r2
   14da8:	mov	r2, r4
   14dac:	mov	r0, #1
   14db0:	bl	112f4 <__printf_chk@plt>
   14db4:	b	14a48 <__assert_fail@plt+0x3664>
   14db8:	ldr	r1, [r4, #8]!
   14dbc:	cmp	r1, #0
   14dc0:	beq	14cd0 <__assert_fail@plt+0x38ec>
   14dc4:	mov	r0, r5
   14dc8:	bl	110c0 <strcmp@plt>
   14dcc:	cmp	r0, #0
   14dd0:	bne	14db8 <__assert_fail@plt+0x39d4>
   14dd4:	b	14cd0 <__assert_fail@plt+0x38ec>
   14dd8:	mov	r0, r4
   14ddc:	bl	11168 <dcgettext@plt>
   14de0:	mov	r1, r0
   14de4:	movw	r3, #58196	; 0xe354
   14de8:	movt	r3, #1
   14dec:	movw	r2, #58236	; 0xe37c
   14df0:	movt	r2, #1
   14df4:	mov	r0, #1
   14df8:	bl	112f4 <__printf_chk@plt>
   14dfc:	mov	r1, r4
   14e00:	mov	r0, #5
   14e04:	bl	11354 <setlocale@plt>
   14e08:	cmp	r0, #0
   14e0c:	beq	14e28 <__assert_fail@plt+0x3a44>
   14e10:	movw	r1, #58252	; 0xe38c
   14e14:	movt	r1, #1
   14e18:	mov	r2, #3
   14e1c:	bl	113c0 <strncmp@plt>
   14e20:	cmp	r0, #0
   14e24:	bne	14e84 <__assert_fail@plt+0x3aa0>
   14e28:	mov	r2, #5
   14e2c:	movw	r1, #58328	; 0xe3d8
   14e30:	movt	r1, #1
   14e34:	mov	r0, #0
   14e38:	bl	11168 <dcgettext@plt>
   14e3c:	mov	r1, r0
   14e40:	movw	r3, #54116	; 0xd364
   14e44:	movt	r3, #1
   14e48:	movw	r2, #58196	; 0xe354
   14e4c:	movt	r2, #1
   14e50:	mov	r0, #1
   14e54:	bl	112f4 <__printf_chk@plt>
   14e58:	movw	r1, #58356	; 0xe3f4
   14e5c:	movt	r1, #1
   14e60:	mov	r2, #5
   14e64:	mov	r0, #0
   14e68:	bl	11168 <dcgettext@plt>
   14e6c:	movw	r4, #54116	; 0xd364
   14e70:	movt	r4, #1
   14e74:	movw	r3, #59004	; 0xe67c
   14e78:	movt	r3, #1
   14e7c:	mov	r1, r0
   14e80:	b	14da8 <__assert_fail@plt+0x39c4>
   14e84:	movw	r5, #54116	; 0xd364
   14e88:	movt	r5, #1
   14e8c:	mov	r4, r5
   14e90:	mov	r2, #5
   14e94:	movw	r1, #58256	; 0xe390
   14e98:	movt	r1, #1
   14e9c:	mov	r0, #0
   14ea0:	bl	11168 <dcgettext@plt>
   14ea4:	ldr	r1, [r7]
   14ea8:	bl	1109c <fputs_unlocked@plt>
   14eac:	b	14d48 <__assert_fail@plt+0x3964>
   14eb0:	andeq	sp, r1, ip, lsl #4
   14eb4:	strd	r4, [sp, #-20]!	; 0xffffffec
   14eb8:	mov	r5, r3
   14ebc:	mov	r4, r0
   14ec0:	strd	r6, [sp, #8]
   14ec4:	mov	r6, r1
   14ec8:	str	lr, [sp, #16]
   14ecc:	sub	sp, sp, #20
   14ed0:	ldrb	r1, [r0]
   14ed4:	sub	r3, r1, #48	; 0x30
   14ed8:	cmp	r3, #9
   14edc:	bls	14eec <__assert_fail@plt+0x3b08>
   14ee0:	strb	r1, [r2]
   14ee4:	add	r4, r0, #1
   14ee8:	ldrb	r1, [r0, #1]
   14eec:	cmp	r1, #0
   14ef0:	bne	14f08 <__assert_fail@plt+0x3b24>
   14ef4:	add	sp, sp, #20
   14ef8:	ldrd	r4, [sp]
   14efc:	ldrd	r6, [sp, #8]
   14f00:	add	sp, sp, #16
   14f04:	pop	{pc}		; (ldr pc, [sp], #4)
   14f08:	movw	r0, #53980	; 0xd2dc
   14f0c:	movt	r0, #1
   14f10:	add	r3, sp, #12
   14f14:	mov	r2, #10
   14f18:	mov	r1, #0
   14f1c:	str	r0, [sp]
   14f20:	mov	r0, r4
   14f24:	bl	1b864 <__assert_fail@plt+0xa480>
   14f28:	cmp	r0, #0
   14f2c:	bne	14f44 <__assert_fail@plt+0x3b60>
   14f30:	ldr	r3, [sp, #12]
   14f34:	cmp	r3, #0
   14f38:	ble	14f44 <__assert_fail@plt+0x3b60>
   14f3c:	str	r3, [r5]
   14f40:	b	14ef4 <__assert_fail@plt+0x3b10>
   14f44:	bl	112c4 <__errno_location@plt>
   14f48:	ldr	r7, [r0]
   14f4c:	mov	r2, #5
   14f50:	movw	r1, #58408	; 0xe428
   14f54:	movt	r1, #1
   14f58:	mov	r0, #0
   14f5c:	bl	11168 <dcgettext@plt>
   14f60:	mov	r5, r0
   14f64:	mov	r0, r4
   14f68:	bl	19950 <__assert_fail@plt+0x856c>
   14f6c:	mov	r1, r7
   14f70:	mov	r2, r5
   14f74:	str	r0, [sp]
   14f78:	mov	r3, r6
   14f7c:	mov	r0, #0
   14f80:	bl	11204 <error@plt>
   14f84:	mov	r0, #1
   14f88:	bl	149f8 <__assert_fail@plt+0x3614>
   14f8c:	movw	r3, #62124	; 0xf2ac
   14f90:	movt	r3, #2
   14f94:	str	r0, [r3]
   14f98:	bx	lr
   14f9c:	movw	r3, #62124	; 0xf2ac
   14fa0:	movt	r3, #2
   14fa4:	strb	r0, [r3, #4]
   14fa8:	bx	lr
   14fac:	movw	r3, #61924	; 0xf1e4
   14fb0:	movt	r3, #2
   14fb4:	strd	r4, [sp, #-16]!
   14fb8:	ldr	r0, [r3]
   14fbc:	str	r6, [sp, #8]
   14fc0:	str	lr, [sp, #12]
   14fc4:	sub	sp, sp, #8
   14fc8:	bl	1ca28 <__assert_fail@plt+0xb644>
   14fcc:	cmp	r0, #0
   14fd0:	beq	14ffc <__assert_fail@plt+0x3c18>
   14fd4:	movw	r4, #62124	; 0xf2ac
   14fd8:	movt	r4, #2
   14fdc:	ldrb	r6, [r4, #4]
   14fe0:	bl	112c4 <__errno_location@plt>
   14fe4:	mov	r5, r0
   14fe8:	cmp	r6, #0
   14fec:	beq	15028 <__assert_fail@plt+0x3c44>
   14ff0:	ldr	r3, [r0]
   14ff4:	cmp	r3, #32
   14ff8:	bne	15028 <__assert_fail@plt+0x3c44>
   14ffc:	movw	r3, #61912	; 0xf1d8
   15000:	movt	r3, #2
   15004:	ldr	r0, [r3]
   15008:	bl	1ca28 <__assert_fail@plt+0xb644>
   1500c:	cmp	r0, #0
   15010:	bne	15070 <__assert_fail@plt+0x3c8c>
   15014:	add	sp, sp, #8
   15018:	ldrd	r4, [sp]
   1501c:	ldr	r6, [sp, #8]
   15020:	add	sp, sp, #12
   15024:	pop	{pc}		; (ldr pc, [sp], #4)
   15028:	movw	r1, #59436	; 0xe82c
   1502c:	movt	r1, #1
   15030:	mov	r2, #5
   15034:	mov	r0, #0
   15038:	bl	11168 <dcgettext@plt>
   1503c:	mov	r6, r0
   15040:	ldr	r0, [r4]
   15044:	cmp	r0, #0
   15048:	beq	15080 <__assert_fail@plt+0x3c9c>
   1504c:	ldr	r4, [r5]
   15050:	bl	19764 <__assert_fail@plt+0x8380>
   15054:	mov	r3, r0
   15058:	movw	r2, #59448	; 0xe838
   1505c:	movt	r2, #1
   15060:	mov	r0, #0
   15064:	str	r6, [sp]
   15068:	mov	r1, r4
   1506c:	bl	11204 <error@plt>
   15070:	movw	r3, #61828	; 0xf184
   15074:	movt	r3, #2
   15078:	ldr	r0, [r3]
   1507c:	bl	11120 <_exit@plt>
   15080:	mov	r3, r6
   15084:	movw	r2, #59452	; 0xe83c
   15088:	movt	r2, #1
   1508c:	ldr	r1, [r5]
   15090:	bl	11204 <error@plt>
   15094:	b	15070 <__assert_fail@plt+0x3c8c>
   15098:	b	110d8 <posix_fadvise64@plt>
   1509c:	cmp	r0, #0
   150a0:	bxeq	lr
   150a4:	str	r4, [sp, #-16]!
   150a8:	mov	r4, r1
   150ac:	strd	r6, [sp, #4]
   150b0:	mov	r6, #0
   150b4:	mov	r7, #0
   150b8:	str	lr, [sp, #12]
   150bc:	sub	sp, sp, #16
   150c0:	bl	11300 <fileno@plt>
   150c4:	mov	r2, r6
   150c8:	mov	r3, r7
   150cc:	strd	r6, [sp]
   150d0:	str	r4, [sp, #8]
   150d4:	bl	110d8 <posix_fadvise64@plt>
   150d8:	add	sp, sp, #16
   150dc:	ldr	r4, [sp]
   150e0:	ldrd	r6, [sp, #4]
   150e4:	add	sp, sp, #12
   150e8:	pop	{pc}		; (ldr pc, [sp], #4)
   150ec:	strd	r4, [sp, #-12]!
   150f0:	mov	r4, r0
   150f4:	str	lr, [sp, #8]
   150f8:	sub	sp, sp, #12
   150fc:	bl	11300 <fileno@plt>
   15100:	cmp	r0, #0
   15104:	mov	r0, r4
   15108:	blt	1518c <__assert_fail@plt+0x3da8>
   1510c:	bl	11240 <__freading@plt>
   15110:	cmp	r0, #0
   15114:	bne	15158 <__assert_fail@plt+0x3d74>
   15118:	mov	r0, r4
   1511c:	bl	151a0 <__assert_fail@plt+0x3dbc>
   15120:	cmp	r0, #0
   15124:	beq	15188 <__assert_fail@plt+0x3da4>
   15128:	bl	112c4 <__errno_location@plt>
   1512c:	mov	r5, r0
   15130:	mov	r0, r4
   15134:	ldr	r4, [r5]
   15138:	bl	11318 <fclose@plt>
   1513c:	cmp	r4, #0
   15140:	mvnne	r0, #0
   15144:	strne	r4, [r5]
   15148:	add	sp, sp, #12
   1514c:	ldrd	r4, [sp]
   15150:	add	sp, sp, #8
   15154:	pop	{pc}		; (ldr pc, [sp], #4)
   15158:	mov	r0, r4
   1515c:	bl	11300 <fileno@plt>
   15160:	mov	r1, #1
   15164:	mov	r2, #0
   15168:	mov	r3, #0
   1516c:	str	r1, [sp]
   15170:	bl	111d4 <lseek64@plt>
   15174:	mvn	r3, #0
   15178:	mvn	r2, #0
   1517c:	cmp	r1, r3
   15180:	cmpeq	r0, r2
   15184:	bne	15118 <__assert_fail@plt+0x3d34>
   15188:	mov	r0, r4
   1518c:	add	sp, sp, #12
   15190:	ldrd	r4, [sp]
   15194:	ldr	lr, [sp, #8]
   15198:	add	sp, sp, #12
   1519c:	b	11318 <fclose@plt>
   151a0:	str	r4, [sp, #-8]!
   151a4:	subs	r4, r0, #0
   151a8:	str	lr, [sp, #4]
   151ac:	sub	sp, sp, #8
   151b0:	beq	151cc <__assert_fail@plt+0x3de8>
   151b4:	bl	11240 <__freading@plt>
   151b8:	cmp	r0, #0
   151bc:	beq	151cc <__assert_fail@plt+0x3de8>
   151c0:	ldr	r3, [r4]
   151c4:	tst	r3, #256	; 0x100
   151c8:	bne	151e4 <__assert_fail@plt+0x3e00>
   151cc:	mov	r0, r4
   151d0:	add	sp, sp, #8
   151d4:	ldr	r4, [sp]
   151d8:	ldr	lr, [sp, #4]
   151dc:	add	sp, sp, #8
   151e0:	b	110f0 <fflush@plt>
   151e4:	mov	r1, #1
   151e8:	mov	r2, #0
   151ec:	mov	r3, #0
   151f0:	mov	r0, r4
   151f4:	str	r1, [sp]
   151f8:	bl	1530c <__assert_fail@plt+0x3f28>
   151fc:	b	151cc <__assert_fail@plt+0x3de8>
   15200:	strd	r4, [sp, #-16]!
   15204:	mov	r5, r1
   15208:	str	r6, [sp, #8]
   1520c:	str	lr, [sp, #12]
   15210:	bl	1139c <fopen64@plt>
   15214:	subs	r4, r0, #0
   15218:	beq	15228 <__assert_fail@plt+0x3e44>
   1521c:	bl	11300 <fileno@plt>
   15220:	cmp	r0, #2
   15224:	bls	1523c <__assert_fail@plt+0x3e58>
   15228:	mov	r0, r4
   1522c:	ldrd	r4, [sp]
   15230:	ldr	r6, [sp, #8]
   15234:	add	sp, sp, #12
   15238:	pop	{pc}		; (ldr pc, [sp], #4)
   1523c:	bl	19f5c <__assert_fail@plt+0x8b78>
   15240:	subs	r6, r0, #0
   15244:	blt	1528c <__assert_fail@plt+0x3ea8>
   15248:	mov	r0, r4
   1524c:	bl	150ec <__assert_fail@plt+0x3d08>
   15250:	cmp	r0, #0
   15254:	bne	1526c <__assert_fail@plt+0x3e88>
   15258:	mov	r1, r5
   1525c:	mov	r0, r6
   15260:	bl	11084 <fdopen@plt>
   15264:	subs	r4, r0, #0
   15268:	bne	15228 <__assert_fail@plt+0x3e44>
   1526c:	bl	112c4 <__errno_location@plt>
   15270:	mov	r5, r0
   15274:	mov	r0, r6
   15278:	ldr	r6, [r5]
   1527c:	mov	r4, #0
   15280:	bl	113d8 <close@plt>
   15284:	str	r6, [r5]
   15288:	b	15228 <__assert_fail@plt+0x3e44>
   1528c:	bl	112c4 <__errno_location@plt>
   15290:	mov	r5, r0
   15294:	mov	r0, r4
   15298:	ldr	r6, [r5]
   1529c:	mov	r4, #0
   152a0:	bl	150ec <__assert_fail@plt+0x3d08>
   152a4:	str	r6, [r5]
   152a8:	b	15228 <__assert_fail@plt+0x3e44>
   152ac:	strd	r4, [sp, #-12]!
   152b0:	mov	r5, r0
   152b4:	str	lr, [sp, #8]
   152b8:	sub	sp, sp, #12
   152bc:	bl	112c4 <__errno_location@plt>
   152c0:	mov	r4, r0
   152c4:	mov	r2, #0
   152c8:	ldr	r3, [r4]
   152cc:	mov	r0, r5
   152d0:	str	r2, [r4]
   152d4:	str	r3, [sp]
   152d8:	str	r3, [sp, #4]
   152dc:	bl	11108 <free@plt>
   152e0:	ldr	r3, [r4]
   152e4:	add	r2, sp, #8
   152e8:	clz	r3, r3
   152ec:	lsr	r3, r3, #5
   152f0:	add	r3, r2, r3, lsl #2
   152f4:	ldr	r3, [r3, #-8]
   152f8:	str	r3, [r4]
   152fc:	add	sp, sp, #12
   15300:	ldrd	r4, [sp]
   15304:	add	sp, sp, #8
   15308:	pop	{pc}		; (ldr pc, [sp], #4)
   1530c:	strd	r4, [sp, #-24]!	; 0xffffffe8
   15310:	mov	r4, r0
   15314:	ldr	ip, [r0, #4]
   15318:	strd	r6, [sp, #8]
   1531c:	str	lr, [sp, #20]
   15320:	ldr	lr, [r0, #8]
   15324:	str	r8, [sp, #16]
   15328:	sub	sp, sp, #8
   1532c:	ldr	r5, [sp, #32]
   15330:	cmp	lr, ip
   15334:	beq	1535c <__assert_fail@plt+0x3f78>
   15338:	mov	r0, r4
   1533c:	str	r5, [sp, #32]
   15340:	add	sp, sp, #8
   15344:	ldrd	r4, [sp]
   15348:	ldrd	r6, [sp, #8]
   1534c:	ldr	r8, [sp, #16]
   15350:	ldr	lr, [sp, #20]
   15354:	add	sp, sp, #24
   15358:	b	11324 <fseeko64@plt>
   1535c:	ldr	ip, [r0, #16]
   15360:	ldr	lr, [r0, #20]
   15364:	cmp	lr, ip
   15368:	bne	15338 <__assert_fail@plt+0x3f54>
   1536c:	ldr	r8, [r0, #36]	; 0x24
   15370:	cmp	r8, #0
   15374:	bne	15338 <__assert_fail@plt+0x3f54>
   15378:	mov	r6, r2
   1537c:	mov	r7, r3
   15380:	bl	11300 <fileno@plt>
   15384:	mov	r2, r6
   15388:	mov	r3, r7
   1538c:	str	r5, [sp]
   15390:	bl	111d4 <lseek64@plt>
   15394:	mvn	r3, #0
   15398:	mvn	r2, #0
   1539c:	cmp	r1, r3
   153a0:	cmpeq	r0, r2
   153a4:	beq	153d4 <__assert_fail@plt+0x3ff0>
   153a8:	ldr	r3, [r4]
   153ac:	strd	r0, [r4, #80]	; 0x50
   153b0:	bic	r3, r3, #16
   153b4:	str	r3, [r4]
   153b8:	mov	r0, r8
   153bc:	add	sp, sp, #8
   153c0:	ldrd	r4, [sp]
   153c4:	ldrd	r6, [sp, #8]
   153c8:	ldr	r8, [sp, #16]
   153cc:	add	sp, sp, #20
   153d0:	pop	{pc}		; (ldr pc, [sp], #4)
   153d4:	mvn	r8, #0
   153d8:	b	153b8 <__assert_fail@plt+0x3fd4>
   153dc:	mov	r1, r0
   153e0:	mov	r0, #0
   153e4:	b	11114 <clock_gettime@plt>
   153e8:	str	r4, [sp, #-8]!
   153ec:	mov	r4, r0
   153f0:	mov	r0, #0
   153f4:	str	lr, [sp, #4]
   153f8:	sub	sp, sp, #8
   153fc:	mov	r1, sp
   15400:	bl	11114 <clock_gettime@plt>
   15404:	ldrd	r2, [sp]
   15408:	mov	r0, r4
   1540c:	strd	r2, [r4]
   15410:	add	sp, sp, #8
   15414:	ldr	r4, [sp]
   15418:	add	sp, sp, #4
   1541c:	pop	{pc}		; (ldr pc, [sp], #4)
   15420:	push	{lr}		; (str lr, [sp, #-4]!)
   15424:	sub	sp, sp, #268	; 0x10c
   15428:	movw	r2, #257	; 0x101
   1542c:	add	r1, sp, #4
   15430:	bl	19968 <__assert_fail@plt+0x8584>
   15434:	cmp	r0, #0
   15438:	movne	r0, #0
   1543c:	bne	15470 <__assert_fail@plt+0x408c>
   15440:	movw	r1, #59456	; 0xe840
   15444:	movt	r1, #1
   15448:	add	r0, sp, #4
   1544c:	bl	110c0 <strcmp@plt>
   15450:	cmp	r0, #0
   15454:	beq	15470 <__assert_fail@plt+0x408c>
   15458:	add	r0, sp, #4
   1545c:	movw	r1, #59460	; 0xe844
   15460:	movt	r1, #1
   15464:	bl	110c0 <strcmp@plt>
   15468:	adds	r0, r0, #0
   1546c:	movne	r0, #1
   15470:	add	sp, sp, #268	; 0x10c
   15474:	pop	{pc}		; (ldr pc, [sp], #4)
   15478:	mov	r3, #0
   1547c:	cmp	r0, #0
   15480:	strd	r4, [sp, #-24]!	; 0xffffffe8
   15484:	mov	r5, r1
   15488:	sbcs	r1, r1, #0
   1548c:	strd	r6, [sp, #8]
   15490:	mov	r4, r0
   15494:	add	r6, r2, #20
   15498:	str	r8, [sp, #16]
   1549c:	str	lr, [sp, #20]
   154a0:	strb	r3, [r2, #20]
   154a4:	blt	15504 <__assert_fail@plt+0x4120>
   154a8:	mov	r0, r4
   154ac:	mov	r1, r5
   154b0:	mov	r2, #10
   154b4:	mov	r3, #0
   154b8:	bl	1cd8c <__assert_fail@plt+0xb9a8>
   154bc:	add	ip, r2, #48	; 0x30
   154c0:	mov	r0, r4
   154c4:	mov	r1, r5
   154c8:	mov	r3, #0
   154cc:	mov	r2, #10
   154d0:	strb	ip, [r6, #-1]!
   154d4:	bl	1cd8c <__assert_fail@plt+0xb9a8>
   154d8:	mov	r4, r0
   154dc:	mov	r5, r1
   154e0:	orrs	r3, r4, r5
   154e4:	bne	154a8 <__assert_fail@plt+0x40c4>
   154e8:	mov	r0, r6
   154ec:	ldrd	r4, [sp]
   154f0:	ldrd	r6, [sp, #8]
   154f4:	ldr	r8, [sp, #16]
   154f8:	add	sp, sp, #20
   154fc:	pop	{pc}		; (ldr pc, [sp], #4)
   15500:	mov	r6, r7
   15504:	mov	r0, r4
   15508:	mov	r1, r5
   1550c:	mov	r2, #10
   15510:	mov	r3, #0
   15514:	bl	1cd8c <__assert_fail@plt+0xb9a8>
   15518:	rsb	ip, r2, #48	; 0x30
   1551c:	mov	r0, r4
   15520:	mov	r1, r5
   15524:	mov	r3, #0
   15528:	mov	r2, #10
   1552c:	strb	ip, [r6, #-1]
   15530:	sub	r7, r6, #1
   15534:	bl	1cd8c <__assert_fail@plt+0xb9a8>
   15538:	mov	r4, r0
   1553c:	mov	r5, r1
   15540:	orrs	r3, r4, r5
   15544:	bne	15500 <__assert_fail@plt+0x411c>
   15548:	mov	r3, #45	; 0x2d
   1554c:	sub	r6, r6, #2
   15550:	strb	r3, [r7, #-1]
   15554:	b	154e8 <__assert_fail@plt+0x4104>
   15558:	strd	r4, [sp, #-32]!	; 0xffffffe0
   1555c:	mov	r4, r0
   15560:	strd	r6, [sp, #8]
   15564:	add	r6, r0, r1
   15568:	str	r8, [sp, #16]
   1556c:	strd	sl, [sp, #20]
   15570:	mov	fp, r2
   15574:	str	lr, [sp, #28]
   15578:	sub	sp, sp, #16
   1557c:	bl	111e0 <__ctype_get_mb_cur_max@plt>
   15580:	cmp	r0, #1
   15584:	bls	156a8 <__assert_fail@plt+0x42c4>
   15588:	cmp	r4, r6
   1558c:	mov	r5, #0
   15590:	bcs	15688 <__assert_fail@plt+0x42a4>
   15594:	and	sl, fp, #2
   15598:	b	155c0 <__assert_fail@plt+0x41dc>
   1559c:	cmp	r3, #37	; 0x25
   155a0:	bcs	155b0 <__assert_fail@plt+0x41cc>
   155a4:	sub	r3, r3, #32
   155a8:	cmp	r3, #3
   155ac:	bhi	155e8 <__assert_fail@plt+0x4204>
   155b0:	add	r4, r4, #1
   155b4:	add	r5, r5, #1
   155b8:	cmp	r4, r6
   155bc:	bcs	15688 <__assert_fail@plt+0x42a4>
   155c0:	ldrb	r3, [r4]
   155c4:	cmp	r3, #63	; 0x3f
   155c8:	bls	1559c <__assert_fail@plt+0x41b8>
   155cc:	cmp	r3, #65	; 0x41
   155d0:	bcc	155e8 <__assert_fail@plt+0x4204>
   155d4:	cmp	r3, #95	; 0x5f
   155d8:	bls	155b0 <__assert_fail@plt+0x41cc>
   155dc:	sub	r3, r3, #97	; 0x61
   155e0:	cmp	r3, #29
   155e4:	bls	155b0 <__assert_fail@plt+0x41cc>
   155e8:	mov	r2, #0
   155ec:	mov	r3, #0
   155f0:	mvn	r7, #-2147483648	; 0x80000000
   155f4:	strd	r2, [sp, #8]
   155f8:	b	1561c <__assert_fail@plt+0x4238>
   155fc:	cmp	r2, r0
   15600:	add	r5, r5, r0
   15604:	blt	15684 <__assert_fail@plt+0x42a0>
   15608:	add	r0, sp, #8
   1560c:	add	r4, r4, r8
   15610:	bl	11144 <mbsinit@plt>
   15614:	cmp	r0, #0
   15618:	bne	155b8 <__assert_fail@plt+0x41d4>
   1561c:	add	r3, sp, #8
   15620:	sub	r2, r6, r4
   15624:	mov	r1, r4
   15628:	add	r0, sp, #4
   1562c:	bl	1cce4 <__assert_fail@plt+0xb900>
   15630:	cmn	r0, #1
   15634:	mov	r8, r0
   15638:	beq	15700 <__assert_fail@plt+0x431c>
   1563c:	cmn	r0, #2
   15640:	beq	15710 <__assert_fail@plt+0x432c>
   15644:	cmp	r0, #0
   15648:	ldr	r0, [sp, #4]
   1564c:	moveq	r8, #1
   15650:	bl	110fc <wcwidth@plt>
   15654:	cmp	r0, #0
   15658:	sub	r2, r7, r5
   1565c:	bge	155fc <__assert_fail@plt+0x4218>
   15660:	cmp	sl, #0
   15664:	bne	15708 <__assert_fail@plt+0x4324>
   15668:	ldr	r0, [sp, #4]
   1566c:	bl	11198 <iswcntrl@plt>
   15670:	cmp	r0, #0
   15674:	bne	15608 <__assert_fail@plt+0x4224>
   15678:	cmn	r5, #-2147483647	; 0x80000001
   1567c:	add	r5, r5, #1
   15680:	bne	15608 <__assert_fail@plt+0x4224>
   15684:	mvn	r5, #-2147483648	; 0x80000000
   15688:	mov	r0, r5
   1568c:	add	sp, sp, #16
   15690:	ldrd	r4, [sp]
   15694:	ldrd	r6, [sp, #8]
   15698:	ldr	r8, [sp, #16]
   1569c:	ldrd	sl, [sp, #20]
   156a0:	add	sp, sp, #28
   156a4:	pop	{pc}		; (ldr pc, [sp], #4)
   156a8:	cmp	r4, r6
   156ac:	movcs	r5, #0
   156b0:	bcs	15688 <__assert_fail@plt+0x42a4>
   156b4:	bl	1127c <__ctype_b_loc@plt>
   156b8:	ldr	r2, [r0]
   156bc:	and	fp, fp, #2
   156c0:	mov	r5, #0
   156c4:	ldrb	r3, [r4], #1
   156c8:	lsl	r3, r3, #1
   156cc:	ldrh	r3, [r2, r3]
   156d0:	tst	r3, #16384	; 0x4000
   156d4:	bne	156e8 <__assert_fail@plt+0x4304>
   156d8:	cmp	fp, #0
   156dc:	bne	15708 <__assert_fail@plt+0x4324>
   156e0:	tst	r3, #2
   156e4:	bne	156f4 <__assert_fail@plt+0x4310>
   156e8:	cmn	r5, #-2147483647	; 0x80000001
   156ec:	beq	15688 <__assert_fail@plt+0x42a4>
   156f0:	add	r5, r5, #1
   156f4:	cmp	r6, r4
   156f8:	bne	156c4 <__assert_fail@plt+0x42e0>
   156fc:	b	15688 <__assert_fail@plt+0x42a4>
   15700:	tst	fp, #1
   15704:	beq	155b0 <__assert_fail@plt+0x41cc>
   15708:	mvn	r5, #0
   1570c:	b	15688 <__assert_fail@plt+0x42a4>
   15710:	tst	fp, #1
   15714:	bne	15708 <__assert_fail@plt+0x4324>
   15718:	add	r5, r5, #1
   1571c:	mov	r4, r6
   15720:	b	155b8 <__assert_fail@plt+0x41d4>
   15724:	strd	r4, [sp, #-16]!
   15728:	mov	r5, r1
   1572c:	mov	r4, r0
   15730:	str	r6, [sp, #8]
   15734:	str	lr, [sp, #12]
   15738:	bl	11294 <strlen@plt>
   1573c:	mov	r1, r0
   15740:	mov	r2, r5
   15744:	ldr	r6, [sp, #8]
   15748:	mov	r0, r4
   1574c:	ldrd	r4, [sp]
   15750:	ldr	lr, [sp, #12]
   15754:	add	sp, sp, #16
   15758:	b	15558 <__assert_fail@plt+0x4174>
   1575c:	strd	r4, [sp, #-16]!
   15760:	subs	r4, r2, #0
   15764:	str	r6, [sp, #8]
   15768:	mov	r6, r0
   1576c:	str	lr, [sp, #12]
   15770:	beq	1579c <__assert_fail@plt+0x43b8>
   15774:	mov	r5, r1
   15778:	bl	1124c <__ctype_tolower_loc@plt>
   1577c:	add	r3, r5, r4
   15780:	add	r2, r6, r4
   15784:	ldrb	lr, [r3, #-1]!
   15788:	ldr	ip, [r0]
   1578c:	cmp	r5, r3
   15790:	ldr	ip, [ip, lr, lsl #2]
   15794:	strb	ip, [r2, #-1]!
   15798:	bne	15784 <__assert_fail@plt+0x43a0>
   1579c:	mov	r0, r6
   157a0:	ldrd	r4, [sp]
   157a4:	ldr	r6, [sp, #8]
   157a8:	add	sp, sp, #12
   157ac:	pop	{pc}		; (ldr pc, [sp], #4)
   157b0:	strd	r4, [sp, #-16]!
   157b4:	subs	r4, r2, #0
   157b8:	str	r6, [sp, #8]
   157bc:	mov	r6, r0
   157c0:	str	lr, [sp, #12]
   157c4:	beq	157f0 <__assert_fail@plt+0x440c>
   157c8:	mov	r5, r1
   157cc:	bl	11258 <__ctype_toupper_loc@plt>
   157d0:	add	r3, r5, r4
   157d4:	add	r2, r6, r4
   157d8:	ldrb	lr, [r3, #-1]!
   157dc:	ldr	ip, [r0]
   157e0:	cmp	r5, r3
   157e4:	ldr	ip, [ip, lr, lsl #2]
   157e8:	strb	ip, [r2, #-1]!
   157ec:	bne	157d8 <__assert_fail@plt+0x43f4>
   157f0:	mov	r0, r6
   157f4:	ldrd	r4, [sp]
   157f8:	ldr	r6, [sp, #8]
   157fc:	add	sp, sp, #12
   15800:	pop	{pc}		; (ldr pc, [sp], #4)
   15804:	strd	r4, [sp, #-36]!	; 0xffffffdc
   15808:	mov	r4, r3
   1580c:	strd	r6, [sp, #8]
   15810:	mov	r6, r0
   15814:	strd	r8, [sp, #16]
   15818:	mov	r9, r2
   1581c:	strd	sl, [sp, #24]
   15820:	str	lr, [sp, #32]
   15824:	sub	sp, sp, #1136	; 0x470
   15828:	sub	sp, sp, #4
   1582c:	str	r1, [sp, #28]
   15830:	str	r3, [sp, #48]	; 0x30
   15834:	ldrb	r3, [sp, #1176]	; 0x498
   15838:	str	r3, [sp, #40]	; 0x28
   1583c:	bl	112c4 <__errno_location@plt>
   15840:	ldr	r1, [r0]
   15844:	movw	r3, #53980	; 0xd2dc
   15848:	movt	r3, #1
   1584c:	str	r0, [sp, #36]	; 0x24
   15850:	ldr	r2, [r4, #40]	; 0x28
   15854:	ldr	ip, [r4, #8]
   15858:	ldr	r5, [sp, #1184]	; 0x4a0
   1585c:	cmp	r2, #0
   15860:	str	r1, [sp, #52]	; 0x34
   15864:	mov	r1, r2
   15868:	moveq	r1, r3
   1586c:	cmp	ip, #12
   15870:	str	ip, [sp, #32]
   15874:	subgt	r3, ip, #12
   15878:	str	r1, [sp, #56]	; 0x38
   1587c:	strgt	r3, [sp, #32]
   15880:	bgt	15894 <__assert_fail@plt+0x44b0>
   15884:	ldr	r3, [sp, #32]
   15888:	cmp	r3, #0
   1588c:	moveq	r3, #12
   15890:	str	r3, [sp, #32]
   15894:	ldrb	r3, [r9]
   15898:	cmp	r3, #0
   1589c:	beq	17244 <__assert_fail@plt+0x5e60>
   158a0:	movw	r2, #46021	; 0xb3c5
   158a4:	movt	r2, #37282	; 0x91a2
   158a8:	movw	sl, #9363	; 0x2493
   158ac:	movt	sl, #37449	; 0x9249
   158b0:	movw	r7, #26215	; 0x6667
   158b4:	movt	r7, #26214	; 0x6666
   158b8:	str	r2, [sp, #76]	; 0x4c
   158bc:	movw	r2, #34953	; 0x8889
   158c0:	movt	r2, #34952	; 0x8888
   158c4:	mov	fp, #0
   158c8:	str	sl, [sp, #64]	; 0x40
   158cc:	str	r7, [sp, #72]	; 0x48
   158d0:	str	r2, [sp, #80]	; 0x50
   158d4:	movw	r2, #34079	; 0x851f
   158d8:	movt	r2, #20971	; 0x51eb
   158dc:	str	r2, [sp, #68]	; 0x44
   158e0:	cmp	r3, #37	; 0x25
   158e4:	beq	159c8 <__assert_fail@plt+0x45e4>
   158e8:	ldr	r3, [sp, #28]
   158ec:	cmp	r5, #0
   158f0:	sub	r3, r3, fp
   158f4:	blt	1597c <__assert_fail@plt+0x4598>
   158f8:	cmp	r5, #1
   158fc:	movcs	r4, r5
   15900:	movcc	r4, #1
   15904:	cmp	r4, r3
   15908:	bcs	15984 <__assert_fail@plt+0x45a0>
   1590c:	cmp	r6, #0
   15910:	beq	1593c <__assert_fail@plt+0x4558>
   15914:	cmp	r5, #1
   15918:	ble	15934 <__assert_fail@plt+0x4550>
   1591c:	sub	r5, r5, #1
   15920:	mov	r0, r6
   15924:	mov	r1, #32
   15928:	mov	r2, r5
   1592c:	add	r6, r6, r5
   15930:	bl	112e8 <memset@plt>
   15934:	ldrb	r3, [r9]
   15938:	strb	r3, [r6], #1
   1593c:	add	fp, fp, r4
   15940:	mov	r4, r9
   15944:	ldrb	r3, [r4, #1]
   15948:	add	r9, r4, #1
   1594c:	mvn	r5, #0
   15950:	cmp	r3, #0
   15954:	bne	158e0 <__assert_fail@plt+0x44fc>
   15958:	ldr	r3, [sp, #28]
   1595c:	ldr	r2, [sp, #52]	; 0x34
   15960:	cmp	r6, #0
   15964:	cmpne	r3, #0
   15968:	movne	r3, #0
   1596c:	strbne	r3, [r6]
   15970:	ldr	r3, [sp, #36]	; 0x24
   15974:	str	r2, [r3]
   15978:	b	15994 <__assert_fail@plt+0x45b0>
   1597c:	cmp	r3, #1
   15980:	bhi	159b8 <__assert_fail@plt+0x45d4>
   15984:	ldr	r2, [sp, #36]	; 0x24
   15988:	mov	r3, #34	; 0x22
   1598c:	str	r3, [r2]
   15990:	mov	fp, #0
   15994:	mov	r0, fp
   15998:	add	sp, sp, #1136	; 0x470
   1599c:	add	sp, sp, #4
   159a0:	ldrd	r4, [sp]
   159a4:	ldrd	r6, [sp, #8]
   159a8:	ldrd	r8, [sp, #16]
   159ac:	ldrd	sl, [sp, #24]
   159b0:	add	sp, sp, #32
   159b4:	pop	{pc}		; (ldr pc, [sp], #4)
   159b8:	cmp	r6, #0
   159bc:	mov	r4, #1
   159c0:	bne	15934 <__assert_fail@plt+0x4550>
   159c4:	b	1593c <__assert_fail@plt+0x4558>
   159c8:	ldr	r3, [sp, #40]	; 0x28
   159cc:	mov	sl, #0
   159d0:	mov	r8, r9
   159d4:	str	sl, [sp, #44]	; 0x2c
   159d8:	str	r3, [sp, #60]	; 0x3c
   159dc:	ldrb	r3, [r8, #1]!
   159e0:	sub	r2, r3, #35	; 0x23
   159e4:	mov	r7, r3
   159e8:	cmp	r2, #60	; 0x3c
   159ec:	ldrls	pc, [pc, r2, lsl #2]
   159f0:	b	15b04 <__assert_fail@plt+0x4720>
   159f4:	strdeq	r5, [r1], -ip
   159f8:	andeq	r5, r1, r4, lsl #22
   159fc:	andeq	r5, r1, r4, lsl #22
   15a00:	andeq	r5, r1, r4, lsl #22
   15a04:	andeq	r5, r1, r4, lsl #22
   15a08:	andeq	r5, r1, r4, lsl #22
   15a0c:	andeq	r5, r1, r4, lsl #22
   15a10:	andeq	r5, r1, r4, lsl #22
   15a14:	strdeq	r5, [r1], -r4
   15a18:	andeq	r5, r1, r4, lsl #22
   15a1c:	strdeq	r5, [r1], -r4
   15a20:	andeq	r5, r1, r4, lsl #22
   15a24:	andeq	r5, r1, r4, lsl #22
   15a28:	strdeq	r5, [r1], -r4
   15a2c:	andeq	r5, r1, r4, lsl #22
   15a30:	andeq	r5, r1, r4, lsl #22
   15a34:	andeq	r5, r1, r4, lsl #22
   15a38:	andeq	r5, r1, r4, lsl #22
   15a3c:	andeq	r5, r1, r4, lsl #22
   15a40:	andeq	r5, r1, r4, lsl #22
   15a44:	andeq	r5, r1, r4, lsl #22
   15a48:	andeq	r5, r1, r4, lsl #22
   15a4c:	andeq	r5, r1, r4, lsl #22
   15a50:	andeq	r5, r1, r4, lsl #22
   15a54:	andeq	r5, r1, r4, lsl #22
   15a58:	andeq	r5, r1, r4, lsl #22
   15a5c:	andeq	r5, r1, r4, lsl #22
   15a60:	andeq	r5, r1, r4, lsl #22
   15a64:	andeq	r5, r1, r4, lsl #22
   15a68:	andeq	r5, r1, r4, lsl #22
   15a6c:	andeq	r5, r1, r4, lsl #22
   15a70:	andeq	r5, r1, r4, lsl #22
   15a74:	andeq	r5, r1, r4, lsl #22
   15a78:	andeq	r5, r1, r4, lsl #22
   15a7c:	andeq	r5, r1, r4, lsl #22
   15a80:	andeq	r5, r1, r4, lsl #22
   15a84:	andeq	r5, r1, r4, lsl #22
   15a88:	andeq	r5, r1, r4, lsl #22
   15a8c:	andeq	r5, r1, r4, lsl #22
   15a90:	andeq	r5, r1, r4, lsl #22
   15a94:	andeq	r5, r1, r4, lsl #22
   15a98:	andeq	r5, r1, r4, lsl #22
   15a9c:	andeq	r5, r1, r4, lsl #22
   15aa0:	andeq	r5, r1, r4, lsl #22
   15aa4:	andeq	r5, r1, r4, lsl #22
   15aa8:	andeq	r5, r1, r4, lsl #22
   15aac:	andeq	r5, r1, r4, lsl #22
   15ab0:	andeq	r5, r1, r4, lsl #22
   15ab4:	andeq	r5, r1, r4, lsl #22
   15ab8:	andeq	r5, r1, r4, lsl #22
   15abc:	andeq	r5, r1, r4, lsl #22
   15ac0:	andeq	r5, r1, r4, lsl #22
   15ac4:	andeq	r5, r1, r4, lsl #22
   15ac8:	andeq	r5, r1, r4, lsl #22
   15acc:	andeq	r5, r1, r4, lsl #22
   15ad0:	andeq	r5, r1, r4, lsl #22
   15ad4:	andeq	r5, r1, r4, lsl #22
   15ad8:	andeq	r5, r1, r4, lsl #22
   15adc:	andeq	r5, r1, r4, lsl #22
   15ae0:	andeq	r5, r1, r8, ror #21
   15ae4:	strdeq	r5, [r1], -r4
   15ae8:	mov	r3, #1
   15aec:	str	r3, [sp, #60]	; 0x3c
   15af0:	b	159dc <__assert_fail@plt+0x45f8>
   15af4:	str	r3, [sp, #44]	; 0x2c
   15af8:	b	159dc <__assert_fail@plt+0x45f8>
   15afc:	mov	sl, #1
   15b00:	b	159dc <__assert_fail@plt+0x45f8>
   15b04:	sub	r2, r3, #48	; 0x30
   15b08:	cmp	r2, #9
   15b0c:	bls	15fc8 <__assert_fail@plt+0x4be4>
   15b10:	cmp	r3, #69	; 0x45
   15b14:	beq	15d18 <__assert_fail@plt+0x4934>
   15b18:	cmp	r3, #79	; 0x4f
   15b1c:	beq	15d18 <__assert_fail@plt+0x4934>
   15b20:	cmp	r3, #122	; 0x7a
   15b24:	ldrls	pc, [pc, r3, lsl #2]
   15b28:	b	17110 <__assert_fail@plt+0x5d2c>
   15b2c:	andeq	r5, r1, r8, lsl pc
   15b30:	andeq	r7, r1, r0, lsl r1
   15b34:	andeq	r7, r1, r0, lsl r1
   15b38:	andeq	r7, r1, r0, lsl r1
   15b3c:	andeq	r7, r1, r0, lsl r1
   15b40:	andeq	r7, r1, r0, lsl r1
   15b44:	andeq	r7, r1, r0, lsl r1
   15b48:	andeq	r7, r1, r0, lsl r1
   15b4c:	andeq	r7, r1, r0, lsl r1
   15b50:	andeq	r7, r1, r0, lsl r1
   15b54:	andeq	r7, r1, r0, lsl r1
   15b58:	andeq	r7, r1, r0, lsl r1
   15b5c:	andeq	r7, r1, r0, lsl r1
   15b60:	andeq	r7, r1, r0, lsl r1
   15b64:	andeq	r7, r1, r0, lsl r1
   15b68:	andeq	r7, r1, r0, lsl r1
   15b6c:	andeq	r7, r1, r0, lsl r1
   15b70:	andeq	r7, r1, r0, lsl r1
   15b74:	andeq	r7, r1, r0, lsl r1
   15b78:	andeq	r7, r1, r0, lsl r1
   15b7c:	andeq	r7, r1, r0, lsl r1
   15b80:	andeq	r7, r1, r0, lsl r1
   15b84:	andeq	r7, r1, r0, lsl r1
   15b88:	andeq	r7, r1, r0, lsl r1
   15b8c:	andeq	r7, r1, r0, lsl r1
   15b90:	andeq	r7, r1, r0, lsl r1
   15b94:	andeq	r7, r1, r0, lsl r1
   15b98:	andeq	r7, r1, r0, lsl r1
   15b9c:	andeq	r7, r1, r0, lsl r1
   15ba0:	andeq	r7, r1, r0, lsl r1
   15ba4:	andeq	r7, r1, r0, lsl r1
   15ba8:	andeq	r7, r1, r0, lsl r1
   15bac:	andeq	r7, r1, r0, lsl r1
   15bb0:	andeq	r7, r1, r0, lsl r1
   15bb4:	andeq	r7, r1, r0, lsl r1
   15bb8:	andeq	r7, r1, r0, lsl r1
   15bbc:	andeq	r7, r1, r0, lsl r1
   15bc0:	strdeq	r6, [r1], -r4
   15bc4:	andeq	r7, r1, r0, lsl r1
   15bc8:	andeq	r7, r1, r0, lsl r1
   15bcc:	andeq	r7, r1, r0, lsl r1
   15bd0:	andeq	r7, r1, r0, lsl r1
   15bd4:	andeq	r7, r1, r0, lsl r1
   15bd8:	andeq	r7, r1, r0, lsl r1
   15bdc:	andeq	r7, r1, r0, lsl r1
   15be0:	andeq	r7, r1, r0, lsl r1
   15be4:	andeq	r7, r1, r0, lsl r1
   15be8:	andeq	r7, r1, r0, lsl r1
   15bec:	andeq	r7, r1, r0, lsl r1
   15bf0:	andeq	r7, r1, r0, lsl r1
   15bf4:	andeq	r7, r1, r0, lsl r1
   15bf8:	andeq	r7, r1, r0, lsl r1
   15bfc:	andeq	r7, r1, r0, lsl r1
   15c00:	andeq	r7, r1, r0, lsl r1
   15c04:	andeq	r7, r1, r0, lsl r1
   15c08:	andeq	r7, r1, r0, lsl r1
   15c0c:	andeq	r7, r1, r0, lsl r1
   15c10:	andeq	r7, r1, r0, lsl r1
   15c14:			; <UNDEFINED> instruction: 0x00016fb8
   15c18:	andeq	r7, r1, r0, lsl r1
   15c1c:	andeq	r7, r1, r0, lsl r1
   15c20:	andeq	r7, r1, r0, lsl r1
   15c24:	andeq	r7, r1, r0, lsl r1
   15c28:	andeq	r7, r1, r0, lsl r1
   15c2c:	andeq	r7, r1, r0, lsl r1
   15c30:	strdeq	r6, [r1], -r0
   15c34:	andeq	r7, r1, ip
   15c38:	andeq	r7, r1, ip, rrx
   15c3c:	andeq	r6, r1, r0, asr #28
   15c40:	andeq	r7, r1, r0, lsl r1
   15c44:	andeq	r6, r1, r8, ror #26
   15c48:	andeq	r7, r1, r8, ror r0
   15c4c:	andeq	r7, r1, r4, lsl #1
   15c50:	muleq	r1, r0, r0
   15c54:	andeq	r7, r1, r0, lsl r1
   15c58:	andeq	r7, r1, r0, lsl r1
   15c5c:	andeq	r7, r1, r0, lsl r1
   15c60:	muleq	r1, ip, r0
   15c64:	andeq	r6, r1, ip, lsr sl
   15c68:	andeq	r7, r1, r0, lsl r1
   15c6c:	andeq	r6, r1, ip, asr #29
   15c70:	andeq	r7, r1, r0, lsl r1
   15c74:	ldrdeq	r6, [r1], -ip
   15c78:	andeq	r7, r1, r4, lsl #2
   15c7c:	andeq	r6, r1, r0, lsr #18
   15c80:	andeq	r7, r1, ip, asr #1
   15c84:	andeq	r7, r1, r8, ror r0
   15c88:	ldrdeq	r7, [r1], -r8
   15c8c:	andeq	r7, r1, r4, ror #1
   15c90:	strdeq	r7, [r1], -r0
   15c94:	andeq	r6, r1, ip, lsr #13
   15c98:	andeq	r7, r1, r0, lsl r1
   15c9c:	andeq	r7, r1, r0, lsl r1
   15ca0:	andeq	r7, r1, r0, lsl r1
   15ca4:	andeq	r7, r1, r0, lsl r1
   15ca8:	andeq	r7, r1, r0, lsl r1
   15cac:	andeq	r7, r1, r0, lsl r1
   15cb0:	strdeq	r7, [r1], -ip
   15cb4:	andeq	r6, r1, r0, asr r6
   15cb8:	andeq	r7, r1, r0, lsr r0
   15cbc:	andeq	r7, r1, ip, lsr r0
   15cc0:	andeq	r7, r1, r8, asr #32
   15cc4:	andeq	r7, r1, r0, lsl r1
   15cc8:	andeq	r7, r1, r8, ror r0
   15ccc:	andeq	r6, r1, r0, asr r6
   15cd0:	andeq	r7, r1, r0, lsl r1
   15cd4:	andeq	r7, r1, r4, asr r0
   15cd8:	andeq	r7, r1, r0, rrx
   15cdc:	andeq	r7, r1, r8, lsl r0
   15ce0:	andeq	r7, r1, r4, lsr #32
   15ce4:	strdeq	r6, [r1], -ip
   15ce8:	andeq	r7, r1, r0, lsl r1
   15cec:	andeq	r6, r1, r4, lsr #29
   15cf0:	andeq	r6, r1, ip, asr #8
   15cf4:	muleq	r1, r0, lr
   15cf8:			; <UNDEFINED> instruction: 0x000162b0
   15cfc:	andeq	r6, r1, r4, lsr r2
   15d00:	strdeq	r6, [r1], -r4
   15d04:	andeq	r7, r1, r0, lsl r1
   15d08:	strheq	r7, [r1], -r4
   15d0c:	andeq	r7, r1, r0, asr #1
   15d10:	andeq	r7, r1, r8, lsr #1
   15d14:	strdeq	r6, [r1], -ip
   15d18:	ldrb	r3, [r8, #1]
   15d1c:	add	r4, r8, #1
   15d20:	cmp	r3, #122	; 0x7a
   15d24:	ldrls	pc, [pc, r3, lsl #2]
   15d28:	b	15f20 <__assert_fail@plt+0x4b3c>
   15d2c:	andeq	r5, r1, ip, lsl pc
   15d30:	andeq	r5, r1, r0, lsr #30
   15d34:	andeq	r5, r1, r0, lsr #30
   15d38:	andeq	r5, r1, r0, lsr #30
   15d3c:	andeq	r5, r1, r0, lsr #30
   15d40:	andeq	r5, r1, r0, lsr #30
   15d44:	andeq	r5, r1, r0, lsr #30
   15d48:	andeq	r5, r1, r0, lsr #30
   15d4c:	andeq	r5, r1, r0, lsr #30
   15d50:	andeq	r5, r1, r0, lsr #30
   15d54:	andeq	r5, r1, r0, lsr #30
   15d58:	andeq	r5, r1, r0, lsr #30
   15d5c:	andeq	r5, r1, r0, lsr #30
   15d60:	andeq	r5, r1, r0, lsr #30
   15d64:	andeq	r5, r1, r0, lsr #30
   15d68:	andeq	r5, r1, r0, lsr #30
   15d6c:	andeq	r5, r1, r0, lsr #30
   15d70:	andeq	r5, r1, r0, lsr #30
   15d74:	andeq	r5, r1, r0, lsr #30
   15d78:	andeq	r5, r1, r0, lsr #30
   15d7c:	andeq	r5, r1, r0, lsr #30
   15d80:	andeq	r5, r1, r0, lsr #30
   15d84:	andeq	r5, r1, r0, lsr #30
   15d88:	andeq	r5, r1, r0, lsr #30
   15d8c:	andeq	r5, r1, r0, lsr #30
   15d90:	andeq	r5, r1, r0, lsr #30
   15d94:	andeq	r5, r1, r0, lsr #30
   15d98:	andeq	r5, r1, r0, lsr #30
   15d9c:	andeq	r5, r1, r0, lsr #30
   15da0:	andeq	r5, r1, r0, lsr #30
   15da4:	andeq	r5, r1, r0, lsr #30
   15da8:	andeq	r5, r1, r0, lsr #30
   15dac:	andeq	r5, r1, r0, lsr #30
   15db0:	andeq	r5, r1, r0, lsr #30
   15db4:	andeq	r5, r1, r0, lsr #30
   15db8:	andeq	r5, r1, r0, lsr #30
   15dbc:	andeq	r5, r1, r0, lsr #30
   15dc0:	strdeq	r6, [r1], -r0
   15dc4:	andeq	r5, r1, r0, lsr #30
   15dc8:	andeq	r5, r1, r0, lsr #30
   15dcc:	andeq	r5, r1, r0, lsr #30
   15dd0:	andeq	r5, r1, r0, lsr #30
   15dd4:	andeq	r5, r1, r0, lsr #30
   15dd8:	andeq	r5, r1, r0, lsr #30
   15ddc:	andeq	r5, r1, r0, lsr #30
   15de0:	andeq	r5, r1, r0, lsr #30
   15de4:	andeq	r5, r1, r0, lsr #30
   15de8:	andeq	r5, r1, r0, lsr #30
   15dec:	andeq	r5, r1, r0, lsr #30
   15df0:	andeq	r5, r1, r0, lsr #30
   15df4:	andeq	r5, r1, r0, lsr #30
   15df8:	andeq	r5, r1, r0, lsr #30
   15dfc:	andeq	r5, r1, r0, lsr #30
   15e00:	andeq	r5, r1, r0, lsr #30
   15e04:	andeq	r5, r1, r0, lsr #30
   15e08:	andeq	r5, r1, r0, lsr #30
   15e0c:	andeq	r5, r1, r0, lsr #30
   15e10:	andeq	r5, r1, r0, lsr #30
   15e14:	andeq	r6, r1, r0, asr #31
   15e18:	andeq	r5, r1, r0, lsr #30
   15e1c:	andeq	r5, r1, r0, lsr #30
   15e20:	andeq	r5, r1, r0, lsr #30
   15e24:	andeq	r5, r1, r0, lsr #30
   15e28:	andeq	r5, r1, r0, lsr #30
   15e2c:	andeq	r5, r1, r0, lsr #30
   15e30:	andeq	r6, r1, r4, ror #31
   15e34:	andeq	r6, r1, ip, ror #28
   15e38:	andeq	r6, r1, ip, lsr #27
   15e3c:	andeq	r6, r1, r8, asr #28
   15e40:	andeq	r5, r1, r0, lsr #30
   15e44:	andeq	r6, r1, r0, ror sp
   15e48:	ldrdeq	r6, [r1], -ip
   15e4c:	andeq	r6, r1, r0, asr #23
   15e50:	andeq	r6, r1, r8, lsr #23
   15e54:	andeq	r5, r1, r0, lsr #30
   15e58:	andeq	r5, r1, r0, lsr #30
   15e5c:	andeq	r5, r1, r0, lsr #30
   15e60:	andeq	r6, r1, ip, lsl #23
   15e64:	andeq	r6, r1, r4, asr #20
   15e68:	andeq	r5, r1, r0, lsr #30
   15e6c:	ldrdeq	r6, [r1], -r4
   15e70:	andeq	r5, r1, r0, lsr #30
   15e74:	andeq	r6, r1, r0, ror #29
   15e78:	andeq	r6, r1, r0, lsr #20
   15e7c:	andeq	r6, r1, r4, lsr #18
   15e80:	andeq	r6, r1, r4, ror #17
   15e84:	ldrdeq	r6, [r1], -ip
   15e88:	andeq	r6, r1, ip, lsl #17
   15e8c:	andeq	r6, r1, ip, ror r8
   15e90:	andeq	r6, r1, r4, ror r7
   15e94:			; <UNDEFINED> instruction: 0x000166b0
   15e98:	andeq	r5, r1, r0, lsr #30
   15e9c:	andeq	r5, r1, r0, lsr #30
   15ea0:	andeq	r5, r1, r0, lsr #30
   15ea4:	andeq	r5, r1, r0, lsr #30
   15ea8:	andeq	r5, r1, r0, lsr #30
   15eac:	andeq	r5, r1, r0, lsr #30
   15eb0:	andeq	r6, r1, r8, ror r6
   15eb4:	andeq	r6, r1, r8, asr r6
   15eb8:	andeq	r6, r1, ip, lsr r6
   15ebc:	andeq	r6, r1, r0, lsr #12
   15ec0:	andeq	r6, r1, ip, lsl #12
   15ec4:	andeq	r5, r1, r0, lsr #30
   15ec8:	ldrdeq	r6, [r1], -ip
   15ecc:	andeq	r6, r1, r8, asr r6
   15ed0:	andeq	r5, r1, r0, lsr #30
   15ed4:	strdeq	r6, [r1], -r0
   15ed8:	ldrdeq	r6, [r1], -ip
   15edc:			; <UNDEFINED> instruction: 0x000165b4
   15ee0:	andeq	r6, r1, r4, ror r5
   15ee4:	andeq	r6, r1, r0, lsl #10
   15ee8:	andeq	r5, r1, r0, lsr #30
   15eec:	andeq	r6, r1, ip, lsr #29
   15ef0:	andeq	r6, r1, r4, asr r4
   15ef4:	muleq	r1, r8, lr
   15ef8:			; <UNDEFINED> instruction: 0x000162b4
   15efc:	andeq	r6, r1, r8, lsr r2
   15f00:	strdeq	r6, [r1], -ip
   15f04:	andeq	r5, r1, r0, lsr #30
   15f08:			; <UNDEFINED> instruction: 0x000161b8
   15f0c:	andeq	r6, r1, ip, lsl #3
   15f10:	andeq	r6, r1, r0, lsl r0
   15f14:	andeq	r6, r1, r4, lsl #30
   15f18:	mov	r4, r8
   15f1c:	sub	r4, r4, #1
   15f20:	ldr	r3, [sp, #28]
   15f24:	sub	sl, r3, fp
   15f28:	ldr	r2, [sp, #44]	; 0x2c
   15f2c:	mvn	r3, r5
   15f30:	sub	r7, r4, r9
   15f34:	lsr	r3, r3, #31
   15f38:	add	r7, r7, #1
   15f3c:	cmp	r2, #45	; 0x2d
   15f40:	moveq	r3, #0
   15f44:	cmp	r3, #0
   15f48:	moveq	r5, r3
   15f4c:	moveq	r8, r7
   15f50:	beq	15f60 <__assert_fail@plt+0x4b7c>
   15f54:	cmp	r7, r5
   15f58:	movcs	r8, r7
   15f5c:	movcc	r8, r5
   15f60:	cmp	r8, sl
   15f64:	bcs	15984 <__assert_fail@plt+0x45a0>
   15f68:	cmp	r6, #0
   15f6c:	beq	15fc0 <__assert_fail@plt+0x4bdc>
   15f70:	cmp	r7, r5
   15f74:	bcs	15fa0 <__assert_fail@plt+0x4bbc>
   15f78:	ldr	r3, [sp, #44]	; 0x2c
   15f7c:	sub	r2, r5, r7
   15f80:	mov	r0, r6
   15f84:	cmp	r3, #43	; 0x2b
   15f88:	cmpne	r3, #48	; 0x30
   15f8c:	add	r3, r6, r2
   15f90:	moveq	r1, #48	; 0x30
   15f94:	movne	r1, #32
   15f98:	mov	r6, r3
   15f9c:	bl	112e8 <memset@plt>
   15fa0:	ldr	r3, [sp, #60]	; 0x3c
   15fa4:	mov	r1, r9
   15fa8:	mov	r2, r7
   15fac:	mov	r0, r6
   15fb0:	cmp	r3, #0
   15fb4:	bne	16008 <__assert_fail@plt+0x4c24>
   15fb8:	bl	1112c <memcpy@plt>
   15fbc:	add	r6, r6, r7
   15fc0:	add	fp, fp, r8
   15fc4:	b	15944 <__assert_fail@plt+0x4560>
   15fc8:	mov	r5, #0
   15fcc:	mov	r1, #10
   15fd0:	smull	r2, r3, r5, r1
   15fd4:	mvn	r5, #-2147483648	; 0x80000000
   15fd8:	cmp	r3, r2, asr #31
   15fdc:	bne	15ff0 <__assert_fail@plt+0x4c0c>
   15fe0:	ldrb	r3, [r8]
   15fe4:	sub	r5, r3, #48	; 0x30
   15fe8:	adds	r5, r2, r5
   15fec:	mvnvs	r5, #-2147483648	; 0x80000000
   15ff0:	ldrb	r3, [r8, #1]!
   15ff4:	sub	r2, r3, #48	; 0x30
   15ff8:	cmp	r2, #9
   15ffc:	bls	15fd0 <__assert_fail@plt+0x4bec>
   16000:	mov	r7, r3
   16004:	b	15b10 <__assert_fail@plt+0x472c>
   16008:	bl	157b0 <__assert_fail@plt+0x43cc>
   1600c:	b	15fbc <__assert_fail@plt+0x4bd8>
   16010:	cmp	r7, #69	; 0x45
   16014:	beq	17370 <__assert_fail@plt+0x5f8c>
   16018:	ldr	r2, [sp, #48]	; 0x30
   1601c:	mov	r1, #100	; 0x64
   16020:	ldr	r0, [sp, #68]	; 0x44
   16024:	ldr	r2, [r2, #20]
   16028:	smull	ip, r0, r0, r2
   1602c:	asr	ip, r2, #31
   16030:	rsb	ip, ip, r0, asr #5
   16034:	mls	ip, r1, ip, r2
   16038:	cmp	ip, #0
   1603c:	bge	16054 <__assert_fail@plt+0x4c70>
   16040:	movw	r1, #63636	; 0xf894
   16044:	movt	r1, #65535	; 0xffff
   16048:	cmp	r2, r1
   1604c:	rsblt	ip, ip, #0
   16050:	addge	ip, ip, #100	; 0x64
   16054:	ldr	r2, [sp, #44]	; 0x2c
   16058:	cmp	r2, #0
   1605c:	bne	16d3c <__assert_fail@plt+0x5958>
   16060:	ldr	r2, [sp, #1180]	; 0x49c
   16064:	cmp	r2, #43	; 0x2b
   16068:	beq	1754c <__assert_fail@plt+0x6168>
   1606c:	ldr	r1, [sp, #1180]	; 0x49c
   16070:	mov	r2, #0
   16074:	str	r1, [sp, #44]	; 0x2c
   16078:	mov	r1, #2
   1607c:	str	r2, [sp, #84]	; 0x54
   16080:	str	r2, [sp, #92]	; 0x5c
   16084:	mov	r2, #1
   16088:	str	r1, [sp, #88]	; 0x58
   1608c:	mov	lr, #0
   16090:	cmp	r7, #79	; 0x4f
   16094:	movne	r2, #0
   16098:	andeq	r2, r2, #1
   1609c:	cmp	r2, #0
   160a0:	beq	167e0 <__assert_fail@plt+0x53fc>
   160a4:	add	r2, sp, #96	; 0x60
   160a8:	movw	r1, #9504	; 0x2520
   160ac:	mov	r8, #0
   160b0:	strh	r1, [r2]
   160b4:	add	r1, r2, #3
   160b8:	strb	r7, [sp, #98]	; 0x62
   160bc:	mov	ip, #0
   160c0:	add	r0, sp, #112	; 0x70
   160c4:	strb	r3, [r1]
   160c8:	ldr	r3, [sp, #48]	; 0x30
   160cc:	strb	ip, [r1, #1]
   160d0:	mov	r1, #1024	; 0x400
   160d4:	bl	11234 <strftime@plt>
   160d8:	cmp	r0, #0
   160dc:	beq	15944 <__assert_fail@plt+0x4560>
   160e0:	ldr	r2, [sp, #44]	; 0x2c
   160e4:	mvn	r3, r5
   160e8:	sub	r7, r0, #1
   160ec:	lsr	r3, r3, #31
   160f0:	cmp	r2, #45	; 0x2d
   160f4:	moveq	r3, #0
   160f8:	cmp	r3, #0
   160fc:	moveq	r5, r3
   16100:	moveq	r9, r7
   16104:	beq	16114 <__assert_fail@plt+0x4d30>
   16108:	cmp	r7, r5
   1610c:	movcs	r9, r7
   16110:	movcc	r9, r5
   16114:	ldr	r3, [sp, #28]
   16118:	sub	r3, r3, fp
   1611c:	cmp	r3, r9
   16120:	bls	15984 <__assert_fail@plt+0x45a0>
   16124:	cmp	r6, #0
   16128:	beq	16184 <__assert_fail@plt+0x4da0>
   1612c:	cmp	r7, r5
   16130:	bcs	1615c <__assert_fail@plt+0x4d78>
   16134:	ldr	r3, [sp, #44]	; 0x2c
   16138:	sub	r2, r5, r7
   1613c:	mov	r0, r6
   16140:	cmp	r3, #43	; 0x2b
   16144:	cmpne	r3, #48	; 0x30
   16148:	add	r3, r6, r2
   1614c:	moveq	r1, #48	; 0x30
   16150:	movne	r1, #32
   16154:	mov	r6, r3
   16158:	bl	112e8 <memset@plt>
   1615c:	cmp	r8, #0
   16160:	bne	1725c <__assert_fail@plt+0x5e78>
   16164:	ldr	r3, [sp, #60]	; 0x3c
   16168:	add	r1, sp, #113	; 0x71
   1616c:	mov	r2, r7
   16170:	mov	r0, r6
   16174:	cmp	r3, #0
   16178:	beq	17254 <__assert_fail@plt+0x5e70>
   1617c:	bl	157b0 <__assert_fail@plt+0x43cc>
   16180:	add	r6, r6, r7
   16184:	add	fp, fp, r9
   16188:	b	15944 <__assert_fail@plt+0x4560>
   1618c:	cmp	r7, #79	; 0x4f
   16190:	beq	15f20 <__assert_fail@plt+0x4b3c>
   16194:	mov	r3, #120	; 0x78
   16198:	mov	r8, #0
   1619c:	add	r2, sp, #96	; 0x60
   161a0:	movw	r1, #9504	; 0x2520
   161a4:	cmp	r7, #0
   161a8:	strh	r1, [r2]
   161ac:	addeq	r1, r2, #2
   161b0:	beq	160bc <__assert_fail@plt+0x4cd8>
   161b4:	b	160b4 <__assert_fail@plt+0x4cd0>
   161b8:	cmp	r7, #69	; 0x45
   161bc:	beq	15f20 <__assert_fail@plt+0x4b3c>
   161c0:	mov	r2, #1
   161c4:	str	r2, [sp, #88]	; 0x58
   161c8:	ldr	r2, [sp, #48]	; 0x30
   161cc:	ldr	r2, [r2, #24]
   161d0:	mov	ip, r2
   161d4:	lsr	r2, r2, #31
   161d8:	mov	lr, #0
   161dc:	cmp	ip, lr
   161e0:	str	r2, [sp, #84]	; 0x54
   161e4:	movlt	r2, #0
   161e8:	movge	r2, #1
   161ec:	str	lr, [sp, #92]	; 0x5c
   161f0:	b	16090 <__assert_fail@plt+0x4cac>
   161f4:	mov	r4, r8
   161f8:	mov	r7, #0
   161fc:	ldr	r2, [sp, #48]	; 0x30
   16200:	mov	r1, #1
   16204:	ldr	r0, [sp, #64]	; 0x40
   16208:	str	r1, [sp, #88]	; 0x58
   1620c:	ldr	r2, [r2, #24]
   16210:	add	r2, r2, #6
   16214:	asr	r1, r2, #31
   16218:	smull	ip, r0, r0, r2
   1621c:	add	r0, r0, r2
   16220:	rsb	r1, r1, r0, asr #2
   16224:	rsb	r1, r1, r1, lsl #3
   16228:	sub	r2, r2, r1
   1622c:	add	r2, r2, #1
   16230:	b	161d0 <__assert_fail@plt+0x4dec>
   16234:	mov	r4, r8
   16238:	ldr	r3, [sp, #44]	; 0x2c
   1623c:	cmp	r3, #45	; 0x2d
   16240:	ldr	r3, [sp, #28]
   16244:	sub	r3, r3, fp
   16248:	beq	172c8 <__assert_fail@plt+0x5ee4>
   1624c:	cmp	r5, #0
   16250:	blt	172c8 <__assert_fail@plt+0x5ee4>
   16254:	cmp	r5, #1
   16258:	movcs	r7, r5
   1625c:	movcc	r7, #1
   16260:	cmp	r7, r3
   16264:	bcs	15984 <__assert_fail@plt+0x45a0>
   16268:	cmp	r6, #0
   1626c:	beq	162a8 <__assert_fail@plt+0x4ec4>
   16270:	cmp	r5, #1
   16274:	ble	162a0 <__assert_fail@plt+0x4ebc>
   16278:	ldr	r3, [sp, #44]	; 0x2c
   1627c:	sub	r2, r5, #1
   16280:	mov	r0, r6
   16284:	cmp	r3, #43	; 0x2b
   16288:	cmpne	r3, #48	; 0x30
   1628c:	add	r3, r6, r2
   16290:	moveq	r1, #48	; 0x30
   16294:	movne	r1, #32
   16298:	mov	r6, r3
   1629c:	bl	112e8 <memset@plt>
   162a0:	mov	r3, #9
   162a4:	strb	r3, [r6], #1
   162a8:	add	fp, fp, r7
   162ac:	b	15944 <__assert_fail@plt+0x4560>
   162b0:	mov	r4, r8
   162b4:	ldr	lr, [sp, #48]	; 0x30
   162b8:	mvn	ip, #0
   162bc:	add	r1, sp, #112	; 0x70
   162c0:	ldr	r0, [sp, #1192]	; 0x4a8
   162c4:	ldrd	r8, [lr]
   162c8:	ldrd	r2, [lr, #24]
   162cc:	strd	r8, [sp, #112]	; 0x70
   162d0:	ldrd	r8, [lr, #8]
   162d4:	strd	r2, [sp, #136]	; 0x88
   162d8:	ldr	r3, [lr, #40]	; 0x28
   162dc:	strd	r8, [sp, #120]	; 0x78
   162e0:	ldrd	r8, [lr, #32]
   162e4:	str	ip, [sp, #140]	; 0x8c
   162e8:	str	r3, [sp, #152]	; 0x98
   162ec:	ldrd	r2, [lr, #16]
   162f0:	strd	r2, [sp, #128]	; 0x80
   162f4:	strd	r8, [sp, #144]	; 0x90
   162f8:	bl	19e44 <__assert_fail@plt+0x8a60>
   162fc:	ldr	r3, [sp, #140]	; 0x8c
   16300:	cmp	r3, #0
   16304:	blt	175f8 <__assert_fail@plt+0x6214>
   16308:	ldr	ip, [sp, #72]	; 0x48
   1630c:	add	r2, sp, #96	; 0x60
   16310:	lsr	r3, r0, #31
   16314:	mov	r1, r0
   16318:	add	r7, r2, #14
   1631c:	str	r3, [sp, #84]	; 0x54
   16320:	smull	r3, lr, ip, r1
   16324:	cmp	r0, #0
   16328:	asr	r8, r1, #31
   1632c:	asr	lr, lr, #2
   16330:	sub	r3, lr, r8
   16334:	add	r3, r3, r3, lsl #2
   16338:	sub	r3, r1, r3, lsl #1
   1633c:	sub	r1, lr, r8
   16340:	uxtb	r3, r3
   16344:	rsblt	r3, r3, #48	; 0x30
   16348:	addge	r3, r3, #48	; 0x30
   1634c:	uxtb	r3, r3
   16350:	cmp	r1, #0
   16354:	strb	r3, [r7, #-1]!
   16358:	bne	16320 <__assert_fail@plt+0x4f3c>
   1635c:	mov	r3, #1
   16360:	str	r3, [sp, #88]	; 0x58
   16364:	str	r1, [sp, #92]	; 0x5c
   16368:	ldr	r3, [sp, #44]	; 0x2c
   1636c:	cmp	r3, #0
   16370:	beq	17234 <__assert_fail@plt+0x5e50>
   16374:	subs	r3, r3, #45	; 0x2d
   16378:	movne	r3, #1
   1637c:	ldr	r1, [sp, #88]	; 0x58
   16380:	cmp	r5, #0
   16384:	add	r2, r2, #14
   16388:	sub	r8, r2, r7
   1638c:	movlt	r5, r1
   16390:	ldr	r1, [sp, #84]	; 0x54
   16394:	cmp	r1, #0
   16398:	bne	171c8 <__assert_fail@plt+0x5de4>
   1639c:	ldr	r1, [sp, #92]	; 0x5c
   163a0:	cmp	r1, #0
   163a4:	bne	1727c <__assert_fail@plt+0x5e98>
   163a8:	sub	r2, r5, r8
   163ac:	cmp	r2, #0
   163b0:	movle	r3, #0
   163b4:	andgt	r3, r3, #1
   163b8:	cmp	r3, #0
   163bc:	bne	163d4 <__assert_fail@plt+0x4ff0>
   163c0:	ldr	r3, [sp, #44]	; 0x2c
   163c4:	cmp	r3, #45	; 0x2d
   163c8:	moveq	r5, r1
   163cc:	moveq	r9, r8
   163d0:	beq	163e0 <__assert_fail@plt+0x4ffc>
   163d4:	cmp	r5, r8
   163d8:	movcs	r9, r5
   163dc:	movcc	r9, r8
   163e0:	ldr	r3, [sp, #28]
   163e4:	sub	r3, r3, fp
   163e8:	cmp	r3, r9
   163ec:	bls	15984 <__assert_fail@plt+0x45a0>
   163f0:	cmp	r6, #0
   163f4:	beq	16184 <__assert_fail@plt+0x4da0>
   163f8:	cmp	r5, r8
   163fc:	bls	16428 <__assert_fail@plt+0x5044>
   16400:	ldr	r3, [sp, #44]	; 0x2c
   16404:	sub	r2, r5, r8
   16408:	mov	r0, r6
   1640c:	cmp	r3, #43	; 0x2b
   16410:	cmpne	r3, #48	; 0x30
   16414:	add	r3, r6, r2
   16418:	moveq	r1, #48	; 0x30
   1641c:	movne	r1, #32
   16420:	mov	r6, r3
   16424:	bl	112e8 <memset@plt>
   16428:	ldr	r3, [sp, #60]	; 0x3c
   1642c:	mov	r1, r7
   16430:	mov	r2, r8
   16434:	mov	r0, r6
   16438:	cmp	r3, #0
   1643c:	beq	1724c <__assert_fail@plt+0x5e68>
   16440:	bl	157b0 <__assert_fail@plt+0x43cc>
   16444:	add	r6, r6, r8
   16448:	b	16184 <__assert_fail@plt+0x4da0>
   1644c:	mov	r4, r8
   16450:	mov	r7, #0
   16454:	ldr	r3, [sp, #48]	; 0x30
   16458:	cmp	r7, #79	; 0x4f
   1645c:	ldr	r3, [r3, #16]
   16460:	moveq	r3, #113	; 0x71
   16464:	beq	160a4 <__assert_fail@plt+0x4cc0>
   16468:	mov	ip, #11
   1646c:	mov	lr, #0
   16470:	mul	ip, ip, r3
   16474:	mov	r3, #1
   16478:	str	lr, [sp, #84]	; 0x54
   1647c:	str	r3, [sp, #88]	; 0x58
   16480:	asr	ip, ip, #5
   16484:	str	lr, [sp, #92]	; 0x5c
   16488:	add	ip, ip, r3
   1648c:	add	r2, sp, #96	; 0x60
   16490:	movw	r9, #52429	; 0xcccd
   16494:	movt	r9, #52428	; 0xcccc
   16498:	add	r0, r2, #14
   1649c:	mov	sl, #58	; 0x3a
   164a0:	tst	lr, #1
   164a4:	umull	r3, r1, r9, ip
   164a8:	sub	r7, r0, #1
   164ac:	sub	r3, r0, #2
   164b0:	beq	164c0 <__assert_fail@plt+0x50dc>
   164b4:	strb	sl, [r0, #-1]
   164b8:	mov	r0, r7
   164bc:	mov	r7, r3
   164c0:	lsr	r1, r1, #3
   164c4:	asrs	lr, lr, #1
   164c8:	add	r3, r1, r1, lsl #2
   164cc:	movne	r8, #1
   164d0:	moveq	r8, #0
   164d4:	sub	r3, ip, r3, lsl #1
   164d8:	cmp	ip, #9
   164dc:	orrhi	r8, r8, #1
   164e0:	mov	ip, r1
   164e4:	cmp	r8, #0
   164e8:	add	r3, r3, #48	; 0x30
   164ec:	strb	r3, [r0, #-1]
   164f0:	mov	r0, r7
   164f4:	bne	164a0 <__assert_fail@plt+0x50bc>
   164f8:	b	16368 <__assert_fail@plt+0x4f84>
   164fc:	mov	r4, r8
   16500:	ldr	r3, [sp, #44]	; 0x2c
   16504:	cmp	r3, #45	; 0x2d
   16508:	ldr	r3, [sp, #28]
   1650c:	sub	r3, r3, fp
   16510:	beq	172b0 <__assert_fail@plt+0x5ecc>
   16514:	cmp	r5, #0
   16518:	blt	172b0 <__assert_fail@plt+0x5ecc>
   1651c:	cmp	r5, #1
   16520:	movcs	r7, r5
   16524:	movcc	r7, #1
   16528:	cmp	r7, r3
   1652c:	bcs	15984 <__assert_fail@plt+0x45a0>
   16530:	cmp	r6, #0
   16534:	beq	162a8 <__assert_fail@plt+0x4ec4>
   16538:	cmp	r5, #1
   1653c:	ble	16568 <__assert_fail@plt+0x5184>
   16540:	ldr	r3, [sp, #44]	; 0x2c
   16544:	sub	r2, r5, #1
   16548:	mov	r0, r6
   1654c:	cmp	r3, #43	; 0x2b
   16550:	cmpne	r3, #48	; 0x30
   16554:	add	r3, r6, r2
   16558:	moveq	r1, #48	; 0x30
   1655c:	movne	r1, #32
   16560:	mov	r6, r3
   16564:	bl	112e8 <memset@plt>
   16568:	mov	r3, #10
   1656c:	strb	r3, [r6], #1
   16570:	b	162a8 <__assert_fail@plt+0x4ec4>
   16574:	cmp	r7, #69	; 0x45
   16578:	beq	15f20 <__assert_fail@plt+0x4b3c>
   1657c:	ldr	r2, [sp, #48]	; 0x30
   16580:	mov	lr, #0
   16584:	ldr	ip, [r2, #16]
   16588:	mov	r2, #2
   1658c:	cmn	ip, #1
   16590:	str	r2, [sp, #88]	; 0x58
   16594:	add	ip, ip, #1
   16598:	movlt	r2, #1
   1659c:	movge	r2, lr
   165a0:	str	r2, [sp, #84]	; 0x54
   165a4:	movge	r2, #1
   165a8:	movlt	r2, lr
   165ac:	str	lr, [sp, #92]	; 0x5c
   165b0:	b	16090 <__assert_fail@plt+0x4cac>
   165b4:	cmp	r7, #69	; 0x45
   165b8:	beq	15f20 <__assert_fail@plt+0x4b3c>
   165bc:	ldr	r2, [sp, #32]
   165c0:	ldr	r1, [sp, #44]	; 0x2c
   165c4:	cmp	r1, #0
   165c8:	mov	r1, #2
   165cc:	str	r1, [sp, #88]	; 0x58
   165d0:	moveq	r1, #95	; 0x5f
   165d4:	streq	r1, [sp, #44]	; 0x2c
   165d8:	b	161d0 <__assert_fail@plt+0x4dec>
   165dc:	cmp	r7, #69	; 0x45
   165e0:	beq	15f20 <__assert_fail@plt+0x4b3c>
   165e4:	ldr	r2, [sp, #48]	; 0x30
   165e8:	ldr	r2, [r2, #8]
   165ec:	b	165c0 <__assert_fail@plt+0x51dc>
   165f0:	cmp	r7, #69	; 0x45
   165f4:	beq	15f20 <__assert_fail@plt+0x4b3c>
   165f8:	ldr	r2, [sp, #48]	; 0x30
   165fc:	mov	lr, #0
   16600:	ldr	ip, [r2, #28]
   16604:	mov	r2, #3
   16608:	b	1658c <__assert_fail@plt+0x51a8>
   1660c:	cmp	r7, #69	; 0x45
   16610:	beq	15f20 <__assert_fail@plt+0x4b3c>
   16614:	ldr	r2, [sp, #48]	; 0x30
   16618:	ldr	r2, [r2, #12]
   1661c:	b	165c0 <__assert_fail@plt+0x51dc>
   16620:	cmp	r7, #69	; 0x45
   16624:	beq	15f20 <__assert_fail@plt+0x4b3c>
   16628:	mov	r2, #2
   1662c:	str	r2, [sp, #88]	; 0x58
   16630:	ldr	r2, [sp, #48]	; 0x30
   16634:	ldr	r2, [r2, #12]
   16638:	b	161d0 <__assert_fail@plt+0x4dec>
   1663c:	cmp	r7, #79	; 0x4f
   16640:	beq	15f20 <__assert_fail@plt+0x4b3c>
   16644:	mov	r3, #99	; 0x63
   16648:	mov	r8, #0
   1664c:	b	1619c <__assert_fail@plt+0x4db8>
   16650:	mov	r4, r8
   16654:	mov	r7, #0
   16658:	ldr	r2, [sp, #60]	; 0x3c
   1665c:	cmp	sl, #0
   16660:	movne	r2, sl
   16664:	cmp	r7, #69	; 0x45
   16668:	str	r2, [sp, #60]	; 0x3c
   1666c:	beq	15f20 <__assert_fail@plt+0x4b3c>
   16670:	mov	r8, #0
   16674:	b	1619c <__assert_fail@plt+0x4db8>
   16678:	cmp	r7, #0
   1667c:	bne	15f20 <__assert_fail@plt+0x4b3c>
   16680:	ldr	r2, [sp, #60]	; 0x3c
   16684:	cmp	sl, #0
   16688:	mov	r3, #97	; 0x61
   1668c:	movne	r2, sl
   16690:	str	r2, [sp, #60]	; 0x3c
   16694:	add	r2, sp, #96	; 0x60
   16698:	movw	r0, #9504	; 0x2520
   1669c:	mov	r1, r2
   166a0:	mov	r8, #0
   166a4:	strh	r0, [r1], #2
   166a8:	b	160bc <__assert_fail@plt+0x4cd8>
   166ac:	mov	r4, r8
   166b0:	cmp	sl, #0
   166b4:	ldr	r0, [sp, #56]	; 0x38
   166b8:	ldr	r3, [sp, #60]	; 0x3c
   166bc:	movne	r3, #0
   166c0:	str	r3, [sp, #60]	; 0x3c
   166c4:	bl	11294 <strlen@plt>
   166c8:	ldr	r3, [sp, #44]	; 0x2c
   166cc:	mov	r7, r0
   166d0:	subs	r3, r3, #45	; 0x2d
   166d4:	movne	r3, #1
   166d8:	cmp	r5, #0
   166dc:	movlt	r3, #0
   166e0:	cmp	r3, #0
   166e4:	moveq	r5, r0
   166e8:	beq	166fc <__assert_fail@plt+0x5318>
   166ec:	mov	r3, r5
   166f0:	cmp	r0, r5
   166f4:	movcs	r5, r0
   166f8:	movcc	r5, r3
   166fc:	ldr	r2, [sp, #28]
   16700:	sub	r2, r2, fp
   16704:	cmp	r2, r5
   16708:	bls	15984 <__assert_fail@plt+0x45a0>
   1670c:	cmp	r6, #0
   16710:	beq	1676c <__assert_fail@plt+0x5388>
   16714:	cmp	r7, r3
   16718:	bcs	16744 <__assert_fail@plt+0x5360>
   1671c:	sub	r2, r3, r7
   16720:	ldr	r3, [sp, #44]	; 0x2c
   16724:	mov	r0, r6
   16728:	cmp	r3, #43	; 0x2b
   1672c:	cmpne	r3, #48	; 0x30
   16730:	add	r3, r6, r2
   16734:	moveq	r1, #48	; 0x30
   16738:	movne	r1, #32
   1673c:	mov	r6, r3
   16740:	bl	112e8 <memset@plt>
   16744:	cmp	sl, #0
   16748:	bne	17510 <__assert_fail@plt+0x612c>
   1674c:	mov	r2, r7
   16750:	mov	r0, r6
   16754:	ldr	r1, [sp, #56]	; 0x38
   16758:	ldr	r3, [sp, #60]	; 0x3c
   1675c:	cmp	r3, #0
   16760:	beq	17508 <__assert_fail@plt+0x6124>
   16764:	bl	157b0 <__assert_fail@plt+0x43cc>
   16768:	add	r6, r6, r7
   1676c:	add	fp, fp, r5
   16770:	b	15944 <__assert_fail@plt+0x4560>
   16774:	cmp	r7, #69	; 0x45
   16778:	beq	17500 <__assert_fail@plt+0x611c>
   1677c:	cmp	r7, #79	; 0x4f
   16780:	beq	15f20 <__assert_fail@plt+0x4b3c>
   16784:	ldr	r1, [sp, #44]	; 0x2c
   16788:	ldr	r2, [sp, #48]	; 0x30
   1678c:	ldr	ip, [r2, #20]
   16790:	movw	r2, #63636	; 0xf894
   16794:	movt	r2, #65535	; 0xffff
   16798:	cmp	ip, r2
   1679c:	add	ip, ip, #1888	; 0x760
   167a0:	movlt	r2, #1
   167a4:	movge	r2, #0
   167a8:	add	ip, ip, #12
   167ac:	str	r2, [sp, #84]	; 0x54
   167b0:	movge	r2, #1
   167b4:	movlt	r2, #0
   167b8:	cmp	r1, #0
   167bc:	bne	172f4 <__assert_fail@plt+0x5f10>
   167c0:	ldr	r1, [sp, #1180]	; 0x49c
   167c4:	cmp	r1, #43	; 0x2b
   167c8:	beq	1730c <__assert_fail@plt+0x5f28>
   167cc:	ldr	lr, [sp, #44]	; 0x2c
   167d0:	mov	r3, #4
   167d4:	str	r1, [sp, #44]	; 0x2c
   167d8:	str	r3, [sp, #88]	; 0x58
   167dc:	str	lr, [sp, #92]	; 0x5c
   167e0:	ldr	r3, [sp, #84]	; 0x54
   167e4:	cmp	r3, #0
   167e8:	rsbne	ip, ip, #0
   167ec:	b	1648c <__assert_fail@plt+0x50a8>
   167f0:	mov	r8, r4
   167f4:	ldr	r3, [sp, #28]
   167f8:	sub	r4, r8, #1
   167fc:	cmp	r4, r9
   16800:	sub	sl, r3, fp
   16804:	bne	15f28 <__assert_fail@plt+0x4b44>
   16808:	ldr	r3, [sp, #44]	; 0x2c
   1680c:	cmp	r3, #45	; 0x2d
   16810:	beq	17468 <__assert_fail@plt+0x6084>
   16814:	cmp	r5, #0
   16818:	blt	17468 <__assert_fail@plt+0x6084>
   1681c:	cmp	r5, #1
   16820:	movcs	r4, r5
   16824:	movcc	r4, #1
   16828:	cmp	r4, sl
   1682c:	bcs	15984 <__assert_fail@plt+0x45a0>
   16830:	cmp	r6, #0
   16834:	beq	16870 <__assert_fail@plt+0x548c>
   16838:	cmp	r5, #1
   1683c:	ble	16868 <__assert_fail@plt+0x5484>
   16840:	ldr	r3, [sp, #44]	; 0x2c
   16844:	sub	r2, r5, #1
   16848:	mov	r0, r6
   1684c:	cmp	r3, #43	; 0x2b
   16850:	cmpne	r3, #48	; 0x30
   16854:	add	r3, r6, r2
   16858:	moveq	r1, #48	; 0x30
   1685c:	movne	r1, #32
   16860:	mov	r6, r3
   16864:	bl	112e8 <memset@plt>
   16868:	ldrb	r3, [r8]
   1686c:	strb	r3, [r6], #1
   16870:	add	fp, fp, r4
   16874:	mov	r4, r8
   16878:	b	15944 <__assert_fail@plt+0x4560>
   1687c:	cmp	r7, #79	; 0x4f
   16880:	beq	15f20 <__assert_fail@plt+0x4b3c>
   16884:	mov	r3, #88	; 0x58
   16888:	b	16670 <__assert_fail@plt+0x528c>
   1688c:	cmp	r7, #69	; 0x45
   16890:	beq	15f20 <__assert_fail@plt+0x4b3c>
   16894:	ldr	r1, [sp, #48]	; 0x30
   16898:	mov	r0, #2
   1689c:	ldr	lr, [sp, #64]	; 0x40
   168a0:	str	r0, [sp, #88]	; 0x58
   168a4:	ldr	r2, [r1, #24]
   168a8:	ldr	r1, [r1, #28]
   168ac:	add	r2, r2, #6
   168b0:	asr	r0, r2, #31
   168b4:	smull	r8, ip, lr, r2
   168b8:	add	ip, ip, r2
   168bc:	rsb	r0, r0, ip, asr #2
   168c0:	rsb	r0, r0, r0, lsl #3
   168c4:	sub	r2, r2, r0
   168c8:	sub	r1, r1, r2
   168cc:	add	r1, r1, #7
   168d0:	asr	r2, r1, #31
   168d4:	smull	ip, r0, lr, r1
   168d8:	add	r1, r0, r1
   168dc:	rsb	r2, r2, r1, asr #2
   168e0:	b	161d0 <__assert_fail@plt+0x4dec>
   168e4:	cmp	r7, #69	; 0x45
   168e8:	beq	15f20 <__assert_fail@plt+0x4b3c>
   168ec:	ldr	r1, [sp, #48]	; 0x30
   168f0:	mov	r0, #2
   168f4:	str	r0, [sp, #88]	; 0x58
   168f8:	ldr	r2, [r1, #24]
   168fc:	ldr	r1, [r1, #28]
   16900:	sub	r1, r1, r2
   16904:	ldr	r2, [sp, #64]	; 0x40
   16908:	add	r1, r1, #7
   1690c:	smull	r2, r0, r2, r1
   16910:	asr	r2, r1, #31
   16914:	add	r1, r0, r1
   16918:	rsb	r2, r2, r1, asr #2
   1691c:	b	161d0 <__assert_fail@plt+0x4dec>
   16920:	mov	r4, r8
   16924:	ldr	r3, [sp, #28]
   16928:	movw	r9, #59468	; 0xe84c
   1692c:	movt	r9, #1
   16930:	sub	sl, r3, fp
   16934:	mvn	r3, #0
   16938:	str	r3, [sp, #84]	; 0x54
   1693c:	ldr	r7, [sp, #44]	; 0x2c
   16940:	mov	r2, r9
   16944:	mov	r0, #0
   16948:	ldr	r3, [sp, #48]	; 0x30
   1694c:	ldr	r1, [sp, #60]	; 0x3c
   16950:	ldr	ip, [sp, #84]	; 0x54
   16954:	stm	sp, {r1, r7, ip}
   16958:	mvn	r1, #0
   1695c:	ldr	ip, [sp, #1188]	; 0x4a4
   16960:	str	ip, [sp, #12]
   16964:	ldr	ip, [sp, #1192]	; 0x4a8
   16968:	str	ip, [sp, #16]
   1696c:	ldr	ip, [sp, #1196]	; 0x4ac
   16970:	str	ip, [sp, #20]
   16974:	bl	15804 <__assert_fail@plt+0x4420>
   16978:	cmp	r7, #45	; 0x2d
   1697c:	mov	r8, r0
   16980:	beq	17270 <__assert_fail@plt+0x5e8c>
   16984:	cmp	r5, #0
   16988:	blt	17270 <__assert_fail@plt+0x5e8c>
   1698c:	cmp	r0, r5
   16990:	movcs	r7, r0
   16994:	movcc	r7, r5
   16998:	cmp	r7, sl
   1699c:	bcs	15984 <__assert_fail@plt+0x45a0>
   169a0:	cmp	r6, #0
   169a4:	beq	162a8 <__assert_fail@plt+0x4ec4>
   169a8:	cmp	r5, r8
   169ac:	bls	169d8 <__assert_fail@plt+0x55f4>
   169b0:	ldr	r3, [sp, #44]	; 0x2c
   169b4:	sub	r2, r5, r8
   169b8:	mov	r0, r6
   169bc:	cmp	r3, #43	; 0x2b
   169c0:	cmpne	r3, #48	; 0x30
   169c4:	add	r3, r6, r2
   169c8:	moveq	r1, #48	; 0x30
   169cc:	movne	r1, #32
   169d0:	mov	r6, r3
   169d4:	bl	112e8 <memset@plt>
   169d8:	ldr	r0, [sp, #44]	; 0x2c
   169dc:	mov	r2, r9
   169e0:	mov	r1, sl
   169e4:	ldr	r3, [sp, #60]	; 0x3c
   169e8:	ldr	ip, [sp, #84]	; 0x54
   169ec:	str	r3, [sp]
   169f0:	ldr	r3, [sp, #48]	; 0x30
   169f4:	stmib	sp, {r0, ip}
   169f8:	mov	r0, r6
   169fc:	add	r6, r6, r8
   16a00:	ldr	ip, [sp, #1188]	; 0x4a4
   16a04:	str	ip, [sp, #12]
   16a08:	ldr	ip, [sp, #1192]	; 0x4a8
   16a0c:	str	ip, [sp, #16]
   16a10:	ldr	ip, [sp, #1196]	; 0x4ac
   16a14:	str	ip, [sp, #20]
   16a18:	bl	15804 <__assert_fail@plt+0x4420>
   16a1c:	b	162a8 <__assert_fail@plt+0x4ec4>
   16a20:	cmp	r7, #69	; 0x45
   16a24:	beq	15f20 <__assert_fail@plt+0x4b3c>
   16a28:	mov	r2, #2
   16a2c:	str	r2, [sp, #88]	; 0x58
   16a30:	ldr	r2, [sp, #48]	; 0x30
   16a34:	ldr	r2, [r2]
   16a38:	b	161d0 <__assert_fail@plt+0x4dec>
   16a3c:	mov	r4, r8
   16a40:	mov	r7, #0
   16a44:	ldr	r3, [sp, #28]
   16a48:	cmp	r7, #69	; 0x45
   16a4c:	sub	sl, r3, fp
   16a50:	beq	15f28 <__assert_fail@plt+0x4b44>
   16a54:	cmp	r5, #0
   16a58:	mov	r7, #9
   16a5c:	ldr	r0, [sp, #72]	; 0x48
   16a60:	movle	r5, #9
   16a64:	ldr	r3, [sp, #1196]	; 0x4ac
   16a68:	b	16a78 <__assert_fail@plt+0x5694>
   16a6c:	smull	r2, r3, r0, r3
   16a70:	sub	r7, r7, #1
   16a74:	rsb	r3, r1, r3, asr #2
   16a78:	cmp	r7, r5
   16a7c:	asr	r1, r3, #31
   16a80:	bgt	16a6c <__assert_fail@plt+0x5688>
   16a84:	cmp	r7, #1
   16a88:	smull	r1, r2, r0, r3
   16a8c:	asr	r1, r3, #31
   16a90:	ble	17334 <__assert_fail@plt+0x5f50>
   16a94:	rsb	r2, r1, r2, asr #2
   16a98:	add	r2, r2, r2, lsl #2
   16a9c:	cmp	r3, r2, lsl #1
   16aa0:	beq	16a6c <__assert_fail@plt+0x5688>
   16aa4:	ldr	lr, [sp, #72]	; 0x48
   16aa8:	add	r2, sp, #96	; 0x60
   16aac:	sub	ip, r7, #1
   16ab0:	add	ip, r2, ip
   16ab4:	rsb	r2, r2, #1
   16ab8:	smull	r8, r0, lr, r3
   16abc:	rsb	r1, r1, r0, asr #2
   16ac0:	add	r0, r1, r1, lsl #2
   16ac4:	sub	r0, r3, r0, lsl #1
   16ac8:	mov	r3, r1
   16acc:	asr	r1, r1, #31
   16ad0:	add	r0, r0, #48	; 0x30
   16ad4:	strb	r0, [ip], #-1
   16ad8:	add	r0, r2, ip
   16adc:	cmp	r0, #0
   16ae0:	bgt	16ab8 <__assert_fail@plt+0x56d4>
   16ae4:	ldr	r3, [sp, #44]	; 0x2c
   16ae8:	cmp	r3, #0
   16aec:	bne	17430 <__assert_fail@plt+0x604c>
   16af0:	cmp	sl, r7
   16af4:	bls	15984 <__assert_fail@plt+0x45a0>
   16af8:	ldr	r3, [sp, #28]
   16afc:	cmp	r6, #0
   16b00:	add	fp, fp, r7
   16b04:	sub	r8, r3, fp
   16b08:	movne	r3, #48	; 0x30
   16b0c:	strne	r3, [sp, #44]	; 0x2c
   16b10:	beq	17574 <__assert_fail@plt+0x6190>
   16b14:	ldr	r3, [sp, #60]	; 0x3c
   16b18:	mov	r2, r7
   16b1c:	add	r1, sp, #96	; 0x60
   16b20:	mov	r0, r6
   16b24:	cmp	r3, #0
   16b28:	beq	17524 <__assert_fail@plt+0x6140>
   16b2c:	bl	157b0 <__assert_fail@plt+0x43cc>
   16b30:	ldr	r3, [sp, #44]	; 0x2c
   16b34:	add	r6, r6, r7
   16b38:	cmp	r3, #45	; 0x2d
   16b3c:	beq	17458 <__assert_fail@plt+0x6074>
   16b40:	sub	r2, r5, r7
   16b44:	cmp	r2, r8
   16b48:	bcs	15984 <__assert_fail@plt+0x45a0>
   16b4c:	cmp	r6, #0
   16b50:	addeq	fp, fp, r2
   16b54:	beq	15944 <__assert_fail@plt+0x4560>
   16b58:	cmp	r2, #0
   16b5c:	beq	15944 <__assert_fail@plt+0x4560>
   16b60:	ldr	r3, [sp, #44]	; 0x2c
   16b64:	mov	r0, r6
   16b68:	add	fp, fp, r2
   16b6c:	cmp	r3, #43	; 0x2b
   16b70:	cmpne	r3, #48	; 0x30
   16b74:	add	r3, r6, r2
   16b78:	moveq	r1, #48	; 0x30
   16b7c:	movne	r1, #32
   16b80:	mov	r6, r3
   16b84:	bl	112e8 <memset@plt>
   16b88:	b	15944 <__assert_fail@plt+0x4560>
   16b8c:	cmp	r7, #69	; 0x45
   16b90:	beq	15f20 <__assert_fail@plt+0x4b3c>
   16b94:	mov	r2, #2
   16b98:	str	r2, [sp, #88]	; 0x58
   16b9c:	ldr	r2, [sp, #48]	; 0x30
   16ba0:	ldr	r2, [r2, #4]
   16ba4:	b	161d0 <__assert_fail@plt+0x4dec>
   16ba8:	cmp	r7, #69	; 0x45
   16bac:	beq	15f20 <__assert_fail@plt+0x4b3c>
   16bb0:	mov	r1, #2
   16bb4:	ldr	r2, [sp, #32]
   16bb8:	str	r1, [sp, #88]	; 0x58
   16bbc:	b	161d0 <__assert_fail@plt+0x4dec>
   16bc0:	cmp	r7, #69	; 0x45
   16bc4:	beq	15f20 <__assert_fail@plt+0x4b3c>
   16bc8:	mov	r2, #2
   16bcc:	str	r2, [sp, #88]	; 0x58
   16bd0:	ldr	r2, [sp, #48]	; 0x30
   16bd4:	ldr	r2, [r2, #8]
   16bd8:	b	161d0 <__assert_fail@plt+0x4dec>
   16bdc:	cmp	r7, #69	; 0x45
   16be0:	beq	15f20 <__assert_fail@plt+0x4b3c>
   16be4:	ldr	r2, [sp, #48]	; 0x30
   16be8:	ldr	r8, [r2, #20]
   16bec:	ldr	r1, [r2, #24]
   16bf0:	ldr	r9, [r2, #28]
   16bf4:	cmp	r8, #0
   16bf8:	ldr	r2, [sp, #64]	; 0x40
   16bfc:	str	r1, [sp, #84]	; 0x54
   16c00:	sub	r1, r9, r1
   16c04:	add	r1, r1, #380	; 0x17c
   16c08:	add	r1, r1, #2
   16c0c:	asr	r0, r1, #31
   16c10:	smull	r2, ip, r2, r1
   16c14:	movlt	r2, #300	; 0x12c
   16c18:	mvnge	r2, #99	; 0x63
   16c1c:	add	ip, ip, r1
   16c20:	add	r2, r8, r2
   16c24:	rsb	r0, r0, ip, asr #2
   16c28:	rsb	r0, r0, r0, lsl #3
   16c2c:	sub	r0, r1, r0
   16c30:	sub	sl, r9, r0
   16c34:	adds	sl, sl, #3
   16c38:	bmi	17378 <__assert_fail@plt+0x5f94>
   16c3c:	tst	r2, #3
   16c40:	movwne	r2, #365	; 0x16d
   16c44:	bne	16c8c <__assert_fail@plt+0x58a8>
   16c48:	ldr	r1, [sp, #68]	; 0x44
   16c4c:	mov	ip, #100	; 0x64
   16c50:	smull	r1, r0, r1, r2
   16c54:	asr	r1, r2, #31
   16c58:	rsb	r1, r1, r0, asr #5
   16c5c:	mls	r1, ip, r1, r2
   16c60:	cmp	r1, #0
   16c64:	movwne	r2, #366	; 0x16e
   16c68:	bne	16c8c <__assert_fail@plt+0x58a8>
   16c6c:	mov	ip, #400	; 0x190
   16c70:	movw	r1, #365	; 0x16d
   16c74:	movw	lr, #366	; 0x16e
   16c78:	sdiv	r0, r2, ip
   16c7c:	mls	r2, ip, r0, r2
   16c80:	cmp	r2, #0
   16c84:	movne	r2, r1
   16c88:	moveq	r2, lr
   16c8c:	sub	r9, r9, r2
   16c90:	ldr	r0, [sp, #64]	; 0x40
   16c94:	ldr	r2, [sp, #84]	; 0x54
   16c98:	sub	r2, r9, r2
   16c9c:	add	r2, r2, #380	; 0x17c
   16ca0:	add	r2, r2, #2
   16ca4:	asr	r1, r2, #31
   16ca8:	smull	ip, r0, r0, r2
   16cac:	add	r0, r0, r2
   16cb0:	rsb	r1, r1, r0, asr #2
   16cb4:	rsb	r1, r1, r1, lsl #3
   16cb8:	sub	r2, r2, r1
   16cbc:	sub	r2, r9, r2
   16cc0:	add	r2, r2, #3
   16cc4:	cmp	r2, #0
   16cc8:	movge	sl, r2
   16ccc:	movge	lr, #1
   16cd0:	movlt	lr, #0
   16cd4:	cmp	r3, #71	; 0x47
   16cd8:	beq	174a4 <__assert_fail@plt+0x60c0>
   16cdc:	cmp	r3, #103	; 0x67
   16ce0:	bne	17480 <__assert_fail@plt+0x609c>
   16ce4:	ldr	ip, [sp, #68]	; 0x44
   16ce8:	mov	r0, #100	; 0x64
   16cec:	smull	r2, r1, ip, r8
   16cf0:	asr	r2, r8, #31
   16cf4:	rsb	r2, r2, r1, asr #5
   16cf8:	mls	r2, r0, r2, r8
   16cfc:	add	r2, r2, lr
   16d00:	asr	r1, r2, #31
   16d04:	smull	r9, ip, ip, r2
   16d08:	rsb	ip, r1, ip, asr #5
   16d0c:	mls	ip, r0, ip, r2
   16d10:	cmp	ip, #0
   16d14:	bge	16054 <__assert_fail@plt+0x4c70>
   16d18:	movw	r2, #63636	; 0xf894
   16d1c:	movt	r2, #65535	; 0xffff
   16d20:	sub	r2, r2, lr
   16d24:	cmp	r2, r8
   16d28:	ldr	r2, [sp, #44]	; 0x2c
   16d2c:	ble	175e8 <__assert_fail@plt+0x6204>
   16d30:	cmp	r2, #0
   16d34:	rsb	ip, ip, #0
   16d38:	beq	16060 <__assert_fail@plt+0x4c7c>
   16d3c:	ldr	r2, [sp, #44]	; 0x2c
   16d40:	cmp	r2, #43	; 0x2b
   16d44:	beq	17340 <__assert_fail@plt+0x5f5c>
   16d48:	mov	r2, #0
   16d4c:	mov	r1, r2
   16d50:	mov	r2, #1
   16d54:	str	r1, [sp, #84]	; 0x54
   16d58:	str	r1, [sp, #92]	; 0x5c
   16d5c:	mov	r1, #2
   16d60:	str	r1, [sp, #88]	; 0x58
   16d64:	b	1608c <__assert_fail@plt+0x4ca8>
   16d68:	mov	r4, r8
   16d6c:	mov	r7, #0
   16d70:	ldr	r3, [sp, #28]
   16d74:	cmp	r7, #0
   16d78:	sub	sl, r3, fp
   16d7c:	bne	15f28 <__assert_fail@plt+0x4b44>
   16d80:	ldr	r3, [sp, #44]	; 0x2c
   16d84:	clz	r3, r3
   16d88:	lsr	r3, r3, #5
   16d8c:	ands	r3, r3, r5, lsr #31
   16d90:	bne	1758c <__assert_fail@plt+0x61a8>
   16d94:	sub	r3, r5, #6
   16d98:	movw	r9, #59480	; 0xe858
   16d9c:	movt	r9, #1
   16da0:	bic	r3, r3, r3, asr #31
   16da4:	str	r3, [sp, #84]	; 0x54
   16da8:	b	1693c <__assert_fail@plt+0x5558>
   16dac:	cmp	r7, #69	; 0x45
   16db0:	beq	17428 <__assert_fail@plt+0x6044>
   16db4:	ldr	r2, [sp, #48]	; 0x30
   16db8:	movw	ip, #1899	; 0x76b
   16dbc:	ldr	r0, [r2, #20]
   16dc0:	movw	r2, #63636	; 0xf894
   16dc4:	movt	r2, #65535	; 0xffff
   16dc8:	add	r1, r0, #1888	; 0x760
   16dcc:	cmp	r0, r2
   16dd0:	add	r1, r1, #12
   16dd4:	movge	lr, #0
   16dd8:	movlt	lr, #1
   16ddc:	cmp	r1, ip
   16de0:	mvnls	r1, #98	; 0x62
   16de4:	movhi	r1, #0
   16de8:	add	r1, r1, r0
   16dec:	cmp	r0, r2
   16df0:	ldr	r0, [sp, #44]	; 0x2c
   16df4:	movlt	r2, #0
   16df8:	movge	r2, #1
   16dfc:	asr	ip, r1, #31
   16e00:	str	lr, [sp, #84]	; 0x54
   16e04:	cmp	r0, #0
   16e08:	ldr	r0, [sp, #68]	; 0x44
   16e0c:	smull	r0, r1, r0, r1
   16e10:	rsb	r1, ip, r1, asr #5
   16e14:	add	ip, r1, #19
   16e18:	bne	1740c <__assert_fail@plt+0x6028>
   16e1c:	ldr	r1, [sp, #1180]	; 0x49c
   16e20:	cmp	r1, #43	; 0x2b
   16e24:	beq	17564 <__assert_fail@plt+0x6180>
   16e28:	ldr	r1, [sp, #1180]	; 0x49c
   16e2c:	mov	r0, #2
   16e30:	str	r1, [sp, #44]	; 0x2c
   16e34:	mov	r1, #0
   16e38:	strd	r0, [sp, #88]	; 0x58
   16e3c:	b	1608c <__assert_fail@plt+0x4ca8>
   16e40:	mov	r4, r8
   16e44:	mov	r7, #0
   16e48:	ldr	r3, [sp, #28]
   16e4c:	cmp	r7, #0
   16e50:	sub	sl, r3, fp
   16e54:	bne	15f28 <__assert_fail@plt+0x4b44>
   16e58:	mvn	r3, #0
   16e5c:	movw	r9, #59500	; 0xe86c
   16e60:	movt	r9, #1
   16e64:	str	r3, [sp, #84]	; 0x54
   16e68:	b	1693c <__assert_fail@plt+0x5558>
   16e6c:	cmp	r7, #69	; 0x45
   16e70:	beq	15f20 <__assert_fail@plt+0x4b3c>
   16e74:	ldr	r2, [sp, #60]	; 0x3c
   16e78:	cmp	sl, #0
   16e7c:	mov	r3, #66	; 0x42
   16e80:	movne	r2, sl
   16e84:	mov	r8, #0
   16e88:	str	r2, [sp, #60]	; 0x3c
   16e8c:	b	1619c <__assert_fail@plt+0x4db8>
   16e90:	mov	r4, r8
   16e94:	mov	r7, #0
   16e98:	mov	r3, #114	; 0x72
   16e9c:	mov	r8, #0
   16ea0:	b	1619c <__assert_fail@plt+0x4db8>
   16ea4:	mov	r4, r8
   16ea8:	mov	r7, #0
   16eac:	mov	r8, #0
   16eb0:	ldr	r2, [sp, #60]	; 0x3c
   16eb4:	cmp	sl, #0
   16eb8:	mov	r3, #112	; 0x70
   16ebc:	movne	r2, #0
   16ec0:	movne	r8, sl
   16ec4:	str	r2, [sp, #60]	; 0x3c
   16ec8:	b	1619c <__assert_fail@plt+0x4db8>
   16ecc:	mov	r4, r8
   16ed0:	mov	r7, #0
   16ed4:	mov	r8, #1
   16ed8:	b	16eb0 <__assert_fail@plt+0x5acc>
   16edc:	mov	r4, r8
   16ee0:	ldr	r3, [sp, #28]
   16ee4:	movw	r9, #59492	; 0xe864
   16ee8:	movt	r9, #1
   16eec:	sub	sl, r3, fp
   16ef0:	mvn	r3, #0
   16ef4:	str	r3, [sp, #84]	; 0x54
   16ef8:	b	1693c <__assert_fail@plt+0x5558>
   16efc:	mov	r4, r8
   16f00:	mov	r7, #0
   16f04:	mov	sl, #0
   16f08:	ldr	r1, [sp, #48]	; 0x30
   16f0c:	ldr	r2, [r1, #32]
   16f10:	cmp	r2, #0
   16f14:	blt	15944 <__assert_fail@plt+0x4560>
   16f18:	ldr	r1, [r1, #36]	; 0x24
   16f1c:	cmp	r1, #0
   16f20:	movlt	r2, #1
   16f24:	strlt	r2, [sp, #84]	; 0x54
   16f28:	blt	16f50 <__assert_fail@plt+0x5b6c>
   16f2c:	movne	r2, #0
   16f30:	strne	r2, [sp, #84]	; 0x54
   16f34:	bne	16f50 <__assert_fail@plt+0x5b6c>
   16f38:	ldr	r2, [sp, #56]	; 0x38
   16f3c:	ldrb	r2, [r2]
   16f40:	sub	r2, r2, #45	; 0x2d
   16f44:	clz	r2, r2
   16f48:	lsr	r2, r2, #5
   16f4c:	str	r2, [sp, #84]	; 0x54
   16f50:	ldr	r0, [sp, #80]	; 0x50
   16f54:	asr	r8, r1, #31
   16f58:	smull	ip, r2, r0, r1
   16f5c:	ldr	ip, [sp, #76]	; 0x4c
   16f60:	add	r2, r2, r1
   16f64:	rsb	r2, r8, r2, asr #5
   16f68:	smull	lr, ip, ip, r1
   16f6c:	asr	lr, r2, #31
   16f70:	add	ip, ip, r1
   16f74:	str	ip, [sp, #88]	; 0x58
   16f78:	smull	ip, r0, r0, r2
   16f7c:	ldr	ip, [sp, #88]	; 0x58
   16f80:	add	r0, r0, r2
   16f84:	rsb	lr, lr, r0, asr #5
   16f88:	rsb	r8, r8, ip, asr #11
   16f8c:	rsb	lr, lr, lr, lsl #4
   16f90:	rsb	ip, r2, r2, lsl #4
   16f94:	sub	lr, r2, lr, lsl #2
   16f98:	sub	r1, r1, ip, lsl #2
   16f9c:	cmp	sl, #3
   16fa0:	ldrls	pc, [pc, sl, lsl #2]
   16fa4:	b	15f20 <__assert_fail@plt+0x4b3c>
   16fa8:	andeq	r7, r1, r4, lsr #3
   16fac:	andeq	r7, r1, ip, asr #2
   16fb0:	andeq	r7, r1, r8, lsl r1
   16fb4:	andeq	r7, r1, r4, ror r1
   16fb8:	mov	r4, r8
   16fbc:	mov	r7, #0
   16fc0:	ldrb	r2, [r4, #1]
   16fc4:	add	r1, r4, #1
   16fc8:	cmp	r2, #58	; 0x3a
   16fcc:	movne	sl, #1
   16fd0:	beq	1752c <__assert_fail@plt+0x6148>
   16fd4:	cmp	r2, #122	; 0x7a
   16fd8:	bne	15f20 <__assert_fail@plt+0x4b3c>
   16fdc:	mov	r4, r1
   16fe0:	b	16f08 <__assert_fail@plt+0x5b24>
   16fe4:	cmp	r7, #0
   16fe8:	bne	15f20 <__assert_fail@plt+0x4b3c>
   16fec:	mov	r8, r4
   16ff0:	ldr	r3, [sp, #60]	; 0x3c
   16ff4:	cmp	sl, #0
   16ff8:	mov	r4, r8
   16ffc:	movne	r3, sl
   17000:	str	r3, [sp, #60]	; 0x3c
   17004:	mov	r3, #65	; 0x41
   17008:	b	16694 <__assert_fail@plt+0x52b0>
   1700c:	mov	r4, r8
   17010:	mov	r7, #0
   17014:	b	16e74 <__assert_fail@plt+0x5a90>
   17018:	mov	r4, r8
   1701c:	mov	r7, #0
   17020:	b	165bc <__assert_fail@plt+0x51d8>
   17024:	mov	r4, r8
   17028:	mov	r7, #0
   1702c:	b	1657c <__assert_fail@plt+0x5198>
   17030:	mov	r4, r8
   17034:	mov	r7, #0
   17038:	b	16644 <__assert_fail@plt+0x5260>
   1703c:	mov	r4, r8
   17040:	mov	r7, #0
   17044:	b	16628 <__assert_fail@plt+0x5244>
   17048:	mov	r4, r8
   1704c:	mov	r7, #0
   17050:	b	16614 <__assert_fail@plt+0x5230>
   17054:	mov	r4, r8
   17058:	mov	r7, #0
   1705c:	b	165f8 <__assert_fail@plt+0x5214>
   17060:	mov	r4, r8
   17064:	mov	r7, #0
   17068:	b	165e4 <__assert_fail@plt+0x5200>
   1706c:	mov	r4, r8
   17070:	mov	r7, #0
   17074:	b	16db4 <__assert_fail@plt+0x59d0>
   17078:	mov	r4, r8
   1707c:	mov	r7, #0
   17080:	b	16be4 <__assert_fail@plt+0x5800>
   17084:	mov	r4, r8
   17088:	mov	r7, #0
   1708c:	b	16bc8 <__assert_fail@plt+0x57e4>
   17090:	mov	r4, r8
   17094:	mov	r7, #0
   17098:	b	16bb0 <__assert_fail@plt+0x57cc>
   1709c:	mov	r4, r8
   170a0:	mov	r7, #0
   170a4:	b	16b94 <__assert_fail@plt+0x57b0>
   170a8:	mov	r4, r8
   170ac:	mov	r7, #0
   170b0:	b	16018 <__assert_fail@plt+0x4c34>
   170b4:	mov	r4, r8
   170b8:	mov	r7, #0
   170bc:	b	161c0 <__assert_fail@plt+0x4ddc>
   170c0:	mov	r4, r8
   170c4:	mov	r7, #0
   170c8:	b	16194 <__assert_fail@plt+0x4db0>
   170cc:	mov	r4, r8
   170d0:	mov	r7, #0
   170d4:	b	168ec <__assert_fail@plt+0x5508>
   170d8:	mov	r4, r8
   170dc:	mov	r7, #0
   170e0:	b	16894 <__assert_fail@plt+0x54b0>
   170e4:	mov	r4, r8
   170e8:	mov	r7, #0
   170ec:	b	16884 <__assert_fail@plt+0x54a0>
   170f0:	mov	r4, r8
   170f4:	mov	r7, #0
   170f8:	b	16784 <__assert_fail@plt+0x53a0>
   170fc:	mov	r4, r8
   17100:	b	16680 <__assert_fail@plt+0x529c>
   17104:	mov	r4, r8
   17108:	mov	r7, #0
   1710c:	b	16a28 <__assert_fail@plt+0x5644>
   17110:	mov	r4, r8
   17114:	b	15f20 <__assert_fail@plt+0x4b3c>
   17118:	mov	ip, #100	; 0x64
   1711c:	movw	r0, #10000	; 0x2710
   17120:	ldr	r2, [sp, #84]	; 0x54
   17124:	mul	ip, ip, lr
   17128:	mov	lr, #1
   1712c:	str	lr, [sp, #92]	; 0x5c
   17130:	mov	lr, #20
   17134:	mla	ip, r0, r8, ip
   17138:	mov	r0, #9
   1713c:	eor	r2, r2, #1
   17140:	str	r0, [sp, #88]	; 0x58
   17144:	add	ip, ip, r1
   17148:	b	16090 <__assert_fail@plt+0x4cac>
   1714c:	ldr	r2, [sp, #84]	; 0x54
   17150:	mov	r1, #1
   17154:	mov	ip, #100	; 0x64
   17158:	str	r1, [sp, #92]	; 0x5c
   1715c:	mov	r1, #6
   17160:	mla	ip, ip, r8, lr
   17164:	mov	lr, #4
   17168:	str	r1, [sp, #88]	; 0x58
   1716c:	eor	r2, r2, #1
   17170:	b	16090 <__assert_fail@plt+0x4cac>
   17174:	cmp	r1, #0
   17178:	bne	17118 <__assert_fail@plt+0x5d34>
   1717c:	cmp	lr, #0
   17180:	bne	1714c <__assert_fail@plt+0x5d68>
   17184:	ldr	r2, [sp, #84]	; 0x54
   17188:	mov	r1, #1
   1718c:	mov	ip, r8
   17190:	str	r1, [sp, #92]	; 0x5c
   17194:	mov	r1, #3
   17198:	str	r1, [sp, #88]	; 0x58
   1719c:	eor	r2, r2, #1
   171a0:	b	16090 <__assert_fail@plt+0x4cac>
   171a4:	ldr	r2, [sp, #84]	; 0x54
   171a8:	mov	r1, #1
   171ac:	mov	ip, #100	; 0x64
   171b0:	str	r1, [sp, #92]	; 0x5c
   171b4:	mov	r1, #5
   171b8:	mla	ip, ip, r8, lr
   171bc:	str	r1, [sp, #88]	; 0x58
   171c0:	eor	r2, r2, #1
   171c4:	b	1608c <__assert_fail@plt+0x4ca8>
   171c8:	mov	r9, #45	; 0x2d
   171cc:	sub	r2, r5, #1
   171d0:	sub	r2, r2, r8
   171d4:	cmp	r2, #0
   171d8:	movle	r3, #0
   171dc:	andgt	r3, r3, #1
   171e0:	cmp	r3, #0
   171e4:	ldr	r3, [sp, #44]	; 0x2c
   171e8:	moveq	r2, #0
   171ec:	cmp	r3, #95	; 0x5f
   171f0:	beq	17284 <__assert_fail@plt+0x5ea0>
   171f4:	ldr	r3, [sp, #28]
   171f8:	sub	sl, r3, fp
   171fc:	cmp	sl, #1
   17200:	bls	15984 <__assert_fail@plt+0x45a0>
   17204:	ldr	r3, [sp, #44]	; 0x2c
   17208:	cmp	r6, #0
   1720c:	add	fp, fp, #1
   17210:	strbne	r9, [r6], #1
   17214:	cmp	r3, #45	; 0x2d
   17218:	beq	17228 <__assert_fail@plt+0x5e44>
   1721c:	sub	r5, r5, #1
   17220:	cmp	r5, #0
   17224:	bge	163d4 <__assert_fail@plt+0x4ff0>
   17228:	mov	r9, r8
   1722c:	mov	r5, #0
   17230:	b	163e0 <__assert_fail@plt+0x4ffc>
   17234:	mov	r1, #48	; 0x30
   17238:	mov	r3, #1
   1723c:	str	r1, [sp, #44]	; 0x2c
   17240:	b	1637c <__assert_fail@plt+0x4f98>
   17244:	mov	fp, r3
   17248:	b	15958 <__assert_fail@plt+0x4574>
   1724c:	bl	1112c <memcpy@plt>
   17250:	b	16444 <__assert_fail@plt+0x5060>
   17254:	bl	1112c <memcpy@plt>
   17258:	b	16180 <__assert_fail@plt+0x4d9c>
   1725c:	add	r1, sp, #113	; 0x71
   17260:	mov	r2, r7
   17264:	mov	r0, r6
   17268:	bl	1575c <__assert_fail@plt+0x4378>
   1726c:	b	16180 <__assert_fail@plt+0x4d9c>
   17270:	mov	r7, r8
   17274:	mov	r5, #0
   17278:	b	16998 <__assert_fail@plt+0x55b4>
   1727c:	mov	r9, #43	; 0x2b
   17280:	b	171cc <__assert_fail@plt+0x5de8>
   17284:	ldr	r3, [sp, #28]
   17288:	add	fp, fp, r2
   1728c:	cmp	r6, #0
   17290:	sub	r5, r5, r2
   17294:	sub	sl, r3, fp
   17298:	beq	172e0 <__assert_fail@plt+0x5efc>
   1729c:	mov	r1, #32
   172a0:	mov	r0, r6
   172a4:	add	r6, r6, r2
   172a8:	bl	112e8 <memset@plt>
   172ac:	b	171fc <__assert_fail@plt+0x5e18>
   172b0:	cmp	r3, #1
   172b4:	bls	15984 <__assert_fail@plt+0x45a0>
   172b8:	cmp	r6, #0
   172bc:	mov	r7, #1
   172c0:	bne	16568 <__assert_fail@plt+0x5184>
   172c4:	b	162a8 <__assert_fail@plt+0x4ec4>
   172c8:	cmp	r3, #1
   172cc:	bls	15984 <__assert_fail@plt+0x45a0>
   172d0:	cmp	r6, #0
   172d4:	mov	r7, #1
   172d8:	bne	162a0 <__assert_fail@plt+0x4ebc>
   172dc:	b	162a8 <__assert_fail@plt+0x4ec4>
   172e0:	cmp	sl, #1
   172e4:	bls	15984 <__assert_fail@plt+0x45a0>
   172e8:	add	fp, fp, #1
   172ec:	sub	r5, r5, #1
   172f0:	b	17220 <__assert_fail@plt+0x5e3c>
   172f4:	ldr	r1, [sp, #44]	; 0x2c
   172f8:	cmp	r1, #43	; 0x2b
   172fc:	movne	r0, #4
   17300:	movne	r1, #0
   17304:	strdne	r0, [sp, #88]	; 0x58
   17308:	bne	1608c <__assert_fail@plt+0x4ca8>
   1730c:	mov	r1, #4
   17310:	str	r1, [sp, #88]	; 0x58
   17314:	movw	r1, #9999	; 0x270f
   17318:	cmp	r1, ip
   1731c:	bcs	17350 <__assert_fail@plt+0x5f6c>
   17320:	mov	r1, #1
   17324:	str	r1, [sp, #92]	; 0x5c
   17328:	mov	r1, #43	; 0x2b
   1732c:	str	r1, [sp, #44]	; 0x2c
   17330:	b	1608c <__assert_fail@plt+0x4ca8>
   17334:	asreq	r1, r3, #31
   17338:	beq	16aa4 <__assert_fail@plt+0x56c0>
   1733c:	b	16ae4 <__assert_fail@plt+0x5700>
   17340:	mov	r0, #0
   17344:	mov	r1, #2
   17348:	mov	r2, #1
   1734c:	strd	r0, [sp, #84]	; 0x54
   17350:	ldr	r1, [sp, #88]	; 0x58
   17354:	cmp	r5, r1
   17358:	movle	r1, #0
   1735c:	movgt	r1, #1
   17360:	str	r1, [sp, #92]	; 0x5c
   17364:	mov	r1, #43	; 0x2b
   17368:	str	r1, [sp, #44]	; 0x2c
   1736c:	b	1608c <__assert_fail@plt+0x4ca8>
   17370:	mov	r3, #121	; 0x79
   17374:	b	160a4 <__assert_fail@plt+0x4cc0>
   17378:	sub	r2, r2, #1
   1737c:	tst	r2, #3
   17380:	movwne	r2, #365	; 0x16d
   17384:	bne	173cc <__assert_fail@plt+0x5fe8>
   17388:	ldr	r1, [sp, #68]	; 0x44
   1738c:	mov	ip, #100	; 0x64
   17390:	smull	r1, r0, r1, r2
   17394:	asr	r1, r2, #31
   17398:	rsb	r1, r1, r0, asr #5
   1739c:	mls	r1, ip, r1, r2
   173a0:	cmp	r1, #0
   173a4:	movwne	r2, #366	; 0x16e
   173a8:	bne	173cc <__assert_fail@plt+0x5fe8>
   173ac:	mov	ip, #400	; 0x190
   173b0:	movw	r1, #365	; 0x16d
   173b4:	movw	lr, #366	; 0x16e
   173b8:	sdiv	r0, r2, ip
   173bc:	mls	r2, ip, r0, r2
   173c0:	cmp	r2, #0
   173c4:	movne	r2, r1
   173c8:	moveq	r2, lr
   173cc:	add	r9, r9, r2
   173d0:	ldr	r0, [sp, #64]	; 0x40
   173d4:	mvn	lr, #0
   173d8:	ldr	r2, [sp, #84]	; 0x54
   173dc:	sub	r2, r9, r2
   173e0:	add	r2, r2, #380	; 0x17c
   173e4:	add	r2, r2, #2
   173e8:	asr	r1, r2, #31
   173ec:	smull	ip, r0, r0, r2
   173f0:	add	r0, r0, r2
   173f4:	rsb	r1, r1, r0, asr #2
   173f8:	rsb	r1, r1, r1, lsl #3
   173fc:	sub	r2, r2, r1
   17400:	sub	r2, r9, r2
   17404:	add	sl, r2, #3
   17408:	b	16cd4 <__assert_fail@plt+0x58f0>
   1740c:	ldr	r1, [sp, #44]	; 0x2c
   17410:	cmp	r1, #43	; 0x2b
   17414:	beq	17564 <__assert_fail@plt+0x6180>
   17418:	mov	r0, #2
   1741c:	mov	r1, #0
   17420:	strd	r0, [sp, #88]	; 0x58
   17424:	b	1608c <__assert_fail@plt+0x4ca8>
   17428:	mov	r3, #67	; 0x43
   1742c:	b	160a4 <__assert_fail@plt+0x4cc0>
   17430:	cmp	r7, sl
   17434:	bcs	15984 <__assert_fail@plt+0x45a0>
   17438:	ldr	r3, [sp, #28]
   1743c:	add	fp, fp, r7
   17440:	cmp	r6, #0
   17444:	sub	r8, r3, fp
   17448:	bne	16b14 <__assert_fail@plt+0x5730>
   1744c:	ldr	r3, [sp, #44]	; 0x2c
   17450:	cmp	r3, #45	; 0x2d
   17454:	bne	17574 <__assert_fail@plt+0x6190>
   17458:	ldr	r3, [sp, #28]
   1745c:	cmp	r3, fp
   17460:	bne	15944 <__assert_fail@plt+0x4560>
   17464:	b	15984 <__assert_fail@plt+0x45a0>
   17468:	cmp	sl, #1
   1746c:	bls	15984 <__assert_fail@plt+0x45a0>
   17470:	cmp	r6, #0
   17474:	mov	r4, #1
   17478:	bne	16868 <__assert_fail@plt+0x5484>
   1747c:	b	16870 <__assert_fail@plt+0x548c>
   17480:	ldr	r2, [sp, #64]	; 0x40
   17484:	smull	r2, r1, r2, sl
   17488:	mov	r2, #2
   1748c:	str	r2, [sp, #88]	; 0x58
   17490:	asr	r2, sl, #31
   17494:	add	sl, r1, sl
   17498:	rsb	r2, r2, sl, asr #2
   1749c:	add	r2, r2, #1
   174a0:	b	161d0 <__assert_fail@plt+0x4dec>
   174a4:	movw	r2, #63636	; 0xf894
   174a8:	movt	r2, #65535	; 0xffff
   174ac:	ldr	r1, [sp, #44]	; 0x2c
   174b0:	sub	r2, r2, lr
   174b4:	add	ip, r8, #1888	; 0x760
   174b8:	cmp	r8, r2
   174bc:	add	ip, ip, #12
   174c0:	movlt	r2, #1
   174c4:	movge	r2, #0
   174c8:	add	ip, ip, lr
   174cc:	str	r2, [sp, #84]	; 0x54
   174d0:	movge	r2, #1
   174d4:	movlt	r2, #0
   174d8:	cmp	r1, #0
   174dc:	bne	172f4 <__assert_fail@plt+0x5f10>
   174e0:	ldr	r1, [sp, #1180]	; 0x49c
   174e4:	cmp	r1, #43	; 0x2b
   174e8:	beq	1730c <__assert_fail@plt+0x5f28>
   174ec:	mov	r0, #4
   174f0:	str	r1, [sp, #44]	; 0x2c
   174f4:	mov	r1, #0
   174f8:	strd	r0, [sp, #88]	; 0x58
   174fc:	b	1608c <__assert_fail@plt+0x4ca8>
   17500:	mov	r3, #89	; 0x59
   17504:	b	160a4 <__assert_fail@plt+0x4cc0>
   17508:	bl	1112c <memcpy@plt>
   1750c:	b	16768 <__assert_fail@plt+0x5384>
   17510:	mov	r2, r7
   17514:	mov	r0, r6
   17518:	ldr	r1, [sp, #56]	; 0x38
   1751c:	bl	1575c <__assert_fail@plt+0x4378>
   17520:	b	16768 <__assert_fail@plt+0x5384>
   17524:	bl	1112c <memcpy@plt>
   17528:	b	16b30 <__assert_fail@plt+0x574c>
   1752c:	add	r0, r4, #2
   17530:	mov	sl, #1
   17534:	mov	r1, r0
   17538:	ldrb	r2, [r0], #1
   1753c:	add	sl, sl, #1
   17540:	cmp	r2, #58	; 0x3a
   17544:	bne	16fd4 <__assert_fail@plt+0x5bf0>
   17548:	b	17534 <__assert_fail@plt+0x6150>
   1754c:	ldr	r2, [sp, #44]	; 0x2c
   17550:	mov	r1, #2
   17554:	str	r2, [sp, #84]	; 0x54
   17558:	mov	r2, #1
   1755c:	str	r1, [sp, #88]	; 0x58
   17560:	b	17350 <__assert_fail@plt+0x5f6c>
   17564:	mov	r1, #2
   17568:	str	r1, [sp, #88]	; 0x58
   1756c:	mov	r1, #99	; 0x63
   17570:	b	17318 <__assert_fail@plt+0x5f34>
   17574:	sub	r5, r5, r7
   17578:	cmp	r8, r5
   1757c:	bls	15984 <__assert_fail@plt+0x45a0>
   17580:	add	fp, fp, r5
   17584:	mov	r6, #0
   17588:	b	15944 <__assert_fail@plt+0x4560>
   1758c:	ldr	r3, [sp, #60]	; 0x3c
   17590:	mov	lr, #4
   17594:	mov	ip, #43	; 0x2b
   17598:	mov	r0, r7
   1759c:	movw	r2, #59480	; 0xe858
   175a0:	movt	r2, #1
   175a4:	mvn	r1, #0
   175a8:	mov	r9, r2
   175ac:	mov	r5, r7
   175b0:	stm	sp, {r3, ip, lr}
   175b4:	str	ip, [sp, #44]	; 0x2c
   175b8:	str	lr, [sp, #84]	; 0x54
   175bc:	ldr	r3, [sp, #1188]	; 0x4a4
   175c0:	ldr	lr, [sp, #1192]	; 0x4a8
   175c4:	ldr	ip, [sp, #1196]	; 0x4ac
   175c8:	str	r3, [sp, #12]
   175cc:	ldr	r3, [sp, #48]	; 0x30
   175d0:	str	lr, [sp, #16]
   175d4:	str	ip, [sp, #20]
   175d8:	bl	15804 <__assert_fail@plt+0x4420>
   175dc:	mov	r8, r0
   175e0:	mov	r7, r0
   175e4:	b	16998 <__assert_fail@plt+0x55b4>
   175e8:	cmp	r2, #0
   175ec:	add	ip, ip, #100	; 0x64
   175f0:	beq	16060 <__assert_fail@plt+0x4c7c>
   175f4:	b	16d3c <__assert_fail@plt+0x5958>
   175f8:	ldr	r2, [sp, #36]	; 0x24
   175fc:	mov	r3, #75	; 0x4b
   17600:	str	r3, [r2]
   17604:	b	15990 <__assert_fail@plt+0x45ac>
   17608:	strd	r4, [sp, #-16]!
   1760c:	mov	ip, #0
   17610:	str	r6, [sp, #8]
   17614:	mvn	r6, #0
   17618:	str	lr, [sp, #12]
   1761c:	sub	sp, sp, #32
   17620:	ldr	r4, [sp, #48]	; 0x30
   17624:	add	r5, sp, #31
   17628:	str	ip, [sp]
   1762c:	ldr	lr, [sp, #52]	; 0x34
   17630:	str	ip, [sp, #4]
   17634:	str	r6, [sp, #8]
   17638:	str	r5, [sp, #12]
   1763c:	str	r4, [sp, #16]
   17640:	str	lr, [sp, #20]
   17644:	strb	ip, [sp, #31]
   17648:	bl	15804 <__assert_fail@plt+0x4420>
   1764c:	add	sp, sp, #32
   17650:	ldrd	r4, [sp]
   17654:	ldr	r6, [sp, #8]
   17658:	add	sp, sp, #12
   1765c:	pop	{pc}		; (ldr pc, [sp], #4)
   17660:	strd	r4, [sp, #-16]!
   17664:	subs	r4, r0, #0
   17668:	str	r6, [sp, #8]
   1766c:	str	lr, [sp, #12]
   17670:	beq	17708 <__assert_fail@plt+0x6324>
   17674:	mov	r1, #47	; 0x2f
   17678:	bl	11360 <strrchr@plt>
   1767c:	subs	r5, r0, #0
   17680:	beq	176e0 <__assert_fail@plt+0x62fc>
   17684:	add	r6, r5, #1
   17688:	sub	r3, r6, r4
   1768c:	cmp	r3, #6
   17690:	ble	176e0 <__assert_fail@plt+0x62fc>
   17694:	movw	r1, #59568	; 0xe8b0
   17698:	movt	r1, #1
   1769c:	mov	r2, #7
   176a0:	sub	r0, r5, #6
   176a4:	bl	113c0 <strncmp@plt>
   176a8:	cmp	r0, #0
   176ac:	bne	176e0 <__assert_fail@plt+0x62fc>
   176b0:	movw	r1, #59576	; 0xe8b8
   176b4:	movt	r1, #1
   176b8:	mov	r2, #3
   176bc:	mov	r0, r6
   176c0:	bl	113c0 <strncmp@plt>
   176c4:	cmp	r0, #0
   176c8:	movne	r4, r6
   176cc:	bne	176e0 <__assert_fail@plt+0x62fc>
   176d0:	add	r4, r5, #4
   176d4:	movw	r3, #61896	; 0xf1c8
   176d8:	movt	r3, #2
   176dc:	str	r4, [r3]
   176e0:	movw	r2, #62132	; 0xf2b4
   176e4:	movt	r2, #2
   176e8:	ldr	r6, [sp, #8]
   176ec:	movw	r3, #61900	; 0xf1cc
   176f0:	movt	r3, #2
   176f4:	str	r4, [r2]
   176f8:	str	r4, [r3]
   176fc:	ldrd	r4, [sp]
   17700:	add	sp, sp, #12
   17704:	pop	{pc}		; (ldr pc, [sp], #4)
   17708:	movw	r3, #61912	; 0xf1d8
   1770c:	movt	r3, #2
   17710:	movw	r0, #59512	; 0xe878
   17714:	movt	r0, #1
   17718:	ldr	r3, [r3]
   1771c:	mov	r2, #55	; 0x37
   17720:	mov	r1, #1
   17724:	bl	111c8 <fwrite@plt>
   17728:	bl	113cc <abort@plt>
   1772c:	strd	r4, [sp, #-16]!
   17730:	mov	r4, #0
   17734:	mov	r5, #0
   17738:	cmp	r1, #10
   1773c:	str	r6, [sp, #8]
   17740:	strd	r4, [r0]
   17744:	strd	r4, [r0, #8]
   17748:	str	lr, [sp, #12]
   1774c:	strd	r4, [r0, #16]
   17750:	strd	r4, [r0, #24]
   17754:	strd	r4, [r0, #32]
   17758:	strd	r4, [r0, #40]	; 0x28
   1775c:	beq	17774 <__assert_fail@plt+0x6390>
   17760:	ldrd	r4, [sp]
   17764:	str	r1, [r0]
   17768:	ldr	r6, [sp, #8]
   1776c:	add	sp, sp, #12
   17770:	pop	{pc}		; (ldr pc, [sp], #4)
   17774:	bl	113cc <abort@plt>
   17778:	mov	r2, #5
   1777c:	strd	r4, [sp, #-16]!
   17780:	mov	r5, r0
   17784:	str	r6, [sp, #8]
   17788:	mov	r6, r1
   1778c:	mov	r1, r0
   17790:	mov	r0, #0
   17794:	str	lr, [sp, #12]
   17798:	bl	11168 <dcgettext@plt>
   1779c:	cmp	r5, r0
   177a0:	mov	r4, r0
   177a4:	beq	177bc <__assert_fail@plt+0x63d8>
   177a8:	mov	r0, r4
   177ac:	ldrd	r4, [sp]
   177b0:	ldr	r6, [sp, #8]
   177b4:	add	sp, sp, #12
   177b8:	pop	{pc}		; (ldr pc, [sp], #4)
   177bc:	bl	1cc98 <__assert_fail@plt+0xb8b4>
   177c0:	ldrb	r3, [r0]
   177c4:	bic	r3, r3, #32
   177c8:	cmp	r3, #85	; 0x55
   177cc:	bne	17834 <__assert_fail@plt+0x6450>
   177d0:	ldrb	r3, [r0, #1]
   177d4:	bic	r3, r3, #32
   177d8:	cmp	r3, #84	; 0x54
   177dc:	bne	178b4 <__assert_fail@plt+0x64d0>
   177e0:	ldrb	r3, [r0, #2]
   177e4:	bic	r3, r3, #32
   177e8:	cmp	r3, #70	; 0x46
   177ec:	bne	178b4 <__assert_fail@plt+0x64d0>
   177f0:	ldrb	r3, [r0, #3]
   177f4:	cmp	r3, #45	; 0x2d
   177f8:	bne	178b4 <__assert_fail@plt+0x64d0>
   177fc:	ldrb	r3, [r0, #4]
   17800:	cmp	r3, #56	; 0x38
   17804:	bne	178b4 <__assert_fail@plt+0x64d0>
   17808:	ldrb	r3, [r0, #5]
   1780c:	cmp	r3, #0
   17810:	bne	178b4 <__assert_fail@plt+0x64d0>
   17814:	ldrb	r2, [r4]
   17818:	movw	r3, #59668	; 0xe914
   1781c:	movt	r3, #1
   17820:	movw	r4, #59680	; 0xe920
   17824:	movt	r4, #1
   17828:	cmp	r2, #96	; 0x60
   1782c:	movne	r4, r3
   17830:	b	177a8 <__assert_fail@plt+0x63c4>
   17834:	cmp	r3, #71	; 0x47
   17838:	bne	178b4 <__assert_fail@plt+0x64d0>
   1783c:	ldrb	r3, [r0, #1]
   17840:	bic	r3, r3, #32
   17844:	cmp	r3, #66	; 0x42
   17848:	bne	178b4 <__assert_fail@plt+0x64d0>
   1784c:	ldrb	r3, [r0, #2]
   17850:	cmp	r3, #49	; 0x31
   17854:	bne	178b4 <__assert_fail@plt+0x64d0>
   17858:	ldrb	r3, [r0, #3]
   1785c:	cmp	r3, #56	; 0x38
   17860:	bne	178b4 <__assert_fail@plt+0x64d0>
   17864:	ldrb	r3, [r0, #4]
   17868:	cmp	r3, #48	; 0x30
   1786c:	bne	178b4 <__assert_fail@plt+0x64d0>
   17870:	ldrb	r3, [r0, #5]
   17874:	cmp	r3, #51	; 0x33
   17878:	bne	178b4 <__assert_fail@plt+0x64d0>
   1787c:	ldrb	r3, [r0, #6]
   17880:	cmp	r3, #48	; 0x30
   17884:	bne	178b4 <__assert_fail@plt+0x64d0>
   17888:	ldrb	r3, [r0, #7]
   1788c:	cmp	r3, #0
   17890:	bne	178b4 <__assert_fail@plt+0x64d0>
   17894:	ldrb	r2, [r4]
   17898:	movw	r3, #59672	; 0xe918
   1789c:	movt	r3, #1
   178a0:	movw	r4, #59676	; 0xe91c
   178a4:	movt	r4, #1
   178a8:	cmp	r2, #96	; 0x60
   178ac:	movne	r4, r3
   178b0:	b	177a8 <__assert_fail@plt+0x63c4>
   178b4:	movw	r3, #59684	; 0xe924
   178b8:	movt	r3, #1
   178bc:	cmp	r6, #9
   178c0:	movw	r4, #59664	; 0xe910
   178c4:	movt	r4, #1
   178c8:	movne	r4, r3
   178cc:	b	177a8 <__assert_fail@plt+0x63c4>
   178d0:	strd	r4, [sp, #-36]!	; 0xffffffdc
   178d4:	strd	r6, [sp, #8]
   178d8:	strd	r8, [sp, #16]
   178dc:	strd	sl, [sp, #24]
   178e0:	mov	fp, r0
   178e4:	mov	sl, r1
   178e8:	str	lr, [sp, #32]
   178ec:	sub	sp, sp, #116	; 0x74
   178f0:	ldr	r8, [sp, #152]	; 0x98
   178f4:	str	r3, [sp, #28]
   178f8:	ldr	r3, [sp, #156]	; 0x9c
   178fc:	str	r2, [sp, #32]
   17900:	and	r4, r3, #2
   17904:	ubfx	r3, r3, #1, #1
   17908:	str	r3, [sp, #44]	; 0x2c
   1790c:	bl	111e0 <__ctype_get_mb_cur_max@plt>
   17910:	str	r0, [sp, #64]	; 0x40
   17914:	cmp	r8, #10
   17918:	ldrls	pc, [pc, r8, lsl #2]
   1791c:	b	1908c <__assert_fail@plt+0x7ca8>
   17920:	andeq	r7, r1, r4, lsr #26
   17924:	andeq	r7, r1, r0, asr #27
   17928:	muleq	r1, ip, r3
   1792c:	andeq	r7, r1, r0, ror #27
   17930:	andeq	r7, r1, r8, lsl #25
   17934:	ldrdeq	r7, [r1], -r4
   17938:	andeq	r7, r1, r4, asr sp
   1793c:	muleq	r1, r0, sp
   17940:	andeq	r7, r1, ip, asr #18
   17944:	andeq	r7, r1, ip, asr #18
   17948:	andeq	r7, r1, ip, asr #18
   1794c:	cmp	r8, #10
   17950:	beq	1797c <__assert_fail@plt+0x6598>
   17954:	mov	r1, r8
   17958:	movw	r0, #59688	; 0xe928
   1795c:	movt	r0, #1
   17960:	bl	17778 <__assert_fail@plt+0x6394>
   17964:	mov	r1, r8
   17968:	str	r0, [sp, #164]	; 0xa4
   1796c:	movw	r0, #59684	; 0xe924
   17970:	movt	r0, #1
   17974:	bl	17778 <__assert_fail@plt+0x6394>
   17978:	str	r0, [sp, #168]	; 0xa8
   1797c:	cmp	r4, #0
   17980:	movne	r4, #0
   17984:	beq	18d68 <__assert_fail@plt+0x7984>
   17988:	mov	r3, #1
   1798c:	mov	r5, #0
   17990:	ldr	r0, [sp, #168]	; 0xa8
   17994:	str	r3, [sp, #36]	; 0x24
   17998:	str	r3, [sp, #40]	; 0x28
   1799c:	str	r5, [sp, #68]	; 0x44
   179a0:	bl	11294 <strlen@plt>
   179a4:	ldr	r3, [sp, #168]	; 0xa8
   179a8:	str	r5, [sp, #48]	; 0x30
   179ac:	str	r0, [sp, #56]	; 0x38
   179b0:	str	r3, [sp, #60]	; 0x3c
   179b4:	str	r5, [sp, #72]	; 0x48
   179b8:	str	r8, [sp, #152]	; 0x98
   179bc:	mov	r8, fp
   179c0:	mov	r9, #0
   179c4:	ldr	fp, [sp, #152]	; 0x98
   179c8:	ldr	r3, [sp, #28]
   179cc:	cmn	r3, #1
   179d0:	beq	17f30 <__assert_fail@plt+0x6b4c>
   179d4:	ldr	r3, [sp, #28]
   179d8:	subs	r6, r3, r9
   179dc:	movne	r6, #1
   179e0:	cmp	r6, #0
   179e4:	beq	17f48 <__assert_fail@plt+0x6b64>
   179e8:	ldr	r0, [sp, #32]
   179ec:	ldr	r7, [sp, #40]	; 0x28
   179f0:	add	r3, r0, r9
   179f4:	cmp	fp, #2
   179f8:	moveq	r7, #0
   179fc:	andne	r7, r7, #1
   17a00:	str	r3, [sp, #52]	; 0x34
   17a04:	cmp	r7, #0
   17a08:	beq	183e4 <__assert_fail@plt+0x7000>
   17a0c:	ldr	r2, [sp, #56]	; 0x38
   17a10:	cmp	r2, #0
   17a14:	beq	18680 <__assert_fail@plt+0x729c>
   17a18:	ldr	r1, [sp, #28]
   17a1c:	cmp	r2, #1
   17a20:	mov	r3, r2
   17a24:	movls	r3, #0
   17a28:	movhi	r3, #1
   17a2c:	add	r5, r9, r2
   17a30:	cmn	r1, #1
   17a34:	movne	r3, #0
   17a38:	cmp	r3, #0
   17a3c:	beq	17a48 <__assert_fail@plt+0x6664>
   17a40:	bl	11294 <strlen@plt>
   17a44:	str	r0, [sp, #28]
   17a48:	ldr	r3, [sp, #28]
   17a4c:	cmp	r5, r3
   17a50:	bhi	18680 <__assert_fail@plt+0x729c>
   17a54:	ldr	r0, [sp, #52]	; 0x34
   17a58:	ldr	r2, [sp, #56]	; 0x38
   17a5c:	ldr	r1, [sp, #60]	; 0x3c
   17a60:	bl	11150 <memcmp@plt>
   17a64:	cmp	r0, #0
   17a68:	bne	18680 <__assert_fail@plt+0x729c>
   17a6c:	ldr	r3, [sp, #44]	; 0x2c
   17a70:	cmp	r3, #0
   17a74:	bne	18fb0 <__assert_fail@plt+0x7bcc>
   17a78:	ldr	r3, [sp, #52]	; 0x34
   17a7c:	ldrb	r5, [r3]
   17a80:	cmp	r5, #126	; 0x7e
   17a84:	ldrls	pc, [pc, r5, lsl #2]
   17a88:	b	18340 <__assert_fail@plt+0x6f5c>
   17a8c:	andeq	r8, r1, r4, asr #4
   17a90:	andeq	r8, r1, r0, asr #6
   17a94:	andeq	r8, r1, r0, asr #6
   17a98:	andeq	r8, r1, r0, asr #6
   17a9c:	andeq	r8, r1, r0, asr #6
   17aa0:	andeq	r8, r1, r0, asr #6
   17aa4:	andeq	r8, r1, r0, asr #6
   17aa8:	andeq	r8, r1, r8, lsl r2
   17aac:	andeq	r8, r1, r0, lsl r2
   17ab0:	andeq	r8, r1, r8, asr r1
   17ab4:	andeq	r8, r1, r4, lsl #4
   17ab8:	andeq	r8, r1, r0, asr r1
   17abc:	andeq	r8, r1, r0, ror #3
   17ac0:	andeq	r8, r1, ip, lsr #4
   17ac4:	andeq	r8, r1, r0, asr #6
   17ac8:	andeq	r8, r1, r0, asr #6
   17acc:	andeq	r8, r1, r0, asr #6
   17ad0:	andeq	r8, r1, r0, asr #6
   17ad4:	andeq	r8, r1, r0, asr #6
   17ad8:	andeq	r8, r1, r0, asr #6
   17adc:	andeq	r8, r1, r0, asr #6
   17ae0:	andeq	r8, r1, r0, asr #6
   17ae4:	andeq	r8, r1, r0, asr #6
   17ae8:	andeq	r8, r1, r0, asr #6
   17aec:	andeq	r8, r1, r0, asr #6
   17af0:	andeq	r8, r1, r0, asr #6
   17af4:	andeq	r8, r1, r0, asr #6
   17af8:	andeq	r8, r1, r0, asr #6
   17afc:	andeq	r8, r1, r0, asr #6
   17b00:	andeq	r8, r1, r0, asr #6
   17b04:	andeq	r8, r1, r0, asr #6
   17b08:	andeq	r8, r1, r0, asr #6
   17b0c:	andeq	r8, r1, ip, lsl r3
   17b10:	andeq	r8, r1, r4, lsr #4
   17b14:	andeq	r8, r1, r4, lsr #4
   17b18:	andeq	r8, r1, r0, lsl #6
   17b1c:	andeq	r8, r1, r4, lsr #4
   17b20:	andeq	r8, r1, r4, lsr r3
   17b24:	andeq	r8, r1, r4, lsr #4
   17b28:	andeq	r8, r1, r0, lsl #1
   17b2c:	andeq	r8, r1, r4, lsr #4
   17b30:	andeq	r8, r1, r4, lsr #4
   17b34:	andeq	r8, r1, r4, lsr #4
   17b38:	andeq	r8, r1, r4, lsr r3
   17b3c:	andeq	r8, r1, r4, lsr r3
   17b40:	andeq	r8, r1, r4, lsr r3
   17b44:	andeq	r8, r1, r4, lsr r3
   17b48:	andeq	r8, r1, r4, lsr r3
   17b4c:	andeq	r8, r1, r4, lsr r3
   17b50:	andeq	r8, r1, r4, lsr r3
   17b54:	andeq	r8, r1, r4, lsr r3
   17b58:	andeq	r8, r1, r4, lsr r3
   17b5c:	andeq	r8, r1, r4, lsr r3
   17b60:	andeq	r8, r1, r4, lsr r3
   17b64:	andeq	r8, r1, r4, lsr r3
   17b68:	andeq	r8, r1, r4, lsr r3
   17b6c:	andeq	r8, r1, r4, lsr r3
   17b70:	andeq	r8, r1, r4, lsr r3
   17b74:	andeq	r8, r1, r4, lsr r3
   17b78:	andeq	r8, r1, r4, lsr #4
   17b7c:	andeq	r8, r1, r4, lsr #4
   17b80:	andeq	r8, r1, r4, lsr #4
   17b84:	andeq	r8, r1, r4, lsr #4
   17b88:	andeq	r8, r1, r4, asr r0
   17b8c:	andeq	r8, r1, r0, asr #6
   17b90:	andeq	r8, r1, r4, lsr r3
   17b94:	andeq	r8, r1, r4, lsr r3
   17b98:	andeq	r8, r1, r4, lsr r3
   17b9c:	andeq	r8, r1, r4, lsr r3
   17ba0:	andeq	r8, r1, r4, lsr r3
   17ba4:	andeq	r8, r1, r4, lsr r3
   17ba8:	andeq	r8, r1, r4, lsr r3
   17bac:	andeq	r8, r1, r4, lsr r3
   17bb0:	andeq	r8, r1, r4, lsr r3
   17bb4:	andeq	r8, r1, r4, lsr r3
   17bb8:	andeq	r8, r1, r4, lsr r3
   17bbc:	andeq	r8, r1, r4, lsr r3
   17bc0:	andeq	r8, r1, r4, lsr r3
   17bc4:	andeq	r8, r1, r4, lsr r3
   17bc8:	andeq	r8, r1, r4, lsr r3
   17bcc:	andeq	r8, r1, r4, lsr r3
   17bd0:	andeq	r8, r1, r4, lsr r3
   17bd4:	andeq	r8, r1, r4, lsr r3
   17bd8:	andeq	r8, r1, r4, lsr r3
   17bdc:	andeq	r8, r1, r4, lsr r3
   17be0:	andeq	r8, r1, r4, lsr r3
   17be4:	andeq	r8, r1, r4, lsr r3
   17be8:	andeq	r8, r1, r4, lsr r3
   17bec:	andeq	r8, r1, r4, lsr r3
   17bf0:	andeq	r8, r1, r4, lsr r3
   17bf4:	andeq	r8, r1, r4, lsr r3
   17bf8:	andeq	r8, r1, r4, lsr #4
   17bfc:	strdeq	r7, [r1], -ip
   17c00:	andeq	r8, r1, r4, lsr r3
   17c04:	andeq	r8, r1, r4, lsr #4
   17c08:	andeq	r8, r1, r4, lsr r3
   17c0c:	andeq	r8, r1, r4, lsr #4
   17c10:	andeq	r8, r1, r4, lsr r3
   17c14:	andeq	r8, r1, r4, lsr r3
   17c18:	andeq	r8, r1, r4, lsr r3
   17c1c:	andeq	r8, r1, r4, lsr r3
   17c20:	andeq	r8, r1, r4, lsr r3
   17c24:	andeq	r8, r1, r4, lsr r3
   17c28:	andeq	r8, r1, r4, lsr r3
   17c2c:	andeq	r8, r1, r4, lsr r3
   17c30:	andeq	r8, r1, r4, lsr r3
   17c34:	andeq	r8, r1, r4, lsr r3
   17c38:	andeq	r8, r1, r4, lsr r3
   17c3c:	andeq	r8, r1, r4, lsr r3
   17c40:	andeq	r8, r1, r4, lsr r3
   17c44:	andeq	r8, r1, r4, lsr r3
   17c48:	andeq	r8, r1, r4, lsr r3
   17c4c:	andeq	r8, r1, r4, lsr r3
   17c50:	andeq	r8, r1, r4, lsr r3
   17c54:	andeq	r8, r1, r4, lsr r3
   17c58:	andeq	r8, r1, r4, lsr r3
   17c5c:	andeq	r8, r1, r4, lsr r3
   17c60:	andeq	r8, r1, r4, lsr r3
   17c64:	andeq	r8, r1, r4, lsr r3
   17c68:	andeq	r8, r1, r4, lsr r3
   17c6c:	andeq	r8, r1, r4, lsr r3
   17c70:	andeq	r8, r1, r4, lsr r3
   17c74:	andeq	r8, r1, r4, lsr r3
   17c78:	andeq	r7, r1, r0, lsr #28
   17c7c:	andeq	r8, r1, r4, lsr #4
   17c80:	andeq	r7, r1, r0, lsr #28
   17c84:	andeq	r8, r1, r0, lsl #6
   17c88:	cmp	r4, #0
   17c8c:	moveq	r3, #1
   17c90:	streq	r3, [sp, #40]	; 0x28
   17c94:	beq	183a8 <__assert_fail@plt+0x6fc4>
   17c98:	mov	r3, #0
   17c9c:	mov	r2, #1
   17ca0:	mov	r4, r3
   17ca4:	str	r2, [sp, #36]	; 0x24
   17ca8:	str	r2, [sp, #44]	; 0x2c
   17cac:	str	r2, [sp, #56]	; 0x38
   17cb0:	str	r3, [sp, #68]	; 0x44
   17cb4:	movw	r3, #59684	; 0xe924
   17cb8:	movt	r3, #1
   17cbc:	str	r4, [sp, #40]	; 0x28
   17cc0:	mov	r8, #2
   17cc4:	str	r4, [sp, #48]	; 0x30
   17cc8:	str	r3, [sp, #60]	; 0x3c
   17ccc:	str	r4, [sp, #72]	; 0x48
   17cd0:	b	179b8 <__assert_fail@plt+0x65d4>
   17cd4:	cmp	r4, #0
   17cd8:	bne	18f24 <__assert_fail@plt+0x7b40>
   17cdc:	cmp	sl, #0
   17ce0:	beq	18ce4 <__assert_fail@plt+0x7900>
   17ce4:	mov	r3, #34	; 0x22
   17ce8:	mov	r1, r4
   17cec:	mov	r2, #1
   17cf0:	strb	r3, [fp]
   17cf4:	movw	r3, #59664	; 0xe910
   17cf8:	movt	r3, #1
   17cfc:	mov	r4, r2
   17d00:	str	r2, [sp, #36]	; 0x24
   17d04:	str	r2, [sp, #40]	; 0x28
   17d08:	str	r1, [sp, #44]	; 0x2c
   17d0c:	str	r1, [sp, #48]	; 0x30
   17d10:	str	r2, [sp, #56]	; 0x38
   17d14:	str	r3, [sp, #60]	; 0x3c
   17d18:	str	r1, [sp, #68]	; 0x44
   17d1c:	str	r1, [sp, #72]	; 0x48
   17d20:	b	179b8 <__assert_fail@plt+0x65d4>
   17d24:	mov	r3, #0
   17d28:	mov	r4, r8
   17d2c:	str	r3, [sp, #40]	; 0x28
   17d30:	str	r3, [sp, #44]	; 0x2c
   17d34:	str	r3, [sp, #48]	; 0x30
   17d38:	str	r8, [sp, #56]	; 0x38
   17d3c:	str	r3, [sp, #60]	; 0x3c
   17d40:	str	r3, [sp, #68]	; 0x44
   17d44:	mov	r3, #1
   17d48:	str	r3, [sp, #36]	; 0x24
   17d4c:	str	r8, [sp, #72]	; 0x48
   17d50:	b	179b8 <__assert_fail@plt+0x65d4>
   17d54:	mov	r3, #1
   17d58:	mov	r2, #0
   17d5c:	mov	r4, r2
   17d60:	mov	r8, #5
   17d64:	str	r3, [sp, #36]	; 0x24
   17d68:	str	r3, [sp, #40]	; 0x28
   17d6c:	str	r3, [sp, #44]	; 0x2c
   17d70:	str	r2, [sp, #48]	; 0x30
   17d74:	str	r3, [sp, #56]	; 0x38
   17d78:	movw	r3, #59664	; 0xe910
   17d7c:	movt	r3, #1
   17d80:	str	r3, [sp, #60]	; 0x3c
   17d84:	str	r2, [sp, #68]	; 0x44
   17d88:	str	r2, [sp, #72]	; 0x48
   17d8c:	b	179b8 <__assert_fail@plt+0x65d4>
   17d90:	mov	r3, #0
   17d94:	mov	r2, #1
   17d98:	mov	r4, r3
   17d9c:	str	r2, [sp, #36]	; 0x24
   17da0:	str	r2, [sp, #40]	; 0x28
   17da4:	str	r3, [sp, #44]	; 0x2c
   17da8:	str	r3, [sp, #48]	; 0x30
   17dac:	str	r3, [sp, #56]	; 0x38
   17db0:	str	r3, [sp, #60]	; 0x3c
   17db4:	str	r3, [sp, #68]	; 0x44
   17db8:	str	r3, [sp, #72]	; 0x48
   17dbc:	b	179b8 <__assert_fail@plt+0x65d4>
   17dc0:	mov	r2, #1
   17dc4:	mov	r3, #0
   17dc8:	mov	r4, r3
   17dcc:	str	r2, [sp, #36]	; 0x24
   17dd0:	str	r2, [sp, #44]	; 0x2c
   17dd4:	str	r8, [sp, #56]	; 0x38
   17dd8:	str	r3, [sp, #68]	; 0x44
   17ddc:	b	17cb4 <__assert_fail@plt+0x68d0>
   17de0:	mov	r3, #1
   17de4:	mov	r2, #0
   17de8:	mov	r4, r2
   17dec:	mov	r8, #2
   17df0:	str	r3, [sp, #36]	; 0x24
   17df4:	str	r3, [sp, #40]	; 0x28
   17df8:	str	r3, [sp, #44]	; 0x2c
   17dfc:	str	r2, [sp, #48]	; 0x30
   17e00:	str	r3, [sp, #56]	; 0x38
   17e04:	movw	r3, #59684	; 0xe924
   17e08:	movt	r3, #1
   17e0c:	str	r3, [sp, #60]	; 0x3c
   17e10:	str	r2, [sp, #68]	; 0x44
   17e14:	str	r2, [sp, #72]	; 0x48
   17e18:	b	179b8 <__assert_fail@plt+0x65d4>
   17e1c:	mov	r7, #0
   17e20:	ldr	r3, [sp, #28]
   17e24:	cmn	r3, #1
   17e28:	beq	18900 <__assert_fail@plt+0x751c>
   17e2c:	ldr	r3, [sp, #28]
   17e30:	subs	r2, r3, #1
   17e34:	movne	r2, #1
   17e38:	sub	r3, fp, #2
   17e3c:	cmp	r2, #0
   17e40:	clz	r3, r3
   17e44:	lsr	r3, r3, #5
   17e48:	bne	17e54 <__assert_fail@plt+0x6a70>
   17e4c:	cmp	r9, #0
   17e50:	beq	18660 <__assert_fail@plt+0x727c>
   17e54:	mov	r6, #0
   17e58:	ldr	r2, [sp, #40]	; 0x28
   17e5c:	eor	r2, r2, #1
   17e60:	orrs	r3, r3, r2
   17e64:	bne	1803c <__assert_fail@plt+0x6c58>
   17e68:	ldr	r2, [sp, #160]	; 0xa0
   17e6c:	cmp	r2, #0
   17e70:	beq	17e90 <__assert_fail@plt+0x6aac>
   17e74:	ldr	r0, [sp, #160]	; 0xa0
   17e78:	ubfx	r1, r5, #5, #8
   17e7c:	and	r2, r5, #31
   17e80:	ldr	r1, [r0, r1, lsl #2]
   17e84:	lsr	r2, r1, r2
   17e88:	tst	r2, #1
   17e8c:	bne	17e98 <__assert_fail@plt+0x6ab4>
   17e90:	cmp	r7, #0
   17e94:	beq	18108 <__assert_fail@plt+0x6d24>
   17e98:	ldr	r2, [sp, #44]	; 0x2c
   17e9c:	sub	r3, fp, #2
   17ea0:	clz	r3, r3
   17ea4:	lsr	r3, r3, #5
   17ea8:	cmp	r2, #0
   17eac:	bne	18c54 <__assert_fail@plt+0x7870>
   17eb0:	ldr	r2, [sp, #48]	; 0x30
   17eb4:	eor	r2, r2, #1
   17eb8:	ands	r3, r3, r2
   17ebc:	beq	17ef4 <__assert_fail@plt+0x6b10>
   17ec0:	cmp	sl, r4
   17ec4:	str	r3, [sp, #48]	; 0x30
   17ec8:	movhi	r2, #39	; 0x27
   17ecc:	strbhi	r2, [r8, r4]
   17ed0:	add	r2, r4, #1
   17ed4:	cmp	sl, r2
   17ed8:	movhi	r1, #36	; 0x24
   17edc:	strbhi	r1, [r8, r2]
   17ee0:	add	r2, r4, #2
   17ee4:	add	r4, r4, #3
   17ee8:	cmp	sl, r2
   17eec:	movhi	r1, #39	; 0x27
   17ef0:	strbhi	r1, [r8, r2]
   17ef4:	cmp	r4, sl
   17ef8:	add	r9, r9, #1
   17efc:	movcc	r3, #92	; 0x5c
   17f00:	strbcc	r3, [r8, r4]
   17f04:	add	r4, r4, #1
   17f08:	cmp	r4, sl
   17f0c:	ldr	r3, [sp, #36]	; 0x24
   17f10:	strbcc	r5, [r8, r4]
   17f14:	cmp	r6, #0
   17f18:	add	r4, r4, #1
   17f1c:	moveq	r3, #0
   17f20:	str	r3, [sp, #36]	; 0x24
   17f24:	ldr	r3, [sp, #28]
   17f28:	cmn	r3, #1
   17f2c:	bne	179d4 <__assert_fail@plt+0x65f0>
   17f30:	ldr	r3, [sp, #32]
   17f34:	ldrb	r6, [r3, r9]
   17f38:	adds	r6, r6, #0
   17f3c:	movne	r6, #1
   17f40:	cmp	r6, #0
   17f44:	bne	179e8 <__assert_fail@plt+0x6604>
   17f48:	str	fp, [sp, #152]	; 0x98
   17f4c:	mov	fp, r8
   17f50:	cmp	r4, #0
   17f54:	ldr	r1, [sp, #44]	; 0x2c
   17f58:	movne	r3, #0
   17f5c:	ldr	r8, [sp, #152]	; 0x98
   17f60:	sub	r2, r8, #2
   17f64:	clz	r2, r2
   17f68:	lsr	r2, r2, #5
   17f6c:	andeq	r3, r2, r1
   17f70:	cmp	r3, #0
   17f74:	bne	19030 <__assert_fail@plt+0x7c4c>
   17f78:	eor	r3, r1, #1
   17f7c:	ands	r2, r2, r3
   17f80:	beq	18f5c <__assert_fail@plt+0x7b78>
   17f84:	ldr	r3, [sp, #68]	; 0x44
   17f88:	cmp	r3, #0
   17f8c:	beq	18f60 <__assert_fail@plt+0x7b7c>
   17f90:	ldr	r3, [sp, #36]	; 0x24
   17f94:	cmp	r3, #0
   17f98:	bne	18fec <__assert_fail@plt+0x7c08>
   17f9c:	ldr	r3, [sp, #72]	; 0x48
   17fa0:	adds	r3, r3, #0
   17fa4:	movne	r3, #1
   17fa8:	cmp	sl, #0
   17fac:	movne	r3, #0
   17fb0:	cmp	r3, #0
   17fb4:	ldreq	r2, [sp, #68]	; 0x44
   17fb8:	beq	18f60 <__assert_fail@plt+0x7b7c>
   17fbc:	ldr	r2, [sp, #72]	; 0x48
   17fc0:	str	r3, [sp, #68]	; 0x44
   17fc4:	movw	r3, #59684	; 0xe924
   17fc8:	movt	r3, #1
   17fcc:	mov	r1, #39	; 0x27
   17fd0:	mov	r4, #1
   17fd4:	ldr	sl, [sp, #72]	; 0x48
   17fd8:	mov	r8, #2
   17fdc:	str	r3, [sp, #60]	; 0x3c
   17fe0:	mov	r3, #0
   17fe4:	strb	r1, [fp]
   17fe8:	str	r3, [sp, #44]	; 0x2c
   17fec:	str	r4, [sp, #56]	; 0x38
   17ff0:	str	r2, [sp, #72]	; 0x48
   17ff4:	b	179b8 <__assert_fail@plt+0x65d4>
   17ff8:	mov	r7, #0
   17ffc:	cmp	fp, #2
   18000:	beq	188e0 <__assert_fail@plt+0x74fc>
   18004:	ldr	r2, [sp, #40]	; 0x28
   18008:	ldr	r3, [sp, #56]	; 0x38
   1800c:	ldr	r1, [sp, #44]	; 0x2c
   18010:	cmp	r3, #0
   18014:	moveq	r3, #0
   18018:	andne	r3, r2, r1
   1801c:	cmp	r3, #0
   18020:	moveq	r5, #92	; 0x5c
   18024:	moveq	r3, r5
   18028:	bne	188ec <__assert_fail@plt+0x7508>
   1802c:	ldr	r2, [sp, #40]	; 0x28
   18030:	cmp	r2, #0
   18034:	bne	18d28 <__assert_fail@plt+0x7944>
   18038:	mov	r6, #0
   1803c:	ldr	r3, [sp, #44]	; 0x2c
   18040:	cmp	r3, #0
   18044:	beq	188d8 <__assert_fail@plt+0x74f4>
   18048:	mov	r3, #0
   1804c:	b	17e68 <__assert_fail@plt+0x6a84>
   18050:	mov	r7, #0
   18054:	cmp	fp, #2
   18058:	beq	18950 <__assert_fail@plt+0x756c>
   1805c:	cmp	fp, #5
   18060:	beq	18914 <__assert_fail@plt+0x7530>
   18064:	sub	r3, fp, #2
   18068:	mov	r6, #0
   1806c:	clz	r3, r3
   18070:	mov	r5, #63	; 0x3f
   18074:	lsr	r3, r3, #5
   18078:	b	17e58 <__assert_fail@plt+0x6a74>
   1807c:	mov	r7, #0
   18080:	cmp	fp, #2
   18084:	movne	r3, #0
   18088:	movne	r5, #39	; 0x27
   1808c:	strne	r6, [sp, #68]	; 0x44
   18090:	bne	17e58 <__assert_fail@plt+0x6a74>
   18094:	ldr	r3, [sp, #44]	; 0x2c
   18098:	cmp	r3, #0
   1809c:	bne	18d58 <__assert_fail@plt+0x7974>
   180a0:	ldr	r3, [sp, #72]	; 0x48
   180a4:	cmp	sl, #0
   180a8:	clz	r3, r3
   180ac:	lsr	r3, r3, #5
   180b0:	moveq	r3, #0
   180b4:	cmp	r3, #0
   180b8:	bne	18c84 <__assert_fail@plt+0x78a0>
   180bc:	cmp	sl, r4
   180c0:	movhi	r3, #39	; 0x27
   180c4:	strbhi	r3, [r8, r4]
   180c8:	add	r3, r4, #1
   180cc:	cmp	sl, r3
   180d0:	movhi	r2, #92	; 0x5c
   180d4:	strbhi	r2, [r8, r3]
   180d8:	add	r3, r4, #2
   180dc:	cmp	sl, r3
   180e0:	bls	180ec <__assert_fail@plt+0x6d08>
   180e4:	mov	r2, #39	; 0x27
   180e8:	strb	r2, [r8, r3]
   180ec:	mov	r3, #0
   180f0:	cmp	r7, #0
   180f4:	add	r4, r4, #3
   180f8:	mov	r5, #39	; 0x27
   180fc:	str	r3, [sp, #48]	; 0x30
   18100:	str	r6, [sp, #68]	; 0x44
   18104:	bne	17e98 <__assert_fail@plt+0x6ab4>
   18108:	ldr	r2, [sp, #48]	; 0x30
   1810c:	eor	r3, r3, #1
   18110:	add	r9, r9, #1
   18114:	and	r3, r3, r2
   18118:	uxtb	r3, r3
   1811c:	cmp	r3, #0
   18120:	beq	17f08 <__assert_fail@plt+0x6b24>
   18124:	cmp	sl, r4
   18128:	movhi	r3, #39	; 0x27
   1812c:	strbhi	r3, [r8, r4]
   18130:	add	r3, r4, #1
   18134:	add	r4, r4, #2
   18138:	cmp	sl, r3
   1813c:	movhi	r2, #39	; 0x27
   18140:	strbhi	r2, [r8, r3]
   18144:	mov	r3, #0
   18148:	str	r3, [sp, #48]	; 0x30
   1814c:	b	17f08 <__assert_fail@plt+0x6b24>
   18150:	mov	r3, #118	; 0x76
   18154:	b	1802c <__assert_fail@plt+0x6c48>
   18158:	mov	r3, #116	; 0x74
   1815c:	ldr	r2, [sp, #44]	; 0x2c
   18160:	cmp	fp, #2
   18164:	movne	r2, #0
   18168:	andeq	r2, r2, #1
   1816c:	cmp	r2, #0
   18170:	beq	1802c <__assert_fail@plt+0x6c48>
   18174:	mov	fp, r8
   18178:	mov	r8, #2
   1817c:	ldr	r3, [sp, #40]	; 0x28
   18180:	cmp	r3, #0
   18184:	movne	r8, #4
   18188:	mov	lr, #0
   1818c:	mov	r0, fp
   18190:	ldr	r2, [sp, #32]
   18194:	ldr	r3, [sp, #156]	; 0x9c
   18198:	ldr	r1, [sp, #164]	; 0xa4
   1819c:	bic	ip, r3, #2
   181a0:	ldr	r3, [sp, #28]
   181a4:	stm	sp, {r8, ip, lr}
   181a8:	ldr	ip, [sp, #168]	; 0xa8
   181ac:	str	r1, [sp, #12]
   181b0:	mov	r1, sl
   181b4:	str	ip, [sp, #16]
   181b8:	bl	178d0 <__assert_fail@plt+0x64ec>
   181bc:	mov	r4, r0
   181c0:	mov	r0, r4
   181c4:	add	sp, sp, #116	; 0x74
   181c8:	ldrd	r4, [sp]
   181cc:	ldrd	r6, [sp, #8]
   181d0:	ldrd	r8, [sp, #16]
   181d4:	ldrd	sl, [sp, #24]
   181d8:	add	sp, sp, #32
   181dc:	pop	{pc}		; (ldr pc, [sp], #4)
   181e0:	mov	r5, #102	; 0x66
   181e4:	ldr	r2, [sp, #44]	; 0x2c
   181e8:	sub	r3, fp, #2
   181ec:	clz	r3, r3
   181f0:	lsr	r3, r3, #5
   181f4:	cmp	r2, #0
   181f8:	bne	18c54 <__assert_fail@plt+0x7870>
   181fc:	mov	r6, r2
   18200:	b	17ef4 <__assert_fail@plt+0x6b10>
   18204:	mov	r5, #110	; 0x6e
   18208:	mov	r6, #0
   1820c:	b	17e98 <__assert_fail@plt+0x6ab4>
   18210:	mov	r5, #98	; 0x62
   18214:	b	181e4 <__assert_fail@plt+0x6e00>
   18218:	mov	r5, #97	; 0x61
   1821c:	b	181e4 <__assert_fail@plt+0x6e00>
   18220:	mov	r7, #0
   18224:	mov	r6, #0
   18228:	b	18048 <__assert_fail@plt+0x6c64>
   1822c:	mov	r5, #114	; 0x72
   18230:	b	18208 <__assert_fail@plt+0x6e24>
   18234:	ldr	r3, [sp, #44]	; 0x2c
   18238:	cmp	r3, #0
   1823c:	bne	18fcc <__assert_fail@plt+0x7be8>
   18240:	mov	r7, r3
   18244:	ldr	r3, [sp, #48]	; 0x30
   18248:	sub	r2, fp, #2
   1824c:	clz	r2, r2
   18250:	lsr	r2, r2, #5
   18254:	eor	r3, r3, #1
   18258:	ands	r3, r2, r3
   1825c:	beq	18c70 <__assert_fail@plt+0x788c>
   18260:	cmp	sl, r4
   18264:	movhi	r1, #39	; 0x27
   18268:	strbhi	r1, [r8, r4]
   1826c:	add	r1, r4, #1
   18270:	cmp	sl, r1
   18274:	movhi	r0, #36	; 0x24
   18278:	strbhi	r0, [r8, r1]
   1827c:	add	r1, r4, #2
   18280:	cmp	sl, r1
   18284:	movhi	r0, #39	; 0x27
   18288:	strbhi	r0, [r8, r1]
   1828c:	add	r1, r4, #3
   18290:	cmp	sl, r1
   18294:	bls	18cc8 <__assert_fail@plt+0x78e4>
   18298:	mov	r4, r1
   1829c:	mov	r1, #92	; 0x5c
   182a0:	mov	r0, r4
   182a4:	str	r3, [sp, #48]	; 0x30
   182a8:	strb	r1, [r8, r4]
   182ac:	cmp	fp, #2
   182b0:	add	r4, r4, #1
   182b4:	beq	18d18 <__assert_fail@plt+0x7934>
   182b8:	ldr	r1, [sp, #28]
   182bc:	add	r3, r9, #1
   182c0:	cmp	r3, r1
   182c4:	bcs	182dc <__assert_fail@plt+0x6ef8>
   182c8:	ldr	r1, [sp, #32]
   182cc:	ldrb	r3, [r1, r3]
   182d0:	sub	r3, r3, #48	; 0x30
   182d4:	cmp	r3, #9
   182d8:	bls	18d30 <__assert_fail@plt+0x794c>
   182dc:	mov	r5, #48	; 0x30
   182e0:	ldr	r3, [sp, #40]	; 0x28
   182e4:	eor	r3, r3, #1
   182e8:	orrs	r2, r2, r3
   182ec:	mov	r3, r6
   182f0:	moveq	r6, r2
   182f4:	beq	17e68 <__assert_fail@plt+0x6a84>
   182f8:	mov	r6, #0
   182fc:	b	17e90 <__assert_fail@plt+0x6aac>
   18300:	cmp	r9, #0
   18304:	mov	r2, r7
   18308:	bne	188a8 <__assert_fail@plt+0x74c4>
   1830c:	mov	r6, r7
   18310:	mov	r3, r9
   18314:	mov	r7, r2
   18318:	b	17e58 <__assert_fail@plt+0x6a74>
   1831c:	mov	r2, r7
   18320:	mov	r6, r7
   18324:	mov	r3, #0
   18328:	mov	r7, r2
   1832c:	mov	r5, #32
   18330:	b	17e58 <__assert_fail@plt+0x6a74>
   18334:	mov	r6, r7
   18338:	b	18048 <__assert_fail@plt+0x6c64>
   1833c:	mov	r7, #0
   18340:	ldr	r3, [sp, #64]	; 0x40
   18344:	cmp	r3, #1
   18348:	bne	18968 <__assert_fail@plt+0x7584>
   1834c:	bl	1127c <__ctype_b_loc@plt>
   18350:	ldr	r2, [r0]
   18354:	sxth	r3, r5
   18358:	lsl	r3, r3, #1
   1835c:	ldr	r1, [sp, #64]	; 0x40
   18360:	ldrh	r3, [r2, r3]
   18364:	mov	ip, r1
   18368:	and	r3, r3, #16384	; 0x4000
   1836c:	cmp	r3, #0
   18370:	ldr	r3, [sp, #40]	; 0x28
   18374:	movne	r6, #1
   18378:	moveq	r6, #0
   1837c:	movne	r2, #0
   18380:	andeq	r2, r3, #1
   18384:	cmp	r2, #0
   18388:	bne	18cb0 <__assert_fail@plt+0x78cc>
   1838c:	sub	r3, fp, #2
   18390:	clz	r3, r3
   18394:	lsr	r3, r3, #5
   18398:	b	17e58 <__assert_fail@plt+0x6a74>
   1839c:	cmp	r4, #0
   183a0:	bne	19040 <__assert_fail@plt+0x7c5c>
   183a4:	str	r4, [sp, #40]	; 0x28
   183a8:	cmp	sl, #0
   183ac:	bne	19070 <__assert_fail@plt+0x7c8c>
   183b0:	mov	r3, #1
   183b4:	movw	r2, #59684	; 0xe924
   183b8:	movt	r2, #1
   183bc:	mov	r4, r3
   183c0:	mov	r8, #2
   183c4:	str	r3, [sp, #36]	; 0x24
   183c8:	str	sl, [sp, #44]	; 0x2c
   183cc:	str	sl, [sp, #48]	; 0x30
   183d0:	str	r3, [sp, #56]	; 0x38
   183d4:	str	r2, [sp, #60]	; 0x3c
   183d8:	str	sl, [sp, #68]	; 0x44
   183dc:	str	sl, [sp, #72]	; 0x48
   183e0:	b	179b8 <__assert_fail@plt+0x65d4>
   183e4:	ldr	r3, [sp, #32]
   183e8:	ldrb	r5, [r3, r9]
   183ec:	cmp	r5, #126	; 0x7e
   183f0:	ldrls	pc, [pc, r5, lsl #2]
   183f4:	b	18340 <__assert_fail@plt+0x6f5c>
   183f8:	andeq	r8, r1, ip, lsl r6
   183fc:	andeq	r8, r1, r0, asr #6
   18400:	andeq	r8, r1, r0, asr #6
   18404:	andeq	r8, r1, r0, asr #6
   18408:	andeq	r8, r1, r0, asr #6
   1840c:	andeq	r8, r1, r0, asr #6
   18410:	andeq	r8, r1, r0, asr #6
   18414:	andeq	r8, r1, r4, lsl r6
   18418:	andeq	r8, r1, ip, lsl #12
   1841c:	andeq	r8, r1, r8, asr r1
   18420:	andeq	r8, r1, r4, lsl #12
   18424:	andeq	r8, r1, r0, asr r1
   18428:	strdeq	r8, [r1], -ip
   1842c:	strdeq	r8, [r1], -r4
   18430:	andeq	r8, r1, r0, asr #6
   18434:	andeq	r8, r1, r0, asr #6
   18438:	andeq	r8, r1, r0, asr #6
   1843c:	andeq	r8, r1, r0, asr #6
   18440:	andeq	r8, r1, r0, asr #6
   18444:	andeq	r8, r1, r0, asr #6
   18448:	andeq	r8, r1, r0, asr #6
   1844c:	andeq	r8, r1, r0, asr #6
   18450:	andeq	r8, r1, r0, asr #6
   18454:	andeq	r8, r1, r0, asr #6
   18458:	andeq	r8, r1, r0, asr #6
   1845c:	andeq	r8, r1, r0, asr #6
   18460:	andeq	r8, r1, r0, asr #6
   18464:	andeq	r8, r1, r0, asr #6
   18468:	andeq	r8, r1, r0, asr #6
   1846c:	andeq	r8, r1, r0, asr #6
   18470:	andeq	r8, r1, r0, asr #6
   18474:	andeq	r8, r1, r0, asr #6
   18478:	andeq	r8, r1, r0, ror r6
   1847c:	andeq	r8, r1, r0, asr r6
   18480:	andeq	r8, r1, r0, asr r6
   18484:	andeq	r8, r1, r0, asr #12
   18488:	andeq	r8, r1, r0, asr r6
   1848c:	andeq	r8, r1, ip, lsl #7
   18490:	andeq	r8, r1, r0, asr r6
   18494:	andeq	r8, r1, r0, lsl #1
   18498:	andeq	r8, r1, r0, asr r6
   1849c:	andeq	r8, r1, r0, asr r6
   184a0:	andeq	r8, r1, r0, asr r6
   184a4:	andeq	r8, r1, ip, lsl #7
   184a8:	andeq	r8, r1, ip, lsl #7
   184ac:	andeq	r8, r1, ip, lsl #7
   184b0:	andeq	r8, r1, ip, lsl #7
   184b4:	andeq	r8, r1, ip, lsl #7
   184b8:	andeq	r8, r1, ip, lsl #7
   184bc:	andeq	r8, r1, ip, lsl #7
   184c0:	andeq	r8, r1, ip, lsl #7
   184c4:	andeq	r8, r1, ip, lsl #7
   184c8:	andeq	r8, r1, ip, lsl #7
   184cc:	andeq	r8, r1, ip, lsl #7
   184d0:	andeq	r8, r1, ip, lsl #7
   184d4:	andeq	r8, r1, ip, lsl #7
   184d8:	andeq	r8, r1, ip, lsl #7
   184dc:	andeq	r8, r1, ip, lsl #7
   184e0:	andeq	r8, r1, ip, lsl #7
   184e4:	andeq	r8, r1, r0, asr r6
   184e8:	andeq	r8, r1, r0, asr r6
   184ec:	andeq	r8, r1, r0, asr r6
   184f0:	andeq	r8, r1, r0, asr r6
   184f4:	andeq	r8, r1, r4, asr r0
   184f8:	andeq	r8, r1, r0, asr #6
   184fc:	andeq	r8, r1, ip, lsl #7
   18500:	andeq	r8, r1, ip, lsl #7
   18504:	andeq	r8, r1, ip, lsl #7
   18508:	andeq	r8, r1, ip, lsl #7
   1850c:	andeq	r8, r1, ip, lsl #7
   18510:	andeq	r8, r1, ip, lsl #7
   18514:	andeq	r8, r1, ip, lsl #7
   18518:	andeq	r8, r1, ip, lsl #7
   1851c:	andeq	r8, r1, ip, lsl #7
   18520:	andeq	r8, r1, ip, lsl #7
   18524:	andeq	r8, r1, ip, lsl #7
   18528:	andeq	r8, r1, ip, lsl #7
   1852c:	andeq	r8, r1, ip, lsl #7
   18530:	andeq	r8, r1, ip, lsl #7
   18534:	andeq	r8, r1, ip, lsl #7
   18538:	andeq	r8, r1, ip, lsl #7
   1853c:	andeq	r8, r1, ip, lsl #7
   18540:	andeq	r8, r1, ip, lsl #7
   18544:	andeq	r8, r1, ip, lsl #7
   18548:	andeq	r8, r1, ip, lsl #7
   1854c:	andeq	r8, r1, ip, lsl #7
   18550:	andeq	r8, r1, ip, lsl #7
   18554:	andeq	r8, r1, ip, lsl #7
   18558:	andeq	r8, r1, ip, lsl #7
   1855c:	andeq	r8, r1, ip, lsl #7
   18560:	andeq	r8, r1, ip, lsl #7
   18564:	andeq	r8, r1, r0, asr r6
   18568:	strdeq	r7, [r1], -ip
   1856c:	andeq	r8, r1, ip, lsl #7
   18570:	andeq	r8, r1, r0, asr r6
   18574:	andeq	r8, r1, ip, lsl #7
   18578:	andeq	r8, r1, r0, asr r6
   1857c:	andeq	r8, r1, ip, lsl #7
   18580:	andeq	r8, r1, ip, lsl #7
   18584:	andeq	r8, r1, ip, lsl #7
   18588:	andeq	r8, r1, ip, lsl #7
   1858c:	andeq	r8, r1, ip, lsl #7
   18590:	andeq	r8, r1, ip, lsl #7
   18594:	andeq	r8, r1, ip, lsl #7
   18598:	andeq	r8, r1, ip, lsl #7
   1859c:	andeq	r8, r1, ip, lsl #7
   185a0:	andeq	r8, r1, ip, lsl #7
   185a4:	andeq	r8, r1, ip, lsl #7
   185a8:	andeq	r8, r1, ip, lsl #7
   185ac:	andeq	r8, r1, ip, lsl #7
   185b0:	andeq	r8, r1, ip, lsl #7
   185b4:	andeq	r8, r1, ip, lsl #7
   185b8:	andeq	r8, r1, ip, lsl #7
   185bc:	andeq	r8, r1, ip, lsl #7
   185c0:	andeq	r8, r1, ip, lsl #7
   185c4:	andeq	r8, r1, ip, lsl #7
   185c8:	andeq	r8, r1, ip, lsl #7
   185cc:	andeq	r8, r1, ip, lsl #7
   185d0:	andeq	r8, r1, ip, lsl #7
   185d4:	andeq	r8, r1, ip, lsl #7
   185d8:	andeq	r8, r1, ip, lsl #7
   185dc:	andeq	r8, r1, ip, lsl #7
   185e0:	andeq	r8, r1, ip, lsl #7
   185e4:	andeq	r7, r1, r0, lsr #28
   185e8:	andeq	r8, r1, r0, asr r6
   185ec:	andeq	r7, r1, r0, lsr #28
   185f0:	andeq	r8, r1, r0, asr #12
   185f4:	mov	r3, #114	; 0x72
   185f8:	b	1815c <__assert_fail@plt+0x6d78>
   185fc:	mov	r3, #102	; 0x66
   18600:	b	1802c <__assert_fail@plt+0x6c48>
   18604:	mov	r3, #110	; 0x6e
   18608:	b	1815c <__assert_fail@plt+0x6d78>
   1860c:	mov	r3, #98	; 0x62
   18610:	b	1802c <__assert_fail@plt+0x6c48>
   18614:	mov	r3, #97	; 0x61
   18618:	b	1802c <__assert_fail@plt+0x6c48>
   1861c:	ldr	r3, [sp, #40]	; 0x28
   18620:	cmp	r3, #0
   18624:	bne	18234 <__assert_fail@plt+0x6e50>
   18628:	ldr	r3, [sp, #156]	; 0x9c
   1862c:	tst	r3, #1
   18630:	addne	r9, r9, #1
   18634:	bne	179c8 <__assert_fail@plt+0x65e4>
   18638:	ldr	r7, [sp, #40]	; 0x28
   1863c:	b	18038 <__assert_fail@plt+0x6c54>
   18640:	sub	r3, fp, #2
   18644:	clz	r3, r3
   18648:	lsr	r3, r3, #5
   1864c:	b	17e4c <__assert_fail@plt+0x6a68>
   18650:	sub	r3, fp, #2
   18654:	mov	r6, #0
   18658:	clz	r3, r3
   1865c:	lsr	r3, r3, #5
   18660:	ldr	r2, [sp, #44]	; 0x2c
   18664:	tst	r2, r3
   18668:	beq	17e58 <__assert_fail@plt+0x6a74>
   1866c:	b	18174 <__assert_fail@plt+0x6d90>
   18670:	sub	r3, fp, #2
   18674:	clz	r3, r3
   18678:	lsr	r3, r3, #5
   1867c:	b	18660 <__assert_fail@plt+0x727c>
   18680:	ldr	r3, [sp, #52]	; 0x34
   18684:	ldrb	r5, [r3]
   18688:	cmp	r5, #126	; 0x7e
   1868c:	ldrls	pc, [pc, r5, lsl #2]
   18690:	b	1833c <__assert_fail@plt+0x6f58>
   18694:	andeq	r8, r1, r4, lsr r2
   18698:	andeq	r8, r1, ip, lsr r3
   1869c:	andeq	r8, r1, ip, lsr r3
   186a0:	andeq	r8, r1, ip, lsr r3
   186a4:	andeq	r8, r1, ip, lsr r3
   186a8:	andeq	r8, r1, ip, lsr r3
   186ac:	andeq	r8, r1, ip, lsr r3
   186b0:	andeq	r8, r1, r8, lsl r2
   186b4:	andeq	r8, r1, r0, lsl r2
   186b8:	andeq	r8, r1, ip, asr #17
   186bc:	andeq	r8, r1, r4, lsl #4
   186c0:	andeq	r8, r1, r0, asr #17
   186c4:	andeq	r8, r1, r0, ror #3
   186c8:	andeq	r8, r1, ip, lsr #4
   186cc:	andeq	r8, r1, ip, lsr r3
   186d0:	andeq	r8, r1, ip, lsr r3
   186d4:	andeq	r8, r1, ip, lsr r3
   186d8:	andeq	r8, r1, ip, lsr r3
   186dc:	andeq	r8, r1, ip, lsr r3
   186e0:	andeq	r8, r1, ip, lsr r3
   186e4:	andeq	r8, r1, ip, lsr r3
   186e8:	andeq	r8, r1, ip, lsr r3
   186ec:	andeq	r8, r1, ip, lsr r3
   186f0:	andeq	r8, r1, ip, lsr r3
   186f4:	andeq	r8, r1, ip, lsr r3
   186f8:	andeq	r8, r1, ip, lsr r3
   186fc:	andeq	r8, r1, ip, lsr r3
   18700:	andeq	r8, r1, ip, lsr r3
   18704:	andeq	r8, r1, ip, lsr r3
   18708:	andeq	r8, r1, ip, lsr r3
   1870c:	andeq	r8, r1, ip, lsr r3
   18710:	andeq	r8, r1, ip, lsr r3
   18714:			; <UNDEFINED> instruction: 0x000188b8
   18718:	andeq	r8, r1, r0, lsr #4
   1871c:	andeq	r8, r1, r0, lsr #4
   18720:	muleq	r1, ip, r8
   18724:	andeq	r8, r1, r0, lsr #4
   18728:	muleq	r1, r0, r8
   1872c:	andeq	r8, r1, r0, lsr #4
   18730:	andeq	r8, r1, ip, ror r0
   18734:	andeq	r8, r1, r0, lsr #4
   18738:	andeq	r8, r1, r0, lsr #4
   1873c:	andeq	r8, r1, r0, lsr #4
   18740:	muleq	r1, r0, r8
   18744:	muleq	r1, r0, r8
   18748:	muleq	r1, r0, r8
   1874c:	muleq	r1, r0, r8
   18750:	muleq	r1, r0, r8
   18754:	muleq	r1, r0, r8
   18758:	muleq	r1, r0, r8
   1875c:	muleq	r1, r0, r8
   18760:	muleq	r1, r0, r8
   18764:	muleq	r1, r0, r8
   18768:	muleq	r1, r0, r8
   1876c:	muleq	r1, r0, r8
   18770:	muleq	r1, r0, r8
   18774:	muleq	r1, r0, r8
   18778:	muleq	r1, r0, r8
   1877c:	muleq	r1, r0, r8
   18780:	andeq	r8, r1, r0, lsr #4
   18784:	andeq	r8, r1, r0, lsr #4
   18788:	andeq	r8, r1, r0, lsr #4
   1878c:	andeq	r8, r1, r0, lsr #4
   18790:	andeq	r8, r1, r0, asr r0
   18794:	andeq	r8, r1, ip, lsr r3
   18798:	muleq	r1, r0, r8
   1879c:	muleq	r1, r0, r8
   187a0:	muleq	r1, r0, r8
   187a4:	muleq	r1, r0, r8
   187a8:	muleq	r1, r0, r8
   187ac:	muleq	r1, r0, r8
   187b0:	muleq	r1, r0, r8
   187b4:	muleq	r1, r0, r8
   187b8:	muleq	r1, r0, r8
   187bc:	muleq	r1, r0, r8
   187c0:	muleq	r1, r0, r8
   187c4:	muleq	r1, r0, r8
   187c8:	muleq	r1, r0, r8
   187cc:	muleq	r1, r0, r8
   187d0:	muleq	r1, r0, r8
   187d4:	muleq	r1, r0, r8
   187d8:	muleq	r1, r0, r8
   187dc:	muleq	r1, r0, r8
   187e0:	muleq	r1, r0, r8
   187e4:	muleq	r1, r0, r8
   187e8:	muleq	r1, r0, r8
   187ec:	muleq	r1, r0, r8
   187f0:	muleq	r1, r0, r8
   187f4:	muleq	r1, r0, r8
   187f8:	muleq	r1, r0, r8
   187fc:	muleq	r1, r0, r8
   18800:	andeq	r8, r1, r0, lsr #4
   18804:	strdeq	r7, [r1], -r8
   18808:	muleq	r1, r0, r8
   1880c:	andeq	r8, r1, r0, lsr #4
   18810:	muleq	r1, r0, r8
   18814:	andeq	r8, r1, r0, lsr #4
   18818:	muleq	r1, r0, r8
   1881c:	muleq	r1, r0, r8
   18820:	muleq	r1, r0, r8
   18824:	muleq	r1, r0, r8
   18828:	muleq	r1, r0, r8
   1882c:	muleq	r1, r0, r8
   18830:	muleq	r1, r0, r8
   18834:	muleq	r1, r0, r8
   18838:	muleq	r1, r0, r8
   1883c:	muleq	r1, r0, r8
   18840:	muleq	r1, r0, r8
   18844:	muleq	r1, r0, r8
   18848:	muleq	r1, r0, r8
   1884c:	muleq	r1, r0, r8
   18850:	muleq	r1, r0, r8
   18854:	muleq	r1, r0, r8
   18858:	muleq	r1, r0, r8
   1885c:	muleq	r1, r0, r8
   18860:	muleq	r1, r0, r8
   18864:	muleq	r1, r0, r8
   18868:	muleq	r1, r0, r8
   1886c:	muleq	r1, r0, r8
   18870:	muleq	r1, r0, r8
   18874:	muleq	r1, r0, r8
   18878:	muleq	r1, r0, r8
   1887c:	muleq	r1, r0, r8
   18880:	andeq	r7, r1, ip, lsl lr
   18884:	andeq	r8, r1, r0, lsr #4
   18888:	andeq	r7, r1, ip, lsl lr
   1888c:	muleq	r1, ip, r8
   18890:	mov	r6, r7
   18894:	mov	r7, #0
   18898:	b	18048 <__assert_fail@plt+0x6c64>
   1889c:	cmp	r9, #0
   188a0:	mov	r2, #0
   188a4:	beq	1830c <__assert_fail@plt+0x6f28>
   188a8:	mov	r6, #0
   188ac:	mov	r7, r2
   188b0:	mov	r3, r6
   188b4:	b	17e68 <__assert_fail@plt+0x6a84>
   188b8:	mov	r2, #0
   188bc:	b	18320 <__assert_fail@plt+0x6f3c>
   188c0:	mov	r7, #0
   188c4:	mov	r3, #118	; 0x76
   188c8:	b	1802c <__assert_fail@plt+0x6c48>
   188cc:	mov	r7, #0
   188d0:	mov	r3, #116	; 0x74
   188d4:	b	1815c <__assert_fail@plt+0x6d78>
   188d8:	ldr	r3, [sp, #44]	; 0x2c
   188dc:	b	17e90 <__assert_fail@plt+0x6aac>
   188e0:	ldr	r3, [sp, #44]	; 0x2c
   188e4:	cmp	r3, #0
   188e8:	bne	18d58 <__assert_fail@plt+0x7974>
   188ec:	add	r9, r9, #1
   188f0:	mov	r6, #0
   188f4:	ldr	r3, [sp, #48]	; 0x30
   188f8:	mov	r5, #92	; 0x5c
   188fc:	b	1811c <__assert_fail@plt+0x6d38>
   18900:	ldr	r3, [sp, #32]
   18904:	ldrb	r2, [r3, #1]
   18908:	adds	r2, r2, #0
   1890c:	movne	r2, #1
   18910:	b	17e38 <__assert_fail@plt+0x6a54>
   18914:	ldr	r3, [sp, #156]	; 0x9c
   18918:	ands	r3, r3, #4
   1891c:	beq	18944 <__assert_fail@plt+0x7560>
   18920:	ldr	r2, [sp, #28]
   18924:	add	r3, r9, #2
   18928:	cmp	r3, r2
   1892c:	bcs	18940 <__assert_fail@plt+0x755c>
   18930:	ldr	r2, [sp, #52]	; 0x34
   18934:	ldrb	r5, [r2, #1]
   18938:	cmp	r5, #63	; 0x3f
   1893c:	beq	18dbc <__assert_fail@plt+0x79d8>
   18940:	mov	r3, #0
   18944:	mov	r5, #63	; 0x3f
   18948:	mov	r6, r3
   1894c:	b	17e58 <__assert_fail@plt+0x6a74>
   18950:	ldr	r3, [sp, #44]	; 0x2c
   18954:	cmp	r3, #0
   18958:	bne	18d58 <__assert_fail@plt+0x7974>
   1895c:	mov	r6, r3
   18960:	mov	r5, #63	; 0x3f
   18964:	b	17e90 <__assert_fail@plt+0x6aac>
   18968:	ldr	r1, [sp, #28]
   1896c:	mov	r2, #0
   18970:	mov	r3, #0
   18974:	strd	r2, [sp, #104]	; 0x68
   18978:	cmn	r1, #1
   1897c:	bne	1898c <__assert_fail@plt+0x75a8>
   18980:	ldr	r0, [sp, #32]
   18984:	bl	11294 <strlen@plt>
   18988:	str	r0, [sp, #28]
   1898c:	str	r8, [sp, #76]	; 0x4c
   18990:	mov	r3, #0
   18994:	str	sl, [sp, #80]	; 0x50
   18998:	ldr	sl, [sp, #32]
   1899c:	str	r5, [sp, #84]	; 0x54
   189a0:	mov	r5, r3
   189a4:	ldr	r8, [sp, #44]	; 0x2c
   189a8:	str	r7, [sp, #88]	; 0x58
   189ac:	str	r4, [sp, #92]	; 0x5c
   189b0:	ldr	r2, [sp, #28]
   189b4:	add	r4, r9, r5
   189b8:	add	r3, sp, #104	; 0x68
   189bc:	add	r7, sl, r4
   189c0:	add	r0, sp, #100	; 0x64
   189c4:	mov	r1, r7
   189c8:	sub	r2, r2, r4
   189cc:	bl	1cce4 <__assert_fail@plt+0xb900>
   189d0:	subs	r1, r0, #0
   189d4:	beq	18a20 <__assert_fail@plt+0x763c>
   189d8:	cmn	r1, #1
   189dc:	beq	18d98 <__assert_fail@plt+0x79b4>
   189e0:	cmn	r1, #2
   189e4:	beq	18eb8 <__assert_fail@plt+0x7ad4>
   189e8:	cmp	fp, #2
   189ec:	movne	r3, #0
   189f0:	andeq	r3, r8, #1
   189f4:	cmp	r3, #0
   189f8:	bne	18b84 <__assert_fail@plt+0x77a0>
   189fc:	ldr	r0, [sp, #100]	; 0x64
   18a00:	add	r5, r5, r1
   18a04:	bl	111a4 <iswprint@plt>
   18a08:	cmp	r0, #0
   18a0c:	add	r0, sp, #104	; 0x68
   18a10:	moveq	r6, #0
   18a14:	bl	11144 <mbsinit@plt>
   18a18:	cmp	r0, #0
   18a1c:	beq	189b0 <__assert_fail@plt+0x75cc>
   18a20:	ldr	r3, [sp, #40]	; 0x28
   18a24:	mov	ip, r5
   18a28:	eor	r2, r6, #1
   18a2c:	ldr	r8, [sp, #76]	; 0x4c
   18a30:	ldr	sl, [sp, #80]	; 0x50
   18a34:	and	r2, r2, r3
   18a38:	ldr	r5, [sp, #84]	; 0x54
   18a3c:	ldr	r7, [sp, #88]	; 0x58
   18a40:	ldr	r4, [sp, #92]	; 0x5c
   18a44:	cmp	ip, #1
   18a48:	bls	18384 <__assert_fail@plt+0x6fa0>
   18a4c:	add	r1, ip, r9
   18a50:	mov	r0, #39	; 0x27
   18a54:	ldr	lr, [sp, #52]	; 0x34
   18a58:	mov	ip, #0
   18a5c:	str	r6, [sp, #52]	; 0x34
   18a60:	ldr	r6, [sp, #48]	; 0x30
   18a64:	b	18b20 <__assert_fail@plt+0x773c>
   18a68:	ldr	ip, [sp, #44]	; 0x2c
   18a6c:	sub	r3, fp, #2
   18a70:	clz	r3, r3
   18a74:	lsr	r3, r3, #5
   18a78:	cmp	ip, #0
   18a7c:	bne	18c90 <__assert_fail@plt+0x78ac>
   18a80:	eor	ip, r6, #1
   18a84:	ands	r3, r3, ip
   18a88:	beq	18ab8 <__assert_fail@plt+0x76d4>
   18a8c:	cmp	sl, r4
   18a90:	add	ip, r4, #1
   18a94:	strbhi	r0, [r8, r4]
   18a98:	cmp	sl, ip
   18a9c:	movhi	r6, #36	; 0x24
   18aa0:	strbhi	r6, [r8, ip]
   18aa4:	add	ip, r4, #2
   18aa8:	mov	r6, r3
   18aac:	cmp	sl, ip
   18ab0:	add	r4, r4, #3
   18ab4:	strbhi	r0, [r8, ip]
   18ab8:	cmp	sl, r4
   18abc:	movhi	r3, #92	; 0x5c
   18ac0:	strbhi	r3, [r8, r4]
   18ac4:	add	r3, r4, #1
   18ac8:	cmp	sl, r3
   18acc:	bls	18adc <__assert_fail@plt+0x76f8>
   18ad0:	lsr	ip, r5, #6
   18ad4:	add	ip, ip, #48	; 0x30
   18ad8:	strb	ip, [r8, r3]
   18adc:	add	r3, r4, #2
   18ae0:	cmp	sl, r3
   18ae4:	bls	18af4 <__assert_fail@plt+0x7710>
   18ae8:	ubfx	ip, r5, #3, #3
   18aec:	add	ip, ip, #48	; 0x30
   18af0:	strb	ip, [r8, r3]
   18af4:	add	r9, r9, #1
   18af8:	and	r5, r5, #7
   18afc:	cmp	r9, r1
   18b00:	add	r5, r5, #48	; 0x30
   18b04:	add	r4, r4, #3
   18b08:	bcs	18cbc <__assert_fail@plt+0x78d8>
   18b0c:	mov	ip, r2
   18b10:	cmp	sl, r4
   18b14:	strbhi	r5, [r8, r4]
   18b18:	add	r4, r4, #1
   18b1c:	ldrb	r5, [lr, #1]!
   18b20:	cmp	r2, #0
   18b24:	bne	18a68 <__assert_fail@plt+0x7684>
   18b28:	eor	r3, ip, #1
   18b2c:	cmp	r7, #0
   18b30:	and	r3, r3, r6
   18b34:	uxtb	r3, r3
   18b38:	beq	18b4c <__assert_fail@plt+0x7768>
   18b3c:	cmp	sl, r4
   18b40:	movhi	r7, #92	; 0x5c
   18b44:	strbhi	r7, [r8, r4]
   18b48:	add	r4, r4, #1
   18b4c:	add	r9, r9, #1
   18b50:	cmp	r9, r1
   18b54:	bcs	18ca4 <__assert_fail@plt+0x78c0>
   18b58:	cmp	r3, #0
   18b5c:	beq	18cdc <__assert_fail@plt+0x78f8>
   18b60:	cmp	sl, r4
   18b64:	add	r3, r4, #1
   18b68:	mov	r7, #0
   18b6c:	strbhi	r0, [r8, r4]
   18b70:	cmp	sl, r3
   18b74:	add	r4, r4, #2
   18b78:	mov	r6, r7
   18b7c:	strbhi	r0, [r8, r3]
   18b80:	b	18b10 <__assert_fail@plt+0x772c>
   18b84:	cmp	r1, #1
   18b88:	beq	189fc <__assert_fail@plt+0x7618>
   18b8c:	add	r2, r4, #1
   18b90:	add	r3, sl, r1
   18b94:	add	r2, sl, r2
   18b98:	add	r4, r3, r4
   18b9c:	ldrb	r3, [r2], #1
   18ba0:	sub	r3, r3, #91	; 0x5b
   18ba4:	cmp	r3, #33	; 0x21
   18ba8:	ldrls	pc, [pc, r3, lsl #2]
   18bac:	b	18c38 <__assert_fail@plt+0x7854>
   18bb0:	andeq	r8, r1, r4, asr #24
   18bb4:	andeq	r8, r1, r4, asr #24
   18bb8:	andeq	r8, r1, r8, lsr ip
   18bbc:	andeq	r8, r1, r4, asr #24
   18bc0:	andeq	r8, r1, r8, lsr ip
   18bc4:	andeq	r8, r1, r4, asr #24
   18bc8:	andeq	r8, r1, r8, lsr ip
   18bcc:	andeq	r8, r1, r8, lsr ip
   18bd0:	andeq	r8, r1, r8, lsr ip
   18bd4:	andeq	r8, r1, r8, lsr ip
   18bd8:	andeq	r8, r1, r8, lsr ip
   18bdc:	andeq	r8, r1, r8, lsr ip
   18be0:	andeq	r8, r1, r8, lsr ip
   18be4:	andeq	r8, r1, r8, lsr ip
   18be8:	andeq	r8, r1, r8, lsr ip
   18bec:	andeq	r8, r1, r8, lsr ip
   18bf0:	andeq	r8, r1, r8, lsr ip
   18bf4:	andeq	r8, r1, r8, lsr ip
   18bf8:	andeq	r8, r1, r8, lsr ip
   18bfc:	andeq	r8, r1, r8, lsr ip
   18c00:	andeq	r8, r1, r8, lsr ip
   18c04:	andeq	r8, r1, r8, lsr ip
   18c08:	andeq	r8, r1, r8, lsr ip
   18c0c:	andeq	r8, r1, r8, lsr ip
   18c10:	andeq	r8, r1, r8, lsr ip
   18c14:	andeq	r8, r1, r8, lsr ip
   18c18:	andeq	r8, r1, r8, lsr ip
   18c1c:	andeq	r8, r1, r8, lsr ip
   18c20:	andeq	r8, r1, r8, lsr ip
   18c24:	andeq	r8, r1, r8, lsr ip
   18c28:	andeq	r8, r1, r8, lsr ip
   18c2c:	andeq	r8, r1, r8, lsr ip
   18c30:	andeq	r8, r1, r8, lsr ip
   18c34:	andeq	r8, r1, r4, asr #24
   18c38:	cmp	r4, r2
   18c3c:	bne	18b9c <__assert_fail@plt+0x77b8>
   18c40:	b	189fc <__assert_fail@plt+0x7618>
   18c44:	mov	r8, #2
   18c48:	ldr	fp, [sp, #76]	; 0x4c
   18c4c:	ldr	sl, [sp, #80]	; 0x50
   18c50:	b	1817c <__assert_fail@plt+0x6d98>
   18c54:	ldr	r2, [sp, #40]	; 0x28
   18c58:	str	fp, [sp, #152]	; 0x98
   18c5c:	mov	fp, r8
   18c60:	ldr	r8, [sp, #152]	; 0x98
   18c64:	and	r2, r2, r3
   18c68:	str	r2, [sp, #40]	; 0x28
   18c6c:	b	1817c <__assert_fail@plt+0x6d98>
   18c70:	cmp	sl, r4
   18c74:	movls	r0, r4
   18c78:	bls	182ac <__assert_fail@plt+0x6ec8>
   18c7c:	ldr	r3, [sp, #48]	; 0x30
   18c80:	b	1829c <__assert_fail@plt+0x6eb8>
   18c84:	str	sl, [sp, #72]	; 0x48
   18c88:	ldr	sl, [sp, #44]	; 0x2c
   18c8c:	b	180ec <__assert_fail@plt+0x6d08>
   18c90:	str	r3, [sp, #40]	; 0x28
   18c94:	str	fp, [sp, #152]	; 0x98
   18c98:	mov	fp, r8
   18c9c:	ldr	r8, [sp, #152]	; 0x98
   18ca0:	b	1817c <__assert_fail@plt+0x6d98>
   18ca4:	str	r6, [sp, #48]	; 0x30
   18ca8:	ldr	r6, [sp, #52]	; 0x34
   18cac:	b	1811c <__assert_fail@plt+0x6d38>
   18cb0:	mov	r6, #0
   18cb4:	ldr	r2, [sp, #40]	; 0x28
   18cb8:	b	18a4c <__assert_fail@plt+0x7668>
   18cbc:	str	r6, [sp, #48]	; 0x30
   18cc0:	ldr	r6, [sp, #52]	; 0x34
   18cc4:	b	17f08 <__assert_fail@plt+0x6b24>
   18cc8:	add	r4, r4, #4
   18ccc:	mov	r6, #0
   18cd0:	str	r3, [sp, #48]	; 0x30
   18cd4:	mov	r5, #48	; 0x30
   18cd8:	b	17e90 <__assert_fail@plt+0x6aac>
   18cdc:	mov	r7, r3
   18ce0:	b	18b10 <__assert_fail@plt+0x772c>
   18ce4:	mov	r3, #1
   18ce8:	movw	r2, #59664	; 0xe910
   18cec:	movt	r2, #1
   18cf0:	mov	r4, r3
   18cf4:	str	r3, [sp, #36]	; 0x24
   18cf8:	str	r3, [sp, #40]	; 0x28
   18cfc:	str	sl, [sp, #44]	; 0x2c
   18d00:	str	sl, [sp, #48]	; 0x30
   18d04:	str	r3, [sp, #56]	; 0x38
   18d08:	str	r2, [sp, #60]	; 0x3c
   18d0c:	str	sl, [sp, #68]	; 0x44
   18d10:	str	sl, [sp, #72]	; 0x48
   18d14:	b	179b8 <__assert_fail@plt+0x65d4>
   18d18:	mov	r3, r6
   18d1c:	mov	r5, #48	; 0x30
   18d20:	mov	r6, #0
   18d24:	b	17e90 <__assert_fail@plt+0x6aac>
   18d28:	mov	r5, r3
   18d2c:	b	18208 <__assert_fail@plt+0x6e24>
   18d30:	cmp	sl, r4
   18d34:	mov	r5, #48	; 0x30
   18d38:	movhi	r3, #48	; 0x30
   18d3c:	strbhi	r3, [r8, r4]
   18d40:	add	r3, r0, #2
   18d44:	add	r4, r0, #3
   18d48:	cmp	sl, r3
   18d4c:	movhi	r1, #48	; 0x30
   18d50:	strbhi	r1, [r8, r3]
   18d54:	b	182e0 <__assert_fail@plt+0x6efc>
   18d58:	str	fp, [sp, #152]	; 0x98
   18d5c:	mov	fp, r8
   18d60:	ldr	r8, [sp, #152]	; 0x98
   18d64:	b	1817c <__assert_fail@plt+0x6d98>
   18d68:	ldr	r3, [sp, #164]	; 0xa4
   18d6c:	ldrb	r3, [r3]
   18d70:	cmp	r3, #0
   18d74:	beq	17988 <__assert_fail@plt+0x65a4>
   18d78:	ldr	r2, [sp, #164]	; 0xa4
   18d7c:	cmp	sl, r4
   18d80:	strbhi	r3, [fp, r4]
   18d84:	add	r4, r4, #1
   18d88:	ldrb	r3, [r2, #1]!
   18d8c:	cmp	r3, #0
   18d90:	bne	18d7c <__assert_fail@plt+0x7998>
   18d94:	b	17988 <__assert_fail@plt+0x65a4>
   18d98:	mov	ip, r5
   18d9c:	mov	r6, #0
   18da0:	ldr	r2, [sp, #40]	; 0x28
   18da4:	ldr	r8, [sp, #76]	; 0x4c
   18da8:	ldr	sl, [sp, #80]	; 0x50
   18dac:	ldr	r5, [sp, #84]	; 0x54
   18db0:	ldr	r7, [sp, #88]	; 0x58
   18db4:	ldr	r4, [sp, #92]	; 0x5c
   18db8:	b	18a44 <__assert_fail@plt+0x7660>
   18dbc:	ldr	r2, [sp, #32]
   18dc0:	ldrb	r1, [r2, r3]
   18dc4:	sub	r2, r1, #33	; 0x21
   18dc8:	cmp	r2, #29
   18dcc:	ldrls	pc, [pc, r2, lsl #2]
   18dd0:	b	18eac <__assert_fail@plt+0x7ac8>
   18dd4:	andeq	r8, r1, ip, asr #28
   18dd8:	andeq	r8, r1, ip, lsr #29
   18ddc:	andeq	r8, r1, ip, lsr #29
   18de0:	andeq	r8, r1, ip, lsr #29
   18de4:	andeq	r8, r1, ip, lsr #29
   18de8:	andeq	r8, r1, ip, lsr #29
   18dec:	andeq	r8, r1, ip, asr #28
   18df0:	andeq	r8, r1, ip, asr #28
   18df4:	andeq	r8, r1, ip, asr #28
   18df8:	andeq	r8, r1, ip, lsr #29
   18dfc:	andeq	r8, r1, ip, lsr #29
   18e00:	andeq	r8, r1, ip, lsr #29
   18e04:	andeq	r8, r1, ip, asr #28
   18e08:	andeq	r8, r1, ip, lsr #29
   18e0c:	andeq	r8, r1, ip, asr #28
   18e10:	andeq	r8, r1, ip, lsr #29
   18e14:	andeq	r8, r1, ip, lsr #29
   18e18:	andeq	r8, r1, ip, lsr #29
   18e1c:	andeq	r8, r1, ip, lsr #29
   18e20:	andeq	r8, r1, ip, lsr #29
   18e24:	andeq	r8, r1, ip, lsr #29
   18e28:	andeq	r8, r1, ip, lsr #29
   18e2c:	andeq	r8, r1, ip, lsr #29
   18e30:	andeq	r8, r1, ip, lsr #29
   18e34:	andeq	r8, r1, ip, lsr #29
   18e38:	andeq	r8, r1, ip, lsr #29
   18e3c:	andeq	r8, r1, ip, lsr #29
   18e40:	andeq	r8, r1, ip, asr #28
   18e44:	andeq	r8, r1, ip, asr #28
   18e48:	andeq	r8, r1, ip, asr #28
   18e4c:	ldr	r2, [sp, #44]	; 0x2c
   18e50:	cmp	r2, #0
   18e54:	bne	18fb0 <__assert_fail@plt+0x7bcc>
   18e58:	cmp	sl, r4
   18e5c:	mov	r5, r1
   18e60:	movhi	r2, #63	; 0x3f
   18e64:	mov	r9, r3
   18e68:	strbhi	r2, [r8, r4]
   18e6c:	add	r2, r4, #1
   18e70:	cmp	sl, r2
   18e74:	movhi	r0, #34	; 0x22
   18e78:	strbhi	r0, [r8, r2]
   18e7c:	add	r2, r4, #2
   18e80:	cmp	sl, r2
   18e84:	movhi	r0, #34	; 0x22
   18e88:	strbhi	r0, [r8, r2]
   18e8c:	add	r2, r4, #3
   18e90:	add	r4, r4, #4
   18e94:	cmp	sl, r2
   18e98:	movhi	r0, #63	; 0x3f
   18e9c:	strbhi	r0, [r8, r2]
   18ea0:	mov	r2, #0
   18ea4:	mov	r6, r2
   18ea8:	b	182e0 <__assert_fail@plt+0x6efc>
   18eac:	mov	r3, #0
   18eb0:	mov	r6, r3
   18eb4:	b	17e58 <__assert_fail@plt+0x6a74>
   18eb8:	ldr	r0, [sp, #28]
   18ebc:	mov	r1, r4
   18ec0:	mov	r2, r7
   18ec4:	mov	r3, r5
   18ec8:	mov	ip, r5
   18ecc:	ldr	r8, [sp, #76]	; 0x4c
   18ed0:	ldr	sl, [sp, #80]	; 0x50
   18ed4:	cmp	r1, r0
   18ed8:	ldr	r5, [sp, #84]	; 0x54
   18edc:	ldr	r7, [sp, #88]	; 0x58
   18ee0:	ldr	r4, [sp, #92]	; 0x5c
   18ee4:	bcs	18f18 <__assert_fail@plt+0x7b34>
   18ee8:	ldrb	r6, [r2]
   18eec:	cmp	r6, #0
   18ef0:	bne	18f04 <__assert_fail@plt+0x7b20>
   18ef4:	b	19038 <__assert_fail@plt+0x7c54>
   18ef8:	ldrb	r6, [r2, #1]!
   18efc:	cmp	r6, #0
   18f00:	beq	18fc0 <__assert_fail@plt+0x7bdc>
   18f04:	add	r3, r3, #1
   18f08:	add	r1, r9, r3
   18f0c:	cmp	r1, r0
   18f10:	bcc	18ef8 <__assert_fail@plt+0x7b14>
   18f14:	mov	ip, r3
   18f18:	mov	r6, #0
   18f1c:	ldr	r2, [sp, #40]	; 0x28
   18f20:	b	18a44 <__assert_fail@plt+0x7660>
   18f24:	mov	r3, #1
   18f28:	mov	r2, #0
   18f2c:	mov	r4, r2
   18f30:	str	r3, [sp, #36]	; 0x24
   18f34:	str	r3, [sp, #40]	; 0x28
   18f38:	str	r3, [sp, #44]	; 0x2c
   18f3c:	str	r2, [sp, #48]	; 0x30
   18f40:	str	r3, [sp, #56]	; 0x38
   18f44:	movw	r3, #59664	; 0xe910
   18f48:	movt	r3, #1
   18f4c:	str	r3, [sp, #60]	; 0x3c
   18f50:	str	r2, [sp, #68]	; 0x44
   18f54:	str	r2, [sp, #72]	; 0x48
   18f58:	b	179b8 <__assert_fail@plt+0x65d4>
   18f5c:	mov	r2, r3
   18f60:	ldr	r3, [sp, #60]	; 0x3c
   18f64:	cmp	r3, #0
   18f68:	moveq	r2, #0
   18f6c:	andne	r2, r2, #1
   18f70:	cmp	r2, #0
   18f74:	beq	18fa0 <__assert_fail@plt+0x7bbc>
   18f78:	mov	r2, r3
   18f7c:	ldrb	r3, [r3]
   18f80:	cmp	r3, #0
   18f84:	beq	18fa0 <__assert_fail@plt+0x7bbc>
   18f88:	cmp	sl, r4
   18f8c:	strbhi	r3, [fp, r4]
   18f90:	add	r4, r4, #1
   18f94:	ldrb	r3, [r2, #1]!
   18f98:	cmp	r3, #0
   18f9c:	bne	18f88 <__assert_fail@plt+0x7ba4>
   18fa0:	cmp	sl, r4
   18fa4:	movhi	r3, #0
   18fa8:	strbhi	r3, [fp, r4]
   18fac:	b	181c0 <__assert_fail@plt+0x6ddc>
   18fb0:	str	fp, [sp, #152]	; 0x98
   18fb4:	mov	fp, r8
   18fb8:	ldr	r8, [sp, #152]	; 0x98
   18fbc:	b	18188 <__assert_fail@plt+0x6da4>
   18fc0:	mov	ip, r3
   18fc4:	ldr	r2, [sp, #40]	; 0x28
   18fc8:	b	18a44 <__assert_fail@plt+0x7660>
   18fcc:	str	fp, [sp, #152]	; 0x98
   18fd0:	mov	fp, r8
   18fd4:	ldr	r8, [sp, #152]	; 0x98
   18fd8:	sub	r3, r8, #2
   18fdc:	clz	r3, r3
   18fe0:	lsr	r3, r3, #5
   18fe4:	str	r3, [sp, #40]	; 0x28
   18fe8:	b	1817c <__assert_fail@plt+0x6d98>
   18fec:	mov	ip, #5
   18ff0:	ldr	r3, [sp, #28]
   18ff4:	str	ip, [sp]
   18ff8:	ldr	r2, [sp, #156]	; 0x9c
   18ffc:	ldr	ip, [sp, #164]	; 0xa4
   19000:	ldr	r0, [sp, #160]	; 0xa0
   19004:	str	r2, [sp, #4]
   19008:	ldr	r2, [sp, #32]
   1900c:	ldr	r1, [sp, #72]	; 0x48
   19010:	str	ip, [sp, #12]
   19014:	ldr	ip, [sp, #168]	; 0xa8
   19018:	str	r0, [sp, #8]
   1901c:	mov	r0, fp
   19020:	str	ip, [sp, #16]
   19024:	bl	178d0 <__assert_fail@plt+0x64ec>
   19028:	mov	r4, r0
   1902c:	b	181c0 <__assert_fail@plt+0x6ddc>
   19030:	mov	r8, #2
   19034:	b	1817c <__assert_fail@plt+0x6d98>
   19038:	ldr	r2, [sp, #40]	; 0x28
   1903c:	b	18a44 <__assert_fail@plt+0x7660>
   19040:	mov	r3, #0
   19044:	mov	r2, #1
   19048:	mov	r4, r3
   1904c:	strd	r2, [sp, #36]	; 0x24
   19050:	strd	r2, [sp, #44]	; 0x2c
   19054:	str	r2, [sp, #56]	; 0x38
   19058:	str	r3, [sp, #68]	; 0x44
   1905c:	str	r3, [sp, #72]	; 0x48
   19060:	movw	r3, #59684	; 0xe924
   19064:	movt	r3, #1
   19068:	str	r3, [sp, #60]	; 0x3c
   1906c:	b	179b8 <__assert_fail@plt+0x65d4>
   19070:	mov	r3, #0
   19074:	mov	r1, #1
   19078:	mov	r2, r3
   1907c:	str	r1, [sp, #36]	; 0x24
   19080:	str	r3, [sp, #48]	; 0x30
   19084:	str	sl, [sp, #72]	; 0x48
   19088:	b	17fc0 <__assert_fail@plt+0x6bdc>
   1908c:	bl	113cc <abort@plt>
   19090:	strd	r4, [sp, #-36]!	; 0xffffffdc
   19094:	mov	r4, r0
   19098:	mov	r5, r3
   1909c:	strd	r6, [sp, #8]
   190a0:	movw	r7, #61832	; 0xf188
   190a4:	movt	r7, #2
   190a8:	strd	r8, [sp, #16]
   190ac:	strd	sl, [sp, #24]
   190b0:	mov	sl, r1
   190b4:	mov	fp, r2
   190b8:	str	lr, [sp, #32]
   190bc:	sub	sp, sp, #60	; 0x3c
   190c0:	bl	112c4 <__errno_location@plt>
   190c4:	mov	r8, r0
   190c8:	cmn	r4, #-2147483647	; 0x80000001
   190cc:	ldr	r6, [r7]
   190d0:	movne	r0, #0
   190d4:	moveq	r0, #1
   190d8:	ldr	r3, [r8]
   190dc:	orrs	r0, r0, r4, lsr #31
   190e0:	str	r3, [sp, #28]
   190e4:	bne	19274 <__assert_fail@plt+0x7e90>
   190e8:	ldr	r3, [r7, #4]
   190ec:	cmp	r3, r4
   190f0:	bgt	19150 <__assert_fail@plt+0x7d6c>
   190f4:	add	r1, r7, #8
   190f8:	sub	r2, r4, r3
   190fc:	str	r3, [sp, #52]	; 0x34
   19100:	cmp	r6, r1
   19104:	add	r2, r2, #1
   19108:	beq	1924c <__assert_fail@plt+0x7e68>
   1910c:	mov	r1, #8
   19110:	mov	r0, r6
   19114:	mvn	r3, #-2147483648	; 0x80000000
   19118:	str	r1, [sp]
   1911c:	add	r1, sp, #52	; 0x34
   19120:	bl	1a6f4 <__assert_fail@plt+0x9310>
   19124:	mov	r6, r0
   19128:	str	r0, [r7]
   1912c:	ldr	r0, [r7, #4]
   19130:	mov	r1, #0
   19134:	ldr	r2, [sp, #52]	; 0x34
   19138:	sub	r2, r2, r0
   1913c:	add	r0, r6, r0, lsl #3
   19140:	lsl	r2, r2, #3
   19144:	bl	112e8 <memset@plt>
   19148:	ldr	r3, [sp, #52]	; 0x34
   1914c:	str	r3, [r7, #4]
   19150:	ldr	r1, [r5, #4]
   19154:	add	r0, r6, r4, lsl #3
   19158:	add	ip, r5, #8
   1915c:	mov	r3, fp
   19160:	mov	r2, sl
   19164:	ldr	r7, [r0, #4]
   19168:	str	r0, [sp, #36]	; 0x24
   1916c:	str	ip, [sp, #40]	; 0x28
   19170:	orr	r0, r1, #1
   19174:	ldr	r9, [r6, r4, lsl #3]
   19178:	str	ip, [sp, #8]
   1917c:	ldr	lr, [r5, #44]	; 0x2c
   19180:	str	r0, [sp, #4]
   19184:	ldr	ip, [r5]
   19188:	mov	r1, r9
   1918c:	str	ip, [sp, #32]
   19190:	ldr	ip, [r5, #40]	; 0x28
   19194:	str	ip, [sp, #12]
   19198:	ldr	ip, [sp, #32]
   1919c:	str	lr, [sp, #16]
   191a0:	str	r0, [sp, #44]	; 0x2c
   191a4:	mov	r0, r7
   191a8:	str	ip, [sp]
   191ac:	bl	178d0 <__assert_fail@plt+0x64ec>
   191b0:	cmp	r9, r0
   191b4:	bhi	19224 <__assert_fail@plt+0x7e40>
   191b8:	add	r9, r0, #1
   191bc:	movw	r3, #62136	; 0xf2b8
   191c0:	movt	r3, #2
   191c4:	cmp	r7, r3
   191c8:	str	r9, [r6, r4, lsl #3]
   191cc:	beq	191d8 <__assert_fail@plt+0x7df4>
   191d0:	mov	r0, r7
   191d4:	bl	152ac <__assert_fail@plt+0x3ec8>
   191d8:	mov	r0, r9
   191dc:	bl	1a544 <__assert_fail@plt+0x9160>
   191e0:	ldr	ip, [r5]
   191e4:	mov	r3, fp
   191e8:	mov	r2, sl
   191ec:	mov	r1, r9
   191f0:	mov	r7, r0
   191f4:	ldr	lr, [sp, #36]	; 0x24
   191f8:	ldr	r4, [r5, #40]	; 0x28
   191fc:	str	r0, [lr, #4]
   19200:	ldr	lr, [r5, #44]	; 0x2c
   19204:	str	ip, [sp]
   19208:	ldr	ip, [sp, #44]	; 0x2c
   1920c:	str	ip, [sp, #4]
   19210:	ldr	ip, [sp, #40]	; 0x28
   19214:	str	r4, [sp, #12]
   19218:	str	lr, [sp, #16]
   1921c:	str	ip, [sp, #8]
   19220:	bl	178d0 <__assert_fail@plt+0x64ec>
   19224:	ldr	r3, [sp, #28]
   19228:	mov	r0, r7
   1922c:	str	r3, [r8]
   19230:	add	sp, sp, #60	; 0x3c
   19234:	ldrd	r4, [sp]
   19238:	ldrd	r6, [sp, #8]
   1923c:	ldrd	r8, [sp, #16]
   19240:	ldrd	sl, [sp, #24]
   19244:	add	sp, sp, #32
   19248:	pop	{pc}		; (ldr pc, [sp], #4)
   1924c:	mov	r1, #8
   19250:	mvn	r3, #-2147483648	; 0x80000000
   19254:	str	r1, [sp]
   19258:	add	r1, sp, #52	; 0x34
   1925c:	bl	1a6f4 <__assert_fail@plt+0x9310>
   19260:	ldrd	r2, [r7, #8]
   19264:	mov	r6, r0
   19268:	str	r0, [r7]
   1926c:	strd	r2, [r0]
   19270:	b	1912c <__assert_fail@plt+0x7d48>
   19274:	bl	113cc <abort@plt>
   19278:	strd	r4, [sp, #-16]!
   1927c:	mov	r5, r0
   19280:	str	r6, [sp, #8]
   19284:	str	lr, [sp, #12]
   19288:	bl	112c4 <__errno_location@plt>
   1928c:	mov	r4, r0
   19290:	cmp	r5, #0
   19294:	ldr	r0, [pc, #32]	; 192bc <__assert_fail@plt+0x7ed8>
   19298:	mov	r1, #48	; 0x30
   1929c:	movne	r0, r5
   192a0:	ldr	r6, [r4]
   192a4:	bl	1a86c <__assert_fail@plt+0x9488>
   192a8:	str	r6, [r4]
   192ac:	ldrd	r4, [sp]
   192b0:	ldr	r6, [sp, #8]
   192b4:	add	sp, sp, #12
   192b8:	pop	{pc}		; (ldr pc, [sp], #4)
   192bc:			; <UNDEFINED> instruction: 0x0002f3b8
   192c0:	ldr	r3, [pc, #12]	; 192d4 <__assert_fail@plt+0x7ef0>
   192c4:	cmp	r0, #0
   192c8:	moveq	r0, r3
   192cc:	ldr	r0, [r0]
   192d0:	bx	lr
   192d4:			; <UNDEFINED> instruction: 0x0002f3b8
   192d8:	ldr	r3, [pc, #12]	; 192ec <__assert_fail@plt+0x7f08>
   192dc:	cmp	r0, #0
   192e0:	moveq	r0, r3
   192e4:	str	r1, [r0]
   192e8:	bx	lr
   192ec:			; <UNDEFINED> instruction: 0x0002f3b8
   192f0:	ldr	r3, [pc, #52]	; 1932c <__assert_fail@plt+0x7f48>
   192f4:	cmp	r0, #0
   192f8:	push	{lr}		; (str lr, [sp, #-4]!)
   192fc:	lsr	lr, r1, #5
   19300:	and	r1, r1, #31
   19304:	moveq	r0, r3
   19308:	add	r3, r0, #8
   1930c:	ldr	ip, [r3, lr, lsl #2]
   19310:	lsr	r0, ip, r1
   19314:	eor	r2, r2, r0
   19318:	and	r0, r0, #1
   1931c:	and	r2, r2, #1
   19320:	eor	r1, ip, r2, lsl r1
   19324:	str	r1, [r3, lr, lsl #2]
   19328:	pop	{pc}		; (ldr pc, [sp], #4)
   1932c:			; <UNDEFINED> instruction: 0x0002f3b8
   19330:	ldr	r3, [pc, #16]	; 19348 <__assert_fail@plt+0x7f64>
   19334:	cmp	r0, #0
   19338:	movne	r3, r0
   1933c:	ldr	r0, [r3, #4]
   19340:	str	r1, [r3, #4]
   19344:	bx	lr
   19348:			; <UNDEFINED> instruction: 0x0002f3b8
   1934c:	ldr	r3, [pc, #48]	; 19384 <__assert_fail@plt+0x7fa0>
   19350:	cmp	r0, #0
   19354:	mov	ip, #10
   19358:	moveq	r0, r3
   1935c:	cmp	r2, #0
   19360:	cmpne	r1, #0
   19364:	str	ip, [r0]
   19368:	beq	19378 <__assert_fail@plt+0x7f94>
   1936c:	str	r1, [r0, #40]	; 0x28
   19370:	str	r2, [r0, #44]	; 0x2c
   19374:	bx	lr
   19378:	str	r4, [sp, #-8]!
   1937c:	str	lr, [sp, #4]
   19380:	bl	113cc <abort@plt>
   19384:			; <UNDEFINED> instruction: 0x0002f3b8
   19388:	strd	r4, [sp, #-28]!	; 0xffffffe4
   1938c:	strd	r6, [sp, #8]
   19390:	mov	r7, r0
   19394:	mov	r6, r1
   19398:	strd	r8, [sp, #16]
   1939c:	mov	r8, r2
   193a0:	mov	r9, r3
   193a4:	str	lr, [sp, #24]
   193a8:	sub	sp, sp, #28
   193ac:	ldr	r4, [sp, #56]	; 0x38
   193b0:	ldr	ip, [pc, #104]	; 19420 <__assert_fail@plt+0x803c>
   193b4:	cmp	r4, #0
   193b8:	moveq	r4, ip
   193bc:	bl	112c4 <__errno_location@plt>
   193c0:	ldr	ip, [r4, #44]	; 0x2c
   193c4:	mov	r5, r0
   193c8:	mov	r1, r6
   193cc:	add	lr, r4, #8
   193d0:	mov	r3, r9
   193d4:	ldr	r6, [r5]
   193d8:	mov	r2, r8
   193dc:	mov	r0, r7
   193e0:	str	ip, [sp, #16]
   193e4:	ldr	ip, [r4, #40]	; 0x28
   193e8:	str	lr, [sp, #8]
   193ec:	str	ip, [sp, #12]
   193f0:	ldr	ip, [r4, #4]
   193f4:	str	ip, [sp, #4]
   193f8:	ldr	ip, [r4]
   193fc:	str	ip, [sp]
   19400:	bl	178d0 <__assert_fail@plt+0x64ec>
   19404:	str	r6, [r5]
   19408:	add	sp, sp, #28
   1940c:	ldrd	r4, [sp]
   19410:	ldrd	r6, [sp, #8]
   19414:	ldrd	r8, [sp, #16]
   19418:	add	sp, sp, #24
   1941c:	pop	{pc}		; (ldr pc, [sp], #4)
   19420:			; <UNDEFINED> instruction: 0x0002f3b8
   19424:	strd	r4, [sp, #-36]!	; 0xffffffdc
   19428:	cmp	r3, #0
   1942c:	ldr	r4, [pc, #220]	; 19510 <__assert_fail@plt+0x812c>
   19430:	movne	r4, r3
   19434:	strd	r6, [sp, #8]
   19438:	mov	r6, r2
   1943c:	strd	r8, [sp, #16]
   19440:	mov	r9, r0
   19444:	strd	sl, [sp, #24]
   19448:	mov	sl, r1
   1944c:	str	lr, [sp, #32]
   19450:	sub	sp, sp, #44	; 0x2c
   19454:	bl	112c4 <__errno_location@plt>
   19458:	ldr	r5, [r4, #4]
   1945c:	mov	r7, r0
   19460:	mov	r1, #0
   19464:	add	r8, r4, #8
   19468:	mov	r3, sl
   1946c:	ldr	ip, [r4, #44]	; 0x2c
   19470:	mov	r2, r9
   19474:	mov	r0, r1
   19478:	ldr	lr, [r7]
   1947c:	cmp	r6, r1
   19480:	orreq	r5, r5, #1
   19484:	str	ip, [sp, #16]
   19488:	ldr	ip, [r4, #40]	; 0x28
   1948c:	stmib	sp, {r5, r8, ip}
   19490:	ldr	ip, [r4]
   19494:	str	lr, [sp, #28]
   19498:	str	ip, [sp]
   1949c:	bl	178d0 <__assert_fail@plt+0x64ec>
   194a0:	add	r1, r0, #1
   194a4:	mov	fp, r0
   194a8:	mov	r0, r1
   194ac:	str	r1, [sp, #36]	; 0x24
   194b0:	bl	1a544 <__assert_fail@plt+0x9160>
   194b4:	ldr	ip, [r4, #44]	; 0x2c
   194b8:	mov	r3, sl
   194bc:	mov	r2, r9
   194c0:	ldr	r1, [sp, #36]	; 0x24
   194c4:	str	ip, [sp, #16]
   194c8:	ldr	ip, [r4, #40]	; 0x28
   194cc:	str	r0, [sp, #32]
   194d0:	stmib	sp, {r5, r8, ip}
   194d4:	ldr	ip, [r4]
   194d8:	str	ip, [sp]
   194dc:	bl	178d0 <__assert_fail@plt+0x64ec>
   194e0:	ldr	lr, [sp, #28]
   194e4:	cmp	r6, #0
   194e8:	ldr	r0, [sp, #32]
   194ec:	str	lr, [r7]
   194f0:	strne	fp, [r6]
   194f4:	add	sp, sp, #44	; 0x2c
   194f8:	ldrd	r4, [sp]
   194fc:	ldrd	r6, [sp, #8]
   19500:	ldrd	r8, [sp, #16]
   19504:	ldrd	sl, [sp, #24]
   19508:	add	sp, sp, #32
   1950c:	pop	{pc}		; (ldr pc, [sp], #4)
   19510:			; <UNDEFINED> instruction: 0x0002f3b8
   19514:	mov	r3, r2
   19518:	mov	r2, #0
   1951c:	b	19424 <__assert_fail@plt+0x8040>
   19520:	strd	r4, [sp, #-24]!	; 0xffffffe8
   19524:	movw	r5, #61832	; 0xf188
   19528:	movt	r5, #2
   1952c:	ldr	r3, [r5, #4]
   19530:	strd	r6, [sp, #8]
   19534:	str	r8, [sp, #16]
   19538:	str	lr, [sp, #20]
   1953c:	ldr	r7, [r5]
   19540:	cmp	r3, #1
   19544:	ble	19568 <__assert_fail@plt+0x8184>
   19548:	mov	r4, #1
   1954c:	add	r6, r7, #4
   19550:	ldr	r0, [r6, r4, lsl #3]
   19554:	add	r4, r4, #1
   19558:	bl	152ac <__assert_fail@plt+0x3ec8>
   1955c:	ldr	r3, [r5, #4]
   19560:	cmp	r3, r4
   19564:	bgt	19550 <__assert_fail@plt+0x816c>
   19568:	ldr	r0, [r7, #4]
   1956c:	movw	r4, #62136	; 0xf2b8
   19570:	movt	r4, #2
   19574:	cmp	r0, r4
   19578:	beq	1958c <__assert_fail@plt+0x81a8>
   1957c:	bl	152ac <__assert_fail@plt+0x3ec8>
   19580:	mov	r3, #256	; 0x100
   19584:	str	r3, [r5, #8]
   19588:	str	r4, [r5, #12]
   1958c:	ldr	r4, [pc, #44]	; 195c0 <__assert_fail@plt+0x81dc>
   19590:	cmp	r7, r4
   19594:	beq	195a4 <__assert_fail@plt+0x81c0>
   19598:	mov	r0, r7
   1959c:	bl	152ac <__assert_fail@plt+0x3ec8>
   195a0:	str	r4, [r5]
   195a4:	mov	r3, #1
   195a8:	ldrd	r6, [sp, #8]
   195ac:	str	r3, [r5, #4]
   195b0:	ldrd	r4, [sp]
   195b4:	ldr	r8, [sp, #16]
   195b8:	add	sp, sp, #20
   195bc:	pop	{pc}		; (ldr pc, [sp], #4)
   195c0:	muleq	r2, r0, r1
   195c4:	ldr	r3, [pc, #4]	; 195d0 <__assert_fail@plt+0x81ec>
   195c8:	mvn	r2, #0
   195cc:	b	19090 <__assert_fail@plt+0x7cac>
   195d0:			; <UNDEFINED> instruction: 0x0002f3b8
   195d4:	ldr	r3, [pc]	; 195dc <__assert_fail@plt+0x81f8>
   195d8:	b	19090 <__assert_fail@plt+0x7cac>
   195dc:			; <UNDEFINED> instruction: 0x0002f3b8
   195e0:	mov	r1, r0
   195e4:	ldr	r3, [pc, #8]	; 195f4 <__assert_fail@plt+0x8210>
   195e8:	mvn	r2, #0
   195ec:	mov	r0, #0
   195f0:	b	19090 <__assert_fail@plt+0x7cac>
   195f4:			; <UNDEFINED> instruction: 0x0002f3b8
   195f8:	mov	r2, r1
   195fc:	ldr	r3, [pc, #8]	; 1960c <__assert_fail@plt+0x8228>
   19600:	mov	r1, r0
   19604:	mov	r0, #0
   19608:	b	19090 <__assert_fail@plt+0x7cac>
   1960c:			; <UNDEFINED> instruction: 0x0002f3b8
   19610:	strd	r4, [sp, #-12]!
   19614:	mov	r5, r2
   19618:	mov	r4, r0
   1961c:	str	lr, [sp, #8]
   19620:	sub	sp, sp, #52	; 0x34
   19624:	mov	r0, sp
   19628:	bl	1772c <__assert_fail@plt+0x6348>
   1962c:	mov	r3, sp
   19630:	mov	r1, r5
   19634:	mov	r0, r4
   19638:	mvn	r2, #0
   1963c:	bl	19090 <__assert_fail@plt+0x7cac>
   19640:	add	sp, sp, #52	; 0x34
   19644:	ldrd	r4, [sp]
   19648:	add	sp, sp, #8
   1964c:	pop	{pc}		; (ldr pc, [sp], #4)
   19650:	strd	r4, [sp, #-16]!
   19654:	mov	r5, r2
   19658:	mov	r4, r0
   1965c:	str	r6, [sp, #8]
   19660:	mov	r6, r3
   19664:	str	lr, [sp, #12]
   19668:	sub	sp, sp, #48	; 0x30
   1966c:	mov	r0, sp
   19670:	bl	1772c <__assert_fail@plt+0x6348>
   19674:	mov	r3, sp
   19678:	mov	r2, r6
   1967c:	mov	r1, r5
   19680:	mov	r0, r4
   19684:	bl	19090 <__assert_fail@plt+0x7cac>
   19688:	add	sp, sp, #48	; 0x30
   1968c:	ldrd	r4, [sp]
   19690:	ldr	r6, [sp, #8]
   19694:	add	sp, sp, #12
   19698:	pop	{pc}		; (ldr pc, [sp], #4)
   1969c:	mov	r2, r1
   196a0:	mov	r1, r0
   196a4:	mov	r0, #0
   196a8:	b	19610 <__assert_fail@plt+0x822c>
   196ac:	mov	r3, r2
   196b0:	mov	r2, r1
   196b4:	mov	r1, r0
   196b8:	mov	r0, #0
   196bc:	b	19650 <__assert_fail@plt+0x826c>
   196c0:	ldr	ip, [pc, #140]	; 19754 <__assert_fail@plt+0x8370>
   196c4:	strd	r4, [sp, #-28]!	; 0xffffffe4
   196c8:	ldrd	r4, [ip]
   196cc:	strd	r6, [sp, #8]
   196d0:	ldrd	r6, [ip, #8]
   196d4:	strd	r8, [sp, #16]
   196d8:	lsr	r9, r2, #5
   196dc:	str	lr, [sp, #24]
   196e0:	sub	sp, sp, #52	; 0x34
   196e4:	and	lr, r2, #31
   196e8:	add	r8, sp, #8
   196ec:	mov	r2, r1
   196f0:	strd	r4, [sp]
   196f4:	mov	r1, r0
   196f8:	mov	r3, sp
   196fc:	strd	r6, [sp, #8]
   19700:	mov	r0, #0
   19704:	ldrd	r4, [ip, #16]
   19708:	ldrd	r6, [ip, #24]
   1970c:	strd	r4, [sp, #16]
   19710:	ldrd	r4, [ip, #32]
   19714:	strd	r6, [sp, #24]
   19718:	ldrd	r6, [ip, #40]	; 0x28
   1971c:	strd	r4, [sp, #32]
   19720:	strd	r6, [sp, #40]	; 0x28
   19724:	ldr	ip, [r8, r9, lsl #2]
   19728:	mvn	r4, ip, lsr lr
   1972c:	and	r4, r4, #1
   19730:	eor	lr, ip, r4, lsl lr
   19734:	str	lr, [r8, r9, lsl #2]
   19738:	bl	19090 <__assert_fail@plt+0x7cac>
   1973c:	add	sp, sp, #52	; 0x34
   19740:	ldrd	r4, [sp]
   19744:	ldrd	r6, [sp, #8]
   19748:	ldrd	r8, [sp, #16]
   1974c:	add	sp, sp, #24
   19750:	pop	{pc}		; (ldr pc, [sp], #4)
   19754:			; <UNDEFINED> instruction: 0x0002f3b8
   19758:	mov	r2, r1
   1975c:	mvn	r1, #0
   19760:	b	196c0 <__assert_fail@plt+0x82dc>
   19764:	mov	r2, #58	; 0x3a
   19768:	mvn	r1, #0
   1976c:	b	196c0 <__assert_fail@plt+0x82dc>
   19770:	mov	r2, #58	; 0x3a
   19774:	b	196c0 <__assert_fail@plt+0x82dc>
   19778:	strd	r4, [sp, #-20]!	; 0xffffffec
   1977c:	strd	r6, [sp, #8]
   19780:	mov	r6, r0
   19784:	mov	r7, r2
   19788:	str	lr, [sp, #16]
   1978c:	sub	sp, sp, #100	; 0x64
   19790:	mov	r0, sp
   19794:	bl	1772c <__assert_fail@plt+0x6348>
   19798:	ldrd	r4, [sp, #8]
   1979c:	mov	r1, r7
   197a0:	mov	r0, r6
   197a4:	add	r3, sp, #48	; 0x30
   197a8:	mvn	r2, #0
   197ac:	ldrd	r6, [sp]
   197b0:	strd	r4, [sp, #56]	; 0x38
   197b4:	ldrd	r4, [sp, #16]
   197b8:	strd	r6, [sp, #48]	; 0x30
   197bc:	ldrd	r6, [sp, #32]
   197c0:	ldr	lr, [sp, #60]	; 0x3c
   197c4:	strd	r4, [sp, #64]	; 0x40
   197c8:	ldrd	r4, [sp, #24]
   197cc:	mvn	ip, lr
   197d0:	and	ip, ip, #67108864	; 0x4000000
   197d4:	strd	r4, [sp, #72]	; 0x48
   197d8:	eor	ip, ip, lr
   197dc:	ldrd	r4, [sp, #40]	; 0x28
   197e0:	str	ip, [sp, #60]	; 0x3c
   197e4:	strd	r6, [sp, #80]	; 0x50
   197e8:	strd	r4, [sp, #88]	; 0x58
   197ec:	bl	19090 <__assert_fail@plt+0x7cac>
   197f0:	add	sp, sp, #100	; 0x64
   197f4:	ldrd	r4, [sp]
   197f8:	ldrd	r6, [sp, #8]
   197fc:	add	sp, sp, #16
   19800:	pop	{pc}		; (ldr pc, [sp], #4)
   19804:	ldr	ip, [pc, #156]	; 198a8 <__assert_fail@plt+0x84c4>
   19808:	cmp	r2, #0
   1980c:	cmpne	r1, #0
   19810:	strd	r4, [sp, #-32]!	; 0xffffffe0
   19814:	strd	r6, [sp, #8]
   19818:	mov	r6, r2
   1981c:	str	r8, [sp, #16]
   19820:	mov	r8, r3
   19824:	strd	sl, [sp, #20]
   19828:	ldrd	r4, [ip]
   1982c:	str	lr, [sp, #28]
   19830:	sub	sp, sp, #48	; 0x30
   19834:	mov	lr, #10
   19838:	ldrd	r2, [ip, #8]
   1983c:	ldrd	sl, [ip, #16]
   19840:	strd	r4, [sp]
   19844:	ldrd	r4, [ip, #32]
   19848:	str	lr, [sp]
   1984c:	strd	r2, [sp, #8]
   19850:	strd	sl, [sp, #16]
   19854:	ldrd	r2, [ip, #24]
   19858:	ldrd	sl, [ip, #40]	; 0x28
   1985c:	strd	r2, [sp, #24]
   19860:	strd	r4, [sp, #32]
   19864:	strd	sl, [sp, #40]	; 0x28
   19868:	beq	198a4 <__assert_fail@plt+0x84c0>
   1986c:	ldr	r2, [sp, #80]	; 0x50
   19870:	mov	r7, r1
   19874:	mov	r3, sp
   19878:	mov	r1, r8
   1987c:	str	r7, [sp, #40]	; 0x28
   19880:	str	r6, [sp, #44]	; 0x2c
   19884:	bl	19090 <__assert_fail@plt+0x7cac>
   19888:	add	sp, sp, #48	; 0x30
   1988c:	ldrd	r4, [sp]
   19890:	ldrd	r6, [sp, #8]
   19894:	ldr	r8, [sp, #16]
   19898:	ldrd	sl, [sp, #20]
   1989c:	add	sp, sp, #28
   198a0:	pop	{pc}		; (ldr pc, [sp], #4)
   198a4:	bl	113cc <abort@plt>
   198a8:			; <UNDEFINED> instruction: 0x0002f3b8
   198ac:	mvn	ip, #0
   198b0:	push	{lr}		; (str lr, [sp, #-4]!)
   198b4:	sub	sp, sp, #12
   198b8:	str	ip, [sp]
   198bc:	bl	19804 <__assert_fail@plt+0x8420>
   198c0:	add	sp, sp, #12
   198c4:	pop	{pc}		; (ldr pc, [sp], #4)
   198c8:	mvn	ip, #0
   198cc:	push	{lr}		; (str lr, [sp, #-4]!)
   198d0:	sub	sp, sp, #12
   198d4:	mov	r3, r2
   198d8:	mov	r2, r1
   198dc:	mov	r1, r0
   198e0:	mov	r0, #0
   198e4:	str	ip, [sp]
   198e8:	bl	19804 <__assert_fail@plt+0x8420>
   198ec:	add	sp, sp, #12
   198f0:	pop	{pc}		; (ldr pc, [sp], #4)
   198f4:	push	{lr}		; (str lr, [sp, #-4]!)
   198f8:	sub	sp, sp, #12
   198fc:	str	r3, [sp]
   19900:	mov	r3, r2
   19904:	mov	r2, r1
   19908:	mov	r1, r0
   1990c:	mov	r0, #0
   19910:	bl	19804 <__assert_fail@plt+0x8420>
   19914:	add	sp, sp, #12
   19918:	pop	{pc}		; (ldr pc, [sp], #4)
   1991c:	ldr	r3, [pc]	; 19924 <__assert_fail@plt+0x8540>
   19920:	b	19090 <__assert_fail@plt+0x7cac>
   19924:	muleq	r2, r8, r1
   19928:	mov	r2, r1
   1992c:	ldr	r3, [pc, #8]	; 1993c <__assert_fail@plt+0x8558>
   19930:	mov	r1, r0
   19934:	mov	r0, #0
   19938:	b	19090 <__assert_fail@plt+0x7cac>
   1993c:	muleq	r2, r8, r1
   19940:	ldr	r3, [pc, #4]	; 1994c <__assert_fail@plt+0x8568>
   19944:	mvn	r2, #0
   19948:	b	19090 <__assert_fail@plt+0x7cac>
   1994c:	muleq	r2, r8, r1
   19950:	mov	r1, r0
   19954:	ldr	r3, [pc, #8]	; 19964 <__assert_fail@plt+0x8580>
   19958:	mvn	r2, #0
   1995c:	mov	r0, #0
   19960:	b	19090 <__assert_fail@plt+0x7cac>
   19964:	muleq	r2, r8, r1
   19968:	strd	r4, [sp, #-16]!
   1996c:	mov	r5, r1
   19970:	mov	r1, #0
   19974:	mov	r4, r2
   19978:	str	r6, [sp, #8]
   1997c:	str	lr, [sp, #12]
   19980:	bl	11354 <setlocale@plt>
   19984:	subs	r6, r0, #0
   19988:	beq	19a08 <__assert_fail@plt+0x8624>
   1998c:	bl	11294 <strlen@plt>
   19990:	cmp	r4, r0
   19994:	bhi	199b4 <__assert_fail@plt+0x85d0>
   19998:	cmp	r4, #0
   1999c:	moveq	r0, #34	; 0x22
   199a0:	bne	199d8 <__assert_fail@plt+0x85f4>
   199a4:	ldrd	r4, [sp]
   199a8:	ldr	r6, [sp, #8]
   199ac:	add	sp, sp, #12
   199b0:	pop	{pc}		; (ldr pc, [sp], #4)
   199b4:	add	r2, r0, #1
   199b8:	mov	r1, r6
   199bc:	mov	r0, r5
   199c0:	bl	1112c <memcpy@plt>
   199c4:	ldrd	r4, [sp]
   199c8:	mov	r0, #0
   199cc:	ldr	r6, [sp, #8]
   199d0:	add	sp, sp, #12
   199d4:	pop	{pc}		; (ldr pc, [sp], #4)
   199d8:	sub	r4, r4, #1
   199dc:	mov	r1, r6
   199e0:	mov	r2, r4
   199e4:	mov	r0, r5
   199e8:	bl	1112c <memcpy@plt>
   199ec:	mov	r3, #0
   199f0:	mov	r0, #34	; 0x22
   199f4:	strb	r3, [r5, r4]
   199f8:	ldrd	r4, [sp]
   199fc:	ldr	r6, [sp, #8]
   19a00:	add	sp, sp, #12
   19a04:	pop	{pc}		; (ldr pc, [sp], #4)
   19a08:	cmp	r4, #0
   19a0c:	mov	r0, #22
   19a10:	strbne	r6, [r5]
   19a14:	ldrd	r4, [sp]
   19a18:	ldr	r6, [sp, #8]
   19a1c:	add	sp, sp, #12
   19a20:	pop	{pc}		; (ldr pc, [sp], #4)
   19a24:	mov	r1, #0
   19a28:	b	11354 <setlocale@plt>
   19a2c:	subs	r1, r0, #0
   19a30:	movw	r0, #58868	; 0xe5f4
   19a34:	movt	r0, #1
   19a38:	beq	19a44 <__assert_fail@plt+0x8660>
   19a3c:	mov	r2, #1
   19a40:	b	112ac <setenv@plt>
   19a44:	b	113b4 <unsetenv@plt>
   19a48:	cmp	r0, #0
   19a4c:	bxeq	lr
   19a50:	str	r4, [sp, #-8]!
   19a54:	str	lr, [sp, #4]
   19a58:	ldr	r4, [r0]
   19a5c:	bl	152ac <__assert_fail@plt+0x3ec8>
   19a60:	subs	r0, r4, #0
   19a64:	bne	19a58 <__assert_fail@plt+0x8674>
   19a68:	ldr	r4, [sp]
   19a6c:	add	sp, sp, #4
   19a70:	pop	{pc}		; (ldr pc, [sp], #4)
   19a74:	strd	r4, [sp, #-24]!	; 0xffffffe8
   19a78:	mov	r5, r0
   19a7c:	strd	r6, [sp, #8]
   19a80:	str	r8, [sp, #16]
   19a84:	str	lr, [sp, #20]
   19a88:	bl	112c4 <__errno_location@plt>
   19a8c:	mov	r4, r0
   19a90:	ldrb	r0, [r5, #4]
   19a94:	ldr	r6, [r4]
   19a98:	cmp	r0, #0
   19a9c:	addne	r0, r5, #5
   19aa0:	bl	19a2c <__assert_fail@plt+0x8648>
   19aa4:	cmp	r0, #0
   19aa8:	beq	19ad8 <__assert_fail@plt+0x86f4>
   19aac:	ldr	r6, [r4]
   19ab0:	mov	r7, #0
   19ab4:	mov	r0, r5
   19ab8:	bl	19a48 <__assert_fail@plt+0x8664>
   19abc:	mov	r0, r7
   19ac0:	ldr	r8, [sp, #16]
   19ac4:	str	r6, [r4]
   19ac8:	ldrd	r4, [sp]
   19acc:	ldrd	r6, [sp, #8]
   19ad0:	add	sp, sp, #20
   19ad4:	pop	{pc}		; (ldr pc, [sp], #4)
   19ad8:	mov	r7, #1
   19adc:	bl	111b0 <tzset@plt>
   19ae0:	b	19ab4 <__assert_fail@plt+0x86d0>
   19ae4:	strd	r4, [sp, #-24]!	; 0xffffffe8
   19ae8:	strd	r6, [sp, #8]
   19aec:	subs	r6, r0, #0
   19af0:	str	r8, [sp, #16]
   19af4:	str	lr, [sp, #20]
   19af8:	beq	19b64 <__assert_fail@plt+0x8780>
   19afc:	bl	11294 <strlen@plt>
   19b00:	add	r5, r0, #1
   19b04:	cmp	r5, #58	; 0x3a
   19b08:	movcs	r0, r5
   19b0c:	movcc	r0, #58	; 0x3a
   19b10:	add	r0, r0, #9
   19b14:	bic	r0, r0, #3
   19b18:	bl	1c994 <__assert_fail@plt+0xb5b0>
   19b1c:	subs	r4, r0, #0
   19b20:	beq	19b4c <__assert_fail@plt+0x8768>
   19b24:	mov	r7, #0
   19b28:	mov	ip, #1
   19b2c:	add	r3, r4, #5
   19b30:	mov	r1, r6
   19b34:	mov	r0, r3
   19b38:	mov	r2, r5
   19b3c:	str	r7, [r4]
   19b40:	strh	ip, [r4, #4]
   19b44:	bl	1112c <memcpy@plt>
   19b48:	strb	r7, [r0, r5]
   19b4c:	mov	r0, r4
   19b50:	ldrd	r4, [sp]
   19b54:	ldrd	r6, [sp, #8]
   19b58:	ldr	r8, [sp, #16]
   19b5c:	add	sp, sp, #20
   19b60:	pop	{pc}		; (ldr pc, [sp], #4)
   19b64:	mov	r0, #64	; 0x40
   19b68:	bl	1c994 <__assert_fail@plt+0xb5b0>
   19b6c:	subs	r4, r0, #0
   19b70:	strne	r6, [r4]
   19b74:	strhne	r6, [r4, #4]
   19b78:	b	19b4c <__assert_fail@plt+0x8768>
   19b7c:	strd	r4, [sp, #-24]!	; 0xffffffe8
   19b80:	strd	r6, [sp, #8]
   19b84:	ldr	r6, [r1, #40]	; 0x28
   19b88:	str	r8, [sp, #16]
   19b8c:	str	lr, [sp, #20]
   19b90:	cmp	r6, #0
   19b94:	beq	19c70 <__assert_fail@plt+0x888c>
   19b98:	cmp	r1, r6
   19b9c:	mov	r7, r1
   19ba0:	mov	r5, r0
   19ba4:	bhi	19bb4 <__assert_fail@plt+0x87d0>
   19ba8:	add	r3, r1, #44	; 0x2c
   19bac:	cmp	r6, r3
   19bb0:	bcc	19c70 <__assert_fail@plt+0x888c>
   19bb4:	ldrb	r3, [r6]
   19bb8:	cmp	r3, #0
   19bbc:	addne	r4, r5, #5
   19bc0:	beq	19c64 <__assert_fail@plt+0x8880>
   19bc4:	mov	r1, r6
   19bc8:	mov	r0, r4
   19bcc:	bl	110c0 <strcmp@plt>
   19bd0:	cmp	r0, #0
   19bd4:	add	r2, r5, #5
   19bd8:	mov	r0, r4
   19bdc:	beq	19c48 <__assert_fail@plt+0x8864>
   19be0:	ldrb	r3, [r4]
   19be4:	cmp	r3, #0
   19be8:	bne	19c00 <__assert_fail@plt+0x881c>
   19bec:	cmp	r4, r2
   19bf0:	bne	19c78 <__assert_fail@plt+0x8894>
   19bf4:	ldrb	r3, [r5, #4]
   19bf8:	cmp	r3, #0
   19bfc:	beq	19c78 <__assert_fail@plt+0x8894>
   19c00:	bl	11294 <strlen@plt>
   19c04:	add	r0, r0, #1
   19c08:	ldrb	r3, [r4, r0]!
   19c0c:	cmp	r3, #0
   19c10:	bne	19bc4 <__assert_fail@plt+0x87e0>
   19c14:	ldr	r3, [r5]
   19c18:	cmp	r3, #0
   19c1c:	addne	r4, r3, #5
   19c20:	movne	r5, r3
   19c24:	b	19bc4 <__assert_fail@plt+0x87e0>
   19c28:	mov	r0, r6
   19c2c:	bl	19ae4 <__assert_fail@plt+0x8700>
   19c30:	cmp	r0, #0
   19c34:	str	r0, [r5]
   19c38:	beq	19c50 <__assert_fail@plt+0x886c>
   19c3c:	mov	r3, #0
   19c40:	add	r4, r0, #5
   19c44:	strb	r3, [r0, #4]
   19c48:	mov	r0, #1
   19c4c:	str	r4, [r7, #40]	; 0x28
   19c50:	ldrd	r4, [sp]
   19c54:	ldrd	r6, [sp, #8]
   19c58:	ldr	r8, [sp, #16]
   19c5c:	add	sp, sp, #20
   19c60:	pop	{pc}		; (ldr pc, [sp], #4)
   19c64:	movw	r4, #53980	; 0xd2dc
   19c68:	movt	r4, #1
   19c6c:	b	19c48 <__assert_fail@plt+0x8864>
   19c70:	mov	r0, #1
   19c74:	b	19c50 <__assert_fail@plt+0x886c>
   19c78:	mov	r0, r6
   19c7c:	bl	11294 <strlen@plt>
   19c80:	add	r3, r5, #64	; 0x40
   19c84:	add	r8, r0, #1
   19c88:	sub	r3, r3, r4
   19c8c:	cmp	r3, r8
   19c90:	ble	19c28 <__assert_fail@plt+0x8844>
   19c94:	mov	r1, r6
   19c98:	mov	r2, r8
   19c9c:	mov	r0, r4
   19ca0:	bl	1112c <memcpy@plt>
   19ca4:	mov	r3, #0
   19ca8:	strb	r3, [r4, r8]
   19cac:	b	19c48 <__assert_fail@plt+0x8864>
   19cb0:	strd	r4, [sp, #-16]!
   19cb4:	mov	r4, r0
   19cb8:	movw	r0, #58868	; 0xe5f4
   19cbc:	movt	r0, #1
   19cc0:	str	r6, [sp, #8]
   19cc4:	str	lr, [sp, #12]
   19cc8:	bl	11210 <getenv@plt>
   19ccc:	subs	r5, r0, #0
   19cd0:	ldrb	r3, [r4, #4]
   19cd4:	beq	19d5c <__assert_fail@plt+0x8978>
   19cd8:	cmp	r3, #0
   19cdc:	bne	19d30 <__assert_fail@plt+0x894c>
   19ce0:	mov	r0, r5
   19ce4:	bl	19ae4 <__assert_fail@plt+0x8700>
   19ce8:	subs	r5, r0, #0
   19cec:	beq	19d48 <__assert_fail@plt+0x8964>
   19cf0:	ldrb	r0, [r4, #4]
   19cf4:	cmp	r0, #0
   19cf8:	addne	r0, r4, #5
   19cfc:	bl	19a2c <__assert_fail@plt+0x8648>
   19d00:	cmp	r0, #0
   19d04:	beq	19d68 <__assert_fail@plt+0x8984>
   19d08:	bl	112c4 <__errno_location@plt>
   19d0c:	cmp	r5, #1
   19d10:	mov	r4, r0
   19d14:	ldr	r6, [r0]
   19d18:	beq	19d24 <__assert_fail@plt+0x8940>
   19d1c:	mov	r0, r5
   19d20:	bl	19a48 <__assert_fail@plt+0x8664>
   19d24:	mov	r5, #0
   19d28:	str	r6, [r4]
   19d2c:	b	19d48 <__assert_fail@plt+0x8964>
   19d30:	mov	r1, r5
   19d34:	add	r0, r4, #5
   19d38:	bl	110c0 <strcmp@plt>
   19d3c:	cmp	r0, #0
   19d40:	bne	19ce0 <__assert_fail@plt+0x88fc>
   19d44:	mov	r5, #1
   19d48:	mov	r0, r5
   19d4c:	ldrd	r4, [sp]
   19d50:	ldr	r6, [sp, #8]
   19d54:	add	sp, sp, #12
   19d58:	pop	{pc}		; (ldr pc, [sp], #4)
   19d5c:	cmp	r3, #0
   19d60:	beq	19d44 <__assert_fail@plt+0x8960>
   19d64:	b	19ce0 <__assert_fail@plt+0x88fc>
   19d68:	bl	111b0 <tzset@plt>
   19d6c:	b	19d48 <__assert_fail@plt+0x8964>
   19d70:	cmp	r0, #1
   19d74:	beq	19d7c <__assert_fail@plt+0x8998>
   19d78:	b	19a48 <__assert_fail@plt+0x8664>
   19d7c:	bx	lr
   19d80:	subs	ip, r0, #0
   19d84:	strd	r4, [sp, #-24]!	; 0xffffffe8
   19d88:	mov	r5, r1
   19d8c:	strd	r6, [sp, #8]
   19d90:	str	r8, [sp, #16]
   19d94:	str	lr, [sp, #20]
   19d98:	beq	19e24 <__assert_fail@plt+0x8a40>
   19d9c:	mov	r4, r2
   19da0:	mov	r6, ip
   19da4:	bl	19cb0 <__assert_fail@plt+0x88cc>
   19da8:	subs	r7, r0, #0
   19dac:	beq	19df8 <__assert_fail@plt+0x8a14>
   19db0:	mov	r0, r5
   19db4:	mov	r1, r4
   19db8:	bl	11180 <localtime_r@plt>
   19dbc:	cmp	r0, #0
   19dc0:	beq	19de8 <__assert_fail@plt+0x8a04>
   19dc4:	mov	r0, r6
   19dc8:	mov	r1, r4
   19dcc:	bl	19b7c <__assert_fail@plt+0x8798>
   19dd0:	cmp	r0, #0
   19dd4:	beq	19de8 <__assert_fail@plt+0x8a04>
   19dd8:	cmp	r7, #1
   19ddc:	bne	19e10 <__assert_fail@plt+0x8a2c>
   19de0:	mov	r0, r4
   19de4:	b	19dfc <__assert_fail@plt+0x8a18>
   19de8:	cmp	r7, #1
   19dec:	beq	19df8 <__assert_fail@plt+0x8a14>
   19df0:	mov	r0, r7
   19df4:	bl	19a74 <__assert_fail@plt+0x8690>
   19df8:	mov	r0, #0
   19dfc:	ldrd	r4, [sp]
   19e00:	ldrd	r6, [sp, #8]
   19e04:	ldr	r8, [sp, #16]
   19e08:	add	sp, sp, #20
   19e0c:	pop	{pc}		; (ldr pc, [sp], #4)
   19e10:	mov	r0, r7
   19e14:	bl	19a74 <__assert_fail@plt+0x8690>
   19e18:	cmp	r0, #0
   19e1c:	bne	19de0 <__assert_fail@plt+0x89fc>
   19e20:	b	19df8 <__assert_fail@plt+0x8a14>
   19e24:	mov	r0, r5
   19e28:	mov	r1, r2
   19e2c:	ldrd	r4, [sp]
   19e30:	ldrd	r6, [sp, #8]
   19e34:	ldr	r8, [sp, #16]
   19e38:	ldr	lr, [sp, #20]
   19e3c:	add	sp, sp, #24
   19e40:	b	110b4 <gmtime_r@plt>
   19e44:	strd	r4, [sp, #-20]!	; 0xffffffec
   19e48:	subs	r5, r0, #0
   19e4c:	strd	r6, [sp, #8]
   19e50:	mov	r6, r1
   19e54:	str	lr, [sp, #16]
   19e58:	sub	sp, sp, #52	; 0x34
   19e5c:	beq	19f4c <__assert_fail@plt+0x8b68>
   19e60:	bl	19cb0 <__assert_fail@plt+0x88cc>
   19e64:	subs	r4, r0, #0
   19e68:	beq	19ecc <__assert_fail@plt+0x8ae8>
   19e6c:	ldr	r3, [r6]
   19e70:	mvn	r2, #0
   19e74:	add	r0, sp, #4
   19e78:	ldr	r1, [r6, #4]
   19e7c:	str	r3, [sp, #4]
   19e80:	str	r2, [sp, #32]
   19e84:	ldrd	r2, [r6, #8]
   19e88:	str	r1, [sp, #8]
   19e8c:	ldr	r1, [r6, #16]
   19e90:	strd	r2, [sp, #12]
   19e94:	ldr	r2, [r6, #20]
   19e98:	str	r1, [sp, #20]
   19e9c:	ldr	r3, [r6, #32]
   19ea0:	str	r2, [sp, #24]
   19ea4:	str	r3, [sp, #36]	; 0x24
   19ea8:	bl	110e4 <mktime@plt>
   19eac:	ldr	r3, [sp, #32]
   19eb0:	mov	r7, r0
   19eb4:	cmp	r3, #0
   19eb8:	bge	19ee8 <__assert_fail@plt+0x8b04>
   19ebc:	cmp	r4, #1
   19ec0:	beq	19ecc <__assert_fail@plt+0x8ae8>
   19ec4:	mov	r0, r4
   19ec8:	bl	19a74 <__assert_fail@plt+0x8690>
   19ecc:	mvn	r7, #0
   19ed0:	mov	r0, r7
   19ed4:	add	sp, sp, #52	; 0x34
   19ed8:	ldrd	r4, [sp]
   19edc:	ldrd	r6, [sp, #8]
   19ee0:	add	sp, sp, #16
   19ee4:	pop	{pc}		; (ldr pc, [sp], #4)
   19ee8:	mov	r0, r5
   19eec:	add	r1, sp, #4
   19ef0:	bl	19b7c <__assert_fail@plt+0x8798>
   19ef4:	cmp	r0, #0
   19ef8:	beq	19ebc <__assert_fail@plt+0x8ad8>
   19efc:	cmp	r4, #1
   19f00:	bne	19f38 <__assert_fail@plt+0x8b54>
   19f04:	ldrd	r0, [sp, #4]
   19f08:	ldrd	r2, [sp, #12]
   19f0c:	ldrd	r4, [sp, #20]
   19f10:	strd	r0, [r6]
   19f14:	ldrd	r0, [sp, #28]
   19f18:	strd	r2, [r6, #8]
   19f1c:	ldrd	r2, [sp, #36]	; 0x24
   19f20:	strd	r4, [r6, #16]
   19f24:	ldr	ip, [sp, #44]	; 0x2c
   19f28:	strd	r0, [r6, #24]
   19f2c:	strd	r2, [r6, #32]
   19f30:	str	ip, [r6, #40]	; 0x28
   19f34:	b	19ed0 <__assert_fail@plt+0x8aec>
   19f38:	mov	r0, r4
   19f3c:	bl	19a74 <__assert_fail@plt+0x8690>
   19f40:	cmp	r0, #0
   19f44:	bne	19f04 <__assert_fail@plt+0x8b20>
   19f48:	b	19ecc <__assert_fail@plt+0x8ae8>
   19f4c:	mov	r0, r1
   19f50:	bl	11378 <timegm@plt>
   19f54:	mov	r7, r0
   19f58:	b	19ed0 <__assert_fail@plt+0x8aec>
   19f5c:	mov	r2, #3
   19f60:	mov	r1, #0
   19f64:	b	1cab0 <__assert_fail@plt+0xb6cc>
   19f68:	cmp	r1, #0
   19f6c:	strd	r4, [sp, #-16]!
   19f70:	mov	ip, r3
   19f74:	str	r6, [sp, #8]
   19f78:	mov	r4, r0
   19f7c:	str	lr, [sp, #12]
   19f80:	sub	sp, sp, #32
   19f84:	ldr	r5, [sp, #48]	; 0x30
   19f88:	ldr	r6, [sp, #52]	; 0x34
   19f8c:	beq	1a0d0 <__assert_fail@plt+0x8cec>
   19f90:	mov	r3, r1
   19f94:	mov	r1, #1
   19f98:	stm	sp, {r2, ip}
   19f9c:	movw	r2, #59792	; 0xe990
   19fa0:	movt	r2, #1
   19fa4:	bl	1130c <__fprintf_chk@plt>
   19fa8:	mov	r2, #5
   19fac:	movw	r1, #59812	; 0xe9a4
   19fb0:	movt	r1, #1
   19fb4:	mov	r0, #0
   19fb8:	bl	11168 <dcgettext@plt>
   19fbc:	movw	ip, #2022	; 0x7e6
   19fc0:	mov	r3, r0
   19fc4:	mov	r1, #1
   19fc8:	movw	r2, #60540	; 0xec7c
   19fcc:	movt	r2, #1
   19fd0:	mov	r0, r4
   19fd4:	str	ip, [sp]
   19fd8:	bl	1130c <__fprintf_chk@plt>
   19fdc:	mov	r1, r4
   19fe0:	mov	r0, #10
   19fe4:	bl	1115c <fputc_unlocked@plt>
   19fe8:	mov	r2, #5
   19fec:	movw	r1, #59816	; 0xe9a8
   19ff0:	movt	r1, #1
   19ff4:	mov	r0, #0
   19ff8:	bl	11168 <dcgettext@plt>
   19ffc:	mov	r2, r0
   1a000:	mov	r1, #1
   1a004:	movw	r3, #59988	; 0xea54
   1a008:	movt	r3, #1
   1a00c:	mov	r0, r4
   1a010:	bl	1130c <__fprintf_chk@plt>
   1a014:	mov	r1, r4
   1a018:	mov	r0, #10
   1a01c:	bl	1115c <fputc_unlocked@plt>
   1a020:	cmp	r6, #9
   1a024:	ldrls	pc, [pc, r6, lsl #2]
   1a028:	b	1a33c <__assert_fail@plt+0x8f58>
   1a02c:	strheq	sl, [r1], -ip
   1a030:	andeq	sl, r1, ip, ror #1
   1a034:	andeq	sl, r1, r8, lsr #2
   1a038:	andeq	sl, r1, r8, ror #2
   1a03c:			; <UNDEFINED> instruction: 0x0001a1b0
   1a040:	andeq	sl, r1, r8, ror #3
   1a044:	andeq	sl, r1, r0, lsr r2
   1a048:	andeq	sl, r1, r4, lsl #5
   1a04c:	ldrdeq	sl, [r1], -ip
   1a050:	andeq	sl, r1, r4, asr r0
   1a054:	movw	r1, #60292	; 0xeb84
   1a058:	movt	r1, #1
   1a05c:	mov	r2, #5
   1a060:	mov	r0, #0
   1a064:	bl	11168 <dcgettext@plt>
   1a068:	ldr	lr, [r5, #4]
   1a06c:	mov	r2, r0
   1a070:	mov	r1, #1
   1a074:	mov	r0, r4
   1a078:	ldr	r3, [r5, #8]
   1a07c:	ldr	ip, [r5, #32]
   1a080:	str	lr, [sp]
   1a084:	ldr	lr, [r5, #12]
   1a088:	str	ip, [sp, #28]
   1a08c:	ldr	ip, [r5, #28]
   1a090:	str	r3, [sp, #4]
   1a094:	ldr	r3, [r5, #16]
   1a098:	str	lr, [sp, #8]
   1a09c:	ldr	lr, [r5, #20]
   1a0a0:	str	ip, [sp, #24]
   1a0a4:	ldr	ip, [r5, #24]
   1a0a8:	str	r3, [sp, #12]
   1a0ac:	ldr	r3, [r5]
   1a0b0:	str	lr, [sp, #16]
   1a0b4:	str	ip, [sp, #20]
   1a0b8:	bl	1130c <__fprintf_chk@plt>
   1a0bc:	add	sp, sp, #32
   1a0c0:	ldrd	r4, [sp]
   1a0c4:	ldr	r6, [sp, #8]
   1a0c8:	add	sp, sp, #12
   1a0cc:	pop	{pc}		; (ldr pc, [sp], #4)
   1a0d0:	mov	r3, r2
   1a0d4:	mov	r1, #1
   1a0d8:	str	ip, [sp]
   1a0dc:	movw	r2, #59804	; 0xe99c
   1a0e0:	movt	r2, #1
   1a0e4:	bl	1130c <__fprintf_chk@plt>
   1a0e8:	b	19fa8 <__assert_fail@plt+0x8bc4>
   1a0ec:	mov	r2, #5
   1a0f0:	movw	r1, #60024	; 0xea78
   1a0f4:	movt	r1, #1
   1a0f8:	mov	r0, #0
   1a0fc:	bl	11168 <dcgettext@plt>
   1a100:	ldr	r3, [r5]
   1a104:	mov	r2, r0
   1a108:	mov	r1, #1
   1a10c:	mov	r0, r4
   1a110:	add	sp, sp, #32
   1a114:	ldrd	r4, [sp]
   1a118:	ldr	r6, [sp, #8]
   1a11c:	ldr	lr, [sp, #12]
   1a120:	add	sp, sp, #16
   1a124:	b	1130c <__fprintf_chk@plt>
   1a128:	mov	r2, #5
   1a12c:	movw	r1, #60040	; 0xea88
   1a130:	movt	r1, #1
   1a134:	mov	r0, #0
   1a138:	bl	11168 <dcgettext@plt>
   1a13c:	ldm	r5, {r3, ip}
   1a140:	mov	r2, r0
   1a144:	mov	r1, #1
   1a148:	mov	r0, r4
   1a14c:	str	ip, [sp, #48]	; 0x30
   1a150:	add	sp, sp, #32
   1a154:	ldrd	r4, [sp]
   1a158:	ldr	r6, [sp, #8]
   1a15c:	ldr	lr, [sp, #12]
   1a160:	add	sp, sp, #16
   1a164:	b	1130c <__fprintf_chk@plt>
   1a168:	mov	r2, #5
   1a16c:	movw	r1, #60064	; 0xeaa0
   1a170:	movt	r1, #1
   1a174:	mov	r0, #0
   1a178:	bl	11168 <dcgettext@plt>
   1a17c:	ldm	r5, {r3, lr}
   1a180:	mov	r2, r0
   1a184:	mov	r1, #1
   1a188:	mov	r0, r4
   1a18c:	ldr	ip, [r5, #8]
   1a190:	str	lr, [sp, #48]	; 0x30
   1a194:	str	ip, [sp, #52]	; 0x34
   1a198:	add	sp, sp, #32
   1a19c:	ldrd	r4, [sp]
   1a1a0:	ldr	r6, [sp, #8]
   1a1a4:	ldr	lr, [sp, #12]
   1a1a8:	add	sp, sp, #16
   1a1ac:	b	1130c <__fprintf_chk@plt>
   1a1b0:	mov	r2, #5
   1a1b4:	movw	r1, #60092	; 0xeabc
   1a1b8:	movt	r1, #1
   1a1bc:	mov	r0, #0
   1a1c0:	bl	11168 <dcgettext@plt>
   1a1c4:	ldmib	r5, {r3, ip, lr}
   1a1c8:	mov	r2, r0
   1a1cc:	mov	r1, #1
   1a1d0:	mov	r0, r4
   1a1d4:	str	r3, [sp]
   1a1d8:	ldr	r3, [r5]
   1a1dc:	stmib	sp, {ip, lr}
   1a1e0:	bl	1130c <__fprintf_chk@plt>
   1a1e4:	b	1a0bc <__assert_fail@plt+0x8cd8>
   1a1e8:	mov	r2, #5
   1a1ec:	movw	r1, #60124	; 0xeadc
   1a1f0:	movt	r1, #1
   1a1f4:	mov	r0, #0
   1a1f8:	bl	11168 <dcgettext@plt>
   1a1fc:	ldmib	r5, {ip, lr}
   1a200:	mov	r2, r0
   1a204:	mov	r1, #1
   1a208:	mov	r0, r4
   1a20c:	ldr	r3, [r5, #16]
   1a210:	str	ip, [sp]
   1a214:	ldr	ip, [r5, #12]
   1a218:	str	r3, [sp, #12]
   1a21c:	ldr	r3, [r5]
   1a220:	str	lr, [sp, #4]
   1a224:	str	ip, [sp, #8]
   1a228:	bl	1130c <__fprintf_chk@plt>
   1a22c:	b	1a0bc <__assert_fail@plt+0x8cd8>
   1a230:	mov	r2, #5
   1a234:	movw	r1, #60160	; 0xeb00
   1a238:	movt	r1, #1
   1a23c:	mov	r0, #0
   1a240:	bl	11168 <dcgettext@plt>
   1a244:	ldr	lr, [r5, #4]
   1a248:	mov	r2, r0
   1a24c:	mov	r1, #1
   1a250:	mov	r0, r4
   1a254:	ldr	r3, [r5, #8]
   1a258:	ldr	ip, [r5, #20]
   1a25c:	str	lr, [sp]
   1a260:	ldr	lr, [r5, #12]
   1a264:	str	ip, [sp, #16]
   1a268:	ldr	ip, [r5, #16]
   1a26c:	str	r3, [sp, #4]
   1a270:	ldr	r3, [r5]
   1a274:	str	lr, [sp, #8]
   1a278:	str	ip, [sp, #12]
   1a27c:	bl	1130c <__fprintf_chk@plt>
   1a280:	b	1a0bc <__assert_fail@plt+0x8cd8>
   1a284:	mov	r2, #5
   1a288:	movw	r1, #60200	; 0xeb28
   1a28c:	movt	r1, #1
   1a290:	mov	r0, #0
   1a294:	bl	11168 <dcgettext@plt>
   1a298:	ldmib	r5, {r3, ip}
   1a29c:	mov	r2, r0
   1a2a0:	mov	r1, #1
   1a2a4:	mov	r0, r4
   1a2a8:	ldr	lr, [r5, #24]
   1a2ac:	str	r3, [sp]
   1a2b0:	ldr	r3, [r5, #12]
   1a2b4:	str	lr, [sp, #20]
   1a2b8:	ldr	lr, [r5, #20]
   1a2bc:	str	ip, [sp, #4]
   1a2c0:	ldr	ip, [r5, #16]
   1a2c4:	str	r3, [sp, #8]
   1a2c8:	ldr	r3, [r5]
   1a2cc:	str	ip, [sp, #12]
   1a2d0:	str	lr, [sp, #16]
   1a2d4:	bl	1130c <__fprintf_chk@plt>
   1a2d8:	b	1a0bc <__assert_fail@plt+0x8cd8>
   1a2dc:	mov	r2, #5
   1a2e0:	movw	r1, #60244	; 0xeb54
   1a2e4:	movt	r1, #1
   1a2e8:	mov	r0, #0
   1a2ec:	bl	11168 <dcgettext@plt>
   1a2f0:	ldmib	r5, {ip, lr}
   1a2f4:	mov	r2, r0
   1a2f8:	mov	r1, #1
   1a2fc:	mov	r0, r4
   1a300:	ldr	r3, [r5, #28]
   1a304:	str	ip, [sp]
   1a308:	ldr	ip, [r5, #12]
   1a30c:	str	r3, [sp, #24]
   1a310:	ldr	r3, [r5, #24]
   1a314:	str	lr, [sp, #4]
   1a318:	ldr	lr, [r5, #16]
   1a31c:	str	ip, [sp, #8]
   1a320:	ldr	ip, [r5, #20]
   1a324:	str	r3, [sp, #20]
   1a328:	ldr	r3, [r5]
   1a32c:	str	lr, [sp, #12]
   1a330:	str	ip, [sp, #16]
   1a334:	bl	1130c <__fprintf_chk@plt>
   1a338:	b	1a0bc <__assert_fail@plt+0x8cd8>
   1a33c:	movw	r1, #60344	; 0xebb8
   1a340:	movt	r1, #1
   1a344:	b	1a05c <__assert_fail@plt+0x8c78>
   1a348:	strd	r4, [sp, #-12]!
   1a34c:	str	lr, [sp, #8]
   1a350:	sub	sp, sp, #12
   1a354:	ldr	r5, [sp, #24]
   1a358:	ldr	ip, [r5]
   1a35c:	cmp	ip, #0
   1a360:	beq	1a37c <__assert_fail@plt+0x8f98>
   1a364:	mov	lr, r5
   1a368:	mov	ip, #0
   1a36c:	ldr	r4, [lr, #4]!
   1a370:	add	ip, ip, #1
   1a374:	cmp	r4, #0
   1a378:	bne	1a36c <__assert_fail@plt+0x8f88>
   1a37c:	stm	sp, {r5, ip}
   1a380:	bl	19f68 <__assert_fail@plt+0x8b84>
   1a384:	add	sp, sp, #12
   1a388:	ldrd	r4, [sp]
   1a38c:	add	sp, sp, #8
   1a390:	pop	{pc}		; (ldr pc, [sp], #4)
   1a394:	strd	r4, [sp, #-16]!
   1a398:	mov	ip, #0
   1a39c:	str	r6, [sp, #8]
   1a3a0:	str	lr, [sp, #12]
   1a3a4:	sub	sp, sp, #48	; 0x30
   1a3a8:	ldr	r5, [sp, #64]	; 0x40
   1a3ac:	add	r6, sp, #8
   1a3b0:	mov	r4, r6
   1a3b4:	ldr	lr, [r5], #4
   1a3b8:	cmp	lr, #0
   1a3bc:	str	lr, [r4], #4
   1a3c0:	beq	1a3d0 <__assert_fail@plt+0x8fec>
   1a3c4:	add	ip, ip, #1
   1a3c8:	cmp	ip, #10
   1a3cc:	bne	1a3b4 <__assert_fail@plt+0x8fd0>
   1a3d0:	stm	sp, {r6, ip}
   1a3d4:	bl	19f68 <__assert_fail@plt+0x8b84>
   1a3d8:	add	sp, sp, #48	; 0x30
   1a3dc:	ldrd	r4, [sp]
   1a3e0:	ldr	r6, [sp, #8]
   1a3e4:	add	sp, sp, #12
   1a3e8:	pop	{pc}		; (ldr pc, [sp], #4)
   1a3ec:	push	{r3}		; (str r3, [sp, #-4]!)
   1a3f0:	mov	ip, #0
   1a3f4:	strd	r4, [sp, #-12]!
   1a3f8:	str	lr, [sp, #8]
   1a3fc:	sub	sp, sp, #56	; 0x38
   1a400:	add	r3, sp, #72	; 0x48
   1a404:	add	r5, sp, #16
   1a408:	mov	r4, r3
   1a40c:	mov	lr, r5
   1a410:	str	r3, [sp, #12]
   1a414:	ldr	r3, [r4], #4
   1a418:	cmp	r3, #0
   1a41c:	str	r3, [lr], #4
   1a420:	beq	1a430 <__assert_fail@plt+0x904c>
   1a424:	add	ip, ip, #1
   1a428:	cmp	ip, #10
   1a42c:	bne	1a414 <__assert_fail@plt+0x9030>
   1a430:	ldr	r3, [sp, #68]	; 0x44
   1a434:	stm	sp, {r5, ip}
   1a438:	bl	19f68 <__assert_fail@plt+0x8b84>
   1a43c:	add	sp, sp, #56	; 0x38
   1a440:	ldrd	r4, [sp]
   1a444:	ldr	lr, [sp, #8]
   1a448:	add	sp, sp, #12
   1a44c:	add	sp, sp, #4
   1a450:	bx	lr
   1a454:	movw	r3, #61924	; 0xf1e4
   1a458:	movt	r3, #2
   1a45c:	str	r4, [sp, #-8]!
   1a460:	mov	r0, #10
   1a464:	ldr	r1, [r3]
   1a468:	str	lr, [sp, #4]
   1a46c:	bl	1115c <fputc_unlocked@plt>
   1a470:	mov	r2, #5
   1a474:	movw	r1, #60404	; 0xebf4
   1a478:	movt	r1, #1
   1a47c:	mov	r0, #0
   1a480:	bl	11168 <dcgettext@plt>
   1a484:	mov	r1, r0
   1a488:	movw	r2, #60424	; 0xec08
   1a48c:	movt	r2, #1
   1a490:	mov	r0, #1
   1a494:	bl	112f4 <__printf_chk@plt>
   1a498:	mov	r2, #5
   1a49c:	movw	r1, #60448	; 0xec20
   1a4a0:	movt	r1, #1
   1a4a4:	mov	r0, #0
   1a4a8:	bl	11168 <dcgettext@plt>
   1a4ac:	mov	r1, r0
   1a4b0:	movw	r3, #58196	; 0xe354
   1a4b4:	movt	r3, #1
   1a4b8:	movw	r2, #58236	; 0xe37c
   1a4bc:	movt	r2, #1
   1a4c0:	mov	r0, #1
   1a4c4:	bl	112f4 <__printf_chk@plt>
   1a4c8:	mov	r2, #5
   1a4cc:	movw	r1, #60468	; 0xec34
   1a4d0:	movt	r1, #1
   1a4d4:	mov	r0, #0
   1a4d8:	bl	11168 <dcgettext@plt>
   1a4dc:	mov	r1, r0
   1a4e0:	movw	r2, #60508	; 0xec5c
   1a4e4:	movt	r2, #1
   1a4e8:	mov	r0, #1
   1a4ec:	ldr	r4, [sp]
   1a4f0:	ldr	lr, [sp, #4]
   1a4f4:	add	sp, sp, #8
   1a4f8:	b	112f4 <__printf_chk@plt>
   1a4fc:	str	r4, [sp, #-8]!
   1a500:	str	lr, [sp, #4]
   1a504:	bl	1c994 <__assert_fail@plt+0xb5b0>
   1a508:	cmp	r0, #0
   1a50c:	beq	1a51c <__assert_fail@plt+0x9138>
   1a510:	ldr	r4, [sp]
   1a514:	add	sp, sp, #4
   1a518:	pop	{pc}		; (ldr pc, [sp], #4)
   1a51c:	bl	1a974 <__assert_fail@plt+0x9590>
   1a520:	str	r4, [sp, #-8]!
   1a524:	str	lr, [sp, #4]
   1a528:	bl	1c994 <__assert_fail@plt+0xb5b0>
   1a52c:	cmp	r0, #0
   1a530:	beq	1a540 <__assert_fail@plt+0x915c>
   1a534:	ldr	r4, [sp]
   1a538:	add	sp, sp, #4
   1a53c:	pop	{pc}		; (ldr pc, [sp], #4)
   1a540:	bl	1a974 <__assert_fail@plt+0x9590>
   1a544:	str	r4, [sp, #-8]!
   1a548:	str	lr, [sp, #4]
   1a54c:	bl	1c994 <__assert_fail@plt+0xb5b0>
   1a550:	cmp	r0, #0
   1a554:	beq	1a564 <__assert_fail@plt+0x9180>
   1a558:	ldr	r4, [sp]
   1a55c:	add	sp, sp, #4
   1a560:	pop	{pc}		; (ldr pc, [sp], #4)
   1a564:	bl	1a974 <__assert_fail@plt+0x9590>
   1a568:	strd	r4, [sp, #-16]!
   1a56c:	mov	r5, r0
   1a570:	mov	r4, r1
   1a574:	str	r6, [sp, #8]
   1a578:	str	lr, [sp, #12]
   1a57c:	bl	1c9d0 <__assert_fail@plt+0xb5ec>
   1a580:	cmp	r0, #0
   1a584:	beq	1a598 <__assert_fail@plt+0x91b4>
   1a588:	ldrd	r4, [sp]
   1a58c:	ldr	r6, [sp, #8]
   1a590:	add	sp, sp, #12
   1a594:	pop	{pc}		; (ldr pc, [sp], #4)
   1a598:	adds	r4, r4, #0
   1a59c:	movne	r4, #1
   1a5a0:	cmp	r5, #0
   1a5a4:	moveq	r4, #1
   1a5a8:	cmp	r4, #0
   1a5ac:	beq	1a588 <__assert_fail@plt+0x91a4>
   1a5b0:	bl	1a974 <__assert_fail@plt+0x9590>
   1a5b4:	cmp	r1, #0
   1a5b8:	orreq	r1, r1, #1
   1a5bc:	str	r4, [sp, #-8]!
   1a5c0:	str	lr, [sp, #4]
   1a5c4:	bl	1c9d0 <__assert_fail@plt+0xb5ec>
   1a5c8:	cmp	r0, #0
   1a5cc:	beq	1a5dc <__assert_fail@plt+0x91f8>
   1a5d0:	ldr	r4, [sp]
   1a5d4:	add	sp, sp, #4
   1a5d8:	pop	{pc}		; (ldr pc, [sp], #4)
   1a5dc:	bl	1a974 <__assert_fail@plt+0x9590>
   1a5e0:	strd	r4, [sp, #-16]!
   1a5e4:	mov	r4, r0
   1a5e8:	mov	r5, r2
   1a5ec:	str	r6, [sp, #8]
   1a5f0:	mov	r6, r1
   1a5f4:	str	lr, [sp, #12]
   1a5f8:	bl	1cd54 <__assert_fail@plt+0xb970>
   1a5fc:	cmp	r0, #0
   1a600:	beq	1a614 <__assert_fail@plt+0x9230>
   1a604:	ldrd	r4, [sp]
   1a608:	ldr	r6, [sp, #8]
   1a60c:	add	sp, sp, #12
   1a610:	pop	{pc}		; (ldr pc, [sp], #4)
   1a614:	cmp	r4, #0
   1a618:	beq	1a628 <__assert_fail@plt+0x9244>
   1a61c:	cmp	r6, #0
   1a620:	cmpne	r5, #0
   1a624:	beq	1a604 <__assert_fail@plt+0x9220>
   1a628:	bl	1a974 <__assert_fail@plt+0x9590>
   1a62c:	b	1a5e0 <__assert_fail@plt+0x91fc>
   1a630:	cmp	r2, #0
   1a634:	cmpne	r1, #0
   1a638:	str	r4, [sp, #-8]!
   1a63c:	moveq	r2, #1
   1a640:	str	lr, [sp, #4]
   1a644:	moveq	r1, r2
   1a648:	bl	1cd54 <__assert_fail@plt+0xb970>
   1a64c:	cmp	r0, #0
   1a650:	beq	1a660 <__assert_fail@plt+0x927c>
   1a654:	ldr	r4, [sp]
   1a658:	add	sp, sp, #4
   1a65c:	pop	{pc}		; (ldr pc, [sp], #4)
   1a660:	bl	1a974 <__assert_fail@plt+0x9590>
   1a664:	mov	r2, r1
   1a668:	mov	r1, r0
   1a66c:	mov	r0, #0
   1a670:	b	1a5e0 <__assert_fail@plt+0x91fc>
   1a674:	mov	r2, r1
   1a678:	mov	r1, r0
   1a67c:	mov	r0, #0
   1a680:	b	1a630 <__assert_fail@plt+0x924c>
   1a684:	cmp	r0, #0
   1a688:	strd	r4, [sp, #-16]!
   1a68c:	mov	r5, r1
   1a690:	ldr	r4, [r1]
   1a694:	str	r6, [sp, #8]
   1a698:	str	lr, [sp, #12]
   1a69c:	beq	1a6cc <__assert_fail@plt+0x92e8>
   1a6a0:	lsr	r3, r4, #1
   1a6a4:	add	r3, r3, #1
   1a6a8:	adds	r4, r4, r3
   1a6ac:	bcs	1a6e8 <__assert_fail@plt+0x9304>
   1a6b0:	mov	r1, r4
   1a6b4:	bl	1a5e0 <__assert_fail@plt+0x91fc>
   1a6b8:	ldr	r6, [sp, #8]
   1a6bc:	str	r4, [r5]
   1a6c0:	ldrd	r4, [sp]
   1a6c4:	add	sp, sp, #12
   1a6c8:	pop	{pc}		; (ldr pc, [sp], #4)
   1a6cc:	cmp	r4, #0
   1a6d0:	bne	1a6b0 <__assert_fail@plt+0x92cc>
   1a6d4:	mov	r4, #64	; 0x40
   1a6d8:	udiv	r4, r4, r2
   1a6dc:	cmp	r2, #64	; 0x40
   1a6e0:	addhi	r4, r4, #1
   1a6e4:	b	1a6b0 <__assert_fail@plt+0x92cc>
   1a6e8:	bl	1a974 <__assert_fail@plt+0x9590>
   1a6ec:	mov	r2, #1
   1a6f0:	b	1a684 <__assert_fail@plt+0x92a0>
   1a6f4:	ldr	ip, [r1]
   1a6f8:	strd	r4, [sp, #-32]!	; 0xffffffe0
   1a6fc:	mov	r5, r1
   1a700:	strd	r6, [sp, #8]
   1a704:	str	lr, [sp, #28]
   1a708:	strd	r8, [sp, #16]
   1a70c:	asr	lr, ip, #1
   1a710:	ldr	r8, [sp, #32]
   1a714:	str	sl, [sp, #24]
   1a718:	adds	r4, ip, lr
   1a71c:	mvn	lr, r3
   1a720:	lsr	lr, lr, #31
   1a724:	mvnvs	r4, #-2147483648	; 0x80000000
   1a728:	cmp	r3, r4
   1a72c:	movge	r1, #0
   1a730:	andlt	r1, lr, #1
   1a734:	cmp	r1, #0
   1a738:	movne	r4, r3
   1a73c:	smull	r6, r7, r4, r8
   1a740:	cmp	r7, r6, asr #31
   1a744:	bne	1a7cc <__assert_fail@plt+0x93e8>
   1a748:	cmp	r6, #63	; 0x3f
   1a74c:	mov	r1, r6
   1a750:	ble	1a7b4 <__assert_fail@plt+0x93d0>
   1a754:	cmp	r0, #0
   1a758:	sub	r6, r4, ip
   1a75c:	streq	r0, [r5]
   1a760:	cmp	r6, r2
   1a764:	bge	1a794 <__assert_fail@plt+0x93b0>
   1a768:	adds	r4, ip, r2
   1a76c:	bvs	1a7c8 <__assert_fail@plt+0x93e4>
   1a770:	cmp	r4, r3
   1a774:	movle	r3, #0
   1a778:	andgt	r3, lr, #1
   1a77c:	cmp	r3, #0
   1a780:	bne	1a7c8 <__assert_fail@plt+0x93e4>
   1a784:	smull	r8, r9, r4, r8
   1a788:	cmp	r9, r8, asr #31
   1a78c:	mov	r1, r8
   1a790:	bne	1a7c8 <__assert_fail@plt+0x93e4>
   1a794:	bl	1a568 <__assert_fail@plt+0x9184>
   1a798:	ldrd	r6, [sp, #8]
   1a79c:	ldrd	r8, [sp, #16]
   1a7a0:	ldr	sl, [sp, #24]
   1a7a4:	str	r4, [r5]
   1a7a8:	ldrd	r4, [sp]
   1a7ac:	add	sp, sp, #28
   1a7b0:	pop	{pc}		; (ldr pc, [sp], #4)
   1a7b4:	mov	r6, #64	; 0x40
   1a7b8:	sdiv	r4, r6, r8
   1a7bc:	mls	r1, r8, r4, r6
   1a7c0:	sub	r1, r6, r1
   1a7c4:	b	1a754 <__assert_fail@plt+0x9370>
   1a7c8:	bl	1a974 <__assert_fail@plt+0x9590>
   1a7cc:	mvn	r6, #-2147483648	; 0x80000000
   1a7d0:	b	1a7b8 <__assert_fail@plt+0x93d4>
   1a7d4:	mov	r1, #1
   1a7d8:	str	r4, [sp, #-8]!
   1a7dc:	str	lr, [sp, #4]
   1a7e0:	bl	1c920 <__assert_fail@plt+0xb53c>
   1a7e4:	cmp	r0, #0
   1a7e8:	beq	1a7f8 <__assert_fail@plt+0x9414>
   1a7ec:	ldr	r4, [sp]
   1a7f0:	add	sp, sp, #4
   1a7f4:	pop	{pc}		; (ldr pc, [sp], #4)
   1a7f8:	bl	1a974 <__assert_fail@plt+0x9590>
   1a7fc:	mov	r1, #1
   1a800:	str	r4, [sp, #-8]!
   1a804:	str	lr, [sp, #4]
   1a808:	bl	1c920 <__assert_fail@plt+0xb53c>
   1a80c:	cmp	r0, #0
   1a810:	beq	1a820 <__assert_fail@plt+0x943c>
   1a814:	ldr	r4, [sp]
   1a818:	add	sp, sp, #4
   1a81c:	pop	{pc}		; (ldr pc, [sp], #4)
   1a820:	bl	1a974 <__assert_fail@plt+0x9590>
   1a824:	str	r4, [sp, #-8]!
   1a828:	str	lr, [sp, #4]
   1a82c:	bl	1c920 <__assert_fail@plt+0xb53c>
   1a830:	cmp	r0, #0
   1a834:	beq	1a844 <__assert_fail@plt+0x9460>
   1a838:	ldr	r4, [sp]
   1a83c:	add	sp, sp, #4
   1a840:	pop	{pc}		; (ldr pc, [sp], #4)
   1a844:	bl	1a974 <__assert_fail@plt+0x9590>
   1a848:	str	r4, [sp, #-8]!
   1a84c:	str	lr, [sp, #4]
   1a850:	bl	1c920 <__assert_fail@plt+0xb53c>
   1a854:	cmp	r0, #0
   1a858:	beq	1a868 <__assert_fail@plt+0x9484>
   1a85c:	ldr	r4, [sp]
   1a860:	add	sp, sp, #4
   1a864:	pop	{pc}		; (ldr pc, [sp], #4)
   1a868:	bl	1a974 <__assert_fail@plt+0x9590>
   1a86c:	strd	r4, [sp, #-16]!
   1a870:	mov	r4, r1
   1a874:	str	r6, [sp, #8]
   1a878:	mov	r6, r0
   1a87c:	mov	r0, r1
   1a880:	str	lr, [sp, #12]
   1a884:	bl	1c994 <__assert_fail@plt+0xb5b0>
   1a888:	subs	r5, r0, #0
   1a88c:	beq	1a8b0 <__assert_fail@plt+0x94cc>
   1a890:	mov	r2, r4
   1a894:	mov	r1, r6
   1a898:	bl	1112c <memcpy@plt>
   1a89c:	mov	r0, r5
   1a8a0:	ldrd	r4, [sp]
   1a8a4:	ldr	r6, [sp, #8]
   1a8a8:	add	sp, sp, #12
   1a8ac:	pop	{pc}		; (ldr pc, [sp], #4)
   1a8b0:	bl	1a974 <__assert_fail@plt+0x9590>
   1a8b4:	strd	r4, [sp, #-16]!
   1a8b8:	mov	r4, r1
   1a8bc:	str	r6, [sp, #8]
   1a8c0:	mov	r6, r0
   1a8c4:	mov	r0, r1
   1a8c8:	str	lr, [sp, #12]
   1a8cc:	bl	1c994 <__assert_fail@plt+0xb5b0>
   1a8d0:	subs	r5, r0, #0
   1a8d4:	beq	1a8f8 <__assert_fail@plt+0x9514>
   1a8d8:	mov	r2, r4
   1a8dc:	mov	r1, r6
   1a8e0:	bl	1112c <memcpy@plt>
   1a8e4:	mov	r0, r5
   1a8e8:	ldrd	r4, [sp]
   1a8ec:	ldr	r6, [sp, #8]
   1a8f0:	add	sp, sp, #12
   1a8f4:	pop	{pc}		; (ldr pc, [sp], #4)
   1a8f8:	bl	1a974 <__assert_fail@plt+0x9590>
   1a8fc:	strd	r4, [sp, #-16]!
   1a900:	mov	r4, r1
   1a904:	str	r6, [sp, #8]
   1a908:	mov	r6, r0
   1a90c:	add	r0, r1, #1
   1a910:	str	lr, [sp, #12]
   1a914:	bl	1c994 <__assert_fail@plt+0xb5b0>
   1a918:	subs	r5, r0, #0
   1a91c:	beq	1a948 <__assert_fail@plt+0x9564>
   1a920:	mov	r3, #0
   1a924:	mov	r1, r6
   1a928:	mov	r2, r4
   1a92c:	strb	r3, [r5, r4]
   1a930:	bl	1112c <memcpy@plt>
   1a934:	mov	r0, r5
   1a938:	ldrd	r4, [sp]
   1a93c:	ldr	r6, [sp, #8]
   1a940:	add	sp, sp, #12
   1a944:	pop	{pc}		; (ldr pc, [sp], #4)
   1a948:	bl	1a974 <__assert_fail@plt+0x9590>
   1a94c:	str	r4, [sp, #-8]!
   1a950:	mov	r4, r0
   1a954:	str	lr, [sp, #4]
   1a958:	bl	11294 <strlen@plt>
   1a95c:	add	r1, r0, #1
   1a960:	mov	r0, r4
   1a964:	ldr	r4, [sp]
   1a968:	ldr	lr, [sp, #4]
   1a96c:	add	sp, sp, #8
   1a970:	b	1a86c <__assert_fail@plt+0x9488>
   1a974:	movw	r3, #61828	; 0xf184
   1a978:	movt	r3, #2
   1a97c:	str	r4, [sp, #-8]!
   1a980:	ldr	r4, [r3]
   1a984:	mov	r2, #5
   1a988:	movw	r1, #60588	; 0xecac
   1a98c:	movt	r1, #1
   1a990:	mov	r0, #0
   1a994:	str	lr, [sp, #4]
   1a998:	bl	11168 <dcgettext@plt>
   1a99c:	mov	r3, r0
   1a9a0:	movw	r2, #59452	; 0xe83c
   1a9a4:	movt	r2, #1
   1a9a8:	mov	r1, #0
   1a9ac:	mov	r0, r4
   1a9b0:	bl	11204 <error@plt>
   1a9b4:	bl	113cc <abort@plt>
   1a9b8:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1a9bc:	strd	r6, [sp, #8]
   1a9c0:	mov	r6, r2
   1a9c4:	mov	r7, r3
   1a9c8:	str	r8, [sp, #16]
   1a9cc:	mov	r2, r1
   1a9d0:	mov	r1, #0
   1a9d4:	str	lr, [sp, #20]
   1a9d8:	sub	sp, sp, #16
   1a9dc:	mov	r8, r0
   1a9e0:	ldr	ip, [sp, #48]	; 0x30
   1a9e4:	add	r3, sp, #8
   1a9e8:	str	ip, [sp]
   1a9ec:	bl	1ab28 <__assert_fail@plt+0x9744>
   1a9f0:	subs	r4, r0, #0
   1a9f4:	bne	1aa44 <__assert_fail@plt+0x9660>
   1a9f8:	ldrd	r4, [sp, #8]
   1a9fc:	ldrd	r0, [sp, #40]	; 0x28
   1aa00:	cmp	r4, r6
   1aa04:	sbcs	r3, r5, r7
   1aa08:	movlt	r3, #1
   1aa0c:	movge	r3, #0
   1aa10:	cmp	r0, r4
   1aa14:	sbcs	r2, r1, r5
   1aa18:	orrlt	r3, r3, #1
   1aa1c:	cmp	r3, #0
   1aa20:	bne	1aac4 <__assert_fail@plt+0x96e0>
   1aa24:	mov	r0, r4
   1aa28:	mov	r1, r5
   1aa2c:	add	sp, sp, #16
   1aa30:	ldrd	r4, [sp]
   1aa34:	ldrd	r6, [sp, #8]
   1aa38:	ldr	r8, [sp, #16]
   1aa3c:	add	sp, sp, #20
   1aa40:	pop	{pc}		; (ldr pc, [sp], #4)
   1aa44:	bl	112c4 <__errno_location@plt>
   1aa48:	cmp	r4, #1
   1aa4c:	moveq	r3, #75	; 0x4b
   1aa50:	moveq	r4, r3
   1aa54:	streq	r3, [r0]
   1aa58:	beq	1aab4 <__assert_fail@plt+0x96d0>
   1aa5c:	cmp	r4, #3
   1aa60:	beq	1aaa8 <__assert_fail@plt+0x96c4>
   1aa64:	ldr	r3, [sp, #56]	; 0x38
   1aa68:	ldr	r4, [r0]
   1aa6c:	cmp	r3, #0
   1aa70:	bne	1aa7c <__assert_fail@plt+0x9698>
   1aa74:	mov	r3, #1
   1aa78:	str	r3, [sp, #56]	; 0x38
   1aa7c:	cmp	r4, #22
   1aa80:	moveq	r4, #0
   1aa84:	mov	r0, r8
   1aa88:	bl	19950 <__assert_fail@plt+0x856c>
   1aa8c:	movw	r2, #59448	; 0xe838
   1aa90:	movt	r2, #1
   1aa94:	str	r0, [sp]
   1aa98:	mov	r1, r4
   1aa9c:	ldr	r3, [sp, #52]	; 0x34
   1aaa0:	ldr	r0, [sp, #56]	; 0x38
   1aaa4:	bl	11204 <error@plt>
   1aaa8:	mov	r3, #0
   1aaac:	mov	r4, r3
   1aab0:	str	r3, [r0]
   1aab4:	ldr	r3, [sp, #56]	; 0x38
   1aab8:	cmp	r3, #0
   1aabc:	bne	1aa84 <__assert_fail@plt+0x96a0>
   1aac0:	b	1aa74 <__assert_fail@plt+0x9690>
   1aac4:	bl	112c4 <__errno_location@plt>
   1aac8:	cmp	r4, #1073741824	; 0x40000000
   1aacc:	sbcs	r3, r5, #0
   1aad0:	bge	1aaf8 <__assert_fail@plt+0x9714>
   1aad4:	mov	r2, #-1073741824	; 0xc0000000
   1aad8:	mvn	r3, #0
   1aadc:	cmp	r4, r2
   1aae0:	sbcs	r3, r5, r3
   1aae4:	blt	1aaf8 <__assert_fail@plt+0x9714>
   1aae8:	mov	r3, #34	; 0x22
   1aaec:	mov	r4, r3
   1aaf0:	str	r3, [r0]
   1aaf4:	b	1aab4 <__assert_fail@plt+0x96d0>
   1aaf8:	mov	r3, #75	; 0x4b
   1aafc:	str	r3, [r0]
   1ab00:	ldr	r3, [sp, #56]	; 0x38
   1ab04:	cmp	r3, #0
   1ab08:	movne	r4, #75	; 0x4b
   1ab0c:	bne	1aa84 <__assert_fail@plt+0x96a0>
   1ab10:	mov	r3, #1
   1ab14:	mov	r4, #75	; 0x4b
   1ab18:	str	r3, [sp, #56]	; 0x38
   1ab1c:	b	1aa84 <__assert_fail@plt+0x96a0>
   1ab20:	mov	r1, #10
   1ab24:	b	1a9b8 <__assert_fail@plt+0x95d4>
   1ab28:	cmp	r2, #36	; 0x24
   1ab2c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1ab30:	strd	r6, [sp, #8]
   1ab34:	strd	r8, [sp, #16]
   1ab38:	strd	sl, [sp, #24]
   1ab3c:	str	lr, [sp, #32]
   1ab40:	sub	sp, sp, #44	; 0x2c
   1ab44:	bhi	1b730 <__assert_fail@plt+0xa34c>
   1ab48:	cmp	r1, #0
   1ab4c:	mov	r5, r1
   1ab50:	mov	r6, r2
   1ab54:	addeq	r5, sp, #36	; 0x24
   1ab58:	mov	sl, r0
   1ab5c:	mov	r7, r3
   1ab60:	bl	112c4 <__errno_location@plt>
   1ab64:	mov	fp, r0
   1ab68:	mov	r4, #0
   1ab6c:	mov	r2, r6
   1ab70:	mov	r3, r4
   1ab74:	mov	r1, r5
   1ab78:	mov	r0, sl
   1ab7c:	str	r4, [fp]
   1ab80:	bl	11390 <__strtoll_internal@plt>
   1ab84:	ldr	r6, [r5]
   1ab88:	mov	r8, r0
   1ab8c:	mov	r9, r1
   1ab90:	cmp	r6, sl
   1ab94:	beq	1abec <__assert_fail@plt+0x9808>
   1ab98:	ldr	r4, [fp]
   1ab9c:	cmp	r4, #0
   1aba0:	beq	1abb0 <__assert_fail@plt+0x97cc>
   1aba4:	cmp	r4, #34	; 0x22
   1aba8:	bne	1acf0 <__assert_fail@plt+0x990c>
   1abac:	mov	r4, #1
   1abb0:	ldr	r3, [sp, #80]	; 0x50
   1abb4:	cmp	r3, #0
   1abb8:	beq	1abc8 <__assert_fail@plt+0x97e4>
   1abbc:	ldrb	sl, [r6]
   1abc0:	cmp	sl, #0
   1abc4:	bne	1adf4 <__assert_fail@plt+0x9a10>
   1abc8:	strd	r8, [r7]
   1abcc:	mov	r0, r4
   1abd0:	add	sp, sp, #44	; 0x2c
   1abd4:	ldrd	r4, [sp]
   1abd8:	ldrd	r6, [sp, #8]
   1abdc:	ldrd	r8, [sp, #16]
   1abe0:	ldrd	sl, [sp, #24]
   1abe4:	add	sp, sp, #32
   1abe8:	pop	{pc}		; (ldr pc, [sp], #4)
   1abec:	ldr	r3, [sp, #80]	; 0x50
   1abf0:	cmp	r3, r4
   1abf4:	beq	1acf0 <__assert_fail@plt+0x990c>
   1abf8:	ldrb	sl, [sl]
   1abfc:	cmp	sl, r4
   1ac00:	beq	1acf0 <__assert_fail@plt+0x990c>
   1ac04:	mov	r1, sl
   1ac08:	mov	r0, r3
   1ac0c:	bl	112a0 <strchr@plt>
   1ac10:	cmp	r0, r4
   1ac14:	movne	r8, #1
   1ac18:	movne	r9, #0
   1ac1c:	beq	1acf0 <__assert_fail@plt+0x990c>
   1ac20:	sub	fp, sl, #69	; 0x45
   1ac24:	cmp	fp, #47	; 0x2f
   1ac28:	ldrls	pc, [pc, fp, lsl #2]
   1ac2c:	b	1ae10 <__assert_fail@plt+0x9a2c>
   1ac30:	strdeq	sl, [r1], -r8
   1ac34:	andeq	sl, r1, r0, lsl lr
   1ac38:	strdeq	sl, [r1], -r8
   1ac3c:	andeq	sl, r1, r0, lsl lr
   1ac40:	andeq	sl, r1, r0, lsl lr
   1ac44:	andeq	sl, r1, r0, lsl lr
   1ac48:	strdeq	sl, [r1], -r8
   1ac4c:	andeq	sl, r1, r0, lsl lr
   1ac50:	strdeq	sl, [r1], -r8
   1ac54:	andeq	sl, r1, r0, lsl lr
   1ac58:	andeq	sl, r1, r0, lsl lr
   1ac5c:	strdeq	sl, [r1], -r8
   1ac60:	andeq	sl, r1, r0, lsl lr
   1ac64:	andeq	sl, r1, r0, lsl lr
   1ac68:	andeq	sl, r1, r0, lsl lr
   1ac6c:	strdeq	sl, [r1], -r8
   1ac70:	andeq	sl, r1, r0, lsl lr
   1ac74:	andeq	sl, r1, r0, lsl lr
   1ac78:	andeq	sl, r1, r0, lsl lr
   1ac7c:	andeq	sl, r1, r0, lsl lr
   1ac80:	strdeq	sl, [r1], -r8
   1ac84:	strdeq	sl, [r1], -r8
   1ac88:	andeq	sl, r1, r0, lsl lr
   1ac8c:	andeq	sl, r1, r0, lsl lr
   1ac90:	andeq	sl, r1, r0, lsl lr
   1ac94:	andeq	sl, r1, r0, lsl lr
   1ac98:	andeq	sl, r1, r0, lsl lr
   1ac9c:	andeq	sl, r1, r0, lsl lr
   1aca0:	andeq	sl, r1, r0, lsl lr
   1aca4:	andeq	sl, r1, r0, lsl lr
   1aca8:	andeq	sl, r1, r0, lsl lr
   1acac:	andeq	sl, r1, r0, lsl lr
   1acb0:	andeq	sl, r1, r0, lsl lr
   1acb4:	andeq	sl, r1, r0, lsl lr
   1acb8:	strdeq	sl, [r1], -r8
   1acbc:	andeq	sl, r1, r0, lsl lr
   1acc0:	andeq	sl, r1, r0, lsl lr
   1acc4:	andeq	sl, r1, r0, lsl lr
   1acc8:	strdeq	sl, [r1], -r8
   1accc:	andeq	sl, r1, r0, lsl lr
   1acd0:	strdeq	sl, [r1], -r8
   1acd4:	andeq	sl, r1, r0, lsl lr
   1acd8:	andeq	sl, r1, r0, lsl lr
   1acdc:	andeq	sl, r1, r0, lsl lr
   1ace0:	andeq	sl, r1, r0, lsl lr
   1ace4:	andeq	sl, r1, r0, lsl lr
   1ace8:	andeq	sl, r1, r0, lsl lr
   1acec:	strdeq	sl, [r1], -r8
   1acf0:	mov	r4, #4
   1acf4:	b	1abcc <__assert_fail@plt+0x97e8>
   1acf8:	mov	r1, #48	; 0x30
   1acfc:	ldr	r0, [sp, #80]	; 0x50
   1ad00:	bl	112a0 <strchr@plt>
   1ad04:	cmp	r0, #0
   1ad08:	beq	1ae10 <__assert_fail@plt+0x9a2c>
   1ad0c:	ldrb	r3, [r6, #1]
   1ad10:	cmp	r3, #68	; 0x44
   1ad14:	beq	1b3d8 <__assert_fail@plt+0x9ff4>
   1ad18:	cmp	r3, #105	; 0x69
   1ad1c:	beq	1b588 <__assert_fail@plt+0xa1a4>
   1ad20:	cmp	r3, #66	; 0x42
   1ad24:	beq	1b3d8 <__assert_fail@plt+0x9ff4>
   1ad28:	cmp	fp, #47	; 0x2f
   1ad2c:	ldrls	pc, [pc, fp, lsl #2]
   1ad30:	b	1ae08 <__assert_fail@plt+0x9a24>
   1ad34:	andeq	fp, r1, r0, lsr r3
   1ad38:	andeq	sl, r1, r8, lsl #28
   1ad3c:	andeq	fp, r1, r0, lsr #6
   1ad40:	andeq	sl, r1, r8, lsl #28
   1ad44:	andeq	sl, r1, r8, lsl #28
   1ad48:	andeq	sl, r1, r8, lsl #28
   1ad4c:	muleq	r1, ip, r3
   1ad50:	andeq	sl, r1, r8, lsl #28
   1ad54:	andeq	fp, r1, ip, lsl #7
   1ad58:	andeq	sl, r1, r8, lsl #28
   1ad5c:	andeq	sl, r1, r8, lsl #28
   1ad60:	andeq	fp, r1, ip, asr r3
   1ad64:	andeq	sl, r1, r8, lsl #28
   1ad68:	andeq	sl, r1, r8, lsl #28
   1ad6c:	andeq	sl, r1, r8, lsl #28
   1ad70:	andeq	fp, r1, ip, asr #6
   1ad74:	andeq	sl, r1, r8, lsl #28
   1ad78:	andeq	sl, r1, r8, lsl #28
   1ad7c:	andeq	sl, r1, r8, lsl #28
   1ad80:	andeq	sl, r1, r8, lsl #28
   1ad84:	andeq	fp, r1, ip, ror r3
   1ad88:	andeq	fp, r1, ip, ror #6
   1ad8c:	andeq	sl, r1, r8, lsl #28
   1ad90:	andeq	sl, r1, r8, lsl #28
   1ad94:	andeq	sl, r1, r8, lsl #28
   1ad98:	andeq	sl, r1, r8, lsl #28
   1ad9c:	andeq	sl, r1, r8, lsl #28
   1ada0:	andeq	sl, r1, r8, lsl #28
   1ada4:	andeq	sl, r1, r8, lsl #28
   1ada8:	andeq	sl, r1, r0, lsl #30
   1adac:	andeq	fp, r1, r0, asr #6
   1adb0:	andeq	sl, r1, r8, lsl #28
   1adb4:	andeq	sl, r1, r8, lsl #28
   1adb8:	andeq	sl, r1, r8, lsl #28
   1adbc:	andeq	fp, r1, r0, lsr #6
   1adc0:	andeq	sl, r1, r8, lsl #28
   1adc4:	andeq	sl, r1, r8, lsl #28
   1adc8:	andeq	sl, r1, r8, lsl #28
   1adcc:	muleq	r1, ip, r3
   1add0:	andeq	sl, r1, r8, lsl #28
   1add4:	andeq	fp, r1, ip, lsl #7
   1add8:	andeq	sl, r1, r8, lsl #28
   1addc:	andeq	sl, r1, r8, lsl #28
   1ade0:	andeq	sl, r1, r8, lsl #28
   1ade4:	andeq	sl, r1, r8, lsl #28
   1ade8:	andeq	sl, r1, r8, lsl #28
   1adec:	andeq	sl, r1, r8, lsl #28
   1adf0:	andeq	fp, r1, ip, asr #6
   1adf4:	mov	r1, sl
   1adf8:	ldr	r0, [sp, #80]	; 0x50
   1adfc:	bl	112a0 <strchr@plt>
   1ae00:	cmp	r0, #0
   1ae04:	bne	1ac20 <__assert_fail@plt+0x983c>
   1ae08:	orr	r4, r4, #2
   1ae0c:	b	1abc8 <__assert_fail@plt+0x97e4>
   1ae10:	mov	r3, #1
   1ae14:	mov	fp, #1024	; 0x400
   1ae18:	sub	sl, sl, #66	; 0x42
   1ae1c:	cmp	sl, #53	; 0x35
   1ae20:	ldrls	pc, [pc, sl, lsl #2]
   1ae24:	b	1ae08 <__assert_fail@plt+0x9a24>
   1ae28:	andeq	sl, r1, ip, asr #30
   1ae2c:	andeq	sl, r1, r8, lsl #28
   1ae30:	andeq	sl, r1, r8, lsl #28
   1ae34:	andeq	fp, r1, r8, lsr r1
   1ae38:	andeq	sl, r1, r8, lsl #28
   1ae3c:	andeq	fp, r1, r0, asr #1
   1ae40:	andeq	sl, r1, r8, lsl #28
   1ae44:	andeq	sl, r1, r8, lsl #28
   1ae48:	andeq	sl, r1, r8, lsl #28
   1ae4c:	andeq	fp, r1, r4, lsl #1
   1ae50:	andeq	sl, r1, r8, lsl #28
   1ae54:	andeq	fp, r1, r8, lsr #32
   1ae58:	andeq	sl, r1, r8, lsl #28
   1ae5c:	andeq	sl, r1, r8, lsl #28
   1ae60:	andeq	fp, r1, r8, lsr #4
   1ae64:	andeq	sl, r1, r8, lsl #28
   1ae68:	andeq	sl, r1, r8, lsl #28
   1ae6c:	andeq	sl, r1, r8, lsl #28
   1ae70:			; <UNDEFINED> instruction: 0x0001b1b0
   1ae74:	andeq	sl, r1, r8, lsl #28
   1ae78:	andeq	sl, r1, r8, lsl #28
   1ae7c:	andeq	sl, r1, r8, lsl #28
   1ae80:	andeq	sl, r1, r8, lsl #28
   1ae84:	andeq	fp, r1, r0, lsr #5
   1ae88:			; <UNDEFINED> instruction: 0x0001afb0
   1ae8c:	andeq	sl, r1, r8, lsl #28
   1ae90:	andeq	sl, r1, r8, lsl #28
   1ae94:	andeq	sl, r1, r8, lsl #28
   1ae98:	andeq	sl, r1, r8, lsl #28
   1ae9c:	andeq	sl, r1, r8, lsl #28
   1aea0:	andeq	sl, r1, r8, lsl #28
   1aea4:	andeq	sl, r1, r8, lsl #28
   1aea8:	andeq	sl, r1, r4, lsl #30
   1aeac:	andeq	fp, r1, r8, lsl r3
   1aeb0:	andeq	sl, r1, r8, lsl #28
   1aeb4:	andeq	sl, r1, r8, lsl #28
   1aeb8:	andeq	sl, r1, r8, lsl #28
   1aebc:	andeq	fp, r1, r0, asr #1
   1aec0:	andeq	sl, r1, r8, lsl #28
   1aec4:	andeq	sl, r1, r8, lsl #28
   1aec8:	andeq	sl, r1, r8, lsl #28
   1aecc:	andeq	fp, r1, r4, lsl #1
   1aed0:	andeq	sl, r1, r8, lsl #28
   1aed4:	andeq	fp, r1, r8, lsr #32
   1aed8:	andeq	sl, r1, r8, lsl #28
   1aedc:	andeq	sl, r1, r8, lsl #28
   1aee0:	andeq	sl, r1, r8, lsl #28
   1aee4:	andeq	sl, r1, r8, lsl #28
   1aee8:	andeq	sl, r1, r8, lsl #28
   1aeec:	andeq	sl, r1, r8, lsl #28
   1aef0:			; <UNDEFINED> instruction: 0x0001b1b0
   1aef4:	andeq	sl, r1, r8, lsl #28
   1aef8:	andeq	sl, r1, r8, lsl #28
   1aefc:	andeq	sl, r1, ip, ror #30
   1af00:	mov	r3, #1
   1af04:	cmp	r9, r8, asr #31
   1af08:	mov	ip, #0
   1af0c:	str	r3, [sp, #4]
   1af10:	bne	1b5a0 <__assert_fail@plt+0xa1bc>
   1af14:	lsl	r3, r9, #9
   1af18:	lsl	r2, r8, #9
   1af1c:	orr	r3, r3, r8, lsr #23
   1af20:	cmp	ip, #0
   1af24:	bne	1af94 <__assert_fail@plt+0x9bb0>
   1af28:	mov	r8, r2
   1af2c:	mov	r9, r3
   1af30:	ldr	r2, [sp, #4]
   1af34:	add	r3, r6, r2
   1af38:	str	r3, [r5]
   1af3c:	ldrb	r3, [r6, r2]
   1af40:	cmp	r3, #0
   1af44:	beq	1abc8 <__assert_fail@plt+0x97e4>
   1af48:	b	1ae08 <__assert_fail@plt+0x9a24>
   1af4c:	cmp	r9, r8, asr #31
   1af50:	mov	ip, #0
   1af54:	str	r3, [sp, #4]
   1af58:	bne	1b5e8 <__assert_fail@plt+0xa204>
   1af5c:	lsl	r3, r9, #10
   1af60:	lsl	r2, r8, #10
   1af64:	orr	r3, r3, r8, lsr #22
   1af68:	b	1af20 <__assert_fail@plt+0x9b3c>
   1af6c:	cmp	r9, r8, asr #31
   1af70:	mov	r1, #0
   1af74:	str	r3, [sp, #4]
   1af78:	bne	1b66c <__assert_fail@plt+0xa288>
   1af7c:	adds	ip, r8, r8
   1af80:	adc	r3, r9, r9
   1af84:	cmp	r1, #0
   1af88:	moveq	r8, ip
   1af8c:	moveq	r9, r3
   1af90:	beq	1af30 <__assert_fail@plt+0x9b4c>
   1af94:	cmp	r8, #0
   1af98:	mov	r4, #1
   1af9c:	sbcs	r3, r9, #0
   1afa0:	blt	1b3cc <__assert_fail@plt+0x9fe8>
   1afa4:	mvn	r8, #0
   1afa8:	mvn	r9, #-2147483648	; 0x80000000
   1afac:	b	1af30 <__assert_fail@plt+0x9b4c>
   1afb0:	str	r3, [sp, #4]
   1afb4:	asr	r1, fp, #31
   1afb8:	mov	r0, fp
   1afbc:	mov	r3, #0
   1afc0:	mov	ip, #7
   1afc4:	mov	lr, r3
   1afc8:	strd	r0, [sp, #8]
   1afcc:	str	r4, [sp, #16]
   1afd0:	str	r5, [sp, #24]
   1afd4:	b	1afe8 <__assert_fail@plt+0x9c04>
   1afd8:	mov	r8, fp
   1afdc:	mov	r9, r2
   1afe0:	subs	ip, ip, #1
   1afe4:	beq	1b3ac <__assert_fail@plt+0x9fc8>
   1afe8:	cmp	r9, r8, asr #31
   1afec:	mov	r1, #0
   1aff0:	bne	1b4e0 <__assert_fail@plt+0xa0fc>
   1aff4:	smull	r2, r3, r8, r0
   1aff8:	mov	fp, r2
   1affc:	mov	r2, r3
   1b000:	cmp	r1, #0
   1b004:	beq	1afd8 <__assert_fail@plt+0x9bf4>
   1b008:	cmp	r8, #0
   1b00c:	mov	lr, #1
   1b010:	sbcs	r3, r9, #0
   1b014:	mvnge	r8, #0
   1b018:	mvnge	r9, #-2147483648	; 0x80000000
   1b01c:	movlt	r8, #0
   1b020:	movlt	r9, #-2147483648	; 0x80000000
   1b024:	b	1afe0 <__assert_fail@plt+0x9bfc>
   1b028:	str	r3, [sp, #4]
   1b02c:	asr	r3, fp, #31
   1b030:	mov	r2, fp
   1b034:	mov	r1, #0
   1b038:	cmp	r9, r8, asr #31
   1b03c:	strd	r2, [sp, #8]
   1b040:	bne	1b62c <__assert_fail@plt+0xa248>
   1b044:	smull	r2, r3, r8, fp
   1b048:	mov	lr, r2
   1b04c:	subs	ip, r1, #0
   1b050:	bne	1af94 <__assert_fail@plt+0x9bb0>
   1b054:	cmp	r3, lr, asr #31
   1b058:	mov	r0, lr
   1b05c:	mov	r1, r3
   1b060:	bne	1b6c0 <__assert_fail@plt+0xa2dc>
   1b064:	smull	r2, r3, lr, fp
   1b068:	mov	sl, r2
   1b06c:	mov	r2, r3
   1b070:	cmp	ip, #0
   1b074:	bne	1b3bc <__assert_fail@plt+0x9fd8>
   1b078:	mov	r8, sl
   1b07c:	mov	r9, r2
   1b080:	b	1af30 <__assert_fail@plt+0x9b4c>
   1b084:	str	r3, [sp, #4]
   1b088:	asr	r3, fp, #31
   1b08c:	mov	r2, fp
   1b090:	mov	ip, #0
   1b094:	cmp	r9, r8, asr #31
   1b098:	strd	r2, [sp, #8]
   1b09c:	bne	1b454 <__assert_fail@plt+0xa070>
   1b0a0:	smull	r2, r3, r8, fp
   1b0a4:	mov	r1, r2
   1b0a8:	mov	r2, r3
   1b0ac:	cmp	ip, #0
   1b0b0:	bne	1af94 <__assert_fail@plt+0x9bb0>
   1b0b4:	mov	r8, r1
   1b0b8:	mov	r9, r2
   1b0bc:	b	1af30 <__assert_fail@plt+0x9b4c>
   1b0c0:	str	r3, [sp, #4]
   1b0c4:	asr	r1, fp, #31
   1b0c8:	mov	r0, fp
   1b0cc:	mov	r3, #0
   1b0d0:	mov	ip, #3
   1b0d4:	mov	lr, r3
   1b0d8:	strd	r0, [sp, #8]
   1b0dc:	str	r4, [sp, #16]
   1b0e0:	str	r5, [sp, #24]
   1b0e4:	b	1b0f8 <__assert_fail@plt+0x9d14>
   1b0e8:	mov	r8, fp
   1b0ec:	mov	r9, r2
   1b0f0:	subs	ip, ip, #1
   1b0f4:	beq	1b3ac <__assert_fail@plt+0x9fc8>
   1b0f8:	cmp	r9, r8, asr #31
   1b0fc:	mov	r1, #0
   1b100:	bne	1b41c <__assert_fail@plt+0xa038>
   1b104:	smull	r2, r3, r8, r0
   1b108:	mov	fp, r2
   1b10c:	mov	r2, r3
   1b110:	cmp	r1, #0
   1b114:	beq	1b0e8 <__assert_fail@plt+0x9d04>
   1b118:	cmp	r8, #0
   1b11c:	mov	lr, #1
   1b120:	sbcs	r3, r9, #0
   1b124:	mvnge	r8, #0
   1b128:	mvnge	r9, #-2147483648	; 0x80000000
   1b12c:	movlt	r8, #0
   1b130:	movlt	r9, #-2147483648	; 0x80000000
   1b134:	b	1b0f0 <__assert_fail@plt+0x9d0c>
   1b138:	str	r3, [sp, #4]
   1b13c:	asr	r1, fp, #31
   1b140:	mov	r0, fp
   1b144:	mov	r3, #0
   1b148:	mov	ip, #6
   1b14c:	mov	lr, r3
   1b150:	strd	r0, [sp, #8]
   1b154:	str	r4, [sp, #16]
   1b158:	str	r5, [sp, #24]
   1b15c:	b	1b170 <__assert_fail@plt+0x9d8c>
   1b160:	mov	r8, fp
   1b164:	mov	r9, r2
   1b168:	subs	ip, ip, #1
   1b16c:	beq	1b3ac <__assert_fail@plt+0x9fc8>
   1b170:	cmp	r9, r8, asr #31
   1b174:	mov	r1, #0
   1b178:	bne	1b550 <__assert_fail@plt+0xa16c>
   1b17c:	smull	r2, r3, r8, r0
   1b180:	mov	fp, r2
   1b184:	mov	r2, r3
   1b188:	cmp	r1, #0
   1b18c:	beq	1b160 <__assert_fail@plt+0x9d7c>
   1b190:	cmp	r8, #0
   1b194:	mov	lr, #1
   1b198:	sbcs	r3, r9, #0
   1b19c:	mvnge	r8, #0
   1b1a0:	mvnge	r9, #-2147483648	; 0x80000000
   1b1a4:	movlt	r8, #0
   1b1a8:	movlt	r9, #-2147483648	; 0x80000000
   1b1ac:	b	1b168 <__assert_fail@plt+0x9d84>
   1b1b0:	str	r3, [sp, #4]
   1b1b4:	asr	r1, fp, #31
   1b1b8:	mov	r0, fp
   1b1bc:	mov	r3, #0
   1b1c0:	mov	ip, #4
   1b1c4:	mov	lr, r3
   1b1c8:	strd	r0, [sp, #8]
   1b1cc:	str	r4, [sp, #16]
   1b1d0:	str	r5, [sp, #24]
   1b1d4:	b	1b1e8 <__assert_fail@plt+0x9e04>
   1b1d8:	mov	r8, fp
   1b1dc:	mov	r9, r2
   1b1e0:	subs	ip, ip, #1
   1b1e4:	beq	1b3ac <__assert_fail@plt+0x9fc8>
   1b1e8:	cmp	r9, r8, asr #31
   1b1ec:	mov	r1, #0
   1b1f0:	bne	1b518 <__assert_fail@plt+0xa134>
   1b1f4:	smull	r2, r3, r8, r0
   1b1f8:	mov	fp, r2
   1b1fc:	mov	r2, r3
   1b200:	cmp	r1, #0
   1b204:	beq	1b1d8 <__assert_fail@plt+0x9df4>
   1b208:	cmp	r8, #0
   1b20c:	mov	lr, #1
   1b210:	sbcs	r3, r9, #0
   1b214:	mvnge	r8, #0
   1b218:	mvnge	r9, #-2147483648	; 0x80000000
   1b21c:	movlt	r8, #0
   1b220:	movlt	r9, #-2147483648	; 0x80000000
   1b224:	b	1b1e0 <__assert_fail@plt+0x9dfc>
   1b228:	str	r3, [sp, #4]
   1b22c:	asr	r1, fp, #31
   1b230:	mov	r0, fp
   1b234:	mov	r3, #0
   1b238:	mov	ip, #5
   1b23c:	mov	lr, r3
   1b240:	strd	r0, [sp, #8]
   1b244:	str	r4, [sp, #16]
   1b248:	str	r5, [sp, #24]
   1b24c:	b	1b260 <__assert_fail@plt+0x9e7c>
   1b250:	mov	r8, fp
   1b254:	mov	r9, r2
   1b258:	subs	ip, ip, #1
   1b25c:	beq	1b3ac <__assert_fail@plt+0x9fc8>
   1b260:	cmp	r9, r8, asr #31
   1b264:	mov	r1, #0
   1b268:	bne	1b4a8 <__assert_fail@plt+0xa0c4>
   1b26c:	smull	r2, r3, r8, r0
   1b270:	mov	fp, r2
   1b274:	mov	r2, r3
   1b278:	cmp	r1, #0
   1b27c:	beq	1b250 <__assert_fail@plt+0x9e6c>
   1b280:	cmp	r8, #0
   1b284:	mov	lr, #1
   1b288:	sbcs	r3, r9, #0
   1b28c:	mvnge	r8, #0
   1b290:	mvnge	r9, #-2147483648	; 0x80000000
   1b294:	movlt	r8, #0
   1b298:	movlt	r9, #-2147483648	; 0x80000000
   1b29c:	b	1b258 <__assert_fail@plt+0x9e74>
   1b2a0:	str	r3, [sp, #4]
   1b2a4:	asr	r1, fp, #31
   1b2a8:	mov	r0, fp
   1b2ac:	mov	r3, #0
   1b2b0:	mov	ip, #8
   1b2b4:	mov	lr, r3
   1b2b8:	strd	r0, [sp, #8]
   1b2bc:	str	r4, [sp, #16]
   1b2c0:	str	r5, [sp, #24]
   1b2c4:	b	1b2d8 <__assert_fail@plt+0x9ef4>
   1b2c8:	mov	r8, fp
   1b2cc:	mov	r9, r2
   1b2d0:	subs	ip, ip, #1
   1b2d4:	beq	1b3ac <__assert_fail@plt+0x9fc8>
   1b2d8:	cmp	r9, r8, asr #31
   1b2dc:	mov	r1, #0
   1b2e0:	bne	1b3e4 <__assert_fail@plt+0xa000>
   1b2e4:	smull	r2, r3, r8, r0
   1b2e8:	mov	fp, r2
   1b2ec:	mov	r2, r3
   1b2f0:	cmp	r1, #0
   1b2f4:	beq	1b2c8 <__assert_fail@plt+0x9ee4>
   1b2f8:	cmp	r8, #0
   1b2fc:	mov	lr, #1
   1b300:	sbcs	r3, r9, #0
   1b304:	mvnge	r8, #0
   1b308:	mvnge	r9, #-2147483648	; 0x80000000
   1b30c:	movlt	r8, #0
   1b310:	movlt	r9, #-2147483648	; 0x80000000
   1b314:	b	1b2d0 <__assert_fail@plt+0x9eec>
   1b318:	str	r3, [sp, #4]
   1b31c:	b	1af30 <__assert_fail@plt+0x9b4c>
   1b320:	mov	r3, #1
   1b324:	mov	fp, #1024	; 0x400
   1b328:	str	r3, [sp, #4]
   1b32c:	b	1b0c4 <__assert_fail@plt+0x9ce0>
   1b330:	mov	r3, #1
   1b334:	mov	fp, #1024	; 0x400
   1b338:	str	r3, [sp, #4]
   1b33c:	b	1b13c <__assert_fail@plt+0x9d58>
   1b340:	mov	r3, #1
   1b344:	str	r3, [sp, #4]
   1b348:	b	1af30 <__assert_fail@plt+0x9b4c>
   1b34c:	mov	r3, #1
   1b350:	mov	fp, #1024	; 0x400
   1b354:	str	r3, [sp, #4]
   1b358:	b	1b1b4 <__assert_fail@plt+0x9dd0>
   1b35c:	mov	r3, #1
   1b360:	mov	fp, #1024	; 0x400
   1b364:	str	r3, [sp, #4]
   1b368:	b	1b22c <__assert_fail@plt+0x9e48>
   1b36c:	mov	r3, #1
   1b370:	mov	fp, #1024	; 0x400
   1b374:	str	r3, [sp, #4]
   1b378:	b	1afb4 <__assert_fail@plt+0x9bd0>
   1b37c:	mov	r3, #1
   1b380:	mov	fp, #1024	; 0x400
   1b384:	str	r3, [sp, #4]
   1b388:	b	1b2a4 <__assert_fail@plt+0x9ec0>
   1b38c:	mov	r3, #1
   1b390:	mov	fp, #1024	; 0x400
   1b394:	str	r3, [sp, #4]
   1b398:	b	1b02c <__assert_fail@plt+0x9c48>
   1b39c:	mov	r3, #1
   1b3a0:	mov	fp, #1024	; 0x400
   1b3a4:	str	r3, [sp, #4]
   1b3a8:	b	1b088 <__assert_fail@plt+0x9ca4>
   1b3ac:	ldr	r4, [sp, #16]
   1b3b0:	ldr	r5, [sp, #24]
   1b3b4:	orr	r4, r4, lr
   1b3b8:	b	1af30 <__assert_fail@plt+0x9b4c>
   1b3bc:	cmp	r0, #0
   1b3c0:	mov	r4, #1
   1b3c4:	sbcs	r3, r1, #0
   1b3c8:	bge	1afa4 <__assert_fail@plt+0x9bc0>
   1b3cc:	mov	r8, #0
   1b3d0:	mov	r9, #-2147483648	; 0x80000000
   1b3d4:	b	1af30 <__assert_fail@plt+0x9b4c>
   1b3d8:	mov	r3, #2
   1b3dc:	mov	fp, #1000	; 0x3e8
   1b3e0:	b	1ae18 <__assert_fail@plt+0x9a34>
   1b3e4:	cmp	r9, #0
   1b3e8:	umull	r4, r5, r8, r0
   1b3ec:	umull	sl, fp, r0, r9
   1b3f0:	bge	1b400 <__assert_fail@plt+0xa01c>
   1b3f4:	mov	r3, #0
   1b3f8:	subs	sl, sl, r3
   1b3fc:	sbc	fp, fp, r0
   1b400:	adds	r2, sl, r5
   1b404:	mov	r3, #0
   1b408:	adc	r3, fp, r3
   1b40c:	cmp	r3, r2, asr #31
   1b410:	bne	1b7a0 <__assert_fail@plt+0xa3bc>
   1b414:	mov	fp, r4
   1b418:	b	1b2f0 <__assert_fail@plt+0x9f0c>
   1b41c:	cmp	r9, #0
   1b420:	umull	r4, r5, r8, r0
   1b424:	umull	sl, fp, r0, r9
   1b428:	bge	1b438 <__assert_fail@plt+0xa054>
   1b42c:	mov	r3, #0
   1b430:	subs	sl, sl, r3
   1b434:	sbc	fp, fp, r0
   1b438:	adds	r2, sl, r5
   1b43c:	mov	r3, #0
   1b440:	adc	r3, fp, r3
   1b444:	cmp	r3, r2, asr #31
   1b448:	bne	1b7c0 <__assert_fail@plt+0xa3dc>
   1b44c:	mov	fp, r4
   1b450:	b	1b110 <__assert_fail@plt+0x9d2c>
   1b454:	umull	r0, r1, fp, r9
   1b458:	cmp	r9, #0
   1b45c:	umull	r2, r3, r8, fp
   1b460:	strd	r0, [sp, #16]
   1b464:	bge	1b47c <__assert_fail@plt+0xa098>
   1b468:	subs	r1, r0, ip
   1b46c:	str	r1, [sp, #16]
   1b470:	ldr	r1, [sp, #20]
   1b474:	sbc	r1, r1, fp
   1b478:	str	r1, [sp, #20]
   1b47c:	mov	r1, r3
   1b480:	ldr	r3, [sp, #16]
   1b484:	mov	r0, r2
   1b488:	mov	lr, #0
   1b48c:	adds	r2, r3, r1
   1b490:	ldr	r3, [sp, #20]
   1b494:	adc	lr, r3, lr
   1b498:	cmp	lr, r2, asr #31
   1b49c:	bne	1b820 <__assert_fail@plt+0xa43c>
   1b4a0:	mov	r1, r0
   1b4a4:	b	1b0ac <__assert_fail@plt+0x9cc8>
   1b4a8:	cmp	r9, #0
   1b4ac:	umull	r4, r5, r8, r0
   1b4b0:	umull	sl, fp, r0, r9
   1b4b4:	bge	1b4c4 <__assert_fail@plt+0xa0e0>
   1b4b8:	mov	r3, #0
   1b4bc:	subs	sl, sl, r3
   1b4c0:	sbc	fp, fp, r0
   1b4c4:	adds	r2, sl, r5
   1b4c8:	mov	r3, #0
   1b4cc:	adc	r3, fp, r3
   1b4d0:	cmp	r3, r2, asr #31
   1b4d4:	bne	1b760 <__assert_fail@plt+0xa37c>
   1b4d8:	mov	fp, r4
   1b4dc:	b	1b278 <__assert_fail@plt+0x9e94>
   1b4e0:	cmp	r9, #0
   1b4e4:	umull	r4, r5, r8, r0
   1b4e8:	umull	sl, fp, r0, r9
   1b4ec:	bge	1b4fc <__assert_fail@plt+0xa118>
   1b4f0:	mov	r3, #0
   1b4f4:	subs	sl, sl, r3
   1b4f8:	sbc	fp, fp, r0
   1b4fc:	adds	r2, sl, r5
   1b500:	mov	r3, #0
   1b504:	adc	r3, fp, r3
   1b508:	cmp	r3, r2, asr #31
   1b50c:	bne	1b7e0 <__assert_fail@plt+0xa3fc>
   1b510:	mov	fp, r4
   1b514:	b	1b000 <__assert_fail@plt+0x9c1c>
   1b518:	cmp	r9, #0
   1b51c:	umull	r4, r5, r8, r0
   1b520:	umull	sl, fp, r0, r9
   1b524:	bge	1b534 <__assert_fail@plt+0xa150>
   1b528:	mov	r3, #0
   1b52c:	subs	sl, sl, r3
   1b530:	sbc	fp, fp, r0
   1b534:	adds	r2, sl, r5
   1b538:	mov	r3, #0
   1b53c:	adc	r3, fp, r3
   1b540:	cmp	r3, r2, asr #31
   1b544:	bne	1b800 <__assert_fail@plt+0xa41c>
   1b548:	mov	fp, r4
   1b54c:	b	1b200 <__assert_fail@plt+0x9e1c>
   1b550:	cmp	r9, #0
   1b554:	umull	r4, r5, r8, r0
   1b558:	umull	sl, fp, r0, r9
   1b55c:	bge	1b56c <__assert_fail@plt+0xa188>
   1b560:	mov	r3, #0
   1b564:	subs	sl, sl, r3
   1b568:	sbc	fp, fp, r0
   1b56c:	adds	r2, sl, r5
   1b570:	mov	r3, #0
   1b574:	adc	r3, fp, r3
   1b578:	cmp	r3, r2, asr #31
   1b57c:	bne	1b780 <__assert_fail@plt+0xa39c>
   1b580:	mov	fp, r4
   1b584:	b	1b188 <__assert_fail@plt+0x9da4>
   1b588:	ldrb	r3, [r6, #2]
   1b58c:	mov	fp, #1024	; 0x400
   1b590:	cmp	r3, #66	; 0x42
   1b594:	movne	r3, #1
   1b598:	moveq	r3, #3
   1b59c:	b	1ae18 <__assert_fail@plt+0x9a34>
   1b5a0:	mov	lr, #512	; 0x200
   1b5a4:	cmp	r9, #0
   1b5a8:	lsr	r3, r8, #23
   1b5ac:	lsl	r2, r8, #9
   1b5b0:	umull	r0, r1, lr, r9
   1b5b4:	bge	1b5c0 <__assert_fail@plt+0xa1dc>
   1b5b8:	subs	r0, r0, ip
   1b5bc:	sbc	r1, r1, lr
   1b5c0:	adds	r3, r0, r3
   1b5c4:	mov	lr, #0
   1b5c8:	adc	r1, r1, lr
   1b5cc:	cmp	r1, r3, asr #31
   1b5d0:	beq	1af20 <__assert_fail@plt+0x9b3c>
   1b5d4:	lsl	r3, r9, #9
   1b5d8:	mov	ip, #1
   1b5dc:	lsl	r2, r8, #9
   1b5e0:	orr	r3, r3, r8, lsr #23
   1b5e4:	b	1af20 <__assert_fail@plt+0x9b3c>
   1b5e8:	mov	lr, #1024	; 0x400
   1b5ec:	cmp	r9, #0
   1b5f0:	lsr	r3, r8, #22
   1b5f4:	lsl	r2, r8, #10
   1b5f8:	umull	r0, r1, lr, r9
   1b5fc:	bge	1b608 <__assert_fail@plt+0xa224>
   1b600:	subs	r0, r0, ip
   1b604:	sbc	r1, r1, lr
   1b608:	adds	r3, r0, r3
   1b60c:	mov	lr, #0
   1b610:	adc	r1, r1, lr
   1b614:	cmp	r1, r3, asr #31
   1b618:	lslne	r3, r9, #10
   1b61c:	movne	ip, #1
   1b620:	lslne	r2, r8, #10
   1b624:	orrne	r3, r3, r8, lsr #22
   1b628:	b	1af20 <__assert_fail@plt+0x9b3c>
   1b62c:	umull	r2, r3, r8, fp
   1b630:	cmp	r9, #0
   1b634:	strd	r2, [sp, #16]
   1b638:	umull	r2, r3, fp, r9
   1b63c:	bge	1b648 <__assert_fail@plt+0xa264>
   1b640:	subs	r2, r2, r1
   1b644:	sbc	r3, r3, fp
   1b648:	ldr	r0, [sp, #20]
   1b64c:	mov	ip, #0
   1b650:	adds	r0, r2, r0
   1b654:	adc	ip, r3, ip
   1b658:	cmp	ip, r0, asr #31
   1b65c:	bne	1b840 <__assert_fail@plt+0xa45c>
   1b660:	mov	r3, r0
   1b664:	ldr	lr, [sp, #16]
   1b668:	b	1b04c <__assert_fail@plt+0x9c68>
   1b66c:	mov	lr, #2
   1b670:	mov	r3, #0
   1b674:	adds	ip, r8, r8
   1b678:	adc	r0, r3, r3
   1b67c:	umull	r2, r3, lr, r9
   1b680:	cmp	r9, #0
   1b684:	strd	r2, [sp, #8]
   1b688:	bge	1b6a0 <__assert_fail@plt+0xa2bc>
   1b68c:	subs	r3, r2, r1
   1b690:	str	r3, [sp, #8]
   1b694:	ldr	r3, [sp, #12]
   1b698:	sbc	r3, r3, lr
   1b69c:	str	r3, [sp, #12]
   1b6a0:	ldrd	sl, [sp, #8]
   1b6a4:	mov	lr, #0
   1b6a8:	adds	r2, sl, r0
   1b6ac:	adc	r3, fp, lr
   1b6b0:	cmp	r3, r2, asr #31
   1b6b4:	bne	1b750 <__assert_fail@plt+0xa36c>
   1b6b8:	mov	r3, r2
   1b6bc:	b	1af84 <__assert_fail@plt+0x9ba0>
   1b6c0:	cmp	r3, #0
   1b6c4:	umull	r8, r9, lr, fp
   1b6c8:	umull	r2, r3, fp, r3
   1b6cc:	strd	r2, [sp, #16]
   1b6d0:	strd	r8, [sp, #24]
   1b6d4:	bge	1b6ec <__assert_fail@plt+0xa308>
   1b6d8:	subs	r3, r2, ip
   1b6dc:	str	r3, [sp, #16]
   1b6e0:	ldr	r3, [sp, #20]
   1b6e4:	sbc	r3, r3, fp
   1b6e8:	str	r3, [sp, #20]
   1b6ec:	ldr	r3, [sp, #16]
   1b6f0:	mov	lr, #0
   1b6f4:	ldrd	sl, [sp, #24]
   1b6f8:	adds	r2, r3, fp
   1b6fc:	ldr	r3, [sp, #20]
   1b700:	adc	lr, r3, lr
   1b704:	cmp	lr, r2, asr #31
   1b708:	beq	1b070 <__assert_fail@plt+0x9c8c>
   1b70c:	ldrd	r8, [sp, #8]
   1b710:	mov	ip, #1
   1b714:	mul	lr, r0, r9
   1b718:	umull	r2, r3, r0, r8
   1b71c:	mla	lr, r8, r1, lr
   1b720:	mov	sl, r2
   1b724:	add	r3, lr, r3
   1b728:	mov	r2, r3
   1b72c:	b	1b070 <__assert_fail@plt+0x9c8c>
   1b730:	movw	r3, #60608	; 0xecc0
   1b734:	movt	r3, #1
   1b738:	movw	r1, #60620	; 0xeccc
   1b73c:	movt	r1, #1
   1b740:	movw	r0, #60636	; 0xecdc
   1b744:	movt	r0, #1
   1b748:	mov	r2, #85	; 0x55
   1b74c:	bl	113e4 <__assert_fail@plt>
   1b750:	adds	ip, r8, r8
   1b754:	mov	r1, #1
   1b758:	adc	r3, r9, r9
   1b75c:	b	1af84 <__assert_fail@plt+0x9ba0>
   1b760:	ldrd	r4, [sp, #8]
   1b764:	mov	r1, #1
   1b768:	mul	sl, r8, r5
   1b76c:	umull	r2, r3, r8, r4
   1b770:	mla	sl, r4, r9, sl
   1b774:	mov	fp, r2
   1b778:	add	r2, sl, r3
   1b77c:	b	1b278 <__assert_fail@plt+0x9e94>
   1b780:	ldrd	r4, [sp, #8]
   1b784:	mov	r1, #1
   1b788:	mul	sl, r8, r5
   1b78c:	umull	r2, r3, r8, r4
   1b790:	mla	sl, r4, r9, sl
   1b794:	mov	fp, r2
   1b798:	add	r2, sl, r3
   1b79c:	b	1b188 <__assert_fail@plt+0x9da4>
   1b7a0:	ldrd	r4, [sp, #8]
   1b7a4:	mov	r1, #1
   1b7a8:	mul	sl, r8, r5
   1b7ac:	umull	r2, r3, r8, r4
   1b7b0:	mla	sl, r4, r9, sl
   1b7b4:	mov	fp, r2
   1b7b8:	add	r2, sl, r3
   1b7bc:	b	1b2f0 <__assert_fail@plt+0x9f0c>
   1b7c0:	ldrd	r4, [sp, #8]
   1b7c4:	mov	r1, #1
   1b7c8:	mul	sl, r8, r5
   1b7cc:	umull	r2, r3, r8, r4
   1b7d0:	mla	sl, r4, r9, sl
   1b7d4:	mov	fp, r2
   1b7d8:	add	r2, sl, r3
   1b7dc:	b	1b110 <__assert_fail@plt+0x9d2c>
   1b7e0:	ldrd	r4, [sp, #8]
   1b7e4:	mov	r1, #1
   1b7e8:	mul	sl, r8, r5
   1b7ec:	umull	r2, r3, r8, r4
   1b7f0:	mla	sl, r4, r9, sl
   1b7f4:	mov	fp, r2
   1b7f8:	add	r2, sl, r3
   1b7fc:	b	1b000 <__assert_fail@plt+0x9c1c>
   1b800:	ldrd	r4, [sp, #8]
   1b804:	mov	r1, #1
   1b808:	mul	sl, r8, r5
   1b80c:	umull	r2, r3, r8, r4
   1b810:	mla	sl, r4, r9, sl
   1b814:	mov	fp, r2
   1b818:	add	r2, sl, r3
   1b81c:	b	1b200 <__assert_fail@plt+0x9e1c>
   1b820:	ldrd	sl, [sp, #8]
   1b824:	mov	ip, #1
   1b828:	mul	r1, r8, fp
   1b82c:	umull	r2, r3, r8, sl
   1b830:	mla	r0, sl, r9, r1
   1b834:	mov	r1, r2
   1b838:	add	r2, r0, r3
   1b83c:	b	1b0ac <__assert_fail@plt+0x9cc8>
   1b840:	ldrd	r2, [sp, #8]
   1b844:	mov	r1, #1
   1b848:	ldr	ip, [sp, #8]
   1b84c:	mul	r0, r8, r3
   1b850:	umull	r2, r3, r8, r2
   1b854:	mla	r0, ip, r9, r0
   1b858:	mov	lr, r2
   1b85c:	add	r3, r0, r3
   1b860:	b	1b04c <__assert_fail@plt+0x9c68>
   1b864:	cmp	r2, #36	; 0x24
   1b868:	strd	r4, [sp, #-32]!	; 0xffffffe0
   1b86c:	strd	r6, [sp, #8]
   1b870:	strd	r8, [sp, #16]
   1b874:	str	sl, [sp, #24]
   1b878:	str	lr, [sp, #28]
   1b87c:	sub	sp, sp, #8
   1b880:	bhi	1be40 <__assert_fail@plt+0xaa5c>
   1b884:	cmp	r1, #0
   1b888:	mov	r6, r1
   1b88c:	mov	r5, r2
   1b890:	addeq	r6, sp, #4
   1b894:	mov	r9, r0
   1b898:	mov	r8, r3
   1b89c:	bl	112c4 <__errno_location@plt>
   1b8a0:	mov	sl, r0
   1b8a4:	mov	r4, #0
   1b8a8:	mov	r2, r5
   1b8ac:	mov	r1, r6
   1b8b0:	mov	r0, r9
   1b8b4:	str	r4, [sl]
   1b8b8:	bl	110cc <strtol@plt>
   1b8bc:	ldr	r7, [r6]
   1b8c0:	mov	r5, r0
   1b8c4:	cmp	r7, r9
   1b8c8:	beq	1b920 <__assert_fail@plt+0xa53c>
   1b8cc:	ldr	r4, [sl]
   1b8d0:	cmp	r4, #0
   1b8d4:	beq	1b8e4 <__assert_fail@plt+0xa500>
   1b8d8:	cmp	r4, #34	; 0x22
   1b8dc:	bne	1ba20 <__assert_fail@plt+0xa63c>
   1b8e0:	mov	r4, #1
   1b8e4:	ldr	r3, [sp, #40]	; 0x28
   1b8e8:	cmp	r3, #0
   1b8ec:	beq	1b8fc <__assert_fail@plt+0xa518>
   1b8f0:	ldrb	r9, [r7]
   1b8f4:	cmp	r9, #0
   1b8f8:	bne	1bb24 <__assert_fail@plt+0xa740>
   1b8fc:	str	r5, [r8]
   1b900:	mov	r0, r4
   1b904:	add	sp, sp, #8
   1b908:	ldrd	r4, [sp]
   1b90c:	ldrd	r6, [sp, #8]
   1b910:	ldrd	r8, [sp, #16]
   1b914:	ldr	sl, [sp, #24]
   1b918:	add	sp, sp, #28
   1b91c:	pop	{pc}		; (ldr pc, [sp], #4)
   1b920:	ldr	r3, [sp, #40]	; 0x28
   1b924:	cmp	r3, r4
   1b928:	beq	1ba20 <__assert_fail@plt+0xa63c>
   1b92c:	ldrb	r9, [r9]
   1b930:	cmp	r9, r4
   1b934:	beq	1ba20 <__assert_fail@plt+0xa63c>
   1b938:	mov	r1, r9
   1b93c:	mov	r0, r3
   1b940:	bl	112a0 <strchr@plt>
   1b944:	cmp	r0, r4
   1b948:	movne	r5, #1
   1b94c:	beq	1ba20 <__assert_fail@plt+0xa63c>
   1b950:	sub	sl, r9, #69	; 0x45
   1b954:	cmp	sl, #47	; 0x2f
   1b958:	ldrls	pc, [pc, sl, lsl #2]
   1b95c:	b	1bb40 <__assert_fail@plt+0xa75c>
   1b960:	andeq	fp, r1, r8, lsr #20
   1b964:	andeq	fp, r1, r0, asr #22
   1b968:	andeq	fp, r1, r8, lsr #20
   1b96c:	andeq	fp, r1, r0, asr #22
   1b970:	andeq	fp, r1, r0, asr #22
   1b974:	andeq	fp, r1, r0, asr #22
   1b978:	andeq	fp, r1, r8, lsr #20
   1b97c:	andeq	fp, r1, r0, asr #22
   1b980:	andeq	fp, r1, r8, lsr #20
   1b984:	andeq	fp, r1, r0, asr #22
   1b988:	andeq	fp, r1, r0, asr #22
   1b98c:	andeq	fp, r1, r8, lsr #20
   1b990:	andeq	fp, r1, r0, asr #22
   1b994:	andeq	fp, r1, r0, asr #22
   1b998:	andeq	fp, r1, r0, asr #22
   1b99c:	andeq	fp, r1, r8, lsr #20
   1b9a0:	andeq	fp, r1, r0, asr #22
   1b9a4:	andeq	fp, r1, r0, asr #22
   1b9a8:	andeq	fp, r1, r0, asr #22
   1b9ac:	andeq	fp, r1, r0, asr #22
   1b9b0:	andeq	fp, r1, r8, lsr #20
   1b9b4:	andeq	fp, r1, r8, lsr #20
   1b9b8:	andeq	fp, r1, r0, asr #22
   1b9bc:	andeq	fp, r1, r0, asr #22
   1b9c0:	andeq	fp, r1, r0, asr #22
   1b9c4:	andeq	fp, r1, r0, asr #22
   1b9c8:	andeq	fp, r1, r0, asr #22
   1b9cc:	andeq	fp, r1, r0, asr #22
   1b9d0:	andeq	fp, r1, r0, asr #22
   1b9d4:	andeq	fp, r1, r0, asr #22
   1b9d8:	andeq	fp, r1, r0, asr #22
   1b9dc:	andeq	fp, r1, r0, asr #22
   1b9e0:	andeq	fp, r1, r0, asr #22
   1b9e4:	andeq	fp, r1, r0, asr #22
   1b9e8:	andeq	fp, r1, r8, lsr #20
   1b9ec:	andeq	fp, r1, r0, asr #22
   1b9f0:	andeq	fp, r1, r0, asr #22
   1b9f4:	andeq	fp, r1, r0, asr #22
   1b9f8:	andeq	fp, r1, r8, lsr #20
   1b9fc:	andeq	fp, r1, r0, asr #22
   1ba00:	andeq	fp, r1, r8, lsr #20
   1ba04:	andeq	fp, r1, r0, asr #22
   1ba08:	andeq	fp, r1, r0, asr #22
   1ba0c:	andeq	fp, r1, r0, asr #22
   1ba10:	andeq	fp, r1, r0, asr #22
   1ba14:	andeq	fp, r1, r0, asr #22
   1ba18:	andeq	fp, r1, r0, asr #22
   1ba1c:	andeq	fp, r1, r8, lsr #20
   1ba20:	mov	r4, #4
   1ba24:	b	1b900 <__assert_fail@plt+0xa51c>
   1ba28:	mov	r1, #48	; 0x30
   1ba2c:	ldr	r0, [sp, #40]	; 0x28
   1ba30:	bl	112a0 <strchr@plt>
   1ba34:	cmp	r0, #0
   1ba38:	beq	1bb40 <__assert_fail@plt+0xa75c>
   1ba3c:	ldrb	r3, [r7, #1]
   1ba40:	cmp	r3, #68	; 0x44
   1ba44:	beq	1be10 <__assert_fail@plt+0xaa2c>
   1ba48:	cmp	r3, #105	; 0x69
   1ba4c:	beq	1be1c <__assert_fail@plt+0xaa38>
   1ba50:	cmp	r3, #66	; 0x42
   1ba54:	beq	1be10 <__assert_fail@plt+0xaa2c>
   1ba58:	cmp	sl, #47	; 0x2f
   1ba5c:	ldrls	pc, [pc, sl, lsl #2]
   1ba60:	b	1bb38 <__assert_fail@plt+0xa754>
   1ba64:	andeq	fp, r1, r0, asr #27
   1ba68:	andeq	fp, r1, r8, lsr fp
   1ba6c:	muleq	r1, r4, sp
   1ba70:	andeq	fp, r1, r8, lsr fp
   1ba74:	andeq	fp, r1, r8, lsr fp
   1ba78:	andeq	fp, r1, r8, lsr fp
   1ba7c:	andeq	fp, r1, ip, ror #24
   1ba80:	andeq	fp, r1, r8, lsr fp
   1ba84:	andeq	fp, r1, r4, lsr sp
   1ba88:	andeq	fp, r1, r8, lsr fp
   1ba8c:	andeq	fp, r1, r8, lsr fp
   1ba90:	andeq	fp, r1, r8, ror #26
   1ba94:	andeq	fp, r1, r8, lsr fp
   1ba98:	andeq	fp, r1, r8, lsr fp
   1ba9c:	andeq	fp, r1, r8, lsr fp
   1baa0:	andeq	fp, r1, r8, lsl #26
   1baa4:	andeq	fp, r1, r8, lsr fp
   1baa8:	andeq	fp, r1, r8, lsr fp
   1baac:	andeq	fp, r1, r8, lsr fp
   1bab0:	andeq	fp, r1, r8, lsr fp
   1bab4:	ldrdeq	fp, [r1], -ip
   1bab8:	andeq	fp, r1, ip, lsr #25
   1babc:	andeq	fp, r1, r8, lsr fp
   1bac0:	andeq	fp, r1, r8, lsr fp
   1bac4:	andeq	fp, r1, r8, lsr fp
   1bac8:	andeq	fp, r1, r8, lsr fp
   1bacc:	andeq	fp, r1, r8, lsr fp
   1bad0:	andeq	fp, r1, r8, lsr fp
   1bad4:	andeq	fp, r1, r8, lsr fp
   1bad8:	andeq	fp, r1, r8, lsl #25
   1badc:	andeq	fp, r1, r8, lsl #28
   1bae0:	andeq	fp, r1, r8, lsr fp
   1bae4:	andeq	fp, r1, r8, lsr fp
   1bae8:	andeq	fp, r1, r8, lsr fp
   1baec:	muleq	r1, r4, sp
   1baf0:	andeq	fp, r1, r8, lsr fp
   1baf4:	andeq	fp, r1, r8, lsr fp
   1baf8:	andeq	fp, r1, r8, lsr fp
   1bafc:	andeq	fp, r1, ip, ror #24
   1bb00:	andeq	fp, r1, r8, lsr fp
   1bb04:	andeq	fp, r1, r4, lsr sp
   1bb08:	andeq	fp, r1, r8, lsr fp
   1bb0c:	andeq	fp, r1, r8, lsr fp
   1bb10:	andeq	fp, r1, r8, lsr fp
   1bb14:	andeq	fp, r1, r8, lsr fp
   1bb18:	andeq	fp, r1, r8, lsr fp
   1bb1c:	andeq	fp, r1, r8, lsr fp
   1bb20:	andeq	fp, r1, r8, lsl #26
   1bb24:	mov	r1, r9
   1bb28:	ldr	r0, [sp, #40]	; 0x28
   1bb2c:	bl	112a0 <strchr@plt>
   1bb30:	cmp	r0, #0
   1bb34:	bne	1b950 <__assert_fail@plt+0xa56c>
   1bb38:	orr	r4, r4, #2
   1bb3c:	b	1b8fc <__assert_fail@plt+0xa518>
   1bb40:	mov	ip, #1
   1bb44:	mov	r2, #1024	; 0x400
   1bb48:	sub	r9, r9, #66	; 0x42
   1bb4c:	cmp	r9, #53	; 0x35
   1bb50:	ldrls	pc, [pc, r9, lsl #2]
   1bb54:	b	1bb38 <__assert_fail@plt+0xa754>
   1bb58:	andeq	fp, r1, ip, ror #27
   1bb5c:	andeq	fp, r1, r8, lsr fp
   1bb60:	andeq	fp, r1, r8, lsr fp
   1bb64:	andeq	fp, r1, r8, asr #27
   1bb68:	andeq	fp, r1, r8, lsr fp
   1bb6c:	muleq	r1, ip, sp
   1bb70:	andeq	fp, r1, r8, lsr fp
   1bb74:	andeq	fp, r1, r8, lsr fp
   1bb78:	andeq	fp, r1, r8, lsr fp
   1bb7c:	andeq	fp, r1, r4, ror ip
   1bb80:	andeq	fp, r1, r8, lsr fp
   1bb84:	andeq	fp, r1, ip, lsr sp
   1bb88:	andeq	fp, r1, r8, lsr fp
   1bb8c:	andeq	fp, r1, r8, lsr fp
   1bb90:	andeq	fp, r1, r0, ror sp
   1bb94:	andeq	fp, r1, r8, lsr fp
   1bb98:	andeq	fp, r1, r8, lsr fp
   1bb9c:	andeq	fp, r1, r8, lsr fp
   1bba0:	andeq	fp, r1, r0, lsl sp
   1bba4:	andeq	fp, r1, r8, lsr fp
   1bba8:	andeq	fp, r1, r8, lsr fp
   1bbac:	andeq	fp, r1, r8, lsr fp
   1bbb0:	andeq	fp, r1, r8, lsr fp
   1bbb4:	andeq	fp, r1, r4, ror #25
   1bbb8:			; <UNDEFINED> instruction: 0x0001bcb4
   1bbbc:	andeq	fp, r1, r8, lsr fp
   1bbc0:	andeq	fp, r1, r8, lsr fp
   1bbc4:	andeq	fp, r1, r8, lsr fp
   1bbc8:	andeq	fp, r1, r8, lsr fp
   1bbcc:	andeq	fp, r1, r8, lsr fp
   1bbd0:	andeq	fp, r1, r8, lsr fp
   1bbd4:	andeq	fp, r1, r8, lsr fp
   1bbd8:	andeq	fp, r1, ip, lsl #25
   1bbdc:	andeq	fp, r1, r4, asr ip
   1bbe0:	andeq	fp, r1, r8, lsr fp
   1bbe4:	andeq	fp, r1, r8, lsr fp
   1bbe8:	andeq	fp, r1, r8, lsr fp
   1bbec:	muleq	r1, ip, sp
   1bbf0:	andeq	fp, r1, r8, lsr fp
   1bbf4:	andeq	fp, r1, r8, lsr fp
   1bbf8:	andeq	fp, r1, r8, lsr fp
   1bbfc:	andeq	fp, r1, r4, ror ip
   1bc00:	andeq	fp, r1, r8, lsr fp
   1bc04:	andeq	fp, r1, ip, lsr sp
   1bc08:	andeq	fp, r1, r8, lsr fp
   1bc0c:	andeq	fp, r1, r8, lsr fp
   1bc10:	andeq	fp, r1, r8, lsr fp
   1bc14:	andeq	fp, r1, r8, lsr fp
   1bc18:	andeq	fp, r1, r8, lsr fp
   1bc1c:	andeq	fp, r1, r8, lsr fp
   1bc20:	andeq	fp, r1, r0, lsl sp
   1bc24:	andeq	fp, r1, r8, lsr fp
   1bc28:	andeq	fp, r1, r8, lsr fp
   1bc2c:	andeq	fp, r1, r0, lsr ip
   1bc30:	asr	r1, r5, #31
   1bc34:	adds	r2, r5, r5
   1bc38:	adc	r3, r1, r1
   1bc3c:	cmp	r3, r2, asr #31
   1bc40:	beq	1bc80 <__assert_fail@plt+0xa89c>
   1bc44:	cmp	r5, #0
   1bc48:	movge	r4, #1
   1bc4c:	blt	1be34 <__assert_fail@plt+0xaa50>
   1bc50:	mvn	r5, #-2147483648	; 0x80000000
   1bc54:	add	r3, r7, ip
   1bc58:	str	r3, [r6]
   1bc5c:	ldrb	r3, [r7, ip]
   1bc60:	cmp	r3, #0
   1bc64:	beq	1b8fc <__assert_fail@plt+0xa518>
   1bc68:	b	1bb38 <__assert_fail@plt+0xa754>
   1bc6c:	mov	ip, #1
   1bc70:	mov	r2, #1024	; 0x400
   1bc74:	smull	r2, r3, r5, r2
   1bc78:	cmp	r3, r2, asr #31
   1bc7c:	bne	1be60 <__assert_fail@plt+0xaa7c>
   1bc80:	mov	r5, r2
   1bc84:	b	1bc54 <__assert_fail@plt+0xa870>
   1bc88:	mov	ip, #1
   1bc8c:	asr	r3, r5, #31
   1bc90:	lsl	r1, r5, #9
   1bc94:	lsl	r3, r3, #9
   1bc98:	orr	r3, r3, r5, lsr #23
   1bc9c:	cmp	r3, r1, asr #31
   1bca0:	bne	1be60 <__assert_fail@plt+0xaa7c>
   1bca4:	mov	r5, r1
   1bca8:	b	1bc54 <__assert_fail@plt+0xa870>
   1bcac:	mov	ip, #1
   1bcb0:	mov	r2, #1024	; 0x400
   1bcb4:	mov	r3, #7
   1bcb8:	mov	lr, #0
   1bcbc:	smull	r0, r1, r5, r2
   1bcc0:	cmp	r1, r0, asr #31
   1bcc4:	bne	1beac <__assert_fail@plt+0xaac8>
   1bcc8:	mov	r5, r0
   1bccc:	subs	r3, r3, #1
   1bcd0:	bne	1bcbc <__assert_fail@plt+0xa8d8>
   1bcd4:	orr	r4, r4, lr
   1bcd8:	b	1bc54 <__assert_fail@plt+0xa870>
   1bcdc:	mov	ip, #1
   1bce0:	mov	r2, #1024	; 0x400
   1bce4:	mov	r3, #8
   1bce8:	mov	lr, #0
   1bcec:	smull	r0, r1, r5, r2
   1bcf0:	cmp	r1, r0, asr #31
   1bcf4:	bne	1be98 <__assert_fail@plt+0xaab4>
   1bcf8:	mov	r5, r0
   1bcfc:	subs	r3, r3, #1
   1bd00:	bne	1bcec <__assert_fail@plt+0xa908>
   1bd04:	b	1bcd4 <__assert_fail@plt+0xa8f0>
   1bd08:	mov	ip, #1
   1bd0c:	mov	r2, #1024	; 0x400
   1bd10:	mov	r3, #4
   1bd14:	mov	lr, #0
   1bd18:	smull	r0, r1, r5, r2
   1bd1c:	cmp	r1, r0, asr #31
   1bd20:	bne	1bec0 <__assert_fail@plt+0xaadc>
   1bd24:	mov	r5, r0
   1bd28:	subs	r3, r3, #1
   1bd2c:	bne	1bd18 <__assert_fail@plt+0xa934>
   1bd30:	b	1bcd4 <__assert_fail@plt+0xa8f0>
   1bd34:	mov	ip, #1
   1bd38:	mov	r2, #1024	; 0x400
   1bd3c:	smull	r0, r1, r5, r2
   1bd40:	cmp	r1, r0, asr #31
   1bd44:	bne	1be60 <__assert_fail@plt+0xaa7c>
   1bd48:	smull	r2, r3, r0, r2
   1bd4c:	cmp	r3, r2, asr #31
   1bd50:	beq	1bc80 <__assert_fail@plt+0xa89c>
   1bd54:	cmp	r0, #0
   1bd58:	mov	r4, #1
   1bd5c:	movlt	r5, #-2147483648	; 0x80000000
   1bd60:	mvnge	r5, #-2147483648	; 0x80000000
   1bd64:	b	1bc54 <__assert_fail@plt+0xa870>
   1bd68:	mov	ip, #1
   1bd6c:	mov	r2, #1024	; 0x400
   1bd70:	mov	r3, #5
   1bd74:	mov	lr, #0
   1bd78:	smull	r0, r1, r5, r2
   1bd7c:	cmp	r1, r0, asr #31
   1bd80:	bne	1bed4 <__assert_fail@plt+0xaaf0>
   1bd84:	mov	r5, r0
   1bd88:	subs	r3, r3, #1
   1bd8c:	bne	1bd78 <__assert_fail@plt+0xa994>
   1bd90:	b	1bcd4 <__assert_fail@plt+0xa8f0>
   1bd94:	mov	ip, #1
   1bd98:	mov	r2, #1024	; 0x400
   1bd9c:	mov	r3, #3
   1bda0:	mov	lr, #0
   1bda4:	smull	r0, r1, r5, r2
   1bda8:	cmp	r1, r0, asr #31
   1bdac:	bne	1be70 <__assert_fail@plt+0xaa8c>
   1bdb0:	mov	r5, r0
   1bdb4:	subs	r3, r3, #1
   1bdb8:	bne	1bda4 <__assert_fail@plt+0xa9c0>
   1bdbc:	b	1bcd4 <__assert_fail@plt+0xa8f0>
   1bdc0:	mov	ip, #1
   1bdc4:	mov	r2, #1024	; 0x400
   1bdc8:	mov	r3, #6
   1bdcc:	mov	lr, #0
   1bdd0:	smull	r0, r1, r5, r2
   1bdd4:	cmp	r1, r0, asr #31
   1bdd8:	bne	1be84 <__assert_fail@plt+0xaaa0>
   1bddc:	mov	r5, r0
   1bde0:	subs	r3, r3, #1
   1bde4:	bne	1bdd0 <__assert_fail@plt+0xa9ec>
   1bde8:	b	1bcd4 <__assert_fail@plt+0xa8f0>
   1bdec:	asr	r3, r5, #31
   1bdf0:	lsl	r1, r5, #10
   1bdf4:	lsl	r3, r3, #10
   1bdf8:	orr	r3, r3, r5, lsr #22
   1bdfc:	cmp	r3, r1, asr #31
   1be00:	beq	1bca4 <__assert_fail@plt+0xa8c0>
   1be04:	b	1bc44 <__assert_fail@plt+0xa860>
   1be08:	mov	ip, #1
   1be0c:	b	1bc54 <__assert_fail@plt+0xa870>
   1be10:	mov	ip, #2
   1be14:	mov	r2, #1000	; 0x3e8
   1be18:	b	1bb48 <__assert_fail@plt+0xa764>
   1be1c:	ldrb	r3, [r7, #2]
   1be20:	mov	r2, #1024	; 0x400
   1be24:	cmp	r3, #66	; 0x42
   1be28:	movne	ip, #1
   1be2c:	moveq	ip, #3
   1be30:	b	1bb48 <__assert_fail@plt+0xa764>
   1be34:	mov	r4, #1
   1be38:	mov	r5, #-2147483648	; 0x80000000
   1be3c:	b	1bc54 <__assert_fail@plt+0xa870>
   1be40:	movw	r3, #60676	; 0xed04
   1be44:	movt	r3, #1
   1be48:	movw	r1, #60620	; 0xeccc
   1be4c:	movt	r1, #1
   1be50:	movw	r0, #60636	; 0xecdc
   1be54:	movt	r0, #1
   1be58:	mov	r2, #85	; 0x55
   1be5c:	bl	113e4 <__assert_fail@plt>
   1be60:	cmp	r5, #0
   1be64:	mov	r4, #1
   1be68:	bge	1bc50 <__assert_fail@plt+0xa86c>
   1be6c:	b	1be38 <__assert_fail@plt+0xaa54>
   1be70:	cmp	r5, #0
   1be74:	mov	lr, #1
   1be78:	mvnge	r5, #-2147483648	; 0x80000000
   1be7c:	movlt	r5, #-2147483648	; 0x80000000
   1be80:	b	1bdb4 <__assert_fail@plt+0xa9d0>
   1be84:	cmp	r5, #0
   1be88:	mov	lr, #1
   1be8c:	mvnge	r5, #-2147483648	; 0x80000000
   1be90:	movlt	r5, #-2147483648	; 0x80000000
   1be94:	b	1bde0 <__assert_fail@plt+0xa9fc>
   1be98:	cmp	r5, #0
   1be9c:	mov	lr, #1
   1bea0:	mvnge	r5, #-2147483648	; 0x80000000
   1bea4:	movlt	r5, #-2147483648	; 0x80000000
   1bea8:	b	1bcfc <__assert_fail@plt+0xa918>
   1beac:	cmp	r5, #0
   1beb0:	mov	lr, #1
   1beb4:	mvnge	r5, #-2147483648	; 0x80000000
   1beb8:	movlt	r5, #-2147483648	; 0x80000000
   1bebc:	b	1bccc <__assert_fail@plt+0xa8e8>
   1bec0:	cmp	r5, #0
   1bec4:	mov	lr, #1
   1bec8:	mvnge	r5, #-2147483648	; 0x80000000
   1becc:	movlt	r5, #-2147483648	; 0x80000000
   1bed0:	b	1bd28 <__assert_fail@plt+0xa944>
   1bed4:	cmp	r5, #0
   1bed8:	mov	lr, #1
   1bedc:	mvnge	r5, #-2147483648	; 0x80000000
   1bee0:	movlt	r5, #-2147483648	; 0x80000000
   1bee4:	b	1bd88 <__assert_fail@plt+0xa9a4>
   1bee8:	sub	r0, r0, #1
   1beec:	movw	ip, #61828	; 0xf184
   1bef0:	movt	ip, #2
   1bef4:	cmp	r0, #3
   1bef8:	push	{lr}		; (str lr, [sp, #-4]!)
   1befc:	sub	sp, sp, #20
   1bf00:	ldr	r5, [ip]
   1bf04:	bhi	1bf54 <__assert_fail@plt+0xab70>
   1bf08:	movw	ip, #60684	; 0xed0c
   1bf0c:	movt	ip, #1
   1bf10:	cmp	r1, #0
   1bf14:	ldr	r0, [ip, r0, lsl #2]
   1bf18:	blt	1bf58 <__assert_fail@plt+0xab74>
   1bf1c:	ldr	r6, [r3, r1, lsl #4]
   1bf20:	movw	r4, #60700	; 0xed1c
   1bf24:	movt	r4, #1
   1bf28:	mov	r1, r0
   1bf2c:	mov	r2, #5
   1bf30:	mov	r0, #0
   1bf34:	bl	11168 <dcgettext@plt>
   1bf38:	ldr	ip, [sp, #24]
   1bf3c:	mov	r2, r0
   1bf40:	mov	r3, r4
   1bf44:	mov	r0, r5
   1bf48:	mov	r1, #0
   1bf4c:	stm	sp, {r6, ip}
   1bf50:	bl	11204 <error@plt>
   1bf54:	bl	113cc <abort@plt>
   1bf58:	mov	r3, #0
   1bf5c:	movw	r4, #60700	; 0xed1c
   1bf60:	movt	r4, #1
   1bf64:	add	r6, sp, #12
   1bf68:	strb	r2, [sp, #12]
   1bf6c:	sub	r4, r4, r1
   1bf70:	strb	r3, [sp, #13]
   1bf74:	b	1bf28 <__assert_fail@plt+0xab44>
   1bf78:	cmp	r2, #36	; 0x24
   1bf7c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1bf80:	strd	r6, [sp, #8]
   1bf84:	strd	r8, [sp, #16]
   1bf88:	strd	sl, [sp, #24]
   1bf8c:	str	lr, [sp, #32]
   1bf90:	sub	sp, sp, #36	; 0x24
   1bf94:	bhi	1c824 <__assert_fail@plt+0xb440>
   1bf98:	cmp	r1, #0
   1bf9c:	mov	r8, r2
   1bfa0:	mov	r6, r0
   1bfa4:	mov	r5, r1
   1bfa8:	mov	sl, r3
   1bfac:	addeq	r5, sp, #28
   1bfb0:	bl	112c4 <__errno_location@plt>
   1bfb4:	mov	r3, #0
   1bfb8:	mov	r7, r0
   1bfbc:	str	r3, [r0]
   1bfc0:	bl	1127c <__ctype_b_loc@plt>
   1bfc4:	ldrb	r3, [r6]
   1bfc8:	mov	r2, r6
   1bfcc:	ldr	r0, [r0]
   1bfd0:	b	1bfd8 <__assert_fail@plt+0xabf4>
   1bfd4:	ldrb	r3, [r2, #1]!
   1bfd8:	lsl	r1, r3, #1
   1bfdc:	ldrh	r4, [r0, r1]
   1bfe0:	ands	r4, r4, #8192	; 0x2000
   1bfe4:	bne	1bfd4 <__assert_fail@plt+0xabf0>
   1bfe8:	cmp	r3, #45	; 0x2d
   1bfec:	beq	1c08c <__assert_fail@plt+0xaca8>
   1bff0:	mov	r2, r8
   1bff4:	mov	r3, r4
   1bff8:	mov	r1, r5
   1bffc:	mov	r0, r6
   1c000:	bl	11138 <__strtoull_internal@plt>
   1c004:	ldr	fp, [r5]
   1c008:	mov	r9, r0
   1c00c:	mov	r8, r1
   1c010:	cmp	fp, r6
   1c014:	beq	1c074 <__assert_fail@plt+0xac90>
   1c018:	ldr	r4, [r7]
   1c01c:	cmp	r4, #0
   1c020:	bne	1c064 <__assert_fail@plt+0xac80>
   1c024:	ldr	r3, [sp, #72]	; 0x48
   1c028:	cmp	r3, #0
   1c02c:	beq	1c03c <__assert_fail@plt+0xac58>
   1c030:	ldrb	r6, [fp]
   1c034:	cmp	r6, #0
   1c038:	bne	1c37c <__assert_fail@plt+0xaf98>
   1c03c:	str	r9, [sl]
   1c040:	str	r8, [sl, #4]
   1c044:	mov	r0, r4
   1c048:	add	sp, sp, #36	; 0x24
   1c04c:	ldrd	r4, [sp]
   1c050:	ldrd	r6, [sp, #8]
   1c054:	ldrd	r8, [sp, #16]
   1c058:	ldrd	sl, [sp, #24]
   1c05c:	add	sp, sp, #32
   1c060:	pop	{pc}		; (ldr pc, [sp], #4)
   1c064:	cmp	r4, #34	; 0x22
   1c068:	bne	1c08c <__assert_fail@plt+0xaca8>
   1c06c:	mov	r4, #1
   1c070:	b	1c024 <__assert_fail@plt+0xac40>
   1c074:	ldr	r3, [sp, #72]	; 0x48
   1c078:	cmp	r3, #0
   1c07c:	beq	1c08c <__assert_fail@plt+0xaca8>
   1c080:	ldrb	r6, [r6]
   1c084:	cmp	r6, #0
   1c088:	bne	1c094 <__assert_fail@plt+0xacb0>
   1c08c:	mov	r4, #4
   1c090:	b	1c044 <__assert_fail@plt+0xac60>
   1c094:	mov	r1, r6
   1c098:	mov	r0, r3
   1c09c:	bl	112a0 <strchr@plt>
   1c0a0:	cmp	r0, #0
   1c0a4:	movne	r9, #1
   1c0a8:	movne	r8, #0
   1c0ac:	beq	1c08c <__assert_fail@plt+0xaca8>
   1c0b0:	sub	r3, r6, #69	; 0x45
   1c0b4:	cmp	r3, #47	; 0x2f
   1c0b8:	ldrls	pc, [pc, r3, lsl #2]
   1c0bc:	b	1c1c4 <__assert_fail@plt+0xade0>
   1c0c0:	andeq	ip, r1, r0, lsl #3
   1c0c4:	andeq	ip, r1, r4, asr #3
   1c0c8:	andeq	ip, r1, r0, lsl #3
   1c0cc:	andeq	ip, r1, r4, asr #3
   1c0d0:	andeq	ip, r1, r4, asr #3
   1c0d4:	andeq	ip, r1, r4, asr #3
   1c0d8:	andeq	ip, r1, r0, lsl #3
   1c0dc:	andeq	ip, r1, r4, asr #3
   1c0e0:	andeq	ip, r1, r0, lsl #3
   1c0e4:	andeq	ip, r1, r4, asr #3
   1c0e8:	andeq	ip, r1, r4, asr #3
   1c0ec:	andeq	ip, r1, r0, lsl #3
   1c0f0:	andeq	ip, r1, r4, asr #3
   1c0f4:	andeq	ip, r1, r4, asr #3
   1c0f8:	andeq	ip, r1, r4, asr #3
   1c0fc:	andeq	ip, r1, r0, lsl #3
   1c100:	andeq	ip, r1, r4, asr #3
   1c104:	andeq	ip, r1, r4, asr #3
   1c108:	andeq	ip, r1, r4, asr #3
   1c10c:	andeq	ip, r1, r4, asr #3
   1c110:	andeq	ip, r1, r0, lsl #3
   1c114:	andeq	ip, r1, r0, lsl #3
   1c118:	andeq	ip, r1, r4, asr #3
   1c11c:	andeq	ip, r1, r4, asr #3
   1c120:	andeq	ip, r1, r4, asr #3
   1c124:	andeq	ip, r1, r4, asr #3
   1c128:	andeq	ip, r1, r4, asr #3
   1c12c:	andeq	ip, r1, r4, asr #3
   1c130:	andeq	ip, r1, r4, asr #3
   1c134:	andeq	ip, r1, r4, asr #3
   1c138:	andeq	ip, r1, r4, asr #3
   1c13c:	andeq	ip, r1, r4, asr #3
   1c140:	andeq	ip, r1, r4, asr #3
   1c144:	andeq	ip, r1, r4, asr #3
   1c148:	andeq	ip, r1, r0, lsl #3
   1c14c:	andeq	ip, r1, r4, asr #3
   1c150:	andeq	ip, r1, r4, asr #3
   1c154:	andeq	ip, r1, r4, asr #3
   1c158:	andeq	ip, r1, r0, lsl #3
   1c15c:	andeq	ip, r1, r4, asr #3
   1c160:	andeq	ip, r1, r0, lsl #3
   1c164:	andeq	ip, r1, r4, asr #3
   1c168:	andeq	ip, r1, r4, asr #3
   1c16c:	andeq	ip, r1, r4, asr #3
   1c170:	andeq	ip, r1, r4, asr #3
   1c174:	andeq	ip, r1, r4, asr #3
   1c178:	andeq	ip, r1, r4, asr #3
   1c17c:	andeq	ip, r1, r0, lsl #3
   1c180:	mov	r1, #48	; 0x30
   1c184:	ldr	r0, [sp, #72]	; 0x48
   1c188:	bl	112a0 <strchr@plt>
   1c18c:	cmp	r0, #0
   1c190:	beq	1c1c4 <__assert_fail@plt+0xade0>
   1c194:	ldrb	r3, [fp, #1]
   1c198:	cmp	r3, #68	; 0x44
   1c19c:	beq	1c6f0 <__assert_fail@plt+0xb30c>
   1c1a0:	cmp	r3, #105	; 0x69
   1c1a4:	beq	1c394 <__assert_fail@plt+0xafb0>
   1c1a8:	cmp	r3, #66	; 0x42
   1c1ac:	moveq	r3, #2
   1c1b0:	movne	r3, #1
   1c1b4:	moveq	r7, #1000	; 0x3e8
   1c1b8:	movne	r7, #1024	; 0x400
   1c1bc:	str	r3, [sp, #4]
   1c1c0:	b	1c1d0 <__assert_fail@plt+0xadec>
   1c1c4:	mov	r3, #1
   1c1c8:	mov	r7, #1024	; 0x400
   1c1cc:	str	r3, [sp, #4]
   1c1d0:	sub	r6, r6, #66	; 0x42
   1c1d4:	cmp	r6, #53	; 0x35
   1c1d8:	ldrls	pc, [pc, r6, lsl #2]
   1c1dc:	b	1c340 <__assert_fail@plt+0xaf5c>
   1c1e0:	muleq	r1, r8, r6
   1c1e4:	andeq	ip, r1, r0, asr #6
   1c1e8:	andeq	ip, r1, r0, asr #6
   1c1ec:	andeq	ip, r1, r4, lsr #9
   1c1f0:	andeq	ip, r1, r0, asr #6
   1c1f4:			; <UNDEFINED> instruction: 0x0001c2b8
   1c1f8:	andeq	ip, r1, r0, asr #6
   1c1fc:	andeq	ip, r1, r0, asr #6
   1c200:	andeq	ip, r1, r0, asr #6
   1c204:	andeq	ip, r1, r8, asr #6
   1c208:	andeq	ip, r1, r0, asr #6
   1c20c:	andeq	ip, r1, r4, asr #12
   1c210:	andeq	ip, r1, r0, asr #6
   1c214:	andeq	ip, r1, r0, asr #6
   1c218:	muleq	r1, r4, r5
   1c21c:	andeq	ip, r1, r0, asr #6
   1c220:	andeq	ip, r1, r0, asr #6
   1c224:	andeq	ip, r1, r0, asr #6
   1c228:	andeq	ip, r1, ip, lsl r5
   1c22c:	andeq	ip, r1, r0, asr #6
   1c230:	andeq	ip, r1, r0, asr #6
   1c234:	andeq	ip, r1, r0, asr #6
   1c238:	andeq	ip, r1, r0, asr #6
   1c23c:	andeq	ip, r1, ip, lsr #8
   1c240:			; <UNDEFINED> instruction: 0x0001c3b0
   1c244:	andeq	ip, r1, r0, asr #6
   1c248:	andeq	ip, r1, r0, asr #6
   1c24c:	andeq	ip, r1, r0, asr #6
   1c250:	andeq	ip, r1, r0, asr #6
   1c254:	andeq	ip, r1, r0, asr #6
   1c258:	andeq	ip, r1, r0, asr #6
   1c25c:	andeq	ip, r1, r0, asr #6
   1c260:	andeq	ip, r1, r4, lsr #12
   1c264:	andeq	ip, r1, r8, lsr #6
   1c268:	andeq	ip, r1, r0, asr #6
   1c26c:	andeq	ip, r1, r0, asr #6
   1c270:	andeq	ip, r1, r0, asr #6
   1c274:			; <UNDEFINED> instruction: 0x0001c2b8
   1c278:	andeq	ip, r1, r0, asr #6
   1c27c:	andeq	ip, r1, r0, asr #6
   1c280:	andeq	ip, r1, r0, asr #6
   1c284:	andeq	ip, r1, r8, asr #6
   1c288:	andeq	ip, r1, r0, asr #6
   1c28c:	andeq	ip, r1, r4, asr #12
   1c290:	andeq	ip, r1, r0, asr #6
   1c294:	andeq	ip, r1, r0, asr #6
   1c298:	andeq	ip, r1, r0, asr #6
   1c29c:	andeq	ip, r1, r0, asr #6
   1c2a0:	andeq	ip, r1, r0, asr #6
   1c2a4:	andeq	ip, r1, r0, asr #6
   1c2a8:	andeq	ip, r1, ip, lsl r5
   1c2ac:	andeq	ip, r1, r0, asr #6
   1c2b0:	andeq	ip, r1, r0, asr #6
   1c2b4:	andeq	ip, r1, ip, lsl #12
   1c2b8:	asr	r3, r7, #31
   1c2bc:	mov	r2, r7
   1c2c0:	cmp	r8, #0
   1c2c4:	umull	r0, r1, r9, r7
   1c2c8:	mov	ip, #0
   1c2cc:	strd	r2, [sp, #8]
   1c2d0:	bne	1c724 <__assert_fail@plt+0xb340>
   1c2d4:	mov	r2, r0
   1c2d8:	mov	r3, r1
   1c2dc:	cmp	ip, #0
   1c2e0:	bne	1c36c <__assert_fail@plt+0xaf88>
   1c2e4:	cmp	r3, #0
   1c2e8:	mov	lr, ip
   1c2ec:	bne	1c788 <__assert_fail@plt+0xb3a4>
   1c2f0:	umull	r2, r3, r2, r7
   1c2f4:	mov	ip, r2
   1c2f8:	mov	r1, r3
   1c2fc:	subs	r0, lr, #0
   1c300:	bne	1c36c <__assert_fail@plt+0xaf88>
   1c304:	cmp	r1, #0
   1c308:	bne	1c768 <__assert_fail@plt+0xb384>
   1c30c:	umull	r2, r3, ip, r7
   1c310:	mov	r6, r2
   1c314:	mov	r2, r3
   1c318:	cmp	r0, #0
   1c31c:	mov	r9, r6
   1c320:	mov	r8, r2
   1c324:	bne	1c36c <__assert_fail@plt+0xaf88>
   1c328:	ldr	r2, [sp, #4]
   1c32c:	add	r3, fp, r2
   1c330:	str	r3, [r5]
   1c334:	ldrb	r3, [fp, r2]
   1c338:	cmp	r3, #0
   1c33c:	beq	1c03c <__assert_fail@plt+0xac58>
   1c340:	orr	r4, r4, #2
   1c344:	b	1c03c <__assert_fail@plt+0xac58>
   1c348:	cmp	r8, #0
   1c34c:	umull	r2, r3, r9, r7
   1c350:	mov	ip, #0
   1c354:	asr	r1, r7, #31
   1c358:	bne	1c6c0 <__assert_fail@plt+0xb2dc>
   1c35c:	mov	r9, r2
   1c360:	mov	r8, r3
   1c364:	cmp	ip, #0
   1c368:	beq	1c328 <__assert_fail@plt+0xaf44>
   1c36c:	mvn	r9, #0
   1c370:	mov	r4, #1
   1c374:	mov	r8, r9
   1c378:	b	1c328 <__assert_fail@plt+0xaf44>
   1c37c:	mov	r1, r6
   1c380:	ldr	r0, [sp, #72]	; 0x48
   1c384:	bl	112a0 <strchr@plt>
   1c388:	cmp	r0, #0
   1c38c:	bne	1c0b0 <__assert_fail@plt+0xaccc>
   1c390:	b	1c340 <__assert_fail@plt+0xaf5c>
   1c394:	ldrb	r3, [fp, #2]
   1c398:	mov	r7, #1024	; 0x400
   1c39c:	cmp	r3, #66	; 0x42
   1c3a0:	movne	r3, #1
   1c3a4:	moveq	r3, #3
   1c3a8:	str	r3, [sp, #4]
   1c3ac:	b	1c1d0 <__assert_fail@plt+0xadec>
   1c3b0:	asr	r3, r7, #31
   1c3b4:	mov	r2, r7
   1c3b8:	mov	ip, #0
   1c3bc:	mov	r0, #7
   1c3c0:	mov	lr, ip
   1c3c4:	mov	r6, r4
   1c3c8:	strd	r2, [sp, #8]
   1c3cc:	str	r5, [sp, #16]
   1c3d0:	b	1c3fc <__assert_fail@plt+0xb018>
   1c3d4:	umull	r2, r3, r9, r7
   1c3d8:	mov	r9, r2
   1c3dc:	mov	r8, r3
   1c3e0:	cmp	r1, #0
   1c3e4:	beq	1c3f4 <__assert_fail@plt+0xb010>
   1c3e8:	mvn	r9, #0
   1c3ec:	mov	ip, #1
   1c3f0:	mov	r8, r9
   1c3f4:	subs	r0, r0, #1
   1c3f8:	beq	1c6e4 <__assert_fail@plt+0xb300>
   1c3fc:	cmp	r8, #0
   1c400:	mov	r1, #0
   1c404:	beq	1c3d4 <__assert_fail@plt+0xaff0>
   1c408:	umull	r4, r5, r9, r7
   1c40c:	mov	r3, lr
   1c410:	mov	r2, r5
   1c414:	umlal	r2, r3, r8, r7
   1c418:	cmp	r3, #0
   1c41c:	bne	1c844 <__assert_fail@plt+0xb460>
   1c420:	mov	r9, r4
   1c424:	mov	r8, r2
   1c428:	b	1c3e0 <__assert_fail@plt+0xaffc>
   1c42c:	asr	r3, r7, #31
   1c430:	mov	r2, r7
   1c434:	mov	r6, #0
   1c438:	mov	lr, #8
   1c43c:	mov	r0, r4
   1c440:	mov	ip, r5
   1c444:	strd	r2, [sp, #8]
   1c448:	b	1c474 <__assert_fail@plt+0xb090>
   1c44c:	umull	r2, r3, r9, r7
   1c450:	mov	r9, r2
   1c454:	mov	r8, r3
   1c458:	cmp	r1, #0
   1c45c:	beq	1c46c <__assert_fail@plt+0xb088>
   1c460:	mvn	r9, #0
   1c464:	mov	r6, #1
   1c468:	mov	r8, r9
   1c46c:	subs	lr, lr, #1
   1c470:	beq	1c6b4 <__assert_fail@plt+0xb2d0>
   1c474:	cmp	r8, #0
   1c478:	mov	r1, #0
   1c47c:	beq	1c44c <__assert_fail@plt+0xb068>
   1c480:	umull	r4, r5, r9, r7
   1c484:	mov	r3, #0
   1c488:	mov	r2, r5
   1c48c:	umlal	r2, r3, r8, r7
   1c490:	cmp	r3, #0
   1c494:	bne	1c89c <__assert_fail@plt+0xb4b8>
   1c498:	mov	r9, r4
   1c49c:	mov	r8, r2
   1c4a0:	b	1c458 <__assert_fail@plt+0xb074>
   1c4a4:	asr	r3, r7, #31
   1c4a8:	mov	r2, r7
   1c4ac:	mov	r6, #0
   1c4b0:	mov	lr, #6
   1c4b4:	mov	r0, r4
   1c4b8:	mov	ip, r5
   1c4bc:	strd	r2, [sp, #8]
   1c4c0:	b	1c4ec <__assert_fail@plt+0xb108>
   1c4c4:	umull	r2, r3, r9, r7
   1c4c8:	mov	r9, r2
   1c4cc:	mov	r8, r3
   1c4d0:	cmp	r1, #0
   1c4d4:	beq	1c4e4 <__assert_fail@plt+0xb100>
   1c4d8:	mvn	r9, #0
   1c4dc:	mov	r6, #1
   1c4e0:	mov	r8, r9
   1c4e4:	subs	lr, lr, #1
   1c4e8:	beq	1c6b4 <__assert_fail@plt+0xb2d0>
   1c4ec:	cmp	r8, #0
   1c4f0:	mov	r1, #0
   1c4f4:	beq	1c4c4 <__assert_fail@plt+0xb0e0>
   1c4f8:	umull	r4, r5, r9, r7
   1c4fc:	mov	r3, #0
   1c500:	mov	r2, r5
   1c504:	umlal	r2, r3, r8, r7
   1c508:	cmp	r3, #0
   1c50c:	bne	1c864 <__assert_fail@plt+0xb480>
   1c510:	mov	r9, r4
   1c514:	mov	r8, r2
   1c518:	b	1c4d0 <__assert_fail@plt+0xb0ec>
   1c51c:	asr	r3, r7, #31
   1c520:	mov	r2, r7
   1c524:	mov	r6, #0
   1c528:	mov	lr, #4
   1c52c:	mov	r0, r4
   1c530:	mov	ip, r5
   1c534:	strd	r2, [sp, #8]
   1c538:	b	1c564 <__assert_fail@plt+0xb180>
   1c53c:	umull	r2, r3, r9, r7
   1c540:	mov	r9, r2
   1c544:	mov	r8, r3
   1c548:	cmp	r1, #0
   1c54c:	beq	1c55c <__assert_fail@plt+0xb178>
   1c550:	mvn	r9, #0
   1c554:	mov	r6, #1
   1c558:	mov	r8, r9
   1c55c:	subs	lr, lr, #1
   1c560:	beq	1c6b4 <__assert_fail@plt+0xb2d0>
   1c564:	cmp	r8, #0
   1c568:	mov	r1, #0
   1c56c:	beq	1c53c <__assert_fail@plt+0xb158>
   1c570:	umull	r4, r5, r9, r7
   1c574:	mov	r3, #0
   1c578:	mov	r2, r5
   1c57c:	umlal	r2, r3, r8, r7
   1c580:	cmp	r3, #0
   1c584:	bne	1c880 <__assert_fail@plt+0xb49c>
   1c588:	mov	r9, r4
   1c58c:	mov	r8, r2
   1c590:	b	1c548 <__assert_fail@plt+0xb164>
   1c594:	asr	r3, r7, #31
   1c598:	mov	r2, r7
   1c59c:	mov	r6, #0
   1c5a0:	mov	lr, #5
   1c5a4:	mov	r0, r4
   1c5a8:	mov	ip, r5
   1c5ac:	strd	r2, [sp, #8]
   1c5b0:	b	1c5dc <__assert_fail@plt+0xb1f8>
   1c5b4:	umull	r2, r3, r9, r7
   1c5b8:	mov	r9, r2
   1c5bc:	mov	r8, r3
   1c5c0:	cmp	r1, #0
   1c5c4:	beq	1c5d4 <__assert_fail@plt+0xb1f0>
   1c5c8:	mvn	r9, #0
   1c5cc:	mov	r6, #1
   1c5d0:	mov	r8, r9
   1c5d4:	subs	lr, lr, #1
   1c5d8:	beq	1c6b4 <__assert_fail@plt+0xb2d0>
   1c5dc:	cmp	r8, #0
   1c5e0:	mov	r1, #0
   1c5e4:	beq	1c5b4 <__assert_fail@plt+0xb1d0>
   1c5e8:	umull	r4, r5, r9, r7
   1c5ec:	mov	r3, #0
   1c5f0:	mov	r2, r5
   1c5f4:	umlal	r2, r3, r8, r7
   1c5f8:	cmp	r3, #0
   1c5fc:	bne	1c7ec <__assert_fail@plt+0xb408>
   1c600:	mov	r9, r4
   1c604:	mov	r8, r2
   1c608:	b	1c5c0 <__assert_fail@plt+0xb1dc>
   1c60c:	lsr	r3, r8, #31
   1c610:	adds	r9, r9, r9
   1c614:	adc	r8, r8, r8
   1c618:	cmp	r3, #0
   1c61c:	beq	1c328 <__assert_fail@plt+0xaf44>
   1c620:	b	1c36c <__assert_fail@plt+0xaf88>
   1c624:	lsr	r3, r8, #23
   1c628:	lsl	r8, r8, #9
   1c62c:	cmp	r3, #0
   1c630:	lsl	r3, r9, #9
   1c634:	orr	r8, r8, r9, lsr #23
   1c638:	bne	1c36c <__assert_fail@plt+0xaf88>
   1c63c:	mov	r9, r3
   1c640:	b	1c328 <__assert_fail@plt+0xaf44>
   1c644:	asr	r3, r7, #31
   1c648:	mov	r2, r7
   1c64c:	cmp	r8, #0
   1c650:	mov	r1, #0
   1c654:	strd	r2, [sp, #8]
   1c658:	umull	r2, r3, r9, r7
   1c65c:	bne	1c700 <__assert_fail@plt+0xb31c>
   1c660:	mov	r0, r2
   1c664:	mov	ip, r3
   1c668:	cmp	r1, #0
   1c66c:	bne	1c36c <__assert_fail@plt+0xaf88>
   1c670:	cmp	ip, #0
   1c674:	bne	1c748 <__assert_fail@plt+0xb364>
   1c678:	umull	r2, r3, r0, r7
   1c67c:	mov	r6, r2
   1c680:	mov	r2, r3
   1c684:	cmp	r1, #0
   1c688:	mov	r9, r6
   1c68c:	mov	r8, r2
   1c690:	beq	1c328 <__assert_fail@plt+0xaf44>
   1c694:	b	1c36c <__assert_fail@plt+0xaf88>
   1c698:	lsr	r3, r8, #22
   1c69c:	lsl	r8, r8, #10
   1c6a0:	cmp	r3, #0
   1c6a4:	lsl	r3, r9, #10
   1c6a8:	orr	r8, r8, r9, lsr #22
   1c6ac:	beq	1c63c <__assert_fail@plt+0xb258>
   1c6b0:	b	1c36c <__assert_fail@plt+0xaf88>
   1c6b4:	mov	r5, ip
   1c6b8:	orr	r4, r0, r6
   1c6bc:	b	1c328 <__assert_fail@plt+0xaf44>
   1c6c0:	strd	r2, [sp, #8]
   1c6c4:	mov	r3, ip
   1c6c8:	ldr	r2, [sp, #12]
   1c6cc:	umlal	r2, r3, r8, r7
   1c6d0:	cmp	r3, #0
   1c6d4:	bne	1c808 <__assert_fail@plt+0xb424>
   1c6d8:	mov	r8, r2
   1c6dc:	ldr	r9, [sp, #8]
   1c6e0:	b	1c364 <__assert_fail@plt+0xaf80>
   1c6e4:	orr	r4, r6, ip
   1c6e8:	ldr	r5, [sp, #16]
   1c6ec:	b	1c328 <__assert_fail@plt+0xaf44>
   1c6f0:	mov	r3, #2
   1c6f4:	mov	r7, #1000	; 0x3e8
   1c6f8:	str	r3, [sp, #4]
   1c6fc:	b	1c1d0 <__assert_fail@plt+0xadec>
   1c700:	strd	r2, [sp, #16]
   1c704:	mov	r3, r1
   1c708:	ldr	r2, [sp, #20]
   1c70c:	umlal	r2, r3, r8, r7
   1c710:	cmp	r3, #0
   1c714:	bne	1c8d8 <__assert_fail@plt+0xb4f4>
   1c718:	mov	ip, r2
   1c71c:	ldr	r0, [sp, #16]
   1c720:	b	1c668 <__assert_fail@plt+0xb284>
   1c724:	mov	r2, r1
   1c728:	mov	r3, ip
   1c72c:	umlal	r2, r3, r8, r7
   1c730:	cmp	r3, #0
   1c734:	strd	r2, [sp, #16]
   1c738:	bne	1c7ac <__assert_fail@plt+0xb3c8>
   1c73c:	mov	r2, r0
   1c740:	ldr	r3, [sp, #16]
   1c744:	b	1c2dc <__assert_fail@plt+0xaef8>
   1c748:	umull	r8, r9, r0, r7
   1c74c:	mov	r3, r1
   1c750:	mov	r2, r9
   1c754:	umlal	r2, r3, ip, r7
   1c758:	cmp	r3, #0
   1c75c:	bne	1c8b8 <__assert_fail@plt+0xb4d4>
   1c760:	mov	r6, r8
   1c764:	b	1c684 <__assert_fail@plt+0xb2a0>
   1c768:	umull	r8, r9, ip, r7
   1c76c:	mov	r3, r0
   1c770:	mov	r2, r9
   1c774:	umlal	r2, r3, r1, r7
   1c778:	cmp	r3, #0
   1c77c:	bne	1c900 <__assert_fail@plt+0xb51c>
   1c780:	mov	r6, r8
   1c784:	b	1c318 <__assert_fail@plt+0xaf34>
   1c788:	umull	r8, r9, r2, r7
   1c78c:	mov	r1, ip
   1c790:	mov	r0, r9
   1c794:	umlal	r0, r1, r3, r7
   1c798:	cmp	r1, #0
   1c79c:	bne	1c7cc <__assert_fail@plt+0xb3e8>
   1c7a0:	mov	ip, r8
   1c7a4:	mov	r1, r0
   1c7a8:	b	1c2fc <__assert_fail@plt+0xaf18>
   1c7ac:	ldr	lr, [sp, #8]
   1c7b0:	mov	r2, r0
   1c7b4:	mov	ip, #1
   1c7b8:	ldr	r3, [sp, #12]
   1c7bc:	mul	r3, r9, r3
   1c7c0:	mla	r3, lr, r8, r3
   1c7c4:	add	r3, r3, r1
   1c7c8:	b	1c2dc <__assert_fail@plt+0xaef8>
   1c7cc:	ldr	r1, [sp, #12]
   1c7d0:	mov	lr, #1
   1c7d4:	mov	ip, r8
   1c7d8:	mul	r1, r2, r1
   1c7dc:	ldr	r2, [sp, #8]
   1c7e0:	mla	r1, r3, r2, r1
   1c7e4:	add	r1, r1, r9
   1c7e8:	b	1c2fc <__assert_fail@plt+0xaf18>
   1c7ec:	ldrd	r2, [sp, #8]
   1c7f0:	mov	r1, #1
   1c7f4:	mul	r3, r9, r3
   1c7f8:	mov	r9, r4
   1c7fc:	mla	r8, r2, r8, r3
   1c800:	add	r8, r8, r5
   1c804:	b	1c5c0 <__assert_fail@plt+0xb1dc>
   1c808:	mul	r3, r9, r1
   1c80c:	mov	ip, #1
   1c810:	mla	r8, r7, r8, r3
   1c814:	ldrd	r6, [sp, #8]
   1c818:	mov	r9, r6
   1c81c:	add	r8, r8, r7
   1c820:	b	1c364 <__assert_fail@plt+0xaf80>
   1c824:	movw	r3, #60804	; 0xed84
   1c828:	movt	r3, #1
   1c82c:	movw	r1, #60620	; 0xeccc
   1c830:	movt	r1, #1
   1c834:	movw	r0, #60636	; 0xecdc
   1c838:	movt	r0, #1
   1c83c:	mov	r2, #85	; 0x55
   1c840:	bl	113e4 <__assert_fail@plt>
   1c844:	ldr	r3, [sp, #12]
   1c848:	mov	r1, #1
   1c84c:	mul	r2, r9, r3
   1c850:	ldr	r3, [sp, #8]
   1c854:	mov	r9, r4
   1c858:	mla	r8, r3, r8, r2
   1c85c:	add	r8, r8, r5
   1c860:	b	1c3e0 <__assert_fail@plt+0xaffc>
   1c864:	ldrd	r2, [sp, #8]
   1c868:	mov	r1, #1
   1c86c:	mul	r3, r9, r3
   1c870:	mov	r9, r4
   1c874:	mla	r8, r2, r8, r3
   1c878:	add	r8, r8, r5
   1c87c:	b	1c4d0 <__assert_fail@plt+0xb0ec>
   1c880:	ldrd	r2, [sp, #8]
   1c884:	mov	r1, #1
   1c888:	mul	r3, r9, r3
   1c88c:	mov	r9, r4
   1c890:	mla	r8, r2, r8, r3
   1c894:	add	r8, r8, r5
   1c898:	b	1c548 <__assert_fail@plt+0xb164>
   1c89c:	ldrd	r2, [sp, #8]
   1c8a0:	mov	r1, #1
   1c8a4:	mul	r3, r9, r3
   1c8a8:	mov	r9, r4
   1c8ac:	mla	r8, r2, r8, r3
   1c8b0:	add	r8, r8, r5
   1c8b4:	b	1c458 <__assert_fail@plt+0xb074>
   1c8b8:	ldr	r3, [sp, #12]
   1c8bc:	mov	r6, r8
   1c8c0:	mov	r1, #1
   1c8c4:	mul	r2, r0, r3
   1c8c8:	ldr	r3, [sp, #8]
   1c8cc:	mla	r2, ip, r3, r2
   1c8d0:	add	r2, r2, r9
   1c8d4:	b	1c684 <__assert_fail@plt+0xb2a0>
   1c8d8:	ldr	r3, [sp, #12]
   1c8dc:	mov	r1, #1
   1c8e0:	ldr	r2, [sp, #16]
   1c8e4:	mul	ip, r9, r3
   1c8e8:	ldr	r3, [sp, #8]
   1c8ec:	mov	r0, r2
   1c8f0:	mla	ip, r3, r8, ip
   1c8f4:	ldr	r3, [sp, #20]
   1c8f8:	add	ip, ip, r3
   1c8fc:	b	1c668 <__assert_fail@plt+0xb284>
   1c900:	ldr	r3, [sp, #12]
   1c904:	mov	r6, r8
   1c908:	mov	r0, #1
   1c90c:	mul	r2, ip, r3
   1c910:	ldr	r3, [sp, #8]
   1c914:	mla	r2, r1, r3, r2
   1c918:	add	r2, r2, r9
   1c91c:	b	1c318 <__assert_fail@plt+0xaf34>
   1c920:	cmp	r1, #0
   1c924:	cmpne	r0, #0
   1c928:	beq	1c974 <__assert_fail@plt+0xb590>
   1c92c:	strd	r4, [sp, #-16]!
   1c930:	umull	r4, r5, r0, r1
   1c934:	str	r6, [sp, #8]
   1c938:	str	lr, [sp, #12]
   1c93c:	adds	r3, r5, #0
   1c940:	movne	r3, #1
   1c944:	cmp	r4, #0
   1c948:	blt	1c954 <__assert_fail@plt+0xb570>
   1c94c:	cmp	r3, #0
   1c950:	beq	1c980 <__assert_fail@plt+0xb59c>
   1c954:	bl	112c4 <__errno_location@plt>
   1c958:	mov	r3, #12
   1c95c:	ldrd	r4, [sp]
   1c960:	ldr	r6, [sp, #8]
   1c964:	add	sp, sp, #12
   1c968:	str	r3, [r0]
   1c96c:	mov	r0, #0
   1c970:	pop	{pc}		; (ldr pc, [sp], #4)
   1c974:	mov	r1, #1
   1c978:	mov	r0, r1
   1c97c:	b	11090 <calloc@plt>
   1c980:	ldrd	r4, [sp]
   1c984:	ldr	r6, [sp, #8]
   1c988:	ldr	lr, [sp, #12]
   1c98c:	add	sp, sp, #16
   1c990:	b	11090 <calloc@plt>
   1c994:	cmp	r0, #0
   1c998:	beq	1c9a4 <__assert_fail@plt+0xb5c0>
   1c99c:	blt	1c9ac <__assert_fail@plt+0xb5c8>
   1c9a0:	b	1121c <malloc@plt>
   1c9a4:	mov	r0, #1
   1c9a8:	b	1121c <malloc@plt>
   1c9ac:	str	r4, [sp, #-8]!
   1c9b0:	str	lr, [sp, #4]
   1c9b4:	bl	112c4 <__errno_location@plt>
   1c9b8:	mov	r3, #12
   1c9bc:	ldr	r4, [sp]
   1c9c0:	add	sp, sp, #4
   1c9c4:	str	r3, [r0]
   1c9c8:	mov	r0, #0
   1c9cc:	pop	{pc}		; (ldr pc, [sp], #4)
   1c9d0:	cmp	r0, #0
   1c9d4:	beq	1c9fc <__assert_fail@plt+0xb618>
   1c9d8:	cmp	r1, #0
   1c9dc:	str	r4, [sp, #-8]!
   1c9e0:	str	lr, [sp, #4]
   1c9e4:	beq	1ca04 <__assert_fail@plt+0xb620>
   1c9e8:	blt	1ca18 <__assert_fail@plt+0xb634>
   1c9ec:	ldr	r4, [sp]
   1c9f0:	ldr	lr, [sp, #4]
   1c9f4:	add	sp, sp, #8
   1c9f8:	b	11174 <realloc@plt>
   1c9fc:	mov	r0, r1
   1ca00:	b	1c994 <__assert_fail@plt+0xb5b0>
   1ca04:	bl	152ac <__assert_fail@plt+0x3ec8>
   1ca08:	ldr	r4, [sp]
   1ca0c:	add	sp, sp, #4
   1ca10:	mov	r0, #0
   1ca14:	pop	{pc}		; (ldr pc, [sp], #4)
   1ca18:	bl	112c4 <__errno_location@plt>
   1ca1c:	mov	r3, #12
   1ca20:	str	r3, [r0]
   1ca24:	b	1ca08 <__assert_fail@plt+0xb624>
   1ca28:	strd	r4, [sp, #-16]!
   1ca2c:	mov	r4, r0
   1ca30:	str	r6, [sp, #8]
   1ca34:	str	lr, [sp, #12]
   1ca38:	bl	111ec <__fpending@plt>
   1ca3c:	ldr	r5, [r4]
   1ca40:	mov	r6, r0
   1ca44:	mov	r0, r4
   1ca48:	bl	150ec <__assert_fail@plt+0x3d08>
   1ca4c:	mov	r4, r0
   1ca50:	and	r5, r5, #32
   1ca54:	cmp	r5, #0
   1ca58:	bne	1ca90 <__assert_fail@plt+0xb6ac>
   1ca5c:	cmp	r0, #0
   1ca60:	beq	1ca7c <__assert_fail@plt+0xb698>
   1ca64:	cmp	r6, #0
   1ca68:	bne	1caa8 <__assert_fail@plt+0xb6c4>
   1ca6c:	bl	112c4 <__errno_location@plt>
   1ca70:	ldr	r4, [r0]
   1ca74:	subs	r4, r4, #9
   1ca78:	mvnne	r4, #0
   1ca7c:	mov	r0, r4
   1ca80:	ldrd	r4, [sp]
   1ca84:	ldr	r6, [sp, #8]
   1ca88:	add	sp, sp, #12
   1ca8c:	pop	{pc}		; (ldr pc, [sp], #4)
   1ca90:	cmp	r0, #0
   1ca94:	bne	1caa8 <__assert_fail@plt+0xb6c4>
   1ca98:	bl	112c4 <__errno_location@plt>
   1ca9c:	str	r4, [r0]
   1caa0:	mvn	r4, #0
   1caa4:	b	1ca7c <__assert_fail@plt+0xb698>
   1caa8:	mvn	r4, #0
   1caac:	b	1ca7c <__assert_fail@plt+0xb698>
   1cab0:	push	{r1, r2, r3}
   1cab4:	strd	r4, [sp, #-20]!	; 0xffffffec
   1cab8:	strd	r6, [sp, #8]
   1cabc:	str	lr, [sp, #16]
   1cac0:	sub	sp, sp, #8
   1cac4:	ldr	r1, [sp, #28]
   1cac8:	add	r2, sp, #32
   1cacc:	str	r2, [sp, #4]
   1cad0:	cmp	r1, #0
   1cad4:	beq	1cbb0 <__assert_fail@plt+0xb7cc>
   1cad8:	movw	r3, #1030	; 0x406
   1cadc:	mov	r6, r0
   1cae0:	cmp	r1, r3
   1cae4:	beq	1cbc0 <__assert_fail@plt+0xb7dc>
   1cae8:	cmp	r1, #11
   1caec:	beq	1cb68 <__assert_fail@plt+0xb784>
   1caf0:	ble	1cb48 <__assert_fail@plt+0xb764>
   1caf4:	movw	r2, #1031	; 0x407
   1caf8:	cmp	r1, r2
   1cafc:	bgt	1cb84 <__assert_fail@plt+0xb7a0>
   1cb00:	cmp	r1, r3
   1cb04:	bge	1cb14 <__assert_fail@plt+0xb730>
   1cb08:	movw	r3, #1025	; 0x401
   1cb0c:	cmp	r1, r3
   1cb10:	beq	1cb68 <__assert_fail@plt+0xb784>
   1cb14:	ldr	r3, [sp, #4]
   1cb18:	mov	r0, r6
   1cb1c:	ldr	r2, [r3]
   1cb20:	bl	11330 <fcntl64@plt>
   1cb24:	mov	r4, r0
   1cb28:	mov	r0, r4
   1cb2c:	add	sp, sp, #8
   1cb30:	ldrd	r4, [sp]
   1cb34:	ldrd	r6, [sp, #8]
   1cb38:	ldr	lr, [sp, #16]
   1cb3c:	add	sp, sp, #20
   1cb40:	add	sp, sp, #12
   1cb44:	bx	lr
   1cb48:	cmp	r1, #4
   1cb4c:	beq	1cb14 <__assert_fail@plt+0xb730>
   1cb50:	bgt	1cb78 <__assert_fail@plt+0xb794>
   1cb54:	cmp	r1, #2
   1cb58:	beq	1cb14 <__assert_fail@plt+0xb730>
   1cb5c:	bgt	1cb68 <__assert_fail@plt+0xb784>
   1cb60:	cmp	r1, #1
   1cb64:	bne	1cb14 <__assert_fail@plt+0xb730>
   1cb68:	mov	r0, r6
   1cb6c:	bl	11330 <fcntl64@plt>
   1cb70:	mov	r4, r0
   1cb74:	b	1cb28 <__assert_fail@plt+0xb744>
   1cb78:	cmp	r1, #9
   1cb7c:	bne	1cb14 <__assert_fail@plt+0xb730>
   1cb80:	b	1cb68 <__assert_fail@plt+0xb784>
   1cb84:	movw	r3, #1033	; 0x409
   1cb88:	cmp	r1, r3
   1cb8c:	beq	1cb14 <__assert_fail@plt+0xb730>
   1cb90:	blt	1cb68 <__assert_fail@plt+0xb784>
   1cb94:	movw	r3, #1034	; 0x40a
   1cb98:	cmp	r1, r3
   1cb9c:	bne	1cb14 <__assert_fail@plt+0xb730>
   1cba0:	mov	r0, r6
   1cba4:	bl	11330 <fcntl64@plt>
   1cba8:	mov	r4, r0
   1cbac:	b	1cb28 <__assert_fail@plt+0xb744>
   1cbb0:	ldr	r2, [sp, #32]
   1cbb4:	bl	11330 <fcntl64@plt>
   1cbb8:	mov	r4, r0
   1cbbc:	b	1cb28 <__assert_fail@plt+0xb744>
   1cbc0:	movw	r5, #62440	; 0xf3e8
   1cbc4:	movt	r5, #2
   1cbc8:	ldr	r7, [r2]
   1cbcc:	add	r2, sp, #36	; 0x24
   1cbd0:	ldr	r3, [r5]
   1cbd4:	str	r2, [sp, #4]
   1cbd8:	mov	r2, r7
   1cbdc:	cmp	r3, #0
   1cbe0:	blt	1cbfc <__assert_fail@plt+0xb818>
   1cbe4:	bl	11330 <fcntl64@plt>
   1cbe8:	subs	r4, r0, #0
   1cbec:	blt	1cc64 <__assert_fail@plt+0xb880>
   1cbf0:	mov	r3, #1
   1cbf4:	str	r3, [r5]
   1cbf8:	b	1cb28 <__assert_fail@plt+0xb744>
   1cbfc:	mov	r1, #0
   1cc00:	bl	11330 <fcntl64@plt>
   1cc04:	subs	r4, r0, #0
   1cc08:	blt	1cb28 <__assert_fail@plt+0xb744>
   1cc0c:	ldr	r3, [r5]
   1cc10:	cmn	r3, #1
   1cc14:	bne	1cb28 <__assert_fail@plt+0xb744>
   1cc18:	mov	r1, #1
   1cc1c:	mov	r0, r4
   1cc20:	bl	11330 <fcntl64@plt>
   1cc24:	subs	r2, r0, #0
   1cc28:	blt	1cc44 <__assert_fail@plt+0xb860>
   1cc2c:	orr	r2, r2, #1
   1cc30:	mov	r1, #2
   1cc34:	mov	r0, r4
   1cc38:	bl	11330 <fcntl64@plt>
   1cc3c:	cmn	r0, #1
   1cc40:	bne	1cb28 <__assert_fail@plt+0xb744>
   1cc44:	bl	112c4 <__errno_location@plt>
   1cc48:	mov	r5, r0
   1cc4c:	mov	r0, r4
   1cc50:	ldr	r6, [r5]
   1cc54:	mvn	r4, #0
   1cc58:	bl	113d8 <close@plt>
   1cc5c:	str	r6, [r5]
   1cc60:	b	1cb28 <__assert_fail@plt+0xb744>
   1cc64:	bl	112c4 <__errno_location@plt>
   1cc68:	ldr	r3, [r0]
   1cc6c:	cmp	r3, #22
   1cc70:	bne	1cbf0 <__assert_fail@plt+0xb80c>
   1cc74:	mov	r2, r7
   1cc78:	mov	r0, r6
   1cc7c:	mov	r1, #0
   1cc80:	bl	11330 <fcntl64@plt>
   1cc84:	subs	r4, r0, #0
   1cc88:	mvnge	r3, #0
   1cc8c:	strge	r3, [r5]
   1cc90:	bge	1cc18 <__assert_fail@plt+0xb834>
   1cc94:	b	1cb28 <__assert_fail@plt+0xb744>
   1cc98:	mov	r0, #14
   1cc9c:	str	r4, [sp, #-8]!
   1cca0:	str	lr, [sp, #4]
   1cca4:	bl	1136c <nl_langinfo@plt>
   1cca8:	cmp	r0, #0
   1ccac:	beq	1ccd0 <__assert_fail@plt+0xb8ec>
   1ccb0:	ldrb	r2, [r0]
   1ccb4:	movw	r3, #60816	; 0xed90
   1ccb8:	movt	r3, #1
   1ccbc:	ldr	r4, [sp]
   1ccc0:	add	sp, sp, #4
   1ccc4:	cmp	r2, #0
   1ccc8:	moveq	r0, r3
   1cccc:	pop	{pc}		; (ldr pc, [sp], #4)
   1ccd0:	ldr	r4, [sp]
   1ccd4:	add	sp, sp, #4
   1ccd8:	movw	r0, #60816	; 0xed90
   1ccdc:	movt	r0, #1
   1cce0:	pop	{pc}		; (ldr pc, [sp], #4)
   1cce4:	strd	r4, [sp, #-20]!	; 0xffffffec
   1cce8:	mov	r5, r2
   1ccec:	strd	r6, [sp, #8]
   1ccf0:	subs	r6, r0, #0
   1ccf4:	mov	r7, r1
   1ccf8:	str	lr, [sp, #16]
   1ccfc:	sub	sp, sp, #12
   1cd00:	addeq	r6, sp, #4
   1cd04:	mov	r0, r6
   1cd08:	bl	111f8 <mbrtowc@plt>
   1cd0c:	cmp	r5, #0
   1cd10:	cmnne	r0, #3
   1cd14:	mov	r4, r0
   1cd18:	bhi	1cd34 <__assert_fail@plt+0xb950>
   1cd1c:	mov	r0, r4
   1cd20:	add	sp, sp, #12
   1cd24:	ldrd	r4, [sp]
   1cd28:	ldrd	r6, [sp, #8]
   1cd2c:	add	sp, sp, #16
   1cd30:	pop	{pc}		; (ldr pc, [sp], #4)
   1cd34:	mov	r0, #0
   1cd38:	bl	15420 <__assert_fail@plt+0x403c>
   1cd3c:	cmp	r0, #0
   1cd40:	bne	1cd1c <__assert_fail@plt+0xb938>
   1cd44:	ldrb	r3, [r7]
   1cd48:	mov	r4, #1
   1cd4c:	str	r3, [r6]
   1cd50:	b	1cd1c <__assert_fail@plt+0xb938>
   1cd54:	umull	r2, r3, r1, r2
   1cd58:	cmp	r3, #0
   1cd5c:	bne	1cd68 <__assert_fail@plt+0xb984>
   1cd60:	mov	r1, r2
   1cd64:	b	1c9d0 <__assert_fail@plt+0xb5ec>
   1cd68:	str	r4, [sp, #-8]!
   1cd6c:	str	lr, [sp, #4]
   1cd70:	bl	112c4 <__errno_location@plt>
   1cd74:	mov	r3, #12
   1cd78:	ldr	r4, [sp]
   1cd7c:	add	sp, sp, #4
   1cd80:	str	r3, [r0]
   1cd84:	mov	r0, #0
   1cd88:	pop	{pc}		; (ldr pc, [sp], #4)
   1cd8c:	cmp	r3, #0
   1cd90:	cmpeq	r2, #0
   1cd94:	bne	1cdb8 <__assert_fail@plt+0xb9d4>
   1cd98:	cmp	r1, #0
   1cd9c:	movlt	r1, #-2147483648	; 0x80000000
   1cda0:	movlt	r0, #0
   1cda4:	blt	1cdb4 <__assert_fail@plt+0xb9d0>
   1cda8:	cmpeq	r0, #0
   1cdac:	mvnne	r1, #-2147483648	; 0x80000000
   1cdb0:	mvnne	r0, #0
   1cdb4:	b	1ce9c <__assert_fail@plt+0xbab8>
   1cdb8:	sub	sp, sp, #8
   1cdbc:	push	{sp, lr}
   1cdc0:	cmp	r1, #0
   1cdc4:	blt	1cde4 <__assert_fail@plt+0xba00>
   1cdc8:	cmp	r3, #0
   1cdcc:	blt	1ce18 <__assert_fail@plt+0xba34>
   1cdd0:	bl	1ceac <__assert_fail@plt+0xbac8>
   1cdd4:	ldr	lr, [sp, #4]
   1cdd8:	add	sp, sp, #8
   1cddc:	pop	{r2, r3}
   1cde0:	bx	lr
   1cde4:	rsbs	r0, r0, #0
   1cde8:	sbc	r1, r1, r1, lsl #1
   1cdec:	cmp	r3, #0
   1cdf0:	blt	1ce3c <__assert_fail@plt+0xba58>
   1cdf4:	bl	1ceac <__assert_fail@plt+0xbac8>
   1cdf8:	ldr	lr, [sp, #4]
   1cdfc:	add	sp, sp, #8
   1ce00:	pop	{r2, r3}
   1ce04:	rsbs	r0, r0, #0
   1ce08:	sbc	r1, r1, r1, lsl #1
   1ce0c:	rsbs	r2, r2, #0
   1ce10:	sbc	r3, r3, r3, lsl #1
   1ce14:	bx	lr
   1ce18:	rsbs	r2, r2, #0
   1ce1c:	sbc	r3, r3, r3, lsl #1
   1ce20:	bl	1ceac <__assert_fail@plt+0xbac8>
   1ce24:	ldr	lr, [sp, #4]
   1ce28:	add	sp, sp, #8
   1ce2c:	pop	{r2, r3}
   1ce30:	rsbs	r0, r0, #0
   1ce34:	sbc	r1, r1, r1, lsl #1
   1ce38:	bx	lr
   1ce3c:	rsbs	r2, r2, #0
   1ce40:	sbc	r3, r3, r3, lsl #1
   1ce44:	bl	1ceac <__assert_fail@plt+0xbac8>
   1ce48:	ldr	lr, [sp, #4]
   1ce4c:	add	sp, sp, #8
   1ce50:	pop	{r2, r3}
   1ce54:	rsbs	r2, r2, #0
   1ce58:	sbc	r3, r3, r3, lsl #1
   1ce5c:	bx	lr
   1ce60:	cmp	r3, #0
   1ce64:	cmpeq	r2, #0
   1ce68:	bne	1ce80 <__assert_fail@plt+0xba9c>
   1ce6c:	cmp	r1, #0
   1ce70:	cmpeq	r0, #0
   1ce74:	mvnne	r1, #0
   1ce78:	mvnne	r0, #0
   1ce7c:	b	1ce9c <__assert_fail@plt+0xbab8>
   1ce80:	sub	sp, sp, #8
   1ce84:	push	{sp, lr}
   1ce88:	bl	1ceac <__assert_fail@plt+0xbac8>
   1ce8c:	ldr	lr, [sp, #4]
   1ce90:	add	sp, sp, #8
   1ce94:	pop	{r2, r3}
   1ce98:	bx	lr
   1ce9c:	push	{r1, lr}
   1cea0:	mov	r0, #8
   1cea4:	bl	110a8 <raise@plt>
   1cea8:	pop	{r1, pc}
   1ceac:	cmp	r1, r3
   1ceb0:	cmpeq	r0, r2
   1ceb4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ceb8:	mov	r4, r0
   1cebc:	movcc	r0, #0
   1cec0:	mov	r5, r1
   1cec4:	ldr	lr, [sp, #36]	; 0x24
   1cec8:	movcc	r1, r0
   1cecc:	bcc	1cfc8 <__assert_fail@plt+0xbbe4>
   1ced0:	cmp	r3, #0
   1ced4:	clzeq	ip, r2
   1ced8:	clzne	ip, r3
   1cedc:	addeq	ip, ip, #32
   1cee0:	cmp	r5, #0
   1cee4:	clzeq	r1, r4
   1cee8:	addeq	r1, r1, #32
   1ceec:	clzne	r1, r5
   1cef0:	sub	ip, ip, r1
   1cef4:	sub	sl, ip, #32
   1cef8:	lsl	r9, r3, ip
   1cefc:	rsb	fp, ip, #32
   1cf00:	orr	r9, r9, r2, lsl sl
   1cf04:	orr	r9, r9, r2, lsr fp
   1cf08:	lsl	r8, r2, ip
   1cf0c:	cmp	r5, r9
   1cf10:	cmpeq	r4, r8
   1cf14:	movcc	r0, #0
   1cf18:	movcc	r1, r0
   1cf1c:	bcc	1cf38 <__assert_fail@plt+0xbb54>
   1cf20:	mov	r0, #1
   1cf24:	subs	r4, r4, r8
   1cf28:	lsl	r1, r0, sl
   1cf2c:	orr	r1, r1, r0, lsr fp
   1cf30:	lsl	r0, r0, ip
   1cf34:	sbc	r5, r5, r9
   1cf38:	cmp	ip, #0
   1cf3c:	beq	1cfc8 <__assert_fail@plt+0xbbe4>
   1cf40:	lsr	r6, r8, #1
   1cf44:	orr	r6, r6, r9, lsl #31
   1cf48:	lsr	r7, r9, #1
   1cf4c:	mov	r2, ip
   1cf50:	b	1cf74 <__assert_fail@plt+0xbb90>
   1cf54:	subs	r3, r4, r6
   1cf58:	sbc	r8, r5, r7
   1cf5c:	adds	r3, r3, r3
   1cf60:	adc	r8, r8, r8
   1cf64:	adds	r4, r3, #1
   1cf68:	adc	r5, r8, #0
   1cf6c:	subs	r2, r2, #1
   1cf70:	beq	1cf90 <__assert_fail@plt+0xbbac>
   1cf74:	cmp	r5, r7
   1cf78:	cmpeq	r4, r6
   1cf7c:	bcs	1cf54 <__assert_fail@plt+0xbb70>
   1cf80:	adds	r4, r4, r4
   1cf84:	adc	r5, r5, r5
   1cf88:	subs	r2, r2, #1
   1cf8c:	bne	1cf74 <__assert_fail@plt+0xbb90>
   1cf90:	lsr	r3, r4, ip
   1cf94:	orr	r3, r3, r5, lsl fp
   1cf98:	lsr	r2, r5, ip
   1cf9c:	orr	r3, r3, r5, lsr sl
   1cfa0:	adds	r0, r0, r4
   1cfa4:	mov	r4, r3
   1cfa8:	lsl	r3, r2, ip
   1cfac:	orr	r3, r3, r4, lsl sl
   1cfb0:	lsl	ip, r4, ip
   1cfb4:	orr	r3, r3, r4, lsr fp
   1cfb8:	adc	r1, r1, r5
   1cfbc:	subs	r0, r0, ip
   1cfc0:	mov	r5, r2
   1cfc4:	sbc	r1, r1, r3
   1cfc8:	cmp	lr, #0
   1cfcc:	strdne	r4, [lr]
   1cfd0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1cfd4:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1cfd8:	mov	r7, r0
   1cfdc:	ldr	r6, [pc, #72]	; 1d02c <__assert_fail@plt+0xbc48>
   1cfe0:	ldr	r5, [pc, #72]	; 1d030 <__assert_fail@plt+0xbc4c>
   1cfe4:	add	r6, pc, r6
   1cfe8:	add	r5, pc, r5
   1cfec:	sub	r6, r6, r5
   1cff0:	mov	r8, r1
   1cff4:	mov	r9, r2
   1cff8:	bl	11064 <fdopen@plt-0x20>
   1cffc:	asrs	r6, r6, #2
   1d000:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   1d004:	mov	r4, #0
   1d008:	add	r4, r4, #1
   1d00c:	ldr	r3, [r5], #4
   1d010:	mov	r2, r9
   1d014:	mov	r1, r8
   1d018:	mov	r0, r7
   1d01c:	blx	r3
   1d020:	cmp	r6, r4
   1d024:	bne	1d008 <__assert_fail@plt+0xbc24>
   1d028:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1d02c:	andeq	r1, r1, r8, lsr #30
   1d030:	andeq	r1, r1, r0, lsr #30
   1d034:	bx	lr
   1d038:	ldr	r3, [pc, #12]	; 1d04c <__assert_fail@plt+0xbc68>
   1d03c:	mov	r1, #0
   1d040:	add	r3, pc, r3
   1d044:	ldr	r2, [r3]
   1d048:	b	112dc <__cxa_atexit@plt>
   1d04c:	strdeq	r2, [r1], -r4

Disassembly of section .fini:

0001d050 <.fini>:
   1d050:	push	{r3, lr}
   1d054:	pop	{r3, pc}
