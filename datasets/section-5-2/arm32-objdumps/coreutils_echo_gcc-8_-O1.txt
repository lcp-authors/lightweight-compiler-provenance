
../repos/coreutils/src/echo:     file format elf32-littlearm


Disassembly of section .init:

00010ab8 <.init>:
   10ab8:	push	{r3, lr}
   10abc:	bl	10d24 <__assert_fail@plt+0x48>
   10ac0:	pop	{r3, pc}

Disassembly of section .plt:

00010ac4 <calloc@plt-0x14>:
   10ac4:	push	{lr}		; (str lr, [sp, #-4]!)
   10ac8:	ldr	lr, [pc, #4]	; 10ad4 <calloc@plt-0x4>
   10acc:	add	lr, pc, lr
   10ad0:	ldr	pc, [lr, #8]!
   10ad4:	andeq	r5, r1, ip, lsr #10

00010ad8 <calloc@plt>:
   10ad8:	add	ip, pc, #0, 12
   10adc:	add	ip, ip, #86016	; 0x15000
   10ae0:	ldr	pc, [ip, #1324]!	; 0x52c

00010ae4 <fputs_unlocked@plt>:
   10ae4:	add	ip, pc, #0, 12
   10ae8:	add	ip, ip, #86016	; 0x15000
   10aec:	ldr	pc, [ip, #1316]!	; 0x524

00010af0 <strcmp@plt>:
   10af0:	add	ip, pc, #0, 12
   10af4:	add	ip, ip, #86016	; 0x15000
   10af8:	ldr	pc, [ip, #1308]!	; 0x51c

00010afc <fflush@plt>:
   10afc:	add	ip, pc, #0, 12
   10b00:	add	ip, ip, #86016	; 0x15000
   10b04:	ldr	pc, [ip, #1300]!	; 0x514

00010b08 <free@plt>:
   10b08:	add	ip, pc, #0, 12
   10b0c:	add	ip, ip, #86016	; 0x15000
   10b10:	ldr	pc, [ip, #1292]!	; 0x50c

00010b14 <_exit@plt>:
   10b14:	add	ip, pc, #0, 12
   10b18:	add	ip, ip, #86016	; 0x15000
   10b1c:	ldr	pc, [ip, #1284]!	; 0x504

00010b20 <memcpy@plt>:
   10b20:	add	ip, pc, #0, 12
   10b24:	add	ip, ip, #86016	; 0x15000
   10b28:	ldr	pc, [ip, #1276]!	; 0x4fc

00010b2c <mbsinit@plt>:
   10b2c:	add	ip, pc, #0, 12
   10b30:	add	ip, ip, #86016	; 0x15000
   10b34:	ldr	pc, [ip, #1268]!	; 0x4f4

00010b38 <memcmp@plt>:
   10b38:	add	ip, pc, #0, 12
   10b3c:	add	ip, ip, #86016	; 0x15000
   10b40:	ldr	pc, [ip, #1260]!	; 0x4ec

00010b44 <fputc_unlocked@plt>:
   10b44:	add	ip, pc, #0, 12
   10b48:	add	ip, ip, #86016	; 0x15000
   10b4c:	ldr	pc, [ip, #1252]!	; 0x4e4

00010b50 <dcgettext@plt>:
   10b50:	add	ip, pc, #0, 12
   10b54:	add	ip, ip, #86016	; 0x15000
   10b58:	ldr	pc, [ip, #1244]!	; 0x4dc

00010b5c <realloc@plt>:
   10b5c:	add	ip, pc, #0, 12
   10b60:	add	ip, ip, #86016	; 0x15000
   10b64:	ldr	pc, [ip, #1236]!	; 0x4d4

00010b68 <textdomain@plt>:
   10b68:	add	ip, pc, #0, 12
   10b6c:	add	ip, ip, #86016	; 0x15000
   10b70:	ldr	pc, [ip, #1228]!	; 0x4cc

00010b74 <iswprint@plt>:
   10b74:	add	ip, pc, #0, 12
   10b78:	add	ip, ip, #86016	; 0x15000
   10b7c:	ldr	pc, [ip, #1220]!	; 0x4c4

00010b80 <fwrite@plt>:
   10b80:	add	ip, pc, #0, 12
   10b84:	add	ip, ip, #86016	; 0x15000
   10b88:	ldr	pc, [ip, #1212]!	; 0x4bc

00010b8c <lseek64@plt>:
   10b8c:	add	ip, pc, #0, 12
   10b90:	add	ip, ip, #86016	; 0x15000
   10b94:	ldr	pc, [ip, #1204]!	; 0x4b4

00010b98 <__ctype_get_mb_cur_max@plt>:
   10b98:	add	ip, pc, #0, 12
   10b9c:	add	ip, ip, #86016	; 0x15000
   10ba0:	ldr	pc, [ip, #1196]!	; 0x4ac

00010ba4 <__fpending@plt>:
   10ba4:	add	ip, pc, #0, 12
   10ba8:	add	ip, ip, #86016	; 0x15000
   10bac:	ldr	pc, [ip, #1188]!	; 0x4a4

00010bb0 <mbrtowc@plt>:
   10bb0:	add	ip, pc, #0, 12
   10bb4:	add	ip, ip, #86016	; 0x15000
   10bb8:	ldr	pc, [ip, #1180]!	; 0x49c

00010bbc <error@plt>:
   10bbc:	add	ip, pc, #0, 12
   10bc0:	add	ip, ip, #86016	; 0x15000
   10bc4:	ldr	pc, [ip, #1172]!	; 0x494

00010bc8 <getenv@plt>:
   10bc8:	add	ip, pc, #0, 12
   10bcc:	add	ip, ip, #86016	; 0x15000
   10bd0:	ldr	pc, [ip, #1164]!	; 0x48c

00010bd4 <malloc@plt>:
   10bd4:	add	ip, pc, #0, 12
   10bd8:	add	ip, ip, #86016	; 0x15000
   10bdc:	ldr	pc, [ip, #1156]!	; 0x484

00010be0 <__libc_start_main@plt>:
   10be0:	add	ip, pc, #0, 12
   10be4:	add	ip, ip, #86016	; 0x15000
   10be8:	ldr	pc, [ip, #1148]!	; 0x47c

00010bec <__freading@plt>:
   10bec:	add	ip, pc, #0, 12
   10bf0:	add	ip, ip, #86016	; 0x15000
   10bf4:	ldr	pc, [ip, #1140]!	; 0x474

00010bf8 <__gmon_start__@plt>:
   10bf8:	add	ip, pc, #0, 12
   10bfc:	add	ip, ip, #86016	; 0x15000
   10c00:	ldr	pc, [ip, #1132]!	; 0x46c

00010c04 <__ctype_b_loc@plt>:
   10c04:	add	ip, pc, #0, 12
   10c08:	add	ip, ip, #86016	; 0x15000
   10c0c:	ldr	pc, [ip, #1124]!	; 0x464

00010c10 <exit@plt>:
   10c10:	add	ip, pc, #0, 12
   10c14:	add	ip, ip, #86016	; 0x15000
   10c18:	ldr	pc, [ip, #1116]!	; 0x45c

00010c1c <strlen@plt>:
   10c1c:	add	ip, pc, #0, 12
   10c20:	add	ip, ip, #86016	; 0x15000
   10c24:	ldr	pc, [ip, #1108]!	; 0x454

00010c28 <__errno_location@plt>:
   10c28:	add	ip, pc, #0, 12
   10c2c:	add	ip, ip, #86016	; 0x15000
   10c30:	ldr	pc, [ip, #1100]!	; 0x44c

00010c34 <__cxa_atexit@plt>:
   10c34:	add	ip, pc, #0, 12
   10c38:	add	ip, ip, #86016	; 0x15000
   10c3c:	ldr	pc, [ip, #1092]!	; 0x444

00010c40 <memset@plt>:
   10c40:	add	ip, pc, #0, 12
   10c44:	add	ip, ip, #86016	; 0x15000
   10c48:	ldr	pc, [ip, #1084]!	; 0x43c

00010c4c <__printf_chk@plt>:
   10c4c:	add	ip, pc, #0, 12
   10c50:	add	ip, ip, #86016	; 0x15000
   10c54:	ldr	pc, [ip, #1076]!	; 0x434

00010c58 <fileno@plt>:
   10c58:	add	ip, pc, #0, 12
   10c5c:	add	ip, ip, #86016	; 0x15000
   10c60:	ldr	pc, [ip, #1068]!	; 0x42c

00010c64 <__fprintf_chk@plt>:
   10c64:	add	ip, pc, #0, 12
   10c68:	add	ip, ip, #86016	; 0x15000
   10c6c:	ldr	pc, [ip, #1060]!	; 0x424

00010c70 <fclose@plt>:
   10c70:	add	ip, pc, #0, 12
   10c74:	add	ip, ip, #86016	; 0x15000
   10c78:	ldr	pc, [ip, #1052]!	; 0x41c

00010c7c <fseeko64@plt>:
   10c7c:	add	ip, pc, #0, 12
   10c80:	add	ip, ip, #86016	; 0x15000
   10c84:	ldr	pc, [ip, #1044]!	; 0x414

00010c88 <__overflow@plt>:
   10c88:	add	ip, pc, #0, 12
   10c8c:	add	ip, ip, #86016	; 0x15000
   10c90:	ldr	pc, [ip, #1036]!	; 0x40c

00010c94 <setlocale@plt>:
   10c94:	add	ip, pc, #0, 12
   10c98:	add	ip, ip, #86016	; 0x15000
   10c9c:	ldr	pc, [ip, #1028]!	; 0x404

00010ca0 <strrchr@plt>:
   10ca0:	add	ip, pc, #0, 12
   10ca4:	add	ip, ip, #86016	; 0x15000
   10ca8:	ldr	pc, [ip, #1020]!	; 0x3fc

00010cac <nl_langinfo@plt>:
   10cac:	add	ip, pc, #0, 12
   10cb0:	add	ip, ip, #86016	; 0x15000
   10cb4:	ldr	pc, [ip, #1012]!	; 0x3f4

00010cb8 <bindtextdomain@plt>:
   10cb8:	add	ip, pc, #0, 12
   10cbc:	add	ip, ip, #86016	; 0x15000
   10cc0:	ldr	pc, [ip, #1004]!	; 0x3ec

00010cc4 <strncmp@plt>:
   10cc4:	add	ip, pc, #0, 12
   10cc8:	add	ip, ip, #86016	; 0x15000
   10ccc:	ldr	pc, [ip, #996]!	; 0x3e4

00010cd0 <abort@plt>:
   10cd0:	add	ip, pc, #0, 12
   10cd4:	add	ip, ip, #86016	; 0x15000
   10cd8:	ldr	pc, [ip, #988]!	; 0x3dc

00010cdc <__assert_fail@plt>:
   10cdc:	add	ip, pc, #0, 12
   10ce0:	add	ip, ip, #86016	; 0x15000
   10ce4:	ldr	pc, [ip, #980]!	; 0x3d4

Disassembly of section .text:

00010ce8 <.text>:
   10ce8:	mov	fp, #0
   10cec:	mov	lr, #0
   10cf0:	pop	{r1}		; (ldr r1, [sp], #4)
   10cf4:	mov	r2, sp
   10cf8:	push	{r2}		; (str r2, [sp, #-4]!)
   10cfc:	push	{r0}		; (str r0, [sp, #-4]!)
   10d00:	ldr	ip, [pc, #16]	; 10d18 <__assert_fail@plt+0x3c>
   10d04:	push	{ip}		; (str ip, [sp, #-4]!)
   10d08:	ldr	r0, [pc, #12]	; 10d1c <__assert_fail@plt+0x40>
   10d0c:	ldr	r3, [pc, #12]	; 10d20 <__assert_fail@plt+0x44>
   10d10:	bl	10be0 <__libc_start_main@plt>
   10d14:	bl	10cd0 <abort@plt>
   10d18:	andeq	r4, r1, r4, asr lr
   10d1c:	andeq	r1, r1, r4, asr #5
   10d20:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   10d24:	ldr	r3, [pc, #20]	; 10d40 <__assert_fail@plt+0x64>
   10d28:	ldr	r2, [pc, #20]	; 10d44 <__assert_fail@plt+0x68>
   10d2c:	add	r3, pc, r3
   10d30:	ldr	r2, [r3, r2]
   10d34:	cmp	r2, #0
   10d38:	bxeq	lr
   10d3c:	b	10bf8 <__gmon_start__@plt>
   10d40:	andeq	r5, r1, ip, asr #5
   10d44:	strheq	r0, [r0], -ip
   10d48:	ldr	r0, [pc, #24]	; 10d68 <__assert_fail@plt+0x8c>
   10d4c:	ldr	r3, [pc, #24]	; 10d6c <__assert_fail@plt+0x90>
   10d50:	cmp	r3, r0
   10d54:	bxeq	lr
   10d58:	ldr	r3, [pc, #16]	; 10d70 <__assert_fail@plt+0x94>
   10d5c:	cmp	r3, #0
   10d60:	bxeq	lr
   10d64:	bx	r3
   10d68:	andeq	r6, r2, r0, lsl r1
   10d6c:	andeq	r6, r2, r0, lsl r1
   10d70:	andeq	r0, r0, r0
   10d74:	ldr	r0, [pc, #36]	; 10da0 <__assert_fail@plt+0xc4>
   10d78:	ldr	r1, [pc, #36]	; 10da4 <__assert_fail@plt+0xc8>
   10d7c:	sub	r1, r1, r0
   10d80:	asr	r1, r1, #2
   10d84:	add	r1, r1, r1, lsr #31
   10d88:	asrs	r1, r1, #1
   10d8c:	bxeq	lr
   10d90:	ldr	r3, [pc, #16]	; 10da8 <__assert_fail@plt+0xcc>
   10d94:	cmp	r3, #0
   10d98:	bxeq	lr
   10d9c:	bx	r3
   10da0:	andeq	r6, r2, r0, lsl r1
   10da4:	andeq	r6, r2, r0, lsl r1
   10da8:	andeq	r0, r0, r0
   10dac:	push	{r4, lr}
   10db0:	ldr	r4, [pc, #24]	; 10dd0 <__assert_fail@plt+0xf4>
   10db4:	ldrb	r3, [r4]
   10db8:	cmp	r3, #0
   10dbc:	popne	{r4, pc}
   10dc0:	bl	10d48 <__assert_fail@plt+0x6c>
   10dc4:	mov	r3, #1
   10dc8:	strb	r3, [r4]
   10dcc:	pop	{r4, pc}
   10dd0:	andeq	r6, r2, r0, lsr #2
   10dd4:	b	10d74 <__assert_fail@plt+0x98>
   10dd8:	sub	r3, r0, #65	; 0x41
   10ddc:	cmp	r3, #37	; 0x25
   10de0:	ldrls	pc, [pc, r3, lsl #2]
   10de4:	b	10e88 <__assert_fail@plt+0x1ac>
   10de8:			; <UNDEFINED> instruction: 0x00010eb0
   10dec:	andeq	r0, r1, r0, lsl #29
   10df0:	muleq	r1, r0, lr
   10df4:	muleq	r1, r8, lr
   10df8:	andeq	r0, r1, r0, lsr #29
   10dfc:	andeq	r0, r1, r8, lsr #29
   10e00:	andeq	r0, r1, r8, lsl #29
   10e04:	andeq	r0, r1, r8, lsl #29
   10e08:	andeq	r0, r1, r8, lsl #29
   10e0c:	andeq	r0, r1, r8, lsl #29
   10e10:	andeq	r0, r1, r8, lsl #29
   10e14:	andeq	r0, r1, r8, lsl #29
   10e18:	andeq	r0, r1, r8, lsl #29
   10e1c:	andeq	r0, r1, r8, lsl #29
   10e20:	andeq	r0, r1, r8, lsl #29
   10e24:	andeq	r0, r1, r8, lsl #29
   10e28:	andeq	r0, r1, r8, lsl #29
   10e2c:	andeq	r0, r1, r8, lsl #29
   10e30:	andeq	r0, r1, r8, lsl #29
   10e34:	andeq	r0, r1, r8, lsl #29
   10e38:	andeq	r0, r1, r8, lsl #29
   10e3c:	andeq	r0, r1, r8, lsl #29
   10e40:	andeq	r0, r1, r8, lsl #29
   10e44:	andeq	r0, r1, r8, lsl #29
   10e48:	andeq	r0, r1, r8, lsl #29
   10e4c:	andeq	r0, r1, r8, lsl #29
   10e50:	andeq	r0, r1, r8, lsl #29
   10e54:	andeq	r0, r1, r8, lsl #29
   10e58:	andeq	r0, r1, r8, lsl #29
   10e5c:	andeq	r0, r1, r8, lsl #29
   10e60:	andeq	r0, r1, r8, lsl #29
   10e64:	andeq	r0, r1, r8, lsl #29
   10e68:			; <UNDEFINED> instruction: 0x00010eb0
   10e6c:	andeq	r0, r1, r0, lsl #29
   10e70:	muleq	r1, r0, lr
   10e74:	muleq	r1, r8, lr
   10e78:	andeq	r0, r1, r0, lsr #29
   10e7c:	andeq	r0, r1, r8, lsr #29
   10e80:	mov	r0, #11
   10e84:	bx	lr
   10e88:	sub	r0, r0, #48	; 0x30
   10e8c:	bx	lr
   10e90:	mov	r0, #12
   10e94:	bx	lr
   10e98:	mov	r0, #13
   10e9c:	bx	lr
   10ea0:	mov	r0, #14
   10ea4:	bx	lr
   10ea8:	mov	r0, #15
   10eac:	bx	lr
   10eb0:	mov	r0, #10
   10eb4:	bx	lr
   10eb8:	push	{lr}		; (str lr, [sp, #-4]!)
   10ebc:	sub	sp, sp, #60	; 0x3c
   10ec0:	cmp	r0, #0
   10ec4:	beq	10ee8 <__assert_fail@plt+0x20c>
   10ec8:	movw	r3, #20092	; 0x4e7c
   10ecc:	movt	r3, #1
   10ed0:	mov	r2, #40	; 0x28
   10ed4:	movw	r1, #20164	; 0x4ec4
   10ed8:	movt	r1, #1
   10edc:	movw	r0, #20176	; 0x4ed0
   10ee0:	movt	r0, #1
   10ee4:	bl	10cdc <__assert_fail@plt>
   10ee8:	mov	r2, #5
   10eec:	movw	r1, #20200	; 0x4ee8
   10ef0:	movt	r1, #1
   10ef4:	mov	r0, #0
   10ef8:	bl	10b50 <dcgettext@plt>
   10efc:	movw	r3, #24876	; 0x612c
   10f00:	movt	r3, #2
   10f04:	ldr	r2, [r3]
   10f08:	mov	r3, r2
   10f0c:	mov	r1, r0
   10f10:	mov	r0, #1
   10f14:	bl	10c4c <__printf_chk@plt>
   10f18:	mov	r2, #5
   10f1c:	movw	r1, #20264	; 0x4f28
   10f20:	movt	r1, #1
   10f24:	mov	r0, #0
   10f28:	bl	10b50 <dcgettext@plt>
   10f2c:	movw	r4, #24860	; 0x611c
   10f30:	movt	r4, #2
   10f34:	ldr	r1, [r4]
   10f38:	bl	10ae4 <fputs_unlocked@plt>
   10f3c:	mov	r2, #5
   10f40:	movw	r1, #20360	; 0x4f88
   10f44:	movt	r1, #1
   10f48:	mov	r0, #0
   10f4c:	bl	10b50 <dcgettext@plt>
   10f50:	ldr	r1, [r4]
   10f54:	bl	10ae4 <fputs_unlocked@plt>
   10f58:	mov	r2, #5
   10f5c:	movw	r1, #20492	; 0x500c
   10f60:	movt	r1, #1
   10f64:	mov	r0, #0
   10f68:	bl	10b50 <dcgettext@plt>
   10f6c:	ldr	r1, [r4]
   10f70:	bl	10ae4 <fputs_unlocked@plt>
   10f74:	mov	r2, #5
   10f78:	movw	r1, #20540	; 0x503c
   10f7c:	movt	r1, #1
   10f80:	mov	r0, #0
   10f84:	bl	10b50 <dcgettext@plt>
   10f88:	ldr	r1, [r4]
   10f8c:	bl	10ae4 <fputs_unlocked@plt>
   10f90:	mov	r2, #5
   10f94:	movw	r1, #20596	; 0x5074
   10f98:	movt	r1, #1
   10f9c:	mov	r0, #0
   10fa0:	bl	10b50 <dcgettext@plt>
   10fa4:	ldr	r1, [r4]
   10fa8:	bl	10ae4 <fputs_unlocked@plt>
   10fac:	mov	r2, #5
   10fb0:	movw	r1, #20660	; 0x50b4
   10fb4:	movt	r1, #1
   10fb8:	mov	r0, #0
   10fbc:	bl	10b50 <dcgettext@plt>
   10fc0:	ldr	r1, [r4]
   10fc4:	bl	10ae4 <fputs_unlocked@plt>
   10fc8:	mov	r2, #5
   10fcc:	movw	r1, #20892	; 0x519c
   10fd0:	movt	r1, #1
   10fd4:	mov	r0, #0
   10fd8:	bl	10b50 <dcgettext@plt>
   10fdc:	ldr	r1, [r4]
   10fe0:	bl	10ae4 <fputs_unlocked@plt>
   10fe4:	mov	r2, #5
   10fe8:	movw	r1, #21004	; 0x520c
   10fec:	movt	r1, #1
   10ff0:	mov	r0, #0
   10ff4:	bl	10b50 <dcgettext@plt>
   10ff8:	movw	r2, #20156	; 0x4ebc
   10ffc:	movt	r2, #1
   11000:	mov	r1, r0
   11004:	mov	r0, #1
   11008:	bl	10c4c <__printf_chk@plt>
   1100c:	mov	r2, #5
   11010:	movw	r1, #21196	; 0x52cc
   11014:	movt	r1, #1
   11018:	mov	r0, #0
   1101c:	bl	10b50 <dcgettext@plt>
   11020:	ldr	r1, [r4]
   11024:	bl	10ae4 <fputs_unlocked@plt>
   11028:	movw	r2, #20092	; 0x4e7c
   1102c:	movt	r2, #1
   11030:	add	r3, r2, #8
   11034:	ldr	r1, [r2, #8]
   11038:	ldr	r2, [r2, #12]
   1103c:	str	r1, [sp]
   11040:	str	r2, [sp, #4]
   11044:	ldrd	r4, [r3, #8]
   11048:	strd	r4, [sp, #8]
   1104c:	ldrd	r4, [r3, #16]
   11050:	strd	r4, [sp, #16]
   11054:	ldrd	r4, [r3, #24]
   11058:	strd	r4, [sp, #24]
   1105c:	ldrd	r4, [r3, #32]
   11060:	strd	r4, [sp, #32]
   11064:	ldrd	r4, [r3, #40]	; 0x28
   11068:	strd	r4, [sp, #40]	; 0x28
   1106c:	ldrd	r2, [r3, #48]	; 0x30
   11070:	strd	r2, [sp, #48]	; 0x30
   11074:	cmp	r1, #0
   11078:	moveq	r4, sp
   1107c:	beq	110a8 <__assert_fail@plt+0x3cc>
   11080:	mov	r4, sp
   11084:	movw	r5, #20156	; 0x4ebc
   11088:	movt	r5, #1
   1108c:	mov	r0, r5
   11090:	bl	10af0 <strcmp@plt>
   11094:	cmp	r0, #0
   11098:	beq	110a8 <__assert_fail@plt+0x3cc>
   1109c:	ldr	r1, [r4, #8]!
   110a0:	cmp	r1, #0
   110a4:	bne	1108c <__assert_fail@plt+0x3b0>
   110a8:	ldr	r4, [r4, #4]
   110ac:	cmp	r4, #0
   110b0:	beq	11210 <__assert_fail@plt+0x534>
   110b4:	mov	r2, #5
   110b8:	movw	r1, #21304	; 0x5338
   110bc:	movt	r1, #1
   110c0:	mov	r0, #0
   110c4:	bl	10b50 <dcgettext@plt>
   110c8:	movw	r3, #21328	; 0x5350
   110cc:	movt	r3, #1
   110d0:	movw	r2, #21368	; 0x5378
   110d4:	movt	r2, #1
   110d8:	mov	r1, r0
   110dc:	mov	r0, #1
   110e0:	bl	10c4c <__printf_chk@plt>
   110e4:	mov	r1, #0
   110e8:	mov	r0, #5
   110ec:	bl	10c94 <setlocale@plt>
   110f0:	cmp	r0, #0
   110f4:	beq	11110 <__assert_fail@plt+0x434>
   110f8:	mov	r2, #3
   110fc:	movw	r1, #21384	; 0x5388
   11100:	movt	r1, #1
   11104:	bl	10cc4 <strncmp@plt>
   11108:	cmp	r0, #0
   1110c:	bne	11190 <__assert_fail@plt+0x4b4>
   11110:	mov	r2, #5
   11114:	movw	r1, #21460	; 0x53d4
   11118:	movt	r1, #1
   1111c:	mov	r0, #0
   11120:	bl	10b50 <dcgettext@plt>
   11124:	movw	r5, #20156	; 0x4ebc
   11128:	movt	r5, #1
   1112c:	mov	r3, r5
   11130:	movw	r2, #21328	; 0x5350
   11134:	movt	r2, #1
   11138:	mov	r1, r0
   1113c:	mov	r0, #1
   11140:	bl	10c4c <__printf_chk@plt>
   11144:	mov	r2, #5
   11148:	movw	r1, #21488	; 0x53f0
   1114c:	movt	r1, #1
   11150:	mov	r0, #0
   11154:	bl	10b50 <dcgettext@plt>
   11158:	mov	r1, r0
   1115c:	movw	r2, #21636	; 0x5484
   11160:	movt	r2, #1
   11164:	movw	r3, #21300	; 0x5334
   11168:	movt	r3, #1
   1116c:	cmp	r4, r5
   11170:	moveq	r3, r2
   11174:	mov	r2, r4
   11178:	mov	r0, #1
   1117c:	bl	10c4c <__printf_chk@plt>
   11180:	mov	r0, #0
   11184:	bl	10c10 <exit@plt>
   11188:	movw	r4, #20156	; 0x4ebc
   1118c:	movt	r4, #1
   11190:	mov	r2, #5
   11194:	movw	r1, #21388	; 0x538c
   11198:	movt	r1, #1
   1119c:	mov	r0, #0
   111a0:	bl	10b50 <dcgettext@plt>
   111a4:	movw	r3, #24860	; 0x611c
   111a8:	movt	r3, #2
   111ac:	ldr	r1, [r3]
   111b0:	bl	10ae4 <fputs_unlocked@plt>
   111b4:	b	11110 <__assert_fail@plt+0x434>
   111b8:	mov	r2, #5
   111bc:	movw	r1, #21460	; 0x53d4
   111c0:	movt	r1, #1
   111c4:	mov	r0, #0
   111c8:	bl	10b50 <dcgettext@plt>
   111cc:	movw	r4, #20156	; 0x4ebc
   111d0:	movt	r4, #1
   111d4:	mov	r3, r4
   111d8:	movw	r2, #21328	; 0x5350
   111dc:	movt	r2, #1
   111e0:	mov	r1, r0
   111e4:	mov	r0, #1
   111e8:	bl	10c4c <__printf_chk@plt>
   111ec:	mov	r2, #5
   111f0:	movw	r1, #21488	; 0x53f0
   111f4:	movt	r1, #1
   111f8:	mov	r0, #0
   111fc:	bl	10b50 <dcgettext@plt>
   11200:	mov	r1, r0
   11204:	movw	r3, #21636	; 0x5484
   11208:	movt	r3, #1
   1120c:	b	11174 <__assert_fail@plt+0x498>
   11210:	mov	r2, #5
   11214:	movw	r1, #21304	; 0x5338
   11218:	movt	r1, #1
   1121c:	mov	r0, #0
   11220:	bl	10b50 <dcgettext@plt>
   11224:	movw	r3, #21328	; 0x5350
   11228:	movt	r3, #1
   1122c:	movw	r2, #21368	; 0x5378
   11230:	movt	r2, #1
   11234:	mov	r1, r0
   11238:	mov	r0, #1
   1123c:	bl	10c4c <__printf_chk@plt>
   11240:	mov	r1, #0
   11244:	mov	r0, #5
   11248:	bl	10c94 <setlocale@plt>
   1124c:	cmp	r0, #0
   11250:	beq	111b8 <__assert_fail@plt+0x4dc>
   11254:	mov	r2, #3
   11258:	movw	r1, #21384	; 0x5388
   1125c:	movt	r1, #1
   11260:	bl	10cc4 <strncmp@plt>
   11264:	cmp	r0, #0
   11268:	bne	11188 <__assert_fail@plt+0x4ac>
   1126c:	mov	r2, #5
   11270:	movw	r1, #21460	; 0x53d4
   11274:	movt	r1, #1
   11278:	mov	r0, #0
   1127c:	bl	10b50 <dcgettext@plt>
   11280:	movw	r4, #20156	; 0x4ebc
   11284:	movt	r4, #1
   11288:	mov	r3, r4
   1128c:	movw	r2, #21328	; 0x5350
   11290:	movt	r2, #1
   11294:	mov	r1, r0
   11298:	mov	r0, #1
   1129c:	bl	10c4c <__printf_chk@plt>
   112a0:	mov	r2, #5
   112a4:	movw	r1, #21488	; 0x53f0
   112a8:	movt	r1, #1
   112ac:	mov	r0, #0
   112b0:	bl	10b50 <dcgettext@plt>
   112b4:	mov	r1, r0
   112b8:	movw	r3, #21636	; 0x5484
   112bc:	movt	r3, #1
   112c0:	b	11174 <__assert_fail@plt+0x498>
   112c4:	strd	r4, [sp, #-36]!	; 0xffffffdc
   112c8:	strd	r6, [sp, #8]
   112cc:	strd	r8, [sp, #16]
   112d0:	strd	sl, [sp, #24]
   112d4:	str	lr, [sp, #32]
   112d8:	sub	sp, sp, #28
   112dc:	mov	r8, r0
   112e0:	mov	r4, r1
   112e4:	movw	r0, #21540	; 0x5424
   112e8:	movt	r0, #1
   112ec:	bl	10bc8 <getenv@plt>
   112f0:	subs	r6, r0, #0
   112f4:	movne	r5, #1
   112f8:	moveq	r5, #0
   112fc:	beq	11320 <__assert_fail@plt+0x644>
   11300:	cmp	r8, #1
   11304:	ble	118b0 <__assert_fail@plt+0xbd4>
   11308:	movw	r1, #21556	; 0x5434
   1130c:	movt	r1, #1
   11310:	ldr	r0, [r4, #4]
   11314:	bl	10af0 <strcmp@plt>
   11318:	cmp	r0, #0
   1131c:	bne	118b0 <__assert_fail@plt+0xbd4>
   11320:	ldr	r0, [r4]
   11324:	bl	11a5c <__assert_fail@plt+0xd80>
   11328:	movw	r1, #21300	; 0x5334
   1132c:	movt	r1, #1
   11330:	mov	r0, #6
   11334:	bl	10c94 <setlocale@plt>
   11338:	movw	r6, #21372	; 0x537c
   1133c:	movt	r6, #1
   11340:	movw	r1, #21560	; 0x5438
   11344:	movt	r1, #1
   11348:	mov	r0, r6
   1134c:	bl	10cb8 <bindtextdomain@plt>
   11350:	mov	r0, r6
   11354:	bl	10b68 <textdomain@plt>
   11358:	movw	r0, #6476	; 0x194c
   1135c:	movt	r0, #1
   11360:	bl	14e58 <__assert_fail@plt+0x417c>
   11364:	cmp	r8, #2
   11368:	bne	11920 <__assert_fail@plt+0xc44>
   1136c:	ldr	r6, [r4, #4]
   11370:	movw	r1, #21584	; 0x5450
   11374:	movt	r1, #1
   11378:	mov	r0, r6
   1137c:	bl	10af0 <strcmp@plt>
   11380:	cmp	r0, #0
   11384:	beq	11418 <__assert_fail@plt+0x73c>
   11388:	movw	r1, #21592	; 0x5458
   1138c:	movt	r1, #1
   11390:	mov	r0, r6
   11394:	bl	10af0 <strcmp@plt>
   11398:	cmp	r0, #0
   1139c:	addne	r4, r4, #4
   113a0:	movne	r8, #1
   113a4:	beq	1141c <__assert_fail@plt+0x740>
   113a8:	mov	lr, r4
   113ac:	mov	r0, #0
   113b0:	mov	fp, #1
   113b4:	mov	r9, r0
   113b8:	mov	r4, lr
   113bc:	cmp	r8, #0
   113c0:	bgt	1154c <__assert_fail@plt+0x870>
   113c4:	cmp	fp, #0
   113c8:	beq	113f8 <__assert_fail@plt+0x71c>
   113cc:	movw	r3, #24860	; 0x611c
   113d0:	movt	r3, #2
   113d4:	ldr	r0, [r3]
   113d8:	ldr	r3, [r0, #20]
   113dc:	ldr	r2, [r0, #24]
   113e0:	cmp	r3, r2
   113e4:	addcc	r2, r3, #1
   113e8:	strcc	r2, [r0, #20]
   113ec:	movcc	r2, #10
   113f0:	strbcc	r2, [r3]
   113f4:	bcs	118a4 <__assert_fail@plt+0xbc8>
   113f8:	mov	r0, #0
   113fc:	add	sp, sp, #28
   11400:	ldrd	r4, [sp]
   11404:	ldrd	r6, [sp, #8]
   11408:	ldrd	r8, [sp, #16]
   1140c:	ldrd	sl, [sp, #24]
   11410:	add	sp, sp, #32
   11414:	pop	{pc}		; (ldr pc, [sp], #4)
   11418:	bl	10eb8 <__assert_fail@plt+0x1dc>
   1141c:	movw	r3, #24776	; 0x60c8
   11420:	movt	r3, #2
   11424:	movw	r0, #24860	; 0x611c
   11428:	movt	r0, #2
   1142c:	mov	r2, #0
   11430:	str	r2, [sp, #8]
   11434:	movw	r2, #21604	; 0x5464
   11438:	movt	r2, #1
   1143c:	str	r2, [sp, #4]
   11440:	movw	r2, #21616	; 0x5470
   11444:	movt	r2, #1
   11448:	str	r2, [sp]
   1144c:	ldr	r3, [r3]
   11450:	movw	r2, #21368	; 0x5378
   11454:	movt	r2, #1
   11458:	movw	r1, #20156	; 0x4ebc
   1145c:	movt	r1, #1
   11460:	ldr	r0, [r0]
   11464:	bl	14254 <__assert_fail@plt+0x3578>
   11468:	b	113f8 <__assert_fail@plt+0x71c>
   1146c:	mov	r1, ip
   11470:	add	r7, r6, r2
   11474:	ldrb	r3, [r2], #1
   11478:	cmp	r3, #0
   1147c:	beq	114fc <__assert_fail@plt+0x820>
   11480:	cmp	r3, #101	; 0x65
   11484:	beq	1146c <__assert_fail@plt+0x790>
   11488:	cmp	r3, #110	; 0x6e
   1148c:	beq	1146c <__assert_fail@plt+0x790>
   11490:	cmp	r3, #69	; 0x45
   11494:	beq	1146c <__assert_fail@plt+0x790>
   11498:	orr	r0, r0, r5
   1149c:	tst	r0, #255	; 0xff
   114a0:	bne	11910 <__assert_fail@plt+0xc34>
   114a4:	cmp	r8, #0
   114a8:	ble	113c4 <__assert_fail@plt+0x6e8>
   114ac:	sub	r4, r4, #4
   114b0:	movw	r5, #24860	; 0x611c
   114b4:	movt	r5, #2
   114b8:	mov	r6, #32
   114bc:	ldr	r1, [r5]
   114c0:	ldr	r0, [r4, #4]!
   114c4:	bl	10ae4 <fputs_unlocked@plt>
   114c8:	subs	r8, r8, #1
   114cc:	beq	113c4 <__assert_fail@plt+0x6e8>
   114d0:	ldr	r0, [r5]
   114d4:	ldr	r3, [r0, #20]
   114d8:	ldr	r2, [r0, #24]
   114dc:	cmp	r3, r2
   114e0:	addcc	r2, r3, #1
   114e4:	strcc	r2, [r0, #20]
   114e8:	strbcc	r6, [r3]
   114ec:	bcc	114bc <__assert_fail@plt+0x7e0>
   114f0:	mov	r1, r6
   114f4:	bl	10c88 <__overflow@plt>
   114f8:	b	114bc <__assert_fail@plt+0x7e0>
   114fc:	cmp	r7, #0
   11500:	bne	1151c <__assert_fail@plt+0x840>
   11504:	orr	r0, r0, r5
   11508:	tst	r0, #255	; 0xff
   1150c:	bne	11910 <__assert_fail@plt+0xc34>
   11510:	b	114ac <__assert_fail@plt+0x7d0>
   11514:	cmp	r3, #69	; 0x45
   11518:	moveq	r0, #0
   1151c:	ldrb	r3, [r1, #1]!
   11520:	cmp	r3, #0
   11524:	beq	11544 <__assert_fail@plt+0x868>
   11528:	cmp	r3, #101	; 0x65
   1152c:	moveq	r0, #1
   11530:	beq	1151c <__assert_fail@plt+0x840>
   11534:	cmp	r3, #110	; 0x6e
   11538:	moveq	fp, r9
   1153c:	bne	11514 <__assert_fail@plt+0x838>
   11540:	b	1151c <__assert_fail@plt+0x840>
   11544:	sub	r8, r8, #1
   11548:	b	113b8 <__assert_fail@plt+0x6dc>
   1154c:	ldr	ip, [lr], #4
   11550:	ldrb	r3, [ip]
   11554:	cmp	r3, #45	; 0x2d
   11558:	bne	11504 <__assert_fail@plt+0x828>
   1155c:	ldrb	r3, [ip, #1]
   11560:	cmp	r3, #0
   11564:	beq	11504 <__assert_fail@plt+0x828>
   11568:	add	r2, ip, #2
   1156c:	mvn	r6, ip
   11570:	b	11480 <__assert_fail@plt+0x7a4>
   11574:	mov	r1, #7
   11578:	b	116b4 <__assert_fail@plt+0x9d8>
   1157c:	ldrb	r3, [r5, #2]
   11580:	sub	r1, r7, #48	; 0x30
   11584:	uxtb	r1, r1
   11588:	sub	r3, r3, #48	; 0x30
   1158c:	uxtb	r3, r3
   11590:	cmp	r3, #7
   11594:	bhi	115a4 <__assert_fail@plt+0x8c8>
   11598:	add	r4, r4, #1
   1159c:	add	r1, r3, r1, lsl #3
   115a0:	and	r1, r1, #255	; 0xff
   115a4:	ldrb	r3, [r4]
   115a8:	sub	r2, r3, #48	; 0x30
   115ac:	uxtb	r2, r2
   115b0:	cmp	r2, #7
   115b4:	bhi	116b4 <__assert_fail@plt+0x9d8>
   115b8:	add	r4, r4, #1
   115bc:	add	r1, r3, r1, lsl #3
   115c0:	sub	r1, r1, #48	; 0x30
   115c4:	and	r1, r1, #255	; 0xff
   115c8:	b	116b4 <__assert_fail@plt+0x9d8>
   115cc:	mov	r1, #8
   115d0:	b	116b4 <__assert_fail@plt+0x9d8>
   115d4:	mov	r1, #27
   115d8:	b	116b4 <__assert_fail@plt+0x9d8>
   115dc:	mov	r1, #12
   115e0:	b	116b4 <__assert_fail@plt+0x9d8>
   115e4:	mov	r1, #10
   115e8:	b	116b4 <__assert_fail@plt+0x9d8>
   115ec:	mov	r1, #13
   115f0:	b	116b4 <__assert_fail@plt+0x9d8>
   115f4:	mov	r1, #9
   115f8:	b	116b4 <__assert_fail@plt+0x9d8>
   115fc:	mov	r1, #11
   11600:	b	116b4 <__assert_fail@plt+0x9d8>
   11604:	ldrb	r0, [r5, #2]
   11608:	str	r0, [sp, #20]
   1160c:	bl	10c04 <__ctype_b_loc@plt>
   11610:	ldr	r2, [r0]
   11614:	ldr	r0, [sp, #20]
   11618:	lsl	r3, r0, #1
   1161c:	str	r2, [sp, #20]
   11620:	ldrh	r3, [r2, r3]
   11624:	tst	r3, #4096	; 0x1000
   11628:	beq	11690 <__assert_fail@plt+0x9b4>
   1162c:	bl	10dd8 <__assert_fail@plt+0xfc>
   11630:	uxtb	r1, r0
   11634:	ldrb	r0, [r5, #3]
   11638:	lsl	r3, r0, #1
   1163c:	ldr	r2, [sp, #20]
   11640:	ldrh	r3, [r2, r3]
   11644:	tst	r3, #4096	; 0x1000
   11648:	addeq	r4, r5, #3
   1164c:	beq	116b4 <__assert_fail@plt+0x9d8>
   11650:	add	r4, r5, #4
   11654:	lsl	r1, r1, #4
   11658:	uxtb	r5, r1
   1165c:	bl	10dd8 <__assert_fail@plt+0xfc>
   11660:	add	r1, r5, r0
   11664:	uxtb	r1, r1
   11668:	b	116b4 <__assert_fail@plt+0x9d8>
   1166c:	ldrb	r7, [r5, #2]
   11670:	sub	r3, r7, #48	; 0x30
   11674:	uxtb	r3, r3
   11678:	cmp	r3, #7
   1167c:	movhi	r1, #0
   11680:	bhi	116b4 <__assert_fail@plt+0x9d8>
   11684:	add	r4, r5, #3
   11688:	ldrb	r3, [r5, #3]
   1168c:	b	11580 <__assert_fail@plt+0x8a4>
   11690:	ldr	r0, [r6]
   11694:	ldr	r3, [r0, #20]
   11698:	ldr	r2, [r0, #24]
   1169c:	cmp	r2, r3
   116a0:	addhi	r2, r3, #1
   116a4:	strhi	r2, [r0, #20]
   116a8:	strbhi	sl, [r3]
   116ac:	movhi	r1, r7
   116b0:	bls	11834 <__assert_fail@plt+0xb58>
   116b4:	ldr	r0, [r6]
   116b8:	ldr	r3, [r0, #20]
   116bc:	ldr	r2, [r0, #24]
   116c0:	cmp	r3, r2
   116c4:	addcc	r2, r3, #1
   116c8:	strcc	r2, [r0, #20]
   116cc:	strbcc	r1, [r3]
   116d0:	bcs	1184c <__assert_fail@plt+0xb70>
   116d4:	mov	r5, r4
   116d8:	mov	r4, r5
   116dc:	ldrb	r1, [r4], #1
   116e0:	cmp	r1, #0
   116e4:	beq	11854 <__assert_fail@plt+0xb78>
   116e8:	cmp	r1, #92	; 0x5c
   116ec:	bne	116b4 <__assert_fail@plt+0x9d8>
   116f0:	ldrb	r7, [r5, #1]
   116f4:	cmp	r7, #0
   116f8:	beq	116b4 <__assert_fail@plt+0x9d8>
   116fc:	add	r4, r5, #2
   11700:	sub	r3, r7, #48	; 0x30
   11704:	cmp	r3, #72	; 0x48
   11708:	ldrls	pc, [pc, r3, lsl #2]
   1170c:	b	11690 <__assert_fail@plt+0x9b4>
   11710:	andeq	r1, r1, ip, ror #12
   11714:	andeq	r1, r1, ip, ror r5
   11718:	andeq	r1, r1, ip, ror r5
   1171c:	andeq	r1, r1, ip, ror r5
   11720:	andeq	r1, r1, ip, ror r5
   11724:	andeq	r1, r1, ip, ror r5
   11728:	andeq	r1, r1, ip, ror r5
   1172c:	andeq	r1, r1, ip, ror r5
   11730:	muleq	r1, r0, r6
   11734:	muleq	r1, r0, r6
   11738:	muleq	r1, r0, r6
   1173c:	muleq	r1, r0, r6
   11740:	muleq	r1, r0, r6
   11744:	muleq	r1, r0, r6
   11748:	muleq	r1, r0, r6
   1174c:	muleq	r1, r0, r6
   11750:	muleq	r1, r0, r6
   11754:	muleq	r1, r0, r6
   11758:	muleq	r1, r0, r6
   1175c:	muleq	r1, r0, r6
   11760:	muleq	r1, r0, r6
   11764:	muleq	r1, r0, r6
   11768:	muleq	r1, r0, r6
   1176c:	muleq	r1, r0, r6
   11770:	muleq	r1, r0, r6
   11774:	muleq	r1, r0, r6
   11778:	muleq	r1, r0, r6
   1177c:	muleq	r1, r0, r6
   11780:	muleq	r1, r0, r6
   11784:	muleq	r1, r0, r6
   11788:	muleq	r1, r0, r6
   1178c:	muleq	r1, r0, r6
   11790:	muleq	r1, r0, r6
   11794:	muleq	r1, r0, r6
   11798:	muleq	r1, r0, r6
   1179c:	muleq	r1, r0, r6
   117a0:	muleq	r1, r0, r6
   117a4:	muleq	r1, r0, r6
   117a8:	muleq	r1, r0, r6
   117ac:	muleq	r1, r0, r6
   117b0:	muleq	r1, r0, r6
   117b4:	muleq	r1, r0, r6
   117b8:	muleq	r1, r0, r6
   117bc:	muleq	r1, r0, r6
   117c0:	andeq	r1, r1, r4, asr #16
   117c4:	muleq	r1, r0, r6
   117c8:	muleq	r1, r0, r6
   117cc:	muleq	r1, r0, r6
   117d0:	muleq	r1, r0, r6
   117d4:	andeq	r1, r1, r4, ror r5
   117d8:	andeq	r1, r1, ip, asr #11
   117dc:	strdeq	r1, [r1], -r8
   117e0:	muleq	r1, r0, r6
   117e4:	ldrdeq	r1, [r1], -r4
   117e8:	ldrdeq	r1, [r1], -ip
   117ec:	muleq	r1, r0, r6
   117f0:	muleq	r1, r0, r6
   117f4:	muleq	r1, r0, r6
   117f8:	muleq	r1, r0, r6
   117fc:	muleq	r1, r0, r6
   11800:	muleq	r1, r0, r6
   11804:	muleq	r1, r0, r6
   11808:	andeq	r1, r1, r4, ror #11
   1180c:	muleq	r1, r0, r6
   11810:	muleq	r1, r0, r6
   11814:	muleq	r1, r0, r6
   11818:	andeq	r1, r1, ip, ror #11
   1181c:	muleq	r1, r0, r6
   11820:	strdeq	r1, [r1], -r4
   11824:	muleq	r1, r0, r6
   11828:	strdeq	r1, [r1], -ip
   1182c:	muleq	r1, r0, r6
   11830:	andeq	r1, r1, r4, lsl #12
   11834:	mov	r1, sl
   11838:	bl	10c88 <__overflow@plt>
   1183c:	mov	r1, r7
   11840:	b	116b4 <__assert_fail@plt+0x9d8>
   11844:	mov	r1, r7
   11848:	b	116b4 <__assert_fail@plt+0x9d8>
   1184c:	bl	10c88 <__overflow@plt>
   11850:	b	116d4 <__assert_fail@plt+0x9f8>
   11854:	sub	r8, r8, #1
   11858:	cmp	r8, #0
   1185c:	ble	113c4 <__assert_fail@plt+0x6e8>
   11860:	ldr	r0, [r6]
   11864:	ldr	r3, [r0, #20]
   11868:	ldr	r2, [r0, #24]
   1186c:	cmp	r3, r2
   11870:	addcc	r2, r3, #1
   11874:	strcc	r2, [r0, #20]
   11878:	movcc	r2, #32
   1187c:	strbcc	r2, [r3]
   11880:	bcs	11890 <__assert_fail@plt+0xbb4>
   11884:	ldr	r5, [r9, #4]!
   11888:	mov	sl, #92	; 0x5c
   1188c:	b	116d8 <__assert_fail@plt+0x9fc>
   11890:	mov	r1, #32
   11894:	bl	10c88 <__overflow@plt>
   11898:	b	11884 <__assert_fail@plt+0xba8>
   1189c:	mov	fp, #1
   118a0:	b	113c4 <__assert_fail@plt+0x6e8>
   118a4:	mov	r1, #10
   118a8:	bl	10c88 <__overflow@plt>
   118ac:	b	113f8 <__assert_fail@plt+0x71c>
   118b0:	ldr	r0, [r4], #4
   118b4:	bl	11a5c <__assert_fail@plt+0xd80>
   118b8:	movw	r1, #21300	; 0x5334
   118bc:	movt	r1, #1
   118c0:	mov	r0, #6
   118c4:	bl	10c94 <setlocale@plt>
   118c8:	movw	r5, #21372	; 0x537c
   118cc:	movt	r5, #1
   118d0:	movw	r1, #21560	; 0x5438
   118d4:	movt	r1, #1
   118d8:	mov	r0, r5
   118dc:	bl	10cb8 <bindtextdomain@plt>
   118e0:	mov	r0, r5
   118e4:	bl	10b68 <textdomain@plt>
   118e8:	movw	r0, #6476	; 0x194c
   118ec:	movt	r0, #1
   118f0:	bl	14e58 <__assert_fail@plt+0x417c>
   118f4:	sub	r8, r8, #1
   118f8:	cmp	r6, #0
   118fc:	moveq	fp, #1
   11900:	beq	114a4 <__assert_fail@plt+0x7c8>
   11904:	cmp	r8, #0
   11908:	ble	1189c <__assert_fail@plt+0xbc0>
   1190c:	mov	fp, #1
   11910:	sub	r9, r4, #4
   11914:	movw	r6, #24860	; 0x611c
   11918:	movt	r6, #2
   1191c:	b	11884 <__assert_fail@plt+0xba8>
   11920:	sub	r8, r8, #1
   11924:	add	r4, r4, #4
   11928:	b	113a8 <__assert_fail@plt+0x6cc>
   1192c:	movw	r3, #24868	; 0x6124
   11930:	movt	r3, #2
   11934:	str	r0, [r3]
   11938:	bx	lr
   1193c:	movw	r3, #24868	; 0x6124
   11940:	movt	r3, #2
   11944:	strb	r0, [r3, #4]
   11948:	bx	lr
   1194c:	strd	r4, [sp, #-16]!
   11950:	str	r6, [sp, #8]
   11954:	str	lr, [sp, #12]
   11958:	sub	sp, sp, #8
   1195c:	movw	r3, #24860	; 0x611c
   11960:	movt	r3, #2
   11964:	ldr	r0, [r3]
   11968:	bl	14910 <__assert_fail@plt+0x3c34>
   1196c:	cmp	r0, #0
   11970:	beq	11998 <__assert_fail@plt+0xcbc>
   11974:	movw	r3, #24868	; 0x6124
   11978:	movt	r3, #2
   1197c:	ldrb	r3, [r3, #4]
   11980:	cmp	r3, #0
   11984:	beq	119c4 <__assert_fail@plt+0xce8>
   11988:	bl	10c28 <__errno_location@plt>
   1198c:	ldr	r3, [r0]
   11990:	cmp	r3, #32
   11994:	bne	119c4 <__assert_fail@plt+0xce8>
   11998:	movw	r3, #24856	; 0x6118
   1199c:	movt	r3, #2
   119a0:	ldr	r0, [r3]
   119a4:	bl	14910 <__assert_fail@plt+0x3c34>
   119a8:	cmp	r0, #0
   119ac:	bne	11a4c <__assert_fail@plt+0xd70>
   119b0:	add	sp, sp, #8
   119b4:	ldrd	r4, [sp]
   119b8:	ldr	r6, [sp, #8]
   119bc:	add	sp, sp, #12
   119c0:	pop	{pc}		; (ldr pc, [sp], #4)
   119c4:	mov	r2, #5
   119c8:	movw	r1, #21752	; 0x54f8
   119cc:	movt	r1, #1
   119d0:	mov	r0, #0
   119d4:	bl	10b50 <dcgettext@plt>
   119d8:	mov	r4, r0
   119dc:	movw	r3, #24868	; 0x6124
   119e0:	movt	r3, #2
   119e4:	ldr	r5, [r3]
   119e8:	cmp	r5, #0
   119ec:	beq	11a2c <__assert_fail@plt+0xd50>
   119f0:	bl	10c28 <__errno_location@plt>
   119f4:	ldr	r6, [r0]
   119f8:	mov	r0, r5
   119fc:	bl	13b54 <__assert_fail@plt+0x2e78>
   11a00:	str	r4, [sp]
   11a04:	mov	r3, r0
   11a08:	movw	r2, #21764	; 0x5504
   11a0c:	movt	r2, #1
   11a10:	mov	r1, r6
   11a14:	mov	r0, #0
   11a18:	bl	10bbc <error@plt>
   11a1c:	movw	r3, #24780	; 0x60cc
   11a20:	movt	r3, #2
   11a24:	ldr	r0, [r3]
   11a28:	bl	10b14 <_exit@plt>
   11a2c:	bl	10c28 <__errno_location@plt>
   11a30:	mov	r3, r4
   11a34:	movw	r2, #21768	; 0x5508
   11a38:	movt	r2, #1
   11a3c:	ldr	r1, [r0]
   11a40:	mov	r0, #0
   11a44:	bl	10bbc <error@plt>
   11a48:	b	11a1c <__assert_fail@plt+0xd40>
   11a4c:	movw	r3, #24780	; 0x60cc
   11a50:	movt	r3, #2
   11a54:	ldr	r0, [r3]
   11a58:	bl	10b14 <_exit@plt>
   11a5c:	strd	r4, [sp, #-16]!
   11a60:	str	r6, [sp, #8]
   11a64:	str	lr, [sp, #12]
   11a68:	subs	r4, r0, #0
   11a6c:	beq	11b08 <__assert_fail@plt+0xe2c>
   11a70:	mov	r1, #47	; 0x2f
   11a74:	mov	r0, r4
   11a78:	bl	10ca0 <strrchr@plt>
   11a7c:	subs	r5, r0, #0
   11a80:	beq	11ae0 <__assert_fail@plt+0xe04>
   11a84:	add	r6, r5, #1
   11a88:	sub	r3, r6, r4
   11a8c:	cmp	r3, #6
   11a90:	ble	11ae0 <__assert_fail@plt+0xe04>
   11a94:	mov	r2, #7
   11a98:	movw	r1, #21828	; 0x5544
   11a9c:	movt	r1, #1
   11aa0:	sub	r0, r5, #6
   11aa4:	bl	10cc4 <strncmp@plt>
   11aa8:	cmp	r0, #0
   11aac:	bne	11ae0 <__assert_fail@plt+0xe04>
   11ab0:	mov	r2, #3
   11ab4:	movw	r1, #21836	; 0x554c
   11ab8:	movt	r1, #1
   11abc:	mov	r0, r6
   11ac0:	bl	10cc4 <strncmp@plt>
   11ac4:	cmp	r0, #0
   11ac8:	movne	r4, r6
   11acc:	bne	11ae0 <__assert_fail@plt+0xe04>
   11ad0:	add	r4, r5, #4
   11ad4:	movw	r3, #24848	; 0x6110
   11ad8:	movt	r3, #2
   11adc:	str	r4, [r3]
   11ae0:	movw	r3, #24876	; 0x612c
   11ae4:	movt	r3, #2
   11ae8:	str	r4, [r3]
   11aec:	movw	r3, #24852	; 0x6114
   11af0:	movt	r3, #2
   11af4:	str	r4, [r3]
   11af8:	ldrd	r4, [sp]
   11afc:	ldr	r6, [sp, #8]
   11b00:	add	sp, sp, #12
   11b04:	pop	{pc}		; (ldr pc, [sp], #4)
   11b08:	movw	r3, #24856	; 0x6118
   11b0c:	movt	r3, #2
   11b10:	ldr	r3, [r3]
   11b14:	mov	r2, #55	; 0x37
   11b18:	mov	r1, #1
   11b1c:	movw	r0, #21772	; 0x550c
   11b20:	movt	r0, #1
   11b24:	bl	10b80 <fwrite@plt>
   11b28:	bl	10cd0 <abort@plt>
   11b2c:	mov	r2, #0
   11b30:	mov	r3, #0
   11b34:	strd	r2, [r0]
   11b38:	strd	r2, [r0, #8]
   11b3c:	strd	r2, [r0, #16]
   11b40:	strd	r2, [r0, #24]
   11b44:	strd	r2, [r0, #32]
   11b48:	strd	r2, [r0, #40]	; 0x28
   11b4c:	cmp	r1, #10
   11b50:	beq	11b5c <__assert_fail@plt+0xe80>
   11b54:	str	r1, [r0]
   11b58:	bx	lr
   11b5c:	str	r4, [sp, #-8]!
   11b60:	str	lr, [sp, #4]
   11b64:	bl	10cd0 <abort@plt>
   11b68:	strd	r4, [sp, #-16]!
   11b6c:	str	r6, [sp, #8]
   11b70:	str	lr, [sp, #12]
   11b74:	mov	r5, r0
   11b78:	mov	r6, r1
   11b7c:	mov	r2, #5
   11b80:	mov	r1, r0
   11b84:	mov	r0, #0
   11b88:	bl	10b50 <dcgettext@plt>
   11b8c:	mov	r4, r0
   11b90:	cmp	r5, r0
   11b94:	beq	11bac <__assert_fail@plt+0xed0>
   11b98:	mov	r0, r4
   11b9c:	ldrd	r4, [sp]
   11ba0:	ldr	r6, [sp, #8]
   11ba4:	add	sp, sp, #12
   11ba8:	pop	{pc}		; (ldr pc, [sp], #4)
   11bac:	bl	14be8 <__assert_fail@plt+0x3f0c>
   11bb0:	ldrb	r3, [r0]
   11bb4:	bic	r3, r3, #32
   11bb8:	cmp	r3, #85	; 0x55
   11bbc:	bne	11c40 <__assert_fail@plt+0xf64>
   11bc0:	ldrb	r3, [r0, #1]
   11bc4:	bic	r3, r3, #32
   11bc8:	cmp	r3, #84	; 0x54
   11bcc:	bne	11c04 <__assert_fail@plt+0xf28>
   11bd0:	ldrb	r3, [r0, #2]
   11bd4:	bic	r3, r3, #32
   11bd8:	cmp	r3, #70	; 0x46
   11bdc:	bne	11c04 <__assert_fail@plt+0xf28>
   11be0:	ldrb	r3, [r0, #3]
   11be4:	cmp	r3, #45	; 0x2d
   11be8:	bne	11c04 <__assert_fail@plt+0xf28>
   11bec:	ldrb	r3, [r0, #4]
   11bf0:	cmp	r3, #56	; 0x38
   11bf4:	bne	11c04 <__assert_fail@plt+0xf28>
   11bf8:	ldrb	r3, [r0, #5]
   11bfc:	cmp	r3, #0
   11c00:	beq	11c20 <__assert_fail@plt+0xf44>
   11c04:	movw	r4, #21924	; 0x55a4
   11c08:	movt	r4, #1
   11c0c:	movw	r3, #21944	; 0x55b8
   11c10:	movt	r3, #1
   11c14:	cmp	r6, #9
   11c18:	movne	r4, r3
   11c1c:	b	11b98 <__assert_fail@plt+0xebc>
   11c20:	ldrb	r2, [r4]
   11c24:	movw	r4, #21940	; 0x55b4
   11c28:	movt	r4, #1
   11c2c:	movw	r3, #21928	; 0x55a8
   11c30:	movt	r3, #1
   11c34:	cmp	r2, #96	; 0x60
   11c38:	movne	r4, r3
   11c3c:	b	11b98 <__assert_fail@plt+0xebc>
   11c40:	cmp	r3, #71	; 0x47
   11c44:	bne	11c04 <__assert_fail@plt+0xf28>
   11c48:	ldrb	r3, [r0, #1]
   11c4c:	bic	r3, r3, #32
   11c50:	cmp	r3, #66	; 0x42
   11c54:	bne	11c04 <__assert_fail@plt+0xf28>
   11c58:	ldrb	r3, [r0, #2]
   11c5c:	cmp	r3, #49	; 0x31
   11c60:	bne	11c04 <__assert_fail@plt+0xf28>
   11c64:	ldrb	r3, [r0, #3]
   11c68:	cmp	r3, #56	; 0x38
   11c6c:	bne	11c04 <__assert_fail@plt+0xf28>
   11c70:	ldrb	r3, [r0, #4]
   11c74:	cmp	r3, #48	; 0x30
   11c78:	bne	11c04 <__assert_fail@plt+0xf28>
   11c7c:	ldrb	r3, [r0, #5]
   11c80:	cmp	r3, #51	; 0x33
   11c84:	bne	11c04 <__assert_fail@plt+0xf28>
   11c88:	ldrb	r3, [r0, #6]
   11c8c:	cmp	r3, #48	; 0x30
   11c90:	bne	11c04 <__assert_fail@plt+0xf28>
   11c94:	ldrb	r3, [r0, #7]
   11c98:	cmp	r3, #0
   11c9c:	bne	11c04 <__assert_fail@plt+0xf28>
   11ca0:	ldrb	r2, [r4]
   11ca4:	movw	r4, #21936	; 0x55b0
   11ca8:	movt	r4, #1
   11cac:	movw	r3, #21932	; 0x55ac
   11cb0:	movt	r3, #1
   11cb4:	cmp	r2, #96	; 0x60
   11cb8:	movne	r4, r3
   11cbc:	b	11b98 <__assert_fail@plt+0xebc>
   11cc0:	strd	r4, [sp, #-36]!	; 0xffffffdc
   11cc4:	strd	r6, [sp, #8]
   11cc8:	strd	r8, [sp, #16]
   11ccc:	strd	sl, [sp, #24]
   11cd0:	str	lr, [sp, #32]
   11cd4:	sub	sp, sp, #116	; 0x74
   11cd8:	str	r0, [sp, #64]	; 0x40
   11cdc:	mov	r8, r1
   11ce0:	str	r2, [sp, #48]	; 0x30
   11ce4:	str	r3, [sp, #24]
   11ce8:	ldr	r7, [sp, #152]	; 0x98
   11cec:	bl	10b98 <__ctype_get_mb_cur_max@plt>
   11cf0:	str	r0, [sp, #76]	; 0x4c
   11cf4:	ldr	r3, [sp, #156]	; 0x9c
   11cf8:	ubfx	r3, r3, #1, #1
   11cfc:	str	r3, [sp, #32]
   11d00:	mov	r3, #1
   11d04:	str	r3, [sp, #40]	; 0x28
   11d08:	mov	r3, #0
   11d0c:	str	r3, [sp, #68]	; 0x44
   11d10:	str	r3, [sp, #36]	; 0x24
   11d14:	str	r3, [sp, #28]
   11d18:	str	r3, [sp, #52]	; 0x34
   11d1c:	str	r3, [sp, #60]	; 0x3c
   11d20:	str	r3, [sp, #72]	; 0x48
   11d24:	movw	r3, #21948	; 0x55bc
   11d28:	movt	r3, #1
   11d2c:	str	r3, [sp, #80]	; 0x50
   11d30:	mov	r9, r8
   11d34:	mov	sl, r7
   11d38:	cmp	sl, #10
   11d3c:	ldrls	pc, [pc, sl, lsl #2]
   11d40:	b	11f04 <__assert_fail@plt+0x1228>
   11d44:	andeq	r1, r1, r4, lsr #27
   11d48:	andeq	r1, r1, r8, ror sp
   11d4c:	ldrdeq	r1, [r1], -ip
   11d50:	andeq	r1, r1, r0, ror sp
   11d54:	muleq	r1, r0, lr
   11d58:			; <UNDEFINED> instruction: 0x00011db4
   11d5c:	andeq	r3, r1, r0, lsl #3
   11d60:	andeq	r1, r1, r8, lsl #30
   11d64:	strdeq	r1, [r1], -r0
   11d68:	strdeq	r1, [r1], -r0
   11d6c:	strdeq	r1, [r1], -r0
   11d70:	mov	r3, #1
   11d74:	str	r3, [sp, #28]
   11d78:	mov	r3, #1
   11d7c:	str	r3, [sp, #32]
   11d80:	str	r3, [sp, #52]	; 0x34
   11d84:	movw	r3, #21944	; 0x55b8
   11d88:	movt	r3, #1
   11d8c:	str	r3, [sp, #60]	; 0x3c
   11d90:	mov	fp, #0
   11d94:	mov	sl, #2
   11d98:	mov	r6, #0
   11d9c:	ldr	r8, [sp, #64]	; 0x40
   11da0:	b	12618 <__assert_fail@plt+0x193c>
   11da4:	mov	fp, sl
   11da8:	mov	r3, #0
   11dac:	str	r3, [sp, #32]
   11db0:	b	11d98 <__assert_fail@plt+0x10bc>
   11db4:	ldr	r3, [sp, #32]
   11db8:	cmp	r3, #0
   11dbc:	bne	11f1c <__assert_fail@plt+0x1240>
   11dc0:	cmp	r9, #0
   11dc4:	beq	11f40 <__assert_fail@plt+0x1264>
   11dc8:	mov	r3, #34	; 0x22
   11dcc:	ldr	r2, [sp, #64]	; 0x40
   11dd0:	strb	r3, [r2]
   11dd4:	mov	fp, #1
   11dd8:	str	fp, [sp, #28]
   11ddc:	str	fp, [sp, #52]	; 0x34
   11de0:	movw	r3, #21924	; 0x55a4
   11de4:	movt	r3, #1
   11de8:	str	r3, [sp, #60]	; 0x3c
   11dec:	b	11d98 <__assert_fail@plt+0x10bc>
   11df0:	cmp	sl, #10
   11df4:	bne	11e28 <__assert_fail@plt+0x114c>
   11df8:	ldr	r3, [sp, #32]
   11dfc:	cmp	r3, #0
   11e00:	movne	fp, #0
   11e04:	beq	11e50 <__assert_fail@plt+0x1174>
   11e08:	ldr	r0, [sp, #168]	; 0xa8
   11e0c:	bl	10c1c <strlen@plt>
   11e10:	str	r0, [sp, #52]	; 0x34
   11e14:	ldr	r3, [sp, #168]	; 0xa8
   11e18:	str	r3, [sp, #60]	; 0x3c
   11e1c:	mov	r3, #1
   11e20:	str	r3, [sp, #28]
   11e24:	b	11d98 <__assert_fail@plt+0x10bc>
   11e28:	mov	r1, sl
   11e2c:	ldr	r0, [sp, #80]	; 0x50
   11e30:	bl	11b68 <__assert_fail@plt+0xe8c>
   11e34:	str	r0, [sp, #164]	; 0xa4
   11e38:	mov	r1, sl
   11e3c:	movw	r0, #21944	; 0x55b8
   11e40:	movt	r0, #1
   11e44:	bl	11b68 <__assert_fail@plt+0xe8c>
   11e48:	str	r0, [sp, #168]	; 0xa8
   11e4c:	b	11df8 <__assert_fail@plt+0x111c>
   11e50:	ldr	r3, [sp, #164]	; 0xa4
   11e54:	ldrb	r3, [r3]
   11e58:	cmp	r3, #0
   11e5c:	beq	11e88 <__assert_fail@plt+0x11ac>
   11e60:	ldr	r2, [sp, #164]	; 0xa4
   11e64:	mov	fp, #0
   11e68:	ldr	r1, [sp, #64]	; 0x40
   11e6c:	cmp	r9, fp
   11e70:	strbhi	r3, [r1, fp]
   11e74:	add	fp, fp, #1
   11e78:	ldrb	r3, [r2, #1]!
   11e7c:	cmp	r3, #0
   11e80:	bne	11e6c <__assert_fail@plt+0x1190>
   11e84:	b	11e08 <__assert_fail@plt+0x112c>
   11e88:	mov	fp, #0
   11e8c:	b	11e08 <__assert_fail@plt+0x112c>
   11e90:	ldr	r3, [sp, #32]
   11e94:	cmp	r3, #0
   11e98:	bne	11d78 <__assert_fail@plt+0x109c>
   11e9c:	mov	r3, #1
   11ea0:	str	r3, [sp, #28]
   11ea4:	cmp	r9, #0
   11ea8:	beq	11f5c <__assert_fail@plt+0x1280>
   11eac:	mov	r3, #39	; 0x27
   11eb0:	ldr	r2, [sp, #64]	; 0x40
   11eb4:	strb	r3, [r2]
   11eb8:	mov	r3, #0
   11ebc:	str	r3, [sp, #32]
   11ec0:	mov	fp, #1
   11ec4:	str	fp, [sp, #52]	; 0x34
   11ec8:	movw	r3, #21944	; 0x55b8
   11ecc:	movt	r3, #1
   11ed0:	str	r3, [sp, #60]	; 0x3c
   11ed4:	mov	sl, #2
   11ed8:	b	11d98 <__assert_fail@plt+0x10bc>
   11edc:	ldr	r3, [sp, #32]
   11ee0:	cmp	r3, #0
   11ee4:	beq	11ea4 <__assert_fail@plt+0x11c8>
   11ee8:	mov	r3, #1
   11eec:	str	r3, [sp, #52]	; 0x34
   11ef0:	movw	r3, #21944	; 0x55b8
   11ef4:	movt	r3, #1
   11ef8:	str	r3, [sp, #60]	; 0x3c
   11efc:	mov	fp, #0
   11f00:	b	11d98 <__assert_fail@plt+0x10bc>
   11f04:	bl	10cd0 <abort@plt>
   11f08:	mov	fp, #0
   11f0c:	str	fp, [sp, #32]
   11f10:	mov	r3, #1
   11f14:	str	r3, [sp, #28]
   11f18:	b	11d98 <__assert_fail@plt+0x10bc>
   11f1c:	ldr	r3, [sp, #32]
   11f20:	str	r3, [sp, #28]
   11f24:	mov	r3, #1
   11f28:	str	r3, [sp, #52]	; 0x34
   11f2c:	movw	r3, #21924	; 0x55a4
   11f30:	movt	r3, #1
   11f34:	str	r3, [sp, #60]	; 0x3c
   11f38:	mov	fp, #0
   11f3c:	b	11d98 <__assert_fail@plt+0x10bc>
   11f40:	mov	fp, #1
   11f44:	str	fp, [sp, #28]
   11f48:	str	fp, [sp, #52]	; 0x34
   11f4c:	movw	r3, #21924	; 0x55a4
   11f50:	movt	r3, #1
   11f54:	str	r3, [sp, #60]	; 0x3c
   11f58:	b	11d98 <__assert_fail@plt+0x10bc>
   11f5c:	mov	r3, #0
   11f60:	str	r3, [sp, #32]
   11f64:	mov	fp, #1
   11f68:	str	fp, [sp, #52]	; 0x34
   11f6c:	movw	r3, #21944	; 0x55b8
   11f70:	movt	r3, #1
   11f74:	str	r3, [sp, #60]	; 0x3c
   11f78:	mov	sl, #2
   11f7c:	b	11d98 <__assert_fail@plt+0x10bc>
   11f80:	mov	r3, r2
   11f84:	add	r4, r6, r2
   11f88:	ldr	r2, [sp, #24]
   11f8c:	cmp	r3, #1
   11f90:	movls	r3, #0
   11f94:	movhi	r3, #1
   11f98:	cmn	r2, #1
   11f9c:	movne	r3, #0
   11fa0:	cmp	r3, #0
   11fa4:	beq	11fb4 <__assert_fail@plt+0x12d8>
   11fa8:	ldr	r0, [sp, #48]	; 0x30
   11fac:	bl	10c1c <strlen@plt>
   11fb0:	str	r0, [sp, #24]
   11fb4:	ldr	r3, [sp, #24]
   11fb8:	cmp	r4, r3
   11fbc:	bhi	131a8 <__assert_fail@plt+0x24cc>
   11fc0:	ldr	r3, [sp, #48]	; 0x30
   11fc4:	add	r4, r3, r6
   11fc8:	ldr	r2, [sp, #52]	; 0x34
   11fcc:	ldr	r1, [sp, #60]	; 0x3c
   11fd0:	mov	r0, r4
   11fd4:	bl	10b38 <memcmp@plt>
   11fd8:	cmp	r0, #0
   11fdc:	bne	131a8 <__assert_fail@plt+0x24cc>
   11fe0:	ldr	r3, [sp, #32]
   11fe4:	cmp	r3, #0
   11fe8:	bne	121f8 <__assert_fail@plt+0x151c>
   11fec:	ldrb	r4, [r4]
   11ff0:	cmp	r4, #126	; 0x7e
   11ff4:	ldrls	pc, [pc, r4, lsl #2]
   11ff8:	b	12aac <__assert_fail@plt+0x1dd0>
   11ffc:	andeq	r2, r1, ip, lsr r2
   12000:	andeq	r2, r1, ip, lsr #21
   12004:	andeq	r2, r1, ip, lsr #21
   12008:	andeq	r2, r1, ip, lsr #21
   1200c:	andeq	r2, r1, ip, lsr #21
   12010:	andeq	r2, r1, ip, lsr #21
   12014:	andeq	r2, r1, ip, lsr #21
   12018:	andeq	r2, r1, r4, asr r9
   1201c:	ldrdeq	r2, [r1], -r8
   12020:	andeq	r2, r1, ip, ror r8
   12024:	andeq	r2, r1, r8, lsr #18
   12028:	muleq	r1, r0, r8
   1202c:	andeq	r2, r1, ip, ror #9
   12030:	andeq	r2, r1, r0, lsl #10
   12034:	andeq	r2, r1, ip, lsr #21
   12038:	andeq	r2, r1, ip, lsr #21
   1203c:	andeq	r2, r1, ip, lsr #21
   12040:	andeq	r2, r1, ip, lsr #21
   12044:	andeq	r2, r1, ip, lsr #21
   12048:	andeq	r2, r1, ip, lsr #21
   1204c:	andeq	r2, r1, ip, lsr #21
   12050:	andeq	r2, r1, ip, lsr #21
   12054:	andeq	r2, r1, ip, lsr #21
   12058:	andeq	r2, r1, ip, lsr #21
   1205c:	andeq	r2, r1, ip, lsr #21
   12060:	andeq	r2, r1, ip, lsr #21
   12064:	andeq	r2, r1, ip, lsr #21
   12068:	andeq	r2, r1, ip, lsr #21
   1206c:	andeq	r2, r1, ip, lsr #21
   12070:	andeq	r2, r1, ip, lsr #21
   12074:	andeq	r2, r1, ip, lsr #21
   12078:	andeq	r2, r1, ip, lsr #21
   1207c:	andeq	r2, r1, r8, asr #19
   12080:	andeq	r2, r1, ip, ror #19
   12084:	andeq	r2, r1, ip, ror #19
   12088:	andeq	r2, r1, r4, lsl #19
   1208c:	andeq	r2, r1, ip, ror #19
   12090:	andeq	r2, r1, ip, lsl #30
   12094:	andeq	r2, r1, ip, ror #19
   12098:	andeq	r2, r1, ip, lsl #20
   1209c:	andeq	r2, r1, ip, ror #19
   120a0:	andeq	r2, r1, ip, ror #19
   120a4:	andeq	r2, r1, ip, ror #19
   120a8:	andeq	r2, r1, ip, lsl #30
   120ac:	andeq	r2, r1, ip, lsl #30
   120b0:	andeq	r2, r1, ip, lsl #30
   120b4:	andeq	r2, r1, ip, lsl #30
   120b8:	andeq	r2, r1, ip, lsl #30
   120bc:	andeq	r2, r1, ip, lsl #30
   120c0:	andeq	r2, r1, ip, lsl #30
   120c4:	andeq	r2, r1, ip, lsl #30
   120c8:	andeq	r2, r1, ip, lsl #30
   120cc:	andeq	r2, r1, ip, lsl #30
   120d0:	andeq	r2, r1, ip, lsl #30
   120d4:	andeq	r2, r1, ip, lsl #30
   120d8:	andeq	r2, r1, ip, lsl #30
   120dc:	andeq	r2, r1, ip, lsl #30
   120e0:	andeq	r2, r1, ip, lsl #30
   120e4:	andeq	r2, r1, ip, lsl #30
   120e8:	andeq	r2, r1, ip, ror #19
   120ec:	andeq	r2, r1, ip, ror #19
   120f0:	andeq	r2, r1, ip, ror #19
   120f4:	andeq	r2, r1, ip, ror #19
   120f8:	andeq	r2, r1, ip, ror #6
   120fc:	andeq	r2, r1, ip, lsr #21
   12100:	andeq	r2, r1, ip, lsl #30
   12104:	andeq	r2, r1, ip, lsl #30
   12108:	andeq	r2, r1, ip, lsl #30
   1210c:	andeq	r2, r1, ip, lsl #30
   12110:	andeq	r2, r1, ip, lsl #30
   12114:	andeq	r2, r1, ip, lsl #30
   12118:	andeq	r2, r1, ip, lsl #30
   1211c:	andeq	r2, r1, ip, lsl #30
   12120:	andeq	r2, r1, ip, lsl #30
   12124:	andeq	r2, r1, ip, lsl #30
   12128:	andeq	r2, r1, ip, lsl #30
   1212c:	andeq	r2, r1, ip, lsl #30
   12130:	andeq	r2, r1, ip, lsl #30
   12134:	andeq	r2, r1, ip, lsl #30
   12138:	andeq	r2, r1, ip, lsl #30
   1213c:	andeq	r2, r1, ip, lsl #30
   12140:	andeq	r2, r1, ip, lsl #30
   12144:	andeq	r2, r1, ip, lsl #30
   12148:	andeq	r2, r1, ip, lsl #30
   1214c:	andeq	r2, r1, ip, lsl #30
   12150:	andeq	r2, r1, ip, lsl #30
   12154:	andeq	r2, r1, ip, lsl #30
   12158:	andeq	r2, r1, ip, lsl #30
   1215c:	andeq	r2, r1, ip, lsl #30
   12160:	andeq	r2, r1, ip, lsl #30
   12164:	andeq	r2, r1, ip, lsl #30
   12168:	andeq	r2, r1, ip, ror #19
   1216c:	andeq	r2, r1, r4, lsr #17
   12170:	andeq	r2, r1, ip, lsl #30
   12174:	andeq	r2, r1, ip, ror #19
   12178:	andeq	r2, r1, ip, lsl #30
   1217c:	andeq	r2, r1, ip, ror #19
   12180:	andeq	r2, r1, ip, lsl #30
   12184:	andeq	r2, r1, ip, lsl #30
   12188:	andeq	r2, r1, ip, lsl #30
   1218c:	andeq	r2, r1, ip, lsl #30
   12190:	andeq	r2, r1, ip, lsl #30
   12194:	andeq	r2, r1, ip, lsl #30
   12198:	andeq	r2, r1, ip, lsl #30
   1219c:	andeq	r2, r1, ip, lsl #30
   121a0:	andeq	r2, r1, ip, lsl #30
   121a4:	andeq	r2, r1, ip, lsl #30
   121a8:	andeq	r2, r1, ip, lsl #30
   121ac:	andeq	r2, r1, ip, lsl #30
   121b0:	andeq	r2, r1, ip, lsl #30
   121b4:	andeq	r2, r1, ip, lsl #30
   121b8:	andeq	r2, r1, ip, lsl #30
   121bc:	andeq	r2, r1, ip, lsl #30
   121c0:	andeq	r2, r1, ip, lsl #30
   121c4:	andeq	r2, r1, ip, lsl #30
   121c8:	andeq	r2, r1, ip, lsl #30
   121cc:	andeq	r2, r1, ip, lsl #30
   121d0:	andeq	r2, r1, ip, lsl #30
   121d4:	andeq	r2, r1, ip, lsl #30
   121d8:	andeq	r2, r1, ip, lsl #30
   121dc:	andeq	r2, r1, ip, lsl #30
   121e0:	andeq	r2, r1, ip, lsl #30
   121e4:	andeq	r2, r1, ip, lsl #30
   121e8:	andeq	r2, r1, r4, ror #18
   121ec:	andeq	r2, r1, ip, ror #19
   121f0:	andeq	r2, r1, r4, ror #18
   121f4:	andeq	r2, r1, r4, lsl #19
   121f8:	mov	r8, r9
   121fc:	mov	r7, sl
   12200:	b	13100 <__assert_fail@plt+0x2424>
   12204:	ldr	r3, [sp, #28]
   12208:	cmp	r3, #0
   1220c:	bne	1222c <__assert_fail@plt+0x1550>
   12210:	ldr	r3, [sp, #156]	; 0x9c
   12214:	tst	r3, #1
   12218:	bne	12614 <__assert_fail@plt+0x1938>
   1221c:	ldr	r3, [sp, #28]
   12220:	str	r3, [sp, #44]	; 0x2c
   12224:	mov	r5, r3
   12228:	b	12534 <__assert_fail@plt+0x1858>
   1222c:	ldr	r3, [sp, #32]
   12230:	cmp	r3, #0
   12234:	bne	130b0 <__assert_fail@plt+0x23d4>
   12238:	str	r3, [sp, #44]	; 0x2c
   1223c:	ldr	r3, [sp, #36]	; 0x24
   12240:	eor	r3, r3, #1
   12244:	cmp	sl, #2
   12248:	movne	r3, #0
   1224c:	andeq	r3, r3, #1
   12250:	cmp	r3, #0
   12254:	beq	122ac <__assert_fail@plt+0x15d0>
   12258:	cmp	r9, fp
   1225c:	movhi	r2, #39	; 0x27
   12260:	strbhi	r2, [r8, fp]
   12264:	add	r2, fp, #1
   12268:	cmp	r9, r2
   1226c:	movhi	r1, #36	; 0x24
   12270:	strbhi	r1, [r8, r2]
   12274:	add	r2, fp, #2
   12278:	cmp	r9, r2
   1227c:	movhi	r1, #39	; 0x27
   12280:	strbhi	r1, [r8, r2]
   12284:	add	r2, fp, #3
   12288:	cmp	r9, r2
   1228c:	bls	1316c <__assert_fail@plt+0x2490>
   12290:	mov	r1, #92	; 0x5c
   12294:	strb	r1, [r8, r2]
   12298:	add	fp, fp, #4
   1229c:	str	r3, [sp, #36]	; 0x24
   122a0:	mov	r5, #0
   122a4:	mov	r4, #48	; 0x30
   122a8:	b	12580 <__assert_fail@plt+0x18a4>
   122ac:	cmp	r9, fp
   122b0:	bhi	122d8 <__assert_fail@plt+0x15fc>
   122b4:	add	r1, fp, #1
   122b8:	ldr	r2, [sp, #56]	; 0x38
   122bc:	cmp	r2, #0
   122c0:	bne	12300 <__assert_fail@plt+0x1624>
   122c4:	mov	r3, r5
   122c8:	ldr	r5, [sp, #56]	; 0x38
   122cc:	mov	fp, r1
   122d0:	mov	r4, #48	; 0x30
   122d4:	b	12534 <__assert_fail@plt+0x1858>
   122d8:	mov	r2, #92	; 0x5c
   122dc:	strb	r2, [r8, fp]
   122e0:	add	r1, fp, #1
   122e4:	ldr	r2, [sp, #56]	; 0x38
   122e8:	cmp	r2, #0
   122ec:	moveq	r3, r5
   122f0:	moveq	r5, r2
   122f4:	moveq	fp, r1
   122f8:	moveq	r4, #48	; 0x30
   122fc:	beq	12580 <__assert_fail@plt+0x18a4>
   12300:	add	r2, r6, #1
   12304:	ldr	r0, [sp, #24]
   12308:	cmp	r2, r0
   1230c:	bcs	12328 <__assert_fail@plt+0x164c>
   12310:	ldr	r0, [sp, #48]	; 0x30
   12314:	ldrb	r2, [r0, r2]
   12318:	sub	r2, r2, #48	; 0x30
   1231c:	uxtb	r2, r2
   12320:	cmp	r2, #9
   12324:	bls	12340 <__assert_fail@plt+0x1664>
   12328:	mov	r2, r3
   1232c:	mov	r3, r5
   12330:	mov	r5, r2
   12334:	mov	fp, r1
   12338:	mov	r4, #48	; 0x30
   1233c:	b	12558 <__assert_fail@plt+0x187c>
   12340:	cmp	r9, r1
   12344:	movhi	r2, #48	; 0x30
   12348:	strbhi	r2, [r8, r1]
   1234c:	add	r2, fp, #2
   12350:	cmp	r9, r2
   12354:	movhi	r1, #48	; 0x30
   12358:	strbhi	r1, [r8, r2]
   1235c:	add	r1, fp, #3
   12360:	b	12328 <__assert_fail@plt+0x164c>
   12364:	mov	r3, #0
   12368:	str	r3, [sp, #44]	; 0x2c
   1236c:	cmp	sl, #2
   12370:	beq	1238c <__assert_fail@plt+0x16b0>
   12374:	cmp	sl, #5
   12378:	beq	123a4 <__assert_fail@plt+0x16c8>
   1237c:	mov	r5, #0
   12380:	mov	r3, r5
   12384:	mov	r4, #63	; 0x3f
   12388:	b	12534 <__assert_fail@plt+0x1858>
   1238c:	ldr	r3, [sp, #32]
   12390:	cmp	r3, #0
   12394:	bne	130bc <__assert_fail@plt+0x23e0>
   12398:	mov	r5, r3
   1239c:	mov	r4, #63	; 0x3f
   123a0:	b	12a9c <__assert_fail@plt+0x1dc0>
   123a4:	ldr	r3, [sp, #156]	; 0x9c
   123a8:	tst	r3, #4
   123ac:	beq	12ed4 <__assert_fail@plt+0x21f8>
   123b0:	add	r2, r6, #2
   123b4:	ldr	r3, [sp, #24]
   123b8:	cmp	r2, r3
   123bc:	bcs	12ee4 <__assert_fail@plt+0x2208>
   123c0:	ldr	r3, [sp, #48]	; 0x30
   123c4:	add	r3, r3, r6
   123c8:	ldrb	r4, [r3, #1]
   123cc:	cmp	r4, #63	; 0x3f
   123d0:	movne	r5, #0
   123d4:	movne	r3, r5
   123d8:	movne	r4, #63	; 0x3f
   123dc:	bne	12534 <__assert_fail@plt+0x1858>
   123e0:	ldr	r3, [sp, #48]	; 0x30
   123e4:	ldrb	r1, [r3, r2]
   123e8:	sub	r3, r1, #33	; 0x21
   123ec:	cmp	r3, #29
   123f0:	ldrls	pc, [pc, r3, lsl #2]
   123f4:	b	12ef4 <__assert_fail@plt+0x2218>
   123f8:	andeq	r2, r1, r0, ror r4
   123fc:	strdeq	r2, [r1], -r4
   12400:	strdeq	r2, [r1], -r4
   12404:	strdeq	r2, [r1], -r4
   12408:	strdeq	r2, [r1], -r4
   1240c:	strdeq	r2, [r1], -r4
   12410:	andeq	r2, r1, r0, ror r4
   12414:	andeq	r2, r1, r0, ror r4
   12418:	andeq	r2, r1, r0, ror r4
   1241c:	strdeq	r2, [r1], -r4
   12420:	strdeq	r2, [r1], -r4
   12424:	strdeq	r2, [r1], -r4
   12428:	andeq	r2, r1, r0, ror r4
   1242c:	strdeq	r2, [r1], -r4
   12430:	andeq	r2, r1, r0, ror r4
   12434:	strdeq	r2, [r1], -r4
   12438:	strdeq	r2, [r1], -r4
   1243c:	strdeq	r2, [r1], -r4
   12440:	strdeq	r2, [r1], -r4
   12444:	strdeq	r2, [r1], -r4
   12448:	strdeq	r2, [r1], -r4
   1244c:	strdeq	r2, [r1], -r4
   12450:	strdeq	r2, [r1], -r4
   12454:	strdeq	r2, [r1], -r4
   12458:	strdeq	r2, [r1], -r4
   1245c:	strdeq	r2, [r1], -r4
   12460:	strdeq	r2, [r1], -r4
   12464:	andeq	r2, r1, r0, ror r4
   12468:	andeq	r2, r1, r0, ror r4
   1246c:	andeq	r2, r1, r0, ror r4
   12470:	ldr	r3, [sp, #32]
   12474:	cmp	r3, #0
   12478:	bne	13160 <__assert_fail@plt+0x2484>
   1247c:	cmp	r9, fp
   12480:	movhi	r3, #63	; 0x3f
   12484:	strbhi	r3, [r8, fp]
   12488:	add	r3, fp, #1
   1248c:	cmp	r9, r3
   12490:	movhi	r0, #34	; 0x22
   12494:	strbhi	r0, [r8, r3]
   12498:	add	r3, fp, #2
   1249c:	cmp	r9, r3
   124a0:	movhi	r0, #34	; 0x22
   124a4:	strbhi	r0, [r8, r3]
   124a8:	add	r3, fp, #3
   124ac:	cmp	r9, r3
   124b0:	movhi	r0, #63	; 0x3f
   124b4:	strbhi	r0, [r8, r3]
   124b8:	add	fp, fp, #4
   124bc:	ldr	r3, [sp, #32]
   124c0:	mov	r5, r3
   124c4:	mov	r4, r1
   124c8:	mov	r6, r2
   124cc:	b	12534 <__assert_fail@plt+0x1858>
   124d0:	mov	r3, #0
   124d4:	str	r3, [sp, #44]	; 0x2c
   124d8:	mov	r4, #8
   124dc:	mov	r3, #98	; 0x62
   124e0:	b	12520 <__assert_fail@plt+0x1844>
   124e4:	mov	r3, #0
   124e8:	str	r3, [sp, #44]	; 0x2c
   124ec:	mov	r4, #12
   124f0:	mov	r3, #102	; 0x66
   124f4:	b	12520 <__assert_fail@plt+0x1844>
   124f8:	mov	r3, #0
   124fc:	str	r3, [sp, #44]	; 0x2c
   12500:	mov	r4, #13
   12504:	mov	r3, #114	; 0x72
   12508:	ldr	r2, [sp, #32]
   1250c:	cmp	sl, #2
   12510:	movne	r2, #0
   12514:	andeq	r2, r2, #1
   12518:	cmp	r2, #0
   1251c:	bne	12940 <__assert_fail@plt+0x1c64>
   12520:	ldr	r2, [sp, #28]
   12524:	cmp	r2, #0
   12528:	bne	12f28 <__assert_fail@plt+0x224c>
   1252c:	mov	r5, r2
   12530:	mov	r3, r2
   12534:	ldr	r2, [sp, #28]
   12538:	eor	r2, r2, #1
   1253c:	cmp	sl, #2
   12540:	orreq	r2, r2, #1
   12544:	eor	r2, r2, #1
   12548:	ldr	r1, [sp, #32]
   1254c:	orr	r2, r1, r2
   12550:	tst	r2, #255	; 0xff
   12554:	beq	12580 <__assert_fail@plt+0x18a4>
   12558:	ldr	r2, [sp, #160]	; 0xa0
   1255c:	cmp	r2, #0
   12560:	beq	12580 <__assert_fail@plt+0x18a4>
   12564:	ubfx	r1, r4, #5, #8
   12568:	and	r2, r4, #31
   1256c:	ldr	r0, [sp, #160]	; 0xa0
   12570:	ldr	r1, [r0, r1, lsl #2]
   12574:	lsr	r2, r1, r2
   12578:	tst	r2, #1
   1257c:	bne	1258c <__assert_fail@plt+0x18b0>
   12580:	ldr	r2, [sp, #44]	; 0x2c
   12584:	cmp	r2, #0
   12588:	beq	128e0 <__assert_fail@plt+0x1c04>
   1258c:	ldr	r3, [sp, #32]
   12590:	cmp	r3, #0
   12594:	bne	130e0 <__assert_fail@plt+0x2404>
   12598:	ldr	r3, [sp, #36]	; 0x24
   1259c:	eor	r3, r3, #1
   125a0:	cmp	sl, #2
   125a4:	movne	r3, #0
   125a8:	andeq	r3, r3, #1
   125ac:	cmp	r3, #0
   125b0:	beq	125e8 <__assert_fail@plt+0x190c>
   125b4:	cmp	r9, fp
   125b8:	movhi	r2, #39	; 0x27
   125bc:	strbhi	r2, [r8, fp]
   125c0:	add	r2, fp, #1
   125c4:	cmp	r9, r2
   125c8:	movhi	r1, #36	; 0x24
   125cc:	strbhi	r1, [r8, r2]
   125d0:	add	r2, fp, #2
   125d4:	cmp	r9, r2
   125d8:	movhi	r1, #39	; 0x27
   125dc:	strbhi	r1, [r8, r2]
   125e0:	add	fp, fp, #3
   125e4:	str	r3, [sp, #36]	; 0x24
   125e8:	cmp	r9, fp
   125ec:	movhi	r3, #92	; 0x5c
   125f0:	strbhi	r3, [r8, fp]
   125f4:	add	fp, fp, #1
   125f8:	cmp	fp, r9
   125fc:	strbcc	r4, [r8, fp]
   12600:	add	fp, fp, #1
   12604:	cmp	r5, #0
   12608:	ldr	r3, [sp, #40]	; 0x28
   1260c:	moveq	r3, r5
   12610:	str	r3, [sp, #40]	; 0x28
   12614:	add	r6, r6, #1
   12618:	ldr	r3, [sp, #24]
   1261c:	cmn	r3, #1
   12620:	beq	12f50 <__assert_fail@plt+0x2274>
   12624:	ldr	r3, [sp, #24]
   12628:	subs	r5, r3, r6
   1262c:	movne	r5, #1
   12630:	cmp	r5, #0
   12634:	beq	12f64 <__assert_fail@plt+0x2288>
   12638:	ldr	r3, [sp, #28]
   1263c:	cmp	sl, #2
   12640:	moveq	r3, #0
   12644:	andne	r3, r3, #1
   12648:	str	r3, [sp, #56]	; 0x38
   1264c:	ldr	r2, [sp, #52]	; 0x34
   12650:	adds	r7, r2, #0
   12654:	movne	r7, #1
   12658:	ands	r3, r3, r7
   1265c:	str	r3, [sp, #44]	; 0x2c
   12660:	bne	11f80 <__assert_fail@plt+0x12a4>
   12664:	ldr	r3, [sp, #48]	; 0x30
   12668:	ldrb	r4, [r3, r6]
   1266c:	cmp	r4, #126	; 0x7e
   12670:	ldrls	pc, [pc, r4, lsl #2]
   12674:	b	12aac <__assert_fail@plt+0x1dd0>
   12678:	andeq	r2, r1, r4, lsl #4
   1267c:	andeq	r2, r1, ip, lsr #21
   12680:	andeq	r2, r1, ip, lsr #21
   12684:	andeq	r2, r1, ip, lsr #21
   12688:	andeq	r2, r1, ip, lsr #21
   1268c:	andeq	r2, r1, ip, lsr #21
   12690:	andeq	r2, r1, ip, lsr #21
   12694:	andeq	r2, r1, ip, asr #18
   12698:	ldrdeq	r2, [r1], -r8
   1269c:	andeq	r2, r1, ip, ror r8
   126a0:	andeq	r2, r1, r0, lsr #18
   126a4:	muleq	r1, r0, r8
   126a8:	andeq	r2, r1, ip, ror #9
   126ac:	andeq	r2, r1, r0, lsl #10
   126b0:	andeq	r2, r1, ip, lsr #21
   126b4:	andeq	r2, r1, ip, lsr #21
   126b8:	andeq	r2, r1, ip, lsr #21
   126bc:	andeq	r2, r1, ip, lsr #21
   126c0:	andeq	r2, r1, ip, lsr #21
   126c4:	andeq	r2, r1, ip, lsr #21
   126c8:	andeq	r2, r1, ip, lsr #21
   126cc:	andeq	r2, r1, ip, lsr #21
   126d0:	andeq	r2, r1, ip, lsr #21
   126d4:	andeq	r2, r1, ip, lsr #21
   126d8:	andeq	r2, r1, ip, lsr #21
   126dc:	andeq	r2, r1, ip, lsr #21
   126e0:	andeq	r2, r1, ip, lsr #21
   126e4:	andeq	r2, r1, ip, lsr #21
   126e8:	andeq	r2, r1, ip, lsr #21
   126ec:	andeq	r2, r1, ip, lsr #21
   126f0:	andeq	r2, r1, ip, lsr #21
   126f4:	andeq	r2, r1, ip, lsr #21
   126f8:	andeq	r2, r1, r8, asr #19
   126fc:	andeq	r2, r1, r4, asr #19
   12700:	andeq	r2, r1, r4, asr #19
   12704:	andeq	r2, r1, r4, lsl #19
   12708:	andeq	r2, r1, r4, asr #19
   1270c:	andeq	r2, r1, ip, asr #29
   12710:	andeq	r2, r1, r4, asr #19
   12714:	andeq	r2, r1, ip, lsl #20
   12718:	andeq	r2, r1, r4, asr #19
   1271c:	andeq	r2, r1, r4, asr #19
   12720:	andeq	r2, r1, r4, asr #19
   12724:	andeq	r2, r1, ip, asr #29
   12728:	andeq	r2, r1, ip, asr #29
   1272c:	andeq	r2, r1, ip, asr #29
   12730:	andeq	r2, r1, ip, asr #29
   12734:	andeq	r2, r1, ip, asr #29
   12738:	andeq	r2, r1, ip, asr #29
   1273c:	andeq	r2, r1, ip, asr #29
   12740:	andeq	r2, r1, ip, asr #29
   12744:	andeq	r2, r1, ip, asr #29
   12748:	andeq	r2, r1, ip, asr #29
   1274c:	andeq	r2, r1, ip, asr #29
   12750:	andeq	r2, r1, ip, asr #29
   12754:	andeq	r2, r1, ip, asr #29
   12758:	andeq	r2, r1, ip, asr #29
   1275c:	andeq	r2, r1, ip, asr #29
   12760:	andeq	r2, r1, ip, asr #29
   12764:	andeq	r2, r1, r4, asr #19
   12768:	andeq	r2, r1, r4, asr #19
   1276c:	andeq	r2, r1, r4, asr #19
   12770:	andeq	r2, r1, r4, asr #19
   12774:	andeq	r2, r1, ip, ror #6
   12778:	andeq	r2, r1, ip, lsr #21
   1277c:	andeq	r2, r1, ip, asr #29
   12780:	andeq	r2, r1, ip, asr #29
   12784:	andeq	r2, r1, ip, asr #29
   12788:	andeq	r2, r1, ip, asr #29
   1278c:	andeq	r2, r1, ip, asr #29
   12790:	andeq	r2, r1, ip, asr #29
   12794:	andeq	r2, r1, ip, asr #29
   12798:	andeq	r2, r1, ip, asr #29
   1279c:	andeq	r2, r1, ip, asr #29
   127a0:	andeq	r2, r1, ip, asr #29
   127a4:	andeq	r2, r1, ip, asr #29
   127a8:	andeq	r2, r1, ip, asr #29
   127ac:	andeq	r2, r1, ip, asr #29
   127b0:	andeq	r2, r1, ip, asr #29
   127b4:	andeq	r2, r1, ip, asr #29
   127b8:	andeq	r2, r1, ip, asr #29
   127bc:	andeq	r2, r1, ip, asr #29
   127c0:	andeq	r2, r1, ip, asr #29
   127c4:	andeq	r2, r1, ip, asr #29
   127c8:	andeq	r2, r1, ip, asr #29
   127cc:	andeq	r2, r1, ip, asr #29
   127d0:	andeq	r2, r1, ip, asr #29
   127d4:	andeq	r2, r1, ip, asr #29
   127d8:	andeq	r2, r1, ip, asr #29
   127dc:	andeq	r2, r1, ip, asr #29
   127e0:	andeq	r2, r1, ip, asr #29
   127e4:	andeq	r2, r1, r4, asr #19
   127e8:	andeq	r2, r1, r4, lsr #17
   127ec:	andeq	r2, r1, ip, asr #29
   127f0:	andeq	r2, r1, r4, asr #19
   127f4:	andeq	r2, r1, ip, asr #29
   127f8:	andeq	r2, r1, r4, asr #19
   127fc:	andeq	r2, r1, ip, asr #29
   12800:	andeq	r2, r1, ip, asr #29
   12804:	andeq	r2, r1, ip, asr #29
   12808:	andeq	r2, r1, ip, asr #29
   1280c:	andeq	r2, r1, ip, asr #29
   12810:	andeq	r2, r1, ip, asr #29
   12814:	andeq	r2, r1, ip, asr #29
   12818:	andeq	r2, r1, ip, asr #29
   1281c:	andeq	r2, r1, ip, asr #29
   12820:	andeq	r2, r1, ip, asr #29
   12824:	andeq	r2, r1, ip, asr #29
   12828:	andeq	r2, r1, ip, asr #29
   1282c:	andeq	r2, r1, ip, asr #29
   12830:	andeq	r2, r1, ip, asr #29
   12834:	andeq	r2, r1, ip, asr #29
   12838:	andeq	r2, r1, ip, asr #29
   1283c:	andeq	r2, r1, ip, asr #29
   12840:	andeq	r2, r1, ip, asr #29
   12844:	andeq	r2, r1, ip, asr #29
   12848:	andeq	r2, r1, ip, asr #29
   1284c:	andeq	r2, r1, ip, asr #29
   12850:	andeq	r2, r1, ip, asr #29
   12854:	andeq	r2, r1, ip, asr #29
   12858:	andeq	r2, r1, ip, asr #29
   1285c:	andeq	r2, r1, ip, asr #29
   12860:	andeq	r2, r1, ip, asr #29
   12864:	andeq	r2, r1, r4, ror #18
   12868:	andeq	r2, r1, r4, asr #19
   1286c:	andeq	r2, r1, r4, ror #18
   12870:	andeq	r2, r1, r4, lsl #19
   12874:	mov	r3, #0
   12878:	str	r3, [sp, #44]	; 0x2c
   1287c:	mov	r4, #9
   12880:	mov	r3, #116	; 0x74
   12884:	b	12508 <__assert_fail@plt+0x182c>
   12888:	mov	r3, #0
   1288c:	str	r3, [sp, #44]	; 0x2c
   12890:	mov	r4, #11
   12894:	mov	r3, #118	; 0x76
   12898:	b	12520 <__assert_fail@plt+0x1844>
   1289c:	mov	r3, #0
   128a0:	str	r3, [sp, #44]	; 0x2c
   128a4:	cmp	sl, #2
   128a8:	beq	128cc <__assert_fail@plt+0x1bf0>
   128ac:	ldr	r3, [sp, #28]
   128b0:	ldr	r2, [sp, #32]
   128b4:	and	r3, r3, r2
   128b8:	tst	r7, r3
   128bc:	bne	12f40 <__assert_fail@plt+0x2264>
   128c0:	mov	r4, #92	; 0x5c
   128c4:	mov	r3, r4
   128c8:	b	12520 <__assert_fail@plt+0x1844>
   128cc:	ldr	r3, [sp, #32]
   128d0:	cmp	r3, #0
   128d4:	bne	130c8 <__assert_fail@plt+0x23ec>
   128d8:	mov	r5, r3
   128dc:	mov	r4, #92	; 0x5c
   128e0:	eor	r3, r3, #1
   128e4:	ldr	r2, [sp, #36]	; 0x24
   128e8:	and	r3, r3, r2
   128ec:	tst	r3, #255	; 0xff
   128f0:	beq	125f8 <__assert_fail@plt+0x191c>
   128f4:	cmp	r9, fp
   128f8:	movhi	r3, #39	; 0x27
   128fc:	strbhi	r3, [r8, fp]
   12900:	add	r3, fp, #1
   12904:	cmp	r9, r3
   12908:	movhi	r2, #39	; 0x27
   1290c:	strbhi	r2, [r8, r3]
   12910:	add	fp, fp, #2
   12914:	mov	r3, #0
   12918:	str	r3, [sp, #36]	; 0x24
   1291c:	b	125f8 <__assert_fail@plt+0x191c>
   12920:	mov	r3, #110	; 0x6e
   12924:	b	12508 <__assert_fail@plt+0x182c>
   12928:	mov	r3, #110	; 0x6e
   1292c:	b	12508 <__assert_fail@plt+0x182c>
   12930:	mov	r3, #0
   12934:	str	r3, [sp, #44]	; 0x2c
   12938:	mov	r3, #110	; 0x6e
   1293c:	b	12508 <__assert_fail@plt+0x182c>
   12940:	mov	r8, r9
   12944:	mov	r7, #2
   12948:	b	130e8 <__assert_fail@plt+0x240c>
   1294c:	mov	r3, #97	; 0x61
   12950:	b	12520 <__assert_fail@plt+0x1844>
   12954:	mov	r3, #97	; 0x61
   12958:	b	12520 <__assert_fail@plt+0x1844>
   1295c:	mov	r3, #0
   12960:	str	r3, [sp, #44]	; 0x2c
   12964:	ldr	r3, [sp, #24]
   12968:	cmn	r3, #1
   1296c:	beq	12998 <__assert_fail@plt+0x1cbc>
   12970:	ldr	r3, [sp, #24]
   12974:	subs	r3, r3, #1
   12978:	movne	r3, #1
   1297c:	cmp	r3, #0
   12980:	bne	12f00 <__assert_fail@plt+0x2224>
   12984:	cmp	r6, #0
   12988:	beq	129c8 <__assert_fail@plt+0x1cec>
   1298c:	mov	r5, #0
   12990:	mov	r3, r5
   12994:	b	12534 <__assert_fail@plt+0x1858>
   12998:	ldr	r3, [sp, #48]	; 0x30
   1299c:	ldrb	r3, [r3, #1]
   129a0:	adds	r3, r3, #0
   129a4:	movne	r3, #1
   129a8:	b	1297c <__assert_fail@plt+0x1ca0>
   129ac:	mov	r3, #0
   129b0:	str	r3, [sp, #44]	; 0x2c
   129b4:	b	12984 <__assert_fail@plt+0x1ca8>
   129b8:	mov	r3, #0
   129bc:	str	r3, [sp, #44]	; 0x2c
   129c0:	b	129c8 <__assert_fail@plt+0x1cec>
   129c4:	ldr	r5, [sp, #44]	; 0x2c
   129c8:	ldr	r3, [sp, #32]
   129cc:	cmp	sl, #2
   129d0:	movne	r3, #0
   129d4:	andeq	r3, r3, #1
   129d8:	cmp	r3, #0
   129dc:	beq	12534 <__assert_fail@plt+0x1858>
   129e0:	mov	r8, r9
   129e4:	mov	r7, #2
   129e8:	b	130e8 <__assert_fail@plt+0x240c>
   129ec:	ldr	r5, [sp, #32]
   129f0:	b	129c8 <__assert_fail@plt+0x1cec>
   129f4:	mov	r3, #0
   129f8:	str	r3, [sp, #44]	; 0x2c
   129fc:	mov	r5, r3
   12a00:	b	129c8 <__assert_fail@plt+0x1cec>
   12a04:	mov	r3, #0
   12a08:	str	r3, [sp, #44]	; 0x2c
   12a0c:	cmp	sl, #2
   12a10:	strne	r5, [sp, #68]	; 0x44
   12a14:	movne	r3, #0
   12a18:	movne	r4, #39	; 0x27
   12a1c:	bne	12534 <__assert_fail@plt+0x1858>
   12a20:	ldr	r3, [sp, #32]
   12a24:	cmp	r3, #0
   12a28:	bne	130d4 <__assert_fail@plt+0x23f8>
   12a2c:	ldr	r3, [sp, #72]	; 0x48
   12a30:	clz	r3, r3
   12a34:	lsr	r3, r3, #5
   12a38:	cmp	r9, #0
   12a3c:	moveq	r3, #0
   12a40:	cmp	r3, #0
   12a44:	movne	r3, #0
   12a48:	bne	12a70 <__assert_fail@plt+0x1d94>
   12a4c:	cmp	r9, fp
   12a50:	movhi	r3, #39	; 0x27
   12a54:	strbhi	r3, [r8, fp]
   12a58:	add	r3, fp, #1
   12a5c:	cmp	r9, r3
   12a60:	movhi	r2, #92	; 0x5c
   12a64:	strbhi	r2, [r8, r3]
   12a68:	mov	r3, r9
   12a6c:	ldr	r9, [sp, #72]	; 0x48
   12a70:	add	r2, fp, #2
   12a74:	cmp	r2, r3
   12a78:	movcc	r1, #39	; 0x27
   12a7c:	strbcc	r1, [r8, r2]
   12a80:	add	fp, fp, #3
   12a84:	str	r5, [sp, #68]	; 0x44
   12a88:	ldr	r2, [sp, #32]
   12a8c:	str	r2, [sp, #36]	; 0x24
   12a90:	str	r9, [sp, #72]	; 0x48
   12a94:	mov	r9, r3
   12a98:	mov	r4, #39	; 0x27
   12a9c:	mov	r3, #0
   12aa0:	b	12580 <__assert_fail@plt+0x18a4>
   12aa4:	mov	r3, #0
   12aa8:	str	r3, [sp, #44]	; 0x2c
   12aac:	ldr	r7, [sp, #76]	; 0x4c
   12ab0:	cmp	r7, #1
   12ab4:	bne	12aec <__assert_fail@plt+0x1e10>
   12ab8:	bl	10c04 <__ctype_b_loc@plt>
   12abc:	ldr	r2, [r0]
   12ac0:	lsl	r3, r4, #1
   12ac4:	ldrh	r5, [r2, r3]
   12ac8:	ubfx	r5, r5, #14, #1
   12acc:	mov	ip, r7
   12ad0:	eor	r3, r5, #1
   12ad4:	ldr	r2, [sp, #28]
   12ad8:	and	r3, r3, r2
   12adc:	ands	r3, r3, #255	; 0xff
   12ae0:	beq	12534 <__assert_fail@plt+0x1858>
   12ae4:	mov	r5, #0
   12ae8:	b	12d48 <__assert_fail@plt+0x206c>
   12aec:	mov	r2, #0
   12af0:	mov	r3, #0
   12af4:	strd	r2, [sp, #104]	; 0x68
   12af8:	ldr	r3, [sp, #24]
   12afc:	cmn	r3, #1
   12b00:	beq	12b24 <__assert_fail@plt+0x1e48>
   12b04:	mov	r3, #0
   12b08:	str	r4, [sp, #88]	; 0x58
   12b0c:	str	fp, [sp, #92]	; 0x5c
   12b10:	str	r8, [sp, #56]	; 0x38
   12b14:	mov	r8, r3
   12b18:	str	r9, [sp, #84]	; 0x54
   12b1c:	ldr	r9, [sp, #48]	; 0x30
   12b20:	b	12c70 <__assert_fail@plt+0x1f94>
   12b24:	ldr	r0, [sp, #48]	; 0x30
   12b28:	bl	10c1c <strlen@plt>
   12b2c:	str	r0, [sp, #24]
   12b30:	b	12b04 <__assert_fail@plt+0x1e28>
   12b34:	mov	r1, fp
   12b38:	ldr	r4, [sp, #88]	; 0x58
   12b3c:	mov	r2, r8
   12b40:	mov	ip, r8
   12b44:	ldr	fp, [sp, #92]	; 0x5c
   12b48:	ldr	r8, [sp, #56]	; 0x38
   12b4c:	ldr	r9, [sp, #84]	; 0x54
   12b50:	ldr	r0, [sp, #24]
   12b54:	cmp	r7, r0
   12b58:	bcs	12d10 <__assert_fail@plt+0x2034>
   12b5c:	ldrb	r3, [r1]
   12b60:	cmp	r3, #0
   12b64:	beq	12d18 <__assert_fail@plt+0x203c>
   12b68:	mov	r3, r1
   12b6c:	add	r2, r2, #1
   12b70:	add	r1, r6, r2
   12b74:	cmp	r0, r1
   12b78:	bls	12d20 <__assert_fail@plt+0x2044>
   12b7c:	ldrb	r1, [r3, #1]!
   12b80:	cmp	r1, #0
   12b84:	bne	12b6c <__assert_fail@plt+0x1e90>
   12b88:	mov	ip, r2
   12b8c:	mov	r5, #0
   12b90:	b	12d40 <__assert_fail@plt+0x2064>
   12b94:	ldr	r3, [sp, #56]	; 0x38
   12b98:	str	r3, [sp, #64]	; 0x40
   12b9c:	ldr	r8, [sp, #84]	; 0x54
   12ba0:	mov	r7, #2
   12ba4:	b	130e8 <__assert_fail@plt+0x240c>
   12ba8:	cmp	r2, r7
   12bac:	beq	12c4c <__assert_fail@plt+0x1f70>
   12bb0:	ldrb	r3, [r2], #1
   12bb4:	sub	r3, r3, #91	; 0x5b
   12bb8:	cmp	r3, #33	; 0x21
   12bbc:	ldrls	pc, [pc, r3, lsl #2]
   12bc0:	b	12ba8 <__assert_fail@plt+0x1ecc>
   12bc4:	muleq	r1, r4, fp
   12bc8:	muleq	r1, r4, fp
   12bcc:	andeq	r2, r1, r8, lsr #23
   12bd0:	muleq	r1, r4, fp
   12bd4:	andeq	r2, r1, r8, lsr #23
   12bd8:	muleq	r1, r4, fp
   12bdc:	andeq	r2, r1, r8, lsr #23
   12be0:	andeq	r2, r1, r8, lsr #23
   12be4:	andeq	r2, r1, r8, lsr #23
   12be8:	andeq	r2, r1, r8, lsr #23
   12bec:	andeq	r2, r1, r8, lsr #23
   12bf0:	andeq	r2, r1, r8, lsr #23
   12bf4:	andeq	r2, r1, r8, lsr #23
   12bf8:	andeq	r2, r1, r8, lsr #23
   12bfc:	andeq	r2, r1, r8, lsr #23
   12c00:	andeq	r2, r1, r8, lsr #23
   12c04:	andeq	r2, r1, r8, lsr #23
   12c08:	andeq	r2, r1, r8, lsr #23
   12c0c:	andeq	r2, r1, r8, lsr #23
   12c10:	andeq	r2, r1, r8, lsr #23
   12c14:	andeq	r2, r1, r8, lsr #23
   12c18:	andeq	r2, r1, r8, lsr #23
   12c1c:	andeq	r2, r1, r8, lsr #23
   12c20:	andeq	r2, r1, r8, lsr #23
   12c24:	andeq	r2, r1, r8, lsr #23
   12c28:	andeq	r2, r1, r8, lsr #23
   12c2c:	andeq	r2, r1, r8, lsr #23
   12c30:	andeq	r2, r1, r8, lsr #23
   12c34:	andeq	r2, r1, r8, lsr #23
   12c38:	andeq	r2, r1, r8, lsr #23
   12c3c:	andeq	r2, r1, r8, lsr #23
   12c40:	andeq	r2, r1, r8, lsr #23
   12c44:	andeq	r2, r1, r8, lsr #23
   12c48:	muleq	r1, r4, fp
   12c4c:	ldr	r0, [sp, #100]	; 0x64
   12c50:	bl	10b74 <iswprint@plt>
   12c54:	cmp	r0, #0
   12c58:	moveq	r5, #0
   12c5c:	add	r8, r8, r4
   12c60:	add	r0, sp, #104	; 0x68
   12c64:	bl	10b2c <mbsinit@plt>
   12c68:	cmp	r0, #0
   12c6c:	bne	12cdc <__assert_fail@plt+0x2000>
   12c70:	add	r7, r6, r8
   12c74:	add	fp, r9, r7
   12c78:	add	r3, sp, #104	; 0x68
   12c7c:	ldr	r2, [sp, #24]
   12c80:	sub	r2, r2, r7
   12c84:	mov	r1, fp
   12c88:	add	r0, sp, #100	; 0x64
   12c8c:	bl	14c2c <__assert_fail@plt+0x3f50>
   12c90:	subs	r4, r0, #0
   12c94:	beq	12d2c <__assert_fail@plt+0x2050>
   12c98:	cmn	r4, #1
   12c9c:	beq	12cf4 <__assert_fail@plt+0x2018>
   12ca0:	cmn	r4, #2
   12ca4:	beq	12b34 <__assert_fail@plt+0x1e58>
   12ca8:	ldr	r3, [sp, #32]
   12cac:	cmp	sl, #2
   12cb0:	movne	r3, #0
   12cb4:	andeq	r3, r3, #1
   12cb8:	cmp	r3, #0
   12cbc:	beq	12c4c <__assert_fail@plt+0x1f70>
   12cc0:	cmp	r4, #1
   12cc4:	bls	12c4c <__assert_fail@plt+0x1f70>
   12cc8:	add	r2, r7, #1
   12ccc:	add	r2, r9, r2
   12cd0:	add	r3, r9, r4
   12cd4:	add	r7, r3, r7
   12cd8:	b	12bb0 <__assert_fail@plt+0x1ed4>
   12cdc:	ldr	r4, [sp, #88]	; 0x58
   12ce0:	mov	ip, r8
   12ce4:	ldr	fp, [sp, #92]	; 0x5c
   12ce8:	ldr	r8, [sp, #56]	; 0x38
   12cec:	ldr	r9, [sp, #84]	; 0x54
   12cf0:	b	12d40 <__assert_fail@plt+0x2064>
   12cf4:	ldr	r4, [sp, #88]	; 0x58
   12cf8:	mov	ip, r8
   12cfc:	ldr	fp, [sp, #92]	; 0x5c
   12d00:	ldr	r8, [sp, #56]	; 0x38
   12d04:	ldr	r9, [sp, #84]	; 0x54
   12d08:	mov	r5, #0
   12d0c:	b	12d40 <__assert_fail@plt+0x2064>
   12d10:	mov	r5, #0
   12d14:	b	12d40 <__assert_fail@plt+0x2064>
   12d18:	mov	r5, #0
   12d1c:	b	12d40 <__assert_fail@plt+0x2064>
   12d20:	mov	ip, r2
   12d24:	mov	r5, #0
   12d28:	b	12d40 <__assert_fail@plt+0x2064>
   12d2c:	ldr	r4, [sp, #88]	; 0x58
   12d30:	mov	ip, r8
   12d34:	ldr	fp, [sp, #92]	; 0x5c
   12d38:	ldr	r8, [sp, #56]	; 0x38
   12d3c:	ldr	r9, [sp, #84]	; 0x54
   12d40:	cmp	ip, #1
   12d44:	bls	12ad0 <__assert_fail@plt+0x1df4>
   12d48:	add	lr, r6, ip
   12d4c:	ldr	r3, [sp, #48]	; 0x30
   12d50:	add	r1, r3, r6
   12d54:	mov	r3, #0
   12d58:	eor	r0, r5, #1
   12d5c:	ldr	r2, [sp, #28]
   12d60:	and	r0, r0, r2
   12d64:	uxtb	r0, r0
   12d68:	str	r0, [sp, #56]	; 0x38
   12d6c:	mov	r7, #92	; 0x5c
   12d70:	ldr	ip, [sp, #36]	; 0x24
   12d74:	str	r5, [sp, #84]	; 0x54
   12d78:	ldr	r2, [sp, #44]	; 0x2c
   12d7c:	b	12dec <__assert_fail@plt+0x2110>
   12d80:	cmp	r2, #0
   12d84:	beq	12d94 <__assert_fail@plt+0x20b8>
   12d88:	cmp	r9, fp
   12d8c:	strbhi	r7, [r8, fp]
   12d90:	add	fp, fp, #1
   12d94:	add	r5, r6, #1
   12d98:	cmp	r5, lr
   12d9c:	bcs	12ea8 <__assert_fail@plt+0x21cc>
   12da0:	eor	r2, r3, #1
   12da4:	and	r2, r2, ip
   12da8:	ands	r2, r2, #255	; 0xff
   12dac:	beq	12ec4 <__assert_fail@plt+0x21e8>
   12db0:	cmp	r9, fp
   12db4:	movhi	r2, #39	; 0x27
   12db8:	strbhi	r2, [r8, fp]
   12dbc:	add	r2, fp, #1
   12dc0:	cmp	r9, r2
   12dc4:	movhi	ip, #39	; 0x27
   12dc8:	strbhi	ip, [r8, r2]
   12dcc:	add	fp, fp, #2
   12dd0:	ldr	ip, [sp, #56]	; 0x38
   12dd4:	mov	r2, ip
   12dd8:	mov	r6, r5
   12ddc:	cmp	r9, fp
   12de0:	strbhi	r4, [r8, fp]
   12de4:	add	fp, fp, #1
   12de8:	ldrb	r4, [r1, #1]!
   12dec:	cmp	r0, #0
   12df0:	beq	12d80 <__assert_fail@plt+0x20a4>
   12df4:	ldr	r3, [sp, #32]
   12df8:	cmp	r3, #0
   12dfc:	bne	13090 <__assert_fail@plt+0x23b4>
   12e00:	eor	r3, ip, #1
   12e04:	cmp	sl, #2
   12e08:	movne	r3, #0
   12e0c:	andeq	r3, r3, #1
   12e10:	cmp	r3, #0
   12e14:	beq	12e4c <__assert_fail@plt+0x2170>
   12e18:	cmp	r9, fp
   12e1c:	movhi	ip, #39	; 0x27
   12e20:	strbhi	ip, [r8, fp]
   12e24:	add	ip, fp, #1
   12e28:	cmp	r9, ip
   12e2c:	movhi	r5, #36	; 0x24
   12e30:	strbhi	r5, [r8, ip]
   12e34:	add	ip, fp, #2
   12e38:	cmp	r9, ip
   12e3c:	movhi	r5, #39	; 0x27
   12e40:	strbhi	r5, [r8, ip]
   12e44:	add	fp, fp, #3
   12e48:	mov	ip, r3
   12e4c:	cmp	r9, fp
   12e50:	strbhi	r7, [r8, fp]
   12e54:	add	r3, fp, #1
   12e58:	cmp	r9, r3
   12e5c:	bls	12e6c <__assert_fail@plt+0x2190>
   12e60:	lsr	r5, r4, #6
   12e64:	add	r5, r5, #48	; 0x30
   12e68:	strb	r5, [r8, r3]
   12e6c:	add	r3, fp, #2
   12e70:	cmp	r9, r3
   12e74:	bls	12e84 <__assert_fail@plt+0x21a8>
   12e78:	ubfx	r5, r4, #3, #3
   12e7c:	add	r5, r5, #48	; 0x30
   12e80:	strb	r5, [r8, r3]
   12e84:	add	fp, fp, #3
   12e88:	and	r4, r4, #7
   12e8c:	add	r4, r4, #48	; 0x30
   12e90:	add	r5, r6, #1
   12e94:	cmp	r5, lr
   12e98:	bcs	12eb4 <__assert_fail@plt+0x21d8>
   12e9c:	ldr	r3, [sp, #56]	; 0x38
   12ea0:	mov	r6, r5
   12ea4:	b	12ddc <__assert_fail@plt+0x2100>
   12ea8:	str	ip, [sp, #36]	; 0x24
   12eac:	ldr	r5, [sp, #84]	; 0x54
   12eb0:	b	128e0 <__assert_fail@plt+0x1c04>
   12eb4:	str	ip, [sp, #36]	; 0x24
   12eb8:	ldr	r5, [sp, #84]	; 0x54
   12ebc:	mov	r3, r0
   12ec0:	b	128e0 <__assert_fail@plt+0x1c04>
   12ec4:	mov	r6, r5
   12ec8:	b	12ddc <__assert_fail@plt+0x2100>
   12ecc:	ldr	r3, [sp, #44]	; 0x2c
   12ed0:	b	12534 <__assert_fail@plt+0x1858>
   12ed4:	mov	r5, #0
   12ed8:	mov	r3, r5
   12edc:	mov	r4, #63	; 0x3f
   12ee0:	b	12534 <__assert_fail@plt+0x1858>
   12ee4:	mov	r5, #0
   12ee8:	mov	r3, r5
   12eec:	mov	r4, #63	; 0x3f
   12ef0:	b	12534 <__assert_fail@plt+0x1858>
   12ef4:	mov	r5, #0
   12ef8:	mov	r3, r5
   12efc:	b	12534 <__assert_fail@plt+0x1858>
   12f00:	mov	r5, #0
   12f04:	mov	r3, r5
   12f08:	b	12534 <__assert_fail@plt+0x1858>
   12f0c:	ldr	r5, [sp, #44]	; 0x2c
   12f10:	ldr	r3, [sp, #32]
   12f14:	b	12534 <__assert_fail@plt+0x1858>
   12f18:	ldr	r5, [sp, #44]	; 0x2c
   12f1c:	mov	r3, #0
   12f20:	str	r3, [sp, #44]	; 0x2c
   12f24:	b	12534 <__assert_fail@plt+0x1858>
   12f28:	mov	r4, r3
   12f2c:	mov	r5, #0
   12f30:	b	1258c <__assert_fail@plt+0x18b0>
   12f34:	mov	r5, #0
   12f38:	mov	r4, #97	; 0x61
   12f3c:	b	1258c <__assert_fail@plt+0x18b0>
   12f40:	mov	r5, #0
   12f44:	mov	r3, r5
   12f48:	mov	r4, #92	; 0x5c
   12f4c:	b	128e0 <__assert_fail@plt+0x1c04>
   12f50:	ldr	r3, [sp, #48]	; 0x30
   12f54:	ldrb	r5, [r3, r6]
   12f58:	adds	r5, r5, #0
   12f5c:	movne	r5, #1
   12f60:	b	12630 <__assert_fail@plt+0x1954>
   12f64:	cmp	sl, #2
   12f68:	movne	r3, #0
   12f6c:	moveq	r3, #1
   12f70:	ldr	r1, [sp, #32]
   12f74:	cmp	fp, #0
   12f78:	andeq	r2, r3, r1
   12f7c:	movne	r2, #0
   12f80:	cmp	r2, #0
   12f84:	bne	130a4 <__assert_fail@plt+0x23c8>
   12f88:	eor	r2, r1, #1
   12f8c:	uxtb	r2, r2
   12f90:	and	r3, r3, r2
   12f94:	ldr	r1, [sp, #68]	; 0x44
   12f98:	ands	r3, r1, r3
   12f9c:	beq	13030 <__assert_fail@plt+0x2354>
   12fa0:	ldr	r2, [sp, #40]	; 0x28
   12fa4:	cmp	r2, #0
   12fa8:	bne	12fe0 <__assert_fail@plt+0x2304>
   12fac:	ldr	r2, [sp, #72]	; 0x48
   12fb0:	adds	r2, r2, #0
   12fb4:	movne	r2, #1
   12fb8:	cmp	r9, #0
   12fbc:	movne	r2, #0
   12fc0:	str	r2, [sp, #68]	; 0x44
   12fc4:	mov	sl, #2
   12fc8:	ldr	r1, [sp, #40]	; 0x28
   12fcc:	str	r1, [sp, #32]
   12fd0:	cmp	r2, #0
   12fd4:	beq	13024 <__assert_fail@plt+0x2348>
   12fd8:	ldr	r9, [sp, #72]	; 0x48
   12fdc:	b	11d38 <__assert_fail@plt+0x105c>
   12fe0:	ldr	r3, [sp, #168]	; 0xa8
   12fe4:	str	r3, [sp, #16]
   12fe8:	ldr	r3, [sp, #164]	; 0xa4
   12fec:	str	r3, [sp, #12]
   12ff0:	ldr	r3, [sp, #160]	; 0xa0
   12ff4:	str	r3, [sp, #8]
   12ff8:	ldr	r3, [sp, #156]	; 0x9c
   12ffc:	str	r3, [sp, #4]
   13000:	mov	r3, #5
   13004:	str	r3, [sp]
   13008:	ldr	r3, [sp, #24]
   1300c:	ldr	r2, [sp, #48]	; 0x30
   13010:	ldr	r1, [sp, #72]	; 0x48
   13014:	ldr	r0, [sp, #64]	; 0x40
   13018:	bl	11cc0 <__assert_fail@plt+0xfe4>
   1301c:	mov	fp, r0
   13020:	b	13140 <__assert_fail@plt+0x2464>
   13024:	mov	r8, r9
   13028:	mov	r2, r3
   1302c:	b	13034 <__assert_fail@plt+0x2358>
   13030:	mov	r8, r9
   13034:	ldr	r3, [sp, #60]	; 0x3c
   13038:	cmp	r3, #0
   1303c:	moveq	r2, #0
   13040:	andne	r2, r2, #1
   13044:	cmp	r2, #0
   13048:	beq	13078 <__assert_fail@plt+0x239c>
   1304c:	mov	r2, r3
   13050:	ldrb	r3, [r3]
   13054:	cmp	r3, #0
   13058:	beq	13078 <__assert_fail@plt+0x239c>
   1305c:	ldr	r1, [sp, #64]	; 0x40
   13060:	cmp	r8, fp
   13064:	strbhi	r3, [r1, fp]
   13068:	add	fp, fp, #1
   1306c:	ldrb	r3, [r2, #1]!
   13070:	cmp	r3, #0
   13074:	bne	13060 <__assert_fail@plt+0x2384>
   13078:	cmp	r8, fp
   1307c:	bls	13140 <__assert_fail@plt+0x2464>
   13080:	mov	r3, #0
   13084:	ldr	r2, [sp, #64]	; 0x40
   13088:	strb	r3, [r2, fp]
   1308c:	b	13140 <__assert_fail@plt+0x2464>
   13090:	mov	r8, r9
   13094:	mov	r7, sl
   13098:	ldr	r3, [sp, #32]
   1309c:	str	r3, [sp, #28]
   130a0:	b	130e8 <__assert_fail@plt+0x240c>
   130a4:	mov	r8, r9
   130a8:	mov	r7, #2
   130ac:	b	130e8 <__assert_fail@plt+0x240c>
   130b0:	mov	r8, r9
   130b4:	mov	r7, sl
   130b8:	b	130e8 <__assert_fail@plt+0x240c>
   130bc:	mov	r8, r9
   130c0:	mov	r7, sl
   130c4:	b	130e8 <__assert_fail@plt+0x240c>
   130c8:	mov	r8, r9
   130cc:	mov	r7, sl
   130d0:	b	130e8 <__assert_fail@plt+0x240c>
   130d4:	mov	r8, r9
   130d8:	mov	r7, sl
   130dc:	b	130e8 <__assert_fail@plt+0x240c>
   130e0:	mov	r8, r9
   130e4:	mov	r7, sl
   130e8:	ldr	r3, [sp, #28]
   130ec:	cmp	r7, #2
   130f0:	movne	r3, #0
   130f4:	andeq	r3, r3, #1
   130f8:	cmp	r3, #0
   130fc:	movne	r7, #4
   13100:	ldr	r3, [sp, #168]	; 0xa8
   13104:	str	r3, [sp, #16]
   13108:	ldr	r3, [sp, #164]	; 0xa4
   1310c:	str	r3, [sp, #12]
   13110:	mov	r3, #0
   13114:	str	r3, [sp, #8]
   13118:	ldr	r3, [sp, #156]	; 0x9c
   1311c:	bic	r3, r3, #2
   13120:	str	r3, [sp, #4]
   13124:	str	r7, [sp]
   13128:	ldr	r3, [sp, #24]
   1312c:	ldr	r2, [sp, #48]	; 0x30
   13130:	mov	r1, r8
   13134:	ldr	r0, [sp, #64]	; 0x40
   13138:	bl	11cc0 <__assert_fail@plt+0xfe4>
   1313c:	mov	fp, r0
   13140:	mov	r0, fp
   13144:	add	sp, sp, #116	; 0x74
   13148:	ldrd	r4, [sp]
   1314c:	ldrd	r6, [sp, #8]
   13150:	ldrd	r8, [sp, #16]
   13154:	ldrd	sl, [sp, #24]
   13158:	add	sp, sp, #32
   1315c:	pop	{pc}		; (ldr pc, [sp], #4)
   13160:	mov	r8, r9
   13164:	mov	r7, sl
   13168:	b	13100 <__assert_fail@plt+0x2424>
   1316c:	add	fp, fp, #4
   13170:	str	r3, [sp, #36]	; 0x24
   13174:	mov	r5, #0
   13178:	mov	r4, #48	; 0x30
   1317c:	b	12534 <__assert_fail@plt+0x1858>
   13180:	mov	r3, #1
   13184:	str	r3, [sp, #32]
   13188:	str	r3, [sp, #28]
   1318c:	str	r3, [sp, #52]	; 0x34
   13190:	movw	r3, #21924	; 0x55a4
   13194:	movt	r3, #1
   13198:	str	r3, [sp, #60]	; 0x3c
   1319c:	mov	fp, #0
   131a0:	mov	sl, #5
   131a4:	b	11d98 <__assert_fail@plt+0x10bc>
   131a8:	ldr	r3, [sp, #48]	; 0x30
   131ac:	ldrb	r4, [r3, r6]
   131b0:	cmp	r4, #126	; 0x7e
   131b4:	ldrls	pc, [pc, r4, lsl #2]
   131b8:	b	12aa4 <__assert_fail@plt+0x1dc8>
   131bc:	andeq	r2, r1, ip, lsr #4
   131c0:	andeq	r2, r1, r4, lsr #21
   131c4:	andeq	r2, r1, r4, lsr #21
   131c8:	andeq	r2, r1, r4, lsr #21
   131cc:	andeq	r2, r1, r4, lsr #21
   131d0:	andeq	r2, r1, r4, lsr #21
   131d4:	andeq	r2, r1, r4, lsr #21
   131d8:	andeq	r2, r1, r4, lsr pc
   131dc:	ldrdeq	r2, [r1], -r0
   131e0:	andeq	r2, r1, r4, ror r8
   131e4:	andeq	r2, r1, r0, lsr r9
   131e8:	andeq	r2, r1, r8, lsl #17
   131ec:	andeq	r2, r1, r4, ror #9
   131f0:	strdeq	r2, [r1], -r8
   131f4:	andeq	r2, r1, r4, lsr #21
   131f8:	andeq	r2, r1, r4, lsr #21
   131fc:	andeq	r2, r1, r4, lsr #21
   13200:	andeq	r2, r1, r4, lsr #21
   13204:	andeq	r2, r1, r4, lsr #21
   13208:	andeq	r2, r1, r4, lsr #21
   1320c:	andeq	r2, r1, r4, lsr #21
   13210:	andeq	r2, r1, r4, lsr #21
   13214:	andeq	r2, r1, r4, lsr #21
   13218:	andeq	r2, r1, r4, lsr #21
   1321c:	andeq	r2, r1, r4, lsr #21
   13220:	andeq	r2, r1, r4, lsr #21
   13224:	andeq	r2, r1, r4, lsr #21
   13228:	andeq	r2, r1, r4, lsr #21
   1322c:	andeq	r2, r1, r4, lsr #21
   13230:	andeq	r2, r1, r4, lsr #21
   13234:	andeq	r2, r1, r4, lsr #21
   13238:	andeq	r2, r1, r4, lsr #21
   1323c:			; <UNDEFINED> instruction: 0x000129b8
   13240:	strdeq	r2, [r1], -r4
   13244:	strdeq	r2, [r1], -r4
   13248:	andeq	r2, r1, ip, lsr #19
   1324c:	strdeq	r2, [r1], -r4
   13250:	andeq	r2, r1, r8, lsl pc
   13254:	strdeq	r2, [r1], -r4
   13258:	andeq	r2, r1, r4, lsl #20
   1325c:	strdeq	r2, [r1], -r4
   13260:	strdeq	r2, [r1], -r4
   13264:	strdeq	r2, [r1], -r4
   13268:	andeq	r2, r1, r8, lsl pc
   1326c:	andeq	r2, r1, r8, lsl pc
   13270:	andeq	r2, r1, r8, lsl pc
   13274:	andeq	r2, r1, r8, lsl pc
   13278:	andeq	r2, r1, r8, lsl pc
   1327c:	andeq	r2, r1, r8, lsl pc
   13280:	andeq	r2, r1, r8, lsl pc
   13284:	andeq	r2, r1, r8, lsl pc
   13288:	andeq	r2, r1, r8, lsl pc
   1328c:	andeq	r2, r1, r8, lsl pc
   13290:	andeq	r2, r1, r8, lsl pc
   13294:	andeq	r2, r1, r8, lsl pc
   13298:	andeq	r2, r1, r8, lsl pc
   1329c:	andeq	r2, r1, r8, lsl pc
   132a0:	andeq	r2, r1, r8, lsl pc
   132a4:	andeq	r2, r1, r8, lsl pc
   132a8:	strdeq	r2, [r1], -r4
   132ac:	strdeq	r2, [r1], -r4
   132b0:	strdeq	r2, [r1], -r4
   132b4:	strdeq	r2, [r1], -r4
   132b8:	andeq	r2, r1, r4, ror #6
   132bc:	andeq	r2, r1, r4, lsr #21
   132c0:	andeq	r2, r1, r8, lsl pc
   132c4:	andeq	r2, r1, r8, lsl pc
   132c8:	andeq	r2, r1, r8, lsl pc
   132cc:	andeq	r2, r1, r8, lsl pc
   132d0:	andeq	r2, r1, r8, lsl pc
   132d4:	andeq	r2, r1, r8, lsl pc
   132d8:	andeq	r2, r1, r8, lsl pc
   132dc:	andeq	r2, r1, r8, lsl pc
   132e0:	andeq	r2, r1, r8, lsl pc
   132e4:	andeq	r2, r1, r8, lsl pc
   132e8:	andeq	r2, r1, r8, lsl pc
   132ec:	andeq	r2, r1, r8, lsl pc
   132f0:	andeq	r2, r1, r8, lsl pc
   132f4:	andeq	r2, r1, r8, lsl pc
   132f8:	andeq	r2, r1, r8, lsl pc
   132fc:	andeq	r2, r1, r8, lsl pc
   13300:	andeq	r2, r1, r8, lsl pc
   13304:	andeq	r2, r1, r8, lsl pc
   13308:	andeq	r2, r1, r8, lsl pc
   1330c:	andeq	r2, r1, r8, lsl pc
   13310:	andeq	r2, r1, r8, lsl pc
   13314:	andeq	r2, r1, r8, lsl pc
   13318:	andeq	r2, r1, r8, lsl pc
   1331c:	andeq	r2, r1, r8, lsl pc
   13320:	andeq	r2, r1, r8, lsl pc
   13324:	andeq	r2, r1, r8, lsl pc
   13328:	strdeq	r2, [r1], -r4
   1332c:	muleq	r1, ip, r8
   13330:	andeq	r2, r1, r8, lsl pc
   13334:	strdeq	r2, [r1], -r4
   13338:	andeq	r2, r1, r8, lsl pc
   1333c:	strdeq	r2, [r1], -r4
   13340:	andeq	r2, r1, r8, lsl pc
   13344:	andeq	r2, r1, r8, lsl pc
   13348:	andeq	r2, r1, r8, lsl pc
   1334c:	andeq	r2, r1, r8, lsl pc
   13350:	andeq	r2, r1, r8, lsl pc
   13354:	andeq	r2, r1, r8, lsl pc
   13358:	andeq	r2, r1, r8, lsl pc
   1335c:	andeq	r2, r1, r8, lsl pc
   13360:	andeq	r2, r1, r8, lsl pc
   13364:	andeq	r2, r1, r8, lsl pc
   13368:	andeq	r2, r1, r8, lsl pc
   1336c:	andeq	r2, r1, r8, lsl pc
   13370:	andeq	r2, r1, r8, lsl pc
   13374:	andeq	r2, r1, r8, lsl pc
   13378:	andeq	r2, r1, r8, lsl pc
   1337c:	andeq	r2, r1, r8, lsl pc
   13380:	andeq	r2, r1, r8, lsl pc
   13384:	andeq	r2, r1, r8, lsl pc
   13388:	andeq	r2, r1, r8, lsl pc
   1338c:	andeq	r2, r1, r8, lsl pc
   13390:	andeq	r2, r1, r8, lsl pc
   13394:	andeq	r2, r1, r8, lsl pc
   13398:	andeq	r2, r1, r8, lsl pc
   1339c:	andeq	r2, r1, r8, lsl pc
   133a0:	andeq	r2, r1, r8, lsl pc
   133a4:	andeq	r2, r1, r8, lsl pc
   133a8:	andeq	r2, r1, ip, asr r9
   133ac:	strdeq	r2, [r1], -r4
   133b0:	andeq	r2, r1, ip, asr r9
   133b4:	andeq	r2, r1, ip, lsr #19
   133b8:	strd	r4, [sp, #-36]!	; 0xffffffdc
   133bc:	strd	r6, [sp, #8]
   133c0:	strd	r8, [sp, #16]
   133c4:	strd	sl, [sp, #24]
   133c8:	str	lr, [sp, #32]
   133cc:	sub	sp, sp, #52	; 0x34
   133d0:	mov	r5, r0
   133d4:	str	r1, [sp, #24]
   133d8:	str	r2, [sp, #28]
   133dc:	mov	r4, r3
   133e0:	bl	10c28 <__errno_location@plt>
   133e4:	str	r0, [sp, #32]
   133e8:	ldr	r3, [r0]
   133ec:	str	r3, [sp, #36]	; 0x24
   133f0:	movw	r3, #24784	; 0x60d0
   133f4:	movt	r3, #2
   133f8:	ldr	r6, [r3]
   133fc:	cmn	r5, #-2147483647	; 0x80000001
   13400:	movne	r3, #0
   13404:	moveq	r3, #1
   13408:	orrs	r3, r3, r5, lsr #31
   1340c:	bne	13570 <__assert_fail@plt+0x2894>
   13410:	movw	r3, #24784	; 0x60d0
   13414:	movt	r3, #2
   13418:	ldr	r2, [r3, #4]
   1341c:	cmp	r2, r5
   13420:	bgt	13490 <__assert_fail@plt+0x27b4>
   13424:	str	r2, [sp, #44]	; 0x2c
   13428:	add	r3, r3, #8
   1342c:	cmp	r6, r3
   13430:	beq	13574 <__assert_fail@plt+0x2898>
   13434:	sub	r2, r5, r2
   13438:	mov	r3, #8
   1343c:	str	r3, [sp]
   13440:	mvn	r3, #-2147483648	; 0x80000000
   13444:	add	r2, r2, #1
   13448:	add	r1, sp, #44	; 0x2c
   1344c:	mov	r0, r6
   13450:	bl	14578 <__assert_fail@plt+0x389c>
   13454:	mov	r6, r0
   13458:	movw	r3, #24784	; 0x60d0
   1345c:	movt	r3, #2
   13460:	str	r0, [r3]
   13464:	movw	r7, #24784	; 0x60d0
   13468:	movt	r7, #2
   1346c:	ldr	r0, [r7, #4]
   13470:	ldr	r2, [sp, #44]	; 0x2c
   13474:	sub	r2, r2, r0
   13478:	lsl	r2, r2, #3
   1347c:	mov	r1, #0
   13480:	add	r0, r6, r0, lsl #3
   13484:	bl	10c40 <memset@plt>
   13488:	ldr	r3, [sp, #44]	; 0x2c
   1348c:	str	r3, [r7, #4]
   13490:	add	fp, r6, r5, lsl #3
   13494:	ldr	r8, [r6, r5, lsl #3]
   13498:	ldr	r7, [fp, #4]
   1349c:	ldr	r3, [r4, #4]
   134a0:	orr	r9, r3, #1
   134a4:	add	sl, r4, #8
   134a8:	ldr	r3, [r4, #44]	; 0x2c
   134ac:	str	r3, [sp, #16]
   134b0:	ldr	r3, [r4, #40]	; 0x28
   134b4:	str	r3, [sp, #12]
   134b8:	str	sl, [sp, #8]
   134bc:	str	r9, [sp, #4]
   134c0:	ldr	r3, [r4]
   134c4:	str	r3, [sp]
   134c8:	ldr	r3, [sp, #28]
   134cc:	ldr	r2, [sp, #24]
   134d0:	mov	r1, r8
   134d4:	mov	r0, r7
   134d8:	bl	11cc0 <__assert_fail@plt+0xfe4>
   134dc:	cmp	r8, r0
   134e0:	bhi	13544 <__assert_fail@plt+0x2868>
   134e4:	add	r8, r0, #1
   134e8:	str	r8, [r6, r5, lsl #3]
   134ec:	movw	r3, #24880	; 0x6130
   134f0:	movt	r3, #2
   134f4:	cmp	r7, r3
   134f8:	beq	13504 <__assert_fail@plt+0x2828>
   134fc:	mov	r0, r7
   13500:	bl	14ac8 <__assert_fail@plt+0x3dec>
   13504:	mov	r0, r8
   13508:	bl	14374 <__assert_fail@plt+0x3698>
   1350c:	mov	r7, r0
   13510:	str	r0, [fp, #4]
   13514:	ldr	r3, [r4, #44]	; 0x2c
   13518:	str	r3, [sp, #16]
   1351c:	ldr	r3, [r4, #40]	; 0x28
   13520:	str	r3, [sp, #12]
   13524:	str	sl, [sp, #8]
   13528:	str	r9, [sp, #4]
   1352c:	ldr	r3, [r4]
   13530:	str	r3, [sp]
   13534:	ldr	r3, [sp, #28]
   13538:	ldr	r2, [sp, #24]
   1353c:	mov	r1, r8
   13540:	bl	11cc0 <__assert_fail@plt+0xfe4>
   13544:	ldr	r3, [sp, #32]
   13548:	ldr	r2, [sp, #36]	; 0x24
   1354c:	str	r2, [r3]
   13550:	mov	r0, r7
   13554:	add	sp, sp, #52	; 0x34
   13558:	ldrd	r4, [sp]
   1355c:	ldrd	r6, [sp, #8]
   13560:	ldrd	r8, [sp, #16]
   13564:	ldrd	sl, [sp, #24]
   13568:	add	sp, sp, #32
   1356c:	pop	{pc}		; (ldr pc, [sp], #4)
   13570:	bl	10cd0 <abort@plt>
   13574:	sub	r2, r5, r2
   13578:	mov	r3, #8
   1357c:	str	r3, [sp]
   13580:	mvn	r3, #-2147483648	; 0x80000000
   13584:	add	r2, r2, #1
   13588:	add	r1, sp, #44	; 0x2c
   1358c:	mov	r0, #0
   13590:	bl	14578 <__assert_fail@plt+0x389c>
   13594:	mov	r6, r0
   13598:	movw	r3, #24784	; 0x60d0
   1359c:	movt	r3, #2
   135a0:	str	r0, [r3]
   135a4:	ldrd	r2, [r3, #8]
   135a8:	strd	r2, [r0]
   135ac:	b	13464 <__assert_fail@plt+0x2788>
   135b0:	strd	r4, [sp, #-16]!
   135b4:	str	r6, [sp, #8]
   135b8:	str	lr, [sp, #12]
   135bc:	mov	r4, r0
   135c0:	bl	10c28 <__errno_location@plt>
   135c4:	mov	r5, r0
   135c8:	ldr	r6, [r0]
   135cc:	cmp	r4, #0
   135d0:	ldr	r3, [pc, #32]	; 135f8 <__assert_fail@plt+0x291c>
   135d4:	moveq	r4, r3
   135d8:	mov	r1, #48	; 0x30
   135dc:	mov	r0, r4
   135e0:	bl	146e8 <__assert_fail@plt+0x3a0c>
   135e4:	str	r6, [r5]
   135e8:	ldrd	r4, [sp]
   135ec:	ldr	r6, [sp, #8]
   135f0:	add	sp, sp, #12
   135f4:	pop	{pc}		; (ldr pc, [sp], #4)
   135f8:	andeq	r6, r2, r0, lsr r2
   135fc:	subs	r3, r0, #0
   13600:	ldr	r2, [pc, #8]	; 13610 <__assert_fail@plt+0x2934>
   13604:	moveq	r3, r2
   13608:	ldr	r0, [r3]
   1360c:	bx	lr
   13610:	andeq	r6, r2, r0, lsr r2
   13614:	subs	r3, r0, #0
   13618:	ldr	r2, [pc, #8]	; 13628 <__assert_fail@plt+0x294c>
   1361c:	moveq	r3, r2
   13620:	str	r1, [r3]
   13624:	bx	lr
   13628:	andeq	r6, r2, r0, lsr r2
   1362c:	push	{lr}		; (str lr, [sp, #-4]!)
   13630:	subs	r3, r0, #0
   13634:	ldr	r0, [pc, #44]	; 13668 <__assert_fail@plt+0x298c>
   13638:	moveq	r3, r0
   1363c:	add	r3, r3, #8
   13640:	lsr	lr, r1, #5
   13644:	and	r1, r1, #31
   13648:	ldr	ip, [r3, lr, lsl #2]
   1364c:	lsr	r0, ip, r1
   13650:	eor	r2, r2, r0
   13654:	and	r2, r2, #1
   13658:	eor	r1, ip, r2, lsl r1
   1365c:	str	r1, [r3, lr, lsl #2]
   13660:	and	r0, r0, #1
   13664:	pop	{pc}		; (ldr pc, [sp], #4)
   13668:	andeq	r6, r2, r0, lsr r2
   1366c:	subs	r3, r0, #0
   13670:	ldr	r2, [pc, #12]	; 13684 <__assert_fail@plt+0x29a8>
   13674:	moveq	r3, r2
   13678:	ldr	r0, [r3, #4]
   1367c:	str	r1, [r3, #4]
   13680:	bx	lr
   13684:	andeq	r6, r2, r0, lsr r2
   13688:	subs	r3, r0, #0
   1368c:	ldr	r0, [pc, #44]	; 136c0 <__assert_fail@plt+0x29e4>
   13690:	moveq	r3, r0
   13694:	mov	r0, #10
   13698:	str	r0, [r3]
   1369c:	cmp	r2, #0
   136a0:	cmpne	r1, #0
   136a4:	beq	136b4 <__assert_fail@plt+0x29d8>
   136a8:	str	r1, [r3, #40]	; 0x28
   136ac:	str	r2, [r3, #44]	; 0x2c
   136b0:	bx	lr
   136b4:	str	r4, [sp, #-8]!
   136b8:	str	lr, [sp, #4]
   136bc:	bl	10cd0 <abort@plt>
   136c0:	andeq	r6, r2, r0, lsr r2
   136c4:	strd	r4, [sp, #-32]!	; 0xffffffe0
   136c8:	strd	r6, [sp, #8]
   136cc:	strd	r8, [sp, #16]
   136d0:	str	sl, [sp, #24]
   136d4:	str	lr, [sp, #28]
   136d8:	sub	sp, sp, #24
   136dc:	mov	r7, r0
   136e0:	mov	r8, r1
   136e4:	mov	r9, r2
   136e8:	mov	sl, r3
   136ec:	ldr	r4, [sp, #56]	; 0x38
   136f0:	cmp	r4, #0
   136f4:	ldr	r3, [pc, #104]	; 13764 <__assert_fail@plt+0x2a88>
   136f8:	moveq	r4, r3
   136fc:	bl	10c28 <__errno_location@plt>
   13700:	mov	r5, r0
   13704:	ldr	r6, [r0]
   13708:	ldr	r3, [r4, #44]	; 0x2c
   1370c:	str	r3, [sp, #16]
   13710:	ldr	r3, [r4, #40]	; 0x28
   13714:	str	r3, [sp, #12]
   13718:	add	r3, r4, #8
   1371c:	str	r3, [sp, #8]
   13720:	ldr	r3, [r4, #4]
   13724:	str	r3, [sp, #4]
   13728:	ldr	r3, [r4]
   1372c:	str	r3, [sp]
   13730:	mov	r3, sl
   13734:	mov	r2, r9
   13738:	mov	r1, r8
   1373c:	mov	r0, r7
   13740:	bl	11cc0 <__assert_fail@plt+0xfe4>
   13744:	str	r6, [r5]
   13748:	add	sp, sp, #24
   1374c:	ldrd	r4, [sp]
   13750:	ldrd	r6, [sp, #8]
   13754:	ldrd	r8, [sp, #16]
   13758:	ldr	sl, [sp, #24]
   1375c:	add	sp, sp, #28
   13760:	pop	{pc}		; (ldr pc, [sp], #4)
   13764:	andeq	r6, r2, r0, lsr r2
   13768:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1376c:	strd	r6, [sp, #8]
   13770:	strd	r8, [sp, #16]
   13774:	strd	sl, [sp, #24]
   13778:	str	lr, [sp, #32]
   1377c:	sub	sp, sp, #44	; 0x2c
   13780:	mov	r8, r0
   13784:	mov	sl, r1
   13788:	mov	r6, r2
   1378c:	subs	r4, r3, #0
   13790:	ldr	r3, [pc, #200]	; 13860 <__assert_fail@plt+0x2b84>
   13794:	moveq	r4, r3
   13798:	bl	10c28 <__errno_location@plt>
   1379c:	mov	r7, r0
   137a0:	ldr	fp, [r0]
   137a4:	ldr	r5, [r4, #4]
   137a8:	cmp	r6, #0
   137ac:	orreq	r5, r5, #1
   137b0:	add	r9, r4, #8
   137b4:	ldr	r3, [r4, #44]	; 0x2c
   137b8:	str	r3, [sp, #16]
   137bc:	ldr	r3, [r4, #40]	; 0x28
   137c0:	str	r3, [sp, #12]
   137c4:	str	r9, [sp, #8]
   137c8:	str	r5, [sp, #4]
   137cc:	ldr	r3, [r4]
   137d0:	str	r3, [sp]
   137d4:	str	sl, [sp, #36]	; 0x24
   137d8:	mov	r3, sl
   137dc:	str	r8, [sp, #32]
   137e0:	mov	r2, r8
   137e4:	mov	r1, #0
   137e8:	mov	r0, r1
   137ec:	bl	11cc0 <__assert_fail@plt+0xfe4>
   137f0:	mov	sl, r0
   137f4:	add	r8, r0, #1
   137f8:	mov	r0, r8
   137fc:	bl	14374 <__assert_fail@plt+0x3698>
   13800:	str	r0, [sp, #28]
   13804:	ldr	r3, [r4, #44]	; 0x2c
   13808:	str	r3, [sp, #16]
   1380c:	ldr	r3, [r4, #40]	; 0x28
   13810:	str	r3, [sp, #12]
   13814:	str	r9, [sp, #8]
   13818:	str	r5, [sp, #4]
   1381c:	ldr	r3, [r4]
   13820:	str	r3, [sp]
   13824:	ldr	r3, [sp, #36]	; 0x24
   13828:	ldr	r2, [sp, #32]
   1382c:	mov	r1, r8
   13830:	bl	11cc0 <__assert_fail@plt+0xfe4>
   13834:	str	fp, [r7]
   13838:	cmp	r6, #0
   1383c:	strne	sl, [r6]
   13840:	ldr	r0, [sp, #28]
   13844:	add	sp, sp, #44	; 0x2c
   13848:	ldrd	r4, [sp]
   1384c:	ldrd	r6, [sp, #8]
   13850:	ldrd	r8, [sp, #16]
   13854:	ldrd	sl, [sp, #24]
   13858:	add	sp, sp, #32
   1385c:	pop	{pc}		; (ldr pc, [sp], #4)
   13860:	andeq	r6, r2, r0, lsr r2
   13864:	str	r4, [sp, #-8]!
   13868:	str	lr, [sp, #4]
   1386c:	mov	r3, r2
   13870:	mov	r2, #0
   13874:	bl	13768 <__assert_fail@plt+0x2a8c>
   13878:	ldr	r4, [sp]
   1387c:	add	sp, sp, #4
   13880:	pop	{pc}		; (ldr pc, [sp], #4)
   13884:	strd	r4, [sp, #-24]!	; 0xffffffe8
   13888:	strd	r6, [sp, #8]
   1388c:	str	r8, [sp, #16]
   13890:	str	lr, [sp, #20]
   13894:	movw	r3, #24784	; 0x60d0
   13898:	movt	r3, #2
   1389c:	ldr	r7, [r3]
   138a0:	ldr	r3, [r3, #4]
   138a4:	cmp	r3, #1
   138a8:	ble	138d4 <__assert_fail@plt+0x2bf8>
   138ac:	mov	r4, #1
   138b0:	add	r6, r7, #4
   138b4:	movw	r5, #24784	; 0x60d0
   138b8:	movt	r5, #2
   138bc:	ldr	r0, [r6, r4, lsl #3]
   138c0:	bl	14ac8 <__assert_fail@plt+0x3dec>
   138c4:	add	r4, r4, #1
   138c8:	ldr	r3, [r5, #4]
   138cc:	cmp	r3, r4
   138d0:	bgt	138bc <__assert_fail@plt+0x2be0>
   138d4:	ldr	r0, [r7, #4]
   138d8:	movw	r3, #24880	; 0x6130
   138dc:	movt	r3, #2
   138e0:	cmp	r0, r3
   138e4:	beq	13908 <__assert_fail@plt+0x2c2c>
   138e8:	bl	14ac8 <__assert_fail@plt+0x3dec>
   138ec:	movw	r3, #24784	; 0x60d0
   138f0:	movt	r3, #2
   138f4:	mov	r2, #256	; 0x100
   138f8:	str	r2, [r3, #8]
   138fc:	movw	r2, #24880	; 0x6130
   13900:	movt	r2, #2
   13904:	str	r2, [r3, #12]
   13908:	ldr	r3, [pc, #64]	; 13950 <__assert_fail@plt+0x2c74>
   1390c:	cmp	r7, r3
   13910:	beq	1392c <__assert_fail@plt+0x2c50>
   13914:	mov	r0, r7
   13918:	bl	14ac8 <__assert_fail@plt+0x3dec>
   1391c:	movw	r3, #24784	; 0x60d0
   13920:	movt	r3, #2
   13924:	add	r2, r3, #8
   13928:	str	r2, [r3]
   1392c:	movw	r3, #24784	; 0x60d0
   13930:	movt	r3, #2
   13934:	mov	r2, #1
   13938:	str	r2, [r3, #4]
   1393c:	ldrd	r4, [sp]
   13940:	ldrd	r6, [sp, #8]
   13944:	ldr	r8, [sp, #16]
   13948:	add	sp, sp, #20
   1394c:	pop	{pc}		; (ldr pc, [sp], #4)
   13950:	ldrdeq	r6, [r2], -r8
   13954:	str	r4, [sp, #-8]!
   13958:	str	lr, [sp, #4]
   1395c:	ldr	r3, [pc, #16]	; 13974 <__assert_fail@plt+0x2c98>
   13960:	mvn	r2, #0
   13964:	bl	133b8 <__assert_fail@plt+0x26dc>
   13968:	ldr	r4, [sp]
   1396c:	add	sp, sp, #4
   13970:	pop	{pc}		; (ldr pc, [sp], #4)
   13974:	andeq	r6, r2, r0, lsr r2
   13978:	str	r4, [sp, #-8]!
   1397c:	str	lr, [sp, #4]
   13980:	ldr	r3, [pc, #12]	; 13994 <__assert_fail@plt+0x2cb8>
   13984:	bl	133b8 <__assert_fail@plt+0x26dc>
   13988:	ldr	r4, [sp]
   1398c:	add	sp, sp, #4
   13990:	pop	{pc}		; (ldr pc, [sp], #4)
   13994:	andeq	r6, r2, r0, lsr r2
   13998:	str	r4, [sp, #-8]!
   1399c:	str	lr, [sp, #4]
   139a0:	mov	r1, r0
   139a4:	mov	r0, #0
   139a8:	bl	13954 <__assert_fail@plt+0x2c78>
   139ac:	ldr	r4, [sp]
   139b0:	add	sp, sp, #4
   139b4:	pop	{pc}		; (ldr pc, [sp], #4)
   139b8:	str	r4, [sp, #-8]!
   139bc:	str	lr, [sp, #4]
   139c0:	mov	r2, r1
   139c4:	mov	r1, r0
   139c8:	mov	r0, #0
   139cc:	bl	13978 <__assert_fail@plt+0x2c9c>
   139d0:	ldr	r4, [sp]
   139d4:	add	sp, sp, #4
   139d8:	pop	{pc}		; (ldr pc, [sp], #4)
   139dc:	strd	r4, [sp, #-12]!
   139e0:	str	lr, [sp, #8]
   139e4:	sub	sp, sp, #52	; 0x34
   139e8:	mov	r4, r0
   139ec:	mov	r5, r2
   139f0:	mov	r0, sp
   139f4:	bl	11b2c <__assert_fail@plt+0xe50>
   139f8:	mov	r3, sp
   139fc:	mvn	r2, #0
   13a00:	mov	r1, r5
   13a04:	mov	r0, r4
   13a08:	bl	133b8 <__assert_fail@plt+0x26dc>
   13a0c:	add	sp, sp, #52	; 0x34
   13a10:	ldrd	r4, [sp]
   13a14:	add	sp, sp, #8
   13a18:	pop	{pc}		; (ldr pc, [sp], #4)
   13a1c:	strd	r4, [sp, #-16]!
   13a20:	str	r6, [sp, #8]
   13a24:	str	lr, [sp, #12]
   13a28:	sub	sp, sp, #48	; 0x30
   13a2c:	mov	r4, r0
   13a30:	mov	r5, r2
   13a34:	mov	r6, r3
   13a38:	mov	r0, sp
   13a3c:	bl	11b2c <__assert_fail@plt+0xe50>
   13a40:	mov	r3, sp
   13a44:	mov	r2, r6
   13a48:	mov	r1, r5
   13a4c:	mov	r0, r4
   13a50:	bl	133b8 <__assert_fail@plt+0x26dc>
   13a54:	add	sp, sp, #48	; 0x30
   13a58:	ldrd	r4, [sp]
   13a5c:	ldr	r6, [sp, #8]
   13a60:	add	sp, sp, #12
   13a64:	pop	{pc}		; (ldr pc, [sp], #4)
   13a68:	str	r4, [sp, #-8]!
   13a6c:	str	lr, [sp, #4]
   13a70:	mov	r2, r1
   13a74:	mov	r1, r0
   13a78:	mov	r0, #0
   13a7c:	bl	139dc <__assert_fail@plt+0x2d00>
   13a80:	ldr	r4, [sp]
   13a84:	add	sp, sp, #4
   13a88:	pop	{pc}		; (ldr pc, [sp], #4)
   13a8c:	str	r4, [sp, #-8]!
   13a90:	str	lr, [sp, #4]
   13a94:	mov	r3, r2
   13a98:	mov	r2, r1
   13a9c:	mov	r1, r0
   13aa0:	mov	r0, #0
   13aa4:	bl	13a1c <__assert_fail@plt+0x2d40>
   13aa8:	ldr	r4, [sp]
   13aac:	add	sp, sp, #4
   13ab0:	pop	{pc}		; (ldr pc, [sp], #4)
   13ab4:	strd	r4, [sp, #-12]!
   13ab8:	str	lr, [sp, #8]
   13abc:	sub	sp, sp, #52	; 0x34
   13ac0:	mov	r4, r0
   13ac4:	mov	r5, r1
   13ac8:	mov	r1, r2
   13acc:	ldr	r0, [pc, #92]	; 13b30 <__assert_fail@plt+0x2e54>
   13ad0:	ldrd	r2, [r0]
   13ad4:	strd	r2, [sp]
   13ad8:	ldrd	r2, [r0, #8]
   13adc:	strd	r2, [sp, #8]
   13ae0:	ldrd	r2, [r0, #16]
   13ae4:	strd	r2, [sp, #16]
   13ae8:	ldrd	r2, [r0, #24]
   13aec:	strd	r2, [sp, #24]
   13af0:	ldrd	r2, [r0, #32]
   13af4:	strd	r2, [sp, #32]
   13af8:	ldrd	r2, [r0, #40]	; 0x28
   13afc:	strd	r2, [sp, #40]	; 0x28
   13b00:	mov	r2, #1
   13b04:	mov	r0, sp
   13b08:	bl	1362c <__assert_fail@plt+0x2950>
   13b0c:	mov	r3, sp
   13b10:	mov	r2, r5
   13b14:	mov	r1, r4
   13b18:	mov	r0, #0
   13b1c:	bl	133b8 <__assert_fail@plt+0x26dc>
   13b20:	add	sp, sp, #52	; 0x34
   13b24:	ldrd	r4, [sp]
   13b28:	add	sp, sp, #8
   13b2c:	pop	{pc}		; (ldr pc, [sp], #4)
   13b30:	andeq	r6, r2, r0, lsr r2
   13b34:	str	r4, [sp, #-8]!
   13b38:	str	lr, [sp, #4]
   13b3c:	mov	r2, r1
   13b40:	mvn	r1, #0
   13b44:	bl	13ab4 <__assert_fail@plt+0x2dd8>
   13b48:	ldr	r4, [sp]
   13b4c:	add	sp, sp, #4
   13b50:	pop	{pc}		; (ldr pc, [sp], #4)
   13b54:	str	r4, [sp, #-8]!
   13b58:	str	lr, [sp, #4]
   13b5c:	mov	r1, #58	; 0x3a
   13b60:	bl	13b34 <__assert_fail@plt+0x2e58>
   13b64:	ldr	r4, [sp]
   13b68:	add	sp, sp, #4
   13b6c:	pop	{pc}		; (ldr pc, [sp], #4)
   13b70:	str	r4, [sp, #-8]!
   13b74:	str	lr, [sp, #4]
   13b78:	mov	r2, #58	; 0x3a
   13b7c:	bl	13ab4 <__assert_fail@plt+0x2dd8>
   13b80:	ldr	r4, [sp]
   13b84:	add	sp, sp, #4
   13b88:	pop	{pc}		; (ldr pc, [sp], #4)
   13b8c:	strd	r4, [sp, #-12]!
   13b90:	str	lr, [sp, #8]
   13b94:	sub	sp, sp, #100	; 0x64
   13b98:	mov	r4, r0
   13b9c:	mov	r5, r2
   13ba0:	mov	r0, sp
   13ba4:	bl	11b2c <__assert_fail@plt+0xe50>
   13ba8:	ldrd	r2, [sp]
   13bac:	strd	r2, [sp, #48]	; 0x30
   13bb0:	ldrd	r2, [sp, #8]
   13bb4:	strd	r2, [sp, #56]	; 0x38
   13bb8:	ldrd	r2, [sp, #16]
   13bbc:	strd	r2, [sp, #64]	; 0x40
   13bc0:	ldrd	r2, [sp, #24]
   13bc4:	strd	r2, [sp, #72]	; 0x48
   13bc8:	ldrd	r2, [sp, #32]
   13bcc:	strd	r2, [sp, #80]	; 0x50
   13bd0:	ldrd	r2, [sp, #40]	; 0x28
   13bd4:	strd	r2, [sp, #88]	; 0x58
   13bd8:	mov	r2, #1
   13bdc:	mov	r1, #58	; 0x3a
   13be0:	add	r0, sp, #48	; 0x30
   13be4:	bl	1362c <__assert_fail@plt+0x2950>
   13be8:	add	r3, sp, #48	; 0x30
   13bec:	mvn	r2, #0
   13bf0:	mov	r1, r5
   13bf4:	mov	r0, r4
   13bf8:	bl	133b8 <__assert_fail@plt+0x26dc>
   13bfc:	add	sp, sp, #100	; 0x64
   13c00:	ldrd	r4, [sp]
   13c04:	add	sp, sp, #8
   13c08:	pop	{pc}		; (ldr pc, [sp], #4)
   13c0c:	strd	r4, [sp, #-20]!	; 0xffffffec
   13c10:	strd	r6, [sp, #8]
   13c14:	str	lr, [sp, #16]
   13c18:	sub	sp, sp, #52	; 0x34
   13c1c:	mov	r4, r0
   13c20:	mov	r5, r3
   13c24:	ldr	r3, [pc, #92]	; 13c88 <__assert_fail@plt+0x2fac>
   13c28:	ldrd	r6, [r3]
   13c2c:	strd	r6, [sp]
   13c30:	ldrd	r6, [r3, #8]
   13c34:	strd	r6, [sp, #8]
   13c38:	ldrd	r6, [r3, #16]
   13c3c:	strd	r6, [sp, #16]
   13c40:	ldrd	r6, [r3, #24]
   13c44:	strd	r6, [sp, #24]
   13c48:	ldrd	r6, [r3, #32]
   13c4c:	strd	r6, [sp, #32]
   13c50:	ldrd	r6, [r3, #40]	; 0x28
   13c54:	strd	r6, [sp, #40]	; 0x28
   13c58:	mov	r0, sp
   13c5c:	bl	13688 <__assert_fail@plt+0x29ac>
   13c60:	mov	r3, sp
   13c64:	ldr	r2, [sp, #72]	; 0x48
   13c68:	mov	r1, r5
   13c6c:	mov	r0, r4
   13c70:	bl	133b8 <__assert_fail@plt+0x26dc>
   13c74:	add	sp, sp, #52	; 0x34
   13c78:	ldrd	r4, [sp]
   13c7c:	ldrd	r6, [sp, #8]
   13c80:	add	sp, sp, #16
   13c84:	pop	{pc}		; (ldr pc, [sp], #4)
   13c88:	andeq	r6, r2, r0, lsr r2
   13c8c:	push	{lr}		; (str lr, [sp, #-4]!)
   13c90:	sub	sp, sp, #12
   13c94:	mvn	ip, #0
   13c98:	str	ip, [sp]
   13c9c:	bl	13c0c <__assert_fail@plt+0x2f30>
   13ca0:	add	sp, sp, #12
   13ca4:	pop	{pc}		; (ldr pc, [sp], #4)
   13ca8:	str	r4, [sp, #-8]!
   13cac:	str	lr, [sp, #4]
   13cb0:	mov	r3, r2
   13cb4:	mov	r2, r1
   13cb8:	mov	r1, r0
   13cbc:	mov	r0, #0
   13cc0:	bl	13c8c <__assert_fail@plt+0x2fb0>
   13cc4:	ldr	r4, [sp]
   13cc8:	add	sp, sp, #4
   13ccc:	pop	{pc}		; (ldr pc, [sp], #4)
   13cd0:	push	{lr}		; (str lr, [sp, #-4]!)
   13cd4:	sub	sp, sp, #12
   13cd8:	str	r3, [sp]
   13cdc:	mov	r3, r2
   13ce0:	mov	r2, r1
   13ce4:	mov	r1, r0
   13ce8:	mov	r0, #0
   13cec:	bl	13c0c <__assert_fail@plt+0x2f30>
   13cf0:	add	sp, sp, #12
   13cf4:	pop	{pc}		; (ldr pc, [sp], #4)
   13cf8:	str	r4, [sp, #-8]!
   13cfc:	str	lr, [sp, #4]
   13d00:	ldr	r3, [pc, #12]	; 13d14 <__assert_fail@plt+0x3038>
   13d04:	bl	133b8 <__assert_fail@plt+0x26dc>
   13d08:	ldr	r4, [sp]
   13d0c:	add	sp, sp, #4
   13d10:	pop	{pc}		; (ldr pc, [sp], #4)
   13d14:	andeq	r6, r2, r0, ror #1
   13d18:	str	r4, [sp, #-8]!
   13d1c:	str	lr, [sp, #4]
   13d20:	mov	r2, r1
   13d24:	mov	r1, r0
   13d28:	mov	r0, #0
   13d2c:	bl	13cf8 <__assert_fail@plt+0x301c>
   13d30:	ldr	r4, [sp]
   13d34:	add	sp, sp, #4
   13d38:	pop	{pc}		; (ldr pc, [sp], #4)
   13d3c:	str	r4, [sp, #-8]!
   13d40:	str	lr, [sp, #4]
   13d44:	mvn	r2, #0
   13d48:	bl	13cf8 <__assert_fail@plt+0x301c>
   13d4c:	ldr	r4, [sp]
   13d50:	add	sp, sp, #4
   13d54:	pop	{pc}		; (ldr pc, [sp], #4)
   13d58:	str	r4, [sp, #-8]!
   13d5c:	str	lr, [sp, #4]
   13d60:	mov	r1, r0
   13d64:	mov	r0, #0
   13d68:	bl	13d3c <__assert_fail@plt+0x3060>
   13d6c:	ldr	r4, [sp]
   13d70:	add	sp, sp, #4
   13d74:	pop	{pc}		; (ldr pc, [sp], #4)
   13d78:	strd	r4, [sp, #-16]!
   13d7c:	str	r6, [sp, #8]
   13d80:	str	lr, [sp, #12]
   13d84:	sub	sp, sp, #32
   13d88:	mov	r4, r0
   13d8c:	ldr	r5, [sp, #48]	; 0x30
   13d90:	ldr	r6, [sp, #52]	; 0x34
   13d94:	cmp	r1, #0
   13d98:	beq	13e64 <__assert_fail@plt+0x3188>
   13d9c:	str	r3, [sp, #4]
   13da0:	str	r2, [sp]
   13da4:	mov	r3, r1
   13da8:	movw	r2, #22056	; 0x5628
   13dac:	movt	r2, #1
   13db0:	mov	r1, #1
   13db4:	bl	10c64 <__fprintf_chk@plt>
   13db8:	mov	r2, #5
   13dbc:	movw	r1, #22076	; 0x563c
   13dc0:	movt	r1, #1
   13dc4:	mov	r0, #0
   13dc8:	bl	10b50 <dcgettext@plt>
   13dcc:	movw	r3, #2022	; 0x7e6
   13dd0:	str	r3, [sp]
   13dd4:	mov	r3, r0
   13dd8:	movw	r2, #22804	; 0x5914
   13ddc:	movt	r2, #1
   13de0:	mov	r1, #1
   13de4:	mov	r0, r4
   13de8:	bl	10c64 <__fprintf_chk@plt>
   13dec:	mov	r1, r4
   13df0:	mov	r0, #10
   13df4:	bl	10b44 <fputc_unlocked@plt>
   13df8:	mov	r2, #5
   13dfc:	movw	r1, #22080	; 0x5640
   13e00:	movt	r1, #1
   13e04:	mov	r0, #0
   13e08:	bl	10b50 <dcgettext@plt>
   13e0c:	movw	r3, #22252	; 0x56ec
   13e10:	movt	r3, #1
   13e14:	mov	r2, r0
   13e18:	mov	r1, #1
   13e1c:	mov	r0, r4
   13e20:	bl	10c64 <__fprintf_chk@plt>
   13e24:	mov	r1, r4
   13e28:	mov	r0, #10
   13e2c:	bl	10b44 <fputc_unlocked@plt>
   13e30:	cmp	r6, #9
   13e34:	ldrls	pc, [pc, r6, lsl #2]
   13e38:	b	1413c <__assert_fail@plt+0x3460>
   13e3c:	andeq	r3, r1, r8, lsr #29
   13e40:	andeq	r3, r1, r0, lsl #29
   13e44:			; <UNDEFINED> instruction: 0x00013ebc
   13e48:	strdeq	r3, [r1], -r0
   13e4c:	andeq	r3, r1, ip, lsr #30
   13e50:	andeq	r3, r1, r0, ror pc
   13e54:			; <UNDEFINED> instruction: 0x00013fbc
   13e58:	andeq	r4, r1, r0, lsl r0
   13e5c:	andeq	r4, r1, ip, rrx
   13e60:	ldrdeq	r4, [r1], -r0
   13e64:	str	r3, [sp]
   13e68:	mov	r3, r2
   13e6c:	movw	r2, #22068	; 0x5634
   13e70:	movt	r2, #1
   13e74:	mov	r1, #1
   13e78:	bl	10c64 <__fprintf_chk@plt>
   13e7c:	b	13db8 <__assert_fail@plt+0x30dc>
   13e80:	mov	r2, #5
   13e84:	movw	r1, #22288	; 0x5710
   13e88:	movt	r1, #1
   13e8c:	mov	r0, #0
   13e90:	bl	10b50 <dcgettext@plt>
   13e94:	ldr	r3, [r5]
   13e98:	mov	r2, r0
   13e9c:	mov	r1, #1
   13ea0:	mov	r0, r4
   13ea4:	bl	10c64 <__fprintf_chk@plt>
   13ea8:	add	sp, sp, #32
   13eac:	ldrd	r4, [sp]
   13eb0:	ldr	r6, [sp, #8]
   13eb4:	add	sp, sp, #12
   13eb8:	pop	{pc}		; (ldr pc, [sp], #4)
   13ebc:	mov	r2, #5
   13ec0:	movw	r1, #22304	; 0x5720
   13ec4:	movt	r1, #1
   13ec8:	mov	r0, #0
   13ecc:	bl	10b50 <dcgettext@plt>
   13ed0:	ldr	r3, [r5, #4]
   13ed4:	str	r3, [sp]
   13ed8:	ldr	r3, [r5]
   13edc:	mov	r2, r0
   13ee0:	mov	r1, #1
   13ee4:	mov	r0, r4
   13ee8:	bl	10c64 <__fprintf_chk@plt>
   13eec:	b	13ea8 <__assert_fail@plt+0x31cc>
   13ef0:	mov	r2, #5
   13ef4:	movw	r1, #22328	; 0x5738
   13ef8:	movt	r1, #1
   13efc:	mov	r0, #0
   13f00:	bl	10b50 <dcgettext@plt>
   13f04:	ldr	r3, [r5, #8]
   13f08:	str	r3, [sp, #4]
   13f0c:	ldr	r3, [r5, #4]
   13f10:	str	r3, [sp]
   13f14:	ldr	r3, [r5]
   13f18:	mov	r2, r0
   13f1c:	mov	r1, #1
   13f20:	mov	r0, r4
   13f24:	bl	10c64 <__fprintf_chk@plt>
   13f28:	b	13ea8 <__assert_fail@plt+0x31cc>
   13f2c:	mov	r2, #5
   13f30:	movw	r1, #22356	; 0x5754
   13f34:	movt	r1, #1
   13f38:	mov	r0, #0
   13f3c:	bl	10b50 <dcgettext@plt>
   13f40:	ldr	r3, [r5, #12]
   13f44:	str	r3, [sp, #8]
   13f48:	ldr	r3, [r5, #8]
   13f4c:	str	r3, [sp, #4]
   13f50:	ldr	r3, [r5, #4]
   13f54:	str	r3, [sp]
   13f58:	ldr	r3, [r5]
   13f5c:	mov	r2, r0
   13f60:	mov	r1, #1
   13f64:	mov	r0, r4
   13f68:	bl	10c64 <__fprintf_chk@plt>
   13f6c:	b	13ea8 <__assert_fail@plt+0x31cc>
   13f70:	mov	r2, #5
   13f74:	movw	r1, #22388	; 0x5774
   13f78:	movt	r1, #1
   13f7c:	mov	r0, #0
   13f80:	bl	10b50 <dcgettext@plt>
   13f84:	ldr	r3, [r5, #16]
   13f88:	str	r3, [sp, #12]
   13f8c:	ldr	r3, [r5, #12]
   13f90:	str	r3, [sp, #8]
   13f94:	ldr	r3, [r5, #8]
   13f98:	str	r3, [sp, #4]
   13f9c:	ldr	r3, [r5, #4]
   13fa0:	str	r3, [sp]
   13fa4:	ldr	r3, [r5]
   13fa8:	mov	r2, r0
   13fac:	mov	r1, #1
   13fb0:	mov	r0, r4
   13fb4:	bl	10c64 <__fprintf_chk@plt>
   13fb8:	b	13ea8 <__assert_fail@plt+0x31cc>
   13fbc:	mov	r2, #5
   13fc0:	movw	r1, #22424	; 0x5798
   13fc4:	movt	r1, #1
   13fc8:	mov	r0, #0
   13fcc:	bl	10b50 <dcgettext@plt>
   13fd0:	ldr	r3, [r5, #20]
   13fd4:	str	r3, [sp, #16]
   13fd8:	ldr	r3, [r5, #16]
   13fdc:	str	r3, [sp, #12]
   13fe0:	ldr	r3, [r5, #12]
   13fe4:	str	r3, [sp, #8]
   13fe8:	ldr	r3, [r5, #8]
   13fec:	str	r3, [sp, #4]
   13ff0:	ldr	r3, [r5, #4]
   13ff4:	str	r3, [sp]
   13ff8:	ldr	r3, [r5]
   13ffc:	mov	r2, r0
   14000:	mov	r1, #1
   14004:	mov	r0, r4
   14008:	bl	10c64 <__fprintf_chk@plt>
   1400c:	b	13ea8 <__assert_fail@plt+0x31cc>
   14010:	mov	r2, #5
   14014:	movw	r1, #22464	; 0x57c0
   14018:	movt	r1, #1
   1401c:	mov	r0, #0
   14020:	bl	10b50 <dcgettext@plt>
   14024:	ldr	r3, [r5, #24]
   14028:	str	r3, [sp, #20]
   1402c:	ldr	r3, [r5, #20]
   14030:	str	r3, [sp, #16]
   14034:	ldr	r3, [r5, #16]
   14038:	str	r3, [sp, #12]
   1403c:	ldr	r3, [r5, #12]
   14040:	str	r3, [sp, #8]
   14044:	ldr	r3, [r5, #8]
   14048:	str	r3, [sp, #4]
   1404c:	ldr	r3, [r5, #4]
   14050:	str	r3, [sp]
   14054:	ldr	r3, [r5]
   14058:	mov	r2, r0
   1405c:	mov	r1, #1
   14060:	mov	r0, r4
   14064:	bl	10c64 <__fprintf_chk@plt>
   14068:	b	13ea8 <__assert_fail@plt+0x31cc>
   1406c:	mov	r2, #5
   14070:	movw	r1, #22508	; 0x57ec
   14074:	movt	r1, #1
   14078:	mov	r0, #0
   1407c:	bl	10b50 <dcgettext@plt>
   14080:	ldr	r3, [r5, #28]
   14084:	str	r3, [sp, #24]
   14088:	ldr	r3, [r5, #24]
   1408c:	str	r3, [sp, #20]
   14090:	ldr	r3, [r5, #20]
   14094:	str	r3, [sp, #16]
   14098:	ldr	r3, [r5, #16]
   1409c:	str	r3, [sp, #12]
   140a0:	ldr	r3, [r5, #12]
   140a4:	str	r3, [sp, #8]
   140a8:	ldr	r3, [r5, #8]
   140ac:	str	r3, [sp, #4]
   140b0:	ldr	r3, [r5, #4]
   140b4:	str	r3, [sp]
   140b8:	ldr	r3, [r5]
   140bc:	mov	r2, r0
   140c0:	mov	r1, #1
   140c4:	mov	r0, r4
   140c8:	bl	10c64 <__fprintf_chk@plt>
   140cc:	b	13ea8 <__assert_fail@plt+0x31cc>
   140d0:	mov	r2, #5
   140d4:	movw	r1, #22556	; 0x581c
   140d8:	movt	r1, #1
   140dc:	mov	r0, #0
   140e0:	bl	10b50 <dcgettext@plt>
   140e4:	ldr	r3, [r5, #32]
   140e8:	str	r3, [sp, #28]
   140ec:	ldr	r3, [r5, #28]
   140f0:	str	r3, [sp, #24]
   140f4:	ldr	r3, [r5, #24]
   140f8:	str	r3, [sp, #20]
   140fc:	ldr	r3, [r5, #20]
   14100:	str	r3, [sp, #16]
   14104:	ldr	r3, [r5, #16]
   14108:	str	r3, [sp, #12]
   1410c:	ldr	r3, [r5, #12]
   14110:	str	r3, [sp, #8]
   14114:	ldr	r3, [r5, #8]
   14118:	str	r3, [sp, #4]
   1411c:	ldr	r3, [r5, #4]
   14120:	str	r3, [sp]
   14124:	ldr	r3, [r5]
   14128:	mov	r2, r0
   1412c:	mov	r1, #1
   14130:	mov	r0, r4
   14134:	bl	10c64 <__fprintf_chk@plt>
   14138:	b	13ea8 <__assert_fail@plt+0x31cc>
   1413c:	mov	r2, #5
   14140:	movw	r1, #22608	; 0x5850
   14144:	movt	r1, #1
   14148:	mov	r0, #0
   1414c:	bl	10b50 <dcgettext@plt>
   14150:	ldr	r3, [r5, #32]
   14154:	str	r3, [sp, #28]
   14158:	ldr	r3, [r5, #28]
   1415c:	str	r3, [sp, #24]
   14160:	ldr	r3, [r5, #24]
   14164:	str	r3, [sp, #20]
   14168:	ldr	r3, [r5, #20]
   1416c:	str	r3, [sp, #16]
   14170:	ldr	r3, [r5, #16]
   14174:	str	r3, [sp, #12]
   14178:	ldr	r3, [r5, #12]
   1417c:	str	r3, [sp, #8]
   14180:	ldr	r3, [r5, #8]
   14184:	str	r3, [sp, #4]
   14188:	ldr	r3, [r5, #4]
   1418c:	str	r3, [sp]
   14190:	ldr	r3, [r5]
   14194:	mov	r2, r0
   14198:	mov	r1, #1
   1419c:	mov	r0, r4
   141a0:	bl	10c64 <__fprintf_chk@plt>
   141a4:	b	13ea8 <__assert_fail@plt+0x31cc>
   141a8:	strd	r4, [sp, #-12]!
   141ac:	str	lr, [sp, #8]
   141b0:	sub	sp, sp, #12
   141b4:	ldr	r5, [sp, #24]
   141b8:	ldr	ip, [r5]
   141bc:	cmp	ip, #0
   141c0:	beq	141f8 <__assert_fail@plt+0x351c>
   141c4:	mov	lr, r5
   141c8:	mov	ip, #0
   141cc:	add	ip, ip, #1
   141d0:	ldr	r4, [lr, #4]!
   141d4:	cmp	r4, #0
   141d8:	bne	141cc <__assert_fail@plt+0x34f0>
   141dc:	str	ip, [sp, #4]
   141e0:	str	r5, [sp]
   141e4:	bl	13d78 <__assert_fail@plt+0x309c>
   141e8:	add	sp, sp, #12
   141ec:	ldrd	r4, [sp]
   141f0:	add	sp, sp, #8
   141f4:	pop	{pc}		; (ldr pc, [sp], #4)
   141f8:	mov	ip, #0
   141fc:	b	141dc <__assert_fail@plt+0x3500>
   14200:	strd	r4, [sp, #-12]!
   14204:	str	lr, [sp, #8]
   14208:	sub	sp, sp, #52	; 0x34
   1420c:	ldr	r5, [sp, #64]	; 0x40
   14210:	add	r4, sp, #8
   14214:	mov	ip, #0
   14218:	ldr	lr, [r5], #4
   1421c:	str	lr, [r4], #4
   14220:	cmp	lr, #0
   14224:	beq	14234 <__assert_fail@plt+0x3558>
   14228:	add	ip, ip, #1
   1422c:	cmp	ip, #10
   14230:	bne	14218 <__assert_fail@plt+0x353c>
   14234:	str	ip, [sp, #4]
   14238:	add	ip, sp, #8
   1423c:	str	ip, [sp]
   14240:	bl	13d78 <__assert_fail@plt+0x309c>
   14244:	add	sp, sp, #52	; 0x34
   14248:	ldrd	r4, [sp]
   1424c:	add	sp, sp, #8
   14250:	pop	{pc}		; (ldr pc, [sp], #4)
   14254:	push	{r3}		; (str r3, [sp, #-4]!)
   14258:	push	{lr}		; (str lr, [sp, #-4]!)
   1425c:	sub	sp, sp, #16
   14260:	add	r3, sp, #24
   14264:	str	r3, [sp, #12]
   14268:	str	r3, [sp]
   1426c:	ldr	r3, [sp, #20]
   14270:	bl	14200 <__assert_fail@plt+0x3524>
   14274:	add	sp, sp, #16
   14278:	pop	{lr}		; (ldr lr, [sp], #4)
   1427c:	add	sp, sp, #4
   14280:	bx	lr
   14284:	str	r4, [sp, #-8]!
   14288:	str	lr, [sp, #4]
   1428c:	movw	r3, #24860	; 0x611c
   14290:	movt	r3, #2
   14294:	ldr	r1, [r3]
   14298:	mov	r0, #10
   1429c:	bl	10b44 <fputc_unlocked@plt>
   142a0:	mov	r2, #5
   142a4:	movw	r1, #22668	; 0x588c
   142a8:	movt	r1, #1
   142ac:	mov	r0, #0
   142b0:	bl	10b50 <dcgettext@plt>
   142b4:	movw	r2, #22688	; 0x58a0
   142b8:	movt	r2, #1
   142bc:	mov	r1, r0
   142c0:	mov	r0, #1
   142c4:	bl	10c4c <__printf_chk@plt>
   142c8:	mov	r2, #5
   142cc:	movw	r1, #22712	; 0x58b8
   142d0:	movt	r1, #1
   142d4:	mov	r0, #0
   142d8:	bl	10b50 <dcgettext@plt>
   142dc:	movw	r3, #21328	; 0x5350
   142e0:	movt	r3, #1
   142e4:	movw	r2, #21368	; 0x5378
   142e8:	movt	r2, #1
   142ec:	mov	r1, r0
   142f0:	mov	r0, #1
   142f4:	bl	10c4c <__printf_chk@plt>
   142f8:	mov	r2, #5
   142fc:	movw	r1, #22732	; 0x58cc
   14300:	movt	r1, #1
   14304:	mov	r0, #0
   14308:	bl	10b50 <dcgettext@plt>
   1430c:	movw	r2, #22772	; 0x58f4
   14310:	movt	r2, #1
   14314:	mov	r1, r0
   14318:	mov	r0, #1
   1431c:	bl	10c4c <__printf_chk@plt>
   14320:	ldr	r4, [sp]
   14324:	add	sp, sp, #4
   14328:	pop	{pc}		; (ldr pc, [sp], #4)
   1432c:	str	r4, [sp, #-8]!
   14330:	str	lr, [sp, #4]
   14334:	bl	14878 <__assert_fail@plt+0x3b9c>
   14338:	cmp	r0, #0
   1433c:	beq	1434c <__assert_fail@plt+0x3670>
   14340:	ldr	r4, [sp]
   14344:	add	sp, sp, #4
   14348:	pop	{pc}		; (ldr pc, [sp], #4)
   1434c:	bl	147c0 <__assert_fail@plt+0x3ae4>
   14350:	str	r4, [sp, #-8]!
   14354:	str	lr, [sp, #4]
   14358:	bl	14878 <__assert_fail@plt+0x3b9c>
   1435c:	cmp	r0, #0
   14360:	beq	14370 <__assert_fail@plt+0x3694>
   14364:	ldr	r4, [sp]
   14368:	add	sp, sp, #4
   1436c:	pop	{pc}		; (ldr pc, [sp], #4)
   14370:	bl	147c0 <__assert_fail@plt+0x3ae4>
   14374:	str	r4, [sp, #-8]!
   14378:	str	lr, [sp, #4]
   1437c:	bl	1432c <__assert_fail@plt+0x3650>
   14380:	ldr	r4, [sp]
   14384:	add	sp, sp, #4
   14388:	pop	{pc}		; (ldr pc, [sp], #4)
   1438c:	strd	r4, [sp, #-16]!
   14390:	str	r6, [sp, #8]
   14394:	str	lr, [sp, #12]
   14398:	mov	r5, r0
   1439c:	mov	r4, r1
   143a0:	bl	148b4 <__assert_fail@plt+0x3bd8>
   143a4:	cmp	r0, #0
   143a8:	beq	143bc <__assert_fail@plt+0x36e0>
   143ac:	ldrd	r4, [sp]
   143b0:	ldr	r6, [sp, #8]
   143b4:	add	sp, sp, #12
   143b8:	pop	{pc}		; (ldr pc, [sp], #4)
   143bc:	adds	r4, r4, #0
   143c0:	movne	r4, #1
   143c4:	cmp	r5, #0
   143c8:	moveq	r4, #1
   143cc:	cmp	r4, #0
   143d0:	beq	143ac <__assert_fail@plt+0x36d0>
   143d4:	bl	147c0 <__assert_fail@plt+0x3ae4>
   143d8:	str	r4, [sp, #-8]!
   143dc:	str	lr, [sp, #4]
   143e0:	cmp	r1, #0
   143e4:	orreq	r1, r1, #1
   143e8:	bl	148b4 <__assert_fail@plt+0x3bd8>
   143ec:	cmp	r0, #0
   143f0:	beq	14400 <__assert_fail@plt+0x3724>
   143f4:	ldr	r4, [sp]
   143f8:	add	sp, sp, #4
   143fc:	pop	{pc}		; (ldr pc, [sp], #4)
   14400:	bl	147c0 <__assert_fail@plt+0x3ae4>
   14404:	strd	r4, [sp, #-16]!
   14408:	str	r6, [sp, #8]
   1440c:	str	lr, [sp, #12]
   14410:	mov	r4, r0
   14414:	mov	r6, r1
   14418:	mov	r5, r2
   1441c:	bl	14c9c <__assert_fail@plt+0x3fc0>
   14420:	cmp	r0, #0
   14424:	beq	14438 <__assert_fail@plt+0x375c>
   14428:	ldrd	r4, [sp]
   1442c:	ldr	r6, [sp, #8]
   14430:	add	sp, sp, #12
   14434:	pop	{pc}		; (ldr pc, [sp], #4)
   14438:	cmp	r4, #0
   1443c:	beq	1444c <__assert_fail@plt+0x3770>
   14440:	cmp	r6, #0
   14444:	cmpne	r5, #0
   14448:	beq	14428 <__assert_fail@plt+0x374c>
   1444c:	bl	147c0 <__assert_fail@plt+0x3ae4>
   14450:	str	r4, [sp, #-8]!
   14454:	str	lr, [sp, #4]
   14458:	bl	14404 <__assert_fail@plt+0x3728>
   1445c:	ldr	r4, [sp]
   14460:	add	sp, sp, #4
   14464:	pop	{pc}		; (ldr pc, [sp], #4)
   14468:	str	r4, [sp, #-8]!
   1446c:	str	lr, [sp, #4]
   14470:	mov	ip, r1
   14474:	mov	r3, r2
   14478:	cmp	r2, #0
   1447c:	cmpne	r1, #0
   14480:	moveq	r3, #1
   14484:	moveq	ip, r3
   14488:	mov	r2, r3
   1448c:	mov	r1, ip
   14490:	bl	14c9c <__assert_fail@plt+0x3fc0>
   14494:	cmp	r0, #0
   14498:	beq	144a8 <__assert_fail@plt+0x37cc>
   1449c:	ldr	r4, [sp]
   144a0:	add	sp, sp, #4
   144a4:	pop	{pc}		; (ldr pc, [sp], #4)
   144a8:	bl	147c0 <__assert_fail@plt+0x3ae4>
   144ac:	str	r4, [sp, #-8]!
   144b0:	str	lr, [sp, #4]
   144b4:	mov	r2, r1
   144b8:	mov	r1, r0
   144bc:	mov	r0, #0
   144c0:	bl	14404 <__assert_fail@plt+0x3728>
   144c4:	ldr	r4, [sp]
   144c8:	add	sp, sp, #4
   144cc:	pop	{pc}		; (ldr pc, [sp], #4)
   144d0:	str	r4, [sp, #-8]!
   144d4:	str	lr, [sp, #4]
   144d8:	mov	r2, r1
   144dc:	mov	r1, r0
   144e0:	mov	r0, #0
   144e4:	bl	14468 <__assert_fail@plt+0x378c>
   144e8:	ldr	r4, [sp]
   144ec:	add	sp, sp, #4
   144f0:	pop	{pc}		; (ldr pc, [sp], #4)
   144f4:	strd	r4, [sp, #-16]!
   144f8:	str	r6, [sp, #8]
   144fc:	str	lr, [sp, #12]
   14500:	mov	r5, r1
   14504:	ldr	r4, [r1]
   14508:	cmp	r0, #0
   1450c:	beq	1453c <__assert_fail@plt+0x3860>
   14510:	lsr	r3, r4, #1
   14514:	add	r3, r3, #1
   14518:	adds	r4, r4, r3
   1451c:	bcs	14558 <__assert_fail@plt+0x387c>
   14520:	mov	r1, r4
   14524:	bl	14404 <__assert_fail@plt+0x3728>
   14528:	str	r4, [r5]
   1452c:	ldrd	r4, [sp]
   14530:	ldr	r6, [sp, #8]
   14534:	add	sp, sp, #12
   14538:	pop	{pc}		; (ldr pc, [sp], #4)
   1453c:	cmp	r4, #0
   14540:	bne	14520 <__assert_fail@plt+0x3844>
   14544:	mov	r4, #64	; 0x40
   14548:	udiv	r4, r4, r2
   1454c:	cmp	r2, #64	; 0x40
   14550:	addhi	r4, r4, #1
   14554:	b	14520 <__assert_fail@plt+0x3844>
   14558:	bl	147c0 <__assert_fail@plt+0x3ae4>
   1455c:	str	r4, [sp, #-8]!
   14560:	str	lr, [sp, #4]
   14564:	mov	r2, #1
   14568:	bl	144f4 <__assert_fail@plt+0x3818>
   1456c:	ldr	r4, [sp]
   14570:	add	sp, sp, #4
   14574:	pop	{pc}		; (ldr pc, [sp], #4)
   14578:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1457c:	strd	r6, [sp, #8]
   14580:	str	r8, [sp, #16]
   14584:	str	lr, [sp, #20]
   14588:	mov	r5, r1
   1458c:	ldr	lr, [sp, #24]
   14590:	ldr	ip, [r1]
   14594:	asr	r4, ip, #1
   14598:	adds	r4, ip, r4
   1459c:	movvs	r1, #1
   145a0:	movvc	r1, #0
   145a4:	cmp	r1, #0
   145a8:	mvnne	r4, #-2147483648	; 0x80000000
   145ac:	mvn	r8, r3
   145b0:	lsr	r8, r8, #31
   145b4:	cmp	r3, r4
   145b8:	movge	r1, #0
   145bc:	andlt	r1, r8, #1
   145c0:	cmp	r1, #0
   145c4:	movne	r4, r3
   145c8:	smull	r6, r7, r4, lr
   145cc:	asr	r1, r6, #31
   145d0:	cmp	r1, r7
   145d4:	bne	145ec <__assert_fail@plt+0x3910>
   145d8:	mov	r1, r6
   145dc:	cmp	r6, #63	; 0x3f
   145e0:	movle	r1, #64	; 0x40
   145e4:	ble	145f0 <__assert_fail@plt+0x3914>
   145e8:	b	145fc <__assert_fail@plt+0x3920>
   145ec:	mvn	r1, #-2147483648	; 0x80000000
   145f0:	sdiv	r4, r1, lr
   145f4:	mls	r6, lr, r4, r1
   145f8:	sub	r1, r1, r6
   145fc:	cmp	r0, #0
   14600:	moveq	r6, #0
   14604:	streq	r6, [r5]
   14608:	sub	r6, r4, ip
   1460c:	cmp	r6, r2
   14610:	bge	14648 <__assert_fail@plt+0x396c>
   14614:	adds	r2, ip, r2
   14618:	mov	r4, r2
   1461c:	bvs	14664 <__assert_fail@plt+0x3988>
   14620:	cmp	r2, r3
   14624:	movle	r3, #0
   14628:	andgt	r3, r8, #1
   1462c:	cmp	r3, #0
   14630:	bne	14664 <__assert_fail@plt+0x3988>
   14634:	smull	r2, r3, r2, lr
   14638:	asr	ip, r2, #31
   1463c:	mov	r1, r2
   14640:	cmp	ip, r3
   14644:	bne	14664 <__assert_fail@plt+0x3988>
   14648:	bl	1438c <__assert_fail@plt+0x36b0>
   1464c:	str	r4, [r5]
   14650:	ldrd	r4, [sp]
   14654:	ldrd	r6, [sp, #8]
   14658:	ldr	r8, [sp, #16]
   1465c:	add	sp, sp, #20
   14660:	pop	{pc}		; (ldr pc, [sp], #4)
   14664:	bl	147c0 <__assert_fail@plt+0x3ae4>
   14668:	str	r4, [sp, #-8]!
   1466c:	str	lr, [sp, #4]
   14670:	bl	14804 <__assert_fail@plt+0x3b28>
   14674:	cmp	r0, #0
   14678:	beq	14688 <__assert_fail@plt+0x39ac>
   1467c:	ldr	r4, [sp]
   14680:	add	sp, sp, #4
   14684:	pop	{pc}		; (ldr pc, [sp], #4)
   14688:	bl	147c0 <__assert_fail@plt+0x3ae4>
   1468c:	str	r4, [sp, #-8]!
   14690:	str	lr, [sp, #4]
   14694:	mov	r1, #1
   14698:	bl	14668 <__assert_fail@plt+0x398c>
   1469c:	ldr	r4, [sp]
   146a0:	add	sp, sp, #4
   146a4:	pop	{pc}		; (ldr pc, [sp], #4)
   146a8:	str	r4, [sp, #-8]!
   146ac:	str	lr, [sp, #4]
   146b0:	bl	14804 <__assert_fail@plt+0x3b28>
   146b4:	cmp	r0, #0
   146b8:	beq	146c8 <__assert_fail@plt+0x39ec>
   146bc:	ldr	r4, [sp]
   146c0:	add	sp, sp, #4
   146c4:	pop	{pc}		; (ldr pc, [sp], #4)
   146c8:	bl	147c0 <__assert_fail@plt+0x3ae4>
   146cc:	str	r4, [sp, #-8]!
   146d0:	str	lr, [sp, #4]
   146d4:	mov	r1, #1
   146d8:	bl	146a8 <__assert_fail@plt+0x39cc>
   146dc:	ldr	r4, [sp]
   146e0:	add	sp, sp, #4
   146e4:	pop	{pc}		; (ldr pc, [sp], #4)
   146e8:	strd	r4, [sp, #-16]!
   146ec:	str	r6, [sp, #8]
   146f0:	str	lr, [sp, #12]
   146f4:	mov	r5, r0
   146f8:	mov	r4, r1
   146fc:	mov	r0, r1
   14700:	bl	1432c <__assert_fail@plt+0x3650>
   14704:	mov	r2, r4
   14708:	mov	r1, r5
   1470c:	bl	10b20 <memcpy@plt>
   14710:	ldrd	r4, [sp]
   14714:	ldr	r6, [sp, #8]
   14718:	add	sp, sp, #12
   1471c:	pop	{pc}		; (ldr pc, [sp], #4)
   14720:	strd	r4, [sp, #-16]!
   14724:	str	r6, [sp, #8]
   14728:	str	lr, [sp, #12]
   1472c:	mov	r5, r0
   14730:	mov	r4, r1
   14734:	mov	r0, r1
   14738:	bl	14350 <__assert_fail@plt+0x3674>
   1473c:	mov	r2, r4
   14740:	mov	r1, r5
   14744:	bl	10b20 <memcpy@plt>
   14748:	ldrd	r4, [sp]
   1474c:	ldr	r6, [sp, #8]
   14750:	add	sp, sp, #12
   14754:	pop	{pc}		; (ldr pc, [sp], #4)
   14758:	strd	r4, [sp, #-16]!
   1475c:	str	r6, [sp, #8]
   14760:	str	lr, [sp, #12]
   14764:	mov	r5, r0
   14768:	mov	r4, r1
   1476c:	add	r0, r1, #1
   14770:	bl	14350 <__assert_fail@plt+0x3674>
   14774:	mov	r2, #0
   14778:	strb	r2, [r0, r4]
   1477c:	mov	r2, r4
   14780:	mov	r1, r5
   14784:	bl	10b20 <memcpy@plt>
   14788:	ldrd	r4, [sp]
   1478c:	ldr	r6, [sp, #8]
   14790:	add	sp, sp, #12
   14794:	pop	{pc}		; (ldr pc, [sp], #4)
   14798:	str	r4, [sp, #-8]!
   1479c:	str	lr, [sp, #4]
   147a0:	mov	r4, r0
   147a4:	bl	10c1c <strlen@plt>
   147a8:	add	r1, r0, #1
   147ac:	mov	r0, r4
   147b0:	bl	146e8 <__assert_fail@plt+0x3a0c>
   147b4:	ldr	r4, [sp]
   147b8:	add	sp, sp, #4
   147bc:	pop	{pc}		; (ldr pc, [sp], #4)
   147c0:	str	r4, [sp, #-8]!
   147c4:	str	lr, [sp, #4]
   147c8:	movw	r3, #24780	; 0x60cc
   147cc:	movt	r3, #2
   147d0:	ldr	r4, [r3]
   147d4:	mov	r2, #5
   147d8:	movw	r1, #22852	; 0x5944
   147dc:	movt	r1, #1
   147e0:	mov	r0, #0
   147e4:	bl	10b50 <dcgettext@plt>
   147e8:	mov	r3, r0
   147ec:	movw	r2, #21768	; 0x5508
   147f0:	movt	r2, #1
   147f4:	mov	r1, #0
   147f8:	mov	r0, r4
   147fc:	bl	10bbc <error@plt>
   14800:	bl	10cd0 <abort@plt>
   14804:	strd	r4, [sp, #-16]!
   14808:	str	r6, [sp, #8]
   1480c:	str	lr, [sp, #12]
   14810:	cmp	r1, #0
   14814:	cmpne	r0, #0
   14818:	beq	14854 <__assert_fail@plt+0x3b78>
   1481c:	mov	r2, r0
   14820:	mov	r3, r1
   14824:	umull	r4, r5, r0, r1
   14828:	adds	r1, r5, #0
   1482c:	movne	r1, #1
   14830:	cmp	r4, #0
   14834:	movlt	r1, #1
   14838:	cmp	r1, #0
   1483c:	beq	1485c <__assert_fail@plt+0x3b80>
   14840:	bl	10c28 <__errno_location@plt>
   14844:	mov	r3, #12
   14848:	str	r3, [r0]
   1484c:	mov	r0, #0
   14850:	b	14868 <__assert_fail@plt+0x3b8c>
   14854:	mov	r3, #1
   14858:	mov	r2, r3
   1485c:	mov	r1, r3
   14860:	mov	r0, r2
   14864:	bl	10ad8 <calloc@plt>
   14868:	ldrd	r4, [sp]
   1486c:	ldr	r6, [sp, #8]
   14870:	add	sp, sp, #12
   14874:	pop	{pc}		; (ldr pc, [sp], #4)
   14878:	str	r4, [sp, #-8]!
   1487c:	str	lr, [sp, #4]
   14880:	cmp	r0, #0
   14884:	beq	148a0 <__assert_fail@plt+0x3bc4>
   14888:	bge	148a4 <__assert_fail@plt+0x3bc8>
   1488c:	bl	10c28 <__errno_location@plt>
   14890:	mov	r3, #12
   14894:	str	r3, [r0]
   14898:	mov	r0, #0
   1489c:	b	148a8 <__assert_fail@plt+0x3bcc>
   148a0:	mov	r0, #1
   148a4:	bl	10bd4 <malloc@plt>
   148a8:	ldr	r4, [sp]
   148ac:	add	sp, sp, #4
   148b0:	pop	{pc}		; (ldr pc, [sp], #4)
   148b4:	str	r4, [sp, #-8]!
   148b8:	str	lr, [sp, #4]
   148bc:	cmp	r0, #0
   148c0:	beq	148e4 <__assert_fail@plt+0x3c08>
   148c4:	cmp	r1, #0
   148c8:	beq	148f0 <__assert_fail@plt+0x3c14>
   148cc:	cmp	r1, #0
   148d0:	blt	148fc <__assert_fail@plt+0x3c20>
   148d4:	bl	10b5c <realloc@plt>
   148d8:	ldr	r4, [sp]
   148dc:	add	sp, sp, #4
   148e0:	pop	{pc}		; (ldr pc, [sp], #4)
   148e4:	mov	r0, r1
   148e8:	bl	14878 <__assert_fail@plt+0x3b9c>
   148ec:	b	148d8 <__assert_fail@plt+0x3bfc>
   148f0:	bl	14ac8 <__assert_fail@plt+0x3dec>
   148f4:	mov	r0, #0
   148f8:	b	148d8 <__assert_fail@plt+0x3bfc>
   148fc:	bl	10c28 <__errno_location@plt>
   14900:	mov	r3, #12
   14904:	str	r3, [r0]
   14908:	mov	r0, #0
   1490c:	b	148d8 <__assert_fail@plt+0x3bfc>
   14910:	strd	r4, [sp, #-16]!
   14914:	str	r6, [sp, #8]
   14918:	str	lr, [sp, #12]
   1491c:	mov	r5, r0
   14920:	bl	10ba4 <__fpending@plt>
   14924:	mov	r6, r0
   14928:	ldr	r4, [r5]
   1492c:	and	r4, r4, #32
   14930:	mov	r0, r5
   14934:	bl	1499c <__assert_fail@plt+0x3cc0>
   14938:	cmp	r4, #0
   1493c:	bne	14970 <__assert_fail@plt+0x3c94>
   14940:	cmp	r0, #0
   14944:	beq	14960 <__assert_fail@plt+0x3c84>
   14948:	cmp	r6, #0
   1494c:	bne	1498c <__assert_fail@plt+0x3cb0>
   14950:	bl	10c28 <__errno_location@plt>
   14954:	ldr	r0, [r0]
   14958:	subs	r0, r0, #9
   1495c:	mvnne	r0, #0
   14960:	ldrd	r4, [sp]
   14964:	ldr	r6, [sp, #8]
   14968:	add	sp, sp, #12
   1496c:	pop	{pc}		; (ldr pc, [sp], #4)
   14970:	cmp	r0, #0
   14974:	bne	14994 <__assert_fail@plt+0x3cb8>
   14978:	bl	10c28 <__errno_location@plt>
   1497c:	mov	r3, #0
   14980:	str	r3, [r0]
   14984:	mvn	r0, #0
   14988:	b	14960 <__assert_fail@plt+0x3c84>
   1498c:	mvn	r0, #0
   14990:	b	14960 <__assert_fail@plt+0x3c84>
   14994:	mvn	r0, #0
   14998:	b	14960 <__assert_fail@plt+0x3c84>
   1499c:	strd	r4, [sp, #-16]!
   149a0:	str	r6, [sp, #8]
   149a4:	str	lr, [sp, #12]
   149a8:	sub	sp, sp, #8
   149ac:	mov	r4, r0
   149b0:	bl	10c58 <fileno@plt>
   149b4:	cmp	r0, #0
   149b8:	blt	14a30 <__assert_fail@plt+0x3d54>
   149bc:	mov	r0, r4
   149c0:	bl	10bec <__freading@plt>
   149c4:	cmp	r0, #0
   149c8:	beq	149fc <__assert_fail@plt+0x3d20>
   149cc:	mov	r0, r4
   149d0:	bl	10c58 <fileno@plt>
   149d4:	mov	r3, #1
   149d8:	str	r3, [sp]
   149dc:	mov	r2, #0
   149e0:	mov	r3, #0
   149e4:	bl	10b8c <lseek64@plt>
   149e8:	mvn	r2, #0
   149ec:	mvn	r3, #0
   149f0:	cmp	r1, r3
   149f4:	cmpeq	r0, r2
   149f8:	beq	14a3c <__assert_fail@plt+0x3d60>
   149fc:	mov	r0, r4
   14a00:	bl	14a58 <__assert_fail@plt+0x3d7c>
   14a04:	cmp	r0, #0
   14a08:	beq	14a3c <__assert_fail@plt+0x3d60>
   14a0c:	bl	10c28 <__errno_location@plt>
   14a10:	mov	r5, r0
   14a14:	ldr	r6, [r0]
   14a18:	mov	r0, r4
   14a1c:	bl	10c70 <fclose@plt>
   14a20:	cmp	r6, #0
   14a24:	strne	r6, [r5]
   14a28:	mvnne	r0, #0
   14a2c:	b	14a44 <__assert_fail@plt+0x3d68>
   14a30:	mov	r0, r4
   14a34:	bl	10c70 <fclose@plt>
   14a38:	b	14a44 <__assert_fail@plt+0x3d68>
   14a3c:	mov	r0, r4
   14a40:	bl	10c70 <fclose@plt>
   14a44:	add	sp, sp, #8
   14a48:	ldrd	r4, [sp]
   14a4c:	ldr	r6, [sp, #8]
   14a50:	add	sp, sp, #12
   14a54:	pop	{pc}		; (ldr pc, [sp], #4)
   14a58:	str	r4, [sp, #-8]!
   14a5c:	str	lr, [sp, #4]
   14a60:	sub	sp, sp, #8
   14a64:	subs	r4, r0, #0
   14a68:	beq	14a7c <__assert_fail@plt+0x3da0>
   14a6c:	mov	r0, r4
   14a70:	bl	10bec <__freading@plt>
   14a74:	cmp	r0, #0
   14a78:	bne	14a94 <__assert_fail@plt+0x3db8>
   14a7c:	mov	r0, r4
   14a80:	bl	10afc <fflush@plt>
   14a84:	add	sp, sp, #8
   14a88:	ldr	r4, [sp]
   14a8c:	add	sp, sp, #4
   14a90:	pop	{pc}		; (ldr pc, [sp], #4)
   14a94:	ldr	r3, [r4]
   14a98:	tst	r3, #256	; 0x100
   14a9c:	bne	14aac <__assert_fail@plt+0x3dd0>
   14aa0:	mov	r0, r4
   14aa4:	bl	10afc <fflush@plt>
   14aa8:	b	14a84 <__assert_fail@plt+0x3da8>
   14aac:	mov	r3, #1
   14ab0:	str	r3, [sp]
   14ab4:	mov	r2, #0
   14ab8:	mov	r3, #0
   14abc:	mov	r0, r4
   14ac0:	bl	14b28 <__assert_fail@plt+0x3e4c>
   14ac4:	b	14aa0 <__assert_fail@plt+0x3dc4>
   14ac8:	strd	r4, [sp, #-12]!
   14acc:	str	lr, [sp, #8]
   14ad0:	sub	sp, sp, #12
   14ad4:	mov	r5, r0
   14ad8:	bl	10c28 <__errno_location@plt>
   14adc:	mov	r4, r0
   14ae0:	ldr	r3, [r0]
   14ae4:	str	r3, [sp]
   14ae8:	str	r3, [sp, #4]
   14aec:	mov	r3, #0
   14af0:	str	r3, [r0]
   14af4:	mov	r0, r5
   14af8:	bl	10b08 <free@plt>
   14afc:	ldr	r3, [r4]
   14b00:	clz	r3, r3
   14b04:	lsr	r3, r3, #5
   14b08:	add	r2, sp, #8
   14b0c:	add	r3, r2, r3, lsl #2
   14b10:	ldr	r3, [r3, #-8]
   14b14:	str	r3, [r4]
   14b18:	add	sp, sp, #12
   14b1c:	ldrd	r4, [sp]
   14b20:	add	sp, sp, #8
   14b24:	pop	{pc}		; (ldr pc, [sp], #4)
   14b28:	str	r4, [sp, #-16]!
   14b2c:	strd	r6, [sp, #4]
   14b30:	str	lr, [sp, #12]
   14b34:	sub	sp, sp, #8
   14b38:	mov	r4, r0
   14b3c:	mov	r6, r2
   14b40:	mov	r7, r3
   14b44:	ldr	r2, [r0, #8]
   14b48:	ldr	r3, [r0, #4]
   14b4c:	cmp	r2, r3
   14b50:	beq	14b80 <__assert_fail@plt+0x3ea4>
   14b54:	ldr	r3, [sp, #24]
   14b58:	str	r3, [sp]
   14b5c:	mov	r2, r6
   14b60:	mov	r3, r7
   14b64:	mov	r0, r4
   14b68:	bl	10c7c <fseeko64@plt>
   14b6c:	add	sp, sp, #8
   14b70:	ldr	r4, [sp]
   14b74:	ldrd	r6, [sp, #4]
   14b78:	add	sp, sp, #12
   14b7c:	pop	{pc}		; (ldr pc, [sp], #4)
   14b80:	ldr	r2, [r0, #20]
   14b84:	ldr	r3, [r0, #16]
   14b88:	cmp	r2, r3
   14b8c:	bne	14b54 <__assert_fail@plt+0x3e78>
   14b90:	ldr	r3, [r0, #36]	; 0x24
   14b94:	cmp	r3, #0
   14b98:	bne	14b54 <__assert_fail@plt+0x3e78>
   14b9c:	bl	10c58 <fileno@plt>
   14ba0:	ldr	r3, [sp, #24]
   14ba4:	str	r3, [sp]
   14ba8:	mov	r2, r6
   14bac:	mov	r3, r7
   14bb0:	bl	10b8c <lseek64@plt>
   14bb4:	mvn	r2, #0
   14bb8:	mvn	r3, #0
   14bbc:	cmp	r1, r3
   14bc0:	cmpeq	r0, r2
   14bc4:	beq	14be0 <__assert_fail@plt+0x3f04>
   14bc8:	ldr	r3, [r4]
   14bcc:	bic	r3, r3, #16
   14bd0:	str	r3, [r4]
   14bd4:	strd	r0, [r4, #80]	; 0x50
   14bd8:	mov	r0, #0
   14bdc:	b	14b6c <__assert_fail@plt+0x3e90>
   14be0:	mvn	r0, #0
   14be4:	b	14b6c <__assert_fail@plt+0x3e90>
   14be8:	str	r4, [sp, #-8]!
   14bec:	str	lr, [sp, #4]
   14bf0:	mov	r0, #14
   14bf4:	bl	10cac <nl_langinfo@plt>
   14bf8:	cmp	r0, #0
   14bfc:	beq	14c20 <__assert_fail@plt+0x3f44>
   14c00:	ldrb	r2, [r0]
   14c04:	movw	r3, #22872	; 0x5958
   14c08:	movt	r3, #1
   14c0c:	cmp	r2, #0
   14c10:	moveq	r0, r3
   14c14:	ldr	r4, [sp]
   14c18:	add	sp, sp, #4
   14c1c:	pop	{pc}		; (ldr pc, [sp], #4)
   14c20:	movw	r0, #22872	; 0x5958
   14c24:	movt	r0, #1
   14c28:	b	14c14 <__assert_fail@plt+0x3f38>
   14c2c:	strd	r4, [sp, #-20]!	; 0xffffffec
   14c30:	strd	r6, [sp, #8]
   14c34:	str	lr, [sp, #16]
   14c38:	sub	sp, sp, #12
   14c3c:	mov	r7, r1
   14c40:	mov	r5, r2
   14c44:	subs	r6, r0, #0
   14c48:	addeq	r6, sp, #4
   14c4c:	mov	r0, r6
   14c50:	bl	10bb0 <mbrtowc@plt>
   14c54:	mov	r4, r0
   14c58:	cmp	r5, #0
   14c5c:	cmnne	r0, #3
   14c60:	bhi	14c7c <__assert_fail@plt+0x3fa0>
   14c64:	mov	r0, r4
   14c68:	add	sp, sp, #12
   14c6c:	ldrd	r4, [sp]
   14c70:	ldrd	r6, [sp, #8]
   14c74:	add	sp, sp, #16
   14c78:	pop	{pc}		; (ldr pc, [sp], #4)
   14c7c:	mov	r0, #0
   14c80:	bl	14cd8 <__assert_fail@plt+0x3ffc>
   14c84:	cmp	r0, #0
   14c88:	bne	14c64 <__assert_fail@plt+0x3f88>
   14c8c:	ldrb	r3, [r7]
   14c90:	str	r3, [r6]
   14c94:	mov	r4, #1
   14c98:	b	14c64 <__assert_fail@plt+0x3f88>
   14c9c:	str	r4, [sp, #-8]!
   14ca0:	str	lr, [sp, #4]
   14ca4:	umull	r2, r3, r1, r2
   14ca8:	cmp	r3, #0
   14cac:	bne	14cc4 <__assert_fail@plt+0x3fe8>
   14cb0:	mov	r1, r2
   14cb4:	bl	148b4 <__assert_fail@plt+0x3bd8>
   14cb8:	ldr	r4, [sp]
   14cbc:	add	sp, sp, #4
   14cc0:	pop	{pc}		; (ldr pc, [sp], #4)
   14cc4:	bl	10c28 <__errno_location@plt>
   14cc8:	mov	r3, #12
   14ccc:	str	r3, [r0]
   14cd0:	mov	r0, #0
   14cd4:	b	14cb8 <__assert_fail@plt+0x3fdc>
   14cd8:	push	{lr}		; (str lr, [sp, #-4]!)
   14cdc:	sub	sp, sp, #268	; 0x10c
   14ce0:	movw	r2, #257	; 0x101
   14ce4:	add	r1, sp, #4
   14ce8:	bl	14d34 <__assert_fail@plt+0x4058>
   14cec:	cmp	r0, #0
   14cf0:	movne	r0, #0
   14cf4:	bne	14d2c <__assert_fail@plt+0x4050>
   14cf8:	movw	r1, #22880	; 0x5960
   14cfc:	movt	r1, #1
   14d00:	add	r0, sp, #4
   14d04:	bl	10af0 <strcmp@plt>
   14d08:	cmp	r0, #0
   14d0c:	beq	14d28 <__assert_fail@plt+0x404c>
   14d10:	movw	r1, #22884	; 0x5964
   14d14:	movt	r1, #1
   14d18:	add	r0, sp, #4
   14d1c:	bl	10af0 <strcmp@plt>
   14d20:	adds	r0, r0, #0
   14d24:	movne	r0, #1
   14d28:	and	r0, r0, #1
   14d2c:	add	sp, sp, #268	; 0x10c
   14d30:	pop	{pc}		; (ldr pc, [sp], #4)
   14d34:	strd	r4, [sp, #-16]!
   14d38:	str	r6, [sp, #8]
   14d3c:	str	lr, [sp, #12]
   14d40:	mov	r6, r1
   14d44:	mov	r4, r2
   14d48:	mov	r1, #0
   14d4c:	bl	10c94 <setlocale@plt>
   14d50:	subs	r5, r0, #0
   14d54:	beq	14d98 <__assert_fail@plt+0x40bc>
   14d58:	mov	r0, r5
   14d5c:	bl	10c1c <strlen@plt>
   14d60:	cmp	r4, r0
   14d64:	bhi	14db4 <__assert_fail@plt+0x40d8>
   14d68:	cmp	r4, #0
   14d6c:	moveq	r0, #34	; 0x22
   14d70:	beq	14dc8 <__assert_fail@plt+0x40ec>
   14d74:	sub	r4, r4, #1
   14d78:	mov	r2, r4
   14d7c:	mov	r1, r5
   14d80:	mov	r0, r6
   14d84:	bl	10b20 <memcpy@plt>
   14d88:	mov	r3, #0
   14d8c:	strb	r3, [r6, r4]
   14d90:	mov	r0, #34	; 0x22
   14d94:	b	14dc8 <__assert_fail@plt+0x40ec>
   14d98:	cmp	r4, #0
   14d9c:	moveq	r0, #22
   14da0:	beq	14dc8 <__assert_fail@plt+0x40ec>
   14da4:	mov	r3, #0
   14da8:	strb	r3, [r6]
   14dac:	mov	r0, #22
   14db0:	b	14dc8 <__assert_fail@plt+0x40ec>
   14db4:	add	r2, r0, #1
   14db8:	mov	r1, r5
   14dbc:	mov	r0, r6
   14dc0:	bl	10b20 <memcpy@plt>
   14dc4:	mov	r0, #0
   14dc8:	ldrd	r4, [sp]
   14dcc:	ldr	r6, [sp, #8]
   14dd0:	add	sp, sp, #12
   14dd4:	pop	{pc}		; (ldr pc, [sp], #4)
   14dd8:	str	r4, [sp, #-8]!
   14ddc:	str	lr, [sp, #4]
   14de0:	mov	r1, #0
   14de4:	bl	10c94 <setlocale@plt>
   14de8:	ldr	r4, [sp]
   14dec:	add	sp, sp, #4
   14df0:	pop	{pc}		; (ldr pc, [sp], #4)
   14df4:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   14df8:	mov	r7, r0
   14dfc:	ldr	r6, [pc, #72]	; 14e4c <__assert_fail@plt+0x4170>
   14e00:	ldr	r5, [pc, #72]	; 14e50 <__assert_fail@plt+0x4174>
   14e04:	add	r6, pc, r6
   14e08:	add	r5, pc, r5
   14e0c:	sub	r6, r6, r5
   14e10:	mov	r8, r1
   14e14:	mov	r9, r2
   14e18:	bl	10ab8 <calloc@plt-0x20>
   14e1c:	asrs	r6, r6, #2
   14e20:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   14e24:	mov	r4, #0
   14e28:	add	r4, r4, #1
   14e2c:	ldr	r3, [r5], #4
   14e30:	mov	r2, r9
   14e34:	mov	r1, r8
   14e38:	mov	r0, r7
   14e3c:	blx	r3
   14e40:	cmp	r6, r4
   14e44:	bne	14e28 <__assert_fail@plt+0x414c>
   14e48:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   14e4c:	andeq	r1, r1, r8, lsl #2
   14e50:	andeq	r1, r1, r0, lsl #2
   14e54:	bx	lr
   14e58:	ldr	r3, [pc, #12]	; 14e6c <__assert_fail@plt+0x4190>
   14e5c:	mov	r1, #0
   14e60:	add	r3, pc, r3
   14e64:	ldr	r2, [r3]
   14e68:	b	10c34 <__cxa_atexit@plt>
   14e6c:	andeq	r1, r1, ip, asr r2

Disassembly of section .fini:

00014e70 <.fini>:
   14e70:	push	{r3, lr}
   14e74:	pop	{r3, pc}
