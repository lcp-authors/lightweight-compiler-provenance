
../repos/charybdis/wsockd/.libs/wsockd:     file format elf32-littlearm


Disassembly of section .init:

00010d84 <.init>:
   10d84:	push	{r3, lr}
   10d88:	bl	1105c <rb_base64_encode@plt+0x54>
   10d8c:	pop	{r3, pc}

Disassembly of section .plt:

00010d90 <open@plt-0x14>:
   10d90:	push	{lr}		; (str lr, [sp, #-4]!)
   10d94:	ldr	lr, [pc, #4]	; 10da0 <open@plt-0x4>
   10d98:	add	lr, pc, lr
   10d9c:	ldr	pc, [lr, #8]!
   10da0:	andeq	r4, r1, r0, ror #4

00010da4 <open@plt>:
   10da4:	add	ip, pc, #0, 12
   10da8:	add	ip, ip, #20, 20	; 0x14000
   10dac:	ldr	pc, [ip, #608]!	; 0x260

00010db0 <sigemptyset@plt>:
   10db0:	add	ip, pc, #0, 12
   10db4:	add	ip, ip, #20, 20	; 0x14000
   10db8:	ldr	pc, [ip, #600]!	; 0x258

00010dbc <strerror@plt>:
   10dbc:	add	ip, pc, #0, 12
   10dc0:	add	ip, ip, #20, 20	; 0x14000
   10dc4:	ldr	pc, [ip, #592]!	; 0x250

00010dc8 <rb_get_type@plt>:
   10dc8:	add	ip, pc, #0, 12
   10dcc:	add	ip, ip, #20, 20	; 0x14000
   10dd0:	ldr	pc, [ip, #584]!	; 0x248

00010dd4 <abort@plt>:
   10dd4:	add	ip, pc, #0, 12
   10dd8:	add	ip, ip, #20, 20	; 0x14000
   10ddc:	ldr	pc, [ip, #576]!	; 0x240

00010de0 <rb_event_addish@plt>:
   10de0:	add	ip, pc, #0, 12
   10de4:	add	ip, ip, #20, 20	; 0x14000
   10de8:	ldr	pc, [ip, #568]!	; 0x238

00010dec <rb_ignore_errno@plt>:
   10dec:	add	ip, pc, #0, 12
   10df0:	add	ip, ip, #20, 20	; 0x14000
   10df4:	ldr	pc, [ip, #560]!	; 0x230

00010df8 <__libc_start_main@plt>:
   10df8:	add	ip, pc, #0, 12
   10dfc:	add	ip, ip, #20, 20	; 0x14000
   10e00:	ldr	pc, [ip, #552]!	; 0x228

00010e04 <rb_setselect@plt>:
   10e04:	add	ip, pc, #0, 12
   10e08:	add	ip, ip, #20, 20	; 0x14000
   10e0c:	ldr	pc, [ip, #544]!	; 0x220

00010e10 <__gmon_start__@plt>:
   10e10:	add	ip, pc, #0, 12
   10e14:	add	ip, ip, #20, 20	; 0x14000
   10e18:	ldr	pc, [ip, #536]!	; 0x218

00010e1c <rb_send_fd_buf@plt>:
   10e1c:	add	ip, pc, #0, 12
   10e20:	add	ip, ip, #20, 20	; 0x14000
   10e24:	ldr	pc, [ip, #528]!	; 0x210

00010e28 <vsnprintf@plt>:
   10e28:	add	ip, pc, #0, 12
   10e2c:	add	ip, ip, #20, 20	; 0x14000
   10e30:	ldr	pc, [ip, #520]!	; 0x208

00010e34 <getenv@plt>:
   10e34:	add	ip, pc, #0, 12
   10e38:	add	ip, ip, #20, 20	; 0x14000
   10e3c:	ldr	pc, [ip, #512]!	; 0x200

00010e40 <calloc@plt>:
   10e40:	add	ip, pc, #0, 12
   10e44:	add	ip, ip, #20, 20	; 0x14000
   10e48:	ldr	pc, [ip, #504]!	; 0x1f8

00010e4c <rb_set_nb@plt>:
   10e4c:	add	ip, pc, #0, 12
   10e50:	add	ip, ip, #20, 20	; 0x14000
   10e54:	ldr	pc, [ip, #496]!	; 0x1f0

00010e58 <memset@plt>:
   10e58:	add	ip, pc, #0, 12
   10e5c:	add	ip, ip, #20, 20	; 0x14000
   10e60:	ldr	pc, [ip, #488]!	; 0x1e8

00010e64 <rb_linebuf_parse@plt>:
   10e64:	add	ip, pc, #0, 12
   10e68:	add	ip, ip, #20, 20	; 0x14000
   10e6c:	ldr	pc, [ip, #480]!	; 0x1e0

00010e70 <rb_strlcpy@plt>:
   10e70:	add	ip, pc, #0, 12
   10e74:	add	ip, ip, #20, 20	; 0x14000
   10e78:	ldr	pc, [ip, #472]!	; 0x1d8

00010e7c <rb_init_rawbuffers@plt>:
   10e7c:	add	ip, pc, #0, 12
   10e80:	add	ip, ip, #20, 20	; 0x14000
   10e84:	ldr	pc, [ip, #464]!	; 0x1d0

00010e88 <free@plt>:
   10e88:	add	ip, pc, #0, 12
   10e8c:	add	ip, ip, #20, 20	; 0x14000
   10e90:	ldr	pc, [ip, #456]!	; 0x1c8

00010e94 <rb_lib_loop@plt>:
   10e94:	add	ip, pc, #0, 12
   10e98:	add	ip, ip, #20, 20	; 0x14000
   10e9c:	ldr	pc, [ip, #448]!	; 0x1c0

00010ea0 <rb_read@plt>:
   10ea0:	add	ip, pc, #0, 12
   10ea4:	add	ip, ip, #20, 20	; 0x14000
   10ea8:	ldr	pc, [ip, #440]!	; 0x1b8

00010eac <rb_set_type@plt>:
   10eac:	add	ip, pc, #0, 12
   10eb0:	add	ip, ip, #20, 20	; 0x14000
   10eb4:	ldr	pc, [ip, #432]!	; 0x1b0

00010eb8 <rb_linebuf_get@plt>:
   10eb8:	add	ip, pc, #0, 12
   10ebc:	add	ip, ip, #20, 20	; 0x14000
   10ec0:	ldr	pc, [ip, #424]!	; 0x1a8

00010ec4 <rb_linebuf_flush@plt>:
   10ec4:	add	ip, pc, #0, 12
   10ec8:	add	ip, ip, #20, 20	; 0x14000
   10ecc:	ldr	pc, [ip, #416]!	; 0x1a0

00010ed0 <strlen@plt>:
   10ed0:	add	ip, pc, #0, 12
   10ed4:	add	ip, ip, #20, 20	; 0x14000
   10ed8:	ldr	pc, [ip, #408]!	; 0x198

00010edc <memcpy@plt>:
   10edc:	add	ip, pc, #0, 12
   10ee0:	add	ip, ip, #20, 20	; 0x14000
   10ee4:	ldr	pc, [ip, #400]!	; 0x190

00010ee8 <rb_linebuf_donebuf@plt>:
   10ee8:	add	ip, pc, #0, 12
   10eec:	add	ip, ip, #20, 20	; 0x14000
   10ef0:	ldr	pc, [ip, #392]!	; 0x188

00010ef4 <rb_strcasestr@plt>:
   10ef4:	add	ip, pc, #0, 12
   10ef8:	add	ip, ip, #20, 20	; 0x14000
   10efc:	ldr	pc, [ip, #384]!	; 0x180

00010f00 <rb_close@plt>:
   10f00:	add	ip, pc, #0, 12
   10f04:	add	ip, ip, #20, 20	; 0x14000
   10f08:	ldr	pc, [ip, #376]!	; 0x178

00010f0c <strtol@plt>:
   10f0c:	add	ip, pc, #0, 12
   10f10:	add	ip, ip, #20, 20	; 0x14000
   10f14:	ldr	pc, [ip, #368]!	; 0x170

00010f18 <sigaddset@plt>:
   10f18:	add	ip, pc, #0, 12
   10f1c:	add	ip, ip, #20, 20	; 0x14000
   10f20:	ldr	pc, [ip, #360]!	; 0x168

00010f24 <rb_rawbuf_length@plt>:
   10f24:	add	ip, pc, #0, 12
   10f28:	add	ip, ip, #20, 20	; 0x14000
   10f2c:	ldr	pc, [ip, #352]!	; 0x160

00010f30 <rb_free_rawbuffer@plt>:
   10f30:	add	ip, pc, #0, 12
   10f34:	add	ip, ip, #20, 20	; 0x14000
   10f38:	ldr	pc, [ip, #344]!	; 0x158

00010f3c <close@plt>:
   10f3c:	add	ip, pc, #0, 12
   10f40:	add	ip, ip, #20, 20	; 0x14000
   10f44:	ldr	pc, [ip, #336]!	; 0x150

00010f48 <fwrite@plt>:
   10f48:	add	ip, pc, #0, 12
   10f4c:	add	ip, ip, #20, 20	; 0x14000
   10f50:	ldr	pc, [ip, #328]!	; 0x148

00010f54 <rb_outofmemory@plt>:
   10f54:	add	ip, pc, #0, 12
   10f58:	add	ip, ip, #20, 20	; 0x14000
   10f5c:	ldr	pc, [ip, #320]!	; 0x140

00010f60 <rb_rawbuf_get@plt>:
   10f60:	add	ip, pc, #0, 12
   10f64:	add	ip, ip, #20, 20	; 0x14000
   10f68:	ldr	pc, [ip, #312]!	; 0x138

00010f6c <sigaction@plt>:
   10f6c:	add	ip, pc, #0, 12
   10f70:	add	ip, ip, #20, 20	; 0x14000
   10f74:	ldr	pc, [ip, #304]!	; 0x130

00010f78 <rb_lib_init@plt>:
   10f78:	add	ip, pc, #0, 12
   10f7c:	add	ip, ip, #20, 20	; 0x14000
   10f80:	ldr	pc, [ip, #296]!	; 0x128

00010f84 <rb_new_rawbuffer@plt>:
   10f84:	add	ip, pc, #0, 12
   10f88:	add	ip, ip, #20, 20	; 0x14000
   10f8c:	ldr	pc, [ip, #288]!	; 0x120

00010f90 <rb_open@plt>:
   10f90:	add	ip, pc, #0, 12
   10f94:	add	ip, ip, #20, 20	; 0x14000
   10f98:	ldr	pc, [ip, #280]!	; 0x118

00010f9c <rb_recv_fd_buf@plt>:
   10f9c:	add	ip, pc, #0, 12
   10fa0:	add	ip, ip, #20, 20	; 0x14000
   10fa4:	ldr	pc, [ip, #272]!	; 0x110

00010fa8 <dup2@plt>:
   10fa8:	add	ip, pc, #0, 12
   10fac:	add	ip, ip, #20, 20	; 0x14000
   10fb0:	ldr	pc, [ip, #264]!	; 0x108

00010fb4 <rb_linebuf_newbuf@plt>:
   10fb4:	add	ip, pc, #0, 12
   10fb8:	add	ip, ip, #20, 20	; 0x14000
   10fbc:	ldr	pc, [ip, #256]!	; 0x100

00010fc0 <rb_linebuf_init@plt>:
   10fc0:	add	ip, pc, #0, 12
   10fc4:	add	ip, ip, #20, 20	; 0x14000
   10fc8:	ldr	pc, [ip, #248]!	; 0xf8

00010fcc <getrlimit@plt>:
   10fcc:	add	ip, pc, #0, 12
   10fd0:	add	ip, ip, #20, 20	; 0x14000
   10fd4:	ldr	pc, [ip, #240]!	; 0xf0

00010fd8 <rb_rawbuf_append@plt>:
   10fd8:	add	ip, pc, #0, 12
   10fdc:	add	ip, ip, #20, 20	; 0x14000
   10fe0:	ldr	pc, [ip, #232]!	; 0xe8

00010fe4 <rb_rawbuf_flush@plt>:
   10fe4:	add	ip, pc, #0, 12
   10fe8:	add	ip, ip, #20, 20	; 0x14000
   10fec:	ldr	pc, [ip, #224]!	; 0xe0

00010ff0 <exit@plt>:
   10ff0:	add	ip, pc, #0, 12
   10ff4:	add	ip, ip, #20, 20	; 0x14000
   10ff8:	ldr	pc, [ip, #216]!	; 0xd8

00010ffc <__errno_location@plt>:
   10ffc:	add	ip, pc, #0, 12
   11000:	add	ip, ip, #20, 20	; 0x14000
   11004:	ldr	pc, [ip, #208]!	; 0xd0

00011008 <rb_base64_encode@plt>:
   11008:	add	ip, pc, #0, 12
   1100c:	add	ip, ip, #20, 20	; 0x14000
   11010:	ldr	pc, [ip, #200]!	; 0xc8

Disassembly of section .text:

00011020 <.text>:
   11020:	mov	fp, #0
   11024:	mov	lr, #0
   11028:	pop	{r1}		; (ldr r1, [sp], #4)
   1102c:	mov	r2, sp
   11030:	push	{r2}		; (str r2, [sp, #-4]!)
   11034:	push	{r0}		; (str r0, [sp, #-4]!)
   11038:	ldr	ip, [pc, #16]	; 11050 <rb_base64_encode@plt+0x48>
   1103c:	push	{ip}		; (str ip, [sp, #-4]!)
   11040:	ldr	r0, [pc, #12]	; 11054 <rb_base64_encode@plt+0x4c>
   11044:	ldr	r3, [pc, #12]	; 11058 <rb_base64_encode@plt+0x50>
   11048:	bl	10df8 <__libc_start_main@plt>
   1104c:	bl	10dd4 <abort@plt>
   11050:	andeq	r4, r1, ip, ror r1
   11054:	andeq	r1, r1, r0, lsl r1
   11058:	andeq	r4, r1, ip, lsl r1
   1105c:	ldr	r3, [pc, #20]	; 11078 <rb_base64_encode@plt+0x70>
   11060:	ldr	r2, [pc, #20]	; 1107c <rb_base64_encode@plt+0x74>
   11064:	add	r3, pc, r3
   11068:	ldr	r2, [r3, r2]
   1106c:	cmp	r2, #0
   11070:	bxeq	lr
   11074:	b	10e10 <__gmon_start__@plt>
   11078:	muleq	r1, r4, pc	; <UNPREDICTABLE>
   1107c:	ldrdeq	r0, [r0], -ip
   11080:	ldr	r0, [pc, #24]	; 110a0 <rb_base64_encode@plt+0x98>
   11084:	ldr	r3, [pc, #24]	; 110a4 <rb_base64_encode@plt+0x9c>
   11088:	cmp	r3, r0
   1108c:	bxeq	lr
   11090:	ldr	r3, [pc, #16]	; 110a8 <rb_base64_encode@plt+0xa0>
   11094:	cmp	r3, #0
   11098:	bxeq	lr
   1109c:	bx	r3
   110a0:	andeq	r5, r2, ip, ror #1
   110a4:	andeq	r5, r2, ip, ror #1
   110a8:	andeq	r0, r0, r0
   110ac:	ldr	r0, [pc, #36]	; 110d8 <rb_base64_encode@plt+0xd0>
   110b0:	ldr	r1, [pc, #36]	; 110dc <rb_base64_encode@plt+0xd4>
   110b4:	sub	r1, r1, r0
   110b8:	asr	r1, r1, #2
   110bc:	add	r1, r1, r1, lsr #31
   110c0:	asrs	r1, r1, #1
   110c4:	bxeq	lr
   110c8:	ldr	r3, [pc, #16]	; 110e0 <rb_base64_encode@plt+0xd8>
   110cc:	cmp	r3, #0
   110d0:	bxeq	lr
   110d4:	bx	r3
   110d8:	andeq	r5, r2, ip, ror #1
   110dc:	andeq	r5, r2, ip, ror #1
   110e0:	andeq	r0, r0, r0
   110e4:	push	{r4, lr}
   110e8:	ldr	r4, [pc, #24]	; 11108 <rb_base64_encode@plt+0x100>
   110ec:	ldrb	r3, [r4]
   110f0:	cmp	r3, #0
   110f4:	popne	{r4, pc}
   110f8:	bl	11080 <rb_base64_encode@plt+0x78>
   110fc:	mov	r3, #1
   11100:	strb	r3, [r4]
   11104:	pop	{r4, pc}
   11108:	andeq	r5, r2, ip, ror #1
   1110c:	b	110ac <rb_base64_encode@plt+0xa4>
   11110:	push	{fp, lr}
   11114:	mov	fp, sp
   11118:	sub	sp, sp, #24
   1111c:	sub	r1, fp, #8
   11120:	mov	r0, #7
   11124:	bl	10fcc <getrlimit@plt>
   11128:	ldr	r7, [fp, #-8]
   1112c:	cmp	r0, #0
   11130:	ldr	r0, [pc, #624]	; 113a8 <rb_base64_encode@plt+0x3a0>
   11134:	movwne	r7, #65535	; 0xffff
   11138:	add	r0, pc, r0
   1113c:	bl	10e34 <getenv@plt>
   11140:	mov	r5, r0
   11144:	ldr	r0, [pc, #608]	; 113ac <rb_base64_encode@plt+0x3a4>
   11148:	add	r0, pc, r0
   1114c:	bl	10e34 <getenv@plt>
   11150:	mov	r4, r0
   11154:	ldr	r0, [pc, #596]	; 113b0 <rb_base64_encode@plt+0x3a8>
   11158:	add	r0, pc, r0
   1115c:	bl	10e34 <getenv@plt>
   11160:	cmp	r5, #0
   11164:	beq	11178 <rb_base64_encode@plt+0x170>
   11168:	cmp	r4, #0
   1116c:	movne	r8, r0
   11170:	cmpne	r0, #0
   11174:	bne	111b8 <rb_base64_encode@plt+0x1b0>
   11178:	ldr	r4, [pc, #612]	; 113e4 <rb_base64_encode@plt+0x3dc>
   1117c:	mov	r1, #52	; 0x34
   11180:	mov	r2, #1
   11184:	ldr	r4, [pc, r4]
   11188:	ldr	r3, [r4]
   1118c:	ldr	r0, [pc, #596]	; 113e8 <rb_base64_encode@plt+0x3e0>
   11190:	add	r0, pc, r0
   11194:	bl	10f48 <fwrite@plt>
   11198:	ldr	r3, [r4]
   1119c:	ldr	r0, [pc, #584]	; 113ec <rb_base64_encode@plt+0x3e4>
   111a0:	mov	r1, #49	; 0x31
   111a4:	mov	r2, #1
   111a8:	add	r0, pc, r0
   111ac:	bl	10f48 <fwrite@plt>
   111b0:	mov	r0, #1
   111b4:	bl	10ff0 <exit@plt>
   111b8:	mov	r0, r5
   111bc:	mov	r1, #0
   111c0:	mov	r2, #10
   111c4:	mov	r6, #0
   111c8:	bl	10f0c <strtol@plt>
   111cc:	mov	r5, r0
   111d0:	mov	r0, r4
   111d4:	mov	r1, #0
   111d8:	mov	r2, #10
   111dc:	bl	10f0c <strtol@plt>
   111e0:	mov	r4, r0
   111e4:	mov	r0, r8
   111e8:	mov	r1, #0
   111ec:	mov	r2, #10
   111f0:	bl	10f0c <strtol@plt>
   111f4:	ldr	r1, [pc, #440]	; 113b4 <rb_base64_encode@plt+0x3ac>
   111f8:	cmp	r7, #1
   111fc:	add	r1, pc, r1
   11200:	str	r0, [r1]
   11204:	bge	11218 <rb_base64_encode@plt+0x210>
   11208:	b	11238 <rb_base64_encode@plt+0x230>
   1120c:	add	r6, r6, #1
   11210:	cmp	r7, r6
   11214:	beq	11238 <rb_base64_encode@plt+0x230>
   11218:	cmp	r5, r6
   1121c:	cmpne	r4, r6
   11220:	beq	1120c <rb_base64_encode@plt+0x204>
   11224:	cmp	r6, #3
   11228:	bcc	1120c <rb_base64_encode@plt+0x204>
   1122c:	mov	r0, r6
   11230:	bl	10f3c <close@plt>
   11234:	b	1120c <rb_base64_encode@plt+0x204>
   11238:	ldr	r0, [pc, #376]	; 113b8 <rb_base64_encode@plt+0x3b0>
   1123c:	mov	r1, #2
   11240:	add	r0, pc, r0
   11244:	bl	10da4 <open@plt>
   11248:	cmp	r0, #0
   1124c:	bmi	112a0 <rb_base64_encode@plt+0x298>
   11250:	cmp	r5, #0
   11254:	mov	r6, r0
   11258:	cmpne	r4, #0
   1125c:	beq	1126c <rb_base64_encode@plt+0x264>
   11260:	mov	r0, r6
   11264:	mov	r1, #0
   11268:	bl	10fa8 <dup2@plt>
   1126c:	cmp	r5, #1
   11270:	cmpne	r4, #1
   11274:	beq	11284 <rb_base64_encode@plt+0x27c>
   11278:	mov	r0, r6
   1127c:	mov	r1, #1
   11280:	bl	10fa8 <dup2@plt>
   11284:	cmp	r5, #2
   11288:	cmpne	r4, #2
   1128c:	bne	11390 <rb_base64_encode@plt+0x388>
   11290:	cmp	r6, #3
   11294:	blt	112a0 <rb_base64_encode@plt+0x298>
   11298:	mov	r0, r6
   1129c:	bl	10f3c <close@plt>
   112a0:	bl	113f0 <rb_base64_encode@plt+0x3e8>
   112a4:	mov	r0, #4096	; 0x1000
   112a8:	mov	r1, #1024	; 0x400
   112ac:	mov	r2, #0
   112b0:	mov	r3, #0
   112b4:	str	r7, [sp]
   112b8:	str	r1, [sp, #4]
   112bc:	str	r0, [sp, #8]
   112c0:	mov	r0, #0
   112c4:	mov	r1, #0
   112c8:	bl	10f78 <rb_lib_init@plt>
   112cc:	mov	r0, #4096	; 0x1000
   112d0:	bl	10fc0 <rb_linebuf_init@plt>
   112d4:	mov	r0, #4096	; 0x1000
   112d8:	bl	10e7c <rb_init_rawbuffers@plt>
   112dc:	mov	r0, #48	; 0x30
   112e0:	bl	114a4 <rb_base64_encode@plt+0x49c>
   112e4:	ldr	r1, [pc, #208]	; 113bc <rb_base64_encode@plt+0x3b4>
   112e8:	add	r1, pc, r1
   112ec:	str	r0, [r1]
   112f0:	mov	r0, r5
   112f4:	mov	r1, #4
   112f8:	ldr	r2, [pc, #192]	; 113c0 <rb_base64_encode@plt+0x3b8>
   112fc:	add	r2, pc, r2
   11300:	bl	10f90 <rb_open@plt>
   11304:	ldr	r1, [pc, #184]	; 113c4 <rb_base64_encode@plt+0x3bc>
   11308:	ldr	r1, [pc, r1]
   1130c:	str	r0, [r1, #16]
   11310:	mov	r0, r4
   11314:	mov	r1, #8
   11318:	ldr	r2, [pc, #168]	; 113c8 <rb_base64_encode@plt+0x3c0>
   1131c:	add	r2, pc, r2
   11320:	bl	10f90 <rb_open@plt>
   11324:	ldr	r1, [pc, #160]	; 113cc <rb_base64_encode@plt+0x3c4>
   11328:	ldr	r1, [pc, r1]
   1132c:	str	r0, [r1, #20]
   11330:	ldr	r0, [r1, #16]
   11334:	bl	10e4c <rb_set_nb@plt>
   11338:	ldr	r0, [pc, #144]	; 113d0 <rb_base64_encode@plt+0x3c8>
   1133c:	ldr	r0, [pc, r0]
   11340:	ldr	r0, [r0, #20]
   11344:	bl	10e4c <rb_set_nb@plt>
   11348:	ldr	r0, [pc, #132]	; 113d4 <rb_base64_encode@plt+0x3cc>
   1134c:	ldr	r1, [pc, #132]	; 113d8 <rb_base64_encode@plt+0x3d0>
   11350:	mov	r2, #0
   11354:	mov	r3, #10
   11358:	add	r0, pc, r0
   1135c:	add	r1, pc, r1
   11360:	bl	10de0 <rb_event_addish@plt>
   11364:	ldr	r0, [pc, #112]	; 113dc <rb_base64_encode@plt+0x3d4>
   11368:	mov	r1, #0
   1136c:	ldr	r0, [pc, r0]
   11370:	ldr	r0, [r0, #20]
   11374:	bl	1153c <rb_base64_encode@plt+0x534>
   11378:	ldr	r1, [pc, #96]	; 113e0 <rb_base64_encode@plt+0x3d8>
   1137c:	ldr	r1, [pc, r1]
   11380:	ldr	r0, [r1, #16]
   11384:	bl	115ac <rb_base64_encode@plt+0x5a4>
   11388:	mov	r0, #0
   1138c:	bl	10e94 <rb_lib_loop@plt>
   11390:	mov	r0, r6
   11394:	mov	r1, #2
   11398:	bl	10fa8 <dup2@plt>
   1139c:	cmp	r6, #3
   113a0:	bge	11298 <rb_base64_encode@plt+0x290>
   113a4:	b	112a0 <rb_base64_encode@plt+0x298>
   113a8:	andeq	r3, r0, ip, asr #32
   113ac:	andeq	r3, r0, r3, asr #32
   113b0:	andeq	r3, r0, ip, lsr r0
   113b4:	andeq	r3, r1, ip, ror #29
   113b8:	andeq	r2, r0, r4, asr #31
   113bc:	andeq	r3, r1, r4, lsl #28
   113c0:	andeq	r2, r0, r2, lsl pc
   113c4:	andeq	r3, r1, r4, ror #27
   113c8:	andeq	r2, r0, r6, lsl #30
   113cc:	andeq	r3, r1, r4, asr #27
   113d0:			; <UNDEFINED> instruction: 0x00013db0
   113d4:	ldrdeq	r2, [r0], -r4
   113d8:	andeq	r0, r0, r0, ror #2
   113dc:	andeq	r3, r1, r0, lsl #27
   113e0:	andeq	r3, r1, r0, ror sp
   113e4:	andeq	r3, r1, r4, asr pc
   113e8:	andeq	r3, r0, sp
   113ec:	andeq	r3, r0, sl, lsr #32
   113f0:	push	{r4, r5, fp, lr}
   113f4:	add	fp, sp, #8
   113f8:	sub	sp, sp, #144	; 0x90
   113fc:	mov	r0, #1
   11400:	add	r4, sp, #4
   11404:	str	r0, [sp, #4]
   11408:	mov	r0, #0
   1140c:	add	r5, r4, #4
   11410:	str	r0, [sp, #136]	; 0x88
   11414:	mov	r0, r5
   11418:	bl	10db0 <sigemptyset@plt>
   1141c:	mov	r0, r5
   11420:	mov	r1, #13
   11424:	bl	10f18 <sigaddset@plt>
   11428:	mov	r0, r5
   1142c:	mov	r1, #14
   11430:	bl	10f18 <sigaddset@plt>
   11434:	mov	r0, r5
   11438:	mov	r1, #5
   1143c:	bl	10f18 <sigaddset@plt>
   11440:	mov	r0, r5
   11444:	mov	r1, #28
   11448:	bl	10f18 <sigaddset@plt>
   1144c:	mov	r0, #28
   11450:	mov	r1, r4
   11454:	mov	r2, #0
   11458:	bl	10f6c <sigaction@plt>
   1145c:	mov	r0, #13
   11460:	mov	r1, r4
   11464:	mov	r2, #0
   11468:	bl	10f6c <sigaction@plt>
   1146c:	mov	r0, #5
   11470:	mov	r1, r4
   11474:	mov	r2, #0
   11478:	bl	10f6c <sigaction@plt>
   1147c:	ldr	r0, [pc, #28]	; 114a0 <rb_base64_encode@plt+0x498>
   11480:	mov	r1, r4
   11484:	mov	r2, #0
   11488:	add	r0, pc, r0
   1148c:	str	r0, [sp, #4]
   11490:	mov	r0, #14
   11494:	bl	10f6c <sigaction@plt>
   11498:	sub	sp, fp, #8
   1149c:	pop	{r4, r5, fp, pc}
   114a0:	andeq	r0, r0, ip, asr #9
   114a4:	push	{fp, lr}
   114a8:	mov	fp, sp
   114ac:	mov	r1, r0
   114b0:	mov	r0, #1
   114b4:	bl	10e40 <calloc@plt>
   114b8:	cmp	r0, #0
   114bc:	popne	{fp, pc}
   114c0:	bl	10f54 <rb_outofmemory@plt>
   114c4:	push	{r4, r5, fp, lr}
   114c8:	add	fp, sp, #8
   114cc:	ldr	r5, [pc, #96]	; 11534 <rb_base64_encode@plt+0x52c>
   114d0:	ldr	r5, [pc, r5]
   114d4:	cmp	r5, #0
   114d8:	beq	1151c <rb_base64_encode@plt+0x514>
   114dc:	ldr	r4, [r5]
   114e0:	ldr	r5, [r5, #8]
   114e4:	add	r0, r4, #52	; 0x34
   114e8:	bl	10ee8 <rb_linebuf_donebuf@plt>
   114ec:	add	r0, r4, #24
   114f0:	bl	10ee8 <rb_linebuf_donebuf@plt>
   114f4:	ldr	r0, [r4, #20]
   114f8:	bl	10f30 <rb_free_rawbuffer@plt>
   114fc:	ldr	r0, [r4, #16]
   11500:	bl	10f30 <rb_free_rawbuffer@plt>
   11504:	cmp	r4, #0
   11508:	beq	114d4 <rb_base64_encode@plt+0x4cc>
   1150c:	mov	r0, r4
   11510:	bl	10e88 <free@plt>
   11514:	cmp	r5, #0
   11518:	bne	114dc <rb_base64_encode@plt+0x4d4>
   1151c:	ldr	r0, [pc, #20]	; 11538 <rb_base64_encode@plt+0x530>
   11520:	mov	r1, #0
   11524:	add	r0, pc, r0
   11528:	str	r1, [r0]
   1152c:	str	r1, [r0, #4]
   11530:	pop	{r4, r5, fp, pc}
   11534:	andeq	r3, r1, r0, lsr #24
   11538:	andeq	r3, r1, ip, asr #23
   1153c:	push	{r4, r5, r6, r7, fp, lr}
   11540:	add	fp, sp, #16
   11544:	sub	sp, sp, #16384	; 0x4000
   11548:	mov	r4, r0
   1154c:	mov	r5, sp
   11550:	mov	r0, r4
   11554:	mov	r1, r5
   11558:	mov	r2, #16384	; 0x4000
   1155c:	bl	10ea0 <rb_read@plt>
   11560:	cmp	r0, #0
   11564:	bgt	11550 <rb_base64_encode@plt+0x548>
   11568:	beq	115a0 <rb_base64_encode@plt+0x598>
   1156c:	bl	10ffc <__errno_location@plt>
   11570:	ldr	r0, [r0]
   11574:	bl	10dec <rb_ignore_errno@plt>
   11578:	cmp	r0, #0
   1157c:	beq	115a0 <rb_base64_encode@plt+0x598>
   11580:	ldr	r2, [pc, #32]	; 115a8 <rb_base64_encode@plt+0x5a0>
   11584:	mov	r0, r4
   11588:	mov	r1, #1
   1158c:	mov	r3, #0
   11590:	add	r2, pc, r2
   11594:	bl	10e04 <rb_setselect@plt>
   11598:	sub	sp, fp, #16
   1159c:	pop	{r4, r5, r6, r7, fp, pc}
   115a0:	mov	r0, #0
   115a4:	bl	10ff0 <exit@plt>
   115a8:			; <UNDEFINED> instruction: 0xffffffa4
   115ac:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   115b0:	add	fp, sp, #28
   115b4:	sub	sp, sp, #12
   115b8:	mov	r4, r1
   115bc:	mov	r0, #1
   115c0:	mov	r1, #40	; 0x28
   115c4:	bl	10e40 <calloc@plt>
   115c8:	cmp	r0, #0
   115cc:	beq	11948 <rb_base64_encode@plt+0x940>
   115d0:	mov	r5, r0
   115d4:	add	r0, r4, #24
   115d8:	mov	r8, #16384	; 0x4000
   115dc:	mov	r7, #4
   115e0:	mov	r9, #0
   115e4:	str	r0, [sp, #8]
   115e8:	b	1160c <rb_base64_encode@plt+0x604>
   115ec:	mov	r0, #0
   115f0:	str	r0, [r5, #36]	; 0x24
   115f4:	mov	r0, #1
   115f8:	mov	r1, #40	; 0x28
   115fc:	bl	10e40 <calloc@plt>
   11600:	mov	r5, r0
   11604:	cmp	r0, #0
   11608:	beq	11948 <rb_base64_encode@plt+0x940>
   1160c:	mov	r0, #1
   11610:	mov	r1, #16384	; 0x4000
   11614:	bl	10e40 <calloc@plt>
   11618:	cmp	r0, #0
   1161c:	beq	11948 <rb_base64_encode@plt+0x940>
   11620:	str	r0, [r5, #12]
   11624:	str	r8, [r5, #16]
   11628:	mov	r1, r0
   1162c:	add	r3, r5, #20
   11630:	mov	r2, #16384	; 0x4000
   11634:	ldr	r0, [r4, #16]
   11638:	str	r7, [sp]
   1163c:	bl	10f9c <rb_recv_fd_buf@plt>
   11640:	mov	r6, r0
   11644:	cmp	r0, #0
   11648:	ble	116e0 <rb_base64_encode@plt+0x6d8>
   1164c:	str	r6, [r5, #16]
   11650:	ldr	r0, [r4, #28]
   11654:	str	r5, [r5]
   11658:	cmp	r0, #0
   1165c:	stmib	r5, {r0, r9}
   11660:	beq	11670 <rb_base64_encode@plt+0x668>
   11664:	add	r0, r0, #8
   11668:	str	r5, [r0]
   1166c:	b	11680 <rb_base64_encode@plt+0x678>
   11670:	ldr	r0, [sp, #8]
   11674:	ldr	r0, [r0]
   11678:	cmp	r0, #0
   1167c:	beq	116d8 <rb_base64_encode@plt+0x6d0>
   11680:	str	r5, [r4, #28]
   11684:	ldr	r0, [r4, #32]
   11688:	add	r0, r0, #1
   1168c:	str	r0, [r4, #32]
   11690:	ldr	r0, [r5, #20]
   11694:	cmp	r0, #0
   11698:	beq	115ec <rb_base64_encode@plt+0x5e4>
   1169c:	ldr	r0, [r5, #24]
   116a0:	cmp	r0, #0
   116a4:	beq	116c8 <rb_base64_encode@plt+0x6c0>
   116a8:	ldr	r0, [r5, #28]
   116ac:	cmp	r0, #0
   116b0:	beq	116d0 <rb_base64_encode@plt+0x6c8>
   116b4:	ldr	r0, [r5, #32]
   116b8:	cmp	r0, #0
   116bc:	mov	r0, #4
   116c0:	movweq	r0, #3
   116c4:	b	115f0 <rb_base64_encode@plt+0x5e8>
   116c8:	mov	r0, #1
   116cc:	b	115f0 <rb_base64_encode@plt+0x5e8>
   116d0:	mov	r0, #2
   116d4:	b	115f0 <rb_base64_encode@plt+0x5e8>
   116d8:	ldr	r0, [sp, #8]
   116dc:	b	11668 <rb_base64_encode@plt+0x660>
   116e0:	ldr	r0, [r5, #12]
   116e4:	cmp	r0, #0
   116e8:	beq	116f0 <rb_base64_encode@plt+0x6e8>
   116ec:	bl	10e88 <free@plt>
   116f0:	mov	r0, r5
   116f4:	bl	10e88 <free@plt>
   116f8:	cmp	r6, #0
   116fc:	beq	1194c <rb_base64_encode@plt+0x944>
   11700:	bl	10ffc <__errno_location@plt>
   11704:	ldr	r0, [r0]
   11708:	bl	10dec <rb_ignore_errno@plt>
   1170c:	cmp	r0, #0
   11710:	beq	1194c <rb_base64_encode@plt+0x944>
   11714:	ldr	r0, [sp, #8]
   11718:	ldr	sl, [r0]
   1171c:	cmp	sl, #0
   11720:	beq	11928 <rb_base64_encode@plt+0x920>
   11724:	mov	r8, #0
   11728:	ldr	r5, [sl]
   1172c:	ldr	r9, [sl, #8]
   11730:	ldr	r0, [r5, #12]
   11734:	ldrb	r0, [r0]
   11738:	cmp	r0, #65	; 0x41
   1173c:	bne	118c0 <rb_base64_encode@plt+0x8b8>
   11740:	ldr	r0, [r5, #36]	; 0x24
   11744:	cmp	r0, #2
   11748:	bne	11814 <rb_base64_encode@plt+0x80c>
   1174c:	ldr	r0, [r5, #16]
   11750:	cmp	r0, #5
   11754:	bne	1181c <rb_base64_encode@plt+0x814>
   11758:	ldr	r7, [r5, #20]
   1175c:	ldr	r8, [r5, #24]
   11760:	mov	r0, #1
   11764:	mov	r1, #168	; 0xa8
   11768:	bl	10e40 <calloc@plt>
   1176c:	cmp	r0, #0
   11770:	beq	11948 <rb_base64_encode@plt+0x940>
   11774:	mov	r6, r0
   11778:	str	r4, [r0, #12]
   1177c:	mvn	r0, #0
   11780:	add	r1, r6, #80	; 0x50
   11784:	stm	r1, {r0, r7, r8}
   11788:	mov	r0, r7
   1178c:	bl	10e4c <rb_set_nb@plt>
   11790:	mov	r0, r8
   11794:	bl	10e4c <rb_set_nb@plt>
   11798:	add	r0, r6, #52	; 0x34
   1179c:	bl	10fb4 <rb_linebuf_newbuf@plt>
   117a0:	add	r0, r6, #24
   117a4:	bl	10fb4 <rb_linebuf_newbuf@plt>
   117a8:	bl	10f84 <rb_new_rawbuffer@plt>
   117ac:	str	r0, [r6, #20]
   117b0:	bl	10f84 <rb_new_rawbuffer@plt>
   117b4:	str	r0, [r6, #16]
   117b8:	movw	r1, #19923	; 0x4dd3
   117bc:	mov	r8, #0
   117c0:	ldr	r0, [r5, #12]
   117c4:	movt	r1, #4194	; 0x1062
   117c8:	ldr	r0, [r0, #1]
   117cc:	umull	r1, r2, r0, r1
   117d0:	str	r0, [r6, #80]	; 0x50
   117d4:	ldr	r7, [pc, #376]	; 11954 <rb_base64_encode@plt+0x94c>
   117d8:	str	r6, [r6]
   117dc:	str	r8, [r6, #4]
   117e0:	lsr	r1, r2, #7
   117e4:	mov	r2, #2000	; 0x7d0
   117e8:	mls	r0, r1, r2, r0
   117ec:	add	r7, pc, r7
   117f0:	mov	r1, r7
   117f4:	add	r0, r0, r0, lsl #1
   117f8:	ldr	r2, [r1, r0, lsl #2]!
   117fc:	cmp	r2, #0
   11800:	str	r2, [r6, #8]
   11804:	beq	11840 <rb_base64_encode@plt+0x838>
   11808:	add	r2, r2, #4
   1180c:	str	r6, [r2]
   11810:	b	11850 <rb_base64_encode@plt+0x848>
   11814:	cmp	r0, #1
   11818:	blt	118c0 <rb_base64_encode@plt+0x8b8>
   1181c:	add	r6, r5, #20
   11820:	mov	r7, #0
   11824:	ldr	r0, [r6, r7, lsl #2]
   11828:	bl	10f00 <rb_close@plt>
   1182c:	ldr	r0, [r5, #36]	; 0x24
   11830:	add	r7, r7, #1
   11834:	cmp	r7, r0
   11838:	blt	11824 <rb_base64_encode@plt+0x81c>
   1183c:	b	118c0 <rb_base64_encode@plt+0x8b8>
   11840:	add	r2, r7, r0, lsl #2
   11844:	ldr	r3, [r2, #4]!
   11848:	cmp	r3, #0
   1184c:	streq	r6, [r2]
   11850:	add	r0, r7, r0, lsl #2
   11854:	str	r6, [r1]
   11858:	ldr	r1, [r0, #8]
   1185c:	add	r1, r1, #1
   11860:	str	r1, [r0, #8]
   11864:	ldrb	r0, [r6, #128]	; 0x80
   11868:	orr	r0, r0, #4
   1186c:	strb	r0, [r6, #128]	; 0x80
   11870:	ldr	r0, [r6, #84]	; 0x54
   11874:	bl	10dc8 <rb_get_type@plt>
   11878:	tst	r0, #64	; 0x40
   1187c:	beq	1188c <rb_base64_encode@plt+0x884>
   11880:	ldr	r0, [r6, #84]	; 0x54
   11884:	mov	r1, #4
   11888:	bl	10eac <rb_set_type@plt>
   1188c:	ldr	r0, [r6, #88]	; 0x58
   11890:	bl	10dc8 <rb_get_type@plt>
   11894:	cmp	r0, #64	; 0x40
   11898:	bne	118a8 <rb_base64_encode@plt+0x8a0>
   1189c:	ldr	r0, [r6, #88]	; 0x58
   118a0:	mov	r1, #4
   118a4:	bl	10eac <rb_set_type@plt>
   118a8:	ldr	r0, [r6, #84]	; 0x54
   118ac:	mov	r1, r6
   118b0:	bl	11960 <rb_base64_encode@plt+0x958>
   118b4:	ldr	r0, [r6, #88]	; 0x58
   118b8:	mov	r1, r6
   118bc:	bl	11aa0 <rb_base64_encode@plt+0xa98>
   118c0:	ldr	r0, [sl, #8]
   118c4:	ldr	r1, [sl, #4]
   118c8:	cmp	r0, #0
   118cc:	beq	118dc <rb_base64_encode@plt+0x8d4>
   118d0:	str	r1, [r0, #4]
   118d4:	ldr	r1, [sl, #4]
   118d8:	b	118e0 <rb_base64_encode@plt+0x8d8>
   118dc:	str	r1, [r4, #28]
   118e0:	cmp	r1, #0
   118e4:	ldr	r2, [sp, #8]
   118e8:	addne	r2, r1, #8
   118ec:	str	r0, [r2]
   118f0:	str	r8, [sl, #4]
   118f4:	str	r8, [sl, #8]
   118f8:	ldr	r0, [r4, #32]
   118fc:	sub	r0, r0, #1
   11900:	str	r0, [r4, #32]
   11904:	ldr	r0, [r5, #12]
   11908:	cmp	r0, #0
   1190c:	beq	11914 <rb_base64_encode@plt+0x90c>
   11910:	bl	10e88 <free@plt>
   11914:	mov	r0, r5
   11918:	bl	10e88 <free@plt>
   1191c:	cmp	r9, #0
   11920:	mov	sl, r9
   11924:	bne	11728 <rb_base64_encode@plt+0x720>
   11928:	ldr	r0, [r4, #16]
   1192c:	ldr	r2, [pc, #36]	; 11958 <rb_base64_encode@plt+0x950>
   11930:	mov	r1, #1
   11934:	mov	r3, r4
   11938:	add	r2, pc, r2
   1193c:	sub	sp, fp, #28
   11940:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11944:	b	10e04 <rb_setselect@plt>
   11948:	bl	10f54 <rb_outofmemory@plt>
   1194c:	mov	r0, #0
   11950:	bl	10ff0 <exit@plt>
   11954:	andeq	r3, r1, r0, lsl r9
   11958:			; <UNDEFINED> instruction: 0xfffffc6c
   1195c:	bx	lr
   11960:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   11964:	add	fp, sp, #24
   11968:	sub	sp, sp, #16384	; 0x4000
   1196c:	mov	r4, r1
   11970:	mov	r5, r0
   11974:	mov	r0, sp
   11978:	mov	r1, #0
   1197c:	mov	r2, #16384	; 0x4000
   11980:	bl	10e58 <memset@plt>
   11984:	cmp	r4, #0
   11988:	beq	11a10 <rb_base64_encode@plt+0xa08>
   1198c:	ldrb	r0, [r4, #128]	; 0x80
   11990:	tst	r0, #2
   11994:	bne	11a10 <rb_base64_encode@plt+0xa08>
   11998:	bne	11a10 <rb_base64_encode@plt+0xa08>
   1199c:	mov	r6, sp
   119a0:	mov	r0, r5
   119a4:	mov	r1, r6
   119a8:	mov	r2, #16384	; 0x4000
   119ac:	bl	10ea0 <rb_read@plt>
   119b0:	cmn	r0, #1
   119b4:	ble	11a18 <rb_base64_encode@plt+0xa10>
   119b8:	mov	r7, r0
   119bc:	cmp	r0, #0
   119c0:	beq	11a58 <rb_base64_encode@plt+0xa50>
   119c4:	ldr	r0, [r4, #20]
   119c8:	mov	r1, r6
   119cc:	mov	r2, r7
   119d0:	bl	10fd8 <rb_rawbuf_append@plt>
   119d4:	ldrb	r0, [r4, #128]	; 0x80
   119d8:	tst	r0, #8
   119dc:	bne	119f4 <rb_base64_encode@plt+0x9ec>
   119e0:	mov	r0, r4
   119e4:	bl	11f40 <rb_base64_encode@plt+0xf38>
   119e8:	cmp	r7, #16384	; 0x4000
   119ec:	bcs	11a04 <rb_base64_encode@plt+0x9fc>
   119f0:	b	11a74 <rb_base64_encode@plt+0xa6c>
   119f4:	mov	r0, r4
   119f8:	bl	1216c <rb_base64_encode@plt+0x1164>
   119fc:	cmp	r7, #16384	; 0x4000
   11a00:	bcc	11a74 <rb_base64_encode@plt+0xa6c>
   11a04:	ldrb	r0, [r4, #128]	; 0x80
   11a08:	tst	r0, #2
   11a0c:	beq	119a0 <rb_base64_encode@plt+0x998>
   11a10:	sub	sp, fp, #24
   11a14:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   11a18:	bl	10ffc <__errno_location@plt>
   11a1c:	ldr	r0, [r0]
   11a20:	bl	10dec <rb_ignore_errno@plt>
   11a24:	cmp	r0, #0
   11a28:	beq	11a58 <rb_base64_encode@plt+0xa50>
   11a2c:	ldr	r2, [pc, #96]	; 11a94 <rb_base64_encode@plt+0xa8c>
   11a30:	mov	r0, r5
   11a34:	mov	r1, #1
   11a38:	mov	r3, r4
   11a3c:	add	r2, pc, r2
   11a40:	bl	10e04 <rb_setselect@plt>
   11a44:	ldr	r0, [r4, #88]	; 0x58
   11a48:	mov	r1, r4
   11a4c:	bl	11c0c <rb_base64_encode@plt+0xc04>
   11a50:	sub	sp, fp, #24
   11a54:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   11a58:	ldr	r2, [pc, #56]	; 11a98 <rb_base64_encode@plt+0xa90>
   11a5c:	mov	r0, r4
   11a60:	mov	r1, #0
   11a64:	add	r2, pc, r2
   11a68:	bl	11cd8 <rb_base64_encode@plt+0xcd0>
   11a6c:	sub	sp, fp, #24
   11a70:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   11a74:	ldr	r2, [pc, #32]	; 11a9c <rb_base64_encode@plt+0xa94>
   11a78:	mov	r0, r5
   11a7c:	mov	r1, #1
   11a80:	mov	r3, r4
   11a84:	add	r2, pc, r2
   11a88:	bl	10e04 <rb_setselect@plt>
   11a8c:	sub	sp, fp, #24
   11a90:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   11a94:			; <UNDEFINED> instruction: 0xffffff1c
   11a98:	ldrdeq	r2, [r0], -r9
   11a9c:			; <UNDEFINED> instruction: 0xfffffed4
   11aa0:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   11aa4:	add	fp, sp, #24
   11aa8:	sub	sp, sp, #16384	; 0x4000
   11aac:	mov	r4, r1
   11ab0:	mov	r0, sp
   11ab4:	mov	r1, #0
   11ab8:	mov	r2, #16384	; 0x4000
   11abc:	bl	10e58 <memset@plt>
   11ac0:	cmp	r4, #0
   11ac4:	beq	11bd8 <rb_base64_encode@plt+0xbd0>
   11ac8:	ldrb	r0, [r4, #128]	; 0x80
   11acc:	tst	r0, #2
   11ad0:	bne	11bd8 <rb_base64_encode@plt+0xbd0>
   11ad4:	ldr	r0, [r4, #16]
   11ad8:	bl	10f24 <rb_rawbuf_length@plt>
   11adc:	cmp	r0, #4096	; 0x1000
   11ae0:	blt	11b24 <rb_base64_encode@plt+0xb1c>
   11ae4:	ldrb	r0, [r4, #128]	; 0x80
   11ae8:	mov	r1, #1
   11aec:	mov	r2, #0
   11af0:	mov	r3, #0
   11af4:	orr	r0, r0, #1
   11af8:	strb	r0, [r4, #128]	; 0x80
   11afc:	ldr	r0, [r4, #88]	; 0x58
   11b00:	bl	10e04 <rb_setselect@plt>
   11b04:	ldrb	r0, [r4, #128]	; 0x80
   11b08:	tst	r0, #8
   11b0c:	beq	11bd8 <rb_base64_encode@plt+0xbd0>
   11b10:	ldr	r0, [r4, #84]	; 0x54
   11b14:	mov	r1, r4
   11b18:	bl	12764 <rb_base64_encode@plt+0x175c>
   11b1c:	sub	sp, fp, #24
   11b20:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   11b24:	add	r5, r4, #52	; 0x34
   11b28:	add	r7, r4, #112	; 0x70
   11b2c:	mov	r6, sp
   11b30:	ldrb	r0, [r4, #128]	; 0x80
   11b34:	tst	r0, #2
   11b38:	bne	11bd8 <rb_base64_encode@plt+0xbd0>
   11b3c:	ldr	r0, [r4, #88]	; 0x58
   11b40:	mov	r1, r6
   11b44:	mov	r2, #16384	; 0x4000
   11b48:	bl	10ea0 <rb_read@plt>
   11b4c:	cmp	r0, #0
   11b50:	beq	11be0 <rb_base64_encode@plt+0xbd8>
   11b54:	mov	r2, r0
   11b58:	cmn	r0, #1
   11b5c:	ble	11ba0 <rb_base64_encode@plt+0xb98>
   11b60:	ldrd	r0, [r7]
   11b64:	mov	r3, #0
   11b68:	adds	r0, r0, r2
   11b6c:	adc	r1, r1, r2, asr #31
   11b70:	strd	r0, [r7]
   11b74:	mov	r0, r5
   11b78:	mov	r1, r6
   11b7c:	bl	10e64 <rb_linebuf_parse@plt>
   11b80:	ldrb	r0, [r4, #128]	; 0x80
   11b84:	tst	r0, #2
   11b88:	bne	11bd8 <rb_base64_encode@plt+0xbd0>
   11b8c:	ldr	r0, [r4, #16]
   11b90:	bl	10f24 <rb_rawbuf_length@plt>
   11b94:	cmp	r0, #4096	; 0x1000
   11b98:	blt	11b30 <rb_base64_encode@plt+0xb28>
   11b9c:	b	11ae4 <rb_base64_encode@plt+0xadc>
   11ba0:	bl	10ffc <__errno_location@plt>
   11ba4:	ldr	r0, [r0]
   11ba8:	bl	10dec <rb_ignore_errno@plt>
   11bac:	cmp	r0, #0
   11bb0:	beq	11be0 <rb_base64_encode@plt+0xbd8>
   11bb4:	ldr	r0, [r4, #88]	; 0x58
   11bb8:	ldr	r2, [pc, #72]	; 11c08 <rb_base64_encode@plt+0xc00>
   11bbc:	mov	r1, #1
   11bc0:	mov	r3, r4
   11bc4:	add	r2, pc, r2
   11bc8:	bl	10e04 <rb_setselect@plt>
   11bcc:	ldrb	r0, [r4, #128]	; 0x80
   11bd0:	tst	r0, #8
   11bd4:	bne	11bf8 <rb_base64_encode@plt+0xbf0>
   11bd8:	sub	sp, fp, #24
   11bdc:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   11be0:	mov	r0, r4
   11be4:	mov	r1, #0
   11be8:	mov	r2, #0
   11bec:	bl	11cd8 <rb_base64_encode@plt+0xcd0>
   11bf0:	sub	sp, fp, #24
   11bf4:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   11bf8:	mov	r0, r4
   11bfc:	bl	1253c <rb_base64_encode@plt+0x1534>
   11c00:	sub	sp, fp, #24
   11c04:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   11c08:			; <UNDEFINED> instruction: 0xfffffed4
   11c0c:	push	{r4, r5, r6, r7, fp, lr}
   11c10:	add	fp, sp, #16
   11c14:	mov	r5, r0
   11c18:	ldrb	r0, [r1, #128]	; 0x80
   11c1c:	tst	r0, #2
   11c20:	popne	{r4, r5, r6, r7, fp, pc}
   11c24:	add	r6, r1, #24
   11c28:	mov	r4, r1
   11c2c:	mov	r0, r5
   11c30:	mov	r1, r6
   11c34:	bl	10ec4 <rb_linebuf_flush@plt>
   11c38:	cmp	r0, #1
   11c3c:	blt	11c68 <rb_base64_encode@plt+0xc60>
   11c40:	add	r7, r4, #120	; 0x78
   11c44:	ldrd	r2, [r7]
   11c48:	mov	r1, r6
   11c4c:	adds	r2, r2, r0
   11c50:	adc	r3, r3, r0, asr #31
   11c54:	mov	r0, r5
   11c58:	strd	r2, [r7]
   11c5c:	bl	10ec4 <rb_linebuf_flush@plt>
   11c60:	cmp	r0, #0
   11c64:	bgt	11c44 <rb_base64_encode@plt+0xc3c>
   11c68:	cmp	r0, #0
   11c6c:	beq	11cac <rb_base64_encode@plt+0xca4>
   11c70:	bl	10ffc <__errno_location@plt>
   11c74:	ldr	r0, [r0]
   11c78:	bl	10dec <rb_ignore_errno@plt>
   11c7c:	cmp	r0, #0
   11c80:	beq	11cac <rb_base64_encode@plt+0xca4>
   11c84:	ldr	r1, [r4, #40]	; 0x28
   11c88:	ldr	r0, [r4, #88]	; 0x58
   11c8c:	cmp	r1, #1
   11c90:	blt	11cc0 <rb_base64_encode@plt+0xcb8>
   11c94:	ldr	r2, [pc, #56]	; 11cd4 <rb_base64_encode@plt+0xccc>
   11c98:	mov	r1, #2
   11c9c:	mov	r3, r4
   11ca0:	add	r2, pc, r2
   11ca4:	pop	{r4, r5, r6, r7, fp, lr}
   11ca8:	b	10e04 <rb_setselect@plt>
   11cac:	mov	r0, r4
   11cb0:	mov	r1, #0
   11cb4:	mov	r2, #0
   11cb8:	pop	{r4, r5, r6, r7, fp, lr}
   11cbc:	b	11cd8 <rb_base64_encode@plt+0xcd0>
   11cc0:	mov	r1, #2
   11cc4:	mov	r2, #0
   11cc8:	mov	r3, #0
   11ccc:	pop	{r4, r5, r6, r7, fp, lr}
   11cd0:	b	10e04 <rb_setselect@plt>
   11cd4:			; <UNDEFINED> instruction: 0xffffff64
   11cd8:	sub	sp, sp, #4
   11cdc:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   11ce0:	add	fp, sp, #24
   11ce4:	sub	sp, sp, #388	; 0x184
   11ce8:	str	r3, [fp, #8]
   11cec:	mov	r4, r0
   11cf0:	ldrb	r0, [r0, #128]	; 0x80
   11cf4:	tst	r0, #2
   11cf8:	bne	11f1c <rb_base64_encode@plt+0xf14>
   11cfc:	tst	r0, #8
   11d00:	mov	r5, r2
   11d04:	mov	r6, r1
   11d08:	movne	r0, r4
   11d0c:	blne	1253c <rb_base64_encode@plt+0x1534>
   11d10:	ldr	r0, [r4, #16]
   11d14:	ldr	r1, [r4, #84]	; 0x54
   11d18:	bl	10fe4 <rb_rawbuf_flush@plt>
   11d1c:	ldr	r0, [r4, #88]	; 0x58
   11d20:	add	r1, r4, #24
   11d24:	bl	10ec4 <rb_linebuf_flush@plt>
   11d28:	ldr	r0, [r4, #84]	; 0x54
   11d2c:	bl	10f00 <rb_close@plt>
   11d30:	ldrb	r0, [r4, #128]	; 0x80
   11d34:	movw	r3, #19923	; 0x4dd3
   11d38:	movt	r3, #4194	; 0x1062
   11d3c:	orr	r0, r0, #2
   11d40:	strb	r0, [r4, #128]	; 0x80
   11d44:	ldr	r2, [r4, #80]	; 0x50
   11d48:	ldr	r0, [r4, #8]
   11d4c:	ldr	r1, [r4, #4]
   11d50:	umull	r3, r7, r2, r3
   11d54:	cmp	r0, #0
   11d58:	lsr	r3, r7, #7
   11d5c:	mov	r7, #2000	; 0x7d0
   11d60:	mls	r2, r3, r7, r2
   11d64:	ldr	r3, [pc, #452]	; 11f30 <rb_base64_encode@plt+0xf28>
   11d68:	add	r2, r2, r2, lsl #1
   11d6c:	add	r3, pc, r3
   11d70:	add	r2, r3, r2, lsl #2
   11d74:	beq	11d84 <rb_base64_encode@plt+0xd7c>
   11d78:	str	r1, [r0, #4]
   11d7c:	ldr	r1, [r4, #4]
   11d80:	b	11d88 <rb_base64_encode@plt+0xd80>
   11d84:	str	r1, [r2, #4]
   11d88:	cmp	r1, #0
   11d8c:	mov	r3, r2
   11d90:	mov	r7, #0
   11d94:	addne	r3, r1, #8
   11d98:	cmp	r6, #0
   11d9c:	str	r0, [r3]
   11da0:	str	r7, [r4, #4]
   11da4:	str	r7, [r4, #8]
   11da8:	cmpne	r5, #0
   11dac:	ldr	r0, [r2, #8]
   11db0:	sub	r0, r0, #1
   11db4:	str	r0, [r2, #8]
   11db8:	ldr	r0, [r4, #88]	; 0x58
   11dbc:	bne	11df0 <rb_base64_encode@plt+0xde8>
   11dc0:	bl	10f00 <rb_close@plt>
   11dc4:	stm	r4, {r4, r7}
   11dc8:	ldr	r1, [pc, #356]	; 11f34 <rb_base64_encode@plt+0xf2c>
   11dcc:	ldr	r1, [pc, r1]
   11dd0:	str	r1, [r4, #8]
   11dd4:	cmp	r1, #0
   11dd8:	ldr	r0, [pc, #344]	; 11f38 <rb_base64_encode@plt+0xf30>
   11ddc:	add	r0, pc, r0
   11de0:	beq	11ecc <rb_base64_encode@plt+0xec4>
   11de4:	add	r1, r1, #4
   11de8:	str	r4, [r1]
   11dec:	b	11edc <rb_base64_encode@plt+0xed4>
   11df0:	ldr	r2, [pc, #324]	; 11f3c <rb_base64_encode@plt+0xf34>
   11df4:	mov	r1, #1
   11df8:	mov	r3, r4
   11dfc:	add	r2, pc, r2
   11e00:	bl	10e04 <rb_setselect@plt>
   11e04:	ldr	r0, [r4, #88]	; 0x58
   11e08:	mov	r1, #2
   11e0c:	mov	r2, #0
   11e10:	mov	r3, #0
   11e14:	bl	10e04 <rb_setselect@plt>
   11e18:	sub	r6, fp, #156	; 0x9c
   11e1c:	add	r3, fp, #8
   11e20:	mov	r1, #128	; 0x80
   11e24:	mov	r2, r5
   11e28:	mov	r0, r6
   11e2c:	str	r3, [fp, #-28]	; 0xffffffe4
   11e30:	bl	10e28 <vsnprintf@plt>
   11e34:	mov	r0, #68	; 0x44
   11e38:	mov	r1, r6
   11e3c:	mov	r2, #251	; 0xfb
   11e40:	strb	r0, [sp]
   11e44:	ldr	r0, [r4, #80]	; 0x50
   11e48:	str	r0, [sp, #1]
   11e4c:	mov	r0, sp
   11e50:	orr	r0, r0, #5
   11e54:	bl	10e70 <rb_strlcpy@plt>
   11e58:	mov	r0, r6
   11e5c:	bl	10ed0 <strlen@plt>
   11e60:	ldr	r4, [r4, #12]
   11e64:	mov	r6, r0
   11e68:	mov	r0, #1
   11e6c:	mov	r1, #40	; 0x28
   11e70:	bl	10e40 <calloc@plt>
   11e74:	cmp	r0, #0
   11e78:	beq	11f2c <rb_base64_encode@plt+0xf24>
   11e7c:	add	r6, r6, #6
   11e80:	mov	r5, r0
   11e84:	mov	r0, #1
   11e88:	mov	r1, r6
   11e8c:	bl	10e40 <calloc@plt>
   11e90:	cmp	r0, #0
   11e94:	beq	11f2c <rb_base64_encode@plt+0xf24>
   11e98:	mov	r1, sp
   11e9c:	mov	r2, r6
   11ea0:	str	r0, [r5, #12]
   11ea4:	str	r6, [r5, #16]
   11ea8:	bl	10edc <memcpy@plt>
   11eac:	str	r5, [r5]
   11eb0:	ldr	r0, [r4, #40]	; 0x28
   11eb4:	cmp	r0, #0
   11eb8:	str	r0, [r5, #4]
   11ebc:	beq	11ef0 <rb_base64_encode@plt+0xee8>
   11ec0:	add	r0, r0, #8
   11ec4:	str	r5, [r0]
   11ec8:	b	11f00 <rb_base64_encode@plt+0xef8>
   11ecc:	mov	r1, r0
   11ed0:	ldr	r2, [r1, #4]!
   11ed4:	cmp	r2, #0
   11ed8:	streq	r4, [r1]
   11edc:	str	r4, [r0]
   11ee0:	ldr	r1, [r0, #8]
   11ee4:	add	r1, r1, #1
   11ee8:	str	r1, [r0, #8]
   11eec:	b	11f1c <rb_base64_encode@plt+0xf14>
   11ef0:	mov	r0, r4
   11ef4:	ldr	r1, [r0, #36]!	; 0x24
   11ef8:	cmp	r1, #0
   11efc:	streq	r5, [r0]
   11f00:	str	r5, [r4, #40]	; 0x28
   11f04:	ldr	r1, [r4, #44]	; 0x2c
   11f08:	ldr	r0, [r4, #16]
   11f0c:	add	r1, r1, #1
   11f10:	str	r1, [r4, #44]	; 0x2c
   11f14:	mov	r1, r4
   11f18:	bl	128ac <rb_base64_encode@plt+0x18a4>
   11f1c:	sub	sp, fp, #24
   11f20:	pop	{r4, r5, r6, r7, r8, r9, fp, lr}
   11f24:	add	sp, sp, #4
   11f28:	bx	lr
   11f2c:	bl	10f54 <rb_outofmemory@plt>
   11f30:	muleq	r1, r0, r3
   11f34:	andeq	r3, r1, r4, lsr #6
   11f38:	andeq	r3, r1, r4, lsl r3
   11f3c:	andeq	r0, r0, r0, lsl #17
   11f40:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11f44:	add	fp, sp, #28
   11f48:	sub	sp, sp, #124	; 0x7c
   11f4c:	sub	sp, sp, #16384	; 0x4000
   11f50:	add	r5, sp, #120	; 0x78
   11f54:	mov	r4, r0
   11f58:	mov	r1, #0
   11f5c:	mov	r2, #16384	; 0x4000
   11f60:	mov	r8, #0
   11f64:	mov	r0, r5
   11f68:	bl	10e58 <memset@plt>
   11f6c:	ldr	r0, [r4, #20]
   11f70:	mov	r1, r5
   11f74:	mov	r2, #16384	; 0x4000
   11f78:	bl	10f60 <rb_rawbuf_get@plt>
   11f7c:	cmp	r0, #0
   11f80:	beq	12050 <rb_base64_encode@plt+0x1048>
   11f84:	ldr	r9, [pc, #464]	; 1215c <rb_base64_encode@plt+0x1154>
   11f88:	movw	r0, #16366	; 0x3fee
   11f8c:	add	r6, r5, #16384	; 0x4000
   11f90:	add	sl, r4, #129	; 0x81
   11f94:	add	r7, r5, r0
   11f98:	add	r9, pc, r9
   11f9c:	b	11fd4 <rb_base64_encode@plt+0xfcc>
   11fa0:	strb	r8, [r0]
   11fa4:	mov	r0, sl
   11fa8:	mov	r2, #37	; 0x25
   11fac:	bl	10e70 <rb_strlcpy@plt>
   11fb0:	ldrb	r0, [r4, #128]	; 0x80
   11fb4:	orr	r0, r0, #8
   11fb8:	strb	r0, [r4, #128]	; 0x80
   11fbc:	ldr	r0, [r4, #20]
   11fc0:	mov	r1, r5
   11fc4:	mov	r2, #16384	; 0x4000
   11fc8:	bl	10f60 <rb_rawbuf_get@plt>
   11fcc:	cmp	r0, #0
   11fd0:	beq	12050 <rb_base64_encode@plt+0x1048>
   11fd4:	mov	r0, r5
   11fd8:	mov	r1, r9
   11fdc:	bl	10ef4 <rb_strcasestr@plt>
   11fe0:	cmp	r0, #0
   11fe4:	beq	11fbc <rb_base64_encode@plt+0xfb4>
   11fe8:	add	r1, r0, #18
   11fec:	cmp	r1, r6
   11ff0:	bcs	1201c <rb_base64_encode@plt+0x1014>
   11ff4:	ldrb	r1, [r0, #18]
   11ff8:	cmp	r1, #32
   11ffc:	cmpne	r1, #9
   12000:	bne	12018 <rb_base64_encode@plt+0x1010>
   12004:	add	r0, r0, #1
   12008:	cmp	r7, r0
   1200c:	bne	11ff4 <rb_base64_encode@plt+0xfec>
   12010:	mov	r1, r6
   12014:	b	11fa4 <rb_base64_encode@plt+0xf9c>
   12018:	add	r1, r0, #18
   1201c:	cmp	r1, r6
   12020:	bcs	11fa4 <rb_base64_encode@plt+0xf9c>
   12024:	mov	r0, r1
   12028:	ldrb	r2, [r0]
   1202c:	cmp	r2, #0
   12030:	beq	11fa4 <rb_base64_encode@plt+0xf9c>
   12034:	cmp	r2, #13
   12038:	cmpne	r2, #10
   1203c:	beq	11fa0 <rb_base64_encode@plt+0xf98>
   12040:	add	r0, r0, #1
   12044:	cmp	r6, r0
   12048:	bne	12028 <rb_base64_encode@plt+0x1020>
   1204c:	b	11fa4 <rb_base64_encode@plt+0xf9c>
   12050:	ldrb	r0, [r4, #128]	; 0x80
   12054:	tst	r0, #8
   12058:	beq	120e4 <rb_base64_encode@plt+0x10dc>
   1205c:	add	r5, sp, #24
   12060:	mov	r0, r5
   12064:	bl	12a10 <rb_base64_encode@plt+0x1a08>
   12068:	add	r6, r4, #129	; 0x81
   1206c:	mov	r0, r6
   12070:	bl	10ed0 <strlen@plt>
   12074:	mov	r2, r0
   12078:	mov	r0, r5
   1207c:	mov	r1, r6
   12080:	bl	12a50 <rb_base64_encode@plt+0x1a48>
   12084:	ldr	r1, [pc, #212]	; 12160 <rb_base64_encode@plt+0x1158>
   12088:	mov	r0, r5
   1208c:	mov	r2, #36	; 0x24
   12090:	add	r1, pc, r1
   12094:	bl	12a50 <rb_base64_encode@plt+0x1a48>
   12098:	add	r6, sp, #4
   1209c:	mov	r0, r5
   120a0:	mov	r1, r6
   120a4:	bl	13f1c <rb_base64_encode@plt+0x2f14>
   120a8:	mov	r0, r6
   120ac:	mov	r1, #20
   120b0:	bl	11008 <rb_base64_encode@plt>
   120b4:	mov	r5, r0
   120b8:	ldrb	r0, [r4, #128]	; 0x80
   120bc:	tst	r0, #2
   120c0:	beq	120f8 <rb_base64_encode@plt+0x10f0>
   120c4:	tst	r0, #2
   120c8:	beq	12118 <rb_base64_encode@plt+0x1110>
   120cc:	tst	r0, #2
   120d0:	beq	1213c <rb_base64_encode@plt+0x1134>
   120d4:	cmp	r5, #0
   120d8:	beq	120e4 <rb_base64_encode@plt+0x10dc>
   120dc:	mov	r0, r5
   120e0:	bl	10e88 <free@plt>
   120e4:	ldr	r0, [r4, #84]	; 0x54
   120e8:	mov	r1, r4
   120ec:	bl	12764 <rb_base64_encode@plt+0x175c>
   120f0:	sub	sp, fp, #28
   120f4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   120f8:	ldr	r0, [r4, #16]
   120fc:	ldr	r1, [pc, #96]	; 12164 <rb_base64_encode@plt+0x115c>
   12100:	mov	r2, #129	; 0x81
   12104:	add	r1, pc, r1
   12108:	bl	10fd8 <rb_rawbuf_append@plt>
   1210c:	ldrb	r0, [r4, #128]	; 0x80
   12110:	tst	r0, #2
   12114:	bne	120cc <rb_base64_encode@plt+0x10c4>
   12118:	mov	r0, r5
   1211c:	bl	10ed0 <strlen@plt>
   12120:	mov	r2, r0
   12124:	ldr	r0, [r4, #16]
   12128:	mov	r1, r5
   1212c:	bl	10fd8 <rb_rawbuf_append@plt>
   12130:	ldrb	r0, [r4, #128]	; 0x80
   12134:	tst	r0, #2
   12138:	bne	120d4 <rb_base64_encode@plt+0x10cc>
   1213c:	ldr	r0, [r4, #16]
   12140:	ldr	r1, [pc, #32]	; 12168 <rb_base64_encode@plt+0x1160>
   12144:	mov	r2, #4
   12148:	add	r1, pc, r1
   1214c:	bl	10fd8 <rb_rawbuf_append@plt>
   12150:	cmp	r5, #0
   12154:	bne	120dc <rb_base64_encode@plt+0x10d4>
   12158:	b	120e4 <rb_base64_encode@plt+0x10dc>
   1215c:	andeq	r2, r0, r9, ror #5
   12160:	andeq	r2, r0, r4, lsl #4
   12164:			; <UNDEFINED> instruction: 0x000021b5
   12168:	strdeq	r2, [r0], -r3
   1216c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12170:	add	fp, sp, #28
   12174:	sub	sp, sp, #12
   12178:	sub	sp, sp, #16384	; 0x4000
   1217c:	mov	r4, r0
   12180:	ldr	r0, [r0, #20]
   12184:	mov	r1, sp
   12188:	mov	r2, #2
   1218c:	bl	10f60 <rb_rawbuf_get@plt>
   12190:	cmp	r0, #2
   12194:	bne	1251c <rb_base64_encode@plt+0x1514>
   12198:	add	sl, r4, #24
   1219c:	mov	r8, sp
   121a0:	add	r7, sp, #8
   121a4:	add	r5, sp, #2
   121a8:	b	121d4 <rb_base64_encode@plt+0x11cc>
   121ac:	mov	r0, sl
   121b0:	mov	r1, r7
   121b4:	mov	r3, #1
   121b8:	bl	10e64 <rb_linebuf_parse@plt>
   121bc:	ldr	r0, [r4, #20]
   121c0:	mov	r1, r8
   121c4:	mov	r2, #2
   121c8:	bl	10f60 <rb_rawbuf_get@plt>
   121cc:	cmp	r0, #2
   121d0:	bne	1251c <rb_base64_encode@plt+0x1514>
   121d4:	ldrb	r0, [sp, #1]
   121d8:	and	r2, r0, #127	; 0x7f
   121dc:	cmp	r2, #127	; 0x7f
   121e0:	strb	r2, [sp, #1]
   121e4:	beq	121bc <rb_base64_encode@plt+0x11b4>
   121e8:	lsr	r9, r0, #7
   121ec:	cmp	r2, #126	; 0x7e
   121f0:	bne	12250 <rb_base64_encode@plt+0x1248>
   121f4:	mov	r0, r7
   121f8:	mov	r1, #0
   121fc:	mov	r2, #16384	; 0x4000
   12200:	bl	10e58 <memset@plt>
   12204:	ldr	r0, [r4, #20]
   12208:	add	r1, sp, #6
   1220c:	mov	r2, #2
   12210:	bl	10f60 <rb_rawbuf_get@plt>
   12214:	cmp	r0, #0
   12218:	beq	123a8 <rb_base64_encode@plt+0x13a0>
   1221c:	ldrh	r0, [sp, #6]
   12220:	cmp	r9, #0
   12224:	rev16	r1, r0
   12228:	strh	r1, [sp, #6]
   1222c:	beq	123c0 <rb_base64_encode@plt+0x13b8>
   12230:	ldr	r0, [r4, #20]
   12234:	mov	r1, r5
   12238:	mov	r2, #4
   1223c:	bl	10f60 <rb_rawbuf_get@plt>
   12240:	cmp	r0, #0
   12244:	beq	12390 <rb_base64_encode@plt+0x1388>
   12248:	ldrh	r2, [sp, #6]
   1224c:	b	123c8 <rb_base64_encode@plt+0x13c0>
   12250:	cmp	r9, #0
   12254:	beq	12274 <rb_base64_encode@plt+0x126c>
   12258:	ldr	r0, [r4, #20]
   1225c:	mov	r1, r5
   12260:	mov	r2, #4
   12264:	bl	10f60 <rb_rawbuf_get@plt>
   12268:	cmp	r0, #0
   1226c:	beq	12390 <rb_base64_encode@plt+0x1388>
   12270:	ldrb	r2, [sp, #1]
   12274:	ldr	r0, [r4, #20]
   12278:	mov	r1, r7
   1227c:	bl	10f60 <rb_rawbuf_get@plt>
   12280:	cmp	r0, #0
   12284:	beq	124e4 <rb_base64_encode@plt+0x14dc>
   12288:	mov	r2, r0
   1228c:	cmp	r9, #0
   12290:	beq	121ac <rb_base64_encode@plt+0x11a4>
   12294:	cmp	r2, #1
   12298:	blt	121ac <rb_base64_encode@plt+0x11a4>
   1229c:	mov	r0, #0
   122a0:	cmp	r2, #16
   122a4:	bcc	12324 <rb_base64_encode@plt+0x131c>
   122a8:	sub	r1, r2, #1
   122ac:	cmp	r1, #3
   122b0:	bhi	12324 <rb_base64_encode@plt+0x131c>
   122b4:	bic	r0, r2, #15
   122b8:	mov	r3, #1
   122bc:	subs	r1, r0, #16
   122c0:	add	r3, r3, r1, lsr #4
   122c4:	and	ip, r3, #1
   122c8:	beq	124fc <rb_base64_encode@plt+0x14f4>
   122cc:	vld1.8	{d16-d17}, [r5]
   122d0:	sub	r6, r3, ip
   122d4:	mov	r3, #0
   122d8:	add	r1, r7, r3
   122dc:	subs	r6, r6, #2
   122e0:	add	r3, r3, #32
   122e4:	vld1.8	{d18-d19}, [r1]
   122e8:	veor	q9, q8, q9
   122ec:	vst1.8	{d18-d19}, [r1]!
   122f0:	vld1.8	{d18-d19}, [r1]
   122f4:	veor	q9, q8, q9
   122f8:	vst1.8	{d18-d19}, [r1]
   122fc:	bne	122d8 <rb_base64_encode@plt+0x12d0>
   12300:	cmp	ip, #0
   12304:	beq	1231c <rb_base64_encode@plt+0x1314>
   12308:	add	r1, r7, r3
   1230c:	vld1.8	{d16-d17}, [r5]
   12310:	vld1.8	{d18-d19}, [r1]
   12314:	veor	q8, q8, q9
   12318:	vst1.8	{d16-d17}, [r1]
   1231c:	cmp	r2, r0
   12320:	beq	121ac <rb_base64_encode@plt+0x11a4>
   12324:	tst	r2, #1
   12328:	mov	r1, r0
   1232c:	beq	12344 <rb_base64_encode@plt+0x133c>
   12330:	ldrb	r1, [r7, r0]
   12334:	ldrb	r3, [sp, #2]
   12338:	eor	r1, r3, r1
   1233c:	strb	r1, [r7, r0]
   12340:	orr	r1, r0, #1
   12344:	orr	r0, r0, #1
   12348:	cmp	r2, r0
   1234c:	beq	121ac <rb_base64_encode@plt+0x11a4>
   12350:	and	r3, r1, #3
   12354:	ldrb	r0, [r7, r1]
   12358:	ldrb	r3, [r5, r3]
   1235c:	eor	r0, r3, r0
   12360:	add	r3, r7, r1
   12364:	strb	r0, [r7, r1]
   12368:	add	r0, r1, #1
   1236c:	add	r1, r1, #2
   12370:	and	r0, r0, #3
   12374:	ldrb	r6, [r3, #1]
   12378:	cmp	r2, r1
   1237c:	ldrb	r0, [r5, r0]
   12380:	eor	r0, r0, r6
   12384:	strb	r0, [r3, #1]
   12388:	bne	12350 <rb_base64_encode@plt+0x1348>
   1238c:	b	121ac <rb_base64_encode@plt+0x11a4>
   12390:	ldr	r2, [pc, #416]	; 12538 <rb_base64_encode@plt+0x1530>
   12394:	mov	r0, r4
   12398:	mov	r1, #1
   1239c:	add	r2, pc, r2
   123a0:	bl	11cd8 <rb_base64_encode@plt+0xcd0>
   123a4:	b	121bc <rb_base64_encode@plt+0x11b4>
   123a8:	ldr	r2, [pc, #384]	; 12530 <rb_base64_encode@plt+0x1528>
   123ac:	mov	r0, r4
   123b0:	mov	r1, #1
   123b4:	add	r2, pc, r2
   123b8:	bl	11cd8 <rb_base64_encode@plt+0xcd0>
   123bc:	b	121bc <rb_base64_encode@plt+0x11b4>
   123c0:	rev	r0, r0
   123c4:	lsr	r2, r0, #16
   123c8:	ldr	r0, [r4, #20]
   123cc:	mov	r1, r7
   123d0:	bl	10f60 <rb_rawbuf_get@plt>
   123d4:	cmp	r0, #0
   123d8:	beq	124e4 <rb_base64_encode@plt+0x14dc>
   123dc:	mov	r2, r0
   123e0:	cmp	r9, #0
   123e4:	beq	121ac <rb_base64_encode@plt+0x11a4>
   123e8:	cmp	r2, #1
   123ec:	blt	121ac <rb_base64_encode@plt+0x11a4>
   123f0:	mov	r0, #0
   123f4:	cmp	r2, #16
   123f8:	bcc	12478 <rb_base64_encode@plt+0x1470>
   123fc:	sub	r1, r2, #1
   12400:	cmp	r1, #3
   12404:	bhi	12478 <rb_base64_encode@plt+0x1470>
   12408:	bic	r0, r2, #15
   1240c:	mov	r3, #1
   12410:	subs	r1, r0, #16
   12414:	add	r1, r3, r1, lsr #4
   12418:	and	ip, r1, #1
   1241c:	beq	1250c <rb_base64_encode@plt+0x1504>
   12420:	vld1.8	{d16-d17}, [r5]
   12424:	sub	r1, r1, ip
   12428:	mov	r3, #0
   1242c:	add	r6, r7, r3
   12430:	subs	r1, r1, #2
   12434:	add	r3, r3, #32
   12438:	vld1.8	{d18-d19}, [r6]
   1243c:	veor	q9, q8, q9
   12440:	vst1.8	{d18-d19}, [r6]!
   12444:	vld1.8	{d18-d19}, [r6]
   12448:	veor	q9, q8, q9
   1244c:	vst1.8	{d18-d19}, [r6]
   12450:	bne	1242c <rb_base64_encode@plt+0x1424>
   12454:	cmp	ip, #0
   12458:	beq	12470 <rb_base64_encode@plt+0x1468>
   1245c:	add	r1, r7, r3
   12460:	vld1.8	{d16-d17}, [r5]
   12464:	vld1.8	{d18-d19}, [r1]
   12468:	veor	q8, q8, q9
   1246c:	vst1.8	{d16-d17}, [r1]
   12470:	cmp	r2, r0
   12474:	beq	121ac <rb_base64_encode@plt+0x11a4>
   12478:	tst	r2, #1
   1247c:	mov	r1, r0
   12480:	beq	12498 <rb_base64_encode@plt+0x1490>
   12484:	ldrb	r1, [r7, r0]
   12488:	ldrb	r3, [sp, #2]
   1248c:	eor	r1, r3, r1
   12490:	strb	r1, [r7, r0]
   12494:	orr	r1, r0, #1
   12498:	orr	r0, r0, #1
   1249c:	cmp	r2, r0
   124a0:	beq	121ac <rb_base64_encode@plt+0x11a4>
   124a4:	and	r3, r1, #3
   124a8:	ldrb	r0, [r7, r1]
   124ac:	ldrb	r3, [r5, r3]
   124b0:	eor	r0, r3, r0
   124b4:	add	r3, r7, r1
   124b8:	strb	r0, [r7, r1]
   124bc:	add	r0, r1, #1
   124c0:	add	r1, r1, #2
   124c4:	and	r0, r0, #3
   124c8:	ldrb	r6, [r3, #1]
   124cc:	cmp	r2, r1
   124d0:	ldrb	r0, [r5, r0]
   124d4:	eor	r0, r0, r6
   124d8:	strb	r0, [r3, #1]
   124dc:	bne	124a4 <rb_base64_encode@plt+0x149c>
   124e0:	b	121ac <rb_base64_encode@plt+0x11a4>
   124e4:	ldr	r2, [pc, #72]	; 12534 <rb_base64_encode@plt+0x152c>
   124e8:	mov	r0, r4
   124ec:	mov	r1, #1
   124f0:	add	r2, pc, r2
   124f4:	bl	11cd8 <rb_base64_encode@plt+0xcd0>
   124f8:	b	121bc <rb_base64_encode@plt+0x11b4>
   124fc:	mov	r3, #0
   12500:	cmp	ip, #0
   12504:	bne	12308 <rb_base64_encode@plt+0x1300>
   12508:	b	1231c <rb_base64_encode@plt+0x1314>
   1250c:	mov	r3, #0
   12510:	cmp	ip, #0
   12514:	bne	1245c <rb_base64_encode@plt+0x1454>
   12518:	b	12470 <rb_base64_encode@plt+0x1468>
   1251c:	ldr	r0, [r4, #88]	; 0x58
   12520:	mov	r1, r4
   12524:	bl	11c0c <rb_base64_encode@plt+0xc04>
   12528:	sub	sp, fp, #28
   1252c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12530:	andeq	r1, r0, ip, lsl #31
   12534:	andeq	r1, r0, sl, lsr #29
   12538:	ldrdeq	r1, [r0], -r2
   1253c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12540:	add	fp, sp, #28
   12544:	sub	sp, sp, #20
   12548:	sub	sp, sp, #16384	; 0x4000
   1254c:	add	r6, sp, #8
   12550:	mov	r4, r0
   12554:	mov	r1, #0
   12558:	mov	r2, #16384	; 0x4000
   1255c:	mov	sl, #0
   12560:	mov	r0, r6
   12564:	bl	10e58 <memset@plt>
   12568:	add	r5, r4, #52	; 0x34
   1256c:	mov	r1, r6
   12570:	mov	r2, #16384	; 0x4000
   12574:	mov	r3, #0
   12578:	str	sl, [sp]
   1257c:	mov	r0, r5
   12580:	bl	10eb8 <rb_linebuf_get@plt>
   12584:	mov	r6, r0
   12588:	ldrb	r0, [r4, #128]	; 0x80
   1258c:	cmp	r6, #0
   12590:	beq	12664 <rb_base64_encode@plt+0x165c>
   12594:	ldr	r8, [pc, #228]	; 12680 <rb_base64_encode@plt+0x1678>
   12598:	sub	r9, fp, #36	; 0x24
   1259c:	add	r7, sp, #8
   125a0:	add	r8, pc, r8
   125a4:	tst	r0, #2
   125a8:	beq	125dc <rb_base64_encode@plt+0x15d4>
   125ac:	mov	r0, r5
   125b0:	mov	r1, r7
   125b4:	mov	r2, #16384	; 0x4000
   125b8:	mov	r3, #0
   125bc:	str	sl, [sp]
   125c0:	bl	10eb8 <rb_linebuf_get@plt>
   125c4:	mov	r6, r0
   125c8:	ldrb	r0, [r4, #128]	; 0x80
   125cc:	cmp	r6, #0
   125d0:	beq	12664 <rb_base64_encode@plt+0x165c>
   125d4:	tst	r0, #2
   125d8:	bne	125ac <rb_base64_encode@plt+0x15a4>
   125dc:	cmp	r6, #122	; 0x7a
   125e0:	bgt	12604 <rb_base64_encode@plt+0x15fc>
   125e4:	mov	r0, #129	; 0x81
   125e8:	mov	r1, r9
   125ec:	mov	r2, #2
   125f0:	strh	r0, [fp, #-36]	; 0xffffffdc
   125f4:	add	r0, r6, #2
   125f8:	and	r0, r0, #127	; 0x7f
   125fc:	strb	r0, [fp, #-35]	; 0xffffffdd
   12600:	b	12620 <rb_base64_encode@plt+0x1618>
   12604:	movw	r0, #32385	; 0x7e81
   12608:	mov	r1, r9
   1260c:	mov	r2, #4
   12610:	str	r0, [fp, #-36]	; 0xffffffdc
   12614:	add	r0, r6, #2
   12618:	rev16	r0, r0
   1261c:	strh	r0, [fp, #-34]	; 0xffffffde
   12620:	ldr	r0, [r4, #16]
   12624:	bl	10fd8 <rb_rawbuf_append@plt>
   12628:	ldrb	r0, [r4, #128]	; 0x80
   1262c:	tst	r0, #2
   12630:	bne	12648 <rb_base64_encode@plt+0x1640>
   12634:	ldr	r0, [r4, #16]
   12638:	mov	r1, r7
   1263c:	mov	r2, r6
   12640:	bl	10fd8 <rb_rawbuf_append@plt>
   12644:	ldrb	r0, [r4, #128]	; 0x80
   12648:	tst	r0, #2
   1264c:	bne	125ac <rb_base64_encode@plt+0x15a4>
   12650:	ldr	r0, [r4, #16]
   12654:	mov	r1, r8
   12658:	mov	r2, #2
   1265c:	bl	10fd8 <rb_rawbuf_append@plt>
   12660:	b	125ac <rb_base64_encode@plt+0x15a4>
   12664:	tst	r0, #8
   12668:	beq	12678 <rb_base64_encode@plt+0x1670>
   1266c:	ldr	r0, [r4, #84]	; 0x54
   12670:	mov	r1, r4
   12674:	bl	12764 <rb_base64_encode@plt+0x175c>
   12678:	sub	sp, fp, #28
   1267c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12680:	muleq	r0, sp, sp
   12684:	push	{r4, r5, r6, r7, fp, lr}
   12688:	add	fp, sp, #16
   1268c:	sub	sp, sp, #16384	; 0x4000
   12690:	cmp	r1, #0
   12694:	beq	126ec <rb_base64_encode@plt+0x16e4>
   12698:	mov	r4, r1
   1269c:	mov	r5, sp
   126a0:	ldr	r0, [r4, #88]	; 0x58
   126a4:	mov	r1, r5
   126a8:	mov	r2, #16384	; 0x4000
   126ac:	bl	10ea0 <rb_read@plt>
   126b0:	cmp	r0, #0
   126b4:	beq	126f4 <rb_base64_encode@plt+0x16ec>
   126b8:	cmn	r0, #1
   126bc:	bgt	126a0 <rb_base64_encode@plt+0x1698>
   126c0:	bl	10ffc <__errno_location@plt>
   126c4:	ldr	r0, [r0]
   126c8:	bl	10dec <rb_ignore_errno@plt>
   126cc:	cmp	r0, #0
   126d0:	beq	126f4 <rb_base64_encode@plt+0x16ec>
   126d4:	ldr	r0, [r4, #88]	; 0x58
   126d8:	ldr	r2, [pc, #128]	; 12760 <rb_base64_encode@plt+0x1758>
   126dc:	mov	r1, #1
   126e0:	mov	r3, r4
   126e4:	add	r2, pc, r2
   126e8:	bl	10e04 <rb_setselect@plt>
   126ec:	sub	sp, fp, #16
   126f0:	pop	{r4, r5, r6, r7, fp, pc}
   126f4:	ldr	r0, [r4, #88]	; 0x58
   126f8:	bl	10f00 <rb_close@plt>
   126fc:	mov	r0, #0
   12700:	str	r0, [r4, #4]
   12704:	str	r4, [r4]
   12708:	ldr	r1, [pc, #72]	; 12758 <rb_base64_encode@plt+0x1750>
   1270c:	ldr	r1, [pc, r1]
   12710:	str	r1, [r4, #8]
   12714:	cmp	r1, #0
   12718:	ldr	r0, [pc, #60]	; 1275c <rb_base64_encode@plt+0x1754>
   1271c:	add	r0, pc, r0
   12720:	beq	12730 <rb_base64_encode@plt+0x1728>
   12724:	add	r1, r1, #4
   12728:	str	r4, [r1]
   1272c:	b	12740 <rb_base64_encode@plt+0x1738>
   12730:	mov	r1, r0
   12734:	ldr	r2, [r1, #4]!
   12738:	cmp	r2, #0
   1273c:	streq	r4, [r1]
   12740:	str	r4, [r0]
   12744:	ldr	r1, [r0, #8]
   12748:	add	r1, r1, #1
   1274c:	str	r1, [r0, #8]
   12750:	sub	sp, fp, #16
   12754:	pop	{r4, r5, r6, r7, fp, pc}
   12758:	andeq	r2, r1, r4, ror #19
   1275c:	ldrdeq	r2, [r1], -r4
   12760:			; <UNDEFINED> instruction: 0xffffff98
   12764:	push	{r4, r5, r6, sl, fp, lr}
   12768:	add	fp, sp, #16
   1276c:	mov	r5, r0
   12770:	ldrb	r0, [r1, #128]	; 0x80
   12774:	tst	r0, #2
   12778:	bne	1287c <rb_base64_encode@plt+0x1874>
   1277c:	ldr	r0, [r1, #16]
   12780:	mov	r4, r1
   12784:	mov	r1, r5
   12788:	bl	10fe4 <rb_rawbuf_flush@plt>
   1278c:	cmp	r0, #1
   12790:	blt	127bc <rb_base64_encode@plt+0x17b4>
   12794:	add	r6, r4, #96	; 0x60
   12798:	ldrd	r2, [r6]
   1279c:	mov	r1, r5
   127a0:	adds	r2, r2, r0
   127a4:	adc	r3, r3, r0, asr #31
   127a8:	strd	r2, [r6]
   127ac:	ldr	r0, [r4, #16]
   127b0:	bl	10fe4 <rb_rawbuf_flush@plt>
   127b4:	cmp	r0, #0
   127b8:	bgt	12798 <rb_base64_encode@plt+0x1790>
   127bc:	cmp	r0, #0
   127c0:	beq	12808 <rb_base64_encode@plt+0x1800>
   127c4:	bl	10ffc <__errno_location@plt>
   127c8:	mov	r5, r0
   127cc:	ldr	r0, [r0]
   127d0:	bl	10dec <rb_ignore_errno@plt>
   127d4:	cmp	r0, #0
   127d8:	beq	1282c <rb_base64_encode@plt+0x1824>
   127dc:	ldr	r0, [r4, #16]
   127e0:	bl	10f24 <rb_rawbuf_length@plt>
   127e4:	mov	r1, r0
   127e8:	ldr	r0, [r4, #84]	; 0x54
   127ec:	cmp	r1, #1
   127f0:	blt	12850 <rb_base64_encode@plt+0x1848>
   127f4:	ldr	r2, [pc, #160]	; 1289c <rb_base64_encode@plt+0x1894>
   127f8:	mov	r1, #2
   127fc:	mov	r3, r4
   12800:	add	r2, pc, r2
   12804:	b	1285c <rb_base64_encode@plt+0x1854>
   12808:	ldr	r2, [pc, #144]	; 128a0 <rb_base64_encode@plt+0x1898>
   1280c:	ldr	r3, [pc, #144]	; 128a4 <rb_base64_encode@plt+0x189c>
   12810:	mov	r0, r4
   12814:	mov	r1, #1
   12818:	add	r2, pc, r2
   1281c:	add	r3, pc, r3
   12820:	bl	11cd8 <rb_base64_encode@plt+0xcd0>
   12824:	bl	10ffc <__errno_location@plt>
   12828:	mov	r5, r0
   1282c:	ldr	r0, [r5]
   12830:	bl	10dbc <strerror@plt>
   12834:	ldr	r2, [pc, #108]	; 128a8 <rb_base64_encode@plt+0x18a0>
   12838:	mov	r3, r0
   1283c:	mov	r0, r4
   12840:	mov	r1, #1
   12844:	add	r2, pc, r2
   12848:	pop	{r4, r5, r6, sl, fp, lr}
   1284c:	b	11cd8 <rb_base64_encode@plt+0xcd0>
   12850:	mov	r1, #2
   12854:	mov	r2, #0
   12858:	mov	r3, #0
   1285c:	bl	10e04 <rb_setselect@plt>
   12860:	ldrb	r0, [r4, #128]	; 0x80
   12864:	tst	r0, #1
   12868:	popeq	{r4, r5, r6, sl, fp, pc}
   1286c:	ldr	r0, [r4, #16]
   12870:	bl	10f24 <rb_rawbuf_length@plt>
   12874:	cmp	r0, #0
   12878:	beq	12880 <rb_base64_encode@plt+0x1878>
   1287c:	pop	{r4, r5, r6, sl, fp, pc}
   12880:	ldrb	r0, [r4, #128]	; 0x80
   12884:	mov	r1, r4
   12888:	and	r0, r0, #254	; 0xfe
   1288c:	strb	r0, [r4, #128]	; 0x80
   12890:	ldr	r0, [r4, #88]	; 0x58
   12894:	pop	{r4, r5, r6, sl, fp, lr}
   12898:	b	11aa0 <rb_base64_encode@plt+0xa98>
   1289c:			; <UNDEFINED> instruction: 0xffffff5c
   128a0:	andeq	r1, r0, r4, asr #20
   128a4:	andeq	r1, r0, r3, asr #20
   128a8:	andeq	r1, r0, fp, lsl #20
   128ac:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   128b0:	add	fp, sp, #28
   128b4:	sub	sp, sp, #12
   128b8:	mov	r8, r1
   128bc:	mov	sl, r1
   128c0:	ldr	r4, [r8, #36]!	; 0x24
   128c4:	cmp	r4, #0
   128c8:	bne	128dc <rb_base64_encode@plt+0x18d4>
   128cc:	b	129cc <rb_base64_encode@plt+0x19c4>
   128d0:	cmp	r9, #0
   128d4:	mov	r4, r9
   128d8:	beq	129cc <rb_base64_encode@plt+0x19c4>
   128dc:	ldr	r5, [r4]
   128e0:	ldr	r0, [sl, #16]
   128e4:	ldr	r9, [r4, #8]
   128e8:	ldr	r3, [r5, #12]
   128ec:	ldr	r1, [r5, #16]
   128f0:	ldr	r2, [r5, #36]	; 0x24
   128f4:	ldr	r7, [pc, #260]	; 12a00 <rb_base64_encode@plt+0x19f8>
   128f8:	ldr	r7, [pc, r7]
   128fc:	stm	sp, {r1, r7}
   12900:	add	r7, r5, #20
   12904:	mov	r1, r7
   12908:	bl	10e1c <rb_send_fd_buf@plt>
   1290c:	mov	r6, r0
   12910:	cmp	r0, #1
   12914:	blt	129a0 <rb_base64_encode@plt+0x1998>
   12918:	ldr	r0, [r4, #8]
   1291c:	ldr	r1, [r4, #4]
   12920:	cmp	r0, #0
   12924:	beq	12934 <rb_base64_encode@plt+0x192c>
   12928:	str	r1, [r0, #4]
   1292c:	ldr	r1, [r4, #4]
   12930:	b	12938 <rb_base64_encode@plt+0x1930>
   12934:	str	r1, [sl, #40]	; 0x28
   12938:	cmp	r1, #0
   1293c:	mov	r2, r8
   12940:	addne	r2, r1, #8
   12944:	str	r0, [r2]
   12948:	mov	r0, #0
   1294c:	str	r0, [r4, #4]
   12950:	str	r0, [r4, #8]
   12954:	ldr	r0, [sl, #44]	; 0x2c
   12958:	sub	r0, r0, #1
   1295c:	str	r0, [sl, #44]	; 0x2c
   12960:	ldr	r0, [r5, #36]	; 0x24
   12964:	cmp	r0, #1
   12968:	blt	12988 <rb_base64_encode@plt+0x1980>
   1296c:	mov	r4, #0
   12970:	ldr	r0, [r7, r4, lsl #2]
   12974:	bl	10f00 <rb_close@plt>
   12978:	ldr	r0, [r5, #36]	; 0x24
   1297c:	add	r4, r4, #1
   12980:	cmp	r4, r0
   12984:	blt	12970 <rb_base64_encode@plt+0x1968>
   12988:	ldr	r0, [r5, #12]
   1298c:	cmp	r0, #0
   12990:	beq	12998 <rb_base64_encode@plt+0x1990>
   12994:	bl	10e88 <free@plt>
   12998:	mov	r0, r5
   1299c:	bl	10e88 <free@plt>
   129a0:	cmp	r6, #0
   129a4:	beq	129c4 <rb_base64_encode@plt+0x19bc>
   129a8:	cmn	r6, #1
   129ac:	bgt	128d0 <rb_base64_encode@plt+0x18c8>
   129b0:	bl	10ffc <__errno_location@plt>
   129b4:	ldr	r0, [r0]
   129b8:	bl	10dec <rb_ignore_errno@plt>
   129bc:	cmp	r0, #0
   129c0:	bne	128d0 <rb_base64_encode@plt+0x18c8>
   129c4:	mov	r0, #0
   129c8:	bl	10ff0 <exit@plt>
   129cc:	ldr	r0, [sl, #44]	; 0x2c
   129d0:	cmp	r0, #0
   129d4:	beq	129f8 <rb_base64_encode@plt+0x19f0>
   129d8:	ldr	r0, [sl, #16]
   129dc:	ldr	r2, [pc, #32]	; 12a04 <rb_base64_encode@plt+0x19fc>
   129e0:	mov	r1, #2
   129e4:	mov	r3, sl
   129e8:	add	r2, pc, r2
   129ec:	sub	sp, fp, #28
   129f0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   129f4:	b	10e04 <rb_setselect@plt>
   129f8:	sub	sp, fp, #28
   129fc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12a00:	strdeq	r2, [r1], -r0
   12a04:			; <UNDEFINED> instruction: 0xfffffebc
	...
   12a10:	add	r2, pc, #40	; 0x28
   12a14:	movw	r1, #57840	; 0xe1f0
   12a18:	vld1.64	{d16-d17}, [r2 :128]
   12a1c:	movt	r1, #50130	; 0xc3d2
   12a20:	str	r1, [r0, #16]
   12a24:	mov	r1, #24
   12a28:	vst1.32	{d16-d17}, [r0], r1
   12a2c:	mov	r1, #0
   12a30:	str	r1, [r0]
   12a34:	str	r1, [r0, #4]
   12a38:	bx	lr
   12a3c:	nop	{0}
   12a40:	strbvs	r2, [r5, -r1, lsl #6]
   12a44:	svc	0x00cdab89
   12a48:	ldmls	sl!, {r1, r2, r3, r4, r5, r6, r7, sl, fp, ip, lr, pc}
   12a4c:	eorsne	r5, r2, r6, ror r4
   12a50:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   12a54:	add	fp, sp, #24
   12a58:	mov	r6, r1
   12a5c:	mov	r5, r0
   12a60:	ldrd	r0, [r0, #24]
   12a64:	mov	r4, r2
   12a68:	adds	r2, r0, r2, lsl #3
   12a6c:	adc	r3, r1, #0
   12a70:	strd	r2, [r5, #24]
   12a74:	ubfx	r9, r0, #3, #6
   12a78:	add	r0, r9, r4
   12a7c:	cmp	r0, #64	; 0x40
   12a80:	bcc	12ae0 <rb_base64_encode@plt+0x1ad8>
   12a84:	add	r8, r5, #32
   12a88:	rsb	r7, r9, #64	; 0x40
   12a8c:	mov	r1, r6
   12a90:	add	r0, r8, r9
   12a94:	mov	r2, r7
   12a98:	bl	10edc <memcpy@plt>
   12a9c:	mov	r0, r5
   12aa0:	mov	r1, r8
   12aa4:	bl	12afc <rb_base64_encode@plt+0x1af4>
   12aa8:	eor	r0, r9, #127	; 0x7f
   12aac:	mov	r9, #0
   12ab0:	cmp	r0, r4
   12ab4:	bcs	12ae4 <rb_base64_encode@plt+0x1adc>
   12ab8:	add	r1, r6, r7
   12abc:	mov	r0, r5
   12ac0:	bl	12afc <rb_base64_encode@plt+0x1af4>
   12ac4:	add	r1, r7, #127	; 0x7f
   12ac8:	add	r0, r7, #64	; 0x40
   12acc:	cmp	r1, r4
   12ad0:	mov	r7, r0
   12ad4:	bcc	12ab8 <rb_base64_encode@plt+0x1ab0>
   12ad8:	mov	r7, r0
   12adc:	b	12ae4 <rb_base64_encode@plt+0x1adc>
   12ae0:	mov	r7, #0
   12ae4:	add	r0, r5, r9
   12ae8:	add	r1, r6, r7
   12aec:	sub	r2, r4, r7
   12af0:	add	r0, r0, #32
   12af4:	pop	{r4, r5, r6, r7, r8, r9, fp, lr}
   12af8:	b	10edc <memcpy@plt>
   12afc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12b00:	add	fp, sp, #28
   12b04:	sub	sp, sp, #172	; 0xac
   12b08:	ldr	r5, [r0, #8]
   12b0c:	ldr	r3, [r1, #4]
   12b10:	ldm	r0, {r4, r7}
   12b14:	ldr	r2, [r0, #12]
   12b18:	mov	sl, r0
   12b1c:	str	r0, [sp, #80]	; 0x50
   12b20:	ldr	lr, [r1]
   12b24:	movw	ip, #31129	; 0x7999
   12b28:	ldr	r9, [r1, #8]
   12b2c:	ldr	r8, [r1, #12]
   12b30:	str	r7, [sp, #96]	; 0x60
   12b34:	movt	ip, #23170	; 0x5a82
   12b38:	str	r4, [sp, #88]	; 0x58
   12b3c:	eor	r0, r5, r7, ror #2
   12b40:	rev	r3, r3
   12b44:	mov	r6, r5
   12b48:	str	r5, [sp, #84]	; 0x54
   12b4c:	str	r2, [sp, #92]	; 0x5c
   12b50:	str	r3, [fp, #-32]	; 0xffffffe0
   12b54:	add	r3, r3, r2
   12b58:	and	r0, r0, r4
   12b5c:	eor	r0, r0, r5
   12b60:	add	r0, r3, r0
   12b64:	eor	r3, r2, r5
   12b68:	ldr	r5, [sl, #16]
   12b6c:	mov	sl, ip
   12b70:	and	r3, r3, r7
   12b74:	eor	r3, r3, r2
   12b78:	rev	r2, lr
   12b7c:	str	r2, [fp, #-36]	; 0xffffffdc
   12b80:	add	r2, r2, r4, ror #27
   12b84:	str	r5, [sp, #76]	; 0x4c
   12b88:	add	r2, r2, r5
   12b8c:	add	r2, r2, r3
   12b90:	add	r3, r2, ip
   12b94:	add	r0, r0, r3, ror #27
   12b98:	add	r5, r0, ip
   12b9c:	ror	r0, r7, #2
   12ba0:	eor	r0, r0, r4, ror #2
   12ba4:	and	r0, r3, r0
   12ba8:	eor	ip, r0, r7, ror #2
   12bac:	rev	r0, r9
   12bb0:	add	r2, r0, r6
   12bb4:	str	r0, [fp, #-96]	; 0xffffffa0
   12bb8:	add	r0, r2, ip
   12bbc:	add	r0, r0, r5, ror #27
   12bc0:	add	r6, r0, sl
   12bc4:	ror	r0, r3, #2
   12bc8:	eor	r0, r0, r4, ror #2
   12bcc:	and	r0, r5, r0
   12bd0:	eor	ip, r0, r4, ror #2
   12bd4:	rev	r0, r8
   12bd8:	add	r2, r0, r7, ror #2
   12bdc:	str	r0, [fp, #-64]	; 0xffffffc0
   12be0:	ldr	r7, [r1, #16]
   12be4:	add	r0, r2, ip
   12be8:	ror	r2, r5, #2
   12bec:	eor	r2, r2, r3, ror #2
   12bf0:	add	r0, r0, r6, ror #27
   12bf4:	and	r2, r6, r2
   12bf8:	add	r0, r0, sl
   12bfc:	eor	ip, r2, r3, ror #2
   12c00:	rev	r2, r7
   12c04:	add	r7, r2, r4, ror #2
   12c08:	ldr	r4, [r1, #20]
   12c0c:	str	r2, [fp, #-68]	; 0xffffffbc
   12c10:	add	r2, r7, ip
   12c14:	ror	r7, r6, #2
   12c18:	mov	ip, sl
   12c1c:	eor	r7, r7, r5, ror #2
   12c20:	add	r2, r2, r0, ror #27
   12c24:	rev	r4, r4
   12c28:	and	r7, r0, r7
   12c2c:	add	r3, r4, r3, ror #2
   12c30:	str	r4, [fp, #-92]	; 0xffffffa4
   12c34:	ror	r4, r0, #2
   12c38:	add	r2, r2, sl
   12c3c:	eor	r7, r7, r5, ror #2
   12c40:	eor	r4, r4, r6, ror #2
   12c44:	add	r3, r3, r7
   12c48:	ldr	r7, [r1, #24]
   12c4c:	and	r4, r2, r4
   12c50:	add	r3, r3, r2, ror #27
   12c54:	eor	r4, r4, r6, ror #2
   12c58:	add	r3, r3, sl
   12c5c:	rev	r7, r7
   12c60:	add	r5, r7, r5, ror #2
   12c64:	str	r7, [fp, #-88]	; 0xffffffa8
   12c68:	ldr	r7, [r1, #28]
   12c6c:	add	r4, r5, r4
   12c70:	add	r4, r4, r3, ror #27
   12c74:	rev	r7, r7
   12c78:	add	r5, r4, sl
   12c7c:	ror	r4, r2, #2
   12c80:	add	r6, r7, r6, ror #2
   12c84:	str	r7, [fp, #-60]	; 0xffffffc4
   12c88:	ldr	r7, [r1, #32]
   12c8c:	eor	r4, r4, r0, ror #2
   12c90:	and	r4, r3, r4
   12c94:	eor	r4, r4, r0, ror #2
   12c98:	rev	lr, r7
   12c9c:	ldr	r7, [r1, #36]	; 0x24
   12ca0:	add	r0, lr, r0, ror #2
   12ca4:	str	lr, [sp, #64]	; 0x40
   12ca8:	add	r4, r6, r4
   12cac:	add	r4, r4, r5, ror #27
   12cb0:	rev	r7, r7
   12cb4:	add	r6, r4, sl
   12cb8:	ror	r4, r3, #2
   12cbc:	str	r7, [fp, #-56]	; 0xffffffc8
   12cc0:	eor	r4, r4, r2, ror #2
   12cc4:	and	r4, r5, r4
   12cc8:	eor	r4, r4, r2, ror #2
   12ccc:	add	r2, r7, r2, ror #2
   12cd0:	add	r0, r0, r4
   12cd4:	ror	r4, r5, #2
   12cd8:	eor	r4, r4, r3, ror #2
   12cdc:	add	r0, r0, r6, ror #27
   12ce0:	and	r4, r6, r4
   12ce4:	add	r0, r0, sl
   12ce8:	eor	r4, r4, r3, ror #2
   12cec:	add	r2, r2, r4
   12cf0:	ldr	r4, [r1, #40]	; 0x28
   12cf4:	add	r2, r2, r0, ror #27
   12cf8:	add	r8, r2, sl
   12cfc:	ror	r2, r6, #2
   12d00:	eor	r2, r2, r5, ror #2
   12d04:	rev	r7, r4
   12d08:	ldr	r4, [r1, #52]	; 0x34
   12d0c:	add	r3, r7, r3, ror #2
   12d10:	str	r7, [fp, #-52]	; 0xffffffcc
   12d14:	and	r2, r0, r2
   12d18:	eor	r2, r2, r5, ror #2
   12d1c:	rev	r4, r4
   12d20:	add	r2, r3, r2
   12d24:	ldr	r3, [r1, #44]	; 0x2c
   12d28:	mov	r7, r4
   12d2c:	str	r4, [fp, #-80]	; 0xffffffb0
   12d30:	add	r2, r2, r8, ror #27
   12d34:	add	r9, r2, sl
   12d38:	ror	r2, r0, #2
   12d3c:	eor	r2, r2, r6, ror #2
   12d40:	rev	r3, r3
   12d44:	str	r3, [fp, #-48]	; 0xffffffd0
   12d48:	add	r3, r3, r5, ror #2
   12d4c:	and	r2, r8, r2
   12d50:	eor	r2, r2, r6, ror #2
   12d54:	add	r2, r3, r2
   12d58:	ldr	r3, [r1, #48]	; 0x30
   12d5c:	add	r2, r2, r9, ror #27
   12d60:	add	r5, r2, sl
   12d64:	ror	r2, r8, #2
   12d68:	eor	r2, r2, r0, ror #2
   12d6c:	rev	r3, r3
   12d70:	str	r3, [fp, #-44]	; 0xffffffd4
   12d74:	add	r3, r3, r6, ror #2
   12d78:	and	r2, r9, r2
   12d7c:	eor	r2, r2, r0, ror #2
   12d80:	add	r0, r4, r0, ror #2
   12d84:	ldr	r4, [r1, #56]	; 0x38
   12d88:	ldr	r1, [r1, #60]	; 0x3c
   12d8c:	add	r2, r3, r2
   12d90:	add	r2, r2, r5, ror #27
   12d94:	rev	r6, r4
   12d98:	add	r3, r2, sl
   12d9c:	ror	r2, r9, #2
   12da0:	add	r4, r6, r8, ror #2
   12da4:	str	r6, [fp, #-40]	; 0xffffffd8
   12da8:	eor	r2, r2, r8, ror #2
   12dac:	and	r2, r5, r2
   12db0:	eor	r2, r2, r8, ror #2
   12db4:	add	r0, r0, r2
   12db8:	add	r0, r0, r3, ror #27
   12dbc:	add	r2, r0, sl
   12dc0:	ror	r0, r5, #2
   12dc4:	eor	r0, r0, r9, ror #2
   12dc8:	and	r0, r3, r0
   12dcc:	eor	r0, r0, r9, ror #2
   12dd0:	add	r0, r4, r0
   12dd4:	ror	r4, r3, #2
   12dd8:	add	r0, r0, r2, ror #27
   12ddc:	eor	r4, r4, r5, ror #2
   12de0:	and	r4, r2, r4
   12de4:	add	r0, r0, sl
   12de8:	rev	sl, r1
   12dec:	add	r1, sl, r9, ror #2
   12df0:	eor	r4, r4, r5, ror #2
   12df4:	ldr	r9, [fp, #-96]	; 0xffffffa0
   12df8:	str	sl, [fp, #-84]	; 0xffffffac
   12dfc:	add	r1, r1, r4
   12e00:	ror	r4, r2, #2
   12e04:	eor	r4, r4, r3, ror #2
   12e08:	add	r1, r1, r0, ror #27
   12e0c:	and	r4, r0, r4
   12e10:	add	r1, r1, ip
   12e14:	eor	r8, r4, r3, ror #2
   12e18:	ldr	r4, [fp, #-36]	; 0xffffffdc
   12e1c:	eor	r6, r9, r4
   12e20:	ror	r4, r0, #2
   12e24:	eor	r6, r6, lr
   12e28:	eor	r4, r4, r2, ror #2
   12e2c:	eor	r7, r6, r7
   12e30:	ror	r6, r7, #31
   12e34:	str	r7, [fp, #-76]	; 0xffffffb4
   12e38:	ldr	r7, [fp, #-40]	; 0xffffffd8
   12e3c:	and	r4, r1, r4
   12e40:	add	r6, r6, r5, ror #2
   12e44:	ldr	r5, [fp, #-32]	; 0xffffffe0
   12e48:	eor	r4, r4, r2, ror #2
   12e4c:	add	r6, r6, r8
   12e50:	ldr	r8, [fp, #-64]	; 0xffffffc0
   12e54:	add	r6, r6, r1, ror #27
   12e58:	add	lr, r6, ip
   12e5c:	eor	r6, r8, r5
   12e60:	ldr	r5, [fp, #-56]	; 0xffffffc8
   12e64:	eor	r6, r6, r5
   12e68:	mov	r5, ip
   12e6c:	eor	r7, r6, r7
   12e70:	ror	r6, r7, #31
   12e74:	str	r7, [fp, #-72]	; 0xffffffb8
   12e78:	ldr	r7, [fp, #-68]	; 0xffffffbc
   12e7c:	add	r3, r6, r3, ror #2
   12e80:	ldr	r6, [fp, #-52]	; 0xffffffcc
   12e84:	add	r3, r3, r4
   12e88:	add	r3, r3, lr, ror #27
   12e8c:	eor	r4, r7, r9
   12e90:	eor	r4, r4, r6
   12e94:	add	ip, r3, ip
   12e98:	ror	r3, r1, #2
   12e9c:	eor	r4, r4, sl
   12ea0:	eor	r3, r3, r0, ror #2
   12ea4:	ror	r6, r4, #31
   12ea8:	mov	r9, r4
   12eac:	add	r2, r6, r2, ror #2
   12eb0:	str	r6, [sp, #72]	; 0x48
   12eb4:	ldr	r6, [fp, #-92]	; 0xffffffa4
   12eb8:	str	r9, [sp, #100]	; 0x64
   12ebc:	and	r3, lr, r3
   12ec0:	eor	r3, r3, r0, ror #2
   12ec4:	add	r2, r2, r3
   12ec8:	eor	r4, r6, r8
   12ecc:	movw	r8, #60321	; 0xeba1
   12ed0:	add	r2, r2, ip, ror #27
   12ed4:	movt	r8, #28377	; 0x6ed9
   12ed8:	add	r3, r2, r5
   12edc:	ror	r2, lr, #2
   12ee0:	eor	r2, r2, r1, ror #2
   12ee4:	and	r2, ip, r2
   12ee8:	eor	sl, r2, r1, ror #2
   12eec:	ldr	r2, [fp, #-48]	; 0xffffffd0
   12ef0:	eor	r4, r4, r2
   12ef4:	ldr	r2, [fp, #-76]	; 0xffffffb4
   12ef8:	eor	r2, r4, r2, ror #31
   12efc:	str	r2, [fp, #-64]	; 0xffffffc0
   12f00:	ror	r2, r2, #31
   12f04:	add	r0, r2, r0, ror #2
   12f08:	str	r2, [sp, #68]	; 0x44
   12f0c:	add	r0, r0, sl
   12f10:	ldr	sl, [fp, #-88]	; 0xffffffa8
   12f14:	add	r0, r0, r3, ror #27
   12f18:	add	r2, r0, r5
   12f1c:	ldr	r5, [fp, #-72]	; 0xffffffb8
   12f20:	ror	r0, ip, #2
   12f24:	eor	r4, sl, r7
   12f28:	ldr	r7, [fp, #-44]	; 0xffffffd4
   12f2c:	eor	r0, r0, lr, ror #2
   12f30:	eor	r0, r0, r3
   12f34:	eor	r4, r4, r7
   12f38:	ldr	r7, [fp, #-60]	; 0xffffffc4
   12f3c:	eor	r4, r4, r5, ror #31
   12f40:	ror	r5, r4, #31
   12f44:	str	r4, [fp, #-68]	; 0xffffffbc
   12f48:	ldr	r4, [fp, #-80]	; 0xffffffb0
   12f4c:	add	r1, r5, r1, ror #2
   12f50:	eor	r6, r7, r6
   12f54:	str	r5, [sp, #48]	; 0x30
   12f58:	add	r0, r1, r0
   12f5c:	eor	r6, r6, r4
   12f60:	add	r0, r0, r2, ror #27
   12f64:	ldr	r4, [sp, #64]	; 0x40
   12f68:	eor	r9, r6, r9, ror #31
   12f6c:	add	r1, r0, r8
   12f70:	ror	r0, r3, #2
   12f74:	eor	r0, r0, ip, ror #2
   12f78:	ror	r5, r9, #31
   12f7c:	str	r9, [fp, #-92]	; 0xffffffa4
   12f80:	add	r6, r5, lr, ror #2
   12f84:	str	r5, [sp, #36]	; 0x24
   12f88:	eor	r5, r4, sl
   12f8c:	eor	r0, r0, r2
   12f90:	add	r0, r6, r0
   12f94:	ror	r6, r2, #2
   12f98:	eor	r6, r6, r3, ror #2
   12f9c:	add	r0, r0, r1, ror #27
   12fa0:	eor	lr, r6, r1
   12fa4:	ldr	r6, [fp, #-40]	; 0xffffffd8
   12fa8:	add	r0, r0, r8
   12fac:	eor	r5, r5, r6
   12fb0:	ldr	r6, [fp, #-64]	; 0xffffffc0
   12fb4:	eor	sl, r5, r6, ror #31
   12fb8:	ror	r6, sl, #31
   12fbc:	str	sl, [fp, #-96]	; 0xffffffa0
   12fc0:	add	r5, r6, ip, ror #2
   12fc4:	ldr	ip, [fp, #-56]	; 0xffffffc8
   12fc8:	str	r6, [sp, #20]
   12fcc:	add	r6, r5, lr
   12fd0:	add	r6, r6, r0, ror #27
   12fd4:	eor	r5, ip, r7
   12fd8:	ldr	r7, [fp, #-84]	; 0xffffffac
   12fdc:	add	lr, r6, r8
   12fe0:	ror	r6, r1, #2
   12fe4:	eor	r6, r6, r2, ror #2
   12fe8:	eor	r5, r5, r7
   12fec:	ldr	r7, [fp, #-68]	; 0xffffffbc
   12ff0:	eor	r6, r6, r0
   12ff4:	eor	r5, r5, r7, ror #31
   12ff8:	ror	r7, r5, #31
   12ffc:	str	r5, [fp, #-36]	; 0xffffffdc
   13000:	add	r3, r7, r3, ror #2
   13004:	str	r7, [sp, #12]
   13008:	ldr	r7, [fp, #-52]	; 0xffffffcc
   1300c:	add	r3, r3, r6
   13010:	ror	r6, r0, #2
   13014:	eor	r6, r6, r1, ror #2
   13018:	add	r3, r3, lr, ror #27
   1301c:	eor	r5, r7, r4
   13020:	ldr	r4, [fp, #-76]	; 0xffffffb4
   13024:	eor	r6, r6, lr
   13028:	add	r3, r3, r8
   1302c:	eor	r5, r5, r4, ror #31
   13030:	eor	r5, r5, r9, ror #31
   13034:	ldr	r9, [fp, #-48]	; 0xffffffd0
   13038:	ror	r4, r5, #31
   1303c:	str	r5, [fp, #-32]	; 0xffffffe0
   13040:	add	r2, r4, r2, ror #2
   13044:	str	r4, [sp, #8]
   13048:	ldr	r4, [fp, #-72]	; 0xffffffb8
   1304c:	eor	r5, r9, ip
   13050:	ldr	ip, [fp, #-44]	; 0xffffffd4
   13054:	add	r2, r2, r6
   13058:	ror	r6, lr, #2
   1305c:	eor	r6, r6, r0, ror #2
   13060:	add	r2, r2, r3, ror #27
   13064:	eor	r5, r5, r4, ror #31
   13068:	ldr	r4, [sp, #100]	; 0x64
   1306c:	eor	r6, r6, r3
   13070:	add	r2, r2, r8
   13074:	eor	r5, r5, sl, ror #31
   13078:	ldr	sl, [fp, #-40]	; 0xffffffd8
   1307c:	str	r5, [fp, #-60]	; 0xffffffc4
   13080:	ror	r5, r5, #31
   13084:	add	r1, r5, r1, ror #2
   13088:	str	r5, [sp, #64]	; 0x40
   1308c:	eor	r5, ip, r7
   13090:	mov	r7, r8
   13094:	eor	r5, r5, r4, ror #31
   13098:	ldr	r4, [fp, #-36]	; 0xffffffdc
   1309c:	add	r1, r1, r6
   130a0:	ror	r6, r3, #2
   130a4:	eor	r6, r6, lr, ror #2
   130a8:	add	r1, r1, r2, ror #27
   130ac:	eor	r4, r5, r4, ror #31
   130b0:	eor	r6, r6, r2
   130b4:	add	r1, r1, r8
   130b8:	ror	r5, r4, #31
   130bc:	str	r4, [fp, #-56]	; 0xffffffc8
   130c0:	ldr	r4, [fp, #-64]	; 0xffffffc0
   130c4:	add	r0, r5, r0, ror #2
   130c8:	str	r5, [sp, #4]
   130cc:	add	r0, r0, r6
   130d0:	ror	r6, r2, #2
   130d4:	add	r0, r0, r1, ror #27
   130d8:	eor	r6, r6, r3, ror #2
   130dc:	add	r0, r0, r8
   130e0:	ldr	r8, [fp, #-80]	; 0xffffffb0
   130e4:	eor	r6, r6, r1
   130e8:	eor	r5, r8, r9
   130ec:	ldr	r9, [fp, #-76]	; 0xffffffb4
   130f0:	eor	r5, r5, r4, ror #31
   130f4:	ldr	r4, [fp, #-32]	; 0xffffffe0
   130f8:	eor	r4, r5, r4, ror #31
   130fc:	str	r4, [fp, #-52]	; 0xffffffcc
   13100:	ror	r4, r4, #31
   13104:	add	r5, r4, lr, ror #2
   13108:	str	r4, [sp, #16]
   1310c:	mov	r4, r7
   13110:	add	r6, r5, r6
   13114:	eor	r5, sl, ip
   13118:	mov	ip, r4
   1311c:	add	r6, r6, r0, ror #27
   13120:	add	lr, r6, r7
   13124:	ldr	r7, [fp, #-68]	; 0xffffffbc
   13128:	ror	r6, r1, #2
   1312c:	eor	r6, r6, r2, ror #2
   13130:	eor	r6, r6, r0
   13134:	eor	r5, r5, r7, ror #31
   13138:	ldr	r7, [fp, #-60]	; 0xffffffc4
   1313c:	eor	r7, r5, r7, ror #31
   13140:	ldr	r5, [fp, #-92]	; 0xffffffa4
   13144:	str	r7, [fp, #-48]	; 0xffffffd0
   13148:	ror	r7, r7, #31
   1314c:	add	r3, r7, r3, ror #2
   13150:	str	r7, [sp, #60]	; 0x3c
   13154:	add	r3, r3, r6
   13158:	ror	r6, r0, #2
   1315c:	add	r3, r3, lr, ror #27
   13160:	eor	r6, r6, r1, ror #2
   13164:	add	r3, r3, r4
   13168:	ldr	r4, [fp, #-84]	; 0xffffffac
   1316c:	eor	r6, r6, lr
   13170:	eor	r7, r4, r8
   13174:	ldr	r8, [fp, #-72]	; 0xffffffb8
   13178:	eor	r7, r7, r5, ror #31
   1317c:	ldr	r5, [fp, #-56]	; 0xffffffc8
   13180:	eor	r5, r7, r5, ror #31
   13184:	ldr	r7, [fp, #-96]	; 0xffffffa0
   13188:	str	r5, [fp, #-44]	; 0xffffffd4
   1318c:	ror	r5, r5, #31
   13190:	add	r2, r5, r2, ror #2
   13194:	str	r5, [sp, #56]	; 0x38
   13198:	add	r2, r2, r6
   1319c:	ror	r6, lr, #2
   131a0:	eor	r6, r6, r0, ror #2
   131a4:	add	r2, r2, r3, ror #27
   131a8:	eor	r5, r6, r3
   131ac:	eor	r6, sl, r9, ror #31
   131b0:	add	r2, r2, ip
   131b4:	eor	r6, r6, r7, ror #31
   131b8:	ldr	r7, [fp, #-52]	; 0xffffffcc
   131bc:	eor	r6, r6, r7, ror #31
   131c0:	ldr	r7, [fp, #-36]	; 0xffffffdc
   131c4:	str	r6, [fp, #-40]	; 0xffffffd8
   131c8:	ror	r6, r6, #31
   131cc:	add	r1, r6, r1, ror #2
   131d0:	str	r6, [sp, #52]	; 0x34
   131d4:	mov	r6, ip
   131d8:	add	r1, r1, r5
   131dc:	ror	r5, r3, #2
   131e0:	add	r1, r1, r2, ror #27
   131e4:	eor	r5, r5, lr, ror #2
   131e8:	add	r1, r1, ip
   131ec:	eor	ip, r5, r2
   131f0:	eor	r5, r4, r8, ror #31
   131f4:	ldr	r4, [fp, #-48]	; 0xffffffd0
   131f8:	eor	r5, r5, r7, ror #31
   131fc:	eor	r4, r5, r4, ror #31
   13200:	ror	r5, r2, #2
   13204:	eor	r5, r5, r3, ror #2
   13208:	ror	r7, r4, #31
   1320c:	str	r4, [fp, #-88]	; 0xffffffa8
   13210:	add	r0, r7, r0, ror #2
   13214:	str	r7, [sp, #24]
   13218:	ldr	r7, [fp, #-32]	; 0xffffffe0
   1321c:	add	r0, r0, ip
   13220:	eor	ip, r5, r1
   13224:	ldr	r5, [sp, #72]	; 0x48
   13228:	add	r0, r0, r1, ror #27
   1322c:	add	r0, r0, r6
   13230:	eor	r6, r5, r9, ror #31
   13234:	ldr	r5, [fp, #-44]	; 0xffffffd4
   13238:	eor	r6, r6, r7, ror #31
   1323c:	movw	r7, #60321	; 0xeba1
   13240:	movt	r7, #28377	; 0x6ed9
   13244:	eor	sl, r6, r5, ror #31
   13248:	ror	r5, sl, #31
   1324c:	str	sl, [sp]
   13250:	add	r6, r5, lr, ror #2
   13254:	str	r5, [sp, #44]	; 0x2c
   13258:	add	r6, r6, ip
   1325c:	add	r6, r6, r0, ror #27
   13260:	add	r9, r6, r7
   13264:	ldr	r7, [sp, #68]	; 0x44
   13268:	ror	r6, r1, #2
   1326c:	eor	r6, r6, r2, ror #2
   13270:	eor	r6, r6, r0
   13274:	eor	r5, r7, r8, ror #31
   13278:	ldr	r7, [fp, #-60]	; 0xffffffc4
   1327c:	eor	r5, r5, r7, ror #31
   13280:	ldr	r7, [fp, #-40]	; 0xffffffd8
   13284:	eor	r7, r5, r7, ror #31
   13288:	ror	r5, r7, #31
   1328c:	mov	r8, r7
   13290:	str	r7, [fp, #-84]	; 0xffffffac
   13294:	ldr	r7, [sp, #48]	; 0x30
   13298:	add	r3, r5, r3, ror #2
   1329c:	str	r5, [sp, #40]	; 0x28
   132a0:	movw	r5, #60321	; 0xeba1
   132a4:	movt	r5, #28377	; 0x6ed9
   132a8:	add	r3, r3, r6
   132ac:	ldr	r6, [sp, #100]	; 0x64
   132b0:	add	r3, r3, r9, ror #27
   132b4:	add	ip, r3, r5
   132b8:	ror	r3, r0, #2
   132bc:	eor	r6, r7, r6, ror #31
   132c0:	ldr	r7, [fp, #-56]	; 0xffffffc8
   132c4:	eor	r3, r3, r1, ror #2
   132c8:	eor	r3, r3, r9
   132cc:	eor	r6, r6, r7, ror #31
   132d0:	eor	r7, r6, r4, ror #31
   132d4:	ldr	r4, [fp, #-64]	; 0xffffffc0
   132d8:	ror	r6, r7, #31
   132dc:	str	r7, [fp, #-80]	; 0xffffffb0
   132e0:	add	r2, r6, r2, ror #2
   132e4:	str	r6, [sp, #32]
   132e8:	add	r2, r2, r3
   132ec:	ldr	r3, [sp, #36]	; 0x24
   132f0:	add	r2, r2, ip, ror #27
   132f4:	add	lr, r2, r5
   132f8:	ror	r2, r9, #2
   132fc:	eor	r3, r3, r4, ror #31
   13300:	ldr	r4, [fp, #-52]	; 0xffffffcc
   13304:	eor	r2, r2, r0, ror #2
   13308:	eor	r2, r2, ip
   1330c:	eor	r3, r3, r4, ror #31
   13310:	eor	r3, r3, sl, ror #31
   13314:	ror	r4, r3, #31
   13318:	mov	r6, r3
   1331c:	str	r3, [fp, #-76]	; 0xffffffb4
   13320:	ldr	r3, [sp, #20]
   13324:	add	r1, r4, r1, ror #2
   13328:	str	r4, [sp, #28]
   1332c:	ldr	r4, [fp, #-68]	; 0xffffffbc
   13330:	add	r1, r1, r2
   13334:	add	r1, r1, lr, ror #27
   13338:	eor	r3, r3, r4, ror #31
   1333c:	ldr	r4, [fp, #-48]	; 0xffffffd0
   13340:	add	r2, r1, r5
   13344:	ror	r1, ip, #2
   13348:	eor	r1, r1, r9, ror #2
   1334c:	eor	r3, r3, r4, ror #31
   13350:	eor	r1, r1, lr
   13354:	eor	r3, r3, r8, ror #31
   13358:	mov	r8, r5
   1335c:	ror	r4, r3, #31
   13360:	str	r3, [sp, #100]	; 0x64
   13364:	ldr	r3, [sp, #12]
   13368:	add	r0, r4, r0, ror #2
   1336c:	str	r4, [sp, #36]	; 0x24
   13370:	ldr	r4, [fp, #-92]	; 0xffffffa4
   13374:	add	r0, r0, r1
   13378:	add	r0, r0, r2, ror #27
   1337c:	eor	r3, r3, r4, ror #31
   13380:	ldr	r4, [fp, #-44]	; 0xffffffd4
   13384:	add	r1, r0, r5
   13388:	ror	r0, lr, #2
   1338c:	eor	r0, r0, ip, ror #2
   13390:	eor	r3, r3, r4, ror #31
   13394:	eor	r0, r0, r2
   13398:	eor	r3, r3, r7, ror #31
   1339c:	ldr	r7, [fp, #-96]	; 0xffffffa0
   133a0:	ror	r5, r3, #31
   133a4:	mov	r4, r3
   133a8:	str	r3, [fp, #-68]	; 0xffffffbc
   133ac:	add	r3, r5, r9, ror #2
   133b0:	str	r5, [sp, #48]	; 0x30
   133b4:	ldr	r5, [sp, #8]
   133b8:	add	r0, r3, r0
   133bc:	add	r0, r0, r1, ror #27
   133c0:	eor	r5, r5, r7, ror #31
   133c4:	ldr	r7, [fp, #-40]	; 0xffffffd8
   133c8:	add	r3, r0, r8
   133cc:	ror	r0, r2, #2
   133d0:	eor	r0, r0, lr, ror #2
   133d4:	eor	r5, r5, r7, ror #31
   133d8:	eor	r0, r0, r1
   133dc:	ldr	r7, [fp, #-32]	; 0xffffffe0
   133e0:	eor	r5, r5, r6, ror #31
   133e4:	ror	r6, r5, #31
   133e8:	str	r5, [fp, #-64]	; 0xffffffc0
   133ec:	str	r6, [sp, #68]	; 0x44
   133f0:	add	r6, r6, ip, ror #2
   133f4:	add	r0, r6, r0
   133f8:	add	r0, r0, r3, ror #27
   133fc:	add	r0, r0, r8
   13400:	orr	r6, r0, r3, ror #2
   13404:	and	r5, r0, r3, ror #2
   13408:	and	r6, r6, r1, ror #2
   1340c:	orr	r6, r6, r5
   13410:	ldr	r5, [sp, #4]
   13414:	eor	r5, r5, r7, ror #31
   13418:	eor	r5, r5, sl, ror #31
   1341c:	ldr	sl, [sp, #100]	; 0x64
   13420:	eor	r5, r5, r4, ror #31
   13424:	ror	r7, r5, #31
   13428:	mov	r9, r5
   1342c:	str	r5, [fp, #-72]	; 0xffffffb8
   13430:	add	r5, r7, r2, ror #2
   13434:	str	r7, [sp, #72]	; 0x48
   13438:	ldr	r7, [sp, #64]	; 0x40
   1343c:	add	r6, r5, r6
   13440:	ror	r5, r1, #2
   13444:	eor	r2, r5, r2, ror #2
   13448:	ldr	r5, [fp, #-36]	; 0xffffffdc
   1344c:	eor	r2, r2, r3
   13450:	eor	r5, r7, r5, ror #31
   13454:	ldr	r7, [fp, #-88]	; 0xffffffa8
   13458:	eor	r5, r5, r7, ror #31
   1345c:	eor	r7, r5, sl, ror #31
   13460:	ror	r5, r7, #31
   13464:	str	r7, [fp, #-96]	; 0xffffffa0
   13468:	str	r5, [sp, #20]
   1346c:	add	r5, r5, lr, ror #2
   13470:	add	r2, r5, r2
   13474:	add	r2, r2, r0, ror #27
   13478:	add	r4, r2, r8
   1347c:	add	r2, r6, r4, ror #27
   13480:	movw	r6, #48348	; 0xbcdc
   13484:	and	r5, r4, r0, ror #2
   13488:	movt	r6, #36635	; 0x8f1b
   1348c:	add	r2, r2, r6
   13490:	mov	ip, r6
   13494:	orr	r6, r4, r0, ror #2
   13498:	and	r6, r6, r3, ror #2
   1349c:	orr	r8, r6, r5
   134a0:	ldr	r6, [sp, #16]
   134a4:	ldr	r5, [fp, #-60]	; 0xffffffc4
   134a8:	eor	r5, r6, r5, ror #31
   134ac:	ldr	r6, [fp, #-84]	; 0xffffffac
   134b0:	eor	r5, r5, r6, ror #31
   134b4:	ldr	r6, [fp, #-64]	; 0xffffffc0
   134b8:	eor	lr, r5, r6, ror #31
   134bc:	and	r5, r2, r4, ror #2
   134c0:	ror	r6, lr, #31
   134c4:	str	lr, [fp, #-60]	; 0xffffffc4
   134c8:	add	r1, r6, r1, ror #2
   134cc:	str	r6, [sp, #64]	; 0x40
   134d0:	orr	r6, r2, r4, ror #2
   134d4:	add	r1, r1, r8
   134d8:	and	r6, r6, r0, ror #2
   134dc:	mov	r8, ip
   134e0:	add	r1, r1, r2, ror #27
   134e4:	add	r1, r1, ip
   134e8:	orr	ip, r6, r5
   134ec:	ldr	r5, [sp, #60]	; 0x3c
   134f0:	ldr	r6, [fp, #-56]	; 0xffffffc8
   134f4:	eor	r5, r5, r6, ror #31
   134f8:	ldr	r6, [fp, #-80]	; 0xffffffb0
   134fc:	eor	r5, r5, r6, ror #31
   13500:	orr	r6, r1, r2, ror #2
   13504:	eor	r5, r5, r7, ror #31
   13508:	and	r6, r6, r4, ror #2
   1350c:	ror	r7, r5, #31
   13510:	str	r5, [fp, #-32]	; 0xffffffe0
   13514:	and	r5, r1, r2, ror #2
   13518:	add	r3, r7, r3, ror #2
   1351c:	str	r7, [sp, #60]	; 0x3c
   13520:	ldr	r7, [fp, #-52]	; 0xffffffcc
   13524:	orr	r6, r6, r5
   13528:	ldr	r5, [sp, #56]	; 0x38
   1352c:	add	r3, r3, ip
   13530:	mov	ip, r8
   13534:	add	r3, r3, r1, ror #27
   13538:	eor	r5, r5, r7, ror #31
   1353c:	ldr	r7, [fp, #-76]	; 0xffffffb4
   13540:	add	r3, r3, r8
   13544:	eor	r5, r5, r7, ror #31
   13548:	eor	r5, r5, r9, ror #31
   1354c:	ror	r7, r5, #31
   13550:	mov	r9, r5
   13554:	str	r5, [fp, #-52]	; 0xffffffcc
   13558:	and	r5, r3, r1, ror #2
   1355c:	add	r0, r7, r0, ror #2
   13560:	str	r7, [sp, #56]	; 0x38
   13564:	ldr	r7, [fp, #-48]	; 0xffffffd0
   13568:	add	r0, r0, r6
   1356c:	orr	r6, r3, r1, ror #2
   13570:	add	r0, r0, r3, ror #27
   13574:	and	r6, r6, r2, ror #2
   13578:	add	r0, r0, r8
   1357c:	orr	r6, r6, r5
   13580:	ldr	r5, [sp, #52]	; 0x34
   13584:	eor	r5, r5, r7, ror #31
   13588:	eor	r5, r5, sl, ror #31
   1358c:	eor	r5, r5, lr, ror #31
   13590:	ror	r7, r5, #31
   13594:	mov	lr, r5
   13598:	add	r5, r7, r4, ror #2
   1359c:	str	r7, [sp, #52]	; 0x34
   135a0:	ldr	r7, [sp, #24]
   135a4:	str	lr, [sp, #16]
   135a8:	add	r6, r5, r6
   135ac:	and	r5, r0, r3, ror #2
   135b0:	add	r6, r6, r0, ror #27
   135b4:	add	sl, r6, r8
   135b8:	orr	r6, r0, r3, ror #2
   135bc:	and	r6, r6, r1, ror #2
   135c0:	orr	r6, r6, r5
   135c4:	ldr	r5, [fp, #-44]	; 0xffffffd4
   135c8:	eor	r7, r7, r5, ror #31
   135cc:	ldr	r5, [fp, #-68]	; 0xffffffbc
   135d0:	eor	r7, r7, r5, ror #31
   135d4:	ldr	r5, [fp, #-32]	; 0xffffffe0
   135d8:	eor	r8, r7, r5, ror #31
   135dc:	ldr	r5, [fp, #-64]	; 0xffffffc0
   135e0:	ror	r4, r8, #31
   135e4:	str	r8, [fp, #-48]	; 0xffffffd0
   135e8:	add	r2, r4, r2, ror #2
   135ec:	str	r4, [fp, #-44]	; 0xffffffd4
   135f0:	ldr	r4, [sp, #44]	; 0x2c
   135f4:	add	r2, r2, r6
   135f8:	and	r6, sl, r0, ror #2
   135fc:	add	r2, r2, sl, ror #27
   13600:	add	r7, r2, ip
   13604:	orr	r2, sl, r0, ror #2
   13608:	and	r2, r2, r3, ror #2
   1360c:	orr	r2, r2, r6
   13610:	ldr	r6, [fp, #-40]	; 0xffffffd8
   13614:	eor	r6, r4, r6, ror #31
   13618:	and	r4, r7, sl, ror #2
   1361c:	eor	r6, r6, r5, ror #31
   13620:	eor	r6, r6, r9, ror #31
   13624:	mov	r9, lr
   13628:	ror	r5, r6, #31
   1362c:	str	r6, [fp, #-56]	; 0xffffffc8
   13630:	add	r1, r5, r1, ror #2
   13634:	str	r5, [sp, #44]	; 0x2c
   13638:	ldr	r5, [sp, #40]	; 0x28
   1363c:	add	r1, r1, r2
   13640:	orr	r2, r7, sl, ror #2
   13644:	add	r1, r1, r7, ror #27
   13648:	and	r2, r2, r0, ror #2
   1364c:	add	r1, r1, ip
   13650:	orr	r2, r2, r4
   13654:	ldr	r4, [fp, #-88]	; 0xffffffa8
   13658:	eor	r4, r5, r4, ror #31
   1365c:	ldr	r5, [fp, #-96]	; 0xffffffa0
   13660:	eor	r4, r4, r5, ror #31
   13664:	eor	lr, r4, lr, ror #31
   13668:	and	r4, r1, r7, ror #2
   1366c:	ror	r5, lr, #31
   13670:	str	lr, [fp, #-88]	; 0xffffffa8
   13674:	add	r3, r5, r3, ror #2
   13678:	str	r5, [sp, #40]	; 0x28
   1367c:	ldr	r5, [sp]
   13680:	add	r2, r3, r2
   13684:	add	r2, r2, r1, ror #27
   13688:	add	r3, r2, ip
   1368c:	orr	r2, r1, r7, ror #2
   13690:	and	r2, r2, sl, ror #2
   13694:	orr	r2, r2, r4
   13698:	ldr	r4, [sp, #32]
   1369c:	eor	r4, r4, r5, ror #31
   136a0:	ldr	r5, [fp, #-72]	; 0xffffffb8
   136a4:	eor	r4, r4, r5, ror #31
   136a8:	ldr	r5, [fp, #-84]	; 0xffffffac
   136ac:	eor	r8, r4, r8, ror #31
   136b0:	and	r4, r3, r1, ror #2
   136b4:	ror	ip, r8, #31
   136b8:	str	r8, [fp, #-92]	; 0xffffffa4
   136bc:	add	r0, ip, r0, ror #2
   136c0:	str	ip, [sp, #32]
   136c4:	movw	ip, #48348	; 0xbcdc
   136c8:	movt	ip, #36635	; 0x8f1b
   136cc:	add	r0, r0, r2
   136d0:	orr	r2, r3, r1, ror #2
   136d4:	add	r0, r0, r3, ror #27
   136d8:	and	r2, r2, r7, ror #2
   136dc:	add	r0, r0, ip
   136e0:	orr	r2, r2, r4
   136e4:	ldr	r4, [sp, #28]
   136e8:	eor	r4, r4, r5, ror #31
   136ec:	ldr	r5, [fp, #-60]	; 0xffffffc4
   136f0:	eor	r4, r4, r5, ror #31
   136f4:	ldr	r5, [fp, #-76]	; 0xffffffb4
   136f8:	eor	r4, r4, r6, ror #31
   136fc:	ror	r6, r4, #31
   13700:	str	r4, [fp, #-36]	; 0xffffffdc
   13704:	add	r4, r6, sl, ror #2
   13708:	str	r6, [sp, #28]
   1370c:	add	r2, r4, r2
   13710:	and	r4, r0, r3, ror #2
   13714:	add	r2, r2, r0, ror #27
   13718:	add	r6, r2, ip
   1371c:	orr	r2, r0, r3, ror #2
   13720:	and	r2, r2, r1, ror #2
   13724:	orr	sl, r2, r4
   13728:	ldr	r4, [sp, #36]	; 0x24
   1372c:	ldr	r2, [fp, #-80]	; 0xffffffb0
   13730:	eor	r4, r4, r2, ror #31
   13734:	ldr	r2, [fp, #-32]	; 0xffffffe0
   13738:	eor	r4, r4, r2, ror #31
   1373c:	eor	lr, r4, lr, ror #31
   13740:	ror	r2, lr, #31
   13744:	str	lr, [fp, #-80]	; 0xffffffb0
   13748:	add	r4, r2, r7, ror #2
   1374c:	str	r2, [sp, #36]	; 0x24
   13750:	add	r2, r4, sl
   13754:	and	r4, r6, r0, ror #2
   13758:	add	r2, r2, r6, ror #27
   1375c:	add	r7, r2, ip
   13760:	orr	r2, r6, r0, ror #2
   13764:	and	r2, r2, r3, ror #2
   13768:	orr	r2, r2, r4
   1376c:	ldr	r4, [sp, #48]	; 0x30
   13770:	eor	r4, r4, r5, ror #31
   13774:	ldr	r5, [fp, #-52]	; 0xffffffcc
   13778:	eor	r4, r4, r5, ror #31
   1377c:	eor	r4, r4, r8, ror #31
   13780:	ror	r5, r4, #31
   13784:	mov	r8, r4
   13788:	str	r4, [fp, #-84]	; 0xffffffac
   1378c:	and	r4, r7, r6, ror #2
   13790:	add	r1, r5, r1, ror #2
   13794:	str	r5, [sp, #48]	; 0x30
   13798:	ldr	r5, [sp, #100]	; 0x64
   1379c:	add	r1, r1, r2
   137a0:	orr	r2, r7, r6, ror #2
   137a4:	add	r1, r1, r7, ror #27
   137a8:	and	r2, r2, r0, ror #2
   137ac:	add	r1, r1, ip
   137b0:	orr	r2, r2, r4
   137b4:	ldr	r4, [sp, #68]	; 0x44
   137b8:	eor	r4, r4, r5, ror #31
   137bc:	ldr	r5, [fp, #-36]	; 0xffffffdc
   137c0:	eor	r4, r4, r9, ror #31
   137c4:	eor	sl, r4, r5, ror #31
   137c8:	and	r4, r1, r7, ror #2
   137cc:	ror	r5, sl, #31
   137d0:	str	sl, [sp, #12]
   137d4:	add	r3, r5, r3, ror #2
   137d8:	str	r5, [sp, #100]	; 0x64
   137dc:	ldr	r5, [sp, #20]
   137e0:	add	r2, r3, r2
   137e4:	add	r2, r2, r1, ror #27
   137e8:	add	r3, r2, ip
   137ec:	orr	r2, r1, r7, ror #2
   137f0:	and	r2, r2, r6, ror #2
   137f4:	orr	r2, r2, r4
   137f8:	ldr	r4, [fp, #-68]	; 0xffffffbc
   137fc:	eor	r4, r5, r4, ror #31
   13800:	ldr	r5, [fp, #-48]	; 0xffffffd0
   13804:	eor	r4, r4, r5, ror #31
   13808:	eor	r4, r4, lr, ror #31
   1380c:	ror	r5, r4, #31
   13810:	mov	lr, r4
   13814:	str	r4, [fp, #-68]	; 0xffffffbc
   13818:	and	r4, r3, r1, ror #2
   1381c:	add	r0, r5, r0, ror #2
   13820:	str	r5, [sp, #68]	; 0x44
   13824:	ldr	r5, [fp, #-64]	; 0xffffffc0
   13828:	add	r0, r0, r2
   1382c:	add	r0, r0, r3, ror #27
   13830:	add	r2, r0, ip
   13834:	orr	r0, r3, r1, ror #2
   13838:	and	r0, r0, r7, ror #2
   1383c:	orr	r0, r0, r4
   13840:	ldr	r4, [sp, #72]	; 0x48
   13844:	eor	r4, r4, r5, ror #31
   13848:	ldr	r5, [fp, #-56]	; 0xffffffc8
   1384c:	eor	r4, r4, r5, ror #31
   13850:	eor	r4, r4, r8, ror #31
   13854:	mov	r8, ip
   13858:	ror	r5, r4, #31
   1385c:	str	r4, [fp, #-40]	; 0xffffffd8
   13860:	add	r4, r5, r6, ror #2
   13864:	str	r5, [sp, #72]	; 0x48
   13868:	ldr	r5, [fp, #-96]	; 0xffffffa0
   1386c:	add	r0, r4, r0
   13870:	and	r4, r2, r3, ror #2
   13874:	add	r0, r0, r2, ror #27
   13878:	add	r9, r0, ip
   1387c:	orr	r0, r2, r3, ror #2
   13880:	and	r0, r0, r1, ror #2
   13884:	orr	r0, r0, r4
   13888:	ldr	r4, [sp, #64]	; 0x40
   1388c:	eor	r4, r4, r5, ror #31
   13890:	ldr	r5, [fp, #-88]	; 0xffffffa8
   13894:	eor	r4, r4, r5, ror #31
   13898:	eor	r4, r4, sl, ror #31
   1389c:	ror	r5, r4, #31
   138a0:	mov	r6, r4
   138a4:	str	r4, [fp, #-64]	; 0xffffffc0
   138a8:	add	r4, r5, r7, ror #2
   138ac:	str	r5, [fp, #-96]	; 0xffffffa0
   138b0:	and	r5, r9, r2, ror #2
   138b4:	ldr	r7, [fp, #-72]	; 0xffffffb8
   138b8:	add	r0, r4, r0
   138bc:	orr	r4, r9, r2, ror #2
   138c0:	add	r0, r0, r9, ror #27
   138c4:	and	r4, r4, r3, ror #2
   138c8:	add	r0, r0, ip
   138cc:	orr	r4, r4, r5
   138d0:	ldr	r5, [sp, #60]	; 0x3c
   138d4:	eor	r5, r5, r7, ror #31
   138d8:	ldr	r7, [fp, #-92]	; 0xffffffa4
   138dc:	eor	r5, r5, r7, ror #31
   138e0:	eor	r5, r5, lr, ror #31
   138e4:	ror	r7, r5, #31
   138e8:	mov	lr, r5
   138ec:	str	r5, [fp, #-72]	; 0xffffffb8
   138f0:	and	r5, r0, r9, ror #2
   138f4:	add	r1, r7, r1, ror #2
   138f8:	str	r7, [sp, #64]	; 0x40
   138fc:	ldr	r7, [fp, #-60]	; 0xffffffc4
   13900:	add	r1, r1, r4
   13904:	orr	r4, r0, r9, ror #2
   13908:	add	r1, r1, r0, ror #27
   1390c:	and	r4, r4, r2, ror #2
   13910:	add	r1, r1, ip
   13914:	orr	r4, r4, r5
   13918:	ldr	r5, [sp, #56]	; 0x38
   1391c:	eor	r5, r5, r7, ror #31
   13920:	ldr	r7, [fp, #-36]	; 0xffffffdc
   13924:	eor	r5, r5, r7, ror #31
   13928:	ldr	r7, [fp, #-40]	; 0xffffffd8
   1392c:	eor	ip, r5, r7, ror #31
   13930:	and	r5, r1, r0, ror #2
   13934:	ror	r7, ip, #31
   13938:	str	ip, [fp, #-60]	; 0xffffffc4
   1393c:	add	r3, r7, r3, ror #2
   13940:	str	r7, [sp, #56]	; 0x38
   13944:	ldr	r7, [fp, #-32]	; 0xffffffe0
   13948:	add	r3, r3, r4
   1394c:	orr	r4, r1, r0, ror #2
   13950:	add	r3, r3, r1, ror #27
   13954:	and	r4, r4, r9, ror #2
   13958:	add	r3, r3, r8
   1395c:	orr	r4, r4, r5
   13960:	ldr	r5, [sp, #52]	; 0x34
   13964:	eor	r5, r5, r7, ror #31
   13968:	ldr	r7, [fp, #-80]	; 0xffffffb0
   1396c:	eor	r5, r5, r7, ror #31
   13970:	eor	r5, r5, r6, ror #31
   13974:	ror	r6, r5, #31
   13978:	str	r5, [fp, #-32]	; 0xffffffe0
   1397c:	and	r5, r3, r1, ror #2
   13980:	add	r2, r6, r2, ror #2
   13984:	str	r6, [sp, #52]	; 0x34
   13988:	ldr	r6, [fp, #-44]	; 0xffffffd4
   1398c:	add	r2, r2, r4
   13990:	orr	r4, r3, r1, ror #2
   13994:	add	r2, r2, r3, ror #27
   13998:	and	r4, r4, r0, ror #2
   1399c:	add	r2, r2, r8
   139a0:	orr	r4, r4, r5
   139a4:	ldr	r5, [fp, #-52]	; 0xffffffcc
   139a8:	eor	r5, r6, r5, ror #31
   139ac:	ldr	r6, [fp, #-84]	; 0xffffffac
   139b0:	eor	r5, r5, r6, ror #31
   139b4:	ldr	r6, [sp, #44]	; 0x2c
   139b8:	eor	r7, r5, lr, ror #31
   139bc:	str	r7, [fp, #-44]	; 0xffffffd4
   139c0:	ror	r7, r7, #31
   139c4:	add	r5, r7, r9, ror #2
   139c8:	str	r7, [sp, #24]
   139cc:	ror	r7, r3, #2
   139d0:	eor	r7, r7, r1, ror #2
   139d4:	add	r4, r5, r4
   139d8:	ldr	r5, [sp, #16]
   139dc:	add	r4, r4, r2, ror #27
   139e0:	eor	r7, r7, r2
   139e4:	add	r4, r4, r8
   139e8:	eor	r6, r6, r5, ror #31
   139ec:	eor	r6, r6, sl, ror #31
   139f0:	eor	lr, r6, ip, ror #31
   139f4:	ror	r6, lr, #31
   139f8:	str	lr, [fp, #-52]	; 0xffffffcc
   139fc:	add	r0, r6, r0, ror #2
   13a00:	str	r6, [sp, #20]
   13a04:	ldr	r6, [sp, #40]	; 0x28
   13a08:	add	r0, r0, r7
   13a0c:	movw	r7, #49622	; 0xc1d6
   13a10:	movt	r7, #51810	; 0xca62
   13a14:	add	r0, r0, r4, ror #27
   13a18:	add	ip, r0, r7
   13a1c:	ldr	r0, [fp, #-48]	; 0xffffffd0
   13a20:	mov	r9, r7
   13a24:	ror	r7, r2, #2
   13a28:	eor	r7, r7, r3, ror #2
   13a2c:	mov	r5, r9
   13a30:	eor	r7, r7, r4
   13a34:	eor	r6, r6, r0, ror #31
   13a38:	ldr	r0, [fp, #-68]	; 0xffffffbc
   13a3c:	eor	r6, r6, r0, ror #31
   13a40:	ldr	r0, [fp, #-32]	; 0xffffffe0
   13a44:	eor	r8, r6, r0, ror #31
   13a48:	ror	r0, r8, #31
   13a4c:	str	r8, [fp, #-76]	; 0xffffffb4
   13a50:	add	r1, r0, r1, ror #2
   13a54:	str	r0, [sp, #40]	; 0x28
   13a58:	ldr	r0, [fp, #-56]	; 0xffffffc8
   13a5c:	add	r1, r1, r7
   13a60:	ldr	r7, [sp, #32]
   13a64:	add	r1, r1, ip, ror #27
   13a68:	add	r6, r1, r9
   13a6c:	ror	r1, r4, #2
   13a70:	eor	r7, r7, r0, ror #31
   13a74:	ldr	r0, [fp, #-40]	; 0xffffffd8
   13a78:	eor	r1, r1, r2, ror #2
   13a7c:	eor	r1, r1, ip
   13a80:	eor	r7, r7, r0, ror #31
   13a84:	ldr	r0, [fp, #-44]	; 0xffffffd4
   13a88:	eor	r7, r7, r0, ror #31
   13a8c:	ror	r0, r7, #31
   13a90:	mov	r9, r7
   13a94:	str	r7, [fp, #-56]	; 0xffffffc8
   13a98:	add	r3, r0, r3, ror #2
   13a9c:	str	r0, [sp, #44]	; 0x2c
   13aa0:	ldr	r0, [fp, #-88]	; 0xffffffa8
   13aa4:	add	r1, r3, r1
   13aa8:	ror	r3, ip, #2
   13aac:	add	r1, r1, r6, ror #27
   13ab0:	eor	r3, r3, r4, ror #2
   13ab4:	add	r1, r1, r5
   13ab8:	ldr	r5, [sp, #28]
   13abc:	eor	r3, r3, r6
   13ac0:	eor	r7, r5, r0, ror #31
   13ac4:	ldr	r0, [fp, #-64]	; 0xffffffc0
   13ac8:	movw	r5, #49622	; 0xc1d6
   13acc:	movt	r5, #51810	; 0xca62
   13ad0:	eor	r7, r7, r0, ror #31
   13ad4:	ldr	r0, [fp, #-92]	; 0xffffffa4
   13ad8:	eor	sl, r7, lr, ror #31
   13adc:	ror	lr, sl, #31
   13ae0:	str	sl, [fp, #-48]	; 0xffffffd0
   13ae4:	add	r2, lr, r2, ror #2
   13ae8:	str	lr, [sp, #60]	; 0x3c
   13aec:	add	r2, r2, r3
   13af0:	ldr	r3, [sp, #36]	; 0x24
   13af4:	add	r2, r2, r1, ror #27
   13af8:	add	r7, r2, r5
   13afc:	ror	r2, r6, #2
   13b00:	eor	r3, r3, r0, ror #31
   13b04:	ldr	r0, [fp, #-72]	; 0xffffffb8
   13b08:	eor	r2, r2, ip, ror #2
   13b0c:	eor	r2, r2, r1
   13b10:	eor	r3, r3, r0, ror #31
   13b14:	eor	r0, r3, r8, ror #31
   13b18:	mov	r8, r5
   13b1c:	ror	r3, r0, #31
   13b20:	mov	lr, r0
   13b24:	str	r0, [fp, #-92]	; 0xffffffa4
   13b28:	ldr	r0, [fp, #-36]	; 0xffffffdc
   13b2c:	str	r3, [fp, #-88]	; 0xffffffa8
   13b30:	add	r3, r3, r4, ror #2
   13b34:	ldr	r4, [sp, #48]	; 0x30
   13b38:	add	r2, r3, r2
   13b3c:	ror	r3, r1, #2
   13b40:	eor	r3, r3, r6, ror #2
   13b44:	add	r2, r2, r7, ror #27
   13b48:	eor	r4, r4, r0, ror #31
   13b4c:	ldr	r0, [fp, #-60]	; 0xffffffc4
   13b50:	eor	r3, r3, r7
   13b54:	add	r2, r2, r5
   13b58:	eor	r4, r4, r0, ror #31
   13b5c:	eor	r9, r4, r9, ror #31
   13b60:	ror	r4, r9, #31
   13b64:	str	r9, [sp, #48]	; 0x30
   13b68:	add	r0, r4, ip, ror #2
   13b6c:	str	r4, [fp, #-36]	; 0xffffffdc
   13b70:	ldr	r4, [sp, #100]	; 0x64
   13b74:	mov	ip, r8
   13b78:	add	r0, r0, r3
   13b7c:	ror	r3, r7, #2
   13b80:	add	r0, r0, r2, ror #27
   13b84:	eor	r3, r3, r1, ror #2
   13b88:	add	r0, r0, r5
   13b8c:	ldr	r5, [fp, #-80]	; 0xffffffb0
   13b90:	eor	r3, r3, r2
   13b94:	eor	r4, r4, r5, ror #31
   13b98:	ldr	r5, [fp, #-32]	; 0xffffffe0
   13b9c:	eor	r4, r4, r5, ror #31
   13ba0:	eor	r5, r4, sl, ror #31
   13ba4:	ror	r4, r5, #31
   13ba8:	mov	sl, r5
   13bac:	str	r5, [sp, #100]	; 0x64
   13bb0:	ldr	r5, [fp, #-84]	; 0xffffffac
   13bb4:	add	r6, r4, r6, ror #2
   13bb8:	add	r3, r6, r3
   13bbc:	ror	r6, r2, #2
   13bc0:	eor	r6, r6, r7, ror #2
   13bc4:	add	r3, r3, r0, ror #27
   13bc8:	eor	r4, r6, r0
   13bcc:	ldr	r6, [sp, #68]	; 0x44
   13bd0:	add	r3, r3, r8
   13bd4:	eor	r6, r6, r5, ror #31
   13bd8:	ldr	r5, [fp, #-44]	; 0xffffffd4
   13bdc:	eor	r6, r6, r5, ror #31
   13be0:	ldr	r5, [sp, #12]
   13be4:	eor	r8, r6, lr, ror #31
   13be8:	ror	r6, r8, #31
   13bec:	str	r8, [sp, #68]	; 0x44
   13bf0:	add	r1, r6, r1, ror #2
   13bf4:	ror	r6, r0, #2
   13bf8:	eor	r6, r6, r2, ror #2
   13bfc:	add	r1, r1, r4
   13c00:	ldr	r4, [sp, #72]	; 0x48
   13c04:	add	r1, r1, r3, ror #27
   13c08:	eor	r6, r6, r3
   13c0c:	add	r1, r1, ip
   13c10:	eor	r4, r4, r5, ror #31
   13c14:	ldr	r5, [fp, #-52]	; 0xffffffcc
   13c18:	eor	r4, r4, r5, ror #31
   13c1c:	ldr	r5, [fp, #-76]	; 0xffffffb4
   13c20:	eor	lr, r4, r9, ror #31
   13c24:	ror	r4, lr, #31
   13c28:	str	lr, [fp, #-84]	; 0xffffffac
   13c2c:	add	r7, r4, r7, ror #2
   13c30:	ror	r4, r3, #2
   13c34:	eor	r4, r4, r0, ror #2
   13c38:	add	r7, r7, r6
   13c3c:	movw	r6, #49622	; 0xc1d6
   13c40:	add	r7, r7, r1, ror #27
   13c44:	movt	r6, #51810	; 0xca62
   13c48:	eor	r4, r4, r1
   13c4c:	add	ip, r7, r6
   13c50:	ldr	r6, [fp, #-96]	; 0xffffffa0
   13c54:	ldr	r7, [fp, #-68]	; 0xffffffbc
   13c58:	eor	r6, r6, r7, ror #31
   13c5c:	eor	r6, r6, r5, ror #31
   13c60:	eor	r7, r6, sl, ror #31
   13c64:	movw	sl, #49622	; 0xc1d6
   13c68:	movt	sl, #51810	; 0xca62
   13c6c:	ror	r6, r7, #31
   13c70:	mov	r5, r7
   13c74:	str	r7, [fp, #-80]	; 0xffffffb0
   13c78:	ldr	r7, [fp, #-40]	; 0xffffffd8
   13c7c:	add	r2, r6, r2, ror #2
   13c80:	ldr	r6, [sp, #64]	; 0x40
   13c84:	add	r2, r2, r4
   13c88:	ror	r4, r1, #2
   13c8c:	eor	r4, r4, r3, ror #2
   13c90:	add	r2, r2, ip, ror #27
   13c94:	eor	r6, r6, r7, ror #31
   13c98:	ldr	r7, [fp, #-56]	; 0xffffffc8
   13c9c:	eor	r4, r4, ip
   13ca0:	add	r2, r2, sl
   13ca4:	eor	r6, r6, r7, ror #31
   13ca8:	ldr	r7, [fp, #-64]	; 0xffffffc0
   13cac:	eor	r9, r6, r8, ror #31
   13cb0:	ror	r6, r9, #31
   13cb4:	str	r9, [fp, #-68]	; 0xffffffbc
   13cb8:	add	r0, r6, r0, ror #2
   13cbc:	ldr	r6, [sp, #56]	; 0x38
   13cc0:	add	r0, r0, r4
   13cc4:	ror	r4, ip, #2
   13cc8:	eor	r4, r4, r1, ror #2
   13ccc:	add	r0, r0, r2, ror #27
   13cd0:	eor	r6, r6, r7, ror #31
   13cd4:	ldr	r7, [fp, #-48]	; 0xffffffd0
   13cd8:	eor	r4, r4, r2
   13cdc:	add	r0, r0, sl
   13ce0:	eor	r6, r6, r7, ror #31
   13ce4:	ldr	r7, [fp, #-72]	; 0xffffffb8
   13ce8:	eor	r8, r6, lr, ror #31
   13cec:	ror	r6, r8, #31
   13cf0:	str	r8, [fp, #-40]	; 0xffffffd8
   13cf4:	add	r3, r6, r3, ror #2
   13cf8:	add	r3, r3, r4
   13cfc:	ror	r4, r2, #2
   13d00:	eor	r4, r4, ip, ror #2
   13d04:	add	r3, r3, r0, ror #27
   13d08:	eor	r6, r4, r0
   13d0c:	ldr	r4, [sp, #52]	; 0x34
   13d10:	add	r3, r3, sl
   13d14:	eor	r4, r4, r7, ror #31
   13d18:	ldr	r7, [fp, #-92]	; 0xffffffa4
   13d1c:	eor	r4, r4, r7, ror #31
   13d20:	eor	r4, r4, r5, ror #31
   13d24:	ldr	r5, [fp, #-60]	; 0xffffffc4
   13d28:	ror	r7, r4, #31
   13d2c:	add	r1, r7, r1, ror #2
   13d30:	add	r1, r1, r6
   13d34:	ldr	r6, [sp, #24]
   13d38:	add	r1, r1, r3, ror #27
   13d3c:	add	lr, r1, sl
   13d40:	ror	r1, r0, #2
   13d44:	eor	r6, r6, r5, ror #31
   13d48:	ldr	r5, [sp, #48]	; 0x30
   13d4c:	eor	r1, r1, r2, ror #2
   13d50:	eor	r1, r1, r3
   13d54:	eor	r6, r6, r5, ror #31
   13d58:	ldr	r5, [fp, #-32]	; 0xffffffe0
   13d5c:	eor	r9, r6, r9, ror #31
   13d60:	ror	r6, r9, #31
   13d64:	add	r7, r6, ip, ror #2
   13d68:	ldr	r6, [sp, #20]
   13d6c:	add	r1, r7, r1
   13d70:	ror	r7, r3, #2
   13d74:	eor	r7, r7, r0, ror #2
   13d78:	add	r1, r1, lr, ror #27
   13d7c:	eor	r6, r6, r5, ror #31
   13d80:	ldr	r5, [sp, #100]	; 0x64
   13d84:	eor	r7, r7, lr
   13d88:	add	r1, r1, sl
   13d8c:	eor	r6, r6, r5, ror #31
   13d90:	ldr	r5, [fp, #-44]	; 0xffffffd4
   13d94:	eor	ip, r6, r8, ror #31
   13d98:	mov	r8, sl
   13d9c:	ror	r6, ip, #31
   13da0:	add	r2, r6, r2, ror #2
   13da4:	ldr	r6, [sp, #40]	; 0x28
   13da8:	add	r2, r2, r7
   13dac:	ror	r7, lr, #2
   13db0:	add	r2, r2, r1, ror #27
   13db4:	eor	r7, r7, r3, ror #2
   13db8:	eor	r6, r6, r5, ror #31
   13dbc:	ldr	r5, [sp, #68]	; 0x44
   13dc0:	add	r2, r2, sl
   13dc4:	eor	r7, r7, r1
   13dc8:	eor	r6, r6, r5, ror #31
   13dcc:	ldr	r5, [sp, #80]	; 0x50
   13dd0:	eor	sl, r6, r4, ror #31
   13dd4:	ldr	r6, [fp, #-52]	; 0xffffffcc
   13dd8:	ror	r4, sl, #31
   13ddc:	add	r0, r4, r0, ror #2
   13de0:	add	r0, r0, r7
   13de4:	ldr	r7, [sp, #76]	; 0x4c
   13de8:	add	r0, r0, r2, ror #27
   13dec:	add	r0, r0, r8
   13df0:	add	r7, r7, r0, ror #2
   13df4:	str	r7, [r5, #16]
   13df8:	ror	r7, r1, #2
   13dfc:	eor	r7, r7, lr, ror #2
   13e00:	eor	r4, r7, r2
   13e04:	ldr	r7, [sp, #44]	; 0x2c
   13e08:	eor	r7, r7, r6, ror #31
   13e0c:	ldr	r6, [fp, #-84]	; 0xffffffac
   13e10:	eor	r7, r7, r6, ror #31
   13e14:	ldr	r6, [fp, #-76]	; 0xffffffb4
   13e18:	eor	r9, r7, r9, ror #31
   13e1c:	ror	r7, r9, #31
   13e20:	add	r3, r7, r3, ror #2
   13e24:	add	r3, r3, r4
   13e28:	ldr	r4, [sp, #92]	; 0x5c
   13e2c:	add	r3, r3, r0, ror #27
   13e30:	add	r3, r3, r8
   13e34:	mov	r8, r5
   13e38:	add	r4, r4, r3, ror #2
   13e3c:	str	r4, [r5, #12]
   13e40:	ldr	r5, [sp, #60]	; 0x3c
   13e44:	ror	r4, r2, #2
   13e48:	eor	r4, r4, r1, ror #2
   13e4c:	eor	r4, r4, r0
   13e50:	eor	r7, r5, r6, ror #31
   13e54:	ldr	r5, [fp, #-80]	; 0xffffffb0
   13e58:	movw	r6, #49622	; 0xc1d6
   13e5c:	movt	r6, #51810	; 0xca62
   13e60:	eor	r7, r7, r5, ror #31
   13e64:	ldr	r5, [sp, #84]	; 0x54
   13e68:	eor	r7, r7, ip, ror #31
   13e6c:	ror	r7, r7, #31
   13e70:	add	r7, r7, lr, ror #2
   13e74:	add	r7, r7, r4
   13e78:	add	r7, r7, r3, ror #27
   13e7c:	add	r7, r7, r6
   13e80:	ldr	r6, [fp, #-56]	; 0xffffffc8
   13e84:	add	r4, r5, r7, ror #2
   13e88:	ldr	r5, [fp, #-88]	; 0xffffffa8
   13e8c:	str	r4, [r8, #8]
   13e90:	ror	r4, r0, #2
   13e94:	eor	r4, r4, r2, ror #2
   13e98:	eor	r5, r5, r6, ror #31
   13e9c:	ldr	r6, [fp, #-68]	; 0xffffffbc
   13ea0:	eor	r4, r4, r3
   13ea4:	ror	r3, r3, #2
   13ea8:	eor	r0, r3, r0, ror #2
   13eac:	ldr	r3, [fp, #-36]	; 0xffffffdc
   13eb0:	eor	r5, r5, r6, ror #31
   13eb4:	eor	r0, r0, r7
   13eb8:	eor	r6, r5, sl, ror #31
   13ebc:	movw	r5, #49622	; 0xc1d6
   13ec0:	movt	r5, #51810	; 0xca62
   13ec4:	ror	r6, r6, #31
   13ec8:	add	r1, r6, r1, ror #2
   13ecc:	ldr	r6, [sp, #96]	; 0x60
   13ed0:	add	r1, r1, r4
   13ed4:	add	r1, r1, r7, ror #27
   13ed8:	ldr	r7, [fp, #-48]	; 0xffffffd0
   13edc:	add	r1, r1, r5
   13ee0:	add	r6, r1, r6
   13ee4:	eor	r3, r3, r7, ror #31
   13ee8:	ldr	r7, [fp, #-40]	; 0xffffffd8
   13eec:	str	r6, [r8, #4]
   13ef0:	eor	r3, r3, r7, ror #31
   13ef4:	ldr	r7, [sp, #88]	; 0x58
   13ef8:	eor	r3, r3, r9, ror #31
   13efc:	add	r3, r7, r3, ror #31
   13f00:	add	r2, r3, r2, ror #2
   13f04:	add	r0, r2, r0
   13f08:	add	r0, r0, r1, ror #27
   13f0c:	add	r0, r0, r5
   13f10:	str	r0, [r8]
   13f14:	sub	sp, fp, #28
   13f18:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13f1c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13f20:	add	fp, sp, #28
   13f24:	sub	sp, sp, #12
   13f28:	mov	r5, r0
   13f2c:	mov	r7, r0
   13f30:	mov	sl, r1
   13f34:	ldr	r0, [r5, #24]!
   13f38:	ldr	r1, [r5, #4]
   13f3c:	lsr	r2, r0, #8
   13f40:	strb	r0, [sp, #7]
   13f44:	adds	r4, r0, #8
   13f48:	strb	r2, [sp, #6]
   13f4c:	lsr	r2, r0, #16
   13f50:	adc	r9, r1, #0
   13f54:	strb	r2, [sp, #5]
   13f58:	lsr	r2, r0, #24
   13f5c:	strb	r2, [sp, #4]
   13f60:	lsr	r2, r1, #8
   13f64:	strb	r1, [sp, #3]
   13f68:	strb	r2, [sp, #2]
   13f6c:	lsr	r2, r1, #16
   13f70:	strb	r2, [sp, #1]
   13f74:	lsr	r2, r1, #24
   13f78:	strb	r2, [sp]
   13f7c:	stm	r5, {r4, r9}
   13f80:	ubfx	r0, r0, #3, #6
   13f84:	cmp	r0, #63	; 0x3f
   13f88:	bne	13fb0 <rb_base64_encode@plt+0x2fa8>
   13f8c:	mov	r0, #128	; 0x80
   13f90:	add	r1, r7, #32
   13f94:	strb	r0, [r7, #95]	; 0x5f
   13f98:	mov	r0, r7
   13f9c:	bl	12afc <rb_base64_encode@plt+0x1af4>
   13fa0:	ldm	r5, {r4, r9}
   13fa4:	mov	r0, #0
   13fa8:	mov	r2, #1
   13fac:	b	13fb4 <rb_base64_encode@plt+0x2fac>
   13fb0:	mov	r2, #0
   13fb4:	ldr	r1, [pc, #344]	; 14114 <rb_base64_encode@plt+0x310c>
   13fb8:	add	r0, r7, r0
   13fbc:	add	r0, r0, #32
   13fc0:	add	r1, pc, r1
   13fc4:	add	r1, r1, r2
   13fc8:	eor	r2, r2, #1
   13fcc:	bl	10edc <memcpy@plt>
   13fd0:	and	r0, r4, #504	; 0x1f8
   13fd4:	ubfx	r6, r4, #3, #6
   13fd8:	teq	r0, #448	; 0x1c0
   13fdc:	beq	1404c <rb_base64_encode@plt+0x3044>
   13fe0:	add	r8, r7, #32
   13fe4:	b	14018 <rb_base64_encode@plt+0x3010>
   13fe8:	ldr	r0, [pc, #296]	; 14118 <rb_base64_encode@plt+0x3110>
   13fec:	add	r0, pc, r0
   13ff0:	add	r1, r0, r2
   13ff4:	add	r0, r7, r6
   13ff8:	eor	r2, r2, #1
   13ffc:	add	r0, r0, #32
   14000:	bl	10edc <memcpy@plt>
   14004:	ldm	r5, {r4, r9}
   14008:	and	r0, r4, #504	; 0x1f8
   1400c:	ubfx	r6, r4, #3, #6
   14010:	teq	r0, #448	; 0x1c0
   14014:	beq	1404c <rb_base64_encode@plt+0x3044>
   14018:	adds	r0, r4, #8
   1401c:	mov	r2, #0
   14020:	adc	r1, r9, #0
   14024:	cmp	r6, #63	; 0x3f
   14028:	strd	r0, [r5]
   1402c:	bne	13fe8 <rb_base64_encode@plt+0x2fe0>
   14030:	mov	r6, #0
   14034:	mov	r0, r7
   14038:	mov	r1, r8
   1403c:	strb	r6, [r7, #95]	; 0x5f
   14040:	bl	12afc <rb_base64_encode@plt+0x1af4>
   14044:	mov	r2, #1
   14048:	b	13fe8 <rb_base64_encode@plt+0x2fe0>
   1404c:	adds	r0, r4, #64	; 0x40
   14050:	adc	r1, r9, #0
   14054:	cmp	r6, #56	; 0x38
   14058:	strd	r0, [r5]
   1405c:	mov	r5, #0
   14060:	bcc	14090 <rb_base64_encode@plt+0x3088>
   14064:	add	r8, r7, #32
   14068:	rsb	r4, r6, #64	; 0x40
   1406c:	mov	r1, sp
   14070:	add	r0, r8, r6
   14074:	mov	r2, r4
   14078:	bl	10edc <memcpy@plt>
   1407c:	mov	r0, r7
   14080:	mov	r1, r8
   14084:	bl	12afc <rb_base64_encode@plt+0x1af4>
   14088:	mov	r6, #0
   1408c:	b	14094 <rb_base64_encode@plt+0x308c>
   14090:	mov	r4, #0
   14094:	mov	r0, sp
   14098:	rsb	r2, r4, #8
   1409c:	add	r1, r0, r4
   140a0:	add	r0, r7, r6
   140a4:	add	r0, r0, #32
   140a8:	bl	10edc <memcpy@plt>
   140ac:	mov	r0, #24
   140b0:	mov	r1, #0
   140b4:	bic	r2, r1, #3
   140b8:	bic	r3, r0, r5
   140bc:	add	r5, r5, #8
   140c0:	ldr	r2, [r7, r2]
   140c4:	lsr	r2, r2, r3
   140c8:	strb	r2, [sl, r1]
   140cc:	add	r1, r1, #1
   140d0:	cmp	r1, #20
   140d4:	bne	140b4 <rb_base64_encode@plt+0x30ac>
   140d8:	vmov.i32	q8, #0	; 0x00000000
   140dc:	mov	r0, #80	; 0x50
   140e0:	mov	r1, r7
   140e4:	vst1.64	{d16-d17}, [r1], r0
   140e8:	add	r0, r7, #64	; 0x40
   140ec:	vst1.64	{d16-d17}, [r0]
   140f0:	add	r0, r7, #48	; 0x30
   140f4:	vst1.64	{d16-d17}, [r1]
   140f8:	vst1.64	{d16-d17}, [r0]
   140fc:	add	r0, r7, #32
   14100:	vst1.64	{d16-d17}, [r0]
   14104:	add	r0, r7, #16
   14108:	vst1.64	{d16-d17}, [r0]
   1410c:	sub	sp, fp, #28
   14110:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14114:	andeq	r0, r0, r3, lsl #8
   14118:	ldrdeq	r0, [r0], -r9
   1411c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   14120:	mov	r7, r0
   14124:	ldr	r6, [pc, #72]	; 14174 <rb_base64_encode@plt+0x316c>
   14128:	ldr	r5, [pc, #72]	; 14178 <rb_base64_encode@plt+0x3170>
   1412c:	add	r6, pc, r6
   14130:	add	r5, pc, r5
   14134:	sub	r6, r6, r5
   14138:	mov	r8, r1
   1413c:	mov	r9, r2
   14140:	bl	10d84 <open@plt-0x20>
   14144:	asrs	r6, r6, #2
   14148:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   1414c:	mov	r4, #0
   14150:	add	r4, r4, #1
   14154:	ldr	r3, [r5], #4
   14158:	mov	r2, r9
   1415c:	mov	r1, r8
   14160:	mov	r0, r7
   14164:	blx	r3
   14168:	cmp	r6, r4
   1416c:	bne	14150 <rb_base64_encode@plt+0x3148>
   14170:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   14174:	andeq	r0, r1, r0, asr #27
   14178:			; <UNDEFINED> instruction: 0x00010db8
   1417c:	bx	lr

Disassembly of section .fini:

00014180 <.fini>:
   14180:	push	{r3, lr}
   14184:	pop	{r3, pc}
