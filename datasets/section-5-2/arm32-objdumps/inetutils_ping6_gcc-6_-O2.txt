
../repos/inetutils/ping/ping6:     file format elf32-littlearm


Disassembly of section .init:

000110b4 <.init>:
   110b4:	push	{r3, lr}
   110b8:	bl	1180c <__assert_fail@plt+0x3d8>
   110bc:	pop	{r3, pc}

Disassembly of section .plt:

000110c0 <calloc@plt-0x14>:
   110c0:	push	{lr}		; (str lr, [sp, #-4]!)
   110c4:	ldr	lr, [pc, #4]	; 110d0 <calloc@plt-0x4>
   110c8:	add	lr, pc, lr
   110cc:	ldr	pc, [lr, #8]!
   110d0:	andeq	sl, r1, r0, lsr pc

000110d4 <calloc@plt>:
   110d4:	add	ip, pc, #0, 12
   110d8:	add	ip, ip, #106496	; 0x1a000
   110dc:	ldr	pc, [ip, #3888]!	; 0xf30

000110e0 <fputs_unlocked@plt>:
   110e0:	add	ip, pc, #0, 12
   110e4:	add	ip, ip, #106496	; 0x1a000
   110e8:	ldr	pc, [ip, #3880]!	; 0xf28

000110ec <raise@plt>:
   110ec:	add	ip, pc, #0, 12
   110f0:	add	ip, ip, #106496	; 0x1a000
   110f4:	ldr	pc, [ip, #3872]!	; 0xf20

000110f8 <setbuf@plt>:
   110f8:	add	ip, pc, #0, 12
   110fc:	add	ip, ip, #106496	; 0x1a000
   11100:	ldr	pc, [ip, #3864]!	; 0xf18

00011104 <strcmp@plt>:
   11104:	add	ip, pc, #0, 12
   11108:	add	ip, ip, #106496	; 0x1a000
   1110c:	ldr	pc, [ip, #3856]!	; 0xf10

00011110 <strtol@plt>:
   11110:	add	ip, pc, #0, 12
   11114:	add	ip, ip, #106496	; 0x1a000
   11118:	ldr	pc, [ip, #3848]!	; 0xf08

0001111c <setsockopt@plt>:
   1111c:	add	ip, pc, #0, 12
   11120:	add	ip, ip, #106496	; 0x1a000
   11124:	ldr	pc, [ip, #3840]!	; 0xf00

00011128 <printf@plt>:
   11128:	add	ip, pc, #0, 12
   1112c:	add	ip, ip, #106496	; 0x1a000
   11130:	ldr	pc, [ip, #3832]!	; 0xef8

00011134 <fflush@plt>:
   11134:	add	ip, pc, #0, 12
   11138:	add	ip, ip, #106496	; 0x1a000
   1113c:	ldr	pc, [ip, #3824]!	; 0xef0

00011140 <getuid@plt>:
   11140:	add	ip, pc, #0, 12
   11144:	add	ip, ip, #106496	; 0x1a000
   11148:	ldr	pc, [ip, #3816]!	; 0xee8

0001114c <memmove@plt>:
   1114c:	add	ip, pc, #0, 12
   11150:	add	ip, ip, #106496	; 0x1a000
   11154:	ldr	pc, [ip, #3808]!	; 0xee0

00011158 <strchrnul@plt>:
   11158:	add	ip, pc, #0, 12
   1115c:	add	ip, ip, #106496	; 0x1a000
   11160:	ldr	pc, [ip, #3800]!	; 0xed8

00011164 <free@plt>:
   11164:	add	ip, pc, #0, 12
   11168:	add	ip, ip, #106496	; 0x1a000
   1116c:	ldr	pc, [ip, #3792]!	; 0xed0

00011170 <gai_strerror@plt>:
   11170:	add	ip, pc, #0, 12
   11174:	add	ip, ip, #106496	; 0x1a000
   11178:	ldr	pc, [ip, #3784]!	; 0xec8

0001117c <strndup@plt>:
   1117c:	add	ip, pc, #0, 12
   11180:	add	ip, ip, #106496	; 0x1a000
   11184:	ldr	pc, [ip, #3776]!	; 0xec0

00011188 <memcpy@plt>:
   11188:	add	ip, pc, #0, 12
   1118c:	add	ip, ip, #106496	; 0x1a000
   11190:	ldr	pc, [ip, #3768]!	; 0xeb8

00011194 <signal@plt>:
   11194:	add	ip, pc, #0, 12
   11198:	add	ip, ip, #106496	; 0x1a000
   1119c:	ldr	pc, [ip, #3760]!	; 0xeb0

000111a0 <fwrite_unlocked@plt>:
   111a0:	add	ip, pc, #0, 12
   111a4:	add	ip, ip, #106496	; 0x1a000
   111a8:	ldr	pc, [ip, #3752]!	; 0xea8

000111ac <inet_ntoa@plt>:
   111ac:	add	ip, pc, #0, 12
   111b0:	add	ip, ip, #106496	; 0x1a000
   111b4:	ldr	pc, [ip, #3744]!	; 0xea0

000111b8 <select@plt>:
   111b8:	add	ip, pc, #0, 12
   111bc:	add	ip, ip, #106496	; 0x1a000
   111c0:	ldr	pc, [ip, #3736]!	; 0xe98

000111c4 <sleep@plt>:
   111c4:	add	ip, pc, #0, 12
   111c8:	add	ip, ip, #106496	; 0x1a000
   111cc:	ldr	pc, [ip, #3728]!	; 0xe90

000111d0 <gethostbyaddr@plt>:
   111d0:	add	ip, pc, #0, 12
   111d4:	add	ip, ip, #106496	; 0x1a000
   111d8:	ldr	pc, [ip, #3720]!	; 0xe88

000111dc <strdup@plt>:
   111dc:	add	ip, pc, #0, 12
   111e0:	add	ip, ip, #106496	; 0x1a000
   111e4:	ldr	pc, [ip, #3712]!	; 0xe80

000111e8 <realloc@plt>:
   111e8:	add	ip, pc, #0, 12
   111ec:	add	ip, ip, #106496	; 0x1a000
   111f0:	ldr	pc, [ip, #3704]!	; 0xe78

000111f4 <strcasecmp@plt>:
   111f4:	add	ip, pc, #0, 12
   111f8:	add	ip, ip, #106496	; 0x1a000
   111fc:	ldr	pc, [ip, #3696]!	; 0xe70

00011200 <funlockfile@plt>:
   11200:	add	ip, pc, #0, 12
   11204:	add	ip, ip, #106496	; 0x1a000
   11208:	ldr	pc, [ip, #3688]!	; 0xe68

0001120c <fwrite@plt>:
   1120c:	add	ip, pc, #0, 12
   11210:	add	ip, ip, #106496	; 0x1a000
   11214:	ldr	pc, [ip, #3680]!	; 0xe60

00011218 <gettimeofday@plt>:
   11218:	add	ip, pc, #0, 12
   1121c:	add	ip, ip, #106496	; 0x1a000
   11220:	ldr	pc, [ip, #3672]!	; 0xe58

00011224 <error@plt>:
   11224:	add	ip, pc, #0, 12
   11228:	add	ip, ip, #106496	; 0x1a000
   1122c:	ldr	pc, [ip, #3664]!	; 0xe50

00011230 <getenv@plt>:
   11230:	add	ip, pc, #0, 12
   11234:	add	ip, ip, #106496	; 0x1a000
   11238:	ldr	pc, [ip, #3656]!	; 0xe48

0001123c <puts@plt>:
   1123c:	add	ip, pc, #0, 12
   11240:	add	ip, ip, #106496	; 0x1a000
   11244:	ldr	pc, [ip, #3648]!	; 0xe40

00011248 <malloc@plt>:
   11248:	add	ip, pc, #0, 12
   1124c:	add	ip, ip, #106496	; 0x1a000
   11250:	ldr	pc, [ip, #3640]!	; 0xe38

00011254 <__libc_start_main@plt>:
   11254:	add	ip, pc, #0, 12
   11258:	add	ip, ip, #106496	; 0x1a000
   1125c:	ldr	pc, [ip, #3632]!	; 0xe30

00011260 <strerror@plt>:
   11260:	add	ip, pc, #0, 12
   11264:	add	ip, ip, #106496	; 0x1a000
   11268:	ldr	pc, [ip, #3624]!	; 0xe28

0001126c <__ctype_tolower_loc@plt>:
   1126c:	add	ip, pc, #0, 12
   11270:	add	ip, ip, #106496	; 0x1a000
   11274:	ldr	pc, [ip, #3616]!	; 0xe20

00011278 <__gmon_start__@plt>:
   11278:	add	ip, pc, #0, 12
   1127c:	add	ip, ip, #106496	; 0x1a000
   11280:	ldr	pc, [ip, #3608]!	; 0xe18

00011284 <mempcpy@plt>:
   11284:	add	ip, pc, #0, 12
   11288:	add	ip, ip, #106496	; 0x1a000
   1128c:	ldr	pc, [ip, #3600]!	; 0xe10

00011290 <__ctype_b_loc@plt>:
   11290:	add	ip, pc, #0, 12
   11294:	add	ip, ip, #106496	; 0x1a000
   11298:	ldr	pc, [ip, #3592]!	; 0xe08

0001129c <getpid@plt>:
   1129c:	add	ip, pc, #0, 12
   112a0:	add	ip, ip, #106496	; 0x1a000
   112a4:	ldr	pc, [ip, #3584]!	; 0xe00

000112a8 <exit@plt>:
   112a8:	add	ip, pc, #0, 12
   112ac:	add	ip, ip, #106496	; 0x1a000
   112b0:	ldr	pc, [ip, #3576]!	; 0xdf8

000112b4 <strtoul@plt>:
   112b4:	add	ip, pc, #0, 12
   112b8:	add	ip, ip, #106496	; 0x1a000
   112bc:	ldr	pc, [ip, #3568]!	; 0xdf0

000112c0 <strlen@plt>:
   112c0:	add	ip, pc, #0, 12
   112c4:	add	ip, ip, #106496	; 0x1a000
   112c8:	ldr	pc, [ip, #3560]!	; 0xde8

000112cc <strchr@plt>:
   112cc:	add	ip, pc, #0, 12
   112d0:	add	ip, ip, #106496	; 0x1a000
   112d4:	ldr	pc, [ip, #3552]!	; 0xde0

000112d8 <fprintf@plt>:
   112d8:	add	ip, pc, #0, 12
   112dc:	add	ip, ip, #106496	; 0x1a000
   112e0:	ldr	pc, [ip, #3544]!	; 0xdd8

000112e4 <__errno_location@plt>:
   112e4:	add	ip, pc, #0, 12
   112e8:	add	ip, ip, #106496	; 0x1a000
   112ec:	ldr	pc, [ip, #3536]!	; 0xdd0

000112f0 <snprintf@plt>:
   112f0:	add	ip, pc, #0, 12
   112f4:	add	ip, ip, #106496	; 0x1a000
   112f8:	ldr	pc, [ip, #3528]!	; 0xdc8

000112fc <strerror_r@plt>:
   112fc:	add	ip, pc, #0, 12
   11300:	add	ip, ip, #106496	; 0x1a000
   11304:	ldr	pc, [ip, #3520]!	; 0xdc0

00011308 <setvbuf@plt>:
   11308:	add	ip, pc, #0, 12
   1130c:	add	ip, ip, #106496	; 0x1a000
   11310:	ldr	pc, [ip, #3512]!	; 0xdb8

00011314 <memset@plt>:
   11314:	add	ip, pc, #0, 12
   11318:	add	ip, ip, #106496	; 0x1a000
   1131c:	ldr	pc, [ip, #3504]!	; 0xdb0

00011320 <putchar@plt>:
   11320:	add	ip, pc, #0, 12
   11324:	add	ip, ip, #106496	; 0x1a000
   11328:	ldr	pc, [ip, #3496]!	; 0xda8

0001132c <memchr@plt>:
   1132c:	add	ip, pc, #0, 12
   11330:	add	ip, ip, #106496	; 0x1a000
   11334:	ldr	pc, [ip, #3488]!	; 0xda0

00011338 <sendto@plt>:
   11338:	add	ip, pc, #0, 12
   1133c:	add	ip, ip, #106496	; 0x1a000
   11340:	ldr	pc, [ip, #3480]!	; 0xd98

00011344 <__overflow@plt>:
   11344:	add	ip, pc, #0, 12
   11348:	add	ip, ip, #106496	; 0x1a000
   1134c:	ldr	pc, [ip, #3472]!	; 0xd90

00011350 <setlocale@plt>:
   11350:	add	ip, pc, #0, 12
   11354:	add	ip, ip, #106496	; 0x1a000
   11358:	ldr	pc, [ip, #3464]!	; 0xd88

0001135c <getnameinfo@plt>:
   1135c:	add	ip, pc, #0, 12
   11360:	add	ip, ip, #106496	; 0x1a000
   11364:	ldr	pc, [ip, #3456]!	; 0xd80

00011368 <strrchr@plt>:
   11368:	add	ip, pc, #0, 12
   1136c:	add	ip, ip, #106496	; 0x1a000
   11370:	ldr	pc, [ip, #3448]!	; 0xd78

00011374 <vfprintf@plt>:
   11374:	add	ip, pc, #0, 12
   11378:	add	ip, ip, #106496	; 0x1a000
   1137c:	ldr	pc, [ip, #3440]!	; 0xd70

00011380 <fputc@plt>:
   11380:	add	ip, pc, #0, 12
   11384:	add	ip, ip, #106496	; 0x1a000
   11388:	ldr	pc, [ip, #3432]!	; 0xd68

0001138c <setuid@plt>:
   1138c:	add	ip, pc, #0, 12
   11390:	add	ip, ip, #106496	; 0x1a000
   11394:	ldr	pc, [ip, #3424]!	; 0xd60

00011398 <sscanf@plt>:
   11398:	add	ip, pc, #0, 12
   1139c:	add	ip, ip, #106496	; 0x1a000
   113a0:	ldr	pc, [ip, #3416]!	; 0xd58

000113a4 <putc@plt>:
   113a4:	add	ip, pc, #0, 12
   113a8:	add	ip, ip, #106496	; 0x1a000
   113ac:	ldr	pc, [ip, #3408]!	; 0xd50

000113b0 <flockfile@plt>:
   113b0:	add	ip, pc, #0, 12
   113b4:	add	ip, ip, #106496	; 0x1a000
   113b8:	ldr	pc, [ip, #3400]!	; 0xd48

000113bc <vsnprintf@plt>:
   113bc:	add	ip, pc, #0, 12
   113c0:	add	ip, ip, #106496	; 0x1a000
   113c4:	ldr	pc, [ip, #3392]!	; 0xd40

000113c8 <recvmsg@plt>:
   113c8:	add	ip, pc, #0, 12
   113cc:	add	ip, ip, #106496	; 0x1a000
   113d0:	ldr	pc, [ip, #3384]!	; 0xd38

000113d4 <qsort@plt>:
   113d4:	add	ip, pc, #0, 12
   113d8:	add	ip, ip, #106496	; 0x1a000
   113dc:	ldr	pc, [ip, #3376]!	; 0xd30

000113e0 <freeaddrinfo@plt>:
   113e0:	add	ip, pc, #0, 12
   113e4:	add	ip, ip, #106496	; 0x1a000
   113e8:	ldr	pc, [ip, #3368]!	; 0xd28

000113ec <getaddrinfo@plt>:
   113ec:	add	ip, pc, #0, 12
   113f0:	add	ip, ip, #106496	; 0x1a000
   113f4:	ldr	pc, [ip, #3360]!	; 0xd20

000113f8 <inet_ntop@plt>:
   113f8:	add	ip, pc, #0, 12
   113fc:	add	ip, ip, #106496	; 0x1a000
   11400:	ldr	pc, [ip, #3352]!	; 0xd18

00011404 <socket@plt>:
   11404:	add	ip, pc, #0, 12
   11408:	add	ip, ip, #106496	; 0x1a000
   1140c:	ldr	pc, [ip, #3344]!	; 0xd10

00011410 <strncmp@plt>:
   11410:	add	ip, pc, #0, 12
   11414:	add	ip, ip, #106496	; 0x1a000
   11418:	ldr	pc, [ip, #3336]!	; 0xd08

0001141c <abort@plt>:
   1141c:	add	ip, pc, #0, 12
   11420:	add	ip, ip, #106496	; 0x1a000
   11424:	ldr	pc, [ip, #3328]!	; 0xd00

00011428 <close@plt>:
   11428:	add	ip, pc, #0, 12
   1142c:	add	ip, ip, #106496	; 0x1a000
   11430:	ldr	pc, [ip, #3320]!	; 0xcf8

00011434 <__assert_fail@plt>:
   11434:	add	ip, pc, #0, 12
   11438:	add	ip, ip, #106496	; 0x1a000
   1143c:	ldr	pc, [ip, #3312]!	; 0xcf0

Disassembly of section .text:

00011440 <argp_failure@@Base-0x3c44>:
   11440:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11444:	mov	r4, r0
   11448:	sub	sp, sp, #60	; 0x3c
   1144c:	ldr	r0, [r1]
   11450:	mov	r9, r1
   11454:	bl	17b20 <argp_parse@@Base+0xfa0>
   11458:	ldr	r1, [pc, #808]	; 11788 <__assert_fail@plt+0x354>
   1145c:	mov	r0, #6
   11460:	bl	11350 <setlocale@plt>
   11464:	bl	11140 <getuid@plt>
   11468:	ldr	r6, [pc, #796]	; 1178c <__assert_fail@plt+0x358>
   1146c:	ldr	r8, [pc, #796]	; 11790 <__assert_fail@plt+0x35c>
   11470:	ldr	r2, [pc, #796]	; 11794 <__assert_fail@plt+0x360>
   11474:	add	r1, r8, #128	; 0x80
   11478:	mov	sl, #1
   1147c:	cmp	r0, #0
   11480:	moveq	r3, #1
   11484:	strbeq	r3, [r6, #8]
   11488:	ldr	r3, [pc, #776]	; 11798 <__assert_fail@plt+0x364>
   1148c:	ldr	r0, [pc, #776]	; 1179c <__assert_fail@plt+0x368>
   11490:	str	r2, [r3]
   11494:	bl	17944 <argp_parse@@Base+0xdc4>
   11498:	mov	r3, #0
   1149c:	add	r2, sp, #16
   114a0:	mov	r1, r4
   114a4:	stm	sp, {r2, r3}
   114a8:	add	r0, r8, #136	; 0x88
   114ac:	mov	r2, r9
   114b0:	bl	16b80 <argp_parse@@Base>
   114b4:	bl	1129c <getpid@plt>
   114b8:	mov	r2, #58	; 0x3a
   114bc:	mov	r1, #3
   114c0:	str	sl, [sp, #20]
   114c4:	str	r0, [sp, #12]
   114c8:	mov	r0, #10
   114cc:	bl	11404 <socket@plt>
   114d0:	subs	fp, r0, #0
   114d4:	blt	1169c <__assert_fail@plt+0x268>
   114d8:	mov	r2, #32
   114dc:	mov	r1, #255	; 0xff
   114e0:	add	r0, sp, #24
   114e4:	bl	11314 <memset@plt>
   114e8:	mov	r2, #32
   114ec:	mvn	r0, #2
   114f0:	str	r2, [sp]
   114f4:	mvn	ip, #30
   114f8:	str	r0, [sp, #40]	; 0x28
   114fc:	add	r3, sp, #24
   11500:	mov	r2, sl
   11504:	mov	r1, #58	; 0x3a
   11508:	mov	r0, fp
   1150c:	str	ip, [sp, #24]
   11510:	bl	1111c <setsockopt@plt>
   11514:	cmp	r0, #0
   11518:	bne	1174c <__assert_fail@plt+0x318>
   1151c:	mov	r3, #4
   11520:	str	r3, [sp]
   11524:	mov	r2, #51	; 0x33
   11528:	add	r3, sp, #20
   1152c:	mov	r1, #41	; 0x29
   11530:	mov	r0, fp
   11534:	bl	1111c <setsockopt@plt>
   11538:	subs	r5, r0, #0
   1153c:	bne	1174c <__assert_fail@plt+0x318>
   11540:	mov	r0, #124	; 0x7c
   11544:	bl	18584 <argp_parse@@Base+0x1a04>
   11548:	subs	r7, r0, #0
   1154c:	beq	1174c <__assert_fail@plt+0x318>
   11550:	mov	r2, #124	; 0x7c
   11554:	mov	r1, r5
   11558:	bl	11314 <memset@plt>
   1155c:	ldrh	r3, [sp, #12]
   11560:	mov	r2, #128	; 0x80
   11564:	mov	r0, #1000	; 0x3e8
   11568:	mov	r1, #8
   1156c:	str	r3, [r7, #60]	; 0x3c
   11570:	str	r0, [r7, #20]
   11574:	str	r1, [r7, #56]	; 0x38
   11578:	str	r2, [r7, #72]	; 0x48
   1157c:	mov	r1, r5
   11580:	str	fp, [r7]
   11584:	str	r5, [r7, #8]
   11588:	add	r0, r7, #12
   1158c:	bl	11218 <gettimeofday@plt>
   11590:	mov	r2, #4
   11594:	add	r3, r8, #164	; 0xa4
   11598:	mov	r1, sl
   1159c:	ldr	r0, [r7]
   115a0:	str	r2, [sp]
   115a4:	mov	r2, #6
   115a8:	str	r7, [r6, #36]	; 0x24
   115ac:	bl	1111c <setsockopt@plt>
   115b0:	bl	11140 <getuid@plt>
   115b4:	bl	1138c <setuid@plt>
   115b8:	cmp	r0, #0
   115bc:	bne	11734 <__assert_fail@plt+0x300>
   115c0:	ldr	r2, [pc, #472]	; 117a0 <__assert_fail@plt+0x36c>
   115c4:	mov	r3, #0
   115c8:	mov	r1, r3
   115cc:	ldr	r0, [r2]
   115d0:	mov	r2, #1
   115d4:	bl	11308 <setvbuf@plt>
   115d8:	ldr	r3, [sp, #16]
   115dc:	ldr	r1, [r6, #4]
   115e0:	sub	r4, r4, r3
   115e4:	cmp	r1, #0
   115e8:	add	r9, r9, r3, lsl #2
   115ec:	bne	11728 <__assert_fail@plt+0x2f4>
   115f0:	ldr	r3, [pc, #428]	; 117a4 <__assert_fail@plt+0x370>
   115f4:	ldr	r1, [r3]
   115f8:	cmp	r1, #0
   115fc:	bne	11714 <__assert_fail@plt+0x2e0>
   11600:	ldr	r7, [pc, #416]	; 117a8 <__assert_fail@plt+0x374>
   11604:	ldr	r3, [r7]
   11608:	tst	r3, #2
   1160c:	bne	11700 <__assert_fail@plt+0x2cc>
   11610:	ldr	r3, [r6, #32]
   11614:	cmp	r3, #0
   11618:	ble	11644 <__assert_fail@plt+0x210>
   1161c:	ldr	r2, [r6, #36]	; 0x24
   11620:	mov	r3, #4
   11624:	str	r3, [sp]
   11628:	mov	r1, #41	; 0x29
   1162c:	ldr	r0, [r2]
   11630:	ldr	r3, [pc, #372]	; 117ac <__assert_fail@plt+0x378>
   11634:	mov	r2, #16
   11638:	bl	1111c <setsockopt@plt>
   1163c:	cmp	r0, #0
   11640:	blt	11770 <__assert_fail@plt+0x33c>
   11644:	ldr	r3, [r7]
   11648:	tst	r3, #256	; 0x100
   1164c:	bne	116c0 <__assert_fail@plt+0x28c>
   11650:	ldr	r3, [pc, #344]	; 117b0 <__assert_fail@plt+0x37c>
   11654:	ldr	r1, [r8]
   11658:	ldr	r0, [r3]
   1165c:	bl	12cc4 <__assert_fail@plt+0x1890>
   11660:	cmp	r4, #0
   11664:	beq	11768 <__assert_fail@plt+0x334>
   11668:	mov	r7, #0
   1166c:	ldr	r0, [r9], #4
   11670:	bl	12208 <__assert_fail@plt+0xdd4>
   11674:	ldr	r3, [r6, #36]	; 0x24
   11678:	subs	r4, r4, #1
   1167c:	str	r7, [r3, #112]	; 0x70
   11680:	str	r7, [r3, #116]	; 0x74
   11684:	str	r7, [r3, #120]	; 0x78
   11688:	orr	r5, r5, r0
   1168c:	bne	1166c <__assert_fail@plt+0x238>
   11690:	mov	r0, r5
   11694:	add	sp, sp, #60	; 0x3c
   11698:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1169c:	bl	112e4 <__errno_location@plt>
   116a0:	ldr	r1, [r0]
   116a4:	cmp	r1, #13
   116a8:	cmpne	r1, sl
   116ac:	beq	11758 <__assert_fail@plt+0x324>
   116b0:	mov	r3, #0
   116b4:	mov	r0, #1
   116b8:	str	r3, [r6, #36]	; 0x24
   116bc:	bl	112a8 <exit@plt>
   116c0:	ldr	r2, [r6, #36]	; 0x24
   116c4:	mov	r3, #4
   116c8:	str	r3, [sp]
   116cc:	mov	r1, #41	; 0x29
   116d0:	ldr	r0, [r2]
   116d4:	ldr	r3, [pc, #216]	; 117b4 <__assert_fail@plt+0x380>
   116d8:	mov	r2, #67	; 0x43
   116dc:	bl	1111c <setsockopt@plt>
   116e0:	cmp	r0, #0
   116e4:	bge	11650 <__assert_fail@plt+0x21c>
   116e8:	bl	112e4 <__errno_location@plt>
   116ec:	ldr	r2, [pc, #196]	; 117b8 <__assert_fail@plt+0x384>
   116f0:	ldr	r1, [r0]
   116f4:	mov	r0, #1
   116f8:	bl	11224 <error@plt>
   116fc:	b	11650 <__assert_fail@plt+0x21c>
   11700:	ldr	r3, [pc, #180]	; 117bc <__assert_fail@plt+0x388>
   11704:	ldr	r0, [r6, #36]	; 0x24
   11708:	ldr	r1, [r3]
   1170c:	bl	13020 <__assert_fail@plt+0x1bec>
   11710:	b	11610 <__assert_fail@plt+0x1dc>
   11714:	mov	r3, #4
   11718:	ldr	r2, [pc, #160]	; 117c0 <__assert_fail@plt+0x38c>
   1171c:	ldr	r0, [r6, #36]	; 0x24
   11720:	bl	12ff0 <__assert_fail@plt+0x1bbc>
   11724:	b	11600 <__assert_fail@plt+0x1cc>
   11728:	ldr	r0, [r6, #36]	; 0x24
   1172c:	bl	12fe8 <__assert_fail@plt+0x1bb4>
   11730:	b	115f0 <__assert_fail@plt+0x1bc>
   11734:	bl	112e4 <__errno_location@plt>
   11738:	ldr	r2, [pc, #132]	; 117c4 <__assert_fail@plt+0x390>
   1173c:	ldr	r1, [r0]
   11740:	mov	r0, sl
   11744:	bl	11224 <error@plt>
   11748:	b	115c0 <__assert_fail@plt+0x18c>
   1174c:	mov	r0, fp
   11750:	bl	11428 <close@plt>
   11754:	b	116b0 <__assert_fail@plt+0x27c>
   11758:	mov	r0, sl
   1175c:	ldr	r2, [pc, #100]	; 117c8 <__assert_fail@plt+0x394>
   11760:	bl	11224 <error@plt>
   11764:	b	116b0 <__assert_fail@plt+0x27c>
   11768:	mov	r5, r4
   1176c:	b	11690 <__assert_fail@plt+0x25c>
   11770:	bl	112e4 <__errno_location@plt>
   11774:	ldr	r2, [pc, #80]	; 117cc <__assert_fail@plt+0x398>
   11778:	ldr	r1, [r0]
   1177c:	mov	r0, #0
   11780:	bl	11224 <error@plt>
   11784:	b	11644 <__assert_fail@plt+0x210>
   11788:			; <UNDEFINED> instruction: 0x0001b2b0
   1178c:	andeq	ip, r2, r4, ror #7
   11790:	andeq	ip, r2, ip, lsr r1
   11794:	andeq	sl, r1, r4, lsr #6
   11798:	andeq	ip, r2, r8, asr r4
   1179c:	andeq	sl, r1, ip, lsr r3
   117a0:	ldrdeq	ip, [r2], -ip	; <UNPREDICTABLE>
   117a4:	andeq	ip, r2, r0, asr r4
   117a8:	andeq	ip, r2, ip, asr #8
   117ac:	andeq	ip, r2, r4, lsl #8
   117b0:	andeq	ip, r2, r4, asr #8
   117b4:	andeq	ip, r2, r4, asr #2
   117b8:	andeq	sl, r1, r4, ror r3
   117bc:	andeq	ip, r2, r4, asr r4
   117c0:	andeq	ip, r2, r0, ror #3
   117c4:	andeq	sl, r1, r0, asr r3
   117c8:	andeq	sl, r1, r4, asr #6
   117cc:	andeq	sl, r1, r8, asr r3
   117d0:	mov	fp, #0
   117d4:	mov	lr, #0
   117d8:	pop	{r1}		; (ldr r1, [sp], #4)
   117dc:	mov	r2, sp
   117e0:	push	{r2}		; (str r2, [sp, #-4]!)
   117e4:	push	{r0}		; (str r0, [sp, #-4]!)
   117e8:	ldr	ip, [pc, #16]	; 11800 <__assert_fail@plt+0x3cc>
   117ec:	push	{ip}		; (str ip, [sp, #-4]!)
   117f0:	ldr	r0, [pc, #12]	; 11804 <__assert_fail@plt+0x3d0>
   117f4:	ldr	r3, [pc, #12]	; 11808 <__assert_fail@plt+0x3d4>
   117f8:	bl	11254 <__libc_start_main@plt>
   117fc:	bl	1141c <abort@plt>
   11800:	ldrdeq	r9, [r1], -r0
   11804:	andeq	r1, r1, r0, asr #8
   11808:	andeq	r9, r1, r0, ror lr
   1180c:	ldr	r3, [pc, #20]	; 11828 <__assert_fail@plt+0x3f4>
   11810:	ldr	r2, [pc, #20]	; 1182c <__assert_fail@plt+0x3f8>
   11814:	add	r3, pc, r3
   11818:	ldr	r2, [r3, r2]
   1181c:	cmp	r2, #0
   11820:	bxeq	lr
   11824:	b	11278 <__gmon_start__@plt>
   11828:	andeq	sl, r1, r4, ror #15
   1182c:	andeq	r0, r0, r0, lsr r1
   11830:	ldr	r3, [pc, #28]	; 11854 <__assert_fail@plt+0x420>
   11834:	ldr	r0, [pc, #28]	; 11858 <__assert_fail@plt+0x424>
   11838:	sub	r3, r3, r0
   1183c:	cmp	r3, #6
   11840:	bxls	lr
   11844:	ldr	r3, [pc, #16]	; 1185c <__assert_fail@plt+0x428>
   11848:	cmp	r3, #0
   1184c:	bxeq	lr
   11850:	bx	r3
   11854:	ldrdeq	ip, [r2], -r3
   11858:	ldrdeq	ip, [r2], -r0
   1185c:	andeq	r0, r0, r0
   11860:	ldr	r1, [pc, #36]	; 1188c <__assert_fail@plt+0x458>
   11864:	ldr	r0, [pc, #36]	; 11890 <__assert_fail@plt+0x45c>
   11868:	sub	r1, r1, r0
   1186c:	asr	r1, r1, #2
   11870:	add	r1, r1, r1, lsr #31
   11874:	asrs	r1, r1, #1
   11878:	bxeq	lr
   1187c:	ldr	r3, [pc, #16]	; 11894 <__assert_fail@plt+0x460>
   11880:	cmp	r3, #0
   11884:	bxeq	lr
   11888:	bx	r3
   1188c:	ldrdeq	ip, [r2], -r0
   11890:	ldrdeq	ip, [r2], -r0
   11894:	andeq	r0, r0, r0
   11898:	push	{r4, lr}
   1189c:	ldr	r4, [pc, #24]	; 118bc <__assert_fail@plt+0x488>
   118a0:	ldrb	r3, [r4]
   118a4:	cmp	r3, #0
   118a8:	popne	{r4, pc}
   118ac:	bl	11830 <__assert_fail@plt+0x3fc>
   118b0:	mov	r3, #1
   118b4:	strb	r3, [r4]
   118b8:	pop	{r4, pc}
   118bc:	andeq	ip, r2, r0, ror #7
   118c0:	ldr	r0, [pc, #40]	; 118f0 <__assert_fail@plt+0x4bc>
   118c4:	ldr	r3, [r0]
   118c8:	cmp	r3, #0
   118cc:	bne	118d4 <__assert_fail@plt+0x4a0>
   118d0:	b	11860 <__assert_fail@plt+0x42c>
   118d4:	ldr	r3, [pc, #24]	; 118f4 <__assert_fail@plt+0x4c0>
   118d8:	cmp	r3, #0
   118dc:	beq	118d0 <__assert_fail@plt+0x49c>
   118e0:	push	{r4, lr}
   118e4:	blx	r3
   118e8:	pop	{r4, lr}
   118ec:	b	11860 <__assert_fail@plt+0x42c>
   118f0:	andeq	fp, r2, r4, lsl pc
   118f4:	andeq	r0, r0, r0
   118f8:	ldr	r3, [pc, #8]	; 11908 <__assert_fail@plt+0x4d4>
   118fc:	mov	r2, #1
   11900:	str	r2, [r3]
   11904:	bx	lr
   11908:	andeq	ip, r2, r4, ror #7
   1190c:	cmp	r0, #112	; 0x70
   11910:	push	{r4, r5, lr}
   11914:	mov	r4, r1
   11918:	sub	sp, sp, #12
   1191c:	beq	11bcc <__assert_fail@plt+0x798>
   11920:	bgt	11950 <__assert_fail@plt+0x51c>
   11924:	cmp	r0, #102	; 0x66
   11928:	beq	11b94 <__assert_fail@plt+0x760>
   1192c:	bgt	11998 <__assert_fail@plt+0x564>
   11930:	cmp	r0, #99	; 0x63
   11934:	beq	11ab0 <__assert_fail@plt+0x67c>
   11938:	cmp	r0, #100	; 0x64
   1193c:	beq	11b34 <__assert_fail@plt+0x700>
   11940:	cmp	r0, #84	; 0x54
   11944:	beq	11af0 <__assert_fail@plt+0x6bc>
   11948:	mov	r3, #7
   1194c:	b	1198c <__assert_fail@plt+0x558>
   11950:	cmp	r0, #118	; 0x76
   11954:	beq	11b64 <__assert_fail@plt+0x730>
   11958:	bgt	11a08 <__assert_fail@plt+0x5d4>
   1195c:	cmp	r0, #114	; 0x72
   11960:	beq	11a98 <__assert_fail@plt+0x664>
   11964:	blt	11b7c <__assert_fail@plt+0x748>
   11968:	cmp	r0, #115	; 0x73
   1196c:	bne	11948 <__assert_fail@plt+0x514>
   11970:	mov	r0, r1
   11974:	mov	r2, #1
   11978:	ldr	r1, [pc, #680]	; 11c28 <__assert_fail@plt+0x7f4>
   1197c:	bl	12c18 <__assert_fail@plt+0x17e4>
   11980:	ldr	r2, [pc, #676]	; 11c2c <__assert_fail@plt+0x7f8>
   11984:	mov	r3, #0
   11988:	str	r0, [r2, #4]
   1198c:	mov	r0, r3
   11990:	add	sp, sp, #12
   11994:	pop	{r4, r5, pc}
   11998:	cmp	r0, #108	; 0x6c
   1199c:	beq	11a44 <__assert_fail@plt+0x610>
   119a0:	cmp	r0, #110	; 0x6e
   119a4:	beq	11b4c <__assert_fail@plt+0x718>
   119a8:	cmp	r0, #105	; 0x69
   119ac:	bne	11948 <__assert_fail@plt+0x514>
   119b0:	ldr	ip, [pc, #632]	; 11c30 <__assert_fail@plt+0x7fc>
   119b4:	mov	r2, #0
   119b8:	mov	r1, r2
   119bc:	ldr	r3, [ip]
   119c0:	mov	r0, r4
   119c4:	orr	r3, r3, #2
   119c8:	str	r3, [ip]
   119cc:	bl	12c18 <__assert_fail@plt+0x17e4>
   119d0:	ldr	r3, [pc, #604]	; 11c34 <__assert_fail@plt+0x800>
   119d4:	mov	r2, #1000	; 0x3e8
   119d8:	ldr	r1, [pc, #600]	; 11c38 <__assert_fail@plt+0x804>
   119dc:	ldrb	r3, [r3, #8]
   119e0:	eor	r3, r3, #1
   119e4:	mul	r0, r2, r0
   119e8:	cmp	r0, #199	; 0xc7
   119ec:	movhi	r3, #0
   119f0:	andls	r3, r3, #1
   119f4:	cmp	r3, #0
   119f8:	str	r0, [r1]
   119fc:	bne	11c10 <__assert_fail@plt+0x7dc>
   11a00:	mov	r3, #0
   11a04:	b	1198c <__assert_fail@plt+0x558>
   11a08:	cmp	r0, #256	; 0x100
   11a0c:	beq	11ad0 <__assert_fail@plt+0x69c>
   11a10:	ldr	r3, [pc, #548]	; 11c3c <__assert_fail@plt+0x808>
   11a14:	cmp	r0, r3
   11a18:	beq	11b20 <__assert_fail@plt+0x6ec>
   11a1c:	cmp	r0, #119	; 0x77
   11a20:	bne	11948 <__assert_fail@plt+0x514>
   11a24:	mov	r0, r1
   11a28:	mov	r2, #0
   11a2c:	mvn	r1, #-2147483648	; 0x80000000
   11a30:	bl	12c18 <__assert_fail@plt+0x17e4>
   11a34:	ldr	r2, [pc, #496]	; 11c2c <__assert_fail@plt+0x7f8>
   11a38:	mov	r3, #0
   11a3c:	str	r0, [r2, #12]
   11a40:	b	1198c <__assert_fail@plt+0x558>
   11a44:	ldr	r5, [pc, #488]	; 11c34 <__assert_fail@plt+0x800>
   11a48:	ldrb	r1, [r5, #8]
   11a4c:	cmp	r1, #0
   11a50:	beq	11c00 <__assert_fail@plt+0x7cc>
   11a54:	mov	r0, r4
   11a58:	mov	r2, #0
   11a5c:	add	r1, sp, #4
   11a60:	bl	112b4 <strtoul@plt>
   11a64:	ldr	r3, [sp, #4]
   11a68:	ldrb	r3, [r3]
   11a6c:	cmp	r3, #0
   11a70:	str	r0, [r5, #12]
   11a74:	bne	11a80 <__assert_fail@plt+0x64c>
   11a78:	cmp	r0, #0
   11a7c:	bge	11a00 <__assert_fail@plt+0x5cc>
   11a80:	ldr	r2, [pc, #440]	; 11c40 <__assert_fail@plt+0x80c>
   11a84:	mov	r1, #0
   11a88:	mov	r0, #1
   11a8c:	bl	11224 <error@plt>
   11a90:	mov	r3, #0
   11a94:	b	1198c <__assert_fail@plt+0x558>
   11a98:	ldr	r1, [pc, #420]	; 11c44 <__assert_fail@plt+0x810>
   11a9c:	mov	r3, #0
   11aa0:	ldr	r2, [r1]
   11aa4:	orr	r2, r2, #5
   11aa8:	str	r2, [r1]
   11aac:	b	1198c <__assert_fail@plt+0x558>
   11ab0:	mov	r2, #0
   11ab4:	mov	r0, r1
   11ab8:	mov	r1, r2
   11abc:	bl	12c18 <__assert_fail@plt+0x17e4>
   11ac0:	ldr	r2, [pc, #364]	; 11c34 <__assert_fail@plt+0x800>
   11ac4:	mov	r3, #0
   11ac8:	str	r0, [r2, #4]
   11acc:	b	1198c <__assert_fail@plt+0x558>
   11ad0:	mov	r0, r1
   11ad4:	mov	r2, #0
   11ad8:	mov	r1, #255	; 0xff
   11adc:	bl	12c18 <__assert_fail@plt+0x17e4>
   11ae0:	ldr	r2, [pc, #332]	; 11c34 <__assert_fail@plt+0x800>
   11ae4:	mov	r3, #0
   11ae8:	str	r0, [r2, #32]
   11aec:	b	1198c <__assert_fail@plt+0x558>
   11af0:	ldr	ip, [pc, #312]	; 11c30 <__assert_fail@plt+0x7fc>
   11af4:	mov	r2, #0
   11af8:	mov	r0, r1
   11afc:	ldr	r3, [ip]
   11b00:	mov	r1, r2
   11b04:	orr	r3, r3, #256	; 0x100
   11b08:	str	r3, [ip]
   11b0c:	bl	12c18 <__assert_fail@plt+0x17e4>
   11b10:	ldr	r2, [pc, #276]	; 11c2c <__assert_fail@plt+0x7f8>
   11b14:	mov	r3, #0
   11b18:	str	r0, [r2, #8]
   11b1c:	b	1198c <__assert_fail@plt+0x558>
   11b20:	mov	r0, r2
   11b24:	ldr	r1, [pc, #284]	; 11c48 <__assert_fail@plt+0x814>
   11b28:	bl	164dc <argp_error@@Base>
   11b2c:	mov	r3, #7
   11b30:	b	1198c <__assert_fail@plt+0x558>
   11b34:	ldr	r1, [pc, #264]	; 11c44 <__assert_fail@plt+0x810>
   11b38:	mov	r3, #0
   11b3c:	ldr	r2, [r1]
   11b40:	orr	r2, r2, #1
   11b44:	str	r2, [r1]
   11b48:	b	1198c <__assert_fail@plt+0x558>
   11b4c:	ldr	r1, [pc, #220]	; 11c30 <__assert_fail@plt+0x7fc>
   11b50:	mov	r3, #0
   11b54:	ldr	r2, [r1]
   11b58:	orr	r2, r2, #4
   11b5c:	str	r2, [r1]
   11b60:	b	1198c <__assert_fail@plt+0x558>
   11b64:	ldr	r1, [pc, #196]	; 11c30 <__assert_fail@plt+0x7fc>
   11b68:	mov	r3, #0
   11b6c:	ldr	r2, [r1]
   11b70:	orr	r2, r2, #32
   11b74:	str	r2, [r1]
   11b78:	b	1198c <__assert_fail@plt+0x558>
   11b7c:	ldr	r1, [pc, #172]	; 11c30 <__assert_fail@plt+0x7fc>
   11b80:	mov	r3, #0
   11b84:	ldr	r2, [r1]
   11b88:	orr	r2, r2, #8
   11b8c:	str	r2, [r1]
   11b90:	b	1198c <__assert_fail@plt+0x558>
   11b94:	ldr	r3, [pc, #152]	; 11c34 <__assert_fail@plt+0x800>
   11b98:	ldrb	r1, [r3, #8]
   11b9c:	cmp	r1, #0
   11ba0:	beq	11bf0 <__assert_fail@plt+0x7bc>
   11ba4:	ldr	r2, [pc, #132]	; 11c30 <__assert_fail@plt+0x7fc>
   11ba8:	ldr	r0, [pc, #156]	; 11c4c <__assert_fail@plt+0x818>
   11bac:	mov	r1, #0
   11bb0:	ldr	r3, [r2]
   11bb4:	ldr	r0, [r0]
   11bb8:	orr	r3, r3, #1
   11bbc:	str	r3, [r2]
   11bc0:	bl	110f8 <setbuf@plt>
   11bc4:	mov	r3, #0
   11bc8:	b	1198c <__assert_fail@plt+0x558>
   11bcc:	ldr	r5, [pc, #124]	; 11c50 <__assert_fail@plt+0x81c>
   11bd0:	mov	r0, r1
   11bd4:	mov	r2, r5
   11bd8:	ldr	r1, [pc, #76]	; 11c2c <__assert_fail@plt+0x7f8>
   11bdc:	bl	12d68 <__assert_fail@plt+0x1934>
   11be0:	ldr	r2, [pc, #108]	; 11c54 <__assert_fail@plt+0x820>
   11be4:	mov	r3, #0
   11be8:	str	r5, [r2]
   11bec:	b	1198c <__assert_fail@plt+0x558>
   11bf0:	ldr	r2, [pc, #96]	; 11c58 <__assert_fail@plt+0x824>
   11bf4:	mov	r0, #1
   11bf8:	bl	11224 <error@plt>
   11bfc:	b	11ba4 <__assert_fail@plt+0x770>
   11c00:	ldr	r2, [pc, #84]	; 11c5c <__assert_fail@plt+0x828>
   11c04:	mov	r0, #1
   11c08:	bl	11224 <error@plt>
   11c0c:	b	11a54 <__assert_fail@plt+0x620>
   11c10:	mov	r3, r4
   11c14:	ldr	r2, [pc, #68]	; 11c60 <__assert_fail@plt+0x82c>
   11c18:	mov	r1, #0
   11c1c:	mov	r0, #1
   11c20:	bl	11224 <error@plt>
   11c24:	b	11a00 <__assert_fail@plt+0x5cc>
   11c28:	strdeq	pc, [r0], -r7
   11c2c:	andeq	ip, r2, ip, lsr r1
   11c30:	andeq	ip, r2, ip, asr #8
   11c34:	andeq	ip, r2, r4, ror #7
   11c38:	andeq	ip, r2, r4, asr r4
   11c3c:	tsteq	r0, r2
   11c40:			; <UNDEFINED> instruction: 0x00019fbc
   11c44:	andeq	ip, r2, r0, asr r4
   11c48:	ldrdeq	r9, [r1], -r4
   11c4c:	ldrdeq	ip, [r2], -ip	; <UNPREDICTABLE>
   11c50:	strdeq	ip, [r2], -r4
   11c54:	andeq	ip, r2, r4, asr #8
   11c58:	andeq	r9, r1, r0, ror #30
   11c5c:	muleq	r1, ip, pc	; <UNPREDICTABLE>
   11c60:	andeq	r9, r1, r0, lsl #31
   11c64:	ldr	r1, [r0, #4]
   11c68:	ldr	r0, [pc]	; 11c70 <__assert_fail@plt+0x83c>
   11c6c:	b	11128 <printf@plt>
   11c70:	andeq	r9, r1, ip, ror #31
   11c74:	push	{r4, r6, r7, r8, r9, lr}
   11c78:	vpush	{d8}
   11c7c:	ldr	r3, [pc, #324]	; 11dc8 <__assert_fail@plt+0x994>
   11c80:	ldr	r4, [pc, #324]	; 11dcc <__assert_fail@plt+0x998>
   11c84:	sub	sp, sp, #24
   11c88:	ldr	r0, [r3]
   11c8c:	bl	11134 <fflush@plt>
   11c90:	ldr	r3, [r4, #36]	; 0x24
   11c94:	ldr	r0, [pc, #308]	; 11dd0 <__assert_fail@plt+0x99c>
   11c98:	ldr	r1, [r3, #52]	; 0x34
   11c9c:	bl	11128 <printf@plt>
   11ca0:	ldr	r3, [r4, #36]	; 0x24
   11ca4:	ldr	r0, [pc, #296]	; 11dd4 <__assert_fail@plt+0x9a0>
   11ca8:	ldr	r1, [r3, #112]	; 0x70
   11cac:	bl	11128 <printf@plt>
   11cb0:	ldr	r3, [r4, #36]	; 0x24
   11cb4:	ldr	r0, [pc, #284]	; 11dd8 <__assert_fail@plt+0x9a4>
   11cb8:	ldr	r1, [r3, #116]	; 0x74
   11cbc:	bl	11128 <printf@plt>
   11cc0:	ldr	r3, [r4, #36]	; 0x24
   11cc4:	ldr	r1, [r3, #120]	; 0x78
   11cc8:	cmp	r1, #0
   11ccc:	bne	11dac <__assert_fail@plt+0x978>
   11cd0:	ldr	r1, [r3, #112]	; 0x70
   11cd4:	cmp	r1, #0
   11cd8:	beq	11d04 <__assert_fail@plt+0x8d0>
   11cdc:	ldr	r0, [r3, #116]	; 0x74
   11ce0:	cmp	r1, r0
   11ce4:	bcc	11d40 <__assert_fail@plt+0x90c>
   11ce8:	sub	r0, r1, r0
   11cec:	mov	r3, #100	; 0x64
   11cf0:	mul	r0, r3, r0
   11cf4:	bl	19a14 <argp_parse@@Base+0x2e94>
   11cf8:	mov	r1, r0
   11cfc:	ldr	r0, [pc, #216]	; 11ddc <__assert_fail@plt+0x9a8>
   11d00:	bl	11128 <printf@plt>
   11d04:	mov	r0, #10
   11d08:	bl	11320 <putchar@plt>
   11d0c:	ldr	r3, [r4, #36]	; 0x24
   11d10:	ldr	r0, [r3, #116]	; 0x74
   11d14:	cmp	r0, #0
   11d18:	beq	11d2c <__assert_fail@plt+0x8f8>
   11d1c:	ldr	r2, [pc, #188]	; 11de0 <__assert_fail@plt+0x9ac>
   11d20:	ldr	r2, [r2, #4]
   11d24:	cmp	r2, #7
   11d28:	bhi	11d4c <__assert_fail@plt+0x918>
   11d2c:	clz	r0, r0
   11d30:	lsr	r0, r0, #5
   11d34:	add	sp, sp, #24
   11d38:	vpop	{d8}
   11d3c:	pop	{r4, r6, r7, r8, r9, pc}
   11d40:	ldr	r0, [pc, #156]	; 11de4 <__assert_fail@plt+0x9b0>
   11d44:	bl	11128 <printf@plt>
   11d48:	b	11d04 <__assert_fail@plt+0x8d0>
   11d4c:	ldr	r2, [r3, #120]	; 0x78
   11d50:	ldr	r3, [r3, #68]	; 0x44
   11d54:	add	r0, r0, r2
   11d58:	vldr	d1, [pc, #96]	; 11dc0 <__assert_fail@plt+0x98c>
   11d5c:	vmov	s15, r0
   11d60:	vldr	d5, [r3, #16]
   11d64:	vldr	d6, [r3, #24]
   11d68:	ldrd	r6, [r3]
   11d6c:	vcvt.f64.u32	d7, s15
   11d70:	ldrd	r8, [r3, #8]
   11d74:	vdiv.f64	d8, d5, d7
   11d78:	vdiv.f64	d0, d6, d7
   11d7c:	vmls.f64	d0, d8, d8
   11d80:	bl	12e68 <__assert_fail@plt+0x1a34>
   11d84:	mov	r3, r7
   11d88:	vstr	d8, [sp]
   11d8c:	strd	r8, [sp, #8]
   11d90:	mov	r2, r6
   11d94:	ldr	r0, [pc, #76]	; 11de8 <__assert_fail@plt+0x9b4>
   11d98:	vstr	d0, [sp, #16]
   11d9c:	bl	11128 <printf@plt>
   11da0:	ldr	r3, [r4, #36]	; 0x24
   11da4:	ldr	r0, [r3, #116]	; 0x74
   11da8:	b	11d2c <__assert_fail@plt+0x8f8>
   11dac:	ldr	r0, [pc, #56]	; 11dec <__assert_fail@plt+0x9b8>
   11db0:	bl	11128 <printf@plt>
   11db4:	ldr	r3, [r4, #36]	; 0x24
   11db8:	b	11cd0 <__assert_fail@plt+0x89c>
   11dbc:	nop			; (mov r0, r0)
   11dc0:	rscsle	sl, r1, #252, 18	; 0x3f0000
   11dc4:	svccc	0x0040624d
   11dc8:	ldrdeq	ip, [r2], -ip	; <UNPREDICTABLE>
   11dcc:	andeq	ip, r2, r4, ror #7
   11dd0:	andeq	sl, r1, r4
   11dd4:	andeq	sl, r1, r0, lsr #32
   11dd8:	andeq	sl, r1, ip, lsr r0
   11ddc:	andeq	sl, r1, ip, lsl #1
   11de0:	andeq	ip, r2, ip, lsr r1
   11de4:	andeq	sl, r1, r8, rrx
   11de8:	andeq	sl, r1, r0, lsr #1
   11dec:	andeq	sl, r1, r4, asr r0
   11df0:	push	{r4, lr}
   11df4:	mov	r4, r0
   11df8:	ldr	r0, [pc, #84]	; 11e54 <__assert_fail@plt+0xa20>
   11dfc:	bl	11128 <printf@plt>
   11e00:	ldr	r3, [pc, #80]	; 11e58 <__assert_fail@plt+0xa24>
   11e04:	ldrb	r1, [r4, #1]
   11e08:	ldr	r2, [r3, #16]
   11e0c:	cmp	r2, r1
   11e10:	beq	11e4c <__assert_fail@plt+0xa18>
   11e14:	ldr	r2, [r3, #24]
   11e18:	cmp	r1, r2
   11e1c:	beq	11e3c <__assert_fail@plt+0xa08>
   11e20:	ldr	r2, [r3, #32]
   11e24:	cmp	r2, r1
   11e28:	addeq	r3, r3, #32
   11e2c:	beq	11e40 <__assert_fail@plt+0xa0c>
   11e30:	ldr	r0, [pc, #36]	; 11e5c <__assert_fail@plt+0xa28>
   11e34:	pop	{r4, lr}
   11e38:	b	11128 <printf@plt>
   11e3c:	add	r3, r3, #24
   11e40:	ldr	r0, [r3, #4]
   11e44:	pop	{r4, lr}
   11e48:	b	1123c <puts@plt>
   11e4c:	add	r3, r3, #16
   11e50:	b	11e40 <__assert_fail@plt+0xa0c>
   11e54:	ldrdeq	sl, [r1], -r8
   11e58:	andeq	ip, r2, ip, lsr r1
   11e5c:	andeq	sl, r1, ip, ror #1
   11e60:	push	{r4, lr}
   11e64:	mov	r4, r0
   11e68:	ldr	r0, [pc, #68]	; 11eb4 <__assert_fail@plt+0xa80>
   11e6c:	bl	11128 <printf@plt>
   11e70:	ldr	r3, [pc, #64]	; 11eb8 <__assert_fail@plt+0xa84>
   11e74:	ldrb	r1, [r4, #1]
   11e78:	ldr	r2, [r3, #40]	; 0x28
   11e7c:	cmp	r2, r1
   11e80:	beq	11e9c <__assert_fail@plt+0xa68>
   11e84:	ldr	r2, [r3, #48]	; 0x30
   11e88:	cmp	r1, r2
   11e8c:	beq	11eac <__assert_fail@plt+0xa78>
   11e90:	ldr	r0, [pc, #36]	; 11ebc <__assert_fail@plt+0xa88>
   11e94:	pop	{r4, lr}
   11e98:	b	11128 <printf@plt>
   11e9c:	add	r3, r3, #40	; 0x28
   11ea0:	ldr	r0, [r3, #4]
   11ea4:	pop	{r4, lr}
   11ea8:	b	1123c <puts@plt>
   11eac:	add	r3, r3, #48	; 0x30
   11eb0:	b	11ea0 <__assert_fail@plt+0xa6c>
   11eb4:	andeq	sl, r1, r0, lsl #2
   11eb8:	andeq	ip, r2, ip, lsr r1
   11ebc:	andeq	sl, r1, ip, ror #1
   11ec0:	push	{r4, lr}
   11ec4:	mov	r4, r0
   11ec8:	ldr	r0, [pc, #60]	; 11f0c <__assert_fail@plt+0xad8>
   11ecc:	bl	11128 <printf@plt>
   11ed0:	ldr	r3, [pc, #56]	; 11f10 <__assert_fail@plt+0xadc>
   11ed4:	ldrb	r1, [r4, #1]
   11ed8:	add	r0, r3, #40	; 0x28
   11edc:	ldr	r2, [r3]
   11ee0:	cmp	r2, r1
   11ee4:	beq	11f00 <__assert_fail@plt+0xacc>
   11ee8:	add	r3, r3, #8
   11eec:	cmp	r3, r0
   11ef0:	bne	11edc <__assert_fail@plt+0xaa8>
   11ef4:	ldr	r0, [pc, #24]	; 11f14 <__assert_fail@plt+0xae0>
   11ef8:	pop	{r4, lr}
   11efc:	b	11128 <printf@plt>
   11f00:	ldr	r0, [r3, #4]
   11f04:	pop	{r4, lr}
   11f08:	b	1123c <puts@plt>
   11f0c:	andeq	sl, r1, r0, lsl r1
   11f10:	andeq	ip, r2, r4, ror r1
   11f14:	andeq	sl, r1, ip, ror #1
   11f18:	push	{r4, r5, r6, lr}
   11f1c:	mov	r4, r0
   11f20:	ldr	r5, [pc, #344]	; 12080 <__assert_fail@plt+0xc4c>
   11f24:	sub	sp, sp, #16
   11f28:	ldr	r3, [r5, #4]
   11f2c:	cmp	r3, #7
   11f30:	movls	r2, #0
   11f34:	bhi	1202c <__assert_fail@plt+0xbf8>
   11f38:	ldr	r3, [pc, #324]	; 12084 <__assert_fail@plt+0xc50>
   11f3c:	ldr	r1, [r3]
   11f40:	cmp	r1, #0
   11f44:	beq	11f64 <__assert_fail@plt+0xb30>
   11f48:	ldr	r3, [r5, #4]
   11f4c:	mov	r0, #1
   11f50:	cmp	r2, r3
   11f54:	str	r0, [sp]
   11f58:	subcc	r3, r3, r2
   11f5c:	mov	r0, r4
   11f60:	bl	12f88 <__assert_fail@plt+0x1b54>
   11f64:	mov	r1, #1
   11f68:	mov	r0, r4
   11f6c:	bl	12f10 <__assert_fail@plt+0x1adc>
   11f70:	subs	r6, r0, #0
   11f74:	bne	1205c <__assert_fail@plt+0xc28>
   11f78:	ldr	r1, [r4, #72]	; 0x48
   11f7c:	ldr	r0, [r4, #112]	; 0x70
   11f80:	ldr	r5, [r4, #56]	; 0x38
   11f84:	lsl	r1, r1, #3
   11f88:	bl	19c00 <argp_parse@@Base+0x3080>
   11f8c:	ldr	r2, [r4, #76]	; 0x4c
   11f90:	mov	lr, #1
   11f94:	mvn	r0, #127	; 0x7f
   11f98:	add	r5, r5, #8
   11f9c:	ldrb	r3, [r2, r1, asr #3]
   11fa0:	and	ip, r1, #7
   11fa4:	bic	r3, r3, lr, lsl ip
   11fa8:	strb	r3, [r2, r1, asr #3]
   11fac:	ldr	r3, [r4, #80]	; 0x50
   11fb0:	mov	ip, r4
   11fb4:	mov	lr, #28
   11fb8:	strb	r6, [r3, #1]
   11fbc:	strb	r0, [r3]
   11fc0:	ldr	r2, [r4, #60]	; 0x3c
   11fc4:	mov	r1, r3
   11fc8:	rev16	r2, r2
   11fcc:	strh	r2, [r3, #4]
   11fd0:	ldr	r2, [r4, #112]	; 0x70
   11fd4:	strh	r6, [r3, #2]
   11fd8:	rev16	r2, r2
   11fdc:	strh	r2, [r3, #6]
   11fe0:	ldr	r0, [ip], #24
   11fe4:	mov	r3, r6
   11fe8:	mov	r2, r5
   11fec:	stm	sp, {ip, lr}
   11ff0:	bl	11338 <sendto@plt>
   11ff4:	subs	r3, r0, #0
   11ff8:	blt	1205c <__assert_fail@plt+0xc28>
   11ffc:	ldr	r2, [r4, #112]	; 0x70
   12000:	cmp	r5, r3
   12004:	add	r2, r2, #1
   12008:	str	r2, [r4, #112]	; 0x70
   1200c:	beq	12020 <__assert_fail@plt+0xbec>
   12010:	mov	r2, r5
   12014:	ldr	r1, [r4, #52]	; 0x34
   12018:	ldr	r0, [pc, #104]	; 12088 <__assert_fail@plt+0xc54>
   1201c:	bl	11128 <printf@plt>
   12020:	mov	r0, r6
   12024:	add	sp, sp, #16
   12028:	pop	{r4, r5, r6, pc}
   1202c:	mov	r1, #0
   12030:	add	r0, sp, #8
   12034:	bl	11218 <gettimeofday@plt>
   12038:	mov	r3, #1
   1203c:	str	r3, [sp]
   12040:	mov	r2, #0
   12044:	add	r1, sp, #8
   12048:	mov	r3, #8
   1204c:	mov	r0, r4
   12050:	bl	12f88 <__assert_fail@plt+0x1b54>
   12054:	mov	r2, #8
   12058:	b	11f38 <__assert_fail@plt+0xb04>
   1205c:	bl	112e4 <__errno_location@plt>
   12060:	ldr	r2, [pc, #36]	; 1208c <__assert_fail@plt+0xc58>
   12064:	mvn	r6, #0
   12068:	ldr	r1, [r0]
   1206c:	mov	r0, #1
   12070:	bl	11224 <error@plt>
   12074:	mov	r0, r6
   12078:	add	sp, sp, #16
   1207c:	pop	{r4, r5, r6, pc}
   12080:	andeq	ip, r2, ip, lsr r1
   12084:	andeq	ip, r2, r8, asr #8
   12088:	andeq	sl, r1, ip, lsr #2
   1208c:	andeq	sl, r1, r0, asr r1
   12090:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12094:	sub	sp, sp, #124	; 0x7c
   12098:	mov	r6, r0
   1209c:	add	fp, sp, #72	; 0x48
   120a0:	add	r1, r0, #32
   120a4:	mov	r2, fp
   120a8:	mov	r3, #46	; 0x2e
   120ac:	mov	r0, #10
   120b0:	add	r5, r6, #8
   120b4:	add	sl, sp, #24
   120b8:	bl	113f8 <inet_ntop@plt>
   120bc:	add	r1, r5, #8
   120c0:	mov	r2, sl
   120c4:	mov	r3, #46	; 0x2e
   120c8:	mov	r0, #10
   120cc:	bl	113f8 <inet_ntop@plt>
   120d0:	ldr	r0, [pc, #268]	; 121e4 <__assert_fail@plt+0xdb0>
   120d4:	bl	11128 <printf@plt>
   120d8:	ldr	r2, [pc, #264]	; 121e8 <__assert_fail@plt+0xdb4>
   120dc:	ldrb	r1, [r6, #8]
   120e0:	mov	r9, r2
   120e4:	mov	r4, #0
   120e8:	ldr	r7, [pc, #252]	; 121ec <__assert_fail@plt+0xdb8>
   120ec:	ldr	r8, [pc, #252]	; 121f0 <__assert_fail@plt+0xdbc>
   120f0:	b	12104 <__assert_fail@plt+0xcd0>
   120f4:	ldrb	r1, [r5, #1]!
   120f8:	tst	r4, #1
   120fc:	movne	r2, r8
   12100:	moveq	r2, r9
   12104:	add	r4, r4, #1
   12108:	mov	r0, r7
   1210c:	bl	11128 <printf@plt>
   12110:	cmp	r4, #8
   12114:	bne	120f4 <__assert_fail@plt+0xcc0>
   12118:	ldr	r0, [pc, #212]	; 121f4 <__assert_fail@plt+0xdc0>
   1211c:	bl	1123c <puts@plt>
   12120:	ldr	r0, [pc, #208]	; 121f8 <__assert_fail@plt+0xdc4>
   12124:	bl	1123c <puts@plt>
   12128:	ldrh	r0, [r6, #12]
   1212c:	ldr	r1, [r6, #8]
   12130:	ldrb	lr, [r6, #15]
   12134:	ldrb	ip, [r6, #14]
   12138:	rev	r1, r1
   1213c:	rev16	r0, r0
   12140:	lsr	r2, r1, #20
   12144:	uxth	r0, r0
   12148:	bic	r3, r1, #-16777216	; 0xff000000
   1214c:	bic	r3, r3, #15728640	; 0xf00000
   12150:	stm	sp, {r0, ip, lr}
   12154:	uxtb	r2, r2
   12158:	str	fp, [sp, #16]
   1215c:	str	sl, [sp, #12]
   12160:	lsr	r1, r1, #28
   12164:	ldr	r0, [pc, #144]	; 121fc <__assert_fail@plt+0xdc8>
   12168:	bl	11128 <printf@plt>
   1216c:	ldrb	r3, [r6, #14]
   12170:	cmp	r3, #58	; 0x3a
   12174:	beq	12188 <__assert_fail@plt+0xd54>
   12178:	mov	r0, #10
   1217c:	bl	11320 <putchar@plt>
   12180:	add	sp, sp, #124	; 0x7c
   12184:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12188:	ldrh	r3, [r6, #12]
   1218c:	ldrb	r2, [r6, #49]	; 0x31
   12190:	ldrb	r1, [r6, #48]	; 0x30
   12194:	rev16	r3, r3
   12198:	ldr	r0, [pc, #96]	; 12200 <__assert_fail@plt+0xdcc>
   1219c:	uxth	r3, r3
   121a0:	bl	11128 <printf@plt>
   121a4:	ldrb	r3, [r6, #48]	; 0x30
   121a8:	sub	r3, r3, #128	; 0x80
   121ac:	cmp	r3, #1
   121b0:	bhi	12178 <__assert_fail@plt+0xd44>
   121b4:	ldrh	r1, [r6, #52]	; 0x34
   121b8:	ldrh	r2, [r6, #54]	; 0x36
   121bc:	ldr	r0, [pc, #64]	; 12204 <__assert_fail@plt+0xdd0>
   121c0:	rev16	r1, r1
   121c4:	rev16	r2, r2
   121c8:	uxth	r1, r1
   121cc:	uxth	r2, r2
   121d0:	bl	11128 <printf@plt>
   121d4:	mov	r0, #10
   121d8:	bl	11320 <putchar@plt>
   121dc:	add	sp, sp, #124	; 0x7c
   121e0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   121e4:	andeq	sl, r1, r0, ror #2
   121e8:			; <UNDEFINED> instruction: 0x0001b2b0
   121ec:	andeq	sl, r1, r4, ror r1
   121f0:	andeq	sl, r1, r0, ror r1
   121f4:	andeq	sl, r1, ip, ror r1
   121f8:	andeq	sl, r1, r8, lsl #3
   121fc:	andeq	sl, r1, ip, lsr #3
   12200:	ldrdeq	sl, [r1], -r4
   12204:	strdeq	sl, [r1], -ip
   12208:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1220c:	vpush	{d8-d10}
   12210:	ldr	sl, [pc, #1008]	; 12608 <__assert_fail@plt+0x11d4>
   12214:	mov	r6, r0
   12218:	ldr	r3, [sl]
   1221c:	sub	sp, sp, #1840	; 0x730
   12220:	and	r3, r3, #3
   12224:	cmp	r3, #3
   12228:	sub	sp, sp, #4
   1222c:	beq	12be4 <__assert_fail@plt+0x17b0>
   12230:	add	r5, sp, #144	; 0x90
   12234:	mov	r2, #32
   12238:	mov	r1, #0
   1223c:	ldr	r9, [pc, #968]	; 1260c <__assert_fail@plt+0x11d8>
   12240:	mov	r0, r5
   12244:	bl	11314 <memset@plt>
   12248:	ldr	r3, [pc, #988]	; 1262c <__assert_fail@plt+0x11f8>
   1224c:	vldr	d7, [pc, #924]	; 125f0 <__assert_fail@plt+0x11bc>
   12250:	ldr	r4, [r9, #36]	; 0x24
   12254:	ldr	r3, [r3, #4]
   12258:	mov	r2, #32
   1225c:	str	r3, [r4, #56]	; 0x38
   12260:	mov	r1, #0
   12264:	str	r5, [r4, #68]	; 0x44
   12268:	add	r0, sp, #816	; 0x330
   1226c:	vstr	d7, [r5]
   12270:	bl	11314 <memset@plt>
   12274:	mov	r0, #10
   12278:	mov	ip, #194	; 0xc2
   1227c:	str	r0, [sp, #820]	; 0x334
   12280:	add	r2, sp, #816	; 0x330
   12284:	add	r3, sp, #560	; 0x230
   12288:	mov	r1, #0
   1228c:	mov	r0, r6
   12290:	str	ip, [sp, #816]	; 0x330
   12294:	bl	113ec <getaddrinfo@plt>
   12298:	cmp	r0, #0
   1229c:	bne	12acc <__assert_fail@plt+0x1698>
   122a0:	ldr	r5, [sp, #560]	; 0x230
   122a4:	add	r0, r4, #24
   122a8:	ldr	r2, [r5, #16]
   122ac:	ldr	r1, [r5, #20]
   122b0:	bl	11188 <memcpy@plt>
   122b4:	ldr	r0, [r5, #24]
   122b8:	cmp	r0, #0
   122bc:	moveq	r0, r6
   122c0:	bl	111dc <strdup@plt>
   122c4:	str	r0, [r4, #52]	; 0x34
   122c8:	mov	r0, r5
   122cc:	bl	113e0 <freeaddrinfo@plt>
   122d0:	ldr	r3, [r4, #52]	; 0x34
   122d4:	cmp	r3, #0
   122d8:	beq	12ad4 <__assert_fail@plt+0x16a0>
   122dc:	ldr	r0, [r9, #36]	; 0x24
   122e0:	mov	r3, #0
   122e4:	mov	r1, #1
   122e8:	str	r1, [sp, #8]
   122ec:	str	r3, [sp, #4]
   122f0:	str	r3, [sp]
   122f4:	add	r0, r0, #24
   122f8:	mov	r3, #256	; 0x100
   122fc:	add	r2, sp, #304	; 0x130
   12300:	mov	r1, #28
   12304:	bl	1135c <getnameinfo@plt>
   12308:	subs	r3, r0, #0
   1230c:	beq	12330 <__assert_fail@plt+0xefc>
   12310:	cmn	r3, #11
   12314:	beq	12aec <__assert_fail@plt+0x16b8>
   12318:	bl	11170 <gai_strerror@plt>
   1231c:	mov	r3, r0
   12320:	ldr	r2, [pc, #744]	; 12610 <__assert_fail@plt+0x11dc>
   12324:	mov	r1, #0
   12328:	mov	r0, #1
   1232c:	bl	11224 <error@plt>
   12330:	ldr	r1, [r9, #36]	; 0x24
   12334:	ldr	r3, [pc, #752]	; 1262c <__assert_fail@plt+0x11f8>
   12338:	add	r2, sp, #304	; 0x130
   1233c:	ldr	r1, [r1, #52]	; 0x34
   12340:	ldr	r3, [r3, #4]
   12344:	ldr	r0, [pc, #712]	; 12614 <__assert_fail@plt+0x11e0>
   12348:	bl	11128 <printf@plt>
   1234c:	ldr	r3, [sl]
   12350:	tst	r3, #32
   12354:	beq	1236c <__assert_fail@plt+0xf38>
   12358:	ldr	r3, [r9, #36]	; 0x24
   1235c:	ldr	r0, [pc, #692]	; 12618 <__assert_fail@plt+0x11e4>
   12360:	ldr	r2, [r3, #60]	; 0x3c
   12364:	mov	r1, r2
   12368:	bl	11128 <printf@plt>
   1236c:	mov	r0, #10
   12370:	bl	11320 <putchar@plt>
   12374:	ldr	r5, [r9, #36]	; 0x24
   12378:	ldr	r1, [pc, #668]	; 1261c <__assert_fail@plt+0x11e8>
   1237c:	mov	r0, #2
   12380:	bl	11194 <signal@plt>
   12384:	ldr	r2, [r9, #12]
   12388:	mov	r4, #0
   1238c:	ldr	r3, [r5]
   12390:	add	r8, sp, #68	; 0x44
   12394:	add	r7, sp, #96	; 0x60
   12398:	cmp	r2, r4
   1239c:	str	r4, [r8, #4]
   123a0:	str	r4, [sp, #92]	; 0x5c
   123a4:	add	fp, r3, #1
   123a8:	str	r4, [sp, #68]	; 0x44
   123ac:	str	r4, [sp, #84]	; 0x54
   123b0:	str	r4, [sp, #88]	; 0x58
   123b4:	str	r4, [r7], #-4
   123b8:	beq	123d4 <__assert_fail@plt+0xfa0>
   123bc:	mov	r0, r5
   123c0:	bl	11f18 <__assert_fail@plt+0xae4>
   123c4:	ldr	r3, [r9, #12]
   123c8:	add	r4, r4, #1
   123cc:	cmp	r4, r3
   123d0:	bcc	123bc <__assert_fail@plt+0xf88>
   123d4:	ldr	r3, [sl]
   123d8:	tst	r3, #1
   123dc:	beq	12aa0 <__assert_fail@plt+0x166c>
   123e0:	ldr	r3, [pc, #568]	; 12620 <__assert_fail@plt+0x11ec>
   123e4:	str	r3, [sp, #88]	; 0x58
   123e8:	add	r3, sp, #76	; 0x4c
   123ec:	mov	r0, r3
   123f0:	mov	r1, #0
   123f4:	str	r3, [sp, #20]
   123f8:	bl	11218 <gettimeofday@plt>
   123fc:	mov	r3, #0
   12400:	mov	r4, r3
   12404:	mov	r0, r5
   12408:	vldr	d10, [pc, #488]	; 125f8 <__assert_fail@plt+0x11c4>
   1240c:	vldr	d9, [pc, #492]	; 12600 <__assert_fail@plt+0x11cc>
   12410:	str	r3, [sp, #32]
   12414:	bl	11f18 <__assert_fail@plt+0xae4>
   12418:	str	r4, [sp, #28]
   1241c:	str	r4, [sp, #40]	; 0x28
   12420:	ldr	r4, [pc, #508]	; 12624 <__assert_fail@plt+0x11f0>
   12424:	ldr	r2, [r9]
   12428:	cmp	r2, #0
   1242c:	bne	1256c <__assert_fail@plt+0x1138>
   12430:	add	r3, sp, #172	; 0xac
   12434:	add	r1, sp, #300	; 0x12c
   12438:	str	r2, [r3, #4]!
   1243c:	cmp	r3, r1
   12440:	bne	12438 <__assert_fail@plt+0x1004>
   12444:	ldr	r3, [r5]
   12448:	add	ip, sp, #1840	; 0x730
   1244c:	cmp	r3, #0
   12450:	add	r2, r3, #31
   12454:	movge	r2, r3
   12458:	asr	r1, r3, #31
   1245c:	asr	r2, r2, #5
   12460:	lsr	r1, r1, #27
   12464:	add	r2, ip, r2, lsl #2
   12468:	add	r3, r3, r1
   1246c:	and	r3, r3, #31
   12470:	ldr	ip, [r2, #-1664]	; 0xfffff980
   12474:	mov	r0, #1
   12478:	sub	r3, r3, r1
   1247c:	mov	r1, #0
   12480:	orr	r3, ip, r0, lsl r3
   12484:	mov	r0, r7
   12488:	str	r3, [r2, #-1664]	; 0xfffff980
   1248c:	bl	11218 <gettimeofday@plt>
   12490:	ldr	r1, [sp, #88]	; 0x58
   12494:	ldr	r3, [sp, #80]	; 0x50
   12498:	ldr	ip, [sp, #96]	; 0x60
   1249c:	ldr	r2, [sp, #76]	; 0x4c
   124a0:	ldr	r0, [sp, #84]	; 0x54
   124a4:	add	r3, r3, r1
   124a8:	ldr	r1, [sp, #92]	; 0x5c
   124ac:	sub	r3, r3, ip
   124b0:	add	r2, r2, r0
   124b4:	sub	r2, r2, r1
   124b8:	cmp	r3, #0
   124bc:	str	r3, [sp, #72]	; 0x48
   124c0:	str	r2, [sp, #68]	; 0x44
   124c4:	bge	127d0 <__assert_fail@plt+0x139c>
   124c8:	sub	r1, r2, #1
   124cc:	add	r3, r3, #999424	; 0xf4000
   124d0:	adds	r3, r3, #576	; 0x240
   124d4:	mov	r2, r1
   124d8:	sub	r1, r1, #1
   124dc:	bmi	124cc <__assert_fail@plt+0x1098>
   124e0:	str	r3, [sp, #72]	; 0x48
   124e4:	str	r2, [sp, #68]	; 0x44
   124e8:	cmp	r2, #0
   124ec:	movlt	r3, #0
   124f0:	strlt	r3, [sp, #72]	; 0x48
   124f4:	strlt	r3, [sp, #68]	; 0x44
   124f8:	mov	r3, #0
   124fc:	mov	r2, r3
   12500:	str	r8, [sp]
   12504:	add	r1, sp, #176	; 0xb0
   12508:	mov	r0, fp
   1250c:	bl	111b8 <select@plt>
   12510:	subs	r3, r0, #0
   12514:	blt	125d0 <__assert_fail@plt+0x119c>
   12518:	cmp	r3, #1
   1251c:	beq	1266c <__assert_fail@plt+0x1238>
   12520:	ldr	r3, [r5, #8]
   12524:	cmp	r3, #0
   12528:	beq	1259c <__assert_fail@plt+0x1168>
   1252c:	ldr	r2, [r5, #112]	; 0x70
   12530:	cmp	r3, r2
   12534:	bhi	1259c <__assert_fail@plt+0x1168>
   12538:	ldr	r3, [sp, #28]
   1253c:	cmp	r3, #0
   12540:	bne	1256c <__assert_fail@plt+0x1138>
   12544:	mov	r3, #1
   12548:	str	r3, [sp, #28]
   1254c:	mov	r3, #10
   12550:	str	r3, [sp, #84]	; 0x54
   12554:	mov	r1, #0
   12558:	ldr	r0, [sp, #20]
   1255c:	bl	11218 <gettimeofday@plt>
   12560:	ldr	r2, [r9]
   12564:	cmp	r2, #0
   12568:	beq	12430 <__assert_fail@plt+0xffc>
   1256c:	mov	r0, r5
   12570:	bl	13028 <__assert_fail@plt+0x1bf4>
   12574:	bl	11c74 <__assert_fail@plt+0x840>
   12578:	ldr	r3, [r9, #36]	; 0x24
   1257c:	mov	r4, r0
   12580:	ldr	r0, [r3, #52]	; 0x34
   12584:	bl	17a18 <argp_parse@@Base+0xe98>
   12588:	mov	r0, r4
   1258c:	add	sp, sp, #1840	; 0x730
   12590:	add	sp, sp, #4
   12594:	vpop	{d8-d10}
   12598:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1259c:	mov	r0, r5
   125a0:	bl	11f18 <__assert_fail@plt+0xae4>
   125a4:	ldr	r3, [sl]
   125a8:	and	r3, r3, #9
   125ac:	cmp	r3, #1
   125b0:	beq	127f8 <__assert_fail@plt+0x13c4>
   125b4:	ldr	r3, [pc, #112]	; 1262c <__assert_fail@plt+0x11f8>
   125b8:	add	r0, r5, #12
   125bc:	ldr	r1, [r3, #12]
   125c0:	bl	13064 <__assert_fail@plt+0x1c30>
   125c4:	cmp	r0, #0
   125c8:	beq	12554 <__assert_fail@plt+0x1120>
   125cc:	b	1256c <__assert_fail@plt+0x1138>
   125d0:	bl	112e4 <__errno_location@plt>
   125d4:	ldr	r1, [r0]
   125d8:	cmp	r1, #4
   125dc:	beq	12424 <__assert_fail@plt+0xff0>
   125e0:	ldr	r2, [pc, #64]	; 12628 <__assert_fail@plt+0x11f4>
   125e4:	mov	r0, #1
   125e8:	bl	11224 <error@plt>
   125ec:	b	12424 <__assert_fail@plt+0xff0>
   125f0:			; <UNDEFINED> instruction: 0xff800000
   125f4:	bicmi	ip, sp, r4, ror #26
	...
   12604:	addmi	r4, pc, r0
   12608:	andeq	ip, r2, ip, asr #8
   1260c:	andeq	ip, r2, r4, ror #7
   12610:	andeq	sl, r1, r4, lsr r2
   12614:	andeq	sl, r1, r4, asr #4
   12618:	andeq	sl, r1, r4, ror #4
   1261c:	strdeq	r1, [r1], -r8
   12620:	andeq	r2, r0, r0, lsl r7
   12624:	andeq	r4, pc, pc, lsr r2	; <UNPREDICTABLE>
   12628:	andeq	sl, r1, r8, ror r2
   1262c:	andeq	ip, r2, ip, lsr r1
   12630:	ldrdeq	ip, [r2], -r8
   12634:	andeq	sl, r1, r8, lsl #5
   12638:	andeq	sl, r1, r0, lsr #5
   1263c:	andeq	sl, r1, r8, lsr #5
   12640:	andeq	sl, r1, r8, asr #5
   12644:	andeq	sl, r1, r8, ror #5
   12648:	muleq	r2, ip, r1
   1264c:			; <UNDEFINED> instruction: 0x0002c1bc
   12650:	strdeq	sl, [r1], -ip
   12654:	ldrdne	r4, [r2], #-211	; 0xffffff2d	; <UNPREDICTABLE>
   12658:	andeq	sl, r1, r4, lsl r3
   1265c:	ldrdeq	ip, [r2], -ip	; <UNPREDICTABLE>
   12660:	andeq	sl, r1, r4, lsl r2
   12664:	andeq	sl, r1, r0, ror #5
   12668:	ldrdeq	sl, [r1], -r0
   1266c:	ldr	r0, [r5, #56]	; 0x38
   12670:	ldr	ip, [r5, #80]	; 0x50
   12674:	add	r0, r0, #8
   12678:	mov	r6, #0
   1267c:	str	r3, [sp, #128]	; 0x80
   12680:	str	r3, [sp, #24]
   12684:	str	r0, [sp, #104]	; 0x68
   12688:	add	r3, sp, #816	; 0x330
   1268c:	mov	r0, #28
   12690:	add	lr, sp, #100	; 0x64
   12694:	str	r3, [sp, #132]	; 0x84
   12698:	str	ip, [sp, #100]	; 0x64
   1269c:	add	r3, r5, #84	; 0x54
   126a0:	mov	ip, #1024	; 0x400
   126a4:	str	r0, [sp, #120]	; 0x78
   126a8:	add	r1, sp, #116	; 0x74
   126ac:	ldr	r0, [r5]
   126b0:	mov	r2, r6
   126b4:	str	r3, [sp, #44]	; 0x2c
   126b8:	str	r3, [sp, #116]	; 0x74
   126bc:	str	lr, [sp, #124]	; 0x7c
   126c0:	str	r6, [sp, #140]	; 0x8c
   126c4:	str	ip, [sp, #136]	; 0x88
   126c8:	bl	113c8 <recvmsg@plt>
   126cc:	subs	r3, r0, #0
   126d0:	str	r3, [sp, #36]	; 0x24
   126d4:	blt	12774 <__assert_fail@plt+0x1340>
   126d8:	ldr	r2, [sp, #136]	; 0x88
   126dc:	ldr	r0, [sp, #132]	; 0x84
   126e0:	cmp	r2, #11
   126e4:	movhi	r6, r0
   126e8:	ldr	r3, [sp, #24]
   126ec:	add	r0, r0, r2
   126f0:	b	1270c <__assert_fail@plt+0x12d8>
   126f4:	ldr	r2, [r6]
   126f8:	add	r2, r2, #3
   126fc:	bic	r2, r2, #3
   12700:	add	r2, r6, r2
   12704:	cmp	r0, r2
   12708:	bcc	12744 <__assert_fail@plt+0x1310>
   1270c:	cmp	r6, #0
   12710:	beq	12744 <__assert_fail@plt+0x1310>
   12714:	ldr	r2, [r6, #4]
   12718:	cmp	r2, #41	; 0x29
   1271c:	beq	127bc <__assert_fail@plt+0x1388>
   12720:	ldr	r1, [r6]
   12724:	add	r2, r1, #3
   12728:	bic	r2, r2, #3
   1272c:	add	r6, r6, r2
   12730:	cmp	r1, #11
   12734:	add	r2, r6, #12
   12738:	bls	12744 <__assert_fail@plt+0x1310>
   1273c:	cmp	r0, r2
   12740:	bcs	126f4 <__assert_fail@plt+0x12c0>
   12744:	mvn	r6, #0
   12748:	ldr	r2, [r5, #80]	; 0x50
   1274c:	str	r2, [sp, #24]
   12750:	ldrb	r2, [r2]
   12754:	cmp	r2, #129	; 0x81
   12758:	beq	1280c <__assert_fail@plt+0x13d8>
   1275c:	ldr	r2, [sp, #24]
   12760:	ldr	r3, [r9, #36]	; 0x24
   12764:	ldr	r1, [r2, #32]
   12768:	ldr	r2, [r3, #32]
   1276c:	cmp	r1, r2
   12770:	beq	129c0 <__assert_fail@plt+0x158c>
   12774:	ldr	r3, [sp, #40]	; 0x28
   12778:	cmp	r3, #0
   1277c:	beq	129ac <__assert_fail@plt+0x1578>
   12780:	ldr	r3, [pc, #-348]	; 1262c <__assert_fail@plt+0x11f8>
   12784:	add	r0, r5, #12
   12788:	ldr	r1, [r3, #12]
   1278c:	bl	13064 <__assert_fail@plt+0x1c30>
   12790:	cmp	r0, #0
   12794:	bne	1256c <__assert_fail@plt+0x1138>
   12798:	ldr	r3, [r5, #8]
   1279c:	ldr	r1, [sp, #32]
   127a0:	adds	r2, r3, #0
   127a4:	movne	r2, #1
   127a8:	cmp	r3, r1
   127ac:	movhi	r2, #0
   127b0:	cmp	r2, #0
   127b4:	beq	12424 <__assert_fail@plt+0xff0>
   127b8:	b	1256c <__assert_fail@plt+0x1138>
   127bc:	ldr	r2, [r6, #8]
   127c0:	cmp	r2, #52	; 0x34
   127c4:	bne	12720 <__assert_fail@plt+0x12ec>
   127c8:	ldr	r6, [r6, #12]
   127cc:	b	12748 <__assert_fail@plt+0x1314>
   127d0:	cmp	r3, r4
   127d4:	ble	124e8 <__assert_fail@plt+0x10b4>
   127d8:	add	r1, r2, #1
   127dc:	sub	r3, r3, #999424	; 0xf4000
   127e0:	sub	r3, r3, #576	; 0x240
   127e4:	cmp	r3, r4
   127e8:	mov	r2, r1
   127ec:	add	r1, r1, #1
   127f0:	bgt	127dc <__assert_fail@plt+0x13a8>
   127f4:	b	124e0 <__assert_fail@plt+0x10ac>
   127f8:	ldr	r3, [pc, #-420]	; 1265c <__assert_fail@plt+0x1228>
   127fc:	mov	r0, #46	; 0x2e
   12800:	ldr	r1, [r3]
   12804:	bl	113a4 <putc@plt>
   12808:	b	125b4 <__assert_fail@plt+0x1180>
   1280c:	str	r3, [sp, #48]	; 0x30
   12810:	ldr	r3, [sp, #24]
   12814:	ldr	r1, [r5, #60]	; 0x3c
   12818:	ldrh	r2, [r3, #4]
   1281c:	rev16	r2, r2
   12820:	uxth	r2, r2
   12824:	cmp	r2, r1
   12828:	bne	12774 <__assert_fail@plt+0x1340>
   1282c:	ldrh	r0, [r3, #6]
   12830:	ldr	r1, [r5, #72]	; 0x48
   12834:	rev16	r0, r0
   12838:	lsl	r1, r1, #3
   1283c:	uxth	r0, r0
   12840:	bl	19e40 <argp_parse@@Base+0x32c0>
   12844:	ldr	r0, [r5, #76]	; 0x4c
   12848:	ldrb	r2, [r0, r1, asr #3]
   1284c:	and	ip, r1, #7
   12850:	asr	lr, r2, ip
   12854:	ands	r3, lr, #1
   12858:	moveq	lr, #1
   1285c:	ldrne	r2, [r5, #120]	; 0x78
   12860:	orreq	r2, r2, lr, lsl ip
   12864:	strbeq	r2, [r0, r1, asr #3]
   12868:	ldreq	r2, [r5, #116]	; 0x74
   1286c:	str	r3, [sp, #52]	; 0x34
   12870:	ldr	r3, [sp, #48]	; 0x30
   12874:	addne	r2, r2, #1
   12878:	addeq	r2, r2, lr
   1287c:	strne	r2, [r5, #120]	; 0x78
   12880:	streq	r2, [r5, #116]	; 0x74
   12884:	str	r3, [sp, #60]	; 0x3c
   12888:	ldr	r2, [r5, #68]	; 0x44
   1288c:	add	r3, sp, #108	; 0x6c
   12890:	mov	r0, r3
   12894:	mov	r1, #0
   12898:	str	r3, [sp, #48]	; 0x30
   1289c:	str	r2, [sp, #56]	; 0x38
   128a0:	bl	11218 <gettimeofday@plt>
   128a4:	ldr	r3, [sp, #36]	; 0x24
   128a8:	ldr	r2, [sp, #56]	; 0x38
   128ac:	sub	r1, r3, #8
   128b0:	cmp	r1, #7
   128b4:	movls	r2, #0
   128b8:	ldr	r3, [sp, #60]	; 0x3c
   128bc:	vmovls.f64	d8, d10
   128c0:	strls	r2, [sp, #48]	; 0x30
   128c4:	bhi	12afc <__assert_fail@plt+0x16c8>
   128c8:	ldr	r2, [sl]
   128cc:	tst	r2, #8
   128d0:	bne	12994 <__assert_fail@plt+0x1560>
   128d4:	ands	r1, r2, #1
   128d8:	bne	12b94 <__assert_fail@plt+0x1760>
   128dc:	tst	r2, #4
   128e0:	moveq	r3, #32
   128e4:	str	r1, [sp]
   128e8:	stmib	sp, {r1, r3}
   128ec:	ldr	r0, [sp, #44]	; 0x2c
   128f0:	mov	r3, #256	; 0x100
   128f4:	add	r2, sp, #560	; 0x230
   128f8:	mov	r1, #28
   128fc:	bl	1135c <getnameinfo@plt>
   12900:	subs	r3, r0, #0
   12904:	beq	12938 <__assert_fail@plt+0x1504>
   12908:	cmn	r3, #11
   1290c:	beq	12b84 <__assert_fail@plt+0x1750>
   12910:	bl	11170 <gai_strerror@plt>
   12914:	ldr	r3, [pc, #-748]	; 12630 <__assert_fail@plt+0x11fc>
   12918:	mov	r2, r0
   1291c:	ldr	r1, [pc, #-752]	; 12634 <__assert_fail@plt+0x1200>
   12920:	ldr	r0, [r3]
   12924:	bl	112d8 <fprintf@plt>
   12928:	ldr	r3, [pc, #-760]	; 12638 <__assert_fail@plt+0x1204>
   1292c:	ldm	r3, {r0, r1}
   12930:	add	r3, sp, #560	; 0x230
   12934:	stm	r3, {r0, r1}
   12938:	ldr	r3, [sp, #24]
   1293c:	ldr	r1, [sp, #36]	; 0x24
   12940:	add	r2, sp, #560	; 0x230
   12944:	ldrh	r3, [r3, #6]
   12948:	ldr	r0, [pc, #-788]	; 1263c <__assert_fail@plt+0x1208>
   1294c:	rev16	r3, r3
   12950:	uxth	r3, r3
   12954:	bl	11128 <printf@plt>
   12958:	cmp	r6, #0
   1295c:	blt	1296c <__assert_fail@plt+0x1538>
   12960:	mov	r1, r6
   12964:	ldr	r0, [pc, #-812]	; 12640 <__assert_fail@plt+0x120c>
   12968:	bl	11128 <printf@plt>
   1296c:	ldr	r3, [sp, #48]	; 0x30
   12970:	cmp	r3, #0
   12974:	bne	12c04 <__assert_fail@plt+0x17d0>
   12978:	ldr	r3, [sp, #52]	; 0x34
   1297c:	cmp	r3, #0
   12980:	bne	12bf8 <__assert_fail@plt+0x17c4>
   12984:	ldr	r3, [pc, #-816]	; 1265c <__assert_fail@plt+0x1228>
   12988:	mov	r0, #10
   1298c:	ldr	r1, [r3]
   12990:	bl	113a4 <putc@plt>
   12994:	ldr	r3, [sp, #32]
   12998:	add	r3, r3, #1
   1299c:	str	r3, [sp, #32]
   129a0:	ldr	r3, [sp, #40]	; 0x28
   129a4:	cmp	r3, #0
   129a8:	bne	12780 <__assert_fail@plt+0x134c>
   129ac:	mov	r1, r3
   129b0:	mov	r0, r7
   129b4:	bl	11218 <gettimeofday@plt>
   129b8:	str	r7, [sp, #40]	; 0x28
   129bc:	b	12780 <__assert_fail@plt+0x134c>
   129c0:	ldr	r2, [sp, #24]
   129c4:	ldr	r1, [r2, #36]	; 0x24
   129c8:	ldr	r2, [r3, #36]	; 0x24
   129cc:	cmp	r1, r2
   129d0:	bne	12774 <__assert_fail@plt+0x1340>
   129d4:	ldr	r2, [sp, #24]
   129d8:	ldr	r1, [r2, #40]	; 0x28
   129dc:	ldr	r2, [r3, #40]	; 0x28
   129e0:	cmp	r1, r2
   129e4:	bne	12774 <__assert_fail@plt+0x1340>
   129e8:	ldr	r2, [sp, #24]
   129ec:	ldr	r3, [r3, #44]	; 0x2c
   129f0:	ldr	r2, [r2, #44]	; 0x2c
   129f4:	cmp	r2, r3
   129f8:	bne	12774 <__assert_fail@plt+0x1340>
   129fc:	ldr	r3, [sp, #24]
   12a00:	ldrb	r3, [r3, #14]
   12a04:	cmp	r3, #58	; 0x3a
   12a08:	bne	12774 <__assert_fail@plt+0x1340>
   12a0c:	ldr	r3, [sp, #24]
   12a10:	ldrb	r3, [r3, #48]	; 0x30
   12a14:	cmp	r3, #128	; 0x80
   12a18:	bne	12774 <__assert_fail@plt+0x1340>
   12a1c:	ldr	r2, [sp, #24]
   12a20:	ldr	r3, [r5, #60]	; 0x3c
   12a24:	ldrh	r2, [r2, #52]	; 0x34
   12a28:	rev16	r3, r3
   12a2c:	uxth	r3, r3
   12a30:	cmp	r2, r3
   12a34:	bne	12774 <__assert_fail@plt+0x1340>
   12a38:	mov	r1, #28
   12a3c:	ldr	r0, [sp, #44]	; 0x2c
   12a40:	bl	130c0 <__assert_fail@plt+0x1c8c>
   12a44:	ldr	r1, [sp, #36]	; 0x24
   12a48:	mov	r2, r0
   12a4c:	mov	r6, r0
   12a50:	ldr	r0, [pc, #-1044]	; 12644 <__assert_fail@plt+0x1210>
   12a54:	bl	11128 <printf@plt>
   12a58:	mov	r0, r6
   12a5c:	bl	17a18 <argp_parse@@Base+0xe98>
   12a60:	ldr	r3, [sp, #24]
   12a64:	ldrb	r1, [r3]
   12a68:	ldr	r3, [pc, #-1064]	; 12648 <__assert_fail@plt+0x1214>
   12a6c:	ldr	r2, [r3]
   12a70:	cmp	r2, r1
   12a74:	beq	12bb4 <__assert_fail@plt+0x1780>
   12a78:	ldr	r2, [pc, #-1076]	; 1264c <__assert_fail@plt+0x1218>
   12a7c:	add	r3, r3, #8
   12a80:	cmp	r3, r2
   12a84:	bne	12a6c <__assert_fail@plt+0x1638>
   12a88:	ldr	r0, [pc, #-1088]	; 12650 <__assert_fail@plt+0x121c>
   12a8c:	bl	11128 <printf@plt>
   12a90:	ldr	r3, [sp, #32]
   12a94:	add	r3, r3, #1
   12a98:	str	r3, [sp, #32]
   12a9c:	b	129a0 <__assert_fail@plt+0x156c>
   12aa0:	ldr	r1, [r5, #20]
   12aa4:	ldr	r3, [pc, #-1112]	; 12654 <__assert_fail@plt+0x1220>
   12aa8:	mov	r2, #1000	; 0x3e8
   12aac:	umull	r0, r3, r3, r1
   12ab0:	lsr	r3, r3, #6
   12ab4:	str	r3, [sp, #84]	; 0x54
   12ab8:	mul	r3, r2, r3
   12abc:	sub	r3, r1, r3
   12ac0:	mul	r2, r2, r3
   12ac4:	str	r2, [sp, #88]	; 0x58
   12ac8:	b	123e8 <__assert_fail@plt+0xfb4>
   12acc:	mov	r0, #0
   12ad0:	bl	17a18 <argp_parse@@Base+0xe98>
   12ad4:	mov	r3, r6
   12ad8:	ldr	r2, [pc, #-1160]	; 12658 <__assert_fail@plt+0x1224>
   12adc:	mov	r1, #0
   12ae0:	mov	r0, #1
   12ae4:	bl	11224 <error@plt>
   12ae8:	b	122dc <__assert_fail@plt+0xea8>
   12aec:	bl	112e4 <__errno_location@plt>
   12af0:	ldr	r0, [r0]
   12af4:	bl	11260 <strerror@plt>
   12af8:	b	1231c <__assert_fail@plt+0xee8>
   12afc:	ldr	r1, [sp, #24]
   12b00:	add	ip, sp, #560	; 0x230
   12b04:	str	r2, [sp, #60]	; 0x3c
   12b08:	ldr	r0, [r1, #8]!
   12b0c:	str	r3, [sp, #56]	; 0x38
   12b10:	ldr	r1, [r1, #4]
   12b14:	stmia	ip!, {r0, r1}
   12b18:	ldr	r0, [sp, #48]	; 0x30
   12b1c:	add	r1, sp, #560	; 0x230
   12b20:	bl	12e20 <__assert_fail@plt+0x19ec>
   12b24:	vldr	s15, [sp, #112]	; 0x70
   12b28:	ldr	r2, [sp, #60]	; 0x3c
   12b2c:	ldr	r3, [sp, #56]	; 0x38
   12b30:	vcvt.f64.s32	d3, s15
   12b34:	vldr	s15, [sp, #108]	; 0x6c
   12b38:	vldr	d5, [r2]
   12b3c:	vldr	d6, [r2, #24]
   12b40:	str	r3, [sp, #48]	; 0x30
   12b44:	vcvt.f64.s32	d4, s15
   12b48:	vldr	d7, [r2, #16]
   12b4c:	vdiv.f64	d8, d3, d9
   12b50:	vmla.f64	d8, d4, d9
   12b54:	vadd.f64	d7, d7, d8
   12b58:	vcmpe.f64	d8, d5
   12b5c:	vmla.f64	d6, d8, d8
   12b60:	vmrs	APSR_nzcv, fpscr
   12b64:	vstr	d7, [r2, #16]
   12b68:	vldr	d7, [r2, #8]
   12b6c:	vstrmi	d8, [r2]
   12b70:	vstr	d6, [r2, #24]
   12b74:	vcmpe.f64	d8, d7
   12b78:	vmrs	APSR_nzcv, fpscr
   12b7c:	vstrgt	d8, [r2, #8]
   12b80:	b	128c8 <__assert_fail@plt+0x1494>
   12b84:	bl	112e4 <__errno_location@plt>
   12b88:	ldr	r0, [r0]
   12b8c:	bl	11260 <strerror@plt>
   12b90:	b	12914 <__assert_fail@plt+0x14e0>
   12b94:	ldr	r3, [pc, #-1344]	; 1265c <__assert_fail@plt+0x1228>
   12b98:	mov	r0, #8
   12b9c:	ldr	r1, [r3]
   12ba0:	bl	113a4 <putc@plt>
   12ba4:	ldr	r3, [sp, #32]
   12ba8:	add	r3, r3, #1
   12bac:	str	r3, [sp, #32]
   12bb0:	b	129a0 <__assert_fail@plt+0x156c>
   12bb4:	ldr	r3, [r3, #4]
   12bb8:	ldr	r0, [sp, #24]
   12bbc:	blx	r3
   12bc0:	ldr	r3, [sl]
   12bc4:	tst	r3, #32
   12bc8:	beq	12994 <__assert_fail@plt+0x1560>
   12bcc:	ldr	r0, [sp, #24]
   12bd0:	bl	12090 <__assert_fail@plt+0xc5c>
   12bd4:	ldr	r3, [sp, #32]
   12bd8:	add	r3, r3, #1
   12bdc:	str	r3, [sp, #32]
   12be0:	b	129a0 <__assert_fail@plt+0x156c>
   12be4:	ldr	r2, [pc, #-1420]	; 12660 <__assert_fail@plt+0x122c>
   12be8:	mov	r1, #0
   12bec:	mov	r0, #1
   12bf0:	bl	11224 <error@plt>
   12bf4:	b	12230 <__assert_fail@plt+0xdfc>
   12bf8:	ldr	r0, [pc, #-1436]	; 12664 <__assert_fail@plt+0x1230>
   12bfc:	bl	11128 <printf@plt>
   12c00:	b	12984 <__assert_fail@plt+0x1550>
   12c04:	vmov	r2, r3, d8
   12c08:	ldr	r0, [pc, #-1448]	; 12668 <__assert_fail@plt+0x1234>
   12c0c:	bl	11128 <printf@plt>
   12c10:	b	12978 <__assert_fail@plt+0x1544>
   12c14:	andeq	r0, r0, r0
   12c18:	push	{r4, r5, r6, r7, lr}
   12c1c:	sub	sp, sp, #20
   12c20:	mov	r5, r1
   12c24:	mov	r6, r2
   12c28:	add	r1, sp, #12
   12c2c:	mov	r2, #0
   12c30:	mov	r7, r0
   12c34:	bl	112b4 <strtoul@plt>
   12c38:	ldr	r3, [sp, #12]
   12c3c:	ldrb	r2, [r3]
   12c40:	cmp	r2, #0
   12c44:	mov	r4, r0
   12c48:	bne	12c9c <__assert_fail@plt+0x1868>
   12c4c:	cmp	r4, #0
   12c50:	cmpeq	r6, #0
   12c54:	beq	12c84 <__assert_fail@plt+0x1850>
   12c58:	cmp	r5, #0
   12c5c:	cmpne	r4, r5
   12c60:	bls	12c78 <__assert_fail@plt+0x1844>
   12c64:	mov	r3, r7
   12c68:	ldr	r2, [pc, #72]	; 12cb8 <__assert_fail@plt+0x1884>
   12c6c:	mov	r1, #0
   12c70:	mov	r0, #1
   12c74:	bl	11224 <error@plt>
   12c78:	mov	r0, r4
   12c7c:	add	sp, sp, #20
   12c80:	pop	{r4, r5, r6, r7, pc}
   12c84:	mov	r3, r7
   12c88:	ldr	r2, [pc, #44]	; 12cbc <__assert_fail@plt+0x1888>
   12c8c:	mov	r1, #0
   12c90:	mov	r0, #1
   12c94:	bl	11224 <error@plt>
   12c98:	b	12c58 <__assert_fail@plt+0x1824>
   12c9c:	str	r3, [sp]
   12ca0:	ldr	r2, [pc, #24]	; 12cc0 <__assert_fail@plt+0x188c>
   12ca4:	mov	r3, r7
   12ca8:	mov	r1, #0
   12cac:	mov	r0, #1
   12cb0:	bl	11224 <error@plt>
   12cb4:	b	12c4c <__assert_fail@plt+0x1818>
   12cb8:	muleq	r1, r8, r7
   12cbc:	andeq	r9, r1, r0, lsl #31
   12cc0:	andeq	sl, r1, r8, ror r7
   12cc4:	push	{r4, r5, r6, lr}
   12cc8:	ldr	r6, [pc, #144]	; 12d60 <__assert_fail@plt+0x192c>
   12ccc:	ldr	r3, [r6]
   12cd0:	cmp	r3, #0
   12cd4:	popeq	{r4, r5, r6, pc}
   12cd8:	mov	r4, r0
   12cdc:	mov	r0, r3
   12ce0:	mov	r5, r1
   12ce4:	bl	17fc8 <argp_parse@@Base+0x1448>
   12ce8:	ldr	r3, [pc, #116]	; 12d64 <__assert_fail@plt+0x1930>
   12cec:	cmp	r4, #0
   12cf0:	str	r0, [r3]
   12cf4:	beq	12d34 <__assert_fail@plt+0x1900>
   12cf8:	ldr	ip, [r6]
   12cfc:	add	ip, r0, ip
   12d00:	cmp	r0, ip
   12d04:	popcs	{r4, r5, r6, pc}
   12d08:	sub	r2, r0, #1
   12d0c:	sub	ip, ip, #1
   12d10:	mov	r3, #0
   12d14:	ldrb	r0, [r4, r3]
   12d18:	add	r3, r3, #1
   12d1c:	cmp	r3, r5
   12d20:	movcs	r3, #0
   12d24:	strb	r0, [r2, #1]!
   12d28:	cmp	r2, ip
   12d2c:	bne	12d14 <__assert_fail@plt+0x18e0>
   12d30:	pop	{r4, r5, r6, pc}
   12d34:	ldr	r2, [r6]
   12d38:	cmp	r2, #0
   12d3c:	popeq	{r4, r5, r6, pc}
   12d40:	mov	r2, r0
   12d44:	strb	r4, [r2, r4]
   12d48:	ldr	r2, [r6]
   12d4c:	add	r4, r4, #1
   12d50:	cmp	r2, r4
   12d54:	popls	{r4, r5, r6, pc}
   12d58:	ldr	r2, [r3]
   12d5c:	b	12d44 <__assert_fail@plt+0x1910>
   12d60:	andeq	ip, r2, r0, asr #2
   12d64:	andeq	ip, r2, r8, asr #8
   12d68:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12d6c:	mov	r7, r1
   12d70:	ldrb	r5, [r0]
   12d74:	sub	sp, sp, #12
   12d78:	cmp	r5, #0
   12d7c:	beq	12e04 <__assert_fail@plt+0x19d0>
   12d80:	ldr	r3, [r1]
   12d84:	cmp	r3, #0
   12d88:	ble	12e10 <__assert_fail@plt+0x19dc>
   12d8c:	mov	r5, #0
   12d90:	mov	r4, r0
   12d94:	ldr	fp, [pc, #124]	; 12e18 <__assert_fail@plt+0x19e4>
   12d98:	ldr	sl, [pc, #124]	; 12e1c <__assert_fail@plt+0x19e8>
   12d9c:	sub	r6, r2, #1
   12da0:	mov	r9, r5
   12da4:	mov	r8, #1
   12da8:	b	12db8 <__assert_fail@plt+0x1984>
   12dac:	ldr	r3, [r7]
   12db0:	cmp	r3, r5
   12db4:	ble	12e04 <__assert_fail@plt+0x19d0>
   12db8:	add	r3, sp, #4
   12dbc:	mov	r2, sp
   12dc0:	mov	r1, fp
   12dc4:	mov	r0, r4
   12dc8:	bl	11398 <sscanf@plt>
   12dcc:	add	r5, r5, #1
   12dd0:	mov	r3, r4
   12dd4:	mov	r2, sl
   12dd8:	mov	r1, r9
   12ddc:	cmp	r0, #1
   12de0:	mov	r0, r8
   12de4:	beq	12dec <__assert_fail@plt+0x19b8>
   12de8:	bl	11224 <error@plt>
   12dec:	ldr	r2, [sp, #4]
   12df0:	ldr	r3, [sp]
   12df4:	strb	r3, [r6, #1]!
   12df8:	ldrb	r3, [r4, r2]!
   12dfc:	cmp	r3, #0
   12e00:	bne	12dac <__assert_fail@plt+0x1978>
   12e04:	str	r5, [r7]
   12e08:	add	sp, sp, #12
   12e0c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12e10:	mov	r5, #0
   12e14:	b	12e04 <__assert_fail@plt+0x19d0>
   12e18:			; <UNDEFINED> instruction: 0x0001a7b4
   12e1c:			; <UNDEFINED> instruction: 0x0001a7bc
   12e20:	ldr	r2, [r1, #4]
   12e24:	ldr	r3, [r0, #4]
   12e28:	sub	r3, r3, r2
   12e2c:	cmp	r3, #0
   12e30:	ldr	r2, [r0]
   12e34:	str	r3, [r0, #4]
   12e38:	addlt	r3, r3, #999424	; 0xf4000
   12e3c:	addlt	r3, r3, #576	; 0x240
   12e40:	sublt	r2, r2, #1
   12e44:	stmlt	r0, {r2, r3}
   12e48:	ldr	r3, [r1]
   12e4c:	sub	r2, r2, r3
   12e50:	str	r2, [r0]
   12e54:	bx	lr
   12e58:	vcmpe.f64	d0, #0.0
   12e5c:	vmrs	APSR_nzcv, fpscr
   12e60:	vnegmi.f64	d0, d0
   12e64:	bx	lr
   12e68:	vldr	d7, [pc, #88]	; 12ec8 <__assert_fail@plt+0x1a94>
   12e6c:	vcmpe.f64	d0, d7
   12e70:	vmrs	APSR_nzcv, fpscr
   12e74:	bmi	12ebc <__assert_fail@plt+0x1a88>
   12e78:	vcmpe.f64	d0, d1
   12e7c:	vmrs	APSR_nzcv, fpscr
   12e80:	bmi	12ebc <__assert_fail@plt+0x1a88>
   12e84:	vldr	d3, [pc, #68]	; 12ed0 <__assert_fail@plt+0x1a9c>
   12e88:	vmov.f64	d4, d7
   12e8c:	vmul.f64	d6, d0, d3
   12e90:	vdiv.f64	d7, d0, d6
   12e94:	vadd.f64	d7, d7, d6
   12e98:	vmul.f64	d7, d7, d3
   12e9c:	vsub.f64	d5, d7, d6
   12ea0:	vmov.f64	d6, d7
   12ea4:	vcmpe.f64	d5, d4
   12ea8:	vmrs	APSR_nzcv, fpscr
   12eac:	vnegmi.f64	d5, d5
   12eb0:	vcmpe.f64	d1, d5
   12eb4:	vmrs	APSR_nzcv, fpscr
   12eb8:	bmi	12e90 <__assert_fail@plt+0x1a5c>
   12ebc:	vmov.f64	d0, d7
   12ec0:	bx	lr
   12ec4:	nop			; (mov r0, r0)
	...
   12ed4:	svccc	0x00e00000
   12ed8:	mvn	r0, r0
   12edc:	lsr	r0, r0, #31
   12ee0:	bx	lr
   12ee4:	cmp	r2, #0
   12ee8:	bic	r3, r2, #-2147483648	; 0x80000000
   12eec:	push	{r4, lr}
   12ef0:	mov	r4, r0
   12ef4:	ldrge	r2, [pc, #12]	; 12f08 <__assert_fail@plt+0x1ad4>
   12ef8:	ldrlt	r2, [pc, #12]	; 12f0c <__assert_fail@plt+0x1ad8>
   12efc:	bl	112f0 <snprintf@plt>
   12f00:	mov	r0, r4
   12f04:	pop	{r4, pc}
   12f08:	ldrdeq	sl, [r1], -r8
   12f0c:	ldrdeq	sl, [r1], -ip
   12f10:	ldr	r3, [r0, #80]	; 0x50
   12f14:	push	{r4, r5, r6, lr}
   12f18:	cmp	r3, #0
   12f1c:	mov	r5, r0
   12f20:	beq	12f38 <__assert_fail@plt+0x1b04>
   12f24:	ldr	r4, [r5, #76]	; 0x4c
   12f28:	cmp	r4, #0
   12f2c:	beq	12f60 <__assert_fail@plt+0x1b2c>
   12f30:	mov	r0, #0
   12f34:	pop	{r4, r5, r6, pc}
   12f38:	ldr	r0, [r0, #56]	; 0x38
   12f3c:	cmp	r1, #0
   12f40:	addne	r0, r0, #8
   12f44:	addeq	r0, r0, #80	; 0x50
   12f48:	bl	18584 <argp_parse@@Base+0x1a04>
   12f4c:	cmp	r0, #0
   12f50:	str	r0, [r5, #80]	; 0x50
   12f54:	bne	12f24 <__assert_fail@plt+0x1af0>
   12f58:	mvn	r0, #0
   12f5c:	pop	{r4, r5, r6, pc}
   12f60:	ldr	r0, [r5, #72]	; 0x48
   12f64:	bl	18584 <argp_parse@@Base+0x1a04>
   12f68:	cmp	r0, #0
   12f6c:	str	r0, [r5, #76]	; 0x4c
   12f70:	beq	12f58 <__assert_fail@plt+0x1b24>
   12f74:	ldr	r2, [r5, #72]	; 0x48
   12f78:	mov	r1, r4
   12f7c:	bl	11314 <memset@plt>
   12f80:	mov	r0, r4
   12f84:	pop	{r4, r5, r6, pc}
   12f88:	push	{r4, r5, r6, r7, r8, lr}
   12f8c:	mov	r8, r1
   12f90:	ldrb	r1, [sp, #24]
   12f94:	mov	r4, r2
   12f98:	mov	r5, r3
   12f9c:	mov	r6, r0
   12fa0:	bl	12f10 <__assert_fail@plt+0x1adc>
   12fa4:	subs	r7, r0, #0
   12fa8:	bne	12fdc <__assert_fail@plt+0x1ba8>
   12fac:	ldr	r2, [r6, #56]	; 0x38
   12fb0:	add	r3, r4, r5
   12fb4:	cmp	r2, r3
   12fb8:	bcc	12fdc <__assert_fail@plt+0x1ba8>
   12fbc:	ldr	r0, [r6, #80]	; 0x50
   12fc0:	mov	r2, r5
   12fc4:	add	r0, r0, #8
   12fc8:	add	r0, r0, r4
   12fcc:	mov	r1, r8
   12fd0:	bl	11188 <memcpy@plt>
   12fd4:	mov	r0, r7
   12fd8:	pop	{r4, r5, r6, r7, r8, pc}
   12fdc:	mvn	r7, #0
   12fe0:	mov	r0, r7
   12fe4:	pop	{r4, r5, r6, r7, r8, pc}
   12fe8:	str	r1, [r0, #8]
   12fec:	bx	lr
   12ff0:	push	{lr}		; (str lr, [sp, #-4]!)
   12ff4:	sub	sp, sp, #20
   12ff8:	add	ip, sp, #16
   12ffc:	ldr	r0, [r0]
   13000:	str	r3, [sp]
   13004:	str	r2, [ip, #-4]!
   13008:	mov	r2, r1
   1300c:	mov	r3, ip
   13010:	mov	r1, #1
   13014:	bl	1111c <setsockopt@plt>
   13018:	add	sp, sp, #20
   1301c:	pop	{pc}		; (ldr pc, [sp], #4)
   13020:	str	r1, [r0, #20]
   13024:	bx	lr
   13028:	push	{r4, lr}
   1302c:	mov	r4, r0
   13030:	ldr	r0, [r0, #80]	; 0x50
   13034:	cmp	r0, #0
   13038:	beq	13048 <__assert_fail@plt+0x1c14>
   1303c:	bl	17a18 <argp_parse@@Base+0xe98>
   13040:	mov	r3, #0
   13044:	str	r3, [r4, #80]	; 0x50
   13048:	ldr	r0, [r4, #76]	; 0x4c
   1304c:	cmp	r0, #0
   13050:	popeq	{r4, pc}
   13054:	bl	17a18 <argp_parse@@Base+0xe98>
   13058:	mov	r3, #0
   1305c:	str	r3, [r4, #76]	; 0x4c
   13060:	pop	{r4, pc}
   13064:	push	{r4, r5, lr}
   13068:	sub	sp, sp, #12
   1306c:	mov	r4, r1
   13070:	mov	r5, r0
   13074:	mov	r1, #0
   13078:	mov	r0, sp
   1307c:	bl	11218 <gettimeofday@plt>
   13080:	cmn	r4, #1
   13084:	moveq	r0, #0
   13088:	beq	130b8 <__assert_fail@plt+0x1c84>
   1308c:	ldr	r3, [sp, #4]
   13090:	ldr	r2, [r5, #4]
   13094:	ldr	r0, [sp]
   13098:	sub	r3, r3, r2
   1309c:	cmp	r3, #0
   130a0:	ldr	r3, [r5]
   130a4:	sublt	r0, r0, #1
   130a8:	sub	r0, r0, r3
   130ac:	cmp	r4, r0
   130b0:	movgt	r0, #0
   130b4:	movle	r0, #1
   130b8:	add	sp, sp, #12
   130bc:	pop	{r4, r5, pc}
   130c0:	push	{r4, r5, lr}
   130c4:	mov	r3, #0
   130c8:	sub	sp, sp, #324	; 0x144
   130cc:	mov	ip, #1
   130d0:	str	r3, [sp]
   130d4:	stmib	sp, {r3, ip}
   130d8:	add	r2, sp, #16
   130dc:	mov	r3, #46	; 0x2e
   130e0:	mov	r4, r0
   130e4:	mov	r5, r1
   130e8:	bl	1135c <getnameinfo@plt>
   130ec:	subs	r3, r0, #0
   130f0:	beq	1312c <__assert_fail@plt+0x1cf8>
   130f4:	cmn	r3, #11
   130f8:	beq	131cc <__assert_fail@plt+0x1d98>
   130fc:	bl	11170 <gai_strerror@plt>
   13100:	mov	r2, r0
   13104:	ldr	r3, [pc, #232]	; 131f4 <__assert_fail@plt+0x1dc0>
   13108:	ldr	r1, [pc, #232]	; 131f8 <__assert_fail@plt+0x1dc4>
   1310c:	ldr	r0, [r3]
   13110:	bl	112d8 <fprintf@plt>
   13114:	ldr	r0, [pc, #224]	; 131fc <__assert_fail@plt+0x1dc8>
   13118:	bl	184f4 <argp_parse@@Base+0x1974>
   1311c:	mov	r4, r0
   13120:	mov	r0, r4
   13124:	add	sp, sp, #324	; 0x144
   13128:	pop	{r4, r5, pc}
   1312c:	ldr	r3, [pc, #204]	; 13200 <__assert_fail@plt+0x1dcc>
   13130:	ldr	r3, [r3]
   13134:	ands	r3, r3, #4
   13138:	bne	131b4 <__assert_fail@plt+0x1d80>
   1313c:	mov	ip, #40	; 0x28
   13140:	str	r3, [sp, #4]
   13144:	str	r3, [sp]
   13148:	mov	r1, r5
   1314c:	mov	r0, r4
   13150:	add	r2, sp, #64	; 0x40
   13154:	str	ip, [sp, #8]
   13158:	mov	r3, #256	; 0x100
   1315c:	bl	1135c <getnameinfo@plt>
   13160:	cmp	r0, #0
   13164:	add	r0, sp, #16
   13168:	bne	131e0 <__assert_fail@plt+0x1dac>
   1316c:	bl	112c0 <strlen@plt>
   13170:	mov	r5, r0
   13174:	add	r0, sp, #64	; 0x40
   13178:	bl	112c0 <strlen@plt>
   1317c:	add	r5, r5, r0
   13180:	add	r5, r5, #4
   13184:	mov	r0, r5
   13188:	bl	17fc8 <argp_parse@@Base+0x1448>
   1318c:	add	r3, sp, #16
   13190:	str	r3, [sp]
   13194:	mov	r1, r5
   13198:	add	r3, sp, #64	; 0x40
   1319c:	ldr	r2, [pc, #96]	; 13204 <__assert_fail@plt+0x1dd0>
   131a0:	mov	r4, r0
   131a4:	bl	112f0 <snprintf@plt>
   131a8:	mov	r0, r4
   131ac:	add	sp, sp, #324	; 0x144
   131b0:	pop	{r4, r5, pc}
   131b4:	add	r0, sp, #16
   131b8:	bl	184f4 <argp_parse@@Base+0x1974>
   131bc:	mov	r4, r0
   131c0:	mov	r0, r4
   131c4:	add	sp, sp, #324	; 0x144
   131c8:	pop	{r4, r5, pc}
   131cc:	bl	112e4 <__errno_location@plt>
   131d0:	ldr	r0, [r0]
   131d4:	bl	11260 <strerror@plt>
   131d8:	mov	r2, r0
   131dc:	b	13104 <__assert_fail@plt+0x1cd0>
   131e0:	bl	184f4 <argp_parse@@Base+0x1974>
   131e4:	mov	r4, r0
   131e8:	mov	r0, r4
   131ec:	add	sp, sp, #324	; 0x144
   131f0:	pop	{r4, r5, pc}
   131f4:	ldrdeq	ip, [r2], -r8
   131f8:	andeq	sl, r1, r8, lsl #5
   131fc:	andeq	sl, r1, r0, lsr #5
   13200:	andeq	ip, r2, ip, asr #8
   13204:	andeq	sl, r1, r4, ror #15
   13208:	ldr	r3, [pc, #196]	; 132d4 <__assert_fail@plt+0x1ea0>
   1320c:	push	{r4, r5, r6, r7, lr}
   13210:	sub	sp, sp, #20
   13214:	ldr	r3, [r3]
   13218:	str	r0, [sp, #12]
   1321c:	tst	r3, #4
   13220:	bne	132a0 <__assert_fail@plt+0x1e6c>
   13224:	mov	r2, #2
   13228:	mov	r1, #4
   1322c:	add	r0, sp, #12
   13230:	bl	111d0 <gethostbyaddr@plt>
   13234:	subs	r6, r0, #0
   13238:	ldr	r0, [sp, #12]
   1323c:	beq	132a0 <__assert_fail@plt+0x1e6c>
   13240:	bl	111ac <inet_ntoa@plt>
   13244:	mov	r7, r0
   13248:	bl	112c0 <strlen@plt>
   1324c:	mov	r4, r0
   13250:	ldr	r0, [r6]
   13254:	cmp	r0, #0
   13258:	addeq	r4, r4, #1
   1325c:	beq	1326c <__assert_fail@plt+0x1e38>
   13260:	bl	112c0 <strlen@plt>
   13264:	add	r4, r4, #5
   13268:	add	r4, r4, r0
   1326c:	mov	r0, r4
   13270:	bl	17fc8 <argp_parse@@Base+0x1448>
   13274:	ldr	r3, [r6]
   13278:	cmp	r3, #0
   1327c:	mov	r5, r0
   13280:	beq	132b8 <__assert_fail@plt+0x1e84>
   13284:	str	r7, [sp]
   13288:	mov	r1, r4
   1328c:	ldr	r2, [pc, #68]	; 132d8 <__assert_fail@plt+0x1ea4>
   13290:	bl	112f0 <snprintf@plt>
   13294:	mov	r0, r5
   13298:	add	sp, sp, #20
   1329c:	pop	{r4, r5, r6, r7, pc}
   132a0:	bl	111ac <inet_ntoa@plt>
   132a4:	bl	184f4 <argp_parse@@Base+0x1974>
   132a8:	mov	r5, r0
   132ac:	mov	r0, r5
   132b0:	add	sp, sp, #20
   132b4:	pop	{r4, r5, r6, r7, pc}
   132b8:	mov	r3, r7
   132bc:	mov	r1, r4
   132c0:	ldr	r2, [pc, #20]	; 132dc <__assert_fail@plt+0x1ea8>
   132c4:	bl	112f0 <snprintf@plt>
   132c8:	mov	r0, r5
   132cc:	add	sp, sp, #20
   132d0:	pop	{r4, r5, r6, r7, pc}
   132d4:	andeq	ip, r2, ip, asr #8
   132d8:	andeq	sl, r1, r4, ror #15
   132dc:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   132e0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   132e4:	sub	sp, sp, #20
   132e8:	ldr	r5, [r0, #4]
   132ec:	ldr	r4, [r0]
   132f0:	cmp	r5, #0
   132f4:	ldr	r7, [r0, #8]
   132f8:	beq	133d0 <__assert_fail@plt+0x1f9c>
   132fc:	stmib	sp, {r1, r2, r3}
   13300:	mov	r6, #1
   13304:	str	r4, [sp]
   13308:	mov	r8, #0
   1330c:	b	1332c <__assert_fail@plt+0x1ef8>
   13310:	mov	r3, r6
   13314:	subs	r5, r5, #1
   13318:	moveq	r3, #0
   1331c:	andne	r3, r3, #1
   13320:	cmp	r3, #0
   13324:	add	r4, r4, #24
   13328:	beq	13398 <__assert_fail@plt+0x1f64>
   1332c:	ldr	fp, [r4, #12]
   13330:	ands	r9, fp, #8
   13334:	movne	r3, r6
   13338:	movne	r9, r8
   1333c:	bne	13314 <__assert_fail@plt+0x1ee0>
   13340:	ldr	sl, [r4, #4]
   13344:	sub	r3, sl, #1
   13348:	cmp	r3, #254	; 0xfe
   1334c:	bhi	13310 <__assert_fail@plt+0x1edc>
   13350:	bl	11290 <__ctype_b_loc@plt>
   13354:	lsl	r3, sl, #1
   13358:	ldr	r1, [r0]
   1335c:	ldrh	r3, [r1, r3]
   13360:	tst	r3, #16384	; 0x4000
   13364:	beq	13310 <__assert_fail@plt+0x1edc>
   13368:	ldrb	r3, [r7]
   1336c:	cmp	r3, sl
   13370:	bne	13310 <__assert_fail@plt+0x1edc>
   13374:	ldr	r3, [sp]
   13378:	tst	fp, #4
   1337c:	moveq	r3, r4
   13380:	tst	fp, #2
   13384:	str	r3, [sp]
   13388:	movne	r3, r6
   1338c:	beq	133a8 <__assert_fail@plt+0x1f74>
   13390:	add	r7, r7, #1
   13394:	b	13314 <__assert_fail@plt+0x1ee0>
   13398:	mov	sl, r9
   1339c:	mov	r0, sl
   133a0:	add	sp, sp, #20
   133a4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   133a8:	ldr	r3, [sp, #12]
   133ac:	ldr	r2, [sp, #8]
   133b0:	ldr	r1, [sp]
   133b4:	mov	r0, r4
   133b8:	ldr	ip, [sp, #4]
   133bc:	blx	ip
   133c0:	clz	r3, r0
   133c4:	mov	r9, r0
   133c8:	lsr	r3, r3, #5
   133cc:	b	13390 <__assert_fail@plt+0x1f5c>
   133d0:	mov	sl, r5
   133d4:	b	1339c <__assert_fail@plt+0x1f68>
   133d8:	push	{r4, r5, r6, lr}
   133dc:	ldr	r4, [r0, #12]
   133e0:	ands	r4, r4, #8
   133e4:	movne	r4, #0
   133e8:	bne	13414 <__assert_fail@plt+0x1fe0>
   133ec:	ldr	r5, [r0, #4]
   133f0:	sub	r3, r5, #1
   133f4:	cmp	r3, #254	; 0xfe
   133f8:	bhi	13414 <__assert_fail@plt+0x1fe0>
   133fc:	bl	11290 <__ctype_b_loc@plt>
   13400:	lsl	r3, r5, #1
   13404:	ldr	r2, [r0]
   13408:	ldrh	r3, [r2, r3]
   1340c:	tst	r3, #16384	; 0x4000
   13410:	movne	r4, r5
   13414:	mov	r0, r4
   13418:	pop	{r4, r5, r6, pc}
   1341c:	push	{r4, lr}
   13420:	mov	r4, r0
   13424:	bl	11290 <__ctype_b_loc@plt>
   13428:	ldr	r2, [r4]
   1342c:	ldr	lr, [r0]
   13430:	b	13438 <__assert_fail@plt+0x2004>
   13434:	str	r2, [r4]
   13438:	ldrb	r1, [r2]
   1343c:	mov	r3, r2
   13440:	add	r2, r2, #1
   13444:	lsl	r0, r1, #1
   13448:	ldrh	ip, [lr, r0]
   1344c:	tst	ip, #8192	; 0x2000
   13450:	bne	13434 <__assert_fail@plt+0x2000>
   13454:	subs	r0, r1, #45	; 0x2d
   13458:	movne	r0, #1
   1345c:	cmp	r1, #0
   13460:	popeq	{r4, pc}
   13464:	tst	ip, #8
   13468:	popne	{r4, pc}
   1346c:	add	r3, r3, #1
   13470:	str	r3, [r4]
   13474:	ldrb	r2, [r3]
   13478:	cmp	r2, #0
   1347c:	lsl	r2, r2, #1
   13480:	popeq	{r4, pc}
   13484:	ldrh	r2, [lr, r2]
   13488:	tst	r2, #8
   1348c:	beq	1346c <__assert_fail@plt+0x2038>
   13490:	pop	{r4, pc}
   13494:	push	{r4, r5, r6, lr}
   13498:	mov	r5, r0
   1349c:	ldr	r0, [r0, #12]
   134a0:	cmp	r0, #0
   134a4:	beq	134b8 <__assert_fail@plt+0x2084>
   134a8:	ldr	r4, [r0, #24]
   134ac:	bl	17a18 <argp_parse@@Base+0xe98>
   134b0:	subs	r0, r4, #0
   134b4:	bne	134a8 <__assert_fail@plt+0x2074>
   134b8:	ldr	r3, [r5, #4]
   134bc:	cmp	r3, #0
   134c0:	beq	134d4 <__assert_fail@plt+0x20a0>
   134c4:	ldr	r0, [r5]
   134c8:	bl	17a18 <argp_parse@@Base+0xe98>
   134cc:	ldr	r0, [r5, #8]
   134d0:	bl	17a18 <argp_parse@@Base+0xe98>
   134d4:	mov	r0, r5
   134d8:	pop	{r4, r5, r6, lr}
   134dc:	b	17a18 <argp_parse@@Base+0xe98>
   134e0:	push	{r4, r5, r6, r7, r8, lr}
   134e4:	mov	r5, r1
   134e8:	ldr	r3, [r0, #28]
   134ec:	ldr	r1, [r0, #24]
   134f0:	ldr	r2, [r0, #16]
   134f4:	sub	r3, r3, r1
   134f8:	cmp	r3, r2
   134fc:	mov	r4, r0
   13500:	bhi	1356c <__assert_fail@plt+0x2138>
   13504:	ldr	r1, [r4, #20]
   13508:	mov	r6, #32
   1350c:	cmp	r1, #0
   13510:	subge	r5, r5, r1
   13514:	mov	r7, #1
   13518:	cmp	r5, #0
   1351c:	sub	r5, r5, #1
   13520:	ble	1354c <__assert_fail@plt+0x2118>
   13524:	ldr	r3, [r4, #28]
   13528:	ldr	r2, [r4, #32]
   1352c:	cmp	r3, r2
   13530:	bcs	13550 <__assert_fail@plt+0x211c>
   13534:	add	r2, r3, #1
   13538:	cmp	r5, #0
   1353c:	str	r2, [r4, #28]
   13540:	sub	r5, r5, #1
   13544:	strb	r6, [r3]
   13548:	bgt	13524 <__assert_fail@plt+0x20f0>
   1354c:	pop	{r4, r5, r6, r7, r8, pc}
   13550:	mov	r1, r7
   13554:	mov	r0, r4
   13558:	bl	18d18 <argp_parse@@Base+0x2198>
   1355c:	cmp	r0, #0
   13560:	beq	13518 <__assert_fail@plt+0x20e4>
   13564:	ldr	r3, [r4, #28]
   13568:	b	13534 <__assert_fail@plt+0x2100>
   1356c:	bl	18688 <argp_parse@@Base+0x1b08>
   13570:	b	13504 <__assert_fail@plt+0x20d0>
   13574:	push	{r4, r5, r6, lr}
   13578:	subs	r4, r2, #0
   1357c:	popeq	{r4, r5, r6, pc}
   13580:	ldr	ip, [r4, #20]
   13584:	cmp	ip, #0
   13588:	popeq	{r4, r5, r6, pc}
   1358c:	mov	r6, r1
   13590:	mov	r5, r0
   13594:	mov	r1, r3
   13598:	mov	r0, r4
   1359c:	bl	178bc <argp_parse@@Base+0xd3c>
   135a0:	ldr	r3, [r4, #20]
   135a4:	mov	r1, r5
   135a8:	mov	r2, r0
   135ac:	mov	r0, r6
   135b0:	pop	{r4, r5, r6, lr}
   135b4:	bx	r3
   135b8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   135bc:	mov	r5, r2
   135c0:	sub	sp, sp, #12
   135c4:	mov	r2, r1
   135c8:	ldr	r3, [r5, #16]
   135cc:	ldr	r1, [pc, #488]	; 137bc <__assert_fail@plt+0x2388>
   135d0:	mov	r8, r0
   135d4:	bl	13574 <__assert_fail@plt+0x2140>
   135d8:	subs	r6, r0, #0
   135dc:	beq	136e8 <__assert_fail@plt+0x22b4>
   135e0:	ldrb	r3, [r6]
   135e4:	cmp	r3, #0
   135e8:	beq	136dc <__assert_fail@plt+0x22a8>
   135ec:	ldr	r3, [r5, #8]
   135f0:	ldr	r3, [r3]
   135f4:	cmp	r3, #0
   135f8:	beq	13620 <__assert_fail@plt+0x21ec>
   135fc:	ldr	r4, [r5, #4]
   13600:	ldr	r3, [r4, #28]
   13604:	ldr	r2, [r4, #32]
   13608:	cmp	r3, r2
   1360c:	bcs	137a0 <__assert_fail@plt+0x236c>
   13610:	add	r1, r3, #1
   13614:	mov	r2, #10
   13618:	str	r1, [r4, #28]
   1361c:	strb	r2, [r3]
   13620:	ldr	sl, [pc, #408]	; 137c0 <__assert_fail@plt+0x238c>
   13624:	ldr	r0, [r5, #4]
   13628:	ldr	r1, [sl, #24]
   1362c:	bl	134e0 <__assert_fail@plt+0x20ac>
   13630:	ldr	r4, [r5, #4]
   13634:	ldr	r9, [sl, #24]
   13638:	ldr	r7, [r4, #28]
   1363c:	ldr	r3, [r4, #24]
   13640:	ldr	r2, [r4, #16]
   13644:	sub	r3, r7, r3
   13648:	cmp	r3, r2
   1364c:	strls	r9, [r4, #4]
   13650:	movls	fp, r4
   13654:	bhi	13724 <__assert_fail@plt+0x22f0>
   13658:	str	r9, [fp, #12]
   1365c:	mov	r0, r6
   13660:	bl	112c0 <strlen@plt>
   13664:	subs	r9, r0, #0
   13668:	beq	136a0 <__assert_fail@plt+0x226c>
   1366c:	ldr	r2, [r4, #32]
   13670:	add	r3, r7, r9
   13674:	cmp	r2, r3
   13678:	bcc	13708 <__assert_fail@plt+0x22d4>
   1367c:	mov	r2, r9
   13680:	mov	r0, r7
   13684:	mov	r1, r6
   13688:	bl	11188 <memcpy@plt>
   1368c:	ldr	r3, [r4, #28]
   13690:	add	r9, r3, r9
   13694:	str	r9, [r4, #28]
   13698:	ldr	r4, [r5, #4]
   1369c:	ldr	r7, [r4, #28]
   136a0:	ldr	r3, [r4, #24]
   136a4:	ldr	r2, [r4, #16]
   136a8:	sub	r3, r7, r3
   136ac:	cmp	r3, r2
   136b0:	movls	r9, r4
   136b4:	bhi	13770 <__assert_fail@plt+0x233c>
   136b8:	ldr	r2, [r9, #32]
   136bc:	mov	r3, #0
   136c0:	cmp	r2, r7
   136c4:	str	r3, [r4, #4]
   136c8:	bls	13784 <__assert_fail@plt+0x2350>
   136cc:	add	r2, r7, #1
   136d0:	mov	r3, #10
   136d4:	str	r2, [r9, #28]
   136d8:	strb	r3, [r7]
   136dc:	ldr	r3, [r5, #8]
   136e0:	mov	r2, #1
   136e4:	str	r2, [r3, #4]
   136e8:	cmp	r8, r6
   136ec:	beq	13700 <__assert_fail@plt+0x22cc>
   136f0:	mov	r0, r6
   136f4:	add	sp, sp, #12
   136f8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   136fc:	b	17a18 <argp_parse@@Base+0xe98>
   13700:	add	sp, sp, #12
   13704:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13708:	mov	r1, r9
   1370c:	mov	r0, r4
   13710:	bl	18d18 <argp_parse@@Base+0x2198>
   13714:	cmp	r0, #0
   13718:	beq	13698 <__assert_fail@plt+0x2264>
   1371c:	ldr	r7, [r4, #28]
   13720:	b	1367c <__assert_fail@plt+0x2248>
   13724:	mov	r0, r4
   13728:	str	r9, [sp, #4]
   1372c:	bl	18688 <argp_parse@@Base+0x1b08>
   13730:	ldr	fp, [r5, #4]
   13734:	ldr	r3, [sp, #4]
   13738:	ldr	r9, [sl, #24]
   1373c:	ldr	r7, [fp, #28]
   13740:	ldr	r2, [fp, #24]
   13744:	ldr	r1, [fp, #16]
   13748:	sub	r2, r7, r2
   1374c:	cmp	r2, r1
   13750:	str	r3, [r4, #4]
   13754:	movls	r4, fp
   13758:	bls	13658 <__assert_fail@plt+0x2224>
   1375c:	mov	r0, fp
   13760:	bl	18688 <argp_parse@@Base+0x1b08>
   13764:	ldr	r4, [r5, #4]
   13768:	ldr	r7, [r4, #28]
   1376c:	b	13658 <__assert_fail@plt+0x2224>
   13770:	mov	r0, r4
   13774:	bl	18688 <argp_parse@@Base+0x1b08>
   13778:	ldr	r9, [r5, #4]
   1377c:	ldr	r7, [r9, #28]
   13780:	b	136b8 <__assert_fail@plt+0x2284>
   13784:	mov	r1, #1
   13788:	mov	r0, r9
   1378c:	bl	18d18 <argp_parse@@Base+0x2198>
   13790:	cmp	r0, #0
   13794:	beq	136dc <__assert_fail@plt+0x22a8>
   13798:	ldr	r7, [r9, #28]
   1379c:	b	136cc <__assert_fail@plt+0x2298>
   137a0:	mov	r1, #1
   137a4:	mov	r0, r4
   137a8:	bl	18d18 <argp_parse@@Base+0x2198>
   137ac:	cmp	r0, #0
   137b0:	beq	13620 <__assert_fail@plt+0x21ec>
   137b4:	ldr	r3, [r4, #28]
   137b8:	b	13610 <__assert_fail@plt+0x21dc>
   137bc:	andeq	r0, r0, #3
   137c0:	muleq	r2, r4, r3
   137c4:	ldr	r3, [r1, #12]
   137c8:	push	{r4, r5, r6, r7, r8, lr}
   137cc:	cmp	r3, #0
   137d0:	mov	r4, r1
   137d4:	mov	r6, r0
   137d8:	beq	138c0 <__assert_fail@plt+0x248c>
   137dc:	ldr	r3, [r1, #8]
   137e0:	ldr	r2, [r1]
   137e4:	ldr	r7, [r3]
   137e8:	ldr	r3, [r3, #4]
   137ec:	ldr	r5, [r2, #16]
   137f0:	cmp	r3, #0
   137f4:	cmpne	r7, #0
   137f8:	beq	13830 <__assert_fail@plt+0x23fc>
   137fc:	ldr	r2, [r2, #12]
   13800:	ldr	r3, [r7, #12]
   13804:	cmp	r2, r3
   13808:	beq	13830 <__assert_fail@plt+0x23fc>
   1380c:	ldr	r8, [r1, #4]
   13810:	ldr	r3, [r8, #28]
   13814:	ldr	r2, [r8, #32]
   13818:	cmp	r3, r2
   1381c:	bcs	13950 <__assert_fail@plt+0x251c>
   13820:	add	r1, r3, #1
   13824:	mov	r2, #10
   13828:	str	r1, [r8, #28]
   1382c:	strb	r2, [r3]
   13830:	cmp	r5, #0
   13834:	beq	1391c <__assert_fail@plt+0x24e8>
   13838:	ldr	r0, [r5]
   1383c:	cmp	r0, #0
   13840:	beq	1391c <__assert_fail@plt+0x24e8>
   13844:	ldrb	r3, [r0]
   13848:	cmp	r3, #0
   1384c:	beq	1391c <__assert_fail@plt+0x24e8>
   13850:	cmp	r7, #0
   13854:	beq	13884 <__assert_fail@plt+0x2450>
   13858:	ldr	r3, [r7, #16]
   1385c:	cmp	r5, r3
   13860:	beq	1391c <__assert_fail@plt+0x24e8>
   13864:	cmp	r3, #0
   13868:	beq	13884 <__assert_fail@plt+0x2450>
   1386c:	ldr	r3, [r3, #12]
   13870:	cmp	r3, #0
   13874:	cmpne	r5, r3
   13878:	bne	1386c <__assert_fail@plt+0x2438>
   1387c:	cmp	r5, r3
   13880:	beq	1391c <__assert_fail@plt+0x24e8>
   13884:	ldr	r3, [r4, #4]
   13888:	ldr	r1, [r5, #16]
   1388c:	mov	r2, r4
   13890:	ldr	r7, [r3, #12]
   13894:	bl	135b8 <__assert_fail@plt+0x2184>
   13898:	ldr	r5, [r4, #4]
   1389c:	mov	r0, r5
   138a0:	ldr	r3, [r5, #28]
   138a4:	ldr	r1, [r5, #24]
   138a8:	ldr	r2, [r5, #16]
   138ac:	sub	r3, r3, r1
   138b0:	cmp	r3, r2
   138b4:	bhi	13944 <__assert_fail@plt+0x2510>
   138b8:	str	r7, [r5, #12]
   138bc:	b	13920 <__assert_fail@plt+0x24ec>
   138c0:	ldr	r5, [r1, #4]
   138c4:	ldr	r3, [r5, #28]
   138c8:	ldr	r1, [r5, #32]
   138cc:	add	r2, r3, #2
   138d0:	cmp	r1, r2
   138d4:	bcc	13900 <__assert_fail@plt+0x24cc>
   138d8:	ldr	r2, [pc, #140]	; 1396c <__assert_fail@plt+0x2538>
   138dc:	mov	r1, r6
   138e0:	ldrh	r2, [r2]
   138e4:	strh	r2, [r3]
   138e8:	ldr	r3, [r5, #28]
   138ec:	ldr	r0, [r4, #4]
   138f0:	add	r3, r3, #2
   138f4:	str	r3, [r5, #28]
   138f8:	pop	{r4, r5, r6, r7, r8, lr}
   138fc:	b	134e0 <__assert_fail@plt+0x20ac>
   13900:	mov	r1, #2
   13904:	mov	r0, r5
   13908:	bl	18d18 <argp_parse@@Base+0x2198>
   1390c:	cmp	r0, #0
   13910:	beq	13934 <__assert_fail@plt+0x2500>
   13914:	ldr	r3, [r5, #28]
   13918:	b	138d8 <__assert_fail@plt+0x24a4>
   1391c:	ldr	r0, [r4, #4]
   13920:	mov	r3, #0
   13924:	str	r3, [r4, #12]
   13928:	mov	r1, r6
   1392c:	pop	{r4, r5, r6, r7, r8, lr}
   13930:	b	134e0 <__assert_fail@plt+0x20ac>
   13934:	ldr	r0, [r4, #4]
   13938:	mov	r1, r6
   1393c:	pop	{r4, r5, r6, r7, r8, lr}
   13940:	b	134e0 <__assert_fail@plt+0x20ac>
   13944:	bl	18688 <argp_parse@@Base+0x1b08>
   13948:	ldr	r0, [r4, #4]
   1394c:	b	138b8 <__assert_fail@plt+0x2484>
   13950:	mov	r1, #1
   13954:	mov	r0, r8
   13958:	bl	18d18 <argp_parse@@Base+0x2198>
   1395c:	cmp	r0, #0
   13960:	beq	13830 <__assert_fail@plt+0x23fc>
   13964:	ldr	r3, [r8, #28]
   13968:	b	13820 <__assert_fail@plt+0x23ec>
   1396c:	andeq	sl, r1, r0, asr r0
   13970:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13974:	mov	r7, r3
   13978:	ldr	sl, [r0, #12]
   1397c:	sub	sp, sp, #36	; 0x24
   13980:	ldr	r3, [r0, #16]
   13984:	cmp	sl, #0
   13988:	mov	fp, r0
   1398c:	mov	r6, r2
   13990:	str	r3, [sp, #16]
   13994:	mov	r9, r1
   13998:	ldr	r8, [sp, #72]	; 0x48
   1399c:	ldr	r5, [sp, #76]	; 0x4c
   139a0:	beq	13d70 <__assert_fail@plt+0x293c>
   139a4:	mov	r1, #11
   139a8:	mov	r0, sl
   139ac:	bl	112cc <strchr@plt>
   139b0:	cmp	r6, #0
   139b4:	bne	13c8c <__assert_fail@plt+0x2858>
   139b8:	cmp	r0, #0
   139bc:	ldr	r3, [fp, #20]
   139c0:	beq	13ec8 <__assert_fail@plt+0x2a94>
   139c4:	cmp	r3, #0
   139c8:	sub	r4, r0, sl
   139cc:	beq	13e60 <__assert_fail@plt+0x2a2c>
   139d0:	cmp	r4, #0
   139d4:	beq	13e00 <__assert_fail@plt+0x29cc>
   139d8:	mov	r0, sl
   139dc:	mov	r1, r4
   139e0:	bl	1117c <strndup@plt>
   139e4:	mov	r3, #1
   139e8:	str	r3, [sp, #24]
   139ec:	mov	sl, r0
   139f0:	adds	r3, r0, #0
   139f4:	movne	r3, #1
   139f8:	str	r3, [sp, #20]
   139fc:	mov	r1, r9
   13a00:	mov	r0, fp
   13a04:	bl	178bc <argp_parse@@Base+0xd3c>
   13a08:	ldr	r3, [fp, #20]
   13a0c:	str	r0, [sp, #12]
   13a10:	ldr	r0, [pc, #1272]	; 13f10 <__assert_fail@plt+0x2adc>
   13a14:	ldr	r2, [sp, #12]
   13a18:	mov	r1, sl
   13a1c:	blx	r3
   13a20:	subs	r3, r0, #0
   13a24:	beq	13db0 <__assert_fail@plt+0x297c>
   13a28:	cmp	r7, #0
   13a2c:	beq	13a50 <__assert_fail@plt+0x261c>
   13a30:	ldr	r2, [r5, #28]
   13a34:	ldr	r1, [r5, #32]
   13a38:	cmp	r2, r1
   13a3c:	bcs	13db8 <__assert_fail@plt+0x2984>
   13a40:	add	r0, r2, #1
   13a44:	mov	r1, #10
   13a48:	str	r0, [r5, #28]
   13a4c:	strb	r1, [r2]
   13a50:	ldr	r2, [sp, #24]
   13a54:	cmp	r3, sl
   13a58:	movne	r2, #0
   13a5c:	andeq	r2, r2, #1
   13a60:	cmp	r2, #0
   13a64:	beq	13cd0 <__assert_fail@plt+0x289c>
   13a68:	ldr	r0, [r5, #28]
   13a6c:	ldr	r1, [r5, #32]
   13a70:	add	r2, r0, r4
   13a74:	cmp	r1, r2
   13a78:	bcs	13d30 <__assert_fail@plt+0x28fc>
   13a7c:	mov	r1, r4
   13a80:	mov	r0, r5
   13a84:	str	r3, [sp, #24]
   13a88:	bl	18d18 <argp_parse@@Base+0x2198>
   13a8c:	ldr	r3, [sp, #24]
   13a90:	cmp	r0, #0
   13a94:	bne	13d2c <__assert_fail@plt+0x28f8>
   13a98:	ldr	r4, [r5, #28]
   13a9c:	ldr	r1, [r5, #24]
   13aa0:	ldr	r2, [r5, #16]
   13aa4:	sub	r4, r4, r1
   13aa8:	cmp	r4, r2
   13aac:	bhi	13d54 <__assert_fail@plt+0x2920>
   13ab0:	ldr	r2, [r5, #20]
   13ab4:	ldr	r1, [r5, #4]
   13ab8:	bic	r2, r2, r2, asr #31
   13abc:	cmp	r1, r2
   13ac0:	bcs	13ae4 <__assert_fail@plt+0x26b0>
   13ac4:	ldr	r2, [r5, #28]
   13ac8:	ldr	r1, [r5, #32]
   13acc:	cmp	r2, r1
   13ad0:	bcs	13ddc <__assert_fail@plt+0x29a8>
   13ad4:	add	r0, r2, #1
   13ad8:	mov	r1, #10
   13adc:	str	r0, [r5, #28]
   13ae0:	strb	r1, [r2]
   13ae4:	cmp	r3, sl
   13ae8:	moveq	r4, #1
   13aec:	beq	13afc <__assert_fail@plt+0x26c8>
   13af0:	mov	r0, r3
   13af4:	bl	17a18 <argp_parse@@Base+0xe98>
   13af8:	mov	r4, #1
   13afc:	ldr	r3, [sp, #20]
   13b00:	cmp	r3, #0
   13b04:	beq	13b1c <__assert_fail@plt+0x26e8>
   13b08:	ldr	r3, [fp, #20]
   13b0c:	cmp	r3, #0
   13b10:	beq	13c00 <__assert_fail@plt+0x27cc>
   13b14:	mov	r0, sl
   13b18:	bl	17a18 <argp_parse@@Base+0xe98>
   13b1c:	cmp	r6, #0
   13b20:	beq	13c00 <__assert_fail@plt+0x27cc>
   13b24:	ldr	r3, [fp, #20]
   13b28:	cmp	r3, #0
   13b2c:	beq	13c00 <__assert_fail@plt+0x27cc>
   13b30:	ldr	r2, [sp, #12]
   13b34:	mov	r1, #0
   13b38:	ldr	r0, [pc, #980]	; 13f14 <__assert_fail@plt+0x2ae0>
   13b3c:	blx	r3
   13b40:	subs	sl, r0, #0
   13b44:	beq	13c00 <__assert_fail@plt+0x27cc>
   13b48:	orrs	r3, r7, r4
   13b4c:	beq	13b70 <__assert_fail@plt+0x273c>
   13b50:	ldr	r3, [r5, #28]
   13b54:	ldr	r2, [r5, #32]
   13b58:	cmp	r3, r2
   13b5c:	bcs	13e98 <__assert_fail@plt+0x2a64>
   13b60:	add	r1, r3, #1
   13b64:	mov	r2, #10
   13b68:	str	r1, [r5, #28]
   13b6c:	strb	r2, [r3]
   13b70:	mov	r0, sl
   13b74:	bl	112c0 <strlen@plt>
   13b78:	subs	r4, r0, #0
   13b7c:	beq	13ba8 <__assert_fail@plt+0x2774>
   13b80:	ldr	r0, [r5, #28]
   13b84:	ldr	r2, [r5, #32]
   13b88:	add	r3, r0, r4
   13b8c:	cmp	r2, r3
   13b90:	bcs	13e10 <__assert_fail@plt+0x29dc>
   13b94:	mov	r1, r4
   13b98:	mov	r0, r5
   13b9c:	bl	18d18 <argp_parse@@Base+0x2198>
   13ba0:	cmp	r0, #0
   13ba4:	bne	13e0c <__assert_fail@plt+0x29d8>
   13ba8:	mov	r0, sl
   13bac:	bl	17a18 <argp_parse@@Base+0xe98>
   13bb0:	ldr	r3, [r5, #28]
   13bb4:	ldr	r1, [r5, #24]
   13bb8:	ldr	r2, [r5, #16]
   13bbc:	sub	r3, r3, r1
   13bc0:	cmp	r3, r2
   13bc4:	bhi	13e2c <__assert_fail@plt+0x29f8>
   13bc8:	ldr	r3, [r5, #20]
   13bcc:	ldr	r2, [r5, #4]
   13bd0:	bic	r3, r3, r3, asr #31
   13bd4:	cmp	r2, r3
   13bd8:	bcs	13d68 <__assert_fail@plt+0x2934>
   13bdc:	ldr	r3, [r5, #28]
   13be0:	ldr	r2, [r5, #32]
   13be4:	cmp	r3, r2
   13be8:	bcs	13e7c <__assert_fail@plt+0x2a48>
   13bec:	mov	r4, #1
   13bf0:	add	r2, r3, r4
   13bf4:	str	r2, [r5, #28]
   13bf8:	mov	r2, #10
   13bfc:	strb	r2, [r3]
   13c00:	ldr	fp, [sp, #16]
   13c04:	cmp	fp, #0
   13c08:	beq	13c80 <__assert_fail@plt+0x284c>
   13c0c:	ldr	r3, [fp]
   13c10:	cmp	r3, #0
   13c14:	beq	13c80 <__assert_fail@plt+0x284c>
   13c18:	eor	r2, r4, #1
   13c1c:	and	r2, r2, #1
   13c20:	clz	sl, r8
   13c24:	lsr	sl, sl, #5
   13c28:	orrs	r2, sl, r2
   13c2c:	bne	13c48 <__assert_fail@plt+0x2814>
   13c30:	b	13eb4 <__assert_fail@plt+0x2a80>
   13c34:	cmp	r4, #0
   13c38:	movne	r2, sl
   13c3c:	orreq	r2, sl, #1
   13c40:	cmp	r2, #0
   13c44:	beq	13c80 <__assert_fail@plt+0x284c>
   13c48:	orrs	r2, r7, r4
   13c4c:	mov	r0, r3
   13c50:	str	r5, [sp, #4]
   13c54:	movne	r3, #1
   13c58:	moveq	r3, #0
   13c5c:	str	r8, [sp]
   13c60:	mov	r2, r6
   13c64:	mov	r1, r9
   13c68:	bl	13970 <__assert_fail@plt+0x253c>
   13c6c:	ldr	r3, [fp, #16]
   13c70:	add	fp, fp, #16
   13c74:	cmp	r3, #0
   13c78:	orr	r4, r4, r0
   13c7c:	bne	13c34 <__assert_fail@plt+0x2800>
   13c80:	mov	r0, r4
   13c84:	add	sp, sp, #36	; 0x24
   13c88:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13c8c:	cmp	r0, #0
   13c90:	addne	sl, r0, #1
   13c94:	beq	13e58 <__assert_fail@plt+0x2a24>
   13c98:	ldr	r3, [fp, #20]
   13c9c:	cmp	r3, #0
   13ca0:	beq	13e38 <__assert_fail@plt+0x2a04>
   13ca4:	mov	r3, #0
   13ca8:	mov	r1, r9
   13cac:	mov	r0, fp
   13cb0:	mov	r4, r3
   13cb4:	str	r3, [sp, #20]
   13cb8:	bl	178bc <argp_parse@@Base+0xd3c>
   13cbc:	str	r4, [sp, #24]
   13cc0:	ldr	r3, [fp, #20]
   13cc4:	str	r0, [sp, #12]
   13cc8:	ldr	r0, [pc, #584]	; 13f18 <__assert_fail@plt+0x2ae4>
   13ccc:	b	13a14 <__assert_fail@plt+0x25e0>
   13cd0:	mov	r0, r3
   13cd4:	str	r3, [sp, #24]
   13cd8:	bl	112c0 <strlen@plt>
   13cdc:	ldr	r3, [sp, #24]
   13ce0:	subs	r4, r0, #0
   13ce4:	beq	13a98 <__assert_fail@plt+0x2664>
   13ce8:	ldr	r0, [r5, #28]
   13cec:	ldr	r1, [r5, #32]
   13cf0:	add	r2, r0, r4
   13cf4:	cmp	r1, r2
   13cf8:	bcs	13d1c <__assert_fail@plt+0x28e8>
   13cfc:	mov	r1, r4
   13d00:	mov	r0, r5
   13d04:	str	r3, [sp, #24]
   13d08:	bl	18d18 <argp_parse@@Base+0x2198>
   13d0c:	ldr	r3, [sp, #24]
   13d10:	cmp	r0, #0
   13d14:	beq	13a98 <__assert_fail@plt+0x2664>
   13d18:	ldr	r0, [r5, #28]
   13d1c:	mov	r2, r4
   13d20:	mov	r1, r3
   13d24:	str	r3, [sp, #24]
   13d28:	b	13d3c <__assert_fail@plt+0x2908>
   13d2c:	ldr	r0, [r5, #28]
   13d30:	mov	r2, r4
   13d34:	mov	r1, sl
   13d38:	str	r3, [sp, #24]
   13d3c:	bl	11188 <memcpy@plt>
   13d40:	ldr	r2, [r5, #28]
   13d44:	ldr	r3, [sp, #24]
   13d48:	add	r4, r2, r4
   13d4c:	str	r4, [r5, #28]
   13d50:	b	13a9c <__assert_fail@plt+0x2668>
   13d54:	mov	r0, r5
   13d58:	str	r3, [sp, #24]
   13d5c:	bl	18688 <argp_parse@@Base+0x1b08>
   13d60:	ldr	r3, [sp, #24]
   13d64:	b	13ab0 <__assert_fail@plt+0x267c>
   13d68:	mov	r4, #1
   13d6c:	b	13c00 <__assert_fail@plt+0x27cc>
   13d70:	ldr	r4, [r0, #20]
   13d74:	cmp	r4, #0
   13d78:	beq	13ec0 <__assert_fail@plt+0x2a8c>
   13d7c:	bl	178bc <argp_parse@@Base+0xd3c>
   13d80:	cmp	r6, #0
   13d84:	ldr	r3, [fp, #20]
   13d88:	strne	sl, [sp, #20]
   13d8c:	strne	sl, [sp, #24]
   13d90:	movne	r4, sl
   13d94:	streq	r6, [sp, #20]
   13d98:	streq	r6, [sp, #24]
   13d9c:	moveq	r4, r6
   13da0:	str	r0, [sp, #12]
   13da4:	ldrne	r0, [pc, #364]	; 13f18 <__assert_fail@plt+0x2ae4>
   13da8:	ldreq	r0, [pc, #352]	; 13f10 <__assert_fail@plt+0x2adc>
   13dac:	b	13a14 <__assert_fail@plt+0x25e0>
   13db0:	mov	r4, r3
   13db4:	b	13afc <__assert_fail@plt+0x26c8>
   13db8:	mov	r1, #1
   13dbc:	mov	r0, r5
   13dc0:	str	r3, [sp, #28]
   13dc4:	bl	18d18 <argp_parse@@Base+0x2198>
   13dc8:	ldr	r3, [sp, #28]
   13dcc:	cmp	r0, #0
   13dd0:	beq	13a50 <__assert_fail@plt+0x261c>
   13dd4:	ldr	r2, [r5, #28]
   13dd8:	b	13a40 <__assert_fail@plt+0x260c>
   13ddc:	mov	r1, #1
   13de0:	mov	r0, r5
   13de4:	str	r3, [sp, #24]
   13de8:	bl	18d18 <argp_parse@@Base+0x2198>
   13dec:	ldr	r3, [sp, #24]
   13df0:	cmp	r0, #0
   13df4:	beq	13ae4 <__assert_fail@plt+0x26b0>
   13df8:	ldr	r2, [r5, #28]
   13dfc:	b	13ad4 <__assert_fail@plt+0x26a0>
   13e00:	str	r4, [sp, #20]
   13e04:	str	r4, [sp, #24]
   13e08:	b	139fc <__assert_fail@plt+0x25c8>
   13e0c:	ldr	r0, [r5, #28]
   13e10:	mov	r2, r4
   13e14:	mov	r1, sl
   13e18:	bl	11188 <memcpy@plt>
   13e1c:	ldr	r3, [r5, #28]
   13e20:	add	r4, r3, r4
   13e24:	str	r4, [r5, #28]
   13e28:	b	13ba8 <__assert_fail@plt+0x2774>
   13e2c:	mov	r0, r5
   13e30:	bl	18688 <argp_parse@@Base+0x1b08>
   13e34:	b	13bc8 <__assert_fail@plt+0x2794>
   13e38:	cmp	sl, #0
   13e3c:	beq	13ebc <__assert_fail@plt+0x2a88>
   13e40:	str	r3, [sp, #20]
   13e44:	str	r3, [sp, #24]
   13e48:	mov	r4, r3
   13e4c:	str	r3, [sp, #12]
   13e50:	mov	r3, sl
   13e54:	b	13a28 <__assert_fail@plt+0x25f4>
   13e58:	mov	sl, r0
   13e5c:	b	13c98 <__assert_fail@plt+0x2864>
   13e60:	adds	r3, r4, #0
   13e64:	movne	r3, #1
   13e68:	str	r3, [sp, #24]
   13e6c:	str	r3, [sp, #20]
   13e70:	str	r6, [sp, #12]
   13e74:	mov	r3, sl
   13e78:	b	13a28 <__assert_fail@plt+0x25f4>
   13e7c:	mov	r1, #1
   13e80:	mov	r0, r5
   13e84:	bl	18d18 <argp_parse@@Base+0x2198>
   13e88:	cmp	r0, #0
   13e8c:	beq	13d68 <__assert_fail@plt+0x2934>
   13e90:	ldr	r3, [r5, #28]
   13e94:	b	13bec <__assert_fail@plt+0x27b8>
   13e98:	mov	r1, #1
   13e9c:	mov	r0, r5
   13ea0:	bl	18d18 <argp_parse@@Base+0x2198>
   13ea4:	cmp	r0, #0
   13ea8:	beq	13b70 <__assert_fail@plt+0x273c>
   13eac:	ldr	r3, [r5, #28]
   13eb0:	b	13b60 <__assert_fail@plt+0x272c>
   13eb4:	mov	r4, #1
   13eb8:	b	13c80 <__assert_fail@plt+0x284c>
   13ebc:	mov	r4, sl
   13ec0:	str	r4, [sp, #12]
   13ec4:	b	13b1c <__assert_fail@plt+0x26e8>
   13ec8:	cmp	r3, #0
   13ecc:	beq	13ef8 <__assert_fail@plt+0x2ac4>
   13ed0:	mov	r1, r9
   13ed4:	mov	r0, fp
   13ed8:	bl	178bc <argp_parse@@Base+0xd3c>
   13edc:	mov	r4, r6
   13ee0:	ldr	r3, [fp, #20]
   13ee4:	str	r6, [sp, #20]
   13ee8:	str	r6, [sp, #24]
   13eec:	str	r0, [sp, #12]
   13ef0:	ldr	r0, [pc, #24]	; 13f10 <__assert_fail@plt+0x2adc>
   13ef4:	b	13a14 <__assert_fail@plt+0x25e0>
   13ef8:	mov	r3, sl
   13efc:	str	r6, [sp, #20]
   13f00:	str	r6, [sp, #24]
   13f04:	mov	r4, r6
   13f08:	str	r6, [sp, #12]
   13f0c:	b	13a28 <__assert_fail@plt+0x25f4>
   13f10:	andeq	r0, r0, #1
   13f14:	andeq	r0, r0, #4
   13f18:	andeq	r0, r0, #2
   13f1c:	ldr	r3, [r0, #12]
   13f20:	ldr	r2, [r1, #12]
   13f24:	push	{r4, r5, r6, lr}
   13f28:	cmp	r3, r2
   13f2c:	beq	13f7c <__assert_fail@plt+0x2b48>
   13f30:	mov	r5, r1
   13f34:	mov	r4, r0
   13f38:	mov	r1, r2
   13f3c:	mov	r0, r3
   13f40:	bl	13f1c <__assert_fail@plt+0x2ae8>
   13f44:	cmp	r0, #0
   13f48:	popne	{r4, r5, r6, pc}
   13f4c:	ldr	r3, [r5, #8]
   13f50:	ldr	r0, [r4, #8]
   13f54:	mvn	r2, r3
   13f58:	lsr	r2, r2, #31
   13f5c:	cmp	r2, r0, lsr #31
   13f60:	subne	r0, r0, r3
   13f64:	subeq	r0, r3, r0
   13f68:	cmp	r0, #0
   13f6c:	ldreq	r3, [r5, #4]
   13f70:	ldreq	r0, [r4, #4]
   13f74:	subeq	r0, r3, r0
   13f78:	pop	{r4, r5, r6, pc}
   13f7c:	ldr	r3, [r1, #8]
   13f80:	ldr	r2, [r0, #8]
   13f84:	mvn	ip, r3
   13f88:	ldr	lr, [r1, #4]
   13f8c:	lsr	ip, ip, #31
   13f90:	cmp	ip, r2, lsr #31
   13f94:	ldr	r1, [r0, #4]
   13f98:	subne	r0, r2, r3
   13f9c:	subeq	r0, r3, r2
   13fa0:	cmp	r0, #0
   13fa4:	subeq	r0, lr, r1
   13fa8:	pop	{r4, r5, r6, pc}
   13fac:	push	{r4, r5, r6, r7, r8, r9, lr}
   13fb0:	sub	sp, sp, #12
   13fb4:	ldr	lr, [r0, #16]
   13fb8:	cmp	lr, #0
   13fbc:	movne	r2, lr
   13fc0:	bne	13fcc <__assert_fail@plt+0x2b98>
   13fc4:	b	14290 <__assert_fail@plt+0x2e5c>
   13fc8:	mov	r2, r3
   13fcc:	ldr	r3, [r2, #12]
   13fd0:	cmp	r3, #0
   13fd4:	bne	13fc8 <__assert_fail@plt+0x2b94>
   13fd8:	ldr	ip, [r1, #16]
   13fdc:	ldr	r4, [r2, #8]
   13fe0:	cmp	ip, #0
   13fe4:	movne	r2, ip
   13fe8:	bne	13ff4 <__assert_fail@plt+0x2bc0>
   13fec:	b	142a4 <__assert_fail@plt+0x2e70>
   13ff0:	mov	r2, r3
   13ff4:	ldr	r3, [r2, #12]
   13ff8:	cmp	r3, #0
   13ffc:	bne	13ff0 <__assert_fail@plt+0x2bbc>
   14000:	ldr	r3, [r2, #8]
   14004:	mvn	r2, r3
   14008:	lsr	r2, r2, #31
   1400c:	cmp	r2, r4, lsr #31
   14010:	subne	r4, r4, r3
   14014:	subeq	r4, r3, r4
   14018:	cmp	r4, #0
   1401c:	bne	14084 <__assert_fail@plt+0x2c50>
   14020:	adds	r4, ip, #0
   14024:	movne	r4, #1
   14028:	cmp	lr, #0
   1402c:	rsbeq	r4, r4, #0
   14030:	rsbne	r4, r4, #1
   14034:	cmp	r4, #0
   14038:	bne	14084 <__assert_fail@plt+0x2c50>
   1403c:	cmp	lr, #0
   14040:	mov	r5, r1
   14044:	mov	r6, r0
   14048:	beq	140a0 <__assert_fail@plt+0x2c6c>
   1404c:	ldr	r0, [lr, #20]
   14050:	ldr	r2, [ip, #20]
   14054:	cmp	r0, r2
   14058:	ble	14264 <__assert_fail@plt+0x2e30>
   1405c:	mov	r0, lr
   14060:	ldr	r0, [r0, #12]
   14064:	ldr	r3, [r0, #20]
   14068:	cmp	r2, r3
   1406c:	blt	14060 <__assert_fail@plt+0x2c2c>
   14070:	mov	r1, ip
   14074:	bl	13f1c <__assert_fail@plt+0x2ae8>
   14078:	cmp	r0, #0
   1407c:	movne	r4, r0
   14080:	moveq	r4, #1
   14084:	mov	r0, r4
   14088:	add	sp, sp, #12
   1408c:	pop	{r4, r5, r6, r7, r8, r9, pc}
   14090:	mov	r0, lr
   14094:	bl	13f1c <__assert_fail@plt+0x2ae8>
   14098:	subs	r4, r0, #0
   1409c:	bne	14084 <__assert_fail@plt+0x2c50>
   140a0:	ldr	r4, [r5, #12]
   140a4:	ldr	r3, [r6, #12]
   140a8:	mvn	r2, r4
   140ac:	lsr	r2, r2, #31
   140b0:	cmp	r2, r3, lsr #31
   140b4:	subne	r4, r3, r4
   140b8:	subeq	r4, r4, r3
   140bc:	cmp	r4, #0
   140c0:	bne	14084 <__assert_fail@plt+0x2c50>
   140c4:	ldr	r2, [r6, #4]
   140c8:	ldr	lr, [r6]
   140cc:	cmp	r2, #0
   140d0:	beq	140fc <__assert_fail@plt+0x2cc8>
   140d4:	add	r3, lr, #24
   140d8:	ldr	r1, [r3, #-24]	; 0xffffffe8
   140dc:	cmp	r1, #0
   140e0:	beq	140f0 <__assert_fail@plt+0x2cbc>
   140e4:	ldr	r0, [r3, #-12]
   140e8:	tst	r0, #2
   140ec:	beq	142ac <__assert_fail@plt+0x2e78>
   140f0:	subs	r2, r2, #1
   140f4:	add	r3, r3, #24
   140f8:	bne	140d8 <__assert_fail@plt+0x2ca4>
   140fc:	ldr	r2, [r5, #4]
   14100:	mov	ip, #0
   14104:	cmp	r2, ip
   14108:	str	ip, [sp]
   1410c:	ldr	r3, [r5]
   14110:	beq	1431c <__assert_fail@plt+0x2ee8>
   14114:	add	r3, r3, #24
   14118:	ldr	r1, [r3, #-24]	; 0xffffffe8
   1411c:	cmp	r1, #0
   14120:	beq	14130 <__assert_fail@plt+0x2cfc>
   14124:	ldr	r0, [r3, #-12]
   14128:	tst	r0, #2
   1412c:	beq	14140 <__assert_fail@plt+0x2d0c>
   14130:	subs	r2, r2, #1
   14134:	add	r3, r3, #24
   14138:	bne	14118 <__assert_fail@plt+0x2ce4>
   1413c:	mov	r1, r2
   14140:	ldr	r3, [lr, #12]
   14144:	str	r1, [sp, #4]
   14148:	ands	r3, ip, r3, lsr #3
   1414c:	beq	14314 <__assert_fail@plt+0x2ee0>
   14150:	mov	r0, sp
   14154:	bl	1341c <__assert_fail@plt+0x1fe8>
   14158:	ldr	r3, [r5]
   1415c:	cmp	r0, #0
   14160:	bne	14300 <__assert_fail@plt+0x2ecc>
   14164:	ldr	r3, [r3, #12]
   14168:	tst	r3, #8
   1416c:	beq	14194 <__assert_fail@plt+0x2d60>
   14170:	ldr	r3, [sp, #4]
   14174:	cmp	r3, #0
   14178:	beq	14194 <__assert_fail@plt+0x2d60>
   1417c:	add	r0, sp, #4
   14180:	bl	1341c <__assert_fail@plt+0x1fe8>
   14184:	cmp	r0, #0
   14188:	subne	r4, r4, #1
   1418c:	cmp	r4, #0
   14190:	bne	14084 <__assert_fail@plt+0x2c50>
   14194:	ldr	r2, [r6, #20]
   14198:	mov	r0, r6
   1419c:	mov	r3, #0
   141a0:	ldr	r2, [r2, #24]
   141a4:	ldr	r1, [pc, #408]	; 14344 <__assert_fail@plt+0x2f10>
   141a8:	bl	132e0 <__assert_fail@plt+0x1eac>
   141ac:	ldr	r2, [r5, #20]
   141b0:	mov	r3, #0
   141b4:	ldr	r1, [pc, #392]	; 14344 <__assert_fail@plt+0x2f10>
   141b8:	ldr	r2, [r2, #24]
   141bc:	uxtb	r6, r0
   141c0:	mov	r0, r5
   141c4:	bl	132e0 <__assert_fail@plt+0x1eac>
   141c8:	cmp	r6, #0
   141cc:	lslne	r4, r6, #2
   141d0:	movne	r7, r6
   141d4:	uxtb	r5, r0
   141d8:	beq	142e4 <__assert_fail@plt+0x2eb0>
   141dc:	cmp	r5, #0
   141e0:	lslne	r9, r5, #2
   141e4:	movne	r8, r5
   141e8:	beq	142c8 <__assert_fail@plt+0x2e94>
   141ec:	bl	1126c <__ctype_tolower_loc@plt>
   141f0:	ldr	r3, [r0]
   141f4:	ldr	r4, [r3, r4]
   141f8:	ldr	r3, [r3, r9]
   141fc:	subs	r4, r4, r3
   14200:	bne	14084 <__assert_fail@plt+0x2c50>
   14204:	subs	r4, r8, r7
   14208:	bne	14084 <__assert_fail@plt+0x2c50>
   1420c:	adds	r4, r5, #0
   14210:	movne	r4, #1
   14214:	cmp	r6, #0
   14218:	rsbeq	r4, r4, #0
   1421c:	rsbne	r4, r4, #1
   14220:	cmp	r4, #0
   14224:	bne	14084 <__assert_fail@plt+0x2c50>
   14228:	cmp	r6, #0
   1422c:	bne	14084 <__assert_fail@plt+0x2c50>
   14230:	ldm	sp, {r0, r1}
   14234:	adds	r4, r1, #0
   14238:	movne	r4, #1
   1423c:	cmp	r0, #0
   14240:	rsbeq	r4, r4, #0
   14244:	rsbne	r4, r4, #1
   14248:	cmp	r4, #0
   1424c:	bne	14084 <__assert_fail@plt+0x2c50>
   14250:	cmp	r0, #0
   14254:	beq	14084 <__assert_fail@plt+0x2c50>
   14258:	bl	111f4 <strcasecmp@plt>
   1425c:	mov	r4, r0
   14260:	b	14084 <__assert_fail@plt+0x2c50>
   14264:	mov	r1, ip
   14268:	bge	14090 <__assert_fail@plt+0x2c5c>
   1426c:	ldr	r1, [r1, #12]
   14270:	ldr	r3, [r1, #20]
   14274:	cmp	r0, r3
   14278:	blt	1426c <__assert_fail@plt+0x2e38>
   1427c:	mov	r0, lr
   14280:	bl	13f1c <__assert_fail@plt+0x2ae8>
   14284:	subs	r4, r0, #0
   14288:	mvneq	r4, #0
   1428c:	b	14084 <__assert_fail@plt+0x2c50>
   14290:	ldr	ip, [r1, #16]
   14294:	ldr	r4, [r0, #12]
   14298:	cmp	ip, #0
   1429c:	movne	r2, ip
   142a0:	bne	13ff4 <__assert_fail@plt+0x2bc0>
   142a4:	ldr	r3, [r1, #12]
   142a8:	b	14004 <__assert_fail@plt+0x2bd0>
   142ac:	ldr	r2, [r5, #4]
   142b0:	str	r1, [sp]
   142b4:	cmp	r2, #0
   142b8:	ldr	r3, [r5]
   142bc:	beq	14324 <__assert_fail@plt+0x2ef0>
   142c0:	mov	ip, #1
   142c4:	b	14114 <__assert_fail@plt+0x2ce0>
   142c8:	ldr	r3, [sp, #4]
   142cc:	cmp	r3, #0
   142d0:	moveq	r9, r5
   142d4:	ldrbne	r8, [r3]
   142d8:	moveq	r8, r5
   142dc:	lslne	r9, r8, #2
   142e0:	b	141ec <__assert_fail@plt+0x2db8>
   142e4:	ldr	r3, [sp]
   142e8:	cmp	r3, #0
   142ec:	moveq	r4, r6
   142f0:	ldrbne	r7, [r3]
   142f4:	moveq	r7, r6
   142f8:	lslne	r4, r7, #2
   142fc:	b	141dc <__assert_fail@plt+0x2da8>
   14300:	ldr	r3, [r3, #12]
   14304:	tst	r3, #8
   14308:	bne	14330 <__assert_fail@plt+0x2efc>
   1430c:	mov	r4, #1
   14310:	b	14084 <__assert_fail@plt+0x2c50>
   14314:	ldr	r3, [r5]
   14318:	b	14164 <__assert_fail@plt+0x2d30>
   1431c:	str	r2, [sp, #4]
   14320:	b	14194 <__assert_fail@plt+0x2d60>
   14324:	mov	r1, r2
   14328:	mov	ip, #1
   1432c:	b	14140 <__assert_fail@plt+0x2d0c>
   14330:	ldr	r3, [sp, #4]
   14334:	mov	r4, #1
   14338:	cmp	r3, #0
   1433c:	bne	1417c <__assert_fail@plt+0x2d48>
   14340:	b	14084 <__assert_fail@plt+0x2c50>
   14344:	ldrdeq	r3, [r1], -r8
   14348:	ldr	r3, [r0, #28]
   1434c:	ldr	r2, [r0, #24]
   14350:	push	{r4, r5, r6, lr}
   14354:	mov	r5, r1
   14358:	ldr	r1, [r0, #16]
   1435c:	sub	r2, r3, r2
   14360:	cmp	r2, r1
   14364:	mov	r4, r0
   14368:	movls	r2, r3
   1436c:	bhi	143c8 <__assert_fail@plt+0x2f94>
   14370:	ldr	r1, [r4, #20]
   14374:	ldr	r0, [r4, #8]
   14378:	cmp	r1, #0
   1437c:	addge	r5, r5, r1
   14380:	cmp	r5, r0
   14384:	bcc	143a8 <__assert_fail@plt+0x2f74>
   14388:	ldr	r1, [r4, #32]
   1438c:	cmp	r1, r3
   14390:	bls	143d8 <__assert_fail@plt+0x2fa4>
   14394:	add	r1, r2, #1
   14398:	mov	r3, #10
   1439c:	str	r1, [r4, #28]
   143a0:	strb	r3, [r2]
   143a4:	pop	{r4, r5, r6, pc}
   143a8:	ldr	r2, [r4, #32]
   143ac:	cmp	r2, r3
   143b0:	bls	143f4 <__assert_fail@plt+0x2fc0>
   143b4:	add	r1, r3, #1
   143b8:	mov	r2, #32
   143bc:	str	r1, [r4, #28]
   143c0:	strb	r2, [r3]
   143c4:	pop	{r4, r5, r6, pc}
   143c8:	bl	18688 <argp_parse@@Base+0x1b08>
   143cc:	ldr	r3, [r4, #28]
   143d0:	mov	r2, r3
   143d4:	b	14370 <__assert_fail@plt+0x2f3c>
   143d8:	mov	r1, #1
   143dc:	mov	r0, r4
   143e0:	bl	18d18 <argp_parse@@Base+0x2198>
   143e4:	cmp	r0, #0
   143e8:	popeq	{r4, r5, r6, pc}
   143ec:	ldr	r2, [r4, #28]
   143f0:	b	14394 <__assert_fail@plt+0x2f60>
   143f4:	mov	r1, #1
   143f8:	mov	r0, r4
   143fc:	bl	18d18 <argp_parse@@Base+0x2198>
   14400:	cmp	r0, #0
   14404:	popeq	{r4, r5, r6, pc}
   14408:	ldr	r3, [r4, #28]
   1440c:	b	143b4 <__assert_fail@plt+0x2f80>
   14410:	push	{r4, r5, r6, lr}
   14414:	ldr	r5, [r0, #8]
   14418:	ldr	r2, [r0, #12]
   1441c:	ldr	ip, [r1, #12]
   14420:	cmp	r5, #0
   14424:	orr	r2, r2, ip
   14428:	beq	14490 <__assert_fail@plt+0x305c>
   1442c:	tst	r2, #16
   14430:	bne	1446c <__assert_fail@plt+0x3038>
   14434:	tst	r2, #1
   14438:	mov	r6, r3
   1443c:	mov	r4, r0
   14440:	bne	14474 <__assert_fail@plt+0x3040>
   14444:	mov	r0, r5
   14448:	bl	112c0 <strlen@plt>
   1444c:	add	r1, r0, #6
   14450:	mov	r0, r6
   14454:	bl	14348 <__assert_fail@plt+0x2f14>
   14458:	mov	r3, r5
   1445c:	ldr	r2, [r4, #4]
   14460:	mov	r0, r6
   14464:	ldr	r1, [pc, #56]	; 144a4 <__assert_fail@plt+0x3070>
   14468:	bl	18d38 <argp_parse@@Base+0x21b8>
   1446c:	mov	r0, #0
   14470:	pop	{r4, r5, r6, pc}
   14474:	ldr	r2, [r0, #4]
   14478:	mov	r3, r5
   1447c:	mov	r0, r6
   14480:	ldr	r1, [pc, #32]	; 144a8 <__assert_fail@plt+0x3074>
   14484:	bl	18d38 <argp_parse@@Base+0x21b8>
   14488:	mov	r0, #0
   1448c:	pop	{r4, r5, r6, pc}
   14490:	ldr	r5, [r1, #8]
   14494:	cmp	r5, #0
   14498:	bne	1442c <__assert_fail@plt+0x2ff8>
   1449c:	mov	r0, #0
   144a0:	pop	{r4, r5, r6, pc}
   144a4:	andeq	sl, r1, r0, lsr #17
   144a8:	muleq	r1, r4, r8
   144ac:	mov	ip, r0
   144b0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   144b4:	mov	r8, r2
   144b8:	sub	sp, sp, #28
   144bc:	mov	r2, ip
   144c0:	ldr	ip, [ip, #16]
   144c4:	mov	r9, r1
   144c8:	ldr	r1, [r0, #8]
   144cc:	str	ip, [sp, #8]
   144d0:	ldr	ip, [r8]
   144d4:	str	r1, [sp, #16]
   144d8:	mov	r0, r1
   144dc:	mov	r4, r3
   144e0:	ldr	r1, [pc, #456]	; 146b0 <__assert_fail@plt+0x327c>
   144e4:	mov	r3, r9
   144e8:	mov	r5, ip
   144ec:	str	ip, [sp, #20]
   144f0:	ldr	r6, [sp, #64]	; 0x40
   144f4:	bl	13574 <__assert_fail@plt+0x2140>
   144f8:	subs	r3, r0, #0
   144fc:	str	r3, [sp, #12]
   14500:	beq	1465c <__assert_fail@plt+0x3228>
   14504:	mov	r1, #10
   14508:	bl	11158 <strchrnul@plt>
   1450c:	ldrb	sl, [r0]
   14510:	mov	r7, r0
   14514:	cmp	sl, #0
   14518:	bne	14618 <__assert_fail@plt+0x31e4>
   1451c:	ldr	r5, [sp, #12]
   14520:	add	r1, r7, #1
   14524:	sub	r1, r1, r5
   14528:	mov	r0, r6
   1452c:	bl	14348 <__assert_fail@plt+0x2f14>
   14530:	ldr	r0, [r6, #28]
   14534:	sub	fp, r7, r5
   14538:	ldr	r1, [r6, #32]
   1453c:	add	r2, r0, fp
   14540:	cmp	r1, r2
   14544:	bcs	14560 <__assert_fail@plt+0x312c>
   14548:	mov	r1, fp
   1454c:	mov	r0, r6
   14550:	bl	18d18 <argp_parse@@Base+0x2198>
   14554:	cmp	r0, #0
   14558:	beq	14578 <__assert_fail@plt+0x3144>
   1455c:	ldr	r0, [r6, #28]
   14560:	mov	r2, fp
   14564:	mov	r1, r5
   14568:	bl	11188 <memcpy@plt>
   1456c:	ldr	r3, [r6, #28]
   14570:	add	fp, r3, fp
   14574:	str	fp, [r6, #28]
   14578:	ldr	r3, [sp, #16]
   1457c:	ldr	r2, [sp, #12]
   14580:	cmp	r3, r2
   14584:	beq	14590 <__assert_fail@plt+0x315c>
   14588:	mov	r0, r2
   1458c:	bl	17a18 <argp_parse@@Base+0xe98>
   14590:	ldr	r3, [sp, #8]
   14594:	cmp	r3, #0
   14598:	beq	145dc <__assert_fail@plt+0x31a8>
   1459c:	ldr	r2, [r3]
   145a0:	cmp	r2, #0
   145a4:	beq	145dc <__assert_fail@plt+0x31a8>
   145a8:	ldr	r5, [sp, #8]
   145ac:	mov	r3, r4
   145b0:	mov	r0, r2
   145b4:	str	r6, [sp]
   145b8:	mov	r2, r8
   145bc:	mov	r1, r9
   145c0:	bl	144ac <__assert_fail@plt+0x3078>
   145c4:	ldr	r2, [r5, #16]!
   145c8:	cmp	r2, #0
   145cc:	clz	r3, r0
   145d0:	lsr	r3, r3, #5
   145d4:	bne	145b0 <__assert_fail@plt+0x317c>
   145d8:	mov	r4, r3
   145dc:	cmp	r4, #0
   145e0:	moveq	sl, #0
   145e4:	andne	sl, sl, #1
   145e8:	cmp	sl, #0
   145ec:	beq	1467c <__assert_fail@plt+0x3248>
   145f0:	ldrb	r0, [r7]
   145f4:	cmp	r0, #0
   145f8:	bne	1468c <__assert_fail@plt+0x3258>
   145fc:	ldr	r3, [sp, #20]
   14600:	ldrb	r4, [r3]
   14604:	cmp	r4, #0
   14608:	moveq	r0, r4
   1460c:	strbne	r0, [r3]
   14610:	add	sp, sp, #28
   14614:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14618:	ldrb	sl, [r5]
   1461c:	cmp	sl, #0
   14620:	beq	146a8 <__assert_fail@plt+0x3274>
   14624:	mov	fp, #0
   14628:	add	r5, r0, #1
   1462c:	add	fp, fp, #1
   14630:	mov	r0, r5
   14634:	mov	r1, #10
   14638:	bl	11158 <strchrnul@plt>
   1463c:	cmp	fp, sl
   14640:	bne	14628 <__assert_fail@plt+0x31f4>
   14644:	mov	r7, r0
   14648:	ldr	r2, [r8]
   1464c:	mov	sl, #1
   14650:	add	r2, r2, sl
   14654:	str	r2, [r8]
   14658:	b	14520 <__assert_fail@plt+0x30ec>
   1465c:	ldr	r3, [sp, #8]
   14660:	cmp	r3, #0
   14664:	beq	1467c <__assert_fail@plt+0x3248>
   14668:	ldr	r2, [r3]
   1466c:	cmp	r2, #0
   14670:	ldrne	r7, [sp, #12]
   14674:	movne	sl, r7
   14678:	bne	145a8 <__assert_fail@plt+0x3174>
   1467c:	clz	r0, r4
   14680:	lsr	r0, r0, #5
   14684:	add	sp, sp, #28
   14688:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1468c:	ldr	r2, [sp, #20]
   14690:	mov	r0, #1
   14694:	ldrb	r3, [r2]
   14698:	add	r3, r3, r0
   1469c:	strb	r3, [r2]
   146a0:	add	sp, sp, #28
   146a4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   146a8:	ldr	r5, [sp, #12]
   146ac:	b	14648 <__assert_fail@plt+0x3214>
   146b0:	andeq	r0, r0, #6
   146b4:	ldr	r2, [r0, #8]
   146b8:	cmp	r2, #0
   146bc:	beq	146c8 <__assert_fail@plt+0x3294>
   146c0:	mov	r0, #0
   146c4:	bx	lr
   146c8:	ldr	r2, [r1, #8]
   146cc:	cmp	r2, #0
   146d0:	bne	146c0 <__assert_fail@plt+0x328c>
   146d4:	ldr	r1, [r1, #12]
   146d8:	ldr	r2, [r0, #12]
   146dc:	orr	r2, r2, r1
   146e0:	tst	r2, #16
   146e4:	ldreq	r2, [r3]
   146e8:	ldreq	r1, [r0, #4]
   146ec:	addeq	r0, r2, #1
   146f0:	streq	r0, [r3]
   146f4:	strbeq	r1, [r2]
   146f8:	b	146c0 <__assert_fail@plt+0x328c>
   146fc:	mov	r3, r0
   14700:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14704:	sub	sp, sp, #52	; 0x34
   14708:	ldr	r2, [r3, #16]
   1470c:	str	r0, [sp, #24]
   14710:	mov	r0, #16
   14714:	ldr	r4, [r3]
   14718:	str	r1, [sp, #28]
   1471c:	str	r2, [sp, #8]
   14720:	bl	18584 <argp_parse@@Base+0x1a04>
   14724:	subs	r3, r0, #0
   14728:	str	r3, [sp, #20]
   1472c:	beq	14d90 <__assert_fail@plt+0x395c>
   14730:	ldr	r2, [sp, #20]
   14734:	mov	r3, #0
   14738:	cmp	r4, #0
   1473c:	str	r3, [r2, #4]
   14740:	str	r3, [r2, #12]
   14744:	beq	14948 <__assert_fail@plt+0x3514>
   14748:	ldr	r5, [r4, #12]
   1474c:	ands	r5, r5, #4
   14750:	bne	14da4 <__assert_fail@plt+0x3970>
   14754:	add	r6, r4, #24
   14758:	mov	r9, r5
   1475c:	mov	sl, r5
   14760:	mov	fp, r2
   14764:	b	147a8 <__assert_fail@plt+0x3374>
   14768:	ldr	r3, [r6, #-12]
   1476c:	tst	r3, #4
   14770:	addeq	r9, r9, #1
   14774:	streq	r9, [fp, #4]
   14778:	tst	r3, #8
   1477c:	bne	147a4 <__assert_fail@plt+0x3370>
   14780:	sub	r3, r8, #1
   14784:	cmp	r3, #254	; 0xfe
   14788:	bhi	147a4 <__assert_fail@plt+0x3370>
   1478c:	bl	11290 <__ctype_b_loc@plt>
   14790:	lsl	r8, r8, #1
   14794:	ldr	r3, [r0]
   14798:	ldrh	r3, [r3, r8]
   1479c:	tst	r3, #16384	; 0x4000
   147a0:	addne	sl, sl, #1
   147a4:	add	r6, r6, #24
   147a8:	ldr	r8, [r6, #-20]	; 0xffffffec
   147ac:	cmp	r8, #0
   147b0:	bne	14768 <__assert_fail@plt+0x3334>
   147b4:	ldr	r3, [r6, #-24]	; 0xffffffe8
   147b8:	cmp	r3, #0
   147bc:	bne	14768 <__assert_fail@plt+0x3334>
   147c0:	ldr	r3, [r6, #-8]
   147c4:	cmp	r3, #0
   147c8:	bne	14768 <__assert_fail@plt+0x3334>
   147cc:	ldr	r7, [r6, #-4]
   147d0:	cmp	r7, #0
   147d4:	bne	14768 <__assert_fail@plt+0x3334>
   147d8:	rsb	r9, r9, r9, lsl #3
   147dc:	lsl	r0, r9, #2
   147e0:	bl	18584 <argp_parse@@Base+0x1a04>
   147e4:	ldr	r6, [sp, #20]
   147e8:	str	r0, [r6]
   147ec:	add	r0, sl, #1
   147f0:	bl	18584 <argp_parse@@Base+0x1a04>
   147f4:	ldr	r8, [r6]
   147f8:	mov	r3, r6
   147fc:	cmp	r0, #0
   14800:	cmpne	r8, #0
   14804:	mov	sl, r0
   14808:	str	r0, [r3, #8]
   1480c:	beq	14d54 <__assert_fail@plt+0x3920>
   14810:	ldr	r2, [sp, #20]
   14814:	ldr	r3, [pc, #1436]	; 14db8 <__assert_fail@plt+0x3984>
   14818:	ldr	r2, [r2, #4]
   1481c:	cmp	r2, r3
   14820:	bhi	14d40 <__assert_fail@plt+0x390c>
   14824:	add	r8, r8, #28
   14828:	mov	r2, r8
   1482c:	ldr	r3, [r4, #4]
   14830:	mov	r8, sl
   14834:	mov	r9, r2
   14838:	cmp	r3, #0
   1483c:	bne	1484c <__assert_fail@plt+0x3418>
   14840:	ldr	r2, [r4]
   14844:	cmp	r2, #0
   14848:	beq	14cf8 <__assert_fail@plt+0x38c4>
   1484c:	str	r7, [r9, #-24]	; 0xffffffe8
   14850:	ldr	r6, [r4, #20]
   14854:	str	r4, [r9, #-28]	; 0xffffffe4
   14858:	cmp	r6, #0
   1485c:	str	sl, [r9, #-20]	; 0xffffffec
   14860:	bne	14878 <__assert_fail@plt+0x3444>
   14864:	ldr	r2, [r4]
   14868:	cmp	r2, #0
   1486c:	cmpeq	r3, #0
   14870:	movne	r6, r5
   14874:	beq	14d1c <__assert_fail@plt+0x38e8>
   14878:	ldr	r1, [sp, #28]
   1487c:	str	r6, [r9, #-16]
   14880:	mov	r5, r4
   14884:	ldr	r2, [r4, #12]
   14888:	mov	r3, r7
   1488c:	str	r1, [r9, #-12]
   14890:	ldr	r1, [sp, #24]
   14894:	str	r1, [r9, #-8]
   14898:	add	r3, r3, #1
   1489c:	tst	r2, #8
   148a0:	str	r3, [r9, #-24]	; 0xffffffe8
   148a4:	bne	14910 <__assert_fail@plt+0x34dc>
   148a8:	ldr	fp, [r4, #4]
   148ac:	sub	r3, fp, #1
   148b0:	cmp	r3, #254	; 0xfe
   148b4:	bhi	14910 <__assert_fail@plt+0x34dc>
   148b8:	bl	11290 <__ctype_b_loc@plt>
   148bc:	lsl	r3, fp, #1
   148c0:	ldr	r2, [r0]
   148c4:	ldrh	r3, [r2, r3]
   148c8:	tst	r3, #16384	; 0x4000
   148cc:	beq	14910 <__assert_fail@plt+0x34dc>
   148d0:	cmp	r8, sl
   148d4:	uxtb	r1, fp
   148d8:	bcs	14908 <__assert_fail@plt+0x34d4>
   148dc:	ldrb	r3, [r8]
   148e0:	cmp	r3, r1
   148e4:	movne	r3, r8
   148e8:	subne	r0, sl, #1
   148ec:	bne	14900 <__assert_fail@plt+0x34cc>
   148f0:	b	14910 <__assert_fail@plt+0x34dc>
   148f4:	ldrb	r2, [r3, #1]!
   148f8:	cmp	r2, r1
   148fc:	beq	14910 <__assert_fail@plt+0x34dc>
   14900:	cmp	r0, r3
   14904:	bne	148f4 <__assert_fail@plt+0x34c0>
   14908:	strb	r1, [sl]
   1490c:	add	sl, sl, #1
   14910:	ldr	r3, [r5, #28]
   14914:	add	r4, r4, #24
   14918:	cmp	r3, #0
   1491c:	bne	1492c <__assert_fail@plt+0x34f8>
   14920:	ldr	r2, [r5, #24]
   14924:	cmp	r2, #0
   14928:	beq	14cd4 <__assert_fail@plt+0x38a0>
   1492c:	ldr	r2, [r5, #36]	; 0x24
   14930:	tst	r2, #4
   14934:	beq	14cec <__assert_fail@plt+0x38b8>
   14938:	ldr	r3, [r9, #-24]	; 0xffffffe8
   1493c:	mov	r5, r4
   14940:	b	14898 <__assert_fail@plt+0x3464>
   14944:	strb	r3, [sl]
   14948:	ldr	r3, [sp, #8]
   1494c:	cmp	r3, #0
   14950:	beq	14a8c <__assert_fail@plt+0x3658>
   14954:	ldr	r3, [r3]
   14958:	cmp	r3, #0
   1495c:	beq	14a8c <__assert_fail@plt+0x3658>
   14960:	ldr	r3, [sp, #20]
   14964:	add	r3, r3, #12
   14968:	str	r3, [sp, #44]	; 0x2c
   1496c:	ldr	r3, [sp, #8]
   14970:	ldr	r5, [r3, #12]
   14974:	cmp	r5, #0
   14978:	ldrne	r6, [r3, #8]
   1497c:	bne	14990 <__assert_fail@plt+0x355c>
   14980:	ldr	r3, [sp, #8]
   14984:	ldr	r6, [r3, #8]
   14988:	cmp	r6, #0
   1498c:	beq	14cb4 <__assert_fail@plt+0x3880>
   14990:	ldr	r7, [sp, #24]
   14994:	ldr	r2, [sp, #8]
   14998:	mov	r0, #28
   1499c:	ldr	r3, [r7, #16]
   149a0:	sub	r3, r2, r3
   149a4:	asr	r4, r3, #4
   149a8:	bl	18584 <argp_parse@@Base+0x1a04>
   149ac:	subs	r1, r0, #0
   149b0:	beq	149f0 <__assert_fail@plt+0x35bc>
   149b4:	ldr	r3, [sp, #28]
   149b8:	ldr	r0, [sp, #20]
   149bc:	cmp	r3, #0
   149c0:	str	r3, [r1, #12]
   149c4:	ldrne	r3, [r3, #20]
   149c8:	ldr	r2, [r0, #12]
   149cc:	addne	r3, r3, #1
   149d0:	moveq	r3, #0
   149d4:	str	r5, [r1, #8]
   149d8:	str	r6, [r1]
   149dc:	str	r4, [r1, #4]
   149e0:	str	r7, [r1, #16]
   149e4:	str	r3, [r1, #20]
   149e8:	str	r2, [r1, #24]
   149ec:	str	r1, [r0, #12]
   149f0:	ldr	r3, [sp, #8]
   149f4:	ldr	r0, [r3]
   149f8:	bl	146fc <__assert_fail@plt+0x32c8>
   149fc:	ldr	r3, [sp, #20]
   14a00:	ldr	r2, [r3, #12]
   14a04:	cmp	r2, #0
   14a08:	str	r0, [sp, #16]
   14a0c:	bne	14a18 <__assert_fail@plt+0x35e4>
   14a10:	b	14cbc <__assert_fail@plt+0x3888>
   14a14:	mov	r2, r3
   14a18:	ldr	r3, [r2, #24]
   14a1c:	cmp	r3, #0
   14a20:	bne	14a14 <__assert_fail@plt+0x35e0>
   14a24:	add	r2, r2, #24
   14a28:	ldr	r0, [sp, #16]
   14a2c:	mov	ip, r0
   14a30:	ldr	r3, [r0, #4]
   14a34:	ldr	r1, [r0, #12]
   14a38:	cmp	r3, #0
   14a3c:	str	r1, [r2]
   14a40:	mov	r2, #0
   14a44:	str	r2, [r0, #12]
   14a48:	beq	14a70 <__assert_fail@plt+0x363c>
   14a4c:	ldr	lr, [sp, #20]
   14a50:	ldr	r2, [lr, #4]
   14a54:	cmp	r2, #0
   14a58:	bne	14a98 <__assert_fail@plt+0x3664>
   14a5c:	ldr	r0, [r0]
   14a60:	ldr	r1, [ip, #8]
   14a64:	stm	lr, {r0, r3}
   14a68:	str	r1, [lr, #8]
   14a6c:	str	r2, [ip, #4]
   14a70:	ldr	r0, [sp, #16]
   14a74:	bl	13494 <__assert_fail@plt+0x2060>
   14a78:	ldr	r2, [sp, #8]
   14a7c:	ldr	r3, [r2, #16]!
   14a80:	cmp	r3, #0
   14a84:	str	r2, [sp, #8]
   14a88:	bne	1496c <__assert_fail@plt+0x3538>
   14a8c:	ldr	r0, [sp, #20]
   14a90:	add	sp, sp, #52	; 0x34
   14a94:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14a98:	add	r3, r3, r2
   14a9c:	str	r3, [sp, #36]	; 0x24
   14aa0:	rsb	r0, r3, r3, lsl #3
   14aa4:	lsl	r0, r0, #2
   14aa8:	bl	18584 <argp_parse@@Base+0x1a04>
   14aac:	ldr	r3, [sp, #20]
   14ab0:	mov	r4, r0
   14ab4:	str	r0, [sp, #32]
   14ab8:	ldr	r0, [r3, #8]
   14abc:	bl	112c0 <strlen@plt>
   14ac0:	ldr	r3, [sp, #16]
   14ac4:	mov	r8, r0
   14ac8:	ldr	r0, [r3, #8]
   14acc:	bl	112c0 <strlen@plt>
   14ad0:	add	r0, r8, r0
   14ad4:	add	r0, r0, #1
   14ad8:	bl	18584 <argp_parse@@Base+0x1a04>
   14adc:	cmp	r4, #0
   14ae0:	cmpne	r0, #0
   14ae4:	mov	r7, r0
   14ae8:	beq	14d68 <__assert_fail@plt+0x3934>
   14aec:	ldr	r3, [sp, #36]	; 0x24
   14af0:	ldr	r2, [pc, #704]	; 14db8 <__assert_fail@plt+0x3984>
   14af4:	cmp	r3, r2
   14af8:	bhi	14d7c <__assert_fail@plt+0x3948>
   14afc:	ldr	r5, [sp, #20]
   14b00:	ldr	r9, [sp, #32]
   14b04:	ldm	r5, {r3, r4}
   14b08:	mov	r0, r9
   14b0c:	rsb	r6, r4, r4, lsl #3
   14b10:	mov	r1, r3
   14b14:	lsl	r6, r6, #2
   14b18:	mov	r2, r6
   14b1c:	str	r3, [sp, #40]	; 0x28
   14b20:	bl	11284 <mempcpy@plt>
   14b24:	ldr	r3, [sp, #16]
   14b28:	ldr	r1, [r3, #4]
   14b2c:	mov	ip, r1
   14b30:	str	r1, [sp, #4]
   14b34:	rsb	r2, ip, ip, lsl #3
   14b38:	ldr	r1, [r3]
   14b3c:	lsl	r2, r2, #2
   14b40:	bl	11188 <memcpy@plt>
   14b44:	ldr	r5, [r5, #8]
   14b48:	mov	r2, r8
   14b4c:	mov	r1, r5
   14b50:	mov	r0, r7
   14b54:	bl	11188 <memcpy@plt>
   14b58:	cmp	r4, #0
   14b5c:	beq	14ccc <__assert_fail@plt+0x3898>
   14b60:	mov	r2, r9
   14b64:	ldr	r3, [r2, #8]
   14b68:	subs	r4, r4, #1
   14b6c:	sub	r3, r3, r5
   14b70:	add	r3, r7, r3
   14b74:	str	r3, [r2, #8]
   14b78:	add	r2, r2, #28
   14b7c:	bne	14b64 <__assert_fail@plt+0x3730>
   14b80:	ldr	r3, [sp, #32]
   14b84:	add	r1, r3, r6
   14b88:	ldr	r3, [sp, #4]
   14b8c:	ldr	r2, [sp, #16]
   14b90:	cmp	r3, #0
   14b94:	add	r3, r7, r8
   14b98:	str	r3, [sp, #12]
   14b9c:	ldr	sl, [r2, #8]
   14ba0:	beq	14cc4 <__assert_fail@plt+0x3890>
   14ba4:	sub	r8, r3, #1
   14ba8:	add	fp, r1, #28
   14bac:	mov	r9, r3
   14bb0:	mov	r3, r8
   14bb4:	mov	r8, fp
   14bb8:	mov	fp, sl
   14bbc:	mov	sl, r3
   14bc0:	ldr	r5, [r8, #-24]	; 0xffffffe8
   14bc4:	str	r9, [r8, #-20]	; 0xffffffec
   14bc8:	cmp	r5, #0
   14bcc:	ldr	r4, [r8, #-28]	; 0xffffffe4
   14bd0:	bne	14be4 <__assert_fail@plt+0x37b0>
   14bd4:	b	14c70 <__assert_fail@plt+0x383c>
   14bd8:	subs	r5, r5, #1
   14bdc:	add	r4, r4, #24
   14be0:	beq	14c70 <__assert_fail@plt+0x383c>
   14be4:	ldr	r3, [r4, #12]
   14be8:	tst	r3, #8
   14bec:	bne	14bd8 <__assert_fail@plt+0x37a4>
   14bf0:	ldr	r6, [r4, #4]
   14bf4:	sub	r3, r6, #1
   14bf8:	cmp	r3, #254	; 0xfe
   14bfc:	bhi	14bd8 <__assert_fail@plt+0x37a4>
   14c00:	bl	11290 <__ctype_b_loc@plt>
   14c04:	lsl	r3, r6, #1
   14c08:	ldr	r2, [r0]
   14c0c:	ldrh	r3, [r2, r3]
   14c10:	tst	r3, #16384	; 0x4000
   14c14:	beq	14bd8 <__assert_fail@plt+0x37a4>
   14c18:	ldrb	r1, [fp]
   14c1c:	cmp	r1, r6
   14c20:	bne	14bd8 <__assert_fail@plt+0x37a4>
   14c24:	ldr	r3, [sp, #12]
   14c28:	cmp	r7, r3
   14c2c:	bcs	14c58 <__assert_fail@plt+0x3824>
   14c30:	ldrb	r3, [r7]
   14c34:	cmp	r3, r1
   14c38:	movne	r3, r7
   14c3c:	bne	14c50 <__assert_fail@plt+0x381c>
   14c40:	b	14c60 <__assert_fail@plt+0x382c>
   14c44:	ldrb	r2, [r3, #1]!
   14c48:	cmp	r2, r1
   14c4c:	beq	14c60 <__assert_fail@plt+0x382c>
   14c50:	cmp	sl, r3
   14c54:	bne	14c44 <__assert_fail@plt+0x3810>
   14c58:	strb	r1, [r9]
   14c5c:	add	r9, r9, #1
   14c60:	subs	r5, r5, #1
   14c64:	add	fp, fp, #1
   14c68:	add	r4, r4, #24
   14c6c:	bne	14be4 <__assert_fail@plt+0x37b0>
   14c70:	ldr	r3, [sp, #4]
   14c74:	add	r8, r8, #28
   14c78:	subs	r3, r3, #1
   14c7c:	str	r3, [sp, #4]
   14c80:	bne	14bc0 <__assert_fail@plt+0x378c>
   14c84:	mov	r3, #0
   14c88:	strb	r3, [r9]
   14c8c:	ldr	r0, [sp, #40]	; 0x28
   14c90:	bl	17a18 <argp_parse@@Base+0xe98>
   14c94:	ldr	r4, [sp, #20]
   14c98:	ldr	r0, [r4, #8]
   14c9c:	bl	17a18 <argp_parse@@Base+0xe98>
   14ca0:	ldr	r2, [sp, #32]
   14ca4:	str	r2, [r4]
   14ca8:	ldr	r2, [sp, #36]	; 0x24
   14cac:	stmib	r4, {r2, r7}
   14cb0:	b	14a70 <__assert_fail@plt+0x363c>
   14cb4:	ldr	r1, [sp, #28]
   14cb8:	b	149f0 <__assert_fail@plt+0x35bc>
   14cbc:	ldr	r2, [sp, #44]	; 0x2c
   14cc0:	b	14a28 <__assert_fail@plt+0x35f4>
   14cc4:	ldr	r9, [sp, #12]
   14cc8:	b	14c84 <__assert_fail@plt+0x3850>
   14ccc:	ldr	r1, [sp, #32]
   14cd0:	b	14b88 <__assert_fail@plt+0x3754>
   14cd4:	ldr	r2, [r5, #40]	; 0x28
   14cd8:	cmp	r2, #0
   14cdc:	bne	1492c <__assert_fail@plt+0x34f8>
   14ce0:	ldr	r2, [r5, #44]	; 0x2c
   14ce4:	cmp	r2, #0
   14ce8:	bne	1492c <__assert_fail@plt+0x34f8>
   14cec:	add	r9, r9, #28
   14cf0:	mov	r5, r6
   14cf4:	b	14838 <__assert_fail@plt+0x3404>
   14cf8:	ldr	r2, [r4, #16]
   14cfc:	cmp	r2, #0
   14d00:	beq	14d24 <__assert_fail@plt+0x38f0>
   14d04:	str	r3, [r9, #-24]	; 0xffffffe8
   14d08:	ldr	r6, [r4, #20]
   14d0c:	str	r4, [r9, #-28]	; 0xffffffe4
   14d10:	cmp	r6, #0
   14d14:	str	sl, [r9, #-20]	; 0xffffffec
   14d18:	bne	14878 <__assert_fail@plt+0x3444>
   14d1c:	add	r6, r5, #1
   14d20:	b	14878 <__assert_fail@plt+0x3444>
   14d24:	ldr	r6, [r4, #20]
   14d28:	cmp	r6, #0
   14d2c:	beq	14944 <__assert_fail@plt+0x3510>
   14d30:	str	r4, [r9, #-28]	; 0xffffffe4
   14d34:	str	r3, [r9, #-24]	; 0xffffffe8
   14d38:	str	sl, [r9, #-20]	; 0xffffffec
   14d3c:	b	14878 <__assert_fail@plt+0x3444>
   14d40:	ldr	r3, [pc, #116]	; 14dbc <__assert_fail@plt+0x3988>
   14d44:	mov	r2, #476	; 0x1dc
   14d48:	ldr	r1, [pc, #112]	; 14dc0 <__assert_fail@plt+0x398c>
   14d4c:	ldr	r0, [pc, #112]	; 14dc4 <__assert_fail@plt+0x3990>
   14d50:	bl	11434 <__assert_fail@plt>
   14d54:	ldr	r3, [pc, #96]	; 14dbc <__assert_fail@plt+0x3988>
   14d58:	ldr	r2, [pc, #104]	; 14dc8 <__assert_fail@plt+0x3994>
   14d5c:	ldr	r1, [pc, #92]	; 14dc0 <__assert_fail@plt+0x398c>
   14d60:	ldr	r0, [pc, #100]	; 14dcc <__assert_fail@plt+0x3998>
   14d64:	bl	11434 <__assert_fail@plt>
   14d68:	ldr	r3, [pc, #96]	; 14dd0 <__assert_fail@plt+0x399c>
   14d6c:	ldr	r2, [pc, #96]	; 14dd4 <__assert_fail@plt+0x39a0>
   14d70:	ldr	r1, [pc, #72]	; 14dc0 <__assert_fail@plt+0x398c>
   14d74:	ldr	r0, [pc, #92]	; 14dd8 <__assert_fail@plt+0x39a4>
   14d78:	bl	11434 <__assert_fail@plt>
   14d7c:	ldr	r3, [pc, #76]	; 14dd0 <__assert_fail@plt+0x399c>
   14d80:	mov	r2, #972	; 0x3cc
   14d84:	ldr	r1, [pc, #52]	; 14dc0 <__assert_fail@plt+0x398c>
   14d88:	ldr	r0, [pc, #76]	; 14ddc <__assert_fail@plt+0x39a8>
   14d8c:	bl	11434 <__assert_fail@plt>
   14d90:	ldr	r3, [pc, #36]	; 14dbc <__assert_fail@plt+0x3988>
   14d94:	ldr	r2, [pc, #68]	; 14de0 <__assert_fail@plt+0x39ac>
   14d98:	ldr	r1, [pc, #32]	; 14dc0 <__assert_fail@plt+0x398c>
   14d9c:	ldr	r0, [pc, #64]	; 14de4 <__assert_fail@plt+0x39b0>
   14da0:	bl	11434 <__assert_fail@plt>
   14da4:	ldr	r3, [pc, #16]	; 14dbc <__assert_fail@plt+0x3988>
   14da8:	mov	r2, #460	; 0x1cc
   14dac:	ldr	r1, [pc, #12]	; 14dc0 <__assert_fail@plt+0x398c>
   14db0:	ldr	r0, [pc, #48]	; 14de8 <__assert_fail@plt+0x39b4>
   14db4:	bl	11434 <__assert_fail@plt>
   14db8:	stmdbeq	r4!, {r0, r3, r6, r9, ip, pc}
   14dbc:	andeq	sl, r1, ip, ror #15
   14dc0:	andeq	sl, r1, ip, lsr #17
   14dc4:	strdeq	sl, [r1], -r0
   14dc8:	ldrdeq	r0, [r0], -sl
   14dcc:	andeq	sl, r1, ip, asr #17
   14dd0:	strdeq	sl, [r1], -r8
   14dd4:	andeq	r0, r0, sl, asr #7
   14dd8:	andeq	sl, r1, ip, lsr #18
   14ddc:	andeq	sl, r1, r8, asr #18
   14de0:	andeq	r0, r0, r2, asr #3
   14de4:			; <UNDEFINED> instruction: 0x0001a8b8
   14de8:			; <UNDEFINED> instruction: 0x0001a8bc
   14dec:	cmp	r1, #0
   14df0:	push	{r4, r5, r6, r7, r8, lr}
   14df4:	beq	14e6c <__assert_fail@plt+0x3a38>
   14df8:	sub	r7, r1, #1
   14dfc:	mov	r8, r2
   14e00:	mov	r6, r0
   14e04:	ldm	r6, {r4, r5}
   14e08:	cmp	r5, #0
   14e0c:	sub	r5, r5, #1
   14e10:	beq	14e50 <__assert_fail@plt+0x3a1c>
   14e14:	add	r4, r4, #24
   14e18:	ldr	r3, [r4, #-24]	; 0xffffffe8
   14e1c:	mov	r1, r8
   14e20:	subs	r0, r3, #0
   14e24:	sub	r5, r5, #1
   14e28:	beq	14e44 <__assert_fail@plt+0x3a10>
   14e2c:	ldr	r3, [r4, #-12]
   14e30:	tst	r3, #2
   14e34:	bne	14e44 <__assert_fail@plt+0x3a10>
   14e38:	bl	11104 <strcmp@plt>
   14e3c:	cmp	r0, #0
   14e40:	beq	14e64 <__assert_fail@plt+0x3a30>
   14e44:	cmn	r5, #1
   14e48:	add	r4, r4, #24
   14e4c:	bne	14e18 <__assert_fail@plt+0x39e4>
   14e50:	sub	r7, r7, #1
   14e54:	cmn	r7, #1
   14e58:	add	r6, r6, #28
   14e5c:	bne	14e04 <__assert_fail@plt+0x39d0>
   14e60:	mov	r6, #0
   14e64:	mov	r0, r6
   14e68:	pop	{r4, r5, r6, r7, r8, pc}
   14e6c:	mov	r6, r1
   14e70:	b	14e64 <__assert_fail@plt+0x3a30>
   14e74:	push	{r4, r5, r6, lr}
   14e78:	subs	r4, r0, #0
   14e7c:	mov	r5, r1
   14e80:	beq	14e94 <__assert_fail@plt+0x3a60>
   14e84:	mov	r1, #10
   14e88:	bl	112cc <strchr@plt>
   14e8c:	adds	r4, r0, #0
   14e90:	movne	r4, #1
   14e94:	cmp	r5, #0
   14e98:	beq	14ec4 <__assert_fail@plt+0x3a90>
   14e9c:	ldr	r3, [r5]
   14ea0:	cmp	r3, #0
   14ea4:	beq	14ec4 <__assert_fail@plt+0x3a90>
   14ea8:	ldr	r1, [r3, #16]
   14eac:	ldr	r0, [r3, #8]
   14eb0:	bl	14e74 <__assert_fail@plt+0x3a40>
   14eb4:	ldr	r3, [r5, #16]!
   14eb8:	cmp	r3, #0
   14ebc:	add	r4, r4, r0
   14ec0:	bne	14ea8 <__assert_fail@plt+0x3a74>
   14ec4:	mov	r0, r4
   14ec8:	pop	{r4, r5, r6, pc}
   14ecc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14ed0:	add	fp, sp, #32
   14ed4:	sub	sp, sp, #12
   14ed8:	ldr	r5, [r0, #4]
   14edc:	cmp	r5, #0
   14ee0:	bne	14eec <__assert_fail@plt+0x3ab8>
   14ee4:	sub	sp, fp, #32
   14ee8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14eec:	mov	r6, r0
   14ef0:	ldr	r0, [r0, #8]
   14ef4:	mov	r9, r1
   14ef8:	bl	112c0 <strlen@plt>
   14efc:	ldr	r8, [pc, #360]	; 1506c <__assert_fail@plt+0x3c38>
   14f00:	ldr	r4, [r6]
   14f04:	sub	r7, fp, #36	; 0x24
   14f08:	add	r3, r0, #15
   14f0c:	bic	r3, r3, #7
   14f10:	sub	sp, sp, r3
   14f14:	mov	sl, sp
   14f18:	str	sp, [r7, #-4]!
   14f1c:	ldr	r2, [r4, #20]
   14f20:	mov	r0, r4
   14f24:	mov	r3, r7
   14f28:	mov	r1, r8
   14f2c:	ldr	r2, [r2, #24]
   14f30:	bl	132e0 <__assert_fail@plt+0x1eac>
   14f34:	subs	r5, r5, #1
   14f38:	add	r4, r4, #28
   14f3c:	bne	14f1c <__assert_fail@plt+0x3ae8>
   14f40:	ldr	r3, [fp, #-40]	; 0xffffffd8
   14f44:	cmp	sl, r3
   14f48:	bcc	1504c <__assert_fail@plt+0x3c18>
   14f4c:	ldm	r6, {r4, r5}
   14f50:	cmp	r5, #0
   14f54:	beq	14ee4 <__assert_fail@plt+0x3ab0>
   14f58:	ldr	r7, [pc, #272]	; 15070 <__assert_fail@plt+0x3c3c>
   14f5c:	ldr	r2, [r4, #20]
   14f60:	mov	r0, r4
   14f64:	mov	r3, r9
   14f68:	mov	r1, r7
   14f6c:	ldr	r2, [r2, #24]
   14f70:	bl	132e0 <__assert_fail@plt+0x1eac>
   14f74:	subs	r5, r5, #1
   14f78:	add	r4, r4, #28
   14f7c:	bne	14f5c <__assert_fail@plt+0x3b28>
   14f80:	ldm	r6, {r7, r8}
   14f84:	cmp	r8, #0
   14f88:	beq	14ee4 <__assert_fail@plt+0x3ab0>
   14f8c:	ldr	sl, [pc, #224]	; 15074 <__assert_fail@plt+0x3c40>
   14f90:	add	r7, r7, #28
   14f94:	ldr	r5, [r7, #-24]	; 0xffffffe8
   14f98:	ldr	r4, [r7, #-28]	; 0xffffffe4
   14f9c:	cmp	r5, #0
   14fa0:	movne	r6, r4
   14fa4:	bne	14fb8 <__assert_fail@plt+0x3b84>
   14fa8:	b	15014 <__assert_fail@plt+0x3be0>
   14fac:	subs	r5, r5, #1
   14fb0:	add	r4, r4, #24
   14fb4:	beq	15014 <__assert_fail@plt+0x3be0>
   14fb8:	ldr	r2, [r4]
   14fbc:	cmp	r2, #0
   14fc0:	beq	14fac <__assert_fail@plt+0x3b78>
   14fc4:	ldr	r1, [r4, #12]
   14fc8:	tst	r1, #4
   14fcc:	moveq	r6, r4
   14fd0:	tst	r1, #2
   14fd4:	bne	14fac <__assert_fail@plt+0x3b78>
   14fd8:	ldr	r3, [r4, #8]
   14fdc:	ldr	r0, [r6, #12]
   14fe0:	cmp	r3, #0
   14fe4:	orr	r1, r1, r0
   14fe8:	beq	15028 <__assert_fail@plt+0x3bf4>
   14fec:	tst	r1, #16
   14ff0:	bne	14fac <__assert_fail@plt+0x3b78>
   14ff4:	tst	r1, #1
   14ff8:	moveq	r1, sl
   14ffc:	ldrne	r1, [pc, #116]	; 15078 <__assert_fail@plt+0x3c44>
   15000:	mov	r0, r9
   15004:	bl	18d38 <argp_parse@@Base+0x21b8>
   15008:	subs	r5, r5, #1
   1500c:	add	r4, r4, #24
   15010:	bne	14fb8 <__assert_fail@plt+0x3b84>
   15014:	subs	r8, r8, #1
   15018:	add	r7, r7, #28
   1501c:	bne	14f94 <__assert_fail@plt+0x3b60>
   15020:	sub	sp, fp, #32
   15024:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15028:	tst	r1, #16
   1502c:	bne	14fac <__assert_fail@plt+0x3b78>
   15030:	ldr	r3, [r6, #8]
   15034:	cmp	r3, #0
   15038:	bne	14ff4 <__assert_fail@plt+0x3bc0>
   1503c:	ldr	r1, [pc, #56]	; 1507c <__assert_fail@plt+0x3c48>
   15040:	mov	r0, r9
   15044:	bl	18d38 <argp_parse@@Base+0x21b8>
   15048:	b	14fac <__assert_fail@plt+0x3b78>
   1504c:	add	r1, r3, #1
   15050:	str	r1, [fp, #-40]	; 0xffffffd8
   15054:	mov	r2, sl
   15058:	ldr	r1, [pc, #32]	; 15080 <__assert_fail@plt+0x3c4c>
   1505c:	strb	r5, [r3]
   15060:	mov	r0, r9
   15064:	bl	18d38 <argp_parse@@Base+0x21b8>
   15068:	b	14f4c <__assert_fail@plt+0x3b18>
   1506c:			; <UNDEFINED> instruction: 0x000146b4
   15070:	andeq	r4, r1, r0, lsl r4
   15074:	muleq	r1, r4, r9
   15078:	andeq	sl, r1, r4, lsl #19
   1507c:	andeq	sl, r1, r0, lsr #19
   15080:	andeq	sl, r1, ip, ror r9

00015084 <argp_failure@@Base>:
   15084:	push	{r3}		; (str r3, [sp, #-4]!)
   15088:	push	{r4, r5, r6, r7, lr}
   1508c:	subs	r5, r0, #0
   15090:	sub	sp, sp, #200	; 0xc8
   15094:	mov	r7, r1
   15098:	mov	r6, r2
   1509c:	beq	151ec <argp_failure@@Base+0x168>
   150a0:	ldr	r3, [r5, #16]
   150a4:	tst	r3, #2
   150a8:	bne	151dc <argp_failure@@Base+0x158>
   150ac:	ldr	r4, [r5, #44]	; 0x2c
   150b0:	cmp	r4, #0
   150b4:	beq	151dc <argp_failure@@Base+0x158>
   150b8:	mov	r0, r4
   150bc:	bl	113b0 <flockfile@plt>
   150c0:	ldr	r0, [r5, #40]	; 0x28
   150c4:	mov	r1, r4
   150c8:	bl	110e0 <fputs_unlocked@plt>
   150cc:	ldr	r3, [sp, #220]	; 0xdc
   150d0:	cmp	r3, #0
   150d4:	beq	15130 <argp_failure@@Base+0xac>
   150d8:	ldr	r3, [r4, #20]
   150dc:	ldr	r1, [r4, #24]
   150e0:	add	r2, sp, #224	; 0xe0
   150e4:	cmp	r3, r1
   150e8:	str	r2, [sp]
   150ec:	addcc	r1, r3, #1
   150f0:	movcc	r2, #58	; 0x3a
   150f4:	strcc	r1, [r4, #20]
   150f8:	strbcc	r2, [r3]
   150fc:	bcs	15238 <argp_failure@@Base+0x1b4>
   15100:	ldr	r3, [r4, #20]
   15104:	ldr	r2, [r4, #24]
   15108:	cmp	r3, r2
   1510c:	addcc	r1, r3, #1
   15110:	movcc	r2, #32
   15114:	strcc	r1, [r4, #20]
   15118:	strbcc	r2, [r3]
   1511c:	bcs	15228 <argp_failure@@Base+0x1a4>
   15120:	ldr	r2, [sp]
   15124:	ldr	r1, [sp, #220]	; 0xdc
   15128:	mov	r0, r4
   1512c:	bl	11374 <vfprintf@plt>
   15130:	cmp	r6, #0
   15134:	beq	15198 <argp_failure@@Base+0x114>
   15138:	ldr	r3, [r4, #20]
   1513c:	ldr	r2, [r4, #24]
   15140:	cmp	r3, r2
   15144:	addcc	r1, r3, #1
   15148:	movcc	r2, #58	; 0x3a
   1514c:	strcc	r1, [r4, #20]
   15150:	strbcc	r2, [r3]
   15154:	bcs	15258 <argp_failure@@Base+0x1d4>
   15158:	ldr	r3, [r4, #20]
   1515c:	ldr	r2, [r4, #24]
   15160:	cmp	r3, r2
   15164:	addcc	r1, r3, #1
   15168:	movcc	r2, #32
   1516c:	strcc	r1, [r4, #20]
   15170:	strbcc	r2, [r3]
   15174:	bcs	15248 <argp_failure@@Base+0x1c4>
   15178:	mov	r2, #200	; 0xc8
   1517c:	mov	r1, sp
   15180:	mov	r0, r6
   15184:	bl	112fc <strerror_r@plt>
   15188:	cmp	r0, #0
   1518c:	beq	15268 <argp_failure@@Base+0x1e4>
   15190:	mov	r1, r4
   15194:	bl	110e0 <fputs_unlocked@plt>
   15198:	ldr	r3, [r4, #20]
   1519c:	ldr	r2, [r4, #24]
   151a0:	cmp	r3, r2
   151a4:	addcc	r1, r3, #1
   151a8:	movcc	r2, #10
   151ac:	strcc	r1, [r4, #20]
   151b0:	strbcc	r2, [r3]
   151b4:	bcs	15210 <argp_failure@@Base+0x18c>
   151b8:	mov	r0, r4
   151bc:	bl	11200 <funlockfile@plt>
   151c0:	cmp	r7, #0
   151c4:	beq	151dc <argp_failure@@Base+0x158>
   151c8:	cmp	r5, #0
   151cc:	beq	15220 <argp_failure@@Base+0x19c>
   151d0:	ldr	r3, [r5, #16]
   151d4:	tst	r3, #32
   151d8:	beq	15220 <argp_failure@@Base+0x19c>
   151dc:	add	sp, sp, #200	; 0xc8
   151e0:	pop	{r4, r5, r6, r7, lr}
   151e4:	add	sp, sp, #4
   151e8:	bx	lr
   151ec:	ldr	r3, [pc, #140]	; 15280 <argp_failure@@Base+0x1fc>
   151f0:	ldr	r4, [r3]
   151f4:	cmp	r4, #0
   151f8:	beq	151dc <argp_failure@@Base+0x158>
   151fc:	mov	r0, r4
   15200:	bl	113b0 <flockfile@plt>
   15204:	ldr	r3, [pc, #120]	; 15284 <argp_failure@@Base+0x200>
   15208:	ldr	r0, [r3]
   1520c:	b	150c4 <argp_failure@@Base+0x40>
   15210:	mov	r1, #10
   15214:	mov	r0, r4
   15218:	bl	11344 <__overflow@plt>
   1521c:	b	151b8 <argp_failure@@Base+0x134>
   15220:	mov	r0, r7
   15224:	bl	112a8 <exit@plt>
   15228:	mov	r1, #32
   1522c:	mov	r0, r4
   15230:	bl	11344 <__overflow@plt>
   15234:	b	15120 <argp_failure@@Base+0x9c>
   15238:	mov	r1, #58	; 0x3a
   1523c:	mov	r0, r4
   15240:	bl	11344 <__overflow@plt>
   15244:	b	15100 <argp_failure@@Base+0x7c>
   15248:	mov	r1, #32
   1524c:	mov	r0, r4
   15250:	bl	11344 <__overflow@plt>
   15254:	b	15178 <argp_failure@@Base+0xf4>
   15258:	mov	r1, #58	; 0x3a
   1525c:	mov	r0, r4
   15260:	bl	11344 <__overflow@plt>
   15264:	b	15158 <argp_failure@@Base+0xd4>
   15268:	mov	r0, r6
   1526c:	bl	11260 <strerror@plt>
   15270:	ldr	r3, [pc, #16]	; 15288 <argp_failure@@Base+0x204>
   15274:	cmp	r0, #0
   15278:	moveq	r0, r3
   1527c:	b	15190 <argp_failure@@Base+0x10c>
   15280:	ldrdeq	ip, [r2], -r8
   15284:	ldrdeq	ip, [r2], -r0
   15288:	andeq	sl, r1, r8, lsr #19
   1528c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15290:	add	fp, sp, #32
   15294:	cmp	r2, #0
   15298:	sub	sp, sp, #116	; 0x74
   1529c:	str	r2, [fp, #-132]	; 0xffffff7c
   152a0:	str	r0, [fp, #-112]	; 0xffffff90
   152a4:	str	r1, [fp, #-104]	; 0xffffff98
   152a8:	str	r3, [fp, #-96]	; 0xffffffa0
   152ac:	beq	15364 <argp_failure@@Base+0x2e0>
   152b0:	ldr	sl, [pc, #4064]	; 16298 <argp_failure@@Base+0x1214>
   152b4:	mov	r0, r2
   152b8:	bl	113b0 <flockfile@plt>
   152bc:	ldr	r3, [sl, #36]	; 0x24
   152c0:	cmp	r3, #0
   152c4:	str	r3, [fp, #-108]	; 0xffffff94
   152c8:	beq	15814 <argp_failure@@Base+0x790>
   152cc:	mov	r3, #0
   152d0:	mov	r1, r3
   152d4:	ldr	r2, [sl, #32]
   152d8:	ldr	r0, [fp, #-132]	; 0xffffff7c
   152dc:	bl	1860c <argp_parse@@Base+0x1a8c>
   152e0:	subs	r9, r0, #0
   152e4:	beq	16358 <argp_failure@@Base+0x12d4>
   152e8:	ldr	r3, [fp, #-96]	; 0xffffffa0
   152ec:	ands	r3, r3, #11
   152f0:	streq	r3, [fp, #-136]	; 0xffffff78
   152f4:	bne	15c70 <argp_failure@@Base+0xbec>
   152f8:	ldr	r3, [fp, #-96]	; 0xffffffa0
   152fc:	ands	r4, r3, #3
   15300:	bne	15a64 <argp_failure@@Base+0x9e0>
   15304:	ldr	r3, [fp, #-96]	; 0xffffffa0
   15308:	tst	r3, #16
   1530c:	bne	15a40 <argp_failure@@Base+0x9bc>
   15310:	ldr	r3, [fp, #-96]	; 0xffffffa0
   15314:	tst	r3, #4
   15318:	bne	15a24 <argp_failure@@Base+0x9a0>
   1531c:	ldr	r3, [fp, #-96]	; 0xffffffa0
   15320:	tst	r3, #8
   15324:	bne	153b8 <argp_failure@@Base+0x334>
   15328:	ldr	r3, [fp, #-96]	; 0xffffffa0
   1532c:	tst	r3, #32
   15330:	bne	157ec <argp_failure@@Base+0x768>
   15334:	ldr	r3, [fp, #-96]	; 0xffffffa0
   15338:	tst	r3, #64	; 0x40
   1533c:	bne	1536c <argp_failure@@Base+0x2e8>
   15340:	ldr	r0, [fp, #-132]	; 0xffffff7c
   15344:	bl	11200 <funlockfile@plt>
   15348:	ldr	r3, [fp, #-136]	; 0xffffff78
   1534c:	cmp	r3, #0
   15350:	beq	1535c <argp_failure@@Base+0x2d8>
   15354:	mov	r0, r3
   15358:	bl	13494 <__assert_fail@plt+0x2060>
   1535c:	mov	r0, r9
   15360:	bl	18bf8 <argp_parse@@Base+0x2078>
   15364:	sub	sp, fp, #32
   15368:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1536c:	ldr	r5, [pc, #3880]	; 1629c <argp_failure@@Base+0x1218>
   15370:	ldr	r2, [r5]
   15374:	cmp	r2, #0
   15378:	beq	15340 <argp_failure@@Base+0x2bc>
   1537c:	cmp	r4, #0
   15380:	beq	153a8 <argp_failure@@Base+0x324>
   15384:	ldr	r3, [r9, #28]
   15388:	ldr	r2, [r9, #32]
   1538c:	cmp	r3, r2
   15390:	bcs	1633c <argp_failure@@Base+0x12b8>
   15394:	add	r1, r3, #1
   15398:	mov	r2, #10
   1539c:	str	r1, [r9, #28]
   153a0:	strb	r2, [r3]
   153a4:	ldr	r2, [r5]
   153a8:	ldr	r1, [pc, #3824]	; 162a0 <argp_failure@@Base+0x121c>
   153ac:	mov	r0, r9
   153b0:	bl	18d38 <argp_parse@@Base+0x21b8>
   153b4:	b	15340 <argp_failure@@Base+0x2bc>
   153b8:	ldr	r3, [fp, #-136]	; 0xffffff78
   153bc:	ldr	r3, [r3, #4]
   153c0:	cmp	r3, #0
   153c4:	str	r3, [fp, #-108]	; 0xffffff94
   153c8:	beq	15328 <argp_failure@@Base+0x2a4>
   153cc:	cmp	r4, #0
   153d0:	beq	161ec <argp_failure@@Base+0x1168>
   153d4:	ldr	r3, [r9, #28]
   153d8:	ldr	r2, [r9, #32]
   153dc:	cmp	r3, r2
   153e0:	bcs	16390 <argp_failure@@Base+0x130c>
   153e4:	add	r1, r3, #1
   153e8:	mov	r2, #10
   153ec:	str	r1, [r9, #28]
   153f0:	strb	r2, [r3]
   153f4:	ldr	r3, [fp, #-136]	; 0xffffff78
   153f8:	ldr	r2, [fp, #-136]	; 0xffffff78
   153fc:	ldr	r3, [r3, #4]
   15400:	ldr	r8, [r2]
   15404:	str	r3, [fp, #-108]	; 0xffffff94
   15408:	ldr	r3, [fp, #-108]	; 0xffffff94
   1540c:	cmp	r3, #0
   15410:	mov	r3, #0
   15414:	str	r3, [fp, #-88]	; 0xffffffa8
   15418:	str	r3, [fp, #-84]	; 0xffffffac
   1541c:	str	r3, [fp, #-80]	; 0xffffffb0
   15420:	beq	157dc <argp_failure@@Base+0x758>
   15424:	str	sl, [fp, #-100]	; 0xffffff9c
   15428:	ldr	lr, [r9, #28]
   1542c:	ldr	r3, [r9, #24]
   15430:	ldr	r5, [r9, #16]
   15434:	sub	lr, lr, r3
   15438:	cmp	lr, r5
   1543c:	ldr	r6, [r8]
   15440:	ldr	sl, [r8, #8]
   15444:	bhi	15f44 <argp_failure@@Base+0xec0>
   15448:	ldr	r1, [r9, #4]
   1544c:	ldr	r7, [r6, #12]
   15450:	str	r1, [fp, #-116]	; 0xffffff8c
   15454:	ldr	r1, [r9, #12]
   15458:	mov	r3, #0
   1545c:	str	r1, [fp, #-120]	; 0xffffff88
   15460:	sub	r1, fp, #88	; 0x58
   15464:	str	r3, [r9, #4]
   15468:	and	r2, r7, #8
   1546c:	str	r1, [fp, #-68]	; 0xffffffbc
   15470:	ldr	r1, [fp, #-104]	; 0xffffff98
   15474:	mov	r0, #1
   15478:	cmp	r2, r3
   1547c:	mov	r4, r2
   15480:	str	r0, [fp, #-64]	; 0xffffffc0
   15484:	str	r8, [fp, #-76]	; 0xffffffb4
   15488:	str	r9, [fp, #-72]	; 0xffffffb8
   1548c:	str	r1, [fp, #-60]	; 0xffffffc4
   15490:	bne	15dd0 <argp_failure@@Base+0xd4c>
   15494:	ldr	ip, [r8, #4]
   15498:	cmp	ip, r3
   1549c:	beq	154c8 <argp_failure@@Base+0x444>
   154a0:	add	r0, r6, #24
   154a4:	ldr	r3, [r0, #-24]	; 0xffffffe8
   154a8:	cmp	r3, #0
   154ac:	beq	154bc <argp_failure@@Base+0x438>
   154b0:	ldr	r3, [r0, #-12]
   154b4:	tst	r3, #2
   154b8:	beq	15dcc <argp_failure@@Base+0xd48>
   154bc:	subs	ip, ip, #1
   154c0:	add	r0, r0, #24
   154c4:	bne	154a4 <argp_failure@@Base+0x420>
   154c8:	ldr	r3, [fp, #-100]	; 0xffffff9c
   154cc:	cmp	lr, r5
   154d0:	str	r2, [fp, #-128]	; 0xffffff80
   154d4:	ldr	r5, [r3, #8]
   154d8:	bhi	15de4 <argp_failure@@Base+0xd60>
   154dc:	str	r5, [r9, #12]
   154e0:	ldr	r5, [r8, #4]
   154e4:	cmp	r5, #0
   154e8:	beq	1556c <argp_failure@@Base+0x4e8>
   154ec:	mov	r4, r6
   154f0:	str	r8, [fp, #-124]	; 0xffffff84
   154f4:	b	1550c <argp_failure@@Base+0x488>
   154f8:	subs	r5, r5, #1
   154fc:	add	r4, r4, #24
   15500:	beq	15560 <argp_failure@@Base+0x4dc>
   15504:	ldr	r7, [r4, #12]
   15508:	and	r2, r7, #8
   1550c:	cmp	r2, #0
   15510:	bne	154f8 <argp_failure@@Base+0x474>
   15514:	ldr	r8, [r4, #4]
   15518:	sub	r2, r8, #1
   1551c:	cmp	r2, #254	; 0xfe
   15520:	bhi	154f8 <argp_failure@@Base+0x474>
   15524:	bl	11290 <__ctype_b_loc@plt>
   15528:	lsl	r2, r8, #1
   1552c:	ldr	r1, [r0]
   15530:	ldrh	r2, [r1, r2]
   15534:	tst	r2, #16384	; 0x4000
   15538:	beq	154f8 <argp_failure@@Base+0x474>
   1553c:	ldrb	r2, [sl]
   15540:	cmp	r8, r2
   15544:	bne	154f8 <argp_failure@@Base+0x474>
   15548:	tst	r7, #2
   1554c:	beq	15e90 <argp_failure@@Base+0xe0c>
   15550:	subs	r5, r5, #1
   15554:	add	sl, sl, #1
   15558:	add	r4, r4, #24
   1555c:	bne	15504 <argp_failure@@Base+0x480>
   15560:	ldr	r4, [r6, #12]
   15564:	ldr	r8, [fp, #-124]	; 0xffffff84
   15568:	and	r4, r4, #8
   1556c:	ldr	r3, [r9, #28]
   15570:	ldr	r1, [r9, #24]
   15574:	cmp	r4, #0
   15578:	ldr	r2, [r9, #16]
   1557c:	sub	r3, r3, r1
   15580:	beq	15dfc <argp_failure@@Base+0xd78>
   15584:	cmp	r3, r2
   15588:	ldr	r3, [fp, #-100]	; 0xffffff9c
   1558c:	ldr	r4, [r3, #16]
   15590:	bhi	160c4 <argp_failure@@Base+0x1040>
   15594:	str	r4, [r9, #12]
   15598:	ldr	r5, [r8, #4]
   1559c:	cmp	r5, #0
   155a0:	addne	r4, r6, #24
   155a4:	bne	155b8 <argp_failure@@Base+0x534>
   155a8:	b	15648 <argp_failure@@Base+0x5c4>
   155ac:	subs	r5, r5, #1
   155b0:	add	r4, r4, #24
   155b4:	beq	15648 <argp_failure@@Base+0x5c4>
   155b8:	ldr	r3, [r4, #-24]	; 0xffffffe8
   155bc:	cmp	r3, #0
   155c0:	beq	155ac <argp_failure@@Base+0x528>
   155c4:	ldr	r3, [r4, #-12]
   155c8:	tst	r3, #2
   155cc:	bne	155ac <argp_failure@@Base+0x528>
   155d0:	ldr	r3, [fp, #-100]	; 0xffffff9c
   155d4:	sub	r1, fp, #76	; 0x4c
   155d8:	ldr	r0, [r3, #16]
   155dc:	bl	137c4 <__assert_fail@plt+0x2390>
   155e0:	ldr	sl, [r4, #-24]	; 0xffffffe8
   155e4:	mov	r0, sl
   155e8:	bl	112c0 <strlen@plt>
   155ec:	subs	r7, r0, #0
   155f0:	beq	155ac <argp_failure@@Base+0x528>
   155f4:	ldr	r2, [r9, #28]
   155f8:	ldr	lr, [r9, #32]
   155fc:	add	ip, r2, r7
   15600:	cmp	lr, ip
   15604:	mov	r1, r7
   15608:	mov	r0, r9
   1560c:	bcs	15620 <argp_failure@@Base+0x59c>
   15610:	bl	18d18 <argp_parse@@Base+0x2198>
   15614:	cmp	r0, #0
   15618:	beq	155ac <argp_failure@@Base+0x528>
   1561c:	ldr	r2, [r9, #28]
   15620:	mov	r0, r2
   15624:	mov	r1, sl
   15628:	mov	r2, r7
   1562c:	bl	11188 <memcpy@plt>
   15630:	ldr	r2, [r9, #28]
   15634:	subs	r5, r5, #1
   15638:	add	r3, r2, r7
   1563c:	str	r3, [r9, #28]
   15640:	add	r4, r4, #24
   15644:	bne	155b8 <argp_failure@@Base+0x534>
   15648:	ldr	r3, [r9, #28]
   1564c:	ldr	r1, [r9, #24]
   15650:	ldr	r2, [r9, #16]
   15654:	sub	r3, r3, r1
   15658:	cmp	r3, r2
   1565c:	bhi	16078 <argp_failure@@Base+0xff4>
   15660:	ldr	r2, [fp, #-64]	; 0xffffffc0
   15664:	mov	r3, #0
   15668:	cmp	r2, r3
   1566c:	str	r3, [r9, #4]
   15670:	beq	15f60 <argp_failure@@Base+0xedc>
   15674:	ldr	r3, [r6, #12]
   15678:	tst	r3, #8
   1567c:	bne	156a8 <argp_failure@@Base+0x624>
   15680:	ldr	r4, [r6, #4]
   15684:	sub	r3, r4, #1
   15688:	cmp	r3, #254	; 0xfe
   1568c:	bhi	156a8 <argp_failure@@Base+0x624>
   15690:	bl	11290 <__ctype_b_loc@plt>
   15694:	lsl	r4, r4, #1
   15698:	ldr	r3, [r0]
   1569c:	ldrh	r3, [r3, r4]
   156a0:	tst	r3, #16384	; 0x4000
   156a4:	bne	156b4 <argp_failure@@Base+0x630>
   156a8:	ldr	r3, [r6]
   156ac:	cmp	r3, #0
   156b0:	beq	16328 <argp_failure@@Base+0x12a4>
   156b4:	ldr	r3, [r9, #28]
   156b8:	ldr	r1, [r9, #24]
   156bc:	ldr	r2, [r9, #16]
   156c0:	sub	r3, r3, r1
   156c4:	cmp	r3, r2
   156c8:	bhi	15f10 <argp_failure@@Base+0xe8c>
   156cc:	ldr	r3, [fp, #-116]	; 0xffffff8c
   156d0:	str	r3, [r9, #4]
   156d4:	ldr	r3, [fp, #-108]	; 0xffffff94
   156d8:	add	r8, r8, #28
   156dc:	subs	r3, r3, #1
   156e0:	str	r3, [fp, #-108]	; 0xffffff94
   156e4:	ldr	r3, [fp, #-120]	; 0xffffff88
   156e8:	str	r3, [r9, #12]
   156ec:	bne	15428 <argp_failure@@Base+0x3a4>
   156f0:	ldr	r3, [fp, #-80]	; 0xffffffb0
   156f4:	ldr	sl, [fp, #-100]	; 0xffffff9c
   156f8:	cmp	r3, #0
   156fc:	beq	157dc <argp_failure@@Base+0x758>
   15700:	ldr	r3, [sl, #4]
   15704:	cmp	r3, #0
   15708:	beq	157dc <argp_failure@@Base+0x758>
   1570c:	ldr	r3, [fp, #-104]	; 0xffffff98
   15710:	ldr	r1, [pc, #2956]	; 162a4 <argp_failure@@Base+0x1220>
   15714:	cmp	r3, #0
   15718:	ldr	r0, [pc, #2952]	; 162a8 <argp_failure@@Base+0x1224>
   1571c:	ldrne	r2, [r3]
   15720:	ldreq	r2, [fp, #-104]	; 0xffffff98
   15724:	ldr	r3, [fp, #-104]	; 0xffffff98
   15728:	bl	13574 <__assert_fail@plt+0x2140>
   1572c:	subs	r4, r0, #0
   15730:	beq	157dc <argp_failure@@Base+0x758>
   15734:	ldrb	r3, [r4]
   15738:	cmp	r3, #0
   1573c:	beq	157d0 <argp_failure@@Base+0x74c>
   15740:	ldr	r3, [r9, #28]
   15744:	ldr	r2, [r9, #32]
   15748:	cmp	r3, r2
   1574c:	bcs	163ec <argp_failure@@Base+0x1368>
   15750:	add	r1, r3, #1
   15754:	mov	r2, #10
   15758:	str	r1, [r9, #28]
   1575c:	strb	r2, [r3]
   15760:	mov	r0, r4
   15764:	bl	112c0 <strlen@plt>
   15768:	subs	r5, r0, #0
   1576c:	beq	163c8 <argp_failure@@Base+0x1344>
   15770:	ldr	r0, [r9, #28]
   15774:	ldr	r2, [r9, #32]
   15778:	add	r3, r0, r5
   1577c:	cmp	r2, r3
   15780:	bcs	1579c <argp_failure@@Base+0x718>
   15784:	mov	r1, r5
   15788:	mov	r0, r9
   1578c:	bl	18d18 <argp_parse@@Base+0x2198>
   15790:	cmp	r0, #0
   15794:	beq	163c8 <argp_failure@@Base+0x1344>
   15798:	ldr	r0, [r9, #28]
   1579c:	mov	r2, r5
   157a0:	mov	r1, r4
   157a4:	bl	11188 <memcpy@plt>
   157a8:	ldr	r3, [r9, #28]
   157ac:	add	r3, r3, r5
   157b0:	str	r3, [r9, #28]
   157b4:	ldr	r2, [r9, #32]
   157b8:	cmp	r2, r3
   157bc:	bls	163d0 <argp_failure@@Base+0x134c>
   157c0:	add	r1, r3, #1
   157c4:	mov	r2, #10
   157c8:	str	r1, [r9, #28]
   157cc:	strb	r2, [r3]
   157d0:	ldr	r3, [pc, #2768]	; 162a8 <argp_failure@@Base+0x1224>
   157d4:	cmp	r4, r3
   157d8:	bne	1631c <argp_failure@@Base+0x1298>
   157dc:	ldr	r3, [fp, #-96]	; 0xffffffa0
   157e0:	mov	r4, #1
   157e4:	tst	r3, #32
   157e8:	beq	15334 <argp_failure@@Base+0x2b0>
   157ec:	mov	r3, #0
   157f0:	str	r3, [sp]
   157f4:	str	r9, [sp, #4]
   157f8:	mov	r3, r4
   157fc:	ldr	r1, [fp, #-104]	; 0xffffff98
   15800:	ldr	r0, [fp, #-112]	; 0xffffff90
   15804:	mov	r2, #1
   15808:	bl	13970 <__assert_fail@plt+0x253c>
   1580c:	orr	r4, r4, r0
   15810:	b	15334 <argp_failure@@Base+0x2b0>
   15814:	ldr	r0, [pc, #2704]	; 162ac <argp_failure@@Base+0x1228>
   15818:	bl	11230 <getenv@plt>
   1581c:	mov	lr, sl
   15820:	sub	r3, fp, #76	; 0x4c
   15824:	mov	ip, r3
   15828:	str	r3, [fp, #-100]	; 0xffffff9c
   1582c:	mov	r6, r0
   15830:	ldm	lr!, {r0, r1, r2, r3}
   15834:	cmp	r6, #0
   15838:	stmia	ip!, {r0, r1, r2, r3}
   1583c:	ldm	lr!, {r0, r1, r2, r3}
   15840:	stmia	ip!, {r0, r1, r2, r3}
   15844:	ldm	lr, {r0, r1}
   15848:	stm	ip, {r0, r1}
   1584c:	beq	152cc <argp_failure@@Base+0x248>
   15850:	ldrb	r9, [r6]
   15854:	ldr	r8, [pc, #2644]	; 162b0 <argp_failure@@Base+0x122c>
   15858:	cmp	r9, #0
   1585c:	beq	159b0 <argp_failure@@Base+0x92c>
   15860:	bl	11290 <__ctype_b_loc@plt>
   15864:	mov	r5, r0
   15868:	ldr	r1, [r0]
   1586c:	b	15874 <argp_failure@@Base+0x7f0>
   15870:	ldrb	r9, [r6, #1]!
   15874:	lsl	r3, r9, #1
   15878:	ldrh	r3, [r1, r3]
   1587c:	tst	r3, #8192	; 0x2000
   15880:	bne	15870 <argp_failure@@Base+0x7ec>
   15884:	ands	r2, r3, #1024	; 0x400
   15888:	beq	159a8 <argp_failure@@Base+0x924>
   1588c:	cmp	r9, #95	; 0x5f
   15890:	cmpne	r9, #45	; 0x2d
   15894:	lsl	r3, r3, #28
   15898:	moveq	r7, #1
   1589c:	movne	r7, #0
   158a0:	orrs	r3, r7, r3, lsr #31
   158a4:	beq	16164 <argp_failure@@Base+0x10e0>
   158a8:	mov	r4, r6
   158ac:	ldrb	r3, [r4, #1]!
   158b0:	cmp	r3, #95	; 0x5f
   158b4:	cmpne	r3, #45	; 0x2d
   158b8:	lsl	r2, r3, #1
   158bc:	moveq	r0, #1
   158c0:	ldrh	r2, [r1, r2]
   158c4:	movne	r0, #0
   158c8:	lsl	ip, r2, #28
   158cc:	orrs	r0, r0, ip, lsr #31
   158d0:	bne	158ac <argp_failure@@Base+0x828>
   158d4:	tst	r2, #8192	; 0x2000
   158d8:	sub	r7, r4, r6
   158dc:	beq	158f4 <argp_failure@@Base+0x870>
   158e0:	ldrb	r3, [r4, #1]!
   158e4:	lsl	r2, r3, #1
   158e8:	ldrh	r2, [r1, r2]
   158ec:	tst	r2, #8192	; 0x2000
   158f0:	bne	158e0 <argp_failure@@Base+0x85c>
   158f4:	cmp	r3, #44	; 0x2c
   158f8:	cmpne	r3, #0
   158fc:	beq	15a10 <argp_failure@@Base+0x98c>
   15900:	cmp	r3, #61	; 0x3d
   15904:	beq	15d6c <argp_failure@@Base+0xce8>
   15908:	ldrb	r3, [r4]
   1590c:	lsl	r3, r3, #1
   15910:	ldrh	r3, [r1, r3]
   15914:	tst	r3, #2048	; 0x800
   15918:	bne	15d0c <argp_failure@@Base+0xc88>
   1591c:	ldr	r3, [fp, #-108]	; 0xffffff94
   15920:	mov	r9, r3
   15924:	str	r3, [fp, #-116]	; 0xffffff8c
   15928:	ldr	r5, [pc, #2436]	; 162b4 <argp_failure@@Base+0x1230>
   1592c:	b	1593c <argp_failure@@Base+0x8b8>
   15930:	add	r5, r5, #16
   15934:	cmp	r5, r8
   15938:	beq	161cc <argp_failure@@Base+0x1148>
   1593c:	mov	r0, r5
   15940:	bl	112c0 <strlen@plt>
   15944:	cmp	r0, r7
   15948:	bne	15930 <argp_failure@@Base+0x8ac>
   1594c:	mov	r2, r7
   15950:	mov	r1, r5
   15954:	mov	r0, r6
   15958:	bl	11410 <strncmp@plt>
   1595c:	cmp	r0, #0
   15960:	bne	15930 <argp_failure@@Base+0x8ac>
   15964:	cmp	r9, #0
   15968:	beq	15978 <argp_failure@@Base+0x8f4>
   1596c:	ldrb	r1, [r5, #14]
   15970:	cmp	r1, #0
   15974:	beq	163ac <argp_failure@@Base+0x1328>
   15978:	ldrb	r3, [r5, #15]
   1597c:	sub	r2, fp, #36	; 0x24
   15980:	add	r3, r2, r3
   15984:	ldr	r2, [fp, #-116]	; 0xffffff8c
   15988:	str	r2, [r3, #-40]	; 0xffffffd8
   1598c:	cmp	r5, r8
   15990:	beq	161cc <argp_failure@@Base+0x1148>
   15994:	ldrb	r9, [r4]
   15998:	cmp	r9, #44	; 0x2c
   1599c:	beq	160ac <argp_failure@@Base+0x1028>
   159a0:	mov	r6, r4
   159a4:	b	15858 <argp_failure@@Base+0x7d4>
   159a8:	cmp	r9, #0
   159ac:	bne	16304 <argp_failure@@Base+0x1280>
   159b0:	ldr	lr, [fp, #-44]	; 0xffffffd4
   159b4:	ldr	r1, [pc, #2296]	; 162b4 <argp_failure@@Base+0x1230>
   159b8:	add	r3, r1, #16
   159bc:	cmp	r3, r8
   159c0:	mov	r1, r3
   159c4:	beq	16108 <argp_failure@@Base+0x1084>
   159c8:	ldrb	r2, [r3, #14]
   159cc:	cmp	r2, #0
   159d0:	bne	159b8 <argp_failure@@Base+0x934>
   159d4:	ldrb	r0, [r3, #15]
   159d8:	sub	ip, fp, #36	; 0x24
   159dc:	cmp	r0, #32
   159e0:	add	ip, ip, r0
   159e4:	beq	159b8 <argp_failure@@Base+0x934>
   159e8:	ldr	r0, [ip, #-40]	; 0xffffffd8
   159ec:	cmp	r0, lr
   159f0:	blt	159b8 <argp_failure@@Base+0x934>
   159f4:	ldr	r1, [pc, #2236]	; 162b8 <argp_failure@@Base+0x1234>
   159f8:	ldr	r0, [fp, #-104]	; 0xffffff98
   159fc:	stm	sp, {r1, r3}
   15a00:	ldr	r3, [pc, #2228]	; 162bc <argp_failure@@Base+0x1238>
   15a04:	mov	r1, r2
   15a08:	bl	15084 <argp_failure@@Base>
   15a0c:	b	152cc <argp_failure@@Base+0x248>
   15a10:	cmp	r9, #110	; 0x6e
   15a14:	beq	15d9c <argp_failure@@Base+0xd18>
   15a18:	mov	r9, #1
   15a1c:	str	r9, [fp, #-116]	; 0xffffff8c
   15a20:	b	15928 <argp_failure@@Base+0x8a4>
   15a24:	ldr	r3, [fp, #4]
   15a28:	ldr	r1, [pc, #2192]	; 162c0 <argp_failure@@Base+0x123c>
   15a2c:	mov	r2, r3
   15a30:	mov	r0, r9
   15a34:	bl	18d38 <argp_parse@@Base+0x21b8>
   15a38:	mov	r4, #1
   15a3c:	b	1531c <argp_failure@@Base+0x298>
   15a40:	mov	r2, #1
   15a44:	mov	r3, #0
   15a48:	stm	sp, {r2, r9}
   15a4c:	ldr	r1, [fp, #-104]	; 0xffffff98
   15a50:	mov	r2, r3
   15a54:	ldr	r0, [fp, #-112]	; 0xffffff90
   15a58:	bl	13970 <__assert_fail@plt+0x253c>
   15a5c:	orr	r4, r4, r0
   15a60:	b	15310 <argp_failure@@Base+0x28c>
   15a64:	ldr	r3, [fp, #-112]	; 0xffffff90
   15a68:	mov	r4, #1
   15a6c:	mov	r6, r4
   15a70:	ldr	r1, [r3, #16]
   15a74:	ldr	r0, [r3, #8]
   15a78:	bl	14e74 <__assert_fail@plt+0x3a40>
   15a7c:	mov	r1, #0
   15a80:	add	r3, r0, #14
   15a84:	bic	r3, r3, #7
   15a88:	sub	sp, sp, r3
   15a8c:	add	r7, sp, #8
   15a90:	mov	r2, r0
   15a94:	mov	r0, r7
   15a98:	bl	11314 <memset@plt>
   15a9c:	sub	r3, fp, #76	; 0x4c
   15aa0:	str	r3, [fp, #-100]	; 0xffffff9c
   15aa4:	ldr	r8, [fp, #-136]	; 0xffffff78
   15aa8:	str	r7, [fp, #-108]	; 0xffffff94
   15aac:	b	15bc8 <argp_failure@@Base+0xb44>
   15ab0:	cmp	r4, #0
   15ab4:	ldr	r3, [fp, #-108]	; 0xffffff94
   15ab8:	ldr	r5, [r9, #12]
   15abc:	ldrne	r2, [pc, #2048]	; 162c4 <argp_failure@@Base+0x1240>
   15ac0:	str	r7, [r9, #12]
   15ac4:	ldreq	r2, [pc, #2044]	; 162c8 <argp_failure@@Base+0x1244>
   15ac8:	str	r3, [fp, #-76]	; 0xffffffb4
   15acc:	ldr	r1, [pc, #2040]	; 162cc <argp_failure@@Base+0x1248>
   15ad0:	ldr	r3, [fp, #4]
   15ad4:	mov	r0, r9
   15ad8:	bl	18d38 <argp_parse@@Base+0x21b8>
   15adc:	ldr	r3, [r9, #28]
   15ae0:	ldr	r1, [r9, #24]
   15ae4:	ldr	r2, [r9, #16]
   15ae8:	sub	r3, r3, r1
   15aec:	cmp	r3, r2
   15af0:	ldr	r7, [sl, #28]
   15af4:	bhi	15c5c <argp_failure@@Base+0xbd8>
   15af8:	ldr	r3, [fp, #-96]	; 0xffffffa0
   15afc:	ldr	r4, [r9, #4]
   15b00:	tst	r3, #2
   15b04:	str	r7, [r9, #4]
   15b08:	beq	15c40 <argp_failure@@Base+0xbbc>
   15b0c:	ldr	r3, [r8, #4]
   15b10:	cmp	r3, #0
   15b14:	beq	15b64 <argp_failure@@Base+0xae0>
   15b18:	ldr	ip, [r9, #28]
   15b1c:	ldr	r2, [r9, #32]
   15b20:	add	r3, ip, #12
   15b24:	cmp	r2, r3
   15b28:	bcs	15b44 <argp_failure@@Base+0xac0>
   15b2c:	mov	r1, #12
   15b30:	mov	r0, r9
   15b34:	bl	18d18 <argp_parse@@Base+0x2198>
   15b38:	cmp	r0, #0
   15b3c:	beq	15b64 <argp_failure@@Base+0xae0>
   15b40:	ldr	ip, [r9, #28]
   15b44:	ldr	r3, [pc, #1924]	; 162d0 <argp_failure@@Base+0x124c>
   15b48:	ldm	r3!, {r0, r1, r2}
   15b4c:	str	r0, [ip]
   15b50:	str	r1, [ip, #4]
   15b54:	str	r2, [ip, #8]
   15b58:	ldr	r3, [r9, #28]
   15b5c:	add	r3, r3, #12
   15b60:	str	r3, [r9, #28]
   15b64:	mov	r3, r6
   15b68:	ldr	r1, [fp, #-104]	; 0xffffff98
   15b6c:	str	r9, [sp]
   15b70:	ldr	r2, [fp, #-100]	; 0xffffff9c
   15b74:	ldr	r0, [fp, #-112]	; 0xffffff90
   15b78:	bl	144ac <__assert_fail@plt+0x3078>
   15b7c:	ldr	r3, [r9, #28]
   15b80:	ldr	r1, [r9, #24]
   15b84:	sub	r1, r3, r1
   15b88:	mov	r7, r0
   15b8c:	ldr	r0, [r9, #16]
   15b90:	cmp	r1, r0
   15b94:	strls	r5, [r9, #12]
   15b98:	bhi	15c0c <argp_failure@@Base+0xb88>
   15b9c:	ldr	r1, [r9, #32]
   15ba0:	str	r4, [r9, #4]
   15ba4:	cmp	r1, r3
   15ba8:	bls	15bf0 <argp_failure@@Base+0xb6c>
   15bac:	add	r1, r3, #1
   15bb0:	mov	r2, #10
   15bb4:	str	r1, [r9, #28]
   15bb8:	strb	r2, [r3]
   15bbc:	cmp	r7, #0
   15bc0:	mov	r4, #0
   15bc4:	beq	15c68 <argp_failure@@Base+0xbe4>
   15bc8:	ldr	r3, [r9, #28]
   15bcc:	ldr	r1, [r9, #24]
   15bd0:	ldr	r2, [r9, #16]
   15bd4:	sub	r3, r3, r1
   15bd8:	cmp	r3, r2
   15bdc:	ldr	r7, [sl, #28]
   15be0:	bls	15ab0 <argp_failure@@Base+0xa2c>
   15be4:	mov	r0, r9
   15be8:	bl	18688 <argp_parse@@Base+0x1b08>
   15bec:	b	15ab0 <argp_failure@@Base+0xa2c>
   15bf0:	mov	r1, r6
   15bf4:	mov	r0, r9
   15bf8:	bl	18d18 <argp_parse@@Base+0x2198>
   15bfc:	cmp	r0, #0
   15c00:	beq	15bbc <argp_failure@@Base+0xb38>
   15c04:	ldr	r3, [r9, #28]
   15c08:	b	15bac <argp_failure@@Base+0xb28>
   15c0c:	mov	r0, r9
   15c10:	bl	18688 <argp_parse@@Base+0x1b08>
   15c14:	ldr	r3, [r9, #28]
   15c18:	ldr	r1, [r9, #24]
   15c1c:	ldr	r0, [r9, #16]
   15c20:	sub	r1, r3, r1
   15c24:	cmp	r1, r0
   15c28:	str	r5, [r9, #12]
   15c2c:	bls	15b9c <argp_failure@@Base+0xb18>
   15c30:	mov	r0, r9
   15c34:	bl	18688 <argp_parse@@Base+0x1b08>
   15c38:	ldr	r3, [r9, #28]
   15c3c:	b	15b9c <argp_failure@@Base+0xb18>
   15c40:	mov	r1, r9
   15c44:	mov	r0, r8
   15c48:	bl	14ecc <__assert_fail@plt+0x3a98>
   15c4c:	ldr	r3, [fp, #-96]	; 0xffffffa0
   15c50:	orr	r3, r3, #2
   15c54:	str	r3, [fp, #-96]	; 0xffffffa0
   15c58:	b	15b64 <argp_failure@@Base+0xae0>
   15c5c:	mov	r0, r9
   15c60:	bl	18688 <argp_parse@@Base+0x1b08>
   15c64:	b	15af8 <argp_failure@@Base+0xa74>
   15c68:	mov	r4, #1
   15c6c:	b	15304 <argp_failure@@Base+0x280>
   15c70:	mov	r1, #0
   15c74:	ldr	r0, [fp, #-112]	; 0xffffff90
   15c78:	bl	146fc <__assert_fail@plt+0x32c8>
   15c7c:	ldr	r2, [pc, #1616]	; 162d4 <argp_failure@@Base+0x1250>
   15c80:	ldr	r4, [r0, #4]
   15c84:	ldr	r5, [r0]
   15c88:	mov	r1, r4
   15c8c:	mov	r6, r0
   15c90:	str	r0, [fp, #-136]	; 0xffffff78
   15c94:	mov	r0, r5
   15c98:	bl	14dec <__assert_fail@plt+0x39b8>
   15c9c:	ldr	r2, [pc, #1588]	; 162d8 <argp_failure@@Base+0x1254>
   15ca0:	cmp	r0, #0
   15ca4:	mvnne	r3, #0
   15ca8:	strne	r3, [r0, #12]
   15cac:	movne	r3, r6
   15cb0:	mov	r0, r5
   15cb4:	ldrne	r4, [r3, #4]
   15cb8:	mov	r1, r4
   15cbc:	bl	14dec <__assert_fail@plt+0x39b8>
   15cc0:	cmp	r0, #0
   15cc4:	mvnne	r3, #0
   15cc8:	strne	r3, [r0, #12]
   15ccc:	ldrne	r3, [fp, #-136]	; 0xffffff78
   15cd0:	ldrne	r4, [r3, #4]
   15cd4:	cmp	r4, #0
   15cd8:	beq	152f8 <argp_failure@@Base+0x274>
   15cdc:	mov	r3, r5
   15ce0:	mov	r1, #0
   15ce4:	str	r1, [r3, #24]
   15ce8:	add	r1, r1, #1
   15cec:	cmp	r1, r4
   15cf0:	add	r3, r3, #28
   15cf4:	bne	15ce4 <argp_failure@@Base+0xc60>
   15cf8:	mov	r0, r5
   15cfc:	ldr	r3, [pc, #1496]	; 162dc <argp_failure@@Base+0x1258>
   15d00:	mov	r2, #28
   15d04:	bl	113d4 <qsort@plt>
   15d08:	b	152f8 <argp_failure@@Base+0x274>
   15d0c:	mov	r2, #10
   15d10:	mov	r1, #0
   15d14:	mov	r0, r4
   15d18:	bl	11110 <strtol@plt>
   15d1c:	ldrb	r3, [r4]
   15d20:	ldr	r2, [r5]
   15d24:	lsl	r3, r3, #1
   15d28:	ldrh	r3, [r2, r3]
   15d2c:	tst	r3, #2048	; 0x800
   15d30:	str	r0, [fp, #-116]	; 0xffffff8c
   15d34:	beq	15d5c <argp_failure@@Base+0xcd8>
   15d38:	ldrb	r3, [r4, #1]!
   15d3c:	lsl	r3, r3, #1
   15d40:	ldrh	r3, [r2, r3]
   15d44:	tst	r3, #2048	; 0x800
   15d48:	bne	15d38 <argp_failure@@Base+0xcb4>
   15d4c:	b	15d5c <argp_failure@@Base+0xcd8>
   15d50:	ldrb	r3, [r4, #1]!
   15d54:	lsl	r3, r3, #1
   15d58:	ldrh	r3, [r2, r3]
   15d5c:	tst	r3, #8192	; 0x2000
   15d60:	bne	15d50 <argp_failure@@Base+0xccc>
   15d64:	ldr	r9, [fp, #-108]	; 0xffffff94
   15d68:	b	15928 <argp_failure@@Base+0x8a4>
   15d6c:	ldrb	r3, [r4, #1]
   15d70:	add	r4, r4, #1
   15d74:	lsl	r3, r3, #1
   15d78:	ldrh	r3, [r1, r3]
   15d7c:	tst	r3, #8192	; 0x2000
   15d80:	beq	15914 <argp_failure@@Base+0x890>
   15d84:	ldrb	r3, [r4, #1]!
   15d88:	lsl	r3, r3, #1
   15d8c:	ldrh	r3, [r1, r3]
   15d90:	tst	r3, #8192	; 0x2000
   15d94:	bne	15d84 <argp_failure@@Base+0xd00>
   15d98:	b	15914 <argp_failure@@Base+0x890>
   15d9c:	ldrb	r3, [r6, #1]
   15da0:	cmp	r3, #111	; 0x6f
   15da4:	bne	15a18 <argp_failure@@Base+0x994>
   15da8:	ldrb	r3, [r6, #2]
   15dac:	cmp	r3, #45	; 0x2d
   15db0:	bne	15a18 <argp_failure@@Base+0x994>
   15db4:	ldr	r3, [fp, #-108]	; 0xffffff94
   15db8:	add	r6, r6, #3
   15dbc:	sub	r7, r7, #3
   15dc0:	str	r3, [fp, #-116]	; 0xffffff8c
   15dc4:	mov	r9, #1
   15dc8:	b	15928 <argp_failure@@Base+0x8a4>
   15dcc:	mov	r3, #1
   15dd0:	str	r3, [fp, #-128]	; 0xffffff80
   15dd4:	ldr	r3, [fp, #-100]	; 0xffffff9c
   15dd8:	cmp	lr, r5
   15ddc:	ldr	r5, [r3, #8]
   15de0:	bls	154dc <argp_failure@@Base+0x458>
   15de4:	mov	r0, r9
   15de8:	bl	18688 <argp_parse@@Base+0x1b08>
   15dec:	ldr	r7, [r6, #12]
   15df0:	and	r2, r7, #8
   15df4:	mov	r4, r2
   15df8:	b	154dc <argp_failure@@Base+0x458>
   15dfc:	cmp	r3, r2
   15e00:	ldr	r3, [fp, #-100]	; 0xffffff9c
   15e04:	ldr	r4, [r3, #12]
   15e08:	bhi	160b8 <argp_failure@@Base+0x1034>
   15e0c:	str	r4, [r9, #12]
   15e10:	ldr	r5, [r8, #4]
   15e14:	cmp	r5, #0
   15e18:	beq	15648 <argp_failure@@Base+0x5c4>
   15e1c:	add	r4, r6, #24
   15e20:	ldr	r7, [fp, #-100]	; 0xffffff9c
   15e24:	b	15e34 <argp_failure@@Base+0xdb0>
   15e28:	subs	r5, r5, #1
   15e2c:	add	r4, r4, #24
   15e30:	beq	15648 <argp_failure@@Base+0x5c4>
   15e34:	ldr	r3, [r4, #-24]	; 0xffffffe8
   15e38:	cmp	r3, #0
   15e3c:	beq	15e28 <argp_failure@@Base+0xda4>
   15e40:	ldr	r3, [r4, #-12]
   15e44:	tst	r3, #2
   15e48:	bne	15e28 <argp_failure@@Base+0xda4>
   15e4c:	sub	r1, fp, #76	; 0x4c
   15e50:	ldr	r0, [r7, #12]
   15e54:	bl	137c4 <__assert_fail@plt+0x2390>
   15e58:	ldr	r2, [r4, #-24]	; 0xffffffe8
   15e5c:	ldr	r1, [pc, #1148]	; 162e0 <argp_failure@@Base+0x125c>
   15e60:	mov	r0, r9
   15e64:	bl	18d38 <argp_parse@@Base+0x21b8>
   15e68:	ldr	r3, [r6, #8]
   15e6c:	ldr	r1, [pc, #1136]	; 162e4 <argp_failure@@Base+0x1260>
   15e70:	subs	r2, r3, #0
   15e74:	mov	r0, r9
   15e78:	beq	15e28 <argp_failure@@Base+0xda4>
   15e7c:	ldr	ip, [r6, #12]
   15e80:	tst	ip, #1
   15e84:	ldrne	r1, [pc, #1116]	; 162e8 <argp_failure@@Base+0x1264>
   15e88:	bl	18d38 <argp_parse@@Base+0x21b8>
   15e8c:	b	15e28 <argp_failure@@Base+0xda4>
   15e90:	ldr	r3, [fp, #-100]	; 0xffffff9c
   15e94:	sub	r1, fp, #76	; 0x4c
   15e98:	ldr	r0, [r3, #8]
   15e9c:	bl	137c4 <__assert_fail@plt+0x2390>
   15ea0:	ldr	r3, [r9, #28]
   15ea4:	ldr	r2, [r9, #32]
   15ea8:	cmp	r3, r2
   15eac:	bcs	160ec <argp_failure@@Base+0x1068>
   15eb0:	add	r2, r3, #1
   15eb4:	str	r2, [r9, #28]
   15eb8:	mov	r2, #45	; 0x2d
   15ebc:	strb	r2, [r3]
   15ec0:	ldr	r3, [r9, #28]
   15ec4:	ldr	r2, [r9, #32]
   15ec8:	ldrb	r7, [sl]
   15ecc:	cmp	r3, r2
   15ed0:	bcs	160d0 <argp_failure@@Base+0x104c>
   15ed4:	add	r2, r3, #1
   15ed8:	str	r2, [r9, #28]
   15edc:	strb	r7, [r3]
   15ee0:	ldr	r3, [fp, #-128]	; 0xffffff80
   15ee4:	cmp	r3, #0
   15ee8:	beq	16084 <argp_failure@@Base+0x1000>
   15eec:	ldr	r3, [fp, #-100]	; 0xffffff9c
   15ef0:	ldr	r3, [r3]
   15ef4:	cmp	r3, #0
   15ef8:	bne	16084 <argp_failure@@Base+0x1000>
   15efc:	ldr	r3, [r6, #8]
   15f00:	cmp	r3, #0
   15f04:	movne	r3, #1
   15f08:	strne	r3, [fp, #-80]	; 0xffffffb0
   15f0c:	b	15550 <argp_failure@@Base+0x4cc>
   15f10:	mov	r0, r9
   15f14:	bl	18688 <argp_parse@@Base+0x1b08>
   15f18:	ldr	r2, [fp, #-116]	; 0xffffff8c
   15f1c:	ldr	r3, [r9, #28]
   15f20:	ldr	r1, [r9, #24]
   15f24:	str	r2, [r9, #4]
   15f28:	ldr	r2, [r9, #16]
   15f2c:	sub	r3, r3, r1
   15f30:	cmp	r3, r2
   15f34:	bls	156d4 <argp_failure@@Base+0x650>
   15f38:	mov	r0, r9
   15f3c:	bl	18688 <argp_parse@@Base+0x1b08>
   15f40:	b	156d4 <argp_failure@@Base+0x650>
   15f44:	mov	r0, r9
   15f48:	bl	18688 <argp_parse@@Base+0x1b08>
   15f4c:	ldr	lr, [r9, #28]
   15f50:	ldr	r2, [r9, #24]
   15f54:	ldr	r5, [r9, #16]
   15f58:	sub	lr, lr, r2
   15f5c:	b	15448 <argp_failure@@Base+0x3c4>
   15f60:	ldr	r4, [r6, #16]
   15f64:	ldr	r1, [r6, #4]
   15f68:	mov	r0, r4
   15f6c:	ldr	r3, [fp, #-104]	; 0xffffff98
   15f70:	ldr	r2, [r8, #20]
   15f74:	bl	13574 <__assert_fail@plt+0x2140>
   15f78:	subs	r5, r0, #0
   15f7c:	beq	16034 <argp_failure@@Base+0xfb0>
   15f80:	ldrb	r3, [r5]
   15f84:	cmp	r3, #0
   15f88:	beq	16024 <argp_failure@@Base+0xfa0>
   15f8c:	ldr	r3, [r9, #28]
   15f90:	ldr	r1, [r9, #24]
   15f94:	ldr	r2, [r9, #16]
   15f98:	sub	r3, r3, r1
   15f9c:	cmp	r3, r2
   15fa0:	bhi	16224 <argp_failure@@Base+0x11a0>
   15fa4:	ldr	r7, [r9, #20]
   15fa8:	ldr	r3, [fp, #-100]	; 0xffffff9c
   15fac:	bic	r7, r7, r7, asr #31
   15fb0:	ldr	r6, [r3, #20]
   15fb4:	mov	r3, r6
   15fb8:	str	r6, [r9, #4]
   15fbc:	add	r2, r6, #3
   15fc0:	cmp	r2, r7
   15fc4:	str	r3, [r9, #12]
   15fc8:	bcs	16174 <argp_failure@@Base+0x10f0>
   15fcc:	ldr	r3, [r9, #28]
   15fd0:	ldr	r2, [r9, #32]
   15fd4:	cmp	r3, r2
   15fd8:	bcs	16374 <argp_failure@@Base+0x12f0>
   15fdc:	add	r1, r3, #1
   15fe0:	mov	r2, #10
   15fe4:	str	r1, [r9, #28]
   15fe8:	strb	r2, [r3]
   15fec:	mov	r0, r5
   15ff0:	bl	112c0 <strlen@plt>
   15ff4:	subs	r6, r0, #0
   15ff8:	beq	16024 <argp_failure@@Base+0xfa0>
   15ffc:	ldr	r0, [r9, #28]
   16000:	ldr	r2, [r9, #32]
   16004:	add	r3, r0, r6
   16008:	cmp	r2, r3
   1600c:	bcs	16208 <argp_failure@@Base+0x1184>
   16010:	mov	r1, r6
   16014:	mov	r0, r9
   16018:	bl	18d18 <argp_parse@@Base+0x2198>
   1601c:	cmp	r0, #0
   16020:	bne	16204 <argp_failure@@Base+0x1180>
   16024:	cmp	r4, r5
   16028:	beq	16034 <argp_failure@@Base+0xfb0>
   1602c:	mov	r0, r5
   16030:	bl	17a18 <argp_parse@@Base+0xe98>
   16034:	ldr	r3, [r9, #28]
   16038:	ldr	r2, [r9, #24]
   1603c:	ldr	r1, [r9, #16]
   16040:	sub	r2, r3, r2
   16044:	cmp	r2, r1
   16048:	bhi	16154 <argp_failure@@Base+0x10d0>
   1604c:	ldr	r1, [r9, #32]
   16050:	mov	r2, #0
   16054:	cmp	r1, r3
   16058:	str	r2, [r9, #4]
   1605c:	bls	16138 <argp_failure@@Base+0x10b4>
   16060:	add	r1, r3, #1
   16064:	mov	r2, #10
   16068:	str	r1, [r9, #28]
   1606c:	strb	r2, [r3]
   16070:	str	r8, [fp, #-88]	; 0xffffffa8
   16074:	b	156b4 <argp_failure@@Base+0x630>
   16078:	mov	r0, r9
   1607c:	bl	18688 <argp_parse@@Base+0x1b08>
   16080:	b	15660 <argp_failure@@Base+0x5dc>
   16084:	ldr	r2, [r6, #8]
   16088:	cmp	r2, #0
   1608c:	beq	15550 <argp_failure@@Base+0x4cc>
   16090:	ldr	r3, [r6, #12]
   16094:	mov	r0, r9
   16098:	tst	r3, #1
   1609c:	ldrne	r1, [pc, #584]	; 162ec <argp_failure@@Base+0x1268>
   160a0:	ldreq	r1, [pc, #584]	; 162f0 <argp_failure@@Base+0x126c>
   160a4:	bl	18d38 <argp_parse@@Base+0x21b8>
   160a8:	b	15550 <argp_failure@@Base+0x4cc>
   160ac:	ldrb	r9, [r4, #1]
   160b0:	add	r4, r4, #1
   160b4:	b	159a0 <argp_failure@@Base+0x91c>
   160b8:	mov	r0, r9
   160bc:	bl	18688 <argp_parse@@Base+0x1b08>
   160c0:	b	15e0c <argp_failure@@Base+0xd88>
   160c4:	mov	r0, r9
   160c8:	bl	18688 <argp_parse@@Base+0x1b08>
   160cc:	b	15594 <argp_failure@@Base+0x510>
   160d0:	mov	r1, #1
   160d4:	mov	r0, r9
   160d8:	bl	18d18 <argp_parse@@Base+0x2198>
   160dc:	cmp	r0, #0
   160e0:	beq	15ee0 <argp_failure@@Base+0xe5c>
   160e4:	ldr	r3, [r9, #28]
   160e8:	b	15ed4 <argp_failure@@Base+0xe50>
   160ec:	mov	r1, #1
   160f0:	mov	r0, r9
   160f4:	bl	18d18 <argp_parse@@Base+0x2198>
   160f8:	cmp	r0, #0
   160fc:	beq	15ec0 <argp_failure@@Base+0xe3c>
   16100:	ldr	r3, [r9, #28]
   16104:	b	15eb0 <argp_failure@@Base+0xe2c>
   16108:	ldr	lr, [fp, #-100]	; 0xffffff9c
   1610c:	ldr	sl, [pc, #388]	; 16298 <argp_failure@@Base+0x1214>
   16110:	mov	r4, #1
   16114:	ldm	lr!, {r0, r1, r2, r3}
   16118:	mov	ip, sl
   1611c:	stmia	ip!, {r0, r1, r2, r3}
   16120:	ldm	lr!, {r0, r1, r2, r3}
   16124:	stmia	ip!, {r0, r1, r2, r3}
   16128:	ldm	lr, {r0, r1}
   1612c:	stm	ip, {r0, r1}
   16130:	str	r4, [sl, #36]	; 0x24
   16134:	b	152cc <argp_failure@@Base+0x248>
   16138:	mov	r1, #1
   1613c:	mov	r0, r9
   16140:	bl	18d18 <argp_parse@@Base+0x2198>
   16144:	cmp	r0, #0
   16148:	beq	16070 <argp_failure@@Base+0xfec>
   1614c:	ldr	r3, [r9, #28]
   16150:	b	16060 <argp_failure@@Base+0xfdc>
   16154:	mov	r0, r9
   16158:	bl	18688 <argp_parse@@Base+0x1b08>
   1615c:	ldr	r3, [r9, #28]
   16160:	b	1604c <argp_failure@@Base+0xfc8>
   16164:	mov	r7, r3
   16168:	mov	r4, r6
   1616c:	mov	r3, r9
   16170:	b	158f4 <argp_failure@@Base+0x870>
   16174:	cmp	r6, r7
   16178:	bhi	16364 <argp_failure@@Base+0x12e0>
   1617c:	ldr	r3, [r9, #28]
   16180:	ldr	r1, [r9, #32]
   16184:	add	r2, r3, #3
   16188:	cmp	r1, r2
   1618c:	bcs	161a8 <argp_failure@@Base+0x1124>
   16190:	mov	r1, #3
   16194:	mov	r0, r9
   16198:	bl	18d18 <argp_parse@@Base+0x2198>
   1619c:	cmp	r0, #0
   161a0:	beq	15fec <argp_failure@@Base+0xf68>
   161a4:	ldr	r3, [r9, #28]
   161a8:	ldr	r2, [pc, #324]	; 162f4 <argp_failure@@Base+0x1270>
   161ac:	ldrh	r1, [r2]
   161b0:	ldrb	r2, [r2, #2]
   161b4:	strh	r1, [r3]
   161b8:	strb	r2, [r3, #2]
   161bc:	ldr	r3, [r9, #28]
   161c0:	add	r3, r3, #3
   161c4:	str	r3, [r9, #28]
   161c8:	b	15fec <argp_failure@@Base+0xf68>
   161cc:	mov	r2, #0
   161d0:	str	r6, [sp, #4]
   161d4:	str	r7, [sp]
   161d8:	ldr	r3, [pc, #280]	; 162f8 <argp_failure@@Base+0x1274>
   161dc:	mov	r1, r2
   161e0:	ldr	r0, [fp, #-104]	; 0xffffff98
   161e4:	bl	15084 <argp_failure@@Base>
   161e8:	b	15994 <argp_failure@@Base+0x910>
   161ec:	ldr	r3, [fp, #-136]	; 0xffffff78
   161f0:	ldr	r8, [r3]
   161f4:	str	r4, [fp, #-88]	; 0xffffffa8
   161f8:	str	r4, [fp, #-84]	; 0xffffffac
   161fc:	str	r4, [fp, #-80]	; 0xffffffb0
   16200:	b	15424 <argp_failure@@Base+0x3a0>
   16204:	ldr	r0, [r9, #28]
   16208:	mov	r2, r6
   1620c:	mov	r1, r5
   16210:	bl	11188 <memcpy@plt>
   16214:	ldr	r3, [r9, #28]
   16218:	add	r6, r3, r6
   1621c:	str	r6, [r9, #28]
   16220:	b	16024 <argp_failure@@Base+0xfa0>
   16224:	mov	r0, r9
   16228:	bl	18688 <argp_parse@@Base+0x1b08>
   1622c:	ldr	r3, [r9, #28]
   16230:	ldr	r1, [r9, #24]
   16234:	ldr	r2, [r9, #16]
   16238:	ldr	r7, [r9, #20]
   1623c:	ldr	sl, [fp, #-100]	; 0xffffff9c
   16240:	sub	r3, r3, r1
   16244:	cmp	r3, r2
   16248:	ldr	r6, [sl, #20]
   1624c:	bic	r7, r7, r7, asr #31
   16250:	bls	15fb4 <argp_failure@@Base+0xf30>
   16254:	mov	r0, r9
   16258:	bl	18688 <argp_parse@@Base+0x1b08>
   1625c:	ldr	r3, [r9, #28]
   16260:	ldr	r1, [r9, #24]
   16264:	ldr	r2, [r9, #16]
   16268:	sub	r3, r3, r1
   1626c:	cmp	r3, r2
   16270:	ldr	r3, [sl, #20]
   16274:	str	r6, [r9, #4]
   16278:	movls	r6, r3
   1627c:	bls	15fbc <argp_failure@@Base+0xf38>
   16280:	mov	r0, r9
   16284:	str	r3, [fp, #-124]	; 0xffffff84
   16288:	bl	18688 <argp_parse@@Base+0x1b08>
   1628c:	ldr	r6, [sl, #20]
   16290:	ldr	r3, [fp, #-124]	; 0xffffff84
   16294:	b	15fbc <argp_failure@@Base+0xf38>
   16298:	muleq	r2, r4, r3
   1629c:	andeq	ip, r2, r8, asr r4
   162a0:	andeq	sl, r1, r8, lsl #23
   162a4:	andeq	r0, r0, #5
   162a8:	andeq	sl, r1, r4, lsl fp
   162ac:	andeq	sl, r1, r0, asr #19
   162b0:	muleq	r1, r4, r8
   162b4:	andeq	sl, r1, r4, lsl #16
   162b8:	andeq	sl, r1, ip, ror sl
   162bc:	andeq	sl, r1, r8, asr #20
   162c0:			; <UNDEFINED> instruction: 0x0001aabc
   162c4:	muleq	r1, r4, sl
   162c8:	andeq	sl, r1, r4, lsr #21
   162cc:	muleq	r1, ip, sl
   162d0:	andeq	sl, r1, ip, lsr #21
   162d4:	andeq	sl, r1, r4, lsl #21
   162d8:	andeq	sl, r1, ip, lsl #21
   162dc:	andeq	r3, r1, ip, lsr #31
   162e0:	strdeq	sl, [r1], -ip
   162e4:	andeq	sl, r1, ip, lsl #22
   162e8:	andeq	sl, r1, r4, lsl #22
   162ec:	strdeq	sl, [r1], -r4
   162f0:	andeq	sl, r1, ip, ror #25
   162f4:	andeq	sl, r1, r0, lsl fp
   162f8:	andeq	sl, r1, r0, lsl #20
   162fc:	andeq	sl, r1, r8, lsr #20
   16300:	ldrdeq	sl, [r1], -r0
   16304:	str	r6, [sp]
   16308:	ldr	r3, [pc, #-20]	; 162fc <argp_failure@@Base+0x1278>
   1630c:	mov	r1, r2
   16310:	ldr	r0, [fp, #-104]	; 0xffffff98
   16314:	bl	15084 <argp_failure@@Base>
   16318:	b	159b0 <argp_failure@@Base+0x92c>
   1631c:	mov	r0, r4
   16320:	bl	17a18 <argp_parse@@Base+0xe98>
   16324:	b	157dc <argp_failure@@Base+0x758>
   16328:	ldr	r0, [r6, #16]
   1632c:	sub	r2, fp, #76	; 0x4c
   16330:	ldr	r1, [r8, #20]
   16334:	bl	135b8 <__assert_fail@plt+0x2184>
   16338:	b	16070 <argp_failure@@Base+0xfec>
   1633c:	mov	r1, #1
   16340:	mov	r0, r9
   16344:	bl	18d18 <argp_parse@@Base+0x2198>
   16348:	cmp	r0, #0
   1634c:	beq	153a4 <argp_failure@@Base+0x320>
   16350:	ldr	r3, [r9, #28]
   16354:	b	15394 <argp_failure@@Base+0x310>
   16358:	ldr	r0, [fp, #-132]	; 0xffffff7c
   1635c:	bl	11200 <funlockfile@plt>
   16360:	b	15364 <argp_failure@@Base+0x2e0>
   16364:	mov	r1, r6
   16368:	mov	r0, r9
   1636c:	bl	134e0 <__assert_fail@plt+0x20ac>
   16370:	b	15fec <argp_failure@@Base+0xf68>
   16374:	mov	r1, #1
   16378:	mov	r0, r9
   1637c:	bl	18d18 <argp_parse@@Base+0x2198>
   16380:	cmp	r0, #0
   16384:	beq	15fec <argp_failure@@Base+0xf68>
   16388:	ldr	r3, [r9, #28]
   1638c:	b	15fdc <argp_failure@@Base+0xf58>
   16390:	mov	r1, #1
   16394:	mov	r0, r9
   16398:	bl	18d18 <argp_parse@@Base+0x2198>
   1639c:	cmp	r0, #0
   163a0:	beq	153f4 <argp_failure@@Base+0x370>
   163a4:	ldr	r3, [r9, #28]
   163a8:	b	153e4 <argp_failure@@Base+0x360>
   163ac:	str	r6, [sp, #4]
   163b0:	str	r7, [sp]
   163b4:	ldr	r3, [pc, #-188]	; 16300 <argp_failure@@Base+0x127c>
   163b8:	mov	r2, #0
   163bc:	ldr	r0, [fp, #-104]	; 0xffffff98
   163c0:	bl	15084 <argp_failure@@Base>
   163c4:	b	1598c <argp_failure@@Base+0x908>
   163c8:	ldr	r3, [r9, #28]
   163cc:	b	157b4 <argp_failure@@Base+0x730>
   163d0:	mov	r1, #1
   163d4:	mov	r0, r9
   163d8:	bl	18d18 <argp_parse@@Base+0x2198>
   163dc:	cmp	r0, #0
   163e0:	beq	157d0 <argp_failure@@Base+0x74c>
   163e4:	ldr	r3, [r9, #28]
   163e8:	b	157c0 <argp_failure@@Base+0x73c>
   163ec:	mov	r1, #1
   163f0:	mov	r0, r9
   163f4:	bl	18d18 <argp_parse@@Base+0x2198>
   163f8:	cmp	r0, #0
   163fc:	beq	15760 <argp_failure@@Base+0x6dc>
   16400:	ldr	r3, [r9, #28]
   16404:	b	15750 <argp_failure@@Base+0x6cc>

00016408 <argp_help@@Base>:
   16408:	push	{lr}		; (str lr, [sp, #-4]!)
   1640c:	sub	sp, sp, #12
   16410:	str	r3, [sp]
   16414:	mov	r3, r2
   16418:	mov	r2, r1
   1641c:	mov	r1, #0
   16420:	bl	1528c <argp_failure@@Base+0x208>
   16424:	add	sp, sp, #12
   16428:	pop	{pc}		; (ldr pc, [sp], #4)

0001642c <argp_state_help@@Base>:
   1642c:	push	{r4, r5, lr}
   16430:	subs	r4, r0, #0
   16434:	sub	sp, sp, #12
   16438:	mov	r5, r2
   1643c:	beq	1649c <argp_state_help@@Base+0x70>
   16440:	ldr	r3, [r4, #16]
   16444:	tst	r3, #2
   16448:	bne	16494 <argp_state_help@@Base+0x68>
   1644c:	cmp	r1, #0
   16450:	beq	16494 <argp_state_help@@Base+0x68>
   16454:	tst	r3, #64	; 0x40
   16458:	ldr	r3, [r4, #40]	; 0x28
   1645c:	orrne	r5, r5, #128	; 0x80
   16460:	ldr	r0, [r4]
   16464:	mov	r2, r1
   16468:	str	r3, [sp]
   1646c:	mov	r1, r4
   16470:	mov	r3, r5
   16474:	bl	1528c <argp_failure@@Base+0x208>
   16478:	ldr	r3, [r4, #16]
   1647c:	tst	r3, #32
   16480:	bne	16494 <argp_state_help@@Base+0x68>
   16484:	ands	r0, r5, #256	; 0x100
   16488:	bne	164c8 <argp_state_help@@Base+0x9c>
   1648c:	tst	r5, #512	; 0x200
   16490:	bne	164c4 <argp_state_help@@Base+0x98>
   16494:	add	sp, sp, #12
   16498:	pop	{r4, r5, pc}
   1649c:	cmp	r1, #0
   164a0:	beq	16494 <argp_state_help@@Base+0x68>
   164a4:	ldr	r3, [pc, #40]	; 164d4 <argp_state_help@@Base+0xa8>
   164a8:	mov	r2, r1
   164ac:	mov	r1, r4
   164b0:	ldr	ip, [r3]
   164b4:	mov	r3, r5
   164b8:	str	ip, [sp]
   164bc:	bl	1528c <argp_failure@@Base+0x208>
   164c0:	b	16484 <argp_state_help@@Base+0x58>
   164c4:	bl	112a8 <exit@plt>
   164c8:	ldr	r3, [pc, #8]	; 164d8 <argp_state_help@@Base+0xac>
   164cc:	ldr	r0, [r3]
   164d0:	bl	112a8 <exit@plt>
   164d4:	ldrdeq	ip, [r2], -r0
   164d8:			; <UNDEFINED> instruction: 0x0002c3bc

000164dc <argp_error@@Base>:
   164dc:	push	{r1, r2, r3}
   164e0:	push	{r4, r5, lr}
   164e4:	subs	r5, r0, #0
   164e8:	sub	sp, sp, #8
   164ec:	beq	165bc <argp_error@@Base+0xe0>
   164f0:	ldr	r3, [r5, #16]
   164f4:	tst	r3, #2
   164f8:	bne	165ac <argp_error@@Base+0xd0>
   164fc:	ldr	r4, [r5, #44]	; 0x2c
   16500:	cmp	r4, #0
   16504:	beq	165ac <argp_error@@Base+0xd0>
   16508:	mov	r0, r4
   1650c:	bl	113b0 <flockfile@plt>
   16510:	ldr	r0, [r5, #40]	; 0x28
   16514:	add	r3, sp, #24
   16518:	str	r3, [sp, #4]
   1651c:	mov	r1, r4
   16520:	bl	110e0 <fputs_unlocked@plt>
   16524:	ldr	r3, [r4, #20]
   16528:	ldr	r2, [r4, #24]
   1652c:	cmp	r3, r2
   16530:	addcc	r1, r3, #1
   16534:	movcc	r2, #58	; 0x3a
   16538:	strcc	r1, [r4, #20]
   1653c:	strbcc	r2, [r3]
   16540:	bcs	16608 <argp_error@@Base+0x12c>
   16544:	ldr	r3, [r4, #20]
   16548:	ldr	r2, [r4, #24]
   1654c:	cmp	r3, r2
   16550:	addcc	r1, r3, #1
   16554:	movcc	r2, #32
   16558:	strcc	r1, [r4, #20]
   1655c:	strbcc	r2, [r3]
   16560:	bcs	165f8 <argp_error@@Base+0x11c>
   16564:	ldr	r1, [sp, #20]
   16568:	ldr	r2, [sp, #4]
   1656c:	mov	r0, r4
   16570:	bl	11374 <vfprintf@plt>
   16574:	ldr	r3, [r4, #20]
   16578:	ldr	r2, [r4, #24]
   1657c:	cmp	r3, r2
   16580:	addcc	r1, r3, #1
   16584:	movcc	r2, #10
   16588:	strcc	r1, [r4, #20]
   1658c:	strbcc	r2, [r3]
   16590:	bcs	165e8 <argp_error@@Base+0x10c>
   16594:	mov	r0, r5
   16598:	mov	r2, #260	; 0x104
   1659c:	mov	r1, r4
   165a0:	bl	1642c <argp_state_help@@Base>
   165a4:	mov	r0, r4
   165a8:	bl	11200 <funlockfile@plt>
   165ac:	add	sp, sp, #8
   165b0:	pop	{r4, r5, lr}
   165b4:	add	sp, sp, #12
   165b8:	bx	lr
   165bc:	ldr	r3, [pc, #84]	; 16618 <argp_error@@Base+0x13c>
   165c0:	ldr	r4, [r3]
   165c4:	cmp	r4, #0
   165c8:	beq	165ac <argp_error@@Base+0xd0>
   165cc:	mov	r0, r4
   165d0:	bl	113b0 <flockfile@plt>
   165d4:	ldr	r2, [pc, #64]	; 1661c <argp_error@@Base+0x140>
   165d8:	add	r3, sp, #24
   165dc:	str	r3, [sp, #4]
   165e0:	ldr	r0, [r2]
   165e4:	b	1651c <argp_error@@Base+0x40>
   165e8:	mov	r1, #10
   165ec:	mov	r0, r4
   165f0:	bl	11344 <__overflow@plt>
   165f4:	b	16594 <argp_error@@Base+0xb8>
   165f8:	mov	r1, #32
   165fc:	mov	r0, r4
   16600:	bl	11344 <__overflow@plt>
   16604:	b	16564 <argp_error@@Base+0x88>
   16608:	mov	r1, #58	; 0x3a
   1660c:	mov	r0, r4
   16610:	bl	11344 <__overflow@plt>
   16614:	b	16544 <argp_error@@Base+0x68>
   16618:	ldrdeq	ip, [r2], -r8
   1661c:	ldrdeq	ip, [r2], -r0
   16620:	ldr	r3, [r0]
   16624:	push	{r4, r5, r6, lr}
   16628:	cmp	r3, #0
   1662c:	ldr	r5, [r0, #16]
   16630:	beq	16698 <argp_error@@Base+0x1bc>
   16634:	ldr	r0, [r1, #8]
   16638:	mov	r2, #0
   1663c:	add	r0, r0, #1
   16640:	str	r0, [r1, #8]
   16644:	b	1664c <argp_error@@Base+0x170>
   16648:	add	r2, r2, #1
   1664c:	add	r3, r3, #24
   16650:	ldr	r0, [r3, #-20]	; 0xffffffec
   16654:	cmp	r0, #0
   16658:	bne	16648 <argp_error@@Base+0x16c>
   1665c:	ldr	r0, [r3, #-24]	; 0xffffffe8
   16660:	cmp	r0, #0
   16664:	bne	16648 <argp_error@@Base+0x16c>
   16668:	ldr	r0, [r3, #-8]
   1666c:	cmp	r0, #0
   16670:	bne	16648 <argp_error@@Base+0x16c>
   16674:	ldr	r0, [r3, #-4]
   16678:	cmp	r0, #0
   1667c:	bne	16648 <argp_error@@Base+0x16c>
   16680:	ldm	r1, {r0, r3}
   16684:	add	ip, r2, r2, lsl #1
   16688:	add	r0, r0, ip
   1668c:	add	r2, r3, r2
   16690:	stm	r1, {r0, r2}
   16694:	b	166ac <argp_error@@Base+0x1d0>
   16698:	ldr	r3, [r0, #4]
   1669c:	cmp	r3, #0
   166a0:	ldrne	r3, [r1, #8]
   166a4:	addne	r3, r3, #1
   166a8:	strne	r3, [r1, #8]
   166ac:	cmp	r5, #0
   166b0:	popeq	{r4, r5, r6, pc}
   166b4:	ldr	r0, [r5]
   166b8:	cmp	r0, #0
   166bc:	popeq	{r4, r5, r6, pc}
   166c0:	mov	r4, r1
   166c4:	mov	r1, r4
   166c8:	bl	16620 <argp_error@@Base+0x144>
   166cc:	ldr	r3, [r4, #12]
   166d0:	ldr	r0, [r5, #16]!
   166d4:	add	r3, r3, #1
   166d8:	cmp	r0, #0
   166dc:	str	r3, [r4, #12]
   166e0:	bne	166c4 <argp_error@@Base+0x1e8>
   166e4:	pop	{r4, r5, r6, pc}
   166e8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   166ec:	sub	sp, sp, #36	; 0x24
   166f0:	ldr	sl, [r0]
   166f4:	str	r0, [sp, #12]
   166f8:	cmp	sl, #0
   166fc:	str	r1, [sp, #16]
   16700:	str	r2, [sp, #20]
   16704:	mov	r9, r3
   16708:	ldr	r8, [r0, #16]
   1670c:	ldr	r7, [sp, #72]	; 0x48
   16710:	beq	168dc <argp_error@@Base+0x400>
   16714:	add	fp, sl, #24
   16718:	str	r8, [sp, #28]
   1671c:	str	r3, [sp, #24]
   16720:	ldr	r4, [fp, #-20]	; 0xffffffec
   16724:	sub	r1, fp, #24
   16728:	cmp	r4, #0
   1672c:	bne	1673c <argp_error@@Base+0x260>
   16730:	ldr	r3, [fp, #-24]	; 0xffffffe8
   16734:	cmp	r3, #0
   16738:	beq	168b0 <argp_error@@Base+0x3d4>
   1673c:	ldr	r3, [fp, #-12]
   16740:	tst	r3, #4
   16744:	moveq	sl, r1
   16748:	moveq	r5, r3
   1674c:	ldrne	r5, [sl, #12]
   16750:	ands	r5, r5, #8
   16754:	bne	16898 <argp_error@@Base+0x3bc>
   16758:	tst	r3, #8
   1675c:	bne	167d8 <argp_error@@Base+0x2fc>
   16760:	sub	r3, r4, #1
   16764:	cmp	r3, #254	; 0xfe
   16768:	bhi	167d8 <argp_error@@Base+0x2fc>
   1676c:	bl	11290 <__ctype_b_loc@plt>
   16770:	lsl	r3, r4, #1
   16774:	ldr	r1, [r0]
   16778:	ldrh	r3, [r1, r3]
   1677c:	tst	r3, #16384	; 0x4000
   16780:	beq	167d8 <argp_error@@Base+0x2fc>
   16784:	ldr	r3, [r7, #4]
   16788:	add	r1, r3, #1
   1678c:	str	r1, [r7, #4]
   16790:	strb	r4, [r3]
   16794:	ldr	r3, [sl, #8]
   16798:	cmp	r3, #0
   1679c:	beq	167cc <argp_error@@Base+0x2f0>
   167a0:	ldr	r3, [r7, #4]
   167a4:	mov	r2, #58	; 0x3a
   167a8:	add	r1, r3, #1
   167ac:	str	r1, [r7, #4]
   167b0:	strb	r2, [r3]
   167b4:	ldr	r3, [sl, #12]
   167b8:	tst	r3, #1
   167bc:	ldrne	r3, [r7, #4]
   167c0:	addne	r1, r3, #1
   167c4:	strne	r1, [r7, #4]
   167c8:	strbne	r2, [r3]
   167cc:	ldr	r3, [r7, #4]
   167d0:	mov	r2, #0
   167d4:	strb	r2, [r3]
   167d8:	ldr	r4, [fp, #-24]	; 0xffffffe8
   167dc:	cmp	r4, #0
   167e0:	beq	16898 <argp_error@@Base+0x3bc>
   167e4:	ldr	r8, [r7]
   167e8:	ldr	r6, [r8, #8]
   167ec:	ldr	r0, [r6]
   167f0:	cmp	r0, #0
   167f4:	beq	16818 <argp_error@@Base+0x33c>
   167f8:	mov	r9, r6
   167fc:	mov	r1, r4
   16800:	bl	11104 <strcmp@plt>
   16804:	cmp	r0, #0
   16808:	beq	168a0 <argp_error@@Base+0x3c4>
   1680c:	ldr	r0, [r9, #16]!
   16810:	cmp	r0, #0
   16814:	bne	167fc <argp_error@@Base+0x320>
   16818:	ldr	r3, [sl, #8]
   1681c:	ldr	r1, [r7, #8]
   16820:	cmp	r3, #0
   16824:	str	r4, [r1]
   16828:	beq	1683c <argp_error@@Base+0x360>
   1682c:	ldr	r3, [sl, #12]
   16830:	tst	r3, #1
   16834:	moveq	r5, #1
   16838:	movne	r5, #2
   1683c:	str	r5, [r1, #4]
   16840:	ldr	ip, [fp, #-20]	; 0xffffffec
   16844:	mov	r3, #0
   16848:	cmp	ip, r3
   1684c:	str	r3, [r1, #8]
   16850:	ldr	r2, [sp, #24]
   16854:	ldr	r3, [r8, #48]	; 0x30
   16858:	ldreq	ip, [sl, #4]
   1685c:	sub	r3, r2, r3
   16860:	bic	ip, ip, #-16777216	; 0xff000000
   16864:	asr	r3, r3, #2
   16868:	add	lr, r1, #16
   1686c:	rsb	r0, r3, r3, lsl #3
   16870:	add	r0, r0, r0, lsl #6
   16874:	add	r0, r3, r0, lsl #3
   16878:	rsb	r0, r0, r0, lsl #15
   1687c:	add	r3, r3, r0, lsl #3
   16880:	add	r3, r3, #1
   16884:	add	r3, ip, r3, lsl #24
   16888:	str	r3, [r1, #12]
   1688c:	mov	r3, #0
   16890:	str	lr, [r7, #8]
   16894:	str	r3, [r1, #16]
   16898:	add	fp, fp, #24
   1689c:	b	16720 <argp_error@@Base+0x244>
   168a0:	sub	r6, r9, r6
   168a4:	cmn	r6, #15
   168a8:	bge	16898 <argp_error@@Base+0x3bc>
   168ac:	b	16818 <argp_error@@Base+0x33c>
   168b0:	ldr	r3, [fp, #-8]
   168b4:	cmp	r3, #0
   168b8:	bne	1673c <argp_error@@Base+0x260>
   168bc:	ldr	r3, [fp, #-4]
   168c0:	cmp	r3, #0
   168c4:	bne	1673c <argp_error@@Base+0x260>
   168c8:	ldr	r3, [sp, #12]
   168cc:	ldr	r8, [sp, #28]
   168d0:	ldr	r9, [sp, #24]
   168d4:	ldr	r3, [r3, #4]
   168d8:	b	168f4 <argp_error@@Base+0x418>
   168dc:	ldr	r3, [sp, #12]
   168e0:	ldr	r3, [r3, #4]
   168e4:	cmp	r3, #0
   168e8:	moveq	r0, r9
   168ec:	moveq	r9, r3
   168f0:	beq	16964 <argp_error@@Base+0x488>
   168f4:	ldr	r2, [r7, #4]
   168f8:	ldr	r1, [sp, #12]
   168fc:	str	r3, [r9]
   16900:	cmp	r8, #0
   16904:	stmib	r9, {r1, r2}
   16908:	ldr	r2, [sp, #16]
   1690c:	mov	r3, #0
   16910:	str	r2, [r9, #16]
   16914:	ldr	r2, [sp, #20]
   16918:	str	r3, [r9, #12]
   1691c:	str	r2, [r9, #20]
   16920:	str	r3, [r9, #24]
   16924:	str	r3, [r9, #32]
   16928:	str	r3, [r9, #28]
   1692c:	beq	16960 <argp_error@@Base+0x484>
   16930:	ldr	r2, [r8]
   16934:	cmp	r2, r3
   16938:	beq	169ac <argp_error@@Base+0x4d0>
   1693c:	add	r3, r3, #1
   16940:	ldr	r2, [r8, r3, lsl #4]
   16944:	cmp	r2, #0
   16948:	bne	1693c <argp_error@@Base+0x460>
   1694c:	lsl	r3, r3, #2
   16950:	ldr	r2, [r7, #12]
   16954:	add	r3, r2, r3
   16958:	str	r2, [r9, #28]
   1695c:	str	r3, [r7, #12]
   16960:	add	r0, r9, #36	; 0x24
   16964:	cmp	r8, #0
   16968:	beq	169a4 <argp_error@@Base+0x4c8>
   1696c:	ldr	r1, [r8]
   16970:	cmp	r1, #0
   16974:	beq	169a4 <argp_error@@Base+0x4c8>
   16978:	mov	r2, #0
   1697c:	add	r4, r2, #1
   16980:	mov	r3, r0
   16984:	str	r7, [sp]
   16988:	mov	r0, r1
   1698c:	mov	r1, r9
   16990:	bl	166e8 <argp_error@@Base+0x20c>
   16994:	ldr	r1, [r8, r4, lsl #4]
   16998:	mov	r2, r4
   1699c:	cmp	r1, #0
   169a0:	bne	1697c <argp_error@@Base+0x4a0>
   169a4:	add	sp, sp, #36	; 0x24
   169a8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   169ac:	mov	r3, r2
   169b0:	b	16950 <argp_error@@Base+0x474>
   169b4:	cmp	r0, #86	; 0x56
   169b8:	beq	169c4 <argp_error@@Base+0x4e8>
   169bc:	mov	r0, #7
   169c0:	bx	lr
   169c4:	ldr	r3, [pc, #104]	; 16a34 <argp_error@@Base+0x558>
   169c8:	push	{r4, lr}
   169cc:	mov	r4, r2
   169d0:	ldr	r3, [r3]
   169d4:	cmp	r3, #0
   169d8:	beq	169fc <argp_error@@Base+0x520>
   169dc:	mov	r1, r2
   169e0:	ldr	r0, [r2, #48]	; 0x30
   169e4:	blx	r3
   169e8:	ldr	r0, [r4, #16]
   169ec:	ands	r0, r0, #32
   169f0:	beq	16a30 <argp_error@@Base+0x554>
   169f4:	mov	r0, #0
   169f8:	pop	{r4, pc}
   169fc:	ldr	r3, [pc, #52]	; 16a38 <argp_error@@Base+0x55c>
   16a00:	ldr	r2, [r3]
   16a04:	cmp	r2, #0
   16a08:	beq	16a1c <argp_error@@Base+0x540>
   16a0c:	ldr	r1, [pc, #40]	; 16a3c <argp_error@@Base+0x560>
   16a10:	ldr	r0, [r4, #48]	; 0x30
   16a14:	bl	112d8 <fprintf@plt>
   16a18:	b	169e8 <argp_error@@Base+0x50c>
   16a1c:	ldr	r2, [pc, #28]	; 16a40 <argp_error@@Base+0x564>
   16a20:	ldr	r1, [pc, #28]	; 16a44 <argp_error@@Base+0x568>
   16a24:	mov	r0, r4
   16a28:	bl	164dc <argp_error@@Base>
   16a2c:	b	169e8 <argp_error@@Base+0x50c>
   16a30:	bl	112a8 <exit@plt>
   16a34:	andeq	ip, r2, r0, lsl r4
   16a38:	andeq	ip, r2, ip, asr r4
   16a3c:	andeq	sl, r1, r0, asr #28
   16a40:			; <UNDEFINED> instruction: 0x0001acb4
   16a44:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   16a48:	cmn	r0, #3
   16a4c:	push	{r4, r5, lr}
   16a50:	mov	r4, r2
   16a54:	sub	sp, sp, #12
   16a58:	beq	16b3c <argp_error@@Base+0x660>
   16a5c:	ble	16acc <argp_error@@Base+0x5f0>
   16a60:	cmn	r0, #2
   16a64:	beq	16a8c <argp_error@@Base+0x5b0>
   16a68:	cmp	r0, #63	; 0x3f
   16a6c:	bne	16b30 <argp_error@@Base+0x654>
   16a70:	mov	r0, r4
   16a74:	ldr	r2, [pc, #236]	; 16b68 <argp_error@@Base+0x68c>
   16a78:	ldr	r1, [r4, #48]	; 0x30
   16a7c:	bl	1642c <argp_state_help@@Base>
   16a80:	mov	r0, #0
   16a84:	add	sp, sp, #12
   16a88:	pop	{r4, r5, pc}
   16a8c:	ldr	r3, [pc, #216]	; 16b6c <argp_error@@Base+0x690>
   16a90:	mov	r0, r1
   16a94:	str	r1, [sp, #4]
   16a98:	str	r1, [r3]
   16a9c:	bl	1796c <argp_parse@@Base+0xdec>
   16aa0:	ldr	r3, [r4, #16]
   16aa4:	ldr	r2, [pc, #196]	; 16b70 <argp_error@@Base+0x694>
   16aa8:	and	r3, r3, #3
   16aac:	cmp	r3, #1
   16ab0:	ldr	r1, [sp, #4]
   16ab4:	str	r0, [r4, #40]	; 0x28
   16ab8:	str	r0, [r2]
   16abc:	beq	16b58 <argp_error@@Base+0x67c>
   16ac0:	mov	r0, #0
   16ac4:	add	sp, sp, #12
   16ac8:	pop	{r4, r5, pc}
   16acc:	cmn	r0, #4
   16ad0:	bne	16b30 <argp_error@@Base+0x654>
   16ad4:	cmp	r1, #0
   16ad8:	ldr	r0, [pc, #148]	; 16b74 <argp_error@@Base+0x698>
   16adc:	mov	r2, #10
   16ae0:	movne	r0, r1
   16ae4:	mov	r1, #0
   16ae8:	bl	11110 <strtol@plt>
   16aec:	ldr	r4, [pc, #132]	; 16b78 <argp_error@@Base+0x69c>
   16af0:	str	r0, [r4]
   16af4:	ldr	r3, [r4]
   16af8:	cmp	r3, #0
   16afc:	sub	r3, r3, #1
   16b00:	str	r3, [r4]
   16b04:	ble	16ac0 <argp_error@@Base+0x5e4>
   16b08:	mov	r5, #1
   16b0c:	mov	r0, r5
   16b10:	bl	111c4 <sleep@plt>
   16b14:	ldr	r3, [r4]
   16b18:	cmp	r3, #0
   16b1c:	sub	r3, r3, #1
   16b20:	str	r3, [r4]
   16b24:	bgt	16b0c <argp_error@@Base+0x630>
   16b28:	mov	r0, #0
   16b2c:	b	16ac4 <argp_error@@Base+0x5e8>
   16b30:	mov	r0, #7
   16b34:	add	sp, sp, #12
   16b38:	pop	{r4, r5, pc}
   16b3c:	mov	r0, r4
   16b40:	ldr	r2, [pc, #52]	; 16b7c <argp_error@@Base+0x6a0>
   16b44:	ldr	r1, [r4, #48]	; 0x30
   16b48:	bl	1642c <argp_state_help@@Base>
   16b4c:	mov	r0, #0
   16b50:	add	sp, sp, #12
   16b54:	pop	{r4, r5, pc}
   16b58:	ldr	r3, [r4, #8]
   16b5c:	mov	r0, #0
   16b60:	str	r1, [r3]
   16b64:	b	16a84 <argp_error@@Base+0x5a8>
   16b68:	andeq	r0, r0, sl, ror r2
   16b6c:	ldrdeq	ip, [r2], -r4
   16b70:	ldrdeq	ip, [r2], -r0
   16b74:	ldrdeq	sl, [r1], -r8
   16b78:	andeq	ip, r2, ip, lsl #8
   16b7c:	andeq	r0, r0, r1, lsl #4

00016b80 <argp_parse@@Base>:
   16b80:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16b84:	add	fp, sp, #32
   16b88:	tst	r3, #1
   16b8c:	sub	sp, sp, #228	; 0xe4
   16b90:	mov	r6, r3
   16b94:	mov	r7, r0
   16b98:	str	r1, [fp, #-240]	; 0xffffff10
   16b9c:	str	r2, [fp, #-232]	; 0xffffff18
   16ba0:	bne	16bcc <argp_parse@@Base+0x4c>
   16ba4:	ldr	r3, [pc, #3260]	; 17868 <argp_parse@@Base+0xce8>
   16ba8:	ldr	r4, [pc, #3260]	; 1786c <argp_parse@@Base+0xcec>
   16bac:	ldr	r2, [r3]
   16bb0:	cmp	r2, #0
   16bb4:	ldreq	r2, [fp, #-232]	; 0xffffff18
   16bb8:	ldreq	r2, [r2]
   16bbc:	streq	r2, [r3]
   16bc0:	ldr	r3, [r4]
   16bc4:	cmp	r3, #0
   16bc8:	beq	1726c <argp_parse@@Base+0x6ec>
   16bcc:	ands	r3, r6, #16
   16bd0:	beq	17174 <argp_parse@@Base+0x5f4>
   16bd4:	sub	r4, fp, #196	; 0xc4
   16bd8:	mov	r0, r4
   16bdc:	mov	r2, #36	; 0x24
   16be0:	mov	r1, #0
   16be4:	bl	11314 <memset@plt>
   16be8:	ands	r3, r6, #4
   16bec:	str	r3, [fp, #-244]	; 0xffffff0c
   16bf0:	mov	r3, #0
   16bf4:	moveq	r0, #1
   16bf8:	movne	r0, #0
   16bfc:	cmp	r7, r3
   16c00:	str	r3, [fp, #-224]	; 0xffffff20
   16c04:	str	r3, [fp, #-220]	; 0xffffff24
   16c08:	str	r3, [fp, #-216]	; 0xffffff28
   16c0c:	str	r0, [fp, #-228]	; 0xffffff1c
   16c10:	beq	17078 <argp_parse@@Base+0x4f8>
   16c14:	mov	r0, r7
   16c18:	sub	r1, fp, #228	; 0xe4
   16c1c:	bl	16620 <argp_error@@Base+0x144>
   16c20:	ldr	r5, [fp, #-220]	; 0xffffff24
   16c24:	ldr	r9, [fp, #-216]	; 0xffffff28
   16c28:	add	r5, r5, #1
   16c2c:	ldr	r3, [fp, #-224]	; 0xffffff20
   16c30:	add	r5, r5, r5, lsl #3
   16c34:	lsl	r2, r9, #2
   16c38:	lsl	r5, r5, #2
   16c3c:	add	r3, r3, #1
   16c40:	add	sl, r2, r5
   16c44:	ldr	r0, [fp, #-228]	; 0xffffff1c
   16c48:	add	r9, sl, r3, lsl #4
   16c4c:	str	r2, [fp, #-236]	; 0xffffff14
   16c50:	add	r0, r9, r0
   16c54:	add	r0, r0, #1
   16c58:	bl	18584 <argp_parse@@Base+0x1a04>
   16c5c:	cmp	r0, #0
   16c60:	mov	r8, r0
   16c64:	str	r0, [fp, #-40]	; 0xffffffd8
   16c68:	moveq	r5, #12
   16c6c:	beq	1706c <argp_parse@@Base+0x4ec>
   16c70:	mov	r3, #1
   16c74:	str	r3, [fp, #-196]	; 0xffffff3c
   16c78:	str	r3, [fp, #-192]	; 0xffffff40
   16c7c:	ldm	r4!, {r0, r1, r2, r3}
   16c80:	sub	ip, fp, #148	; 0x94
   16c84:	add	r5, r8, r5
   16c88:	str	r5, [fp, #-104]	; 0xffffff98
   16c8c:	stmia	ip!, {r0, r1, r2, r3}
   16c90:	add	r3, r8, sl
   16c94:	mov	lr, r3
   16c98:	ldm	r4!, {r0, r1, r2, r3}
   16c9c:	add	sl, r8, r9
   16ca0:	str	lr, [fp, #-248]	; 0xffffff08
   16ca4:	str	lr, [fp, #-152]	; 0xffffff68
   16ca8:	ldr	lr, [r4]
   16cac:	stmia	ip!, {r0, r1, r2, r3}
   16cb0:	mov	r0, r5
   16cb4:	ldr	r2, [fp, #-236]	; 0xffffff14
   16cb8:	mov	r1, #0
   16cbc:	str	lr, [ip]
   16cc0:	str	r8, [fp, #-112]	; 0xffffff90
   16cc4:	str	sl, [fp, #-156]	; 0xffffff64
   16cc8:	bl	11314 <memset@plt>
   16ccc:	ldr	lr, [fp, #-248]	; 0xffffff08
   16cd0:	sub	r4, fp, #160	; 0xa0
   16cd4:	tst	r6, #8
   16cd8:	str	lr, [fp, #-204]	; 0xffffff34
   16cdc:	str	sl, [fp, #-208]	; 0xffffff30
   16ce0:	str	r5, [fp, #-200]	; 0xffffff38
   16ce4:	str	r4, [fp, #-212]	; 0xffffff2c
   16ce8:	bne	1708c <argp_parse@@Base+0x50c>
   16cec:	ldr	r3, [fp, #-244]	; 0xffffff0c
   16cf0:	cmp	r3, #0
   16cf4:	addne	r3, sl, #1
   16cf8:	movne	r2, #43	; 0x2b
   16cfc:	strbne	r2, [sl]
   16d00:	movne	sl, r3
   16d04:	strne	r3, [fp, #-208]	; 0xffffff30
   16d08:	mov	r2, #0
   16d0c:	strb	r2, [sl]
   16d10:	ldr	r3, [fp, #-204]	; 0xffffff34
   16d14:	cmp	r7, r2
   16d18:	str	r2, [r3]
   16d1c:	str	r7, [fp, #-160]	; 0xffffff60
   16d20:	beq	17234 <argp_parse@@Base+0x6b4>
   16d24:	sub	r1, fp, #212	; 0xd4
   16d28:	mov	r0, r7
   16d2c:	str	r1, [sp]
   16d30:	ldr	r3, [fp, #-112]	; 0xffffff90
   16d34:	mov	r1, r2
   16d38:	bl	166e8 <argp_error@@Base+0x20c>
   16d3c:	ldr	r7, [fp, #-160]	; 0xffffff60
   16d40:	ldr	r5, [fp, #-112]	; 0xffffff90
   16d44:	mov	r8, r0
   16d48:	str	r0, [fp, #-108]	; 0xffffff94
   16d4c:	mov	r2, #56	; 0x38
   16d50:	mov	r1, #0
   16d54:	sub	r0, fp, #96	; 0x60
   16d58:	bl	11314 <memset@plt>
   16d5c:	ldr	r2, [pc, #2828]	; 17870 <argp_parse@@Base+0xcf0>
   16d60:	ldr	r3, [pc, #2828]	; 17874 <argp_parse@@Base+0xcf4>
   16d64:	ldr	r0, [fp, #-240]	; 0xffffff10
   16d68:	ldr	r1, [r2]
   16d6c:	str	r0, [fp, #-92]	; 0xffffffa4
   16d70:	ldr	r2, [r3]
   16d74:	ldr	r0, [fp, #-232]	; 0xffffff18
   16d78:	mov	r3, #1
   16d7c:	cmp	r5, r8
   16d80:	str	r7, [fp, #-96]	; 0xffffffa0
   16d84:	str	r0, [fp, #-88]	; 0xffffffa8
   16d88:	str	r6, [fp, #-80]	; 0xffffffb0
   16d8c:	str	r4, [fp, #-44]	; 0xffffffd4
   16d90:	str	r1, [fp, #-52]	; 0xffffffcc
   16d94:	str	r2, [fp, #-48]	; 0xffffffd0
   16d98:	str	r3, [fp, #-100]	; 0xffffff9c
   16d9c:	bcc	170a0 <argp_parse@@Base+0x520>
   16da0:	ldr	r3, [fp, #-80]	; 0xffffffb0
   16da4:	tst	r3, #2
   16da8:	bne	17244 <argp_parse@@Base+0x6c4>
   16dac:	ldr	r3, [fp, #-88]	; 0xffffffa8
   16db0:	ldr	r4, [fp, #-92]	; 0xffffffa4
   16db4:	mov	r2, #1
   16db8:	str	r2, [fp, #-144]	; 0xffffff70
   16dbc:	ldr	r2, [fp, #-232]	; 0xffffff18
   16dc0:	cmp	r2, r3
   16dc4:	beq	17744 <argp_parse@@Base+0xbc4>
   16dc8:	ldr	r3, [pc, #2716]	; 1786c <argp_parse@@Base+0xcec>
   16dcc:	ldr	r3, [r3]
   16dd0:	str	r3, [fp, #-56]	; 0xffffffc8
   16dd4:	ldr	r2, [fp, #-100]	; 0xffffff9c
   16dd8:	ldr	r5, [fp, #-84]	; 0xffffffac
   16ddc:	ldr	sl, [pc, #2708]	; 17878 <argp_parse@@Base+0xcf8>
   16de0:	mov	r0, r4
   16de4:	mov	r6, #0
   16de8:	ldr	r3, [fp, #-72]	; 0xffffffb8
   16dec:	cmp	r3, #0
   16df0:	beq	17280 <argp_parse@@Base+0x700>
   16df4:	cmp	r3, r5
   16df8:	strgt	r6, [fp, #-72]	; 0xffffffb8
   16dfc:	bgt	17280 <argp_parse@@Base+0x700>
   16e00:	cmp	r5, r0
   16e04:	blt	1761c <argp_parse@@Base+0xa9c>
   16e08:	cmp	r5, r0
   16e0c:	bne	17628 <argp_parse@@Base+0xaa8>
   16e10:	ldr	r3, [fp, #-112]	; 0xffffff90
   16e14:	ldr	ip, [fp, #-108]	; 0xffffff94
   16e18:	cmp	r3, ip
   16e1c:	bcs	1780c <argp_parse@@Base+0xc8c>
   16e20:	mov	r5, #0
   16e24:	add	r4, r3, #36	; 0x24
   16e28:	mov	r7, r5
   16e2c:	ldr	r6, [pc, #2632]	; 1787c <argp_parse@@Base+0xcfc>
   16e30:	mov	r0, r5
   16e34:	b	16e7c <argp_parse@@Base+0x2fc>
   16e38:	ldr	ip, [r4, #-4]
   16e3c:	str	ip, [fp, #-60]	; 0xffffffc4
   16e40:	ldr	ip, [r4, #-12]
   16e44:	str	ip, [fp, #-68]	; 0xffffffbc
   16e48:	ldr	ip, [r4, #-8]
   16e4c:	str	r3, [fp, #-76]	; 0xffffffb4
   16e50:	str	ip, [fp, #-64]	; 0xffffffc0
   16e54:	blx	r5
   16e58:	ldr	r3, [fp, #-60]	; 0xffffffc4
   16e5c:	str	r3, [r4, #-4]
   16e60:	ldr	ip, [fp, #-108]	; 0xffffff94
   16e64:	cmp	ip, r4
   16e68:	bls	177b4 <argp_parse@@Base+0xc34>
   16e6c:	cmp	r0, #7
   16e70:	cmpne	r0, #0
   16e74:	bne	17790 <argp_parse@@Base+0xc10>
   16e78:	add	r4, r4, #36	; 0x24
   16e7c:	ldr	r3, [r4, #-24]	; 0xffffffe8
   16e80:	cmp	r3, #0
   16e84:	bne	16e64 <argp_parse@@Base+0x2e4>
   16e88:	ldr	r5, [r4, #-36]	; 0xffffffdc
   16e8c:	sub	r2, fp, #96	; 0x60
   16e90:	cmp	r5, #0
   16e94:	mov	r1, r7
   16e98:	mov	r0, r6
   16e9c:	bne	16e38 <argp_parse@@Base+0x2b8>
   16ea0:	cmp	ip, r4
   16ea4:	mov	r0, #7
   16ea8:	bhi	16e78 <argp_parse@@Base+0x2f8>
   16eac:	ldr	r3, [fp, #-112]	; 0xffffff90
   16eb0:	sub	r4, ip, #36	; 0x24
   16eb4:	cmp	r4, r3
   16eb8:	movcs	r5, #7
   16ebc:	bcc	16f44 <argp_parse@@Base+0x3c4>
   16ec0:	cmp	r5, #7
   16ec4:	cmpne	r5, #0
   16ec8:	bne	177a4 <argp_parse@@Base+0xc24>
   16ecc:	sub	r4, r4, #36	; 0x24
   16ed0:	mov	r7, #0
   16ed4:	ldr	r6, [pc, #2468]	; 17880 <argp_parse@@Base+0xd00>
   16ed8:	b	16f24 <argp_parse@@Base+0x3a4>
   16edc:	ldr	r3, [r4, #68]	; 0x44
   16ee0:	ldr	ip, [r4, #48]	; 0x30
   16ee4:	str	r3, [fp, #-60]	; 0xffffffc4
   16ee8:	ldr	r3, [r4, #60]	; 0x3c
   16eec:	str	r3, [fp, #-68]	; 0xffffffbc
   16ef0:	ldr	r3, [r4, #64]	; 0x40
   16ef4:	str	ip, [fp, #-76]	; 0xffffffb4
   16ef8:	str	r3, [fp, #-64]	; 0xffffffc0
   16efc:	blx	r5
   16f00:	ldr	r3, [fp, #-60]	; 0xffffffc4
   16f04:	str	r3, [r4, #68]	; 0x44
   16f08:	ldr	r3, [fp, #-112]	; 0xffffff90
   16f0c:	cmp	r4, r3
   16f10:	bcc	17804 <argp_parse@@Base+0xc84>
   16f14:	cmp	r0, #7
   16f18:	cmpne	r0, #0
   16f1c:	bne	17774 <argp_parse@@Base+0xbf4>
   16f20:	sub	r4, r4, #36	; 0x24
   16f24:	ldr	r5, [r4, #36]	; 0x24
   16f28:	sub	r2, fp, #96	; 0x60
   16f2c:	cmp	r5, #0
   16f30:	mov	r1, r7
   16f34:	mov	r0, r6
   16f38:	bne	16edc <argp_parse@@Base+0x35c>
   16f3c:	cmp	r4, r3
   16f40:	bcs	16f20 <argp_parse@@Base+0x3a0>
   16f44:	ldr	r2, [fp, #4]
   16f48:	cmp	r2, #0
   16f4c:	beq	16f68 <argp_parse@@Base+0x3e8>
   16f50:	mov	r5, #0
   16f54:	ldr	r1, [fp, #4]
   16f58:	ldr	r2, [fp, #-84]	; 0xffffffac
   16f5c:	str	r2, [r1]
   16f60:	cmp	r5, #0
   16f64:	bne	17784 <argp_parse@@Base+0xc04>
   16f68:	ldr	ip, [fp, #-108]	; 0xffffff94
   16f6c:	b	17640 <argp_parse@@Base+0xac0>
   16f70:	ldr	r3, [fp, #-112]	; 0xffffff90
   16f74:	mov	r5, r0
   16f78:	ldr	ip, [fp, #-108]	; 0xffffff94
   16f7c:	cmp	ip, r3
   16f80:	bls	1773c <argp_parse@@Base+0xbbc>
   16f84:	ldr	r7, [pc, #2296]	; 17884 <argp_parse@@Base+0xd04>
   16f88:	add	r4, r3, #36	; 0x24
   16f8c:	mov	r8, #0
   16f90:	ldr	r3, [r4, #-36]	; 0xffffffdc
   16f94:	sub	r2, fp, #96	; 0x60
   16f98:	cmp	r3, #0
   16f9c:	mov	r1, r8
   16fa0:	mov	r0, r7
   16fa4:	mov	r6, r4
   16fa8:	beq	16fdc <argp_parse@@Base+0x45c>
   16fac:	ldr	ip, [r4, #-4]
   16fb0:	ldr	lr, [r4, #-24]	; 0xffffffe8
   16fb4:	str	ip, [fp, #-60]	; 0xffffffc4
   16fb8:	ldr	ip, [r4, #-12]
   16fbc:	str	ip, [fp, #-68]	; 0xffffffbc
   16fc0:	ldr	ip, [r4, #-8]
   16fc4:	str	lr, [fp, #-76]	; 0xffffffb4
   16fc8:	str	ip, [fp, #-64]	; 0xffffffc0
   16fcc:	blx	r3
   16fd0:	ldr	r3, [fp, #-60]	; 0xffffffc4
   16fd4:	str	r3, [r4, #-4]
   16fd8:	ldr	ip, [fp, #-108]	; 0xffffff94
   16fdc:	cmp	ip, r6
   16fe0:	add	r4, r4, #36	; 0x24
   16fe4:	bhi	16f90 <argp_parse@@Base+0x410>
   16fe8:	ldr	r3, [fp, #-112]	; 0xffffff90
   16fec:	sub	ip, ip, #36	; 0x24
   16ff0:	cmp	r3, ip
   16ff4:	bhi	1705c <argp_parse@@Base+0x4dc>
   16ff8:	ldr	r8, [pc, #2184]	; 17888 <argp_parse@@Base+0xd08>
   16ffc:	sub	r4, ip, #36	; 0x24
   17000:	mov	r9, #0
   17004:	ldr	r6, [r4, #36]	; 0x24
   17008:	sub	r2, fp, #96	; 0x60
   1700c:	cmp	r6, #0
   17010:	mov	r1, r9
   17014:	mov	r0, r8
   17018:	mov	r7, r4
   1701c:	beq	17050 <argp_parse@@Base+0x4d0>
   17020:	ldr	r3, [r4, #68]	; 0x44
   17024:	ldr	ip, [r4, #48]	; 0x30
   17028:	str	r3, [fp, #-60]	; 0xffffffc4
   1702c:	ldr	r3, [r4, #60]	; 0x3c
   17030:	str	r3, [fp, #-68]	; 0xffffffbc
   17034:	ldr	r3, [r4, #64]	; 0x40
   17038:	str	ip, [fp, #-76]	; 0xffffffb4
   1703c:	str	r3, [fp, #-64]	; 0xffffffc0
   17040:	blx	r6
   17044:	ldr	r3, [fp, #-60]	; 0xffffffc4
   17048:	str	r3, [r4, #68]	; 0x44
   1704c:	ldr	r3, [fp, #-112]	; 0xffffff90
   17050:	cmp	r3, r7
   17054:	sub	r4, r4, #36	; 0x24
   17058:	bls	17004 <argp_parse@@Base+0x484>
   1705c:	cmp	r5, #7
   17060:	moveq	r5, #22
   17064:	ldr	r0, [fp, #-40]	; 0xffffffd8
   17068:	bl	17a18 <argp_parse@@Base+0xe98>
   1706c:	mov	r0, r5
   17070:	sub	sp, fp, #32
   17074:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17078:	mov	sl, #36	; 0x24
   1707c:	mov	r5, sl
   17080:	mov	r9, #52	; 0x34
   17084:	str	r7, [fp, #-236]	; 0xffffff14
   17088:	b	16c50 <argp_parse@@Base+0xd0>
   1708c:	add	sl, sl, #1
   17090:	mov	r3, #45	; 0x2d
   17094:	str	sl, [fp, #-208]	; 0xffffff30
   17098:	strb	r3, [r8, r9]
   1709c:	b	16d08 <argp_parse@@Base+0x188>
   170a0:	ldr	r3, [fp, #8]
   170a4:	add	r4, r5, #36	; 0x24
   170a8:	str	r3, [r5, #24]
   170ac:	mov	r7, #0
   170b0:	ldr	r6, [pc, #2004]	; 1788c <argp_parse@@Base+0xd0c>
   170b4:	b	1710c <argp_parse@@Base+0x58c>
   170b8:	ldr	r2, [r4, #-4]
   170bc:	ldr	r0, [r4, #-24]	; 0xffffffe8
   170c0:	str	r2, [fp, #-60]	; 0xffffffc4
   170c4:	ldr	r1, [r4, #-12]
   170c8:	sub	r2, fp, #96	; 0x60
   170cc:	str	r1, [fp, #-68]	; 0xffffffbc
   170d0:	ldr	ip, [r4, #-8]
   170d4:	mov	r1, r7
   170d8:	str	r0, [fp, #-76]	; 0xffffffb4
   170dc:	str	ip, [fp, #-64]	; 0xffffffc0
   170e0:	mov	r0, r6
   170e4:	blx	r3
   170e8:	ldr	r3, [fp, #-60]	; 0xffffffc4
   170ec:	str	r3, [r4, #-4]
   170f0:	ldr	r3, [fp, #-108]	; 0xffffff94
   170f4:	cmp	r3, r4
   170f8:	bls	17828 <argp_parse@@Base+0xca8>
   170fc:	cmp	r0, #7
   17100:	cmpne	r0, #0
   17104:	bne	17224 <argp_parse@@Base+0x6a4>
   17108:	add	r4, r4, #36	; 0x24
   1710c:	ldr	r3, [r4, #-20]	; 0xffffffec
   17110:	cmp	r3, #0
   17114:	ldrne	r3, [r3, #28]
   17118:	ldrne	r2, [r4, #-16]
   1711c:	ldrne	r3, [r3, r2, lsl #2]
   17120:	strne	r3, [r4, #-12]
   17124:	ldr	r3, [r4, #-36]	; 0xffffffdc
   17128:	cmp	r3, #0
   1712c:	bne	170b8 <argp_parse@@Base+0x538>
   17130:	ldr	r3, [r4, #-32]	; 0xffffffe0
   17134:	ldr	r3, [r3, #16]
   17138:	cmp	r3, #0
   1713c:	beq	17164 <argp_parse@@Base+0x5e4>
   17140:	ldr	r3, [r3]
   17144:	cmp	r3, #0
   17148:	beq	17164 <argp_parse@@Base+0x5e4>
   1714c:	ldr	r3, [r4, #-8]
   17150:	ldr	r2, [r4, #-12]
   17154:	str	r2, [r3]
   17158:	ldr	r3, [r4, #-36]	; 0xffffffdc
   1715c:	cmp	r3, #0
   17160:	bne	170b8 <argp_parse@@Base+0x538>
   17164:	ldr	r3, [fp, #-108]	; 0xffffff94
   17168:	cmp	r3, r4
   1716c:	bhi	17108 <argp_parse@@Base+0x588>
   17170:	b	16da0 <argp_parse@@Base+0x220>
   17174:	sub	sp, sp, #72	; 0x48
   17178:	add	r4, sp, #8
   1717c:	sub	sp, sp, #40	; 0x28
   17180:	add	r5, sp, #8
   17184:	mov	r1, r3
   17188:	mov	r0, r4
   1718c:	mov	r2, #64	; 0x40
   17190:	str	r3, [r5]
   17194:	str	r3, [r5, #4]
   17198:	str	r3, [r5, #8]
   1719c:	str	r3, [r5, #12]
   171a0:	str	r3, [r5, #20]
   171a4:	str	r3, [r5, #24]
   171a8:	str	r4, [r5, #16]
   171ac:	bl	11314 <memset@plt>
   171b0:	ldr	r3, [pc, #1752]	; 17890 <argp_parse@@Base+0xd10>
   171b4:	cmp	r7, #0
   171b8:	strne	r7, [r4]
   171bc:	ldr	r3, [r3]
   171c0:	addne	r4, r4, #16
   171c4:	ldr	r2, [pc, #1736]	; 17894 <argp_parse@@Base+0xd14>
   171c8:	cmp	r3, #0
   171cc:	str	r2, [r4]
   171d0:	beq	1775c <argp_parse@@Base+0xbdc>
   171d4:	ldr	r2, [pc, #1724]	; 17898 <argp_parse@@Base+0xd18>
   171d8:	add	r3, r4, #32
   171dc:	str	r2, [r4, #16]
   171e0:	mov	r8, #0
   171e4:	sub	r4, fp, #196	; 0xc4
   171e8:	str	r8, [r3]
   171ec:	mov	r1, r8
   171f0:	mov	r0, r4
   171f4:	mov	r2, #36	; 0x24
   171f8:	bl	11314 <memset@plt>
   171fc:	ands	r3, r6, #4
   17200:	str	r3, [fp, #-244]	; 0xffffff0c
   17204:	moveq	r3, #1
   17208:	movne	r3, r8
   1720c:	mov	r7, r5
   17210:	str	r8, [fp, #-224]	; 0xffffff20
   17214:	str	r8, [fp, #-220]	; 0xffffff24
   17218:	str	r8, [fp, #-216]	; 0xffffff28
   1721c:	str	r3, [fp, #-228]	; 0xffffff1c
   17220:	b	16c14 <argp_parse@@Base+0x94>
   17224:	mov	r5, r0
   17228:	mov	r0, r5
   1722c:	sub	sp, fp, #32
   17230:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17234:	ldr	r5, [fp, #-112]	; 0xffffff90
   17238:	mov	r8, r5
   1723c:	str	r5, [fp, #-108]	; 0xffffff94
   17240:	b	16d4c <argp_parse@@Base+0x1cc>
   17244:	tst	r3, #1
   17248:	mov	r3, #0
   1724c:	str	r3, [fp, #-144]	; 0xffffff70
   17250:	ldr	r4, [fp, #-92]	; 0xffffffa4
   17254:	ldr	r3, [fp, #-88]	; 0xffffffa8
   17258:	subne	r3, r3, #4
   1725c:	addne	r4, r4, #1
   17260:	strne	r3, [fp, #-88]	; 0xffffffa8
   17264:	strne	r4, [fp, #-92]	; 0xffffffa4
   17268:	b	16dbc <argp_parse@@Base+0x23c>
   1726c:	ldr	r3, [fp, #-232]	; 0xffffff18
   17270:	ldr	r0, [r3]
   17274:	bl	1796c <argp_parse@@Base+0xdec>
   17278:	str	r0, [r4]
   1727c:	b	16bcc <argp_parse@@Base+0x4c>
   17280:	cmp	r2, #0
   17284:	beq	16e00 <argp_parse@@Base+0x280>
   17288:	ldr	r3, [fp, #-80]	; 0xffffffb0
   1728c:	str	r5, [fp, #-148]	; 0xffffff6c
   17290:	ands	ip, r3, #64	; 0x40
   17294:	mvn	r3, #0
   17298:	str	r3, [fp, #-140]	; 0xffffff74
   1729c:	ldr	r2, [fp, #-156]	; 0xffffff64
   172a0:	ldr	r3, [fp, #-152]	; 0xffffff68
   172a4:	ldr	r1, [fp, #-88]	; 0xffffffa8
   172a8:	beq	175c8 <argp_parse@@Base+0xa48>
   172ac:	sub	ip, fp, #148	; 0x94
   172b0:	stm	sp, {r6, ip}
   172b4:	bl	17aec <argp_parse@@Base+0xf6c>
   172b8:	ldr	r5, [fp, #-148]	; 0xffffff6c
   172bc:	str	r5, [fp, #-84]	; 0xffffffac
   172c0:	mov	r7, r0
   172c4:	cmn	r7, #1
   172c8:	beq	175e8 <argp_parse@@Base+0xa68>
   172cc:	cmp	r7, #63	; 0x3f
   172d0:	beq	176ec <argp_parse@@Base+0xb6c>
   172d4:	cmp	r7, #1
   172d8:	beq	17430 <argp_parse@@Base+0x8b0>
   172dc:	asrs	r8, r7, #24
   172e0:	bne	1738c <argp_parse@@Base+0x80c>
   172e4:	mov	r1, r7
   172e8:	ldr	r0, [fp, #-156]	; 0xffffff64
   172ec:	bl	112cc <strchr@plt>
   172f0:	cmp	r0, #0
   172f4:	beq	173fc <argp_parse@@Base+0x87c>
   172f8:	ldr	r4, [fp, #-112]	; 0xffffff90
   172fc:	ldr	r2, [fp, #-108]	; 0xffffff94
   17300:	cmp	r4, r2
   17304:	bcc	17318 <argp_parse@@Base+0x798>
   17308:	b	173fc <argp_parse@@Base+0x87c>
   1730c:	add	r4, r4, #36	; 0x24
   17310:	cmp	r4, r2
   17314:	bcs	173fc <argp_parse@@Base+0x87c>
   17318:	ldr	r3, [r4, #8]
   1731c:	cmp	r0, r3
   17320:	bcs	1730c <argp_parse@@Base+0x78c>
   17324:	ldr	r3, [r4]
   17328:	cmp	r3, #0
   1732c:	beq	173fc <argp_parse@@Base+0x87c>
   17330:	ldr	r2, [r4, #32]
   17334:	ldr	r0, [r4, #28]
   17338:	ldr	ip, [r4, #24]
   1733c:	str	r2, [fp, #-60]	; 0xffffffc4
   17340:	ldr	r2, [r4, #12]
   17344:	ldr	r1, [fp, #-136]	; 0xffffff78
   17348:	str	r0, [fp, #-64]	; 0xffffffc0
   1734c:	str	r2, [fp, #-76]	; 0xffffffb4
   17350:	str	ip, [fp, #-68]	; 0xffffffbc
   17354:	sub	r2, fp, #96	; 0x60
   17358:	mov	r0, r7
   1735c:	blx	r3
   17360:	mov	r8, r6
   17364:	ldr	r3, [fp, #-60]	; 0xffffffc4
   17368:	str	r3, [r4, #32]
   1736c:	cmp	r0, #7
   17370:	beq	173f4 <argp_parse@@Base+0x874>
   17374:	cmp	r0, #0
   17378:	bne	16f70 <argp_parse@@Base+0x3f0>
   1737c:	ldr	r2, [fp, #-100]	; 0xffffff9c
   17380:	ldr	r5, [fp, #-84]	; 0xffffffac
   17384:	ldr	r0, [fp, #-92]	; 0xffffffa4
   17388:	b	16de8 <argp_parse@@Base+0x268>
   1738c:	add	r3, r8, r8, lsl #3
   17390:	ldr	r2, [fp, #-112]	; 0xffffff90
   17394:	lsl	r3, r3, #2
   17398:	sub	r3, r3, #36	; 0x24
   1739c:	add	r4, r2, r3
   173a0:	ldr	r5, [r2, r3]
   173a4:	ands	r3, r7, #8388608	; 0x800000
   173a8:	movne	r3, #-16777216	; 0xff000000
   173ac:	cmp	r5, #0
   173b0:	beq	17580 <argp_parse@@Base+0xa00>
   173b4:	ldr	r0, [r4, #32]
   173b8:	ldr	r2, [r4, #24]
   173bc:	str	r0, [fp, #-60]	; 0xffffffc4
   173c0:	ldr	r0, [r4, #28]
   173c4:	str	r2, [fp, #-68]	; 0xffffffbc
   173c8:	ldr	r2, [r4, #12]
   173cc:	str	r0, [fp, #-64]	; 0xffffffc0
   173d0:	bic	r0, r7, #-16777216	; 0xff000000
   173d4:	str	r2, [fp, #-76]	; 0xffffffb4
   173d8:	orr	r0, r0, r3
   173dc:	ldr	r1, [fp, #-136]	; 0xffffff78
   173e0:	sub	r2, fp, #96	; 0x60
   173e4:	blx	r5
   173e8:	ldr	r3, [fp, #-60]	; 0xffffffc4
   173ec:	str	r3, [r4, #32]
   173f0:	b	1736c <argp_parse@@Base+0x7ec>
   173f4:	cmp	r8, #0
   173f8:	bne	17580 <argp_parse@@Base+0xa00>
   173fc:	mov	r2, r7
   17400:	ldr	r3, [pc, #1172]	; 1789c <argp_parse@@Base+0xd1c>
   17404:	ldr	r1, [pc, #1172]	; 178a0 <argp_parse@@Base+0xd20>
   17408:	sub	r0, fp, #96	; 0x60
   1740c:	bl	164dc <argp_error@@Base>
   17410:	ldr	r1, [fp, #-52]	; 0xffffffcc
   17414:	mov	r2, #260	; 0x104
   17418:	sub	r0, fp, #96	; 0x60
   1741c:	bl	1642c <argp_state_help@@Base>
   17420:	mov	r5, #7
   17424:	ldr	r3, [fp, #-112]	; 0xffffff90
   17428:	ldr	ip, [fp, #-108]	; 0xffffff94
   1742c:	b	16f7c <argp_parse@@Base+0x3fc>
   17430:	ldr	r7, [fp, #-136]	; 0xffffff78
   17434:	ldr	r3, [fp, #-112]	; 0xffffff90
   17438:	ldr	ip, [fp, #-108]	; 0xffffff94
   1743c:	sub	r8, r5, #1
   17440:	cmp	r3, ip
   17444:	str	r8, [fp, #-84]	; 0xffffffac
   17448:	bcs	17574 <argp_parse@@Base+0x9f4>
   1744c:	mov	lr, r8
   17450:	add	r4, r3, #36	; 0x24
   17454:	ldr	r3, [r4, #-36]	; 0xffffffdc
   17458:	add	r5, lr, #1
   1745c:	cmp	r3, #0
   17460:	str	r5, [fp, #-84]	; 0xffffffac
   17464:	sub	r2, fp, #96	; 0x60
   17468:	mov	r1, r7
   1746c:	mov	r0, r6
   17470:	sub	r5, r4, #36	; 0x24
   17474:	mov	r9, r4
   17478:	streq	lr, [fp, #-84]	; 0xffffffac
   1747c:	beq	17568 <argp_parse@@Base+0x9e8>
   17480:	ldr	ip, [r4, #-4]
   17484:	ldr	lr, [r4, #-24]	; 0xffffffe8
   17488:	str	ip, [fp, #-60]	; 0xffffffc4
   1748c:	ldr	ip, [r4, #-12]
   17490:	str	ip, [fp, #-68]	; 0xffffffbc
   17494:	ldr	ip, [r4, #-8]
   17498:	str	lr, [fp, #-76]	; 0xffffffb4
   1749c:	str	ip, [fp, #-64]	; 0xffffffc0
   174a0:	blx	r3
   174a4:	ldr	r3, [fp, #-60]	; 0xffffffc4
   174a8:	str	r3, [r4, #-4]
   174ac:	cmp	r0, #7
   174b0:	beq	174ec <argp_parse@@Base+0x96c>
   174b4:	cmp	r0, #0
   174b8:	bne	16f70 <argp_parse@@Base+0x3f0>
   174bc:	ldr	r0, [fp, #-92]	; 0xffffffa4
   174c0:	ldr	r5, [fp, #-84]	; 0xffffffac
   174c4:	cmp	r8, r5
   174c8:	sublt	r8, r5, r8
   174cc:	ldrlt	r3, [r4, #-24]	; 0xffffffe8
   174d0:	movge	r3, #1
   174d4:	addlt	r8, r3, r8
   174d8:	strlt	r8, [r4, #-24]	; 0xffffffe8
   174dc:	ldrlt	r2, [fp, #-100]	; 0xffffff9c
   174e0:	strge	r3, [fp, #-100]	; 0xffffff9c
   174e4:	movge	r2, r3
   174e8:	b	16de8 <argp_parse@@Base+0x268>
   174ec:	ldr	lr, [fp, #-84]	; 0xffffffac
   174f0:	ldr	r3, [r4, #-36]	; 0xffffffdc
   174f4:	sub	lr, lr, #1
   174f8:	cmp	r3, #0
   174fc:	str	lr, [fp, #-84]	; 0xffffffac
   17500:	beq	17564 <argp_parse@@Base+0x9e4>
   17504:	add	r0, r5, #24
   17508:	ldr	r2, [r5, #12]
   1750c:	ldm	r0, {r0, r1, ip}
   17510:	str	r2, [fp, #-76]	; 0xffffffb4
   17514:	sub	r2, fp, #96	; 0x60
   17518:	str	ip, [fp, #-60]	; 0xffffffc4
   1751c:	str	r0, [fp, #-68]	; 0xffffffbc
   17520:	str	r1, [fp, #-64]	; 0xffffffc0
   17524:	mov	r0, sl
   17528:	mov	r1, r6
   1752c:	blx	r3
   17530:	ldr	ip, [fp, #-108]	; 0xffffff94
   17534:	ldr	r2, [fp, #-60]	; 0xffffffc4
   17538:	cmp	r4, ip
   1753c:	movcs	r1, #0
   17540:	movcc	r1, #1
   17544:	mov	r3, r4
   17548:	str	r2, [r5, #32]
   1754c:	cmp	r0, #7
   17550:	movne	r1, #0
   17554:	cmp	r1, #0
   17558:	beq	17840 <argp_parse@@Base+0xcc0>
   1755c:	ldr	lr, [fp, #-84]	; 0xffffffac
   17560:	b	17450 <argp_parse@@Base+0x8d0>
   17564:	ldr	ip, [fp, #-108]	; 0xffffff94
   17568:	cmp	r9, ip
   1756c:	add	r4, r4, #36	; 0x24
   17570:	bcc	17454 <argp_parse@@Base+0x8d4>
   17574:	ldr	r5, [fp, #-84]	; 0xffffffac
   17578:	ldr	r0, [fp, #-92]	; 0xffffffa4
   1757c:	b	16e08 <argp_parse@@Base+0x288>
   17580:	ldr	r3, [fp, #-152]	; 0xffffff68
   17584:	ldr	r2, [r3, #12]
   17588:	cmp	r2, r7
   1758c:	bne	175a4 <argp_parse@@Base+0xa24>
   17590:	b	176d8 <argp_parse@@Base+0xb58>
   17594:	add	r3, r3, #16
   17598:	ldr	r2, [r3, #12]
   1759c:	cmp	r2, r7
   175a0:	beq	176d8 <argp_parse@@Base+0xb58>
   175a4:	ldr	r2, [r3]
   175a8:	cmp	r2, #0
   175ac:	bne	17594 <argp_parse@@Base+0xa14>
   175b0:	ldr	r2, [pc, #748]	; 178a4 <argp_parse@@Base+0xd24>
   175b4:	ldr	r3, [pc, #736]	; 1789c <argp_parse@@Base+0xd1c>
   175b8:	ldr	r1, [pc, #744]	; 178a8 <argp_parse@@Base+0xd28>
   175bc:	sub	r0, fp, #96	; 0x60
   175c0:	bl	164dc <argp_error@@Base>
   175c4:	b	17410 <argp_parse@@Base+0x890>
   175c8:	sub	lr, fp, #148	; 0x94
   175cc:	stm	sp, {ip, lr}
   175d0:	bl	17a98 <argp_parse@@Base+0xf18>
   175d4:	ldr	r5, [fp, #-148]	; 0xffffff6c
   175d8:	str	r5, [fp, #-84]	; 0xffffffac
   175dc:	mov	r7, r0
   175e0:	cmn	r7, #1
   175e4:	bne	172cc <argp_parse@@Base+0x74c>
   175e8:	cmp	r5, #1
   175ec:	str	r6, [fp, #-100]	; 0xffffff9c
   175f0:	ble	17610 <argp_parse@@Base+0xa90>
   175f4:	ldr	r2, [fp, #-88]	; 0xffffffa8
   175f8:	sub	r3, r5, #-1073741823	; 0xc0000001
   175fc:	ldr	r1, [pc, #680]	; 178ac <argp_parse@@Base+0xd2c>
   17600:	ldr	r0, [r2, r3, lsl #2]
   17604:	bl	11104 <strcmp@plt>
   17608:	cmp	r0, #0
   1760c:	streq	r5, [fp, #-72]	; 0xffffffb8
   17610:	ldr	r0, [fp, #-92]	; 0xffffffa4
   17614:	cmp	r5, r0
   17618:	bge	16e08 <argp_parse@@Base+0x288>
   1761c:	ldr	r3, [fp, #-80]	; 0xffffffb0
   17620:	tst	r3, #4
   17624:	beq	176fc <argp_parse@@Base+0xb7c>
   17628:	ldr	r3, [fp, #4]
   1762c:	cmp	r3, #0
   17630:	beq	177d4 <argp_parse@@Base+0xc54>
   17634:	str	r5, [r3]
   17638:	ldr	ip, [fp, #-108]	; 0xffffff94
   1763c:	ldr	r3, [fp, #-112]	; 0xffffff90
   17640:	sub	r2, ip, #36	; 0x24
   17644:	cmp	r3, r2
   17648:	bhi	17730 <argp_parse@@Base+0xbb0>
   1764c:	ldr	r6, [pc, #604]	; 178b0 <argp_parse@@Base+0xd30>
   17650:	sub	r4, ip, #72	; 0x48
   17654:	mov	r7, #0
   17658:	ldr	r5, [r4, #36]	; 0x24
   1765c:	sub	r2, fp, #96	; 0x60
   17660:	cmp	r5, #0
   17664:	mov	r1, r7
   17668:	mov	r0, r6
   1766c:	beq	176c8 <argp_parse@@Base+0xb48>
   17670:	ldr	r3, [r4, #68]	; 0x44
   17674:	ldr	ip, [r4, #48]	; 0x30
   17678:	str	r3, [fp, #-60]	; 0xffffffc4
   1767c:	ldr	r3, [r4, #60]	; 0x3c
   17680:	str	r3, [fp, #-68]	; 0xffffffbc
   17684:	ldr	r3, [r4, #64]	; 0x40
   17688:	str	ip, [fp, #-76]	; 0xffffffb4
   1768c:	str	r3, [fp, #-64]	; 0xffffffc0
   17690:	blx	r5
   17694:	ldr	r3, [fp, #-60]	; 0xffffffc4
   17698:	str	r3, [r4, #68]	; 0x44
   1769c:	ldr	r3, [fp, #-112]	; 0xffffff90
   176a0:	cmp	r4, r3
   176a4:	bcc	17710 <argp_parse@@Base+0xb90>
   176a8:	cmp	r0, #7
   176ac:	cmpne	r0, #0
   176b0:	sub	r4, r4, #36	; 0x24
   176b4:	beq	17658 <argp_parse@@Base+0xad8>
   176b8:	ldr	ip, [fp, #-108]	; 0xffffff94
   176bc:	mov	r5, r0
   176c0:	sub	ip, ip, #36	; 0x24
   176c4:	b	16ff0 <argp_parse@@Base+0x470>
   176c8:	cmp	r4, r3
   176cc:	bcc	1771c <argp_parse@@Base+0xb9c>
   176d0:	sub	r4, r4, #36	; 0x24
   176d4:	b	17658 <argp_parse@@Base+0xad8>
   176d8:	ldr	r2, [r3]
   176dc:	ldr	r3, [pc, #448]	; 178a4 <argp_parse@@Base+0xd24>
   176e0:	cmp	r2, #0
   176e4:	moveq	r2, r3
   176e8:	b	175b4 <argp_parse@@Base+0xa34>
   176ec:	ldr	r3, [fp, #-140]	; 0xffffff74
   176f0:	cmn	r3, #1
   176f4:	bne	17410 <argp_parse@@Base+0x890>
   176f8:	b	172e4 <argp_parse@@Base+0x764>
   176fc:	ldr	r3, [fp, #-88]	; 0xffffffa8
   17700:	ldr	r7, [r3, r5, lsl #2]
   17704:	add	r5, r5, #1
   17708:	str	r7, [fp, #-136]	; 0xffffff78
   1770c:	b	17434 <argp_parse@@Base+0x8b4>
   17710:	cmp	r0, #7
   17714:	mov	r5, r0
   17718:	bne	17738 <argp_parse@@Base+0xbb8>
   1771c:	ldr	ip, [fp, #-108]	; 0xffffff94
   17720:	sub	ip, ip, #36	; 0x24
   17724:	cmp	ip, r3
   17728:	movcs	r5, #0
   1772c:	bcs	16ff8 <argp_parse@@Base+0x478>
   17730:	mov	r5, #0
   17734:	b	17064 <argp_parse@@Base+0x4e4>
   17738:	ldr	ip, [fp, #-108]	; 0xffffff94
   1773c:	sub	ip, ip, #36	; 0x24
   17740:	b	16ff0 <argp_parse@@Base+0x470>
   17744:	ldr	r0, [r2]
   17748:	cmp	r0, #0
   1774c:	beq	16dc8 <argp_parse@@Base+0x248>
   17750:	bl	1796c <argp_parse@@Base+0xdec>
   17754:	str	r0, [fp, #-56]	; 0xffffffc8
   17758:	b	16dd4 <argp_parse@@Base+0x254>
   1775c:	ldr	r3, [pc, #336]	; 178b4 <argp_parse@@Base+0xd34>
   17760:	ldr	r3, [r3]
   17764:	cmp	r3, #0
   17768:	addeq	r3, r4, #16
   1776c:	bne	171d4 <argp_parse@@Base+0x654>
   17770:	b	171e0 <argp_parse@@Base+0x660>
   17774:	mov	r5, r0
   17778:	ldr	r2, [fp, #4]
   1777c:	cmp	r2, #0
   17780:	bne	16f54 <argp_parse@@Base+0x3d4>
   17784:	cmp	r5, #7
   17788:	bne	16f78 <argp_parse@@Base+0x3f8>
   1778c:	b	17410 <argp_parse@@Base+0x890>
   17790:	ldr	r3, [fp, #-112]	; 0xffffff90
   17794:	sub	ip, ip, #36	; 0x24
   17798:	cmp	r3, ip
   1779c:	mov	r5, r0
   177a0:	bls	17778 <argp_parse@@Base+0xbf8>
   177a4:	ldr	r2, [fp, #4]
   177a8:	cmp	r2, #0
   177ac:	bne	16f54 <argp_parse@@Base+0x3d4>
   177b0:	b	16f60 <argp_parse@@Base+0x3e0>
   177b4:	ldr	r3, [fp, #-112]	; 0xffffff90
   177b8:	sub	r4, ip, #36	; 0x24
   177bc:	cmp	r4, r3
   177c0:	mov	r5, r0
   177c4:	bcs	16ec0 <argp_parse@@Base+0x340>
   177c8:	cmp	r5, #7
   177cc:	beq	16f44 <argp_parse@@Base+0x3c4>
   177d0:	b	177a4 <argp_parse@@Base+0xc24>
   177d4:	ldr	r3, [fp, #-80]	; 0xffffffb0
   177d8:	ldr	r1, [fp, #-52]	; 0xffffffcc
   177dc:	tst	r3, #2
   177e0:	bne	17414 <argp_parse@@Base+0x894>
   177e4:	cmp	r1, #0
   177e8:	beq	17414 <argp_parse@@Base+0x894>
   177ec:	mov	r0, r1
   177f0:	ldr	r2, [fp, #-56]	; 0xffffffc8
   177f4:	ldr	r1, [pc, #188]	; 178b8 <argp_parse@@Base+0xd38>
   177f8:	bl	112d8 <fprintf@plt>
   177fc:	ldr	r1, [fp, #-52]	; 0xffffffcc
   17800:	b	17414 <argp_parse@@Base+0x894>
   17804:	mov	r5, r0
   17808:	b	177c8 <argp_parse@@Base+0xc48>
   1780c:	sub	r4, ip, #36	; 0x24
   17810:	cmp	r3, r4
   17814:	bls	16ecc <argp_parse@@Base+0x34c>
   17818:	ldr	r2, [fp, #4]
   1781c:	cmp	r2, #0
   17820:	bne	16f50 <argp_parse@@Base+0x3d0>
   17824:	b	17640 <argp_parse@@Base+0xac0>
   17828:	cmp	r0, #7
   1782c:	mov	r5, r0
   17830:	beq	16da0 <argp_parse@@Base+0x220>
   17834:	cmp	r0, #0
   17838:	beq	16da0 <argp_parse@@Base+0x220>
   1783c:	b	1706c <argp_parse@@Base+0x4ec>
   17840:	cmp	r0, #0
   17844:	ldreq	r0, [fp, #-92]	; 0xffffffa4
   17848:	moveq	r5, r0
   1784c:	streq	r0, [fp, #-84]	; 0xffffffac
   17850:	beq	174c4 <argp_parse@@Base+0x944>
   17854:	cmp	r0, #7
   17858:	mov	r5, r0
   1785c:	beq	17574 <argp_parse@@Base+0x9f4>
   17860:	ldr	r3, [fp, #-112]	; 0xffffff90
   17864:	b	16f7c <argp_parse@@Base+0x3fc>
   17868:	ldrdeq	ip, [r2], -r4
   1786c:	ldrdeq	ip, [r2], -r0
   17870:	ldrdeq	ip, [r2], -r8
   17874:	ldrdeq	ip, [r2], -ip	; <UNPREDICTABLE>
   17878:	tsteq	r0, r6
   1787c:	tsteq	r0, r2
   17880:	tsteq	r0, r1
   17884:	tsteq	r0, r5
   17888:	tsteq	r0, r7
   1788c:	tsteq	r0, r3
   17890:	andeq	ip, r2, ip, asr r4
   17894:	muleq	r1, ip, fp
   17898:			; <UNDEFINED> instruction: 0x0001abb8
   1789c:	ldrdeq	sl, [r1], -r4
   178a0:	andeq	sl, r1, r8, ror #25
   178a4:	andeq	sl, r1, r0, ror #25
   178a8:	strdeq	sl, [r1], -r0
   178ac:	andeq	sl, r1, r4, ror #25
   178b0:	tsteq	r0, r4
   178b4:	andeq	ip, r2, r0, lsl r4
   178b8:	strdeq	sl, [r1], -ip
   178bc:	cmp	r1, #0
   178c0:	beq	17900 <argp_parse@@Base+0xd80>
   178c4:	ldr	r2, [r1, #52]	; 0x34
   178c8:	ldr	r3, [r2, #48]	; 0x30
   178cc:	ldr	r1, [r2, #52]	; 0x34
   178d0:	cmp	r3, r1
   178d4:	bcs	17900 <argp_parse@@Base+0xd80>
   178d8:	ldr	r2, [r3, #4]
   178dc:	cmp	r0, r2
   178e0:	bne	178f4 <argp_parse@@Base+0xd74>
   178e4:	b	17908 <argp_parse@@Base+0xd88>
   178e8:	ldr	r2, [r3, #4]
   178ec:	cmp	r2, r0
   178f0:	beq	17908 <argp_parse@@Base+0xd88>
   178f4:	add	r3, r3, #36	; 0x24
   178f8:	cmp	r3, r1
   178fc:	bcc	178e8 <argp_parse@@Base+0xd68>
   17900:	mov	r0, #0
   17904:	bx	lr
   17908:	ldr	r0, [r3, #24]
   1790c:	bx	lr
   17910:	ldr	ip, [pc, #32]	; 17938 <argp_parse@@Base+0xdb8>
   17914:	push	{lr}		; (str lr, [sp, #-4]!)
   17918:	sub	sp, sp, #12
   1791c:	ldm	ip, {r1, ip}
   17920:	ldr	r3, [pc, #20]	; 1793c <argp_parse@@Base+0xdbc>
   17924:	ldr	r2, [pc, #20]	; 17940 <argp_parse@@Base+0xdc0>
   17928:	str	ip, [sp]
   1792c:	bl	17e7c <argp_parse@@Base+0x12fc>
   17930:	add	sp, sp, #12
   17934:	pop	{pc}		; (ldr pc, [sp], #4)
   17938:	andeq	ip, r2, r4, lsl r4
   1793c:	ldrdeq	sl, [r1], -r4
   17940:	andeq	sl, r1, r4, ror #27
   17944:	ldr	r3, [pc, #20]	; 17960 <argp_parse@@Base+0xde0>
   17948:	ldr	r2, [pc, #20]	; 17964 <argp_parse@@Base+0xde4>
   1794c:	ldr	ip, [pc, #20]	; 17968 <argp_parse@@Base+0xde8>
   17950:	str	r0, [r3]
   17954:	str	ip, [r2]
   17958:	str	r1, [r3, #4]
   1795c:	bx	lr
   17960:	andeq	ip, r2, r4, lsl r4
   17964:	andeq	ip, r2, r0, lsl r4
   17968:	andeq	r7, r1, r0, lsl r9
   1796c:	ldrb	r3, [r0]
   17970:	cmp	r3, #47	; 0x2f
   17974:	bne	17984 <argp_parse@@Base+0xe04>
   17978:	ldrb	r3, [r0, #1]!
   1797c:	cmp	r3, #47	; 0x2f
   17980:	beq	17978 <argp_parse@@Base+0xdf8>
   17984:	cmp	r3, #0
   17988:	bxeq	lr
   1798c:	mov	r2, #0
   17990:	push	{lr}		; (str lr, [sp, #-4]!)
   17994:	mov	ip, r2
   17998:	mov	r1, r0
   1799c:	mov	lr, #1
   179a0:	cmp	r3, #47	; 0x2f
   179a4:	moveq	r2, lr
   179a8:	beq	179b8 <argp_parse@@Base+0xe38>
   179ac:	cmp	r2, #0
   179b0:	movne	r0, r1
   179b4:	movne	r2, ip
   179b8:	ldrb	r3, [r1, #1]!
   179bc:	cmp	r3, #0
   179c0:	bne	179a0 <argp_parse@@Base+0xe20>
   179c4:	pop	{pc}		; (ldr pc, [sp], #4)
   179c8:	push	{r4, lr}
   179cc:	mov	r4, r0
   179d0:	bl	112c0 <strlen@plt>
   179d4:	cmp	r0, #1
   179d8:	popls	{r4, pc}
   179dc:	sub	r3, r0, #1
   179e0:	add	r2, r4, r3
   179e4:	ldrb	r1, [r4, r3]
   179e8:	cmp	r1, #47	; 0x2f
   179ec:	popne	{r4, pc}
   179f0:	cmp	r3, #1
   179f4:	beq	17a08 <argp_parse@@Base+0xe88>
   179f8:	ldrb	r1, [r2, #-1]!
   179fc:	sub	r0, r3, #1
   17a00:	cmp	r1, #47	; 0x2f
   17a04:	beq	17a10 <argp_parse@@Base+0xe90>
   17a08:	mov	r0, r3
   17a0c:	pop	{r4, pc}
   17a10:	mov	r3, r0
   17a14:	b	179f0 <argp_parse@@Base+0xe70>
   17a18:	push	{r4, r5, lr}
   17a1c:	sub	sp, sp, #12
   17a20:	mov	r5, r0
   17a24:	bl	112e4 <__errno_location@plt>
   17a28:	mov	r2, #0
   17a2c:	mov	r4, r0
   17a30:	ldr	r3, [r0]
   17a34:	str	r2, [r4]
   17a38:	mov	r0, r5
   17a3c:	str	r3, [sp]
   17a40:	str	r3, [sp, #4]
   17a44:	bl	11164 <free@plt>
   17a48:	ldr	r3, [r4]
   17a4c:	add	r2, sp, #8
   17a50:	cmp	r3, #0
   17a54:	moveq	r3, #4
   17a58:	movne	r3, #0
   17a5c:	add	r3, r2, r3
   17a60:	ldr	r3, [r3, #-8]
   17a64:	str	r3, [r4]
   17a68:	add	sp, sp, #12
   17a6c:	pop	{r4, r5, pc}
   17a70:	push	{lr}		; (str lr, [sp, #-4]!)
   17a74:	sub	sp, sp, #20
   17a78:	mov	ip, #0
   17a7c:	ldr	lr, [sp, #24]
   17a80:	str	ip, [sp, #8]
   17a84:	str	lr, [sp]
   17a88:	str	ip, [sp, #4]
   17a8c:	bl	19934 <argp_parse@@Base+0x2db4>
   17a90:	add	sp, sp, #20
   17a94:	pop	{pc}		; (ldr pc, [sp], #4)
   17a98:	push	{r4, lr}
   17a9c:	sub	sp, sp, #16
   17aa0:	mov	ip, #0
   17aa4:	ldr	r4, [sp, #24]
   17aa8:	ldr	lr, [sp, #28]
   17aac:	str	r4, [sp]
   17ab0:	str	lr, [sp, #8]
   17ab4:	str	ip, [sp, #12]
   17ab8:	str	ip, [sp, #4]
   17abc:	bl	193d4 <argp_parse@@Base+0x2854>
   17ac0:	add	sp, sp, #16
   17ac4:	pop	{r4, pc}
   17ac8:	push	{r4, lr}
   17acc:	sub	sp, sp, #16
   17ad0:	mov	lr, #0
   17ad4:	ldr	r4, [sp, #24]
   17ad8:	mov	ip, #1
   17adc:	stm	sp, {r4, ip, lr}
   17ae0:	bl	19934 <argp_parse@@Base+0x2db4>
   17ae4:	add	sp, sp, #16
   17ae8:	pop	{r4, pc}
   17aec:	push	{r4, r5, lr}
   17af0:	sub	sp, sp, #20
   17af4:	mov	lr, #0
   17af8:	ldr	r5, [sp, #32]
   17afc:	ldr	r4, [sp, #36]	; 0x24
   17b00:	mov	ip, #1
   17b04:	str	r5, [sp]
   17b08:	str	r4, [sp, #8]
   17b0c:	str	lr, [sp, #12]
   17b10:	str	ip, [sp, #4]
   17b14:	bl	193d4 <argp_parse@@Base+0x2854>
   17b18:	add	sp, sp, #20
   17b1c:	pop	{r4, r5, pc}
   17b20:	push	{r4, r5, r6, lr}
   17b24:	subs	r4, r0, #0
   17b28:	beq	17b9c <argp_parse@@Base+0x101c>
   17b2c:	mov	r1, #47	; 0x2f
   17b30:	bl	11368 <strrchr@plt>
   17b34:	subs	r5, r0, #0
   17b38:	beq	17b88 <argp_parse@@Base+0x1008>
   17b3c:	add	r6, r5, #1
   17b40:	sub	r3, r6, r4
   17b44:	cmp	r3, #6
   17b48:	ble	17b88 <argp_parse@@Base+0x1008>
   17b4c:	mov	r2, #7
   17b50:	ldr	r1, [pc, #96]	; 17bb8 <argp_parse@@Base+0x1038>
   17b54:	sub	r0, r5, #6
   17b58:	bl	11410 <strncmp@plt>
   17b5c:	cmp	r0, #0
   17b60:	bne	17b88 <argp_parse@@Base+0x1008>
   17b64:	mov	r2, #3
   17b68:	ldr	r1, [pc, #76]	; 17bbc <argp_parse@@Base+0x103c>
   17b6c:	mov	r0, r6
   17b70:	bl	11410 <strncmp@plt>
   17b74:	cmp	r0, #0
   17b78:	movne	r4, r6
   17b7c:	ldreq	r3, [pc, #60]	; 17bc0 <argp_parse@@Base+0x1040>
   17b80:	addeq	r4, r5, #4
   17b84:	streq	r4, [r3]
   17b88:	ldr	r2, [pc, #52]	; 17bc4 <argp_parse@@Base+0x1044>
   17b8c:	ldr	r3, [pc, #52]	; 17bc8 <argp_parse@@Base+0x1048>
   17b90:	str	r4, [r2]
   17b94:	str	r4, [r3]
   17b98:	pop	{r4, r5, r6, pc}
   17b9c:	ldr	r3, [pc, #40]	; 17bcc <argp_parse@@Base+0x104c>
   17ba0:	mov	r2, #55	; 0x37
   17ba4:	mov	r1, #1
   17ba8:	ldr	r3, [r3]
   17bac:	ldr	r0, [pc, #28]	; 17bd0 <argp_parse@@Base+0x1050>
   17bb0:	bl	1120c <fwrite@plt>
   17bb4:	bl	1141c <abort@plt>
   17bb8:	andeq	sl, r1, ip, lsr #28
   17bbc:	andeq	sl, r1, r4, lsr lr
   17bc0:	ldrdeq	ip, [r2], -r0
   17bc4:	andeq	ip, r2, ip, lsl r4
   17bc8:	ldrdeq	ip, [r2], -r4
   17bcc:	ldrdeq	ip, [r2], -r8
   17bd0:	strdeq	sl, [r1], -r4
   17bd4:	push	{r4, r5, r6, r7, lr}
   17bd8:	sub	sp, sp, #36	; 0x24
   17bdc:	cmp	r1, #0
   17be0:	mov	r4, r0
   17be4:	ldr	r5, [sp, #56]	; 0x38
   17be8:	ldr	r6, [sp, #60]	; 0x3c
   17bec:	beq	17e2c <argp_parse@@Base+0x12ac>
   17bf0:	str	r3, [sp]
   17bf4:	mov	r3, r2
   17bf8:	mov	r2, r1
   17bfc:	ldr	r1, [pc, #564]	; 17e38 <argp_parse@@Base+0x12b8>
   17c00:	bl	112d8 <fprintf@plt>
   17c04:	ldr	r3, [pc, #560]	; 17e3c <argp_parse@@Base+0x12bc>
   17c08:	ldr	r2, [pc, #560]	; 17e40 <argp_parse@@Base+0x12c0>
   17c0c:	ldr	r1, [pc, #560]	; 17e44 <argp_parse@@Base+0x12c4>
   17c10:	mov	r0, r4
   17c14:	bl	112d8 <fprintf@plt>
   17c18:	mov	r1, r4
   17c1c:	mov	r0, #10
   17c20:	bl	11380 <fputc@plt>
   17c24:	ldr	r1, [pc, #540]	; 17e48 <argp_parse@@Base+0x12c8>
   17c28:	ldr	r2, [pc, #540]	; 17e4c <argp_parse@@Base+0x12cc>
   17c2c:	mov	r0, r4
   17c30:	bl	112d8 <fprintf@plt>
   17c34:	mov	r1, r4
   17c38:	mov	r0, #10
   17c3c:	bl	11380 <fputc@plt>
   17c40:	cmp	r6, #9
   17c44:	ldrls	pc, [pc, r6, lsl #2]
   17c48:	b	17c74 <argp_parse@@Base+0x10f4>
   17c4c:			; <UNDEFINED> instruction: 0x00017cb4
   17c50:	andeq	r7, r1, r0, lsl #26
   17c54:	andeq	r7, r1, r8, lsl sp
   17c58:	andeq	r7, r1, r0, lsr sp
   17c5c:	andeq	r7, r1, r0, asr sp
   17c60:	andeq	r7, r1, r8, ror sp
   17c64:	muleq	r1, r8, sp
   17c68:	andeq	r7, r1, r0, asr #27
   17c6c:	strdeq	r7, [r1], -r0
   17c70:			; <UNDEFINED> instruction: 0x00017cbc
   17c74:	ldr	ip, [r5, #32]
   17c78:	ldr	r1, [r5, #28]
   17c7c:	ldm	r5, {r2, r3}
   17c80:	ldr	r7, [r5, #24]
   17c84:	ldr	r6, [r5, #20]
   17c88:	str	ip, [sp, #24]
   17c8c:	ldr	lr, [r5, #16]
   17c90:	str	r1, [sp, #20]
   17c94:	ldr	r1, [r5, #8]
   17c98:	ldr	ip, [r5, #12]
   17c9c:	mov	r0, r4
   17ca0:	str	r7, [sp, #16]
   17ca4:	stm	sp, {r1, ip, lr}
   17ca8:	str	r6, [sp, #12]
   17cac:	ldr	r1, [pc, #412]	; 17e50 <argp_parse@@Base+0x12d0>
   17cb0:	bl	112d8 <fprintf@plt>
   17cb4:	add	sp, sp, #36	; 0x24
   17cb8:	pop	{r4, r5, r6, r7, pc}
   17cbc:	ldr	ip, [r5, #32]
   17cc0:	ldr	r1, [r5, #28]
   17cc4:	ldm	r5, {r2, r3}
   17cc8:	ldr	r7, [r5, #24]
   17ccc:	ldr	r6, [r5, #20]
   17cd0:	str	ip, [sp, #24]
   17cd4:	ldr	lr, [r5, #16]
   17cd8:	str	r1, [sp, #20]
   17cdc:	ldr	r1, [r5, #8]
   17ce0:	ldr	ip, [r5, #12]
   17ce4:	mov	r0, r4
   17ce8:	str	r7, [sp, #16]
   17cec:	stm	sp, {r1, ip, lr}
   17cf0:	str	r6, [sp, #12]
   17cf4:	ldr	r1, [pc, #344]	; 17e54 <argp_parse@@Base+0x12d4>
   17cf8:	bl	112d8 <fprintf@plt>
   17cfc:	b	17cb4 <argp_parse@@Base+0x1134>
   17d00:	ldr	r2, [r5]
   17d04:	mov	r0, r4
   17d08:	ldr	r1, [pc, #328]	; 17e58 <argp_parse@@Base+0x12d8>
   17d0c:	add	sp, sp, #36	; 0x24
   17d10:	pop	{r4, r5, r6, r7, lr}
   17d14:	b	112d8 <fprintf@plt>
   17d18:	mov	r0, r4
   17d1c:	ldm	r5, {r2, r3}
   17d20:	ldr	r1, [pc, #308]	; 17e5c <argp_parse@@Base+0x12dc>
   17d24:	add	sp, sp, #36	; 0x24
   17d28:	pop	{r4, r5, r6, r7, lr}
   17d2c:	b	112d8 <fprintf@plt>
   17d30:	ldr	r1, [r5, #8]
   17d34:	ldm	r5, {r2, r3}
   17d38:	mov	r0, r4
   17d3c:	str	r1, [sp, #56]	; 0x38
   17d40:	ldr	r1, [pc, #280]	; 17e60 <argp_parse@@Base+0x12e0>
   17d44:	add	sp, sp, #36	; 0x24
   17d48:	pop	{r4, r5, r6, r7, lr}
   17d4c:	b	112d8 <fprintf@plt>
   17d50:	ldr	r1, [r5, #8]
   17d54:	ldr	ip, [r5, #12]
   17d58:	ldm	r5, {r2, r3}
   17d5c:	mov	r0, r4
   17d60:	str	r1, [sp, #56]	; 0x38
   17d64:	str	ip, [sp, #60]	; 0x3c
   17d68:	ldr	r1, [pc, #244]	; 17e64 <argp_parse@@Base+0x12e4>
   17d6c:	add	sp, sp, #36	; 0x24
   17d70:	pop	{r4, r5, r6, r7, lr}
   17d74:	b	112d8 <fprintf@plt>
   17d78:	add	r1, r5, #8
   17d7c:	ldm	r5, {r2, r3}
   17d80:	ldm	r1, {r1, ip, lr}
   17d84:	mov	r0, r4
   17d88:	stm	sp, {r1, ip, lr}
   17d8c:	ldr	r1, [pc, #212]	; 17e68 <argp_parse@@Base+0x12e8>
   17d90:	bl	112d8 <fprintf@plt>
   17d94:	b	17cb4 <argp_parse@@Base+0x1134>
   17d98:	add	r1, r5, #8
   17d9c:	ldr	r6, [r5, #20]
   17da0:	ldm	r1, {r1, ip, lr}
   17da4:	mov	r0, r4
   17da8:	ldm	r5, {r2, r3}
   17dac:	str	r6, [sp, #12]
   17db0:	stm	sp, {r1, ip, lr}
   17db4:	ldr	r1, [pc, #176]	; 17e6c <argp_parse@@Base+0x12ec>
   17db8:	bl	112d8 <fprintf@plt>
   17dbc:	b	17cb4 <argp_parse@@Base+0x1134>
   17dc0:	add	r1, r5, #8
   17dc4:	ldr	r7, [r5, #24]
   17dc8:	ldm	r1, {r1, ip, lr}
   17dcc:	mov	r0, r4
   17dd0:	ldr	r6, [r5, #20]
   17dd4:	ldm	r5, {r2, r3}
   17dd8:	stm	sp, {r1, ip, lr}
   17ddc:	str	r7, [sp, #16]
   17de0:	str	r6, [sp, #12]
   17de4:	ldr	r1, [pc, #132]	; 17e70 <argp_parse@@Base+0x12f0>
   17de8:	bl	112d8 <fprintf@plt>
   17dec:	b	17cb4 <argp_parse@@Base+0x1134>
   17df0:	ldr	r1, [r5, #28]
   17df4:	ldm	r5, {r2, r3}
   17df8:	ldr	r7, [r5, #24]
   17dfc:	ldr	r6, [r5, #20]
   17e00:	ldr	lr, [r5, #16]
   17e04:	str	r1, [sp, #20]
   17e08:	ldr	r1, [r5, #8]
   17e0c:	ldr	ip, [r5, #12]
   17e10:	mov	r0, r4
   17e14:	str	r7, [sp, #16]
   17e18:	stm	sp, {r1, ip, lr}
   17e1c:	str	r6, [sp, #12]
   17e20:	ldr	r1, [pc, #76]	; 17e74 <argp_parse@@Base+0x12f4>
   17e24:	bl	112d8 <fprintf@plt>
   17e28:	b	17cb4 <argp_parse@@Base+0x1134>
   17e2c:	ldr	r1, [pc, #68]	; 17e78 <argp_parse@@Base+0x12f8>
   17e30:	bl	112d8 <fprintf@plt>
   17e34:	b	17c04 <argp_parse@@Base+0x1084>
   17e38:	andeq	sl, r1, r8, lsr lr
   17e3c:	andeq	r0, r0, r6, ror #15
   17e40:	andeq	sl, r1, r4, asr #28
   17e44:	andeq	fp, r1, r4, asr #2
   17e48:	andeq	sl, r1, ip, ror #28
   17e4c:	andeq	sl, r1, r8, asr #28
   17e50:	andeq	fp, r1, r8, asr r0
   17e54:	andeq	fp, r1, r4, lsr #32
   17e58:	andeq	sl, r1, r8, lsl pc
   17e5c:	andeq	sl, r1, r8, lsr #30
   17e60:	andeq	sl, r1, r0, asr #30
   17e64:	andeq	sl, r1, ip, asr pc
   17e68:	andeq	sl, r1, ip, ror pc
   17e6c:	andeq	sl, r1, r0, lsr #31
   17e70:	andeq	sl, r1, r8, asr #31
   17e74:	strdeq	sl, [r1], -r4
   17e78:	andeq	sl, r1, ip, asr #3
   17e7c:	push	{r4, r5, lr}
   17e80:	sub	sp, sp, #12
   17e84:	ldr	r5, [sp, #24]
   17e88:	ldr	ip, [r5]
   17e8c:	cmp	ip, #0
   17e90:	beq	17eac <argp_parse@@Base+0x132c>
   17e94:	mov	lr, r5
   17e98:	mov	ip, #0
   17e9c:	ldr	r4, [lr, #4]!
   17ea0:	add	ip, ip, #1
   17ea4:	cmp	r4, #0
   17ea8:	bne	17e9c <argp_parse@@Base+0x131c>
   17eac:	stm	sp, {r5, ip}
   17eb0:	bl	17bd4 <argp_parse@@Base+0x1054>
   17eb4:	add	sp, sp, #12
   17eb8:	pop	{r4, r5, pc}
   17ebc:	push	{r4, r5, lr}
   17ec0:	sub	sp, sp, #52	; 0x34
   17ec4:	add	r5, sp, #4
   17ec8:	ldr	r4, [sp, #64]	; 0x40
   17ecc:	mov	ip, #0
   17ed0:	sub	r4, r4, #4
   17ed4:	ldr	lr, [r4, #4]!
   17ed8:	cmp	lr, #0
   17edc:	str	lr, [r5, #4]!
   17ee0:	beq	17ef0 <argp_parse@@Base+0x1370>
   17ee4:	add	ip, ip, #1
   17ee8:	cmp	ip, #10
   17eec:	bne	17ed4 <argp_parse@@Base+0x1354>
   17ef0:	add	lr, sp, #8
   17ef4:	str	ip, [sp, #4]
   17ef8:	str	lr, [sp]
   17efc:	bl	17bd4 <argp_parse@@Base+0x1054>
   17f00:	add	sp, sp, #52	; 0x34
   17f04:	pop	{r4, r5, pc}
   17f08:	push	{r3}		; (str r3, [sp, #-4]!)
   17f0c:	push	{r4, lr}
   17f10:	sub	sp, sp, #60	; 0x3c
   17f14:	add	lr, sp, #56	; 0x38
   17f18:	add	r3, sp, #72	; 0x48
   17f1c:	str	r3, [lr, #-44]!	; 0xffffffd4
   17f20:	add	r4, sp, #68	; 0x44
   17f24:	mov	r3, #0
   17f28:	ldr	ip, [r4, #4]!
   17f2c:	cmp	ip, #0
   17f30:	str	ip, [lr, #4]!
   17f34:	beq	17f44 <argp_parse@@Base+0x13c4>
   17f38:	add	r3, r3, #1
   17f3c:	cmp	r3, #10
   17f40:	bne	17f28 <argp_parse@@Base+0x13a8>
   17f44:	add	ip, sp, #16
   17f48:	str	r3, [sp, #4]
   17f4c:	str	ip, [sp]
   17f50:	ldr	r3, [sp, #68]	; 0x44
   17f54:	bl	17bd4 <argp_parse@@Base+0x1054>
   17f58:	add	sp, sp, #60	; 0x3c
   17f5c:	pop	{r4, lr}
   17f60:	add	sp, sp, #4
   17f64:	bx	lr
   17f68:	ldr	r3, [pc, #56]	; 17fa8 <argp_parse@@Base+0x1428>
   17f6c:	push	{r4, lr}
   17f70:	mov	r0, #10
   17f74:	ldr	r1, [r3]
   17f78:	bl	11380 <fputc@plt>
   17f7c:	ldr	r1, [pc, #40]	; 17fac <argp_parse@@Base+0x142c>
   17f80:	ldr	r0, [pc, #40]	; 17fb0 <argp_parse@@Base+0x1430>
   17f84:	bl	11128 <printf@plt>
   17f88:	ldr	r1, [pc, #36]	; 17fb4 <argp_parse@@Base+0x1434>
   17f8c:	ldr	r2, [pc, #36]	; 17fb8 <argp_parse@@Base+0x1438>
   17f90:	ldr	r0, [pc, #36]	; 17fbc <argp_parse@@Base+0x143c>
   17f94:	bl	11128 <printf@plt>
   17f98:	ldr	r1, [pc, #32]	; 17fc0 <argp_parse@@Base+0x1440>
   17f9c:	ldr	r0, [pc, #32]	; 17fc4 <argp_parse@@Base+0x1444>
   17fa0:	pop	{r4, lr}
   17fa4:	b	11128 <printf@plt>
   17fa8:	ldrdeq	ip, [r2], -ip	; <UNPREDICTABLE>
   17fac:	muleq	r1, r4, r0
   17fb0:	andeq	fp, r1, ip, lsr #1
   17fb4:	andeq	sl, r1, r4, ror #27
   17fb8:	andeq	fp, r1, r0, asr #1
   17fbc:	andeq	fp, r1, r8, ror #1
   17fc0:	strdeq	fp, [r1], -ip
   17fc4:	andeq	fp, r1, ip, lsl r1
   17fc8:	push	{r4, lr}
   17fcc:	bl	18584 <argp_parse@@Base+0x1a04>
   17fd0:	cmp	r0, #0
   17fd4:	popne	{r4, pc}
   17fd8:	bl	18510 <argp_parse@@Base+0x1990>
   17fdc:	push	{r4, lr}
   17fe0:	bl	18584 <argp_parse@@Base+0x1a04>
   17fe4:	cmp	r0, #0
   17fe8:	popne	{r4, pc}
   17fec:	bl	18510 <argp_parse@@Base+0x1990>
   17ff0:	push	{r4, lr}
   17ff4:	bl	18584 <argp_parse@@Base+0x1a04>
   17ff8:	cmp	r0, #0
   17ffc:	popne	{r4, pc}
   18000:	bl	18510 <argp_parse@@Base+0x1990>
   18004:	push	{r4, r5, r6, lr}
   18008:	mov	r5, r0
   1800c:	mov	r4, r1
   18010:	bl	185b0 <argp_parse@@Base+0x1a30>
   18014:	cmp	r0, #0
   18018:	popne	{r4, r5, r6, pc}
   1801c:	adds	r4, r4, #0
   18020:	movne	r4, #1
   18024:	cmp	r5, #0
   18028:	orreq	r4, r4, #1
   1802c:	cmp	r4, #0
   18030:	popeq	{r4, r5, r6, pc}
   18034:	bl	18510 <argp_parse@@Base+0x1990>
   18038:	push	{r4, lr}
   1803c:	cmp	r1, #0
   18040:	orreq	r1, r1, #1
   18044:	bl	185b0 <argp_parse@@Base+0x1a30>
   18048:	cmp	r0, #0
   1804c:	popne	{r4, pc}
   18050:	bl	18510 <argp_parse@@Base+0x1990>
   18054:	push	{r4, r5, r6, lr}
   18058:	mov	r6, r0
   1805c:	mov	r5, r1
   18060:	mov	r4, r2
   18064:	bl	199c8 <argp_parse@@Base+0x2e48>
   18068:	cmp	r0, #0
   1806c:	popne	{r4, r5, r6, pc}
   18070:	cmp	r6, #0
   18074:	beq	18084 <argp_parse@@Base+0x1504>
   18078:	cmp	r5, #0
   1807c:	cmpne	r4, #0
   18080:	popeq	{r4, r5, r6, pc}
   18084:	bl	18510 <argp_parse@@Base+0x1990>
   18088:	b	18054 <argp_parse@@Base+0x14d4>
   1808c:	cmp	r2, #0
   18090:	cmpne	r1, #0
   18094:	moveq	r2, #1
   18098:	moveq	r1, r2
   1809c:	push	{r4, lr}
   180a0:	bl	199c8 <argp_parse@@Base+0x2e48>
   180a4:	cmp	r0, #0
   180a8:	popne	{r4, pc}
   180ac:	bl	18510 <argp_parse@@Base+0x1990>
   180b0:	mov	r2, r1
   180b4:	mov	r1, r0
   180b8:	mov	r0, #0
   180bc:	b	18054 <argp_parse@@Base+0x14d4>
   180c0:	mov	r2, r1
   180c4:	mov	r1, r0
   180c8:	mov	r0, #0
   180cc:	b	1808c <argp_parse@@Base+0x150c>
   180d0:	push	{r4, r5, r6, lr}
   180d4:	subs	r6, r0, #0
   180d8:	sub	sp, sp, #8
   180dc:	mov	r5, r1
   180e0:	ldr	r4, [r1]
   180e4:	beq	18120 <argp_parse@@Base+0x15a0>
   180e8:	lsr	r1, r4, #1
   180ec:	add	r3, r1, #1
   180f0:	mvn	r3, r3
   180f4:	cmp	r4, r3
   180f8:	bhi	1811c <argp_parse@@Base+0x159c>
   180fc:	add	r4, r4, #1
   18100:	add	r4, r4, r1
   18104:	mov	r0, r6
   18108:	mov	r1, r4
   1810c:	bl	18054 <argp_parse@@Base+0x14d4>
   18110:	str	r4, [r5]
   18114:	add	sp, sp, #8
   18118:	pop	{r4, r5, r6, pc}
   1811c:	bl	18510 <argp_parse@@Base+0x1990>
   18120:	cmp	r4, #0
   18124:	bne	18104 <argp_parse@@Base+0x1584>
   18128:	mov	r1, r2
   1812c:	mov	r0, #64	; 0x40
   18130:	str	r2, [sp, #4]
   18134:	bl	19a14 <argp_parse@@Base+0x2e94>
   18138:	ldr	r2, [sp, #4]
   1813c:	cmp	r0, #0
   18140:	movne	r4, r0
   18144:	addeq	r4, r0, #1
   18148:	b	18104 <argp_parse@@Base+0x1584>
   1814c:	mov	r2, #1
   18150:	b	180d0 <argp_parse@@Base+0x1550>
   18154:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18158:	sub	sp, sp, #12
   1815c:	ldr	r6, [r1]
   18160:	mov	sl, r1
   18164:	mov	r9, r0
   18168:	asrs	r4, r6, #1
   1816c:	mov	r5, r2
   18170:	mov	fp, r3
   18174:	ldr	r7, [sp, #48]	; 0x30
   18178:	bmi	182e4 <argp_parse@@Base+0x1764>
   1817c:	mvn	r3, #-2147483648	; 0x80000000
   18180:	sub	r3, r3, r4
   18184:	cmp	r6, r3
   18188:	movle	r3, #0
   1818c:	movgt	r3, #1
   18190:	mvn	r8, fp
   18194:	cmp	r3, #0
   18198:	addeq	r4, r4, r6
   1819c:	mvnne	r4, #-2147483648	; 0x80000000
   181a0:	lsr	r8, r8, #31
   181a4:	cmp	fp, r4
   181a8:	movge	r3, #0
   181ac:	andlt	r3, r8, #1
   181b0:	cmp	r3, #0
   181b4:	beq	1829c <argp_parse@@Base+0x171c>
   181b8:	cmp	r7, #0
   181bc:	blt	1836c <argp_parse@@Base+0x17ec>
   181c0:	bne	18364 <argp_parse@@Base+0x17e4>
   181c4:	mov	r2, #64	; 0x40
   181c8:	mov	r1, r7
   181cc:	mov	r0, r2
   181d0:	str	r2, [sp, #4]
   181d4:	bl	19c20 <argp_parse@@Base+0x30a0>
   181d8:	ldr	r2, [sp, #4]
   181dc:	mov	r1, r7
   181e0:	mov	r4, r0
   181e4:	mov	r0, r2
   181e8:	bl	19e40 <argp_parse@@Base+0x32c0>
   181ec:	ldr	r2, [sp, #4]
   181f0:	sub	r1, r2, r1
   181f4:	cmp	r9, #0
   181f8:	sub	r3, r4, r6
   181fc:	streq	r9, [sl]
   18200:	cmp	r3, r5
   18204:	bge	18288 <argp_parse@@Base+0x1708>
   18208:	cmp	r5, #0
   1820c:	blt	182f8 <argp_parse@@Base+0x1778>
   18210:	cmp	r6, #0
   18214:	blt	18234 <argp_parse@@Base+0x16b4>
   18218:	mvn	r3, #-2147483648	; 0x80000000
   1821c:	sub	r3, r3, r5
   18220:	cmp	r6, r3
   18224:	movle	r3, #0
   18228:	movgt	r3, #1
   1822c:	cmp	r3, #0
   18230:	bne	183f4 <argp_parse@@Base+0x1874>
   18234:	add	r5, r6, r5
   18238:	cmp	fp, r5
   1823c:	movge	r8, #0
   18240:	andlt	r8, r8, #1
   18244:	cmp	r8, #0
   18248:	mov	r4, r5
   1824c:	bne	183f4 <argp_parse@@Base+0x1874>
   18250:	cmp	r7, #0
   18254:	blt	1830c <argp_parse@@Base+0x178c>
   18258:	beq	18284 <argp_parse@@Base+0x1704>
   1825c:	cmp	r5, #0
   18260:	blt	183b4 <argp_parse@@Base+0x1834>
   18264:	mov	r1, r7
   18268:	mvn	r0, #-2147483648	; 0x80000000
   1826c:	bl	19c20 <argp_parse@@Base+0x30a0>
   18270:	cmp	r5, r0
   18274:	movle	r0, #0
   18278:	movgt	r0, #1
   1827c:	cmp	r0, #0
   18280:	bne	183f4 <argp_parse@@Base+0x1874>
   18284:	mul	r1, r5, r7
   18288:	mov	r0, r9
   1828c:	bl	18004 <argp_parse@@Base+0x1484>
   18290:	str	r4, [sl]
   18294:	add	sp, sp, #12
   18298:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1829c:	cmp	r7, #0
   182a0:	blt	18338 <argp_parse@@Base+0x17b8>
   182a4:	beq	181c4 <argp_parse@@Base+0x1644>
   182a8:	cmp	r4, #0
   182ac:	blt	18374 <argp_parse@@Base+0x17f4>
   182b0:	mov	r1, r7
   182b4:	mvn	r0, #-2147483648	; 0x80000000
   182b8:	bl	19c20 <argp_parse@@Base+0x30a0>
   182bc:	cmp	r0, r4
   182c0:	movge	r0, #0
   182c4:	movlt	r0, #1
   182c8:	cmp	r0, #0
   182cc:	mvnne	r2, #-2147483648	; 0x80000000
   182d0:	bne	181c8 <argp_parse@@Base+0x1648>
   182d4:	mul	r1, r7, r4
   182d8:	cmp	r1, #63	; 0x3f
   182dc:	bgt	181f4 <argp_parse@@Base+0x1674>
   182e0:	b	181c4 <argp_parse@@Base+0x1644>
   182e4:	rsb	r3, r4, #-2147483648	; 0x80000000
   182e8:	cmp	r6, r3
   182ec:	movge	r3, #0
   182f0:	movlt	r3, #1
   182f4:	b	18190 <argp_parse@@Base+0x1610>
   182f8:	rsb	r3, r5, #-2147483648	; 0x80000000
   182fc:	cmp	r6, r3
   18300:	movge	r3, #0
   18304:	movlt	r3, #1
   18308:	b	1822c <argp_parse@@Base+0x16ac>
   1830c:	cmp	r5, #0
   18310:	blt	18398 <argp_parse@@Base+0x1818>
   18314:	cmn	r7, #1
   18318:	beq	18284 <argp_parse@@Base+0x1704>
   1831c:	mov	r1, r7
   18320:	mov	r0, #-2147483648	; 0x80000000
   18324:	bl	19c20 <argp_parse@@Base+0x30a0>
   18328:	cmp	r5, r0
   1832c:	movle	r0, #0
   18330:	movgt	r0, #1
   18334:	b	1827c <argp_parse@@Base+0x16fc>
   18338:	cmp	r4, #0
   1833c:	blt	183d8 <argp_parse@@Base+0x1858>
   18340:	cmn	r7, #1
   18344:	beq	182d4 <argp_parse@@Base+0x1754>
   18348:	mov	r1, r7
   1834c:	mov	r0, #-2147483648	; 0x80000000
   18350:	bl	19c20 <argp_parse@@Base+0x30a0>
   18354:	cmp	r0, r4
   18358:	movge	r0, #0
   1835c:	movlt	r0, #1
   18360:	b	182c8 <argp_parse@@Base+0x1748>
   18364:	mov	r4, fp
   18368:	b	182b0 <argp_parse@@Base+0x1730>
   1836c:	mov	r4, fp
   18370:	b	18340 <argp_parse@@Base+0x17c0>
   18374:	cmn	r4, #1
   18378:	beq	182d4 <argp_parse@@Base+0x1754>
   1837c:	mov	r1, r4
   18380:	mov	r0, #-2147483648	; 0x80000000
   18384:	bl	19c20 <argp_parse@@Base+0x30a0>
   18388:	cmp	r7, r0
   1838c:	movle	r0, #0
   18390:	movgt	r0, #1
   18394:	b	182c8 <argp_parse@@Base+0x1748>
   18398:	mov	r1, r7
   1839c:	mvn	r0, #-2147483648	; 0x80000000
   183a0:	bl	19c20 <argp_parse@@Base+0x30a0>
   183a4:	cmp	r5, r0
   183a8:	movge	r0, #0
   183ac:	movlt	r0, #1
   183b0:	b	1827c <argp_parse@@Base+0x16fc>
   183b4:	cmn	r5, #1
   183b8:	beq	18284 <argp_parse@@Base+0x1704>
   183bc:	mov	r1, r5
   183c0:	mov	r0, #-2147483648	; 0x80000000
   183c4:	bl	19c20 <argp_parse@@Base+0x30a0>
   183c8:	cmp	r7, r0
   183cc:	movle	r0, #0
   183d0:	movgt	r0, #1
   183d4:	b	1827c <argp_parse@@Base+0x16fc>
   183d8:	mov	r1, r7
   183dc:	mvn	r0, #-2147483648	; 0x80000000
   183e0:	bl	19c20 <argp_parse@@Base+0x30a0>
   183e4:	cmp	r0, r4
   183e8:	movle	r0, #0
   183ec:	movgt	r0, #1
   183f0:	b	182c8 <argp_parse@@Base+0x1748>
   183f4:	bl	18510 <argp_parse@@Base+0x1990>
   183f8:	push	{r4, lr}
   183fc:	mov	r1, #1
   18400:	bl	1853c <argp_parse@@Base+0x19bc>
   18404:	cmp	r0, #0
   18408:	popne	{r4, pc}
   1840c:	bl	18510 <argp_parse@@Base+0x1990>
   18410:	push	{r4, lr}
   18414:	mov	r1, #1
   18418:	bl	1853c <argp_parse@@Base+0x19bc>
   1841c:	cmp	r0, #0
   18420:	popne	{r4, pc}
   18424:	bl	18510 <argp_parse@@Base+0x1990>
   18428:	push	{r4, lr}
   1842c:	bl	1853c <argp_parse@@Base+0x19bc>
   18430:	cmp	r0, #0
   18434:	popne	{r4, pc}
   18438:	bl	18510 <argp_parse@@Base+0x1990>
   1843c:	push	{r4, lr}
   18440:	bl	1853c <argp_parse@@Base+0x19bc>
   18444:	cmp	r0, #0
   18448:	popne	{r4, pc}
   1844c:	bl	18510 <argp_parse@@Base+0x1990>
   18450:	push	{r4, r5, r6, lr}
   18454:	mov	r6, r0
   18458:	mov	r0, r1
   1845c:	mov	r4, r1
   18460:	bl	18584 <argp_parse@@Base+0x1a04>
   18464:	subs	r5, r0, #0
   18468:	beq	18480 <argp_parse@@Base+0x1900>
   1846c:	mov	r2, r4
   18470:	mov	r1, r6
   18474:	bl	11188 <memcpy@plt>
   18478:	mov	r0, r5
   1847c:	pop	{r4, r5, r6, pc}
   18480:	bl	18510 <argp_parse@@Base+0x1990>
   18484:	push	{r4, r5, r6, lr}
   18488:	mov	r6, r0
   1848c:	mov	r0, r1
   18490:	mov	r4, r1
   18494:	bl	18584 <argp_parse@@Base+0x1a04>
   18498:	subs	r5, r0, #0
   1849c:	beq	184b4 <argp_parse@@Base+0x1934>
   184a0:	mov	r2, r4
   184a4:	mov	r1, r6
   184a8:	bl	11188 <memcpy@plt>
   184ac:	mov	r0, r5
   184b0:	pop	{r4, r5, r6, pc}
   184b4:	bl	18510 <argp_parse@@Base+0x1990>
   184b8:	push	{r4, r5, r6, lr}
   184bc:	mov	r6, r0
   184c0:	add	r0, r1, #1
   184c4:	mov	r4, r1
   184c8:	bl	18584 <argp_parse@@Base+0x1a04>
   184cc:	subs	r5, r0, #0
   184d0:	beq	184f0 <argp_parse@@Base+0x1970>
   184d4:	mov	r3, #0
   184d8:	mov	r1, r6
   184dc:	strb	r3, [r5, r4]
   184e0:	mov	r2, r4
   184e4:	bl	11188 <memcpy@plt>
   184e8:	mov	r0, r5
   184ec:	pop	{r4, r5, r6, pc}
   184f0:	bl	18510 <argp_parse@@Base+0x1990>
   184f4:	push	{r4, lr}
   184f8:	mov	r4, r0
   184fc:	bl	112c0 <strlen@plt>
   18500:	add	r1, r0, #1
   18504:	mov	r0, r4
   18508:	pop	{r4, lr}
   1850c:	b	18450 <argp_parse@@Base+0x18d0>
   18510:	ldr	r1, [pc, #24]	; 18530 <argp_parse@@Base+0x19b0>
   18514:	push	{r4, lr}
   18518:	ldr	r0, [r1]
   1851c:	ldr	r3, [pc, #16]	; 18534 <argp_parse@@Base+0x19b4>
   18520:	ldr	r2, [pc, #16]	; 18538 <argp_parse@@Base+0x19b8>
   18524:	mov	r1, #0
   18528:	bl	11224 <error@plt>
   1852c:	bl	1141c <abort@plt>
   18530:	andeq	ip, r2, r0, asr #7
   18534:	andeq	fp, r1, r4, ror r1
   18538:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   1853c:	cmp	r1, #0
   18540:	cmpne	r0, #0
   18544:	moveq	r1, #1
   18548:	moveq	r0, r1
   1854c:	umull	r2, r3, r0, r1
   18550:	adds	r3, r3, #0
   18554:	movne	r3, #1
   18558:	cmp	r2, #0
   1855c:	blt	1856c <argp_parse@@Base+0x19ec>
   18560:	cmp	r3, #0
   18564:	bne	1856c <argp_parse@@Base+0x19ec>
   18568:	b	110d4 <calloc@plt>
   1856c:	push	{r4, lr}
   18570:	bl	112e4 <__errno_location@plt>
   18574:	mov	r3, #12
   18578:	str	r3, [r0]
   1857c:	mov	r0, #0
   18580:	pop	{r4, pc}
   18584:	cmp	r0, #0
   18588:	moveq	r0, #1
   1858c:	cmp	r0, #0
   18590:	blt	18598 <argp_parse@@Base+0x1a18>
   18594:	b	11248 <malloc@plt>
   18598:	push	{r4, lr}
   1859c:	bl	112e4 <__errno_location@plt>
   185a0:	mov	r3, #12
   185a4:	str	r3, [r0]
   185a8:	mov	r0, #0
   185ac:	pop	{r4, pc}
   185b0:	cmp	r0, #0
   185b4:	beq	185d8 <argp_parse@@Base+0x1a58>
   185b8:	cmp	r1, #0
   185bc:	push	{lr}		; (str lr, [sp, #-4]!)
   185c0:	sub	sp, sp, #12
   185c4:	beq	185e0 <argp_parse@@Base+0x1a60>
   185c8:	blt	185f8 <argp_parse@@Base+0x1a78>
   185cc:	add	sp, sp, #12
   185d0:	pop	{lr}		; (ldr lr, [sp], #4)
   185d4:	b	111e8 <realloc@plt>
   185d8:	mov	r0, r1
   185dc:	b	18584 <argp_parse@@Base+0x1a04>
   185e0:	str	r1, [sp, #4]
   185e4:	bl	17a18 <argp_parse@@Base+0xe98>
   185e8:	ldr	r3, [sp, #4]
   185ec:	mov	r0, r3
   185f0:	add	sp, sp, #12
   185f4:	pop	{pc}		; (ldr pc, [sp], #4)
   185f8:	bl	112e4 <__errno_location@plt>
   185fc:	mov	r2, #12
   18600:	mov	r3, #0
   18604:	str	r2, [r0]
   18608:	b	185ec <argp_parse@@Base+0x1a6c>
   1860c:	push	{r4, r5, r6, r7, r8, lr}
   18610:	mov	r8, r0
   18614:	mov	r0, #36	; 0x24
   18618:	mov	r7, r1
   1861c:	mov	r6, r2
   18620:	mov	r5, r3
   18624:	bl	18584 <argp_parse@@Base+0x1a04>
   18628:	subs	r4, r0, #0
   1862c:	beq	18670 <argp_parse@@Base+0x1af0>
   18630:	mov	r0, #0
   18634:	str	r5, [r4, #12]
   18638:	str	r0, [r4, #20]
   1863c:	str	r0, [r4, #16]
   18640:	str	r8, [r4]
   18644:	str	r7, [r4, #4]
   18648:	str	r6, [r4, #8]
   1864c:	mov	r0, #200	; 0xc8
   18650:	bl	18584 <argp_parse@@Base+0x1a04>
   18654:	cmp	r0, #0
   18658:	addne	r3, r0, #200	; 0xc8
   1865c:	mov	r5, r0
   18660:	str	r0, [r4, #24]
   18664:	strne	r0, [r4, #28]
   18668:	strne	r3, [r4, #32]
   1866c:	beq	18678 <argp_parse@@Base+0x1af8>
   18670:	mov	r0, r4
   18674:	pop	{r4, r5, r6, r7, r8, pc}
   18678:	mov	r0, r4
   1867c:	bl	17a18 <argp_parse@@Base+0xe98>
   18680:	mov	r4, r5
   18684:	b	18670 <argp_parse@@Base+0x1af0>
   18688:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1868c:	mov	r7, r0
   18690:	ldr	r6, [r0, #24]
   18694:	ldr	r3, [r0, #16]
   18698:	ldr	fp, [r0, #28]
   1869c:	sub	sp, sp, #12
   186a0:	add	r6, r6, r3
   186a4:	mov	r9, #32
   186a8:	cmp	r6, fp
   186ac:	bcs	18788 <argp_parse@@Base+0x1c08>
   186b0:	ldr	r8, [r7, #20]
   186b4:	cmp	r8, #0
   186b8:	bne	18728 <argp_parse@@Base+0x1ba8>
   186bc:	ldr	r4, [r7, #4]
   186c0:	cmp	r4, #0
   186c4:	beq	189cc <argp_parse@@Base+0x1e4c>
   186c8:	ldr	r2, [r7, #32]
   186cc:	add	r3, fp, r4
   186d0:	cmp	r2, r3
   186d4:	bls	186e8 <argp_parse@@Base+0x1b68>
   186d8:	b	18b14 <argp_parse@@Base+0x1f94>
   186dc:	add	r8, r8, #1
   186e0:	cmp	r4, r8
   186e4:	beq	1871c <argp_parse@@Base+0x1b9c>
   186e8:	ldr	r0, [r7]
   186ec:	ldr	r3, [r0, #20]
   186f0:	ldr	r2, [r0, #24]
   186f4:	add	r1, r3, #1
   186f8:	cmp	r3, r2
   186fc:	strcc	r1, [r0, #20]
   18700:	strbcc	r9, [r3]
   18704:	bcc	186dc <argp_parse@@Base+0x1b5c>
   18708:	mov	r1, r9
   1870c:	add	r8, r8, #1
   18710:	bl	11344 <__overflow@plt>
   18714:	cmp	r4, r8
   18718:	bne	186e8 <argp_parse@@Base+0x1b68>
   1871c:	ldr	fp, [r7, #28]
   18720:	mov	r8, r4
   18724:	str	r4, [r7, #20]
   18728:	sub	sl, fp, r6
   1872c:	mov	r2, sl
   18730:	mov	r1, #10
   18734:	mov	r0, r6
   18738:	bl	1132c <memchr@plt>
   1873c:	cmp	r8, #0
   18740:	movlt	r8, #0
   18744:	movlt	r3, r8
   18748:	str	r6, [sp]
   1874c:	mov	r4, r0
   18750:	strlt	r3, [r7, #20]
   18754:	cmp	r4, #0
   18758:	beq	189f0 <argp_parse@@Base+0x1e70>
   1875c:	sub	r2, r4, r6
   18760:	ldr	r3, [r7, #8]
   18764:	add	r2, r2, r8
   18768:	cmp	r2, r3
   1876c:	bge	1879c <argp_parse@@Base+0x1c1c>
   18770:	ldr	fp, [r7, #28]
   18774:	add	r6, r4, #1
   18778:	mov	r3, #0
   1877c:	cmp	r6, fp
   18780:	str	r3, [r7, #20]
   18784:	bcc	186b0 <argp_parse@@Base+0x1b30>
   18788:	ldr	r3, [r7, #24]
   1878c:	sub	r3, fp, r3
   18790:	str	r3, [r7, #16]
   18794:	add	sp, sp, #12
   18798:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1879c:	ldr	r2, [r7, #12]
   187a0:	sub	r5, r3, #1
   187a4:	cmp	r2, #0
   187a8:	str	r2, [sp, #4]
   187ac:	blt	18aa8 <argp_parse@@Base+0x1f28>
   187b0:	add	r5, r5, #1
   187b4:	sub	r8, r5, r8
   187b8:	adds	r8, r6, r8
   187bc:	bcs	18a28 <argp_parse@@Base+0x1ea8>
   187c0:	bl	11290 <__ctype_b_loc@plt>
   187c4:	mov	r3, r8
   187c8:	ldr	r0, [r0]
   187cc:	b	187d8 <argp_parse@@Base+0x1c58>
   187d0:	cmp	r3, r6
   187d4:	bcc	18a2c <argp_parse@@Base+0x1eac>
   187d8:	mov	r1, r3
   187dc:	sub	r3, r3, #1
   187e0:	ldrb	r2, [r1]
   187e4:	mov	r5, r3
   187e8:	lsl	r2, r2, #1
   187ec:	ldrh	r2, [r0, r2]
   187f0:	tst	r2, #1
   187f4:	beq	187d0 <argp_parse@@Base+0x1c50>
   187f8:	add	r5, r1, #1
   187fc:	cmp	r5, r6
   18800:	bls	18a40 <argp_parse@@Base+0x1ec0>
   18804:	cmp	r1, r6
   18808:	bcc	18a38 <argp_parse@@Base+0x1eb8>
   1880c:	mov	r1, r3
   18810:	sub	r8, r6, #1
   18814:	b	18830 <argp_parse@@Base+0x1cb0>
   18818:	ldrb	r3, [r1]
   1881c:	sub	r1, r1, #1
   18820:	lsl	r3, r3, #1
   18824:	ldrh	r3, [r0, r3]
   18828:	tst	r3, #1
   1882c:	beq	18b58 <argp_parse@@Base+0x1fd8>
   18830:	cmp	r8, r1
   18834:	mov	r2, r1
   18838:	bne	18818 <argp_parse@@Base+0x1c98>
   1883c:	add	r8, r8, #1
   18840:	add	r3, sl, #1
   18844:	add	r3, r6, r3
   18848:	cmp	r5, r3
   1884c:	beq	18934 <argp_parse@@Base+0x1db4>
   18850:	add	r3, r8, #1
   18854:	ldr	r1, [sp, #4]
   18858:	sub	r2, r5, r3
   1885c:	cmp	r2, r1
   18860:	bge	18950 <argp_parse@@Base+0x1dd0>
   18864:	cmp	r5, fp
   18868:	bcs	18948 <argp_parse@@Base+0x1dc8>
   1886c:	ldr	r3, [r7, #32]
   18870:	ldr	r2, [sp, #4]
   18874:	sub	r3, r3, fp
   18878:	add	r0, r2, #1
   1887c:	cmp	r3, r0
   18880:	bgt	18b88 <argp_parse@@Base+0x2008>
   18884:	ldr	r0, [r7, #24]
   18888:	cmp	r8, r0
   1888c:	bls	188a0 <argp_parse@@Base+0x1d20>
   18890:	sub	r2, r8, r0
   18894:	ldr	r3, [r7]
   18898:	mov	r1, #1
   1889c:	bl	111a0 <fwrite_unlocked@plt>
   188a0:	ldr	r0, [r7]
   188a4:	ldr	r2, [r0, #24]
   188a8:	ldr	r3, [r0, #20]
   188ac:	cmp	r3, r2
   188b0:	addcc	r2, r3, #1
   188b4:	strcc	r2, [r0, #20]
   188b8:	movcc	r2, #10
   188bc:	strbcc	r2, [r3]
   188c0:	bcs	18bc8 <argp_parse@@Base+0x2048>
   188c4:	ldr	r6, [r7, #24]
   188c8:	ldr	r3, [sp]
   188cc:	sub	r2, r5, r6
   188d0:	sub	r3, r3, r6
   188d4:	add	sl, sl, r3
   188d8:	mov	fp, r2
   188dc:	mov	r4, r6
   188e0:	ldr	r3, [r7, #12]
   188e4:	cmp	r3, r2
   188e8:	bgt	18970 <argp_parse@@Base+0x1df0>
   188ec:	cmp	r3, #0
   188f0:	movgt	r2, r6
   188f4:	ble	18910 <argp_parse@@Base+0x1d90>
   188f8:	strb	r9, [r2], #1
   188fc:	ldr	r3, [r7, #12]
   18900:	sub	r1, r2, r6
   18904:	cmp	r3, r1
   18908:	bgt	188f8 <argp_parse@@Base+0x1d78>
   1890c:	mov	r6, r2
   18910:	cmp	r6, r5
   18914:	bcc	18af8 <argp_parse@@Base+0x1f78>
   18918:	sub	fp, sl, fp
   1891c:	cmp	r3, #0
   18920:	add	fp, r6, fp
   18924:	mvneq	r3, #0
   18928:	str	fp, [r7, #28]
   1892c:	str	r3, [r7, #20]
   18930:	b	186a8 <argp_parse@@Base+0x1b28>
   18934:	ldr	r3, [r7, #32]
   18938:	ldr	r2, [sp, #4]
   1893c:	sub	r3, r3, r8
   18940:	cmp	r3, r2
   18944:	ble	18864 <argp_parse@@Base+0x1ce4>
   18948:	add	r3, r8, #1
   1894c:	sub	r2, r5, r3
   18950:	sub	fp, r5, r6
   18954:	mov	r4, r6
   18958:	mov	r6, r3
   1895c:	mov	r3, #10
   18960:	strb	r3, [r8]
   18964:	ldr	r3, [r7, #12]
   18968:	cmp	r3, r2
   1896c:	ble	188ec <argp_parse@@Base+0x1d6c>
   18970:	add	r2, sl, #1
   18974:	add	r2, r4, r2
   18978:	cmp	r5, r2
   1897c:	beq	18b74 <argp_parse@@Base+0x1ff4>
   18980:	cmp	r3, #0
   18984:	movgt	r8, #0
   18988:	bgt	189a0 <argp_parse@@Base+0x1e20>
   1898c:	b	18910 <argp_parse@@Base+0x1d90>
   18990:	ldr	r3, [r7, #12]
   18994:	add	r8, r8, #1
   18998:	cmp	r3, r8
   1899c:	ble	18910 <argp_parse@@Base+0x1d90>
   189a0:	ldr	r0, [r7]
   189a4:	ldr	r3, [r0, #20]
   189a8:	ldr	r2, [r0, #24]
   189ac:	add	r1, r3, #1
   189b0:	cmp	r3, r2
   189b4:	strcc	r1, [r0, #20]
   189b8:	strbcc	r9, [r3]
   189bc:	bcc	18990 <argp_parse@@Base+0x1e10>
   189c0:	mov	r1, r9
   189c4:	bl	11344 <__overflow@plt>
   189c8:	b	18990 <argp_parse@@Base+0x1e10>
   189cc:	sub	sl, fp, r6
   189d0:	mov	r2, sl
   189d4:	mov	r1, #10
   189d8:	mov	r0, r6
   189dc:	bl	1132c <memchr@plt>
   189e0:	str	r6, [sp]
   189e4:	mov	r4, r0
   189e8:	cmp	r4, #0
   189ec:	bne	1875c <argp_parse@@Base+0x1bdc>
   189f0:	ldr	r5, [r7, #8]
   189f4:	add	r3, r8, sl
   189f8:	cmp	r3, r5
   189fc:	bcc	18bec <argp_parse@@Base+0x206c>
   18a00:	ldr	r2, [r7, #12]
   18a04:	sub	r5, r5, #1
   18a08:	cmp	r2, #0
   18a0c:	str	r2, [sp, #4]
   18a10:	blt	18bd8 <argp_parse@@Base+0x2058>
   18a14:	add	r5, r5, #1
   18a18:	sub	r8, r5, r8
   18a1c:	adds	r8, r6, r8
   18a20:	mov	r4, fp
   18a24:	bcc	187c0 <argp_parse@@Base+0x1c40>
   18a28:	mov	r5, r8
   18a2c:	add	r5, r5, #1
   18a30:	cmp	r5, r6
   18a34:	bls	18a40 <argp_parse@@Base+0x1ec0>
   18a38:	mov	r8, r5
   18a3c:	b	18840 <argp_parse@@Base+0x1cc0>
   18a40:	cmp	r8, r4
   18a44:	bcs	18a7c <argp_parse@@Base+0x1efc>
   18a48:	add	r5, r8, #1
   18a4c:	b	18a70 <argp_parse@@Base+0x1ef0>
   18a50:	bl	11290 <__ctype_b_loc@plt>
   18a54:	ldrb	r3, [r5]
   18a58:	add	r5, r5, #1
   18a5c:	lsl	r3, r3, #1
   18a60:	ldr	r2, [r0]
   18a64:	ldrh	r3, [r2, r3]
   18a68:	tst	r3, #1
   18a6c:	bne	18a8c <argp_parse@@Base+0x1f0c>
   18a70:	cmp	r5, r4
   18a74:	mov	r8, r5
   18a78:	bne	18a50 <argp_parse@@Base+0x1ed0>
   18a7c:	cmp	r8, r4
   18a80:	beq	18b60 <argp_parse@@Base+0x1fe0>
   18a84:	bl	11290 <__ctype_b_loc@plt>
   18a88:	ldr	r2, [r0]
   18a8c:	mov	r5, r8
   18a90:	ldrb	r3, [r5, #1]!
   18a94:	lsl	r3, r3, #1
   18a98:	ldrh	r3, [r2, r3]
   18a9c:	tst	r3, #1
   18aa0:	bne	18a90 <argp_parse@@Base+0x1f10>
   18aa4:	b	18840 <argp_parse@@Base+0x1cc0>
   18aa8:	cmp	r4, fp
   18aac:	str	r3, [sp]
   18ab0:	bcs	18bd4 <argp_parse@@Base+0x2054>
   18ab4:	sub	r0, r5, r8
   18ab8:	sub	r2, fp, r4
   18abc:	add	r0, r6, r0
   18ac0:	mov	r1, r4
   18ac4:	bl	1114c <memmove@plt>
   18ac8:	ldr	r2, [r7, #20]
   18acc:	ldr	fp, [r7, #28]
   18ad0:	sub	r5, r5, r2
   18ad4:	add	r5, r6, r5
   18ad8:	mov	r3, #0
   18adc:	sub	r4, r5, r4
   18ae0:	str	r3, [r7, #20]
   18ae4:	ldr	r3, [sp]
   18ae8:	sub	fp, fp, r4
   18aec:	add	r6, r6, r3
   18af0:	str	fp, [r7, #28]
   18af4:	b	186a8 <argp_parse@@Base+0x1b28>
   18af8:	add	r2, r4, sl
   18afc:	sub	r2, r2, r5
   18b00:	mov	r1, r5
   18b04:	mov	r0, r6
   18b08:	bl	1114c <memmove@plt>
   18b0c:	ldr	r3, [r7, #12]
   18b10:	b	18918 <argp_parse@@Base+0x1d98>
   18b14:	add	r5, r6, r4
   18b18:	sub	r2, fp, r6
   18b1c:	mov	r1, r6
   18b20:	mov	r0, r5
   18b24:	bl	1114c <memmove@plt>
   18b28:	ldr	r3, [r7, #28]
   18b2c:	mov	r0, r6
   18b30:	add	r3, r3, r4
   18b34:	str	r3, [r7, #28]
   18b38:	mov	r2, r4
   18b3c:	mov	r1, r9
   18b40:	bl	11314 <memset@plt>
   18b44:	mov	r6, r5
   18b48:	ldr	fp, [r7, #28]
   18b4c:	mov	r8, r4
   18b50:	str	r4, [r7, #20]
   18b54:	b	18728 <argp_parse@@Base+0x1ba8>
   18b58:	add	r8, r2, #1
   18b5c:	b	18840 <argp_parse@@Base+0x1cc0>
   18b60:	mov	r3, #0
   18b64:	str	r3, [r7, #20]
   18b68:	add	r6, r8, #1
   18b6c:	ldr	fp, [r7, #28]
   18b70:	b	186a8 <argp_parse@@Base+0x1b28>
   18b74:	ldr	r2, [r7, #32]
   18b78:	sub	r2, r2, r5
   18b7c:	cmp	r3, r2
   18b80:	ble	188ec <argp_parse@@Base+0x1d6c>
   18b84:	b	18980 <argp_parse@@Base+0x1e00>
   18b88:	sub	fp, fp, r5
   18b8c:	mov	r2, fp
   18b90:	mov	r1, r5
   18b94:	add	r0, r8, r0
   18b98:	bl	1114c <memmove@plt>
   18b9c:	ldr	r2, [r7, #12]
   18ba0:	mov	r3, #10
   18ba4:	add	r5, r2, #1
   18ba8:	add	r5, r8, r5
   18bac:	add	fp, r5, fp
   18bb0:	sub	sl, fp, r6
   18bb4:	mov	r4, r6
   18bb8:	sub	fp, r5, r6
   18bbc:	strb	r3, [r8]
   18bc0:	add	r6, r8, #1
   18bc4:	b	188e0 <argp_parse@@Base+0x1d60>
   18bc8:	mov	r1, #10
   18bcc:	bl	11344 <__overflow@plt>
   18bd0:	b	188c4 <argp_parse@@Base+0x1d44>
   18bd4:	add	r3, r8, sl
   18bd8:	sub	r5, r5, r3
   18bdc:	add	fp, fp, r5
   18be0:	str	fp, [r7, #28]
   18be4:	str	r3, [r7, #20]
   18be8:	b	18788 <argp_parse@@Base+0x1c08>
   18bec:	str	r3, [r7, #20]
   18bf0:	ldr	fp, [r7, #28]
   18bf4:	b	18788 <argp_parse@@Base+0x1c08>
   18bf8:	push	{r4, lr}
   18bfc:	mov	r4, r0
   18c00:	bl	18688 <argp_parse@@Base+0x1b08>
   18c04:	ldr	r2, [r4, #28]
   18c08:	ldr	r0, [r4, #24]
   18c0c:	cmp	r2, r0
   18c10:	bls	18c28 <argp_parse@@Base+0x20a8>
   18c14:	sub	r2, r2, r0
   18c18:	ldr	r3, [r4]
   18c1c:	mov	r1, #1
   18c20:	bl	111a0 <fwrite_unlocked@plt>
   18c24:	ldr	r0, [r4, #24]
   18c28:	bl	17a18 <argp_parse@@Base+0xe98>
   18c2c:	mov	r0, r4
   18c30:	pop	{r4, lr}
   18c34:	b	17a18 <argp_parse@@Base+0xe98>
   18c38:	push	{r4, r5, r6, lr}
   18c3c:	mov	r4, r0
   18c40:	mov	r5, r1
   18c44:	bl	18688 <argp_parse@@Base+0x1b08>
   18c48:	ldr	r3, [r4, #24]
   18c4c:	ldr	r2, [r4, #28]
   18c50:	mov	r0, r3
   18c54:	sub	r2, r2, r3
   18c58:	mov	r1, #1
   18c5c:	ldr	r3, [r4]
   18c60:	bl	111a0 <fwrite_unlocked@plt>
   18c64:	ldr	r2, [r4, #28]
   18c68:	ldr	r3, [r4, #24]
   18c6c:	sub	r1, r2, r3
   18c70:	cmp	r0, r1
   18c74:	bne	18cb8 <argp_parse@@Base+0x2138>
   18c78:	ldr	r1, [r4, #32]
   18c7c:	mov	r2, #0
   18c80:	sub	r1, r1, r3
   18c84:	cmp	r1, r5
   18c88:	str	r3, [r4, #28]
   18c8c:	str	r2, [r4, #16]
   18c90:	movcs	r3, #1
   18c94:	bcs	18cb0 <argp_parse@@Base+0x2130>
   18c98:	adds	r5, r1, r5
   18c9c:	bcc	18ce8 <argp_parse@@Base+0x2168>
   18ca0:	bl	112e4 <__errno_location@plt>
   18ca4:	mov	r3, #0
   18ca8:	mov	r2, #12
   18cac:	str	r2, [r0]
   18cb0:	mov	r0, r3
   18cb4:	pop	{r4, r5, r6, pc}
   18cb8:	ldr	r1, [r4, #16]
   18cbc:	sub	r2, r2, r0
   18cc0:	sub	r1, r1, r0
   18cc4:	str	r2, [r4, #28]
   18cc8:	str	r1, [r4, #16]
   18ccc:	sub	r2, r2, r3
   18cd0:	add	r1, r3, r0
   18cd4:	mov	r0, r3
   18cd8:	bl	1114c <memmove@plt>
   18cdc:	mov	r3, #0
   18ce0:	mov	r0, r3
   18ce4:	pop	{r4, r5, r6, pc}
   18ce8:	mov	r0, r3
   18cec:	mov	r1, r5
   18cf0:	bl	185b0 <argp_parse@@Base+0x1a30>
   18cf4:	cmp	r0, #0
   18cf8:	beq	18ca0 <argp_parse@@Base+0x2120>
   18cfc:	add	r1, r0, r5
   18d00:	mov	r3, #1
   18d04:	str	r0, [r4, #24]
   18d08:	str	r0, [r4, #28]
   18d0c:	str	r1, [r4, #32]
   18d10:	mov	r0, r3
   18d14:	pop	{r4, r5, r6, pc}
   18d18:	ldr	r3, [r0, #32]
   18d1c:	ldr	r2, [r0, #28]
   18d20:	sub	r3, r3, r2
   18d24:	cmp	r3, r1
   18d28:	bcc	18d34 <argp_parse@@Base+0x21b4>
   18d2c:	mov	r0, #1
   18d30:	bx	lr
   18d34:	b	18c38 <argp_parse@@Base+0x20b8>
   18d38:	push	{r1, r2, r3}
   18d3c:	mov	r1, #150	; 0x96
   18d40:	push	{r4, r5, r6, r7, lr}
   18d44:	sub	sp, sp, #8
   18d48:	mov	r5, r0
   18d4c:	ldr	r7, [sp, #28]
   18d50:	add	r6, sp, #32
   18d54:	ldr	r3, [r5, #32]
   18d58:	ldr	r0, [r5, #28]
   18d5c:	sub	r2, r3, r0
   18d60:	cmp	r1, r2
   18d64:	bhi	18da8 <argp_parse@@Base+0x2228>
   18d68:	sub	r4, r3, r0
   18d6c:	mov	r1, r4
   18d70:	mov	r3, r6
   18d74:	mov	r2, r7
   18d78:	str	r6, [sp, #4]
   18d7c:	bl	113bc <vsnprintf@plt>
   18d80:	cmp	r4, r0
   18d84:	addls	r1, r0, #1
   18d88:	bls	18d54 <argp_parse@@Base+0x21d4>
   18d8c:	ldr	r3, [r5, #28]
   18d90:	add	r3, r3, r0
   18d94:	str	r3, [r5, #28]
   18d98:	add	sp, sp, #8
   18d9c:	pop	{r4, r5, r6, r7, lr}
   18da0:	add	sp, sp, #12
   18da4:	bx	lr
   18da8:	mov	r0, r5
   18dac:	bl	18c38 <argp_parse@@Base+0x20b8>
   18db0:	cmp	r0, #0
   18db4:	ldrne	r3, [r5, #32]
   18db8:	ldrne	r0, [r5, #28]
   18dbc:	bne	18d68 <argp_parse@@Base+0x21e8>
   18dc0:	mvn	r0, #0
   18dc4:	add	sp, sp, #8
   18dc8:	pop	{r4, r5, r6, r7, lr}
   18dcc:	add	sp, sp, #12
   18dd0:	bx	lr
   18dd4:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   18dd8:	ldr	r4, [r1, #32]
   18ddc:	ldr	r8, [r1, #28]
   18de0:	ldr	r7, [r1]
   18de4:	add	r6, r0, r4, lsl #2
   18de8:	mov	r2, r8
   18dec:	mov	r5, r7
   18df0:	cmp	r5, r4
   18df4:	movle	r3, #0
   18df8:	movgt	r3, #1
   18dfc:	cmp	r2, r4
   18e00:	movge	r3, #0
   18e04:	cmp	r3, #0
   18e08:	beq	18e7c <argp_parse@@Base+0x22fc>
   18e0c:	sub	r3, r5, r4
   18e10:	sub	sl, r4, r2
   18e14:	cmp	r3, sl
   18e18:	ble	18e4c <argp_parse@@Base+0x22cc>
   18e1c:	sub	r5, r5, sl
   18e20:	add	sl, sl, r2
   18e24:	add	ip, r0, r5, lsl #2
   18e28:	add	sl, r0, sl, lsl #2
   18e2c:	add	r3, r0, r2, lsl #2
   18e30:	ldr	r9, [ip]
   18e34:	ldr	lr, [r3]
   18e38:	str	r9, [r3], #4
   18e3c:	cmp	sl, r3
   18e40:	str	lr, [ip], #4
   18e44:	bne	18e30 <argp_parse@@Base+0x22b0>
   18e48:	b	18df0 <argp_parse@@Base+0x2270>
   18e4c:	add	sl, r3, r2
   18e50:	add	r3, r0, r2, lsl #2
   18e54:	add	r9, r0, sl, lsl #2
   18e58:	mov	r2, r6
   18e5c:	ldr	lr, [r2]
   18e60:	ldr	ip, [r3]
   18e64:	str	lr, [r3], #4
   18e68:	cmp	r3, r9
   18e6c:	str	ip, [r2], #4
   18e70:	bne	18e5c <argp_parse@@Base+0x22dc>
   18e74:	mov	r2, sl
   18e78:	b	18df0 <argp_parse@@Base+0x2270>
   18e7c:	sub	r4, r7, r4
   18e80:	add	r8, r4, r8
   18e84:	str	r8, [r1, #28]
   18e88:	str	r7, [r1, #32]
   18e8c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   18e90:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18e94:	sub	sp, sp, #44	; 0x2c
   18e98:	str	r1, [sp, #20]
   18e9c:	ldr	r1, [sp, #88]	; 0x58
   18ea0:	str	r0, [sp, #24]
   18ea4:	str	r2, [sp, #28]
   18ea8:	ldr	r8, [r1, #20]
   18eac:	str	r3, [sp, #12]
   18eb0:	mov	r7, r8
   18eb4:	ldrb	r5, [r8]
   18eb8:	cmp	r5, #61	; 0x3d
   18ebc:	cmpne	r5, #0
   18ec0:	movne	r5, #1
   18ec4:	moveq	r5, #0
   18ec8:	beq	18ee0 <argp_parse@@Base+0x2360>
   18ecc:	ldrb	r3, [r7, #1]!
   18ed0:	cmp	r3, #0
   18ed4:	cmpne	r3, #61	; 0x3d
   18ed8:	bne	18ecc <argp_parse@@Base+0x234c>
   18edc:	sub	r5, r7, r8
   18ee0:	ldr	r3, [sp, #12]
   18ee4:	ldr	sl, [r3]
   18ee8:	cmp	sl, #0
   18eec:	beq	191a0 <argp_parse@@Base+0x2620>
   18ef0:	mov	fp, r3
   18ef4:	mov	r4, sl
   18ef8:	mov	r6, #0
   18efc:	mov	r2, r5
   18f00:	mov	r1, r8
   18f04:	mov	r0, r4
   18f08:	bl	11410 <strncmp@plt>
   18f0c:	mov	r9, fp
   18f10:	cmp	r0, #0
   18f14:	mov	r0, r4
   18f18:	bne	18f28 <argp_parse@@Base+0x23a8>
   18f1c:	bl	112c0 <strlen@plt>
   18f20:	cmp	r0, r5
   18f24:	beq	18fb4 <argp_parse@@Base+0x2434>
   18f28:	ldr	r4, [fp, #16]!
   18f2c:	add	r6, r6, #1
   18f30:	cmp	r4, #0
   18f34:	bne	18efc <argp_parse@@Base+0x237c>
   18f38:	ldr	r3, [sp, #12]
   18f3c:	ldr	fp, [sp, #88]	; 0x58
   18f40:	mov	r0, sl
   18f44:	mov	r1, r8
   18f48:	mov	r9, r4
   18f4c:	mov	sl, r4
   18f50:	mov	r8, r3
   18f54:	mvn	r2, #0
   18f58:	str	r4, [sp, #36]	; 0x24
   18f5c:	str	r4, [sp, #16]
   18f60:	str	r2, [sp, #32]
   18f64:	mov	r2, r5
   18f68:	bl	11410 <strncmp@plt>
   18f6c:	cmp	r0, #0
   18f70:	bne	18f90 <argp_parse@@Base+0x2410>
   18f74:	cmp	r9, #0
   18f78:	beq	19210 <argp_parse@@Base+0x2690>
   18f7c:	ldr	r3, [sp, #84]	; 0x54
   18f80:	cmp	r3, #0
   18f84:	beq	19058 <argp_parse@@Base+0x24d8>
   18f88:	cmp	r4, #0
   18f8c:	beq	1908c <argp_parse@@Base+0x250c>
   18f90:	ldr	r0, [r8, #16]!
   18f94:	add	sl, sl, #1
   18f98:	cmp	r0, #0
   18f9c:	beq	190c0 <argp_parse@@Base+0x2540>
   18fa0:	ldr	r1, [fp, #20]
   18fa4:	b	18f64 <argp_parse@@Base+0x23e4>
   18fa8:	cmp	r9, #0
   18fac:	beq	191a0 <argp_parse@@Base+0x2620>
   18fb0:	ldr	r6, [sp, #32]
   18fb4:	ldr	r3, [sp, #88]	; 0x58
   18fb8:	ldr	r0, [sp, #88]	; 0x58
   18fbc:	mov	r1, #0
   18fc0:	ldr	r2, [r3]
   18fc4:	str	r1, [r0, #20]
   18fc8:	add	r3, r2, #1
   18fcc:	str	r3, [r0]
   18fd0:	ldrb	r1, [r7]
   18fd4:	cmp	r1, #0
   18fd8:	bne	19018 <argp_parse@@Base+0x2498>
   18fdc:	ldr	r1, [r9, #4]
   18fe0:	cmp	r1, #1
   18fe4:	beq	1921c <argp_parse@@Base+0x269c>
   18fe8:	ldr	r3, [sp, #80]	; 0x50
   18fec:	ldr	r2, [r9, #8]
   18ff0:	cmp	r3, #0
   18ff4:	strne	r6, [r3]
   18ff8:	cmp	r2, #0
   18ffc:	movne	r3, #0
   19000:	ldreq	r3, [r9, #12]
   19004:	ldrne	r1, [r9, #12]
   19008:	strne	r1, [r2]
   1900c:	mov	r0, r3
   19010:	add	sp, sp, #44	; 0x2c
   19014:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19018:	ldr	r3, [r9, #4]
   1901c:	cmp	r3, #0
   19020:	movne	r3, r0
   19024:	addne	r7, r7, #1
   19028:	strne	r7, [r3, #12]
   1902c:	bne	18fe8 <argp_parse@@Base+0x2468>
   19030:	ldr	r3, [sp, #92]	; 0x5c
   19034:	cmp	r3, #0
   19038:	bne	19168 <argp_parse@@Base+0x25e8>
   1903c:	ldr	r1, [sp, #88]	; 0x58
   19040:	ldr	r2, [r9, #12]
   19044:	mov	r3, #63	; 0x3f
   19048:	str	r2, [r1, #8]
   1904c:	mov	r0, r3
   19050:	add	sp, sp, #44	; 0x2c
   19054:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19058:	ldr	r2, [r9, #4]
   1905c:	ldr	r3, [r8, #4]
   19060:	cmp	r2, r3
   19064:	bne	18f88 <argp_parse@@Base+0x2408>
   19068:	ldr	r2, [r9, #8]
   1906c:	ldr	r3, [r8, #8]
   19070:	cmp	r2, r3
   19074:	bne	18f88 <argp_parse@@Base+0x2408>
   19078:	ldr	r2, [r9, #12]
   1907c:	ldr	r3, [r8, #12]
   19080:	cmp	r2, r3
   19084:	bne	18f88 <argp_parse@@Base+0x2408>
   19088:	b	18f90 <argp_parse@@Base+0x2410>
   1908c:	ldr	r3, [sp, #92]	; 0x5c
   19090:	cmp	r3, #0
   19094:	ldr	r3, [sp, #16]
   19098:	beq	19158 <argp_parse@@Base+0x25d8>
   1909c:	cmp	r3, #0
   190a0:	beq	19374 <argp_parse@@Base+0x27f4>
   190a4:	ldr	r3, [sp, #16]
   190a8:	ldr	r0, [r8, #16]!
   190ac:	mov	r2, #1
   190b0:	cmp	r0, #0
   190b4:	strb	r2, [r3, sl]
   190b8:	add	sl, sl, #1
   190bc:	bne	18fa0 <argp_parse@@Base+0x2420>
   190c0:	ldr	r3, [sp, #16]
   190c4:	cmp	r3, #0
   190c8:	cmpeq	r4, #0
   190cc:	beq	18fa8 <argp_parse@@Base+0x2428>
   190d0:	ldr	r3, [sp, #92]	; 0x5c
   190d4:	cmp	r3, #0
   190d8:	beq	19258 <argp_parse@@Base+0x26d8>
   190dc:	cmp	r4, #0
   190e0:	bne	192e0 <argp_parse@@Base+0x2760>
   190e4:	ldr	r5, [pc, #716]	; 193b8 <argp_parse@@Base+0x2838>
   190e8:	ldr	r8, [sp, #16]
   190ec:	ldr	r7, [pc, #712]	; 193bc <argp_parse@@Base+0x283c>
   190f0:	ldr	r0, [r5]
   190f4:	bl	113b0 <flockfile@plt>
   190f8:	ldr	r3, [sp, #20]
   190fc:	ldr	r0, [r5]
   19100:	ldr	r1, [pc, #696]	; 193c0 <argp_parse@@Base+0x2840>
   19104:	ldr	r2, [r3]
   19108:	ldr	r3, [sp, #88]	; 0x58
   1910c:	add	r6, r8, r6
   19110:	ldr	r3, [r3, #20]
   19114:	str	r3, [sp]
   19118:	ldr	r3, [sp, #96]	; 0x60
   1911c:	bl	112d8 <fprintf@plt>
   19120:	ldr	r9, [sp, #12]
   19124:	b	19134 <argp_parse@@Base+0x25b4>
   19128:	cmp	r8, r6
   1912c:	add	r4, r4, #1
   19130:	beq	19244 <argp_parse@@Base+0x26c4>
   19134:	ldrb	r3, [r8], #1
   19138:	cmp	r3, #0
   1913c:	beq	19128 <argp_parse@@Base+0x25a8>
   19140:	ldr	r3, [r9, r4, lsl #4]
   19144:	ldr	r2, [sp, #96]	; 0x60
   19148:	mov	r1, r7
   1914c:	ldr	r0, [r5]
   19150:	bl	112d8 <fprintf@plt>
   19154:	b	19128 <argp_parse@@Base+0x25a8>
   19158:	cmp	r3, #0
   1915c:	mov	r4, #1
   19160:	bne	190a4 <argp_parse@@Base+0x2524>
   19164:	b	18f90 <argp_parse@@Base+0x2410>
   19168:	ldr	r3, [sp, #20]
   1916c:	ldr	r1, [pc, #580]	; 193b8 <argp_parse@@Base+0x2838>
   19170:	ldr	r2, [r3]
   19174:	ldr	r3, [r9]
   19178:	ldr	r0, [r1]
   1917c:	str	r3, [sp]
   19180:	ldr	r1, [pc, #572]	; 193c4 <argp_parse@@Base+0x2844>
   19184:	ldr	r3, [sp, #96]	; 0x60
   19188:	bl	112d8 <fprintf@plt>
   1918c:	ldr	r1, [sp, #88]	; 0x58
   19190:	ldr	r2, [r9, #12]
   19194:	mov	r3, #63	; 0x3f
   19198:	str	r2, [r1, #8]
   1919c:	b	1904c <argp_parse@@Base+0x24cc>
   191a0:	ldr	r3, [sp, #84]	; 0x54
   191a4:	cmp	r3, #0
   191a8:	bne	19334 <argp_parse@@Base+0x27b4>
   191ac:	ldr	r3, [sp, #92]	; 0x5c
   191b0:	cmp	r3, #0
   191b4:	beq	191e0 <argp_parse@@Base+0x2660>
   191b8:	ldr	r3, [sp, #20]
   191bc:	ldr	r1, [pc, #500]	; 193b8 <argp_parse@@Base+0x2838>
   191c0:	ldr	r2, [r3]
   191c4:	ldr	r3, [sp, #88]	; 0x58
   191c8:	ldr	r0, [r1]
   191cc:	ldr	r1, [pc, #500]	; 193c8 <argp_parse@@Base+0x2848>
   191d0:	ldr	r3, [r3, #20]
   191d4:	str	r3, [sp]
   191d8:	ldr	r3, [sp, #96]	; 0x60
   191dc:	bl	112d8 <fprintf@plt>
   191e0:	ldr	r3, [sp, #88]	; 0x58
   191e4:	ldr	r1, [sp, #88]	; 0x58
   191e8:	mov	r2, #0
   191ec:	ldr	r3, [r3]
   191f0:	str	r2, [r1, #20]
   191f4:	add	r3, r3, #1
   191f8:	str	r3, [r1]
   191fc:	mov	r3, #63	; 0x3f
   19200:	mov	r0, r3
   19204:	str	r2, [r1, #8]
   19208:	add	sp, sp, #44	; 0x2c
   1920c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19210:	str	sl, [sp, #32]
   19214:	mov	r9, r8
   19218:	b	18f90 <argp_parse@@Base+0x2410>
   1921c:	ldr	r1, [sp, #24]
   19220:	cmp	r3, r1
   19224:	bge	192b0 <argp_parse@@Base+0x2730>
   19228:	ldr	r1, [sp, #20]
   1922c:	add	r2, r2, #2
   19230:	ldr	r3, [r1, r3, lsl #2]
   19234:	ldr	r1, [sp, #88]	; 0x58
   19238:	str	r3, [r1, #12]
   1923c:	str	r2, [r1]
   19240:	b	18fe8 <argp_parse@@Base+0x2468>
   19244:	ldr	r1, [r5]
   19248:	mov	r0, #10
   1924c:	bl	11380 <fputc@plt>
   19250:	ldr	r0, [r5]
   19254:	bl	11200 <funlockfile@plt>
   19258:	ldr	r3, [sp, #36]	; 0x24
   1925c:	cmp	r3, #0
   19260:	beq	1926c <argp_parse@@Base+0x26ec>
   19264:	ldr	r0, [sp, #16]
   19268:	bl	17a18 <argp_parse@@Base+0xe98>
   1926c:	ldr	r3, [sp, #88]	; 0x58
   19270:	ldr	r4, [r3, #20]
   19274:	mov	r0, r4
   19278:	bl	112c0 <strlen@plt>
   1927c:	ldr	r3, [sp, #88]	; 0x58
   19280:	ldr	r1, [sp, #88]	; 0x58
   19284:	mov	r2, #0
   19288:	ldr	r3, [r3]
   1928c:	str	r2, [r1, #8]
   19290:	add	r3, r3, #1
   19294:	str	r3, [r1]
   19298:	mov	r3, #63	; 0x3f
   1929c:	add	r0, r4, r0
   192a0:	str	r0, [r1, #20]
   192a4:	mov	r0, r3
   192a8:	add	sp, sp, #44	; 0x2c
   192ac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   192b0:	ldr	r3, [sp, #92]	; 0x5c
   192b4:	cmp	r3, #0
   192b8:	bne	1930c <argp_parse@@Base+0x278c>
   192bc:	ldr	r2, [sp, #88]	; 0x58
   192c0:	ldr	r3, [r9, #12]
   192c4:	str	r3, [r2, #8]
   192c8:	ldr	r3, [sp, #28]
   192cc:	ldrb	r3, [r3]
   192d0:	cmp	r3, #58	; 0x3a
   192d4:	movne	r3, #63	; 0x3f
   192d8:	moveq	r3, #58	; 0x3a
   192dc:	b	1900c <argp_parse@@Base+0x248c>
   192e0:	ldr	r3, [sp, #20]
   192e4:	ldr	r1, [pc, #204]	; 193b8 <argp_parse@@Base+0x2838>
   192e8:	ldr	r2, [r3]
   192ec:	ldr	r3, [sp, #88]	; 0x58
   192f0:	ldr	r0, [r1]
   192f4:	ldr	r1, [pc, #208]	; 193cc <argp_parse@@Base+0x284c>
   192f8:	ldr	r3, [r3, #20]
   192fc:	str	r3, [sp]
   19300:	ldr	r3, [sp, #96]	; 0x60
   19304:	bl	112d8 <fprintf@plt>
   19308:	b	19258 <argp_parse@@Base+0x26d8>
   1930c:	ldr	r3, [sp, #20]
   19310:	ldr	r1, [pc, #160]	; 193b8 <argp_parse@@Base+0x2838>
   19314:	ldr	r2, [r3]
   19318:	ldr	r3, [r9]
   1931c:	ldr	r0, [r1]
   19320:	str	r3, [sp]
   19324:	ldr	r1, [pc, #164]	; 193d0 <argp_parse@@Base+0x2850>
   19328:	ldr	r3, [sp, #96]	; 0x60
   1932c:	bl	112d8 <fprintf@plt>
   19330:	b	192bc <argp_parse@@Base+0x273c>
   19334:	ldr	r3, [sp, #88]	; 0x58
   19338:	ldr	r2, [sp, #20]
   1933c:	ldr	r3, [r3]
   19340:	ldr	r3, [r2, r3, lsl #2]
   19344:	ldrb	r3, [r3, #1]
   19348:	cmp	r3, #45	; 0x2d
   1934c:	beq	191ac <argp_parse@@Base+0x262c>
   19350:	ldr	r3, [sp, #88]	; 0x58
   19354:	ldr	r0, [sp, #28]
   19358:	ldr	r3, [r3, #20]
   1935c:	ldrb	r1, [r3]
   19360:	bl	112cc <strchr@plt>
   19364:	cmp	r0, #0
   19368:	beq	191ac <argp_parse@@Base+0x262c>
   1936c:	mvn	r3, #0
   19370:	b	1900c <argp_parse@@Base+0x248c>
   19374:	mov	r0, r6
   19378:	bl	18584 <argp_parse@@Base+0x1a04>
   1937c:	subs	r3, r0, #0
   19380:	str	r3, [sp, #16]
   19384:	beq	193b0 <argp_parse@@Base+0x2830>
   19388:	mov	r2, r6
   1938c:	mov	r1, #0
   19390:	bl	11314 <memset@plt>
   19394:	mov	r3, #1
   19398:	str	r3, [sp, #36]	; 0x24
   1939c:	ldr	r2, [sp, #32]
   193a0:	ldr	r3, [sp, #16]
   193a4:	mov	r1, #1
   193a8:	strb	r1, [r3, r2]
   193ac:	b	190a4 <argp_parse@@Base+0x2524>
   193b0:	mov	r4, #1
   193b4:	b	18f90 <argp_parse@@Base+0x2410>
   193b8:	ldrdeq	ip, [r2], -r8
   193bc:	ldrdeq	fp, [r1], -r8
   193c0:	andeq	fp, r1, r8, lsr #3
   193c4:	andeq	fp, r1, r0, lsl #4
   193c8:	andeq	fp, r1, r0, ror #3
   193cc:	andeq	fp, r1, r8, lsl #3
   193d0:	andeq	fp, r1, r0, lsr r2
   193d4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   193d8:	sub	sp, sp, #36	; 0x24
   193dc:	subs	r6, r0, #0
   193e0:	ldr	r4, [sp, #80]	; 0x50
   193e4:	ldr	r8, [r4, #4]
   193e8:	ble	195c4 <argp_parse@@Base+0x2a44>
   193ec:	mov	sl, r3
   193f0:	ldr	r3, [r4]
   193f4:	mov	r7, r2
   193f8:	mov	r2, #0
   193fc:	cmp	r3, r2
   19400:	mov	r9, r1
   19404:	str	r2, [r4, #12]
   19408:	beq	1964c <argp_parse@@Base+0x2acc>
   1940c:	ldr	r2, [r4, #16]
   19410:	cmp	r2, #0
   19414:	bne	195d0 <argp_parse@@Base+0x2a50>
   19418:	mov	r5, #0
   1941c:	str	r3, [r4, #32]
   19420:	str	r3, [r4, #28]
   19424:	str	r5, [r4, #20]
   19428:	ldrb	r3, [r7]
   1942c:	cmp	r3, #45	; 0x2d
   19430:	moveq	r3, #2
   19434:	addeq	r7, r7, #1
   19438:	streq	r3, [r4, #24]
   1943c:	beq	19464 <argp_parse@@Base+0x28e4>
   19440:	cmp	r3, #43	; 0x2b
   19444:	streq	r5, [r4, #24]
   19448:	addeq	r7, r7, #1
   1944c:	beq	19464 <argp_parse@@Base+0x28e4>
   19450:	ldr	r3, [sp, #84]	; 0x54
   19454:	cmp	r3, #0
   19458:	beq	196ec <argp_parse@@Base+0x2b6c>
   1945c:	mov	r3, #0
   19460:	str	r3, [r4, #24]
   19464:	mov	r3, #1
   19468:	str	r3, [r4, #16]
   1946c:	ldrb	r3, [r7]
   19470:	cmp	r3, #58	; 0x3a
   19474:	moveq	r8, #0
   19478:	cmp	r5, #0
   1947c:	beq	19530 <argp_parse@@Base+0x29b0>
   19480:	ldrb	r3, [r5]
   19484:	cmp	r3, #0
   19488:	beq	19530 <argp_parse@@Base+0x29b0>
   1948c:	add	r3, r5, #1
   19490:	str	r3, [r4, #20]
   19494:	ldrb	fp, [r5]
   19498:	mov	r0, r7
   1949c:	str	r3, [sp, #28]
   194a0:	mov	r1, fp
   194a4:	bl	112cc <strchr@plt>
   194a8:	ldrb	r1, [r5, #1]
   194ac:	ldr	r3, [sp, #28]
   194b0:	cmp	r1, #0
   194b4:	ldreq	r1, [r4]
   194b8:	addeq	r1, r1, #1
   194bc:	streq	r1, [r4]
   194c0:	sub	r1, fp, #58	; 0x3a
   194c4:	mov	r2, r0
   194c8:	cmp	r2, #0
   194cc:	cmpne	r1, #1
   194d0:	mov	r0, fp
   194d4:	bls	1961c <argp_parse@@Base+0x2a9c>
   194d8:	ldrb	r1, [r2]
   194dc:	cmp	r1, #87	; 0x57
   194e0:	ldrb	r1, [r2, #1]
   194e4:	beq	19770 <argp_parse@@Base+0x2bf0>
   194e8:	cmp	r1, #58	; 0x3a
   194ec:	bne	19614 <argp_parse@@Base+0x2a94>
   194f0:	ldrb	r2, [r2, #2]
   194f4:	cmp	r2, #58	; 0x3a
   194f8:	ldrb	r2, [r5, #1]
   194fc:	beq	197f8 <argp_parse@@Base+0x2c78>
   19500:	cmp	r2, #0
   19504:	bne	19804 <argp_parse@@Base+0x2c84>
   19508:	ldr	r3, [r4]
   1950c:	cmp	r6, r3
   19510:	beq	198a4 <argp_parse@@Base+0x2d24>
   19514:	ldr	r2, [r9, r3, lsl #2]
   19518:	add	r3, r3, #1
   1951c:	str	r2, [r4, #12]
   19520:	str	r3, [r4]
   19524:	mov	r3, #0
   19528:	str	r3, [r4, #20]
   1952c:	b	19614 <argp_parse@@Base+0x2a94>
   19530:	ldr	fp, [r4]
   19534:	ldr	r3, [r4, #32]
   19538:	cmp	r3, fp
   1953c:	ldr	r3, [r4, #28]
   19540:	strgt	fp, [r4, #32]
   19544:	cmp	fp, r3
   19548:	ldr	r3, [r4, #24]
   1954c:	strlt	fp, [r4, #28]
   19550:	cmp	r3, #1
   19554:	beq	1965c <argp_parse@@Base+0x2adc>
   19558:	cmp	r6, fp
   1955c:	beq	196d4 <argp_parse@@Base+0x2b54>
   19560:	ldr	r3, [pc, #944]	; 19918 <argp_parse@@Base+0x2d98>
   19564:	ldr	r5, [r9, fp, lsl #2]
   19568:	mov	r1, r3
   1956c:	mov	r0, r5
   19570:	str	r3, [sp, #28]
   19574:	bl	11104 <strcmp@plt>
   19578:	ldr	r3, [sp, #28]
   1957c:	cmp	r0, #0
   19580:	bne	195ec <argp_parse@@Base+0x2a6c>
   19584:	ldr	r3, [r4, #28]
   19588:	ldr	r2, [r4, #32]
   1958c:	add	fp, fp, #1
   19590:	cmp	r3, r2
   19594:	str	fp, [r4]
   19598:	beq	19764 <argp_parse@@Base+0x2be4>
   1959c:	cmp	fp, r2
   195a0:	beq	195b4 <argp_parse@@Base+0x2a34>
   195a4:	mov	r0, r9
   195a8:	mov	r1, r4
   195ac:	bl	18dd4 <argp_parse@@Base+0x2254>
   195b0:	ldr	r3, [r4, #28]
   195b4:	cmp	r3, r6
   195b8:	str	r6, [r4]
   195bc:	str	r6, [r4, #32]
   195c0:	strne	r3, [r4]
   195c4:	mvn	r0, #0
   195c8:	add	sp, sp, #36	; 0x24
   195cc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   195d0:	ldrb	r3, [r7]
   195d4:	ldr	r5, [r4, #20]
   195d8:	sub	r2, r3, #43	; 0x2b
   195dc:	tst	r2, #253	; 0xfd
   195e0:	ldrbeq	r3, [r7, #1]
   195e4:	addeq	r7, r7, #1
   195e8:	b	19470 <argp_parse@@Base+0x28f0>
   195ec:	ldrb	r2, [r5]
   195f0:	cmp	r2, #45	; 0x2d
   195f4:	beq	19718 <argp_parse@@Base+0x2b98>
   195f8:	ldr	r3, [r4, #24]
   195fc:	cmp	r3, #0
   19600:	beq	195c4 <argp_parse@@Base+0x2a44>
   19604:	mov	r0, #1
   19608:	add	fp, fp, #1
   1960c:	str	fp, [r4]
   19610:	str	r5, [r4, #12]
   19614:	add	sp, sp, #36	; 0x24
   19618:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1961c:	cmp	r8, #0
   19620:	beq	1963c <argp_parse@@Base+0x2abc>
   19624:	ldr	r1, [pc, #752]	; 1991c <argp_parse@@Base+0x2d9c>
   19628:	ldr	r2, [r9]
   1962c:	mov	r3, fp
   19630:	ldr	r0, [r1]
   19634:	ldr	r1, [pc, #740]	; 19920 <argp_parse@@Base+0x2da0>
   19638:	bl	112d8 <fprintf@plt>
   1963c:	mov	r0, #63	; 0x3f
   19640:	str	fp, [r4, #8]
   19644:	add	sp, sp, #36	; 0x24
   19648:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1964c:	mov	r2, #1
   19650:	mov	r3, r2
   19654:	str	r2, [r4]
   19658:	b	19418 <argp_parse@@Base+0x2898>
   1965c:	ldr	r2, [r4, #28]
   19660:	ldr	r3, [r4, #32]
   19664:	cmp	r2, r3
   19668:	beq	197e8 <argp_parse@@Base+0x2c68>
   1966c:	cmp	fp, r3
   19670:	beq	19684 <argp_parse@@Base+0x2b04>
   19674:	mov	r1, r4
   19678:	mov	r0, r9
   1967c:	bl	18dd4 <argp_parse@@Base+0x2254>
   19680:	ldr	r3, [r4]
   19684:	cmp	r6, r3
   19688:	movle	fp, r3
   1968c:	ble	196c8 <argp_parse@@Base+0x2b48>
   19690:	add	r1, r9, r3, lsl #2
   19694:	b	196a8 <argp_parse@@Base+0x2b28>
   19698:	add	r3, r3, #1
   1969c:	cmp	r6, r3
   196a0:	str	r3, [r4]
   196a4:	beq	1970c <argp_parse@@Base+0x2b8c>
   196a8:	ldr	r2, [r1], #4
   196ac:	ldrb	r0, [r2]
   196b0:	cmp	r0, #45	; 0x2d
   196b4:	bne	19698 <argp_parse@@Base+0x2b18>
   196b8:	ldrb	r2, [r2, #1]
   196bc:	cmp	r2, #0
   196c0:	beq	19698 <argp_parse@@Base+0x2b18>
   196c4:	ldr	fp, [r4]
   196c8:	str	r3, [r4, #32]
   196cc:	cmp	r6, fp
   196d0:	bne	19560 <argp_parse@@Base+0x29e0>
   196d4:	ldr	r3, [r4, #28]
   196d8:	ldr	r6, [r4, #32]
   196dc:	mvn	r0, #0
   196e0:	cmp	r3, r6
   196e4:	strne	r3, [r4]
   196e8:	b	195c8 <argp_parse@@Base+0x2a48>
   196ec:	ldr	r0, [pc, #560]	; 19924 <argp_parse@@Base+0x2da4>
   196f0:	bl	11230 <getenv@plt>
   196f4:	ldr	r5, [r4, #20]
   196f8:	cmp	r0, #0
   196fc:	bne	1945c <argp_parse@@Base+0x28dc>
   19700:	mov	r3, #1
   19704:	str	r3, [r4, #24]
   19708:	b	19464 <argp_parse@@Base+0x28e4>
   1970c:	mov	fp, r6
   19710:	str	r3, [r4, #32]
   19714:	b	196cc <argp_parse@@Base+0x2b4c>
   19718:	ldrb	r1, [r5, #1]
   1971c:	cmp	r1, #0
   19720:	beq	195f8 <argp_parse@@Base+0x2a78>
   19724:	cmp	sl, #0
   19728:	beq	1975c <argp_parse@@Base+0x2bdc>
   1972c:	cmp	r1, #45	; 0x2d
   19730:	beq	19868 <argp_parse@@Base+0x2ce8>
   19734:	ldr	r3, [sp, #76]	; 0x4c
   19738:	cmp	r3, #0
   1973c:	beq	1975c <argp_parse@@Base+0x2bdc>
   19740:	ldrb	r3, [r5, #2]
   19744:	cmp	r3, #0
   19748:	bne	19818 <argp_parse@@Base+0x2c98>
   1974c:	mov	r0, r7
   19750:	bl	112cc <strchr@plt>
   19754:	cmp	r0, #0
   19758:	beq	19818 <argp_parse@@Base+0x2c98>
   1975c:	add	r5, r5, #1
   19760:	b	1948c <argp_parse@@Base+0x290c>
   19764:	mov	r3, fp
   19768:	str	fp, [r4, #28]
   1976c:	b	195b4 <argp_parse@@Base+0x2a34>
   19770:	cmp	sl, #0
   19774:	sub	ip, r1, #59	; 0x3b
   19778:	clz	ip, ip
   1977c:	lsr	ip, ip, #5
   19780:	moveq	ip, #0
   19784:	cmp	ip, #0
   19788:	beq	194e8 <argp_parse@@Base+0x2968>
   1978c:	ldrb	r2, [r5, #1]
   19790:	cmp	r2, #0
   19794:	bne	197a8 <argp_parse@@Base+0x2c28>
   19798:	ldr	r3, [r4]
   1979c:	cmp	r6, r3
   197a0:	ldrne	r3, [r9, r3, lsl #2]
   197a4:	beq	198c4 <argp_parse@@Base+0x2d44>
   197a8:	str	r3, [r4, #20]
   197ac:	ldr	lr, [pc, #372]	; 19928 <argp_parse@@Base+0x2da8>
   197b0:	ldr	r3, [sp, #72]	; 0x48
   197b4:	mov	ip, #0
   197b8:	str	r3, [sp]
   197bc:	str	r8, [sp, #12]
   197c0:	str	r4, [sp, #8]
   197c4:	str	lr, [sp, #16]
   197c8:	mov	r3, sl
   197cc:	str	ip, [r4, #12]
   197d0:	mov	r2, r7
   197d4:	mov	r1, r9
   197d8:	mov	r0, r6
   197dc:	str	ip, [sp, #4]
   197e0:	bl	18e90 <argp_parse@@Base+0x2310>
   197e4:	b	19614 <argp_parse@@Base+0x2a94>
   197e8:	cmp	fp, r3
   197ec:	movne	r3, fp
   197f0:	strne	fp, [r4, #28]
   197f4:	b	19684 <argp_parse@@Base+0x2b04>
   197f8:	cmp	r2, #0
   197fc:	streq	r2, [r4, #12]
   19800:	beq	19524 <argp_parse@@Base+0x29a4>
   19804:	ldr	r2, [r4]
   19808:	str	r3, [r4, #12]
   1980c:	add	r3, r2, #1
   19810:	str	r3, [r4]
   19814:	b	19524 <argp_parse@@Base+0x29a4>
   19818:	ldr	r2, [sp, #76]	; 0x4c
   1981c:	add	r5, r5, #1
   19820:	str	r5, [r4, #20]
   19824:	ldr	r3, [pc, #256]	; 1992c <argp_parse@@Base+0x2dac>
   19828:	str	r2, [sp, #4]
   1982c:	ldr	r2, [sp, #72]	; 0x48
   19830:	str	r3, [sp, #16]
   19834:	str	r2, [sp]
   19838:	str	r8, [sp, #12]
   1983c:	str	r4, [sp, #8]
   19840:	mov	r3, sl
   19844:	mov	r2, r7
   19848:	mov	r1, r9
   1984c:	mov	r0, r6
   19850:	bl	18e90 <argp_parse@@Base+0x2310>
   19854:	cmn	r0, #1
   19858:	bne	19614 <argp_parse@@Base+0x2a94>
   1985c:	ldr	r3, [r4]
   19860:	ldr	r5, [r9, r3, lsl #2]
   19864:	b	1975c <argp_parse@@Base+0x2bdc>
   19868:	add	r5, r5, #2
   1986c:	str	r5, [r4, #20]
   19870:	str	r3, [sp, #16]
   19874:	ldr	r3, [sp, #76]	; 0x4c
   19878:	str	r8, [sp, #12]
   1987c:	str	r3, [sp, #4]
   19880:	ldr	r3, [sp, #72]	; 0x48
   19884:	str	r4, [sp, #8]
   19888:	str	r3, [sp]
   1988c:	mov	r2, r7
   19890:	mov	r3, sl
   19894:	mov	r1, r9
   19898:	mov	r0, r6
   1989c:	bl	18e90 <argp_parse@@Base+0x2310>
   198a0:	b	19614 <argp_parse@@Base+0x2a94>
   198a4:	cmp	r8, #0
   198a8:	bne	198fc <argp_parse@@Base+0x2d7c>
   198ac:	str	fp, [r4, #8]
   198b0:	ldrb	r0, [r7]
   198b4:	cmp	r0, #58	; 0x3a
   198b8:	movne	r0, #63	; 0x3f
   198bc:	moveq	r0, #58	; 0x3a
   198c0:	b	19524 <argp_parse@@Base+0x29a4>
   198c4:	cmp	r8, #0
   198c8:	beq	198e4 <argp_parse@@Base+0x2d64>
   198cc:	ldr	r1, [pc, #72]	; 1991c <argp_parse@@Base+0x2d9c>
   198d0:	ldr	r2, [r9]
   198d4:	mov	r3, fp
   198d8:	ldr	r0, [r1]
   198dc:	ldr	r1, [pc, #76]	; 19930 <argp_parse@@Base+0x2db0>
   198e0:	bl	112d8 <fprintf@plt>
   198e4:	str	fp, [r4, #8]
   198e8:	ldrb	r0, [r7]
   198ec:	cmp	r0, #58	; 0x3a
   198f0:	movne	r0, #63	; 0x3f
   198f4:	moveq	r0, #58	; 0x3a
   198f8:	b	19614 <argp_parse@@Base+0x2a94>
   198fc:	ldr	r1, [pc, #24]	; 1991c <argp_parse@@Base+0x2d9c>
   19900:	ldr	r2, [r9]
   19904:	mov	r3, fp
   19908:	ldr	r0, [r1]
   1990c:	ldr	r1, [pc, #28]	; 19930 <argp_parse@@Base+0x2db0>
   19910:	bl	112d8 <fprintf@plt>
   19914:	b	198ac <argp_parse@@Base+0x2d2c>
   19918:	andeq	sl, r1, r4, ror #25
   1991c:	ldrdeq	ip, [r2], -r8
   19920:	andeq	fp, r1, ip, ror #4
   19924:	andeq	fp, r1, r8, asr r2
   19928:			; <UNDEFINED> instruction: 0x0001b2b4
   1992c:	andeq	fp, r1, r8, ror #4
   19930:	andeq	fp, r1, r8, lsl #5
   19934:	push	{r4, r5, r6, lr}
   19938:	sub	sp, sp, #16
   1993c:	ldr	r5, [pc, #84]	; 19998 <argp_parse@@Base+0x2e18>
   19940:	ldr	ip, [sp, #32]
   19944:	ldr	r4, [pc, #80]	; 1999c <argp_parse@@Base+0x2e1c>
   19948:	str	ip, [sp]
   1994c:	ldr	ip, [sp, #40]	; 0x28
   19950:	ldr	r6, [sp, #36]	; 0x24
   19954:	ldr	lr, [r5]
   19958:	str	ip, [sp, #12]
   1995c:	ldr	ip, [r5, #4]
   19960:	str	r4, [sp, #8]
   19964:	str	r6, [sp, #4]
   19968:	str	ip, [r4, #4]
   1996c:	str	lr, [r4]
   19970:	bl	193d4 <argp_parse@@Base+0x2854>
   19974:	ldr	r3, [pc, #36]	; 199a0 <argp_parse@@Base+0x2e20>
   19978:	ldr	ip, [r4]
   1997c:	ldr	r1, [r4, #8]
   19980:	ldr	r2, [r4, #12]
   19984:	str	ip, [r5]
   19988:	str	r1, [r5, #8]
   1998c:	str	r2, [r3]
   19990:	add	sp, sp, #16
   19994:	pop	{r4, r5, r6, pc}
   19998:	andeq	ip, r2, r4, asr #7
   1999c:	andeq	ip, r2, r0, lsr #8
   199a0:	andeq	ip, r2, r0, ror #8
   199a4:	push	{lr}		; (str lr, [sp, #-4]!)
   199a8:	mov	r3, #0
   199ac:	sub	sp, sp, #20
   199b0:	mov	ip, #1
   199b4:	str	r3, [sp]
   199b8:	stmib	sp, {r3, ip}
   199bc:	bl	19934 <argp_parse@@Base+0x2db4>
   199c0:	add	sp, sp, #20
   199c4:	pop	{pc}		; (ldr pc, [sp], #4)
   199c8:	push	{r4, r5, r6, lr}
   199cc:	subs	r4, r2, #0
   199d0:	mov	r6, r0
   199d4:	mov	r5, r1
   199d8:	beq	19a04 <argp_parse@@Base+0x2e84>
   199dc:	mov	r1, r4
   199e0:	mvn	r0, #0
   199e4:	bl	19a14 <argp_parse@@Base+0x2e94>
   199e8:	cmp	r0, r5
   199ec:	bcs	19a04 <argp_parse@@Base+0x2e84>
   199f0:	bl	112e4 <__errno_location@plt>
   199f4:	mov	r3, #12
   199f8:	str	r3, [r0]
   199fc:	mov	r0, #0
   19a00:	pop	{r4, r5, r6, pc}
   19a04:	mul	r1, r5, r4
   19a08:	mov	r0, r6
   19a0c:	pop	{r4, r5, r6, lr}
   19a10:	b	185b0 <argp_parse@@Base+0x1a30>
   19a14:	subs	r2, r1, #1
   19a18:	bxeq	lr
   19a1c:	bcc	19bf4 <argp_parse@@Base+0x3074>
   19a20:	cmp	r0, r1
   19a24:	bls	19bd8 <argp_parse@@Base+0x3058>
   19a28:	tst	r1, r2
   19a2c:	beq	19be4 <argp_parse@@Base+0x3064>
   19a30:	clz	r3, r0
   19a34:	clz	r2, r1
   19a38:	sub	r3, r2, r3
   19a3c:	rsbs	r3, r3, #31
   19a40:	addne	r3, r3, r3, lsl #1
   19a44:	mov	r2, #0
   19a48:	addne	pc, pc, r3, lsl #2
   19a4c:	nop			; (mov r0, r0)
   19a50:	cmp	r0, r1, lsl #31
   19a54:	adc	r2, r2, r2
   19a58:	subcs	r0, r0, r1, lsl #31
   19a5c:	cmp	r0, r1, lsl #30
   19a60:	adc	r2, r2, r2
   19a64:	subcs	r0, r0, r1, lsl #30
   19a68:	cmp	r0, r1, lsl #29
   19a6c:	adc	r2, r2, r2
   19a70:	subcs	r0, r0, r1, lsl #29
   19a74:	cmp	r0, r1, lsl #28
   19a78:	adc	r2, r2, r2
   19a7c:	subcs	r0, r0, r1, lsl #28
   19a80:	cmp	r0, r1, lsl #27
   19a84:	adc	r2, r2, r2
   19a88:	subcs	r0, r0, r1, lsl #27
   19a8c:	cmp	r0, r1, lsl #26
   19a90:	adc	r2, r2, r2
   19a94:	subcs	r0, r0, r1, lsl #26
   19a98:	cmp	r0, r1, lsl #25
   19a9c:	adc	r2, r2, r2
   19aa0:	subcs	r0, r0, r1, lsl #25
   19aa4:	cmp	r0, r1, lsl #24
   19aa8:	adc	r2, r2, r2
   19aac:	subcs	r0, r0, r1, lsl #24
   19ab0:	cmp	r0, r1, lsl #23
   19ab4:	adc	r2, r2, r2
   19ab8:	subcs	r0, r0, r1, lsl #23
   19abc:	cmp	r0, r1, lsl #22
   19ac0:	adc	r2, r2, r2
   19ac4:	subcs	r0, r0, r1, lsl #22
   19ac8:	cmp	r0, r1, lsl #21
   19acc:	adc	r2, r2, r2
   19ad0:	subcs	r0, r0, r1, lsl #21
   19ad4:	cmp	r0, r1, lsl #20
   19ad8:	adc	r2, r2, r2
   19adc:	subcs	r0, r0, r1, lsl #20
   19ae0:	cmp	r0, r1, lsl #19
   19ae4:	adc	r2, r2, r2
   19ae8:	subcs	r0, r0, r1, lsl #19
   19aec:	cmp	r0, r1, lsl #18
   19af0:	adc	r2, r2, r2
   19af4:	subcs	r0, r0, r1, lsl #18
   19af8:	cmp	r0, r1, lsl #17
   19afc:	adc	r2, r2, r2
   19b00:	subcs	r0, r0, r1, lsl #17
   19b04:	cmp	r0, r1, lsl #16
   19b08:	adc	r2, r2, r2
   19b0c:	subcs	r0, r0, r1, lsl #16
   19b10:	cmp	r0, r1, lsl #15
   19b14:	adc	r2, r2, r2
   19b18:	subcs	r0, r0, r1, lsl #15
   19b1c:	cmp	r0, r1, lsl #14
   19b20:	adc	r2, r2, r2
   19b24:	subcs	r0, r0, r1, lsl #14
   19b28:	cmp	r0, r1, lsl #13
   19b2c:	adc	r2, r2, r2
   19b30:	subcs	r0, r0, r1, lsl #13
   19b34:	cmp	r0, r1, lsl #12
   19b38:	adc	r2, r2, r2
   19b3c:	subcs	r0, r0, r1, lsl #12
   19b40:	cmp	r0, r1, lsl #11
   19b44:	adc	r2, r2, r2
   19b48:	subcs	r0, r0, r1, lsl #11
   19b4c:	cmp	r0, r1, lsl #10
   19b50:	adc	r2, r2, r2
   19b54:	subcs	r0, r0, r1, lsl #10
   19b58:	cmp	r0, r1, lsl #9
   19b5c:	adc	r2, r2, r2
   19b60:	subcs	r0, r0, r1, lsl #9
   19b64:	cmp	r0, r1, lsl #8
   19b68:	adc	r2, r2, r2
   19b6c:	subcs	r0, r0, r1, lsl #8
   19b70:	cmp	r0, r1, lsl #7
   19b74:	adc	r2, r2, r2
   19b78:	subcs	r0, r0, r1, lsl #7
   19b7c:	cmp	r0, r1, lsl #6
   19b80:	adc	r2, r2, r2
   19b84:	subcs	r0, r0, r1, lsl #6
   19b88:	cmp	r0, r1, lsl #5
   19b8c:	adc	r2, r2, r2
   19b90:	subcs	r0, r0, r1, lsl #5
   19b94:	cmp	r0, r1, lsl #4
   19b98:	adc	r2, r2, r2
   19b9c:	subcs	r0, r0, r1, lsl #4
   19ba0:	cmp	r0, r1, lsl #3
   19ba4:	adc	r2, r2, r2
   19ba8:	subcs	r0, r0, r1, lsl #3
   19bac:	cmp	r0, r1, lsl #2
   19bb0:	adc	r2, r2, r2
   19bb4:	subcs	r0, r0, r1, lsl #2
   19bb8:	cmp	r0, r1, lsl #1
   19bbc:	adc	r2, r2, r2
   19bc0:	subcs	r0, r0, r1, lsl #1
   19bc4:	cmp	r0, r1
   19bc8:	adc	r2, r2, r2
   19bcc:	subcs	r0, r0, r1
   19bd0:	mov	r0, r2
   19bd4:	bx	lr
   19bd8:	moveq	r0, #1
   19bdc:	movne	r0, #0
   19be0:	bx	lr
   19be4:	clz	r2, r1
   19be8:	rsb	r2, r2, #31
   19bec:	lsr	r0, r0, r2
   19bf0:	bx	lr
   19bf4:	cmp	r0, #0
   19bf8:	mvnne	r0, #0
   19bfc:	b	19e60 <argp_parse@@Base+0x32e0>
   19c00:	cmp	r1, #0
   19c04:	beq	19bf4 <argp_parse@@Base+0x3074>
   19c08:	push	{r0, r1, lr}
   19c0c:	bl	19a14 <argp_parse@@Base+0x2e94>
   19c10:	pop	{r1, r2, lr}
   19c14:	mul	r3, r2, r0
   19c18:	sub	r1, r1, r3
   19c1c:	bx	lr
   19c20:	cmp	r1, #0
   19c24:	beq	19e30 <argp_parse@@Base+0x32b0>
   19c28:	eor	ip, r0, r1
   19c2c:	rsbmi	r1, r1, #0
   19c30:	subs	r2, r1, #1
   19c34:	beq	19dfc <argp_parse@@Base+0x327c>
   19c38:	movs	r3, r0
   19c3c:	rsbmi	r3, r0, #0
   19c40:	cmp	r3, r1
   19c44:	bls	19e08 <argp_parse@@Base+0x3288>
   19c48:	tst	r1, r2
   19c4c:	beq	19e18 <argp_parse@@Base+0x3298>
   19c50:	clz	r2, r3
   19c54:	clz	r0, r1
   19c58:	sub	r2, r0, r2
   19c5c:	rsbs	r2, r2, #31
   19c60:	addne	r2, r2, r2, lsl #1
   19c64:	mov	r0, #0
   19c68:	addne	pc, pc, r2, lsl #2
   19c6c:	nop			; (mov r0, r0)
   19c70:	cmp	r3, r1, lsl #31
   19c74:	adc	r0, r0, r0
   19c78:	subcs	r3, r3, r1, lsl #31
   19c7c:	cmp	r3, r1, lsl #30
   19c80:	adc	r0, r0, r0
   19c84:	subcs	r3, r3, r1, lsl #30
   19c88:	cmp	r3, r1, lsl #29
   19c8c:	adc	r0, r0, r0
   19c90:	subcs	r3, r3, r1, lsl #29
   19c94:	cmp	r3, r1, lsl #28
   19c98:	adc	r0, r0, r0
   19c9c:	subcs	r3, r3, r1, lsl #28
   19ca0:	cmp	r3, r1, lsl #27
   19ca4:	adc	r0, r0, r0
   19ca8:	subcs	r3, r3, r1, lsl #27
   19cac:	cmp	r3, r1, lsl #26
   19cb0:	adc	r0, r0, r0
   19cb4:	subcs	r3, r3, r1, lsl #26
   19cb8:	cmp	r3, r1, lsl #25
   19cbc:	adc	r0, r0, r0
   19cc0:	subcs	r3, r3, r1, lsl #25
   19cc4:	cmp	r3, r1, lsl #24
   19cc8:	adc	r0, r0, r0
   19ccc:	subcs	r3, r3, r1, lsl #24
   19cd0:	cmp	r3, r1, lsl #23
   19cd4:	adc	r0, r0, r0
   19cd8:	subcs	r3, r3, r1, lsl #23
   19cdc:	cmp	r3, r1, lsl #22
   19ce0:	adc	r0, r0, r0
   19ce4:	subcs	r3, r3, r1, lsl #22
   19ce8:	cmp	r3, r1, lsl #21
   19cec:	adc	r0, r0, r0
   19cf0:	subcs	r3, r3, r1, lsl #21
   19cf4:	cmp	r3, r1, lsl #20
   19cf8:	adc	r0, r0, r0
   19cfc:	subcs	r3, r3, r1, lsl #20
   19d00:	cmp	r3, r1, lsl #19
   19d04:	adc	r0, r0, r0
   19d08:	subcs	r3, r3, r1, lsl #19
   19d0c:	cmp	r3, r1, lsl #18
   19d10:	adc	r0, r0, r0
   19d14:	subcs	r3, r3, r1, lsl #18
   19d18:	cmp	r3, r1, lsl #17
   19d1c:	adc	r0, r0, r0
   19d20:	subcs	r3, r3, r1, lsl #17
   19d24:	cmp	r3, r1, lsl #16
   19d28:	adc	r0, r0, r0
   19d2c:	subcs	r3, r3, r1, lsl #16
   19d30:	cmp	r3, r1, lsl #15
   19d34:	adc	r0, r0, r0
   19d38:	subcs	r3, r3, r1, lsl #15
   19d3c:	cmp	r3, r1, lsl #14
   19d40:	adc	r0, r0, r0
   19d44:	subcs	r3, r3, r1, lsl #14
   19d48:	cmp	r3, r1, lsl #13
   19d4c:	adc	r0, r0, r0
   19d50:	subcs	r3, r3, r1, lsl #13
   19d54:	cmp	r3, r1, lsl #12
   19d58:	adc	r0, r0, r0
   19d5c:	subcs	r3, r3, r1, lsl #12
   19d60:	cmp	r3, r1, lsl #11
   19d64:	adc	r0, r0, r0
   19d68:	subcs	r3, r3, r1, lsl #11
   19d6c:	cmp	r3, r1, lsl #10
   19d70:	adc	r0, r0, r0
   19d74:	subcs	r3, r3, r1, lsl #10
   19d78:	cmp	r3, r1, lsl #9
   19d7c:	adc	r0, r0, r0
   19d80:	subcs	r3, r3, r1, lsl #9
   19d84:	cmp	r3, r1, lsl #8
   19d88:	adc	r0, r0, r0
   19d8c:	subcs	r3, r3, r1, lsl #8
   19d90:	cmp	r3, r1, lsl #7
   19d94:	adc	r0, r0, r0
   19d98:	subcs	r3, r3, r1, lsl #7
   19d9c:	cmp	r3, r1, lsl #6
   19da0:	adc	r0, r0, r0
   19da4:	subcs	r3, r3, r1, lsl #6
   19da8:	cmp	r3, r1, lsl #5
   19dac:	adc	r0, r0, r0
   19db0:	subcs	r3, r3, r1, lsl #5
   19db4:	cmp	r3, r1, lsl #4
   19db8:	adc	r0, r0, r0
   19dbc:	subcs	r3, r3, r1, lsl #4
   19dc0:	cmp	r3, r1, lsl #3
   19dc4:	adc	r0, r0, r0
   19dc8:	subcs	r3, r3, r1, lsl #3
   19dcc:	cmp	r3, r1, lsl #2
   19dd0:	adc	r0, r0, r0
   19dd4:	subcs	r3, r3, r1, lsl #2
   19dd8:	cmp	r3, r1, lsl #1
   19ddc:	adc	r0, r0, r0
   19de0:	subcs	r3, r3, r1, lsl #1
   19de4:	cmp	r3, r1
   19de8:	adc	r0, r0, r0
   19dec:	subcs	r3, r3, r1
   19df0:	cmp	ip, #0
   19df4:	rsbmi	r0, r0, #0
   19df8:	bx	lr
   19dfc:	teq	ip, r0
   19e00:	rsbmi	r0, r0, #0
   19e04:	bx	lr
   19e08:	movcc	r0, #0
   19e0c:	asreq	r0, ip, #31
   19e10:	orreq	r0, r0, #1
   19e14:	bx	lr
   19e18:	clz	r2, r1
   19e1c:	rsb	r2, r2, #31
   19e20:	cmp	ip, #0
   19e24:	lsr	r0, r3, r2
   19e28:	rsbmi	r0, r0, #0
   19e2c:	bx	lr
   19e30:	cmp	r0, #0
   19e34:	mvngt	r0, #-2147483648	; 0x80000000
   19e38:	movlt	r0, #-2147483648	; 0x80000000
   19e3c:	b	19e60 <argp_parse@@Base+0x32e0>
   19e40:	cmp	r1, #0
   19e44:	beq	19e30 <argp_parse@@Base+0x32b0>
   19e48:	push	{r0, r1, lr}
   19e4c:	bl	19c28 <argp_parse@@Base+0x30a8>
   19e50:	pop	{r1, r2, lr}
   19e54:	mul	r3, r2, r0
   19e58:	sub	r1, r1, r3
   19e5c:	bx	lr
   19e60:	push	{r1, lr}
   19e64:	mov	r0, #8
   19e68:	bl	110ec <raise@plt>
   19e6c:	pop	{r1, pc}
   19e70:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   19e74:	mov	r7, r0
   19e78:	ldr	r6, [pc, #72]	; 19ec8 <argp_parse@@Base+0x3348>
   19e7c:	ldr	r5, [pc, #72]	; 19ecc <argp_parse@@Base+0x334c>
   19e80:	add	r6, pc, r6
   19e84:	add	r5, pc, r5
   19e88:	sub	r6, r6, r5
   19e8c:	mov	r8, r1
   19e90:	mov	r9, r2
   19e94:	bl	110b4 <calloc@plt-0x20>
   19e98:	asrs	r6, r6, #2
   19e9c:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   19ea0:	mov	r4, #0
   19ea4:	add	r4, r4, #1
   19ea8:	ldr	r3, [r5], #4
   19eac:	mov	r2, r9
   19eb0:	mov	r1, r8
   19eb4:	mov	r0, r7
   19eb8:	blx	r3
   19ebc:	cmp	r6, r4
   19ec0:	bne	19ea4 <argp_parse@@Base+0x3324>
   19ec4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   19ec8:	andeq	r2, r1, r8, lsl #1
   19ecc:	andeq	r2, r1, r0, lsl #1
   19ed0:	bx	lr

Disassembly of section .fini:

00019ed4 <.fini>:
   19ed4:	push	{r3, lr}
   19ed8:	pop	{r3, pc}
