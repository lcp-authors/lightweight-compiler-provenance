
../repos/coreutils/src/chmod:     file format elf32-littlearm


Disassembly of section .init:

00010e98 <.init>:
   10e98:	push	{r3, lr}
   10e9c:	bl	111f4 <__assert_fail@plt+0x48>
   10ea0:	pop	{r3, pc}

Disassembly of section .plt:

00010ea4 <fstatfs64@plt-0x14>:
   10ea4:	push	{lr}		; (str lr, [sp, #-4]!)
   10ea8:	ldr	lr, [pc, #4]	; 10eb4 <fstatfs64@plt-0x4>
   10eac:	add	lr, pc, lr
   10eb0:	ldr	pc, [lr, #8]!
   10eb4:	andeq	sl, r1, ip, asr #2

00010eb8 <fstatfs64@plt>:
   10eb8:	add	ip, pc, #0, 12
   10ebc:	add	ip, ip, #106496	; 0x1a000
   10ec0:	ldr	pc, [ip, #332]!	; 0x14c

00010ec4 <calloc@plt>:
   10ec4:	add	ip, pc, #0, 12
   10ec8:	add	ip, ip, #106496	; 0x1a000
   10ecc:	ldr	pc, [ip, #324]!	; 0x144

00010ed0 <fputs_unlocked@plt>:
   10ed0:	add	ip, pc, #0, 12
   10ed4:	add	ip, ip, #106496	; 0x1a000
   10ed8:	ldr	pc, [ip, #316]!	; 0x13c

00010edc <raise@plt>:
   10edc:	add	ip, pc, #0, 12
   10ee0:	add	ip, ip, #106496	; 0x1a000
   10ee4:	ldr	pc, [ip, #308]!	; 0x134

00010ee8 <strcmp@plt>:
   10ee8:	add	ip, pc, #0, 12
   10eec:	add	ip, ip, #106496	; 0x1a000
   10ef0:	ldr	pc, [ip, #300]!	; 0x12c

00010ef4 <fflush@plt>:
   10ef4:	add	ip, pc, #0, 12
   10ef8:	add	ip, ip, #106496	; 0x1a000
   10efc:	ldr	pc, [ip, #292]!	; 0x124

00010f00 <memmove@plt>:
   10f00:	add	ip, pc, #0, 12
   10f04:	add	ip, ip, #106496	; 0x1a000
   10f08:	ldr	pc, [ip, #284]!	; 0x11c

00010f0c <free@plt>:
   10f0c:	add	ip, pc, #0, 12
   10f10:	add	ip, ip, #106496	; 0x1a000
   10f14:	ldr	pc, [ip, #276]!	; 0x114

00010f18 <_exit@plt>:
   10f18:	add	ip, pc, #0, 12
   10f1c:	add	ip, ip, #106496	; 0x1a000
   10f20:	ldr	pc, [ip, #268]!	; 0x10c

00010f24 <memcpy@plt>:
   10f24:	add	ip, pc, #0, 12
   10f28:	add	ip, ip, #106496	; 0x1a000
   10f2c:	ldr	pc, [ip, #260]!	; 0x104

00010f30 <mbsinit@plt>:
   10f30:	add	ip, pc, #0, 12
   10f34:	add	ip, ip, #106496	; 0x1a000
   10f38:	ldr	pc, [ip, #252]!	; 0xfc

00010f3c <memcmp@plt>:
   10f3c:	add	ip, pc, #0, 12
   10f40:	add	ip, ip, #106496	; 0x1a000
   10f44:	ldr	pc, [ip, #244]!	; 0xf4

00010f48 <fputc_unlocked@plt>:
   10f48:	add	ip, pc, #0, 12
   10f4c:	add	ip, ip, #106496	; 0x1a000
   10f50:	ldr	pc, [ip, #236]!	; 0xec

00010f54 <dcgettext@plt>:
   10f54:	add	ip, pc, #0, 12
   10f58:	add	ip, ip, #106496	; 0x1a000
   10f5c:	ldr	pc, [ip, #228]!	; 0xe4

00010f60 <realloc@plt>:
   10f60:	add	ip, pc, #0, 12
   10f64:	add	ip, ip, #106496	; 0x1a000
   10f68:	ldr	pc, [ip, #220]!	; 0xdc

00010f6c <textdomain@plt>:
   10f6c:	add	ip, pc, #0, 12
   10f70:	add	ip, ip, #106496	; 0x1a000
   10f74:	ldr	pc, [ip, #212]!	; 0xd4

00010f78 <__fxstatat64@plt>:
   10f78:	add	ip, pc, #0, 12
   10f7c:	add	ip, ip, #106496	; 0x1a000
   10f80:	ldr	pc, [ip, #204]!	; 0xcc

00010f84 <iswprint@plt>:
   10f84:	add	ip, pc, #0, 12
   10f88:	add	ip, ip, #106496	; 0x1a000
   10f8c:	ldr	pc, [ip, #196]!	; 0xc4

00010f90 <__fxstat64@plt>:
   10f90:	add	ip, pc, #0, 12
   10f94:	add	ip, ip, #106496	; 0x1a000
   10f98:	ldr	pc, [ip, #188]!	; 0xbc

00010f9c <fwrite@plt>:
   10f9c:	add	ip, pc, #0, 12
   10fa0:	add	ip, ip, #106496	; 0x1a000
   10fa4:	ldr	pc, [ip, #180]!	; 0xb4

00010fa8 <lseek64@plt>:
   10fa8:	add	ip, pc, #0, 12
   10fac:	add	ip, ip, #106496	; 0x1a000
   10fb0:	ldr	pc, [ip, #172]!	; 0xac

00010fb4 <__ctype_get_mb_cur_max@plt>:
   10fb4:	add	ip, pc, #0, 12
   10fb8:	add	ip, ip, #106496	; 0x1a000
   10fbc:	ldr	pc, [ip, #164]!	; 0xa4

00010fc0 <__fpending@plt>:
   10fc0:	add	ip, pc, #0, 12
   10fc4:	add	ip, ip, #106496	; 0x1a000
   10fc8:	ldr	pc, [ip, #156]!	; 0x9c

00010fcc <mbrtowc@plt>:
   10fcc:	add	ip, pc, #0, 12
   10fd0:	add	ip, ip, #106496	; 0x1a000
   10fd4:	ldr	pc, [ip, #148]!	; 0x94

00010fd8 <error@plt>:
   10fd8:	add	ip, pc, #0, 12
   10fdc:	add	ip, ip, #106496	; 0x1a000
   10fe0:	ldr	pc, [ip, #140]!	; 0x8c

00010fe4 <open64@plt>:
   10fe4:	add	ip, pc, #0, 12
   10fe8:	add	ip, ip, #106496	; 0x1a000
   10fec:	ldr	pc, [ip, #132]!	; 0x84

00010ff0 <malloc@plt>:
   10ff0:	add	ip, pc, #0, 12
   10ff4:	add	ip, ip, #106496	; 0x1a000
   10ff8:	ldr	pc, [ip, #124]!	; 0x7c

00010ffc <__libc_start_main@plt>:
   10ffc:	add	ip, pc, #0, 12
   11000:	add	ip, ip, #106496	; 0x1a000
   11004:	ldr	pc, [ip, #116]!	; 0x74

00011008 <__freading@plt>:
   11008:	add	ip, pc, #0, 12
   1100c:	add	ip, ip, #106496	; 0x1a000
   11010:	ldr	pc, [ip, #108]!	; 0x6c

00011014 <__gmon_start__@plt>:
   11014:	add	ip, pc, #0, 12
   11018:	add	ip, ip, #106496	; 0x1a000
   1101c:	ldr	pc, [ip, #100]!	; 0x64

00011020 <getopt_long@plt>:
   11020:	add	ip, pc, #0, 12
   11024:	add	ip, ip, #106496	; 0x1a000
   11028:	ldr	pc, [ip, #92]!	; 0x5c

0001102c <__ctype_b_loc@plt>:
   1102c:	add	ip, pc, #0, 12
   11030:	add	ip, ip, #106496	; 0x1a000
   11034:	ldr	pc, [ip, #84]!	; 0x54

00011038 <exit@plt>:
   11038:	add	ip, pc, #0, 12
   1103c:	add	ip, ip, #106496	; 0x1a000
   11040:	ldr	pc, [ip, #76]!	; 0x4c

00011044 <strlen@plt>:
   11044:	add	ip, pc, #0, 12
   11048:	add	ip, ip, #106496	; 0x1a000
   1104c:	ldr	pc, [ip, #68]!	; 0x44

00011050 <openat64@plt>:
   11050:	add	ip, pc, #0, 12
   11054:	add	ip, ip, #106496	; 0x1a000
   11058:	ldr	pc, [ip, #60]!	; 0x3c

0001105c <fchmodat@plt>:
   1105c:	add	ip, pc, #0, 12
   11060:	add	ip, ip, #106496	; 0x1a000
   11064:	ldr	pc, [ip, #52]!	; 0x34

00011068 <__errno_location@plt>:
   11068:	add	ip, pc, #0, 12
   1106c:	add	ip, ip, #106496	; 0x1a000
   11070:	ldr	pc, [ip, #44]!	; 0x2c

00011074 <__sprintf_chk@plt>:
   11074:	add	ip, pc, #0, 12
   11078:	add	ip, ip, #106496	; 0x1a000
   1107c:	ldr	pc, [ip, #36]!	; 0x24

00011080 <__cxa_atexit@plt>:
   11080:	add	ip, pc, #0, 12
   11084:	add	ip, ip, #106496	; 0x1a000
   11088:	ldr	pc, [ip, #28]!

0001108c <memset@plt>:
   1108c:	add	ip, pc, #0, 12
   11090:	add	ip, ip, #106496	; 0x1a000
   11094:	ldr	pc, [ip, #20]!

00011098 <__printf_chk@plt>:
   11098:	add	ip, pc, #0, 12
   1109c:	add	ip, ip, #106496	; 0x1a000
   110a0:	ldr	pc, [ip, #12]!

000110a4 <fileno@plt>:
   110a4:	add	ip, pc, #0, 12
   110a8:	add	ip, ip, #106496	; 0x1a000
   110ac:	ldr	pc, [ip, #4]!

000110b0 <__fprintf_chk@plt>:
   110b0:	add	ip, pc, #0, 12
   110b4:	add	ip, ip, #102400	; 0x19000
   110b8:	ldr	pc, [ip, #4092]!	; 0xffc

000110bc <fclose@plt>:
   110bc:	add	ip, pc, #0, 12
   110c0:	add	ip, ip, #102400	; 0x19000
   110c4:	ldr	pc, [ip, #4084]!	; 0xff4

000110c8 <fseeko64@plt>:
   110c8:	add	ip, pc, #0, 12
   110cc:	add	ip, ip, #102400	; 0x19000
   110d0:	ldr	pc, [ip, #4076]!	; 0xfec

000110d4 <fcntl64@plt>:
   110d4:	add	ip, pc, #0, 12
   110d8:	add	ip, ip, #102400	; 0x19000
   110dc:	ldr	pc, [ip, #4068]!	; 0xfe4

000110e0 <setlocale@plt>:
   110e0:	add	ip, pc, #0, 12
   110e4:	add	ip, ip, #102400	; 0x19000
   110e8:	ldr	pc, [ip, #4060]!	; 0xfdc

000110ec <strrchr@plt>:
   110ec:	add	ip, pc, #0, 12
   110f0:	add	ip, ip, #102400	; 0x19000
   110f4:	ldr	pc, [ip, #4052]!	; 0xfd4

000110f8 <nl_langinfo@plt>:
   110f8:	add	ip, pc, #0, 12
   110fc:	add	ip, ip, #102400	; 0x19000
   11100:	ldr	pc, [ip, #4044]!	; 0xfcc

00011104 <readdir64@plt>:
   11104:	add	ip, pc, #0, 12
   11108:	add	ip, ip, #102400	; 0x19000
   1110c:	ldr	pc, [ip, #4036]!	; 0xfc4

00011110 <fdopendir@plt>:
   11110:	add	ip, pc, #0, 12
   11114:	add	ip, ip, #102400	; 0x19000
   11118:	ldr	pc, [ip, #4028]!	; 0xfbc

0001111c <dirfd@plt>:
   1111c:	add	ip, pc, #0, 12
   11120:	add	ip, ip, #102400	; 0x19000
   11124:	ldr	pc, [ip, #4020]!	; 0xfb4

00011128 <fchdir@plt>:
   11128:	add	ip, pc, #0, 12
   1112c:	add	ip, ip, #102400	; 0x19000
   11130:	ldr	pc, [ip, #4012]!	; 0xfac

00011134 <qsort@plt>:
   11134:	add	ip, pc, #0, 12
   11138:	add	ip, ip, #102400	; 0x19000
   1113c:	ldr	pc, [ip, #4004]!	; 0xfa4

00011140 <bindtextdomain@plt>:
   11140:	add	ip, pc, #0, 12
   11144:	add	ip, ip, #102400	; 0x19000
   11148:	ldr	pc, [ip, #3996]!	; 0xf9c

0001114c <umask@plt>:
   1114c:	add	ip, pc, #0, 12
   11150:	add	ip, ip, #102400	; 0x19000
   11154:	ldr	pc, [ip, #3988]!	; 0xf94

00011158 <chmod@plt>:
   11158:	add	ip, pc, #0, 12
   1115c:	add	ip, ip, #102400	; 0x19000
   11160:	ldr	pc, [ip, #3980]!	; 0xf8c

00011164 <__xstat64@plt>:
   11164:	add	ip, pc, #0, 12
   11168:	add	ip, ip, #102400	; 0x19000
   1116c:	ldr	pc, [ip, #3972]!	; 0xf84

00011170 <strncmp@plt>:
   11170:	add	ip, pc, #0, 12
   11174:	add	ip, ip, #102400	; 0x19000
   11178:	ldr	pc, [ip, #3964]!	; 0xf7c

0001117c <abort@plt>:
   1117c:	add	ip, pc, #0, 12
   11180:	add	ip, ip, #102400	; 0x19000
   11184:	ldr	pc, [ip, #3956]!	; 0xf74

00011188 <close@plt>:
   11188:	add	ip, pc, #0, 12
   1118c:	add	ip, ip, #102400	; 0x19000
   11190:	ldr	pc, [ip, #3948]!	; 0xf6c

00011194 <__lxstat64@plt>:
   11194:	add	ip, pc, #0, 12
   11198:	add	ip, ip, #102400	; 0x19000
   1119c:	ldr	pc, [ip, #3940]!	; 0xf64

000111a0 <closedir@plt>:
   111a0:	add	ip, pc, #0, 12
   111a4:	add	ip, ip, #102400	; 0x19000
   111a8:	ldr	pc, [ip, #3932]!	; 0xf5c

000111ac <__assert_fail@plt>:
   111ac:	add	ip, pc, #0, 12
   111b0:	add	ip, ip, #102400	; 0x19000
   111b4:	ldr	pc, [ip, #3924]!	; 0xf54

Disassembly of section .text:

000111b8 <.text>:
   111b8:	mov	fp, #0
   111bc:	mov	lr, #0
   111c0:	pop	{r1}		; (ldr r1, [sp], #4)
   111c4:	mov	r2, sp
   111c8:	push	{r2}		; (str r2, [sp, #-4]!)
   111cc:	push	{r0}		; (str r0, [sp, #-4]!)
   111d0:	ldr	ip, [pc, #16]	; 111e8 <__assert_fail@plt+0x3c>
   111d4:	push	{ip}		; (str ip, [sp, #-4]!)
   111d8:	ldr	r0, [pc, #12]	; 111ec <__assert_fail@plt+0x40>
   111dc:	ldr	r3, [pc, #12]	; 111f0 <__assert_fail@plt+0x44>
   111e0:	bl	10ffc <__libc_start_main@plt>
   111e4:	bl	1117c <abort@plt>
   111e8:	andeq	r9, r1, r4, ror r6
   111ec:	andeq	r1, r1, r0, lsl #13
   111f0:	andeq	r9, r1, r4, lsl r6
   111f4:	ldr	r3, [pc, #20]	; 11210 <__assert_fail@plt+0x64>
   111f8:	ldr	r2, [pc, #20]	; 11214 <__assert_fail@plt+0x68>
   111fc:	add	r3, pc, r3
   11200:	ldr	r2, [r3, r2]
   11204:	cmp	r2, #0
   11208:	bxeq	lr
   1120c:	b	11014 <__gmon_start__@plt>
   11210:	strdeq	r9, [r1], -ip
   11214:	andeq	r0, r0, ip, lsl #2
   11218:	ldr	r3, [pc, #28]	; 1123c <__assert_fail@plt+0x90>
   1121c:	ldr	r0, [pc, #28]	; 11240 <__assert_fail@plt+0x94>
   11220:	sub	r3, r3, r0
   11224:	cmp	r3, #6
   11228:	bxls	lr
   1122c:	ldr	r3, [pc, #16]	; 11244 <__assert_fail@plt+0x98>
   11230:	cmp	r3, #0
   11234:	bxeq	lr
   11238:	bx	r3
   1123c:	andeq	fp, r2, r7, ror #2
   11240:	andeq	fp, r2, r4, ror #2
   11244:	andeq	r0, r0, r0
   11248:	ldr	r1, [pc, #36]	; 11274 <__assert_fail@plt+0xc8>
   1124c:	ldr	r0, [pc, #36]	; 11278 <__assert_fail@plt+0xcc>
   11250:	sub	r1, r1, r0
   11254:	asr	r1, r1, #2
   11258:	add	r1, r1, r1, lsr #31
   1125c:	asrs	r1, r1, #1
   11260:	bxeq	lr
   11264:	ldr	r3, [pc, #16]	; 1127c <__assert_fail@plt+0xd0>
   11268:	cmp	r3, #0
   1126c:	bxeq	lr
   11270:	bx	r3
   11274:	andeq	fp, r2, r4, ror #2
   11278:	andeq	fp, r2, r4, ror #2
   1127c:	andeq	r0, r0, r0
   11280:	push	{r4, lr}
   11284:	ldr	r4, [pc, #24]	; 112a4 <__assert_fail@plt+0xf8>
   11288:	ldrb	r3, [r4]
   1128c:	cmp	r3, #0
   11290:	popne	{r4, pc}
   11294:	bl	11218 <__assert_fail@plt+0x6c>
   11298:	mov	r3, #1
   1129c:	strb	r3, [r4]
   112a0:	pop	{r4, pc}
   112a4:	andeq	fp, r2, r4, lsl #3
   112a8:	ldr	r0, [pc, #40]	; 112d8 <__assert_fail@plt+0x12c>
   112ac:	ldr	r3, [r0]
   112b0:	cmp	r3, #0
   112b4:	bne	112bc <__assert_fail@plt+0x110>
   112b8:	b	11248 <__assert_fail@plt+0x9c>
   112bc:	ldr	r3, [pc, #24]	; 112dc <__assert_fail@plt+0x130>
   112c0:	cmp	r3, #0
   112c4:	beq	112b8 <__assert_fail@plt+0x10c>
   112c8:	push	{r4, lr}
   112cc:	blx	r3
   112d0:	pop	{r4, lr}
   112d4:	b	11248 <__assert_fail@plt+0x9c>
   112d8:	andeq	sl, r2, r4, lsl pc
   112dc:	andeq	r0, r0, r0
   112e0:	push	{lr}		; (str lr, [sp, #-4]!)
   112e4:	sub	sp, sp, #68	; 0x44
   112e8:	subs	r6, r0, #0
   112ec:	beq	11328 <__assert_fail@plt+0x17c>
   112f0:	ldr	r3, [pc, #808]	; 11620 <__assert_fail@plt+0x474>
   112f4:	ldr	r4, [r3]
   112f8:	mov	r2, #5
   112fc:	ldr	r1, [pc, #800]	; 11624 <__assert_fail@plt+0x478>
   11300:	mov	r0, #0
   11304:	bl	10f54 <dcgettext@plt>
   11308:	ldr	r3, [pc, #792]	; 11628 <__assert_fail@plt+0x47c>
   1130c:	ldr	r3, [r3]
   11310:	mov	r2, r0
   11314:	mov	r1, #1
   11318:	mov	r0, r4
   1131c:	bl	110b0 <__fprintf_chk@plt>
   11320:	mov	r0, r6
   11324:	bl	11038 <exit@plt>
   11328:	mov	r2, #5
   1132c:	ldr	r1, [pc, #760]	; 1162c <__assert_fail@plt+0x480>
   11330:	mov	r0, #0
   11334:	bl	10f54 <dcgettext@plt>
   11338:	ldr	r3, [pc, #744]	; 11628 <__assert_fail@plt+0x47c>
   1133c:	ldr	r2, [r3]
   11340:	str	r2, [sp]
   11344:	mov	r3, r2
   11348:	mov	r1, r0
   1134c:	mov	r0, #1
   11350:	bl	11098 <__printf_chk@plt>
   11354:	mov	r2, #5
   11358:	ldr	r1, [pc, #720]	; 11630 <__assert_fail@plt+0x484>
   1135c:	mov	r0, #0
   11360:	bl	10f54 <dcgettext@plt>
   11364:	ldr	r4, [pc, #712]	; 11634 <__assert_fail@plt+0x488>
   11368:	ldr	r1, [r4]
   1136c:	bl	10ed0 <fputs_unlocked@plt>
   11370:	mov	r2, #5
   11374:	ldr	r1, [pc, #700]	; 11638 <__assert_fail@plt+0x48c>
   11378:	mov	r0, #0
   1137c:	bl	10f54 <dcgettext@plt>
   11380:	ldr	r1, [r4]
   11384:	bl	10ed0 <fputs_unlocked@plt>
   11388:	mov	r2, #5
   1138c:	ldr	r1, [pc, #680]	; 1163c <__assert_fail@plt+0x490>
   11390:	mov	r0, #0
   11394:	bl	10f54 <dcgettext@plt>
   11398:	ldr	r1, [r4]
   1139c:	bl	10ed0 <fputs_unlocked@plt>
   113a0:	mov	r2, #5
   113a4:	ldr	r1, [pc, #660]	; 11640 <__assert_fail@plt+0x494>
   113a8:	mov	r0, #0
   113ac:	bl	10f54 <dcgettext@plt>
   113b0:	ldr	r1, [r4]
   113b4:	bl	10ed0 <fputs_unlocked@plt>
   113b8:	mov	r2, #5
   113bc:	ldr	r1, [pc, #640]	; 11644 <__assert_fail@plt+0x498>
   113c0:	mov	r0, #0
   113c4:	bl	10f54 <dcgettext@plt>
   113c8:	ldr	r1, [r4]
   113cc:	bl	10ed0 <fputs_unlocked@plt>
   113d0:	mov	r2, #5
   113d4:	ldr	r1, [pc, #620]	; 11648 <__assert_fail@plt+0x49c>
   113d8:	mov	r0, #0
   113dc:	bl	10f54 <dcgettext@plt>
   113e0:	ldr	r1, [r4]
   113e4:	bl	10ed0 <fputs_unlocked@plt>
   113e8:	mov	r2, #5
   113ec:	ldr	r1, [pc, #600]	; 1164c <__assert_fail@plt+0x4a0>
   113f0:	mov	r0, #0
   113f4:	bl	10f54 <dcgettext@plt>
   113f8:	ldr	r1, [r4]
   113fc:	bl	10ed0 <fputs_unlocked@plt>
   11400:	mov	r2, #5
   11404:	ldr	r1, [pc, #580]	; 11650 <__assert_fail@plt+0x4a4>
   11408:	mov	r0, #0
   1140c:	bl	10f54 <dcgettext@plt>
   11410:	ldr	r1, [r4]
   11414:	bl	10ed0 <fputs_unlocked@plt>
   11418:	add	ip, sp, #8
   1141c:	ldr	lr, [pc, #560]	; 11654 <__assert_fail@plt+0x4a8>
   11420:	ldm	lr!, {r0, r1, r2, r3}
   11424:	stmia	ip!, {r0, r1, r2, r3}
   11428:	ldm	lr!, {r0, r1, r2, r3}
   1142c:	stmia	ip!, {r0, r1, r2, r3}
   11430:	ldm	lr!, {r0, r1, r2, r3}
   11434:	stmia	ip!, {r0, r1, r2, r3}
   11438:	ldm	lr, {r0, r1}
   1143c:	stm	ip, {r0, r1}
   11440:	ldr	r1, [sp, #8]
   11444:	cmp	r1, #0
   11448:	addeq	r4, sp, #8
   1144c:	beq	11474 <__assert_fail@plt+0x2c8>
   11450:	add	r4, sp, #8
   11454:	ldr	r5, [pc, #508]	; 11658 <__assert_fail@plt+0x4ac>
   11458:	mov	r0, r5
   1145c:	bl	10ee8 <strcmp@plt>
   11460:	cmp	r0, #0
   11464:	beq	11474 <__assert_fail@plt+0x2c8>
   11468:	ldr	r1, [r4, #8]!
   1146c:	cmp	r1, #0
   11470:	bne	11458 <__assert_fail@plt+0x2ac>
   11474:	ldr	r4, [r4, #4]
   11478:	cmp	r4, #0
   1147c:	beq	11590 <__assert_fail@plt+0x3e4>
   11480:	mov	r2, #5
   11484:	ldr	r1, [pc, #464]	; 1165c <__assert_fail@plt+0x4b0>
   11488:	mov	r0, #0
   1148c:	bl	10f54 <dcgettext@plt>
   11490:	ldr	r3, [pc, #456]	; 11660 <__assert_fail@plt+0x4b4>
   11494:	ldr	r2, [pc, #456]	; 11664 <__assert_fail@plt+0x4b8>
   11498:	mov	r1, r0
   1149c:	mov	r0, #1
   114a0:	bl	11098 <__printf_chk@plt>
   114a4:	mov	r1, #0
   114a8:	mov	r0, #5
   114ac:	bl	110e0 <setlocale@plt>
   114b0:	cmp	r0, #0
   114b4:	beq	114cc <__assert_fail@plt+0x320>
   114b8:	mov	r2, #3
   114bc:	ldr	r1, [pc, #420]	; 11668 <__assert_fail@plt+0x4bc>
   114c0:	bl	11170 <strncmp@plt>
   114c4:	cmp	r0, #0
   114c8:	bne	1152c <__assert_fail@plt+0x380>
   114cc:	mov	r2, #5
   114d0:	ldr	r1, [pc, #404]	; 1166c <__assert_fail@plt+0x4c0>
   114d4:	mov	r0, #0
   114d8:	bl	10f54 <dcgettext@plt>
   114dc:	ldr	r5, [pc, #372]	; 11658 <__assert_fail@plt+0x4ac>
   114e0:	mov	r3, r5
   114e4:	ldr	r2, [pc, #372]	; 11660 <__assert_fail@plt+0x4b4>
   114e8:	mov	r1, r0
   114ec:	mov	r0, #1
   114f0:	bl	11098 <__printf_chk@plt>
   114f4:	mov	r2, #5
   114f8:	ldr	r1, [pc, #368]	; 11670 <__assert_fail@plt+0x4c4>
   114fc:	mov	r0, #0
   11500:	bl	10f54 <dcgettext@plt>
   11504:	mov	r1, r0
   11508:	ldr	r2, [pc, #356]	; 11674 <__assert_fail@plt+0x4c8>
   1150c:	ldr	r3, [pc, #356]	; 11678 <__assert_fail@plt+0x4cc>
   11510:	cmp	r4, r5
   11514:	movne	r3, r2
   11518:	mov	r2, r4
   1151c:	mov	r0, #1
   11520:	bl	11098 <__printf_chk@plt>
   11524:	b	11320 <__assert_fail@plt+0x174>
   11528:	ldr	r4, [pc, #296]	; 11658 <__assert_fail@plt+0x4ac>
   1152c:	mov	r2, #5
   11530:	ldr	r1, [pc, #324]	; 1167c <__assert_fail@plt+0x4d0>
   11534:	mov	r0, #0
   11538:	bl	10f54 <dcgettext@plt>
   1153c:	ldr	r3, [pc, #240]	; 11634 <__assert_fail@plt+0x488>
   11540:	ldr	r1, [r3]
   11544:	bl	10ed0 <fputs_unlocked@plt>
   11548:	b	114cc <__assert_fail@plt+0x320>
   1154c:	mov	r2, #5
   11550:	ldr	r1, [pc, #276]	; 1166c <__assert_fail@plt+0x4c0>
   11554:	mov	r0, #0
   11558:	bl	10f54 <dcgettext@plt>
   1155c:	ldr	r4, [pc, #244]	; 11658 <__assert_fail@plt+0x4ac>
   11560:	mov	r3, r4
   11564:	ldr	r2, [pc, #244]	; 11660 <__assert_fail@plt+0x4b4>
   11568:	mov	r1, r0
   1156c:	mov	r0, #1
   11570:	bl	11098 <__printf_chk@plt>
   11574:	mov	r2, #5
   11578:	ldr	r1, [pc, #240]	; 11670 <__assert_fail@plt+0x4c4>
   1157c:	mov	r0, #0
   11580:	bl	10f54 <dcgettext@plt>
   11584:	mov	r1, r0
   11588:	ldr	r3, [pc, #232]	; 11678 <__assert_fail@plt+0x4cc>
   1158c:	b	11518 <__assert_fail@plt+0x36c>
   11590:	mov	r2, #5
   11594:	ldr	r1, [pc, #192]	; 1165c <__assert_fail@plt+0x4b0>
   11598:	mov	r0, #0
   1159c:	bl	10f54 <dcgettext@plt>
   115a0:	ldr	r3, [pc, #184]	; 11660 <__assert_fail@plt+0x4b4>
   115a4:	ldr	r2, [pc, #184]	; 11664 <__assert_fail@plt+0x4b8>
   115a8:	mov	r1, r0
   115ac:	mov	r0, #1
   115b0:	bl	11098 <__printf_chk@plt>
   115b4:	mov	r1, #0
   115b8:	mov	r0, #5
   115bc:	bl	110e0 <setlocale@plt>
   115c0:	cmp	r0, #0
   115c4:	beq	1154c <__assert_fail@plt+0x3a0>
   115c8:	mov	r2, #3
   115cc:	ldr	r1, [pc, #148]	; 11668 <__assert_fail@plt+0x4bc>
   115d0:	bl	11170 <strncmp@plt>
   115d4:	cmp	r0, #0
   115d8:	bne	11528 <__assert_fail@plt+0x37c>
   115dc:	mov	r2, #5
   115e0:	ldr	r1, [pc, #132]	; 1166c <__assert_fail@plt+0x4c0>
   115e4:	mov	r0, #0
   115e8:	bl	10f54 <dcgettext@plt>
   115ec:	ldr	r4, [pc, #100]	; 11658 <__assert_fail@plt+0x4ac>
   115f0:	mov	r3, r4
   115f4:	ldr	r2, [pc, #100]	; 11660 <__assert_fail@plt+0x4b4>
   115f8:	mov	r1, r0
   115fc:	mov	r0, #1
   11600:	bl	11098 <__printf_chk@plt>
   11604:	mov	r2, #5
   11608:	ldr	r1, [pc, #96]	; 11670 <__assert_fail@plt+0x4c4>
   1160c:	mov	r0, #0
   11610:	bl	10f54 <dcgettext@plt>
   11614:	mov	r1, r0
   11618:	ldr	r3, [pc, #88]	; 11678 <__assert_fail@plt+0x4cc>
   1161c:	b	11518 <__assert_fail@plt+0x36c>
   11620:	andeq	fp, r2, r8, ror r1
   11624:	andeq	r9, r1, ip, lsl #15
   11628:			; <UNDEFINED> instruction: 0x0002b1b4
   1162c:			; <UNDEFINED> instruction: 0x000197b4
   11630:	andeq	r9, r1, ip, lsr r8
   11634:	andeq	fp, r2, ip, ror r1
   11638:	andeq	r9, r1, r8, lsr #17
   1163c:	andeq	r9, r1, r4, ror r9
   11640:	strdeq	r9, [r1], -r4
   11644:	andeq	r9, r1, r8, lsr sl
   11648:	andeq	r9, r1, ip, ror sl
   1164c:	andeq	r9, r1, ip, lsr #21
   11650:	andeq	r9, r1, r4, ror #21
   11654:	muleq	r1, ip, r6
   11658:	andeq	r9, r1, r4, lsl #15
   1165c:	andeq	r9, r1, r0, lsr fp
   11660:	andeq	r9, r1, r8, asr #22
   11664:	andeq	r9, r1, r0, ror fp
   11668:	andeq	r9, r1, r0, lsl #23
   1166c:	andeq	r9, r1, ip, asr #23
   11670:	andeq	r9, r1, r8, ror #23
   11674:	andeq	r9, r1, r4, lsr #17
   11678:	andeq	sl, r1, r0, asr r0
   1167c:	andeq	r9, r1, r4, lsl #23
   11680:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11684:	sub	sp, sp, #180	; 0xb4
   11688:	str	r0, [sp, #20]
   1168c:	mov	r4, r1
   11690:	mov	r7, #0
   11694:	add	r6, sp, #176	; 0xb0
   11698:	str	r7, [r6, #-4]!
   1169c:	ldr	r0, [r1]
   116a0:	bl	15fb8 <__assert_fail@plt+0x4e0c>
   116a4:	ldr	r1, [pc, #3224]	; 12344 <__assert_fail@plt+0x1198>
   116a8:	mov	r0, #6
   116ac:	bl	110e0 <setlocale@plt>
   116b0:	ldr	r8, [pc, #3216]	; 12348 <__assert_fail@plt+0x119c>
   116b4:	ldr	r1, [pc, #3216]	; 1234c <__assert_fail@plt+0x11a0>
   116b8:	mov	r0, r8
   116bc:	bl	11140 <bindtextdomain@plt>
   116c0:	mov	r0, r8
   116c4:	bl	10f6c <textdomain@plt>
   116c8:	ldr	r0, [pc, #3200]	; 12350 <__assert_fail@plt+0x11a4>
   116cc:	bl	19678 <__assert_fail@plt+0x84cc>
   116d0:	ldr	r3, [pc, #3196]	; 12354 <__assert_fail@plt+0x11a8>
   116d4:	strb	r7, [r3]
   116d8:	strb	r7, [r3, #1]
   116dc:	strb	r7, [r3, #2]
   116e0:	str	r7, [sp, #32]
   116e4:	str	r7, [sp, #24]
   116e8:	mov	r5, r7
   116ec:	str	r7, [sp, #28]
   116f0:	ldr	r8, [pc, #3168]	; 12358 <__assert_fail@plt+0x11ac>
   116f4:	ldr	fp, [pc, #3168]	; 1235c <__assert_fail@plt+0x11b0>
   116f8:	ldr	sl, [pc, #3168]	; 12360 <__assert_fail@plt+0x11b4>
   116fc:	mov	r7, r3
   11700:	mov	r3, #0
   11704:	str	r3, [sp]
   11708:	ldr	r3, [pc, #3156]	; 12364 <__assert_fail@plt+0x11b8>
   1170c:	mov	r2, r8
   11710:	mov	r1, r4
   11714:	ldr	r0, [sp, #20]
   11718:	bl	11020 <getopt_long@plt>
   1171c:	cmn	r0, #1
   11720:	beq	11918 <__assert_fail@plt+0x76c>
   11724:	cmp	r0, #99	; 0x63
   11728:	beq	118ec <__assert_fail@plt+0x740>
   1172c:	ble	11770 <__assert_fail@plt+0x5c4>
   11730:	cmp	r0, #118	; 0x76
   11734:	beq	118f8 <__assert_fail@plt+0x74c>
   11738:	ble	11884 <__assert_fail@plt+0x6d8>
   1173c:	cmp	r0, #256	; 0x100
   11740:	beq	1190c <__assert_fail@plt+0x760>
   11744:	ble	118b8 <__assert_fail@plt+0x70c>
   11748:	ldr	r3, [pc, #3096]	; 12368 <__assert_fail@plt+0x11bc>
   1174c:	cmp	r0, r3
   11750:	beq	118c4 <__assert_fail@plt+0x718>
   11754:	add	r3, r3, #1
   11758:	cmp	r0, r3
   1175c:	bne	117dc <__assert_fail@plt+0x630>
   11760:	ldr	r3, [pc, #3076]	; 1236c <__assert_fail@plt+0x11c0>
   11764:	ldr	r3, [r3]
   11768:	str	r3, [sp, #32]
   1176c:	b	11700 <__assert_fail@plt+0x554>
   11770:	cmp	r0, #55	; 0x37
   11774:	bgt	117e4 <__assert_fail@plt+0x638>
   11778:	cmp	r0, #48	; 0x30
   1177c:	bge	11814 <__assert_fail@plt+0x668>
   11780:	cmn	r0, #2
   11784:	beq	11904 <__assert_fail@plt+0x758>
   11788:	bgt	117d0 <__assert_fail@plt+0x624>
   1178c:	cmn	r0, #3
   11790:	bne	117dc <__assert_fail@plt+0x630>
   11794:	mov	r4, #0
   11798:	str	r4, [sp, #8]
   1179c:	ldr	r3, [pc, #3020]	; 12370 <__assert_fail@plt+0x11c4>
   117a0:	str	r3, [sp, #4]
   117a4:	ldr	r3, [pc, #3016]	; 12374 <__assert_fail@plt+0x11c8>
   117a8:	str	r3, [sp]
   117ac:	ldr	r3, [pc, #3012]	; 12378 <__assert_fail@plt+0x11cc>
   117b0:	ldr	r3, [r3]
   117b4:	ldr	r2, [pc, #3008]	; 1237c <__assert_fail@plt+0x11d0>
   117b8:	ldr	r1, [pc, #3008]	; 12380 <__assert_fail@plt+0x11d4>
   117bc:	ldr	r0, [pc, #3008]	; 12384 <__assert_fail@plt+0x11d8>
   117c0:	ldr	r0, [r0]
   117c4:	bl	18060 <__assert_fail@plt+0x6eb4>
   117c8:	mov	r0, r4
   117cc:	bl	11038 <exit@plt>
   117d0:	sub	r0, r0, #43	; 0x2b
   117d4:	cmp	r0, #1
   117d8:	bls	11814 <__assert_fail@plt+0x668>
   117dc:	mov	r0, #1
   117e0:	bl	112e0 <__assert_fail@plt+0x134>
   117e4:	cmp	r0, #82	; 0x52
   117e8:	moveq	r3, #1
   117ec:	strbeq	r3, [r7, #2]
   117f0:	beq	11700 <__assert_fail@plt+0x554>
   117f4:	ble	1180c <__assert_fail@plt+0x660>
   117f8:	cmp	r0, #88	; 0x58
   117fc:	beq	11814 <__assert_fail@plt+0x668>
   11800:	cmp	r0, #97	; 0x61
   11804:	bne	117dc <__assert_fail@plt+0x630>
   11808:	b	11814 <__assert_fail@plt+0x668>
   1180c:	cmp	r0, #61	; 0x3d
   11810:	bne	117dc <__assert_fail@plt+0x630>
   11814:	ldr	r3, [sl]
   11818:	sub	r3, r3, #-1073741823	; 0xc0000001
   1181c:	ldr	r3, [r4, r3, lsl #2]
   11820:	str	r3, [sp, #40]	; 0x28
   11824:	mov	r0, r3
   11828:	bl	11044 <strlen@plt>
   1182c:	str	r0, [sp, #44]	; 0x2c
   11830:	cmp	r5, #0
   11834:	moveq	r9, r5
   11838:	addne	r9, r5, #1
   1183c:	add	r3, r0, r9
   11840:	mov	r2, r3
   11844:	str	r3, [sp, #36]	; 0x24
   11848:	ldr	r3, [sp, #172]	; 0xac
   1184c:	cmp	r2, r3
   11850:	bcs	118d0 <__assert_fail@plt+0x724>
   11854:	mov	r3, #44	; 0x2c
   11858:	ldr	r0, [sp, #28]
   1185c:	strb	r3, [r0, r5]
   11860:	ldr	r3, [sp, #44]	; 0x2c
   11864:	add	r2, r3, #1
   11868:	ldr	r1, [sp, #40]	; 0x28
   1186c:	add	r0, r0, r9
   11870:	bl	10f24 <memcpy@plt>
   11874:	mov	r3, #1
   11878:	strb	r3, [r7]
   1187c:	ldr	r5, [sp, #36]	; 0x24
   11880:	b	11700 <__assert_fail@plt+0x554>
   11884:	cmp	r0, #111	; 0x6f
   11888:	beq	11814 <__assert_fail@plt+0x668>
   1188c:	bgt	118ac <__assert_fail@plt+0x700>
   11890:	cmp	r0, #102	; 0x66
   11894:	moveq	r3, #1
   11898:	strbeq	r3, [r7, #1]
   1189c:	beq	11700 <__assert_fail@plt+0x554>
   118a0:	cmp	r0, #103	; 0x67
   118a4:	bne	117dc <__assert_fail@plt+0x630>
   118a8:	b	11814 <__assert_fail@plt+0x668>
   118ac:	cmp	r0, #114	; 0x72
   118b0:	blt	117dc <__assert_fail@plt+0x630>
   118b4:	b	11814 <__assert_fail@plt+0x668>
   118b8:	cmp	r0, #120	; 0x78
   118bc:	bgt	117dc <__assert_fail@plt+0x630>
   118c0:	b	11814 <__assert_fail@plt+0x668>
   118c4:	mov	r3, #1
   118c8:	str	r3, [sp, #24]
   118cc:	b	11700 <__assert_fail@plt+0x554>
   118d0:	add	r3, r2, #1
   118d4:	str	r3, [sp, #172]	; 0xac
   118d8:	mov	r1, r6
   118dc:	ldr	r0, [sp, #28]
   118e0:	bl	182c8 <__assert_fail@plt+0x711c>
   118e4:	str	r0, [sp, #28]
   118e8:	b	11854 <__assert_fail@plt+0x6a8>
   118ec:	mov	r3, #1
   118f0:	str	r3, [fp]
   118f4:	b	11700 <__assert_fail@plt+0x554>
   118f8:	mov	r3, #0
   118fc:	str	r3, [fp]
   11900:	b	11700 <__assert_fail@plt+0x554>
   11904:	mov	r0, #0
   11908:	bl	112e0 <__assert_fail@plt+0x134>
   1190c:	mov	r3, #0
   11910:	str	r3, [sp, #24]
   11914:	b	11700 <__assert_fail@plt+0x554>
   11918:	ldr	r3, [sp, #32]
   1191c:	cmp	r3, #0
   11920:	beq	11958 <__assert_fail@plt+0x7ac>
   11924:	ldr	r3, [sp, #28]
   11928:	cmp	r3, #0
   1192c:	beq	122a8 <__assert_fail@plt+0x10fc>
   11930:	mov	r2, #5
   11934:	ldr	r1, [pc, #2636]	; 12388 <__assert_fail@plt+0x11dc>
   11938:	mov	r0, #0
   1193c:	bl	10f54 <dcgettext@plt>
   11940:	mov	r2, r0
   11944:	mov	r1, #0
   11948:	mov	r0, r1
   1194c:	bl	10fd8 <error@plt>
   11950:	mov	r0, #1
   11954:	bl	112e0 <__assert_fail@plt+0x134>
   11958:	ldr	r3, [sp, #28]
   1195c:	cmp	r3, #0
   11960:	beq	119b4 <__assert_fail@plt+0x808>
   11964:	ldr	r3, [pc, #2548]	; 12360 <__assert_fail@plt+0x11b4>
   11968:	ldr	r3, [r3]
   1196c:	ldr	r2, [sp, #20]
   11970:	cmp	r2, r3
   11974:	bgt	11a5c <__assert_fail@plt+0x8b0>
   11978:	sub	r3, r3, #-1073741823	; 0xc0000001
   1197c:	ldr	r3, [r4, r3, lsl #2]
   11980:	ldr	r2, [sp, #28]
   11984:	cmp	r3, r2
   11988:	beq	119e4 <__assert_fail@plt+0x838>
   1198c:	mov	r2, #5
   11990:	ldr	r1, [pc, #2548]	; 1238c <__assert_fail@plt+0x11e0>
   11994:	mov	r0, #0
   11998:	bl	10f54 <dcgettext@plt>
   1199c:	mov	r2, r0
   119a0:	mov	r1, #0
   119a4:	mov	r0, r1
   119a8:	bl	10fd8 <error@plt>
   119ac:	mov	r0, #1
   119b0:	bl	112e0 <__assert_fail@plt+0x134>
   119b4:	ldr	r1, [pc, #2468]	; 12360 <__assert_fail@plt+0x11b4>
   119b8:	ldr	r2, [r1]
   119bc:	add	r3, r2, #1
   119c0:	str	r3, [r1]
   119c4:	ldr	r2, [r4, r2, lsl #2]
   119c8:	str	r2, [sp, #28]
   119cc:	ldr	r1, [sp, #20]
   119d0:	cmp	r1, r3
   119d4:	bgt	11a5c <__assert_fail@plt+0x8b0>
   119d8:	cmp	r2, #0
   119dc:	bne	11978 <__assert_fail@plt+0x7cc>
   119e0:	b	1198c <__assert_fail@plt+0x7e0>
   119e4:	mov	r2, #5
   119e8:	ldr	r1, [pc, #2464]	; 12390 <__assert_fail@plt+0x11e4>
   119ec:	mov	r0, #0
   119f0:	bl	10f54 <dcgettext@plt>
   119f4:	mov	r6, r0
   119f8:	ldr	r3, [sp, #20]
   119fc:	sub	r5, r3, #-1073741823	; 0xc0000001
   11a00:	ldr	r0, [r4, r5, lsl #2]
   11a04:	bl	17b08 <__assert_fail@plt+0x695c>
   11a08:	mov	r3, r0
   11a0c:	mov	r2, r6
   11a10:	mov	r1, #0
   11a14:	mov	r0, r1
   11a18:	bl	10fd8 <error@plt>
   11a1c:	b	119ac <__assert_fail@plt+0x800>
   11a20:	bl	11068 <__errno_location@plt>
   11a24:	ldr	r4, [r0]
   11a28:	mov	r2, #5
   11a2c:	ldr	r1, [pc, #2400]	; 12394 <__assert_fail@plt+0x11e8>
   11a30:	mov	r0, #0
   11a34:	bl	10f54 <dcgettext@plt>
   11a38:	mov	r5, r0
   11a3c:	ldr	r1, [sp, #32]
   11a40:	mov	r0, #4
   11a44:	bl	178d4 <__assert_fail@plt+0x6728>
   11a48:	mov	r3, r0
   11a4c:	mov	r2, r5
   11a50:	mov	r1, r4
   11a54:	mov	r0, #1
   11a58:	bl	10fd8 <error@plt>
   11a5c:	ldr	r0, [sp, #28]
   11a60:	bl	159e0 <__assert_fail@plt+0x4834>
   11a64:	ldr	r3, [pc, #2280]	; 12354 <__assert_fail@plt+0x11a8>
   11a68:	str	r0, [r3, #4]
   11a6c:	cmp	r0, #0
   11a70:	beq	11a88 <__assert_fail@plt+0x8dc>
   11a74:	mov	r0, #0
   11a78:	bl	1114c <umask@plt>
   11a7c:	ldr	r3, [pc, #2256]	; 12354 <__assert_fail@plt+0x11a8>
   11a80:	str	r0, [r3, #8]
   11a84:	b	122d4 <__assert_fail@plt+0x1128>
   11a88:	mov	r2, #5
   11a8c:	ldr	r1, [pc, #2308]	; 12398 <__assert_fail@plt+0x11ec>
   11a90:	bl	10f54 <dcgettext@plt>
   11a94:	mov	r4, r0
   11a98:	ldr	r0, [sp, #28]
   11a9c:	bl	17b08 <__assert_fail@plt+0x695c>
   11aa0:	mov	r3, r0
   11aa4:	mov	r2, r4
   11aa8:	mov	r1, #0
   11aac:	mov	r0, r1
   11ab0:	bl	10fd8 <error@plt>
   11ab4:	mov	r0, #1
   11ab8:	bl	112e0 <__assert_fail@plt+0x134>
   11abc:	ldr	r5, [pc, #2192]	; 12354 <__assert_fail@plt+0x11a8>
   11ac0:	add	r0, r5, #16
   11ac4:	bl	17b1c <__assert_fail@plt+0x6970>
   11ac8:	str	r0, [r5, #32]
   11acc:	cmp	r0, #0
   11ad0:	bne	122f4 <__assert_fail@plt+0x1148>
   11ad4:	bl	11068 <__errno_location@plt>
   11ad8:	ldr	r4, [r0]
   11adc:	mov	r2, #5
   11ae0:	ldr	r1, [pc, #2220]	; 12394 <__assert_fail@plt+0x11e8>
   11ae4:	mov	r0, #0
   11ae8:	bl	10f54 <dcgettext@plt>
   11aec:	mov	r5, r0
   11af0:	ldr	r1, [pc, #2212]	; 1239c <__assert_fail@plt+0x11f0>
   11af4:	mov	r0, #4
   11af8:	bl	178d4 <__assert_fail@plt+0x6728>
   11afc:	mov	r3, r0
   11b00:	mov	r2, r5
   11b04:	mov	r1, r4
   11b08:	mov	r0, #1
   11b0c:	bl	10fd8 <error@plt>
   11b10:	bl	11068 <__errno_location@plt>
   11b14:	mov	r4, r0
   11b18:	ldr	r5, [r0]
   11b1c:	cmp	r5, #0
   11b20:	beq	11b38 <__assert_fail@plt+0x98c>
   11b24:	ldr	r3, [pc, #2088]	; 12354 <__assert_fail@plt+0x11a8>
   11b28:	ldrb	r9, [r3, #1]
   11b2c:	cmp	r9, #0
   11b30:	movne	r9, #0
   11b34:	beq	11b50 <__assert_fail@plt+0x9a4>
   11b38:	ldr	r0, [sp, #20]
   11b3c:	bl	14030 <__assert_fail@plt+0x2e84>
   11b40:	cmp	r0, #0
   11b44:	bne	1227c <__assert_fail@plt+0x10d0>
   11b48:	eor	r0, r9, #1
   11b4c:	bl	11038 <exit@plt>
   11b50:	mov	r2, #5
   11b54:	ldr	r1, [pc, #2116]	; 123a0 <__assert_fail@plt+0x11f4>
   11b58:	mov	r0, #0
   11b5c:	bl	10f54 <dcgettext@plt>
   11b60:	mov	r2, r0
   11b64:	mov	r1, r5
   11b68:	mov	r0, #0
   11b6c:	bl	10fd8 <error@plt>
   11b70:	b	11b38 <__assert_fail@plt+0x98c>
   11b74:	ldr	r3, [r4, #48]	; 0x30
   11b78:	cmp	r3, #0
   11b7c:	bne	11b8c <__assert_fail@plt+0x9e0>
   11b80:	ldr	r3, [r4, #16]
   11b84:	cmp	r3, #0
   11b88:	beq	11bd8 <__assert_fail@plt+0xa2c>
   11b8c:	ldr	r3, [pc, #1984]	; 12354 <__assert_fail@plt+0x11a8>
   11b90:	ldrb	r3, [r3, #1]
   11b94:	cmp	r3, #0
   11b98:	bne	11c04 <__assert_fail@plt+0xa58>
   11b9c:	ldr	r6, [r4, #32]
   11ba0:	mov	r2, #5
   11ba4:	ldr	r1, [pc, #2040]	; 123a4 <__assert_fail@plt+0x11f8>
   11ba8:	mov	r0, #0
   11bac:	bl	10f54 <dcgettext@plt>
   11bb0:	mov	r7, r0
   11bb4:	mov	r1, r5
   11bb8:	mov	r0, #4
   11bbc:	bl	178d4 <__assert_fail@plt+0x6728>
   11bc0:	mov	r3, r0
   11bc4:	mov	r2, r7
   11bc8:	mov	r1, r6
   11bcc:	mov	r0, #0
   11bd0:	bl	10fd8 <error@plt>
   11bd4:	b	11c04 <__assert_fail@plt+0xa58>
   11bd8:	mov	r6, #1
   11bdc:	str	r6, [r4, #16]
   11be0:	mov	r2, r6
   11be4:	mov	r1, r4
   11be8:	ldr	r0, [sp, #20]
   11bec:	bl	14804 <__assert_fail@plt+0x3658>
   11bf0:	b	11c5c <__assert_fail@plt+0xab0>
   11bf4:	ldr	r3, [pc, #1880]	; 12354 <__assert_fail@plt+0x11a8>
   11bf8:	ldrb	r3, [r3, #1]
   11bfc:	cmp	r3, #0
   11c00:	beq	11cb8 <__assert_fail@plt+0xb0c>
   11c04:	mov	r7, #0
   11c08:	mov	r8, r7
   11c0c:	mov	r6, r7
   11c10:	ldr	r3, [fp]
   11c14:	cmp	r3, #2
   11c18:	beq	11c40 <__assert_fail@plt+0xa94>
   11c1c:	ldr	r3, [fp]
   11c20:	cmp	r3, #0
   11c24:	beq	120c4 <__assert_fail@plt+0xf18>
   11c28:	cmp	r6, #2
   11c2c:	bls	11c40 <__assert_fail@plt+0xa94>
   11c30:	ldr	r3, [pc, #1820]	; 12354 <__assert_fail@plt+0x11a8>
   11c34:	ldrb	r3, [r3]
   11c38:	cmp	r3, #0
   11c3c:	bne	121b8 <__assert_fail@plt+0x100c>
   11c40:	ldr	r3, [pc, #1804]	; 12354 <__assert_fail@plt+0x11a8>
   11c44:	ldrb	r3, [r3, #2]
   11c48:	cmp	r3, #0
   11c4c:	beq	12260 <__assert_fail@plt+0x10b4>
   11c50:	cmp	r6, #1
   11c54:	movls	r6, #0
   11c58:	movhi	r6, #1
   11c5c:	and	r9, r9, r6
   11c60:	ldr	r0, [sp, #20]
   11c64:	bl	14194 <__assert_fail@plt+0x2fe8>
   11c68:	subs	r4, r0, #0
   11c6c:	beq	11b10 <__assert_fail@plt+0x964>
   11c70:	ldr	r5, [r4, #28]
   11c74:	ldrh	r3, [r4, #56]	; 0x38
   11c78:	sub	r3, r3, #2
   11c7c:	cmp	r3, #11
   11c80:	ldrls	pc, [pc, r3, lsl #2]
   11c84:	b	11d8c <__assert_fail@plt+0xbe0>
   11c88:	andeq	r1, r1, r8, ror sp
   11c8c:	andeq	r1, r1, ip, lsl #27
   11c90:	andeq	r1, r1, r4, ror #25
   11c94:	andeq	r1, r1, ip, lsl #27
   11c98:	andeq	r2, r1, r4, ror r2
   11c9c:	strdeq	r1, [r1], -r4
   11ca0:	andeq	r1, r1, ip, lsl #27
   11ca4:	andeq	r1, r1, ip, lsl #27
   11ca8:	andeq	r1, r1, r4, ror fp
   11cac:	andeq	r1, r1, ip, lsl #27
   11cb0:	andeq	r1, r1, ip, lsl #27
   11cb4:	andeq	r1, r1, r0, lsr sp
   11cb8:	ldr	r6, [r4, #32]
   11cbc:	mov	r2, r5
   11cc0:	mov	r1, #3
   11cc4:	mov	r0, #0
   11cc8:	bl	179a0 <__assert_fail@plt+0x67f4>
   11ccc:	mov	r3, r0
   11cd0:	ldr	r2, [pc, #1744]	; 123a8 <__assert_fail@plt+0x11fc>
   11cd4:	mov	r1, r6
   11cd8:	mov	r0, #0
   11cdc:	bl	10fd8 <error@plt>
   11ce0:	b	11c04 <__assert_fail@plt+0xa58>
   11ce4:	ldr	r3, [pc, #1640]	; 12354 <__assert_fail@plt+0x11a8>
   11ce8:	ldrb	r3, [r3, #1]
   11cec:	cmp	r3, #0
   11cf0:	bne	11c04 <__assert_fail@plt+0xa58>
   11cf4:	ldr	r6, [r4, #32]
   11cf8:	mov	r2, #5
   11cfc:	ldr	r1, [pc, #1704]	; 123ac <__assert_fail@plt+0x1200>
   11d00:	mov	r0, #0
   11d04:	bl	10f54 <dcgettext@plt>
   11d08:	mov	r7, r0
   11d0c:	mov	r1, r5
   11d10:	mov	r0, #4
   11d14:	bl	178d4 <__assert_fail@plt+0x6728>
   11d18:	mov	r3, r0
   11d1c:	mov	r2, r7
   11d20:	mov	r1, r6
   11d24:	mov	r0, #0
   11d28:	bl	10fd8 <error@plt>
   11d2c:	b	11c04 <__assert_fail@plt+0xa58>
   11d30:	ldr	r3, [pc, #1564]	; 12354 <__assert_fail@plt+0x11a8>
   11d34:	ldrb	r3, [r3, #1]
   11d38:	cmp	r3, #0
   11d3c:	bne	11c04 <__assert_fail@plt+0xa58>
   11d40:	mov	r2, #5
   11d44:	ldr	r1, [pc, #1636]	; 123b0 <__assert_fail@plt+0x1204>
   11d48:	mov	r0, #0
   11d4c:	bl	10f54 <dcgettext@plt>
   11d50:	mov	r6, r0
   11d54:	mov	r1, r5
   11d58:	mov	r0, #4
   11d5c:	bl	178d4 <__assert_fail@plt+0x6728>
   11d60:	mov	r3, r0
   11d64:	mov	r2, r6
   11d68:	mov	r1, #0
   11d6c:	mov	r0, r1
   11d70:	bl	10fd8 <error@plt>
   11d74:	b	11c04 <__assert_fail@plt+0xa58>
   11d78:	mov	r1, r4
   11d7c:	ldr	r0, [sp, #20]
   11d80:	bl	18758 <__assert_fail@plt+0x75ac>
   11d84:	cmp	r0, #0
   11d88:	bne	11e98 <__assert_fail@plt+0xcec>
   11d8c:	ldr	r3, [pc, #1472]	; 12354 <__assert_fail@plt+0x11a8>
   11d90:	ldr	ip, [r3, #32]
   11d94:	cmp	ip, #0
   11d98:	beq	11db0 <__assert_fail@plt+0xc04>
   11d9c:	ldrd	r0, [r4, #160]	; 0xa0
   11da0:	ldrd	r2, [ip]
   11da4:	cmp	r1, r3
   11da8:	cmpeq	r0, r2
   11dac:	beq	11ed8 <__assert_fail@plt+0xd2c>
   11db0:	ldr	r8, [r4, #80]	; 0x50
   11db4:	and	r1, r8, #61440	; 0xf000
   11db8:	cmp	r1, #40960	; 0xa000
   11dbc:	beq	12334 <__assert_fail@plt+0x1188>
   11dc0:	ldr	sl, [r4, #24]
   11dc4:	ldr	r2, [pc, #1416]	; 12354 <__assert_fail@plt+0x11a8>
   11dc8:	mov	r6, #0
   11dcc:	str	r6, [sp]
   11dd0:	ldr	r3, [r2, #4]
   11dd4:	ldr	r2, [r2, #8]
   11dd8:	cmp	r1, #16384	; 0x4000
   11ddc:	movne	r1, #0
   11de0:	moveq	r1, #1
   11de4:	mov	r0, r8
   11de8:	bl	15df0 <__assert_fail@plt+0x4c44>
   11dec:	mov	r7, r0
   11df0:	mov	r3, r6
   11df4:	mov	r2, r0
   11df8:	mov	r1, sl
   11dfc:	ldr	r0, [sp, #20]
   11e00:	ldr	r0, [r0, #32]
   11e04:	bl	12500 <__assert_fail@plt+0x1354>
   11e08:	cmp	r0, r6
   11e0c:	bne	11fc8 <__assert_fail@plt+0xe1c>
   11e10:	ldr	r3, [fp]
   11e14:	cmp	r3, #2
   11e18:	moveq	r6, #4
   11e1c:	beq	11c30 <__assert_fail@plt+0xa84>
   11e20:	tst	r7, #3584	; 0xe00
   11e24:	moveq	r3, r7
   11e28:	bne	12020 <__assert_fail@plt+0xe74>
   11e2c:	eor	r3, r3, r8
   11e30:	lsls	r3, r3, #20
   11e34:	beq	12094 <__assert_fail@plt+0xee8>
   11e38:	mov	r1, r5
   11e3c:	mov	r0, #4
   11e40:	bl	178d4 <__assert_fail@plt+0x6728>
   11e44:	str	r0, [sp, #24]
   11e48:	mov	r6, #4
   11e4c:	lsl	r3, r7, #20
   11e50:	lsr	r3, r3, #20
   11e54:	str	r3, [sp, #36]	; 0x24
   11e58:	add	r1, sp, #52	; 0x34
   11e5c:	mov	r0, r7
   11e60:	bl	12628 <__assert_fail@plt+0x147c>
   11e64:	mov	sl, #0
   11e68:	strb	sl, [sp, #62]	; 0x3e
   11e6c:	add	r1, sp, #64	; 0x40
   11e70:	mov	r0, r8
   11e74:	bl	12628 <__assert_fail@plt+0x147c>
   11e78:	strb	sl, [sp, #74]	; 0x4a
   11e7c:	cmp	r6, #3
   11e80:	beq	12188 <__assert_fail@plt+0xfdc>
   11e84:	cmp	r6, #4
   11e88:	beq	12130 <__assert_fail@plt+0xf84>
   11e8c:	cmp	r6, #1
   11e90:	beq	12174 <__assert_fail@plt+0xfc8>
   11e94:	bl	1117c <abort@plt>
   11e98:	mov	r2, #5
   11e9c:	ldr	r1, [pc, #1296]	; 123b4 <__assert_fail@plt+0x1208>
   11ea0:	mov	r0, #0
   11ea4:	bl	10f54 <dcgettext@plt>
   11ea8:	mov	r4, r0
   11eac:	mov	r2, r5
   11eb0:	mov	r1, #3
   11eb4:	mov	r0, #0
   11eb8:	bl	179a0 <__assert_fail@plt+0x67f4>
   11ebc:	mov	r3, r0
   11ec0:	mov	r2, r4
   11ec4:	mov	r1, #0
   11ec8:	mov	r0, r1
   11ecc:	bl	10fd8 <error@plt>
   11ed0:	mov	r6, #0
   11ed4:	b	11c5c <__assert_fail@plt+0xab0>
   11ed8:	ldrd	r2, [r4, #64]	; 0x40
   11edc:	ldrd	r0, [ip, #8]
   11ee0:	cmp	r3, r1
   11ee4:	cmpeq	r2, r0
   11ee8:	bne	11db0 <__assert_fail@plt+0xc04>
   11eec:	ldr	r1, [pc, #1192]	; 1239c <__assert_fail@plt+0x11f0>
   11ef0:	mov	r0, r5
   11ef4:	bl	10ee8 <strcmp@plt>
   11ef8:	cmp	r0, #0
   11efc:	bne	11f74 <__assert_fail@plt+0xdc8>
   11f00:	mov	r2, #5
   11f04:	ldr	r1, [pc, #1196]	; 123b8 <__assert_fail@plt+0x120c>
   11f08:	bl	10f54 <dcgettext@plt>
   11f0c:	mov	r6, r0
   11f10:	mov	r1, r5
   11f14:	mov	r0, #4
   11f18:	bl	178d4 <__assert_fail@plt+0x6728>
   11f1c:	mov	r3, r0
   11f20:	mov	r2, r6
   11f24:	mov	r1, #0
   11f28:	mov	r0, r1
   11f2c:	bl	10fd8 <error@plt>
   11f30:	mov	r2, #5
   11f34:	ldr	r1, [pc, #1152]	; 123bc <__assert_fail@plt+0x1210>
   11f38:	mov	r0, #0
   11f3c:	bl	10f54 <dcgettext@plt>
   11f40:	mov	r2, r0
   11f44:	mov	r1, #0
   11f48:	mov	r0, r1
   11f4c:	bl	10fd8 <error@plt>
   11f50:	mov	r2, #4
   11f54:	mov	r1, r4
   11f58:	ldr	r4, [sp, #20]
   11f5c:	mov	r0, r4
   11f60:	bl	14804 <__assert_fail@plt+0x3658>
   11f64:	mov	r0, r4
   11f68:	bl	14194 <__assert_fail@plt+0x2fe8>
   11f6c:	mov	r6, #0
   11f70:	b	11c5c <__assert_fail@plt+0xab0>
   11f74:	mov	r2, #5
   11f78:	ldr	r1, [pc, #1088]	; 123c0 <__assert_fail@plt+0x1214>
   11f7c:	mov	r0, #0
   11f80:	bl	10f54 <dcgettext@plt>
   11f84:	mov	r6, r0
   11f88:	mov	r2, r5
   11f8c:	mov	r1, #4
   11f90:	mov	r0, #0
   11f94:	bl	17868 <__assert_fail@plt+0x66bc>
   11f98:	mov	r5, r0
   11f9c:	ldr	r2, [pc, #1016]	; 1239c <__assert_fail@plt+0x11f0>
   11fa0:	mov	r1, #4
   11fa4:	mov	r0, #1
   11fa8:	bl	17868 <__assert_fail@plt+0x66bc>
   11fac:	str	r0, [sp]
   11fb0:	mov	r3, r5
   11fb4:	mov	r2, r6
   11fb8:	mov	r1, #0
   11fbc:	mov	r0, r1
   11fc0:	bl	10fd8 <error@plt>
   11fc4:	b	11f30 <__assert_fail@plt+0xd84>
   11fc8:	ldr	r3, [pc, #900]	; 12354 <__assert_fail@plt+0x11a8>
   11fcc:	ldrb	r3, [r3, #1]
   11fd0:	cmp	r3, #0
   11fd4:	beq	11fe0 <__assert_fail@plt+0xe34>
   11fd8:	mov	r6, #1
   11fdc:	b	11c10 <__assert_fail@plt+0xa64>
   11fe0:	bl	11068 <__errno_location@plt>
   11fe4:	ldr	r6, [r0]
   11fe8:	mov	r2, #5
   11fec:	ldr	r1, [pc, #976]	; 123c4 <__assert_fail@plt+0x1218>
   11ff0:	mov	r0, #0
   11ff4:	bl	10f54 <dcgettext@plt>
   11ff8:	mov	sl, r0
   11ffc:	mov	r1, r5
   12000:	mov	r0, #4
   12004:	bl	178d4 <__assert_fail@plt+0x6728>
   12008:	mov	r3, r0
   1200c:	mov	r2, sl
   12010:	mov	r1, r6
   12014:	mov	r0, #0
   12018:	bl	10fd8 <error@plt>
   1201c:	b	11fd8 <__assert_fail@plt+0xe2c>
   12020:	mov	r3, #0
   12024:	str	r3, [sp]
   12028:	add	r3, sp, #64	; 0x40
   1202c:	mov	r2, sl
   12030:	ldr	r1, [sp, #20]
   12034:	ldr	r1, [r1, #32]
   12038:	mov	r0, #3
   1203c:	bl	10f78 <__fxstatat64@plt>
   12040:	cmp	r0, #0
   12044:	beq	120bc <__assert_fail@plt+0xf10>
   12048:	ldr	r3, [pc, #772]	; 12354 <__assert_fail@plt+0x11a8>
   1204c:	ldrb	r3, [r3, #1]
   12050:	cmp	r3, #0
   12054:	bne	12094 <__assert_fail@plt+0xee8>
   12058:	bl	11068 <__errno_location@plt>
   1205c:	ldr	r6, [r0]
   12060:	mov	r2, #5
   12064:	ldr	r1, [pc, #860]	; 123c8 <__assert_fail@plt+0x121c>
   12068:	mov	r0, #0
   1206c:	bl	10f54 <dcgettext@plt>
   12070:	mov	sl, r0
   12074:	mov	r1, r5
   12078:	mov	r0, #4
   1207c:	bl	178d4 <__assert_fail@plt+0x6728>
   12080:	mov	r3, r0
   12084:	mov	r2, sl
   12088:	mov	r1, r6
   1208c:	mov	r0, #0
   12090:	bl	10fd8 <error@plt>
   12094:	ldr	r3, [fp]
   12098:	cmp	r3, #0
   1209c:	movne	r6, #3
   120a0:	bne	11c28 <__assert_fail@plt+0xa7c>
   120a4:	mov	r1, r5
   120a8:	mov	r0, #4
   120ac:	bl	178d4 <__assert_fail@plt+0x6728>
   120b0:	str	r0, [sp, #24]
   120b4:	mov	r6, #3
   120b8:	b	11e4c <__assert_fail@plt+0xca0>
   120bc:	ldr	r3, [sp, #80]	; 0x50
   120c0:	b	11e2c <__assert_fail@plt+0xc80>
   120c4:	mov	r1, r5
   120c8:	mov	r0, #4
   120cc:	bl	178d4 <__assert_fail@plt+0x6728>
   120d0:	mov	sl, r0
   120d4:	str	r0, [sp, #24]
   120d8:	cmp	r6, #0
   120dc:	beq	1210c <__assert_fail@plt+0xf60>
   120e0:	cmp	r6, #2
   120e4:	bne	11e4c <__assert_fail@plt+0xca0>
   120e8:	mov	r2, #5
   120ec:	ldr	r1, [pc, #728]	; 123cc <__assert_fail@plt+0x1220>
   120f0:	mov	r0, #0
   120f4:	bl	10f54 <dcgettext@plt>
   120f8:	mov	r2, sl
   120fc:	mov	r1, r0
   12100:	mov	r0, #1
   12104:	bl	11098 <__printf_chk@plt>
   12108:	b	11c28 <__assert_fail@plt+0xa7c>
   1210c:	mov	r2, #5
   12110:	ldr	r1, [pc, #696]	; 123d0 <__assert_fail@plt+0x1224>
   12114:	mov	r0, #0
   12118:	bl	10f54 <dcgettext@plt>
   1211c:	ldr	r2, [sp, #24]
   12120:	mov	r1, r0
   12124:	mov	r0, #1
   12128:	bl	11098 <__printf_chk@plt>
   1212c:	b	11c28 <__assert_fail@plt+0xa7c>
   12130:	mov	r2, #5
   12134:	ldr	r1, [pc, #664]	; 123d4 <__assert_fail@plt+0x1228>
   12138:	mov	r0, #0
   1213c:	bl	10f54 <dcgettext@plt>
   12140:	lsl	r3, r8, #20
   12144:	ldr	r2, [sp, #28]
   12148:	str	r2, [sp, #8]
   1214c:	ldr	r2, [sp, #36]	; 0x24
   12150:	str	r2, [sp, #4]
   12154:	ldr	r2, [sp, #32]
   12158:	str	r2, [sp]
   1215c:	lsr	r3, r3, #20
   12160:	ldr	r2, [sp, #24]
   12164:	mov	r1, r0
   12168:	mov	r0, #1
   1216c:	bl	11098 <__printf_chk@plt>
   12170:	b	11c28 <__assert_fail@plt+0xa7c>
   12174:	mov	r2, #5
   12178:	ldr	r1, [pc, #600]	; 123d8 <__assert_fail@plt+0x122c>
   1217c:	mov	r0, #0
   12180:	bl	10f54 <dcgettext@plt>
   12184:	b	12140 <__assert_fail@plt+0xf94>
   12188:	mov	r2, #5
   1218c:	ldr	r1, [pc, #584]	; 123dc <__assert_fail@plt+0x1230>
   12190:	mov	r0, #0
   12194:	bl	10f54 <dcgettext@plt>
   12198:	ldr	r3, [sp, #28]
   1219c:	str	r3, [sp]
   121a0:	ldr	r3, [sp, #36]	; 0x24
   121a4:	ldr	r2, [sp, #24]
   121a8:	mov	r1, r0
   121ac:	mov	r0, #1
   121b0:	bl	11098 <__printf_chk@plt>
   121b4:	b	11c28 <__assert_fail@plt+0xa7c>
   121b8:	and	r1, r8, #61440	; 0xf000
   121bc:	mov	r2, #0
   121c0:	str	r2, [sp]
   121c4:	ldr	r3, [pc, #392]	; 12354 <__assert_fail@plt+0x11a8>
   121c8:	ldr	r3, [r3, #4]
   121cc:	cmp	r1, #16384	; 0x4000
   121d0:	movne	r1, #0
   121d4:	moveq	r1, #1
   121d8:	mov	r0, r8
   121dc:	bl	15df0 <__assert_fail@plt+0x4c44>
   121e0:	mov	r8, r0
   121e4:	bics	r3, r7, r0
   121e8:	beq	11c40 <__assert_fail@plt+0xa94>
   121ec:	add	r1, sp, #52	; 0x34
   121f0:	mov	r0, r7
   121f4:	bl	12628 <__assert_fail@plt+0x147c>
   121f8:	add	r1, sp, #64	; 0x40
   121fc:	mov	r0, r8
   12200:	bl	12628 <__assert_fail@plt+0x147c>
   12204:	mov	r6, #0
   12208:	strb	r6, [sp, #74]	; 0x4a
   1220c:	strb	r6, [sp, #62]	; 0x3e
   12210:	mov	r2, #5
   12214:	ldr	r1, [pc, #452]	; 123e0 <__assert_fail@plt+0x1234>
   12218:	mov	r0, r6
   1221c:	bl	10f54 <dcgettext@plt>
   12220:	mov	r7, r0
   12224:	mov	r2, r5
   12228:	mov	r1, #3
   1222c:	mov	r0, r6
   12230:	bl	179a0 <__assert_fail@plt+0x67f4>
   12234:	ldr	r3, [sp, #32]
   12238:	str	r3, [sp, #4]
   1223c:	ldr	r3, [sp, #28]
   12240:	str	r3, [sp]
   12244:	mov	r3, r0
   12248:	mov	r2, r7
   1224c:	mov	r1, r6
   12250:	mov	r0, r6
   12254:	bl	10fd8 <error@plt>
   12258:	mov	r6, #1
   1225c:	b	11c40 <__assert_fail@plt+0xa94>
   12260:	mov	r2, #4
   12264:	mov	r1, r4
   12268:	ldr	r0, [sp, #20]
   1226c:	bl	14804 <__assert_fail@plt+0x3658>
   12270:	b	11c50 <__assert_fail@plt+0xaa4>
   12274:	mov	r6, #1
   12278:	b	11c5c <__assert_fail@plt+0xab0>
   1227c:	ldr	r4, [r4]
   12280:	mov	r2, #5
   12284:	ldr	r1, [pc, #344]	; 123e4 <__assert_fail@plt+0x1238>
   12288:	mov	r0, #0
   1228c:	bl	10f54 <dcgettext@plt>
   12290:	mov	r2, r0
   12294:	mov	r1, r4
   12298:	mov	r0, #0
   1229c:	bl	10fd8 <error@plt>
   122a0:	mov	r9, #0
   122a4:	b	11b48 <__assert_fail@plt+0x99c>
   122a8:	ldr	r3, [pc, #176]	; 12360 <__assert_fail@plt+0x11b4>
   122ac:	ldr	r3, [r3]
   122b0:	ldr	r2, [sp, #20]
   122b4:	cmp	r2, r3
   122b8:	ble	1198c <__assert_fail@plt+0x7e0>
   122bc:	ldr	r0, [sp, #32]
   122c0:	bl	15d8c <__assert_fail@plt+0x4be0>
   122c4:	ldr	r3, [pc, #136]	; 12354 <__assert_fail@plt+0x11a8>
   122c8:	str	r0, [r3, #4]
   122cc:	cmp	r0, #0
   122d0:	beq	11a20 <__assert_fail@plt+0x874>
   122d4:	ldr	r3, [pc, #120]	; 12354 <__assert_fail@plt+0x11a8>
   122d8:	ldrb	r3, [r3, #2]
   122dc:	ldr	r2, [sp, #24]
   122e0:	tst	r2, r3
   122e4:	bne	11abc <__assert_fail@plt+0x910>
   122e8:	mov	r2, #0
   122ec:	ldr	r3, [pc, #96]	; 12354 <__assert_fail@plt+0x11a8>
   122f0:	str	r2, [r3, #32]
   122f4:	ldr	r3, [pc, #100]	; 12360 <__assert_fail@plt+0x11b4>
   122f8:	ldr	r0, [r3]
   122fc:	mov	r2, #0
   12300:	ldr	r1, [pc, #224]	; 123e8 <__assert_fail@plt+0x123c>
   12304:	add	r0, r4, r0, lsl #2
   12308:	bl	18710 <__assert_fail@plt+0x7564>
   1230c:	str	r0, [sp, #20]
   12310:	mov	r9, #1
   12314:	ldr	fp, [pc, #64]	; 1235c <__assert_fail@plt+0x11b0>
   12318:	add	r3, sp, #64	; 0x40
   1231c:	add	r3, r3, r9
   12320:	str	r3, [sp, #32]
   12324:	add	r3, sp, #52	; 0x34
   12328:	add	r3, r3, r9
   1232c:	str	r3, [sp, #28]
   12330:	b	11c60 <__assert_fail@plt+0xab4>
   12334:	mov	r7, #0
   12338:	mov	r8, r7
   1233c:	mov	r6, #2
   12340:	b	11c10 <__assert_fail@plt+0xa64>
   12344:	andeq	r9, r1, r4, lsr #17
   12348:	andeq	r9, r1, r4, ror fp
   1234c:	andeq	r9, r1, ip, lsl ip
   12350:	andeq	r2, r1, ip, lsl #8
   12354:	andeq	fp, r2, r8, lsl #3
   12358:	andeq	r9, r1, r4, asr ip
   1235c:	andeq	fp, r2, r8, lsl r1
   12360:	andeq	fp, r2, r0, ror r1
   12364:	ldrdeq	r9, [r1], -r4
   12368:	andeq	r0, r0, r1, lsl #2
   1236c:	andeq	fp, r2, r0, lsl #3
   12370:	andeq	r9, r1, r4, lsr ip
   12374:	andeq	r9, r1, r4, asr #24
   12378:	andeq	fp, r2, ip, lsl r1
   1237c:	andeq	r9, r1, r0, ror fp
   12380:	andeq	r9, r1, r4, lsl #15
   12384:	andeq	fp, r2, ip, ror r1
   12388:	muleq	r1, r8, ip
   1238c:	andeq	r9, r1, r4, asr #25
   12390:	ldrdeq	r9, [r1], -r4
   12394:	strdeq	r9, [r1], -r0
   12398:	andeq	r9, r1, r0, lsl sp
   1239c:	andeq	r9, r1, r4, lsr #26
   123a0:	andeq	r9, r1, r8, lsr #26
   123a4:	andeq	r9, r1, r8, lsr sp
   123a8:	andeq	sl, r1, r0, asr #2
   123ac:	andeq	r9, r1, ip, asr #26
   123b0:	andeq	r9, r1, r8, ror #26
   123b4:	muleq	r1, r0, sp
   123b8:	andeq	r9, r1, ip, asr #28
   123bc:			; <UNDEFINED> instruction: 0x00019eb8
   123c0:	andeq	r9, r1, ip, ror lr
   123c4:	andeq	r9, r1, ip, ror #29
   123c8:	andeq	r9, r1, r8, lsl #30
   123cc:	andeq	r9, r1, r8, lsr #30
   123d0:	andeq	r9, r1, r0, ror #30
   123d4:	andeq	r9, r1, ip, ror pc
   123d8:			; <UNDEFINED> instruction: 0x00019fb0
   123dc:	andeq	r9, r1, ip, ror #31
   123e0:	andeq	sl, r1, r0, lsl r0
   123e4:	andeq	sl, r1, r4, lsr r0
   123e8:	andeq	r0, r0, r1, lsl r4
   123ec:	ldr	r3, [pc, #4]	; 123f8 <__assert_fail@plt+0x124c>
   123f0:	str	r0, [r3]
   123f4:	bx	lr
   123f8:	andeq	fp, r2, ip, lsr #3
   123fc:	ldr	r3, [pc, #4]	; 12408 <__assert_fail@plt+0x125c>
   12400:	strb	r0, [r3, #4]
   12404:	bx	lr
   12408:	andeq	fp, r2, ip, lsr #3
   1240c:	push	{r4, r5, r6, lr}
   12410:	sub	sp, sp, #8
   12414:	ldr	r3, [pc, #200]	; 124e4 <__assert_fail@plt+0x1338>
   12418:	ldr	r0, [r3]
   1241c:	bl	18860 <__assert_fail@plt+0x76b4>
   12420:	cmp	r0, #0
   12424:	beq	12448 <__assert_fail@plt+0x129c>
   12428:	ldr	r3, [pc, #184]	; 124e8 <__assert_fail@plt+0x133c>
   1242c:	ldrb	r3, [r3, #4]
   12430:	cmp	r3, #0
   12434:	beq	12464 <__assert_fail@plt+0x12b8>
   12438:	bl	11068 <__errno_location@plt>
   1243c:	ldr	r3, [r0]
   12440:	cmp	r3, #32
   12444:	bne	12464 <__assert_fail@plt+0x12b8>
   12448:	ldr	r3, [pc, #156]	; 124ec <__assert_fail@plt+0x1340>
   1244c:	ldr	r0, [r3]
   12450:	bl	18860 <__assert_fail@plt+0x76b4>
   12454:	cmp	r0, #0
   12458:	bne	124d8 <__assert_fail@plt+0x132c>
   1245c:	add	sp, sp, #8
   12460:	pop	{r4, r5, r6, pc}
   12464:	mov	r2, #5
   12468:	ldr	r1, [pc, #128]	; 124f0 <__assert_fail@plt+0x1344>
   1246c:	mov	r0, #0
   12470:	bl	10f54 <dcgettext@plt>
   12474:	mov	r4, r0
   12478:	ldr	r3, [pc, #104]	; 124e8 <__assert_fail@plt+0x133c>
   1247c:	ldr	r5, [r3]
   12480:	cmp	r5, #0
   12484:	beq	124bc <__assert_fail@plt+0x1310>
   12488:	bl	11068 <__errno_location@plt>
   1248c:	ldr	r6, [r0]
   12490:	mov	r0, r5
   12494:	bl	17980 <__assert_fail@plt+0x67d4>
   12498:	str	r4, [sp]
   1249c:	mov	r3, r0
   124a0:	ldr	r2, [pc, #76]	; 124f4 <__assert_fail@plt+0x1348>
   124a4:	mov	r1, r6
   124a8:	mov	r0, #0
   124ac:	bl	10fd8 <error@plt>
   124b0:	ldr	r3, [pc, #64]	; 124f8 <__assert_fail@plt+0x134c>
   124b4:	ldr	r0, [r3]
   124b8:	bl	10f18 <_exit@plt>
   124bc:	bl	11068 <__errno_location@plt>
   124c0:	mov	r3, r4
   124c4:	ldr	r2, [pc, #48]	; 124fc <__assert_fail@plt+0x1350>
   124c8:	ldr	r1, [r0]
   124cc:	mov	r0, #0
   124d0:	bl	10fd8 <error@plt>
   124d4:	b	124b0 <__assert_fail@plt+0x1304>
   124d8:	ldr	r3, [pc, #24]	; 124f8 <__assert_fail@plt+0x134c>
   124dc:	ldr	r0, [r3]
   124e0:	bl	10f18 <_exit@plt>
   124e4:	andeq	fp, r2, ip, ror r1
   124e8:	andeq	fp, r2, ip, lsr #3
   124ec:	andeq	fp, r2, r8, ror r1
   124f0:	andeq	sl, r1, r0, lsr r1
   124f4:	andeq	sl, r1, ip, lsr r1
   124f8:	andeq	fp, r2, r0, lsr #2
   124fc:	andeq	sl, r1, r0, asr #2
   12500:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12504:	sub	sp, sp, #148	; 0x94
   12508:	mov	r6, r0
   1250c:	mov	r7, r1
   12510:	mov	r8, r2
   12514:	mov	r4, r3
   12518:	cmp	r3, #256	; 0x100
   1251c:	beq	12544 <__assert_fail@plt+0x1398>
   12520:	mov	r3, r4
   12524:	mov	r2, r8
   12528:	mov	r1, r7
   1252c:	mov	r0, r6
   12530:	bl	1105c <fchmodat@plt>
   12534:	mov	r5, r0
   12538:	mov	r0, r5
   1253c:	add	sp, sp, #148	; 0x94
   12540:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12544:	mov	r2, #2654208	; 0x288000
   12548:	bl	11050 <openat64@plt>
   1254c:	subs	r5, r0, #0
   12550:	blt	12538 <__assert_fail@plt+0x138c>
   12554:	mov	r3, #4096	; 0x1000
   12558:	str	r3, [sp]
   1255c:	add	r3, sp, #40	; 0x28
   12560:	ldr	r2, [pc, #184]	; 12620 <__assert_fail@plt+0x1474>
   12564:	mov	r1, r5
   12568:	mov	r0, #3
   1256c:	bl	10f78 <__fxstatat64@plt>
   12570:	subs	r4, r0, #0
   12574:	bne	125e4 <__assert_fail@plt+0x1438>
   12578:	ldr	r3, [sp, #56]	; 0x38
   1257c:	and	r3, r3, #61440	; 0xf000
   12580:	cmp	r3, #40960	; 0xa000
   12584:	beq	12604 <__assert_fail@plt+0x1458>
   12588:	str	r5, [sp]
   1258c:	ldr	r3, [pc, #144]	; 12624 <__assert_fail@plt+0x1478>
   12590:	mov	r2, #26
   12594:	mov	r1, #1
   12598:	add	r0, sp, #12
   1259c:	bl	11074 <__sprintf_chk@plt>
   125a0:	mov	r1, r8
   125a4:	add	r0, sp, #12
   125a8:	bl	11158 <chmod@plt>
   125ac:	mov	r9, r0
   125b0:	bl	11068 <__errno_location@plt>
   125b4:	mov	sl, r0
   125b8:	ldr	fp, [r0]
   125bc:	mov	r0, r5
   125c0:	bl	11188 <close@plt>
   125c4:	cmp	r9, #0
   125c8:	moveq	r5, r9
   125cc:	beq	12538 <__assert_fail@plt+0x138c>
   125d0:	cmp	fp, #2
   125d4:	beq	12520 <__assert_fail@plt+0x1374>
   125d8:	str	fp, [sl]
   125dc:	mov	r5, r9
   125e0:	b	12538 <__assert_fail@plt+0x138c>
   125e4:	bl	11068 <__errno_location@plt>
   125e8:	mov	r4, r0
   125ec:	ldr	r6, [r0]
   125f0:	mov	r0, r5
   125f4:	bl	11188 <close@plt>
   125f8:	str	r6, [r4]
   125fc:	mvn	r5, #0
   12600:	b	12538 <__assert_fail@plt+0x138c>
   12604:	mov	r0, r5
   12608:	bl	11188 <close@plt>
   1260c:	bl	11068 <__errno_location@plt>
   12610:	mov	r3, #95	; 0x5f
   12614:	str	r3, [r0]
   12618:	mvn	r5, #0
   1261c:	b	12538 <__assert_fail@plt+0x138c>
   12620:	andeq	r9, r1, r4, lsr #17
   12624:	andeq	sl, r1, r4, asr #2
   12628:	and	r3, r0, #61440	; 0xf000
   1262c:	cmp	r3, #32768	; 0x8000
   12630:	moveq	r3, #45	; 0x2d
   12634:	beq	12680 <__assert_fail@plt+0x14d4>
   12638:	cmp	r3, #16384	; 0x4000
   1263c:	moveq	r3, #100	; 0x64
   12640:	beq	12680 <__assert_fail@plt+0x14d4>
   12644:	cmp	r3, #24576	; 0x6000
   12648:	moveq	r3, #98	; 0x62
   1264c:	beq	12680 <__assert_fail@plt+0x14d4>
   12650:	cmp	r3, #8192	; 0x2000
   12654:	moveq	r3, #99	; 0x63
   12658:	beq	12680 <__assert_fail@plt+0x14d4>
   1265c:	cmp	r3, #40960	; 0xa000
   12660:	moveq	r3, #108	; 0x6c
   12664:	beq	12680 <__assert_fail@plt+0x14d4>
   12668:	cmp	r3, #4096	; 0x1000
   1266c:	moveq	r3, #112	; 0x70
   12670:	beq	12680 <__assert_fail@plt+0x14d4>
   12674:	cmp	r3, #49152	; 0xc000
   12678:	moveq	r3, #115	; 0x73
   1267c:	movne	r3, #63	; 0x3f
   12680:	strb	r3, [r1]
   12684:	and	r3, r0, #256	; 0x100
   12688:	cmp	r3, #0
   1268c:	movne	r3, #114	; 0x72
   12690:	moveq	r3, #45	; 0x2d
   12694:	strb	r3, [r1, #1]
   12698:	and	r3, r0, #128	; 0x80
   1269c:	cmp	r3, #0
   126a0:	movne	r3, #119	; 0x77
   126a4:	moveq	r3, #45	; 0x2d
   126a8:	strb	r3, [r1, #2]
   126ac:	tst	r0, #2048	; 0x800
   126b0:	beq	12764 <__assert_fail@plt+0x15b8>
   126b4:	and	r3, r0, #64	; 0x40
   126b8:	cmp	r3, #0
   126bc:	movne	r3, #115	; 0x73
   126c0:	moveq	r3, #83	; 0x53
   126c4:	strb	r3, [r1, #3]
   126c8:	and	r3, r0, #32
   126cc:	cmp	r3, #0
   126d0:	movne	r3, #114	; 0x72
   126d4:	moveq	r3, #45	; 0x2d
   126d8:	strb	r3, [r1, #4]
   126dc:	and	r3, r0, #16
   126e0:	cmp	r3, #0
   126e4:	movne	r3, #119	; 0x77
   126e8:	moveq	r3, #45	; 0x2d
   126ec:	strb	r3, [r1, #5]
   126f0:	tst	r0, #1024	; 0x400
   126f4:	beq	12778 <__assert_fail@plt+0x15cc>
   126f8:	and	r3, r0, #8
   126fc:	cmp	r3, #0
   12700:	movne	r3, #115	; 0x73
   12704:	moveq	r3, #83	; 0x53
   12708:	strb	r3, [r1, #6]
   1270c:	and	r3, r0, #4
   12710:	cmp	r3, #0
   12714:	movne	r3, #114	; 0x72
   12718:	moveq	r3, #45	; 0x2d
   1271c:	strb	r3, [r1, #7]
   12720:	and	r3, r0, #2
   12724:	cmp	r3, #0
   12728:	movne	r3, #119	; 0x77
   1272c:	moveq	r3, #45	; 0x2d
   12730:	strb	r3, [r1, #8]
   12734:	tst	r0, #512	; 0x200
   12738:	beq	1278c <__assert_fail@plt+0x15e0>
   1273c:	and	r0, r0, #1
   12740:	cmp	r0, #0
   12744:	movne	r0, #116	; 0x74
   12748:	moveq	r0, #84	; 0x54
   1274c:	strb	r0, [r1, #9]
   12750:	mov	r3, #32
   12754:	strb	r3, [r1, #10]
   12758:	mov	r3, #0
   1275c:	strb	r3, [r1, #11]
   12760:	bx	lr
   12764:	and	r3, r0, #64	; 0x40
   12768:	cmp	r3, #0
   1276c:	movne	r3, #120	; 0x78
   12770:	moveq	r3, #45	; 0x2d
   12774:	b	126c4 <__assert_fail@plt+0x1518>
   12778:	and	r3, r0, #8
   1277c:	cmp	r3, #0
   12780:	movne	r3, #120	; 0x78
   12784:	moveq	r3, #45	; 0x2d
   12788:	b	12708 <__assert_fail@plt+0x155c>
   1278c:	and	r0, r0, #1
   12790:	cmp	r0, #0
   12794:	movne	r0, #120	; 0x78
   12798:	moveq	r0, #45	; 0x2d
   1279c:	b	1274c <__assert_fail@plt+0x15a0>
   127a0:	push	{r4, lr}
   127a4:	ldr	r0, [r0, #16]
   127a8:	bl	12628 <__assert_fail@plt+0x147c>
   127ac:	pop	{r4, pc}
   127b0:	push	{r4, r5}
   127b4:	ldrd	r4, [r0, #8]
   127b8:	ldrd	r2, [r1, #8]
   127bc:	cmp	r5, r3
   127c0:	cmpeq	r4, r2
   127c4:	movne	r0, #0
   127c8:	beq	127d4 <__assert_fail@plt+0x1628>
   127cc:	pop	{r4, r5}
   127d0:	bx	lr
   127d4:	ldrd	r4, [r0]
   127d8:	ldrd	r2, [r1]
   127dc:	cmp	r5, r3
   127e0:	cmpeq	r4, r2
   127e4:	moveq	r0, #1
   127e8:	movne	r0, #0
   127ec:	b	127cc <__assert_fail@plt+0x1620>
   127f0:	push	{r4, lr}
   127f4:	mov	r2, r1
   127f8:	mov	r3, #0
   127fc:	ldrd	r0, [r0, #8]
   12800:	bl	194a0 <__assert_fail@plt+0x82f4>
   12804:	mov	r0, r2
   12808:	pop	{r4, pc}
   1280c:	push	{r4, lr}
   12810:	mov	r2, r1
   12814:	mov	r3, #0
   12818:	ldrd	r0, [r0]
   1281c:	bl	194a0 <__assert_fail@plt+0x82f4>
   12820:	mov	r0, r2
   12824:	pop	{r4, pc}
   12828:	push	{r4, r5}
   1282c:	ldrd	r4, [r0]
   12830:	ldrd	r2, [r1]
   12834:	cmp	r5, r3
   12838:	cmpeq	r4, r2
   1283c:	moveq	r0, #1
   12840:	movne	r0, #0
   12844:	pop	{r4, r5}
   12848:	bx	lr
   1284c:	push	{r4, r5}
   12850:	ldr	r3, [r0]
   12854:	ldrd	r4, [r3, #160]	; 0xa0
   12858:	ldr	r3, [r1]
   1285c:	ldrd	r2, [r3, #160]	; 0xa0
   12860:	cmp	r5, r3
   12864:	cmpeq	r4, r2
   12868:	movhi	r0, #1
   1286c:	movls	r0, #0
   12870:	movcc	r3, #1
   12874:	movcs	r3, #0
   12878:	sub	r0, r0, r3
   1287c:	pop	{r4, r5}
   12880:	bx	lr
   12884:	push	{r4, r5, r6, lr}
   12888:	mov	r4, r0
   1288c:	ldr	r3, [r0, #36]	; 0x24
   12890:	add	r1, r1, #256	; 0x100
   12894:	adds	r1, r1, r3
   12898:	bcs	128bc <__assert_fail@plt+0x1710>
   1289c:	str	r1, [r0, #36]	; 0x24
   128a0:	ldr	r0, [r0, #24]
   128a4:	bl	18810 <__assert_fail@plt+0x7664>
   128a8:	cmp	r0, #0
   128ac:	beq	128e0 <__assert_fail@plt+0x1734>
   128b0:	str	r0, [r4, #24]
   128b4:	mov	r0, #1
   128b8:	pop	{r4, r5, r6, pc}
   128bc:	ldr	r0, [r0, #24]
   128c0:	bl	18d60 <__assert_fail@plt+0x7bb4>
   128c4:	mov	r5, #0
   128c8:	str	r5, [r4, #24]
   128cc:	bl	11068 <__errno_location@plt>
   128d0:	mov	r3, #36	; 0x24
   128d4:	str	r3, [r0]
   128d8:	mov	r0, r5
   128dc:	pop	{r4, r5, r6, pc}
   128e0:	ldr	r0, [r4, #24]
   128e4:	bl	18d60 <__assert_fail@plt+0x7bb4>
   128e8:	mov	r0, #0
   128ec:	str	r0, [r4, #24]
   128f0:	pop	{r4, r5, r6, pc}
   128f4:	push	{r4, r5, r6, lr}
   128f8:	sub	sp, sp, #8
   128fc:	mov	r4, r1
   12900:	add	r5, r1, #64	; 0x40
   12904:	ldr	r3, [r1, #48]	; 0x30
   12908:	cmp	r3, #0
   1290c:	bne	1291c <__assert_fail@plt+0x1770>
   12910:	ldr	r3, [r0, #48]	; 0x30
   12914:	tst	r3, #1
   12918:	bne	1292c <__assert_fail@plt+0x1780>
   1291c:	ldr	r3, [r0, #48]	; 0x30
   12920:	lsl	r3, r3, #30
   12924:	orrs	r3, r2, r3, lsr #31
   12928:	beq	129a4 <__assert_fail@plt+0x17f8>
   1292c:	mov	r2, r5
   12930:	ldr	r1, [r4, #24]
   12934:	mov	r0, #3
   12938:	bl	11164 <__xstat64@plt>
   1293c:	cmp	r0, #0
   12940:	beq	129d8 <__assert_fail@plt+0x182c>
   12944:	bl	11068 <__errno_location@plt>
   12948:	mov	r6, r0
   1294c:	ldr	r3, [r0]
   12950:	cmp	r3, #2
   12954:	beq	1297c <__assert_fail@plt+0x17d0>
   12958:	ldr	r3, [r6]
   1295c:	str	r3, [r4, #32]
   12960:	mov	r2, #104	; 0x68
   12964:	mov	r1, #0
   12968:	mov	r0, r5
   1296c:	bl	1108c <memset@plt>
   12970:	mov	r0, #10
   12974:	add	sp, sp, #8
   12978:	pop	{r4, r5, r6, pc}
   1297c:	mov	r2, r5
   12980:	ldr	r1, [r4, #24]
   12984:	mov	r0, #3
   12988:	bl	11194 <__lxstat64@plt>
   1298c:	cmp	r0, #0
   12990:	bne	12958 <__assert_fail@plt+0x17ac>
   12994:	mov	r3, #0
   12998:	str	r3, [r6]
   1299c:	mov	r0, #13
   129a0:	b	12974 <__assert_fail@plt+0x17c8>
   129a4:	ldr	r1, [r0, #32]
   129a8:	mov	r3, #256	; 0x100
   129ac:	str	r3, [sp]
   129b0:	mov	r3, r5
   129b4:	ldr	r2, [r4, #24]
   129b8:	mov	r0, #3
   129bc:	bl	10f78 <__fxstatat64@plt>
   129c0:	cmp	r0, #0
   129c4:	beq	129d8 <__assert_fail@plt+0x182c>
   129c8:	bl	11068 <__errno_location@plt>
   129cc:	ldr	r3, [r0]
   129d0:	str	r3, [r4, #32]
   129d4:	b	12960 <__assert_fail@plt+0x17b4>
   129d8:	ldr	r0, [r4, #80]	; 0x50
   129dc:	and	r0, r0, #61440	; 0xf000
   129e0:	cmp	r0, #16384	; 0x4000
   129e4:	beq	12a04 <__assert_fail@plt+0x1858>
   129e8:	cmp	r0, #40960	; 0xa000
   129ec:	moveq	r0, #12
   129f0:	beq	12974 <__assert_fail@plt+0x17c8>
   129f4:	cmp	r0, #32768	; 0x8000
   129f8:	moveq	r0, #8
   129fc:	movne	r0, #3
   12a00:	b	12974 <__assert_fail@plt+0x17c8>
   12a04:	ldrb	r3, [r4, #168]	; 0xa8
   12a08:	cmp	r3, #46	; 0x2e
   12a0c:	movne	r0, #1
   12a10:	bne	12974 <__assert_fail@plt+0x17c8>
   12a14:	ldrb	r3, [r4, #169]	; 0xa9
   12a18:	cmp	r3, #0
   12a1c:	beq	12a38 <__assert_fail@plt+0x188c>
   12a20:	ldr	r3, [r4, #168]	; 0xa8
   12a24:	bic	r3, r3, #-16777216	; 0xff000000
   12a28:	bic	r3, r3, #255	; 0xff
   12a2c:	cmp	r3, #11776	; 0x2e00
   12a30:	movne	r0, #1
   12a34:	bne	12974 <__assert_fail@plt+0x17c8>
   12a38:	ldr	r0, [r4, #48]	; 0x30
   12a3c:	cmp	r0, #0
   12a40:	moveq	r0, #1
   12a44:	movne	r0, #5
   12a48:	b	12974 <__assert_fail@plt+0x17c8>
   12a4c:	push	{r4, r5, r6, r7, r8, lr}
   12a50:	mov	r6, r0
   12a54:	mov	r4, r1
   12a58:	mov	r5, r2
   12a5c:	ldr	r7, [r0, #44]	; 0x2c
   12a60:	ldr	r3, [r0, #40]	; 0x28
   12a64:	cmp	r3, r2
   12a68:	bcs	12a94 <__assert_fail@plt+0x18e8>
   12a6c:	add	r1, r2, #40	; 0x28
   12a70:	str	r1, [r0, #40]	; 0x28
   12a74:	cmn	r1, #-1073741823	; 0xc0000001
   12a78:	bhi	12b04 <__assert_fail@plt+0x1958>
   12a7c:	lsl	r1, r1, #2
   12a80:	ldr	r0, [r0, #8]
   12a84:	bl	18810 <__assert_fail@plt+0x7664>
   12a88:	cmp	r0, #0
   12a8c:	strne	r0, [r6, #8]
   12a90:	beq	12b04 <__assert_fail@plt+0x1958>
   12a94:	ldr	r3, [r6, #8]
   12a98:	cmp	r4, #0
   12a9c:	beq	12ab0 <__assert_fail@plt+0x1904>
   12aa0:	str	r4, [r3], #4
   12aa4:	ldr	r4, [r4, #8]
   12aa8:	cmp	r4, #0
   12aac:	bne	12aa0 <__assert_fail@plt+0x18f4>
   12ab0:	mov	r3, r7
   12ab4:	mov	r2, #4
   12ab8:	mov	r1, r5
   12abc:	ldr	r0, [r6, #8]
   12ac0:	bl	11134 <qsort@plt>
   12ac4:	ldr	lr, [r6, #8]
   12ac8:	ldr	r0, [lr]
   12acc:	subs	r3, r5, #1
   12ad0:	beq	12af4 <__assert_fail@plt+0x1948>
   12ad4:	mov	r2, lr
   12ad8:	ldr	r1, [r2]
   12adc:	ldr	ip, [r2, #4]!
   12ae0:	str	ip, [r1, #8]
   12ae4:	subs	r3, r3, #1
   12ae8:	bne	12ad8 <__assert_fail@plt+0x192c>
   12aec:	sub	r5, r5, #-1073741823	; 0xc0000001
   12af0:	add	lr, lr, r5, lsl #2
   12af4:	ldr	r3, [lr]
   12af8:	mov	r2, #0
   12afc:	str	r2, [r3, #8]
   12b00:	pop	{r4, r5, r6, r7, r8, pc}
   12b04:	ldr	r0, [r6, #8]
   12b08:	bl	18d60 <__assert_fail@plt+0x7bb4>
   12b0c:	mov	r3, #0
   12b10:	str	r3, [r6, #8]
   12b14:	str	r3, [r6, #40]	; 0x28
   12b18:	mov	r0, r4
   12b1c:	pop	{r4, r5, r6, r7, r8, pc}
   12b20:	push	{r4, r5, r6, r7, r8, lr}
   12b24:	mov	r6, r0
   12b28:	mov	r7, r1
   12b2c:	mov	r5, r2
   12b30:	add	r0, r2, #176	; 0xb0
   12b34:	bic	r0, r0, #7
   12b38:	bl	187e0 <__assert_fail@plt+0x7634>
   12b3c:	subs	r4, r0, #0
   12b40:	beq	12b8c <__assert_fail@plt+0x19e0>
   12b44:	mov	r2, r5
   12b48:	mov	r1, r7
   12b4c:	add	r0, r4, #168	; 0xa8
   12b50:	bl	10f24 <memcpy@plt>
   12b54:	add	r2, r4, r5
   12b58:	mov	r3, #0
   12b5c:	strb	r3, [r2, #168]	; 0xa8
   12b60:	str	r5, [r4, #52]	; 0x34
   12b64:	str	r6, [r4, #44]	; 0x2c
   12b68:	ldr	r2, [r6, #24]
   12b6c:	str	r2, [r4, #28]
   12b70:	str	r3, [r4, #32]
   12b74:	str	r3, [r4, #12]
   12b78:	strh	r3, [r4, #58]	; 0x3a
   12b7c:	mov	r2, #3
   12b80:	strh	r2, [r4, #60]	; 0x3c
   12b84:	str	r3, [r4, #16]
   12b88:	str	r3, [r4, #20]
   12b8c:	mov	r0, r4
   12b90:	pop	{r4, r5, r6, r7, r8, pc}
   12b94:	push	{r4, lr}
   12b98:	sub	sp, sp, #8
   12b9c:	mov	r4, r0
   12ba0:	ldr	r2, [r0, #48]	; 0x30
   12ba4:	ldr	r3, [pc, #92]	; 12c08 <__assert_fail@plt+0x1a5c>
   12ba8:	and	r3, r3, r2
   12bac:	cmp	r3, #0
   12bb0:	beq	12be4 <__assert_fail@plt+0x1a38>
   12bb4:	ldr	r3, [pc, #80]	; 12c0c <__assert_fail@plt+0x1a60>
   12bb8:	str	r3, [sp]
   12bbc:	ldr	r3, [pc, #76]	; 12c10 <__assert_fail@plt+0x1a64>
   12bc0:	ldr	r2, [pc, #76]	; 12c14 <__assert_fail@plt+0x1a68>
   12bc4:	mov	r1, #0
   12bc8:	mov	r0, #31
   12bcc:	bl	15288 <__assert_fail@plt+0x40dc>
   12bd0:	str	r0, [r4, #56]	; 0x38
   12bd4:	adds	r0, r0, #0
   12bd8:	movne	r0, #1
   12bdc:	add	sp, sp, #8
   12be0:	pop	{r4, pc}
   12be4:	mov	r0, #32
   12be8:	bl	187e0 <__assert_fail@plt+0x7634>
   12bec:	str	r0, [r4, #56]	; 0x38
   12bf0:	cmp	r0, #0
   12bf4:	moveq	r0, #0
   12bf8:	beq	12bdc <__assert_fail@plt+0x1a30>
   12bfc:	bl	188d8 <__assert_fail@plt+0x772c>
   12c00:	mov	r0, #1
   12c04:	b	12bdc <__assert_fail@plt+0x1a30>
   12c08:	andeq	r0, r0, r2, lsl #2
   12c0c:	andeq	r8, r1, r0, ror #26
   12c10:			; <UNDEFINED> instruction: 0x000127b0
   12c14:	strdeq	r2, [r1], -r0
   12c18:	push	{r4, lr}
   12c1c:	mov	ip, r1
   12c20:	ldr	r3, [r0, #48]	; 0x30
   12c24:	and	lr, r3, #16
   12c28:	ldr	r2, [pc, #48]	; 12c60 <__assert_fail@plt+0x1ab4>
   12c2c:	ldr	r1, [pc, #48]	; 12c64 <__assert_fail@plt+0x1ab8>
   12c30:	cmp	lr, #0
   12c34:	moveq	r1, r2
   12c38:	tst	r3, #512	; 0x200
   12c3c:	bne	12c4c <__assert_fail@plt+0x1aa0>
   12c40:	mov	r0, ip
   12c44:	bl	18cc0 <__assert_fail@plt+0x7b14>
   12c48:	pop	{r4, pc}
   12c4c:	mov	r2, r1
   12c50:	mov	r1, ip
   12c54:	ldr	r0, [r0, #32]
   12c58:	bl	15f20 <__assert_fail@plt+0x4d74>
   12c5c:	pop	{r4, pc}
   12c60:	andeq	r4, r8, r0, lsl #18
   12c64:	andeq	ip, r8, r0, lsl #18
   12c68:	push	{r4, r5, r6, lr}
   12c6c:	subs	r4, r0, #0
   12c70:	bne	12c8c <__assert_fail@plt+0x1ae0>
   12c74:	pop	{r4, r5, r6, pc}
   12c78:	mov	r0, r4
   12c7c:	bl	18d60 <__assert_fail@plt+0x7bb4>
   12c80:	mov	r4, r5
   12c84:	cmp	r5, #0
   12c88:	beq	12ca4 <__assert_fail@plt+0x1af8>
   12c8c:	ldr	r5, [r4, #8]
   12c90:	ldr	r0, [r4, #12]
   12c94:	cmp	r0, #0
   12c98:	beq	12c78 <__assert_fail@plt+0x1acc>
   12c9c:	bl	111a0 <closedir@plt>
   12ca0:	b	12c78 <__assert_fail@plt+0x1acc>
   12ca4:	pop	{r4, r5, r6, pc}
   12ca8:	push	{r4, lr}
   12cac:	ldr	r2, [r0, #48]	; 0x30
   12cb0:	ldr	r3, [pc, #40]	; 12ce0 <__assert_fail@plt+0x1b34>
   12cb4:	and	r3, r3, r2
   12cb8:	cmp	r3, #0
   12cbc:	beq	12cd4 <__assert_fail@plt+0x1b28>
   12cc0:	ldr	r0, [r0, #56]	; 0x38
   12cc4:	cmp	r0, #0
   12cc8:	popeq	{r4, pc}
   12ccc:	bl	15418 <__assert_fail@plt+0x426c>
   12cd0:	pop	{r4, pc}
   12cd4:	ldr	r0, [r0, #56]	; 0x38
   12cd8:	bl	18d60 <__assert_fail@plt+0x7bb4>
   12cdc:	pop	{r4, pc}
   12ce0:	andeq	r0, r0, r2, lsl #2
   12ce4:	push	{r4, lr}
   12ce8:	mov	r4, r0
   12cec:	mov	r0, r4
   12cf0:	bl	1594c <__assert_fail@plt+0x47a0>
   12cf4:	cmp	r0, #0
   12cf8:	bne	12d14 <__assert_fail@plt+0x1b68>
   12cfc:	mov	r0, r4
   12d00:	bl	15998 <__assert_fail@plt+0x47ec>
   12d04:	cmp	r0, #0
   12d08:	blt	12cec <__assert_fail@plt+0x1b40>
   12d0c:	bl	11188 <close@plt>
   12d10:	b	12cec <__assert_fail@plt+0x1b40>
   12d14:	pop	{r4, pc}
   12d18:	push	{r4, r5, r6, r7, lr}
   12d1c:	sub	sp, sp, #116	; 0x74
   12d20:	ldr	r4, [r0, #44]	; 0x2c
   12d24:	ldr	r3, [r4, #48]	; 0x30
   12d28:	tst	r3, #512	; 0x200
   12d2c:	beq	12e0c <__assert_fail@plt+0x1c60>
   12d30:	mov	r7, r1
   12d34:	mov	r5, r0
   12d38:	ldr	r6, [r4, #52]	; 0x34
   12d3c:	cmp	r6, #0
   12d40:	beq	12d68 <__assert_fail@plt+0x1bbc>
   12d44:	ldrd	r2, [r5, #64]	; 0x40
   12d48:	add	r1, sp, #112	; 0x70
   12d4c:	strd	r2, [r1, #-104]!	; 0xffffff98
   12d50:	mov	r0, r6
   12d54:	bl	14fd0 <__assert_fail@plt+0x3e24>
   12d58:	cmp	r0, #0
   12d5c:	beq	12d94 <__assert_fail@plt+0x1be8>
   12d60:	ldr	r0, [r0, #8]
   12d64:	b	12e10 <__assert_fail@plt+0x1c64>
   12d68:	ldr	r3, [pc, #184]	; 12e28 <__assert_fail@plt+0x1c7c>
   12d6c:	str	r3, [sp]
   12d70:	ldr	r3, [pc, #180]	; 12e2c <__assert_fail@plt+0x1c80>
   12d74:	ldr	r2, [pc, #180]	; 12e30 <__assert_fail@plt+0x1c84>
   12d78:	mov	r1, #0
   12d7c:	mov	r0, #13
   12d80:	bl	15288 <__assert_fail@plt+0x40dc>
   12d84:	mov	r6, r0
   12d88:	str	r0, [r4, #52]	; 0x34
   12d8c:	cmp	r0, #0
   12d90:	bne	12d44 <__assert_fail@plt+0x1b98>
   12d94:	cmp	r7, #0
   12d98:	blt	12e18 <__assert_fail@plt+0x1c6c>
   12d9c:	add	r1, sp, #24
   12da0:	mov	r0, r7
   12da4:	bl	10eb8 <fstatfs64@plt>
   12da8:	cmp	r0, #0
   12dac:	bne	12e20 <__assert_fail@plt+0x1c74>
   12db0:	cmp	r6, #0
   12db4:	beq	12df4 <__assert_fail@plt+0x1c48>
   12db8:	mov	r0, #16
   12dbc:	bl	187e0 <__assert_fail@plt+0x7634>
   12dc0:	subs	r4, r0, #0
   12dc4:	beq	12df4 <__assert_fail@plt+0x1c48>
   12dc8:	ldrd	r2, [r5, #64]	; 0x40
   12dcc:	strd	r2, [r4]
   12dd0:	ldr	r3, [sp, #24]
   12dd4:	str	r3, [r4, #8]
   12dd8:	mov	r1, r4
   12ddc:	mov	r0, r6
   12de0:	bl	157d4 <__assert_fail@plt+0x4628>
   12de4:	cmp	r0, #0
   12de8:	beq	12e00 <__assert_fail@plt+0x1c54>
   12dec:	cmp	r4, r0
   12df0:	bne	12dfc <__assert_fail@plt+0x1c50>
   12df4:	ldr	r0, [sp, #24]
   12df8:	b	12e10 <__assert_fail@plt+0x1c64>
   12dfc:	bl	1117c <abort@plt>
   12e00:	mov	r0, r4
   12e04:	bl	18d60 <__assert_fail@plt+0x7bb4>
   12e08:	b	12df4 <__assert_fail@plt+0x1c48>
   12e0c:	mov	r0, #0
   12e10:	add	sp, sp, #116	; 0x74
   12e14:	pop	{r4, r5, r6, r7, pc}
   12e18:	mov	r0, #0
   12e1c:	b	12e10 <__assert_fail@plt+0x1c64>
   12e20:	mov	r0, #0
   12e24:	b	12e10 <__assert_fail@plt+0x1c64>
   12e28:	andeq	r8, r1, r0, ror #26
   12e2c:	andeq	r2, r1, r8, lsr #16
   12e30:	andeq	r2, r1, ip, lsl #16
   12e34:	push	{r4, r5, r6, lr}
   12e38:	mov	r5, r0
   12e3c:	mov	r4, r1
   12e40:	ldr	r2, [r0, #48]	; 0x30
   12e44:	ldr	r3, [pc, #176]	; 12efc <__assert_fail@plt+0x1d50>
   12e48:	and	r3, r3, r2
   12e4c:	cmp	r3, #0
   12e50:	beq	12eb8 <__assert_fail@plt+0x1d0c>
   12e54:	mov	r0, #24
   12e58:	bl	187e0 <__assert_fail@plt+0x7634>
   12e5c:	subs	r6, r0, #0
   12e60:	beq	12edc <__assert_fail@plt+0x1d30>
   12e64:	ldrd	r2, [r4, #64]	; 0x40
   12e68:	strd	r2, [r6]
   12e6c:	ldrd	r2, [r4, #160]	; 0xa0
   12e70:	strd	r2, [r6, #8]
   12e74:	str	r4, [r6, #16]
   12e78:	mov	r1, r6
   12e7c:	ldr	r0, [r5, #56]	; 0x38
   12e80:	bl	157d4 <__assert_fail@plt+0x4628>
   12e84:	mov	r5, r0
   12e88:	cmp	r6, r0
   12e8c:	beq	12ee4 <__assert_fail@plt+0x1d38>
   12e90:	mov	r0, r6
   12e94:	bl	18d60 <__assert_fail@plt+0x7bb4>
   12e98:	cmp	r5, #0
   12e9c:	beq	12eec <__assert_fail@plt+0x1d40>
   12ea0:	ldr	r3, [r5, #16]
   12ea4:	str	r3, [r4]
   12ea8:	mov	r3, #2
   12eac:	strh	r3, [r4, #56]	; 0x38
   12eb0:	mov	r0, #1
   12eb4:	pop	{r4, r5, r6, pc}
   12eb8:	add	r1, r1, #64	; 0x40
   12ebc:	ldr	r0, [r0, #56]	; 0x38
   12ec0:	bl	188f4 <__assert_fail@plt+0x7748>
   12ec4:	cmp	r0, #0
   12ec8:	beq	12ef4 <__assert_fail@plt+0x1d48>
   12ecc:	str	r4, [r4]
   12ed0:	mov	r3, #2
   12ed4:	strh	r3, [r4, #56]	; 0x38
   12ed8:	pop	{r4, r5, r6, pc}
   12edc:	mov	r0, #0
   12ee0:	pop	{r4, r5, r6, pc}
   12ee4:	mov	r0, #1
   12ee8:	pop	{r4, r5, r6, pc}
   12eec:	mov	r0, #0
   12ef0:	pop	{r4, r5, r6, pc}
   12ef4:	mov	r0, #1
   12ef8:	pop	{r4, r5, r6, pc}
   12efc:	andeq	r0, r0, r2, lsl #2
   12f00:	push	{r4, r5, r6, lr}
   12f04:	mov	r5, r1
   12f08:	ldr	r1, [r0, #32]
   12f0c:	cmp	r1, r5
   12f10:	movne	r3, #0
   12f14:	moveq	r3, #1
   12f18:	cmn	r1, #100	; 0x64
   12f1c:	moveq	r3, #0
   12f20:	cmp	r3, #0
   12f24:	bne	12f64 <__assert_fail@plt+0x1db8>
   12f28:	mov	r4, r0
   12f2c:	cmp	r2, #0
   12f30:	bne	12f68 <__assert_fail@plt+0x1dbc>
   12f34:	ldr	r3, [r0, #48]	; 0x30
   12f38:	lsr	r3, r3, #2
   12f3c:	eor	r3, r3, #1
   12f40:	cmp	r1, #0
   12f44:	movlt	r3, #0
   12f48:	andge	r3, r3, #1
   12f4c:	cmp	r3, #0
   12f50:	beq	12f5c <__assert_fail@plt+0x1db0>
   12f54:	mov	r0, r1
   12f58:	bl	11188 <close@plt>
   12f5c:	str	r5, [r4, #32]
   12f60:	pop	{r4, r5, r6, pc}
   12f64:	bl	1117c <abort@plt>
   12f68:	add	r0, r0, #60	; 0x3c
   12f6c:	bl	15954 <__assert_fail@plt+0x47a8>
   12f70:	cmp	r0, #0
   12f74:	blt	12f5c <__assert_fail@plt+0x1db0>
   12f78:	bl	11188 <close@plt>
   12f7c:	b	12f5c <__assert_fail@plt+0x1db0>
   12f80:	push	{r4, r5, r6, lr}
   12f84:	mov	r4, r0
   12f88:	ldr	r3, [r0, #48]	; 0x30
   12f8c:	ands	r5, r3, #4
   12f90:	movne	r5, #0
   12f94:	bne	12fb0 <__assert_fail@plt+0x1e04>
   12f98:	tst	r3, #512	; 0x200
   12f9c:	bne	12fc0 <__assert_fail@plt+0x1e14>
   12fa0:	ldr	r0, [r0, #28]
   12fa4:	bl	11128 <fchdir@plt>
   12fa8:	adds	r5, r0, #0
   12fac:	movne	r5, #1
   12fb0:	add	r0, r4, #60	; 0x3c
   12fb4:	bl	12ce4 <__assert_fail@plt+0x1b38>
   12fb8:	mov	r0, r5
   12fbc:	pop	{r4, r5, r6, pc}
   12fc0:	mov	r2, #1
   12fc4:	mvn	r1, #99	; 0x63
   12fc8:	bl	12f00 <__assert_fail@plt+0x1d54>
   12fcc:	b	12fb0 <__assert_fail@plt+0x1e04>
   12fd0:	push	{r4, r5, r6, r7, r8, r9, lr}
   12fd4:	sub	sp, sp, #108	; 0x6c
   12fd8:	mov	r4, r0
   12fdc:	mov	r6, r1
   12fe0:	mov	r5, r2
   12fe4:	subs	r9, r3, #0
   12fe8:	beq	13184 <__assert_fail@plt+0x1fd8>
   12fec:	ldr	r1, [pc, #448]	; 131b4 <__assert_fail@plt+0x2008>
   12ff0:	mov	r0, r9
   12ff4:	bl	10ee8 <strcmp@plt>
   12ff8:	cmp	r0, #0
   12ffc:	bne	13184 <__assert_fail@plt+0x1fd8>
   13000:	ldr	r3, [r4, #48]	; 0x30
   13004:	tst	r3, #4
   13008:	bne	13190 <__assert_fail@plt+0x1fe4>
   1300c:	cmp	r5, #0
   13010:	bge	13120 <__assert_fail@plt+0x1f74>
   13014:	tst	r3, #512	; 0x200
   13018:	beq	13030 <__assert_fail@plt+0x1e84>
   1301c:	add	r7, r4, #60	; 0x3c
   13020:	mov	r0, r7
   13024:	bl	1594c <__assert_fail@plt+0x47a0>
   13028:	cmp	r0, #0
   1302c:	beq	13050 <__assert_fail@plt+0x1ea4>
   13030:	mov	r7, #1
   13034:	mov	r1, r9
   13038:	mov	r0, r4
   1303c:	bl	12c18 <__assert_fail@plt+0x1a6c>
   13040:	subs	r8, r0, #0
   13044:	bge	130a0 <__assert_fail@plt+0x1ef4>
   13048:	mvn	r4, #0
   1304c:	b	1310c <__assert_fail@plt+0x1f60>
   13050:	mov	r0, r7
   13054:	bl	15998 <__assert_fail@plt+0x47ec>
   13058:	subs	r8, r0, #0
   1305c:	blt	13030 <__assert_fail@plt+0x1e84>
   13060:	ldr	r3, [r4, #48]	; 0x30
   13064:	tst	r3, #2
   13068:	bne	1312c <__assert_fail@plt+0x1f80>
   1306c:	mov	r5, r8
   13070:	mov	r7, #1
   13074:	ldr	r3, [r4, #48]	; 0x30
   13078:	tst	r3, #512	; 0x200
   1307c:	bne	13150 <__assert_fail@plt+0x1fa4>
   13080:	mov	r0, r8
   13084:	bl	11128 <fchdir@plt>
   13088:	mov	r4, r0
   1308c:	b	13104 <__assert_fail@plt+0x1f58>
   13090:	cmp	r5, #0
   13094:	movge	r8, r5
   13098:	movge	r7, #0
   1309c:	blt	13118 <__assert_fail@plt+0x1f6c>
   130a0:	ldr	r3, [r4, #48]	; 0x30
   130a4:	tst	r3, #2
   130a8:	bne	130c8 <__assert_fail@plt+0x1f1c>
   130ac:	cmp	r9, #0
   130b0:	beq	13074 <__assert_fail@plt+0x1ec8>
   130b4:	ldr	r1, [pc, #248]	; 131b4 <__assert_fail@plt+0x2008>
   130b8:	mov	r0, r9
   130bc:	bl	10ee8 <strcmp@plt>
   130c0:	cmp	r0, #0
   130c4:	bne	13074 <__assert_fail@plt+0x1ec8>
   130c8:	mov	r2, sp
   130cc:	mov	r1, r8
   130d0:	mov	r0, #3
   130d4:	bl	10f90 <__fxstat64@plt>
   130d8:	cmp	r0, #0
   130dc:	bne	13100 <__assert_fail@plt+0x1f54>
   130e0:	ldrd	r0, [r6, #64]	; 0x40
   130e4:	ldrd	r2, [sp]
   130e8:	cmp	r1, r3
   130ec:	cmpeq	r0, r2
   130f0:	beq	13138 <__assert_fail@plt+0x1f8c>
   130f4:	bl	11068 <__errno_location@plt>
   130f8:	mov	r3, #2
   130fc:	str	r3, [r0]
   13100:	mvn	r4, #0
   13104:	cmp	r5, #0
   13108:	blt	13168 <__assert_fail@plt+0x1fbc>
   1310c:	mov	r0, r4
   13110:	add	sp, sp, #108	; 0x6c
   13114:	pop	{r4, r5, r6, r7, r8, r9, pc}
   13118:	mov	r7, #0
   1311c:	b	13034 <__assert_fail@plt+0x1e88>
   13120:	mov	r8, r5
   13124:	mov	r7, #1
   13128:	b	130a0 <__assert_fail@plt+0x1ef4>
   1312c:	mov	r5, r8
   13130:	mov	r7, #1
   13134:	b	130c8 <__assert_fail@plt+0x1f1c>
   13138:	ldrd	r0, [r6, #160]	; 0xa0
   1313c:	ldrd	r2, [sp, #96]	; 0x60
   13140:	cmp	r1, r3
   13144:	cmpeq	r0, r2
   13148:	bne	130f4 <__assert_fail@plt+0x1f48>
   1314c:	b	13074 <__assert_fail@plt+0x1ec8>
   13150:	eor	r2, r7, #1
   13154:	mov	r1, r8
   13158:	mov	r0, r4
   1315c:	bl	12f00 <__assert_fail@plt+0x1d54>
   13160:	mov	r4, #0
   13164:	b	1310c <__assert_fail@plt+0x1f60>
   13168:	bl	11068 <__errno_location@plt>
   1316c:	mov	r5, r0
   13170:	ldr	r6, [r0]
   13174:	mov	r0, r8
   13178:	bl	11188 <close@plt>
   1317c:	str	r6, [r5]
   13180:	b	1310c <__assert_fail@plt+0x1f60>
   13184:	ldr	r3, [r4, #48]	; 0x30
   13188:	tst	r3, #4
   1318c:	beq	13090 <__assert_fail@plt+0x1ee4>
   13190:	mvn	r2, r5
   13194:	lsr	r2, r2, #31
   13198:	ands	r3, r2, r3, lsr #9
   1319c:	moveq	r4, #0
   131a0:	beq	1310c <__assert_fail@plt+0x1f60>
   131a4:	mov	r0, r5
   131a8:	bl	11188 <close@plt>
   131ac:	mov	r4, #0
   131b0:	b	1310c <__assert_fail@plt+0x1f60>
   131b4:	andeq	sl, r1, r8, asr r1
   131b8:	push	{r4, r5, lr}
   131bc:	sub	sp, sp, #28
   131c0:	ldr	r2, [r0, #48]	; 0x30
   131c4:	ldr	r3, [pc, #172]	; 13278 <__assert_fail@plt+0x20cc>
   131c8:	and	r3, r3, r2
   131cc:	cmp	r3, #0
   131d0:	bne	13218 <__assert_fail@plt+0x206c>
   131d4:	ldr	ip, [r1, #4]
   131d8:	cmp	ip, #0
   131dc:	beq	13210 <__assert_fail@plt+0x2064>
   131e0:	ldr	r3, [ip, #48]	; 0x30
   131e4:	cmp	r3, #0
   131e8:	blt	13210 <__assert_fail@plt+0x2064>
   131ec:	ldr	lr, [r0, #56]	; 0x38
   131f0:	ldrd	r2, [lr, #16]
   131f4:	orrs	r3, r2, r3
   131f8:	beq	13248 <__assert_fail@plt+0x209c>
   131fc:	ldrd	r4, [lr]
   13200:	ldrd	r2, [r1, #160]	; 0xa0
   13204:	cmp	r5, r3
   13208:	cmpeq	r4, r2
   1320c:	beq	1324c <__assert_fail@plt+0x20a0>
   13210:	add	sp, sp, #28
   13214:	pop	{r4, r5, pc}
   13218:	ldrd	r2, [r1, #64]	; 0x40
   1321c:	strd	r2, [sp]
   13220:	ldrd	r2, [r1, #160]	; 0xa0
   13224:	strd	r2, [sp, #8]
   13228:	mov	r1, sp
   1322c:	ldr	r0, [r0, #56]	; 0x38
   13230:	bl	1580c <__assert_fail@plt+0x4660>
   13234:	cmp	r0, #0
   13238:	beq	13244 <__assert_fail@plt+0x2098>
   1323c:	bl	18d60 <__assert_fail@plt+0x7bb4>
   13240:	b	13210 <__assert_fail@plt+0x2064>
   13244:	bl	1117c <abort@plt>
   13248:	bl	1117c <abort@plt>
   1324c:	ldrd	r2, [lr, #8]
   13250:	ldrd	r4, [r1, #64]	; 0x40
   13254:	cmp	r3, r5
   13258:	cmpeq	r2, r4
   1325c:	bne	13210 <__assert_fail@plt+0x2064>
   13260:	ldrd	r2, [ip, #64]	; 0x40
   13264:	strd	r2, [lr, #8]
   13268:	ldr	r3, [r0, #56]	; 0x38
   1326c:	ldrd	r0, [ip, #160]	; 0xa0
   13270:	strd	r0, [r3]
   13274:	b	13210 <__assert_fail@plt+0x2064>
   13278:	andeq	r0, r0, r2, lsl #2
   1327c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13280:	sub	sp, sp, #68	; 0x44
   13284:	mov	r5, r0
   13288:	str	r1, [sp, #40]	; 0x28
   1328c:	ldr	r9, [r0]
   13290:	ldr	r3, [r9, #12]
   13294:	str	r3, [sp, #44]	; 0x2c
   13298:	cmp	r3, #0
   1329c:	beq	1339c <__assert_fail@plt+0x21f0>
   132a0:	mov	r0, r3
   132a4:	bl	1111c <dirfd@plt>
   132a8:	str	r0, [sp, #60]	; 0x3c
   132ac:	cmp	r0, #0
   132b0:	blt	13358 <__assert_fail@plt+0x21ac>
   132b4:	ldr	r3, [r5, #44]	; 0x2c
   132b8:	cmp	r3, #0
   132bc:	ldr	r3, [pc, #2472]	; 13c6c <__assert_fail@plt+0x2ac0>
   132c0:	mvnne	r3, #0
   132c4:	str	r3, [sp, #24]
   132c8:	mov	r3, #1
   132cc:	str	r3, [sp, #52]	; 0x34
   132d0:	ldr	r3, [r9, #40]	; 0x28
   132d4:	mov	r1, r3
   132d8:	sub	r3, r3, #1
   132dc:	ldr	r2, [r9, #28]
   132e0:	ldrb	r2, [r2, r3]
   132e4:	cmp	r2, #47	; 0x2f
   132e8:	moveq	r1, r3
   132ec:	str	r1, [sp, #32]
   132f0:	ldr	r3, [r5, #48]	; 0x30
   132f4:	tst	r3, #4
   132f8:	ldrne	r3, [r5, #24]
   132fc:	addne	r2, r3, r1
   13300:	addne	r2, r2, #1
   13304:	strne	r2, [sp, #28]
   13308:	movne	r2, #47	; 0x2f
   1330c:	strbne	r2, [r3, r1]
   13310:	moveq	r3, #0
   13314:	streq	r3, [sp, #28]
   13318:	ldr	r3, [sp, #32]
   1331c:	add	r3, r3, #1
   13320:	str	r3, [sp, #12]
   13324:	ldr	fp, [r5, #36]	; 0x24
   13328:	sub	fp, fp, r3
   1332c:	ldr	r3, [r9, #48]	; 0x30
   13330:	add	r3, r3, #1
   13334:	str	r3, [sp, #20]
   13338:	mov	r3, #0
   1333c:	str	r3, [sp, #48]	; 0x30
   13340:	str	r3, [sp, #36]	; 0x24
   13344:	str	r3, [sp, #4]
   13348:	mov	r8, r3
   1334c:	str	r3, [sp, #8]
   13350:	mov	sl, r3
   13354:	b	138cc <__assert_fail@plt+0x2720>
   13358:	ldr	r0, [r9, #12]
   1335c:	bl	111a0 <closedir@plt>
   13360:	mov	r3, #0
   13364:	str	r3, [r9, #12]
   13368:	ldr	r3, [sp, #40]	; 0x28
   1336c:	cmp	r3, #3
   13370:	movne	r3, #0
   13374:	strne	r3, [sp, #8]
   13378:	bne	1373c <__assert_fail@plt+0x2590>
   1337c:	mov	r3, #4
   13380:	strh	r3, [r9, #56]	; 0x38
   13384:	bl	11068 <__errno_location@plt>
   13388:	ldr	r3, [r0]
   1338c:	str	r3, [r9, #32]
   13390:	mov	r3, #0
   13394:	str	r3, [sp, #8]
   13398:	b	1373c <__assert_fail@plt+0x2590>
   1339c:	ldr	r3, [r0, #48]	; 0x30
   133a0:	and	r2, r3, #516	; 0x204
   133a4:	cmp	r2, #512	; 0x200
   133a8:	ldreq	r0, [r0, #32]
   133ac:	mvnne	r0, #99	; 0x63
   133b0:	ldr	r1, [r9, #24]
   133b4:	ands	r2, r3, #16
   133b8:	beq	133d8 <__assert_fail@plt+0x222c>
   133bc:	tst	r3, #1
   133c0:	moveq	r2, #32768	; 0x8000
   133c4:	beq	133d8 <__assert_fail@plt+0x222c>
   133c8:	ldr	r2, [r9, #48]	; 0x30
   133cc:	cmp	r2, #0
   133d0:	movne	r2, #32768	; 0x8000
   133d4:	moveq	r2, #0
   133d8:	add	r3, sp, #60	; 0x3c
   133dc:	bl	15f5c <__assert_fail@plt+0x4db0>
   133e0:	str	r0, [r9, #12]
   133e4:	cmp	r0, #0
   133e8:	beq	134dc <__assert_fail@plt+0x2330>
   133ec:	ldrh	r3, [r9, #56]	; 0x38
   133f0:	cmp	r3, #11
   133f4:	beq	13510 <__assert_fail@plt+0x2364>
   133f8:	ldr	r3, [r5, #48]	; 0x30
   133fc:	tst	r3, #256	; 0x100
   13400:	bne	13528 <__assert_fail@plt+0x237c>
   13404:	ldr	r3, [r5, #44]	; 0x2c
   13408:	cmp	r3, #0
   1340c:	ldr	r3, [pc, #2136]	; 13c6c <__assert_fail@plt+0x2ac0>
   13410:	mvnne	r3, #0
   13414:	str	r3, [sp, #24]
   13418:	ldr	r3, [sp, #40]	; 0x28
   1341c:	cmp	r3, #2
   13420:	beq	13618 <__assert_fail@plt+0x246c>
   13424:	ldr	r3, [r5, #48]	; 0x30
   13428:	and	r3, r3, #56	; 0x38
   1342c:	cmp	r3, #24
   13430:	beq	13570 <__assert_fail@plt+0x23c4>
   13434:	ldr	r3, [sp, #40]	; 0x28
   13438:	cmp	r3, #3
   1343c:	movne	r6, #0
   13440:	moveq	r6, #1
   13444:	mov	r4, #1
   13448:	ldr	r3, [r5, #48]	; 0x30
   1344c:	tst	r3, #512	; 0x200
   13450:	bne	13600 <__assert_fail@plt+0x2454>
   13454:	ldr	r2, [sp, #60]	; 0x3c
   13458:	cmp	r2, #0
   1345c:	blt	13480 <__assert_fail@plt+0x22d4>
   13460:	mov	r3, #0
   13464:	mov	r1, r9
   13468:	mov	r0, r5
   1346c:	bl	12fd0 <__assert_fail@plt+0x1e24>
   13470:	cmp	r0, #0
   13474:	moveq	r3, #1
   13478:	streq	r3, [sp, #52]	; 0x34
   1347c:	beq	132d0 <__assert_fail@plt+0x2124>
   13480:	tst	r4, r6
   13484:	beq	13494 <__assert_fail@plt+0x22e8>
   13488:	bl	11068 <__errno_location@plt>
   1348c:	ldr	r3, [r0]
   13490:	str	r3, [r9, #32]
   13494:	ldrh	r3, [r9, #58]	; 0x3a
   13498:	orr	r3, r3, #1
   1349c:	strh	r3, [r9, #58]	; 0x3a
   134a0:	ldr	r0, [r9, #12]
   134a4:	bl	111a0 <closedir@plt>
   134a8:	mov	r3, #0
   134ac:	str	r3, [r9, #12]
   134b0:	ldr	r3, [r5, #48]	; 0x30
   134b4:	tst	r3, #512	; 0x200
   134b8:	beq	134cc <__assert_fail@plt+0x2320>
   134bc:	ldr	r0, [sp, #60]	; 0x3c
   134c0:	cmp	r0, #0
   134c4:	blt	134cc <__assert_fail@plt+0x2320>
   134c8:	bl	11188 <close@plt>
   134cc:	mov	r3, #0
   134d0:	str	r3, [r9, #12]
   134d4:	str	r3, [sp, #52]	; 0x34
   134d8:	b	132d0 <__assert_fail@plt+0x2124>
   134dc:	ldr	r3, [sp, #40]	; 0x28
   134e0:	cmp	r3, #3
   134e4:	movne	r3, #0
   134e8:	strne	r3, [sp, #8]
   134ec:	bne	1373c <__assert_fail@plt+0x2590>
   134f0:	mov	r3, #4
   134f4:	strh	r3, [r9, #56]	; 0x38
   134f8:	bl	11068 <__errno_location@plt>
   134fc:	ldr	r3, [r0]
   13500:	str	r3, [r9, #32]
   13504:	mov	r3, #0
   13508:	str	r3, [sp, #8]
   1350c:	b	1373c <__assert_fail@plt+0x2590>
   13510:	mov	r2, #0
   13514:	mov	r1, r9
   13518:	mov	r0, r5
   1351c:	bl	128f4 <__assert_fail@plt+0x1748>
   13520:	strh	r0, [r9, #56]	; 0x38
   13524:	b	13404 <__assert_fail@plt+0x2258>
   13528:	mov	r1, r9
   1352c:	mov	r0, r5
   13530:	bl	131b8 <__assert_fail@plt+0x200c>
   13534:	mov	r2, #0
   13538:	mov	r1, r9
   1353c:	mov	r0, r5
   13540:	bl	128f4 <__assert_fail@plt+0x1748>
   13544:	mov	r1, r9
   13548:	mov	r0, r5
   1354c:	bl	12e34 <__assert_fail@plt+0x1c88>
   13550:	cmp	r0, #0
   13554:	bne	13404 <__assert_fail@plt+0x2258>
   13558:	bl	11068 <__errno_location@plt>
   1355c:	mov	r3, #12
   13560:	str	r3, [r0]
   13564:	mov	r3, #0
   13568:	str	r3, [sp, #8]
   1356c:	b	1373c <__assert_fail@plt+0x2590>
   13570:	ldr	r3, [r9, #84]	; 0x54
   13574:	cmp	r3, #2
   13578:	bne	13434 <__assert_fail@plt+0x2288>
   1357c:	ldr	r1, [sp, #60]	; 0x3c
   13580:	mov	r0, r9
   13584:	bl	12d18 <__assert_fail@plt+0x1b6c>
   13588:	ldr	r3, [pc, #1760]	; 13c70 <__assert_fail@plt+0x2ac4>
   1358c:	cmp	r0, r3
   13590:	beq	135e8 <__assert_fail@plt+0x243c>
   13594:	bgt	135d0 <__assert_fail@plt+0x2424>
   13598:	ldr	r3, [pc, #1748]	; 13c74 <__assert_fail@plt+0x2ac8>
   1359c:	cmp	r0, r3
   135a0:	beq	135e8 <__assert_fail@plt+0x243c>
   135a4:	cmp	r0, #0
   135a8:	beq	135e8 <__assert_fail@plt+0x243c>
   135ac:	ldr	r3, [sp, #40]	; 0x28
   135b0:	cmp	r3, #3
   135b4:	moveq	r6, #1
   135b8:	movne	r6, #0
   135bc:	movne	r3, #0
   135c0:	strne	r3, [sp, #52]	; 0x34
   135c4:	bne	132d0 <__assert_fail@plt+0x2124>
   135c8:	mov	r4, #0
   135cc:	b	13448 <__assert_fail@plt+0x229c>
   135d0:	ldr	r3, [pc, #1696]	; 13c78 <__assert_fail@plt+0x2acc>
   135d4:	cmp	r0, r3
   135d8:	beq	135e8 <__assert_fail@plt+0x243c>
   135dc:	ldr	r3, [pc, #1688]	; 13c7c <__assert_fail@plt+0x2ad0>
   135e0:	cmp	r0, r3
   135e4:	bne	135ac <__assert_fail@plt+0x2400>
   135e8:	ldr	r3, [sp, #40]	; 0x28
   135ec:	cmp	r3, #3
   135f0:	movne	r6, #0
   135f4:	moveq	r6, #1
   135f8:	mov	r4, #1
   135fc:	b	13448 <__assert_fail@plt+0x229c>
   13600:	mov	r2, #3
   13604:	ldr	r1, [pc, #1652]	; 13c80 <__assert_fail@plt+0x2ad4>
   13608:	ldr	r0, [sp, #60]	; 0x3c
   1360c:	bl	18a68 <__assert_fail@plt+0x78bc>
   13610:	str	r0, [sp, #60]	; 0x3c
   13614:	b	13454 <__assert_fail@plt+0x22a8>
   13618:	mov	r3, #0
   1361c:	str	r3, [sp, #52]	; 0x34
   13620:	b	132d0 <__assert_fail@plt+0x2124>
   13624:	ldr	r3, [sp, #16]
   13628:	ldr	r3, [r3]
   1362c:	cmp	r3, #0
   13630:	beq	1365c <__assert_fail@plt+0x24b0>
   13634:	str	r3, [r9, #32]
   13638:	ldr	r3, [sp, #44]	; 0x2c
   1363c:	cmp	r8, #0
   13640:	cmpeq	r3, #0
   13644:	movne	r3, #1
   13648:	moveq	r3, #0
   1364c:	cmp	r3, #0
   13650:	movne	r3, #7
   13654:	moveq	r3, #4
   13658:	strh	r3, [r9, #56]	; 0x38
   1365c:	ldr	r0, [r9, #12]
   13660:	cmp	r0, #0
   13664:	beq	13674 <__assert_fail@plt+0x24c8>
   13668:	bl	111a0 <closedir@plt>
   1366c:	mov	r3, #0
   13670:	str	r3, [r9, #12]
   13674:	ldr	r3, [sp, #36]	; 0x24
   13678:	cmp	r3, #0
   1367c:	bne	13abc <__assert_fail@plt+0x2910>
   13680:	ldr	r3, [r5, #48]	; 0x30
   13684:	tst	r3, #4
   13688:	beq	136b4 <__assert_fail@plt+0x2508>
   1368c:	ldr	r3, [r5, #36]	; 0x24
   13690:	ldr	r2, [sp, #12]
   13694:	cmp	r8, #0
   13698:	cmpne	r3, r2
   1369c:	ldreq	r3, [sp, #28]
   136a0:	subeq	r3, r3, #1
   136a4:	streq	r3, [sp, #28]
   136a8:	mov	r3, #0
   136ac:	ldr	r2, [sp, #28]
   136b0:	strb	r3, [r2]
   136b4:	ldr	r3, [sp, #52]	; 0x34
   136b8:	ldr	r2, [sp, #44]	; 0x2c
   136bc:	cmp	r2, #0
   136c0:	movne	r3, #0
   136c4:	andeq	r3, r3, #1
   136c8:	cmp	r3, #0
   136cc:	beq	13704 <__assert_fail@plt+0x2558>
   136d0:	ldr	r3, [sp, #40]	; 0x28
   136d4:	cmp	r8, #0
   136d8:	cmpne	r3, #1
   136dc:	bne	13704 <__assert_fail@plt+0x2558>
   136e0:	ldr	r3, [r9, #48]	; 0x30
   136e4:	cmp	r3, #0
   136e8:	bne	13b3c <__assert_fail@plt+0x2990>
   136ec:	mov	r0, r5
   136f0:	bl	12f80 <__assert_fail@plt+0x1dd4>
   136f4:	adds	r0, r0, #0
   136f8:	movne	r0, #1
   136fc:	cmp	r0, #0
   13700:	bne	13b5c <__assert_fail@plt+0x29b0>
   13704:	cmp	r8, #0
   13708:	beq	13b84 <__assert_fail@plt+0x29d8>
   1370c:	ldr	r3, [sp, #48]	; 0x30
   13710:	cmp	r3, #0
   13714:	bne	13bbc <__assert_fail@plt+0x2a10>
   13718:	ldr	r3, [r5, #44]	; 0x2c
   1371c:	cmp	r3, #0
   13720:	cmpne	r8, #1
   13724:	bls	1373c <__assert_fail@plt+0x2590>
   13728:	mov	r2, r8
   1372c:	ldr	r1, [sp, #8]
   13730:	mov	r0, r5
   13734:	bl	12a4c <__assert_fail@plt+0x18a0>
   13738:	str	r0, [sp, #8]
   1373c:	ldr	r0, [sp, #8]
   13740:	add	sp, sp, #68	; 0x44
   13744:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13748:	ldrb	r3, [r7, #20]
   1374c:	cmp	r3, #0
   13750:	beq	13ab4 <__assert_fail@plt+0x2908>
   13754:	ldrh	r3, [r7, #20]
   13758:	cmp	r3, #46	; 0x2e
   1375c:	bne	1390c <__assert_fail@plt+0x2760>
   13760:	ldr	r4, [sp, #4]
   13764:	b	138c8 <__assert_fail@plt+0x271c>
   13768:	ldr	fp, [r5, #24]
   1376c:	ldr	r3, [sp, #32]
   13770:	add	r1, r3, #2
   13774:	add	r1, r1, r6
   13778:	mov	r0, r5
   1377c:	bl	12884 <__assert_fail@plt+0x16d8>
   13780:	cmp	r0, #0
   13784:	beq	137bc <__assert_fail@plt+0x2610>
   13788:	ldr	r3, [r5, #24]
   1378c:	cmp	fp, r3
   13790:	beq	13804 <__assert_fail@plt+0x2658>
   13794:	ldr	r2, [r5, #48]	; 0x30
   13798:	tst	r2, #4
   1379c:	ldrne	r2, [sp, #12]
   137a0:	addne	r3, r3, r2
   137a4:	strne	r3, [sp, #28]
   137a8:	ldr	fp, [r5, #36]	; 0x24
   137ac:	ldr	r3, [sp, #12]
   137b0:	sub	fp, fp, r3
   137b4:	str	r0, [sp, #36]	; 0x24
   137b8:	b	1393c <__assert_fail@plt+0x2790>
   137bc:	ldr	r7, [sp, #16]
   137c0:	ldr	r6, [r7]
   137c4:	mov	r0, r4
   137c8:	bl	18d60 <__assert_fail@plt+0x7bb4>
   137cc:	ldr	r0, [sp, #8]
   137d0:	bl	12c68 <__assert_fail@plt+0x1abc>
   137d4:	ldr	r0, [r9, #12]
   137d8:	bl	111a0 <closedir@plt>
   137dc:	mov	r2, #0
   137e0:	str	r2, [r9, #12]
   137e4:	mov	r3, #7
   137e8:	strh	r3, [r9, #56]	; 0x38
   137ec:	ldr	r3, [r5, #48]	; 0x30
   137f0:	orr	r3, r3, #8192	; 0x2000
   137f4:	str	r3, [r5, #48]	; 0x30
   137f8:	str	r6, [r7]
   137fc:	str	r2, [sp, #8]
   13800:	b	1373c <__assert_fail@plt+0x2590>
   13804:	ldr	r0, [sp, #36]	; 0x24
   13808:	b	137a8 <__assert_fail@plt+0x25fc>
   1380c:	mov	r0, r4
   13810:	bl	18d60 <__assert_fail@plt+0x7bb4>
   13814:	ldr	r0, [sp, #8]
   13818:	bl	12c68 <__assert_fail@plt+0x1abc>
   1381c:	ldr	r0, [r9, #12]
   13820:	bl	111a0 <closedir@plt>
   13824:	mov	r2, #0
   13828:	str	r2, [r9, #12]
   1382c:	mov	r3, #7
   13830:	strh	r3, [r9, #56]	; 0x38
   13834:	ldr	r3, [r5, #48]	; 0x30
   13838:	orr	r3, r3, #8192	; 0x2000
   1383c:	str	r3, [r5, #48]	; 0x30
   13840:	mov	r3, #36	; 0x24
   13844:	ldr	r1, [sp, #16]
   13848:	str	r3, [r1]
   1384c:	str	r2, [sp, #8]
   13850:	b	1373c <__assert_fail@plt+0x2590>
   13854:	ldr	r3, [r4, #28]
   13858:	str	r3, [r4, #24]
   1385c:	ldr	r2, [r4, #52]	; 0x34
   13860:	add	r2, r2, #1
   13864:	add	r1, r4, #168	; 0xa8
   13868:	ldr	r0, [sp, #28]
   1386c:	bl	10f00 <memmove@plt>
   13870:	b	13978 <__assert_fail@plt+0x27cc>
   13874:	mov	r3, sl
   13878:	mov	r2, #16384	; 0x4000
   1387c:	str	r2, [r4, #80]	; 0x50
   13880:	cmp	r3, #0
   13884:	movne	r2, #1
   13888:	moveq	r2, #2
   1388c:	mov	r3, #0
   13890:	strd	r2, [r4, #112]	; 0x70
   13894:	str	sl, [r4, #8]
   13898:	ldr	r3, [sp, #8]
   1389c:	cmp	r3, #0
   138a0:	ldrne	r3, [sp, #4]
   138a4:	strne	r4, [r3, #8]
   138a8:	streq	r4, [sp, #8]
   138ac:	ldr	r3, [pc, #976]	; 13c84 <__assert_fail@plt+0x2ad8>
   138b0:	cmp	r8, r3
   138b4:	beq	13a68 <__assert_fail@plt+0x28bc>
   138b8:	add	r8, r8, #1
   138bc:	ldr	r3, [sp, #24]
   138c0:	cmp	r8, r3
   138c4:	bcs	13674 <__assert_fail@plt+0x24c8>
   138c8:	str	r4, [sp, #4]
   138cc:	ldr	r3, [r9, #12]
   138d0:	cmp	r3, #0
   138d4:	beq	13674 <__assert_fail@plt+0x24c8>
   138d8:	bl	11068 <__errno_location@plt>
   138dc:	str	r0, [sp, #16]
   138e0:	str	sl, [r0]
   138e4:	ldr	r0, [r9, #12]
   138e8:	bl	11104 <readdir64@plt>
   138ec:	subs	r7, r0, #0
   138f0:	beq	13624 <__assert_fail@plt+0x2478>
   138f4:	ldr	r3, [r5, #48]	; 0x30
   138f8:	tst	r3, #32
   138fc:	bne	1390c <__assert_fail@plt+0x2760>
   13900:	ldrb	r3, [r7, #19]
   13904:	cmp	r3, #46	; 0x2e
   13908:	beq	13748 <__assert_fail@plt+0x259c>
   1390c:	add	r4, r7, #19
   13910:	mov	r0, r4
   13914:	bl	11044 <strlen@plt>
   13918:	mov	r6, r0
   1391c:	mov	r2, r0
   13920:	mov	r1, r4
   13924:	mov	r0, r5
   13928:	bl	12b20 <__assert_fail@plt+0x1974>
   1392c:	subs	r4, r0, #0
   13930:	beq	137bc <__assert_fail@plt+0x2610>
   13934:	cmp	fp, r6
   13938:	bls	13768 <__assert_fail@plt+0x25bc>
   1393c:	ldr	r3, [sp, #12]
   13940:	adds	r6, r3, r6
   13944:	bcs	1380c <__assert_fail@plt+0x2660>
   13948:	ldr	r3, [sp, #20]
   1394c:	str	r3, [r4, #48]	; 0x30
   13950:	ldr	r3, [r5]
   13954:	str	r3, [r4, #4]
   13958:	str	r6, [r4, #40]	; 0x28
   1395c:	ldrd	r2, [r7]
   13960:	strd	r2, [r4, #160]	; 0xa0
   13964:	ldr	r3, [r5, #48]	; 0x30
   13968:	tst	r3, #4
   1396c:	addeq	r3, r4, #168	; 0xa8
   13970:	streq	r3, [r4, #24]
   13974:	bne	13854 <__assert_fail@plt+0x26a8>
   13978:	ldr	r3, [r5, #44]	; 0x2c
   1397c:	cmp	r3, #0
   13980:	beq	13990 <__assert_fail@plt+0x27e4>
   13984:	ldr	r3, [r5, #48]	; 0x30
   13988:	tst	r3, #1024	; 0x400
   1398c:	beq	13a50 <__assert_fail@plt+0x28a4>
   13990:	ldr	r3, [r5, #48]	; 0x30
   13994:	tst	r3, #8
   13998:	beq	13c20 <__assert_fail@plt+0x2a74>
   1399c:	ldrb	r2, [r7, #18]
   139a0:	tst	r2, #251	; 0xfb
   139a4:	beq	13c20 <__assert_fail@plt+0x2a74>
   139a8:	lsr	r3, r3, #4
   139ac:	and	r3, r3, #1
   139b0:	cmp	r2, #10
   139b4:	orrne	r3, r3, #1
   139b8:	cmp	r3, #0
   139bc:	beq	13c20 <__assert_fail@plt+0x2a74>
   139c0:	mov	r2, #11
   139c4:	strh	r2, [r4, #56]	; 0x38
   139c8:	ldrb	r2, [r7, #18]
   139cc:	sub	r2, r2, #1
   139d0:	cmp	r2, #11
   139d4:	ldrls	pc, [pc, r2, lsl #2]
   139d8:	b	13a40 <__assert_fail@plt+0x2894>
   139dc:	andeq	r3, r1, r0, lsl sl
   139e0:	andeq	r3, r1, r8, asr #20
   139e4:	andeq	r3, r1, r0, asr #20
   139e8:	andeq	r3, r1, r8, ror r8
   139ec:	andeq	r3, r1, r0, asr #20
   139f0:	andeq	r3, r1, r4, ror #23
   139f4:	andeq	r3, r1, r0, asr #20
   139f8:	andeq	r3, r1, r8, lsr #20
   139fc:	andeq	r3, r1, r0, asr #20
   13a00:	andeq	r3, r1, ip, lsl sl
   13a04:	andeq	r3, r1, r0, asr #20
   13a08:	andeq	r3, r1, r4, lsr sl
   13a0c:	mov	r3, sl
   13a10:	mov	r2, #4096	; 0x1000
   13a14:	b	1387c <__assert_fail@plt+0x26d0>
   13a18:	mov	r3, sl
   13a1c:	mov	r2, #40960	; 0xa000
   13a20:	b	1387c <__assert_fail@plt+0x26d0>
   13a24:	mov	r3, sl
   13a28:	mov	r2, #32768	; 0x8000
   13a2c:	b	1387c <__assert_fail@plt+0x26d0>
   13a30:	mov	r3, sl
   13a34:	mov	r2, #49152	; 0xc000
   13a38:	b	1387c <__assert_fail@plt+0x26d0>
   13a3c:	mov	r3, sl
   13a40:	mov	r2, sl
   13a44:	b	1387c <__assert_fail@plt+0x26d0>
   13a48:	mov	r2, #8192	; 0x2000
   13a4c:	b	1387c <__assert_fail@plt+0x26d0>
   13a50:	mov	r2, sl
   13a54:	mov	r1, r4
   13a58:	mov	r0, r5
   13a5c:	bl	128f4 <__assert_fail@plt+0x1748>
   13a60:	strh	r0, [r4, #56]	; 0x38
   13a64:	b	13894 <__assert_fail@plt+0x26e8>
   13a68:	ldr	r3, [r5, #44]	; 0x2c
   13a6c:	cmp	r3, #0
   13a70:	bne	138b8 <__assert_fail@plt+0x270c>
   13a74:	ldr	r1, [sp, #60]	; 0x3c
   13a78:	mov	r0, r9
   13a7c:	bl	12d18 <__assert_fail@plt+0x1b6c>
   13a80:	ldr	r3, [pc, #488]	; 13c70 <__assert_fail@plt+0x2ac4>
   13a84:	cmp	r0, r3
   13a88:	beq	13aac <__assert_fail@plt+0x2900>
   13a8c:	ldr	r3, [pc, #500]	; 13c88 <__assert_fail@plt+0x2adc>
   13a90:	cmp	r0, r3
   13a94:	beq	13aac <__assert_fail@plt+0x2900>
   13a98:	ldr	r3, [pc, #468]	; 13c74 <__assert_fail@plt+0x2ac8>
   13a9c:	cmp	r0, r3
   13aa0:	movne	r3, #1
   13aa4:	strne	r3, [sp, #48]	; 0x30
   13aa8:	bne	138b8 <__assert_fail@plt+0x270c>
   13aac:	str	sl, [sp, #48]	; 0x30
   13ab0:	b	138b8 <__assert_fail@plt+0x270c>
   13ab4:	ldr	r4, [sp, #4]
   13ab8:	b	138c8 <__assert_fail@plt+0x271c>
   13abc:	ldr	r0, [r5, #24]
   13ac0:	ldr	r1, [r5, #4]
   13ac4:	cmp	r1, #0
   13ac8:	beq	13af8 <__assert_fail@plt+0x294c>
   13acc:	ldr	r3, [r1, #24]
   13ad0:	add	r2, r1, #168	; 0xa8
   13ad4:	cmp	r3, r2
   13ad8:	ldrne	r2, [r1, #28]
   13adc:	subne	r3, r3, r2
   13ae0:	addne	r3, r0, r3
   13ae4:	strne	r3, [r1, #24]
   13ae8:	str	r0, [r1, #28]
   13aec:	ldr	r1, [r1, #8]
   13af0:	cmp	r1, #0
   13af4:	bne	13acc <__assert_fail@plt+0x2920>
   13af8:	ldr	r3, [sp, #8]
   13afc:	ldr	r2, [r3, #48]	; 0x30
   13b00:	cmp	r2, #0
   13b04:	blt	13680 <__assert_fail@plt+0x24d4>
   13b08:	ldr	r2, [r3, #24]
   13b0c:	add	r1, r3, #168	; 0xa8
   13b10:	cmp	r2, r1
   13b14:	ldrne	r1, [r3, #28]
   13b18:	subne	r2, r2, r1
   13b1c:	addne	r2, r0, r2
   13b20:	strne	r2, [r3, #24]
   13b24:	str	r0, [r3, #28]
   13b28:	ldr	r2, [r3, #8]
   13b2c:	cmp	r2, #0
   13b30:	ldreq	r2, [r3, #4]
   13b34:	mov	r3, r2
   13b38:	b	13afc <__assert_fail@plt+0x2950>
   13b3c:	ldr	r3, [pc, #328]	; 13c8c <__assert_fail@plt+0x2ae0>
   13b40:	mvn	r2, #0
   13b44:	ldr	r1, [r9, #4]
   13b48:	mov	r0, r5
   13b4c:	bl	12fd0 <__assert_fail@plt+0x1e24>
   13b50:	adds	r0, r0, #0
   13b54:	movne	r0, #1
   13b58:	b	136fc <__assert_fail@plt+0x2550>
   13b5c:	mov	r3, #7
   13b60:	strh	r3, [r9, #56]	; 0x38
   13b64:	ldr	r3, [r5, #48]	; 0x30
   13b68:	orr	r3, r3, #8192	; 0x2000
   13b6c:	str	r3, [r5, #48]	; 0x30
   13b70:	ldr	r0, [sp, #8]
   13b74:	bl	12c68 <__assert_fail@plt+0x1abc>
   13b78:	mov	r3, #0
   13b7c:	str	r3, [sp, #8]
   13b80:	b	1373c <__assert_fail@plt+0x2590>
   13b84:	ldr	r3, [sp, #40]	; 0x28
   13b88:	cmp	r3, #3
   13b8c:	beq	13ba4 <__assert_fail@plt+0x29f8>
   13b90:	ldr	r0, [sp, #8]
   13b94:	bl	12c68 <__assert_fail@plt+0x1abc>
   13b98:	mov	r3, #0
   13b9c:	str	r3, [sp, #8]
   13ba0:	b	1373c <__assert_fail@plt+0x2590>
   13ba4:	ldrh	r3, [r9, #56]	; 0x38
   13ba8:	cmp	r3, #4
   13bac:	cmpne	r3, #7
   13bb0:	movne	r3, #6
   13bb4:	strhne	r3, [r9, #56]	; 0x38
   13bb8:	b	13b90 <__assert_fail@plt+0x29e4>
   13bbc:	ldr	r3, [pc, #204]	; 13c90 <__assert_fail@plt+0x2ae4>
   13bc0:	str	r3, [r5, #44]	; 0x2c
   13bc4:	mov	r2, r8
   13bc8:	ldr	r1, [sp, #8]
   13bcc:	mov	r0, r5
   13bd0:	bl	12a4c <__assert_fail@plt+0x18a0>
   13bd4:	str	r0, [sp, #8]
   13bd8:	mov	r3, #0
   13bdc:	str	r3, [r5, #44]	; 0x2c
   13be0:	b	1373c <__assert_fail@plt+0x2590>
   13be4:	mov	r3, #24576	; 0x6000
   13be8:	str	r3, [r4, #80]	; 0x50
   13bec:	mov	r2, #1
   13bf0:	mov	r3, #0
   13bf4:	b	13890 <__assert_fail@plt+0x26e4>
   13bf8:	mov	r3, #24576	; 0x6000
   13bfc:	str	r3, [r4, #80]	; 0x50
   13c00:	mov	r2, #2
   13c04:	mov	r3, #0
   13c08:	b	13890 <__assert_fail@plt+0x26e4>
   13c0c:	mov	r3, #8192	; 0x2000
   13c10:	str	r3, [r4, #80]	; 0x50
   13c14:	mov	r2, #2
   13c18:	mov	r3, #0
   13c1c:	b	13890 <__assert_fail@plt+0x26e4>
   13c20:	mov	r3, #11
   13c24:	strh	r3, [r4, #56]	; 0x38
   13c28:	ldrb	r3, [r7, #18]
   13c2c:	sub	r3, r3, #1
   13c30:	cmp	r3, #11
   13c34:	ldrls	pc, [pc, r3, lsl #2]
   13c38:	b	13a3c <__assert_fail@plt+0x2890>
   13c3c:	andeq	r3, r1, ip, lsl #20
   13c40:	andeq	r3, r1, ip, lsl #24
   13c44:	andeq	r3, r1, ip, lsr sl
   13c48:	andeq	r3, r1, r4, ror r8
   13c4c:	andeq	r3, r1, ip, lsr sl
   13c50:	strdeq	r3, [r1], -r8
   13c54:	andeq	r3, r1, ip, lsr sl
   13c58:	andeq	r3, r1, r4, lsr #20
   13c5c:	andeq	r3, r1, ip, lsr sl
   13c60:	andeq	r3, r1, r8, lsl sl
   13c64:	andeq	r3, r1, ip, lsr sl
   13c68:	andeq	r3, r1, r0, lsr sl
   13c6c:	andeq	r8, r1, r0, lsr #13
   13c70:	andeq	r6, r0, r9, ror #18
   13c74:			; <UNDEFINED> instruction: 0xff534d42
   13c78:	andeq	r9, r0, r0, lsr #31
   13c7c:	movtpl	r4, #24911	; 0x614f
   13c80:	andeq	r0, r0, r6, lsl #8
   13c84:	andeq	r2, r0, r0, lsl r7
   13c88:			; <UNDEFINED> instruction: 0x01021994
   13c8c:	andeq	sl, r1, r8, asr r1
   13c90:	andeq	r2, r1, ip, asr #16
   13c94:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13c98:	sub	sp, sp, #20
   13c9c:	bic	r3, r1, #4080	; 0xff0
   13ca0:	bics	r3, r3, #15
   13ca4:	bne	13dc4 <__assert_fail@plt+0x2c18>
   13ca8:	mov	r7, r0
   13cac:	mov	r9, r1
   13cb0:	mov	fp, r2
   13cb4:	and	r3, r1, #516	; 0x204
   13cb8:	cmp	r3, #516	; 0x204
   13cbc:	beq	13dd8 <__assert_fail@plt+0x2c2c>
   13cc0:	tst	r1, #18
   13cc4:	beq	13dec <__assert_fail@plt+0x2c40>
   13cc8:	mov	r1, #96	; 0x60
   13ccc:	mov	r0, #1
   13cd0:	bl	18790 <__assert_fail@plt+0x75e4>
   13cd4:	subs	r6, r0, #0
   13cd8:	beq	14008 <__assert_fail@plt+0x2e5c>
   13cdc:	str	fp, [r6, #44]	; 0x2c
   13ce0:	tst	r9, #2
   13ce4:	streq	r9, [r6, #48]	; 0x30
   13ce8:	bicne	r3, r9, #512	; 0x200
   13cec:	orrne	r3, r3, #4
   13cf0:	strne	r3, [r6, #48]	; 0x30
   13cf4:	mvn	r3, #99	; 0x63
   13cf8:	str	r3, [r6, #32]
   13cfc:	ldr	r0, [r7]
   13d00:	cmp	r0, #0
   13d04:	beq	13e00 <__assert_fail@plt+0x2c54>
   13d08:	mov	r5, r7
   13d0c:	mov	r4, #0
   13d10:	bl	11044 <strlen@plt>
   13d14:	cmp	r4, r0
   13d18:	movcc	r4, r0
   13d1c:	ldr	r0, [r5, #4]!
   13d20:	cmp	r0, #0
   13d24:	bne	13d10 <__assert_fail@plt+0x2b64>
   13d28:	add	r1, r4, #1
   13d2c:	cmp	r1, #4096	; 0x1000
   13d30:	movcc	r1, #4096	; 0x1000
   13d34:	mov	r0, r6
   13d38:	bl	12884 <__assert_fail@plt+0x16d8>
   13d3c:	subs	sl, r0, #0
   13d40:	beq	13ffc <__assert_fail@plt+0x2e50>
   13d44:	ldr	r3, [r7]
   13d48:	cmp	r3, #0
   13d4c:	beq	14014 <__assert_fail@plt+0x2e68>
   13d50:	mov	r2, #0
   13d54:	ldr	r1, [pc, #716]	; 14028 <__assert_fail@plt+0x2e7c>
   13d58:	mov	r0, r6
   13d5c:	bl	12b20 <__assert_fail@plt+0x1974>
   13d60:	subs	r3, r0, #0
   13d64:	mov	r2, r3
   13d68:	str	r3, [sp, #8]
   13d6c:	beq	13ff4 <__assert_fail@plt+0x2e48>
   13d70:	mvn	r3, #0
   13d74:	str	r3, [r2, #48]	; 0x30
   13d78:	cmp	fp, #0
   13d7c:	beq	13d8c <__assert_fail@plt+0x2be0>
   13d80:	ldr	sl, [r6, #48]	; 0x30
   13d84:	lsr	sl, sl, #10
   13d88:	and	sl, sl, #1
   13d8c:	ldr	r4, [r7]
   13d90:	cmp	r4, #0
   13d94:	beq	13fa4 <__assert_fail@plt+0x2df8>
   13d98:	mov	r3, #0
   13d9c:	mov	r5, r3
   13da0:	str	r3, [sp, #12]
   13da4:	mov	r8, r3
   13da8:	lsr	r9, r9, #11
   13dac:	eor	r9, r9, #1
   13db0:	and	r3, r9, #1
   13db4:	mov	r9, r5
   13db8:	str	r6, [sp, #4]
   13dbc:	mov	r6, r3
   13dc0:	b	13e78 <__assert_fail@plt+0x2ccc>
   13dc4:	bl	11068 <__errno_location@plt>
   13dc8:	mov	r3, #22
   13dcc:	str	r3, [r0]
   13dd0:	mov	r6, #0
   13dd4:	b	14008 <__assert_fail@plt+0x2e5c>
   13dd8:	bl	11068 <__errno_location@plt>
   13ddc:	mov	r3, #22
   13de0:	str	r3, [r0]
   13de4:	mov	r6, #0
   13de8:	b	14008 <__assert_fail@plt+0x2e5c>
   13dec:	bl	11068 <__errno_location@plt>
   13df0:	mov	r3, #22
   13df4:	str	r3, [r0]
   13df8:	mov	r6, #0
   13dfc:	b	14008 <__assert_fail@plt+0x2e5c>
   13e00:	mov	r4, #0
   13e04:	b	13d28 <__assert_fail@plt+0x2b7c>
   13e08:	mov	r1, r4
   13e0c:	ldr	r0, [sp, #4]
   13e10:	bl	12b20 <__assert_fail@plt+0x1974>
   13e14:	subs	r4, r0, #0
   13e18:	beq	13fe0 <__assert_fail@plt+0x2e34>
   13e1c:	str	r9, [r4, #48]	; 0x30
   13e20:	ldr	r3, [sp, #8]
   13e24:	str	r3, [r4, #4]
   13e28:	add	r3, r4, #168	; 0xa8
   13e2c:	str	r3, [r4, #24]
   13e30:	cmp	r5, #0
   13e34:	moveq	r3, #0
   13e38:	andne	r3, sl, #1
   13e3c:	cmp	r3, #0
   13e40:	beq	13ee0 <__assert_fail@plt+0x2d34>
   13e44:	mov	r3, #11
   13e48:	strh	r3, [r4, #56]	; 0x38
   13e4c:	mov	r2, #2
   13e50:	mov	r3, #0
   13e54:	strd	r2, [r4, #112]	; 0x70
   13e58:	cmp	fp, #0
   13e5c:	beq	13ef8 <__assert_fail@plt+0x2d4c>
   13e60:	str	r5, [r4, #8]
   13e64:	mov	r5, r4
   13e68:	add	r8, r8, #1
   13e6c:	ldr	r4, [r7, #4]!
   13e70:	cmp	r4, #0
   13e74:	beq	13f18 <__assert_fail@plt+0x2d6c>
   13e78:	mov	r0, r4
   13e7c:	bl	11044 <strlen@plt>
   13e80:	mov	r2, r0
   13e84:	cmp	r0, #2
   13e88:	movls	r3, #0
   13e8c:	andhi	r3, r6, #1
   13e90:	cmp	r3, #0
   13e94:	beq	13e08 <__assert_fail@plt+0x2c5c>
   13e98:	add	r3, r4, r0
   13e9c:	ldrb	r3, [r3, #-1]
   13ea0:	cmp	r3, #47	; 0x2f
   13ea4:	bne	13e08 <__assert_fail@plt+0x2c5c>
   13ea8:	cmp	r0, #1
   13eac:	bls	13e08 <__assert_fail@plt+0x2c5c>
   13eb0:	sub	r1, r0, #2
   13eb4:	add	r3, r4, r1
   13eb8:	ldrb	r1, [r4, r1]
   13ebc:	cmp	r1, #47	; 0x2f
   13ec0:	bne	13e08 <__assert_fail@plt+0x2c5c>
   13ec4:	sub	r2, r2, #1
   13ec8:	cmp	r2, #1
   13ecc:	beq	13e08 <__assert_fail@plt+0x2c5c>
   13ed0:	ldrb	r1, [r3, #-1]!
   13ed4:	cmp	r1, #47	; 0x2f
   13ed8:	beq	13ec4 <__assert_fail@plt+0x2d18>
   13edc:	b	13e08 <__assert_fail@plt+0x2c5c>
   13ee0:	mov	r2, r9
   13ee4:	mov	r1, r4
   13ee8:	ldr	r0, [sp, #4]
   13eec:	bl	128f4 <__assert_fail@plt+0x1748>
   13ef0:	strh	r0, [r4, #56]	; 0x38
   13ef4:	b	13e58 <__assert_fail@plt+0x2cac>
   13ef8:	str	r9, [r4, #8]
   13efc:	cmp	r5, #0
   13f00:	ldrne	r3, [sp, #12]
   13f04:	strne	r4, [r3, #8]
   13f08:	strne	r4, [sp, #12]
   13f0c:	streq	r4, [sp, #12]
   13f10:	moveq	r5, r4
   13f14:	b	13e68 <__assert_fail@plt+0x2cbc>
   13f18:	ldr	r6, [sp, #4]
   13f1c:	cmp	fp, #0
   13f20:	cmpne	r8, #1
   13f24:	bhi	13f8c <__assert_fail@plt+0x2de0>
   13f28:	mov	r2, #0
   13f2c:	ldr	r1, [pc, #244]	; 14028 <__assert_fail@plt+0x2e7c>
   13f30:	mov	r0, r6
   13f34:	bl	12b20 <__assert_fail@plt+0x1974>
   13f38:	str	r0, [r6]
   13f3c:	cmp	r0, #0
   13f40:	beq	13fe4 <__assert_fail@plt+0x2e38>
   13f44:	str	r5, [r0, #8]
   13f48:	ldr	r3, [r6]
   13f4c:	mov	r2, #9
   13f50:	strh	r2, [r3, #56]	; 0x38
   13f54:	ldr	r3, [r6]
   13f58:	mov	r2, #1
   13f5c:	str	r2, [r3, #48]	; 0x30
   13f60:	mov	r0, r6
   13f64:	bl	12b94 <__assert_fail@plt+0x19e8>
   13f68:	cmp	r0, #0
   13f6c:	beq	13fe4 <__assert_fail@plt+0x2e38>
   13f70:	ldr	r3, [r6, #48]	; 0x30
   13f74:	tst	r3, #516	; 0x204
   13f78:	beq	13fbc <__assert_fail@plt+0x2e10>
   13f7c:	mvn	r1, #0
   13f80:	add	r0, r6, #60	; 0x3c
   13f84:	bl	15920 <__assert_fail@plt+0x4774>
   13f88:	b	14008 <__assert_fail@plt+0x2e5c>
   13f8c:	mov	r2, r8
   13f90:	mov	r1, r5
   13f94:	mov	r0, r6
   13f98:	bl	12a4c <__assert_fail@plt+0x18a0>
   13f9c:	mov	r5, r0
   13fa0:	b	13f28 <__assert_fail@plt+0x2d7c>
   13fa4:	mov	r5, #0
   13fa8:	b	13f28 <__assert_fail@plt+0x2d7c>
   13fac:	mov	r3, #0
   13fb0:	str	r3, [sp, #8]
   13fb4:	mov	r5, r3
   13fb8:	b	13f28 <__assert_fail@plt+0x2d7c>
   13fbc:	ldr	r1, [pc, #104]	; 1402c <__assert_fail@plt+0x2e80>
   13fc0:	mov	r0, r6
   13fc4:	bl	12c18 <__assert_fail@plt+0x1a6c>
   13fc8:	str	r0, [r6, #28]
   13fcc:	cmp	r0, #0
   13fd0:	ldrlt	r3, [r6, #48]	; 0x30
   13fd4:	orrlt	r3, r3, #4
   13fd8:	strlt	r3, [r6, #48]	; 0x30
   13fdc:	b	13f7c <__assert_fail@plt+0x2dd0>
   13fe0:	ldr	r6, [sp, #4]
   13fe4:	mov	r0, r5
   13fe8:	bl	12c68 <__assert_fail@plt+0x1abc>
   13fec:	ldr	r0, [sp, #8]
   13ff0:	bl	18d60 <__assert_fail@plt+0x7bb4>
   13ff4:	ldr	r0, [r6, #24]
   13ff8:	bl	18d60 <__assert_fail@plt+0x7bb4>
   13ffc:	mov	r0, r6
   14000:	bl	18d60 <__assert_fail@plt+0x7bb4>
   14004:	mov	r6, #0
   14008:	mov	r0, r6
   1400c:	add	sp, sp, #20
   14010:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14014:	cmp	fp, #0
   14018:	beq	13fac <__assert_fail@plt+0x2e00>
   1401c:	mov	r3, #0
   14020:	str	r3, [sp, #8]
   14024:	b	13d80 <__assert_fail@plt+0x2bd4>
   14028:	andeq	r9, r1, r4, lsr #17
   1402c:	andeq	sl, r1, ip, asr r1
   14030:	push	{r4, r5, r6, lr}
   14034:	mov	r5, r0
   14038:	ldr	r0, [r0]
   1403c:	cmp	r0, #0
   14040:	beq	14078 <__assert_fail@plt+0x2ecc>
   14044:	ldr	r3, [r0, #48]	; 0x30
   14048:	cmp	r3, #0
   1404c:	blt	140dc <__assert_fail@plt+0x2f30>
   14050:	ldr	r4, [r0, #8]
   14054:	cmp	r4, #0
   14058:	ldreq	r4, [r0, #4]
   1405c:	bl	18d60 <__assert_fail@plt+0x7bb4>
   14060:	mov	r0, r4
   14064:	ldr	r3, [r4, #48]	; 0x30
   14068:	cmp	r3, #0
   1406c:	bge	14050 <__assert_fail@plt+0x2ea4>
   14070:	mov	r0, r4
   14074:	bl	18d60 <__assert_fail@plt+0x7bb4>
   14078:	ldr	r0, [r5, #4]
   1407c:	cmp	r0, #0
   14080:	beq	14088 <__assert_fail@plt+0x2edc>
   14084:	bl	12c68 <__assert_fail@plt+0x1abc>
   14088:	ldr	r0, [r5, #8]
   1408c:	bl	18d60 <__assert_fail@plt+0x7bb4>
   14090:	ldr	r0, [r5, #24]
   14094:	bl	18d60 <__assert_fail@plt+0x7bb4>
   14098:	ldr	r3, [r5, #48]	; 0x30
   1409c:	tst	r3, #512	; 0x200
   140a0:	beq	140e4 <__assert_fail@plt+0x2f38>
   140a4:	ldr	r0, [r5, #32]
   140a8:	cmp	r0, #0
   140ac:	blt	140ec <__assert_fail@plt+0x2f40>
   140b0:	bl	11188 <close@plt>
   140b4:	cmp	r0, #0
   140b8:	beq	140ec <__assert_fail@plt+0x2f40>
   140bc:	bl	11068 <__errno_location@plt>
   140c0:	ldr	r4, [r0]
   140c4:	add	r0, r5, #60	; 0x3c
   140c8:	bl	12ce4 <__assert_fail@plt+0x1b38>
   140cc:	ldr	r0, [r5, #52]	; 0x34
   140d0:	cmp	r0, #0
   140d4:	bne	14104 <__assert_fail@plt+0x2f58>
   140d8:	b	14108 <__assert_fail@plt+0x2f5c>
   140dc:	mov	r4, r0
   140e0:	b	14070 <__assert_fail@plt+0x2ec4>
   140e4:	tst	r3, #4
   140e8:	beq	14128 <__assert_fail@plt+0x2f7c>
   140ec:	add	r0, r5, #60	; 0x3c
   140f0:	bl	12ce4 <__assert_fail@plt+0x1b38>
   140f4:	ldr	r0, [r5, #52]	; 0x34
   140f8:	cmp	r0, #0
   140fc:	movne	r4, #0
   14100:	beq	1417c <__assert_fail@plt+0x2fd0>
   14104:	bl	15418 <__assert_fail@plt+0x426c>
   14108:	mov	r0, r5
   1410c:	bl	12ca8 <__assert_fail@plt+0x1afc>
   14110:	mov	r0, r5
   14114:	bl	18d60 <__assert_fail@plt+0x7bb4>
   14118:	cmp	r4, #0
   1411c:	bne	1416c <__assert_fail@plt+0x2fc0>
   14120:	mov	r0, r4
   14124:	pop	{r4, r5, r6, pc}
   14128:	ldr	r0, [r5, #28]
   1412c:	bl	11128 <fchdir@plt>
   14130:	subs	r4, r0, #0
   14134:	beq	14140 <__assert_fail@plt+0x2f94>
   14138:	bl	11068 <__errno_location@plt>
   1413c:	ldr	r4, [r0]
   14140:	ldr	r0, [r5, #28]
   14144:	bl	11188 <close@plt>
   14148:	clz	r3, r4
   1414c:	lsr	r3, r3, #5
   14150:	cmp	r0, #0
   14154:	moveq	r3, #0
   14158:	cmp	r3, #0
   1415c:	beq	140c4 <__assert_fail@plt+0x2f18>
   14160:	bl	11068 <__errno_location@plt>
   14164:	ldr	r4, [r0]
   14168:	b	140c4 <__assert_fail@plt+0x2f18>
   1416c:	bl	11068 <__errno_location@plt>
   14170:	str	r4, [r0]
   14174:	mvn	r4, #0
   14178:	b	14120 <__assert_fail@plt+0x2f74>
   1417c:	mov	r0, r5
   14180:	bl	12ca8 <__assert_fail@plt+0x1afc>
   14184:	mov	r0, r5
   14188:	bl	18d60 <__assert_fail@plt+0x7bb4>
   1418c:	mov	r4, #0
   14190:	b	14120 <__assert_fail@plt+0x2f74>
   14194:	push	{r4, r5, r6, r7, r8, lr}
   14198:	ldr	r5, [r0]
   1419c:	cmp	r5, #0
   141a0:	beq	147e4 <__assert_fail@plt+0x3638>
   141a4:	ldr	r3, [r0, #48]	; 0x30
   141a8:	tst	r3, #8192	; 0x2000
   141ac:	bne	147ec <__assert_fail@plt+0x3640>
   141b0:	mov	r8, r0
   141b4:	ldrh	r3, [r5, #60]	; 0x3c
   141b8:	mov	r2, #3
   141bc:	strh	r2, [r5, #60]	; 0x3c
   141c0:	cmp	r3, #1
   141c4:	beq	14244 <__assert_fail@plt+0x3098>
   141c8:	cmp	r3, #2
   141cc:	beq	1425c <__assert_fail@plt+0x30b0>
   141d0:	ldrh	r2, [r5, #56]	; 0x38
   141d4:	cmp	r2, #1
   141d8:	bne	14450 <__assert_fail@plt+0x32a4>
   141dc:	cmp	r3, #4
   141e0:	beq	14204 <__assert_fail@plt+0x3058>
   141e4:	ldr	r1, [r8, #48]	; 0x30
   141e8:	tst	r1, #64	; 0x40
   141ec:	beq	142fc <__assert_fail@plt+0x3150>
   141f0:	ldrd	r6, [r5, #64]	; 0x40
   141f4:	ldrd	r2, [r8, #16]
   141f8:	cmp	r7, r3
   141fc:	cmpeq	r6, r2
   14200:	beq	142fc <__assert_fail@plt+0x3150>
   14204:	ldrh	r3, [r5, #58]	; 0x3a
   14208:	tst	r3, #2
   1420c:	bne	142f0 <__assert_fail@plt+0x3144>
   14210:	ldr	r0, [r8, #4]
   14214:	cmp	r0, #0
   14218:	beq	14228 <__assert_fail@plt+0x307c>
   1421c:	bl	12c68 <__assert_fail@plt+0x1abc>
   14220:	mov	r3, #0
   14224:	str	r3, [r8, #4]
   14228:	mov	r3, #6
   1422c:	strh	r3, [r5, #56]	; 0x38
   14230:	mov	r1, r5
   14234:	mov	r0, r8
   14238:	bl	131b8 <__assert_fail@plt+0x200c>
   1423c:	mov	r4, r5
   14240:	b	1452c <__assert_fail@plt+0x3380>
   14244:	mov	r2, #0
   14248:	mov	r1, r5
   1424c:	bl	128f4 <__assert_fail@plt+0x1748>
   14250:	strh	r0, [r5, #56]	; 0x38
   14254:	mov	r4, r5
   14258:	b	1452c <__assert_fail@plt+0x3380>
   1425c:	ldrh	r2, [r5, #56]	; 0x38
   14260:	sub	r3, r2, #12
   14264:	uxth	r3, r3
   14268:	cmp	r3, #1
   1426c:	bls	1427c <__assert_fail@plt+0x30d0>
   14270:	cmp	r2, #1
   14274:	bne	14450 <__assert_fail@plt+0x32a4>
   14278:	b	141e4 <__assert_fail@plt+0x3038>
   1427c:	mov	r2, #1
   14280:	mov	r1, r5
   14284:	bl	128f4 <__assert_fail@plt+0x1748>
   14288:	strh	r0, [r5, #56]	; 0x38
   1428c:	cmp	r0, #1
   14290:	movne	r4, r5
   14294:	bne	1462c <__assert_fail@plt+0x3480>
   14298:	ldr	r3, [r8, #48]	; 0x30
   1429c:	tst	r3, #4
   142a0:	movne	r4, r5
   142a4:	bne	1462c <__assert_fail@plt+0x3480>
   142a8:	ldr	r1, [pc, #1356]	; 147fc <__assert_fail@plt+0x3650>
   142ac:	mov	r0, r8
   142b0:	bl	12c18 <__assert_fail@plt+0x1a6c>
   142b4:	str	r0, [r5, #36]	; 0x24
   142b8:	cmp	r0, #0
   142bc:	blt	142d4 <__assert_fail@plt+0x3128>
   142c0:	ldrh	r3, [r5, #58]	; 0x3a
   142c4:	orr	r3, r3, #2
   142c8:	strh	r3, [r5, #58]	; 0x3a
   142cc:	mov	r4, r5
   142d0:	b	1462c <__assert_fail@plt+0x3480>
   142d4:	bl	11068 <__errno_location@plt>
   142d8:	ldr	r3, [r0]
   142dc:	str	r3, [r5, #32]
   142e0:	mov	r3, #7
   142e4:	strh	r3, [r5, #56]	; 0x38
   142e8:	mov	r4, r5
   142ec:	b	1462c <__assert_fail@plt+0x3480>
   142f0:	ldr	r0, [r5, #36]	; 0x24
   142f4:	bl	11188 <close@plt>
   142f8:	b	14210 <__assert_fail@plt+0x3064>
   142fc:	ldr	r0, [r8, #4]
   14300:	cmp	r0, #0
   14304:	beq	14350 <__assert_fail@plt+0x31a4>
   14308:	tst	r1, #4096	; 0x1000
   1430c:	bne	1433c <__assert_fail@plt+0x3190>
   14310:	ldr	r3, [r5, #24]
   14314:	mvn	r2, #0
   14318:	mov	r1, r5
   1431c:	mov	r0, r8
   14320:	bl	12fd0 <__assert_fail@plt+0x1e24>
   14324:	cmp	r0, #0
   14328:	bne	143a4 <__assert_fail@plt+0x31f8>
   1432c:	ldr	r4, [r8, #4]
   14330:	mov	r3, #0
   14334:	str	r3, [r8, #4]
   14338:	b	145ec <__assert_fail@plt+0x3440>
   1433c:	bic	r1, r1, #4096	; 0x1000
   14340:	str	r1, [r8, #48]	; 0x30
   14344:	bl	12c68 <__assert_fail@plt+0x1abc>
   14348:	mov	r3, #0
   1434c:	str	r3, [r8, #4]
   14350:	mov	r1, #3
   14354:	mov	r0, r8
   14358:	bl	1327c <__assert_fail@plt+0x20d0>
   1435c:	str	r0, [r8, #4]
   14360:	cmp	r0, #0
   14364:	bne	1432c <__assert_fail@plt+0x3180>
   14368:	ldr	r3, [r8, #48]	; 0x30
   1436c:	tst	r3, #8192	; 0x2000
   14370:	bne	147f4 <__assert_fail@plt+0x3648>
   14374:	ldr	r3, [r5, #32]
   14378:	cmp	r3, #0
   1437c:	beq	14390 <__assert_fail@plt+0x31e4>
   14380:	ldrh	r3, [r5, #56]	; 0x38
   14384:	cmp	r3, #4
   14388:	movne	r3, #7
   1438c:	strhne	r3, [r5, #56]	; 0x38
   14390:	mov	r1, r5
   14394:	mov	r0, r8
   14398:	bl	131b8 <__assert_fail@plt+0x200c>
   1439c:	mov	r4, r5
   143a0:	b	1452c <__assert_fail@plt+0x3380>
   143a4:	bl	11068 <__errno_location@plt>
   143a8:	ldr	r3, [r0]
   143ac:	str	r3, [r5, #32]
   143b0:	ldrh	r3, [r5, #58]	; 0x3a
   143b4:	orr	r3, r3, #1
   143b8:	strh	r3, [r5, #58]	; 0x3a
   143bc:	ldr	r3, [r8, #4]
   143c0:	cmp	r3, #0
   143c4:	beq	1432c <__assert_fail@plt+0x3180>
   143c8:	ldr	r2, [r3, #4]
   143cc:	ldr	r2, [r2, #24]
   143d0:	str	r2, [r3, #24]
   143d4:	ldr	r3, [r3, #8]
   143d8:	cmp	r3, #0
   143dc:	bne	143c8 <__assert_fail@plt+0x321c>
   143e0:	b	1432c <__assert_fail@plt+0x3180>
   143e4:	str	r3, [r8]
   143e8:	ldr	r2, [r8, #24]
   143ec:	ldr	r3, [r3, #40]	; 0x28
   143f0:	mov	r1, #0
   143f4:	strb	r1, [r2, r3]
   143f8:	mov	r1, #3
   143fc:	mov	r0, r8
   14400:	bl	1327c <__assert_fail@plt+0x20d0>
   14404:	subs	r4, r0, #0
   14408:	beq	14418 <__assert_fail@plt+0x326c>
   1440c:	mov	r0, r5
   14410:	bl	18d60 <__assert_fail@plt+0x7bb4>
   14414:	b	145ec <__assert_fail@plt+0x3440>
   14418:	ldr	r3, [r8, #48]	; 0x30
   1441c:	tst	r3, #8192	; 0x2000
   14420:	beq	1446c <__assert_fail@plt+0x32c0>
   14424:	b	1452c <__assert_fail@plt+0x3380>
   14428:	str	r4, [r8]
   1442c:	mov	r0, r5
   14430:	bl	18d60 <__assert_fail@plt+0x7bb4>
   14434:	ldr	r3, [r4, #48]	; 0x30
   14438:	cmp	r3, #0
   1443c:	beq	14534 <__assert_fail@plt+0x3388>
   14440:	ldrh	r3, [r4, #60]	; 0x3c
   14444:	mov	r5, r4
   14448:	cmp	r3, #4
   1444c:	bne	145e4 <__assert_fail@plt+0x3438>
   14450:	ldr	r4, [r5, #8]
   14454:	cmp	r4, #0
   14458:	bne	14428 <__assert_fail@plt+0x327c>
   1445c:	ldr	r3, [r5, #4]
   14460:	ldr	r2, [r3, #12]
   14464:	cmp	r2, #0
   14468:	bne	143e4 <__assert_fail@plt+0x3238>
   1446c:	ldr	r4, [r5, #4]
   14470:	str	r4, [r8]
   14474:	mov	r0, r5
   14478:	bl	18d60 <__assert_fail@plt+0x7bb4>
   1447c:	ldr	r3, [r4, #48]	; 0x30
   14480:	cmn	r3, #1
   14484:	beq	1472c <__assert_fail@plt+0x3580>
   14488:	ldrh	r3, [r4, #56]	; 0x38
   1448c:	cmp	r3, #11
   14490:	beq	14748 <__assert_fail@plt+0x359c>
   14494:	ldr	r2, [r8, #24]
   14498:	ldr	r3, [r4, #40]	; 0x28
   1449c:	mov	r1, #0
   144a0:	strb	r1, [r2, r3]
   144a4:	ldr	r3, [r4, #48]	; 0x30
   144a8:	cmp	r3, r1
   144ac:	beq	1474c <__assert_fail@plt+0x35a0>
   144b0:	ldrh	r3, [r4, #58]	; 0x3a
   144b4:	tst	r3, #2
   144b8:	beq	147a4 <__assert_fail@plt+0x35f8>
   144bc:	ldr	r3, [r8, #48]	; 0x30
   144c0:	tst	r3, #4
   144c4:	bne	144e0 <__assert_fail@plt+0x3334>
   144c8:	tst	r3, #512	; 0x200
   144cc:	beq	14778 <__assert_fail@plt+0x35cc>
   144d0:	mov	r2, #1
   144d4:	ldr	r1, [r4, #36]	; 0x24
   144d8:	mov	r0, r8
   144dc:	bl	12f00 <__assert_fail@plt+0x1d54>
   144e0:	ldr	r0, [r4, #36]	; 0x24
   144e4:	bl	11188 <close@plt>
   144e8:	ldrh	r3, [r4, #56]	; 0x38
   144ec:	cmp	r3, #2
   144f0:	beq	1451c <__assert_fail@plt+0x3370>
   144f4:	ldr	r3, [r4, #32]
   144f8:	cmp	r3, #0
   144fc:	movne	r3, #7
   14500:	strhne	r3, [r4, #56]	; 0x38
   14504:	bne	1451c <__assert_fail@plt+0x3370>
   14508:	mov	r3, #6
   1450c:	strh	r3, [r4, #56]	; 0x38
   14510:	mov	r1, r4
   14514:	mov	r0, r8
   14518:	bl	131b8 <__assert_fail@plt+0x200c>
   1451c:	ldr	r3, [r8, #48]	; 0x30
   14520:	and	r3, r3, #8192	; 0x2000
   14524:	cmp	r3, #0
   14528:	movne	r4, #0
   1452c:	mov	r0, r4
   14530:	pop	{r4, r5, r6, r7, r8, pc}
   14534:	mov	r0, r8
   14538:	bl	12f80 <__assert_fail@plt+0x1dd4>
   1453c:	cmp	r0, #0
   14540:	bne	145c0 <__assert_fail@plt+0x3414>
   14544:	mov	r0, r8
   14548:	bl	12ca8 <__assert_fail@plt+0x1afc>
   1454c:	ldr	r2, [r4, #52]	; 0x34
   14550:	str	r2, [r4, #40]	; 0x28
   14554:	add	r6, r4, #168	; 0xa8
   14558:	add	r2, r2, #1
   1455c:	mov	r1, r6
   14560:	ldr	r0, [r8, #24]
   14564:	bl	10f00 <memmove@plt>
   14568:	mov	r1, #47	; 0x2f
   1456c:	mov	r0, r6
   14570:	bl	110ec <strrchr@plt>
   14574:	cmp	r0, #0
   14578:	beq	145a8 <__assert_fail@plt+0x33fc>
   1457c:	cmp	r6, r0
   14580:	beq	145d4 <__assert_fail@plt+0x3428>
   14584:	add	r5, r0, #1
   14588:	mov	r0, r5
   1458c:	bl	11044 <strlen@plt>
   14590:	mov	r7, r0
   14594:	add	r2, r0, #1
   14598:	mov	r1, r5
   1459c:	mov	r0, r6
   145a0:	bl	10f00 <memmove@plt>
   145a4:	str	r7, [r4, #52]	; 0x34
   145a8:	ldr	r3, [r8, #24]
   145ac:	str	r3, [r4, #28]
   145b0:	str	r3, [r4, #24]
   145b4:	mov	r0, r8
   145b8:	bl	12b94 <__assert_fail@plt+0x19e8>
   145bc:	b	1462c <__assert_fail@plt+0x3480>
   145c0:	ldr	r3, [r8, #48]	; 0x30
   145c4:	orr	r3, r3, #8192	; 0x2000
   145c8:	str	r3, [r8, #48]	; 0x30
   145cc:	mov	r4, #0
   145d0:	b	1452c <__assert_fail@plt+0x3380>
   145d4:	ldrb	r3, [r4, #169]	; 0xa9
   145d8:	cmp	r3, #0
   145dc:	bne	14584 <__assert_fail@plt+0x33d8>
   145e0:	b	145a8 <__assert_fail@plt+0x33fc>
   145e4:	cmp	r3, #2
   145e8:	beq	14680 <__assert_fail@plt+0x34d4>
   145ec:	ldr	r2, [r8, #24]
   145f0:	ldr	r0, [r4, #4]
   145f4:	ldr	r1, [r0, #40]	; 0x28
   145f8:	sub	r3, r1, #1
   145fc:	ldr	r0, [r0, #28]
   14600:	ldrb	r0, [r0, r3]
   14604:	cmp	r0, #47	; 0x2f
   14608:	movne	r3, r1
   1460c:	add	r0, r2, r3
   14610:	mov	r1, #47	; 0x2f
   14614:	strb	r1, [r2, r3]
   14618:	ldr	r2, [r4, #52]	; 0x34
   1461c:	add	r2, r2, #1
   14620:	add	r1, r4, #168	; 0xa8
   14624:	add	r0, r0, #1
   14628:	bl	10f00 <memmove@plt>
   1462c:	str	r4, [r8]
   14630:	ldrh	r3, [r4, #56]	; 0x38
   14634:	cmp	r3, #11
   14638:	beq	146f4 <__assert_fail@plt+0x3548>
   1463c:	ldrh	r3, [r4, #56]	; 0x38
   14640:	cmp	r3, #1
   14644:	bne	1452c <__assert_fail@plt+0x3380>
   14648:	ldr	r3, [r4, #48]	; 0x30
   1464c:	cmp	r3, #0
   14650:	ldrdeq	r2, [r4, #64]	; 0x40
   14654:	strdeq	r2, [r8, #16]
   14658:	mov	r1, r4
   1465c:	mov	r0, r8
   14660:	bl	12e34 <__assert_fail@plt+0x1c88>
   14664:	cmp	r0, #0
   14668:	bne	1452c <__assert_fail@plt+0x3380>
   1466c:	bl	11068 <__errno_location@plt>
   14670:	mov	r3, #12
   14674:	str	r3, [r0]
   14678:	mov	r4, #0
   1467c:	b	1452c <__assert_fail@plt+0x3380>
   14680:	mov	r2, #1
   14684:	mov	r1, r4
   14688:	mov	r0, r8
   1468c:	bl	128f4 <__assert_fail@plt+0x1748>
   14690:	strh	r0, [r4, #56]	; 0x38
   14694:	cmp	r0, #1
   14698:	beq	146a8 <__assert_fail@plt+0x34fc>
   1469c:	mov	r3, #3
   146a0:	strh	r3, [r4, #60]	; 0x3c
   146a4:	b	145ec <__assert_fail@plt+0x3440>
   146a8:	ldr	r3, [r8, #48]	; 0x30
   146ac:	tst	r3, #4
   146b0:	bne	1469c <__assert_fail@plt+0x34f0>
   146b4:	ldr	r1, [pc, #320]	; 147fc <__assert_fail@plt+0x3650>
   146b8:	mov	r0, r8
   146bc:	bl	12c18 <__assert_fail@plt+0x1a6c>
   146c0:	str	r0, [r4, #36]	; 0x24
   146c4:	cmp	r0, #0
   146c8:	bge	146e4 <__assert_fail@plt+0x3538>
   146cc:	bl	11068 <__errno_location@plt>
   146d0:	ldr	r3, [r0]
   146d4:	str	r3, [r4, #32]
   146d8:	mov	r3, #7
   146dc:	strh	r3, [r4, #56]	; 0x38
   146e0:	b	1469c <__assert_fail@plt+0x34f0>
   146e4:	ldrh	r3, [r4, #58]	; 0x3a
   146e8:	orr	r3, r3, #2
   146ec:	strh	r3, [r4, #58]	; 0x3a
   146f0:	b	1469c <__assert_fail@plt+0x34f0>
   146f4:	ldrd	r2, [r4, #112]	; 0x70
   146f8:	cmp	r3, #0
   146fc:	cmpeq	r2, #2
   14700:	beq	14714 <__assert_fail@plt+0x3568>
   14704:	cmp	r3, #0
   14708:	cmpeq	r2, #1
   1470c:	beq	1452c <__assert_fail@plt+0x3380>
   14710:	bl	1117c <abort@plt>
   14714:	mov	r2, #0
   14718:	mov	r1, r4
   1471c:	mov	r0, r8
   14720:	bl	128f4 <__assert_fail@plt+0x1748>
   14724:	strh	r0, [r4, #56]	; 0x38
   14728:	b	1463c <__assert_fail@plt+0x3490>
   1472c:	mov	r0, r4
   14730:	bl	18d60 <__assert_fail@plt+0x7bb4>
   14734:	bl	11068 <__errno_location@plt>
   14738:	mov	r4, #0
   1473c:	str	r4, [r0]
   14740:	str	r4, [r8]
   14744:	b	1452c <__assert_fail@plt+0x3380>
   14748:	bl	1117c <abort@plt>
   1474c:	mov	r0, r8
   14750:	bl	12f80 <__assert_fail@plt+0x1dd4>
   14754:	cmp	r0, #0
   14758:	beq	144e8 <__assert_fail@plt+0x333c>
   1475c:	bl	11068 <__errno_location@plt>
   14760:	ldr	r3, [r0]
   14764:	str	r3, [r4, #32]
   14768:	ldr	r3, [r8, #48]	; 0x30
   1476c:	orr	r3, r3, #8192	; 0x2000
   14770:	str	r3, [r8, #48]	; 0x30
   14774:	b	144e8 <__assert_fail@plt+0x333c>
   14778:	ldr	r0, [r4, #36]	; 0x24
   1477c:	bl	11128 <fchdir@plt>
   14780:	cmp	r0, #0
   14784:	beq	144e0 <__assert_fail@plt+0x3334>
   14788:	bl	11068 <__errno_location@plt>
   1478c:	ldr	r3, [r0]
   14790:	str	r3, [r4, #32]
   14794:	ldr	r3, [r8, #48]	; 0x30
   14798:	orr	r3, r3, #8192	; 0x2000
   1479c:	str	r3, [r8, #48]	; 0x30
   147a0:	b	144e0 <__assert_fail@plt+0x3334>
   147a4:	tst	r3, #1
   147a8:	bne	144e8 <__assert_fail@plt+0x333c>
   147ac:	ldr	r3, [pc, #76]	; 14800 <__assert_fail@plt+0x3654>
   147b0:	mvn	r2, #0
   147b4:	ldr	r1, [r4, #4]
   147b8:	mov	r0, r8
   147bc:	bl	12fd0 <__assert_fail@plt+0x1e24>
   147c0:	cmp	r0, #0
   147c4:	beq	144e8 <__assert_fail@plt+0x333c>
   147c8:	bl	11068 <__errno_location@plt>
   147cc:	ldr	r3, [r0]
   147d0:	str	r3, [r4, #32]
   147d4:	ldr	r3, [r8, #48]	; 0x30
   147d8:	orr	r3, r3, #8192	; 0x2000
   147dc:	str	r3, [r8, #48]	; 0x30
   147e0:	b	144e8 <__assert_fail@plt+0x333c>
   147e4:	mov	r4, #0
   147e8:	b	1452c <__assert_fail@plt+0x3380>
   147ec:	mov	r4, #0
   147f0:	b	1452c <__assert_fail@plt+0x3380>
   147f4:	mov	r4, #0
   147f8:	b	1452c <__assert_fail@plt+0x3380>
   147fc:	andeq	sl, r1, ip, asr r1
   14800:	andeq	sl, r1, r8, asr r1
   14804:	cmp	r2, #4
   14808:	bhi	14818 <__assert_fail@plt+0x366c>
   1480c:	strh	r2, [r1, #60]	; 0x3c
   14810:	mov	r0, #0
   14814:	bx	lr
   14818:	push	{r4, lr}
   1481c:	bl	11068 <__errno_location@plt>
   14820:	mov	r3, #22
   14824:	str	r3, [r0]
   14828:	mov	r0, #1
   1482c:	pop	{r4, pc}
   14830:	push	{r4, r5, r6, r7, r8, lr}
   14834:	bics	r3, r1, #4096	; 0x1000
   14838:	bne	148dc <__assert_fail@plt+0x3730>
   1483c:	mov	r4, r0
   14840:	mov	r6, r1
   14844:	ldr	r5, [r0]
   14848:	bl	11068 <__errno_location@plt>
   1484c:	mov	r7, r0
   14850:	mov	r3, #0
   14854:	str	r3, [r0]
   14858:	ldr	r3, [r4, #48]	; 0x30
   1485c:	tst	r3, #8192	; 0x2000
   14860:	bne	14980 <__assert_fail@plt+0x37d4>
   14864:	ldrh	r3, [r5, #56]	; 0x38
   14868:	cmp	r3, #9
   1486c:	beq	148f0 <__assert_fail@plt+0x3744>
   14870:	cmp	r3, #1
   14874:	bne	14988 <__assert_fail@plt+0x37dc>
   14878:	ldr	r0, [r4, #4]
   1487c:	cmp	r0, #0
   14880:	beq	14888 <__assert_fail@plt+0x36dc>
   14884:	bl	12c68 <__assert_fail@plt+0x1abc>
   14888:	cmp	r6, #4096	; 0x1000
   1488c:	ldreq	r3, [r4, #48]	; 0x30
   14890:	orreq	r3, r3, #4096	; 0x1000
   14894:	streq	r3, [r4, #48]	; 0x30
   14898:	moveq	r6, #2
   1489c:	movne	r6, #1
   148a0:	ldr	r3, [r5, #48]	; 0x30
   148a4:	cmp	r3, #0
   148a8:	bne	148c8 <__assert_fail@plt+0x371c>
   148ac:	ldr	r3, [r5, #24]
   148b0:	ldrb	r3, [r3]
   148b4:	cmp	r3, #47	; 0x2f
   148b8:	beq	148c8 <__assert_fail@plt+0x371c>
   148bc:	ldr	r3, [r4, #48]	; 0x30
   148c0:	tst	r3, #4
   148c4:	beq	148f8 <__assert_fail@plt+0x374c>
   148c8:	mov	r1, r6
   148cc:	mov	r0, r4
   148d0:	bl	1327c <__assert_fail@plt+0x20d0>
   148d4:	str	r0, [r4, #4]
   148d8:	pop	{r4, r5, r6, r7, r8, pc}
   148dc:	bl	11068 <__errno_location@plt>
   148e0:	mov	r3, #22
   148e4:	str	r3, [r0]
   148e8:	mov	r0, #0
   148ec:	pop	{r4, r5, r6, r7, r8, pc}
   148f0:	ldr	r0, [r5, #8]
   148f4:	pop	{r4, r5, r6, r7, r8, pc}
   148f8:	ldr	r1, [pc, #144]	; 14990 <__assert_fail@plt+0x37e4>
   148fc:	mov	r0, r4
   14900:	bl	12c18 <__assert_fail@plt+0x1a6c>
   14904:	subs	r5, r0, #0
   14908:	blt	14940 <__assert_fail@plt+0x3794>
   1490c:	mov	r1, r6
   14910:	mov	r0, r4
   14914:	bl	1327c <__assert_fail@plt+0x20d0>
   14918:	str	r0, [r4, #4]
   1491c:	ldr	r3, [r4, #48]	; 0x30
   14920:	tst	r3, #512	; 0x200
   14924:	beq	1494c <__assert_fail@plt+0x37a0>
   14928:	mov	r2, #1
   1492c:	mov	r1, r5
   14930:	mov	r0, r4
   14934:	bl	12f00 <__assert_fail@plt+0x1d54>
   14938:	ldr	r0, [r4, #4]
   1493c:	pop	{r4, r5, r6, r7, r8, pc}
   14940:	mov	r0, #0
   14944:	str	r0, [r4, #4]
   14948:	pop	{r4, r5, r6, r7, r8, pc}
   1494c:	mov	r0, r5
   14950:	bl	11128 <fchdir@plt>
   14954:	cmp	r0, #0
   14958:	bne	14968 <__assert_fail@plt+0x37bc>
   1495c:	mov	r0, r5
   14960:	bl	11188 <close@plt>
   14964:	b	14938 <__assert_fail@plt+0x378c>
   14968:	ldr	r4, [r7]
   1496c:	mov	r0, r5
   14970:	bl	11188 <close@plt>
   14974:	str	r4, [r7]
   14978:	mov	r0, #0
   1497c:	pop	{r4, r5, r6, r7, r8, pc}
   14980:	mov	r0, #0
   14984:	pop	{r4, r5, r6, r7, r8, pc}
   14988:	mov	r0, #0
   1498c:	pop	{r4, r5, r6, r7, r8, pc}
   14990:	andeq	sl, r1, ip, asr r1
   14994:	andeq	r0, r0, r0
   14998:	push	{r4, lr}
   1499c:	ror	r0, r0, #3
   149a0:	bl	19240 <__assert_fail@plt+0x8094>
   149a4:	mov	r0, r1
   149a8:	pop	{r4, pc}
   149ac:	cmp	r1, r0
   149b0:	movne	r0, #0
   149b4:	moveq	r0, #1
   149b8:	bx	lr
   149bc:	ldr	r3, [r0, #20]
   149c0:	ldr	r2, [pc, #176]	; 14a78 <__assert_fail@plt+0x38cc>
   149c4:	cmp	r3, r2
   149c8:	beq	14a60 <__assert_fail@plt+0x38b4>
   149cc:	vldr	s15, [r3, #8]
   149d0:	vldr	s14, [pc, #144]	; 14a68 <__assert_fail@plt+0x38bc>
   149d4:	vcmpe.f32	s15, s14
   149d8:	vmrs	APSR_nzcv, fpscr
   149dc:	ble	14a3c <__assert_fail@plt+0x3890>
   149e0:	vldr	s14, [pc, #132]	; 14a6c <__assert_fail@plt+0x38c0>
   149e4:	vcmpe.f32	s15, s14
   149e8:	vmrs	APSR_nzcv, fpscr
   149ec:	bpl	14a3c <__assert_fail@plt+0x3890>
   149f0:	vldr	s13, [r3, #12]
   149f4:	vldr	s14, [pc, #116]	; 14a70 <__assert_fail@plt+0x38c4>
   149f8:	vcmpe.f32	s13, s14
   149fc:	vmrs	APSR_nzcv, fpscr
   14a00:	ble	14a3c <__assert_fail@plt+0x3890>
   14a04:	vldr	s14, [r3]
   14a08:	vcmpe.f32	s14, #0.0
   14a0c:	vmrs	APSR_nzcv, fpscr
   14a10:	blt	14a3c <__assert_fail@plt+0x3890>
   14a14:	vldr	s13, [pc, #76]	; 14a68 <__assert_fail@plt+0x38bc>
   14a18:	vadd.f32	s14, s14, s13
   14a1c:	vldr	s13, [r3, #4]
   14a20:	vcmpe.f32	s14, s13
   14a24:	vmrs	APSR_nzcv, fpscr
   14a28:	bpl	14a3c <__assert_fail@plt+0x3890>
   14a2c:	vldr	s12, [pc, #64]	; 14a74 <__assert_fail@plt+0x38c8>
   14a30:	vcmpe.f32	s13, s12
   14a34:	vmrs	APSR_nzcv, fpscr
   14a38:	bls	14a4c <__assert_fail@plt+0x38a0>
   14a3c:	ldr	r3, [pc, #52]	; 14a78 <__assert_fail@plt+0x38cc>
   14a40:	str	r3, [r0, #20]
   14a44:	mov	r0, #0
   14a48:	bx	lr
   14a4c:	vcmpe.f32	s15, s14
   14a50:	vmrs	APSR_nzcv, fpscr
   14a54:	ble	14a3c <__assert_fail@plt+0x3890>
   14a58:	mov	r0, #1
   14a5c:	bx	lr
   14a60:	mov	r0, #1
   14a64:	bx	lr
   14a68:	stclcc	12, cr12, [ip, #820]	; 0x334
   14a6c:	svccc	0x00666666
   14a70:	svccc	0x008ccccd
   14a74:	svccc	0x00800000
   14a78:	andeq	sl, r1, r0, ror #2
   14a7c:	push	{r4, lr}
   14a80:	mov	r4, r0
   14a84:	mov	r0, r1
   14a88:	ldr	r3, [r4, #24]
   14a8c:	ldr	r1, [r4, #8]
   14a90:	blx	r3
   14a94:	ldr	r3, [r4, #8]
   14a98:	cmp	r0, r3
   14a9c:	bcs	14aac <__assert_fail@plt+0x3900>
   14aa0:	ldr	r3, [r4]
   14aa4:	add	r0, r3, r0, lsl #3
   14aa8:	pop	{r4, pc}
   14aac:	bl	1117c <abort@plt>
   14ab0:	push	{r4, r5, r6, r7, r8, lr}
   14ab4:	ldrb	r3, [r1, #16]
   14ab8:	cmp	r3, #0
   14abc:	bne	14aec <__assert_fail@plt+0x3940>
   14ac0:	vmov	s15, r0
   14ac4:	vcvt.f32.u32	s13, s15
   14ac8:	vldr	s14, [r1, #8]
   14acc:	vdiv.f32	s15, s13, s14
   14ad0:	vldr	s14, [pc, #204]	; 14ba4 <__assert_fail@plt+0x39f8>
   14ad4:	vcmpe.f32	s15, s14
   14ad8:	vmrs	APSR_nzcv, fpscr
   14adc:	movge	r7, #0
   14ae0:	bge	14b24 <__assert_fail@plt+0x3978>
   14ae4:	vcvt.u32.f32	s15, s15
   14ae8:	vmov	r0, s15
   14aec:	cmp	r0, #10
   14af0:	movcc	r0, #10
   14af4:	orr	r7, r0, #1
   14af8:	cmn	r7, #1
   14afc:	ldrne	r8, [pc, #164]	; 14ba8 <__assert_fail@plt+0x39fc>
   14b00:	bne	14b50 <__assert_fail@plt+0x39a4>
   14b04:	lsr	r3, r7, #30
   14b08:	lsl	r2, r7, #2
   14b0c:	adds	r3, r3, #0
   14b10:	movne	r3, #1
   14b14:	cmp	r2, #0
   14b18:	movlt	r3, #1
   14b1c:	cmp	r3, #0
   14b20:	movne	r7, #0
   14b24:	mov	r0, r7
   14b28:	pop	{r4, r5, r6, r7, r8, pc}
   14b2c:	mov	r4, #3
   14b30:	mov	r1, r4
   14b34:	mov	r0, r7
   14b38:	bl	19240 <__assert_fail@plt+0x8094>
   14b3c:	cmp	r1, #0
   14b40:	bne	14b04 <__assert_fail@plt+0x3958>
   14b44:	add	r7, r7, #2
   14b48:	cmn	r7, #1
   14b4c:	beq	14b04 <__assert_fail@plt+0x3958>
   14b50:	cmp	r7, #9
   14b54:	bls	14b2c <__assert_fail@plt+0x3980>
   14b58:	umull	r2, r3, r8, r7
   14b5c:	lsr	r3, r3, #1
   14b60:	add	r3, r3, r3, lsl #1
   14b64:	cmp	r7, r3
   14b68:	beq	14b44 <__assert_fail@plt+0x3998>
   14b6c:	mov	r6, #16
   14b70:	mov	r5, #9
   14b74:	mov	r4, #3
   14b78:	add	r5, r5, r6
   14b7c:	add	r4, r4, #2
   14b80:	cmp	r5, r7
   14b84:	bcs	14b30 <__assert_fail@plt+0x3984>
   14b88:	add	r6, r6, #8
   14b8c:	mov	r1, r4
   14b90:	mov	r0, r7
   14b94:	bl	19240 <__assert_fail@plt+0x8094>
   14b98:	cmp	r1, #0
   14b9c:	bne	14b78 <__assert_fail@plt+0x39cc>
   14ba0:	b	14b44 <__assert_fail@plt+0x3998>
   14ba4:	svcmi	0x00800000
   14ba8:	bge	feabf65c <optarg@@GLIBC_2.4+0xfea944dc>
   14bac:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14bb0:	ldr	r7, [r1]
   14bb4:	ldr	r3, [r1, #4]
   14bb8:	cmp	r7, r3
   14bbc:	bcs	14cf0 <__assert_fail@plt+0x3b44>
   14bc0:	mov	fp, r2
   14bc4:	mov	sl, r1
   14bc8:	mov	r6, r0
   14bcc:	add	r7, r7, #8
   14bd0:	mov	r9, #0
   14bd4:	b	14c3c <__assert_fail@plt+0x3a90>
   14bd8:	str	r5, [r0]
   14bdc:	ldr	r2, [r6, #12]
   14be0:	add	r2, r2, #1
   14be4:	str	r2, [r6, #12]
   14be8:	str	r9, [r4]
   14bec:	ldr	r2, [r6, #36]	; 0x24
   14bf0:	str	r2, [r4, #4]
   14bf4:	str	r4, [r6, #36]	; 0x24
   14bf8:	b	14c84 <__assert_fail@plt+0x3ad8>
   14bfc:	mov	r0, #8
   14c00:	bl	187e0 <__assert_fail@plt+0x7634>
   14c04:	cmp	r0, #0
   14c08:	beq	14cf8 <__assert_fail@plt+0x3b4c>
   14c0c:	str	r4, [r0]
   14c10:	ldr	r3, [r5, #4]
   14c14:	str	r3, [r0, #4]
   14c18:	str	r0, [r5, #4]
   14c1c:	str	r9, [r8, #-8]
   14c20:	ldr	r3, [sl, #12]
   14c24:	sub	r3, r3, #1
   14c28:	str	r3, [sl, #12]
   14c2c:	add	r7, r7, #8
   14c30:	ldr	r3, [sl, #4]
   14c34:	cmp	r3, r8
   14c38:	bls	14ce8 <__assert_fail@plt+0x3b3c>
   14c3c:	mov	r8, r7
   14c40:	ldr	r3, [r7, #-8]
   14c44:	cmp	r3, #0
   14c48:	beq	14c2c <__assert_fail@plt+0x3a80>
   14c4c:	ldr	r4, [r7, #-4]
   14c50:	cmp	r4, #0
   14c54:	beq	14c90 <__assert_fail@plt+0x3ae4>
   14c58:	ldr	r5, [r4]
   14c5c:	mov	r1, r5
   14c60:	mov	r0, r6
   14c64:	bl	14a7c <__assert_fail@plt+0x38d0>
   14c68:	ldr	r3, [r4, #4]
   14c6c:	ldr	r2, [r0]
   14c70:	cmp	r2, #0
   14c74:	beq	14bd8 <__assert_fail@plt+0x3a2c>
   14c78:	ldr	r2, [r0, #4]
   14c7c:	str	r2, [r4, #4]
   14c80:	str	r4, [r0, #4]
   14c84:	mov	r4, r3
   14c88:	cmp	r3, #0
   14c8c:	bne	14c58 <__assert_fail@plt+0x3aac>
   14c90:	ldr	r4, [r8, #-8]
   14c94:	str	r9, [r8, #-4]
   14c98:	cmp	fp, #0
   14c9c:	bne	14c2c <__assert_fail@plt+0x3a80>
   14ca0:	mov	r1, r4
   14ca4:	mov	r0, r6
   14ca8:	bl	14a7c <__assert_fail@plt+0x38d0>
   14cac:	mov	r5, r0
   14cb0:	ldr	r3, [r0]
   14cb4:	cmp	r3, #0
   14cb8:	beq	14cd4 <__assert_fail@plt+0x3b28>
   14cbc:	ldr	r0, [r6, #36]	; 0x24
   14cc0:	cmp	r0, #0
   14cc4:	beq	14bfc <__assert_fail@plt+0x3a50>
   14cc8:	ldr	r3, [r0, #4]
   14ccc:	str	r3, [r6, #36]	; 0x24
   14cd0:	b	14c0c <__assert_fail@plt+0x3a60>
   14cd4:	str	r4, [r0]
   14cd8:	ldr	r3, [r6, #12]
   14cdc:	add	r3, r3, #1
   14ce0:	str	r3, [r6, #12]
   14ce4:	b	14c1c <__assert_fail@plt+0x3a70>
   14ce8:	mov	r0, #1
   14cec:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14cf0:	mov	r0, #1
   14cf4:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14cf8:	mov	r0, fp
   14cfc:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14d00:	push	{r4, r5, r6, r7, r8, lr}
   14d04:	mov	r6, r0
   14d08:	mov	r5, r1
   14d0c:	mov	r8, r2
   14d10:	mov	r7, r3
   14d14:	bl	14a7c <__assert_fail@plt+0x38d0>
   14d18:	str	r0, [r8]
   14d1c:	ldr	r3, [r0]
   14d20:	cmp	r3, #0
   14d24:	beq	14dfc <__assert_fail@plt+0x3c50>
   14d28:	mov	r4, r0
   14d2c:	cmp	r5, r3
   14d30:	beq	14dc4 <__assert_fail@plt+0x3c18>
   14d34:	ldr	r2, [r6, #28]
   14d38:	mov	r1, r3
   14d3c:	mov	r0, r5
   14d40:	blx	r2
   14d44:	cmp	r0, #0
   14d48:	bne	14dc4 <__assert_fail@plt+0x3c18>
   14d4c:	ldr	r3, [r4, #4]
   14d50:	cmp	r3, #0
   14d54:	beq	14e04 <__assert_fail@plt+0x3c58>
   14d58:	ldr	r1, [r3]
   14d5c:	cmp	r5, r1
   14d60:	beq	14d94 <__assert_fail@plt+0x3be8>
   14d64:	ldr	r3, [r6, #28]
   14d68:	mov	r0, r5
   14d6c:	blx	r3
   14d70:	cmp	r0, #0
   14d74:	bne	14d94 <__assert_fail@plt+0x3be8>
   14d78:	ldr	r4, [r4, #4]
   14d7c:	ldr	r3, [r4, #4]
   14d80:	cmp	r3, #0
   14d84:	beq	14dfc <__assert_fail@plt+0x3c50>
   14d88:	ldr	r1, [r3]
   14d8c:	cmp	r5, r1
   14d90:	bne	14d64 <__assert_fail@plt+0x3bb8>
   14d94:	ldr	r2, [r4, #4]
   14d98:	ldr	r3, [r2]
   14d9c:	cmp	r7, #0
   14da0:	beq	14dfc <__assert_fail@plt+0x3c50>
   14da4:	ldr	r1, [r2, #4]
   14da8:	str	r1, [r4, #4]
   14dac:	mov	r1, #0
   14db0:	str	r1, [r2]
   14db4:	ldr	r1, [r6, #36]	; 0x24
   14db8:	str	r1, [r2, #4]
   14dbc:	str	r2, [r6, #36]	; 0x24
   14dc0:	b	14dfc <__assert_fail@plt+0x3c50>
   14dc4:	ldr	r3, [r4]
   14dc8:	cmp	r7, #0
   14dcc:	beq	14dfc <__assert_fail@plt+0x3c50>
   14dd0:	ldr	r2, [r4, #4]
   14dd4:	cmp	r2, #0
   14dd8:	ldmne	r2, {r0, r1}
   14ddc:	stmne	r4, {r0, r1}
   14de0:	movne	r1, #0
   14de4:	strne	r1, [r2]
   14de8:	ldrne	r1, [r6, #36]	; 0x24
   14dec:	strne	r1, [r2, #4]
   14df0:	strne	r2, [r6, #36]	; 0x24
   14df4:	moveq	r2, #0
   14df8:	streq	r2, [r4]
   14dfc:	mov	r0, r3
   14e00:	pop	{r4, r5, r6, r7, r8, pc}
   14e04:	mov	r3, #0
   14e08:	b	14dfc <__assert_fail@plt+0x3c50>
   14e0c:	ldr	r0, [r0, #8]
   14e10:	bx	lr
   14e14:	ldr	r0, [r0, #12]
   14e18:	bx	lr
   14e1c:	ldr	r0, [r0, #16]
   14e20:	bx	lr
   14e24:	ldr	r1, [r0]
   14e28:	ldr	ip, [r0, #4]
   14e2c:	cmp	r1, ip
   14e30:	bcs	14e88 <__assert_fail@plt+0x3cdc>
   14e34:	mov	r0, #0
   14e38:	b	14e54 <__assert_fail@plt+0x3ca8>
   14e3c:	mov	r2, #1
   14e40:	cmp	r0, r2
   14e44:	movcc	r0, r2
   14e48:	add	r1, r1, #8
   14e4c:	cmp	r1, ip
   14e50:	bcs	14e84 <__assert_fail@plt+0x3cd8>
   14e54:	ldr	r3, [r1]
   14e58:	cmp	r3, #0
   14e5c:	beq	14e48 <__assert_fail@plt+0x3c9c>
   14e60:	ldr	r3, [r1, #4]
   14e64:	cmp	r3, #0
   14e68:	beq	14e3c <__assert_fail@plt+0x3c90>
   14e6c:	mov	r2, #1
   14e70:	add	r2, r2, #1
   14e74:	ldr	r3, [r3, #4]
   14e78:	cmp	r3, #0
   14e7c:	bne	14e70 <__assert_fail@plt+0x3cc4>
   14e80:	b	14e40 <__assert_fail@plt+0x3c94>
   14e84:	bx	lr
   14e88:	mov	r0, #0
   14e8c:	bx	lr
   14e90:	push	{lr}		; (str lr, [sp, #-4]!)
   14e94:	ldr	r1, [r0]
   14e98:	ldr	lr, [r0, #4]
   14e9c:	cmp	r1, lr
   14ea0:	bcs	14ef0 <__assert_fail@plt+0x3d44>
   14ea4:	mov	r2, #0
   14ea8:	mov	ip, r2
   14eac:	b	14ebc <__assert_fail@plt+0x3d10>
   14eb0:	add	r1, r1, #8
   14eb4:	cmp	r1, lr
   14eb8:	bcs	14ef8 <__assert_fail@plt+0x3d4c>
   14ebc:	ldr	r3, [r1]
   14ec0:	cmp	r3, #0
   14ec4:	beq	14eb0 <__assert_fail@plt+0x3d04>
   14ec8:	add	ip, ip, #1
   14ecc:	add	r2, r2, #1
   14ed0:	ldr	r3, [r1, #4]
   14ed4:	cmp	r3, #0
   14ed8:	beq	14eb0 <__assert_fail@plt+0x3d04>
   14edc:	add	r2, r2, #1
   14ee0:	ldr	r3, [r3, #4]
   14ee4:	cmp	r3, #0
   14ee8:	bne	14edc <__assert_fail@plt+0x3d30>
   14eec:	b	14eb0 <__assert_fail@plt+0x3d04>
   14ef0:	mov	r2, #0
   14ef4:	mov	ip, r2
   14ef8:	ldr	r3, [r0, #12]
   14efc:	cmp	r3, ip
   14f00:	beq	14f0c <__assert_fail@plt+0x3d60>
   14f04:	mov	r0, #0
   14f08:	pop	{pc}		; (ldr pc, [sp], #4)
   14f0c:	ldr	r0, [r0, #16]
   14f10:	cmp	r0, r2
   14f14:	movne	r0, #0
   14f18:	moveq	r0, #1
   14f1c:	pop	{pc}		; (ldr pc, [sp], #4)
   14f20:	push	{r4, r5, r6, r7, r8, lr}
   14f24:	sub	sp, sp, #8
   14f28:	mov	r6, r0
   14f2c:	mov	r4, r1
   14f30:	ldr	r5, [r0, #8]
   14f34:	ldr	r7, [r0, #12]
   14f38:	bl	14e24 <__assert_fail@plt+0x3c78>
   14f3c:	mov	r8, r0
   14f40:	ldr	r3, [r6, #16]
   14f44:	ldr	r2, [pc, #116]	; 14fc0 <__assert_fail@plt+0x3e14>
   14f48:	mov	r1, #1
   14f4c:	mov	r0, r4
   14f50:	bl	110b0 <__fprintf_chk@plt>
   14f54:	mov	r3, r5
   14f58:	ldr	r2, [pc, #100]	; 14fc4 <__assert_fail@plt+0x3e18>
   14f5c:	mov	r1, #1
   14f60:	mov	r0, r4
   14f64:	bl	110b0 <__fprintf_chk@plt>
   14f68:	vmov	s15, r7
   14f6c:	vcvt.f64.u32	d6, s15
   14f70:	vldr	d7, [pc, #64]	; 14fb8 <__assert_fail@plt+0x3e0c>
   14f74:	vmul.f64	d6, d6, d7
   14f78:	vmov	s15, r5
   14f7c:	vcvt.f64.u32	d7, s15
   14f80:	vdiv.f64	d5, d6, d7
   14f84:	vstr	d5, [sp]
   14f88:	mov	r3, r7
   14f8c:	ldr	r2, [pc, #52]	; 14fc8 <__assert_fail@plt+0x3e1c>
   14f90:	mov	r1, #1
   14f94:	mov	r0, r4
   14f98:	bl	110b0 <__fprintf_chk@plt>
   14f9c:	mov	r3, r8
   14fa0:	ldr	r2, [pc, #36]	; 14fcc <__assert_fail@plt+0x3e20>
   14fa4:	mov	r1, #1
   14fa8:	mov	r0, r4
   14fac:	bl	110b0 <__fprintf_chk@plt>
   14fb0:	add	sp, sp, #8
   14fb4:	pop	{r4, r5, r6, r7, r8, pc}
   14fb8:	andeq	r0, r0, r0
   14fbc:	subsmi	r0, r9, r0
   14fc0:	andeq	sl, r1, r4, ror r1
   14fc4:	andeq	sl, r1, ip, lsl #3
   14fc8:	andeq	sl, r1, r4, lsr #3
   14fcc:	andeq	sl, r1, r8, asr #3
   14fd0:	push	{r4, r5, r6, lr}
   14fd4:	mov	r6, r0
   14fd8:	mov	r5, r1
   14fdc:	bl	14a7c <__assert_fail@plt+0x38d0>
   14fe0:	ldr	r1, [r0]
   14fe4:	cmp	r1, #0
   14fe8:	beq	1503c <__assert_fail@plt+0x3e90>
   14fec:	mov	r4, r0
   14ff0:	cmp	r0, #0
   14ff4:	beq	15044 <__assert_fail@plt+0x3e98>
   14ff8:	cmp	r5, r1
   14ffc:	beq	1502c <__assert_fail@plt+0x3e80>
   15000:	ldr	r3, [r6, #28]
   15004:	mov	r0, r5
   15008:	blx	r3
   1500c:	cmp	r0, #0
   15010:	bne	1502c <__assert_fail@plt+0x3e80>
   15014:	ldr	r4, [r4, #4]
   15018:	cmp	r4, #0
   1501c:	beq	15034 <__assert_fail@plt+0x3e88>
   15020:	ldr	r1, [r4]
   15024:	cmp	r5, r1
   15028:	bne	15000 <__assert_fail@plt+0x3e54>
   1502c:	ldr	r0, [r4]
   15030:	pop	{r4, r5, r6, pc}
   15034:	mov	r0, #0
   15038:	pop	{r4, r5, r6, pc}
   1503c:	mov	r0, #0
   15040:	pop	{r4, r5, r6, pc}
   15044:	mov	r0, #0
   15048:	pop	{r4, r5, r6, pc}
   1504c:	ldr	r3, [r0, #16]
   15050:	cmp	r3, #0
   15054:	beq	15098 <__assert_fail@plt+0x3eec>
   15058:	ldr	r3, [r0]
   1505c:	ldr	r2, [r0, #4]
   15060:	cmp	r3, r2
   15064:	bcs	15090 <__assert_fail@plt+0x3ee4>
   15068:	ldr	r0, [r3]
   1506c:	cmp	r0, #0
   15070:	bne	1508c <__assert_fail@plt+0x3ee0>
   15074:	add	r3, r3, #8
   15078:	cmp	r3, r2
   1507c:	bcs	15090 <__assert_fail@plt+0x3ee4>
   15080:	ldr	r0, [r3]
   15084:	cmp	r0, #0
   15088:	beq	15074 <__assert_fail@plt+0x3ec8>
   1508c:	bx	lr
   15090:	push	{r4, lr}
   15094:	bl	1117c <abort@plt>
   15098:	mov	r0, #0
   1509c:	b	1508c <__assert_fail@plt+0x3ee0>
   150a0:	push	{r4, r5, r6, lr}
   150a4:	mov	r5, r0
   150a8:	mov	r4, r1
   150ac:	bl	14a7c <__assert_fail@plt+0x38d0>
   150b0:	mov	r2, r0
   150b4:	mov	r3, r0
   150b8:	ldr	r1, [r3]
   150bc:	cmp	r4, r1
   150c0:	beq	150d4 <__assert_fail@plt+0x3f28>
   150c4:	ldr	r3, [r3, #4]
   150c8:	cmp	r3, #0
   150cc:	bne	150b8 <__assert_fail@plt+0x3f0c>
   150d0:	b	150e0 <__assert_fail@plt+0x3f34>
   150d4:	ldr	r3, [r3, #4]
   150d8:	cmp	r3, #0
   150dc:	bne	15100 <__assert_fail@plt+0x3f54>
   150e0:	ldr	r3, [r5, #4]
   150e4:	add	r2, r2, #8
   150e8:	cmp	r2, r3
   150ec:	bcs	15108 <__assert_fail@plt+0x3f5c>
   150f0:	ldr	r0, [r2]
   150f4:	cmp	r0, #0
   150f8:	beq	150e4 <__assert_fail@plt+0x3f38>
   150fc:	pop	{r4, r5, r6, pc}
   15100:	ldr	r0, [r3]
   15104:	pop	{r4, r5, r6, pc}
   15108:	mov	r0, #0
   1510c:	pop	{r4, r5, r6, pc}
   15110:	push	{r4, r5, lr}
   15114:	ldr	r4, [r0]
   15118:	ldr	r3, [r0, #4]
   1511c:	cmp	r4, r3
   15120:	bcs	1518c <__assert_fail@plt+0x3fe0>
   15124:	mov	r5, r0
   15128:	mov	r0, #0
   1512c:	b	15140 <__assert_fail@plt+0x3f94>
   15130:	add	r4, r4, #8
   15134:	ldr	r3, [r5, #4]
   15138:	cmp	r3, r4
   1513c:	bls	15188 <__assert_fail@plt+0x3fdc>
   15140:	ldr	r3, [r4]
   15144:	cmp	r3, #0
   15148:	beq	15130 <__assert_fail@plt+0x3f84>
   1514c:	cmp	r4, #0
   15150:	beq	15130 <__assert_fail@plt+0x3f84>
   15154:	cmp	r2, r0
   15158:	popls	{r4, r5, pc}
   1515c:	add	ip, r1, r0, lsl #2
   15160:	mov	r3, r4
   15164:	add	r0, r0, #1
   15168:	ldr	lr, [r3]
   1516c:	str	lr, [ip], #4
   15170:	ldr	r3, [r3, #4]
   15174:	cmp	r3, #0
   15178:	beq	15130 <__assert_fail@plt+0x3f84>
   1517c:	cmp	r2, r0
   15180:	bne	15164 <__assert_fail@plt+0x3fb8>
   15184:	pop	{r4, r5, pc}
   15188:	pop	{r4, r5, pc}
   1518c:	mov	r0, #0
   15190:	pop	{r4, r5, pc}
   15194:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   15198:	ldr	r8, [r0]
   1519c:	ldr	r3, [r0, #4]
   151a0:	cmp	r8, r3
   151a4:	bcs	1520c <__assert_fail@plt+0x4060>
   151a8:	mov	r7, r2
   151ac:	mov	r6, r1
   151b0:	mov	r9, r0
   151b4:	mov	r5, #0
   151b8:	b	151cc <__assert_fail@plt+0x4020>
   151bc:	add	r8, r8, #8
   151c0:	ldr	r3, [r9, #4]
   151c4:	cmp	r3, r8
   151c8:	bls	15210 <__assert_fail@plt+0x4064>
   151cc:	ldr	r3, [r8]
   151d0:	cmp	r3, #0
   151d4:	beq	151bc <__assert_fail@plt+0x4010>
   151d8:	cmp	r8, #0
   151dc:	beq	151bc <__assert_fail@plt+0x4010>
   151e0:	mov	r4, r8
   151e4:	mov	r1, r7
   151e8:	ldr	r0, [r4]
   151ec:	blx	r6
   151f0:	cmp	r0, #0
   151f4:	beq	15210 <__assert_fail@plt+0x4064>
   151f8:	add	r5, r5, #1
   151fc:	ldr	r4, [r4, #4]
   15200:	cmp	r4, #0
   15204:	bne	151e4 <__assert_fail@plt+0x4038>
   15208:	b	151bc <__assert_fail@plt+0x4010>
   1520c:	mov	r5, #0
   15210:	mov	r0, r5
   15214:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   15218:	ldrb	r3, [r0]
   1521c:	cmp	r3, #0
   15220:	beq	15258 <__assert_fail@plt+0x40ac>
   15224:	push	{r4, r5, r6, lr}
   15228:	mov	r4, r0
   1522c:	mov	r5, r1
   15230:	mov	r1, #0
   15234:	rsb	r0, r1, r1, lsl #5
   15238:	mov	r1, r5
   1523c:	add	r0, r0, r3
   15240:	bl	19240 <__assert_fail@plt+0x8094>
   15244:	ldrb	r3, [r4, #1]!
   15248:	cmp	r3, #0
   1524c:	bne	15234 <__assert_fail@plt+0x4088>
   15250:	mov	r0, r1
   15254:	pop	{r4, r5, r6, pc}
   15258:	mov	r1, #0
   1525c:	mov	r0, r1
   15260:	bx	lr
   15264:	push	{lr}		; (str lr, [sp, #-4]!)
   15268:	mov	ip, r0
   1526c:	ldr	lr, [pc, #16]	; 15284 <__assert_fail@plt+0x40d8>
   15270:	ldm	lr!, {r0, r1, r2, r3}
   15274:	stmia	ip!, {r0, r1, r2, r3}
   15278:	ldr	r3, [lr]
   1527c:	str	r3, [ip]
   15280:	pop	{pc}		; (ldr pc, [sp], #4)
   15284:	andeq	sl, r1, r0, ror #2
   15288:	push	{r4, r5, r6, r7, r8, lr}
   1528c:	mov	r8, r0
   15290:	mov	r5, r1
   15294:	subs	r7, r2, #0
   15298:	ldr	r2, [pc, #180]	; 15354 <__assert_fail@plt+0x41a8>
   1529c:	cmp	r7, #0
   152a0:	moveq	r7, r2
   152a4:	subs	r6, r3, #0
   152a8:	ldr	r3, [pc, #168]	; 15358 <__assert_fail@plt+0x41ac>
   152ac:	cmp	r6, #0
   152b0:	moveq	r6, r3
   152b4:	mov	r0, #40	; 0x28
   152b8:	bl	187e0 <__assert_fail@plt+0x7634>
   152bc:	subs	r4, r0, #0
   152c0:	beq	1533c <__assert_fail@plt+0x4190>
   152c4:	ldr	r3, [pc, #144]	; 1535c <__assert_fail@plt+0x41b0>
   152c8:	cmp	r5, #0
   152cc:	moveq	r5, r3
   152d0:	str	r5, [r4, #20]
   152d4:	mov	r0, r4
   152d8:	bl	149bc <__assert_fail@plt+0x3810>
   152dc:	cmp	r0, #0
   152e0:	beq	15344 <__assert_fail@plt+0x4198>
   152e4:	mov	r1, r5
   152e8:	mov	r0, r8
   152ec:	bl	14ab0 <__assert_fail@plt+0x3904>
   152f0:	str	r0, [r4, #8]
   152f4:	cmp	r0, #0
   152f8:	beq	15344 <__assert_fail@plt+0x4198>
   152fc:	mov	r1, #8
   15300:	bl	18790 <__assert_fail@plt+0x75e4>
   15304:	str	r0, [r4]
   15308:	cmp	r0, #0
   1530c:	beq	15344 <__assert_fail@plt+0x4198>
   15310:	ldr	r3, [r4, #8]
   15314:	add	r0, r0, r3, lsl #3
   15318:	str	r0, [r4, #4]
   1531c:	mov	r3, #0
   15320:	str	r3, [r4, #12]
   15324:	str	r3, [r4, #16]
   15328:	str	r7, [r4, #24]
   1532c:	str	r6, [r4, #28]
   15330:	ldr	r2, [sp, #24]
   15334:	str	r2, [r4, #32]
   15338:	str	r3, [r4, #36]	; 0x24
   1533c:	mov	r0, r4
   15340:	pop	{r4, r5, r6, r7, r8, pc}
   15344:	mov	r0, r4
   15348:	bl	18d60 <__assert_fail@plt+0x7bb4>
   1534c:	mov	r4, #0
   15350:	b	1533c <__assert_fail@plt+0x4190>
   15354:	muleq	r1, r8, r9
   15358:	andeq	r4, r1, ip, lsr #19
   1535c:	andeq	sl, r1, r0, ror #2
   15360:	push	{r4, r5, r6, r7, r8, lr}
   15364:	mov	r5, r0
   15368:	ldr	r7, [r0]
   1536c:	ldr	r3, [r0, #4]
   15370:	cmp	r7, r3
   15374:	bcs	15408 <__assert_fail@plt+0x425c>
   15378:	add	r7, r7, #8
   1537c:	mov	r6, #0
   15380:	b	153e8 <__assert_fail@plt+0x423c>
   15384:	str	r6, [r4]
   15388:	ldr	r3, [r4, #4]
   1538c:	ldr	r2, [r5, #36]	; 0x24
   15390:	str	r2, [r4, #4]
   15394:	str	r4, [r5, #36]	; 0x24
   15398:	mov	r4, r3
   1539c:	cmp	r3, #0
   153a0:	beq	153bc <__assert_fail@plt+0x4210>
   153a4:	ldr	r3, [r5, #32]
   153a8:	cmp	r3, #0
   153ac:	beq	15384 <__assert_fail@plt+0x41d8>
   153b0:	ldr	r0, [r4]
   153b4:	blx	r3
   153b8:	b	15384 <__assert_fail@plt+0x41d8>
   153bc:	ldr	r3, [r5, #32]
   153c0:	cmp	r3, #0
   153c4:	beq	153d0 <__assert_fail@plt+0x4224>
   153c8:	ldr	r0, [r8, #-8]
   153cc:	blx	r3
   153d0:	str	r6, [r8, #-8]
   153d4:	str	r6, [r8, #-4]
   153d8:	add	r7, r7, #8
   153dc:	ldr	r3, [r5, #4]
   153e0:	cmp	r3, r8
   153e4:	bls	15408 <__assert_fail@plt+0x425c>
   153e8:	mov	r8, r7
   153ec:	ldr	r3, [r7, #-8]
   153f0:	cmp	r3, #0
   153f4:	beq	153d8 <__assert_fail@plt+0x422c>
   153f8:	ldr	r4, [r7, #-4]
   153fc:	cmp	r4, #0
   15400:	bne	153a4 <__assert_fail@plt+0x41f8>
   15404:	b	153bc <__assert_fail@plt+0x4210>
   15408:	mov	r3, #0
   1540c:	str	r3, [r5, #12]
   15410:	str	r3, [r5, #16]
   15414:	pop	{r4, r5, r6, r7, r8, pc}
   15418:	push	{r4, r5, r6, lr}
   1541c:	mov	r5, r0
   15420:	ldr	r3, [r0, #32]
   15424:	cmp	r3, #0
   15428:	beq	15490 <__assert_fail@plt+0x42e4>
   1542c:	ldr	r3, [r0, #16]
   15430:	cmp	r3, #0
   15434:	beq	15490 <__assert_fail@plt+0x42e4>
   15438:	ldr	r6, [r0]
   1543c:	ldr	r3, [r0, #4]
   15440:	cmp	r6, r3
   15444:	bcc	1545c <__assert_fail@plt+0x42b0>
   15448:	b	154d0 <__assert_fail@plt+0x4324>
   1544c:	add	r6, r6, #8
   15450:	ldr	r3, [r5, #4]
   15454:	cmp	r3, r6
   15458:	bls	15490 <__assert_fail@plt+0x42e4>
   1545c:	ldr	r3, [r6]
   15460:	cmp	r3, #0
   15464:	beq	1544c <__assert_fail@plt+0x42a0>
   15468:	cmp	r6, #0
   1546c:	beq	1544c <__assert_fail@plt+0x42a0>
   15470:	mov	r4, r6
   15474:	ldr	r3, [r5, #32]
   15478:	ldr	r0, [r4]
   1547c:	blx	r3
   15480:	ldr	r4, [r4, #4]
   15484:	cmp	r4, #0
   15488:	bne	15474 <__assert_fail@plt+0x42c8>
   1548c:	b	1544c <__assert_fail@plt+0x42a0>
   15490:	ldr	r6, [r5]
   15494:	ldr	r3, [r5, #4]
   15498:	cmp	r6, r3
   1549c:	bcs	154d0 <__assert_fail@plt+0x4324>
   154a0:	ldr	r0, [r6, #4]
   154a4:	cmp	r0, #0
   154a8:	beq	154c0 <__assert_fail@plt+0x4314>
   154ac:	ldr	r4, [r0, #4]
   154b0:	bl	18d60 <__assert_fail@plt+0x7bb4>
   154b4:	mov	r0, r4
   154b8:	cmp	r4, #0
   154bc:	bne	154ac <__assert_fail@plt+0x4300>
   154c0:	add	r6, r6, #8
   154c4:	ldr	r3, [r5, #4]
   154c8:	cmp	r3, r6
   154cc:	bhi	154a0 <__assert_fail@plt+0x42f4>
   154d0:	ldr	r0, [r5, #36]	; 0x24
   154d4:	cmp	r0, #0
   154d8:	beq	154f0 <__assert_fail@plt+0x4344>
   154dc:	ldr	r4, [r0, #4]
   154e0:	bl	18d60 <__assert_fail@plt+0x7bb4>
   154e4:	mov	r0, r4
   154e8:	cmp	r4, #0
   154ec:	bne	154dc <__assert_fail@plt+0x4330>
   154f0:	ldr	r0, [r5]
   154f4:	bl	18d60 <__assert_fail@plt+0x7bb4>
   154f8:	mov	r0, r5
   154fc:	bl	18d60 <__assert_fail@plt+0x7bb4>
   15500:	pop	{r4, r5, r6, pc}
   15504:	push	{r4, r5, lr}
   15508:	sub	sp, sp, #44	; 0x2c
   1550c:	mov	r4, r0
   15510:	mov	r0, r1
   15514:	ldr	r1, [r4, #20]
   15518:	bl	14ab0 <__assert_fail@plt+0x3904>
   1551c:	subs	r5, r0, #0
   15520:	beq	15618 <__assert_fail@plt+0x446c>
   15524:	ldr	r3, [r4, #8]
   15528:	cmp	r5, r3
   1552c:	beq	15628 <__assert_fail@plt+0x447c>
   15530:	mov	r1, #8
   15534:	mov	r0, r5
   15538:	bl	18790 <__assert_fail@plt+0x75e4>
   1553c:	str	r0, [sp]
   15540:	cmp	r0, #0
   15544:	beq	15630 <__assert_fail@plt+0x4484>
   15548:	str	r5, [sp, #8]
   1554c:	add	r0, r0, r5, lsl #3
   15550:	str	r0, [sp, #4]
   15554:	mov	r2, #0
   15558:	str	r2, [sp, #12]
   1555c:	str	r2, [sp, #16]
   15560:	ldr	r3, [r4, #20]
   15564:	str	r3, [sp, #20]
   15568:	ldr	r3, [r4, #24]
   1556c:	str	r3, [sp, #24]
   15570:	ldr	r3, [r4, #28]
   15574:	str	r3, [sp, #28]
   15578:	ldr	r3, [r4, #32]
   1557c:	str	r3, [sp, #32]
   15580:	ldr	r3, [r4, #36]	; 0x24
   15584:	str	r3, [sp, #36]	; 0x24
   15588:	mov	r1, r4
   1558c:	mov	r0, sp
   15590:	bl	14bac <__assert_fail@plt+0x3a00>
   15594:	subs	r5, r0, #0
   15598:	bne	155e0 <__assert_fail@plt+0x4434>
   1559c:	ldr	r3, [sp, #36]	; 0x24
   155a0:	str	r3, [r4, #36]	; 0x24
   155a4:	mov	r2, #1
   155a8:	mov	r1, sp
   155ac:	mov	r0, r4
   155b0:	bl	14bac <__assert_fail@plt+0x3a00>
   155b4:	cmp	r0, #0
   155b8:	beq	15614 <__assert_fail@plt+0x4468>
   155bc:	mov	r2, #0
   155c0:	mov	r1, sp
   155c4:	mov	r0, r4
   155c8:	bl	14bac <__assert_fail@plt+0x3a00>
   155cc:	cmp	r0, #0
   155d0:	beq	15614 <__assert_fail@plt+0x4468>
   155d4:	ldr	r0, [sp]
   155d8:	bl	18d60 <__assert_fail@plt+0x7bb4>
   155dc:	b	1561c <__assert_fail@plt+0x4470>
   155e0:	ldr	r0, [r4]
   155e4:	bl	18d60 <__assert_fail@plt+0x7bb4>
   155e8:	ldr	r3, [sp]
   155ec:	str	r3, [r4]
   155f0:	ldr	r3, [sp, #4]
   155f4:	str	r3, [r4, #4]
   155f8:	ldr	r3, [sp, #8]
   155fc:	str	r3, [r4, #8]
   15600:	ldr	r3, [sp, #12]
   15604:	str	r3, [r4, #12]
   15608:	ldr	r3, [sp, #36]	; 0x24
   1560c:	str	r3, [r4, #36]	; 0x24
   15610:	b	1561c <__assert_fail@plt+0x4470>
   15614:	bl	1117c <abort@plt>
   15618:	mov	r5, #0
   1561c:	mov	r0, r5
   15620:	add	sp, sp, #44	; 0x2c
   15624:	pop	{r4, r5, pc}
   15628:	mov	r5, #1
   1562c:	b	1561c <__assert_fail@plt+0x4470>
   15630:	mov	r5, #0
   15634:	b	1561c <__assert_fail@plt+0x4470>
   15638:	push	{r4, r5, r6, lr}
   1563c:	sub	sp, sp, #8
   15640:	subs	r6, r1, #0
   15644:	beq	15680 <__assert_fail@plt+0x44d4>
   15648:	mov	r4, r0
   1564c:	mov	r5, r2
   15650:	mov	r3, #0
   15654:	add	r2, sp, #4
   15658:	mov	r1, r6
   1565c:	bl	14d00 <__assert_fail@plt+0x3b54>
   15660:	cmp	r0, #0
   15664:	beq	15684 <__assert_fail@plt+0x44d8>
   15668:	cmp	r5, #0
   1566c:	moveq	r0, #0
   15670:	strne	r0, [r5]
   15674:	movne	r0, #0
   15678:	add	sp, sp, #8
   1567c:	pop	{r4, r5, r6, pc}
   15680:	bl	1117c <abort@plt>
   15684:	vldr	s15, [r4, #12]
   15688:	vcvt.f32.u32	s14, s15
   1568c:	ldr	r3, [r4, #20]
   15690:	vldr	s15, [r4, #8]
   15694:	vcvt.f32.u32	s15, s15
   15698:	vldr	s13, [r3, #8]
   1569c:	vmul.f32	s15, s15, s13
   156a0:	vcmpe.f32	s14, s15
   156a4:	vmrs	APSR_nzcv, fpscr
   156a8:	bgt	156f8 <__assert_fail@plt+0x454c>
   156ac:	ldr	r3, [sp, #4]
   156b0:	ldr	r2, [r3]
   156b4:	cmp	r2, #0
   156b8:	beq	1579c <__assert_fail@plt+0x45f0>
   156bc:	ldr	r0, [r4, #36]	; 0x24
   156c0:	cmp	r0, #0
   156c4:	beq	15784 <__assert_fail@plt+0x45d8>
   156c8:	ldr	r3, [r0, #4]
   156cc:	str	r3, [r4, #36]	; 0x24
   156d0:	str	r6, [r0]
   156d4:	ldr	r3, [sp, #4]
   156d8:	ldr	r2, [r3, #4]
   156dc:	str	r2, [r0, #4]
   156e0:	str	r0, [r3, #4]
   156e4:	ldr	r3, [r4, #16]
   156e8:	add	r3, r3, #1
   156ec:	str	r3, [r4, #16]
   156f0:	mov	r0, #1
   156f4:	b	15678 <__assert_fail@plt+0x44cc>
   156f8:	mov	r0, r4
   156fc:	bl	149bc <__assert_fail@plt+0x3810>
   15700:	ldr	r3, [r4, #20]
   15704:	vldr	s13, [r3, #8]
   15708:	vldr	s15, [r4, #8]
   1570c:	vcvt.f32.u32	s15, s15
   15710:	vldr	s14, [r4, #12]
   15714:	vcvt.f32.u32	s14, s14
   15718:	vmul.f32	s12, s13, s15
   1571c:	vcmpe.f32	s14, s12
   15720:	vmrs	APSR_nzcv, fpscr
   15724:	ble	156ac <__assert_fail@plt+0x4500>
   15728:	ldrb	r2, [r3, #16]
   1572c:	cmp	r2, #0
   15730:	vldr	s14, [r3, #12]
   15734:	vmul.f32	s15, s15, s14
   15738:	vmuleq.f32	s15, s15, s13
   1573c:	vldr	s14, [pc, #140]	; 157d0 <__assert_fail@plt+0x4624>
   15740:	vcmpe.f32	s15, s14
   15744:	vmrs	APSR_nzcv, fpscr
   15748:	bge	157c0 <__assert_fail@plt+0x4614>
   1574c:	vcvt.u32.f32	s15, s15
   15750:	vmov	r1, s15
   15754:	mov	r0, r4
   15758:	bl	15504 <__assert_fail@plt+0x4358>
   1575c:	cmp	r0, #0
   15760:	beq	157c8 <__assert_fail@plt+0x461c>
   15764:	mov	r3, #0
   15768:	add	r2, sp, #4
   1576c:	mov	r1, r6
   15770:	mov	r0, r4
   15774:	bl	14d00 <__assert_fail@plt+0x3b54>
   15778:	cmp	r0, #0
   1577c:	beq	156ac <__assert_fail@plt+0x4500>
   15780:	bl	1117c <abort@plt>
   15784:	mov	r0, #8
   15788:	bl	187e0 <__assert_fail@plt+0x7634>
   1578c:	cmp	r0, #0
   15790:	bne	156d0 <__assert_fail@plt+0x4524>
   15794:	mvn	r0, #0
   15798:	b	15678 <__assert_fail@plt+0x44cc>
   1579c:	str	r6, [r3]
   157a0:	ldr	r3, [r4, #16]
   157a4:	add	r3, r3, #1
   157a8:	str	r3, [r4, #16]
   157ac:	ldr	r3, [r4, #12]
   157b0:	add	r3, r3, #1
   157b4:	str	r3, [r4, #12]
   157b8:	mov	r0, #1
   157bc:	b	15678 <__assert_fail@plt+0x44cc>
   157c0:	mvn	r0, #0
   157c4:	b	15678 <__assert_fail@plt+0x44cc>
   157c8:	mvn	r0, #0
   157cc:	b	15678 <__assert_fail@plt+0x44cc>
   157d0:	svcmi	0x00800000
   157d4:	push	{r4, lr}
   157d8:	sub	sp, sp, #8
   157dc:	mov	r4, r1
   157e0:	add	r2, sp, #4
   157e4:	bl	15638 <__assert_fail@plt+0x448c>
   157e8:	cmn	r0, #1
   157ec:	beq	15804 <__assert_fail@plt+0x4658>
   157f0:	cmp	r0, #0
   157f4:	movne	r0, r4
   157f8:	ldreq	r0, [sp, #4]
   157fc:	add	sp, sp, #8
   15800:	pop	{r4, pc}
   15804:	mov	r0, #0
   15808:	b	157fc <__assert_fail@plt+0x4650>
   1580c:	push	{r4, r5, r6, lr}
   15810:	sub	sp, sp, #8
   15814:	mov	r4, r0
   15818:	mov	r3, #1
   1581c:	add	r2, sp, #4
   15820:	bl	14d00 <__assert_fail@plt+0x3b54>
   15824:	subs	r5, r0, #0
   15828:	beq	15848 <__assert_fail@plt+0x469c>
   1582c:	ldr	r3, [r4, #16]
   15830:	sub	r3, r3, #1
   15834:	str	r3, [r4, #16]
   15838:	ldr	r3, [sp, #4]
   1583c:	ldr	r3, [r3]
   15840:	cmp	r3, #0
   15844:	beq	15854 <__assert_fail@plt+0x46a8>
   15848:	mov	r0, r5
   1584c:	add	sp, sp, #8
   15850:	pop	{r4, r5, r6, pc}
   15854:	ldr	r3, [r4, #12]
   15858:	sub	r3, r3, #1
   1585c:	str	r3, [r4, #12]
   15860:	vmov	s15, r3
   15864:	vcvt.f32.u32	s15, s15
   15868:	ldr	r3, [r4, #20]
   1586c:	vldr	s14, [r4, #8]
   15870:	vcvt.f32.u32	s14, s14
   15874:	vldr	s13, [r3]
   15878:	vmul.f32	s14, s14, s13
   1587c:	vcmpe.f32	s15, s14
   15880:	vmrs	APSR_nzcv, fpscr
   15884:	bpl	15848 <__assert_fail@plt+0x469c>
   15888:	mov	r0, r4
   1588c:	bl	149bc <__assert_fail@plt+0x3810>
   15890:	ldr	r3, [r4, #20]
   15894:	vldr	s15, [r4, #8]
   15898:	vcvt.f32.u32	s15, s15
   1589c:	vldr	s14, [r4, #12]
   158a0:	vcvt.f32.u32	s13, s14
   158a4:	vldr	s14, [r3]
   158a8:	vmul.f32	s14, s15, s14
   158ac:	vcmpe.f32	s13, s14
   158b0:	vmrs	APSR_nzcv, fpscr
   158b4:	bpl	15848 <__assert_fail@plt+0x469c>
   158b8:	ldrb	r2, [r3, #16]
   158bc:	cmp	r2, #0
   158c0:	vldr	s14, [r3, #4]
   158c4:	vmuleq.f32	s15, s15, s14
   158c8:	vldreq	s14, [r3, #8]
   158cc:	vmul.f32	s15, s15, s14
   158d0:	vcvt.u32.f32	s15, s15
   158d4:	vmov	r1, s15
   158d8:	mov	r0, r4
   158dc:	bl	15504 <__assert_fail@plt+0x4358>
   158e0:	cmp	r0, #0
   158e4:	bne	15848 <__assert_fail@plt+0x469c>
   158e8:	ldr	r0, [r4, #36]	; 0x24
   158ec:	cmp	r0, #0
   158f0:	beq	15908 <__assert_fail@plt+0x475c>
   158f4:	ldr	r6, [r0, #4]
   158f8:	bl	18d60 <__assert_fail@plt+0x7bb4>
   158fc:	mov	r0, r6
   15900:	cmp	r6, #0
   15904:	bne	158f4 <__assert_fail@plt+0x4748>
   15908:	mov	r3, #0
   1590c:	str	r3, [r4, #36]	; 0x24
   15910:	b	15848 <__assert_fail@plt+0x469c>
   15914:	push	{r4, lr}
   15918:	bl	1580c <__assert_fail@plt+0x4660>
   1591c:	pop	{r4, pc}
   15920:	mov	r3, #1
   15924:	strb	r3, [r0, #28]
   15928:	mov	r3, #0
   1592c:	str	r3, [r0, #20]
   15930:	str	r3, [r0, #24]
   15934:	str	r1, [r0]
   15938:	str	r1, [r0, #4]
   1593c:	str	r1, [r0, #8]
   15940:	str	r1, [r0, #12]
   15944:	str	r1, [r0, #16]
   15948:	bx	lr
   1594c:	ldrb	r0, [r0, #28]
   15950:	bx	lr
   15954:	mov	r2, r0
   15958:	ldrb	ip, [r0, #28]
   1595c:	eor	ip, ip, #1
   15960:	ldr	r3, [r0, #20]
   15964:	add	r3, ip, r3
   15968:	and	r3, r3, #3
   1596c:	ldr	r0, [r0, r3, lsl #2]
   15970:	str	r1, [r2, r3, lsl #2]
   15974:	str	r3, [r2, #20]
   15978:	ldr	r1, [r2, #24]
   1597c:	cmp	r3, r1
   15980:	addeq	r3, ip, r3
   15984:	andeq	r3, r3, #3
   15988:	streq	r3, [r2, #24]
   1598c:	mov	r3, #0
   15990:	strb	r3, [r2, #28]
   15994:	bx	lr
   15998:	ldrb	r3, [r0, #28]
   1599c:	cmp	r3, #0
   159a0:	bne	159d8 <__assert_fail@plt+0x482c>
   159a4:	mov	r2, r0
   159a8:	ldr	r3, [r0, #20]
   159ac:	ldr	r0, [r0, r3, lsl #2]
   159b0:	ldr	r1, [r2, #16]
   159b4:	str	r1, [r2, r3, lsl #2]
   159b8:	ldr	r1, [r2, #24]
   159bc:	cmp	r3, r1
   159c0:	moveq	r3, #1
   159c4:	strbeq	r3, [r2, #28]
   159c8:	addne	r3, r3, #3
   159cc:	andne	r3, r3, #3
   159d0:	strne	r3, [r2, #20]
   159d4:	bx	lr
   159d8:	push	{r4, lr}
   159dc:	bl	1117c <abort@plt>
   159e0:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   159e4:	mov	r4, r0
   159e8:	ldrb	r3, [r0]
   159ec:	sub	r2, r3, #48	; 0x30
   159f0:	uxtb	r2, r2
   159f4:	cmp	r2, #7
   159f8:	bls	15a90 <__assert_fail@plt+0x48e4>
   159fc:	cmp	r3, #0
   15a00:	moveq	r0, #1
   15a04:	beq	15a34 <__assert_fail@plt+0x4888>
   15a08:	mov	r1, r4
   15a0c:	mov	r0, #1
   15a10:	and	r2, r3, #239	; 0xef
   15a14:	cmp	r3, #43	; 0x2b
   15a18:	cmpne	r2, #45	; 0x2d
   15a1c:	moveq	r3, #1
   15a20:	movne	r3, #0
   15a24:	add	r0, r0, r3
   15a28:	ldrb	r3, [r1, #1]!
   15a2c:	cmp	r3, #0
   15a30:	bne	15a10 <__assert_fail@plt+0x4864>
   15a34:	mov	r1, #16
   15a38:	bl	18224 <__assert_fail@plt+0x7078>
   15a3c:	mov	ip, #0
   15a40:	mov	r8, #3
   15a44:	mov	sl, #1
   15a48:	mov	fp, #2
   15a4c:	ldr	r5, [pc, #820]	; 15d88 <__assert_fail@plt+0x4bdc>
   15a50:	mov	r1, #0
   15a54:	mov	r3, r4
   15a58:	add	r4, r4, #1
   15a5c:	ldrb	r2, [r3]
   15a60:	cmp	r2, #97	; 0x61
   15a64:	beq	15b60 <__assert_fail@plt+0x49b4>
   15a68:	bls	15b1c <__assert_fail@plt+0x4970>
   15a6c:	cmp	r2, #111	; 0x6f
   15a70:	beq	15b54 <__assert_fail@plt+0x49a8>
   15a74:	cmp	r2, #117	; 0x75
   15a78:	beq	15b40 <__assert_fail@plt+0x4994>
   15a7c:	cmp	r2, #103	; 0x67
   15a80:	beq	15b48 <__assert_fail@plt+0x499c>
   15a84:	bl	18d60 <__assert_fail@plt+0x7bb4>
   15a88:	mov	r0, #0
   15a8c:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15a90:	mov	r3, r0
   15a94:	mov	r5, #0
   15a98:	ldr	r0, [pc, #744]	; 15d88 <__assert_fail@plt+0x4bdc>
   15a9c:	lsl	r5, r5, #3
   15aa0:	sub	r5, r5, #48	; 0x30
   15aa4:	ldrb	r2, [r3], #1
   15aa8:	add	r5, r2, r5
   15aac:	cmp	r5, r0
   15ab0:	bhi	15d78 <__assert_fail@plt+0x4bcc>
   15ab4:	ldrb	r1, [r3]
   15ab8:	sub	r2, r1, #48	; 0x30
   15abc:	uxtb	r2, r2
   15ac0:	cmp	r2, #7
   15ac4:	bls	15a9c <__assert_fail@plt+0x48f0>
   15ac8:	cmp	r1, #0
   15acc:	bne	15d80 <__assert_fail@plt+0x4bd4>
   15ad0:	sub	r3, r3, r4
   15ad4:	cmp	r3, #4
   15ad8:	andle	r4, r5, #3072	; 0xc00
   15adc:	mvnle	r4, r4, lsr #10
   15ae0:	mvnle	r4, r4, lsl #10
   15ae4:	ldrgt	r4, [pc, #668]	; 15d88 <__assert_fail@plt+0x4bdc>
   15ae8:	mov	r0, #32
   15aec:	bl	1812c <__assert_fail@plt+0x6f80>
   15af0:	mov	r3, #61	; 0x3d
   15af4:	strb	r3, [r0]
   15af8:	mov	r3, #1
   15afc:	strb	r3, [r0, #1]
   15b00:	ldr	r3, [pc, #640]	; 15d88 <__assert_fail@plt+0x4bdc>
   15b04:	str	r3, [r0, #4]
   15b08:	str	r5, [r0, #8]
   15b0c:	str	r4, [r0, #12]
   15b10:	mov	r3, #0
   15b14:	strb	r3, [r0, #17]
   15b18:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15b1c:	cmp	r2, #45	; 0x2d
   15b20:	beq	15b34 <__assert_fail@plt+0x4988>
   15b24:	cmp	r2, #61	; 0x3d
   15b28:	beq	15b34 <__assert_fail@plt+0x4988>
   15b2c:	cmp	r2, #43	; 0x2b
   15b30:	bne	15a84 <__assert_fail@plt+0x48d8>
   15b34:	add	r6, ip, #1
   15b38:	add	ip, r0, ip, lsl #4
   15b3c:	b	15c24 <__assert_fail@plt+0x4a78>
   15b40:	orr	r1, r1, #2496	; 0x9c0
   15b44:	b	15a54 <__assert_fail@plt+0x48a8>
   15b48:	orr	r1, r1, #1072	; 0x430
   15b4c:	orr	r1, r1, #8
   15b50:	b	15a54 <__assert_fail@plt+0x48a8>
   15b54:	orr	r1, r1, #516	; 0x204
   15b58:	orr	r1, r1, #3
   15b5c:	b	15a54 <__assert_fail@plt+0x48a8>
   15b60:	ldr	r1, [pc, #544]	; 15d88 <__assert_fail@plt+0x4bdc>
   15b64:	b	15a54 <__assert_fail@plt+0x48a8>
   15b68:	sub	lr, lr, #48	; 0x30
   15b6c:	cmp	lr, #7
   15b70:	movls	r3, #0
   15b74:	bhi	15c54 <__assert_fail@plt+0x4aa8>
   15b78:	lsl	r3, r3, #3
   15b7c:	sub	r3, r3, #48	; 0x30
   15b80:	ldrb	lr, [r2], #1
   15b84:	add	r3, lr, r3
   15b88:	cmp	r3, r5
   15b8c:	bhi	15a84 <__assert_fail@plt+0x48d8>
   15b90:	ldrb	r7, [r2]
   15b94:	sub	lr, r7, #48	; 0x30
   15b98:	uxtb	lr, lr
   15b9c:	cmp	lr, #7
   15ba0:	bls	15b78 <__assert_fail@plt+0x49cc>
   15ba4:	cmp	r1, #0
   15ba8:	bne	15a84 <__assert_fail@plt+0x48d8>
   15bac:	cmp	r7, #0
   15bb0:	cmpne	r7, #44	; 0x2c
   15bb4:	bne	15a84 <__assert_fail@plt+0x48d8>
   15bb8:	mov	lr, ip
   15bbc:	strb	r4, [ip]
   15bc0:	strb	sl, [ip, #1]
   15bc4:	str	r5, [ip, #4]
   15bc8:	str	r3, [ip, #8]
   15bcc:	mov	r3, r2
   15bd0:	mov	r1, r5
   15bd4:	mov	r7, r5
   15bd8:	b	15c00 <__assert_fail@plt+0x4a54>
   15bdc:	add	r3, r3, #2
   15be0:	mov	r7, #56	; 0x38
   15be4:	mov	lr, ip
   15be8:	strb	r4, [ip]
   15bec:	strb	r8, [ip, #1]
   15bf0:	str	r1, [ip, #4]
   15bf4:	str	r7, [ip, #8]
   15bf8:	cmp	r1, #0
   15bfc:	andne	r7, r7, r1
   15c00:	str	r7, [lr, #12]
   15c04:	ldrb	r2, [r3]
   15c08:	add	r4, r6, #1
   15c0c:	add	ip, ip, #16
   15c10:	and	lr, r2, #239	; 0xef
   15c14:	cmp	r2, #43	; 0x2b
   15c18:	cmpne	lr, #45	; 0x2d
   15c1c:	bne	15d50 <__assert_fail@plt+0x4ba4>
   15c20:	mov	r6, r4
   15c24:	add	r2, r3, #1
   15c28:	ldrb	r4, [r3]
   15c2c:	ldrb	lr, [r3, #1]
   15c30:	cmp	lr, #103	; 0x67
   15c34:	beq	15bdc <__assert_fail@plt+0x4a30>
   15c38:	bls	15b68 <__assert_fail@plt+0x49bc>
   15c3c:	cmp	lr, #111	; 0x6f
   15c40:	beq	15c60 <__assert_fail@plt+0x4ab4>
   15c44:	cmp	lr, #117	; 0x75
   15c48:	addeq	r3, r3, #2
   15c4c:	moveq	r7, #448	; 0x1c0
   15c50:	beq	15be4 <__assert_fail@plt+0x4a38>
   15c54:	mov	r9, sl
   15c58:	mov	r7, #0
   15c5c:	b	15c98 <__assert_fail@plt+0x4aec>
   15c60:	add	r3, r3, #2
   15c64:	mov	r7, #7
   15c68:	b	15be4 <__assert_fail@plt+0x4a38>
   15c6c:	orr	r7, r7, #292	; 0x124
   15c70:	b	15c98 <__assert_fail@plt+0x4aec>
   15c74:	orr	r7, r7, #146	; 0x92
   15c78:	b	15c98 <__assert_fail@plt+0x4aec>
   15c7c:	orr	r7, r7, #73	; 0x49
   15c80:	b	15c98 <__assert_fail@plt+0x4aec>
   15c84:	orr	r7, r7, #3072	; 0xc00
   15c88:	b	15c98 <__assert_fail@plt+0x4aec>
   15c8c:	orr	r7, r7, #512	; 0x200
   15c90:	b	15c98 <__assert_fail@plt+0x4aec>
   15c94:	mov	r9, fp
   15c98:	mov	r3, r2
   15c9c:	add	r2, r2, #1
   15ca0:	ldrb	lr, [r3]
   15ca4:	sub	lr, lr, #88	; 0x58
   15ca8:	cmp	lr, #32
   15cac:	ldrls	pc, [pc, lr, lsl #2]
   15cb0:	b	15d38 <__assert_fail@plt+0x4b8c>
   15cb4:	muleq	r1, r4, ip
   15cb8:	andeq	r5, r1, r8, lsr sp
   15cbc:	andeq	r5, r1, r8, lsr sp
   15cc0:	andeq	r5, r1, r8, lsr sp
   15cc4:	andeq	r5, r1, r8, lsr sp
   15cc8:	andeq	r5, r1, r8, lsr sp
   15ccc:	andeq	r5, r1, r8, lsr sp
   15cd0:	andeq	r5, r1, r8, lsr sp
   15cd4:	andeq	r5, r1, r8, lsr sp
   15cd8:	andeq	r5, r1, r8, lsr sp
   15cdc:	andeq	r5, r1, r8, lsr sp
   15ce0:	andeq	r5, r1, r8, lsr sp
   15ce4:	andeq	r5, r1, r8, lsr sp
   15ce8:	andeq	r5, r1, r8, lsr sp
   15cec:	andeq	r5, r1, r8, lsr sp
   15cf0:	andeq	r5, r1, r8, lsr sp
   15cf4:	andeq	r5, r1, r8, lsr sp
   15cf8:	andeq	r5, r1, r8, lsr sp
   15cfc:	andeq	r5, r1, r8, lsr sp
   15d00:	andeq	r5, r1, r8, lsr sp
   15d04:	andeq	r5, r1, r8, lsr sp
   15d08:	andeq	r5, r1, r8, lsr sp
   15d0c:	andeq	r5, r1, r8, lsr sp
   15d10:	andeq	r5, r1, r8, lsr sp
   15d14:	andeq	r5, r1, r8, lsr sp
   15d18:	andeq	r5, r1, r8, lsr sp
   15d1c:	andeq	r5, r1, ip, ror #24
   15d20:	andeq	r5, r1, r4, lsl #25
   15d24:	andeq	r5, r1, ip, lsl #25
   15d28:	andeq	r5, r1, r8, lsr sp
   15d2c:	andeq	r5, r1, r8, lsr sp
   15d30:	andeq	r5, r1, r4, ror ip
   15d34:	andeq	r5, r1, ip, ror ip
   15d38:	mov	lr, ip
   15d3c:	strb	r4, [ip]
   15d40:	strb	r9, [ip, #1]
   15d44:	str	r1, [ip, #4]
   15d48:	str	r7, [ip, #8]
   15d4c:	b	15bf8 <__assert_fail@plt+0x4a4c>
   15d50:	cmp	r2, #44	; 0x2c
   15d54:	addeq	r4, r3, #1
   15d58:	moveq	ip, r6
   15d5c:	beq	15a50 <__assert_fail@plt+0x48a4>
   15d60:	cmp	r2, #0
   15d64:	bne	15a84 <__assert_fail@plt+0x48d8>
   15d68:	add	r6, r0, r6, lsl #4
   15d6c:	mov	r3, #0
   15d70:	strb	r3, [r6, #1]
   15d74:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15d78:	mov	r0, #0
   15d7c:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15d80:	mov	r0, #0
   15d84:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15d88:	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   15d8c:	push	{r4, lr}
   15d90:	sub	sp, sp, #104	; 0x68
   15d94:	mov	r2, sp
   15d98:	mov	r1, r0
   15d9c:	mov	r0, #3
   15da0:	bl	11164 <__xstat64@plt>
   15da4:	cmp	r0, #0
   15da8:	movne	r0, #0
   15dac:	bne	15de4 <__assert_fail@plt+0x4c38>
   15db0:	ldr	r4, [sp, #16]
   15db4:	mov	r0, #32
   15db8:	bl	1812c <__assert_fail@plt+0x6f80>
   15dbc:	mov	r3, #61	; 0x3d
   15dc0:	strb	r3, [r0]
   15dc4:	mov	r3, #1
   15dc8:	strb	r3, [r0, #1]
   15dcc:	ldr	r3, [pc, #24]	; 15dec <__assert_fail@plt+0x4c40>
   15dd0:	str	r3, [r0, #4]
   15dd4:	str	r4, [r0, #8]
   15dd8:	str	r3, [r0, #12]
   15ddc:	mov	r3, #0
   15de0:	strb	r3, [r0, #17]
   15de4:	add	sp, sp, #104	; 0x68
   15de8:	pop	{r4, pc}
   15dec:	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   15df0:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   15df4:	ldr	r6, [sp, #32]
   15df8:	lsl	r0, r0, #20
   15dfc:	lsr	r0, r0, #20
   15e00:	ldrb	r9, [r3, #1]
   15e04:	cmp	r9, #0
   15e08:	beq	15f10 <__assert_fail@plt+0x4d64>
   15e0c:	cmp	r1, #0
   15e10:	movne	r7, #3072	; 0xc00
   15e14:	moveq	r7, #0
   15e18:	add	r3, r3, #16
   15e1c:	mov	r5, #0
   15e20:	mvn	r2, r2
   15e24:	b	15e68 <__assert_fail@plt+0x4cbc>
   15e28:	and	r9, r0, #73	; 0x49
   15e2c:	orrs	r9, r9, r1
   15e30:	orrne	ip, ip, #73	; 0x49
   15e34:	b	15ecc <__assert_fail@plt+0x4d20>
   15e38:	cmp	lr, #0
   15e3c:	mvnne	lr, lr
   15e40:	orr	lr, lr, r4
   15e44:	mvn	r4, lr
   15e48:	lsl	r4, r4, #20
   15e4c:	orr	r5, r5, r4, lsr #20
   15e50:	and	lr, lr, r0
   15e54:	orr	r0, ip, lr
   15e58:	add	r3, r3, #16
   15e5c:	ldrb	r9, [r3, #-15]
   15e60:	cmp	r9, #0
   15e64:	beq	15f14 <__assert_fail@plt+0x4d68>
   15e68:	mov	r8, r3
   15e6c:	ldr	lr, [r3, #-12]
   15e70:	ldr	r4, [r3, #-4]
   15e74:	bic	r4, r7, r4
   15e78:	ldr	ip, [r3, #-8]
   15e7c:	cmp	r9, #2
   15e80:	beq	15e28 <__assert_fail@plt+0x4c7c>
   15e84:	cmp	r9, #3
   15e88:	bne	15ecc <__assert_fail@plt+0x4d20>
   15e8c:	and	ip, ip, r0
   15e90:	and	r9, ip, #292	; 0x124
   15e94:	cmp	r9, #0
   15e98:	movne	r9, #292	; 0x124
   15e9c:	moveq	r9, #0
   15ea0:	and	sl, ip, #146	; 0x92
   15ea4:	cmp	sl, #0
   15ea8:	movne	sl, #146	; 0x92
   15eac:	moveq	sl, #0
   15eb0:	orr	sl, r9, sl
   15eb4:	and	r9, ip, #73	; 0x49
   15eb8:	cmp	r9, #0
   15ebc:	movne	r9, #73	; 0x49
   15ec0:	moveq	r9, #0
   15ec4:	orr	r9, r9, sl
   15ec8:	orr	ip, r9, ip
   15ecc:	cmp	lr, #0
   15ed0:	movne	r9, lr
   15ed4:	moveq	r9, r2
   15ed8:	bic	ip, ip, r4
   15edc:	and	ip, ip, r9
   15ee0:	ldrb	r8, [r8, #-16]
   15ee4:	cmp	r8, #45	; 0x2d
   15ee8:	beq	15f04 <__assert_fail@plt+0x4d58>
   15eec:	cmp	r8, #61	; 0x3d
   15ef0:	beq	15e38 <__assert_fail@plt+0x4c8c>
   15ef4:	cmp	r8, #43	; 0x2b
   15ef8:	orreq	r5, r5, ip
   15efc:	orreq	r0, r0, ip
   15f00:	b	15e58 <__assert_fail@plt+0x4cac>
   15f04:	orr	r5, r5, ip
   15f08:	bic	r0, r0, ip
   15f0c:	b	15e58 <__assert_fail@plt+0x4cac>
   15f10:	mov	r5, #0
   15f14:	cmp	r6, #0
   15f18:	strne	r5, [r6]
   15f1c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   15f20:	push	{r2, r3}
   15f24:	push	{lr}		; (str lr, [sp, #-4]!)
   15f28:	sub	sp, sp, #12
   15f2c:	ldr	r2, [sp, #16]
   15f30:	tst	r2, #64	; 0x40
   15f34:	addne	r3, sp, #24
   15f38:	strne	r3, [sp, #4]
   15f3c:	ldrne	r3, [sp, #20]
   15f40:	moveq	r3, #0
   15f44:	bl	11050 <openat64@plt>
   15f48:	bl	17b68 <__assert_fail@plt+0x69bc>
   15f4c:	add	sp, sp, #12
   15f50:	pop	{lr}		; (ldr lr, [sp], #4)
   15f54:	add	sp, sp, #8
   15f58:	bx	lr
   15f5c:	push	{r4, r5, r6, r7, r8, lr}
   15f60:	mov	r6, r3
   15f64:	orr	r2, r2, #540672	; 0x84000
   15f68:	orr	r2, r2, #2304	; 0x900
   15f6c:	bl	15f20 <__assert_fail@plt+0x4d74>
   15f70:	subs	r4, r0, #0
   15f74:	blt	15fb0 <__assert_fail@plt+0x4e04>
   15f78:	mov	r0, r4
   15f7c:	bl	11110 <fdopendir@plt>
   15f80:	subs	r5, r0, #0
   15f84:	beq	15f94 <__assert_fail@plt+0x4de8>
   15f88:	str	r4, [r6]
   15f8c:	mov	r0, r5
   15f90:	pop	{r4, r5, r6, r7, r8, pc}
   15f94:	bl	11068 <__errno_location@plt>
   15f98:	mov	r6, r0
   15f9c:	ldr	r7, [r0]
   15fa0:	mov	r0, r4
   15fa4:	bl	11188 <close@plt>
   15fa8:	str	r7, [r6]
   15fac:	b	15f8c <__assert_fail@plt+0x4de0>
   15fb0:	mov	r5, #0
   15fb4:	b	15f8c <__assert_fail@plt+0x4de0>
   15fb8:	push	{r4, r5, r6, lr}
   15fbc:	subs	r4, r0, #0
   15fc0:	beq	16038 <__assert_fail@plt+0x4e8c>
   15fc4:	mov	r1, #47	; 0x2f
   15fc8:	mov	r0, r4
   15fcc:	bl	110ec <strrchr@plt>
   15fd0:	cmp	r0, #0
   15fd4:	addne	r5, r0, #1
   15fd8:	moveq	r5, r4
   15fdc:	sub	r3, r5, r4
   15fe0:	cmp	r3, #6
   15fe4:	ble	16024 <__assert_fail@plt+0x4e78>
   15fe8:	mov	r2, #7
   15fec:	ldr	r1, [pc, #96]	; 16054 <__assert_fail@plt+0x4ea8>
   15ff0:	sub	r0, r5, #7
   15ff4:	bl	11170 <strncmp@plt>
   15ff8:	cmp	r0, #0
   15ffc:	bne	16024 <__assert_fail@plt+0x4e78>
   16000:	mov	r2, #3
   16004:	ldr	r1, [pc, #76]	; 16058 <__assert_fail@plt+0x4eac>
   16008:	mov	r0, r5
   1600c:	bl	11170 <strncmp@plt>
   16010:	cmp	r0, #0
   16014:	addeq	r4, r5, #3
   16018:	ldreq	r3, [pc, #60]	; 1605c <__assert_fail@plt+0x4eb0>
   1601c:	streq	r4, [r3]
   16020:	movne	r4, r5
   16024:	ldr	r3, [pc, #52]	; 16060 <__assert_fail@plt+0x4eb4>
   16028:	str	r4, [r3]
   1602c:	ldr	r3, [pc, #48]	; 16064 <__assert_fail@plt+0x4eb8>
   16030:	str	r4, [r3]
   16034:	pop	{r4, r5, r6, pc}
   16038:	ldr	r3, [pc, #40]	; 16068 <__assert_fail@plt+0x4ebc>
   1603c:	ldr	r3, [r3]
   16040:	mov	r2, #55	; 0x37
   16044:	mov	r1, #1
   16048:	ldr	r0, [pc, #28]	; 1606c <__assert_fail@plt+0x4ec0>
   1604c:	bl	10f9c <fwrite@plt>
   16050:	bl	1117c <abort@plt>
   16054:	andeq	sl, r1, r8, lsl r2
   16058:	andeq	sl, r1, r0, lsr #4
   1605c:	andeq	fp, r2, r8, ror #2
   16060:			; <UNDEFINED> instruction: 0x0002b1b4
   16064:	andeq	fp, r2, ip, ror #2
   16068:	andeq	fp, r2, r8, ror r1
   1606c:	andeq	sl, r1, r0, ror #3
   16070:	push	{r4, r5, r6, lr}
   16074:	mov	r5, r0
   16078:	mov	r4, r1
   1607c:	mov	r2, #48	; 0x30
   16080:	mov	r1, #0
   16084:	bl	1108c <memset@plt>
   16088:	cmp	r4, #10
   1608c:	beq	1609c <__assert_fail@plt+0x4ef0>
   16090:	str	r4, [r5]
   16094:	mov	r0, r5
   16098:	pop	{r4, r5, r6, pc}
   1609c:	bl	1117c <abort@plt>
   160a0:	push	{r4, r5, r6, lr}
   160a4:	mov	r4, r0
   160a8:	mov	r5, r1
   160ac:	mov	r2, #5
   160b0:	mov	r1, r0
   160b4:	mov	r0, #0
   160b8:	bl	10f54 <dcgettext@plt>
   160bc:	cmp	r4, r0
   160c0:	popne	{r4, r5, r6, pc}
   160c4:	bl	18e60 <__assert_fail@plt+0x7cb4>
   160c8:	ldrb	r3, [r0]
   160cc:	bic	r3, r3, #32
   160d0:	cmp	r3, #85	; 0x55
   160d4:	beq	16150 <__assert_fail@plt+0x4fa4>
   160d8:	cmp	r3, #71	; 0x47
   160dc:	bne	161ac <__assert_fail@plt+0x5000>
   160e0:	ldrb	r3, [r0, #1]
   160e4:	bic	r3, r3, #32
   160e8:	cmp	r3, #66	; 0x42
   160ec:	bne	161ac <__assert_fail@plt+0x5000>
   160f0:	ldrb	r3, [r0, #2]
   160f4:	cmp	r3, #49	; 0x31
   160f8:	bne	161ac <__assert_fail@plt+0x5000>
   160fc:	ldrb	r3, [r0, #3]
   16100:	cmp	r3, #56	; 0x38
   16104:	bne	161ac <__assert_fail@plt+0x5000>
   16108:	ldrb	r3, [r0, #4]
   1610c:	cmp	r3, #48	; 0x30
   16110:	bne	161ac <__assert_fail@plt+0x5000>
   16114:	ldrb	r3, [r0, #5]
   16118:	cmp	r3, #51	; 0x33
   1611c:	bne	161ac <__assert_fail@plt+0x5000>
   16120:	ldrb	r3, [r0, #6]
   16124:	cmp	r3, #48	; 0x30
   16128:	bne	161ac <__assert_fail@plt+0x5000>
   1612c:	ldrb	r3, [r0, #7]
   16130:	cmp	r3, #0
   16134:	bne	161ac <__assert_fail@plt+0x5000>
   16138:	ldrb	r2, [r4]
   1613c:	ldr	r3, [pc, #124]	; 161c0 <__assert_fail@plt+0x5014>
   16140:	ldr	r0, [pc, #124]	; 161c4 <__assert_fail@plt+0x5018>
   16144:	cmp	r2, #96	; 0x60
   16148:	movne	r0, r3
   1614c:	pop	{r4, r5, r6, pc}
   16150:	ldrb	r3, [r0, #1]
   16154:	bic	r3, r3, #32
   16158:	cmp	r3, #84	; 0x54
   1615c:	bne	161ac <__assert_fail@plt+0x5000>
   16160:	ldrb	r3, [r0, #2]
   16164:	bic	r3, r3, #32
   16168:	cmp	r3, #70	; 0x46
   1616c:	bne	161ac <__assert_fail@plt+0x5000>
   16170:	ldrb	r3, [r0, #3]
   16174:	cmp	r3, #45	; 0x2d
   16178:	bne	161ac <__assert_fail@plt+0x5000>
   1617c:	ldrb	r3, [r0, #4]
   16180:	cmp	r3, #56	; 0x38
   16184:	bne	161ac <__assert_fail@plt+0x5000>
   16188:	ldrb	r3, [r0, #5]
   1618c:	cmp	r3, #0
   16190:	bne	161ac <__assert_fail@plt+0x5000>
   16194:	ldrb	r2, [r4]
   16198:	ldr	r3, [pc, #40]	; 161c8 <__assert_fail@plt+0x501c>
   1619c:	ldr	r0, [pc, #40]	; 161cc <__assert_fail@plt+0x5020>
   161a0:	cmp	r2, #96	; 0x60
   161a4:	movne	r0, r3
   161a8:	pop	{r4, r5, r6, pc}
   161ac:	ldr	r3, [pc, #28]	; 161d0 <__assert_fail@plt+0x5024>
   161b0:	ldr	r0, [pc, #28]	; 161d4 <__assert_fail@plt+0x5028>
   161b4:	cmp	r5, #9
   161b8:	movne	r0, r3
   161bc:	pop	{r4, r5, r6, pc}
   161c0:	andeq	sl, r1, ip, ror r2
   161c4:	andeq	sl, r1, r8, lsl #5
   161c8:	andeq	sl, r1, r8, ror r2
   161cc:	andeq	sl, r1, ip, lsl #5
   161d0:	andeq	sl, r1, r0, lsl #5
   161d4:	andeq	sl, r1, r4, lsl #5
   161d8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   161dc:	sub	sp, sp, #116	; 0x74
   161e0:	str	r0, [sp, #36]	; 0x24
   161e4:	mov	sl, r1
   161e8:	str	r2, [sp, #52]	; 0x34
   161ec:	str	r3, [sp, #28]
   161f0:	ldr	r8, [sp, #152]	; 0x98
   161f4:	bl	10fb4 <__ctype_get_mb_cur_max@plt>
   161f8:	str	r0, [sp, #84]	; 0x54
   161fc:	ldr	r3, [sp, #156]	; 0x9c
   16200:	lsr	r3, r3, #1
   16204:	and	r3, r3, #1
   16208:	str	r3, [sp, #32]
   1620c:	mov	r3, #1
   16210:	str	r3, [sp, #40]	; 0x28
   16214:	mov	r3, #0
   16218:	str	r3, [sp, #80]	; 0x50
   1621c:	str	r3, [sp, #44]	; 0x2c
   16220:	str	r3, [sp, #48]	; 0x30
   16224:	str	r3, [sp, #60]	; 0x3c
   16228:	str	r3, [sp, #72]	; 0x48
   1622c:	str	r3, [sp, #76]	; 0x4c
   16230:	mov	r7, sl
   16234:	mov	sl, r8
   16238:	cmp	sl, #10
   1623c:	ldrls	pc, [pc, sl, lsl #2]
   16240:	b	163f8 <__assert_fail@plt+0x524c>
   16244:	andeq	r6, r1, r8, lsr #5
   16248:	andeq	r6, r1, r8, ror r2
   1624c:	ldrdeq	r6, [r1], -r4
   16250:	andeq	r6, r1, r0, ror r2
   16254:	andeq	r6, r1, r8, lsl #7
   16258:			; <UNDEFINED> instruction: 0x000162b8
   1625c:	andeq	r7, r1, r4, lsr #6
   16260:	strdeq	r6, [r1], -ip
   16264:	strdeq	r6, [r1], -r4
   16268:	strdeq	r6, [r1], -r4
   1626c:	strdeq	r6, [r1], -r4
   16270:	mov	r3, #1
   16274:	str	r3, [sp, #48]	; 0x30
   16278:	mov	r3, #1
   1627c:	str	r3, [sp, #32]
   16280:	str	r3, [sp, #60]	; 0x3c
   16284:	ldr	r3, [pc, #4068]	; 17270 <__assert_fail@plt+0x60c4>
   16288:	str	r3, [sp, #72]	; 0x48
   1628c:	mov	fp, #0
   16290:	mov	sl, #2
   16294:	mov	r6, #0
   16298:	ldr	r3, [sp, #48]	; 0x30
   1629c:	eor	r3, r3, #1
   162a0:	str	r3, [sp, #68]	; 0x44
   162a4:	b	16b8c <__assert_fail@plt+0x59e0>
   162a8:	mov	r3, #0
   162ac:	str	r3, [sp, #32]
   162b0:	mov	fp, r3
   162b4:	b	16294 <__assert_fail@plt+0x50e8>
   162b8:	ldr	r3, [sp, #32]
   162bc:	cmp	r3, #0
   162c0:	bne	16414 <__assert_fail@plt+0x5268>
   162c4:	cmp	r7, #0
   162c8:	beq	16434 <__assert_fail@plt+0x5288>
   162cc:	ldr	r3, [sp, #36]	; 0x24
   162d0:	mov	r2, #34	; 0x22
   162d4:	strb	r2, [r3]
   162d8:	mov	r3, #1
   162dc:	str	r3, [sp, #48]	; 0x30
   162e0:	str	r3, [sp, #60]	; 0x3c
   162e4:	ldr	r3, [pc, #3980]	; 17278 <__assert_fail@plt+0x60cc>
   162e8:	str	r3, [sp, #72]	; 0x48
   162ec:	mov	fp, #1
   162f0:	b	16294 <__assert_fail@plt+0x50e8>
   162f4:	cmp	sl, #10
   162f8:	beq	1631c <__assert_fail@plt+0x5170>
   162fc:	mov	r1, sl
   16300:	ldr	r0, [pc, #3948]	; 17274 <__assert_fail@plt+0x60c8>
   16304:	bl	160a0 <__assert_fail@plt+0x4ef4>
   16308:	str	r0, [sp, #164]	; 0xa4
   1630c:	mov	r1, sl
   16310:	ldr	r0, [pc, #3928]	; 17270 <__assert_fail@plt+0x60c4>
   16314:	bl	160a0 <__assert_fail@plt+0x4ef4>
   16318:	str	r0, [sp, #168]	; 0xa8
   1631c:	ldr	r3, [sp, #32]
   16320:	cmp	r3, #0
   16324:	movne	fp, #0
   16328:	bne	16360 <__assert_fail@plt+0x51b4>
   1632c:	ldr	r3, [sp, #164]	; 0xa4
   16330:	ldrb	r3, [r3]
   16334:	cmp	r3, #0
   16338:	beq	16380 <__assert_fail@plt+0x51d4>
   1633c:	ldr	r2, [sp, #164]	; 0xa4
   16340:	mov	fp, #0
   16344:	ldr	r1, [sp, #36]	; 0x24
   16348:	cmp	r7, fp
   1634c:	strbhi	r3, [r1, fp]
   16350:	add	fp, fp, #1
   16354:	ldrb	r3, [r2, #1]!
   16358:	cmp	r3, #0
   1635c:	bne	16348 <__assert_fail@plt+0x519c>
   16360:	ldr	r0, [sp, #168]	; 0xa8
   16364:	bl	11044 <strlen@plt>
   16368:	str	r0, [sp, #60]	; 0x3c
   1636c:	ldr	r3, [sp, #168]	; 0xa8
   16370:	str	r3, [sp, #72]	; 0x48
   16374:	mov	r3, #1
   16378:	str	r3, [sp, #48]	; 0x30
   1637c:	b	16294 <__assert_fail@plt+0x50e8>
   16380:	mov	fp, #0
   16384:	b	16360 <__assert_fail@plt+0x51b4>
   16388:	ldr	r3, [sp, #32]
   1638c:	cmp	r3, #0
   16390:	bne	16450 <__assert_fail@plt+0x52a4>
   16394:	mov	r3, #1
   16398:	str	r3, [sp, #48]	; 0x30
   1639c:	cmp	r7, #0
   163a0:	beq	1646c <__assert_fail@plt+0x52c0>
   163a4:	ldr	r3, [sp, #36]	; 0x24
   163a8:	mov	r2, #39	; 0x27
   163ac:	strb	r2, [r3]
   163b0:	mov	r3, #0
   163b4:	str	r3, [sp, #32]
   163b8:	mov	r3, #1
   163bc:	str	r3, [sp, #60]	; 0x3c
   163c0:	ldr	r3, [pc, #3752]	; 17270 <__assert_fail@plt+0x60c4>
   163c4:	str	r3, [sp, #72]	; 0x48
   163c8:	mov	fp, #1
   163cc:	mov	sl, #2
   163d0:	b	16294 <__assert_fail@plt+0x50e8>
   163d4:	ldr	r3, [sp, #32]
   163d8:	cmp	r3, #0
   163dc:	beq	1639c <__assert_fail@plt+0x51f0>
   163e0:	mov	r3, #1
   163e4:	str	r3, [sp, #60]	; 0x3c
   163e8:	ldr	r3, [pc, #3712]	; 17270 <__assert_fail@plt+0x60c4>
   163ec:	str	r3, [sp, #72]	; 0x48
   163f0:	mov	fp, #0
   163f4:	b	16294 <__assert_fail@plt+0x50e8>
   163f8:	bl	1117c <abort@plt>
   163fc:	mov	r3, #0
   16400:	str	r3, [sp, #32]
   16404:	mov	r3, #1
   16408:	str	r3, [sp, #48]	; 0x30
   1640c:	mov	fp, #0
   16410:	b	16294 <__assert_fail@plt+0x50e8>
   16414:	ldr	r3, [sp, #32]
   16418:	str	r3, [sp, #48]	; 0x30
   1641c:	mov	r3, #1
   16420:	str	r3, [sp, #60]	; 0x3c
   16424:	ldr	r3, [pc, #3660]	; 17278 <__assert_fail@plt+0x60cc>
   16428:	str	r3, [sp, #72]	; 0x48
   1642c:	mov	fp, #0
   16430:	b	16294 <__assert_fail@plt+0x50e8>
   16434:	mov	r3, #1
   16438:	str	r3, [sp, #48]	; 0x30
   1643c:	str	r3, [sp, #60]	; 0x3c
   16440:	ldr	r3, [pc, #3632]	; 17278 <__assert_fail@plt+0x60cc>
   16444:	str	r3, [sp, #72]	; 0x48
   16448:	mov	fp, #1
   1644c:	b	16294 <__assert_fail@plt+0x50e8>
   16450:	mov	r3, #1
   16454:	str	r3, [sp, #60]	; 0x3c
   16458:	ldr	r3, [pc, #3600]	; 17270 <__assert_fail@plt+0x60c4>
   1645c:	str	r3, [sp, #72]	; 0x48
   16460:	mov	fp, #0
   16464:	mov	sl, #2
   16468:	b	16294 <__assert_fail@plt+0x50e8>
   1646c:	mov	r3, #0
   16470:	str	r3, [sp, #32]
   16474:	mov	r3, #1
   16478:	str	r3, [sp, #60]	; 0x3c
   1647c:	ldr	r3, [pc, #3564]	; 17270 <__assert_fail@plt+0x60c4>
   16480:	str	r3, [sp, #72]	; 0x48
   16484:	mov	fp, #1
   16488:	mov	sl, #2
   1648c:	b	16294 <__assert_fail@plt+0x50e8>
   16490:	mov	r3, #0
   16494:	str	r3, [sp, #56]	; 0x38
   16498:	ldr	r3, [sp, #52]	; 0x34
   1649c:	add	r2, r3, r6
   164a0:	str	r2, [sp, #64]	; 0x40
   164a4:	ldrb	r4, [r3, r6]
   164a8:	cmp	r4, #126	; 0x7e
   164ac:	ldrls	pc, [pc, r4, lsl #2]
   164b0:	b	16cec <__assert_fail@plt+0x5b40>
   164b4:	andeq	r6, r1, ip, asr #13
   164b8:	andeq	r6, r1, ip, ror #25
   164bc:	andeq	r6, r1, ip, ror #25
   164c0:	andeq	r6, r1, ip, ror #25
   164c4:	andeq	r6, r1, ip, ror #25
   164c8:	andeq	r6, r1, ip, ror #25
   164cc:	andeq	r6, r1, ip, ror #25
   164d0:	andeq	r6, r1, r8, lsr #20
   164d4:	andeq	r6, r1, r4, asr #13
   164d8:	andeq	r6, r1, r0, ror #19
   164dc:	ldrdeq	r6, [r1], -r8
   164e0:	andeq	r6, r1, r8, asr #18
   164e4:	andeq	r6, r1, r0, asr #18
   164e8:			; <UNDEFINED> instruction: 0x000166bc
   164ec:	andeq	r6, r1, ip, ror #25
   164f0:	andeq	r6, r1, ip, ror #25
   164f4:	andeq	r6, r1, ip, ror #25
   164f8:	andeq	r6, r1, ip, ror #25
   164fc:	andeq	r6, r1, ip, ror #25
   16500:	andeq	r6, r1, ip, ror #25
   16504:	andeq	r6, r1, ip, ror #25
   16508:	andeq	r6, r1, ip, ror #25
   1650c:	andeq	r6, r1, ip, ror #25
   16510:	andeq	r6, r1, ip, ror #25
   16514:	andeq	r6, r1, ip, ror #25
   16518:	andeq	r6, r1, ip, ror #25
   1651c:	andeq	r6, r1, ip, ror #25
   16520:	andeq	r6, r1, ip, ror #25
   16524:	andeq	r6, r1, ip, ror #25
   16528:	andeq	r6, r1, ip, ror #25
   1652c:	andeq	r6, r1, ip, ror #25
   16530:	andeq	r6, r1, ip, ror #25
   16534:	andeq	r6, r1, ip, ror sl
   16538:	andeq	r6, r1, r8, ror sl
   1653c:	andeq	r6, r1, r8, ror sl
   16540:	andeq	r6, r1, r0, asr sl
   16544:	andeq	r6, r1, r8, ror sl
   16548:	andeq	r7, r1, r0, asr #1
   1654c:	andeq	r6, r1, r8, ror sl
   16550:	andeq	r6, r1, r0, asr ip
   16554:	andeq	r6, r1, r8, ror sl
   16558:	andeq	r6, r1, r8, ror sl
   1655c:	andeq	r6, r1, r8, ror sl
   16560:	andeq	r7, r1, r0, asr #1
   16564:	andeq	r7, r1, r0, asr #1
   16568:	andeq	r7, r1, r0, asr #1
   1656c:	andeq	r7, r1, r0, asr #1
   16570:	andeq	r7, r1, r0, asr #1
   16574:	andeq	r7, r1, r0, asr #1
   16578:	andeq	r7, r1, r0, asr #1
   1657c:	andeq	r7, r1, r0, asr #1
   16580:	andeq	r7, r1, r0, asr #1
   16584:	andeq	r7, r1, r0, asr #1
   16588:	andeq	r7, r1, r0, asr #1
   1658c:	andeq	r7, r1, r0, asr #1
   16590:	andeq	r7, r1, r0, asr #1
   16594:	andeq	r7, r1, r0, asr #1
   16598:	andeq	r7, r1, r0, asr #1
   1659c:	andeq	r7, r1, r0, asr #1
   165a0:	andeq	r6, r1, r8, ror sl
   165a4:	andeq	r6, r1, r8, ror sl
   165a8:	andeq	r6, r1, r8, ror sl
   165ac:	andeq	r6, r1, r8, ror sl
   165b0:	ldrdeq	r6, [r1], -r4
   165b4:	andeq	r6, r1, ip, ror #25
   165b8:	andeq	r7, r1, r0, asr #1
   165bc:	andeq	r7, r1, r0, asr #1
   165c0:	andeq	r7, r1, r0, asr #1
   165c4:	andeq	r7, r1, r0, asr #1
   165c8:	andeq	r7, r1, r0, asr #1
   165cc:	andeq	r7, r1, r0, asr #1
   165d0:	andeq	r7, r1, r0, asr #1
   165d4:	andeq	r7, r1, r0, asr #1
   165d8:	andeq	r7, r1, r0, asr #1
   165dc:	andeq	r7, r1, r0, asr #1
   165e0:	andeq	r7, r1, r0, asr #1
   165e4:	andeq	r7, r1, r0, asr #1
   165e8:	andeq	r7, r1, r0, asr #1
   165ec:	andeq	r7, r1, r0, asr #1
   165f0:	andeq	r7, r1, r0, asr #1
   165f4:	andeq	r7, r1, r0, asr #1
   165f8:	andeq	r7, r1, r0, asr #1
   165fc:	andeq	r7, r1, r0, asr #1
   16600:	andeq	r7, r1, r0, asr #1
   16604:	andeq	r7, r1, r0, asr #1
   16608:	andeq	r7, r1, r0, asr #1
   1660c:	andeq	r7, r1, r0, asr #1
   16610:	andeq	r7, r1, r0, asr #1
   16614:	andeq	r7, r1, r0, asr #1
   16618:	andeq	r7, r1, r0, asr #1
   1661c:	andeq	r7, r1, r0, asr #1
   16620:	andeq	r6, r1, r8, ror sl
   16624:	andeq	r6, r1, r0, asr r9
   16628:	andeq	r7, r1, r0, asr #1
   1662c:	andeq	r6, r1, r8, ror sl
   16630:	andeq	r7, r1, r0, asr #1
   16634:	andeq	r6, r1, r8, ror sl
   16638:	andeq	r7, r1, r0, asr #1
   1663c:	andeq	r7, r1, r0, asr #1
   16640:	andeq	r7, r1, r0, asr #1
   16644:	andeq	r7, r1, r0, asr #1
   16648:	andeq	r7, r1, r0, asr #1
   1664c:	andeq	r7, r1, r0, asr #1
   16650:	andeq	r7, r1, r0, asr #1
   16654:	andeq	r7, r1, r0, asr #1
   16658:	andeq	r7, r1, r0, asr #1
   1665c:	andeq	r7, r1, r0, asr #1
   16660:	andeq	r7, r1, r0, asr #1
   16664:	andeq	r7, r1, r0, asr #1
   16668:	andeq	r7, r1, r0, asr #1
   1666c:	andeq	r7, r1, r0, asr #1
   16670:	andeq	r7, r1, r0, asr #1
   16674:	andeq	r7, r1, r0, asr #1
   16678:	andeq	r7, r1, r0, asr #1
   1667c:	andeq	r7, r1, r0, asr #1
   16680:	andeq	r7, r1, r0, asr #1
   16684:	andeq	r7, r1, r0, asr #1
   16688:	andeq	r7, r1, r0, asr #1
   1668c:	andeq	r7, r1, r0, asr #1
   16690:	andeq	r7, r1, r0, asr #1
   16694:	andeq	r7, r1, r0, asr #1
   16698:	andeq	r7, r1, r0, asr #1
   1669c:	andeq	r7, r1, r0, asr #1
   166a0:	andeq	r6, r1, r0, lsr sl
   166a4:	andeq	r6, r1, r8, ror sl
   166a8:	andeq	r6, r1, r0, lsr sl
   166ac:	andeq	r6, r1, r0, asr sl
   166b0:	mov	r3, #0
   166b4:	str	r3, [sp, #56]	; 0x38
   166b8:	b	16498 <__assert_fail@plt+0x52ec>
   166bc:	mov	r3, #114	; 0x72
   166c0:	b	169e4 <__assert_fail@plt+0x5838>
   166c4:	mov	r3, #98	; 0x62
   166c8:	b	169fc <__assert_fail@plt+0x5850>
   166cc:	ldr	r3, [sp, #48]	; 0x30
   166d0:	cmp	r3, #0
   166d4:	beq	167bc <__assert_fail@plt+0x5610>
   166d8:	ldr	r3, [sp, #32]
   166dc:	cmp	r3, #0
   166e0:	bne	17244 <__assert_fail@plt+0x6098>
   166e4:	ldr	r3, [sp, #44]	; 0x2c
   166e8:	eor	r3, r3, #1
   166ec:	cmp	sl, #2
   166f0:	movne	r3, #0
   166f4:	andeq	r3, r3, #1
   166f8:	cmp	r3, #0
   166fc:	moveq	r2, fp
   16700:	beq	16744 <__assert_fail@plt+0x5598>
   16704:	cmp	r7, fp
   16708:	ldrhi	r2, [sp, #36]	; 0x24
   1670c:	movhi	r1, #39	; 0x27
   16710:	strbhi	r1, [r2, fp]
   16714:	add	r2, fp, #1
   16718:	cmp	r7, r2
   1671c:	ldrhi	r1, [sp, #36]	; 0x24
   16720:	movhi	r0, #36	; 0x24
   16724:	strbhi	r0, [r1, r2]
   16728:	add	r2, fp, #2
   1672c:	cmp	r7, r2
   16730:	ldrhi	r1, [sp, #36]	; 0x24
   16734:	movhi	r0, #39	; 0x27
   16738:	strbhi	r0, [r1, r2]
   1673c:	add	r2, fp, #3
   16740:	str	r3, [sp, #44]	; 0x2c
   16744:	cmp	r7, r2
   16748:	ldrhi	r3, [sp, #36]	; 0x24
   1674c:	movhi	r1, #92	; 0x5c
   16750:	strbhi	r1, [r3, r2]
   16754:	add	fp, r2, #1
   16758:	cmp	r5, #0
   1675c:	beq	170c8 <__assert_fail@plt+0x5f1c>
   16760:	add	r3, r6, #1
   16764:	ldr	r1, [sp, #28]
   16768:	cmp	r1, r3
   1676c:	bls	170d8 <__assert_fail@plt+0x5f2c>
   16770:	ldr	r1, [sp, #52]	; 0x34
   16774:	ldrb	r3, [r1, r3]
   16778:	sub	r3, r3, #48	; 0x30
   1677c:	uxtb	r3, r3
   16780:	cmp	r3, #9
   16784:	bhi	170e4 <__assert_fail@plt+0x5f38>
   16788:	cmp	r7, fp
   1678c:	movhi	r3, #48	; 0x30
   16790:	ldrhi	r1, [sp, #36]	; 0x24
   16794:	strbhi	r3, [r1, fp]
   16798:	add	r3, r2, #2
   1679c:	cmp	r7, r3
   167a0:	movhi	r1, #48	; 0x30
   167a4:	ldrhi	r0, [sp, #36]	; 0x24
   167a8:	strbhi	r1, [r0, r3]
   167ac:	add	fp, r2, #3
   167b0:	ldr	r8, [sp, #32]
   167b4:	mov	r4, #48	; 0x30
   167b8:	b	16a94 <__assert_fail@plt+0x58e8>
   167bc:	ldr	r3, [sp, #156]	; 0x9c
   167c0:	tst	r3, #1
   167c4:	bne	16b88 <__assert_fail@plt+0x59dc>
   167c8:	ldr	r5, [sp, #48]	; 0x30
   167cc:	mov	r8, r5
   167d0:	b	16a94 <__assert_fail@plt+0x58e8>
   167d4:	cmp	sl, #2
   167d8:	beq	167f0 <__assert_fail@plt+0x5644>
   167dc:	cmp	sl, #5
   167e0:	beq	16808 <__assert_fail@plt+0x565c>
   167e4:	mov	r8, #0
   167e8:	mov	r5, r8
   167ec:	b	16a94 <__assert_fail@plt+0x58e8>
   167f0:	ldr	r3, [sp, #32]
   167f4:	cmp	r3, #0
   167f8:	bne	17258 <__assert_fail@plt+0x60ac>
   167fc:	mov	r8, r3
   16800:	mov	r5, r3
   16804:	b	16a94 <__assert_fail@plt+0x58e8>
   16808:	ldr	r3, [sp, #156]	; 0x9c
   1680c:	tst	r3, #4
   16810:	beq	170f0 <__assert_fail@plt+0x5f44>
   16814:	add	r3, r6, #2
   16818:	ldr	r2, [sp, #28]
   1681c:	cmp	r2, r3
   16820:	bls	170fc <__assert_fail@plt+0x5f50>
   16824:	ldr	r2, [sp, #52]	; 0x34
   16828:	add	r2, r2, r6
   1682c:	ldrb	r2, [r2, #1]
   16830:	cmp	r2, #63	; 0x3f
   16834:	movne	r8, #0
   16838:	movne	r5, r8
   1683c:	bne	16a94 <__assert_fail@plt+0x58e8>
   16840:	ldr	r2, [sp, #52]	; 0x34
   16844:	ldrb	r2, [r2, r3]
   16848:	sub	r1, r2, #33	; 0x21
   1684c:	cmp	r1, #29
   16850:	ldrls	pc, [pc, r1, lsl #2]
   16854:	b	17108 <__assert_fail@plt+0x5f5c>
   16858:	ldrdeq	r6, [r1], -r0
   1685c:	andeq	r7, r1, r8, lsl #2
   16860:	andeq	r7, r1, r8, lsl #2
   16864:	andeq	r7, r1, r8, lsl #2
   16868:	andeq	r7, r1, r8, lsl #2
   1686c:	andeq	r7, r1, r8, lsl #2
   16870:	ldrdeq	r6, [r1], -r0
   16874:	ldrdeq	r6, [r1], -r0
   16878:	ldrdeq	r6, [r1], -r0
   1687c:	andeq	r7, r1, r8, lsl #2
   16880:	andeq	r7, r1, r8, lsl #2
   16884:	andeq	r7, r1, r8, lsl #2
   16888:	ldrdeq	r6, [r1], -r0
   1688c:	andeq	r7, r1, r8, lsl #2
   16890:	ldrdeq	r6, [r1], -r0
   16894:	andeq	r7, r1, r8, lsl #2
   16898:	andeq	r7, r1, r8, lsl #2
   1689c:	andeq	r7, r1, r8, lsl #2
   168a0:	andeq	r7, r1, r8, lsl #2
   168a4:	andeq	r7, r1, r8, lsl #2
   168a8:	andeq	r7, r1, r8, lsl #2
   168ac:	andeq	r7, r1, r8, lsl #2
   168b0:	andeq	r7, r1, r8, lsl #2
   168b4:	andeq	r7, r1, r8, lsl #2
   168b8:	andeq	r7, r1, r8, lsl #2
   168bc:	andeq	r7, r1, r8, lsl #2
   168c0:	andeq	r7, r1, r8, lsl #2
   168c4:	ldrdeq	r6, [r1], -r0
   168c8:	ldrdeq	r6, [r1], -r0
   168cc:	ldrdeq	r6, [r1], -r0
   168d0:	ldr	r1, [sp, #32]
   168d4:	cmp	r1, #0
   168d8:	bne	17318 <__assert_fail@plt+0x616c>
   168dc:	cmp	r7, fp
   168e0:	movhi	r1, #63	; 0x3f
   168e4:	ldrhi	r0, [sp, #36]	; 0x24
   168e8:	strbhi	r1, [r0, fp]
   168ec:	add	r1, fp, #1
   168f0:	cmp	r7, r1
   168f4:	ldrhi	r0, [sp, #36]	; 0x24
   168f8:	movhi	ip, #34	; 0x22
   168fc:	strbhi	ip, [r0, r1]
   16900:	add	r1, fp, #2
   16904:	cmp	r7, r1
   16908:	ldrhi	r0, [sp, #36]	; 0x24
   1690c:	movhi	ip, #34	; 0x22
   16910:	strbhi	ip, [r0, r1]
   16914:	add	r1, fp, #3
   16918:	cmp	r7, r1
   1691c:	movhi	r0, #63	; 0x3f
   16920:	ldrhi	ip, [sp, #36]	; 0x24
   16924:	strbhi	r0, [ip, r1]
   16928:	add	fp, fp, #4
   1692c:	ldr	r5, [sp, #32]
   16930:	mov	r8, r5
   16934:	mov	r4, r2
   16938:	mov	r6, r3
   1693c:	b	16a94 <__assert_fail@plt+0x58e8>
   16940:	mov	r3, #102	; 0x66
   16944:	b	169fc <__assert_fail@plt+0x5850>
   16948:	mov	r3, #118	; 0x76
   1694c:	b	169fc <__assert_fail@plt+0x5850>
   16950:	cmp	sl, #2
   16954:	beq	169c0 <__assert_fail@plt+0x5814>
   16958:	ldr	r3, [sp, #48]	; 0x30
   1695c:	ldr	r2, [sp, #32]
   16960:	and	r3, r3, r2
   16964:	tst	r9, r3
   16968:	moveq	r3, r4
   1696c:	beq	169fc <__assert_fail@plt+0x5850>
   16970:	mov	r8, #0
   16974:	mov	r5, r8
   16978:	eor	r5, r5, #1
   1697c:	ldr	r3, [sp, #44]	; 0x2c
   16980:	and	r5, r5, r3
   16984:	tst	r5, #255	; 0xff
   16988:	beq	16b68 <__assert_fail@plt+0x59bc>
   1698c:	cmp	r7, fp
   16990:	ldrhi	r3, [sp, #36]	; 0x24
   16994:	movhi	r2, #39	; 0x27
   16998:	strbhi	r2, [r3, fp]
   1699c:	add	r3, fp, #1
   169a0:	cmp	r7, r3
   169a4:	ldrhi	r2, [sp, #36]	; 0x24
   169a8:	movhi	r1, #39	; 0x27
   169ac:	strbhi	r1, [r2, r3]
   169b0:	add	fp, fp, #2
   169b4:	mov	r3, #0
   169b8:	str	r3, [sp, #44]	; 0x2c
   169bc:	b	16b68 <__assert_fail@plt+0x59bc>
   169c0:	ldr	r3, [sp, #32]
   169c4:	cmp	r3, #0
   169c8:	bne	17264 <__assert_fail@plt+0x60b8>
   169cc:	mov	r8, r3
   169d0:	mov	r5, r3
   169d4:	b	16978 <__assert_fail@plt+0x57cc>
   169d8:	mov	r3, #110	; 0x6e
   169dc:	b	169e4 <__assert_fail@plt+0x5838>
   169e0:	mov	r3, #116	; 0x74
   169e4:	ldr	r2, [sp, #32]
   169e8:	cmp	sl, #2
   169ec:	movne	r2, #0
   169f0:	andeq	r2, r2, #1
   169f4:	cmp	r2, #0
   169f8:	bne	16a1c <__assert_fail@plt+0x5870>
   169fc:	ldr	r2, [sp, #48]	; 0x30
   16a00:	cmp	r2, #0
   16a04:	moveq	r8, r2
   16a08:	moveq	r5, r2
   16a0c:	beq	16a94 <__assert_fail@plt+0x58e8>
   16a10:	mov	r4, r3
   16a14:	mov	r8, #0
   16a18:	b	16aec <__assert_fail@plt+0x5940>
   16a1c:	mov	r8, sl
   16a20:	mov	sl, r7
   16a24:	b	17290 <__assert_fail@plt+0x60e4>
   16a28:	mov	r3, #97	; 0x61
   16a2c:	b	169fc <__assert_fail@plt+0x5850>
   16a30:	ldr	r3, [sp, #28]
   16a34:	cmn	r3, #1
   16a38:	beq	16a64 <__assert_fail@plt+0x58b8>
   16a3c:	ldr	r3, [sp, #28]
   16a40:	subs	r3, r3, #1
   16a44:	movne	r3, #1
   16a48:	cmp	r3, #0
   16a4c:	bne	17114 <__assert_fail@plt+0x5f68>
   16a50:	cmp	r6, #0
   16a54:	beq	16a7c <__assert_fail@plt+0x58d0>
   16a58:	mov	r8, #0
   16a5c:	mov	r5, r8
   16a60:	b	16a94 <__assert_fail@plt+0x58e8>
   16a64:	ldr	r3, [sp, #52]	; 0x34
   16a68:	ldrb	r3, [r3, #1]
   16a6c:	adds	r3, r3, #0
   16a70:	movne	r3, #1
   16a74:	b	16a48 <__assert_fail@plt+0x589c>
   16a78:	mov	r8, #0
   16a7c:	ldr	r5, [sp, #32]
   16a80:	cmp	sl, #2
   16a84:	movne	r5, #0
   16a88:	andeq	r5, r5, #1
   16a8c:	cmp	r5, #0
   16a90:	bne	16c44 <__assert_fail@plt+0x5a98>
   16a94:	ldr	r3, [sp, #68]	; 0x44
   16a98:	cmp	sl, #2
   16a9c:	orreq	r3, r3, #1
   16aa0:	eor	r3, r3, #1
   16aa4:	ldr	r2, [sp, #32]
   16aa8:	orr	r3, r2, r3
   16aac:	tst	r3, #255	; 0xff
   16ab0:	beq	16ae0 <__assert_fail@plt+0x5934>
   16ab4:	ldr	r3, [sp, #160]	; 0xa0
   16ab8:	cmp	r3, #0
   16abc:	beq	16ae0 <__assert_fail@plt+0x5934>
   16ac0:	lsr	r2, r4, #5
   16ac4:	uxtb	r2, r2
   16ac8:	and	r3, r4, #31
   16acc:	ldr	r1, [sp, #160]	; 0xa0
   16ad0:	ldr	r2, [r1, r2, lsl #2]
   16ad4:	lsr	r3, r2, r3
   16ad8:	tst	r3, #1
   16adc:	bne	16aec <__assert_fail@plt+0x5940>
   16ae0:	ldr	r3, [sp, #56]	; 0x38
   16ae4:	cmp	r3, #0
   16ae8:	beq	16978 <__assert_fail@plt+0x57cc>
   16aec:	ldr	r3, [sp, #32]
   16af0:	cmp	r3, #0
   16af4:	bne	17300 <__assert_fail@plt+0x6154>
   16af8:	ldr	r3, [sp, #44]	; 0x2c
   16afc:	eor	r3, r3, #1
   16b00:	cmp	sl, #2
   16b04:	movne	r3, #0
   16b08:	andeq	r3, r3, #1
   16b0c:	cmp	r3, #0
   16b10:	beq	16b54 <__assert_fail@plt+0x59a8>
   16b14:	cmp	r7, fp
   16b18:	ldrhi	r2, [sp, #36]	; 0x24
   16b1c:	movhi	r1, #39	; 0x27
   16b20:	strbhi	r1, [r2, fp]
   16b24:	add	r2, fp, #1
   16b28:	cmp	r7, r2
   16b2c:	ldrhi	r1, [sp, #36]	; 0x24
   16b30:	movhi	r0, #36	; 0x24
   16b34:	strbhi	r0, [r1, r2]
   16b38:	add	r2, fp, #2
   16b3c:	cmp	r7, r2
   16b40:	ldrhi	r1, [sp, #36]	; 0x24
   16b44:	movhi	r0, #39	; 0x27
   16b48:	strbhi	r0, [r1, r2]
   16b4c:	add	fp, fp, #3
   16b50:	str	r3, [sp, #44]	; 0x2c
   16b54:	cmp	r7, fp
   16b58:	ldrhi	r3, [sp, #36]	; 0x24
   16b5c:	movhi	r2, #92	; 0x5c
   16b60:	strbhi	r2, [r3, fp]
   16b64:	add	fp, fp, #1
   16b68:	cmp	fp, r7
   16b6c:	ldrcc	r3, [sp, #36]	; 0x24
   16b70:	strbcc	r4, [r3, fp]
   16b74:	add	fp, fp, #1
   16b78:	ldr	r3, [sp, #40]	; 0x28
   16b7c:	cmp	r8, #0
   16b80:	moveq	r3, #0
   16b84:	str	r3, [sp, #40]	; 0x28
   16b88:	add	r6, r6, #1
   16b8c:	ldr	r3, [sp, #28]
   16b90:	cmn	r3, #1
   16b94:	beq	17120 <__assert_fail@plt+0x5f74>
   16b98:	ldr	r3, [sp, #28]
   16b9c:	subs	r8, r3, r6
   16ba0:	movne	r8, #1
   16ba4:	cmp	r8, #0
   16ba8:	beq	17134 <__assert_fail@plt+0x5f88>
   16bac:	ldr	r5, [sp, #48]	; 0x30
   16bb0:	cmp	sl, #2
   16bb4:	moveq	r5, #0
   16bb8:	andne	r5, r5, #1
   16bbc:	ldr	r3, [sp, #60]	; 0x3c
   16bc0:	adds	r9, r3, #0
   16bc4:	movne	r9, #1
   16bc8:	ands	r2, r5, r9
   16bcc:	str	r2, [sp, #56]	; 0x38
   16bd0:	beq	16498 <__assert_fail@plt+0x52ec>
   16bd4:	add	r4, r6, r3
   16bd8:	ldr	r2, [sp, #28]
   16bdc:	cmp	r3, #1
   16be0:	movls	r3, #0
   16be4:	movhi	r3, #1
   16be8:	cmn	r2, #1
   16bec:	movne	r3, #0
   16bf0:	cmp	r3, #0
   16bf4:	beq	16c04 <__assert_fail@plt+0x5a58>
   16bf8:	ldr	r0, [sp, #52]	; 0x34
   16bfc:	bl	11044 <strlen@plt>
   16c00:	str	r0, [sp, #28]
   16c04:	ldr	r3, [sp, #28]
   16c08:	cmp	r3, r4
   16c0c:	bcc	16490 <__assert_fail@plt+0x52e4>
   16c10:	ldr	r2, [sp, #60]	; 0x3c
   16c14:	ldr	r1, [sp, #72]	; 0x48
   16c18:	ldr	r3, [sp, #52]	; 0x34
   16c1c:	add	r0, r3, r6
   16c20:	bl	10f3c <memcmp@plt>
   16c24:	cmp	r0, #0
   16c28:	bne	166b0 <__assert_fail@plt+0x5504>
   16c2c:	ldr	r3, [sp, #32]
   16c30:	cmp	r3, #0
   16c34:	beq	16498 <__assert_fail@plt+0x52ec>
   16c38:	mov	r8, sl
   16c3c:	mov	sl, r7
   16c40:	b	17290 <__assert_fail@plt+0x60e4>
   16c44:	mov	r8, sl
   16c48:	mov	sl, r7
   16c4c:	b	17290 <__assert_fail@plt+0x60e4>
   16c50:	cmp	sl, #2
   16c54:	strne	r8, [sp, #80]	; 0x50
   16c58:	movne	r5, #0
   16c5c:	bne	16a94 <__assert_fail@plt+0x58e8>
   16c60:	ldr	r3, [sp, #32]
   16c64:	cmp	r3, #0
   16c68:	bne	1727c <__assert_fail@plt+0x60d0>
   16c6c:	ldr	r2, [sp, #76]	; 0x4c
   16c70:	adds	r3, r7, #0
   16c74:	movne	r3, #1
   16c78:	cmp	r2, #0
   16c7c:	movne	r3, #0
   16c80:	cmp	r3, #0
   16c84:	movne	r3, #0
   16c88:	bne	16cb8 <__assert_fail@plt+0x5b0c>
   16c8c:	cmp	r7, fp
   16c90:	ldrhi	r3, [sp, #36]	; 0x24
   16c94:	movhi	r2, #39	; 0x27
   16c98:	strbhi	r2, [r3, fp]
   16c9c:	add	r3, fp, #1
   16ca0:	cmp	r7, r3
   16ca4:	ldrhi	r2, [sp, #36]	; 0x24
   16ca8:	movhi	r1, #92	; 0x5c
   16cac:	strbhi	r1, [r2, r3]
   16cb0:	mov	r3, r7
   16cb4:	ldr	r7, [sp, #76]	; 0x4c
   16cb8:	add	r2, fp, #2
   16cbc:	cmp	r2, r3
   16cc0:	ldrcc	r1, [sp, #36]	; 0x24
   16cc4:	movcc	r0, #39	; 0x27
   16cc8:	strbcc	r0, [r1, r2]
   16ccc:	add	fp, fp, #3
   16cd0:	ldr	r2, [sp, #32]
   16cd4:	mov	r5, r2
   16cd8:	str	r8, [sp, #80]	; 0x50
   16cdc:	str	r2, [sp, #44]	; 0x2c
   16ce0:	str	r7, [sp, #76]	; 0x4c
   16ce4:	mov	r7, r3
   16ce8:	b	16a94 <__assert_fail@plt+0x58e8>
   16cec:	ldr	r5, [sp, #84]	; 0x54
   16cf0:	cmp	r5, #1
   16cf4:	beq	16d24 <__assert_fail@plt+0x5b78>
   16cf8:	mov	r3, #0
   16cfc:	str	r3, [sp, #104]	; 0x68
   16d00:	str	r3, [sp, #108]	; 0x6c
   16d04:	ldr	r3, [sp, #28]
   16d08:	cmn	r3, #1
   16d0c:	beq	16d58 <__assert_fail@plt+0x5bac>
   16d10:	mov	r3, #0
   16d14:	str	r4, [sp, #88]	; 0x58
   16d18:	str	fp, [sp, #92]	; 0x5c
   16d1c:	mov	fp, r3
   16d20:	b	16e80 <__assert_fail@plt+0x5cd4>
   16d24:	bl	1102c <__ctype_b_loc@plt>
   16d28:	ldr	r2, [r0]
   16d2c:	lsl	r3, r4, #1
   16d30:	ldrh	r8, [r2, r3]
   16d34:	lsr	r8, r8, #14
   16d38:	and	r8, r8, #1
   16d3c:	mov	r2, r5
   16d40:	eor	r5, r8, #1
   16d44:	ldr	r3, [sp, #48]	; 0x30
   16d48:	and	r5, r5, r3
   16d4c:	ands	r5, r5, #255	; 0xff
   16d50:	beq	16a94 <__assert_fail@plt+0x58e8>
   16d54:	b	16f18 <__assert_fail@plt+0x5d6c>
   16d58:	ldr	r0, [sp, #52]	; 0x34
   16d5c:	bl	11044 <strlen@plt>
   16d60:	str	r0, [sp, #28]
   16d64:	b	16d10 <__assert_fail@plt+0x5b64>
   16d68:	mov	r2, fp
   16d6c:	mov	r1, r4
   16d70:	ldr	r4, [sp, #88]	; 0x58
   16d74:	ldr	fp, [sp, #92]	; 0x5c
   16d78:	ldr	r0, [sp, #28]
   16d7c:	cmp	r0, r5
   16d80:	bls	16f4c <__assert_fail@plt+0x5da0>
   16d84:	ldrb	r3, [r1]
   16d88:	cmp	r3, #0
   16d8c:	beq	16f54 <__assert_fail@plt+0x5da8>
   16d90:	mov	r3, r1
   16d94:	add	r2, r2, #1
   16d98:	add	r1, r6, r2
   16d9c:	cmp	r0, r1
   16da0:	bls	16f5c <__assert_fail@plt+0x5db0>
   16da4:	ldrb	r1, [r3, #1]!
   16da8:	cmp	r1, #0
   16dac:	bne	16d94 <__assert_fail@plt+0x5be8>
   16db0:	mov	r8, #0
   16db4:	b	16f10 <__assert_fail@plt+0x5d64>
   16db8:	cmp	r4, r5
   16dbc:	beq	16e5c <__assert_fail@plt+0x5cb0>
   16dc0:	ldrb	r3, [r4, #1]!
   16dc4:	sub	r3, r3, #91	; 0x5b
   16dc8:	cmp	r3, #33	; 0x21
   16dcc:	ldrls	pc, [pc, r3, lsl #2]
   16dd0:	b	16db8 <__assert_fail@plt+0x5c0c>
   16dd4:	andeq	r7, r1, r8, lsl #5
   16dd8:	andeq	r7, r1, r8, lsl #5
   16ddc:			; <UNDEFINED> instruction: 0x00016db8
   16de0:	andeq	r7, r1, r8, lsl #5
   16de4:			; <UNDEFINED> instruction: 0x00016db8
   16de8:	andeq	r7, r1, r8, lsl #5
   16dec:			; <UNDEFINED> instruction: 0x00016db8
   16df0:			; <UNDEFINED> instruction: 0x00016db8
   16df4:			; <UNDEFINED> instruction: 0x00016db8
   16df8:			; <UNDEFINED> instruction: 0x00016db8
   16dfc:			; <UNDEFINED> instruction: 0x00016db8
   16e00:			; <UNDEFINED> instruction: 0x00016db8
   16e04:			; <UNDEFINED> instruction: 0x00016db8
   16e08:			; <UNDEFINED> instruction: 0x00016db8
   16e0c:			; <UNDEFINED> instruction: 0x00016db8
   16e10:			; <UNDEFINED> instruction: 0x00016db8
   16e14:			; <UNDEFINED> instruction: 0x00016db8
   16e18:			; <UNDEFINED> instruction: 0x00016db8
   16e1c:			; <UNDEFINED> instruction: 0x00016db8
   16e20:			; <UNDEFINED> instruction: 0x00016db8
   16e24:			; <UNDEFINED> instruction: 0x00016db8
   16e28:			; <UNDEFINED> instruction: 0x00016db8
   16e2c:			; <UNDEFINED> instruction: 0x00016db8
   16e30:			; <UNDEFINED> instruction: 0x00016db8
   16e34:			; <UNDEFINED> instruction: 0x00016db8
   16e38:			; <UNDEFINED> instruction: 0x00016db8
   16e3c:			; <UNDEFINED> instruction: 0x00016db8
   16e40:			; <UNDEFINED> instruction: 0x00016db8
   16e44:			; <UNDEFINED> instruction: 0x00016db8
   16e48:			; <UNDEFINED> instruction: 0x00016db8
   16e4c:			; <UNDEFINED> instruction: 0x00016db8
   16e50:			; <UNDEFINED> instruction: 0x00016db8
   16e54:			; <UNDEFINED> instruction: 0x00016db8
   16e58:	andeq	r7, r1, r8, lsl #5
   16e5c:	ldr	r0, [sp, #100]	; 0x64
   16e60:	bl	10f84 <iswprint@plt>
   16e64:	cmp	r0, #0
   16e68:	moveq	r8, #0
   16e6c:	add	fp, fp, r9
   16e70:	add	r0, sp, #104	; 0x68
   16e74:	bl	10f30 <mbsinit@plt>
   16e78:	cmp	r0, #0
   16e7c:	bne	16ef0 <__assert_fail@plt+0x5d44>
   16e80:	add	r5, r6, fp
   16e84:	ldr	r3, [sp, #52]	; 0x34
   16e88:	add	r4, r3, r5
   16e8c:	add	r3, sp, #104	; 0x68
   16e90:	ldr	r2, [sp, #28]
   16e94:	sub	r2, r2, r5
   16e98:	mov	r1, r4
   16e9c:	add	r0, sp, #100	; 0x64
   16ea0:	bl	18e94 <__assert_fail@plt+0x7ce8>
   16ea4:	subs	r9, r0, #0
   16ea8:	beq	16f64 <__assert_fail@plt+0x5db8>
   16eac:	cmn	r9, #1
   16eb0:	beq	16f00 <__assert_fail@plt+0x5d54>
   16eb4:	cmn	r9, #2
   16eb8:	beq	16d68 <__assert_fail@plt+0x5bbc>
   16ebc:	ldr	r3, [sp, #32]
   16ec0:	cmp	sl, #2
   16ec4:	movne	r3, #0
   16ec8:	andeq	r3, r3, #1
   16ecc:	cmp	r3, #0
   16ed0:	beq	16e5c <__assert_fail@plt+0x5cb0>
   16ed4:	cmp	r9, #1
   16ed8:	bls	16e5c <__assert_fail@plt+0x5cb0>
   16edc:	sub	r3, r9, #1
   16ee0:	add	r5, r3, r5
   16ee4:	ldr	r3, [sp, #52]	; 0x34
   16ee8:	add	r5, r3, r5
   16eec:	b	16dc0 <__assert_fail@plt+0x5c14>
   16ef0:	ldr	r4, [sp, #88]	; 0x58
   16ef4:	mov	r2, fp
   16ef8:	ldr	fp, [sp, #92]	; 0x5c
   16efc:	b	16f10 <__assert_fail@plt+0x5d64>
   16f00:	ldr	r4, [sp, #88]	; 0x58
   16f04:	mov	r2, fp
   16f08:	ldr	fp, [sp, #92]	; 0x5c
   16f0c:	mov	r8, #0
   16f10:	cmp	r2, #1
   16f14:	bls	16d40 <__assert_fail@plt+0x5b94>
   16f18:	add	r1, r6, r2
   16f1c:	ldr	ip, [sp, #64]	; 0x40
   16f20:	mov	r5, #0
   16f24:	eor	r3, r8, #1
   16f28:	ldr	r2, [sp, #48]	; 0x30
   16f2c:	and	r3, r3, r2
   16f30:	uxtb	r3, r3
   16f34:	ldr	r9, [sp, #32]
   16f38:	ldr	lr, [sp, #44]	; 0x2c
   16f3c:	ldr	r2, [sp, #56]	; 0x38
   16f40:	str	r8, [sp, #56]	; 0x38
   16f44:	ldr	r0, [sp, #36]	; 0x24
   16f48:	b	16fe4 <__assert_fail@plt+0x5e38>
   16f4c:	mov	r8, #0
   16f50:	b	16f10 <__assert_fail@plt+0x5d64>
   16f54:	mov	r8, #0
   16f58:	b	16f10 <__assert_fail@plt+0x5d64>
   16f5c:	mov	r8, #0
   16f60:	b	16f10 <__assert_fail@plt+0x5d64>
   16f64:	ldr	r4, [sp, #88]	; 0x58
   16f68:	mov	r2, fp
   16f6c:	ldr	fp, [sp, #92]	; 0x5c
   16f70:	b	16f10 <__assert_fail@plt+0x5d64>
   16f74:	cmp	r2, #0
   16f78:	beq	16f8c <__assert_fail@plt+0x5de0>
   16f7c:	cmp	r7, fp
   16f80:	movhi	r2, #92	; 0x5c
   16f84:	strbhi	r2, [r0, fp]
   16f88:	add	fp, fp, #1
   16f8c:	add	r8, r6, #1
   16f90:	cmp	r1, r8
   16f94:	bls	1709c <__assert_fail@plt+0x5ef0>
   16f98:	eor	r2, r5, #1
   16f9c:	and	r2, r2, lr
   16fa0:	ands	r2, r2, #255	; 0xff
   16fa4:	beq	170b8 <__assert_fail@plt+0x5f0c>
   16fa8:	cmp	r7, fp
   16fac:	movhi	r2, #39	; 0x27
   16fb0:	strbhi	r2, [r0, fp]
   16fb4:	add	r2, fp, #1
   16fb8:	cmp	r7, r2
   16fbc:	movhi	lr, #39	; 0x27
   16fc0:	strbhi	lr, [r0, r2]
   16fc4:	add	fp, fp, #2
   16fc8:	mov	r6, r8
   16fcc:	mov	r2, r3
   16fd0:	mov	lr, r3
   16fd4:	cmp	r7, fp
   16fd8:	strbhi	r4, [r0, fp]
   16fdc:	add	fp, fp, #1
   16fe0:	ldrb	r4, [ip, #1]!
   16fe4:	cmp	r3, #0
   16fe8:	beq	16f74 <__assert_fail@plt+0x5dc8>
   16fec:	cmp	r9, #0
   16ff0:	bne	172f4 <__assert_fail@plt+0x6148>
   16ff4:	eor	r5, lr, #1
   16ff8:	cmp	sl, #2
   16ffc:	movne	r5, #0
   17000:	andeq	r5, r5, #1
   17004:	cmp	r5, #0
   17008:	beq	17040 <__assert_fail@plt+0x5e94>
   1700c:	cmp	r7, fp
   17010:	movhi	lr, #39	; 0x27
   17014:	strbhi	lr, [r0, fp]
   17018:	add	lr, fp, #1
   1701c:	cmp	r7, lr
   17020:	movhi	r8, #36	; 0x24
   17024:	strbhi	r8, [r0, lr]
   17028:	add	lr, fp, #2
   1702c:	cmp	r7, lr
   17030:	movhi	r8, #39	; 0x27
   17034:	strbhi	r8, [r0, lr]
   17038:	add	fp, fp, #3
   1703c:	mov	lr, r5
   17040:	cmp	r7, fp
   17044:	movhi	r5, #92	; 0x5c
   17048:	strbhi	r5, [r0, fp]
   1704c:	add	r5, fp, #1
   17050:	cmp	r7, r5
   17054:	lsrhi	r8, r4, #6
   17058:	addhi	r8, r8, #48	; 0x30
   1705c:	strbhi	r8, [r0, r5]
   17060:	add	r8, fp, #2
   17064:	cmp	r7, r8
   17068:	lsrhi	r5, r4, #3
   1706c:	andhi	r5, r5, #7
   17070:	addhi	r5, r5, #48	; 0x30
   17074:	strbhi	r5, [r0, r8]
   17078:	add	fp, fp, #3
   1707c:	and	r4, r4, #7
   17080:	add	r4, r4, #48	; 0x30
   17084:	add	r5, r6, #1
   17088:	cmp	r1, r5
   1708c:	bls	170a8 <__assert_fail@plt+0x5efc>
   17090:	mov	r6, r5
   17094:	mov	r5, r3
   17098:	b	16fd4 <__assert_fail@plt+0x5e28>
   1709c:	str	lr, [sp, #44]	; 0x2c
   170a0:	ldr	r8, [sp, #56]	; 0x38
   170a4:	b	16978 <__assert_fail@plt+0x57cc>
   170a8:	str	lr, [sp, #44]	; 0x2c
   170ac:	ldr	r8, [sp, #56]	; 0x38
   170b0:	mov	r5, r3
   170b4:	b	16978 <__assert_fail@plt+0x57cc>
   170b8:	mov	r6, r8
   170bc:	b	16fd4 <__assert_fail@plt+0x5e28>
   170c0:	mov	r5, #0
   170c4:	b	16a94 <__assert_fail@plt+0x58e8>
   170c8:	mov	r8, r5
   170cc:	ldr	r5, [sp, #48]	; 0x30
   170d0:	mov	r4, #48	; 0x30
   170d4:	b	16a94 <__assert_fail@plt+0x58e8>
   170d8:	ldr	r8, [sp, #32]
   170dc:	mov	r4, #48	; 0x30
   170e0:	b	16a94 <__assert_fail@plt+0x58e8>
   170e4:	ldr	r8, [sp, #32]
   170e8:	mov	r4, #48	; 0x30
   170ec:	b	16a94 <__assert_fail@plt+0x58e8>
   170f0:	mov	r8, #0
   170f4:	mov	r5, r8
   170f8:	b	16a94 <__assert_fail@plt+0x58e8>
   170fc:	mov	r8, #0
   17100:	mov	r5, r8
   17104:	b	16a94 <__assert_fail@plt+0x58e8>
   17108:	mov	r8, #0
   1710c:	mov	r5, r8
   17110:	b	16a94 <__assert_fail@plt+0x58e8>
   17114:	mov	r8, #0
   17118:	mov	r5, r8
   1711c:	b	16a94 <__assert_fail@plt+0x58e8>
   17120:	ldr	r3, [sp, #52]	; 0x34
   17124:	ldrb	r8, [r3, r6]
   17128:	adds	r8, r8, #0
   1712c:	movne	r8, #1
   17130:	b	16ba4 <__assert_fail@plt+0x59f8>
   17134:	cmp	sl, #2
   17138:	movne	r3, #0
   1713c:	moveq	r3, #1
   17140:	ldr	r1, [sp, #32]
   17144:	mov	r2, r1
   17148:	and	r2, r2, r3
   1714c:	cmp	fp, #0
   17150:	movne	r2, #0
   17154:	andeq	r2, r2, #1
   17158:	cmp	r2, #0
   1715c:	bne	1730c <__assert_fail@plt+0x6160>
   17160:	eor	r2, r1, #1
   17164:	and	r3, r3, r2
   17168:	ldr	r1, [sp, #80]	; 0x50
   1716c:	tst	r1, r3
   17170:	beq	171e8 <__assert_fail@plt+0x603c>
   17174:	ldr	r3, [sp, #40]	; 0x28
   17178:	cmp	r3, #0
   1717c:	bne	171a4 <__assert_fail@plt+0x5ff8>
   17180:	ldr	r1, [sp, #76]	; 0x4c
   17184:	clz	r3, r7
   17188:	lsr	r3, r3, #5
   1718c:	cmp	r1, #0
   17190:	moveq	r3, #0
   17194:	cmp	r3, #0
   17198:	beq	171e8 <__assert_fail@plt+0x603c>
   1719c:	ldr	r7, [sp, #76]	; 0x4c
   171a0:	b	16238 <__assert_fail@plt+0x508c>
   171a4:	ldr	r3, [sp, #168]	; 0xa8
   171a8:	str	r3, [sp, #16]
   171ac:	ldr	r3, [sp, #164]	; 0xa4
   171b0:	str	r3, [sp, #12]
   171b4:	ldr	r3, [sp, #160]	; 0xa0
   171b8:	str	r3, [sp, #8]
   171bc:	ldr	r3, [sp, #156]	; 0x9c
   171c0:	str	r3, [sp, #4]
   171c4:	mov	r3, #5
   171c8:	str	r3, [sp]
   171cc:	ldr	r3, [sp, #28]
   171d0:	ldr	r2, [sp, #52]	; 0x34
   171d4:	ldr	r1, [sp, #76]	; 0x4c
   171d8:	ldr	r0, [sp, #36]	; 0x24
   171dc:	bl	161d8 <__assert_fail@plt+0x502c>
   171e0:	mov	fp, r0
   171e4:	b	172e8 <__assert_fail@plt+0x613c>
   171e8:	mov	sl, r7
   171ec:	ldr	r3, [sp, #72]	; 0x48
   171f0:	cmp	r3, #0
   171f4:	moveq	r2, #0
   171f8:	andne	r2, r2, #1
   171fc:	cmp	r2, #0
   17200:	beq	17230 <__assert_fail@plt+0x6084>
   17204:	mov	r2, r3
   17208:	ldrb	r3, [r3]
   1720c:	cmp	r3, #0
   17210:	beq	17230 <__assert_fail@plt+0x6084>
   17214:	ldr	r1, [sp, #36]	; 0x24
   17218:	cmp	sl, fp
   1721c:	strbhi	r3, [r1, fp]
   17220:	add	fp, fp, #1
   17224:	ldrb	r3, [r2, #1]!
   17228:	cmp	r3, #0
   1722c:	bne	17218 <__assert_fail@plt+0x606c>
   17230:	cmp	sl, fp
   17234:	movhi	r3, #0
   17238:	ldrhi	r2, [sp, #36]	; 0x24
   1723c:	strbhi	r3, [r2, fp]
   17240:	b	172e8 <__assert_fail@plt+0x613c>
   17244:	mov	r8, sl
   17248:	mov	sl, r7
   1724c:	ldr	r3, [sp, #32]
   17250:	str	r3, [sp, #48]	; 0x30
   17254:	b	17290 <__assert_fail@plt+0x60e4>
   17258:	mov	r8, sl
   1725c:	mov	sl, r7
   17260:	b	17290 <__assert_fail@plt+0x60e4>
   17264:	mov	r8, sl
   17268:	mov	sl, r7
   1726c:	b	17290 <__assert_fail@plt+0x60e4>
   17270:	andeq	sl, r1, r0, lsl #5
   17274:	muleq	r1, r0, r2
   17278:	andeq	sl, r1, r4, lsl #5
   1727c:	mov	r8, sl
   17280:	mov	sl, r7
   17284:	b	17290 <__assert_fail@plt+0x60e4>
   17288:	mov	r8, sl
   1728c:	mov	sl, r7
   17290:	ldr	r3, [sp, #48]	; 0x30
   17294:	cmp	r8, #2
   17298:	movne	r3, #0
   1729c:	andeq	r3, r3, #1
   172a0:	cmp	r3, #0
   172a4:	movne	r8, #4
   172a8:	ldr	r3, [sp, #168]	; 0xa8
   172ac:	str	r3, [sp, #16]
   172b0:	ldr	r3, [sp, #164]	; 0xa4
   172b4:	str	r3, [sp, #12]
   172b8:	mov	r3, #0
   172bc:	str	r3, [sp, #8]
   172c0:	ldr	r3, [sp, #156]	; 0x9c
   172c4:	bic	r3, r3, #2
   172c8:	str	r3, [sp, #4]
   172cc:	str	r8, [sp]
   172d0:	ldr	r3, [sp, #28]
   172d4:	ldr	r2, [sp, #52]	; 0x34
   172d8:	mov	r1, sl
   172dc:	ldr	r0, [sp, #36]	; 0x24
   172e0:	bl	161d8 <__assert_fail@plt+0x502c>
   172e4:	mov	fp, r0
   172e8:	mov	r0, fp
   172ec:	add	sp, sp, #116	; 0x74
   172f0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   172f4:	mov	r8, sl
   172f8:	mov	sl, r7
   172fc:	b	17290 <__assert_fail@plt+0x60e4>
   17300:	mov	r8, sl
   17304:	mov	sl, r7
   17308:	b	17290 <__assert_fail@plt+0x60e4>
   1730c:	mov	r8, sl
   17310:	mov	sl, r7
   17314:	b	17290 <__assert_fail@plt+0x60e4>
   17318:	mov	r8, sl
   1731c:	mov	sl, r7
   17320:	b	172a8 <__assert_fail@plt+0x60fc>
   17324:	mov	r3, #1
   17328:	str	r3, [sp, #32]
   1732c:	str	r3, [sp, #48]	; 0x30
   17330:	str	r3, [sp, #60]	; 0x3c
   17334:	ldr	r3, [pc, #-196]	; 17278 <__assert_fail@plt+0x60cc>
   17338:	str	r3, [sp, #72]	; 0x48
   1733c:	mov	fp, #0
   17340:	mov	sl, #5
   17344:	b	16294 <__assert_fail@plt+0x50e8>
   17348:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1734c:	sub	sp, sp, #52	; 0x34
   17350:	mov	r5, r0
   17354:	str	r1, [sp, #24]
   17358:	str	r2, [sp, #28]
   1735c:	mov	r4, r3
   17360:	bl	11068 <__errno_location@plt>
   17364:	str	r0, [sp, #32]
   17368:	ldr	r3, [r0]
   1736c:	str	r3, [sp, #36]	; 0x24
   17370:	ldr	r3, [pc, #396]	; 17504 <__assert_fail@plt+0x6358>
   17374:	ldr	r6, [r3]
   17378:	cmn	r5, #-2147483647	; 0x80000001
   1737c:	movne	r3, #0
   17380:	moveq	r3, #1
   17384:	orrs	r3, r3, r5, lsr #31
   17388:	bne	174c8 <__assert_fail@plt+0x631c>
   1738c:	ldr	r3, [pc, #368]	; 17504 <__assert_fail@plt+0x6358>
   17390:	ldr	r2, [r3, #4]
   17394:	cmp	r5, r2
   17398:	blt	17400 <__assert_fail@plt+0x6254>
   1739c:	str	r2, [sp, #44]	; 0x2c
   173a0:	add	r3, r3, #8
   173a4:	cmp	r6, r3
   173a8:	beq	174cc <__assert_fail@plt+0x6320>
   173ac:	sub	r2, r5, r2
   173b0:	mov	r3, #8
   173b4:	str	r3, [sp]
   173b8:	mvn	r3, #-2147483648	; 0x80000000
   173bc:	add	r2, r2, #1
   173c0:	add	r1, sp, #44	; 0x2c
   173c4:	mov	r0, r6
   173c8:	bl	182d8 <__assert_fail@plt+0x712c>
   173cc:	mov	r6, r0
   173d0:	ldr	r3, [pc, #300]	; 17504 <__assert_fail@plt+0x6358>
   173d4:	str	r0, [r3]
   173d8:	ldr	r7, [pc, #292]	; 17504 <__assert_fail@plt+0x6358>
   173dc:	ldr	r0, [r7, #4]
   173e0:	ldr	r2, [sp, #44]	; 0x2c
   173e4:	sub	r2, r2, r0
   173e8:	lsl	r2, r2, #3
   173ec:	mov	r1, #0
   173f0:	add	r0, r6, r0, lsl #3
   173f4:	bl	1108c <memset@plt>
   173f8:	ldr	r3, [sp, #44]	; 0x2c
   173fc:	str	r3, [r7, #4]
   17400:	add	fp, r6, r5, lsl #3
   17404:	ldr	r8, [r6, r5, lsl #3]
   17408:	ldr	r7, [fp, #4]
   1740c:	ldr	r9, [r4, #4]
   17410:	orr	r9, r9, #1
   17414:	add	sl, r4, #8
   17418:	ldr	r3, [r4, #44]	; 0x2c
   1741c:	str	r3, [sp, #16]
   17420:	ldr	r3, [r4, #40]	; 0x28
   17424:	str	r3, [sp, #12]
   17428:	str	sl, [sp, #8]
   1742c:	str	r9, [sp, #4]
   17430:	ldr	r3, [r4]
   17434:	str	r3, [sp]
   17438:	ldr	r3, [sp, #28]
   1743c:	ldr	r2, [sp, #24]
   17440:	mov	r1, r8
   17444:	mov	r0, r7
   17448:	bl	161d8 <__assert_fail@plt+0x502c>
   1744c:	cmp	r8, r0
   17450:	bhi	174b0 <__assert_fail@plt+0x6304>
   17454:	add	r8, r0, #1
   17458:	str	r8, [r6, r5, lsl #3]
   1745c:	ldr	r3, [pc, #164]	; 17508 <__assert_fail@plt+0x635c>
   17460:	cmp	r7, r3
   17464:	beq	17470 <__assert_fail@plt+0x62c4>
   17468:	mov	r0, r7
   1746c:	bl	18d60 <__assert_fail@plt+0x7bb4>
   17470:	mov	r0, r8
   17474:	bl	18154 <__assert_fail@plt+0x6fa8>
   17478:	mov	r7, r0
   1747c:	str	r0, [fp, #4]
   17480:	ldr	r3, [r4, #44]	; 0x2c
   17484:	str	r3, [sp, #16]
   17488:	ldr	r3, [r4, #40]	; 0x28
   1748c:	str	r3, [sp, #12]
   17490:	str	sl, [sp, #8]
   17494:	str	r9, [sp, #4]
   17498:	ldr	r3, [r4]
   1749c:	str	r3, [sp]
   174a0:	ldr	r3, [sp, #28]
   174a4:	ldr	r2, [sp, #24]
   174a8:	mov	r1, r8
   174ac:	bl	161d8 <__assert_fail@plt+0x502c>
   174b0:	ldr	r3, [sp, #32]
   174b4:	ldr	r2, [sp, #36]	; 0x24
   174b8:	str	r2, [r3]
   174bc:	mov	r0, r7
   174c0:	add	sp, sp, #52	; 0x34
   174c4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   174c8:	bl	1117c <abort@plt>
   174cc:	sub	r2, r5, r2
   174d0:	mov	r3, #8
   174d4:	str	r3, [sp]
   174d8:	mvn	r3, #-2147483648	; 0x80000000
   174dc:	add	r2, r2, #1
   174e0:	add	r1, sp, #44	; 0x2c
   174e4:	mov	r0, #0
   174e8:	bl	182d8 <__assert_fail@plt+0x712c>
   174ec:	mov	r6, r0
   174f0:	ldr	r3, [pc, #12]	; 17504 <__assert_fail@plt+0x6358>
   174f4:	str	r0, [r3], #8
   174f8:	ldm	r3, {r0, r1}
   174fc:	stm	r6, {r0, r1}
   17500:	b	173d8 <__assert_fail@plt+0x622c>
   17504:	andeq	fp, r2, r4, lsr #2
   17508:			; <UNDEFINED> instruction: 0x0002b1b8
   1750c:	push	{r4, r5, r6, lr}
   17510:	mov	r4, r0
   17514:	bl	11068 <__errno_location@plt>
   17518:	mov	r5, r0
   1751c:	ldr	r6, [r0]
   17520:	cmp	r4, #0
   17524:	ldr	r3, [pc, #20]	; 17540 <__assert_fail@plt+0x6394>
   17528:	moveq	r4, r3
   1752c:	mov	r1, #48	; 0x30
   17530:	mov	r0, r4
   17534:	bl	18640 <__assert_fail@plt+0x7494>
   17538:	str	r6, [r5]
   1753c:	pop	{r4, r5, r6, pc}
   17540:			; <UNDEFINED> instruction: 0x0002b2b8
   17544:	subs	r3, r0, #0
   17548:	ldr	r2, [pc, #8]	; 17558 <__assert_fail@plt+0x63ac>
   1754c:	moveq	r3, r2
   17550:	ldr	r0, [r3]
   17554:	bx	lr
   17558:			; <UNDEFINED> instruction: 0x0002b2b8
   1755c:	subs	r3, r0, #0
   17560:	ldr	r2, [pc, #8]	; 17570 <__assert_fail@plt+0x63c4>
   17564:	moveq	r3, r2
   17568:	str	r1, [r3]
   1756c:	bx	lr
   17570:			; <UNDEFINED> instruction: 0x0002b2b8
   17574:	push	{lr}		; (str lr, [sp, #-4]!)
   17578:	subs	r3, r0, #0
   1757c:	ldr	r0, [pc, #44]	; 175b0 <__assert_fail@plt+0x6404>
   17580:	moveq	r3, r0
   17584:	add	r3, r3, #8
   17588:	lsr	lr, r1, #5
   1758c:	and	r1, r1, #31
   17590:	ldr	ip, [r3, lr, lsl #2]
   17594:	lsr	r0, ip, r1
   17598:	eor	r2, r2, r0
   1759c:	and	r2, r2, #1
   175a0:	eor	r1, ip, r2, lsl r1
   175a4:	str	r1, [r3, lr, lsl #2]
   175a8:	and	r0, r0, #1
   175ac:	pop	{pc}		; (ldr pc, [sp], #4)
   175b0:			; <UNDEFINED> instruction: 0x0002b2b8
   175b4:	subs	r3, r0, #0
   175b8:	ldr	r2, [pc, #12]	; 175cc <__assert_fail@plt+0x6420>
   175bc:	moveq	r3, r2
   175c0:	ldr	r0, [r3, #4]
   175c4:	str	r1, [r3, #4]
   175c8:	bx	lr
   175cc:			; <UNDEFINED> instruction: 0x0002b2b8
   175d0:	subs	r3, r0, #0
   175d4:	ldr	r0, [pc, #40]	; 17604 <__assert_fail@plt+0x6458>
   175d8:	moveq	r3, r0
   175dc:	mov	r0, #10
   175e0:	str	r0, [r3]
   175e4:	cmp	r2, #0
   175e8:	cmpne	r1, #0
   175ec:	beq	175fc <__assert_fail@plt+0x6450>
   175f0:	str	r1, [r3, #40]	; 0x28
   175f4:	str	r2, [r3, #44]	; 0x2c
   175f8:	bx	lr
   175fc:	push	{r4, lr}
   17600:	bl	1117c <abort@plt>
   17604:			; <UNDEFINED> instruction: 0x0002b2b8
   17608:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1760c:	sub	sp, sp, #24
   17610:	mov	r7, r0
   17614:	mov	r8, r1
   17618:	mov	r9, r2
   1761c:	mov	sl, r3
   17620:	ldr	r4, [sp, #56]	; 0x38
   17624:	cmp	r4, #0
   17628:	ldr	r3, [pc, #84]	; 17684 <__assert_fail@plt+0x64d8>
   1762c:	moveq	r4, r3
   17630:	bl	11068 <__errno_location@plt>
   17634:	mov	r5, r0
   17638:	ldr	r6, [r0]
   1763c:	ldr	r3, [r4, #44]	; 0x2c
   17640:	str	r3, [sp, #16]
   17644:	ldr	r3, [r4, #40]	; 0x28
   17648:	str	r3, [sp, #12]
   1764c:	add	r3, r4, #8
   17650:	str	r3, [sp, #8]
   17654:	ldr	r3, [r4, #4]
   17658:	str	r3, [sp, #4]
   1765c:	ldr	r3, [r4]
   17660:	str	r3, [sp]
   17664:	mov	r3, sl
   17668:	mov	r2, r9
   1766c:	mov	r1, r8
   17670:	mov	r0, r7
   17674:	bl	161d8 <__assert_fail@plt+0x502c>
   17678:	str	r6, [r5]
   1767c:	add	sp, sp, #24
   17680:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   17684:			; <UNDEFINED> instruction: 0x0002b2b8
   17688:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1768c:	sub	sp, sp, #44	; 0x2c
   17690:	str	r0, [sp, #28]
   17694:	str	r1, [sp, #32]
   17698:	mov	r6, r2
   1769c:	subs	r4, r3, #0
   176a0:	ldr	r3, [pc, #172]	; 17754 <__assert_fail@plt+0x65a8>
   176a4:	moveq	r4, r3
   176a8:	bl	11068 <__errno_location@plt>
   176ac:	mov	r7, r0
   176b0:	ldr	fp, [r0]
   176b4:	ldr	r5, [r4, #4]
   176b8:	cmp	r6, #0
   176bc:	orreq	r5, r5, #1
   176c0:	add	r9, r4, #8
   176c4:	ldr	r3, [r4, #44]	; 0x2c
   176c8:	str	r3, [sp, #16]
   176cc:	ldr	r3, [r4, #40]	; 0x28
   176d0:	str	r3, [sp, #12]
   176d4:	str	r9, [sp, #8]
   176d8:	str	r5, [sp, #4]
   176dc:	ldr	r3, [r4]
   176e0:	str	r3, [sp]
   176e4:	ldr	r3, [sp, #32]
   176e8:	ldr	r2, [sp, #28]
   176ec:	mov	r1, #0
   176f0:	mov	r0, r1
   176f4:	bl	161d8 <__assert_fail@plt+0x502c>
   176f8:	mov	sl, r0
   176fc:	add	r8, r0, #1
   17700:	mov	r0, r8
   17704:	bl	18154 <__assert_fail@plt+0x6fa8>
   17708:	str	r0, [sp, #36]	; 0x24
   1770c:	ldr	r3, [r4, #44]	; 0x2c
   17710:	str	r3, [sp, #16]
   17714:	ldr	r3, [r4, #40]	; 0x28
   17718:	str	r3, [sp, #12]
   1771c:	str	r9, [sp, #8]
   17720:	str	r5, [sp, #4]
   17724:	ldr	r3, [r4]
   17728:	str	r3, [sp]
   1772c:	ldr	r3, [sp, #32]
   17730:	ldr	r2, [sp, #28]
   17734:	mov	r1, r8
   17738:	bl	161d8 <__assert_fail@plt+0x502c>
   1773c:	str	fp, [r7]
   17740:	cmp	r6, #0
   17744:	strne	sl, [r6]
   17748:	ldr	r0, [sp, #36]	; 0x24
   1774c:	add	sp, sp, #44	; 0x2c
   17750:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17754:			; <UNDEFINED> instruction: 0x0002b2b8
   17758:	push	{r4, lr}
   1775c:	mov	r3, r2
   17760:	mov	r2, #0
   17764:	bl	17688 <__assert_fail@plt+0x64dc>
   17768:	pop	{r4, pc}
   1776c:	push	{r4, r5, r6, r7, r8, lr}
   17770:	ldr	r3, [pc, #140]	; 17804 <__assert_fail@plt+0x6658>
   17774:	ldr	r7, [r3]
   17778:	ldr	r3, [r3, #4]
   1777c:	cmp	r3, #1
   17780:	ble	177ac <__assert_fail@plt+0x6600>
   17784:	mov	r5, r7
   17788:	mov	r4, #1
   1778c:	ldr	r6, [pc, #112]	; 17804 <__assert_fail@plt+0x6658>
   17790:	ldr	r0, [r5, #12]
   17794:	bl	18d60 <__assert_fail@plt+0x7bb4>
   17798:	add	r4, r4, #1
   1779c:	add	r5, r5, #8
   177a0:	ldr	r3, [r6, #4]
   177a4:	cmp	r3, r4
   177a8:	bgt	17790 <__assert_fail@plt+0x65e4>
   177ac:	ldr	r0, [r7, #4]
   177b0:	ldr	r3, [pc, #80]	; 17808 <__assert_fail@plt+0x665c>
   177b4:	cmp	r0, r3
   177b8:	beq	177d4 <__assert_fail@plt+0x6628>
   177bc:	bl	18d60 <__assert_fail@plt+0x7bb4>
   177c0:	ldr	r3, [pc, #60]	; 17804 <__assert_fail@plt+0x6658>
   177c4:	mov	r2, #256	; 0x100
   177c8:	str	r2, [r3, #8]
   177cc:	ldr	r2, [pc, #52]	; 17808 <__assert_fail@plt+0x665c>
   177d0:	str	r2, [r3, #12]
   177d4:	ldr	r3, [pc, #48]	; 1780c <__assert_fail@plt+0x6660>
   177d8:	cmp	r7, r3
   177dc:	beq	177f4 <__assert_fail@plt+0x6648>
   177e0:	mov	r0, r7
   177e4:	bl	18d60 <__assert_fail@plt+0x7bb4>
   177e8:	ldr	r3, [pc, #20]	; 17804 <__assert_fail@plt+0x6658>
   177ec:	add	r2, r3, #8
   177f0:	str	r2, [r3]
   177f4:	mov	r2, #1
   177f8:	ldr	r3, [pc, #4]	; 17804 <__assert_fail@plt+0x6658>
   177fc:	str	r2, [r3, #4]
   17800:	pop	{r4, r5, r6, r7, r8, pc}
   17804:	andeq	fp, r2, r4, lsr #2
   17808:			; <UNDEFINED> instruction: 0x0002b1b8
   1780c:	andeq	fp, r2, ip, lsr #2
   17810:	push	{r4, lr}
   17814:	ldr	r3, [pc, #8]	; 17824 <__assert_fail@plt+0x6678>
   17818:	mvn	r2, #0
   1781c:	bl	17348 <__assert_fail@plt+0x619c>
   17820:	pop	{r4, pc}
   17824:			; <UNDEFINED> instruction: 0x0002b2b8
   17828:	push	{r4, lr}
   1782c:	ldr	r3, [pc, #4]	; 17838 <__assert_fail@plt+0x668c>
   17830:	bl	17348 <__assert_fail@plt+0x619c>
   17834:	pop	{r4, pc}
   17838:			; <UNDEFINED> instruction: 0x0002b2b8
   1783c:	push	{r4, lr}
   17840:	mov	r1, r0
   17844:	mov	r0, #0
   17848:	bl	17810 <__assert_fail@plt+0x6664>
   1784c:	pop	{r4, pc}
   17850:	push	{r4, lr}
   17854:	mov	r2, r1
   17858:	mov	r1, r0
   1785c:	mov	r0, #0
   17860:	bl	17828 <__assert_fail@plt+0x667c>
   17864:	pop	{r4, pc}
   17868:	push	{r4, r5, lr}
   1786c:	sub	sp, sp, #52	; 0x34
   17870:	mov	r4, r0
   17874:	mov	r5, r2
   17878:	mov	r0, sp
   1787c:	bl	16070 <__assert_fail@plt+0x4ec4>
   17880:	mov	r3, sp
   17884:	mvn	r2, #0
   17888:	mov	r1, r5
   1788c:	mov	r0, r4
   17890:	bl	17348 <__assert_fail@plt+0x619c>
   17894:	add	sp, sp, #52	; 0x34
   17898:	pop	{r4, r5, pc}
   1789c:	push	{r4, r5, r6, lr}
   178a0:	sub	sp, sp, #48	; 0x30
   178a4:	mov	r4, r0
   178a8:	mov	r5, r2
   178ac:	mov	r6, r3
   178b0:	mov	r0, sp
   178b4:	bl	16070 <__assert_fail@plt+0x4ec4>
   178b8:	mov	r3, sp
   178bc:	mov	r2, r6
   178c0:	mov	r1, r5
   178c4:	mov	r0, r4
   178c8:	bl	17348 <__assert_fail@plt+0x619c>
   178cc:	add	sp, sp, #48	; 0x30
   178d0:	pop	{r4, r5, r6, pc}
   178d4:	push	{r4, lr}
   178d8:	mov	r2, r1
   178dc:	mov	r1, r0
   178e0:	mov	r0, #0
   178e4:	bl	17868 <__assert_fail@plt+0x66bc>
   178e8:	pop	{r4, pc}
   178ec:	push	{r4, lr}
   178f0:	mov	r3, r2
   178f4:	mov	r2, r1
   178f8:	mov	r1, r0
   178fc:	mov	r0, #0
   17900:	bl	1789c <__assert_fail@plt+0x66f0>
   17904:	pop	{r4, pc}
   17908:	push	{r4, r5, r6, lr}
   1790c:	sub	sp, sp, #48	; 0x30
   17910:	mov	r4, r0
   17914:	mov	r5, r1
   17918:	mov	r6, r2
   1791c:	mov	ip, sp
   17920:	ldr	lr, [pc, #64]	; 17968 <__assert_fail@plt+0x67bc>
   17924:	ldm	lr!, {r0, r1, r2, r3}
   17928:	stmia	ip!, {r0, r1, r2, r3}
   1792c:	ldm	lr!, {r0, r1, r2, r3}
   17930:	stmia	ip!, {r0, r1, r2, r3}
   17934:	ldm	lr, {r0, r1, r2, r3}
   17938:	stm	ip, {r0, r1, r2, r3}
   1793c:	mov	r2, #1
   17940:	mov	r1, r6
   17944:	mov	r0, sp
   17948:	bl	17574 <__assert_fail@plt+0x63c8>
   1794c:	mov	r3, sp
   17950:	mov	r2, r5
   17954:	mov	r1, r4
   17958:	mov	r0, #0
   1795c:	bl	17348 <__assert_fail@plt+0x619c>
   17960:	add	sp, sp, #48	; 0x30
   17964:	pop	{r4, r5, r6, pc}
   17968:			; <UNDEFINED> instruction: 0x0002b2b8
   1796c:	push	{r4, lr}
   17970:	mov	r2, r1
   17974:	mvn	r1, #0
   17978:	bl	17908 <__assert_fail@plt+0x675c>
   1797c:	pop	{r4, pc}
   17980:	push	{r4, lr}
   17984:	mov	r1, #58	; 0x3a
   17988:	bl	1796c <__assert_fail@plt+0x67c0>
   1798c:	pop	{r4, pc}
   17990:	push	{r4, lr}
   17994:	mov	r2, #58	; 0x3a
   17998:	bl	17908 <__assert_fail@plt+0x675c>
   1799c:	pop	{r4, pc}
   179a0:	push	{r4, r5, lr}
   179a4:	sub	sp, sp, #100	; 0x64
   179a8:	mov	r4, r0
   179ac:	mov	r5, r2
   179b0:	mov	r0, sp
   179b4:	bl	16070 <__assert_fail@plt+0x4ec4>
   179b8:	add	lr, sp, #48	; 0x30
   179bc:	mov	ip, sp
   179c0:	ldm	ip!, {r0, r1, r2, r3}
   179c4:	stmia	lr!, {r0, r1, r2, r3}
   179c8:	ldm	ip!, {r0, r1, r2, r3}
   179cc:	stmia	lr!, {r0, r1, r2, r3}
   179d0:	ldm	ip, {r0, r1, r2, r3}
   179d4:	stm	lr, {r0, r1, r2, r3}
   179d8:	mov	r2, #1
   179dc:	mov	r1, #58	; 0x3a
   179e0:	add	r0, sp, #48	; 0x30
   179e4:	bl	17574 <__assert_fail@plt+0x63c8>
   179e8:	add	r3, sp, #48	; 0x30
   179ec:	mvn	r2, #0
   179f0:	mov	r1, r5
   179f4:	mov	r0, r4
   179f8:	bl	17348 <__assert_fail@plt+0x619c>
   179fc:	add	sp, sp, #100	; 0x64
   17a00:	pop	{r4, r5, pc}
   17a04:	push	{r4, r5, r6, r7, lr}
   17a08:	sub	sp, sp, #52	; 0x34
   17a0c:	mov	r4, r0
   17a10:	mov	r6, r1
   17a14:	mov	r7, r2
   17a18:	mov	r5, r3
   17a1c:	mov	ip, sp
   17a20:	ldr	lr, [pc, #64]	; 17a68 <__assert_fail@plt+0x68bc>
   17a24:	ldm	lr!, {r0, r1, r2, r3}
   17a28:	stmia	ip!, {r0, r1, r2, r3}
   17a2c:	ldm	lr!, {r0, r1, r2, r3}
   17a30:	stmia	ip!, {r0, r1, r2, r3}
   17a34:	ldm	lr, {r0, r1, r2, r3}
   17a38:	stm	ip, {r0, r1, r2, r3}
   17a3c:	mov	r2, r7
   17a40:	mov	r1, r6
   17a44:	mov	r0, sp
   17a48:	bl	175d0 <__assert_fail@plt+0x6424>
   17a4c:	mov	r3, sp
   17a50:	ldr	r2, [sp, #72]	; 0x48
   17a54:	mov	r1, r5
   17a58:	mov	r0, r4
   17a5c:	bl	17348 <__assert_fail@plt+0x619c>
   17a60:	add	sp, sp, #52	; 0x34
   17a64:	pop	{r4, r5, r6, r7, pc}
   17a68:			; <UNDEFINED> instruction: 0x0002b2b8
   17a6c:	push	{lr}		; (str lr, [sp, #-4]!)
   17a70:	sub	sp, sp, #12
   17a74:	mvn	ip, #0
   17a78:	str	ip, [sp]
   17a7c:	bl	17a04 <__assert_fail@plt+0x6858>
   17a80:	add	sp, sp, #12
   17a84:	pop	{pc}		; (ldr pc, [sp], #4)
   17a88:	push	{r4, lr}
   17a8c:	mov	r3, r2
   17a90:	mov	r2, r1
   17a94:	mov	r1, r0
   17a98:	mov	r0, #0
   17a9c:	bl	17a6c <__assert_fail@plt+0x68c0>
   17aa0:	pop	{r4, pc}
   17aa4:	push	{lr}		; (str lr, [sp, #-4]!)
   17aa8:	sub	sp, sp, #12
   17aac:	str	r3, [sp]
   17ab0:	mov	r3, r2
   17ab4:	mov	r2, r1
   17ab8:	mov	r1, r0
   17abc:	mov	r0, #0
   17ac0:	bl	17a04 <__assert_fail@plt+0x6858>
   17ac4:	add	sp, sp, #12
   17ac8:	pop	{pc}		; (ldr pc, [sp], #4)
   17acc:	push	{r4, lr}
   17ad0:	ldr	r3, [pc, #4]	; 17adc <__assert_fail@plt+0x6930>
   17ad4:	bl	17348 <__assert_fail@plt+0x619c>
   17ad8:	pop	{r4, pc}
   17adc:	andeq	fp, r2, r4, lsr r1
   17ae0:	push	{r4, lr}
   17ae4:	mov	r2, r1
   17ae8:	mov	r1, r0
   17aec:	mov	r0, #0
   17af0:	bl	17acc <__assert_fail@plt+0x6920>
   17af4:	pop	{r4, pc}
   17af8:	push	{r4, lr}
   17afc:	mvn	r2, #0
   17b00:	bl	17acc <__assert_fail@plt+0x6920>
   17b04:	pop	{r4, pc}
   17b08:	push	{r4, lr}
   17b0c:	mov	r1, r0
   17b10:	mov	r0, #0
   17b14:	bl	17af8 <__assert_fail@plt+0x694c>
   17b18:	pop	{r4, pc}
   17b1c:	push	{r4, lr}
   17b20:	sub	sp, sp, #104	; 0x68
   17b24:	mov	r4, r0
   17b28:	mov	r2, sp
   17b2c:	ldr	r1, [pc, #48]	; 17b64 <__assert_fail@plt+0x69b8>
   17b30:	mov	r0, #3
   17b34:	bl	11194 <__lxstat64@plt>
   17b38:	cmp	r0, #0
   17b3c:	bne	17b5c <__assert_fail@plt+0x69b0>
   17b40:	ldrd	r2, [sp, #96]	; 0x60
   17b44:	strd	r2, [r4]
   17b48:	ldrd	r2, [sp]
   17b4c:	strd	r2, [r4, #8]
   17b50:	mov	r0, r4
   17b54:	add	sp, sp, #104	; 0x68
   17b58:	pop	{r4, pc}
   17b5c:	mov	r0, #0
   17b60:	b	17b54 <__assert_fail@plt+0x69a8>
   17b64:	andeq	r9, r1, r4, lsr #26
   17b68:	push	{r4, r5, r6, r7, r8, lr}
   17b6c:	mov	r4, r0
   17b70:	cmp	r0, #2
   17b74:	bls	17b80 <__assert_fail@plt+0x69d4>
   17b78:	mov	r0, r4
   17b7c:	pop	{r4, r5, r6, r7, r8, pc}
   17b80:	bl	18f38 <__assert_fail@plt+0x7d8c>
   17b84:	mov	r6, r0
   17b88:	bl	11068 <__errno_location@plt>
   17b8c:	mov	r5, r0
   17b90:	ldr	r7, [r0]
   17b94:	mov	r0, r4
   17b98:	bl	11188 <close@plt>
   17b9c:	str	r7, [r5]
   17ba0:	mov	r4, r6
   17ba4:	b	17b78 <__assert_fail@plt+0x69cc>
   17ba8:	push	{r4, r5, r6, lr}
   17bac:	sub	sp, sp, #32
   17bb0:	mov	r4, r0
   17bb4:	ldr	r5, [sp, #48]	; 0x30
   17bb8:	ldr	r6, [sp, #52]	; 0x34
   17bbc:	cmp	r1, #0
   17bc0:	beq	17c78 <__assert_fail@plt+0x6acc>
   17bc4:	str	r3, [sp, #4]
   17bc8:	str	r2, [sp]
   17bcc:	mov	r3, r1
   17bd0:	ldr	r2, [pc, #940]	; 17f84 <__assert_fail@plt+0x6dd8>
   17bd4:	mov	r1, #1
   17bd8:	bl	110b0 <__fprintf_chk@plt>
   17bdc:	mov	r2, #5
   17be0:	ldr	r1, [pc, #928]	; 17f88 <__assert_fail@plt+0x6ddc>
   17be4:	mov	r0, #0
   17be8:	bl	10f54 <dcgettext@plt>
   17bec:	ldr	r3, [pc, #920]	; 17f8c <__assert_fail@plt+0x6de0>
   17bf0:	str	r3, [sp]
   17bf4:	mov	r3, r0
   17bf8:	ldr	r2, [pc, #912]	; 17f90 <__assert_fail@plt+0x6de4>
   17bfc:	mov	r1, #1
   17c00:	mov	r0, r4
   17c04:	bl	110b0 <__fprintf_chk@plt>
   17c08:	mov	r1, r4
   17c0c:	mov	r0, #10
   17c10:	bl	10f48 <fputc_unlocked@plt>
   17c14:	mov	r2, #5
   17c18:	ldr	r1, [pc, #884]	; 17f94 <__assert_fail@plt+0x6de8>
   17c1c:	mov	r0, #0
   17c20:	bl	10f54 <dcgettext@plt>
   17c24:	ldr	r3, [pc, #876]	; 17f98 <__assert_fail@plt+0x6dec>
   17c28:	mov	r2, r0
   17c2c:	mov	r1, #1
   17c30:	mov	r0, r4
   17c34:	bl	110b0 <__fprintf_chk@plt>
   17c38:	mov	r1, r4
   17c3c:	mov	r0, #10
   17c40:	bl	10f48 <fputc_unlocked@plt>
   17c44:	cmp	r6, #9
   17c48:	ldrls	pc, [pc, r6, lsl #2]
   17c4c:	b	17f1c <__assert_fail@plt+0x6d70>
   17c50:			; <UNDEFINED> instruction: 0x00017cb4
   17c54:	muleq	r1, r0, ip
   17c58:			; <UNDEFINED> instruction: 0x00017cbc
   17c5c:	andeq	r7, r1, ip, ror #25
   17c60:	andeq	r7, r1, r4, lsr #26
   17c64:	andeq	r7, r1, r4, ror #26
   17c68:	andeq	r7, r1, ip, lsr #27
   17c6c:	strdeq	r7, [r1], -ip
   17c70:	andeq	r7, r1, r4, asr lr
   17c74:			; <UNDEFINED> instruction: 0x00017eb4
   17c78:	str	r3, [sp]
   17c7c:	mov	r3, r2
   17c80:	ldr	r2, [pc, #788]	; 17f9c <__assert_fail@plt+0x6df0>
   17c84:	mov	r1, #1
   17c88:	bl	110b0 <__fprintf_chk@plt>
   17c8c:	b	17bdc <__assert_fail@plt+0x6a30>
   17c90:	mov	r2, #5
   17c94:	ldr	r1, [pc, #772]	; 17fa0 <__assert_fail@plt+0x6df4>
   17c98:	mov	r0, #0
   17c9c:	bl	10f54 <dcgettext@plt>
   17ca0:	ldr	r3, [r5]
   17ca4:	mov	r2, r0
   17ca8:	mov	r1, #1
   17cac:	mov	r0, r4
   17cb0:	bl	110b0 <__fprintf_chk@plt>
   17cb4:	add	sp, sp, #32
   17cb8:	pop	{r4, r5, r6, pc}
   17cbc:	mov	r2, #5
   17cc0:	ldr	r1, [pc, #732]	; 17fa4 <__assert_fail@plt+0x6df8>
   17cc4:	mov	r0, #0
   17cc8:	bl	10f54 <dcgettext@plt>
   17ccc:	ldr	r3, [r5]
   17cd0:	ldr	r2, [r5, #4]
   17cd4:	str	r2, [sp]
   17cd8:	mov	r2, r0
   17cdc:	mov	r1, #1
   17ce0:	mov	r0, r4
   17ce4:	bl	110b0 <__fprintf_chk@plt>
   17ce8:	b	17cb4 <__assert_fail@plt+0x6b08>
   17cec:	mov	r2, #5
   17cf0:	ldr	r1, [pc, #688]	; 17fa8 <__assert_fail@plt+0x6dfc>
   17cf4:	mov	r0, #0
   17cf8:	bl	10f54 <dcgettext@plt>
   17cfc:	ldr	r3, [r5]
   17d00:	ldr	r2, [r5, #8]
   17d04:	str	r2, [sp, #4]
   17d08:	ldr	r2, [r5, #4]
   17d0c:	str	r2, [sp]
   17d10:	mov	r2, r0
   17d14:	mov	r1, #1
   17d18:	mov	r0, r4
   17d1c:	bl	110b0 <__fprintf_chk@plt>
   17d20:	b	17cb4 <__assert_fail@plt+0x6b08>
   17d24:	mov	r2, #5
   17d28:	ldr	r1, [pc, #636]	; 17fac <__assert_fail@plt+0x6e00>
   17d2c:	mov	r0, #0
   17d30:	bl	10f54 <dcgettext@plt>
   17d34:	ldr	r3, [r5]
   17d38:	ldr	r2, [r5, #12]
   17d3c:	str	r2, [sp, #8]
   17d40:	ldr	r2, [r5, #8]
   17d44:	str	r2, [sp, #4]
   17d48:	ldr	r2, [r5, #4]
   17d4c:	str	r2, [sp]
   17d50:	mov	r2, r0
   17d54:	mov	r1, #1
   17d58:	mov	r0, r4
   17d5c:	bl	110b0 <__fprintf_chk@plt>
   17d60:	b	17cb4 <__assert_fail@plt+0x6b08>
   17d64:	mov	r2, #5
   17d68:	ldr	r1, [pc, #576]	; 17fb0 <__assert_fail@plt+0x6e04>
   17d6c:	mov	r0, #0
   17d70:	bl	10f54 <dcgettext@plt>
   17d74:	ldr	r3, [r5]
   17d78:	ldr	r2, [r5, #16]
   17d7c:	str	r2, [sp, #12]
   17d80:	ldr	r2, [r5, #12]
   17d84:	str	r2, [sp, #8]
   17d88:	ldr	r2, [r5, #8]
   17d8c:	str	r2, [sp, #4]
   17d90:	ldr	r2, [r5, #4]
   17d94:	str	r2, [sp]
   17d98:	mov	r2, r0
   17d9c:	mov	r1, #1
   17da0:	mov	r0, r4
   17da4:	bl	110b0 <__fprintf_chk@plt>
   17da8:	b	17cb4 <__assert_fail@plt+0x6b08>
   17dac:	mov	r2, #5
   17db0:	ldr	r1, [pc, #508]	; 17fb4 <__assert_fail@plt+0x6e08>
   17db4:	mov	r0, #0
   17db8:	bl	10f54 <dcgettext@plt>
   17dbc:	ldr	r3, [r5]
   17dc0:	ldr	r2, [r5, #20]
   17dc4:	str	r2, [sp, #16]
   17dc8:	ldr	r2, [r5, #16]
   17dcc:	str	r2, [sp, #12]
   17dd0:	ldr	r2, [r5, #12]
   17dd4:	str	r2, [sp, #8]
   17dd8:	ldr	r2, [r5, #8]
   17ddc:	str	r2, [sp, #4]
   17de0:	ldr	r2, [r5, #4]
   17de4:	str	r2, [sp]
   17de8:	mov	r2, r0
   17dec:	mov	r1, #1
   17df0:	mov	r0, r4
   17df4:	bl	110b0 <__fprintf_chk@plt>
   17df8:	b	17cb4 <__assert_fail@plt+0x6b08>
   17dfc:	mov	r2, #5
   17e00:	ldr	r1, [pc, #432]	; 17fb8 <__assert_fail@plt+0x6e0c>
   17e04:	mov	r0, #0
   17e08:	bl	10f54 <dcgettext@plt>
   17e0c:	ldr	r3, [r5]
   17e10:	ldr	r2, [r5, #24]
   17e14:	str	r2, [sp, #20]
   17e18:	ldr	r2, [r5, #20]
   17e1c:	str	r2, [sp, #16]
   17e20:	ldr	r2, [r5, #16]
   17e24:	str	r2, [sp, #12]
   17e28:	ldr	r2, [r5, #12]
   17e2c:	str	r2, [sp, #8]
   17e30:	ldr	r2, [r5, #8]
   17e34:	str	r2, [sp, #4]
   17e38:	ldr	r2, [r5, #4]
   17e3c:	str	r2, [sp]
   17e40:	mov	r2, r0
   17e44:	mov	r1, #1
   17e48:	mov	r0, r4
   17e4c:	bl	110b0 <__fprintf_chk@plt>
   17e50:	b	17cb4 <__assert_fail@plt+0x6b08>
   17e54:	mov	r2, #5
   17e58:	ldr	r1, [pc, #348]	; 17fbc <__assert_fail@plt+0x6e10>
   17e5c:	mov	r0, #0
   17e60:	bl	10f54 <dcgettext@plt>
   17e64:	ldr	r3, [r5]
   17e68:	ldr	r2, [r5, #28]
   17e6c:	str	r2, [sp, #24]
   17e70:	ldr	r2, [r5, #24]
   17e74:	str	r2, [sp, #20]
   17e78:	ldr	r2, [r5, #20]
   17e7c:	str	r2, [sp, #16]
   17e80:	ldr	r2, [r5, #16]
   17e84:	str	r2, [sp, #12]
   17e88:	ldr	r2, [r5, #12]
   17e8c:	str	r2, [sp, #8]
   17e90:	ldr	r2, [r5, #8]
   17e94:	str	r2, [sp, #4]
   17e98:	ldr	r2, [r5, #4]
   17e9c:	str	r2, [sp]
   17ea0:	mov	r2, r0
   17ea4:	mov	r1, #1
   17ea8:	mov	r0, r4
   17eac:	bl	110b0 <__fprintf_chk@plt>
   17eb0:	b	17cb4 <__assert_fail@plt+0x6b08>
   17eb4:	mov	r2, #5
   17eb8:	ldr	r1, [pc, #256]	; 17fc0 <__assert_fail@plt+0x6e14>
   17ebc:	mov	r0, #0
   17ec0:	bl	10f54 <dcgettext@plt>
   17ec4:	ldr	r3, [r5]
   17ec8:	ldr	r2, [r5, #32]
   17ecc:	str	r2, [sp, #28]
   17ed0:	ldr	r2, [r5, #28]
   17ed4:	str	r2, [sp, #24]
   17ed8:	ldr	r2, [r5, #24]
   17edc:	str	r2, [sp, #20]
   17ee0:	ldr	r2, [r5, #20]
   17ee4:	str	r2, [sp, #16]
   17ee8:	ldr	r2, [r5, #16]
   17eec:	str	r2, [sp, #12]
   17ef0:	ldr	r2, [r5, #12]
   17ef4:	str	r2, [sp, #8]
   17ef8:	ldr	r2, [r5, #8]
   17efc:	str	r2, [sp, #4]
   17f00:	ldr	r2, [r5, #4]
   17f04:	str	r2, [sp]
   17f08:	mov	r2, r0
   17f0c:	mov	r1, #1
   17f10:	mov	r0, r4
   17f14:	bl	110b0 <__fprintf_chk@plt>
   17f18:	b	17cb4 <__assert_fail@plt+0x6b08>
   17f1c:	mov	r2, #5
   17f20:	ldr	r1, [pc, #156]	; 17fc4 <__assert_fail@plt+0x6e18>
   17f24:	mov	r0, #0
   17f28:	bl	10f54 <dcgettext@plt>
   17f2c:	ldr	r3, [r5]
   17f30:	ldr	r2, [r5, #32]
   17f34:	str	r2, [sp, #28]
   17f38:	ldr	r2, [r5, #28]
   17f3c:	str	r2, [sp, #24]
   17f40:	ldr	r2, [r5, #24]
   17f44:	str	r2, [sp, #20]
   17f48:	ldr	r2, [r5, #20]
   17f4c:	str	r2, [sp, #16]
   17f50:	ldr	r2, [r5, #16]
   17f54:	str	r2, [sp, #12]
   17f58:	ldr	r2, [r5, #12]
   17f5c:	str	r2, [sp, #8]
   17f60:	ldr	r2, [r5, #8]
   17f64:	str	r2, [sp, #4]
   17f68:	ldr	r2, [r5, #4]
   17f6c:	str	r2, [sp]
   17f70:	mov	r2, r0
   17f74:	mov	r1, #1
   17f78:	mov	r0, r4
   17f7c:	bl	110b0 <__fprintf_chk@plt>
   17f80:	b	17cb4 <__assert_fail@plt+0x6b08>
   17f84:	strdeq	sl, [r1], -r8
   17f88:	andeq	sl, r1, ip, lsl #6
   17f8c:	andeq	r0, r0, r6, ror #15
   17f90:	andeq	sl, r1, r4, ror #11
   17f94:	andeq	sl, r1, r0, lsl r3
   17f98:			; <UNDEFINED> instruction: 0x0001a3bc
   17f9c:	andeq	sl, r1, r4, lsl #6
   17fa0:	andeq	sl, r1, r0, ror #7
   17fa4:	strdeq	sl, [r1], -r0
   17fa8:	andeq	sl, r1, r8, lsl #8
   17fac:	andeq	sl, r1, r4, lsr #8
   17fb0:	andeq	sl, r1, r4, asr #8
   17fb4:	andeq	sl, r1, r8, ror #8
   17fb8:	muleq	r1, r0, r4
   17fbc:			; <UNDEFINED> instruction: 0x0001a4bc
   17fc0:	andeq	sl, r1, ip, ror #9
   17fc4:	andeq	sl, r1, r0, lsr #10
   17fc8:	push	{r4, r5, lr}
   17fcc:	sub	sp, sp, #12
   17fd0:	ldr	r5, [sp, #24]
   17fd4:	ldr	ip, [r5]
   17fd8:	cmp	ip, #0
   17fdc:	beq	1800c <__assert_fail@plt+0x6e60>
   17fe0:	mov	lr, r5
   17fe4:	mov	ip, #0
   17fe8:	add	ip, ip, #1
   17fec:	ldr	r4, [lr, #4]!
   17ff0:	cmp	r4, #0
   17ff4:	bne	17fe8 <__assert_fail@plt+0x6e3c>
   17ff8:	str	ip, [sp, #4]
   17ffc:	str	r5, [sp]
   18000:	bl	17ba8 <__assert_fail@plt+0x69fc>
   18004:	add	sp, sp, #12
   18008:	pop	{r4, r5, pc}
   1800c:	mov	ip, #0
   18010:	b	17ff8 <__assert_fail@plt+0x6e4c>
   18014:	push	{r4, r5, lr}
   18018:	sub	sp, sp, #52	; 0x34
   1801c:	ldr	r4, [sp, #64]	; 0x40
   18020:	sub	r4, r4, #4
   18024:	add	r5, sp, #4
   18028:	mov	ip, #0
   1802c:	ldr	lr, [r4, #4]!
   18030:	str	lr, [r5, #4]!
   18034:	cmp	lr, #0
   18038:	beq	18048 <__assert_fail@plt+0x6e9c>
   1803c:	add	ip, ip, #1
   18040:	cmp	ip, #10
   18044:	bne	1802c <__assert_fail@plt+0x6e80>
   18048:	str	ip, [sp, #4]
   1804c:	add	ip, sp, #8
   18050:	str	ip, [sp]
   18054:	bl	17ba8 <__assert_fail@plt+0x69fc>
   18058:	add	sp, sp, #52	; 0x34
   1805c:	pop	{r4, r5, pc}
   18060:	push	{r3}		; (str r3, [sp, #-4]!)
   18064:	push	{lr}		; (str lr, [sp, #-4]!)
   18068:	sub	sp, sp, #16
   1806c:	add	r3, sp, #24
   18070:	str	r3, [sp, #12]
   18074:	str	r3, [sp]
   18078:	ldr	r3, [sp, #20]
   1807c:	bl	18014 <__assert_fail@plt+0x6e68>
   18080:	add	sp, sp, #16
   18084:	pop	{lr}		; (ldr lr, [sp], #4)
   18088:	add	sp, sp, #4
   1808c:	bx	lr
   18090:	push	{r4, lr}
   18094:	ldr	r3, [pc, #112]	; 1810c <__assert_fail@plt+0x6f60>
   18098:	ldr	r1, [r3]
   1809c:	mov	r0, #10
   180a0:	bl	10f48 <fputc_unlocked@plt>
   180a4:	mov	r2, #5
   180a8:	ldr	r1, [pc, #96]	; 18110 <__assert_fail@plt+0x6f64>
   180ac:	mov	r0, #0
   180b0:	bl	10f54 <dcgettext@plt>
   180b4:	ldr	r2, [pc, #88]	; 18114 <__assert_fail@plt+0x6f68>
   180b8:	mov	r1, r0
   180bc:	mov	r0, #1
   180c0:	bl	11098 <__printf_chk@plt>
   180c4:	mov	r2, #5
   180c8:	ldr	r1, [pc, #72]	; 18118 <__assert_fail@plt+0x6f6c>
   180cc:	mov	r0, #0
   180d0:	bl	10f54 <dcgettext@plt>
   180d4:	ldr	r3, [pc, #64]	; 1811c <__assert_fail@plt+0x6f70>
   180d8:	ldr	r2, [pc, #64]	; 18120 <__assert_fail@plt+0x6f74>
   180dc:	mov	r1, r0
   180e0:	mov	r0, #1
   180e4:	bl	11098 <__printf_chk@plt>
   180e8:	mov	r2, #5
   180ec:	ldr	r1, [pc, #48]	; 18124 <__assert_fail@plt+0x6f78>
   180f0:	mov	r0, #0
   180f4:	bl	10f54 <dcgettext@plt>
   180f8:	ldr	r2, [pc, #40]	; 18128 <__assert_fail@plt+0x6f7c>
   180fc:	mov	r1, r0
   18100:	mov	r0, #1
   18104:	bl	11098 <__printf_chk@plt>
   18108:	pop	{r4, pc}
   1810c:	andeq	fp, r2, ip, ror r1
   18110:	andeq	sl, r1, ip, asr r5
   18114:	andeq	sl, r1, r0, ror r5
   18118:	andeq	sl, r1, r8, lsl #11
   1811c:	andeq	r9, r1, r8, asr #22
   18120:	andeq	r9, r1, r0, ror fp
   18124:	muleq	r1, ip, r5
   18128:	andeq	sl, r1, r4, asr #11
   1812c:	push	{r4, lr}
   18130:	bl	187e0 <__assert_fail@plt+0x7634>
   18134:	cmp	r0, #0
   18138:	popne	{r4, pc}
   1813c:	bl	186d0 <__assert_fail@plt+0x7524>
   18140:	push	{r4, lr}
   18144:	bl	187e0 <__assert_fail@plt+0x7634>
   18148:	cmp	r0, #0
   1814c:	popne	{r4, pc}
   18150:	bl	186d0 <__assert_fail@plt+0x7524>
   18154:	push	{r4, lr}
   18158:	bl	1812c <__assert_fail@plt+0x6f80>
   1815c:	pop	{r4, pc}
   18160:	push	{r4, r5, r6, lr}
   18164:	mov	r5, r0
   18168:	mov	r4, r1
   1816c:	bl	18810 <__assert_fail@plt+0x7664>
   18170:	cmp	r0, #0
   18174:	popne	{r4, r5, r6, pc}
   18178:	adds	r4, r4, #0
   1817c:	movne	r4, #1
   18180:	cmp	r5, #0
   18184:	orreq	r4, r4, #1
   18188:	cmp	r4, #0
   1818c:	popeq	{r4, r5, r6, pc}
   18190:	bl	186d0 <__assert_fail@plt+0x7524>
   18194:	push	{r4, lr}
   18198:	cmp	r1, #0
   1819c:	orreq	r1, r1, #1
   181a0:	bl	18810 <__assert_fail@plt+0x7664>
   181a4:	cmp	r0, #0
   181a8:	popne	{r4, pc}
   181ac:	bl	186d0 <__assert_fail@plt+0x7524>
   181b0:	push	{r4, r5, r6, lr}
   181b4:	mov	r6, r0
   181b8:	mov	r5, r1
   181bc:	mov	r4, r2
   181c0:	bl	18eec <__assert_fail@plt+0x7d40>
   181c4:	cmp	r0, #0
   181c8:	popne	{r4, r5, r6, pc}
   181cc:	cmp	r6, #0
   181d0:	beq	181e0 <__assert_fail@plt+0x7034>
   181d4:	cmp	r5, #0
   181d8:	cmpne	r4, #0
   181dc:	popeq	{r4, r5, r6, pc}
   181e0:	bl	186d0 <__assert_fail@plt+0x7524>
   181e4:	push	{r4, lr}
   181e8:	bl	181b0 <__assert_fail@plt+0x7004>
   181ec:	pop	{r4, pc}
   181f0:	push	{r4, lr}
   181f4:	mov	ip, r1
   181f8:	mov	r3, r2
   181fc:	cmp	r2, #0
   18200:	cmpne	r1, #0
   18204:	moveq	r3, #1
   18208:	moveq	ip, r3
   1820c:	mov	r2, r3
   18210:	mov	r1, ip
   18214:	bl	18eec <__assert_fail@plt+0x7d40>
   18218:	cmp	r0, #0
   1821c:	popne	{r4, pc}
   18220:	bl	186d0 <__assert_fail@plt+0x7524>
   18224:	push	{r4, lr}
   18228:	mov	r2, r1
   1822c:	mov	r1, r0
   18230:	mov	r0, #0
   18234:	bl	181b0 <__assert_fail@plt+0x7004>
   18238:	pop	{r4, pc}
   1823c:	push	{r4, lr}
   18240:	mov	r2, r1
   18244:	mov	r1, r0
   18248:	mov	r0, #0
   1824c:	bl	181f0 <__assert_fail@plt+0x7044>
   18250:	pop	{r4, pc}
   18254:	push	{r4, r5, r6, r7, r8, lr}
   18258:	mov	r5, r1
   1825c:	mov	r6, r2
   18260:	ldr	r4, [r1]
   18264:	subs	r7, r0, #0
   18268:	beq	18284 <__assert_fail@plt+0x70d8>
   1826c:	lsr	r2, r4, #1
   18270:	add	r3, r2, #1
   18274:	mvn	r3, r3
   18278:	cmp	r4, r3
   1827c:	bls	182a8 <__assert_fail@plt+0x70fc>
   18280:	bl	186d0 <__assert_fail@plt+0x7524>
   18284:	cmp	r4, #0
   18288:	bne	182b0 <__assert_fail@plt+0x7104>
   1828c:	mov	r1, r2
   18290:	mov	r0, #64	; 0x40
   18294:	bl	19054 <__assert_fail@plt+0x7ea8>
   18298:	cmp	r0, #0
   1829c:	movne	r4, r0
   182a0:	addeq	r4, r0, #1
   182a4:	b	182b0 <__assert_fail@plt+0x7104>
   182a8:	add	r4, r4, #1
   182ac:	add	r4, r4, r2
   182b0:	mov	r2, r6
   182b4:	mov	r1, r4
   182b8:	mov	r0, r7
   182bc:	bl	181b0 <__assert_fail@plt+0x7004>
   182c0:	str	r4, [r5]
   182c4:	pop	{r4, r5, r6, r7, r8, pc}
   182c8:	push	{r4, lr}
   182cc:	mov	r2, #1
   182d0:	bl	18254 <__assert_fail@plt+0x70a8>
   182d4:	pop	{r4, pc}
   182d8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   182dc:	sub	sp, sp, #12
   182e0:	mov	fp, r0
   182e4:	mov	sl, r1
   182e8:	mov	r9, r2
   182ec:	mov	r7, r3
   182f0:	ldr	r6, [sp, #48]	; 0x30
   182f4:	ldr	r5, [r1]
   182f8:	asrs	r4, r5, #1
   182fc:	bmi	18458 <__assert_fail@plt+0x72ac>
   18300:	cmp	r5, #0
   18304:	blt	1846c <__assert_fail@plt+0x72c0>
   18308:	mvn	r3, #-2147483648	; 0x80000000
   1830c:	sub	r3, r3, r4
   18310:	cmp	r5, r3
   18314:	movle	r3, #0
   18318:	movgt	r3, #1
   1831c:	cmp	r3, #0
   18320:	addeq	r4, r4, r5
   18324:	mvnne	r4, #-2147483648	; 0x80000000
   18328:	mvn	r8, r7
   1832c:	lsr	r8, r8, #31
   18330:	cmp	r7, r4
   18334:	movge	r3, #0
   18338:	andlt	r3, r8, #1
   1833c:	cmp	r3, #0
   18340:	movne	r4, r7
   18344:	cmp	r6, #0
   18348:	blt	18480 <__assert_fail@plt+0x72d4>
   1834c:	cmp	r6, #0
   18350:	beq	1852c <__assert_fail@plt+0x7380>
   18354:	cmp	r4, #0
   18358:	blt	184dc <__assert_fail@plt+0x7330>
   1835c:	mov	r1, r6
   18360:	mvn	r0, #-2147483648	; 0x80000000
   18364:	bl	19260 <__assert_fail@plt+0x80b4>
   18368:	cmp	r0, r4
   1836c:	movge	r0, #0
   18370:	movlt	r0, #1
   18374:	cmp	r0, #0
   18378:	mvnne	r3, #-2147483648	; 0x80000000
   1837c:	strne	r3, [sp, #4]
   18380:	beq	18514 <__assert_fail@plt+0x7368>
   18384:	mov	r1, r6
   18388:	ldr	r0, [sp, #4]
   1838c:	bl	19260 <__assert_fail@plt+0x80b4>
   18390:	mov	r4, r0
   18394:	mov	r1, r6
   18398:	ldr	r0, [sp, #4]
   1839c:	bl	19480 <__assert_fail@plt+0x82d4>
   183a0:	ldr	r3, [sp, #4]
   183a4:	sub	r1, r3, r1
   183a8:	cmp	fp, #0
   183ac:	moveq	r3, #0
   183b0:	streq	r3, [sl]
   183b4:	sub	r3, r4, r5
   183b8:	cmp	r3, r9
   183bc:	bge	18444 <__assert_fail@plt+0x7298>
   183c0:	cmp	r9, #0
   183c4:	blt	18538 <__assert_fail@plt+0x738c>
   183c8:	cmp	r5, #0
   183cc:	blt	1854c <__assert_fail@plt+0x73a0>
   183d0:	mvn	r3, #-2147483648	; 0x80000000
   183d4:	sub	r3, r3, r9
   183d8:	cmp	r5, r3
   183dc:	movle	r3, #0
   183e0:	movgt	r3, #1
   183e4:	cmp	r3, #0
   183e8:	bne	185f4 <__assert_fail@plt+0x7448>
   183ec:	add	r5, r5, r9
   183f0:	mov	r4, r5
   183f4:	cmp	r7, r5
   183f8:	movge	r7, #0
   183fc:	andlt	r7, r8, #1
   18400:	cmp	r7, #0
   18404:	bne	185f4 <__assert_fail@plt+0x7448>
   18408:	cmp	r6, #0
   1840c:	blt	18560 <__assert_fail@plt+0x73b4>
   18410:	cmp	r6, #0
   18414:	beq	18440 <__assert_fail@plt+0x7294>
   18418:	cmp	r5, #0
   1841c:	blt	185bc <__assert_fail@plt+0x7410>
   18420:	mov	r1, r6
   18424:	mvn	r0, #-2147483648	; 0x80000000
   18428:	bl	19260 <__assert_fail@plt+0x80b4>
   1842c:	cmp	r5, r0
   18430:	movle	r0, #0
   18434:	movgt	r0, #1
   18438:	cmp	r0, #0
   1843c:	bne	185f4 <__assert_fail@plt+0x7448>
   18440:	mul	r1, r5, r6
   18444:	mov	r0, fp
   18448:	bl	18160 <__assert_fail@plt+0x6fb4>
   1844c:	str	r4, [sl]
   18450:	add	sp, sp, #12
   18454:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18458:	rsb	r3, r4, #-2147483648	; 0x80000000
   1845c:	cmp	r5, r3
   18460:	movge	r3, #0
   18464:	movlt	r3, #1
   18468:	b	1831c <__assert_fail@plt+0x7170>
   1846c:	rsb	r3, r5, #-2147483648	; 0x80000000
   18470:	cmp	r4, r3
   18474:	movge	r3, #0
   18478:	movlt	r3, #1
   1847c:	b	1831c <__assert_fail@plt+0x7170>
   18480:	cmp	r4, #0
   18484:	blt	184ac <__assert_fail@plt+0x7300>
   18488:	cmn	r6, #1
   1848c:	beq	184c8 <__assert_fail@plt+0x731c>
   18490:	mov	r1, r6
   18494:	mov	r0, #-2147483648	; 0x80000000
   18498:	bl	19260 <__assert_fail@plt+0x80b4>
   1849c:	cmp	r0, r4
   184a0:	movge	r0, #0
   184a4:	movlt	r0, #1
   184a8:	b	18374 <__assert_fail@plt+0x71c8>
   184ac:	mov	r1, r6
   184b0:	mvn	r0, #-2147483648	; 0x80000000
   184b4:	bl	19260 <__assert_fail@plt+0x80b4>
   184b8:	cmp	r0, r4
   184bc:	movle	r0, #0
   184c0:	movgt	r0, #1
   184c4:	b	18374 <__assert_fail@plt+0x71c8>
   184c8:	add	r0, r4, #-2147483648	; 0x80000000
   184cc:	cmp	r0, #0
   184d0:	movle	r0, #0
   184d4:	movgt	r0, #1
   184d8:	b	18374 <__assert_fail@plt+0x71c8>
   184dc:	cmn	r4, #1
   184e0:	beq	18500 <__assert_fail@plt+0x7354>
   184e4:	mov	r1, r4
   184e8:	mov	r0, #-2147483648	; 0x80000000
   184ec:	bl	19260 <__assert_fail@plt+0x80b4>
   184f0:	cmp	r6, r0
   184f4:	movle	r0, #0
   184f8:	movgt	r0, #1
   184fc:	b	18374 <__assert_fail@plt+0x71c8>
   18500:	add	r0, r6, #-2147483648	; 0x80000000
   18504:	cmp	r0, #0
   18508:	movle	r0, #0
   1850c:	movgt	r0, #1
   18510:	b	18374 <__assert_fail@plt+0x71c8>
   18514:	mul	r1, r6, r4
   18518:	cmp	r1, #63	; 0x3f
   1851c:	movle	r3, #64	; 0x40
   18520:	strle	r3, [sp, #4]
   18524:	bgt	183a8 <__assert_fail@plt+0x71fc>
   18528:	b	18384 <__assert_fail@plt+0x71d8>
   1852c:	mov	r3, #64	; 0x40
   18530:	str	r3, [sp, #4]
   18534:	b	18384 <__assert_fail@plt+0x71d8>
   18538:	rsb	r3, r9, #-2147483648	; 0x80000000
   1853c:	cmp	r5, r3
   18540:	movge	r3, #0
   18544:	movlt	r3, #1
   18548:	b	183e4 <__assert_fail@plt+0x7238>
   1854c:	rsb	r3, r5, #-2147483648	; 0x80000000
   18550:	cmp	r9, r3
   18554:	movge	r3, #0
   18558:	movlt	r3, #1
   1855c:	b	183e4 <__assert_fail@plt+0x7238>
   18560:	cmp	r5, #0
   18564:	blt	1858c <__assert_fail@plt+0x73e0>
   18568:	cmn	r6, #1
   1856c:	beq	185a8 <__assert_fail@plt+0x73fc>
   18570:	mov	r1, r6
   18574:	mov	r0, #-2147483648	; 0x80000000
   18578:	bl	19260 <__assert_fail@plt+0x80b4>
   1857c:	cmp	r5, r0
   18580:	movle	r0, #0
   18584:	movgt	r0, #1
   18588:	b	18438 <__assert_fail@plt+0x728c>
   1858c:	mov	r1, r6
   18590:	mvn	r0, #-2147483648	; 0x80000000
   18594:	bl	19260 <__assert_fail@plt+0x80b4>
   18598:	cmp	r5, r0
   1859c:	movge	r0, #0
   185a0:	movlt	r0, #1
   185a4:	b	18438 <__assert_fail@plt+0x728c>
   185a8:	add	r0, r5, #-2147483648	; 0x80000000
   185ac:	cmp	r0, #0
   185b0:	movle	r0, #0
   185b4:	movgt	r0, #1
   185b8:	b	18438 <__assert_fail@plt+0x728c>
   185bc:	cmn	r5, #1
   185c0:	beq	185e0 <__assert_fail@plt+0x7434>
   185c4:	mov	r1, r5
   185c8:	mov	r0, #-2147483648	; 0x80000000
   185cc:	bl	19260 <__assert_fail@plt+0x80b4>
   185d0:	cmp	r6, r0
   185d4:	movle	r0, #0
   185d8:	movgt	r0, #1
   185dc:	b	18438 <__assert_fail@plt+0x728c>
   185e0:	add	r0, r6, #-2147483648	; 0x80000000
   185e4:	cmp	r0, #0
   185e8:	movle	r0, #0
   185ec:	movgt	r0, #1
   185f0:	b	18438 <__assert_fail@plt+0x728c>
   185f4:	bl	186d0 <__assert_fail@plt+0x7524>
   185f8:	push	{r4, lr}
   185fc:	bl	18790 <__assert_fail@plt+0x75e4>
   18600:	cmp	r0, #0
   18604:	popne	{r4, pc}
   18608:	bl	186d0 <__assert_fail@plt+0x7524>
   1860c:	push	{r4, lr}
   18610:	mov	r1, #1
   18614:	bl	185f8 <__assert_fail@plt+0x744c>
   18618:	pop	{r4, pc}
   1861c:	push	{r4, lr}
   18620:	bl	18790 <__assert_fail@plt+0x75e4>
   18624:	cmp	r0, #0
   18628:	popne	{r4, pc}
   1862c:	bl	186d0 <__assert_fail@plt+0x7524>
   18630:	push	{r4, lr}
   18634:	mov	r1, #1
   18638:	bl	1861c <__assert_fail@plt+0x7470>
   1863c:	pop	{r4, pc}
   18640:	push	{r4, r5, r6, lr}
   18644:	mov	r5, r0
   18648:	mov	r4, r1
   1864c:	mov	r0, r1
   18650:	bl	1812c <__assert_fail@plt+0x6f80>
   18654:	mov	r2, r4
   18658:	mov	r1, r5
   1865c:	bl	10f24 <memcpy@plt>
   18660:	pop	{r4, r5, r6, pc}
   18664:	push	{r4, r5, r6, lr}
   18668:	mov	r5, r0
   1866c:	mov	r4, r1
   18670:	mov	r0, r1
   18674:	bl	18140 <__assert_fail@plt+0x6f94>
   18678:	mov	r2, r4
   1867c:	mov	r1, r5
   18680:	bl	10f24 <memcpy@plt>
   18684:	pop	{r4, r5, r6, pc}
   18688:	push	{r4, r5, r6, lr}
   1868c:	mov	r5, r0
   18690:	mov	r4, r1
   18694:	add	r0, r1, #1
   18698:	bl	18140 <__assert_fail@plt+0x6f94>
   1869c:	mov	r2, #0
   186a0:	strb	r2, [r0, r4]
   186a4:	mov	r2, r4
   186a8:	mov	r1, r5
   186ac:	bl	10f24 <memcpy@plt>
   186b0:	pop	{r4, r5, r6, pc}
   186b4:	push	{r4, lr}
   186b8:	mov	r4, r0
   186bc:	bl	11044 <strlen@plt>
   186c0:	add	r1, r0, #1
   186c4:	mov	r0, r4
   186c8:	bl	18640 <__assert_fail@plt+0x7494>
   186cc:	pop	{r4, pc}
   186d0:	push	{r4, lr}
   186d4:	ldr	r3, [pc, #40]	; 18704 <__assert_fail@plt+0x7558>
   186d8:	ldr	r4, [r3]
   186dc:	mov	r2, #5
   186e0:	ldr	r1, [pc, #32]	; 18708 <__assert_fail@plt+0x755c>
   186e4:	mov	r0, #0
   186e8:	bl	10f54 <dcgettext@plt>
   186ec:	mov	r3, r0
   186f0:	ldr	r2, [pc, #20]	; 1870c <__assert_fail@plt+0x7560>
   186f4:	mov	r1, #0
   186f8:	mov	r0, r4
   186fc:	bl	10fd8 <error@plt>
   18700:	bl	1117c <abort@plt>
   18704:	andeq	fp, r2, r0, lsr #2
   18708:	andeq	sl, r1, r4, lsl r6
   1870c:	andeq	sl, r1, r0, asr #2
   18710:	push	{r4, lr}
   18714:	orr	r1, r1, #512	; 0x200
   18718:	bl	13c94 <__assert_fail@plt+0x2ae8>
   1871c:	cmp	r0, #0
   18720:	popne	{r4, pc}
   18724:	bl	11068 <__errno_location@plt>
   18728:	ldr	r3, [r0]
   1872c:	cmp	r3, #22
   18730:	beq	18738 <__assert_fail@plt+0x758c>
   18734:	bl	186d0 <__assert_fail@plt+0x7524>
   18738:	ldr	r3, [pc, #12]	; 1874c <__assert_fail@plt+0x75a0>
   1873c:	mov	r2, #41	; 0x29
   18740:	ldr	r1, [pc, #8]	; 18750 <__assert_fail@plt+0x75a4>
   18744:	ldr	r0, [pc, #8]	; 18754 <__assert_fail@plt+0x75a8>
   18748:	bl	111ac <__assert_fail@plt>
   1874c:	andeq	sl, r1, r8, lsr #12
   18750:	andeq	sl, r1, r4, lsr r6
   18754:	andeq	sl, r1, r0, asr #12
   18758:	ldr	r3, [r0, #48]	; 0x30
   1875c:	and	r3, r3, #17
   18760:	cmp	r3, #16
   18764:	beq	18788 <__assert_fail@plt+0x75dc>
   18768:	cmp	r3, #17
   1876c:	beq	18778 <__assert_fail@plt+0x75cc>
   18770:	mov	r0, #0
   18774:	bx	lr
   18778:	ldr	r0, [r1, #48]	; 0x30
   1877c:	adds	r0, r0, #0
   18780:	movne	r0, #1
   18784:	bx	lr
   18788:	mov	r0, #1
   1878c:	bx	lr
   18790:	push	{r4, lr}
   18794:	mov	r2, r0
   18798:	mov	r3, r1
   1879c:	cmp	r1, #0
   187a0:	cmpne	r0, #0
   187a4:	moveq	r3, #1
   187a8:	moveq	r2, r3
   187ac:	umull	r0, r1, r2, r3
   187b0:	cmp	r0, #0
   187b4:	cmpge	r1, #0
   187b8:	bne	187cc <__assert_fail@plt+0x7620>
   187bc:	mov	r1, r3
   187c0:	mov	r0, r2
   187c4:	bl	10ec4 <calloc@plt>
   187c8:	pop	{r4, pc}
   187cc:	bl	11068 <__errno_location@plt>
   187d0:	mov	r3, #12
   187d4:	str	r3, [r0]
   187d8:	mov	r0, #0
   187dc:	pop	{r4, pc}
   187e0:	push	{r4, lr}
   187e4:	cmp	r0, #0
   187e8:	moveq	r0, #1
   187ec:	cmp	r0, #0
   187f0:	blt	187fc <__assert_fail@plt+0x7650>
   187f4:	bl	10ff0 <malloc@plt>
   187f8:	pop	{r4, pc}
   187fc:	bl	11068 <__errno_location@plt>
   18800:	mov	r3, #12
   18804:	str	r3, [r0]
   18808:	mov	r0, #0
   1880c:	pop	{r4, pc}
   18810:	push	{r4, lr}
   18814:	cmp	r0, #0
   18818:	beq	18834 <__assert_fail@plt+0x7688>
   1881c:	cmp	r1, #0
   18820:	beq	18840 <__assert_fail@plt+0x7694>
   18824:	cmp	r1, #0
   18828:	blt	1884c <__assert_fail@plt+0x76a0>
   1882c:	bl	10f60 <realloc@plt>
   18830:	pop	{r4, pc}
   18834:	mov	r0, r1
   18838:	bl	187e0 <__assert_fail@plt+0x7634>
   1883c:	pop	{r4, pc}
   18840:	bl	18d60 <__assert_fail@plt+0x7bb4>
   18844:	mov	r0, #0
   18848:	pop	{r4, pc}
   1884c:	bl	11068 <__errno_location@plt>
   18850:	mov	r3, #12
   18854:	str	r3, [r0]
   18858:	mov	r0, #0
   1885c:	pop	{r4, pc}
   18860:	push	{r4, r5, r6, lr}
   18864:	mov	r5, r0
   18868:	bl	10fc0 <__fpending@plt>
   1886c:	mov	r6, r0
   18870:	ldr	r4, [r5]
   18874:	and	r4, r4, #32
   18878:	mov	r0, r5
   1887c:	bl	189c0 <__assert_fail@plt+0x7814>
   18880:	cmp	r4, #0
   18884:	bne	188ac <__assert_fail@plt+0x7700>
   18888:	cmp	r0, #0
   1888c:	popeq	{r4, r5, r6, pc}
   18890:	cmp	r6, #0
   18894:	bne	188c8 <__assert_fail@plt+0x771c>
   18898:	bl	11068 <__errno_location@plt>
   1889c:	ldr	r0, [r0]
   188a0:	subs	r0, r0, #9
   188a4:	mvnne	r0, #0
   188a8:	pop	{r4, r5, r6, pc}
   188ac:	cmp	r0, #0
   188b0:	bne	188d0 <__assert_fail@plt+0x7724>
   188b4:	bl	11068 <__errno_location@plt>
   188b8:	mov	r3, #0
   188bc:	str	r3, [r0]
   188c0:	mvn	r0, #0
   188c4:	pop	{r4, r5, r6, pc}
   188c8:	mvn	r0, #0
   188cc:	pop	{r4, r5, r6, pc}
   188d0:	mvn	r0, #0
   188d4:	pop	{r4, r5, r6, pc}
   188d8:	mov	r2, #0
   188dc:	mov	r3, #0
   188e0:	strd	r2, [r0, #16]
   188e4:	ldr	r3, [pc, #4]	; 188f0 <__assert_fail@plt+0x7744>
   188e8:	str	r3, [r0, #24]
   188ec:	bx	lr
   188f0:	addseq	pc, r5, r6, lsl r6	; <UNPREDICTABLE>
   188f4:	push	{r4, r5, r6, r7, r8, lr}
   188f8:	ldr	r2, [r0, #24]
   188fc:	ldr	r3, [pc, #172]	; 189b0 <__assert_fail@plt+0x7804>
   18900:	cmp	r2, r3
   18904:	bne	1894c <__assert_fail@plt+0x77a0>
   18908:	ldrd	r6, [r0, #16]
   1890c:	orrs	r3, r6, r7
   18910:	beq	1898c <__assert_fail@plt+0x77e0>
   18914:	ldrd	r4, [r1, #96]	; 0x60
   18918:	ldrd	r2, [r0]
   1891c:	cmp	r5, r3
   18920:	cmpeq	r4, r2
   18924:	beq	18960 <__assert_fail@plt+0x77b4>
   18928:	adds	r2, r6, #1
   1892c:	adc	r3, r7, #0
   18930:	strd	r2, [r0, #16]
   18934:	and	r6, r6, r2
   18938:	and	r7, r7, r3
   1893c:	orrs	ip, r6, r7
   18940:	beq	1897c <__assert_fail@plt+0x77d0>
   18944:	mov	r0, #0
   18948:	pop	{r4, r5, r6, r7, r8, pc}
   1894c:	ldr	r3, [pc, #96]	; 189b4 <__assert_fail@plt+0x7808>
   18950:	mov	r2, #60	; 0x3c
   18954:	ldr	r1, [pc, #92]	; 189b8 <__assert_fail@plt+0x780c>
   18958:	ldr	r0, [pc, #92]	; 189bc <__assert_fail@plt+0x7810>
   1895c:	bl	111ac <__assert_fail@plt>
   18960:	ldrd	r4, [r1]
   18964:	ldrd	r2, [r0, #8]
   18968:	cmp	r5, r3
   1896c:	cmpeq	r4, r2
   18970:	bne	18928 <__assert_fail@plt+0x777c>
   18974:	mov	r0, #1
   18978:	pop	{r4, r5, r6, r7, r8, pc}
   1897c:	orrs	r3, r2, r3
   18980:	bne	18998 <__assert_fail@plt+0x77ec>
   18984:	mov	r0, #1
   18988:	pop	{r4, r5, r6, r7, r8, pc}
   1898c:	mov	r2, #1
   18990:	mov	r3, #0
   18994:	strd	r2, [r0, #16]
   18998:	ldrd	r2, [r1]
   1899c:	strd	r2, [r0, #8]
   189a0:	ldrd	r2, [r1, #96]	; 0x60
   189a4:	strd	r2, [r0]
   189a8:	mov	r0, #0
   189ac:	pop	{r4, r5, r6, r7, r8, pc}
   189b0:	addseq	pc, r5, r6, lsl r6	; <UNPREDICTABLE>
   189b4:	andeq	sl, r1, r0, asr r6
   189b8:	andeq	sl, r1, ip, asr r6
   189bc:	andeq	sl, r1, r0, ror r6
   189c0:	push	{r4, r5, r6, lr}
   189c4:	sub	sp, sp, #8
   189c8:	mov	r4, r0
   189cc:	bl	110a4 <fileno@plt>
   189d0:	cmp	r0, #0
   189d4:	blt	18a4c <__assert_fail@plt+0x78a0>
   189d8:	mov	r0, r4
   189dc:	bl	11008 <__freading@plt>
   189e0:	cmp	r0, #0
   189e4:	beq	18a18 <__assert_fail@plt+0x786c>
   189e8:	mov	r0, r4
   189ec:	bl	110a4 <fileno@plt>
   189f0:	mov	r3, #1
   189f4:	str	r3, [sp]
   189f8:	mov	r2, #0
   189fc:	mov	r3, #0
   18a00:	bl	10fa8 <lseek64@plt>
   18a04:	mvn	r2, #0
   18a08:	mvn	r3, #0
   18a0c:	cmp	r1, r3
   18a10:	cmpeq	r0, r2
   18a14:	beq	18a58 <__assert_fail@plt+0x78ac>
   18a18:	mov	r0, r4
   18a1c:	bl	18cfc <__assert_fail@plt+0x7b50>
   18a20:	cmp	r0, #0
   18a24:	beq	18a58 <__assert_fail@plt+0x78ac>
   18a28:	bl	11068 <__errno_location@plt>
   18a2c:	mov	r5, r0
   18a30:	ldr	r6, [r0]
   18a34:	mov	r0, r4
   18a38:	bl	110bc <fclose@plt>
   18a3c:	cmp	r6, #0
   18a40:	strne	r6, [r5]
   18a44:	mvnne	r0, #0
   18a48:	b	18a60 <__assert_fail@plt+0x78b4>
   18a4c:	mov	r0, r4
   18a50:	bl	110bc <fclose@plt>
   18a54:	b	18a60 <__assert_fail@plt+0x78b4>
   18a58:	mov	r0, r4
   18a5c:	bl	110bc <fclose@plt>
   18a60:	add	sp, sp, #8
   18a64:	pop	{r4, r5, r6, pc}
   18a68:	push	{r1, r2, r3}
   18a6c:	push	{r4, r5, r6, lr}
   18a70:	sub	sp, sp, #12
   18a74:	mov	r5, r0
   18a78:	ldr	r1, [sp, #28]
   18a7c:	add	r3, sp, #32
   18a80:	str	r3, [sp, #4]
   18a84:	cmp	r1, #0
   18a88:	beq	18ad0 <__assert_fail@plt+0x7924>
   18a8c:	ldr	r3, [pc, #540]	; 18cb0 <__assert_fail@plt+0x7b04>
   18a90:	cmp	r1, r3
   18a94:	beq	18b00 <__assert_fail@plt+0x7954>
   18a98:	cmp	r1, #11
   18a9c:	beq	18ca0 <__assert_fail@plt+0x7af4>
   18aa0:	bgt	18c2c <__assert_fail@plt+0x7a80>
   18aa4:	cmp	r1, #3
   18aa8:	beq	18ca0 <__assert_fail@plt+0x7af4>
   18aac:	ble	18bec <__assert_fail@plt+0x7a40>
   18ab0:	cmp	r1, #8
   18ab4:	beq	18c0c <__assert_fail@plt+0x7a60>
   18ab8:	ble	18c04 <__assert_fail@plt+0x7a58>
   18abc:	cmp	r1, #9
   18ac0:	beq	18ca0 <__assert_fail@plt+0x7af4>
   18ac4:	cmp	r1, #10
   18ac8:	bne	18c64 <__assert_fail@plt+0x7ab8>
   18acc:	b	18c0c <__assert_fail@plt+0x7a60>
   18ad0:	ldr	r3, [sp, #4]
   18ad4:	add	r2, r3, #4
   18ad8:	str	r2, [sp, #4]
   18adc:	ldr	r2, [r3]
   18ae0:	mov	r1, #0
   18ae4:	bl	110d4 <fcntl64@plt>
   18ae8:	mov	r4, r0
   18aec:	mov	r0, r4
   18af0:	add	sp, sp, #12
   18af4:	pop	{r4, r5, r6, lr}
   18af8:	add	sp, sp, #12
   18afc:	bx	lr
   18b00:	ldr	r3, [sp, #4]
   18b04:	add	r2, r3, #4
   18b08:	str	r2, [sp, #4]
   18b0c:	ldr	r6, [r3]
   18b10:	ldr	r3, [pc, #412]	; 18cb4 <__assert_fail@plt+0x7b08>
   18b14:	ldr	r3, [r3]
   18b18:	cmp	r3, #0
   18b1c:	blt	18b7c <__assert_fail@plt+0x79d0>
   18b20:	mov	r2, r6
   18b24:	ldr	r1, [pc, #388]	; 18cb0 <__assert_fail@plt+0x7b04>
   18b28:	bl	110d4 <fcntl64@plt>
   18b2c:	subs	r4, r0, #0
   18b30:	blt	18b44 <__assert_fail@plt+0x7998>
   18b34:	mov	r2, #1
   18b38:	ldr	r3, [pc, #372]	; 18cb4 <__assert_fail@plt+0x7b08>
   18b3c:	str	r2, [r3]
   18b40:	b	18aec <__assert_fail@plt+0x7940>
   18b44:	bl	11068 <__errno_location@plt>
   18b48:	ldr	r3, [r0]
   18b4c:	cmp	r3, #22
   18b50:	bne	18b34 <__assert_fail@plt+0x7988>
   18b54:	mov	r2, r6
   18b58:	mov	r1, #0
   18b5c:	mov	r0, r5
   18b60:	bl	110d4 <fcntl64@plt>
   18b64:	subs	r4, r0, #0
   18b68:	blt	18aec <__assert_fail@plt+0x7940>
   18b6c:	mvn	r2, #0
   18b70:	ldr	r3, [pc, #316]	; 18cb4 <__assert_fail@plt+0x7b08>
   18b74:	str	r2, [r3]
   18b78:	b	18ba0 <__assert_fail@plt+0x79f4>
   18b7c:	mov	r2, r6
   18b80:	mov	r1, #0
   18b84:	bl	110d4 <fcntl64@plt>
   18b88:	subs	r4, r0, #0
   18b8c:	blt	18aec <__assert_fail@plt+0x7940>
   18b90:	ldr	r3, [pc, #284]	; 18cb4 <__assert_fail@plt+0x7b08>
   18b94:	ldr	r3, [r3]
   18b98:	cmn	r3, #1
   18b9c:	bne	18aec <__assert_fail@plt+0x7940>
   18ba0:	mov	r1, #1
   18ba4:	mov	r0, r4
   18ba8:	bl	110d4 <fcntl64@plt>
   18bac:	subs	r2, r0, #0
   18bb0:	blt	18bcc <__assert_fail@plt+0x7a20>
   18bb4:	orr	r2, r2, #1
   18bb8:	mov	r1, #2
   18bbc:	mov	r0, r4
   18bc0:	bl	110d4 <fcntl64@plt>
   18bc4:	cmn	r0, #1
   18bc8:	bne	18aec <__assert_fail@plt+0x7940>
   18bcc:	bl	11068 <__errno_location@plt>
   18bd0:	mov	r5, r0
   18bd4:	ldr	r6, [r0]
   18bd8:	mov	r0, r4
   18bdc:	bl	11188 <close@plt>
   18be0:	str	r6, [r5]
   18be4:	mvn	r4, #0
   18be8:	b	18aec <__assert_fail@plt+0x7940>
   18bec:	cmp	r1, #1
   18bf0:	beq	18ca0 <__assert_fail@plt+0x7af4>
   18bf4:	bgt	18c0c <__assert_fail@plt+0x7a60>
   18bf8:	cmp	r1, #0
   18bfc:	bne	18c64 <__assert_fail@plt+0x7ab8>
   18c00:	b	18c0c <__assert_fail@plt+0x7a60>
   18c04:	cmp	r1, #4
   18c08:	bne	18c64 <__assert_fail@plt+0x7ab8>
   18c0c:	ldr	r3, [sp, #4]
   18c10:	add	r2, r3, #4
   18c14:	str	r2, [sp, #4]
   18c18:	ldr	r2, [r3]
   18c1c:	mov	r0, r5
   18c20:	bl	110d4 <fcntl64@plt>
   18c24:	mov	r4, r0
   18c28:	b	18aec <__assert_fail@plt+0x7940>
   18c2c:	ldr	r3, [pc, #132]	; 18cb8 <__assert_fail@plt+0x7b0c>
   18c30:	cmp	r1, r3
   18c34:	bgt	18c84 <__assert_fail@plt+0x7ad8>
   18c38:	sub	r3, r3, #1
   18c3c:	cmp	r1, r3
   18c40:	bge	18c0c <__assert_fail@plt+0x7a60>
   18c44:	sub	r3, r3, #5
   18c48:	cmp	r1, r3
   18c4c:	beq	18ca0 <__assert_fail@plt+0x7af4>
   18c50:	add	r3, r3, #1
   18c54:	cmp	r1, r3
   18c58:	beq	18c0c <__assert_fail@plt+0x7a60>
   18c5c:	cmp	r1, #1024	; 0x400
   18c60:	beq	18c0c <__assert_fail@plt+0x7a60>
   18c64:	ldr	r3, [sp, #4]
   18c68:	add	r2, r3, #4
   18c6c:	str	r2, [sp, #4]
   18c70:	ldr	r2, [r3]
   18c74:	mov	r0, r5
   18c78:	bl	110d4 <fcntl64@plt>
   18c7c:	mov	r4, r0
   18c80:	b	18aec <__assert_fail@plt+0x7940>
   18c84:	ldr	r3, [pc, #48]	; 18cbc <__assert_fail@plt+0x7b10>
   18c88:	cmp	r1, r3
   18c8c:	beq	18c0c <__assert_fail@plt+0x7a60>
   18c90:	blt	18ca0 <__assert_fail@plt+0x7af4>
   18c94:	add	r3, r3, #1
   18c98:	cmp	r1, r3
   18c9c:	bne	18c64 <__assert_fail@plt+0x7ab8>
   18ca0:	mov	r0, r5
   18ca4:	bl	110d4 <fcntl64@plt>
   18ca8:	mov	r4, r0
   18cac:	b	18aec <__assert_fail@plt+0x7940>
   18cb0:	andeq	r0, r0, r6, lsl #8
   18cb4:	andeq	fp, r2, r8, ror #5
   18cb8:	andeq	r0, r0, r7, lsl #8
   18cbc:	andeq	r0, r0, r9, lsl #8
   18cc0:	push	{r1, r2, r3}
   18cc4:	push	{lr}		; (str lr, [sp, #-4]!)
   18cc8:	sub	sp, sp, #8
   18ccc:	ldr	r1, [sp, #12]
   18cd0:	tst	r1, #64	; 0x40
   18cd4:	addne	r3, sp, #20
   18cd8:	strne	r3, [sp, #4]
   18cdc:	ldrne	r2, [sp, #16]
   18ce0:	moveq	r2, #0
   18ce4:	bl	10fe4 <open64@plt>
   18ce8:	bl	17b68 <__assert_fail@plt+0x69bc>
   18cec:	add	sp, sp, #8
   18cf0:	pop	{lr}		; (ldr lr, [sp], #4)
   18cf4:	add	sp, sp, #12
   18cf8:	bx	lr
   18cfc:	push	{r4, lr}
   18d00:	sub	sp, sp, #8
   18d04:	subs	r4, r0, #0
   18d08:	beq	18d1c <__assert_fail@plt+0x7b70>
   18d0c:	mov	r0, r4
   18d10:	bl	11008 <__freading@plt>
   18d14:	cmp	r0, #0
   18d18:	bne	18d2c <__assert_fail@plt+0x7b80>
   18d1c:	mov	r0, r4
   18d20:	bl	10ef4 <fflush@plt>
   18d24:	add	sp, sp, #8
   18d28:	pop	{r4, pc}
   18d2c:	ldr	r3, [r4]
   18d30:	tst	r3, #256	; 0x100
   18d34:	bne	18d44 <__assert_fail@plt+0x7b98>
   18d38:	mov	r0, r4
   18d3c:	bl	10ef4 <fflush@plt>
   18d40:	b	18d24 <__assert_fail@plt+0x7b78>
   18d44:	mov	r3, #1
   18d48:	str	r3, [sp]
   18d4c:	mov	r2, #0
   18d50:	mov	r3, #0
   18d54:	mov	r0, r4
   18d58:	bl	18db8 <__assert_fail@plt+0x7c0c>
   18d5c:	b	18d38 <__assert_fail@plt+0x7b8c>
   18d60:	push	{r4, r5, lr}
   18d64:	sub	sp, sp, #12
   18d68:	mov	r5, r0
   18d6c:	bl	11068 <__errno_location@plt>
   18d70:	mov	r4, r0
   18d74:	ldr	r3, [r0]
   18d78:	str	r3, [sp]
   18d7c:	str	r3, [sp, #4]
   18d80:	mov	r3, #0
   18d84:	str	r3, [r0]
   18d88:	mov	r0, r5
   18d8c:	bl	10f0c <free@plt>
   18d90:	ldr	r3, [r4]
   18d94:	cmp	r3, #0
   18d98:	moveq	r3, #4
   18d9c:	movne	r3, #0
   18da0:	add	r2, sp, #8
   18da4:	add	r3, r2, r3
   18da8:	ldr	r3, [r3, #-8]
   18dac:	str	r3, [r4]
   18db0:	add	sp, sp, #12
   18db4:	pop	{r4, r5, pc}
   18db8:	push	{r4, r5, r6, r7, lr}
   18dbc:	sub	sp, sp, #12
   18dc0:	mov	r4, r0
   18dc4:	mov	r6, r2
   18dc8:	mov	r7, r3
   18dcc:	ldr	r5, [sp, #32]
   18dd0:	ldr	r2, [r0, #8]
   18dd4:	ldr	r3, [r0, #4]
   18dd8:	cmp	r2, r3
   18ddc:	beq	18dfc <__assert_fail@plt+0x7c50>
   18de0:	str	r5, [sp]
   18de4:	mov	r2, r6
   18de8:	mov	r3, r7
   18dec:	mov	r0, r4
   18df0:	bl	110c8 <fseeko64@plt>
   18df4:	add	sp, sp, #12
   18df8:	pop	{r4, r5, r6, r7, pc}
   18dfc:	ldr	r2, [r0, #20]
   18e00:	ldr	r3, [r0, #16]
   18e04:	cmp	r2, r3
   18e08:	bne	18de0 <__assert_fail@plt+0x7c34>
   18e0c:	ldr	r3, [r0, #36]	; 0x24
   18e10:	cmp	r3, #0
   18e14:	bne	18de0 <__assert_fail@plt+0x7c34>
   18e18:	bl	110a4 <fileno@plt>
   18e1c:	str	r5, [sp]
   18e20:	mov	r2, r6
   18e24:	mov	r3, r7
   18e28:	bl	10fa8 <lseek64@plt>
   18e2c:	mvn	r2, #0
   18e30:	mvn	r3, #0
   18e34:	cmp	r1, r3
   18e38:	cmpeq	r0, r2
   18e3c:	beq	18e58 <__assert_fail@plt+0x7cac>
   18e40:	ldr	r3, [r4]
   18e44:	bic	r3, r3, #16
   18e48:	str	r3, [r4]
   18e4c:	strd	r0, [r4, #80]	; 0x50
   18e50:	mov	r0, #0
   18e54:	b	18df4 <__assert_fail@plt+0x7c48>
   18e58:	mvn	r0, #0
   18e5c:	b	18df4 <__assert_fail@plt+0x7c48>
   18e60:	push	{r4, lr}
   18e64:	mov	r0, #14
   18e68:	bl	110f8 <nl_langinfo@plt>
   18e6c:	cmp	r0, #0
   18e70:	beq	18e88 <__assert_fail@plt+0x7cdc>
   18e74:	ldrb	r2, [r0]
   18e78:	ldr	r3, [pc, #16]	; 18e90 <__assert_fail@plt+0x7ce4>
   18e7c:	cmp	r2, #0
   18e80:	moveq	r0, r3
   18e84:	pop	{r4, pc}
   18e88:	ldr	r0, [pc]	; 18e90 <__assert_fail@plt+0x7ce4>
   18e8c:	pop	{r4, pc}
   18e90:	andeq	sl, r1, r8, lsl #13
   18e94:	push	{r4, r5, r6, r7, lr}
   18e98:	sub	sp, sp, #12
   18e9c:	mov	r7, r1
   18ea0:	mov	r5, r2
   18ea4:	subs	r6, r0, #0
   18ea8:	addeq	r6, sp, #4
   18eac:	mov	r0, r6
   18eb0:	bl	10fcc <mbrtowc@plt>
   18eb4:	mov	r4, r0
   18eb8:	cmp	r5, #0
   18ebc:	cmnne	r0, #3
   18ec0:	bhi	18ed0 <__assert_fail@plt+0x7d24>
   18ec4:	mov	r0, r4
   18ec8:	add	sp, sp, #12
   18ecc:	pop	{r4, r5, r6, r7, pc}
   18ed0:	mov	r0, #0
   18ed4:	bl	18f4c <__assert_fail@plt+0x7da0>
   18ed8:	cmp	r0, #0
   18edc:	ldrbeq	r3, [r7]
   18ee0:	streq	r3, [r6]
   18ee4:	moveq	r4, #1
   18ee8:	b	18ec4 <__assert_fail@plt+0x7d18>
   18eec:	push	{r4, r5, r6, lr}
   18ef0:	mov	r6, r0
   18ef4:	mov	r5, r1
   18ef8:	subs	r4, r2, #0
   18efc:	beq	18f28 <__assert_fail@plt+0x7d7c>
   18f00:	mov	r1, r4
   18f04:	mvn	r0, #0
   18f08:	bl	19054 <__assert_fail@plt+0x7ea8>
   18f0c:	cmp	r0, r5
   18f10:	bcs	18f28 <__assert_fail@plt+0x7d7c>
   18f14:	bl	11068 <__errno_location@plt>
   18f18:	mov	r3, #12
   18f1c:	str	r3, [r0]
   18f20:	mov	r0, #0
   18f24:	pop	{r4, r5, r6, pc}
   18f28:	mul	r1, r5, r4
   18f2c:	mov	r0, r6
   18f30:	bl	18810 <__assert_fail@plt+0x7664>
   18f34:	pop	{r4, r5, r6, pc}
   18f38:	push	{r4, lr}
   18f3c:	mov	r2, #3
   18f40:	mov	r1, #0
   18f44:	bl	18a68 <__assert_fail@plt+0x78bc>
   18f48:	pop	{r4, pc}
   18f4c:	push	{lr}		; (str lr, [sp, #-4]!)
   18f50:	sub	sp, sp, #268	; 0x10c
   18f54:	ldr	r2, [pc, #68]	; 18fa0 <__assert_fail@plt+0x7df4>
   18f58:	add	r1, sp, #4
   18f5c:	bl	18fac <__assert_fail@plt+0x7e00>
   18f60:	cmp	r0, #0
   18f64:	movne	r0, #0
   18f68:	bne	18f98 <__assert_fail@plt+0x7dec>
   18f6c:	ldr	r1, [pc, #48]	; 18fa4 <__assert_fail@plt+0x7df8>
   18f70:	add	r0, sp, #4
   18f74:	bl	10ee8 <strcmp@plt>
   18f78:	cmp	r0, #0
   18f7c:	moveq	r0, #0
   18f80:	beq	18f98 <__assert_fail@plt+0x7dec>
   18f84:	ldr	r1, [pc, #28]	; 18fa8 <__assert_fail@plt+0x7dfc>
   18f88:	add	r0, sp, #4
   18f8c:	bl	10ee8 <strcmp@plt>
   18f90:	adds	r0, r0, #0
   18f94:	movne	r0, #1
   18f98:	add	sp, sp, #268	; 0x10c
   18f9c:	pop	{pc}		; (ldr pc, [sp], #4)
   18fa0:	andeq	r0, r0, r1, lsl #2
   18fa4:	muleq	r1, r0, r6
   18fa8:	muleq	r1, r4, r6
   18fac:	push	{r4, r5, r6, lr}
   18fb0:	mov	r6, r1
   18fb4:	mov	r4, r2
   18fb8:	mov	r1, #0
   18fbc:	bl	110e0 <setlocale@plt>
   18fc0:	subs	r5, r0, #0
   18fc4:	beq	18fe8 <__assert_fail@plt+0x7e3c>
   18fc8:	mov	r0, r5
   18fcc:	bl	11044 <strlen@plt>
   18fd0:	cmp	r4, r0
   18fd4:	bhi	19000 <__assert_fail@plt+0x7e54>
   18fd8:	cmp	r4, #0
   18fdc:	bne	19018 <__assert_fail@plt+0x7e6c>
   18fe0:	mov	r0, #34	; 0x22
   18fe4:	pop	{r4, r5, r6, pc}
   18fe8:	cmp	r4, #0
   18fec:	beq	1903c <__assert_fail@plt+0x7e90>
   18ff0:	mov	r3, #0
   18ff4:	strb	r3, [r6]
   18ff8:	mov	r0, #22
   18ffc:	pop	{r4, r5, r6, pc}
   19000:	add	r2, r0, #1
   19004:	mov	r1, r5
   19008:	mov	r0, r6
   1900c:	bl	10f24 <memcpy@plt>
   19010:	mov	r0, #0
   19014:	pop	{r4, r5, r6, pc}
   19018:	sub	r4, r4, #1
   1901c:	mov	r2, r4
   19020:	mov	r1, r5
   19024:	mov	r0, r6
   19028:	bl	10f24 <memcpy@plt>
   1902c:	mov	r3, #0
   19030:	strb	r3, [r6, r4]
   19034:	mov	r0, #34	; 0x22
   19038:	pop	{r4, r5, r6, pc}
   1903c:	mov	r0, #22
   19040:	pop	{r4, r5, r6, pc}
   19044:	push	{r4, lr}
   19048:	mov	r1, #0
   1904c:	bl	110e0 <setlocale@plt>
   19050:	pop	{r4, pc}
   19054:	subs	r2, r1, #1
   19058:	bxeq	lr
   1905c:	bcc	19234 <__assert_fail@plt+0x8088>
   19060:	cmp	r0, r1
   19064:	bls	19218 <__assert_fail@plt+0x806c>
   19068:	tst	r1, r2
   1906c:	beq	19224 <__assert_fail@plt+0x8078>
   19070:	clz	r3, r0
   19074:	clz	r2, r1
   19078:	sub	r3, r2, r3
   1907c:	rsbs	r3, r3, #31
   19080:	addne	r3, r3, r3, lsl #1
   19084:	mov	r2, #0
   19088:	addne	pc, pc, r3, lsl #2
   1908c:	nop			; (mov r0, r0)
   19090:	cmp	r0, r1, lsl #31
   19094:	adc	r2, r2, r2
   19098:	subcs	r0, r0, r1, lsl #31
   1909c:	cmp	r0, r1, lsl #30
   190a0:	adc	r2, r2, r2
   190a4:	subcs	r0, r0, r1, lsl #30
   190a8:	cmp	r0, r1, lsl #29
   190ac:	adc	r2, r2, r2
   190b0:	subcs	r0, r0, r1, lsl #29
   190b4:	cmp	r0, r1, lsl #28
   190b8:	adc	r2, r2, r2
   190bc:	subcs	r0, r0, r1, lsl #28
   190c0:	cmp	r0, r1, lsl #27
   190c4:	adc	r2, r2, r2
   190c8:	subcs	r0, r0, r1, lsl #27
   190cc:	cmp	r0, r1, lsl #26
   190d0:	adc	r2, r2, r2
   190d4:	subcs	r0, r0, r1, lsl #26
   190d8:	cmp	r0, r1, lsl #25
   190dc:	adc	r2, r2, r2
   190e0:	subcs	r0, r0, r1, lsl #25
   190e4:	cmp	r0, r1, lsl #24
   190e8:	adc	r2, r2, r2
   190ec:	subcs	r0, r0, r1, lsl #24
   190f0:	cmp	r0, r1, lsl #23
   190f4:	adc	r2, r2, r2
   190f8:	subcs	r0, r0, r1, lsl #23
   190fc:	cmp	r0, r1, lsl #22
   19100:	adc	r2, r2, r2
   19104:	subcs	r0, r0, r1, lsl #22
   19108:	cmp	r0, r1, lsl #21
   1910c:	adc	r2, r2, r2
   19110:	subcs	r0, r0, r1, lsl #21
   19114:	cmp	r0, r1, lsl #20
   19118:	adc	r2, r2, r2
   1911c:	subcs	r0, r0, r1, lsl #20
   19120:	cmp	r0, r1, lsl #19
   19124:	adc	r2, r2, r2
   19128:	subcs	r0, r0, r1, lsl #19
   1912c:	cmp	r0, r1, lsl #18
   19130:	adc	r2, r2, r2
   19134:	subcs	r0, r0, r1, lsl #18
   19138:	cmp	r0, r1, lsl #17
   1913c:	adc	r2, r2, r2
   19140:	subcs	r0, r0, r1, lsl #17
   19144:	cmp	r0, r1, lsl #16
   19148:	adc	r2, r2, r2
   1914c:	subcs	r0, r0, r1, lsl #16
   19150:	cmp	r0, r1, lsl #15
   19154:	adc	r2, r2, r2
   19158:	subcs	r0, r0, r1, lsl #15
   1915c:	cmp	r0, r1, lsl #14
   19160:	adc	r2, r2, r2
   19164:	subcs	r0, r0, r1, lsl #14
   19168:	cmp	r0, r1, lsl #13
   1916c:	adc	r2, r2, r2
   19170:	subcs	r0, r0, r1, lsl #13
   19174:	cmp	r0, r1, lsl #12
   19178:	adc	r2, r2, r2
   1917c:	subcs	r0, r0, r1, lsl #12
   19180:	cmp	r0, r1, lsl #11
   19184:	adc	r2, r2, r2
   19188:	subcs	r0, r0, r1, lsl #11
   1918c:	cmp	r0, r1, lsl #10
   19190:	adc	r2, r2, r2
   19194:	subcs	r0, r0, r1, lsl #10
   19198:	cmp	r0, r1, lsl #9
   1919c:	adc	r2, r2, r2
   191a0:	subcs	r0, r0, r1, lsl #9
   191a4:	cmp	r0, r1, lsl #8
   191a8:	adc	r2, r2, r2
   191ac:	subcs	r0, r0, r1, lsl #8
   191b0:	cmp	r0, r1, lsl #7
   191b4:	adc	r2, r2, r2
   191b8:	subcs	r0, r0, r1, lsl #7
   191bc:	cmp	r0, r1, lsl #6
   191c0:	adc	r2, r2, r2
   191c4:	subcs	r0, r0, r1, lsl #6
   191c8:	cmp	r0, r1, lsl #5
   191cc:	adc	r2, r2, r2
   191d0:	subcs	r0, r0, r1, lsl #5
   191d4:	cmp	r0, r1, lsl #4
   191d8:	adc	r2, r2, r2
   191dc:	subcs	r0, r0, r1, lsl #4
   191e0:	cmp	r0, r1, lsl #3
   191e4:	adc	r2, r2, r2
   191e8:	subcs	r0, r0, r1, lsl #3
   191ec:	cmp	r0, r1, lsl #2
   191f0:	adc	r2, r2, r2
   191f4:	subcs	r0, r0, r1, lsl #2
   191f8:	cmp	r0, r1, lsl #1
   191fc:	adc	r2, r2, r2
   19200:	subcs	r0, r0, r1, lsl #1
   19204:	cmp	r0, r1
   19208:	adc	r2, r2, r2
   1920c:	subcs	r0, r0, r1
   19210:	mov	r0, r2
   19214:	bx	lr
   19218:	moveq	r0, #1
   1921c:	movne	r0, #0
   19220:	bx	lr
   19224:	clz	r2, r1
   19228:	rsb	r2, r2, #31
   1922c:	lsr	r0, r0, r2
   19230:	bx	lr
   19234:	cmp	r0, #0
   19238:	mvnne	r0, #0
   1923c:	b	194dc <__assert_fail@plt+0x8330>
   19240:	cmp	r1, #0
   19244:	beq	19234 <__assert_fail@plt+0x8088>
   19248:	push	{r0, r1, lr}
   1924c:	bl	19054 <__assert_fail@plt+0x7ea8>
   19250:	pop	{r1, r2, lr}
   19254:	mul	r3, r2, r0
   19258:	sub	r1, r1, r3
   1925c:	bx	lr
   19260:	cmp	r1, #0
   19264:	beq	19470 <__assert_fail@plt+0x82c4>
   19268:	eor	ip, r0, r1
   1926c:	rsbmi	r1, r1, #0
   19270:	subs	r2, r1, #1
   19274:	beq	1943c <__assert_fail@plt+0x8290>
   19278:	movs	r3, r0
   1927c:	rsbmi	r3, r0, #0
   19280:	cmp	r3, r1
   19284:	bls	19448 <__assert_fail@plt+0x829c>
   19288:	tst	r1, r2
   1928c:	beq	19458 <__assert_fail@plt+0x82ac>
   19290:	clz	r2, r3
   19294:	clz	r0, r1
   19298:	sub	r2, r0, r2
   1929c:	rsbs	r2, r2, #31
   192a0:	addne	r2, r2, r2, lsl #1
   192a4:	mov	r0, #0
   192a8:	addne	pc, pc, r2, lsl #2
   192ac:	nop			; (mov r0, r0)
   192b0:	cmp	r3, r1, lsl #31
   192b4:	adc	r0, r0, r0
   192b8:	subcs	r3, r3, r1, lsl #31
   192bc:	cmp	r3, r1, lsl #30
   192c0:	adc	r0, r0, r0
   192c4:	subcs	r3, r3, r1, lsl #30
   192c8:	cmp	r3, r1, lsl #29
   192cc:	adc	r0, r0, r0
   192d0:	subcs	r3, r3, r1, lsl #29
   192d4:	cmp	r3, r1, lsl #28
   192d8:	adc	r0, r0, r0
   192dc:	subcs	r3, r3, r1, lsl #28
   192e0:	cmp	r3, r1, lsl #27
   192e4:	adc	r0, r0, r0
   192e8:	subcs	r3, r3, r1, lsl #27
   192ec:	cmp	r3, r1, lsl #26
   192f0:	adc	r0, r0, r0
   192f4:	subcs	r3, r3, r1, lsl #26
   192f8:	cmp	r3, r1, lsl #25
   192fc:	adc	r0, r0, r0
   19300:	subcs	r3, r3, r1, lsl #25
   19304:	cmp	r3, r1, lsl #24
   19308:	adc	r0, r0, r0
   1930c:	subcs	r3, r3, r1, lsl #24
   19310:	cmp	r3, r1, lsl #23
   19314:	adc	r0, r0, r0
   19318:	subcs	r3, r3, r1, lsl #23
   1931c:	cmp	r3, r1, lsl #22
   19320:	adc	r0, r0, r0
   19324:	subcs	r3, r3, r1, lsl #22
   19328:	cmp	r3, r1, lsl #21
   1932c:	adc	r0, r0, r0
   19330:	subcs	r3, r3, r1, lsl #21
   19334:	cmp	r3, r1, lsl #20
   19338:	adc	r0, r0, r0
   1933c:	subcs	r3, r3, r1, lsl #20
   19340:	cmp	r3, r1, lsl #19
   19344:	adc	r0, r0, r0
   19348:	subcs	r3, r3, r1, lsl #19
   1934c:	cmp	r3, r1, lsl #18
   19350:	adc	r0, r0, r0
   19354:	subcs	r3, r3, r1, lsl #18
   19358:	cmp	r3, r1, lsl #17
   1935c:	adc	r0, r0, r0
   19360:	subcs	r3, r3, r1, lsl #17
   19364:	cmp	r3, r1, lsl #16
   19368:	adc	r0, r0, r0
   1936c:	subcs	r3, r3, r1, lsl #16
   19370:	cmp	r3, r1, lsl #15
   19374:	adc	r0, r0, r0
   19378:	subcs	r3, r3, r1, lsl #15
   1937c:	cmp	r3, r1, lsl #14
   19380:	adc	r0, r0, r0
   19384:	subcs	r3, r3, r1, lsl #14
   19388:	cmp	r3, r1, lsl #13
   1938c:	adc	r0, r0, r0
   19390:	subcs	r3, r3, r1, lsl #13
   19394:	cmp	r3, r1, lsl #12
   19398:	adc	r0, r0, r0
   1939c:	subcs	r3, r3, r1, lsl #12
   193a0:	cmp	r3, r1, lsl #11
   193a4:	adc	r0, r0, r0
   193a8:	subcs	r3, r3, r1, lsl #11
   193ac:	cmp	r3, r1, lsl #10
   193b0:	adc	r0, r0, r0
   193b4:	subcs	r3, r3, r1, lsl #10
   193b8:	cmp	r3, r1, lsl #9
   193bc:	adc	r0, r0, r0
   193c0:	subcs	r3, r3, r1, lsl #9
   193c4:	cmp	r3, r1, lsl #8
   193c8:	adc	r0, r0, r0
   193cc:	subcs	r3, r3, r1, lsl #8
   193d0:	cmp	r3, r1, lsl #7
   193d4:	adc	r0, r0, r0
   193d8:	subcs	r3, r3, r1, lsl #7
   193dc:	cmp	r3, r1, lsl #6
   193e0:	adc	r0, r0, r0
   193e4:	subcs	r3, r3, r1, lsl #6
   193e8:	cmp	r3, r1, lsl #5
   193ec:	adc	r0, r0, r0
   193f0:	subcs	r3, r3, r1, lsl #5
   193f4:	cmp	r3, r1, lsl #4
   193f8:	adc	r0, r0, r0
   193fc:	subcs	r3, r3, r1, lsl #4
   19400:	cmp	r3, r1, lsl #3
   19404:	adc	r0, r0, r0
   19408:	subcs	r3, r3, r1, lsl #3
   1940c:	cmp	r3, r1, lsl #2
   19410:	adc	r0, r0, r0
   19414:	subcs	r3, r3, r1, lsl #2
   19418:	cmp	r3, r1, lsl #1
   1941c:	adc	r0, r0, r0
   19420:	subcs	r3, r3, r1, lsl #1
   19424:	cmp	r3, r1
   19428:	adc	r0, r0, r0
   1942c:	subcs	r3, r3, r1
   19430:	cmp	ip, #0
   19434:	rsbmi	r0, r0, #0
   19438:	bx	lr
   1943c:	teq	ip, r0
   19440:	rsbmi	r0, r0, #0
   19444:	bx	lr
   19448:	movcc	r0, #0
   1944c:	asreq	r0, ip, #31
   19450:	orreq	r0, r0, #1
   19454:	bx	lr
   19458:	clz	r2, r1
   1945c:	rsb	r2, r2, #31
   19460:	cmp	ip, #0
   19464:	lsr	r0, r3, r2
   19468:	rsbmi	r0, r0, #0
   1946c:	bx	lr
   19470:	cmp	r0, #0
   19474:	mvngt	r0, #-2147483648	; 0x80000000
   19478:	movlt	r0, #-2147483648	; 0x80000000
   1947c:	b	194dc <__assert_fail@plt+0x8330>
   19480:	cmp	r1, #0
   19484:	beq	19470 <__assert_fail@plt+0x82c4>
   19488:	push	{r0, r1, lr}
   1948c:	bl	19268 <__assert_fail@plt+0x80bc>
   19490:	pop	{r1, r2, lr}
   19494:	mul	r3, r2, r0
   19498:	sub	r1, r1, r3
   1949c:	bx	lr
   194a0:	cmp	r3, #0
   194a4:	cmpeq	r2, #0
   194a8:	bne	194c0 <__assert_fail@plt+0x8314>
   194ac:	cmp	r1, #0
   194b0:	cmpeq	r0, #0
   194b4:	mvnne	r1, #0
   194b8:	mvnne	r0, #0
   194bc:	b	194dc <__assert_fail@plt+0x8330>
   194c0:	sub	sp, sp, #8
   194c4:	push	{sp, lr}
   194c8:	bl	194ec <__assert_fail@plt+0x8340>
   194cc:	ldr	lr, [sp, #4]
   194d0:	add	sp, sp, #8
   194d4:	pop	{r2, r3}
   194d8:	bx	lr
   194dc:	push	{r1, lr}
   194e0:	mov	r0, #8
   194e4:	bl	10edc <raise@plt>
   194e8:	pop	{r1, pc}
   194ec:	cmp	r1, r3
   194f0:	push	{r4, r5, r6, r7, r8, r9, lr}
   194f4:	cmpeq	r0, r2
   194f8:	mov	r4, r0
   194fc:	mov	r5, r1
   19500:	ldr	r9, [sp, #28]
   19504:	movcc	r0, #0
   19508:	movcc	r1, #0
   1950c:	bcc	19604 <__assert_fail@plt+0x8458>
   19510:	cmp	r3, #0
   19514:	clzeq	ip, r2
   19518:	clzne	ip, r3
   1951c:	addeq	ip, ip, #32
   19520:	cmp	r5, #0
   19524:	clzeq	r1, r4
   19528:	addeq	r1, r1, #32
   1952c:	clzne	r1, r5
   19530:	sub	ip, ip, r1
   19534:	sub	lr, ip, #32
   19538:	lsl	r7, r3, ip
   1953c:	rsb	r8, ip, #32
   19540:	orr	r7, r7, r2, lsl lr
   19544:	orr	r7, r7, r2, lsr r8
   19548:	lsl	r6, r2, ip
   1954c:	cmp	r5, r7
   19550:	cmpeq	r4, r6
   19554:	movcc	r0, #0
   19558:	movcc	r1, #0
   1955c:	bcc	19578 <__assert_fail@plt+0x83cc>
   19560:	mov	r3, #1
   19564:	subs	r4, r4, r6
   19568:	lsl	r1, r3, lr
   1956c:	lsl	r0, r3, ip
   19570:	orr	r1, r1, r3, lsr r8
   19574:	sbc	r5, r5, r7
   19578:	cmp	ip, #0
   1957c:	beq	19604 <__assert_fail@plt+0x8458>
   19580:	lsrs	r3, r7, #1
   19584:	rrx	r2, r6
   19588:	mov	r6, ip
   1958c:	b	195b0 <__assert_fail@plt+0x8404>
   19590:	subs	r4, r4, r2
   19594:	sbc	r5, r5, r3
   19598:	adds	r4, r4, r4
   1959c:	adc	r5, r5, r5
   195a0:	adds	r4, r4, #1
   195a4:	adc	r5, r5, #0
   195a8:	subs	r6, r6, #1
   195ac:	beq	195cc <__assert_fail@plt+0x8420>
   195b0:	cmp	r5, r3
   195b4:	cmpeq	r4, r2
   195b8:	bcs	19590 <__assert_fail@plt+0x83e4>
   195bc:	adds	r4, r4, r4
   195c0:	adc	r5, r5, r5
   195c4:	subs	r6, r6, #1
   195c8:	bne	195b0 <__assert_fail@plt+0x8404>
   195cc:	lsr	r6, r4, ip
   195d0:	lsr	r7, r5, ip
   195d4:	orr	r6, r6, r5, lsl r8
   195d8:	adds	r2, r0, r4
   195dc:	orr	r6, r6, r5, lsr lr
   195e0:	adc	r3, r1, r5
   195e4:	lsl	r1, r7, ip
   195e8:	orr	r1, r1, r6, lsl lr
   195ec:	lsl	r0, r6, ip
   195f0:	orr	r1, r1, r6, lsr r8
   195f4:	subs	r0, r2, r0
   195f8:	mov	r4, r6
   195fc:	mov	r5, r7
   19600:	sbc	r1, r3, r1
   19604:	cmp	r9, #0
   19608:	popeq	{r4, r5, r6, r7, r8, r9, pc}
   1960c:	strd	r4, [r9]
   19610:	pop	{r4, r5, r6, r7, r8, r9, pc}
   19614:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   19618:	mov	r7, r0
   1961c:	ldr	r6, [pc, #72]	; 1966c <__assert_fail@plt+0x84c0>
   19620:	ldr	r5, [pc, #72]	; 19670 <__assert_fail@plt+0x84c4>
   19624:	add	r6, pc, r6
   19628:	add	r5, pc, r5
   1962c:	sub	r6, r6, r5
   19630:	mov	r8, r1
   19634:	mov	r9, r2
   19638:	bl	10e98 <fstatfs64@plt-0x20>
   1963c:	asrs	r6, r6, #2
   19640:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   19644:	mov	r4, #0
   19648:	add	r4, r4, #1
   1964c:	ldr	r3, [r5], #4
   19650:	mov	r2, r9
   19654:	mov	r1, r8
   19658:	mov	r0, r7
   1965c:	blx	r3
   19660:	cmp	r6, r4
   19664:	bne	19648 <__assert_fail@plt+0x849c>
   19668:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1966c:	andeq	r1, r1, r4, ror #17
   19670:	ldrdeq	r1, [r1], -ip
   19674:	bx	lr
   19678:	ldr	r3, [pc, #12]	; 1968c <__assert_fail@plt+0x84e0>
   1967c:	mov	r1, #0
   19680:	add	r3, pc, r3
   19684:	ldr	r2, [r3]
   19688:	b	11080 <__cxa_atexit@plt>
   1968c:	andeq	r1, r1, ip, lsl #21

Disassembly of section .fini:

00019690 <.fini>:
   19690:	push	{r3, lr}
   19694:	pop	{r3, pc}
