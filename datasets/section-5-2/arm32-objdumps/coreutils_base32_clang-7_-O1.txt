
../repos/coreutils/src/base32:     file format elf32-littlearm


Disassembly of section .init:

00010e64 <.init>:
   10e64:	push	{r3, lr}
   10e68:	bl	11148 <__assert_fail@plt+0x48>
   10e6c:	pop	{r3, pc}

Disassembly of section .plt:

00010e70 <calloc@plt-0x14>:
   10e70:	push	{lr}		; (str lr, [sp, #-4]!)
   10e74:	ldr	lr, [pc, #4]	; 10e80 <calloc@plt-0x4>
   10e78:	add	lr, pc, lr
   10e7c:	ldr	pc, [lr, #8]!
   10e80:	andeq	r6, r1, r0, lsl #3

00010e84 <calloc@plt>:
   10e84:	add	ip, pc, #0, 12
   10e88:	add	ip, ip, #90112	; 0x16000
   10e8c:	ldr	pc, [ip, #384]!	; 0x180

00010e90 <fputs_unlocked@plt>:
   10e90:	add	ip, pc, #0, 12
   10e94:	add	ip, ip, #90112	; 0x16000
   10e98:	ldr	pc, [ip, #376]!	; 0x178

00010e9c <raise@plt>:
   10e9c:	add	ip, pc, #0, 12
   10ea0:	add	ip, ip, #90112	; 0x16000
   10ea4:	ldr	pc, [ip, #368]!	; 0x170

00010ea8 <strcmp@plt>:
   10ea8:	add	ip, pc, #0, 12
   10eac:	add	ip, ip, #90112	; 0x16000
   10eb0:	ldr	pc, [ip, #360]!	; 0x168

00010eb4 <posix_fadvise64@plt>:
   10eb4:	add	ip, pc, #0, 12
   10eb8:	add	ip, ip, #90112	; 0x16000
   10ebc:	ldr	pc, [ip, #352]!	; 0x160

00010ec0 <fflush@plt>:
   10ec0:	add	ip, pc, #0, 12
   10ec4:	add	ip, ip, #90112	; 0x16000
   10ec8:	ldr	pc, [ip, #344]!	; 0x158

00010ecc <memmove@plt>:
   10ecc:	add	ip, pc, #0, 12
   10ed0:	add	ip, ip, #90112	; 0x16000
   10ed4:	ldr	pc, [ip, #336]!	; 0x150

00010ed8 <free@plt>:
   10ed8:	add	ip, pc, #0, 12
   10edc:	add	ip, ip, #90112	; 0x16000
   10ee0:	ldr	pc, [ip, #328]!	; 0x148

00010ee4 <_exit@plt>:
   10ee4:	add	ip, pc, #0, 12
   10ee8:	add	ip, ip, #90112	; 0x16000
   10eec:	ldr	pc, [ip, #320]!	; 0x140

00010ef0 <memcpy@plt>:
   10ef0:	add	ip, pc, #0, 12
   10ef4:	add	ip, ip, #90112	; 0x16000
   10ef8:	ldr	pc, [ip, #312]!	; 0x138

00010efc <mbsinit@plt>:
   10efc:	add	ip, pc, #0, 12
   10f00:	add	ip, ip, #90112	; 0x16000
   10f04:	ldr	pc, [ip, #304]!	; 0x130

00010f08 <fwrite_unlocked@plt>:
   10f08:	add	ip, pc, #0, 12
   10f0c:	add	ip, ip, #90112	; 0x16000
   10f10:	ldr	pc, [ip, #296]!	; 0x128

00010f14 <memcmp@plt>:
   10f14:	add	ip, pc, #0, 12
   10f18:	add	ip, ip, #90112	; 0x16000
   10f1c:	ldr	pc, [ip, #288]!	; 0x120

00010f20 <fputc_unlocked@plt>:
   10f20:	add	ip, pc, #0, 12
   10f24:	add	ip, ip, #90112	; 0x16000
   10f28:	ldr	pc, [ip, #280]!	; 0x118

00010f2c <dcgettext@plt>:
   10f2c:	add	ip, pc, #0, 12
   10f30:	add	ip, ip, #90112	; 0x16000
   10f34:	ldr	pc, [ip, #272]!	; 0x110

00010f38 <realloc@plt>:
   10f38:	add	ip, pc, #0, 12
   10f3c:	add	ip, ip, #90112	; 0x16000
   10f40:	ldr	pc, [ip, #264]!	; 0x108

00010f44 <textdomain@plt>:
   10f44:	add	ip, pc, #0, 12
   10f48:	add	ip, ip, #90112	; 0x16000
   10f4c:	ldr	pc, [ip, #256]!	; 0x100

00010f50 <iswprint@plt>:
   10f50:	add	ip, pc, #0, 12
   10f54:	add	ip, ip, #90112	; 0x16000
   10f58:	ldr	pc, [ip, #248]!	; 0xf8

00010f5c <fwrite@plt>:
   10f5c:	add	ip, pc, #0, 12
   10f60:	add	ip, ip, #90112	; 0x16000
   10f64:	ldr	pc, [ip, #240]!	; 0xf0

00010f68 <lseek64@plt>:
   10f68:	add	ip, pc, #0, 12
   10f6c:	add	ip, ip, #90112	; 0x16000
   10f70:	ldr	pc, [ip, #232]!	; 0xe8

00010f74 <__ctype_get_mb_cur_max@plt>:
   10f74:	add	ip, pc, #0, 12
   10f78:	add	ip, ip, #90112	; 0x16000
   10f7c:	ldr	pc, [ip, #224]!	; 0xe0

00010f80 <__fpending@plt>:
   10f80:	add	ip, pc, #0, 12
   10f84:	add	ip, ip, #90112	; 0x16000
   10f88:	ldr	pc, [ip, #216]!	; 0xd8

00010f8c <ferror_unlocked@plt>:
   10f8c:	add	ip, pc, #0, 12
   10f90:	add	ip, ip, #90112	; 0x16000
   10f94:	ldr	pc, [ip, #208]!	; 0xd0

00010f98 <mbrtowc@plt>:
   10f98:	add	ip, pc, #0, 12
   10f9c:	add	ip, ip, #90112	; 0x16000
   10fa0:	ldr	pc, [ip, #200]!	; 0xc8

00010fa4 <error@plt>:
   10fa4:	add	ip, pc, #0, 12
   10fa8:	add	ip, ip, #90112	; 0x16000
   10fac:	ldr	pc, [ip, #192]!	; 0xc0

00010fb0 <malloc@plt>:
   10fb0:	add	ip, pc, #0, 12
   10fb4:	add	ip, ip, #90112	; 0x16000
   10fb8:	ldr	pc, [ip, #184]!	; 0xb8

00010fbc <__libc_start_main@plt>:
   10fbc:	add	ip, pc, #0, 12
   10fc0:	add	ip, ip, #90112	; 0x16000
   10fc4:	ldr	pc, [ip, #176]!	; 0xb0

00010fc8 <__freading@plt>:
   10fc8:	add	ip, pc, #0, 12
   10fcc:	add	ip, ip, #90112	; 0x16000
   10fd0:	ldr	pc, [ip, #168]!	; 0xa8

00010fd4 <__gmon_start__@plt>:
   10fd4:	add	ip, pc, #0, 12
   10fd8:	add	ip, ip, #90112	; 0x16000
   10fdc:	ldr	pc, [ip, #160]!	; 0xa0

00010fe0 <getopt_long@plt>:
   10fe0:	add	ip, pc, #0, 12
   10fe4:	add	ip, ip, #90112	; 0x16000
   10fe8:	ldr	pc, [ip, #152]!	; 0x98

00010fec <__ctype_b_loc@plt>:
   10fec:	add	ip, pc, #0, 12
   10ff0:	add	ip, ip, #90112	; 0x16000
   10ff4:	ldr	pc, [ip, #144]!	; 0x90

00010ff8 <exit@plt>:
   10ff8:	add	ip, pc, #0, 12
   10ffc:	add	ip, ip, #90112	; 0x16000
   11000:	ldr	pc, [ip, #136]!	; 0x88

00011004 <strlen@plt>:
   11004:	add	ip, pc, #0, 12
   11008:	add	ip, ip, #90112	; 0x16000
   1100c:	ldr	pc, [ip, #128]!	; 0x80

00011010 <strchr@plt>:
   11010:	add	ip, pc, #0, 12
   11014:	add	ip, ip, #90112	; 0x16000
   11018:	ldr	pc, [ip, #120]!	; 0x78

0001101c <__errno_location@plt>:
   1101c:	add	ip, pc, #0, 12
   11020:	add	ip, ip, #90112	; 0x16000
   11024:	ldr	pc, [ip, #112]!	; 0x70

00011028 <__cxa_atexit@plt>:
   11028:	add	ip, pc, #0, 12
   1102c:	add	ip, ip, #90112	; 0x16000
   11030:	ldr	pc, [ip, #104]!	; 0x68

00011034 <memset@plt>:
   11034:	add	ip, pc, #0, 12
   11038:	add	ip, ip, #90112	; 0x16000
   1103c:	ldr	pc, [ip, #96]!	; 0x60

00011040 <__printf_chk@plt>:
   11040:	add	ip, pc, #0, 12
   11044:	add	ip, ip, #90112	; 0x16000
   11048:	ldr	pc, [ip, #88]!	; 0x58

0001104c <fileno@plt>:
   1104c:	add	ip, pc, #0, 12
   11050:	add	ip, ip, #90112	; 0x16000
   11054:	ldr	pc, [ip, #80]!	; 0x50

00011058 <__fprintf_chk@plt>:
   11058:	add	ip, pc, #0, 12
   1105c:	add	ip, ip, #90112	; 0x16000
   11060:	ldr	pc, [ip, #72]!	; 0x48

00011064 <memchr@plt>:
   11064:	add	ip, pc, #0, 12
   11068:	add	ip, ip, #90112	; 0x16000
   1106c:	ldr	pc, [ip, #64]!	; 0x40

00011070 <strtoimax@plt>:
   11070:	add	ip, pc, #0, 12
   11074:	add	ip, ip, #90112	; 0x16000
   11078:	ldr	pc, [ip, #56]!	; 0x38

0001107c <fclose@plt>:
   1107c:	add	ip, pc, #0, 12
   11080:	add	ip, ip, #90112	; 0x16000
   11084:	ldr	pc, [ip, #48]!	; 0x30

00011088 <fseeko64@plt>:
   11088:	add	ip, pc, #0, 12
   1108c:	add	ip, ip, #90112	; 0x16000
   11090:	ldr	pc, [ip, #40]!	; 0x28

00011094 <setlocale@plt>:
   11094:	add	ip, pc, #0, 12
   11098:	add	ip, ip, #90112	; 0x16000
   1109c:	ldr	pc, [ip, #32]!

000110a0 <strrchr@plt>:
   110a0:	add	ip, pc, #0, 12
   110a4:	add	ip, ip, #90112	; 0x16000
   110a8:	ldr	pc, [ip, #24]!

000110ac <nl_langinfo@plt>:
   110ac:	add	ip, pc, #0, 12
   110b0:	add	ip, ip, #90112	; 0x16000
   110b4:	ldr	pc, [ip, #16]!

000110b8 <fopen64@plt>:
   110b8:	add	ip, pc, #0, 12
   110bc:	add	ip, ip, #90112	; 0x16000
   110c0:	ldr	pc, [ip, #8]!

000110c4 <bindtextdomain@plt>:
   110c4:	add	ip, pc, #0, 12
   110c8:	add	ip, ip, #90112	; 0x16000
   110cc:	ldr	pc, [ip, #0]!

000110d0 <fread_unlocked@plt>:
   110d0:	add	ip, pc, #0, 12
   110d4:	add	ip, ip, #86016	; 0x15000
   110d8:	ldr	pc, [ip, #4088]!	; 0xff8

000110dc <strncmp@plt>:
   110dc:	add	ip, pc, #0, 12
   110e0:	add	ip, ip, #86016	; 0x15000
   110e4:	ldr	pc, [ip, #4080]!	; 0xff0

000110e8 <abort@plt>:
   110e8:	add	ip, pc, #0, 12
   110ec:	add	ip, ip, #86016	; 0x15000
   110f0:	ldr	pc, [ip, #4072]!	; 0xfe8

000110f4 <feof_unlocked@plt>:
   110f4:	add	ip, pc, #0, 12
   110f8:	add	ip, ip, #86016	; 0x15000
   110fc:	ldr	pc, [ip, #4064]!	; 0xfe0

00011100 <__assert_fail@plt>:
   11100:	add	ip, pc, #0, 12
   11104:	add	ip, ip, #86016	; 0x15000
   11108:	ldr	pc, [ip, #4056]!	; 0xfd8

Disassembly of section .text:

0001110c <.text>:
   1110c:	mov	fp, #0
   11110:	mov	lr, #0
   11114:	pop	{r1}		; (ldr r1, [sp], #4)
   11118:	mov	r2, sp
   1111c:	push	{r2}		; (str r2, [sp, #-4]!)
   11120:	push	{r0}		; (str r0, [sp, #-4]!)
   11124:	ldr	ip, [pc, #16]	; 1113c <__assert_fail@plt+0x3c>
   11128:	push	{ip}		; (str ip, [sp, #-4]!)
   1112c:	ldr	r0, [pc, #12]	; 11140 <__assert_fail@plt+0x40>
   11130:	ldr	r3, [pc, #12]	; 11144 <__assert_fail@plt+0x44>
   11134:	bl	10fbc <__libc_start_main@plt>
   11138:	bl	110e8 <abort@plt>
   1113c:	andeq	r5, r1, r0, lsl #28
   11140:	andeq	r1, r1, r4, lsr #10
   11144:	andeq	r5, r1, r0, lsr #27
   11148:	ldr	r3, [pc, #20]	; 11164 <__assert_fail@plt+0x64>
   1114c:	ldr	r2, [pc, #20]	; 11168 <__assert_fail@plt+0x68>
   11150:	add	r3, pc, r3
   11154:	ldr	r2, [r3, r2]
   11158:	cmp	r2, #0
   1115c:	bxeq	lr
   11160:	b	10fd4 <__gmon_start__@plt>
   11164:	andeq	r5, r1, r8, lsr #29
   11168:	andeq	r0, r0, r4, ror #1
   1116c:	ldr	r0, [pc, #24]	; 1118c <__assert_fail@plt+0x8c>
   11170:	ldr	r3, [pc, #24]	; 11190 <__assert_fail@plt+0x90>
   11174:	cmp	r3, r0
   11178:	bxeq	lr
   1117c:	ldr	r3, [pc, #16]	; 11194 <__assert_fail@plt+0x94>
   11180:	cmp	r3, #0
   11184:	bxeq	lr
   11188:	bx	r3
   1118c:	andeq	r7, r2, r8, lsr r1
   11190:	andeq	r7, r2, r8, lsr r1
   11194:	andeq	r0, r0, r0
   11198:	ldr	r0, [pc, #36]	; 111c4 <__assert_fail@plt+0xc4>
   1119c:	ldr	r1, [pc, #36]	; 111c8 <__assert_fail@plt+0xc8>
   111a0:	sub	r1, r1, r0
   111a4:	asr	r1, r1, #2
   111a8:	add	r1, r1, r1, lsr #31
   111ac:	asrs	r1, r1, #1
   111b0:	bxeq	lr
   111b4:	ldr	r3, [pc, #16]	; 111cc <__assert_fail@plt+0xcc>
   111b8:	cmp	r3, #0
   111bc:	bxeq	lr
   111c0:	bx	r3
   111c4:	andeq	r7, r2, r8, lsr r1
   111c8:	andeq	r7, r2, r8, lsr r1
   111cc:	andeq	r0, r0, r0
   111d0:	push	{r4, lr}
   111d4:	ldr	r4, [pc, #24]	; 111f4 <__assert_fail@plt+0xf4>
   111d8:	ldrb	r3, [r4]
   111dc:	cmp	r3, #0
   111e0:	popne	{r4, pc}
   111e4:	bl	1116c <__assert_fail@plt+0x6c>
   111e8:	mov	r3, #1
   111ec:	strb	r3, [r4]
   111f0:	pop	{r4, pc}
   111f4:	andeq	r7, r2, ip, asr r1
   111f8:	b	11198 <__assert_fail@plt+0x98>
   111fc:	push	{fp, lr}
   11200:	mov	fp, sp
   11204:	mov	r4, r0
   11208:	cmp	r0, #0
   1120c:	bne	112fc <__assert_fail@plt+0x1fc>
   11210:	movw	r1, #24147	; 0x5e53
   11214:	movt	r1, #1
   11218:	mov	r0, #0
   1121c:	mov	r2, #5
   11220:	bl	10f2c <dcgettext@plt>
   11224:	mov	r1, r0
   11228:	movw	r0, #29032	; 0x7168
   1122c:	movt	r0, #2
   11230:	ldr	r2, [r0]
   11234:	mov	r0, #1
   11238:	bl	11040 <__printf_chk@plt>
   1123c:	movw	r1, #24177	; 0x5e71
   11240:	movt	r1, #1
   11244:	mov	r0, #0
   11248:	mov	r2, #5
   1124c:	bl	10f2c <dcgettext@plt>
   11250:	mov	r1, r0
   11254:	mov	r0, #1
   11258:	mov	r2, #32
   1125c:	bl	11040 <__printf_chk@plt>
   11260:	bl	11340 <__assert_fail@plt+0x240>
   11264:	bl	11370 <__assert_fail@plt+0x270>
   11268:	movw	r1, #24247	; 0x5eb7
   1126c:	movt	r1, #1
   11270:	mov	r0, #0
   11274:	mov	r2, #5
   11278:	bl	10f2c <dcgettext@plt>
   1127c:	movw	r5, #29012	; 0x7154
   11280:	movt	r5, #2
   11284:	ldr	r1, [r5]
   11288:	bl	10e90 <fputs_unlocked@plt>
   1128c:	movw	r1, #24489	; 0x5fa9
   11290:	movt	r1, #1
   11294:	mov	r0, #0
   11298:	mov	r2, #5
   1129c:	bl	10f2c <dcgettext@plt>
   112a0:	ldr	r1, [r5]
   112a4:	bl	10e90 <fputs_unlocked@plt>
   112a8:	movw	r1, #24534	; 0x5fd6
   112ac:	movt	r1, #1
   112b0:	mov	r0, #0
   112b4:	mov	r2, #5
   112b8:	bl	10f2c <dcgettext@plt>
   112bc:	ldr	r1, [r5]
   112c0:	bl	10e90 <fputs_unlocked@plt>
   112c4:	movw	r1, #24588	; 0x600c
   112c8:	movt	r1, #1
   112cc:	mov	r0, #0
   112d0:	mov	r2, #5
   112d4:	bl	10f2c <dcgettext@plt>
   112d8:	mov	r1, r0
   112dc:	movw	r2, #24856	; 0x6118
   112e0:	movt	r2, #1
   112e4:	mov	r0, #1
   112e8:	mov	r3, r2
   112ec:	bl	11040 <__printf_chk@plt>
   112f0:	bl	113a0 <__assert_fail@plt+0x2a0>
   112f4:	mov	r0, r4
   112f8:	bl	10ff8 <exit@plt>
   112fc:	movw	r0, #29000	; 0x7148
   11300:	movt	r0, #2
   11304:	ldr	r5, [r0]
   11308:	movw	r1, #24108	; 0x5e2c
   1130c:	movt	r1, #1
   11310:	mov	r0, #0
   11314:	mov	r2, #5
   11318:	bl	10f2c <dcgettext@plt>
   1131c:	mov	r2, r0
   11320:	movw	r0, #29032	; 0x7168
   11324:	movt	r0, #2
   11328:	ldr	r3, [r0]
   1132c:	mov	r0, r5
   11330:	mov	r1, #1
   11334:	bl	11058 <__fprintf_chk@plt>
   11338:	mov	r0, r4
   1133c:	bl	10ff8 <exit@plt>
   11340:	push	{fp, lr}
   11344:	mov	fp, sp
   11348:	movw	r1, #24967	; 0x6187
   1134c:	movt	r1, #1
   11350:	mov	r0, #0
   11354:	mov	r2, #5
   11358:	bl	10f2c <dcgettext@plt>
   1135c:	movw	r1, #29012	; 0x7154
   11360:	movt	r1, #2
   11364:	ldr	r1, [r1]
   11368:	pop	{fp, lr}
   1136c:	b	10e90 <fputs_unlocked@plt>
   11370:	push	{fp, lr}
   11374:	mov	fp, sp
   11378:	movw	r1, #25023	; 0x61bf
   1137c:	movt	r1, #1
   11380:	mov	r0, #0
   11384:	mov	r2, #5
   11388:	bl	10f2c <dcgettext@plt>
   1138c:	movw	r1, #29012	; 0x7154
   11390:	movt	r1, #2
   11394:	ldr	r1, [r1]
   11398:	pop	{fp, lr}
   1139c:	b	10e90 <fputs_unlocked@plt>
   113a0:	push	{r4, r5, fp, lr}
   113a4:	add	fp, sp, #8
   113a8:	sub	sp, sp, #56	; 0x38
   113ac:	movw	r0, #25608	; 0x6408
   113b0:	movt	r0, #1
   113b4:	add	r1, r0, #32
   113b8:	mov	r5, sp
   113bc:	mov	r2, #48	; 0x30
   113c0:	vld1.64	{d16-d17}, [r1]
   113c4:	add	r1, r5, #32
   113c8:	add	r3, r0, #16
   113cc:	vld1.64	{d18-d19}, [r0], r2
   113d0:	vld1.64	{d20-d21}, [r3]
   113d4:	vldr	d22, [r0]
   113d8:	vst1.64	{d16-d17}, [r1]
   113dc:	add	r0, r5, #16
   113e0:	vst1.64	{d20-d21}, [r0]
   113e4:	mov	r0, r5
   113e8:	vst1.64	{d18-d19}, [r0], r2
   113ec:	vstr	d22, [r0]
   113f0:	ldr	r1, [sp]
   113f4:	cmp	r1, #0
   113f8:	beq	11420 <__assert_fail@plt+0x320>
   113fc:	mov	r5, sp
   11400:	movw	r4, #24856	; 0x6118
   11404:	movt	r4, #1
   11408:	mov	r0, r4
   1140c:	bl	10ea8 <strcmp@plt>
   11410:	cmp	r0, #0
   11414:	ldrne	r1, [r5, #8]!
   11418:	cmpne	r1, #0
   1141c:	bne	11408 <__assert_fail@plt+0x308>
   11420:	ldr	r4, [r5, #4]
   11424:	movw	r1, #25193	; 0x6269
   11428:	movt	r1, #1
   1142c:	mov	r0, #0
   11430:	mov	r2, #5
   11434:	bl	10f2c <dcgettext@plt>
   11438:	mov	r1, r0
   1143c:	movw	r2, #24917	; 0x6155
   11440:	movt	r2, #1
   11444:	movw	r3, #25216	; 0x6280
   11448:	movt	r3, #1
   1144c:	mov	r0, #1
   11450:	bl	11040 <__printf_chk@plt>
   11454:	movw	r5, #24856	; 0x6118
   11458:	movt	r5, #1
   1145c:	cmp	r4, #0
   11460:	moveq	r4, r5
   11464:	mov	r0, #5
   11468:	mov	r1, #0
   1146c:	bl	11094 <setlocale@plt>
   11470:	cmp	r0, #0
   11474:	beq	114b4 <__assert_fail@plt+0x3b4>
   11478:	movw	r1, #25256	; 0x62a8
   1147c:	movt	r1, #1
   11480:	mov	r2, #3
   11484:	bl	110dc <strncmp@plt>
   11488:	cmp	r0, #0
   1148c:	beq	114b4 <__assert_fail@plt+0x3b4>
   11490:	movw	r1, #25260	; 0x62ac
   11494:	movt	r1, #1
   11498:	mov	r0, #0
   1149c:	mov	r2, #5
   114a0:	bl	10f2c <dcgettext@plt>
   114a4:	movw	r1, #29012	; 0x7154
   114a8:	movt	r1, #2
   114ac:	ldr	r1, [r1]
   114b0:	bl	10e90 <fputs_unlocked@plt>
   114b4:	movw	r1, #25331	; 0x62f3
   114b8:	movt	r1, #1
   114bc:	mov	r0, #0
   114c0:	mov	r2, #5
   114c4:	bl	10f2c <dcgettext@plt>
   114c8:	mov	r1, r0
   114cc:	movw	r2, #25216	; 0x6280
   114d0:	movt	r2, #1
   114d4:	mov	r0, #1
   114d8:	mov	r3, r5
   114dc:	bl	11040 <__printf_chk@plt>
   114e0:	movw	r1, #25358	; 0x630e
   114e4:	movt	r1, #1
   114e8:	mov	r0, #0
   114ec:	mov	r2, #5
   114f0:	bl	10f2c <dcgettext@plt>
   114f4:	mov	r1, r0
   114f8:	movw	r0, #25126	; 0x6226
   114fc:	movt	r0, #1
   11500:	movw	r3, #25408	; 0x6340
   11504:	movt	r3, #1
   11508:	cmp	r4, r5
   1150c:	moveq	r3, r0
   11510:	mov	r0, #1
   11514:	mov	r2, r4
   11518:	bl	11040 <__printf_chk@plt>
   1151c:	sub	sp, fp, #8
   11520:	pop	{r4, r5, fp, pc}
   11524:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11528:	add	fp, sp, #28
   1152c:	sub	sp, sp, #28
   11530:	mov	r4, r1
   11534:	mov	r6, r0
   11538:	ldr	r0, [r1]
   1153c:	bl	12a84 <__assert_fail@plt+0x1984>
   11540:	movw	r1, #25408	; 0x6340
   11544:	movt	r1, #1
   11548:	mov	r0, #6
   1154c:	bl	11094 <setlocale@plt>
   11550:	movw	r5, #24921	; 0x6159
   11554:	movt	r5, #1
   11558:	movw	r1, #24863	; 0x611f
   1155c:	movt	r1, #1
   11560:	mov	r0, r5
   11564:	bl	110c4 <bindtextdomain@plt>
   11568:	mov	r0, r5
   1156c:	bl	10f44 <textdomain@plt>
   11570:	movw	r0, #10040	; 0x2738
   11574:	movt	r0, #1
   11578:	bl	15e04 <__assert_fail@plt+0x4d04>
   1157c:	mov	r5, #76	; 0x4c
   11580:	mov	r8, #0
   11584:	movw	r9, #24887	; 0x6137
   11588:	movt	r9, #1
   1158c:	movw	r7, #25512	; 0x63a8
   11590:	movt	r7, #1
   11594:	mov	sl, #0
   11598:	mov	r0, #0
   1159c:	b	115a4 <__assert_fail@plt+0x4a4>
   115a0:	mov	r0, #1
   115a4:	str	r0, [sp, #12]
   115a8:	b	115b0 <__assert_fail@plt+0x4b0>
   115ac:	mov	sl, #1
   115b0:	str	r8, [sp]
   115b4:	mov	r0, r6
   115b8:	mov	r1, r4
   115bc:	mov	r2, r9
   115c0:	mov	r3, r7
   115c4:	bl	10fe0 <getopt_long@plt>
   115c8:	cmp	r0, #99	; 0x63
   115cc:	ble	11644 <__assert_fail@plt+0x544>
   115d0:	cmp	r0, #100	; 0x64
   115d4:	beq	115ac <__assert_fail@plt+0x4ac>
   115d8:	cmp	r0, #105	; 0x69
   115dc:	beq	115a0 <__assert_fail@plt+0x4a0>
   115e0:	cmp	r0, #119	; 0x77
   115e4:	bne	11820 <__assert_fail@plt+0x720>
   115e8:	movw	r0, #29016	; 0x7158
   115ec:	movt	r0, #2
   115f0:	ldr	r0, [r0]
   115f4:	movw	r1, #25408	; 0x6340
   115f8:	movt	r1, #1
   115fc:	str	r1, [sp]
   11600:	mov	r1, #0
   11604:	mov	r2, #10
   11608:	add	r3, sp, #16
   1160c:	bl	14fcc <__assert_fail@plt+0x3ecc>
   11610:	cmp	r0, #1
   11614:	bhi	117dc <__assert_fail@plt+0x6dc>
   11618:	ldr	r1, [sp, #20]
   1161c:	cmn	r1, #1
   11620:	ble	117dc <__assert_fail@plt+0x6dc>
   11624:	ldr	r2, [sp, #16]
   11628:	mvn	r3, #-2147483648	; 0x80000000
   1162c:	subs	r3, r3, r2
   11630:	rscs	r1, r1, #0
   11634:	movwlt	r2, #0
   11638:	subs	r5, r0, #1
   1163c:	movne	r5, r2
   11640:	b	115b0 <__assert_fail@plt+0x4b0>
   11644:	cmn	r0, #3
   11648:	beq	1165c <__assert_fail@plt+0x55c>
   1164c:	cmn	r0, #2
   11650:	bne	116a4 <__assert_fail@plt+0x5a4>
   11654:	mov	r0, #0
   11658:	bl	111fc <__assert_fail@plt+0xfc>
   1165c:	movw	r0, #28912	; 0x70f0
   11660:	movt	r0, #2
   11664:	ldr	r3, [r0]
   11668:	movw	r0, #29012	; 0x7154
   1166c:	movt	r0, #2
   11670:	ldr	r0, [r0]
   11674:	mov	r1, #0
   11678:	movw	r2, #24931	; 0x6163
   1167c:	movt	r2, #1
   11680:	str	r2, [sp]
   11684:	str	r1, [sp, #4]
   11688:	movw	r1, #24856	; 0x6118
   1168c:	movt	r1, #1
   11690:	movw	r2, #24917	; 0x6155
   11694:	movt	r2, #1
   11698:	bl	14ac8 <__assert_fail@plt+0x39c8>
   1169c:	mov	r0, #0
   116a0:	bl	10ff8 <exit@plt>
   116a4:	cmn	r0, #1
   116a8:	bne	11820 <__assert_fail@plt+0x720>
   116ac:	movw	r7, #28992	; 0x7140
   116b0:	movt	r7, #2
   116b4:	ldr	r0, [r7]
   116b8:	sub	r1, r6, r0
   116bc:	cmp	r1, #2
   116c0:	blt	11708 <__assert_fail@plt+0x608>
   116c4:	movw	r1, #24947	; 0x6173
   116c8:	movt	r1, #1
   116cc:	mov	r0, #0
   116d0:	mov	r2, #5
   116d4:	bl	10f2c <dcgettext@plt>
   116d8:	mov	r5, r0
   116dc:	ldr	r0, [r7]
   116e0:	add	r0, r4, r0, lsl #2
   116e4:	ldr	r0, [r0, #4]
   116e8:	bl	142bc <__assert_fail@plt+0x31bc>
   116ec:	mov	r3, r0
   116f0:	mov	r0, #0
   116f4:	mov	r1, #0
   116f8:	mov	r2, r5
   116fc:	bl	10fa4 <error@plt>
   11700:	mov	r0, #1
   11704:	bl	111fc <__assert_fail@plt+0xfc>
   11708:	cmp	r0, r6
   1170c:	ldrlt	r4, [r4, r0, lsl #2]
   11710:	movwge	r4, #26033	; 0x65b1
   11714:	movtge	r4, #1
   11718:	movw	r1, #26033	; 0x65b1
   1171c:	movt	r1, #1
   11720:	mov	r0, r4
   11724:	bl	10ea8 <strcmp@plt>
   11728:	cmp	r0, #0
   1172c:	bne	1174c <__assert_fail@plt+0x64c>
   11730:	mov	r0, #0
   11734:	mov	r1, #0
   11738:	bl	14fc8 <__assert_fail@plt+0x3ec8>
   1173c:	movw	r0, #29008	; 0x7150
   11740:	movt	r0, #2
   11744:	ldr	r6, [r0]
   11748:	b	11798 <__assert_fail@plt+0x698>
   1174c:	movw	r1, #24964	; 0x6184
   11750:	movt	r1, #1
   11754:	mov	r0, r4
   11758:	bl	110b8 <fopen64@plt>
   1175c:	mov	r6, r0
   11760:	cmp	r0, #0
   11764:	bne	11798 <__assert_fail@plt+0x698>
   11768:	bl	1101c <__errno_location@plt>
   1176c:	ldr	r5, [r0]
   11770:	mov	r0, #0
   11774:	mov	r1, #3
   11778:	mov	r2, r4
   1177c:	bl	1417c <__assert_fail@plt+0x307c>
   11780:	mov	r3, r0
   11784:	movw	r2, #24896	; 0x6140
   11788:	movt	r2, #1
   1178c:	mov	r0, #1
   11790:	mov	r1, r5
   11794:	bl	10fa4 <error@plt>
   11798:	mov	r0, r6
   1179c:	mov	r1, #2
   117a0:	bl	12824 <__assert_fail@plt+0x1724>
   117a4:	movw	r0, #29012	; 0x7154
   117a8:	movt	r0, #2
   117ac:	ldr	r2, [r0]
   117b0:	tst	sl, #1
   117b4:	beq	117cc <__assert_fail@plt+0x6cc>
   117b8:	ldr	r0, [sp, #12]
   117bc:	and	r3, r0, #1
   117c0:	mov	r0, r6
   117c4:	mov	r1, r4
   117c8:	bl	11828 <__assert_fail@plt+0x728>
   117cc:	mov	r0, r6
   117d0:	mov	r1, r4
   117d4:	mov	r3, r5
   117d8:	bl	11a3c <__assert_fail@plt+0x93c>
   117dc:	movw	r1, #24899	; 0x6143
   117e0:	movt	r1, #1
   117e4:	mov	r0, #0
   117e8:	mov	r2, #5
   117ec:	bl	10f2c <dcgettext@plt>
   117f0:	mov	r4, r0
   117f4:	movw	r0, #29016	; 0x7158
   117f8:	movt	r0, #2
   117fc:	ldr	r0, [r0]
   11800:	bl	142bc <__assert_fail@plt+0x31bc>
   11804:	str	r0, [sp]
   11808:	movw	r2, #24892	; 0x613c
   1180c:	movt	r2, #1
   11810:	mov	r0, #1
   11814:	mov	r1, #0
   11818:	mov	r3, r4
   1181c:	bl	10fa4 <error@plt>
   11820:	mov	r0, #1
   11824:	bl	111fc <__assert_fail@plt+0xfc>
   11828:	push	{fp, lr}
   1182c:	mov	fp, sp
   11830:	sub	sp, sp, #40	; 0x28
   11834:	add	ip, sp, #8
   11838:	stm	ip, {r1, r2, r3}
   1183c:	mov	r8, r0
   11840:	mov	r0, #8192	; 0x2000
   11844:	bl	14bd0 <__assert_fail@plt+0x3ad0>
   11848:	mov	r4, r0
   1184c:	mov	r0, #5120	; 0x1400
   11850:	bl	14bd0 <__assert_fail@plt+0x3ad0>
   11854:	mov	r9, r0
   11858:	sub	r0, fp, #12
   1185c:	bl	120e8 <__assert_fail@plt+0xfe8>
   11860:	mov	sl, #0
   11864:	str	r8, [sp, #20]
   11868:	add	r5, r4, sl
   1186c:	rsb	r2, sl, #8192	; 0x2000
   11870:	mov	r0, r5
   11874:	mov	r1, #1
   11878:	mov	r3, r8
   1187c:	bl	110d0 <fread_unlocked@plt>
   11880:	mov	r8, r0
   11884:	cmp	r0, #1
   11888:	blt	118f0 <__assert_fail@plt+0x7f0>
   1188c:	ldr	r0, [sp, #16]
   11890:	cmp	r0, #0
   11894:	beq	118f0 <__assert_fail@plt+0x7f0>
   11898:	mov	r6, #0
   1189c:	add	r0, r6, sl
   118a0:	ldrb	r7, [r4, r0]
   118a4:	mov	r0, r7
   118a8:	bl	120bc <__assert_fail@plt+0xfbc>
   118ac:	cmp	r0, #0
   118b0:	bne	118e4 <__assert_fail@plt+0x7e4>
   118b4:	cmp	r7, #61	; 0x3d
   118b8:	beq	118e4 <__assert_fail@plt+0x7e4>
   118bc:	sub	r8, r8, #1
   118c0:	sub	r2, r8, r6
   118c4:	add	r0, r5, r6
   118c8:	add	r1, r0, #1
   118cc:	bl	10ecc <memmove@plt>
   118d0:	cmp	r8, #1
   118d4:	blt	118f0 <__assert_fail@plt+0x7f0>
   118d8:	cmp	r6, r8
   118dc:	blt	1189c <__assert_fail@plt+0x79c>
   118e0:	b	118f0 <__assert_fail@plt+0x7f0>
   118e4:	add	r6, r6, #1
   118e8:	cmp	r8, #1
   118ec:	bge	118d8 <__assert_fail@plt+0x7d8>
   118f0:	ldr	r0, [sp, #20]
   118f4:	bl	10f8c <ferror_unlocked@plt>
   118f8:	cmp	r0, #0
   118fc:	bne	11a28 <__assert_fail@plt+0x928>
   11900:	add	sl, r8, sl
   11904:	cmp	sl, #8192	; 0x2000
   11908:	ldr	r8, [sp, #20]
   1190c:	bge	11920 <__assert_fail@plt+0x820>
   11910:	mov	r0, r8
   11914:	bl	110f4 <feof_unlocked@plt>
   11918:	cmp	r0, #0
   1191c:	beq	11868 <__assert_fail@plt+0x768>
   11920:	mov	r0, r8
   11924:	bl	110f4 <feof_unlocked@plt>
   11928:	mov	r6, #0
   1192c:	ldr	r5, [sp, #12]
   11930:	cmp	r6, #1
   11934:	ldreq	r0, [fp, #-12]
   11938:	cmpeq	r0, #0
   1193c:	beq	119b8 <__assert_fail@plt+0x8b8>
   11940:	mov	r0, #5120	; 0x1400
   11944:	str	r0, [fp, #-16]
   11948:	sub	r0, fp, #16
   1194c:	str	r0, [sp]
   11950:	cmp	r6, #0
   11954:	mov	r2, #0
   11958:	moveq	r2, sl
   1195c:	sub	r0, fp, #12
   11960:	mov	r1, r4
   11964:	mov	r3, r9
   11968:	bl	120f4 <__assert_fail@plt+0xff4>
   1196c:	mov	r7, r0
   11970:	ldr	r2, [fp, #-16]
   11974:	mov	r0, r9
   11978:	mov	r1, #1
   1197c:	mov	r3, r5
   11980:	bl	10f08 <fwrite_unlocked@plt>
   11984:	ldr	r1, [fp, #-16]
   11988:	cmp	r0, r1
   1198c:	bcc	119d8 <__assert_fail@plt+0x8d8>
   11990:	cmp	r7, #0
   11994:	beq	11a04 <__assert_fail@plt+0x904>
   11998:	mov	r0, r8
   1199c:	bl	110f4 <feof_unlocked@plt>
   119a0:	cmp	r0, #0
   119a4:	mov	r0, #2
   119a8:	movweq	r0, #1
   119ac:	add	r6, r6, #1
   119b0:	cmp	r6, r0
   119b4:	bcc	11930 <__assert_fail@plt+0x830>
   119b8:	mov	r0, r8
   119bc:	bl	110f4 <feof_unlocked@plt>
   119c0:	mov	sl, #0
   119c4:	cmp	r0, #0
   119c8:	beq	11868 <__assert_fail@plt+0x768>
   119cc:	mov	r0, r8
   119d0:	ldr	r1, [sp, #8]
   119d4:	bl	11bc0 <__assert_fail@plt+0xac0>
   119d8:	bl	1101c <__errno_location@plt>
   119dc:	ldr	r4, [r0]
   119e0:	movw	r1, #25460	; 0x6374
   119e4:	movt	r1, #1
   119e8:	mov	r0, #0
   119ec:	mov	r2, #5
   119f0:	bl	10f2c <dcgettext@plt>
   119f4:	mov	r2, r0
   119f8:	mov	r0, #1
   119fc:	mov	r1, r4
   11a00:	bl	10fa4 <error@plt>
   11a04:	movw	r1, #25472	; 0x6380
   11a08:	movt	r1, #1
   11a0c:	mov	r0, #0
   11a10:	mov	r2, #5
   11a14:	bl	10f2c <dcgettext@plt>
   11a18:	mov	r2, r0
   11a1c:	mov	r0, #1
   11a20:	mov	r1, #0
   11a24:	bl	10fa4 <error@plt>
   11a28:	bl	1101c <__errno_location@plt>
   11a2c:	ldr	r4, [r0]
   11a30:	movw	r1, #25449	; 0x6369
   11a34:	movt	r1, #1
   11a38:	b	119e8 <__assert_fail@plt+0x8e8>
   11a3c:	push	{fp, lr}
   11a40:	mov	fp, sp
   11a44:	sub	sp, sp, #16
   11a48:	mov	sl, r3
   11a4c:	mov	r9, r2
   11a50:	str	r1, [sp, #8]
   11a54:	mov	r5, r0
   11a58:	mov	r4, #0
   11a5c:	str	r4, [fp, #-4]
   11a60:	mov	r0, #30720	; 0x7800
   11a64:	bl	14bd0 <__assert_fail@plt+0x3ad0>
   11a68:	mov	r6, r0
   11a6c:	mov	r0, #49152	; 0xc000
   11a70:	bl	14bd0 <__assert_fail@plt+0x3ad0>
   11a74:	mov	r7, r0
   11a78:	b	11ab4 <__assert_fail@plt+0x9b4>
   11a7c:	mov	r0, r5
   11a80:	bl	10f8c <ferror_unlocked@plt>
   11a84:	cmp	r4, #30720	; 0x7800
   11a88:	bne	11b3c <__assert_fail@plt+0xa3c>
   11a8c:	cmp	r0, #0
   11a90:	mov	r4, #0
   11a94:	beq	11ab4 <__assert_fail@plt+0x9b4>
   11a98:	b	11b3c <__assert_fail@plt+0xa3c>
   11a9c:	mov	r0, r5
   11aa0:	bl	10f8c <ferror_unlocked@plt>
   11aa4:	cmp	r4, #30720	; 0x7800
   11aa8:	bge	11adc <__assert_fail@plt+0x9dc>
   11aac:	cmp	r0, #0
   11ab0:	bne	11adc <__assert_fail@plt+0x9dc>
   11ab4:	add	r0, r6, r4
   11ab8:	rsb	r2, r4, #30720	; 0x7800
   11abc:	mov	r1, #1
   11ac0:	mov	r3, r5
   11ac4:	bl	110d0 <fread_unlocked@plt>
   11ac8:	add	r4, r0, r4
   11acc:	mov	r0, r5
   11ad0:	bl	110f4 <feof_unlocked@plt>
   11ad4:	cmp	r0, #0
   11ad8:	beq	11a9c <__assert_fail@plt+0x99c>
   11adc:	cmp	r4, #1
   11ae0:	blt	11b2c <__assert_fail@plt+0xa2c>
   11ae4:	add	r0, r4, #4
   11ae8:	movw	r1, #26215	; 0x6667
   11aec:	movt	r1, #26214	; 0x6666
   11af0:	smmul	r0, r0, r1
   11af4:	lsr	r1, r0, #1
   11af8:	add	r0, r1, r0, lsr #31
   11afc:	lsl	r8, r0, #3
   11b00:	mov	r0, r6
   11b04:	mov	r1, r4
   11b08:	mov	r2, r7
   11b0c:	mov	r3, r8
   11b10:	bl	11d5c <__assert_fail@plt+0xc5c>
   11b14:	str	r9, [sp]
   11b18:	mov	r0, r7
   11b1c:	mov	r1, r8
   11b20:	mov	r2, sl
   11b24:	sub	r3, fp, #4
   11b28:	bl	11c50 <__assert_fail@plt+0xb50>
   11b2c:	mov	r0, r5
   11b30:	bl	110f4 <feof_unlocked@plt>
   11b34:	cmp	r0, #0
   11b38:	beq	11a7c <__assert_fail@plt+0x97c>
   11b3c:	cmp	sl, #0
   11b40:	beq	11b78 <__assert_fail@plt+0xa78>
   11b44:	ldr	r0, [fp, #-4]
   11b48:	cmp	r0, #1
   11b4c:	blt	11b78 <__assert_fail@plt+0xa78>
   11b50:	mov	r0, #10
   11b54:	mov	r1, r9
   11b58:	bl	10f20 <fputc_unlocked@plt>
   11b5c:	cmn	r0, #1
   11b60:	bne	11b78 <__assert_fail@plt+0xa78>
   11b64:	bl	1101c <__errno_location@plt>
   11b68:	ldr	r4, [r0]
   11b6c:	movw	r1, #25460	; 0x6374
   11b70:	movt	r1, #1
   11b74:	b	11ba4 <__assert_fail@plt+0xaa4>
   11b78:	mov	r0, r5
   11b7c:	bl	10f8c <ferror_unlocked@plt>
   11b80:	cmp	r0, #0
   11b84:	bne	11b94 <__assert_fail@plt+0xa94>
   11b88:	mov	r0, r5
   11b8c:	ldr	r1, [sp, #8]
   11b90:	bl	11bc0 <__assert_fail@plt+0xac0>
   11b94:	bl	1101c <__errno_location@plt>
   11b98:	ldr	r4, [r0]
   11b9c:	movw	r1, #25449	; 0x6369
   11ba0:	movt	r1, #1
   11ba4:	mov	r0, #0
   11ba8:	mov	r2, #5
   11bac:	bl	10f2c <dcgettext@plt>
   11bb0:	mov	r2, r0
   11bb4:	mov	r0, #1
   11bb8:	mov	r1, r4
   11bbc:	bl	10fa4 <error@plt>
   11bc0:	push	{fp, lr}
   11bc4:	mov	fp, sp
   11bc8:	mov	r5, r1
   11bcc:	bl	12860 <__assert_fail@plt+0x1760>
   11bd0:	cmp	r0, #0
   11bd4:	bne	11be0 <__assert_fail@plt+0xae0>
   11bd8:	mov	r0, #0
   11bdc:	bl	10ff8 <exit@plt>
   11be0:	movw	r1, #26033	; 0x65b1
   11be4:	movt	r1, #1
   11be8:	mov	r0, r5
   11bec:	bl	10ea8 <strcmp@plt>
   11bf0:	mov	r6, r0
   11bf4:	bl	1101c <__errno_location@plt>
   11bf8:	ldr	r4, [r0]
   11bfc:	cmp	r6, #0
   11c00:	bne	11c28 <__assert_fail@plt+0xb28>
   11c04:	movw	r1, #25486	; 0x638e
   11c08:	movt	r1, #1
   11c0c:	mov	r0, #0
   11c10:	mov	r2, #5
   11c14:	bl	10f2c <dcgettext@plt>
   11c18:	mov	r2, r0
   11c1c:	mov	r0, #1
   11c20:	mov	r1, r4
   11c24:	bl	10fa4 <error@plt>
   11c28:	mov	r0, #0
   11c2c:	mov	r1, #3
   11c30:	mov	r2, r5
   11c34:	bl	1417c <__assert_fail@plt+0x307c>
   11c38:	mov	r3, r0
   11c3c:	movw	r2, #24896	; 0x6140
   11c40:	movt	r2, #1
   11c44:	mov	r0, #1
   11c48:	mov	r1, r4
   11c4c:	bl	10fa4 <error@plt>
   11c50:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11c54:	add	fp, sp, #28
   11c58:	sub	sp, sp, #4
   11c5c:	mov	r4, r1
   11c60:	mov	r9, r0
   11c64:	cmp	r2, #0
   11c68:	beq	11d04 <__assert_fail@plt+0xc04>
   11c6c:	cmp	r4, #1
   11c70:	blt	11d28 <__assert_fail@plt+0xc28>
   11c74:	mov	r6, r3
   11c78:	mov	r7, r2
   11c7c:	movw	r8, #29012	; 0x7154
   11c80:	movt	r8, #2
   11c84:	mov	sl, #0
   11c88:	sub	r5, r4, sl
   11c8c:	ldr	r0, [r6]
   11c90:	sub	r0, r7, r0
   11c94:	cmp	r0, r5
   11c98:	movlt	r5, r0
   11c9c:	cmp	r5, #0
   11ca0:	beq	11cdc <__assert_fail@plt+0xbdc>
   11ca4:	add	r0, r9, sl
   11ca8:	ldr	r3, [r8]
   11cac:	mov	r1, #1
   11cb0:	mov	r2, r5
   11cb4:	bl	10f08 <fwrite_unlocked@plt>
   11cb8:	cmp	r0, r5
   11cbc:	bcc	11d30 <__assert_fail@plt+0xc30>
   11cc0:	ldr	r0, [r6]
   11cc4:	add	r0, r0, r5
   11cc8:	str	r0, [r6]
   11ccc:	add	sl, r5, sl
   11cd0:	cmp	sl, r4
   11cd4:	blt	11c88 <__assert_fail@plt+0xb88>
   11cd8:	b	11d28 <__assert_fail@plt+0xc28>
   11cdc:	mov	r0, #10
   11ce0:	ldr	r1, [fp, #8]
   11ce4:	bl	10f20 <fputc_unlocked@plt>
   11ce8:	cmn	r0, #1
   11cec:	beq	11d30 <__assert_fail@plt+0xc30>
   11cf0:	mov	r0, #0
   11cf4:	str	r0, [r6]
   11cf8:	cmp	sl, r4
   11cfc:	blt	11c88 <__assert_fail@plt+0xb88>
   11d00:	b	11d28 <__assert_fail@plt+0xc28>
   11d04:	movw	r0, #29012	; 0x7154
   11d08:	movt	r0, #2
   11d0c:	ldr	r3, [r0]
   11d10:	mov	r0, r9
   11d14:	mov	r1, #1
   11d18:	mov	r2, r4
   11d1c:	bl	10f08 <fwrite_unlocked@plt>
   11d20:	cmp	r0, r4
   11d24:	bcc	11d30 <__assert_fail@plt+0xc30>
   11d28:	sub	sp, fp, #28
   11d2c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11d30:	bl	1101c <__errno_location@plt>
   11d34:	ldr	r4, [r0]
   11d38:	movw	r1, #25460	; 0x6374
   11d3c:	movt	r1, #1
   11d40:	mov	r0, #0
   11d44:	mov	r2, #5
   11d48:	bl	10f2c <dcgettext@plt>
   11d4c:	mov	r2, r0
   11d50:	mov	r0, #1
   11d54:	mov	r1, r4
   11d58:	bl	10fa4 <error@plt>
   11d5c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11d60:	add	fp, sp, #28
   11d64:	sub	sp, sp, #36	; 0x24
   11d68:	str	r2, [sp, #32]
   11d6c:	cmp	r1, #0
   11d70:	cmpne	r3, #0
   11d74:	bne	11d94 <__assert_fail@plt+0xc94>
   11d78:	cmp	r3, #0
   11d7c:	beq	11d8c <__assert_fail@plt+0xc8c>
   11d80:	mov	r0, #0
   11d84:	ldr	r1, [sp, #32]
   11d88:	strb	r0, [r1]
   11d8c:	sub	sp, fp, #28
   11d90:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11d94:	mov	r6, r1
   11d98:	mov	r9, r0
   11d9c:	sub	r0, r3, #7
   11da0:	str	r0, [sp, #4]
   11da4:	sub	r0, r3, #6
   11da8:	str	r0, [sp, #8]
   11dac:	sub	r0, r3, #5
   11db0:	str	r0, [sp, #12]
   11db4:	sub	r0, r3, #4
   11db8:	str	r0, [sp, #16]
   11dbc:	sub	r0, r3, #3
   11dc0:	str	r0, [sp, #20]
   11dc4:	sub	r0, r3, #2
   11dc8:	str	r0, [sp, #24]
   11dcc:	sub	r0, r3, #1
   11dd0:	str	r0, [sp, #28]
   11dd4:	sub	r0, r3, #8
   11dd8:	str	r0, [sp]
   11ddc:	mov	r7, #0
   11de0:	movw	r8, #25679	; 0x644f
   11de4:	movt	r8, #1
   11de8:	ldrb	r0, [r9]
   11dec:	bl	12008 <__assert_fail@plt+0xf08>
   11df0:	ldrb	r0, [r8, r0, lsr #3]
   11df4:	ldr	r4, [sp, #32]
   11df8:	strb	r0, [r4, r7]!
   11dfc:	ldr	r0, [sp, #28]
   11e00:	cmp	r0, r7
   11e04:	beq	11d8c <__assert_fail@plt+0xc8c>
   11e08:	ldrb	r0, [r9]
   11e0c:	bl	12008 <__assert_fail@plt+0xf08>
   11e10:	lsl	r5, r0, #2
   11e14:	mov	r0, #0
   11e18:	cmp	r6, #1
   11e1c:	beq	11e2c <__assert_fail@plt+0xd2c>
   11e20:	ldrb	r0, [r9, #1]
   11e24:	bl	12008 <__assert_fail@plt+0xf08>
   11e28:	lsr	r0, r0, #6
   11e2c:	add	r0, r0, r5
   11e30:	and	r0, r0, #31
   11e34:	ldrb	r0, [r8, r0]
   11e38:	strb	r0, [r4, #1]
   11e3c:	ldr	r0, [sp, #24]
   11e40:	cmp	r0, r7
   11e44:	beq	11d8c <__assert_fail@plt+0xc8c>
   11e48:	mov	r0, #61	; 0x3d
   11e4c:	cmp	r6, #1
   11e50:	beq	11e64 <__assert_fail@plt+0xd64>
   11e54:	ldrb	r0, [r9, #1]
   11e58:	bl	12008 <__assert_fail@plt+0xf08>
   11e5c:	ubfx	r0, r0, #1, #5
   11e60:	ldrb	r0, [r8, r0]
   11e64:	strb	r0, [r4, #2]
   11e68:	ldr	r0, [sp, #20]
   11e6c:	cmp	r0, r7
   11e70:	beq	11d8c <__assert_fail@plt+0xc8c>
   11e74:	cmp	r6, #1
   11e78:	beq	11ea0 <__assert_fail@plt+0xda0>
   11e7c:	ldrb	r0, [r9, #1]
   11e80:	bl	12008 <__assert_fail@plt+0xf08>
   11e84:	subs	r6, r6, #2
   11e88:	lsl	r5, r0, #4
   11e8c:	beq	11eac <__assert_fail@plt+0xdac>
   11e90:	ldrb	r0, [r9, #2]
   11e94:	bl	12008 <__assert_fail@plt+0xf08>
   11e98:	lsr	r0, r0, #4
   11e9c:	b	11eb0 <__assert_fail@plt+0xdb0>
   11ea0:	mov	r0, #61	; 0x3d
   11ea4:	mov	r6, #0
   11ea8:	b	11ebc <__assert_fail@plt+0xdbc>
   11eac:	mov	r0, #0
   11eb0:	add	r0, r0, r5
   11eb4:	and	r0, r0, #31
   11eb8:	ldrb	r0, [r8, r0]
   11ebc:	strb	r0, [r4, #3]
   11ec0:	ldr	r0, [sp, #16]
   11ec4:	cmp	r0, r7
   11ec8:	beq	11d8c <__assert_fail@plt+0xc8c>
   11ecc:	cmp	r6, #0
   11ed0:	beq	11ef8 <__assert_fail@plt+0xdf8>
   11ed4:	ldrb	r0, [r9, #2]
   11ed8:	bl	12008 <__assert_fail@plt+0xf08>
   11edc:	subs	r6, r6, #1
   11ee0:	lsl	r5, r0, #1
   11ee4:	beq	11f04 <__assert_fail@plt+0xe04>
   11ee8:	ldrb	r0, [r9, #3]
   11eec:	bl	12008 <__assert_fail@plt+0xf08>
   11ef0:	lsr	r0, r0, #7
   11ef4:	b	11f08 <__assert_fail@plt+0xe08>
   11ef8:	mov	r0, #61	; 0x3d
   11efc:	mov	r6, #0
   11f00:	b	11f14 <__assert_fail@plt+0xe14>
   11f04:	mov	r0, #0
   11f08:	add	r0, r0, r5
   11f0c:	and	r0, r0, #31
   11f10:	ldrb	r0, [r8, r0]
   11f14:	strb	r0, [r4, #4]
   11f18:	ldr	r0, [sp, #12]
   11f1c:	cmp	r0, r7
   11f20:	beq	11d8c <__assert_fail@plt+0xc8c>
   11f24:	cmp	r6, #0
   11f28:	beq	11f40 <__assert_fail@plt+0xe40>
   11f2c:	ldrb	r0, [r9, #3]
   11f30:	bl	12008 <__assert_fail@plt+0xf08>
   11f34:	ubfx	r0, r0, #2, #5
   11f38:	ldrb	r0, [r8, r0]
   11f3c:	b	11f44 <__assert_fail@plt+0xe44>
   11f40:	mov	r0, #61	; 0x3d
   11f44:	strb	r0, [r4, #5]
   11f48:	ldr	r0, [sp, #8]
   11f4c:	cmp	r0, r7
   11f50:	beq	11d8c <__assert_fail@plt+0xc8c>
   11f54:	cmp	r6, #0
   11f58:	beq	11f80 <__assert_fail@plt+0xe80>
   11f5c:	ldrb	r0, [r9, #3]
   11f60:	bl	12008 <__assert_fail@plt+0xf08>
   11f64:	subs	sl, r6, #1
   11f68:	lsl	r5, r0, #3
   11f6c:	beq	11f8c <__assert_fail@plt+0xe8c>
   11f70:	ldrb	r0, [r9, #4]
   11f74:	bl	12008 <__assert_fail@plt+0xf08>
   11f78:	lsr	r0, r0, #5
   11f7c:	b	11f90 <__assert_fail@plt+0xe90>
   11f80:	mov	r0, #61	; 0x3d
   11f84:	mov	sl, #0
   11f88:	b	11f9c <__assert_fail@plt+0xe9c>
   11f8c:	mov	r0, #0
   11f90:	add	r0, r0, r5
   11f94:	and	r0, r0, #31
   11f98:	ldrb	r0, [r8, r0]
   11f9c:	strb	r0, [r4, #6]
   11fa0:	ldr	r0, [sp, #4]
   11fa4:	cmp	r0, r7
   11fa8:	beq	11d8c <__assert_fail@plt+0xc8c>
   11fac:	cmp	sl, #0
   11fb0:	beq	11fc8 <__assert_fail@plt+0xec8>
   11fb4:	ldrb	r0, [r9, #4]
   11fb8:	bl	12008 <__assert_fail@plt+0xf08>
   11fbc:	and	r0, r0, #31
   11fc0:	ldrb	r0, [r8, r0]
   11fc4:	b	11fcc <__assert_fail@plt+0xecc>
   11fc8:	mov	r0, #61	; 0x3d
   11fcc:	strb	r0, [r4, #7]
   11fd0:	ldr	r0, [sp]
   11fd4:	cmp	r0, r7
   11fd8:	beq	11d8c <__assert_fail@plt+0xc8c>
   11fdc:	sub	r6, sl, #1
   11fe0:	cmp	sl, #0
   11fe4:	movne	sl, r6
   11fe8:	cmp	sl, #0
   11fec:	addne	r9, r9, #5
   11ff0:	add	r7, r7, #8
   11ff4:	bne	11de8 <__assert_fail@plt+0xce8>
   11ff8:	ldr	r0, [sp, #32]
   11ffc:	add	r0, r0, r7
   12000:	str	r0, [sp, #32]
   12004:	b	11d80 <__assert_fail@plt+0xc80>
   12008:	bx	lr
   1200c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   12010:	add	fp, sp, #24
   12014:	mov	r6, r2
   12018:	mov	r4, r1
   1201c:	mov	r8, r0
   12020:	movw	r0, #26215	; 0x6667
   12024:	movt	r0, #26214	; 0x6666
   12028:	smmul	r0, r1, r0
   1202c:	asr	r1, r0, #1
   12030:	add	r0, r1, r0, lsr #31
   12034:	add	r1, r0, r0, lsl #2
   12038:	subs	r1, r4, r1
   1203c:	addne	r0, r0, #1
   12040:	cmn	r0, #1
   12044:	ble	12054 <__assert_fail@plt+0xf54>
   12048:	cmn	r0, #-268435455	; 0xf0000001
   1204c:	ble	12068 <__assert_fail@plt+0xf68>
   12050:	b	120ac <__assert_fail@plt+0xfac>
   12054:	beq	12068 <__assert_fail@plt+0xf68>
   12058:	mov	r1, #-2147483648	; 0x80000000
   1205c:	sdiv	r1, r1, r0
   12060:	cmp	r1, #8
   12064:	blt	120ac <__assert_fail@plt+0xfac>
   12068:	cmn	r4, #1
   1206c:	ble	120ac <__assert_fail@plt+0xfac>
   12070:	lsl	r7, r0, #3
   12074:	orr	r5, r7, #1
   12078:	mov	r0, r5
   1207c:	bl	12a50 <__assert_fail@plt+0x1950>
   12080:	str	r0, [r6]
   12084:	cmp	r0, #0
   12088:	moveq	r0, r5
   1208c:	popeq	{r4, r5, r6, r7, r8, sl, fp, pc}
   12090:	mov	r2, r0
   12094:	mov	r0, r8
   12098:	mov	r1, r4
   1209c:	mov	r3, r5
   120a0:	bl	11d5c <__assert_fail@plt+0xc5c>
   120a4:	mov	r0, r7
   120a8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   120ac:	mov	r7, #0
   120b0:	str	r7, [r6]
   120b4:	mov	r0, r7
   120b8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   120bc:	push	{fp, lr}
   120c0:	mov	fp, sp
   120c4:	bl	12008 <__assert_fail@plt+0xf08>
   120c8:	movw	r1, #25711	; 0x646f
   120cc:	movt	r1, #1
   120d0:	add	r0, r1, r0
   120d4:	ldrsb	r1, [r0]
   120d8:	mov	r0, #0
   120dc:	cmn	r1, #1
   120e0:	movwgt	r0, #1
   120e4:	pop	{fp, pc}
   120e8:	mov	r1, #0
   120ec:	str	r1, [r0]
   120f0:	bx	lr
   120f4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   120f8:	add	fp, sp, #28
   120fc:	sub	sp, sp, #28
   12100:	mov	r9, r0
   12104:	str	r2, [sp, #20]
   12108:	str	r1, [sp, #24]
   1210c:	str	r3, [sp, #16]
   12110:	ldr	r0, [fp, #8]
   12114:	ldr	r0, [r0]
   12118:	str	r0, [sp, #12]
   1211c:	mov	r0, #0
   12120:	cmp	r9, #0
   12124:	mov	r4, #0
   12128:	beq	12140 <__assert_fail@plt+0x1040>
   1212c:	clz	r0, r2
   12130:	lsr	r4, r0, #5
   12134:	ldr	r0, [r9]
   12138:	cmp	r0, #0
   1213c:	movwne	r0, #1
   12140:	orr	r8, r0, r4
   12144:	clz	r0, r9
   12148:	lsr	r0, r0, #5
   1214c:	str	r0, [sp, #8]
   12150:	add	r7, sp, #16
   12154:	add	r5, sp, #12
   12158:	str	r4, [sp, #4]
   1215c:	b	1216c <__assert_fail@plt+0x106c>
   12160:	ldr	r0, [sp, #24]
   12164:	sub	r0, r6, r0
   12168:	str	r0, [sp, #20]
   1216c:	ldr	sl, [sp, #12]
   12170:	cmp	r8, #0
   12174:	beq	12180 <__assert_fail@plt+0x1080>
   12178:	ldr	r6, [sp, #20]
   1217c:	b	121d8 <__assert_fail@plt+0x10d8>
   12180:	ldr	r6, [sp, #20]
   12184:	ldr	r4, [sp, #24]
   12188:	mov	r0, r4
   1218c:	mov	r1, r6
   12190:	mov	r2, r7
   12194:	mov	r3, r5
   12198:	bl	122d8 <__assert_fail@plt+0x11d8>
   1219c:	cmp	r0, #0
   121a0:	beq	121d4 <__assert_fail@plt+0x10d4>
   121a4:	ldr	sl, [sp, #12]
   121a8:	add	r4, r4, #8
   121ac:	sub	r6, r6, #8
   121b0:	mov	r0, r4
   121b4:	mov	r1, r6
   121b8:	mov	r2, r7
   121bc:	mov	r3, r5
   121c0:	bl	122d8 <__assert_fail@plt+0x11d8>
   121c4:	cmp	r0, #0
   121c8:	bne	121a4 <__assert_fail@plt+0x10a4>
   121cc:	str	r6, [sp, #20]
   121d0:	str	r4, [sp, #24]
   121d4:	ldr	r4, [sp, #4]
   121d8:	cmp	r6, #0
   121dc:	mov	r0, r6
   121e0:	movwne	r0, #1
   121e4:	orr	r0, r4, r0
   121e8:	cmp	r0, #1
   121ec:	bne	122ac <__assert_fail@plt+0x11ac>
   121f0:	cmp	r6, #0
   121f4:	beq	12214 <__assert_fail@plt+0x1114>
   121f8:	ldr	r0, [sp, #24]
   121fc:	ldrb	r1, [r0]
   12200:	subs	r1, r1, #10
   12204:	movwne	r1, #1
   12208:	ldr	r2, [sp, #8]
   1220c:	orrs	r1, r1, r2
   12210:	beq	12290 <__assert_fail@plt+0x1190>
   12214:	ldr	r0, [sp, #12]
   12218:	str	sl, [sp, #12]
   1221c:	sub	r0, r0, sl
   12220:	ldr	r1, [sp, #16]
   12224:	add	r0, r1, r0
   12228:	str	r0, [sp, #16]
   1222c:	ldr	r0, [sp, #24]
   12230:	add	r6, r0, r6
   12234:	cmp	r9, #0
   12238:	beq	12250 <__assert_fail@plt+0x1150>
   1223c:	mov	r0, r9
   12240:	add	r1, sp, #24
   12244:	mov	r2, r6
   12248:	add	r3, sp, #20
   1224c:	bl	125c0 <__assert_fail@plt+0x14c0>
   12250:	ldr	r1, [sp, #20]
   12254:	cmp	r1, #0
   12258:	beq	122a4 <__assert_fail@plt+0x11a4>
   1225c:	cmp	r1, #7
   12260:	mov	r2, #0
   12264:	movwgt	r2, #1
   12268:	orr	r2, r4, r2
   1226c:	ldr	r3, [sp, #8]
   12270:	orrs	r2, r2, r3
   12274:	beq	122a4 <__assert_fail@plt+0x11a4>
   12278:	mov	r2, r7
   1227c:	mov	r3, r5
   12280:	bl	122d8 <__assert_fail@plt+0x11d8>
   12284:	cmp	r0, #0
   12288:	bne	12160 <__assert_fail@plt+0x1060>
   1228c:	b	122ac <__assert_fail@plt+0x11ac>
   12290:	add	r0, r0, #1
   12294:	str	r0, [sp, #24]
   12298:	sub	r0, r6, #1
   1229c:	str	r0, [sp, #20]
   122a0:	b	1216c <__assert_fail@plt+0x106c>
   122a4:	mov	r0, #0
   122a8:	str	r0, [sp, #20]
   122ac:	ldr	r0, [fp, #8]
   122b0:	mov	r2, r0
   122b4:	ldr	r0, [r0]
   122b8:	ldr	r1, [sp, #12]
   122bc:	sub	r0, r0, r1
   122c0:	str	r0, [r2]
   122c4:	ldr	r0, [sp, #20]
   122c8:	clz	r0, r0
   122cc:	lsr	r0, r0, #5
   122d0:	sub	sp, fp, #28
   122d4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   122d8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   122dc:	add	fp, sp, #28
   122e0:	sub	sp, sp, #4
   122e4:	mov	r5, #0
   122e8:	cmp	r1, #8
   122ec:	blt	12434 <__assert_fail@plt+0x1334>
   122f0:	mov	sl, r3
   122f4:	mov	r8, r2
   122f8:	mov	r6, r0
   122fc:	ldr	r9, [r2]
   12300:	ldrb	r7, [r0]
   12304:	mov	r0, r7
   12308:	bl	120bc <__assert_fail@plt+0xfbc>
   1230c:	cmp	r0, #0
   12310:	beq	12434 <__assert_fail@plt+0x1334>
   12314:	ldrb	r4, [r6, #1]
   12318:	mov	r0, r4
   1231c:	bl	120bc <__assert_fail@plt+0xfbc>
   12320:	cmp	r0, #0
   12324:	beq	12434 <__assert_fail@plt+0x1334>
   12328:	ldr	r0, [sl]
   1232c:	cmp	r0, #0
   12330:	beq	12370 <__assert_fail@plt+0x1270>
   12334:	mov	r0, r7
   12338:	bl	12008 <__assert_fail@plt+0xf08>
   1233c:	mov	r0, r4
   12340:	bl	12008 <__assert_fail@plt+0xf08>
   12344:	movw	r0, #25711	; 0x646f
   12348:	movt	r0, #1
   1234c:	ldrb	r1, [r0, r7]
   12350:	add	r0, r0, r4
   12354:	ldrsb	r0, [r0]
   12358:	lsr	r0, r0, #2
   1235c:	orr	r0, r0, r1, lsl #3
   12360:	strb	r0, [r9], #1
   12364:	ldr	r0, [sl]
   12368:	sub	r0, r0, #1
   1236c:	str	r0, [sl]
   12370:	ldrb	r7, [r6, #2]
   12374:	cmp	r7, #61	; 0x3d
   12378:	bne	12394 <__assert_fail@plt+0x1294>
   1237c:	ldrb	r0, [r6, #3]
   12380:	cmp	r0, #61	; 0x3d
   12384:	ldrbeq	r0, [r6, #4]
   12388:	cmpeq	r0, #61	; 0x3d
   1238c:	bne	12430 <__assert_fail@plt+0x1330>
   12390:	b	1241c <__assert_fail@plt+0x131c>
   12394:	mov	r0, r7
   12398:	bl	120bc <__assert_fail@plt+0xfbc>
   1239c:	cmp	r0, #0
   123a0:	beq	12430 <__assert_fail@plt+0x1330>
   123a4:	ldrb	r0, [r6, #3]
   123a8:	str	r0, [sp]
   123ac:	bl	120bc <__assert_fail@plt+0xfbc>
   123b0:	cmp	r0, #0
   123b4:	beq	12430 <__assert_fail@plt+0x1330>
   123b8:	ldr	r0, [sl]
   123bc:	cmp	r0, #0
   123c0:	beq	12410 <__assert_fail@plt+0x1310>
   123c4:	mov	r0, r4
   123c8:	bl	12008 <__assert_fail@plt+0xf08>
   123cc:	mov	r0, r7
   123d0:	bl	12008 <__assert_fail@plt+0xf08>
   123d4:	ldr	r0, [sp]
   123d8:	bl	12008 <__assert_fail@plt+0xf08>
   123dc:	movw	r3, #25711	; 0x646f
   123e0:	movt	r3, #1
   123e4:	ldrb	r1, [r3, r4]
   123e8:	ldrb	r2, [r3, r7]
   123ec:	lsl	r2, r2, #1
   123f0:	orr	r1, r2, r1, lsl #6
   123f4:	add	r0, r3, r0
   123f8:	ldrsb	r0, [r0]
   123fc:	orr	r0, r1, r0, lsr #4
   12400:	strb	r0, [r9], #1
   12404:	ldr	r0, [sl]
   12408:	sub	r0, r0, #1
   1240c:	str	r0, [sl]
   12410:	ldrb	r4, [r6, #4]
   12414:	cmp	r4, #61	; 0x3d
   12418:	bne	12440 <__assert_fail@plt+0x1340>
   1241c:	ldrb	r0, [r6, #5]
   12420:	cmp	r0, #61	; 0x3d
   12424:	ldrbeq	r0, [r6, #6]
   12428:	cmpeq	r0, #61	; 0x3d
   1242c:	beq	124c0 <__assert_fail@plt+0x13c0>
   12430:	str	r9, [r8]
   12434:	mov	r0, r5
   12438:	sub	sp, fp, #28
   1243c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12440:	mov	r0, r4
   12444:	bl	120bc <__assert_fail@plt+0xfbc>
   12448:	cmp	r0, #0
   1244c:	beq	12430 <__assert_fail@plt+0x1330>
   12450:	ldr	r0, [sl]
   12454:	cmp	r0, #0
   12458:	beq	1249c <__assert_fail@plt+0x139c>
   1245c:	ldr	r7, [sp]
   12460:	mov	r0, r7
   12464:	bl	12008 <__assert_fail@plt+0xf08>
   12468:	mov	r0, r4
   1246c:	bl	12008 <__assert_fail@plt+0xf08>
   12470:	movw	r0, #25711	; 0x646f
   12474:	movt	r0, #1
   12478:	ldrb	r1, [r0, r7]
   1247c:	add	r0, r0, r4
   12480:	ldrsb	r0, [r0]
   12484:	lsr	r0, r0, #1
   12488:	orr	r0, r0, r1, lsl #4
   1248c:	strb	r0, [r9], #1
   12490:	ldr	r0, [sl]
   12494:	sub	r0, r0, #1
   12498:	str	r0, [sl]
   1249c:	ldrb	r4, [r6, #5]
   124a0:	cmp	r4, #61	; 0x3d
   124a4:	bne	124d8 <__assert_fail@plt+0x13d8>
   124a8:	ldrb	r0, [r6, #6]
   124ac:	cmp	r0, #61	; 0x3d
   124b0:	ldrbeq	r0, [r6, #7]
   124b4:	cmpeq	r0, #61	; 0x3d
   124b8:	bne	12430 <__assert_fail@plt+0x1330>
   124bc:	b	124cc <__assert_fail@plt+0x13cc>
   124c0:	ldrb	r0, [r6, #7]
   124c4:	cmp	r0, #61	; 0x3d
   124c8:	bne	12430 <__assert_fail@plt+0x1330>
   124cc:	str	r9, [r8]
   124d0:	mov	r5, #1
   124d4:	b	12434 <__assert_fail@plt+0x1334>
   124d8:	mov	r0, r4
   124dc:	bl	120bc <__assert_fail@plt+0xfbc>
   124e0:	cmp	r0, #0
   124e4:	beq	12430 <__assert_fail@plt+0x1330>
   124e8:	ldrb	r7, [r6, #6]
   124ec:	mov	r0, r7
   124f0:	bl	120bc <__assert_fail@plt+0xfbc>
   124f4:	cmp	r0, #0
   124f8:	beq	12430 <__assert_fail@plt+0x1330>
   124fc:	ldr	r0, [sl]
   12500:	cmp	r0, #0
   12504:	beq	1255c <__assert_fail@plt+0x145c>
   12508:	ldrb	r0, [r6, #4]
   1250c:	str	r0, [sp]
   12510:	bl	12008 <__assert_fail@plt+0xf08>
   12514:	mov	r0, r4
   12518:	bl	12008 <__assert_fail@plt+0xf08>
   1251c:	mov	r0, r7
   12520:	bl	12008 <__assert_fail@plt+0xf08>
   12524:	movw	r0, #25711	; 0x646f
   12528:	movt	r0, #1
   1252c:	ldr	r1, [sp]
   12530:	ldrb	r1, [r0, r1]
   12534:	ldrb	r2, [r0, r4]
   12538:	lsl	r2, r2, #2
   1253c:	orr	r1, r2, r1, lsl #7
   12540:	add	r0, r0, r7
   12544:	ldrsb	r0, [r0]
   12548:	orr	r0, r1, r0, lsr #3
   1254c:	strb	r0, [r9], #1
   12550:	ldr	r0, [sl]
   12554:	sub	r0, r0, #1
   12558:	str	r0, [sl]
   1255c:	ldrb	r4, [r6, #7]
   12560:	cmp	r4, #61	; 0x3d
   12564:	beq	124cc <__assert_fail@plt+0x13cc>
   12568:	mov	r0, r4
   1256c:	bl	120bc <__assert_fail@plt+0xfbc>
   12570:	cmp	r0, #0
   12574:	beq	12430 <__assert_fail@plt+0x1330>
   12578:	ldr	r0, [sl]
   1257c:	cmp	r0, #0
   12580:	beq	124cc <__assert_fail@plt+0x13cc>
   12584:	ldrb	r5, [r6, #6]
   12588:	mov	r0, r5
   1258c:	bl	12008 <__assert_fail@plt+0xf08>
   12590:	mov	r0, r4
   12594:	bl	12008 <__assert_fail@plt+0xf08>
   12598:	movw	r0, #25711	; 0x646f
   1259c:	movt	r0, #1
   125a0:	ldrb	r1, [r0, r4]
   125a4:	ldrb	r0, [r0, r5]
   125a8:	orr	r0, r1, r0, lsl #5
   125ac:	strb	r0, [r9], #1
   125b0:	ldr	r0, [sl]
   125b4:	sub	r0, r0, #1
   125b8:	str	r0, [sl]
   125bc:	b	124cc <__assert_fail@plt+0x13cc>
   125c0:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   125c4:	add	fp, sp, #24
   125c8:	mov	r8, r3
   125cc:	mov	r7, r2
   125d0:	mov	r6, r1
   125d4:	mov	r4, r0
   125d8:	ldr	r0, [r0]
   125dc:	cmp	r0, #0
   125e0:	beq	125f4 <__assert_fail@plt+0x14f4>
   125e4:	cmp	r0, #8
   125e8:	bne	12620 <__assert_fail@plt+0x1520>
   125ec:	mov	r0, #0
   125f0:	str	r0, [r4]
   125f4:	ldr	r5, [r6]
   125f8:	sub	r0, r7, r5
   125fc:	cmp	r0, #8
   12600:	blt	12620 <__assert_fail@plt+0x1520>
   12604:	mov	r9, #8
   12608:	mov	r0, r5
   1260c:	mov	r1, #10
   12610:	mov	r2, #8
   12614:	bl	11064 <memchr@plt>
   12618:	cmp	r0, #0
   1261c:	beq	12670 <__assert_fail@plt+0x1570>
   12620:	ldr	r0, [r6]
   12624:	cmp	r0, r7
   12628:	bcs	1265c <__assert_fail@plt+0x155c>
   1262c:	add	r0, r0, #1
   12630:	ldrb	r1, [r0, #-1]
   12634:	cmp	r1, #10
   12638:	beq	12624 <__assert_fail@plt+0x1524>
   1263c:	ldr	r2, [r4]
   12640:	add	r3, r2, #1
   12644:	mov	r5, r4
   12648:	str	r3, [r5], r2
   1264c:	strb	r1, [r5, #4]
   12650:	ldr	r1, [r4]
   12654:	cmp	r1, #8
   12658:	bne	12624 <__assert_fail@plt+0x1524>
   1265c:	str	r0, [r6]
   12660:	ldr	r0, [r4], #4
   12664:	str	r0, [r8]
   12668:	mov	r0, r4
   1266c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   12670:	add	r0, r5, #8
   12674:	str	r0, [r6]
   12678:	str	r9, [r8]
   1267c:	mov	r0, r5
   12680:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   12684:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   12688:	add	fp, sp, #24
   1268c:	sub	sp, sp, #8
   12690:	mov	r4, r3
   12694:	mov	r6, r2
   12698:	mov	r8, r1
   1269c:	mov	r7, r0
   126a0:	asr	r0, r2, #3
   126a4:	add	r0, r0, r0, lsl #2
   126a8:	add	r0, r0, #5
   126ac:	str	r0, [sp, #4]
   126b0:	bl	12a50 <__assert_fail@plt+0x1950>
   126b4:	str	r0, [r4]
   126b8:	mov	r5, #1
   126bc:	cmp	r0, #0
   126c0:	beq	1270c <__assert_fail@plt+0x160c>
   126c4:	mov	r3, r0
   126c8:	add	r0, sp, #4
   126cc:	str	r0, [sp]
   126d0:	mov	r0, r7
   126d4:	mov	r1, r8
   126d8:	mov	r2, r6
   126dc:	bl	120f4 <__assert_fail@plt+0xff4>
   126e0:	cmp	r0, #0
   126e4:	beq	126fc <__assert_fail@plt+0x15fc>
   126e8:	ldr	r0, [fp, #8]
   126ec:	cmp	r0, #0
   126f0:	ldrne	r1, [sp, #4]
   126f4:	strne	r1, [r0]
   126f8:	b	1270c <__assert_fail@plt+0x160c>
   126fc:	ldr	r0, [r4]
   12700:	bl	12968 <__assert_fail@plt+0x1868>
   12704:	mov	r5, #0
   12708:	str	r5, [r4]
   1270c:	mov	r0, r5
   12710:	sub	sp, fp, #24
   12714:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   12718:	movw	r1, #29024	; 0x7160
   1271c:	movt	r1, #2
   12720:	str	r0, [r1]
   12724:	bx	lr
   12728:	movw	r1, #29028	; 0x7164
   1272c:	movt	r1, #2
   12730:	strb	r0, [r1]
   12734:	bx	lr
   12738:	push	{r4, r5, r6, sl, fp, lr}
   1273c:	add	fp, sp, #16
   12740:	sub	sp, sp, #8
   12744:	movw	r0, #29012	; 0x7154
   12748:	movt	r0, #2
   1274c:	ldr	r0, [r0]
   12750:	bl	15968 <__assert_fail@plt+0x4868>
   12754:	cmp	r0, #0
   12758:	beq	12780 <__assert_fail@plt+0x1680>
   1275c:	movw	r0, #29028	; 0x7164
   12760:	movt	r0, #2
   12764:	ldrb	r0, [r0]
   12768:	cmp	r0, #0
   1276c:	beq	127a0 <__assert_fail@plt+0x16a0>
   12770:	bl	1101c <__errno_location@plt>
   12774:	ldr	r0, [r0]
   12778:	cmp	r0, #32
   1277c:	bne	127a0 <__assert_fail@plt+0x16a0>
   12780:	movw	r0, #29000	; 0x7148
   12784:	movt	r0, #2
   12788:	ldr	r0, [r0]
   1278c:	bl	15968 <__assert_fail@plt+0x4868>
   12790:	cmp	r0, #0
   12794:	subeq	sp, fp, #16
   12798:	popeq	{r4, r5, r6, sl, fp, pc}
   1279c:	b	12810 <__assert_fail@plt+0x1710>
   127a0:	movw	r1, #25460	; 0x6374
   127a4:	movt	r1, #1
   127a8:	mov	r0, #0
   127ac:	mov	r2, #5
   127b0:	bl	10f2c <dcgettext@plt>
   127b4:	mov	r4, r0
   127b8:	movw	r0, #29024	; 0x7160
   127bc:	movt	r0, #2
   127c0:	ldr	r6, [r0]
   127c4:	bl	1101c <__errno_location@plt>
   127c8:	ldr	r5, [r0]
   127cc:	cmp	r6, #0
   127d0:	bne	127ec <__assert_fail@plt+0x16ec>
   127d4:	movw	r2, #24896	; 0x6140
   127d8:	movt	r2, #1
   127dc:	mov	r0, #0
   127e0:	mov	r1, r5
   127e4:	mov	r3, r4
   127e8:	b	1280c <__assert_fail@plt+0x170c>
   127ec:	mov	r0, r6
   127f0:	bl	1416c <__assert_fail@plt+0x306c>
   127f4:	mov	r3, r0
   127f8:	str	r4, [sp]
   127fc:	movw	r2, #24892	; 0x613c
   12800:	movt	r2, #1
   12804:	mov	r0, #0
   12808:	mov	r1, r5
   1280c:	bl	10fa4 <error@plt>
   12810:	movw	r0, #28916	; 0x70f4
   12814:	movt	r0, #2
   12818:	ldr	r0, [r0]
   1281c:	bl	10ee4 <_exit@plt>
   12820:	b	10eb4 <posix_fadvise64@plt>
   12824:	cmp	r0, #0
   12828:	bxeq	lr
   1282c:	push	{r4, sl, fp, lr}
   12830:	add	fp, sp, #8
   12834:	sub	sp, sp, #16
   12838:	mov	r4, r1
   1283c:	bl	1104c <fileno@plt>
   12840:	mov	r1, #0
   12844:	str	r1, [sp]
   12848:	stmib	sp, {r1, r4}
   1284c:	mov	r2, #0
   12850:	mov	r3, #0
   12854:	bl	12820 <__assert_fail@plt+0x1720>
   12858:	sub	sp, fp, #8
   1285c:	pop	{r4, sl, fp, pc}
   12860:	push	{r4, r5, fp, lr}
   12864:	add	fp, sp, #8
   12868:	sub	sp, sp, #8
   1286c:	mov	r4, r0
   12870:	bl	1104c <fileno@plt>
   12874:	cmn	r0, #1
   12878:	ble	128f0 <__assert_fail@plt+0x17f0>
   1287c:	mov	r0, r4
   12880:	bl	10fc8 <__freading@plt>
   12884:	cmp	r0, #0
   12888:	beq	128b4 <__assert_fail@plt+0x17b4>
   1288c:	mov	r0, r4
   12890:	bl	1104c <fileno@plt>
   12894:	mov	r1, #1
   12898:	str	r1, [sp]
   1289c:	mov	r2, #0
   128a0:	mov	r3, #0
   128a4:	bl	10f68 <lseek64@plt>
   128a8:	and	r0, r0, r1
   128ac:	cmn	r0, #1
   128b0:	beq	128f0 <__assert_fail@plt+0x17f0>
   128b4:	mov	r0, r4
   128b8:	bl	12900 <__assert_fail@plt+0x1800>
   128bc:	cmp	r0, #0
   128c0:	beq	128f0 <__assert_fail@plt+0x17f0>
   128c4:	bl	1101c <__errno_location@plt>
   128c8:	ldr	r5, [r0]
   128cc:	mov	r0, r4
   128d0:	bl	1107c <fclose@plt>
   128d4:	cmp	r5, #0
   128d8:	beq	128e8 <__assert_fail@plt+0x17e8>
   128dc:	bl	1101c <__errno_location@plt>
   128e0:	str	r5, [r0]
   128e4:	mvn	r0, #0
   128e8:	sub	sp, fp, #8
   128ec:	pop	{r4, r5, fp, pc}
   128f0:	mov	r0, r4
   128f4:	sub	sp, fp, #8
   128f8:	pop	{r4, r5, fp, lr}
   128fc:	b	1107c <fclose@plt>
   12900:	push	{r4, sl, fp, lr}
   12904:	add	fp, sp, #8
   12908:	mov	r4, r0
   1290c:	cmp	r0, #0
   12910:	beq	12928 <__assert_fail@plt+0x1828>
   12914:	mov	r0, r4
   12918:	bl	10fc8 <__freading@plt>
   1291c:	cmp	r0, #0
   12920:	movne	r0, r4
   12924:	blne	12934 <__assert_fail@plt+0x1834>
   12928:	mov	r0, r4
   1292c:	pop	{r4, sl, fp, lr}
   12930:	b	10ec0 <fflush@plt>
   12934:	ldrb	r1, [r0, #1]
   12938:	tst	r1, #1
   1293c:	bxeq	lr
   12940:	push	{fp, lr}
   12944:	mov	fp, sp
   12948:	sub	sp, sp, #8
   1294c:	mov	r1, #1
   12950:	str	r1, [sp]
   12954:	mov	r2, #0
   12958:	mov	r3, #0
   1295c:	bl	12990 <__assert_fail@plt+0x1890>
   12960:	mov	sp, fp
   12964:	pop	{fp, pc}
   12968:	push	{r4, r5, r6, sl, fp, lr}
   1296c:	add	fp, sp, #16
   12970:	mov	r4, r0
   12974:	bl	1101c <__errno_location@plt>
   12978:	mov	r5, r0
   1297c:	ldr	r6, [r0]
   12980:	mov	r0, r4
   12984:	bl	10ed8 <free@plt>
   12988:	str	r6, [r5]
   1298c:	pop	{r4, r5, r6, sl, fp, pc}
   12990:	push	{r4, r5, r6, r7, fp, lr}
   12994:	add	fp, sp, #16
   12998:	sub	sp, sp, #8
   1299c:	mov	r5, r3
   129a0:	mov	r6, r2
   129a4:	mov	r4, r0
   129a8:	ldr	r0, [r0, #4]
   129ac:	ldr	r1, [r4, #8]
   129b0:	cmp	r1, r0
   129b4:	bne	129d0 <__assert_fail@plt+0x18d0>
   129b8:	ldrd	r0, [r4, #16]
   129bc:	cmp	r1, r0
   129c0:	bne	129d0 <__assert_fail@plt+0x18d0>
   129c4:	ldr	r0, [r4, #36]	; 0x24
   129c8:	cmp	r0, #0
   129cc:	beq	129e8 <__assert_fail@plt+0x18e8>
   129d0:	mov	r0, r4
   129d4:	mov	r2, r6
   129d8:	mov	r3, r5
   129dc:	sub	sp, fp, #16
   129e0:	pop	{r4, r5, r6, r7, fp, lr}
   129e4:	b	11088 <fseeko64@plt>
   129e8:	ldr	r7, [fp, #8]
   129ec:	mov	r0, r4
   129f0:	bl	1104c <fileno@plt>
   129f4:	str	r7, [sp]
   129f8:	mov	r2, r6
   129fc:	mov	r3, r5
   12a00:	bl	10f68 <lseek64@plt>
   12a04:	and	r2, r0, r1
   12a08:	cmn	r2, #1
   12a0c:	mvneq	r0, #0
   12a10:	subeq	sp, fp, #16
   12a14:	popeq	{r4, r5, r6, r7, fp, pc}
   12a18:	strd	r0, [r4, #80]	; 0x50
   12a1c:	ldr	r0, [r4]
   12a20:	bic	r0, r0, #16
   12a24:	str	r0, [r4]
   12a28:	mov	r0, #0
   12a2c:	sub	sp, fp, #16
   12a30:	pop	{r4, r5, r6, r7, fp, pc}
   12a34:	push	{fp, lr}
   12a38:	mov	fp, sp
   12a3c:	bl	1101c <__errno_location@plt>
   12a40:	mov	r1, #12
   12a44:	str	r1, [r0]
   12a48:	mov	r0, #0
   12a4c:	pop	{fp, pc}
   12a50:	b	155b0 <__assert_fail@plt+0x44b0>
   12a54:	cmp	r1, #0
   12a58:	orreq	r1, r1, #1
   12a5c:	b	155e0 <__assert_fail@plt+0x44e0>
   12a60:	b	1555c <__assert_fail@plt+0x445c>
   12a64:	clz	r3, r2
   12a68:	lsr	ip, r3, #5
   12a6c:	clz	r3, r1
   12a70:	lsr	r3, r3, #5
   12a74:	orrs	r3, r3, ip
   12a78:	movwne	r1, #1
   12a7c:	movwne	r2, #1
   12a80:	b	146d0 <__assert_fail@plt+0x35d0>
   12a84:	push	{r4, r5, fp, lr}
   12a88:	add	fp, sp, #8
   12a8c:	cmp	r0, #0
   12a90:	beq	12b24 <__assert_fail@plt+0x1a24>
   12a94:	mov	r4, r0
   12a98:	mov	r1, #47	; 0x2f
   12a9c:	bl	110a0 <strrchr@plt>
   12aa0:	cmp	r0, #0
   12aa4:	mov	r5, r4
   12aa8:	addne	r5, r0, #1
   12aac:	sub	r0, r5, r4
   12ab0:	cmp	r0, #7
   12ab4:	blt	12b08 <__assert_fail@plt+0x1a08>
   12ab8:	sub	r0, r5, #7
   12abc:	movw	r1, #26023	; 0x65a7
   12ac0:	movt	r1, #1
   12ac4:	mov	r2, #7
   12ac8:	bl	110dc <strncmp@plt>
   12acc:	cmp	r0, #0
   12ad0:	bne	12b08 <__assert_fail@plt+0x1a08>
   12ad4:	movw	r1, #26031	; 0x65af
   12ad8:	movt	r1, #1
   12adc:	mov	r0, r5
   12ae0:	mov	r2, #3
   12ae4:	bl	110dc <strncmp@plt>
   12ae8:	cmp	r0, #0
   12aec:	beq	12af8 <__assert_fail@plt+0x19f8>
   12af0:	mov	r4, r5
   12af4:	b	12b08 <__assert_fail@plt+0x1a08>
   12af8:	add	r4, r5, #3
   12afc:	movw	r0, #28984	; 0x7138
   12b00:	movt	r0, #2
   12b04:	str	r4, [r0]
   12b08:	movw	r0, #28988	; 0x713c
   12b0c:	movt	r0, #2
   12b10:	str	r4, [r0]
   12b14:	movw	r0, #29032	; 0x7168
   12b18:	movt	r0, #2
   12b1c:	str	r4, [r0]
   12b20:	pop	{r4, r5, fp, pc}
   12b24:	movw	r0, #29000	; 0x7148
   12b28:	movt	r0, #2
   12b2c:	ldr	r3, [r0]
   12b30:	movw	r0, #25967	; 0x656f
   12b34:	movt	r0, #1
   12b38:	mov	r1, #55	; 0x37
   12b3c:	mov	r2, #1
   12b40:	bl	10f5c <fwrite@plt>
   12b44:	bl	110e8 <abort@plt>
   12b48:	push	{r4, r5, r6, sl, fp, lr}
   12b4c:	add	fp, sp, #16
   12b50:	mov	r4, r0
   12b54:	movw	r0, #29040	; 0x7170
   12b58:	movt	r0, #2
   12b5c:	cmp	r4, #0
   12b60:	moveq	r4, r0
   12b64:	bl	1101c <__errno_location@plt>
   12b68:	mov	r5, r0
   12b6c:	ldr	r6, [r0]
   12b70:	mov	r0, r4
   12b74:	mov	r1, #48	; 0x30
   12b78:	bl	14ec4 <__assert_fail@plt+0x3dc4>
   12b7c:	str	r6, [r5]
   12b80:	pop	{r4, r5, r6, sl, fp, pc}
   12b84:	movw	r1, #29040	; 0x7170
   12b88:	movt	r1, #2
   12b8c:	cmp	r0, #0
   12b90:	movne	r1, r0
   12b94:	ldr	r0, [r1]
   12b98:	bx	lr
   12b9c:	movw	r2, #29040	; 0x7170
   12ba0:	movt	r2, #2
   12ba4:	cmp	r0, #0
   12ba8:	movne	r2, r0
   12bac:	str	r1, [r2]
   12bb0:	bx	lr
   12bb4:	movw	r3, #29040	; 0x7170
   12bb8:	movt	r3, #2
   12bbc:	cmp	r0, #0
   12bc0:	movne	r3, r0
   12bc4:	ubfx	r0, r1, #5, #3
   12bc8:	add	r0, r3, r0, lsl #2
   12bcc:	ldr	r3, [r0, #8]
   12bd0:	and	r1, r1, #31
   12bd4:	eor	r2, r2, r3, lsr r1
   12bd8:	and	r2, r2, #1
   12bdc:	eor	r2, r3, r2, lsl r1
   12be0:	str	r2, [r0, #8]
   12be4:	mov	r0, #1
   12be8:	and	r0, r0, r3, lsr r1
   12bec:	bx	lr
   12bf0:	movw	r2, #29040	; 0x7170
   12bf4:	movt	r2, #2
   12bf8:	cmp	r0, #0
   12bfc:	movne	r2, r0
   12c00:	ldr	r0, [r2, #4]
   12c04:	str	r1, [r2, #4]
   12c08:	bx	lr
   12c0c:	movw	r3, #29040	; 0x7170
   12c10:	movt	r3, #2
   12c14:	cmp	r0, #0
   12c18:	movne	r3, r0
   12c1c:	mov	r0, #10
   12c20:	str	r0, [r3]
   12c24:	cmp	r1, #0
   12c28:	cmpne	r2, #0
   12c2c:	bne	12c3c <__assert_fail@plt+0x1b3c>
   12c30:	push	{fp, lr}
   12c34:	mov	fp, sp
   12c38:	bl	110e8 <abort@plt>
   12c3c:	str	r1, [r3, #40]	; 0x28
   12c40:	str	r2, [r3, #44]	; 0x2c
   12c44:	bx	lr
   12c48:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12c4c:	add	fp, sp, #28
   12c50:	sub	sp, sp, #20
   12c54:	mov	r8, r3
   12c58:	mov	r9, r2
   12c5c:	mov	sl, r1
   12c60:	mov	r7, r0
   12c64:	ldr	r0, [fp, #8]
   12c68:	movw	r5, #29040	; 0x7170
   12c6c:	movt	r5, #2
   12c70:	cmp	r0, #0
   12c74:	movne	r5, r0
   12c78:	bl	1101c <__errno_location@plt>
   12c7c:	mov	r4, r0
   12c80:	ldm	r5, {r0, r1}
   12c84:	ldr	r2, [r5, #40]	; 0x28
   12c88:	ldr	r3, [r5, #44]	; 0x2c
   12c8c:	ldr	r6, [r4]
   12c90:	add	r5, r5, #8
   12c94:	stm	sp, {r0, r1, r5}
   12c98:	str	r2, [sp, #12]
   12c9c:	str	r3, [sp, #16]
   12ca0:	mov	r0, r7
   12ca4:	mov	r1, sl
   12ca8:	mov	r2, r9
   12cac:	mov	r3, r8
   12cb0:	bl	12cc0 <__assert_fail@plt+0x1bc0>
   12cb4:	str	r6, [r4]
   12cb8:	sub	sp, fp, #28
   12cbc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12cc0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12cc4:	add	fp, sp, #28
   12cc8:	sub	sp, sp, #156	; 0x9c
   12ccc:	mov	r9, r3
   12cd0:	str	r2, [fp, #-84]	; 0xffffffac
   12cd4:	mov	r6, r1
   12cd8:	mov	r7, r0
   12cdc:	ldr	r0, [fp, #12]
   12ce0:	and	r1, r0, #4
   12ce4:	str	r1, [sp, #32]
   12ce8:	and	r1, r0, #1
   12cec:	str	r1, [sp, #36]	; 0x24
   12cf0:	ubfx	sl, r0, #1, #1
   12cf4:	bl	10f74 <__ctype_get_mb_cur_max@plt>
   12cf8:	str	r0, [sp, #40]	; 0x28
   12cfc:	ldr	r0, [fp, #24]
   12d00:	str	r0, [sp, #76]	; 0x4c
   12d04:	ldr	r0, [fp, #20]
   12d08:	str	r0, [sp, #68]	; 0x44
   12d0c:	ldr	r0, [fp, #8]
   12d10:	str	r0, [fp, #-60]	; 0xffffffc4
   12d14:	mov	r0, #0
   12d18:	str	r0, [sp, #72]	; 0x48
   12d1c:	mov	r0, #0
   12d20:	str	r0, [sp, #92]	; 0x5c
   12d24:	mov	r0, #0
   12d28:	str	r0, [fp, #-72]	; 0xffffffb8
   12d2c:	mov	r0, #0
   12d30:	mov	r1, #0
   12d34:	str	r1, [fp, #-56]	; 0xffffffc8
   12d38:	mov	r1, #0
   12d3c:	str	r1, [sp, #56]	; 0x38
   12d40:	mov	r5, #1
   12d44:	str	r7, [sp, #80]	; 0x50
   12d48:	mov	r4, r6
   12d4c:	ldr	r6, [fp, #-60]	; 0xffffffc4
   12d50:	cmp	r6, #10
   12d54:	bhi	13cbc <__assert_fail@plt+0x2bbc>
   12d58:	add	r1, pc, #20
   12d5c:	mov	r8, #0
   12d60:	mov	r2, #1
   12d64:	mov	r3, #0
   12d68:	ldr	ip, [fp, #-84]	; 0xffffffac
   12d6c:	mov	lr, r9
   12d70:	ldr	pc, [r1, r6, lsl #2]
   12d74:	andeq	r2, r1, ip, asr #28
   12d78:	andeq	r2, r1, ip, ror lr
   12d7c:	andeq	r2, r1, ip, lsr lr
   12d80:	andeq	r2, r1, r4, lsr lr
   12d84:	andeq	r2, r1, r0, ror lr
   12d88:	ldrdeq	r2, [r1], -r0
   12d8c:	andeq	r2, r1, ip, asr lr
   12d90:	andeq	r2, r1, ip, lsr #30
   12d94:	andeq	r2, r1, r0, lsr #27
   12d98:	andeq	r2, r1, r0, lsr #27
   12d9c:	andeq	r2, r1, r8, asr #27
   12da0:	movw	r0, #26113	; 0x6601
   12da4:	movt	r0, #1
   12da8:	mov	r1, r6
   12dac:	bl	142c8 <__assert_fail@plt+0x31c8>
   12db0:	str	r0, [sp, #68]	; 0x44
   12db4:	movw	r0, #26115	; 0x6603
   12db8:	movt	r0, #1
   12dbc:	mov	r1, r6
   12dc0:	bl	142c8 <__assert_fail@plt+0x31c8>
   12dc4:	str	r0, [sp, #76]	; 0x4c
   12dc8:	mov	r8, #0
   12dcc:	tst	sl, #1
   12dd0:	bne	12e08 <__assert_fail@plt+0x1d08>
   12dd4:	ldr	r0, [sp, #68]	; 0x44
   12dd8:	ldrb	r0, [r0]
   12ddc:	cmp	r0, #0
   12de0:	beq	12e08 <__assert_fail@plt+0x1d08>
   12de4:	ldr	r1, [sp, #68]	; 0x44
   12de8:	add	r1, r1, #1
   12dec:	mov	r8, #0
   12df0:	cmp	r8, r4
   12df4:	strbcc	r0, [r7, r8]
   12df8:	ldrb	r0, [r1, r8]
   12dfc:	add	r8, r8, #1
   12e00:	cmp	r0, #0
   12e04:	bne	12df0 <__assert_fail@plt+0x1cf0>
   12e08:	ldr	r6, [sp, #76]	; 0x4c
   12e0c:	mov	r0, r6
   12e10:	bl	11004 <strlen@plt>
   12e14:	str	r0, [fp, #-72]	; 0xffffffb8
   12e18:	str	r6, [sp, #92]	; 0x5c
   12e1c:	mov	r2, #1
   12e20:	mov	r3, sl
   12e24:	ldr	ip, [fp, #-84]	; 0xffffffac
   12e28:	mov	lr, r9
   12e2c:	ldr	r6, [fp, #-60]	; 0xffffffc4
   12e30:	b	12f2c <__assert_fail@plt+0x1e2c>
   12e34:	mov	r0, #1
   12e38:	b	12e7c <__assert_fail@plt+0x1d7c>
   12e3c:	tst	sl, #1
   12e40:	bne	12e7c <__assert_fail@plt+0x1d7c>
   12e44:	mov	r2, r0
   12e48:	b	12ea4 <__assert_fail@plt+0x1da4>
   12e4c:	mov	r6, #0
   12e50:	mov	r8, #0
   12e54:	mov	r2, r0
   12e58:	b	12f28 <__assert_fail@plt+0x1e28>
   12e5c:	mov	r0, #1
   12e60:	str	r0, [fp, #-72]	; 0xffffffb8
   12e64:	mov	r8, #0
   12e68:	mov	r6, #5
   12e6c:	b	12ee8 <__assert_fail@plt+0x1de8>
   12e70:	mov	r2, #1
   12e74:	tst	sl, #1
   12e78:	beq	12ea4 <__assert_fail@plt+0x1da4>
   12e7c:	mov	r1, #1
   12e80:	str	r1, [fp, #-72]	; 0xffffffb8
   12e84:	mov	r8, #0
   12e88:	mov	r6, #2
   12e8c:	movw	r1, #26115	; 0x6603
   12e90:	movt	r1, #1
   12e94:	str	r1, [sp, #92]	; 0x5c
   12e98:	mov	r2, r0
   12e9c:	mov	r3, #1
   12ea0:	b	12f2c <__assert_fail@plt+0x1e2c>
   12ea4:	mov	r8, #1
   12ea8:	mov	r6, #2
   12eac:	cmp	r4, #0
   12eb0:	movne	r0, #39	; 0x27
   12eb4:	strbne	r0, [r7]
   12eb8:	movw	r0, #26115	; 0x6603
   12ebc:	movt	r0, #1
   12ec0:	str	r0, [sp, #92]	; 0x5c
   12ec4:	mov	r0, #1
   12ec8:	str	r0, [fp, #-72]	; 0xffffffb8
   12ecc:	b	12f28 <__assert_fail@plt+0x1e28>
   12ed0:	mov	r6, #5
   12ed4:	tst	sl, #1
   12ed8:	beq	12f00 <__assert_fail@plt+0x1e00>
   12edc:	mov	r0, #1
   12ee0:	str	r0, [fp, #-72]	; 0xffffffb8
   12ee4:	mov	r8, #0
   12ee8:	movw	r0, #26111	; 0x65ff
   12eec:	movt	r0, #1
   12ef0:	str	r0, [sp, #92]	; 0x5c
   12ef4:	mov	r2, #1
   12ef8:	mov	r3, #1
   12efc:	b	12f2c <__assert_fail@plt+0x1e2c>
   12f00:	cmp	r4, #0
   12f04:	movne	r0, #34	; 0x22
   12f08:	strbne	r0, [r7]
   12f0c:	mov	r8, #1
   12f10:	movw	r0, #26111	; 0x65ff
   12f14:	movt	r0, #1
   12f18:	str	r0, [sp, #92]	; 0x5c
   12f1c:	mov	r0, #1
   12f20:	str	r0, [fp, #-72]	; 0xffffffb8
   12f24:	mov	r2, #1
   12f28:	mov	r3, #0
   12f2c:	ldr	r0, [fp, #16]
   12f30:	cmp	r0, #0
   12f34:	movwne	r0, #1
   12f38:	and	r0, r0, r3
   12f3c:	str	r0, [fp, #-88]	; 0xffffffa8
   12f40:	ldr	r0, [fp, #-72]	; 0xffffffb8
   12f44:	cmp	r0, #0
   12f48:	movwne	r0, #1
   12f4c:	and	r1, r0, r3
   12f50:	and	r1, r2, r1
   12f54:	str	r1, [sp, #48]	; 0x30
   12f58:	str	r6, [fp, #-60]	; 0xffffffc4
   12f5c:	subs	r6, r6, #2
   12f60:	clz	r1, r6
   12f64:	lsr	r1, r1, #5
   12f68:	and	r1, r1, r3
   12f6c:	str	r1, [sp, #60]	; 0x3c
   12f70:	str	r6, [fp, #-80]	; 0xffffffb0
   12f74:	mov	r1, r6
   12f78:	movwne	r1, #1
   12f7c:	str	r3, [fp, #-76]	; 0xffffffb4
   12f80:	eor	r3, r3, #1
   12f84:	str	r3, [sp, #88]	; 0x58
   12f88:	orr	r3, r1, r3
   12f8c:	str	r3, [sp, #64]	; 0x40
   12f90:	and	r1, r1, r2
   12f94:	str	r1, [fp, #-68]	; 0xffffffbc
   12f98:	and	r0, r0, r1
   12f9c:	str	r0, [fp, #-64]	; 0xffffffc0
   12fa0:	str	r2, [sp, #84]	; 0x54
   12fa4:	eor	r0, r2, #1
   12fa8:	str	r0, [sp, #52]	; 0x34
   12fac:	mov	r6, #0
   12fb0:	cmn	lr, #1
   12fb4:	beq	12fc4 <__assert_fail@plt+0x1ec4>
   12fb8:	cmp	r6, lr
   12fbc:	bne	12fd0 <__assert_fail@plt+0x1ed0>
   12fc0:	b	13b3c <__assert_fail@plt+0x2a3c>
   12fc4:	ldrb	r0, [ip, r6]
   12fc8:	cmp	r0, #0
   12fcc:	beq	13b3c <__assert_fail@plt+0x2a3c>
   12fd0:	str	r5, [fp, #-48]	; 0xffffffd0
   12fd4:	mov	sl, #0
   12fd8:	ldr	r0, [fp, #-64]	; 0xffffffc0
   12fdc:	cmp	r0, #0
   12fe0:	beq	13014 <__assert_fail@plt+0x1f14>
   12fe4:	ldr	r0, [fp, #-72]	; 0xffffffb8
   12fe8:	add	r5, r6, r0
   12fec:	cmp	r0, #2
   12ff0:	bcc	1300c <__assert_fail@plt+0x1f0c>
   12ff4:	cmn	lr, #1
   12ff8:	bne	1300c <__assert_fail@plt+0x1f0c>
   12ffc:	mov	r0, ip
   13000:	bl	11004 <strlen@plt>
   13004:	ldr	ip, [fp, #-84]	; 0xffffffac
   13008:	mov	lr, r0
   1300c:	cmp	r5, lr
   13010:	bls	13020 <__assert_fail@plt+0x1f20>
   13014:	mov	r0, #0
   13018:	str	r0, [fp, #-52]	; 0xffffffcc
   1301c:	b	1306c <__assert_fail@plt+0x1f6c>
   13020:	mov	r5, r4
   13024:	mov	r4, lr
   13028:	add	r0, ip, r6
   1302c:	ldr	r1, [sp, #92]	; 0x5c
   13030:	ldr	r2, [fp, #-72]	; 0xffffffb8
   13034:	bl	10f14 <memcmp@plt>
   13038:	cmp	r0, #0
   1303c:	mov	r1, r0
   13040:	movwne	r1, #1
   13044:	ldr	r2, [sp, #88]	; 0x58
   13048:	orr	r1, r1, r2
   1304c:	tst	r1, #1
   13050:	beq	13c00 <__assert_fail@plt+0x2b00>
   13054:	clz	r0, r0
   13058:	lsr	r0, r0, #5
   1305c:	str	r0, [fp, #-52]	; 0xffffffcc
   13060:	ldr	ip, [fp, #-84]	; 0xffffffac
   13064:	mov	lr, r4
   13068:	mov	r4, r5
   1306c:	ldrb	r5, [ip, r6]
   13070:	cmp	r5, #126	; 0x7e
   13074:	bhi	13430 <__assert_fail@plt+0x2330>
   13078:	mov	r9, #1
   1307c:	mov	r2, #110	; 0x6e
   13080:	mov	r0, #97	; 0x61
   13084:	add	r3, pc, #4
   13088:	mov	r1, #0
   1308c:	ldr	pc, [r3, r5, lsl #2]
   13090:	andeq	r3, r1, r8, lsr #6
   13094:	andeq	r3, r1, r0, lsr r4
   13098:	andeq	r3, r1, r0, lsr r4
   1309c:	andeq	r3, r1, r0, lsr r4
   130a0:	andeq	r3, r1, r0, lsr r4
   130a4:	andeq	r3, r1, r0, lsr r4
   130a8:	andeq	r3, r1, r0, lsr r4
   130ac:	strdeq	r3, [r1], -r4
   130b0:	andeq	r3, r1, r8, lsl #6
   130b4:	andeq	r3, r1, r0, lsl #6
   130b8:	andeq	r3, r1, r4, lsl r3
   130bc:	muleq	r1, r8, r3
   130c0:	strdeq	r3, [r1], -r8
   130c4:	andeq	r3, r1, r0, lsl r3
   130c8:	andeq	r3, r1, r0, lsr r4
   130cc:	andeq	r3, r1, r0, lsr r4
   130d0:	andeq	r3, r1, r0, lsr r4
   130d4:	andeq	r3, r1, r0, lsr r4
   130d8:	andeq	r3, r1, r0, lsr r4
   130dc:	andeq	r3, r1, r0, lsr r4
   130e0:	andeq	r3, r1, r0, lsr r4
   130e4:	andeq	r3, r1, r0, lsr r4
   130e8:	andeq	r3, r1, r0, lsr r4
   130ec:	andeq	r3, r1, r0, lsr r4
   130f0:	andeq	r3, r1, r0, lsr r4
   130f4:	andeq	r3, r1, r0, lsr r4
   130f8:	andeq	r3, r1, r0, lsr r4
   130fc:	andeq	r3, r1, r0, lsr r4
   13100:	andeq	r3, r1, r0, lsr r4
   13104:	andeq	r3, r1, r0, lsr r4
   13108:	andeq	r3, r1, r0, lsr r4
   1310c:	andeq	r3, r1, r0, lsr r4
   13110:	andeq	r3, r1, r4, lsr #9
   13114:	andeq	r3, r1, r8, lsr #9
   13118:	andeq	r3, r1, r8, lsr #9
   1311c:	andeq	r3, r1, r0, lsr #5
   13120:	andeq	r3, r1, r8, lsr #9
   13124:	andeq	r3, r1, ip, lsl #5
   13128:	andeq	r3, r1, r8, lsr #9
   1312c:	andeq	r3, r1, r0, lsr #7
   13130:	andeq	r3, r1, r8, lsr #9
   13134:	andeq	r3, r1, r8, lsr #9
   13138:	andeq	r3, r1, r8, lsr #9
   1313c:	andeq	r3, r1, ip, lsl #5
   13140:	andeq	r3, r1, ip, lsl #5
   13144:	andeq	r3, r1, ip, lsl #5
   13148:	andeq	r3, r1, ip, lsl #5
   1314c:	andeq	r3, r1, ip, lsl #5
   13150:	andeq	r3, r1, ip, lsl #5
   13154:	andeq	r3, r1, ip, lsl #5
   13158:	andeq	r3, r1, ip, lsl #5
   1315c:	andeq	r3, r1, ip, lsl #5
   13160:	andeq	r3, r1, ip, lsl #5
   13164:	andeq	r3, r1, ip, lsl #5
   13168:	andeq	r3, r1, ip, lsl #5
   1316c:	andeq	r3, r1, ip, lsl #5
   13170:	andeq	r3, r1, ip, lsl #5
   13174:	andeq	r3, r1, ip, lsl #5
   13178:	andeq	r3, r1, ip, lsl #5
   1317c:	andeq	r3, r1, r8, lsr #9
   13180:	andeq	r3, r1, r8, lsr #9
   13184:	andeq	r3, r1, r8, lsr #9
   13188:	andeq	r3, r1, r8, lsr #9
   1318c:	andeq	r3, r1, r8, ror #6
   13190:	andeq	r3, r1, r0, lsr r4
   13194:	andeq	r3, r1, ip, lsl #5
   13198:	andeq	r3, r1, ip, lsl #5
   1319c:	andeq	r3, r1, ip, lsl #5
   131a0:	andeq	r3, r1, ip, lsl #5
   131a4:	andeq	r3, r1, ip, lsl #5
   131a8:	andeq	r3, r1, ip, lsl #5
   131ac:	andeq	r3, r1, ip, lsl #5
   131b0:	andeq	r3, r1, ip, lsl #5
   131b4:	andeq	r3, r1, ip, lsl #5
   131b8:	andeq	r3, r1, ip, lsl #5
   131bc:	andeq	r3, r1, ip, lsl #5
   131c0:	andeq	r3, r1, ip, lsl #5
   131c4:	andeq	r3, r1, ip, lsl #5
   131c8:	andeq	r3, r1, ip, lsl #5
   131cc:	andeq	r3, r1, ip, lsl #5
   131d0:	andeq	r3, r1, ip, lsl #5
   131d4:	andeq	r3, r1, ip, lsl #5
   131d8:	andeq	r3, r1, ip, lsl #5
   131dc:	andeq	r3, r1, ip, lsl #5
   131e0:	andeq	r3, r1, ip, lsl #5
   131e4:	andeq	r3, r1, ip, lsl #5
   131e8:	andeq	r3, r1, ip, lsl #5
   131ec:	andeq	r3, r1, ip, lsl #5
   131f0:	andeq	r3, r1, ip, lsl #5
   131f4:	andeq	r3, r1, ip, lsl #5
   131f8:	andeq	r3, r1, ip, lsl #5
   131fc:	andeq	r3, r1, r8, lsr #9
   13200:	ldrdeq	r3, [r1], -r4
   13204:	andeq	r3, r1, ip, lsl #5
   13208:	andeq	r3, r1, r8, lsr #9
   1320c:	andeq	r3, r1, ip, lsl #5
   13210:	andeq	r3, r1, r8, lsr #9
   13214:	andeq	r3, r1, ip, lsl #5
   13218:	andeq	r3, r1, ip, lsl #5
   1321c:	andeq	r3, r1, ip, lsl #5
   13220:	andeq	r3, r1, ip, lsl #5
   13224:	andeq	r3, r1, ip, lsl #5
   13228:	andeq	r3, r1, ip, lsl #5
   1322c:	andeq	r3, r1, ip, lsl #5
   13230:	andeq	r3, r1, ip, lsl #5
   13234:	andeq	r3, r1, ip, lsl #5
   13238:	andeq	r3, r1, ip, lsl #5
   1323c:	andeq	r3, r1, ip, lsl #5
   13240:	andeq	r3, r1, ip, lsl #5
   13244:	andeq	r3, r1, ip, lsl #5
   13248:	andeq	r3, r1, ip, lsl #5
   1324c:	andeq	r3, r1, ip, lsl #5
   13250:	andeq	r3, r1, ip, lsl #5
   13254:	andeq	r3, r1, ip, lsl #5
   13258:	andeq	r3, r1, ip, lsl #5
   1325c:	andeq	r3, r1, ip, lsl #5
   13260:	andeq	r3, r1, ip, lsl #5
   13264:	andeq	r3, r1, ip, lsl #5
   13268:	andeq	r3, r1, ip, lsl #5
   1326c:	andeq	r3, r1, ip, lsl #5
   13270:	andeq	r3, r1, ip, lsl #5
   13274:	andeq	r3, r1, ip, lsl #5
   13278:	andeq	r3, r1, ip, lsl #5
   1327c:			; <UNDEFINED> instruction: 0x000132b4
   13280:	andeq	r3, r1, r8, lsr #9
   13284:			; <UNDEFINED> instruction: 0x000132b4
   13288:	andeq	r3, r1, r0, lsr #5
   1328c:	ldr	r0, [fp, #-68]	; 0xffffffbc
   13290:	cmp	r0, #0
   13294:	beq	13508 <__assert_fail@plt+0x2408>
   13298:	ldr	r0, [fp, #16]
   1329c:	b	1350c <__assert_fail@plt+0x240c>
   132a0:	mov	r9, #0
   132a4:	cmp	r6, #0
   132a8:	beq	134a4 <__assert_fail@plt+0x23a4>
   132ac:	mov	sl, #0
   132b0:	b	1328c <__assert_fail@plt+0x218c>
   132b4:	mov	r9, #0
   132b8:	cmn	lr, #1
   132bc:	beq	13488 <__assert_fail@plt+0x2388>
   132c0:	cmp	r6, #0
   132c4:	bne	132ac <__assert_fail@plt+0x21ac>
   132c8:	cmp	lr, #1
   132cc:	beq	134a4 <__assert_fail@plt+0x23a4>
   132d0:	b	132ac <__assert_fail@plt+0x21ac>
   132d4:	ldr	r0, [fp, #-60]	; 0xffffffc4
   132d8:	cmp	r0, #2
   132dc:	bne	134d0 <__assert_fail@plt+0x23d0>
   132e0:	ldr	r0, [fp, #-76]	; 0xffffffb4
   132e4:	tst	r0, #1
   132e8:	bne	13c18 <__assert_fail@plt+0x2b18>
   132ec:	mov	sl, #0
   132f0:	mov	r0, #92	; 0x5c
   132f4:	b	134e4 <__assert_fail@plt+0x23e4>
   132f8:	mov	r0, #102	; 0x66
   132fc:	b	134f4 <__assert_fail@plt+0x23f4>
   13300:	mov	r2, #116	; 0x74
   13304:	b	13314 <__assert_fail@plt+0x2214>
   13308:	mov	r0, #98	; 0x62
   1330c:	b	134f4 <__assert_fail@plt+0x23f4>
   13310:	mov	r2, #114	; 0x72
   13314:	ldr	r0, [sp, #64]	; 0x40
   13318:	tst	r0, #1
   1331c:	mov	r0, r2
   13320:	bne	134f4 <__assert_fail@plt+0x23f4>
   13324:	b	13c18 <__assert_fail@plt+0x2b18>
   13328:	ldr	r0, [sp, #84]	; 0x54
   1332c:	tst	r0, #1
   13330:	beq	135e4 <__assert_fail@plt+0x24e4>
   13334:	ldr	r0, [fp, #-76]	; 0xffffffb4
   13338:	tst	r0, #1
   1333c:	bne	13c18 <__assert_fail@plt+0x2b18>
   13340:	ldr	r0, [fp, #-60]	; 0xffffffc4
   13344:	cmp	r0, #2
   13348:	ldr	r0, [fp, #-80]	; 0xffffffb0
   1334c:	movwne	r0, #1
   13350:	ldr	r2, [fp, #-56]	; 0xffffffc8
   13354:	orr	r0, r0, r2
   13358:	tst	r0, #1
   1335c:	beq	139d8 <__assert_fail@plt+0x28d8>
   13360:	mov	r0, r8
   13364:	b	13a0c <__assert_fail@plt+0x290c>
   13368:	mov	sl, #0
   1336c:	mov	r5, #63	; 0x3f
   13370:	ldr	r0, [fp, #-60]	; 0xffffffc4
   13374:	cmp	r0, #5
   13378:	beq	13798 <__assert_fail@plt+0x2698>
   1337c:	cmp	r0, #2
   13380:	bne	13838 <__assert_fail@plt+0x2738>
   13384:	ldr	r0, [fp, #-76]	; 0xffffffb4
   13388:	tst	r0, #1
   1338c:	mov	r9, #0
   13390:	beq	1328c <__assert_fail@plt+0x218c>
   13394:	b	13c18 <__assert_fail@plt+0x2b18>
   13398:	mov	r0, #118	; 0x76
   1339c:	b	134f4 <__assert_fail@plt+0x23f4>
   133a0:	mov	r5, #39	; 0x27
   133a4:	mov	r0, #1
   133a8:	str	r0, [sp, #56]	; 0x38
   133ac:	ldr	r0, [fp, #-60]	; 0xffffffc4
   133b0:	cmp	r0, #2
   133b4:	bne	13604 <__assert_fail@plt+0x2504>
   133b8:	ldr	r0, [fp, #-76]	; 0xffffffb4
   133bc:	tst	r0, #1
   133c0:	bne	13c18 <__assert_fail@plt+0x2b18>
   133c4:	ldr	r2, [sp, #72]	; 0x48
   133c8:	cmp	r2, #0
   133cc:	mov	r0, r2
   133d0:	movwne	r0, #1
   133d4:	clz	r1, r4
   133d8:	lsr	r1, r1, #5
   133dc:	orrs	r0, r0, r1
   133e0:	moveq	r2, r4
   133e4:	str	r2, [sp, #72]	; 0x48
   133e8:	moveq	r4, r0
   133ec:	cmp	r8, r4
   133f0:	movcc	r0, #39	; 0x27
   133f4:	strbcc	r0, [r7, r8]
   133f8:	add	r0, r8, #1
   133fc:	cmp	r0, r4
   13400:	movcc	r1, #92	; 0x5c
   13404:	strbcc	r1, [r7, r0]
   13408:	add	r0, r8, #2
   1340c:	cmp	r0, r4
   13410:	movcc	r1, #39	; 0x27
   13414:	strbcc	r1, [r7, r0]
   13418:	add	r8, r8, #3
   1341c:	mov	r0, #0
   13420:	str	r0, [fp, #-56]	; 0xffffffc8
   13424:	mov	sl, #0
   13428:	mov	r9, #1
   1342c:	b	1328c <__assert_fail@plt+0x218c>
   13430:	str	r4, [sp, #24]
   13434:	ldr	r0, [sp, #40]	; 0x28
   13438:	cmp	r0, #1
   1343c:	bne	1360c <__assert_fail@plt+0x250c>
   13440:	str	lr, [sp, #28]
   13444:	bl	10fec <__ctype_b_loc@plt>
   13448:	ldr	ip, [fp, #-84]	; 0xffffffac
   1344c:	ldr	r0, [r0]
   13450:	add	r0, r0, r5, lsl #1
   13454:	ldrb	r0, [r0, #1]
   13458:	ubfx	r9, r0, #6, #1
   1345c:	mov	r1, #1
   13460:	ldr	r4, [sp, #24]
   13464:	ldr	r0, [sp, #52]	; 0x34
   13468:	orr	r0, r9, r0
   1346c:	mov	r2, r1
   13470:	cmp	r1, #1
   13474:	bhi	13840 <__assert_fail@plt+0x2740>
   13478:	tst	r0, #1
   1347c:	beq	13840 <__assert_fail@plt+0x2740>
   13480:	ldr	lr, [sp, #28]
   13484:	b	1328c <__assert_fail@plt+0x218c>
   13488:	cmp	r6, #0
   1348c:	ldrbeq	r0, [ip, #1]
   13490:	cmpeq	r0, #0
   13494:	beq	134a4 <__assert_fail@plt+0x23a4>
   13498:	mvn	lr, #0
   1349c:	mov	sl, #0
   134a0:	b	1328c <__assert_fail@plt+0x218c>
   134a4:	mov	r1, #1
   134a8:	ldr	r0, [fp, #-60]	; 0xffffffc4
   134ac:	cmp	r0, #2
   134b0:	bne	134c8 <__assert_fail@plt+0x23c8>
   134b4:	ldr	r0, [fp, #-76]	; 0xffffffb4
   134b8:	tst	r0, #1
   134bc:	mov	r9, r1
   134c0:	beq	1328c <__assert_fail@plt+0x218c>
   134c4:	b	13c18 <__assert_fail@plt+0x2b18>
   134c8:	mov	r9, r1
   134cc:	b	1328c <__assert_fail@plt+0x218c>
   134d0:	mov	sl, #0
   134d4:	mov	r0, #92	; 0x5c
   134d8:	ldr	r1, [sp, #48]	; 0x30
   134dc:	cmp	r1, #0
   134e0:	beq	134f4 <__assert_fail@plt+0x23f4>
   134e4:	mov	r9, #0
   134e8:	cmp	sl, #0
   134ec:	beq	13aa4 <__assert_fail@plt+0x29a4>
   134f0:	b	13ae0 <__assert_fail@plt+0x29e0>
   134f4:	mov	r9, #0
   134f8:	ldr	r1, [sp, #84]	; 0x54
   134fc:	tst	r1, #1
   13500:	mov	sl, #0
   13504:	bne	13544 <__assert_fail@plt+0x2444>
   13508:	ldr	r0, [fp, #-88]	; 0xffffffa8
   1350c:	cmp	r0, #0
   13510:	mov	r0, r5
   13514:	beq	13538 <__assert_fail@plt+0x2438>
   13518:	ubfx	r0, r5, #5, #3
   1351c:	ldr	r1, [fp, #16]
   13520:	ldr	r0, [r1, r0, lsl #2]
   13524:	and	r1, r5, #31
   13528:	mov	r2, #1
   1352c:	tst	r0, r2, lsl r1
   13530:	mov	r0, r5
   13534:	bne	13544 <__assert_fail@plt+0x2444>
   13538:	ldr	r1, [fp, #-52]	; 0xffffffcc
   1353c:	cmp	r1, #0
   13540:	beq	13a9c <__assert_fail@plt+0x299c>
   13544:	ldr	r1, [fp, #-76]	; 0xffffffb4
   13548:	tst	r1, #1
   1354c:	bne	13c18 <__assert_fail@plt+0x2b18>
   13550:	ldr	r1, [fp, #-60]	; 0xffffffc4
   13554:	cmp	r1, #2
   13558:	ldr	r1, [fp, #-80]	; 0xffffffb0
   1355c:	movwne	r1, #1
   13560:	ldr	r2, [fp, #-56]	; 0xffffffc8
   13564:	orr	r1, r1, r2
   13568:	tst	r1, #1
   1356c:	beq	13578 <__assert_fail@plt+0x2478>
   13570:	ldr	r5, [fp, #-48]	; 0xffffffd0
   13574:	b	135b4 <__assert_fail@plt+0x24b4>
   13578:	cmp	r8, r4
   1357c:	movcc	r1, #39	; 0x27
   13580:	strbcc	r1, [r7, r8]
   13584:	add	r1, r8, #1
   13588:	cmp	r1, r4
   1358c:	ldr	r5, [fp, #-48]	; 0xffffffd0
   13590:	movcc	r2, #36	; 0x24
   13594:	strbcc	r2, [r7, r1]
   13598:	add	r1, r8, #2
   1359c:	cmp	r1, r4
   135a0:	movcc	r2, #39	; 0x27
   135a4:	strbcc	r2, [r7, r1]
   135a8:	add	r8, r8, #3
   135ac:	mov	r1, #1
   135b0:	str	r1, [fp, #-56]	; 0xffffffc8
   135b4:	cmp	r8, r4
   135b8:	movcc	r1, #92	; 0x5c
   135bc:	strbcc	r1, [r7, r8]
   135c0:	add	r8, r8, #1
   135c4:	cmp	r8, r4
   135c8:	strbcc	r0, [r7, r8]
   135cc:	and	r5, r5, r9
   135d0:	add	r8, r8, #1
   135d4:	add	r6, r6, #1
   135d8:	cmn	lr, #1
   135dc:	bne	12fb8 <__assert_fail@plt+0x1eb8>
   135e0:	b	12fc4 <__assert_fail@plt+0x1ec4>
   135e4:	mov	r9, #0
   135e8:	ldr	r0, [sp, #36]	; 0x24
   135ec:	cmp	r0, #0
   135f0:	mov	sl, #0
   135f4:	mov	r5, #0
   135f8:	beq	13508 <__assert_fail@plt+0x2408>
   135fc:	ldr	r5, [fp, #-48]	; 0xffffffd0
   13600:	b	135d4 <__assert_fail@plt+0x24d4>
   13604:	mov	r9, #1
   13608:	b	1328c <__assert_fail@plt+0x218c>
   1360c:	mov	r0, #0
   13610:	str	r0, [fp, #-36]	; 0xffffffdc
   13614:	str	r0, [fp, #-40]	; 0xffffffd8
   13618:	cmn	lr, #1
   1361c:	bne	13630 <__assert_fail@plt+0x2530>
   13620:	mov	r0, ip
   13624:	bl	11004 <strlen@plt>
   13628:	ldr	ip, [fp, #-84]	; 0xffffffac
   1362c:	mov	lr, r0
   13630:	add	r0, ip, r6
   13634:	str	r0, [sp, #20]
   13638:	mov	r9, #1
   1363c:	mov	r7, #0
   13640:	sub	r4, fp, #40	; 0x28
   13644:	str	lr, [sp, #28]
   13648:	str	r7, [sp, #44]	; 0x2c
   1364c:	add	r7, r7, r6
   13650:	add	r1, ip, r7
   13654:	sub	r2, lr, r7
   13658:	sub	r0, fp, #44	; 0x2c
   1365c:	mov	r3, r4
   13660:	bl	15a28 <__assert_fail@plt+0x4928>
   13664:	cmp	r0, #0
   13668:	beq	13b28 <__assert_fail@plt+0x2a28>
   1366c:	cmn	r0, #1
   13670:	beq	13ae8 <__assert_fail@plt+0x29e8>
   13674:	cmn	r0, #2
   13678:	ldr	lr, [sp, #28]
   1367c:	beq	13af0 <__assert_fail@plt+0x29f0>
   13680:	cmp	r0, #2
   13684:	mov	r1, #0
   13688:	movwcc	r1, #1
   1368c:	ldr	r2, [sp, #60]	; 0x3c
   13690:	eor	r2, r2, #1
   13694:	orrs	r1, r2, r1
   13698:	ldr	r4, [sp, #24]
   1369c:	bne	1375c <__assert_fail@plt+0x265c>
   136a0:	ldr	r1, [sp, #44]	; 0x2c
   136a4:	ldr	r2, [sp, #20]
   136a8:	add	r1, r2, r1
   136ac:	mov	r2, #1
   136b0:	ldrb	r3, [r1, r2]
   136b4:	sub	r3, r3, #91	; 0x5b
   136b8:	cmp	r3, #33	; 0x21
   136bc:	bhi	13750 <__assert_fail@plt+0x2650>
   136c0:	add	r7, pc, #0
   136c4:	ldr	pc, [r7, r3, lsl #2]
   136c8:	andeq	r3, r1, r0, lsl ip
   136cc:	andeq	r3, r1, r0, lsl ip
   136d0:	andeq	r3, r1, r0, asr r7
   136d4:	andeq	r3, r1, r0, lsl ip
   136d8:	andeq	r3, r1, r0, asr r7
   136dc:	andeq	r3, r1, r0, lsl ip
   136e0:	andeq	r3, r1, r0, asr r7
   136e4:	andeq	r3, r1, r0, asr r7
   136e8:	andeq	r3, r1, r0, asr r7
   136ec:	andeq	r3, r1, r0, asr r7
   136f0:	andeq	r3, r1, r0, asr r7
   136f4:	andeq	r3, r1, r0, asr r7
   136f8:	andeq	r3, r1, r0, asr r7
   136fc:	andeq	r3, r1, r0, asr r7
   13700:	andeq	r3, r1, r0, asr r7
   13704:	andeq	r3, r1, r0, asr r7
   13708:	andeq	r3, r1, r0, asr r7
   1370c:	andeq	r3, r1, r0, asr r7
   13710:	andeq	r3, r1, r0, asr r7
   13714:	andeq	r3, r1, r0, asr r7
   13718:	andeq	r3, r1, r0, asr r7
   1371c:	andeq	r3, r1, r0, asr r7
   13720:	andeq	r3, r1, r0, asr r7
   13724:	andeq	r3, r1, r0, asr r7
   13728:	andeq	r3, r1, r0, asr r7
   1372c:	andeq	r3, r1, r0, asr r7
   13730:	andeq	r3, r1, r0, asr r7
   13734:	andeq	r3, r1, r0, asr r7
   13738:	andeq	r3, r1, r0, asr r7
   1373c:	andeq	r3, r1, r0, asr r7
   13740:	andeq	r3, r1, r0, asr r7
   13744:	andeq	r3, r1, r0, asr r7
   13748:	andeq	r3, r1, r0, asr r7
   1374c:	andeq	r3, r1, r0, lsl ip
   13750:	add	r2, r2, #1
   13754:	cmp	r2, r0
   13758:	bcc	136b0 <__assert_fail@plt+0x25b0>
   1375c:	ldr	r7, [sp, #44]	; 0x2c
   13760:	add	r7, r0, r7
   13764:	ldr	r0, [fp, #-44]	; 0xffffffd4
   13768:	bl	10f50 <iswprint@plt>
   1376c:	cmp	r0, #0
   13770:	movwne	r0, #1
   13774:	and	r9, r9, r0
   13778:	sub	r4, fp, #40	; 0x28
   1377c:	mov	r0, r4
   13780:	bl	10efc <mbsinit@plt>
   13784:	ldr	lr, [sp, #28]
   13788:	cmp	r0, #0
   1378c:	ldr	ip, [fp, #-84]	; 0xffffffac
   13790:	beq	13648 <__assert_fail@plt+0x2548>
   13794:	b	13b30 <__assert_fail@plt+0x2a30>
   13798:	ldr	r0, [sp, #32]
   1379c:	cmp	r0, #0
   137a0:	beq	13838 <__assert_fail@plt+0x2738>
   137a4:	add	r0, r6, #2
   137a8:	cmp	r0, lr
   137ac:	bcs	13838 <__assert_fail@plt+0x2738>
   137b0:	add	r1, ip, r6
   137b4:	ldrb	r1, [r1, #1]
   137b8:	cmp	r1, #63	; 0x3f
   137bc:	bne	13838 <__assert_fail@plt+0x2738>
   137c0:	ldrb	r9, [ip, r0]
   137c4:	sub	r2, r9, #33	; 0x21
   137c8:	cmp	r2, #29
   137cc:	bhi	13838 <__assert_fail@plt+0x2738>
   137d0:	mov	r3, #1
   137d4:	movw	r1, #20929	; 0x51c1
   137d8:	movt	r1, #14336	; 0x3800
   137dc:	tst	r1, r3, lsl r2
   137e0:	beq	13838 <__assert_fail@plt+0x2738>
   137e4:	ldr	r1, [fp, #-76]	; 0xffffffb4
   137e8:	tst	r1, #1
   137ec:	bne	13c18 <__assert_fail@plt+0x2b18>
   137f0:	cmp	r8, r4
   137f4:	movcc	r1, #63	; 0x3f
   137f8:	strbcc	r1, [r7, r8]
   137fc:	add	r2, r8, #1
   13800:	cmp	r2, r4
   13804:	movcc	r1, #34	; 0x22
   13808:	strbcc	r1, [r7, r2]
   1380c:	add	r2, r8, #2
   13810:	cmp	r2, r4
   13814:	movcc	r1, #34	; 0x22
   13818:	strbcc	r1, [r7, r2]
   1381c:	add	r2, r8, #3
   13820:	cmp	r2, r4
   13824:	movcc	r1, #63	; 0x3f
   13828:	strbcc	r1, [r7, r2]
   1382c:	add	r8, r8, #4
   13830:	mov	r6, r0
   13834:	mov	r5, r9
   13838:	mov	r9, #0
   1383c:	b	1328c <__assert_fail@plt+0x218c>
   13840:	add	r1, r2, r6
   13844:	str	r1, [sp, #44]	; 0x2c
   13848:	add	r1, r6, #1
   1384c:	mov	r3, #0
   13850:	ldr	lr, [sp, #28]
   13854:	ldr	r6, [fp, #-60]	; 0xffffffc4
   13858:	tst	r0, #1
   1385c:	bne	13950 <__assert_fail@plt+0x2850>
   13860:	ldr	r2, [fp, #-76]	; 0xffffffb4
   13864:	tst	r2, #1
   13868:	bne	13c18 <__assert_fail@plt+0x2b18>
   1386c:	cmp	r6, #2
   13870:	ldr	r3, [fp, #-80]	; 0xffffffb0
   13874:	movwne	r3, #1
   13878:	ldr	r2, [fp, #-56]	; 0xffffffc8
   1387c:	orr	r3, r3, r2
   13880:	tst	r3, #1
   13884:	bne	138c0 <__assert_fail@plt+0x27c0>
   13888:	cmp	r8, r4
   1388c:	movcc	r2, #39	; 0x27
   13890:	strbcc	r2, [r7, r8]
   13894:	add	r3, r8, #1
   13898:	cmp	r3, r4
   1389c:	movcc	r2, #36	; 0x24
   138a0:	strbcc	r2, [r7, r3]
   138a4:	add	r3, r8, #2
   138a8:	cmp	r3, r4
   138ac:	movcc	r2, #39	; 0x27
   138b0:	strbcc	r2, [r7, r3]
   138b4:	add	r8, r8, #3
   138b8:	mov	r2, #1
   138bc:	str	r2, [fp, #-56]	; 0xffffffc8
   138c0:	cmp	r8, r4
   138c4:	movcc	r2, #92	; 0x5c
   138c8:	strbcc	r2, [r7, r8]
   138cc:	add	r3, r8, #1
   138d0:	cmp	r3, r4
   138d4:	bcs	138f4 <__assert_fail@plt+0x27f4>
   138d8:	and	r7, r5, #192	; 0xc0
   138dc:	mov	r2, #48	; 0x30
   138e0:	orr	r7, r2, r7, lsr #6
   138e4:	ldr	r6, [sp, #80]	; 0x50
   138e8:	strb	r7, [r6, r3]
   138ec:	ldr	r6, [fp, #-60]	; 0xffffffc4
   138f0:	ldr	r7, [sp, #80]	; 0x50
   138f4:	add	r3, r8, #2
   138f8:	cmp	r3, r4
   138fc:	bcs	1391c <__assert_fail@plt+0x281c>
   13900:	lsr	r7, r5, #3
   13904:	mov	r2, #6
   13908:	bfi	r7, r2, #3, #29
   1390c:	ldr	r6, [sp, #80]	; 0x50
   13910:	strb	r7, [r6, r3]
   13914:	ldr	r6, [fp, #-60]	; 0xffffffc4
   13918:	ldr	r7, [sp, #80]	; 0x50
   1391c:	mov	r2, #6
   13920:	bfi	r5, r2, #3, #29
   13924:	add	r8, r8, #3
   13928:	mov	r3, #1
   1392c:	b	13974 <__assert_fail@plt+0x2874>
   13930:	ldr	r7, [sp, #80]	; 0x50
   13934:	cmp	r8, r4
   13938:	strbcc	r5, [r7, r8]
   1393c:	ldrb	r5, [ip, r1]
   13940:	add	r1, r1, #1
   13944:	add	r8, r8, #1
   13948:	tst	r0, #1
   1394c:	beq	13860 <__assert_fail@plt+0x2760>
   13950:	ldr	r2, [fp, #-52]	; 0xffffffcc
   13954:	tst	r2, #1
   13958:	beq	1396c <__assert_fail@plt+0x286c>
   1395c:	cmp	r8, r4
   13960:	movcc	r2, #92	; 0x5c
   13964:	strbcc	r2, [r7, r8]
   13968:	add	r8, r8, #1
   1396c:	mov	r2, #0
   13970:	str	r2, [fp, #-52]	; 0xffffffcc
   13974:	and	sl, r3, #1
   13978:	ldr	r2, [sp, #44]	; 0x2c
   1397c:	cmp	r2, r1
   13980:	bls	13a8c <__assert_fail@plt+0x298c>
   13984:	cmp	sl, #0
   13988:	movwne	sl, #1
   1398c:	ldr	r2, [fp, #-56]	; 0xffffffc8
   13990:	mvn	r7, r2
   13994:	orr	r7, r7, sl
   13998:	tst	r7, #1
   1399c:	bne	13930 <__assert_fail@plt+0x2830>
   139a0:	cmp	r8, r4
   139a4:	ldrcc	r7, [sp, #80]	; 0x50
   139a8:	movcc	r2, #39	; 0x27
   139ac:	strbcc	r2, [r7, r8]
   139b0:	add	r7, r8, #1
   139b4:	cmp	r7, r4
   139b8:	ldrcc	r6, [sp, #80]	; 0x50
   139bc:	movcc	r2, #39	; 0x27
   139c0:	strbcc	r2, [r6, r7]
   139c4:	ldrcc	r6, [fp, #-60]	; 0xffffffc4
   139c8:	add	r8, r8, #2
   139cc:	mov	r2, #0
   139d0:	str	r2, [fp, #-56]	; 0xffffffc8
   139d4:	b	13930 <__assert_fail@plt+0x2830>
   139d8:	cmp	r8, r4
   139dc:	movcc	r0, #39	; 0x27
   139e0:	strbcc	r0, [r7, r8]
   139e4:	add	r0, r8, #1
   139e8:	cmp	r0, r4
   139ec:	movcc	r1, #36	; 0x24
   139f0:	strbcc	r1, [r7, r0]
   139f4:	add	r0, r8, #2
   139f8:	cmp	r0, r4
   139fc:	movcc	r1, #39	; 0x27
   13a00:	strbcc	r1, [r7, r0]
   13a04:	add	r0, r8, #3
   13a08:	mov	r2, #1
   13a0c:	cmp	r0, r4
   13a10:	movcc	r1, #92	; 0x5c
   13a14:	strbcc	r1, [r7, r0]
   13a18:	str	r2, [fp, #-56]	; 0xffffffc8
   13a1c:	add	r8, r0, #1
   13a20:	ldr	r1, [fp, #-60]	; 0xffffffc4
   13a24:	cmp	r1, #2
   13a28:	beq	13a7c <__assert_fail@plt+0x297c>
   13a2c:	add	r1, r6, #1
   13a30:	mov	r9, #0
   13a34:	mov	sl, #1
   13a38:	mov	r5, #48	; 0x30
   13a3c:	cmp	r1, lr
   13a40:	bcs	1328c <__assert_fail@plt+0x218c>
   13a44:	ldrb	r1, [ip, r1]
   13a48:	sub	r1, r1, #48	; 0x30
   13a4c:	uxtb	r1, r1
   13a50:	cmp	r1, #9
   13a54:	bhi	1328c <__assert_fail@plt+0x218c>
   13a58:	cmp	r8, r4
   13a5c:	movcc	r1, #48	; 0x30
   13a60:	strbcc	r1, [r7, r8]
   13a64:	add	r1, r0, #2
   13a68:	cmp	r1, r4
   13a6c:	movcc	r2, #48	; 0x30
   13a70:	strbcc	r2, [r7, r1]
   13a74:	add	r8, r0, #3
   13a78:	b	1328c <__assert_fail@plt+0x218c>
   13a7c:	mov	r0, #48	; 0x30
   13a80:	mov	sl, #1
   13a84:	mov	r9, #0
   13a88:	b	13538 <__assert_fail@plt+0x2438>
   13a8c:	sub	r6, r1, #1
   13a90:	cmp	sl, #0
   13a94:	movwne	sl, #1
   13a98:	mov	r0, r5
   13a9c:	cmp	sl, #0
   13aa0:	bne	13ae0 <__assert_fail@plt+0x29e0>
   13aa4:	ldr	r1, [fp, #-56]	; 0xffffffc8
   13aa8:	tst	r1, #1
   13aac:	beq	13ae0 <__assert_fail@plt+0x29e0>
   13ab0:	cmp	r8, r4
   13ab4:	ldr	r5, [fp, #-48]	; 0xffffffd0
   13ab8:	movcc	r1, #39	; 0x27
   13abc:	strbcc	r1, [r7, r8]
   13ac0:	add	r1, r8, #1
   13ac4:	cmp	r1, r4
   13ac8:	movcc	r2, #39	; 0x27
   13acc:	strbcc	r2, [r7, r1]
   13ad0:	add	r8, r8, #2
   13ad4:	mov	r1, #0
   13ad8:	str	r1, [fp, #-56]	; 0xffffffc8
   13adc:	b	135c4 <__assert_fail@plt+0x24c4>
   13ae0:	ldr	r5, [fp, #-48]	; 0xffffffd0
   13ae4:	b	135c4 <__assert_fail@plt+0x24c4>
   13ae8:	mov	r9, #0
   13aec:	b	13b28 <__assert_fail@plt+0x2a28>
   13af0:	mov	r9, #0
   13af4:	cmp	r7, lr
   13af8:	bcs	13b28 <__assert_fail@plt+0x2a28>
   13afc:	ldr	ip, [fp, #-84]	; 0xffffffac
   13b00:	ldr	r7, [sp, #44]	; 0x2c
   13b04:	ldr	r0, [sp, #20]
   13b08:	ldrb	r0, [r0, r7]
   13b0c:	cmp	r0, #0
   13b10:	beq	13b30 <__assert_fail@plt+0x2a30>
   13b14:	add	r7, r7, #1
   13b18:	add	r0, r6, r7
   13b1c:	cmp	r0, lr
   13b20:	bcc	13b04 <__assert_fail@plt+0x2a04>
   13b24:	b	13b30 <__assert_fail@plt+0x2a30>
   13b28:	ldr	ip, [fp, #-84]	; 0xffffffac
   13b2c:	ldr	r7, [sp, #44]	; 0x2c
   13b30:	mov	r1, r7
   13b34:	ldr	r7, [sp, #80]	; 0x50
   13b38:	b	13460 <__assert_fail@plt+0x2360>
   13b3c:	ldr	r1, [fp, #-60]	; 0xffffffc4
   13b40:	eor	r0, r1, #2
   13b44:	orr	r0, r0, r8
   13b48:	clz	r0, r0
   13b4c:	lsr	r0, r0, #5
   13b50:	ldr	r2, [fp, #-76]	; 0xffffffb4
   13b54:	tst	r2, r0
   13b58:	bne	13c18 <__assert_fail@plt+0x2b18>
   13b5c:	cmp	r1, #2
   13b60:	ldr	r0, [fp, #-80]	; 0xffffffb0
   13b64:	movwne	r0, #1
   13b68:	orr	r0, r2, r0
   13b6c:	tst	r0, #1
   13b70:	ldreq	r0, [sp, #56]	; 0x38
   13b74:	eoreq	r0, r0, #1
   13b78:	tsteq	r0, #1
   13b7c:	bne	13bb0 <__assert_fail@plt+0x2ab0>
   13b80:	mov	r9, lr
   13b84:	tst	r5, #1
   13b88:	bne	13c80 <__assert_fail@plt+0x2b80>
   13b8c:	ldr	r0, [sp, #72]	; 0x48
   13b90:	cmp	r0, #0
   13b94:	beq	13bb0 <__assert_fail@plt+0x2ab0>
   13b98:	mov	r5, #0
   13b9c:	cmp	r4, #0
   13ba0:	ldr	r0, [sp, #84]	; 0x54
   13ba4:	mov	sl, r2
   13ba8:	ldr	r6, [sp, #72]	; 0x48
   13bac:	beq	12d48 <__assert_fail@plt+0x1c48>
   13bb0:	ldr	r1, [sp, #92]	; 0x5c
   13bb4:	clz	r0, r1
   13bb8:	lsr	r0, r0, #5
   13bbc:	orr	r0, r0, r2
   13bc0:	tst	r0, #1
   13bc4:	bne	13bf0 <__assert_fail@plt+0x2af0>
   13bc8:	ldrb	r0, [r1]
   13bcc:	cmp	r0, #0
   13bd0:	beq	13bf0 <__assert_fail@plt+0x2af0>
   13bd4:	add	r1, r1, #1
   13bd8:	cmp	r8, r4
   13bdc:	strbcc	r0, [r7, r8]
   13be0:	add	r8, r8, #1
   13be4:	ldrb	r0, [r1], #1
   13be8:	cmp	r0, #0
   13bec:	bne	13bd8 <__assert_fail@plt+0x2ad8>
   13bf0:	cmp	r8, r4
   13bf4:	movcc	r0, #0
   13bf8:	strbcc	r0, [r7, r8]
   13bfc:	b	13c74 <__assert_fail@plt+0x2b74>
   13c00:	ldr	ip, [fp, #-84]	; 0xffffffac
   13c04:	mov	lr, r4
   13c08:	mov	r4, r5
   13c0c:	b	13c18 <__assert_fail@plt+0x2b18>
   13c10:	ldr	r7, [sp, #80]	; 0x50
   13c14:	ldr	ip, [fp, #-84]	; 0xffffffac
   13c18:	mov	r0, #0
   13c1c:	ldr	r1, [fp, #12]
   13c20:	bic	r1, r1, #2
   13c24:	ldr	r2, [sp, #84]	; 0x54
   13c28:	tst	r2, #1
   13c2c:	ldr	r3, [fp, #-60]	; 0xffffffc4
   13c30:	mov	r2, r3
   13c34:	movwne	r2, #4
   13c38:	cmp	r3, #2
   13c3c:	movne	r2, r3
   13c40:	str	r2, [sp]
   13c44:	str	r1, [sp, #4]
   13c48:	str	r0, [sp, #8]
   13c4c:	ldr	r0, [sp, #68]	; 0x44
   13c50:	str	r0, [sp, #12]
   13c54:	ldr	r0, [sp, #76]	; 0x4c
   13c58:	str	r0, [sp, #16]
   13c5c:	mov	r0, r7
   13c60:	mov	r1, r4
   13c64:	mov	r2, ip
   13c68:	mov	r3, lr
   13c6c:	bl	12cc0 <__assert_fail@plt+0x1bc0>
   13c70:	mov	r8, r0
   13c74:	mov	r0, r8
   13c78:	sub	sp, fp, #28
   13c7c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13c80:	mov	r0, #5
   13c84:	str	r0, [sp]
   13c88:	ldr	r0, [fp, #12]
   13c8c:	str	r0, [sp, #4]
   13c90:	ldr	r0, [fp, #16]
   13c94:	str	r0, [sp, #8]
   13c98:	ldr	r0, [sp, #68]	; 0x44
   13c9c:	str	r0, [sp, #12]
   13ca0:	ldr	r0, [sp, #76]	; 0x4c
   13ca4:	str	r0, [sp, #16]
   13ca8:	mov	r0, r7
   13cac:	ldr	r1, [sp, #72]	; 0x48
   13cb0:	ldr	r2, [fp, #-84]	; 0xffffffac
   13cb4:	mov	r3, r9
   13cb8:	b	13c6c <__assert_fail@plt+0x2b6c>
   13cbc:	bl	110e8 <abort@plt>
   13cc0:	mov	r3, r2
   13cc4:	mov	r2, #0
   13cc8:	b	13ccc <__assert_fail@plt+0x2bcc>
   13ccc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13cd0:	add	fp, sp, #28
   13cd4:	sub	sp, sp, #36	; 0x24
   13cd8:	mov	r4, r2
   13cdc:	str	r2, [sp, #24]
   13ce0:	mov	r5, r1
   13ce4:	mov	r6, r0
   13ce8:	str	r0, [sp, #20]
   13cec:	movw	r8, #29040	; 0x7170
   13cf0:	movt	r8, #2
   13cf4:	cmp	r3, #0
   13cf8:	movne	r8, r3
   13cfc:	bl	1101c <__errno_location@plt>
   13d00:	str	r0, [sp, #28]
   13d04:	ldm	r8, {r3, r9}
   13d08:	ldr	r1, [r8, #40]	; 0x28
   13d0c:	ldr	r2, [r8, #44]	; 0x2c
   13d10:	ldr	r7, [r0]
   13d14:	str	r7, [sp, #32]
   13d18:	add	sl, r8, #8
   13d1c:	cmp	r4, #0
   13d20:	orreq	r9, r9, #1
   13d24:	stm	sp, {r3, r9, sl}
   13d28:	str	r1, [sp, #12]
   13d2c:	str	r2, [sp, #16]
   13d30:	mov	r0, #0
   13d34:	mov	r1, #0
   13d38:	mov	r2, r6
   13d3c:	mov	r3, r5
   13d40:	mov	r7, r5
   13d44:	bl	12cc0 <__assert_fail@plt+0x1bc0>
   13d48:	mov	r5, r0
   13d4c:	add	r4, r0, #1
   13d50:	mov	r0, r4
   13d54:	bl	14c0c <__assert_fail@plt+0x3b0c>
   13d58:	mov	r6, r0
   13d5c:	ldr	r0, [r8]
   13d60:	ldr	r1, [r8, #40]	; 0x28
   13d64:	ldr	r2, [r8, #44]	; 0x2c
   13d68:	stm	sp, {r0, r9, sl}
   13d6c:	str	r1, [sp, #12]
   13d70:	str	r2, [sp, #16]
   13d74:	mov	r0, r6
   13d78:	mov	r1, r4
   13d7c:	ldr	r2, [sp, #20]
   13d80:	mov	r3, r7
   13d84:	bl	12cc0 <__assert_fail@plt+0x1bc0>
   13d88:	ldr	r0, [sp, #24]
   13d8c:	ldr	r1, [sp, #32]
   13d90:	ldr	r2, [sp, #28]
   13d94:	str	r1, [r2]
   13d98:	cmp	r0, #0
   13d9c:	strne	r5, [r0]
   13da0:	mov	r0, r6
   13da4:	sub	sp, fp, #28
   13da8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13dac:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   13db0:	add	fp, sp, #24
   13db4:	movw	r8, #28920	; 0x70f8
   13db8:	movt	r8, #2
   13dbc:	ldr	r4, [r8]
   13dc0:	movw	r5, #28924	; 0x70fc
   13dc4:	movt	r5, #2
   13dc8:	ldr	r0, [r5]
   13dcc:	cmp	r0, #2
   13dd0:	blt	13dfc <__assert_fail@plt+0x2cfc>
   13dd4:	add	r7, r4, #12
   13dd8:	mov	r6, #0
   13ddc:	ldr	r0, [r7, r6, lsl #3]
   13de0:	bl	12968 <__assert_fail@plt+0x1868>
   13de4:	add	r0, r6, #1
   13de8:	ldr	r1, [r5]
   13dec:	add	r2, r6, #2
   13df0:	cmp	r2, r1
   13df4:	mov	r6, r0
   13df8:	blt	13ddc <__assert_fail@plt+0x2cdc>
   13dfc:	ldr	r0, [r4, #4]
   13e00:	movw	r7, #29088	; 0x71a0
   13e04:	movt	r7, #2
   13e08:	cmp	r0, r7
   13e0c:	beq	13e24 <__assert_fail@plt+0x2d24>
   13e10:	bl	12968 <__assert_fail@plt+0x1868>
   13e14:	movw	r0, #28928	; 0x7100
   13e18:	movt	r0, #2
   13e1c:	mov	r6, #256	; 0x100
   13e20:	strd	r6, [r0]
   13e24:	movw	r6, #28928	; 0x7100
   13e28:	movt	r6, #2
   13e2c:	cmp	r4, r6
   13e30:	beq	13e40 <__assert_fail@plt+0x2d40>
   13e34:	mov	r0, r4
   13e38:	bl	12968 <__assert_fail@plt+0x1868>
   13e3c:	str	r6, [r8]
   13e40:	mov	r0, #1
   13e44:	str	r0, [r5]
   13e48:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   13e4c:	movw	r3, #29040	; 0x7170
   13e50:	movt	r3, #2
   13e54:	mvn	r2, #0
   13e58:	b	13e5c <__assert_fail@plt+0x2d5c>
   13e5c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13e60:	add	fp, sp, #28
   13e64:	sub	sp, sp, #44	; 0x2c
   13e68:	mov	r7, r3
   13e6c:	str	r2, [sp, #36]	; 0x24
   13e70:	str	r1, [sp, #32]
   13e74:	mov	r5, r0
   13e78:	bl	1101c <__errno_location@plt>
   13e7c:	cmp	r5, #0
   13e80:	blt	13fec <__assert_fail@plt+0x2eec>
   13e84:	cmn	r5, #-2147483647	; 0x80000001
   13e88:	beq	13fec <__assert_fail@plt+0x2eec>
   13e8c:	movw	r4, #28920	; 0x70f8
   13e90:	movt	r4, #2
   13e94:	ldr	r6, [r4]
   13e98:	str	r0, [sp, #28]
   13e9c:	ldr	r0, [r0]
   13ea0:	str	r0, [sp, #24]
   13ea4:	movw	r8, #28924	; 0x70fc
   13ea8:	movt	r8, #2
   13eac:	ldr	r1, [r8]
   13eb0:	cmp	r1, r5
   13eb4:	ble	13ec0 <__assert_fail@plt+0x2dc0>
   13eb8:	mov	sl, r6
   13ebc:	b	13f28 <__assert_fail@plt+0x2e28>
   13ec0:	str	r1, [fp, #-32]	; 0xffffffe0
   13ec4:	mov	r0, #8
   13ec8:	str	r0, [sp]
   13ecc:	movw	r9, #28928	; 0x7100
   13ed0:	movt	r9, #2
   13ed4:	subs	r0, r6, r9
   13ed8:	movne	r0, r6
   13edc:	add	r2, r5, #1
   13ee0:	sub	r2, r2, r1
   13ee4:	sub	r1, fp, #32
   13ee8:	mvn	r3, #-2147483648	; 0x80000000
   13eec:	bl	14cf4 <__assert_fail@plt+0x3bf4>
   13ef0:	mov	sl, r0
   13ef4:	str	r0, [r4]
   13ef8:	cmp	r6, r9
   13efc:	ldrdeq	r0, [r9]
   13f00:	stmeq	sl, {r0, r1}
   13f04:	ldr	r1, [r8]
   13f08:	add	r0, sl, r1, lsl #3
   13f0c:	ldr	r2, [fp, #-32]	; 0xffffffe0
   13f10:	sub	r1, r2, r1
   13f14:	lsl	r2, r1, #3
   13f18:	mov	r1, #0
   13f1c:	bl	11034 <memset@plt>
   13f20:	ldr	r0, [fp, #-32]	; 0xffffffe0
   13f24:	str	r0, [r8]
   13f28:	mov	r9, sl
   13f2c:	ldr	r6, [r9, r5, lsl #3]!
   13f30:	ldr	r4, [r9, #4]!
   13f34:	ldm	r7, {r0, r1}
   13f38:	ldr	r2, [r7, #40]	; 0x28
   13f3c:	ldr	r3, [r7, #44]	; 0x2c
   13f40:	orr	r8, r1, #1
   13f44:	add	r1, r7, #8
   13f48:	stm	sp, {r0, r8}
   13f4c:	str	r1, [sp, #20]
   13f50:	add	r0, sp, #8
   13f54:	stm	r0, {r1, r2, r3}
   13f58:	mov	r0, r4
   13f5c:	mov	r1, r6
   13f60:	ldr	r2, [sp, #32]
   13f64:	ldr	r3, [sp, #36]	; 0x24
   13f68:	bl	12cc0 <__assert_fail@plt+0x1bc0>
   13f6c:	cmp	r6, r0
   13f70:	bhi	13fd4 <__assert_fail@plt+0x2ed4>
   13f74:	add	r6, r0, #1
   13f78:	str	r6, [sl, r5, lsl #3]
   13f7c:	movw	r0, #29088	; 0x71a0
   13f80:	movt	r0, #2
   13f84:	cmp	r4, r0
   13f88:	beq	13f94 <__assert_fail@plt+0x2e94>
   13f8c:	mov	r0, r4
   13f90:	bl	12968 <__assert_fail@plt+0x1868>
   13f94:	mov	r0, r6
   13f98:	bl	14c0c <__assert_fail@plt+0x3b0c>
   13f9c:	mov	r4, r0
   13fa0:	str	r0, [r9]
   13fa4:	ldr	r0, [r7]
   13fa8:	ldr	r1, [r7, #40]	; 0x28
   13fac:	ldr	r2, [r7, #44]	; 0x2c
   13fb0:	stm	sp, {r0, r8}
   13fb4:	ldr	r0, [sp, #20]
   13fb8:	add	r3, sp, #8
   13fbc:	stm	r3, {r0, r1, r2}
   13fc0:	mov	r0, r4
   13fc4:	mov	r1, r6
   13fc8:	ldr	r2, [sp, #32]
   13fcc:	ldr	r3, [sp, #36]	; 0x24
   13fd0:	bl	12cc0 <__assert_fail@plt+0x1bc0>
   13fd4:	ldr	r0, [sp, #28]
   13fd8:	ldr	r1, [sp, #24]
   13fdc:	str	r1, [r0]
   13fe0:	mov	r0, r4
   13fe4:	sub	sp, fp, #28
   13fe8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13fec:	bl	110e8 <abort@plt>
   13ff0:	movw	r3, #29040	; 0x7170
   13ff4:	movt	r3, #2
   13ff8:	b	13e5c <__assert_fail@plt+0x2d5c>
   13ffc:	mov	r1, r0
   14000:	mov	r0, #0
   14004:	b	13e4c <__assert_fail@plt+0x2d4c>
   14008:	mov	r2, r1
   1400c:	mov	r1, r0
   14010:	mov	r0, #0
   14014:	b	13ff0 <__assert_fail@plt+0x2ef0>
   14018:	push	{r4, r5, r6, sl, fp, lr}
   1401c:	add	fp, sp, #16
   14020:	sub	sp, sp, #48	; 0x30
   14024:	mov	r4, r2
   14028:	mov	r5, r0
   1402c:	mov	r6, sp
   14030:	mov	r0, r6
   14034:	bl	14054 <__assert_fail@plt+0x2f54>
   14038:	mov	r0, r5
   1403c:	mov	r1, r4
   14040:	mvn	r2, #0
   14044:	mov	r3, r6
   14048:	bl	13e5c <__assert_fail@plt+0x2d5c>
   1404c:	sub	sp, fp, #16
   14050:	pop	{r4, r5, r6, sl, fp, pc}
   14054:	vmov.i32	q8, #0	; 0x00000000
   14058:	mov	r2, #32
   1405c:	mov	r3, r0
   14060:	vst1.32	{d16-d17}, [r3], r2
   14064:	vst1.32	{d16-d17}, [r3]
   14068:	add	r2, r0, #16
   1406c:	vst1.32	{d16-d17}, [r2]
   14070:	cmp	r1, #10
   14074:	strne	r1, [r0]
   14078:	bxne	lr
   1407c:	push	{fp, lr}
   14080:	mov	fp, sp
   14084:	bl	110e8 <abort@plt>
   14088:	push	{r4, r5, r6, r7, fp, lr}
   1408c:	add	fp, sp, #16
   14090:	sub	sp, sp, #48	; 0x30
   14094:	mov	r4, r3
   14098:	mov	r5, r2
   1409c:	mov	r6, r0
   140a0:	mov	r7, sp
   140a4:	mov	r0, r7
   140a8:	bl	14054 <__assert_fail@plt+0x2f54>
   140ac:	mov	r0, r6
   140b0:	mov	r1, r5
   140b4:	mov	r2, r4
   140b8:	mov	r3, r7
   140bc:	bl	13e5c <__assert_fail@plt+0x2d5c>
   140c0:	sub	sp, fp, #16
   140c4:	pop	{r4, r5, r6, r7, fp, pc}
   140c8:	mov	r2, r1
   140cc:	mov	r1, r0
   140d0:	mov	r0, #0
   140d4:	b	14018 <__assert_fail@plt+0x2f18>
   140d8:	mov	r3, r2
   140dc:	mov	r2, r1
   140e0:	mov	r1, r0
   140e4:	mov	r0, #0
   140e8:	b	14088 <__assert_fail@plt+0x2f88>
   140ec:	push	{r4, r5, r6, sl, fp, lr}
   140f0:	add	fp, sp, #16
   140f4:	sub	sp, sp, #48	; 0x30
   140f8:	mov	r4, r1
   140fc:	mov	r5, r0
   14100:	mov	r0, #32
   14104:	movw	r1, #29040	; 0x7170
   14108:	movt	r1, #2
   1410c:	add	r3, r1, #16
   14110:	vld1.64	{d16-d17}, [r1], r0
   14114:	mov	r6, sp
   14118:	vld1.64	{d18-d19}, [r3]
   1411c:	add	r3, r6, #16
   14120:	vld1.64	{d20-d21}, [r1]
   14124:	vst1.64	{d18-d19}, [r3]
   14128:	mov	r1, r6
   1412c:	vst1.64	{d16-d17}, [r1], r0
   14130:	vst1.64	{d20-d21}, [r1]
   14134:	mov	r0, r6
   14138:	mov	r1, r2
   1413c:	mov	r2, #1
   14140:	bl	12bb4 <__assert_fail@plt+0x1ab4>
   14144:	mov	r0, #0
   14148:	mov	r1, r5
   1414c:	mov	r2, r4
   14150:	mov	r3, r6
   14154:	bl	13e5c <__assert_fail@plt+0x2d5c>
   14158:	sub	sp, fp, #16
   1415c:	pop	{r4, r5, r6, sl, fp, pc}
   14160:	mov	r2, r1
   14164:	mvn	r1, #0
   14168:	b	140ec <__assert_fail@plt+0x2fec>
   1416c:	mov	r1, #58	; 0x3a
   14170:	b	14160 <__assert_fail@plt+0x3060>
   14174:	mov	r2, #58	; 0x3a
   14178:	b	140ec <__assert_fail@plt+0x2fec>
   1417c:	push	{r4, r5, r6, sl, fp, lr}
   14180:	add	fp, sp, #16
   14184:	sub	sp, sp, #48	; 0x30
   14188:	mov	r4, r2
   1418c:	mov	r5, r0
   14190:	mov	r6, sp
   14194:	mov	r0, r6
   14198:	bl	14054 <__assert_fail@plt+0x2f54>
   1419c:	mov	r0, r6
   141a0:	mov	r1, #58	; 0x3a
   141a4:	mov	r2, #1
   141a8:	bl	12bb4 <__assert_fail@plt+0x1ab4>
   141ac:	mov	r0, r5
   141b0:	mov	r1, r4
   141b4:	mvn	r2, #0
   141b8:	mov	r3, r6
   141bc:	bl	13e5c <__assert_fail@plt+0x2d5c>
   141c0:	sub	sp, fp, #16
   141c4:	pop	{r4, r5, r6, sl, fp, pc}
   141c8:	push	{fp, lr}
   141cc:	mov	fp, sp
   141d0:	sub	sp, sp, #8
   141d4:	mvn	ip, #0
   141d8:	str	ip, [sp]
   141dc:	bl	141e8 <__assert_fail@plt+0x30e8>
   141e0:	mov	sp, fp
   141e4:	pop	{fp, pc}
   141e8:	push	{r4, r5, r6, r7, fp, lr}
   141ec:	add	fp, sp, #16
   141f0:	sub	sp, sp, #48	; 0x30
   141f4:	mov	r7, r3
   141f8:	mov	r5, r0
   141fc:	mov	r0, #32
   14200:	movw	r3, #29040	; 0x7170
   14204:	movt	r3, #2
   14208:	add	r4, r3, #16
   1420c:	vld1.64	{d16-d17}, [r3], r0
   14210:	mov	r6, sp
   14214:	vld1.64	{d18-d19}, [r4]
   14218:	add	r4, r6, #16
   1421c:	vld1.64	{d20-d21}, [r3]
   14220:	vst1.64	{d18-d19}, [r4]
   14224:	mov	r3, r6
   14228:	vst1.64	{d16-d17}, [r3], r0
   1422c:	vst1.64	{d20-d21}, [r3]
   14230:	mov	r0, r6
   14234:	bl	12c0c <__assert_fail@plt+0x1b0c>
   14238:	ldr	r2, [fp, #8]
   1423c:	mov	r0, r5
   14240:	mov	r1, r7
   14244:	mov	r3, r6
   14248:	bl	13e5c <__assert_fail@plt+0x2d5c>
   1424c:	sub	sp, fp, #16
   14250:	pop	{r4, r5, r6, r7, fp, pc}
   14254:	mov	r3, r2
   14258:	mov	r2, r1
   1425c:	mov	r1, r0
   14260:	mov	r0, #0
   14264:	b	141c8 <__assert_fail@plt+0x30c8>
   14268:	push	{fp, lr}
   1426c:	mov	fp, sp
   14270:	sub	sp, sp, #8
   14274:	mov	ip, r2
   14278:	mov	r2, r1
   1427c:	mov	r1, r0
   14280:	str	r3, [sp]
   14284:	mov	r0, #0
   14288:	mov	r3, ip
   1428c:	bl	141e8 <__assert_fail@plt+0x30e8>
   14290:	mov	sp, fp
   14294:	pop	{fp, pc}
   14298:	movw	r3, #28936	; 0x7108
   1429c:	movt	r3, #2
   142a0:	b	13e5c <__assert_fail@plt+0x2d5c>
   142a4:	mov	r2, r1
   142a8:	mov	r1, r0
   142ac:	mov	r0, #0
   142b0:	b	14298 <__assert_fail@plt+0x3198>
   142b4:	mvn	r2, #0
   142b8:	b	14298 <__assert_fail@plt+0x3198>
   142bc:	mov	r1, r0
   142c0:	mov	r0, #0
   142c4:	b	142b4 <__assert_fail@plt+0x31b4>
   142c8:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   142cc:	add	fp, sp, #24
   142d0:	sub	sp, sp, #16
   142d4:	mov	r4, r1
   142d8:	mov	r5, r0
   142dc:	mov	r7, #0
   142e0:	mov	r0, #0
   142e4:	mov	r1, r5
   142e8:	mov	r2, #5
   142ec:	bl	10f2c <dcgettext@plt>
   142f0:	cmp	r0, r5
   142f4:	beq	14300 <__assert_fail@plt+0x3200>
   142f8:	sub	sp, fp, #24
   142fc:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14300:	bl	159f0 <__assert_fail@plt+0x48f0>
   14304:	mov	r6, r0
   14308:	mov	r8, #56	; 0x38
   1430c:	mov	r0, #45	; 0x2d
   14310:	stm	sp, {r0, r8}
   14314:	str	r7, [sp, #8]
   14318:	str	r7, [sp, #12]
   1431c:	mov	r0, r6
   14320:	mov	r1, #85	; 0x55
   14324:	mov	r2, #84	; 0x54
   14328:	mov	r3, #70	; 0x46
   1432c:	bl	143c4 <__assert_fail@plt+0x32c4>
   14330:	cmp	r0, #0
   14334:	beq	14350 <__assert_fail@plt+0x3250>
   14338:	ldrb	r1, [r5]
   1433c:	movw	r2, #26117	; 0x6605
   14340:	movt	r2, #1
   14344:	movw	r0, #26121	; 0x6609
   14348:	movt	r0, #1
   1434c:	b	14394 <__assert_fail@plt+0x3294>
   14350:	mov	r0, #48	; 0x30
   14354:	mov	r1, #51	; 0x33
   14358:	str	r8, [sp]
   1435c:	stmib	sp, {r0, r1}
   14360:	str	r0, [sp, #12]
   14364:	mov	r0, r6
   14368:	mov	r1, #71	; 0x47
   1436c:	mov	r2, #66	; 0x42
   14370:	mov	r3, #49	; 0x31
   14374:	bl	143c4 <__assert_fail@plt+0x32c4>
   14378:	cmp	r0, #0
   1437c:	beq	143a4 <__assert_fail@plt+0x32a4>
   14380:	ldrb	r1, [r5]
   14384:	movw	r2, #26125	; 0x660d
   14388:	movt	r2, #1
   1438c:	movw	r0, #26129	; 0x6611
   14390:	movt	r0, #1
   14394:	cmp	r1, #96	; 0x60
   14398:	moveq	r0, r2
   1439c:	sub	sp, fp, #24
   143a0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   143a4:	movw	r1, #26111	; 0x65ff
   143a8:	movt	r1, #1
   143ac:	movw	r0, #26115	; 0x6603
   143b0:	movt	r0, #1
   143b4:	cmp	r4, #9
   143b8:	moveq	r0, r1
   143bc:	sub	sp, fp, #24
   143c0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   143c4:	push	{r4, r5, r6, r7, fp, lr}
   143c8:	add	fp, sp, #16
   143cc:	sub	sp, sp, #16
   143d0:	mov	r4, r3
   143d4:	mov	r5, r2
   143d8:	mov	r7, r1
   143dc:	mov	r6, r0
   143e0:	mov	r0, r1
   143e4:	bl	158f8 <__assert_fail@plt+0x47f8>
   143e8:	ldrb	r1, [r6]
   143ec:	cmp	r0, #0
   143f0:	andne	r1, r1, #223	; 0xdf
   143f4:	mov	r0, #0
   143f8:	cmp	r1, r7
   143fc:	bne	1443c <__assert_fail@plt+0x333c>
   14400:	cmp	r7, #0
   14404:	moveq	r0, #1
   14408:	subeq	sp, fp, #16
   1440c:	popeq	{r4, r5, r6, r7, fp, pc}
   14410:	ldr	r0, [fp, #20]
   14414:	ldr	r1, [fp, #16]
   14418:	ldr	r2, [fp, #12]
   1441c:	ldr	r3, [fp, #8]
   14420:	str	r2, [sp]
   14424:	str	r1, [sp, #4]
   14428:	str	r0, [sp, #8]
   1442c:	mov	r0, r6
   14430:	mov	r1, r5
   14434:	mov	r2, r4
   14438:	bl	14444 <__assert_fail@plt+0x3344>
   1443c:	sub	sp, fp, #16
   14440:	pop	{r4, r5, r6, r7, fp, pc}
   14444:	push	{r4, r5, r6, r7, fp, lr}
   14448:	add	fp, sp, #16
   1444c:	sub	sp, sp, #8
   14450:	mov	r4, r3
   14454:	mov	r5, r2
   14458:	mov	r7, r1
   1445c:	mov	r6, r0
   14460:	mov	r0, r1
   14464:	bl	158f8 <__assert_fail@plt+0x47f8>
   14468:	ldrb	r1, [r6, #1]
   1446c:	cmp	r0, #0
   14470:	andne	r1, r1, #223	; 0xdf
   14474:	mov	r0, #0
   14478:	cmp	r1, r7
   1447c:	bne	144b4 <__assert_fail@plt+0x33b4>
   14480:	cmp	r7, #0
   14484:	moveq	r0, #1
   14488:	subeq	sp, fp, #16
   1448c:	popeq	{r4, r5, r6, r7, fp, pc}
   14490:	ldr	r0, [fp, #16]
   14494:	ldr	r1, [fp, #12]
   14498:	ldr	r3, [fp, #8]
   1449c:	str	r1, [sp]
   144a0:	str	r0, [sp, #4]
   144a4:	mov	r0, r6
   144a8:	mov	r1, r5
   144ac:	mov	r2, r4
   144b0:	bl	144bc <__assert_fail@plt+0x33bc>
   144b4:	sub	sp, fp, #16
   144b8:	pop	{r4, r5, r6, r7, fp, pc}
   144bc:	push	{r4, r5, r6, r7, fp, lr}
   144c0:	add	fp, sp, #16
   144c4:	sub	sp, sp, #8
   144c8:	mov	r4, r3
   144cc:	mov	r5, r2
   144d0:	mov	r7, r1
   144d4:	mov	r6, r0
   144d8:	mov	r0, r1
   144dc:	bl	158f8 <__assert_fail@plt+0x47f8>
   144e0:	ldrb	r1, [r6, #2]
   144e4:	cmp	r0, #0
   144e8:	andne	r1, r1, #223	; 0xdf
   144ec:	mov	r0, #0
   144f0:	cmp	r1, r7
   144f4:	bne	14524 <__assert_fail@plt+0x3424>
   144f8:	cmp	r7, #0
   144fc:	moveq	r0, #1
   14500:	subeq	sp, fp, #16
   14504:	popeq	{r4, r5, r6, r7, fp, pc}
   14508:	ldr	r0, [fp, #12]
   1450c:	ldr	r3, [fp, #8]
   14510:	str	r0, [sp]
   14514:	mov	r0, r6
   14518:	mov	r1, r5
   1451c:	mov	r2, r4
   14520:	bl	1452c <__assert_fail@plt+0x342c>
   14524:	sub	sp, fp, #16
   14528:	pop	{r4, r5, r6, r7, fp, pc}
   1452c:	push	{r4, r5, r6, r7, fp, lr}
   14530:	add	fp, sp, #16
   14534:	mov	r4, r3
   14538:	mov	r5, r2
   1453c:	mov	r7, r1
   14540:	mov	r6, r0
   14544:	mov	r0, r1
   14548:	bl	158f8 <__assert_fail@plt+0x47f8>
   1454c:	ldrb	r1, [r6, #3]
   14550:	ldr	r3, [fp, #8]
   14554:	cmp	r0, #0
   14558:	andne	r1, r1, #223	; 0xdf
   1455c:	mov	r0, #0
   14560:	cmp	r1, r7
   14564:	popne	{r4, r5, r6, r7, fp, pc}
   14568:	cmp	r7, #0
   1456c:	beq	14584 <__assert_fail@plt+0x3484>
   14570:	mov	r0, r6
   14574:	mov	r1, r5
   14578:	mov	r2, r4
   1457c:	pop	{r4, r5, r6, r7, fp, lr}
   14580:	b	1458c <__assert_fail@plt+0x348c>
   14584:	mov	r0, #1
   14588:	pop	{r4, r5, r6, r7, fp, pc}
   1458c:	push	{r4, r5, r6, r7, fp, lr}
   14590:	add	fp, sp, #16
   14594:	mov	r4, r3
   14598:	mov	r5, r2
   1459c:	mov	r7, r1
   145a0:	mov	r6, r0
   145a4:	mov	r0, r1
   145a8:	bl	158f8 <__assert_fail@plt+0x47f8>
   145ac:	ldrb	r1, [r6, #4]
   145b0:	cmp	r0, #0
   145b4:	andne	r1, r1, #223	; 0xdf
   145b8:	mov	r0, #0
   145bc:	cmp	r1, r7
   145c0:	popne	{r4, r5, r6, r7, fp, pc}
   145c4:	cmp	r7, #0
   145c8:	beq	145e0 <__assert_fail@plt+0x34e0>
   145cc:	mov	r0, r6
   145d0:	mov	r1, r5
   145d4:	mov	r2, r4
   145d8:	pop	{r4, r5, r6, r7, fp, lr}
   145dc:	b	145e8 <__assert_fail@plt+0x34e8>
   145e0:	mov	r0, #1
   145e4:	pop	{r4, r5, r6, r7, fp, pc}
   145e8:	push	{r4, r5, r6, sl, fp, lr}
   145ec:	add	fp, sp, #16
   145f0:	mov	r4, r2
   145f4:	mov	r6, r1
   145f8:	mov	r5, r0
   145fc:	mov	r0, r1
   14600:	bl	158f8 <__assert_fail@plt+0x47f8>
   14604:	ldrb	r1, [r5, #5]
   14608:	cmp	r0, #0
   1460c:	andne	r1, r1, #223	; 0xdf
   14610:	mov	r0, #0
   14614:	cmp	r1, r6
   14618:	popne	{r4, r5, r6, sl, fp, pc}
   1461c:	cmp	r6, #0
   14620:	beq	14634 <__assert_fail@plt+0x3534>
   14624:	mov	r0, r5
   14628:	mov	r1, r4
   1462c:	pop	{r4, r5, r6, sl, fp, lr}
   14630:	b	1463c <__assert_fail@plt+0x353c>
   14634:	mov	r0, #1
   14638:	pop	{r4, r5, r6, sl, fp, pc}
   1463c:	push	{r4, r5, fp, lr}
   14640:	add	fp, sp, #8
   14644:	mov	r5, r1
   14648:	mov	r4, r0
   1464c:	mov	r0, r1
   14650:	bl	158f8 <__assert_fail@plt+0x47f8>
   14654:	ldrb	r1, [r4, #6]
   14658:	cmp	r0, #0
   1465c:	andne	r1, r1, #223	; 0xdf
   14660:	mov	r0, #0
   14664:	cmp	r1, r5
   14668:	popne	{r4, r5, fp, pc}
   1466c:	cmp	r5, #0
   14670:	beq	14680 <__assert_fail@plt+0x3580>
   14674:	mov	r0, r4
   14678:	pop	{r4, r5, fp, lr}
   1467c:	b	14688 <__assert_fail@plt+0x3588>
   14680:	mov	r0, #1
   14684:	pop	{r4, r5, fp, pc}
   14688:	push	{r4, sl, fp, lr}
   1468c:	add	fp, sp, #8
   14690:	mov	r4, r0
   14694:	mov	r0, #0
   14698:	bl	158f8 <__assert_fail@plt+0x47f8>
   1469c:	ldrb	r1, [r4, #7]
   146a0:	cmp	r0, #0
   146a4:	beq	146bc <__assert_fail@plt+0x35bc>
   146a8:	tst	r1, #223	; 0xdf
   146ac:	moveq	r0, #1
   146b0:	popeq	{r4, sl, fp, pc}
   146b4:	mov	r0, #0
   146b8:	pop	{r4, sl, fp, pc}
   146bc:	cmp	r1, #0
   146c0:	moveq	r0, #1
   146c4:	popeq	{r4, sl, fp, pc}
   146c8:	mov	r0, #0
   146cc:	pop	{r4, sl, fp, pc}
   146d0:	cmp	r2, #0
   146d4:	beq	14704 <__assert_fail@plt+0x3604>
   146d8:	mvn	r3, #0
   146dc:	udiv	r3, r3, r2
   146e0:	cmp	r3, r1
   146e4:	bcs	14704 <__assert_fail@plt+0x3604>
   146e8:	push	{fp, lr}
   146ec:	mov	fp, sp
   146f0:	bl	1101c <__errno_location@plt>
   146f4:	mov	r1, #12
   146f8:	str	r1, [r0]
   146fc:	mov	r0, #0
   14700:	pop	{fp, pc}
   14704:	mul	r1, r2, r1
   14708:	b	155e0 <__assert_fail@plt+0x44e0>
   1470c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   14710:	add	fp, sp, #24
   14714:	sub	sp, sp, #32
   14718:	mov	r4, r2
   1471c:	mov	r8, r0
   14720:	ldr	r6, [fp, #12]
   14724:	ldr	r7, [fp, #8]
   14728:	cmp	r1, #0
   1472c:	beq	14754 <__assert_fail@plt+0x3654>
   14730:	mov	r5, r1
   14734:	str	r4, [sp]
   14738:	str	r3, [sp, #4]
   1473c:	movw	r2, #26216	; 0x6668
   14740:	movt	r2, #1
   14744:	mov	r0, r8
   14748:	mov	r1, #1
   1474c:	mov	r3, r5
   14750:	b	1476c <__assert_fail@plt+0x366c>
   14754:	str	r3, [sp]
   14758:	movw	r2, #26228	; 0x6674
   1475c:	movt	r2, #1
   14760:	mov	r0, r8
   14764:	mov	r1, #1
   14768:	mov	r3, r4
   1476c:	bl	11058 <__fprintf_chk@plt>
   14770:	movw	r1, #26235	; 0x667b
   14774:	movt	r1, #1
   14778:	mov	r0, #0
   1477c:	mov	r2, #5
   14780:	bl	10f2c <dcgettext@plt>
   14784:	mov	r3, r0
   14788:	movw	r0, #2022	; 0x7e6
   1478c:	str	r0, [sp]
   14790:	movw	r2, #26953	; 0x6949
   14794:	movt	r2, #1
   14798:	mov	r0, r8
   1479c:	mov	r1, #1
   147a0:	bl	11058 <__fprintf_chk@plt>
   147a4:	movw	r4, #25407	; 0x633f
   147a8:	movt	r4, #1
   147ac:	mov	r0, r4
   147b0:	mov	r1, r8
   147b4:	bl	10e90 <fputs_unlocked@plt>
   147b8:	movw	r1, #26239	; 0x667f
   147bc:	movt	r1, #1
   147c0:	mov	r0, #0
   147c4:	mov	r2, #5
   147c8:	bl	10f2c <dcgettext@plt>
   147cc:	mov	r2, r0
   147d0:	movw	r3, #26410	; 0x672a
   147d4:	movt	r3, #1
   147d8:	mov	r0, r8
   147dc:	mov	r1, #1
   147e0:	bl	11058 <__fprintf_chk@plt>
   147e4:	mov	r0, r4
   147e8:	mov	r1, r8
   147ec:	bl	10e90 <fputs_unlocked@plt>
   147f0:	cmp	r6, #9
   147f4:	bhi	14830 <__assert_fail@plt+0x3730>
   147f8:	add	r0, pc, #0
   147fc:	ldr	pc, [r0, r6, lsl #2]
   14800:	andeq	r4, r1, r8, lsr #16
   14804:	andeq	r4, r1, ip, lsr r8
   14808:	andeq	r4, r1, ip, ror #16
   1480c:	muleq	r1, r4, r8
   14810:			; <UNDEFINED> instruction: 0x000148bc
   14814:	andeq	r4, r1, r4, ror #17
   14818:	andeq	r4, r1, ip, lsl #18
   1481c:	andeq	r4, r1, r4, asr #18
   14820:	andeq	r4, r1, r4, ror #19
   14824:	andeq	r4, r1, ip, lsl #19
   14828:	sub	sp, fp, #24
   1482c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14830:	movw	r1, #26763	; 0x688b
   14834:	movt	r1, #1
   14838:	b	14994 <__assert_fail@plt+0x3894>
   1483c:	movw	r1, #26444	; 0x674c
   14840:	movt	r1, #1
   14844:	mov	r0, #0
   14848:	mov	r2, #5
   1484c:	bl	10f2c <dcgettext@plt>
   14850:	mov	r2, r0
   14854:	ldr	r3, [r7]
   14858:	mov	r0, r8
   1485c:	mov	r1, #1
   14860:	sub	sp, fp, #24
   14864:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   14868:	b	11058 <__fprintf_chk@plt>
   1486c:	movw	r1, #26460	; 0x675c
   14870:	movt	r1, #1
   14874:	mov	r0, #0
   14878:	mov	r2, #5
   1487c:	bl	10f2c <dcgettext@plt>
   14880:	mov	r2, r0
   14884:	ldr	r3, [r7]
   14888:	ldr	r0, [r7, #4]
   1488c:	str	r0, [sp]
   14890:	b	14980 <__assert_fail@plt+0x3880>
   14894:	movw	r1, #26483	; 0x6773
   14898:	movt	r1, #1
   1489c:	mov	r0, #0
   148a0:	mov	r2, #5
   148a4:	bl	10f2c <dcgettext@plt>
   148a8:	mov	r2, r0
   148ac:	ldr	r3, [r7]
   148b0:	ldmib	r7, {r0, r1}
   148b4:	stm	sp, {r0, r1}
   148b8:	b	14980 <__assert_fail@plt+0x3880>
   148bc:	movw	r1, #26511	; 0x678f
   148c0:	movt	r1, #1
   148c4:	mov	r0, #0
   148c8:	mov	r2, #5
   148cc:	bl	10f2c <dcgettext@plt>
   148d0:	mov	r2, r0
   148d4:	ldr	r3, [r7]
   148d8:	ldmib	r7, {r0, r1, r7}
   148dc:	stm	sp, {r0, r1, r7}
   148e0:	b	14980 <__assert_fail@plt+0x3880>
   148e4:	movw	r1, #26543	; 0x67af
   148e8:	movt	r1, #1
   148ec:	mov	r0, #0
   148f0:	mov	r2, #5
   148f4:	bl	10f2c <dcgettext@plt>
   148f8:	mov	r2, r0
   148fc:	ldr	r3, [r7]
   14900:	ldmib	r7, {r0, r1, r6, r7}
   14904:	stm	sp, {r0, r1, r6, r7}
   14908:	b	14980 <__assert_fail@plt+0x3880>
   1490c:	movw	r1, #26579	; 0x67d3
   14910:	movt	r1, #1
   14914:	mov	r0, #0
   14918:	mov	r2, #5
   1491c:	bl	10f2c <dcgettext@plt>
   14920:	mov	r2, r0
   14924:	ldr	r3, [r7]
   14928:	ldmib	r7, {r0, r1, r6}
   1492c:	ldr	r5, [r7, #16]
   14930:	ldr	r7, [r7, #20]
   14934:	stm	sp, {r0, r1, r6}
   14938:	str	r5, [sp, #12]
   1493c:	str	r7, [sp, #16]
   14940:	b	14980 <__assert_fail@plt+0x3880>
   14944:	movw	r1, #26619	; 0x67fb
   14948:	movt	r1, #1
   1494c:	mov	r0, #0
   14950:	mov	r2, #5
   14954:	bl	10f2c <dcgettext@plt>
   14958:	mov	r2, r0
   1495c:	ldr	r3, [r7]
   14960:	ldmib	r7, {r0, r1, r6}
   14964:	ldr	r5, [r7, #16]
   14968:	ldr	r4, [r7, #20]
   1496c:	ldr	r7, [r7, #24]
   14970:	stm	sp, {r0, r1, r6}
   14974:	str	r5, [sp, #12]
   14978:	str	r4, [sp, #16]
   1497c:	str	r7, [sp, #20]
   14980:	mov	r0, r8
   14984:	mov	r1, #1
   14988:	b	14a34 <__assert_fail@plt+0x3934>
   1498c:	movw	r1, #26711	; 0x6857
   14990:	movt	r1, #1
   14994:	mov	r0, #0
   14998:	mov	r2, #5
   1499c:	bl	10f2c <dcgettext@plt>
   149a0:	mov	ip, r0
   149a4:	ldr	r3, [r7]
   149a8:	ldr	r0, [r7, #4]
   149ac:	ldr	r1, [r7, #8]
   149b0:	ldr	r6, [r7, #12]
   149b4:	ldr	r5, [r7, #16]
   149b8:	ldr	r4, [r7, #20]
   149bc:	ldr	r2, [r7, #24]
   149c0:	ldr	lr, [r7, #28]
   149c4:	ldr	r7, [r7, #32]
   149c8:	stm	sp, {r0, r1, r6}
   149cc:	str	r5, [sp, #12]
   149d0:	str	r4, [sp, #16]
   149d4:	str	r2, [sp, #20]
   149d8:	str	lr, [sp, #24]
   149dc:	str	r7, [sp, #28]
   149e0:	b	14a28 <__assert_fail@plt+0x3928>
   149e4:	movw	r1, #26663	; 0x6827
   149e8:	movt	r1, #1
   149ec:	mov	r0, #0
   149f0:	mov	r2, #5
   149f4:	bl	10f2c <dcgettext@plt>
   149f8:	mov	ip, r0
   149fc:	ldr	r3, [r7]
   14a00:	ldmib	r7, {r0, r1, r6}
   14a04:	ldr	r5, [r7, #16]
   14a08:	ldr	r4, [r7, #20]
   14a0c:	ldr	r2, [r7, #24]
   14a10:	ldr	r7, [r7, #28]
   14a14:	stm	sp, {r0, r1, r6}
   14a18:	str	r5, [sp, #12]
   14a1c:	str	r4, [sp, #16]
   14a20:	str	r2, [sp, #20]
   14a24:	str	r7, [sp, #24]
   14a28:	mov	r0, r8
   14a2c:	mov	r1, #1
   14a30:	mov	r2, ip
   14a34:	bl	11058 <__fprintf_chk@plt>
   14a38:	sub	sp, fp, #24
   14a3c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14a40:	push	{r4, sl, fp, lr}
   14a44:	add	fp, sp, #8
   14a48:	sub	sp, sp, #8
   14a4c:	mov	lr, #0
   14a50:	ldr	ip, [fp, #8]
   14a54:	ldr	r4, [ip, lr, lsl #2]
   14a58:	add	lr, lr, #1
   14a5c:	cmp	r4, #0
   14a60:	bne	14a54 <__assert_fail@plt+0x3954>
   14a64:	sub	r4, lr, #1
   14a68:	str	ip, [sp]
   14a6c:	str	r4, [sp, #4]
   14a70:	bl	1470c <__assert_fail@plt+0x360c>
   14a74:	sub	sp, fp, #8
   14a78:	pop	{r4, sl, fp, pc}
   14a7c:	push	{r4, r5, fp, lr}
   14a80:	add	fp, sp, #8
   14a84:	sub	sp, sp, #48	; 0x30
   14a88:	mov	ip, #0
   14a8c:	ldr	r4, [fp, #8]
   14a90:	add	lr, sp, #8
   14a94:	ldr	r5, [r4]
   14a98:	str	r5, [lr, ip, lsl #2]
   14a9c:	cmp	r5, #0
   14aa0:	beq	14ab4 <__assert_fail@plt+0x39b4>
   14aa4:	add	ip, ip, #1
   14aa8:	add	r4, r4, #4
   14aac:	cmp	ip, #10
   14ab0:	bcc	14a94 <__assert_fail@plt+0x3994>
   14ab4:	str	lr, [sp]
   14ab8:	str	ip, [sp, #4]
   14abc:	bl	1470c <__assert_fail@plt+0x360c>
   14ac0:	sub	sp, fp, #8
   14ac4:	pop	{r4, r5, fp, pc}
   14ac8:	push	{fp, lr}
   14acc:	mov	fp, sp
   14ad0:	sub	sp, sp, #8
   14ad4:	add	ip, fp, #8
   14ad8:	str	ip, [sp, #4]
   14adc:	str	ip, [sp]
   14ae0:	bl	14a7c <__assert_fail@plt+0x397c>
   14ae4:	mov	sp, fp
   14ae8:	pop	{fp, pc}
   14aec:	push	{fp, lr}
   14af0:	mov	fp, sp
   14af4:	movw	r0, #29012	; 0x7154
   14af8:	movt	r0, #2
   14afc:	ldr	r1, [r0]
   14b00:	movw	r0, #25407	; 0x633f
   14b04:	movt	r0, #1
   14b08:	bl	10e90 <fputs_unlocked@plt>
   14b0c:	movw	r1, #26823	; 0x68c7
   14b10:	movt	r1, #1
   14b14:	mov	r0, #0
   14b18:	mov	r2, #5
   14b1c:	bl	10f2c <dcgettext@plt>
   14b20:	mov	r1, r0
   14b24:	movw	r2, #26843	; 0x68db
   14b28:	movt	r2, #1
   14b2c:	mov	r0, #1
   14b30:	bl	11040 <__printf_chk@plt>
   14b34:	movw	r1, #26865	; 0x68f1
   14b38:	movt	r1, #1
   14b3c:	mov	r0, #0
   14b40:	mov	r2, #5
   14b44:	bl	10f2c <dcgettext@plt>
   14b48:	mov	r1, r0
   14b4c:	movw	r2, #24917	; 0x6155
   14b50:	movt	r2, #1
   14b54:	movw	r3, #25216	; 0x6280
   14b58:	movt	r3, #1
   14b5c:	mov	r0, #1
   14b60:	bl	11040 <__printf_chk@plt>
   14b64:	movw	r1, #26885	; 0x6905
   14b68:	movt	r1, #1
   14b6c:	mov	r0, #0
   14b70:	mov	r2, #5
   14b74:	bl	10f2c <dcgettext@plt>
   14b78:	mov	r1, r0
   14b7c:	movw	r2, #26924	; 0x692c
   14b80:	movt	r2, #1
   14b84:	mov	r0, #1
   14b88:	pop	{fp, lr}
   14b8c:	b	11040 <__printf_chk@plt>
   14b90:	b	14b94 <__assert_fail@plt+0x3a94>
   14b94:	push	{r4, r5, r6, sl, fp, lr}
   14b98:	add	fp, sp, #16
   14b9c:	mov	r4, r2
   14ba0:	mov	r5, r1
   14ba4:	mov	r6, r0
   14ba8:	bl	146d0 <__assert_fail@plt+0x35d0>
   14bac:	cmp	r0, #0
   14bb0:	popne	{r4, r5, r6, sl, fp, pc}
   14bb4:	cmp	r6, #0
   14bb8:	beq	14bcc <__assert_fail@plt+0x3acc>
   14bbc:	cmp	r5, #0
   14bc0:	cmpne	r4, #0
   14bc4:	bne	14bcc <__assert_fail@plt+0x3acc>
   14bc8:	pop	{r4, r5, r6, sl, fp, pc}
   14bcc:	bl	14f80 <__assert_fail@plt+0x3e80>
   14bd0:	push	{fp, lr}
   14bd4:	mov	fp, sp
   14bd8:	bl	155b0 <__assert_fail@plt+0x44b0>
   14bdc:	bl	14be4 <__assert_fail@plt+0x3ae4>
   14be0:	pop	{fp, pc}
   14be4:	cmp	r0, #0
   14be8:	bxne	lr
   14bec:	push	{fp, lr}
   14bf0:	mov	fp, sp
   14bf4:	bl	14f80 <__assert_fail@plt+0x3e80>
   14bf8:	push	{fp, lr}
   14bfc:	mov	fp, sp
   14c00:	bl	12a50 <__assert_fail@plt+0x1950>
   14c04:	bl	14be4 <__assert_fail@plt+0x3ae4>
   14c08:	pop	{fp, pc}
   14c0c:	b	14bd0 <__assert_fail@plt+0x3ad0>
   14c10:	push	{r4, r5, fp, lr}
   14c14:	add	fp, sp, #8
   14c18:	mov	r4, r1
   14c1c:	mov	r5, r0
   14c20:	bl	155e0 <__assert_fail@plt+0x44e0>
   14c24:	cmp	r0, #0
   14c28:	popne	{r4, r5, fp, pc}
   14c2c:	cmp	r5, #0
   14c30:	beq	14c40 <__assert_fail@plt+0x3b40>
   14c34:	cmp	r4, #0
   14c38:	bne	14c40 <__assert_fail@plt+0x3b40>
   14c3c:	pop	{r4, r5, fp, pc}
   14c40:	bl	14f80 <__assert_fail@plt+0x3e80>
   14c44:	push	{fp, lr}
   14c48:	mov	fp, sp
   14c4c:	bl	12a54 <__assert_fail@plt+0x1954>
   14c50:	bl	14be4 <__assert_fail@plt+0x3ae4>
   14c54:	pop	{fp, pc}
   14c58:	push	{fp, lr}
   14c5c:	mov	fp, sp
   14c60:	bl	12a64 <__assert_fail@plt+0x1964>
   14c64:	bl	14be4 <__assert_fail@plt+0x3ae4>
   14c68:	pop	{fp, pc}
   14c6c:	push	{fp, lr}
   14c70:	mov	fp, sp
   14c74:	mov	r2, r1
   14c78:	mov	r1, r0
   14c7c:	mov	r0, #0
   14c80:	bl	14b94 <__assert_fail@plt+0x3a94>
   14c84:	pop	{fp, pc}
   14c88:	mov	r2, r1
   14c8c:	mov	r1, r0
   14c90:	mov	r0, #0
   14c94:	b	14c58 <__assert_fail@plt+0x3b58>
   14c98:	mov	r2, #1
   14c9c:	b	14ca0 <__assert_fail@plt+0x3ba0>
   14ca0:	push	{r4, r5, fp, lr}
   14ca4:	add	fp, sp, #8
   14ca8:	mov	r4, r1
   14cac:	ldr	r5, [r1]
   14cb0:	cmp	r0, #0
   14cb4:	beq	14ccc <__assert_fail@plt+0x3bcc>
   14cb8:	mov	r1, #1
   14cbc:	add	r1, r1, r5, lsr #1
   14cc0:	adds	r5, r5, r1
   14cc4:	bcc	14ce4 <__assert_fail@plt+0x3be4>
   14cc8:	bl	14f80 <__assert_fail@plt+0x3e80>
   14ccc:	cmp	r5, #0
   14cd0:	bne	14ce4 <__assert_fail@plt+0x3be4>
   14cd4:	mov	r1, #64	; 0x40
   14cd8:	udiv	r5, r1, r2
   14cdc:	cmp	r2, #64	; 0x40
   14ce0:	addhi	r5, r5, #1
   14ce4:	mov	r1, r5
   14ce8:	bl	14b94 <__assert_fail@plt+0x3a94>
   14cec:	str	r5, [r4]
   14cf0:	pop	{r4, r5, fp, pc}
   14cf4:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   14cf8:	add	fp, sp, #24
   14cfc:	mov	r8, r1
   14d00:	ldr	r6, [r1]
   14d04:	add	r1, r6, r6, asr #1
   14d08:	cmp	r1, r6
   14d0c:	mvnvs	r1, #-2147483648	; 0x80000000
   14d10:	cmp	r1, r3
   14d14:	mov	r5, r1
   14d18:	movgt	r5, r3
   14d1c:	cmn	r3, #1
   14d20:	movle	r5, r1
   14d24:	ldr	r4, [fp, #8]
   14d28:	cmn	r4, #1
   14d2c:	ble	14d54 <__assert_fail@plt+0x3c54>
   14d30:	cmp	r4, #0
   14d34:	beq	14da8 <__assert_fail@plt+0x3ca8>
   14d38:	cmn	r5, #1
   14d3c:	ble	14d7c <__assert_fail@plt+0x3c7c>
   14d40:	mvn	r7, #-2147483648	; 0x80000000
   14d44:	udiv	r1, r7, r4
   14d48:	cmp	r1, r5
   14d4c:	bge	14da8 <__assert_fail@plt+0x3ca8>
   14d50:	b	14db8 <__assert_fail@plt+0x3cb8>
   14d54:	cmn	r5, #1
   14d58:	ble	14d98 <__assert_fail@plt+0x3c98>
   14d5c:	cmn	r4, #1
   14d60:	beq	14da8 <__assert_fail@plt+0x3ca8>
   14d64:	mov	r1, #-2147483648	; 0x80000000
   14d68:	sdiv	r1, r1, r4
   14d6c:	mvn	r7, #-2147483648	; 0x80000000
   14d70:	cmp	r1, r5
   14d74:	bge	14da8 <__assert_fail@plt+0x3ca8>
   14d78:	b	14db8 <__assert_fail@plt+0x3cb8>
   14d7c:	beq	14da8 <__assert_fail@plt+0x3ca8>
   14d80:	mov	r1, #-2147483648	; 0x80000000
   14d84:	sdiv	r1, r1, r5
   14d88:	mvn	r7, #-2147483648	; 0x80000000
   14d8c:	cmp	r1, r4
   14d90:	bge	14da8 <__assert_fail@plt+0x3ca8>
   14d94:	b	14db8 <__assert_fail@plt+0x3cb8>
   14d98:	mvn	r7, #-2147483648	; 0x80000000
   14d9c:	sdiv	r1, r7, r4
   14da0:	cmp	r5, r1
   14da4:	blt	14db8 <__assert_fail@plt+0x3cb8>
   14da8:	mul	r1, r5, r4
   14dac:	mov	r7, #64	; 0x40
   14db0:	cmp	r1, #63	; 0x3f
   14db4:	bgt	14dc0 <__assert_fail@plt+0x3cc0>
   14db8:	sdiv	r5, r7, r4
   14dbc:	mul	r1, r5, r4
   14dc0:	cmp	r0, #0
   14dc4:	moveq	r7, #0
   14dc8:	streq	r7, [r8]
   14dcc:	sub	r7, r5, r6
   14dd0:	cmp	r7, r2
   14dd4:	bge	14e80 <__assert_fail@plt+0x3d80>
   14dd8:	add	r5, r6, r2
   14ddc:	mov	r1, #0
   14de0:	cmp	r5, r3
   14de4:	mov	r2, #0
   14de8:	movwgt	r2, #1
   14dec:	cmn	r3, #1
   14df0:	movwgt	r1, #1
   14df4:	cmp	r5, r6
   14df8:	bvs	14e68 <__assert_fail@plt+0x3d68>
   14dfc:	ands	r1, r1, r2
   14e00:	bne	14e68 <__assert_fail@plt+0x3d68>
   14e04:	cmn	r4, #1
   14e08:	ble	14e30 <__assert_fail@plt+0x3d30>
   14e0c:	cmp	r4, #0
   14e10:	beq	14e7c <__assert_fail@plt+0x3d7c>
   14e14:	cmn	r5, #1
   14e18:	ble	14e54 <__assert_fail@plt+0x3d54>
   14e1c:	mvn	r1, #-2147483648	; 0x80000000
   14e20:	udiv	r1, r1, r4
   14e24:	cmp	r1, r5
   14e28:	bge	14e7c <__assert_fail@plt+0x3d7c>
   14e2c:	b	14e68 <__assert_fail@plt+0x3d68>
   14e30:	cmn	r5, #1
   14e34:	ble	14e6c <__assert_fail@plt+0x3d6c>
   14e38:	cmn	r4, #1
   14e3c:	beq	14e7c <__assert_fail@plt+0x3d7c>
   14e40:	mov	r1, #-2147483648	; 0x80000000
   14e44:	sdiv	r1, r1, r4
   14e48:	cmp	r1, r5
   14e4c:	bge	14e7c <__assert_fail@plt+0x3d7c>
   14e50:	b	14e68 <__assert_fail@plt+0x3d68>
   14e54:	beq	14e7c <__assert_fail@plt+0x3d7c>
   14e58:	mov	r1, #-2147483648	; 0x80000000
   14e5c:	sdiv	r1, r1, r5
   14e60:	cmp	r1, r4
   14e64:	bge	14e7c <__assert_fail@plt+0x3d7c>
   14e68:	bl	14f80 <__assert_fail@plt+0x3e80>
   14e6c:	mvn	r1, #-2147483648	; 0x80000000
   14e70:	sdiv	r1, r1, r4
   14e74:	cmp	r5, r1
   14e78:	blt	14e68 <__assert_fail@plt+0x3d68>
   14e7c:	mul	r1, r5, r4
   14e80:	bl	14c10 <__assert_fail@plt+0x3b10>
   14e84:	str	r5, [r8]
   14e88:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14e8c:	mov	r1, #1
   14e90:	b	14e94 <__assert_fail@plt+0x3d94>
   14e94:	push	{fp, lr}
   14e98:	mov	fp, sp
   14e9c:	bl	1555c <__assert_fail@plt+0x445c>
   14ea0:	bl	14be4 <__assert_fail@plt+0x3ae4>
   14ea4:	pop	{fp, pc}
   14ea8:	mov	r1, #1
   14eac:	b	14eb0 <__assert_fail@plt+0x3db0>
   14eb0:	push	{fp, lr}
   14eb4:	mov	fp, sp
   14eb8:	bl	12a60 <__assert_fail@plt+0x1960>
   14ebc:	bl	14be4 <__assert_fail@plt+0x3ae4>
   14ec0:	pop	{fp, pc}
   14ec4:	push	{r4, r5, r6, sl, fp, lr}
   14ec8:	add	fp, sp, #16
   14ecc:	mov	r4, r1
   14ed0:	mov	r5, r0
   14ed4:	mov	r0, r1
   14ed8:	bl	14bd0 <__assert_fail@plt+0x3ad0>
   14edc:	mov	r6, r0
   14ee0:	mov	r1, r5
   14ee4:	mov	r2, r4
   14ee8:	bl	10ef0 <memcpy@plt>
   14eec:	mov	r0, r6
   14ef0:	pop	{r4, r5, r6, sl, fp, pc}
   14ef4:	push	{r4, r5, r6, sl, fp, lr}
   14ef8:	add	fp, sp, #16
   14efc:	mov	r4, r1
   14f00:	mov	r5, r0
   14f04:	mov	r0, r1
   14f08:	bl	14bf8 <__assert_fail@plt+0x3af8>
   14f0c:	mov	r6, r0
   14f10:	mov	r1, r5
   14f14:	mov	r2, r4
   14f18:	bl	10ef0 <memcpy@plt>
   14f1c:	mov	r0, r6
   14f20:	pop	{r4, r5, r6, sl, fp, pc}
   14f24:	push	{r4, r5, r6, sl, fp, lr}
   14f28:	add	fp, sp, #16
   14f2c:	mov	r4, r1
   14f30:	mov	r5, r0
   14f34:	add	r0, r1, #1
   14f38:	bl	14bf8 <__assert_fail@plt+0x3af8>
   14f3c:	mov	r6, r0
   14f40:	mov	r0, #0
   14f44:	strb	r0, [r6, r4]
   14f48:	mov	r0, r6
   14f4c:	mov	r1, r5
   14f50:	mov	r2, r4
   14f54:	bl	10ef0 <memcpy@plt>
   14f58:	mov	r0, r6
   14f5c:	pop	{r4, r5, r6, sl, fp, pc}
   14f60:	push	{r4, sl, fp, lr}
   14f64:	add	fp, sp, #8
   14f68:	mov	r4, r0
   14f6c:	bl	11004 <strlen@plt>
   14f70:	add	r1, r0, #1
   14f74:	mov	r0, r4
   14f78:	pop	{r4, sl, fp, lr}
   14f7c:	b	14ec4 <__assert_fail@plt+0x3dc4>
   14f80:	push	{fp, lr}
   14f84:	mov	fp, sp
   14f88:	movw	r0, #28916	; 0x70f4
   14f8c:	movt	r0, #2
   14f90:	ldr	r4, [r0]
   14f94:	movw	r1, #27000	; 0x6978
   14f98:	movt	r1, #1
   14f9c:	mov	r0, #0
   14fa0:	mov	r2, #5
   14fa4:	bl	10f2c <dcgettext@plt>
   14fa8:	mov	r3, r0
   14fac:	movw	r2, #24896	; 0x6140
   14fb0:	movt	r2, #1
   14fb4:	mov	r0, r4
   14fb8:	mov	r1, #0
   14fbc:	bl	10fa4 <error@plt>
   14fc0:	bl	110e8 <abort@plt>
   14fc4:	bx	lr
   14fc8:	b	1563c <__assert_fail@plt+0x453c>
   14fcc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14fd0:	add	fp, sp, #28
   14fd4:	sub	sp, sp, #20
   14fd8:	cmp	r2, #37	; 0x25
   14fdc:	bcs	153f0 <__assert_fail@plt+0x42f0>
   14fe0:	mov	r9, r3
   14fe4:	mov	r7, r2
   14fe8:	mov	r6, r1
   14fec:	mov	r4, r0
   14ff0:	ldr	sl, [fp, #8]
   14ff4:	bl	1101c <__errno_location@plt>
   14ff8:	mov	r5, r0
   14ffc:	mov	r0, #0
   15000:	str	r0, [r5]
   15004:	add	r8, sp, #16
   15008:	cmp	r6, #0
   1500c:	movne	r8, r6
   15010:	mov	r0, r4
   15014:	mov	r1, r8
   15018:	mov	r2, r7
   1501c:	bl	11070 <strtoimax@plt>
   15020:	str	r1, [sp, #12]
   15024:	str	r0, [sp, #8]
   15028:	ldr	r7, [r8]
   1502c:	cmp	r7, r4
   15030:	beq	1505c <__assert_fail@plt+0x3f5c>
   15034:	ldr	r0, [r5]
   15038:	cmp	r0, #0
   1503c:	beq	15094 <__assert_fail@plt+0x3f94>
   15040:	mov	r5, #4
   15044:	cmp	r0, #34	; 0x22
   15048:	bne	153e4 <__assert_fail@plt+0x42e4>
   1504c:	mov	r5, #1
   15050:	cmp	sl, #0
   15054:	bne	150a0 <__assert_fail@plt+0x3fa0>
   15058:	b	153d8 <__assert_fail@plt+0x42d8>
   1505c:	mov	r5, #4
   15060:	cmp	sl, #0
   15064:	ldrbne	r1, [r7]
   15068:	cmpne	r1, #0
   1506c:	beq	153e4 <__assert_fail@plt+0x42e4>
   15070:	mov	r0, sl
   15074:	bl	11010 <strchr@plt>
   15078:	cmp	r0, #0
   1507c:	beq	153e4 <__assert_fail@plt+0x42e4>
   15080:	mov	r5, #0
   15084:	str	r5, [sp, #12]
   15088:	mov	r0, #1
   1508c:	str	r0, [sp, #8]
   15090:	b	150a0 <__assert_fail@plt+0x3fa0>
   15094:	mov	r5, r0
   15098:	cmp	sl, #0
   1509c:	beq	153d8 <__assert_fail@plt+0x42d8>
   150a0:	ldrb	r4, [r7]
   150a4:	cmp	r4, #0
   150a8:	beq	153d8 <__assert_fail@plt+0x42d8>
   150ac:	mov	r0, sl
   150b0:	mov	r1, r4
   150b4:	bl	11010 <strchr@plt>
   150b8:	cmp	r0, #0
   150bc:	beq	152d4 <__assert_fail@plt+0x41d4>
   150c0:	sub	r0, r4, #69	; 0x45
   150c4:	mov	r1, #1
   150c8:	str	r1, [sp, #4]
   150cc:	mov	r6, #1024	; 0x400
   150d0:	cmp	r0, #47	; 0x2f
   150d4:	bhi	151d0 <__assert_fail@plt+0x40d0>
   150d8:	add	r1, pc, #0
   150dc:	ldr	pc, [r1, r0, lsl #2]
   150e0:	andeq	r5, r1, r0, lsr #3
   150e4:	ldrdeq	r5, [r1], -r0
   150e8:	andeq	r5, r1, r0, lsr #3
   150ec:	ldrdeq	r5, [r1], -r0
   150f0:	ldrdeq	r5, [r1], -r0
   150f4:	ldrdeq	r5, [r1], -r0
   150f8:	andeq	r5, r1, r0, lsr #3
   150fc:	ldrdeq	r5, [r1], -r0
   15100:	andeq	r5, r1, r0, lsr #3
   15104:	ldrdeq	r5, [r1], -r0
   15108:	ldrdeq	r5, [r1], -r0
   1510c:	andeq	r5, r1, r0, lsr #3
   15110:	ldrdeq	r5, [r1], -r0
   15114:	ldrdeq	r5, [r1], -r0
   15118:	ldrdeq	r5, [r1], -r0
   1511c:	andeq	r5, r1, r0, lsr #3
   15120:	ldrdeq	r5, [r1], -r0
   15124:	ldrdeq	r5, [r1], -r0
   15128:	ldrdeq	r5, [r1], -r0
   1512c:	ldrdeq	r5, [r1], -r0
   15130:	andeq	r5, r1, r0, lsr #3
   15134:	andeq	r5, r1, r0, lsr #3
   15138:	ldrdeq	r5, [r1], -r0
   1513c:	ldrdeq	r5, [r1], -r0
   15140:	ldrdeq	r5, [r1], -r0
   15144:	ldrdeq	r5, [r1], -r0
   15148:	ldrdeq	r5, [r1], -r0
   1514c:	ldrdeq	r5, [r1], -r0
   15150:	ldrdeq	r5, [r1], -r0
   15154:	ldrdeq	r5, [r1], -r0
   15158:	ldrdeq	r5, [r1], -r0
   1515c:	ldrdeq	r5, [r1], -r0
   15160:	ldrdeq	r5, [r1], -r0
   15164:	ldrdeq	r5, [r1], -r0
   15168:	andeq	r5, r1, r0, lsr #3
   1516c:	ldrdeq	r5, [r1], -r0
   15170:	ldrdeq	r5, [r1], -r0
   15174:	ldrdeq	r5, [r1], -r0
   15178:	andeq	r5, r1, r0, lsr #3
   1517c:	ldrdeq	r5, [r1], -r0
   15180:	andeq	r5, r1, r0, lsr #3
   15184:	ldrdeq	r5, [r1], -r0
   15188:	ldrdeq	r5, [r1], -r0
   1518c:	ldrdeq	r5, [r1], -r0
   15190:	ldrdeq	r5, [r1], -r0
   15194:	ldrdeq	r5, [r1], -r0
   15198:	ldrdeq	r5, [r1], -r0
   1519c:	andeq	r5, r1, r0, lsr #3
   151a0:	mov	r0, sl
   151a4:	mov	r1, #48	; 0x30
   151a8:	bl	11010 <strchr@plt>
   151ac:	cmp	r0, #0
   151b0:	beq	151d0 <__assert_fail@plt+0x40d0>
   151b4:	ldrb	r0, [r7, #1]
   151b8:	cmp	r0, #66	; 0x42
   151bc:	cmpne	r0, #68	; 0x44
   151c0:	bne	152e8 <__assert_fail@plt+0x41e8>
   151c4:	mov	r0, #2
   151c8:	str	r0, [sp, #4]
   151cc:	mov	r6, #1000	; 0x3e8
   151d0:	sub	r1, r4, #66	; 0x42
   151d4:	cmp	r1, #53	; 0x35
   151d8:	bhi	152d4 <__assert_fail@plt+0x41d4>
   151dc:	mov	r0, #0
   151e0:	add	r2, pc, #0
   151e4:	ldr	pc, [r2, r1, lsl #2]
   151e8:	andeq	r5, r1, r8, asr r3
   151ec:	ldrdeq	r5, [r1], -r4
   151f0:	ldrdeq	r5, [r1], -r4
   151f4:	andeq	r5, r1, r4, ror #6
   151f8:	ldrdeq	r5, [r1], -r4
   151fc:	andeq	r5, r1, r0, asr #5
   15200:	ldrdeq	r5, [r1], -r4
   15204:	ldrdeq	r5, [r1], -r4
   15208:	ldrdeq	r5, [r1], -r4
   1520c:	andeq	r5, r1, r8, lsl #6
   15210:	ldrdeq	r5, [r1], -r4
   15214:	andeq	r5, r1, ip, lsl r3
   15218:	ldrdeq	r5, [r1], -r4
   1521c:	ldrdeq	r5, [r1], -r4
   15220:	andeq	r5, r1, r8, ror r3
   15224:	ldrdeq	r5, [r1], -r4
   15228:	ldrdeq	r5, [r1], -r4
   1522c:	ldrdeq	r5, [r1], -r4
   15230:	andeq	r5, r1, r0, lsr r3
   15234:	ldrdeq	r5, [r1], -r4
   15238:	ldrdeq	r5, [r1], -r4
   1523c:	ldrdeq	r5, [r1], -r4
   15240:	ldrdeq	r5, [r1], -r4
   15244:	andeq	r5, r1, ip, lsl #7
   15248:	andeq	r5, r1, r4, asr #6
   1524c:	ldrdeq	r5, [r1], -r4
   15250:	ldrdeq	r5, [r1], -r4
   15254:	ldrdeq	r5, [r1], -r4
   15258:	ldrdeq	r5, [r1], -r4
   1525c:	ldrdeq	r5, [r1], -r4
   15260:	ldrdeq	r5, [r1], -r4
   15264:	ldrdeq	r5, [r1], -r4
   15268:	andeq	r5, r1, r0, lsr #7
   1526c:			; <UNDEFINED> instruction: 0x000153b8
   15270:	ldrdeq	r5, [r1], -r4
   15274:	ldrdeq	r5, [r1], -r4
   15278:	ldrdeq	r5, [r1], -r4
   1527c:	andeq	r5, r1, r0, asr #5
   15280:	ldrdeq	r5, [r1], -r4
   15284:	ldrdeq	r5, [r1], -r4
   15288:	ldrdeq	r5, [r1], -r4
   1528c:	andeq	r5, r1, r8, lsl #6
   15290:	ldrdeq	r5, [r1], -r4
   15294:	andeq	r5, r1, ip, lsl r3
   15298:	ldrdeq	r5, [r1], -r4
   1529c:	ldrdeq	r5, [r1], -r4
   152a0:	ldrdeq	r5, [r1], -r4
   152a4:	ldrdeq	r5, [r1], -r4
   152a8:	ldrdeq	r5, [r1], -r4
   152ac:	ldrdeq	r5, [r1], -r4
   152b0:	andeq	r5, r1, r0, lsr r3
   152b4:	ldrdeq	r5, [r1], -r4
   152b8:	ldrdeq	r5, [r1], -r4
   152bc:	andeq	r5, r1, ip, lsr #7
   152c0:	add	r0, sp, #8
   152c4:	mov	r1, r6
   152c8:	mov	r2, #3
   152cc:	bl	15514 <__assert_fail@plt+0x4414>
   152d0:	b	153b8 <__assert_fail@plt+0x42b8>
   152d4:	ldr	r0, [sp, #8]
   152d8:	ldr	r1, [sp, #12]
   152dc:	strd	r0, [r9]
   152e0:	orr	r5, r5, #2
   152e4:	b	153e4 <__assert_fail@plt+0x42e4>
   152e8:	cmp	r0, #105	; 0x69
   152ec:	bne	151d0 <__assert_fail@plt+0x40d0>
   152f0:	ldrb	r0, [r7, #2]
   152f4:	mov	r1, #1
   152f8:	cmp	r0, #66	; 0x42
   152fc:	movweq	r1, #3
   15300:	str	r1, [sp, #4]
   15304:	b	151d0 <__assert_fail@plt+0x40d0>
   15308:	add	r0, sp, #8
   1530c:	mov	r1, r6
   15310:	mov	r2, #1
   15314:	bl	15514 <__assert_fail@plt+0x4414>
   15318:	b	153b8 <__assert_fail@plt+0x42b8>
   1531c:	add	r0, sp, #8
   15320:	mov	r1, r6
   15324:	mov	r2, #2
   15328:	bl	15514 <__assert_fail@plt+0x4414>
   1532c:	b	153b8 <__assert_fail@plt+0x42b8>
   15330:	add	r0, sp, #8
   15334:	mov	r1, r6
   15338:	mov	r2, #4
   1533c:	bl	15514 <__assert_fail@plt+0x4414>
   15340:	b	153b8 <__assert_fail@plt+0x42b8>
   15344:	add	r0, sp, #8
   15348:	mov	r1, r6
   1534c:	mov	r2, #7
   15350:	bl	15514 <__assert_fail@plt+0x4414>
   15354:	b	153b8 <__assert_fail@plt+0x42b8>
   15358:	add	r0, sp, #8
   1535c:	mov	r1, #1024	; 0x400
   15360:	b	153b4 <__assert_fail@plt+0x42b4>
   15364:	add	r0, sp, #8
   15368:	mov	r1, r6
   1536c:	mov	r2, #6
   15370:	bl	15514 <__assert_fail@plt+0x4414>
   15374:	b	153b8 <__assert_fail@plt+0x42b8>
   15378:	add	r0, sp, #8
   1537c:	mov	r1, r6
   15380:	mov	r2, #5
   15384:	bl	15514 <__assert_fail@plt+0x4414>
   15388:	b	153b8 <__assert_fail@plt+0x42b8>
   1538c:	add	r0, sp, #8
   15390:	mov	r1, r6
   15394:	mov	r2, #8
   15398:	bl	15514 <__assert_fail@plt+0x4414>
   1539c:	b	153b8 <__assert_fail@plt+0x42b8>
   153a0:	add	r0, sp, #8
   153a4:	mov	r1, #512	; 0x200
   153a8:	b	153b4 <__assert_fail@plt+0x42b4>
   153ac:	add	r0, sp, #8
   153b0:	mov	r1, #2
   153b4:	bl	15410 <__assert_fail@plt+0x4310>
   153b8:	ldr	r1, [r8]
   153bc:	ldr	r3, [sp, #4]
   153c0:	add	r2, r1, r3
   153c4:	str	r2, [r8]
   153c8:	ldrb	r1, [r1, r3]
   153cc:	orr	r5, r0, r5
   153d0:	cmp	r1, #0
   153d4:	orrne	r5, r5, #2
   153d8:	ldr	r0, [sp, #8]
   153dc:	ldr	r1, [sp, #12]
   153e0:	strd	r0, [r9]
   153e4:	mov	r0, r5
   153e8:	sub	sp, fp, #28
   153ec:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   153f0:	movw	r0, #27017	; 0x6989
   153f4:	movt	r0, #1
   153f8:	movw	r1, #27055	; 0x69af
   153fc:	movt	r1, #1
   15400:	movw	r3, #27071	; 0x69bf
   15404:	movt	r3, #1
   15408:	mov	r2, #85	; 0x55
   1540c:	bl	11100 <__assert_fail@plt>
   15410:	push	{r4, r5, r6, r7, fp, lr}
   15414:	add	fp, sp, #16
   15418:	mov	r5, r1
   1541c:	mov	r4, r0
   15420:	cmn	r1, #1
   15424:	ble	1544c <__assert_fail@plt+0x434c>
   15428:	cmp	r5, #0
   1542c:	beq	154b0 <__assert_fail@plt+0x43b0>
   15430:	ldrd	r6, [r4]
   15434:	cmn	r7, #1
   15438:	ble	15484 <__assert_fail@plt+0x4384>
   1543c:	asr	r3, r5, #31
   15440:	mvn	r0, #0
   15444:	mvn	r1, #-2147483648	; 0x80000000
   15448:	b	1546c <__assert_fail@plt+0x436c>
   1544c:	ldrd	r6, [r4]
   15450:	cmn	r7, #1
   15454:	ble	154cc <__assert_fail@plt+0x43cc>
   15458:	cmn	r5, #1
   1545c:	beq	154b0 <__assert_fail@plt+0x43b0>
   15460:	asr	r3, r5, #31
   15464:	mov	r0, #0
   15468:	mov	r1, #-2147483648	; 0x80000000
   1546c:	mov	r2, r5
   15470:	bl	15b94 <__assert_fail@plt+0x4a94>
   15474:	subs	r0, r0, r6
   15478:	sbcs	r0, r1, r7
   1547c:	bge	154b0 <__assert_fail@plt+0x43b0>
   15480:	b	154ec <__assert_fail@plt+0x43ec>
   15484:	and	r0, r6, r7
   15488:	cmn	r0, #1
   1548c:	beq	154b0 <__assert_fail@plt+0x43b0>
   15490:	mov	r0, #0
   15494:	mov	r1, #-2147483648	; 0x80000000
   15498:	mov	r2, r6
   1549c:	mov	r3, r7
   154a0:	bl	15b94 <__assert_fail@plt+0x4a94>
   154a4:	subs	r0, r0, r5
   154a8:	sbcs	r0, r1, r5, asr #31
   154ac:	blt	154ec <__assert_fail@plt+0x43ec>
   154b0:	ldrd	r0, [r4]
   154b4:	umull	r2, r3, r0, r5
   154b8:	asr	r7, r5, #31
   154bc:	mla	r0, r0, r7, r3
   154c0:	mla	r1, r1, r5, r0
   154c4:	mov	r0, #0
   154c8:	b	15508 <__assert_fail@plt+0x4408>
   154cc:	asr	r3, r5, #31
   154d0:	mvn	r0, #0
   154d4:	mvn	r1, #-2147483648	; 0x80000000
   154d8:	mov	r2, r5
   154dc:	bl	15b94 <__assert_fail@plt+0x4a94>
   154e0:	subs	r0, r6, r0
   154e4:	sbcs	r0, r7, r1
   154e8:	bge	154b0 <__assert_fail@plt+0x43b0>
   154ec:	ldr	r0, [r4, #4]
   154f0:	mvn	r1, #-2147483648	; 0x80000000
   154f4:	cmp	r0, #0
   154f8:	movlt	r1, #-2147483648	; 0x80000000
   154fc:	mvn	r2, #0
   15500:	movwlt	r2, #0
   15504:	mov	r0, #1
   15508:	str	r2, [r4]
   1550c:	str	r1, [r4, #4]
   15510:	pop	{r4, r5, r6, r7, fp, pc}
   15514:	push	{r4, r5, r6, r7, fp, lr}
   15518:	add	fp, sp, #16
   1551c:	cmp	r2, #0
   15520:	moveq	r6, #0
   15524:	moveq	r0, r6
   15528:	popeq	{r4, r5, r6, r7, fp, pc}
   1552c:	mov	r4, r2
   15530:	mov	r5, r1
   15534:	mov	r7, r0
   15538:	mov	r6, #0
   1553c:	mov	r0, r7
   15540:	mov	r1, r5
   15544:	bl	15410 <__assert_fail@plt+0x4310>
   15548:	orr	r6, r0, r6
   1554c:	subs	r4, r4, #1
   15550:	bne	1553c <__assert_fail@plt+0x443c>
   15554:	mov	r0, r6
   15558:	pop	{r4, r5, r6, r7, fp, pc}
   1555c:	clz	r2, r1
   15560:	lsr	r2, r2, #5
   15564:	clz	r3, r0
   15568:	lsr	r3, r3, #5
   1556c:	orrs	r2, r3, r2
   15570:	movwne	r1, #1
   15574:	movwne	r0, #1
   15578:	cmp	r1, #0
   1557c:	beq	155ac <__assert_fail@plt+0x44ac>
   15580:	mvn	r2, #-2147483648	; 0x80000000
   15584:	udiv	r2, r2, r1
   15588:	cmp	r2, r0
   1558c:	bcs	155ac <__assert_fail@plt+0x44ac>
   15590:	push	{fp, lr}
   15594:	mov	fp, sp
   15598:	bl	1101c <__errno_location@plt>
   1559c:	mov	r1, #12
   155a0:	str	r1, [r0]
   155a4:	mov	r0, #0
   155a8:	pop	{fp, pc}
   155ac:	b	10e84 <calloc@plt>
   155b0:	cmp	r0, #0
   155b4:	movweq	r0, #1
   155b8:	cmn	r0, #1
   155bc:	ble	155c4 <__assert_fail@plt+0x44c4>
   155c0:	b	10fb0 <malloc@plt>
   155c4:	push	{fp, lr}
   155c8:	mov	fp, sp
   155cc:	bl	1101c <__errno_location@plt>
   155d0:	mov	r1, #12
   155d4:	str	r1, [r0]
   155d8:	mov	r0, #0
   155dc:	pop	{fp, pc}
   155e0:	push	{fp, lr}
   155e4:	mov	fp, sp
   155e8:	cmp	r0, #0
   155ec:	beq	15608 <__assert_fail@plt+0x4508>
   155f0:	cmp	r1, #0
   155f4:	beq	15614 <__assert_fail@plt+0x4514>
   155f8:	cmn	r1, #1
   155fc:	ble	15620 <__assert_fail@plt+0x4520>
   15600:	pop	{fp, lr}
   15604:	b	10f38 <realloc@plt>
   15608:	mov	r0, r1
   1560c:	pop	{fp, lr}
   15610:	b	155b0 <__assert_fail@plt+0x44b0>
   15614:	bl	12968 <__assert_fail@plt+0x1868>
   15618:	mov	r0, #0
   1561c:	pop	{fp, pc}
   15620:	bl	1101c <__errno_location@plt>
   15624:	mov	r1, #12
   15628:	str	r1, [r0]
   1562c:	mov	r0, #0
   15630:	pop	{fp, pc}
   15634:	mov	r0, #0
   15638:	bx	lr
   1563c:	mov	r0, #0
   15640:	bx	lr
   15644:	mov	r1, r0
   15648:	sub	r2, r0, #65	; 0x41
   1564c:	mov	r0, #1
   15650:	cmp	r2, #26
   15654:	subcs	r2, r1, #97	; 0x61
   15658:	cmpcs	r2, #26
   1565c:	bcs	15664 <__assert_fail@plt+0x4564>
   15660:	bx	lr
   15664:	sub	r1, r1, #48	; 0x30
   15668:	cmp	r1, #10
   1566c:	movcs	r0, #0
   15670:	bx	lr
   15674:	mov	r1, r0
   15678:	sub	r2, r0, #65	; 0x41
   1567c:	mov	r0, #1
   15680:	cmp	r2, #26
   15684:	subcs	r1, r1, #97	; 0x61
   15688:	cmpcs	r1, #26
   1568c:	movcs	r0, #0
   15690:	bx	lr
   15694:	mov	r1, #0
   15698:	cmp	r0, #128	; 0x80
   1569c:	movwcc	r1, #1
   156a0:	mov	r0, r1
   156a4:	bx	lr
   156a8:	sub	r1, r0, #9
   156ac:	clz	r1, r1
   156b0:	lsr	r1, r1, #5
   156b4:	sub	r0, r0, #32
   156b8:	clz	r0, r0
   156bc:	lsr	r0, r0, #5
   156c0:	orr	r0, r0, r1
   156c4:	bx	lr
   156c8:	mov	r1, r0
   156cc:	mov	r0, #1
   156d0:	cmp	r1, #32
   156d4:	bxcc	lr
   156d8:	cmp	r1, #127	; 0x7f
   156dc:	movne	r0, #0
   156e0:	bx	lr
   156e4:	sub	r1, r0, #48	; 0x30
   156e8:	mov	r0, #0
   156ec:	cmp	r1, #10
   156f0:	movwcc	r0, #1
   156f4:	bx	lr
   156f8:	sub	r1, r0, #33	; 0x21
   156fc:	mov	r0, #0
   15700:	cmp	r1, #94	; 0x5e
   15704:	movwcc	r0, #1
   15708:	bx	lr
   1570c:	sub	r1, r0, #97	; 0x61
   15710:	mov	r0, #0
   15714:	cmp	r1, #26
   15718:	movwcc	r0, #1
   1571c:	bx	lr
   15720:	sub	r1, r0, #32
   15724:	mov	r0, #0
   15728:	cmp	r1, #95	; 0x5f
   1572c:	movwcc	r0, #1
   15730:	bx	lr
   15734:	sub	r1, r0, #33	; 0x21
   15738:	cmp	r1, #93	; 0x5d
   1573c:	bhi	158c8 <__assert_fail@plt+0x47c8>
   15740:	mov	r0, #1
   15744:	add	r2, pc, #0
   15748:	ldr	pc, [r2, r1, lsl #2]
   1574c:	andeq	r5, r1, r4, asr #17
   15750:	andeq	r5, r1, r4, asr #17
   15754:	andeq	r5, r1, r4, asr #17
   15758:	andeq	r5, r1, r4, asr #17
   1575c:	andeq	r5, r1, r4, asr #17
   15760:	andeq	r5, r1, r4, asr #17
   15764:	andeq	r5, r1, r4, asr #17
   15768:	andeq	r5, r1, r4, asr #17
   1576c:	andeq	r5, r1, r4, asr #17
   15770:	andeq	r5, r1, r4, asr #17
   15774:	andeq	r5, r1, r4, asr #17
   15778:	andeq	r5, r1, r4, asr #17
   1577c:	andeq	r5, r1, r4, asr #17
   15780:	andeq	r5, r1, r4, asr #17
   15784:	andeq	r5, r1, r4, asr #17
   15788:	andeq	r5, r1, r8, asr #17
   1578c:	andeq	r5, r1, r8, asr #17
   15790:	andeq	r5, r1, r8, asr #17
   15794:	andeq	r5, r1, r8, asr #17
   15798:	andeq	r5, r1, r8, asr #17
   1579c:	andeq	r5, r1, r8, asr #17
   157a0:	andeq	r5, r1, r8, asr #17
   157a4:	andeq	r5, r1, r8, asr #17
   157a8:	andeq	r5, r1, r8, asr #17
   157ac:	andeq	r5, r1, r8, asr #17
   157b0:	andeq	r5, r1, r4, asr #17
   157b4:	andeq	r5, r1, r4, asr #17
   157b8:	andeq	r5, r1, r4, asr #17
   157bc:	andeq	r5, r1, r4, asr #17
   157c0:	andeq	r5, r1, r4, asr #17
   157c4:	andeq	r5, r1, r4, asr #17
   157c8:	andeq	r5, r1, r4, asr #17
   157cc:	andeq	r5, r1, r8, asr #17
   157d0:	andeq	r5, r1, r8, asr #17
   157d4:	andeq	r5, r1, r8, asr #17
   157d8:	andeq	r5, r1, r8, asr #17
   157dc:	andeq	r5, r1, r8, asr #17
   157e0:	andeq	r5, r1, r8, asr #17
   157e4:	andeq	r5, r1, r8, asr #17
   157e8:	andeq	r5, r1, r8, asr #17
   157ec:	andeq	r5, r1, r8, asr #17
   157f0:	andeq	r5, r1, r8, asr #17
   157f4:	andeq	r5, r1, r8, asr #17
   157f8:	andeq	r5, r1, r8, asr #17
   157fc:	andeq	r5, r1, r8, asr #17
   15800:	andeq	r5, r1, r8, asr #17
   15804:	andeq	r5, r1, r8, asr #17
   15808:	andeq	r5, r1, r8, asr #17
   1580c:	andeq	r5, r1, r8, asr #17
   15810:	andeq	r5, r1, r8, asr #17
   15814:	andeq	r5, r1, r8, asr #17
   15818:	andeq	r5, r1, r8, asr #17
   1581c:	andeq	r5, r1, r8, asr #17
   15820:	andeq	r5, r1, r8, asr #17
   15824:	andeq	r5, r1, r8, asr #17
   15828:	andeq	r5, r1, r8, asr #17
   1582c:	andeq	r5, r1, r8, asr #17
   15830:	andeq	r5, r1, r8, asr #17
   15834:	andeq	r5, r1, r4, asr #17
   15838:	andeq	r5, r1, r4, asr #17
   1583c:	andeq	r5, r1, r4, asr #17
   15840:	andeq	r5, r1, r4, asr #17
   15844:	andeq	r5, r1, r4, asr #17
   15848:	andeq	r5, r1, r4, asr #17
   1584c:	andeq	r5, r1, r8, asr #17
   15850:	andeq	r5, r1, r8, asr #17
   15854:	andeq	r5, r1, r8, asr #17
   15858:	andeq	r5, r1, r8, asr #17
   1585c:	andeq	r5, r1, r8, asr #17
   15860:	andeq	r5, r1, r8, asr #17
   15864:	andeq	r5, r1, r8, asr #17
   15868:	andeq	r5, r1, r8, asr #17
   1586c:	andeq	r5, r1, r8, asr #17
   15870:	andeq	r5, r1, r8, asr #17
   15874:	andeq	r5, r1, r8, asr #17
   15878:	andeq	r5, r1, r8, asr #17
   1587c:	andeq	r5, r1, r8, asr #17
   15880:	andeq	r5, r1, r8, asr #17
   15884:	andeq	r5, r1, r8, asr #17
   15888:	andeq	r5, r1, r8, asr #17
   1588c:	andeq	r5, r1, r8, asr #17
   15890:	andeq	r5, r1, r8, asr #17
   15894:	andeq	r5, r1, r8, asr #17
   15898:	andeq	r5, r1, r8, asr #17
   1589c:	andeq	r5, r1, r8, asr #17
   158a0:	andeq	r5, r1, r8, asr #17
   158a4:	andeq	r5, r1, r8, asr #17
   158a8:	andeq	r5, r1, r8, asr #17
   158ac:	andeq	r5, r1, r8, asr #17
   158b0:	andeq	r5, r1, r8, asr #17
   158b4:	andeq	r5, r1, r4, asr #17
   158b8:	andeq	r5, r1, r4, asr #17
   158bc:	andeq	r5, r1, r4, asr #17
   158c0:	andeq	r5, r1, r4, asr #17
   158c4:	bx	lr
   158c8:	mov	r0, #0
   158cc:	bx	lr
   158d0:	sub	r0, r0, #9
   158d4:	cmp	r0, #23
   158d8:	movhi	r0, #0
   158dc:	bxhi	lr
   158e0:	bic	r0, r0, #-16777216	; 0xff000000
   158e4:	movw	r1, #31
   158e8:	movt	r1, #128	; 0x80
   158ec:	mov	r2, #1
   158f0:	and	r0, r2, r1, lsr r0
   158f4:	bx	lr
   158f8:	sub	r1, r0, #65	; 0x41
   158fc:	mov	r0, #0
   15900:	cmp	r1, #26
   15904:	movwcc	r0, #1
   15908:	bx	lr
   1590c:	mov	r1, r0
   15910:	sub	r2, r0, #48	; 0x30
   15914:	mov	r0, #1
   15918:	cmp	r2, #22
   1591c:	bhi	15934 <__assert_fail@plt+0x4834>
   15920:	mov	ip, #1
   15924:	movw	r3, #1023	; 0x3ff
   15928:	movt	r3, #126	; 0x7e
   1592c:	tst	r3, ip, lsl r2
   15930:	bxne	lr
   15934:	sub	r1, r1, #97	; 0x61
   15938:	cmp	r1, #6
   1593c:	movcs	r0, #0
   15940:	bxcs	lr
   15944:	bx	lr
   15948:	sub	r1, r0, #65	; 0x41
   1594c:	cmp	r1, #26
   15950:	addcc	r0, r0, #32
   15954:	bx	lr
   15958:	sub	r1, r0, #97	; 0x61
   1595c:	cmp	r1, #26
   15960:	subcc	r0, r0, #32
   15964:	bx	lr
   15968:	push	{r4, r5, r6, sl, fp, lr}
   1596c:	add	fp, sp, #16
   15970:	mov	r4, r0
   15974:	bl	10f80 <__fpending@plt>
   15978:	mov	r5, r0
   1597c:	mov	r0, r4
   15980:	bl	10f8c <ferror_unlocked@plt>
   15984:	mov	r6, r0
   15988:	mov	r0, r4
   1598c:	bl	12860 <__assert_fail@plt+0x1760>
   15990:	cmp	r6, #0
   15994:	beq	159b4 <__assert_fail@plt+0x48b4>
   15998:	mvn	r4, #0
   1599c:	cmp	r0, #0
   159a0:	bne	159e8 <__assert_fail@plt+0x48e8>
   159a4:	bl	1101c <__errno_location@plt>
   159a8:	mov	r1, #0
   159ac:	str	r1, [r0]
   159b0:	b	159e8 <__assert_fail@plt+0x48e8>
   159b4:	cmp	r0, #0
   159b8:	mov	r4, r0
   159bc:	mvnne	r4, #0
   159c0:	cmp	r5, #0
   159c4:	bne	159e8 <__assert_fail@plt+0x48e8>
   159c8:	cmp	r0, #0
   159cc:	beq	159e8 <__assert_fail@plt+0x48e8>
   159d0:	bl	1101c <__errno_location@plt>
   159d4:	ldr	r0, [r0]
   159d8:	subs	r4, r0, #9
   159dc:	mvnne	r4, #0
   159e0:	mov	r0, r4
   159e4:	pop	{r4, r5, r6, sl, fp, pc}
   159e8:	mov	r0, r4
   159ec:	pop	{r4, r5, r6, sl, fp, pc}
   159f0:	push	{fp, lr}
   159f4:	mov	fp, sp
   159f8:	mov	r0, #14
   159fc:	bl	110ac <nl_langinfo@plt>
   15a00:	movw	r1, #25408	; 0x6340
   15a04:	movt	r1, #1
   15a08:	cmp	r0, #0
   15a0c:	movne	r1, r0
   15a10:	ldrb	r2, [r1]
   15a14:	movw	r0, #27149	; 0x6a0d
   15a18:	movt	r0, #1
   15a1c:	cmp	r2, #0
   15a20:	movne	r0, r1
   15a24:	pop	{fp, pc}
   15a28:	push	{r4, r5, r6, r7, fp, lr}
   15a2c:	add	fp, sp, #16
   15a30:	sub	sp, sp, #8
   15a34:	mov	r7, r2
   15a38:	mov	r4, r1
   15a3c:	add	r5, sp, #4
   15a40:	cmp	r0, #0
   15a44:	movne	r5, r0
   15a48:	mov	r0, r5
   15a4c:	bl	10f98 <mbrtowc@plt>
   15a50:	mov	r6, r0
   15a54:	cmp	r7, #0
   15a58:	beq	15a7c <__assert_fail@plt+0x497c>
   15a5c:	cmn	r6, #2
   15a60:	bcc	15a7c <__assert_fail@plt+0x497c>
   15a64:	mov	r0, #0
   15a68:	bl	15a88 <__assert_fail@plt+0x4988>
   15a6c:	cmp	r0, #0
   15a70:	ldrbeq	r0, [r4]
   15a74:	streq	r0, [r5]
   15a78:	moveq	r6, #1
   15a7c:	mov	r0, r6
   15a80:	sub	sp, fp, #16
   15a84:	pop	{r4, r5, r6, r7, fp, pc}
   15a88:	push	{r4, sl, fp, lr}
   15a8c:	add	fp, sp, #8
   15a90:	sub	sp, sp, #264	; 0x108
   15a94:	add	r1, sp, #7
   15a98:	movw	r2, #257	; 0x101
   15a9c:	bl	15aec <__assert_fail@plt+0x49ec>
   15aa0:	mov	r4, #0
   15aa4:	cmp	r0, #0
   15aa8:	bne	15ae0 <__assert_fail@plt+0x49e0>
   15aac:	add	r0, sp, #7
   15ab0:	movw	r1, #27155	; 0x6a13
   15ab4:	movt	r1, #1
   15ab8:	bl	10ea8 <strcmp@plt>
   15abc:	cmp	r0, #0
   15ac0:	beq	15ae0 <__assert_fail@plt+0x49e0>
   15ac4:	add	r0, sp, #7
   15ac8:	movw	r1, #27157	; 0x6a15
   15acc:	movt	r1, #1
   15ad0:	bl	10ea8 <strcmp@plt>
   15ad4:	mov	r4, r0
   15ad8:	cmp	r0, #0
   15adc:	movwne	r4, #1
   15ae0:	mov	r0, r4
   15ae4:	sub	sp, fp, #8
   15ae8:	pop	{r4, sl, fp, pc}
   15aec:	b	15af0 <__assert_fail@plt+0x49f0>
   15af0:	push	{r4, r5, r6, r7, fp, lr}
   15af4:	add	fp, sp, #16
   15af8:	mov	r6, r2
   15afc:	mov	r4, r1
   15b00:	bl	15b8c <__assert_fail@plt+0x4a8c>
   15b04:	cmp	r0, #0
   15b08:	beq	15b38 <__assert_fail@plt+0x4a38>
   15b0c:	mov	r7, r0
   15b10:	bl	11004 <strlen@plt>
   15b14:	cmp	r0, r6
   15b18:	bcs	15b58 <__assert_fail@plt+0x4a58>
   15b1c:	add	r2, r0, #1
   15b20:	mov	r0, r4
   15b24:	mov	r1, r7
   15b28:	bl	10ef0 <memcpy@plt>
   15b2c:	mov	r5, #0
   15b30:	mov	r0, r5
   15b34:	pop	{r4, r5, r6, r7, fp, pc}
   15b38:	mov	r5, #22
   15b3c:	cmp	r6, #0
   15b40:	movne	r0, #0
   15b44:	strbne	r0, [r4]
   15b48:	movne	r0, r5
   15b4c:	popne	{r4, r5, r6, r7, fp, pc}
   15b50:	mov	r0, r5
   15b54:	pop	{r4, r5, r6, r7, fp, pc}
   15b58:	mov	r5, #34	; 0x22
   15b5c:	cmp	r6, #0
   15b60:	beq	15b80 <__assert_fail@plt+0x4a80>
   15b64:	sub	r6, r6, #1
   15b68:	mov	r0, r4
   15b6c:	mov	r1, r7
   15b70:	mov	r2, r6
   15b74:	bl	10ef0 <memcpy@plt>
   15b78:	mov	r0, #0
   15b7c:	strb	r0, [r4, r6]
   15b80:	mov	r0, r5
   15b84:	pop	{r4, r5, r6, r7, fp, pc}
   15b88:	b	15b8c <__assert_fail@plt+0x4a8c>
   15b8c:	mov	r1, #0
   15b90:	b	11094 <setlocale@plt>
   15b94:	cmp	r3, #0
   15b98:	cmpeq	r2, #0
   15b9c:	bne	15bc0 <__assert_fail@plt+0x4ac0>
   15ba0:	cmp	r1, #0
   15ba4:	movlt	r1, #-2147483648	; 0x80000000
   15ba8:	movlt	r0, #0
   15bac:	blt	15bbc <__assert_fail@plt+0x4abc>
   15bb0:	cmpeq	r0, #0
   15bb4:	mvnne	r1, #-2147483648	; 0x80000000
   15bb8:	mvnne	r0, #0
   15bbc:	b	15c68 <__assert_fail@plt+0x4b68>
   15bc0:	sub	sp, sp, #8
   15bc4:	push	{sp, lr}
   15bc8:	cmp	r1, #0
   15bcc:	blt	15bec <__assert_fail@plt+0x4aec>
   15bd0:	cmp	r3, #0
   15bd4:	blt	15c20 <__assert_fail@plt+0x4b20>
   15bd8:	bl	15c78 <__assert_fail@plt+0x4b78>
   15bdc:	ldr	lr, [sp, #4]
   15be0:	add	sp, sp, #8
   15be4:	pop	{r2, r3}
   15be8:	bx	lr
   15bec:	rsbs	r0, r0, #0
   15bf0:	sbc	r1, r1, r1, lsl #1
   15bf4:	cmp	r3, #0
   15bf8:	blt	15c44 <__assert_fail@plt+0x4b44>
   15bfc:	bl	15c78 <__assert_fail@plt+0x4b78>
   15c00:	ldr	lr, [sp, #4]
   15c04:	add	sp, sp, #8
   15c08:	pop	{r2, r3}
   15c0c:	rsbs	r0, r0, #0
   15c10:	sbc	r1, r1, r1, lsl #1
   15c14:	rsbs	r2, r2, #0
   15c18:	sbc	r3, r3, r3, lsl #1
   15c1c:	bx	lr
   15c20:	rsbs	r2, r2, #0
   15c24:	sbc	r3, r3, r3, lsl #1
   15c28:	bl	15c78 <__assert_fail@plt+0x4b78>
   15c2c:	ldr	lr, [sp, #4]
   15c30:	add	sp, sp, #8
   15c34:	pop	{r2, r3}
   15c38:	rsbs	r0, r0, #0
   15c3c:	sbc	r1, r1, r1, lsl #1
   15c40:	bx	lr
   15c44:	rsbs	r2, r2, #0
   15c48:	sbc	r3, r3, r3, lsl #1
   15c4c:	bl	15c78 <__assert_fail@plt+0x4b78>
   15c50:	ldr	lr, [sp, #4]
   15c54:	add	sp, sp, #8
   15c58:	pop	{r2, r3}
   15c5c:	rsbs	r2, r2, #0
   15c60:	sbc	r3, r3, r3, lsl #1
   15c64:	bx	lr
   15c68:	push	{r1, lr}
   15c6c:	mov	r0, #8
   15c70:	bl	10e9c <raise@plt>
   15c74:	pop	{r1, pc}
   15c78:	cmp	r1, r3
   15c7c:	cmpeq	r0, r2
   15c80:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15c84:	mov	r4, r0
   15c88:	movcc	r0, #0
   15c8c:	mov	r5, r1
   15c90:	ldr	lr, [sp, #36]	; 0x24
   15c94:	movcc	r1, r0
   15c98:	bcc	15d94 <__assert_fail@plt+0x4c94>
   15c9c:	cmp	r3, #0
   15ca0:	clzeq	ip, r2
   15ca4:	clzne	ip, r3
   15ca8:	addeq	ip, ip, #32
   15cac:	cmp	r5, #0
   15cb0:	clzeq	r1, r4
   15cb4:	addeq	r1, r1, #32
   15cb8:	clzne	r1, r5
   15cbc:	sub	ip, ip, r1
   15cc0:	sub	sl, ip, #32
   15cc4:	lsl	r9, r3, ip
   15cc8:	rsb	fp, ip, #32
   15ccc:	orr	r9, r9, r2, lsl sl
   15cd0:	orr	r9, r9, r2, lsr fp
   15cd4:	lsl	r8, r2, ip
   15cd8:	cmp	r5, r9
   15cdc:	cmpeq	r4, r8
   15ce0:	movcc	r0, #0
   15ce4:	movcc	r1, r0
   15ce8:	bcc	15d04 <__assert_fail@plt+0x4c04>
   15cec:	mov	r0, #1
   15cf0:	subs	r4, r4, r8
   15cf4:	lsl	r1, r0, sl
   15cf8:	orr	r1, r1, r0, lsr fp
   15cfc:	lsl	r0, r0, ip
   15d00:	sbc	r5, r5, r9
   15d04:	cmp	ip, #0
   15d08:	beq	15d94 <__assert_fail@plt+0x4c94>
   15d0c:	lsr	r6, r8, #1
   15d10:	orr	r6, r6, r9, lsl #31
   15d14:	lsr	r7, r9, #1
   15d18:	mov	r2, ip
   15d1c:	b	15d40 <__assert_fail@plt+0x4c40>
   15d20:	subs	r3, r4, r6
   15d24:	sbc	r8, r5, r7
   15d28:	adds	r3, r3, r3
   15d2c:	adc	r8, r8, r8
   15d30:	adds	r4, r3, #1
   15d34:	adc	r5, r8, #0
   15d38:	subs	r2, r2, #1
   15d3c:	beq	15d5c <__assert_fail@plt+0x4c5c>
   15d40:	cmp	r5, r7
   15d44:	cmpeq	r4, r6
   15d48:	bcs	15d20 <__assert_fail@plt+0x4c20>
   15d4c:	adds	r4, r4, r4
   15d50:	adc	r5, r5, r5
   15d54:	subs	r2, r2, #1
   15d58:	bne	15d40 <__assert_fail@plt+0x4c40>
   15d5c:	lsr	r3, r4, ip
   15d60:	orr	r3, r3, r5, lsl fp
   15d64:	lsr	r2, r5, ip
   15d68:	orr	r3, r3, r5, lsr sl
   15d6c:	adds	r0, r0, r4
   15d70:	mov	r4, r3
   15d74:	lsl	r3, r2, ip
   15d78:	orr	r3, r3, r4, lsl sl
   15d7c:	lsl	ip, r4, ip
   15d80:	orr	r3, r3, r4, lsr fp
   15d84:	adc	r1, r1, r5
   15d88:	subs	r0, r0, ip
   15d8c:	mov	r5, r2
   15d90:	sbc	r1, r1, r3
   15d94:	cmp	lr, #0
   15d98:	strdne	r4, [lr]
   15d9c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15da0:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   15da4:	mov	r7, r0
   15da8:	ldr	r6, [pc, #72]	; 15df8 <__assert_fail@plt+0x4cf8>
   15dac:	ldr	r5, [pc, #72]	; 15dfc <__assert_fail@plt+0x4cfc>
   15db0:	add	r6, pc, r6
   15db4:	add	r5, pc, r5
   15db8:	sub	r6, r6, r5
   15dbc:	mov	r8, r1
   15dc0:	mov	r9, r2
   15dc4:	bl	10e64 <calloc@plt-0x20>
   15dc8:	asrs	r6, r6, #2
   15dcc:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   15dd0:	mov	r4, #0
   15dd4:	add	r4, r4, #1
   15dd8:	ldr	r3, [r5], #4
   15ddc:	mov	r2, r9
   15de0:	mov	r1, r8
   15de4:	mov	r0, r7
   15de8:	blx	r3
   15dec:	cmp	r6, r4
   15df0:	bne	15dd4 <__assert_fail@plt+0x4cd4>
   15df4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   15df8:	andeq	r1, r1, r4, asr r1
   15dfc:	andeq	r1, r1, ip, asr #2
   15e00:	bx	lr
   15e04:	ldr	r3, [pc, #12]	; 15e18 <__assert_fail@plt+0x4d18>
   15e08:	mov	r1, #0
   15e0c:	add	r3, pc, r3
   15e10:	ldr	r2, [r3]
   15e14:	b	11028 <__cxa_atexit@plt>
   15e18:	ldrdeq	r1, [r1], -r8

Disassembly of section .fini:

00015e1c <.fini>:
   15e1c:	push	{r3, lr}
   15e20:	pop	{r3, pc}
