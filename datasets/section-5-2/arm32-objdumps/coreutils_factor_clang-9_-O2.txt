
../repos/coreutils/src/factor:     file format elf32-littlearm


Disassembly of section .init:

00011030 <.init>:
   11030:	push	{r3, lr}
   11034:	bl	1136c <__assert_fail@plt+0x4c>
   11038:	pop	{r3, pc}

Disassembly of section .plt:

0001103c <calloc@plt-0x14>:
   1103c:	push	{lr}		; (str lr, [sp, #-4]!)
   11040:	ldr	lr, [pc, #4]	; 1104c <calloc@plt-0x4>
   11044:	add	lr, pc, lr
   11048:	ldr	pc, [lr, #8]!
   1104c:			; <UNDEFINED> instruction: 0x00031fb4

00011050 <calloc@plt>:
   11050:	add	ip, pc, #0, 12
   11054:	add	ip, ip, #200704	; 0x31000
   11058:	ldr	pc, [ip, #4020]!	; 0xfb4

0001105c <fputs_unlocked@plt>:
   1105c:	add	ip, pc, #0, 12
   11060:	add	ip, ip, #200704	; 0x31000
   11064:	ldr	pc, [ip, #4012]!	; 0xfac

00011068 <raise@plt>:
   11068:	add	ip, pc, #0, 12
   1106c:	add	ip, ip, #200704	; 0x31000
   11070:	ldr	pc, [ip, #4004]!	; 0xfa4

00011074 <iconv_close@plt>:
   11074:	add	ip, pc, #0, 12
   11078:	add	ip, ip, #200704	; 0x31000
   1107c:	ldr	pc, [ip, #3996]!	; 0xf9c

00011080 <iconv@plt>:
   11080:	add	ip, pc, #0, 12
   11084:	add	ip, ip, #200704	; 0x31000
   11088:	ldr	pc, [ip, #3988]!	; 0xf94

0001108c <strcmp@plt>:
   1108c:	add	ip, pc, #0, 12
   11090:	add	ip, ip, #200704	; 0x31000
   11094:	ldr	pc, [ip, #3980]!	; 0xf8c

00011098 <fflush@plt>:
   11098:	add	ip, pc, #0, 12
   1109c:	add	ip, ip, #200704	; 0x31000
   110a0:	ldr	pc, [ip, #3972]!	; 0xf84

000110a4 <wcwidth@plt>:
   110a4:	add	ip, pc, #0, 12
   110a8:	add	ip, ip, #200704	; 0x31000
   110ac:	ldr	pc, [ip, #3964]!	; 0xf7c

000110b0 <memmove@plt>:
   110b0:	add	ip, pc, #0, 12
   110b4:	add	ip, ip, #200704	; 0x31000
   110b8:	ldr	pc, [ip, #3956]!	; 0xf74

000110bc <free@plt>:
   110bc:	add	ip, pc, #0, 12
   110c0:	add	ip, ip, #200704	; 0x31000
   110c4:	ldr	pc, [ip, #3948]!	; 0xf6c

000110c8 <_exit@plt>:
   110c8:	add	ip, pc, #0, 12
   110cc:	add	ip, ip, #200704	; 0x31000
   110d0:	ldr	pc, [ip, #3940]!	; 0xf64

000110d4 <memcpy@plt>:
   110d4:	add	ip, pc, #0, 12
   110d8:	add	ip, ip, #200704	; 0x31000
   110dc:	ldr	pc, [ip, #3932]!	; 0xf5c

000110e0 <mbsinit@plt>:
   110e0:	add	ip, pc, #0, 12
   110e4:	add	ip, ip, #200704	; 0x31000
   110e8:	ldr	pc, [ip, #3924]!	; 0xf54

000110ec <dcgettext@plt>:
   110ec:	add	ip, pc, #0, 12
   110f0:	add	ip, ip, #200704	; 0x31000
   110f4:	ldr	pc, [ip, #3916]!	; 0xf4c

000110f8 <strdup@plt>:
   110f8:	add	ip, pc, #0, 12
   110fc:	add	ip, ip, #200704	; 0x31000
   11100:	ldr	pc, [ip, #3908]!	; 0xf44

00011104 <realloc@plt>:
   11104:	add	ip, pc, #0, 12
   11108:	add	ip, ip, #200704	; 0x31000
   1110c:	ldr	pc, [ip, #3900]!	; 0xf3c

00011110 <textdomain@plt>:
   11110:	add	ip, pc, #0, 12
   11114:	add	ip, ip, #200704	; 0x31000
   11118:	ldr	pc, [ip, #3892]!	; 0xf34

0001111c <iswcntrl@plt>:
   1111c:	add	ip, pc, #0, 12
   11120:	add	ip, ip, #200704	; 0x31000
   11124:	ldr	pc, [ip, #3884]!	; 0xf2c

00011128 <fflush_unlocked@plt>:
   11128:	add	ip, pc, #0, 12
   1112c:	add	ip, ip, #200704	; 0x31000
   11130:	ldr	pc, [ip, #3876]!	; 0xf24

00011134 <iswprint@plt>:
   11134:	add	ip, pc, #0, 12
   11138:	add	ip, ip, #200704	; 0x31000
   1113c:	ldr	pc, [ip, #3868]!	; 0xf1c

00011140 <fwrite@plt>:
   11140:	add	ip, pc, #0, 12
   11144:	add	ip, ip, #200704	; 0x31000
   11148:	ldr	pc, [ip, #3860]!	; 0xf14

0001114c <lseek64@plt>:
   1114c:	add	ip, pc, #0, 12
   11150:	add	ip, ip, #200704	; 0x31000
   11154:	ldr	pc, [ip, #3852]!	; 0xf0c

00011158 <__ctype_get_mb_cur_max@plt>:
   11158:	add	ip, pc, #0, 12
   1115c:	add	ip, ip, #200704	; 0x31000
   11160:	ldr	pc, [ip, #3844]!	; 0xf04

00011164 <__fpending@plt>:
   11164:	add	ip, pc, #0, 12
   11168:	add	ip, ip, #200704	; 0x31000
   1116c:	ldr	pc, [ip, #3836]!	; 0xefc

00011170 <mbrtowc@plt>:
   11170:	add	ip, pc, #0, 12
   11174:	add	ip, ip, #200704	; 0x31000
   11178:	ldr	pc, [ip, #3828]!	; 0xef4

0001117c <error@plt>:
   1117c:	add	ip, pc, #0, 12
   11180:	add	ip, ip, #200704	; 0x31000
   11184:	ldr	pc, [ip, #3820]!	; 0xeec

00011188 <malloc@plt>:
   11188:	add	ip, pc, #0, 12
   1118c:	add	ip, ip, #200704	; 0x31000
   11190:	ldr	pc, [ip, #3812]!	; 0xee4

00011194 <iconv_open@plt>:
   11194:	add	ip, pc, #0, 12
   11198:	add	ip, ip, #200704	; 0x31000
   1119c:	ldr	pc, [ip, #3804]!	; 0xedc

000111a0 <__libc_start_main@plt>:
   111a0:	add	ip, pc, #0, 12
   111a4:	add	ip, ip, #200704	; 0x31000
   111a8:	ldr	pc, [ip, #3796]!	; 0xed4

000111ac <__freading@plt>:
   111ac:	add	ip, pc, #0, 12
   111b0:	add	ip, ip, #200704	; 0x31000
   111b4:	ldr	pc, [ip, #3788]!	; 0xecc

000111b8 <__gmon_start__@plt>:
   111b8:	add	ip, pc, #0, 12
   111bc:	add	ip, ip, #200704	; 0x31000
   111c0:	ldr	pc, [ip, #3780]!	; 0xec4

000111c4 <getopt_long@plt>:
   111c4:	add	ip, pc, #0, 12
   111c8:	add	ip, ip, #200704	; 0x31000
   111cc:	ldr	pc, [ip, #3772]!	; 0xebc

000111d0 <__ctype_b_loc@plt>:
   111d0:	add	ip, pc, #0, 12
   111d4:	add	ip, ip, #200704	; 0x31000
   111d8:	ldr	pc, [ip, #3764]!	; 0xeb4

000111dc <exit@plt>:
   111dc:	add	ip, pc, #0, 12
   111e0:	add	ip, ip, #200704	; 0x31000
   111e4:	ldr	pc, [ip, #3756]!	; 0xeac

000111e8 <iswspace@plt>:
   111e8:	add	ip, pc, #0, 12
   111ec:	add	ip, ip, #200704	; 0x31000
   111f0:	ldr	pc, [ip, #3748]!	; 0xea4

000111f4 <bcmp@plt>:
   111f4:	add	ip, pc, #0, 12
   111f8:	add	ip, ip, #200704	; 0x31000
   111fc:	ldr	pc, [ip, #3740]!	; 0xe9c

00011200 <strlen@plt>:
   11200:	add	ip, pc, #0, 12
   11204:	add	ip, ip, #200704	; 0x31000
   11208:	ldr	pc, [ip, #3732]!	; 0xe94

0001120c <strchr@plt>:
   1120c:	add	ip, pc, #0, 12
   11210:	add	ip, ip, #200704	; 0x31000
   11214:	ldr	pc, [ip, #3724]!	; 0xe8c

00011218 <__errno_location@plt>:
   11218:	add	ip, pc, #0, 12
   1121c:	add	ip, ip, #200704	; 0x31000
   11220:	ldr	pc, [ip, #3716]!	; 0xe84

00011224 <iswalnum@plt>:
   11224:	add	ip, pc, #0, 12
   11228:	add	ip, ip, #200704	; 0x31000
   1122c:	ldr	pc, [ip, #3708]!	; 0xe7c

00011230 <__sprintf_chk@plt>:
   11230:	add	ip, pc, #0, 12
   11234:	add	ip, ip, #200704	; 0x31000
   11238:	ldr	pc, [ip, #3700]!	; 0xe74

0001123c <__cxa_atexit@plt>:
   1123c:	add	ip, pc, #0, 12
   11240:	add	ip, ip, #200704	; 0x31000
   11244:	ldr	pc, [ip, #3692]!	; 0xe6c

00011248 <memset@plt>:
   11248:	add	ip, pc, #0, 12
   1124c:	add	ip, ip, #200704	; 0x31000
   11250:	ldr	pc, [ip, #3684]!	; 0xe64

00011254 <__printf_chk@plt>:
   11254:	add	ip, pc, #0, 12
   11258:	add	ip, ip, #200704	; 0x31000
   1125c:	ldr	pc, [ip, #3676]!	; 0xe5c

00011260 <write@plt>:
   11260:	add	ip, pc, #0, 12
   11264:	add	ip, ip, #200704	; 0x31000
   11268:	ldr	pc, [ip, #3668]!	; 0xe54

0001126c <fileno@plt>:
   1126c:	add	ip, pc, #0, 12
   11270:	add	ip, ip, #200704	; 0x31000
   11274:	ldr	pc, [ip, #3660]!	; 0xe4c

00011278 <__fprintf_chk@plt>:
   11278:	add	ip, pc, #0, 12
   1127c:	add	ip, ip, #200704	; 0x31000
   11280:	ldr	pc, [ip, #3652]!	; 0xe44

00011284 <memchr@plt>:
   11284:	add	ip, pc, #0, 12
   11288:	add	ip, ip, #200704	; 0x31000
   1128c:	ldr	pc, [ip, #3644]!	; 0xe3c

00011290 <fclose@plt>:
   11290:	add	ip, pc, #0, 12
   11294:	add	ip, ip, #200704	; 0x31000
   11298:	ldr	pc, [ip, #3636]!	; 0xe34

0001129c <strnlen@plt>:
   1129c:	add	ip, pc, #0, 12
   112a0:	add	ip, ip, #200704	; 0x31000
   112a4:	ldr	pc, [ip, #3628]!	; 0xe2c

000112a8 <fseeko64@plt>:
   112a8:	add	ip, pc, #0, 12
   112ac:	add	ip, ip, #200704	; 0x31000
   112b0:	ldr	pc, [ip, #3620]!	; 0xe24

000112b4 <__uflow@plt>:
   112b4:	add	ip, pc, #0, 12
   112b8:	add	ip, ip, #200704	; 0x31000
   112bc:	ldr	pc, [ip, #3612]!	; 0xe1c

000112c0 <__overflow@plt>:
   112c0:	add	ip, pc, #0, 12
   112c4:	add	ip, ip, #200704	; 0x31000
   112c8:	ldr	pc, [ip, #3604]!	; 0xe14

000112cc <setlocale@plt>:
   112cc:	add	ip, pc, #0, 12
   112d0:	add	ip, ip, #200704	; 0x31000
   112d4:	ldr	pc, [ip, #3596]!	; 0xe0c

000112d8 <strrchr@plt>:
   112d8:	add	ip, pc, #0, 12
   112dc:	add	ip, ip, #200704	; 0x31000
   112e0:	ldr	pc, [ip, #3588]!	; 0xe04

000112e4 <nl_langinfo@plt>:
   112e4:	add	ip, pc, #0, 12
   112e8:	add	ip, ip, #200704	; 0x31000
   112ec:	ldr	pc, [ip, #3580]!	; 0xdfc

000112f0 <bindtextdomain@plt>:
   112f0:	add	ip, pc, #0, 12
   112f4:	add	ip, ip, #200704	; 0x31000
   112f8:	ldr	pc, [ip, #3572]!	; 0xdf4

000112fc <isatty@plt>:
   112fc:	add	ip, pc, #0, 12
   11300:	add	ip, ip, #200704	; 0x31000
   11304:	ldr	pc, [ip, #3564]!	; 0xdec

00011308 <strncmp@plt>:
   11308:	add	ip, pc, #0, 12
   1130c:	add	ip, ip, #200704	; 0x31000
   11310:	ldr	pc, [ip, #3556]!	; 0xde4

00011314 <abort@plt>:
   11314:	add	ip, pc, #0, 12
   11318:	add	ip, ip, #200704	; 0x31000
   1131c:	ldr	pc, [ip, #3548]!	; 0xddc

00011320 <__assert_fail@plt>:
   11320:	add	ip, pc, #0, 12
   11324:	add	ip, ip, #200704	; 0x31000
   11328:	ldr	pc, [ip, #3540]!	; 0xdd4

Disassembly of section .text:

00011330 <.text>:
   11330:	mov	fp, #0
   11334:	mov	lr, #0
   11338:	pop	{r1}		; (ldr r1, [sp], #4)
   1133c:	mov	r2, sp
   11340:	push	{r2}		; (str r2, [sp, #-4]!)
   11344:	push	{r0}		; (str r0, [sp, #-4]!)
   11348:	ldr	ip, [pc, #16]	; 11360 <__assert_fail@plt+0x40>
   1134c:	push	{ip}		; (str ip, [sp, #-4]!)
   11350:	ldr	r0, [pc, #12]	; 11364 <__assert_fail@plt+0x44>
   11354:	ldr	r3, [pc, #12]	; 11368 <__assert_fail@plt+0x48>
   11358:	bl	111a0 <__libc_start_main@plt>
   1135c:	bl	11314 <abort@plt>
   11360:	andeq	sp, r2, ip, lsr #1
   11364:	andeq	r1, r1, r8, ror #12
   11368:	andeq	sp, r2, ip, asr #32
   1136c:	ldr	r3, [pc, #20]	; 11388 <__assert_fail@plt+0x68>
   11370:	ldr	r2, [pc, #20]	; 1138c <__assert_fail@plt+0x6c>
   11374:	add	r3, pc, r3
   11378:	ldr	r2, [r3, r2]
   1137c:	cmp	r2, #0
   11380:	bxeq	lr
   11384:	b	111b8 <__gmon_start__@plt>
   11388:	andeq	r1, r3, r4, lsl #25
   1138c:	andeq	r0, r0, r0, lsl #2
   11390:	ldr	r0, [pc, #24]	; 113b0 <__assert_fail@plt+0x90>
   11394:	ldr	r3, [pc, #24]	; 113b4 <__assert_fail@plt+0x94>
   11398:	cmp	r3, r0
   1139c:	bxeq	lr
   113a0:	ldr	r3, [pc, #16]	; 113b8 <__assert_fail@plt+0x98>
   113a4:	cmp	r3, #0
   113a8:	bxeq	lr
   113ac:	bx	r3
   113b0:	andeq	r3, r4, r8, ror #2
   113b4:	andeq	r3, r4, r8, ror #2
   113b8:	andeq	r0, r0, r0
   113bc:	ldr	r0, [pc, #36]	; 113e8 <__assert_fail@plt+0xc8>
   113c0:	ldr	r1, [pc, #36]	; 113ec <__assert_fail@plt+0xcc>
   113c4:	sub	r1, r1, r0
   113c8:	asr	r1, r1, #2
   113cc:	add	r1, r1, r1, lsr #31
   113d0:	asrs	r1, r1, #1
   113d4:	bxeq	lr
   113d8:	ldr	r3, [pc, #16]	; 113f0 <__assert_fail@plt+0xd0>
   113dc:	cmp	r3, #0
   113e0:	bxeq	lr
   113e4:	bx	r3
   113e8:	andeq	r3, r4, r8, ror #2
   113ec:	andeq	r3, r4, r8, ror #2
   113f0:	andeq	r0, r0, r0
   113f4:	push	{r4, lr}
   113f8:	ldr	r4, [pc, #24]	; 11418 <__assert_fail@plt+0xf8>
   113fc:	ldrb	r3, [r4]
   11400:	cmp	r3, #0
   11404:	popne	{r4, pc}
   11408:	bl	11390 <__assert_fail@plt+0x70>
   1140c:	mov	r3, #1
   11410:	strb	r3, [r4]
   11414:	pop	{r4, pc}
   11418:	andeq	r3, r4, r8, lsl #3
   1141c:	b	113bc <__assert_fail@plt+0x9c>
   11420:	push	{fp, lr}
   11424:	mov	fp, sp
   11428:	sub	sp, sp, #56	; 0x38
   1142c:	mov	r4, r0
   11430:	cmp	r0, #0
   11434:	bne	11624 <__assert_fail@plt+0x304>
   11438:	movw	r1, #53499	; 0xd0fb
   1143c:	mov	r0, #0
   11440:	mov	r2, #5
   11444:	movt	r1, #2
   11448:	bl	110ec <dcgettext@plt>
   1144c:	mov	r1, r0
   11450:	movw	r0, #12704	; 0x31a0
   11454:	movt	r0, #4
   11458:	ldr	r2, [r0]
   1145c:	mov	r0, #1
   11460:	mov	r3, r2
   11464:	bl	11254 <__printf_chk@plt>
   11468:	movw	r1, #53539	; 0xd123
   1146c:	mov	r0, #0
   11470:	mov	r2, #5
   11474:	movt	r1, #2
   11478:	bl	110ec <dcgettext@plt>
   1147c:	movw	r7, #12676	; 0x3184
   11480:	movt	r7, #4
   11484:	ldr	r1, [r7]
   11488:	bl	1105c <fputs_unlocked@plt>
   1148c:	movw	r1, #53674	; 0xd1aa
   11490:	mov	r0, #0
   11494:	mov	r2, #5
   11498:	movt	r1, #2
   1149c:	bl	110ec <dcgettext@plt>
   114a0:	ldr	r1, [r7]
   114a4:	bl	1105c <fputs_unlocked@plt>
   114a8:	movw	r1, #53719	; 0xd1d7
   114ac:	mov	r0, #0
   114b0:	mov	r2, #5
   114b4:	movt	r1, #2
   114b8:	bl	110ec <dcgettext@plt>
   114bc:	ldr	r1, [r7]
   114c0:	bl	1105c <fputs_unlocked@plt>
   114c4:	movw	r0, #55168	; 0xd780
   114c8:	mov	r2, #48	; 0x30
   114cc:	mov	r6, sp
   114d0:	movw	r5, #53773	; 0xd20d
   114d4:	movt	r0, #2
   114d8:	movt	r5, #2
   114dc:	add	r1, r0, #32
   114e0:	add	r3, r0, #16
   114e4:	vld1.64	{d18-d19}, [r0], r2
   114e8:	vld1.64	{d16-d17}, [r1]
   114ec:	vld1.64	{d20-d21}, [r3]
   114f0:	vldr	d22, [r0]
   114f4:	add	r1, r6, #32
   114f8:	add	r0, r6, #16
   114fc:	vst1.64	{d16-d17}, [r1]
   11500:	movw	r1, #53893	; 0xd285
   11504:	vst1.64	{d20-d21}, [r0]
   11508:	mov	r0, r6
   1150c:	movt	r1, #2
   11510:	vst1.64	{d18-d19}, [r0], r2
   11514:	vstr	d22, [r0]
   11518:	mov	r0, r5
   1151c:	bl	1108c <strcmp@plt>
   11520:	cmp	r0, #0
   11524:	ldrne	r1, [r6, #8]!
   11528:	cmpne	r1, #0
   1152c:	bne	11518 <__assert_fail@plt+0x1f8>
   11530:	movw	r1, #53988	; 0xd2e4
   11534:	ldr	r6, [r6, #4]
   11538:	mov	r0, #0
   1153c:	mov	r2, #5
   11540:	movt	r1, #2
   11544:	bl	110ec <dcgettext@plt>
   11548:	movw	r2, #53804	; 0xd22c
   1154c:	movw	r3, #54011	; 0xd2fb
   11550:	mov	r1, r0
   11554:	mov	r0, #1
   11558:	movt	r2, #2
   1155c:	movt	r3, #2
   11560:	bl	11254 <__printf_chk@plt>
   11564:	cmp	r6, #0
   11568:	mov	r0, #5
   1156c:	mov	r1, #0
   11570:	moveq	r6, r5
   11574:	bl	112cc <setlocale@plt>
   11578:	cmp	r0, #0
   1157c:	beq	115b4 <__assert_fail@plt+0x294>
   11580:	movw	r1, #54051	; 0xd323
   11584:	mov	r2, #3
   11588:	movt	r1, #2
   1158c:	bl	11308 <strncmp@plt>
   11590:	cmp	r0, #0
   11594:	beq	115b4 <__assert_fail@plt+0x294>
   11598:	movw	r1, #54055	; 0xd327
   1159c:	mov	r0, #0
   115a0:	mov	r2, #5
   115a4:	movt	r1, #2
   115a8:	bl	110ec <dcgettext@plt>
   115ac:	ldr	r1, [r7]
   115b0:	bl	1105c <fputs_unlocked@plt>
   115b4:	movw	r1, #54126	; 0xd36e
   115b8:	mov	r0, #0
   115bc:	mov	r2, #5
   115c0:	movt	r1, #2
   115c4:	bl	110ec <dcgettext@plt>
   115c8:	movw	r2, #54011	; 0xd2fb
   115cc:	mov	r1, r0
   115d0:	mov	r0, #1
   115d4:	mov	r3, r5
   115d8:	movt	r2, #2
   115dc:	bl	11254 <__printf_chk@plt>
   115e0:	movw	r1, #54153	; 0xd389
   115e4:	mov	r0, #0
   115e8:	mov	r2, #5
   115ec:	movt	r1, #2
   115f0:	bl	110ec <dcgettext@plt>
   115f4:	mov	r1, r0
   115f8:	movw	r0, #53921	; 0xd2a1
   115fc:	movw	r3, #53673	; 0xd1a9
   11600:	cmp	r6, r5
   11604:	mov	r2, r6
   11608:	movt	r0, #2
   1160c:	movt	r3, #2
   11610:	moveq	r3, r0
   11614:	mov	r0, #1
   11618:	bl	11254 <__printf_chk@plt>
   1161c:	mov	r0, r4
   11620:	bl	111dc <exit@plt>
   11624:	movw	r0, #12664	; 0x3178
   11628:	movw	r1, #53460	; 0xd0d4
   1162c:	mov	r2, #5
   11630:	movt	r0, #4
   11634:	movt	r1, #2
   11638:	ldr	r5, [r0]
   1163c:	mov	r0, #0
   11640:	bl	110ec <dcgettext@plt>
   11644:	mov	r2, r0
   11648:	movw	r0, #12704	; 0x31a0
   1164c:	mov	r1, #1
   11650:	movt	r0, #4
   11654:	ldr	r3, [r0]
   11658:	mov	r0, r5
   1165c:	bl	11278 <__fprintf_chk@plt>
   11660:	mov	r0, r4
   11664:	bl	111dc <exit@plt>
   11668:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1166c:	add	fp, sp, #28
   11670:	sub	sp, sp, #28
   11674:	mov	r4, r0
   11678:	ldr	r0, [r1]
   1167c:	mov	r5, r1
   11680:	bl	27cb8 <__assert_fail@plt+0x16998>
   11684:	movw	r1, #53673	; 0xd1a9
   11688:	mov	r0, #6
   1168c:	movt	r1, #2
   11690:	bl	112cc <setlocale@plt>
   11694:	movw	r6, #53808	; 0xd230
   11698:	movw	r1, #53780	; 0xd214
   1169c:	movt	r6, #2
   116a0:	movt	r1, #2
   116a4:	mov	r0, r6
   116a8:	bl	112f0 <bindtextdomain@plt>
   116ac:	mov	r0, r6
   116b0:	bl	11110 <textdomain@plt>
   116b4:	movw	r6, #12688	; 0x3190
   116b8:	movt	r6, #4
   116bc:	ldr	r0, [r6]
   116c0:	cmp	r0, #0
   116c4:	bne	116e0 <__assert_fail@plt+0x3c0>
   116c8:	mov	r0, #1024	; 0x400
   116cc:	bl	2acb4 <__assert_fail@plt+0x19994>
   116d0:	movw	r1, #12692	; 0x3194
   116d4:	str	r0, [r6]
   116d8:	movt	r1, #4
   116dc:	str	r0, [r1]
   116e0:	movw	r0, #33720	; 0x83b8
   116e4:	movt	r0, #1
   116e8:	bl	2d0b0 <__assert_fail@plt+0x1bd90>
   116ec:	movw	r0, #6324	; 0x18b4
   116f0:	movt	r0, #1
   116f4:	bl	2d0b0 <__assert_fail@plt+0x1bd90>
   116f8:	movw	r6, #53673	; 0xd1a9
   116fc:	movw	r7, #55104	; 0xd740
   11700:	movw	r9, #12684	; 0x318c
   11704:	mov	r8, #0
   11708:	mov	sl, #1
   1170c:	movt	r6, #2
   11710:	movt	r7, #2
   11714:	movt	r9, #4
   11718:	mov	r0, r4
   1171c:	mov	r1, r5
   11720:	mov	r2, r6
   11724:	mov	r3, r7
   11728:	str	r8, [sp]
   1172c:	bl	111c4 <getopt_long@plt>
   11730:	cmp	r0, #255	; 0xff
   11734:	ble	11748 <__assert_fail@plt+0x428>
   11738:	cmp	r0, #256	; 0x100
   1173c:	bne	118ac <__assert_fail@plt+0x58c>
   11740:	strb	sl, [r9]
   11744:	b	11718 <__assert_fail@plt+0x3f8>
   11748:	cmn	r0, #1
   1174c:	bne	11814 <__assert_fail@plt+0x4f4>
   11750:	movw	r0, #12656	; 0x3170
   11754:	movt	r0, #4
   11758:	ldr	r0, [r0]
   1175c:	cmp	r0, r4
   11760:	bge	11788 <__assert_fail@plt+0x468>
   11764:	add	r5, r5, r0, lsl #2
   11768:	sub	r4, r4, r0
   1176c:	mov	r7, #1
   11770:	ldr	r0, [r5], #4
   11774:	bl	11928 <__assert_fail@plt+0x608>
   11778:	and	r7, r7, r0
   1177c:	subs	r4, r4, #1
   11780:	bne	11770 <__assert_fail@plt+0x450>
   11784:	b	11808 <__assert_fail@plt+0x4e8>
   11788:	add	r4, sp, #20
   1178c:	mov	r0, r4
   11790:	bl	2a000 <__assert_fail@plt+0x18ce0>
   11794:	movw	r8, #12672	; 0x3180
   11798:	movw	r1, #54236	; 0xd3dc
   1179c:	mov	r2, #3
   117a0:	mov	r3, r4
   117a4:	movt	r8, #4
   117a8:	movt	r1, #2
   117ac:	ldr	r0, [r8]
   117b0:	bl	2a010 <__assert_fail@plt+0x18cf0>
   117b4:	mov	r1, r0
   117b8:	ldr	r0, [sp, #24]
   117bc:	mov	r7, #1
   117c0:	cmn	r1, #1
   117c4:	beq	11804 <__assert_fail@plt+0x4e4>
   117c8:	movw	r4, #54236	; 0xd3dc
   117cc:	add	r5, sp, #20
   117d0:	movt	r4, #2
   117d4:	bl	11928 <__assert_fail@plt+0x608>
   117d8:	mov	r6, r0
   117dc:	ldr	r0, [r8]
   117e0:	mov	r1, r4
   117e4:	mov	r2, #3
   117e8:	mov	r3, r5
   117ec:	bl	2a010 <__assert_fail@plt+0x18cf0>
   117f0:	mov	r1, r0
   117f4:	ldr	r0, [sp, #24]
   117f8:	and	r7, r7, r6
   117fc:	cmn	r1, #1
   11800:	bne	117d4 <__assert_fail@plt+0x4b4>
   11804:	bl	184a0 <__assert_fail@plt+0x7180>
   11808:	eor	r0, r7, #1
   1180c:	sub	sp, fp, #28
   11810:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11814:	cmn	r0, #3
   11818:	bne	1189c <__assert_fail@plt+0x57c>
   1181c:	movw	r0, #12564	; 0x3114
   11820:	movw	r1, #53847	; 0xd257
   11824:	movt	r0, #4
   11828:	movt	r1, #2
   1182c:	ldr	r4, [r0]
   11830:	movw	r0, #12676	; 0x3184
   11834:	movt	r0, #4
   11838:	ldr	r5, [r0]
   1183c:	movw	r0, #53829	; 0xd245
   11840:	movt	r0, #2
   11844:	bl	280e0 <__assert_fail@plt+0x16dc0>
   11848:	movw	r1, #53879	; 0xd277
   1184c:	mov	r6, r0
   11850:	movw	r0, #53866	; 0xd26a
   11854:	movt	r0, #2
   11858:	movt	r1, #2
   1185c:	bl	280e0 <__assert_fail@plt+0x16dc0>
   11860:	movw	r2, #53818	; 0xd23a
   11864:	mov	r1, #0
   11868:	mov	r3, r4
   1186c:	movt	r2, #2
   11870:	stm	sp, {r2, r6}
   11874:	movw	r2, #53804	; 0xd22c
   11878:	str	r1, [sp, #12]
   1187c:	movw	r1, #53773	; 0xd20d
   11880:	str	r0, [sp, #8]
   11884:	mov	r0, r5
   11888:	movt	r1, #2
   1188c:	movt	r2, #2
   11890:	bl	2aa80 <__assert_fail@plt+0x19760>
   11894:	mov	r0, #0
   11898:	bl	111dc <exit@plt>
   1189c:	cmn	r0, #2
   118a0:	bne	118ac <__assert_fail@plt+0x58c>
   118a4:	mov	r0, #0
   118a8:	bl	11420 <__assert_fail@plt+0x100>
   118ac:	mov	r0, #1
   118b0:	bl	11420 <__assert_fail@plt+0x100>
   118b4:	push	{r4, r5, r6, sl, fp, lr}
   118b8:	add	fp, sp, #16
   118bc:	movw	r5, #12688	; 0x3190
   118c0:	movw	r6, #12692	; 0x3194
   118c4:	movt	r5, #4
   118c8:	movt	r6, #4
   118cc:	ldr	r1, [r5]
   118d0:	ldr	r0, [r6]
   118d4:	sub	r4, r0, r1
   118d8:	mov	r0, #1
   118dc:	mov	r2, r4
   118e0:	bl	184c8 <__assert_fail@plt+0x71a8>
   118e4:	cmp	r0, r4
   118e8:	ldreq	r0, [r5]
   118ec:	streq	r0, [r6]
   118f0:	popeq	{r4, r5, r6, sl, fp, pc}
   118f4:	bl	11218 <__errno_location@plt>
   118f8:	movw	r1, #54204	; 0xd3bc
   118fc:	ldr	r4, [r0]
   11900:	mov	r0, #0
   11904:	mov	r2, #5
   11908:	movt	r1, #2
   1190c:	bl	110ec <dcgettext@plt>
   11910:	movw	r2, #1985	; 0x7c1
   11914:	mov	r3, r0
   11918:	mov	r0, #1
   1191c:	mov	r1, r4
   11920:	movt	r2, #3
   11924:	bl	1117c <error@plt>
   11928:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1192c:	add	fp, sp, #28
   11930:	sub	sp, sp, #292	; 0x124
   11934:	str	r0, [sp, #4]
   11938:	mov	sl, r0
   1193c:	ldrb	r1, [r0], #1
   11940:	cmp	r1, #32
   11944:	beq	11938 <__assert_fail@plt+0x618>
   11948:	sub	r1, r1, #43	; 0x2b
   1194c:	mov	r3, #0
   11950:	clz	r1, r1
   11954:	lsr	r7, r1, #5
   11958:	ldrb	r2, [sl, r7]!
   1195c:	cmp	r2, #0
   11960:	beq	11994 <__assert_fail@plt+0x674>
   11964:	mvn	r3, #47	; 0x2f
   11968:	mov	r1, r7
   1196c:	uxtab	r2, r3, r2
   11970:	cmp	r2, #10
   11974:	bcs	11990 <__assert_fail@plt+0x670>
   11978:	ldrb	r2, [r0, r1]
   1197c:	add	r1, r1, #1
   11980:	cmp	r2, #0
   11984:	bne	1196c <__assert_fail@plt+0x64c>
   11988:	mov	r3, #1
   1198c:	b	11994 <__assert_fail@plt+0x674>
   11990:	mov	r3, #0
   11994:	sub	r2, r7, #1
   11998:	mov	lr, #10
   1199c:	mov	r4, #0
   119a0:	mov	r5, #0
   119a4:	mov	r9, #0
   119a8:	mov	r6, #0
   119ac:	tst	r3, #1
   119b0:	beq	11a44 <__assert_fail@plt+0x724>
   119b4:	ldrb	r3, [r0, r2]
   119b8:	cmp	r3, #0
   119bc:	beq	11a80 <__assert_fail@plt+0x760>
   119c0:	movw	r1, #39321	; 0x9999
   119c4:	movt	r1, #39321	; 0x9999
   119c8:	subs	r8, r1, r4
   119cc:	movw	r1, #39321	; 0x9999
   119d0:	movt	r1, #6553	; 0x1999
   119d4:	sbcs	r7, r1, r5
   119d8:	bcc	11bb4 <__assert_fail@plt+0x894>
   119dc:	mov	ip, r5
   119e0:	umull	r1, r5, r9, lr
   119e4:	mov	r8, r4
   119e8:	add	r4, r6, r6, lsl #2
   119ec:	lsl	r7, r6, #1
   119f0:	sub	r3, r3, #48	; 0x30
   119f4:	add	r2, r2, #1
   119f8:	orr	r7, r7, r9, lsr #31
   119fc:	add	r4, r5, r4, lsl #1
   11a00:	lsr	r5, r6, #29
   11a04:	add	r5, r5, r6, lsr #31
   11a08:	subs	r6, r1, r9, lsl #1
   11a0c:	sbcs	r6, r4, r7
   11a10:	umull	r8, r6, r8, lr
   11a14:	add	r7, ip, ip, lsl #2
   11a18:	addcc	r5, r5, #1
   11a1c:	adds	r9, r1, r3
   11a20:	mov	r1, #0
   11a24:	mov	r3, #1
   11a28:	add	r7, r6, r7, lsl #1
   11a2c:	adcs	r6, r4, #0
   11a30:	adcs	r4, r8, r5
   11a34:	adcs	r5, r7, #0
   11a38:	adcs	r1, r1, #0
   11a3c:	beq	119ac <__assert_fail@plt+0x68c>
   11a40:	b	11bb4 <__assert_fail@plt+0x894>
   11a44:	movw	r1, #54277	; 0xd405
   11a48:	mov	r0, #0
   11a4c:	mov	r2, #5
   11a50:	mov	r4, #0
   11a54:	movt	r1, #2
   11a58:	bl	110ec <dcgettext@plt>
   11a5c:	mov	r5, r0
   11a60:	ldr	r0, [sp, #4]
   11a64:	bl	29eb4 <__assert_fail@plt+0x18b94>
   11a68:	mov	r3, r0
   11a6c:	mov	r0, #0
   11a70:	mov	r1, #0
   11a74:	mov	r2, r5
   11a78:	bl	1117c <error@plt>
   11a7c:	b	11e8c <__assert_fail@plt+0xb6c>
   11a80:	cmp	r5, #0
   11a84:	bmi	11bb4 <__assert_fail@plt+0x894>
   11a88:	movw	r0, #12684	; 0x318c
   11a8c:	movt	r0, #4
   11a90:	ldrb	r0, [r0]
   11a94:	cmp	r0, #1
   11a98:	bne	11ab8 <__assert_fail@plt+0x798>
   11a9c:	movw	r0, #12664	; 0x3178
   11aa0:	movw	r2, #54240	; 0xd3e0
   11aa4:	mov	r1, #1
   11aa8:	movt	r0, #4
   11aac:	movt	r2, #2
   11ab0:	ldr	r0, [r0]
   11ab4:	bl	11278 <__fprintf_chk@plt>
   11ab8:	mov	r0, r4
   11abc:	mov	r1, r5
   11ac0:	mov	r2, r9
   11ac4:	mov	r3, r6
   11ac8:	bl	120b0 <__assert_fail@plt+0xd90>
   11acc:	movw	r7, #12692	; 0x3194
   11ad0:	mov	r2, r9
   11ad4:	mov	r3, r6
   11ad8:	movt	r7, #4
   11adc:	ldr	r0, [r7]
   11ae0:	add	r1, r0, #1
   11ae4:	str	r1, [r7]
   11ae8:	mov	r1, #58	; 0x3a
   11aec:	strb	r1, [r0]
   11af0:	mov	r1, r5
   11af4:	add	r5, sp, #8
   11af8:	mov	r0, r4
   11afc:	str	r5, [sp]
   11b00:	bl	122b8 <__assert_fail@plt+0xf98>
   11b04:	ldrb	r0, [sp, #258]	; 0x102
   11b08:	cmp	r0, #0
   11b0c:	beq	11d50 <__assert_fail@plt+0xa30>
   11b10:	mov	r2, #0
   11b14:	mov	r3, #32
   11b18:	sub	r4, fp, #56	; 0x38
   11b1c:	b	11b30 <__assert_fail@plt+0x810>
   11b20:	uxtb	r1, r0
   11b24:	add	r2, r2, #1
   11b28:	cmp	r2, r1
   11b2c:	bcs	11d50 <__assert_fail@plt+0xa30>
   11b30:	add	r8, r5, r2
   11b34:	ldrb	r1, [r8, #224]!	; 0xe0
   11b38:	cmp	r1, #0
   11b3c:	beq	11b20 <__assert_fail@plt+0x800>
   11b40:	add	r0, r5, r2, lsl #3
   11b44:	mov	sl, #0
   11b48:	str	r2, [sp, #4]
   11b4c:	add	r9, r0, #16
   11b50:	ldr	r0, [r7]
   11b54:	add	r1, r0, #1
   11b58:	mov	r2, r4
   11b5c:	str	r1, [r7]
   11b60:	strb	r3, [r0]
   11b64:	ldrd	r0, [r9]
   11b68:	bl	18540 <__assert_fail@plt+0x7220>
   11b6c:	ldr	r6, [r7]
   11b70:	mov	r1, r0
   11b74:	sub	r0, r4, r0
   11b78:	add	r5, r0, #20
   11b7c:	mov	r2, r5
   11b80:	mov	r0, r6
   11b84:	bl	110d4 <memcpy@plt>
   11b88:	ldrb	r1, [r8]
   11b8c:	add	sl, sl, #1
   11b90:	add	r0, r6, r5
   11b94:	mov	r3, #32
   11b98:	str	r0, [r7]
   11b9c:	cmp	sl, r1
   11ba0:	bcc	11b54 <__assert_fail@plt+0x834>
   11ba4:	ldrb	r0, [sp, #258]	; 0x102
   11ba8:	ldr	r2, [sp, #4]
   11bac:	add	r5, sp, #8
   11bb0:	b	11b20 <__assert_fail@plt+0x800>
   11bb4:	movw	r0, #12684	; 0x318c
   11bb8:	movt	r0, #4
   11bbc:	ldrb	r0, [r0]
   11bc0:	cmp	r0, #1
   11bc4:	bne	11be4 <__assert_fail@plt+0x8c4>
   11bc8:	movw	r0, #12664	; 0x3178
   11bcc:	movw	r2, #54312	; 0xd428
   11bd0:	mov	r1, #1
   11bd4:	movt	r0, #4
   11bd8:	movt	r2, #2
   11bdc:	ldr	r0, [r0]
   11be0:	bl	11278 <__fprintf_chk@plt>
   11be4:	add	r5, sp, #8
   11be8:	mov	r1, sl
   11bec:	mov	r2, #10
   11bf0:	mov	r0, r5
   11bf4:	bl	272bc <__assert_fail@plt+0x15f9c>
   11bf8:	movw	r4, #12676	; 0x3184
   11bfc:	mov	r1, #10
   11c00:	mov	r2, r5
   11c04:	movt	r4, #4
   11c08:	ldr	r0, [r4]
   11c0c:	bl	272d4 <__assert_fail@plt+0x15fb4>
   11c10:	ldr	r0, [r4]
   11c14:	ldr	r1, [r0, #20]
   11c18:	ldr	r2, [r0, #24]
   11c1c:	cmp	r1, r2
   11c20:	bcs	11e98 <__assert_fail@plt+0xb78>
   11c24:	add	r2, r1, #1
   11c28:	str	r2, [r0, #20]
   11c2c:	mov	r0, #58	; 0x3a
   11c30:	strb	r0, [r1]
   11c34:	add	r0, sp, #8
   11c38:	sub	r1, fp, #56	; 0x38
   11c3c:	bl	11ee4 <__assert_fail@plt+0xbc4>
   11c40:	ldr	r1, [fp, #-48]	; 0xffffffd0
   11c44:	cmp	r1, #0
   11c48:	beq	11d08 <__assert_fail@plt+0x9e8>
   11c4c:	ldr	r0, [fp, #-52]	; 0xffffffcc
   11c50:	mov	r5, #0
   11c54:	mov	r6, #32
   11c58:	b	11c6c <__assert_fail@plt+0x94c>
   11c5c:	ldr	r1, [fp, #-48]	; 0xffffffd0
   11c60:	add	r5, r5, #1
   11c64:	cmp	r5, r1
   11c68:	bcs	11cd8 <__assert_fail@plt+0x9b8>
   11c6c:	ldr	r2, [r0, r5, lsl #2]
   11c70:	cmp	r2, #0
   11c74:	beq	11c60 <__assert_fail@plt+0x940>
   11c78:	mov	r7, #0
   11c7c:	ldr	r0, [r4]
   11c80:	ldr	r1, [r0, #20]
   11c84:	ldr	r2, [r0, #24]
   11c88:	cmp	r1, r2
   11c8c:	bcs	11ccc <__assert_fail@plt+0x9ac>
   11c90:	add	r2, r1, #1
   11c94:	str	r2, [r0, #20]
   11c98:	strb	r6, [r1]
   11c9c:	ldr	r1, [fp, #-56]	; 0xffffffc8
   11ca0:	add	r0, r5, r5, lsl #1
   11ca4:	add	r2, r1, r0, lsl #2
   11ca8:	ldr	r0, [r4]
   11cac:	mov	r1, #10
   11cb0:	bl	272d4 <__assert_fail@plt+0x15fb4>
   11cb4:	ldr	r0, [fp, #-52]	; 0xffffffcc
   11cb8:	add	r7, r7, #1
   11cbc:	ldr	r1, [r0, r5, lsl #2]
   11cc0:	cmp	r7, r1
   11cc4:	bcc	11c7c <__assert_fail@plt+0x95c>
   11cc8:	b	11c5c <__assert_fail@plt+0x93c>
   11ccc:	mov	r1, #32
   11cd0:	bl	112c0 <__overflow@plt>
   11cd4:	b	11c9c <__assert_fail@plt+0x97c>
   11cd8:	cmp	r1, #0
   11cdc:	beq	11d08 <__assert_fail@plt+0x9e8>
   11ce0:	mov	r5, #0
   11ce4:	mov	r6, #0
   11ce8:	ldr	r0, [fp, #-56]	; 0xffffffc8
   11cec:	add	r0, r0, r5
   11cf0:	bl	1a44c <__assert_fail@plt+0x912c>
   11cf4:	ldr	r0, [fp, #-48]	; 0xffffffd0
   11cf8:	add	r6, r6, #1
   11cfc:	add	r5, r5, #12
   11d00:	cmp	r6, r0
   11d04:	bcc	11ce8 <__assert_fail@plt+0x9c8>
   11d08:	ldr	r0, [fp, #-56]	; 0xffffffc8
   11d0c:	bl	184a0 <__assert_fail@plt+0x7180>
   11d10:	ldr	r0, [fp, #-52]	; 0xffffffcc
   11d14:	bl	184a0 <__assert_fail@plt+0x7180>
   11d18:	add	r0, sp, #8
   11d1c:	bl	1a44c <__assert_fail@plt+0x912c>
   11d20:	ldr	r0, [r4]
   11d24:	ldr	r1, [r0, #20]
   11d28:	ldr	r2, [r0, #24]
   11d2c:	cmp	r1, r2
   11d30:	bcs	11ea4 <__assert_fail@plt+0xb84>
   11d34:	add	r2, r1, #1
   11d38:	str	r2, [r0, #20]
   11d3c:	mov	r0, #10
   11d40:	strb	r0, [r1]
   11d44:	ldr	r0, [r4]
   11d48:	bl	11128 <fflush_unlocked@plt>
   11d4c:	b	11e88 <__assert_fail@plt+0xb68>
   11d50:	ldr	r0, [sp, #16]
   11d54:	ldr	r1, [sp, #20]
   11d58:	orrs	r0, r0, r1
   11d5c:	beq	11d88 <__assert_fail@plt+0xa68>
   11d60:	ldr	r1, [r7]
   11d64:	add	r0, r5, #8
   11d68:	add	r2, r1, #1
   11d6c:	str	r2, [r7]
   11d70:	mov	r2, #32
   11d74:	strb	r2, [r1]
   11d78:	ldrd	r0, [r0]
   11d7c:	ldr	r2, [sp, #8]
   11d80:	ldr	r3, [sp, #12]
   11d84:	bl	120b0 <__assert_fail@plt+0xd90>
   11d88:	ldr	r0, [r7]
   11d8c:	movw	r6, #12560	; 0x3110
   11d90:	movw	r8, #12688	; 0x3190
   11d94:	mov	r1, #10
   11d98:	movt	r6, #4
   11d9c:	movt	r8, #4
   11da0:	add	r4, r0, #1
   11da4:	str	r4, [r7]
   11da8:	strb	r1, [r0]
   11dac:	ldr	r0, [r6]
   11db0:	ldr	r5, [r8]
   11db4:	cmn	r0, #1
   11db8:	beq	11dec <__assert_fail@plt+0xacc>
   11dbc:	cmp	r0, #0
   11dc0:	beq	11e20 <__assert_fail@plt+0xb00>
   11dc4:	ldr	r1, [r8]
   11dc8:	ldr	r0, [r7]
   11dcc:	sub	r4, r0, r1
   11dd0:	mov	r0, #1
   11dd4:	mov	r2, r4
   11dd8:	bl	184c8 <__assert_fail@plt+0x71a8>
   11ddc:	cmp	r0, r4
   11de0:	bne	11eb0 <__assert_fail@plt+0xb90>
   11de4:	ldr	r0, [r8]
   11de8:	b	11e84 <__assert_fail@plt+0xb64>
   11dec:	mov	r0, #0
   11df0:	bl	112fc <isatty@plt>
   11df4:	mov	r1, r0
   11df8:	mov	r0, #1
   11dfc:	cmp	r1, #0
   11e00:	bne	11e14 <__assert_fail@plt+0xaf4>
   11e04:	mov	r0, #1
   11e08:	bl	112fc <isatty@plt>
   11e0c:	cmp	r0, #0
   11e10:	movwne	r0, #1
   11e14:	str	r0, [r6]
   11e18:	cmp	r0, #0
   11e1c:	bne	11dc4 <__assert_fail@plt+0xaa4>
   11e20:	sub	r0, r4, r5
   11e24:	cmp	r0, #512	; 0x200
   11e28:	bcc	11e88 <__assert_fail@plt+0xb68>
   11e2c:	ldr	r1, [r8]
   11e30:	ldr	r6, [r7]
   11e34:	movw	r0, #513	; 0x201
   11e38:	add	r4, r1, r0
   11e3c:	ldrb	r0, [r4, #-2]
   11e40:	sub	r4, r4, #1
   11e44:	cmp	r0, #10
   11e48:	bne	11e3c <__assert_fail@plt+0xb1c>
   11e4c:	sub	r5, r4, r1
   11e50:	mov	r0, #1
   11e54:	str	r4, [r7]
   11e58:	mov	r2, r5
   11e5c:	bl	184c8 <__assert_fail@plt+0x71a8>
   11e60:	cmp	r0, r5
   11e64:	bne	11eb0 <__assert_fail@plt+0xb90>
   11e68:	sub	r5, r6, r4
   11e6c:	ldr	r6, [r8]
   11e70:	mov	r1, r4
   11e74:	mov	r2, r5
   11e78:	mov	r0, r6
   11e7c:	bl	110d4 <memcpy@plt>
   11e80:	add	r0, r6, r5
   11e84:	str	r0, [r7]
   11e88:	mov	r4, #1
   11e8c:	mov	r0, r4
   11e90:	sub	sp, fp, #28
   11e94:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11e98:	mov	r1, #58	; 0x3a
   11e9c:	bl	112c0 <__overflow@plt>
   11ea0:	b	11c34 <__assert_fail@plt+0x914>
   11ea4:	mov	r1, #10
   11ea8:	bl	112c0 <__overflow@plt>
   11eac:	b	11d44 <__assert_fail@plt+0xa24>
   11eb0:	bl	11218 <__errno_location@plt>
   11eb4:	movw	r1, #54204	; 0xd3bc
   11eb8:	ldr	r4, [r0]
   11ebc:	mov	r0, #0
   11ec0:	mov	r2, #5
   11ec4:	movt	r1, #2
   11ec8:	bl	110ec <dcgettext@plt>
   11ecc:	movw	r2, #1985	; 0x7c1
   11ed0:	mov	r3, r0
   11ed4:	mov	r0, #1
   11ed8:	mov	r1, r4
   11edc:	movt	r2, #3
   11ee0:	bl	1117c <error@plt>
   11ee4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11ee8:	add	fp, sp, #28
   11eec:	sub	sp, sp, #28
   11ef0:	mov	r5, r0
   11ef4:	mov	r0, #0
   11ef8:	mov	r9, r1
   11efc:	str	r0, [r1]
   11f00:	str	r0, [r1, #4]
   11f04:	str	r0, [r1, #8]
   11f08:	mov	r0, r5
   11f0c:	bl	1b658 <__assert_fail@plt+0xa338>
   11f10:	cmp	r0, #0
   11f14:	beq	120a8 <__assert_fail@plt+0xd88>
   11f18:	movw	r8, #12684	; 0x318c
   11f1c:	movt	r8, #4
   11f20:	ldrb	r0, [r8]
   11f24:	cmp	r0, #1
   11f28:	bne	11f48 <__assert_fail@plt+0xc28>
   11f2c:	movw	r0, #12664	; 0x3178
   11f30:	movw	r2, #55015	; 0xd6e7
   11f34:	mov	r1, #1
   11f38:	movt	r0, #4
   11f3c:	movt	r2, #2
   11f40:	ldr	r0, [r0]
   11f44:	bl	11278 <__fprintf_chk@plt>
   11f48:	add	r0, sp, #4
   11f4c:	bl	1a3ec <__assert_fail@plt+0x90cc>
   11f50:	mov	r0, r5
   11f54:	mov	r1, #0
   11f58:	bl	264dc <__assert_fail@plt+0x151bc>
   11f5c:	mov	r6, r0
   11f60:	mov	r0, r5
   11f64:	mov	r1, r5
   11f68:	mov	r2, r6
   11f6c:	bl	1e0f8 <__assert_fail@plt+0xcdd8>
   11f70:	cmp	r6, #0
   11f74:	beq	11fa4 <__assert_fail@plt+0xc84>
   11f78:	add	r7, sp, #16
   11f7c:	mov	r0, r7
   11f80:	mov	r1, #2
   11f84:	bl	1a818 <__assert_fail@plt+0x94f8>
   11f88:	mov	r0, r9
   11f8c:	mov	r1, r7
   11f90:	bl	17d34 <__assert_fail@plt+0x6a14>
   11f94:	mov	r0, r7
   11f98:	bl	1a44c <__assert_fail@plt+0x912c>
   11f9c:	subs	r6, r6, #1
   11fa0:	bne	11f7c <__assert_fail@plt+0xc5c>
   11fa4:	movw	sl, #488	; 0x1e8
   11fa8:	mov	r6, #3
   11fac:	mov	r4, #1
   11fb0:	add	r7, sp, #16
   11fb4:	movt	sl, #3
   11fb8:	b	11ff4 <__assert_fail@plt+0xcd4>
   11fbc:	mov	r0, r5
   11fc0:	mov	r1, r5
   11fc4:	mov	r2, r6
   11fc8:	bl	1ecd4 <__assert_fail@plt+0xd9b4>
   11fcc:	mov	r0, r7
   11fd0:	mov	r1, r6
   11fd4:	bl	1a818 <__assert_fail@plt+0x94f8>
   11fd8:	mov	r0, r9
   11fdc:	mov	r1, r7
   11fe0:	bl	17d34 <__assert_fail@plt+0x6a14>
   11fe4:	mov	r0, r7
   11fe8:	bl	1a44c <__assert_fail@plt+0x912c>
   11fec:	cmp	r4, #668	; 0x29c
   11ff0:	bhi	12030 <__assert_fail@plt+0xd10>
   11ff4:	mov	r0, r5
   11ff8:	mov	r1, r6
   11ffc:	bl	1eea0 <__assert_fail@plt+0xdb80>
   12000:	cmp	r0, #0
   12004:	bne	11fbc <__assert_fail@plt+0xc9c>
   12008:	ldrb	r0, [sl, r4]
   1200c:	add	r6, r6, r0
   12010:	mov	r0, r5
   12014:	mul	r1, r6, r6
   12018:	bl	1b670 <__assert_fail@plt+0xa350>
   1201c:	cmp	r0, #0
   12020:	bmi	12030 <__assert_fail@plt+0xd10>
   12024:	add	r4, r4, #1
   12028:	cmp	r4, #668	; 0x29c
   1202c:	bls	11ff4 <__assert_fail@plt+0xcd4>
   12030:	add	r0, sp, #4
   12034:	bl	1a44c <__assert_fail@plt+0x912c>
   12038:	mov	r0, r5
   1203c:	mov	r1, #1
   12040:	bl	1b670 <__assert_fail@plt+0xa350>
   12044:	cmp	r0, #0
   12048:	beq	120a8 <__assert_fail@plt+0xd88>
   1204c:	ldrb	r0, [r8]
   12050:	cmp	r0, #1
   12054:	bne	12074 <__assert_fail@plt+0xd54>
   12058:	movw	r0, #12664	; 0x3178
   1205c:	movw	r2, #54995	; 0xd6d3
   12060:	mov	r1, #1
   12064:	movt	r0, #4
   12068:	movt	r2, #2
   1206c:	ldr	r0, [r0]
   12070:	bl	11278 <__fprintf_chk@plt>
   12074:	mov	r0, r5
   12078:	bl	17aac <__assert_fail@plt+0x678c>
   1207c:	cmp	r0, #0
   12080:	beq	12098 <__assert_fail@plt+0xd78>
   12084:	mov	r0, r9
   12088:	mov	r1, r5
   1208c:	bl	17d34 <__assert_fail@plt+0x6a14>
   12090:	sub	sp, fp, #28
   12094:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12098:	mov	r0, r5
   1209c:	mov	r1, #1
   120a0:	mov	r2, r9
   120a4:	bl	17e98 <__assert_fail@plt+0x6b78>
   120a8:	sub	sp, fp, #28
   120ac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   120b0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   120b4:	add	fp, sp, #28
   120b8:	sub	sp, sp, #44	; 0x2c
   120bc:	movw	r7, #12692	; 0x3194
   120c0:	mov	r5, r0
   120c4:	mov	r8, r3
   120c8:	orrs	r0, r0, r1
   120cc:	movt	r7, #4
   120d0:	beq	12278 <__assert_fail@plt+0xf58>
   120d4:	movw	r9, #51712	; 0xca00
   120d8:	str	r2, [sp, #12]
   120dc:	mov	r0, r5
   120e0:	mov	r3, #0
   120e4:	mov	r4, r1
   120e8:	movt	r9, #15258	; 0x3b9a
   120ec:	mov	r2, r9
   120f0:	bl	2ced8 <__assert_fail@plt+0x1bbb8>
   120f4:	umull	r2, r3, r0, r9
   120f8:	str	r0, [sp, #4]
   120fc:	str	r1, [sp]
   12100:	mvn	ip, #63	; 0x3f
   12104:	mov	lr, #0
   12108:	mov	r6, #0
   1210c:	mla	r3, r1, r9, r3
   12110:	mov	r1, r8
   12114:	mov	r8, #0
   12118:	subs	r0, r5, r2
   1211c:	mov	r5, #0
   12120:	sbc	sl, r4, r3
   12124:	mov	r3, #0
   12128:	mov	r4, r0
   1212c:	b	1217c <__assert_fail@plt+0xe5c>
   12130:	subs	r3, r4, r9
   12134:	orr	r8, r8, #1
   12138:	sbc	r0, sl, lr
   1213c:	subs	r4, r3, #1
   12140:	sbc	sl, r0, #0
   12144:	subs	r2, r2, r5
   12148:	sbcs	r1, r1, r6
   1214c:	str	r2, [sp, #12]
   12150:	mov	r2, r1
   12154:	mov	r1, #0
   12158:	movwcc	r1, #1
   1215c:	cmp	r1, #0
   12160:	mov	r1, r2
   12164:	moveq	r4, r3
   12168:	moveq	sl, r0
   1216c:	ldr	r0, [sp, #16]
   12170:	adds	ip, ip, #1
   12174:	orr	r3, r0, r7, lsr #31
   12178:	bcs	121f8 <__assert_fail@plt+0xed8>
   1217c:	lsl	r0, r3, #1
   12180:	lsrs	r3, r6, #1
   12184:	ldr	r2, [sp, #12]
   12188:	rrx	r5, r5
   1218c:	lsrs	lr, lr, #1
   12190:	mov	r7, r8
   12194:	lsl	r8, r8, #1
   12198:	str	r0, [sp, #16]
   1219c:	orr	r6, r3, r9, lsl #31
   121a0:	rrx	r9, r9
   121a4:	subs	r3, r9, r4
   121a8:	sbcs	r3, lr, sl
   121ac:	bcc	12130 <__assert_fail@plt+0xe10>
   121b0:	str	r7, [sp, #8]
   121b4:	mov	r7, r8
   121b8:	eor	r3, r4, r9
   121bc:	eor	r8, sl, lr
   121c0:	mov	r0, r4
   121c4:	orrs	r3, r3, r8
   121c8:	bne	121e8 <__assert_fail@plt+0xec8>
   121cc:	mov	r8, r7
   121d0:	ldr	r7, [sp, #8]
   121d4:	subs	r3, r2, r5
   121d8:	mov	r4, r0
   121dc:	sbcs	r3, r1, r6
   121e0:	bcs	12130 <__assert_fail@plt+0xe10>
   121e4:	b	1216c <__assert_fail@plt+0xe4c>
   121e8:	mov	r8, r7
   121ec:	ldr	r7, [sp, #8]
   121f0:	mov	r4, r0
   121f4:	b	1216c <__assert_fail@plt+0xe4c>
   121f8:	mov	r5, r1
   121fc:	ldr	r0, [sp, #4]
   12200:	ldr	r1, [sp]
   12204:	mov	r2, r8
   12208:	bl	120b0 <__assert_fail@plt+0xd90>
   1220c:	ldr	r0, [sp, #12]
   12210:	add	r8, sp, #23
   12214:	mov	r1, r5
   12218:	mov	r2, r8
   1221c:	bl	18540 <__assert_fail@plt+0x7220>
   12220:	movw	r7, #12692	; 0x3194
   12224:	mov	r5, r0
   12228:	sub	r0, r8, r0
   1222c:	movt	r7, #4
   12230:	add	r4, r0, #20
   12234:	cmp	r4, #8
   12238:	ldr	r6, [r7]
   1223c:	bhi	12260 <__assert_fail@plt+0xf40>
   12240:	sub	r8, r5, r8
   12244:	mov	r0, r6
   12248:	mov	r1, #48	; 0x30
   1224c:	sub	r2, r8, #11
   12250:	bl	11248 <memset@plt>
   12254:	add	r0, r8, r6
   12258:	sub	r6, r0, #11
   1225c:	str	r6, [r7]
   12260:	mov	r0, r6
   12264:	mov	r1, r5
   12268:	mov	r2, r4
   1226c:	bl	110d4 <memcpy@plt>
   12270:	add	r0, r6, r4
   12274:	b	122ac <__assert_fail@plt+0xf8c>
   12278:	add	r6, sp, #23
   1227c:	mov	r0, r2
   12280:	mov	r1, r8
   12284:	mov	r2, r6
   12288:	bl	18540 <__assert_fail@plt+0x7220>
   1228c:	ldr	r5, [r7]
   12290:	mov	r1, r0
   12294:	sub	r0, r6, r0
   12298:	add	r4, r0, #20
   1229c:	mov	r2, r4
   122a0:	mov	r0, r5
   122a4:	bl	110d4 <memcpy@plt>
   122a8:	add	r0, r5, r4
   122ac:	str	r0, [r7]
   122b0:	sub	sp, fp, #28
   122b4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   122b8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   122bc:	add	fp, sp, #28
   122c0:	sub	sp, sp, #68	; 0x44
   122c4:	ldr	sl, [fp, #8]
   122c8:	mov	r8, r2
   122cc:	mov	r2, #0
   122d0:	mov	r7, sl
   122d4:	str	r2, [sl, #12]
   122d8:	strb	r2, [sl, #250]	; 0xfa
   122dc:	str	r2, [r7, #8]!
   122e0:	orrs	r2, r0, r1
   122e4:	bne	122f4 <__assert_fail@plt+0xfd4>
   122e8:	subs	r2, r8, #2
   122ec:	sbcs	r2, r3, #0
   122f0:	bcc	13608 <__assert_fail@plt+0x22e8>
   122f4:	tst	r8, #1
   122f8:	str	r7, [sp, #40]	; 0x28
   122fc:	bne	123a4 <__assert_fail@plt+0x1084>
   12300:	add	lr, sl, #16
   12304:	orrs	r7, r8, r3
   12308:	beq	123b4 <__assert_fail@plt+0x1094>
   1230c:	mov	r6, #0
   12310:	mov	r4, r8
   12314:	mov	r7, r3
   12318:	str	lr, [fp, #-32]	; 0xffffffe0
   1231c:	lsrs	r7, r7, #1
   12320:	rrx	r5, r4
   12324:	tst	r4, #2
   12328:	sub	r6, r6, #1
   1232c:	mov	r4, r5
   12330:	beq	1231c <__assert_fail@plt+0xffc>
   12334:	rsb	r7, r6, #0
   12338:	add	r4, r6, #32
   1233c:	add	lr, r6, #64	; 0x40
   12340:	lsr	r5, r0, r7
   12344:	lsr	ip, r1, r7
   12348:	lsr	r2, r3, r7
   1234c:	orr	r9, r5, r1, lsl r4
   12350:	mvn	r5, #31
   12354:	subs	r5, r5, r6
   12358:	lsrpl	r9, r1, r5
   1235c:	lsr	r6, r0, r5
   12360:	movwpl	ip, #0
   12364:	movwpl	r2, #0
   12368:	cmp	r4, #0
   1236c:	orr	r1, r6, r1, lsl lr
   12370:	lslpl	r1, r0, r4
   12374:	lsl	r0, r0, lr
   12378:	ldr	lr, [fp, #-32]	; 0xffffffe0
   1237c:	cmp	r5, #0
   12380:	orr	r2, r1, r2
   12384:	lsr	r1, r8, r7
   12388:	orr	r1, r1, r3, lsl r4
   1238c:	lsrpl	r1, r3, r5
   12390:	cmp	r4, #0
   12394:	mov	r4, r9
   12398:	movwpl	r0, #0
   1239c:	orr	r8, r0, r1
   123a0:	b	1240c <__assert_fail@plt+0x10ec>
   123a4:	mov	r7, r3
   123a8:	mov	r4, r0
   123ac:	mov	r6, r1
   123b0:	b	1242c <__assert_fail@plt+0x110c>
   123b4:	mov	r4, #0
   123b8:	tst	r0, #1
   123bc:	mov	r3, #0
   123c0:	bne	123e8 <__assert_fail@plt+0x10c8>
   123c4:	mov	r3, #0
   123c8:	mov	r7, r0
   123cc:	mov	r6, r1
   123d0:	lsrs	r6, r6, #1
   123d4:	rrx	r5, r7
   123d8:	tst	r7, #2
   123dc:	add	r3, r3, #1
   123e0:	mov	r7, r5
   123e4:	beq	123d0 <__assert_fail@plt+0x10b0>
   123e8:	lsr	r0, r0, r3
   123ec:	rsb	r7, r3, #32
   123f0:	lsr	r2, r1, r3
   123f4:	mov	ip, #0
   123f8:	orr	r8, r0, r1, lsl r7
   123fc:	subs	r0, r3, #32
   12400:	add	r7, r3, #64	; 0x40
   12404:	lsrpl	r8, r1, r0
   12408:	movwpl	r2, #0
   1240c:	mov	r1, #0
   12410:	mov	r0, #2
   12414:	mov	r6, ip
   12418:	strd	r0, [lr]
   1241c:	mov	r0, #1
   12420:	strb	r0, [sl, #250]	; 0xfa
   12424:	strb	r7, [sl, #224]	; 0xe0
   12428:	mov	r7, r2
   1242c:	orrs	r0, r4, r6
   12430:	movw	r0, #55224	; 0xd7b8
   12434:	str	sl, [sp, #44]	; 0x2c
   12438:	movt	r0, #2
   1243c:	beq	1269c <__assert_fail@plt+0x137c>
   12440:	mov	r9, #0
   12444:	mov	r2, #3
   12448:	mov	sl, #0
   1244c:	str	r4, [fp, #-40]	; 0xffffffd8
   12450:	str	r2, [fp, #-32]	; 0xffffffe0
   12454:	movw	r2, #55224	; 0xd7b8
   12458:	str	r9, [fp, #-44]	; 0xffffffd4
   1245c:	str	sl, [fp, #-36]	; 0xffffffdc
   12460:	mov	ip, r6
   12464:	movt	r2, #2
   12468:	ldr	sl, [r2, sl, lsl #4]!
   1246c:	ldr	r0, [r2, #4]
   12470:	add	r1, r2, #8
   12474:	str	r1, [sp, #48]	; 0x30
   12478:	umull	r2, r3, r8, sl
   1247c:	ldr	r9, [fp, #-44]	; 0xffffffd4
   12480:	mov	lr, r8
   12484:	mov	r5, r7
   12488:	mla	r3, r8, r0, r3
   1248c:	mov	r8, sl
   12490:	mla	r7, r7, sl, r3
   12494:	ldr	sl, [fp, #-32]	; 0xffffffe0
   12498:	umull	r3, r6, r2, r9
   1249c:	umlal	r3, r6, r7, sl
   124a0:	umull	r4, r1, r2, sl
   124a4:	adds	r1, r3, r1
   124a8:	adc	r3, r6, #0
   124ac:	umull	r4, r6, r7, sl
   124b0:	subs	r1, r1, r4
   124b4:	sbcs	r1, r3, r6
   124b8:	umull	r4, r6, r7, r9
   124bc:	mov	r1, #0
   124c0:	movwcc	r1, #1
   124c4:	cmp	r1, #0
   124c8:	addne	r6, r6, #1
   124cc:	adds	r3, r4, r3
   124d0:	ldr	r4, [fp, #-40]	; 0xffffffd8
   124d4:	adc	r6, r6, #0
   124d8:	subs	r1, r4, r3
   124dc:	sbcs	r1, ip, r6
   124e0:	bcc	12640 <__assert_fail@plt+0x1320>
   124e4:	subs	r1, r4, r3
   124e8:	mov	sl, r8
   124ec:	umull	r3, r4, r1, r8
   124f0:	mla	r1, r1, r0, r4
   124f4:	sbc	r4, ip, r6
   124f8:	mla	r6, r4, r8, r1
   124fc:	ldr	r1, [sp, #48]	; 0x30
   12500:	ldr	r4, [r1]
   12504:	ldr	r1, [r1, #4]
   12508:	subs	r4, r4, r3
   1250c:	ldr	r4, [fp, #-40]	; 0xffffffd8
   12510:	sbcs	r1, r1, r6
   12514:	bcc	12640 <__assert_fail@plt+0x1320>
   12518:	str	r7, [sp, #28]
   1251c:	mov	ip, r6
   12520:	ldr	r1, [sp, #44]	; 0x2c
   12524:	ldrb	r8, [r1, #250]	; 0xfa
   12528:	sub	r9, r8, #1
   1252c:	cmp	r8, #0
   12530:	beq	12600 <__assert_fail@plt+0x12e0>
   12534:	mov	r1, #8
   12538:	add	r7, r8, #223	; 0xdf
   1253c:	lsl	r5, r8, #3
   12540:	str	r8, [fp, #-40]	; 0xffffffd8
   12544:	add	r1, r1, r8, lsl #3
   12548:	mov	lr, r7
   1254c:	ldr	r6, [sp, #44]	; 0x2c
   12550:	ldr	r4, [r6, r1]!
   12554:	ldr	r8, [r6, #4]
   12558:	ldr	r6, [fp, #-32]	; 0xffffffe0
   1255c:	subs	r6, r6, r4
   12560:	ldr	r6, [fp, #-44]	; 0xffffffd4
   12564:	sbcs	r6, r6, r8
   12568:	bcs	1258c <__assert_fail@plt+0x126c>
   1256c:	sub	r6, r7, #224	; 0xe0
   12570:	sub	r4, r7, #1
   12574:	sub	r1, r1, #8
   12578:	cmp	r6, #0
   1257c:	mov	r7, r4
   12580:	bgt	1254c <__assert_fail@plt+0x122c>
   12584:	sub	r8, r4, #224	; 0xe0
   12588:	b	125bc <__assert_fail@plt+0x129c>
   1258c:	ldr	r1, [fp, #-32]	; 0xffffffe0
   12590:	ldr	r6, [fp, #-44]	; 0xffffffd4
   12594:	eor	r1, r4, r1
   12598:	eor	r4, r8, r6
   1259c:	orrs	r1, r1, r4
   125a0:	bne	125b8 <__assert_fail@plt+0x1298>
   125a4:	ldr	r4, [sp, #44]	; 0x2c
   125a8:	ldrb	r1, [r4, r7]
   125ac:	add	r1, r1, #1
   125b0:	strb	r1, [r4, r7]
   125b4:	b	12630 <__assert_fail@plt+0x1310>
   125b8:	sub	r8, r7, #224	; 0xe0
   125bc:	ldr	r4, [sp, #44]	; 0x2c
   125c0:	cmp	r9, r8
   125c4:	ble	125f8 <__assert_fail@plt+0x12d8>
   125c8:	add	r1, r4, r5
   125cc:	sub	r5, r5, #8
   125d0:	ldrd	r6, [r1, #8]
   125d4:	strd	r6, [r1, #16]
   125d8:	mov	r1, r4
   125dc:	ldrb	r6, [r1, lr]!
   125e0:	strb	r6, [r1, #1]
   125e4:	sub	r6, lr, #225	; 0xe1
   125e8:	sub	r1, lr, #1
   125ec:	cmp	r6, r8
   125f0:	mov	lr, r1
   125f4:	bgt	125c8 <__assert_fail@plt+0x12a8>
   125f8:	mov	r9, r8
   125fc:	ldr	r8, [fp, #-40]	; 0xffffffd8
   12600:	ldr	r6, [sp, #44]	; 0x2c
   12604:	ldr	r7, [fp, #-44]	; 0xffffffd4
   12608:	ldr	r1, [fp, #-32]	; 0xffffffe0
   1260c:	add	lr, r9, #1
   12610:	add	r4, r6, lr, lsl #3
   12614:	str	r1, [r4, #16]
   12618:	str	r7, [r4, #20]
   1261c:	add	r1, r6, lr
   12620:	mov	r7, #1
   12624:	strb	r7, [r1, #224]	; 0xe0
   12628:	add	r1, r8, #1
   1262c:	strb	r1, [r6, #250]	; 0xfa
   12630:	str	r3, [fp, #-40]	; 0xffffffd8
   12634:	mov	r8, r2
   12638:	ldr	r7, [sp, #28]
   1263c:	b	12478 <__assert_fail@plt+0x1158>
   12640:	ldr	sl, [fp, #-36]	; 0xffffffdc
   12644:	movw	r0, #488	; 0x1e8
   12648:	ldr	r2, [fp, #-32]	; 0xffffffe0
   1264c:	ldr	r9, [fp, #-44]	; 0xffffffd4
   12650:	mov	r6, ip
   12654:	mov	r7, r5
   12658:	mov	r8, lr
   1265c:	movt	r0, #3
   12660:	add	sl, sl, #1
   12664:	ldrb	r0, [r0, sl]
   12668:	adds	r2, r2, r0
   1266c:	lsr	r0, sl, #2
   12670:	adc	r9, r9, #0
   12674:	cmp	r0, #166	; 0xa6
   12678:	bhi	12684 <__assert_fail@plt+0x1364>
   1267c:	orrs	r1, r4, r6
   12680:	bne	1244c <__assert_fail@plt+0x112c>
   12684:	movw	lr, #55224	; 0xd7b8
   12688:	cmp	r0, #166	; 0xa6
   1268c:	movt	lr, #2
   12690:	mov	r0, lr
   12694:	bls	126b0 <__assert_fail@plt+0x1390>
   12698:	b	135e4 <__assert_fail@plt+0x22c4>
   1269c:	mov	r4, #0
   126a0:	mov	r2, #3
   126a4:	mov	r6, #0
   126a8:	mov	r9, #0
   126ac:	mov	sl, #0
   126b0:	str	r4, [fp, #-40]	; 0xffffffd8
   126b4:	str	r6, [sp, #48]	; 0x30
   126b8:	ldr	r1, [r0, sl, lsl #4]!
   126bc:	str	r2, [fp, #-32]	; 0xffffffe0
   126c0:	mov	lr, r7
   126c4:	str	sl, [fp, #-36]	; 0xffffffdc
   126c8:	ldr	ip, [r0, #4]
   126cc:	ldr	r6, [r0, #12]
   126d0:	umull	r3, r2, r1, r8
   126d4:	mla	r5, r1, r7, r2
   126d8:	ldr	r7, [r0, #8]
   126dc:	mla	r5, ip, r8, r5
   126e0:	subs	r4, r7, r3
   126e4:	sbcs	r4, r6, r5
   126e8:	bcs	12848 <__assert_fail@plt+0x1528>
   126ec:	ldr	r1, [r0, #16]
   126f0:	ldr	ip, [r0, #20]
   126f4:	ldr	r3, [r0, #24]
   126f8:	ldr	r6, [r0, #28]
   126fc:	umull	r7, r5, r1, r8
   12700:	mla	r5, r1, lr, r5
   12704:	mla	r5, ip, r8, r5
   12708:	subs	r4, r3, r7
   1270c:	sbcs	r4, r6, r5
   12710:	bcs	129b8 <__assert_fail@plt+0x1698>
   12714:	ldr	r1, [r0, #32]
   12718:	ldr	ip, [r0, #36]	; 0x24
   1271c:	ldr	r3, [r0, #40]	; 0x28
   12720:	ldr	r6, [r0, #44]	; 0x2c
   12724:	umull	r5, r7, r1, r8
   12728:	mla	r7, r1, lr, r7
   1272c:	mla	r7, ip, r8, r7
   12730:	subs	r4, r3, r5
   12734:	sbcs	r4, r6, r7
   12738:	bcs	12b54 <__assert_fail@plt+0x1834>
   1273c:	add	ip, r0, #48	; 0x30
   12740:	ldr	r6, [r0, #60]	; 0x3c
   12744:	mov	r7, lr
   12748:	ldm	ip, {r1, sl, ip}
   1274c:	umull	r2, r4, r1, r8
   12750:	mla	r4, r1, lr, r4
   12754:	mla	r5, sl, r8, r4
   12758:	subs	r4, ip, r2
   1275c:	sbcs	r4, r6, r5
   12760:	bcs	12cf0 <__assert_fail@plt+0x19d0>
   12764:	add	ip, r0, #64	; 0x40
   12768:	ldr	r6, [r0, #76]	; 0x4c
   1276c:	ldm	ip, {r1, sl, ip}
   12770:	umull	r2, r3, r1, r8
   12774:	mla	r3, r1, r7, r3
   12778:	mla	r3, sl, r8, r3
   1277c:	subs	r4, ip, r2
   12780:	sbcs	r4, r6, r3
   12784:	bcs	12ea4 <__assert_fail@plt+0x1b84>
   12788:	add	ip, r0, #80	; 0x50
   1278c:	ldr	r6, [r0, #92]	; 0x5c
   12790:	ldm	ip, {r1, sl, ip}
   12794:	umull	r3, r2, r1, r8
   12798:	mla	r2, r1, r7, r2
   1279c:	mla	r2, sl, r8, r2
   127a0:	subs	r4, ip, r3
   127a4:	sbcs	r4, r6, r2
   127a8:	bcs	13060 <__assert_fail@plt+0x1d40>
   127ac:	add	ip, r0, #96	; 0x60
   127b0:	ldr	r3, [r0, #108]	; 0x6c
   127b4:	ldm	ip, {r1, sl, ip}
   127b8:	umull	r2, r4, r1, r8
   127bc:	mla	r4, r1, r7, r4
   127c0:	mla	r6, sl, r8, r4
   127c4:	subs	r4, ip, r2
   127c8:	sbcs	r4, r3, r6
   127cc:	bcs	13230 <__assert_fail@plt+0x1f10>
   127d0:	ldr	r1, [r0, #112]	; 0x70
   127d4:	ldr	ip, [r0, #116]	; 0x74
   127d8:	ldr	r2, [r0, #120]	; 0x78
   127dc:	ldr	r0, [r0, #124]	; 0x7c
   127e0:	ldr	sl, [fp, #-36]	; 0xffffffdc
   127e4:	umull	r3, r4, r1, r8
   127e8:	mla	r4, r1, r7, r4
   127ec:	mla	r5, ip, r8, r4
   127f0:	subs	r4, r2, r3
   127f4:	sbcs	r4, r0, r5
   127f8:	bcs	1340c <__assert_fail@plt+0x20ec>
   127fc:	movw	r0, #1163	; 0x48b
   12800:	ldr	r2, [fp, #-32]	; 0xffffffe0
   12804:	movt	r0, #3
   12808:	ldrb	r0, [r0, sl]
   1280c:	add	sl, sl, #8
   12810:	adds	r2, r2, r0
   12814:	lsr	r0, sl, #2
   12818:	adc	r9, r9, #0
   1281c:	cmp	r0, #166	; 0xa6
   12820:	bhi	135dc <__assert_fail@plt+0x22bc>
   12824:	umull	r0, r1, r2, r2
   12828:	mla	r1, r2, r9, r1
   1282c:	mla	r1, r2, r9, r1
   12830:	subs	r0, r8, r0
   12834:	sbcs	r0, r7, r1
   12838:	movw	r0, #55224	; 0xd7b8
   1283c:	movt	r0, #2
   12840:	bcs	126b8 <__assert_fail@plt+0x1398>
   12844:	b	135dc <__assert_fail@plt+0x22bc>
   12848:	ldr	r2, [sp, #44]	; 0x2c
   1284c:	ldrb	lr, [r2, #250]	; 0xfa
   12850:	sub	r2, lr, #1
   12854:	cmp	lr, #0
   12858:	beq	12954 <__assert_fail@plt+0x1634>
   1285c:	str	r2, [sp, #24]
   12860:	mov	r2, #8
   12864:	str	r9, [fp, #-44]	; 0xffffffd4
   12868:	lsl	sl, lr, #3
   1286c:	str	lr, [sp, #32]
   12870:	add	r9, r2, lr, lsl #3
   12874:	add	lr, lr, #223	; 0xdf
   12878:	str	lr, [sp, #28]
   1287c:	ldr	r4, [sp, #44]	; 0x2c
   12880:	ldr	r8, [r4, r9]!
   12884:	ldr	r2, [r4, #4]
   12888:	ldr	r4, [fp, #-32]	; 0xffffffe0
   1288c:	subs	r4, r4, r8
   12890:	ldr	r4, [fp, #-44]	; 0xffffffd4
   12894:	sbcs	r4, r4, r2
   12898:	bcs	128bc <__assert_fail@plt+0x159c>
   1289c:	sub	r4, lr, #224	; 0xe0
   128a0:	sub	r2, lr, #1
   128a4:	sub	r9, r9, #8
   128a8:	cmp	r4, #0
   128ac:	mov	lr, r2
   128b0:	bgt	1287c <__assert_fail@plt+0x155c>
   128b4:	sub	r2, r2, #224	; 0xe0
   128b8:	b	128f0 <__assert_fail@plt+0x15d0>
   128bc:	ldr	r4, [fp, #-32]	; 0xffffffe0
   128c0:	ldr	r9, [fp, #-44]	; 0xffffffd4
   128c4:	eor	r8, r8, r4
   128c8:	eor	r4, r2, r9
   128cc:	orrs	r4, r8, r4
   128d0:	bne	128ec <__assert_fail@plt+0x15cc>
   128d4:	ldr	r4, [sp, #44]	; 0x2c
   128d8:	ldr	sl, [fp, #-36]	; 0xffffffdc
   128dc:	ldrb	r2, [r4, lr]
   128e0:	add	r2, r2, #1
   128e4:	strb	r2, [r4, lr]
   128e8:	b	12988 <__assert_fail@plt+0x1668>
   128ec:	sub	r2, lr, #224	; 0xe0
   128f0:	str	r2, [sp, #36]	; 0x24
   128f4:	ldr	r2, [sp, #24]
   128f8:	ldr	r4, [sp, #36]	; 0x24
   128fc:	ldr	lr, [sp, #44]	; 0x2c
   12900:	cmp	r2, r4
   12904:	ldr	r2, [sp, #28]
   12908:	ble	12944 <__assert_fail@plt+0x1624>
   1290c:	add	r4, lr, sl
   12910:	sub	sl, sl, #8
   12914:	ldrd	r8, [r4, #8]
   12918:	strd	r8, [r4, #16]
   1291c:	mov	r4, lr
   12920:	mov	r8, r2
   12924:	ldrb	r2, [r4, r2]!
   12928:	sub	r9, r8, #1
   1292c:	strb	r2, [r4, #1]
   12930:	ldr	r2, [sp, #36]	; 0x24
   12934:	sub	r4, r8, #225	; 0xe1
   12938:	cmp	r4, r2
   1293c:	mov	r2, r9
   12940:	bgt	1290c <__assert_fail@plt+0x15ec>
   12944:	ldr	r2, [sp, #36]	; 0x24
   12948:	ldr	r9, [fp, #-44]	; 0xffffffd4
   1294c:	ldr	sl, [fp, #-36]	; 0xffffffdc
   12950:	ldr	lr, [sp, #32]
   12954:	add	r4, r2, #1
   12958:	str	r4, [fp, #-44]	; 0xffffffd4
   1295c:	ldr	r2, [sp, #44]	; 0x2c
   12960:	ldr	r8, [fp, #-32]	; 0xffffffe0
   12964:	add	r4, r2, r4, lsl #3
   12968:	strd	r8, [r4, #16]
   1296c:	mov	r8, r2
   12970:	ldr	r4, [fp, #-44]	; 0xffffffd4
   12974:	add	r4, r2, r4
   12978:	mov	r2, #1
   1297c:	strb	r2, [r4, #224]	; 0xe0
   12980:	add	r4, lr, #1
   12984:	strb	r4, [r8, #250]	; 0xfa
   12988:	umull	r2, r4, r3, r1
   1298c:	mov	r8, r3
   12990:	mov	lr, r5
   12994:	mla	r4, r3, ip, r4
   12998:	mla	r4, r5, r1, r4
   1299c:	str	r2, [fp, #-44]	; 0xffffffd4
   129a0:	subs	r2, r7, r2
   129a4:	ldr	r3, [fp, #-44]	; 0xffffffd4
   129a8:	sbcs	r2, r6, r4
   129ac:	mov	r5, r4
   129b0:	bcc	126ec <__assert_fail@plt+0x13cc>
   129b4:	b	12848 <__assert_fail@plt+0x1528>
   129b8:	movw	r2, #488	; 0x1e8
   129bc:	movt	r2, #3
   129c0:	add	r4, sl, r2
   129c4:	ldr	r2, [fp, #-32]	; 0xffffffe0
   129c8:	ldrb	r4, [r4, #1]
   129cc:	adds	r2, r2, r4
   129d0:	str	r2, [sp, #36]	; 0x24
   129d4:	adc	r2, r9, #0
   129d8:	str	r2, [sp, #28]
   129dc:	ldr	r2, [sp, #44]	; 0x2c
   129e0:	ldrb	r4, [r2, #250]	; 0xfa
   129e4:	sub	r2, r4, #1
   129e8:	cmp	r4, #0
   129ec:	str	r4, [sp, #24]
   129f0:	beq	12ae8 <__assert_fail@plt+0x17c8>
   129f4:	str	r2, [sp, #12]
   129f8:	mov	r2, #8
   129fc:	str	r9, [fp, #-44]	; 0xffffffd4
   12a00:	add	lr, r4, #223	; 0xdf
   12a04:	add	r9, r2, r4, lsl #3
   12a08:	lsl	r2, r4, #3
   12a0c:	str	r2, [sp, #20]
   12a10:	str	lr, [sp, #16]
   12a14:	ldr	sl, [sp, #28]
   12a18:	ldr	r4, [sp, #44]	; 0x2c
   12a1c:	ldr	r8, [r4, r9]!
   12a20:	ldr	r2, [r4, #4]
   12a24:	ldr	r4, [sp, #36]	; 0x24
   12a28:	subs	r4, r4, r8
   12a2c:	sbcs	r4, sl, r2
   12a30:	bcs	12a54 <__assert_fail@plt+0x1734>
   12a34:	sub	r4, lr, #224	; 0xe0
   12a38:	sub	r2, lr, #1
   12a3c:	sub	r9, r9, #8
   12a40:	cmp	r4, #0
   12a44:	mov	lr, r2
   12a48:	bgt	12a18 <__assert_fail@plt+0x16f8>
   12a4c:	sub	r2, r2, #224	; 0xe0
   12a50:	b	12a88 <__assert_fail@plt+0x1768>
   12a54:	ldr	r4, [sp, #36]	; 0x24
   12a58:	eor	r8, r8, r4
   12a5c:	eor	r4, r2, sl
   12a60:	orrs	r4, r8, r4
   12a64:	bne	12a84 <__assert_fail@plt+0x1764>
   12a68:	ldr	r4, [sp, #44]	; 0x2c
   12a6c:	ldr	r9, [fp, #-44]	; 0xffffffd4
   12a70:	ldr	sl, [fp, #-36]	; 0xffffffdc
   12a74:	ldrb	r2, [r4, lr]
   12a78:	add	r2, r2, #1
   12a7c:	strb	r2, [r4, lr]
   12a80:	b	12b24 <__assert_fail@plt+0x1804>
   12a84:	sub	r2, lr, #224	; 0xe0
   12a88:	str	r2, [sp, #32]
   12a8c:	ldr	r2, [sp, #12]
   12a90:	ldr	r4, [sp, #32]
   12a94:	ldr	sl, [sp, #20]
   12a98:	cmp	r2, r4
   12a9c:	ldr	r2, [sp, #16]
   12aa0:	ble	12adc <__assert_fail@plt+0x17bc>
   12aa4:	ldr	lr, [sp, #44]	; 0x2c
   12aa8:	add	r4, lr, sl
   12aac:	sub	sl, sl, #8
   12ab0:	ldrd	r8, [r4, #8]
   12ab4:	strd	r8, [r4, #16]
   12ab8:	mov	r8, r2
   12abc:	ldrb	r2, [lr, r2]!
   12ac0:	sub	r9, r8, #1
   12ac4:	sub	r4, r8, #225	; 0xe1
   12ac8:	strb	r2, [lr, #1]
   12acc:	ldr	r2, [sp, #32]
   12ad0:	cmp	r4, r2
   12ad4:	mov	r2, r9
   12ad8:	bgt	12aa4 <__assert_fail@plt+0x1784>
   12adc:	ldr	r2, [sp, #32]
   12ae0:	ldr	r9, [fp, #-44]	; 0xffffffd4
   12ae4:	ldr	sl, [fp, #-36]	; 0xffffffdc
   12ae8:	add	r2, r2, #1
   12aec:	str	r2, [fp, #-44]	; 0xffffffd4
   12af0:	ldr	r8, [sp, #44]	; 0x2c
   12af4:	ldr	lr, [sp, #36]	; 0x24
   12af8:	add	r4, r8, r2, lsl #3
   12afc:	ldr	r2, [sp, #28]
   12b00:	str	lr, [r4, #16]
   12b04:	str	r2, [r4, #20]
   12b08:	ldr	r2, [fp, #-44]	; 0xffffffd4
   12b0c:	add	r4, r8, r2
   12b10:	mov	r2, #1
   12b14:	strb	r2, [r4, #224]	; 0xe0
   12b18:	ldr	r2, [sp, #24]
   12b1c:	add	r4, r2, #1
   12b20:	strb	r4, [r8, #250]	; 0xfa
   12b24:	umull	r2, r4, r7, r1
   12b28:	mov	r8, r7
   12b2c:	mov	lr, r5
   12b30:	mla	r4, r7, ip, r4
   12b34:	mla	r4, r5, r1, r4
   12b38:	str	r2, [fp, #-44]	; 0xffffffd4
   12b3c:	subs	r2, r3, r2
   12b40:	ldr	r7, [fp, #-44]	; 0xffffffd4
   12b44:	sbcs	r2, r6, r4
   12b48:	mov	r5, r4
   12b4c:	bcc	12714 <__assert_fail@plt+0x13f4>
   12b50:	b	129dc <__assert_fail@plt+0x16bc>
   12b54:	movw	r2, #488	; 0x1e8
   12b58:	movt	r2, #3
   12b5c:	add	r4, sl, r2
   12b60:	ldrb	r2, [r4, #1]
   12b64:	ldrb	r8, [r4, #2]
   12b68:	ldr	r4, [fp, #-32]	; 0xffffffe0
   12b6c:	adds	r4, r4, r2
   12b70:	adc	r2, r9, #0
   12b74:	adds	r4, r4, r8
   12b78:	adc	r2, r2, #0
   12b7c:	str	r4, [sp, #36]	; 0x24
   12b80:	str	r2, [sp, #32]
   12b84:	ldr	r2, [sp, #44]	; 0x2c
   12b88:	ldrb	r4, [r2, #250]	; 0xfa
   12b8c:	sub	sl, r4, #1
   12b90:	cmp	r4, #0
   12b94:	str	r4, [sp, #24]
   12b98:	beq	12bf8 <__assert_fail@plt+0x18d8>
   12b9c:	mov	r2, #8
   12ba0:	str	r9, [fp, #-44]	; 0xffffffd4
   12ba4:	add	lr, r4, #223	; 0xdf
   12ba8:	add	r9, r2, r4, lsl #3
   12bac:	lsl	r2, r4, #3
   12bb0:	str	r2, [sp, #20]
   12bb4:	str	lr, [sp, #16]
   12bb8:	ldr	r4, [sp, #44]	; 0x2c
   12bbc:	ldr	r8, [r4, r9]!
   12bc0:	ldr	r2, [r4, #4]
   12bc4:	ldr	r4, [sp, #36]	; 0x24
   12bc8:	subs	r4, r4, r8
   12bcc:	ldr	r4, [sp, #32]
   12bd0:	sbcs	r4, r4, r2
   12bd4:	bcs	12c00 <__assert_fail@plt+0x18e0>
   12bd8:	sub	r4, lr, #224	; 0xe0
   12bdc:	sub	r2, lr, #1
   12be0:	sub	r9, r9, #8
   12be4:	cmp	r4, #0
   12be8:	mov	lr, r2
   12bec:	bgt	12bb8 <__assert_fail@plt+0x1898>
   12bf0:	sub	r2, r2, #224	; 0xe0
   12bf4:	b	12c34 <__assert_fail@plt+0x1914>
   12bf8:	ldr	lr, [sp, #32]
   12bfc:	b	12c94 <__assert_fail@plt+0x1974>
   12c00:	ldr	r4, [sp, #36]	; 0x24
   12c04:	eor	r8, r8, r4
   12c08:	ldr	r4, [sp, #32]
   12c0c:	eor	r4, r2, r4
   12c10:	orrs	r4, r8, r4
   12c14:	bne	12c30 <__assert_fail@plt+0x1910>
   12c18:	ldr	r4, [sp, #44]	; 0x2c
   12c1c:	ldr	r9, [fp, #-44]	; 0xffffffd4
   12c20:	ldrb	r2, [r4, lr]
   12c24:	add	r2, r2, #1
   12c28:	strb	r2, [r4, lr]
   12c2c:	b	12cc4 <__assert_fail@plt+0x19a4>
   12c30:	sub	r2, lr, #224	; 0xe0
   12c34:	str	r2, [sp, #28]
   12c38:	ldr	r2, [sp, #28]
   12c3c:	ldr	r8, [sp, #20]
   12c40:	cmp	sl, r2
   12c44:	ldr	sl, [sp, #16]
   12c48:	ble	12c88 <__assert_fail@plt+0x1968>
   12c4c:	ldr	lr, [sp, #44]	; 0x2c
   12c50:	mov	r2, r8
   12c54:	add	r4, lr, r8
   12c58:	ldrd	r8, [r4, #8]
   12c5c:	strd	r8, [r4, #16]
   12c60:	mov	r8, r2
   12c64:	sub	r9, sl, #1
   12c68:	sub	r4, sl, #225	; 0xe1
   12c6c:	ldrb	r2, [lr, sl]!
   12c70:	sub	r8, r8, #8
   12c74:	mov	sl, r9
   12c78:	strb	r2, [lr, #1]
   12c7c:	ldr	r2, [sp, #28]
   12c80:	cmp	r4, r2
   12c84:	bgt	12c4c <__assert_fail@plt+0x192c>
   12c88:	ldr	lr, [sp, #32]
   12c8c:	ldr	sl, [sp, #28]
   12c90:	ldr	r9, [fp, #-44]	; 0xffffffd4
   12c94:	add	r8, sl, #1
   12c98:	ldr	sl, [sp, #44]	; 0x2c
   12c9c:	ldr	r2, [sp, #36]	; 0x24
   12ca0:	add	r4, sl, r8, lsl #3
   12ca4:	str	r2, [r4, #16]
   12ca8:	str	lr, [r4, #20]
   12cac:	add	r4, sl, r8
   12cb0:	mov	r2, #1
   12cb4:	strb	r2, [r4, #224]	; 0xe0
   12cb8:	ldr	r2, [sp, #24]
   12cbc:	add	r4, r2, #1
   12cc0:	strb	r4, [sl, #250]	; 0xfa
   12cc4:	umull	sl, r4, r5, r1
   12cc8:	mov	r8, r5
   12ccc:	mov	lr, r7
   12cd0:	mla	r4, r5, ip, r4
   12cd4:	mla	r4, r7, r1, r4
   12cd8:	subs	r2, r3, sl
   12cdc:	mov	r5, sl
   12ce0:	sbcs	r2, r6, r4
   12ce4:	mov	r7, r4
   12ce8:	bcc	1273c <__assert_fail@plt+0x141c>
   12cec:	b	12b84 <__assert_fail@plt+0x1864>
   12cf0:	ldr	r7, [fp, #-36]	; 0xffffffdc
   12cf4:	movw	r4, #488	; 0x1e8
   12cf8:	str	r9, [fp, #-44]	; 0xffffffd4
   12cfc:	movt	r4, #3
   12d00:	add	r4, r7, r4
   12d04:	ldrb	r7, [r4, #1]
   12d08:	ldrb	r8, [r4, #2]
   12d0c:	ldrb	r9, [r4, #3]
   12d10:	ldr	r4, [fp, #-32]	; 0xffffffe0
   12d14:	adds	r7, r4, r7
   12d18:	ldr	r4, [fp, #-44]	; 0xffffffd4
   12d1c:	adc	r4, r4, #0
   12d20:	adds	r7, r7, r8
   12d24:	adc	r4, r4, #0
   12d28:	adds	r7, r7, r9
   12d2c:	str	r7, [sp, #36]	; 0x24
   12d30:	adc	r7, r4, #0
   12d34:	ldr	r9, [fp, #-44]	; 0xffffffd4
   12d38:	str	r7, [sp, #32]
   12d3c:	ldr	r4, [sp, #44]	; 0x2c
   12d40:	ldrb	r7, [r4, #250]	; 0xfa
   12d44:	sub	lr, r7, #1
   12d48:	cmp	r7, #0
   12d4c:	str	r7, [sp, #24]
   12d50:	beq	12e40 <__assert_fail@plt+0x1b20>
   12d54:	mov	r4, #8
   12d58:	add	r3, r7, #223	; 0xdf
   12d5c:	add	r9, r4, r7, lsl #3
   12d60:	lsl	r4, r7, #3
   12d64:	str	r4, [sp, #20]
   12d68:	str	r3, [sp, #16]
   12d6c:	ldr	r4, [sp, #44]	; 0x2c
   12d70:	ldr	r7, [r4, r9]!
   12d74:	ldr	r8, [r4, #4]
   12d78:	ldr	r4, [sp, #36]	; 0x24
   12d7c:	subs	r4, r4, r7
   12d80:	ldr	r4, [sp, #32]
   12d84:	sbcs	r4, r4, r8
   12d88:	bcs	12dac <__assert_fail@plt+0x1a8c>
   12d8c:	sub	r4, r3, #224	; 0xe0
   12d90:	sub	r7, r3, #1
   12d94:	sub	r9, r9, #8
   12d98:	cmp	r4, #0
   12d9c:	mov	r3, r7
   12da0:	bgt	12d6c <__assert_fail@plt+0x1a4c>
   12da4:	sub	r4, r7, #224	; 0xe0
   12da8:	b	12de0 <__assert_fail@plt+0x1ac0>
   12dac:	ldr	r4, [sp, #36]	; 0x24
   12db0:	eor	r4, r7, r4
   12db4:	ldr	r7, [sp, #32]
   12db8:	eor	r7, r8, r7
   12dbc:	orrs	r4, r4, r7
   12dc0:	bne	12ddc <__assert_fail@plt+0x1abc>
   12dc4:	ldr	r7, [sp, #44]	; 0x2c
   12dc8:	ldr	r9, [fp, #-44]	; 0xffffffd4
   12dcc:	ldrb	r4, [r7, r3]
   12dd0:	add	r4, r4, #1
   12dd4:	strb	r4, [r7, r3]
   12dd8:	b	12e74 <__assert_fail@plt+0x1b54>
   12ddc:	sub	r4, r3, #224	; 0xe0
   12de0:	str	r4, [sp, #28]
   12de4:	ldr	r4, [sp, #28]
   12de8:	ldr	r3, [sp, #44]	; 0x2c
   12dec:	ldr	r8, [sp, #20]
   12df0:	cmp	lr, r4
   12df4:	ldr	lr, [sp, #16]
   12df8:	ble	12e38 <__assert_fail@plt+0x1b18>
   12dfc:	add	r4, r3, r8
   12e00:	mov	r7, r8
   12e04:	ldrd	r8, [r4, #8]
   12e08:	strd	r8, [r4, #16]
   12e0c:	mov	r4, r3
   12e10:	mov	r8, r7
   12e14:	sub	r9, lr, #1
   12e18:	ldrb	r7, [r4, lr]!
   12e1c:	sub	r8, r8, #8
   12e20:	strb	r7, [r4, #1]
   12e24:	ldr	r4, [sp, #28]
   12e28:	sub	r7, lr, #225	; 0xe1
   12e2c:	mov	lr, r9
   12e30:	cmp	r7, r4
   12e34:	bgt	12dfc <__assert_fail@plt+0x1adc>
   12e38:	ldr	lr, [sp, #28]
   12e3c:	ldr	r9, [fp, #-44]	; 0xffffffd4
   12e40:	ldr	r8, [sp, #44]	; 0x2c
   12e44:	ldr	r4, [sp, #36]	; 0x24
   12e48:	ldr	r3, [sp, #32]
   12e4c:	add	lr, lr, #1
   12e50:	add	r7, r8, lr, lsl #3
   12e54:	str	r4, [r7, #16]
   12e58:	str	r3, [r7, #20]
   12e5c:	add	r4, r8, lr
   12e60:	mov	r7, #1
   12e64:	strb	r7, [r4, #224]	; 0xe0
   12e68:	ldr	r4, [sp, #24]
   12e6c:	add	r4, r4, #1
   12e70:	strb	r4, [r8, #250]	; 0xfa
   12e74:	umull	r3, r7, r2, r1
   12e78:	mov	r8, r2
   12e7c:	mla	r7, r2, sl, r7
   12e80:	mla	r7, r5, r1, r7
   12e84:	subs	r4, ip, r3
   12e88:	mov	r2, r3
   12e8c:	sbcs	r4, r6, r7
   12e90:	mov	r4, r5
   12e94:	mov	r5, r7
   12e98:	mov	r7, r4
   12e9c:	bcc	12764 <__assert_fail@plt+0x1444>
   12ea0:	b	12d3c <__assert_fail@plt+0x1a1c>
   12ea4:	ldr	r7, [fp, #-36]	; 0xffffffdc
   12ea8:	movw	r4, #488	; 0x1e8
   12eac:	str	r9, [fp, #-44]	; 0xffffffd4
   12eb0:	movt	r4, #3
   12eb4:	add	r4, r7, r4
   12eb8:	ldrb	r7, [r4, #1]
   12ebc:	ldrb	r8, [r4, #2]
   12ec0:	ldrb	r9, [r4, #3]
   12ec4:	ldrb	r5, [r4, #4]
   12ec8:	ldr	r4, [fp, #-32]	; 0xffffffe0
   12ecc:	adds	r7, r4, r7
   12ed0:	ldr	r4, [fp, #-44]	; 0xffffffd4
   12ed4:	adc	r4, r4, #0
   12ed8:	adds	r7, r7, r8
   12edc:	adc	r4, r4, #0
   12ee0:	adds	r7, r7, r9
   12ee4:	ldr	r9, [fp, #-44]	; 0xffffffd4
   12ee8:	adc	r4, r4, #0
   12eec:	adds	r7, r7, r5
   12ef0:	str	r7, [sp, #36]	; 0x24
   12ef4:	adc	r7, r4, #0
   12ef8:	str	r7, [sp, #32]
   12efc:	ldr	r4, [sp, #44]	; 0x2c
   12f00:	ldrb	r7, [r4, #250]	; 0xfa
   12f04:	sub	lr, r7, #1
   12f08:	cmp	r7, #0
   12f0c:	str	r7, [sp, #24]
   12f10:	beq	13000 <__assert_fail@plt+0x1ce0>
   12f14:	mov	r4, #8
   12f18:	add	r5, r7, #223	; 0xdf
   12f1c:	add	r9, r4, r7, lsl #3
   12f20:	lsl	r4, r7, #3
   12f24:	str	r4, [sp, #20]
   12f28:	str	r5, [sp, #16]
   12f2c:	ldr	r4, [sp, #44]	; 0x2c
   12f30:	ldr	r7, [r4, r9]!
   12f34:	ldr	r8, [r4, #4]
   12f38:	ldr	r4, [sp, #36]	; 0x24
   12f3c:	subs	r4, r4, r7
   12f40:	ldr	r4, [sp, #32]
   12f44:	sbcs	r4, r4, r8
   12f48:	bcs	12f6c <__assert_fail@plt+0x1c4c>
   12f4c:	sub	r4, r5, #224	; 0xe0
   12f50:	sub	r7, r5, #1
   12f54:	sub	r9, r9, #8
   12f58:	cmp	r4, #0
   12f5c:	mov	r5, r7
   12f60:	bgt	12f2c <__assert_fail@plt+0x1c0c>
   12f64:	sub	r4, r7, #224	; 0xe0
   12f68:	b	12fa0 <__assert_fail@plt+0x1c80>
   12f6c:	ldr	r4, [sp, #36]	; 0x24
   12f70:	eor	r4, r7, r4
   12f74:	ldr	r7, [sp, #32]
   12f78:	eor	r7, r8, r7
   12f7c:	orrs	r4, r4, r7
   12f80:	bne	12f9c <__assert_fail@plt+0x1c7c>
   12f84:	ldr	r7, [sp, #44]	; 0x2c
   12f88:	ldr	r9, [fp, #-44]	; 0xffffffd4
   12f8c:	ldrb	r4, [r7, r5]
   12f90:	add	r4, r4, #1
   12f94:	strb	r4, [r7, r5]
   12f98:	b	13030 <__assert_fail@plt+0x1d10>
   12f9c:	sub	r4, r5, #224	; 0xe0
   12fa0:	str	r4, [sp, #28]
   12fa4:	ldr	r4, [sp, #28]
   12fa8:	ldr	r5, [sp, #44]	; 0x2c
   12fac:	ldr	r8, [sp, #20]
   12fb0:	cmp	lr, r4
   12fb4:	ldr	lr, [sp, #16]
   12fb8:	ble	12ff8 <__assert_fail@plt+0x1cd8>
   12fbc:	add	r4, r5, r8
   12fc0:	mov	r7, r8
   12fc4:	ldrd	r8, [r4, #8]
   12fc8:	strd	r8, [r4, #16]
   12fcc:	mov	r4, r5
   12fd0:	mov	r8, r7
   12fd4:	sub	r9, lr, #1
   12fd8:	ldrb	r7, [r4, lr]!
   12fdc:	sub	r8, r8, #8
   12fe0:	strb	r7, [r4, #1]
   12fe4:	ldr	r4, [sp, #28]
   12fe8:	sub	r7, lr, #225	; 0xe1
   12fec:	mov	lr, r9
   12ff0:	cmp	r7, r4
   12ff4:	bgt	12fbc <__assert_fail@plt+0x1c9c>
   12ff8:	ldr	lr, [sp, #28]
   12ffc:	ldr	r9, [fp, #-44]	; 0xffffffd4
   13000:	ldr	r8, [sp, #44]	; 0x2c
   13004:	ldr	r4, [sp, #36]	; 0x24
   13008:	ldr	r5, [sp, #32]
   1300c:	add	lr, lr, #1
   13010:	add	r7, r8, lr, lsl #3
   13014:	strd	r4, [r7, #16]
   13018:	add	r4, r8, lr
   1301c:	mov	r7, #1
   13020:	strb	r7, [r4, #224]	; 0xe0
   13024:	ldr	r4, [sp, #24]
   13028:	add	r4, r4, #1
   1302c:	strb	r4, [r8, #250]	; 0xfa
   13030:	umull	r5, r7, r2, r1
   13034:	mov	r8, r2
   13038:	mla	r7, r2, sl, r7
   1303c:	mla	r7, r3, r1, r7
   13040:	subs	r4, ip, r5
   13044:	mov	r2, r5
   13048:	sbcs	r4, r6, r7
   1304c:	mov	r4, r3
   13050:	mov	r3, r7
   13054:	mov	r7, r4
   13058:	bcc	12788 <__assert_fail@plt+0x1468>
   1305c:	b	12efc <__assert_fail@plt+0x1bdc>
   13060:	ldr	r7, [fp, #-36]	; 0xffffffdc
   13064:	movw	r4, #488	; 0x1e8
   13068:	str	r9, [fp, #-44]	; 0xffffffd4
   1306c:	movt	r4, #3
   13070:	add	r4, r7, r4
   13074:	ldrb	r7, [r4, #3]
   13078:	ldrb	r8, [r4, #1]
   1307c:	ldrb	r9, [r4, #2]
   13080:	ldrb	lr, [r4, #4]
   13084:	ldrb	r4, [r4, #5]
   13088:	str	r7, [sp, #36]	; 0x24
   1308c:	ldr	r7, [fp, #-32]	; 0xffffffe0
   13090:	adds	r5, r7, r8
   13094:	ldr	r7, [fp, #-44]	; 0xffffffd4
   13098:	adc	r8, r7, #0
   1309c:	adds	r7, r5, r9
   130a0:	ldr	r5, [sp, #36]	; 0x24
   130a4:	ldr	r9, [fp, #-44]	; 0xffffffd4
   130a8:	adc	r8, r8, #0
   130ac:	adds	r7, r7, r5
   130b0:	adc	r8, r8, #0
   130b4:	adds	r7, r7, lr
   130b8:	adc	r8, r8, #0
   130bc:	adds	r7, r7, r4
   130c0:	str	r7, [sp, #36]	; 0x24
   130c4:	adc	r7, r8, #0
   130c8:	str	r7, [sp, #32]
   130cc:	ldr	r4, [sp, #44]	; 0x2c
   130d0:	ldrb	r7, [r4, #250]	; 0xfa
   130d4:	sub	lr, r7, #1
   130d8:	cmp	r7, #0
   130dc:	str	r7, [sp, #24]
   130e0:	beq	131d0 <__assert_fail@plt+0x1eb0>
   130e4:	mov	r4, #8
   130e8:	add	r5, r7, #223	; 0xdf
   130ec:	add	r9, r4, r7, lsl #3
   130f0:	lsl	r4, r7, #3
   130f4:	str	r4, [sp, #20]
   130f8:	str	r5, [sp, #16]
   130fc:	ldr	r4, [sp, #44]	; 0x2c
   13100:	ldr	r7, [r4, r9]!
   13104:	ldr	r8, [r4, #4]
   13108:	ldr	r4, [sp, #36]	; 0x24
   1310c:	subs	r4, r4, r7
   13110:	ldr	r4, [sp, #32]
   13114:	sbcs	r4, r4, r8
   13118:	bcs	1313c <__assert_fail@plt+0x1e1c>
   1311c:	sub	r4, r5, #224	; 0xe0
   13120:	sub	r7, r5, #1
   13124:	sub	r9, r9, #8
   13128:	cmp	r4, #0
   1312c:	mov	r5, r7
   13130:	bgt	130fc <__assert_fail@plt+0x1ddc>
   13134:	sub	r4, r7, #224	; 0xe0
   13138:	b	13170 <__assert_fail@plt+0x1e50>
   1313c:	ldr	r4, [sp, #36]	; 0x24
   13140:	eor	r4, r7, r4
   13144:	ldr	r7, [sp, #32]
   13148:	eor	r7, r8, r7
   1314c:	orrs	r4, r4, r7
   13150:	bne	1316c <__assert_fail@plt+0x1e4c>
   13154:	ldr	r7, [sp, #44]	; 0x2c
   13158:	ldr	r9, [fp, #-44]	; 0xffffffd4
   1315c:	ldrb	r4, [r7, r5]
   13160:	add	r4, r4, #1
   13164:	strb	r4, [r7, r5]
   13168:	b	13200 <__assert_fail@plt+0x1ee0>
   1316c:	sub	r4, r5, #224	; 0xe0
   13170:	str	r4, [sp, #28]
   13174:	ldr	r4, [sp, #28]
   13178:	ldr	r5, [sp, #44]	; 0x2c
   1317c:	ldr	r8, [sp, #20]
   13180:	cmp	lr, r4
   13184:	ldr	lr, [sp, #16]
   13188:	ble	131c8 <__assert_fail@plt+0x1ea8>
   1318c:	add	r4, r5, r8
   13190:	mov	r7, r8
   13194:	ldrd	r8, [r4, #8]
   13198:	strd	r8, [r4, #16]
   1319c:	mov	r4, r5
   131a0:	mov	r8, r7
   131a4:	sub	r9, lr, #1
   131a8:	ldrb	r7, [r4, lr]!
   131ac:	sub	r8, r8, #8
   131b0:	strb	r7, [r4, #1]
   131b4:	ldr	r4, [sp, #28]
   131b8:	sub	r7, lr, #225	; 0xe1
   131bc:	mov	lr, r9
   131c0:	cmp	r7, r4
   131c4:	bgt	1318c <__assert_fail@plt+0x1e6c>
   131c8:	ldr	lr, [sp, #28]
   131cc:	ldr	r9, [fp, #-44]	; 0xffffffd4
   131d0:	ldr	r8, [sp, #44]	; 0x2c
   131d4:	ldr	r4, [sp, #36]	; 0x24
   131d8:	ldr	r5, [sp, #32]
   131dc:	add	lr, lr, #1
   131e0:	add	r7, r8, lr, lsl #3
   131e4:	strd	r4, [r7, #16]
   131e8:	add	r4, r8, lr
   131ec:	mov	r7, #1
   131f0:	strb	r7, [r4, #224]	; 0xe0
   131f4:	ldr	r4, [sp, #24]
   131f8:	add	r4, r4, #1
   131fc:	strb	r4, [r8, #250]	; 0xfa
   13200:	umull	r5, r7, r3, r1
   13204:	mov	r8, r3
   13208:	mla	r7, r3, sl, r7
   1320c:	mla	r7, r2, r1, r7
   13210:	subs	r4, ip, r5
   13214:	mov	r3, r5
   13218:	sbcs	r4, r6, r7
   1321c:	mov	r4, r2
   13220:	mov	r2, r7
   13224:	mov	r7, r4
   13228:	bcc	127ac <__assert_fail@plt+0x148c>
   1322c:	b	130cc <__assert_fail@plt+0x1dac>
   13230:	ldr	r7, [fp, #-36]	; 0xffffffdc
   13234:	movw	r4, #488	; 0x1e8
   13238:	str	r9, [fp, #-44]	; 0xffffffd4
   1323c:	movt	r4, #3
   13240:	add	r4, r7, r4
   13244:	ldrb	r7, [r4, #3]
   13248:	ldrb	r8, [r4, #1]
   1324c:	ldrb	r9, [r4, #2]
   13250:	ldrb	lr, [r4, #4]
   13254:	str	r7, [sp, #36]	; 0x24
   13258:	ldr	r7, [fp, #-32]	; 0xffffffe0
   1325c:	adds	r5, r7, r8
   13260:	ldr	r7, [fp, #-44]	; 0xffffffd4
   13264:	adc	r8, r7, #0
   13268:	adds	r7, r5, r9
   1326c:	ldr	r5, [sp, #36]	; 0x24
   13270:	adc	r8, r8, #0
   13274:	adds	r7, r7, r5
   13278:	adc	r8, r8, #0
   1327c:	adds	r9, r7, lr
   13280:	ldrb	r7, [r4, #5]
   13284:	ldrb	r4, [r4, #6]
   13288:	adc	r8, r8, #0
   1328c:	adds	r7, r9, r7
   13290:	ldr	r9, [fp, #-44]	; 0xffffffd4
   13294:	adc	r8, r8, #0
   13298:	adds	r7, r7, r4
   1329c:	str	r7, [sp, #36]	; 0x24
   132a0:	adc	r7, r8, #0
   132a4:	str	r7, [sp, #32]
   132a8:	ldr	r4, [sp, #44]	; 0x2c
   132ac:	ldrb	r7, [r4, #250]	; 0xfa
   132b0:	sub	lr, r7, #1
   132b4:	cmp	r7, #0
   132b8:	str	r7, [sp, #24]
   132bc:	beq	133ac <__assert_fail@plt+0x208c>
   132c0:	mov	r4, #8
   132c4:	add	r5, r7, #223	; 0xdf
   132c8:	add	r9, r4, r7, lsl #3
   132cc:	lsl	r4, r7, #3
   132d0:	str	r4, [sp, #20]
   132d4:	str	r5, [sp, #16]
   132d8:	ldr	r4, [sp, #44]	; 0x2c
   132dc:	ldr	r7, [r4, r9]!
   132e0:	ldr	r8, [r4, #4]
   132e4:	ldr	r4, [sp, #36]	; 0x24
   132e8:	subs	r4, r4, r7
   132ec:	ldr	r4, [sp, #32]
   132f0:	sbcs	r4, r4, r8
   132f4:	bcs	13318 <__assert_fail@plt+0x1ff8>
   132f8:	sub	r4, r5, #224	; 0xe0
   132fc:	sub	r7, r5, #1
   13300:	sub	r9, r9, #8
   13304:	cmp	r4, #0
   13308:	mov	r5, r7
   1330c:	bgt	132d8 <__assert_fail@plt+0x1fb8>
   13310:	sub	r4, r7, #224	; 0xe0
   13314:	b	1334c <__assert_fail@plt+0x202c>
   13318:	ldr	r4, [sp, #36]	; 0x24
   1331c:	eor	r4, r7, r4
   13320:	ldr	r7, [sp, #32]
   13324:	eor	r7, r8, r7
   13328:	orrs	r4, r4, r7
   1332c:	bne	13348 <__assert_fail@plt+0x2028>
   13330:	ldr	r7, [sp, #44]	; 0x2c
   13334:	ldr	r9, [fp, #-44]	; 0xffffffd4
   13338:	ldrb	r4, [r7, r5]
   1333c:	add	r4, r4, #1
   13340:	strb	r4, [r7, r5]
   13344:	b	133dc <__assert_fail@plt+0x20bc>
   13348:	sub	r4, r5, #224	; 0xe0
   1334c:	str	r4, [sp, #28]
   13350:	ldr	r4, [sp, #28]
   13354:	ldr	r5, [sp, #44]	; 0x2c
   13358:	ldr	r8, [sp, #20]
   1335c:	cmp	lr, r4
   13360:	ldr	lr, [sp, #16]
   13364:	ble	133a4 <__assert_fail@plt+0x2084>
   13368:	add	r4, r5, r8
   1336c:	mov	r7, r8
   13370:	ldrd	r8, [r4, #8]
   13374:	strd	r8, [r4, #16]
   13378:	mov	r4, r5
   1337c:	mov	r8, r7
   13380:	sub	r9, lr, #1
   13384:	ldrb	r7, [r4, lr]!
   13388:	sub	r8, r8, #8
   1338c:	strb	r7, [r4, #1]
   13390:	ldr	r4, [sp, #28]
   13394:	sub	r7, lr, #225	; 0xe1
   13398:	mov	lr, r9
   1339c:	cmp	r7, r4
   133a0:	bgt	13368 <__assert_fail@plt+0x2048>
   133a4:	ldr	lr, [sp, #28]
   133a8:	ldr	r9, [fp, #-44]	; 0xffffffd4
   133ac:	ldr	r8, [sp, #44]	; 0x2c
   133b0:	ldr	r4, [sp, #36]	; 0x24
   133b4:	ldr	r5, [sp, #32]
   133b8:	add	lr, lr, #1
   133bc:	add	r7, r8, lr, lsl #3
   133c0:	strd	r4, [r7, #16]
   133c4:	add	r4, r8, lr
   133c8:	mov	r7, #1
   133cc:	strb	r7, [r4, #224]	; 0xe0
   133d0:	ldr	r4, [sp, #24]
   133d4:	add	r4, r4, #1
   133d8:	strb	r4, [r8, #250]	; 0xfa
   133dc:	umull	r5, r7, r2, r1
   133e0:	mov	r8, r2
   133e4:	mla	r7, r2, sl, r7
   133e8:	mla	r7, r6, r1, r7
   133ec:	subs	r4, ip, r5
   133f0:	mov	r2, r5
   133f4:	sbcs	r4, r3, r7
   133f8:	mov	r4, r6
   133fc:	mov	r6, r7
   13400:	mov	r7, r4
   13404:	bcc	127d0 <__assert_fail@plt+0x14b0>
   13408:	b	132a8 <__assert_fail@plt+0x1f88>
   1340c:	movw	r4, #488	; 0x1e8
   13410:	ldr	r7, [fp, #-32]	; 0xffffffe0
   13414:	mov	r6, r9
   13418:	movt	r4, #3
   1341c:	add	r4, sl, r4
   13420:	ldrb	sl, [r4, #1]
   13424:	ldrb	r8, [r4, #2]
   13428:	ldrb	r9, [r4, #3]
   1342c:	ldrb	lr, [r4, #4]
   13430:	adds	sl, r7, sl
   13434:	adc	r7, r6, #0
   13438:	adds	r8, sl, r8
   1343c:	ldr	sl, [fp, #-36]	; 0xffffffdc
   13440:	adc	r7, r7, #0
   13444:	adds	r8, r8, r9
   13448:	mov	r9, r6
   1344c:	ldrb	r6, [r4, #5]
   13450:	adc	r7, r7, #0
   13454:	adds	r8, r8, lr
   13458:	adc	r7, r7, #0
   1345c:	adds	r8, r8, r6
   13460:	ldrb	r6, [r4, #6]
   13464:	ldrb	r4, [r4, #7]
   13468:	adc	r7, r7, #0
   1346c:	adds	r6, r8, r6
   13470:	adc	r7, r7, #0
   13474:	adds	r6, r6, r4
   13478:	adc	r7, r7, #0
   1347c:	str	r6, [fp, #-44]	; 0xffffffd4
   13480:	str	r7, [sp, #36]	; 0x24
   13484:	str	r5, [sp, #28]
   13488:	mov	r8, r3
   1348c:	ldr	r3, [sp, #44]	; 0x2c
   13490:	ldrb	r4, [r3, #250]	; 0xfa
   13494:	sub	r3, r4, #1
   13498:	cmp	r4, #0
   1349c:	str	r4, [sp, #24]
   134a0:	beq	1358c <__assert_fail@plt+0x226c>
   134a4:	str	r3, [sp, #16]
   134a8:	mov	r3, #8
   134ac:	add	lr, r4, #223	; 0xdf
   134b0:	add	r7, r3, r4, lsl #3
   134b4:	lsl	r3, r4, #3
   134b8:	mov	r6, lr
   134bc:	str	r3, [sp, #20]
   134c0:	ldr	r3, [sp, #44]	; 0x2c
   134c4:	ldr	r5, [fp, #-44]	; 0xffffffd4
   134c8:	ldr	r4, [r3, r7]!
   134cc:	ldr	r3, [r3, #4]
   134d0:	subs	r5, r5, r4
   134d4:	ldr	r5, [sp, #36]	; 0x24
   134d8:	sbcs	r5, r5, r3
   134dc:	bcs	13500 <__assert_fail@plt+0x21e0>
   134e0:	sub	r3, r6, #224	; 0xe0
   134e4:	sub	r4, r6, #1
   134e8:	sub	r7, r7, #8
   134ec:	cmp	r3, #0
   134f0:	mov	r6, r4
   134f4:	bgt	134c0 <__assert_fail@plt+0x21a0>
   134f8:	sub	r3, r4, #224	; 0xe0
   134fc:	b	13530 <__assert_fail@plt+0x2210>
   13500:	ldr	r5, [fp, #-44]	; 0xffffffd4
   13504:	eor	r4, r4, r5
   13508:	ldr	r5, [sp, #36]	; 0x24
   1350c:	eor	r3, r3, r5
   13510:	orrs	r3, r4, r3
   13514:	bne	1352c <__assert_fail@plt+0x220c>
   13518:	ldr	r4, [sp, #44]	; 0x2c
   1351c:	ldrb	r3, [r4, r6]
   13520:	add	r3, r3, #1
   13524:	strb	r3, [r4, r6]
   13528:	b	135bc <__assert_fail@plt+0x229c>
   1352c:	sub	r3, r6, #224	; 0xe0
   13530:	str	r3, [sp, #32]
   13534:	ldr	r3, [sp, #16]
   13538:	ldr	r4, [sp, #32]
   1353c:	ldr	r7, [sp, #44]	; 0x2c
   13540:	ldr	r5, [sp, #20]
   13544:	cmp	r3, r4
   13548:	ble	13588 <__assert_fail@plt+0x2268>
   1354c:	add	r3, r7, r5
   13550:	mov	r6, r5
   13554:	ldrd	r4, [r3, #8]
   13558:	strd	r4, [r3, #16]
   1355c:	mov	r3, r7
   13560:	mov	r5, r6
   13564:	sub	r5, r6, #8
   13568:	ldrb	r4, [r3, lr]!
   1356c:	ldr	r6, [sp, #32]
   13570:	strb	r4, [r3, #1]
   13574:	sub	r4, lr, #225	; 0xe1
   13578:	sub	r3, lr, #1
   1357c:	cmp	r4, r6
   13580:	mov	lr, r3
   13584:	bgt	1354c <__assert_fail@plt+0x222c>
   13588:	ldr	r3, [sp, #32]
   1358c:	ldr	r5, [sp, #44]	; 0x2c
   13590:	ldr	r6, [fp, #-44]	; 0xffffffd4
   13594:	ldr	r7, [sp, #36]	; 0x24
   13598:	add	r3, r3, #1
   1359c:	add	r4, r5, r3, lsl #3
   135a0:	add	r3, r5, r3
   135a4:	strd	r6, [r4, #16]
   135a8:	mov	r7, #1
   135ac:	strb	r7, [r3, #224]	; 0xe0
   135b0:	ldr	r3, [sp, #24]
   135b4:	add	r3, r3, #1
   135b8:	strb	r3, [r5, #250]	; 0xfa
   135bc:	ldr	r7, [sp, #28]
   135c0:	umull	r3, r4, r8, r1
   135c4:	mla	r4, r8, ip, r4
   135c8:	mla	r5, r7, r1, r4
   135cc:	subs	r4, r2, r3
   135d0:	sbcs	r4, r0, r5
   135d4:	bcc	127fc <__assert_fail@plt+0x14dc>
   135d8:	b	13484 <__assert_fail@plt+0x2164>
   135dc:	ldr	r6, [sp, #48]	; 0x30
   135e0:	ldr	r4, [fp, #-40]	; 0xffffffd8
   135e4:	mov	r9, r7
   135e8:	mov	r7, r4
   135ec:	orrs	r5, r4, r6
   135f0:	ldr	sl, [sp, #44]	; 0x2c
   135f4:	ldr	r4, [sp, #40]	; 0x28
   135f8:	bne	13610 <__assert_fail@plt+0x22f0>
   135fc:	subs	r0, r8, #2
   13600:	sbcs	r0, r9, #0
   13604:	bcs	13610 <__assert_fail@plt+0x22f0>
   13608:	sub	sp, fp, #28
   1360c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13610:	mov	r0, r7
   13614:	mov	r1, r6
   13618:	mov	r2, r8
   1361c:	mov	r3, r9
   13620:	bl	137a8 <__assert_fail@plt+0x2488>
   13624:	cmp	r0, #0
   13628:	beq	13670 <__assert_fail@plt+0x2350>
   1362c:	cmp	r5, #0
   13630:	beq	1369c <__assert_fail@plt+0x237c>
   13634:	ldrd	r0, [r4]
   13638:	orrs	r0, r0, r1
   1363c:	strdeq	r8, [sl]
   13640:	streq	r7, [r4]
   13644:	streq	r6, [r4, #4]
   13648:	subeq	sp, fp, #28
   1364c:	popeq	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13650:	movw	r0, #54663	; 0xd587
   13654:	movw	r1, #54352	; 0xd450
   13658:	movw	r3, #54687	; 0xd59f
   1365c:	movw	r2, #558	; 0x22e
   13660:	movt	r0, #2
   13664:	movt	r1, #2
   13668:	movt	r3, #2
   1366c:	bl	11320 <__assert_fail@plt>
   13670:	cmp	r5, #0
   13674:	beq	136f8 <__assert_fail@plt+0x23d8>
   13678:	mov	r0, #1
   1367c:	mov	r1, r6
   13680:	mov	r2, r8
   13684:	mov	r3, r9
   13688:	stm	sp, {r0, sl}
   1368c:	mov	r0, r7
   13690:	bl	14d14 <__assert_fail@plt+0x39f4>
   13694:	sub	sp, fp, #28
   13698:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1369c:	ldrb	r0, [sl, #250]	; 0xfa
   136a0:	sub	r1, r0, #1
   136a4:	cmp	r0, #0
   136a8:	beq	13780 <__assert_fail@plt+0x2460>
   136ac:	mov	r2, #8
   136b0:	add	r7, r0, #223	; 0xdf
   136b4:	add	r3, r2, r0, lsl #3
   136b8:	mov	r6, sl
   136bc:	ldr	r2, [r6, r3]!
   136c0:	ldr	r6, [r6, #4]
   136c4:	subs	r5, r8, r2
   136c8:	sbcs	r5, r9, r6
   136cc:	bcs	13714 <__assert_fail@plt+0x23f4>
   136d0:	sub	r2, r7, #1
   136d4:	sub	r7, r7, #224	; 0xe0
   136d8:	sub	r3, r3, #8
   136dc:	cmp	r7, #0
   136e0:	mov	r7, r2
   136e4:	bgt	136b8 <__assert_fail@plt+0x2398>
   136e8:	sub	r2, r2, #224	; 0xe0
   136ec:	cmp	r1, r2
   136f0:	bgt	13744 <__assert_fail@plt+0x2424>
   136f4:	b	1377c <__assert_fail@plt+0x245c>
   136f8:	mov	r0, r8
   136fc:	mov	r1, r9
   13700:	mov	r2, #1
   13704:	mov	r3, sl
   13708:	sub	sp, fp, #28
   1370c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13710:	b	141e4 <__assert_fail@plt+0x2ec4>
   13714:	eor	r2, r2, r8
   13718:	eor	r3, r6, r9
   1371c:	orrs	r2, r2, r3
   13720:	bne	13738 <__assert_fail@plt+0x2418>
   13724:	ldrb	r0, [sl, r7]
   13728:	add	r0, r0, #1
   1372c:	strb	r0, [sl, r7]
   13730:	sub	sp, fp, #28
   13734:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13738:	sub	r2, r7, #224	; 0xe0
   1373c:	cmp	r1, r2
   13740:	ble	1377c <__assert_fail@plt+0x245c>
   13744:	lsl	r1, r0, #3
   13748:	add	r3, r0, #223	; 0xdf
   1374c:	add	r7, sl, r1
   13750:	sub	r1, r1, #8
   13754:	ldrd	r4, [r7, #8]
   13758:	strd	r4, [r7, #16]
   1375c:	mov	r7, sl
   13760:	ldrb	r6, [r7, r3]!
   13764:	strb	r6, [r7, #1]
   13768:	sub	r7, r3, #1
   1376c:	sub	r3, r3, #225	; 0xe1
   13770:	cmp	r3, r2
   13774:	mov	r3, r7
   13778:	bgt	1374c <__assert_fail@plt+0x242c>
   1377c:	mov	r1, r2
   13780:	add	r1, r1, #1
   13784:	add	r0, r0, #1
   13788:	add	r2, sl, r1, lsl #3
   1378c:	add	r1, sl, r1
   13790:	strd	r8, [r2, #16]
   13794:	mov	r2, #1
   13798:	strb	r2, [r1, #224]	; 0xe0
   1379c:	strb	r0, [sl, #250]	; 0xfa
   137a0:	sub	sp, fp, #28
   137a4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   137a8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   137ac:	add	fp, sp, #28
   137b0:	sub	sp, sp, #516	; 0x204
   137b4:	rsbs	r6, r0, #0
   137b8:	rsc	r5, r1, #0
   137bc:	orrs	r7, r0, r1
   137c0:	beq	138c4 <__assert_fail@plt+0x25a4>
   137c4:	subs	ip, r0, #1
   137c8:	orr	r7, r2, r3
   137cc:	str	r6, [sp, #140]	; 0x8c
   137d0:	str	r5, [sp, #132]	; 0x84
   137d4:	str	r1, [sp, #84]	; 0x54
   137d8:	str	r0, [sp, #56]	; 0x38
   137dc:	sbc	r8, r1, #0
   137e0:	cmp	r7, #0
   137e4:	movne	r8, r1
   137e8:	movne	ip, r0
   137ec:	subs	r6, r2, #1
   137f0:	sbc	r4, r3, #0
   137f4:	str	ip, [sp, #80]	; 0x50
   137f8:	str	r8, [sp, #76]	; 0x4c
   137fc:	str	r6, [sp, #92]	; 0x5c
   13800:	mov	r7, r4
   13804:	orrs	r7, r6, r4
   13808:	str	r4, [sp, #88]	; 0x58
   1380c:	beq	138d4 <__assert_fail@plt+0x25b4>
   13810:	mov	r5, #0
   13814:	tst	r6, #1
   13818:	bne	13840 <__assert_fail@plt+0x2520>
   1381c:	ldr	r0, [sp, #92]	; 0x5c
   13820:	ldr	r1, [sp, #88]	; 0x58
   13824:	mov	r5, #0
   13828:	lsrs	r1, r1, #1
   1382c:	rrx	r7, r0
   13830:	tst	r0, #2
   13834:	add	r5, r5, #1
   13838:	mov	r0, r7
   1383c:	beq	13828 <__assert_fail@plt+0x2508>
   13840:	subs	lr, r5, #32
   13844:	lsr	r0, r8, r5
   13848:	rsb	r6, r5, #32
   1384c:	ldr	r1, [sp, #88]	; 0x58
   13850:	rsb	r7, r5, #64	; 0x40
   13854:	str	r5, [sp, #32]
   13858:	movwpl	r0, #0
   1385c:	cmp	lr, #0
   13860:	lsl	r4, ip, r7
   13864:	str	r0, [fp, #-36]	; 0xffffffdc
   13868:	lsr	r0, ip, r5
   1386c:	orr	r0, r0, r8, lsl r6
   13870:	lsrpl	r0, r8, lr
   13874:	str	r0, [fp, #-40]	; 0xffffffd8
   13878:	ldr	r0, [sp, #92]	; 0x5c
   1387c:	lsr	r0, r0, r5
   13880:	orr	r0, r0, r1, lsl r6
   13884:	lsrpl	r0, r1, lr
   13888:	cmp	r6, #0
   1388c:	movwpl	r4, #0
   13890:	cmp	r6, #0
   13894:	orr	r0, r4, r0
   13898:	str	r0, [fp, #-48]	; 0xffffffd0
   1389c:	rsb	r0, r7, #32
   138a0:	lsr	r0, ip, r0
   138a4:	orr	r0, r0, r8, lsl r7
   138a8:	lslpl	r0, ip, r6
   138ac:	cmp	lr, #0
   138b0:	lsr	r7, r1, r5
   138b4:	movwpl	r7, #0
   138b8:	orr	r0, r0, r7
   138bc:	str	r0, [fp, #-44]	; 0xffffffd4
   138c0:	b	13940 <__assert_fail@plt+0x2620>
   138c4:	mov	r0, r2
   138c8:	mov	r1, r3
   138cc:	bl	15cb8 <__assert_fail@plt+0x4998>
   138d0:	b	1419c <__assert_fail@plt+0x2e7c>
   138d4:	mov	r1, #0
   138d8:	tst	ip, #1
   138dc:	mov	r0, #0
   138e0:	bne	13908 <__assert_fail@plt+0x25e8>
   138e4:	mov	r0, #0
   138e8:	mov	r4, ip
   138ec:	mov	r7, r8
   138f0:	lsrs	r7, r7, #1
   138f4:	rrx	r6, r4
   138f8:	tst	r4, #2
   138fc:	add	r0, r0, #1
   13900:	mov	r4, r6
   13904:	beq	138f0 <__assert_fail@plt+0x25d0>
   13908:	subs	r6, r0, #32
   1390c:	str	r1, [fp, #-36]	; 0xffffffdc
   13910:	str	r1, [fp, #-40]	; 0xffffffd8
   13914:	lsr	r1, r8, r0
   13918:	rsb	r7, r0, #32
   1391c:	movwpl	r1, #0
   13920:	cmp	r6, #0
   13924:	str	r1, [fp, #-44]	; 0xffffffd4
   13928:	lsr	r1, ip, r0
   1392c:	add	r0, r0, #64	; 0x40
   13930:	orr	r1, r1, r8, lsl r7
   13934:	lsrpl	r1, r8, r6
   13938:	str	r0, [sp, #32]
   1393c:	str	r1, [fp, #-48]	; 0xffffffd0
   13940:	movw	r1, #1838	; 0x72e
   13944:	ubfx	r0, r2, #1, #7
   13948:	str	r3, [sp, #52]	; 0x34
   1394c:	movt	r1, #3
   13950:	ldrb	r0, [r1, r0]
   13954:	umull	r1, r7, r0, r2
   13958:	mla	r7, r0, r3, r7
   1395c:	rsbs	r1, r1, #2
   13960:	umull	r1, r4, r1, r0
   13964:	rsc	r8, r7, #0
   13968:	mla	r0, r8, r0, r4
   1396c:	mov	r4, #0
   13970:	umull	r7, r5, r1, r2
   13974:	rsbs	r6, r7, #2
   13978:	mov	r7, r2
   1397c:	umull	ip, sl, r1, r6
   13980:	str	r7, [sp, #48]	; 0x30
   13984:	umull	r9, r2, ip, r2
   13988:	mla	r2, ip, r3, r2
   1398c:	mla	r3, r1, r3, r5
   13990:	mla	r3, r0, r7, r3
   13994:	rsc	r3, r3, #0
   13998:	rsbs	lr, r9, #2
   1399c:	mla	r1, r1, r3, sl
   139a0:	ldr	sl, [sp, #84]	; 0x54
   139a4:	mov	r3, #127	; 0x7f
   139a8:	mla	r0, r0, r6, r1
   139ac:	mov	r6, #0
   139b0:	str	r0, [sp, #148]	; 0x94
   139b4:	mla	r0, r0, r7, r2
   139b8:	ldr	r2, [sp, #56]	; 0x38
   139bc:	mov	r7, #0
   139c0:	rsc	r0, r0, #0
   139c4:	rsbs	r1, r2, #1
   139c8:	str	r0, [sp, #144]	; 0x90
   139cc:	mov	r0, #0
   139d0:	rscs	r1, sl, #0
   139d4:	movwcc	r6, #1
   139d8:	cmp	r6, #0
   139dc:	movwne	r3, #63	; 0x3f
   139e0:	subs	r1, r2, #2
   139e4:	sbcs	r1, sl, #0
   139e8:	mov	r1, #0
   139ec:	movwcc	r7, #1
   139f0:	str	r1, [sp, #156]	; 0x9c
   139f4:	b	13a40 <__assert_fail@plt+0x2720>
   139f8:	subs	r2, r6, r5
   139fc:	ldr	r5, [sp, #48]	; 0x30
   13a00:	sbc	r3, r4, sl
   13a04:	subs	r6, r2, #1
   13a08:	sbc	r4, r3, #0
   13a0c:	subs	r7, r7, r5
   13a10:	ldr	r5, [sp, #52]	; 0x34
   13a14:	sbcs	r0, r0, r5
   13a18:	str	r0, [sp, #156]	; 0x9c
   13a1c:	mov	r0, #0
   13a20:	movwcc	r0, #1
   13a24:	cmp	r0, #0
   13a28:	moveq	r6, r2
   13a2c:	moveq	r4, r3
   13a30:	subs	r3, r1, #1
   13a34:	sbc	r0, r9, #0
   13a38:	orrs	r1, r1, r9
   13a3c:	beq	13aa8 <__assert_fail@plt+0x2788>
   13a40:	mov	r1, r3
   13a44:	ldr	r3, [sp, #156]	; 0x9c
   13a48:	lsl	r2, r4, #1
   13a4c:	ldr	r5, [sp, #56]	; 0x38
   13a50:	mov	r9, r0
   13a54:	orr	r4, r2, r6, lsr #31
   13a58:	lsl	r2, r6, #1
   13a5c:	orr	r6, r2, r3, lsr #31
   13a60:	lsl	r0, r3, #1
   13a64:	orr	r0, r0, r7, lsr #31
   13a68:	lsl	r7, r7, #1
   13a6c:	subs	r2, r5, r6
   13a70:	sbcs	r2, sl, r4
   13a74:	bcc	139f8 <__assert_fail@plt+0x26d8>
   13a78:	ldr	r2, [sp, #48]	; 0x30
   13a7c:	subs	r2, r7, r2
   13a80:	ldr	r2, [sp, #52]	; 0x34
   13a84:	sbcs	r2, r0, r2
   13a88:	bcc	13aa0 <__assert_fail@plt+0x2780>
   13a8c:	ldr	r5, [sp, #56]	; 0x38
   13a90:	eor	r3, r4, sl
   13a94:	eor	r2, r6, r5
   13a98:	orrs	r2, r2, r3
   13a9c:	beq	139f8 <__assert_fail@plt+0x26d8>
   13aa0:	str	r0, [sp, #156]	; 0x9c
   13aa4:	b	13a30 <__assert_fail@plt+0x2710>
   13aa8:	ldr	r3, [sp, #156]	; 0x9c
   13aac:	lsl	r0, r4, #1
   13ab0:	mov	r2, r7
   13ab4:	ldr	r1, [sp, #144]	; 0x90
   13ab8:	str	r7, [fp, #-80]	; 0xffffffb0
   13abc:	str	r6, [fp, #-72]	; 0xffffffb8
   13ac0:	str	r4, [sp, #96]	; 0x60
   13ac4:	lsl	r5, r7, #1
   13ac8:	str	r6, [sp, #136]	; 0x88
   13acc:	orr	r8, r0, r6, lsr #31
   13ad0:	str	r2, [sp, #100]	; 0x64
   13ad4:	str	r5, [fp, #-64]	; 0xffffffc0
   13ad8:	str	r8, [fp, #-52]	; 0xffffffcc
   13adc:	lsl	r0, r3, #1
   13ae0:	str	r3, [fp, #-76]	; 0xffffffb4
   13ae4:	str	r4, [fp, #-68]	; 0xffffffbc
   13ae8:	ldr	r4, [sp, #56]	; 0x38
   13aec:	orr	r9, r0, r7, lsr #31
   13af0:	rsbs	r0, r2, r2, lsl #1
   13af4:	mov	r7, sl
   13af8:	mov	sl, #0
   13afc:	sbcs	r0, r9, r3
   13b00:	umull	r3, r2, ip, lr
   13b04:	mov	r0, #0
   13b08:	str	r9, [fp, #-60]	; 0xffffffc4
   13b0c:	movwcc	r0, #1
   13b10:	mla	r2, ip, r1, r2
   13b14:	ldr	r1, [sp, #148]	; 0x94
   13b18:	orr	r0, r0, r6, lsl #1
   13b1c:	ldr	ip, [sp, #52]	; 0x34
   13b20:	str	r0, [fp, #-56]	; 0xffffffc8
   13b24:	str	r3, [sp, #152]	; 0x98
   13b28:	mla	r2, r1, lr, r2
   13b2c:	ldr	lr, [sp, #48]	; 0x30
   13b30:	str	r2, [sp, #148]	; 0x94
   13b34:	sub	r2, fp, #64	; 0x40
   13b38:	add	r2, r2, #8
   13b3c:	str	r2, [sp, #28]
   13b40:	subs	r2, r4, r0
   13b44:	sbcs	r2, r7, r8
   13b48:	bcc	13b6c <__assert_fail@plt+0x284c>
   13b4c:	subs	r2, r5, lr
   13b50:	sbcs	r2, r9, ip
   13b54:	bcc	13bac <__assert_fail@plt+0x288c>
   13b58:	ldr	r7, [sp, #84]	; 0x54
   13b5c:	eor	r2, r0, r4
   13b60:	eor	r7, r8, r7
   13b64:	orrs	r2, r2, r7
   13b68:	bne	13bac <__assert_fail@plt+0x288c>
   13b6c:	ldr	r1, [sp, #140]	; 0x8c
   13b70:	ldr	r3, [sp, #132]	; 0x84
   13b74:	subs	r2, r1, #1
   13b78:	sbc	r7, r3, #0
   13b7c:	subs	r5, r5, lr
   13b80:	sbcs	r6, r9, ip
   13b84:	str	r5, [fp, #-64]	; 0xffffffc0
   13b88:	movwcc	sl, #1
   13b8c:	str	r6, [fp, #-60]	; 0xffffffc4
   13b90:	cmp	sl, #0
   13b94:	moveq	r2, r1
   13b98:	moveq	r7, r3
   13b9c:	adds	r0, r2, r0
   13ba0:	ldr	r2, [sp, #28]
   13ba4:	adc	r1, r7, r8
   13ba8:	strd	r0, [r2]
   13bac:	sub	r0, fp, #64	; 0x40
   13bb0:	sub	r2, fp, #48	; 0x30
   13bb4:	ldr	sl, [sp, #84]	; 0x54
   13bb8:	ldr	r3, [sp, #148]	; 0x94
   13bbc:	sub	r1, fp, #80	; 0x50
   13bc0:	str	r4, [fp, #-88]	; 0xffffffa8
   13bc4:	str	lr, [fp, #-96]	; 0xffffffa0
   13bc8:	stm	sp, {r0, r2}
   13bcc:	ldr	r0, [sp, #32]
   13bd0:	ldr	r2, [sp, #152]	; 0x98
   13bd4:	str	r1, [sp, #12]
   13bd8:	str	sl, [fp, #-84]	; 0xffffffac
   13bdc:	str	ip, [fp, #-92]	; 0xffffffa4
   13be0:	str	r0, [sp, #8]
   13be4:	sub	r0, fp, #96	; 0x60
   13be8:	bl	16b60 <__assert_fail@plt+0x5840>
   13bec:	mov	r1, r0
   13bf0:	mov	r0, #0
   13bf4:	cmp	r1, #0
   13bf8:	beq	1419c <__assert_fail@plt+0x2e7c>
   13bfc:	ldr	r5, [sp, #80]	; 0x50
   13c00:	ldr	r6, [sp, #76]	; 0x4c
   13c04:	ldr	r7, [sp, #92]	; 0x5c
   13c08:	ldr	r4, [sp, #88]	; 0x58
   13c0c:	add	r8, sp, #192	; 0xc0
   13c10:	str	r8, [sp]
   13c14:	mov	r0, r5
   13c18:	mov	r1, r6
   13c1c:	mov	r2, r7
   13c20:	mov	r3, r4
   13c24:	bl	122b8 <__assert_fail@plt+0xf98>
   13c28:	lsrs	r0, r6, #1
   13c2c:	str	r0, [sp, #72]	; 0x48
   13c30:	rrx	r0, r5
   13c34:	str	r0, [sp, #68]	; 0x44
   13c38:	lsrs	r0, r4, #1
   13c3c:	rrx	r1, r7
   13c40:	str	r1, [sp, #64]	; 0x40
   13c44:	orr	r0, r0, r5, lsl #31
   13c48:	str	r0, [sp, #60]	; 0x3c
   13c4c:	add	r0, sp, #160	; 0xa0
   13c50:	add	r0, r0, #8
   13c54:	str	r0, [sp, #144]	; 0x90
   13c58:	add	r0, sp, #176	; 0xb0
   13c5c:	add	r0, r0, #8
   13c60:	str	r0, [sp, #140]	; 0x8c
   13c64:	add	r0, r8, #16
   13c68:	str	r0, [sp, #20]
   13c6c:	add	r0, r8, #8
   13c70:	str	r0, [sp, #24]
   13c74:	mov	r0, #2
   13c78:	str	r0, [sp, #40]	; 0x28
   13c7c:	mov	r0, #0
   13c80:	str	r0, [sp, #36]	; 0x24
   13c84:	mov	r0, #0
   13c88:	str	r0, [sp, #44]	; 0x2c
   13c8c:	ldr	r0, [sp, #24]
   13c90:	mov	r4, #1
   13c94:	mov	r8, sl
   13c98:	ldrd	r0, [r0]
   13c9c:	orrs	r0, r0, r1
   13ca0:	beq	13de0 <__assert_fail@plt+0x2ac0>
   13ca4:	ldr	r0, [sp, #192]	; 0xc0
   13ca8:	movw	r1, #1838	; 0x72e
   13cac:	ldr	ip, [sp, #196]	; 0xc4
   13cb0:	movt	r1, #3
   13cb4:	ubfx	r2, r0, #1, #7
   13cb8:	ldrb	r2, [r1, r2]
   13cbc:	umull	r3, r7, r0, r2
   13cc0:	mla	r7, ip, r2, r7
   13cc4:	rsbs	r3, r3, #2
   13cc8:	umull	r3, r6, r3, r2
   13ccc:	rsc	r7, r7, #0
   13cd0:	mla	r1, r7, r2, r6
   13cd4:	umull	r7, r6, r3, r0
   13cd8:	str	r1, [sp, #112]	; 0x70
   13cdc:	mla	r6, r3, ip, r6
   13ce0:	mla	r6, r1, r0, r6
   13ce4:	rsbs	r9, r7, #2
   13ce8:	rsc	r1, r6, #0
   13cec:	str	r1, [sp, #132]	; 0x84
   13cf0:	umull	r5, r1, r3, r9
   13cf4:	str	r1, [sp, #124]	; 0x7c
   13cf8:	umull	r6, r1, r5, r0
   13cfc:	rsbs	sl, r6, #2
   13d00:	str	r1, [sp, #120]	; 0x78
   13d04:	ldr	r6, [sp, #92]	; 0x5c
   13d08:	umull	r1, r2, r5, sl
   13d0c:	str	r2, [sp, #128]	; 0x80
   13d10:	umull	lr, r2, r1, r6
   13d14:	str	r2, [sp, #116]	; 0x74
   13d18:	ldr	r2, [sp, #88]	; 0x58
   13d1c:	str	lr, [sp, #176]	; 0xb0
   13d20:	ldr	r7, [sp, #116]	; 0x74
   13d24:	mla	lr, r1, r2, r7
   13d28:	ldr	r1, [sp, #120]	; 0x78
   13d2c:	ldr	r2, [sp, #132]	; 0x84
   13d30:	mla	ip, r5, ip, r1
   13d34:	ldr	r1, [sp, #124]	; 0x7c
   13d38:	mla	r3, r3, r2, r1
   13d3c:	ldr	r1, [sp, #112]	; 0x70
   13d40:	mla	r2, r1, r9, r3
   13d44:	ldr	r1, [sp, #128]	; 0x80
   13d48:	sub	r3, fp, #96	; 0x60
   13d4c:	mla	r0, r2, r0, ip
   13d50:	rsc	r0, r0, #0
   13d54:	mla	r0, r5, r0, r1
   13d58:	mov	r1, #0
   13d5c:	mla	r0, r2, sl, r0
   13d60:	add	r2, sp, #176	; 0xb0
   13d64:	mla	r0, r0, r6, lr
   13d68:	str	r0, [sp, #180]	; 0xb4
   13d6c:	ldr	r0, [sp, #140]	; 0x8c
   13d70:	str	r1, [r0]
   13d74:	str	r1, [r0, #4]
   13d78:	ldr	r0, [sp, #152]	; 0x98
   13d7c:	sub	r1, fp, #64	; 0x40
   13d80:	str	r0, [sp]
   13d84:	ldr	r0, [sp, #148]	; 0x94
   13d88:	str	r0, [sp, #4]
   13d8c:	sub	r0, fp, #80	; 0x50
   13d90:	str	r0, [sp, #8]
   13d94:	ldr	r0, [sp, #144]	; 0x90
   13d98:	bl	16d94 <__assert_fail@plt+0x5a74>
   13d9c:	ldr	r2, [sp, #156]	; 0x9c
   13da0:	ldr	r9, [sp, #100]	; 0x64
   13da4:	ldr	r7, [sp, #96]	; 0x60
   13da8:	str	r1, [sp, #164]	; 0xa4
   13dac:	str	r0, [sp, #160]	; 0xa0
   13db0:	eor	r1, r1, r2
   13db4:	eor	r0, r0, r9
   13db8:	orrs	r0, r0, r1
   13dbc:	bne	13de8 <__assert_fail@plt+0x2ac8>
   13dc0:	ldr	r0, [sp, #144]	; 0x90
   13dc4:	ldr	r2, [sp, #136]	; 0x88
   13dc8:	ldrd	r0, [r0]
   13dcc:	eor	r1, r1, r7
   13dd0:	eor	r0, r0, r2
   13dd4:	orrs	r4, r0, r1
   13dd8:	movwne	r4, #1
   13ddc:	b	13de8 <__assert_fail@plt+0x2ac8>
   13de0:	ldr	r9, [sp, #100]	; 0x64
   13de4:	ldr	r7, [sp, #96]	; 0x60
   13de8:	cmp	r4, #0
   13dec:	ldrbne	r0, [sp, #442]	; 0x1ba
   13df0:	cmpne	r0, #0
   13df4:	bne	13f70 <__assert_fail@plt+0x2c50>
   13df8:	cmp	r4, #0
   13dfc:	bne	141a4 <__assert_fail@plt+0x2e84>
   13e00:	ldr	r1, [sp, #44]	; 0x2c
   13e04:	movw	r0, #488	; 0x1e8
   13e08:	ldr	r7, [sp, #40]	; 0x28
   13e0c:	ldr	r6, [sp, #36]	; 0x24
   13e10:	ldr	r9, [sp, #56]	; 0x38
   13e14:	mov	sl, r8
   13e18:	ldr	lr, [sp, #52]	; 0x34
   13e1c:	mov	r2, #0
   13e20:	mov	r4, #127	; 0x7f
   13e24:	movt	r0, #3
   13e28:	ldrb	r0, [r0, r1]
   13e2c:	adds	r7, r7, r0
   13e30:	adc	r6, r6, #0
   13e34:	subs	r0, r7, r9
   13e38:	mov	r1, r7
   13e3c:	str	r7, [sp, #40]	; 0x28
   13e40:	sbcs	r0, r6, r8
   13e44:	ldr	r8, [sp, #48]	; 0x30
   13e48:	mov	r0, #0
   13e4c:	mov	r5, r6
   13e50:	str	r6, [sp, #36]	; 0x24
   13e54:	movwcc	r0, #1
   13e58:	cmp	r0, #0
   13e5c:	mov	r3, r0
   13e60:	movwne	r4, #63	; 0x3f
   13e64:	movwne	r5, #0
   13e68:	movwne	r1, #0
   13e6c:	movne	r3, r6
   13e70:	movne	r0, r7
   13e74:	b	13eb4 <__assert_fail@plt+0x2b94>
   13e78:	subs	r4, r0, r9
   13e7c:	sbc	r6, r3, sl
   13e80:	subs	r0, r4, #1
   13e84:	sbc	r3, r6, #0
   13e88:	subs	r1, r1, r8
   13e8c:	sbcs	r5, r2, lr
   13e90:	mov	r2, #0
   13e94:	movwcc	r2, #1
   13e98:	cmp	r2, #0
   13e9c:	moveq	r0, r4
   13ea0:	moveq	r3, r6
   13ea4:	subs	r4, r7, #1
   13ea8:	sbc	r2, ip, #0
   13eac:	orrs	r7, r7, ip
   13eb0:	beq	13f08 <__assert_fail@plt+0x2be8>
   13eb4:	lsl	r3, r3, #1
   13eb8:	mov	ip, r2
   13ebc:	lsl	r2, r5, #1
   13ec0:	lsr	r5, r5, #31
   13ec4:	mov	r7, r4
   13ec8:	orr	r3, r3, r0, lsr #31
   13ecc:	orr	r0, r5, r0, lsl #1
   13ed0:	orr	r2, r2, r1, lsr #31
   13ed4:	lsl	r1, r1, #1
   13ed8:	subs	r5, r9, r0
   13edc:	sbcs	r5, sl, r3
   13ee0:	bcc	13e78 <__assert_fail@plt+0x2b58>
   13ee4:	subs	r5, r1, r8
   13ee8:	sbcs	r5, r2, lr
   13eec:	bcc	13f00 <__assert_fail@plt+0x2be0>
   13ef0:	eor	r5, r0, r9
   13ef4:	eor	r4, r3, sl
   13ef8:	orrs	r5, r5, r4
   13efc:	beq	13e78 <__assert_fail@plt+0x2b58>
   13f00:	mov	r5, r2
   13f04:	b	13ea4 <__assert_fail@plt+0x2b84>
   13f08:	ldr	r2, [sp, #28]
   13f0c:	stm	r2, {r0, r3}
   13f10:	sub	r0, fp, #64	; 0x40
   13f14:	ldr	r2, [sp, #152]	; 0x98
   13f18:	ldr	r3, [sp, #148]	; 0x94
   13f1c:	str	r5, [fp, #-60]	; 0xffffffc4
   13f20:	str	r1, [fp, #-64]	; 0xffffffc0
   13f24:	str	r0, [sp]
   13f28:	sub	r0, fp, #48	; 0x30
   13f2c:	str	r0, [sp, #4]
   13f30:	ldr	r0, [sp, #32]
   13f34:	str	r0, [sp, #8]
   13f38:	sub	r0, fp, #80	; 0x50
   13f3c:	str	r0, [sp, #12]
   13f40:	sub	r0, fp, #96	; 0x60
   13f44:	bl	16b60 <__assert_fail@plt+0x5840>
   13f48:	cmp	r0, #0
   13f4c:	beq	141b0 <__assert_fail@plt+0x2e90>
   13f50:	ldr	r0, [sp, #44]	; 0x2c
   13f54:	mov	r1, r0
   13f58:	add	r1, r0, #1
   13f5c:	cmp	r1, #668	; 0x29c
   13f60:	mov	r0, r1
   13f64:	str	r1, [sp, #44]	; 0x2c
   13f68:	bne	13c8c <__assert_fail@plt+0x296c>
   13f6c:	b	141bc <__assert_fail@plt+0x2e9c>
   13f70:	ldr	r5, [sp, #20]
   13f74:	mov	r6, #1
   13f78:	ldrd	r0, [r5]
   13f7c:	eor	r2, r0, #2
   13f80:	orrs	r2, r2, r1
   13f84:	bne	13fb0 <__assert_fail@plt+0x2c90>
   13f88:	ldr	r0, [sp, #64]	; 0x40
   13f8c:	ldr	r1, [sp, #68]	; 0x44
   13f90:	ldr	r2, [sp, #140]	; 0x8c
   13f94:	str	r0, [sp, #176]	; 0xb0
   13f98:	ldr	r0, [sp, #60]	; 0x3c
   13f9c:	str	r0, [sp, #180]	; 0xb4
   13fa0:	ldr	r0, [sp, #72]	; 0x48
   13fa4:	str	r1, [r2]
   13fa8:	str	r0, [r2, #4]
   13fac:	b	14110 <__assert_fail@plt+0x2df0>
   13fb0:	movw	r3, #1838	; 0x72e
   13fb4:	str	r6, [sp, #108]	; 0x6c
   13fb8:	ubfx	r2, r0, #1, #7
   13fbc:	ldr	r9, [sp, #92]	; 0x5c
   13fc0:	movt	r3, #3
   13fc4:	ldrb	r2, [r3, r2]
   13fc8:	umull	r3, r7, r0, r2
   13fcc:	mla	r7, r1, r2, r7
   13fd0:	rsbs	r3, r3, #2
   13fd4:	umull	r6, r3, r3, r2
   13fd8:	rsc	r7, r7, #0
   13fdc:	mla	sl, r7, r2, r3
   13fe0:	umull	r2, r3, r6, r0
   13fe4:	mla	r3, r6, r1, r3
   13fe8:	mla	r3, sl, r0, r3
   13fec:	rsbs	r4, r2, #2
   13ff0:	rsc	r2, r3, #0
   13ff4:	str	r2, [sp, #128]	; 0x80
   13ff8:	umull	r2, r3, r6, r4
   13ffc:	str	r3, [sp, #120]	; 0x78
   14000:	umull	r3, r7, r2, r0
   14004:	rsbs	ip, r3, #2
   14008:	str	r7, [sp, #112]	; 0x70
   1400c:	umull	r8, r3, r2, ip
   14010:	str	r3, [sp, #124]	; 0x7c
   14014:	umull	r3, lr, r8, r9
   14018:	str	r8, [sp, #104]	; 0x68
   1401c:	str	r3, [sp, #132]	; 0x84
   14020:	ldr	r3, [sp, #88]	; 0x58
   14024:	mla	r3, r8, r3, lr
   14028:	ldr	lr, [sp, #120]	; 0x78
   1402c:	str	r3, [sp, #116]	; 0x74
   14030:	ldr	r3, [sp, #112]	; 0x70
   14034:	mla	r8, r2, r1, r3
   14038:	ldr	r3, [sp, #128]	; 0x80
   1403c:	mla	r6, r6, r3, lr
   14040:	ldr	lr, [sp, #80]	; 0x50
   14044:	mla	r4, sl, r4, r6
   14048:	ldr	r6, [sp, #124]	; 0x7c
   1404c:	mla	r3, r4, r0, r8
   14050:	rsc	r3, r3, #0
   14054:	mla	r2, r2, r3, r6
   14058:	mla	ip, r4, ip, r2
   1405c:	ldr	r2, [sp, #116]	; 0x74
   14060:	mla	r6, ip, r9, r2
   14064:	ldr	r9, [sp, #76]	; 0x4c
   14068:	subs	r2, lr, r0
   1406c:	sbcs	r2, r9, r1
   14070:	bcs	14094 <__assert_fail@plt+0x2d74>
   14074:	ldr	r0, [sp, #132]	; 0x84
   14078:	mov	r1, #0
   1407c:	str	r6, [sp, #180]	; 0xb4
   14080:	str	r0, [sp, #176]	; 0xb0
   14084:	ldr	r0, [sp, #140]	; 0x8c
   14088:	str	r1, [r0]
   1408c:	str	r1, [r0, #4]
   14090:	b	14100 <__assert_fail@plt+0x2de0>
   14094:	ldr	r8, [sp, #132]	; 0x84
   14098:	umull	r2, r3, r8, r1
   1409c:	umull	r4, r7, r8, r0
   140a0:	umlal	r2, r3, r6, r0
   140a4:	adds	r2, r2, r7
   140a8:	umull	r0, r7, r6, r0
   140ac:	adc	r3, r3, #0
   140b0:	subs	r0, r2, r0
   140b4:	umull	r1, r2, r6, r1
   140b8:	sbcs	r0, r3, r7
   140bc:	mov	r0, #0
   140c0:	ldr	r7, [sp, #104]	; 0x68
   140c4:	movwcc	r0, #1
   140c8:	cmp	r0, #0
   140cc:	addne	r2, r2, #1
   140d0:	subs	r0, lr, r3
   140d4:	sbc	r3, r9, #0
   140d8:	subs	r0, r0, r1
   140dc:	umull	r4, r1, r0, r7
   140e0:	mla	r0, r0, ip, r1
   140e4:	sbc	r1, r3, r2
   140e8:	mla	r1, r1, r7, r0
   140ec:	ldr	r0, [sp, #140]	; 0x8c
   140f0:	str	r4, [r0]
   140f4:	str	r1, [r0, #4]
   140f8:	str	r6, [sp, #180]	; 0xb4
   140fc:	str	r8, [sp, #176]	; 0xb0
   14100:	ldr	r8, [sp, #84]	; 0x54
   14104:	ldr	r9, [sp, #100]	; 0x64
   14108:	ldr	r7, [sp, #96]	; 0x60
   1410c:	ldr	r6, [sp, #108]	; 0x6c
   14110:	ldr	r0, [sp, #152]	; 0x98
   14114:	ldr	r4, [sp, #144]	; 0x90
   14118:	sub	r1, fp, #64	; 0x40
   1411c:	add	r2, sp, #176	; 0xb0
   14120:	sub	r3, fp, #96	; 0x60
   14124:	str	r0, [sp]
   14128:	ldr	r0, [sp, #148]	; 0x94
   1412c:	str	r0, [sp, #4]
   14130:	sub	r0, fp, #80	; 0x50
   14134:	str	r0, [sp, #8]
   14138:	mov	r0, r4
   1413c:	bl	16d94 <__assert_fail@plt+0x5a74>
   14140:	ldr	r2, [sp, #156]	; 0x9c
   14144:	str	r1, [sp, #164]	; 0xa4
   14148:	str	r0, [sp, #160]	; 0xa0
   1414c:	eor	r0, r0, r9
   14150:	eor	r1, r1, r2
   14154:	ldrd	r2, [r4]
   14158:	eor	r3, r3, r7
   1415c:	orr	r1, r1, r3
   14160:	ldr	r3, [sp, #136]	; 0x88
   14164:	eor	r2, r2, r3
   14168:	orr	r0, r0, r2
   1416c:	orrs	r0, r0, r1
   14170:	mov	r4, r0
   14174:	movwne	r4, #1
   14178:	cmp	r0, #0
   1417c:	beq	13df8 <__assert_fail@plt+0x2ad8>
   14180:	ldrb	r1, [sp, #442]	; 0x1ba
   14184:	add	r0, r6, #1
   14188:	add	r5, r5, #8
   1418c:	cmp	r6, r1
   14190:	mov	r6, r0
   14194:	bcc	13f78 <__assert_fail@plt+0x2c58>
   14198:	b	13df8 <__assert_fail@plt+0x2ad8>
   1419c:	sub	sp, fp, #28
   141a0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   141a4:	mov	r0, #1
   141a8:	sub	sp, fp, #28
   141ac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   141b0:	mov	r0, #0
   141b4:	sub	sp, fp, #28
   141b8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   141bc:	movw	r1, #54365	; 0xd45d
   141c0:	mov	r0, #0
   141c4:	mov	r2, #5
   141c8:	movt	r1, #2
   141cc:	bl	110ec <dcgettext@plt>
   141d0:	mov	r2, r0
   141d4:	mov	r0, #0
   141d8:	mov	r1, #0
   141dc:	bl	1117c <error@plt>
   141e0:	bl	11314 <abort@plt>
   141e4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   141e8:	add	fp, sp, #28
   141ec:	sub	sp, sp, #76	; 0x4c
   141f0:	mov	r8, r0
   141f4:	subs	r0, r0, #2
   141f8:	stmib	sp, {r2, r3}
   141fc:	sbcs	r0, r1, #0
   14200:	bcc	14bd0 <__assert_fail@plt+0x38b0>
   14204:	mov	r2, r1
   14208:	mvn	r0, #63	; 0x3f
   1420c:	mov	r1, r8
   14210:	mov	r9, #0
   14214:	mov	sl, #0
   14218:	mov	r7, #1
   1421c:	mov	r6, #0
   14220:	mov	ip, #0
   14224:	mov	lr, #0
   14228:	str	r2, [fp, #-32]	; 0xffffffe0
   1422c:	b	14264 <__assert_fail@plt+0x2f44>
   14230:	subs	r3, r7, r1
   14234:	mov	r5, #0
   14238:	sbc	r4, r6, r2
   1423c:	subs	r7, r3, #1
   14240:	sbc	r6, r4, #0
   14244:	subs	r9, r9, ip
   14248:	sbcs	sl, sl, lr
   1424c:	movwcc	r5, #1
   14250:	cmp	r5, #0
   14254:	moveq	r7, r3
   14258:	moveq	r6, r4
   1425c:	adds	r0, r0, #1
   14260:	bcs	142a4 <__assert_fail@plt+0x2f84>
   14264:	lsrs	r5, lr, #1
   14268:	rrx	ip, ip
   1426c:	lsrs	r2, r2, #1
   14270:	orr	lr, r5, r1, lsl #31
   14274:	rrx	r1, r1
   14278:	subs	r4, r1, r7
   1427c:	sbcs	r4, r2, r6
   14280:	bcc	14230 <__assert_fail@plt+0x2f10>
   14284:	eor	r4, r7, r1
   14288:	eor	r3, r6, r2
   1428c:	orrs	r3, r4, r3
   14290:	bne	1425c <__assert_fail@plt+0x2f3c>
   14294:	subs	r3, r9, ip
   14298:	sbcs	r3, sl, lr
   1429c:	bcs	14230 <__assert_fail@plt+0x2f10>
   142a0:	b	1425c <__assert_fail@plt+0x2f3c>
   142a4:	ldr	r4, [fp, #-32]	; 0xffffffe0
   142a8:	subs	r0, r8, r9
   142ac:	mov	r2, #0
   142b0:	ldr	lr, [sp, #4]
   142b4:	sbc	r1, r4, sl
   142b8:	subs	r0, r9, r0
   142bc:	sbcs	r1, sl, r1
   142c0:	movwcc	r2, #1
   142c4:	adds	r7, r0, r8
   142c8:	adc	r3, r1, r4
   142cc:	cmp	r2, #0
   142d0:	moveq	r7, r0
   142d4:	eor	r0, r8, #1
   142d8:	moveq	r3, r1
   142dc:	orrs	r0, r0, r4
   142e0:	str	r3, [fp, #-40]	; 0xffffffd8
   142e4:	beq	14be8 <__assert_fail@plt+0x38c8>
   142e8:	mov	r5, sl
   142ec:	ldr	sl, [fp, #-40]	; 0xffffffd8
   142f0:	add	r0, lr, #1
   142f4:	mov	r6, r9
   142f8:	mov	r2, r7
   142fc:	str	r7, [sp, #32]
   14300:	str	r0, [sp]
   14304:	mov	r0, #1
   14308:	str	r0, [fp, #-48]	; 0xffffffd0
   1430c:	mov	r0, r7
   14310:	mov	r0, #1
   14314:	str	r0, [sp, #12]
   14318:	str	sl, [sp, #28]
   1431c:	mov	r3, sl
   14320:	mov	sl, r7
   14324:	subs	r0, lr, r8
   14328:	str	r2, [fp, #-44]	; 0xffffffd4
   1432c:	str	r6, [sp, #48]	; 0x30
   14330:	str	r5, [sp, #52]	; 0x34
   14334:	rscs	r0, r4, #0
   14338:	bcs	14cf4 <__assert_fail@plt+0x39d4>
   1433c:	movw	r1, #1838	; 0x72e
   14340:	ubfx	r0, r8, #1, #7
   14344:	str	r4, [fp, #-32]	; 0xffffffe0
   14348:	str	r8, [sp, #20]
   1434c:	movt	r1, #3
   14350:	ldr	ip, [fp, #-32]	; 0xffffffe0
   14354:	ldrb	r0, [r1, r0]
   14358:	umull	r1, r2, r8, r0
   1435c:	mla	r2, r4, r0, r2
   14360:	rsbs	r1, r1, #2
   14364:	umull	r1, r9, r1, r0
   14368:	rsc	r2, r2, #0
   1436c:	str	r2, [sp, #44]	; 0x2c
   14370:	umull	r7, r4, r1, r8
   14374:	rsbs	r7, r7, #2
   14378:	umull	r5, r2, r1, r7
   1437c:	str	r2, [sp, #40]	; 0x28
   14380:	umull	r6, r2, r5, r8
   14384:	mla	ip, r5, ip, r2
   14388:	ldr	r2, [sp, #40]	; 0x28
   1438c:	str	r6, [fp, #-36]	; 0xffffffdc
   14390:	ldr	r6, [sp, #44]	; 0x2c
   14394:	mla	r0, r6, r0, r9
   14398:	ldr	r6, [fp, #-32]	; 0xffffffe0
   1439c:	mla	r4, r1, r6, r4
   143a0:	mla	r4, r0, r8, r4
   143a4:	rsc	r4, r4, #0
   143a8:	mla	r1, r1, r4, r2
   143ac:	ldr	r2, [fp, #-36]	; 0xffffffdc
   143b0:	mla	r0, r0, r7, r1
   143b4:	mla	r1, r0, r8, ip
   143b8:	rsbs	r2, r2, #2
   143bc:	umull	r4, r7, r5, r2
   143c0:	rsc	r1, r1, #0
   143c4:	mla	r1, r5, r1, r7
   143c8:	ldr	r5, [fp, #-44]	; 0xffffffd4
   143cc:	mla	r0, r0, r2, r1
   143d0:	ldr	r1, [sp, #12]
   143d4:	str	r4, [sp, #24]
   143d8:	str	r0, [fp, #-36]	; 0xffffffdc
   143dc:	subs	r0, r8, lr
   143e0:	str	r0, [sp, #44]	; 0x2c
   143e4:	sbc	r0, r6, #0
   143e8:	str	r0, [sp, #40]	; 0x28
   143ec:	and	r0, r8, #1
   143f0:	str	r0, [sp, #16]
   143f4:	ldr	r8, [fp, #-48]	; 0xffffffd0
   143f8:	str	r1, [sp, #12]
   143fc:	b	14414 <__assert_fail@plt+0x30f4>
   14400:	ldr	r2, [fp, #-44]	; 0xffffffd4
   14404:	ldr	r3, [sp, #36]	; 0x24
   14408:	subs	r8, r8, #1
   1440c:	mov	r5, r2
   14410:	beq	146bc <__assert_fail@plt+0x339c>
   14414:	str	r3, [sp, #36]	; 0x24
   14418:	mov	r3, sl
   1441c:	ldr	sl, [fp, #-40]	; 0xffffffd8
   14420:	str	r8, [fp, #-48]	; 0xffffffd0
   14424:	ldr	r8, [sp, #24]
   14428:	str	r5, [fp, #-44]	; 0xffffffd4
   1442c:	ldr	ip, [fp, #-32]	; 0xffffffe0
   14430:	ldr	r9, [sp, #20]
   14434:	umull	r0, r1, sl, r3
   14438:	umull	r3, r7, r3, r3
   1443c:	lsl	r2, r1, #1
   14440:	adds	r7, r7, r0, lsl #1
   14444:	umull	r6, r5, r3, r8
   14448:	orr	r2, r2, r0, lsr #31
   1444c:	adc	lr, r2, #0
   14450:	ldr	r2, [fp, #-36]	; 0xffffffdc
   14454:	mla	r3, r3, r2, r5
   14458:	umull	r5, r4, r6, ip
   1445c:	umull	r6, r2, r6, r9
   14460:	mla	r3, r7, r8, r3
   14464:	umlal	r5, r4, r3, r9
   14468:	adds	r2, r5, r2
   1446c:	adc	r6, r4, #0
   14470:	umull	r5, r4, r3, r9
   14474:	subs	r2, r2, r5
   14478:	umull	r3, r5, r3, ip
   1447c:	sbcs	r2, r6, r4
   14480:	mov	r2, #0
   14484:	movwcc	r2, #1
   14488:	cmp	r2, #0
   1448c:	addne	r5, r5, #1
   14490:	adds	r2, r3, r6
   14494:	adc	r3, r5, #0
   14498:	subs	r0, r7, r0
   1449c:	ldr	r5, [sp, #52]	; 0x34
   144a0:	sbcs	r0, lr, r1
   144a4:	umull	r1, r7, sl, sl
   144a8:	mov	r0, #0
   144ac:	movwcc	r0, #1
   144b0:	cmp	r0, #0
   144b4:	addne	r7, r7, #1
   144b8:	adds	r0, r1, lr
   144bc:	adc	r1, r7, #0
   144c0:	subs	r0, r0, r2
   144c4:	mov	r2, #0
   144c8:	sbcs	r1, r1, r3
   144cc:	movwcc	r2, #1
   144d0:	adds	r3, r0, r9
   144d4:	adc	r7, r1, ip
   144d8:	cmp	r2, #0
   144dc:	mov	r2, #0
   144e0:	moveq	r3, r0
   144e4:	ldr	r0, [sp, #44]	; 0x2c
   144e8:	moveq	r7, r1
   144ec:	ldr	r1, [sp, #40]	; 0x28
   144f0:	subs	r0, r3, r0
   144f4:	sbcs	r1, r7, r1
   144f8:	movwcc	r2, #1
   144fc:	adds	sl, r0, r9
   14500:	adc	r3, r1, ip
   14504:	cmp	r2, #0
   14508:	mov	r2, #0
   1450c:	moveq	sl, r0
   14510:	ldr	r0, [sp, #32]
   14514:	moveq	r3, r1
   14518:	ldr	r1, [sp, #28]
   1451c:	str	r3, [fp, #-40]	; 0xffffffd8
   14520:	subs	r0, r0, sl
   14524:	sbcs	r1, r1, r3
   14528:	movwcc	r2, #1
   1452c:	adds	r3, r0, r9
   14530:	adc	r7, r1, ip
   14534:	cmp	r2, #0
   14538:	ldr	r2, [sp, #48]	; 0x30
   1453c:	moveq	r7, r1
   14540:	moveq	r3, r0
   14544:	umull	r0, r1, r7, r2
   14548:	umull	r2, r6, r3, r2
   1454c:	umlal	r0, r1, r3, r5
   14550:	adds	r0, r0, r6
   14554:	umull	r7, r6, r7, r5
   14558:	umull	r3, r5, r3, r5
   1455c:	adc	r1, r1, #0
   14560:	subs	r3, r0, r3
   14564:	sbcs	r3, r1, r5
   14568:	mov	r3, #0
   1456c:	ldr	r5, [fp, #-36]	; 0xffffffdc
   14570:	movwcc	r3, #1
   14574:	cmp	r3, #0
   14578:	addne	r6, r6, #1
   1457c:	adds	r1, r7, r1
   14580:	adc	r3, r6, #0
   14584:	umull	r7, r6, r2, r8
   14588:	mla	r2, r2, r5, r6
   1458c:	mla	r0, r0, r8, r2
   14590:	ldr	r8, [fp, #-48]	; 0xffffffd0
   14594:	umull	r2, r6, r7, ip
   14598:	umull	r7, r5, r7, r9
   1459c:	umlal	r2, r6, r0, r9
   145a0:	adds	r2, r2, r5
   145a4:	adc	r7, r6, #0
   145a8:	umull	r6, r5, r0, ip
   145ac:	umull	r0, r4, r0, r9
   145b0:	subs	r0, r2, r0
   145b4:	sbcs	r0, r7, r4
   145b8:	mov	r0, #0
   145bc:	movwcc	r0, #1
   145c0:	cmp	r0, #0
   145c4:	addne	r5, r5, #1
   145c8:	adds	r0, r6, r7
   145cc:	adc	r2, r5, #0
   145d0:	subs	r0, r1, r0
   145d4:	sbcs	r1, r3, r2
   145d8:	mov	r2, #0
   145dc:	movwcc	r2, #1
   145e0:	adds	r5, r0, r9
   145e4:	adc	r3, r1, ip
   145e8:	cmp	r2, #0
   145ec:	moveq	r5, r0
   145f0:	and	r0, r8, #31
   145f4:	moveq	r3, r1
   145f8:	cmp	r0, #1
   145fc:	str	r3, [sp, #52]	; 0x34
   14600:	str	r5, [sp, #48]	; 0x30
   14604:	bne	14400 <__assert_fail@plt+0x30e0>
   14608:	ldr	r0, [sp, #16]
   1460c:	mov	lr, ip
   14610:	mov	ip, r5
   14614:	mov	r4, r3
   14618:	mov	r2, r9
   1461c:	mov	r6, lr
   14620:	cmp	r0, #0
   14624:	moveq	ip, r9
   14628:	moveq	r4, lr
   1462c:	moveq	r2, r5
   14630:	moveq	r6, r3
   14634:	orr	r0, ip, r4
   14638:	cmp	r0, #0
   1463c:	beq	146a0 <__assert_fail@plt+0x3380>
   14640:	ldr	r9, [sp, #36]	; 0x24
   14644:	lsrs	r5, r6, #1
   14648:	rrx	r2, r2
   1464c:	mov	r6, r4
   14650:	mov	r7, ip
   14654:	lsrs	r4, r4, #1
   14658:	rrx	ip, ip
   1465c:	tst	r7, #1
   14660:	beq	1464c <__assert_fail@plt+0x332c>
   14664:	subs	r3, ip, r2
   14668:	sbc	lr, r4, r5
   1466c:	orrs	r0, r3, lr
   14670:	beq	14698 <__assert_fail@plt+0x3378>
   14674:	eor	r0, r3, lr, asr #31
   14678:	eor	r1, lr, lr, asr #31
   1467c:	subs	ip, r0, lr, asr #31
   14680:	and	r0, r3, lr, asr #31
   14684:	sbc	r4, r1, lr, asr #31
   14688:	and	r1, lr, lr, asr #31
   1468c:	adds	r2, r0, r2
   14690:	adc	r5, r1, r5
   14694:	b	1464c <__assert_fail@plt+0x332c>
   14698:	orr	r2, r7, #1
   1469c:	b	146a4 <__assert_fail@plt+0x3384>
   146a0:	ldr	r9, [sp, #36]	; 0x24
   146a4:	ldr	r3, [fp, #-40]	; 0xffffffd8
   146a8:	eor	r0, r2, #1
   146ac:	mov	r2, sl
   146b0:	orrs	r0, r0, r6
   146b4:	beq	14408 <__assert_fail@plt+0x30e8>
   146b8:	b	14810 <__assert_fail@plt+0x34f0>
   146bc:	ldr	r4, [sp, #12]
   146c0:	ldr	r0, [fp, #-40]	; 0xffffffd8
   146c4:	mov	r5, sl
   146c8:	str	sl, [sp, #32]
   146cc:	lsl	r1, r4, #1
   146d0:	cmp	r4, #0
   146d4:	mov	r3, r0
   146d8:	str	r4, [fp, #-48]	; 0xffffffd0
   146dc:	str	r0, [sp, #28]
   146e0:	beq	143f4 <__assert_fail@plt+0x30d4>
   146e4:	str	sl, [fp, #-44]	; 0xffffffd4
   146e8:	mov	r5, sl
   146ec:	ldr	r3, [fp, #-40]	; 0xffffffd8
   146f0:	ldr	r8, [sp, #20]
   146f4:	ldr	sl, [sp, #24]
   146f8:	str	r1, [sp, #36]	; 0x24
   146fc:	umull	r0, ip, r3, r5
   14700:	umull	r1, r7, r5, r5
   14704:	lsl	r2, ip, #1
   14708:	adds	r9, r7, r0, lsl #1
   1470c:	umull	r6, r5, r1, sl
   14710:	orr	r2, r2, r0, lsr #31
   14714:	adc	lr, r2, #0
   14718:	ldr	r2, [fp, #-36]	; 0xffffffdc
   1471c:	mla	r1, r1, r2, r5
   14720:	mla	r7, r9, sl, r1
   14724:	ldr	r1, [fp, #-32]	; 0xffffffe0
   14728:	umull	r5, r2, r6, r1
   1472c:	umull	r6, r1, r6, r8
   14730:	umlal	r5, r2, r7, r8
   14734:	adds	r1, r5, r1
   14738:	umull	r5, r6, r7, r8
   1473c:	adc	r2, r2, #0
   14740:	subs	r1, r1, r5
   14744:	ldr	r5, [fp, #-32]	; 0xffffffe0
   14748:	sbcs	r1, r2, r6
   1474c:	mov	r1, #0
   14750:	movwcc	r1, #1
   14754:	cmp	r1, #0
   14758:	umull	r6, r5, r7, r5
   1475c:	umull	r3, r7, r3, r3
   14760:	addne	r5, r5, #1
   14764:	adds	r1, r6, r2
   14768:	ldr	r6, [fp, #-32]	; 0xffffffe0
   1476c:	adc	r2, r5, #0
   14770:	subs	r0, r9, r0
   14774:	sbcs	r0, lr, ip
   14778:	mov	r0, #0
   1477c:	movwcc	r0, #1
   14780:	cmp	r0, #0
   14784:	addne	r7, r7, #1
   14788:	adds	r0, r3, lr
   1478c:	adc	r3, r7, #0
   14790:	subs	r0, r0, r1
   14794:	sbcs	r1, r3, r2
   14798:	mov	r2, #0
   1479c:	movwcc	r2, #1
   147a0:	adds	r3, r0, r8
   147a4:	adc	r7, r1, r6
   147a8:	cmp	r2, #0
   147ac:	mov	r2, #0
   147b0:	moveq	r3, r0
   147b4:	ldr	r0, [sp, #44]	; 0x2c
   147b8:	moveq	r7, r1
   147bc:	ldr	r1, [sp, #40]	; 0x28
   147c0:	subs	r0, r3, r0
   147c4:	sbcs	r1, r7, r1
   147c8:	movwcc	r2, #1
   147cc:	adds	r5, r0, r8
   147d0:	adc	r3, r1, r6
   147d4:	cmp	r2, #0
   147d8:	moveq	r3, r1
   147dc:	moveq	r5, r0
   147e0:	subs	r4, r4, #1
   147e4:	bne	146fc <__assert_fail@plt+0x33dc>
   147e8:	ldr	r0, [sp, #12]
   147ec:	ldr	r1, [sp, #36]	; 0x24
   147f0:	mov	sl, r5
   147f4:	str	r0, [fp, #-48]	; 0xffffffd0
   147f8:	ldr	r0, [fp, #-44]	; 0xffffffd4
   147fc:	str	r0, [sp, #32]
   14800:	ldr	r0, [fp, #-40]	; 0xffffffd8
   14804:	str	r3, [fp, #-40]	; 0xffffffd8
   14808:	str	r0, [sp, #28]
   1480c:	b	143f4 <__assert_fail@plt+0x30d4>
   14810:	ldr	r8, [sp, #20]
   14814:	ldr	r6, [sp, #24]
   14818:	b	14830 <__assert_fail@plt+0x3510>
   1481c:	orr	r4, r4, #1
   14820:	ldr	r6, [sp, #24]
   14824:	eor	r0, r4, #1
   14828:	orrs	r0, r0, r7
   1482c:	bne	149cc <__assert_fail@plt+0x36ac>
   14830:	ldr	r3, [fp, #-44]	; 0xffffffd4
   14834:	ldr	r4, [fp, #-36]	; 0xffffffdc
   14838:	ldr	lr, [fp, #-32]	; 0xffffffe0
   1483c:	umull	r0, r1, r9, r3
   14840:	umull	r3, r7, r3, r3
   14844:	lsl	r2, r1, #1
   14848:	adds	r7, r7, r0, lsl #1
   1484c:	orr	r2, r2, r0, lsr #31
   14850:	adc	ip, r2, #0
   14854:	mov	r2, r6
   14858:	umull	r6, r5, r3, r6
   1485c:	mla	r3, r3, r4, r5
   14860:	mla	r3, r7, r2, r3
   14864:	umull	r5, r4, r6, lr
   14868:	umull	r6, r2, r6, r8
   1486c:	umlal	r5, r4, r3, r8
   14870:	adds	r2, r5, r2
   14874:	adc	r6, r4, #0
   14878:	umull	r5, r4, r3, r8
   1487c:	subs	r2, r2, r5
   14880:	umull	r3, r5, r3, lr
   14884:	sbcs	r2, r6, r4
   14888:	mov	r2, #0
   1488c:	movwcc	r2, #1
   14890:	cmp	r2, #0
   14894:	addne	r5, r5, #1
   14898:	adds	r2, r3, r6
   1489c:	adc	r3, r5, #0
   148a0:	subs	r0, r7, r0
   148a4:	sbcs	r0, ip, r1
   148a8:	umull	r1, r7, r9, r9
   148ac:	mov	r0, #0
   148b0:	movwcc	r0, #1
   148b4:	cmp	r0, #0
   148b8:	addne	r7, r7, #1
   148bc:	adds	r0, r1, ip
   148c0:	adc	r1, r7, #0
   148c4:	subs	r0, r0, r2
   148c8:	mov	r2, #0
   148cc:	sbcs	r1, r1, r3
   148d0:	movwcc	r2, #1
   148d4:	adds	r3, r0, r8
   148d8:	adc	r7, r1, lr
   148dc:	cmp	r2, #0
   148e0:	mov	r2, #0
   148e4:	moveq	r3, r0
   148e8:	ldr	r0, [sp, #44]	; 0x2c
   148ec:	moveq	r7, r1
   148f0:	ldr	r1, [sp, #40]	; 0x28
   148f4:	subs	r0, r3, r0
   148f8:	sbcs	r1, r7, r1
   148fc:	mov	r7, lr
   14900:	movwcc	r2, #1
   14904:	adds	r3, r0, r8
   14908:	adc	r9, r1, lr
   1490c:	cmp	r2, #0
   14910:	mov	r2, #0
   14914:	moveq	r3, r0
   14918:	ldr	r0, [sp, #32]
   1491c:	moveq	r9, r1
   14920:	ldr	r1, [sp, #28]
   14924:	str	r3, [fp, #-44]	; 0xffffffd4
   14928:	subs	r0, r0, r3
   1492c:	sbcs	r1, r1, r9
   14930:	movwcc	r2, #1
   14934:	adds	r4, r0, r8
   14938:	adc	r5, r1, lr
   1493c:	cmp	r2, #0
   14940:	moveq	r5, r1
   14944:	ldr	r1, [sp, #16]
   14948:	cmp	r1, #0
   1494c:	moveq	r7, r5
   14950:	moveq	r5, lr
   14954:	cmp	r2, #0
   14958:	moveq	r4, r0
   1495c:	cmp	r1, #0
   14960:	mov	r6, r4
   14964:	moveq	r6, r8
   14968:	movne	r4, r8
   1496c:	orr	r0, r6, r5
   14970:	cmp	r0, #0
   14974:	beq	14820 <__assert_fail@plt+0x3500>
   14978:	lsrs	r2, r7, #1
   1497c:	rrx	r3, r4
   14980:	mov	r7, r5
   14984:	mov	r4, r6
   14988:	lsrs	r5, r5, #1
   1498c:	rrx	r6, r6
   14990:	tst	r4, #1
   14994:	beq	14980 <__assert_fail@plt+0x3660>
   14998:	subs	r1, r6, r3
   1499c:	sbc	r0, r5, r2
   149a0:	orrs	r6, r1, r0
   149a4:	beq	1481c <__assert_fail@plt+0x34fc>
   149a8:	eor	r7, r1, r0, asr #31
   149ac:	eor	r5, r0, r0, asr #31
   149b0:	and	r1, r1, r0, asr #31
   149b4:	subs	r6, r7, r0, asr #31
   149b8:	sbc	r5, r5, r0, asr #31
   149bc:	and	r0, r0, r0, asr #31
   149c0:	adds	r3, r1, r3
   149c4:	adc	r2, r0, r2
   149c8:	b	14980 <__assert_fail@plt+0x3660>
   149cc:	ldr	r2, [fp, #-32]	; 0xffffffe0
   149d0:	eor	r0, r8, r4
   149d4:	eor	r1, r2, r7
   149d8:	orrs	r0, r0, r1
   149dc:	beq	14bbc <__assert_fail@plt+0x389c>
   149e0:	mov	r1, r2
   149e4:	mov	r0, r8
   149e8:	mov	r2, r4
   149ec:	mov	r3, r7
   149f0:	bl	2ced8 <__assert_fail@plt+0x1bbb8>
   149f4:	mov	r8, r0
   149f8:	str	r1, [fp, #-32]	; 0xffffffe0
   149fc:	mov	r0, r4
   14a00:	mov	r1, r7
   14a04:	bl	15cb8 <__assert_fail@plt+0x4998>
   14a08:	cmp	r0, #0
   14a0c:	beq	14a7c <__assert_fail@plt+0x375c>
   14a10:	ldr	ip, [sp, #8]
   14a14:	ldrb	r2, [ip, #250]	; 0xfa
   14a18:	sub	r3, r2, #1
   14a1c:	cmp	r2, #0
   14a20:	beq	14a9c <__assert_fail@plt+0x377c>
   14a24:	mov	r0, #8
   14a28:	add	lr, r2, #223	; 0xdf
   14a2c:	lsl	r1, r2, #3
   14a30:	str	r2, [fp, #-36]	; 0xffffffdc
   14a34:	str	r3, [sp, #44]	; 0x2c
   14a38:	add	r6, r0, r2, lsl #3
   14a3c:	mov	r2, lr
   14a40:	mov	r0, ip
   14a44:	ldr	r3, [r0, r6]!
   14a48:	ldr	r0, [r0, #4]
   14a4c:	subs	ip, r4, r3
   14a50:	sbcs	r5, r7, r0
   14a54:	bcs	14aa4 <__assert_fail@plt+0x3784>
   14a58:	ldr	ip, [sp, #8]
   14a5c:	sub	r0, r2, #224	; 0xe0
   14a60:	sub	r3, r2, #1
   14a64:	sub	r6, r6, #8
   14a68:	cmp	r0, #0
   14a6c:	mov	r2, r3
   14a70:	bgt	14a40 <__assert_fail@plt+0x3720>
   14a74:	sub	r3, r3, #224	; 0xe0
   14a78:	b	14ad0 <__assert_fail@plt+0x37b0>
   14a7c:	ldr	r2, [sp]
   14a80:	ldr	r3, [sp, #8]
   14a84:	mov	r0, r4
   14a88:	mov	r1, r7
   14a8c:	bl	141e4 <__assert_fail@plt+0x2ec4>
   14a90:	ldr	r4, [fp, #-32]	; 0xffffffe0
   14a94:	ldr	r6, [sp, #48]	; 0x30
   14a98:	b	14b44 <__assert_fail@plt+0x3824>
   14a9c:	ldr	r6, [sp, #48]	; 0x30
   14aa0:	b	14b1c <__assert_fail@plt+0x37fc>
   14aa4:	eor	r3, r3, r4
   14aa8:	eor	r0, r0, r7
   14aac:	orrs	r0, r3, r0
   14ab0:	bne	14ac8 <__assert_fail@plt+0x37a8>
   14ab4:	ldr	r1, [sp, #8]
   14ab8:	ldrb	r0, [r1, r2]
   14abc:	add	r0, r0, #1
   14ac0:	strb	r0, [r1, r2]
   14ac4:	b	14a90 <__assert_fail@plt+0x3770>
   14ac8:	ldr	ip, [sp, #8]
   14acc:	sub	r3, r2, #224	; 0xe0
   14ad0:	ldr	r0, [sp, #44]	; 0x2c
   14ad4:	ldr	r6, [sp, #48]	; 0x30
   14ad8:	cmp	r0, r3
   14adc:	ble	14b18 <__assert_fail@plt+0x37f8>
   14ae0:	add	r0, ip, r1
   14ae4:	sub	r1, r1, #8
   14ae8:	ldr	r2, [r0, #8]
   14aec:	ldr	r5, [r0, #12]
   14af0:	str	r2, [r0, #16]
   14af4:	str	r5, [r0, #20]
   14af8:	mov	r0, ip
   14afc:	ldrb	r2, [r0, lr]!
   14b00:	strb	r2, [r0, #1]
   14b04:	sub	r2, lr, #225	; 0xe1
   14b08:	sub	r0, lr, #1
   14b0c:	cmp	r2, r3
   14b10:	mov	lr, r0
   14b14:	bgt	14ae0 <__assert_fail@plt+0x37c0>
   14b18:	ldr	r2, [fp, #-36]	; 0xffffffdc
   14b1c:	add	r0, r3, #1
   14b20:	add	r1, ip, r0, lsl #3
   14b24:	add	r0, ip, r0
   14b28:	str	r4, [r1, #16]
   14b2c:	str	r7, [r1, #20]
   14b30:	mov	r1, #1
   14b34:	ldr	r4, [fp, #-32]	; 0xffffffe0
   14b38:	strb	r1, [r0, #224]	; 0xe0
   14b3c:	add	r0, r2, #1
   14b40:	strb	r0, [ip, #250]	; 0xfa
   14b44:	mov	r0, r8
   14b48:	mov	r1, r4
   14b4c:	bl	15cb8 <__assert_fail@plt+0x4998>
   14b50:	ldr	r5, [sp, #52]	; 0x34
   14b54:	cmp	r0, #0
   14b58:	bne	14bf0 <__assert_fail@plt+0x38d0>
   14b5c:	ldr	r1, [fp, #-40]	; 0xffffffd8
   14b60:	mov	r0, sl
   14b64:	mov	r2, r8
   14b68:	mov	r3, r4
   14b6c:	bl	2ced8 <__assert_fail@plt+0x1bbb8>
   14b70:	ldr	r0, [sp, #32]
   14b74:	ldr	r1, [sp, #28]
   14b78:	mov	sl, r2
   14b7c:	str	r3, [fp, #-40]	; 0xffffffd8
   14b80:	mov	r2, r8
   14b84:	mov	r3, r4
   14b88:	bl	2ced8 <__assert_fail@plt+0x1bbb8>
   14b8c:	ldr	r0, [fp, #-44]	; 0xffffffd4
   14b90:	str	r2, [sp, #32]
   14b94:	str	r3, [sp, #28]
   14b98:	mov	r1, r9
   14b9c:	mov	r2, r8
   14ba0:	mov	r3, r4
   14ba4:	bl	2ced8 <__assert_fail@plt+0x1bbb8>
   14ba8:	ldr	lr, [sp, #4]
   14bac:	eor	r0, r8, #1
   14bb0:	orrs	r0, r0, r4
   14bb4:	bne	14324 <__assert_fail@plt+0x3004>
   14bb8:	b	14be8 <__assert_fail@plt+0x38c8>
   14bbc:	rsbs	r0, r8, #1
   14bc0:	rscs	r0, r2, #0
   14bc4:	ldr	r0, [sp]
   14bc8:	str	r0, [sp, #4]
   14bcc:	bcc	14208 <__assert_fail@plt+0x2ee8>
   14bd0:	movw	r0, #54415	; 0xd48f
   14bd4:	movw	r1, #54352	; 0xd450
   14bd8:	movw	r3, #54752	; 0xd5e0
   14bdc:	movw	r2, #1466	; 0x5ba
   14be0:	movt	r0, #2
   14be4:	b	14d08 <__assert_fail@plt+0x39e8>
   14be8:	sub	sp, fp, #28
   14bec:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14bf0:	ldr	ip, [sp, #8]
   14bf4:	ldrb	lr, [ip, #250]	; 0xfa
   14bf8:	sub	r1, lr, #1
   14bfc:	cmp	lr, #0
   14c00:	beq	14c54 <__assert_fail@plt+0x3934>
   14c04:	ldr	r0, [fp, #-32]	; 0xffffffe0
   14c08:	mov	r2, #8
   14c0c:	add	r7, lr, #223	; 0xdf
   14c10:	add	r3, r2, lr, lsl #3
   14c14:	mov	r6, ip
   14c18:	ldr	r2, [r6, r3]!
   14c1c:	ldr	r6, [r6, #4]
   14c20:	subs	r5, r8, r2
   14c24:	sbcs	r5, r0, r6
   14c28:	bcs	14c5c <__assert_fail@plt+0x393c>
   14c2c:	sub	r2, r7, #1
   14c30:	sub	r7, r7, #224	; 0xe0
   14c34:	sub	r3, r3, #8
   14c38:	cmp	r7, #0
   14c3c:	mov	r7, r2
   14c40:	bgt	14c14 <__assert_fail@plt+0x38f4>
   14c44:	sub	r2, r2, #224	; 0xe0
   14c48:	cmp	r1, r2
   14c4c:	bgt	14c8c <__assert_fail@plt+0x396c>
   14c50:	b	14cc4 <__assert_fail@plt+0x39a4>
   14c54:	ldr	r0, [fp, #-32]	; 0xffffffe0
   14c58:	b	14cc8 <__assert_fail@plt+0x39a8>
   14c5c:	eor	r2, r2, r8
   14c60:	eor	r3, r6, r0
   14c64:	orrs	r2, r2, r3
   14c68:	bne	14c80 <__assert_fail@plt+0x3960>
   14c6c:	ldrb	r0, [ip, r7]
   14c70:	add	r0, r0, #1
   14c74:	strb	r0, [ip, r7]
   14c78:	sub	sp, fp, #28
   14c7c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14c80:	sub	r2, r7, #224	; 0xe0
   14c84:	cmp	r1, r2
   14c88:	ble	14cc4 <__assert_fail@plt+0x39a4>
   14c8c:	lsl	r1, lr, #3
   14c90:	add	r3, lr, #223	; 0xdf
   14c94:	add	r7, ip, r1
   14c98:	sub	r1, r1, #8
   14c9c:	ldrd	r4, [r7, #8]
   14ca0:	strd	r4, [r7, #16]
   14ca4:	mov	r7, ip
   14ca8:	ldrb	r6, [r7, r3]!
   14cac:	strb	r6, [r7, #1]
   14cb0:	sub	r7, r3, #1
   14cb4:	sub	r3, r3, #225	; 0xe1
   14cb8:	cmp	r3, r2
   14cbc:	mov	r3, r7
   14cc0:	bgt	14c94 <__assert_fail@plt+0x3974>
   14cc4:	mov	r1, r2
   14cc8:	add	r1, r1, #1
   14ccc:	add	r2, ip, r1, lsl #3
   14cd0:	add	r1, ip, r1
   14cd4:	str	r8, [r2, #16]
   14cd8:	str	r0, [r2, #20]
   14cdc:	mov	r2, #1
   14ce0:	add	r0, lr, #1
   14ce4:	strb	r2, [r1, #224]	; 0xe0
   14ce8:	strb	r0, [ip, #250]	; 0xfa
   14cec:	sub	sp, fp, #28
   14cf0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14cf4:	movw	r0, #54826	; 0xd62a
   14cf8:	movw	r1, #54352	; 0xd450
   14cfc:	movw	r3, #54752	; 0xd5e0
   14d00:	mov	r2, #1472	; 0x5c0
   14d04:	movt	r0, #2
   14d08:	movt	r1, #2
   14d0c:	movt	r3, #2
   14d10:	bl	11320 <__assert_fail@plt>
   14d14:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14d18:	add	fp, sp, #28
   14d1c:	sub	sp, sp, #204	; 0xcc
   14d20:	mov	sl, r3
   14d24:	subs	r3, r0, #2
   14d28:	mov	r8, #0
   14d2c:	str	r0, [fp, #-84]	; 0xffffffac
   14d30:	mov	r4, #0
   14d34:	mov	lr, r2
   14d38:	mov	r2, #0
   14d3c:	mov	r5, #0
   14d40:	mov	ip, #0
   14d44:	str	r1, [fp, #-76]	; 0xffffffb4
   14d48:	sbcs	r3, r1, #0
   14d4c:	mov	r3, #127	; 0x7f
   14d50:	movwcc	r8, #1
   14d54:	rsbs	r0, r0, #1
   14d58:	rscs	r0, r1, #0
   14d5c:	movwcc	r4, #1
   14d60:	cmp	r4, #0
   14d64:	movwne	r3, #63	; 0x3f
   14d68:	b	14da8 <__assert_fail@plt+0x3a88>
   14d6c:	subs	r3, r4, r0
   14d70:	sbc	r7, r5, r6
   14d74:	subs	r4, r3, #1
   14d78:	sbc	r5, r7, #0
   14d7c:	subs	r8, r8, lr
   14d80:	sbcs	ip, r2, sl
   14d84:	mov	r2, #0
   14d88:	movwcc	r2, #1
   14d8c:	cmp	r2, #0
   14d90:	moveq	r4, r3
   14d94:	moveq	r5, r7
   14d98:	subs	r3, r1, #1
   14d9c:	sbc	r2, r9, #0
   14da0:	orrs	r0, r1, r9
   14da4:	beq	14e0c <__assert_fail@plt+0x3aec>
   14da8:	mov	r1, r3
   14dac:	lsl	r3, r5, #1
   14db0:	ldr	r0, [fp, #-84]	; 0xffffffac
   14db4:	ldr	r6, [fp, #-76]	; 0xffffffb4
   14db8:	mov	r9, r2
   14dbc:	lsl	r2, ip, #1
   14dc0:	orr	r5, r3, r4, lsr #31
   14dc4:	lsl	r3, r4, #1
   14dc8:	orr	r2, r2, r8, lsr #31
   14dcc:	lsl	r8, r8, #1
   14dd0:	orr	r4, r3, ip, lsr #31
   14dd4:	subs	r3, r0, r4
   14dd8:	sbcs	r3, r6, r5
   14ddc:	bcc	14d6c <__assert_fail@plt+0x3a4c>
   14de0:	subs	r3, r8, lr
   14de4:	sbcs	r3, r2, sl
   14de8:	bcc	14e04 <__assert_fail@plt+0x3ae4>
   14dec:	ldr	r0, [fp, #-84]	; 0xffffffac
   14df0:	ldr	r6, [fp, #-76]	; 0xffffffb4
   14df4:	eor	r3, r4, r0
   14df8:	eor	r7, r5, r6
   14dfc:	orrs	r3, r3, r7
   14e00:	beq	14d6c <__assert_fail@plt+0x3a4c>
   14e04:	mov	ip, r2
   14e08:	b	14d98 <__assert_fail@plt+0x3a78>
   14e0c:	lsl	r0, r5, #1
   14e10:	rsbs	r1, r8, r8, lsl #1
   14e14:	ldr	r3, [fp, #-84]	; 0xffffffac
   14e18:	ldr	r6, [fp, #-76]	; 0xffffffb4
   14e1c:	str	sl, [fp, #-108]	; 0xffffff94
   14e20:	lsl	r7, r8, #1
   14e24:	orr	r2, r0, r4, lsr #31
   14e28:	lsl	r0, ip, #1
   14e2c:	orr	r0, r0, r8, lsr #31
   14e30:	str	r2, [fp, #-36]	; 0xffffffdc
   14e34:	sbcs	r1, r0, ip
   14e38:	mov	r1, #0
   14e3c:	movwcc	r1, #1
   14e40:	orr	sl, r1, r4, lsl #1
   14e44:	rsbs	r1, r3, #0
   14e48:	str	r1, [fp, #-88]	; 0xffffffa8
   14e4c:	rsc	r1, r6, #0
   14e50:	subs	r3, r3, sl
   14e54:	str	sl, [fp, #-40]	; 0xffffffd8
   14e58:	str	r1, [fp, #-80]	; 0xffffffb0
   14e5c:	sbcs	r3, r6, r2
   14e60:	bcc	14e94 <__assert_fail@plt+0x3b74>
   14e64:	subs	r3, r7, lr
   14e68:	ldr	r3, [fp, #-108]	; 0xffffff94
   14e6c:	str	r7, [fp, #-112]	; 0xffffff90
   14e70:	sbcs	r3, r0, r3
   14e74:	bcc	14ef8 <__assert_fail@plt+0x3bd8>
   14e78:	ldr	r3, [fp, #-84]	; 0xffffffac
   14e7c:	ldr	r6, [fp, #-76]	; 0xffffffb4
   14e80:	eor	r3, sl, r3
   14e84:	eor	r7, r2, r6
   14e88:	orrs	r3, r3, r7
   14e8c:	ldr	r7, [fp, #-112]	; 0xffffff90
   14e90:	bne	14ef8 <__assert_fail@plt+0x3bd8>
   14e94:	ldr	r1, [fp, #-88]	; 0xffffffa8
   14e98:	mov	r9, r0
   14e9c:	ldr	r0, [fp, #-80]	; 0xffffffb0
   14ea0:	mov	r6, r7
   14ea4:	subs	r3, r1, #1
   14ea8:	mov	r1, #0
   14eac:	sbc	r7, r0, #0
   14eb0:	subs	r6, r6, lr
   14eb4:	mov	r0, r9
   14eb8:	mov	r9, lr
   14ebc:	str	r6, [fp, #-112]	; 0xffffff90
   14ec0:	ldr	r6, [fp, #-108]	; 0xffffff94
   14ec4:	sbcs	r0, r0, r6
   14ec8:	str	r0, [sp, #116]	; 0x74
   14ecc:	ldr	r0, [fp, #-80]	; 0xffffffb0
   14ed0:	movwcc	r1, #1
   14ed4:	cmp	r1, #0
   14ed8:	moveq	r7, r0
   14edc:	ldr	r0, [fp, #-88]	; 0xffffffa8
   14ee0:	moveq	r3, r0
   14ee4:	adds	sl, r3, sl
   14ee8:	adc	r2, r7, r2
   14eec:	str	sl, [fp, #-40]	; 0xffffffd8
   14ef0:	str	r2, [fp, #-36]	; 0xffffffdc
   14ef4:	b	14f04 <__assert_fail@plt+0x3be4>
   14ef8:	ldr	r6, [fp, #-108]	; 0xffffff94
   14efc:	str	r0, [sp, #116]	; 0x74
   14f00:	mov	r9, lr
   14f04:	eor	r0, r9, #1
   14f08:	mov	r3, r6
   14f0c:	str	sl, [fp, #-56]	; 0xffffffc8
   14f10:	str	sl, [sp, #80]	; 0x50
   14f14:	str	sl, [fp, #-48]	; 0xffffffd0
   14f18:	str	r2, [fp, #-52]	; 0xffffffcc
   14f1c:	str	r2, [sp, #68]	; 0x44
   14f20:	str	r2, [fp, #-44]	; 0xffffffd4
   14f24:	orrs	r0, r0, r6
   14f28:	ldreq	r0, [fp, #-76]	; 0xffffffb4
   14f2c:	ldreq	r1, [fp, #-84]	; 0xffffffac
   14f30:	orrseq	r0, r1, r0
   14f34:	beq	15b40 <__assert_fail@plt+0x4820>
   14f38:	ldr	r0, [fp, #8]
   14f3c:	ldr	r1, [sp, #80]	; 0x50
   14f40:	str	r8, [sp, #104]	; 0x68
   14f44:	ldr	r9, [fp, #-76]	; 0xffffffb4
   14f48:	ldr	r8, [fp, #-84]	; 0xffffffac
   14f4c:	str	ip, [sp, #92]	; 0x5c
   14f50:	str	r5, [sp, #96]	; 0x60
   14f54:	str	r4, [sp, #100]	; 0x64
   14f58:	add	r0, r0, #1
   14f5c:	str	r1, [sp, #88]	; 0x58
   14f60:	str	r1, [sp, #112]	; 0x70
   14f64:	ldr	r1, [fp, #-112]	; 0xffffff90
   14f68:	str	r0, [sp, #48]	; 0x30
   14f6c:	ldr	r0, [sp, #68]	; 0x44
   14f70:	str	r1, [sp, #76]	; 0x4c
   14f74:	str	r1, [fp, #-104]	; 0xffffff98
   14f78:	str	r0, [sp, #84]	; 0x54
   14f7c:	str	r0, [fp, #-100]	; 0xffffff9c
   14f80:	ldr	r0, [sp, #116]	; 0x74
   14f84:	str	r0, [sp, #72]	; 0x48
   14f88:	str	r0, [fp, #-96]	; 0xffffffa0
   14f8c:	mov	r0, #1
   14f90:	str	r0, [sp, #108]	; 0x6c
   14f94:	mov	r0, #1
   14f98:	str	r0, [sp, #52]	; 0x34
   14f9c:	movw	r1, #1838	; 0x72e
   14fa0:	str	r3, [fp, #-108]	; 0xffffff94
   14fa4:	ubfx	r0, lr, #1, #7
   14fa8:	ldr	r7, [fp, #-108]	; 0xffffff94
   14fac:	str	lr, [fp, #-80]	; 0xffffffb0
   14fb0:	str	r8, [fp, #-84]	; 0xffffffac
   14fb4:	movt	r1, #3
   14fb8:	ldrb	r0, [r1, r0]
   14fbc:	umull	r1, r2, lr, r0
   14fc0:	mla	r2, r3, r0, r2
   14fc4:	rsbs	r1, r1, #2
   14fc8:	umull	r1, r3, r1, r0
   14fcc:	rsc	r2, r2, #0
   14fd0:	str	r2, [fp, #-76]	; 0xffffffb4
   14fd4:	umull	r5, r4, r1, lr
   14fd8:	rsbs	r5, r5, #2
   14fdc:	umull	r2, r6, r1, r5
   14fe0:	umull	sl, ip, r2, lr
   14fe4:	mla	ip, r2, r7, ip
   14fe8:	ldr	r7, [fp, #-76]	; 0xffffffb4
   14fec:	str	r9, [fp, #-76]	; 0xffffffb4
   14ff0:	mla	r0, r7, r0, r3
   14ff4:	ldr	r3, [fp, #-108]	; 0xffffff94
   14ff8:	mla	r3, r1, r3, r4
   14ffc:	ldr	r4, [fp, #-108]	; 0xffffff94
   15000:	mla	r3, r0, lr, r3
   15004:	rsc	r3, r3, #0
   15008:	mla	r1, r1, r3, r6
   1500c:	rsbs	r3, sl, #2
   15010:	mov	sl, r4
   15014:	ldr	r6, [sp, #116]	; 0x74
   15018:	ldr	r4, [fp, #-104]	; 0xffffff98
   1501c:	mla	r0, r0, r5, r1
   15020:	umull	r7, r5, r2, r3
   15024:	mla	r1, r0, lr, ip
   15028:	str	r7, [fp, #-88]	; 0xffffffa8
   1502c:	ldr	r7, [sp, #112]	; 0x70
   15030:	rsc	r1, r1, #0
   15034:	mla	r1, r2, r1, r5
   15038:	ldr	r5, [fp, #-112]	; 0xffffff90
   1503c:	ldr	r2, [sp, #80]	; 0x50
   15040:	mla	r0, r0, r3, r1
   15044:	ldr	r1, [sp, #52]	; 0x34
   15048:	str	r0, [fp, #-92]	; 0xffffffa4
   1504c:	rsbs	r0, r8, #0
   15050:	str	r0, [sp, #64]	; 0x40
   15054:	rsc	r0, r9, #0
   15058:	str	r0, [sp, #60]	; 0x3c
   1505c:	str	r1, [sp, #56]	; 0x38
   15060:	b	1509c <__assert_fail@plt+0x3d7c>
   15064:	ldr	r2, [sp, #80]	; 0x50
   15068:	ldr	r3, [sp, #68]	; 0x44
   1506c:	ldr	r0, [fp, #-104]	; 0xffffff98
   15070:	ldr	r1, [fp, #-96]	; 0xffffffa0
   15074:	ldr	r6, [sp, #116]	; 0x74
   15078:	ldr	r5, [fp, #-112]	; 0xffffff90
   1507c:	ldr	r7, [sp, #112]	; 0x70
   15080:	ldr	r8, [fp, #-84]	; 0xffffffac
   15084:	subs	r4, r4, #1
   15088:	str	r3, [sp, #68]	; 0x44
   1508c:	str	r1, [fp, #-96]	; 0xffffffa0
   15090:	str	r4, [sp, #108]	; 0x6c
   15094:	mov	r4, r0
   15098:	beq	152cc <__assert_fail@plt+0x3fac>
   1509c:	ldr	r1, [fp, #-88]	; 0xffffffa8
   150a0:	ldr	r0, [fp, #-80]	; 0xffffffb0
   150a4:	str	sl, [sp, #36]	; 0x24
   150a8:	ldr	r3, [fp, #-100]	; 0xffffff9c
   150ac:	str	r2, [sp, #80]	; 0x50
   150b0:	mov	r2, r7
   150b4:	str	r4, [fp, #-104]	; 0xffffff98
   150b8:	str	r1, [sp, #40]	; 0x28
   150bc:	ldr	r1, [fp, #-92]	; 0xffffffa4
   150c0:	str	r0, [sp, #32]
   150c4:	str	r1, [sp, #44]	; 0x2c
   150c8:	stm	sp, {r5, r6, r7}
   150cc:	str	r6, [sp, #20]
   150d0:	ldr	r6, [fp, #-76]	; 0xffffffb4
   150d4:	str	r5, [sp, #16]
   150d8:	mov	r5, r0
   150dc:	sub	r0, fp, #72	; 0x48
   150e0:	str	r3, [sp, #12]
   150e4:	str	r8, [sp, #24]
   150e8:	str	r6, [sp, #28]
   150ec:	bl	17060 <__assert_fail@plt+0x5d40>
   150f0:	ldr	r7, [fp, #8]
   150f4:	ldr	r2, [fp, #-72]	; 0xffffffb8
   150f8:	ldr	r3, [fp, #-68]	; 0xffffffbc
   150fc:	ldr	ip, [sp, #104]	; 0x68
   15100:	adds	lr, r0, r7
   15104:	adcs	r9, r1, #0
   15108:	adcs	r4, r2, #0
   1510c:	ldr	r2, [sp, #100]	; 0x64
   15110:	adc	r7, r3, #0
   15114:	subs	r0, r8, r4
   15118:	sbcs	r0, r6, r7
   1511c:	bcc	1513c <__assert_fail@plt+0x3e1c>
   15120:	subs	r0, lr, r5
   15124:	sbcs	r0, r9, sl
   15128:	bcc	15174 <__assert_fail@plt+0x3e54>
   1512c:	eor	r0, r4, r8
   15130:	eor	r1, r7, r6
   15134:	orrs	r0, r0, r1
   15138:	bne	15174 <__assert_fail@plt+0x3e54>
   1513c:	ldr	r6, [sp, #64]	; 0x40
   15140:	mov	r3, sl
   15144:	ldr	sl, [sp, #60]	; 0x3c
   15148:	subs	r0, r6, #1
   1514c:	sbc	r1, sl, #0
   15150:	subs	lr, lr, r5
   15154:	sbcs	r9, r9, r3
   15158:	mov	r3, #0
   1515c:	movwcc	r3, #1
   15160:	cmp	r3, #0
   15164:	moveq	r0, r6
   15168:	moveq	r1, sl
   1516c:	adds	r4, r0, r4
   15170:	adc	r7, r1, r7
   15174:	ldr	r0, [sp, #88]	; 0x58
   15178:	str	r4, [sp, #112]	; 0x70
   1517c:	ldr	r1, [sp, #72]	; 0x48
   15180:	str	r7, [fp, #-100]	; 0xffffff9c
   15184:	str	lr, [fp, #-112]	; 0xffffff90
   15188:	str	r9, [sp, #116]	; 0x74
   1518c:	subs	r5, r0, r4
   15190:	ldr	r0, [sp, #84]	; 0x54
   15194:	sbc	r4, r0, r7
   15198:	ldr	r0, [sp, #76]	; 0x4c
   1519c:	subs	r6, r5, #1
   151a0:	mov	r7, #0
   151a4:	sbc	r3, r4, #0
   151a8:	subs	r0, r0, lr
   151ac:	sbcs	r1, r1, r9
   151b0:	movwcc	r7, #1
   151b4:	cmp	r7, #0
   151b8:	moveq	r3, r4
   151bc:	moveq	r6, r5
   151c0:	cmn	r3, #1
   151c4:	ble	151e0 <__assert_fail@plt+0x3ec0>
   151c8:	ldr	r4, [fp, #-108]	; 0xffffff94
   151cc:	mov	r9, r8
   151d0:	ldr	r5, [fp, #-80]	; 0xffffffb0
   151d4:	ldr	r8, [fp, #-76]	; 0xffffffb4
   151d8:	mov	sl, r4
   151dc:	b	1520c <__assert_fail@plt+0x3eec>
   151e0:	adds	r7, r6, r8
   151e4:	mov	r9, r8
   151e8:	ldr	r8, [fp, #-76]	; 0xffffffb4
   151ec:	ldr	r5, [fp, #-80]	; 0xffffffb0
   151f0:	ldr	r4, [fp, #-108]	; 0xffffff94
   151f4:	adc	r3, r3, r8
   151f8:	adds	r0, r0, r5
   151fc:	mov	sl, r4
   15200:	adcs	r1, r1, r4
   15204:	adcs	r6, r7, #0
   15208:	adc	r3, r3, #0
   1520c:	ldr	r7, [fp, #-88]	; 0xffffffa8
   15210:	str	r3, [sp, #12]
   15214:	add	r3, sp, #16
   15218:	str	r5, [sp, #32]
   1521c:	str	sl, [sp, #36]	; 0x24
   15220:	str	ip, [sp]
   15224:	str	r6, [sp, #8]
   15228:	str	r7, [sp, #40]	; 0x28
   1522c:	ldr	r7, [fp, #-92]	; 0xffffffa4
   15230:	str	r7, [sp, #44]	; 0x2c
   15234:	ldr	r7, [sp, #92]	; 0x5c
   15238:	str	r7, [sp, #4]
   1523c:	stm	r3, {r0, r1, r9}
   15240:	ldr	r3, [sp, #96]	; 0x60
   15244:	sub	r0, fp, #72	; 0x48
   15248:	str	r8, [sp, #28]
   1524c:	bl	17060 <__assert_fail@plt+0x5d40>
   15250:	ldr	r4, [sp, #108]	; 0x6c
   15254:	ldr	r2, [fp, #-72]	; 0xffffffb8
   15258:	ldr	r3, [fp, #-68]	; 0xffffffbc
   1525c:	str	r0, [sp, #104]	; 0x68
   15260:	str	r1, [sp, #92]	; 0x5c
   15264:	and	r7, r4, #31
   15268:	str	r2, [sp, #100]	; 0x64
   1526c:	str	r3, [sp, #96]	; 0x60
   15270:	cmp	r7, #1
   15274:	bne	15064 <__assert_fail@plt+0x3d44>
   15278:	stm	sp, {r0, r1, r9}
   1527c:	sub	r0, fp, #64	; 0x40
   15280:	str	r8, [sp, #12]
   15284:	str	r5, [sp, #16]
   15288:	str	sl, [sp, #20]
   1528c:	bl	1761c <__assert_fail@plt+0x62fc>
   15290:	ldr	r6, [sp, #116]	; 0x74
   15294:	ldr	r5, [fp, #-112]	; 0xffffff90
   15298:	ldr	r7, [sp, #112]	; 0x70
   1529c:	eor	r0, r0, #1
   152a0:	orrs	r0, r0, r1
   152a4:	bne	15444 <__assert_fail@plt+0x4124>
   152a8:	ldr	r0, [fp, #-64]	; 0xffffffc0
   152ac:	ldr	r1, [fp, #-60]	; 0xffffffc4
   152b0:	ldr	r3, [fp, #-100]	; 0xffffff9c
   152b4:	mov	r2, r7
   152b8:	orrs	r0, r0, r1
   152bc:	mov	r0, r5
   152c0:	mov	r1, r6
   152c4:	beq	15080 <__assert_fail@plt+0x3d60>
   152c8:	b	15444 <__assert_fail@plt+0x4124>
   152cc:	ldr	r3, [sp, #56]	; 0x38
   152d0:	ldr	r0, [fp, #-100]	; 0xffffff9c
   152d4:	mov	r2, r7
   152d8:	mov	r4, r5
   152dc:	str	r7, [sp, #88]	; 0x58
   152e0:	str	r6, [fp, #-96]	; 0xffffffa0
   152e4:	str	r5, [sp, #76]	; 0x4c
   152e8:	str	r6, [sp, #72]	; 0x48
   152ec:	lsl	r1, r3, #1
   152f0:	cmp	r3, #0
   152f4:	str	r0, [sp, #68]	; 0x44
   152f8:	str	r0, [sp, #84]	; 0x54
   152fc:	str	r3, [sp, #108]	; 0x6c
   15300:	beq	1505c <__assert_fail@plt+0x3d3c>
   15304:	mov	r8, r3
   15308:	ldr	r3, [fp, #-100]	; 0xffffff9c
   1530c:	ldr	r9, [fp, #-80]	; 0xffffffb0
   15310:	ldr	ip, [fp, #-76]	; 0xffffffb4
   15314:	mov	r2, r7
   15318:	mov	r4, r5
   1531c:	str	r1, [sp, #52]	; 0x34
   15320:	str	r6, [fp, #-96]	; 0xffffffa0
   15324:	b	15368 <__assert_fail@plt+0x4048>
   15328:	ldr	lr, [sp, #64]	; 0x40
   1532c:	ldr	r7, [sp, #60]	; 0x3c
   15330:	mov	r5, #0
   15334:	subs	r0, lr, #1
   15338:	sbc	r1, r7, #0
   1533c:	subs	r4, r4, r9
   15340:	sbcs	r6, r6, sl
   15344:	movwcc	r5, #1
   15348:	str	r6, [fp, #-96]	; 0xffffffa0
   1534c:	cmp	r5, #0
   15350:	moveq	r0, lr
   15354:	moveq	r1, r7
   15358:	adds	r2, r0, r2
   1535c:	adc	r3, r1, r3
   15360:	subs	r8, r8, #1
   15364:	beq	153fc <__assert_fail@plt+0x40dc>
   15368:	ldr	r0, [fp, #-88]	; 0xffffffa8
   1536c:	ldr	r5, [fp, #-84]	; 0xffffffac
   15370:	str	r9, [sp, #32]
   15374:	str	sl, [sp, #36]	; 0x24
   15378:	str	r4, [sp]
   1537c:	str	r0, [sp, #40]	; 0x28
   15380:	ldr	r0, [fp, #-92]	; 0xffffffa4
   15384:	str	r0, [sp, #44]	; 0x2c
   15388:	ldr	r0, [fp, #-96]	; 0xffffffa0
   1538c:	stmib	sp, {r0, r2, r3, r4}
   15390:	str	r0, [sp, #20]
   15394:	sub	r0, fp, #72	; 0x48
   15398:	str	r5, [sp, #24]
   1539c:	str	ip, [sp, #28]
   153a0:	bl	17060 <__assert_fail@plt+0x5d40>
   153a4:	ldr	r6, [fp, #8]
   153a8:	ldr	r2, [fp, #-72]	; 0xffffffb8
   153ac:	ldr	r3, [fp, #-68]	; 0xffffffbc
   153b0:	ldr	ip, [fp, #-76]	; 0xffffffb4
   153b4:	adds	r4, r0, r6
   153b8:	adcs	r6, r1, #0
   153bc:	adcs	r2, r2, #0
   153c0:	adc	r3, r3, #0
   153c4:	subs	r0, r5, r2
   153c8:	sbcs	r0, ip, r3
   153cc:	bcc	15328 <__assert_fail@plt+0x4008>
   153d0:	subs	r0, r4, r9
   153d4:	str	r6, [fp, #-96]	; 0xffffffa0
   153d8:	sbcs	r0, r6, sl
   153dc:	bcc	15360 <__assert_fail@plt+0x4040>
   153e0:	ldr	r0, [fp, #-84]	; 0xffffffac
   153e4:	ldr	r6, [fp, #-96]	; 0xffffffa0
   153e8:	eor	r1, r3, ip
   153ec:	eor	r0, r2, r0
   153f0:	orrs	r0, r0, r1
   153f4:	beq	15328 <__assert_fail@plt+0x4008>
   153f8:	b	15360 <__assert_fail@plt+0x4040>
   153fc:	ldr	r0, [sp, #112]	; 0x70
   15400:	ldr	r6, [fp, #-96]	; 0xffffffa0
   15404:	ldr	r8, [fp, #-84]	; 0xffffffac
   15408:	ldr	r1, [sp, #52]	; 0x34
   1540c:	mov	r7, r2
   15410:	str	r3, [sp, #68]	; 0x44
   15414:	mov	r5, r4
   15418:	str	r0, [sp, #88]	; 0x58
   1541c:	ldr	r0, [fp, #-100]	; 0xffffff9c
   15420:	str	r3, [fp, #-100]	; 0xffffff9c
   15424:	str	r0, [sp, #84]	; 0x54
   15428:	ldr	r0, [sp, #56]	; 0x38
   1542c:	str	r0, [sp, #108]	; 0x6c
   15430:	ldr	r0, [fp, #-112]	; 0xffffff90
   15434:	str	r0, [sp, #76]	; 0x4c
   15438:	ldr	r0, [sp, #116]	; 0x74
   1543c:	str	r0, [sp, #72]	; 0x48
   15440:	b	1505c <__assert_fail@plt+0x3d3c>
   15444:	ldr	r0, [sp, #88]	; 0x58
   15448:	ldr	r2, [sp, #80]	; 0x50
   1544c:	ldr	r8, [sp, #68]	; 0x44
   15450:	ldr	sl, [fp, #-96]	; 0xffffffa0
   15454:	str	r7, [fp, #-40]	; 0xffffffd8
   15458:	str	r0, [fp, #-48]	; 0xffffffd0
   1545c:	ldr	r0, [fp, #-100]	; 0xffffff9c
   15460:	str	r2, [fp, #-56]	; 0xffffffc8
   15464:	str	r8, [fp, #-52]	; 0xffffffcc
   15468:	str	r0, [fp, #-36]	; 0xffffffdc
   1546c:	ldr	r0, [sp, #84]	; 0x54
   15470:	str	r0, [fp, #-44]	; 0xffffffd4
   15474:	b	154c0 <__assert_fail@plt+0x41a0>
   15478:	ldr	r7, [fp, #-108]	; 0xffffff94
   1547c:	ldr	r5, [fp, #-80]	; 0xffffffb0
   15480:	ldr	r4, [fp, #-76]	; 0xffffffb4
   15484:	ldr	r6, [fp, #-84]	; 0xffffffac
   15488:	stm	sp, {r0, r1, r6}
   1548c:	add	r0, sp, #12
   15490:	stm	r0, {r4, r5, r7}
   15494:	sub	r0, fp, #64	; 0x40
   15498:	bl	1761c <__assert_fail@plt+0x62fc>
   1549c:	ldr	r4, [fp, #-64]	; 0xffffffc0
   154a0:	ldr	r5, [fp, #-60]	; 0xffffffc4
   154a4:	mov	r7, r0
   154a8:	eor	r0, r0, #1
   154ac:	mov	r6, r1
   154b0:	mov	r2, r9
   154b4:	orrs	r0, r0, r1
   154b8:	orrseq	r0, r4, r5
   154bc:	bne	15610 <__assert_fail@plt+0x42f0>
   154c0:	ldr	r0, [fp, #-88]	; 0xffffffa8
   154c4:	ldr	r4, [fp, #-108]	; 0xffffff94
   154c8:	ldr	r5, [fp, #-80]	; 0xffffffb0
   154cc:	ldr	r6, [fp, #-76]	; 0xffffffb4
   154d0:	mov	r3, r8
   154d4:	str	r0, [sp, #40]	; 0x28
   154d8:	ldr	r0, [fp, #-92]	; 0xffffffa4
   154dc:	mov	r9, r4
   154e0:	str	r4, [sp, #36]	; 0x24
   154e4:	ldr	r4, [fp, #-84]	; 0xffffffac
   154e8:	str	r5, [sp, #32]
   154ec:	str	r0, [sp, #44]	; 0x2c
   154f0:	ldr	r0, [fp, #-104]	; 0xffffff98
   154f4:	stm	sp, {r0, sl}
   154f8:	str	r0, [sp, #16]
   154fc:	sub	r0, fp, #72	; 0x48
   15500:	str	r2, [sp, #8]
   15504:	str	r8, [sp, #12]
   15508:	str	sl, [sp, #20]
   1550c:	str	r4, [sp, #24]
   15510:	str	r6, [sp, #28]
   15514:	bl	17060 <__assert_fail@plt+0x5d40>
   15518:	ldr	r7, [fp, #8]
   1551c:	ldr	r2, [fp, #-72]	; 0xffffffb8
   15520:	ldr	r3, [fp, #-68]	; 0xffffffbc
   15524:	adds	lr, r0, r7
   15528:	adcs	sl, r1, #0
   1552c:	adcs	ip, r2, #0
   15530:	adc	r8, r3, #0
   15534:	subs	r0, r4, ip
   15538:	sbcs	r0, r6, r8
   1553c:	bcc	15564 <__assert_fail@plt+0x4244>
   15540:	subs	r0, lr, r5
   15544:	sbcs	r0, sl, r9
   15548:	bcc	15598 <__assert_fail@plt+0x4278>
   1554c:	ldr	r0, [fp, #-84]	; 0xffffffac
   15550:	ldr	r1, [fp, #-76]	; 0xffffffb4
   15554:	eor	r0, ip, r0
   15558:	eor	r1, r8, r1
   1555c:	orrs	r0, r0, r1
   15560:	bne	15598 <__assert_fail@plt+0x4278>
   15564:	ldr	r3, [sp, #64]	; 0x40
   15568:	ldr	r4, [sp, #60]	; 0x3c
   1556c:	mov	r2, #0
   15570:	subs	r0, r3, #1
   15574:	sbc	r1, r4, #0
   15578:	subs	lr, lr, r5
   1557c:	sbcs	sl, sl, r9
   15580:	movwcc	r2, #1
   15584:	cmp	r2, #0
   15588:	moveq	r0, r3
   1558c:	moveq	r1, r4
   15590:	adds	ip, r0, ip
   15594:	adc	r8, r1, r8
   15598:	ldr	r0, [sp, #88]	; 0x58
   1559c:	ldr	r1, [sp, #72]	; 0x48
   155a0:	mov	r4, #0
   155a4:	mov	r9, ip
   155a8:	str	lr, [fp, #-104]	; 0xffffff98
   155ac:	subs	r7, r0, ip
   155b0:	ldr	r0, [sp, #84]	; 0x54
   155b4:	sbc	r5, r0, r8
   155b8:	ldr	r0, [sp, #76]	; 0x4c
   155bc:	subs	r2, r7, #1
   155c0:	sbc	r3, r5, #0
   155c4:	subs	r0, r0, lr
   155c8:	sbcs	r1, r1, sl
   155cc:	movwcc	r4, #1
   155d0:	cmp	r4, #0
   155d4:	moveq	r3, r5
   155d8:	moveq	r2, r7
   155dc:	cmn	r3, #1
   155e0:	bgt	15478 <__assert_fail@plt+0x4158>
   155e4:	ldr	r6, [fp, #-84]	; 0xffffffac
   155e8:	ldr	r4, [fp, #-76]	; 0xffffffb4
   155ec:	ldr	r5, [fp, #-80]	; 0xffffffb0
   155f0:	ldr	r7, [fp, #-108]	; 0xffffff94
   155f4:	adds	r2, r2, r6
   155f8:	adc	r3, r3, r4
   155fc:	adds	r0, r0, r5
   15600:	adcs	r1, r1, r7
   15604:	adcs	r2, r2, #0
   15608:	adc	r3, r3, #0
   1560c:	b	15488 <__assert_fail@plt+0x4168>
   15610:	orrs	r0, r4, r5
   15614:	str	r2, [fp, #-56]	; 0xffffffc8
   15618:	str	r8, [fp, #-52]	; 0xffffffcc
   1561c:	str	r7, [fp, #-88]	; 0xffffffa8
   15620:	bne	159b0 <__assert_fail@plt+0x4690>
   15624:	movw	r1, #1838	; 0x72e
   15628:	str	r2, [sp, #80]	; 0x50
   1562c:	ubfx	r0, r7, #1, #7
   15630:	ldr	lr, [fp, #-108]	; 0xffffff94
   15634:	str	r6, [fp, #-92]	; 0xffffffa4
   15638:	movt	r1, #3
   1563c:	ldrb	r0, [r1, r0]
   15640:	umull	r1, r2, r7, r0
   15644:	mla	r2, r6, r0, r2
   15648:	rsbs	r1, r1, #2
   1564c:	umull	r1, r3, r1, r0
   15650:	rsc	r2, r2, #0
   15654:	mla	r2, r2, r0, r3
   15658:	umull	r0, r3, r1, r7
   1565c:	mla	r3, r1, r6, r3
   15660:	mla	r3, r2, r7, r3
   15664:	rsbs	r7, r0, #2
   15668:	rsc	r0, r3, #0
   1566c:	str	r0, [sp, #68]	; 0x44
   15670:	umull	r5, r0, r1, r7
   15674:	str	r0, [sp, #60]	; 0x3c
   15678:	ldr	r0, [fp, #-88]	; 0xffffffa8
   1567c:	umull	r0, r9, r5, r0
   15680:	rsbs	r3, r0, #2
   15684:	umull	r4, r0, r5, r3
   15688:	str	r0, [sp, #64]	; 0x40
   1568c:	ldr	r0, [fp, #-80]	; 0xffffffb0
   15690:	str	r4, [sp, #52]	; 0x34
   15694:	umull	r6, ip, r4, r0
   15698:	mla	ip, r4, lr, ip
   1569c:	ldr	r4, [sp, #68]	; 0x44
   156a0:	ldr	lr, [sp, #60]	; 0x3c
   156a4:	str	r6, [fp, #-96]	; 0xffffffa0
   156a8:	ldr	r6, [fp, #-92]	; 0xffffffa4
   156ac:	mla	r1, r1, r4, lr
   156b0:	ldr	r4, [sp, #64]	; 0x40
   156b4:	mla	r1, r2, r7, r1
   156b8:	ldr	r7, [fp, #-88]	; 0xffffffa8
   156bc:	mla	r9, r5, r6, r9
   156c0:	mla	r2, r1, r7, r9
   156c4:	rsc	r2, r2, #0
   156c8:	mla	r2, r5, r2, r4
   156cc:	ldr	r4, [fp, #-84]	; 0xffffffac
   156d0:	ldr	r5, [fp, #-76]	; 0xffffffb4
   156d4:	mla	r1, r1, r3, r2
   156d8:	mla	r0, r1, r0, ip
   156dc:	str	r0, [fp, #-108]	; 0xffffff94
   156e0:	mov	r0, #0
   156e4:	str	r0, [fp, #-80]	; 0xffffffb0
   156e8:	subs	r0, r4, r7
   156ec:	sbcs	r0, r5, r6
   156f0:	mov	r0, #0
   156f4:	str	r0, [sp, #68]	; 0x44
   156f8:	bcc	15774 <__assert_fail@plt+0x4454>
   156fc:	ldr	r3, [fp, #-96]	; 0xffffffa0
   15700:	umull	r0, r2, r3, r6
   15704:	ldr	r6, [fp, #-108]	; 0xffffff94
   15708:	umlal	r0, r2, r6, r7
   1570c:	ldr	r7, [fp, #-88]	; 0xffffffa8
   15710:	umull	r3, r7, r3, r7
   15714:	ldr	r3, [fp, #-88]	; 0xffffffa8
   15718:	adds	r0, r0, r7
   1571c:	umull	r3, r7, r6, r3
   15720:	adc	r2, r2, #0
   15724:	subs	r0, r0, r3
   15728:	ldr	r3, [fp, #-92]	; 0xffffffa4
   1572c:	sbcs	r0, r2, r7
   15730:	mov	r0, #0
   15734:	movwcc	r0, #1
   15738:	cmp	r0, #0
   1573c:	umull	r3, r7, r6, r3
   15740:	ldr	r6, [fp, #-92]	; 0xffffffa4
   15744:	addne	r7, r7, #1
   15748:	subs	r0, r4, r2
   1574c:	ldr	r4, [sp, #52]	; 0x34
   15750:	sbc	r2, r5, #0
   15754:	subs	r0, r0, r3
   15758:	umull	r5, r3, r0, r4
   1575c:	mla	r0, r0, r1, r3
   15760:	sbc	r1, r2, r7
   15764:	ldr	r7, [fp, #-88]	; 0xffffffa8
   15768:	mla	r0, r1, r4, r0
   1576c:	str	r5, [fp, #-80]	; 0xffffffb0
   15770:	str	r0, [sp, #68]	; 0x44
   15774:	mov	r0, r7
   15778:	mov	r1, r6
   1577c:	bl	15cb8 <__assert_fail@plt+0x4998>
   15780:	ldr	r4, [fp, #12]
   15784:	cmp	r0, #0
   15788:	beq	157f0 <__assert_fail@plt+0x44d0>
   1578c:	ldrb	lr, [r4, #250]	; 0xfa
   15790:	sub	ip, lr, #1
   15794:	cmp	lr, #0
   15798:	beq	15884 <__assert_fail@plt+0x4564>
   1579c:	mov	r0, #8
   157a0:	add	r5, lr, #223	; 0xdf
   157a4:	lsl	r1, lr, #3
   157a8:	add	r4, r0, lr, lsl #3
   157ac:	mov	r2, r5
   157b0:	ldr	r0, [fp, #12]
   157b4:	ldr	r3, [r0, r4]!
   157b8:	ldr	r0, [r0, #4]
   157bc:	subs	r7, r7, r3
   157c0:	ldr	r7, [fp, #-92]	; 0xffffffa4
   157c4:	sbcs	r7, r7, r0
   157c8:	bcs	15808 <__assert_fail@plt+0x44e8>
   157cc:	ldr	r7, [fp, #-88]	; 0xffffffa8
   157d0:	sub	r0, r2, #224	; 0xe0
   157d4:	sub	r3, r2, #1
   157d8:	sub	r4, r4, #8
   157dc:	cmp	r0, #0
   157e0:	mov	r2, r3
   157e4:	bgt	157b0 <__assert_fail@plt+0x4490>
   157e8:	sub	r3, r3, #224	; 0xe0
   157ec:	b	15838 <__assert_fail@plt+0x4518>
   157f0:	ldr	r2, [sp, #48]	; 0x30
   157f4:	mov	r0, r7
   157f8:	mov	r1, r6
   157fc:	mov	r3, r4
   15800:	bl	141e4 <__assert_fail@plt+0x2ec4>
   15804:	b	158ac <__assert_fail@plt+0x458c>
   15808:	ldr	r4, [fp, #-88]	; 0xffffffa8
   1580c:	eor	r3, r3, r4
   15810:	ldr	r4, [fp, #-92]	; 0xffffffa4
   15814:	eor	r0, r0, r4
   15818:	orrs	r0, r3, r0
   1581c:	bne	15834 <__assert_fail@plt+0x4514>
   15820:	ldr	r4, [fp, #12]
   15824:	ldrb	r0, [r4, r2]
   15828:	add	r0, r0, #1
   1582c:	strb	r0, [r4, r2]
   15830:	b	158ac <__assert_fail@plt+0x458c>
   15834:	sub	r3, r2, #224	; 0xe0
   15838:	ldr	r4, [fp, #12]
   1583c:	cmp	ip, r3
   15840:	ble	1587c <__assert_fail@plt+0x455c>
   15844:	add	r0, r4, r1
   15848:	sub	r1, r1, #8
   1584c:	ldr	r2, [r0, #8]
   15850:	ldr	r7, [r0, #12]
   15854:	str	r2, [r0, #16]
   15858:	str	r7, [r0, #20]
   1585c:	mov	r0, r4
   15860:	ldrb	r2, [r0, r5]!
   15864:	strb	r2, [r0, #1]
   15868:	sub	r2, r5, #225	; 0xe1
   1586c:	sub	r0, r5, #1
   15870:	cmp	r2, r3
   15874:	mov	r5, r0
   15878:	bgt	15844 <__assert_fail@plt+0x4524>
   1587c:	ldr	r7, [fp, #-88]	; 0xffffffa8
   15880:	mov	ip, r3
   15884:	ldr	r2, [fp, #-92]	; 0xffffffa4
   15888:	add	r0, ip, #1
   1588c:	add	r1, r4, r0, lsl #3
   15890:	add	r0, r4, r0
   15894:	str	r7, [r1, #16]
   15898:	str	r2, [r1, #20]
   1589c:	mov	r1, #1
   158a0:	strb	r1, [r0, #224]	; 0xe0
   158a4:	add	r0, lr, #1
   158a8:	strb	r0, [r4, #250]	; 0xfa
   158ac:	ldr	r6, [fp, #-80]	; 0xffffffb0
   158b0:	ldr	r7, [sp, #68]	; 0x44
   158b4:	ldr	r9, [fp, #-96]	; 0xffffffa0
   158b8:	orrs	r0, r6, r7
   158bc:	beq	15ad0 <__assert_fail@plt+0x47b0>
   158c0:	ldr	r5, [fp, #-108]	; 0xffffff94
   158c4:	mov	r0, r6
   158c8:	mov	r1, r7
   158cc:	mov	r2, r9
   158d0:	mov	r3, r5
   158d4:	bl	137a8 <__assert_fail@plt+0x2488>
   158d8:	cmp	r0, #0
   158dc:	bne	15ad8 <__assert_fail@plt+0x47b8>
   158e0:	ldr	r0, [fp, #-112]	; 0xffffff90
   158e4:	ldr	r2, [sp, #112]	; 0x70
   158e8:	ldr	r3, [fp, #-100]	; 0xffffff9c
   158ec:	str	r0, [sp]
   158f0:	ldr	r0, [sp, #116]	; 0x74
   158f4:	stmib	sp, {r0, r6, r7, r9}
   158f8:	sub	r0, fp, #40	; 0x28
   158fc:	str	r5, [sp, #20]
   15900:	bl	1787c <__assert_fail@plt+0x655c>
   15904:	str	r0, [fp, #-112]	; 0xffffff90
   15908:	ldr	r0, [sp, #76]	; 0x4c
   1590c:	ldr	r2, [sp, #88]	; 0x58
   15910:	ldr	r3, [sp, #84]	; 0x54
   15914:	str	r1, [sp, #116]	; 0x74
   15918:	str	r0, [sp]
   1591c:	ldr	r0, [sp, #72]	; 0x48
   15920:	stmib	sp, {r0, r6, r7, r9}
   15924:	sub	r0, fp, #48	; 0x30
   15928:	str	r5, [sp, #20]
   1592c:	bl	1787c <__assert_fail@plt+0x655c>
   15930:	str	r0, [sp, #76]	; 0x4c
   15934:	ldr	r0, [fp, #-104]	; 0xffffff98
   15938:	ldr	r2, [sp, #80]	; 0x50
   1593c:	mov	r3, r8
   15940:	str	r1, [sp, #72]	; 0x48
   15944:	stm	sp, {r0, sl}
   15948:	add	r0, sp, #8
   1594c:	stm	r0, {r6, r7, r9}
   15950:	sub	r0, fp, #56	; 0x38
   15954:	str	r5, [sp, #20]
   15958:	bl	1787c <__assert_fail@plt+0x655c>
   1595c:	str	r0, [fp, #-104]	; 0xffffff98
   15960:	ldr	r0, [fp, #-56]	; 0xffffffc8
   15964:	mov	lr, r9
   15968:	str	r1, [fp, #-96]	; 0xffffffa0
   1596c:	mov	r8, r6
   15970:	mov	r9, r7
   15974:	mov	r3, r5
   15978:	str	r0, [sp, #80]	; 0x50
   1597c:	ldr	r0, [fp, #-52]	; 0xffffffcc
   15980:	str	r0, [sp, #68]	; 0x44
   15984:	ldr	r0, [fp, #-48]	; 0xffffffd0
   15988:	str	r0, [sp, #88]	; 0x58
   1598c:	ldr	r0, [fp, #-44]	; 0xffffffd4
   15990:	str	r0, [sp, #84]	; 0x54
   15994:	ldr	r0, [fp, #-40]	; 0xffffffd8
   15998:	str	r0, [sp, #112]	; 0x70
   1599c:	ldr	r0, [fp, #-36]	; 0xffffffdc
   159a0:	str	r0, [fp, #-100]	; 0xffffff9c
   159a4:	ldr	r0, [sp, #56]	; 0x38
   159a8:	str	r0, [sp, #52]	; 0x34
   159ac:	b	14f9c <__assert_fail@plt+0x3c7c>
   159b0:	ldr	r0, [fp, #-80]	; 0xffffffb0
   159b4:	ldr	r1, [fp, #-108]	; 0xffffff94
   159b8:	ldr	r3, [fp, #-84]	; 0xffffffac
   159bc:	eor	r0, r0, r7
   159c0:	eor	r1, r1, r6
   159c4:	orrs	r0, r0, r1
   159c8:	ldr	r1, [fp, #-76]	; 0xffffffb4
   159cc:	eoreq	r0, r3, r4
   159d0:	eoreq	r2, r1, r5
   159d4:	orrseq	r0, r0, r2
   159d8:	beq	15b20 <__assert_fail@plt+0x4800>
   159dc:	movw	r1, #1838	; 0x72e
   159e0:	ubfx	r0, r7, #1, #7
   159e4:	mov	r9, r6
   159e8:	ldr	ip, [fp, #-108]	; 0xffffff94
   159ec:	movt	r1, #3
   159f0:	ldrb	r0, [r1, r0]
   159f4:	umull	r1, r2, r7, r0
   159f8:	mla	r2, r6, r0, r2
   159fc:	rsbs	r1, r1, #2
   15a00:	umull	r1, r3, r1, r0
   15a04:	rsc	r2, r2, #0
   15a08:	mla	sl, r2, r0, r3
   15a0c:	umull	r2, r3, r1, r7
   15a10:	mla	r3, r1, r6, r3
   15a14:	mla	r3, sl, r7, r3
   15a18:	rsbs	r8, r2, #2
   15a1c:	rsc	r0, r3, #0
   15a20:	str	r0, [fp, #-76]	; 0xffffffb4
   15a24:	umull	r7, r0, r1, r8
   15a28:	str	r0, [fp, #-92]	; 0xffffffa4
   15a2c:	ldr	r0, [fp, #-88]	; 0xffffffa8
   15a30:	umull	r3, r0, r7, r0
   15a34:	rsbs	lr, r3, #2
   15a38:	str	r0, [fp, #-100]	; 0xffffff9c
   15a3c:	ldr	r3, [fp, #-80]	; 0xffffffb0
   15a40:	umull	r6, r0, r7, lr
   15a44:	str	r0, [fp, #-84]	; 0xffffffac
   15a48:	umull	r2, r0, r6, r3
   15a4c:	mla	ip, r6, ip, r0
   15a50:	ldr	r0, [fp, #-100]	; 0xffffff9c
   15a54:	str	r2, [fp, #-96]	; 0xffffffa0
   15a58:	ldr	r2, [fp, #-76]	; 0xffffffb4
   15a5c:	mla	r6, r7, r9, r0
   15a60:	ldr	r0, [fp, #-92]	; 0xffffffa4
   15a64:	mla	r1, r1, r2, r0
   15a68:	ldr	r2, [fp, #-88]	; 0xffffffa8
   15a6c:	mov	r0, r4
   15a70:	mla	r1, sl, r8, r1
   15a74:	mla	r2, r1, r2, r6
   15a78:	ldr	r6, [fp, #-84]	; 0xffffffac
   15a7c:	rsc	r2, r2, #0
   15a80:	mla	r2, r7, r2, r6
   15a84:	ldr	r7, [fp, #-88]	; 0xffffffa8
   15a88:	mla	r1, r1, lr, r2
   15a8c:	mla	r6, r1, r3, ip
   15a90:	mov	r1, r5
   15a94:	mov	r2, r7
   15a98:	mov	r3, r9
   15a9c:	bl	137a8 <__assert_fail@plt+0x2488>
   15aa0:	cmp	r0, #0
   15aa4:	beq	15b48 <__assert_fail@plt+0x4828>
   15aa8:	ldr	r3, [fp, #12]
   15aac:	mov	r0, r3
   15ab0:	ldr	r1, [r0, #8]!
   15ab4:	ldr	r2, [r0, #4]
   15ab8:	orrs	r1, r1, r2
   15abc:	bne	15b00 <__assert_fail@plt+0x47e0>
   15ac0:	stm	r3, {r7, r9}
   15ac4:	strd	r4, [r0]
   15ac8:	mov	r4, r3
   15acc:	b	15b74 <__assert_fail@plt+0x4854>
   15ad0:	ldr	r5, [fp, #-108]	; 0xffffff94
   15ad4:	b	15b7c <__assert_fail@plt+0x485c>
   15ad8:	mov	r0, r4
   15adc:	ldr	r1, [r0, #8]!
   15ae0:	ldr	r2, [r0, #4]
   15ae4:	orrs	r1, r1, r2
   15ae8:	ldreq	r1, [fp, #-108]	; 0xffffff94
   15aec:	streq	r9, [r4]
   15af0:	streq	r1, [r4, #4]
   15af4:	strdeq	r6, [r0]
   15af8:	subeq	sp, fp, #28
   15afc:	popeq	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15b00:	movw	r0, #54663	; 0xd587
   15b04:	movw	r1, #54352	; 0xd450
   15b08:	movw	r3, #54687	; 0xd59f
   15b0c:	movw	r2, #558	; 0x22e
   15b10:	movt	r0, #2
   15b14:	movt	r1, #2
   15b18:	movt	r3, #2
   15b1c:	bl	11320 <__assert_fail@plt>
   15b20:	ldr	r0, [sp, #48]	; 0x30
   15b24:	ldr	r2, [fp, #-80]	; 0xffffffb0
   15b28:	str	r0, [sp]
   15b2c:	ldr	r0, [fp, #12]
   15b30:	str	r0, [sp, #4]
   15b34:	mov	r0, r3
   15b38:	ldr	r3, [fp, #-108]	; 0xffffff94
   15b3c:	bl	14d14 <__assert_fail@plt+0x39f4>
   15b40:	sub	sp, fp, #28
   15b44:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15b48:	ldr	r0, [sp, #48]	; 0x30
   15b4c:	mov	r2, r7
   15b50:	mov	r3, r9
   15b54:	str	r0, [sp]
   15b58:	ldr	r0, [fp, #12]
   15b5c:	mov	r1, r0
   15b60:	str	r0, [sp, #4]
   15b64:	mov	r0, r4
   15b68:	mov	r4, r1
   15b6c:	mov	r1, r5
   15b70:	bl	14d14 <__assert_fail@plt+0x39f4>
   15b74:	ldr	r9, [fp, #-96]	; 0xffffffa0
   15b78:	mov	r5, r6
   15b7c:	mov	r0, r9
   15b80:	mov	r1, r5
   15b84:	bl	15cb8 <__assert_fail@plt+0x4998>
   15b88:	cmp	r0, #0
   15b8c:	beq	15c38 <__assert_fail@plt+0x4918>
   15b90:	ldrb	ip, [r4, #250]	; 0xfa
   15b94:	sub	r1, ip, #1
   15b98:	cmp	ip, #0
   15b9c:	beq	15c8c <__assert_fail@plt+0x496c>
   15ba0:	mov	r2, #8
   15ba4:	mov	r0, r5
   15ba8:	add	r7, ip, #223	; 0xdf
   15bac:	add	r3, r2, ip, lsl #3
   15bb0:	mov	r6, r4
   15bb4:	ldr	r2, [r6, r3]!
   15bb8:	ldr	r6, [r6, #4]
   15bbc:	subs	r5, r9, r2
   15bc0:	sbcs	r5, r0, r6
   15bc4:	bcs	15c54 <__assert_fail@plt+0x4934>
   15bc8:	sub	r2, r7, #1
   15bcc:	sub	r7, r7, #224	; 0xe0
   15bd0:	sub	r3, r3, #8
   15bd4:	cmp	r7, #0
   15bd8:	mov	r7, r2
   15bdc:	bgt	15bb0 <__assert_fail@plt+0x4890>
   15be0:	sub	r2, r2, #224	; 0xe0
   15be4:	mov	r5, r0
   15be8:	cmp	r1, r2
   15bec:	ble	15c88 <__assert_fail@plt+0x4968>
   15bf0:	lsl	r1, ip, #3
   15bf4:	add	r3, ip, #223	; 0xdf
   15bf8:	add	r7, r4, r1
   15bfc:	sub	r1, r1, #8
   15c00:	ldrd	r4, [r7, #8]
   15c04:	strd	r4, [r7, #16]
   15c08:	ldr	r4, [fp, #12]
   15c0c:	mov	r7, r4
   15c10:	ldrb	r6, [r7, r3]!
   15c14:	strb	r6, [r7, #1]
   15c18:	sub	r7, r3, #1
   15c1c:	sub	r3, r3, #225	; 0xe1
   15c20:	cmp	r3, r2
   15c24:	mov	r3, r7
   15c28:	bgt	15bf8 <__assert_fail@plt+0x48d8>
   15c2c:	mov	r1, r2
   15c30:	mov	r5, r0
   15c34:	b	15c8c <__assert_fail@plt+0x496c>
   15c38:	ldr	r2, [fp, #8]
   15c3c:	mov	r0, r9
   15c40:	mov	r1, r5
   15c44:	mov	r3, r4
   15c48:	bl	141e4 <__assert_fail@plt+0x2ec4>
   15c4c:	sub	sp, fp, #28
   15c50:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15c54:	eor	r2, r2, r9
   15c58:	eor	r3, r6, r0
   15c5c:	orrs	r2, r2, r3
   15c60:	bne	15c78 <__assert_fail@plt+0x4958>
   15c64:	ldrb	r0, [r4, r7]
   15c68:	add	r0, r0, #1
   15c6c:	strb	r0, [r4, r7]
   15c70:	sub	sp, fp, #28
   15c74:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15c78:	mov	r5, r0
   15c7c:	sub	r2, r7, #224	; 0xe0
   15c80:	cmp	r1, r2
   15c84:	bgt	15bf0 <__assert_fail@plt+0x48d0>
   15c88:	mov	r1, r2
   15c8c:	add	r1, r1, #1
   15c90:	add	r0, ip, #1
   15c94:	add	r2, r4, r1, lsl #3
   15c98:	add	r1, r4, r1
   15c9c:	str	r9, [r2, #16]
   15ca0:	str	r5, [r2, #20]
   15ca4:	mov	r2, #1
   15ca8:	strb	r2, [r1, #224]	; 0xe0
   15cac:	strb	r0, [r4, #250]	; 0xfa
   15cb0:	sub	sp, fp, #28
   15cb4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15cb8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15cbc:	add	fp, sp, #28
   15cc0:	sub	sp, sp, #380	; 0x17c
   15cc4:	mov	sl, r1
   15cc8:	str	r0, [sp, #116]	; 0x74
   15ccc:	subs	r0, r0, #2
   15cd0:	mov	r1, #0
   15cd4:	sbcs	r0, sl, #0
   15cd8:	bcc	16af4 <__assert_fail@plt+0x57d4>
   15cdc:	ldr	r2, [sp, #116]	; 0x74
   15ce0:	movw	r0, #60793	; 0xed79
   15ce4:	mov	r1, #1
   15ce8:	movt	r0, #381	; 0x17d
   15cec:	subs	r0, r2, r0
   15cf0:	sbcs	r0, sl, #0
   15cf4:	bcc	16af4 <__assert_fail@plt+0x57d4>
   15cf8:	ldr	r0, [sp, #116]	; 0x74
   15cfc:	mov	r3, #0
   15d00:	subs	r0, r0, #1
   15d04:	sbc	r1, sl, #0
   15d08:	tst	r0, #1
   15d0c:	mov	r2, r0
   15d10:	str	r0, [sp, #48]	; 0x30
   15d14:	str	r1, [sp, #44]	; 0x2c
   15d18:	bne	15d40 <__assert_fail@plt+0x4a20>
   15d1c:	ldr	r0, [sp, #48]	; 0x30
   15d20:	ldr	r1, [sp, #44]	; 0x2c
   15d24:	mov	r3, #0
   15d28:	lsrs	r1, r1, #1
   15d2c:	rrx	r2, r0
   15d30:	tst	r0, #2
   15d34:	add	r3, r3, #1
   15d38:	mov	r0, r2
   15d3c:	beq	15d28 <__assert_fail@plt+0x4a08>
   15d40:	ldr	r4, [sp, #116]	; 0x74
   15d44:	str	r1, [sp, #12]
   15d48:	movw	r1, #1838	; 0x72e
   15d4c:	str	r3, [sp, #28]
   15d50:	str	r2, [sp, #8]
   15d54:	movt	r1, #3
   15d58:	ubfx	r0, r4, #1, #7
   15d5c:	ldrb	r1, [r1, r0]
   15d60:	umull	r0, r2, r1, r4
   15d64:	mla	r2, r1, sl, r2
   15d68:	rsbs	r0, r0, #2
   15d6c:	umull	r3, r7, r0, r1
   15d70:	rsc	lr, r2, #0
   15d74:	mla	r1, lr, r1, r7
   15d78:	umull	r0, r6, r3, r4
   15d7c:	mla	r7, r3, sl, r6
   15d80:	mla	r7, r1, r4, r7
   15d84:	rsbs	r5, r0, #2
   15d88:	umull	r0, r8, r3, r5
   15d8c:	rsc	r7, r7, #0
   15d90:	mla	r3, r3, r7, r8
   15d94:	mla	r1, r1, r5, r3
   15d98:	umull	ip, r2, r0, r4
   15d9c:	mla	r2, r0, sl, r2
   15da0:	mla	r3, r1, r4, r2
   15da4:	rsbs	r2, ip, #2
   15da8:	rsc	r3, r3, #0
   15dac:	subs	r7, r4, #2
   15db0:	sbcs	r7, sl, #0
   15db4:	bcc	16b18 <__assert_fail@plt+0x57f8>
   15db8:	umull	r6, r7, r0, r2
   15dbc:	mov	ip, #0
   15dc0:	mov	lr, #0
   15dc4:	mov	r4, #0
   15dc8:	mla	r0, r0, r3, r7
   15dcc:	ldr	r3, [sp, #116]	; 0x74
   15dd0:	mov	r7, sl
   15dd4:	mla	r9, r1, r2, r0
   15dd8:	mov	r0, #0
   15ddc:	mov	r2, #1
   15de0:	mvn	r1, #63	; 0x3f
   15de4:	str	r0, [sp, #68]	; 0x44
   15de8:	mov	r0, #0
   15dec:	str	r6, [sp, #92]	; 0x5c
   15df0:	str	r0, [sp, #64]	; 0x40
   15df4:	b	15e3c <__assert_fail@plt+0x4b1c>
   15df8:	ldr	r6, [sp, #68]	; 0x44
   15dfc:	subs	r0, r2, r3
   15e00:	sbc	r5, r4, r7
   15e04:	subs	r2, r0, #1
   15e08:	sbc	r4, r5, #0
   15e0c:	subs	r6, r6, ip
   15e10:	str	r6, [sp, #68]	; 0x44
   15e14:	ldr	r6, [sp, #64]	; 0x40
   15e18:	sbcs	r6, r6, lr
   15e1c:	str	r6, [sp, #64]	; 0x40
   15e20:	mov	r6, #0
   15e24:	movwcc	r6, #1
   15e28:	cmp	r6, #0
   15e2c:	moveq	r2, r0
   15e30:	moveq	r4, r5
   15e34:	adds	r1, r1, #1
   15e38:	bcs	15e84 <__assert_fail@plt+0x4b64>
   15e3c:	lsrs	r6, lr, #1
   15e40:	rrx	ip, ip
   15e44:	lsrs	r7, r7, #1
   15e48:	orr	lr, r6, r3, lsl #31
   15e4c:	rrx	r3, r3
   15e50:	subs	r5, r3, r2
   15e54:	sbcs	r5, r7, r4
   15e58:	bcc	15df8 <__assert_fail@plt+0x4ad8>
   15e5c:	eor	r5, r2, r3
   15e60:	eor	r0, r4, r7
   15e64:	orrs	r0, r5, r0
   15e68:	bne	15e34 <__assert_fail@plt+0x4b14>
   15e6c:	ldr	r0, [sp, #68]	; 0x44
   15e70:	subs	r0, r0, ip
   15e74:	ldr	r0, [sp, #64]	; 0x40
   15e78:	sbcs	r0, r0, lr
   15e7c:	bcs	15df8 <__assert_fail@plt+0x4ad8>
   15e80:	b	15e34 <__assert_fail@plt+0x4b14>
   15e84:	ldr	r1, [sp, #68]	; 0x44
   15e88:	ldr	r6, [sp, #116]	; 0x74
   15e8c:	ldr	r2, [sp, #64]	; 0x40
   15e90:	mov	r0, #0
   15e94:	str	r9, [sp, #88]	; 0x58
   15e98:	subs	r3, r6, r1
   15e9c:	sbc	r7, sl, r2
   15ea0:	subs	r1, r1, r3
   15ea4:	str	r3, [sp, #36]	; 0x24
   15ea8:	sbcs	r2, r2, r7
   15eac:	str	r7, [sp, #32]
   15eb0:	movwcc	r0, #1
   15eb4:	adds	r3, r1, r6
   15eb8:	adc	r7, r2, sl
   15ebc:	cmp	r0, #0
   15ec0:	ldr	r0, [sp, #12]
   15ec4:	moveq	r3, r1
   15ec8:	ldr	r1, [sp, #8]
   15ecc:	moveq	r7, r2
   15ed0:	str	r3, [sp, #52]	; 0x34
   15ed4:	str	r3, [sp, #100]	; 0x64
   15ed8:	str	r7, [sp, #56]	; 0x38
   15edc:	str	r7, [sp, #104]	; 0x68
   15ee0:	orrs	r0, r1, r0
   15ee4:	str	r0, [sp, #4]
   15ee8:	beq	160dc <__assert_fail@plt+0x4dbc>
   15eec:	ldr	r0, [sp, #56]	; 0x38
   15ef0:	ldr	r7, [sp, #52]	; 0x34
   15ef4:	ldr	lr, [sp, #8]
   15ef8:	ldr	r1, [sp, #12]
   15efc:	mov	r4, r0
   15f00:	str	r7, [sp, #100]	; 0x64
   15f04:	str	r0, [sp, #104]	; 0x68
   15f08:	b	15f14 <__assert_fail@plt+0x4bf4>
   15f0c:	orrs	r0, lr, r1
   15f10:	beq	160dc <__assert_fail@plt+0x4dbc>
   15f14:	umull	r8, r9, r4, r7
   15f18:	umull	r7, r0, r7, r7
   15f1c:	ldr	r3, [sp, #88]	; 0x58
   15f20:	str	lr, [sp, #112]	; 0x70
   15f24:	ldr	r5, [sp, #116]	; 0x74
   15f28:	lsl	r2, r9, #1
   15f2c:	adds	r0, r0, r8, lsl #1
   15f30:	orr	r2, r2, r8, lsr #31
   15f34:	adc	r2, r2, #0
   15f38:	str	r2, [sp, #108]	; 0x6c
   15f3c:	ldr	r2, [sp, #92]	; 0x5c
   15f40:	umull	ip, lr, r7, r2
   15f44:	mla	r7, r7, r3, lr
   15f48:	mov	lr, r1
   15f4c:	mla	r7, r0, r2, r7
   15f50:	umull	r1, r3, ip, sl
   15f54:	umull	r2, r6, ip, r5
   15f58:	umlal	r1, r3, r7, r5
   15f5c:	adds	r1, r1, r6
   15f60:	adc	r2, r3, #0
   15f64:	umull	r3, r6, r7, r5
   15f68:	subs	r1, r1, r3
   15f6c:	umull	r3, r7, r7, sl
   15f70:	sbcs	r1, r2, r6
   15f74:	mov	r1, #0
   15f78:	ldr	r6, [sp, #108]	; 0x6c
   15f7c:	movwcc	r1, #1
   15f80:	cmp	r1, #0
   15f84:	addne	r7, r7, #1
   15f88:	adds	r1, r3, r2
   15f8c:	adc	r2, r7, #0
   15f90:	subs	r0, r0, r8
   15f94:	umull	r3, r7, r4, r4
   15f98:	sbcs	r0, r6, r9
   15f9c:	mov	r0, #0
   15fa0:	movwcc	r0, #1
   15fa4:	cmp	r0, #0
   15fa8:	addne	r7, r7, #1
   15fac:	adds	r0, r3, r6
   15fb0:	adc	r3, r7, #0
   15fb4:	subs	r0, r0, r1
   15fb8:	sbcs	r1, r3, r2
   15fbc:	mov	r2, #0
   15fc0:	movwcc	r2, #1
   15fc4:	adds	r7, r0, r5
   15fc8:	adc	r4, r1, sl
   15fcc:	cmp	r2, #0
   15fd0:	moveq	r7, r0
   15fd4:	ldr	r0, [sp, #112]	; 0x70
   15fd8:	moveq	r4, r1
   15fdc:	mov	r1, lr
   15fe0:	lsrs	r1, lr, #1
   15fe4:	rrx	lr, r0
   15fe8:	tst	r0, #2
   15fec:	beq	15f0c <__assert_fail@plt+0x4bec>
   15ff0:	ldr	r6, [sp, #100]	; 0x64
   15ff4:	ldr	r5, [sp, #92]	; 0x5c
   15ff8:	str	r1, [sp, #108]	; 0x6c
   15ffc:	ldr	r1, [sp, #88]	; 0x58
   16000:	ldr	ip, [sp, #104]	; 0x68
   16004:	str	r4, [sp, #112]	; 0x70
   16008:	umull	r0, r8, r7, r6
   1600c:	umull	r2, r3, r0, r5
   16010:	mla	r0, r0, r1, r3
   16014:	umull	r3, r6, r4, r6
   16018:	umlal	r3, r6, r7, ip
   1601c:	adds	r3, r3, r8
   16020:	ldr	r8, [sp, #116]	; 0x74
   16024:	mla	r0, r3, r5, r0
   16028:	umull	r1, r4, r0, sl
   1602c:	str	r1, [sp, #100]	; 0x64
   16030:	umull	r9, r1, r0, r8
   16034:	str	r1, [sp, #96]	; 0x60
   16038:	umull	r1, r5, r2, sl
   1603c:	umlal	r1, r5, r0, r8
   16040:	adc	r0, r6, #0
   16044:	umull	r2, r6, r2, r8
   16048:	adds	r1, r1, r6
   1604c:	adc	r2, r5, #0
   16050:	subs	r1, r1, r9
   16054:	ldr	r1, [sp, #96]	; 0x60
   16058:	umull	r6, r5, r7, ip
   1605c:	sbcs	r1, r2, r1
   16060:	mov	r1, #0
   16064:	movwcc	r1, #1
   16068:	cmp	r1, #0
   1606c:	ldr	r1, [sp, #100]	; 0x64
   16070:	addne	r4, r4, #1
   16074:	adds	r1, r1, r2
   16078:	adc	r2, r4, #0
   1607c:	ldr	r4, [sp, #112]	; 0x70
   16080:	subs	r3, r3, r6
   16084:	sbcs	r3, r0, r5
   16088:	mov	r3, #0
   1608c:	movwcc	r3, #1
   16090:	cmp	r3, #0
   16094:	umull	r6, r5, r4, ip
   16098:	ldr	r4, [sp, #112]	; 0x70
   1609c:	addne	r5, r5, #1
   160a0:	adds	r0, r6, r0
   160a4:	adc	r3, r5, #0
   160a8:	subs	r0, r0, r1
   160ac:	sbcs	r1, r3, r2
   160b0:	mov	r2, #0
   160b4:	movwcc	r2, #1
   160b8:	adds	r6, r0, r8
   160bc:	adc	r3, r1, sl
   160c0:	cmp	r2, #0
   160c4:	moveq	r3, r1
   160c8:	ldr	r1, [sp, #108]	; 0x6c
   160cc:	moveq	r6, r0
   160d0:	str	r3, [sp, #104]	; 0x68
   160d4:	str	r6, [sp, #100]	; 0x64
   160d8:	b	15f0c <__assert_fail@plt+0x4bec>
   160dc:	ldr	r0, [sp, #68]	; 0x44
   160e0:	ldr	r2, [sp, #100]	; 0x64
   160e4:	ldr	r1, [sp, #64]	; 0x40
   160e8:	ldr	r7, [sp, #104]	; 0x68
   160ec:	eor	r0, r2, r0
   160f0:	eor	r1, r7, r1
   160f4:	orrs	r0, r0, r1
   160f8:	beq	16240 <__assert_fail@plt+0x4f20>
   160fc:	ldr	r0, [sp, #36]	; 0x24
   16100:	ldr	r1, [sp, #32]
   16104:	eor	r0, r2, r0
   16108:	eor	r1, r7, r1
   1610c:	orrs	r0, r0, r1
   16110:	beq	16240 <__assert_fail@plt+0x4f20>
   16114:	ldr	r6, [sp, #28]
   16118:	ldr	r9, [sp, #88]	; 0x58
   1611c:	mov	r1, #0
   16120:	cmp	r6, #2
   16124:	bcc	16af4 <__assert_fail@plt+0x57d4>
   16128:	mov	lr, #2
   1612c:	umull	r0, r1, r7, r2
   16130:	str	r7, [sp, #104]	; 0x68
   16134:	umull	r7, r5, r2, r2
   16138:	lsl	r3, r1, #1
   1613c:	adds	r8, r5, r0, lsl #1
   16140:	str	r1, [sp, #112]	; 0x70
   16144:	ldr	r5, [sp, #116]	; 0x74
   16148:	orr	r3, r3, r0, lsr #31
   1614c:	adc	r1, r3, #0
   16150:	str	r1, [sp, #108]	; 0x6c
   16154:	ldr	r1, [sp, #92]	; 0x5c
   16158:	umull	r4, r3, r7, r1
   1615c:	mla	r3, r7, r9, r3
   16160:	mla	r3, r8, r1, r3
   16164:	umull	r7, r1, r4, sl
   16168:	umull	r4, ip, r4, r5
   1616c:	umlal	r7, r1, r3, r5
   16170:	umull	r4, r2, r3, r5
   16174:	adds	r7, r7, ip
   16178:	adc	r1, r1, #0
   1617c:	subs	r7, r7, r4
   16180:	umull	r3, r7, r3, sl
   16184:	ldr	r4, [sp, #108]	; 0x6c
   16188:	sbcs	r2, r1, r2
   1618c:	mov	r2, #0
   16190:	movwcc	r2, #1
   16194:	cmp	r2, #0
   16198:	addne	r7, r7, #1
   1619c:	adds	r1, r3, r1
   161a0:	ldr	r3, [sp, #104]	; 0x68
   161a4:	adc	r2, r7, #0
   161a8:	subs	r0, r8, r0
   161ac:	ldr	r0, [sp, #112]	; 0x70
   161b0:	umull	r3, r7, r3, r3
   161b4:	sbcs	r0, r4, r0
   161b8:	mov	r0, #0
   161bc:	movwcc	r0, #1
   161c0:	cmp	r0, #0
   161c4:	addne	r7, r7, #1
   161c8:	adds	r0, r3, r4
   161cc:	adc	r3, r7, #0
   161d0:	subs	r0, r0, r1
   161d4:	sbcs	r1, r3, r2
   161d8:	mov	r2, #0
   161dc:	movwcc	r2, #1
   161e0:	adds	r3, r0, r5
   161e4:	adc	r7, r1, sl
   161e8:	cmp	r2, #0
   161ec:	moveq	r7, r1
   161f0:	ldr	r1, [sp, #32]
   161f4:	moveq	r3, r0
   161f8:	ldr	r0, [sp, #36]	; 0x24
   161fc:	eor	r1, r7, r1
   16200:	eor	r0, r3, r0
   16204:	orrs	r0, r0, r1
   16208:	beq	16244 <__assert_fail@plt+0x4f24>
   1620c:	mov	r1, #0
   16210:	cmp	lr, r6
   16214:	bcs	16af4 <__assert_fail@plt+0x57d4>
   16218:	ldr	r0, [sp, #68]	; 0x44
   1621c:	ldr	r1, [sp, #64]	; 0x40
   16220:	mov	r2, r3
   16224:	add	lr, lr, #1
   16228:	eor	r0, r3, r0
   1622c:	eor	r1, r7, r1
   16230:	orrs	r0, r0, r1
   16234:	mov	r1, #0
   16238:	bne	1612c <__assert_fail@plt+0x4e0c>
   1623c:	b	16af4 <__assert_fail@plt+0x57d4>
   16240:	ldr	r9, [sp, #88]	; 0x58
   16244:	mov	r4, #0
   16248:	ldr	r2, [sp, #48]	; 0x30
   1624c:	ldr	r3, [sp, #44]	; 0x2c
   16250:	add	r0, sp, #120	; 0x78
   16254:	mov	r1, #0
   16258:	str	r0, [sp]
   1625c:	mov	r0, #0
   16260:	str	r0, [sp, #20]
   16264:	mov	r0, #0
   16268:	bl	122b8 <__assert_fail@plt+0xf98>
   1626c:	mov	r0, #2
   16270:	str	sl, [sp, #84]	; 0x54
   16274:	str	r4, [sp, #80]	; 0x50
   16278:	str	r0, [sp, #16]
   1627c:	ldrb	r0, [sp, #370]	; 0x172
   16280:	str	r0, [sp, #40]	; 0x28
   16284:	mov	r0, #0
   16288:	str	r0, [sp, #24]
   1628c:	b	162b4 <__assert_fail@plt+0x4f94>
   16290:	ldr	r0, [sp, #24]
   16294:	ldr	sl, [sp, #84]	; 0x54
   16298:	ldr	r9, [sp, #88]	; 0x58
   1629c:	mov	r1, r0
   162a0:	add	r1, r0, #1
   162a4:	cmp	r1, #668	; 0x29c
   162a8:	mov	r0, r1
   162ac:	str	r1, [sp, #24]
   162b0:	beq	16b38 <__assert_fail@plt+0x5818>
   162b4:	ldr	r0, [sp, #40]	; 0x28
   162b8:	mov	r1, #1
   162bc:	cmp	r0, #0
   162c0:	beq	16af4 <__assert_fail@plt+0x57d4>
   162c4:	mov	r2, #0
   162c8:	add	r0, sp, #120	; 0x78
   162cc:	ldr	r7, [sp, #44]	; 0x2c
   162d0:	ldr	r6, [sp, #48]	; 0x30
   162d4:	str	r2, [sp, #60]	; 0x3c
   162d8:	add	r0, r0, r2, lsl #3
   162dc:	ldr	r4, [r0, #16]
   162e0:	ldr	r8, [r0, #20]
   162e4:	mov	r0, r6
   162e8:	mov	r1, r7
   162ec:	mov	r2, r4
   162f0:	mov	r3, r8
   162f4:	bl	2ced8 <__assert_fail@plt+0x1bbb8>
   162f8:	mov	r5, r0
   162fc:	ands	r2, r0, #1
   16300:	ldr	ip, [sp, #56]	; 0x38
   16304:	ldr	r0, [sp, #64]	; 0x40
   16308:	mov	r2, ip
   1630c:	moveq	r2, r0
   16310:	ldr	r0, [sp, #68]	; 0x44
   16314:	str	r2, [sp, #76]	; 0x4c
   16318:	ldr	r2, [sp, #52]	; 0x34
   1631c:	mov	r3, r2
   16320:	moveq	r3, r0
   16324:	str	r3, [sp, #72]	; 0x48
   16328:	subs	r3, r6, r4
   1632c:	sbcs	r3, r7, r8
   16330:	bcc	16578 <__assert_fail@plt+0x5258>
   16334:	mov	r4, r2
   16338:	b	16460 <__assert_fail@plt+0x5140>
   1633c:	ldr	r7, [sp, #72]	; 0x48
   16340:	ldr	r6, [sp, #92]	; 0x5c
   16344:	ldr	r5, [sp, #88]	; 0x58
   16348:	str	ip, [sp, #112]	; 0x70
   1634c:	str	r1, [sp, #108]	; 0x6c
   16350:	ldr	sl, [sp, #80]	; 0x50
   16354:	umull	r0, lr, r4, r7
   16358:	umull	r2, r3, r0, r6
   1635c:	mla	r0, r0, r5, r3
   16360:	umull	r3, r7, ip, r7
   16364:	ldr	ip, [sp, #76]	; 0x4c
   16368:	umlal	r3, r7, r4, ip
   1636c:	adds	r3, r3, lr
   16370:	mla	r0, r3, r6, r0
   16374:	str	r3, [sp, #104]	; 0x68
   16378:	umull	r1, r6, r0, r8
   1637c:	mla	r6, r0, sl, r6
   16380:	str	r1, [sp, #100]	; 0x64
   16384:	ldr	r1, [sp, #116]	; 0x74
   16388:	umull	r3, r1, r0, r1
   1638c:	mla	r0, r0, sl, r1
   16390:	adc	r1, r7, #0
   16394:	str	r1, [sp, #96]	; 0x60
   16398:	umull	r7, r1, r2, r8
   1639c:	mla	r1, r2, sl, r1
   163a0:	adds	r7, r3, r7
   163a4:	adc	lr, r0, r1
   163a8:	ldr	r1, [sp, #116]	; 0x74
   163ac:	umull	r5, r1, r2, r1
   163b0:	ldr	r5, [sp, #96]	; 0x60
   163b4:	mla	r1, r2, sl, r1
   163b8:	ldr	sl, [sp, #84]	; 0x54
   163bc:	adds	r1, r7, r1
   163c0:	ldr	r7, [sp, #104]	; 0x68
   163c4:	adc	r2, lr, #0
   163c8:	subs	r1, r1, r3
   163cc:	ldr	r1, [sp, #108]	; 0x6c
   163d0:	sbcs	r0, r2, r0
   163d4:	mov	r0, #0
   163d8:	movwcc	r0, #1
   163dc:	cmp	r0, #0
   163e0:	ldr	r0, [sp, #100]	; 0x64
   163e4:	addne	r6, r6, #1
   163e8:	adds	r0, r0, r2
   163ec:	umull	r2, r3, r4, ip
   163f0:	adc	r6, r6, #0
   163f4:	subs	r2, r7, r2
   163f8:	sbcs	r2, r5, r3
   163fc:	ldr	r3, [sp, #112]	; 0x70
   16400:	mov	r2, #0
   16404:	movwcc	r2, #1
   16408:	cmp	r2, #0
   1640c:	umull	r3, r7, r3, ip
   16410:	ldr	ip, [sp, #112]	; 0x70
   16414:	addne	r7, r7, #1
   16418:	adds	r2, r3, r5
   1641c:	adc	r3, r7, #0
   16420:	ldr	r7, [sp, #116]	; 0x74
   16424:	subs	r0, r2, r0
   16428:	mov	r2, #0
   1642c:	sbcs	r3, r3, r6
   16430:	movwcc	r2, #1
   16434:	adds	r6, r0, r7
   16438:	adc	r7, r3, sl
   1643c:	cmp	r2, #0
   16440:	moveq	r7, r3
   16444:	moveq	r6, r0
   16448:	str	r7, [sp, #76]	; 0x4c
   1644c:	str	r6, [sp, #72]	; 0x48
   16450:	orrs	r0, r9, r1
   16454:	mov	r5, r9
   16458:	ldr	r9, [sp, #88]	; 0x58
   1645c:	beq	16578 <__assert_fail@plt+0x5258>
   16460:	str	r5, [sp, #104]	; 0x68
   16464:	umull	r5, r6, r4, r4
   16468:	ldr	r0, [sp, #92]	; 0x5c
   1646c:	str	r1, [sp, #108]	; 0x6c
   16470:	ldr	r1, [sp, #116]	; 0x74
   16474:	str	ip, [sp, #112]	; 0x70
   16478:	umull	r2, r7, r5, r0
   1647c:	mla	r5, r5, r9, r7
   16480:	umull	r4, r7, ip, r4
   16484:	adds	r6, r6, r4, lsl #1
   16488:	str	r7, [sp, #96]	; 0x60
   1648c:	mla	r5, r6, r0, r5
   16490:	umull	r0, r9, r5, sl
   16494:	str	r0, [sp, #100]	; 0x64
   16498:	ldr	r0, [sp, #80]	; 0x50
   1649c:	mla	r3, r5, r0, r9
   164a0:	umull	r9, ip, r5, r1
   164a4:	lsl	r1, r7, #1
   164a8:	ldr	r7, [sp, #116]	; 0x74
   164ac:	orr	r1, r1, r4, lsr #31
   164b0:	mla	r5, r5, r0, ip
   164b4:	adc	ip, r1, #0
   164b8:	umull	r1, lr, r2, sl
   164bc:	umull	sl, r8, r2, r7
   164c0:	ldr	sl, [sp, #84]	; 0x54
   164c4:	mla	lr, r2, r0, lr
   164c8:	mla	r2, r2, r0, r8
   164cc:	ldr	r0, [sp, #100]	; 0x64
   164d0:	adds	r1, r9, r1
   164d4:	adc	lr, r5, lr
   164d8:	mov	r8, sl
   164dc:	adds	r1, r1, r2
   164e0:	adc	r2, lr, #0
   164e4:	subs	r1, r1, r9
   164e8:	sbcs	r1, r2, r5
   164ec:	mov	r1, #0
   164f0:	movwcc	r1, #1
   164f4:	cmp	r1, #0
   164f8:	ldr	r1, [sp, #108]	; 0x6c
   164fc:	addne	r3, r3, #1
   16500:	adds	r5, r0, r2
   16504:	ldr	r0, [sp, #96]	; 0x60
   16508:	adc	r2, r3, #0
   1650c:	subs	r3, r6, r4
   16510:	sbcs	r3, ip, r0
   16514:	ldr	r0, [sp, #112]	; 0x70
   16518:	mov	r3, #0
   1651c:	movwcc	r3, #1
   16520:	cmp	r3, #0
   16524:	umull	r7, r6, r0, r0
   16528:	addne	r6, r6, #1
   1652c:	adds	r3, r7, ip
   16530:	adc	r7, r6, #0
   16534:	subs	r0, r3, r5
   16538:	mov	r3, #0
   1653c:	sbcs	r2, r7, r2
   16540:	ldr	r7, [sp, #116]	; 0x74
   16544:	movwcc	r3, #1
   16548:	adds	r4, r0, r7
   1654c:	adc	ip, r2, sl
   16550:	cmp	r3, #0
   16554:	moveq	r4, r0
   16558:	ldr	r0, [sp, #104]	; 0x68
   1655c:	moveq	ip, r2
   16560:	lsrs	r1, r1, #1
   16564:	rrx	r9, r0
   16568:	tst	r0, #2
   1656c:	bne	1633c <__assert_fail@plt+0x501c>
   16570:	mov	sl, r8
   16574:	b	16450 <__assert_fail@plt+0x5130>
   16578:	ldr	r0, [sp, #68]	; 0x44
   1657c:	ldr	r1, [sp, #72]	; 0x48
   16580:	ldr	r2, [sp, #76]	; 0x4c
   16584:	eor	r0, r1, r0
   16588:	ldr	r1, [sp, #64]	; 0x40
   1658c:	eor	r1, r2, r1
   16590:	ldr	r2, [sp, #60]	; 0x3c
   16594:	orrs	r0, r0, r1
   16598:	beq	165ac <__assert_fail@plt+0x528c>
   1659c:	ldr	r1, [sp, #40]	; 0x28
   165a0:	add	r2, r2, #1
   165a4:	cmp	r2, r1
   165a8:	bcc	162c8 <__assert_fail@plt+0x4fa8>
   165ac:	cmp	r0, #0
   165b0:	mov	r1, #1
   165b4:	bne	16af4 <__assert_fail@plt+0x57d4>
   165b8:	ldr	r1, [sp, #24]
   165bc:	movw	r0, #488	; 0x1e8
   165c0:	ldr	r4, [sp, #16]
   165c4:	ldr	r5, [sp, #20]
   165c8:	ldr	r2, [sp, #68]	; 0x44
   165cc:	ldr	r3, [sp, #64]	; 0x40
   165d0:	movt	r0, #3
   165d4:	ldrb	r0, [r0, r1]
   165d8:	adds	r4, r4, r0
   165dc:	adc	r5, r5, #0
   165e0:	str	r4, [sp, #16]
   165e4:	umull	r7, r6, r5, r2
   165e8:	umull	r0, r2, r4, r2
   165ec:	str	r5, [sp, #20]
   165f0:	umlal	r7, r6, r4, r3
   165f4:	adds	r1, r7, r2
   165f8:	adc	r7, r6, #0
   165fc:	umull	r6, r2, r4, r3
   16600:	subs	r6, r1, r6
   16604:	mov	r6, #0
   16608:	sbcs	r2, r7, r2
   1660c:	umull	r2, r3, r5, r3
   16610:	movwcc	r6, #1
   16614:	cmp	r6, #0
   16618:	addne	r3, r3, #1
   1661c:	adds	r7, r2, r7
   16620:	adc	ip, r3, #0
   16624:	orrs	r2, r7, ip
   16628:	bne	16a20 <__assert_fail@plt+0x5700>
   1662c:	ldr	r2, [sp, #116]	; 0x74
   16630:	mov	r3, sl
   16634:	bl	2ced8 <__assert_fail@plt+0x1bbb8>
   16638:	ldr	r5, [sp, #92]	; 0x5c
   1663c:	ldr	r0, [sp, #4]
   16640:	str	r2, [sp, #52]	; 0x34
   16644:	str	r2, [sp, #72]	; 0x48
   16648:	str	r3, [sp, #56]	; 0x38
   1664c:	str	r3, [sp, #76]	; 0x4c
   16650:	cmp	r0, #0
   16654:	beq	16898 <__assert_fail@plt+0x5578>
   16658:	ldr	r0, [sp, #56]	; 0x38
   1665c:	ldr	r9, [sp, #52]	; 0x34
   16660:	ldr	r2, [sp, #8]
   16664:	ldr	r1, [sp, #12]
   16668:	mov	r7, r0
   1666c:	str	r9, [sp, #72]	; 0x48
   16670:	str	r0, [sp, #76]	; 0x4c
   16674:	b	16684 <__assert_fail@plt+0x5364>
   16678:	ldr	r5, [sp, #92]	; 0x5c
   1667c:	orrs	r0, r2, r1
   16680:	beq	16898 <__assert_fail@plt+0x5578>
   16684:	umull	r6, r4, r9, r9
   16688:	str	r1, [sp, #112]	; 0x70
   1668c:	ldr	r1, [sp, #88]	; 0x58
   16690:	str	r2, [sp, #108]	; 0x6c
   16694:	str	r7, [sp, #104]	; 0x68
   16698:	ldr	lr, [sp, #80]	; 0x50
   1669c:	umull	r2, r0, r6, r5
   166a0:	mla	r0, r6, r1, r0
   166a4:	umull	r6, r7, r7, r9
   166a8:	adds	r4, r4, r6, lsl #1
   166ac:	str	r7, [sp, #96]	; 0x60
   166b0:	mla	r0, r4, r5, r0
   166b4:	lsl	r5, r7, #1
   166b8:	ldr	r7, [sp, #116]	; 0x74
   166bc:	orr	r5, r5, r6, lsr #31
   166c0:	umull	r1, r3, r0, sl
   166c4:	mla	r3, r0, lr, r3
   166c8:	str	r1, [sp, #100]	; 0x64
   166cc:	ldr	r1, [sp, #116]	; 0x74
   166d0:	umull	r1, ip, r0, r1
   166d4:	mla	r0, r0, lr, ip
   166d8:	adc	ip, r5, #0
   166dc:	umull	r5, r8, r2, sl
   166e0:	umull	r9, sl, r2, r7
   166e4:	mla	r8, r2, lr, r8
   166e8:	mla	r2, r2, lr, sl
   166ec:	ldr	sl, [sp, #84]	; 0x54
   166f0:	adds	r5, r1, r5
   166f4:	adc	r8, r0, r8
   166f8:	adds	r2, r5, r2
   166fc:	adc	r5, r8, #0
   16700:	subs	r1, r2, r1
   16704:	sbcs	r0, r5, r0
   16708:	mov	r0, #0
   1670c:	movwcc	r0, #1
   16710:	cmp	r0, #0
   16714:	ldr	r0, [sp, #100]	; 0x64
   16718:	addne	r3, r3, #1
   1671c:	adds	r0, r0, r5
   16720:	adc	r1, r3, #0
   16724:	ldr	r3, [sp, #104]	; 0x68
   16728:	subs	r2, r4, r6
   1672c:	ldr	r2, [sp, #96]	; 0x60
   16730:	umull	r3, r4, r3, r3
   16734:	sbcs	r2, ip, r2
   16738:	mov	r2, #0
   1673c:	movwcc	r2, #1
   16740:	cmp	r2, #0
   16744:	addne	r4, r4, #1
   16748:	adds	r2, r3, ip
   1674c:	adc	r3, r4, #0
   16750:	subs	r0, r2, r0
   16754:	mov	r2, #0
   16758:	sbcs	r1, r3, r1
   1675c:	ldr	r3, [sp, #116]	; 0x74
   16760:	movwcc	r2, #1
   16764:	adds	r9, r0, r3
   16768:	adc	r7, r1, sl
   1676c:	cmp	r2, #0
   16770:	moveq	r7, r1
   16774:	ldr	r1, [sp, #112]	; 0x70
   16778:	moveq	r9, r0
   1677c:	ldr	r0, [sp, #108]	; 0x6c
   16780:	lsrs	r1, r1, #1
   16784:	rrx	r2, r0
   16788:	tst	r0, #2
   1678c:	beq	16678 <__assert_fail@plt+0x5358>
   16790:	ldr	r6, [sp, #72]	; 0x48
   16794:	str	r1, [sp, #112]	; 0x70
   16798:	ldr	r4, [sp, #92]	; 0x5c
   1679c:	ldr	r5, [sp, #88]	; 0x58
   167a0:	str	r2, [sp, #108]	; 0x6c
   167a4:	ldr	ip, [sp, #76]	; 0x4c
   167a8:	umull	r0, r1, r9, r6
   167ac:	umull	r2, r3, r0, r4
   167b0:	mla	r0, r0, r5, r3
   167b4:	umull	r3, r6, r7, r6
   167b8:	umlal	r3, r6, r9, ip
   167bc:	adds	r1, r3, r1
   167c0:	mla	r0, r1, r4, r0
   167c4:	str	r1, [sp, #104]	; 0x68
   167c8:	adc	r8, r6, #0
   167cc:	umull	r1, r5, r0, sl
   167d0:	mla	r5, r0, lr, r5
   167d4:	str	r1, [sp, #100]	; 0x64
   167d8:	ldr	r1, [sp, #116]	; 0x74
   167dc:	umull	r3, r1, r0, r1
   167e0:	mla	r0, r0, lr, r1
   167e4:	umull	r6, r1, r2, sl
   167e8:	mla	r1, r2, lr, r1
   167ec:	adds	r6, r3, r6
   167f0:	adc	sl, r0, r1
   167f4:	ldr	r1, [sp, #116]	; 0x74
   167f8:	umull	r4, r1, r2, r1
   167fc:	mla	r1, r2, lr, r1
   16800:	adds	r1, r6, r1
   16804:	ldr	r6, [sp, #104]	; 0x68
   16808:	adc	r2, sl, #0
   1680c:	subs	r1, r1, r3
   16810:	ldr	sl, [sp, #84]	; 0x54
   16814:	sbcs	r0, r2, r0
   16818:	mov	r0, #0
   1681c:	movwcc	r0, #1
   16820:	cmp	r0, #0
   16824:	ldr	r0, [sp, #100]	; 0x64
   16828:	addne	r5, r5, #1
   1682c:	adds	r0, r0, r2
   16830:	umull	r2, r3, r9, ip
   16834:	adc	r1, r5, #0
   16838:	subs	r2, r6, r2
   1683c:	sbcs	r2, r8, r3
   16840:	umull	r3, r6, r7, ip
   16844:	mov	r2, #0
   16848:	movwcc	r2, #1
   1684c:	cmp	r2, #0
   16850:	addne	r6, r6, #1
   16854:	adds	r2, r3, r8
   16858:	adc	r3, r6, #0
   1685c:	subs	r0, r2, r0
   16860:	mov	r2, #0
   16864:	sbcs	r1, r3, r1
   16868:	ldr	r3, [sp, #116]	; 0x74
   1686c:	movwcc	r2, #1
   16870:	adds	r6, r0, r3
   16874:	adc	r3, r1, sl
   16878:	cmp	r2, #0
   1687c:	ldr	r2, [sp, #108]	; 0x6c
   16880:	moveq	r3, r1
   16884:	ldr	r1, [sp, #112]	; 0x70
   16888:	moveq	r6, r0
   1688c:	str	r3, [sp, #76]	; 0x4c
   16890:	str	r6, [sp, #72]	; 0x48
   16894:	b	16678 <__assert_fail@plt+0x5358>
   16898:	ldr	r0, [sp, #68]	; 0x44
   1689c:	ldr	r4, [sp, #72]	; 0x48
   168a0:	ldr	r1, [sp, #64]	; 0x40
   168a4:	ldr	r5, [sp, #76]	; 0x4c
   168a8:	eor	r0, r4, r0
   168ac:	eor	r1, r5, r1
   168b0:	orrs	r0, r0, r1
   168b4:	beq	16290 <__assert_fail@plt+0x4f70>
   168b8:	ldr	r0, [sp, #36]	; 0x24
   168bc:	ldr	r1, [sp, #32]
   168c0:	eor	r0, r4, r0
   168c4:	eor	r1, r5, r1
   168c8:	orrs	r0, r0, r1
   168cc:	beq	16290 <__assert_fail@plt+0x4f70>
   168d0:	ldr	r0, [sp, #28]
   168d4:	mov	r1, #0
   168d8:	cmp	r0, #2
   168dc:	bcc	16af4 <__assert_fail@plt+0x57d4>
   168e0:	mov	r9, #2
   168e4:	umull	r0, r1, r4, r4
   168e8:	ldr	r2, [sp, #92]	; 0x5c
   168ec:	ldr	r6, [sp, #88]	; 0x58
   168f0:	ldr	lr, [sp, #84]	; 0x54
   168f4:	ldr	sl, [sp, #80]	; 0x50
   168f8:	str	r5, [sp, #76]	; 0x4c
   168fc:	umull	r3, r7, r0, r2
   16900:	mla	r0, r0, r6, r7
   16904:	umull	r7, ip, r5, r4
   16908:	adds	r8, r1, r7, lsl #1
   1690c:	str	ip, [sp, #108]	; 0x6c
   16910:	mla	r0, r8, r2, r0
   16914:	ldr	r2, [sp, #116]	; 0x74
   16918:	umull	r1, r4, r0, lr
   1691c:	mla	r4, r0, sl, r4
   16920:	str	r1, [sp, #112]	; 0x70
   16924:	ldr	r1, [sp, #116]	; 0x74
   16928:	umull	r5, r6, r0, r1
   1692c:	mla	r0, r0, sl, r6
   16930:	lsl	r6, ip, #1
   16934:	umull	r2, ip, r3, r2
   16938:	orr	r6, r6, r7, lsr #31
   1693c:	mla	r2, r3, sl, ip
   16940:	adc	r1, r6, #0
   16944:	str	r1, [sp, #104]	; 0x68
   16948:	umull	r1, r6, r3, lr
   1694c:	mla	r6, r3, sl, r6
   16950:	ldr	r3, [sp, #76]	; 0x4c
   16954:	adds	r1, r5, r1
   16958:	adc	r6, r0, r6
   1695c:	adds	r1, r1, r2
   16960:	adc	r2, r6, #0
   16964:	subs	r1, r1, r5
   16968:	ldr	r6, [sp, #104]	; 0x68
   1696c:	sbcs	r0, r2, r0
   16970:	mov	r0, #0
   16974:	movwcc	r0, #1
   16978:	cmp	r0, #0
   1697c:	ldr	r0, [sp, #112]	; 0x70
   16980:	addne	r4, r4, #1
   16984:	adds	r0, r0, r2
   16988:	adc	r1, r4, #0
   1698c:	subs	r2, r8, r7
   16990:	ldr	r2, [sp, #108]	; 0x6c
   16994:	umull	r3, r7, r3, r3
   16998:	sbcs	r2, r6, r2
   1699c:	mov	r2, #0
   169a0:	movwcc	r2, #1
   169a4:	cmp	r2, #0
   169a8:	addne	r7, r7, #1
   169ac:	adds	r2, r3, r6
   169b0:	adc	r3, r7, #0
   169b4:	subs	r0, r2, r0
   169b8:	mov	r2, #0
   169bc:	sbcs	r1, r3, r1
   169c0:	ldr	r3, [sp, #116]	; 0x74
   169c4:	movwcc	r2, #1
   169c8:	adds	r4, r0, r3
   169cc:	adc	r5, r1, lr
   169d0:	cmp	r2, #0
   169d4:	moveq	r5, r1
   169d8:	ldr	r1, [sp, #32]
   169dc:	moveq	r4, r0
   169e0:	ldr	r0, [sp, #36]	; 0x24
   169e4:	eor	r1, r5, r1
   169e8:	eor	r0, r4, r0
   169ec:	orrs	r0, r0, r1
   169f0:	beq	16290 <__assert_fail@plt+0x4f70>
   169f4:	ldr	r0, [sp, #28]
   169f8:	cmp	r9, r0
   169fc:	bcs	16af0 <__assert_fail@plt+0x57d0>
   16a00:	ldr	r0, [sp, #68]	; 0x44
   16a04:	ldr	r1, [sp, #64]	; 0x40
   16a08:	add	r9, r9, #1
   16a0c:	eor	r0, r4, r0
   16a10:	eor	r1, r5, r1
   16a14:	orrs	r0, r0, r1
   16a18:	bne	168e4 <__assert_fail@plt+0x55c4>
   16a1c:	b	16af0 <__assert_fail@plt+0x57d0>
   16a20:	mov	r6, r0
   16a24:	ldr	r0, [sp, #116]	; 0x74
   16a28:	subs	r2, r7, r0
   16a2c:	sbcs	r2, ip, sl
   16a30:	bcs	16b00 <__assert_fail@plt+0x57e0>
   16a34:	ldr	r0, [sp, #116]	; 0x74
   16a38:	mov	r3, r1
   16a3c:	mvn	r1, #63	; 0x3f
   16a40:	mov	r9, #0
   16a44:	mov	r4, sl
   16a48:	mov	r2, r6
   16a4c:	mov	lr, #0
   16a50:	b	16aa8 <__assert_fail@plt+0x5788>
   16a54:	ldr	r3, [sp, #56]	; 0x38
   16a58:	subs	r6, r7, r0
   16a5c:	sbc	r5, ip, r4
   16a60:	subs	r7, r6, #1
   16a64:	sbc	ip, r5, #0
   16a68:	subs	r2, r2, lr
   16a6c:	sbcs	r3, r3, r9
   16a70:	str	r3, [sp, #56]	; 0x38
   16a74:	mov	r3, r0
   16a78:	mov	r0, r4
   16a7c:	mov	r4, #0
   16a80:	movwcc	r4, #1
   16a84:	cmp	r4, #0
   16a88:	mov	r4, r0
   16a8c:	mov	r0, r3
   16a90:	moveq	r7, r6
   16a94:	moveq	ip, r5
   16a98:	ldr	r5, [sp, #92]	; 0x5c
   16a9c:	ldr	r3, [sp, #56]	; 0x38
   16aa0:	adds	r1, r1, #1
   16aa4:	bcs	1663c <__assert_fail@plt+0x531c>
   16aa8:	lsrs	r6, r9, #1
   16aac:	rrx	lr, lr
   16ab0:	lsrs	r4, r4, #1
   16ab4:	str	r3, [sp, #56]	; 0x38
   16ab8:	orr	r9, r6, r0, lsl #31
   16abc:	rrx	r0, r0
   16ac0:	subs	r6, r0, r7
   16ac4:	sbcs	r6, r4, ip
   16ac8:	bcc	16a54 <__assert_fail@plt+0x5734>
   16acc:	eor	r6, r7, r0
   16ad0:	eor	r5, ip, r4
   16ad4:	orrs	r6, r6, r5
   16ad8:	bne	16a98 <__assert_fail@plt+0x5778>
   16adc:	ldr	r3, [sp, #56]	; 0x38
   16ae0:	subs	r6, r2, lr
   16ae4:	sbcs	r6, r3, r9
   16ae8:	bcs	16a54 <__assert_fail@plt+0x5734>
   16aec:	b	16a98 <__assert_fail@plt+0x5778>
   16af0:	mov	r1, #0
   16af4:	mov	r0, r1
   16af8:	sub	sp, fp, #28
   16afc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16b00:	movw	r0, #54450	; 0xd4b2
   16b04:	movw	r1, #54352	; 0xd450
   16b08:	movw	r3, #54425	; 0xd499
   16b0c:	movw	r2, #1262	; 0x4ee
   16b10:	movt	r0, #2
   16b14:	b	16b2c <__assert_fail@plt+0x580c>
   16b18:	movw	r0, #54415	; 0xd48f
   16b1c:	movw	r1, #54352	; 0xd450
   16b20:	movw	r3, #54425	; 0xd499
   16b24:	movw	r2, #1214	; 0x4be
   16b28:	movt	r0, #2
   16b2c:	movt	r1, #2
   16b30:	movt	r3, #2
   16b34:	bl	11320 <__assert_fail@plt>
   16b38:	movw	r1, #54365	; 0xd45d
   16b3c:	mov	r0, #0
   16b40:	mov	r2, #5
   16b44:	movt	r1, #2
   16b48:	bl	110ec <dcgettext@plt>
   16b4c:	mov	r2, r0
   16b50:	mov	r0, #0
   16b54:	mov	r1, #0
   16b58:	bl	1117c <error@plt>
   16b5c:	bl	11314 <abort@plt>
   16b60:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16b64:	add	fp, sp, #28
   16b68:	sub	sp, sp, #100	; 0x64
   16b6c:	ldr	r5, [fp, #20]
   16b70:	str	r2, [fp, #-44]	; 0xffffffd4
   16b74:	stm	sp, {r2, r3, r5}
   16b78:	ldr	r1, [fp, #8]
   16b7c:	ldr	r2, [fp, #12]
   16b80:	mov	sl, r0
   16b84:	mov	r8, r3
   16b88:	sub	r0, fp, #40	; 0x28
   16b8c:	mov	r3, sl
   16b90:	bl	16d94 <__assert_fail@plt+0x5a74>
   16b94:	ldm	r5, {r4, r6, lr}
   16b98:	eor	r2, r1, r6
   16b9c:	ldr	ip, [r5, #12]
   16ba0:	mov	r9, #1
   16ba4:	eor	r3, r0, r4
   16ba8:	orrs	r2, r3, r2
   16bac:	ldr	r2, [fp, #-40]	; 0xffffffd8
   16bb0:	ldr	r3, [fp, #-36]	; 0xffffffdc
   16bb4:	eoreq	r5, r2, lr
   16bb8:	eoreq	r7, r3, ip
   16bbc:	orrseq	r5, r5, r7
   16bc0:	beq	16d88 <__assert_fail@plt+0x5a68>
   16bc4:	str	r8, [fp, #-48]	; 0xffffffd0
   16bc8:	ldr	r8, [sl, #12]
   16bcc:	ldr	r7, [sl]
   16bd0:	ldr	r5, [sl, #4]
   16bd4:	str	r8, [sp, #64]	; 0x40
   16bd8:	str	r7, [sp, #52]	; 0x34
   16bdc:	subs	r7, r7, r4
   16be0:	mov	r4, sl
   16be4:	str	r5, [sp, #56]	; 0x38
   16be8:	sbcs	r9, r5, r6
   16bec:	ldr	r5, [r4, #8]!
   16bf0:	mov	r6, #0
   16bf4:	str	r7, [fp, #-52]	; 0xffffffcc
   16bf8:	movwcc	r6, #1
   16bfc:	str	r4, [fp, #-60]	; 0xffffffc4
   16c00:	str	r9, [fp, #-56]	; 0xffffffc8
   16c04:	str	r5, [sp, #60]	; 0x3c
   16c08:	subs	r5, r5, lr
   16c0c:	sbc	ip, r8, ip
   16c10:	subs	r4, r5, #1
   16c14:	sbc	r8, ip, #0
   16c18:	cmp	r6, #0
   16c1c:	eor	r6, r0, r7
   16c20:	moveq	r4, r5
   16c24:	eor	r5, r1, r9
   16c28:	moveq	r8, ip
   16c2c:	orrs	r6, r6, r5
   16c30:	eoreq	r6, r2, r4
   16c34:	eoreq	r5, r3, r8
   16c38:	orrseq	r6, r6, r5
   16c3c:	beq	16d7c <__assert_fail@plt+0x5a5c>
   16c40:	ldr	r6, [fp, #16]
   16c44:	cmp	r6, #2
   16c48:	bcc	16d84 <__assert_fail@plt+0x5a64>
   16c4c:	ldr	r7, [sp, #52]	; 0x34
   16c50:	ldr	r5, [fp, #-44]	; 0xffffffd4
   16c54:	str	r7, [sp, #32]
   16c58:	ldr	r7, [sp, #56]	; 0x38
   16c5c:	str	r5, [sp, #40]	; 0x28
   16c60:	str	r7, [sp, #36]	; 0x24
   16c64:	ldr	r7, [fp, #-48]	; 0xffffffd0
   16c68:	str	r7, [sp, #44]	; 0x2c
   16c6c:	stm	sp, {r0, r1, r2, r3}
   16c70:	str	r0, [sp, #16]
   16c74:	ldr	r0, [sp, #60]	; 0x3c
   16c78:	str	r1, [sp, #20]
   16c7c:	str	r0, [sp, #24]
   16c80:	ldr	r0, [sp, #64]	; 0x40
   16c84:	str	r0, [sp, #28]
   16c88:	sub	r0, fp, #40	; 0x28
   16c8c:	bl	17060 <__assert_fail@plt+0x5d40>
   16c90:	ldr	r2, [fp, #-56]	; 0xffffffc8
   16c94:	ldr	r3, [fp, #-52]	; 0xffffffcc
   16c98:	eor	r2, r1, r2
   16c9c:	eor	r3, r0, r3
   16ca0:	orrs	r2, r3, r2
   16ca4:	ldr	r2, [fp, #-40]	; 0xffffffd8
   16ca8:	ldr	r3, [fp, #-36]	; 0xffffffdc
   16cac:	moveq	r5, r8
   16cb0:	eoreq	r7, r2, r4
   16cb4:	eoreq	r5, r3, r8
   16cb8:	orrseq	r7, r7, r5
   16cbc:	beq	16d7c <__assert_fail@plt+0x5a5c>
   16cc0:	ldr	r7, [fp, #20]
   16cc4:	sub	r9, r6, #1
   16cc8:	str	r4, [sp, #60]	; 0x3c
   16ccc:	add	r7, r7, #8
   16cd0:	str	r7, [sp, #64]	; 0x40
   16cd4:	ldr	r7, [fp, #20]
   16cd8:	ldrd	r4, [r7]
   16cdc:	eor	r7, r1, r5
   16ce0:	eor	r6, r0, r4
   16ce4:	orrs	r7, r6, r7
   16ce8:	bne	16d04 <__assert_fail@plt+0x59e4>
   16cec:	ldr	r7, [sp, #64]	; 0x40
   16cf0:	ldrd	r4, [r7]
   16cf4:	eor	r7, r3, r5
   16cf8:	eor	r6, r2, r4
   16cfc:	orrs	r7, r6, r7
   16d00:	beq	16d84 <__assert_fail@plt+0x5a64>
   16d04:	subs	r9, r9, #1
   16d08:	beq	16d84 <__assert_fail@plt+0x5a64>
   16d0c:	ldr	r7, [fp, #-60]	; 0xffffffc4
   16d10:	add	ip, sp, #16
   16d14:	ldrd	r4, [r7]
   16d18:	ldrd	r6, [sl]
   16d1c:	str	r7, [sp, #36]	; 0x24
   16d20:	ldr	r7, [fp, #-44]	; 0xffffffd4
   16d24:	str	r6, [sp, #32]
   16d28:	str	r7, [sp, #40]	; 0x28
   16d2c:	ldr	r7, [fp, #-48]	; 0xffffffd0
   16d30:	str	r7, [sp, #44]	; 0x2c
   16d34:	stm	sp, {r0, r1, r2, r3}
   16d38:	stm	ip, {r0, r1, r4, r5}
   16d3c:	sub	r0, fp, #40	; 0x28
   16d40:	bl	17060 <__assert_fail@plt+0x5d40>
   16d44:	ldr	r2, [fp, #-56]	; 0xffffffc8
   16d48:	ldr	r3, [fp, #-52]	; 0xffffffcc
   16d4c:	eor	r2, r1, r2
   16d50:	eor	r3, r0, r3
   16d54:	orrs	r2, r3, r2
   16d58:	ldr	r2, [fp, #-40]	; 0xffffffd8
   16d5c:	ldr	r3, [fp, #-36]	; 0xffffffdc
   16d60:	bne	16cd4 <__assert_fail@plt+0x59b4>
   16d64:	ldr	r7, [sp, #60]	; 0x3c
   16d68:	mov	r6, r8
   16d6c:	eor	r6, r3, r8
   16d70:	eor	r7, r2, r7
   16d74:	orrs	r7, r7, r6
   16d78:	bne	16cd4 <__assert_fail@plt+0x59b4>
   16d7c:	mov	r9, #1
   16d80:	b	16d88 <__assert_fail@plt+0x5a68>
   16d84:	mov	r9, #0
   16d88:	mov	r0, r9
   16d8c:	sub	sp, fp, #28
   16d90:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16d94:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16d98:	add	fp, sp, #28
   16d9c:	sub	sp, sp, #100	; 0x64
   16da0:	str	r0, [fp, #-40]	; 0xffffffd8
   16da4:	ldr	r0, [r3]
   16da8:	ldr	ip, [r1, #8]
   16dac:	ldr	r6, [r1, #12]
   16db0:	ldr	r8, [r3, #4]
   16db4:	ldr	sl, [r3, #12]
   16db8:	mvn	r9, #63	; 0x3f
   16dbc:	ldm	r1, {r5, lr}
   16dc0:	str	r2, [sp, #52]	; 0x34
   16dc4:	ldr	r4, [r2]
   16dc8:	ldr	r2, [r2, #4]
   16dcc:	str	r0, [fp, #-44]	; 0xffffffd4
   16dd0:	ldr	r0, [r3, #8]
   16dd4:	str	sl, [sp, #64]	; 0x40
   16dd8:	str	r8, [sp, #60]	; 0x3c
   16ddc:	str	r0, [fp, #-32]	; 0xffffffe0
   16de0:	ldr	r0, [fp, #16]
   16de4:	ldr	r1, [r0]
   16de8:	str	r1, [fp, #-56]	; 0xffffffc8
   16dec:	ldr	r1, [r0, #4]
   16df0:	str	r1, [fp, #-60]	; 0xffffffc4
   16df4:	ldr	r1, [r0, #8]
   16df8:	ldr	r0, [r0, #12]
   16dfc:	str	r1, [fp, #-52]	; 0xffffffcc
   16e00:	str	r0, [fp, #-48]	; 0xffffffd0
   16e04:	b	16f00 <__assert_fail@plt+0x5be0>
   16e08:	mov	r0, r8
   16e0c:	ldr	r8, [fp, #-44]	; 0xffffffd4
   16e10:	ldr	r7, [fp, #-40]	; 0xffffffd8
   16e14:	ldr	r2, [fp, #-52]	; 0xffffffcc
   16e18:	ldr	r3, [fp, #-48]	; 0xffffffd0
   16e1c:	str	lr, [sp, #56]	; 0x38
   16e20:	str	r0, [sp, #36]	; 0x24
   16e24:	ldr	r0, [fp, #8]
   16e28:	str	r8, [sp, #32]
   16e2c:	str	r0, [sp, #40]	; 0x28
   16e30:	ldr	r0, [fp, #12]
   16e34:	str	r0, [sp, #44]	; 0x2c
   16e38:	ldr	r0, [fp, #-56]	; 0xffffffc8
   16e3c:	str	r0, [sp]
   16e40:	ldr	r0, [fp, #-60]	; 0xffffffc4
   16e44:	stmib	sp, {r0, ip}
   16e48:	ldr	r0, [fp, #-32]	; 0xffffffe0
   16e4c:	str	sl, [sp, #28]
   16e50:	str	r6, [sp, #12]
   16e54:	str	r5, [sp, #16]
   16e58:	str	lr, [sp, #20]
   16e5c:	mov	sl, ip
   16e60:	str	r0, [sp, #24]
   16e64:	mov	r0, r7
   16e68:	bl	17060 <__assert_fail@plt+0x5d40>
   16e6c:	str	r0, [fp, #-56]	; 0xffffffc8
   16e70:	str	r1, [fp, #-60]	; 0xffffffc4
   16e74:	ldr	lr, [sp, #56]	; 0x38
   16e78:	ldr	r2, [fp, #8]
   16e7c:	mov	ip, sl
   16e80:	ldr	r1, [r7]
   16e84:	ldr	r0, [r7, #4]
   16e88:	str	r1, [fp, #-52]	; 0xffffffcc
   16e8c:	str	r0, [fp, #-48]	; 0xffffffd0
   16e90:	ldr	r1, [fp, #12]
   16e94:	ldr	r0, [fp, #-32]	; 0xffffffe0
   16e98:	str	r8, [sp, #32]
   16e9c:	ldr	r8, [sp, #60]	; 0x3c
   16ea0:	ldr	sl, [sp, #64]	; 0x40
   16ea4:	str	r2, [sp, #40]	; 0x28
   16ea8:	str	r1, [sp, #44]	; 0x2c
   16eac:	mov	r2, ip
   16eb0:	mov	r3, r6
   16eb4:	str	r8, [sp, #36]	; 0x24
   16eb8:	stm	sp, {r5, lr}
   16ebc:	str	r0, [sp, #24]
   16ec0:	mov	r0, r7
   16ec4:	str	ip, [sp, #8]
   16ec8:	str	r6, [sp, #12]
   16ecc:	str	r5, [sp, #16]
   16ed0:	str	lr, [sp, #20]
   16ed4:	str	sl, [sp, #28]
   16ed8:	bl	17060 <__assert_fail@plt+0x5d40>
   16edc:	ldr	r2, [fp, #-36]	; 0xffffffdc
   16ee0:	ldr	ip, [r7]
   16ee4:	ldr	r6, [r7, #4]
   16ee8:	mov	r5, r0
   16eec:	mov	lr, r1
   16ef0:	lsrs	r2, r2, #1
   16ef4:	rrx	r4, r4
   16ef8:	adds	r9, r9, #1
   16efc:	bcs	16f24 <__assert_fail@plt+0x5c04>
   16f00:	tst	r4, #1
   16f04:	str	r2, [fp, #-36]	; 0xffffffdc
   16f08:	bne	16e08 <__assert_fail@plt+0x5ae8>
   16f0c:	ldr	r7, [fp, #-40]	; 0xffffffd8
   16f10:	ldr	r8, [fp, #-44]	; 0xffffffd4
   16f14:	ldr	r0, [fp, #-32]	; 0xffffffe0
   16f18:	ldr	r1, [fp, #12]
   16f1c:	ldr	r2, [fp, #8]
   16f20:	b	16e98 <__assert_fail@plt+0x5b78>
   16f24:	ldr	r0, [sp, #52]	; 0x34
   16f28:	ldr	r4, [r0, #8]
   16f2c:	ldr	r9, [r0, #12]
   16f30:	orrs	r0, r4, r9
   16f34:	beq	17040 <__assert_fail@plt+0x5d20>
   16f38:	ldr	r3, [fp, #-40]	; 0xffffffd8
   16f3c:	b	17024 <__assert_fail@plt+0x5d04>
   16f40:	ldr	r0, [fp, #-44]	; 0xffffffd4
   16f44:	str	r1, [sp, #44]	; 0x2c
   16f48:	ldr	r1, [fp, #-56]	; 0xffffffc8
   16f4c:	str	r2, [sp, #40]	; 0x28
   16f50:	ldr	r2, [fp, #-52]	; 0xffffffcc
   16f54:	str	r8, [sp, #36]	; 0x24
   16f58:	str	ip, [fp, #-36]	; 0xffffffdc
   16f5c:	str	r0, [sp, #32]
   16f60:	str	r1, [sp]
   16f64:	ldr	r1, [fp, #-60]	; 0xffffffc4
   16f68:	mov	r0, r3
   16f6c:	ldr	r3, [fp, #-48]	; 0xffffffd0
   16f70:	stmib	sp, {r1, ip}
   16f74:	str	r7, [sp, #24]
   16f78:	str	r6, [sp, #12]
   16f7c:	str	r5, [sp, #16]
   16f80:	str	lr, [sp, #20]
   16f84:	str	sl, [sp, #28]
   16f88:	mov	r7, lr
   16f8c:	bl	17060 <__assert_fail@plt+0x5d40>
   16f90:	ldr	r3, [fp, #-40]	; 0xffffffd8
   16f94:	str	r0, [fp, #-56]	; 0xffffffc8
   16f98:	str	r1, [fp, #-60]	; 0xffffffc4
   16f9c:	mov	lr, r7
   16fa0:	ldr	ip, [fp, #-36]	; 0xffffffdc
   16fa4:	ldr	r2, [fp, #8]
   16fa8:	ldr	r7, [fp, #-32]	; 0xffffffe0
   16fac:	ldr	r1, [r3]
   16fb0:	ldr	r0, [r3, #4]
   16fb4:	str	r0, [fp, #-48]	; 0xffffffd0
   16fb8:	str	r1, [fp, #-52]	; 0xffffffcc
   16fbc:	ldr	r0, [fp, #-44]	; 0xffffffd4
   16fc0:	ldr	r1, [fp, #12]
   16fc4:	str	r0, [sp, #32]
   16fc8:	str	r2, [sp, #40]	; 0x28
   16fcc:	mov	r0, r3
   16fd0:	mov	r2, ip
   16fd4:	mov	r3, r6
   16fd8:	str	r8, [sp, #36]	; 0x24
   16fdc:	str	r1, [sp, #44]	; 0x2c
   16fe0:	stm	sp, {r5, lr}
   16fe4:	str	ip, [sp, #8]
   16fe8:	str	r6, [sp, #12]
   16fec:	str	r5, [sp, #16]
   16ff0:	str	lr, [sp, #20]
   16ff4:	str	r7, [sp, #24]
   16ff8:	str	sl, [sp, #28]
   16ffc:	bl	17060 <__assert_fail@plt+0x5d40>
   17000:	ldr	r3, [fp, #-40]	; 0xffffffd8
   17004:	lsrs	r9, r9, #1
   17008:	rrx	r4, r4
   1700c:	mov	r5, r0
   17010:	mov	lr, r1
   17014:	orrs	r0, r4, r9
   17018:	ldr	ip, [r3]
   1701c:	ldr	r6, [r3, #4]
   17020:	beq	17044 <__assert_fail@plt+0x5d24>
   17024:	ldr	r7, [fp, #-32]	; 0xffffffe0
   17028:	ldr	r1, [fp, #12]
   1702c:	ldr	r2, [fp, #8]
   17030:	tst	r4, #1
   17034:	bne	16f40 <__assert_fail@plt+0x5c20>
   17038:	ldr	r0, [fp, #-44]	; 0xffffffd4
   1703c:	b	16fc4 <__assert_fail@plt+0x5ca4>
   17040:	ldr	r3, [fp, #-40]	; 0xffffffd8
   17044:	ldr	r0, [fp, #-52]	; 0xffffffcc
   17048:	ldr	r1, [fp, #-48]	; 0xffffffd0
   1704c:	strd	r0, [r3]
   17050:	ldr	r0, [fp, #-56]	; 0xffffffc8
   17054:	ldr	r1, [fp, #-60]	; 0xffffffc4
   17058:	sub	sp, fp, #28
   1705c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17060:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17064:	add	fp, sp, #28
   17068:	sub	sp, sp, #84	; 0x54
   1706c:	ldr	r1, [fp, #48]	; 0x30
   17070:	ldr	r7, [fp, #52]	; 0x34
   17074:	rsbs	r4, r1, #0
   17078:	rsc	ip, r7, #0
   1707c:	cmn	r3, #1
   17080:	ble	175cc <__assert_fail@plt+0x62ac>
   17084:	ldr	r1, [fp, #16]
   17088:	ldr	r7, [fp, #20]
   1708c:	mvn	r6, #0
   17090:	subs	r1, r6, r1
   17094:	sbcs	r1, r6, r7
   17098:	bge	175e4 <__assert_fail@plt+0x62c4>
   1709c:	sub	r1, fp, #40	; 0x28
   170a0:	stm	r1, {r0, r2, r3}
   170a4:	ldr	r0, [fp, #32]
   170a8:	ldr	r2, [fp, #36]	; 0x24
   170ac:	subs	r1, r6, r0
   170b0:	sbcs	r0, r6, r2
   170b4:	bge	175fc <__assert_fail@plt+0x62dc>
   170b8:	ldr	r7, [fp, #24]
   170bc:	ldr	r2, [fp, #8]
   170c0:	ldr	lr, [fp, #28]
   170c4:	ldr	r8, [fp, #12]
   170c8:	ldr	r5, [fp, #44]	; 0x2c
   170cc:	ldr	sl, [fp, #40]	; 0x28
   170d0:	str	ip, [fp, #-44]	; 0xffffffd4
   170d4:	str	r4, [fp, #-48]	; 0xffffffd0
   170d8:	umull	r3, r0, r7, r2
   170dc:	umull	r9, r1, r3, r4
   170e0:	str	r3, [sp, #32]
   170e4:	mla	r3, r3, ip, r1
   170e8:	umull	r1, r6, lr, r2
   170ec:	mov	lr, r2
   170f0:	umlal	r1, r6, r7, r8
   170f4:	mov	r7, r8
   170f8:	adds	r0, r1, r0
   170fc:	str	r0, [sp, #28]
   17100:	mla	r0, r0, r4, r3
   17104:	umull	r1, r2, r0, r5
   17108:	str	r2, [sp, #24]
   1710c:	str	r1, [sp, #36]	; 0x24
   17110:	umull	r2, r1, r0, sl
   17114:	str	r2, [sp, #16]
   17118:	str	r1, [sp, #20]
   1711c:	umull	r2, r1, r9, r5
   17120:	umlal	r2, r1, r0, sl
   17124:	str	r1, [sp, #12]
   17128:	ldr	r1, [fp, #36]	; 0x24
   1712c:	str	r2, [sp, #8]
   17130:	umull	r1, sl, r0, r1
   17134:	str	r1, [sp, #4]
   17138:	ldr	r1, [fp, #32]
   1713c:	umull	r8, ip, r0, r1
   17140:	ldr	r1, [fp, #36]	; 0x24
   17144:	umull	r3, r2, r9, r1
   17148:	ldr	r1, [fp, #32]
   1714c:	umlal	r3, r2, r0, r1
   17150:	adc	r0, r6, #0
   17154:	str	r0, [sp, #40]	; 0x28
   17158:	ldr	r0, [fp, #32]
   1715c:	umull	r1, r0, r9, r0
   17160:	adds	r0, r3, r0
   17164:	str	r1, [sp, #48]	; 0x30
   17168:	mov	r3, lr
   1716c:	str	r0, [sp, #44]	; 0x2c
   17170:	adc	r6, r2, #0
   17174:	subs	r0, r0, r8
   17178:	sbcs	r0, r6, ip
   1717c:	mov	r0, #0
   17180:	movwcc	r0, #1
   17184:	cmp	r0, #0
   17188:	ldr	r0, [fp, #20]
   1718c:	addne	sl, sl, #1
   17190:	umull	r1, r2, r0, lr
   17194:	ldr	lr, [fp, #16]
   17198:	mov	r0, r7
   1719c:	umlal	r1, r2, lr, r7
   171a0:	umull	r7, r3, lr, r3
   171a4:	mov	r5, lr
   171a8:	adds	r4, r1, r3
   171ac:	umull	r3, r8, lr, r0
   171b0:	str	r7, [sp]
   171b4:	ldr	r7, [fp, #20]
   171b8:	adc	r2, r2, #0
   171bc:	subs	r3, r4, r3
   171c0:	sbcs	r3, r2, r8
   171c4:	umull	r8, r0, r7, r0
   171c8:	mov	r3, #0
   171cc:	movwcc	r3, #1
   171d0:	cmp	r3, #0
   171d4:	addne	r0, r0, #1
   171d8:	adds	lr, r8, r2
   171dc:	ldr	r2, [fp, #20]
   171e0:	adc	ip, r0, #0
   171e4:	ldr	r0, [fp, #-36]	; 0xffffffdc
   171e8:	umull	r3, r8, r2, r0
   171ec:	ldr	r2, [fp, #-32]	; 0xffffffe0
   171f0:	umlal	r3, r8, r5, r2
   171f4:	umull	r2, r7, r5, r0
   171f8:	ldr	r5, [fp, #8]
   171fc:	adds	r7, r3, r7
   17200:	str	r2, [sp, #56]	; 0x38
   17204:	adc	r3, r8, #0
   17208:	adds	r2, lr, r2
   1720c:	str	r7, [sp, #52]	; 0x34
   17210:	str	r3, [fp, #-52]	; 0xffffffcc
   17214:	ldr	r3, [sp, #4]
   17218:	adc	r0, ip, r7
   1721c:	adds	r2, r2, r6
   17220:	ldr	r6, [fp, #16]
   17224:	adc	r0, r0, #0
   17228:	adds	r2, r2, r3
   1722c:	ldr	r3, [sp, #28]
   17230:	adc	r8, r0, sl
   17234:	adds	sl, r2, #1
   17238:	str	r2, [sp, #4]
   1723c:	ldr	r2, [fp, #40]	; 0x28
   17240:	ldr	r0, [sp, #8]
   17244:	adc	ip, r8, #0
   17248:	umull	r2, r7, r9, r2
   1724c:	adds	r2, r0, r7
   17250:	ldr	r0, [sp, #12]
   17254:	adc	r7, r0, #0
   17258:	ldr	r0, [sp, #16]
   1725c:	subs	r2, r2, r0
   17260:	ldr	r0, [sp, #20]
   17264:	sbcs	r2, r7, r0
   17268:	mov	r2, #0
   1726c:	ldr	r0, [sp, #24]
   17270:	movwcc	r2, #1
   17274:	cmp	r2, #0
   17278:	ldr	r2, [sp, #32]
   1727c:	addne	r0, r0, #1
   17280:	orrs	r2, r2, r3
   17284:	mov	r2, #1
   17288:	umlal	r2, r1, r6, r5
   1728c:	ldr	r5, [sp]
   17290:	moveq	r1, r4
   17294:	ldr	r4, [sp, #36]	; 0x24
   17298:	moveq	r2, r5
   1729c:	adds	r7, r7, r2
   172a0:	adc	r5, r1, #0
   172a4:	adds	r7, r7, r4
   172a8:	ldr	r4, [fp, #24]
   172ac:	adc	lr, r5, r0
   172b0:	subs	r2, r7, r2
   172b4:	ldr	r0, [sp, #4]
   172b8:	ldr	r2, [fp, #12]
   172bc:	ldr	r5, [sp, #40]	; 0x28
   172c0:	sbcs	r1, lr, r1
   172c4:	mov	r1, #0
   172c8:	movwcc	r1, #1
   172cc:	cmp	r1, #0
   172d0:	moveq	sl, r0
   172d4:	umull	r0, r1, r4, r2
   172d8:	moveq	ip, r8
   172dc:	subs	r0, r3, r0
   172e0:	ldr	r3, [fp, #28]
   172e4:	sbcs	r0, r5, r1
   172e8:	mov	r0, #0
   172ec:	movwcc	r0, #1
   172f0:	cmp	r0, #0
   172f4:	umull	r1, r2, r3, r2
   172f8:	addne	r2, r2, #1
   172fc:	adds	r0, r1, r5
   17300:	adc	r1, r2, #0
   17304:	ldr	r2, [sp, #48]	; 0x30
   17308:	adds	r0, r0, r7
   1730c:	mov	r7, r3
   17310:	adcs	r1, r1, lr
   17314:	adcs	r8, sl, #0
   17318:	adc	sl, ip, #0
   1731c:	adds	r9, r0, r2
   17320:	ldr	r0, [sp, #44]	; 0x2c
   17324:	adcs	r1, r1, r0
   17328:	mrs	lr, CPSR
   1732c:	ldr	r2, [fp, #-36]	; 0xffffffdc
   17330:	ldr	r0, [fp, #-32]	; 0xffffffe0
   17334:	umull	r6, r5, r3, r2
   17338:	mov	r3, r4
   1733c:	umlal	r6, r5, r4, r0
   17340:	umull	r2, r4, r4, r2
   17344:	adds	r4, r6, r4
   17348:	adc	r6, r5, #0
   1734c:	umull	r5, r3, r3, r0
   17350:	subs	r5, r4, r5
   17354:	umull	r5, r7, r7, r0
   17358:	sbcs	r3, r6, r3
   1735c:	mov	r3, #0
   17360:	movwcc	r3, #1
   17364:	cmp	r3, #0
   17368:	addne	r7, r7, #1
   1736c:	adds	r0, r5, r6
   17370:	adc	r7, r7, #0
   17374:	adds	r5, r9, r2
   17378:	adcs	r3, r1, r4
   1737c:	str	r5, [sp, #36]	; 0x24
   17380:	adcs	r0, r0, #0
   17384:	str	r3, [sp, #32]
   17388:	str	r0, [fp, #-36]	; 0xffffffdc
   1738c:	adc	r0, r7, #0
   17390:	str	r0, [sp, #48]	; 0x30
   17394:	msr	CPSR_f, lr
   17398:	ldr	r1, [fp, #-48]	; 0xffffffd0
   1739c:	ldr	r2, [fp, #-44]	; 0xffffffd4
   173a0:	adcs	ip, r8, #0
   173a4:	ldr	r8, [fp, #-52]	; 0xffffffcc
   173a8:	adc	sl, sl, #0
   173ac:	str	ip, [sp, #16]
   173b0:	umull	r6, r0, r5, r1
   173b4:	mla	r0, r5, r2, r0
   173b8:	mla	r4, r3, r1, r0
   173bc:	ldr	r0, [fp, #36]	; 0x24
   173c0:	ldr	r1, [fp, #32]
   173c4:	umull	r0, r2, r6, r0
   173c8:	umlal	r0, r2, r4, r1
   173cc:	ldr	r1, [fp, #32]
   173d0:	umull	r1, r7, r6, r1
   173d4:	str	r1, [fp, #-44]	; 0xffffffd4
   173d8:	adds	r1, r0, r7
   173dc:	ldr	r0, [fp, #32]
   173e0:	adc	r5, r2, #0
   173e4:	str	r1, [fp, #-48]	; 0xffffffd0
   173e8:	umull	r0, r2, r4, r0
   173ec:	subs	r0, r1, r0
   173f0:	ldr	r1, [fp, #44]	; 0x2c
   173f4:	sbcs	r0, r5, r2
   173f8:	mov	r0, #0
   173fc:	movwcc	r0, #1
   17400:	cmp	r0, #0
   17404:	ldr	r0, [sp, #56]	; 0x38
   17408:	umull	r2, r3, r4, r1
   1740c:	str	r2, [sp, #44]	; 0x2c
   17410:	ldr	r2, [fp, #40]	; 0x28
   17414:	str	r3, [sp, #40]	; 0x28
   17418:	umull	r7, r3, r4, r2
   1741c:	str	r7, [sp, #24]
   17420:	umull	r7, r9, r6, r1
   17424:	ldr	r1, [fp, #36]	; 0x24
   17428:	str	r3, [sp, #28]
   1742c:	mov	r3, r8
   17430:	umlal	r7, r9, r4, r2
   17434:	mov	r2, #0
   17438:	umull	r1, lr, r4, r1
   1743c:	ldr	r4, [fp, #20]
   17440:	addne	lr, lr, #1
   17444:	subs	r0, ip, r0
   17448:	ldr	ip, [fp, #-32]	; 0xffffffe0
   1744c:	ldr	r0, [sp, #52]	; 0x34
   17450:	str	r1, [sp, #20]
   17454:	mov	r1, #1
   17458:	umaal	r3, r1, r4, ip
   1745c:	sbcs	r0, sl, r0
   17460:	mov	r0, #0
   17464:	movwcc	r2, #1
   17468:	umlal	r8, r0, r4, ip
   1746c:	cmp	r2, #0
   17470:	movne	r8, r3
   17474:	movne	r0, r1
   17478:	ldr	r3, [sp, #16]
   1747c:	adds	r1, r8, r5
   17480:	adc	r5, r0, #0
   17484:	ldr	r0, [sp, #20]
   17488:	adds	r0, r1, r0
   1748c:	ldr	r1, [sp, #32]
   17490:	adc	lr, r5, lr
   17494:	adds	r8, r0, #1
   17498:	str	r0, [fp, #-32]	; 0xffffffe0
   1749c:	ldr	r0, [sp, #36]	; 0x24
   174a0:	adc	r4, lr, #0
   174a4:	adds	r2, r3, #1
   174a8:	adc	r5, sl, #0
   174ac:	orrs	r0, r0, r1
   174b0:	ldr	r0, [fp, #40]	; 0x28
   174b4:	ldr	r1, [sp, #24]
   174b8:	moveq	r5, sl
   174bc:	moveq	r2, r3
   174c0:	umull	r0, r6, r6, r0
   174c4:	adds	r0, r7, r6
   174c8:	adc	r3, r9, #0
   174cc:	ldr	r9, [fp, #44]	; 0x2c
   174d0:	adds	r6, r3, r2
   174d4:	adc	ip, r5, #0
   174d8:	subs	r0, r0, r1
   174dc:	ldr	r0, [sp, #28]
   174e0:	ldr	r1, [fp, #-32]	; 0xffffffe0
   174e4:	sbcs	r0, r3, r0
   174e8:	mov	r0, #0
   174ec:	ldr	r3, [sp, #40]	; 0x28
   174f0:	movwcc	r0, #1
   174f4:	cmp	r0, #0
   174f8:	ldr	r0, [sp, #44]	; 0x2c
   174fc:	addne	r3, r3, #1
   17500:	adds	r0, r6, r0
   17504:	adc	r3, ip, r3
   17508:	subs	r2, r0, r2
   1750c:	ldr	ip, [fp, #32]
   17510:	sbcs	r2, r3, r5
   17514:	mov	r2, #0
   17518:	ldr	r5, [fp, #36]	; 0x24
   1751c:	movwcc	r2, #1
   17520:	cmp	r2, #0
   17524:	ldr	r2, [fp, #-44]	; 0xffffffd4
   17528:	moveq	r8, r1
   1752c:	ldr	r1, [fp, #-36]	; 0xffffffdc
   17530:	moveq	r4, lr
   17534:	adds	r0, r1, r0
   17538:	ldr	r1, [sp, #48]	; 0x30
   1753c:	adcs	r1, r1, r3
   17540:	adcs	r3, r8, #0
   17544:	adc	r7, r4, #0
   17548:	adds	r2, r0, r2
   1754c:	ldr	r0, [fp, #-48]	; 0xffffffd0
   17550:	adcs	r1, r1, r0
   17554:	adcs	r0, r3, #0
   17558:	adc	r3, r7, #0
   1755c:	subs	r7, ip, r0
   17560:	sbcs	r7, r5, r3
   17564:	bcc	17588 <__assert_fail@plt+0x6268>
   17568:	ldr	r4, [fp, #40]	; 0x28
   1756c:	subs	r7, r2, r4
   17570:	sbcs	r7, r1, r9
   17574:	bcc	175b8 <__assert_fail@plt+0x6298>
   17578:	eor	r7, r0, ip
   1757c:	eor	r6, r3, r5
   17580:	orrs	r7, r7, r6
   17584:	bne	175b8 <__assert_fail@plt+0x6298>
   17588:	ldr	r4, [fp, #40]	; 0x28
   1758c:	adds	r7, ip, #1
   17590:	adc	r6, r5, #0
   17594:	subs	r2, r2, r4
   17598:	mov	r4, #0
   1759c:	sbcs	r1, r1, r9
   175a0:	movwcc	r4, #1
   175a4:	cmp	r4, #0
   175a8:	moveq	r7, ip
   175ac:	moveq	r6, r5
   175b0:	subs	r0, r0, r7
   175b4:	sbc	r3, r3, r6
   175b8:	ldr	r7, [fp, #-40]	; 0xffffffd8
   175bc:	stm	r7, {r0, r3}
   175c0:	mov	r0, r2
   175c4:	sub	sp, fp, #28
   175c8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   175cc:	movw	r0, #54461	; 0xd4bd
   175d0:	movw	r1, #54352	; 0xd450
   175d4:	movw	r3, #54492	; 0xd4dc
   175d8:	movw	r2, #993	; 0x3e1
   175dc:	movt	r0, #2
   175e0:	b	17610 <__assert_fail@plt+0x62f0>
   175e4:	movw	r0, #54601	; 0xd549
   175e8:	movw	r1, #54352	; 0xd450
   175ec:	movw	r3, #54492	; 0xd4dc
   175f0:	movw	r2, #994	; 0x3e2
   175f4:	movt	r0, #2
   175f8:	b	17610 <__assert_fail@plt+0x62f0>
   175fc:	movw	r0, #54632	; 0xd568
   17600:	movw	r1, #54352	; 0xd450
   17604:	movw	r3, #54492	; 0xd4dc
   17608:	movw	r2, #995	; 0x3e3
   1760c:	movt	r0, #2
   17610:	movt	r1, #2
   17614:	movt	r3, #2
   17618:	bl	11320 <__assert_fail@plt>
   1761c:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   17620:	add	fp, sp, #24
   17624:	mov	ip, r0
   17628:	ldr	r0, [fp, #24]
   1762c:	tst	r0, #1
   17630:	beq	1785c <__assert_fail@plt+0x653c>
   17634:	mov	r5, r3
   17638:	ldr	r3, [fp, #12]
   1763c:	ldr	lr, [fp, #8]
   17640:	ldr	r1, [fp, #28]
   17644:	ldr	r7, [fp, #20]
   17648:	ldr	r9, [fp, #16]
   1764c:	orr	r4, lr, r2
   17650:	orr	r6, r3, r5
   17654:	orrs	r4, r4, r6
   17658:	beq	1768c <__assert_fail@plt+0x636c>
   1765c:	tst	lr, #1
   17660:	bne	17698 <__assert_fail@plt+0x6378>
   17664:	lsrs	r5, r5, #1
   17668:	rrx	r8, r2
   1766c:	lsrs	r3, r3, #1
   17670:	rrx	r6, lr
   17674:	tst	lr, #2
   17678:	mov	lr, r6
   1767c:	orr	r3, r3, r2, lsl #31
   17680:	mov	r2, r8
   17684:	beq	17664 <__assert_fail@plt+0x6344>
   17688:	b	177a8 <__assert_fail@plt+0x6488>
   1768c:	str	r9, [ip]
   17690:	str	r7, [ip, #4]
   17694:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   17698:	mov	r6, lr
   1769c:	mov	r8, r2
   176a0:	b	177a8 <__assert_fail@plt+0x6488>
   176a4:	subs	r2, r9, r8
   176a8:	sbcs	r2, r7, r5
   176ac:	bcc	176cc <__assert_fail@plt+0x63ac>
   176b0:	subs	r2, r0, r6
   176b4:	sbcs	r2, r1, r3
   176b8:	bcs	17720 <__assert_fail@plt+0x6400>
   176bc:	eor	r2, r8, r9
   176c0:	eor	r4, r5, r7
   176c4:	orrs	r2, r2, r4
   176c8:	bne	17720 <__assert_fail@plt+0x6400>
   176cc:	subs	lr, r8, r9
   176d0:	sbc	r8, r5, r7
   176d4:	subs	r4, lr, #1
   176d8:	sbc	r5, r8, #0
   176dc:	subs	r2, r6, r0
   176e0:	mov	r6, #0
   176e4:	sbcs	r3, r3, r1
   176e8:	movwcc	r6, #1
   176ec:	cmp	r6, #0
   176f0:	moveq	r4, lr
   176f4:	moveq	r5, r8
   176f8:	lsrs	r5, r5, #1
   176fc:	rrx	r8, r4
   17700:	lsrs	r3, r3, #1
   17704:	rrx	r6, r2
   17708:	tst	r2, #2
   1770c:	mov	r2, r6
   17710:	orr	r3, r3, r4, lsl #31
   17714:	mov	r4, r8
   17718:	beq	176f8 <__assert_fail@plt+0x63d8>
   1771c:	b	177a8 <__assert_fail@plt+0x6488>
   17720:	subs	r2, r6, r0
   17724:	sbcs	r2, r3, r1
   17728:	mov	r2, #0
   1772c:	movwcc	r2, #1
   17730:	subs	r4, r8, r9
   17734:	sbcs	r4, r5, r7
   17738:	bcc	17758 <__assert_fail@plt+0x6438>
   1773c:	eor	lr, r8, r9
   17740:	eor	r4, r5, r7
   17744:	orr	r4, lr, r4
   17748:	clz	r4, r4
   1774c:	lsr	r4, r4, #5
   17750:	ands	r2, r2, r4
   17754:	beq	17848 <__assert_fail@plt+0x6528>
   17758:	subs	lr, r9, r8
   1775c:	sbc	r9, r7, r5
   17760:	subs	r2, lr, #1
   17764:	sbc	r7, r9, #0
   17768:	subs	r4, r0, r6
   1776c:	mov	r0, #0
   17770:	sbcs	r1, r1, r3
   17774:	movwcc	r0, #1
   17778:	cmp	r0, #0
   1777c:	moveq	r2, lr
   17780:	moveq	r7, r9
   17784:	lsrs	r7, r7, #1
   17788:	rrx	r9, r2
   1778c:	lsrs	r1, r1, #1
   17790:	rrx	r0, r4
   17794:	tst	r4, #2
   17798:	mov	r4, r0
   1779c:	orr	r1, r1, r2, lsl #31
   177a0:	mov	r2, r9
   177a4:	beq	17784 <__assert_fail@plt+0x6464>
   177a8:	orr	r2, r8, r9
   177ac:	orr	r4, r5, r7
   177b0:	orrs	r2, r2, r4
   177b4:	bne	176a4 <__assert_fail@plt+0x6384>
   177b8:	mov	r2, #0
   177bc:	mov	r5, r0
   177c0:	str	r2, [ip]
   177c4:	str	r2, [ip, #4]
   177c8:	ands	r2, r6, #1
   177cc:	mov	r2, r1
   177d0:	moveq	r2, r3
   177d4:	moveq	r5, r6
   177d8:	movne	r1, r3
   177dc:	movne	r0, r6
   177e0:	orr	r7, r5, r2
   177e4:	cmp	r7, #0
   177e8:	beq	17858 <__assert_fail@plt+0x6538>
   177ec:	lsrs	r3, r1, #1
   177f0:	rrx	r0, r0
   177f4:	mov	r1, r2
   177f8:	mov	r7, r5
   177fc:	lsrs	r2, r2, #1
   17800:	rrx	r5, r5
   17804:	tst	r7, #1
   17808:	beq	177f4 <__assert_fail@plt+0x64d4>
   1780c:	subs	r6, r5, r0
   17810:	sbc	r4, r2, r3
   17814:	orrs	r2, r6, r4
   17818:	beq	17840 <__assert_fail@plt+0x6520>
   1781c:	eor	r1, r6, r4, asr #31
   17820:	eor	r2, r4, r4, asr #31
   17824:	and	r7, r4, r4, asr #31
   17828:	subs	r5, r1, r4, asr #31
   1782c:	and	r1, r6, r4, asr #31
   17830:	sbc	r2, r2, r4, asr #31
   17834:	adds	r0, r1, r0
   17838:	adc	r3, r7, r3
   1783c:	b	177f4 <__assert_fail@plt+0x64d4>
   17840:	orr	r0, r7, #1
   17844:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   17848:	mov	r0, r6
   1784c:	mov	r1, r3
   17850:	str	r8, [ip]
   17854:	str	r5, [ip, #4]
   17858:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1785c:	movw	r0, #54832	; 0xd630
   17860:	movw	r1, #54352	; 0xd450
   17864:	movw	r3, #54839	; 0xd637
   17868:	mov	r2, #476	; 0x1dc
   1786c:	movt	r0, #2
   17870:	movt	r1, #2
   17874:	movt	r3, #2
   17878:	bl	11320 <__assert_fail@plt>
   1787c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17880:	add	fp, sp, #28
   17884:	push	{r0}		; (str r0, [sp, #-4]!)
   17888:	ldr	ip, [fp, #20]
   1788c:	ldr	r0, [fp, #16]
   17890:	orrs	r1, r0, ip
   17894:	beq	17a8c <__assert_fail@plt+0x676c>
   17898:	ldr	r1, [fp, #12]
   1789c:	ldr	r8, [fp, #8]
   178a0:	mov	r9, r2
   178a4:	mov	sl, r3
   178a8:	orrs	r2, r2, r3
   178ac:	beq	17a70 <__assert_fail@plt+0x6750>
   178b0:	mov	r3, #0
   178b4:	mov	r4, r0
   178b8:	mov	r6, ip
   178bc:	cmp	r3, ip, lsr #24
   178c0:	bne	178e8 <__assert_fail@plt+0x65c8>
   178c4:	mov	r3, #0
   178c8:	mov	r4, r0
   178cc:	mov	r6, ip
   178d0:	lsl	r2, r6, #8
   178d4:	add	r3, r3, #8
   178d8:	orr	r6, r2, r4, lsr #24
   178dc:	lsl	r4, r4, #8
   178e0:	cmp	r6, #16777216	; 0x1000000
   178e4:	bcc	178d0 <__assert_fail@plt+0x65b0>
   178e8:	mvn	r2, #0
   178ec:	cmp	r6, #0
   178f0:	bmi	17914 <__assert_fail@plt+0x65f4>
   178f4:	lsl	r5, r6, #1
   178f8:	add	r3, r3, #1
   178fc:	orr	r6, r5, r4, lsr #31
   17900:	lsl	r5, r4, #1
   17904:	subs	r4, r2, r4, lsl #1
   17908:	sbcs	r4, r2, r6
   1790c:	mov	r4, r5
   17910:	blt	178f4 <__assert_fail@plt+0x65d4>
   17914:	mov	r6, #0
   17918:	mov	r4, r9
   1791c:	mov	r7, sl
   17920:	cmp	r6, sl, lsr #24
   17924:	bne	1794c <__assert_fail@plt+0x662c>
   17928:	mov	r6, #0
   1792c:	mov	r4, r9
   17930:	mov	r7, sl
   17934:	lsl	r5, r7, #8
   17938:	add	r6, r6, #8
   1793c:	orr	r7, r5, r4, lsr #24
   17940:	lsl	r4, r4, #8
   17944:	cmp	r7, #16777216	; 0x1000000
   17948:	bcc	17934 <__assert_fail@plt+0x6614>
   1794c:	subs	r5, r2, r4
   17950:	sbcs	r5, r2, r7
   17954:	bge	17978 <__assert_fail@plt+0x6658>
   17958:	lsl	r5, r7, #1
   1795c:	add	r6, r6, #1
   17960:	orr	r7, r5, r4, lsr #31
   17964:	lsl	r5, r4, #1
   17968:	subs	r4, r2, r4, lsl #1
   1796c:	sbcs	r4, r2, r7
   17970:	mov	r4, r5
   17974:	blt	17958 <__assert_fail@plt+0x6638>
   17978:	sub	lr, r3, r6
   1797c:	cmp	lr, #1
   17980:	blt	17a78 <__assert_fail@plt+0x6758>
   17984:	ldr	r7, [fp, #28]
   17988:	rsb	r6, lr, #32
   1798c:	subs	r3, lr, #32
   17990:	rsb	r5, lr, #64	; 0x40
   17994:	mov	r4, r0
   17998:	lsr	r2, r0, r6
   1799c:	orr	r2, r2, ip, lsl lr
   179a0:	lslpl	r2, r0, r3
   179a4:	cmp	r6, #0
   179a8:	lsr	ip, r7, r5
   179ac:	movwpl	ip, #0
   179b0:	cmp	r6, #0
   179b4:	orr	r2, ip, r2
   179b8:	ldr	ip, [fp, #24]
   179bc:	lsr	r0, ip, r5
   179c0:	rsb	r5, r5, #32
   179c4:	orr	r0, r0, r7, lsl r5
   179c8:	lsrpl	r0, r7, r6
   179cc:	cmp	r3, #0
   179d0:	lsl	r5, r4, lr
   179d4:	movwpl	r5, #0
   179d8:	orr	r5, r0, r5
   179dc:	lsr	r0, ip, r6
   179e0:	orr	r6, r0, r7, lsl lr
   179e4:	lslpl	r6, ip, r3
   179e8:	cmp	r3, #0
   179ec:	lsl	r7, ip, lr
   179f0:	movwpl	r7, #0
   179f4:	b	17a40 <__assert_fail@plt+0x6720>
   179f8:	subs	r0, r9, r4
   179fc:	mov	r3, #0
   17a00:	sbc	r5, sl, r2
   17a04:	subs	r9, r0, #1
   17a08:	sbc	sl, r5, #0
   17a0c:	subs	r8, r8, r7
   17a10:	sbcs	r1, r1, r6
   17a14:	movwcc	r3, #1
   17a18:	cmp	r3, #0
   17a1c:	moveq	r9, r0
   17a20:	moveq	sl, r5
   17a24:	lsrs	r2, r2, #1
   17a28:	rrx	r5, r4
   17a2c:	lsrs	r0, r6, #1
   17a30:	rrx	r7, r7
   17a34:	subs	lr, lr, #1
   17a38:	orr	r6, r0, r4, lsl #31
   17a3c:	beq	17a78 <__assert_fail@plt+0x6758>
   17a40:	subs	r0, r5, r9
   17a44:	mov	r4, r5
   17a48:	sbcs	r0, r2, sl
   17a4c:	bcc	179f8 <__assert_fail@plt+0x66d8>
   17a50:	subs	r0, r8, r7
   17a54:	sbcs	r0, r1, r6
   17a58:	bcc	17a24 <__assert_fail@plt+0x6704>
   17a5c:	eor	r0, r9, r4
   17a60:	eor	r5, sl, r2
   17a64:	orrs	r0, r0, r5
   17a68:	beq	179f8 <__assert_fail@plt+0x66d8>
   17a6c:	b	17a24 <__assert_fail@plt+0x6704>
   17a70:	mov	r9, #0
   17a74:	mov	sl, #0
   17a78:	ldr	r0, [sp]
   17a7c:	stm	r0, {r9, sl}
   17a80:	mov	r0, r8
   17a84:	sub	sp, fp, #28
   17a88:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17a8c:	movw	r0, #54915	; 0xd683
   17a90:	movw	r1, #54352	; 0xd450
   17a94:	movw	r3, #54923	; 0xd68b
   17a98:	movw	r2, #411	; 0x19b
   17a9c:	movt	r0, #2
   17aa0:	movt	r1, #2
   17aa4:	movt	r3, #2
   17aa8:	bl	11320 <__assert_fail@plt>
   17aac:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17ab0:	add	fp, sp, #28
   17ab4:	sub	sp, sp, #76	; 0x4c
   17ab8:	mov	r1, #1
   17abc:	mov	r6, r0
   17ac0:	mov	r7, #1
   17ac4:	bl	1b670 <__assert_fail@plt+0xa350>
   17ac8:	cmp	r0, #1
   17acc:	blt	17c90 <__assert_fail@plt+0x6970>
   17ad0:	movw	r1, #60793	; 0xed79
   17ad4:	mov	r0, r6
   17ad8:	movt	r1, #381	; 0x17d
   17adc:	bl	1b670 <__assert_fail@plt+0xa350>
   17ae0:	cmp	r0, #0
   17ae4:	bmi	17d28 <__assert_fail@plt+0x6a08>
   17ae8:	movw	r0, #41964	; 0xa3ec
   17aec:	sub	r4, fp, #40	; 0x28
   17af0:	add	sl, sp, #52	; 0x34
   17af4:	add	r7, sp, #40	; 0x28
   17af8:	mov	r8, #0
   17afc:	add	r9, sp, #28
   17b00:	movt	r0, #1
   17b04:	mov	r1, r4
   17b08:	mov	r2, sl
   17b0c:	mov	r3, r7
   17b10:	str	r9, [sp]
   17b14:	str	r8, [sp, #4]
   17b18:	bl	1826c <__assert_fail@plt+0x6f4c>
   17b1c:	mov	r0, r7
   17b20:	mov	r1, r6
   17b24:	mov	r2, #1
   17b28:	bl	1bf24 <__assert_fail@plt+0xac04>
   17b2c:	mov	r0, r7
   17b30:	mov	r1, #0
   17b34:	bl	264dc <__assert_fail@plt+0x151bc>
   17b38:	mov	r5, r0
   17b3c:	mov	r0, r4
   17b40:	mov	r1, r7
   17b44:	mov	r2, r5
   17b48:	bl	1e100 <__assert_fail@plt+0xcde0>
   17b4c:	mov	r0, sl
   17b50:	mov	r1, #2
   17b54:	bl	1a52c <__assert_fail@plt+0x920c>
   17b58:	mov	r0, r6
   17b5c:	mov	r1, r7
   17b60:	mov	r2, sl
   17b64:	mov	r3, r9
   17b68:	str	r5, [sp, #12]
   17b6c:	stm	sp, {r4, r5}
   17b70:	bl	182cc <__assert_fail@plt+0x6fac>
   17b74:	cmp	r0, #0
   17b78:	mov	r7, #0
   17b7c:	beq	17d08 <__assert_fail@plt+0x69e8>
   17b80:	add	r7, sp, #28
   17b84:	add	r5, sp, #40	; 0x28
   17b88:	mov	r0, r7
   17b8c:	mov	r1, r5
   17b90:	bl	1a5d8 <__assert_fail@plt+0x92b8>
   17b94:	add	r1, sp, #16
   17b98:	mov	r0, r7
   17b9c:	bl	11ee4 <__assert_fail@plt+0xbc4>
   17ba0:	mov	r9, #0
   17ba4:	add	r8, sp, #52	; 0x34
   17ba8:	ldr	r0, [sp, #24]
   17bac:	cmp	r0, #0
   17bb0:	beq	17c98 <__assert_fail@plt+0x6978>
   17bb4:	mov	r4, #1
   17bb8:	mov	sl, #0
   17bbc:	ldr	r0, [sp, #16]
   17bc0:	mov	r1, r5
   17bc4:	add	r2, r0, sl
   17bc8:	mov	r0, r7
   17bcc:	bl	1e90c <__assert_fail@plt+0xd5ec>
   17bd0:	mov	r0, r7
   17bd4:	mov	r1, r8
   17bd8:	mov	r2, r7
   17bdc:	mov	r3, r6
   17be0:	bl	21718 <__assert_fail@plt+0x103f8>
   17be4:	mov	r0, r7
   17be8:	mov	r1, #1
   17bec:	bl	1b670 <__assert_fail@plt+0xa350>
   17bf0:	ldr	r1, [sp, #24]
   17bf4:	cmp	r0, #0
   17bf8:	beq	17c10 <__assert_fail@plt+0x68f0>
   17bfc:	add	r2, r4, #1
   17c00:	cmp	r4, r1
   17c04:	add	sl, sl, #12
   17c08:	mov	r4, r2
   17c0c:	bcc	17bbc <__assert_fail@plt+0x689c>
   17c10:	cmp	r0, #0
   17c14:	bne	17ca8 <__assert_fail@plt+0x6988>
   17c18:	movw	r0, #488	; 0x1e8
   17c1c:	mov	r1, r8
   17c20:	movt	r0, #3
   17c24:	ldrb	r2, [r0, r9]
   17c28:	mov	r0, r8
   17c2c:	bl	1bc5c <__assert_fail@plt+0xa93c>
   17c30:	sub	r0, fp, #40	; 0x28
   17c34:	mov	r1, r5
   17c38:	mov	r2, r8
   17c3c:	mov	r3, r7
   17c40:	str	r0, [sp]
   17c44:	ldr	r0, [sp, #12]
   17c48:	str	r0, [sp, #4]
   17c4c:	mov	r0, r6
   17c50:	bl	182cc <__assert_fail@plt+0x6fac>
   17c54:	cmp	r0, #0
   17c58:	beq	17cb0 <__assert_fail@plt+0x6990>
   17c5c:	add	r9, r9, #1
   17c60:	cmp	r9, #668	; 0x29c
   17c64:	bne	17ba8 <__assert_fail@plt+0x6888>
   17c68:	movw	r1, #54365	; 0xd45d
   17c6c:	mov	r0, #0
   17c70:	mov	r2, #5
   17c74:	movt	r1, #2
   17c78:	bl	110ec <dcgettext@plt>
   17c7c:	mov	r2, r0
   17c80:	mov	r0, #0
   17c84:	mov	r1, #0
   17c88:	bl	1117c <error@plt>
   17c8c:	bl	11314 <abort@plt>
   17c90:	mov	r7, #0
   17c94:	b	17d28 <__assert_fail@plt+0x6a08>
   17c98:	mov	r8, #0
   17c9c:	add	r9, sp, #28
   17ca0:	mov	r7, #1
   17ca4:	b	17cf0 <__assert_fail@plt+0x69d0>
   17ca8:	mov	r7, #1
   17cac:	b	17cb8 <__assert_fail@plt+0x6998>
   17cb0:	ldr	r1, [sp, #24]
   17cb4:	mov	r7, #0
   17cb8:	cmp	r1, #0
   17cbc:	mov	r8, #0
   17cc0:	add	r9, sp, #28
   17cc4:	beq	17cf0 <__assert_fail@plt+0x69d0>
   17cc8:	mov	r4, #0
   17ccc:	mov	r5, #0
   17cd0:	ldr	r0, [sp, #16]
   17cd4:	add	r0, r0, r4
   17cd8:	bl	1a44c <__assert_fail@plt+0x912c>
   17cdc:	ldr	r0, [sp, #24]
   17ce0:	add	r5, r5, #1
   17ce4:	add	r4, r4, #12
   17ce8:	cmp	r5, r0
   17cec:	bcc	17cd0 <__assert_fail@plt+0x69b0>
   17cf0:	ldr	r0, [sp, #16]
   17cf4:	bl	184a0 <__assert_fail@plt+0x7180>
   17cf8:	ldr	r0, [sp, #20]
   17cfc:	bl	184a0 <__assert_fail@plt+0x7180>
   17d00:	cmp	r7, #0
   17d04:	movwne	r7, #1
   17d08:	movw	r0, #42060	; 0xa44c
   17d0c:	sub	r1, fp, #40	; 0x28
   17d10:	add	r2, sp, #52	; 0x34
   17d14:	add	r3, sp, #40	; 0x28
   17d18:	str	r9, [sp]
   17d1c:	str	r8, [sp, #4]
   17d20:	movt	r0, #1
   17d24:	bl	1826c <__assert_fail@plt+0x6f4c>
   17d28:	mov	r0, r7
   17d2c:	sub	sp, fp, #28
   17d30:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17d34:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17d38:	add	fp, sp, #28
   17d3c:	sub	sp, sp, #20
   17d40:	mov	r5, r0
   17d44:	ldr	r0, [r0]
   17d48:	mov	sl, r1
   17d4c:	ldr	r4, [r5, #8]
   17d50:	ldr	r6, [r5, #4]
   17d54:	subs	r8, r4, #1
   17d58:	mov	r9, r8
   17d5c:	bmi	17dbc <__assert_fail@plt+0x6a9c>
   17d60:	add	r1, r8, r8, lsl #1
   17d64:	str	r6, [sp, #16]
   17d68:	mov	r7, r4
   17d6c:	str	r0, [sp, #12]
   17d70:	add	r6, r0, r1, lsl #2
   17d74:	mov	r0, r6
   17d78:	mov	r1, sl
   17d7c:	bl	1b6b8 <__assert_fail@plt+0xa398>
   17d80:	cmp	r0, #1
   17d84:	blt	17d9c <__assert_fail@plt+0x6a7c>
   17d88:	sub	r7, r7, #1
   17d8c:	sub	r6, r6, #12
   17d90:	cmp	r7, #0
   17d94:	bgt	17d74 <__assert_fail@plt+0x6a54>
   17d98:	b	17db0 <__assert_fail@plt+0x6a90>
   17d9c:	mov	r0, r6
   17da0:	mov	r1, sl
   17da4:	bl	1b6b8 <__assert_fail@plt+0xa398>
   17da8:	cmp	r0, #0
   17dac:	beq	17e7c <__assert_fail@plt+0x6b5c>
   17db0:	ldr	r6, [sp, #16]
   17db4:	ldr	r0, [sp, #12]
   17db8:	sub	r9, r7, #1
   17dbc:	str	r5, [sp, #12]
   17dc0:	add	r5, r4, r4, lsl #1
   17dc4:	mov	r1, #12
   17dc8:	add	r1, r1, r5, lsl #2
   17dcc:	bl	2acfc <__assert_fail@plt+0x199dc>
   17dd0:	mov	r7, r0
   17dd4:	add	r0, r4, #1
   17dd8:	str	r0, [sp, #8]
   17ddc:	lsl	r1, r0, #2
   17de0:	mov	r0, r6
   17de4:	bl	2acfc <__assert_fail@plt+0x199dc>
   17de8:	add	r6, r7, r5, lsl #2
   17dec:	str	r0, [sp, #16]
   17df0:	str	r7, [sp, #4]
   17df4:	mov	r0, r6
   17df8:	bl	1a3ec <__assert_fail@plt+0x90cc>
   17dfc:	cmp	r8, r9
   17e00:	ble	17e3c <__assert_fail@plt+0x6b1c>
   17e04:	ldr	r0, [sp, #16]
   17e08:	add	r4, r0, r4, lsl #2
   17e0c:	mov	r5, r4
   17e10:	sub	r7, r6, #12
   17e14:	mov	r0, r6
   17e18:	mov	r1, r7
   17e1c:	bl	1a5d8 <__assert_fail@plt+0x92b8>
   17e20:	ldr	r0, [r5, #-4]!
   17e24:	sub	r8, r8, #1
   17e28:	mov	r6, r7
   17e2c:	cmp	r8, r9
   17e30:	str	r0, [r4]
   17e34:	mov	r4, r5
   17e38:	bgt	17e10 <__assert_fail@plt+0x6af0>
   17e3c:	ldr	r5, [sp, #4]
   17e40:	add	r4, r9, #1
   17e44:	mov	r1, sl
   17e48:	add	r0, r4, r4, lsl #1
   17e4c:	add	r0, r5, r0, lsl #2
   17e50:	bl	1a5d8 <__assert_fail@plt+0x92b8>
   17e54:	ldr	r1, [sp, #16]
   17e58:	mov	r0, #1
   17e5c:	str	r0, [r1, r4, lsl #2]
   17e60:	ldr	r0, [sp, #12]
   17e64:	str	r5, [r0]
   17e68:	str	r1, [r0, #4]
   17e6c:	ldr	r1, [sp, #8]
   17e70:	str	r1, [r0, #8]
   17e74:	sub	sp, fp, #28
   17e78:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17e7c:	ldr	r0, [sp, #16]
   17e80:	add	r0, r0, r7, lsl #2
   17e84:	ldr	r1, [r0, #-4]
   17e88:	add	r1, r1, #1
   17e8c:	str	r1, [r0, #-4]
   17e90:	sub	sp, fp, #28
   17e94:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17e98:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17e9c:	add	fp, sp, #28
   17ea0:	sub	sp, sp, #116	; 0x74
   17ea4:	mov	r8, r0
   17ea8:	movw	r0, #12684	; 0x318c
   17eac:	mov	r6, r1
   17eb0:	str	r2, [sp, #24]
   17eb4:	movt	r0, #4
   17eb8:	ldrb	r0, [r0]
   17ebc:	cmp	r0, #1
   17ec0:	bne	17ee4 <__assert_fail@plt+0x6bc4>
   17ec4:	movw	r0, #12664	; 0x3178
   17ec8:	movw	r2, #55033	; 0xd6f9
   17ecc:	mov	r1, #1
   17ed0:	mov	r3, r6
   17ed4:	movt	r0, #4
   17ed8:	movt	r2, #2
   17edc:	ldr	r0, [r0]
   17ee0:	bl	11278 <__fprintf_chk@plt>
   17ee4:	movw	r0, #41964	; 0xa3ec
   17ee8:	add	r1, sp, #56	; 0x38
   17eec:	add	r2, sp, #44	; 0x2c
   17ef0:	mov	r3, #0
   17ef4:	mov	r7, #0
   17ef8:	movt	r0, #1
   17efc:	bl	1826c <__assert_fail@plt+0x6f4c>
   17f00:	sub	r0, fp, #64	; 0x40
   17f04:	mov	r1, #2
   17f08:	bl	1a7fc <__assert_fail@plt+0x94dc>
   17f0c:	sub	r0, fp, #40	; 0x28
   17f10:	mov	r1, #2
   17f14:	bl	1a7fc <__assert_fail@plt+0x94dc>
   17f18:	sub	r0, fp, #52	; 0x34
   17f1c:	mov	r1, #2
   17f20:	bl	1a7fc <__assert_fail@plt+0x94dc>
   17f24:	add	r0, sp, #68	; 0x44
   17f28:	mov	r1, #1
   17f2c:	mov	r4, #1
   17f30:	bl	1a818 <__assert_fail@plt+0x94f8>
   17f34:	mov	r0, r8
   17f38:	mov	r1, #1
   17f3c:	bl	1b670 <__assert_fail@plt+0xa350>
   17f40:	cmp	r0, #0
   17f44:	beq	1822c <__assert_fail@plt+0x6f0c>
   17f48:	add	r0, r6, #1
   17f4c:	add	r9, sp, #56	; 0x38
   17f50:	sub	r5, fp, #40	; 0x28
   17f54:	str	r0, [sp, #20]
   17f58:	mov	r0, #1
   17f5c:	str	r0, [sp, #32]
   17f60:	mov	r0, #0
   17f64:	b	17f9c <__assert_fail@plt+0x6c7c>
   17f68:	ldr	r0, [sp, #40]	; 0x28
   17f6c:	mov	r1, r5
   17f70:	orr	r0, r0, sl, lsr #31
   17f74:	str	r0, [sp, #40]	; 0x28
   17f78:	lsl	r0, sl, #1
   17f7c:	str	r0, [sp, #28]
   17f80:	sub	r0, fp, #64	; 0x40
   17f84:	bl	1a5d8 <__assert_fail@plt+0x92b8>
   17f88:	ldr	r0, [sp, #28]
   17f8c:	ldr	r7, [sp, #36]	; 0x24
   17f90:	mov	r4, sl
   17f94:	str	r0, [sp, #32]
   17f98:	ldr	r0, [sp, #40]	; 0x28
   17f9c:	str	r0, [sp, #36]	; 0x24
   17fa0:	b	17fc4 <__assert_fail@plt+0x6ca4>
   17fa4:	mov	r0, r7
   17fa8:	mov	r1, r5
   17fac:	bl	1a5d8 <__assert_fail@plt+0x92b8>
   17fb0:	ldr	r7, [sp, #40]	; 0x28
   17fb4:	subs	r4, r4, #1
   17fb8:	sbc	r7, r7, #0
   17fbc:	orrs	r0, r4, r7
   17fc0:	beq	181a4 <__assert_fail@plt+0x6e84>
   17fc4:	mov	r0, r9
   17fc8:	mov	r1, r5
   17fcc:	mov	r2, r5
   17fd0:	str	r7, [sp, #40]	; 0x28
   17fd4:	bl	1ca60 <__assert_fail@plt+0xb740>
   17fd8:	mov	r0, r5
   17fdc:	mov	r1, r9
   17fe0:	mov	r2, r8
   17fe4:	bl	1dc8c <__assert_fail@plt+0xc96c>
   17fe8:	mov	r0, r5
   17fec:	mov	r1, r5
   17ff0:	mov	r2, r6
   17ff4:	bl	1bc5c <__assert_fail@plt+0xa93c>
   17ff8:	mov	r0, r9
   17ffc:	sub	r1, fp, #52	; 0x34
   18000:	mov	r2, r5
   18004:	bl	1c674 <__assert_fail@plt+0xb354>
   18008:	mov	sl, r6
   1800c:	add	r6, sp, #44	; 0x2c
   18010:	mov	r7, r5
   18014:	add	r5, sp, #68	; 0x44
   18018:	mov	r2, r9
   1801c:	mov	r0, r6
   18020:	mov	r1, r5
   18024:	bl	1ca60 <__assert_fail@plt+0xb740>
   18028:	mov	r0, r5
   1802c:	mov	r1, r6
   18030:	mov	r2, r8
   18034:	mov	r5, r7
   18038:	mov	r6, sl
   1803c:	bl	1dc8c <__assert_fail@plt+0xc96c>
   18040:	and	r0, r4, #31
   18044:	teq	r0, #1
   18048:	bne	17fb0 <__assert_fail@plt+0x6c90>
   1804c:	mov	r0, r9
   18050:	add	r1, sp, #68	; 0x44
   18054:	mov	r2, r8
   18058:	bl	1eff0 <__assert_fail@plt+0xdcd0>
   1805c:	mov	r0, r9
   18060:	mov	r1, #1
   18064:	bl	1b670 <__assert_fail@plt+0xa350>
   18068:	cmp	r0, #0
   1806c:	sub	r7, fp, #64	; 0x40
   18070:	beq	17fa4 <__assert_fail@plt+0x6c84>
   18074:	mov	r0, r9
   18078:	mov	r1, r7
   1807c:	mov	r2, r7
   18080:	bl	1ca60 <__assert_fail@plt+0xb740>
   18084:	mov	r0, r7
   18088:	mov	r1, r9
   1808c:	mov	r2, r8
   18090:	bl	1dc8c <__assert_fail@plt+0xc96c>
   18094:	mov	r0, r7
   18098:	mov	r1, r7
   1809c:	mov	r2, r6
   180a0:	bl	1bc5c <__assert_fail@plt+0xa93c>
   180a4:	mov	r0, r9
   180a8:	sub	r1, fp, #52	; 0x34
   180ac:	mov	r2, r7
   180b0:	bl	1c674 <__assert_fail@plt+0xb354>
   180b4:	mov	r0, r9
   180b8:	mov	r1, r9
   180bc:	mov	r2, r8
   180c0:	bl	1eff0 <__assert_fail@plt+0xdcd0>
   180c4:	mov	r0, r9
   180c8:	mov	r1, #1
   180cc:	bl	1b670 <__assert_fail@plt+0xa350>
   180d0:	cmp	r0, #0
   180d4:	beq	18074 <__assert_fail@plt+0x6d54>
   180d8:	mov	r0, r8
   180dc:	mov	r1, r8
   180e0:	mov	r2, r9
   180e4:	bl	1e90c <__assert_fail@plt+0xd5ec>
   180e8:	mov	r0, r9
   180ec:	bl	17aac <__assert_fail@plt+0x678c>
   180f0:	cmp	r0, #0
   180f4:	beq	18108 <__assert_fail@plt+0x6de8>
   180f8:	ldr	r0, [sp, #24]
   180fc:	mov	r1, r9
   18100:	bl	17d34 <__assert_fail@plt+0x6a14>
   18104:	b	18148 <__assert_fail@plt+0x6e28>
   18108:	movw	r0, #12684	; 0x318c
   1810c:	movt	r0, #4
   18110:	ldrb	r0, [r0]
   18114:	cmp	r0, #1
   18118:	bne	18138 <__assert_fail@plt+0x6e18>
   1811c:	movw	r0, #12664	; 0x3178
   18120:	movw	r2, #55054	; 0xd70e
   18124:	mov	r1, #1
   18128:	movt	r0, #4
   1812c:	movt	r2, #2
   18130:	ldr	r0, [r0]
   18134:	bl	11278 <__fprintf_chk@plt>
   18138:	ldr	r1, [sp, #20]
   1813c:	ldr	r2, [sp, #24]
   18140:	mov	r0, r9
   18144:	bl	17e98 <__assert_fail@plt+0x6b78>
   18148:	mov	r0, r8
   1814c:	bl	17aac <__assert_fail@plt+0x678c>
   18150:	cmp	r0, #0
   18154:	bne	18220 <__assert_fail@plt+0x6f00>
   18158:	mov	r0, r5
   1815c:	mov	r1, r5
   18160:	mov	r2, r8
   18164:	bl	1dc8c <__assert_fail@plt+0xc96c>
   18168:	sub	r0, fp, #52	; 0x34
   1816c:	mov	r2, r8
   18170:	mov	r1, r0
   18174:	bl	1dc8c <__assert_fail@plt+0xc96c>
   18178:	mov	r0, r7
   1817c:	mov	r1, r7
   18180:	mov	r2, r8
   18184:	bl	1dc8c <__assert_fail@plt+0xc96c>
   18188:	mov	r0, r8
   1818c:	mov	r1, #1
   18190:	bl	1b670 <__assert_fail@plt+0xa350>
   18194:	ldr	r7, [sp, #40]	; 0x28
   18198:	cmp	r0, #0
   1819c:	bne	17fc4 <__assert_fail@plt+0x6ca4>
   181a0:	b	1822c <__assert_fail@plt+0x6f0c>
   181a4:	sub	r0, fp, #52	; 0x34
   181a8:	mov	r1, r5
   181ac:	bl	1a5d8 <__assert_fail@plt+0x92b8>
   181b0:	ldr	r0, [sp, #36]	; 0x24
   181b4:	ldr	sl, [sp, #32]
   181b8:	lsl	r1, r0, #1
   181bc:	str	r0, [sp, #36]	; 0x24
   181c0:	orrs	r0, sl, r0
   181c4:	str	r1, [sp, #40]	; 0x28
   181c8:	beq	17f68 <__assert_fail@plt+0x6c48>
   181cc:	mov	r7, #0
   181d0:	mov	r4, #0
   181d4:	mov	r0, r9
   181d8:	mov	r1, r5
   181dc:	mov	r2, r5
   181e0:	bl	1ca60 <__assert_fail@plt+0xb740>
   181e4:	mov	r0, r5
   181e8:	mov	r1, r9
   181ec:	mov	r2, r8
   181f0:	bl	1dc8c <__assert_fail@plt+0xc96c>
   181f4:	mov	r0, r5
   181f8:	mov	r1, r5
   181fc:	mov	r2, r6
   18200:	bl	1bc5c <__assert_fail@plt+0xa93c>
   18204:	adds	r7, r7, #1
   18208:	adc	r4, r4, #0
   1820c:	subs	r0, r7, sl
   18210:	ldr	r0, [sp, #36]	; 0x24
   18214:	sbcs	r0, r4, r0
   18218:	bcc	181d4 <__assert_fail@plt+0x6eb4>
   1821c:	b	17f68 <__assert_fail@plt+0x6c48>
   18220:	ldr	r0, [sp, #24]
   18224:	mov	r1, r8
   18228:	bl	17d34 <__assert_fail@plt+0x6a14>
   1822c:	mov	r0, #0
   18230:	sub	r1, fp, #52	; 0x34
   18234:	add	r2, sp, #44	; 0x2c
   18238:	add	r3, sp, #56	; 0x38
   1823c:	str	r1, [sp]
   18240:	sub	r1, fp, #40	; 0x28
   18244:	str	r0, [sp, #12]
   18248:	movw	r0, #42060	; 0xa44c
   1824c:	str	r1, [sp, #4]
   18250:	sub	r1, fp, #64	; 0x40
   18254:	movt	r0, #1
   18258:	str	r1, [sp, #8]
   1825c:	add	r1, sp, #68	; 0x44
   18260:	bl	1826c <__assert_fail@plt+0x6f4c>
   18264:	sub	sp, fp, #28
   18268:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1826c:	sub	sp, sp, #12
   18270:	push	{r4, sl, fp, lr}
   18274:	add	fp, sp, #8
   18278:	sub	sp, sp, #4
   1827c:	mov	r4, r0
   18280:	add	r0, fp, #8
   18284:	stm	r0, {r1, r2, r3}
   18288:	add	r0, fp, #8
   1828c:	add	r0, r0, #4
   18290:	str	r0, [sp]
   18294:	cmp	r1, #0
   18298:	beq	182bc <__assert_fail@plt+0x6f9c>
   1829c:	mov	r0, r1
   182a0:	blx	r4
   182a4:	ldr	r0, [sp]
   182a8:	add	r1, r0, #4
   182ac:	str	r1, [sp]
   182b0:	ldr	r1, [r0]
   182b4:	cmp	r1, #0
   182b8:	bne	1829c <__assert_fail@plt+0x6f7c>
   182bc:	sub	sp, fp, #8
   182c0:	pop	{r4, sl, fp, lr}
   182c4:	add	sp, sp, #12
   182c8:	bx	lr
   182cc:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   182d0:	add	fp, sp, #24
   182d4:	mov	r4, r3
   182d8:	mov	r3, r2
   182dc:	ldr	r2, [fp, #8]
   182e0:	mov	r7, r0
   182e4:	mov	r6, r1
   182e8:	mov	r1, r3
   182ec:	mov	r0, r4
   182f0:	mov	r3, r7
   182f4:	bl	21718 <__assert_fail@plt+0x103f8>
   182f8:	mov	r0, r4
   182fc:	mov	r1, #1
   18300:	mov	r8, #1
   18304:	bl	1b670 <__assert_fail@plt+0xa350>
   18308:	cmp	r0, #0
   1830c:	beq	18384 <__assert_fail@plt+0x7064>
   18310:	mov	r0, r4
   18314:	mov	r1, r6
   18318:	bl	1b6b8 <__assert_fail@plt+0xa398>
   1831c:	cmp	r0, #0
   18320:	beq	18384 <__assert_fail@plt+0x7064>
   18324:	ldr	r9, [fp, #12]
   18328:	mov	r8, #0
   1832c:	cmp	r9, #2
   18330:	bcc	18384 <__assert_fail@plt+0x7064>
   18334:	mov	r5, #2
   18338:	mov	r0, r4
   1833c:	mov	r1, r4
   18340:	mov	r2, #2
   18344:	mov	r3, r7
   18348:	bl	227f0 <__assert_fail@plt+0x114d0>
   1834c:	mov	r0, r4
   18350:	mov	r1, r6
   18354:	bl	1b6b8 <__assert_fail@plt+0xa398>
   18358:	cmp	r0, #0
   1835c:	beq	1838c <__assert_fail@plt+0x706c>
   18360:	mov	r0, r4
   18364:	mov	r1, #1
   18368:	bl	1b670 <__assert_fail@plt+0xa350>
   1836c:	cmp	r0, #0
   18370:	beq	18384 <__assert_fail@plt+0x7064>
   18374:	add	r0, r5, #1
   18378:	cmp	r5, r9
   1837c:	mov	r5, r0
   18380:	bcc	18338 <__assert_fail@plt+0x7018>
   18384:	mov	r0, r8
   18388:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1838c:	mov	r8, #1
   18390:	mov	r0, r8
   18394:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   18398:	movw	r1, #12696	; 0x3198
   1839c:	movt	r1, #4
   183a0:	str	r0, [r1]
   183a4:	bx	lr
   183a8:	movw	r1, #12700	; 0x319c
   183ac:	movt	r1, #4
   183b0:	strb	r0, [r1]
   183b4:	bx	lr
   183b8:	push	{r4, r5, r6, sl, fp, lr}
   183bc:	add	fp, sp, #16
   183c0:	sub	sp, sp, #8
   183c4:	movw	r0, #12676	; 0x3184
   183c8:	movt	r0, #4
   183cc:	ldr	r0, [r0]
   183d0:	bl	2b40c <__assert_fail@plt+0x1a0ec>
   183d4:	cmp	r0, #0
   183d8:	beq	18400 <__assert_fail@plt+0x70e0>
   183dc:	movw	r0, #12700	; 0x319c
   183e0:	movt	r0, #4
   183e4:	ldrb	r0, [r0]
   183e8:	cmp	r0, #0
   183ec:	beq	18420 <__assert_fail@plt+0x7100>
   183f0:	bl	11218 <__errno_location@plt>
   183f4:	ldr	r0, [r0]
   183f8:	cmp	r0, #32
   183fc:	bne	18420 <__assert_fail@plt+0x7100>
   18400:	movw	r0, #12664	; 0x3178
   18404:	movt	r0, #4
   18408:	ldr	r0, [r0]
   1840c:	bl	2b40c <__assert_fail@plt+0x1a0ec>
   18410:	cmp	r0, #0
   18414:	subeq	sp, fp, #16
   18418:	popeq	{r4, r5, r6, sl, fp, pc}
   1841c:	b	18490 <__assert_fail@plt+0x7170>
   18420:	movw	r1, #54204	; 0xd3bc
   18424:	mov	r0, #0
   18428:	mov	r2, #5
   1842c:	movt	r1, #2
   18430:	bl	110ec <dcgettext@plt>
   18434:	mov	r4, r0
   18438:	movw	r0, #12696	; 0x3198
   1843c:	movt	r0, #4
   18440:	ldr	r6, [r0]
   18444:	bl	11218 <__errno_location@plt>
   18448:	ldr	r5, [r0]
   1844c:	cmp	r6, #0
   18450:	bne	1846c <__assert_fail@plt+0x714c>
   18454:	movw	r2, #1985	; 0x7c1
   18458:	mov	r0, #0
   1845c:	mov	r1, r5
   18460:	mov	r3, r4
   18464:	movt	r2, #3
   18468:	b	1848c <__assert_fail@plt+0x716c>
   1846c:	mov	r0, r6
   18470:	bl	29b2c <__assert_fail@plt+0x1880c>
   18474:	movw	r2, #1981	; 0x7bd
   18478:	mov	r3, r0
   1847c:	str	r4, [sp]
   18480:	mov	r0, #0
   18484:	mov	r1, r5
   18488:	movt	r2, #3
   1848c:	bl	1117c <error@plt>
   18490:	movw	r0, #12568	; 0x3118
   18494:	movt	r0, #4
   18498:	ldr	r0, [r0]
   1849c:	bl	110c8 <_exit@plt>
   184a0:	push	{r4, r5, r6, sl, fp, lr}
   184a4:	add	fp, sp, #16
   184a8:	mov	r4, r0
   184ac:	bl	11218 <__errno_location@plt>
   184b0:	ldr	r6, [r0]
   184b4:	mov	r5, r0
   184b8:	mov	r0, r4
   184bc:	bl	110bc <free@plt>
   184c0:	str	r6, [r5]
   184c4:	pop	{r4, r5, r6, sl, fp, pc}
   184c8:	push	{r4, r5, r6, r7, fp, lr}
   184cc:	add	fp, sp, #16
   184d0:	cmp	r2, #0
   184d4:	beq	18520 <__assert_fail@plt+0x7200>
   184d8:	mov	r5, r2
   184dc:	mov	r6, r1
   184e0:	mov	r7, r0
   184e4:	mov	r4, #0
   184e8:	mov	r0, r7
   184ec:	mov	r1, r6
   184f0:	mov	r2, r5
   184f4:	bl	2a2d4 <__assert_fail@plt+0x18fb4>
   184f8:	cmn	r0, #1
   184fc:	beq	18518 <__assert_fail@plt+0x71f8>
   18500:	cmp	r0, #0
   18504:	beq	1852c <__assert_fail@plt+0x720c>
   18508:	subs	r5, r5, r0
   1850c:	add	r6, r6, r0
   18510:	add	r4, r0, r4
   18514:	bne	184e8 <__assert_fail@plt+0x71c8>
   18518:	mov	r0, r4
   1851c:	pop	{r4, r5, r6, r7, fp, pc}
   18520:	mov	r4, #0
   18524:	mov	r0, r4
   18528:	pop	{r4, r5, r6, r7, fp, pc}
   1852c:	bl	11218 <__errno_location@plt>
   18530:	mov	r1, #28
   18534:	str	r1, [r0]
   18538:	mov	r0, r4
   1853c:	pop	{r4, r5, r6, r7, fp, pc}
   18540:	push	{r4, r5, r6, sl, fp, lr}
   18544:	add	fp, sp, #16
   18548:	mov	r5, r0
   1854c:	mov	r0, #0
   18550:	mov	r4, r1
   18554:	add	r6, r2, #19
   18558:	strb	r0, [r2, #20]
   1855c:	mov	r0, r5
   18560:	mov	r1, r4
   18564:	mov	r2, #10
   18568:	mov	r3, #0
   1856c:	bl	2ced8 <__assert_fail@plt+0x1bbb8>
   18570:	add	r2, r0, r0, lsl #2
   18574:	sub	r2, r5, r2, lsl #1
   18578:	orr	r2, r2, #48	; 0x30
   1857c:	strb	r2, [r6], #-1
   18580:	rsbs	r2, r5, #9
   18584:	mov	r5, r0
   18588:	rscs	r2, r4, #0
   1858c:	mov	r4, r1
   18590:	bcc	1855c <__assert_fail@plt+0x723c>
   18594:	add	r0, r6, #1
   18598:	pop	{r4, r5, r6, sl, fp, pc}
   1859c:	andeq	r0, r0, r0
   185a0:	cmp	r0, #0
   185a4:	beq	185b8 <__assert_fail@plt+0x7298>
   185a8:	movw	r3, #12572	; 0x311c
   185ac:	movt	r3, #4
   185b0:	ldr	r3, [r3]
   185b4:	str	r3, [r0]
   185b8:	cmp	r1, #0
   185bc:	beq	185d0 <__assert_fail@plt+0x72b0>
   185c0:	movw	r0, #12576	; 0x3120
   185c4:	movt	r0, #4
   185c8:	ldr	r0, [r0]
   185cc:	str	r0, [r1]
   185d0:	cmp	r2, #0
   185d4:	bxeq	lr
   185d8:	movw	r0, #12580	; 0x3124
   185dc:	movt	r0, #4
   185e0:	ldr	r0, [r0]
   185e4:	str	r0, [r2]
   185e8:	bx	lr
   185ec:	movw	r3, #34444	; 0x868c
   185f0:	cmp	r1, #0
   185f4:	movt	r3, #1
   185f8:	movne	r3, r1
   185fc:	movw	r1, #12576	; 0x3120
   18600:	cmp	r0, #0
   18604:	movt	r1, #4
   18608:	str	r3, [r1]
   1860c:	movw	r1, #34372	; 0x8644
   18610:	movt	r1, #1
   18614:	movne	r1, r0
   18618:	movw	r0, #12572	; 0x311c
   1861c:	cmp	r2, #0
   18620:	movt	r0, #4
   18624:	str	r1, [r0]
   18628:	movw	r1, #12580	; 0x3124
   1862c:	movw	r0, #34480	; 0x86b0
   18630:	movt	r1, #4
   18634:	movt	r0, #1
   18638:	movne	r0, r2
   1863c:	str	r0, [r1]
   18640:	bx	lr
   18644:	push	{fp, lr}
   18648:	mov	fp, sp
   1864c:	cmp	r0, #0
   18650:	beq	1866c <__assert_fail@plt+0x734c>
   18654:	bl	2b334 <__assert_fail@plt+0x1a014>
   18658:	cmp	r0, #0
   1865c:	popne	{fp, pc}
   18660:	movw	r0, #4722	; 0x1272
   18664:	movt	r0, #3
   18668:	bl	21fb4 <__assert_fail@plt+0x10c94>
   1866c:	movw	r0, #5505	; 0x1581
   18670:	movw	r1, #1996	; 0x7cc
   18674:	movw	r3, #4690	; 0x1252
   18678:	movw	r2, #291	; 0x123
   1867c:	movt	r0, #3
   18680:	movt	r1, #3
   18684:	movt	r3, #3
   18688:	bl	11320 <__assert_fail@plt>
   1868c:	push	{fp, lr}
   18690:	mov	fp, sp
   18694:	mov	r1, r2
   18698:	bl	2b364 <__assert_fail@plt+0x1a044>
   1869c:	cmp	r0, #0
   186a0:	popne	{fp, pc}
   186a4:	movw	r0, #4767	; 0x129f
   186a8:	movt	r0, #3
   186ac:	bl	21fb4 <__assert_fail@plt+0x10c94>
   186b0:	b	184a0 <__assert_fail@plt+0x7180>
   186b4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   186b8:	add	fp, sp, #28
   186bc:	sub	sp, sp, #8
   186c0:	cmp	r2, #1
   186c4:	blt	18814 <__assert_fail@plt+0x74f4>
   186c8:	mov	r3, #0
   186cc:	cmp	r2, #4
   186d0:	bcc	187a8 <__assert_fail@plt+0x7488>
   186d4:	add	r6, r1, r2, lsl #2
   186d8:	cmp	r6, r0
   186dc:	addhi	r6, r0, r2, lsl #2
   186e0:	cmphi	r6, r1
   186e4:	bhi	187a8 <__assert_fail@plt+0x7488>
   186e8:	bic	r3, r2, #3
   186ec:	mov	r6, #1
   186f0:	str	r2, [sp]
   186f4:	mov	lr, #0
   186f8:	sub	r5, r3, #4
   186fc:	add	r4, r6, r5, lsr #2
   18700:	cmp	r5, #12
   18704:	and	r2, r4, #3
   18708:	str	r2, [sp, #4]
   1870c:	bcc	18774 <__assert_fail@plt+0x7454>
   18710:	ldr	r2, [sp, #4]
   18714:	mov	r5, #0
   18718:	mov	lr, #0
   1871c:	sub	r9, r4, r2
   18720:	mov	r2, #48	; 0x30
   18724:	add	r7, r1, r5
   18728:	add	r4, r0, r5
   1872c:	add	r5, r5, #64	; 0x40
   18730:	subs	r9, r9, #4
   18734:	add	lr, lr, #16
   18738:	mov	sl, r7
   1873c:	mov	r8, r4
   18740:	add	ip, r7, #16
   18744:	add	r6, r4, #16
   18748:	add	r7, r7, #32
   1874c:	vld1.32	{d16-d17}, [sl], r2
   18750:	vst1.32	{d16-d17}, [r8], r2
   18754:	vld1.32	{d16-d17}, [ip]
   18758:	vst1.32	{d16-d17}, [r6]
   1875c:	vld1.32	{d16-d17}, [r7]
   18760:	add	r7, r4, #32
   18764:	vst1.32	{d16-d17}, [r7]
   18768:	vld1.32	{d16-d17}, [sl]
   1876c:	vst1.32	{d16-d17}, [r8]
   18770:	bne	18724 <__assert_fail@plt+0x7404>
   18774:	ldr	r2, [sp, #4]
   18778:	cmp	r2, #0
   1877c:	beq	1879c <__assert_fail@plt+0x747c>
   18780:	add	r4, r1, lr, lsl #2
   18784:	add	r6, r0, lr, lsl #2
   18788:	rsb	r5, r2, #0
   1878c:	vld1.32	{d16-d17}, [r4]!
   18790:	adds	r5, r5, #1
   18794:	vst1.32	{d16-d17}, [r6]!
   18798:	bcc	1878c <__assert_fail@plt+0x746c>
   1879c:	ldr	r2, [sp]
   187a0:	cmp	r3, r2
   187a4:	beq	18814 <__assert_fail@plt+0x74f4>
   187a8:	mvn	r7, r3
   187ac:	ands	r5, r2, #3
   187b0:	add	r6, r7, r2
   187b4:	beq	187cc <__assert_fail@plt+0x74ac>
   187b8:	ldr	r7, [r1, r3, lsl #2]
   187bc:	subs	r5, r5, #1
   187c0:	str	r7, [r0, r3, lsl #2]
   187c4:	add	r3, r3, #1
   187c8:	bne	187b8 <__assert_fail@plt+0x7498>
   187cc:	cmp	r6, #3
   187d0:	bcc	18814 <__assert_fail@plt+0x74f4>
   187d4:	sub	r2, r2, r3
   187d8:	lsl	r3, r3, #2
   187dc:	add	r7, r1, #16
   187e0:	ldr	r6, [r1, r3]!
   187e4:	add	r5, r0, #16
   187e8:	subs	r2, r2, #4
   187ec:	str	r6, [r0, r3]!
   187f0:	ldr	r6, [r1, #4]
   187f4:	str	r6, [r0, #4]
   187f8:	ldr	r6, [r1, #8]
   187fc:	str	r6, [r0, #8]
   18800:	ldr	r1, [r1, #12]
   18804:	str	r1, [r0, #12]
   18808:	mov	r1, r7
   1880c:	mov	r0, r5
   18810:	bne	187dc <__assert_fail@plt+0x74bc>
   18814:	sub	sp, fp, #28
   18818:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1881c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   18820:	add	fp, sp, #24
   18824:	cmp	r2, #1
   18828:	blt	188e4 <__assert_fail@plt+0x75c4>
   1882c:	cmp	r2, #4
   18830:	bcc	188c8 <__assert_fail@plt+0x75a8>
   18834:	add	r3, r1, r2, lsl #2
   18838:	cmp	r3, r0
   1883c:	addhi	r3, r0, r2, lsl #2
   18840:	cmphi	r3, r1
   18844:	bhi	188c8 <__assert_fail@plt+0x75a8>
   18848:	bic	ip, r2, #3
   1884c:	mov	r7, #1
   18850:	subs	r3, ip, #4
   18854:	add	r3, r7, r3, lsr #2
   18858:	and	lr, r3, #1
   1885c:	beq	188e8 <__assert_fail@plt+0x75c8>
   18860:	mvn	r8, #31
   18864:	sub	r4, r3, lr
   18868:	add	r3, r8, r2, lsl #2
   1886c:	add	r6, r1, r3
   18870:	add	r7, r0, r3
   18874:	mvn	r3, #0
   18878:	add	r5, r6, #16
   1887c:	sub	r3, r3, #8
   18880:	subs	r4, r4, #2
   18884:	vld1.32	{d16-d17}, [r5]
   18888:	add	r5, r7, #16
   1888c:	vst1.32	{d16-d17}, [r5]
   18890:	vld1.32	{d16-d17}, [r6], r8
   18894:	vst1.32	{d16-d17}, [r7], r8
   18898:	bne	18878 <__assert_fail@plt+0x7558>
   1889c:	cmp	lr, #0
   188a0:	beq	188c0 <__assert_fail@plt+0x75a0>
   188a4:	add	r3, r3, r2
   188a8:	add	r7, r1, r3, lsl #2
   188ac:	add	r3, r0, r3, lsl #2
   188b0:	sub	r7, r7, #12
   188b4:	sub	r3, r3, #12
   188b8:	vld1.32	{d16-d17}, [r7]
   188bc:	vst1.32	{d16-d17}, [r3]
   188c0:	subs	r2, r2, ip
   188c4:	beq	188e4 <__assert_fail@plt+0x75c4>
   188c8:	sub	r0, r0, #4
   188cc:	sub	r1, r1, #4
   188d0:	ldr	r3, [r1, r2, lsl #2]
   188d4:	str	r3, [r0, r2, lsl #2]
   188d8:	sub	r2, r2, #1
   188dc:	cmp	r2, #0
   188e0:	bgt	188d0 <__assert_fail@plt+0x75b0>
   188e4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   188e8:	mvn	r3, #0
   188ec:	cmp	lr, #0
   188f0:	bne	188a4 <__assert_fail@plt+0x7584>
   188f4:	b	188c0 <__assert_fail@plt+0x75a0>
   188f8:	sub	ip, r1, #4
   188fc:	sub	r0, r0, #4
   18900:	cmp	r2, #1
   18904:	movlt	r0, #0
   18908:	bxlt	lr
   1890c:	sub	r3, r2, #1
   18910:	ldr	r1, [ip, r2, lsl #2]
   18914:	ldr	r2, [r0, r2, lsl #2]
   18918:	cmp	r2, r1
   1891c:	mov	r2, r3
   18920:	beq	18900 <__assert_fail@plt+0x75e0>
   18924:	mvn	r0, #0
   18928:	movwhi	r0, #1
   1892c:	bx	lr
   18930:	sub	r0, r0, #4
   18934:	mov	r2, r1
   18938:	cmp	r1, #1
   1893c:	blt	18950 <__assert_fail@plt+0x7630>
   18940:	ldr	r3, [r0, r2, lsl #2]
   18944:	sub	r1, r2, #1
   18948:	cmp	r3, #0
   1894c:	beq	18934 <__assert_fail@plt+0x7614>
   18950:	clz	r0, r2
   18954:	lsr	r0, r0, #5
   18958:	bx	lr
   1895c:	cmp	r1, #1
   18960:	bxlt	lr
   18964:	push	{fp, lr}
   18968:	mov	fp, sp
   1896c:	lsl	r2, r1, #2
   18970:	mov	r1, #0
   18974:	bl	11248 <memset@plt>
   18978:	pop	{fp, lr}
   1897c:	bx	lr
   18980:	push	{r4, r5, r6, r7, fp, lr}
   18984:	add	fp, sp, #16
   18988:	cmp	r2, #1
   1898c:	blt	18a14 <__assert_fail@plt+0x76f4>
   18990:	and	ip, r2, #1
   18994:	cmp	r2, #1
   18998:	bne	189ac <__assert_fail@plt+0x768c>
   1899c:	mov	r2, #0
   189a0:	cmp	ip, #0
   189a4:	bne	189f8 <__assert_fail@plt+0x76d8>
   189a8:	b	18a0c <__assert_fail@plt+0x76ec>
   189ac:	sub	lr, r2, ip
   189b0:	add	r4, r0, #4
   189b4:	add	r5, r1, #4
   189b8:	mov	r6, #0
   189bc:	mov	r2, #0
   189c0:	ldr	r7, [r5, #-4]
   189c4:	add	r2, r2, #2
   189c8:	adds	r3, r7, r3
   189cc:	str	r3, [r4, #-4]
   189d0:	ldr	r3, [r5]
   189d4:	add	r5, r5, #8
   189d8:	adcs	r3, r3, #0
   189dc:	str	r3, [r4]
   189e0:	adc	r3, r6, #0
   189e4:	add	r4, r4, #8
   189e8:	cmp	lr, r2
   189ec:	bne	189c0 <__assert_fail@plt+0x76a0>
   189f0:	cmp	ip, #0
   189f4:	beq	18a0c <__assert_fail@plt+0x76ec>
   189f8:	ldr	r1, [r1, r2, lsl #2]
   189fc:	adds	r1, r1, r3
   18a00:	str	r1, [r0, r2, lsl #2]
   18a04:	mov	r0, #0
   18a08:	adc	r3, r0, #0
   18a0c:	mov	r0, r3
   18a10:	pop	{r4, r5, r6, r7, fp, pc}
   18a14:	movw	r0, #5322	; 0x14ca
   18a18:	movw	r1, #1996	; 0x7cc
   18a1c:	movw	r3, #2013	; 0x7dd
   18a20:	movw	r2, #442	; 0x1ba
   18a24:	movt	r0, #3
   18a28:	movt	r1, #3
   18a2c:	movt	r3, #3
   18a30:	bl	11320 <__assert_fail@plt>
   18a34:	push	{r4, r5, r6, sl, fp, lr}
   18a38:	add	fp, sp, #16
   18a3c:	cmp	r3, #1
   18a40:	blt	18a7c <__assert_fail@plt+0x775c>
   18a44:	mov	lr, #0
   18a48:	mov	ip, #0
   18a4c:	ldr	r5, [r1], #4
   18a50:	ldr	r4, [r2], #4
   18a54:	adds	r6, r5, ip
   18a58:	adds	r4, r6, r4
   18a5c:	adc	r6, lr, #0
   18a60:	adds	r5, r5, ip
   18a64:	str	r4, [r0], #4
   18a68:	adc	ip, r6, #0
   18a6c:	subs	r3, r3, #1
   18a70:	bne	18a4c <__assert_fail@plt+0x772c>
   18a74:	mov	r0, ip
   18a78:	pop	{r4, r5, r6, sl, fp, pc}
   18a7c:	mov	ip, #0
   18a80:	mov	r0, ip
   18a84:	pop	{r4, r5, r6, sl, fp, pc}
   18a88:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18a8c:	add	fp, sp, #28
   18a90:	sub	sp, sp, #4
   18a94:	mov	r6, r0
   18a98:	ldr	r0, [fp, #8]
   18a9c:	cmp	r2, r0
   18aa0:	blt	18bbc <__assert_fail@plt+0x789c>
   18aa4:	cmp	r0, #1
   18aa8:	str	r1, [sp]
   18aac:	blt	18af8 <__assert_fail@plt+0x77d8>
   18ab0:	mov	r5, r1
   18ab4:	mov	r8, #0
   18ab8:	mov	r1, r6
   18abc:	mov	r7, r0
   18ac0:	mov	ip, #0
   18ac4:	ldr	sl, [r5], #4
   18ac8:	ldr	r9, [r3], #4
   18acc:	adds	r4, sl, ip
   18ad0:	adds	r9, r4, r9
   18ad4:	adc	lr, r8, #0
   18ad8:	adds	r4, sl, ip
   18adc:	str	r9, [r6], #4
   18ae0:	adc	ip, lr, #0
   18ae4:	subs	r7, r7, #1
   18ae8:	bne	18ac4 <__assert_fail@plt+0x77a4>
   18aec:	cmp	r2, r0
   18af0:	bgt	18b08 <__assert_fail@plt+0x77e8>
   18af4:	b	18bb0 <__assert_fail@plt+0x7890>
   18af8:	mov	r1, r6
   18afc:	mov	ip, #0
   18b00:	cmp	r2, r0
   18b04:	ble	18bb0 <__assert_fail@plt+0x7890>
   18b08:	sub	r3, r2, r0
   18b0c:	mvn	r7, r0
   18b10:	and	lr, r3, #1
   18b14:	cmn	r7, r2
   18b18:	bne	18b34 <__assert_fail@plt+0x7814>
   18b1c:	mov	r8, r1
   18b20:	ldr	r1, [sp]
   18b24:	mov	r2, #0
   18b28:	cmp	lr, #0
   18b2c:	bne	18b94 <__assert_fail@plt+0x7874>
   18b30:	b	18bb0 <__assert_fail@plt+0x7890>
   18b34:	add	r7, r0, lr
   18b38:	mov	r8, r1
   18b3c:	mov	r6, #0
   18b40:	sub	r2, r7, r2
   18b44:	add	r7, r0, #1
   18b48:	add	r4, r1, r7, lsl #2
   18b4c:	ldr	r1, [sp]
   18b50:	add	r5, r1, r7, lsl #2
   18b54:	mov	r7, #0
   18b58:	ldr	r3, [r5, #-4]
   18b5c:	sub	r6, r6, #2
   18b60:	adds	r3, r3, ip
   18b64:	str	r3, [r4, #-4]
   18b68:	ldr	r3, [r5]
   18b6c:	add	r5, r5, #8
   18b70:	adcs	r3, r3, #0
   18b74:	str	r3, [r4]
   18b78:	adc	ip, r7, #0
   18b7c:	add	r4, r4, #8
   18b80:	cmp	r2, r6
   18b84:	bne	18b58 <__assert_fail@plt+0x7838>
   18b88:	rsb	r2, r6, #0
   18b8c:	cmp	lr, #0
   18b90:	beq	18bb0 <__assert_fail@plt+0x7890>
   18b94:	add	r1, r1, r0, lsl #2
   18b98:	add	r0, r8, r0, lsl #2
   18b9c:	ldr	r1, [r1, r2, lsl #2]
   18ba0:	adds	r1, r1, ip
   18ba4:	str	r1, [r0, r2, lsl #2]
   18ba8:	mov	r0, #0
   18bac:	adc	ip, r0, #0
   18bb0:	mov	r0, ip
   18bb4:	sub	sp, fp, #28
   18bb8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18bbc:	movw	r0, #2074	; 0x81a
   18bc0:	movw	r1, #1996	; 0x7cc
   18bc4:	movw	r3, #2083	; 0x823
   18bc8:	mov	r2, #480	; 0x1e0
   18bcc:	movt	r0, #3
   18bd0:	movt	r1, #3
   18bd4:	movt	r3, #3
   18bd8:	bl	11320 <__assert_fail@plt>
   18bdc:	push	{r4, r5, r6, sl, fp, lr}
   18be0:	add	fp, sp, #16
   18be4:	cmp	r2, #1
   18be8:	blt	18c78 <__assert_fail@plt+0x7958>
   18bec:	and	ip, r2, #1
   18bf0:	cmp	r2, #1
   18bf4:	bne	18c08 <__assert_fail@plt+0x78e8>
   18bf8:	mov	r2, #0
   18bfc:	cmp	ip, #0
   18c00:	bne	18c5c <__assert_fail@plt+0x793c>
   18c04:	b	18c70 <__assert_fail@plt+0x7950>
   18c08:	sub	lr, r2, ip
   18c0c:	add	r4, r0, #4
   18c10:	add	r5, r1, #4
   18c14:	mov	r2, #0
   18c18:	ldr	r6, [r5, #-4]
   18c1c:	add	r2, r2, #2
   18c20:	subs	r3, r6, r3
   18c24:	str	r3, [r4, #-4]
   18c28:	mov	r3, #0
   18c2c:	movwcc	r3, #1
   18c30:	ldr	r6, [r5]
   18c34:	add	r5, r5, #8
   18c38:	subs	r3, r6, r3
   18c3c:	str	r3, [r4]
   18c40:	mov	r3, #0
   18c44:	movwcc	r3, #1
   18c48:	add	r4, r4, #8
   18c4c:	cmp	lr, r2
   18c50:	bne	18c18 <__assert_fail@plt+0x78f8>
   18c54:	cmp	ip, #0
   18c58:	beq	18c70 <__assert_fail@plt+0x7950>
   18c5c:	ldr	r1, [r1, r2, lsl #2]
   18c60:	subs	r1, r1, r3
   18c64:	mov	r3, #0
   18c68:	movwcc	r3, #1
   18c6c:	str	r1, [r0, r2, lsl #2]
   18c70:	mov	r0, r3
   18c74:	pop	{r4, r5, r6, sl, fp, pc}
   18c78:	movw	r0, #5322	; 0x14ca
   18c7c:	movw	r1, #1996	; 0x7cc
   18c80:	movw	r3, #2153	; 0x869
   18c84:	movw	r2, #493	; 0x1ed
   18c88:	movt	r0, #3
   18c8c:	movt	r1, #3
   18c90:	movt	r3, #3
   18c94:	bl	11320 <__assert_fail@plt>
   18c98:	push	{r4, r5, fp, lr}
   18c9c:	add	fp, sp, #8
   18ca0:	mov	ip, #0
   18ca4:	cmp	r3, #1
   18ca8:	blt	18cdc <__assert_fail@plt+0x79bc>
   18cac:	ldr	r4, [r2], #4
   18cb0:	ldr	lr, [r1], #4
   18cb4:	adds	r5, r4, ip
   18cb8:	cmp	lr, r5
   18cbc:	mov	r5, #0
   18cc0:	movwcc	r5, #1
   18cc4:	adds	r4, r4, ip
   18cc8:	adc	ip, r5, #0
   18ccc:	sub	r5, lr, r4
   18cd0:	subs	r3, r3, #1
   18cd4:	str	r5, [r0], #4
   18cd8:	bne	18cac <__assert_fail@plt+0x798c>
   18cdc:	mov	r0, ip
   18ce0:	pop	{r4, r5, fp, pc}
   18ce4:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   18ce8:	add	fp, sp, #24
   18cec:	ldr	lr, [fp, #8]
   18cf0:	cmp	r2, lr
   18cf4:	blt	18df0 <__assert_fail@plt+0x7ad0>
   18cf8:	mov	ip, #0
   18cfc:	cmp	lr, #1
   18d00:	blt	18d40 <__assert_fail@plt+0x7a20>
   18d04:	mov	r4, r1
   18d08:	mov	r5, r0
   18d0c:	mov	r6, lr
   18d10:	ldr	r9, [r3], #4
   18d14:	ldr	r8, [r4], #4
   18d18:	adds	r7, r9, ip
   18d1c:	cmp	r8, r7
   18d20:	mov	r7, #0
   18d24:	movwcc	r7, #1
   18d28:	adds	r9, r9, ip
   18d2c:	adc	ip, r7, #0
   18d30:	sub	r7, r8, r9
   18d34:	subs	r6, r6, #1
   18d38:	str	r7, [r5], #4
   18d3c:	bne	18d10 <__assert_fail@plt+0x79f0>
   18d40:	cmp	r2, lr
   18d44:	ble	18de8 <__assert_fail@plt+0x7ac8>
   18d48:	sub	r3, r2, lr
   18d4c:	mvn	r4, lr
   18d50:	and	r8, r3, #1
   18d54:	cmn	r4, r2
   18d58:	bne	18d6c <__assert_fail@plt+0x7a4c>
   18d5c:	mov	r2, #0
   18d60:	cmp	r8, #0
   18d64:	bne	18dcc <__assert_fail@plt+0x7aac>
   18d68:	b	18de8 <__assert_fail@plt+0x7ac8>
   18d6c:	add	r4, lr, r8
   18d70:	add	r5, lr, #1
   18d74:	sub	r2, r4, r2
   18d78:	add	r4, r0, r5, lsl #2
   18d7c:	add	r6, r1, r5, lsl #2
   18d80:	mov	r5, #0
   18d84:	ldr	r7, [r6, #-4]
   18d88:	sub	r5, r5, #2
   18d8c:	subs	r7, r7, ip
   18d90:	mov	ip, #0
   18d94:	str	r7, [r4, #-4]
   18d98:	mov	r7, #0
   18d9c:	movwcc	r7, #1
   18da0:	ldr	r3, [r6]
   18da4:	add	r6, r6, #8
   18da8:	subs	r3, r3, r7
   18dac:	str	r3, [r4]
   18db0:	movwcc	ip, #1
   18db4:	add	r4, r4, #8
   18db8:	cmp	r2, r5
   18dbc:	bne	18d84 <__assert_fail@plt+0x7a64>
   18dc0:	rsb	r2, r5, #0
   18dc4:	cmp	r8, #0
   18dc8:	beq	18de8 <__assert_fail@plt+0x7ac8>
   18dcc:	add	r1, r1, lr, lsl #2
   18dd0:	add	r0, r0, lr, lsl #2
   18dd4:	ldr	r1, [r1, r2, lsl #2]
   18dd8:	subs	r1, r1, ip
   18ddc:	mov	ip, #0
   18de0:	movwcc	ip, #1
   18de4:	str	r1, [r0, r2, lsl #2]
   18de8:	mov	r0, ip
   18dec:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   18df0:	movw	r0, #2074	; 0x81a
   18df4:	movw	r1, #1996	; 0x7cc
   18df8:	movw	r3, #2214	; 0x8a6
   18dfc:	mov	r2, #532	; 0x214
   18e00:	movt	r0, #3
   18e04:	movt	r1, #3
   18e08:	movt	r3, #3
   18e0c:	bl	11320 <__assert_fail@plt>
   18e10:	push	{r4, r5, r6, r7, fp, lr}
   18e14:	add	fp, sp, #16
   18e18:	cmp	r2, #1
   18e1c:	blt	18e78 <__assert_fail@plt+0x7b58>
   18e20:	uxth	lr, r3
   18e24:	lsr	ip, r3, #16
   18e28:	mov	r3, #0
   18e2c:	ldr	r4, [r1], #4
   18e30:	uxth	r5, r4
   18e34:	lsr	r4, r4, #16
   18e38:	mul	r7, r4, lr
   18e3c:	mul	r6, r5, ip
   18e40:	mul	r5, r5, lr
   18e44:	mla	r6, r4, lr, r6
   18e48:	mul	r4, r4, ip
   18e4c:	add	r6, r6, r5, lsr #16
   18e50:	pkhbt	r5, r5, r6, lsl #16
   18e54:	cmp	r6, r7
   18e58:	addcc	r4, r4, #65536	; 0x10000
   18e5c:	adds	r5, r5, r3
   18e60:	adc	r3, r4, r6, lsr #16
   18e64:	str	r5, [r0], #4
   18e68:	subs	r2, r2, #1
   18e6c:	bne	18e2c <__assert_fail@plt+0x7b0c>
   18e70:	mov	r0, r3
   18e74:	pop	{r4, r5, r6, r7, fp, pc}
   18e78:	movw	r0, #2553	; 0x9f9
   18e7c:	movw	r1, #1996	; 0x7cc
   18e80:	movw	r3, #2284	; 0x8ec
   18e84:	movw	r2, #545	; 0x221
   18e88:	movt	r0, #3
   18e8c:	movt	r1, #3
   18e90:	movt	r3, #3
   18e94:	bl	11320 <__assert_fail@plt>
   18e98:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   18e9c:	add	fp, sp, #24
   18ea0:	cmp	r2, #1
   18ea4:	blt	18f14 <__assert_fail@plt+0x7bf4>
   18ea8:	uxth	lr, r3
   18eac:	lsr	ip, r3, #16
   18eb0:	mov	r8, #0
   18eb4:	mov	r3, #0
   18eb8:	ldr	r5, [r1], #4
   18ebc:	uxth	r6, r5
   18ec0:	lsr	r5, r5, #16
   18ec4:	mul	r4, r5, lr
   18ec8:	mul	r7, r6, ip
   18ecc:	mul	r6, r6, lr
   18ed0:	mla	r7, r5, lr, r7
   18ed4:	mul	r5, r5, ip
   18ed8:	add	r7, r7, r6, lsr #16
   18edc:	cmp	r7, r4
   18ee0:	addcc	r5, r5, #65536	; 0x10000
   18ee4:	add	r4, r5, r7, lsr #16
   18ee8:	pkhbt	r5, r6, r7, lsl #16
   18eec:	ldr	r6, [r0]
   18ef0:	adds	r3, r5, r3
   18ef4:	adc	r5, r8, #0
   18ef8:	adds	r6, r3, r6
   18efc:	adc	r3, r4, r5
   18f00:	str	r6, [r0], #4
   18f04:	subs	r2, r2, #1
   18f08:	bne	18eb8 <__assert_fail@plt+0x7b98>
   18f0c:	mov	r0, r3
   18f10:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   18f14:	movw	r0, #2553	; 0x9f9
   18f18:	movw	r1, #1996	; 0x7cc
   18f1c:	movw	r3, #2345	; 0x929
   18f20:	mov	r2, #568	; 0x238
   18f24:	movt	r0, #3
   18f28:	movt	r1, #3
   18f2c:	movt	r3, #3
   18f30:	bl	11320 <__assert_fail@plt>
   18f34:	push	{r4, r5, r6, r7, fp, lr}
   18f38:	add	fp, sp, #16
   18f3c:	cmp	r2, #1
   18f40:	blt	18fb4 <__assert_fail@plt+0x7c94>
   18f44:	uxth	lr, r3
   18f48:	lsr	ip, r3, #16
   18f4c:	mov	r3, #0
   18f50:	ldr	r4, [r1], #4
   18f54:	uxth	r5, r4
   18f58:	lsr	r4, r4, #16
   18f5c:	mul	r7, r4, lr
   18f60:	mul	r6, r5, ip
   18f64:	mul	r5, r5, lr
   18f68:	mla	r6, r4, lr, r6
   18f6c:	mul	r4, r4, ip
   18f70:	add	r6, r6, r5, lsr #16
   18f74:	pkhbt	r5, r5, r6, lsl #16
   18f78:	cmp	r6, r7
   18f7c:	addcc	r4, r4, #65536	; 0x10000
   18f80:	adds	r5, r5, r3
   18f84:	add	r3, r4, r6, lsr #16
   18f88:	adc	r7, r4, r6, lsr #16
   18f8c:	ldr	r4, [r0]
   18f90:	adc	r3, r3, #1
   18f94:	cmp	r4, r5
   18f98:	sub	r4, r4, r5
   18f9c:	movcs	r3, r7
   18fa0:	str	r4, [r0], #4
   18fa4:	subs	r2, r2, #1
   18fa8:	bne	18f50 <__assert_fail@plt+0x7c30>
   18fac:	mov	r0, r3
   18fb0:	pop	{r4, r5, r6, r7, fp, pc}
   18fb4:	movw	r0, #2553	; 0x9f9
   18fb8:	movw	r1, #1996	; 0x7cc
   18fbc:	movw	r3, #2409	; 0x969
   18fc0:	movw	r2, #594	; 0x252
   18fc4:	movt	r0, #3
   18fc8:	movt	r1, #3
   18fcc:	movt	r3, #3
   18fd0:	bl	11320 <__assert_fail@plt>
   18fd4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18fd8:	add	fp, sp, #28
   18fdc:	sub	sp, sp, #12
   18fe0:	ldr	lr, [fp, #8]
   18fe4:	cmp	r2, lr
   18fe8:	blt	1913c <__assert_fail@plt+0x7e1c>
   18fec:	cmp	lr, #0
   18ff0:	ble	19154 <__assert_fail@plt+0x7e34>
   18ff4:	add	r7, lr, r2
   18ff8:	add	r6, r1, r2, lsl #2
   18ffc:	add	r7, r0, r7, lsl #2
   19000:	cmp	r6, r0
   19004:	cmphi	r7, r1
   19008:	bhi	1916c <__assert_fail@plt+0x7e4c>
   1900c:	add	r6, r3, lr, lsl #2
   19010:	cmp	r6, r0
   19014:	cmphi	r7, r3
   19018:	bhi	19184 <__assert_fail@plt+0x7e64>
   1901c:	cmp	r2, #1
   19020:	blt	191a4 <__assert_fail@plt+0x7e84>
   19024:	ldr	r7, [r3]
   19028:	mov	r6, #0
   1902c:	mov	ip, #0
   19030:	uxth	r9, r7
   19034:	lsr	r8, r7, #16
   19038:	ldr	r7, [r1, r6, lsl #2]
   1903c:	uxth	r4, r7
   19040:	lsr	r7, r7, #16
   19044:	mul	sl, r7, r9
   19048:	mul	r5, r4, r8
   1904c:	mul	r4, r4, r9
   19050:	mla	r5, r7, r9, r5
   19054:	mul	r7, r7, r8
   19058:	add	r5, r5, r4, lsr #16
   1905c:	pkhbt	r4, r4, r5, lsl #16
   19060:	cmp	r5, sl
   19064:	addcc	r7, r7, #65536	; 0x10000
   19068:	adds	r4, r4, ip
   1906c:	str	r4, [r0, r6, lsl #2]
   19070:	adc	ip, r7, r5, lsr #16
   19074:	add	r6, r6, #1
   19078:	cmp	r2, r6
   1907c:	bne	19038 <__assert_fail@plt+0x7d18>
   19080:	sub	r7, lr, #1
   19084:	str	ip, [r0, r2, lsl #2]
   19088:	cmp	r7, #1
   1908c:	blt	19130 <__assert_fail@plt+0x7e10>
   19090:	mov	r9, #0
   19094:	str	r7, [sp, #4]
   19098:	add	r7, r0, #4
   1909c:	mov	r5, #0
   190a0:	mov	ip, #0
   190a4:	str	r7, [sp]
   190a8:	ldr	r7, [r3, #4]!
   190ac:	str	r3, [sp, #8]
   190b0:	uxth	lr, r7
   190b4:	lsr	sl, r7, #16
   190b8:	ldr	r4, [r1, r5, lsl #2]
   190bc:	uxth	r6, r4
   190c0:	lsr	r4, r4, #16
   190c4:	mul	r7, r4, lr
   190c8:	mul	r8, r6, sl
   190cc:	mul	r6, r6, lr
   190d0:	mla	r3, r4, lr, r8
   190d4:	mul	r4, r4, sl
   190d8:	add	r3, r3, r6, lsr #16
   190dc:	pkhbt	r6, r6, r3, lsl #16
   190e0:	adds	r8, r6, ip
   190e4:	adc	ip, r9, #0
   190e8:	cmp	r3, r7
   190ec:	add	r7, r0, r5, lsl #2
   190f0:	add	r5, r5, #1
   190f4:	addcc	r4, r4, #65536	; 0x10000
   190f8:	ldr	r6, [r7, #4]
   190fc:	add	r3, r4, r3, lsr #16
   19100:	adds	r6, r8, r6
   19104:	adc	ip, r3, ip
   19108:	cmp	r2, r5
   1910c:	str	r6, [r7, #4]
   19110:	bne	190b8 <__assert_fail@plt+0x7d98>
   19114:	ldr	r7, [sp, #4]
   19118:	ldr	r0, [sp]
   1911c:	ldr	r3, [sp, #8]
   19120:	sub	r7, r7, #1
   19124:	str	ip, [r0, r2, lsl #2]
   19128:	cmp	r7, #0
   1912c:	bgt	19094 <__assert_fail@plt+0x7d74>
   19130:	mov	r0, ip
   19134:	sub	sp, fp, #28
   19138:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1913c:	movw	r0, #2473	; 0x9a9
   19140:	movw	r1, #1996	; 0x7cc
   19144:	movw	r3, #2482	; 0x9b2
   19148:	movw	r2, #618	; 0x26a
   1914c:	movt	r0, #3
   19150:	b	19198 <__assert_fail@plt+0x7e78>
   19154:	movw	r0, #2552	; 0x9f8
   19158:	movw	r1, #1996	; 0x7cc
   1915c:	movw	r3, #2482	; 0x9b2
   19160:	movw	r2, #619	; 0x26b
   19164:	movt	r0, #3
   19168:	b	19198 <__assert_fail@plt+0x7e78>
   1916c:	movw	r0, #2560	; 0xa00
   19170:	movw	r1, #1996	; 0x7cc
   19174:	movw	r3, #2482	; 0x9b2
   19178:	mov	r2, #620	; 0x26c
   1917c:	movt	r0, #3
   19180:	b	19198 <__assert_fail@plt+0x7e78>
   19184:	movw	r0, #2600	; 0xa28
   19188:	movw	r1, #1996	; 0x7cc
   1918c:	movw	r3, #2482	; 0x9b2
   19190:	movw	r2, #621	; 0x26d
   19194:	movt	r0, #3
   19198:	movt	r1, #3
   1919c:	movt	r3, #3
   191a0:	bl	11320 <__assert_fail@plt>
   191a4:	movw	r0, #2553	; 0x9f9
   191a8:	movw	r1, #1996	; 0x7cc
   191ac:	movw	r3, #2284	; 0x8ec
   191b0:	movw	r2, #545	; 0x221
   191b4:	movt	r0, #3
   191b8:	movt	r1, #3
   191bc:	movt	r3, #3
   191c0:	bl	11320 <__assert_fail@plt>
   191c4:	push	{fp, lr}
   191c8:	mov	fp, sp
   191cc:	sub	sp, sp, #8
   191d0:	mov	ip, r2
   191d4:	str	r3, [sp]
   191d8:	mov	r2, r3
   191dc:	mov	r3, ip
   191e0:	bl	18fd4 <__assert_fail@plt+0x7cb4>
   191e4:	mov	sp, fp
   191e8:	pop	{fp, pc}
   191ec:	push	{fp, lr}
   191f0:	mov	fp, sp
   191f4:	sub	sp, sp, #8
   191f8:	mov	r3, r1
   191fc:	str	r2, [sp]
   19200:	bl	18fd4 <__assert_fail@plt+0x7cb4>
   19204:	mov	sp, fp
   19208:	pop	{fp, pc}
   1920c:	push	{r4, r5, r6, sl, fp, lr}
   19210:	add	fp, sp, #16
   19214:	cmp	r2, #0
   19218:	ble	192a8 <__assert_fail@plt+0x7f88>
   1921c:	cmp	r3, #0
   19220:	beq	192c0 <__assert_fail@plt+0x7fa0>
   19224:	cmp	r3, #32
   19228:	bcs	192d8 <__assert_fail@plt+0x7fb8>
   1922c:	add	r5, r1, r2, lsl #2
   19230:	add	ip, r0, r2, lsl #2
   19234:	rsb	lr, r3, #32
   19238:	subs	r4, r2, #1
   1923c:	ldr	r0, [r5, #-4]!
   19240:	lsl	r1, r0, r3
   19244:	lsr	r0, r0, lr
   19248:	beq	192a0 <__assert_fail@plt+0x7f80>
   1924c:	tst	r2, #1
   19250:	bne	19268 <__assert_fail@plt+0x7f48>
   19254:	ldr	r4, [r5, #-4]!
   19258:	orr	r1, r1, r4, lsr lr
   1925c:	str	r1, [ip, #-4]!
   19260:	lsl	r1, r4, r3
   19264:	sub	r4, r2, #2
   19268:	cmp	r2, #2
   1926c:	beq	192a0 <__assert_fail@plt+0x7f80>
   19270:	sub	r2, r5, #4
   19274:	ldr	r5, [r2]
   19278:	subs	r4, r4, #2
   1927c:	orr	r1, r1, r5, lsr lr
   19280:	str	r1, [ip, #-4]
   19284:	ldr	r6, [r2, #-4]
   19288:	sub	r2, r2, #8
   1928c:	lsl	r1, r6, r3
   19290:	lsr	r6, r6, lr
   19294:	orr	r5, r6, r5, lsl r3
   19298:	str	r5, [ip, #-8]!
   1929c:	bne	19274 <__assert_fail@plt+0x7f54>
   192a0:	str	r1, [ip, #-4]
   192a4:	pop	{r4, r5, r6, sl, fp, pc}
   192a8:	movw	r0, #2553	; 0x9f9
   192ac:	movw	r1, #1996	; 0x7cc
   192b0:	movw	r3, #2640	; 0xa50
   192b4:	movw	r2, #659	; 0x293
   192b8:	movt	r0, #3
   192bc:	b	192ec <__assert_fail@plt+0x7fcc>
   192c0:	movw	r0, #2705	; 0xa91
   192c4:	movw	r1, #1996	; 0x7cc
   192c8:	movw	r3, #2640	; 0xa50
   192cc:	mov	r2, #660	; 0x294
   192d0:	movt	r0, #3
   192d4:	b	192ec <__assert_fail@plt+0x7fcc>
   192d8:	movw	r0, #2714	; 0xa9a
   192dc:	movw	r1, #1996	; 0x7cc
   192e0:	movw	r3, #2640	; 0xa50
   192e4:	movw	r2, #661	; 0x295
   192e8:	movt	r0, #3
   192ec:	movt	r1, #3
   192f0:	movt	r3, #3
   192f4:	bl	11320 <__assert_fail@plt>
   192f8:	push	{r4, r5, r6, r7, fp, lr}
   192fc:	add	fp, sp, #16
   19300:	cmp	r2, #0
   19304:	ble	19394 <__assert_fail@plt+0x8074>
   19308:	cmp	r3, #0
   1930c:	beq	193ac <__assert_fail@plt+0x808c>
   19310:	cmp	r3, #32
   19314:	bcs	193c4 <__assert_fail@plt+0x80a4>
   19318:	ldr	r5, [r1]
   1931c:	rsb	r7, r3, #32
   19320:	lsr	lr, r5, r3
   19324:	lsl	ip, r5, r7
   19328:	subs	r5, r2, #1
   1932c:	beq	19388 <__assert_fail@plt+0x8068>
   19330:	tst	r2, #1
   19334:	bne	1934c <__assert_fail@plt+0x802c>
   19338:	ldr	r6, [r1, #4]!
   1933c:	orr	r5, lr, r6, lsl r7
   19340:	lsr	lr, r6, r3
   19344:	str	r5, [r0], #4
   19348:	sub	r5, r2, #2
   1934c:	cmp	r2, #2
   19350:	beq	19388 <__assert_fail@plt+0x8068>
   19354:	add	r1, r1, #4
   19358:	ldr	r2, [r1]
   1935c:	subs	r5, r5, #2
   19360:	orr	r6, lr, r2, lsl r7
   19364:	str	r6, [r0]
   19368:	ldr	r6, [r1, #4]
   1936c:	add	r1, r1, #8
   19370:	lsl	r4, r6, r7
   19374:	lsr	lr, r6, r3
   19378:	orr	r2, r4, r2, lsr r3
   1937c:	str	r2, [r0, #4]
   19380:	add	r0, r0, #8
   19384:	bne	19358 <__assert_fail@plt+0x8038>
   19388:	str	lr, [r0]
   1938c:	mov	r0, ip
   19390:	pop	{r4, r5, r6, r7, fp, pc}
   19394:	movw	r0, #2553	; 0x9f9
   19398:	movw	r1, #1996	; 0x7cc
   1939c:	movw	r3, #2734	; 0xaae
   193a0:	movw	r2, #689	; 0x2b1
   193a4:	movt	r0, #3
   193a8:	b	193d8 <__assert_fail@plt+0x80b8>
   193ac:	movw	r0, #2705	; 0xa91
   193b0:	movw	r1, #1996	; 0x7cc
   193b4:	movw	r3, #2734	; 0xaae
   193b8:	movw	r2, #690	; 0x2b2
   193bc:	movt	r0, #3
   193c0:	b	193d8 <__assert_fail@plt+0x80b8>
   193c4:	movw	r0, #2714	; 0xa9a
   193c8:	movw	r1, #1996	; 0x7cc
   193cc:	movw	r3, #2734	; 0xaae
   193d0:	movw	r2, #691	; 0x2b3
   193d4:	movt	r0, #3
   193d8:	movt	r1, #3
   193dc:	movt	r3, #3
   193e0:	bl	11320 <__assert_fail@plt>
   193e4:	lsr	ip, r1, #5
   193e8:	and	r1, r1, #31
   193ec:	mvn	r2, #0
   193f0:	ldr	r3, [r0, ip, lsl #2]
   193f4:	and	r1, r3, r2, lsl r1
   193f8:	cmp	r1, #0
   193fc:	bne	1942c <__assert_fail@plt+0x810c>
   19400:	add	r0, r0, ip, lsl #2
   19404:	add	r3, r0, #4
   19408:	mov	r0, #0
   1940c:	cmp	r0, #1
   19410:	mvneq	r0, #0
   19414:	bxeq	lr
   19418:	ldr	r1, [r3, -r0, lsl #2]
   1941c:	sub	r0, r0, #1
   19420:	cmp	r1, #0
   19424:	beq	1940c <__assert_fail@plt+0x80ec>
   19428:	sub	ip, ip, r0
   1942c:	rsb	r0, r1, #0
   19430:	and	r1, r1, r0
   19434:	mov	r0, #0
   19438:	cmp	r0, r1, lsr #24
   1943c:	bne	19454 <__assert_fail@plt+0x8134>
   19440:	mov	r0, #0
   19444:	lsl	r1, r1, #8
   19448:	add	r0, r0, #8
   1944c:	cmp	r1, #16777216	; 0x1000000
   19450:	bcc	19444 <__assert_fail@plt+0x8124>
   19454:	cmp	r1, #0
   19458:	bmi	1946c <__assert_fail@plt+0x814c>
   1945c:	lsl	r1, r1, #1
   19460:	add	r0, r0, #1
   19464:	cmn	r1, #1
   19468:	bgt	1945c <__assert_fail@plt+0x813c>
   1946c:	mov	r1, #31
   19470:	orr	r1, r1, ip, lsl #5
   19474:	sub	r0, r1, r0
   19478:	bx	lr
   1947c:	push	{r4, sl, fp, lr}
   19480:	add	fp, sp, #8
   19484:	ldr	ip, [fp, #8]
   19488:	add	r4, ip, #1
   1948c:	cmp	r4, #2
   19490:	bcs	19550 <__assert_fail@plt+0x8230>
   19494:	cmp	r1, #0
   19498:	bmi	19538 <__assert_fail@plt+0x8218>
   1949c:	cmp	r1, r3
   194a0:	bgt	19538 <__assert_fail@plt+0x8218>
   194a4:	cmp	r0, #0
   194a8:	beq	194b4 <__assert_fail@plt+0x8194>
   194ac:	mov	r2, r1
   194b0:	b	194d8 <__assert_fail@plt+0x81b8>
   194b4:	sub	lr, r3, #1
   194b8:	add	r4, r2, #4
   194bc:	cmp	lr, r1
   194c0:	beq	19528 <__assert_fail@plt+0x8208>
   194c4:	ldr	r0, [r4, r1, lsl #2]
   194c8:	add	r2, r1, #1
   194cc:	mov	r1, r2
   194d0:	eors	r0, r0, ip
   194d4:	beq	194bc <__assert_fail@plt+0x819c>
   194d8:	rsb	r1, r0, #0
   194dc:	and	r1, r0, r1
   194e0:	mov	r0, #0
   194e4:	cmp	r0, r1, lsr #24
   194e8:	bne	19500 <__assert_fail@plt+0x81e0>
   194ec:	mov	r0, #0
   194f0:	lsl	r1, r1, #8
   194f4:	add	r0, r0, #8
   194f8:	cmp	r1, #16777216	; 0x1000000
   194fc:	bcc	194f0 <__assert_fail@plt+0x81d0>
   19500:	cmp	r1, #0
   19504:	bmi	19518 <__assert_fail@plt+0x81f8>
   19508:	lsl	r1, r1, #1
   1950c:	add	r0, r0, #1
   19510:	cmn	r1, #1
   19514:	bgt	19508 <__assert_fail@plt+0x81e8>
   19518:	mov	r1, #31
   1951c:	orr	r1, r1, r2, lsl #5
   19520:	sub	r0, r1, r0
   19524:	pop	{r4, sl, fp, pc}
   19528:	cmp	ip, #0
   1952c:	lsl	r0, r3, #5
   19530:	mvneq	r0, #0
   19534:	pop	{r4, sl, fp, pc}
   19538:	movw	r0, #4927	; 0x133f
   1953c:	movw	r1, #1996	; 0x7cc
   19540:	movw	r3, #4844	; 0x12ec
   19544:	mov	r2, #716	; 0x2cc
   19548:	movt	r0, #3
   1954c:	b	19564 <__assert_fail@plt+0x8244>
   19550:	movw	r0, #4814	; 0x12ce
   19554:	movw	r1, #1996	; 0x7cc
   19558:	movw	r3, #4844	; 0x12ec
   1955c:	movw	r2, #715	; 0x2cb
   19560:	movt	r0, #3
   19564:	movt	r1, #3
   19568:	movt	r3, #3
   1956c:	bl	11320 <__assert_fail@plt>
   19570:	push	{fp, lr}
   19574:	mov	fp, sp
   19578:	lsr	ip, r1, #5
   1957c:	and	r3, r1, #31
   19580:	ldr	r2, [r0, ip, lsl #2]
   19584:	mvn	lr, r2
   19588:	mvn	r2, #0
   1958c:	and	r3, lr, r2, lsl r3
   19590:	cmp	r3, #0
   19594:	bne	195c4 <__assert_fail@plt+0x82a4>
   19598:	add	r0, r0, ip, lsl #2
   1959c:	add	r3, r0, #4
   195a0:	mov	r0, #0
   195a4:	cmp	r0, #1
   195a8:	beq	19614 <__assert_fail@plt+0x82f4>
   195ac:	ldr	r2, [r3, -r0, lsl #2]
   195b0:	sub	r0, r0, #1
   195b4:	cmn	r2, #1
   195b8:	beq	195a4 <__assert_fail@plt+0x8284>
   195bc:	sub	ip, ip, r0
   195c0:	mvn	r3, r2
   195c4:	rsb	r0, r3, #0
   195c8:	and	r1, r3, r0
   195cc:	mov	r0, #0
   195d0:	cmp	r0, r1, lsr #24
   195d4:	bne	195ec <__assert_fail@plt+0x82cc>
   195d8:	mov	r0, #0
   195dc:	lsl	r1, r1, #8
   195e0:	add	r0, r0, #8
   195e4:	cmp	r1, #16777216	; 0x1000000
   195e8:	bcc	195dc <__assert_fail@plt+0x82bc>
   195ec:	cmp	r1, #0
   195f0:	bmi	19604 <__assert_fail@plt+0x82e4>
   195f4:	lsl	r1, r1, #1
   195f8:	add	r0, r0, #1
   195fc:	cmn	r1, #1
   19600:	bgt	195f4 <__assert_fail@plt+0x82d4>
   19604:	mov	r1, #31
   19608:	orr	r1, r1, ip, lsl #5
   1960c:	sub	r0, r1, r0
   19610:	pop	{fp, pc}
   19614:	bic	r0, r1, #31
   19618:	pop	{fp, pc}
   1961c:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   19620:	add	fp, sp, #24
   19624:	cmp	r2, #1
   19628:	blt	196e4 <__assert_fail@plt+0x83c4>
   1962c:	cmp	r2, #4
   19630:	bcc	196cc <__assert_fail@plt+0x83ac>
   19634:	add	r3, r1, r2, lsl #2
   19638:	cmp	r3, r0
   1963c:	addhi	r3, r0, r2, lsl #2
   19640:	cmphi	r3, r1
   19644:	bhi	196cc <__assert_fail@plt+0x83ac>
   19648:	bic	ip, r2, #3
   1964c:	mov	r7, #1
   19650:	subs	r3, ip, #4
   19654:	add	r3, r7, r3, lsr #2
   19658:	and	lr, r3, #1
   1965c:	beq	196e8 <__assert_fail@plt+0x83c8>
   19660:	sub	r4, r3, lr
   19664:	mov	r3, #0
   19668:	mov	r8, #32
   1966c:	mov	r6, r0
   19670:	mov	r7, r1
   19674:	add	r9, r7, #16
   19678:	vld1.32	{d16-d17}, [r7], r8
   1967c:	add	r5, r6, #16
   19680:	subs	r4, r4, #2
   19684:	add	r3, r3, #8
   19688:	vmvn	q8, q8
   1968c:	vst1.32	{d16-d17}, [r6], r8
   19690:	vld1.32	{d16-d17}, [r9]
   19694:	vmvn	q8, q8
   19698:	vst1.32	{d16-d17}, [r5]
   1969c:	bne	19674 <__assert_fail@plt+0x8354>
   196a0:	cmp	lr, #0
   196a4:	beq	196bc <__assert_fail@plt+0x839c>
   196a8:	add	r7, r1, r3, lsl #2
   196ac:	add	r3, r0, r3, lsl #2
   196b0:	vld1.32	{d16-d17}, [r7]
   196b4:	vmvn	q8, q8
   196b8:	vst1.32	{d16-d17}, [r3]
   196bc:	subs	r2, r2, ip
   196c0:	beq	196e4 <__assert_fail@plt+0x83c4>
   196c4:	add	r0, r0, ip, lsl #2
   196c8:	add	r1, r1, ip, lsl #2
   196cc:	ldr	r3, [r1], #4
   196d0:	sub	r2, r2, #1
   196d4:	cmp	r2, #0
   196d8:	mvn	r3, r3
   196dc:	str	r3, [r0], #4
   196e0:	bgt	196cc <__assert_fail@plt+0x83ac>
   196e4:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   196e8:	mov	r3, #0
   196ec:	cmp	lr, #0
   196f0:	bne	196a8 <__assert_fail@plt+0x8388>
   196f4:	b	196bc <__assert_fail@plt+0x839c>
   196f8:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   196fc:	add	fp, sp, #24
   19700:	ldr	r3, [r1]
   19704:	cmp	r3, #0
   19708:	bne	1974c <__assert_fail@plt+0x842c>
   1970c:	mov	ip, #0
   19710:	mov	r7, #0
   19714:	mov	r6, #0
   19718:	add	r3, r2, r6
   1971c:	str	ip, [r0, -r6, lsl #2]
   19720:	cmp	r3, #1
   19724:	beq	19840 <__assert_fail@plt+0x8520>
   19728:	sub	r3, r1, r6, lsl #2
   1972c:	sub	r7, r7, #4
   19730:	sub	r6, r6, #1
   19734:	ldr	r3, [r3, #4]
   19738:	cmp	r3, #0
   1973c:	beq	19718 <__assert_fail@plt+0x83f8>
   19740:	sub	r0, r0, r7
   19744:	sub	r1, r1, r7
   19748:	add	r2, r2, r6
   1974c:	rsb	r3, r3, #0
   19750:	str	r3, [r0]
   19754:	sub	r3, r2, #1
   19758:	cmp	r3, #1
   1975c:	blt	1983c <__assert_fail@plt+0x851c>
   19760:	sub	lr, r2, #1
   19764:	cmp	lr, #4
   19768:	bcc	1981c <__assert_fail@plt+0x84fc>
   1976c:	add	r7, r1, r2, lsl #2
   19770:	add	r6, r0, #4
   19774:	cmp	r6, r7
   19778:	addcc	r2, r0, r2, lsl #2
   1977c:	addcc	r7, r1, #4
   19780:	cmpcc	r7, r2
   19784:	bcc	1981c <__assert_fail@plt+0x84fc>
   19788:	bic	r8, lr, #3
   1978c:	mov	r7, #1
   19790:	subs	r2, r8, #4
   19794:	add	r2, r7, r2, lsr #2
   19798:	and	ip, r2, #1
   1979c:	beq	19848 <__assert_fail@plt+0x8528>
   197a0:	sub	r5, ip, r2
   197a4:	add	r6, r1, #20
   197a8:	add	r7, r0, #20
   197ac:	mov	r4, #0
   197b0:	mov	r9, #32
   197b4:	sub	r2, r6, #16
   197b8:	adds	r5, r5, #2
   197bc:	add	r4, r4, #8
   197c0:	vld1.32	{d16-d17}, [r2]
   197c4:	sub	r2, r7, #16
   197c8:	vmvn	q8, q8
   197cc:	vst1.32	{d16-d17}, [r2]
   197d0:	vld1.32	{d16-d17}, [r6], r9
   197d4:	vmvn	q8, q8
   197d8:	vst1.32	{d16-d17}, [r7], r9
   197dc:	bne	197b4 <__assert_fail@plt+0x8494>
   197e0:	cmp	ip, #0
   197e4:	beq	19804 <__assert_fail@plt+0x84e4>
   197e8:	add	r2, r1, r4, lsl #2
   197ec:	add	r2, r2, #4
   197f0:	vld1.32	{d16-d17}, [r2]
   197f4:	add	r2, r0, r4, lsl #2
   197f8:	add	r2, r2, #4
   197fc:	vmvn	q8, q8
   19800:	vst1.32	{d16-d17}, [r2]
   19804:	mov	ip, #1
   19808:	cmp	lr, r8
   1980c:	beq	19840 <__assert_fail@plt+0x8520>
   19810:	add	r0, r0, r8, lsl #2
   19814:	add	r1, r1, r8, lsl #2
   19818:	sub	r3, r3, r8
   1981c:	add	r0, r0, #4
   19820:	add	r1, r1, #4
   19824:	ldr	r2, [r1], #4
   19828:	sub	r3, r3, #1
   1982c:	cmp	r3, #0
   19830:	mvn	r2, r2
   19834:	str	r2, [r0], #4
   19838:	bgt	19824 <__assert_fail@plt+0x8504>
   1983c:	mov	ip, #1
   19840:	mov	r0, ip
   19844:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   19848:	mov	r4, #0
   1984c:	cmp	ip, #0
   19850:	bne	197e8 <__assert_fail@plt+0x84c8>
   19854:	b	19804 <__assert_fail@plt+0x84e4>
   19858:	push	{r4, r5, r6, r7, fp, lr}
   1985c:	add	fp, sp, #16
   19860:	lsr	r3, r0, #16
   19864:	mvn	r4, r0
   19868:	uxth	r2, r0
   1986c:	movw	ip, #65535	; 0xffff
   19870:	udiv	r6, r4, r3
   19874:	mul	lr, r6, r2
   19878:	mls	r2, r6, r3, r4
   1987c:	orr	r3, ip, r2, lsl #16
   19880:	cmp	r3, lr
   19884:	bcs	198b0 <__assert_fail@plt+0x8590>
   19888:	add	r3, r3, r0
   1988c:	sub	r4, r6, #1
   19890:	cmp	r3, r0
   19894:	bcc	198ac <__assert_fail@plt+0x858c>
   19898:	cmp	r3, lr
   1989c:	subcc	r6, r6, #2
   198a0:	addcc	r3, r3, r0
   198a4:	movcs	r6, r4
   198a8:	b	198b0 <__assert_fail@plt+0x8590>
   198ac:	mov	r6, r4
   198b0:	sub	r2, r3, lr
   198b4:	lsr	r3, r2, #16
   198b8:	mla	r4, r3, r6, r2
   198bc:	mov	r3, #1
   198c0:	orr	r2, ip, r2, lsl #16
   198c4:	add	r5, r3, r4, lsr #16
   198c8:	mls	r3, r5, r0, r2
   198cc:	cmp	r3, r4, lsl #16
   198d0:	lsrcs	r5, r4, #16
   198d4:	addcs	r3, r3, r0
   198d8:	add	r2, r5, r6, lsl #16
   198dc:	cmp	r3, r0
   198e0:	mov	r6, #0
   198e4:	movwcs	r6, #1
   198e8:	cmp	r1, #0
   198ec:	add	ip, r2, r6
   198f0:	beq	19994 <__assert_fail@plt+0x8674>
   198f4:	mvn	r2, r3
   198f8:	cmp	r3, r0
   198fc:	add	r2, r2, r1
   19900:	addcs	r2, r2, r0
   19904:	cmp	r2, r1
   19908:	bcs	19920 <__assert_fail@plt+0x8600>
   1990c:	subs	r2, r2, r0
   19910:	mvn	r3, #1
   19914:	mvncc	r3, #0
   19918:	subcs	r2, r2, r0
   1991c:	add	ip, r3, ip
   19920:	uxth	r3, r1
   19924:	lsr	r4, ip, #16
   19928:	uxth	r7, ip
   1992c:	lsr	r5, r1, #16
   19930:	mul	r6, r4, r3
   19934:	mul	lr, r7, r3
   19938:	mul	r4, r4, r5
   1993c:	mla	r6, r7, r5, r6
   19940:	add	r3, r6, lr, lsr #16
   19944:	mul	r6, r7, r5
   19948:	cmp	r3, r6
   1994c:	addcc	r4, r4, #65536	; 0x10000
   19950:	add	r4, r4, r3, lsr #16
   19954:	adds	r2, r4, r2
   19958:	bcc	19994 <__assert_fail@plt+0x8674>
   1995c:	pkhbt	r3, lr, r3, lsl #16
   19960:	cmp	r2, r0
   19964:	sub	r0, r2, r0
   19968:	mov	r5, #0
   1996c:	mov	r4, #0
   19970:	clz	r0, r0
   19974:	movwhi	r5, #1
   19978:	cmp	r3, r1
   1997c:	lsr	r0, r0, #5
   19980:	movwhi	r4, #1
   19984:	and	r0, r4, r0
   19988:	orr	r0, r5, r0
   1998c:	mvn	r0, r0
   19990:	add	ip, ip, r0
   19994:	mov	r0, ip
   19998:	pop	{r4, r5, r6, r7, fp, pc}
   1999c:	push	{r4, sl, fp, lr}
   199a0:	add	fp, sp, #8
   199a4:	sub	sp, sp, #16
   199a8:	cmp	r3, #0
   199ac:	ble	19b10 <__assert_fail@plt+0x87f0>
   199b0:	mov	ip, r2
   199b4:	add	r2, r2, r3, lsl #2
   199b8:	ldr	r2, [r2, #-4]
   199bc:	cmp	r2, #0
   199c0:	beq	19b28 <__assert_fail@plt+0x8808>
   199c4:	cmp	r1, #63	; 0x3f
   199c8:	bgt	19a68 <__assert_fail@plt+0x8748>
   199cc:	sub	r4, r1, #2
   199d0:	cmp	r4, #30
   199d4:	bhi	19ac0 <__assert_fail@plt+0x87a0>
   199d8:	add	r2, pc, #4
   199dc:	mov	lr, #1
   199e0:	ldr	pc, [r2, r4, lsl #2]
   199e4:	andeq	r9, r1, ip, lsr #21
   199e8:	andeq	r9, r1, r0, asr #21
   199ec:	andeq	r9, r1, r0, ror #20
   199f0:	andeq	r9, r1, r0, asr #21
   199f4:	andeq	r9, r1, r0, asr #21
   199f8:	andeq	r9, r1, r0, asr #21
   199fc:	muleq	r1, r0, sl
   19a00:	andeq	r9, r1, r0, asr #21
   19a04:	andeq	r9, r1, r0, asr #21
   19a08:	andeq	r9, r1, r0, asr #21
   19a0c:	andeq	r9, r1, r0, asr #21
   19a10:	andeq	r9, r1, r0, asr #21
   19a14:	andeq	r9, r1, r0, asr #21
   19a18:	andeq	r9, r1, r0, asr #21
   19a1c:	andeq	r9, r1, r8, lsl #21
   19a20:	andeq	r9, r1, r0, asr #21
   19a24:	andeq	r9, r1, r0, asr #21
   19a28:	andeq	r9, r1, r0, asr #21
   19a2c:	andeq	r9, r1, r0, asr #21
   19a30:	andeq	r9, r1, r0, asr #21
   19a34:	andeq	r9, r1, r0, asr #21
   19a38:	andeq	r9, r1, r0, asr #21
   19a3c:	andeq	r9, r1, r0, asr #21
   19a40:	andeq	r9, r1, r0, asr #21
   19a44:	andeq	r9, r1, r0, asr #21
   19a48:	andeq	r9, r1, r0, asr #21
   19a4c:	andeq	r9, r1, r0, asr #21
   19a50:	andeq	r9, r1, r0, asr #21
   19a54:	andeq	r9, r1, r0, asr #21
   19a58:	andeq	r9, r1, r0, asr #21
   19a5c:	muleq	r1, r8, sl
   19a60:	mov	lr, #2
   19a64:	b	19aac <__assert_fail@plt+0x878c>
   19a68:	cmp	r1, #64	; 0x40
   19a6c:	beq	19aa0 <__assert_fail@plt+0x8780>
   19a70:	cmp	r1, #128	; 0x80
   19a74:	beq	19aa8 <__assert_fail@plt+0x8788>
   19a78:	cmp	r1, #256	; 0x100
   19a7c:	bne	19ac0 <__assert_fail@plt+0x87a0>
   19a80:	mov	lr, #8
   19a84:	b	19aac <__assert_fail@plt+0x878c>
   19a88:	mov	lr, #4
   19a8c:	b	19aac <__assert_fail@plt+0x878c>
   19a90:	mov	lr, #3
   19a94:	b	19aac <__assert_fail@plt+0x878c>
   19a98:	mov	lr, #5
   19a9c:	b	19aac <__assert_fail@plt+0x878c>
   19aa0:	mov	lr, #6
   19aa4:	b	19aac <__assert_fail@plt+0x878c>
   19aa8:	mov	lr, #7
   19aac:	mov	r1, lr
   19ab0:	mov	r2, ip
   19ab4:	sub	sp, fp, #8
   19ab8:	pop	{r4, sl, fp, lr}
   19abc:	b	19b48 <__assert_fail@plt+0x8828>
   19ac0:	mvn	r2, #0
   19ac4:	mov	r4, r1
   19ac8:	udiv	lr, r2, r1
   19acc:	mov	r2, #1
   19ad0:	cmp	lr, r1
   19ad4:	bcc	19af0 <__assert_fail@plt+0x87d0>
   19ad8:	mov	r2, #1
   19adc:	mov	r4, r1
   19ae0:	mul	r4, r4, r1
   19ae4:	add	r2, r2, #1
   19ae8:	cmp	r4, lr
   19aec:	bls	19ae0 <__assert_fail@plt+0x87c0>
   19af0:	str	r4, [sp, #12]
   19af4:	str	r2, [sp, #8]
   19af8:	str	r3, [sp]
   19afc:	add	r2, sp, #8
   19b00:	mov	r3, ip
   19b04:	bl	19c48 <__assert_fail@plt+0x8928>
   19b08:	sub	sp, fp, #8
   19b0c:	pop	{r4, sl, fp, pc}
   19b10:	movw	r0, #2799	; 0xaef
   19b14:	movw	r1, #1996	; 0x7cc
   19b18:	movw	r3, #2806	; 0xaf6
   19b1c:	movw	r2, #1316	; 0x524
   19b20:	movt	r0, #3
   19b24:	b	19b3c <__assert_fail@plt+0x881c>
   19b28:	movw	r0, #2866	; 0xb32
   19b2c:	movw	r1, #1996	; 0x7cc
   19b30:	movw	r3, #2806	; 0xaf6
   19b34:	movw	r2, #1317	; 0x525
   19b38:	movt	r0, #3
   19b3c:	movt	r1, #3
   19b40:	movt	r3, #3
   19b44:	bl	11320 <__assert_fail@plt>
   19b48:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   19b4c:	add	fp, sp, #24
   19b50:	sub	r4, r3, #1
   19b54:	ldr	ip, [r2, r4, lsl #2]
   19b58:	cmp	ip, #0
   19b5c:	beq	19c28 <__assert_fail@plt+0x8908>
   19b60:	mov	lr, #0
   19b64:	cmp	lr, ip, lsr #24
   19b68:	bne	19b80 <__assert_fail@plt+0x8860>
   19b6c:	mov	lr, #0
   19b70:	lsl	ip, ip, #8
   19b74:	add	lr, lr, #8
   19b78:	cmp	ip, #16777216	; 0x1000000
   19b7c:	bcc	19b70 <__assert_fail@plt+0x8850>
   19b80:	lsl	r4, r4, #5
   19b84:	cmp	ip, #0
   19b88:	bmi	19b9c <__assert_fail@plt+0x887c>
   19b8c:	lsl	ip, ip, #1
   19b90:	add	lr, lr, #1
   19b94:	cmn	ip, #1
   19b98:	bgt	19b8c <__assert_fail@plt+0x886c>
   19b9c:	add	r7, r1, r4
   19ba0:	sub	r7, r7, lr
   19ba4:	add	r7, r7, #31
   19ba8:	udiv	ip, r7, r1
   19bac:	cmp	r7, r1
   19bb0:	bcc	19c20 <__assert_fail@plt+0x8900>
   19bb4:	mvn	r7, #0
   19bb8:	mov	r6, #255	; 0xff
   19bbc:	mov	r5, #0
   19bc0:	mov	r4, ip
   19bc4:	mov	r8, #0
   19bc8:	eor	lr, r6, r7, lsl r1
   19bcc:	b	19be4 <__assert_fail@plt+0x88c4>
   19bd0:	mov	r5, r6
   19bd4:	and	r6, r7, lr
   19bd8:	cmp	r4, #0
   19bdc:	strb	r6, [r0, r4]
   19be0:	beq	19c20 <__assert_fail@plt+0x8900>
   19be4:	ldr	r7, [r2, r8, lsl #2]
   19be8:	add	r6, r5, r1
   19bec:	sub	r4, r4, #1
   19bf0:	cmp	r6, #32
   19bf4:	lsr	r7, r7, r5
   19bf8:	bcc	19bd0 <__assert_fail@plt+0x88b0>
   19bfc:	add	r8, r8, #1
   19c00:	cmp	r8, r3
   19c04:	bge	19bd0 <__assert_fail@plt+0x88b0>
   19c08:	ldr	r9, [r2, r8, lsl #2]
   19c0c:	sub	r5, r6, #32
   19c10:	uxtb	r7, r7
   19c14:	sub	r6, r1, r5
   19c18:	orr	r7, r7, r9, lsl r6
   19c1c:	b	19bd4 <__assert_fail@plt+0x88b4>
   19c20:	mov	r0, ip
   19c24:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   19c28:	movw	r0, #6643	; 0x19f3
   19c2c:	movw	r1, #1996	; 0x7cc
   19c30:	movw	r3, #6649	; 0x19f9
   19c34:	movw	r2, #1210	; 0x4ba
   19c38:	movt	r0, #3
   19c3c:	movt	r1, #3
   19c40:	movt	r3, #3
   19c44:	bl	11320 <__assert_fail@plt>
   19c48:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19c4c:	add	fp, sp, #28
   19c50:	sub	sp, sp, #44	; 0x2c
   19c54:	cmp	r1, #0
   19c58:	str	r3, [sp, #8]
   19c5c:	beq	19f10 <__assert_fail@plt+0x8bf0>
   19c60:	mov	r6, r2
   19c64:	mov	r2, #0
   19c68:	mov	r4, r0
   19c6c:	mov	r0, r1
   19c70:	cmp	r2, r1, lsr #24
   19c74:	bne	19c90 <__assert_fail@plt+0x8970>
   19c78:	mov	r2, #0
   19c7c:	mov	r0, r1
   19c80:	lsl	r0, r0, #8
   19c84:	add	r2, r2, #8
   19c88:	cmp	r0, #16777216	; 0x1000000
   19c8c:	bcc	19c80 <__assert_fail@plt+0x8960>
   19c90:	cmp	r0, #0
   19c94:	bmi	19ca8 <__assert_fail@plt+0x8988>
   19c98:	lsl	r0, r0, #1
   19c9c:	add	r2, r2, #1
   19ca0:	cmn	r0, #1
   19ca4:	bgt	19c98 <__assert_fail@plt+0x8978>
   19ca8:	lsl	r0, r1, r2
   19cac:	str	r2, [sp, #28]
   19cb0:	mvn	r2, r1, lsl r2
   19cb4:	ldr	r7, [fp, #8]
   19cb8:	movw	lr, #65535	; 0xffff
   19cbc:	lsr	r5, r0, #16
   19cc0:	uxth	r3, r0
   19cc4:	str	r0, [sp, #32]
   19cc8:	udiv	r1, r2, r5
   19ccc:	mls	r5, r1, r5, r2
   19cd0:	mul	r3, r1, r3
   19cd4:	orr	r5, lr, r5, lsl #16
   19cd8:	cmp	r5, r3
   19cdc:	bcs	19d08 <__assert_fail@plt+0x89e8>
   19ce0:	add	r5, r5, r0
   19ce4:	sub	ip, r1, #1
   19ce8:	cmp	r5, r0
   19cec:	bcc	19d04 <__assert_fail@plt+0x89e4>
   19cf0:	cmp	r5, r3
   19cf4:	subcc	r1, r1, #2
   19cf8:	addcc	r5, r5, r0
   19cfc:	movcs	r1, ip
   19d00:	b	19d08 <__assert_fail@plt+0x89e8>
   19d04:	mov	r1, ip
   19d08:	sub	r3, r5, r3
   19d0c:	mov	r2, #1
   19d10:	mov	r8, #0
   19d14:	lsr	r5, r3, #16
   19d18:	mla	r5, r5, r1, r3
   19d1c:	orr	r3, lr, r3, lsl #16
   19d20:	add	r2, r2, r5, lsr #16
   19d24:	mls	r3, r2, r0, r3
   19d28:	cmp	r3, r5, lsl #16
   19d2c:	lsrcs	r2, r5, #16
   19d30:	addcs	r3, r3, r0
   19d34:	add	r1, r2, r1, lsl #16
   19d38:	cmp	r3, r0
   19d3c:	addcs	r1, r1, #1
   19d40:	cmp	r7, #2
   19d44:	str	r1, [sp, #40]	; 0x28
   19d48:	blt	19ec0 <__assert_fail@plt+0x8ba0>
   19d4c:	ldr	r0, [r6, #4]
   19d50:	cmp	r0, #0
   19d54:	beq	19f10 <__assert_fail@plt+0x8bf0>
   19d58:	mov	r2, #0
   19d5c:	mov	r1, r0
   19d60:	cmp	r2, r0, lsr #24
   19d64:	bne	19d80 <__assert_fail@plt+0x8a60>
   19d68:	mov	r2, #0
   19d6c:	mov	r1, r0
   19d70:	lsl	r1, r1, #8
   19d74:	add	r2, r2, #8
   19d78:	cmp	r1, #16777216	; 0x1000000
   19d7c:	bcc	19d70 <__assert_fail@plt+0x8a50>
   19d80:	cmp	r1, #0
   19d84:	bmi	19d98 <__assert_fail@plt+0x8a78>
   19d88:	lsl	r1, r1, #1
   19d8c:	add	r2, r2, #1
   19d90:	cmn	r1, #1
   19d94:	bgt	19d88 <__assert_fail@plt+0x8a68>
   19d98:	lsl	r1, r0, r2
   19d9c:	str	r2, [sp, #12]
   19da0:	mvn	r2, r0, lsl r2
   19da4:	movw	lr, #65535	; 0xffff
   19da8:	str	r4, [sp, #4]
   19dac:	lsr	r5, r1, #16
   19db0:	uxth	r3, r1
   19db4:	str	r1, [sp, #16]
   19db8:	udiv	r0, r2, r5
   19dbc:	mls	r5, r0, r5, r2
   19dc0:	mul	r3, r0, r3
   19dc4:	orr	r5, lr, r5, lsl #16
   19dc8:	cmp	r5, r3
   19dcc:	bcs	19df8 <__assert_fail@plt+0x8ad8>
   19dd0:	add	r5, r5, r1
   19dd4:	sub	ip, r0, #1
   19dd8:	cmp	r5, r1
   19ddc:	bcc	19df4 <__assert_fail@plt+0x8ad4>
   19de0:	cmp	r5, r3
   19de4:	subcc	r0, r0, #2
   19de8:	addcc	r5, r5, r1
   19dec:	movcs	r0, ip
   19df0:	b	19df8 <__assert_fail@plt+0x8ad8>
   19df4:	mov	r0, ip
   19df8:	sub	r3, r5, r3
   19dfc:	mov	r2, #1
   19e00:	mov	r9, #0
   19e04:	mov	r8, #0
   19e08:	lsr	r5, r3, #16
   19e0c:	mla	r5, r5, r0, r3
   19e10:	orr	r3, lr, r3, lsl #16
   19e14:	add	r2, r2, r5, lsr #16
   19e18:	mls	r3, r2, r1, r3
   19e1c:	cmp	r3, r5, lsl #16
   19e20:	lsrcs	r2, r5, #16
   19e24:	addcs	r3, r3, r1
   19e28:	add	r0, r2, r0, lsl #16
   19e2c:	cmp	r3, r1
   19e30:	addcs	r0, r0, #1
   19e34:	str	r0, [sp, #24]
   19e38:	b	19e48 <__assert_fail@plt+0x8b28>
   19e3c:	add	r8, r0, r8
   19e40:	cmp	r7, #1
   19e44:	ble	19ebc <__assert_fail@plt+0x8b9c>
   19e48:	ldr	r5, [sp, #8]
   19e4c:	mov	r2, r7
   19e50:	add	r3, sp, #12
   19e54:	mov	r0, r5
   19e58:	mov	r1, r5
   19e5c:	bl	26638 <__assert_fail@plt+0x15318>
   19e60:	mov	r1, r0
   19e64:	ldr	r0, [sp, #4]
   19e68:	sub	sl, r7, #1
   19e6c:	mov	r4, r7
   19e70:	add	r2, sp, #28
   19e74:	ldr	r7, [r5, sl, lsl #2]
   19e78:	add	r5, r0, r8
   19e7c:	mov	r0, r5
   19e80:	bl	277e8 <__assert_fail@plt+0x164c8>
   19e84:	ldr	r1, [r6]
   19e88:	cmp	r7, #0
   19e8c:	mov	r7, r4
   19e90:	moveq	r7, sl
   19e94:	cmp	r0, r1
   19e98:	bcs	19e3c <__assert_fail@plt+0x8b1c>
   19e9c:	strb	r9, [r5, r0]
   19ea0:	add	r0, r0, #1
   19ea4:	ldr	r1, [r6]
   19ea8:	cmp	r0, r1
   19eac:	bcc	19e9c <__assert_fail@plt+0x8b7c>
   19eb0:	add	r8, r8, r0
   19eb4:	cmp	r7, #1
   19eb8:	bgt	19e48 <__assert_fail@plt+0x8b28>
   19ebc:	ldr	r4, [sp, #4]
   19ec0:	ldr	r1, [sp, #8]
   19ec4:	add	r0, r4, r8
   19ec8:	add	r2, sp, #28
   19ecc:	ldr	r1, [r1]
   19ed0:	bl	277e8 <__assert_fail@plt+0x164c8>
   19ed4:	add	r0, r0, r8
   19ed8:	cmp	r0, #2
   19edc:	bcc	19f08 <__assert_fail@plt+0x8be8>
   19ee0:	add	r1, r0, r4
   19ee4:	mov	r2, #1
   19ee8:	sub	r1, r1, #1
   19eec:	ldrb	r3, [r4]
   19ef0:	ldrb	r7, [r1]
   19ef4:	add	r2, r2, #2
   19ef8:	cmp	r2, r0
   19efc:	strb	r7, [r4], #1
   19f00:	strb	r3, [r1], #-1
   19f04:	bcc	19eec <__assert_fail@plt+0x8bcc>
   19f08:	sub	sp, fp, #28
   19f0c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19f10:	movw	r0, #6696	; 0x1a28
   19f14:	movw	r1, #1996	; 0x7cc
   19f18:	movw	r3, #6702	; 0x1a2e
   19f1c:	movw	r2, #902	; 0x386
   19f20:	movt	r0, #3
   19f24:	movt	r1, #3
   19f28:	movt	r3, #3
   19f2c:	bl	11320 <__assert_fail@plt>
   19f30:	push	{r4, r5, fp, lr}
   19f34:	add	fp, sp, #8
   19f38:	sub	sp, sp, #16
   19f3c:	cmp	r2, #0
   19f40:	beq	19fe8 <__assert_fail@plt+0x8cc8>
   19f44:	cmp	r3, #63	; 0x3f
   19f48:	bgt	19ff4 <__assert_fail@plt+0x8cd4>
   19f4c:	sub	r5, r3, #2
   19f50:	cmp	r5, #30
   19f54:	bhi	1a0cc <__assert_fail@plt+0x8dac>
   19f58:	add	r4, pc, #4
   19f5c:	mov	ip, #1
   19f60:	ldr	pc, [r4, r5, lsl #2]
   19f64:	andeq	sl, r1, r8, lsr r0
   19f68:	andeq	sl, r1, ip, asr #1
   19f6c:	andeq	r9, r1, r0, ror #31
   19f70:	andeq	sl, r1, ip, asr #1
   19f74:	andeq	sl, r1, ip, asr #1
   19f78:	andeq	sl, r1, ip, asr #1
   19f7c:	andeq	sl, r1, r4, lsl r0
   19f80:	andeq	sl, r1, ip, asr #1
   19f84:	andeq	sl, r1, ip, asr #1
   19f88:	andeq	sl, r1, ip, asr #1
   19f8c:	andeq	sl, r1, ip, asr #1
   19f90:	andeq	sl, r1, ip, asr #1
   19f94:	andeq	sl, r1, ip, asr #1
   19f98:	andeq	sl, r1, ip, asr #1
   19f9c:	andeq	sl, r1, ip, lsl r0
   19fa0:	andeq	sl, r1, ip, asr #1
   19fa4:	andeq	sl, r1, ip, asr #1
   19fa8:	andeq	sl, r1, ip, asr #1
   19fac:	andeq	sl, r1, ip, asr #1
   19fb0:	andeq	sl, r1, ip, asr #1
   19fb4:	andeq	sl, r1, ip, asr #1
   19fb8:	andeq	sl, r1, ip, asr #1
   19fbc:	andeq	sl, r1, ip, asr #1
   19fc0:	andeq	sl, r1, ip, asr #1
   19fc4:	andeq	sl, r1, ip, asr #1
   19fc8:	andeq	sl, r1, ip, asr #1
   19fcc:	andeq	sl, r1, ip, asr #1
   19fd0:	andeq	sl, r1, ip, asr #1
   19fd4:	andeq	sl, r1, ip, asr #1
   19fd8:	andeq	sl, r1, ip, asr #1
   19fdc:	andeq	sl, r1, r4, lsr #32
   19fe0:	mov	ip, #2
   19fe4:	b	1a038 <__assert_fail@plt+0x8d18>
   19fe8:	mov	r0, #0
   19fec:	sub	sp, fp, #8
   19ff0:	pop	{r4, r5, fp, pc}
   19ff4:	cmp	r3, #64	; 0x40
   19ff8:	beq	1a02c <__assert_fail@plt+0x8d0c>
   19ffc:	cmp	r3, #128	; 0x80
   1a000:	beq	1a034 <__assert_fail@plt+0x8d14>
   1a004:	cmp	r3, #256	; 0x100
   1a008:	bne	1a0cc <__assert_fail@plt+0x8dac>
   1a00c:	mov	ip, #8
   1a010:	b	1a038 <__assert_fail@plt+0x8d18>
   1a014:	mov	ip, #3
   1a018:	b	1a038 <__assert_fail@plt+0x8d18>
   1a01c:	mov	ip, #4
   1a020:	b	1a038 <__assert_fail@plt+0x8d18>
   1a024:	mov	ip, #5
   1a028:	b	1a038 <__assert_fail@plt+0x8d18>
   1a02c:	mov	ip, #6
   1a030:	b	1a038 <__assert_fail@plt+0x8d18>
   1a034:	mov	ip, #7
   1a038:	sub	lr, r1, #1
   1a03c:	mov	r3, #0
   1a040:	mov	r4, #0
   1a044:	mov	r1, #0
   1a048:	b	1a058 <__assert_fail@plt+0x8d38>
   1a04c:	cmp	r5, #0
   1a050:	mov	r2, r5
   1a054:	beq	1a08c <__assert_fail@plt+0x8d6c>
   1a058:	ldrb	r5, [lr, r2]
   1a05c:	orr	r4, r4, r5, lsl r3
   1a060:	add	r3, r3, ip
   1a064:	sub	r5, r2, #1
   1a068:	cmp	r3, #32
   1a06c:	bcc	1a04c <__assert_fail@plt+0x8d2c>
   1a070:	str	r4, [r0, r1, lsl #2]
   1a074:	sub	r3, r3, #32
   1a078:	add	r1, r1, #1
   1a07c:	ldrb	r2, [lr, r2]
   1a080:	sub	r4, ip, r3
   1a084:	lsr	r4, r2, r4
   1a088:	b	1a04c <__assert_fail@plt+0x8d2c>
   1a08c:	cmp	r4, #0
   1a090:	beq	1a0a4 <__assert_fail@plt+0x8d84>
   1a094:	str	r4, [r0, r1, lsl #2]
   1a098:	add	r0, r1, #1
   1a09c:	sub	sp, fp, #8
   1a0a0:	pop	{r4, r5, fp, pc}
   1a0a4:	sub	r2, r0, #4
   1a0a8:	mov	r0, r1
   1a0ac:	cmp	r1, #1
   1a0b0:	blt	1a0c4 <__assert_fail@plt+0x8da4>
   1a0b4:	ldr	r3, [r2, r0, lsl #2]
   1a0b8:	sub	r1, r0, #1
   1a0bc:	cmp	r3, #0
   1a0c0:	beq	1a0a8 <__assert_fail@plt+0x8d88>
   1a0c4:	sub	sp, fp, #8
   1a0c8:	pop	{r4, r5, fp, pc}
   1a0cc:	mvn	r5, #0
   1a0d0:	mov	r4, #1
   1a0d4:	udiv	ip, r5, r3
   1a0d8:	mov	r5, r3
   1a0dc:	cmp	ip, r3
   1a0e0:	bcc	1a0fc <__assert_fail@plt+0x8ddc>
   1a0e4:	mov	r4, #1
   1a0e8:	mov	r5, r3
   1a0ec:	mul	r5, r5, r3
   1a0f0:	add	r4, r4, #1
   1a0f4:	cmp	r5, ip
   1a0f8:	bls	1a0ec <__assert_fail@plt+0x8dcc>
   1a0fc:	str	r5, [sp, #12]
   1a100:	add	r5, sp, #8
   1a104:	str	r4, [sp, #8]
   1a108:	str	r5, [sp]
   1a10c:	bl	1a118 <__assert_fail@plt+0x8df8>
   1a110:	sub	sp, fp, #8
   1a114:	pop	{r4, r5, fp, pc}
   1a118:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a11c:	add	fp, sp, #28
   1a120:	sub	sp, sp, #36	; 0x24
   1a124:	cmp	r2, #0
   1a128:	beq	1a3d4 <__assert_fail@plt+0x90b4>
   1a12c:	ldr	r7, [fp, #8]
   1a130:	ldrb	r8, [r1]
   1a134:	mov	ip, #1
   1a138:	ldr	r9, [r7]
   1a13c:	sub	r7, r2, #1
   1a140:	udiv	r6, r7, r9
   1a144:	mls	r4, r6, r9, r7
   1a148:	cmp	r4, #0
   1a14c:	beq	1a174 <__assert_fail@plt+0x8e54>
   1a150:	mul	r6, r6, r9
   1a154:	sub	r5, r2, #2
   1a158:	and	lr, r4, #1
   1a15c:	cmp	r5, r6
   1a160:	bne	1a17c <__assert_fail@plt+0x8e5c>
   1a164:	mov	r4, #1
   1a168:	cmp	lr, #0
   1a16c:	bne	1a1b0 <__assert_fail@plt+0x8e90>
   1a170:	b	1a1bc <__assert_fail@plt+0x8e9c>
   1a174:	mov	r4, #1
   1a178:	b	1a1bc <__assert_fail@plt+0x8e9c>
   1a17c:	sub	r6, r4, lr
   1a180:	mov	r4, #0
   1a184:	add	r5, r1, r4
   1a188:	add	r4, r4, #2
   1a18c:	subs	r6, r6, #2
   1a190:	ldrb	r7, [r5, #1]
   1a194:	ldrb	r5, [r5, #2]
   1a198:	mla	r7, r8, r3, r7
   1a19c:	mla	r8, r7, r3, r5
   1a1a0:	bne	1a184 <__assert_fail@plt+0x8e64>
   1a1a4:	add	r4, r4, #1
   1a1a8:	cmp	lr, #0
   1a1ac:	beq	1a1bc <__assert_fail@plt+0x8e9c>
   1a1b0:	ldrb	r7, [r1, r4]
   1a1b4:	add	r4, r4, #1
   1a1b8:	mla	r8, r8, r3, r7
   1a1bc:	cmp	r4, r2
   1a1c0:	str	r8, [r0]
   1a1c4:	bcs	1a380 <__assert_fail@plt+0x9060>
   1a1c8:	cmp	r9, #1
   1a1cc:	mov	r7, #1
   1a1d0:	add	sl, r1, r4
   1a1d4:	mov	ip, #1
   1a1d8:	str	r2, [sp, #24]
   1a1dc:	str	r1, [sp, #20]
   1a1e0:	str	r9, [sp, #16]
   1a1e4:	movhi	r7, r9
   1a1e8:	str	r7, [sp, #12]
   1a1ec:	sub	r7, r9, #1
   1a1f0:	and	r6, r7, #1
   1a1f4:	sub	lr, r7, r6
   1a1f8:	str	r6, [sp, #4]
   1a1fc:	str	lr, [sp, #8]
   1a200:	b	1a234 <__assert_fail@plt+0x8f14>
   1a204:	adds	r1, r9, r8
   1a208:	ldr	r7, [sp, #12]
   1a20c:	ldr	r4, [sp, #32]
   1a210:	ldr	r5, [sp, #28]
   1a214:	ldr	r9, [sp, #16]
   1a218:	strne	r1, [r0, ip, lsl #2]
   1a21c:	ldr	r1, [sp, #20]
   1a220:	addne	ip, ip, #1
   1a224:	add	sl, sl, r7
   1a228:	add	r4, r4, r7
   1a22c:	cmp	r5, r2
   1a230:	bcs	1a384 <__assert_fail@plt+0x9064>
   1a234:	ldrb	r8, [r1, r4]
   1a238:	add	r5, r4, #1
   1a23c:	cmp	r9, #2
   1a240:	bcc	1a28c <__assert_fail@plt+0x8f6c>
   1a244:	beq	1a274 <__assert_fail@plt+0x8f54>
   1a248:	mov	r6, #0
   1a24c:	add	r7, sl, r6
   1a250:	add	r6, r6, #2
   1a254:	ldrb	r5, [r7, #1]
   1a258:	ldrb	r7, [r7, #2]
   1a25c:	cmp	lr, r6
   1a260:	mla	r5, r8, r3, r5
   1a264:	mla	r8, r5, r3, r7
   1a268:	bne	1a24c <__assert_fail@plt+0x8f2c>
   1a26c:	add	r7, r4, r6
   1a270:	add	r5, r7, #1
   1a274:	ldr	r7, [sp, #4]
   1a278:	cmp	r7, #0
   1a27c:	beq	1a288 <__assert_fail@plt+0x8f68>
   1a280:	ldrb	r7, [r1, r5]
   1a284:	mla	r8, r8, r3, r7
   1a288:	add	r5, r9, r4
   1a28c:	cmp	ip, #1
   1a290:	str	r5, [sp, #28]
   1a294:	str	r4, [sp, #32]
   1a298:	blt	1a3b4 <__assert_fail@plt+0x9094>
   1a29c:	ldr	r1, [fp, #8]
   1a2a0:	mov	r5, #0
   1a2a4:	mov	r9, #0
   1a2a8:	ldr	r1, [r1, #4]
   1a2ac:	lsr	r2, r1, #16
   1a2b0:	uxth	r1, r1
   1a2b4:	ldr	r4, [r0, r5, lsl #2]
   1a2b8:	uxth	r7, r4
   1a2bc:	lsr	r4, r4, #16
   1a2c0:	mul	lr, r4, r1
   1a2c4:	mul	r6, r7, r2
   1a2c8:	mul	r7, r7, r1
   1a2cc:	mla	r6, r4, r1, r6
   1a2d0:	mul	r4, r4, r2
   1a2d4:	add	r6, r6, r7, lsr #16
   1a2d8:	pkhbt	r7, r7, r6, lsl #16
   1a2dc:	cmp	r6, lr
   1a2e0:	addcc	r4, r4, #65536	; 0x10000
   1a2e4:	adds	r7, r7, r9
   1a2e8:	str	r7, [r0, r5, lsl #2]
   1a2ec:	adc	r9, r4, r6, lsr #16
   1a2f0:	add	r5, r5, #1
   1a2f4:	cmp	ip, r5
   1a2f8:	bne	1a2b4 <__assert_fail@plt+0x8f94>
   1a2fc:	and	r4, ip, #1
   1a300:	mov	r5, #0
   1a304:	cmp	ip, #1
   1a308:	bne	1a324 <__assert_fail@plt+0x9004>
   1a30c:	ldr	r2, [sp, #24]
   1a310:	ldr	lr, [sp, #8]
   1a314:	mov	r6, #0
   1a318:	cmp	r4, #0
   1a31c:	beq	1a204 <__assert_fail@plt+0x8ee4>
   1a320:	b	1a36c <__assert_fail@plt+0x904c>
   1a324:	ldr	r2, [sp, #24]
   1a328:	ldr	lr, [sp, #8]
   1a32c:	sub	r1, ip, r4
   1a330:	mov	r5, #0
   1a334:	mov	r7, r0
   1a338:	ldr	r6, [r7, r5, lsl #2]!
   1a33c:	add	r5, r5, #2
   1a340:	adds	r6, r6, r8
   1a344:	str	r6, [r7]
   1a348:	ldr	r6, [r7, #4]
   1a34c:	adcs	r6, r6, #0
   1a350:	str	r6, [r7, #4]
   1a354:	mov	r6, #0
   1a358:	adc	r8, r6, #0
   1a35c:	cmp	r1, r5
   1a360:	bne	1a334 <__assert_fail@plt+0x9014>
   1a364:	cmp	r4, #0
   1a368:	beq	1a204 <__assert_fail@plt+0x8ee4>
   1a36c:	ldr	r1, [r0, r5, lsl #2]
   1a370:	adds	r1, r1, r8
   1a374:	adc	r8, r6, #0
   1a378:	str	r1, [r0, r5, lsl #2]
   1a37c:	b	1a204 <__assert_fail@plt+0x8ee4>
   1a380:	mov	r5, r4
   1a384:	cmp	r5, r2
   1a388:	moveq	r0, ip
   1a38c:	subeq	sp, fp, #28
   1a390:	popeq	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a394:	movw	r0, #5203	; 0x1453
   1a398:	movw	r1, #1996	; 0x7cc
   1a39c:	movw	r3, #5095	; 0x13e7
   1a3a0:	movw	r2, #1394	; 0x572
   1a3a4:	movt	r0, #3
   1a3a8:	movt	r1, #3
   1a3ac:	movt	r3, #3
   1a3b0:	bl	11320 <__assert_fail@plt>
   1a3b4:	movw	r0, #2553	; 0x9f9
   1a3b8:	movw	r1, #1996	; 0x7cc
   1a3bc:	movw	r3, #2284	; 0x8ec
   1a3c0:	movw	r2, #545	; 0x221
   1a3c4:	movt	r0, #3
   1a3c8:	movt	r1, #3
   1a3cc:	movt	r3, #3
   1a3d0:	bl	11320 <__assert_fail@plt>
   1a3d4:	movw	r0, #5088	; 0x13e0
   1a3d8:	movw	r1, #1996	; 0x7cc
   1a3dc:	movw	r3, #5095	; 0x13e7
   1a3e0:	movw	r2, #1370	; 0x55a
   1a3e4:	movt	r0, #3
   1a3e8:	b	1a3a8 <__assert_fail@plt+0x9088>
   1a3ec:	movw	r1, #1992	; 0x7c8
   1a3f0:	mov	r2, #0
   1a3f4:	movt	r1, #3
   1a3f8:	str	r2, [r0]
   1a3fc:	str	r2, [r0, #4]
   1a400:	str	r1, [r0, #8]
   1a404:	bx	lr
   1a408:	push	{r4, sl, fp, lr}
   1a40c:	add	fp, sp, #8
   1a410:	cmp	r1, #0
   1a414:	mov	r2, #1
   1a418:	mov	r4, r0
   1a41c:	mov	r0, #0
   1a420:	subne	r1, r1, #1
   1a424:	add	r1, r2, r1, lsr #5
   1a428:	str	r1, [r4]
   1a42c:	str	r0, [r4, #4]
   1a430:	lsl	r0, r1, #2
   1a434:	movw	r1, #12572	; 0x311c
   1a438:	movt	r1, #4
   1a43c:	ldr	r1, [r1]
   1a440:	blx	r1
   1a444:	str	r0, [r4, #8]
   1a448:	pop	{r4, sl, fp, pc}
   1a44c:	ldr	r1, [r0]
   1a450:	cmp	r1, #0
   1a454:	bxeq	lr
   1a458:	movw	r2, #12580	; 0x3124
   1a45c:	ldr	r0, [r0, #8]
   1a460:	lsl	r1, r1, #2
   1a464:	movt	r2, #4
   1a468:	ldr	r2, [r2]
   1a46c:	bx	r2
   1a470:	push	{r4, r5, fp, lr}
   1a474:	add	fp, sp, #8
   1a478:	mov	r5, r1
   1a47c:	mov	r4, r0
   1a480:	cmp	r1, #0
   1a484:	bmi	1a494 <__assert_fail@plt+0x9174>
   1a488:	beq	1a4dc <__assert_fail@plt+0x91bc>
   1a48c:	mov	r0, #1
   1a490:	b	1a49c <__assert_fail@plt+0x917c>
   1a494:	mvn	r0, #0
   1a498:	rsb	r5, r5, #0
   1a49c:	str	r0, [r4, #4]
   1a4a0:	ldr	r1, [r4]
   1a4a4:	cmp	r1, #0
   1a4a8:	ble	1a4b8 <__assert_fail@plt+0x9198>
   1a4ac:	ldr	r0, [r4, #8]
   1a4b0:	str	r5, [r0]
   1a4b4:	pop	{r4, r5, fp, pc}
   1a4b8:	beq	1a4e8 <__assert_fail@plt+0x91c8>
   1a4bc:	movw	r0, #12576	; 0x3120
   1a4c0:	lsl	r1, r1, #2
   1a4c4:	mov	r2, #4
   1a4c8:	movt	r0, #4
   1a4cc:	ldr	r3, [r0]
   1a4d0:	ldr	r0, [r4, #8]
   1a4d4:	blx	r3
   1a4d8:	b	1a4fc <__assert_fail@plt+0x91dc>
   1a4dc:	mov	r0, #0
   1a4e0:	str	r0, [r4, #4]
   1a4e4:	pop	{r4, r5, fp, pc}
   1a4e8:	movw	r0, #12572	; 0x311c
   1a4ec:	movt	r0, #4
   1a4f0:	ldr	r1, [r0]
   1a4f4:	mov	r0, #4
   1a4f8:	blx	r1
   1a4fc:	mov	r1, #1
   1a500:	str	r0, [r4, #8]
   1a504:	str	r1, [r4]
   1a508:	ldr	r1, [r4, #4]
   1a50c:	cmp	r1, #0
   1a510:	rsbmi	r1, r1, #0
   1a514:	cmp	r1, #2
   1a518:	blt	1a524 <__assert_fail@plt+0x9204>
   1a51c:	mov	r1, #0
   1a520:	str	r1, [r4, #4]
   1a524:	str	r5, [r0]
   1a528:	pop	{r4, r5, fp, pc}
   1a52c:	push	{r4, r5, fp, lr}
   1a530:	add	fp, sp, #8
   1a534:	mov	r5, r0
   1a538:	cmp	r1, #0
   1a53c:	beq	1a564 <__assert_fail@plt+0x9244>
   1a540:	mov	r0, #1
   1a544:	mov	r4, r1
   1a548:	str	r0, [r5, #4]
   1a54c:	ldr	r1, [r5]
   1a550:	cmp	r1, #0
   1a554:	ble	1a570 <__assert_fail@plt+0x9250>
   1a558:	ldr	r0, [r5, #8]
   1a55c:	str	r4, [r0]
   1a560:	pop	{r4, r5, fp, pc}
   1a564:	mov	r0, #0
   1a568:	str	r0, [r5, #4]
   1a56c:	pop	{r4, r5, fp, pc}
   1a570:	beq	1a594 <__assert_fail@plt+0x9274>
   1a574:	movw	r0, #12576	; 0x3120
   1a578:	lsl	r1, r1, #2
   1a57c:	mov	r2, #4
   1a580:	movt	r0, #4
   1a584:	ldr	r3, [r0]
   1a588:	ldr	r0, [r5, #8]
   1a58c:	blx	r3
   1a590:	b	1a5a8 <__assert_fail@plt+0x9288>
   1a594:	movw	r0, #12572	; 0x311c
   1a598:	movt	r0, #4
   1a59c:	ldr	r1, [r0]
   1a5a0:	mov	r0, #4
   1a5a4:	blx	r1
   1a5a8:	mov	r1, #1
   1a5ac:	str	r0, [r5, #8]
   1a5b0:	str	r1, [r5]
   1a5b4:	ldr	r1, [r5, #4]
   1a5b8:	cmp	r1, #0
   1a5bc:	rsbmi	r1, r1, #0
   1a5c0:	cmp	r1, #2
   1a5c4:	blt	1a5d0 <__assert_fail@plt+0x92b0>
   1a5c8:	mov	r1, #0
   1a5cc:	str	r1, [r5, #4]
   1a5d0:	str	r4, [r0]
   1a5d4:	pop	{r4, r5, fp, pc}
   1a5d8:	cmp	r0, r1
   1a5dc:	bxeq	lr
   1a5e0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a5e4:	add	fp, sp, #28
   1a5e8:	sub	sp, sp, #20
   1a5ec:	mov	r8, r1
   1a5f0:	ldr	r1, [r0]
   1a5f4:	mov	r4, r0
   1a5f8:	ldr	r5, [r8, #4]
   1a5fc:	cmp	r5, #0
   1a600:	rsbmi	r5, r5, #0
   1a604:	cmp	r5, r1
   1a608:	ble	1a640 <__assert_fail@plt+0x9320>
   1a60c:	cmp	r5, #1
   1a610:	mov	r7, r5
   1a614:	movle	r7, #1
   1a618:	cmp	r1, #0
   1a61c:	beq	1a650 <__assert_fail@plt+0x9330>
   1a620:	movw	r0, #12576	; 0x3120
   1a624:	lsl	r1, r1, #2
   1a628:	lsl	r2, r7, #2
   1a62c:	movt	r0, #4
   1a630:	ldr	r3, [r0]
   1a634:	ldr	r0, [r4, #8]
   1a638:	blx	r3
   1a63c:	b	1a664 <__assert_fail@plt+0x9344>
   1a640:	ldr	r0, [r4, #8]
   1a644:	cmp	r5, #1
   1a648:	bge	1a68c <__assert_fail@plt+0x936c>
   1a64c:	b	1a7e8 <__assert_fail@plt+0x94c8>
   1a650:	movw	r0, #12572	; 0x311c
   1a654:	movt	r0, #4
   1a658:	ldr	r1, [r0]
   1a65c:	lsl	r0, r7, #2
   1a660:	blx	r1
   1a664:	str	r0, [r4, #8]
   1a668:	str	r7, [r4]
   1a66c:	ldr	r1, [r4, #4]
   1a670:	cmp	r1, #0
   1a674:	rsbmi	r1, r1, #0
   1a678:	cmp	r1, r7
   1a67c:	movgt	r1, #0
   1a680:	strgt	r1, [r4, #4]
   1a684:	cmp	r5, #1
   1a688:	blt	1a7e8 <__assert_fail@plt+0x94c8>
   1a68c:	ldr	r1, [r8, #8]
   1a690:	mov	r2, #0
   1a694:	cmp	r5, #4
   1a698:	bcc	1a77c <__assert_fail@plt+0x945c>
   1a69c:	add	r3, r1, r5, lsl #2
   1a6a0:	cmp	r0, r3
   1a6a4:	addcc	r3, r0, r5, lsl #2
   1a6a8:	cmpcc	r1, r3
   1a6ac:	bcc	1a77c <__assert_fail@plt+0x945c>
   1a6b0:	bic	r2, r5, #-2147483645	; 0x80000003
   1a6b4:	stmib	sp, {r5, r8}
   1a6b8:	mov	r3, #1
   1a6bc:	mov	sl, #0
   1a6c0:	str	r4, [sp, #12]
   1a6c4:	sub	r5, r2, #4
   1a6c8:	add	r3, r3, r5, lsr #2
   1a6cc:	cmp	r5, #12
   1a6d0:	and	r7, r3, #3
   1a6d4:	str	r7, [sp, #16]
   1a6d8:	bcc	1a740 <__assert_fail@plt+0x9420>
   1a6dc:	ldr	r7, [sp, #16]
   1a6e0:	mov	r5, #0
   1a6e4:	mov	lr, #48	; 0x30
   1a6e8:	mov	sl, #0
   1a6ec:	sub	r3, r3, r7
   1a6f0:	add	r6, r1, r5
   1a6f4:	add	ip, r0, r5
   1a6f8:	add	r5, r5, #64	; 0x40
   1a6fc:	subs	r3, r3, #4
   1a700:	add	sl, sl, #16
   1a704:	mov	r4, r6
   1a708:	mov	r8, ip
   1a70c:	add	r9, r6, #16
   1a710:	add	r7, ip, #16
   1a714:	add	r6, r6, #32
   1a718:	vld1.32	{d16-d17}, [r4], lr
   1a71c:	vst1.32	{d16-d17}, [r8], lr
   1a720:	vld1.32	{d16-d17}, [r9]
   1a724:	vst1.32	{d16-d17}, [r7]
   1a728:	add	r7, ip, #32
   1a72c:	vld1.32	{d16-d17}, [r6]
   1a730:	vst1.32	{d16-d17}, [r7]
   1a734:	vld1.32	{d16-d17}, [r4]
   1a738:	vst1.32	{d16-d17}, [r8]
   1a73c:	bne	1a6f0 <__assert_fail@plt+0x93d0>
   1a740:	ldr	r6, [sp, #16]
   1a744:	cmp	r6, #0
   1a748:	beq	1a768 <__assert_fail@plt+0x9448>
   1a74c:	add	r3, r1, sl, lsl #2
   1a750:	add	r7, r0, sl, lsl #2
   1a754:	rsb	r5, r6, #0
   1a758:	vld1.32	{d16-d17}, [r3]!
   1a75c:	adds	r5, r5, #1
   1a760:	vst1.32	{d16-d17}, [r7]!
   1a764:	bcc	1a758 <__assert_fail@plt+0x9438>
   1a768:	ldr	r5, [sp, #4]
   1a76c:	ldr	r4, [sp, #12]
   1a770:	ldr	r8, [sp, #8]
   1a774:	cmp	r5, r2
   1a778:	beq	1a7e8 <__assert_fail@plt+0x94c8>
   1a77c:	mvn	r3, r2
   1a780:	ands	r7, r5, #3
   1a784:	add	r3, r5, r3
   1a788:	beq	1a7a0 <__assert_fail@plt+0x9480>
   1a78c:	ldr	r6, [r1, r2, lsl #2]
   1a790:	subs	r7, r7, #1
   1a794:	str	r6, [r0, r2, lsl #2]
   1a798:	add	r2, r2, #1
   1a79c:	bne	1a78c <__assert_fail@plt+0x946c>
   1a7a0:	cmp	r3, #3
   1a7a4:	bcc	1a7e8 <__assert_fail@plt+0x94c8>
   1a7a8:	sub	r3, r5, r2
   1a7ac:	lsl	r2, r2, #2
   1a7b0:	add	r7, r1, #16
   1a7b4:	ldr	r6, [r1, r2]!
   1a7b8:	add	r5, r0, #16
   1a7bc:	subs	r3, r3, #4
   1a7c0:	str	r6, [r0, r2]!
   1a7c4:	ldr	r6, [r1, #4]
   1a7c8:	str	r6, [r0, #4]
   1a7cc:	ldr	r6, [r1, #8]
   1a7d0:	str	r6, [r0, #8]
   1a7d4:	ldr	r1, [r1, #12]
   1a7d8:	str	r1, [r0, #12]
   1a7dc:	mov	r1, r7
   1a7e0:	mov	r0, r5
   1a7e4:	bne	1a7b0 <__assert_fail@plt+0x9490>
   1a7e8:	ldr	r0, [r8, #4]
   1a7ec:	str	r0, [r4, #4]
   1a7f0:	sub	sp, fp, #28
   1a7f4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a7f8:	bx	lr
   1a7fc:	movw	r2, #1992	; 0x7c8
   1a800:	mov	r3, #0
   1a804:	movt	r2, #3
   1a808:	str	r3, [r0]
   1a80c:	str	r3, [r0, #4]
   1a810:	str	r2, [r0, #8]
   1a814:	b	1a470 <__assert_fail@plt+0x9150>
   1a818:	push	{r4, r5, r6, sl, fp, lr}
   1a81c:	add	fp, sp, #16
   1a820:	mov	r4, r1
   1a824:	movw	r1, #1992	; 0x7c8
   1a828:	mov	r5, r0
   1a82c:	mov	r0, #0
   1a830:	cmp	r4, #0
   1a834:	movt	r1, #3
   1a838:	str	r0, [r5]
   1a83c:	stmib	r5, {r0, r1}
   1a840:	beq	1a888 <__assert_fail@plt+0x9568>
   1a844:	movw	r0, #12572	; 0x311c
   1a848:	mov	r6, #1
   1a84c:	movt	r0, #4
   1a850:	str	r6, [r5, #4]
   1a854:	ldr	r1, [r0]
   1a858:	mov	r0, #4
   1a85c:	blx	r1
   1a860:	str	r0, [r5, #8]
   1a864:	str	r6, [r5]
   1a868:	ldr	r1, [r5, #4]
   1a86c:	cmp	r1, #0
   1a870:	rsbmi	r1, r1, #0
   1a874:	cmp	r1, #2
   1a878:	movge	r1, #0
   1a87c:	strge	r1, [r5, #4]
   1a880:	str	r4, [r0]
   1a884:	pop	{r4, r5, r6, sl, fp, pc}
   1a888:	str	r0, [r5, #4]
   1a88c:	pop	{r4, r5, r6, sl, fp, pc}
   1a890:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a894:	add	fp, sp, #28
   1a898:	sub	sp, sp, #12
   1a89c:	mov	sl, r0
   1a8a0:	movw	r0, #1992	; 0x7c8
   1a8a4:	mov	r4, r1
   1a8a8:	mov	r1, #0
   1a8ac:	movt	r0, #3
   1a8b0:	cmp	sl, r4
   1a8b4:	str	r1, [sl]
   1a8b8:	str	r1, [sl, #4]
   1a8bc:	str	r0, [sl, #8]
   1a8c0:	beq	1aa74 <__assert_fail@plt+0x9754>
   1a8c4:	ldr	r0, [r4, #4]
   1a8c8:	cmp	r0, #0
   1a8cc:	mov	r5, r0
   1a8d0:	rsbmi	r5, r0, #0
   1a8d4:	cmp	r5, #1
   1a8d8:	blt	1aa70 <__assert_fail@plt+0x9750>
   1a8dc:	movw	r0, #12572	; 0x311c
   1a8e0:	movt	r0, #4
   1a8e4:	ldr	r1, [r0]
   1a8e8:	lsl	r0, r5, #2
   1a8ec:	blx	r1
   1a8f0:	str	r0, [sl, #8]
   1a8f4:	str	r5, [sl]
   1a8f8:	mov	r2, #0
   1a8fc:	ldr	r1, [sl, #4]
   1a900:	cmp	r1, #0
   1a904:	rsbmi	r1, r1, #0
   1a908:	cmp	r1, r5
   1a90c:	movgt	r1, #0
   1a910:	strgt	r1, [sl, #4]
   1a914:	cmp	r5, #4
   1a918:	ldr	r1, [r4, #8]
   1a91c:	bcc	1aa00 <__assert_fail@plt+0x96e0>
   1a920:	add	r3, r1, r5, lsl #2
   1a924:	cmp	r0, r3
   1a928:	bcs	1a938 <__assert_fail@plt+0x9618>
   1a92c:	add	r3, r0, r5, lsl #2
   1a930:	cmp	r3, r1
   1a934:	bhi	1aa00 <__assert_fail@plt+0x96e0>
   1a938:	bic	r2, r5, #-2147483645	; 0x80000003
   1a93c:	mov	r3, #1
   1a940:	mov	lr, #0
   1a944:	str	r4, [sp, #4]
   1a948:	str	r5, [sp]
   1a94c:	sub	r6, r2, #4
   1a950:	add	r7, r3, r6, lsr #2
   1a954:	cmp	r6, #12
   1a958:	and	r3, r7, #3
   1a95c:	str	r3, [sp, #8]
   1a960:	bcc	1a9c8 <__assert_fail@plt+0x96a8>
   1a964:	ldr	r3, [sp, #8]
   1a968:	mov	lr, #0
   1a96c:	sub	r5, r7, r3
   1a970:	mov	r7, #0
   1a974:	add	r6, r1, r7
   1a978:	mov	r3, #48	; 0x30
   1a97c:	add	ip, r0, r7
   1a980:	add	r7, r7, #64	; 0x40
   1a984:	subs	r5, r5, #4
   1a988:	add	lr, lr, #16
   1a98c:	mov	r4, r6
   1a990:	mov	r8, ip
   1a994:	add	r9, r6, #16
   1a998:	vld1.32	{d16-d17}, [r4], r3
   1a99c:	vst1.32	{d16-d17}, [r8], r3
   1a9a0:	add	r3, ip, #16
   1a9a4:	vld1.32	{d16-d17}, [r9]
   1a9a8:	vst1.32	{d16-d17}, [r3]
   1a9ac:	add	r3, r6, #32
   1a9b0:	vld1.32	{d16-d17}, [r3]
   1a9b4:	add	r3, ip, #32
   1a9b8:	vst1.32	{d16-d17}, [r3]
   1a9bc:	vld1.32	{d16-d17}, [r4]
   1a9c0:	vst1.32	{d16-d17}, [r8]
   1a9c4:	bne	1a974 <__assert_fail@plt+0x9654>
   1a9c8:	ldr	r6, [sp, #8]
   1a9cc:	cmp	r6, #0
   1a9d0:	beq	1a9f0 <__assert_fail@plt+0x96d0>
   1a9d4:	add	r7, r1, lr, lsl #2
   1a9d8:	add	r3, r0, lr, lsl #2
   1a9dc:	rsb	r6, r6, #0
   1a9e0:	vld1.32	{d16-d17}, [r7]!
   1a9e4:	adds	r6, r6, #1
   1a9e8:	vst1.32	{d16-d17}, [r3]!
   1a9ec:	bcc	1a9e0 <__assert_fail@plt+0x96c0>
   1a9f0:	ldr	r5, [sp]
   1a9f4:	ldr	r4, [sp, #4]
   1a9f8:	cmp	r5, r2
   1a9fc:	beq	1aa6c <__assert_fail@plt+0x974c>
   1aa00:	mvn	r3, r2
   1aa04:	ands	r7, r5, #3
   1aa08:	add	r3, r5, r3
   1aa0c:	beq	1aa24 <__assert_fail@plt+0x9704>
   1aa10:	ldr	r6, [r1, r2, lsl #2]
   1aa14:	subs	r7, r7, #1
   1aa18:	str	r6, [r0, r2, lsl #2]
   1aa1c:	add	r2, r2, #1
   1aa20:	bne	1aa10 <__assert_fail@plt+0x96f0>
   1aa24:	cmp	r3, #3
   1aa28:	bcc	1aa6c <__assert_fail@plt+0x974c>
   1aa2c:	sub	r3, r5, r2
   1aa30:	lsl	r2, r2, #2
   1aa34:	add	r7, r1, #16
   1aa38:	ldr	r6, [r1, r2]!
   1aa3c:	add	r5, r0, #16
   1aa40:	subs	r3, r3, #4
   1aa44:	str	r6, [r0, r2]!
   1aa48:	ldr	r6, [r1, #4]
   1aa4c:	str	r6, [r0, #4]
   1aa50:	ldr	r6, [r1, #8]
   1aa54:	str	r6, [r0, #8]
   1aa58:	ldr	r1, [r1, #12]
   1aa5c:	str	r1, [r0, #12]
   1aa60:	mov	r1, r7
   1aa64:	mov	r0, r5
   1aa68:	bne	1aa34 <__assert_fail@plt+0x9714>
   1aa6c:	ldr	r0, [r4, #4]
   1aa70:	str	r0, [sl, #4]
   1aa74:	sub	sp, fp, #28
   1aa78:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1aa7c:	ldr	r3, [r0, #4]
   1aa80:	mov	r1, r0
   1aa84:	cmp	r3, #0
   1aa88:	bmi	1aacc <__assert_fail@plt+0x97ac>
   1aa8c:	mov	r0, #0
   1aa90:	cmp	r3, #1
   1aa94:	bxgt	lr
   1aa98:	cmp	r3, #0
   1aa9c:	mov	r0, #0
   1aaa0:	mov	r3, #0
   1aaa4:	beq	1aab0 <__assert_fail@plt+0x9790>
   1aaa8:	ldr	r1, [r1, #8]
   1aaac:	ldr	r3, [r1]
   1aab0:	cmn	r3, #-2147483647	; 0x80000001
   1aab4:	mov	r1, #0
   1aab8:	mov	r2, #1
   1aabc:	movwcc	r1, #1
   1aac0:	cmp	r1, r3, lsr #31
   1aac4:	movcs	r0, r2
   1aac8:	bx	lr
   1aacc:	mov	r2, #0
   1aad0:	cmn	r3, #1
   1aad4:	beq	1aae0 <__assert_fail@plt+0x97c0>
   1aad8:	mov	r0, r2
   1aadc:	bx	lr
   1aae0:	ldr	r0, [r1, #8]
   1aae4:	ldr	r0, [r0]
   1aae8:	mvn	r1, r0
   1aaec:	cmp	r0, #-2147483648	; 0x80000000
   1aaf0:	lsr	r1, r1, #31
   1aaf4:	asrhi	r1, r0, #31
   1aaf8:	mvn	r0, r1
   1aafc:	lsr	r2, r0, #31
   1ab00:	mov	r0, r2
   1ab04:	bx	lr
   1ab08:	ldr	r3, [r0, #4]
   1ab0c:	mov	r2, r0
   1ab10:	cmp	r1, #0
   1ab14:	bmi	1ab58 <__assert_fail@plt+0x9838>
   1ab18:	cmp	r3, #0
   1ab1c:	mvnmi	r0, #0
   1ab20:	bxmi	lr
   1ab24:	mov	r0, #1
   1ab28:	cmp	r3, #1
   1ab2c:	bgt	1ab64 <__assert_fail@plt+0x9844>
   1ab30:	cmp	r3, #0
   1ab34:	mov	r0, #0
   1ab38:	mov	r3, #0
   1ab3c:	beq	1ab48 <__assert_fail@plt+0x9828>
   1ab40:	ldr	r2, [r2, #8]
   1ab44:	ldr	r3, [r2]
   1ab48:	cmp	r3, r1
   1ab4c:	movwhi	r0, #1
   1ab50:	subcc	r0, r0, #1
   1ab54:	bx	lr
   1ab58:	mov	r0, #1
   1ab5c:	cmn	r3, #1
   1ab60:	ble	1ab68 <__assert_fail@plt+0x9848>
   1ab64:	bx	lr
   1ab68:	mvn	r0, #0
   1ab6c:	bxne	lr
   1ab70:	ldr	r0, [r2, #8]
   1ab74:	rsb	r1, r1, #0
   1ab78:	ldr	r2, [r0]
   1ab7c:	mov	r0, #0
   1ab80:	cmp	r2, r1
   1ab84:	movwcc	r0, #1
   1ab88:	subhi	r0, r0, #1
   1ab8c:	bx	lr
   1ab90:	ldr	r1, [r0, #4]
   1ab94:	mov	r0, #0
   1ab98:	cmp	r1, #2
   1ab9c:	movwcc	r0, #1
   1aba0:	bx	lr
   1aba4:	ldr	r3, [r0, #4]
   1aba8:	mov	r1, r0
   1abac:	cmp	r3, #0
   1abb0:	bmi	1abf4 <__assert_fail@plt+0x98d4>
   1abb4:	mov	r0, #0
   1abb8:	cmp	r3, #1
   1abbc:	bxgt	lr
   1abc0:	cmp	r3, #0
   1abc4:	mov	r0, #0
   1abc8:	mov	r3, #0
   1abcc:	beq	1abd8 <__assert_fail@plt+0x98b8>
   1abd0:	ldr	r1, [r1, #8]
   1abd4:	ldr	r3, [r1]
   1abd8:	cmn	r3, #-2147483647	; 0x80000001
   1abdc:	mov	r1, #0
   1abe0:	mov	r2, #1
   1abe4:	movwcc	r1, #1
   1abe8:	cmp	r1, r3, lsr #31
   1abec:	movcs	r0, r2
   1abf0:	bx	lr
   1abf4:	mov	r2, #0
   1abf8:	cmn	r3, #1
   1abfc:	beq	1ac08 <__assert_fail@plt+0x98e8>
   1ac00:	mov	r0, r2
   1ac04:	bx	lr
   1ac08:	ldr	r0, [r1, #8]
   1ac0c:	ldr	r0, [r0]
   1ac10:	mvn	r1, r0
   1ac14:	cmp	r0, #-2147483648	; 0x80000000
   1ac18:	lsr	r1, r1, #31
   1ac1c:	asrhi	r1, r0, #31
   1ac20:	mvn	r0, r1
   1ac24:	lsr	r2, r0, #31
   1ac28:	mov	r0, r2
   1ac2c:	bx	lr
   1ac30:	ldr	r1, [r0, #4]
   1ac34:	mov	r0, #0
   1ac38:	cmp	r1, #2
   1ac3c:	movwcc	r0, #1
   1ac40:	bx	lr
   1ac44:	ldr	r3, [r0, #4]
   1ac48:	mov	ip, r0
   1ac4c:	mov	r0, #1
   1ac50:	cmp	r3, #0
   1ac54:	mov	r2, r3
   1ac58:	rsbmi	r2, r3, #0
   1ac5c:	cmp	r2, #1
   1ac60:	bxgt	lr
   1ac64:	mov	r0, #0
   1ac68:	cmp	r3, #0
   1ac6c:	mov	r2, #0
   1ac70:	beq	1ac7c <__assert_fail@plt+0x995c>
   1ac74:	ldr	r2, [ip, #8]
   1ac78:	ldr	r2, [r2]
   1ac7c:	cmp	r2, r1
   1ac80:	movwhi	r0, #1
   1ac84:	subcc	r0, r0, #1
   1ac88:	bx	lr
   1ac8c:	ldr	r3, [r0, #4]
   1ac90:	cmp	r3, #0
   1ac94:	bmi	1acc8 <__assert_fail@plt+0x99a8>
   1ac98:	mov	r1, #0
   1ac9c:	cmp	r3, #1
   1aca0:	bgt	1acc0 <__assert_fail@plt+0x99a0>
   1aca4:	mov	r2, #1
   1aca8:	cmp	r3, #0
   1acac:	beq	1acf4 <__assert_fail@plt+0x99d4>
   1acb0:	ldr	r0, [r0, #8]
   1acb4:	ldr	r0, [r0]
   1acb8:	cmp	r0, #32768	; 0x8000
   1acbc:	movcc	r1, r2
   1acc0:	mov	r0, r1
   1acc4:	bx	lr
   1acc8:	mov	r2, #0
   1accc:	cmn	r3, #1
   1acd0:	bne	1acf4 <__assert_fail@plt+0x99d4>
   1acd4:	ldr	r0, [r0, #8]
   1acd8:	mov	r1, #0
   1acdc:	ldr	r0, [r0]
   1ace0:	cmp	r0, #32768	; 0x8000
   1ace4:	movwcc	r1, #1
   1ace8:	subhi	r1, r1, #1
   1acec:	mvn	r0, r1
   1acf0:	lsr	r2, r0, #31
   1acf4:	mov	r1, r2
   1acf8:	mov	r0, r1
   1acfc:	bx	lr
   1ad00:	ldr	r2, [r0, #4]
   1ad04:	mov	r1, r0
   1ad08:	mov	r0, #0
   1ad0c:	cmp	r2, #0
   1ad10:	bxmi	lr
   1ad14:	cmp	r2, #1
   1ad18:	bgt	1ad3c <__assert_fail@plt+0x9a1c>
   1ad1c:	cmp	r2, #0
   1ad20:	moveq	r0, #1
   1ad24:	bxeq	lr
   1ad28:	ldr	r0, [r1, #8]
   1ad2c:	ldr	r1, [r0]
   1ad30:	mov	r0, #0
   1ad34:	cmp	r1, #65536	; 0x10000
   1ad38:	movwcc	r0, #1
   1ad3c:	bx	lr
   1ad40:	ldr	r1, [r0, #4]
   1ad44:	cmp	r1, #0
   1ad48:	beq	1ad64 <__assert_fail@plt+0x9a44>
   1ad4c:	ldr	r0, [r0, #8]
   1ad50:	cmn	r1, #1
   1ad54:	ldr	r0, [r0]
   1ad58:	ble	1ad70 <__assert_fail@plt+0x9a50>
   1ad5c:	bic	r0, r0, #-2147483648	; 0x80000000
   1ad60:	bx	lr
   1ad64:	mov	r0, #0
   1ad68:	bic	r0, r0, #-2147483648	; 0x80000000
   1ad6c:	bx	lr
   1ad70:	sub	r0, r0, #1
   1ad74:	mvn	r1, #-2147483648	; 0x80000000
   1ad78:	orr	r0, r0, #-2147483648	; 0x80000000
   1ad7c:	eor	r0, r0, r1
   1ad80:	bx	lr
   1ad84:	ldr	r1, [r0, #4]
   1ad88:	cmp	r1, #0
   1ad8c:	moveq	r0, #0
   1ad90:	bxeq	lr
   1ad94:	ldr	r0, [r0, #8]
   1ad98:	ldr	r0, [r0]
   1ad9c:	bx	lr
   1ada0:	ldr	r0, [r0, #4]
   1ada4:	cmp	r0, #0
   1ada8:	rsbmi	r0, r0, #0
   1adac:	bx	lr
   1adb0:	mov	r2, r0
   1adb4:	mov	r0, #0
   1adb8:	cmp	r1, #0
   1adbc:	bmi	1addc <__assert_fail@plt+0x9abc>
   1adc0:	ldr	r3, [r2, #4]
   1adc4:	cmp	r3, #0
   1adc8:	rsbmi	r3, r3, #0
   1adcc:	cmp	r3, r1
   1add0:	bxle	lr
   1add4:	ldr	r0, [r2, #8]
   1add8:	ldr	r0, [r0, r1, lsl #2]
   1addc:	bx	lr
   1ade0:	push	{r4, r5, fp, lr}
   1ade4:	add	fp, sp, #8
   1ade8:	cmp	r1, #0
   1adec:	mov	r4, r0
   1adf0:	mov	r0, #1
   1adf4:	subne	r1, r1, #1
   1adf8:	add	r5, r0, r1, lsr #5
   1adfc:	ldr	r1, [r4]
   1ae00:	cmp	r1, #0
   1ae04:	beq	1ae28 <__assert_fail@plt+0x9b08>
   1ae08:	movw	r0, #12576	; 0x3120
   1ae0c:	lsl	r1, r1, #2
   1ae10:	lsl	r2, r5, #2
   1ae14:	movt	r0, #4
   1ae18:	ldr	r3, [r0]
   1ae1c:	ldr	r0, [r4, #8]
   1ae20:	blx	r3
   1ae24:	b	1ae3c <__assert_fail@plt+0x9b1c>
   1ae28:	movw	r0, #12572	; 0x311c
   1ae2c:	movt	r0, #4
   1ae30:	ldr	r1, [r0]
   1ae34:	lsl	r0, r5, #2
   1ae38:	blx	r1
   1ae3c:	str	r0, [r4, #8]
   1ae40:	str	r5, [r4]
   1ae44:	ldr	r0, [r4, #4]
   1ae48:	cmp	r0, #0
   1ae4c:	rsbmi	r0, r0, #0
   1ae50:	cmp	r0, r5
   1ae54:	movgt	r0, #0
   1ae58:	strgt	r0, [r4, #4]
   1ae5c:	pop	{r4, r5, fp, pc}
   1ae60:	ldr	r0, [r0, #8]
   1ae64:	bx	lr
   1ae68:	push	{r4, r5, fp, lr}
   1ae6c:	add	fp, sp, #8
   1ae70:	cmp	r1, #0
   1ae74:	ble	1af00 <__assert_fail@plt+0x9be0>
   1ae78:	mov	r5, r1
   1ae7c:	ldr	r1, [r0]
   1ae80:	mov	r4, r0
   1ae84:	cmp	r1, r5
   1ae88:	bge	1aebc <__assert_fail@plt+0x9b9c>
   1ae8c:	cmp	r5, #1
   1ae90:	movle	r5, #1
   1ae94:	cmp	r1, #0
   1ae98:	beq	1aec4 <__assert_fail@plt+0x9ba4>
   1ae9c:	movw	r0, #12576	; 0x3120
   1aea0:	lsl	r1, r1, #2
   1aea4:	lsl	r2, r5, #2
   1aea8:	movt	r0, #4
   1aeac:	ldr	r3, [r0]
   1aeb0:	ldr	r0, [r4, #8]
   1aeb4:	blx	r3
   1aeb8:	b	1aed8 <__assert_fail@plt+0x9bb8>
   1aebc:	ldr	r0, [r4, #8]
   1aec0:	pop	{r4, r5, fp, pc}
   1aec4:	movw	r0, #12572	; 0x311c
   1aec8:	movt	r0, #4
   1aecc:	ldr	r1, [r0]
   1aed0:	lsl	r0, r5, #2
   1aed4:	blx	r1
   1aed8:	str	r0, [r4, #8]
   1aedc:	str	r5, [r4]
   1aee0:	ldr	r1, [r4, #4]
   1aee4:	cmp	r1, #0
   1aee8:	rsbmi	r1, r1, #0
   1aeec:	cmp	r1, r5
   1aef0:	pople	{r4, r5, fp, pc}
   1aef4:	mov	r1, #0
   1aef8:	str	r1, [r4, #4]
   1aefc:	pop	{r4, r5, fp, pc}
   1af00:	movw	r0, #5322	; 0x14ca
   1af04:	movw	r1, #1996	; 0x7cc
   1af08:	movw	r3, #2879	; 0xb3f
   1af0c:	movw	r2, #1663	; 0x67f
   1af10:	movt	r0, #3
   1af14:	movt	r1, #3
   1af18:	movt	r3, #3
   1af1c:	bl	11320 <__assert_fail@plt>
   1af20:	push	{r4, r5, fp, lr}
   1af24:	add	fp, sp, #8
   1af28:	cmp	r1, #0
   1af2c:	ble	1afb8 <__assert_fail@plt+0x9c98>
   1af30:	mov	r5, r1
   1af34:	ldr	r1, [r0]
   1af38:	mov	r4, r0
   1af3c:	cmp	r1, r5
   1af40:	bge	1af74 <__assert_fail@plt+0x9c54>
   1af44:	cmp	r5, #1
   1af48:	movle	r5, #1
   1af4c:	cmp	r1, #0
   1af50:	beq	1af7c <__assert_fail@plt+0x9c5c>
   1af54:	movw	r0, #12576	; 0x3120
   1af58:	lsl	r1, r1, #2
   1af5c:	lsl	r2, r5, #2
   1af60:	movt	r0, #4
   1af64:	ldr	r3, [r0]
   1af68:	ldr	r0, [r4, #8]
   1af6c:	blx	r3
   1af70:	b	1af90 <__assert_fail@plt+0x9c70>
   1af74:	ldr	r0, [r4, #8]
   1af78:	pop	{r4, r5, fp, pc}
   1af7c:	movw	r0, #12572	; 0x311c
   1af80:	movt	r0, #4
   1af84:	ldr	r1, [r0]
   1af88:	lsl	r0, r5, #2
   1af8c:	blx	r1
   1af90:	str	r0, [r4, #8]
   1af94:	str	r5, [r4]
   1af98:	ldr	r1, [r4, #4]
   1af9c:	cmp	r1, #0
   1afa0:	rsbmi	r1, r1, #0
   1afa4:	cmp	r1, r5
   1afa8:	pople	{r4, r5, fp, pc}
   1afac:	mov	r1, #0
   1afb0:	str	r1, [r4, #4]
   1afb4:	pop	{r4, r5, fp, pc}
   1afb8:	movw	r0, #5322	; 0x14ca
   1afbc:	movw	r1, #1996	; 0x7cc
   1afc0:	movw	r3, #2879	; 0xb3f
   1afc4:	movw	r2, #1663	; 0x67f
   1afc8:	movt	r0, #3
   1afcc:	movt	r1, #3
   1afd0:	movt	r3, #3
   1afd4:	bl	11320 <__assert_fail@plt>
   1afd8:	cmp	r1, #0
   1afdc:	mov	r3, r1
   1afe0:	rsbmi	r3, r1, #0
   1afe4:	push	{fp, lr}
   1afe8:	mov	fp, sp
   1afec:	ldr	r2, [r0, #8]
   1aff0:	sub	ip, r2, #4
   1aff4:	mov	r2, r3
   1aff8:	cmp	r3, #1
   1affc:	blt	1b010 <__assert_fail@plt+0x9cf0>
   1b000:	ldr	lr, [ip, r2, lsl #2]
   1b004:	sub	r3, r2, #1
   1b008:	cmp	lr, #0
   1b00c:	beq	1aff4 <__assert_fail@plt+0x9cd4>
   1b010:	cmp	r1, #0
   1b014:	rsbmi	r2, r2, #0
   1b018:	str	r2, [r0, #4]
   1b01c:	pop	{fp, pc}
   1b020:	push	{fp, lr}
   1b024:	mov	fp, sp
   1b028:	mov	r3, #0
   1b02c:	cmp	r2, #0
   1b030:	sub	ip, r1, #4
   1b034:	str	r3, [r0]
   1b038:	mov	r3, r2
   1b03c:	rsbmi	r3, r2, #0
   1b040:	str	r2, [r0, #4]
   1b044:	str	r1, [r0, #8]
   1b048:	mov	r1, r3
   1b04c:	cmp	r3, #1
   1b050:	blt	1b064 <__assert_fail@plt+0x9d44>
   1b054:	ldr	lr, [ip, r1, lsl #2]
   1b058:	sub	r3, r1, #1
   1b05c:	cmp	lr, #0
   1b060:	beq	1b048 <__assert_fail@plt+0x9d28>
   1b064:	cmp	r2, #0
   1b068:	rsbmi	r1, r1, #0
   1b06c:	str	r1, [r0, #4]
   1b070:	pop	{fp, pc}
   1b074:	nop	{0}
   1b078:	push	{r4, r5, r6, sl, fp, lr}
   1b07c:	add	fp, sp, #16
   1b080:	vpush	{d8-d11}
   1b084:	vcmpe.f64	d0, d0
   1b088:	mov	r4, r0
   1b08c:	mov	r5, #0
   1b090:	vmrs	APSR_nzcv, fpscr
   1b094:	bvs	1b1f0 <__assert_fail@plt+0x9ed0>
   1b098:	vmov.f64	d16, #96	; 0x3f000000  0.5
   1b09c:	vmov.f64	d8, d0
   1b0a0:	vmul.f64	d16, d0, d16
   1b0a4:	vcmp.f64	d16, d0
   1b0a8:	vmrs	APSR_nzcv, fpscr
   1b0ac:	beq	1b1f0 <__assert_fail@plt+0x9ed0>
   1b0b0:	vcmpe.f64	d8, #0.0
   1b0b4:	vneg.f64	d16, d8
   1b0b8:	vmov.f64	d11, d8
   1b0bc:	vmov.f64	d9, #112	; 0x3f800000  1.0
   1b0c0:	vmrs	APSR_nzcv, fpscr
   1b0c4:	vmovmi.f64	d11, d16
   1b0c8:	vcmpe.f64	d11, d9
   1b0cc:	vmrs	APSR_nzcv, fpscr
   1b0d0:	bmi	1b1f0 <__assert_fail@plt+0x9ed0>
   1b0d4:	vldr	d10, [pc, #340]	; 1b230 <__assert_fail@plt+0x9f10>
   1b0d8:	mov	r5, #1
   1b0dc:	vcmpe.f64	d11, d10
   1b0e0:	vmrs	APSR_nzcv, fpscr
   1b0e4:	blt	1b104 <__assert_fail@plt+0x9de4>
   1b0e8:	vldr	d16, [pc, #328]	; 1b238 <__assert_fail@plt+0x9f18>
   1b0ec:	mov	r5, #1
   1b0f0:	vmul.f64	d11, d11, d16
   1b0f4:	add	r5, r5, #1
   1b0f8:	vcmpe.f64	d11, d10
   1b0fc:	vmrs	APSR_nzcv, fpscr
   1b100:	bge	1b0f0 <__assert_fail@plt+0x9dd0>
   1b104:	ldr	r1, [r4]
   1b108:	cmp	r5, r1
   1b10c:	ble	1b144 <__assert_fail@plt+0x9e24>
   1b110:	cmp	r5, #1
   1b114:	mov	r6, r5
   1b118:	movls	r6, #1
   1b11c:	cmp	r1, #0
   1b120:	beq	1b14c <__assert_fail@plt+0x9e2c>
   1b124:	movw	r0, #12576	; 0x3120
   1b128:	lsl	r1, r1, #2
   1b12c:	lsl	r2, r6, #2
   1b130:	movt	r0, #4
   1b134:	ldr	r3, [r0]
   1b138:	ldr	r0, [r4, #8]
   1b13c:	blx	r3
   1b140:	b	1b160 <__assert_fail@plt+0x9e40>
   1b144:	ldr	r0, [r4, #8]
   1b148:	b	1b180 <__assert_fail@plt+0x9e60>
   1b14c:	movw	r0, #12572	; 0x311c
   1b150:	movt	r0, #4
   1b154:	ldr	r1, [r0]
   1b158:	lsl	r0, r6, #2
   1b15c:	blx	r1
   1b160:	str	r0, [r4, #8]
   1b164:	str	r6, [r4]
   1b168:	ldr	r1, [r4, #4]
   1b16c:	cmp	r1, #0
   1b170:	rsbmi	r1, r1, #0
   1b174:	cmp	r1, r6
   1b178:	movgt	r1, #0
   1b17c:	strgt	r1, [r4, #4]
   1b180:	vcvt.u32.f64	s0, d11
   1b184:	vcvt.f64.u32	d16, s0
   1b188:	vsub.f64	d16, d11, d16
   1b18c:	vcmpe.f64	d16, d9
   1b190:	vmrs	APSR_nzcv, fpscr
   1b194:	bpl	1b21c <__assert_fail@plt+0x9efc>
   1b198:	vmov	r1, s0
   1b19c:	sub	r2, r5, #1
   1b1a0:	cmp	r2, #1
   1b1a4:	str	r1, [r0, r2, lsl #2]
   1b1a8:	blt	1b1e4 <__assert_fail@plt+0x9ec4>
   1b1ac:	sub	r1, r5, #2
   1b1b0:	vmul.f64	d16, d16, d10
   1b1b4:	vcvt.u32.f64	s0, d16
   1b1b8:	vcvt.f64.u32	d17, s0
   1b1bc:	vsub.f64	d16, d16, d17
   1b1c0:	vcmpe.f64	d16, d9
   1b1c4:	vmrs	APSR_nzcv, fpscr
   1b1c8:	bpl	1b1fc <__assert_fail@plt+0x9edc>
   1b1cc:	vmov	r2, s0
   1b1d0:	cmp	r1, #0
   1b1d4:	str	r2, [r0, r1, lsl #2]
   1b1d8:	sub	r2, r1, #1
   1b1dc:	mov	r1, r2
   1b1e0:	bgt	1b1b0 <__assert_fail@plt+0x9e90>
   1b1e4:	vcmpe.f64	d8, #0.0
   1b1e8:	vmrs	APSR_nzcv, fpscr
   1b1ec:	rsbmi	r5, r5, #0
   1b1f0:	str	r5, [r4, #4]
   1b1f4:	vpop	{d8-d11}
   1b1f8:	pop	{r4, r5, r6, sl, fp, pc}
   1b1fc:	movw	r0, #2930	; 0xb72
   1b200:	movw	r1, #1996	; 0x7cc
   1b204:	movw	r3, #2938	; 0xb7a
   1b208:	mov	r2, #1744	; 0x6d0
   1b20c:	movt	r0, #3
   1b210:	movt	r1, #3
   1b214:	movt	r3, #3
   1b218:	bl	11320 <__assert_fail@plt>
   1b21c:	movw	r0, #2930	; 0xb72
   1b220:	movw	r1, #1996	; 0x7cc
   1b224:	movw	r3, #2938	; 0xb7a
   1b228:	movw	r2, #1736	; 0x6c8
   1b22c:	b	1b20c <__assert_fail@plt+0x9eec>
   1b230:	andeq	r0, r0, r0
   1b234:	mvnsmi	r0, r0
   1b238:	andeq	r0, r0, r0
   1b23c:	ldclcc	0, cr0, [r0]
   1b240:	movw	r1, #1992	; 0x7c8
   1b244:	mov	r2, #0
   1b248:	movt	r1, #3
   1b24c:	str	r2, [r0]
   1b250:	str	r2, [r0, #4]
   1b254:	str	r1, [r0, #8]
   1b258:	b	1b078 <__assert_fail@plt+0x9d58>
   1b25c:	nop	{0}
   1b260:	push	{r4, r5, fp, lr}
   1b264:	add	fp, sp, #8
   1b268:	ldr	lr, [r0, #4]
   1b26c:	cmp	lr, #0
   1b270:	mov	r2, lr
   1b274:	rsbmi	r2, lr, #0
   1b278:	cmp	r2, #0
   1b27c:	beq	1b35c <__assert_fail@plt+0xa03c>
   1b280:	ldr	r0, [r0, #8]
   1b284:	sub	ip, r2, #1
   1b288:	mov	r4, #0
   1b28c:	ldr	r3, [r0, ip, lsl #2]
   1b290:	cmp	r4, r3, lsr #24
   1b294:	mov	r1, r3
   1b298:	bne	1b2b4 <__assert_fail@plt+0x9f94>
   1b29c:	mov	r4, #0
   1b2a0:	mov	r1, r3
   1b2a4:	lsl	r1, r1, #8
   1b2a8:	add	r4, r4, #8
   1b2ac:	cmp	r1, #16777216	; 0x1000000
   1b2b0:	bcc	1b2a4 <__assert_fail@plt+0x9f84>
   1b2b4:	cmp	r1, #0
   1b2b8:	bmi	1b2cc <__assert_fail@plt+0x9fac>
   1b2bc:	lsl	r1, r1, #1
   1b2c0:	add	r4, r4, #1
   1b2c4:	cmn	r1, #1
   1b2c8:	bgt	1b2bc <__assert_fail@plt+0x9f9c>
   1b2cc:	add	r5, r4, #21
   1b2d0:	cmn	r5, #1
   1b2d4:	bgt	1b2e8 <__assert_fail@plt+0x9fc8>
   1b2d8:	mvn	r1, #20
   1b2dc:	sub	r1, r1, r4
   1b2e0:	mvn	r4, #0
   1b2e4:	and	r3, r3, r4, lsl r1
   1b2e8:	vmov	s0, r3
   1b2ec:	cmp	ip, #1
   1b2f0:	vcvt.f64.u32	d16, s0
   1b2f4:	blt	1b34c <__assert_fail@plt+0xa02c>
   1b2f8:	vldr	d17, [pc, #104]	; 1b368 <__assert_fail@plt+0xa048>
   1b2fc:	sub	r2, r2, #2
   1b300:	mvn	r3, #0
   1b304:	b	1b318 <__assert_fail@plt+0x9ff8>
   1b308:	sub	r1, r2, #1
   1b30c:	cmp	r2, #0
   1b310:	mov	r2, r1
   1b314:	ble	1b34c <__assert_fail@plt+0xa02c>
   1b318:	vmul.f64	d16, d16, d17
   1b31c:	cmp	r5, #1
   1b320:	blt	1b308 <__assert_fail@plt+0x9fe8>
   1b324:	ldr	r4, [r0, r2, lsl #2]
   1b328:	sub	r1, r5, #32
   1b32c:	cmn	r1, #1
   1b330:	rsble	r5, r5, #32
   1b334:	andle	r4, r4, r3, lsl r5
   1b338:	mov	r5, r1
   1b33c:	vmov	s0, r4
   1b340:	vcvt.f64.u32	d18, s0
   1b344:	vadd.f64	d16, d16, d18
   1b348:	b	1b308 <__assert_fail@plt+0x9fe8>
   1b34c:	vneg.f64	d17, d16
   1b350:	cmp	lr, #0
   1b354:	vselge.f64	d0, d16, d17
   1b358:	pop	{r4, r5, fp, pc}
   1b35c:	vmov.i32	d0, #0	; 0x00000000
   1b360:	pop	{r4, r5, fp, pc}
   1b364:	nop	{0}
   1b368:	andeq	r0, r0, r0
   1b36c:	mvnsmi	r0, r0
   1b370:	vcmpe.f64	d0, #0.0
   1b374:	vneg.f64	d16, d0
   1b378:	ldr	r2, [r0, #4]
   1b37c:	vmrs	APSR_nzcv, fpscr
   1b380:	vselge.f64	d16, d0, d16
   1b384:	cmp	r2, #0
   1b388:	beq	1b43c <__assert_fail@plt+0xa11c>
   1b38c:	rsbmi	r2, r2, #0
   1b390:	cmp	r2, #2
   1b394:	blt	1b3e8 <__assert_fail@plt+0xa0c8>
   1b398:	sub	r1, r2, #1
   1b39c:	sub	r3, r2, #2
   1b3a0:	and	r1, r1, #3
   1b3a4:	cmp	r3, #3
   1b3a8:	bcc	1b3d0 <__assert_fail@plt+0xa0b0>
   1b3ac:	vldr	d17, [pc, #172]	; 1b460 <__assert_fail@plt+0xa140>
   1b3b0:	sub	r3, r1, r2
   1b3b4:	add	r3, r3, #1
   1b3b8:	vmul.f64	d16, d16, d17
   1b3bc:	adds	r3, r3, #4
   1b3c0:	vmul.f64	d16, d16, d17
   1b3c4:	vmul.f64	d16, d16, d17
   1b3c8:	vmul.f64	d16, d16, d17
   1b3cc:	bne	1b3b8 <__assert_fail@plt+0xa098>
   1b3d0:	cmp	r1, #0
   1b3d4:	beq	1b3e8 <__assert_fail@plt+0xa0c8>
   1b3d8:	vldr	d17, [pc, #128]	; 1b460 <__assert_fail@plt+0xa140>
   1b3dc:	vmul.f64	d16, d16, d17
   1b3e0:	subs	r1, r1, #1
   1b3e4:	bne	1b3dc <__assert_fail@plt+0xa0bc>
   1b3e8:	vldr	d17, [pc, #120]	; 1b468 <__assert_fail@plt+0xa148>
   1b3ec:	mvn	ip, #0
   1b3f0:	vcmpe.f64	d16, d17
   1b3f4:	vmrs	APSR_nzcv, fpscr
   1b3f8:	bge	1b44c <__assert_fail@plt+0xa12c>
   1b3fc:	cmp	r2, #1
   1b400:	blt	1b43c <__assert_fail@plt+0xa11c>
   1b404:	ldr	r0, [r0, #8]
   1b408:	sub	r0, r0, #4
   1b40c:	vcvt.u32.f64	s0, d16
   1b410:	ldr	r3, [r0, r2, lsl #2]
   1b414:	vmov	r1, s0
   1b418:	cmp	r3, r1
   1b41c:	bhi	1b454 <__assert_fail@plt+0xa134>
   1b420:	bcc	1b44c <__assert_fail@plt+0xa12c>
   1b424:	vcvt.f64.u32	d18, s0
   1b428:	sub	r2, r2, #1
   1b42c:	cmp	r2, #0
   1b430:	vsub.f64	d16, d16, d18
   1b434:	vmul.f64	d16, d16, d17
   1b438:	bgt	1b40c <__assert_fail@plt+0xa0ec>
   1b43c:	vcmpe.f64	d16, #0.0
   1b440:	mov	ip, #0
   1b444:	vmrs	APSR_nzcv, fpscr
   1b448:	mvngt	ip, #0
   1b44c:	mov	r0, ip
   1b450:	bx	lr
   1b454:	mov	ip, #1
   1b458:	mov	r0, ip
   1b45c:	bx	lr
   1b460:	andeq	r0, r0, r0
   1b464:	ldclcc	0, cr0, [r0]
   1b468:	andeq	r0, r0, r0
   1b46c:	mvnsmi	r0, r0
   1b470:	ldr	r2, [r0, #4]
   1b474:	mov	ip, r0
   1b478:	cmn	r2, #1
   1b47c:	ble	1b564 <__assert_fail@plt+0xa244>
   1b480:	vcmpe.f64	d0, #0.0
   1b484:	mov	r0, #1
   1b488:	vmrs	APSR_nzcv, fpscr
   1b48c:	bmi	1b630 <__assert_fail@plt+0xa310>
   1b490:	vcmpe.f64	d0, #0.0
   1b494:	vneg.f64	d16, d0
   1b498:	vmrs	APSR_nzcv, fpscr
   1b49c:	vselge.f64	d16, d0, d16
   1b4a0:	cmp	r2, #0
   1b4a4:	beq	1b550 <__assert_fail@plt+0xa230>
   1b4a8:	cmp	r2, #2
   1b4ac:	blt	1b500 <__assert_fail@plt+0xa1e0>
   1b4b0:	sub	r1, r2, #1
   1b4b4:	and	r3, r1, #3
   1b4b8:	sub	r1, r2, #2
   1b4bc:	cmp	r1, #3
   1b4c0:	bcc	1b4e8 <__assert_fail@plt+0xa1c8>
   1b4c4:	vldr	d17, [pc, #380]	; 1b648 <__assert_fail@plt+0xa328>
   1b4c8:	sub	r1, r3, r2
   1b4cc:	add	r1, r1, #1
   1b4d0:	vmul.f64	d16, d16, d17
   1b4d4:	adds	r1, r1, #4
   1b4d8:	vmul.f64	d16, d16, d17
   1b4dc:	vmul.f64	d16, d16, d17
   1b4e0:	vmul.f64	d16, d16, d17
   1b4e4:	bne	1b4d0 <__assert_fail@plt+0xa1b0>
   1b4e8:	cmp	r3, #0
   1b4ec:	beq	1b500 <__assert_fail@plt+0xa1e0>
   1b4f0:	vldr	d17, [pc, #336]	; 1b648 <__assert_fail@plt+0xa328>
   1b4f4:	vmul.f64	d16, d16, d17
   1b4f8:	subs	r3, r3, #1
   1b4fc:	bne	1b4f4 <__assert_fail@plt+0xa1d4>
   1b500:	vldr	d17, [pc, #328]	; 1b650 <__assert_fail@plt+0xa330>
   1b504:	vcmpe.f64	d16, d17
   1b508:	vmrs	APSR_nzcv, fpscr
   1b50c:	bge	1b634 <__assert_fail@plt+0xa314>
   1b510:	cmp	r2, #1
   1b514:	blt	1b550 <__assert_fail@plt+0xa230>
   1b518:	ldr	r1, [ip, #8]
   1b51c:	sub	ip, r1, #4
   1b520:	vcvt.u32.f64	s0, d16
   1b524:	ldr	r3, [ip, r2, lsl #2]
   1b528:	vmov	r1, s0
   1b52c:	cmp	r3, r1
   1b530:	bxhi	lr
   1b534:	bcc	1b634 <__assert_fail@plt+0xa314>
   1b538:	vcvt.f64.u32	d18, s0
   1b53c:	sub	r2, r2, #1
   1b540:	cmp	r2, #0
   1b544:	vsub.f64	d16, d16, d18
   1b548:	vmul.f64	d16, d16, d17
   1b54c:	bgt	1b520 <__assert_fail@plt+0xa200>
   1b550:	vcmpe.f64	d16, #0.0
   1b554:	mov	r0, #0
   1b558:	vmrs	APSR_nzcv, fpscr
   1b55c:	mvngt	r0, #0
   1b560:	bx	lr
   1b564:	vcmpe.f64	d0, #0.0
   1b568:	mvn	r0, #0
   1b56c:	vmrs	APSR_nzcv, fpscr
   1b570:	bge	1b630 <__assert_fail@plt+0xa310>
   1b574:	vneg.f64	d16, d0
   1b578:	cmn	r2, #2
   1b57c:	bgt	1b5d4 <__assert_fail@plt+0xa2b4>
   1b580:	mov	r1, #3
   1b584:	bic	r3, r1, r2
   1b588:	mvn	r1, #1
   1b58c:	sub	r1, r1, r2
   1b590:	cmp	r1, #3
   1b594:	bcc	1b5bc <__assert_fail@plt+0xa29c>
   1b598:	vldr	d17, [pc, #168]	; 1b648 <__assert_fail@plt+0xa328>
   1b59c:	add	r1, r2, r3
   1b5a0:	add	r1, r1, #1
   1b5a4:	vmul.f64	d16, d16, d17
   1b5a8:	adds	r1, r1, #4
   1b5ac:	vmul.f64	d16, d16, d17
   1b5b0:	vmul.f64	d16, d16, d17
   1b5b4:	vmul.f64	d16, d16, d17
   1b5b8:	bne	1b5a4 <__assert_fail@plt+0xa284>
   1b5bc:	cmp	r3, #0
   1b5c0:	beq	1b5d4 <__assert_fail@plt+0xa2b4>
   1b5c4:	vldr	d17, [pc, #124]	; 1b648 <__assert_fail@plt+0xa328>
   1b5c8:	vmul.f64	d16, d16, d17
   1b5cc:	subs	r3, r3, #1
   1b5d0:	bne	1b5c8 <__assert_fail@plt+0xa2a8>
   1b5d4:	vldr	d17, [pc, #116]	; 1b650 <__assert_fail@plt+0xa330>
   1b5d8:	vcmpe.f64	d16, d17
   1b5dc:	vmrs	APSR_nzcv, fpscr
   1b5e0:	bge	1b63c <__assert_fail@plt+0xa31c>
   1b5e4:	ldr	r1, [ip, #8]
   1b5e8:	rsb	r2, r2, #0
   1b5ec:	sub	ip, r1, #4
   1b5f0:	vcvt.u32.f64	s0, d16
   1b5f4:	ldr	r3, [ip, r2, lsl #2]
   1b5f8:	vmov	r1, s0
   1b5fc:	cmp	r3, r1
   1b600:	bhi	1b630 <__assert_fail@plt+0xa310>
   1b604:	bcc	1b63c <__assert_fail@plt+0xa31c>
   1b608:	vcvt.f64.u32	d18, s0
   1b60c:	sub	r2, r2, #1
   1b610:	cmp	r2, #0
   1b614:	vsub.f64	d16, d16, d18
   1b618:	vmul.f64	d16, d16, d17
   1b61c:	bgt	1b5f0 <__assert_fail@plt+0xa2d0>
   1b620:	vcmpe.f64	d16, #0.0
   1b624:	mov	r0, #0
   1b628:	vmrs	APSR_nzcv, fpscr
   1b62c:	movwgt	r0, #1
   1b630:	bx	lr
   1b634:	mvn	r0, #0
   1b638:	bx	lr
   1b63c:	mov	r0, #1
   1b640:	bx	lr
   1b644:	nop	{0}
   1b648:	andeq	r0, r0, r0
   1b64c:	ldclcc	0, cr0, [r0]
   1b650:	andeq	r0, r0, r0
   1b654:	mvnsmi	r0, r0
   1b658:	ldr	r1, [r0, #4]
   1b65c:	mov	r2, #1
   1b660:	cmp	r1, #0
   1b664:	asr	r0, r1, #31
   1b668:	addgt	r0, r2, r1, asr #31
   1b66c:	bx	lr
   1b670:	ldr	r3, [r0, #4]
   1b674:	cmp	r3, #0
   1b678:	mvnmi	r0, #0
   1b67c:	bxmi	lr
   1b680:	mov	r2, r0
   1b684:	mov	r0, #1
   1b688:	cmp	r3, #1
   1b68c:	bxgt	lr
   1b690:	cmp	r3, #0
   1b694:	mov	r0, #0
   1b698:	mov	r3, #0
   1b69c:	beq	1b6a8 <__assert_fail@plt+0xa388>
   1b6a0:	ldr	r2, [r2, #8]
   1b6a4:	ldr	r3, [r2]
   1b6a8:	cmp	r3, r1
   1b6ac:	movwhi	r0, #1
   1b6b0:	subcc	r0, r0, #1
   1b6b4:	bx	lr
   1b6b8:	ldr	r3, [r1, #4]
   1b6bc:	ldr	r2, [r0, #4]
   1b6c0:	cmp	r2, r3
   1b6c4:	bne	1b704 <__assert_fail@plt+0xa3e4>
   1b6c8:	cmp	r2, #0
   1b6cc:	bmi	1b710 <__assert_fail@plt+0xa3f0>
   1b6d0:	ldr	r1, [r1, #8]
   1b6d4:	ldr	r0, [r0, #8]
   1b6d8:	sub	ip, r0, #4
   1b6dc:	sub	r1, r1, #4
   1b6e0:	cmp	r2, #1
   1b6e4:	blt	1b750 <__assert_fail@plt+0xa430>
   1b6e8:	sub	r3, r2, #1
   1b6ec:	ldr	r0, [r1, r2, lsl #2]
   1b6f0:	ldr	r2, [ip, r2, lsl #2]
   1b6f4:	cmp	r2, r0
   1b6f8:	mov	r2, r3
   1b6fc:	beq	1b6e0 <__assert_fail@plt+0xa3c0>
   1b700:	b	1b744 <__assert_fail@plt+0xa424>
   1b704:	mov	r0, #1
   1b708:	mvnlt	r0, #0
   1b70c:	bx	lr
   1b710:	ldr	r0, [r0, #8]
   1b714:	ldr	r1, [r1, #8]
   1b718:	rsb	r2, r2, #0
   1b71c:	sub	ip, r1, #4
   1b720:	sub	r0, r0, #4
   1b724:	cmp	r2, #1
   1b728:	blt	1b750 <__assert_fail@plt+0xa430>
   1b72c:	sub	r3, r2, #1
   1b730:	ldr	r1, [r0, r2, lsl #2]
   1b734:	ldr	r2, [ip, r2, lsl #2]
   1b738:	cmp	r2, r1
   1b73c:	mov	r2, r3
   1b740:	beq	1b724 <__assert_fail@plt+0xa404>
   1b744:	mvn	r0, #0
   1b748:	movwhi	r0, #1
   1b74c:	bx	lr
   1b750:	mov	r0, #0
   1b754:	bx	lr
   1b758:	ldr	r3, [r1, #4]
   1b75c:	ldr	r2, [r1, #8]
   1b760:	ldr	r1, [r0, #4]
   1b764:	ldr	r0, [r0, #8]
   1b768:	cmp	r3, #0
   1b76c:	rsbmi	r3, r3, #0
   1b770:	cmp	r1, #0
   1b774:	rsbmi	r1, r1, #0
   1b778:	cmp	r1, r3
   1b77c:	bne	1b7b8 <__assert_fail@plt+0xa498>
   1b780:	sub	ip, r0, #4
   1b784:	sub	r2, r2, #4
   1b788:	cmp	r1, #1
   1b78c:	movlt	r0, #0
   1b790:	bxlt	lr
   1b794:	sub	r3, r1, #1
   1b798:	ldr	r0, [r2, r1, lsl #2]
   1b79c:	ldr	r1, [ip, r1, lsl #2]
   1b7a0:	cmp	r1, r0
   1b7a4:	mov	r1, r3
   1b7a8:	beq	1b788 <__assert_fail@plt+0xa468>
   1b7ac:	mvn	r0, #0
   1b7b0:	movwhi	r0, #1
   1b7b4:	bx	lr
   1b7b8:	mov	r0, #1
   1b7bc:	mvnlt	r0, #0
   1b7c0:	bx	lr
   1b7c4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b7c8:	add	fp, sp, #28
   1b7cc:	sub	sp, sp, #20
   1b7d0:	mov	r4, r0
   1b7d4:	cmp	r0, r1
   1b7d8:	beq	1b82c <__assert_fail@plt+0xa50c>
   1b7dc:	mov	r8, r1
   1b7e0:	ldr	r1, [r4]
   1b7e4:	ldr	r5, [r8, #4]
   1b7e8:	cmp	r5, #0
   1b7ec:	rsbmi	r5, r5, #0
   1b7f0:	cmp	r5, r1
   1b7f4:	ble	1b834 <__assert_fail@plt+0xa514>
   1b7f8:	cmp	r5, #1
   1b7fc:	mov	r7, r5
   1b800:	movle	r7, #1
   1b804:	cmp	r1, #0
   1b808:	beq	1b844 <__assert_fail@plt+0xa524>
   1b80c:	movw	r0, #12576	; 0x3120
   1b810:	lsl	r1, r1, #2
   1b814:	lsl	r2, r7, #2
   1b818:	movt	r0, #4
   1b81c:	ldr	r3, [r0]
   1b820:	ldr	r0, [r4, #8]
   1b824:	blx	r3
   1b828:	b	1b858 <__assert_fail@plt+0xa538>
   1b82c:	ldr	r0, [r4, #4]
   1b830:	b	1b9e4 <__assert_fail@plt+0xa6c4>
   1b834:	ldr	r0, [r4, #8]
   1b838:	cmp	r5, #1
   1b83c:	bge	1b880 <__assert_fail@plt+0xa560>
   1b840:	b	1b9dc <__assert_fail@plt+0xa6bc>
   1b844:	movw	r0, #12572	; 0x311c
   1b848:	movt	r0, #4
   1b84c:	ldr	r1, [r0]
   1b850:	lsl	r0, r7, #2
   1b854:	blx	r1
   1b858:	str	r0, [r4, #8]
   1b85c:	str	r7, [r4]
   1b860:	ldr	r1, [r4, #4]
   1b864:	cmp	r1, #0
   1b868:	rsbmi	r1, r1, #0
   1b86c:	cmp	r1, r7
   1b870:	movgt	r1, #0
   1b874:	strgt	r1, [r4, #4]
   1b878:	cmp	r5, #1
   1b87c:	blt	1b9dc <__assert_fail@plt+0xa6bc>
   1b880:	ldr	r1, [r8, #8]
   1b884:	mov	r2, #0
   1b888:	cmp	r5, #4
   1b88c:	bcc	1b970 <__assert_fail@plt+0xa650>
   1b890:	add	r3, r1, r5, lsl #2
   1b894:	cmp	r0, r3
   1b898:	addcc	r3, r0, r5, lsl #2
   1b89c:	cmpcc	r1, r3
   1b8a0:	bcc	1b970 <__assert_fail@plt+0xa650>
   1b8a4:	bic	r2, r5, #-2147483645	; 0x80000003
   1b8a8:	stmib	sp, {r5, r8}
   1b8ac:	mov	r3, #1
   1b8b0:	mov	sl, #0
   1b8b4:	str	r4, [sp, #12]
   1b8b8:	sub	r5, r2, #4
   1b8bc:	add	r3, r3, r5, lsr #2
   1b8c0:	cmp	r5, #12
   1b8c4:	and	r7, r3, #3
   1b8c8:	str	r7, [sp, #16]
   1b8cc:	bcc	1b934 <__assert_fail@plt+0xa614>
   1b8d0:	ldr	r7, [sp, #16]
   1b8d4:	mov	r5, #0
   1b8d8:	mov	lr, #48	; 0x30
   1b8dc:	mov	sl, #0
   1b8e0:	sub	r3, r3, r7
   1b8e4:	add	r6, r1, r5
   1b8e8:	add	ip, r0, r5
   1b8ec:	add	r5, r5, #64	; 0x40
   1b8f0:	subs	r3, r3, #4
   1b8f4:	add	sl, sl, #16
   1b8f8:	mov	r4, r6
   1b8fc:	mov	r8, ip
   1b900:	add	r9, r6, #16
   1b904:	add	r7, ip, #16
   1b908:	add	r6, r6, #32
   1b90c:	vld1.32	{d16-d17}, [r4], lr
   1b910:	vst1.32	{d16-d17}, [r8], lr
   1b914:	vld1.32	{d16-d17}, [r9]
   1b918:	vst1.32	{d16-d17}, [r7]
   1b91c:	add	r7, ip, #32
   1b920:	vld1.32	{d16-d17}, [r6]
   1b924:	vst1.32	{d16-d17}, [r7]
   1b928:	vld1.32	{d16-d17}, [r4]
   1b92c:	vst1.32	{d16-d17}, [r8]
   1b930:	bne	1b8e4 <__assert_fail@plt+0xa5c4>
   1b934:	ldr	r6, [sp, #16]
   1b938:	cmp	r6, #0
   1b93c:	beq	1b95c <__assert_fail@plt+0xa63c>
   1b940:	add	r3, r1, sl, lsl #2
   1b944:	add	r7, r0, sl, lsl #2
   1b948:	rsb	r5, r6, #0
   1b94c:	vld1.32	{d16-d17}, [r3]!
   1b950:	adds	r5, r5, #1
   1b954:	vst1.32	{d16-d17}, [r7]!
   1b958:	bcc	1b94c <__assert_fail@plt+0xa62c>
   1b95c:	ldr	r5, [sp, #4]
   1b960:	ldr	r4, [sp, #12]
   1b964:	ldr	r8, [sp, #8]
   1b968:	cmp	r5, r2
   1b96c:	beq	1b9dc <__assert_fail@plt+0xa6bc>
   1b970:	mvn	r3, r2
   1b974:	ands	r7, r5, #3
   1b978:	add	r3, r5, r3
   1b97c:	beq	1b994 <__assert_fail@plt+0xa674>
   1b980:	ldr	r6, [r1, r2, lsl #2]
   1b984:	subs	r7, r7, #1
   1b988:	str	r6, [r0, r2, lsl #2]
   1b98c:	add	r2, r2, #1
   1b990:	bne	1b980 <__assert_fail@plt+0xa660>
   1b994:	cmp	r3, #3
   1b998:	bcc	1b9dc <__assert_fail@plt+0xa6bc>
   1b99c:	sub	r3, r5, r2
   1b9a0:	lsl	r2, r2, #2
   1b9a4:	add	r7, r1, #16
   1b9a8:	ldr	r6, [r1, r2]!
   1b9ac:	add	r5, r0, #16
   1b9b0:	subs	r3, r3, #4
   1b9b4:	str	r6, [r0, r2]!
   1b9b8:	ldr	r6, [r1, #4]
   1b9bc:	str	r6, [r0, #4]
   1b9c0:	ldr	r6, [r1, #8]
   1b9c4:	str	r6, [r0, #8]
   1b9c8:	ldr	r1, [r1, #12]
   1b9cc:	str	r1, [r0, #12]
   1b9d0:	mov	r1, r7
   1b9d4:	mov	r0, r5
   1b9d8:	bne	1b9a4 <__assert_fail@plt+0xa684>
   1b9dc:	ldr	r0, [r8, #4]
   1b9e0:	str	r0, [r4, #4]
   1b9e4:	cmp	r0, #0
   1b9e8:	rsbmi	r0, r0, #0
   1b9ec:	str	r0, [r4, #4]
   1b9f0:	sub	sp, fp, #28
   1b9f4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b9f8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b9fc:	add	fp, sp, #28
   1ba00:	sub	sp, sp, #20
   1ba04:	mov	r4, r0
   1ba08:	cmp	r0, r1
   1ba0c:	beq	1ba60 <__assert_fail@plt+0xa740>
   1ba10:	mov	r8, r1
   1ba14:	ldr	r1, [r4]
   1ba18:	ldr	r5, [r8, #4]
   1ba1c:	cmp	r5, #0
   1ba20:	rsbmi	r5, r5, #0
   1ba24:	cmp	r5, r1
   1ba28:	ble	1ba68 <__assert_fail@plt+0xa748>
   1ba2c:	cmp	r5, #1
   1ba30:	mov	r7, r5
   1ba34:	movle	r7, #1
   1ba38:	cmp	r1, #0
   1ba3c:	beq	1ba78 <__assert_fail@plt+0xa758>
   1ba40:	movw	r0, #12576	; 0x3120
   1ba44:	lsl	r1, r1, #2
   1ba48:	lsl	r2, r7, #2
   1ba4c:	movt	r0, #4
   1ba50:	ldr	r3, [r0]
   1ba54:	ldr	r0, [r4, #8]
   1ba58:	blx	r3
   1ba5c:	b	1ba8c <__assert_fail@plt+0xa76c>
   1ba60:	ldr	r0, [r4, #4]
   1ba64:	b	1bc18 <__assert_fail@plt+0xa8f8>
   1ba68:	ldr	r0, [r4, #8]
   1ba6c:	cmp	r5, #1
   1ba70:	bge	1bab4 <__assert_fail@plt+0xa794>
   1ba74:	b	1bc10 <__assert_fail@plt+0xa8f0>
   1ba78:	movw	r0, #12572	; 0x311c
   1ba7c:	movt	r0, #4
   1ba80:	ldr	r1, [r0]
   1ba84:	lsl	r0, r7, #2
   1ba88:	blx	r1
   1ba8c:	str	r0, [r4, #8]
   1ba90:	str	r7, [r4]
   1ba94:	ldr	r1, [r4, #4]
   1ba98:	cmp	r1, #0
   1ba9c:	rsbmi	r1, r1, #0
   1baa0:	cmp	r1, r7
   1baa4:	movgt	r1, #0
   1baa8:	strgt	r1, [r4, #4]
   1baac:	cmp	r5, #1
   1bab0:	blt	1bc10 <__assert_fail@plt+0xa8f0>
   1bab4:	ldr	r1, [r8, #8]
   1bab8:	mov	r2, #0
   1babc:	cmp	r5, #4
   1bac0:	bcc	1bba4 <__assert_fail@plt+0xa884>
   1bac4:	add	r3, r1, r5, lsl #2
   1bac8:	cmp	r0, r3
   1bacc:	addcc	r3, r0, r5, lsl #2
   1bad0:	cmpcc	r1, r3
   1bad4:	bcc	1bba4 <__assert_fail@plt+0xa884>
   1bad8:	bic	r2, r5, #-2147483645	; 0x80000003
   1badc:	stmib	sp, {r5, r8}
   1bae0:	mov	r3, #1
   1bae4:	mov	sl, #0
   1bae8:	str	r4, [sp, #12]
   1baec:	sub	r5, r2, #4
   1baf0:	add	r3, r3, r5, lsr #2
   1baf4:	cmp	r5, #12
   1baf8:	and	r7, r3, #3
   1bafc:	str	r7, [sp, #16]
   1bb00:	bcc	1bb68 <__assert_fail@plt+0xa848>
   1bb04:	ldr	r7, [sp, #16]
   1bb08:	mov	r5, #0
   1bb0c:	mov	lr, #48	; 0x30
   1bb10:	mov	sl, #0
   1bb14:	sub	r3, r3, r7
   1bb18:	add	r6, r1, r5
   1bb1c:	add	ip, r0, r5
   1bb20:	add	r5, r5, #64	; 0x40
   1bb24:	subs	r3, r3, #4
   1bb28:	add	sl, sl, #16
   1bb2c:	mov	r4, r6
   1bb30:	mov	r8, ip
   1bb34:	add	r9, r6, #16
   1bb38:	add	r7, ip, #16
   1bb3c:	add	r6, r6, #32
   1bb40:	vld1.32	{d16-d17}, [r4], lr
   1bb44:	vst1.32	{d16-d17}, [r8], lr
   1bb48:	vld1.32	{d16-d17}, [r9]
   1bb4c:	vst1.32	{d16-d17}, [r7]
   1bb50:	add	r7, ip, #32
   1bb54:	vld1.32	{d16-d17}, [r6]
   1bb58:	vst1.32	{d16-d17}, [r7]
   1bb5c:	vld1.32	{d16-d17}, [r4]
   1bb60:	vst1.32	{d16-d17}, [r8]
   1bb64:	bne	1bb18 <__assert_fail@plt+0xa7f8>
   1bb68:	ldr	r6, [sp, #16]
   1bb6c:	cmp	r6, #0
   1bb70:	beq	1bb90 <__assert_fail@plt+0xa870>
   1bb74:	add	r3, r1, sl, lsl #2
   1bb78:	add	r7, r0, sl, lsl #2
   1bb7c:	rsb	r5, r6, #0
   1bb80:	vld1.32	{d16-d17}, [r3]!
   1bb84:	adds	r5, r5, #1
   1bb88:	vst1.32	{d16-d17}, [r7]!
   1bb8c:	bcc	1bb80 <__assert_fail@plt+0xa860>
   1bb90:	ldr	r5, [sp, #4]
   1bb94:	ldr	r4, [sp, #12]
   1bb98:	ldr	r8, [sp, #8]
   1bb9c:	cmp	r5, r2
   1bba0:	beq	1bc10 <__assert_fail@plt+0xa8f0>
   1bba4:	mvn	r3, r2
   1bba8:	ands	r7, r5, #3
   1bbac:	add	r3, r5, r3
   1bbb0:	beq	1bbc8 <__assert_fail@plt+0xa8a8>
   1bbb4:	ldr	r6, [r1, r2, lsl #2]
   1bbb8:	subs	r7, r7, #1
   1bbbc:	str	r6, [r0, r2, lsl #2]
   1bbc0:	add	r2, r2, #1
   1bbc4:	bne	1bbb4 <__assert_fail@plt+0xa894>
   1bbc8:	cmp	r3, #3
   1bbcc:	bcc	1bc10 <__assert_fail@plt+0xa8f0>
   1bbd0:	sub	r3, r5, r2
   1bbd4:	lsl	r2, r2, #2
   1bbd8:	add	r7, r1, #16
   1bbdc:	ldr	r6, [r1, r2]!
   1bbe0:	add	r5, r0, #16
   1bbe4:	subs	r3, r3, #4
   1bbe8:	str	r6, [r0, r2]!
   1bbec:	ldr	r6, [r1, #4]
   1bbf0:	str	r6, [r0, #4]
   1bbf4:	ldr	r6, [r1, #8]
   1bbf8:	str	r6, [r0, #8]
   1bbfc:	ldr	r1, [r1, #12]
   1bc00:	str	r1, [r0, #12]
   1bc04:	mov	r1, r7
   1bc08:	mov	r0, r5
   1bc0c:	bne	1bbd8 <__assert_fail@plt+0xa8b8>
   1bc10:	ldr	r0, [r8, #4]
   1bc14:	str	r0, [r4, #4]
   1bc18:	rsb	r0, r0, #0
   1bc1c:	str	r0, [r4, #4]
   1bc20:	sub	sp, fp, #28
   1bc24:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1bc28:	ldr	r2, [r0, #4]
   1bc2c:	ldr	r3, [r1, #4]
   1bc30:	str	r3, [r0, #4]
   1bc34:	str	r2, [r1, #4]
   1bc38:	ldr	r2, [r0]
   1bc3c:	ldr	r3, [r1]
   1bc40:	str	r3, [r0]
   1bc44:	str	r2, [r1]
   1bc48:	ldr	r2, [r0, #8]
   1bc4c:	ldr	r3, [r1, #8]
   1bc50:	str	r3, [r0, #8]
   1bc54:	str	r2, [r1, #8]
   1bc58:	bx	lr
   1bc5c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1bc60:	add	fp, sp, #24
   1bc64:	sub	sp, sp, #16
   1bc68:	mov	r5, r0
   1bc6c:	movw	r0, #1992	; 0x7c8
   1bc70:	mov	r4, r1
   1bc74:	cmp	r2, #0
   1bc78:	movt	r0, #3
   1bc7c:	str	r0, [sp, #12]
   1bc80:	mov	r0, #0
   1bc84:	str	r0, [sp, #8]
   1bc88:	str	r0, [sp, #4]
   1bc8c:	beq	1bcf0 <__assert_fail@plt+0xa9d0>
   1bc90:	movw	r0, #12572	; 0x311c
   1bc94:	mov	r8, #1
   1bc98:	mov	r6, r2
   1bc9c:	movt	r0, #4
   1bca0:	str	r8, [sp, #8]
   1bca4:	ldr	r1, [r0]
   1bca8:	mov	r0, #4
   1bcac:	blx	r1
   1bcb0:	str	r0, [sp, #12]
   1bcb4:	str	r8, [sp, #4]
   1bcb8:	mov	r7, r0
   1bcbc:	str	r6, [r0]
   1bcc0:	add	r2, sp, #4
   1bcc4:	mov	r0, r5
   1bcc8:	mov	r1, r4
   1bccc:	bl	1bd0c <__assert_fail@plt+0xa9ec>
   1bcd0:	movw	r0, #12580	; 0x3124
   1bcd4:	mov	r1, #4
   1bcd8:	movt	r0, #4
   1bcdc:	ldr	r2, [r0]
   1bce0:	mov	r0, r7
   1bce4:	blx	r2
   1bce8:	sub	sp, fp, #24
   1bcec:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1bcf0:	str	r0, [sp, #8]
   1bcf4:	add	r2, sp, #4
   1bcf8:	mov	r0, r5
   1bcfc:	mov	r1, r4
   1bd00:	bl	1bd0c <__assert_fail@plt+0xa9ec>
   1bd04:	sub	sp, fp, #24
   1bd08:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1bd0c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1bd10:	add	fp, sp, #28
   1bd14:	sub	sp, sp, #20
   1bd18:	mov	r4, r0
   1bd1c:	ldr	r0, [r1, #4]
   1bd20:	ldr	sl, [r2, #4]
   1bd24:	mov	r5, r1
   1bd28:	mov	r6, r2
   1bd2c:	eors	r1, sl, r0
   1bd30:	bmi	1bd74 <__assert_fail@plt+0xaa54>
   1bd34:	cmp	sl, #0
   1bd38:	ldr	r1, [r4]
   1bd3c:	mov	r7, r5
   1bd40:	rsbmi	sl, sl, #0
   1bd44:	cmp	r0, #0
   1bd48:	rsbmi	r0, r0, #0
   1bd4c:	cmp	r0, sl
   1bd50:	mov	r8, r0
   1bd54:	movlt	r8, sl
   1bd58:	movlt	r7, r6
   1bd5c:	movlt	r6, r5
   1bd60:	movlt	sl, r0
   1bd64:	cmp	r8, r1
   1bd68:	bge	1bd88 <__assert_fail@plt+0xaa68>
   1bd6c:	ldr	r0, [r4, #8]
   1bd70:	b	1bde8 <__assert_fail@plt+0xaac8>
   1bd74:	mov	r0, r4
   1bd78:	mov	r1, r5
   1bd7c:	mov	r2, r6
   1bd80:	bl	1c21c <__assert_fail@plt+0xaefc>
   1bd84:	b	1bf0c <__assert_fail@plt+0xabec>
   1bd88:	add	r9, r8, #1
   1bd8c:	cmp	r1, #0
   1bd90:	beq	1bdb4 <__assert_fail@plt+0xaa94>
   1bd94:	movw	r0, #12576	; 0x3120
   1bd98:	lsl	r1, r1, #2
   1bd9c:	lsl	r2, r9, #2
   1bda0:	movt	r0, #4
   1bda4:	ldr	r3, [r0]
   1bda8:	ldr	r0, [r4, #8]
   1bdac:	blx	r3
   1bdb0:	b	1bdc8 <__assert_fail@plt+0xaaa8>
   1bdb4:	movw	r0, #12572	; 0x311c
   1bdb8:	movt	r0, #4
   1bdbc:	ldr	r1, [r0]
   1bdc0:	lsl	r0, r9, #2
   1bdc4:	blx	r1
   1bdc8:	str	r0, [r4, #8]
   1bdcc:	str	r9, [r4]
   1bdd0:	ldr	r1, [r4, #4]
   1bdd4:	cmp	r1, #0
   1bdd8:	rsbmi	r1, r1, #0
   1bddc:	cmp	r1, r9
   1bde0:	movgt	r1, #0
   1bde4:	strgt	r1, [r4, #4]
   1bde8:	ldr	r1, [r7, #8]
   1bdec:	cmp	sl, #1
   1bdf0:	add	r2, sp, #8
   1bdf4:	stm	r2, {r0, r4, r5}
   1bdf8:	str	r1, [sp, #4]
   1bdfc:	blt	1be74 <__assert_fail@plt+0xab54>
   1be00:	ldr	r3, [r6, #8]
   1be04:	mov	lr, #0
   1be08:	mov	r5, r0
   1be0c:	mov	r7, sl
   1be10:	mov	r9, #0
   1be14:	ldr	r6, [r1], #4
   1be18:	ldr	r4, [r3], #4
   1be1c:	adds	ip, r6, r9
   1be20:	adds	r4, ip, r4
   1be24:	adc	r2, lr, #0
   1be28:	adds	r6, r6, r9
   1be2c:	str	r4, [r5], #4
   1be30:	adc	r9, r2, #0
   1be34:	subs	r7, r7, #1
   1be38:	bne	1be14 <__assert_fail@plt+0xaaf4>
   1be3c:	cmp	r8, sl
   1be40:	ble	1be80 <__assert_fail@plt+0xab60>
   1be44:	ldr	r4, [sp, #12]
   1be48:	ldr	r0, [sp, #8]
   1be4c:	sub	r1, r8, sl
   1be50:	add	r3, sl, #1
   1be54:	and	lr, r1, #1
   1be58:	cmp	r8, r3
   1be5c:	bne	1be8c <__assert_fail@plt+0xab6c>
   1be60:	ldr	ip, [sp, #4]
   1be64:	mov	r1, #0
   1be68:	cmp	lr, #0
   1be6c:	bne	1bee4 <__assert_fail@plt+0xabc4>
   1be70:	b	1bf00 <__assert_fail@plt+0xabe0>
   1be74:	mov	r9, #0
   1be78:	cmp	r8, sl
   1be7c:	bgt	1be44 <__assert_fail@plt+0xab24>
   1be80:	ldr	r4, [sp, #12]
   1be84:	ldr	r0, [sp, #8]
   1be88:	b	1bf00 <__assert_fail@plt+0xabe0>
   1be8c:	ldr	ip, [sp, #4]
   1be90:	add	r1, sl, lr
   1be94:	add	r6, r0, r3, lsl #2
   1be98:	mov	r5, #0
   1be9c:	sub	r1, r1, r8
   1bea0:	add	r7, ip, r3, lsl #2
   1bea4:	mov	r3, #0
   1bea8:	ldr	r2, [r7, #-4]
   1beac:	sub	r5, r5, #2
   1beb0:	adds	r2, r2, r9
   1beb4:	str	r2, [r6, #-4]
   1beb8:	ldr	r2, [r7]
   1bebc:	add	r7, r7, #8
   1bec0:	adcs	r2, r2, #0
   1bec4:	str	r2, [r6]
   1bec8:	adc	r9, r3, #0
   1becc:	add	r6, r6, #8
   1bed0:	cmp	r1, r5
   1bed4:	bne	1bea8 <__assert_fail@plt+0xab88>
   1bed8:	rsb	r1, r5, #0
   1bedc:	cmp	lr, #0
   1bee0:	beq	1bf00 <__assert_fail@plt+0xabe0>
   1bee4:	add	r2, ip, sl, lsl #2
   1bee8:	add	r3, r0, sl, lsl #2
   1beec:	ldr	r2, [r2, r1, lsl #2]
   1bef0:	adds	r2, r2, r9
   1bef4:	str	r2, [r3, r1, lsl #2]
   1bef8:	mov	r1, #0
   1befc:	adc	r9, r1, #0
   1bf00:	ldr	r5, [sp, #16]
   1bf04:	str	r9, [r0, r8, lsl #2]
   1bf08:	add	r0, r9, r8
   1bf0c:	ldr	r1, [r5, #4]
   1bf10:	cmn	r1, #1
   1bf14:	rsble	r0, r0, #0
   1bf18:	str	r0, [r4, #4]
   1bf1c:	sub	sp, fp, #28
   1bf20:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1bf24:	push	{r4, sl, fp, lr}
   1bf28:	add	fp, sp, #8
   1bf2c:	mov	r3, r1
   1bf30:	mov	r1, r2
   1bf34:	mov	r4, r0
   1bf38:	mov	r2, r3
   1bf3c:	bl	1bf50 <__assert_fail@plt+0xac30>
   1bf40:	ldr	r0, [r4, #4]
   1bf44:	rsb	r0, r0, #0
   1bf48:	str	r0, [r4, #4]
   1bf4c:	pop	{r4, sl, fp, pc}
   1bf50:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1bf54:	add	fp, sp, #28
   1bf58:	sub	sp, sp, #36	; 0x24
   1bf5c:	mov	r8, r1
   1bf60:	mov	r4, r0
   1bf64:	cmp	r0, r2
   1bf68:	beq	1bfbc <__assert_fail@plt+0xac9c>
   1bf6c:	ldr	r5, [r2, #4]
   1bf70:	ldr	r1, [r4]
   1bf74:	mov	r9, r2
   1bf78:	cmp	r5, #0
   1bf7c:	rsbmi	r5, r5, #0
   1bf80:	cmp	r5, r1
   1bf84:	ble	1bfc4 <__assert_fail@plt+0xaca4>
   1bf88:	cmp	r5, #1
   1bf8c:	mov	r7, r5
   1bf90:	movle	r7, #1
   1bf94:	cmp	r1, #0
   1bf98:	beq	1bfd4 <__assert_fail@plt+0xacb4>
   1bf9c:	movw	r0, #12576	; 0x3120
   1bfa0:	lsl	r1, r1, #2
   1bfa4:	lsl	r2, r7, #2
   1bfa8:	movt	r0, #4
   1bfac:	ldr	r3, [r0]
   1bfb0:	ldr	r0, [r4, #8]
   1bfb4:	blx	r3
   1bfb8:	b	1bfe8 <__assert_fail@plt+0xacc8>
   1bfbc:	ldr	r0, [r4, #4]
   1bfc0:	b	1c17c <__assert_fail@plt+0xae5c>
   1bfc4:	ldr	r0, [r4, #8]
   1bfc8:	cmp	r5, #1
   1bfcc:	bge	1c010 <__assert_fail@plt+0xacf0>
   1bfd0:	b	1c174 <__assert_fail@plt+0xae54>
   1bfd4:	movw	r0, #12572	; 0x311c
   1bfd8:	movt	r0, #4
   1bfdc:	ldr	r1, [r0]
   1bfe0:	lsl	r0, r7, #2
   1bfe4:	blx	r1
   1bfe8:	str	r0, [r4, #8]
   1bfec:	str	r7, [r4]
   1bff0:	ldr	r1, [r4, #4]
   1bff4:	cmp	r1, #0
   1bff8:	rsbmi	r1, r1, #0
   1bffc:	cmp	r1, r7
   1c000:	movgt	r1, #0
   1c004:	strgt	r1, [r4, #4]
   1c008:	cmp	r5, #1
   1c00c:	blt	1c174 <__assert_fail@plt+0xae54>
   1c010:	ldr	r1, [r9, #8]
   1c014:	mov	r2, #0
   1c018:	cmp	r5, #4
   1c01c:	bcc	1c108 <__assert_fail@plt+0xade8>
   1c020:	add	r3, r1, r5, lsl #2
   1c024:	cmp	r0, r3
   1c028:	addcc	r3, r0, r5, lsl #2
   1c02c:	cmpcc	r1, r3
   1c030:	bcc	1c108 <__assert_fail@plt+0xade8>
   1c034:	bic	r2, r5, #-2147483645	; 0x80000003
   1c038:	mov	r3, #1
   1c03c:	str	r8, [sp, #12]
   1c040:	mov	r8, #0
   1c044:	str	r4, [sp, #16]
   1c048:	stmib	sp, {r5, r9}
   1c04c:	sub	r6, r2, #4
   1c050:	add	r3, r3, r6, lsr #2
   1c054:	cmp	r6, #12
   1c058:	and	r7, r3, #3
   1c05c:	str	r7, [sp, #20]
   1c060:	bcc	1c0c8 <__assert_fail@plt+0xada8>
   1c064:	ldr	r7, [sp, #20]
   1c068:	mov	r6, #0
   1c06c:	mov	lr, #48	; 0x30
   1c070:	mov	r8, #0
   1c074:	sub	r3, r3, r7
   1c078:	add	r4, r1, r6
   1c07c:	add	ip, r0, r6
   1c080:	add	r6, r6, #64	; 0x40
   1c084:	subs	r3, r3, #4
   1c088:	add	r8, r8, #16
   1c08c:	mov	r5, r4
   1c090:	mov	r9, ip
   1c094:	add	sl, r4, #16
   1c098:	add	r7, ip, #16
   1c09c:	add	r4, r4, #32
   1c0a0:	vld1.32	{d16-d17}, [r5], lr
   1c0a4:	vst1.32	{d16-d17}, [r9], lr
   1c0a8:	vld1.32	{d16-d17}, [sl]
   1c0ac:	vst1.32	{d16-d17}, [r7]
   1c0b0:	add	r7, ip, #32
   1c0b4:	vld1.32	{d16-d17}, [r4]
   1c0b8:	vst1.32	{d16-d17}, [r7]
   1c0bc:	vld1.32	{d16-d17}, [r5]
   1c0c0:	vst1.32	{d16-d17}, [r9]
   1c0c4:	bne	1c078 <__assert_fail@plt+0xad58>
   1c0c8:	ldr	r6, [sp, #20]
   1c0cc:	cmp	r6, #0
   1c0d0:	beq	1c0f0 <__assert_fail@plt+0xadd0>
   1c0d4:	add	r3, r1, r8, lsl #2
   1c0d8:	add	r7, r0, r8, lsl #2
   1c0dc:	rsb	r6, r6, #0
   1c0e0:	vld1.32	{d16-d17}, [r3]!
   1c0e4:	adds	r6, r6, #1
   1c0e8:	vst1.32	{d16-d17}, [r7]!
   1c0ec:	bcc	1c0e0 <__assert_fail@plt+0xadc0>
   1c0f0:	ldr	r5, [sp, #4]
   1c0f4:	ldr	r4, [sp, #16]
   1c0f8:	ldr	r8, [sp, #12]
   1c0fc:	ldr	r9, [sp, #8]
   1c100:	cmp	r5, r2
   1c104:	beq	1c174 <__assert_fail@plt+0xae54>
   1c108:	mvn	r3, r2
   1c10c:	ands	r7, r5, #3
   1c110:	add	r3, r5, r3
   1c114:	beq	1c12c <__assert_fail@plt+0xae0c>
   1c118:	ldr	r6, [r1, r2, lsl #2]
   1c11c:	subs	r7, r7, #1
   1c120:	str	r6, [r0, r2, lsl #2]
   1c124:	add	r2, r2, #1
   1c128:	bne	1c118 <__assert_fail@plt+0xadf8>
   1c12c:	cmp	r3, #3
   1c130:	bcc	1c174 <__assert_fail@plt+0xae54>
   1c134:	sub	r3, r5, r2
   1c138:	lsl	r2, r2, #2
   1c13c:	add	r7, r1, #16
   1c140:	ldr	r6, [r1, r2]!
   1c144:	add	r5, r0, #16
   1c148:	subs	r3, r3, #4
   1c14c:	str	r6, [r0, r2]!
   1c150:	ldr	r6, [r1, #4]
   1c154:	str	r6, [r0, #4]
   1c158:	ldr	r6, [r1, #8]
   1c15c:	str	r6, [r0, #8]
   1c160:	ldr	r1, [r1, #12]
   1c164:	str	r1, [r0, #12]
   1c168:	mov	r1, r7
   1c16c:	mov	r0, r5
   1c170:	bne	1c13c <__assert_fail@plt+0xae1c>
   1c174:	ldr	r0, [r9, #4]
   1c178:	str	r0, [r4, #4]
   1c17c:	rsb	r0, r0, #0
   1c180:	cmp	r8, #0
   1c184:	str	r0, [r4, #4]
   1c188:	movw	r0, #1992	; 0x7c8
   1c18c:	movt	r0, #3
   1c190:	str	r0, [sp, #32]
   1c194:	mov	r0, #0
   1c198:	str	r0, [sp, #28]
   1c19c:	str	r0, [sp, #24]
   1c1a0:	beq	1c200 <__assert_fail@plt+0xaee0>
   1c1a4:	movw	r0, #12572	; 0x311c
   1c1a8:	mov	r5, #1
   1c1ac:	movt	r0, #4
   1c1b0:	str	r5, [sp, #28]
   1c1b4:	ldr	r1, [r0]
   1c1b8:	mov	r0, #4
   1c1bc:	blx	r1
   1c1c0:	str	r0, [sp, #32]
   1c1c4:	str	r5, [sp, #24]
   1c1c8:	mov	r6, r0
   1c1cc:	str	r8, [r0]
   1c1d0:	add	r2, sp, #24
   1c1d4:	mov	r0, r4
   1c1d8:	mov	r1, r4
   1c1dc:	bl	1bd0c <__assert_fail@plt+0xa9ec>
   1c1e0:	movw	r0, #12580	; 0x3124
   1c1e4:	mov	r1, #4
   1c1e8:	movt	r0, #4
   1c1ec:	ldr	r2, [r0]
   1c1f0:	mov	r0, r6
   1c1f4:	blx	r2
   1c1f8:	sub	sp, fp, #28
   1c1fc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c200:	str	r0, [sp, #28]
   1c204:	add	r2, sp, #24
   1c208:	mov	r0, r4
   1c20c:	mov	r1, r4
   1c210:	bl	1bd0c <__assert_fail@plt+0xa9ec>
   1c214:	sub	sp, fp, #28
   1c218:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c21c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c220:	add	fp, sp, #28
   1c224:	sub	sp, sp, #4
   1c228:	mov	r5, r1
   1c22c:	ldr	sl, [r2, #4]
   1c230:	mov	r6, r0
   1c234:	ldr	r0, [r2, #8]
   1c238:	mov	r8, r2
   1c23c:	ldr	r9, [r5, #4]
   1c240:	ldr	r1, [r5, #8]
   1c244:	cmp	sl, #0
   1c248:	rsbmi	sl, sl, #0
   1c24c:	cmp	r9, #0
   1c250:	rsbmi	r9, r9, #0
   1c254:	cmp	r9, sl
   1c258:	bne	1c2cc <__assert_fail@plt+0xafac>
   1c25c:	sub	r1, r1, #4
   1c260:	sub	r0, r0, #4
   1c264:	mov	r2, r9
   1c268:	cmp	r2, #1
   1c26c:	blt	1c310 <__assert_fail@plt+0xaff0>
   1c270:	sub	r3, r2, #1
   1c274:	ldr	r7, [r0, r2, lsl #2]
   1c278:	ldr	r2, [r1, r2, lsl #2]
   1c27c:	cmp	r2, r7
   1c280:	mov	r2, r3
   1c284:	beq	1c268 <__assert_fail@plt+0xaf48>
   1c288:	bhi	1c2d0 <__assert_fail@plt+0xafb0>
   1c28c:	ldr	r1, [r6]
   1c290:	cmp	sl, r1
   1c294:	ble	1c31c <__assert_fail@plt+0xaffc>
   1c298:	cmp	sl, #1
   1c29c:	mov	r4, sl
   1c2a0:	movle	r4, #1
   1c2a4:	cmp	r1, #0
   1c2a8:	beq	1c33c <__assert_fail@plt+0xb01c>
   1c2ac:	movw	r0, #12576	; 0x3120
   1c2b0:	lsl	r1, r1, #2
   1c2b4:	lsl	r2, r4, #2
   1c2b8:	movt	r0, #4
   1c2bc:	ldr	r3, [r0]
   1c2c0:	ldr	r0, [r6, #8]
   1c2c4:	blx	r3
   1c2c8:	b	1c350 <__assert_fail@plt+0xb030>
   1c2cc:	blt	1c28c <__assert_fail@plt+0xaf6c>
   1c2d0:	ldr	r1, [r6]
   1c2d4:	cmp	r9, r1
   1c2d8:	ble	1c32c <__assert_fail@plt+0xb00c>
   1c2dc:	cmp	r9, #1
   1c2e0:	mov	r4, r9
   1c2e4:	movle	r4, #1
   1c2e8:	cmp	r1, #0
   1c2ec:	beq	1c4b0 <__assert_fail@plt+0xb190>
   1c2f0:	movw	r0, #12576	; 0x3120
   1c2f4:	lsl	r1, r1, #2
   1c2f8:	lsl	r2, r4, #2
   1c2fc:	movt	r0, #4
   1c300:	ldr	r3, [r0]
   1c304:	ldr	r0, [r6, #8]
   1c308:	blx	r3
   1c30c:	b	1c4c4 <__assert_fail@plt+0xb1a4>
   1c310:	mov	r0, #0
   1c314:	sub	sp, fp, #28
   1c318:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c31c:	ldr	r0, [r6, #8]
   1c320:	cmp	sl, r9
   1c324:	bge	1c378 <__assert_fail@plt+0xb058>
   1c328:	b	1c620 <__assert_fail@plt+0xb300>
   1c32c:	ldr	r0, [r6, #8]
   1c330:	cmp	r9, sl
   1c334:	bge	1c4ec <__assert_fail@plt+0xb1cc>
   1c338:	b	1c620 <__assert_fail@plt+0xb300>
   1c33c:	movw	r0, #12572	; 0x311c
   1c340:	movt	r0, #4
   1c344:	ldr	r1, [r0]
   1c348:	lsl	r0, r4, #2
   1c34c:	blx	r1
   1c350:	str	r0, [r6, #8]
   1c354:	str	r4, [r6]
   1c358:	ldr	r1, [r6, #4]
   1c35c:	cmp	r1, #0
   1c360:	rsbmi	r1, r1, #0
   1c364:	cmp	r1, r4
   1c368:	movgt	r1, #0
   1c36c:	strgt	r1, [r6, #4]
   1c370:	cmp	sl, r9
   1c374:	blt	1c620 <__assert_fail@plt+0xb300>
   1c378:	ldr	ip, [r8, #8]
   1c37c:	cmp	r9, #1
   1c380:	blt	1c3d4 <__assert_fail@plt+0xb0b4>
   1c384:	ldr	r3, [r5, #8]
   1c388:	mov	r8, #0
   1c38c:	mov	r1, ip
   1c390:	mov	r6, r0
   1c394:	mov	r4, r9
   1c398:	ldr	r5, [r3], #4
   1c39c:	ldr	r7, [r1], #4
   1c3a0:	adds	r2, r5, r8
   1c3a4:	cmp	r7, r2
   1c3a8:	mov	r2, #0
   1c3ac:	movwcc	r2, #1
   1c3b0:	adds	r5, r5, r8
   1c3b4:	adc	r8, r2, #0
   1c3b8:	sub	r2, r7, r5
   1c3bc:	subs	r4, r4, #1
   1c3c0:	str	r2, [r6], #4
   1c3c4:	bne	1c398 <__assert_fail@plt+0xb078>
   1c3c8:	cmp	sl, r9
   1c3cc:	bgt	1c3e0 <__assert_fail@plt+0xb0c0>
   1c3d0:	b	1c47c <__assert_fail@plt+0xb15c>
   1c3d4:	mov	r8, #0
   1c3d8:	cmp	sl, r9
   1c3dc:	ble	1c47c <__assert_fail@plt+0xb15c>
   1c3e0:	sub	r1, sl, r9
   1c3e4:	add	r3, r9, #1
   1c3e8:	and	lr, r1, #1
   1c3ec:	cmp	sl, r3
   1c3f0:	bne	1c404 <__assert_fail@plt+0xb0e4>
   1c3f4:	mov	r1, #0
   1c3f8:	cmp	lr, #0
   1c3fc:	bne	1c460 <__assert_fail@plt+0xb140>
   1c400:	b	1c47c <__assert_fail@plt+0xb15c>
   1c404:	add	r1, r9, lr
   1c408:	mov	r5, #0
   1c40c:	sub	r6, r1, sl
   1c410:	add	r1, r0, r3, lsl #2
   1c414:	add	r3, ip, r3, lsl #2
   1c418:	ldr	r2, [r3, #-4]
   1c41c:	sub	r5, r5, #2
   1c420:	subs	r2, r2, r8
   1c424:	mov	r8, #0
   1c428:	str	r2, [r1, #-4]
   1c42c:	mov	r2, #0
   1c430:	movwcc	r2, #1
   1c434:	ldr	r4, [r3]
   1c438:	add	r3, r3, #8
   1c43c:	subs	r2, r4, r2
   1c440:	str	r2, [r1]
   1c444:	movwcc	r8, #1
   1c448:	add	r1, r1, #8
   1c44c:	cmp	r6, r5
   1c450:	bne	1c418 <__assert_fail@plt+0xb0f8>
   1c454:	rsb	r1, r5, #0
   1c458:	cmp	lr, #0
   1c45c:	beq	1c47c <__assert_fail@plt+0xb15c>
   1c460:	add	r2, ip, r9, lsl #2
   1c464:	add	r3, r0, r9, lsl #2
   1c468:	ldr	r2, [r2, r1, lsl #2]
   1c46c:	subs	r2, r2, r8
   1c470:	mov	r8, #0
   1c474:	movwcc	r8, #1
   1c478:	str	r2, [r3, r1, lsl #2]
   1c47c:	cmp	r8, #0
   1c480:	bne	1c640 <__assert_fail@plt+0xb320>
   1c484:	sub	r0, r0, #4
   1c488:	mov	r1, sl
   1c48c:	cmp	sl, #1
   1c490:	blt	1c4a4 <__assert_fail@plt+0xb184>
   1c494:	ldr	r2, [r0, r1, lsl #2]
   1c498:	sub	sl, r1, #1
   1c49c:	cmp	r2, #0
   1c4a0:	beq	1c488 <__assert_fail@plt+0xb168>
   1c4a4:	rsb	r0, r1, #0
   1c4a8:	sub	sp, fp, #28
   1c4ac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c4b0:	movw	r0, #12572	; 0x311c
   1c4b4:	movt	r0, #4
   1c4b8:	ldr	r1, [r0]
   1c4bc:	lsl	r0, r4, #2
   1c4c0:	blx	r1
   1c4c4:	str	r0, [r6, #8]
   1c4c8:	str	r4, [r6]
   1c4cc:	ldr	r1, [r6, #4]
   1c4d0:	cmp	r1, #0
   1c4d4:	rsbmi	r1, r1, #0
   1c4d8:	cmp	r1, r4
   1c4dc:	movgt	r1, #0
   1c4e0:	strgt	r1, [r6, #4]
   1c4e4:	cmp	r9, sl
   1c4e8:	blt	1c620 <__assert_fail@plt+0xb300>
   1c4ec:	ldr	lr, [r5, #8]
   1c4f0:	cmp	sl, #1
   1c4f4:	blt	1c548 <__assert_fail@plt+0xb228>
   1c4f8:	ldr	r3, [r8, #8]
   1c4fc:	mov	r8, #0
   1c500:	mov	r1, lr
   1c504:	mov	r6, r0
   1c508:	mov	r7, sl
   1c50c:	ldr	r4, [r3], #4
   1c510:	ldr	r5, [r1], #4
   1c514:	adds	r2, r4, r8
   1c518:	cmp	r5, r2
   1c51c:	mov	r2, #0
   1c520:	movwcc	r2, #1
   1c524:	adds	r4, r4, r8
   1c528:	adc	r8, r2, #0
   1c52c:	sub	r2, r5, r4
   1c530:	subs	r7, r7, #1
   1c534:	str	r2, [r6], #4
   1c538:	bne	1c50c <__assert_fail@plt+0xb1ec>
   1c53c:	cmp	r9, sl
   1c540:	bgt	1c554 <__assert_fail@plt+0xb234>
   1c544:	b	1c5f0 <__assert_fail@plt+0xb2d0>
   1c548:	mov	r8, #0
   1c54c:	cmp	r9, sl
   1c550:	ble	1c5f0 <__assert_fail@plt+0xb2d0>
   1c554:	sub	r1, r9, sl
   1c558:	add	r3, sl, #1
   1c55c:	and	ip, r1, #1
   1c560:	cmp	r9, r3
   1c564:	bne	1c578 <__assert_fail@plt+0xb258>
   1c568:	mov	r1, #0
   1c56c:	cmp	ip, #0
   1c570:	bne	1c5d4 <__assert_fail@plt+0xb2b4>
   1c574:	b	1c5f0 <__assert_fail@plt+0xb2d0>
   1c578:	add	r1, sl, ip
   1c57c:	add	r5, lr, r3, lsl #2
   1c580:	sub	r6, r1, r9
   1c584:	add	r1, r0, r3, lsl #2
   1c588:	mov	r3, #0
   1c58c:	ldr	r2, [r5, #-4]
   1c590:	sub	r3, r3, #2
   1c594:	subs	r2, r2, r8
   1c598:	mov	r8, #0
   1c59c:	str	r2, [r1, #-4]
   1c5a0:	mov	r2, #0
   1c5a4:	movwcc	r2, #1
   1c5a8:	ldr	r4, [r5]
   1c5ac:	add	r5, r5, #8
   1c5b0:	subs	r2, r4, r2
   1c5b4:	str	r2, [r1]
   1c5b8:	movwcc	r8, #1
   1c5bc:	add	r1, r1, #8
   1c5c0:	cmp	r6, r3
   1c5c4:	bne	1c58c <__assert_fail@plt+0xb26c>
   1c5c8:	rsb	r1, r3, #0
   1c5cc:	cmp	ip, #0
   1c5d0:	beq	1c5f0 <__assert_fail@plt+0xb2d0>
   1c5d4:	add	r2, lr, sl, lsl #2
   1c5d8:	add	r3, r0, sl, lsl #2
   1c5dc:	ldr	r2, [r2, r1, lsl #2]
   1c5e0:	subs	r2, r2, r8
   1c5e4:	mov	r8, #0
   1c5e8:	movwcc	r8, #1
   1c5ec:	str	r2, [r3, r1, lsl #2]
   1c5f0:	cmp	r8, #0
   1c5f4:	bne	1c654 <__assert_fail@plt+0xb334>
   1c5f8:	sub	r1, r0, #4
   1c5fc:	mov	r0, r9
   1c600:	cmp	r9, #1
   1c604:	blt	1c618 <__assert_fail@plt+0xb2f8>
   1c608:	ldr	r2, [r1, r0, lsl #2]
   1c60c:	sub	r9, r0, #1
   1c610:	cmp	r2, #0
   1c614:	beq	1c5fc <__assert_fail@plt+0xb2dc>
   1c618:	sub	sp, fp, #28
   1c61c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c620:	movw	r0, #2074	; 0x81a
   1c624:	movw	r1, #1996	; 0x7cc
   1c628:	movw	r3, #2214	; 0x8a6
   1c62c:	mov	r2, #532	; 0x214
   1c630:	movt	r0, #3
   1c634:	movt	r1, #3
   1c638:	movt	r3, #3
   1c63c:	bl	11320 <__assert_fail@plt>
   1c640:	movw	r0, #2977	; 0xba1
   1c644:	movw	r1, #1996	; 0x7cc
   1c648:	movw	r3, #5211	; 0x145b
   1c64c:	movw	r2, #2012	; 0x7dc
   1c650:	b	1c664 <__assert_fail@plt+0xb344>
   1c654:	movw	r0, #2977	; 0xba1
   1c658:	movw	r1, #1996	; 0x7cc
   1c65c:	movw	r3, #5211	; 0x145b
   1c660:	movw	r2, #2006	; 0x7d6
   1c664:	movt	r0, #3
   1c668:	movt	r1, #3
   1c66c:	movt	r3, #3
   1c670:	bl	11320 <__assert_fail@plt>
   1c674:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c678:	add	fp, sp, #28
   1c67c:	sub	sp, sp, #12
   1c680:	mov	r5, r0
   1c684:	ldr	r0, [r1, #4]
   1c688:	ldr	r9, [r2, #4]
   1c68c:	mov	r8, r1
   1c690:	mov	r6, r2
   1c694:	eors	r1, r9, r0
   1c698:	bmi	1c6b0 <__assert_fail@plt+0xb390>
   1c69c:	mov	r0, r5
   1c6a0:	mov	r1, r8
   1c6a4:	mov	r2, r6
   1c6a8:	bl	1c21c <__assert_fail@plt+0xaefc>
   1c6ac:	b	1c874 <__assert_fail@plt+0xb554>
   1c6b0:	cmp	r9, #0
   1c6b4:	ldr	r1, [r5]
   1c6b8:	mov	r7, r8
   1c6bc:	rsbmi	r9, r9, #0
   1c6c0:	cmp	r0, #0
   1c6c4:	rsbmi	r0, r0, #0
   1c6c8:	cmp	r0, r9
   1c6cc:	mov	r2, r0
   1c6d0:	movlt	r2, r9
   1c6d4:	movlt	r7, r6
   1c6d8:	movlt	r6, r8
   1c6dc:	movlt	r9, r0
   1c6e0:	cmp	r2, r1
   1c6e4:	bge	1c6f0 <__assert_fail@plt+0xb3d0>
   1c6e8:	ldr	r4, [r5, #8]
   1c6ec:	b	1c75c <__assert_fail@plt+0xb43c>
   1c6f0:	add	sl, r2, #1
   1c6f4:	cmp	r1, #0
   1c6f8:	str	r2, [sp, #4]
   1c6fc:	beq	1c720 <__assert_fail@plt+0xb400>
   1c700:	movw	r0, #12576	; 0x3120
   1c704:	lsl	r1, r1, #2
   1c708:	lsl	r2, sl, #2
   1c70c:	movt	r0, #4
   1c710:	ldr	r3, [r0]
   1c714:	ldr	r0, [r5, #8]
   1c718:	blx	r3
   1c71c:	b	1c734 <__assert_fail@plt+0xb414>
   1c720:	movw	r0, #12572	; 0x311c
   1c724:	movt	r0, #4
   1c728:	ldr	r1, [r0]
   1c72c:	lsl	r0, sl, #2
   1c730:	blx	r1
   1c734:	str	r0, [r5, #8]
   1c738:	str	sl, [r5]
   1c73c:	mov	r4, r0
   1c740:	ldr	r1, [r5, #4]
   1c744:	ldr	r2, [sp, #4]
   1c748:	cmp	r1, #0
   1c74c:	rsbmi	r1, r1, #0
   1c750:	cmp	r1, sl
   1c754:	movgt	r1, #0
   1c758:	strgt	r1, [r5, #4]
   1c75c:	ldr	r1, [r7, #8]
   1c760:	cmp	r9, #1
   1c764:	mov	r0, r2
   1c768:	stm	sp, {r1, r4, r5}
   1c76c:	blt	1c7dc <__assert_fail@plt+0xb4bc>
   1c770:	ldr	r3, [r6, #8]
   1c774:	mov	lr, #0
   1c778:	mov	r7, r9
   1c77c:	mov	sl, #0
   1c780:	ldr	r6, [r1], #4
   1c784:	ldr	r5, [r3], #4
   1c788:	adds	ip, r6, sl
   1c78c:	adds	r5, ip, r5
   1c790:	adc	r2, lr, #0
   1c794:	adds	r6, r6, sl
   1c798:	str	r5, [r4], #4
   1c79c:	adc	sl, r2, #0
   1c7a0:	subs	r7, r7, #1
   1c7a4:	bne	1c780 <__assert_fail@plt+0xb460>
   1c7a8:	cmp	r0, r9
   1c7ac:	ble	1c7e8 <__assert_fail@plt+0xb4c8>
   1c7b0:	ldr	r5, [sp, #8]
   1c7b4:	ldr	ip, [sp, #4]
   1c7b8:	sub	r1, r0, r9
   1c7bc:	add	r3, r9, #1
   1c7c0:	and	lr, r1, #1
   1c7c4:	cmp	r0, r3
   1c7c8:	bne	1c7f4 <__assert_fail@plt+0xb4d4>
   1c7cc:	mov	r1, #0
   1c7d0:	cmp	lr, #0
   1c7d4:	bne	1c84c <__assert_fail@plt+0xb52c>
   1c7d8:	b	1c86c <__assert_fail@plt+0xb54c>
   1c7dc:	mov	sl, #0
   1c7e0:	cmp	r0, r9
   1c7e4:	bgt	1c7b0 <__assert_fail@plt+0xb490>
   1c7e8:	ldr	r5, [sp, #8]
   1c7ec:	ldr	ip, [sp, #4]
   1c7f0:	b	1c86c <__assert_fail@plt+0xb54c>
   1c7f4:	ldr	r2, [sp]
   1c7f8:	add	r1, r9, lr
   1c7fc:	add	r6, ip, r3, lsl #2
   1c800:	mov	r4, #0
   1c804:	sub	r1, r1, r0
   1c808:	add	r7, r2, r3, lsl #2
   1c80c:	mov	r3, #0
   1c810:	ldr	r2, [r7, #-4]
   1c814:	sub	r4, r4, #2
   1c818:	adds	r2, r2, sl
   1c81c:	str	r2, [r6, #-4]
   1c820:	ldr	r2, [r7]
   1c824:	add	r7, r7, #8
   1c828:	adcs	r2, r2, #0
   1c82c:	str	r2, [r6]
   1c830:	adc	sl, r3, #0
   1c834:	add	r6, r6, #8
   1c838:	cmp	r1, r4
   1c83c:	bne	1c810 <__assert_fail@plt+0xb4f0>
   1c840:	rsb	r1, r4, #0
   1c844:	cmp	lr, #0
   1c848:	beq	1c86c <__assert_fail@plt+0xb54c>
   1c84c:	ldr	r2, [sp]
   1c850:	add	r3, ip, r9, lsl #2
   1c854:	add	r2, r2, r9, lsl #2
   1c858:	ldr	r2, [r2, r1, lsl #2]
   1c85c:	adds	r2, r2, sl
   1c860:	str	r2, [r3, r1, lsl #2]
   1c864:	mov	r1, #0
   1c868:	adc	sl, r1, #0
   1c86c:	str	sl, [ip, r0, lsl #2]
   1c870:	add	r0, sl, r0
   1c874:	ldr	r1, [r8, #4]
   1c878:	cmn	r1, #1
   1c87c:	rsble	r0, r0, #0
   1c880:	str	r0, [r5, #4]
   1c884:	sub	sp, fp, #28
   1c888:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c88c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1c890:	add	fp, sp, #24
   1c894:	sub	sp, sp, #16
   1c898:	mov	r6, r2
   1c89c:	mov	r5, r1
   1c8a0:	mov	r4, r0
   1c8a4:	cmn	r2, #1
   1c8a8:	ble	1c928 <__assert_fail@plt+0xb608>
   1c8ac:	movw	r0, #1992	; 0x7c8
   1c8b0:	cmp	r6, #0
   1c8b4:	movt	r0, #3
   1c8b8:	str	r0, [sp, #12]
   1c8bc:	mov	r0, #0
   1c8c0:	str	r0, [sp, #8]
   1c8c4:	str	r0, [sp, #4]
   1c8c8:	beq	1c994 <__assert_fail@plt+0xb674>
   1c8cc:	movw	r0, #12572	; 0x311c
   1c8d0:	mov	r8, #1
   1c8d4:	movt	r0, #4
   1c8d8:	str	r8, [sp, #8]
   1c8dc:	ldr	r1, [r0]
   1c8e0:	mov	r0, #4
   1c8e4:	blx	r1
   1c8e8:	str	r0, [sp, #12]
   1c8ec:	str	r8, [sp, #4]
   1c8f0:	mov	r7, r0
   1c8f4:	str	r6, [r0]
   1c8f8:	add	r2, sp, #4
   1c8fc:	mov	r0, r4
   1c900:	mov	r1, r5
   1c904:	bl	1ca60 <__assert_fail@plt+0xb740>
   1c908:	movw	r0, #12580	; 0x3124
   1c90c:	mov	r1, #4
   1c910:	movt	r0, #4
   1c914:	ldr	r2, [r0]
   1c918:	mov	r0, r7
   1c91c:	blx	r2
   1c920:	sub	sp, fp, #24
   1c924:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1c928:	movw	r0, #12572	; 0x311c
   1c92c:	mov	r8, #1
   1c930:	movt	r0, #4
   1c934:	str	r8, [sp, #8]
   1c938:	ldr	r1, [r0]
   1c93c:	mov	r0, #4
   1c940:	blx	r1
   1c944:	str	r0, [sp, #12]
   1c948:	mov	r7, r0
   1c94c:	rsb	r0, r6, #0
   1c950:	str	r8, [sp, #4]
   1c954:	add	r2, sp, #4
   1c958:	mov	r1, r5
   1c95c:	str	r0, [r7]
   1c960:	mov	r0, r4
   1c964:	bl	1ca60 <__assert_fail@plt+0xb740>
   1c968:	movw	r0, #12580	; 0x3124
   1c96c:	mov	r1, #4
   1c970:	movt	r0, #4
   1c974:	ldr	r2, [r0]
   1c978:	mov	r0, r7
   1c97c:	blx	r2
   1c980:	ldr	r0, [r4, #4]
   1c984:	rsb	r0, r0, #0
   1c988:	str	r0, [r4, #4]
   1c98c:	sub	sp, fp, #24
   1c990:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1c994:	str	r0, [sp, #8]
   1c998:	add	r2, sp, #4
   1c99c:	mov	r0, r4
   1c9a0:	mov	r1, r5
   1c9a4:	bl	1ca60 <__assert_fail@plt+0xb740>
   1c9a8:	sub	sp, fp, #24
   1c9ac:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1c9b0:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1c9b4:	add	fp, sp, #24
   1c9b8:	sub	sp, sp, #16
   1c9bc:	mov	r5, r0
   1c9c0:	movw	r0, #1992	; 0x7c8
   1c9c4:	mov	r4, r1
   1c9c8:	cmp	r2, #0
   1c9cc:	movt	r0, #3
   1c9d0:	str	r0, [sp, #12]
   1c9d4:	mov	r0, #0
   1c9d8:	str	r0, [sp, #8]
   1c9dc:	str	r0, [sp, #4]
   1c9e0:	beq	1ca44 <__assert_fail@plt+0xb724>
   1c9e4:	movw	r0, #12572	; 0x311c
   1c9e8:	mov	r8, #1
   1c9ec:	mov	r6, r2
   1c9f0:	movt	r0, #4
   1c9f4:	str	r8, [sp, #8]
   1c9f8:	ldr	r1, [r0]
   1c9fc:	mov	r0, #4
   1ca00:	blx	r1
   1ca04:	str	r0, [sp, #12]
   1ca08:	str	r8, [sp, #4]
   1ca0c:	mov	r7, r0
   1ca10:	str	r6, [r0]
   1ca14:	add	r2, sp, #4
   1ca18:	mov	r0, r5
   1ca1c:	mov	r1, r4
   1ca20:	bl	1ca60 <__assert_fail@plt+0xb740>
   1ca24:	movw	r0, #12580	; 0x3124
   1ca28:	mov	r1, #4
   1ca2c:	movt	r0, #4
   1ca30:	ldr	r2, [r0]
   1ca34:	mov	r0, r7
   1ca38:	blx	r2
   1ca3c:	sub	sp, fp, #24
   1ca40:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1ca44:	str	r0, [sp, #8]
   1ca48:	add	r2, sp, #4
   1ca4c:	mov	r0, r5
   1ca50:	mov	r1, r4
   1ca54:	bl	1ca60 <__assert_fail@plt+0xb740>
   1ca58:	sub	sp, fp, #24
   1ca5c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1ca60:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ca64:	add	fp, sp, #28
   1ca68:	sub	sp, sp, #12
   1ca6c:	ldr	sl, [r1, #4]
   1ca70:	mov	r4, r0
   1ca74:	cmp	sl, #0
   1ca78:	ldrne	r5, [r2, #4]
   1ca7c:	cmpne	r5, #0
   1ca80:	bne	1ca94 <__assert_fail@plt+0xb774>
   1ca84:	mov	r0, #0
   1ca88:	str	r0, [r4, #4]
   1ca8c:	sub	sp, fp, #28
   1ca90:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ca94:	cmp	sl, #0
   1ca98:	mov	r8, sl
   1ca9c:	mov	r9, r5
   1caa0:	str	r2, [sp, #8]
   1caa4:	mov	r2, #0
   1caa8:	mvn	r0, #0
   1caac:	mov	r6, r1
   1cab0:	rsbmi	r8, sl, #0
   1cab4:	cmp	r5, #0
   1cab8:	rsbmi	r9, r5, #0
   1cabc:	add	r7, r9, r8
   1cac0:	cmp	r2, r7, lsl #5
   1cac4:	lsl	r1, r7, #5
   1cac8:	addne	r1, r0, r7, lsl #5
   1cacc:	mov	r0, #1
   1cad0:	add	r2, r0, r1, lsr #5
   1cad4:	movw	r0, #12572	; 0x311c
   1cad8:	movt	r0, #4
   1cadc:	str	r2, [sp, #4]
   1cae0:	ldr	r1, [r0]
   1cae4:	lsl	r0, r2, #2
   1cae8:	blx	r1
   1caec:	mov	r2, r0
   1caf0:	eor	r5, r5, sl
   1caf4:	cmp	r8, r9
   1caf8:	bge	1cb1c <__assert_fail@plt+0xb7fc>
   1cafc:	ldr	r0, [sp, #8]
   1cb00:	ldr	r3, [r6, #8]
   1cb04:	mov	r6, r2
   1cb08:	ldr	r1, [r0, #8]
   1cb0c:	mov	r0, r2
   1cb10:	mov	r2, r9
   1cb14:	str	r8, [sp]
   1cb18:	b	1cb38 <__assert_fail@plt+0xb818>
   1cb1c:	ldr	r0, [sp, #8]
   1cb20:	ldr	r1, [r6, #8]
   1cb24:	mov	r6, r2
   1cb28:	ldr	r3, [r0, #8]
   1cb2c:	mov	r0, r2
   1cb30:	str	r9, [sp]
   1cb34:	mov	r2, r8
   1cb38:	bl	18fd4 <__assert_fail@plt+0x7cb4>
   1cb3c:	sub	r2, r7, #1
   1cb40:	ldr	r1, [r4]
   1cb44:	ldr	r0, [r4, #8]
   1cb48:	ldr	r3, [r6, r2, lsl #2]
   1cb4c:	cmp	r3, #0
   1cb50:	moveq	r7, r2
   1cb54:	ldr	r2, [sp, #4]
   1cb58:	cmp	r5, #0
   1cb5c:	rsbmi	r7, r7, #0
   1cb60:	cmp	r1, #0
   1cb64:	stm	r4, {r2, r7}
   1cb68:	str	r6, [r4, #8]
   1cb6c:	beq	1ca8c <__assert_fail@plt+0xb76c>
   1cb70:	movw	r2, #12580	; 0x3124
   1cb74:	lsl	r1, r1, #2
   1cb78:	movt	r2, #4
   1cb7c:	ldr	r2, [r2]
   1cb80:	sub	sp, fp, #28
   1cb84:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1cb88:	bx	r2
   1cb8c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1cb90:	add	fp, sp, #28
   1cb94:	sub	sp, sp, #28
   1cb98:	ldr	r5, [r1, #4]
   1cb9c:	mov	r7, r1
   1cba0:	mov	sl, r0
   1cba4:	cmp	r5, #0
   1cba8:	rsbmi	r5, r5, #0
   1cbac:	cmp	r5, #0
   1cbb0:	beq	1cc0c <__assert_fail@plt+0xb8ec>
   1cbb4:	lsr	lr, r2, #5
   1cbb8:	mov	r4, #1
   1cbbc:	ands	r9, r2, #31
   1cbc0:	ldr	r1, [sl]
   1cbc4:	mov	r0, lr
   1cbc8:	addne	r0, r4, r2, lsr #5
   1cbcc:	add	r8, r0, r5
   1cbd0:	cmp	r8, r1
   1cbd4:	ble	1cc14 <__assert_fail@plt+0xb8f4>
   1cbd8:	cmp	r8, #1
   1cbdc:	mov	r6, lr
   1cbe0:	movhi	r4, r8
   1cbe4:	cmp	r1, #0
   1cbe8:	beq	1cc1c <__assert_fail@plt+0xb8fc>
   1cbec:	movw	r0, #12576	; 0x3120
   1cbf0:	lsl	r1, r1, #2
   1cbf4:	lsl	r2, r4, #2
   1cbf8:	movt	r0, #4
   1cbfc:	ldr	r3, [r0]
   1cc00:	ldr	r0, [sl, #8]
   1cc04:	blx	r3
   1cc08:	b	1cc30 <__assert_fail@plt+0xb910>
   1cc0c:	mov	r8, #0
   1cc10:	b	1ce5c <__assert_fail@plt+0xbb3c>
   1cc14:	ldr	r0, [sl, #8]
   1cc18:	b	1cc54 <__assert_fail@plt+0xb934>
   1cc1c:	movw	r0, #12572	; 0x311c
   1cc20:	movt	r0, #4
   1cc24:	ldr	r1, [r0]
   1cc28:	lsl	r0, r4, #2
   1cc2c:	blx	r1
   1cc30:	str	r0, [sl, #8]
   1cc34:	str	r4, [sl]
   1cc38:	mov	lr, r6
   1cc3c:	ldr	r1, [sl, #4]
   1cc40:	cmp	r1, #0
   1cc44:	rsbmi	r1, r1, #0
   1cc48:	cmp	r1, r4
   1cc4c:	movgt	r1, #0
   1cc50:	strgt	r1, [sl, #4]
   1cc54:	ldr	r6, [r7, #8]
   1cc58:	add	r3, r0, lr, lsl #2
   1cc5c:	cmp	r9, #0
   1cc60:	beq	1cd08 <__assert_fail@plt+0xb9e8>
   1cc64:	cmp	r5, #0
   1cc68:	ble	1ce68 <__assert_fail@plt+0xbb48>
   1cc6c:	add	r6, r6, r5, lsl #2
   1cc70:	add	r2, r3, r5, lsl #2
   1cc74:	rsb	r1, r9, #32
   1cc78:	str	r7, [sp, #24]
   1cc7c:	ldr	r4, [r6, #-4]!
   1cc80:	lsl	r3, r4, r9
   1cc84:	lsr	ip, r4, r1
   1cc88:	subs	r4, r5, #1
   1cc8c:	beq	1cce4 <__assert_fail@plt+0xb9c4>
   1cc90:	tst	r5, #1
   1cc94:	bne	1ccac <__assert_fail@plt+0xb98c>
   1cc98:	ldr	r4, [r6, #-4]!
   1cc9c:	orr	r3, r3, r4, lsr r1
   1cca0:	str	r3, [r2, #-4]!
   1cca4:	lsl	r3, r4, r9
   1cca8:	sub	r4, r5, #2
   1ccac:	cmp	r5, #2
   1ccb0:	beq	1cce4 <__assert_fail@plt+0xb9c4>
   1ccb4:	sub	r6, r6, #4
   1ccb8:	ldr	r5, [r6]
   1ccbc:	subs	r4, r4, #2
   1ccc0:	orr	r3, r3, r5, lsr r1
   1ccc4:	str	r3, [r2, #-4]
   1ccc8:	ldr	r7, [r6, #-4]
   1cccc:	sub	r6, r6, #8
   1ccd0:	lsl	r3, r7, r9
   1ccd4:	lsr	r7, r7, r1
   1ccd8:	orr	r7, r7, r5, lsl r9
   1ccdc:	str	r7, [r2, #-8]!
   1cce0:	bne	1ccb8 <__assert_fail@plt+0xb998>
   1cce4:	ldr	r7, [sp, #24]
   1cce8:	sub	r1, r8, #1
   1ccec:	cmp	ip, #0
   1ccf0:	str	r3, [r2, #-4]
   1ccf4:	str	ip, [r0, r1, lsl #2]
   1ccf8:	moveq	r8, r1
   1ccfc:	cmp	lr, #0
   1cd00:	bne	1ce44 <__assert_fail@plt+0xbb24>
   1cd04:	b	1ce50 <__assert_fail@plt+0xbb30>
   1cd08:	cmp	r5, #1
   1cd0c:	blt	1ce3c <__assert_fail@plt+0xbb1c>
   1cd10:	cmp	r5, #4
   1cd14:	bcc	1ce1c <__assert_fail@plt+0xbafc>
   1cd18:	add	r1, r6, r5, lsl #2
   1cd1c:	cmp	r3, r1
   1cd20:	addcc	r1, r5, lr
   1cd24:	addcc	r1, r0, r1, lsl #2
   1cd28:	cmpcc	r6, r1
   1cd2c:	bcc	1ce1c <__assert_fail@plt+0xbafc>
   1cd30:	bic	r4, r5, #-2147483645	; 0x80000003
   1cd34:	mov	r2, #1
   1cd38:	subs	r1, r4, #4
   1cd3c:	add	r9, r2, r1, lsr #2
   1cd40:	and	r1, r9, #1
   1cd44:	beq	1cdec <__assert_fail@plt+0xbacc>
   1cd48:	mvn	r2, #0
   1cd4c:	str	r4, [sp, #4]
   1cd50:	str	r1, [sp]
   1cd54:	rsb	r4, r1, #0
   1cd58:	sub	r1, r9, #1
   1cd5c:	str	r0, [sp, #16]
   1cd60:	str	lr, [sp, #20]
   1cd64:	str	r7, [sp, #24]
   1cd68:	str	r6, [sp, #12]
   1cd6c:	add	ip, r2, r5, lsl #2
   1cd70:	mov	r2, r3
   1cd74:	mvn	r9, r1
   1cd78:	mov	r3, #0
   1cd7c:	mov	r1, r6
   1cd80:	str	r2, [sp, #8]
   1cd84:	add	r7, r1, ip
   1cd88:	add	r0, r2, ip
   1cd8c:	sub	r4, r4, #2
   1cd90:	sub	r1, r1, #32
   1cd94:	sub	r2, r2, #32
   1cd98:	add	r3, r3, #8
   1cd9c:	sub	lr, r7, #15
   1cda0:	sub	r6, r0, #15
   1cda4:	sub	r7, r7, #31
   1cda8:	cmp	r9, r4
   1cdac:	sub	r0, r0, #31
   1cdb0:	vld1.32	{d16-d17}, [lr]
   1cdb4:	vst1.32	{d16-d17}, [r6]
   1cdb8:	vld1.32	{d16-d17}, [r7]
   1cdbc:	vst1.32	{d16-d17}, [r0]
   1cdc0:	bne	1cd84 <__assert_fail@plt+0xba64>
   1cdc4:	mvn	r2, r3
   1cdc8:	ldr	r7, [sp, #24]
   1cdcc:	ldr	lr, [sp, #20]
   1cdd0:	ldr	r0, [sp, #16]
   1cdd4:	ldr	r6, [sp, #12]
   1cdd8:	ldr	r3, [sp, #8]
   1cddc:	ldm	sp, {r1, r4}
   1cde0:	cmp	r1, #0
   1cde4:	bne	1cdf8 <__assert_fail@plt+0xbad8>
   1cde8:	b	1ce14 <__assert_fail@plt+0xbaf4>
   1cdec:	mvn	r2, #0
   1cdf0:	cmp	r1, #0
   1cdf4:	beq	1ce14 <__assert_fail@plt+0xbaf4>
   1cdf8:	add	r2, r5, r2
   1cdfc:	add	r1, r6, r2, lsl #2
   1ce00:	sub	r1, r1, #12
   1ce04:	vld1.32	{d16-d17}, [r1]
   1ce08:	add	r1, r3, r2, lsl #2
   1ce0c:	sub	r1, r1, #12
   1ce10:	vst1.32	{d16-d17}, [r1]
   1ce14:	subs	r5, r5, r4
   1ce18:	beq	1ce3c <__assert_fail@plt+0xbb1c>
   1ce1c:	add	r1, r0, lr, lsl #2
   1ce20:	sub	r2, r6, #4
   1ce24:	sub	r1, r1, #4
   1ce28:	ldr	r3, [r2, r5, lsl #2]
   1ce2c:	str	r3, [r1, r5, lsl #2]
   1ce30:	sub	r5, r5, #1
   1ce34:	cmp	r5, #0
   1ce38:	bgt	1ce28 <__assert_fail@plt+0xbb08>
   1ce3c:	cmp	lr, #0
   1ce40:	beq	1ce50 <__assert_fail@plt+0xbb30>
   1ce44:	lsl	r2, lr, #2
   1ce48:	mov	r1, #0
   1ce4c:	bl	11248 <memset@plt>
   1ce50:	ldr	r0, [r7, #4]
   1ce54:	cmp	r0, #0
   1ce58:	rsbmi	r8, r8, #0
   1ce5c:	str	r8, [sl, #4]
   1ce60:	sub	sp, fp, #28
   1ce64:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ce68:	movw	r0, #2553	; 0x9f9
   1ce6c:	movw	r1, #1996	; 0x7cc
   1ce70:	movw	r3, #2640	; 0xa50
   1ce74:	movw	r2, #659	; 0x293
   1ce78:	movt	r0, #3
   1ce7c:	movt	r1, #3
   1ce80:	movt	r3, #3
   1ce84:	bl	11320 <__assert_fail@plt>
   1ce88:	push	{r4, r5, r6, r7, fp, lr}
   1ce8c:	add	fp, sp, #16
   1ce90:	sub	sp, sp, #16
   1ce94:	mov	r4, r0
   1ce98:	movw	r0, #1992	; 0x7c8
   1ce9c:	mov	r5, r1
   1cea0:	cmp	r2, #0
   1cea4:	movt	r0, #3
   1cea8:	str	r0, [sp, #12]
   1ceac:	mov	r0, #0
   1ceb0:	str	r0, [sp, #8]
   1ceb4:	str	r0, [sp, #4]
   1ceb8:	beq	1ceec <__assert_fail@plt+0xbbcc>
   1cebc:	movw	r0, #12572	; 0x311c
   1cec0:	mov	r7, #1
   1cec4:	mov	r6, r2
   1cec8:	movt	r0, #4
   1cecc:	str	r7, [sp, #8]
   1ced0:	ldr	r1, [r0]
   1ced4:	mov	r0, #4
   1ced8:	blx	r1
   1cedc:	str	r0, [sp, #12]
   1cee0:	str	r7, [sp, #4]
   1cee4:	str	r6, [r0]
   1cee8:	b	1cef0 <__assert_fail@plt+0xbbd0>
   1ceec:	str	r0, [sp, #8]
   1cef0:	add	r6, sp, #4
   1cef4:	mov	r1, r5
   1cef8:	mov	r0, r6
   1cefc:	mov	r2, r6
   1cf00:	bl	1ca60 <__assert_fail@plt+0xb740>
   1cf04:	mov	r0, r4
   1cf08:	mov	r1, r4
   1cf0c:	mov	r2, r6
   1cf10:	bl	1bd0c <__assert_fail@plt+0xa9ec>
   1cf14:	ldr	r0, [sp, #4]
   1cf18:	cmp	r0, #0
   1cf1c:	beq	1cf38 <__assert_fail@plt+0xbc18>
   1cf20:	movw	r1, #12580	; 0x3124
   1cf24:	movt	r1, #4
   1cf28:	ldr	r2, [r1]
   1cf2c:	lsl	r1, r0, #2
   1cf30:	ldr	r0, [sp, #12]
   1cf34:	blx	r2
   1cf38:	sub	sp, fp, #16
   1cf3c:	pop	{r4, r5, r6, r7, fp, pc}
   1cf40:	push	{r4, r5, r6, r7, fp, lr}
   1cf44:	add	fp, sp, #16
   1cf48:	sub	sp, sp, #16
   1cf4c:	mov	r4, r0
   1cf50:	movw	r0, #1992	; 0x7c8
   1cf54:	mov	r5, r1
   1cf58:	cmp	r2, #0
   1cf5c:	movt	r0, #3
   1cf60:	str	r0, [sp, #12]
   1cf64:	mov	r0, #0
   1cf68:	str	r0, [sp, #8]
   1cf6c:	str	r0, [sp, #4]
   1cf70:	beq	1cfa4 <__assert_fail@plt+0xbc84>
   1cf74:	movw	r0, #12572	; 0x311c
   1cf78:	mov	r7, #1
   1cf7c:	mov	r6, r2
   1cf80:	movt	r0, #4
   1cf84:	str	r7, [sp, #8]
   1cf88:	ldr	r1, [r0]
   1cf8c:	mov	r0, #4
   1cf90:	blx	r1
   1cf94:	str	r0, [sp, #12]
   1cf98:	str	r7, [sp, #4]
   1cf9c:	str	r6, [r0]
   1cfa0:	b	1cfa8 <__assert_fail@plt+0xbc88>
   1cfa4:	str	r0, [sp, #8]
   1cfa8:	add	r6, sp, #4
   1cfac:	mov	r1, r5
   1cfb0:	mov	r0, r6
   1cfb4:	mov	r2, r6
   1cfb8:	bl	1ca60 <__assert_fail@plt+0xb740>
   1cfbc:	mov	r0, r4
   1cfc0:	mov	r1, r4
   1cfc4:	mov	r2, r6
   1cfc8:	bl	1c674 <__assert_fail@plt+0xb354>
   1cfcc:	ldr	r0, [sp, #4]
   1cfd0:	cmp	r0, #0
   1cfd4:	beq	1cff0 <__assert_fail@plt+0xbcd0>
   1cfd8:	movw	r1, #12580	; 0x3124
   1cfdc:	movt	r1, #4
   1cfe0:	ldr	r2, [r1]
   1cfe4:	lsl	r1, r0, #2
   1cfe8:	ldr	r0, [sp, #12]
   1cfec:	blx	r2
   1cff0:	sub	sp, fp, #16
   1cff4:	pop	{r4, r5, r6, r7, fp, pc}
   1cff8:	push	{r4, r5, fp, lr}
   1cffc:	add	fp, sp, #8
   1d000:	sub	sp, sp, #16
   1d004:	mov	r4, r0
   1d008:	movw	r0, #1992	; 0x7c8
   1d00c:	add	r5, sp, #4
   1d010:	movt	r0, #3
   1d014:	str	r0, [sp, #12]
   1d018:	mov	r0, #0
   1d01c:	str	r0, [sp, #8]
   1d020:	str	r0, [sp, #4]
   1d024:	mov	r0, r5
   1d028:	bl	1ca60 <__assert_fail@plt+0xb740>
   1d02c:	mov	r0, r4
   1d030:	mov	r1, r4
   1d034:	mov	r2, r5
   1d038:	bl	1bd0c <__assert_fail@plt+0xa9ec>
   1d03c:	ldr	r0, [sp, #4]
   1d040:	cmp	r0, #0
   1d044:	beq	1d060 <__assert_fail@plt+0xbd40>
   1d048:	movw	r1, #12580	; 0x3124
   1d04c:	movt	r1, #4
   1d050:	ldr	r2, [r1]
   1d054:	lsl	r1, r0, #2
   1d058:	ldr	r0, [sp, #12]
   1d05c:	blx	r2
   1d060:	sub	sp, fp, #8
   1d064:	pop	{r4, r5, fp, pc}
   1d068:	push	{r4, r5, fp, lr}
   1d06c:	add	fp, sp, #8
   1d070:	sub	sp, sp, #16
   1d074:	mov	r4, r0
   1d078:	movw	r0, #1992	; 0x7c8
   1d07c:	add	r5, sp, #4
   1d080:	movt	r0, #3
   1d084:	str	r0, [sp, #12]
   1d088:	mov	r0, #0
   1d08c:	str	r0, [sp, #8]
   1d090:	str	r0, [sp, #4]
   1d094:	mov	r0, r5
   1d098:	bl	1ca60 <__assert_fail@plt+0xb740>
   1d09c:	mov	r0, r4
   1d0a0:	mov	r1, r4
   1d0a4:	mov	r2, r5
   1d0a8:	bl	1c674 <__assert_fail@plt+0xb354>
   1d0ac:	ldr	r0, [sp, #4]
   1d0b0:	cmp	r0, #0
   1d0b4:	beq	1d0d0 <__assert_fail@plt+0xbdb0>
   1d0b8:	movw	r1, #12580	; 0x3124
   1d0bc:	movt	r1, #4
   1d0c0:	ldr	r2, [r1]
   1d0c4:	lsl	r1, r0, #2
   1d0c8:	ldr	r0, [sp, #12]
   1d0cc:	blx	r2
   1d0d0:	sub	sp, fp, #8
   1d0d4:	pop	{r4, r5, fp, pc}
   1d0d8:	push	{fp, lr}
   1d0dc:	mov	fp, sp
   1d0e0:	sub	sp, sp, #8
   1d0e4:	mov	ip, #1
   1d0e8:	str	ip, [sp]
   1d0ec:	bl	1d0f8 <__assert_fail@plt+0xbdd8>
   1d0f0:	mov	sp, fp
   1d0f4:	pop	{fp, pc}
   1d0f8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d0fc:	add	fp, sp, #28
   1d100:	sub	sp, sp, #92	; 0x5c
   1d104:	mov	r8, r0
   1d108:	ldr	r0, [r3, #4]
   1d10c:	cmp	r0, #0
   1d110:	beq	1dad4 <__assert_fail@plt+0xc7b4>
   1d114:	ldr	r4, [r2, #4]
   1d118:	mov	sl, r1
   1d11c:	cmp	r4, #0
   1d120:	beq	1d184 <__assert_fail@plt+0xbe64>
   1d124:	mov	r5, r3
   1d128:	cmp	r0, #0
   1d12c:	ldr	r3, [fp, #8]
   1d130:	mov	r9, r0
   1d134:	mov	ip, r4
   1d138:	eor	r1, r0, r4
   1d13c:	rsbmi	r9, r0, #0
   1d140:	cmp	r4, #0
   1d144:	rsbmi	ip, r4, #0
   1d148:	cmp	ip, r9
   1d14c:	bge	1d1a0 <__assert_fail@plt+0xbe80>
   1d150:	cmp	r3, #1
   1d154:	bne	1d3ac <__assert_fail@plt+0xc08c>
   1d158:	cmp	r1, #0
   1d15c:	bmi	1d3ac <__assert_fail@plt+0xc08c>
   1d160:	cmp	sl, #0
   1d164:	movne	r1, r2
   1d168:	movne	r0, sl
   1d16c:	movne	r2, r5
   1d170:	blne	1c674 <__assert_fail@plt+0xb354>
   1d174:	cmp	r8, #0
   1d178:	beq	1d3f4 <__assert_fail@plt+0xc0d4>
   1d17c:	mov	r0, #1
   1d180:	b	1d3dc <__assert_fail@plt+0xc0bc>
   1d184:	cmp	r8, #0
   1d188:	mov	r4, #0
   1d18c:	movne	r0, #0
   1d190:	strne	r0, [r8, #4]
   1d194:	cmp	sl, #0
   1d198:	strne	r4, [sl, #4]
   1d19c:	b	1dac8 <__assert_fail@plt+0xc7a8>
   1d1a0:	movw	r0, #1992	; 0x7c8
   1d1a4:	mov	r6, #0
   1d1a8:	str	r4, [sp, #32]
   1d1ac:	str	r8, [sp, #44]	; 0x2c
   1d1b0:	str	sl, [sp, #40]	; 0x28
   1d1b4:	str	r5, [sp, #28]
   1d1b8:	str	r1, [sp, #36]	; 0x24
   1d1bc:	movt	r0, #3
   1d1c0:	str	r0, [sp, #60]	; 0x3c
   1d1c4:	str	r0, [sp, #48]	; 0x30
   1d1c8:	add	r0, sp, #52	; 0x34
   1d1cc:	str	r6, [sp, #56]	; 0x38
   1d1d0:	str	r6, [sp, #52]	; 0x34
   1d1d4:	cmp	r0, r2
   1d1d8:	beq	1d464 <__assert_fail@plt+0xc144>
   1d1dc:	cmp	ip, #1
   1d1e0:	blt	1d450 <__assert_fail@plt+0xc130>
   1d1e4:	movw	r0, #12572	; 0x311c
   1d1e8:	str	r2, [sp, #24]
   1d1ec:	mov	r4, ip
   1d1f0:	movt	r0, #4
   1d1f4:	ldr	r1, [r0]
   1d1f8:	lsl	r0, ip, #2
   1d1fc:	blx	r1
   1d200:	str	r0, [sp, #60]	; 0x3c
   1d204:	str	r4, [sp, #52]	; 0x34
   1d208:	mov	ip, r4
   1d20c:	ldr	r4, [sp, #24]
   1d210:	ldr	r1, [sp, #56]	; 0x38
   1d214:	cmp	r1, #0
   1d218:	rsbmi	r1, r1, #0
   1d21c:	cmp	r1, ip
   1d220:	movgt	r1, #0
   1d224:	strgt	r1, [sp, #56]	; 0x38
   1d228:	mov	r1, #0
   1d22c:	cmp	ip, #4
   1d230:	ldr	lr, [r4, #8]
   1d234:	bcc	1d328 <__assert_fail@plt+0xc008>
   1d238:	add	r2, lr, ip, lsl #2
   1d23c:	cmp	r0, r2
   1d240:	bcs	1d250 <__assert_fail@plt+0xbf30>
   1d244:	add	r2, r0, ip, lsl #2
   1d248:	cmp	r2, lr
   1d24c:	bhi	1d328 <__assert_fail@plt+0xc008>
   1d250:	bic	r1, ip, #-2147483645	; 0x80000003
   1d254:	mov	r2, #1
   1d258:	mov	r8, #0
   1d25c:	str	ip, [sp, #20]
   1d260:	sub	r7, r1, #4
   1d264:	add	r2, r2, r7, lsr #2
   1d268:	cmp	r7, #12
   1d26c:	and	r3, r2, #3
   1d270:	str	r3, [sp, #16]
   1d274:	mov	r3, r0
   1d278:	bcc	1d2e8 <__assert_fail@plt+0xbfc8>
   1d27c:	ldr	r0, [sp, #16]
   1d280:	mov	r7, #0
   1d284:	mov	r8, #0
   1d288:	sub	sl, r2, r0
   1d28c:	add	r6, lr, r7
   1d290:	mov	r5, #48	; 0x30
   1d294:	mov	r0, r3
   1d298:	add	r3, r3, r7
   1d29c:	add	r7, r7, #64	; 0x40
   1d2a0:	subs	sl, sl, #4
   1d2a4:	add	r8, r8, #16
   1d2a8:	mov	r4, r6
   1d2ac:	mov	r2, r3
   1d2b0:	add	ip, r6, #16
   1d2b4:	add	r6, r6, #32
   1d2b8:	vld1.32	{d16-d17}, [r4], r5
   1d2bc:	vst1.32	{d16-d17}, [r2], r5
   1d2c0:	add	r5, r3, #16
   1d2c4:	add	r3, r3, #32
   1d2c8:	vld1.32	{d16-d17}, [ip]
   1d2cc:	vst1.32	{d16-d17}, [r5]
   1d2d0:	vld1.32	{d16-d17}, [r6]
   1d2d4:	vst1.32	{d16-d17}, [r3]
   1d2d8:	mov	r3, r0
   1d2dc:	vld1.32	{d16-d17}, [r4]
   1d2e0:	vst1.32	{d16-d17}, [r2]
   1d2e4:	bne	1d28c <__assert_fail@plt+0xbf6c>
   1d2e8:	ldr	r7, [sp, #16]
   1d2ec:	mov	r0, r3
   1d2f0:	cmp	r7, #0
   1d2f4:	beq	1d314 <__assert_fail@plt+0xbff4>
   1d2f8:	add	r2, lr, r8, lsl #2
   1d2fc:	add	r3, r0, r8, lsl #2
   1d300:	rsb	r7, r7, #0
   1d304:	vld1.32	{d16-d17}, [r2]!
   1d308:	adds	r7, r7, #1
   1d30c:	vst1.32	{d16-d17}, [r3]!
   1d310:	bcc	1d304 <__assert_fail@plt+0xbfe4>
   1d314:	ldr	ip, [sp, #20]
   1d318:	ldr	r8, [sp, #44]	; 0x2c
   1d31c:	ldr	r4, [sp, #24]
   1d320:	cmp	ip, r1
   1d324:	beq	1d398 <__assert_fail@plt+0xc078>
   1d328:	mvn	r2, r1
   1d32c:	ands	r3, ip, #3
   1d330:	add	r2, ip, r2
   1d334:	beq	1d34c <__assert_fail@plt+0xc02c>
   1d338:	ldr	r7, [lr, r1, lsl #2]
   1d33c:	subs	r3, r3, #1
   1d340:	str	r7, [r0, r1, lsl #2]
   1d344:	add	r1, r1, #1
   1d348:	bne	1d338 <__assert_fail@plt+0xc018>
   1d34c:	cmp	r2, #3
   1d350:	bcc	1d398 <__assert_fail@plt+0xc078>
   1d354:	sub	r2, ip, r1
   1d358:	lsl	r1, r1, #2
   1d35c:	mov	r3, r0
   1d360:	add	r7, lr, #16
   1d364:	ldr	r6, [lr, r1]!
   1d368:	add	r5, r3, #16
   1d36c:	subs	r2, r2, #4
   1d370:	str	r6, [r3, r1]!
   1d374:	ldr	r6, [lr, #4]
   1d378:	str	r6, [r3, #4]
   1d37c:	ldr	r6, [lr, #8]
   1d380:	str	r6, [r3, #8]
   1d384:	ldr	r6, [lr, #12]
   1d388:	mov	lr, r7
   1d38c:	str	r6, [r3, #12]
   1d390:	mov	r3, r5
   1d394:	bne	1d360 <__assert_fail@plt+0xc040>
   1d398:	str	r0, [sp, #48]	; 0x30
   1d39c:	ldr	r0, [r4, #4]
   1d3a0:	ldr	r5, [sp, #28]
   1d3a4:	mov	r6, #0
   1d3a8:	b	1d460 <__assert_fail@plt+0xc140>
   1d3ac:	cmp	r3, #0
   1d3b0:	bne	1d3fc <__assert_fail@plt+0xc0dc>
   1d3b4:	cmn	r1, #1
   1d3b8:	bgt	1d3fc <__assert_fail@plt+0xc0dc>
   1d3bc:	cmp	sl, #0
   1d3c0:	movne	r1, r2
   1d3c4:	movne	r0, sl
   1d3c8:	movne	r2, r5
   1d3cc:	blne	1bd0c <__assert_fail@plt+0xa9ec>
   1d3d0:	cmp	r8, #0
   1d3d4:	beq	1d3f4 <__assert_fail@plt+0xc0d4>
   1d3d8:	mvn	r0, #0
   1d3dc:	str	r0, [r8, #4]
   1d3e0:	ldr	r1, [r8]
   1d3e4:	cmp	r1, #0
   1d3e8:	ble	1d598 <__assert_fail@plt+0xc278>
   1d3ec:	ldr	r0, [r8, #8]
   1d3f0:	b	1d8fc <__assert_fail@plt+0xc5dc>
   1d3f4:	mov	r4, #1
   1d3f8:	b	1dac8 <__assert_fail@plt+0xc7a8>
   1d3fc:	cmp	sl, r2
   1d400:	cmpne	sl, #0
   1d404:	beq	1dab8 <__assert_fail@plt+0xc798>
   1d408:	ldr	r1, [sl]
   1d40c:	cmp	ip, r1
   1d410:	ble	1d908 <__assert_fail@plt+0xc5e8>
   1d414:	cmp	ip, #1
   1d418:	mov	r4, ip
   1d41c:	mov	r6, r2
   1d420:	mov	r5, ip
   1d424:	movle	r4, #1
   1d428:	cmp	r1, #0
   1d42c:	beq	1d918 <__assert_fail@plt+0xc5f8>
   1d430:	movw	r0, #12576	; 0x3120
   1d434:	lsl	r1, r1, #2
   1d438:	lsl	r2, r4, #2
   1d43c:	movt	r0, #4
   1d440:	ldr	r3, [r0]
   1d444:	ldr	r0, [sl, #8]
   1d448:	blx	r3
   1d44c:	b	1d92c <__assert_fail@plt+0xc60c>
   1d450:	movw	r0, #1992	; 0x7c8
   1d454:	movt	r0, #3
   1d458:	str	r0, [sp, #48]	; 0x30
   1d45c:	mov	r0, r4
   1d460:	str	r0, [sp, #56]	; 0x38
   1d464:	sub	r1, ip, r9
   1d468:	mov	r4, ip
   1d46c:	cmp	r8, #0
   1d470:	add	sl, r1, #1
   1d474:	mov	r0, r1
   1d478:	str	r1, [sp, #24]
   1d47c:	beq	1d4c0 <__assert_fail@plt+0xc1a0>
   1d480:	mov	r0, #0
   1d484:	mvn	r1, #0
   1d488:	lsl	r2, sl, #5
   1d48c:	cmp	r0, sl, lsl #5
   1d490:	str	r0, [fp, #-52]	; 0xffffffcc
   1d494:	mov	r0, #1
   1d498:	addne	r2, r1, sl, lsl #5
   1d49c:	movw	r1, #12572	; 0x311c
   1d4a0:	movt	r1, #4
   1d4a4:	add	r0, r0, r2, lsr #5
   1d4a8:	ldr	r1, [r1]
   1d4ac:	str	r0, [fp, #-56]	; 0xffffffc8
   1d4b0:	lsl	r0, r0, #2
   1d4b4:	blx	r1
   1d4b8:	mov	r6, r0
   1d4bc:	str	r0, [fp, #-48]	; 0xffffffd0
   1d4c0:	cmp	r9, #0
   1d4c4:	ble	1dae0 <__assert_fail@plt+0xc7c0>
   1d4c8:	ldr	r7, [r5, #8]
   1d4cc:	sub	r5, fp, #44	; 0x2c
   1d4d0:	mov	r2, r9
   1d4d4:	mov	r0, r5
   1d4d8:	mov	r1, r7
   1d4dc:	bl	21fe0 <__assert_fail@plt+0x10cc0>
   1d4e0:	cmp	r9, #3
   1d4e4:	blt	1d564 <__assert_fail@plt+0xc244>
   1d4e8:	ldr	r8, [fp, #-44]	; 0xffffffd4
   1d4ec:	cmp	r8, #0
   1d4f0:	beq	1d564 <__assert_fail@plt+0xc244>
   1d4f4:	movw	r0, #12572	; 0x311c
   1d4f8:	movt	r0, #4
   1d4fc:	ldr	r1, [r0]
   1d500:	lsl	r0, r9, #2
   1d504:	str	r0, [sp, #12]
   1d508:	blx	r1
   1d50c:	cmp	r8, #32
   1d510:	bcs	1daf8 <__assert_fail@plt+0xc7d8>
   1d514:	str	r0, [sp, #16]
   1d518:	add	r1, r0, r9, lsl #2
   1d51c:	add	r0, r7, r9, lsl #2
   1d520:	rsb	r2, r8, #32
   1d524:	tst	r9, #1
   1d528:	str	r6, [sp, #20]
   1d52c:	ldr	ip, [r0, #-4]!
   1d530:	lsl	r3, ip, r8
   1d534:	bne	1d5bc <__assert_fail@plt+0xc29c>
   1d538:	mov	r5, r4
   1d53c:	ldr	r4, [r0, #-4]!
   1d540:	mov	lr, r1
   1d544:	sub	r7, r9, #2
   1d548:	orr	r3, r3, r4, lsr r2
   1d54c:	str	r3, [lr, #-4]!
   1d550:	lsl	r3, r4, r8
   1d554:	mov	r4, r5
   1d558:	cmp	r9, #2
   1d55c:	bne	1d5cc <__assert_fail@plt+0xc2ac>
   1d560:	b	1d600 <__assert_fail@plt+0xc2e0>
   1d564:	ldr	r1, [sp, #48]	; 0x30
   1d568:	mov	r0, r6
   1d56c:	mov	r2, r4
   1d570:	mov	r3, r7
   1d574:	str	r9, [sp]
   1d578:	str	r5, [sp, #4]
   1d57c:	bl	22258 <__assert_fail@plt+0x10f38>
   1d580:	cmp	r6, #0
   1d584:	bne	1d660 <__assert_fail@plt+0xc340>
   1d588:	add	r7, sp, #36	; 0x24
   1d58c:	mov	ip, #0
   1d590:	ldm	r7, {r3, r6, r7}
   1d594:	b	1d68c <__assert_fail@plt+0xc36c>
   1d598:	beq	1d8c4 <__assert_fail@plt+0xc5a4>
   1d59c:	movw	r0, #12576	; 0x3120
   1d5a0:	lsl	r1, r1, #2
   1d5a4:	mov	r2, #4
   1d5a8:	movt	r0, #4
   1d5ac:	ldr	r3, [r0]
   1d5b0:	ldr	r0, [r8, #8]
   1d5b4:	blx	r3
   1d5b8:	b	1d8d8 <__assert_fail@plt+0xc5b8>
   1d5bc:	sub	r7, r9, #1
   1d5c0:	mov	lr, r1
   1d5c4:	cmp	r9, #2
   1d5c8:	beq	1d600 <__assert_fail@plt+0xc2e0>
   1d5cc:	sub	r0, r0, #4
   1d5d0:	add	r1, lr, #4
   1d5d4:	ldr	r6, [r0]
   1d5d8:	subs	r7, r7, #2
   1d5dc:	orr	r3, r3, r6, lsr r2
   1d5e0:	str	r3, [r1, #-8]!
   1d5e4:	ldr	r3, [r0, #-4]
   1d5e8:	sub	r0, r0, #8
   1d5ec:	lsr	r5, r3, r2
   1d5f0:	lsl	r3, r3, r8
   1d5f4:	orr	r6, r5, r6, lsl r8
   1d5f8:	str	r6, [r1, #-4]
   1d5fc:	bne	1d5d4 <__assert_fail@plt+0xc2b4>
   1d600:	mov	r0, #0
   1d604:	str	r3, [r1, #-8]
   1d608:	cmp	r0, ip, lsr r2
   1d60c:	bne	1db18 <__assert_fail@plt+0xc7f8>
   1d610:	mov	r2, r4
   1d614:	ldr	r4, [sp, #16]
   1d618:	ldr	r6, [sp, #20]
   1d61c:	ldr	r1, [sp, #48]	; 0x30
   1d620:	sub	r0, fp, #44	; 0x2c
   1d624:	str	r9, [sp]
   1d628:	str	r0, [sp, #4]
   1d62c:	mov	r0, r6
   1d630:	mov	r3, r4
   1d634:	bl	22258 <__assert_fail@plt+0x10f38>
   1d638:	cmp	r4, #0
   1d63c:	beq	1d658 <__assert_fail@plt+0xc338>
   1d640:	movw	r0, #12580	; 0x3124
   1d644:	ldr	r1, [sp, #12]
   1d648:	movt	r0, #4
   1d64c:	ldr	r2, [r0]
   1d650:	mov	r0, r4
   1d654:	blx	r2
   1d658:	cmp	r6, #0
   1d65c:	beq	1d588 <__assert_fail@plt+0xc268>
   1d660:	ldr	r0, [sp, #24]
   1d664:	ldr	r3, [sp, #36]	; 0x24
   1d668:	ldr	r7, [sp, #44]	; 0x2c
   1d66c:	ldr	r0, [r6, r0, lsl #2]
   1d670:	ldr	r6, [sp, #40]	; 0x28
   1d674:	cmp	r0, #0
   1d678:	subeq	sl, sl, #1
   1d67c:	cmp	r3, #0
   1d680:	rsbmi	sl, sl, #0
   1d684:	rsb	ip, sl, #0
   1d688:	str	sl, [fp, #-52]	; 0xffffffcc
   1d68c:	ldr	r1, [sp, #48]	; 0x30
   1d690:	ldr	r5, [fp, #8]
   1d694:	ldr	r0, [sp, #32]
   1d698:	sub	r1, r1, #4
   1d69c:	mov	r4, r9
   1d6a0:	cmp	r9, #1
   1d6a4:	blt	1d6b8 <__assert_fail@plt+0xc398>
   1d6a8:	ldr	r2, [r1, r4, lsl #2]
   1d6ac:	sub	r9, r4, #1
   1d6b0:	cmp	r2, #0
   1d6b4:	beq	1d69c <__assert_fail@plt+0xc37c>
   1d6b8:	cmp	r0, #0
   1d6bc:	mov	r1, r4
   1d6c0:	rsbmi	r1, r1, #0
   1d6c4:	cmp	r5, #0
   1d6c8:	str	r1, [sp, #56]	; 0x38
   1d6cc:	bne	1d770 <__assert_fail@plt+0xc450>
   1d6d0:	cmn	r3, #1
   1d6d4:	bgt	1d770 <__assert_fail@plt+0xc450>
   1d6d8:	cmp	r4, #0
   1d6dc:	beq	1d770 <__assert_fail@plt+0xc450>
   1d6e0:	cmp	r7, #0
   1d6e4:	beq	1d74c <__assert_fail@plt+0xc42c>
   1d6e8:	movw	r0, #12572	; 0x311c
   1d6ec:	mov	r8, #1
   1d6f0:	str	ip, [fp, #-52]	; 0xffffffcc
   1d6f4:	movt	r0, #4
   1d6f8:	str	r8, [fp, #-40]	; 0xffffffd8
   1d6fc:	ldr	r1, [r0]
   1d700:	mov	r0, #4
   1d704:	blx	r1
   1d708:	str	r0, [fp, #-36]	; 0xffffffdc
   1d70c:	str	r8, [fp, #-44]	; 0xffffffd4
   1d710:	mov	r5, r0
   1d714:	str	r8, [r0]
   1d718:	sub	r0, fp, #56	; 0x38
   1d71c:	sub	r2, fp, #44	; 0x2c
   1d720:	mov	r1, r0
   1d724:	bl	1bd0c <__assert_fail@plt+0xa9ec>
   1d728:	movw	r0, #12580	; 0x3124
   1d72c:	mov	r1, #4
   1d730:	movt	r0, #4
   1d734:	ldr	r2, [r0]
   1d738:	mov	r0, r5
   1d73c:	blx	r2
   1d740:	ldr	r0, [fp, #-52]	; 0xffffffcc
   1d744:	rsb	r0, r0, #0
   1d748:	str	r0, [fp, #-52]	; 0xffffffcc
   1d74c:	cmp	r6, #0
   1d750:	beq	1d7fc <__assert_fail@plt+0xc4dc>
   1d754:	ldr	r2, [sp, #28]
   1d758:	add	r0, sp, #52	; 0x34
   1d75c:	mov	r1, r0
   1d760:	bl	1bd0c <__assert_fail@plt+0xa9ec>
   1d764:	cmp	r7, #0
   1d768:	bne	1d804 <__assert_fail@plt+0xc4e4>
   1d76c:	b	1d850 <__assert_fail@plt+0xc530>
   1d770:	cmp	r5, #1
   1d774:	bne	1d7fc <__assert_fail@plt+0xc4dc>
   1d778:	cmp	r3, #0
   1d77c:	bmi	1d7fc <__assert_fail@plt+0xc4dc>
   1d780:	cmp	r4, #0
   1d784:	beq	1d7fc <__assert_fail@plt+0xc4dc>
   1d788:	cmp	r7, #0
   1d78c:	beq	1d7e4 <__assert_fail@plt+0xc4c4>
   1d790:	movw	r0, #12572	; 0x311c
   1d794:	mov	r8, #1
   1d798:	movt	r0, #4
   1d79c:	str	r8, [fp, #-40]	; 0xffffffd8
   1d7a0:	ldr	r1, [r0]
   1d7a4:	mov	r0, #4
   1d7a8:	blx	r1
   1d7ac:	str	r0, [fp, #-36]	; 0xffffffdc
   1d7b0:	str	r8, [fp, #-44]	; 0xffffffd4
   1d7b4:	mov	r5, r0
   1d7b8:	str	r8, [r0]
   1d7bc:	sub	r0, fp, #56	; 0x38
   1d7c0:	sub	r2, fp, #44	; 0x2c
   1d7c4:	mov	r1, r0
   1d7c8:	bl	1bd0c <__assert_fail@plt+0xa9ec>
   1d7cc:	movw	r0, #12580	; 0x3124
   1d7d0:	mov	r1, #4
   1d7d4:	movt	r0, #4
   1d7d8:	ldr	r2, [r0]
   1d7dc:	mov	r0, r5
   1d7e0:	blx	r2
   1d7e4:	cmp	r6, #0
   1d7e8:	beq	1d7fc <__assert_fail@plt+0xc4dc>
   1d7ec:	ldr	r2, [sp, #28]
   1d7f0:	add	r0, sp, #52	; 0x34
   1d7f4:	mov	r1, r0
   1d7f8:	bl	1c674 <__assert_fail@plt+0xb354>
   1d7fc:	cmp	r7, #0
   1d800:	beq	1d850 <__assert_fail@plt+0xc530>
   1d804:	ldr	r0, [r7, #4]
   1d808:	ldr	r1, [fp, #-52]	; 0xffffffcc
   1d80c:	str	r0, [fp, #-52]	; 0xffffffcc
   1d810:	str	r1, [r7, #4]
   1d814:	ldr	r1, [r7]
   1d818:	ldr	r0, [fp, #-56]	; 0xffffffc8
   1d81c:	str	r1, [fp, #-56]	; 0xffffffc8
   1d820:	str	r0, [r7]
   1d824:	cmp	r1, #0
   1d828:	ldr	r0, [r7, #8]
   1d82c:	ldr	r2, [fp, #-48]	; 0xffffffd0
   1d830:	str	r0, [fp, #-48]	; 0xffffffd0
   1d834:	str	r2, [r7, #8]
   1d838:	beq	1d850 <__assert_fail@plt+0xc530>
   1d83c:	movw	r2, #12580	; 0x3124
   1d840:	lsl	r1, r1, #2
   1d844:	movt	r2, #4
   1d848:	ldr	r2, [r2]
   1d84c:	blx	r2
   1d850:	cmp	r6, #0
   1d854:	beq	1d8b4 <__assert_fail@plt+0xc594>
   1d858:	ldr	r0, [r6, #4]
   1d85c:	ldr	r1, [sp, #56]	; 0x38
   1d860:	str	r0, [sp, #56]	; 0x38
   1d864:	str	r1, [r6, #4]
   1d868:	ldr	r0, [r6]
   1d86c:	ldr	r1, [sp, #52]	; 0x34
   1d870:	str	r0, [sp, #52]	; 0x34
   1d874:	str	r1, [r6]
   1d878:	ldr	r1, [r6, #8]
   1d87c:	ldr	r2, [sp, #60]	; 0x3c
   1d880:	str	r1, [sp, #60]	; 0x3c
   1d884:	str	r2, [r6, #8]
   1d888:	cmp	r0, #0
   1d88c:	beq	1d8a8 <__assert_fail@plt+0xc588>
   1d890:	movw	r1, #12580	; 0x3124
   1d894:	movt	r1, #4
   1d898:	ldr	r2, [r1]
   1d89c:	lsl	r1, r0, #2
   1d8a0:	ldr	r0, [sp, #60]	; 0x3c
   1d8a4:	blx	r2
   1d8a8:	cmp	r4, #0
   1d8ac:	movwne	r4, #1
   1d8b0:	b	1dac8 <__assert_fail@plt+0xc7a8>
   1d8b4:	ldr	r0, [sp, #52]	; 0x34
   1d8b8:	cmp	r0, #0
   1d8bc:	bne	1d890 <__assert_fail@plt+0xc570>
   1d8c0:	b	1d8a8 <__assert_fail@plt+0xc588>
   1d8c4:	movw	r0, #12572	; 0x311c
   1d8c8:	movt	r0, #4
   1d8cc:	ldr	r1, [r0]
   1d8d0:	mov	r0, #4
   1d8d4:	blx	r1
   1d8d8:	mov	r1, #1
   1d8dc:	str	r0, [r8, #8]
   1d8e0:	str	r1, [r8]
   1d8e4:	ldr	r1, [r8, #4]
   1d8e8:	cmp	r1, #0
   1d8ec:	rsbmi	r1, r1, #0
   1d8f0:	cmp	r1, #2
   1d8f4:	movge	r1, #0
   1d8f8:	strge	r1, [r8, #4]
   1d8fc:	mov	r4, #1
   1d900:	str	r4, [r0]
   1d904:	b	1dac8 <__assert_fail@plt+0xc7a8>
   1d908:	ldr	r0, [sl, #8]
   1d90c:	cmp	ip, #1
   1d910:	bge	1d954 <__assert_fail@plt+0xc634>
   1d914:	b	1dab0 <__assert_fail@plt+0xc790>
   1d918:	movw	r0, #12572	; 0x311c
   1d91c:	movt	r0, #4
   1d920:	ldr	r1, [r0]
   1d924:	lsl	r0, r4, #2
   1d928:	blx	r1
   1d92c:	str	r0, [sl, #8]
   1d930:	str	r4, [sl]
   1d934:	mov	r2, r6
   1d938:	mov	ip, r5
   1d93c:	ldr	r1, [sl, #4]
   1d940:	cmp	r1, #0
   1d944:	rsbmi	r1, r1, #0
   1d948:	cmp	r1, r4
   1d94c:	movgt	r1, #0
   1d950:	strgt	r1, [sl, #4]
   1d954:	ldr	r1, [r2, #8]
   1d958:	mov	r9, #0
   1d95c:	cmp	ip, #4
   1d960:	bcc	1da44 <__assert_fail@plt+0xc724>
   1d964:	add	r3, r1, ip, lsl #2
   1d968:	cmp	r0, r3
   1d96c:	addcc	r3, r0, ip, lsl #2
   1d970:	cmpcc	r1, r3
   1d974:	bcc	1da44 <__assert_fail@plt+0xc724>
   1d978:	bic	r9, ip, #-2147483645	; 0x80000003
   1d97c:	mov	r3, #1
   1d980:	str	sl, [sp, #40]	; 0x28
   1d984:	str	r2, [sp, #24]
   1d988:	mov	sl, #0
   1d98c:	str	r8, [sp, #44]	; 0x2c
   1d990:	str	ip, [sp, #20]
   1d994:	sub	r5, r9, #4
   1d998:	add	r7, r3, r5, lsr #2
   1d99c:	cmp	r5, #12
   1d9a0:	and	r2, r7, #3
   1d9a4:	bcc	1da08 <__assert_fail@plt+0xc6e8>
   1d9a8:	sub	r8, r7, r2
   1d9ac:	mov	r4, #0
   1d9b0:	mov	sl, #0
   1d9b4:	add	r3, r1, r4
   1d9b8:	mov	r5, #48	; 0x30
   1d9bc:	add	r6, r0, r4
   1d9c0:	add	r4, r4, #64	; 0x40
   1d9c4:	subs	r8, r8, #4
   1d9c8:	add	sl, sl, #16
   1d9cc:	mov	r7, r3
   1d9d0:	mov	ip, r6
   1d9d4:	add	lr, r3, #16
   1d9d8:	add	r3, r3, #32
   1d9dc:	vld1.32	{d16-d17}, [r7], r5
   1d9e0:	vst1.32	{d16-d17}, [ip], r5
   1d9e4:	add	r5, r6, #16
   1d9e8:	vld1.32	{d16-d17}, [lr]
   1d9ec:	vst1.32	{d16-d17}, [r5]
   1d9f0:	vld1.32	{d16-d17}, [r3]
   1d9f4:	add	r3, r6, #32
   1d9f8:	vst1.32	{d16-d17}, [r3]
   1d9fc:	vld1.32	{d16-d17}, [r7]
   1da00:	vst1.32	{d16-d17}, [ip]
   1da04:	bne	1d9b4 <__assert_fail@plt+0xc694>
   1da08:	cmp	r2, #0
   1da0c:	beq	1da2c <__assert_fail@plt+0xc70c>
   1da10:	add	r7, r1, sl, lsl #2
   1da14:	add	r6, r0, sl, lsl #2
   1da18:	rsb	r3, r2, #0
   1da1c:	vld1.32	{d16-d17}, [r7]!
   1da20:	adds	r3, r3, #1
   1da24:	vst1.32	{d16-d17}, [r6]!
   1da28:	bcc	1da1c <__assert_fail@plt+0xc6fc>
   1da2c:	ldr	ip, [sp, #20]
   1da30:	ldr	r8, [sp, #44]	; 0x2c
   1da34:	ldr	sl, [sp, #40]	; 0x28
   1da38:	ldr	r2, [sp, #24]
   1da3c:	cmp	ip, r9
   1da40:	beq	1dab0 <__assert_fail@plt+0xc790>
   1da44:	mvn	r3, r9
   1da48:	ands	r7, ip, #3
   1da4c:	add	r3, ip, r3
   1da50:	beq	1da68 <__assert_fail@plt+0xc748>
   1da54:	ldr	r6, [r1, r9, lsl #2]
   1da58:	subs	r7, r7, #1
   1da5c:	str	r6, [r0, r9, lsl #2]
   1da60:	add	r9, r9, #1
   1da64:	bne	1da54 <__assert_fail@plt+0xc734>
   1da68:	cmp	r3, #3
   1da6c:	bcc	1dab0 <__assert_fail@plt+0xc790>
   1da70:	sub	r3, ip, r9
   1da74:	lsl	r4, r9, #2
   1da78:	add	r7, r1, #16
   1da7c:	ldr	r6, [r1, r4]!
   1da80:	add	r5, r0, #16
   1da84:	subs	r3, r3, #4
   1da88:	str	r6, [r0, r4]!
   1da8c:	ldr	r6, [r1, #4]
   1da90:	str	r6, [r0, #4]
   1da94:	ldr	r6, [r1, #8]
   1da98:	str	r6, [r0, #8]
   1da9c:	ldr	r1, [r1, #12]
   1daa0:	str	r1, [r0, #12]
   1daa4:	mov	r1, r7
   1daa8:	mov	r0, r5
   1daac:	bne	1da78 <__assert_fail@plt+0xc758>
   1dab0:	ldr	r0, [r2, #4]
   1dab4:	str	r0, [sl, #4]
   1dab8:	cmp	r8, #0
   1dabc:	mov	r4, #1
   1dac0:	movne	r0, #0
   1dac4:	strne	r0, [r8, #4]
   1dac8:	mov	r0, r4
   1dacc:	sub	sp, fp, #28
   1dad0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1dad4:	movw	r0, #5293	; 0x14ad
   1dad8:	movt	r0, #3
   1dadc:	bl	21fb4 <__assert_fail@plt+0x10c94>
   1dae0:	movw	r0, #5321	; 0x14c9
   1dae4:	movw	r1, #1996	; 0x7cc
   1dae8:	movw	r3, #5328	; 0x14d0
   1daec:	movw	r2, #1148	; 0x47c
   1daf0:	movt	r0, #3
   1daf4:	b	1db2c <__assert_fail@plt+0xc80c>
   1daf8:	movw	r0, #2714	; 0xa9a
   1dafc:	movw	r1, #1996	; 0x7cc
   1db00:	movw	r3, #2640	; 0xa50
   1db04:	movw	r2, #661	; 0x295
   1db08:	movt	r0, #3
   1db0c:	movt	r1, #3
   1db10:	movt	r3, #3
   1db14:	bl	11320 <__assert_fail@plt>
   1db18:	movw	r0, #2977	; 0xba1
   1db1c:	movw	r1, #1996	; 0x7cc
   1db20:	movw	r3, #5328	; 0x14d0
   1db24:	movw	r2, #1155	; 0x483
   1db28:	movt	r0, #3
   1db2c:	movt	r1, #3
   1db30:	movt	r3, #3
   1db34:	bl	11320 <__assert_fail@plt>
   1db38:	push	{fp, lr}
   1db3c:	mov	fp, sp
   1db40:	sub	sp, sp, #8
   1db44:	mov	ip, #0
   1db48:	str	ip, [sp]
   1db4c:	bl	1d0f8 <__assert_fail@plt+0xbdd8>
   1db50:	mov	sp, fp
   1db54:	pop	{fp, pc}
   1db58:	push	{fp, lr}
   1db5c:	mov	fp, sp
   1db60:	sub	sp, sp, #8
   1db64:	mov	ip, #2
   1db68:	str	ip, [sp]
   1db6c:	bl	1d0f8 <__assert_fail@plt+0xbdd8>
   1db70:	mov	sp, fp
   1db74:	pop	{fp, pc}
   1db78:	push	{fp, lr}
   1db7c:	mov	fp, sp
   1db80:	sub	sp, sp, #8
   1db84:	mov	r3, r2
   1db88:	mov	r2, r1
   1db8c:	mov	r1, #1
   1db90:	str	r1, [sp]
   1db94:	mov	r1, #0
   1db98:	bl	1d0f8 <__assert_fail@plt+0xbdd8>
   1db9c:	mov	sp, fp
   1dba0:	pop	{fp, pc}
   1dba4:	push	{fp, lr}
   1dba8:	mov	fp, sp
   1dbac:	sub	sp, sp, #8
   1dbb0:	mov	r3, r2
   1dbb4:	mov	r2, r1
   1dbb8:	mov	r1, #0
   1dbbc:	str	r1, [sp]
   1dbc0:	mov	r1, #0
   1dbc4:	bl	1d0f8 <__assert_fail@plt+0xbdd8>
   1dbc8:	mov	sp, fp
   1dbcc:	pop	{fp, pc}
   1dbd0:	push	{fp, lr}
   1dbd4:	mov	fp, sp
   1dbd8:	sub	sp, sp, #8
   1dbdc:	mov	r3, r2
   1dbe0:	mov	r2, r1
   1dbe4:	mov	r1, #2
   1dbe8:	str	r1, [sp]
   1dbec:	mov	r1, #0
   1dbf0:	bl	1d0f8 <__assert_fail@plt+0xbdd8>
   1dbf4:	mov	sp, fp
   1dbf8:	pop	{fp, pc}
   1dbfc:	push	{fp, lr}
   1dc00:	mov	fp, sp
   1dc04:	sub	sp, sp, #8
   1dc08:	mov	r3, r2
   1dc0c:	mov	r2, r1
   1dc10:	mov	r1, r0
   1dc14:	mov	r0, #1
   1dc18:	str	r0, [sp]
   1dc1c:	mov	r0, #0
   1dc20:	bl	1d0f8 <__assert_fail@plt+0xbdd8>
   1dc24:	mov	sp, fp
   1dc28:	pop	{fp, pc}
   1dc2c:	push	{fp, lr}
   1dc30:	mov	fp, sp
   1dc34:	sub	sp, sp, #8
   1dc38:	mov	r3, r2
   1dc3c:	mov	r2, r1
   1dc40:	mov	r1, r0
   1dc44:	mov	r0, #0
   1dc48:	str	r0, [sp]
   1dc4c:	mov	r0, #0
   1dc50:	bl	1d0f8 <__assert_fail@plt+0xbdd8>
   1dc54:	mov	sp, fp
   1dc58:	pop	{fp, pc}
   1dc5c:	push	{fp, lr}
   1dc60:	mov	fp, sp
   1dc64:	sub	sp, sp, #8
   1dc68:	mov	r3, r2
   1dc6c:	mov	r2, r1
   1dc70:	mov	r1, r0
   1dc74:	mov	r0, #2
   1dc78:	str	r0, [sp]
   1dc7c:	mov	r0, #0
   1dc80:	bl	1d0f8 <__assert_fail@plt+0xbdd8>
   1dc84:	mov	sp, fp
   1dc88:	pop	{fp, pc}
   1dc8c:	push	{fp, lr}
   1dc90:	mov	fp, sp
   1dc94:	sub	sp, sp, #8
   1dc98:	mov	r3, r2
   1dc9c:	mov	r2, r1
   1dca0:	mov	r1, r0
   1dca4:	ldr	r0, [r3, #4]
   1dca8:	lsr	r0, r0, #31
   1dcac:	str	r0, [sp]
   1dcb0:	mov	r0, #0
   1dcb4:	bl	1d0f8 <__assert_fail@plt+0xbdd8>
   1dcb8:	mov	sp, fp
   1dcbc:	pop	{fp, pc}
   1dcc0:	mov	r3, #1
   1dcc4:	b	1dcc8 <__assert_fail@plt+0xc9a8>
   1dcc8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1dccc:	add	fp, sp, #28
   1dcd0:	sub	sp, sp, #44	; 0x2c
   1dcd4:	ldr	r9, [r1, #4]
   1dcd8:	mov	lr, r0
   1dcdc:	cmp	r9, #0
   1dce0:	beq	1dd9c <__assert_fail@plt+0xca7c>
   1dce4:	mov	r6, r9
   1dce8:	rsbmi	r6, r9, #0
   1dcec:	cmp	r9, #0
   1dcf0:	mov	r5, r1
   1dcf4:	mov	r1, #0
   1dcf8:	mov	r0, #0
   1dcfc:	and	r8, r2, #31
   1dd00:	lsr	r4, r2, #5
   1dd04:	mov	ip, #0
   1dd08:	movwgt	r1, #1
   1dd0c:	sub	sl, r6, r2, lsr #5
   1dd10:	cmp	r1, r3
   1dd14:	bne	1dd48 <__assert_fail@plt+0xca28>
   1dd18:	cmp	sl, #0
   1dd1c:	ble	1ddb4 <__assert_fail@plt+0xca94>
   1dd20:	ldr	r1, [r5, #8]
   1dd24:	mov	r3, r4
   1dd28:	sub	r2, r1, #4
   1dd2c:	cmp	r3, #1
   1dd30:	blt	1ddc4 <__assert_fail@plt+0xcaa4>
   1dd34:	ldr	r7, [r2, r3, lsl #2]
   1dd38:	sub	r3, r3, #1
   1dd3c:	cmp	r7, #0
   1dd40:	beq	1dd2c <__assert_fail@plt+0xca0c>
   1dd44:	mov	ip, #1
   1dd48:	cmp	sl, #1
   1dd4c:	blt	1e06c <__assert_fail@plt+0xcd4c>
   1dd50:	ldr	r1, [lr]
   1dd54:	str	ip, [sp, #28]
   1dd58:	cmp	sl, r1
   1dd5c:	ble	1ddac <__assert_fail@plt+0xca8c>
   1dd60:	cmp	sl, #1
   1dd64:	mov	r7, sl
   1dd68:	str	r6, [sp, #24]
   1dd6c:	movle	r7, #1
   1dd70:	cmp	r1, #0
   1dd74:	beq	1dde4 <__assert_fail@plt+0xcac4>
   1dd78:	movw	r0, #12576	; 0x3120
   1dd7c:	lsl	r1, r1, #2
   1dd80:	lsl	r2, r7, #2
   1dd84:	mov	r6, lr
   1dd88:	movt	r0, #4
   1dd8c:	ldr	r3, [r0]
   1dd90:	ldr	r0, [lr, #8]
   1dd94:	blx	r3
   1dd98:	b	1ddfc <__assert_fail@plt+0xcadc>
   1dd9c:	mov	r0, #0
   1dda0:	str	r0, [lr, #4]
   1dda4:	sub	sp, fp, #28
   1dda8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ddac:	ldr	r0, [lr, #8]
   1ddb0:	b	1de24 <__assert_fail@plt+0xcb04>
   1ddb4:	mov	r0, #0
   1ddb8:	mov	r7, lr
   1ddbc:	str	r0, [r7, #4]!
   1ddc0:	b	1e07c <__assert_fail@plt+0xcd5c>
   1ddc4:	ldr	r1, [r1, r4, lsl #2]
   1ddc8:	mvn	r2, #0
   1ddcc:	bic	ip, r1, r2, lsl r8
   1ddd0:	cmp	ip, #0
   1ddd4:	movwne	ip, #1
   1ddd8:	cmp	sl, #1
   1dddc:	bge	1dd50 <__assert_fail@plt+0xca30>
   1dde0:	b	1e06c <__assert_fail@plt+0xcd4c>
   1dde4:	movw	r0, #12572	; 0x311c
   1dde8:	mov	r6, lr
   1ddec:	movt	r0, #4
   1ddf0:	ldr	r1, [r0]
   1ddf4:	lsl	r0, r7, #2
   1ddf8:	blx	r1
   1ddfc:	str	r0, [r6, #8]
   1de00:	str	r7, [r6]
   1de04:	mov	lr, r6
   1de08:	ldr	r1, [r6, #4]
   1de0c:	ldr	r6, [sp, #24]
   1de10:	cmp	r1, #0
   1de14:	rsbmi	r1, r1, #0
   1de18:	cmp	r1, r7
   1de1c:	movgt	r1, #0
   1de20:	strgt	r1, [lr, #4]
   1de24:	ldr	r5, [r5, #8]
   1de28:	cmp	r8, #0
   1de2c:	add	r1, r5, r4, lsl #2
   1de30:	beq	1de70 <__assert_fail@plt+0xcb50>
   1de34:	ldr	r2, [r1]
   1de38:	subs	ip, sl, #1
   1de3c:	lsr	r3, r2, r8
   1de40:	beq	1dfec <__assert_fail@plt+0xcccc>
   1de44:	mvn	r2, r4
   1de48:	str	lr, [sp, #20]
   1de4c:	rsb	r5, r8, #32
   1de50:	sub	lr, r6, #2
   1de54:	str	r4, [sp, #16]
   1de58:	add	r2, r6, r2
   1de5c:	tst	r2, #1
   1de60:	bne	1dff4 <__assert_fail@plt+0xccd4>
   1de64:	mov	r7, ip
   1de68:	mov	r2, r0
   1de6c:	b	1e00c <__assert_fail@plt+0xccec>
   1de70:	sub	r7, r6, r4
   1de74:	mov	r2, #0
   1de78:	cmp	r7, #3
   1de7c:	bls	1df70 <__assert_fail@plt+0xcc50>
   1de80:	add	r3, r5, r6, lsl #2
   1de84:	cmp	r0, r3
   1de88:	addcc	r3, r0, r7, lsl #2
   1de8c:	cmpcc	r1, r3
   1de90:	bcc	1df70 <__assert_fail@plt+0xcc50>
   1de94:	bic	r2, r7, #3
   1de98:	stm	sp, {r5, r7, r9, sl}
   1de9c:	mov	r3, #1
   1dea0:	str	r6, [sp, #24]
   1dea4:	mov	r7, #0
   1dea8:	str	r4, [sp, #16]
   1deac:	str	lr, [sp, #20]
   1deb0:	sub	r5, r2, #4
   1deb4:	add	r3, r3, r5, lsr #2
   1deb8:	cmp	r5, #12
   1debc:	and	r6, r3, #3
   1dec0:	bcc	1df24 <__assert_fail@plt+0xcc04>
   1dec4:	sub	r3, r6, r3
   1dec8:	mov	r5, #0
   1decc:	mov	r7, #0
   1ded0:	add	lr, r1, r5
   1ded4:	mov	r4, #48	; 0x30
   1ded8:	add	sl, r0, r5
   1dedc:	adds	r3, r3, #4
   1dee0:	add	r5, r5, #64	; 0x40
   1dee4:	add	r7, r7, #16
   1dee8:	mov	ip, lr
   1deec:	mov	r9, sl
   1def0:	add	r8, lr, #16
   1def4:	vld1.32	{d16-d17}, [ip], r4
   1def8:	vst1.32	{d16-d17}, [r9], r4
   1defc:	add	r4, sl, #16
   1df00:	vld1.32	{d16-d17}, [r8]
   1df04:	vst1.32	{d16-d17}, [r4]
   1df08:	add	r4, lr, #32
   1df0c:	vld1.32	{d16-d17}, [r4]
   1df10:	add	r4, sl, #32
   1df14:	vst1.32	{d16-d17}, [r4]
   1df18:	vld1.32	{d16-d17}, [ip]
   1df1c:	vst1.32	{d16-d17}, [r9]
   1df20:	bne	1ded0 <__assert_fail@plt+0xcbb0>
   1df24:	ldr	r4, [sp, #16]
   1df28:	cmp	r6, #0
   1df2c:	beq	1df54 <__assert_fail@plt+0xcc34>
   1df30:	ldr	r5, [sp]
   1df34:	add	r3, r0, r7, lsl #2
   1df38:	add	r7, r7, r4
   1df3c:	add	r7, r5, r7, lsl #2
   1df40:	rsb	r5, r6, #0
   1df44:	vld1.32	{d16-d17}, [r7]!
   1df48:	adds	r5, r5, #1
   1df4c:	vst1.32	{d16-d17}, [r3]!
   1df50:	bcc	1df44 <__assert_fail@plt+0xcc24>
   1df54:	ldr	r7, [sp, #4]
   1df58:	ldr	r9, [sp, #8]
   1df5c:	ldr	lr, [sp, #20]
   1df60:	ldr	sl, [sp, #12]
   1df64:	ldr	r6, [sp, #24]
   1df68:	cmp	r7, r2
   1df6c:	beq	1e064 <__assert_fail@plt+0xcd44>
   1df70:	mvn	r3, r2
   1df74:	ands	r7, r7, #3
   1df78:	add	r3, r6, r3
   1df7c:	sub	r3, r3, r4
   1df80:	beq	1df98 <__assert_fail@plt+0xcc78>
   1df84:	ldr	r5, [r1, r2, lsl #2]
   1df88:	subs	r7, r7, #1
   1df8c:	str	r5, [r0, r2, lsl #2]
   1df90:	add	r2, r2, #1
   1df94:	bne	1df84 <__assert_fail@plt+0xcc64>
   1df98:	cmp	r3, #3
   1df9c:	bcc	1e064 <__assert_fail@plt+0xcd44>
   1dfa0:	ldr	ip, [sp, #28]
   1dfa4:	add	r3, r2, r4
   1dfa8:	lsl	r2, r2, #2
   1dfac:	sub	r3, r3, r6
   1dfb0:	add	r7, r1, #16
   1dfb4:	ldr	r6, [r1, r2]!
   1dfb8:	add	r5, r0, #16
   1dfbc:	adds	r3, r3, #4
   1dfc0:	str	r6, [r0, r2]!
   1dfc4:	ldr	r6, [r1, #4]
   1dfc8:	str	r6, [r0, #4]
   1dfcc:	ldr	r6, [r1, #8]
   1dfd0:	str	r6, [r0, #8]
   1dfd4:	ldr	r1, [r1, #12]
   1dfd8:	str	r1, [r0, #12]
   1dfdc:	mov	r1, r7
   1dfe0:	mov	r0, r5
   1dfe4:	bne	1dfb0 <__assert_fail@plt+0xcc90>
   1dfe8:	b	1e068 <__assert_fail@plt+0xcd48>
   1dfec:	mov	r2, r0
   1dff0:	b	1e054 <__assert_fail@plt+0xcd34>
   1dff4:	ldr	r4, [r1, #4]!
   1dff8:	mov	r2, r0
   1dffc:	sub	r7, sl, #2
   1e000:	orr	r3, r3, r4, lsl r5
   1e004:	str	r3, [r2], #4
   1e008:	lsr	r3, r4, r8
   1e00c:	ldr	r4, [sp, #16]
   1e010:	cmp	lr, r4
   1e014:	ldr	lr, [sp, #20]
   1e018:	beq	1e054 <__assert_fail@plt+0xcd34>
   1e01c:	add	r1, r1, #4
   1e020:	ldr	r4, [r1]
   1e024:	subs	r7, r7, #2
   1e028:	orr	r3, r3, r4, lsl r5
   1e02c:	str	r3, [r2]
   1e030:	ldr	r3, [r1, #4]
   1e034:	add	r1, r1, #8
   1e038:	lsl	r6, r3, r5
   1e03c:	lsr	r3, r3, r8
   1e040:	orr	r6, r6, r4, lsr r8
   1e044:	str	r6, [r2, #4]
   1e048:	add	r2, r2, #8
   1e04c:	bne	1e020 <__assert_fail@plt+0xcd00>
   1e050:	ldr	lr, [sp, #20]
   1e054:	str	r3, [r2]
   1e058:	ldr	r0, [r0, ip, lsl #2]
   1e05c:	cmp	r0, #0
   1e060:	moveq	sl, ip
   1e064:	ldr	ip, [sp, #28]
   1e068:	mov	r0, sl
   1e06c:	mov	r7, lr
   1e070:	cmp	ip, #0
   1e074:	str	r0, [r7, #4]!
   1e078:	beq	1e0d4 <__assert_fail@plt+0xcdb4>
   1e07c:	movw	r0, #12572	; 0x311c
   1e080:	mov	r4, #1
   1e084:	mov	r6, lr
   1e088:	movt	r0, #4
   1e08c:	str	r4, [sp, #36]	; 0x24
   1e090:	ldr	r1, [r0]
   1e094:	mov	r0, #4
   1e098:	blx	r1
   1e09c:	str	r0, [sp, #40]	; 0x28
   1e0a0:	str	r4, [sp, #32]
   1e0a4:	mov	r5, r0
   1e0a8:	str	r4, [r0]
   1e0ac:	add	r2, sp, #32
   1e0b0:	mov	r0, r6
   1e0b4:	mov	r1, r6
   1e0b8:	bl	1bd0c <__assert_fail@plt+0xa9ec>
   1e0bc:	movw	r0, #12580	; 0x3124
   1e0c0:	mov	r1, #4
   1e0c4:	movt	r0, #4
   1e0c8:	ldr	r2, [r0]
   1e0cc:	mov	r0, r5
   1e0d0:	blx	r2
   1e0d4:	cmn	r9, #1
   1e0d8:	ble	1e0e4 <__assert_fail@plt+0xcdc4>
   1e0dc:	sub	sp, fp, #28
   1e0e0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e0e4:	ldr	r0, [r7]
   1e0e8:	rsb	r0, r0, #0
   1e0ec:	str	r0, [r7]
   1e0f0:	sub	sp, fp, #28
   1e0f4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e0f8:	mov	r3, #0
   1e0fc:	b	1dcc8 <__assert_fail@plt+0xc9a8>
   1e100:	mov	r3, #2
   1e104:	b	1dcc8 <__assert_fail@plt+0xc9a8>
   1e108:	mov	r3, #1
   1e10c:	b	1e110 <__assert_fail@plt+0xcdf0>
   1e110:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e114:	add	fp, sp, #28
   1e118:	sub	sp, sp, #28
   1e11c:	cmp	r2, #0
   1e120:	mov	r5, r0
   1e124:	mov	r0, #0
   1e128:	ldrne	lr, [r1, #4]
   1e12c:	movne	r7, r1
   1e130:	cmpne	lr, #0
   1e134:	beq	1e8b8 <__assert_fail@plt+0xd598>
   1e138:	add	r8, r2, #31
   1e13c:	mov	r0, #0
   1e140:	mov	r6, r2
   1e144:	cmp	r0, r8, lsr #5
   1e148:	beq	1e8dc <__assert_fail@plt+0xd5bc>
   1e14c:	ldr	r1, [r5]
   1e150:	lsr	r4, r8, #5
   1e154:	cmp	r4, r1
   1e158:	ble	1e198 <__assert_fail@plt+0xce78>
   1e15c:	cmp	r4, #1
   1e160:	mov	r9, r4
   1e164:	str	r3, [sp, #24]
   1e168:	str	lr, [sp, #20]
   1e16c:	movls	r9, #1
   1e170:	cmp	r1, #0
   1e174:	beq	1e1a0 <__assert_fail@plt+0xce80>
   1e178:	movw	r0, #12576	; 0x3120
   1e17c:	lsl	r1, r1, #2
   1e180:	lsl	r2, r9, #2
   1e184:	movt	r0, #4
   1e188:	ldr	r3, [r0]
   1e18c:	ldr	r0, [r5, #8]
   1e190:	blx	r3
   1e194:	b	1e1b4 <__assert_fail@plt+0xce94>
   1e198:	ldr	sl, [r5, #8]
   1e19c:	b	1e1e0 <__assert_fail@plt+0xcec0>
   1e1a0:	movw	r0, #12572	; 0x311c
   1e1a4:	movt	r0, #4
   1e1a8:	ldr	r1, [r0]
   1e1ac:	lsl	r0, r9, #2
   1e1b0:	blx	r1
   1e1b4:	str	r0, [r5, #8]
   1e1b8:	str	r9, [r5]
   1e1bc:	mov	sl, r0
   1e1c0:	ldr	r0, [r5, #4]
   1e1c4:	ldr	lr, [sp, #20]
   1e1c8:	ldr	r3, [sp, #24]
   1e1cc:	cmp	r0, #0
   1e1d0:	rsbmi	r0, r0, #0
   1e1d4:	cmp	r0, r9
   1e1d8:	movgt	r0, #0
   1e1dc:	strgt	r0, [r5, #4]
   1e1e0:	bic	r0, r8, #31
   1e1e4:	cmp	lr, #0
   1e1e8:	mov	r9, lr
   1e1ec:	mvn	r2, #0
   1e1f0:	rsb	r8, lr, #0
   1e1f4:	rsbmi	r9, lr, #0
   1e1f8:	sub	r0, r0, r6
   1e1fc:	lsr	ip, r2, r0
   1e200:	cmp	r4, r9
   1e204:	ble	1e238 <__assert_fail@plt+0xcf18>
   1e208:	cmp	lr, #0
   1e20c:	mov	r0, #0
   1e210:	movwgt	r0, #1
   1e214:	cmp	r0, r3
   1e218:	bne	1e3ec <__assert_fail@plt+0xd0cc>
   1e21c:	ldr	r0, [r7, #8]
   1e220:	ldr	r2, [r0]
   1e224:	cmp	r2, #0
   1e228:	beq	1e5b0 <__assert_fail@plt+0xd290>
   1e22c:	mov	lr, sl
   1e230:	mov	r3, r9
   1e234:	b	1e5f0 <__assert_fail@plt+0xd2d0>
   1e238:	ldr	r9, [r7, #8]
   1e23c:	sub	r6, r4, #1
   1e240:	cmp	r5, r7
   1e244:	beq	1e524 <__assert_fail@plt+0xd204>
   1e248:	cmp	r6, #1
   1e24c:	blt	1e520 <__assert_fail@plt+0xd200>
   1e250:	mov	r2, #0
   1e254:	cmp	r6, #4
   1e258:	str	r3, [sp, #24]
   1e25c:	bcc	1e348 <__assert_fail@plt+0xd028>
   1e260:	add	r0, r9, r6, lsl #2
   1e264:	cmp	sl, r0
   1e268:	addcc	r0, sl, r6, lsl #2
   1e26c:	cmpcc	r9, r0
   1e270:	bcc	1e348 <__assert_fail@plt+0xd028>
   1e274:	add	r0, sp, #12
   1e278:	bic	r2, r6, #3
   1e27c:	stmib	sp, {r8, ip}
   1e280:	stm	r0, {r5, r6, lr}
   1e284:	sub	r3, r2, #4
   1e288:	mov	r0, #1
   1e28c:	mov	lr, #0
   1e290:	add	r0, r0, r3, lsr #2
   1e294:	cmp	r3, #12
   1e298:	and	r1, r0, #3
   1e29c:	str	r1, [sp]
   1e2a0:	bcc	1e308 <__assert_fail@plt+0xcfe8>
   1e2a4:	ldr	r1, [sp]
   1e2a8:	mov	r6, #0
   1e2ac:	mov	lr, #0
   1e2b0:	sub	r3, r1, r0
   1e2b4:	add	r5, r9, r6
   1e2b8:	mov	r7, #48	; 0x30
   1e2bc:	add	r1, sl, r6
   1e2c0:	adds	r3, r3, #4
   1e2c4:	add	r6, r6, #64	; 0x40
   1e2c8:	add	lr, lr, #16
   1e2cc:	mov	r0, r5
   1e2d0:	mov	ip, r1
   1e2d4:	add	r8, r5, #16
   1e2d8:	add	r5, r5, #32
   1e2dc:	vld1.32	{d16-d17}, [r0], r7
   1e2e0:	vst1.32	{d16-d17}, [ip], r7
   1e2e4:	add	r7, r1, #16
   1e2e8:	add	r1, r1, #32
   1e2ec:	vld1.32	{d16-d17}, [r8]
   1e2f0:	vst1.32	{d16-d17}, [r7]
   1e2f4:	vld1.32	{d16-d17}, [r5]
   1e2f8:	vst1.32	{d16-d17}, [r1]
   1e2fc:	vld1.32	{d16-d17}, [r0]
   1e300:	vst1.32	{d16-d17}, [ip]
   1e304:	bne	1e2b4 <__assert_fail@plt+0xcf94>
   1e308:	ldr	r1, [sp]
   1e30c:	cmp	r1, #0
   1e310:	beq	1e330 <__assert_fail@plt+0xd010>
   1e314:	add	r0, r9, lr, lsl #2
   1e318:	add	r3, sl, lr, lsl #2
   1e31c:	rsb	r7, r1, #0
   1e320:	vld1.32	{d16-d17}, [r0]!
   1e324:	adds	r7, r7, #1
   1e328:	vst1.32	{d16-d17}, [r3]!
   1e32c:	bcc	1e320 <__assert_fail@plt+0xd000>
   1e330:	ldr	r6, [sp, #16]
   1e334:	ldr	r5, [sp, #12]
   1e338:	ldr	lr, [sp, #20]
   1e33c:	ldmib	sp, {r8, ip}
   1e340:	cmp	r6, r2
   1e344:	beq	1e3e4 <__assert_fail@plt+0xd0c4>
   1e348:	sub	r0, r4, r2
   1e34c:	sub	r1, r4, #1
   1e350:	sub	r0, r0, #2
   1e354:	ands	r3, r1, #3
   1e358:	beq	1e370 <__assert_fail@plt+0xd050>
   1e35c:	ldr	r1, [r9, r2, lsl #2]
   1e360:	subs	r3, r3, #1
   1e364:	str	r1, [sl, r2, lsl #2]
   1e368:	add	r2, r2, #1
   1e36c:	bne	1e35c <__assert_fail@plt+0xd03c>
   1e370:	cmp	r0, #3
   1e374:	bcc	1e3e4 <__assert_fail@plt+0xd0c4>
   1e378:	mvn	r0, r2
   1e37c:	str	lr, [sp, #20]
   1e380:	mov	lr, ip
   1e384:	mov	ip, r5
   1e388:	lsl	r2, r2, #2
   1e38c:	mov	r3, r9
   1e390:	mov	r7, sl
   1e394:	str	r6, [sp, #16]
   1e398:	add	r0, r0, r4
   1e39c:	add	r1, r3, #16
   1e3a0:	ldr	r6, [r3, r2]!
   1e3a4:	add	r5, r7, #16
   1e3a8:	subs	r0, r0, #4
   1e3ac:	str	r6, [r7, r2]!
   1e3b0:	ldr	r6, [r3, #4]
   1e3b4:	str	r6, [r7, #4]
   1e3b8:	ldr	r6, [r3, #8]
   1e3bc:	str	r6, [r7, #8]
   1e3c0:	ldr	r3, [r3, #12]
   1e3c4:	str	r3, [r7, #12]
   1e3c8:	mov	r3, r1
   1e3cc:	mov	r7, r5
   1e3d0:	bne	1e39c <__assert_fail@plt+0xd07c>
   1e3d4:	mov	r5, ip
   1e3d8:	mov	ip, lr
   1e3dc:	ldr	lr, [sp, #20]
   1e3e0:	ldr	r6, [sp, #16]
   1e3e4:	ldr	r3, [sp, #24]
   1e3e8:	b	1e524 <__assert_fail@plt+0xd204>
   1e3ec:	cmp	r5, r7
   1e3f0:	beq	1e514 <__assert_fail@plt+0xd1f4>
   1e3f4:	cmp	r9, #1
   1e3f8:	blt	1e708 <__assert_fail@plt+0xd3e8>
   1e3fc:	ldr	r2, [r7, #8]
   1e400:	mov	r0, #0
   1e404:	cmp	r9, #4
   1e408:	bcc	1e4e8 <__assert_fail@plt+0xd1c8>
   1e40c:	add	r3, r2, r9, lsl #2
   1e410:	cmp	sl, r3
   1e414:	addcc	r3, sl, r9, lsl #2
   1e418:	cmpcc	r2, r3
   1e41c:	bcc	1e4e8 <__assert_fail@plt+0xd1c8>
   1e420:	bic	r0, r9, #-2147483645	; 0x80000003
   1e424:	mov	r3, #1
   1e428:	mov	r8, #0
   1e42c:	str	lr, [sp, #20]
   1e430:	str	r5, [sp, #12]
   1e434:	sub	r6, r0, #4
   1e438:	add	r3, r3, r6, lsr #2
   1e43c:	cmp	r6, #12
   1e440:	and	r1, r3, #3
   1e444:	str	r1, [sp, #24]
   1e448:	bcc	1e4b0 <__assert_fail@plt+0xd190>
   1e44c:	ldr	r1, [sp, #24]
   1e450:	mov	r4, #0
   1e454:	mov	r8, #0
   1e458:	sub	lr, r3, r1
   1e45c:	add	r5, r2, r4
   1e460:	mov	r6, #48	; 0x30
   1e464:	add	r1, sl, r4
   1e468:	add	r4, r4, #64	; 0x40
   1e46c:	subs	lr, lr, #4
   1e470:	add	r8, r8, #16
   1e474:	mov	r3, r5
   1e478:	mov	r7, r1
   1e47c:	add	ip, r5, #16
   1e480:	vld1.32	{d16-d17}, [r3], r6
   1e484:	vst1.32	{d16-d17}, [r7], r6
   1e488:	add	r6, r1, #16
   1e48c:	add	r1, r1, #32
   1e490:	vld1.32	{d16-d17}, [ip]
   1e494:	vst1.32	{d16-d17}, [r6]
   1e498:	add	r6, r5, #32
   1e49c:	vld1.32	{d16-d17}, [r6]
   1e4a0:	vst1.32	{d16-d17}, [r1]
   1e4a4:	vld1.32	{d16-d17}, [r3]
   1e4a8:	vst1.32	{d16-d17}, [r7]
   1e4ac:	bne	1e45c <__assert_fail@plt+0xd13c>
   1e4b0:	ldr	r1, [sp, #24]
   1e4b4:	cmp	r1, #0
   1e4b8:	beq	1e4d8 <__assert_fail@plt+0xd1b8>
   1e4bc:	add	r3, r2, r8, lsl #2
   1e4c0:	add	r7, sl, r8, lsl #2
   1e4c4:	rsb	r6, r1, #0
   1e4c8:	vld1.32	{d16-d17}, [r3]!
   1e4cc:	adds	r6, r6, #1
   1e4d0:	vst1.32	{d16-d17}, [r7]!
   1e4d4:	bcc	1e4c8 <__assert_fail@plt+0xd1a8>
   1e4d8:	ldr	r5, [sp, #12]
   1e4dc:	ldr	lr, [sp, #20]
   1e4e0:	cmp	r9, r0
   1e4e4:	beq	1e514 <__assert_fail@plt+0xd1f4>
   1e4e8:	mvn	r1, r0
   1e4ec:	ands	r7, r9, #3
   1e4f0:	add	r3, r9, r1
   1e4f4:	beq	1e50c <__assert_fail@plt+0xd1ec>
   1e4f8:	ldr	r1, [r2, r0, lsl #2]
   1e4fc:	subs	r7, r7, #1
   1e500:	str	r1, [sl, r0, lsl #2]
   1e504:	add	r0, r0, #1
   1e508:	bne	1e4f8 <__assert_fail@plt+0xd1d8>
   1e50c:	cmp	r3, #3
   1e510:	bcs	1e714 <__assert_fail@plt+0xd3f4>
   1e514:	mov	r4, r9
   1e518:	mov	r8, lr
   1e51c:	b	1e890 <__assert_fail@plt+0xd570>
   1e520:	mov	r6, #0
   1e524:	ldr	r0, [r9, r6, lsl #2]
   1e528:	cmp	lr, #0
   1e52c:	and	r0, r0, ip
   1e530:	str	r0, [sl, r6, lsl #2]
   1e534:	mov	r0, #0
   1e538:	movwgt	r0, #1
   1e53c:	cmp	r0, r3
   1e540:	bne	1e5a8 <__assert_fail@plt+0xd288>
   1e544:	ldr	r2, [sl]
   1e548:	mov	r1, sl
   1e54c:	mov	r3, r4
   1e550:	cmp	r2, #0
   1e554:	bne	1e57c <__assert_fail@plt+0xd25c>
   1e558:	mov	r0, #0
   1e55c:	mov	r3, r4
   1e560:	mov	r1, sl
   1e564:	subs	r3, r3, #1
   1e568:	str	r0, [r1]
   1e56c:	beq	1e7d0 <__assert_fail@plt+0xd4b0>
   1e570:	ldr	r2, [r1, #4]!
   1e574:	cmp	r2, #0
   1e578:	beq	1e564 <__assert_fail@plt+0xd244>
   1e57c:	rsb	r0, r2, #0
   1e580:	sub	r2, r3, #1
   1e584:	cmp	r2, #1
   1e588:	str	r0, [r1]
   1e58c:	blt	1e7d0 <__assert_fail@plt+0xd4b0>
   1e590:	mov	r9, r8
   1e594:	sub	r8, r3, #1
   1e598:	cmp	r8, #4
   1e59c:	bcs	1e6a0 <__assert_fail@plt+0xd380>
   1e5a0:	mov	r8, r9
   1e5a4:	b	1e7b0 <__assert_fail@plt+0xd490>
   1e5a8:	mov	r8, lr
   1e5ac:	b	1e890 <__assert_fail@plt+0xd570>
   1e5b0:	mov	r6, #0
   1e5b4:	mov	r3, #0
   1e5b8:	mov	r7, #0
   1e5bc:	add	r2, r9, r7
   1e5c0:	str	r6, [sl, -r7, lsl #2]
   1e5c4:	cmp	r2, #1
   1e5c8:	beq	1e8c4 <__assert_fail@plt+0xd5a4>
   1e5cc:	sub	r2, r0, r7, lsl #2
   1e5d0:	sub	r3, r3, #4
   1e5d4:	sub	r7, r7, #1
   1e5d8:	ldr	r2, [r2, #4]
   1e5dc:	cmp	r2, #0
   1e5e0:	beq	1e5bc <__assert_fail@plt+0xd29c>
   1e5e4:	sub	lr, sl, r3
   1e5e8:	sub	r0, r0, r3
   1e5ec:	add	r3, r9, r7
   1e5f0:	rsb	r2, r2, #0
   1e5f4:	str	r2, [lr]
   1e5f8:	sub	r2, r3, #1
   1e5fc:	cmp	r2, #1
   1e600:	blt	1e85c <__assert_fail@plt+0xd53c>
   1e604:	sub	r1, r3, #1
   1e608:	cmp	r1, #4
   1e60c:	bcc	1e83c <__assert_fail@plt+0xd51c>
   1e610:	add	r7, r0, r3, lsl #2
   1e614:	add	r6, lr, #4
   1e618:	cmp	r6, r7
   1e61c:	addcc	r3, lr, r3, lsl #2
   1e620:	addcc	r7, r0, #4
   1e624:	cmpcc	r7, r3
   1e628:	bcc	1e83c <__assert_fail@plt+0xd51c>
   1e62c:	str	r1, [sp, #24]
   1e630:	bic	r1, r1, #3
   1e634:	mov	r7, #1
   1e638:	stmib	sp, {r8, ip}
   1e63c:	str	r5, [sp, #12]
   1e640:	subs	r3, r1, #4
   1e644:	str	r1, [sp, #20]
   1e648:	add	r3, r7, r3, lsr #2
   1e64c:	and	r1, r3, #1
   1e650:	str	r1, [sp, #16]
   1e654:	beq	1e7e0 <__assert_fail@plt+0xd4c0>
   1e658:	sub	r6, r1, r3
   1e65c:	mov	r1, lr
   1e660:	add	r3, r0, #20
   1e664:	add	lr, lr, #20
   1e668:	mov	r7, #0
   1e66c:	mov	ip, #32
   1e670:	sub	r8, r3, #16
   1e674:	sub	r5, lr, #16
   1e678:	adds	r6, r6, #2
   1e67c:	add	r7, r7, #8
   1e680:	vld1.32	{d16-d17}, [r8]
   1e684:	vmvn	q8, q8
   1e688:	vst1.32	{d16-d17}, [r5]
   1e68c:	vld1.32	{d16-d17}, [r3], ip
   1e690:	vmvn	q8, q8
   1e694:	vst1.32	{d16-d17}, [lr], ip
   1e698:	bne	1e670 <__assert_fail@plt+0xd350>
   1e69c:	b	1e7e8 <__assert_fail@plt+0xd4c8>
   1e6a0:	bic	lr, r8, #3
   1e6a4:	mov	r3, #1
   1e6a8:	str	r6, [sp, #16]
   1e6ac:	str	ip, [sp, #8]
   1e6b0:	str	r5, [sp, #12]
   1e6b4:	subs	r0, lr, #4
   1e6b8:	add	r0, r3, r0, lsr #2
   1e6bc:	and	r3, r0, #1
   1e6c0:	str	r3, [sp, #24]
   1e6c4:	beq	1e76c <__assert_fail@plt+0xd44c>
   1e6c8:	sub	r0, r3, r0
   1e6cc:	add	r5, r1, #20
   1e6d0:	mov	r7, #0
   1e6d4:	mvn	r3, #15
   1e6d8:	mov	ip, #32
   1e6dc:	mov	r6, r5
   1e6e0:	adds	r0, r0, #2
   1e6e4:	add	r7, r7, #8
   1e6e8:	vld1.32	{d16-d17}, [r6], r3
   1e6ec:	vld1.32	{d18-d19}, [r6]
   1e6f0:	vmvn	q8, q8
   1e6f4:	vmvn	q9, q9
   1e6f8:	vst1.32	{d18-d19}, [r6]
   1e6fc:	vst1.32	{d16-d17}, [r5], ip
   1e700:	bne	1e6dc <__assert_fail@plt+0xd3bc>
   1e704:	b	1e770 <__assert_fail@plt+0xd450>
   1e708:	mov	r4, #-2147483648	; 0x80000000
   1e70c:	mov	r8, lr
   1e710:	b	1e890 <__assert_fail@plt+0xd570>
   1e714:	mov	ip, r5
   1e718:	lsl	r3, r0, #2
   1e71c:	mov	r5, sl
   1e720:	add	r1, r2, #16
   1e724:	ldr	r7, [r2, r3]!
   1e728:	add	r6, r5, #16
   1e72c:	add	r0, r0, #4
   1e730:	cmp	r9, r0
   1e734:	str	r7, [r5, r3]!
   1e738:	ldr	r7, [r2, #4]
   1e73c:	str	r7, [r5, #4]
   1e740:	ldr	r7, [r2, #8]
   1e744:	str	r7, [r5, #8]
   1e748:	ldr	r2, [r2, #12]
   1e74c:	str	r2, [r5, #12]
   1e750:	mov	r2, r1
   1e754:	mov	r5, r6
   1e758:	bne	1e720 <__assert_fail@plt+0xd400>
   1e75c:	mov	r4, r9
   1e760:	mov	r8, lr
   1e764:	mov	r5, ip
   1e768:	b	1e890 <__assert_fail@plt+0xd570>
   1e76c:	mov	r7, #0
   1e770:	ldr	r0, [sp, #24]
   1e774:	cmp	r0, #0
   1e778:	beq	1e790 <__assert_fail@plt+0xd470>
   1e77c:	add	r0, r1, r7, lsl #2
   1e780:	add	r0, r0, #4
   1e784:	vld1.32	{d16-d17}, [r0]
   1e788:	vmvn	q8, q8
   1e78c:	vst1.32	{d16-d17}, [r0]
   1e790:	ldr	r5, [sp, #12]
   1e794:	ldr	ip, [sp, #8]
   1e798:	ldr	r6, [sp, #16]
   1e79c:	cmp	r8, lr
   1e7a0:	mov	r8, r9
   1e7a4:	beq	1e7d0 <__assert_fail@plt+0xd4b0>
   1e7a8:	add	r1, r1, lr, lsl #2
   1e7ac:	sub	r2, r2, lr
   1e7b0:	add	r0, r1, #4
   1e7b4:	add	r1, r1, #4
   1e7b8:	ldr	r3, [r1], #4
   1e7bc:	sub	r2, r2, #1
   1e7c0:	cmp	r2, #0
   1e7c4:	mvn	r3, r3
   1e7c8:	str	r3, [r0], #4
   1e7cc:	bgt	1e7b8 <__assert_fail@plt+0xd498>
   1e7d0:	ldr	r0, [sl, r6, lsl #2]
   1e7d4:	and	r0, r0, ip
   1e7d8:	str	r0, [sl, r6, lsl #2]
   1e7dc:	b	1e890 <__assert_fail@plt+0xd570>
   1e7e0:	mov	r1, lr
   1e7e4:	mov	r7, #0
   1e7e8:	ldr	r3, [sp, #16]
   1e7ec:	mov	lr, r1
   1e7f0:	cmp	r3, #0
   1e7f4:	beq	1e814 <__assert_fail@plt+0xd4f4>
   1e7f8:	add	r3, r0, r7, lsl #2
   1e7fc:	add	r3, r3, #4
   1e800:	vld1.32	{d16-d17}, [r3]
   1e804:	add	r3, lr, r7, lsl #2
   1e808:	add	r3, r3, #4
   1e80c:	vmvn	q8, q8
   1e810:	vst1.32	{d16-d17}, [r3]
   1e814:	ldr	r1, [sp, #24]
   1e818:	ldr	r3, [sp, #20]
   1e81c:	ldr	r5, [sp, #12]
   1e820:	ldmib	sp, {r8, ip}
   1e824:	cmp	r1, r3
   1e828:	beq	1e85c <__assert_fail@plt+0xd53c>
   1e82c:	add	lr, lr, r3, lsl #2
   1e830:	add	r0, r0, r3, lsl #2
   1e834:	sub	r2, r2, r3
   1e838:	mov	r1, r3
   1e83c:	add	r3, lr, #4
   1e840:	add	r0, r0, #4
   1e844:	ldr	r7, [r0], #4
   1e848:	sub	r2, r2, #1
   1e84c:	cmp	r2, #0
   1e850:	mvn	r7, r7
   1e854:	str	r7, [r3], #4
   1e858:	bgt	1e844 <__assert_fail@plt+0xd524>
   1e85c:	mov	r6, r5
   1e860:	sub	r5, r4, #1
   1e864:	cmp	r5, r9
   1e868:	ble	1e888 <__assert_fail@plt+0xd568>
   1e86c:	sub	r1, r5, r9
   1e870:	add	r0, sl, r9, lsl #2
   1e874:	mov	r7, ip
   1e878:	lsl	r2, r1, #2
   1e87c:	mov	r1, #255	; 0xff
   1e880:	bl	11248 <memset@plt>
   1e884:	mov	ip, r7
   1e888:	str	ip, [sl, r5, lsl #2]
   1e88c:	mov	r5, r6
   1e890:	sub	r1, sl, #4
   1e894:	mov	r0, r4
   1e898:	cmp	r4, #1
   1e89c:	blt	1e8b0 <__assert_fail@plt+0xd590>
   1e8a0:	ldr	r2, [r1, r0, lsl #2]
   1e8a4:	sub	r4, r0, #1
   1e8a8:	cmp	r2, #0
   1e8ac:	beq	1e894 <__assert_fail@plt+0xd574>
   1e8b0:	cmp	r8, #0
   1e8b4:	rsbmi	r0, r0, #0
   1e8b8:	str	r0, [r5, #4]
   1e8bc:	sub	sp, fp, #28
   1e8c0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e8c4:	movw	r0, #2977	; 0xba1
   1e8c8:	movw	r1, #1996	; 0x7cc
   1e8cc:	movw	r3, #5402	; 0x151a
   1e8d0:	movw	r2, #2443	; 0x98b
   1e8d4:	movt	r0, #3
   1e8d8:	b	1e8f0 <__assert_fail@plt+0xd5d0>
   1e8dc:	movw	r0, #4308	; 0x10d4
   1e8e0:	movw	r1, #1996	; 0x7cc
   1e8e4:	movw	r3, #5402	; 0x151a
   1e8e8:	movw	r2, #2427	; 0x97b
   1e8ec:	movt	r0, #3
   1e8f0:	movt	r1, #3
   1e8f4:	movt	r3, #3
   1e8f8:	bl	11320 <__assert_fail@plt>
   1e8fc:	mov	r3, #0
   1e900:	b	1e110 <__assert_fail@plt+0xcdf0>
   1e904:	mov	r3, #2
   1e908:	b	1e110 <__assert_fail@plt+0xcdf0>
   1e90c:	push	{fp, lr}
   1e910:	mov	fp, sp
   1e914:	sub	sp, sp, #8
   1e918:	mov	r3, r2
   1e91c:	mov	r2, r1
   1e920:	mov	r1, #2
   1e924:	str	r1, [sp]
   1e928:	mov	r1, #0
   1e92c:	bl	1d0f8 <__assert_fail@plt+0xbdd8>
   1e930:	cmp	r0, #0
   1e934:	moveq	sp, fp
   1e938:	popeq	{fp, pc}
   1e93c:	movw	r0, #2977	; 0xba1
   1e940:	movw	r1, #1996	; 0x7cc
   1e944:	movw	r3, #2987	; 0xbab
   1e948:	movw	r2, #2521	; 0x9d9
   1e94c:	movt	r0, #3
   1e950:	movt	r1, #3
   1e954:	movt	r3, #3
   1e958:	bl	11320 <__assert_fail@plt>
   1e95c:	push	{fp, lr}
   1e960:	mov	fp, sp
   1e964:	sub	sp, sp, #8
   1e968:	mov	r2, r0
   1e96c:	mov	r0, #2
   1e970:	mov	r3, r1
   1e974:	mov	r1, #0
   1e978:	str	r0, [sp]
   1e97c:	mov	r0, #0
   1e980:	bl	1d0f8 <__assert_fail@plt+0xbdd8>
   1e984:	clz	r0, r0
   1e988:	lsr	r0, r0, #5
   1e98c:	mov	sp, fp
   1e990:	pop	{fp, pc}
   1e994:	push	{r4, r5, fp, lr}
   1e998:	add	fp, sp, #8
   1e99c:	sub	sp, sp, #16
   1e9a0:	mov	r5, r2
   1e9a4:	mov	r2, r1
   1e9a8:	mov	r1, r0
   1e9ac:	mov	r3, #0
   1e9b0:	mov	r4, #0
   1e9b4:	ldr	r0, [r5, #4]
   1e9b8:	cmp	r0, #0
   1e9bc:	movwgt	r3, #1
   1e9c0:	cmp	r3, r0, lsr #31
   1e9c4:	bne	1ea14 <__assert_fail@plt+0xd6f4>
   1e9c8:	ldr	r0, [r1, #4]
   1e9cc:	ldr	r3, [r2, #4]
   1e9d0:	cmp	r0, r3
   1e9d4:	bne	1eabc <__assert_fail@plt+0xd79c>
   1e9d8:	cmp	r0, #0
   1e9dc:	bmi	1ea80 <__assert_fail@plt+0xd760>
   1e9e0:	ldr	r1, [r1, #8]
   1e9e4:	ldr	r2, [r2, #8]
   1e9e8:	sub	r1, r1, #4
   1e9ec:	sub	r2, r2, #4
   1e9f0:	cmp	r0, #1
   1e9f4:	blt	1eab8 <__assert_fail@plt+0xd798>
   1e9f8:	sub	r3, r0, #1
   1e9fc:	ldr	r5, [r2, r0, lsl #2]
   1ea00:	ldr	r0, [r1, r0, lsl #2]
   1ea04:	cmp	r0, r5
   1ea08:	mov	r0, r3
   1ea0c:	beq	1e9f0 <__assert_fail@plt+0xd6d0>
   1ea10:	b	1eabc <__assert_fail@plt+0xd79c>
   1ea14:	movw	r0, #1992	; 0x7c8
   1ea18:	movt	r0, #3
   1ea1c:	str	r0, [sp, #12]
   1ea20:	str	r4, [sp, #8]
   1ea24:	str	r4, [sp, #4]
   1ea28:	add	r4, sp, #4
   1ea2c:	mov	r0, r4
   1ea30:	bl	1c674 <__assert_fail@plt+0xb354>
   1ea34:	mov	r0, #2
   1ea38:	mov	r1, #0
   1ea3c:	mov	r2, r4
   1ea40:	mov	r3, r5
   1ea44:	str	r0, [sp]
   1ea48:	mov	r0, #0
   1ea4c:	bl	1d0f8 <__assert_fail@plt+0xbdd8>
   1ea50:	clz	r0, r0
   1ea54:	lsr	r4, r0, #5
   1ea58:	ldr	r0, [sp, #4]
   1ea5c:	cmp	r0, #0
   1ea60:	beq	1eabc <__assert_fail@plt+0xd79c>
   1ea64:	movw	r1, #12580	; 0x3124
   1ea68:	movt	r1, #4
   1ea6c:	ldr	r2, [r1]
   1ea70:	lsl	r1, r0, #2
   1ea74:	ldr	r0, [sp, #12]
   1ea78:	blx	r2
   1ea7c:	b	1eabc <__assert_fail@plt+0xd79c>
   1ea80:	ldr	r1, [r1, #8]
   1ea84:	rsb	r3, r0, #0
   1ea88:	ldr	r0, [r2, #8]
   1ea8c:	sub	r0, r0, #4
   1ea90:	sub	r1, r1, #4
   1ea94:	cmp	r3, #1
   1ea98:	blt	1eab8 <__assert_fail@plt+0xd798>
   1ea9c:	sub	r2, r3, #1
   1eaa0:	ldr	r5, [r1, r3, lsl #2]
   1eaa4:	ldr	r3, [r0, r3, lsl #2]
   1eaa8:	cmp	r3, r5
   1eaac:	mov	r3, r2
   1eab0:	beq	1ea94 <__assert_fail@plt+0xd774>
   1eab4:	b	1eabc <__assert_fail@plt+0xd79c>
   1eab8:	mov	r4, #1
   1eabc:	mov	r0, r4
   1eac0:	sub	sp, fp, #8
   1eac4:	pop	{r4, r5, fp, pc}
   1eac8:	push	{fp, lr}
   1eacc:	mov	fp, sp
   1ead0:	sub	sp, sp, #8
   1ead4:	mov	ip, #1
   1ead8:	str	ip, [sp]
   1eadc:	bl	1eae8 <__assert_fail@plt+0xd7c8>
   1eae0:	mov	sp, fp
   1eae4:	pop	{fp, pc}
   1eae8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1eaec:	add	fp, sp, #28
   1eaf0:	sub	sp, sp, #28
   1eaf4:	mov	r4, r1
   1eaf8:	movw	r1, #1992	; 0x7c8
   1eafc:	movw	r6, #12580	; 0x3124
   1eb00:	mov	sl, r0
   1eb04:	mov	r8, r2
   1eb08:	mov	r0, #0
   1eb0c:	cmp	r3, #0
   1eb10:	movt	r1, #3
   1eb14:	movt	r6, #4
   1eb18:	str	r1, [sp, #24]
   1eb1c:	str	r1, [sp, #12]
   1eb20:	ldr	r1, [fp, #8]
   1eb24:	str	r0, [sp, #20]
   1eb28:	str	r0, [sp, #8]
   1eb2c:	str	r0, [sp, #16]
   1eb30:	str	r0, [sp, #4]
   1eb34:	beq	1eb98 <__assert_fail@plt+0xd878>
   1eb38:	movw	r0, #12572	; 0x311c
   1eb3c:	mov	r9, #1
   1eb40:	mov	r7, r3
   1eb44:	movt	r0, #4
   1eb48:	str	r9, [sp, #8]
   1eb4c:	ldr	r1, [r0]
   1eb50:	mov	r0, #4
   1eb54:	blx	r1
   1eb58:	str	r0, [sp, #12]
   1eb5c:	str	r9, [sp, #4]
   1eb60:	mov	r5, r0
   1eb64:	str	r7, [r0]
   1eb68:	ldr	r0, [fp, #8]
   1eb6c:	add	r1, sp, #16
   1eb70:	add	r3, sp, #4
   1eb74:	mov	r2, r8
   1eb78:	str	r0, [sp]
   1eb7c:	mov	r0, sl
   1eb80:	bl	1d0f8 <__assert_fail@plt+0xbdd8>
   1eb84:	ldr	r2, [r6]
   1eb88:	mov	r0, r5
   1eb8c:	mov	r1, #4
   1eb90:	blx	r2
   1eb94:	b	1ebb4 <__assert_fail@plt+0xd894>
   1eb98:	str	r0, [sp, #8]
   1eb9c:	str	r1, [sp]
   1eba0:	add	r1, sp, #16
   1eba4:	add	r3, sp, #4
   1eba8:	mov	r0, sl
   1ebac:	mov	r2, r8
   1ebb0:	bl	1d0f8 <__assert_fail@plt+0xbdd8>
   1ebb4:	ldr	r0, [sp, #20]
   1ebb8:	cmp	r0, #0
   1ebbc:	beq	1ec20 <__assert_fail@plt+0xd900>
   1ebc0:	ldr	r1, [sp, #24]
   1ebc4:	ldr	r5, [r1]
   1ebc8:	cmp	r4, #0
   1ebcc:	beq	1ec2c <__assert_fail@plt+0xd90c>
   1ebd0:	ldr	r1, [r4, #4]
   1ebd4:	str	r0, [r4, #4]
   1ebd8:	str	r1, [sp, #20]
   1ebdc:	ldr	r0, [r4]
   1ebe0:	ldr	r1, [sp, #16]
   1ebe4:	str	r1, [r4]
   1ebe8:	str	r0, [sp, #16]
   1ebec:	ldr	r1, [r4, #8]
   1ebf0:	ldr	r2, [sp, #24]
   1ebf4:	str	r2, [r4, #8]
   1ebf8:	str	r1, [sp, #24]
   1ebfc:	cmp	r0, #0
   1ec00:	beq	1ec14 <__assert_fail@plt+0xd8f4>
   1ec04:	lsl	r1, r0, #2
   1ec08:	ldr	r2, [r6]
   1ec0c:	ldr	r0, [sp, #24]
   1ec10:	blx	r2
   1ec14:	mov	r0, r5
   1ec18:	sub	sp, fp, #28
   1ec1c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ec20:	mov	r5, #0
   1ec24:	cmp	r4, #0
   1ec28:	bne	1ebd0 <__assert_fail@plt+0xd8b0>
   1ec2c:	ldr	r0, [sp, #16]
   1ec30:	cmp	r0, #0
   1ec34:	bne	1ec04 <__assert_fail@plt+0xd8e4>
   1ec38:	b	1ec14 <__assert_fail@plt+0xd8f4>
   1ec3c:	push	{fp, lr}
   1ec40:	mov	fp, sp
   1ec44:	sub	sp, sp, #8
   1ec48:	mov	ip, #0
   1ec4c:	str	ip, [sp]
   1ec50:	bl	1eae8 <__assert_fail@plt+0xd7c8>
   1ec54:	mov	sp, fp
   1ec58:	pop	{fp, pc}
   1ec5c:	push	{fp, lr}
   1ec60:	mov	fp, sp
   1ec64:	sub	sp, sp, #8
   1ec68:	mov	ip, #2
   1ec6c:	str	ip, [sp]
   1ec70:	bl	1eae8 <__assert_fail@plt+0xd7c8>
   1ec74:	mov	sp, fp
   1ec78:	pop	{fp, pc}
   1ec7c:	push	{fp, lr}
   1ec80:	mov	fp, sp
   1ec84:	sub	sp, sp, #8
   1ec88:	mov	r3, r2
   1ec8c:	mov	r2, r1
   1ec90:	mov	r1, #1
   1ec94:	str	r1, [sp]
   1ec98:	mov	r1, #0
   1ec9c:	bl	1eae8 <__assert_fail@plt+0xd7c8>
   1eca0:	mov	sp, fp
   1eca4:	pop	{fp, pc}
   1eca8:	push	{fp, lr}
   1ecac:	mov	fp, sp
   1ecb0:	sub	sp, sp, #8
   1ecb4:	mov	r3, r2
   1ecb8:	mov	r2, r1
   1ecbc:	mov	r1, #0
   1ecc0:	str	r1, [sp]
   1ecc4:	mov	r1, #0
   1ecc8:	bl	1eae8 <__assert_fail@plt+0xd7c8>
   1eccc:	mov	sp, fp
   1ecd0:	pop	{fp, pc}
   1ecd4:	push	{fp, lr}
   1ecd8:	mov	fp, sp
   1ecdc:	sub	sp, sp, #8
   1ece0:	mov	r3, r2
   1ece4:	mov	r2, r1
   1ece8:	mov	r1, #2
   1ecec:	str	r1, [sp]
   1ecf0:	mov	r1, #0
   1ecf4:	bl	1eae8 <__assert_fail@plt+0xd7c8>
   1ecf8:	mov	sp, fp
   1ecfc:	pop	{fp, pc}
   1ed00:	push	{fp, lr}
   1ed04:	mov	fp, sp
   1ed08:	sub	sp, sp, #8
   1ed0c:	mov	r3, r2
   1ed10:	mov	r2, r1
   1ed14:	mov	r1, r0
   1ed18:	mov	r0, #1
   1ed1c:	str	r0, [sp]
   1ed20:	mov	r0, #0
   1ed24:	bl	1eae8 <__assert_fail@plt+0xd7c8>
   1ed28:	mov	sp, fp
   1ed2c:	pop	{fp, pc}
   1ed30:	push	{fp, lr}
   1ed34:	mov	fp, sp
   1ed38:	sub	sp, sp, #8
   1ed3c:	mov	r3, r2
   1ed40:	mov	r2, r1
   1ed44:	mov	r1, r0
   1ed48:	mov	r0, #0
   1ed4c:	str	r0, [sp]
   1ed50:	mov	r0, #0
   1ed54:	bl	1eae8 <__assert_fail@plt+0xd7c8>
   1ed58:	mov	sp, fp
   1ed5c:	pop	{fp, pc}
   1ed60:	push	{fp, lr}
   1ed64:	mov	fp, sp
   1ed68:	sub	sp, sp, #8
   1ed6c:	mov	r3, r2
   1ed70:	mov	r2, r1
   1ed74:	mov	r1, r0
   1ed78:	mov	r0, #2
   1ed7c:	str	r0, [sp]
   1ed80:	mov	r0, #0
   1ed84:	bl	1eae8 <__assert_fail@plt+0xd7c8>
   1ed88:	mov	sp, fp
   1ed8c:	pop	{fp, pc}
   1ed90:	push	{fp, lr}
   1ed94:	mov	fp, sp
   1ed98:	sub	sp, sp, #8
   1ed9c:	mov	r2, r0
   1eda0:	mov	r0, #1
   1eda4:	mov	r3, r1
   1eda8:	mov	r1, #0
   1edac:	str	r0, [sp]
   1edb0:	mov	r0, #0
   1edb4:	bl	1eae8 <__assert_fail@plt+0xd7c8>
   1edb8:	mov	sp, fp
   1edbc:	pop	{fp, pc}
   1edc0:	push	{fp, lr}
   1edc4:	mov	fp, sp
   1edc8:	sub	sp, sp, #8
   1edcc:	mov	r2, r0
   1edd0:	mov	r0, #0
   1edd4:	mov	r3, r1
   1edd8:	mov	r1, #0
   1eddc:	str	r0, [sp]
   1ede0:	mov	r0, #0
   1ede4:	bl	1eae8 <__assert_fail@plt+0xd7c8>
   1ede8:	mov	sp, fp
   1edec:	pop	{fp, pc}
   1edf0:	push	{fp, lr}
   1edf4:	mov	fp, sp
   1edf8:	sub	sp, sp, #8
   1edfc:	mov	r2, r0
   1ee00:	mov	r0, #2
   1ee04:	mov	r3, r1
   1ee08:	mov	r1, #0
   1ee0c:	str	r0, [sp]
   1ee10:	mov	r0, #0
   1ee14:	bl	1eae8 <__assert_fail@plt+0xd7c8>
   1ee18:	mov	sp, fp
   1ee1c:	pop	{fp, pc}
   1ee20:	push	{fp, lr}
   1ee24:	mov	fp, sp
   1ee28:	sub	sp, sp, #8
   1ee2c:	mov	r3, r2
   1ee30:	mov	r2, r1
   1ee34:	mov	r1, r0
   1ee38:	mov	r0, #0
   1ee3c:	str	r0, [sp]
   1ee40:	mov	r0, #0
   1ee44:	bl	1eae8 <__assert_fail@plt+0xd7c8>
   1ee48:	mov	sp, fp
   1ee4c:	pop	{fp, pc}
   1ee50:	push	{fp, lr}
   1ee54:	mov	fp, sp
   1ee58:	sub	sp, sp, #8
   1ee5c:	mov	r3, r2
   1ee60:	mov	r2, r1
   1ee64:	mov	r1, #2
   1ee68:	str	r1, [sp]
   1ee6c:	mov	r1, #0
   1ee70:	bl	1eae8 <__assert_fail@plt+0xd7c8>
   1ee74:	cmp	r0, #0
   1ee78:	moveq	sp, fp
   1ee7c:	popeq	{fp, pc}
   1ee80:	movw	r0, #2977	; 0xba1
   1ee84:	movw	r1, #1996	; 0x7cc
   1ee88:	movw	r3, #3065	; 0xbf9
   1ee8c:	movw	r2, #2647	; 0xa57
   1ee90:	movt	r0, #3
   1ee94:	movt	r1, #3
   1ee98:	movt	r3, #3
   1ee9c:	bl	11320 <__assert_fail@plt>
   1eea0:	push	{fp, lr}
   1eea4:	mov	fp, sp
   1eea8:	sub	sp, sp, #8
   1eeac:	mov	r2, r0
   1eeb0:	mov	r0, #2
   1eeb4:	mov	r3, r1
   1eeb8:	mov	r1, #0
   1eebc:	str	r0, [sp]
   1eec0:	mov	r0, #0
   1eec4:	bl	1eae8 <__assert_fail@plt+0xd7c8>
   1eec8:	clz	r0, r0
   1eecc:	lsr	r0, r0, #5
   1eed0:	mov	sp, fp
   1eed4:	pop	{fp, pc}
   1eed8:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1eedc:	add	fp, sp, #24
   1eee0:	sub	sp, sp, #16
   1eee4:	mov	r5, r0
   1eee8:	movw	r0, #1992	; 0x7c8
   1eeec:	mov	r6, r1
   1eef0:	mov	r4, #0
   1eef4:	cmp	r2, #0
   1eef8:	movt	r0, #3
   1eefc:	str	r0, [sp, #12]
   1ef00:	str	r4, [sp, #8]
   1ef04:	str	r4, [sp, #4]
   1ef08:	beq	1efc0 <__assert_fail@plt+0xdca0>
   1ef0c:	movw	r0, #12572	; 0x311c
   1ef10:	mov	r8, #1
   1ef14:	mov	r7, r2
   1ef18:	movt	r0, #4
   1ef1c:	str	r8, [sp, #8]
   1ef20:	ldr	r1, [r0]
   1ef24:	mov	r0, #4
   1ef28:	blx	r1
   1ef2c:	str	r0, [sp, #12]
   1ef30:	str	r8, [sp, #4]
   1ef34:	str	r7, [r0]
   1ef38:	add	r0, sp, #4
   1ef3c:	mov	r1, r6
   1ef40:	mov	r2, r0
   1ef44:	bl	1eff0 <__assert_fail@plt+0xdcd0>
   1ef48:	ldr	r0, [sp, #8]
   1ef4c:	cmp	r0, #0
   1ef50:	beq	1ef5c <__assert_fail@plt+0xdc3c>
   1ef54:	ldr	r0, [sp, #12]
   1ef58:	ldr	r4, [r0]
   1ef5c:	cmp	r5, #0
   1ef60:	beq	1efe0 <__assert_fail@plt+0xdcc0>
   1ef64:	ldr	r0, [r5, #4]
   1ef68:	ldr	r1, [sp, #8]
   1ef6c:	str	r0, [sp, #8]
   1ef70:	str	r1, [r5, #4]
   1ef74:	ldr	r0, [r5]
   1ef78:	ldr	r1, [sp, #4]
   1ef7c:	str	r0, [sp, #4]
   1ef80:	str	r1, [r5]
   1ef84:	ldr	r1, [r5, #8]
   1ef88:	ldr	r2, [sp, #12]
   1ef8c:	str	r1, [sp, #12]
   1ef90:	str	r2, [r5, #8]
   1ef94:	cmp	r0, #0
   1ef98:	beq	1efb4 <__assert_fail@plt+0xdc94>
   1ef9c:	movw	r1, #12580	; 0x3124
   1efa0:	movt	r1, #4
   1efa4:	ldr	r2, [r1]
   1efa8:	lsl	r1, r0, #2
   1efac:	ldr	r0, [sp, #12]
   1efb0:	blx	r2
   1efb4:	mov	r0, r4
   1efb8:	sub	sp, fp, #24
   1efbc:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1efc0:	add	r0, sp, #4
   1efc4:	mov	r4, #0
   1efc8:	mov	r1, r6
   1efcc:	mov	r2, r0
   1efd0:	str	r4, [sp, #8]
   1efd4:	bl	1eff0 <__assert_fail@plt+0xdcd0>
   1efd8:	cmp	r5, #0
   1efdc:	bne	1ef64 <__assert_fail@plt+0xdc44>
   1efe0:	ldr	r0, [sp, #4]
   1efe4:	cmp	r0, #0
   1efe8:	bne	1ef9c <__assert_fail@plt+0xdc7c>
   1efec:	b	1efb4 <__assert_fail@plt+0xdc94>
   1eff0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1eff4:	add	fp, sp, #28
   1eff8:	sub	sp, sp, #52	; 0x34
   1effc:	ldr	r8, [r1, #4]
   1f000:	mov	r9, r2
   1f004:	mov	r6, r0
   1f008:	cmp	r8, #0
   1f00c:	beq	1f2f8 <__assert_fail@plt+0xdfd8>
   1f010:	ldr	r0, [r9, #4]
   1f014:	mov	sl, r1
   1f018:	cmp	r0, #0
   1f01c:	beq	1f34c <__assert_fail@plt+0xe02c>
   1f020:	movw	r0, #1992	; 0x7c8
   1f024:	add	r2, sp, #40	; 0x28
   1f028:	mov	r1, #0
   1f02c:	movt	r0, #3
   1f030:	cmp	r2, sl
   1f034:	str	r0, [sp, #48]	; 0x30
   1f038:	str	r1, [sp, #44]	; 0x2c
   1f03c:	str	r0, [sp, #36]	; 0x24
   1f040:	str	r1, [sp, #32]
   1f044:	str	r1, [sp, #40]	; 0x28
   1f048:	str	r1, [sp, #28]
   1f04c:	beq	1fdd4 <__assert_fail@plt+0xeab4>
   1f050:	cmp	r8, #0
   1f054:	mov	r4, r8
   1f058:	str	r6, [sp, #24]
   1f05c:	rsbmi	r4, r8, #0
   1f060:	cmp	r4, #1
   1f064:	blt	1f208 <__assert_fail@plt+0xdee8>
   1f068:	movw	r0, #12572	; 0x311c
   1f06c:	movt	r0, #4
   1f070:	ldr	r1, [r0]
   1f074:	lsl	r0, r4, #2
   1f078:	blx	r1
   1f07c:	str	r0, [sp, #48]	; 0x30
   1f080:	str	r4, [sp, #40]	; 0x28
   1f084:	mov	r2, #0
   1f088:	str	r9, [sp, #20]
   1f08c:	ldr	r1, [sp, #44]	; 0x2c
   1f090:	cmp	r1, #0
   1f094:	rsbmi	r1, r1, #0
   1f098:	cmp	r1, r4
   1f09c:	movgt	r1, #0
   1f0a0:	strgt	r1, [sp, #44]	; 0x2c
   1f0a4:	cmp	r4, #4
   1f0a8:	ldr	r1, [sl, #8]
   1f0ac:	bcc	1f190 <__assert_fail@plt+0xde70>
   1f0b0:	add	r3, r1, r4, lsl #2
   1f0b4:	cmp	r0, r3
   1f0b8:	bcs	1f0c8 <__assert_fail@plt+0xdda8>
   1f0bc:	add	r3, r0, r4, lsl #2
   1f0c0:	cmp	r3, r1
   1f0c4:	bhi	1f190 <__assert_fail@plt+0xde70>
   1f0c8:	bic	r2, r4, #-2147483645	; 0x80000003
   1f0cc:	mov	r3, #1
   1f0d0:	mov	r8, #0
   1f0d4:	str	sl, [sp, #16]
   1f0d8:	str	r4, [sp, #8]
   1f0dc:	sub	r6, r2, #4
   1f0e0:	add	r3, r3, r6, lsr #2
   1f0e4:	cmp	r6, #12
   1f0e8:	and	r7, r3, #3
   1f0ec:	str	r7, [sp, #12]
   1f0f0:	bcc	1f158 <__assert_fail@plt+0xde38>
   1f0f4:	ldr	r7, [sp, #12]
   1f0f8:	mov	r5, #0
   1f0fc:	mov	lr, #48	; 0x30
   1f100:	mov	r8, #0
   1f104:	sub	sl, r3, r7
   1f108:	add	r4, r1, r5
   1f10c:	add	r7, r0, r5
   1f110:	add	r5, r5, #64	; 0x40
   1f114:	subs	sl, sl, #4
   1f118:	add	r8, r8, #16
   1f11c:	mov	r9, r4
   1f120:	mov	r3, r7
   1f124:	add	ip, r4, #16
   1f128:	add	r6, r7, #16
   1f12c:	add	r7, r7, #32
   1f130:	vld1.32	{d16-d17}, [r9], lr
   1f134:	vst1.32	{d16-d17}, [r3], lr
   1f138:	vld1.32	{d16-d17}, [ip]
   1f13c:	vst1.32	{d16-d17}, [r6]
   1f140:	add	r6, r4, #32
   1f144:	vld1.32	{d16-d17}, [r6]
   1f148:	vst1.32	{d16-d17}, [r7]
   1f14c:	vld1.32	{d16-d17}, [r9]
   1f150:	vst1.32	{d16-d17}, [r3]
   1f154:	bne	1f108 <__assert_fail@plt+0xdde8>
   1f158:	ldr	r6, [sp, #12]
   1f15c:	cmp	r6, #0
   1f160:	beq	1f180 <__assert_fail@plt+0xde60>
   1f164:	add	r3, r1, r8, lsl #2
   1f168:	add	r7, r0, r8, lsl #2
   1f16c:	rsb	r6, r6, #0
   1f170:	vld1.32	{d16-d17}, [r3]!
   1f174:	adds	r6, r6, #1
   1f178:	vst1.32	{d16-d17}, [r7]!
   1f17c:	bcc	1f170 <__assert_fail@plt+0xde50>
   1f180:	ldr	r4, [sp, #8]
   1f184:	ldr	sl, [sp, #16]
   1f188:	cmp	r4, r2
   1f18c:	beq	1f200 <__assert_fail@plt+0xdee0>
   1f190:	mvn	r3, r2
   1f194:	ands	r7, r4, #3
   1f198:	add	r3, r4, r3
   1f19c:	beq	1f1b4 <__assert_fail@plt+0xde94>
   1f1a0:	ldr	r6, [r1, r2, lsl #2]
   1f1a4:	subs	r7, r7, #1
   1f1a8:	str	r6, [r0, r2, lsl #2]
   1f1ac:	add	r2, r2, #1
   1f1b0:	bne	1f1a0 <__assert_fail@plt+0xde80>
   1f1b4:	cmp	r3, #3
   1f1b8:	bcc	1f200 <__assert_fail@plt+0xdee0>
   1f1bc:	sub	r3, r4, r2
   1f1c0:	lsl	r2, r2, #2
   1f1c4:	mov	r7, r0
   1f1c8:	add	r6, r1, #16
   1f1cc:	ldr	r5, [r1, r2]!
   1f1d0:	add	r4, r7, #16
   1f1d4:	subs	r3, r3, #4
   1f1d8:	str	r5, [r7, r2]!
   1f1dc:	ldr	r5, [r1, #4]
   1f1e0:	str	r5, [r7, #4]
   1f1e4:	ldr	r5, [r1, #8]
   1f1e8:	str	r5, [r7, #8]
   1f1ec:	ldr	r1, [r1, #12]
   1f1f0:	str	r1, [r7, #12]
   1f1f4:	mov	r1, r6
   1f1f8:	mov	r7, r4
   1f1fc:	bne	1f1c8 <__assert_fail@plt+0xdea8>
   1f200:	ldr	r8, [sl, #4]
   1f204:	ldr	r9, [sp, #20]
   1f208:	rsb	r1, r8, #0
   1f20c:	cmp	r8, #0
   1f210:	movpl	r1, r8
   1f214:	cmp	r1, #0
   1f218:	str	r1, [sp, #44]	; 0x2c
   1f21c:	ble	1fdd8 <__assert_fail@plt+0xeab8>
   1f220:	ldr	r2, [r0]
   1f224:	mov	r1, #31
   1f228:	cmp	r2, #0
   1f22c:	bne	1f248 <__assert_fail@plt+0xdf28>
   1f230:	add	r0, r0, #4
   1f234:	mov	r1, #31
   1f238:	ldr	r2, [r0], #4
   1f23c:	add	r1, r1, #32
   1f240:	cmp	r2, #0
   1f244:	beq	1f238 <__assert_fail@plt+0xdf18>
   1f248:	rsb	r0, r2, #0
   1f24c:	and	r2, r2, r0
   1f250:	mov	r0, #0
   1f254:	cmp	r0, r2, lsr #24
   1f258:	bne	1f270 <__assert_fail@plt+0xdf50>
   1f25c:	mov	r0, #0
   1f260:	lsl	r2, r2, #8
   1f264:	add	r0, r0, #8
   1f268:	cmp	r2, #16777216	; 0x1000000
   1f26c:	bcc	1f260 <__assert_fail@plt+0xdf40>
   1f270:	cmp	r2, #0
   1f274:	bmi	1f288 <__assert_fail@plt+0xdf68>
   1f278:	lsl	r2, r2, #1
   1f27c:	add	r0, r0, #1
   1f280:	cmn	r2, #1
   1f284:	bgt	1f278 <__assert_fail@plt+0xdf58>
   1f288:	sub	r8, r1, r0
   1f28c:	add	r0, sp, #40	; 0x28
   1f290:	mov	r3, #2
   1f294:	mov	r1, r0
   1f298:	mov	r2, r8
   1f29c:	bl	1dcc8 <__assert_fail@plt+0xc9a8>
   1f2a0:	add	r0, sp, #28
   1f2a4:	cmp	r0, r9
   1f2a8:	beq	1f39c <__assert_fail@plt+0xe07c>
   1f2ac:	ldr	r4, [r9, #4]
   1f2b0:	ldr	r1, [sp, #28]
   1f2b4:	cmp	r4, #0
   1f2b8:	rsbmi	r4, r4, #0
   1f2bc:	cmp	r4, r1
   1f2c0:	ble	1f3a4 <__assert_fail@plt+0xe084>
   1f2c4:	cmp	r4, #1
   1f2c8:	mov	r6, r4
   1f2cc:	movle	r6, #1
   1f2d0:	cmp	r1, #0
   1f2d4:	beq	1f3d0 <__assert_fail@plt+0xe0b0>
   1f2d8:	movw	r0, #12576	; 0x3120
   1f2dc:	lsl	r1, r1, #2
   1f2e0:	lsl	r2, r6, #2
   1f2e4:	movt	r0, #4
   1f2e8:	ldr	r3, [r0]
   1f2ec:	ldr	r0, [sp, #36]	; 0x24
   1f2f0:	blx	r3
   1f2f4:	b	1f3e4 <__assert_fail@plt+0xe0c4>
   1f2f8:	ldr	sl, [r9, #4]
   1f2fc:	cmp	r6, r9
   1f300:	beq	1fa6c <__assert_fail@plt+0xe74c>
   1f304:	ldr	r1, [r6]
   1f308:	cmp	sl, #0
   1f30c:	rsbmi	sl, sl, #0
   1f310:	cmp	sl, r1
   1f314:	ble	1f3b4 <__assert_fail@plt+0xe094>
   1f318:	cmp	sl, #1
   1f31c:	mov	r4, sl
   1f320:	movle	r4, #1
   1f324:	cmp	r1, #0
   1f328:	beq	1f8b4 <__assert_fail@plt+0xe594>
   1f32c:	movw	r0, #12576	; 0x3120
   1f330:	lsl	r1, r1, #2
   1f334:	lsl	r2, r4, #2
   1f338:	movt	r0, #4
   1f33c:	ldr	r3, [r0]
   1f340:	ldr	r0, [r6, #8]
   1f344:	blx	r3
   1f348:	b	1f8c8 <__assert_fail@plt+0xe5a8>
   1f34c:	cmp	r6, sl
   1f350:	beq	1fc28 <__assert_fail@plt+0xe908>
   1f354:	ldr	r1, [r6]
   1f358:	cmp	r8, #0
   1f35c:	rsbmi	r8, r8, #0
   1f360:	cmp	r8, r1
   1f364:	ble	1f3bc <__assert_fail@plt+0xe09c>
   1f368:	cmp	r8, #1
   1f36c:	mov	r4, r8
   1f370:	movle	r4, #1
   1f374:	cmp	r1, #0
   1f378:	beq	1fa80 <__assert_fail@plt+0xe760>
   1f37c:	movw	r0, #12576	; 0x3120
   1f380:	lsl	r1, r1, #2
   1f384:	lsl	r2, r4, #2
   1f388:	movt	r0, #4
   1f38c:	ldr	r3, [r0]
   1f390:	ldr	r0, [r6, #8]
   1f394:	blx	r3
   1f398:	b	1fa94 <__assert_fail@plt+0xe774>
   1f39c:	ldr	r0, [sp, #32]
   1f3a0:	b	1f574 <__assert_fail@plt+0xe254>
   1f3a4:	ldr	r0, [sp, #36]	; 0x24
   1f3a8:	cmp	r4, #1
   1f3ac:	bge	1f40c <__assert_fail@plt+0xe0ec>
   1f3b0:	b	1f56c <__assert_fail@plt+0xe24c>
   1f3b4:	ldr	r0, [r6, #8]
   1f3b8:	b	1f8fc <__assert_fail@plt+0xe5dc>
   1f3bc:	ldr	r0, [r6, #8]
   1f3c0:	mov	r4, r6
   1f3c4:	cmp	r8, #1
   1f3c8:	bge	1fac4 <__assert_fail@plt+0xe7a4>
   1f3cc:	b	1fc1c <__assert_fail@plt+0xe8fc>
   1f3d0:	movw	r0, #12572	; 0x311c
   1f3d4:	movt	r0, #4
   1f3d8:	ldr	r1, [r0]
   1f3dc:	lsl	r0, r6, #2
   1f3e0:	blx	r1
   1f3e4:	str	r0, [sp, #36]	; 0x24
   1f3e8:	str	r6, [sp, #28]
   1f3ec:	ldr	r1, [sp, #32]
   1f3f0:	cmp	r1, #0
   1f3f4:	rsbmi	r1, r1, #0
   1f3f8:	cmp	r1, r6
   1f3fc:	movgt	r1, #0
   1f400:	strgt	r1, [sp, #32]
   1f404:	cmp	r4, #1
   1f408:	blt	1f56c <__assert_fail@plt+0xe24c>
   1f40c:	ldr	r1, [r9, #8]
   1f410:	mov	r2, #0
   1f414:	cmp	r4, #4
   1f418:	bcc	1f500 <__assert_fail@plt+0xe1e0>
   1f41c:	add	r3, r1, r4, lsl #2
   1f420:	cmp	r0, r3
   1f424:	addcc	r3, r0, r4, lsl #2
   1f428:	cmpcc	r1, r3
   1f42c:	bcc	1f500 <__assert_fail@plt+0xe1e0>
   1f430:	bic	r2, r4, #-2147483645	; 0x80000003
   1f434:	mov	r3, #1
   1f438:	str	r9, [sp, #20]
   1f43c:	mov	r9, #0
   1f440:	str	r8, [sp, #12]
   1f444:	str	r4, [sp, #8]
   1f448:	sub	r6, r2, #4
   1f44c:	add	r3, r3, r6, lsr #2
   1f450:	cmp	r6, #12
   1f454:	and	r7, r3, #3
   1f458:	str	r7, [sp, #16]
   1f45c:	bcc	1f4c4 <__assert_fail@plt+0xe1a4>
   1f460:	ldr	r7, [sp, #16]
   1f464:	mov	r5, #0
   1f468:	mov	lr, #48	; 0x30
   1f46c:	mov	r9, #0
   1f470:	sub	r8, r3, r7
   1f474:	add	r7, r1, r5
   1f478:	add	r4, r0, r5
   1f47c:	add	r5, r5, #64	; 0x40
   1f480:	subs	r8, r8, #4
   1f484:	add	r9, r9, #16
   1f488:	mov	r6, r7
   1f48c:	mov	ip, r4
   1f490:	add	sl, r7, #16
   1f494:	add	r3, r4, #16
   1f498:	vld1.32	{d16-d17}, [r6], lr
   1f49c:	vst1.32	{d16-d17}, [ip], lr
   1f4a0:	vld1.32	{d16-d17}, [sl]
   1f4a4:	vst1.32	{d16-d17}, [r3]
   1f4a8:	add	r3, r7, #32
   1f4ac:	vld1.32	{d16-d17}, [r3]
   1f4b0:	add	r3, r4, #32
   1f4b4:	vst1.32	{d16-d17}, [r3]
   1f4b8:	vld1.32	{d16-d17}, [r6]
   1f4bc:	vst1.32	{d16-d17}, [ip]
   1f4c0:	bne	1f474 <__assert_fail@plt+0xe154>
   1f4c4:	ldr	r7, [sp, #16]
   1f4c8:	cmp	r7, #0
   1f4cc:	beq	1f4ec <__assert_fail@plt+0xe1cc>
   1f4d0:	add	r3, r1, r9, lsl #2
   1f4d4:	add	r6, r0, r9, lsl #2
   1f4d8:	rsb	r5, r7, #0
   1f4dc:	vld1.32	{d16-d17}, [r3]!
   1f4e0:	adds	r5, r5, #1
   1f4e4:	vst1.32	{d16-d17}, [r6]!
   1f4e8:	bcc	1f4dc <__assert_fail@plt+0xe1bc>
   1f4ec:	ldr	r4, [sp, #8]
   1f4f0:	ldr	r9, [sp, #20]
   1f4f4:	ldr	r8, [sp, #12]
   1f4f8:	cmp	r4, r2
   1f4fc:	beq	1f56c <__assert_fail@plt+0xe24c>
   1f500:	mvn	r3, r2
   1f504:	ands	r6, r4, #3
   1f508:	add	r3, r4, r3
   1f50c:	beq	1f524 <__assert_fail@plt+0xe204>
   1f510:	ldr	r7, [r1, r2, lsl #2]
   1f514:	subs	r6, r6, #1
   1f518:	str	r7, [r0, r2, lsl #2]
   1f51c:	add	r2, r2, #1
   1f520:	bne	1f510 <__assert_fail@plt+0xe1f0>
   1f524:	cmp	r3, #3
   1f528:	bcc	1f56c <__assert_fail@plt+0xe24c>
   1f52c:	sub	r3, r4, r2
   1f530:	lsl	r2, r2, #2
   1f534:	add	r7, r1, #16
   1f538:	ldr	r6, [r1, r2]!
   1f53c:	add	r5, r0, #16
   1f540:	subs	r3, r3, #4
   1f544:	str	r6, [r0, r2]!
   1f548:	ldr	r6, [r1, #4]
   1f54c:	str	r6, [r0, #4]
   1f550:	ldr	r6, [r1, #8]
   1f554:	str	r6, [r0, #8]
   1f558:	ldr	r1, [r1, #12]
   1f55c:	str	r1, [r0, #12]
   1f560:	mov	r1, r7
   1f564:	mov	r0, r5
   1f568:	bne	1f534 <__assert_fail@plt+0xe214>
   1f56c:	ldr	r0, [r9, #4]
   1f570:	str	r0, [sp, #32]
   1f574:	ldr	sl, [sp, #24]
   1f578:	cmp	r0, #0
   1f57c:	rsbmi	r0, r0, #0
   1f580:	cmp	r0, #0
   1f584:	str	r0, [sp, #32]
   1f588:	ble	1fdd8 <__assert_fail@plt+0xeab8>
   1f58c:	ldr	r2, [sp, #36]	; 0x24
   1f590:	mov	r0, #31
   1f594:	ldr	r1, [r2]
   1f598:	cmp	r1, #0
   1f59c:	bne	1f5b8 <__assert_fail@plt+0xe298>
   1f5a0:	add	r2, r2, #4
   1f5a4:	mov	r0, #31
   1f5a8:	ldr	r1, [r2], #4
   1f5ac:	add	r0, r0, #32
   1f5b0:	cmp	r1, #0
   1f5b4:	beq	1f5a8 <__assert_fail@plt+0xe288>
   1f5b8:	rsb	r2, r1, #0
   1f5bc:	and	r2, r1, r2
   1f5c0:	mov	r1, #0
   1f5c4:	cmp	r1, r2, lsr #24
   1f5c8:	bne	1f5e0 <__assert_fail@plt+0xe2c0>
   1f5cc:	mov	r1, #0
   1f5d0:	lsl	r2, r2, #8
   1f5d4:	add	r1, r1, #8
   1f5d8:	cmp	r2, #16777216	; 0x1000000
   1f5dc:	bcc	1f5d0 <__assert_fail@plt+0xe2b0>
   1f5e0:	cmp	r2, #0
   1f5e4:	bmi	1f5f8 <__assert_fail@plt+0xe2d8>
   1f5e8:	lsl	r2, r2, #1
   1f5ec:	add	r1, r1, #1
   1f5f0:	cmn	r2, #1
   1f5f4:	bgt	1f5e8 <__assert_fail@plt+0xe2c8>
   1f5f8:	sub	r9, r0, r1
   1f5fc:	add	r0, sp, #28
   1f600:	mov	r3, #2
   1f604:	mov	r4, #2
   1f608:	mov	r1, r0
   1f60c:	mov	r2, r9
   1f610:	bl	1dcc8 <__assert_fail@plt+0xc9a8>
   1f614:	ldr	r0, [sp, #32]
   1f618:	ldr	r1, [sp, #44]	; 0x2c
   1f61c:	cmp	r8, r9
   1f620:	movcc	r9, r8
   1f624:	cmp	r1, r0
   1f628:	bge	1f654 <__assert_fail@plt+0xe334>
   1f62c:	str	r1, [sp, #32]
   1f630:	str	r0, [sp, #44]	; 0x2c
   1f634:	ldr	r0, [sp, #40]	; 0x28
   1f638:	ldr	r1, [sp, #48]	; 0x30
   1f63c:	ldr	r2, [sp, #28]
   1f640:	ldr	r3, [sp, #36]	; 0x24
   1f644:	str	r2, [sp, #40]	; 0x28
   1f648:	str	r0, [sp, #28]
   1f64c:	str	r3, [sp, #48]	; 0x30
   1f650:	str	r1, [sp, #36]	; 0x24
   1f654:	add	r1, sp, #40	; 0x28
   1f658:	add	r3, sp, #28
   1f65c:	mov	r0, #0
   1f660:	str	r4, [sp]
   1f664:	mov	r2, r1
   1f668:	bl	1d0f8 <__assert_fail@plt+0xbdd8>
   1f66c:	ldr	r0, [sp, #44]	; 0x2c
   1f670:	cmp	r0, #0
   1f674:	beq	1f828 <__assert_fail@plt+0xe508>
   1f678:	cmp	r0, #1
   1f67c:	blt	1fdd8 <__assert_fail@plt+0xeab8>
   1f680:	add	r8, sp, #40	; 0x28
   1f684:	add	r4, sp, #28
   1f688:	ldr	r2, [sp, #48]	; 0x30
   1f68c:	mov	r0, #31
   1f690:	ldr	r1, [r2]
   1f694:	cmp	r1, #0
   1f698:	bne	1f6b4 <__assert_fail@plt+0xe394>
   1f69c:	add	r2, r2, #4
   1f6a0:	mov	r0, #31
   1f6a4:	ldr	r1, [r2], #4
   1f6a8:	add	r0, r0, #32
   1f6ac:	cmp	r1, #0
   1f6b0:	beq	1f6a4 <__assert_fail@plt+0xe384>
   1f6b4:	rsb	r2, r1, #0
   1f6b8:	and	r2, r1, r2
   1f6bc:	mov	r1, #0
   1f6c0:	cmp	r1, r2, lsr #24
   1f6c4:	bne	1f6dc <__assert_fail@plt+0xe3bc>
   1f6c8:	mov	r1, #0
   1f6cc:	lsl	r2, r2, #8
   1f6d0:	add	r1, r1, #8
   1f6d4:	cmp	r2, #16777216	; 0x1000000
   1f6d8:	bcc	1f6cc <__assert_fail@plt+0xe3ac>
   1f6dc:	cmp	r2, #0
   1f6e0:	bmi	1f6f4 <__assert_fail@plt+0xe3d4>
   1f6e4:	lsl	r2, r2, #1
   1f6e8:	add	r1, r1, #1
   1f6ec:	cmn	r2, #1
   1f6f0:	bgt	1f6e4 <__assert_fail@plt+0xe3c4>
   1f6f4:	sub	r2, r0, r1
   1f6f8:	mov	r0, r8
   1f6fc:	mov	r1, r8
   1f700:	mov	r3, #2
   1f704:	bl	1dcc8 <__assert_fail@plt+0xc9a8>
   1f708:	ldr	r5, [sp, #32]
   1f70c:	ldr	r1, [sp, #44]	; 0x2c
   1f710:	cmp	r1, r5
   1f714:	bne	1f758 <__assert_fail@plt+0xe438>
   1f718:	mov	ip, r4
   1f71c:	cmp	r1, #0
   1f720:	bmi	1f778 <__assert_fail@plt+0xe458>
   1f724:	ldr	r3, [sp, #36]	; 0x24
   1f728:	ldr	r2, [sp, #48]	; 0x30
   1f72c:	mov	r0, r1
   1f730:	sub	r4, r3, #4
   1f734:	subs	r7, r0, #1
   1f738:	blt	1f7f8 <__assert_fail@plt+0xe4d8>
   1f73c:	ldr	r6, [r4, r0, lsl #2]
   1f740:	add	r0, r2, r0, lsl #2
   1f744:	ldr	r0, [r0, #-4]
   1f748:	cmp	r0, r6
   1f74c:	mov	r0, r7
   1f750:	beq	1f734 <__assert_fail@plt+0xe414>
   1f754:	b	1f7a8 <__assert_fail@plt+0xe488>
   1f758:	bge	1f768 <__assert_fail@plt+0xe448>
   1f75c:	ldr	r3, [sp, #36]	; 0x24
   1f760:	ldr	r2, [sp, #48]	; 0x30
   1f764:	b	1f7b0 <__assert_fail@plt+0xe490>
   1f768:	mov	r1, r5
   1f76c:	cmp	r1, #1
   1f770:	bne	1f7d8 <__assert_fail@plt+0xe4b8>
   1f774:	b	1fc3c <__assert_fail@plt+0xe91c>
   1f778:	ldr	r3, [sp, #36]	; 0x24
   1f77c:	ldr	r2, [sp, #48]	; 0x30
   1f780:	rsb	r7, r1, #0
   1f784:	sub	r4, r3, #4
   1f788:	subs	r0, r7, #1
   1f78c:	blt	1f7f8 <__assert_fail@plt+0xe4d8>
   1f790:	ldr	r6, [r4, r7, lsl #2]
   1f794:	add	r7, r2, r7, lsl #2
   1f798:	ldr	r7, [r7, #-4]
   1f79c:	cmp	r6, r7
   1f7a0:	mov	r7, r0
   1f7a4:	beq	1f788 <__assert_fail@plt+0xe468>
   1f7a8:	mov	r4, ip
   1f7ac:	bhi	1f7d0 <__assert_fail@plt+0xe4b0>
   1f7b0:	str	r1, [sp, #32]
   1f7b4:	str	r2, [sp, #36]	; 0x24
   1f7b8:	str	r5, [sp, #44]	; 0x2c
   1f7bc:	str	r3, [sp, #48]	; 0x30
   1f7c0:	ldr	r0, [sp, #40]	; 0x28
   1f7c4:	ldr	r2, [sp, #28]
   1f7c8:	str	r2, [sp, #40]	; 0x28
   1f7cc:	str	r0, [sp, #28]
   1f7d0:	cmp	r1, #1
   1f7d4:	beq	1fc3c <__assert_fail@plt+0xe91c>
   1f7d8:	mov	r0, r8
   1f7dc:	mov	r1, r8
   1f7e0:	mov	r2, r4
   1f7e4:	bl	1c674 <__assert_fail@plt+0xb354>
   1f7e8:	ldr	r0, [sp, #44]	; 0x2c
   1f7ec:	cmp	r0, #0
   1f7f0:	bgt	1f688 <__assert_fail@plt+0xe368>
   1f7f4:	b	1fdd8 <__assert_fail@plt+0xeab8>
   1f7f8:	ldr	r0, [sl, #4]
   1f7fc:	str	r1, [sl, #4]
   1f800:	mov	r6, sl
   1f804:	str	r0, [sp, #44]	; 0x2c
   1f808:	ldr	r0, [sl]
   1f80c:	ldr	r1, [sp, #40]	; 0x28
   1f810:	str	r1, [sl]
   1f814:	str	r0, [sp, #40]	; 0x28
   1f818:	ldr	r0, [sl, #8]
   1f81c:	str	r2, [sl, #8]
   1f820:	str	r0, [sp, #48]	; 0x30
   1f824:	b	1f85c <__assert_fail@plt+0xe53c>
   1f828:	ldr	r0, [sl, #4]
   1f82c:	ldr	r1, [sp, #32]
   1f830:	mov	r6, sl
   1f834:	str	r1, [sl, #4]
   1f838:	str	r0, [sp, #32]
   1f83c:	ldr	r0, [sl]
   1f840:	ldr	r1, [sp, #28]
   1f844:	str	r1, [sl]
   1f848:	str	r0, [sp, #28]
   1f84c:	ldr	r0, [sl, #8]
   1f850:	ldr	r1, [sp, #36]	; 0x24
   1f854:	str	r1, [sl, #8]
   1f858:	str	r0, [sp, #36]	; 0x24
   1f85c:	ldr	r0, [sp, #40]	; 0x28
   1f860:	movw	r4, #12580	; 0x3124
   1f864:	movt	r4, #4
   1f868:	cmp	r0, #0
   1f86c:	beq	1f880 <__assert_fail@plt+0xe560>
   1f870:	lsl	r1, r0, #2
   1f874:	ldr	r2, [r4]
   1f878:	ldr	r0, [sp, #48]	; 0x30
   1f87c:	blx	r2
   1f880:	ldr	r0, [sp, #28]
   1f884:	cmp	r0, #0
   1f888:	beq	1f89c <__assert_fail@plt+0xe57c>
   1f88c:	lsl	r1, r0, #2
   1f890:	ldr	r2, [r4]
   1f894:	ldr	r0, [sp, #36]	; 0x24
   1f898:	blx	r2
   1f89c:	mov	r0, r6
   1f8a0:	mov	r1, r6
   1f8a4:	mov	r2, r9
   1f8a8:	bl	1cb8c <__assert_fail@plt+0xb86c>
   1f8ac:	sub	sp, fp, #28
   1f8b0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f8b4:	movw	r0, #12572	; 0x311c
   1f8b8:	movt	r0, #4
   1f8bc:	ldr	r1, [r0]
   1f8c0:	lsl	r0, r4, #2
   1f8c4:	blx	r1
   1f8c8:	str	r0, [r6, #8]
   1f8cc:	str	r4, [r6]
   1f8d0:	ldr	r1, [r6, #4]
   1f8d4:	cmp	r1, #0
   1f8d8:	rsbmi	r1, r1, #0
   1f8dc:	cmp	r1, r4
   1f8e0:	ble	1f8fc <__assert_fail@plt+0xe5dc>
   1f8e4:	mov	r1, #0
   1f8e8:	mov	r4, r6
   1f8ec:	str	r1, [r6, #4]
   1f8f0:	cmp	sl, #1
   1f8f4:	bge	1f908 <__assert_fail@plt+0xe5e8>
   1f8f8:	b	1fa60 <__assert_fail@plt+0xe740>
   1f8fc:	mov	r4, r6
   1f900:	cmp	sl, #1
   1f904:	blt	1fa60 <__assert_fail@plt+0xe740>
   1f908:	ldr	r1, [r9, #8]
   1f90c:	mov	r2, #0
   1f910:	cmp	sl, #4
   1f914:	bcc	1f9f4 <__assert_fail@plt+0xe6d4>
   1f918:	add	r3, r1, sl, lsl #2
   1f91c:	cmp	r0, r3
   1f920:	addcc	r3, r0, sl, lsl #2
   1f924:	cmpcc	r1, r3
   1f928:	bcc	1f9f4 <__assert_fail@plt+0xe6d4>
   1f92c:	bic	r2, sl, #-2147483645	; 0x80000003
   1f930:	mov	r3, #1
   1f934:	mov	lr, #0
   1f938:	str	r9, [sp, #20]
   1f93c:	str	r4, [sp, #24]
   1f940:	sub	r5, r2, #4
   1f944:	add	r3, r3, r5, lsr #2
   1f948:	cmp	r5, #12
   1f94c:	and	r7, r3, #3
   1f950:	str	r7, [sp, #16]
   1f954:	bcc	1f9bc <__assert_fail@plt+0xe69c>
   1f958:	ldr	r7, [sp, #16]
   1f95c:	mov	lr, #0
   1f960:	sub	r4, r3, r7
   1f964:	mov	r3, #0
   1f968:	add	r5, r1, r3
   1f96c:	mov	r7, #48	; 0x30
   1f970:	add	ip, r0, r3
   1f974:	add	r3, r3, #64	; 0x40
   1f978:	subs	r4, r4, #4
   1f97c:	add	lr, lr, #16
   1f980:	mov	r6, r5
   1f984:	mov	r8, ip
   1f988:	add	r9, r5, #16
   1f98c:	add	r5, r5, #32
   1f990:	vld1.32	{d16-d17}, [r6], r7
   1f994:	vst1.32	{d16-d17}, [r8], r7
   1f998:	add	r7, ip, #16
   1f99c:	vld1.32	{d16-d17}, [r9]
   1f9a0:	vst1.32	{d16-d17}, [r7]
   1f9a4:	add	r7, ip, #32
   1f9a8:	vld1.32	{d16-d17}, [r5]
   1f9ac:	vst1.32	{d16-d17}, [r7]
   1f9b0:	vld1.32	{d16-d17}, [r6]
   1f9b4:	vst1.32	{d16-d17}, [r8]
   1f9b8:	bne	1f968 <__assert_fail@plt+0xe648>
   1f9bc:	ldr	r6, [sp, #16]
   1f9c0:	cmp	r6, #0
   1f9c4:	beq	1f9e4 <__assert_fail@plt+0xe6c4>
   1f9c8:	add	r3, r1, lr, lsl #2
   1f9cc:	add	r7, r0, lr, lsl #2
   1f9d0:	rsb	r5, r6, #0
   1f9d4:	vld1.32	{d16-d17}, [r3]!
   1f9d8:	adds	r5, r5, #1
   1f9dc:	vst1.32	{d16-d17}, [r7]!
   1f9e0:	bcc	1f9d4 <__assert_fail@plt+0xe6b4>
   1f9e4:	ldr	r4, [sp, #24]
   1f9e8:	ldr	r9, [sp, #20]
   1f9ec:	cmp	sl, r2
   1f9f0:	beq	1fa60 <__assert_fail@plt+0xe740>
   1f9f4:	mvn	r3, r2
   1f9f8:	ands	r7, sl, #3
   1f9fc:	add	r3, sl, r3
   1fa00:	beq	1fa18 <__assert_fail@plt+0xe6f8>
   1fa04:	ldr	r6, [r1, r2, lsl #2]
   1fa08:	subs	r7, r7, #1
   1fa0c:	str	r6, [r0, r2, lsl #2]
   1fa10:	add	r2, r2, #1
   1fa14:	bne	1fa04 <__assert_fail@plt+0xe6e4>
   1fa18:	cmp	r3, #3
   1fa1c:	bcc	1fa60 <__assert_fail@plt+0xe740>
   1fa20:	sub	r3, sl, r2
   1fa24:	lsl	r2, r2, #2
   1fa28:	add	r7, r1, #16
   1fa2c:	ldr	r6, [r1, r2]!
   1fa30:	add	r5, r0, #16
   1fa34:	subs	r3, r3, #4
   1fa38:	str	r6, [r0, r2]!
   1fa3c:	ldr	r6, [r1, #4]
   1fa40:	str	r6, [r0, #4]
   1fa44:	ldr	r6, [r1, #8]
   1fa48:	str	r6, [r0, #8]
   1fa4c:	ldr	r1, [r1, #12]
   1fa50:	str	r1, [r0, #12]
   1fa54:	mov	r1, r7
   1fa58:	mov	r0, r5
   1fa5c:	bne	1fa28 <__assert_fail@plt+0xe708>
   1fa60:	ldr	sl, [r9, #4]
   1fa64:	mov	r6, r4
   1fa68:	str	sl, [r4, #4]
   1fa6c:	cmp	sl, #0
   1fa70:	rsbmi	sl, sl, #0
   1fa74:	str	sl, [r6, #4]
   1fa78:	sub	sp, fp, #28
   1fa7c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1fa80:	movw	r0, #12572	; 0x311c
   1fa84:	movt	r0, #4
   1fa88:	ldr	r1, [r0]
   1fa8c:	lsl	r0, r4, #2
   1fa90:	blx	r1
   1fa94:	str	r0, [r6, #8]
   1fa98:	str	r4, [r6]
   1fa9c:	ldr	r1, [r6, #4]
   1faa0:	cmp	r1, #0
   1faa4:	rsbmi	r1, r1, #0
   1faa8:	cmp	r1, r4
   1faac:	ble	1fac0 <__assert_fail@plt+0xe7a0>
   1fab0:	mov	r1, #0
   1fab4:	mov	r4, r6
   1fab8:	str	r1, [r6, #4]
   1fabc:	b	1fac4 <__assert_fail@plt+0xe7a4>
   1fac0:	mov	r4, r6
   1fac4:	ldr	r1, [sl, #8]
   1fac8:	mov	r2, #0
   1facc:	cmp	r8, #4
   1fad0:	bcc	1fbb0 <__assert_fail@plt+0xe890>
   1fad4:	add	r3, r1, r8, lsl #2
   1fad8:	cmp	r0, r3
   1fadc:	addcc	r3, r0, r8, lsl #2
   1fae0:	cmpcc	r1, r3
   1fae4:	bcc	1fbb0 <__assert_fail@plt+0xe890>
   1fae8:	bic	r2, r8, #-2147483645	; 0x80000003
   1faec:	mov	r3, #1
   1faf0:	mov	r9, #0
   1faf4:	str	sl, [sp, #16]
   1faf8:	str	r4, [sp, #24]
   1fafc:	sub	r6, r2, #4
   1fb00:	add	r3, r3, r6, lsr #2
   1fb04:	cmp	r6, #12
   1fb08:	and	r7, r3, #3
   1fb0c:	str	r7, [sp, #20]
   1fb10:	bcc	1fb78 <__assert_fail@plt+0xe858>
   1fb14:	ldr	r7, [sp, #20]
   1fb18:	mov	r9, #0
   1fb1c:	sub	lr, r3, r7
   1fb20:	mov	r3, #0
   1fb24:	add	r6, r1, r3
   1fb28:	mov	r4, #48	; 0x30
   1fb2c:	add	r5, r0, r3
   1fb30:	add	r3, r3, #64	; 0x40
   1fb34:	subs	lr, lr, #4
   1fb38:	add	r9, r9, #16
   1fb3c:	mov	r7, r6
   1fb40:	mov	ip, r5
   1fb44:	add	sl, r6, #16
   1fb48:	vld1.32	{d16-d17}, [r7], r4
   1fb4c:	vst1.32	{d16-d17}, [ip], r4
   1fb50:	add	r4, r5, #16
   1fb54:	vld1.32	{d16-d17}, [sl]
   1fb58:	vst1.32	{d16-d17}, [r4]
   1fb5c:	add	r4, r6, #32
   1fb60:	vld1.32	{d16-d17}, [r4]
   1fb64:	add	r4, r5, #32
   1fb68:	vst1.32	{d16-d17}, [r4]
   1fb6c:	vld1.32	{d16-d17}, [r7]
   1fb70:	vst1.32	{d16-d17}, [ip]
   1fb74:	bne	1fb24 <__assert_fail@plt+0xe804>
   1fb78:	ldr	r7, [sp, #20]
   1fb7c:	cmp	r7, #0
   1fb80:	beq	1fba0 <__assert_fail@plt+0xe880>
   1fb84:	add	r3, r1, r9, lsl #2
   1fb88:	add	r6, r0, r9, lsl #2
   1fb8c:	rsb	r5, r7, #0
   1fb90:	vld1.32	{d16-d17}, [r3]!
   1fb94:	adds	r5, r5, #1
   1fb98:	vst1.32	{d16-d17}, [r6]!
   1fb9c:	bcc	1fb90 <__assert_fail@plt+0xe870>
   1fba0:	ldr	r4, [sp, #24]
   1fba4:	ldr	sl, [sp, #16]
   1fba8:	cmp	r8, r2
   1fbac:	beq	1fc1c <__assert_fail@plt+0xe8fc>
   1fbb0:	mvn	r3, r2
   1fbb4:	ands	r6, r8, #3
   1fbb8:	add	r3, r8, r3
   1fbbc:	beq	1fbd4 <__assert_fail@plt+0xe8b4>
   1fbc0:	ldr	r7, [r1, r2, lsl #2]
   1fbc4:	subs	r6, r6, #1
   1fbc8:	str	r7, [r0, r2, lsl #2]
   1fbcc:	add	r2, r2, #1
   1fbd0:	bne	1fbc0 <__assert_fail@plt+0xe8a0>
   1fbd4:	cmp	r3, #3
   1fbd8:	bcc	1fc1c <__assert_fail@plt+0xe8fc>
   1fbdc:	sub	r3, r8, r2
   1fbe0:	lsl	r2, r2, #2
   1fbe4:	add	r7, r1, #16
   1fbe8:	ldr	r6, [r1, r2]!
   1fbec:	add	r5, r0, #16
   1fbf0:	subs	r3, r3, #4
   1fbf4:	str	r6, [r0, r2]!
   1fbf8:	ldr	r6, [r1, #4]
   1fbfc:	str	r6, [r0, #4]
   1fc00:	ldr	r6, [r1, #8]
   1fc04:	str	r6, [r0, #8]
   1fc08:	ldr	r1, [r1, #12]
   1fc0c:	str	r1, [r0, #12]
   1fc10:	mov	r1, r7
   1fc14:	mov	r0, r5
   1fc18:	bne	1fbe4 <__assert_fail@plt+0xe8c4>
   1fc1c:	ldr	r8, [sl, #4]
   1fc20:	mov	r6, r4
   1fc24:	str	r8, [r4, #4]
   1fc28:	cmp	r8, #0
   1fc2c:	rsbmi	r8, r8, #0
   1fc30:	str	r8, [r6, #4]
   1fc34:	sub	sp, fp, #28
   1fc38:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1fc3c:	mov	r0, #2
   1fc40:	add	r1, sp, #40	; 0x28
   1fc44:	add	r3, sp, #28
   1fc48:	str	r0, [sp]
   1fc4c:	mov	r0, #0
   1fc50:	mov	r2, r1
   1fc54:	bl	1d0f8 <__assert_fail@plt+0xbdd8>
   1fc58:	ldr	r1, [sl]
   1fc5c:	cmp	r1, #0
   1fc60:	ble	1fc70 <__assert_fail@plt+0xe950>
   1fc64:	ldr	r0, [sl, #8]
   1fc68:	mov	r6, sl
   1fc6c:	b	1fcd8 <__assert_fail@plt+0xe9b8>
   1fc70:	mov	r6, sl
   1fc74:	beq	1fc9c <__assert_fail@plt+0xe97c>
   1fc78:	movw	r0, #12576	; 0x3120
   1fc7c:	lsl	r1, r1, #2
   1fc80:	mov	r2, #4
   1fc84:	mov	r4, r6
   1fc88:	movt	r0, #4
   1fc8c:	ldr	r3, [r0]
   1fc90:	ldr	r0, [r6, #8]
   1fc94:	blx	r3
   1fc98:	b	1fcb4 <__assert_fail@plt+0xe994>
   1fc9c:	movw	r0, #12572	; 0x311c
   1fca0:	movt	r0, #4
   1fca4:	ldr	r1, [r0]
   1fca8:	mov	r0, #4
   1fcac:	blx	r1
   1fcb0:	mov	r4, r6
   1fcb4:	mov	r1, #1
   1fcb8:	str	r0, [r6, #8]
   1fcbc:	str	r1, [r4]
   1fcc0:	ldr	r1, [r4, #4]
   1fcc4:	cmp	r1, #0
   1fcc8:	rsbmi	r1, r1, #0
   1fccc:	cmp	r1, #2
   1fcd0:	movge	r1, #0
   1fcd4:	strge	r1, [r6, #4]
   1fcd8:	ldr	r1, [sp, #48]	; 0x30
   1fcdc:	ldr	r2, [sp, #36]	; 0x24
   1fce0:	ldr	r1, [r1]
   1fce4:	ldr	r2, [r2]
   1fce8:	orrs	r3, r2, r1
   1fcec:	beq	1fdf8 <__assert_fail@plt+0xead8>
   1fcf0:	cmp	r1, #0
   1fcf4:	beq	1fdc0 <__assert_fail@plt+0xeaa0>
   1fcf8:	cmp	r2, #0
   1fcfc:	beq	1fdbc <__assert_fail@plt+0xea9c>
   1fd00:	rsb	r7, r3, #0
   1fd04:	and	r7, r3, r7
   1fd08:	mov	r3, #0
   1fd0c:	cmp	r3, r7, lsr #24
   1fd10:	bne	1fd28 <__assert_fail@plt+0xea08>
   1fd14:	mov	r3, #0
   1fd18:	lsl	r7, r7, #8
   1fd1c:	add	r3, r3, #8
   1fd20:	cmp	r7, #16777216	; 0x1000000
   1fd24:	bcc	1fd18 <__assert_fail@plt+0xe9f8>
   1fd28:	cmp	r7, #0
   1fd2c:	bmi	1fd40 <__assert_fail@plt+0xea20>
   1fd30:	lsl	r7, r7, #1
   1fd34:	add	r3, r3, #1
   1fd38:	cmn	r7, #1
   1fd3c:	bgt	1fd30 <__assert_fail@plt+0xea10>
   1fd40:	rsb	r3, r3, #31
   1fd44:	mov	r7, #1
   1fd48:	and	r4, r7, r1, lsr r3
   1fd4c:	lsr	r2, r2, r3
   1fd50:	mov	r5, r2
   1fd54:	cmp	r4, #0
   1fd58:	lsreq	r5, r1, r3
   1fd5c:	mov	r7, r5
   1fd60:	lsr	r5, r5, #1
   1fd64:	tst	r7, #1
   1fd68:	beq	1fd5c <__assert_fail@plt+0xea3c>
   1fd6c:	cmp	r4, #0
   1fd70:	lsrne	r2, r1, r3
   1fd74:	cmp	r2, r7
   1fd78:	beq	1fdb4 <__assert_fail@plt+0xea94>
   1fd7c:	cmp	r2, r7
   1fd80:	bls	1fd9c <__assert_fail@plt+0xea7c>
   1fd84:	sub	r1, r2, r7
   1fd88:	lsr	r2, r1, #1
   1fd8c:	tst	r1, #2
   1fd90:	mov	r1, r2
   1fd94:	beq	1fd88 <__assert_fail@plt+0xea68>
   1fd98:	b	1fd74 <__assert_fail@plt+0xea54>
   1fd9c:	sub	r1, r7, r2
   1fda0:	lsr	r7, r1, #1
   1fda4:	tst	r1, #2
   1fda8:	mov	r1, r7
   1fdac:	beq	1fda0 <__assert_fail@plt+0xea80>
   1fdb0:	b	1fd74 <__assert_fail@plt+0xea54>
   1fdb4:	lsl	r2, r7, r3
   1fdb8:	b	1fdc0 <__assert_fail@plt+0xeaa0>
   1fdbc:	mov	r2, r1
   1fdc0:	cmp	r2, #0
   1fdc4:	str	r2, [r0]
   1fdc8:	movwne	r2, #1
   1fdcc:	str	r2, [r6, #4]
   1fdd0:	b	1f85c <__assert_fail@plt+0xe53c>
   1fdd4:	str	r1, [sp, #44]	; 0x2c
   1fdd8:	movw	r0, #5498	; 0x157a
   1fddc:	movw	r1, #1996	; 0x7cc
   1fde0:	movw	r3, #5514	; 0x158a
   1fde4:	movw	r2, #2723	; 0xaa3
   1fde8:	movt	r0, #3
   1fdec:	movt	r1, #3
   1fdf0:	movt	r3, #3
   1fdf4:	bl	11320 <__assert_fail@plt>
   1fdf8:	movw	r0, #5555	; 0x15b3
   1fdfc:	movw	r1, #1996	; 0x7cc
   1fe00:	movw	r3, #5567	; 0x15bf
   1fe04:	movw	r2, #2663	; 0xa67
   1fe08:	movt	r0, #3
   1fe0c:	movt	r1, #3
   1fe10:	movt	r3, #3
   1fe14:	bl	11320 <__assert_fail@plt>
   1fe18:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1fe1c:	add	fp, sp, #28
   1fe20:	sub	sp, sp, #108	; 0x6c
   1fe24:	mov	sl, r2
   1fe28:	ldr	r2, [fp, #8]
   1fe2c:	ldr	r9, [r3, #4]
   1fe30:	mov	ip, r0
   1fe34:	str	r0, [sp, #28]
   1fe38:	ldr	r8, [r2, #4]
   1fe3c:	cmp	r9, #0
   1fe40:	str	r2, [sp, #32]
   1fe44:	beq	20160 <__assert_fail@plt+0xee40>
   1fe48:	cmp	r8, #0
   1fe4c:	str	r3, [sp, #20]
   1fe50:	beq	201c8 <__assert_fail@plt+0xeea8>
   1fe54:	movw	r0, #1992	; 0x7c8
   1fe58:	sub	r2, fp, #40	; 0x28
   1fe5c:	str	r1, [sp, #24]
   1fe60:	mov	r1, #0
   1fe64:	movt	r0, #3
   1fe68:	cmp	r2, r3
   1fe6c:	str	r0, [fp, #-32]	; 0xffffffe0
   1fe70:	str	r1, [fp, #-36]	; 0xffffffdc
   1fe74:	str	r0, [fp, #-44]	; 0xffffffd4
   1fe78:	str	r1, [fp, #-48]	; 0xffffffd0
   1fe7c:	str	r0, [fp, #-56]	; 0xffffffc8
   1fe80:	str	r1, [fp, #-60]	; 0xffffffc4
   1fe84:	str	r0, [sp, #68]	; 0x44
   1fe88:	str	r1, [sp, #64]	; 0x40
   1fe8c:	str	r0, [sp, #56]	; 0x38
   1fe90:	str	r1, [sp, #52]	; 0x34
   1fe94:	str	r0, [sp, #44]	; 0x2c
   1fe98:	str	r1, [sp, #40]	; 0x28
   1fe9c:	str	r1, [fp, #-40]	; 0xffffffd8
   1fea0:	str	r1, [fp, #-52]	; 0xffffffcc
   1fea4:	str	r1, [fp, #-64]	; 0xffffffc0
   1fea8:	str	r1, [sp, #60]	; 0x3c
   1feac:	str	r1, [sp, #48]	; 0x30
   1feb0:	str	r1, [sp, #36]	; 0x24
   1feb4:	beq	210a8 <__assert_fail@plt+0xfd88>
   1feb8:	cmp	r9, #0
   1febc:	mov	r4, r9
   1fec0:	rsbmi	r4, r9, #0
   1fec4:	cmp	r4, #1
   1fec8:	blt	2006c <__assert_fail@plt+0xed4c>
   1fecc:	movw	r0, #12572	; 0x311c
   1fed0:	movt	r0, #4
   1fed4:	ldr	r1, [r0]
   1fed8:	lsl	r0, r4, #2
   1fedc:	blx	r1
   1fee0:	str	r0, [fp, #-32]	; 0xffffffe0
   1fee4:	str	r4, [fp, #-40]	; 0xffffffd8
   1fee8:	ldr	ip, [sp, #20]
   1feec:	mov	r2, #0
   1fef0:	ldr	r1, [fp, #-36]	; 0xffffffdc
   1fef4:	cmp	r1, #0
   1fef8:	rsbmi	r1, r1, #0
   1fefc:	cmp	r1, r4
   1ff00:	movgt	r1, #0
   1ff04:	strgt	r1, [fp, #-36]	; 0xffffffdc
   1ff08:	cmp	r4, #4
   1ff0c:	ldr	r1, [ip, #8]
   1ff10:	bcc	1fff8 <__assert_fail@plt+0xecd8>
   1ff14:	add	r3, r1, r4, lsl #2
   1ff18:	cmp	r0, r3
   1ff1c:	bcs	1ff2c <__assert_fail@plt+0xec0c>
   1ff20:	add	r3, r0, r4, lsl #2
   1ff24:	cmp	r3, r1
   1ff28:	bhi	1fff8 <__assert_fail@plt+0xecd8>
   1ff2c:	bic	r2, r4, #-2147483645	; 0x80000003
   1ff30:	mov	r3, #1
   1ff34:	mov	r9, #0
   1ff38:	str	sl, [sp, #12]
   1ff3c:	str	r4, [sp, #8]
   1ff40:	sub	r6, r2, #4
   1ff44:	add	r3, r3, r6, lsr #2
   1ff48:	cmp	r6, #12
   1ff4c:	and	r7, r3, #3
   1ff50:	str	r7, [sp, #16]
   1ff54:	bcc	1ffbc <__assert_fail@plt+0xec9c>
   1ff58:	ldr	r7, [sp, #16]
   1ff5c:	mov	r5, #0
   1ff60:	mov	lr, #48	; 0x30
   1ff64:	mov	r9, #0
   1ff68:	sub	sl, r3, r7
   1ff6c:	add	r4, r1, r5
   1ff70:	add	r7, r0, r5
   1ff74:	add	r5, r5, #64	; 0x40
   1ff78:	subs	sl, sl, #4
   1ff7c:	add	r9, r9, #16
   1ff80:	mov	r8, r4
   1ff84:	mov	r6, r7
   1ff88:	add	ip, r4, #16
   1ff8c:	add	r3, r7, #16
   1ff90:	vld1.32	{d16-d17}, [r8], lr
   1ff94:	vst1.32	{d16-d17}, [r6], lr
   1ff98:	vld1.32	{d16-d17}, [ip]
   1ff9c:	vst1.32	{d16-d17}, [r3]
   1ffa0:	add	r3, r4, #32
   1ffa4:	vld1.32	{d16-d17}, [r3]
   1ffa8:	add	r3, r7, #32
   1ffac:	vst1.32	{d16-d17}, [r3]
   1ffb0:	vld1.32	{d16-d17}, [r8]
   1ffb4:	vst1.32	{d16-d17}, [r6]
   1ffb8:	bne	1ff6c <__assert_fail@plt+0xec4c>
   1ffbc:	ldr	r6, [sp, #16]
   1ffc0:	cmp	r6, #0
   1ffc4:	beq	1ffe4 <__assert_fail@plt+0xecc4>
   1ffc8:	add	r3, r1, r9, lsl #2
   1ffcc:	add	r7, r0, r9, lsl #2
   1ffd0:	rsb	r6, r6, #0
   1ffd4:	vld1.32	{d16-d17}, [r3]!
   1ffd8:	adds	r6, r6, #1
   1ffdc:	vst1.32	{d16-d17}, [r7]!
   1ffe0:	bcc	1ffd4 <__assert_fail@plt+0xecb4>
   1ffe4:	ldr	r4, [sp, #8]
   1ffe8:	ldr	sl, [sp, #12]
   1ffec:	ldr	ip, [sp, #20]
   1fff0:	cmp	r4, r2
   1fff4:	beq	20068 <__assert_fail@plt+0xed48>
   1fff8:	mvn	r3, r2
   1fffc:	ands	r7, r4, #3
   20000:	add	r3, r4, r3
   20004:	beq	2001c <__assert_fail@plt+0xecfc>
   20008:	ldr	r6, [r1, r2, lsl #2]
   2000c:	subs	r7, r7, #1
   20010:	str	r6, [r0, r2, lsl #2]
   20014:	add	r2, r2, #1
   20018:	bne	20008 <__assert_fail@plt+0xece8>
   2001c:	cmp	r3, #3
   20020:	bcc	20068 <__assert_fail@plt+0xed48>
   20024:	sub	r3, r4, r2
   20028:	lsl	r2, r2, #2
   2002c:	mov	r7, r0
   20030:	add	r6, r1, #16
   20034:	ldr	r5, [r1, r2]!
   20038:	add	r4, r7, #16
   2003c:	subs	r3, r3, #4
   20040:	str	r5, [r7, r2]!
   20044:	ldr	r5, [r1, #4]
   20048:	str	r5, [r7, #4]
   2004c:	ldr	r5, [r1, #8]
   20050:	str	r5, [r7, #8]
   20054:	ldr	r1, [r1, #12]
   20058:	str	r1, [r7, #12]
   2005c:	mov	r1, r6
   20060:	mov	r7, r4
   20064:	bne	20030 <__assert_fail@plt+0xed10>
   20068:	ldr	r9, [ip, #4]
   2006c:	cmp	r9, #0
   20070:	rsb	r1, r9, #0
   20074:	movpl	r1, r9
   20078:	cmp	r1, #0
   2007c:	str	r1, [fp, #-36]	; 0xffffffdc
   20080:	ble	210ac <__assert_fail@plt+0xfd8c>
   20084:	ldr	r2, [r0]
   20088:	ldr	r4, [fp, #8]
   2008c:	mov	r1, #31
   20090:	cmp	r2, #0
   20094:	bne	200b0 <__assert_fail@plt+0xed90>
   20098:	add	r0, r0, #4
   2009c:	mov	r1, #31
   200a0:	ldr	r2, [r0], #4
   200a4:	add	r1, r1, #32
   200a8:	cmp	r2, #0
   200ac:	beq	200a0 <__assert_fail@plt+0xed80>
   200b0:	rsb	r0, r2, #0
   200b4:	and	r2, r2, r0
   200b8:	mov	r0, #0
   200bc:	cmp	r0, r2, lsr #24
   200c0:	bne	200d8 <__assert_fail@plt+0xedb8>
   200c4:	mov	r0, #0
   200c8:	lsl	r2, r2, #8
   200cc:	add	r0, r0, #8
   200d0:	cmp	r2, #16777216	; 0x1000000
   200d4:	bcc	200c8 <__assert_fail@plt+0xeda8>
   200d8:	cmp	r2, #0
   200dc:	bmi	200f0 <__assert_fail@plt+0xedd0>
   200e0:	lsl	r2, r2, #1
   200e4:	add	r0, r0, #1
   200e8:	cmn	r2, #1
   200ec:	bgt	200e0 <__assert_fail@plt+0xedc0>
   200f0:	sub	r8, r1, r0
   200f4:	sub	r0, fp, #40	; 0x28
   200f8:	mov	r3, #2
   200fc:	mov	r1, r0
   20100:	mov	r2, r8
   20104:	bl	1dcc8 <__assert_fail@plt+0xc9a8>
   20108:	sub	r0, fp, #52	; 0x34
   2010c:	cmp	r0, r4
   20110:	beq	2022c <__assert_fail@plt+0xef0c>
   20114:	ldr	r5, [r4, #4]
   20118:	ldr	r1, [fp, #-52]	; 0xffffffcc
   2011c:	cmp	r5, #0
   20120:	rsbmi	r5, r5, #0
   20124:	cmp	r5, r1
   20128:	ble	20234 <__assert_fail@plt+0xef14>
   2012c:	cmp	r5, #1
   20130:	mov	r6, r5
   20134:	movle	r6, #1
   20138:	cmp	r1, #0
   2013c:	beq	20264 <__assert_fail@plt+0xef44>
   20140:	movw	r0, #12576	; 0x3120
   20144:	lsl	r1, r1, #2
   20148:	lsl	r2, r6, #2
   2014c:	movt	r0, #4
   20150:	ldr	r3, [r0]
   20154:	ldr	r0, [fp, #-44]	; 0xffffffd4
   20158:	blx	r3
   2015c:	b	20278 <__assert_fail@plt+0xef58>
   20160:	mov	r0, #1
   20164:	cmp	r8, #0
   20168:	asr	r4, r8, #31
   2016c:	addgt	r4, r0, r8, asr #31
   20170:	cmp	ip, r2
   20174:	beq	20e58 <__assert_fail@plt+0xfb38>
   20178:	mov	r9, r2
   2017c:	ldr	r2, [ip]
   20180:	cmp	r8, #0
   20184:	str	r1, [sp, #24]
   20188:	rsbmi	r8, r8, #0
   2018c:	cmp	r8, r2
   20190:	ble	20244 <__assert_fail@plt+0xef24>
   20194:	cmp	r8, #1
   20198:	mov	r5, r8
   2019c:	movle	r5, #1
   201a0:	cmp	r2, #0
   201a4:	beq	20cac <__assert_fail@plt+0xf98c>
   201a8:	movw	r0, #12576	; 0x3120
   201ac:	lsl	r1, r2, #2
   201b0:	lsl	r2, r5, #2
   201b4:	movt	r0, #4
   201b8:	ldr	r3, [r0]
   201bc:	ldr	r0, [ip, #8]
   201c0:	blx	r3
   201c4:	b	20cc0 <__assert_fail@plt+0xf9a0>
   201c8:	mov	r0, #1
   201cc:	cmp	r9, #0
   201d0:	asr	r8, r9, #31
   201d4:	addgt	r8, r0, r9, asr #31
   201d8:	cmp	ip, r3
   201dc:	beq	21034 <__assert_fail@plt+0xfd14>
   201e0:	str	r1, [sp, #24]
   201e4:	ldr	r1, [ip]
   201e8:	cmp	r9, #0
   201ec:	rsbmi	r9, r9, #0
   201f0:	cmp	r9, r1
   201f4:	ble	20254 <__assert_fail@plt+0xef34>
   201f8:	cmp	r9, #1
   201fc:	mov	r6, r9
   20200:	movle	r6, #1
   20204:	cmp	r1, #0
   20208:	beq	20e8c <__assert_fail@plt+0xfb6c>
   2020c:	movw	r0, #12576	; 0x3120
   20210:	lsl	r1, r1, #2
   20214:	lsl	r2, r6, #2
   20218:	movt	r0, #4
   2021c:	ldr	r3, [r0]
   20220:	ldr	r0, [ip, #8]
   20224:	blx	r3
   20228:	b	20ea0 <__assert_fail@plt+0xfb80>
   2022c:	ldr	r0, [fp, #-48]	; 0xffffffd0
   20230:	b	20404 <__assert_fail@plt+0xf0e4>
   20234:	ldr	r0, [fp, #-44]	; 0xffffffd4
   20238:	cmp	r5, #1
   2023c:	bge	202a0 <__assert_fail@plt+0xef80>
   20240:	b	203fc <__assert_fail@plt+0xf0dc>
   20244:	ldr	r0, [ip, #8]
   20248:	cmp	r8, #1
   2024c:	bge	20cec <__assert_fail@plt+0xf9cc>
   20250:	b	20e4c <__assert_fail@plt+0xfb2c>
   20254:	ldr	r0, [ip, #8]
   20258:	cmp	r9, #1
   2025c:	bge	20ec8 <__assert_fail@plt+0xfba8>
   20260:	b	21028 <__assert_fail@plt+0xfd08>
   20264:	movw	r0, #12572	; 0x311c
   20268:	movt	r0, #4
   2026c:	ldr	r1, [r0]
   20270:	lsl	r0, r6, #2
   20274:	blx	r1
   20278:	str	r0, [fp, #-44]	; 0xffffffd4
   2027c:	str	r6, [fp, #-52]	; 0xffffffcc
   20280:	ldr	r1, [fp, #-48]	; 0xffffffd0
   20284:	cmp	r1, #0
   20288:	rsbmi	r1, r1, #0
   2028c:	cmp	r1, r6
   20290:	movgt	r1, #0
   20294:	strgt	r1, [fp, #-48]	; 0xffffffd0
   20298:	cmp	r5, #1
   2029c:	blt	203fc <__assert_fail@plt+0xf0dc>
   202a0:	ldr	r1, [r4, #8]
   202a4:	mov	r2, #0
   202a8:	cmp	r5, #4
   202ac:	bcc	20390 <__assert_fail@plt+0xf070>
   202b0:	add	r3, r1, r5, lsl #2
   202b4:	cmp	r0, r3
   202b8:	addcc	r3, r0, r5, lsl #2
   202bc:	cmpcc	r1, r3
   202c0:	bcc	20390 <__assert_fail@plt+0xf070>
   202c4:	bic	r2, r5, #-2147483645	; 0x80000003
   202c8:	mov	r3, #1
   202cc:	mov	r9, #0
   202d0:	stmib	sp, {r5, r8, sl}
   202d4:	sub	r7, r2, #4
   202d8:	add	r3, r3, r7, lsr #2
   202dc:	cmp	r7, #12
   202e0:	and	r6, r3, #3
   202e4:	str	r6, [sp, #16]
   202e8:	bcc	20350 <__assert_fail@plt+0xf030>
   202ec:	ldr	r7, [sp, #16]
   202f0:	mov	lr, #48	; 0x30
   202f4:	mov	r9, #0
   202f8:	sub	r8, r3, r7
   202fc:	mov	r3, #0
   20300:	add	r4, r1, r3
   20304:	add	r6, r0, r3
   20308:	add	r3, r3, #64	; 0x40
   2030c:	subs	r8, r8, #4
   20310:	add	r9, r9, #16
   20314:	mov	r7, r4
   20318:	mov	ip, r6
   2031c:	add	sl, r4, #16
   20320:	add	r5, r6, #16
   20324:	add	r4, r4, #32
   20328:	vld1.32	{d16-d17}, [r7], lr
   2032c:	vst1.32	{d16-d17}, [ip], lr
   20330:	vld1.32	{d16-d17}, [sl]
   20334:	vst1.32	{d16-d17}, [r5]
   20338:	vld1.32	{d16-d17}, [r4]
   2033c:	add	r4, r6, #32
   20340:	vst1.32	{d16-d17}, [r4]
   20344:	vld1.32	{d16-d17}, [r7]
   20348:	vst1.32	{d16-d17}, [ip]
   2034c:	bne	20300 <__assert_fail@plt+0xefe0>
   20350:	ldr	r6, [sp, #16]
   20354:	cmp	r6, #0
   20358:	beq	20378 <__assert_fail@plt+0xf058>
   2035c:	add	r3, r1, r9, lsl #2
   20360:	add	r7, r0, r9, lsl #2
   20364:	rsb	r6, r6, #0
   20368:	vld1.32	{d16-d17}, [r3]!
   2036c:	adds	r6, r6, #1
   20370:	vst1.32	{d16-d17}, [r7]!
   20374:	bcc	20368 <__assert_fail@plt+0xf048>
   20378:	ldr	r5, [sp, #4]
   2037c:	ldr	sl, [sp, #12]
   20380:	ldr	r4, [fp, #8]
   20384:	ldr	r8, [sp, #8]
   20388:	cmp	r5, r2
   2038c:	beq	203fc <__assert_fail@plt+0xf0dc>
   20390:	mvn	r3, r2
   20394:	ands	r7, r5, #3
   20398:	add	r3, r5, r3
   2039c:	beq	203b4 <__assert_fail@plt+0xf094>
   203a0:	ldr	r6, [r1, r2, lsl #2]
   203a4:	subs	r7, r7, #1
   203a8:	str	r6, [r0, r2, lsl #2]
   203ac:	add	r2, r2, #1
   203b0:	bne	203a0 <__assert_fail@plt+0xf080>
   203b4:	cmp	r3, #3
   203b8:	bcc	203fc <__assert_fail@plt+0xf0dc>
   203bc:	sub	r3, r5, r2
   203c0:	lsl	r2, r2, #2
   203c4:	add	r7, r1, #16
   203c8:	ldr	r6, [r1, r2]!
   203cc:	add	r5, r0, #16
   203d0:	subs	r3, r3, #4
   203d4:	str	r6, [r0, r2]!
   203d8:	ldr	r6, [r1, #4]
   203dc:	str	r6, [r0, #4]
   203e0:	ldr	r6, [r1, #8]
   203e4:	str	r6, [r0, #8]
   203e8:	ldr	r1, [r1, #12]
   203ec:	str	r1, [r0, #12]
   203f0:	mov	r1, r7
   203f4:	mov	r0, r5
   203f8:	bne	203c4 <__assert_fail@plt+0xf0a4>
   203fc:	ldr	r0, [r4, #4]
   20400:	str	r0, [fp, #-48]	; 0xffffffd0
   20404:	cmp	r0, #0
   20408:	rsbmi	r0, r0, #0
   2040c:	cmp	r0, #0
   20410:	str	r0, [fp, #-48]	; 0xffffffd0
   20414:	ble	210ac <__assert_fail@plt+0xfd8c>
   20418:	ldr	r2, [fp, #-44]	; 0xffffffd4
   2041c:	mov	r0, #31
   20420:	ldr	r1, [r2]
   20424:	cmp	r1, #0
   20428:	bne	20444 <__assert_fail@plt+0xf124>
   2042c:	add	r2, r2, #4
   20430:	mov	r0, #31
   20434:	ldr	r1, [r2], #4
   20438:	add	r0, r0, #32
   2043c:	cmp	r1, #0
   20440:	beq	20434 <__assert_fail@plt+0xf114>
   20444:	rsb	r2, r1, #0
   20448:	and	r2, r1, r2
   2044c:	mov	r1, #0
   20450:	cmp	r1, r2, lsr #24
   20454:	bne	2046c <__assert_fail@plt+0xf14c>
   20458:	mov	r1, #0
   2045c:	lsl	r2, r2, #8
   20460:	add	r1, r1, #8
   20464:	cmp	r2, #16777216	; 0x1000000
   20468:	bcc	2045c <__assert_fail@plt+0xf13c>
   2046c:	cmp	r2, #0
   20470:	bmi	20484 <__assert_fail@plt+0xf164>
   20474:	lsl	r2, r2, #1
   20478:	add	r1, r1, #1
   2047c:	cmn	r2, #1
   20480:	bgt	20474 <__assert_fail@plt+0xf154>
   20484:	sub	r5, r0, r1
   20488:	sub	r0, fp, #52	; 0x34
   2048c:	mov	r3, #2
   20490:	mov	r6, #2
   20494:	mov	r1, r0
   20498:	mov	r2, r5
   2049c:	bl	1dcc8 <__assert_fail@plt+0xc9a8>
   204a0:	ldr	r1, [fp, #-48]	; 0xffffffd0
   204a4:	ldr	r2, [fp, #-36]	; 0xffffffdc
   204a8:	cmp	r8, r5
   204ac:	mov	r0, r8
   204b0:	mov	r8, r5
   204b4:	movcc	r8, r0
   204b8:	sub	r9, r5, r8
   204bc:	sub	r0, r0, r8
   204c0:	cmp	r2, r1
   204c4:	bge	20508 <__assert_fail@plt+0xf1e8>
   204c8:	str	r2, [fp, #-48]	; 0xffffffd0
   204cc:	str	r1, [fp, #-36]	; 0xffffffdc
   204d0:	ldr	r3, [fp, #-52]	; 0xffffffcc
   204d4:	ldr	r7, [fp, #-44]	; 0xffffffd4
   204d8:	ldr	r1, [fp, #-40]	; 0xffffffd8
   204dc:	ldr	r2, [fp, #-32]	; 0xffffffe0
   204e0:	str	r3, [fp, #-40]	; 0xffffffd8
   204e4:	str	r7, [fp, #-32]	; 0xffffffe0
   204e8:	mov	r7, r0
   204ec:	ldr	r0, [sp, #20]
   204f0:	str	r1, [fp, #-52]	; 0xffffffcc
   204f4:	str	r2, [fp, #-44]	; 0xffffffd4
   204f8:	str	r0, [sp, #16]
   204fc:	ldr	r0, [sp, #24]
   20500:	str	r0, [sp, #20]
   20504:	b	20528 <__assert_fail@plt+0xf208>
   20508:	mov	r7, r9
   2050c:	mov	r9, r0
   20510:	ldr	r0, [fp, #8]
   20514:	str	r0, [sp, #16]
   20518:	ldr	r0, [sp, #20]
   2051c:	str	sl, [sp, #20]
   20520:	ldr	sl, [sp, #24]
   20524:	str	r0, [sp, #32]
   20528:	str	r6, [sp]
   2052c:	add	r6, sp, #36	; 0x24
   20530:	sub	r1, fp, #40	; 0x28
   20534:	sub	r3, fp, #52	; 0x34
   20538:	mov	r0, r6
   2053c:	mov	r2, r1
   20540:	bl	1d0f8 <__assert_fail@plt+0xbdd8>
   20544:	mov	r0, r6
   20548:	mov	r1, r6
   2054c:	mov	r2, r9
   20550:	bl	1cb8c <__assert_fail@plt+0xb86c>
   20554:	ldr	r0, [sp, #64]	; 0x40
   20558:	cmp	r0, #0
   2055c:	mov	r1, r0
   20560:	rsbmi	r1, r0, #0
   20564:	cmp	r1, r7, lsr #5
   20568:	ble	205cc <__assert_fail@plt+0xf2ac>
   2056c:	ldr	r3, [sp, #68]	; 0x44
   20570:	lsr	r5, r7, #5
   20574:	and	r4, r7, #31
   20578:	mov	r1, #1
   2057c:	cmn	r0, #1
   20580:	ldr	r6, [r3, r5, lsl #2]
   20584:	and	r1, r1, r6, lsr r4
   20588:	bgt	205d0 <__assert_fail@plt+0xf2b0>
   2058c:	cmp	r4, #0
   20590:	rsbne	r2, r4, #32
   20594:	movne	r4, #0
   20598:	cmpne	r4, r6, lsl r2
   2059c:	bne	205bc <__assert_fail@plt+0xf29c>
   205a0:	sub	r3, r3, #4
   205a4:	subs	r2, r5, #1
   205a8:	blt	205d0 <__assert_fail@plt+0xf2b0>
   205ac:	ldr	r6, [r3, r5, lsl #2]
   205b0:	mov	r5, r2
   205b4:	cmp	r6, #0
   205b8:	beq	205a4 <__assert_fail@plt+0xf284>
   205bc:	eor	r1, r1, #1
   205c0:	cmp	r1, #0
   205c4:	bne	205fc <__assert_fail@plt+0xf2dc>
   205c8:	b	205d8 <__assert_fail@plt+0xf2b8>
   205cc:	lsr	r1, r0, #31
   205d0:	cmp	r1, #0
   205d4:	bne	205fc <__assert_fail@plt+0xf2dc>
   205d8:	cmp	r0, #0
   205dc:	bmi	205f0 <__assert_fail@plt+0xf2d0>
   205e0:	add	r0, sp, #60	; 0x3c
   205e4:	mov	r1, r7
   205e8:	bl	2513c <__assert_fail@plt+0x13e1c>
   205ec:	b	205fc <__assert_fail@plt+0xf2dc>
   205f0:	add	r0, sp, #60	; 0x3c
   205f4:	mov	r1, r7
   205f8:	bl	25348 <__assert_fail@plt+0x14028>
   205fc:	ldr	r0, [fp, #-36]	; 0xffffffdc
   20600:	str	sl, [sp, #12]
   20604:	add	sl, r9, r7
   20608:	cmp	r0, #1
   2060c:	blt	208fc <__assert_fail@plt+0xf5dc>
   20610:	ldr	r2, [fp, #-32]	; 0xffffffe0
   20614:	mov	r0, #31
   20618:	ldr	r1, [r2]
   2061c:	cmp	r1, #0
   20620:	bne	2063c <__assert_fail@plt+0xf31c>
   20624:	add	r2, r2, #4
   20628:	mov	r0, #31
   2062c:	ldr	r1, [r2], #4
   20630:	add	r0, r0, #32
   20634:	cmp	r1, #0
   20638:	beq	2062c <__assert_fail@plt+0xf30c>
   2063c:	rsb	r2, r1, #0
   20640:	and	r2, r1, r2
   20644:	mov	r1, #0
   20648:	cmp	r1, r2, lsr #24
   2064c:	bne	20664 <__assert_fail@plt+0xf344>
   20650:	mov	r1, #0
   20654:	lsl	r2, r2, #8
   20658:	add	r1, r1, #8
   2065c:	cmp	r2, #16777216	; 0x1000000
   20660:	bcc	20654 <__assert_fail@plt+0xf334>
   20664:	cmp	r2, #0
   20668:	bmi	2067c <__assert_fail@plt+0xf35c>
   2066c:	lsl	r2, r2, #1
   20670:	add	r1, r1, #1
   20674:	cmn	r2, #1
   20678:	bgt	2066c <__assert_fail@plt+0xf34c>
   2067c:	sub	r7, r0, r1
   20680:	sub	r6, fp, #40	; 0x28
   20684:	mov	r3, #2
   20688:	mov	r0, r6
   2068c:	mov	r1, r6
   20690:	mov	r2, r7
   20694:	bl	1dcc8 <__assert_fail@plt+0xc9a8>
   20698:	add	r5, sp, #48	; 0x30
   2069c:	add	r1, r7, r9
   206a0:	mov	r0, r5
   206a4:	bl	2513c <__assert_fail@plt+0x13e1c>
   206a8:	add	sl, r7, sl
   206ac:	sub	r9, fp, #64	; 0x40
   206b0:	add	r4, sp, #60	; 0x3c
   206b4:	b	206f4 <__assert_fail@plt+0xf3d4>
   206b8:	sub	r7, r0, r1
   206bc:	sub	r0, fp, #52	; 0x34
   206c0:	mov	r3, #2
   206c4:	mov	r1, r0
   206c8:	mov	r2, r7
   206cc:	bl	1dcc8 <__assert_fail@plt+0xc9a8>
   206d0:	add	r0, sp, #36	; 0x24
   206d4:	mov	r2, r7
   206d8:	mov	r1, r0
   206dc:	bl	1cb8c <__assert_fail@plt+0xb86c>
   206e0:	mov	r0, r4
   206e4:	mov	r1, r4
   206e8:	mov	r2, r7
   206ec:	bl	1cb8c <__assert_fail@plt+0xb86c>
   206f0:	add	sl, r7, sl
   206f4:	ldr	r1, [fp, #-48]	; 0xffffffd0
   206f8:	ldr	r0, [fp, #-36]	; 0xffffffdc
   206fc:	cmp	r0, r1
   20700:	bne	2073c <__assert_fail@plt+0xf41c>
   20704:	cmp	r0, #0
   20708:	bmi	207ec <__assert_fail@plt+0xf4cc>
   2070c:	ldr	r1, [fp, #-32]	; 0xffffffe0
   20710:	ldr	r2, [fp, #-44]	; 0xffffffd4
   20714:	sub	r1, r1, #4
   20718:	sub	r2, r2, #4
   2071c:	subs	r3, r0, #1
   20720:	blt	20908 <__assert_fail@plt+0xf5e8>
   20724:	ldr	r7, [r2, r0, lsl #2]
   20728:	ldr	r0, [r1, r0, lsl #2]
   2072c:	cmp	r0, r7
   20730:	mov	r0, r3
   20734:	beq	2071c <__assert_fail@plt+0xf3fc>
   20738:	b	2081c <__assert_fail@plt+0xf4fc>
   2073c:	bge	20820 <__assert_fail@plt+0xf500>
   20740:	sub	r0, fp, #52	; 0x34
   20744:	mov	r2, r6
   20748:	mov	r1, r0
   2074c:	bl	1c674 <__assert_fail@plt+0xb354>
   20750:	mov	r0, r5
   20754:	mov	r1, r5
   20758:	add	r2, sp, #36	; 0x24
   2075c:	bl	1bd0c <__assert_fail@plt+0xa9ec>
   20760:	mov	r0, r9
   20764:	mov	r1, r9
   20768:	mov	r2, r4
   2076c:	bl	1bd0c <__assert_fail@plt+0xa9ec>
   20770:	ldr	r0, [fp, #-48]	; 0xffffffd0
   20774:	cmp	r0, #0
   20778:	ble	210ac <__assert_fail@plt+0xfd8c>
   2077c:	ldr	r2, [fp, #-44]	; 0xffffffd4
   20780:	mov	r0, #31
   20784:	ldr	r1, [r2]
   20788:	cmp	r1, #0
   2078c:	bne	207a8 <__assert_fail@plt+0xf488>
   20790:	add	r2, r2, #4
   20794:	mov	r0, #31
   20798:	ldr	r1, [r2], #4
   2079c:	add	r0, r0, #32
   207a0:	cmp	r1, #0
   207a4:	beq	20798 <__assert_fail@plt+0xf478>
   207a8:	rsb	r2, r1, #0
   207ac:	and	r2, r1, r2
   207b0:	mov	r1, #0
   207b4:	cmp	r1, r2, lsr #24
   207b8:	bne	207d0 <__assert_fail@plt+0xf4b0>
   207bc:	mov	r1, #0
   207c0:	lsl	r2, r2, #8
   207c4:	add	r1, r1, #8
   207c8:	cmp	r2, #16777216	; 0x1000000
   207cc:	bcc	207c0 <__assert_fail@plt+0xf4a0>
   207d0:	cmp	r2, #0
   207d4:	bmi	206b8 <__assert_fail@plt+0xf398>
   207d8:	lsl	r2, r2, #1
   207dc:	add	r1, r1, #1
   207e0:	cmn	r2, #1
   207e4:	bgt	207d8 <__assert_fail@plt+0xf4b8>
   207e8:	b	206b8 <__assert_fail@plt+0xf398>
   207ec:	ldr	r2, [fp, #-32]	; 0xffffffe0
   207f0:	rsb	r1, r0, #0
   207f4:	ldr	r0, [fp, #-44]	; 0xffffffd4
   207f8:	sub	r0, r0, #4
   207fc:	sub	r2, r2, #4
   20800:	subs	r3, r1, #1
   20804:	blt	20908 <__assert_fail@plt+0xf5e8>
   20808:	ldr	r7, [r2, r1, lsl #2]
   2080c:	ldr	r1, [r0, r1, lsl #2]
   20810:	cmp	r1, r7
   20814:	mov	r1, r3
   20818:	beq	20800 <__assert_fail@plt+0xf4e0>
   2081c:	bls	20740 <__assert_fail@plt+0xf420>
   20820:	mov	r0, r6
   20824:	mov	r1, r6
   20828:	sub	r2, fp, #52	; 0x34
   2082c:	bl	1c674 <__assert_fail@plt+0xb354>
   20830:	add	r0, sp, #36	; 0x24
   20834:	mov	r1, r5
   20838:	mov	r2, r0
   2083c:	bl	1bd0c <__assert_fail@plt+0xa9ec>
   20840:	mov	r0, r4
   20844:	mov	r1, r9
   20848:	mov	r2, r4
   2084c:	bl	1bd0c <__assert_fail@plt+0xa9ec>
   20850:	ldr	r0, [fp, #-36]	; 0xffffffdc
   20854:	cmp	r0, #0
   20858:	ble	210ac <__assert_fail@plt+0xfd8c>
   2085c:	ldr	r2, [fp, #-32]	; 0xffffffe0
   20860:	mov	r0, #31
   20864:	ldr	r1, [r2]
   20868:	cmp	r1, #0
   2086c:	bne	20888 <__assert_fail@plt+0xf568>
   20870:	add	r2, r2, #4
   20874:	mov	r0, #31
   20878:	ldr	r1, [r2], #4
   2087c:	add	r0, r0, #32
   20880:	cmp	r1, #0
   20884:	beq	20878 <__assert_fail@plt+0xf558>
   20888:	rsb	r2, r1, #0
   2088c:	and	r2, r1, r2
   20890:	mov	r1, #0
   20894:	cmp	r1, r2, lsr #24
   20898:	bne	208b0 <__assert_fail@plt+0xf590>
   2089c:	mov	r1, #0
   208a0:	lsl	r2, r2, #8
   208a4:	add	r1, r1, #8
   208a8:	cmp	r2, #16777216	; 0x1000000
   208ac:	bcc	208a0 <__assert_fail@plt+0xf580>
   208b0:	cmp	r2, #0
   208b4:	bmi	208c8 <__assert_fail@plt+0xf5a8>
   208b8:	lsl	r2, r2, #1
   208bc:	add	r1, r1, #1
   208c0:	cmn	r2, #1
   208c4:	bgt	208b8 <__assert_fail@plt+0xf598>
   208c8:	sub	r7, r0, r1
   208cc:	mov	r0, r6
   208d0:	mov	r1, r6
   208d4:	mov	r3, #2
   208d8:	mov	r2, r7
   208dc:	bl	1dcc8 <__assert_fail@plt+0xc9a8>
   208e0:	mov	r0, r5
   208e4:	mov	r1, r5
   208e8:	mov	r2, r7
   208ec:	bl	1cb8c <__assert_fail@plt+0xb86c>
   208f0:	mov	r0, r9
   208f4:	mov	r1, r9
   208f8:	b	206e8 <__assert_fail@plt+0xf3c8>
   208fc:	add	r0, sp, #48	; 0x30
   20900:	mov	r1, r9
   20904:	bl	2513c <__assert_fail@plt+0x13e1c>
   20908:	sub	r5, fp, #52	; 0x34
   2090c:	mov	r2, r8
   20910:	mov	r0, r5
   20914:	mov	r1, r5
   20918:	bl	1cb8c <__assert_fail@plt+0xb86c>
   2091c:	ldr	r0, [fp, #-60]	; 0xffffffc4
   20920:	ldr	r2, [sp, #16]
   20924:	mov	r1, #0
   20928:	mov	r3, r5
   2092c:	rsb	r6, r0, #0
   20930:	mov	r0, #2
   20934:	str	r0, [sp]
   20938:	add	r0, sp, #60	; 0x3c
   2093c:	str	r6, [fp, #-60]	; 0xffffffc4
   20940:	bl	1d0f8 <__assert_fail@plt+0xbdd8>
   20944:	ldr	r2, [sp, #32]
   20948:	cmp	r0, #0
   2094c:	bne	21088 <__assert_fail@plt+0xfd68>
   20950:	ldr	r0, [sp, #64]	; 0x40
   20954:	sub	r3, fp, #52	; 0x34
   20958:	mov	r1, #0
   2095c:	cmp	r0, #0
   20960:	rsbmi	r0, r0, #0
   20964:	str	r0, [sp, #64]	; 0x40
   20968:	mov	r0, #2
   2096c:	str	r0, [sp]
   20970:	add	r0, sp, #36	; 0x24
   20974:	bl	1d0f8 <__assert_fail@plt+0xbdd8>
   20978:	cmp	r0, #0
   2097c:	bne	21088 <__assert_fail@plt+0xfd68>
   20980:	ldr	r0, [sp, #40]	; 0x28
   20984:	cmp	r0, #0
   20988:	rsbmi	r0, r0, #0
   2098c:	cmp	sl, #0
   20990:	str	r0, [sp, #40]	; 0x28
   20994:	beq	20a70 <__assert_fail@plt+0xf750>
   20998:	sub	r4, fp, #64	; 0x40
   2099c:	add	r5, sp, #48	; 0x30
   209a0:	add	r8, sp, #60	; 0x3c
   209a4:	add	r7, sp, #36	; 0x24
   209a8:	ldr	r0, [fp, #-56]	; 0xffffffc8
   209ac:	cmp	r6, #0
   209b0:	movwne	r6, #1
   209b4:	ldr	r0, [r0]
   209b8:	tst	r0, r6
   209bc:	bne	209e0 <__assert_fail@plt+0xf6c0>
   209c0:	ldr	r1, [sp, #56]	; 0x38
   209c4:	ldr	r0, [sp, #52]	; 0x34
   209c8:	ldr	r1, [r1]
   209cc:	cmp	r0, #0
   209d0:	mov	r2, r0
   209d4:	movwne	r2, #1
   209d8:	tst	r1, r2
   209dc:	beq	20a0c <__assert_fail@plt+0xf6ec>
   209e0:	mov	r0, r4
   209e4:	mov	r1, r4
   209e8:	mov	r2, r8
   209ec:	bl	1c674 <__assert_fail@plt+0xb354>
   209f0:	mov	r0, r5
   209f4:	mov	r1, r5
   209f8:	mov	r2, r7
   209fc:	bl	1bd0c <__assert_fail@plt+0xa9ec>
   20a00:	ldr	r1, [sp, #56]	; 0x38
   20a04:	ldr	r0, [sp, #52]	; 0x34
   20a08:	ldr	r1, [r1]
   20a0c:	cmp	r0, #0
   20a10:	movwne	r0, #1
   20a14:	tst	r1, r0
   20a18:	bne	21068 <__assert_fail@plt+0xfd48>
   20a1c:	ldr	r1, [fp, #-56]	; 0xffffffc8
   20a20:	ldr	r0, [fp, #-60]	; 0xffffffc4
   20a24:	ldr	r1, [r1]
   20a28:	cmp	r0, #0
   20a2c:	movwne	r0, #1
   20a30:	tst	r1, r0
   20a34:	bne	21068 <__assert_fail@plt+0xfd48>
   20a38:	mov	r0, r4
   20a3c:	mov	r1, r4
   20a40:	mov	r2, #1
   20a44:	mov	r3, #2
   20a48:	sub	sl, sl, #1
   20a4c:	bl	1dcc8 <__assert_fail@plt+0xc9a8>
   20a50:	mov	r0, r5
   20a54:	mov	r1, r5
   20a58:	mov	r2, #1
   20a5c:	mov	r3, #2
   20a60:	bl	1dcc8 <__assert_fail@plt+0xc9a8>
   20a64:	ldr	r6, [fp, #-60]	; 0xffffffc4
   20a68:	cmp	sl, #0
   20a6c:	bne	209a8 <__assert_fail@plt+0xf688>
   20a70:	add	r0, sp, #60	; 0x3c
   20a74:	sub	r1, fp, #64	; 0x40
   20a78:	mov	r2, r0
   20a7c:	bl	1bd0c <__assert_fail@plt+0xa9ec>
   20a80:	ldr	sl, [sp, #64]	; 0x40
   20a84:	cmp	r6, #0
   20a88:	ldr	r8, [sp, #68]	; 0x44
   20a8c:	ldr	r9, [sp, #12]
   20a90:	ldr	r5, [sp, #28]
   20a94:	ldr	r0, [fp, #-56]	; 0xffffffc8
   20a98:	mov	r1, r6
   20a9c:	rsbmi	r1, r6, #0
   20aa0:	cmp	sl, #0
   20aa4:	mov	r2, sl
   20aa8:	rsbmi	r2, sl, #0
   20aac:	cmp	r1, r2
   20ab0:	bne	20aec <__assert_fail@plt+0xf7cc>
   20ab4:	sub	r2, r0, #4
   20ab8:	sub	r3, r8, #4
   20abc:	cmp	r1, #1
   20ac0:	blt	20ae0 <__assert_fail@plt+0xf7c0>
   20ac4:	sub	r7, r1, #1
   20ac8:	ldr	r4, [r3, r1, lsl #2]
   20acc:	ldr	r1, [r2, r1, lsl #2]
   20ad0:	cmp	r1, r4
   20ad4:	mov	r1, r7
   20ad8:	beq	20abc <__assert_fail@plt+0xf79c>
   20adc:	bhi	20af0 <__assert_fail@plt+0xf7d0>
   20ae0:	mov	r8, r0
   20ae4:	mov	sl, r6
   20ae8:	b	20b24 <__assert_fail@plt+0xf804>
   20aec:	blt	20ae0 <__assert_fail@plt+0xf7c0>
   20af0:	str	sl, [fp, #-60]	; 0xffffffc4
   20af4:	str	r8, [fp, #-56]	; 0xffffffc8
   20af8:	str	r6, [sp, #64]	; 0x40
   20afc:	str	r0, [sp, #68]	; 0x44
   20b00:	add	r2, sp, #36	; 0x24
   20b04:	ldr	r0, [fp, #-64]	; 0xffffffc0
   20b08:	ldr	r1, [sp, #60]	; 0x3c
   20b0c:	str	r0, [sp, #60]	; 0x3c
   20b10:	add	r0, sp, #48	; 0x30
   20b14:	str	r1, [fp, #-64]	; 0xffffffc0
   20b18:	mov	r1, r0
   20b1c:	bl	1c674 <__assert_fail@plt+0xb354>
   20b20:	ldr	r5, [sp, #28]
   20b24:	ldr	r0, [sp, #32]
   20b28:	ldr	r3, [sp, #20]
   20b2c:	ldr	r0, [r0, #4]
   20b30:	cmn	r0, #1
   20b34:	ldr	r0, [sp, #16]
   20b38:	rsble	sl, sl, #0
   20b3c:	strle	sl, [fp, #-60]	; 0xffffffc4
   20b40:	ldr	r0, [r0, #4]
   20b44:	cmn	r0, #1
   20b48:	bgt	20b58 <__assert_fail@plt+0xf838>
   20b4c:	ldr	r0, [sp, #52]	; 0x34
   20b50:	rsb	r0, r0, #0
   20b54:	str	r0, [sp, #52]	; 0x34
   20b58:	ldr	r0, [r5, #4]
   20b5c:	ldr	r1, [fp, #-48]	; 0xffffffd0
   20b60:	cmp	r9, #0
   20b64:	str	r1, [r5, #4]
   20b68:	str	r0, [fp, #-48]	; 0xffffffd0
   20b6c:	ldr	r0, [r5]
   20b70:	ldr	r1, [fp, #-52]	; 0xffffffcc
   20b74:	str	r1, [r5]
   20b78:	str	r0, [fp, #-52]	; 0xffffffcc
   20b7c:	ldr	r1, [r5, #8]
   20b80:	ldr	r2, [fp, #-44]	; 0xffffffd4
   20b84:	str	r2, [r5, #8]
   20b88:	str	r1, [fp, #-44]	; 0xffffffd4
   20b8c:	beq	20bbc <__assert_fail@plt+0xf89c>
   20b90:	ldr	r1, [r9, #4]
   20b94:	str	sl, [r9, #4]
   20b98:	str	r1, [fp, #-60]	; 0xffffffc4
   20b9c:	ldr	r1, [r9]
   20ba0:	ldr	r2, [fp, #-64]	; 0xffffffc0
   20ba4:	str	r2, [r9]
   20ba8:	str	r1, [fp, #-64]	; 0xffffffc0
   20bac:	ldr	r1, [r9, #8]
   20bb0:	str	r8, [r9, #8]
   20bb4:	mov	r8, r1
   20bb8:	str	r1, [fp, #-56]	; 0xffffffc8
   20bbc:	cmp	r3, #0
   20bc0:	beq	20bf4 <__assert_fail@plt+0xf8d4>
   20bc4:	ldr	r1, [r3, #4]
   20bc8:	ldr	r2, [sp, #52]	; 0x34
   20bcc:	str	r2, [r3, #4]
   20bd0:	str	r1, [sp, #52]	; 0x34
   20bd4:	ldr	r1, [r3]
   20bd8:	ldr	r2, [sp, #48]	; 0x30
   20bdc:	str	r2, [r3]
   20be0:	str	r1, [sp, #48]	; 0x30
   20be4:	ldr	r1, [r3, #8]
   20be8:	ldr	r2, [sp, #56]	; 0x38
   20bec:	str	r2, [r3, #8]
   20bf0:	str	r1, [sp, #56]	; 0x38
   20bf4:	ldr	r1, [fp, #-40]	; 0xffffffd8
   20bf8:	movw	r5, #12580	; 0x3124
   20bfc:	movt	r5, #4
   20c00:	cmp	r1, #0
   20c04:	beq	20c1c <__assert_fail@plt+0xf8fc>
   20c08:	ldr	r2, [r5]
   20c0c:	ldr	r0, [fp, #-32]	; 0xffffffe0
   20c10:	lsl	r1, r1, #2
   20c14:	blx	r2
   20c18:	ldr	r0, [fp, #-52]	; 0xffffffcc
   20c1c:	cmp	r0, #0
   20c20:	beq	20c34 <__assert_fail@plt+0xf914>
   20c24:	lsl	r1, r0, #2
   20c28:	ldr	r2, [r5]
   20c2c:	ldr	r0, [fp, #-44]	; 0xffffffd4
   20c30:	blx	r2
   20c34:	ldr	r0, [fp, #-64]	; 0xffffffc0
   20c38:	cmp	r0, #0
   20c3c:	beq	20c50 <__assert_fail@plt+0xf930>
   20c40:	ldr	r2, [r5]
   20c44:	lsl	r1, r0, #2
   20c48:	mov	r0, r8
   20c4c:	blx	r2
   20c50:	ldr	r0, [sp, #60]	; 0x3c
   20c54:	cmp	r0, #0
   20c58:	beq	20c6c <__assert_fail@plt+0xf94c>
   20c5c:	lsl	r1, r0, #2
   20c60:	ldr	r2, [r5]
   20c64:	ldr	r0, [sp, #68]	; 0x44
   20c68:	blx	r2
   20c6c:	ldr	r0, [sp, #48]	; 0x30
   20c70:	cmp	r0, #0
   20c74:	beq	20c88 <__assert_fail@plt+0xf968>
   20c78:	lsl	r1, r0, #2
   20c7c:	ldr	r2, [r5]
   20c80:	ldr	r0, [sp, #56]	; 0x38
   20c84:	blx	r2
   20c88:	ldr	r0, [sp, #36]	; 0x24
   20c8c:	cmp	r0, #0
   20c90:	beq	21060 <__assert_fail@plt+0xfd40>
   20c94:	lsl	r1, r0, #2
   20c98:	ldr	r2, [r5]
   20c9c:	ldr	r0, [sp, #44]	; 0x2c
   20ca0:	blx	r2
   20ca4:	sub	sp, fp, #28
   20ca8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20cac:	movw	r0, #12572	; 0x311c
   20cb0:	movt	r0, #4
   20cb4:	ldr	r1, [r0]
   20cb8:	lsl	r0, r5, #2
   20cbc:	blx	r1
   20cc0:	ldr	ip, [sp, #28]
   20cc4:	str	r0, [ip, #8]
   20cc8:	str	r5, [ip]
   20ccc:	ldr	r1, [ip, #4]
   20cd0:	cmp	r1, #0
   20cd4:	rsbmi	r1, r1, #0
   20cd8:	cmp	r1, r5
   20cdc:	movgt	r1, #0
   20ce0:	strgt	r1, [ip, #4]
   20ce4:	cmp	r8, #1
   20ce8:	blt	20e4c <__assert_fail@plt+0xfb2c>
   20cec:	ldr	r1, [r9, #8]
   20cf0:	mov	r2, #0
   20cf4:	cmp	r8, #4
   20cf8:	bcc	20de0 <__assert_fail@plt+0xfac0>
   20cfc:	add	r3, r1, r8, lsl #2
   20d00:	cmp	r0, r3
   20d04:	addcc	r3, r0, r8, lsl #2
   20d08:	cmpcc	r1, r3
   20d0c:	bcc	20de0 <__assert_fail@plt+0xfac0>
   20d10:	bic	r2, r8, #-2147483645	; 0x80000003
   20d14:	mov	r3, #1
   20d18:	str	sl, [sp, #12]
   20d1c:	mov	sl, #0
   20d20:	str	r4, [sp, #16]
   20d24:	sub	r5, r2, #4
   20d28:	add	r3, r3, r5, lsr #2
   20d2c:	cmp	r5, #12
   20d30:	and	r7, r3, #3
   20d34:	str	r7, [sp, #20]
   20d38:	bcc	20da0 <__assert_fail@plt+0xfa80>
   20d3c:	ldr	r7, [sp, #20]
   20d40:	mov	sl, #0
   20d44:	sub	lr, r3, r7
   20d48:	mov	r3, #0
   20d4c:	add	r4, r1, r3
   20d50:	mov	r5, #48	; 0x30
   20d54:	add	r6, r0, r3
   20d58:	add	r3, r3, #64	; 0x40
   20d5c:	subs	lr, lr, #4
   20d60:	add	sl, sl, #16
   20d64:	mov	r7, r4
   20d68:	mov	ip, r6
   20d6c:	add	r9, r4, #16
   20d70:	add	r4, r4, #32
   20d74:	vld1.32	{d16-d17}, [r7], r5
   20d78:	vst1.32	{d16-d17}, [ip], r5
   20d7c:	add	r5, r6, #16
   20d80:	vld1.32	{d16-d17}, [r9]
   20d84:	vst1.32	{d16-d17}, [r5]
   20d88:	vld1.32	{d16-d17}, [r4]
   20d8c:	add	r4, r6, #32
   20d90:	vst1.32	{d16-d17}, [r4]
   20d94:	vld1.32	{d16-d17}, [r7]
   20d98:	vst1.32	{d16-d17}, [ip]
   20d9c:	bne	20d4c <__assert_fail@plt+0xfa2c>
   20da0:	ldr	r7, [sp, #20]
   20da4:	cmp	r7, #0
   20da8:	beq	20dc8 <__assert_fail@plt+0xfaa8>
   20dac:	add	r3, r1, sl, lsl #2
   20db0:	add	r6, r0, sl, lsl #2
   20db4:	rsb	r5, r7, #0
   20db8:	vld1.32	{d16-d17}, [r3]!
   20dbc:	adds	r5, r5, #1
   20dc0:	vst1.32	{d16-d17}, [r6]!
   20dc4:	bcc	20db8 <__assert_fail@plt+0xfa98>
   20dc8:	ldr	sl, [sp, #12]
   20dcc:	ldr	ip, [sp, #28]
   20dd0:	ldr	r9, [fp, #8]
   20dd4:	ldr	r4, [sp, #16]
   20dd8:	cmp	r8, r2
   20ddc:	beq	20e4c <__assert_fail@plt+0xfb2c>
   20de0:	mvn	r3, r2
   20de4:	ands	r6, r8, #3
   20de8:	add	r3, r8, r3
   20dec:	beq	20e04 <__assert_fail@plt+0xfae4>
   20df0:	ldr	r7, [r1, r2, lsl #2]
   20df4:	subs	r6, r6, #1
   20df8:	str	r7, [r0, r2, lsl #2]
   20dfc:	add	r2, r2, #1
   20e00:	bne	20df0 <__assert_fail@plt+0xfad0>
   20e04:	cmp	r3, #3
   20e08:	bcc	20e4c <__assert_fail@plt+0xfb2c>
   20e0c:	sub	r3, r8, r2
   20e10:	lsl	r2, r2, #2
   20e14:	add	r7, r1, #16
   20e18:	ldr	r6, [r1, r2]!
   20e1c:	add	r5, r0, #16
   20e20:	subs	r3, r3, #4
   20e24:	str	r6, [r0, r2]!
   20e28:	ldr	r6, [r1, #4]
   20e2c:	str	r6, [r0, #4]
   20e30:	ldr	r6, [r1, #8]
   20e34:	str	r6, [r0, #8]
   20e38:	ldr	r1, [r1, #12]
   20e3c:	str	r1, [r0, #12]
   20e40:	mov	r1, r7
   20e44:	mov	r0, r5
   20e48:	bne	20e14 <__assert_fail@plt+0xfaf4>
   20e4c:	ldr	r8, [r9, #4]
   20e50:	ldr	r1, [sp, #24]
   20e54:	str	r8, [ip, #4]
   20e58:	cmp	r8, #0
   20e5c:	rsbmi	r8, r8, #0
   20e60:	cmp	r1, #0
   20e64:	movne	r0, #0
   20e68:	str	r8, [ip, #4]
   20e6c:	strne	r0, [r1, #4]
   20e70:	cmp	sl, #0
   20e74:	beq	21060 <__assert_fail@plt+0xfd40>
   20e78:	mov	r0, sl
   20e7c:	mov	r1, r4
   20e80:	bl	1a470 <__assert_fail@plt+0x9150>
   20e84:	sub	sp, fp, #28
   20e88:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20e8c:	movw	r0, #12572	; 0x311c
   20e90:	movt	r0, #4
   20e94:	ldr	r1, [r0]
   20e98:	lsl	r0, r6, #2
   20e9c:	blx	r1
   20ea0:	ldr	ip, [sp, #28]
   20ea4:	str	r0, [ip, #8]
   20ea8:	str	r6, [ip]
   20eac:	ldr	r1, [ip, #4]
   20eb0:	ldr	r3, [sp, #20]
   20eb4:	cmp	r1, #0
   20eb8:	rsbmi	r1, r1, #0
   20ebc:	cmp	r1, r6
   20ec0:	movgt	r1, #0
   20ec4:	strgt	r1, [ip, #4]
   20ec8:	ldr	r1, [r3, #8]
   20ecc:	mov	r2, #0
   20ed0:	cmp	r9, #4
   20ed4:	bcc	20fbc <__assert_fail@plt+0xfc9c>
   20ed8:	add	r7, r1, r9, lsl #2
   20edc:	cmp	r0, r7
   20ee0:	addcc	r7, r0, r9, lsl #2
   20ee4:	cmpcc	r1, r7
   20ee8:	bcc	20fbc <__assert_fail@plt+0xfc9c>
   20eec:	bic	r2, r9, #-2147483645	; 0x80000003
   20ef0:	mov	r3, #1
   20ef4:	str	r8, [sp, #16]
   20ef8:	mov	r8, #0
   20efc:	str	sl, [sp, #12]
   20f00:	sub	r6, r2, #4
   20f04:	add	r3, r3, r6, lsr #2
   20f08:	cmp	r6, #12
   20f0c:	and	r7, r3, #3
   20f10:	str	r7, [sp, #32]
   20f14:	bcc	20f7c <__assert_fail@plt+0xfc5c>
   20f18:	ldr	r7, [sp, #32]
   20f1c:	mov	r8, #0
   20f20:	sub	lr, r3, r7
   20f24:	mov	r3, #0
   20f28:	add	r4, r1, r3
   20f2c:	mov	r6, #48	; 0x30
   20f30:	add	r7, r0, r3
   20f34:	add	r3, r3, #64	; 0x40
   20f38:	subs	lr, lr, #4
   20f3c:	add	r8, r8, #16
   20f40:	mov	r5, r4
   20f44:	mov	ip, r7
   20f48:	add	sl, r4, #16
   20f4c:	add	r4, r4, #32
   20f50:	vld1.32	{d16-d17}, [r5], r6
   20f54:	vst1.32	{d16-d17}, [ip], r6
   20f58:	add	r6, r7, #16
   20f5c:	vld1.32	{d16-d17}, [sl]
   20f60:	vst1.32	{d16-d17}, [r6]
   20f64:	vld1.32	{d16-d17}, [r4]
   20f68:	add	r4, r7, #32
   20f6c:	vst1.32	{d16-d17}, [r4]
   20f70:	vld1.32	{d16-d17}, [r5]
   20f74:	vst1.32	{d16-d17}, [ip]
   20f78:	bne	20f28 <__assert_fail@plt+0xfc08>
   20f7c:	ldr	r6, [sp, #32]
   20f80:	cmp	r6, #0
   20f84:	beq	20fa4 <__assert_fail@plt+0xfc84>
   20f88:	add	r3, r1, r8, lsl #2
   20f8c:	add	r7, r0, r8, lsl #2
   20f90:	rsb	r6, r6, #0
   20f94:	vld1.32	{d16-d17}, [r3]!
   20f98:	adds	r6, r6, #1
   20f9c:	vst1.32	{d16-d17}, [r7]!
   20fa0:	bcc	20f94 <__assert_fail@plt+0xfc74>
   20fa4:	ldr	sl, [sp, #12]
   20fa8:	ldr	ip, [sp, #28]
   20fac:	ldr	r3, [sp, #20]
   20fb0:	ldr	r8, [sp, #16]
   20fb4:	cmp	r9, r2
   20fb8:	beq	21028 <__assert_fail@plt+0xfd08>
   20fbc:	mvn	r7, r2
   20fc0:	add	r5, r9, r7
   20fc4:	ands	r7, r9, #3
   20fc8:	beq	20fe0 <__assert_fail@plt+0xfcc0>
   20fcc:	ldr	r6, [r1, r2, lsl #2]
   20fd0:	subs	r7, r7, #1
   20fd4:	str	r6, [r0, r2, lsl #2]
   20fd8:	add	r2, r2, #1
   20fdc:	bne	20fcc <__assert_fail@plt+0xfcac>
   20fe0:	cmp	r5, #3
   20fe4:	bcc	21028 <__assert_fail@plt+0xfd08>
   20fe8:	sub	r4, r9, r2
   20fec:	lsl	r2, r2, #2
   20ff0:	add	r7, r1, #16
   20ff4:	ldr	r6, [r1, r2]!
   20ff8:	add	r5, r0, #16
   20ffc:	subs	r4, r4, #4
   21000:	str	r6, [r0, r2]!
   21004:	ldr	r6, [r1, #4]
   21008:	str	r6, [r0, #4]
   2100c:	ldr	r6, [r1, #8]
   21010:	str	r6, [r0, #8]
   21014:	ldr	r1, [r1, #12]
   21018:	str	r1, [r0, #12]
   2101c:	mov	r1, r7
   21020:	mov	r0, r5
   21024:	bne	20ff0 <__assert_fail@plt+0xfcd0>
   21028:	ldr	r9, [r3, #4]
   2102c:	ldr	r1, [sp, #24]
   21030:	str	r9, [ip, #4]
   21034:	cmp	r9, #0
   21038:	rsbmi	r9, r9, #0
   2103c:	cmp	r1, #0
   21040:	movne	r0, r1
   21044:	movne	r1, r8
   21048:	str	r9, [ip, #4]
   2104c:	blne	1a470 <__assert_fail@plt+0x9150>
   21050:	cmp	sl, #0
   21054:	beq	21060 <__assert_fail@plt+0xfd40>
   21058:	mov	r0, #0
   2105c:	str	r0, [sl, #4]
   21060:	sub	sp, fp, #28
   21064:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21068:	movw	r0, #3139	; 0xc43
   2106c:	movw	r1, #1996	; 0x7cc
   21070:	movw	r3, #3174	; 0xc66
   21074:	movw	r2, #2950	; 0xb86
   21078:	movt	r0, #3
   2107c:	movt	r1, #3
   21080:	movt	r3, #3
   21084:	bl	11320 <__assert_fail@plt>
   21088:	movw	r0, #2977	; 0xba1
   2108c:	movw	r1, #1996	; 0x7cc
   21090:	movw	r3, #2987	; 0xbab
   21094:	movw	r2, #2521	; 0x9d9
   21098:	movt	r0, #3
   2109c:	movt	r1, #3
   210a0:	movt	r3, #3
   210a4:	bl	11320 <__assert_fail@plt>
   210a8:	str	r1, [fp, #-36]	; 0xffffffdc
   210ac:	movw	r0, #5498	; 0x157a
   210b0:	movw	r1, #1996	; 0x7cc
   210b4:	movw	r3, #5514	; 0x158a
   210b8:	movw	r2, #2723	; 0xaa3
   210bc:	movt	r0, #3
   210c0:	movt	r1, #3
   210c4:	movt	r3, #3
   210c8:	bl	11320 <__assert_fail@plt>
   210cc:	push	{r4, r5, r6, sl, fp, lr}
   210d0:	add	fp, sp, #16
   210d4:	ldr	r2, [r0, #4]
   210d8:	cmp	r2, #0
   210dc:	mov	r3, r2
   210e0:	rsbmi	r3, r2, #0
   210e4:	cmp	r3, r1, lsr #5
   210e8:	ble	21144 <__assert_fail@plt+0xfe24>
   210ec:	ldr	lr, [r0, #8]
   210f0:	lsr	r6, r1, #5
   210f4:	and	r5, r1, #31
   210f8:	mov	r3, #1
   210fc:	cmn	r2, #1
   21100:	ldr	r4, [lr, r6, lsl #2]
   21104:	and	ip, r3, r4, lsr r5
   21108:	bgt	21148 <__assert_fail@plt+0xfe28>
   2110c:	cmp	r5, #0
   21110:	rsbne	r3, r5, #32
   21114:	movne	r5, #0
   21118:	cmpne	r5, r4, lsl r3
   2111c:	bne	2113c <__assert_fail@plt+0xfe1c>
   21120:	sub	r4, lr, #4
   21124:	subs	r3, r6, #1
   21128:	blt	21148 <__assert_fail@plt+0xfe28>
   2112c:	ldr	r6, [r4, r6, lsl #2]
   21130:	cmp	r6, #0
   21134:	mov	r6, r3
   21138:	beq	21124 <__assert_fail@plt+0xfe04>
   2113c:	eor	ip, ip, #1
   21140:	b	21148 <__assert_fail@plt+0xfe28>
   21144:	lsr	ip, r2, #31
   21148:	cmp	ip, #0
   2114c:	popne	{r4, r5, r6, sl, fp, pc}
   21150:	cmp	r2, #0
   21154:	bmi	21160 <__assert_fail@plt+0xfe40>
   21158:	pop	{r4, r5, r6, sl, fp, lr}
   2115c:	b	2513c <__assert_fail@plt+0x13e1c>
   21160:	pop	{r4, r5, r6, sl, fp, lr}
   21164:	b	25348 <__assert_fail@plt+0x14028>
   21168:	push	{r4, r5, r6, r7, fp, lr}
   2116c:	add	fp, sp, #16
   21170:	sub	sp, sp, #16
   21174:	mov	r4, r0
   21178:	ldr	r0, [r1, #4]
   2117c:	cmp	r0, #0
   21180:	beq	21228 <__assert_fail@plt+0xff08>
   21184:	ldr	r0, [r2, #4]
   21188:	mov	r5, r2
   2118c:	cmp	r0, #0
   21190:	beq	21228 <__assert_fail@plt+0xff08>
   21194:	movw	r0, #1992	; 0x7c8
   21198:	add	r7, sp, #4
   2119c:	mov	r2, r5
   211a0:	mov	r6, r1
   211a4:	movt	r0, #3
   211a8:	str	r0, [sp, #12]
   211ac:	mov	r0, #0
   211b0:	str	r0, [sp, #8]
   211b4:	str	r0, [sp, #4]
   211b8:	mov	r0, r7
   211bc:	bl	1eff0 <__assert_fail@plt+0xdcd0>
   211c0:	mov	r0, #2
   211c4:	mov	r1, #0
   211c8:	mov	r2, r6
   211cc:	mov	r3, r7
   211d0:	str	r0, [sp]
   211d4:	mov	r0, r7
   211d8:	bl	1d0f8 <__assert_fail@plt+0xbdd8>
   211dc:	cmp	r0, #0
   211e0:	bne	21238 <__assert_fail@plt+0xff18>
   211e4:	add	r1, sp, #4
   211e8:	mov	r0, r4
   211ec:	mov	r2, r5
   211f0:	bl	1ca60 <__assert_fail@plt+0xb740>
   211f4:	ldr	r0, [sp, #4]
   211f8:	cmp	r0, #0
   211fc:	beq	21218 <__assert_fail@plt+0xfef8>
   21200:	movw	r1, #12580	; 0x3124
   21204:	movt	r1, #4
   21208:	ldr	r2, [r1]
   2120c:	lsl	r1, r0, #2
   21210:	ldr	r0, [sp, #12]
   21214:	blx	r2
   21218:	ldr	r0, [r4, #4]
   2121c:	cmp	r0, #0
   21220:	rsbmi	r0, r0, #0
   21224:	b	2122c <__assert_fail@plt+0xff0c>
   21228:	mov	r0, #0
   2122c:	str	r0, [r4, #4]
   21230:	sub	sp, fp, #16
   21234:	pop	{r4, r5, r6, r7, fp, pc}
   21238:	movw	r0, #2977	; 0xba1
   2123c:	movw	r1, #1996	; 0x7cc
   21240:	movw	r3, #2987	; 0xbab
   21244:	movw	r2, #2521	; 0x9d9
   21248:	movt	r0, #3
   2124c:	movt	r1, #3
   21250:	movt	r3, #3
   21254:	bl	11320 <__assert_fail@plt>
   21258:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2125c:	add	fp, sp, #28
   21260:	sub	sp, sp, #12
   21264:	mov	r4, r0
   21268:	cmp	r2, #0
   2126c:	beq	212d4 <__assert_fail@plt+0xffb4>
   21270:	ldr	r0, [r1, #4]
   21274:	mov	r5, r1
   21278:	cmp	r0, #0
   2127c:	beq	212d4 <__assert_fail@plt+0xffb4>
   21280:	movw	sl, #12572	; 0x311c
   21284:	mov	r7, #1
   21288:	mov	r0, #4
   2128c:	mov	r6, r2
   21290:	movt	sl, #4
   21294:	str	r7, [sp, #4]
   21298:	ldr	r1, [sl]
   2129c:	blx	r1
   212a0:	str	r0, [sp, #8]
   212a4:	str	r7, [sp]
   212a8:	str	r6, [r0]
   212ac:	mov	r0, sp
   212b0:	mov	r1, r5
   212b4:	mov	r2, r0
   212b8:	bl	1eff0 <__assert_fail@plt+0xdcd0>
   212bc:	ldr	r0, [sp, #4]
   212c0:	cmp	r0, #0
   212c4:	beq	212dc <__assert_fail@plt+0xffbc>
   212c8:	ldr	r0, [sp, #8]
   212cc:	ldr	r9, [r0]
   212d0:	b	212e0 <__assert_fail@plt+0xffc0>
   212d4:	mov	r0, #0
   212d8:	b	21394 <__assert_fail@plt+0x10074>
   212dc:	mov	r9, #0
   212e0:	ldr	r0, [sp]
   212e4:	movw	r8, #12580	; 0x3124
   212e8:	movt	r8, #4
   212ec:	cmp	r0, #0
   212f0:	beq	21304 <__assert_fail@plt+0xffe4>
   212f4:	lsl	r1, r0, #2
   212f8:	ldr	r2, [r8]
   212fc:	ldr	r0, [sp, #8]
   21300:	blx	r2
   21304:	movw	r0, #1992	; 0x7c8
   21308:	cmp	r9, r6
   2130c:	movt	r0, #3
   21310:	str	r0, [sp, #8]
   21314:	mov	r0, #0
   21318:	str	r0, [sp, #4]
   2131c:	str	r0, [sp]
   21320:	bls	2133c <__assert_fail@plt+0x1001c>
   21324:	str	r0, [sp, #4]
   21328:	mov	r2, sp
   2132c:	mov	r0, r4
   21330:	mov	r1, r5
   21334:	bl	1ca60 <__assert_fail@plt+0xb740>
   21338:	b	21388 <__assert_fail@plt+0x10068>
   2133c:	mov	r0, sl
   21340:	mov	sl, #1
   21344:	ldr	r1, [r0]
   21348:	mov	r0, #4
   2134c:	str	sl, [sp, #4]
   21350:	blx	r1
   21354:	str	r0, [sp, #8]
   21358:	mov	r7, r0
   2135c:	udiv	r0, r6, r9
   21360:	str	sl, [sp]
   21364:	mov	r2, sp
   21368:	mov	r1, r5
   2136c:	str	r0, [r7]
   21370:	mov	r0, r4
   21374:	bl	1ca60 <__assert_fail@plt+0xb740>
   21378:	ldr	r2, [r8]
   2137c:	mov	r0, r7
   21380:	mov	r1, #4
   21384:	blx	r2
   21388:	ldr	r0, [r4, #4]
   2138c:	cmp	r0, #0
   21390:	rsbmi	r0, r0, #0
   21394:	str	r0, [r4, #4]
   21398:	sub	sp, fp, #28
   2139c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   213a0:	push	{r4, r5, r6, sl, fp, lr}
   213a4:	add	fp, sp, #16
   213a8:	sub	sp, sp, #32
   213ac:	mov	r5, r0
   213b0:	ldr	r0, [r1, #4]
   213b4:	mov	r4, #0
   213b8:	cmp	r0, #0
   213bc:	beq	214fc <__assert_fail@plt+0x101dc>
   213c0:	ldr	r0, [r2, #4]
   213c4:	mov	r3, r1
   213c8:	mov	r6, r2
   213cc:	cmp	r0, #0
   213d0:	mov	r1, r0
   213d4:	rsbmi	r1, r0, #0
   213d8:	cmp	r1, #1
   213dc:	bgt	213f8 <__assert_fail@plt+0x100d8>
   213e0:	cmp	r0, #0
   213e4:	beq	214fc <__assert_fail@plt+0x101dc>
   213e8:	ldr	r0, [r6, #8]
   213ec:	ldr	r0, [r0]
   213f0:	cmp	r0, #2
   213f4:	bcc	214fc <__assert_fail@plt+0x101dc>
   213f8:	movw	r0, #1992	; 0x7c8
   213fc:	mov	r4, #0
   21400:	add	r1, sp, #8
   21404:	mov	r2, #0
   21408:	str	r6, [sp]
   2140c:	movt	r0, #3
   21410:	str	r0, [sp, #28]
   21414:	str	r0, [sp, #16]
   21418:	add	r0, sp, #20
   2141c:	str	r4, [sp, #24]
   21420:	str	r4, [sp, #12]
   21424:	str	r4, [sp, #20]
   21428:	str	r4, [sp, #8]
   2142c:	bl	1fe18 <__assert_fail@plt+0xeaf8>
   21430:	ldr	r0, [sp, #24]
   21434:	cmp	r0, #1
   21438:	bne	214bc <__assert_fail@plt+0x1019c>
   2143c:	ldr	r0, [sp, #28]
   21440:	ldr	r0, [r0]
   21444:	cmp	r0, #1
   21448:	bne	214bc <__assert_fail@plt+0x1019c>
   2144c:	ldr	r0, [sp, #12]
   21450:	cmn	r0, #1
   21454:	bgt	21488 <__assert_fail@plt+0x10168>
   21458:	ldr	r0, [r6, #4]
   2145c:	cmp	r0, #0
   21460:	bmi	21478 <__assert_fail@plt+0x10158>
   21464:	add	r0, sp, #8
   21468:	mov	r2, r6
   2146c:	mov	r1, r0
   21470:	bl	1bd0c <__assert_fail@plt+0xa9ec>
   21474:	b	21488 <__assert_fail@plt+0x10168>
   21478:	add	r0, sp, #8
   2147c:	mov	r2, r6
   21480:	mov	r1, r0
   21484:	bl	1c674 <__assert_fail@plt+0xb354>
   21488:	ldr	r0, [r5, #4]
   2148c:	ldr	r1, [sp, #12]
   21490:	mov	r4, #1
   21494:	str	r1, [r5, #4]
   21498:	str	r0, [sp, #12]
   2149c:	ldr	r0, [r5]
   214a0:	ldr	r1, [sp, #8]
   214a4:	str	r1, [r5]
   214a8:	str	r0, [sp, #8]
   214ac:	ldr	r0, [r5, #8]
   214b0:	ldr	r1, [sp, #16]
   214b4:	str	r1, [r5, #8]
   214b8:	str	r0, [sp, #16]
   214bc:	ldr	r0, [sp, #20]
   214c0:	movw	r5, #12580	; 0x3124
   214c4:	movt	r5, #4
   214c8:	cmp	r0, #0
   214cc:	beq	214e0 <__assert_fail@plt+0x101c0>
   214d0:	lsl	r1, r0, #2
   214d4:	ldr	r2, [r5]
   214d8:	ldr	r0, [sp, #28]
   214dc:	blx	r2
   214e0:	ldr	r0, [sp, #8]
   214e4:	cmp	r0, #0
   214e8:	beq	214fc <__assert_fail@plt+0x101dc>
   214ec:	lsl	r1, r0, #2
   214f0:	ldr	r2, [r5]
   214f4:	ldr	r0, [sp, #16]
   214f8:	blx	r2
   214fc:	mov	r0, r4
   21500:	sub	sp, fp, #16
   21504:	pop	{r4, r5, r6, sl, fp, pc}
   21508:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   2150c:	add	fp, sp, #24
   21510:	sub	sp, sp, #16
   21514:	mov	r8, r0
   21518:	movw	r0, #12572	; 0x311c
   2151c:	mov	r9, r1
   21520:	mov	r4, #1
   21524:	mov	r5, r2
   21528:	movt	r0, #4
   2152c:	str	r4, [sp, #8]
   21530:	ldr	r1, [r0]
   21534:	mov	r0, #4
   21538:	blx	r1
   2153c:	str	r0, [sp, #12]
   21540:	str	r4, [sp, #4]
   21544:	str	r4, [r0]
   21548:	mov	r4, #-2147483648	; 0x80000000
   2154c:	add	r7, sp, #4
   21550:	mov	r6, #0
   21554:	mov	r0, r7
   21558:	mov	r1, r7
   2155c:	mov	r2, r7
   21560:	bl	1ca60 <__assert_fail@plt+0xb740>
   21564:	tst	r4, r5
   21568:	movne	r0, r7
   2156c:	movne	r1, r7
   21570:	movne	r2, r9
   21574:	blne	1ca60 <__assert_fail@plt+0xb740>
   21578:	lsr	r0, r4, #1
   2157c:	cmp	r6, r4, lsr #1
   21580:	mov	r4, r0
   21584:	bne	21554 <__assert_fail@plt+0x10234>
   21588:	ldr	r0, [r8, #4]
   2158c:	ldr	r1, [sp, #8]
   21590:	str	r1, [r8, #4]
   21594:	str	r0, [sp, #8]
   21598:	ldr	r1, [r8]
   2159c:	ldr	r0, [sp, #4]
   215a0:	str	r0, [r8]
   215a4:	str	r1, [sp, #4]
   215a8:	cmp	r1, #0
   215ac:	ldr	r0, [r8, #8]
   215b0:	ldr	r2, [sp, #12]
   215b4:	str	r2, [r8, #8]
   215b8:	str	r0, [sp, #12]
   215bc:	beq	215d4 <__assert_fail@plt+0x102b4>
   215c0:	movw	r2, #12580	; 0x3124
   215c4:	lsl	r1, r1, #2
   215c8:	movt	r2, #4
   215cc:	ldr	r2, [r2]
   215d0:	blx	r2
   215d4:	sub	sp, fp, #24
   215d8:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   215dc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   215e0:	add	fp, sp, #28
   215e4:	sub	sp, sp, #28
   215e8:	movw	r7, #12572	; 0x311c
   215ec:	mov	sl, r0
   215f0:	movw	r0, #1992	; 0x7c8
   215f4:	mov	r6, r2
   215f8:	mov	r9, #0
   215fc:	cmp	r1, #0
   21600:	movt	r0, #3
   21604:	movt	r7, #4
   21608:	str	r0, [sp, #12]
   2160c:	str	r9, [sp, #8]
   21610:	str	r9, [sp, #4]
   21614:	beq	21640 <__assert_fail@plt+0x10320>
   21618:	mov	r4, r1
   2161c:	ldr	r1, [r7]
   21620:	mov	r9, #1
   21624:	mov	r0, #4
   21628:	str	r9, [sp, #8]
   2162c:	blx	r1
   21630:	str	r0, [sp, #12]
   21634:	stm	sp, {r0, r9}
   21638:	str	r4, [r0]
   2163c:	b	21648 <__assert_fail@plt+0x10328>
   21640:	str	r0, [sp]
   21644:	str	r9, [sp, #8]
   21648:	ldr	r1, [r7]
   2164c:	mov	r4, #1
   21650:	mov	r0, #4
   21654:	str	r4, [sp, #20]
   21658:	blx	r1
   2165c:	str	r0, [sp, #24]
   21660:	str	r4, [sp, #16]
   21664:	str	r4, [r0]
   21668:	mov	r5, #-2147483648	; 0x80000000
   2166c:	add	r7, sp, #16
   21670:	mov	r8, #0
   21674:	add	r4, sp, #4
   21678:	mov	r0, r7
   2167c:	mov	r1, r7
   21680:	mov	r2, r7
   21684:	bl	1ca60 <__assert_fail@plt+0xb740>
   21688:	tst	r5, r6
   2168c:	movne	r0, r7
   21690:	movne	r1, r7
   21694:	movne	r2, r4
   21698:	blne	1ca60 <__assert_fail@plt+0xb740>
   2169c:	lsr	r0, r5, #1
   216a0:	cmp	r8, r5, lsr #1
   216a4:	mov	r5, r0
   216a8:	bne	21678 <__assert_fail@plt+0x10358>
   216ac:	ldr	r0, [sl, #4]
   216b0:	ldr	r1, [sp, #20]
   216b4:	movw	r4, #12580	; 0x3124
   216b8:	movt	r4, #4
   216bc:	str	r1, [sl, #4]
   216c0:	str	r0, [sp, #20]
   216c4:	ldr	r1, [sl]
   216c8:	ldr	r0, [sp, #16]
   216cc:	str	r0, [sl]
   216d0:	str	r1, [sp, #16]
   216d4:	cmp	r1, #0
   216d8:	ldr	r0, [sl, #8]
   216dc:	ldr	r2, [sp, #24]
   216e0:	str	r2, [sl, #8]
   216e4:	str	r0, [sp, #24]
   216e8:	beq	216f8 <__assert_fail@plt+0x103d8>
   216ec:	ldr	r2, [r4]
   216f0:	lsl	r1, r1, #2
   216f4:	blx	r2
   216f8:	cmp	r9, #0
   216fc:	beq	21710 <__assert_fail@plt+0x103f0>
   21700:	ldr	r2, [r4]
   21704:	ldr	r0, [sp]
   21708:	lsl	r1, r9, #2
   2170c:	blx	r2
   21710:	sub	sp, fp, #28
   21714:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21718:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2171c:	add	fp, sp, #28
   21720:	sub	sp, sp, #92	; 0x5c
   21724:	mov	r5, r0
   21728:	ldr	r0, [r3, #4]
   2172c:	str	r2, [sp, #36]	; 0x24
   21730:	mov	r8, r1
   21734:	mov	r4, r3
   21738:	cmp	r0, #0
   2173c:	rsbmi	r0, r0, #0
   21740:	str	r0, [sp, #48]	; 0x30
   21744:	ldr	r0, [sp, #36]	; 0x24
   21748:	ldr	r1, [r0, #4]
   2174c:	ldr	r0, [sp, #48]	; 0x30
   21750:	cmp	r1, #0
   21754:	rsbmi	r1, r1, #0
   21758:	cmp	r0, #0
   2175c:	beq	21f50 <__assert_fail@plt+0x10c30>
   21760:	cmp	r1, #0
   21764:	beq	21878 <__assert_fail@plt+0x10558>
   21768:	str	r5, [sp, #32]
   2176c:	ldr	r5, [sp, #48]	; 0x30
   21770:	str	r1, [sp, #40]	; 0x28
   21774:	ldr	r1, [r4, #8]
   21778:	add	r0, sp, #52	; 0x34
   2177c:	mov	r2, r5
   21780:	str	r1, [sp, #44]	; 0x2c
   21784:	bl	21fe0 <__assert_fail@plt+0x10cc0>
   21788:	ldr	r9, [sp, #52]	; 0x34
   2178c:	movw	r7, #12572	; 0x311c
   21790:	mov	r0, #0
   21794:	movt	r7, #4
   21798:	cmp	r9, #0
   2179c:	beq	21894 <__assert_fail@plt+0x10574>
   217a0:	ldr	r1, [r7]
   217a4:	mov	r0, #0
   217a8:	str	r0, [sp, #52]	; 0x34
   217ac:	lsl	r0, r5, #2
   217b0:	blx	r1
   217b4:	cmp	r5, #0
   217b8:	ble	21f5c <__assert_fail@plt+0x10c3c>
   217bc:	cmp	r9, #32
   217c0:	bcs	21f74 <__assert_fail@plt+0x10c54>
   217c4:	ldr	r1, [sp, #44]	; 0x2c
   217c8:	mov	sl, r0
   217cc:	add	r0, r0, r5, lsl #2
   217d0:	rsb	r3, r9, #32
   217d4:	mov	lr, r7
   217d8:	add	r6, r1, r5, lsl #2
   217dc:	ldr	r1, [r6, #-4]!
   217e0:	lsl	r2, r1, r9
   217e4:	lsr	ip, r1, r3
   217e8:	mov	r1, r5
   217ec:	subs	r5, r5, #1
   217f0:	beq	21848 <__assert_fail@plt+0x10528>
   217f4:	tst	r1, #1
   217f8:	bne	21810 <__assert_fail@plt+0x104f0>
   217fc:	ldr	r5, [r6, #-4]!
   21800:	orr	r2, r2, r5, lsr r3
   21804:	str	r2, [r0, #-4]!
   21808:	lsl	r2, r5, r9
   2180c:	sub	r5, r1, #2
   21810:	cmp	r1, #2
   21814:	beq	21848 <__assert_fail@plt+0x10528>
   21818:	sub	r6, r6, #4
   2181c:	ldr	r7, [r6]
   21820:	subs	r5, r5, #2
   21824:	orr	r2, r2, r7, lsr r3
   21828:	str	r2, [r0, #-4]
   2182c:	ldr	r1, [r6, #-4]
   21830:	sub	r6, r6, #8
   21834:	lsl	r2, r1, r9
   21838:	lsr	r1, r1, r3
   2183c:	orr	r1, r1, r7, lsl r9
   21840:	str	r1, [r0, #-8]!
   21844:	bne	2181c <__assert_fail@plt+0x104fc>
   21848:	str	r2, [r0, #-4]
   2184c:	cmp	ip, #0
   21850:	mov	ip, sl
   21854:	mov	r7, lr
   21858:	mov	r0, #0
   2185c:	str	sl, [sp, #44]	; 0x2c
   21860:	beq	21898 <__assert_fail@plt+0x10578>
   21864:	movw	r0, #2977	; 0xba1
   21868:	movw	r1, #1996	; 0x7cc
   2186c:	movw	r3, #3305	; 0xce9
   21870:	movw	r2, #3116	; 0xc2c
   21874:	b	21fa4 <__assert_fail@plt+0x10c84>
   21878:	mov	r0, #1
   2187c:	str	r0, [r5, #4]
   21880:	ldr	r1, [r5]
   21884:	cmp	r1, #0
   21888:	ble	21ac0 <__assert_fail@plt+0x107a0>
   2188c:	ldr	r0, [r5, #8]
   21890:	b	21bdc <__assert_fail@plt+0x108bc>
   21894:	mov	ip, #0
   21898:	movw	r1, #1992	; 0x7c8
   2189c:	str	ip, [sp, #28]
   218a0:	str	r9, [sp, #24]
   218a4:	movt	r1, #3
   218a8:	str	r1, [fp, #-44]	; 0xffffffd4
   218ac:	str	r0, [fp, #-48]	; 0xffffffd0
   218b0:	str	r0, [fp, #-52]	; 0xffffffcc
   218b4:	ldr	r0, [sp, #36]	; 0x24
   218b8:	ldr	r0, [r0, #4]
   218bc:	cmn	r0, #1
   218c0:	sub	r0, fp, #52	; 0x34
   218c4:	ble	21a94 <__assert_fail@plt+0x10774>
   218c8:	ldr	r5, [sp, #48]	; 0x30
   218cc:	cmp	r0, r8
   218d0:	beq	21ab8 <__assert_fail@plt+0x10798>
   218d4:	ldr	r0, [r8, #4]
   218d8:	cmp	r0, #0
   218dc:	mov	r4, r0
   218e0:	rsbmi	r4, r0, #0
   218e4:	cmp	r4, #1
   218e8:	blt	21ae4 <__assert_fail@plt+0x107c4>
   218ec:	ldr	r1, [r7]
   218f0:	lsl	r0, r4, #2
   218f4:	blx	r1
   218f8:	str	r0, [fp, #-44]	; 0xffffffd4
   218fc:	str	r4, [fp, #-52]	; 0xffffffcc
   21900:	mov	r1, r0
   21904:	mov	r2, #0
   21908:	str	r8, [sp, #20]
   2190c:	ldr	r0, [fp, #-48]	; 0xffffffd0
   21910:	cmp	r0, #0
   21914:	rsbmi	r0, r0, #0
   21918:	cmp	r0, r4
   2191c:	movgt	r0, #0
   21920:	strgt	r0, [fp, #-48]	; 0xffffffd0
   21924:	cmp	r4, #4
   21928:	ldr	r0, [r8, #8]
   2192c:	bcc	21a08 <__assert_fail@plt+0x106e8>
   21930:	add	r3, r0, r4, lsl #2
   21934:	cmp	r1, r3
   21938:	bcs	21948 <__assert_fail@plt+0x10628>
   2193c:	add	r3, r1, r4, lsl #2
   21940:	cmp	r3, r0
   21944:	bhi	21a08 <__assert_fail@plt+0x106e8>
   21948:	bic	r2, r4, #-2147483645	; 0x80000003
   2194c:	mov	r3, #1
   21950:	mov	sl, #0
   21954:	str	r4, [sp, #12]
   21958:	sub	r6, r2, #4
   2195c:	add	r3, r3, r6, lsr #2
   21960:	cmp	r6, #12
   21964:	and	r7, r3, #3
   21968:	str	r7, [sp, #16]
   2196c:	bcc	219d4 <__assert_fail@plt+0x106b4>
   21970:	ldr	r7, [sp, #16]
   21974:	mov	r5, #0
   21978:	mov	lr, #48	; 0x30
   2197c:	mov	sl, #0
   21980:	sub	r6, r3, r7
   21984:	add	r4, r0, r5
   21988:	add	r9, r1, r5
   2198c:	add	r5, r5, #64	; 0x40
   21990:	subs	r6, r6, #4
   21994:	add	sl, sl, #16
   21998:	mov	r3, r4
   2199c:	mov	ip, r9
   219a0:	add	r8, r4, #16
   219a4:	add	r7, r9, #16
   219a8:	add	r4, r4, #32
   219ac:	vld1.32	{d16-d17}, [r3], lr
   219b0:	vst1.32	{d16-d17}, [ip], lr
   219b4:	vld1.32	{d16-d17}, [r8]
   219b8:	vst1.32	{d16-d17}, [r7]
   219bc:	vld1.32	{d16-d17}, [r4]
   219c0:	add	r4, r9, #32
   219c4:	vst1.32	{d16-d17}, [r4]
   219c8:	vld1.32	{d16-d17}, [r3]
   219cc:	vst1.32	{d16-d17}, [ip]
   219d0:	bne	21984 <__assert_fail@plt+0x10664>
   219d4:	ldr	r6, [sp, #16]
   219d8:	cmp	r6, #0
   219dc:	beq	219fc <__assert_fail@plt+0x106dc>
   219e0:	add	r3, r0, sl, lsl #2
   219e4:	add	r7, r1, sl, lsl #2
   219e8:	rsb	r6, r6, #0
   219ec:	vld1.32	{d16-d17}, [r3]!
   219f0:	adds	r6, r6, #1
   219f4:	vst1.32	{d16-d17}, [r7]!
   219f8:	bcc	219ec <__assert_fail@plt+0x106cc>
   219fc:	ldr	r4, [sp, #12]
   21a00:	cmp	r4, r2
   21a04:	beq	21a78 <__assert_fail@plt+0x10758>
   21a08:	mvn	r3, r2
   21a0c:	ands	r7, r4, #3
   21a10:	add	r3, r4, r3
   21a14:	beq	21a2c <__assert_fail@plt+0x1070c>
   21a18:	ldr	r6, [r0, r2, lsl #2]
   21a1c:	subs	r7, r7, #1
   21a20:	str	r6, [r1, r2, lsl #2]
   21a24:	add	r2, r2, #1
   21a28:	bne	21a18 <__assert_fail@plt+0x106f8>
   21a2c:	cmp	r3, #3
   21a30:	bcc	21a78 <__assert_fail@plt+0x10758>
   21a34:	sub	r3, r4, r2
   21a38:	lsl	r2, r2, #2
   21a3c:	mov	r7, r1
   21a40:	add	r6, r0, #16
   21a44:	ldr	r5, [r0, r2]!
   21a48:	add	r4, r7, #16
   21a4c:	subs	r3, r3, #4
   21a50:	str	r5, [r7, r2]!
   21a54:	ldr	r5, [r0, #4]
   21a58:	str	r5, [r7, #4]
   21a5c:	ldr	r5, [r0, #8]
   21a60:	str	r5, [r7, #8]
   21a64:	ldr	r0, [r0, #12]
   21a68:	str	r0, [r7, #12]
   21a6c:	mov	r0, r6
   21a70:	mov	r7, r4
   21a74:	bne	21a40 <__assert_fail@plt+0x10720>
   21a78:	ldr	r8, [sp, #20]
   21a7c:	ldr	r5, [sp, #48]	; 0x30
   21a80:	movw	r7, #12572	; 0x311c
   21a84:	movt	r7, #4
   21a88:	ldr	r0, [r8, #4]
   21a8c:	rsb	sl, r0, #0
   21a90:	b	21af0 <__assert_fail@plt+0x107d0>
   21a94:	mov	r1, r8
   21a98:	mov	r2, r4
   21a9c:	bl	213a0 <__assert_fail@plt+0x10080>
   21aa0:	ldr	r5, [sp, #48]	; 0x30
   21aa4:	cmp	r0, #0
   21aa8:	bne	21d5c <__assert_fail@plt+0x10a3c>
   21aac:	movw	r0, #3401	; 0xd49
   21ab0:	movt	r0, #3
   21ab4:	bl	21fb4 <__assert_fail@plt+0x10c94>
   21ab8:	mov	sl, #0
   21abc:	b	21afc <__assert_fail@plt+0x107dc>
   21ac0:	beq	21ba4 <__assert_fail@plt+0x10884>
   21ac4:	movw	r0, #12576	; 0x3120
   21ac8:	lsl	r1, r1, #2
   21acc:	mov	r2, #4
   21ad0:	movt	r0, #4
   21ad4:	ldr	r3, [r0]
   21ad8:	ldr	r0, [r5, #8]
   21adc:	blx	r3
   21ae0:	b	21bb8 <__assert_fail@plt+0x10898>
   21ae4:	movw	r1, #1992	; 0x7c8
   21ae8:	rsb	sl, r0, #0
   21aec:	movt	r1, #3
   21af0:	cmp	r0, #0
   21af4:	str	r0, [fp, #-48]	; 0xffffffd0
   21af8:	movpl	sl, r0
   21afc:	cmp	sl, r5
   21b00:	str	sl, [fp, #-48]	; 0xffffffd0
   21b04:	blt	21b28 <__assert_fail@plt+0x10808>
   21b08:	ldr	r3, [sp, #44]	; 0x2c
   21b0c:	add	r0, sp, #52	; 0x34
   21b10:	mov	r2, sl
   21b14:	str	r5, [sp]
   21b18:	str	r0, [sp, #4]
   21b1c:	mov	r0, #0
   21b20:	bl	22258 <__assert_fail@plt+0x10f38>
   21b24:	mov	sl, r5
   21b28:	ldr	r0, [r8, #4]
   21b2c:	cmp	r0, #0
   21b30:	bmi	21b3c <__assert_fail@plt+0x1081c>
   21b34:	ldr	r0, [fp, #-44]	; 0xffffffd4
   21b38:	b	21d38 <__assert_fail@plt+0x10a18>
   21b3c:	ldr	r1, [fp, #-52]	; 0xffffffcc
   21b40:	cmp	r5, r1
   21b44:	ble	21b78 <__assert_fail@plt+0x10858>
   21b48:	cmp	r5, #1
   21b4c:	movle	r5, #1
   21b50:	cmp	r1, #0
   21b54:	beq	21bec <__assert_fail@plt+0x108cc>
   21b58:	movw	r0, #12576	; 0x3120
   21b5c:	lsl	r1, r1, #2
   21b60:	lsl	r2, r5, #2
   21b64:	movt	r0, #4
   21b68:	ldr	r3, [r0]
   21b6c:	ldr	r0, [fp, #-44]	; 0xffffffd4
   21b70:	blx	r3
   21b74:	b	21bf8 <__assert_fail@plt+0x108d8>
   21b78:	ldr	r0, [fp, #-44]	; 0xffffffd4
   21b7c:	cmp	r5, sl
   21b80:	bge	21c24 <__assert_fail@plt+0x10904>
   21b84:	movw	r0, #2074	; 0x81a
   21b88:	movw	r1, #1996	; 0x7cc
   21b8c:	movw	r3, #2214	; 0x8a6
   21b90:	mov	r2, #532	; 0x214
   21b94:	movt	r0, #3
   21b98:	movt	r1, #3
   21b9c:	movt	r3, #3
   21ba0:	bl	11320 <__assert_fail@plt>
   21ba4:	movw	r0, #12572	; 0x311c
   21ba8:	movt	r0, #4
   21bac:	ldr	r1, [r0]
   21bb0:	mov	r0, #4
   21bb4:	blx	r1
   21bb8:	mov	r1, #1
   21bbc:	str	r0, [r5, #8]
   21bc0:	str	r1, [r5]
   21bc4:	ldr	r1, [r5, #4]
   21bc8:	cmp	r1, #0
   21bcc:	rsbmi	r1, r1, #0
   21bd0:	cmp	r1, #2
   21bd4:	movge	r1, #0
   21bd8:	strge	r1, [r5, #4]
   21bdc:	mov	r1, #1
   21be0:	str	r1, [r0]
   21be4:	sub	sp, fp, #28
   21be8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21bec:	ldr	r1, [r7]
   21bf0:	lsl	r0, r5, #2
   21bf4:	blx	r1
   21bf8:	str	r0, [fp, #-44]	; 0xffffffd4
   21bfc:	str	r5, [fp, #-52]	; 0xffffffcc
   21c00:	ldr	r1, [fp, #-48]	; 0xffffffd0
   21c04:	cmp	r1, #0
   21c08:	rsbmi	r1, r1, #0
   21c0c:	cmp	r1, r5
   21c10:	ldr	r5, [sp, #48]	; 0x30
   21c14:	movgt	r1, #0
   21c18:	strgt	r1, [fp, #-48]	; 0xffffffd0
   21c1c:	cmp	r5, sl
   21c20:	blt	21b84 <__assert_fail@plt+0x10864>
   21c24:	mov	ip, r7
   21c28:	mov	r1, #0
   21c2c:	cmp	sl, #1
   21c30:	blt	21c70 <__assert_fail@plt+0x10950>
   21c34:	ldr	r2, [sp, #44]	; 0x2c
   21c38:	mov	r3, r0
   21c3c:	mov	r4, sl
   21c40:	ldr	r6, [r3]
   21c44:	ldr	r7, [r2], #4
   21c48:	adds	r5, r6, r1
   21c4c:	cmp	r7, r5
   21c50:	mov	r5, #0
   21c54:	movwcc	r5, #1
   21c58:	adds	r6, r6, r1
   21c5c:	sub	r7, r7, r6
   21c60:	adc	r1, r5, #0
   21c64:	subs	r4, r4, #1
   21c68:	str	r7, [r3], #4
   21c6c:	bne	21c40 <__assert_fail@plt+0x10920>
   21c70:	ldr	r5, [sp, #48]	; 0x30
   21c74:	cmp	r5, sl
   21c78:	ble	21c98 <__assert_fail@plt+0x10978>
   21c7c:	sub	r2, r5, sl
   21c80:	add	r6, sl, #1
   21c84:	and	r2, r2, #1
   21c88:	cmp	r5, r6
   21c8c:	bne	21ca0 <__assert_fail@plt+0x10980>
   21c90:	mov	r3, #0
   21c94:	b	21cfc <__assert_fail@plt+0x109dc>
   21c98:	mov	r7, ip
   21c9c:	b	21d2c <__assert_fail@plt+0x10a0c>
   21ca0:	add	r3, sl, r2
   21ca4:	add	r7, r0, r6, lsl #2
   21ca8:	sub	r3, r3, r5
   21cac:	ldr	r5, [sp, #44]	; 0x2c
   21cb0:	add	r5, r5, r6, lsl #2
   21cb4:	mov	r6, #0
   21cb8:	ldr	r4, [r5, #-4]
   21cbc:	sub	r6, r6, #2
   21cc0:	subs	r1, r4, r1
   21cc4:	str	r1, [r7, #-4]
   21cc8:	mov	r1, #0
   21ccc:	movwcc	r1, #1
   21cd0:	ldr	r4, [r5]
   21cd4:	add	r5, r5, #8
   21cd8:	subs	r1, r4, r1
   21cdc:	str	r1, [r7]
   21ce0:	mov	r1, #0
   21ce4:	movwcc	r1, #1
   21ce8:	add	r7, r7, #8
   21cec:	cmp	r3, r6
   21cf0:	bne	21cb8 <__assert_fail@plt+0x10998>
   21cf4:	ldr	r5, [sp, #48]	; 0x30
   21cf8:	rsb	r3, r6, #0
   21cfc:	mov	r7, ip
   21d00:	cmp	r2, #0
   21d04:	beq	21d2c <__assert_fail@plt+0x10a0c>
   21d08:	ldr	r2, [sp, #44]	; 0x2c
   21d0c:	add	r7, r0, sl, lsl #2
   21d10:	add	r2, r2, sl, lsl #2
   21d14:	ldr	r2, [r2, r3, lsl #2]
   21d18:	subs	r1, r2, r1
   21d1c:	str	r1, [r7, r3, lsl #2]
   21d20:	mov	r1, #0
   21d24:	mov	r7, ip
   21d28:	movwcc	r1, #1
   21d2c:	cmp	r1, #0
   21d30:	mov	sl, r5
   21d34:	bne	21f94 <__assert_fail@plt+0x10c74>
   21d38:	sub	r0, r0, #4
   21d3c:	mov	r1, sl
   21d40:	cmp	sl, #1
   21d44:	blt	21d58 <__assert_fail@plt+0x10a38>
   21d48:	ldr	r2, [r0, r1, lsl #2]
   21d4c:	sub	sl, r1, #1
   21d50:	cmp	r2, #0
   21d54:	beq	21d3c <__assert_fail@plt+0x10a1c>
   21d58:	str	r1, [fp, #-48]	; 0xffffffd0
   21d5c:	ldr	r1, [r7]
   21d60:	mov	r6, #1
   21d64:	mov	r0, #4
   21d68:	str	r6, [fp, #-36]	; 0xffffffdc
   21d6c:	blx	r1
   21d70:	ldr	r1, [sp, #40]	; 0x28
   21d74:	str	r0, [fp, #-32]	; 0xffffffe0
   21d78:	str	r6, [fp, #-40]	; 0xffffffd8
   21d7c:	str	r6, [r0]
   21d80:	cmp	r1, #1
   21d84:	blt	21e58 <__assert_fail@plt+0x10b38>
   21d88:	sub	r7, fp, #40	; 0x28
   21d8c:	mov	r9, #0
   21d90:	sub	r4, fp, #52	; 0x34
   21d94:	b	21da4 <__assert_fail@plt+0x10a84>
   21d98:	ldr	r1, [sp, #40]	; 0x28
   21d9c:	cmp	r1, #1
   21da0:	blt	21e58 <__assert_fail@plt+0x10b38>
   21da4:	ldr	r0, [sp, #36]	; 0x24
   21da8:	sub	r1, r1, #1
   21dac:	mov	r8, #-2147483648	; 0x80000000
   21db0:	str	r1, [sp, #40]	; 0x28
   21db4:	ldr	r0, [r0, #8]
   21db8:	ldr	sl, [r0, r1, lsl #2]
   21dbc:	b	21dd4 <__assert_fail@plt+0x10ab4>
   21dc0:	str	r6, [fp, #-36]	; 0xffffffdc
   21dc4:	lsr	r0, r8, #1
   21dc8:	cmp	r9, r8, lsr #1
   21dcc:	mov	r8, r0
   21dd0:	beq	21d98 <__assert_fail@plt+0x10a78>
   21dd4:	mov	r0, r7
   21dd8:	mov	r1, r7
   21ddc:	mov	r2, r7
   21de0:	bl	1ca60 <__assert_fail@plt+0xb740>
   21de4:	tst	r8, sl
   21de8:	movne	r0, r7
   21dec:	movne	r1, r7
   21df0:	movne	r2, r4
   21df4:	blne	1ca60 <__assert_fail@plt+0xb740>
   21df8:	ldr	r6, [fp, #-36]	; 0xffffffdc
   21dfc:	cmp	r6, r5
   21e00:	ble	21dc4 <__assert_fail@plt+0x10aa4>
   21e04:	ldr	r0, [sp, #48]	; 0x30
   21e08:	ldr	r5, [fp, #-32]	; 0xffffffe0
   21e0c:	ldr	r3, [sp, #44]	; 0x2c
   21e10:	mov	r2, r6
   21e14:	str	r0, [sp]
   21e18:	add	r0, sp, #52	; 0x34
   21e1c:	mov	r1, r5
   21e20:	str	r0, [sp, #4]
   21e24:	mov	r0, #0
   21e28:	bl	22258 <__assert_fail@plt+0x10f38>
   21e2c:	sub	r0, r5, #4
   21e30:	ldr	r5, [sp, #48]	; 0x30
   21e34:	mov	r1, r5
   21e38:	mov	r6, r1
   21e3c:	cmp	r1, #1
   21e40:	blt	21dc0 <__assert_fail@plt+0x10aa0>
   21e44:	ldr	r2, [r0, r6, lsl #2]
   21e48:	sub	r1, r6, #1
   21e4c:	cmp	r2, #0
   21e50:	beq	21e38 <__assert_fail@plt+0x10b18>
   21e54:	b	21dc0 <__assert_fail@plt+0x10aa0>
   21e58:	cmp	r6, r5
   21e5c:	bge	21e6c <__assert_fail@plt+0x10b4c>
   21e60:	ldr	r5, [sp, #32]
   21e64:	ldr	r3, [sp, #28]
   21e68:	b	21ec8 <__assert_fail@plt+0x10ba8>
   21e6c:	ldr	r0, [sp, #24]
   21e70:	ldr	r4, [fp, #-32]	; 0xffffffe0
   21e74:	ldr	r3, [sp, #44]	; 0x2c
   21e78:	mov	r2, r6
   21e7c:	str	r5, [sp]
   21e80:	str	r0, [sp, #52]	; 0x34
   21e84:	add	r0, sp, #52	; 0x34
   21e88:	mov	r1, r4
   21e8c:	str	r0, [sp, #4]
   21e90:	mov	r0, #0
   21e94:	bl	22258 <__assert_fail@plt+0x10f38>
   21e98:	mov	r1, r5
   21e9c:	ldr	r5, [sp, #32]
   21ea0:	ldr	r3, [sp, #28]
   21ea4:	sub	r0, r4, #4
   21ea8:	mov	r6, r1
   21eac:	cmp	r1, #1
   21eb0:	blt	21ec4 <__assert_fail@plt+0x10ba4>
   21eb4:	ldr	r2, [r0, r6, lsl #2]
   21eb8:	sub	r1, r6, #1
   21ebc:	cmp	r2, #0
   21ec0:	beq	21ea8 <__assert_fail@plt+0x10b88>
   21ec4:	str	r6, [fp, #-36]	; 0xffffffdc
   21ec8:	movw	r4, #12580	; 0x3124
   21ecc:	cmp	r3, #0
   21ed0:	movt	r4, #4
   21ed4:	beq	21eec <__assert_fail@plt+0x10bcc>
   21ed8:	ldr	r0, [sp, #48]	; 0x30
   21edc:	ldr	r2, [r4]
   21ee0:	lsl	r1, r0, #2
   21ee4:	mov	r0, r3
   21ee8:	blx	r2
   21eec:	ldr	r0, [r5, #4]
   21ef0:	str	r6, [r5, #4]
   21ef4:	str	r0, [fp, #-36]	; 0xffffffdc
   21ef8:	ldr	r1, [r5]
   21efc:	ldr	r0, [fp, #-40]	; 0xffffffd8
   21f00:	str	r0, [r5]
   21f04:	str	r1, [fp, #-40]	; 0xffffffd8
   21f08:	cmp	r1, #0
   21f0c:	ldr	r0, [r5, #8]
   21f10:	ldr	r2, [fp, #-32]	; 0xffffffe0
   21f14:	str	r2, [r5, #8]
   21f18:	str	r0, [fp, #-32]	; 0xffffffe0
   21f1c:	beq	21f2c <__assert_fail@plt+0x10c0c>
   21f20:	ldr	r2, [r4]
   21f24:	lsl	r1, r1, #2
   21f28:	blx	r2
   21f2c:	ldr	r0, [fp, #-52]	; 0xffffffcc
   21f30:	cmp	r0, #0
   21f34:	beq	21f48 <__assert_fail@plt+0x10c28>
   21f38:	lsl	r1, r0, #2
   21f3c:	ldr	r2, [r4]
   21f40:	ldr	r0, [fp, #-44]	; 0xffffffd4
   21f44:	blx	r2
   21f48:	sub	sp, fp, #28
   21f4c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21f50:	movw	r0, #3282	; 0xcd2
   21f54:	movt	r0, #3
   21f58:	bl	21fb4 <__assert_fail@plt+0x10c94>
   21f5c:	movw	r0, #2553	; 0x9f9
   21f60:	movw	r1, #1996	; 0x7cc
   21f64:	movw	r3, #2640	; 0xa50
   21f68:	movw	r2, #659	; 0x293
   21f6c:	movt	r0, #3
   21f70:	b	21f88 <__assert_fail@plt+0x10c68>
   21f74:	movw	r0, #2714	; 0xa9a
   21f78:	movw	r1, #1996	; 0x7cc
   21f7c:	movw	r3, #2640	; 0xa50
   21f80:	movw	r2, #661	; 0x295
   21f84:	movt	r0, #3
   21f88:	movt	r1, #3
   21f8c:	movt	r3, #3
   21f90:	bl	11320 <__assert_fail@plt>
   21f94:	movw	r0, #2977	; 0xba1
   21f98:	movw	r1, #1996	; 0x7cc
   21f9c:	movw	r3, #3305	; 0xce9
   21fa0:	movw	r2, #3145	; 0xc49
   21fa4:	movt	r0, #3
   21fa8:	movt	r1, #3
   21fac:	movt	r3, #3
   21fb0:	bl	11320 <__assert_fail@plt>
   21fb4:	push	{fp, lr}
   21fb8:	mov	fp, sp
   21fbc:	mov	r3, r0
   21fc0:	movw	r0, #12664	; 0x3178
   21fc4:	movw	r2, #7052	; 0x1b8c
   21fc8:	mov	r1, #1
   21fcc:	movt	r0, #4
   21fd0:	movt	r2, #3
   21fd4:	ldr	r0, [r0]
   21fd8:	bl	11278 <__fprintf_chk@plt>
   21fdc:	bl	11314 <abort@plt>
   21fe0:	push	{r4, r5, fp, lr}
   21fe4:	add	fp, sp, #8
   21fe8:	cmp	r2, #0
   21fec:	ble	221e0 <__assert_fail@plt+0x10ec0>
   21ff0:	mov	r5, r0
   21ff4:	cmp	r2, #2
   21ff8:	beq	220a8 <__assert_fail@plt+0x10d88>
   21ffc:	cmp	r2, #1
   22000:	bne	22114 <__assert_fail@plt+0x10df4>
   22004:	ldr	r0, [r1]
   22008:	cmp	r0, #0
   2200c:	beq	221f8 <__assert_fail@plt+0x10ed8>
   22010:	mov	r2, #0
   22014:	mov	r1, r0
   22018:	cmp	r2, r0, lsr #24
   2201c:	bne	22038 <__assert_fail@plt+0x10d18>
   22020:	mov	r2, #0
   22024:	mov	r1, r0
   22028:	lsl	r1, r1, #8
   2202c:	add	r2, r2, #8
   22030:	cmp	r1, #16777216	; 0x1000000
   22034:	bcc	22028 <__assert_fail@plt+0x10d08>
   22038:	cmp	r1, #0
   2203c:	bmi	22050 <__assert_fail@plt+0x10d30>
   22040:	lsl	r1, r1, #1
   22044:	add	r2, r2, #1
   22048:	cmn	r1, #1
   2204c:	bgt	22040 <__assert_fail@plt+0x10d20>
   22050:	lsl	r1, r0, r2
   22054:	str	r2, [r5]
   22058:	mvn	r2, r0, lsl r2
   2205c:	movw	ip, #65535	; 0xffff
   22060:	lsr	r4, r1, #16
   22064:	uxth	r3, r1
   22068:	str	r1, [r5, #4]
   2206c:	udiv	r0, r2, r4
   22070:	mls	r2, r0, r4, r2
   22074:	mul	r3, r0, r3
   22078:	orr	r2, ip, r2, lsl #16
   2207c:	cmp	r2, r3
   22080:	bcs	221a4 <__assert_fail@plt+0x10e84>
   22084:	add	r2, r2, r1
   22088:	sub	lr, r0, #1
   2208c:	cmp	r2, r1
   22090:	bcc	221a0 <__assert_fail@plt+0x10e80>
   22094:	cmp	r2, r3
   22098:	subcc	r0, r0, #2
   2209c:	addcc	r2, r2, r1
   220a0:	movcs	r0, lr
   220a4:	b	221a4 <__assert_fail@plt+0x10e84>
   220a8:	ldr	r0, [r1, #4]
   220ac:	cmp	r0, #0
   220b0:	beq	22218 <__assert_fail@plt+0x10ef8>
   220b4:	ldr	r1, [r1]
   220b8:	mov	r2, #0
   220bc:	mov	r3, r0
   220c0:	cmp	r2, r0, lsr #24
   220c4:	bne	220e0 <__assert_fail@plt+0x10dc0>
   220c8:	mov	r2, #0
   220cc:	mov	r3, r0
   220d0:	lsl	r3, r3, #8
   220d4:	add	r2, r2, #8
   220d8:	cmp	r3, #16777216	; 0x1000000
   220dc:	bcc	220d0 <__assert_fail@plt+0x10db0>
   220e0:	cmp	r3, #0
   220e4:	bmi	220f8 <__assert_fail@plt+0x10dd8>
   220e8:	lsl	r3, r3, #1
   220ec:	add	r2, r2, #1
   220f0:	cmn	r3, #1
   220f4:	bgt	220e8 <__assert_fail@plt+0x10dc8>
   220f8:	cmp	r2, #0
   220fc:	str	r2, [r5]
   22100:	rsbne	r3, r2, #32
   22104:	lsrne	r3, r1, r3
   22108:	lslne	r1, r1, r2
   2210c:	orrne	r0, r3, r0, lsl r2
   22110:	b	2218c <__assert_fail@plt+0x10e6c>
   22114:	add	ip, r1, r2, lsl #2
   22118:	ldr	r0, [ip, #-4]
   2211c:	cmp	r0, #0
   22120:	beq	22238 <__assert_fail@plt+0x10f18>
   22124:	ldr	r1, [ip, #-8]
   22128:	mov	r3, #0
   2212c:	mov	r2, r0
   22130:	cmp	r3, r0, lsr #24
   22134:	bne	22150 <__assert_fail@plt+0x10e30>
   22138:	mov	r3, #0
   2213c:	mov	r2, r0
   22140:	lsl	r2, r2, #8
   22144:	add	r3, r3, #8
   22148:	cmp	r2, #16777216	; 0x1000000
   2214c:	bcc	22140 <__assert_fail@plt+0x10e20>
   22150:	cmp	r2, #0
   22154:	bmi	22168 <__assert_fail@plt+0x10e48>
   22158:	lsl	r2, r2, #1
   2215c:	add	r3, r3, #1
   22160:	cmn	r2, #1
   22164:	bgt	22158 <__assert_fail@plt+0x10e38>
   22168:	cmp	r3, #0
   2216c:	str	r3, [r5]
   22170:	beq	2218c <__assert_fail@plt+0x10e6c>
   22174:	rsb	r2, r3, #32
   22178:	lsr	r4, r1, r2
   2217c:	orr	r0, r4, r0, lsl r3
   22180:	ldr	r4, [ip, #-12]
   22184:	lsr	r2, r4, r2
   22188:	orr	r1, r2, r1, lsl r3
   2218c:	str	r0, [r5, #4]
   22190:	str	r1, [r5, #8]
   22194:	bl	19858 <__assert_fail@plt+0x8538>
   22198:	str	r0, [r5, #12]
   2219c:	pop	{r4, r5, fp, pc}
   221a0:	mov	r0, lr
   221a4:	sub	r2, r2, r3
   221a8:	mov	r4, #1
   221ac:	lsr	r3, r2, #16
   221b0:	mla	r3, r3, r0, r2
   221b4:	orr	r2, ip, r2, lsl #16
   221b8:	add	r4, r4, r3, lsr #16
   221bc:	mls	r2, r4, r1, r2
   221c0:	cmp	r2, r3, lsl #16
   221c4:	lsrcs	r4, r3, #16
   221c8:	addcs	r2, r2, r1
   221cc:	add	r0, r4, r0, lsl #16
   221d0:	cmp	r2, r1
   221d4:	addcs	r0, r0, #1
   221d8:	str	r0, [r5, #12]
   221dc:	pop	{r4, r5, fp, pc}
   221e0:	movw	r0, #5321	; 0x14c9
   221e4:	movw	r1, #1996	; 0x7cc
   221e8:	movw	r3, #5610	; 0x15ea
   221ec:	mov	r2, #932	; 0x3a4
   221f0:	movt	r0, #3
   221f4:	b	2224c <__assert_fail@plt+0x10f2c>
   221f8:	movw	r0, #6696	; 0x1a28
   221fc:	movw	r1, #1996	; 0x7cc
   22200:	movw	r3, #6702	; 0x1a2e
   22204:	movw	r2, #902	; 0x386
   22208:	movt	r0, #3
   2220c:	movt	r1, #3
   22210:	movt	r3, #3
   22214:	bl	11320 <__assert_fail@plt>
   22218:	movw	r0, #5681	; 0x1631
   2221c:	movw	r1, #1996	; 0x7cc
   22220:	movw	r3, #5688	; 0x1638
   22224:	movw	r2, #915	; 0x393
   22228:	movt	r0, #3
   2222c:	movt	r1, #3
   22230:	movt	r3, #3
   22234:	bl	11320 <__assert_fail@plt>
   22238:	movw	r0, #5681	; 0x1631
   2223c:	movw	r1, #1996	; 0x7cc
   22240:	movw	r3, #5610	; 0x15ea
   22244:	movw	r2, #945	; 0x3b1
   22248:	movt	r0, #3
   2224c:	movt	r1, #3
   22250:	movt	r3, #3
   22254:	bl	11320 <__assert_fail@plt>
   22258:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2225c:	add	fp, sp, #28
   22260:	sub	sp, sp, #52	; 0x34
   22264:	ldr	r5, [fp, #8]
   22268:	cmp	r5, #0
   2226c:	ble	226e8 <__assert_fail@plt+0x113c8>
   22270:	cmp	r2, r5
   22274:	blt	22700 <__assert_fail@plt+0x113e0>
   22278:	ldr	ip, [fp, #12]
   2227c:	mov	r4, r1
   22280:	cmp	r5, #2
   22284:	str	r0, [sp, #36]	; 0x24
   22288:	beq	222ac <__assert_fail@plt+0x10f8c>
   2228c:	cmp	r5, #1
   22290:	bne	22328 <__assert_fail@plt+0x11008>
   22294:	mov	r1, r4
   22298:	mov	r3, ip
   2229c:	bl	26638 <__assert_fail@plt+0x15318>
   222a0:	str	r0, [r4]
   222a4:	sub	sp, fp, #28
   222a8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   222ac:	cmp	r2, #1
   222b0:	ble	22730 <__assert_fail@plt+0x11410>
   222b4:	ldm	ip, {r0, r1}
   222b8:	str	r1, [fp, #-32]	; 0xffffffe0
   222bc:	ldr	r1, [ip, #8]
   222c0:	ldr	r9, [ip, #12]
   222c4:	str	r4, [sp, #40]	; 0x28
   222c8:	cmp	r0, #0
   222cc:	str	r0, [sp, #12]
   222d0:	str	r1, [fp, #-36]	; 0xffffffdc
   222d4:	beq	22464 <__assert_fail@plt+0x11144>
   222d8:	cmp	r0, #32
   222dc:	bcs	22718 <__assert_fail@plt+0x113f8>
   222e0:	add	r6, r4, r2, lsl #2
   222e4:	sub	r8, r2, #1
   222e8:	rsb	ip, r0, #32
   222ec:	tst	r2, #1
   222f0:	mov	sl, r6
   222f4:	ldr	lr, [sl, #-4]!
   222f8:	lsl	r5, lr, r0
   222fc:	bne	22490 <__assert_fail@plt+0x11170>
   22300:	ldr	r1, [r6, #-8]
   22304:	mov	r3, r6
   22308:	sub	sl, sl, #4
   2230c:	orr	r4, r5, r1, lsr ip
   22310:	lsl	r5, r1, r0
   22314:	str	r4, [r3, #-4]!
   22318:	sub	r4, r2, #2
   2231c:	cmp	r2, #2
   22320:	bne	224a0 <__assert_fail@plt+0x11180>
   22324:	b	224d4 <__assert_fail@plt+0x111b4>
   22328:	sub	r8, r5, #1
   2232c:	ldr	r1, [ip, #4]
   22330:	ldr	r7, [r3, r8, lsl #2]
   22334:	cmp	r1, r7
   22338:	bne	22748 <__assert_fail@plt+0x11428>
   2233c:	add	r7, r3, r5, lsl #2
   22340:	ldr	r6, [r7, #-8]
   22344:	ldr	r7, [ip, #8]
   22348:	cmp	r7, r6
   2234c:	bne	22760 <__assert_fail@plt+0x11440>
   22350:	cmp	r1, #0
   22354:	bpl	22778 <__assert_fail@plt+0x11458>
   22358:	ldr	r9, [ip]
   2235c:	cmp	r9, #0
   22360:	beq	22470 <__assert_fail@plt+0x11150>
   22364:	cmp	r2, #0
   22368:	ble	22790 <__assert_fail@plt+0x11470>
   2236c:	cmp	r9, #32
   22370:	bcs	22718 <__assert_fail@plt+0x113f8>
   22374:	add	r1, r4, r2, lsl #2
   22378:	rsb	sl, r9, #32
   2237c:	str	r4, [sp, #40]	; 0x28
   22380:	subs	r6, r2, #1
   22384:	mov	lr, r1
   22388:	ldr	r0, [lr, #-4]!
   2238c:	lsl	r4, r0, r9
   22390:	lsr	r0, r0, sl
   22394:	str	r0, [fp, #-32]	; 0xffffffe0
   22398:	beq	223f4 <__assert_fail@plt+0x110d4>
   2239c:	tst	r2, #1
   223a0:	bne	223bc <__assert_fail@plt+0x1109c>
   223a4:	ldr	r0, [r1, #-8]
   223a8:	sub	r6, r2, #2
   223ac:	sub	lr, lr, #4
   223b0:	orr	r4, r4, r0, lsr sl
   223b4:	str	r4, [r1, #-4]!
   223b8:	lsl	r4, r0, r9
   223bc:	cmp	r2, #2
   223c0:	beq	223f4 <__assert_fail@plt+0x110d4>
   223c4:	sub	r7, lr, #4
   223c8:	ldr	r0, [r7]
   223cc:	subs	r6, r6, #2
   223d0:	orr	r4, r4, r0, lsr sl
   223d4:	str	r4, [r1, #-4]
   223d8:	ldr	r5, [r7, #-4]
   223dc:	sub	r7, r7, #8
   223e0:	lsl	r4, r5, r9
   223e4:	lsr	r5, r5, sl
   223e8:	orr	r0, r5, r0, lsl r9
   223ec:	str	r0, [r1, #-8]!
   223f0:	bne	223c8 <__assert_fail@plt+0x110a8>
   223f4:	str	r4, [r1, #-4]
   223f8:	ldr	r4, [sp, #40]	; 0x28
   223fc:	ldr	r5, [fp, #8]
   22400:	ldr	r0, [ip, #12]
   22404:	str	r3, [sp]
   22408:	ldr	r3, [fp, #-32]	; 0xffffffe0
   2240c:	mov	r1, r4
   22410:	str	r5, [sp, #4]
   22414:	str	r0, [sp, #8]
   22418:	ldr	r0, [sp, #36]	; 0x24
   2241c:	bl	278e4 <__assert_fail@plt+0x165c4>
   22420:	ldr	r0, [r4]
   22424:	cmp	r8, #0
   22428:	lsr	r1, r0, r9
   2242c:	lsl	r0, r0, sl
   22430:	beq	22698 <__assert_fail@plt+0x11378>
   22434:	tst	r5, #1
   22438:	bne	226a0 <__assert_fail@plt+0x11380>
   2243c:	mov	r2, r4
   22440:	sub	r8, r5, #2
   22444:	ldr	r3, [r2, #4]!
   22448:	orr	r1, r1, r3, lsl sl
   2244c:	str	r1, [r4]
   22450:	lsr	r1, r3, r9
   22454:	mov	r4, r2
   22458:	cmp	r5, #2
   2245c:	bne	226a8 <__assert_fail@plt+0x11388>
   22460:	b	226d4 <__assert_fail@plt+0x113b4>
   22464:	sub	r8, r2, #1
   22468:	mov	r6, #0
   2246c:	b	224e4 <__assert_fail@plt+0x111c4>
   22470:	ldr	r1, [ip, #12]
   22474:	stm	sp, {r3, r5}
   22478:	mov	r3, #0
   2247c:	str	r1, [sp, #8]
   22480:	mov	r1, r4
   22484:	bl	278e4 <__assert_fail@plt+0x165c4>
   22488:	sub	sp, fp, #28
   2248c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   22490:	mov	r4, r8
   22494:	mov	r3, r6
   22498:	cmp	r2, #2
   2249c:	beq	224d4 <__assert_fail@plt+0x111b4>
   224a0:	sub	r1, sl, #4
   224a4:	add	r6, r3, #4
   224a8:	ldr	r3, [r1]
   224ac:	subs	r4, r4, #2
   224b0:	orr	r5, r5, r3, lsr ip
   224b4:	str	r5, [r6, #-8]!
   224b8:	ldr	r5, [r1, #-4]
   224bc:	sub	r1, r1, #8
   224c0:	lsr	r7, r5, ip
   224c4:	lsl	r5, r5, r0
   224c8:	orr	r3, r7, r3, lsl r0
   224cc:	str	r3, [r6, #-4]
   224d0:	bne	224a8 <__assert_fail@plt+0x11188>
   224d4:	ldr	r4, [sp, #40]	; 0x28
   224d8:	ldr	r1, [fp, #-36]	; 0xffffffdc
   224dc:	str	r5, [r6, #-8]
   224e0:	lsr	r6, lr, ip
   224e4:	ldr	r0, [fp, #-32]	; 0xffffffe0
   224e8:	ldr	lr, [r4, r8, lsl #2]
   224ec:	ldr	r8, [fp, #-32]	; 0xffffffe0
   224f0:	sub	sl, r2, #2
   224f4:	rsb	r0, r0, #0
   224f8:	str	r0, [sp, #16]
   224fc:	lsr	r0, r1, #16
   22500:	str	r0, [sp, #32]
   22504:	uxth	r0, r1
   22508:	str	r0, [sp, #28]
   2250c:	lsr	r0, r9, #16
   22510:	str	r0, [sp, #24]
   22514:	uxth	r0, r9
   22518:	ldr	r9, [fp, #-36]	; 0xffffffdc
   2251c:	str	r0, [sp, #20]
   22520:	b	22540 <__assert_fail@plt+0x11220>
   22524:	ldr	r1, [sp, #36]	; 0x24
   22528:	cmp	r1, #0
   2252c:	sub	r0, sl, #1
   22530:	strne	ip, [r1, sl, lsl #2]
   22534:	cmp	sl, #0
   22538:	mov	sl, r0
   2253c:	ble	22654 <__assert_fail@plt+0x11334>
   22540:	ldr	r2, [sp, #24]
   22544:	uxth	r1, r6
   22548:	ldr	r0, [sp, #20]
   2254c:	lsr	r5, r6, #16
   22550:	mul	r3, r1, r2
   22554:	mul	r1, r1, r0
   22558:	mla	r3, r5, r0, r3
   2255c:	mul	r0, r5, r0
   22560:	mul	r5, r5, r2
   22564:	ldr	r2, [sp, #32]
   22568:	add	r3, r3, r1, lsr #16
   2256c:	pkhbt	r1, r1, r3, lsl #16
   22570:	cmp	r3, r0
   22574:	add	r0, r6, r3, lsr #16
   22578:	ldr	r3, [sp, #28]
   2257c:	addcc	r5, r5, #65536	; 0x10000
   22580:	adds	ip, r1, lr
   22584:	adc	r1, r0, r5
   22588:	add	r0, r0, r5
   2258c:	ldr	r5, [sp, #40]	; 0x28
   22590:	lsr	r6, r1, #16
   22594:	uxth	r7, r1
   22598:	sbc	r0, r0, #0
   2259c:	mul	r4, r6, r3
   225a0:	mul	r6, r6, r2
   225a4:	mul	r3, r7, r3
   225a8:	ldr	r5, [r5, sl, lsl #2]
   225ac:	mla	r4, r7, r2, r4
   225b0:	mul	r7, r7, r2
   225b4:	add	r4, r4, r3, lsr #16
   225b8:	cmp	r4, r7
   225bc:	sub	r7, lr, r8
   225c0:	pkhbt	r3, r3, r4, lsl #16
   225c4:	addcc	r6, r6, #65536	; 0x10000
   225c8:	cmp	r5, r9
   225cc:	subcc	r7, r7, #1
   225d0:	mls	r7, r1, r8, r7
   225d4:	sub	r7, r7, r4, lsr #16
   225d8:	sub	r7, r7, r6
   225dc:	sub	r6, r5, r9
   225e0:	mov	r5, #0
   225e4:	cmp	r6, r3
   225e8:	sub	r3, r6, r3
   225ec:	subcc	r7, r7, #1
   225f0:	cmp	r7, ip
   225f4:	mvncs	r5, #0
   225f8:	and	r4, r8, r5
   225fc:	and	r5, r9, r5
   22600:	adds	lr, r5, r3
   22604:	adc	r6, r4, r7
   22608:	cmp	r7, ip
   2260c:	movcc	r0, r1
   22610:	cmp	r6, r8
   22614:	add	ip, r0, #1
   22618:	bcc	22524 <__assert_fail@plt+0x11204>
   2261c:	ldr	r1, [sp, #36]	; 0x24
   22620:	cmp	lr, r9
   22624:	bcs	22634 <__assert_fail@plt+0x11314>
   22628:	ldr	r0, [fp, #-32]	; 0xffffffe0
   2262c:	cmp	r6, r0
   22630:	bls	22528 <__assert_fail@plt+0x11208>
   22634:	ldr	r3, [fp, #-36]	; 0xffffffdc
   22638:	ldr	r0, [sp, #16]
   2263c:	add	ip, ip, #1
   22640:	cmp	lr, r3
   22644:	sub	lr, lr, r3
   22648:	subcc	r0, r0, #1
   2264c:	add	r6, r0, r6
   22650:	b	22528 <__assert_fail@plt+0x11208>
   22654:	ldr	r2, [sp, #12]
   22658:	cmp	r2, #0
   2265c:	beq	22684 <__assert_fail@plt+0x11364>
   22660:	rsb	r0, r2, #32
   22664:	mvn	r1, #0
   22668:	tst	lr, r1, lsr r0
   2266c:	ldr	r1, [sp, #40]	; 0x28
   22670:	bne	227b0 <__assert_fail@plt+0x11490>
   22674:	lsl	r0, r6, r0
   22678:	lsr	r6, r6, r2
   2267c:	orr	lr, r0, lr, lsr r2
   22680:	b	22688 <__assert_fail@plt+0x11368>
   22684:	ldr	r1, [sp, #40]	; 0x28
   22688:	str	lr, [r1]
   2268c:	str	r6, [r1, #4]
   22690:	sub	sp, fp, #28
   22694:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   22698:	mov	r2, r4
   2269c:	b	226d4 <__assert_fail@plt+0x113b4>
   226a0:	cmp	r5, #2
   226a4:	beq	226d4 <__assert_fail@plt+0x113b4>
   226a8:	mov	r2, r4
   226ac:	ldr	r3, [r4, #4]
   226b0:	ldr	r7, [r2, #8]!
   226b4:	subs	r8, r8, #2
   226b8:	orr	r1, r1, r3, lsl sl
   226bc:	lsl	r6, r7, sl
   226c0:	orr	r3, r6, r3, lsr r9
   226c4:	stm	r4, {r1, r3}
   226c8:	lsr	r1, r7, r9
   226cc:	mov	r4, r2
   226d0:	bne	226ac <__assert_fail@plt+0x1138c>
   226d4:	cmp	r0, #0
   226d8:	str	r1, [r2]
   226dc:	bne	227d0 <__assert_fail@plt+0x114b0>
   226e0:	sub	sp, fp, #28
   226e4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   226e8:	movw	r0, #5321	; 0x14c9
   226ec:	movw	r1, #1996	; 0x7cc
   226f0:	movw	r3, #5761	; 0x1681
   226f4:	movw	r2, #1113	; 0x459
   226f8:	movt	r0, #3
   226fc:	b	227e4 <__assert_fail@plt+0x114c4>
   22700:	movw	r0, #5393	; 0x1511
   22704:	movw	r1, #1996	; 0x7cc
   22708:	movw	r3, #5761	; 0x1681
   2270c:	movw	r2, #1114	; 0x45a
   22710:	movt	r0, #3
   22714:	b	227e4 <__assert_fail@plt+0x114c4>
   22718:	movw	r0, #2714	; 0xa9a
   2271c:	movw	r1, #1996	; 0x7cc
   22720:	movw	r3, #2640	; 0xa50
   22724:	movw	r2, #661	; 0x295
   22728:	movt	r0, #3
   2272c:	b	227a4 <__assert_fail@plt+0x11484>
   22730:	movw	r0, #5939	; 0x1733
   22734:	movw	r1, #1996	; 0x7cc
   22738:	movw	r3, #5947	; 0x173b
   2273c:	movw	r2, #1009	; 0x3f1
   22740:	movt	r0, #3
   22744:	b	227c4 <__assert_fail@plt+0x114a4>
   22748:	movw	r0, #5865	; 0x16e9
   2274c:	movw	r1, #1996	; 0x7cc
   22750:	movw	r3, #5761	; 0x1681
   22754:	movw	r2, #1125	; 0x465
   22758:	movt	r0, #3
   2275c:	b	227e4 <__assert_fail@plt+0x114c4>
   22760:	movw	r0, #5885	; 0x16fd
   22764:	movw	r1, #1996	; 0x7cc
   22768:	movw	r3, #5761	; 0x1681
   2276c:	movw	r2, #1126	; 0x466
   22770:	movt	r0, #3
   22774:	b	227e4 <__assert_fail@plt+0x114c4>
   22778:	movw	r0, #5905	; 0x1711
   2277c:	movw	r1, #1996	; 0x7cc
   22780:	movw	r3, #5761	; 0x1681
   22784:	movw	r2, #1127	; 0x467
   22788:	movt	r0, #3
   2278c:	b	227e4 <__assert_fail@plt+0x114c4>
   22790:	movw	r0, #2553	; 0x9f9
   22794:	movw	r1, #1996	; 0x7cc
   22798:	movw	r3, #2640	; 0xa50
   2279c:	movw	r2, #659	; 0x293
   227a0:	movt	r0, #3
   227a4:	movt	r1, #3
   227a8:	movt	r3, #3
   227ac:	bl	11320 <__assert_fail@plt>
   227b0:	movw	r0, #6031	; 0x178f
   227b4:	movw	r1, #1996	; 0x7cc
   227b8:	movw	r3, #5947	; 0x173b
   227bc:	movw	r2, #1036	; 0x40c
   227c0:	movt	r0, #3
   227c4:	movt	r1, #3
   227c8:	movt	r3, #3
   227cc:	bl	11320 <__assert_fail@plt>
   227d0:	movw	r0, #2977	; 0xba1
   227d4:	movw	r1, #1996	; 0x7cc
   227d8:	movw	r3, #5761	; 0x1681
   227dc:	movw	r2, #1138	; 0x472
   227e0:	movt	r0, #3
   227e4:	movt	r1, #3
   227e8:	movt	r3, #3
   227ec:	bl	11320 <__assert_fail@plt>
   227f0:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   227f4:	add	fp, sp, #24
   227f8:	sub	sp, sp, #16
   227fc:	mov	r6, r0
   22800:	movw	r0, #1992	; 0x7c8
   22804:	mov	r8, r3
   22808:	mov	r5, r1
   2280c:	cmp	r2, #0
   22810:	movt	r0, #3
   22814:	str	r0, [sp, #12]
   22818:	mov	r0, #0
   2281c:	str	r0, [sp, #8]
   22820:	str	r0, [sp, #4]
   22824:	beq	2288c <__assert_fail@plt+0x1156c>
   22828:	movw	r0, #12572	; 0x311c
   2282c:	mov	r9, #1
   22830:	mov	r7, r2
   22834:	movt	r0, #4
   22838:	str	r9, [sp, #8]
   2283c:	ldr	r1, [r0]
   22840:	mov	r0, #4
   22844:	blx	r1
   22848:	str	r0, [sp, #12]
   2284c:	str	r9, [sp, #4]
   22850:	mov	r4, r0
   22854:	str	r7, [r0]
   22858:	add	r2, sp, #4
   2285c:	mov	r0, r6
   22860:	mov	r1, r5
   22864:	mov	r3, r8
   22868:	bl	21718 <__assert_fail@plt+0x103f8>
   2286c:	movw	r0, #12580	; 0x3124
   22870:	mov	r1, #4
   22874:	movt	r0, #4
   22878:	ldr	r2, [r0]
   2287c:	mov	r0, r4
   22880:	blx	r2
   22884:	sub	sp, fp, #24
   22888:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   2288c:	str	r0, [sp, #8]
   22890:	add	r2, sp, #4
   22894:	mov	r0, r6
   22898:	mov	r1, r5
   2289c:	mov	r3, r8
   228a0:	bl	21718 <__assert_fail@plt+0x103f8>
   228a4:	sub	sp, fp, #24
   228a8:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   228ac:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   228b0:	add	fp, sp, #28
   228b4:	sub	sp, sp, #76	; 0x4c
   228b8:	ldr	r5, [r2, #4]
   228bc:	mov	r9, r0
   228c0:	mvn	r0, r3
   228c4:	str	r2, [sp, #24]
   228c8:	tst	r0, r5, lsr #31
   228cc:	bne	23100 <__assert_fail@plt+0x11de0>
   228d0:	cmp	r3, #0
   228d4:	str	r3, [sp, #12]
   228d8:	beq	2310c <__assert_fail@plt+0x11dec>
   228dc:	cmp	r5, #0
   228e0:	mov	r8, r5
   228e4:	mov	sl, r1
   228e8:	rsbmi	r8, r5, #0
   228ec:	cmp	r8, #1
   228f0:	bgt	2292c <__assert_fail@plt+0x1160c>
   228f4:	cmp	r5, #0
   228f8:	beq	22910 <__assert_fail@plt+0x115f0>
   228fc:	ldr	r0, [sp, #24]
   22900:	ldr	r0, [r0, #8]
   22904:	ldr	r0, [r0]
   22908:	cmp	r0, #1
   2290c:	bhi	2292c <__assert_fail@plt+0x1160c>
   22910:	cmp	r9, #0
   22914:	ldrne	r0, [sp, #24]
   22918:	cmpne	r9, r0
   2291c:	bne	22efc <__assert_fail@plt+0x11bdc>
   22920:	cmp	sl, #0
   22924:	bne	230f0 <__assert_fail@plt+0x11dd0>
   22928:	b	22ee0 <__assert_fail@plt+0x11bc0>
   2292c:	movw	r1, #1992	; 0x7c8
   22930:	mov	r0, #0
   22934:	cmp	r8, #0
   22938:	movt	r1, #3
   2293c:	str	r1, [sp, #48]	; 0x30
   22940:	str	r0, [sp, #44]	; 0x2c
   22944:	str	r1, [sp, #60]	; 0x3c
   22948:	str	r0, [sp, #56]	; 0x38
   2294c:	str	r0, [sp, #40]	; 0x28
   22950:	str	r0, [sp, #52]	; 0x34
   22954:	beq	229b4 <__assert_fail@plt+0x11694>
   22958:	ldr	r0, [sp, #24]
   2295c:	sub	r2, r8, #1
   22960:	ldr	r0, [r0, #8]
   22964:	ldr	r0, [r0, r2, lsl #2]
   22968:	cmp	r0, #0
   2296c:	beq	23118 <__assert_fail@plt+0x11df8>
   22970:	mov	r1, #0
   22974:	cmp	r1, r0, lsr #24
   22978:	bne	22990 <__assert_fail@plt+0x11670>
   2297c:	mov	r1, #0
   22980:	lsl	r0, r0, #8
   22984:	add	r1, r1, #8
   22988:	cmp	r0, #16777216	; 0x1000000
   2298c:	bcc	22980 <__assert_fail@plt+0x11660>
   22990:	lsl	r2, r2, #5
   22994:	cmp	r0, #0
   22998:	bmi	229ac <__assert_fail@plt+0x1168c>
   2299c:	lsl	r0, r0, #1
   229a0:	add	r1, r1, #1
   229a4:	cmn	r0, #1
   229a8:	bgt	2299c <__assert_fail@plt+0x1167c>
   229ac:	orr	r0, r2, #31
   229b0:	sub	r0, r0, r1
   229b4:	ldr	r4, [sp, #12]
   229b8:	udiv	r0, r0, r4
   229bc:	add	r1, r0, #1
   229c0:	add	r0, sp, #52	; 0x34
   229c4:	bl	2513c <__assert_fail@plt+0x13e1c>
   229c8:	cmp	r4, #2
   229cc:	str	r9, [sp, #4]
   229d0:	bne	22adc <__assert_fail@plt+0x117bc>
   229d4:	ldr	r1, [sp, #56]	; 0x38
   229d8:	ldr	r0, [sp, #60]	; 0x3c
   229dc:	movw	r2, #1992	; 0x7c8
   229e0:	mov	r3, #0
   229e4:	mov	r8, #2
   229e8:	add	r4, sp, #52	; 0x34
   229ec:	add	r9, sp, #40	; 0x28
   229f0:	mov	r7, #0
   229f4:	movt	r2, #3
   229f8:	b	22a0c <__assert_fail@plt+0x116ec>
   229fc:	ldr	r3, [sp, #20]
   22a00:	mov	r2, lr
   22a04:	mov	r7, r6
   22a08:	bge	22d88 <__assert_fail@plt+0x11a68>
   22a0c:	str	r7, [sp, #56]	; 0x38
   22a10:	str	r1, [sp, #44]	; 0x2c
   22a14:	mov	r6, r1
   22a18:	mov	r5, r0
   22a1c:	str	r0, [sp, #48]	; 0x30
   22a20:	mov	r0, r4
   22a24:	str	r8, [sp]
   22a28:	ldr	r1, [sp, #52]	; 0x34
   22a2c:	str	r3, [sp, #52]	; 0x34
   22a30:	str	r2, [sp, #60]	; 0x3c
   22a34:	ldr	r2, [sp, #24]
   22a38:	mov	r3, r9
   22a3c:	str	r1, [sp, #20]
   22a40:	str	r1, [sp, #40]	; 0x28
   22a44:	mov	r1, #0
   22a48:	bl	1d0f8 <__assert_fail@plt+0xbdd8>
   22a4c:	mov	r0, r4
   22a50:	mov	r1, r4
   22a54:	mov	r2, r9
   22a58:	bl	1bd0c <__assert_fail@plt+0xa9ec>
   22a5c:	mov	r0, r4
   22a60:	mov	r1, r4
   22a64:	mov	r2, #1
   22a68:	mov	r3, #2
   22a6c:	bl	1dcc8 <__assert_fail@plt+0xc9a8>
   22a70:	ldr	r1, [sp, #56]	; 0x38
   22a74:	cmp	r6, #0
   22a78:	ldr	r0, [sp, #60]	; 0x3c
   22a7c:	mov	r3, r6
   22a80:	mov	lr, r5
   22a84:	rsbmi	r3, r6, #0
   22a88:	cmp	r1, #0
   22a8c:	mov	r2, r1
   22a90:	rsbmi	r2, r1, #0
   22a94:	cmp	r2, r3
   22a98:	bne	229fc <__assert_fail@plt+0x116dc>
   22a9c:	mov	ip, r6
   22aa0:	sub	r3, r0, #4
   22aa4:	sub	r7, lr, #4
   22aa8:	subs	r6, r2, #1
   22aac:	blt	22d84 <__assert_fail@plt+0x11a64>
   22ab0:	ldr	r5, [r7, r2, lsl #2]
   22ab4:	ldr	r2, [r3, r2, lsl #2]
   22ab8:	cmp	r2, r5
   22abc:	mov	r2, r6
   22ac0:	beq	22aa8 <__assert_fail@plt+0x11788>
   22ac4:	ldr	r3, [sp, #20]
   22ac8:	mov	r2, lr
   22acc:	mov	r6, ip
   22ad0:	mov	r7, ip
   22ad4:	bls	22a0c <__assert_fail@plt+0x116ec>
   22ad8:	b	22d88 <__assert_fail@plt+0x11a68>
   22adc:	movw	r0, #1992	; 0x7c8
   22ae0:	cmn	r5, #1
   22ae4:	ldr	r1, [sp, #12]
   22ae8:	movw	r2, #1992	; 0x7c8
   22aec:	mov	r4, #0
   22af0:	sub	r5, fp, #40	; 0x28
   22af4:	add	r8, sp, #40	; 0x28
   22af8:	mov	r3, #0
   22afc:	mov	r7, #0
   22b00:	movt	r0, #3
   22b04:	movt	r2, #3
   22b08:	str	r0, [sp, #36]	; 0x24
   22b0c:	ldr	r0, [sp, #56]	; 0x38
   22b10:	str	r4, [sp, #32]
   22b14:	str	r4, [sp, #28]
   22b18:	sub	r9, r1, #1
   22b1c:	rsble	r0, r0, #0
   22b20:	strle	r0, [sp, #56]	; 0x38
   22b24:	ldr	ip, [sp, #60]	; 0x3c
   22b28:	b	22b38 <__assert_fail@plt+0x11818>
   22b2c:	ldr	r3, [sp, #20]
   22b30:	mov	r2, lr
   22b34:	bge	22d54 <__assert_fail@plt+0x11a34>
   22b38:	str	r7, [sp, #56]	; 0x38
   22b3c:	str	r0, [sp, #44]	; 0x2c
   22b40:	str	r0, [sp, #16]
   22b44:	str	ip, [sp, #48]	; 0x30
   22b48:	mov	r6, #1
   22b4c:	str	ip, [sp, #8]
   22b50:	ldr	r0, [sp, #52]	; 0x34
   22b54:	str	r3, [sp, #52]	; 0x34
   22b58:	str	r2, [sp, #60]	; 0x3c
   22b5c:	str	r6, [fp, #-36]	; 0xffffffdc
   22b60:	str	r0, [sp, #20]
   22b64:	str	r0, [sp, #40]	; 0x28
   22b68:	movw	r0, #12572	; 0x311c
   22b6c:	movt	r0, #4
   22b70:	ldr	r1, [r0]
   22b74:	mov	r0, #4
   22b78:	blx	r1
   22b7c:	str	r0, [fp, #-32]	; 0xffffffe0
   22b80:	str	r6, [fp, #-40]	; 0xffffffd8
   22b84:	str	r6, [r0]
   22b88:	mov	r6, #-2147483648	; 0x80000000
   22b8c:	mov	r0, r5
   22b90:	mov	r1, r5
   22b94:	mov	r2, r5
   22b98:	bl	1ca60 <__assert_fail@plt+0xb740>
   22b9c:	tst	r6, r9
   22ba0:	movne	r0, r5
   22ba4:	movne	r1, r5
   22ba8:	movne	r2, r8
   22bac:	blne	1ca60 <__assert_fail@plt+0xb740>
   22bb0:	lsr	r0, r6, #1
   22bb4:	cmp	r4, r6, lsr #1
   22bb8:	mov	r6, r0
   22bbc:	bne	22b8c <__assert_fail@plt+0x1186c>
   22bc0:	ldr	r1, [sp, #52]	; 0x34
   22bc4:	ldr	r2, [sp, #56]	; 0x38
   22bc8:	ldr	r0, [sp, #60]	; 0x3c
   22bcc:	ldr	r7, [fp, #-36]	; 0xffffffdc
   22bd0:	ldr	r3, [fp, #-40]	; 0xffffffd8
   22bd4:	ldr	r6, [fp, #-32]	; 0xffffffe0
   22bd8:	cmp	r1, #0
   22bdc:	str	r7, [sp, #56]	; 0x38
   22be0:	str	r2, [fp, #-36]	; 0xffffffdc
   22be4:	str	r3, [sp, #52]	; 0x34
   22be8:	str	r1, [fp, #-40]	; 0xffffffd8
   22bec:	str	r6, [sp, #60]	; 0x3c
   22bf0:	str	r0, [fp, #-32]	; 0xffffffe0
   22bf4:	beq	22c0c <__assert_fail@plt+0x118ec>
   22bf8:	movw	r2, #12580	; 0x3124
   22bfc:	lsl	r1, r1, #2
   22c00:	movt	r2, #4
   22c04:	ldr	r2, [r2]
   22c08:	blx	r2
   22c0c:	ldr	r2, [sp, #24]
   22c10:	mov	r0, #2
   22c14:	mov	r1, #0
   22c18:	str	r0, [sp]
   22c1c:	add	r0, sp, #52	; 0x34
   22c20:	mov	r3, r0
   22c24:	bl	1d0f8 <__assert_fail@plt+0xbdd8>
   22c28:	movw	r0, #1992	; 0x7c8
   22c2c:	cmp	r9, #0
   22c30:	movt	r0, #3
   22c34:	str	r0, [fp, #-32]	; 0xffffffe0
   22c38:	str	r4, [fp, #-36]	; 0xffffffdc
   22c3c:	str	r4, [fp, #-40]	; 0xffffffd8
   22c40:	beq	22ca8 <__assert_fail@plt+0x11988>
   22c44:	movw	r0, #12572	; 0x311c
   22c48:	mov	r7, #1
   22c4c:	movt	r0, #4
   22c50:	str	r7, [fp, #-36]	; 0xffffffdc
   22c54:	ldr	r1, [r0]
   22c58:	mov	r0, #4
   22c5c:	blx	r1
   22c60:	str	r0, [fp, #-32]	; 0xffffffe0
   22c64:	str	r7, [fp, #-40]	; 0xffffffd8
   22c68:	add	r7, sp, #28
   22c6c:	mov	r6, sl
   22c70:	mov	sl, r0
   22c74:	str	r9, [r0]
   22c78:	mov	r1, r8
   22c7c:	mov	r2, r5
   22c80:	mov	r0, r7
   22c84:	bl	1ca60 <__assert_fail@plt+0xb740>
   22c88:	movw	r0, #12580	; 0x3124
   22c8c:	mov	r1, #4
   22c90:	movt	r0, #4
   22c94:	ldr	r2, [r0]
   22c98:	mov	r0, sl
   22c9c:	mov	sl, r6
   22ca0:	blx	r2
   22ca4:	b	22cc0 <__assert_fail@plt+0x119a0>
   22ca8:	add	r7, sp, #28
   22cac:	mov	r1, r8
   22cb0:	mov	r2, r5
   22cb4:	str	r4, [fp, #-36]	; 0xffffffdc
   22cb8:	mov	r0, r7
   22cbc:	bl	1ca60 <__assert_fail@plt+0xb740>
   22cc0:	add	r6, sp, #52	; 0x34
   22cc4:	mov	r2, r7
   22cc8:	mov	r0, r6
   22ccc:	mov	r1, r6
   22cd0:	bl	1bd0c <__assert_fail@plt+0xa9ec>
   22cd4:	ldr	r3, [sp, #12]
   22cd8:	mov	r0, #2
   22cdc:	mov	r1, #0
   22ce0:	mov	r2, r6
   22ce4:	str	r0, [sp]
   22ce8:	mov	r0, r6
   22cec:	bl	1eae8 <__assert_fail@plt+0xd7c8>
   22cf0:	ldr	r7, [sp, #16]
   22cf4:	ldr	r0, [sp, #56]	; 0x38
   22cf8:	ldr	ip, [sp, #60]	; 0x3c
   22cfc:	ldr	lr, [sp, #8]
   22d00:	cmp	r7, #0
   22d04:	mov	r3, r7
   22d08:	mov	r2, r0
   22d0c:	rsbmi	r3, r7, #0
   22d10:	cmp	r0, #0
   22d14:	rsbmi	r2, r0, #0
   22d18:	cmp	r2, r3
   22d1c:	bne	22b2c <__assert_fail@plt+0x1180c>
   22d20:	sub	r3, ip, #4
   22d24:	sub	r7, lr, #4
   22d28:	subs	r6, r2, #1
   22d2c:	blt	22d54 <__assert_fail@plt+0x11a34>
   22d30:	ldr	r1, [r7, r2, lsl #2]
   22d34:	ldr	r2, [r3, r2, lsl #2]
   22d38:	cmp	r2, r1
   22d3c:	mov	r2, r6
   22d40:	beq	22d28 <__assert_fail@plt+0x11a08>
   22d44:	ldr	r3, [sp, #20]
   22d48:	ldr	r7, [sp, #16]
   22d4c:	mov	r2, lr
   22d50:	bls	22b38 <__assert_fail@plt+0x11818>
   22d54:	ldr	r0, [sp, #28]
   22d58:	cmp	r0, #0
   22d5c:	beq	22d7c <__assert_fail@plt+0x11a5c>
   22d60:	movw	r1, #12580	; 0x3124
   22d64:	movt	r1, #4
   22d68:	ldr	r2, [r1]
   22d6c:	lsl	r1, r0, #2
   22d70:	ldr	r0, [sp, #36]	; 0x24
   22d74:	blx	r2
   22d78:	ldr	lr, [sp, #8]
   22d7c:	ldr	r6, [sp, #16]
   22d80:	b	22d88 <__assert_fail@plt+0x11a68>
   22d84:	mov	r6, ip
   22d88:	ldr	r8, [sp, #4]
   22d8c:	cmp	sl, #0
   22d90:	beq	22e70 <__assert_fail@plt+0x11b50>
   22d94:	movw	r0, #12572	; 0x311c
   22d98:	mov	r4, #1
   22d9c:	str	r6, [sp, #16]
   22da0:	str	lr, [sp, #8]
   22da4:	movt	r0, #4
   22da8:	str	r4, [fp, #-36]	; 0xffffffdc
   22dac:	ldr	r1, [r0]
   22db0:	mov	r0, #4
   22db4:	blx	r1
   22db8:	ldr	r5, [sp, #12]
   22dbc:	str	r0, [fp, #-32]	; 0xffffffe0
   22dc0:	str	r4, [fp, #-40]	; 0xffffffd8
   22dc4:	str	r4, [r0]
   22dc8:	mov	r6, #-2147483648	; 0x80000000
   22dcc:	sub	r4, fp, #40	; 0x28
   22dd0:	mov	r7, #0
   22dd4:	add	r9, sp, #40	; 0x28
   22dd8:	mov	r0, r4
   22ddc:	mov	r1, r4
   22de0:	mov	r2, r4
   22de4:	bl	1ca60 <__assert_fail@plt+0xb740>
   22de8:	tst	r6, r5
   22dec:	movne	r0, r4
   22df0:	movne	r1, r4
   22df4:	movne	r2, r9
   22df8:	blne	1ca60 <__assert_fail@plt+0xb740>
   22dfc:	lsr	r0, r6, #1
   22e00:	cmp	r7, r6, lsr #1
   22e04:	mov	r6, r0
   22e08:	bne	22dd8 <__assert_fail@plt+0x11ab8>
   22e0c:	ldr	r1, [sp, #52]	; 0x34
   22e10:	ldr	r2, [sp, #56]	; 0x38
   22e14:	ldr	r0, [sp, #60]	; 0x3c
   22e18:	ldr	r7, [fp, #-36]	; 0xffffffdc
   22e1c:	ldr	r3, [fp, #-40]	; 0xffffffd8
   22e20:	ldr	r6, [fp, #-32]	; 0xffffffe0
   22e24:	cmp	r1, #0
   22e28:	str	r7, [sp, #56]	; 0x38
   22e2c:	str	r2, [fp, #-36]	; 0xffffffdc
   22e30:	str	r3, [sp, #52]	; 0x34
   22e34:	str	r1, [fp, #-40]	; 0xffffffd8
   22e38:	str	r6, [sp, #60]	; 0x3c
   22e3c:	str	r0, [fp, #-32]	; 0xffffffe0
   22e40:	beq	22e58 <__assert_fail@plt+0x11b38>
   22e44:	movw	r2, #12580	; 0x3124
   22e48:	lsl	r1, r1, #2
   22e4c:	movt	r2, #4
   22e50:	ldr	r2, [r2]
   22e54:	blx	r2
   22e58:	ldr	r1, [sp, #24]
   22e5c:	add	r2, sp, #52	; 0x34
   22e60:	mov	r0, sl
   22e64:	bl	1c674 <__assert_fail@plt+0xb354>
   22e68:	ldr	lr, [sp, #8]
   22e6c:	ldr	r6, [sp, #16]
   22e70:	cmp	r8, #0
   22e74:	beq	22ee8 <__assert_fail@plt+0x11bc8>
   22e78:	ldr	r0, [r8, #4]
   22e7c:	str	r6, [r8, #4]
   22e80:	str	r0, [sp, #44]	; 0x2c
   22e84:	ldr	r0, [sp, #20]
   22e88:	ldr	r1, [r8]
   22e8c:	str	r0, [r8]
   22e90:	str	r1, [sp, #40]	; 0x28
   22e94:	ldr	r0, [r8, #8]
   22e98:	str	lr, [r8, #8]
   22e9c:	str	r0, [sp, #48]	; 0x30
   22ea0:	cmp	r1, #0
   22ea4:	beq	22ebc <__assert_fail@plt+0x11b9c>
   22ea8:	movw	r2, #12580	; 0x3124
   22eac:	lsl	r1, r1, #2
   22eb0:	movt	r2, #4
   22eb4:	ldr	r2, [r2]
   22eb8:	blx	r2
   22ebc:	ldr	r0, [sp, #52]	; 0x34
   22ec0:	cmp	r0, #0
   22ec4:	beq	22ee0 <__assert_fail@plt+0x11bc0>
   22ec8:	movw	r1, #12580	; 0x3124
   22ecc:	movt	r1, #4
   22ed0:	ldr	r2, [r1]
   22ed4:	lsl	r1, r0, #2
   22ed8:	ldr	r0, [sp, #60]	; 0x3c
   22edc:	blx	r2
   22ee0:	sub	sp, fp, #28
   22ee4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   22ee8:	ldr	r1, [sp, #20]
   22eec:	mov	r0, lr
   22ef0:	cmp	r1, #0
   22ef4:	bne	22ea8 <__assert_fail@plt+0x11b88>
   22ef8:	b	22ebc <__assert_fail@plt+0x11b9c>
   22efc:	ldr	r1, [r9]
   22f00:	cmp	r8, r1
   22f04:	ble	22f30 <__assert_fail@plt+0x11c10>
   22f08:	cmp	r1, #0
   22f0c:	beq	22f40 <__assert_fail@plt+0x11c20>
   22f10:	movw	r0, #12576	; 0x3120
   22f14:	lsl	r1, r1, #2
   22f18:	mov	r2, #4
   22f1c:	movt	r0, #4
   22f20:	ldr	r3, [r0]
   22f24:	ldr	r0, [r9, #8]
   22f28:	blx	r3
   22f2c:	b	22f54 <__assert_fail@plt+0x11c34>
   22f30:	ldr	r0, [r9, #8]
   22f34:	cmp	r8, #1
   22f38:	bge	22f80 <__assert_fail@plt+0x11c60>
   22f3c:	b	230dc <__assert_fail@plt+0x11dbc>
   22f40:	movw	r0, #12572	; 0x311c
   22f44:	movt	r0, #4
   22f48:	ldr	r1, [r0]
   22f4c:	mov	r0, #4
   22f50:	blx	r1
   22f54:	mov	r1, #1
   22f58:	str	r0, [r9, #8]
   22f5c:	str	r1, [r9]
   22f60:	ldr	r1, [r9, #4]
   22f64:	cmp	r1, #0
   22f68:	rsbmi	r1, r1, #0
   22f6c:	cmp	r1, #2
   22f70:	movge	r1, #0
   22f74:	strge	r1, [r9, #4]
   22f78:	cmp	r8, #1
   22f7c:	blt	230dc <__assert_fail@plt+0x11dbc>
   22f80:	ldr	r1, [sp, #24]
   22f84:	mov	r2, #0
   22f88:	cmp	r8, #4
   22f8c:	ldr	r1, [r1, #8]
   22f90:	bcc	23070 <__assert_fail@plt+0x11d50>
   22f94:	add	r3, r1, r8, lsl #2
   22f98:	cmp	r0, r3
   22f9c:	addcc	r3, r0, r8, lsl #2
   22fa0:	cmpcc	r1, r3
   22fa4:	bcc	23070 <__assert_fail@plt+0x11d50>
   22fa8:	bic	r2, r8, #-2147483645	; 0x80000003
   22fac:	mov	r3, #1
   22fb0:	str	r9, [sp, #4]
   22fb4:	mov	r9, #0
   22fb8:	str	sl, [sp, #16]
   22fbc:	sub	r6, r2, #4
   22fc0:	add	r3, r3, r6, lsr #2
   22fc4:	cmp	r6, #12
   22fc8:	and	r7, r3, #3
   22fcc:	str	r7, [sp, #20]
   22fd0:	bcc	23038 <__assert_fail@plt+0x11d18>
   22fd4:	ldr	r7, [sp, #20]
   22fd8:	mov	r5, #0
   22fdc:	mov	r9, #0
   22fe0:	sub	sl, r3, r7
   22fe4:	add	r3, r1, r5
   22fe8:	mov	r4, #48	; 0x30
   22fec:	add	r7, r0, r5
   22ff0:	add	r5, r5, #64	; 0x40
   22ff4:	subs	sl, sl, #4
   22ff8:	add	r9, r9, #16
   22ffc:	mov	lr, r3
   23000:	mov	r6, r7
   23004:	add	ip, r3, #16
   23008:	add	r3, r3, #32
   2300c:	vld1.32	{d16-d17}, [lr], r4
   23010:	vst1.32	{d16-d17}, [r6], r4
   23014:	add	r4, r7, #16
   23018:	vld1.32	{d16-d17}, [ip]
   2301c:	vst1.32	{d16-d17}, [r4]
   23020:	vld1.32	{d16-d17}, [r3]
   23024:	add	r3, r7, #32
   23028:	vst1.32	{d16-d17}, [r3]
   2302c:	vld1.32	{d16-d17}, [lr]
   23030:	vst1.32	{d16-d17}, [r6]
   23034:	bne	22fe4 <__assert_fail@plt+0x11cc4>
   23038:	ldr	r6, [sp, #20]
   2303c:	cmp	r6, #0
   23040:	beq	23060 <__assert_fail@plt+0x11d40>
   23044:	add	r3, r1, r9, lsl #2
   23048:	add	r7, r0, r9, lsl #2
   2304c:	rsb	r6, r6, #0
   23050:	vld1.32	{d16-d17}, [r3]!
   23054:	adds	r6, r6, #1
   23058:	vst1.32	{d16-d17}, [r7]!
   2305c:	bcc	23050 <__assert_fail@plt+0x11d30>
   23060:	ldr	r9, [sp, #4]
   23064:	ldr	sl, [sp, #16]
   23068:	cmp	r8, r2
   2306c:	beq	230dc <__assert_fail@plt+0x11dbc>
   23070:	mvn	r3, r2
   23074:	ands	r7, r8, #3
   23078:	add	r3, r8, r3
   2307c:	beq	23094 <__assert_fail@plt+0x11d74>
   23080:	ldr	r6, [r1, r2, lsl #2]
   23084:	subs	r7, r7, #1
   23088:	str	r6, [r0, r2, lsl #2]
   2308c:	add	r2, r2, #1
   23090:	bne	23080 <__assert_fail@plt+0x11d60>
   23094:	cmp	r3, #3
   23098:	bcc	230dc <__assert_fail@plt+0x11dbc>
   2309c:	sub	r3, r8, r2
   230a0:	lsl	r2, r2, #2
   230a4:	add	r7, r1, #16
   230a8:	ldr	r6, [r1, r2]!
   230ac:	add	r5, r0, #16
   230b0:	subs	r3, r3, #4
   230b4:	str	r6, [r0, r2]!
   230b8:	ldr	r6, [r1, #4]
   230bc:	str	r6, [r0, #4]
   230c0:	ldr	r6, [r1, #8]
   230c4:	str	r6, [r0, #8]
   230c8:	ldr	r1, [r1, #12]
   230cc:	str	r1, [r0, #12]
   230d0:	mov	r1, r7
   230d4:	mov	r0, r5
   230d8:	bne	230a4 <__assert_fail@plt+0x11d84>
   230dc:	ldr	r0, [sp, #24]
   230e0:	ldr	r0, [r0, #4]
   230e4:	str	r0, [r9, #4]
   230e8:	cmp	sl, #0
   230ec:	beq	22ee0 <__assert_fail@plt+0x11bc0>
   230f0:	mov	r0, #0
   230f4:	str	r0, [sl, #4]
   230f8:	sub	sp, fp, #28
   230fc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   23100:	movw	r0, #3454	; 0xd7e
   23104:	movt	r0, #3
   23108:	bl	21fb4 <__assert_fail@plt+0x10c94>
   2310c:	movw	r0, #3502	; 0xdae
   23110:	movt	r0, #3
   23114:	bl	21fb4 <__assert_fail@plt+0x10c94>
   23118:	movw	r0, #6643	; 0x19f3
   2311c:	movw	r1, #1996	; 0x7cc
   23120:	movw	r3, #6649	; 0x19f9
   23124:	movw	r2, #1210	; 0x4ba
   23128:	movt	r0, #3
   2312c:	movt	r1, #3
   23130:	movt	r3, #3
   23134:	bl	11320 <__assert_fail@plt>
   23138:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2313c:	add	fp, sp, #28
   23140:	sub	sp, sp, #28
   23144:	cmp	r1, #1
   23148:	ble	2355c <__assert_fail@plt+0x1223c>
   2314c:	mov	r8, r1
   23150:	cmp	r1, #63	; 0x3f
   23154:	bge	23574 <__assert_fail@plt+0x12254>
   23158:	ldr	r4, [r0, #4]
   2315c:	cmp	r4, #0
   23160:	rsbmi	r4, r4, #0
   23164:	cmp	r4, #0
   23168:	beq	23260 <__assert_fail@plt+0x11f40>
   2316c:	ldr	r5, [r0, #8]
   23170:	sub	r0, r4, #1
   23174:	ldr	r2, [r5, r0, lsl #2]
   23178:	cmp	r2, #0
   2317c:	beq	23594 <__assert_fail@plt+0x12274>
   23180:	mov	r1, #0
   23184:	cmp	r1, r2, lsr #24
   23188:	bne	231a0 <__assert_fail@plt+0x11e80>
   2318c:	mov	r1, #0
   23190:	lsl	r2, r2, #8
   23194:	add	r1, r1, #8
   23198:	cmp	r2, #16777216	; 0x1000000
   2319c:	bcc	23190 <__assert_fail@plt+0x11e70>
   231a0:	cmp	r2, #0
   231a4:	bmi	231b8 <__assert_fail@plt+0x11e98>
   231a8:	lsl	r2, r2, #1
   231ac:	add	r1, r1, #1
   231b0:	cmn	r2, #1
   231b4:	bgt	231a8 <__assert_fail@plt+0x11e88>
   231b8:	sub	r2, r8, #2
   231bc:	cmp	r2, #30
   231c0:	bhi	23268 <__assert_fail@plt+0x11f48>
   231c4:	lsl	r0, r0, #5
   231c8:	sub	r0, r0, r1
   231cc:	add	r6, r0, #32
   231d0:	add	r0, pc, #0
   231d4:	ldr	pc, [r0, r2, lsl #2]
   231d8:	andeq	r3, r2, r0, asr r5
   231dc:	andeq	r3, r2, r8, ror #4
   231e0:	andeq	r3, r2, r4, asr r2
   231e4:	andeq	r3, r2, r8, ror #4
   231e8:	andeq	r3, r2, r8, ror #4
   231ec:	andeq	r3, r2, r8, ror #4
   231f0:	andeq	r3, r2, r8, lsl #9
   231f4:	andeq	r3, r2, r8, ror #4
   231f8:	andeq	r3, r2, r8, ror #4
   231fc:	andeq	r3, r2, r8, ror #4
   23200:	andeq	r3, r2, r8, ror #4
   23204:	andeq	r3, r2, r8, ror #4
   23208:	andeq	r3, r2, r8, ror #4
   2320c:	andeq	r3, r2, r8, ror #4
   23210:	andeq	r3, r2, r0, lsr #9
   23214:	andeq	r3, r2, r8, ror #4
   23218:	andeq	r3, r2, r8, ror #4
   2321c:	andeq	r3, r2, r8, ror #4
   23220:	andeq	r3, r2, r8, ror #4
   23224:	andeq	r3, r2, r8, ror #4
   23228:	andeq	r3, r2, r8, ror #4
   2322c:	andeq	r3, r2, r8, ror #4
   23230:	andeq	r3, r2, r8, ror #4
   23234:	andeq	r3, r2, r8, ror #4
   23238:	andeq	r3, r2, r8, ror #4
   2323c:	andeq	r3, r2, r8, ror #4
   23240:	andeq	r3, r2, r8, ror #4
   23244:	andeq	r3, r2, r8, ror #4
   23248:	andeq	r3, r2, r8, ror #4
   2324c:	andeq	r3, r2, r8, ror #4
   23250:	andeq	r3, r2, ip, lsr #9
   23254:	add	r0, r6, #1
   23258:	lsr	r6, r0, #1
   2325c:	b	23550 <__assert_fail@plt+0x12230>
   23260:	mov	r6, #1
   23264:	b	23550 <__assert_fail@plt+0x12230>
   23268:	movw	r0, #12572	; 0x311c
   2326c:	lsl	r9, r4, #2
   23270:	movt	r0, #4
   23274:	ldr	r1, [r0]
   23278:	mov	r0, r9
   2327c:	blx	r1
   23280:	mov	r7, r0
   23284:	cmp	r4, #1
   23288:	blt	233e8 <__assert_fail@plt+0x120c8>
   2328c:	mov	r0, #0
   23290:	cmp	r4, #4
   23294:	bcc	23378 <__assert_fail@plt+0x12058>
   23298:	add	r1, r5, r4, lsl #2
   2329c:	cmp	r7, r1
   232a0:	bcs	232b0 <__assert_fail@plt+0x11f90>
   232a4:	add	r1, r7, r4, lsl #2
   232a8:	cmp	r1, r5
   232ac:	bhi	23378 <__assert_fail@plt+0x12058>
   232b0:	bic	r0, r4, #-2147483645	; 0x80000003
   232b4:	mov	r1, #1
   232b8:	mov	sl, #0
   232bc:	str	r9, [sp]
   232c0:	str	r8, [sp, #4]
   232c4:	sub	r3, r0, #4
   232c8:	add	r1, r1, r3, lsr #2
   232cc:	cmp	r3, #12
   232d0:	and	r2, r1, #3
   232d4:	str	r2, [sp, #8]
   232d8:	bcc	23340 <__assert_fail@plt+0x12020>
   232dc:	ldr	r2, [sp, #8]
   232e0:	mov	r6, #0
   232e4:	mov	sl, #0
   232e8:	sub	r9, r1, r2
   232ec:	add	r1, r5, r6
   232f0:	mov	r3, #48	; 0x30
   232f4:	add	ip, r7, r6
   232f8:	add	r6, r6, #64	; 0x40
   232fc:	subs	r9, r9, #4
   23300:	add	sl, sl, #16
   23304:	mov	r2, r1
   23308:	mov	r8, ip
   2330c:	add	lr, r1, #16
   23310:	add	r1, r1, #32
   23314:	vld1.32	{d16-d17}, [r2], r3
   23318:	vst1.32	{d16-d17}, [r8], r3
   2331c:	add	r3, ip, #16
   23320:	vld1.32	{d16-d17}, [lr]
   23324:	vst1.32	{d16-d17}, [r3]
   23328:	vld1.32	{d16-d17}, [r1]
   2332c:	add	r1, ip, #32
   23330:	vst1.32	{d16-d17}, [r1]
   23334:	vld1.32	{d16-d17}, [r2]
   23338:	vst1.32	{d16-d17}, [r8]
   2333c:	bne	232ec <__assert_fail@plt+0x11fcc>
   23340:	ldr	r3, [sp, #8]
   23344:	cmp	r3, #0
   23348:	beq	23368 <__assert_fail@plt+0x12048>
   2334c:	add	r1, r5, sl, lsl #2
   23350:	add	r2, r7, sl, lsl #2
   23354:	rsb	r3, r3, #0
   23358:	vld1.32	{d16-d17}, [r1]!
   2335c:	adds	r3, r3, #1
   23360:	vst1.32	{d16-d17}, [r2]!
   23364:	bcc	23358 <__assert_fail@plt+0x12038>
   23368:	ldr	r8, [sp, #4]
   2336c:	ldr	r9, [sp]
   23370:	cmp	r4, r0
   23374:	beq	233e8 <__assert_fail@plt+0x120c8>
   23378:	mvn	r1, r0
   2337c:	ands	r2, r4, #3
   23380:	add	r1, r4, r1
   23384:	beq	2339c <__assert_fail@plt+0x1207c>
   23388:	ldr	r3, [r5, r0, lsl #2]
   2338c:	subs	r2, r2, #1
   23390:	str	r3, [r7, r0, lsl #2]
   23394:	add	r0, r0, #1
   23398:	bne	23388 <__assert_fail@plt+0x12068>
   2339c:	cmp	r1, #3
   233a0:	bcc	233e8 <__assert_fail@plt+0x120c8>
   233a4:	sub	r1, r4, r0
   233a8:	lsl	ip, r0, #2
   233ac:	mov	r2, r7
   233b0:	add	r3, r5, #16
   233b4:	ldr	r6, [r5, ip]!
   233b8:	add	r0, r2, #16
   233bc:	subs	r1, r1, #4
   233c0:	str	r6, [r2, ip]!
   233c4:	ldr	r6, [r5, #4]
   233c8:	str	r6, [r2, #4]
   233cc:	ldr	r6, [r5, #8]
   233d0:	str	r6, [r2, #8]
   233d4:	ldr	r6, [r5, #12]
   233d8:	mov	r5, r3
   233dc:	str	r6, [r2, #12]
   233e0:	mov	r2, r0
   233e4:	bne	233b0 <__assert_fail@plt+0x12090>
   233e8:	cmp	r8, #0
   233ec:	beq	235b4 <__assert_fail@plt+0x12294>
   233f0:	mov	r1, #0
   233f4:	mov	r0, r8
   233f8:	cmp	r1, r8, lsr #24
   233fc:	bne	23418 <__assert_fail@plt+0x120f8>
   23400:	mov	r1, #0
   23404:	mov	r0, r8
   23408:	lsl	r0, r0, #8
   2340c:	add	r1, r1, #8
   23410:	cmp	r0, #16777216	; 0x1000000
   23414:	bcc	23408 <__assert_fail@plt+0x120e8>
   23418:	cmp	r0, #0
   2341c:	bmi	23430 <__assert_fail@plt+0x12110>
   23420:	lsl	r0, r0, #1
   23424:	add	r1, r1, #1
   23428:	cmn	r0, #1
   2342c:	bgt	23420 <__assert_fail@plt+0x12100>
   23430:	lsl	r0, r8, r1
   23434:	mvn	r2, r8, lsl r1
   23438:	str	r1, [sp, #12]
   2343c:	lsr	r6, r0, #16
   23440:	uxth	r3, r0
   23444:	str	r0, [sp, #16]
   23448:	udiv	r1, r2, r6
   2344c:	mls	r6, r1, r6, r2
   23450:	movw	r2, #65535	; 0xffff
   23454:	mul	r3, r1, r3
   23458:	orr	r6, r2, r6, lsl #16
   2345c:	cmp	r6, r3
   23460:	bcs	234c8 <__assert_fail@plt+0x121a8>
   23464:	add	r6, r6, r0
   23468:	sub	r5, r1, #1
   2346c:	cmp	r6, r0
   23470:	bcc	234c4 <__assert_fail@plt+0x121a4>
   23474:	cmp	r6, r3
   23478:	subcc	r1, r1, #2
   2347c:	addcc	r6, r6, r0
   23480:	movcs	r1, r5
   23484:	b	234c8 <__assert_fail@plt+0x121a8>
   23488:	movw	r1, #43691	; 0xaaab
   2348c:	add	r0, r6, #2
   23490:	movt	r1, #43690	; 0xaaaa
   23494:	umull	r0, r1, r0, r1
   23498:	lsr	r6, r1, #1
   2349c:	b	23550 <__assert_fail@plt+0x12230>
   234a0:	add	r0, r6, #3
   234a4:	lsr	r6, r0, #2
   234a8:	b	23550 <__assert_fail@plt+0x12230>
   234ac:	movw	r1, #52429	; 0xcccd
   234b0:	add	r0, r6, #4
   234b4:	movt	r1, #52428	; 0xcccc
   234b8:	umull	r0, r1, r0, r1
   234bc:	lsr	r6, r1, #2
   234c0:	b	23550 <__assert_fail@plt+0x12230>
   234c4:	mov	r1, r5
   234c8:	sub	r3, r6, r3
   234cc:	mov	r5, #1
   234d0:	lsr	r6, r3, #16
   234d4:	orr	r2, r2, r3, lsl #16
   234d8:	mla	r6, r6, r1, r3
   234dc:	add	r5, r5, r6, lsr #16
   234e0:	mls	r2, r5, r0, r2
   234e4:	cmp	r2, r6, lsl #16
   234e8:	lsrcs	r5, r6, #16
   234ec:	addcs	r2, r2, r0
   234f0:	mov	r6, #0
   234f4:	add	r1, r5, r1, lsl #16
   234f8:	cmp	r2, r0
   234fc:	add	r5, sp, #12
   23500:	addcs	r1, r1, #1
   23504:	str	r1, [sp, #24]
   23508:	mov	r0, r7
   2350c:	mov	r1, r7
   23510:	mov	r2, r4
   23514:	mov	r3, r5
   23518:	bl	26638 <__assert_fail@plt+0x15318>
   2351c:	sub	r0, r4, #1
   23520:	add	r6, r6, #1
   23524:	ldr	r1, [r7, r0, lsl #2]
   23528:	cmp	r1, #0
   2352c:	moveq	r4, r0
   23530:	cmp	r4, #0
   23534:	bgt	23508 <__assert_fail@plt+0x121e8>
   23538:	movw	r0, #12580	; 0x3124
   2353c:	mov	r1, r9
   23540:	movt	r0, #4
   23544:	ldr	r2, [r0]
   23548:	mov	r0, r7
   2354c:	blx	r2
   23550:	mov	r0, r6
   23554:	sub	sp, fp, #28
   23558:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2355c:	movw	r0, #4048	; 0xfd0
   23560:	movw	r1, #1996	; 0x7cc
   23564:	movw	r3, #4058	; 0xfda
   23568:	movw	r2, #4191	; 0x105f
   2356c:	movt	r0, #3
   23570:	b	23588 <__assert_fail@plt+0x12268>
   23574:	movw	r0, #4107	; 0x100b
   23578:	movw	r1, #1996	; 0x7cc
   2357c:	movw	r3, #4058	; 0xfda
   23580:	movw	r2, #4192	; 0x1060
   23584:	movt	r0, #3
   23588:	movt	r1, #3
   2358c:	movt	r3, #3
   23590:	bl	11320 <__assert_fail@plt>
   23594:	movw	r0, #6643	; 0x19f3
   23598:	movw	r1, #1996	; 0x7cc
   2359c:	movw	r3, #6649	; 0x19f9
   235a0:	movw	r2, #1210	; 0x4ba
   235a4:	movt	r0, #3
   235a8:	movt	r1, #3
   235ac:	movt	r3, #3
   235b0:	bl	11320 <__assert_fail@plt>
   235b4:	movw	r0, #6696	; 0x1a28
   235b8:	movw	r1, #1996	; 0x7cc
   235bc:	movw	r3, #6702	; 0x1a2e
   235c0:	movw	r2, #902	; 0x386
   235c4:	movt	r0, #3
   235c8:	movt	r1, #3
   235cc:	movt	r3, #3
   235d0:	bl	11320 <__assert_fail@plt>
   235d4:	push	{r4, sl, fp, lr}
   235d8:	add	fp, sp, #8
   235dc:	sub	sp, sp, #16
   235e0:	mov	r3, r2
   235e4:	mov	r2, r1
   235e8:	movw	r1, #1992	; 0x7c8
   235ec:	movt	r1, #3
   235f0:	str	r1, [sp, #12]
   235f4:	mov	r1, #0
   235f8:	str	r1, [sp, #8]
   235fc:	str	r1, [sp, #4]
   23600:	add	r1, sp, #4
   23604:	bl	228ac <__assert_fail@plt+0x1158c>
   23608:	ldmib	sp, {r0, r1}
   2360c:	clz	r1, r1
   23610:	lsr	r4, r1, #5
   23614:	cmp	r0, #0
   23618:	beq	23634 <__assert_fail@plt+0x12314>
   2361c:	movw	r1, #12580	; 0x3124
   23620:	movt	r1, #4
   23624:	ldr	r2, [r1]
   23628:	lsl	r1, r0, #2
   2362c:	ldr	r0, [sp, #12]
   23630:	blx	r2
   23634:	mov	r0, r4
   23638:	sub	sp, fp, #8
   2363c:	pop	{r4, sl, fp, pc}
   23640:	mov	r3, #2
   23644:	b	228ac <__assert_fail@plt+0x1158c>
   23648:	mov	r2, r1
   2364c:	mov	r1, #0
   23650:	mov	r3, #2
   23654:	b	228ac <__assert_fail@plt+0x1158c>
   23658:	push	{r4, sl, fp, lr}
   2365c:	add	fp, sp, #8
   23660:	sub	sp, sp, #16
   23664:	ldr	r4, [r0, #4]
   23668:	cmp	r4, #1
   2366c:	blt	236c0 <__assert_fail@plt+0x123a0>
   23670:	mov	r2, r0
   23674:	movw	r0, #1992	; 0x7c8
   23678:	add	r1, sp, #4
   2367c:	mov	r3, #2
   23680:	movt	r0, #3
   23684:	str	r0, [sp, #12]
   23688:	mov	r0, #0
   2368c:	str	r0, [sp, #8]
   23690:	str	r0, [sp, #4]
   23694:	mov	r0, #0
   23698:	bl	228ac <__assert_fail@plt+0x1158c>
   2369c:	ldmib	sp, {r0, r4}
   236a0:	cmp	r0, #0
   236a4:	beq	236c0 <__assert_fail@plt+0x123a0>
   236a8:	movw	r1, #12580	; 0x3124
   236ac:	movt	r1, #4
   236b0:	ldr	r2, [r1]
   236b4:	lsl	r1, r0, #2
   236b8:	ldr	r0, [sp, #12]
   236bc:	blx	r2
   236c0:	clz	r0, r4
   236c4:	lsr	r0, r0, #5
   236c8:	sub	sp, fp, #8
   236cc:	pop	{r4, sl, fp, pc}
   236d0:	push	{r4, sl, fp, lr}
   236d4:	add	fp, sp, #8
   236d8:	sub	sp, sp, #24
   236dc:	cmp	r1, #0
   236e0:	ble	23764 <__assert_fail@plt+0x12444>
   236e4:	add	r2, r0, r1, lsl #2
   236e8:	ldr	r2, [r2, #-4]
   236ec:	cmp	r2, #0
   236f0:	beq	2377c <__assert_fail@plt+0x1245c>
   236f4:	str	r0, [sp, #8]
   236f8:	mov	r0, #0
   236fc:	mov	r2, sp
   23700:	mov	r3, #2
   23704:	stm	sp, {r0, r1}
   23708:	movw	r1, #1992	; 0x7c8
   2370c:	movt	r1, #3
   23710:	str	r1, [sp, #20]
   23714:	str	r0, [sp, #16]
   23718:	str	r0, [sp, #12]
   2371c:	add	r1, sp, #12
   23720:	mov	r0, #0
   23724:	bl	228ac <__assert_fail@plt+0x1158c>
   23728:	ldr	r1, [sp, #16]
   2372c:	ldr	r0, [sp, #12]
   23730:	clz	r1, r1
   23734:	cmp	r0, #0
   23738:	lsr	r4, r1, #5
   2373c:	beq	23758 <__assert_fail@plt+0x12438>
   23740:	movw	r1, #12580	; 0x3124
   23744:	movt	r1, #4
   23748:	ldr	r2, [r1]
   2374c:	lsl	r1, r0, #2
   23750:	ldr	r0, [sp, #20]
   23754:	blx	r2
   23758:	mov	r0, r4
   2375c:	sub	sp, fp, #8
   23760:	pop	{r4, sl, fp, pc}
   23764:	movw	r0, #5322	; 0x14ca
   23768:	movw	r1, #1996	; 0x7cc
   2376c:	movw	r3, #3528	; 0xdc8
   23770:	movw	r2, #3302	; 0xce6
   23774:	movt	r0, #3
   23778:	b	23790 <__assert_fail@plt+0x12470>
   2377c:	movw	r0, #3575	; 0xdf7
   23780:	movw	r1, #1996	; 0x7cc
   23784:	movw	r3, #3528	; 0xdc8
   23788:	movw	r2, #3303	; 0xce7
   2378c:	movt	r0, #3
   23790:	movt	r1, #3
   23794:	movt	r3, #3
   23798:	bl	11320 <__assert_fail@plt>
   2379c:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   237a0:	add	fp, sp, #24
   237a4:	sub	sp, sp, #40	; 0x28
   237a8:	cmp	r3, #0
   237ac:	ble	23a2c <__assert_fail@plt+0x1270c>
   237b0:	mov	r9, r0
   237b4:	add	r0, r2, r3, lsl #2
   237b8:	mov	r6, r3
   237bc:	ldr	r0, [r0, #-4]
   237c0:	cmp	r0, #0
   237c4:	beq	23a44 <__assert_fail@plt+0x12724>
   237c8:	movw	r0, #1992	; 0x7c8
   237cc:	mov	r8, r1
   237d0:	mov	r1, #0
   237d4:	str	r2, [sp, #12]
   237d8:	add	r2, sp, #4
   237dc:	mov	r3, #2
   237e0:	movt	r0, #3
   237e4:	stmib	sp, {r1, r6}
   237e8:	str	r0, [sp, #24]
   237ec:	str	r0, [sp, #36]	; 0x24
   237f0:	str	r1, [sp, #20]
   237f4:	str	r1, [sp, #32]
   237f8:	str	r1, [sp, #16]
   237fc:	str	r1, [sp, #28]
   23800:	add	r0, sp, #28
   23804:	add	r1, sp, #16
   23808:	bl	228ac <__assert_fail@plt+0x1158c>
   2380c:	ldr	r1, [sp, #32]
   23810:	add	r0, r6, #1
   23814:	add	r0, r0, r0, lsr #31
   23818:	cmp	r1, r0, asr #1
   2381c:	bne	23a5c <__assert_fail@plt+0x1273c>
   23820:	ldr	r0, [sp, #36]	; 0x24
   23824:	cmp	r1, #1
   23828:	blt	238e8 <__assert_fail@plt+0x125c8>
   2382c:	cmp	r1, #4
   23830:	bcc	238cc <__assert_fail@plt+0x125ac>
   23834:	add	r2, r0, r1, lsl #2
   23838:	cmp	r2, r9
   2383c:	bls	2384c <__assert_fail@plt+0x1252c>
   23840:	add	r2, r9, r1, lsl #2
   23844:	cmp	r0, r2
   23848:	bcc	238cc <__assert_fail@plt+0x125ac>
   2384c:	bic	ip, r1, #3
   23850:	mov	r3, #1
   23854:	subs	r2, ip, #4
   23858:	add	r2, r3, r2, lsr #2
   2385c:	and	lr, r2, #1
   23860:	beq	23a0c <__assert_fail@plt+0x126ec>
   23864:	mvn	r3, #31
   23868:	sub	r2, r2, lr
   2386c:	mvn	r6, #0
   23870:	add	r4, r3, r1, lsl #2
   23874:	add	r7, r0, r4
   23878:	add	r4, r9, r4
   2387c:	add	r5, r7, #16
   23880:	sub	r6, r6, #8
   23884:	subs	r2, r2, #2
   23888:	vld1.32	{d16-d17}, [r5]
   2388c:	add	r5, r4, #16
   23890:	vst1.32	{d16-d17}, [r5]
   23894:	vld1.32	{d16-d17}, [r7], r3
   23898:	vst1.32	{d16-d17}, [r4], r3
   2389c:	bne	2387c <__assert_fail@plt+0x1255c>
   238a0:	cmp	lr, #0
   238a4:	beq	238c4 <__assert_fail@plt+0x125a4>
   238a8:	add	r2, r1, r6
   238ac:	add	r3, r0, r2, lsl #2
   238b0:	add	r2, r9, r2, lsl #2
   238b4:	sub	r3, r3, #12
   238b8:	sub	r2, r2, #12
   238bc:	vld1.32	{d16-d17}, [r3]
   238c0:	vst1.32	{d16-d17}, [r2]
   238c4:	subs	r1, r1, ip
   238c8:	beq	238e8 <__assert_fail@plt+0x125c8>
   238cc:	sub	r2, r0, #4
   238d0:	sub	r3, r9, #4
   238d4:	ldr	r7, [r2, r1, lsl #2]
   238d8:	str	r7, [r3, r1, lsl #2]
   238dc:	sub	r1, r1, #1
   238e0:	cmp	r1, #0
   238e4:	bgt	238d4 <__assert_fail@plt+0x125b4>
   238e8:	ldr	r1, [sp, #28]
   238ec:	movw	r9, #12580	; 0x3124
   238f0:	movt	r9, #4
   238f4:	cmp	r1, #0
   238f8:	beq	23908 <__assert_fail@plt+0x125e8>
   238fc:	ldr	r2, [r9]
   23900:	lsl	r1, r1, #2
   23904:	blx	r2
   23908:	ldr	r5, [sp, #20]
   2390c:	cmp	r8, #0
   23910:	beq	239e4 <__assert_fail@plt+0x126c4>
   23914:	cmp	r5, #1
   23918:	blt	239e4 <__assert_fail@plt+0x126c4>
   2391c:	ldr	r0, [sp, #24]
   23920:	cmp	r5, #4
   23924:	mov	r1, r5
   23928:	bcc	239c8 <__assert_fail@plt+0x126a8>
   2392c:	add	r1, r0, r5, lsl #2
   23930:	cmp	r1, r8
   23934:	bls	23948 <__assert_fail@plt+0x12628>
   23938:	add	r1, r8, r5, lsl #2
   2393c:	cmp	r0, r1
   23940:	mov	r1, r5
   23944:	bcc	239c8 <__assert_fail@plt+0x126a8>
   23948:	bic	ip, r5, #3
   2394c:	mov	r2, #1
   23950:	subs	r1, ip, #4
   23954:	add	r1, r2, r1, lsr #2
   23958:	and	lr, r1, #1
   2395c:	beq	23a1c <__assert_fail@plt+0x126fc>
   23960:	mvn	r2, #31
   23964:	sub	r1, r1, lr
   23968:	add	r3, r2, r5, lsl #2
   2396c:	add	r7, r0, r3
   23970:	add	r4, r8, r3
   23974:	mvn	r3, #0
   23978:	add	r6, r7, #16
   2397c:	sub	r3, r3, #8
   23980:	subs	r1, r1, #2
   23984:	vld1.32	{d16-d17}, [r6]
   23988:	add	r6, r4, #16
   2398c:	vst1.32	{d16-d17}, [r6]
   23990:	vld1.32	{d16-d17}, [r7], r2
   23994:	vst1.32	{d16-d17}, [r4], r2
   23998:	bne	23978 <__assert_fail@plt+0x12658>
   2399c:	cmp	lr, #0
   239a0:	beq	239c0 <__assert_fail@plt+0x126a0>
   239a4:	add	r1, r5, r3
   239a8:	add	r2, r0, r1, lsl #2
   239ac:	add	r1, r8, r1, lsl #2
   239b0:	sub	r2, r2, #12
   239b4:	sub	r1, r1, #12
   239b8:	vld1.32	{d16-d17}, [r2]
   239bc:	vst1.32	{d16-d17}, [r1]
   239c0:	subs	r1, r5, ip
   239c4:	beq	239e4 <__assert_fail@plt+0x126c4>
   239c8:	sub	r0, r0, #4
   239cc:	sub	r2, r8, #4
   239d0:	ldr	r3, [r0, r1, lsl #2]
   239d4:	str	r3, [r2, r1, lsl #2]
   239d8:	sub	r1, r1, #1
   239dc:	cmp	r1, #0
   239e0:	bgt	239d0 <__assert_fail@plt+0x126b0>
   239e4:	ldr	r0, [sp, #16]
   239e8:	cmp	r0, #0
   239ec:	beq	23a00 <__assert_fail@plt+0x126e0>
   239f0:	lsl	r1, r0, #2
   239f4:	ldr	r2, [r9]
   239f8:	ldr	r0, [sp, #24]
   239fc:	blx	r2
   23a00:	mov	r0, r5
   23a04:	sub	sp, fp, #24
   23a08:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   23a0c:	mvn	r6, #0
   23a10:	cmp	lr, #0
   23a14:	bne	238a8 <__assert_fail@plt+0x12588>
   23a18:	b	238c4 <__assert_fail@plt+0x125a4>
   23a1c:	mvn	r3, #0
   23a20:	cmp	lr, #0
   23a24:	bne	239a4 <__assert_fail@plt+0x12684>
   23a28:	b	239c0 <__assert_fail@plt+0x126a0>
   23a2c:	movw	r0, #5322	; 0x14ca
   23a30:	movw	r1, #1996	; 0x7cc
   23a34:	movw	r3, #3588	; 0xe04
   23a38:	movw	r2, #3313	; 0xcf1
   23a3c:	movt	r0, #3
   23a40:	b	23a70 <__assert_fail@plt+0x12750>
   23a44:	movw	r0, #3575	; 0xdf7
   23a48:	movw	r1, #1996	; 0x7cc
   23a4c:	movw	r3, #3588	; 0xe04
   23a50:	movw	r2, #3314	; 0xcf2
   23a54:	movt	r0, #3
   23a58:	b	23a70 <__assert_fail@plt+0x12750>
   23a5c:	movw	r0, #3648	; 0xe40
   23a60:	movw	r1, #1996	; 0x7cc
   23a64:	movw	r3, #3588	; 0xe04
   23a68:	movw	r2, #3320	; 0xcf8
   23a6c:	movt	r0, #3
   23a70:	movt	r1, #3
   23a74:	movt	r3, #3
   23a78:	bl	11320 <__assert_fail@plt>
   23a7c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   23a80:	add	fp, sp, #28
   23a84:	sub	sp, sp, #20
   23a88:	cmp	r1, #0
   23a8c:	mov	r4, r1
   23a90:	mov	r5, r1
   23a94:	mov	r6, r0
   23a98:	str	r2, [sp, #4]
   23a9c:	addeq	r4, r4, #1
   23aa0:	cmp	r4, #0
   23aa4:	beq	23ac4 <__assert_fail@plt+0x127a4>
   23aa8:	mov	r0, #1
   23aac:	str	r0, [r6, #4]
   23ab0:	ldr	r1, [r6]
   23ab4:	cmp	r1, #0
   23ab8:	ble	23ad0 <__assert_fail@plt+0x127b0>
   23abc:	ldr	r0, [r6, #8]
   23ac0:	b	23b30 <__assert_fail@plt+0x12810>
   23ac4:	mov	r0, #0
   23ac8:	str	r0, [r6, #4]
   23acc:	b	23b34 <__assert_fail@plt+0x12814>
   23ad0:	beq	23af4 <__assert_fail@plt+0x127d4>
   23ad4:	movw	r0, #12576	; 0x3120
   23ad8:	lsl	r1, r1, #2
   23adc:	mov	r2, #4
   23ae0:	movt	r0, #4
   23ae4:	ldr	r3, [r0]
   23ae8:	ldr	r0, [r6, #8]
   23aec:	blx	r3
   23af0:	b	23b08 <__assert_fail@plt+0x127e8>
   23af4:	movw	r0, #12572	; 0x311c
   23af8:	movt	r0, #4
   23afc:	ldr	r1, [r0]
   23b00:	mov	r0, #4
   23b04:	blx	r1
   23b08:	mov	r1, #1
   23b0c:	str	r0, [r6, #8]
   23b10:	str	r1, [r6]
   23b14:	ldr	r1, [r6, #4]
   23b18:	cmp	r1, #0
   23b1c:	rsbmi	r1, r1, #0
   23b20:	cmp	r1, #2
   23b24:	blt	23b30 <__assert_fail@plt+0x12810>
   23b28:	mov	r1, #0
   23b2c:	str	r1, [r6, #4]
   23b30:	str	r4, [r0]
   23b34:	ldr	r0, [sp, #4]
   23b38:	add	r7, r0, #1
   23b3c:	cmp	r7, #2
   23b40:	bcc	23c00 <__assert_fail@plt+0x128e0>
   23b44:	cmp	r7, r5
   23b48:	bcs	23c00 <__assert_fail@plt+0x128e0>
   23b4c:	ldr	r0, [sp, #4]
   23b50:	mov	r8, #0
   23b54:	mov	sl, #1
   23b58:	rsb	r0, r0, #0
   23b5c:	str	r0, [sp]
   23b60:	b	23b80 <__assert_fail@plt+0x12860>
   23b64:	mov	r0, r6
   23b68:	mov	r1, r6
   23b6c:	add	r2, sp, #8
   23b70:	str	r8, [sp, #12]
   23b74:	bl	1ca60 <__assert_fail@plt+0xb740>
   23b78:	cmp	r5, r7
   23b7c:	bls	23c00 <__assert_fail@plt+0x128e0>
   23b80:	movw	r0, #1992	; 0x7c8
   23b84:	movt	r0, #3
   23b88:	str	r0, [sp, #16]
   23b8c:	ldr	r0, [sp]
   23b90:	str	r8, [sp, #12]
   23b94:	str	r8, [sp, #8]
   23b98:	adds	r9, r0, r5
   23b9c:	ldr	r0, [sp, #4]
   23ba0:	sub	r5, r5, r0
   23ba4:	beq	23b64 <__assert_fail@plt+0x12844>
   23ba8:	movw	r0, #12572	; 0x311c
   23bac:	str	sl, [sp, #12]
   23bb0:	movt	r0, #4
   23bb4:	ldr	r1, [r0]
   23bb8:	mov	r0, #4
   23bbc:	blx	r1
   23bc0:	str	r0, [sp, #16]
   23bc4:	str	sl, [sp, #8]
   23bc8:	mov	r4, r0
   23bcc:	str	r9, [r0]
   23bd0:	mov	r0, r6
   23bd4:	mov	r1, r6
   23bd8:	add	r2, sp, #8
   23bdc:	bl	1ca60 <__assert_fail@plt+0xb740>
   23be0:	movw	r0, #12580	; 0x3124
   23be4:	mov	r1, #4
   23be8:	movt	r0, #4
   23bec:	ldr	r2, [r0]
   23bf0:	mov	r0, r4
   23bf4:	blx	r2
   23bf8:	cmp	r5, r7
   23bfc:	bhi	23b80 <__assert_fail@plt+0x12860>
   23c00:	sub	sp, fp, #28
   23c04:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   23c08:	mov	r2, #2
   23c0c:	b	23a7c <__assert_fail@plt+0x1275c>
   23c10:	mov	r2, #1
   23c14:	b	23a7c <__assert_fail@plt+0x1275c>
   23c18:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   23c1c:	add	fp, sp, #28
   23c20:	sub	sp, sp, #28
   23c24:	cmp	r1, r2
   23c28:	mov	r7, #0
   23c2c:	mov	r4, r0
   23c30:	mov	r6, r2
   23c34:	mov	r5, r1
   23c38:	mov	r0, #0
   23c3c:	movwcs	r7, #1
   23c40:	bcc	23c60 <__assert_fail@plt+0x12940>
   23c44:	mov	r0, #1
   23c48:	str	r0, [r4, #4]
   23c4c:	ldr	r1, [r4]
   23c50:	cmp	r1, #0
   23c54:	ble	23c68 <__assert_fail@plt+0x12948>
   23c58:	ldr	r0, [r4, #8]
   23c5c:	b	23cc8 <__assert_fail@plt+0x129a8>
   23c60:	str	r0, [r4, #4]
   23c64:	b	23ccc <__assert_fail@plt+0x129ac>
   23c68:	beq	23c8c <__assert_fail@plt+0x1296c>
   23c6c:	movw	r0, #12576	; 0x3120
   23c70:	lsl	r1, r1, #2
   23c74:	mov	r2, #4
   23c78:	movt	r0, #4
   23c7c:	ldr	r3, [r0]
   23c80:	ldr	r0, [r4, #8]
   23c84:	blx	r3
   23c88:	b	23ca0 <__assert_fail@plt+0x12980>
   23c8c:	movw	r0, #12572	; 0x311c
   23c90:	movt	r0, #4
   23c94:	ldr	r1, [r0]
   23c98:	mov	r0, #4
   23c9c:	blx	r1
   23ca0:	mov	r1, #1
   23ca4:	str	r0, [r4, #8]
   23ca8:	str	r1, [r4]
   23cac:	ldr	r1, [r4, #4]
   23cb0:	cmp	r1, #0
   23cb4:	rsbmi	r1, r1, #0
   23cb8:	cmp	r1, #2
   23cbc:	blt	23cc8 <__assert_fail@plt+0x129a8>
   23cc0:	mov	r1, #0
   23cc4:	str	r1, [r4, #4]
   23cc8:	str	r7, [r0]
   23ccc:	mov	r9, #0
   23cd0:	subs	r7, r5, r6
   23cd4:	movw	r0, #1992	; 0x7c8
   23cd8:	mov	r2, #1
   23cdc:	mov	sl, #1
   23ce0:	movcc	r7, r9
   23ce4:	cmp	r6, r5, lsr #1
   23ce8:	movt	r0, #3
   23cec:	movls	r7, r6
   23cf0:	str	r0, [sp, #12]
   23cf4:	add	r0, sp, #4
   23cf8:	str	r9, [sp, #8]
   23cfc:	str	r9, [sp, #4]
   23d00:	mov	r1, r7
   23d04:	bl	23a7c <__assert_fail@plt+0x1275c>
   23d08:	cmp	r7, #0
   23d0c:	beq	23da8 <__assert_fail@plt+0x12a88>
   23d10:	add	r8, sp, #16
   23d14:	b	23d74 <__assert_fail@plt+0x12a54>
   23d18:	movw	r0, #12572	; 0x311c
   23d1c:	str	sl, [sp, #20]
   23d20:	movt	r0, #4
   23d24:	ldr	r1, [r0]
   23d28:	mov	r0, #4
   23d2c:	blx	r1
   23d30:	str	r0, [sp, #24]
   23d34:	str	sl, [sp, #16]
   23d38:	mov	r6, r0
   23d3c:	str	r5, [r0]
   23d40:	mov	r0, r4
   23d44:	mov	r1, r4
   23d48:	mov	r2, r8
   23d4c:	bl	1ca60 <__assert_fail@plt+0xb740>
   23d50:	movw	r0, #12580	; 0x3124
   23d54:	mov	r1, #4
   23d58:	movt	r0, #4
   23d5c:	ldr	r2, [r0]
   23d60:	mov	r0, r6
   23d64:	blx	r2
   23d68:	sub	r5, r5, #1
   23d6c:	subs	r7, r7, #1
   23d70:	beq	23da8 <__assert_fail@plt+0x12a88>
   23d74:	movw	r0, #1992	; 0x7c8
   23d78:	cmp	r5, #0
   23d7c:	movt	r0, #3
   23d80:	str	r0, [sp, #24]
   23d84:	str	r9, [sp, #20]
   23d88:	str	r9, [sp, #16]
   23d8c:	bne	23d18 <__assert_fail@plt+0x129f8>
   23d90:	mov	r0, r4
   23d94:	mov	r1, r4
   23d98:	mov	r2, r8
   23d9c:	str	r9, [sp, #20]
   23da0:	bl	1ca60 <__assert_fail@plt+0xb740>
   23da4:	b	23d68 <__assert_fail@plt+0x12a48>
   23da8:	mov	r0, #2
   23dac:	add	r3, sp, #4
   23db0:	mov	r1, #0
   23db4:	mov	r2, r4
   23db8:	str	r0, [sp]
   23dbc:	mov	r0, r4
   23dc0:	bl	1d0f8 <__assert_fail@plt+0xbdd8>
   23dc4:	cmp	r0, #0
   23dc8:	bne	23df8 <__assert_fail@plt+0x12ad8>
   23dcc:	ldr	r0, [sp, #4]
   23dd0:	cmp	r0, #0
   23dd4:	beq	23df0 <__assert_fail@plt+0x12ad0>
   23dd8:	movw	r1, #12580	; 0x3124
   23ddc:	movt	r1, #4
   23de0:	ldr	r2, [r1]
   23de4:	lsl	r1, r0, #2
   23de8:	ldr	r0, [sp, #12]
   23dec:	blx	r2
   23df0:	sub	sp, fp, #28
   23df4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   23df8:	movw	r0, #2977	; 0xba1
   23dfc:	movw	r1, #1996	; 0x7cc
   23e00:	movw	r3, #2987	; 0xbab
   23e04:	movw	r2, #2521	; 0x9d9
   23e08:	movt	r0, #3
   23e0c:	movt	r1, #3
   23e10:	movt	r3, #3
   23e14:	bl	11320 <__assert_fail@plt>
   23e18:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   23e1c:	add	fp, sp, #28
   23e20:	sub	sp, sp, #116	; 0x74
   23e24:	mov	r9, r0
   23e28:	mov	r8, r1
   23e2c:	ldr	r0, [r0, #4]
   23e30:	ldr	r1, [r9, #8]
   23e34:	cmp	r0, #0
   23e38:	mov	r2, r0
   23e3c:	ldr	r1, [r1]
   23e40:	movwne	r2, #1
   23e44:	tst	r1, r2
   23e48:	beq	23e80 <__assert_fail@plt+0x12b60>
   23e4c:	cmp	r0, #0
   23e50:	beq	24dcc <__assert_fail@plt+0x13aac>
   23e54:	rsbmi	r0, r0, #0
   23e58:	cmp	r0, #1
   23e5c:	bgt	23eb4 <__assert_fail@plt+0x12b94>
   23e60:	cmp	r1, #63	; 0x3f
   23e64:	bhi	23eb4 <__assert_fail@plt+0x12b94>
   23e68:	lsr	r0, r1, #1
   23e6c:	movw	r1, #38620	; 0x96dc
   23e70:	mov	r2, #2
   23e74:	movt	r1, #51561	; 0xc969
   23e78:	and	r7, r2, r1, lsr r0
   23e7c:	b	24da0 <__assert_fail@plt+0x13a80>
   23e80:	cmp	r0, #0
   23e84:	mov	r2, r0
   23e88:	mov	r7, #0
   23e8c:	rsbmi	r2, r0, #0
   23e90:	cmp	r2, #1
   23e94:	bgt	24da0 <__assert_fail@plt+0x13a80>
   23e98:	sub	r1, r1, #2
   23e9c:	cmp	r0, #0
   23ea0:	clz	r1, r1
   23ea4:	lsr	r1, r1, #5
   23ea8:	lslne	r0, r1, #1
   23eac:	mov	r7, r0
   23eb0:	b	24da0 <__assert_fail@plt+0x13a80>
   23eb4:	movw	r0, #12572	; 0x311c
   23eb8:	mov	r4, #1
   23ebc:	movt	r0, #4
   23ec0:	str	r4, [fp, #-36]	; 0xffffffdc
   23ec4:	ldr	r1, [r0]
   23ec8:	mov	r0, #4
   23ecc:	blx	r1
   23ed0:	movw	r1, #55191	; 0xd797
   23ed4:	str	r0, [fp, #-32]	; 0xffffffe0
   23ed8:	str	r4, [fp, #-40]	; 0xffffffd8
   23edc:	movt	r1, #49359	; 0xc0cf
   23ee0:	str	r1, [r0]
   23ee4:	sub	r0, fp, #40	; 0x28
   23ee8:	mov	r1, r9
   23eec:	mov	r2, r0
   23ef0:	bl	1eff0 <__assert_fail@plt+0xdcd0>
   23ef4:	ldr	r0, [fp, #-36]	; 0xffffffdc
   23ef8:	cmp	r0, #0
   23efc:	beq	23f0c <__assert_fail@plt+0x12bec>
   23f00:	ldr	r0, [fp, #-32]	; 0xffffffe0
   23f04:	ldr	r4, [r0]
   23f08:	b	23f10 <__assert_fail@plt+0x12bf0>
   23f0c:	mov	r4, #0
   23f10:	ldr	r0, [fp, #-40]	; 0xffffffd8
   23f14:	cmp	r0, #0
   23f18:	beq	23f34 <__assert_fail@plt+0x12c14>
   23f1c:	movw	r1, #12580	; 0x3124
   23f20:	movt	r1, #4
   23f24:	ldr	r2, [r1]
   23f28:	lsl	r1, r0, #2
   23f2c:	ldr	r0, [fp, #-32]	; 0xffffffe0
   23f30:	blx	r2
   23f34:	mov	r7, #0
   23f38:	cmp	r4, #1
   23f3c:	bne	24da0 <__assert_fail@plt+0x13a80>
   23f40:	ldr	r1, [r9, #4]
   23f44:	cmp	r1, #0
   23f48:	mov	sl, r1
   23f4c:	rsbmi	sl, r1, #0
   23f50:	cmp	sl, #1
   23f54:	bgt	23f74 <__assert_fail@plt+0x12c54>
   23f58:	mov	r7, #2
   23f5c:	cmp	r1, #0
   23f60:	beq	24da0 <__assert_fail@plt+0x13a80>
   23f64:	ldr	r0, [r9, #8]
   23f68:	ldr	r0, [r0]
   23f6c:	cmp	r0, #960	; 0x3c0
   23f70:	bls	24da0 <__assert_fail@plt+0x13a80>
   23f74:	movw	r0, #1992	; 0x7c8
   23f78:	add	r2, sp, #56	; 0x38
   23f7c:	mov	r5, #0
   23f80:	str	r9, [sp, #20]
   23f84:	movt	r0, #3
   23f88:	cmp	r2, r9
   23f8c:	mov	r2, #0
   23f90:	str	r0, [sp, #64]	; 0x40
   23f94:	str	r5, [sp, #60]	; 0x3c
   23f98:	str	r0, [sp, #52]	; 0x34
   23f9c:	str	r5, [sp, #48]	; 0x30
   23fa0:	str	r5, [sp, #56]	; 0x38
   23fa4:	str	r5, [sp, #44]	; 0x2c
   23fa8:	beq	24178 <__assert_fail@plt+0x12e58>
   23fac:	cmp	sl, #1
   23fb0:	blt	24160 <__assert_fail@plt+0x12e40>
   23fb4:	movw	r1, #12572	; 0x311c
   23fb8:	mov	r4, sl
   23fbc:	movle	r4, #1
   23fc0:	movt	r1, #4
   23fc4:	lsl	r0, r4, #2
   23fc8:	ldr	r1, [r1]
   23fcc:	blx	r1
   23fd0:	str	r0, [sp, #64]	; 0x40
   23fd4:	str	r4, [sp, #56]	; 0x38
   23fd8:	mov	r2, #0
   23fdc:	ldr	r1, [sp, #60]	; 0x3c
   23fe0:	cmp	r1, #0
   23fe4:	rsbmi	r1, r1, #0
   23fe8:	cmp	r1, r4
   23fec:	movgt	r1, #0
   23ff0:	strgt	r1, [sp, #60]	; 0x3c
   23ff4:	cmp	sl, #4
   23ff8:	ldr	r1, [r9, #8]
   23ffc:	bcc	240e4 <__assert_fail@plt+0x12dc4>
   24000:	add	r3, r1, sl, lsl #2
   24004:	cmp	r0, r3
   24008:	bcs	24018 <__assert_fail@plt+0x12cf8>
   2400c:	add	r3, r0, sl, lsl #2
   24010:	cmp	r3, r1
   24014:	bhi	240e4 <__assert_fail@plt+0x12dc4>
   24018:	bic	r2, sl, #-2147483645	; 0x80000003
   2401c:	mov	r3, #1
   24020:	mov	r9, #0
   24024:	str	r8, [sp, #8]
   24028:	str	sl, [sp, #24]
   2402c:	sub	r4, r2, #4
   24030:	add	r3, r3, r4, lsr #2
   24034:	cmp	r4, #12
   24038:	and	r7, r3, #3
   2403c:	str	r7, [sp, #28]
   24040:	bcc	240a8 <__assert_fail@plt+0x12d88>
   24044:	ldr	r7, [sp, #28]
   24048:	mov	r4, #0
   2404c:	mov	r9, #0
   24050:	sub	sl, r3, r7
   24054:	add	r6, r1, r4
   24058:	mov	r7, #48	; 0x30
   2405c:	add	r3, r0, r4
   24060:	add	r4, r4, #64	; 0x40
   24064:	subs	sl, sl, #4
   24068:	add	r9, r9, #16
   2406c:	mov	r8, r6
   24070:	mov	ip, r3
   24074:	add	lr, r6, #16
   24078:	vld1.32	{d16-d17}, [r8], r7
   2407c:	vst1.32	{d16-d17}, [ip], r7
   24080:	add	r7, r3, #16
   24084:	add	r3, r3, #32
   24088:	vld1.32	{d16-d17}, [lr]
   2408c:	vst1.32	{d16-d17}, [r7]
   24090:	add	r7, r6, #32
   24094:	vld1.32	{d16-d17}, [r7]
   24098:	vst1.32	{d16-d17}, [r3]
   2409c:	vld1.32	{d16-d17}, [r8]
   240a0:	vst1.32	{d16-d17}, [ip]
   240a4:	bne	24054 <__assert_fail@plt+0x12d34>
   240a8:	ldr	r6, [sp, #28]
   240ac:	cmp	r6, #0
   240b0:	beq	240d0 <__assert_fail@plt+0x12db0>
   240b4:	add	r3, r1, r9, lsl #2
   240b8:	add	r7, r0, r9, lsl #2
   240bc:	rsb	r4, r6, #0
   240c0:	vld1.32	{d16-d17}, [r3]!
   240c4:	adds	r4, r4, #1
   240c8:	vst1.32	{d16-d17}, [r7]!
   240cc:	bcc	240c0 <__assert_fail@plt+0x12da0>
   240d0:	ldr	sl, [sp, #24]
   240d4:	ldr	r9, [sp, #20]
   240d8:	ldr	r8, [sp, #8]
   240dc:	cmp	sl, r2
   240e0:	beq	24154 <__assert_fail@plt+0x12e34>
   240e4:	mvn	r3, r2
   240e8:	ands	r7, sl, #3
   240ec:	add	r3, sl, r3
   240f0:	beq	24108 <__assert_fail@plt+0x12de8>
   240f4:	ldr	r6, [r1, r2, lsl #2]
   240f8:	subs	r7, r7, #1
   240fc:	str	r6, [r0, r2, lsl #2]
   24100:	add	r2, r2, #1
   24104:	bne	240f4 <__assert_fail@plt+0x12dd4>
   24108:	cmp	r3, #3
   2410c:	bcc	24154 <__assert_fail@plt+0x12e34>
   24110:	sub	r3, sl, r2
   24114:	lsl	ip, r2, #2
   24118:	mov	r7, r0
   2411c:	add	r6, r1, #16
   24120:	ldr	r4, [r1, ip]!
   24124:	add	r2, r7, #16
   24128:	subs	r3, r3, #4
   2412c:	str	r4, [r7, ip]!
   24130:	ldr	r4, [r1, #4]
   24134:	str	r4, [r7, #4]
   24138:	ldr	r4, [r1, #8]
   2413c:	str	r4, [r7, #8]
   24140:	ldr	r1, [r1, #12]
   24144:	str	r1, [r7, #12]
   24148:	mov	r1, r6
   2414c:	mov	r7, r2
   24150:	bne	2411c <__assert_fail@plt+0x12dfc>
   24154:	ldr	r1, [r9, #4]
   24158:	rsb	r2, r1, #0
   2415c:	b	2416c <__assert_fail@plt+0x12e4c>
   24160:	movw	r0, #1992	; 0x7c8
   24164:	rsb	r2, r1, #0
   24168:	movt	r0, #3
   2416c:	cmp	r1, #0
   24170:	str	r1, [sp, #60]	; 0x3c
   24174:	movpl	r2, r1
   24178:	str	r2, [sp, #60]	; 0x3c
   2417c:	ldr	r1, [r0]
   24180:	subs	r1, r1, #1
   24184:	str	r1, [r0]
   24188:	bne	241a4 <__assert_fail@plt+0x12e84>
   2418c:	add	r0, r0, #4
   24190:	mov	r5, #0
   24194:	ldr	r1, [r0, r5, lsl #2]
   24198:	add	r5, r5, #1
   2419c:	cmp	r1, #0
   241a0:	beq	24194 <__assert_fail@plt+0x12e74>
   241a4:	rsb	r0, r1, #0
   241a8:	and	r1, r1, r0
   241ac:	mov	r0, #0
   241b0:	cmp	r0, r1, lsr #24
   241b4:	bne	241cc <__assert_fail@plt+0x12eac>
   241b8:	mov	r0, #0
   241bc:	lsl	r1, r1, #8
   241c0:	add	r0, r0, #8
   241c4:	cmp	r1, #16777216	; 0x1000000
   241c8:	bcc	241bc <__assert_fail@plt+0x12e9c>
   241cc:	cmp	r1, #0
   241d0:	bmi	241e4 <__assert_fail@plt+0x12ec4>
   241d4:	lsl	r1, r1, #1
   241d8:	add	r0, r0, #1
   241dc:	cmn	r1, #1
   241e0:	bgt	241d4 <__assert_fail@plt+0x12eb4>
   241e4:	mov	r1, #31
   241e8:	mov	r3, #2
   241ec:	orr	r1, r1, r5, lsl #5
   241f0:	sub	r2, r1, r0
   241f4:	add	r0, sp, #44	; 0x2c
   241f8:	add	r1, sp, #56	; 0x38
   241fc:	str	r2, [sp, #24]
   24200:	bl	1dcc8 <__assert_fail@plt+0xc9a8>
   24204:	movw	r5, #1992	; 0x7c8
   24208:	mov	r0, #0
   2420c:	mov	r4, #1
   24210:	movt	r5, #3
   24214:	str	r5, [sp, #40]	; 0x28
   24218:	str	r0, [sp, #32]
   2421c:	movw	r0, #12572	; 0x311c
   24220:	str	r4, [sp, #36]	; 0x24
   24224:	movt	r0, #4
   24228:	ldr	r1, [r0]
   2422c:	mov	r0, #4
   24230:	blx	r1
   24234:	str	r0, [sp, #40]	; 0x28
   24238:	str	r4, [sp, #32]
   2423c:	add	r2, sp, #32
   24240:	add	r3, sp, #44	; 0x2c
   24244:	ldr	r1, [sp, #36]	; 0x24
   24248:	cmp	r1, #0
   2424c:	rsbmi	r1, r1, #0
   24250:	cmp	r1, #2
   24254:	movge	r1, #0
   24258:	strge	r1, [sp, #36]	; 0x24
   2425c:	mov	r1, #2
   24260:	str	r1, [r0]
   24264:	ldr	r0, [sp, #24]
   24268:	add	r1, sp, #56	; 0x38
   2426c:	str	r0, [sp]
   24270:	mov	r0, r9
   24274:	bl	24eb4 <__assert_fail@plt+0x13b94>
   24278:	mov	r1, #0
   2427c:	cmp	r0, #0
   24280:	mov	r7, #0
   24284:	beq	24bb8 <__assert_fail@plt+0x13898>
   24288:	ldmib	r9, {r0, r1}
   2428c:	mov	r2, #0
   24290:	str	r2, [sp, #68]	; 0x44
   24294:	str	r1, [sp, #76]	; 0x4c
   24298:	cmp	r0, #0
   2429c:	mov	r2, r0
   242a0:	rsbmi	r2, r0, #0
   242a4:	cmp	r0, #0
   242a8:	str	r2, [sp, #72]	; 0x48
   242ac:	movwne	r0, #1
   242b0:	ldr	r1, [r1]
   242b4:	tst	r1, r0
   242b8:	beq	24dec <__assert_fail@plt+0x13acc>
   242bc:	mov	r7, #0
   242c0:	add	r0, sp, #32
   242c4:	sub	r1, fp, #52	; 0x34
   242c8:	add	r2, sp, #68	; 0x44
   242cc:	mov	r3, #2
   242d0:	str	r5, [fp, #-44]	; 0xffffffd4
   242d4:	str	r8, [sp, #8]
   242d8:	str	r7, [fp, #-48]	; 0xffffffd0
   242dc:	str	r7, [fp, #-52]	; 0xffffffcc
   242e0:	bl	228ac <__assert_fail@plt+0x1158c>
   242e4:	ldr	r0, [fp, #-52]	; 0xffffffcc
   242e8:	ldr	r4, [fp, #-48]	; 0xffffffd0
   242ec:	cmp	r0, #0
   242f0:	beq	2430c <__assert_fail@plt+0x12fec>
   242f4:	movw	r1, #12580	; 0x3124
   242f8:	movt	r1, #4
   242fc:	ldr	r2, [r1]
   24300:	lsl	r1, r0, #2
   24304:	ldr	r0, [fp, #-44]	; 0xffffffd4
   24308:	blx	r2
   2430c:	cmp	r4, #0
   24310:	beq	24bb0 <__assert_fail@plt+0x13890>
   24314:	ldr	r0, [sp, #36]	; 0x24
   24318:	mvn	r5, #0
   2431c:	cmp	r0, #1
   24320:	bne	24330 <__assert_fail@plt+0x13010>
   24324:	ldr	r0, [sp, #40]	; 0x28
   24328:	ldr	r0, [r0]
   2432c:	sub	r5, r0, #1
   24330:	mov	r6, #3
   24334:	mov	r8, #2
   24338:	add	r9, sp, #68	; 0x44
   2433c:	cmp	r6, r5
   24340:	bcc	24358 <__assert_fail@plt+0x13038>
   24344:	b	24458 <__assert_fail@plt+0x13138>
   24348:	tst	r0, #1
   2434c:	bne	24460 <__assert_fail@plt+0x13140>
   24350:	cmp	r6, r5
   24354:	bcs	24458 <__assert_fail@plt+0x13138>
   24358:	add	r6, r6, #2
   2435c:	mov	r0, #0
   24360:	mov	r1, #0
   24364:	mov	r2, r9
   24368:	str	r8, [sp]
   2436c:	mov	r7, #0
   24370:	mov	r3, r6
   24374:	bl	1eae8 <__assert_fail@plt+0xd7c8>
   24378:	cmp	r0, #0
   2437c:	beq	24bb0 <__assert_fail@plt+0x13890>
   24380:	rsb	r1, r0, #0
   24384:	mov	r3, #0
   24388:	and	r1, r0, r1
   2438c:	cmp	r3, r1, lsr #24
   24390:	bne	243a8 <__assert_fail@plt+0x13088>
   24394:	mov	r3, #0
   24398:	lsl	r1, r1, #8
   2439c:	add	r3, r3, #8
   243a0:	cmp	r1, #16777216	; 0x1000000
   243a4:	bcc	24398 <__assert_fail@plt+0x13078>
   243a8:	cmp	r1, #0
   243ac:	bmi	243c0 <__assert_fail@plt+0x130a0>
   243b0:	lsl	r1, r1, #1
   243b4:	add	r3, r3, #1
   243b8:	cmn	r1, #1
   243bc:	bgt	243b0 <__assert_fail@plt+0x13090>
   243c0:	lsr	r2, r0, #1
   243c4:	lsr	r4, r6, #1
   243c8:	rsb	r3, r3, #31
   243cc:	mov	r0, #0
   243d0:	b	243d8 <__assert_fail@plt+0x130b8>
   243d4:	rsb	r3, r3, #32
   243d8:	eor	r7, r4, r4, lsr #1
   243dc:	cmp	r4, r2, lsr r3
   243e0:	lsr	r1, r2, r3
   243e4:	and	r7, r7, r3
   243e8:	eor	r0, r7, r0
   243ec:	bls	2440c <__assert_fail@plt+0x130ec>
   243f0:	cmp	r1, #0
   243f4:	beq	24348 <__assert_fail@plt+0x13028>
   243f8:	and	r3, r1, r4
   243fc:	sub	r2, r4, r1
   24400:	mov	r4, r1
   24404:	eor	r0, r0, r3
   24408:	b	24414 <__assert_fail@plt+0x130f4>
   2440c:	subs	r2, r1, r4
   24410:	beq	24dac <__assert_fail@plt+0x13a8c>
   24414:	rsb	r1, r2, #0
   24418:	mov	r3, #0
   2441c:	and	r7, r2, r1
   24420:	cmp	r3, r7, lsr #24
   24424:	bne	2443c <__assert_fail@plt+0x1311c>
   24428:	mov	r3, #0
   2442c:	lsl	r7, r7, #8
   24430:	add	r3, r3, #8
   24434:	cmp	r7, #16777216	; 0x1000000
   24438:	bcc	2442c <__assert_fail@plt+0x1310c>
   2443c:	cmp	r7, #0
   24440:	bmi	243d4 <__assert_fail@plt+0x130b4>
   24444:	lsl	r7, r7, #1
   24448:	add	r3, r3, #1
   2444c:	cmn	r7, #1
   24450:	bgt	24444 <__assert_fail@plt+0x13124>
   24454:	b	243d4 <__assert_fail@plt+0x130b4>
   24458:	mov	r7, #1
   2445c:	b	24bb0 <__assert_fail@plt+0x13890>
   24460:	movw	r0, #1992	; 0x7c8
   24464:	mov	r5, #0
   24468:	movt	r0, #3
   2446c:	str	r0, [fp, #-56]	; 0xffffffc8
   24470:	ldr	r0, [sp, #72]	; 0x48
   24474:	str	r5, [fp, #-60]	; 0xffffffc4
   24478:	str	r5, [fp, #-64]	; 0xffffffc0
   2447c:	cmp	r0, #0
   24480:	bmi	24e24 <__assert_fail@plt+0x13b04>
   24484:	ldr	r2, [sp, #76]	; 0x4c
   24488:	ldr	r4, [r2]
   2448c:	cmn	r4, #1
   24490:	mov	r1, r4
   24494:	bne	244c0 <__assert_fail@plt+0x131a0>
   24498:	add	r7, r2, #4
   2449c:	sub	r3, r0, #1
   244a0:	mov	r2, #0
   244a4:	cmp	r3, r2
   244a8:	beq	245ac <__assert_fail@plt+0x1328c>
   244ac:	ldr	r1, [r7, r2, lsl #2]
   244b0:	add	r5, r2, #1
   244b4:	mov	r2, r5
   244b8:	cmn	r1, #1
   244bc:	beq	244a4 <__assert_fail@plt+0x13184>
   244c0:	add	r2, r1, #1
   244c4:	mov	r3, #0
   244c8:	bic	r7, r2, r1
   244cc:	cmp	r3, r7, lsr #24
   244d0:	bne	244e8 <__assert_fail@plt+0x131c8>
   244d4:	mov	r3, #0
   244d8:	lsl	r7, r7, #8
   244dc:	add	r3, r3, #8
   244e0:	cmp	r7, #16777216	; 0x1000000
   244e4:	bcc	244d8 <__assert_fail@plt+0x131b8>
   244e8:	cmp	r7, #0
   244ec:	bmi	24500 <__assert_fail@plt+0x131e0>
   244f0:	lsl	r7, r7, #1
   244f4:	add	r3, r3, #1
   244f8:	cmn	r7, #1
   244fc:	bgt	244f0 <__assert_fail@plt+0x131d0>
   24500:	mov	r1, #31
   24504:	orr	r1, r1, r5, lsl #5
   24508:	sub	r7, r1, r3
   2450c:	mov	r2, #1
   24510:	mov	r1, #0
   24514:	tst	r6, #2
   24518:	add	r5, r2, r6, lsr #2
   2451c:	subeq	r5, r1, r6, lsr #2
   24520:	cmp	r7, #0
   24524:	beq	24e44 <__assert_fail@plt+0x13b24>
   24528:	cmp	r0, #1
   2452c:	bgt	24540 <__assert_fail@plt+0x13220>
   24530:	cmp	r4, #5
   24534:	bcc	24e5c <__assert_fail@plt+0x13b3c>
   24538:	cmp	r0, #0
   2453c:	beq	24e5c <__assert_fail@plt+0x13b3c>
   24540:	tst	r4, #1
   24544:	beq	24e74 <__assert_fail@plt+0x13b54>
   24548:	movw	r0, #12572	; 0x311c
   2454c:	mov	r4, #1
   24550:	movt	r0, #4
   24554:	str	r4, [fp, #-36]	; 0xffffffdc
   24558:	ldr	r1, [r0]
   2455c:	mov	r0, #4
   24560:	blx	r1
   24564:	str	r0, [fp, #-32]	; 0xffffffe0
   24568:	str	r4, [fp, #-40]	; 0xffffffd8
   2456c:	str	r4, [r0]
   24570:	str	r4, [fp, #-60]	; 0xffffffc4
   24574:	ldr	r1, [fp, #-64]	; 0xffffffc0
   24578:	cmp	r1, #0
   2457c:	ble	24588 <__assert_fail@plt+0x13268>
   24580:	ldr	r0, [fp, #-56]	; 0xffffffc8
   24584:	b	245ec <__assert_fail@plt+0x132cc>
   24588:	beq	245b4 <__assert_fail@plt+0x13294>
   2458c:	movw	r0, #12576	; 0x3120
   24590:	lsl	r1, r1, #2
   24594:	mov	r2, #4
   24598:	movt	r0, #4
   2459c:	ldr	r3, [r0]
   245a0:	ldr	r0, [fp, #-56]	; 0xffffffc8
   245a4:	blx	r3
   245a8:	b	245c8 <__assert_fail@plt+0x132a8>
   245ac:	lsl	r7, r0, #5
   245b0:	b	2450c <__assert_fail@plt+0x131ec>
   245b4:	movw	r0, #12572	; 0x311c
   245b8:	movt	r0, #4
   245bc:	ldr	r1, [r0]
   245c0:	mov	r0, #4
   245c4:	blx	r1
   245c8:	mov	r1, #1
   245cc:	str	r0, [fp, #-56]	; 0xffffffc8
   245d0:	str	r1, [fp, #-64]	; 0xffffffc0
   245d4:	ldr	r1, [fp, #-60]	; 0xffffffc4
   245d8:	cmp	r1, #0
   245dc:	rsbmi	r1, r1, #0
   245e0:	cmp	r1, #2
   245e4:	movge	r1, #0
   245e8:	strge	r1, [fp, #-60]	; 0xffffffc4
   245ec:	mov	r1, #1
   245f0:	cmp	r5, #0
   245f4:	str	r1, [r0]
   245f8:	bmi	2461c <__assert_fail@plt+0x132fc>
   245fc:	beq	2463c <__assert_fail@plt+0x1331c>
   24600:	mov	r0, #1
   24604:	str	r0, [sp, #36]	; 0x24
   24608:	ldr	r1, [sp, #32]
   2460c:	cmp	r1, #0
   24610:	ble	24648 <__assert_fail@plt+0x13328>
   24614:	ldr	r0, [sp, #40]	; 0x28
   24618:	b	246cc <__assert_fail@plt+0x133ac>
   2461c:	mvn	r0, #0
   24620:	rsb	r4, r5, #0
   24624:	str	r0, [sp, #36]	; 0x24
   24628:	ldr	r1, [sp, #32]
   2462c:	cmp	r1, #0
   24630:	ble	2466c <__assert_fail@plt+0x1334c>
   24634:	ldr	r0, [sp, #40]	; 0x28
   24638:	b	2470c <__assert_fail@plt+0x133ec>
   2463c:	mov	r0, #0
   24640:	str	r0, [sp, #36]	; 0x24
   24644:	b	24710 <__assert_fail@plt+0x133f0>
   24648:	beq	24690 <__assert_fail@plt+0x13370>
   2464c:	movw	r0, #12576	; 0x3120
   24650:	lsl	r1, r1, #2
   24654:	mov	r2, #4
   24658:	movt	r0, #4
   2465c:	ldr	r3, [r0]
   24660:	ldr	r0, [sp, #40]	; 0x28
   24664:	blx	r3
   24668:	b	246a4 <__assert_fail@plt+0x13384>
   2466c:	beq	246d4 <__assert_fail@plt+0x133b4>
   24670:	movw	r0, #12576	; 0x3120
   24674:	lsl	r1, r1, #2
   24678:	mov	r2, #4
   2467c:	movt	r0, #4
   24680:	ldr	r3, [r0]
   24684:	ldr	r0, [sp, #40]	; 0x28
   24688:	blx	r3
   2468c:	b	246e8 <__assert_fail@plt+0x133c8>
   24690:	movw	r0, #12572	; 0x311c
   24694:	movt	r0, #4
   24698:	ldr	r1, [r0]
   2469c:	mov	r0, #4
   246a0:	blx	r1
   246a4:	mov	r1, #1
   246a8:	str	r1, [sp, #32]
   246ac:	str	r0, [sp, #40]	; 0x28
   246b0:	ldr	r1, [sp, #36]	; 0x24
   246b4:	cmp	r1, #0
   246b8:	rsbmi	r1, r1, #0
   246bc:	cmp	r1, #2
   246c0:	blt	246cc <__assert_fail@plt+0x133ac>
   246c4:	mov	r1, #0
   246c8:	str	r1, [sp, #36]	; 0x24
   246cc:	str	r5, [r0]
   246d0:	b	24710 <__assert_fail@plt+0x133f0>
   246d4:	movw	r0, #12572	; 0x311c
   246d8:	movt	r0, #4
   246dc:	ldr	r1, [r0]
   246e0:	mov	r0, #4
   246e4:	blx	r1
   246e8:	mov	r1, #1
   246ec:	str	r1, [sp, #32]
   246f0:	str	r0, [sp, #40]	; 0x28
   246f4:	ldr	r1, [sp, #36]	; 0x24
   246f8:	cmp	r1, #0
   246fc:	rsbmi	r1, r1, #0
   24700:	cmp	r1, #2
   24704:	movge	r1, #0
   24708:	strge	r1, [sp, #36]	; 0x24
   2470c:	str	r4, [r0]
   24710:	ldr	r0, [sp, #72]	; 0x48
   24714:	cmp	r0, #0
   24718:	rsbmi	r0, r0, #0
   2471c:	cmp	r0, #0
   24720:	beq	24794 <__assert_fail@plt+0x13474>
   24724:	sub	r2, r0, #1
   24728:	ldr	r0, [sp, #76]	; 0x4c
   2472c:	ldr	r0, [r0, r2, lsl #2]
   24730:	cmp	r0, #0
   24734:	beq	24e94 <__assert_fail@plt+0x13b74>
   24738:	mov	r1, #0
   2473c:	cmp	r1, r0, lsr #24
   24740:	bne	24758 <__assert_fail@plt+0x13438>
   24744:	mov	r1, #0
   24748:	lsl	r0, r0, #8
   2474c:	add	r1, r1, #8
   24750:	cmp	r0, #16777216	; 0x1000000
   24754:	bcc	24748 <__assert_fail@plt+0x13428>
   24758:	lsl	r2, r2, #5
   2475c:	cmp	r0, #0
   24760:	bmi	24774 <__assert_fail@plt+0x13454>
   24764:	lsl	r0, r0, #1
   24768:	add	r1, r1, #1
   2476c:	cmn	r0, #1
   24770:	bgt	24764 <__assert_fail@plt+0x13444>
   24774:	mvn	r0, r1
   24778:	orr	r1, r2, #31
   2477c:	add	sl, r1, r0
   24780:	cmp	sl, r7
   24784:	bcs	24798 <__assert_fail@plt+0x13478>
   24788:	mov	r0, #1
   2478c:	mov	r4, #0
   24790:	b	24a58 <__assert_fail@plt+0x13738>
   24794:	mvn	sl, #0
   24798:	mov	r0, #0
   2479c:	str	r7, [sp, #28]
   247a0:	sub	r4, fp, #40	; 0x28
   247a4:	sub	r8, fp, #64	; 0x40
   247a8:	add	r7, sp, #32
   247ac:	str	r5, [sp, #16]
   247b0:	sub	r0, r0, r5, lsl #1
   247b4:	str	r0, [sp, #12]
   247b8:	b	248b0 <__assert_fail@plt+0x13590>
   247bc:	ldr	r2, [sp, #16]
   247c0:	mov	r0, r7
   247c4:	mov	r1, r7
   247c8:	mov	r9, r7
   247cc:	bl	1c88c <__assert_fail@plt+0xb56c>
   247d0:	sub	r5, fp, #64	; 0x40
   247d4:	sub	r2, fp, #40	; 0x28
   247d8:	ldm	r5, {r3, r4, r5}
   247dc:	ldm	r2, {r0, r1, r2}
   247e0:	str	r4, [fp, #-36]	; 0xffffffdc
   247e4:	sub	r4, fp, #40	; 0x28
   247e8:	str	r3, [fp, #-40]	; 0xffffffd8
   247ec:	sub	r3, fp, #64	; 0x40
   247f0:	str	r5, [fp, #-32]	; 0xffffffe0
   247f4:	stm	r3, {r0, r1, r2}
   247f8:	mov	r0, r4
   247fc:	mov	r1, r4
   24800:	mov	r2, r8
   24804:	bl	1bd0c <__assert_fail@plt+0xa9ec>
   24808:	ldr	r1, [fp, #-32]	; 0xffffffe0
   2480c:	ldr	r0, [fp, #-36]	; 0xffffffdc
   24810:	ldr	r1, [r1]
   24814:	cmp	r0, #0
   24818:	movwne	r0, #1
   2481c:	tst	r1, r0
   24820:	movne	r0, r4
   24824:	movne	r1, r4
   24828:	addne	r2, sp, #68	; 0x44
   2482c:	blne	1bd0c <__assert_fail@plt+0xa9ec>
   24830:	mov	r0, r4
   24834:	mov	r1, r4
   24838:	mov	r2, #1
   2483c:	mov	r3, #2
   24840:	bl	1dcc8 <__assert_fail@plt+0xc9a8>
   24844:	ldr	r2, [sp, #12]
   24848:	mov	r0, r8
   2484c:	mov	r1, r8
   24850:	bl	1c88c <__assert_fail@plt+0xb56c>
   24854:	mov	r0, r8
   24858:	mov	r1, r4
   2485c:	mov	r2, r8
   24860:	bl	1bd0c <__assert_fail@plt+0xa9ec>
   24864:	mov	r0, #2
   24868:	mov	r1, r8
   2486c:	mov	r2, r8
   24870:	add	r3, sp, #68	; 0x44
   24874:	str	r0, [sp]
   24878:	mov	r0, #0
   2487c:	bl	1d0f8 <__assert_fail@plt+0xbdd8>
   24880:	mov	r7, r9
   24884:	mov	r5, #2
   24888:	mov	r0, #0
   2488c:	mov	r1, r4
   24890:	mov	r2, r4
   24894:	add	r3, sp, #68	; 0x44
   24898:	str	r5, [sp]
   2489c:	bl	1d0f8 <__assert_fail@plt+0xbdd8>
   248a0:	ldr	r0, [sp, #28]
   248a4:	sub	sl, sl, #1
   248a8:	cmp	sl, r0
   248ac:	bcc	24a3c <__assert_fail@plt+0x1371c>
   248b0:	mov	r0, r4
   248b4:	mov	r1, r4
   248b8:	mov	r2, r8
   248bc:	bl	1ca60 <__assert_fail@plt+0xb740>
   248c0:	ldr	r0, [sp, #72]	; 0x48
   248c4:	mov	r1, r7
   248c8:	mov	r2, r7
   248cc:	add	r3, sp, #68	; 0x44
   248d0:	lsr	r0, r0, #31
   248d4:	str	r0, [sp]
   248d8:	mov	r0, #0
   248dc:	bl	1d0f8 <__assert_fail@plt+0xbdd8>
   248e0:	mov	r0, r8
   248e4:	mov	r1, r8
   248e8:	mov	r2, r8
   248ec:	bl	1ca60 <__assert_fail@plt+0xb740>
   248f0:	movw	r0, #12572	; 0x311c
   248f4:	mov	r9, #1
   248f8:	movt	r0, #4
   248fc:	str	r9, [fp, #-48]	; 0xffffffd0
   24900:	ldr	r1, [r0]
   24904:	mov	r0, #4
   24908:	blx	r1
   2490c:	sub	r6, fp, #52	; 0x34
   24910:	mov	r5, #2
   24914:	str	r0, [fp, #-44]	; 0xffffffd4
   24918:	str	r9, [fp, #-52]	; 0xffffffcc
   2491c:	mov	r1, r7
   24920:	str	r5, [r0]
   24924:	mov	r0, r6
   24928:	mov	r2, r6
   2492c:	bl	1ca60 <__assert_fail@plt+0xb740>
   24930:	mov	r0, r8
   24934:	mov	r1, r8
   24938:	mov	r2, r6
   2493c:	bl	1c674 <__assert_fail@plt+0xb354>
   24940:	ldr	r0, [fp, #-52]	; 0xffffffcc
   24944:	cmp	r0, #0
   24948:	beq	24964 <__assert_fail@plt+0x13644>
   2494c:	movw	r1, #12580	; 0x3124
   24950:	movt	r1, #4
   24954:	ldr	r2, [r1]
   24958:	lsl	r1, r0, #2
   2495c:	ldr	r0, [fp, #-44]	; 0xffffffd4
   24960:	blx	r2
   24964:	mov	r0, #0
   24968:	mov	r1, r8
   2496c:	mov	r2, r8
   24970:	add	r3, sp, #68	; 0x44
   24974:	str	r5, [sp]
   24978:	bl	1d0f8 <__assert_fail@plt+0xbdd8>
   2497c:	mov	r0, r7
   24980:	mov	r1, r7
   24984:	mov	r2, r7
   24988:	bl	1ca60 <__assert_fail@plt+0xb740>
   2498c:	ldr	r0, [sp, #28]
   24990:	cmp	sl, r0
   24994:	beq	247bc <__assert_fail@plt+0x1349c>
   24998:	ldr	r2, [sp, #72]	; 0x48
   2499c:	cmp	r2, #0
   249a0:	mov	r0, r2
   249a4:	rsbmi	r0, r2, #0
   249a8:	cmp	r0, sl, lsr #5
   249ac:	ble	249e0 <__assert_fail@plt+0x136c0>
   249b0:	ldr	ip, [sp, #76]	; 0x4c
   249b4:	lsr	r1, sl, #5
   249b8:	and	r3, sl, #31
   249bc:	mov	r0, #1
   249c0:	cmn	r2, #1
   249c4:	ldr	r4, [ip, r1, lsl #2]
   249c8:	and	r0, r0, r4, lsr r3
   249cc:	ble	249f0 <__assert_fail@plt+0x136d0>
   249d0:	sub	r4, fp, #40	; 0x28
   249d4:	cmp	r0, #0
   249d8:	bne	247bc <__assert_fail@plt+0x1349c>
   249dc:	b	24888 <__assert_fail@plt+0x13568>
   249e0:	lsr	r0, r2, #31
   249e4:	cmp	r0, #0
   249e8:	bne	247bc <__assert_fail@plt+0x1349c>
   249ec:	b	24888 <__assert_fail@plt+0x13568>
   249f0:	cmp	r3, #0
   249f4:	rsbne	r2, r3, #32
   249f8:	movne	r3, #0
   249fc:	cmpne	r3, r4, lsl r2
   24a00:	bne	24a34 <__assert_fail@plt+0x13714>
   24a04:	sub	r2, ip, #4
   24a08:	sub	r4, fp, #40	; 0x28
   24a0c:	subs	r3, r1, #1
   24a10:	blt	249e4 <__assert_fail@plt+0x136c4>
   24a14:	ldr	r1, [r2, r1, lsl #2]
   24a18:	cmp	r1, #0
   24a1c:	mov	r1, r3
   24a20:	beq	24a0c <__assert_fail@plt+0x136ec>
   24a24:	eor	r0, r0, #1
   24a28:	cmp	r0, #0
   24a2c:	bne	247bc <__assert_fail@plt+0x1349c>
   24a30:	b	24888 <__assert_fail@plt+0x13568>
   24a34:	eor	r0, r0, #1
   24a38:	b	249d0 <__assert_fail@plt+0x136b0>
   24a3c:	ldr	r1, [fp, #-36]	; 0xffffffdc
   24a40:	ldr	r0, [fp, #-40]	; 0xffffffd8
   24a44:	ldr	r7, [sp, #28]
   24a48:	clz	r1, r1
   24a4c:	cmp	r0, #0
   24a50:	lsr	r4, r1, #5
   24a54:	beq	24a70 <__assert_fail@plt+0x13750>
   24a58:	movw	r1, #12580	; 0x3124
   24a5c:	movt	r1, #4
   24a60:	ldr	r2, [r1]
   24a64:	lsl	r1, r0, #2
   24a68:	ldr	r0, [fp, #-32]	; 0xffffffe0
   24a6c:	blx	r2
   24a70:	cmp	r4, #0
   24a74:	bne	24b84 <__assert_fail@plt+0x13864>
   24a78:	ldr	r0, [fp, #-60]	; 0xffffffc4
   24a7c:	cmp	r0, #0
   24a80:	beq	24b84 <__assert_fail@plt+0x13864>
   24a84:	add	r5, sp, #32
   24a88:	add	sl, sp, #68	; 0x44
   24a8c:	sub	r6, fp, #64	; 0x40
   24a90:	mov	r4, #1
   24a94:	mov	r8, #2
   24a98:	sub	r9, fp, #40	; 0x28
   24a9c:	subs	r7, r7, #1
   24aa0:	bne	24ae4 <__assert_fail@plt+0x137c4>
   24aa4:	b	24b80 <__assert_fail@plt+0x13860>
   24aa8:	mov	r0, #0
   24aac:	mov	r1, r6
   24ab0:	mov	r2, r6
   24ab4:	mov	r3, sl
   24ab8:	str	r8, [sp]
   24abc:	bl	1d0f8 <__assert_fail@plt+0xbdd8>
   24ac0:	mov	r0, r5
   24ac4:	mov	r1, r5
   24ac8:	mov	r2, r5
   24acc:	bl	1ca60 <__assert_fail@plt+0xb740>
   24ad0:	ldr	r0, [fp, #-60]	; 0xffffffc4
   24ad4:	cmp	r0, #0
   24ad8:	beq	24b84 <__assert_fail@plt+0x13864>
   24adc:	subs	r7, r7, #1
   24ae0:	beq	24b80 <__assert_fail@plt+0x13860>
   24ae4:	ldr	r0, [sp, #72]	; 0x48
   24ae8:	mov	r1, r5
   24aec:	mov	r2, r5
   24af0:	mov	r3, sl
   24af4:	lsr	r0, r0, #31
   24af8:	str	r0, [sp]
   24afc:	mov	r0, #0
   24b00:	bl	1d0f8 <__assert_fail@plt+0xbdd8>
   24b04:	mov	r0, r6
   24b08:	mov	r1, r6
   24b0c:	mov	r2, r6
   24b10:	bl	1ca60 <__assert_fail@plt+0xb740>
   24b14:	movw	r0, #12572	; 0x311c
   24b18:	str	r4, [fp, #-36]	; 0xffffffdc
   24b1c:	movt	r0, #4
   24b20:	ldr	r1, [r0]
   24b24:	mov	r0, #4
   24b28:	blx	r1
   24b2c:	str	r0, [fp, #-32]	; 0xffffffe0
   24b30:	str	r4, [fp, #-40]	; 0xffffffd8
   24b34:	str	r8, [r0]
   24b38:	mov	r0, r9
   24b3c:	mov	r1, r5
   24b40:	mov	r2, r9
   24b44:	bl	1ca60 <__assert_fail@plt+0xb740>
   24b48:	mov	r0, r6
   24b4c:	mov	r1, r6
   24b50:	mov	r2, r9
   24b54:	bl	1c674 <__assert_fail@plt+0xb354>
   24b58:	ldr	r0, [fp, #-40]	; 0xffffffd8
   24b5c:	cmp	r0, #0
   24b60:	beq	24aa8 <__assert_fail@plt+0x13788>
   24b64:	movw	r1, #12580	; 0x3124
   24b68:	movt	r1, #4
   24b6c:	ldr	r2, [r1]
   24b70:	lsl	r1, r0, #2
   24b74:	ldr	r0, [fp, #-32]	; 0xffffffe0
   24b78:	blx	r2
   24b7c:	b	24aa8 <__assert_fail@plt+0x13788>
   24b80:	mov	r7, #0
   24b84:	ldr	r0, [fp, #-64]	; 0xffffffc0
   24b88:	cmp	r0, #0
   24b8c:	beq	24ba8 <__assert_fail@plt+0x13888>
   24b90:	movw	r1, #12580	; 0x3124
   24b94:	movt	r1, #4
   24b98:	ldr	r2, [r1]
   24b9c:	lsl	r1, r0, #2
   24ba0:	ldr	r0, [fp, #-56]	; 0xffffffc8
   24ba4:	blx	r2
   24ba8:	cmp	r7, #0
   24bac:	movwne	r7, #1
   24bb0:	ldr	r8, [sp, #8]
   24bb4:	mov	r1, #0
   24bb8:	sub	r6, r8, #24
   24bbc:	cmp	r6, #0
   24bc0:	movwgt	r1, #1
   24bc4:	tst	r7, r1
   24bc8:	beq	24d34 <__assert_fail@plt+0x13a14>
   24bcc:	mov	r5, #0
   24bd0:	add	sl, sp, #44	; 0x2c
   24bd4:	mov	r8, #1
   24bd8:	mla	r0, r5, r5, r5
   24bdc:	adds	r9, r0, #41	; 0x29
   24be0:	beq	24c00 <__assert_fail@plt+0x138e0>
   24be4:	str	r8, [sp, #36]	; 0x24
   24be8:	ldr	r1, [sp, #32]
   24bec:	cmp	r1, #0
   24bf0:	ble	24c0c <__assert_fail@plt+0x138ec>
   24bf4:	ldr	r0, [sp, #40]	; 0x28
   24bf8:	mov	r1, #1
   24bfc:	b	24c6c <__assert_fail@plt+0x1394c>
   24c00:	mov	r1, #0
   24c04:	str	r1, [sp, #36]	; 0x24
   24c08:	b	24c70 <__assert_fail@plt+0x13950>
   24c0c:	beq	24c30 <__assert_fail@plt+0x13910>
   24c10:	movw	r0, #12576	; 0x3120
   24c14:	lsl	r1, r1, #2
   24c18:	mov	r2, #4
   24c1c:	movt	r0, #4
   24c20:	ldr	r3, [r0]
   24c24:	ldr	r0, [sp, #40]	; 0x28
   24c28:	blx	r3
   24c2c:	b	24c44 <__assert_fail@plt+0x13924>
   24c30:	movw	r0, #12572	; 0x311c
   24c34:	movt	r0, #4
   24c38:	ldr	r1, [r0]
   24c3c:	mov	r0, #4
   24c40:	blx	r1
   24c44:	str	r8, [sp, #32]
   24c48:	str	r0, [sp, #40]	; 0x28
   24c4c:	ldr	r1, [sp, #36]	; 0x24
   24c50:	cmp	r1, #0
   24c54:	mov	r2, r1
   24c58:	rsbmi	r2, r1, #0
   24c5c:	cmp	r2, #2
   24c60:	blt	24c6c <__assert_fail@plt+0x1394c>
   24c64:	mov	r1, #0
   24c68:	str	r1, [sp, #36]	; 0x24
   24c6c:	str	r9, [r0]
   24c70:	ldr	r0, [sp, #60]	; 0x3c
   24c74:	cmp	r1, r0
   24c78:	bne	24cb4 <__assert_fail@plt+0x13994>
   24c7c:	cmp	r1, #0
   24c80:	bmi	24cbc <__assert_fail@plt+0x1399c>
   24c84:	ldr	r0, [sp, #40]	; 0x28
   24c88:	ldr	r2, [sp, #64]	; 0x40
   24c8c:	sub	r0, r0, #4
   24c90:	sub	r2, r2, #4
   24c94:	subs	r3, r1, #1
   24c98:	blt	24d2c <__assert_fail@plt+0x13a0c>
   24c9c:	ldr	r4, [r2, r1, lsl #2]
   24ca0:	ldr	r1, [r0, r1, lsl #2]
   24ca4:	cmp	r1, r4
   24ca8:	mov	r1, r3
   24cac:	beq	24c94 <__assert_fail@plt+0x13974>
   24cb0:	b	24cec <__assert_fail@plt+0x139cc>
   24cb4:	blt	24cf0 <__assert_fail@plt+0x139d0>
   24cb8:	b	24d2c <__assert_fail@plt+0x13a0c>
   24cbc:	ldr	r0, [sp, #64]	; 0x40
   24cc0:	ldr	r2, [sp, #40]	; 0x28
   24cc4:	rsb	r1, r1, #0
   24cc8:	sub	r0, r0, #4
   24ccc:	sub	r2, r2, #4
   24cd0:	subs	r3, r1, #1
   24cd4:	blt	24d2c <__assert_fail@plt+0x13a0c>
   24cd8:	ldr	r4, [r2, r1, lsl #2]
   24cdc:	ldr	r1, [r0, r1, lsl #2]
   24ce0:	cmp	r1, r4
   24ce4:	mov	r1, r3
   24ce8:	beq	24cd0 <__assert_fail@plt+0x139b0>
   24cec:	bhi	24d2c <__assert_fail@plt+0x13a0c>
   24cf0:	ldr	r0, [sp, #24]
   24cf4:	add	r1, sp, #56	; 0x38
   24cf8:	add	r2, sp, #32
   24cfc:	mov	r3, sl
   24d00:	str	r0, [sp]
   24d04:	ldr	r0, [sp, #20]
   24d08:	bl	24eb4 <__assert_fail@plt+0x13b94>
   24d0c:	add	r5, r5, #1
   24d10:	mov	r7, r0
   24d14:	mov	r0, #0
   24d18:	cmp	r5, r6
   24d1c:	movwlt	r0, #1
   24d20:	tst	r7, r0
   24d24:	bne	24bd8 <__assert_fail@plt+0x138b8>
   24d28:	b	24d34 <__assert_fail@plt+0x13a14>
   24d2c:	cmp	r5, #29
   24d30:	bls	24e0c <__assert_fail@plt+0x13aec>
   24d34:	ldr	r0, [sp, #56]	; 0x38
   24d38:	cmp	r0, #0
   24d3c:	beq	24d58 <__assert_fail@plt+0x13a38>
   24d40:	movw	r1, #12580	; 0x3124
   24d44:	movt	r1, #4
   24d48:	ldr	r2, [r1]
   24d4c:	lsl	r1, r0, #2
   24d50:	ldr	r0, [sp, #64]	; 0x40
   24d54:	blx	r2
   24d58:	ldr	r0, [sp, #44]	; 0x2c
   24d5c:	cmp	r0, #0
   24d60:	beq	24d7c <__assert_fail@plt+0x13a5c>
   24d64:	movw	r1, #12580	; 0x3124
   24d68:	movt	r1, #4
   24d6c:	ldr	r2, [r1]
   24d70:	lsl	r1, r0, #2
   24d74:	ldr	r0, [sp, #52]	; 0x34
   24d78:	blx	r2
   24d7c:	ldr	r0, [sp, #32]
   24d80:	cmp	r0, #0
   24d84:	beq	24da0 <__assert_fail@plt+0x13a80>
   24d88:	movw	r1, #12580	; 0x3124
   24d8c:	movt	r1, #4
   24d90:	ldr	r2, [r1]
   24d94:	lsl	r1, r0, #2
   24d98:	ldr	r0, [sp, #40]	; 0x28
   24d9c:	blx	r2
   24da0:	mov	r0, r7
   24da4:	sub	sp, fp, #28
   24da8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   24dac:	movw	r0, #6450	; 0x1932
   24db0:	movw	r1, #1996	; 0x7cc
   24db4:	movw	r3, #6405	; 0x1905
   24db8:	movw	r2, #3410	; 0xd52
   24dbc:	movt	r0, #3
   24dc0:	movt	r1, #3
   24dc4:	movt	r3, #3
   24dc8:	bl	11320 <__assert_fail@plt>
   24dcc:	movw	r0, #3671	; 0xe57
   24dd0:	movw	r1, #1996	; 0x7cc
   24dd4:	movw	r3, #3688	; 0xe68
   24dd8:	movw	r2, #3590	; 0xe06
   24ddc:	movt	r0, #3
   24de0:	movt	r1, #3
   24de4:	movt	r3, #3
   24de8:	bl	11320 <__assert_fail@plt>
   24dec:	movw	r0, #6333	; 0x18bd
   24df0:	movw	r1, #1996	; 0x7cc
   24df4:	movw	r3, #6347	; 0x18cb
   24df8:	mov	r2, #3504	; 0xdb0
   24dfc:	movt	r0, #3
   24e00:	movt	r1, #3
   24e04:	movt	r3, #3
   24e08:	bl	11320 <__assert_fail@plt>
   24e0c:	movw	r0, #3738	; 0xe9a
   24e10:	movw	r1, #1996	; 0x7cc
   24e14:	movw	r3, #3688	; 0xe68
   24e18:	movw	r2, #3629	; 0xe2d
   24e1c:	movt	r0, #3
   24e20:	b	24de0 <__assert_fail@plt+0x13ac0>
   24e24:	movw	r0, #4927	; 0x133f
   24e28:	movw	r1, #1996	; 0x7cc
   24e2c:	movw	r3, #4844	; 0x12ec
   24e30:	mov	r2, #716	; 0x2cc
   24e34:	movt	r0, #3
   24e38:	movt	r1, #3
   24e3c:	movt	r3, #3
   24e40:	bl	11320 <__assert_fail@plt>
   24e44:	movw	r0, #6457	; 0x1939
   24e48:	movw	r1, #1996	; 0x7cc
   24e4c:	movw	r3, #6464	; 0x1940
   24e50:	movw	r2, #3442	; 0xd72
   24e54:	movt	r0, #3
   24e58:	b	24e88 <__assert_fail@plt+0x13b68>
   24e5c:	movw	r0, #6555	; 0x199b
   24e60:	movw	r1, #1996	; 0x7cc
   24e64:	movw	r3, #6464	; 0x1940
   24e68:	movw	r2, #3445	; 0xd75
   24e6c:	movt	r0, #3
   24e70:	b	24e88 <__assert_fail@plt+0x13b68>
   24e74:	movw	r0, #6333	; 0x18bd
   24e78:	movw	r1, #1996	; 0x7cc
   24e7c:	movw	r3, #6464	; 0x1940
   24e80:	movw	r2, #3446	; 0xd76
   24e84:	movt	r0, #3
   24e88:	movt	r1, #3
   24e8c:	movt	r3, #3
   24e90:	bl	11320 <__assert_fail@plt>
   24e94:	movw	r0, #6643	; 0x19f3
   24e98:	movw	r1, #1996	; 0x7cc
   24e9c:	movw	r3, #6649	; 0x19f9
   24ea0:	movw	r2, #1210	; 0x4ba
   24ea4:	movt	r0, #3
   24ea8:	movt	r1, #3
   24eac:	movt	r3, #3
   24eb0:	bl	11320 <__assert_fail@plt>
   24eb4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   24eb8:	add	fp, sp, #28
   24ebc:	sub	sp, sp, #12
   24ec0:	ldr	r6, [fp, #8]
   24ec4:	cmp	r6, #0
   24ec8:	beq	250a0 <__assert_fail@plt+0x13d80>
   24ecc:	mov	r9, r0
   24ed0:	mov	r5, r1
   24ed4:	mov	r4, r2
   24ed8:	mov	r0, r2
   24edc:	mov	r1, r2
   24ee0:	mov	r2, r3
   24ee4:	mov	r3, r9
   24ee8:	bl	21718 <__assert_fail@plt+0x103f8>
   24eec:	ldr	r0, [r4, #4]
   24ef0:	cmp	r0, #0
   24ef4:	bmi	24f1c <__assert_fail@plt+0x13bfc>
   24ef8:	cmp	r0, #1
   24efc:	bgt	24f1c <__assert_fail@plt+0x13bfc>
   24f00:	cmp	r0, #0
   24f04:	beq	24f1c <__assert_fail@plt+0x13bfc>
   24f08:	ldr	r1, [r4, #8]
   24f0c:	mov	sl, #1
   24f10:	ldr	r1, [r1]
   24f14:	cmp	r1, #1
   24f18:	beq	25094 <__assert_fail@plt+0x13d74>
   24f1c:	ldr	r1, [r5, #4]
   24f20:	cmp	r0, r1
   24f24:	bne	24f98 <__assert_fail@plt+0x13c78>
   24f28:	cmp	r0, #0
   24f2c:	bmi	24f64 <__assert_fail@plt+0x13c44>
   24f30:	ldr	r1, [r4, #8]
   24f34:	ldr	r2, [r5, #8]
   24f38:	sub	r1, r1, #4
   24f3c:	sub	r2, r2, #4
   24f40:	cmp	r0, #1
   24f44:	blt	25090 <__assert_fail@plt+0x13d70>
   24f48:	sub	r3, r0, #1
   24f4c:	ldr	r7, [r2, r0, lsl #2]
   24f50:	ldr	r0, [r1, r0, lsl #2]
   24f54:	cmp	r0, r7
   24f58:	mov	r0, r3
   24f5c:	beq	24f40 <__assert_fail@plt+0x13c20>
   24f60:	b	24f98 <__assert_fail@plt+0x13c78>
   24f64:	ldr	r2, [r4, #8]
   24f68:	rsb	r1, r0, #0
   24f6c:	ldr	r0, [r5, #8]
   24f70:	sub	r0, r0, #4
   24f74:	sub	r2, r2, #4
   24f78:	cmp	r1, #1
   24f7c:	blt	25090 <__assert_fail@plt+0x13d70>
   24f80:	sub	r3, r1, #1
   24f84:	ldr	r7, [r2, r1, lsl #2]
   24f88:	ldr	r1, [r0, r1, lsl #2]
   24f8c:	cmp	r1, r7
   24f90:	mov	r1, r3
   24f94:	beq	24f78 <__assert_fail@plt+0x13c58>
   24f98:	subs	r7, r6, #1
   24f9c:	mov	sl, #0
   24fa0:	beq	25094 <__assert_fail@plt+0x13d74>
   24fa4:	mov	r8, #1
   24fa8:	b	24fb4 <__assert_fail@plt+0x13c94>
   24fac:	subs	r7, r7, #1
   24fb0:	beq	25094 <__assert_fail@plt+0x13d74>
   24fb4:	movw	r0, #12572	; 0x311c
   24fb8:	str	r8, [sp, #4]
   24fbc:	movt	r0, #4
   24fc0:	ldr	r1, [r0]
   24fc4:	mov	r0, #4
   24fc8:	blx	r1
   24fcc:	str	r0, [sp, #8]
   24fd0:	mov	r6, r0
   24fd4:	mov	r0, #2
   24fd8:	str	r8, [sp]
   24fdc:	mov	r1, r4
   24fe0:	mov	r2, sp
   24fe4:	mov	r3, r9
   24fe8:	str	r0, [r6]
   24fec:	mov	r0, r4
   24ff0:	bl	21718 <__assert_fail@plt+0x103f8>
   24ff4:	movw	r0, #12580	; 0x3124
   24ff8:	mov	r1, #4
   24ffc:	movt	r0, #4
   25000:	ldr	r2, [r0]
   25004:	mov	r0, r6
   25008:	blx	r2
   2500c:	ldr	r0, [r4, #4]
   25010:	ldr	r1, [r5, #4]
   25014:	cmp	r0, r1
   25018:	bne	24fac <__assert_fail@plt+0x13c8c>
   2501c:	cmp	r0, #0
   25020:	bmi	25058 <__assert_fail@plt+0x13d38>
   25024:	ldr	r1, [r4, #8]
   25028:	ldr	r2, [r5, #8]
   2502c:	sub	r1, r1, #4
   25030:	sub	r2, r2, #4
   25034:	cmp	r0, #1
   25038:	blt	25090 <__assert_fail@plt+0x13d70>
   2503c:	sub	r3, r0, #1
   25040:	ldr	r6, [r2, r0, lsl #2]
   25044:	ldr	r0, [r1, r0, lsl #2]
   25048:	cmp	r0, r6
   2504c:	mov	r0, r3
   25050:	beq	25034 <__assert_fail@plt+0x13d14>
   25054:	b	24fac <__assert_fail@plt+0x13c8c>
   25058:	ldr	r2, [r4, #8]
   2505c:	rsb	r1, r0, #0
   25060:	ldr	r0, [r5, #8]
   25064:	sub	r0, r0, #4
   25068:	sub	r2, r2, #4
   2506c:	cmp	r1, #1
   25070:	blt	25090 <__assert_fail@plt+0x13d70>
   25074:	sub	r3, r1, #1
   25078:	ldr	r6, [r2, r1, lsl #2]
   2507c:	ldr	r1, [r0, r1, lsl #2]
   25080:	cmp	r1, r6
   25084:	mov	r1, r3
   25088:	beq	2506c <__assert_fail@plt+0x13d4c>
   2508c:	b	24fac <__assert_fail@plt+0x13c8c>
   25090:	mov	sl, #1
   25094:	mov	r0, sl
   25098:	sub	sp, fp, #28
   2509c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   250a0:	movw	r0, #6212	; 0x1844
   250a4:	movw	r1, #1996	; 0x7cc
   250a8:	movw	r3, #6218	; 0x184a
   250ac:	movw	r2, #3550	; 0xdde
   250b0:	movt	r0, #3
   250b4:	movt	r1, #3
   250b8:	movt	r3, #3
   250bc:	bl	11320 <__assert_fail@plt>
   250c0:	push	{fp, lr}
   250c4:	mov	fp, sp
   250c8:	ldr	r3, [r0, #4]
   250cc:	cmp	r3, #0
   250d0:	mov	r2, r3
   250d4:	rsbmi	r2, r3, #0
   250d8:	cmp	r2, r1, lsr #5
   250dc:	lsrle	r0, r3, #31
   250e0:	pople	{fp, pc}
   250e4:	ldr	ip, [r0, #8]
   250e8:	lsr	r2, r1, #5
   250ec:	and	r1, r1, #31
   250f0:	mov	r0, #1
   250f4:	cmn	r3, #1
   250f8:	ldr	lr, [ip, r2, lsl #2]
   250fc:	and	r0, r0, lr, lsr r1
   25100:	popgt	{fp, pc}
   25104:	cmp	r1, #0
   25108:	rsbne	r1, r1, #32
   2510c:	movne	r3, #0
   25110:	cmpne	r3, lr, lsl r1
   25114:	bne	25134 <__assert_fail@plt+0x13e14>
   25118:	sub	r1, ip, #4
   2511c:	subs	r3, r2, #1
   25120:	blt	25138 <__assert_fail@plt+0x13e18>
   25124:	ldr	r2, [r1, r2, lsl #2]
   25128:	cmp	r2, #0
   2512c:	mov	r2, r3
   25130:	beq	2511c <__assert_fail@plt+0x13dfc>
   25134:	eor	r0, r0, #1
   25138:	pop	{fp, pc}
   2513c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   25140:	add	fp, sp, #28
   25144:	sub	sp, sp, #4
   25148:	mov	r8, r0
   2514c:	and	r0, r1, #31
   25150:	mov	r2, #1
   25154:	lsr	r4, r1, #5
   25158:	ldr	lr, [r8, #4]
   2515c:	lsl	r6, r2, r0
   25160:	cmp	lr, #0
   25164:	mov	sl, lr
   25168:	rsbmi	sl, lr, #0
   2516c:	cmp	sl, r1, lsr #5
   25170:	ble	251a0 <__assert_fail@plt+0x13e80>
   25174:	ldr	r0, [r8, #8]
   25178:	sub	r3, sl, r4
   2517c:	and	ip, r3, #1
   25180:	add	r3, r4, #1
   25184:	cmp	sl, r3
   25188:	add	r5, r0, r4, lsl #2
   2518c:	bne	251b8 <__assert_fail@plt+0x13e98>
   25190:	mov	r7, #0
   25194:	cmp	ip, #0
   25198:	bne	25200 <__assert_fail@plt+0x13ee0>
   2519c:	b	25214 <__assert_fail@plt+0x13ef4>
   251a0:	ldr	r1, [r8]
   251a4:	add	r7, r4, #1
   251a8:	cmp	r4, r1
   251ac:	bge	2525c <__assert_fail@plt+0x13f3c>
   251b0:	ldr	r0, [r8, #8]
   251b4:	b	252d0 <__assert_fail@plt+0x13fb0>
   251b8:	add	r3, r4, ip
   251bc:	mov	r7, #0
   251c0:	sub	r4, r3, sl
   251c4:	mov	r3, #0
   251c8:	mov	r1, r5
   251cc:	ldr	r2, [r1, -r7, lsl #2]!
   251d0:	sub	r7, r7, #2
   251d4:	adds	r2, r2, r6
   251d8:	str	r2, [r1]
   251dc:	ldr	r2, [r1, #4]
   251e0:	adcs	r2, r2, #0
   251e4:	adc	r6, r3, #0
   251e8:	cmp	r4, r7
   251ec:	str	r2, [r1, #4]
   251f0:	bne	251c8 <__assert_fail@plt+0x13ea8>
   251f4:	rsb	r7, r7, #0
   251f8:	cmp	ip, #0
   251fc:	beq	25214 <__assert_fail@plt+0x13ef4>
   25200:	ldr	r1, [r5, r7, lsl #2]
   25204:	adds	r1, r1, r6
   25208:	str	r1, [r5, r7, lsl #2]
   2520c:	mov	r1, #0
   25210:	adc	r6, r1, #0
   25214:	tst	r6, #1
   25218:	beq	25290 <__assert_fail@plt+0x13f70>
   2521c:	ldr	r1, [r8]
   25220:	add	r7, sl, #1
   25224:	cmp	sl, r1
   25228:	blt	25330 <__assert_fail@plt+0x14010>
   2522c:	cmp	r7, #1
   25230:	mov	r4, r7
   25234:	movls	r4, #1
   25238:	cmp	r1, #0
   2523c:	beq	252f8 <__assert_fail@plt+0x13fd8>
   25240:	movw	r2, #12576	; 0x3120
   25244:	lsl	r1, r1, #2
   25248:	movt	r2, #4
   2524c:	ldr	r3, [r2]
   25250:	lsl	r2, r4, #2
   25254:	blx	r3
   25258:	b	2530c <__assert_fail@plt+0x13fec>
   2525c:	cmp	r7, #1
   25260:	mov	r9, r7
   25264:	movls	r9, #1
   25268:	cmp	r1, #0
   2526c:	beq	25298 <__assert_fail@plt+0x13f78>
   25270:	movw	r0, #12576	; 0x3120
   25274:	lsl	r1, r1, #2
   25278:	lsl	r2, r9, #2
   2527c:	movt	r0, #4
   25280:	ldr	r3, [r0]
   25284:	ldr	r0, [r8, #8]
   25288:	blx	r3
   2528c:	b	252ac <__assert_fail@plt+0x13f8c>
   25290:	mov	r7, sl
   25294:	b	25334 <__assert_fail@plt+0x14014>
   25298:	movw	r0, #12572	; 0x311c
   2529c:	movt	r0, #4
   252a0:	ldr	r1, [r0]
   252a4:	lsl	r0, r9, #2
   252a8:	blx	r1
   252ac:	str	r0, [r8, #8]
   252b0:	str	r9, [r8]
   252b4:	ldr	lr, [r8, #4]
   252b8:	cmp	lr, #0
   252bc:	mov	r1, lr
   252c0:	rsbmi	r1, lr, #0
   252c4:	cmp	r1, r9
   252c8:	movgt	lr, #0
   252cc:	strgt	lr, [r8, #4]
   252d0:	cmp	sl, r4
   252d4:	str	r6, [r0, r4, lsl #2]
   252d8:	bcs	25334 <__assert_fail@plt+0x14014>
   252dc:	sub	r1, r4, sl
   252e0:	add	r0, r0, sl, lsl #2
   252e4:	lsl	r2, r1, #2
   252e8:	mov	r1, #0
   252ec:	bl	11248 <memset@plt>
   252f0:	ldr	lr, [r8, #4]
   252f4:	b	25334 <__assert_fail@plt+0x14014>
   252f8:	movw	r0, #12572	; 0x311c
   252fc:	movt	r0, #4
   25300:	ldr	r1, [r0]
   25304:	lsl	r0, r4, #2
   25308:	blx	r1
   2530c:	str	r0, [r8, #8]
   25310:	str	r4, [r8]
   25314:	ldr	lr, [r8, #4]
   25318:	cmp	lr, #0
   2531c:	mov	r1, lr
   25320:	rsbmi	r1, lr, #0
   25324:	cmp	r1, r4
   25328:	movgt	lr, #0
   2532c:	strgt	lr, [r8, #4]
   25330:	str	r6, [r0, sl, lsl #2]
   25334:	cmp	lr, #0
   25338:	rsbmi	r7, r7, #0
   2533c:	str	r7, [r8, #4]
   25340:	sub	sp, fp, #28
   25344:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   25348:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   2534c:	add	fp, sp, #24
   25350:	ldr	lr, [r0, #4]
   25354:	ldr	ip, [r0, #8]
   25358:	cmp	lr, #0
   2535c:	mov	r3, lr
   25360:	rsbmi	r3, lr, #0
   25364:	cmp	r3, r1, lsr #5
   25368:	ble	25440 <__assert_fail@plt+0x14120>
   2536c:	lsr	r5, r1, #5
   25370:	and	r1, r1, #31
   25374:	mov	r4, #1
   25378:	lsl	r1, r4, r1
   2537c:	sub	r4, r3, r5
   25380:	add	r6, r5, #1
   25384:	add	r2, ip, r5, lsl #2
   25388:	and	r8, r4, #1
   2538c:	cmp	r3, r6
   25390:	bne	253a4 <__assert_fail@plt+0x14084>
   25394:	mov	r5, #0
   25398:	cmp	r8, #0
   2539c:	bne	253f4 <__assert_fail@plt+0x140d4>
   253a0:	b	25408 <__assert_fail@plt+0x140e8>
   253a4:	add	r5, r5, r8
   253a8:	sub	r6, r5, r3
   253ac:	mov	r5, #0
   253b0:	mov	r7, r2
   253b4:	ldr	r4, [r7, -r5, lsl #2]!
   253b8:	sub	r5, r5, #2
   253bc:	subs	r1, r4, r1
   253c0:	str	r1, [r7]
   253c4:	mov	r1, #0
   253c8:	movwcc	r1, #1
   253cc:	ldr	r4, [r7, #4]
   253d0:	subs	r1, r4, r1
   253d4:	str	r1, [r7, #4]
   253d8:	mov	r1, #0
   253dc:	movwcc	r1, #1
   253e0:	cmp	r6, r5
   253e4:	bne	253b0 <__assert_fail@plt+0x14090>
   253e8:	rsb	r5, r5, #0
   253ec:	cmp	r8, #0
   253f0:	beq	25408 <__assert_fail@plt+0x140e8>
   253f4:	ldr	r4, [r2, r5, lsl #2]
   253f8:	subs	r1, r4, r1
   253fc:	str	r1, [r2, r5, lsl #2]
   25400:	mov	r1, #0
   25404:	movwcc	r1, #1
   25408:	tst	r1, #1
   2540c:	bne	25458 <__assert_fail@plt+0x14138>
   25410:	sub	r2, ip, #4
   25414:	mov	r1, r3
   25418:	cmp	r3, #1
   2541c:	blt	25430 <__assert_fail@plt+0x14110>
   25420:	ldr	r7, [r2, r1, lsl #2]
   25424:	sub	r3, r1, #1
   25428:	cmp	r7, #0
   2542c:	beq	25414 <__assert_fail@plt+0x140f4>
   25430:	cmp	lr, #0
   25434:	rsbmi	r1, r1, #0
   25438:	str	r1, [r0, #4]
   2543c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   25440:	movw	r0, #6577	; 0x19b1
   25444:	movw	r1, #1996	; 0x7cc
   25448:	movw	r3, #6593	; 0x19c1
   2544c:	movw	r2, #3753	; 0xea9
   25450:	movt	r0, #3
   25454:	b	2546c <__assert_fail@plt+0x1414c>
   25458:	movw	r0, #2977	; 0xba1
   2545c:	movw	r1, #1996	; 0x7cc
   25460:	movw	r3, #6593	; 0x19c1
   25464:	movw	r2, #3756	; 0xeac
   25468:	movt	r0, #3
   2546c:	movt	r1, #3
   25470:	movt	r3, #3
   25474:	bl	11320 <__assert_fail@plt>
   25478:	push	{r4, r5, r6, sl, fp, lr}
   2547c:	add	fp, sp, #16
   25480:	ldr	r2, [r0, #4]
   25484:	cmp	r2, #0
   25488:	mov	r3, r2
   2548c:	rsbmi	r3, r2, #0
   25490:	cmp	r3, r1, lsr #5
   25494:	ble	254f8 <__assert_fail@plt+0x141d8>
   25498:	ldr	lr, [r0, #8]
   2549c:	lsr	r6, r1, #5
   254a0:	and	r5, r1, #31
   254a4:	mov	r3, #1
   254a8:	cmn	r2, #1
   254ac:	ldr	r4, [lr, r6, lsl #2]
   254b0:	and	ip, r3, r4, lsr r5
   254b4:	bgt	254fc <__assert_fail@plt+0x141dc>
   254b8:	cmp	r5, #0
   254bc:	rsbne	r3, r5, #32
   254c0:	movne	r5, #0
   254c4:	cmpne	r5, r4, lsl r3
   254c8:	bne	254e8 <__assert_fail@plt+0x141c8>
   254cc:	sub	r4, lr, #4
   254d0:	subs	r3, r6, #1
   254d4:	blt	254fc <__assert_fail@plt+0x141dc>
   254d8:	ldr	r6, [r4, r6, lsl #2]
   254dc:	cmp	r6, #0
   254e0:	mov	r6, r3
   254e4:	beq	254d0 <__assert_fail@plt+0x141b0>
   254e8:	eor	ip, ip, #1
   254ec:	cmp	ip, #0
   254f0:	bne	25504 <__assert_fail@plt+0x141e4>
   254f4:	b	25514 <__assert_fail@plt+0x141f4>
   254f8:	lsr	ip, r2, #31
   254fc:	cmp	ip, #0
   25500:	beq	25514 <__assert_fail@plt+0x141f4>
   25504:	cmp	r2, #0
   25508:	bmi	25518 <__assert_fail@plt+0x141f8>
   2550c:	pop	{r4, r5, r6, sl, fp, lr}
   25510:	b	25348 <__assert_fail@plt+0x14028>
   25514:	pop	{r4, r5, r6, sl, fp, pc}
   25518:	pop	{r4, r5, r6, sl, fp, lr}
   2551c:	b	2513c <__assert_fail@plt+0x13e1c>
   25520:	push	{r4, r5, r6, sl, fp, lr}
   25524:	add	fp, sp, #16
   25528:	ldr	r2, [r0, #4]
   2552c:	cmp	r2, #0
   25530:	mov	r3, r2
   25534:	rsbmi	r3, r2, #0
   25538:	cmp	r3, r1, lsr #5
   2553c:	ble	255a4 <__assert_fail@plt+0x14284>
   25540:	ldr	lr, [r0, #8]
   25544:	lsr	r6, r1, #5
   25548:	and	r5, r1, #31
   2554c:	mov	r3, #1
   25550:	cmn	r2, #1
   25554:	ldr	r4, [lr, r6, lsl #2]
   25558:	and	ip, r3, r4, lsr r5
   2555c:	bgt	25594 <__assert_fail@plt+0x14274>
   25560:	cmp	r5, #0
   25564:	rsbne	r3, r5, #32
   25568:	movne	r5, #0
   2556c:	cmpne	r5, r4, lsl r3
   25570:	bne	25590 <__assert_fail@plt+0x14270>
   25574:	sub	r4, lr, #4
   25578:	subs	r3, r6, #1
   2557c:	blt	25594 <__assert_fail@plt+0x14274>
   25580:	ldr	r6, [r4, r6, lsl #2]
   25584:	cmp	r6, #0
   25588:	mov	r6, r3
   2558c:	beq	25578 <__assert_fail@plt+0x14258>
   25590:	eor	ip, ip, #1
   25594:	cmp	ip, r2, lsr #31
   25598:	bne	255b0 <__assert_fail@plt+0x14290>
   2559c:	pop	{r4, r5, r6, sl, fp, lr}
   255a0:	b	2513c <__assert_fail@plt+0x13e1c>
   255a4:	lsr	ip, r2, #31
   255a8:	cmp	ip, r2, lsr #31
   255ac:	beq	2559c <__assert_fail@plt+0x1427c>
   255b0:	pop	{r4, r5, r6, sl, fp, lr}
   255b4:	b	25348 <__assert_fail@plt+0x14028>
   255b8:	push	{r4, r5, r6, r7, fp, lr}
   255bc:	add	fp, sp, #16
   255c0:	sub	sp, sp, #16
   255c4:	mov	r5, r0
   255c8:	movw	r0, #12572	; 0x311c
   255cc:	mov	r4, r1
   255d0:	mov	r7, #1
   255d4:	movt	r0, #4
   255d8:	str	r7, [sp, #8]
   255dc:	ldr	r1, [r0]
   255e0:	mov	r0, #4
   255e4:	blx	r1
   255e8:	str	r0, [sp, #12]
   255ec:	str	r7, [sp, #4]
   255f0:	mov	r6, r0
   255f4:	str	r7, [r0]
   255f8:	add	r2, sp, #4
   255fc:	mov	r0, r5
   25600:	mov	r1, r4
   25604:	bl	1bd0c <__assert_fail@plt+0xa9ec>
   25608:	movw	r0, #12580	; 0x3124
   2560c:	mov	r1, #4
   25610:	movt	r0, #4
   25614:	ldr	r2, [r0]
   25618:	mov	r0, r6
   2561c:	blx	r2
   25620:	ldr	r0, [r5, #4]
   25624:	rsb	r0, r0, #0
   25628:	str	r0, [r5, #4]
   2562c:	sub	sp, fp, #16
   25630:	pop	{r4, r5, r6, r7, fp, pc}
   25634:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   25638:	add	fp, sp, #28
   2563c:	sub	sp, sp, #36	; 0x24
   25640:	mov	r9, r0
   25644:	ldr	r0, [r2, #4]
   25648:	mov	r7, r2
   2564c:	ldr	r2, [r1, #4]
   25650:	mov	r6, r1
   25654:	cmp	r0, #0
   25658:	rsbmi	r0, r0, #0
   2565c:	cmp	r2, #0
   25660:	rsbmi	r2, r2, #0
   25664:	cmp	r2, r0
   25668:	movlt	r6, r7
   2566c:	movlt	r7, r1
   25670:	mov	r1, r0
   25674:	movlt	r1, r2
   25678:	cmp	r1, #0
   2567c:	beq	256f0 <__assert_fail@plt+0x143d0>
   25680:	ldr	r3, [r7, #4]
   25684:	cmp	r2, r0
   25688:	ldr	r8, [r6, #4]
   2568c:	str	r1, [sp]
   25690:	movlt	r2, r0
   25694:	mov	r0, #0
   25698:	cmp	r0, r3, asr #31
   2569c:	lsr	sl, r3, #31
   256a0:	and	r4, sl, r8, lsr #31
   256a4:	moveq	r2, r1
   256a8:	ldr	r1, [r9]
   256ac:	add	r5, r2, r4
   256b0:	str	r2, [sp, #12]
   256b4:	cmp	r5, r1
   256b8:	ble	256f8 <__assert_fail@plt+0x143d8>
   256bc:	cmp	r5, #1
   256c0:	str	r3, [sp, #32]
   256c4:	movls	r5, #1
   256c8:	cmp	r1, #0
   256cc:	beq	25700 <__assert_fail@plt+0x143e0>
   256d0:	movw	r0, #12576	; 0x3120
   256d4:	lsl	r1, r1, #2
   256d8:	lsl	r2, r5, #2
   256dc:	movt	r0, #4
   256e0:	ldr	r3, [r0]
   256e4:	ldr	r0, [r9, #8]
   256e8:	blx	r3
   256ec:	b	25714 <__assert_fail@plt+0x143f4>
   256f0:	mov	r0, #0
   256f4:	b	25884 <__assert_fail@plt+0x14564>
   256f8:	ldr	r0, [r9, #8]
   256fc:	b	25738 <__assert_fail@plt+0x14418>
   25700:	movw	r0, #12572	; 0x311c
   25704:	movt	r0, #4
   25708:	ldr	r1, [r0]
   2570c:	lsl	r0, r5, #2
   25710:	blx	r1
   25714:	str	r0, [r9, #8]
   25718:	str	r5, [r9]
   2571c:	ldr	r1, [r9, #4]
   25720:	ldr	r3, [sp, #32]
   25724:	cmp	r1, #0
   25728:	rsbmi	r1, r1, #0
   2572c:	cmp	r1, r5
   25730:	movgt	r1, #0
   25734:	strgt	r1, [r9, #4]
   25738:	asr	r1, r3, #31
   2573c:	lsr	lr, r8, #31
   25740:	ldr	r6, [r6, #8]
   25744:	str	r9, [sp, #16]
   25748:	mov	r9, #0
   2574c:	mov	r2, #0
   25750:	str	r0, [sp, #4]
   25754:	str	r4, [sp, #8]
   25758:	str	r1, [sp, #32]
   2575c:	asr	r1, r8, #31
   25760:	ldr	r8, [sp]
   25764:	str	r1, [sp, #28]
   25768:	rsb	r1, r4, #0
   2576c:	ldr	r5, [sp, #32]
   25770:	str	r1, [sp, #24]
   25774:	ldr	r1, [r7, #8]
   25778:	mov	r7, r0
   2577c:	str	r1, [sp, #20]
   25780:	mov	r1, r4
   25784:	ldr	r0, [r6], #4
   25788:	ldr	r3, [sp, #28]
   2578c:	mov	r4, sl
   25790:	eor	r0, r0, r3
   25794:	ldr	r3, [sp, #20]
   25798:	adds	r0, r0, lr
   2579c:	adc	lr, r9, #0
   257a0:	ldr	r3, [r3, r2, lsl #2]
   257a4:	add	r2, r2, #1
   257a8:	eor	r3, r3, r5
   257ac:	adds	ip, r3, sl
   257b0:	ldr	r3, [sp, #24]
   257b4:	and	r0, ip, r0
   257b8:	adc	sl, r9, #0
   257bc:	eor	r0, r0, r3
   257c0:	adds	r0, r0, r1
   257c4:	adc	r1, r9, #0
   257c8:	str	r0, [r7], #4
   257cc:	cmp	r2, r8
   257d0:	bcc	25784 <__assert_fail@plt+0x14464>
   257d4:	ldr	r8, [sp, #24]
   257d8:	ldr	r3, [sp, #28]
   257dc:	ldr	r0, [sp, #32]
   257e0:	cmp	ip, r4
   257e4:	bcc	25890 <__assert_fail@plt+0x14570>
   257e8:	ldr	r4, [sp, #12]
   257ec:	cmp	r2, r4
   257f0:	bge	25848 <__assert_fail@plt+0x14528>
   257f4:	ldr	r9, [sp, #16]
   257f8:	mov	ip, r0
   257fc:	sub	r2, r4, r2
   25800:	mov	r5, #0
   25804:	ldr	r0, [r6], #4
   25808:	eor	r0, r0, r3
   2580c:	adds	r0, r0, lr
   25810:	and	r0, r0, ip
   25814:	adc	lr, r5, #0
   25818:	eor	r0, r0, r8
   2581c:	adds	r0, r0, r1
   25820:	adc	r1, r5, #0
   25824:	str	r0, [r7], #4
   25828:	subs	r2, r2, #1
   2582c:	bne	25804 <__assert_fail@plt+0x144e4>
   25830:	cmp	r1, #0
   25834:	beq	25854 <__assert_fail@plt+0x14534>
   25838:	ldr	r0, [sp, #4]
   2583c:	str	r1, [r0, r4, lsl #2]
   25840:	add	r0, r4, #1
   25844:	b	25878 <__assert_fail@plt+0x14558>
   25848:	ldr	r9, [sp, #16]
   2584c:	cmp	r1, #0
   25850:	bne	25838 <__assert_fail@plt+0x14518>
   25854:	ldr	r0, [sp, #4]
   25858:	sub	r1, r0, #4
   2585c:	mov	r0, r4
   25860:	cmp	r4, #1
   25864:	blt	25878 <__assert_fail@plt+0x14558>
   25868:	ldr	r2, [r1, r0, lsl #2]
   2586c:	sub	r4, r0, #1
   25870:	cmp	r2, #0
   25874:	beq	2585c <__assert_fail@plt+0x1453c>
   25878:	ldr	r1, [sp, #8]
   2587c:	cmp	r1, #0
   25880:	rsbne	r0, r0, #0
   25884:	str	r0, [r9, #4]
   25888:	sub	sp, fp, #28
   2588c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   25890:	movw	r0, #3746	; 0xea2
   25894:	movw	r1, #1996	; 0x7cc
   25898:	movw	r3, #3754	; 0xeaa
   2589c:	movw	r2, #3854	; 0xf0e
   258a0:	movt	r0, #3
   258a4:	movt	r1, #3
   258a8:	movt	r3, #3
   258ac:	bl	11320 <__assert_fail@plt>
   258b0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   258b4:	add	fp, sp, #28
   258b8:	sub	sp, sp, #36	; 0x24
   258bc:	mov	r9, r0
   258c0:	ldr	r0, [r2, #4]
   258c4:	mov	r6, r2
   258c8:	ldr	r2, [r1, #4]
   258cc:	mov	r4, r1
   258d0:	cmp	r0, #0
   258d4:	rsbmi	r0, r0, #0
   258d8:	cmp	r2, #0
   258dc:	rsbmi	r2, r2, #0
   258e0:	cmp	r2, r0
   258e4:	movlt	r4, r6
   258e8:	movlt	r6, r1
   258ec:	mov	r1, r0
   258f0:	movlt	r1, r2
   258f4:	cmp	r1, #0
   258f8:	beq	2596c <__assert_fail@plt+0x1464c>
   258fc:	ldr	r8, [r6, #4]
   25900:	cmp	r2, r0
   25904:	ldr	r5, [r4, #4]
   25908:	str	r1, [sp]
   2590c:	movlt	r2, r0
   25910:	mov	r0, #0
   25914:	cmp	r0, r8, asr #31
   25918:	lsr	sl, r8, #31
   2591c:	orr	r0, sl, r5, lsr #31
   25920:	movne	r2, r1
   25924:	ldr	r1, [r9]
   25928:	add	r7, r2, r0
   2592c:	str	r0, [sp, #16]
   25930:	str	r2, [sp, #8]
   25934:	cmp	r7, r1
   25938:	ble	259c0 <__assert_fail@plt+0x146a0>
   2593c:	cmp	r7, #1
   25940:	movls	r7, #1
   25944:	cmp	r1, #0
   25948:	beq	259c8 <__assert_fail@plt+0x146a8>
   2594c:	movw	r0, #12576	; 0x3120
   25950:	lsl	r1, r1, #2
   25954:	lsl	r2, r7, #2
   25958:	movt	r0, #4
   2595c:	ldr	r3, [r0]
   25960:	ldr	r0, [r9, #8]
   25964:	blx	r3
   25968:	b	259dc <__assert_fail@plt+0x146bc>
   2596c:	cmp	r4, r9
   25970:	beq	25cf4 <__assert_fail@plt+0x149d4>
   25974:	ldr	r5, [r4, #4]
   25978:	ldr	r1, [r9]
   2597c:	cmp	r5, #0
   25980:	rsbmi	r5, r5, #0
   25984:	cmp	r5, r1
   25988:	ble	25b40 <__assert_fail@plt+0x14820>
   2598c:	cmp	r5, #1
   25990:	mov	r6, r5
   25994:	movle	r6, #1
   25998:	cmp	r1, #0
   2599c:	beq	25b50 <__assert_fail@plt+0x14830>
   259a0:	movw	r0, #12576	; 0x3120
   259a4:	lsl	r1, r1, #2
   259a8:	lsl	r2, r6, #2
   259ac:	movt	r0, #4
   259b0:	ldr	r3, [r0]
   259b4:	ldr	r0, [r9, #8]
   259b8:	blx	r3
   259bc:	b	25b64 <__assert_fail@plt+0x14844>
   259c0:	ldr	r0, [r9, #8]
   259c4:	b	259fc <__assert_fail@plt+0x146dc>
   259c8:	movw	r0, #12572	; 0x311c
   259cc:	movt	r0, #4
   259d0:	ldr	r1, [r0]
   259d4:	lsl	r0, r7, #2
   259d8:	blx	r1
   259dc:	str	r0, [r9, #8]
   259e0:	str	r7, [r9]
   259e4:	ldr	r1, [r9, #4]
   259e8:	cmp	r1, #0
   259ec:	rsbmi	r1, r1, #0
   259f0:	cmp	r1, r7
   259f4:	movgt	r1, #0
   259f8:	strgt	r1, [r9, #4]
   259fc:	asr	r1, r8, #31
   25a00:	str	r9, [sp, #12]
   25a04:	lsr	r9, r5, #31
   25a08:	ldr	r7, [r4, #8]
   25a0c:	ldr	r8, [sp]
   25a10:	mov	lr, #0
   25a14:	str	r0, [sp, #4]
   25a18:	str	r1, [sp, #32]
   25a1c:	asr	r1, r5, #31
   25a20:	str	r1, [sp, #28]
   25a24:	ldr	r1, [sp, #16]
   25a28:	ldr	r5, [sp, #32]
   25a2c:	rsb	r2, r1, #0
   25a30:	str	r2, [sp, #24]
   25a34:	ldr	r2, [r6, #8]
   25a38:	mov	r6, r0
   25a3c:	str	r2, [sp, #20]
   25a40:	mov	r2, #0
   25a44:	ldr	r0, [r7], #4
   25a48:	ldr	r3, [sp, #28]
   25a4c:	mov	r4, sl
   25a50:	eor	r0, r0, r3
   25a54:	ldr	r3, [sp, #20]
   25a58:	adds	r0, r0, r9
   25a5c:	adc	r9, lr, #0
   25a60:	ldr	r3, [r3, r2, lsl #2]
   25a64:	add	r2, r2, #1
   25a68:	eor	r3, r3, r5
   25a6c:	adds	ip, r3, sl
   25a70:	ldr	r3, [sp, #24]
   25a74:	orr	r0, ip, r0
   25a78:	adc	sl, lr, #0
   25a7c:	eor	r0, r0, r3
   25a80:	adds	r0, r0, r1
   25a84:	adc	r1, lr, #0
   25a88:	str	r0, [r6], #4
   25a8c:	cmp	r2, r8
   25a90:	bcc	25a44 <__assert_fail@plt+0x14724>
   25a94:	ldr	r8, [sp, #24]
   25a98:	ldr	lr, [sp, #28]
   25a9c:	ldr	r3, [sp, #32]
   25aa0:	cmp	ip, r4
   25aa4:	bcc	25cfc <__assert_fail@plt+0x149dc>
   25aa8:	ldr	r4, [sp, #8]
   25aac:	ldr	r5, [sp, #12]
   25ab0:	cmp	r2, r4
   25ab4:	bge	25aec <__assert_fail@plt+0x147cc>
   25ab8:	sub	r2, r4, r2
   25abc:	mov	ip, #0
   25ac0:	ldr	r0, [r7], #4
   25ac4:	eor	r0, r0, lr
   25ac8:	adds	r0, r0, r9
   25acc:	orr	r0, r0, r3
   25ad0:	adc	r9, ip, #0
   25ad4:	eor	r0, r0, r8
   25ad8:	adds	r0, r0, r1
   25adc:	adc	r1, ip, #0
   25ae0:	str	r0, [r6], #4
   25ae4:	subs	r2, r2, #1
   25ae8:	bne	25ac0 <__assert_fail@plt+0x147a0>
   25aec:	cmp	r1, #0
   25af0:	beq	25b08 <__assert_fail@plt+0x147e8>
   25af4:	ldr	r0, [sp, #4]
   25af8:	mov	r9, r5
   25afc:	str	r1, [r0, r4, lsl #2]
   25b00:	add	r0, r4, #1
   25b04:	b	25b30 <__assert_fail@plt+0x14810>
   25b08:	ldr	r0, [sp, #4]
   25b0c:	mov	r9, r5
   25b10:	sub	r1, r0, #4
   25b14:	mov	r0, r4
   25b18:	cmp	r4, #1
   25b1c:	blt	25b30 <__assert_fail@plt+0x14810>
   25b20:	ldr	r2, [r1, r0, lsl #2]
   25b24:	sub	r4, r0, #1
   25b28:	cmp	r2, #0
   25b2c:	beq	25b14 <__assert_fail@plt+0x147f4>
   25b30:	ldr	r1, [sp, #16]
   25b34:	cmp	r1, #0
   25b38:	rsbne	r0, r0, #0
   25b3c:	b	25cf0 <__assert_fail@plt+0x149d0>
   25b40:	ldr	r0, [r9, #8]
   25b44:	cmp	r5, #1
   25b48:	bge	25b8c <__assert_fail@plt+0x1486c>
   25b4c:	b	25cec <__assert_fail@plt+0x149cc>
   25b50:	movw	r0, #12572	; 0x311c
   25b54:	movt	r0, #4
   25b58:	ldr	r1, [r0]
   25b5c:	lsl	r0, r6, #2
   25b60:	blx	r1
   25b64:	str	r0, [r9, #8]
   25b68:	str	r6, [r9]
   25b6c:	ldr	r1, [r9, #4]
   25b70:	cmp	r1, #0
   25b74:	rsbmi	r1, r1, #0
   25b78:	cmp	r1, r6
   25b7c:	movgt	r1, #0
   25b80:	strgt	r1, [r9, #4]
   25b84:	cmp	r5, #1
   25b88:	blt	25cec <__assert_fail@plt+0x149cc>
   25b8c:	ldr	r1, [r4, #8]
   25b90:	mov	r2, #0
   25b94:	cmp	r5, #4
   25b98:	bcc	25c80 <__assert_fail@plt+0x14960>
   25b9c:	add	r3, r1, r5, lsl #2
   25ba0:	cmp	r0, r3
   25ba4:	addcc	r3, r0, r5, lsl #2
   25ba8:	cmpcc	r1, r3
   25bac:	bcc	25c80 <__assert_fail@plt+0x14960>
   25bb0:	bic	r2, r5, #-2147483645	; 0x80000003
   25bb4:	mov	r3, #1
   25bb8:	str	r9, [sp, #12]
   25bbc:	mov	r9, #0
   25bc0:	str	r4, [sp, #28]
   25bc4:	str	r5, [sp, #24]
   25bc8:	sub	r6, r2, #4
   25bcc:	add	r3, r3, r6, lsr #2
   25bd0:	cmp	r6, #12
   25bd4:	and	r7, r3, #3
   25bd8:	str	r7, [sp, #32]
   25bdc:	bcc	25c44 <__assert_fail@plt+0x14924>
   25be0:	ldr	r7, [sp, #32]
   25be4:	mov	r4, #0
   25be8:	mov	lr, #48	; 0x30
   25bec:	mov	r9, #0
   25bf0:	sub	sl, r3, r7
   25bf4:	add	r5, r1, r4
   25bf8:	add	r7, r0, r4
   25bfc:	add	r4, r4, #64	; 0x40
   25c00:	subs	sl, sl, #4
   25c04:	add	r9, r9, #16
   25c08:	mov	r8, r5
   25c0c:	mov	r6, r7
   25c10:	add	ip, r5, #16
   25c14:	add	r3, r7, #16
   25c18:	vld1.32	{d16-d17}, [r8], lr
   25c1c:	vst1.32	{d16-d17}, [r6], lr
   25c20:	vld1.32	{d16-d17}, [ip]
   25c24:	vst1.32	{d16-d17}, [r3]
   25c28:	add	r3, r5, #32
   25c2c:	vld1.32	{d16-d17}, [r3]
   25c30:	add	r3, r7, #32
   25c34:	vst1.32	{d16-d17}, [r3]
   25c38:	vld1.32	{d16-d17}, [r8]
   25c3c:	vst1.32	{d16-d17}, [r6]
   25c40:	bne	25bf4 <__assert_fail@plt+0x148d4>
   25c44:	ldr	r6, [sp, #32]
   25c48:	cmp	r6, #0
   25c4c:	beq	25c6c <__assert_fail@plt+0x1494c>
   25c50:	add	r3, r1, r9, lsl #2
   25c54:	add	r7, r0, r9, lsl #2
   25c58:	rsb	r6, r6, #0
   25c5c:	vld1.32	{d16-d17}, [r3]!
   25c60:	adds	r6, r6, #1
   25c64:	vst1.32	{d16-d17}, [r7]!
   25c68:	bcc	25c5c <__assert_fail@plt+0x1493c>
   25c6c:	ldr	r5, [sp, #24]
   25c70:	ldr	r9, [sp, #12]
   25c74:	ldr	r4, [sp, #28]
   25c78:	cmp	r5, r2
   25c7c:	beq	25cec <__assert_fail@plt+0x149cc>
   25c80:	mvn	r3, r2
   25c84:	ands	r7, r5, #3
   25c88:	add	r3, r5, r3
   25c8c:	beq	25ca4 <__assert_fail@plt+0x14984>
   25c90:	ldr	r6, [r1, r2, lsl #2]
   25c94:	subs	r7, r7, #1
   25c98:	str	r6, [r0, r2, lsl #2]
   25c9c:	add	r2, r2, #1
   25ca0:	bne	25c90 <__assert_fail@plt+0x14970>
   25ca4:	cmp	r3, #3
   25ca8:	bcc	25cec <__assert_fail@plt+0x149cc>
   25cac:	sub	r3, r5, r2
   25cb0:	lsl	r2, r2, #2
   25cb4:	add	r7, r1, #16
   25cb8:	ldr	r6, [r1, r2]!
   25cbc:	add	r5, r0, #16
   25cc0:	subs	r3, r3, #4
   25cc4:	str	r6, [r0, r2]!
   25cc8:	ldr	r6, [r1, #4]
   25ccc:	str	r6, [r0, #4]
   25cd0:	ldr	r6, [r1, #8]
   25cd4:	str	r6, [r0, #8]
   25cd8:	ldr	r1, [r1, #12]
   25cdc:	str	r1, [r0, #12]
   25ce0:	mov	r1, r7
   25ce4:	mov	r0, r5
   25ce8:	bne	25cb4 <__assert_fail@plt+0x14994>
   25cec:	ldr	r0, [r4, #4]
   25cf0:	str	r0, [r9, #4]
   25cf4:	sub	sp, fp, #28
   25cf8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   25cfc:	movw	r0, #3746	; 0xea2
   25d00:	movw	r1, #1996	; 0x7cc
   25d04:	movw	r3, #3827	; 0xef3
   25d08:	movw	r2, #3927	; 0xf57
   25d0c:	movt	r0, #3
   25d10:	movt	r1, #3
   25d14:	movt	r3, #3
   25d18:	bl	11320 <__assert_fail@plt>
   25d1c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   25d20:	add	fp, sp, #28
   25d24:	sub	sp, sp, #36	; 0x24
   25d28:	ldr	r3, [r2, #4]
   25d2c:	mov	r9, r0
   25d30:	ldr	r0, [r1, #4]
   25d34:	mov	r5, r2
   25d38:	mov	r7, r1
   25d3c:	cmp	r3, #0
   25d40:	rsbmi	r3, r3, #0
   25d44:	cmp	r0, #0
   25d48:	rsbmi	r0, r0, #0
   25d4c:	cmp	r0, r3
   25d50:	mov	r2, r0
   25d54:	movlt	r2, r3
   25d58:	movlt	r3, r0
   25d5c:	movlt	r7, r5
   25d60:	movlt	r5, r1
   25d64:	cmp	r3, #0
   25d68:	beq	25dc8 <__assert_fail@plt+0x14aa8>
   25d6c:	ldr	r6, [r5, #4]
   25d70:	ldr	r8, [r7, #4]
   25d74:	ldr	r1, [r9]
   25d78:	str	r2, [sp, #4]
   25d7c:	str	r3, [sp]
   25d80:	lsr	sl, r6, #31
   25d84:	eor	r0, sl, r8, lsr #31
   25d88:	add	r4, r0, r2
   25d8c:	str	r0, [sp, #16]
   25d90:	cmp	r4, r1
   25d94:	ble	25e20 <__assert_fail@plt+0x14b00>
   25d98:	cmp	r4, #1
   25d9c:	movls	r4, #1
   25da0:	cmp	r1, #0
   25da4:	beq	25e2c <__assert_fail@plt+0x14b0c>
   25da8:	movw	r0, #12576	; 0x3120
   25dac:	lsl	r1, r1, #2
   25db0:	lsl	r2, r4, #2
   25db4:	movt	r0, #4
   25db8:	ldr	r3, [r0]
   25dbc:	ldr	r0, [r9, #8]
   25dc0:	blx	r3
   25dc4:	b	25e40 <__assert_fail@plt+0x14b20>
   25dc8:	cmp	r7, r9
   25dcc:	beq	2614c <__assert_fail@plt+0x14e2c>
   25dd0:	ldr	r5, [r7, #4]
   25dd4:	ldr	r1, [r9]
   25dd8:	str	r7, [sp, #32]
   25ddc:	cmp	r5, #0
   25de0:	rsbmi	r5, r5, #0
   25de4:	cmp	r5, r1
   25de8:	ble	25f98 <__assert_fail@plt+0x14c78>
   25dec:	cmp	r5, #1
   25df0:	mov	r4, r5
   25df4:	movle	r4, #1
   25df8:	cmp	r1, #0
   25dfc:	beq	25fa8 <__assert_fail@plt+0x14c88>
   25e00:	movw	r0, #12576	; 0x3120
   25e04:	lsl	r1, r1, #2
   25e08:	lsl	r2, r4, #2
   25e0c:	movt	r0, #4
   25e10:	ldr	r3, [r0]
   25e14:	ldr	r0, [r9, #8]
   25e18:	blx	r3
   25e1c:	b	25fbc <__assert_fail@plt+0x14c9c>
   25e20:	ldr	r0, [r9, #8]
   25e24:	str	r0, [sp, #12]
   25e28:	b	25e64 <__assert_fail@plt+0x14b44>
   25e2c:	movw	r0, #12572	; 0x311c
   25e30:	movt	r0, #4
   25e34:	ldr	r1, [r0]
   25e38:	lsl	r0, r4, #2
   25e3c:	blx	r1
   25e40:	str	r0, [r9, #8]
   25e44:	str	r4, [r9]
   25e48:	str	r0, [sp, #12]
   25e4c:	ldr	r1, [r9, #4]
   25e50:	cmp	r1, #0
   25e54:	rsbmi	r1, r1, #0
   25e58:	cmp	r1, r4
   25e5c:	movgt	r1, #0
   25e60:	strgt	r1, [r9, #4]
   25e64:	ldr	r3, [sp, #16]
   25e68:	asr	r0, r6, #31
   25e6c:	asr	ip, r8, #31
   25e70:	lsr	r2, r8, #31
   25e74:	ldr	lr, [sp]
   25e78:	ldr	r8, [sp, #12]
   25e7c:	mov	r6, #0
   25e80:	mov	r4, #0
   25e84:	str	r9, [sp, #8]
   25e88:	str	r0, [sp, #28]
   25e8c:	ldr	r1, [sp, #28]
   25e90:	rsb	r0, r3, #0
   25e94:	str	r0, [sp, #24]
   25e98:	ldr	r0, [r5, #8]
   25e9c:	str	r0, [sp, #20]
   25ea0:	ldr	r0, [r7, #8]
   25ea4:	str	r0, [sp, #32]
   25ea8:	ldr	r0, [sp, #32]
   25eac:	mov	r7, sl
   25eb0:	ldr	r5, [r0, r4, lsl #2]
   25eb4:	ldr	r0, [sp, #24]
   25eb8:	eor	r5, r5, ip
   25ebc:	adds	r5, r5, r2
   25ec0:	eor	r5, r5, r0
   25ec4:	ldr	r0, [sp, #20]
   25ec8:	adc	r2, r6, #0
   25ecc:	ldr	r0, [r0, r4, lsl #2]
   25ed0:	eor	r0, r0, r1
   25ed4:	adds	r9, r0, sl
   25ed8:	eor	r0, r5, r9
   25edc:	adc	sl, r6, #0
   25ee0:	adds	r0, r0, r3
   25ee4:	str	r0, [r8, r4, lsl #2]
   25ee8:	add	r4, r4, #1
   25eec:	adc	r3, r6, #0
   25ef0:	cmp	r4, lr
   25ef4:	bcc	25ea8 <__assert_fail@plt+0x14b88>
   25ef8:	ldr	r5, [sp, #32]
   25efc:	cmp	r9, r7
   25f00:	bcc	26154 <__assert_fail@plt+0x14e34>
   25f04:	ldr	r6, [sp, #4]
   25f08:	ldr	r1, [sp, #12]
   25f0c:	cmp	r4, r6
   25f10:	bge	25f5c <__assert_fail@plt+0x14c3c>
   25f14:	ldr	r9, [sp, #8]
   25f18:	mov	r7, #0
   25f1c:	ldr	r0, [r5, r4, lsl #2]
   25f20:	eor	r0, r0, ip
   25f24:	adds	r0, r0, r2
   25f28:	eor	r0, r0, ip
   25f2c:	adc	r2, r7, #0
   25f30:	adds	r0, r0, r3
   25f34:	str	r0, [r1, r4, lsl #2]
   25f38:	add	r4, r4, #1
   25f3c:	adc	r3, r7, #0
   25f40:	cmp	r4, r6
   25f44:	blt	25f1c <__assert_fail@plt+0x14bfc>
   25f48:	cmp	r3, #0
   25f4c:	beq	25f68 <__assert_fail@plt+0x14c48>
   25f50:	str	r3, [r1, r6, lsl #2]
   25f54:	add	r0, r6, #1
   25f58:	b	25f88 <__assert_fail@plt+0x14c68>
   25f5c:	ldr	r9, [sp, #8]
   25f60:	cmp	r3, #0
   25f64:	bne	25f50 <__assert_fail@plt+0x14c30>
   25f68:	sub	r1, r1, #4
   25f6c:	mov	r0, r6
   25f70:	cmp	r6, #1
   25f74:	blt	25f88 <__assert_fail@plt+0x14c68>
   25f78:	ldr	r2, [r1, r0, lsl #2]
   25f7c:	sub	r6, r0, #1
   25f80:	cmp	r2, #0
   25f84:	beq	25f6c <__assert_fail@plt+0x14c4c>
   25f88:	ldr	r1, [sp, #16]
   25f8c:	cmp	r1, #0
   25f90:	rsbne	r0, r0, #0
   25f94:	b	26148 <__assert_fail@plt+0x14e28>
   25f98:	ldr	r0, [r9, #8]
   25f9c:	cmp	r5, #1
   25fa0:	bge	25fe4 <__assert_fail@plt+0x14cc4>
   25fa4:	b	26140 <__assert_fail@plt+0x14e20>
   25fa8:	movw	r0, #12572	; 0x311c
   25fac:	movt	r0, #4
   25fb0:	ldr	r1, [r0]
   25fb4:	lsl	r0, r4, #2
   25fb8:	blx	r1
   25fbc:	str	r0, [r9, #8]
   25fc0:	str	r4, [r9]
   25fc4:	ldr	r1, [r9, #4]
   25fc8:	cmp	r1, #0
   25fcc:	rsbmi	r1, r1, #0
   25fd0:	cmp	r1, r4
   25fd4:	movgt	r1, #0
   25fd8:	strgt	r1, [r9, #4]
   25fdc:	cmp	r5, #1
   25fe0:	blt	26140 <__assert_fail@plt+0x14e20>
   25fe4:	ldr	r1, [sp, #32]
   25fe8:	mov	r2, #0
   25fec:	cmp	r5, #4
   25ff0:	ldr	r1, [r1, #8]
   25ff4:	bcc	260d4 <__assert_fail@plt+0x14db4>
   25ff8:	add	r3, r1, r5, lsl #2
   25ffc:	cmp	r0, r3
   26000:	addcc	r3, r0, r5, lsl #2
   26004:	cmpcc	r1, r3
   26008:	bcc	260d4 <__assert_fail@plt+0x14db4>
   2600c:	bic	r2, r5, #-2147483645	; 0x80000003
   26010:	mov	r3, #1
   26014:	str	r9, [sp, #8]
   26018:	mov	r9, #0
   2601c:	str	r5, [sp, #24]
   26020:	sub	r6, r2, #4
   26024:	add	r3, r3, r6, lsr #2
   26028:	cmp	r6, #12
   2602c:	and	r7, r3, #3
   26030:	str	r7, [sp, #28]
   26034:	bcc	2609c <__assert_fail@plt+0x14d7c>
   26038:	ldr	r7, [sp, #28]
   2603c:	mov	r4, #0
   26040:	mov	lr, #48	; 0x30
   26044:	mov	r9, #0
   26048:	sub	sl, r3, r7
   2604c:	add	r5, r1, r4
   26050:	add	r7, r0, r4
   26054:	add	r4, r4, #64	; 0x40
   26058:	subs	sl, sl, #4
   2605c:	add	r9, r9, #16
   26060:	mov	r8, r5
   26064:	mov	r6, r7
   26068:	add	ip, r5, #16
   2606c:	add	r3, r7, #16
   26070:	vld1.32	{d16-d17}, [r8], lr
   26074:	vst1.32	{d16-d17}, [r6], lr
   26078:	vld1.32	{d16-d17}, [ip]
   2607c:	vst1.32	{d16-d17}, [r3]
   26080:	add	r3, r5, #32
   26084:	vld1.32	{d16-d17}, [r3]
   26088:	add	r3, r7, #32
   2608c:	vst1.32	{d16-d17}, [r3]
   26090:	vld1.32	{d16-d17}, [r8]
   26094:	vst1.32	{d16-d17}, [r6]
   26098:	bne	2604c <__assert_fail@plt+0x14d2c>
   2609c:	ldr	r6, [sp, #28]
   260a0:	cmp	r6, #0
   260a4:	beq	260c4 <__assert_fail@plt+0x14da4>
   260a8:	add	r3, r1, r9, lsl #2
   260ac:	add	r7, r0, r9, lsl #2
   260b0:	rsb	r6, r6, #0
   260b4:	vld1.32	{d16-d17}, [r3]!
   260b8:	adds	r6, r6, #1
   260bc:	vst1.32	{d16-d17}, [r7]!
   260c0:	bcc	260b4 <__assert_fail@plt+0x14d94>
   260c4:	ldr	r5, [sp, #24]
   260c8:	ldr	r9, [sp, #8]
   260cc:	cmp	r5, r2
   260d0:	beq	26140 <__assert_fail@plt+0x14e20>
   260d4:	mvn	r3, r2
   260d8:	ands	r7, r5, #3
   260dc:	add	r3, r5, r3
   260e0:	beq	260f8 <__assert_fail@plt+0x14dd8>
   260e4:	ldr	r6, [r1, r2, lsl #2]
   260e8:	subs	r7, r7, #1
   260ec:	str	r6, [r0, r2, lsl #2]
   260f0:	add	r2, r2, #1
   260f4:	bne	260e4 <__assert_fail@plt+0x14dc4>
   260f8:	cmp	r3, #3
   260fc:	bcc	26140 <__assert_fail@plt+0x14e20>
   26100:	sub	r3, r5, r2
   26104:	lsl	r2, r2, #2
   26108:	add	r7, r1, #16
   2610c:	ldr	r6, [r1, r2]!
   26110:	add	r5, r0, #16
   26114:	subs	r3, r3, #4
   26118:	str	r6, [r0, r2]!
   2611c:	ldr	r6, [r1, #4]
   26120:	str	r6, [r0, #4]
   26124:	ldr	r6, [r1, #8]
   26128:	str	r6, [r0, #8]
   2612c:	ldr	r1, [r1, #12]
   26130:	str	r1, [r0, #12]
   26134:	mov	r1, r7
   26138:	mov	r0, r5
   2613c:	bne	26108 <__assert_fail@plt+0x14de8>
   26140:	ldr	r0, [sp, #32]
   26144:	ldr	r0, [r0, #4]
   26148:	str	r0, [r9, #4]
   2614c:	sub	sp, fp, #28
   26150:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   26154:	movw	r0, #3746	; 0xea2
   26158:	movw	r1, #1996	; 0x7cc
   2615c:	movw	r3, #3900	; 0xf3c
   26160:	movw	r2, #3996	; 0xf9c
   26164:	movt	r0, #3
   26168:	movt	r1, #3
   2616c:	movt	r3, #3
   26170:	bl	11320 <__assert_fail@plt>
   26174:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   26178:	add	fp, sp, #24
   2617c:	cmp	r1, #1
   26180:	blt	26204 <__assert_fail@plt+0x14ee4>
   26184:	mov	lr, #0
   26188:	movw	r2, #21845	; 0x5555
   2618c:	movw	r3, #13107	; 0x3333
   26190:	mov	ip, #0
   26194:	mov	r8, #0
   26198:	b	261ac <__assert_fail@plt+0x14e8c>
   2619c:	add	r8, r8, #1
   261a0:	add	ip, r6, ip
   261a4:	cmp	r8, r1
   261a8:	beq	261fc <__assert_fail@plt+0x14edc>
   261ac:	ldr	r5, [r0, r8, lsl #2]
   261b0:	mov	r6, #0
   261b4:	cmp	r5, #0
   261b8:	beq	2619c <__assert_fail@plt+0x14e7c>
   261bc:	mov	r6, #0
   261c0:	and	r7, r2, r5, lsr #1
   261c4:	cmp	lr, r5, lsr #16
   261c8:	sub	r7, r5, r7
   261cc:	and	r4, r7, r3
   261d0:	and	r7, r3, r7, lsr #2
   261d4:	add	r4, r7, r4
   261d8:	add	r4, r4, r4, lsr #4
   261dc:	and	r7, r4, #15
   261e0:	ubfx	r4, r4, #8, #4
   261e4:	add	r6, r7, r6
   261e8:	add	r6, r6, r4
   261ec:	lsr	r4, r5, #16
   261f0:	mov	r5, r4
   261f4:	bne	261c0 <__assert_fail@plt+0x14ea0>
   261f8:	b	2619c <__assert_fail@plt+0x14e7c>
   261fc:	mov	r0, ip
   26200:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   26204:	mov	ip, #0
   26208:	mov	r0, ip
   2620c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   26210:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   26214:	add	fp, sp, #24
   26218:	ldr	lr, [r0, #4]
   2621c:	cmp	lr, #0
   26220:	bmi	262a8 <__assert_fail@plt+0x14f88>
   26224:	beq	262b0 <__assert_fail@plt+0x14f90>
   26228:	ldr	ip, [r0, #8]
   2622c:	mov	r3, #0
   26230:	movw	r2, #21845	; 0x5555
   26234:	movw	r1, #13107	; 0x3333
   26238:	mov	r0, #0
   2623c:	mov	r8, #0
   26240:	b	26254 <__assert_fail@plt+0x14f34>
   26244:	add	r8, r8, #1
   26248:	add	r0, r6, r0
   2624c:	cmp	r8, lr
   26250:	beq	262a4 <__assert_fail@plt+0x14f84>
   26254:	ldr	r5, [ip, r8, lsl #2]
   26258:	mov	r6, #0
   2625c:	cmp	r5, #0
   26260:	beq	26244 <__assert_fail@plt+0x14f24>
   26264:	mov	r6, #0
   26268:	and	r7, r2, r5, lsr #1
   2626c:	cmp	r3, r5, lsr #16
   26270:	sub	r7, r5, r7
   26274:	and	r4, r7, r1
   26278:	and	r7, r1, r7, lsr #2
   2627c:	add	r4, r7, r4
   26280:	add	r4, r4, r4, lsr #4
   26284:	and	r7, r4, #15
   26288:	ubfx	r4, r4, #8, #4
   2628c:	add	r6, r7, r6
   26290:	add	r6, r6, r4
   26294:	lsr	r4, r5, #16
   26298:	mov	r5, r4
   2629c:	bne	26268 <__assert_fail@plt+0x14f48>
   262a0:	b	26244 <__assert_fail@plt+0x14f24>
   262a4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   262a8:	mvn	r0, #0
   262ac:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   262b0:	mov	r0, #0
   262b4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   262b8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   262bc:	add	fp, sp, #28
   262c0:	sub	sp, sp, #20
   262c4:	ldr	r3, [r0, #4]
   262c8:	ldr	lr, [r1, #4]
   262cc:	eors	r7, lr, r3
   262d0:	bmi	262e4 <__assert_fail@plt+0x14fc4>
   262d4:	cmn	r3, #1
   262d8:	ble	262f0 <__assert_fail@plt+0x14fd0>
   262dc:	mov	r4, r3
   262e0:	b	26300 <__assert_fail@plt+0x14fe0>
   262e4:	mvn	r0, #0
   262e8:	sub	sp, fp, #28
   262ec:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   262f0:	cmp	lr, #0
   262f4:	bpl	264bc <__assert_fail@plt+0x1519c>
   262f8:	rsb	lr, lr, #0
   262fc:	rsb	r4, r3, #0
   26300:	asr	r2, r3, #31
   26304:	cmp	r4, lr
   26308:	mov	r8, r4
   2630c:	lsr	ip, r3, #31
   26310:	str	r2, [sp, #16]
   26314:	ldr	r2, [r0, #8]
   26318:	ldr	r0, [r1, #8]
   2631c:	movlt	r8, lr
   26320:	movlt	lr, r4
   26324:	mov	r1, r0
   26328:	movlt	r1, r2
   2632c:	movlt	r2, r0
   26330:	cmp	lr, #1
   26334:	str	r1, [sp, #8]
   26338:	str	r2, [sp, #12]
   2633c:	blt	26490 <__assert_fail@plt+0x15170>
   26340:	mov	r6, #0
   26344:	movw	r7, #21845	; 0x5555
   26348:	movw	r1, #13107	; 0x3333
   2634c:	mov	r0, #0
   26350:	mov	r4, #0
   26354:	mov	sl, ip
   26358:	str	r8, [sp, #4]
   2635c:	b	26370 <__assert_fail@plt+0x15050>
   26360:	add	r4, r4, #1
   26364:	add	r0, r8, r0
   26368:	cmp	r4, lr
   2636c:	bge	263ec <__assert_fail@plt+0x150cc>
   26370:	ldr	r2, [sp, #8]
   26374:	ldr	r5, [sp, #12]
   26378:	mov	r8, #0
   2637c:	ldr	r3, [r2, r4, lsl #2]
   26380:	ldr	r2, [sp, #16]
   26384:	ldr	r5, [r5, r4, lsl #2]
   26388:	eor	r3, r3, r2
   2638c:	eor	r5, r5, r2
   26390:	adds	r3, r3, sl
   26394:	adc	sl, r6, #0
   26398:	adds	r5, r5, ip
   2639c:	eor	r3, r3, r5
   263a0:	adc	ip, r6, #0
   263a4:	cmp	r3, #0
   263a8:	beq	26360 <__assert_fail@plt+0x15040>
   263ac:	mov	r8, #0
   263b0:	and	r5, r7, r3, lsr #1
   263b4:	cmp	r6, r3, lsr #16
   263b8:	sub	r5, r3, r5
   263bc:	and	r9, r5, r1
   263c0:	and	r5, r1, r5, lsr #2
   263c4:	add	r5, r5, r9
   263c8:	add	r5, r5, r5, lsr #4
   263cc:	and	r2, r5, #15
   263d0:	ubfx	r5, r5, #8, #4
   263d4:	add	r2, r2, r8
   263d8:	add	r8, r2, r5
   263dc:	lsr	r2, r3, #16
   263e0:	mov	r3, r2
   263e4:	bne	263b0 <__assert_fail@plt+0x15090>
   263e8:	b	26360 <__assert_fail@plt+0x15040>
   263ec:	ldr	r8, [sp, #4]
   263f0:	cmp	sl, #0
   263f4:	bne	264a4 <__assert_fail@plt+0x15184>
   263f8:	cmp	lr, r8
   263fc:	bge	26488 <__assert_fail@plt+0x15168>
   26400:	movw	r1, #21845	; 0x5555
   26404:	movw	r4, #13107	; 0x3333
   26408:	mov	r5, #0
   2640c:	b	26420 <__assert_fail@plt+0x15100>
   26410:	add	lr, lr, #1
   26414:	add	r0, r6, r0
   26418:	cmp	lr, r8
   2641c:	bge	26488 <__assert_fail@plt+0x15168>
   26420:	ldr	r2, [sp, #12]
   26424:	ldr	r3, [sp, #16]
   26428:	mov	r6, #0
   2642c:	ldr	r2, [r2, lr, lsl #2]
   26430:	eor	r2, r2, r3
   26434:	adds	r2, r2, ip
   26438:	eor	r3, r2, r3
   2643c:	adc	ip, r5, #0
   26440:	cmp	r3, #0
   26444:	beq	26410 <__assert_fail@plt+0x150f0>
   26448:	mov	r6, #0
   2644c:	and	r2, r1, r3, lsr #1
   26450:	cmp	r5, r3, lsr #16
   26454:	sub	r2, r3, r2
   26458:	and	r7, r2, r4
   2645c:	and	r2, r4, r2, lsr #2
   26460:	add	r2, r2, r7
   26464:	add	r2, r2, r2, lsr #4
   26468:	and	r7, r2, #15
   2646c:	ubfx	r2, r2, #8, #4
   26470:	add	r6, r7, r6
   26474:	add	r6, r6, r2
   26478:	lsr	r2, r3, #16
   2647c:	mov	r3, r2
   26480:	bne	2644c <__assert_fail@plt+0x1512c>
   26484:	b	26410 <__assert_fail@plt+0x150f0>
   26488:	sub	sp, fp, #28
   2648c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   26490:	mov	lr, #0
   26494:	mov	sl, ip
   26498:	mov	r0, #0
   2649c:	cmp	sl, #0
   264a0:	beq	263f8 <__assert_fail@plt+0x150d8>
   264a4:	movw	r0, #3746	; 0xea2
   264a8:	movw	r1, #1996	; 0x7cc
   264ac:	movw	r3, #3980	; 0xf8c
   264b0:	movw	r2, #4100	; 0x1004
   264b4:	movt	r0, #3
   264b8:	b	264d0 <__assert_fail@plt+0x151b0>
   264bc:	movw	r0, #3973	; 0xf85
   264c0:	movw	r1, #1996	; 0x7cc
   264c4:	movw	r3, #3980	; 0xf8c
   264c8:	movw	r2, #4079	; 0xfef
   264cc:	movt	r0, #3
   264d0:	movt	r1, #3
   264d4:	movt	r3, #3
   264d8:	bl	11320 <__assert_fail@plt>
   264dc:	push	{r4, r5, r6, sl, fp, lr}
   264e0:	add	fp, sp, #16
   264e4:	sub	sp, sp, #8
   264e8:	ldr	r4, [r0, #4]
   264ec:	cmp	r4, #0
   264f0:	mov	r3, r4
   264f4:	rsbmi	r3, r4, #0
   264f8:	cmp	r3, r1, lsr #5
   264fc:	ble	2657c <__assert_fail@plt+0x1525c>
   26500:	ldr	r2, [r0, #8]
   26504:	lsr	ip, r1, #5
   26508:	mov	lr, #0
   2650c:	cmp	r1, #0
   26510:	ldr	r0, [r2, ip, lsl #2]
   26514:	beq	26568 <__assert_fail@plt+0x15248>
   26518:	cmn	r4, #1
   2651c:	bgt	2655c <__assert_fail@plt+0x1523c>
   26520:	sub	lr, r2, #4
   26524:	mov	r5, ip
   26528:	mov	r4, r5
   2652c:	cmp	r5, #1
   26530:	blt	26544 <__assert_fail@plt+0x15224>
   26534:	ldr	r6, [lr, r4, lsl #2]
   26538:	sub	r5, r4, #1
   2653c:	cmp	r6, #0
   26540:	beq	26528 <__assert_fail@plt+0x15208>
   26544:	clz	r6, r4
   26548:	mvn	r0, r0
   2654c:	mov	lr, #0
   26550:	lsr	r6, r6, #5
   26554:	adds	r0, r6, r0
   26558:	mvncc	lr, #0
   2655c:	and	r1, r1, #31
   26560:	mvn	r4, #0
   26564:	and	r0, r0, r4, lsl r1
   26568:	mov	r1, ip
   2656c:	str	lr, [sp]
   26570:	bl	1947c <__assert_fail@plt+0x815c>
   26574:	sub	sp, fp, #16
   26578:	pop	{r4, r5, r6, sl, fp, pc}
   2657c:	cmn	r4, #1
   26580:	mvngt	r1, #0
   26584:	mov	r0, r1
   26588:	sub	sp, fp, #16
   2658c:	pop	{r4, r5, r6, sl, fp, pc}
   26590:	push	{r4, r5, r6, r7, fp, lr}
   26594:	add	fp, sp, #16
   26598:	sub	sp, sp, #8
   2659c:	ldr	r2, [r0, #4]
   265a0:	cmp	r2, #0
   265a4:	mov	r3, r2
   265a8:	rsbmi	r3, r2, #0
   265ac:	mvn	r2, r2
   265b0:	cmp	r3, r1, lsr #5
   265b4:	lsr	r4, r2, #31
   265b8:	ble	26624 <__assert_fail@plt+0x15304>
   265bc:	asr	lr, r2, #31
   265c0:	ldr	r2, [r0, #8]
   265c4:	lsr	ip, r1, #5
   265c8:	cmp	r4, #0
   265cc:	ldr	r0, [r2, ip, lsl #2]
   265d0:	eor	r0, r0, lr
   265d4:	bne	26604 <__assert_fail@plt+0x152e4>
   265d8:	sub	r4, r2, #4
   265dc:	mov	r6, ip
   265e0:	mov	r5, r6
   265e4:	cmp	r6, #1
   265e8:	blt	265fc <__assert_fail@plt+0x152dc>
   265ec:	ldr	r7, [r4, r5, lsl #2]
   265f0:	sub	r6, r5, #1
   265f4:	cmp	r7, #0
   265f8:	beq	265e0 <__assert_fail@plt+0x152c0>
   265fc:	cmp	r5, #0
   26600:	subeq	r0, r0, #1
   26604:	and	r1, r1, #31
   26608:	mvn	r7, #0
   2660c:	str	lr, [sp]
   26610:	and	r0, r0, r7, lsl r1
   26614:	mov	r1, ip
   26618:	bl	1947c <__assert_fail@plt+0x815c>
   2661c:	sub	sp, fp, #16
   26620:	pop	{r4, r5, r6, r7, fp, pc}
   26624:	cmp	r4, #0
   26628:	mvneq	r1, #0
   2662c:	mov	r0, r1
   26630:	sub	sp, fp, #16
   26634:	pop	{r4, r5, r6, r7, fp, pc}
   26638:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2663c:	add	fp, sp, #28
   26640:	sub	sp, sp, #20
   26644:	ldr	ip, [r3]
   26648:	mov	r9, r3
   2664c:	mov	r8, r2
   26650:	mov	r7, r1
   26654:	mov	r5, r0
   26658:	cmp	ip, #0
   2665c:	beq	2672c <__assert_fail@plt+0x1540c>
   26660:	mov	lr, #0
   26664:	cmp	r5, #0
   26668:	mov	r0, r5
   2666c:	bne	2668c <__assert_fail@plt+0x1536c>
   26670:	movw	r0, #12572	; 0x311c
   26674:	movt	r0, #4
   26678:	ldr	r1, [r0]
   2667c:	lsl	r0, r8, #2
   26680:	blx	r1
   26684:	ldr	ip, [r9]
   26688:	mov	lr, r8
   2668c:	cmp	r8, #0
   26690:	ble	2684c <__assert_fail@plt+0x1552c>
   26694:	cmp	ip, #0
   26698:	beq	26864 <__assert_fail@plt+0x15544>
   2669c:	cmp	ip, #32
   266a0:	bcs	2687c <__assert_fail@plt+0x1555c>
   266a4:	str	r5, [sp, #16]
   266a8:	add	r5, r7, r8, lsl #2
   266ac:	add	r3, r0, r8, lsl #2
   266b0:	rsb	sl, ip, #32
   266b4:	ldr	r1, [r5, #-4]!
   266b8:	lsl	r7, r1, ip
   266bc:	lsr	r4, r1, sl
   266c0:	subs	r1, r8, #1
   266c4:	beq	2671c <__assert_fail@plt+0x153fc>
   266c8:	tst	r1, #1
   266cc:	beq	266e4 <__assert_fail@plt+0x153c4>
   266d0:	ldr	r1, [r5, #-4]!
   266d4:	orr	r7, r7, r1, lsr sl
   266d8:	str	r7, [r3, #-4]!
   266dc:	lsl	r7, r1, ip
   266e0:	sub	r1, r8, #2
   266e4:	cmp	r8, #2
   266e8:	beq	2671c <__assert_fail@plt+0x153fc>
   266ec:	sub	r5, r5, #4
   266f0:	ldr	r6, [r5]
   266f4:	subs	r1, r1, #2
   266f8:	orr	r7, r7, r6, lsr sl
   266fc:	str	r7, [r3, #-4]
   26700:	ldr	r2, [r5, #-4]
   26704:	sub	r5, r5, #8
   26708:	lsl	r7, r2, ip
   2670c:	lsr	r2, r2, sl
   26710:	orr	r2, r2, r6, lsl ip
   26714:	str	r2, [r3, #-8]!
   26718:	bne	266f0 <__assert_fail@plt+0x153d0>
   2671c:	ldr	r5, [sp, #16]
   26720:	str	r7, [r3, #-4]
   26724:	mov	r7, r0
   26728:	b	2673c <__assert_fail@plt+0x1541c>
   2672c:	mov	ip, #0
   26730:	mov	lr, #0
   26734:	mov	r0, #0
   26738:	mov	r4, #0
   2673c:	cmp	r8, #1
   26740:	str	r0, [sp]
   26744:	str	lr, [sp, #8]
   26748:	str	ip, [sp, #12]
   2674c:	str	r9, [sp, #4]
   26750:	blt	26810 <__assert_fail@plt+0x154f0>
   26754:	ldr	r0, [r9, #12]
   26758:	ldr	r1, [r9, #4]
   2675c:	sub	r2, r5, #4
   26760:	mov	sl, r5
   26764:	sub	r9, r7, #4
   26768:	str	r2, [sp, #16]
   2676c:	uxth	r5, r0
   26770:	lsr	r7, r0, #16
   26774:	b	26784 <__assert_fail@plt+0x15464>
   26778:	cmp	r6, #0
   2677c:	mov	r8, r6
   26780:	ble	26810 <__assert_fail@plt+0x154f0>
   26784:	uxth	r0, r4
   26788:	lsr	r6, r4, #16
   2678c:	mov	ip, #0
   26790:	mul	r3, r6, r5
   26794:	mul	r2, r0, r7
   26798:	mul	r0, r0, r5
   2679c:	mla	r2, r6, r5, r2
   267a0:	mul	r6, r6, r7
   267a4:	add	r2, r2, r0, lsr #16
   267a8:	cmp	r2, r3
   267ac:	add	r3, r4, r2, lsr #16
   267b0:	ldr	r4, [r9, r8, lsl #2]
   267b4:	pkhbt	r0, r0, r2, lsl #16
   267b8:	addcc	r6, r6, #65536	; 0x10000
   267bc:	add	r3, r3, #1
   267c0:	adds	r0, r4, r0
   267c4:	adc	r2, r3, r6
   267c8:	sub	r6, r8, #1
   267cc:	mls	r3, r2, r1, r4
   267d0:	cmp	r3, r0
   267d4:	mvnhi	ip, #0
   267d8:	and	r0, r1, ip
   267dc:	add	lr, r0, r3
   267e0:	subs	r4, lr, r1
   267e4:	movcc	r4, lr
   267e8:	cmp	sl, #0
   267ec:	beq	26778 <__assert_fail@plt+0x15458>
   267f0:	cmp	lr, r1
   267f4:	mov	r0, #0
   267f8:	add	r2, r2, ip
   267fc:	movwcs	r0, #1
   26800:	add	r0, r2, r0
   26804:	ldr	r2, [sp, #16]
   26808:	str	r0, [r2, r8, lsl #2]
   2680c:	b	26778 <__assert_fail@plt+0x15458>
   26810:	ldr	r1, [sp, #8]
   26814:	ldr	r0, [sp, #12]
   26818:	cmp	r1, #0
   2681c:	beq	26840 <__assert_fail@plt+0x15520>
   26820:	movw	r0, #12580	; 0x3124
   26824:	lsl	r1, r1, #2
   26828:	movt	r0, #4
   2682c:	ldr	r2, [r0]
   26830:	ldr	r0, [sp]
   26834:	blx	r2
   26838:	ldr	r0, [sp, #4]
   2683c:	ldr	r0, [r0]
   26840:	lsr	r0, r4, r0
   26844:	sub	sp, fp, #28
   26848:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2684c:	movw	r0, #2553	; 0x9f9
   26850:	movw	r1, #1996	; 0x7cc
   26854:	movw	r3, #2640	; 0xa50
   26858:	movw	r2, #659	; 0x293
   2685c:	movt	r0, #3
   26860:	b	26890 <__assert_fail@plt+0x15570>
   26864:	movw	r0, #2705	; 0xa91
   26868:	movw	r1, #1996	; 0x7cc
   2686c:	movw	r3, #2640	; 0xa50
   26870:	mov	r2, #660	; 0x294
   26874:	movt	r0, #3
   26878:	b	26890 <__assert_fail@plt+0x15570>
   2687c:	movw	r0, #2714	; 0xa9a
   26880:	movw	r1, #1996	; 0x7cc
   26884:	movw	r3, #2640	; 0xa50
   26888:	movw	r2, #661	; 0x295
   2688c:	movt	r0, #3
   26890:	movt	r1, #3
   26894:	movt	r3, #3
   26898:	bl	11320 <__assert_fail@plt>
   2689c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   268a0:	add	fp, sp, #28
   268a4:	sub	sp, sp, #36	; 0x24
   268a8:	mov	r5, r2
   268ac:	mov	r6, r1
   268b0:	mov	r8, r0
   268b4:	cmp	r1, #2
   268b8:	blt	268d0 <__assert_fail@plt+0x155b0>
   268bc:	cmp	r6, #37	; 0x25
   268c0:	bge	268e8 <__assert_fail@plt+0x155c8>
   268c4:	movw	r9, #4181	; 0x1055
   268c8:	movt	r9, #3
   268cc:	b	26910 <__assert_fail@plt+0x155f0>
   268d0:	movw	r9, #4118	; 0x1016
   268d4:	cmn	r6, #2
   268d8:	movt	r9, #3
   268dc:	ble	26900 <__assert_fail@plt+0x155e0>
   268e0:	mov	r6, #10
   268e4:	b	26910 <__assert_fail@plt+0x155f0>
   268e8:	mov	r0, #0
   268ec:	cmp	r6, #62	; 0x3e
   268f0:	bgt	26af8 <__assert_fail@plt+0x157d8>
   268f4:	movw	r9, #4118	; 0x1016
   268f8:	movt	r9, #3
   268fc:	b	26910 <__assert_fail@plt+0x155f0>
   26900:	mov	r0, #0
   26904:	cmn	r6, #36	; 0x24
   26908:	blt	26af8 <__assert_fail@plt+0x157d8>
   2690c:	rsb	r6, r6, #0
   26910:	mov	r0, r5
   26914:	mov	r1, r6
   26918:	bl	23138 <__assert_fail@plt+0x11e18>
   2691c:	mov	sl, #0
   26920:	cmp	r8, #0
   26924:	bne	26944 <__assert_fail@plt+0x15624>
   26928:	movw	r1, #12572	; 0x311c
   2692c:	add	sl, r0, #2
   26930:	movt	r1, #4
   26934:	mov	r0, sl
   26938:	ldr	r1, [r1]
   2693c:	blx	r1
   26940:	mov	r8, r0
   26944:	ldr	r0, [r5, #4]
   26948:	cmp	r0, #0
   2694c:	mov	r3, r0
   26950:	rsbmi	r3, r0, #0
   26954:	cmp	r3, #0
   26958:	beq	26a14 <__assert_fail@plt+0x156f4>
   2695c:	cmn	r0, #1
   26960:	mov	r4, #0
   26964:	movle	r0, #45	; 0x2d
   26968:	movle	r4, #1
   2696c:	strble	r0, [r8]
   26970:	cmp	r6, #63	; 0x3f
   26974:	bgt	26a24 <__assert_fail@plt+0x15704>
   26978:	sub	r0, r6, #2
   2697c:	cmp	r0, #30
   26980:	bhi	26b20 <__assert_fail@plt+0x15800>
   26984:	add	r2, pc, #4
   26988:	mov	r1, #1
   2698c:	ldr	pc, [r2, r0, lsl #2]
   26990:	andeq	r6, r2, r8, ror #20
   26994:	andeq	r6, r2, r0, lsr #22
   26998:	andeq	r6, r2, ip, lsl #20
   2699c:	andeq	r6, r2, r0, lsr #22
   269a0:	andeq	r6, r2, r0, lsr #22
   269a4:	andeq	r6, r2, r0, lsr #22
   269a8:	andeq	r6, r2, r4, asr #20
   269ac:	andeq	r6, r2, r0, lsr #22
   269b0:	andeq	r6, r2, r0, lsr #22
   269b4:	andeq	r6, r2, r0, lsr #22
   269b8:	andeq	r6, r2, r0, lsr #22
   269bc:	andeq	r6, r2, r0, lsr #22
   269c0:	andeq	r6, r2, r0, lsr #22
   269c4:	andeq	r6, r2, r0, lsr #22
   269c8:	andeq	r6, r2, ip, asr #20
   269cc:	andeq	r6, r2, r0, lsr #22
   269d0:	andeq	r6, r2, r0, lsr #22
   269d4:	andeq	r6, r2, r0, lsr #22
   269d8:	andeq	r6, r2, r0, lsr #22
   269dc:	andeq	r6, r2, r0, lsr #22
   269e0:	andeq	r6, r2, r0, lsr #22
   269e4:	andeq	r6, r2, r0, lsr #22
   269e8:	andeq	r6, r2, r0, lsr #22
   269ec:	andeq	r6, r2, r0, lsr #22
   269f0:	andeq	r6, r2, r0, lsr #22
   269f4:	andeq	r6, r2, r0, lsr #22
   269f8:	andeq	r6, r2, r0, lsr #22
   269fc:	andeq	r6, r2, r0, lsr #22
   26a00:	andeq	r6, r2, r0, lsr #22
   26a04:	andeq	r6, r2, r0, lsr #22
   26a08:	andeq	r6, r2, r4, asr sl
   26a0c:	mov	r1, #2
   26a10:	b	26a68 <__assert_fail@plt+0x15748>
   26a14:	mov	r0, #48	; 0x30
   26a18:	strb	r0, [r8]
   26a1c:	mov	r0, #1
   26a20:	b	26adc <__assert_fail@plt+0x157bc>
   26a24:	cmp	r6, #64	; 0x40
   26a28:	beq	26a5c <__assert_fail@plt+0x1573c>
   26a2c:	cmp	r6, #128	; 0x80
   26a30:	beq	26a64 <__assert_fail@plt+0x15744>
   26a34:	cmp	r6, #256	; 0x100
   26a38:	bne	26b20 <__assert_fail@plt+0x15800>
   26a3c:	mov	r1, #8
   26a40:	b	26a68 <__assert_fail@plt+0x15748>
   26a44:	mov	r1, #3
   26a48:	b	26a68 <__assert_fail@plt+0x15748>
   26a4c:	mov	r1, #4
   26a50:	b	26a68 <__assert_fail@plt+0x15748>
   26a54:	mov	r1, #5
   26a58:	b	26a68 <__assert_fail@plt+0x15748>
   26a5c:	mov	r1, #6
   26a60:	b	26a68 <__assert_fail@plt+0x15748>
   26a64:	mov	r1, #7
   26a68:	ldr	r2, [r5, #8]
   26a6c:	add	r0, r8, r4
   26a70:	bl	19b48 <__assert_fail@plt+0x8828>
   26a74:	mov	r5, r0
   26a78:	add	r0, r5, r4
   26a7c:	cmp	r4, r0
   26a80:	bcs	26adc <__assert_fail@plt+0x157bc>
   26a84:	tst	r5, #1
   26a88:	mov	r2, r4
   26a8c:	beq	26aa0 <__assert_fail@plt+0x15780>
   26a90:	ldrb	r1, [r8, r4]
   26a94:	add	r2, r4, #1
   26a98:	ldrb	r1, [r9, r1]
   26a9c:	strb	r1, [r8, r4]
   26aa0:	cmp	r5, #1
   26aa4:	beq	26adc <__assert_fail@plt+0x157bc>
   26aa8:	add	r1, r5, r4
   26aac:	sub	r1, r1, r2
   26ab0:	add	r2, r2, r8
   26ab4:	add	r2, r2, #1
   26ab8:	ldrb	r3, [r2, #-1]
   26abc:	ldrb	r7, [r2]
   26ac0:	subs	r1, r1, #2
   26ac4:	ldrb	r3, [r9, r3]
   26ac8:	strb	r3, [r2, #-1]
   26acc:	ldrb	r3, [r9, r7]
   26ad0:	strb	r3, [r2]
   26ad4:	add	r2, r2, #2
   26ad8:	bne	26ab8 <__assert_fail@plt+0x15798>
   26adc:	cmp	sl, #0
   26ae0:	mov	r1, #0
   26ae4:	addne	r2, r0, #1
   26ae8:	strb	r1, [r8, r0]
   26aec:	cmpne	sl, r2
   26af0:	bne	26b00 <__assert_fail@plt+0x157e0>
   26af4:	mov	r0, r8
   26af8:	sub	sp, fp, #28
   26afc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   26b00:	movw	r0, #12576	; 0x3120
   26b04:	mov	r1, sl
   26b08:	movt	r0, #4
   26b0c:	ldr	r3, [r0]
   26b10:	mov	r0, r8
   26b14:	sub	sp, fp, #28
   26b18:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   26b1c:	bx	r3
   26b20:	mvn	r0, #0
   26b24:	mov	r2, r6
   26b28:	str	r4, [sp, #20]
   26b2c:	udiv	r1, r0, r6
   26b30:	mov	r0, #1
   26b34:	cmp	r1, r6
   26b38:	bcc	26b54 <__assert_fail@plt+0x15834>
   26b3c:	mov	r0, #1
   26b40:	mov	r2, r6
   26b44:	mul	r2, r2, r6
   26b48:	add	r0, r0, #1
   26b4c:	cmp	r2, r1
   26b50:	bls	26b44 <__assert_fail@plt+0x15824>
   26b54:	str	r2, [sp, #32]
   26b58:	str	r0, [sp, #28]
   26b5c:	movw	r0, #12572	; 0x311c
   26b60:	movt	r0, #4
   26b64:	ldr	r1, [r0]
   26b68:	lsl	r0, r3, #2
   26b6c:	str	r0, [sp, #16]
   26b70:	str	r3, [sp, #24]
   26b74:	blx	r1
   26b78:	ldr	ip, [sp, #24]
   26b7c:	mov	lr, r0
   26b80:	cmp	ip, #1
   26b84:	blt	26cec <__assert_fail@plt+0x159cc>
   26b88:	ldr	r0, [r5, #8]
   26b8c:	mov	r1, #0
   26b90:	cmp	ip, #4
   26b94:	bcc	26c7c <__assert_fail@plt+0x1595c>
   26b98:	add	r2, r0, ip, lsl #2
   26b9c:	cmp	lr, r2
   26ba0:	bcs	26bb0 <__assert_fail@plt+0x15890>
   26ba4:	add	r2, lr, ip, lsl #2
   26ba8:	cmp	r2, r0
   26bac:	bhi	26c7c <__assert_fail@plt+0x1595c>
   26bb0:	bic	r1, ip, #-2147483645	; 0x80000003
   26bb4:	mov	r2, #1
   26bb8:	stmib	sp, {r8, sl}
   26bbc:	mov	r4, lr
   26bc0:	sub	r5, r1, #4
   26bc4:	add	r2, r2, r5, lsr #2
   26bc8:	cmp	r5, #12
   26bcc:	and	r3, r2, #3
   26bd0:	str	r3, [sp, #12]
   26bd4:	mov	r3, #0
   26bd8:	bcc	26c40 <__assert_fail@plt+0x15920>
   26bdc:	ldr	r3, [sp, #12]
   26be0:	sub	r5, r2, r3
   26be4:	mov	r2, #0
   26be8:	mov	r3, #0
   26bec:	add	ip, r0, r2
   26bf0:	mov	r7, #48	; 0x30
   26bf4:	add	r8, r4, r2
   26bf8:	add	r2, r2, #64	; 0x40
   26bfc:	subs	r5, r5, #4
   26c00:	add	r3, r3, #16
   26c04:	mov	lr, ip
   26c08:	mov	sl, r8
   26c0c:	vld1.32	{d16-d17}, [lr], r7
   26c10:	vst1.32	{d16-d17}, [sl], r7
   26c14:	add	r7, ip, #16
   26c18:	vld1.32	{d16-d17}, [r7]
   26c1c:	add	r7, r8, #16
   26c20:	vst1.32	{d16-d17}, [r7]
   26c24:	add	r7, ip, #32
   26c28:	vld1.32	{d16-d17}, [r7]
   26c2c:	add	r7, r8, #32
   26c30:	vst1.32	{d16-d17}, [r7]
   26c34:	vld1.32	{d16-d17}, [lr]
   26c38:	vst1.32	{d16-d17}, [sl]
   26c3c:	bne	26bec <__assert_fail@plt+0x158cc>
   26c40:	ldr	r7, [sp, #12]
   26c44:	mov	lr, r4
   26c48:	cmp	r7, #0
   26c4c:	beq	26c6c <__assert_fail@plt+0x1594c>
   26c50:	add	r2, r0, r3, lsl #2
   26c54:	add	r3, lr, r3, lsl #2
   26c58:	rsb	r5, r7, #0
   26c5c:	vld1.32	{d16-d17}, [r2]!
   26c60:	adds	r5, r5, #1
   26c64:	vst1.32	{d16-d17}, [r3]!
   26c68:	bcc	26c5c <__assert_fail@plt+0x1593c>
   26c6c:	ldr	ip, [sp, #24]
   26c70:	ldmib	sp, {r8, sl}
   26c74:	cmp	ip, r1
   26c78:	beq	26cec <__assert_fail@plt+0x159cc>
   26c7c:	mvn	r2, r1
   26c80:	ands	r3, ip, #3
   26c84:	add	r2, ip, r2
   26c88:	beq	26ca0 <__assert_fail@plt+0x15980>
   26c8c:	ldr	r7, [r0, r1, lsl #2]
   26c90:	subs	r3, r3, #1
   26c94:	str	r7, [lr, r1, lsl #2]
   26c98:	add	r1, r1, #1
   26c9c:	bne	26c8c <__assert_fail@plt+0x1596c>
   26ca0:	cmp	r2, #3
   26ca4:	bcc	26cec <__assert_fail@plt+0x159cc>
   26ca8:	sub	r2, ip, r1
   26cac:	lsl	r1, r1, #2
   26cb0:	mov	r3, lr
   26cb4:	add	r7, r0, #16
   26cb8:	ldr	r5, [r0, r1]!
   26cbc:	add	r4, r3, #16
   26cc0:	subs	r2, r2, #4
   26cc4:	str	r5, [r3, r1]!
   26cc8:	ldr	r5, [r0, #4]
   26ccc:	str	r5, [r3, #4]
   26cd0:	ldr	r5, [r0, #8]
   26cd4:	str	r5, [r3, #8]
   26cd8:	ldr	r0, [r0, #12]
   26cdc:	str	r0, [r3, #12]
   26ce0:	mov	r0, r7
   26ce4:	mov	r3, r4
   26ce8:	bne	26cb4 <__assert_fail@plt+0x15994>
   26cec:	str	ip, [sp]
   26cf0:	mov	r1, r6
   26cf4:	add	r2, sp, #28
   26cf8:	mov	r3, lr
   26cfc:	mov	r6, lr
   26d00:	ldr	r4, [sp, #20]
   26d04:	add	r0, r8, r4
   26d08:	bl	19c48 <__assert_fail@plt+0x8928>
   26d0c:	mov	r5, r0
   26d10:	movw	r0, #12580	; 0x3124
   26d14:	ldr	r1, [sp, #16]
   26d18:	movt	r0, #4
   26d1c:	ldr	r2, [r0]
   26d20:	mov	r0, r6
   26d24:	blx	r2
   26d28:	b	26a78 <__assert_fail@plt+0x15758>
   26d2c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   26d30:	add	fp, sp, #28
   26d34:	sub	sp, sp, #20
   26d38:	mov	r5, r2
   26d3c:	cmp	r2, #0
   26d40:	mov	r8, r0
   26d44:	subne	r0, r5, #2
   26d48:	cmpne	r0, #60	; 0x3c
   26d4c:	bhi	27284 <__assert_fail@plt+0x15f64>
   26d50:	sub	r6, r1, #1
   26d54:	bl	111d0 <__ctype_b_loc@plt>
   26d58:	mov	r4, r0
   26d5c:	ldr	r0, [r0]
   26d60:	ldrb	sl, [r6, #1]!
   26d64:	add	r1, r0, sl, lsl #1
   26d68:	ldrb	r1, [r1, #1]
   26d6c:	tst	r1, #32
   26d70:	bne	26d60 <__assert_fail@plt+0x15a40>
   26d74:	sub	r0, sl, #45	; 0x2d
   26d78:	cmp	r5, #0
   26d7c:	clz	r0, r0
   26d80:	lsr	r1, r0, #5
   26d84:	add	r7, r6, r1
   26d88:	beq	26e68 <__assert_fail@plt+0x15b48>
   26d8c:	ldrb	r0, [r7]
   26d90:	cmp	r0, #0
   26d94:	beq	26f78 <__assert_fail@plt+0x15c58>
   26d98:	mov	r0, r7
   26d9c:	str	r8, [sp, #8]
   26da0:	bl	11200 <strlen@plt>
   26da4:	movw	r6, #12572	; 0x311c
   26da8:	str	r0, [sp, #4]
   26dac:	movt	r6, #4
   26db0:	ldr	r1, [r6]
   26db4:	blx	r1
   26db8:	ldrb	r2, [r7]
   26dbc:	mov	r9, r0
   26dc0:	cmp	r2, #0
   26dc4:	beq	26f48 <__assert_fail@plt+0x15c28>
   26dc8:	cmp	r5, #36	; 0x24
   26dcc:	mvn	r0, #86	; 0x56
   26dd0:	add	r1, r7, #1
   26dd4:	mov	r8, #0
   26dd8:	mvngt	r0, #60	; 0x3c
   26ddc:	b	26e00 <__assert_fail@plt+0x15ae0>
   26de0:	sub	r2, r3, #48	; 0x30
   26de4:	cmp	r2, r5
   26de8:	bcs	26f48 <__assert_fail@plt+0x15c28>
   26dec:	strb	r2, [r9, r8]
   26df0:	add	r8, r8, #1
   26df4:	ldrb	r2, [r1], #1
   26df8:	cmp	r2, #0
   26dfc:	beq	26e9c <__assert_fail@plt+0x15b7c>
   26e00:	ldr	r7, [r4]
   26e04:	uxtb	r3, r2
   26e08:	add	r7, r7, r3, lsl #1
   26e0c:	ldrb	r7, [r7, #1]
   26e10:	tst	r7, #32
   26e14:	bne	26df4 <__assert_fail@plt+0x15ad4>
   26e18:	sub	r7, r2, #48	; 0x30
   26e1c:	uxtb	r7, r7
   26e20:	cmp	r7, #9
   26e24:	bls	26de0 <__assert_fail@plt+0x15ac0>
   26e28:	sub	r7, r2, #97	; 0x61
   26e2c:	uxtb	r7, r7
   26e30:	cmp	r7, #25
   26e34:	bhi	26e48 <__assert_fail@plt+0x15b28>
   26e38:	add	r2, r0, r3
   26e3c:	cmp	r2, r5
   26e40:	bcc	26dec <__assert_fail@plt+0x15acc>
   26e44:	b	26f48 <__assert_fail@plt+0x15c28>
   26e48:	sub	r2, r2, #65	; 0x41
   26e4c:	uxtb	r2, r2
   26e50:	cmp	r2, #25
   26e54:	bhi	26f48 <__assert_fail@plt+0x15c28>
   26e58:	sub	r2, r3, #55	; 0x37
   26e5c:	cmp	r2, r5
   26e60:	bcc	26dec <__assert_fail@plt+0x15acc>
   26e64:	b	26f48 <__assert_fail@plt+0x15c28>
   26e68:	ldrb	r0, [r6, r1]
   26e6c:	cmp	r0, #48	; 0x30
   26e70:	bne	26f6c <__assert_fail@plt+0x15c4c>
   26e74:	add	r0, r6, r1
   26e78:	ldrb	r1, [r0, #1]
   26e7c:	cmp	r1, #97	; 0x61
   26e80:	bgt	26f84 <__assert_fail@plt+0x15c64>
   26e84:	cmp	r1, #66	; 0x42
   26e88:	beq	26fa0 <__assert_fail@plt+0x15c80>
   26e8c:	cmp	r1, #88	; 0x58
   26e90:	beq	26f94 <__assert_fail@plt+0x15c74>
   26e94:	mov	r5, #8
   26e98:	b	26d98 <__assert_fail@plt+0x15a78>
   26e9c:	cmp	r8, #0
   26ea0:	beq	26f48 <__assert_fail@plt+0x15c28>
   26ea4:	cmp	r5, #63	; 0x3f
   26ea8:	bgt	26fac <__assert_fail@plt+0x15c8c>
   26eac:	sub	r0, r5, #2
   26eb0:	cmp	r0, #30
   26eb4:	bhi	27134 <__assert_fail@plt+0x15e14>
   26eb8:	add	r1, pc, #4
   26ebc:	mov	r4, #1
   26ec0:	ldr	pc, [r1, r0, lsl #2]
   26ec4:	strdeq	r6, [r2], -r0
   26ec8:	andeq	r7, r2, r4, lsr r1
   26ecc:	andeq	r6, r2, r0, asr #30
   26ed0:	andeq	r7, r2, r4, lsr r1
   26ed4:	andeq	r7, r2, r4, lsr r1
   26ed8:	andeq	r7, r2, r4, lsr r1
   26edc:	ldrdeq	r6, [r2], -r4
   26ee0:	andeq	r7, r2, r4, lsr r1
   26ee4:	andeq	r7, r2, r4, lsr r1
   26ee8:	andeq	r7, r2, r4, lsr r1
   26eec:	andeq	r7, r2, r4, lsr r1
   26ef0:	andeq	r7, r2, r4, lsr r1
   26ef4:	andeq	r7, r2, r4, lsr r1
   26ef8:	andeq	r7, r2, r4, lsr r1
   26efc:	andeq	r6, r2, ip, asr #31
   26f00:	andeq	r7, r2, r4, lsr r1
   26f04:	andeq	r7, r2, r4, lsr r1
   26f08:	andeq	r7, r2, r4, lsr r1
   26f0c:	andeq	r7, r2, r4, lsr r1
   26f10:	andeq	r7, r2, r4, lsr r1
   26f14:	andeq	r7, r2, r4, lsr r1
   26f18:	andeq	r7, r2, r4, lsr r1
   26f1c:	andeq	r7, r2, r4, lsr r1
   26f20:	andeq	r7, r2, r4, lsr r1
   26f24:	andeq	r7, r2, r4, lsr r1
   26f28:	andeq	r7, r2, r4, lsr r1
   26f2c:	andeq	r7, r2, r4, lsr r1
   26f30:	andeq	r7, r2, r4, lsr r1
   26f34:	andeq	r7, r2, r4, lsr r1
   26f38:	andeq	r7, r2, r4, lsr r1
   26f3c:	ldrdeq	r6, [r2], -ip
   26f40:	mov	r4, #2
   26f44:	b	26ff0 <__assert_fail@plt+0x15cd0>
   26f48:	movw	r0, #12580	; 0x3124
   26f4c:	ldr	r1, [sp, #4]
   26f50:	movt	r0, #4
   26f54:	ldr	r2, [r0]
   26f58:	mov	r0, r9
   26f5c:	blx	r2
   26f60:	mvn	r0, #0
   26f64:	mov	r4, #0
   26f68:	b	27274 <__assert_fail@plt+0x15f54>
   26f6c:	mov	r5, #10
   26f70:	cmp	r0, #0
   26f74:	bne	26d98 <__assert_fail@plt+0x15a78>
   26f78:	mvn	r0, #0
   26f7c:	mov	r4, #0
   26f80:	b	27278 <__assert_fail@plt+0x15f58>
   26f84:	cmp	r1, #98	; 0x62
   26f88:	beq	26fa0 <__assert_fail@plt+0x15c80>
   26f8c:	cmp	r1, #120	; 0x78
   26f90:	bne	26e94 <__assert_fail@plt+0x15b74>
   26f94:	add	r7, r0, #2
   26f98:	mov	r5, #16
   26f9c:	b	26d8c <__assert_fail@plt+0x15a6c>
   26fa0:	add	r7, r0, #2
   26fa4:	mov	r5, #2
   26fa8:	b	26d8c <__assert_fail@plt+0x15a6c>
   26fac:	cmp	r5, #64	; 0x40
   26fb0:	beq	26fe4 <__assert_fail@plt+0x15cc4>
   26fb4:	cmp	r5, #128	; 0x80
   26fb8:	beq	26fec <__assert_fail@plt+0x15ccc>
   26fbc:	cmp	r5, #256	; 0x100
   26fc0:	bne	27134 <__assert_fail@plt+0x15e14>
   26fc4:	mov	r4, #8
   26fc8:	b	26ff0 <__assert_fail@plt+0x15cd0>
   26fcc:	mov	r4, #4
   26fd0:	b	26ff0 <__assert_fail@plt+0x15cd0>
   26fd4:	mov	r4, #3
   26fd8:	b	26ff0 <__assert_fail@plt+0x15cd0>
   26fdc:	mov	r4, #5
   26fe0:	b	26ff0 <__assert_fail@plt+0x15cd0>
   26fe4:	mov	r4, #6
   26fe8:	b	26ff0 <__assert_fail@plt+0x15cd0>
   26fec:	mov	r4, #7
   26ff0:	ldr	r2, [sp, #8]
   26ff4:	mul	r0, r4, r8
   26ff8:	add	r0, r0, #31
   26ffc:	ldr	r1, [r2]
   27000:	lsr	ip, r0, #5
   27004:	cmp	r1, r0, lsr #5
   27008:	bge	27048 <__assert_fail@plt+0x15d28>
   2700c:	cmp	ip, #1
   27010:	mov	r5, ip
   27014:	mov	r7, ip
   27018:	movls	r5, #1
   2701c:	cmp	r1, #0
   27020:	beq	27050 <__assert_fail@plt+0x15d30>
   27024:	ldr	r6, [sp, #8]
   27028:	movw	r0, #12576	; 0x3120
   2702c:	lsl	r1, r1, #2
   27030:	lsl	r2, r5, #2
   27034:	movt	r0, #4
   27038:	ldr	r3, [r0]
   2703c:	ldr	r0, [r6, #8]
   27040:	blx	r3
   27044:	b	27060 <__assert_fail@plt+0x15d40>
   27048:	ldr	r0, [r2, #8]
   2704c:	b	2708c <__assert_fail@plt+0x15d6c>
   27050:	ldr	r1, [r6]
   27054:	lsl	r0, r5, #2
   27058:	blx	r1
   2705c:	ldr	r6, [sp, #8]
   27060:	str	r0, [r6, #8]
   27064:	str	r5, [r6]
   27068:	mov	ip, r7
   2706c:	ldr	r1, [r6, #4]
   27070:	cmp	r1, #0
   27074:	rsbmi	r1, r1, #0
   27078:	cmp	r1, r5
   2707c:	ble	2708c <__assert_fail@plt+0x15d6c>
   27080:	ldr	r2, [sp, #8]
   27084:	mov	r1, #0
   27088:	str	r1, [r2, #4]
   2708c:	sub	r2, r9, #1
   27090:	mov	r3, #0
   27094:	mov	r5, #0
   27098:	mov	r1, #0
   2709c:	b	270ac <__assert_fail@plt+0x15d8c>
   270a0:	cmp	r7, #0
   270a4:	mov	r8, r7
   270a8:	beq	270e0 <__assert_fail@plt+0x15dc0>
   270ac:	ldrb	r7, [r2, r8]
   270b0:	orr	r5, r5, r7, lsl r3
   270b4:	add	r3, r3, r4
   270b8:	sub	r7, r8, #1
   270bc:	cmp	r3, #32
   270c0:	bcc	270a0 <__assert_fail@plt+0x15d80>
   270c4:	str	r5, [r0, r1, lsl #2]
   270c8:	sub	r3, r3, #32
   270cc:	add	r1, r1, #1
   270d0:	ldrb	r5, [r2, r8]
   270d4:	sub	r6, r4, r3
   270d8:	lsr	r5, r5, r6
   270dc:	b	270a0 <__assert_fail@plt+0x15d80>
   270e0:	cmp	r5, #0
   270e4:	beq	27110 <__assert_fail@plt+0x15df0>
   270e8:	str	r5, [r0, r1, lsl #2]
   270ec:	add	r4, r1, #1
   270f0:	cmp	r4, ip
   270f4:	ble	27250 <__assert_fail@plt+0x15f30>
   270f8:	movw	r0, #4315	; 0x10db
   270fc:	movw	r1, #1996	; 0x7cc
   27100:	movw	r3, #4257	; 0x10a1
   27104:	movw	r2, #4408	; 0x1138
   27108:	movt	r0, #3
   2710c:	b	27298 <__assert_fail@plt+0x15f78>
   27110:	sub	r0, r0, #4
   27114:	mov	r4, r1
   27118:	cmp	r1, #1
   2711c:	blt	27248 <__assert_fail@plt+0x15f28>
   27120:	ldr	r2, [r0, r4, lsl #2]
   27124:	sub	r1, r4, #1
   27128:	cmp	r2, #0
   2712c:	beq	27114 <__assert_fail@plt+0x15df4>
   27130:	b	27248 <__assert_fail@plt+0x15f28>
   27134:	mvn	r0, #0
   27138:	mov	r2, r5
   2713c:	udiv	r1, r0, r5
   27140:	mov	r0, #1
   27144:	cmp	r1, r5
   27148:	bcc	27164 <__assert_fail@plt+0x15e44>
   2714c:	mov	r0, #1
   27150:	mov	r2, r5
   27154:	mul	r2, r2, r5
   27158:	add	r0, r0, #1
   2715c:	cmp	r2, r1
   27160:	bls	27154 <__assert_fail@plt+0x15e34>
   27164:	add	r1, r8, r0
   27168:	str	r2, [sp, #16]
   2716c:	str	r0, [sp, #12]
   27170:	sub	r1, r1, #1
   27174:	udiv	r4, r1, r0
   27178:	ldr	r0, [sp, #8]
   2717c:	ldr	r1, [r0]
   27180:	cmp	r4, r1
   27184:	ble	271c0 <__assert_fail@plt+0x15ea0>
   27188:	cmp	r4, #1
   2718c:	mov	r7, r4
   27190:	movle	r4, #1
   27194:	cmp	r1, #0
   27198:	beq	271cc <__assert_fail@plt+0x15eac>
   2719c:	ldr	r6, [sp, #8]
   271a0:	movw	r0, #12576	; 0x3120
   271a4:	lsl	r1, r1, #2
   271a8:	lsl	r2, r4, #2
   271ac:	movt	r0, #4
   271b0:	ldr	r3, [r0]
   271b4:	ldr	r0, [r6, #8]
   271b8:	blx	r3
   271bc:	b	271dc <__assert_fail@plt+0x15ebc>
   271c0:	ldr	r6, [r0, #8]
   271c4:	mov	r7, r4
   271c8:	b	2720c <__assert_fail@plt+0x15eec>
   271cc:	ldr	r1, [r6]
   271d0:	lsl	r0, r4, #2
   271d4:	blx	r1
   271d8:	ldr	r6, [sp, #8]
   271dc:	str	r0, [r6, #8]
   271e0:	str	r4, [r6]
   271e4:	mov	r1, r0
   271e8:	ldr	r0, [r6, #4]
   271ec:	mov	r6, r1
   271f0:	cmp	r0, #0
   271f4:	rsbmi	r0, r0, #0
   271f8:	cmp	r0, r4
   271fc:	ble	2720c <__assert_fail@plt+0x15eec>
   27200:	ldr	r1, [sp, #8]
   27204:	mov	r0, #0
   27208:	str	r0, [r1, #4]
   2720c:	add	r0, sp, #12
   27210:	mov	r1, r9
   27214:	mov	r2, r8
   27218:	mov	r3, r5
   2721c:	str	r0, [sp]
   27220:	mov	r0, r6
   27224:	bl	1a118 <__assert_fail@plt+0x8df8>
   27228:	cmp	r0, #0
   2722c:	ble	272a4 <__assert_fail@plt+0x15f84>
   27230:	mov	r4, r0
   27234:	sub	r0, r0, #1
   27238:	mov	ip, r7
   2723c:	ldr	r1, [r6, r0, lsl #2]
   27240:	cmp	r1, #0
   27244:	moveq	r4, r0
   27248:	cmp	r4, ip
   2724c:	bgt	270f8 <__assert_fail@plt+0x15dd8>
   27250:	movw	r0, #12580	; 0x3124
   27254:	ldr	r1, [sp, #4]
   27258:	movt	r0, #4
   2725c:	ldr	r2, [r0]
   27260:	mov	r0, r9
   27264:	blx	r2
   27268:	cmp	sl, #45	; 0x2d
   2726c:	mov	r0, #0
   27270:	rsbeq	r4, r4, #0
   27274:	ldr	r8, [sp, #8]
   27278:	str	r4, [r8, #4]
   2727c:	sub	sp, fp, #28
   27280:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   27284:	movw	r0, #4218	; 0x107a
   27288:	movw	r1, #1996	; 0x7cc
   2728c:	movw	r3, #4257	; 0x10a1
   27290:	movw	r2, #4320	; 0x10e0
   27294:	movt	r0, #3
   27298:	movt	r1, #3
   2729c:	movt	r3, #3
   272a0:	bl	11320 <__assert_fail@plt>
   272a4:	movw	r0, #4308	; 0x10d4
   272a8:	movw	r1, #1996	; 0x7cc
   272ac:	movw	r3, #4257	; 0x10a1
   272b0:	movw	r2, #4405	; 0x1135
   272b4:	movt	r0, #3
   272b8:	b	27298 <__assert_fail@plt+0x15f78>
   272bc:	movw	ip, #1992	; 0x7c8
   272c0:	mov	r3, #0
   272c4:	movt	ip, #3
   272c8:	str	r3, [r0]
   272cc:	stmib	r0, {r3, ip}
   272d0:	b	26d2c <__assert_fail@plt+0x15a0c>
   272d4:	push	{r4, r5, r6, sl, fp, lr}
   272d8:	add	fp, sp, #16
   272dc:	mov	r5, r0
   272e0:	mov	r0, #0
   272e4:	bl	2689c <__assert_fail@plt+0x1557c>
   272e8:	cmp	r0, #0
   272ec:	beq	27334 <__assert_fail@plt+0x16014>
   272f0:	mov	r4, r0
   272f4:	bl	11200 <strlen@plt>
   272f8:	mov	r6, r0
   272fc:	mov	r0, r4
   27300:	mov	r1, #1
   27304:	mov	r3, r5
   27308:	mov	r2, r6
   2730c:	bl	11140 <fwrite@plt>
   27310:	mov	r5, r0
   27314:	movw	r0, #12580	; 0x3124
   27318:	add	r1, r6, #1
   2731c:	movt	r0, #4
   27320:	ldr	r2, [r0]
   27324:	mov	r0, r4
   27328:	blx	r2
   2732c:	mov	r0, r5
   27330:	pop	{r4, r5, r6, sl, fp, pc}
   27334:	mov	r0, #0
   27338:	pop	{r4, r5, r6, sl, fp, pc}
   2733c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   27340:	add	fp, sp, #28
   27344:	sub	sp, sp, #4
   27348:	mov	lr, r0
   2734c:	ldr	r0, [fp, #12]
   27350:	cmp	r0, #0
   27354:	bne	2751c <__assert_fail@plt+0x161fc>
   27358:	cmn	r2, #1
   2735c:	mov	r8, r3
   27360:	mov	sl, r1
   27364:	cmpne	r2, #1
   27368:	bne	27528 <__assert_fail@plt+0x16208>
   2736c:	ldr	r5, [fp, #8]
   27370:	add	r0, r5, #1
   27374:	cmp	r0, #3
   27378:	bcs	27540 <__assert_fail@plt+0x16220>
   2737c:	cmp	r5, #0
   27380:	ldr	r7, [fp, #16]
   27384:	ldr	r1, [lr]
   27388:	mvneq	r5, #0
   2738c:	subs	r9, r5, r2
   27390:	lslne	r9, r8, #1
   27394:	cmp	r2, #1
   27398:	subeq	r0, sl, #1
   2739c:	rsbeq	r9, r9, #0
   273a0:	mlaeq	r7, r0, r8, r7
   273a4:	cmp	r5, #1
   273a8:	add	r0, r8, r7
   273ac:	subeq	r7, r0, #1
   273b0:	mul	r0, r8, sl
   273b4:	add	r0, r0, #3
   273b8:	cmp	r1, r0, lsr #2
   273bc:	lsr	r4, r0, #2
   273c0:	str	r4, [sp]
   273c4:	bge	273fc <__assert_fail@plt+0x160dc>
   273c8:	cmp	r4, #1
   273cc:	movls	r4, #1
   273d0:	cmp	r1, #0
   273d4:	beq	27474 <__assert_fail@plt+0x16154>
   273d8:	movw	r0, #12576	; 0x3120
   273dc:	lsl	r1, r1, #2
   273e0:	lsl	r2, r4, #2
   273e4:	mov	r6, lr
   273e8:	movt	r0, #4
   273ec:	ldr	r3, [r0]
   273f0:	ldr	r0, [lr, #8]
   273f4:	blx	r3
   273f8:	b	2748c <__assert_fail@plt+0x1616c>
   273fc:	ldr	r0, [lr, #8]
   27400:	cmp	sl, #0
   27404:	beq	274b8 <__assert_fail@plt+0x16198>
   27408:	rsb	r3, r5, #0
   2740c:	mov	ip, #0
   27410:	mov	r4, #0
   27414:	mov	r2, #0
   27418:	cmp	r8, #0
   2741c:	bne	27434 <__assert_fail@plt+0x16114>
   27420:	add	r7, r7, r9
   27424:	subs	sl, sl, #1
   27428:	beq	274c4 <__assert_fail@plt+0x161a4>
   2742c:	cmp	r8, #0
   27430:	beq	27420 <__assert_fail@plt+0x16100>
   27434:	mov	r5, r8
   27438:	b	27448 <__assert_fail@plt+0x16128>
   2743c:	add	r7, r7, r3
   27440:	subs	r5, r5, #1
   27444:	beq	27420 <__assert_fail@plt+0x16100>
   27448:	ldrb	r6, [r7]
   2744c:	lsl	r1, r4, #3
   27450:	add	r4, r4, #1
   27454:	cmp	r4, #4
   27458:	orr	r2, r2, r6, lsl r1
   2745c:	bne	2743c <__assert_fail@plt+0x1611c>
   27460:	str	r2, [r0, ip, lsl #2]
   27464:	add	ip, ip, #1
   27468:	mov	r2, #0
   2746c:	mov	r4, #0
   27470:	b	2743c <__assert_fail@plt+0x1611c>
   27474:	movw	r0, #12572	; 0x311c
   27478:	mov	r6, lr
   2747c:	movt	r0, #4
   27480:	ldr	r1, [r0]
   27484:	lsl	r0, r4, #2
   27488:	blx	r1
   2748c:	str	r0, [r6, #8]
   27490:	str	r4, [r6]
   27494:	mov	lr, r6
   27498:	ldr	r1, [r6, #4]
   2749c:	cmp	r1, #0
   274a0:	rsbmi	r1, r1, #0
   274a4:	cmp	r1, r4
   274a8:	movgt	r1, #0
   274ac:	strgt	r1, [lr, #4]
   274b0:	cmp	sl, #0
   274b4:	bne	27408 <__assert_fail@plt+0x160e8>
   274b8:	mov	r2, #0
   274bc:	mov	r4, #0
   274c0:	mov	ip, #0
   274c4:	cmp	r4, #0
   274c8:	ldr	r4, [sp]
   274cc:	add	r3, ip, #1
   274d0:	mov	r1, ip
   274d4:	movne	r1, r3
   274d8:	cmp	r1, r4
   274dc:	bne	27558 <__assert_fail@plt+0x16238>
   274e0:	cmp	r2, #0
   274e4:	beq	274f0 <__assert_fail@plt+0x161d0>
   274e8:	str	r2, [r0, ip, lsl #2]
   274ec:	b	27510 <__assert_fail@plt+0x161f0>
   274f0:	sub	r0, r0, #4
   274f4:	mov	r3, ip
   274f8:	cmp	ip, #1
   274fc:	blt	27510 <__assert_fail@plt+0x161f0>
   27500:	ldr	r1, [r0, r3, lsl #2]
   27504:	sub	ip, r3, #1
   27508:	cmp	r1, #0
   2750c:	beq	274f4 <__assert_fail@plt+0x161d4>
   27510:	str	r3, [lr, #4]
   27514:	sub	sp, fp, #28
   27518:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2751c:	movw	r0, #4327	; 0x10e7
   27520:	movt	r0, #3
   27524:	bl	21fb4 <__assert_fail@plt+0x10c94>
   27528:	movw	r0, #4360	; 0x1108
   2752c:	movw	r1, #1996	; 0x7cc
   27530:	movw	r3, #4386	; 0x1122
   27534:	movw	r2, #4468	; 0x1174
   27538:	movt	r0, #3
   2753c:	b	2756c <__assert_fail@plt+0x1624c>
   27540:	movw	r0, #4466	; 0x1172
   27544:	movw	r1, #1996	; 0x7cc
   27548:	movw	r3, #4386	; 0x1122
   2754c:	movw	r2, #4469	; 0x1175
   27550:	movt	r0, #3
   27554:	b	2756c <__assert_fail@plt+0x1624c>
   27558:	movw	r0, #4494	; 0x118e
   2755c:	movw	r1, #1996	; 0x7cc
   27560:	movw	r3, #4386	; 0x1122
   27564:	movw	r2, #4507	; 0x119b
   27568:	movt	r0, #3
   2756c:	movt	r1, #3
   27570:	movt	r3, #3
   27574:	bl	11320 <__assert_fail@plt>
   27578:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2757c:	add	fp, sp, #28
   27580:	sub	sp, sp, #4
   27584:	mov	lr, r1
   27588:	ldr	r1, [fp, #12]
   2758c:	cmp	r1, #0
   27590:	bne	2775c <__assert_fail@plt+0x1643c>
   27594:	mov	r4, r2
   27598:	cmn	r2, #1
   2759c:	mov	sl, r3
   275a0:	cmpne	r4, #1
   275a4:	bne	27768 <__assert_fail@plt+0x16448>
   275a8:	ldr	r5, [fp, #8]
   275ac:	add	r1, r5, #1
   275b0:	cmp	r1, #3
   275b4:	bcs	27780 <__assert_fail@plt+0x16460>
   275b8:	ldr	r9, [fp, #16]
   275bc:	cmp	sl, #0
   275c0:	ldr	r8, [r9, #4]
   275c4:	beq	27664 <__assert_fail@plt+0x16344>
   275c8:	cmp	r8, #0
   275cc:	beq	2768c <__assert_fail@plt+0x1636c>
   275d0:	ldr	r1, [r9, #8]
   275d4:	rsbmi	r8, r8, #0
   275d8:	add	r1, r1, r8, lsl #2
   275dc:	ldr	r1, [r1, #-4]
   275e0:	cmp	r1, #0
   275e4:	beq	27798 <__assert_fail@plt+0x16478>
   275e8:	add	r2, sl, r8, lsl #2
   275ec:	sub	r6, r2, #5
   275f0:	mov	r2, #0
   275f4:	lsr	r3, r1, #8
   275f8:	cmp	r2, r1, lsr #8
   275fc:	add	r6, r6, #1
   27600:	mov	r1, r3
   27604:	bne	275f4 <__assert_fail@plt+0x162d4>
   27608:	udiv	r1, r6, sl
   2760c:	cmp	r0, #0
   27610:	str	r1, [sp]
   27614:	bne	27638 <__assert_fail@plt+0x16318>
   27618:	ldr	r0, [sp]
   2761c:	movw	r1, #12572	; 0x311c
   27620:	mov	r7, lr
   27624:	movt	r1, #4
   27628:	ldr	r1, [r1]
   2762c:	mul	r0, r0, sl
   27630:	blx	r1
   27634:	mov	lr, r7
   27638:	cmp	r5, #0
   2763c:	mvneq	r5, #0
   27640:	subs	ip, r5, r4
   27644:	lslne	ip, sl, #1
   27648:	cmp	r4, #1
   2764c:	bne	27698 <__assert_fail@plt+0x16378>
   27650:	ldr	r1, [sp]
   27654:	rsb	ip, ip, #0
   27658:	sub	r1, r1, #1
   2765c:	mla	r2, r1, sl, r0
   27660:	b	2769c <__assert_fail@plt+0x1637c>
   27664:	mov	r1, #0
   27668:	cmp	r8, #0
   2766c:	str	r1, [sp]
   27670:	beq	27748 <__assert_fail@plt+0x16428>
   27674:	movw	r0, #4632	; 0x1218
   27678:	movw	r1, #1996	; 0x7cc
   2767c:	movw	r3, #4549	; 0x11c5
   27680:	movw	r2, #4528	; 0x11b0
   27684:	movt	r0, #3
   27688:	b	277dc <__assert_fail@plt+0x164bc>
   2768c:	mov	r1, #0
   27690:	str	r1, [sp]
   27694:	b	27748 <__assert_fail@plt+0x16428>
   27698:	mov	r2, r0
   2769c:	cmp	r6, sl
   276a0:	mov	r3, #0
   276a4:	mov	r6, #0
   276a8:	bcc	27734 <__assert_fail@plt+0x16414>
   276ac:	sub	r1, sl, #1
   276b0:	cmp	r5, #1
   276b4:	mov	r6, #0
   276b8:	mov	r4, #0
   276bc:	mov	r3, #0
   276c0:	addeq	r2, r2, r1
   276c4:	rsb	r1, r5, #0
   276c8:	mov	r5, #0
   276cc:	cmp	sl, #0
   276d0:	bne	276f0 <__assert_fail@plt+0x163d0>
   276d4:	ldr	r7, [sp]
   276d8:	add	r3, r3, #1
   276dc:	add	r2, r2, ip
   276e0:	cmp	r3, r7
   276e4:	bcs	27734 <__assert_fail@plt+0x16414>
   276e8:	cmp	sl, #0
   276ec:	beq	276d4 <__assert_fail@plt+0x163b4>
   276f0:	mov	r7, sl
   276f4:	cmp	r4, #0
   276f8:	beq	27718 <__assert_fail@plt+0x163f8>
   276fc:	strb	r5, [r2], r1
   27700:	subs	r7, r7, #1
   27704:	sub	r4, r4, #1
   27708:	lsr	r5, r5, #8
   2770c:	beq	276d4 <__assert_fail@plt+0x163b4>
   27710:	cmp	r4, #0
   27714:	bne	276fc <__assert_fail@plt+0x163dc>
   27718:	mov	r4, #4
   2771c:	cmp	r6, r8
   27720:	bge	276fc <__assert_fail@plt+0x163dc>
   27724:	ldr	r5, [r9, #8]
   27728:	ldr	r5, [r5, r6, lsl #2]
   2772c:	add	r6, r6, #1
   27730:	b	276fc <__assert_fail@plt+0x163dc>
   27734:	cmp	r6, r8
   27738:	bne	277b0 <__assert_fail@plt+0x16490>
   2773c:	ldr	r1, [sp]
   27740:	cmp	r3, r1
   27744:	bne	277c8 <__assert_fail@plt+0x164a8>
   27748:	cmp	lr, #0
   2774c:	ldrne	r1, [sp]
   27750:	strne	r1, [lr]
   27754:	sub	sp, fp, #28
   27758:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2775c:	movw	r0, #4516	; 0x11a4
   27760:	movt	r0, #3
   27764:	bl	21fb4 <__assert_fail@plt+0x10c94>
   27768:	movw	r0, #4360	; 0x1108
   2776c:	movw	r1, #1996	; 0x7cc
   27770:	movw	r3, #4549	; 0x11c5
   27774:	movw	r2, #4526	; 0x11ae
   27778:	movt	r0, #3
   2777c:	b	277dc <__assert_fail@plt+0x164bc>
   27780:	movw	r0, #4466	; 0x1172
   27784:	movw	r1, #1996	; 0x7cc
   27788:	movw	r3, #4549	; 0x11c5
   2778c:	movw	r2, #4527	; 0x11af
   27790:	movt	r0, #3
   27794:	b	277dc <__assert_fail@plt+0x164bc>
   27798:	movw	r0, #4661	; 0x1235
   2779c:	movw	r1, #1996	; 0x7cc
   277a0:	movw	r3, #4549	; 0x11c5
   277a4:	movw	r2, #4548	; 0x11c4
   277a8:	movt	r0, #3
   277ac:	b	277dc <__assert_fail@plt+0x164bc>
   277b0:	movw	r0, #4671	; 0x123f
   277b4:	movw	r1, #1996	; 0x7cc
   277b8:	movw	r3, #4549	; 0x11c5
   277bc:	movw	r2, #4611	; 0x1203
   277c0:	movt	r0, #3
   277c4:	b	277dc <__assert_fail@plt+0x164bc>
   277c8:	movw	r0, #4679	; 0x1247
   277cc:	movw	r1, #1996	; 0x7cc
   277d0:	movw	r3, #4549	; 0x11c5
   277d4:	movw	r2, #4612	; 0x1204
   277d8:	movt	r0, #3
   277dc:	movt	r1, #3
   277e0:	movt	r3, #3
   277e4:	bl	11320 <__assert_fail@plt>
   277e8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   277ec:	add	fp, sp, #28
   277f0:	sub	sp, sp, #4
   277f4:	cmp	r1, #0
   277f8:	beq	278b8 <__assert_fail@plt+0x16598>
   277fc:	mov	lr, r0
   27800:	mov	r0, #0
   27804:	ldm	r2, {r4, ip}
   27808:	ldr	r5, [r2, #12]
   2780c:	rsb	r8, r4, #32
   27810:	lsr	r6, r1, r8
   27814:	lsr	r9, r5, #16
   27818:	uxth	r5, r5
   2781c:	lsr	r7, r6, #16
   27820:	uxth	r6, r6
   27824:	mul	sl, r6, r9
   27828:	mul	r6, r6, r5
   2782c:	mla	sl, r7, r5, sl
   27830:	mul	r5, r7, r5
   27834:	mul	r7, r7, r9
   27838:	add	r3, sl, r6, lsr #16
   2783c:	cmp	r3, r5
   27840:	lsr	r5, r3, #16
   27844:	pkhbt	r3, r6, r3, lsl #16
   27848:	add	r5, r5, r1, lsr r8
   2784c:	addcc	r7, r7, #65536	; 0x10000
   27850:	adds	r3, r3, r1, lsl r4
   27854:	add	r5, r5, #1
   27858:	adc	r6, r5, r7
   2785c:	mul	r5, r6, ip
   27860:	rsb	r5, r5, r1, lsl r4
   27864:	mov	r1, #0
   27868:	cmp	r5, r3
   2786c:	mvnhi	r1, #0
   27870:	and	r3, ip, r1
   27874:	add	r7, r3, r5
   27878:	mvn	r3, #0
   2787c:	subs	r5, r7, ip
   27880:	movcc	r5, r7
   27884:	tst	r5, r3, lsr r8
   27888:	bne	278c4 <__assert_fail@plt+0x165a4>
   2788c:	lsr	r3, r5, r4
   27890:	cmp	r7, ip
   27894:	add	r1, r6, r1
   27898:	strb	r3, [lr, r0]
   2789c:	mov	r3, #0
   278a0:	movwcs	r3, #1
   278a4:	add	r0, r0, #1
   278a8:	adds	r1, r1, r3
   278ac:	bne	27804 <__assert_fail@plt+0x164e4>
   278b0:	sub	sp, fp, #28
   278b4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   278b8:	mov	r0, #0
   278bc:	sub	sp, fp, #28
   278c0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   278c4:	movw	r0, #4945	; 0x1351
   278c8:	movw	r1, #1996	; 0x7cc
   278cc:	movw	r3, #5004	; 0x138c
   278d0:	movw	r2, #1259	; 0x4eb
   278d4:	movt	r0, #3
   278d8:	movt	r1, #3
   278dc:	movt	r3, #3
   278e0:	bl	11320 <__assert_fail@plt>
   278e4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   278e8:	add	fp, sp, #28
   278ec:	sub	sp, sp, #60	; 0x3c
   278f0:	ldr	r6, [fp, #12]
   278f4:	cmp	r6, #2
   278f8:	ble	27c68 <__assert_fail@plt+0x16948>
   278fc:	cmp	r2, r6
   27900:	blt	27c80 <__assert_fail@plt+0x16960>
   27904:	ldr	r5, [fp, #8]
   27908:	sub	r7, r6, #1
   2790c:	str	r7, [fp, #-40]	; 0xffffffd8
   27910:	ldr	r4, [r5, r7, lsl #2]
   27914:	cmp	r4, #0
   27918:	bpl	27c98 <__assert_fail@plt+0x16978>
   2791c:	sub	r7, r6, #2
   27920:	ldr	lr, [fp, #16]
   27924:	add	ip, r1, r2, lsl #2
   27928:	sub	r8, r2, r6
   2792c:	str	r1, [sp, #28]
   27930:	str	r0, [sp, #24]
   27934:	str	r4, [fp, #-32]	; 0xffffffe0
   27938:	ldr	r5, [r5, r7, lsl #2]
   2793c:	str	r7, [sp, #20]
   27940:	rsb	r7, r4, #0
   27944:	str	r7, [sp]
   27948:	lsr	r2, r5, #16
   2794c:	str	r5, [fp, #-36]	; 0xffffffdc
   27950:	str	r2, [sp, #16]
   27954:	uxth	r2, r5
   27958:	str	r2, [sp, #12]
   2795c:	lsr	r2, lr, #16
   27960:	str	r2, [sp, #8]
   27964:	uxth	r2, lr
   27968:	str	r2, [sp, #4]
   2796c:	b	27998 <__assert_fail@plt+0x16678>
   27970:	ldr	r0, [sp, #24]
   27974:	ldr	r4, [fp, #-32]	; 0xffffffe0
   27978:	ldr	r2, [sp, #44]	; 0x2c
   2797c:	cmp	r0, #0
   27980:	sub	ip, ip, #4
   27984:	strne	r2, [r0, r8, lsl #2]
   27988:	sub	r2, r8, #1
   2798c:	cmp	r8, #0
   27990:	mov	r8, r2
   27994:	ble	27c58 <__assert_fail@plt+0x16938>
   27998:	ldr	r2, [fp, #-40]	; 0xffffffd8
   2799c:	cmp	r3, r4
   279a0:	add	lr, r8, r2
   279a4:	ldreq	r2, [fp, #-36]	; 0xffffffdc
   279a8:	ldr	r9, [r1, lr, lsl #2]
   279ac:	cmpeq	r9, r2
   279b0:	beq	27ab0 <__assert_fail@plt+0x16790>
   279b4:	ldr	r0, [sp, #8]
   279b8:	uxth	r6, r3
   279bc:	ldr	r4, [sp, #4]
   279c0:	lsr	r7, r3, #16
   279c4:	ldr	lr, [sp, #12]
   279c8:	mul	r2, r6, r0
   279cc:	mul	r5, r6, r4
   279d0:	mul	r6, r7, r4
   279d4:	mla	r2, r7, r4, r2
   279d8:	mul	r7, r7, r0
   279dc:	ldr	r0, [sp, #16]
   279e0:	add	r2, r2, r5, lsr #16
   279e4:	cmp	r2, r6
   279e8:	add	r3, r3, r2, lsr #16
   279ec:	pkhbt	r2, r5, r2, lsl #16
   279f0:	addcc	r7, r7, #65536	; 0x10000
   279f4:	adds	sl, r2, r9
   279f8:	adc	r2, r3, r7
   279fc:	add	r3, r3, r7
   27a00:	lsr	r4, r2, #16
   27a04:	sbc	r7, r3, #0
   27a08:	ldr	r3, [fp, #-32]	; 0xffffffe0
   27a0c:	uxth	r5, r2
   27a10:	mul	r6, r4, lr
   27a14:	mul	r4, r4, r0
   27a18:	mul	lr, r5, lr
   27a1c:	mla	r6, r5, r0, r6
   27a20:	mul	r5, r5, r0
   27a24:	sub	r0, r9, r3
   27a28:	mls	r0, r2, r3, r0
   27a2c:	add	r6, r6, lr, lsr #16
   27a30:	cmp	r6, r5
   27a34:	sub	r0, r0, r6, lsr #16
   27a38:	pkhbt	r6, lr, r6, lsl #16
   27a3c:	mov	r5, #0
   27a40:	addcc	r4, r4, #65536	; 0x10000
   27a44:	sub	r0, r0, r4
   27a48:	ldr	r4, [sp, #20]
   27a4c:	add	r9, r8, r4
   27a50:	ldr	r4, [fp, #-36]	; 0xffffffdc
   27a54:	ldr	r1, [r1, r9, lsl #2]
   27a58:	str	r9, [sp, #40]	; 0x28
   27a5c:	cmp	r1, r4
   27a60:	sub	r1, r1, r4
   27a64:	subcc	r0, r0, #1
   27a68:	cmp	r1, r6
   27a6c:	sub	r1, r1, r6
   27a70:	subcc	r0, r0, #1
   27a74:	cmp	r0, sl
   27a78:	mvncs	r5, #0
   27a7c:	and	lr, r3, r5
   27a80:	and	r5, r4, r5
   27a84:	adds	r5, r5, r1
   27a88:	mov	r1, r3
   27a8c:	adc	r6, lr, r0
   27a90:	cmp	r0, sl
   27a94:	movcc	r7, r2
   27a98:	cmp	r6, r1
   27a9c:	add	r3, r7, #1
   27aa0:	bcs	27b24 <__assert_fail@plt+0x16804>
   27aa4:	ldr	r2, [fp, #12]
   27aa8:	ldr	r7, [fp, #8]
   27aac:	b	27b3c <__assert_fail@plt+0x1681c>
   27ab0:	ldr	r6, [fp, #12]
   27ab4:	ldr	r4, [fp, #8]
   27ab8:	mov	r2, #0
   27abc:	ldr	r3, [r4], #4
   27ac0:	lsr	r7, r3, #16
   27ac4:	lsl	r7, r7, #16
   27ac8:	sub	r7, r7, r3, lsr #16
   27acc:	uxth	r3, r3
   27ad0:	rsb	r3, r3, r3, lsl #16
   27ad4:	add	r5, r7, r3
   27ad8:	add	r5, r5, r3, lsr #16
   27adc:	pkhbt	r3, r3, r5, lsl #16
   27ae0:	cmp	r5, r7
   27ae4:	addcc	r7, r7, #65536	; 0x10000
   27ae8:	adds	sl, r3, r2
   27aec:	ldr	r3, [ip, -r6, lsl #2]
   27af0:	adc	r9, r7, r5, lsr #16
   27af4:	sub	r2, r3, sl
   27af8:	str	r2, [ip, -r6, lsl #2]
   27afc:	add	r2, r7, r5, lsr #16
   27b00:	adc	r2, r2, #1
   27b04:	cmp	r3, sl
   27b08:	movcs	r2, r9
   27b0c:	subs	r6, r6, #1
   27b10:	bne	27abc <__assert_fail@plt+0x1679c>
   27b14:	ldr	r3, [r1, lr, lsl #2]
   27b18:	ldr	r4, [fp, #-32]	; 0xffffffe0
   27b1c:	mvn	r2, #0
   27b20:	b	2797c <__assert_fail@plt+0x1665c>
   27b24:	ldr	r2, [fp, #12]
   27b28:	ldr	r7, [fp, #8]
   27b2c:	cmp	r5, r4
   27b30:	bcs	27b44 <__assert_fail@plt+0x16824>
   27b34:	cmp	r6, r1
   27b38:	bhi	27b44 <__assert_fail@plt+0x16824>
   27b3c:	str	r5, [sp, #32]
   27b40:	b	27b60 <__assert_fail@plt+0x16840>
   27b44:	ldr	r0, [sp]
   27b48:	cmp	r5, r4
   27b4c:	sub	r5, r5, r4
   27b50:	add	r3, r3, #1
   27b54:	str	r5, [sp, #32]
   27b58:	subcc	r0, r0, #1
   27b5c:	add	r6, r0, r6
   27b60:	str	r6, [sp, #36]	; 0x24
   27b64:	uxth	sl, r3
   27b68:	lsr	r9, r3, #16
   27b6c:	mov	r1, #0
   27b70:	mov	r0, r2
   27b74:	str	r3, [sp, #44]	; 0x2c
   27b78:	ldr	r5, [r7], #4
   27b7c:	ldr	r2, [ip, -r0, lsl #2]
   27b80:	uxth	r6, r5
   27b84:	lsr	r5, r5, #16
   27b88:	mul	lr, r5, sl
   27b8c:	mul	r3, r6, r9
   27b90:	mul	r6, r6, sl
   27b94:	mla	r3, r5, sl, r3
   27b98:	mul	r5, r5, r9
   27b9c:	add	r3, r3, r6, lsr #16
   27ba0:	pkhbt	r6, r6, r3, lsl #16
   27ba4:	cmp	r3, lr
   27ba8:	addcc	r5, r5, #65536	; 0x10000
   27bac:	adds	r6, r6, r1
   27bb0:	sub	r1, r2, r6
   27bb4:	adc	r4, r5, r3, lsr #16
   27bb8:	str	r1, [ip, -r0, lsl #2]
   27bbc:	add	r1, r5, r3, lsr #16
   27bc0:	sub	r0, r0, #1
   27bc4:	adc	r1, r1, #1
   27bc8:	cmp	r2, r6
   27bcc:	movcs	r1, r4
   27bd0:	cmp	r0, #2
   27bd4:	bne	27b78 <__assert_fail@plt+0x16858>
   27bd8:	ldr	r0, [sp, #32]
   27bdc:	ldr	r2, [sp, #40]	; 0x28
   27be0:	subs	r0, r0, r1
   27be4:	ldr	r1, [sp, #28]
   27be8:	str	r0, [r1, r2, lsl #2]
   27bec:	ldr	r2, [sp, #36]	; 0x24
   27bf0:	mov	r0, #0
   27bf4:	movwcc	r0, #1
   27bf8:	subs	r3, r2, r0
   27bfc:	bcs	27970 <__assert_fail@plt+0x16650>
   27c00:	ldr	r4, [fp, #8]
   27c04:	ldr	r2, [fp, #12]
   27c08:	ldr	r0, [sp, #24]
   27c0c:	mov	r6, #0
   27c10:	mov	r9, #0
   27c14:	ldr	r7, [ip, -r2, lsl #2]
   27c18:	ldr	lr, [r4], #4
   27c1c:	adds	r5, r7, r6
   27c20:	adds	lr, r5, lr
   27c24:	adc	r5, r9, #0
   27c28:	adds	r6, r7, r6
   27c2c:	str	lr, [ip, -r2, lsl #2]
   27c30:	sub	r2, r2, #1
   27c34:	adc	r6, r5, #0
   27c38:	cmp	r2, #1
   27c3c:	bne	27c14 <__assert_fail@plt+0x168f4>
   27c40:	ldr	r4, [fp, #-32]	; 0xffffffe0
   27c44:	add	r2, r3, r4
   27c48:	add	r3, r2, r6
   27c4c:	ldr	r2, [sp, #44]	; 0x2c
   27c50:	sub	r2, r2, #1
   27c54:	b	2797c <__assert_fail@plt+0x1665c>
   27c58:	ldr	r0, [fp, #-40]	; 0xffffffd8
   27c5c:	str	r3, [r1, r0, lsl #2]
   27c60:	sub	sp, fp, #28
   27c64:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   27c68:	movw	r0, #6085	; 0x17c5
   27c6c:	movw	r1, #1996	; 0x7cc
   27c70:	movw	r3, #6092	; 0x17cc
   27c74:	movw	r2, #1057	; 0x421
   27c78:	movt	r0, #3
   27c7c:	b	27cac <__assert_fail@plt+0x1698c>
   27c80:	movw	r0, #5393	; 0x1511
   27c84:	movw	r1, #1996	; 0x7cc
   27c88:	movw	r3, #6092	; 0x17cc
   27c8c:	movw	r2, #1058	; 0x422
   27c90:	movt	r0, #3
   27c94:	b	27cac <__assert_fail@plt+0x1698c>
   27c98:	movw	r0, #6183	; 0x1827
   27c9c:	movw	r1, #1996	; 0x7cc
   27ca0:	movw	r3, #6092	; 0x17cc
   27ca4:	movw	r2, #1063	; 0x427
   27ca8:	movt	r0, #3
   27cac:	movt	r1, #3
   27cb0:	movt	r3, #3
   27cb4:	bl	11320 <__assert_fail@plt>
   27cb8:	push	{r4, r5, fp, lr}
   27cbc:	add	fp, sp, #8
   27cc0:	cmp	r0, #0
   27cc4:	beq	27d58 <__assert_fail@plt+0x16a38>
   27cc8:	mov	r1, #47	; 0x2f
   27ccc:	mov	r4, r0
   27cd0:	bl	112d8 <strrchr@plt>
   27cd4:	cmp	r0, #0
   27cd8:	mov	r5, r4
   27cdc:	addne	r5, r0, #1
   27ce0:	sub	r0, r5, r4
   27ce4:	cmp	r0, #7
   27ce8:	blt	27d3c <__assert_fail@plt+0x16a1c>
   27cec:	movw	r1, #6820	; 0x1aa4
   27cf0:	sub	r0, r5, #7
   27cf4:	mov	r2, #7
   27cf8:	movt	r1, #3
   27cfc:	bl	11308 <strncmp@plt>
   27d00:	cmp	r0, #0
   27d04:	bne	27d3c <__assert_fail@plt+0x16a1c>
   27d08:	movw	r1, #6828	; 0x1aac
   27d0c:	mov	r0, r5
   27d10:	mov	r2, #3
   27d14:	movt	r1, #3
   27d18:	bl	11308 <strncmp@plt>
   27d1c:	cmp	r0, #0
   27d20:	beq	27d2c <__assert_fail@plt+0x16a0c>
   27d24:	mov	r4, r5
   27d28:	b	27d3c <__assert_fail@plt+0x16a1c>
   27d2c:	movw	r0, #12648	; 0x3168
   27d30:	add	r4, r5, #3
   27d34:	movt	r0, #4
   27d38:	str	r4, [r0]
   27d3c:	movw	r0, #12652	; 0x316c
   27d40:	movt	r0, #4
   27d44:	str	r4, [r0]
   27d48:	movw	r0, #12704	; 0x31a0
   27d4c:	movt	r0, #4
   27d50:	str	r4, [r0]
   27d54:	pop	{r4, r5, fp, pc}
   27d58:	movw	r0, #12664	; 0x3178
   27d5c:	mov	r1, #55	; 0x37
   27d60:	mov	r2, #1
   27d64:	movt	r0, #4
   27d68:	ldr	r3, [r0]
   27d6c:	movw	r0, #6764	; 0x1a6c
   27d70:	movt	r0, #3
   27d74:	bl	11140 <fwrite@plt>
   27d78:	bl	11314 <abort@plt>
   27d7c:	push	{r4, r5, r6, sl, fp, lr}
   27d80:	add	fp, sp, #16
   27d84:	sub	sp, sp, #8
   27d88:	mov	r4, r0
   27d8c:	mov	r0, #0
   27d90:	mov	r2, #5
   27d94:	mov	r1, r4
   27d98:	bl	110ec <dcgettext@plt>
   27d9c:	cmp	r0, r4
   27da0:	beq	27dc0 <__assert_fail@plt+0x16aa0>
   27da4:	mov	r1, r4
   27da8:	mov	r5, r0
   27dac:	bl	27e14 <__assert_fail@plt+0x16af4>
   27db0:	cmp	r0, #0
   27db4:	beq	27dc8 <__assert_fail@plt+0x16aa8>
   27db8:	mov	r6, r5
   27dbc:	b	27e08 <__assert_fail@plt+0x16ae8>
   27dc0:	mov	r6, r4
   27dc4:	b	27e08 <__assert_fail@plt+0x16ae8>
   27dc8:	mov	r0, r5
   27dcc:	bl	11200 <strlen@plt>
   27dd0:	mov	r6, r0
   27dd4:	mov	r0, r4
   27dd8:	bl	11200 <strlen@plt>
   27ddc:	add	r0, r6, r0
   27de0:	add	r0, r0, #4
   27de4:	bl	2acb4 <__assert_fail@plt+0x19994>
   27de8:	movw	r3, #6832	; 0x1ab0
   27dec:	mov	r1, #1
   27df0:	mvn	r2, #0
   27df4:	mov	r6, r0
   27df8:	str	r5, [sp]
   27dfc:	str	r4, [sp, #4]
   27e00:	movt	r3, #3
   27e04:	bl	11230 <__sprintf_chk@plt>
   27e08:	mov	r0, r6
   27e0c:	sub	sp, fp, #16
   27e10:	pop	{r4, r5, r6, sl, fp, pc}
   27e14:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   27e18:	add	fp, sp, #28
   27e1c:	sub	sp, sp, #124	; 0x7c
   27e20:	mov	r4, r0
   27e24:	mov	r0, r1
   27e28:	mov	r1, #2
   27e2c:	bl	2a338 <__assert_fail@plt+0x19018>
   27e30:	mov	sl, r0
   27e34:	ldrb	r0, [r4]
   27e38:	cmp	r0, #0
   27e3c:	beq	280b8 <__assert_fail@plt+0x16d98>
   27e40:	add	r5, sp, #12
   27e44:	add	r6, sp, #68	; 0x44
   27e48:	mov	r9, #0
   27e4c:	add	r8, r6, #4
   27e50:	add	r0, r5, #4
   27e54:	str	r0, [sp, #4]
   27e58:	str	r8, [sp]
   27e5c:	b	27e74 <__assert_fail@plt+0x16b54>
   27e60:	ldr	r0, [sp, #88]	; 0x58
   27e64:	add	r4, r7, r0
   27e68:	ldrb	r0, [r4]
   27e6c:	cmp	r0, #0
   27e70:	beq	280b8 <__assert_fail@plt+0x16d98>
   27e74:	mov	r0, r4
   27e78:	mov	r1, sl
   27e7c:	bl	2b904 <__assert_fail@plt+0x1a5e4>
   27e80:	cmp	r0, #0
   27e84:	beq	280b8 <__assert_fail@plt+0x16d98>
   27e88:	mov	r7, r0
   27e8c:	bl	11158 <__ctype_get_mb_cur_max@plt>
   27e90:	cmp	r0, #2
   27e94:	bcc	27f00 <__assert_fail@plt+0x16be0>
   27e98:	mov	r0, #1
   27e9c:	cmp	r4, r7
   27ea0:	strb	r9, [sp, #68]	; 0x44
   27ea4:	str	r4, [sp, #84]	; 0x54
   27ea8:	str	r9, [r8]
   27eac:	str	r9, [r8, #4]
   27eb0:	strb	r9, [sp, #80]	; 0x50
   27eb4:	str	r0, [sp, #8]
   27eb8:	bcc	27edc <__assert_fail@plt+0x16bbc>
   27ebc:	b	27f9c <__assert_fail@plt+0x16c7c>
   27ec0:	strb	r9, [sp, #80]	; 0x50
   27ec4:	ldr	r2, [sp, #84]	; 0x54
   27ec8:	ldr	r3, [sp, #88]	; 0x58
   27ecc:	add	r2, r2, r3
   27ed0:	cmp	r2, r7
   27ed4:	str	r2, [sp, #84]	; 0x54
   27ed8:	bcs	27f84 <__assert_fail@plt+0x16c64>
   27edc:	mov	r0, r6
   27ee0:	bl	2c390 <__assert_fail@plt+0x1b070>
   27ee4:	ldrb	r1, [sp, #92]	; 0x5c
   27ee8:	ldr	r0, [sp, #96]	; 0x60
   27eec:	cmp	r1, #0
   27ef0:	beq	27ec0 <__assert_fail@plt+0x16ba0>
   27ef4:	cmp	r0, #0
   27ef8:	bne	27ec0 <__assert_fail@plt+0x16ba0>
   27efc:	b	280dc <__assert_fail@plt+0x16dbc>
   27f00:	cmp	r4, r7
   27f04:	mov	r8, #1
   27f08:	mov	r4, #1
   27f0c:	bcs	27f2c <__assert_fail@plt+0x16c0c>
   27f10:	bl	111d0 <__ctype_b_loc@plt>
   27f14:	ldrb	r1, [r7, #-1]
   27f18:	ldr	r0, [r0]
   27f1c:	ldrb	r0, [r0, r1, lsl #1]
   27f20:	mov	r1, #1
   27f24:	and	r0, r0, #8
   27f28:	eor	r4, r1, r0, lsr #3
   27f2c:	mov	r0, sl
   27f30:	mov	r5, sl
   27f34:	bl	11200 <strlen@plt>
   27f38:	ldrb	sl, [r7, r0]
   27f3c:	cmp	sl, #0
   27f40:	beq	27f5c <__assert_fail@plt+0x16c3c>
   27f44:	bl	111d0 <__ctype_b_loc@plt>
   27f48:	ldr	r0, [r0]
   27f4c:	mov	r1, #1
   27f50:	ldrb	r0, [r0, sl, lsl #1]
   27f54:	and	r0, r0, #8
   27f58:	eor	r8, r1, r0, lsr #3
   27f5c:	tst	r4, r8
   27f60:	bne	280d0 <__assert_fail@plt+0x16db0>
   27f64:	ldrb	r0, [r7], #1
   27f68:	ldr	r8, [sp]
   27f6c:	mov	sl, r5
   27f70:	add	r5, sp, #12
   27f74:	mov	r4, r7
   27f78:	cmp	r0, #0
   27f7c:	bne	27e68 <__assert_fail@plt+0x16b48>
   27f80:	b	280b8 <__assert_fail@plt+0x16d98>
   27f84:	cmp	r1, #0
   27f88:	beq	27f9c <__assert_fail@plt+0x16c7c>
   27f8c:	bl	11224 <iswalnum@plt>
   27f90:	clz	r0, r0
   27f94:	lsr	r0, r0, #5
   27f98:	str	r0, [sp, #8]
   27f9c:	ldr	r0, [sp, #4]
   27fa0:	strb	r9, [sp, #68]	; 0x44
   27fa4:	str	r7, [sp, #84]	; 0x54
   27fa8:	strb	r9, [sp, #12]
   27fac:	str	sl, [sp, #28]
   27fb0:	str	r9, [r8]
   27fb4:	str	r9, [r8, #4]
   27fb8:	strb	r9, [sp, #80]	; 0x50
   27fbc:	str	r9, [r0]
   27fc0:	str	r9, [r0, #4]
   27fc4:	strb	r9, [sp, #24]
   27fc8:	b	27ff4 <__assert_fail@plt+0x16cd4>
   27fcc:	strb	r9, [sp, #80]	; 0x50
   27fd0:	strb	r9, [sp, #24]
   27fd4:	ldr	r0, [sp, #84]	; 0x54
   27fd8:	ldr	r1, [sp, #88]	; 0x58
   27fdc:	add	r0, r0, r1
   27fe0:	ldr	r1, [sp, #32]
   27fe4:	str	r0, [sp, #84]	; 0x54
   27fe8:	ldr	r0, [sp, #28]
   27fec:	add	r0, r0, r1
   27ff0:	str	r0, [sp, #28]
   27ff4:	mov	r0, r5
   27ff8:	bl	2c390 <__assert_fail@plt+0x1b070>
   27ffc:	ldrb	r0, [sp, #36]	; 0x24
   28000:	cmp	r0, #0
   28004:	beq	28014 <__assert_fail@plt+0x16cf4>
   28008:	ldr	r0, [sp, #40]	; 0x28
   2800c:	cmp	r0, #0
   28010:	beq	28038 <__assert_fail@plt+0x16d18>
   28014:	mov	r0, r6
   28018:	bl	2c390 <__assert_fail@plt+0x1b070>
   2801c:	ldrb	r0, [sp, #92]	; 0x5c
   28020:	cmp	r0, #0
   28024:	beq	27fcc <__assert_fail@plt+0x16cac>
   28028:	ldr	r0, [sp, #96]	; 0x60
   2802c:	cmp	r0, #0
   28030:	bne	27fcc <__assert_fail@plt+0x16cac>
   28034:	b	280dc <__assert_fail@plt+0x16dbc>
   28038:	mov	r0, r6
   2803c:	bl	2c390 <__assert_fail@plt+0x1b070>
   28040:	ldrb	r0, [sp, #92]	; 0x5c
   28044:	mov	r4, #1
   28048:	mov	r1, #1
   2804c:	cmp	r0, #0
   28050:	beq	28070 <__assert_fail@plt+0x16d50>
   28054:	ldr	r0, [sp, #96]	; 0x60
   28058:	mov	r1, #1
   2805c:	cmp	r0, #0
   28060:	beq	28070 <__assert_fail@plt+0x16d50>
   28064:	bl	11224 <iswalnum@plt>
   28068:	clz	r0, r0
   2806c:	lsr	r1, r0, #5
   28070:	ldr	r0, [sp, #8]
   28074:	tst	r0, r1
   28078:	bne	280bc <__assert_fail@plt+0x16d9c>
   2807c:	mov	r4, #0
   28080:	mov	r0, r6
   28084:	strb	r4, [sp, #68]	; 0x44
   28088:	str	r7, [sp, #84]	; 0x54
   2808c:	str	r4, [r8]
   28090:	str	r4, [r8, #4]
   28094:	strb	r4, [sp, #80]	; 0x50
   28098:	bl	2c390 <__assert_fail@plt+0x1b070>
   2809c:	ldrb	r0, [sp, #92]	; 0x5c
   280a0:	cmp	r0, #0
   280a4:	beq	27e60 <__assert_fail@plt+0x16b40>
   280a8:	ldr	r0, [sp, #96]	; 0x60
   280ac:	cmp	r0, #0
   280b0:	bne	27e60 <__assert_fail@plt+0x16b40>
   280b4:	b	280bc <__assert_fail@plt+0x16d9c>
   280b8:	mov	r4, #0
   280bc:	mov	r0, sl
   280c0:	bl	184a0 <__assert_fail@plt+0x7180>
   280c4:	mov	r0, r4
   280c8:	sub	sp, fp, #28
   280cc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   280d0:	mov	r4, #1
   280d4:	mov	sl, r5
   280d8:	b	280bc <__assert_fail@plt+0x16d9c>
   280dc:	bl	11314 <abort@plt>
   280e0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   280e4:	add	fp, sp, #28
   280e8:	sub	sp, sp, #12
   280ec:	mov	r8, r0
   280f0:	mov	r5, r1
   280f4:	mov	r0, #0
   280f8:	mov	r2, #5
   280fc:	mov	r7, #0
   28100:	mov	r1, r8
   28104:	bl	110ec <dcgettext@plt>
   28108:	mov	r4, r0
   2810c:	bl	2b630 <__assert_fail@plt+0x1a310>
   28110:	movw	r1, #6840	; 0x1ab8
   28114:	mov	r6, r0
   28118:	movt	r1, #3
   2811c:	bl	2b3b8 <__assert_fail@plt+0x1a098>
   28120:	cmp	r0, #0
   28124:	beq	281d8 <__assert_fail@plt+0x16eb8>
   28128:	str	r4, [sp, #8]
   2812c:	movw	r4, #6840	; 0x1ab8
   28130:	mov	r0, r5
   28134:	mov	r2, r6
   28138:	movt	r4, #3
   2813c:	mov	r1, r4
   28140:	bl	2b2ac <__assert_fail@plt+0x19f8c>
   28144:	mov	sl, r0
   28148:	mov	r0, r6
   2814c:	bl	11200 <strlen@plt>
   28150:	mov	r7, r0
   28154:	add	r0, r0, #11
   28158:	bl	2acb4 <__assert_fail@plt+0x19994>
   2815c:	mov	r1, r6
   28160:	mov	r2, r7
   28164:	mov	r9, r0
   28168:	bl	110d4 <memcpy@plt>
   2816c:	movw	r0, #6848	; 0x1ac0
   28170:	movw	r1, #18764	; 0x494c
   28174:	mov	r2, r9
   28178:	movt	r0, #3
   2817c:	movt	r1, #84	; 0x54
   28180:	vldr	d16, [r0]
   28184:	add	r0, r9, r7
   28188:	str	r1, [r0, #7]
   2818c:	mov	r1, r4
   28190:	vst1.8	{d16}, [r0]
   28194:	mov	r0, r5
   28198:	bl	2b2ac <__assert_fail@plt+0x19f8c>
   2819c:	mov	r7, r0
   281a0:	mov	r0, r9
   281a4:	bl	184a0 <__assert_fail@plt+0x7180>
   281a8:	mov	r5, #0
   281ac:	cmp	r7, #0
   281b0:	beq	281d0 <__assert_fail@plt+0x16eb0>
   281b4:	mov	r0, r7
   281b8:	mov	r1, #63	; 0x3f
   281bc:	bl	1120c <strchr@plt>
   281c0:	cmp	r0, #0
   281c4:	beq	281e4 <__assert_fail@plt+0x16ec4>
   281c8:	mov	r0, r7
   281cc:	bl	184a0 <__assert_fail@plt+0x7180>
   281d0:	mov	r7, #0
   281d4:	b	281e8 <__assert_fail@plt+0x16ec8>
   281d8:	mov	sl, r5
   281dc:	mov	r9, #0
   281e0:	b	281f0 <__assert_fail@plt+0x16ed0>
   281e4:	mov	r5, r7
   281e8:	ldr	r4, [sp, #8]
   281ec:	mov	r9, sl
   281f0:	cmp	r5, #0
   281f4:	mov	r6, r5
   281f8:	mov	r0, r4
   281fc:	mov	r1, r8
   28200:	moveq	r6, r8
   28204:	cmp	sl, #0
   28208:	movne	r6, sl
   2820c:	bl	1108c <strcmp@plt>
   28210:	cmp	r0, #0
   28214:	beq	28288 <__assert_fail@plt+0x16f68>
   28218:	mov	r0, r4
   2821c:	mov	r1, r8
   28220:	bl	27e14 <__assert_fail@plt+0x16af4>
   28224:	cmp	r0, #0
   28228:	bne	28264 <__assert_fail@plt+0x16f44>
   2822c:	cmp	sl, #0
   28230:	beq	28248 <__assert_fail@plt+0x16f28>
   28234:	mov	r0, r4
   28238:	mov	r1, sl
   2823c:	bl	27e14 <__assert_fail@plt+0x16af4>
   28240:	cmp	r0, #0
   28244:	bne	28264 <__assert_fail@plt+0x16f44>
   28248:	cmp	r5, #0
   2824c:	beq	282b8 <__assert_fail@plt+0x16f98>
   28250:	mov	r0, r4
   28254:	mov	r1, r5
   28258:	bl	27e14 <__assert_fail@plt+0x16af4>
   2825c:	cmp	r0, #0
   28260:	beq	282b8 <__assert_fail@plt+0x16f98>
   28264:	cmp	r9, #0
   28268:	beq	28274 <__assert_fail@plt+0x16f54>
   2826c:	mov	r0, r9
   28270:	bl	184a0 <__assert_fail@plt+0x7180>
   28274:	cmp	r7, #0
   28278:	beq	28318 <__assert_fail@plt+0x16ff8>
   2827c:	mov	r0, r7
   28280:	bl	184a0 <__assert_fail@plt+0x7180>
   28284:	b	28318 <__assert_fail@plt+0x16ff8>
   28288:	cmp	r9, #0
   2828c:	cmpne	r9, r6
   28290:	beq	2829c <__assert_fail@plt+0x16f7c>
   28294:	mov	r0, r9
   28298:	bl	184a0 <__assert_fail@plt+0x7180>
   2829c:	cmp	r7, #0
   282a0:	cmpne	r7, r6
   282a4:	beq	282b0 <__assert_fail@plt+0x16f90>
   282a8:	mov	r0, r7
   282ac:	bl	184a0 <__assert_fail@plt+0x7180>
   282b0:	mov	r4, r6
   282b4:	b	28318 <__assert_fail@plt+0x16ff8>
   282b8:	mov	r0, r4
   282bc:	bl	11200 <strlen@plt>
   282c0:	mov	r5, r0
   282c4:	mov	r0, r6
   282c8:	bl	11200 <strlen@plt>
   282cc:	add	r0, r5, r0
   282d0:	add	r0, r0, #4
   282d4:	bl	2acb4 <__assert_fail@plt+0x19994>
   282d8:	movw	r3, #6832	; 0x1ab0
   282dc:	mov	r1, #1
   282e0:	mvn	r2, #0
   282e4:	mov	r5, r0
   282e8:	stm	sp, {r4, r6}
   282ec:	movt	r3, #3
   282f0:	bl	11230 <__sprintf_chk@plt>
   282f4:	cmp	r9, #0
   282f8:	beq	28304 <__assert_fail@plt+0x16fe4>
   282fc:	mov	r0, r9
   28300:	bl	184a0 <__assert_fail@plt+0x7180>
   28304:	cmp	r7, #0
   28308:	beq	28314 <__assert_fail@plt+0x16ff4>
   2830c:	mov	r0, r7
   28310:	bl	184a0 <__assert_fail@plt+0x7180>
   28314:	mov	r4, r5
   28318:	mov	r0, r4
   2831c:	sub	sp, fp, #28
   28320:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   28324:	push	{r4, r5, r6, sl, fp, lr}
   28328:	add	fp, sp, #16
   2832c:	mov	r4, r0
   28330:	movw	r0, #12712	; 0x31a8
   28334:	movt	r0, #4
   28338:	cmp	r4, #0
   2833c:	moveq	r4, r0
   28340:	bl	11218 <__errno_location@plt>
   28344:	ldr	r6, [r0]
   28348:	mov	r5, r0
   2834c:	mov	r0, r4
   28350:	mov	r1, #48	; 0x30
   28354:	bl	2b114 <__assert_fail@plt+0x19df4>
   28358:	str	r6, [r5]
   2835c:	pop	{r4, r5, r6, sl, fp, pc}
   28360:	movw	r1, #12712	; 0x31a8
   28364:	cmp	r0, #0
   28368:	movt	r1, #4
   2836c:	movne	r1, r0
   28370:	ldr	r0, [r1]
   28374:	bx	lr
   28378:	movw	r2, #12712	; 0x31a8
   2837c:	cmp	r0, #0
   28380:	movt	r2, #4
   28384:	movne	r2, r0
   28388:	str	r1, [r2]
   2838c:	bx	lr
   28390:	movw	r3, #12712	; 0x31a8
   28394:	cmp	r0, #0
   28398:	and	r2, r2, #1
   2839c:	movt	r3, #4
   283a0:	movne	r3, r0
   283a4:	ubfx	r0, r1, #5, #3
   283a8:	and	r1, r1, #31
   283ac:	add	ip, r3, r0, lsl #2
   283b0:	mov	r0, #1
   283b4:	ldr	r3, [ip, #8]
   283b8:	and	r0, r0, r3, lsr r1
   283bc:	eor	r2, r0, r2
   283c0:	eor	r1, r3, r2, lsl r1
   283c4:	str	r1, [ip, #8]
   283c8:	bx	lr
   283cc:	movw	r2, #12712	; 0x31a8
   283d0:	cmp	r0, #0
   283d4:	movt	r2, #4
   283d8:	movne	r2, r0
   283dc:	ldr	r0, [r2, #4]
   283e0:	str	r1, [r2, #4]
   283e4:	bx	lr
   283e8:	push	{fp, lr}
   283ec:	mov	fp, sp
   283f0:	movw	r3, #12712	; 0x31a8
   283f4:	cmp	r0, #0
   283f8:	movt	r3, #4
   283fc:	movne	r3, r0
   28400:	cmp	r1, #0
   28404:	mov	r0, #10
   28408:	cmpne	r2, #0
   2840c:	str	r0, [r3]
   28410:	bne	28418 <__assert_fail@plt+0x170f8>
   28414:	bl	11314 <abort@plt>
   28418:	str	r1, [r3, #40]	; 0x28
   2841c:	str	r2, [r3, #44]	; 0x2c
   28420:	pop	{fp, pc}
   28424:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   28428:	add	fp, sp, #28
   2842c:	sub	sp, sp, #20
   28430:	mov	r7, r0
   28434:	ldr	r0, [fp, #8]
   28438:	movw	r5, #12712	; 0x31a8
   2843c:	mov	r8, r3
   28440:	mov	r9, r2
   28444:	mov	sl, r1
   28448:	movt	r5, #4
   2844c:	cmp	r0, #0
   28450:	movne	r5, r0
   28454:	bl	11218 <__errno_location@plt>
   28458:	ldr	r2, [r5, #40]	; 0x28
   2845c:	ldr	r3, [r5, #44]	; 0x2c
   28460:	mov	r4, r0
   28464:	ldm	r5, {r0, r1}
   28468:	add	r5, r5, #8
   2846c:	ldr	r6, [r4]
   28470:	stm	sp, {r0, r1, r5}
   28474:	mov	r0, r7
   28478:	mov	r1, sl
   2847c:	str	r2, [sp, #12]
   28480:	str	r3, [sp, #16]
   28484:	mov	r2, r9
   28488:	mov	r3, r8
   2848c:	bl	2849c <__assert_fail@plt+0x1717c>
   28490:	str	r6, [r4]
   28494:	sub	sp, fp, #28
   28498:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2849c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   284a0:	add	fp, sp, #28
   284a4:	sub	sp, sp, #156	; 0x9c
   284a8:	mov	r5, r0
   284ac:	add	r0, r2, #1
   284b0:	mov	r6, r1
   284b4:	mov	sl, r3
   284b8:	str	r2, [fp, #-80]	; 0xffffffb0
   284bc:	str	r0, [sp, #72]	; 0x48
   284c0:	ldr	r0, [fp, #12]
   284c4:	and	r1, r0, #1
   284c8:	str	r1, [sp, #36]	; 0x24
   284cc:	and	r1, r0, #4
   284d0:	str	r1, [sp, #32]
   284d4:	ubfx	r9, r0, #1, #1
   284d8:	bl	11158 <__ctype_get_mb_cur_max@plt>
   284dc:	str	r0, [sp, #40]	; 0x28
   284e0:	ldr	r0, [fp, #24]
   284e4:	ldr	r7, [fp, #8]
   284e8:	mov	r1, #0
   284ec:	str	r5, [fp, #-84]	; 0xffffffac
   284f0:	str	r1, [fp, #-56]	; 0xffffffc8
   284f4:	mov	r1, #0
   284f8:	str	r1, [sp, #60]	; 0x3c
   284fc:	mov	r1, #1
   28500:	str	r1, [fp, #-48]	; 0xffffffd0
   28504:	str	r0, [sp, #80]	; 0x50
   28508:	ldr	r0, [fp, #20]
   2850c:	str	r0, [sp, #76]	; 0x4c
   28510:	mov	r0, #0
   28514:	str	r0, [sp, #56]	; 0x38
   28518:	mov	r0, #0
   2851c:	str	r0, [fp, #-88]	; 0xffffffa8
   28520:	mov	r0, #0
   28524:	str	r0, [fp, #-72]	; 0xffffffb8
   28528:	mov	r0, #0
   2852c:	cmp	r7, #10
   28530:	bhi	294c4 <__assert_fail@plt+0x181a4>
   28534:	add	r1, pc, #24
   28538:	ldr	ip, [fp, #-80]	; 0xffffffb0
   2853c:	mov	r4, r6
   28540:	mov	r8, #0
   28544:	mov	r2, #1
   28548:	mov	r3, #0
   2854c:	mov	lr, sl
   28550:	ldr	pc, [r1, r7, lsl #2]
   28554:	andeq	r8, r2, r8, lsl r6
   28558:	andeq	r8, r2, ip, ror #12
   2855c:	andeq	r8, r2, ip, lsr #12
   28560:	andeq	r8, r2, r0, lsl r6
   28564:	andeq	r8, r2, r0, ror #12
   28568:	muleq	r2, r4, r6
   2856c:	andeq	r8, r2, ip, lsr r6
   28570:	andeq	r8, r2, r8, lsl r7
   28574:	andeq	r8, r2, r0, lsl #11
   28578:	andeq	r8, r2, r0, lsl #11
   2857c:	andeq	r8, r2, r8, lsr #11
   28580:	movw	r0, #6942	; 0x1b1e
   28584:	mov	r1, r7
   28588:	movt	r0, #3
   2858c:	bl	29ecc <__assert_fail@plt+0x18bac>
   28590:	str	r0, [sp, #76]	; 0x4c
   28594:	movw	r0, #7956	; 0x1f14
   28598:	mov	r1, r7
   2859c:	movt	r0, #3
   285a0:	bl	29ecc <__assert_fail@plt+0x18bac>
   285a4:	str	r0, [sp, #80]	; 0x50
   285a8:	mov	r8, #0
   285ac:	tst	r9, #1
   285b0:	bne	285e8 <__assert_fail@plt+0x172c8>
   285b4:	ldr	r0, [sp, #76]	; 0x4c
   285b8:	ldrb	r0, [r0]
   285bc:	cmp	r0, #0
   285c0:	beq	285e8 <__assert_fail@plt+0x172c8>
   285c4:	ldr	r1, [sp, #76]	; 0x4c
   285c8:	mov	r8, #0
   285cc:	add	r1, r1, #1
   285d0:	cmp	r8, r4
   285d4:	strbcc	r0, [r5, r8]
   285d8:	ldrb	r0, [r1, r8]
   285dc:	add	r8, r8, #1
   285e0:	cmp	r0, #0
   285e4:	bne	285d0 <__assert_fail@plt+0x172b0>
   285e8:	ldr	r6, [sp, #80]	; 0x50
   285ec:	mov	r0, r6
   285f0:	bl	11200 <strlen@plt>
   285f4:	ldr	ip, [fp, #-80]	; 0xffffffb0
   285f8:	str	r0, [fp, #-72]	; 0xffffffb8
   285fc:	str	r6, [fp, #-88]	; 0xffffffa8
   28600:	mov	r2, #1
   28604:	mov	r3, r9
   28608:	mov	lr, sl
   2860c:	b	28718 <__assert_fail@plt+0x173f8>
   28610:	mov	r0, #1
   28614:	b	2866c <__assert_fail@plt+0x1734c>
   28618:	mov	r7, #0
   2861c:	mov	r8, #0
   28620:	mov	r2, r0
   28624:	mov	r3, #0
   28628:	b	28718 <__assert_fail@plt+0x173f8>
   2862c:	tst	r9, #1
   28630:	bne	2866c <__assert_fail@plt+0x1734c>
   28634:	mov	r2, r0
   28638:	b	286c4 <__assert_fail@plt+0x173a4>
   2863c:	mov	r0, #1
   28640:	mov	r8, #0
   28644:	mov	r7, #5
   28648:	mov	r2, #1
   2864c:	str	r0, [fp, #-72]	; 0xffffffb8
   28650:	movw	r0, #6940	; 0x1b1c
   28654:	movt	r0, #3
   28658:	str	r0, [fp, #-88]	; 0xffffffa8
   2865c:	b	2868c <__assert_fail@plt+0x1736c>
   28660:	mov	r2, #1
   28664:	tst	r9, #1
   28668:	beq	286c4 <__assert_fail@plt+0x173a4>
   2866c:	mov	r1, #1
   28670:	mov	r8, #0
   28674:	mov	r7, #2
   28678:	mov	r2, r0
   2867c:	str	r1, [fp, #-72]	; 0xffffffb8
   28680:	movw	r1, #7956	; 0x1f14
   28684:	movt	r1, #3
   28688:	str	r1, [fp, #-88]	; 0xffffffa8
   2868c:	mov	r3, #1
   28690:	b	28718 <__assert_fail@plt+0x173f8>
   28694:	tst	r9, #1
   28698:	beq	286e8 <__assert_fail@plt+0x173c8>
   2869c:	mov	r0, #1
   286a0:	mov	r8, #0
   286a4:	mov	r2, #1
   286a8:	mov	r3, #1
   286ac:	mov	r7, #5
   286b0:	str	r0, [fp, #-72]	; 0xffffffb8
   286b4:	movw	r0, #6940	; 0x1b1c
   286b8:	movt	r0, #3
   286bc:	str	r0, [fp, #-88]	; 0xffffffa8
   286c0:	b	28718 <__assert_fail@plt+0x173f8>
   286c4:	cmp	r4, #0
   286c8:	mov	r8, #1
   286cc:	mov	r3, #0
   286d0:	mov	r7, #2
   286d4:	movne	r0, #39	; 0x27
   286d8:	strbne	r0, [r5]
   286dc:	movw	r0, #7956	; 0x1f14
   286e0:	movt	r0, #3
   286e4:	b	2870c <__assert_fail@plt+0x173ec>
   286e8:	cmp	r4, #0
   286ec:	mov	r8, #1
   286f0:	mov	r2, #1
   286f4:	mov	r7, #5
   286f8:	mov	r3, #0
   286fc:	movne	r0, #34	; 0x22
   28700:	strbne	r0, [r5]
   28704:	movw	r0, #6940	; 0x1b1c
   28708:	movt	r0, #3
   2870c:	str	r0, [fp, #-88]	; 0xffffffa8
   28710:	mov	r0, #1
   28714:	str	r0, [fp, #-72]	; 0xffffffb8
   28718:	ldr	r0, [fp, #-72]	; 0xffffffb8
   2871c:	eor	r6, r3, #1
   28720:	str	r7, [fp, #-68]	; 0xffffffbc
   28724:	str	r3, [fp, #-76]	; 0xffffffb4
   28728:	str	r2, [sp, #84]	; 0x54
   2872c:	str	r6, [sp, #92]	; 0x5c
   28730:	cmp	r0, #0
   28734:	movwne	r0, #1
   28738:	and	r1, r0, r3
   2873c:	and	r1, r2, r1
   28740:	str	r1, [sp, #48]	; 0x30
   28744:	sub	r1, r7, #2
   28748:	clz	r1, r1
   2874c:	lsr	r1, r1, #5
   28750:	and	r1, r1, r3
   28754:	str	r1, [sp, #64]	; 0x40
   28758:	subs	r1, r7, #2
   2875c:	mov	r7, #0
   28760:	movwne	r1, #1
   28764:	orr	r6, r1, r6
   28768:	and	r1, r1, r2
   2876c:	and	r0, r0, r1
   28770:	str	r6, [sp, #68]	; 0x44
   28774:	str	r0, [fp, #-60]	; 0xffffffc4
   28778:	orr	r0, r1, r3
   2877c:	ldr	r1, [fp, #16]
   28780:	eor	r0, r0, #1
   28784:	clz	r1, r1
   28788:	lsr	r1, r1, #5
   2878c:	orr	r0, r1, r0
   28790:	str	r0, [fp, #-64]	; 0xffffffc0
   28794:	eor	r0, r2, #1
   28798:	str	r0, [sp, #52]	; 0x34
   2879c:	cmn	lr, #1
   287a0:	beq	287b0 <__assert_fail@plt+0x17490>
   287a4:	cmp	r7, lr
   287a8:	bne	287bc <__assert_fail@plt+0x1749c>
   287ac:	b	29304 <__assert_fail@plt+0x17fe4>
   287b0:	ldrb	r0, [ip, r7]
   287b4:	cmp	r0, #0
   287b8:	beq	2930c <__assert_fail@plt+0x17fec>
   287bc:	ldr	r0, [fp, #-60]	; 0xffffffc4
   287c0:	mov	sl, #0
   287c4:	cmp	r0, #0
   287c8:	beq	28800 <__assert_fail@plt+0x174e0>
   287cc:	ldr	r0, [fp, #-72]	; 0xffffffb8
   287d0:	add	r5, r7, r0
   287d4:	cmp	r0, #2
   287d8:	bcc	287f4 <__assert_fail@plt+0x174d4>
   287dc:	cmn	lr, #1
   287e0:	bne	287f4 <__assert_fail@plt+0x174d4>
   287e4:	mov	r0, ip
   287e8:	bl	11200 <strlen@plt>
   287ec:	ldr	ip, [fp, #-80]	; 0xffffffb0
   287f0:	mov	lr, r0
   287f4:	cmp	r5, lr
   287f8:	bls	28808 <__assert_fail@plt+0x174e8>
   287fc:	ldr	r5, [fp, #-84]	; 0xffffffac
   28800:	mov	r0, #0
   28804:	b	28854 <__assert_fail@plt+0x17534>
   28808:	ldr	r1, [fp, #-88]	; 0xffffffa8
   2880c:	ldr	r2, [fp, #-72]	; 0xffffffb8
   28810:	add	r0, ip, r7
   28814:	mov	r6, r4
   28818:	mov	r4, lr
   2881c:	bl	111f4 <bcmp@plt>
   28820:	ldr	r2, [sp, #92]	; 0x5c
   28824:	cmp	r0, #0
   28828:	ldr	r5, [fp, #-84]	; 0xffffffac
   2882c:	mov	r1, r0
   28830:	movwne	r1, #1
   28834:	orr	r1, r1, r2
   28838:	tst	r1, #1
   2883c:	beq	29394 <__assert_fail@plt+0x18074>
   28840:	ldr	ip, [fp, #-80]	; 0xffffffb0
   28844:	clz	r0, r0
   28848:	mov	lr, r4
   2884c:	mov	r4, r6
   28850:	lsr	r0, r0, #5
   28854:	str	r0, [fp, #-52]	; 0xffffffcc
   28858:	ldrb	r6, [ip, r7]
   2885c:	cmp	r6, #126	; 0x7e
   28860:	bhi	28d90 <__assert_fail@plt+0x17a70>
   28864:	add	r3, pc, #16
   28868:	mov	r9, #1
   2886c:	mov	r2, #110	; 0x6e
   28870:	mov	r0, #97	; 0x61
   28874:	mov	r1, #0
   28878:	ldr	pc, [r3, r6, lsl #2]
   2887c:	strdeq	r8, [r2], -r0
   28880:	muleq	r2, r0, sp
   28884:	muleq	r2, r0, sp
   28888:	muleq	r2, r0, sp
   2888c:	muleq	r2, r0, sp
   28890:	muleq	r2, r0, sp
   28894:	muleq	r2, r0, sp
   28898:	andeq	r8, r2, ip, ror #28
   2889c:	ldrdeq	r8, [r2], -r0
   288a0:	andeq	r8, r2, r8, asr #23
   288a4:	ldrdeq	r8, [r2], -ip
   288a8:	strdeq	r8, [r2], -r8	; <UNPREDICTABLE>
   288ac:	andeq	r8, r2, r0, asr #23
   288b0:	ldrdeq	r8, [r2], -r8	; <UNPREDICTABLE>
   288b4:	muleq	r2, r0, sp
   288b8:	muleq	r2, r0, sp
   288bc:	muleq	r2, r0, sp
   288c0:	muleq	r2, r0, sp
   288c4:	muleq	r2, r0, sp
   288c8:	muleq	r2, r0, sp
   288cc:	muleq	r2, r0, sp
   288d0:	muleq	r2, r0, sp
   288d4:	muleq	r2, r0, sp
   288d8:	muleq	r2, r0, sp
   288dc:	muleq	r2, r0, sp
   288e0:	muleq	r2, r0, sp
   288e4:	muleq	r2, r0, sp
   288e8:	muleq	r2, r0, sp
   288ec:	muleq	r2, r0, sp
   288f0:	muleq	r2, r0, sp
   288f4:	muleq	r2, r0, sp
   288f8:	muleq	r2, r0, sp
   288fc:	andeq	r8, r2, r4, ror fp
   28900:	andeq	r8, r2, r8, ror fp
   28904:	andeq	r8, r2, r8, ror fp
   28908:	andeq	r8, r2, r0, ror #22
   2890c:	andeq	r8, r2, r8, ror fp
   28910:	andeq	r8, r2, r8, ror sl
   28914:	andeq	r8, r2, r8, ror fp
   28918:	andeq	r8, r2, r0, lsl #26
   2891c:	andeq	r8, r2, r8, ror fp
   28920:	andeq	r8, r2, r8, ror fp
   28924:	andeq	r8, r2, r8, ror fp
   28928:	andeq	r8, r2, r8, ror sl
   2892c:	andeq	r8, r2, r8, ror sl
   28930:	andeq	r8, r2, r8, ror sl
   28934:	andeq	r8, r2, r8, ror sl
   28938:	andeq	r8, r2, r8, ror sl
   2893c:	andeq	r8, r2, r8, ror sl
   28940:	andeq	r8, r2, r8, ror sl
   28944:	andeq	r8, r2, r8, ror sl
   28948:	andeq	r8, r2, r8, ror sl
   2894c:	andeq	r8, r2, r8, ror sl
   28950:	andeq	r8, r2, r8, ror sl
   28954:	andeq	r8, r2, r8, ror sl
   28958:	andeq	r8, r2, r8, ror sl
   2895c:	andeq	r8, r2, r8, ror sl
   28960:	andeq	r8, r2, r8, ror sl
   28964:	andeq	r8, r2, r8, ror sl
   28968:	andeq	r8, r2, r8, ror fp
   2896c:	andeq	r8, r2, r8, ror fp
   28970:	andeq	r8, r2, r8, ror fp
   28974:	andeq	r8, r2, r8, ror fp
   28978:	andeq	r8, r2, r8, asr #25
   2897c:	muleq	r2, r0, sp
   28980:	andeq	r8, r2, r8, ror sl
   28984:	andeq	r8, r2, r8, ror sl
   28988:	andeq	r8, r2, r8, ror sl
   2898c:	andeq	r8, r2, r8, ror sl
   28990:	andeq	r8, r2, r8, ror sl
   28994:	andeq	r8, r2, r8, ror sl
   28998:	andeq	r8, r2, r8, ror sl
   2899c:	andeq	r8, r2, r8, ror sl
   289a0:	andeq	r8, r2, r8, ror sl
   289a4:	andeq	r8, r2, r8, ror sl
   289a8:	andeq	r8, r2, r8, ror sl
   289ac:	andeq	r8, r2, r8, ror sl
   289b0:	andeq	r8, r2, r8, ror sl
   289b4:	andeq	r8, r2, r8, ror sl
   289b8:	andeq	r8, r2, r8, ror sl
   289bc:	andeq	r8, r2, r8, ror sl
   289c0:	andeq	r8, r2, r8, ror sl
   289c4:	andeq	r8, r2, r8, ror sl
   289c8:	andeq	r8, r2, r8, ror sl
   289cc:	andeq	r8, r2, r8, ror sl
   289d0:	andeq	r8, r2, r8, ror sl
   289d4:	andeq	r8, r2, r8, ror sl
   289d8:	andeq	r8, r2, r8, ror sl
   289dc:	andeq	r8, r2, r8, ror sl
   289e0:	andeq	r8, r2, r8, ror sl
   289e4:	andeq	r8, r2, r8, ror sl
   289e8:	andeq	r8, r2, r8, ror fp
   289ec:	andeq	r8, r2, r0, lsr #23
   289f0:	andeq	r8, r2, r8, ror sl
   289f4:	andeq	r8, r2, r8, ror fp
   289f8:	andeq	r8, r2, r8, ror sl
   289fc:	andeq	r8, r2, r8, ror fp
   28a00:	andeq	r8, r2, r8, ror sl
   28a04:	andeq	r8, r2, r8, ror sl
   28a08:	andeq	r8, r2, r8, ror sl
   28a0c:	andeq	r8, r2, r8, ror sl
   28a10:	andeq	r8, r2, r8, ror sl
   28a14:	andeq	r8, r2, r8, ror sl
   28a18:	andeq	r8, r2, r8, ror sl
   28a1c:	andeq	r8, r2, r8, ror sl
   28a20:	andeq	r8, r2, r8, ror sl
   28a24:	andeq	r8, r2, r8, ror sl
   28a28:	andeq	r8, r2, r8, ror sl
   28a2c:	andeq	r8, r2, r8, ror sl
   28a30:	andeq	r8, r2, r8, ror sl
   28a34:	andeq	r8, r2, r8, ror sl
   28a38:	andeq	r8, r2, r8, ror sl
   28a3c:	andeq	r8, r2, r8, ror sl
   28a40:	andeq	r8, r2, r8, ror sl
   28a44:	andeq	r8, r2, r8, ror sl
   28a48:	andeq	r8, r2, r8, ror sl
   28a4c:	andeq	r8, r2, r8, ror sl
   28a50:	andeq	r8, r2, r8, ror sl
   28a54:	andeq	r8, r2, r8, ror sl
   28a58:	andeq	r8, r2, r8, ror sl
   28a5c:	andeq	r8, r2, r8, ror sl
   28a60:	andeq	r8, r2, r8, ror sl
   28a64:	andeq	r8, r2, r8, ror sl
   28a68:	andeq	r8, r2, r4, lsr fp
   28a6c:	andeq	r8, r2, r8, ror fp
   28a70:	andeq	r8, r2, r4, lsr fp
   28a74:	andeq	r8, r2, r0, ror #22
   28a78:	ldr	r0, [fp, #-64]	; 0xffffffc0
   28a7c:	tst	r0, #1
   28a80:	bne	28aac <__assert_fail@plt+0x1778c>
   28a84:	ldr	r1, [fp, #16]
   28a88:	ubfx	r0, r6, #5, #3
   28a8c:	mov	r2, #1
   28a90:	ldr	r0, [r1, r0, lsl #2]
   28a94:	and	r1, r6, #31
   28a98:	tst	r0, r2, lsl r1
   28a9c:	beq	28aac <__assert_fail@plt+0x1778c>
   28aa0:	mov	r0, r6
   28aa4:	mov	r1, r9
   28aa8:	b	28ac0 <__assert_fail@plt+0x177a0>
   28aac:	ldr	r0, [fp, #-52]	; 0xffffffcc
   28ab0:	mov	r1, r9
   28ab4:	cmp	r0, #0
   28ab8:	mov	r0, r6
   28abc:	beq	28e00 <__assert_fail@plt+0x17ae0>
   28ac0:	ldr	r2, [fp, #-76]	; 0xffffffb4
   28ac4:	tst	r2, #1
   28ac8:	bne	293d0 <__assert_fail@plt+0x180b0>
   28acc:	ldr	r2, [fp, #-68]	; 0xffffffbc
   28ad0:	ldr	r3, [fp, #-56]	; 0xffffffc8
   28ad4:	subs	r2, r2, #2
   28ad8:	movwne	r2, #1
   28adc:	orr	r2, r2, r3
   28ae0:	tst	r2, #1
   28ae4:	bne	28b20 <__assert_fail@plt+0x17800>
   28ae8:	cmp	r8, r4
   28aec:	movcc	r2, #39	; 0x27
   28af0:	strbcc	r2, [r5, r8]
   28af4:	add	r2, r8, #1
   28af8:	cmp	r2, r4
   28afc:	movcc	r3, #36	; 0x24
   28b00:	strbcc	r3, [r5, r2]
   28b04:	add	r2, r8, #2
   28b08:	add	r8, r8, #3
   28b0c:	cmp	r2, r4
   28b10:	movcc	r3, #39	; 0x27
   28b14:	strbcc	r3, [r5, r2]
   28b18:	mov	r2, #1
   28b1c:	str	r2, [fp, #-56]	; 0xffffffc8
   28b20:	cmp	r8, r4
   28b24:	movcc	r2, #92	; 0x5c
   28b28:	strbcc	r2, [r5, r8]
   28b2c:	add	r8, r8, #1
   28b30:	b	28e44 <__assert_fail@plt+0x17b24>
   28b34:	cmp	lr, #1
   28b38:	beq	28b60 <__assert_fail@plt+0x17840>
   28b3c:	mov	r9, #0
   28b40:	cmn	lr, #1
   28b44:	bne	28b6c <__assert_fail@plt+0x1784c>
   28b48:	ldrb	r0, [ip, #1]
   28b4c:	cmp	r0, #0
   28b50:	beq	28b60 <__assert_fail@plt+0x17840>
   28b54:	mvn	lr, #0
   28b58:	mov	sl, #0
   28b5c:	b	28a78 <__assert_fail@plt+0x17758>
   28b60:	mov	r9, #0
   28b64:	cmp	r7, #0
   28b68:	beq	28b74 <__assert_fail@plt+0x17854>
   28b6c:	mov	sl, #0
   28b70:	b	28a78 <__assert_fail@plt+0x17758>
   28b74:	mov	r1, #1
   28b78:	ldr	r0, [fp, #-68]	; 0xffffffbc
   28b7c:	cmp	r0, #2
   28b80:	bne	28b98 <__assert_fail@plt+0x17878>
   28b84:	ldr	r0, [fp, #-76]	; 0xffffffb4
   28b88:	mov	r9, r1
   28b8c:	tst	r0, #1
   28b90:	beq	28a78 <__assert_fail@plt+0x17758>
   28b94:	b	293d0 <__assert_fail@plt+0x180b0>
   28b98:	mov	r9, r1
   28b9c:	b	28a78 <__assert_fail@plt+0x17758>
   28ba0:	ldr	r0, [fp, #-68]	; 0xffffffbc
   28ba4:	cmp	r0, #2
   28ba8:	bne	28de4 <__assert_fail@plt+0x17ac4>
   28bac:	ldr	r0, [fp, #-76]	; 0xffffffb4
   28bb0:	tst	r0, #1
   28bb4:	bne	293d0 <__assert_fail@plt+0x180b0>
   28bb8:	mov	sl, #0
   28bbc:	b	28df8 <__assert_fail@plt+0x17ad8>
   28bc0:	mov	r0, #102	; 0x66
   28bc4:	b	28e6c <__assert_fail@plt+0x17b4c>
   28bc8:	mov	r2, #116	; 0x74
   28bcc:	b	28bdc <__assert_fail@plt+0x178bc>
   28bd0:	mov	r0, #98	; 0x62
   28bd4:	b	28e6c <__assert_fail@plt+0x17b4c>
   28bd8:	mov	r2, #114	; 0x72
   28bdc:	ldr	r0, [sp, #68]	; 0x44
   28be0:	tst	r0, #1
   28be4:	mov	r0, r2
   28be8:	bne	28e6c <__assert_fail@plt+0x17b4c>
   28bec:	b	293d0 <__assert_fail@plt+0x180b0>
   28bf0:	ldr	r0, [sp, #84]	; 0x54
   28bf4:	tst	r0, #1
   28bf8:	beq	28e88 <__assert_fail@plt+0x17b68>
   28bfc:	ldr	r0, [fp, #-76]	; 0xffffffb4
   28c00:	tst	r0, #1
   28c04:	bne	294bc <__assert_fail@plt+0x1819c>
   28c08:	ldr	r0, [fp, #-68]	; 0xffffffbc
   28c0c:	ldr	r1, [fp, #-56]	; 0xffffffc8
   28c10:	subs	r0, r0, #2
   28c14:	movwne	r0, #1
   28c18:	orr	r0, r0, r1
   28c1c:	tst	r0, #1
   28c20:	bne	28c5c <__assert_fail@plt+0x1793c>
   28c24:	cmp	r8, r4
   28c28:	movcc	r0, #39	; 0x27
   28c2c:	strbcc	r0, [r5, r8]
   28c30:	add	r0, r8, #1
   28c34:	cmp	r0, r4
   28c38:	movcc	r1, #36	; 0x24
   28c3c:	strbcc	r1, [r5, r0]
   28c40:	add	r0, r8, #2
   28c44:	add	r8, r8, #3
   28c48:	cmp	r0, r4
   28c4c:	movcc	r1, #39	; 0x27
   28c50:	strbcc	r1, [r5, r0]
   28c54:	mov	r0, #1
   28c58:	str	r0, [fp, #-56]	; 0xffffffc8
   28c5c:	ldr	r1, [fp, #-68]	; 0xffffffbc
   28c60:	cmp	r8, r4
   28c64:	mov	r9, #0
   28c68:	mov	sl, #1
   28c6c:	mov	r6, #48	; 0x30
   28c70:	movcc	r0, #92	; 0x5c
   28c74:	strbcc	r0, [r5, r8]
   28c78:	add	r0, r8, #1
   28c7c:	cmp	r1, #2
   28c80:	beq	29050 <__assert_fail@plt+0x17d30>
   28c84:	add	r1, r7, #1
   28c88:	cmp	r1, lr
   28c8c:	bcs	29050 <__assert_fail@plt+0x17d30>
   28c90:	ldrb	r1, [ip, r1]
   28c94:	sub	r1, r1, #48	; 0x30
   28c98:	uxtb	r1, r1
   28c9c:	cmp	r1, #9
   28ca0:	bhi	29050 <__assert_fail@plt+0x17d30>
   28ca4:	cmp	r0, r4
   28ca8:	movcc	r1, #48	; 0x30
   28cac:	strbcc	r1, [r5, r0]
   28cb0:	add	r0, r8, #2
   28cb4:	add	r8, r8, #3
   28cb8:	cmp	r0, r4
   28cbc:	movcc	r1, #48	; 0x30
   28cc0:	strbcc	r1, [r5, r0]
   28cc4:	b	28a78 <__assert_fail@plt+0x17758>
   28cc8:	ldr	r0, [fp, #-68]	; 0xffffffbc
   28ccc:	mov	sl, #0
   28cd0:	mov	r6, #63	; 0x3f
   28cd4:	cmp	r0, #5
   28cd8:	beq	29058 <__assert_fail@plt+0x17d38>
   28cdc:	cmp	r0, #2
   28ce0:	bne	29100 <__assert_fail@plt+0x17de0>
   28ce4:	ldr	r0, [fp, #-76]	; 0xffffffb4
   28ce8:	mov	r9, #0
   28cec:	tst	r0, #1
   28cf0:	beq	28a78 <__assert_fail@plt+0x17758>
   28cf4:	b	293d0 <__assert_fail@plt+0x180b0>
   28cf8:	mov	r0, #118	; 0x76
   28cfc:	b	28e6c <__assert_fail@plt+0x17b4c>
   28d00:	mov	r0, #1
   28d04:	mov	r6, #39	; 0x27
   28d08:	str	r0, [sp, #60]	; 0x3c
   28d0c:	ldr	r0, [fp, #-68]	; 0xffffffbc
   28d10:	cmp	r0, #2
   28d14:	bne	28ea4 <__assert_fail@plt+0x17b84>
   28d18:	ldr	r0, [fp, #-76]	; 0xffffffb4
   28d1c:	tst	r0, #1
   28d20:	bne	293d0 <__assert_fail@plt+0x180b0>
   28d24:	ldr	r2, [sp, #56]	; 0x38
   28d28:	clz	r1, r4
   28d2c:	mov	sl, #0
   28d30:	mov	r9, #1
   28d34:	lsr	r1, r1, #5
   28d38:	cmp	r2, #0
   28d3c:	mov	r0, r2
   28d40:	movwne	r0, #1
   28d44:	orrs	r0, r0, r1
   28d48:	moveq	r2, r4
   28d4c:	moveq	r4, r0
   28d50:	cmp	r8, r4
   28d54:	str	r2, [sp, #56]	; 0x38
   28d58:	movcc	r0, #39	; 0x27
   28d5c:	strbcc	r0, [r5, r8]
   28d60:	add	r0, r8, #1
   28d64:	cmp	r0, r4
   28d68:	movcc	r1, #92	; 0x5c
   28d6c:	strbcc	r1, [r5, r0]
   28d70:	add	r0, r8, #2
   28d74:	add	r8, r8, #3
   28d78:	cmp	r0, r4
   28d7c:	movcc	r1, #39	; 0x27
   28d80:	strbcc	r1, [r5, r0]
   28d84:	mov	r0, #0
   28d88:	str	r0, [fp, #-56]	; 0xffffffc8
   28d8c:	b	28a78 <__assert_fail@plt+0x17758>
   28d90:	ldr	r0, [sp, #40]	; 0x28
   28d94:	str	r4, [sp, #88]	; 0x58
   28d98:	cmp	r0, #1
   28d9c:	bne	28eac <__assert_fail@plt+0x17b8c>
   28da0:	str	lr, [sp, #28]
   28da4:	bl	111d0 <__ctype_b_loc@plt>
   28da8:	ldr	r0, [r0]
   28dac:	ldr	ip, [fp, #-80]	; 0xffffffb0
   28db0:	mov	r2, #1
   28db4:	add	r0, r0, r6, lsl #1
   28db8:	ldrb	r0, [r0, #1]
   28dbc:	ubfx	r9, r0, #6, #1
   28dc0:	ldr	r0, [sp, #52]	; 0x34
   28dc4:	cmp	r2, #1
   28dc8:	orr	r0, r9, r0
   28dcc:	bhi	29108 <__assert_fail@plt+0x17de8>
   28dd0:	tst	r0, #1
   28dd4:	beq	29108 <__assert_fail@plt+0x17de8>
   28dd8:	ldr	lr, [sp, #28]
   28ddc:	ldr	r4, [sp, #88]	; 0x58
   28de0:	b	28a78 <__assert_fail@plt+0x17758>
   28de4:	ldr	r1, [sp, #48]	; 0x30
   28de8:	mov	sl, #0
   28dec:	mov	r0, #92	; 0x5c
   28df0:	cmp	r1, #0
   28df4:	beq	28e6c <__assert_fail@plt+0x17b4c>
   28df8:	mov	r6, #92	; 0x5c
   28dfc:	mov	r9, #0
   28e00:	cmp	sl, #0
   28e04:	bne	28e3c <__assert_fail@plt+0x17b1c>
   28e08:	ldr	r0, [fp, #-56]	; 0xffffffc8
   28e0c:	tst	r0, #1
   28e10:	beq	28e3c <__assert_fail@plt+0x17b1c>
   28e14:	cmp	r8, r4
   28e18:	movcc	r0, #39	; 0x27
   28e1c:	strbcc	r0, [r5, r8]
   28e20:	add	r0, r8, #1
   28e24:	add	r8, r8, #2
   28e28:	cmp	r0, r4
   28e2c:	movcc	r1, #39	; 0x27
   28e30:	strbcc	r1, [r5, r0]
   28e34:	mov	r0, #0
   28e38:	str	r0, [fp, #-56]	; 0xffffffc8
   28e3c:	mov	r1, r9
   28e40:	mov	r0, r6
   28e44:	cmp	r8, r4
   28e48:	strbcc	r0, [r5, r8]
   28e4c:	ldr	r0, [fp, #-48]	; 0xffffffd0
   28e50:	add	r8, r8, #1
   28e54:	and	r0, r0, r1
   28e58:	str	r0, [fp, #-48]	; 0xffffffd0
   28e5c:	add	r7, r7, #1
   28e60:	cmn	lr, #1
   28e64:	bne	287a4 <__assert_fail@plt+0x17484>
   28e68:	b	287b0 <__assert_fail@plt+0x17490>
   28e6c:	ldr	r1, [sp, #84]	; 0x54
   28e70:	mov	sl, #0
   28e74:	mov	r9, #0
   28e78:	tst	r1, #1
   28e7c:	mov	r1, #0
   28e80:	beq	28a78 <__assert_fail@plt+0x17758>
   28e84:	b	28ac0 <__assert_fail@plt+0x177a0>
   28e88:	ldr	r0, [sp, #36]	; 0x24
   28e8c:	mov	r6, #0
   28e90:	mov	sl, #0
   28e94:	mov	r9, #0
   28e98:	cmp	r0, #0
   28e9c:	beq	28a78 <__assert_fail@plt+0x17758>
   28ea0:	b	28e5c <__assert_fail@plt+0x17b3c>
   28ea4:	mov	r9, #1
   28ea8:	b	28a78 <__assert_fail@plt+0x17758>
   28eac:	mov	r0, #0
   28eb0:	cmn	lr, #1
   28eb4:	sub	r4, fp, #40	; 0x28
   28eb8:	str	r0, [fp, #-36]	; 0xffffffdc
   28ebc:	str	r0, [fp, #-40]	; 0xffffffd8
   28ec0:	bne	28ed4 <__assert_fail@plt+0x17bb4>
   28ec4:	mov	r0, ip
   28ec8:	bl	11200 <strlen@plt>
   28ecc:	ldr	ip, [fp, #-80]	; 0xffffffb0
   28ed0:	mov	lr, r0
   28ed4:	ldr	r0, [sp, #72]	; 0x48
   28ed8:	mov	r9, #1
   28edc:	mov	r2, #0
   28ee0:	str	lr, [sp, #28]
   28ee4:	add	r0, r0, r7
   28ee8:	str	r0, [sp, #20]
   28eec:	b	28f30 <__assert_fail@plt+0x17c10>
   28ef0:	ldr	r5, [sp, #44]	; 0x2c
   28ef4:	add	r5, r0, r5
   28ef8:	ldr	r0, [fp, #-44]	; 0xffffffd4
   28efc:	bl	11134 <iswprint@plt>
   28f00:	cmp	r0, #0
   28f04:	sub	r4, fp, #40	; 0x28
   28f08:	movwne	r0, #1
   28f0c:	and	r9, r9, r0
   28f10:	mov	r0, r4
   28f14:	bl	110e0 <mbsinit@plt>
   28f18:	mov	r2, r5
   28f1c:	ldr	lr, [sp, #28]
   28f20:	ldr	r5, [fp, #-84]	; 0xffffffac
   28f24:	ldr	ip, [fp, #-80]	; 0xffffffb0
   28f28:	cmp	r0, #0
   28f2c:	bne	28dc0 <__assert_fail@plt+0x17aa0>
   28f30:	add	r0, r2, r7
   28f34:	str	r2, [sp, #44]	; 0x2c
   28f38:	mov	r3, r4
   28f3c:	add	r1, ip, r0
   28f40:	str	r0, [sp, #24]
   28f44:	sub	r2, lr, r0
   28f48:	sub	r0, fp, #44	; 0x2c
   28f4c:	bl	2b8a0 <__assert_fail@plt+0x1a580>
   28f50:	cmp	r0, #0
   28f54:	beq	292f8 <__assert_fail@plt+0x17fd8>
   28f58:	cmn	r0, #1
   28f5c:	beq	292b4 <__assert_fail@plt+0x17f94>
   28f60:	ldr	lr, [sp, #28]
   28f64:	cmn	r0, #2
   28f68:	beq	292bc <__assert_fail@plt+0x17f9c>
   28f6c:	ldr	r2, [sp, #64]	; 0x40
   28f70:	ldr	r4, [sp, #88]	; 0x58
   28f74:	ldr	ip, [sp, #84]	; 0x54
   28f78:	cmp	r0, #2
   28f7c:	mov	r1, #0
   28f80:	movwcc	r1, #1
   28f84:	eor	r2, r2, #1
   28f88:	orrs	r1, r2, r1
   28f8c:	bne	28ef0 <__assert_fail@plt+0x17bd0>
   28f90:	ldr	r1, [sp, #44]	; 0x2c
   28f94:	ldr	r2, [sp, #20]
   28f98:	add	r1, r2, r1
   28f9c:	sub	r2, r0, #1
   28fa0:	b	28fb0 <__assert_fail@plt+0x17c90>
   28fa4:	add	r1, r1, #1
   28fa8:	subs	r2, r2, #1
   28fac:	beq	28ef0 <__assert_fail@plt+0x17bd0>
   28fb0:	ldrb	r3, [r1]
   28fb4:	sub	r3, r3, #91	; 0x5b
   28fb8:	cmp	r3, #33	; 0x21
   28fbc:	bhi	28fa4 <__assert_fail@plt+0x17c84>
   28fc0:	add	r5, pc, #0
   28fc4:	ldr	pc, [r5, r3, lsl #2]
   28fc8:	andeq	r9, r2, ip, lsr #7
   28fcc:	andeq	r9, r2, ip, lsr #7
   28fd0:	andeq	r8, r2, r4, lsr #31
   28fd4:	andeq	r9, r2, ip, lsr #7
   28fd8:	andeq	r8, r2, r4, lsr #31
   28fdc:	andeq	r9, r2, ip, lsr #7
   28fe0:	andeq	r8, r2, r4, lsr #31
   28fe4:	andeq	r8, r2, r4, lsr #31
   28fe8:	andeq	r8, r2, r4, lsr #31
   28fec:	andeq	r8, r2, r4, lsr #31
   28ff0:	andeq	r8, r2, r4, lsr #31
   28ff4:	andeq	r8, r2, r4, lsr #31
   28ff8:	andeq	r8, r2, r4, lsr #31
   28ffc:	andeq	r8, r2, r4, lsr #31
   29000:	andeq	r8, r2, r4, lsr #31
   29004:	andeq	r8, r2, r4, lsr #31
   29008:	andeq	r8, r2, r4, lsr #31
   2900c:	andeq	r8, r2, r4, lsr #31
   29010:	andeq	r8, r2, r4, lsr #31
   29014:	andeq	r8, r2, r4, lsr #31
   29018:	andeq	r8, r2, r4, lsr #31
   2901c:	andeq	r8, r2, r4, lsr #31
   29020:	andeq	r8, r2, r4, lsr #31
   29024:	andeq	r8, r2, r4, lsr #31
   29028:	andeq	r8, r2, r4, lsr #31
   2902c:	andeq	r8, r2, r4, lsr #31
   29030:	andeq	r8, r2, r4, lsr #31
   29034:	andeq	r8, r2, r4, lsr #31
   29038:	andeq	r8, r2, r4, lsr #31
   2903c:	andeq	r8, r2, r4, lsr #31
   29040:	andeq	r8, r2, r4, lsr #31
   29044:	andeq	r8, r2, r4, lsr #31
   29048:	andeq	r8, r2, r4, lsr #31
   2904c:	andeq	r9, r2, ip, lsr #7
   29050:	mov	r8, r0
   29054:	b	28a78 <__assert_fail@plt+0x17758>
   29058:	ldr	r0, [sp, #32]
   2905c:	cmp	r0, #0
   29060:	beq	29100 <__assert_fail@plt+0x17de0>
   29064:	add	r0, r7, #2
   29068:	cmp	r0, lr
   2906c:	bcs	29100 <__assert_fail@plt+0x17de0>
   29070:	add	r1, r7, ip
   29074:	ldrb	r1, [r1, #1]
   29078:	cmp	r1, #63	; 0x3f
   2907c:	bne	29100 <__assert_fail@plt+0x17de0>
   29080:	ldrb	r9, [ip, r0]
   29084:	sub	r2, r9, #33	; 0x21
   29088:	cmp	r2, #29
   2908c:	bhi	29100 <__assert_fail@plt+0x17de0>
   29090:	movw	r1, #20929	; 0x51c1
   29094:	mov	r3, #1
   29098:	movt	r1, #14336	; 0x3800
   2909c:	tst	r1, r3, lsl r2
   290a0:	beq	29100 <__assert_fail@plt+0x17de0>
   290a4:	ldr	r1, [fp, #-76]	; 0xffffffb4
   290a8:	tst	r1, #1
   290ac:	bne	293d0 <__assert_fail@plt+0x180b0>
   290b0:	cmp	r8, r4
   290b4:	add	r2, r8, #1
   290b8:	mov	r6, r9
   290bc:	mov	r7, r0
   290c0:	mov	r9, #0
   290c4:	movcc	r1, #63	; 0x3f
   290c8:	strbcc	r1, [r5, r8]
   290cc:	cmp	r2, r4
   290d0:	movcc	r1, #34	; 0x22
   290d4:	strbcc	r1, [r5, r2]
   290d8:	add	r2, r8, #2
   290dc:	cmp	r2, r4
   290e0:	movcc	r1, #34	; 0x22
   290e4:	strbcc	r1, [r5, r2]
   290e8:	add	r2, r8, #3
   290ec:	add	r8, r8, #4
   290f0:	cmp	r2, r4
   290f4:	movcc	r1, #63	; 0x3f
   290f8:	strbcc	r1, [r5, r2]
   290fc:	b	28a78 <__assert_fail@plt+0x17758>
   29100:	mov	r9, #0
   29104:	b	28a78 <__assert_fail@plt+0x17758>
   29108:	ldr	lr, [sp, #28]
   2910c:	ldr	r4, [fp, #-56]	; 0xffffffc8
   29110:	add	r1, r2, r7
   29114:	mov	r2, #0
   29118:	str	r1, [sp, #44]	; 0x2c
   2911c:	tst	r0, #1
   29120:	bne	2923c <__assert_fail@plt+0x17f1c>
   29124:	ldr	r1, [fp, #-76]	; 0xffffffb4
   29128:	tst	r1, #1
   2912c:	bne	293cc <__assert_fail@plt+0x180ac>
   29130:	ldr	r1, [fp, #-68]	; 0xffffffbc
   29134:	subs	r2, r1, #2
   29138:	movwne	r2, #1
   2913c:	orr	r2, r2, r4
   29140:	tst	r2, #1
   29144:	bne	29188 <__assert_fail@plt+0x17e68>
   29148:	ldr	r1, [sp, #88]	; 0x58
   2914c:	add	r2, r8, #1
   29150:	mov	r4, #1
   29154:	cmp	r8, r1
   29158:	movcc	r1, #39	; 0x27
   2915c:	strbcc	r1, [r5, r8]
   29160:	ldr	r1, [sp, #88]	; 0x58
   29164:	cmp	r2, r1
   29168:	movcc	r1, #36	; 0x24
   2916c:	strbcc	r1, [r5, r2]
   29170:	ldr	r1, [sp, #88]	; 0x58
   29174:	add	r2, r8, #2
   29178:	add	r8, r8, #3
   2917c:	cmp	r2, r1
   29180:	movcc	r1, #39	; 0x27
   29184:	strbcc	r1, [r5, r2]
   29188:	ldr	r1, [sp, #88]	; 0x58
   2918c:	add	r2, r8, #1
   29190:	cmp	r8, r1
   29194:	movcc	r1, #92	; 0x5c
   29198:	strbcc	r1, [r5, r8]
   2919c:	ldr	r1, [sp, #88]	; 0x58
   291a0:	cmp	r2, r1
   291a4:	bcs	291b8 <__assert_fail@plt+0x17e98>
   291a8:	uxtb	r3, r6
   291ac:	mov	r1, #48	; 0x30
   291b0:	orr	r3, r1, r3, lsr #6
   291b4:	strb	r3, [r5, r2]
   291b8:	ldr	r1, [sp, #88]	; 0x58
   291bc:	add	r2, r8, #2
   291c0:	add	r8, r8, #3
   291c4:	cmp	r2, r1
   291c8:	lsrcc	r3, r6, #3
   291cc:	movcc	r1, #6
   291d0:	bficc	r3, r1, #3, #29
   291d4:	mov	r1, #6
   291d8:	bfi	r6, r1, #3, #29
   291dc:	strbcc	r3, [r5, r2]
   291e0:	mov	r2, #1
   291e4:	b	29264 <__assert_fail@plt+0x17f44>
   291e8:	ldr	r1, [sp, #88]	; 0x58
   291ec:	ldr	r5, [fp, #-84]	; 0xffffffac
   291f0:	ldr	r4, [sp, #88]	; 0x58
   291f4:	cmp	r8, r1
   291f8:	movcc	r1, #39	; 0x27
   291fc:	strbcc	r1, [r5, r8]
   29200:	add	r1, r8, #1
   29204:	add	r8, r8, #2
   29208:	cmp	r1, r4
   2920c:	movcc	r4, #39	; 0x27
   29210:	strbcc	r4, [r5, r1]
   29214:	mov	r4, #0
   29218:	ldr	r1, [sp, #88]	; 0x58
   2921c:	cmp	r8, r1
   29220:	ldr	r1, [sp, #72]	; 0x48
   29224:	strbcc	r6, [r5, r8]
   29228:	add	r8, r8, #1
   2922c:	ldrb	r6, [r1, r7]
   29230:	mov	r7, r3
   29234:	tst	r0, #1
   29238:	beq	29124 <__assert_fail@plt+0x17e04>
   2923c:	ldr	r1, [fp, #-52]	; 0xffffffcc
   29240:	tst	r1, #1
   29244:	beq	2925c <__assert_fail@plt+0x17f3c>
   29248:	ldr	r1, [sp, #88]	; 0x58
   2924c:	cmp	r8, r1
   29250:	movcc	r1, #92	; 0x5c
   29254:	strbcc	r1, [r5, r8]
   29258:	add	r8, r8, #1
   2925c:	mov	r1, #0
   29260:	str	r1, [fp, #-52]	; 0xffffffcc
   29264:	ldr	r1, [sp, #44]	; 0x2c
   29268:	add	r3, r7, #1
   2926c:	and	sl, r2, #1
   29270:	cmp	r1, r3
   29274:	bls	29298 <__assert_fail@plt+0x17f78>
   29278:	cmp	sl, #0
   2927c:	mvn	r5, r4
   29280:	movwne	sl, #1
   29284:	orr	r5, r5, sl
   29288:	tst	r5, #1
   2928c:	beq	291e8 <__assert_fail@plt+0x17ec8>
   29290:	ldr	r5, [fp, #-84]	; 0xffffffac
   29294:	b	29218 <__assert_fail@plt+0x17ef8>
   29298:	str	r4, [fp, #-56]	; 0xffffffc8
   2929c:	ldr	r4, [sp, #88]	; 0x58
   292a0:	cmp	sl, #0
   292a4:	movwne	sl, #1
   292a8:	cmp	sl, #0
   292ac:	beq	28e08 <__assert_fail@plt+0x17ae8>
   292b0:	b	28e3c <__assert_fail@plt+0x17b1c>
   292b4:	mov	r9, #0
   292b8:	b	292f8 <__assert_fail@plt+0x17fd8>
   292bc:	ldr	r0, [sp, #24]
   292c0:	mov	r9, #0
   292c4:	cmp	lr, r0
   292c8:	bls	292f8 <__assert_fail@plt+0x17fd8>
   292cc:	ldr	ip, [fp, #-80]	; 0xffffffb0
   292d0:	ldr	r2, [sp, #44]	; 0x2c
   292d4:	add	r0, ip, r7
   292d8:	ldrb	r1, [r0, r2]
   292dc:	cmp	r1, #0
   292e0:	beq	28dc0 <__assert_fail@plt+0x17aa0>
   292e4:	add	r2, r2, #1
   292e8:	add	r1, r7, r2
   292ec:	cmp	r1, lr
   292f0:	bcc	292d8 <__assert_fail@plt+0x17fb8>
   292f4:	b	28dc0 <__assert_fail@plt+0x17aa0>
   292f8:	ldr	ip, [fp, #-80]	; 0xffffffb0
   292fc:	ldr	r2, [sp, #44]	; 0x2c
   29300:	b	28dc0 <__assert_fail@plt+0x17aa0>
   29304:	mov	lr, r7
   29308:	b	29310 <__assert_fail@plt+0x17ff0>
   2930c:	mvn	lr, #0
   29310:	ldr	r1, [fp, #-68]	; 0xffffffbc
   29314:	ldr	r2, [fp, #-76]	; 0xffffffb4
   29318:	eor	r0, r1, #2
   2931c:	orr	r0, r0, r8
   29320:	clz	r0, r0
   29324:	lsr	r0, r0, #5
   29328:	tst	r2, r0
   2932c:	bne	293d0 <__assert_fail@plt+0x180b0>
   29330:	subs	r0, r1, #2
   29334:	movwne	r0, #1
   29338:	orr	r0, r2, r0
   2933c:	tst	r0, #1
   29340:	ldreq	r0, [sp, #60]	; 0x3c
   29344:	eoreq	r0, r0, #1
   29348:	tsteq	r0, #1
   2934c:	bne	29464 <__assert_fail@plt+0x18144>
   29350:	ldr	r0, [fp, #-48]	; 0xffffffd0
   29354:	mov	sl, lr
   29358:	tst	r0, #1
   2935c:	bne	29430 <__assert_fail@plt+0x18110>
   29360:	ldr	r6, [sp, #56]	; 0x38
   29364:	mov	r9, #0
   29368:	cmp	r6, #0
   2936c:	beq	2945c <__assert_fail@plt+0x1813c>
   29370:	ldr	r0, [sp, #84]	; 0x54
   29374:	mov	r1, #0
   29378:	mov	r7, #2
   2937c:	cmp	r4, #0
   29380:	str	r1, [fp, #-48]	; 0xffffffd0
   29384:	mov	r1, #0
   29388:	str	r1, [fp, #-76]	; 0xffffffb4
   2938c:	beq	2852c <__assert_fail@plt+0x1720c>
   29390:	b	29464 <__assert_fail@plt+0x18144>
   29394:	ldr	ip, [fp, #-80]	; 0xffffffb0
   29398:	ldr	r1, [fp, #12]
   2939c:	ldr	r2, [fp, #-68]	; 0xffffffbc
   293a0:	mov	lr, r4
   293a4:	mov	r4, r6
   293a8:	b	293f0 <__assert_fail@plt+0x180d0>
   293ac:	tst	ip, #1
   293b0:	ldr	r5, [fp, #-84]	; 0xffffffac
   293b4:	ldr	ip, [fp, #-80]	; 0xffffffb0
   293b8:	ldr	r1, [fp, #12]
   293bc:	mov	r0, #2
   293c0:	movwne	r0, #4
   293c4:	mov	r2, r0
   293c8:	b	293f0 <__assert_fail@plt+0x180d0>
   293cc:	ldr	r4, [sp, #88]	; 0x58
   293d0:	ldr	r1, [sp, #84]	; 0x54
   293d4:	mov	r0, #2
   293d8:	tst	r1, #1
   293dc:	movwne	r0, #4
   293e0:	ldr	r2, [fp, #-68]	; 0xffffffbc
   293e4:	ldr	r1, [fp, #12]
   293e8:	cmp	r2, #2
   293ec:	moveq	r2, r0
   293f0:	mov	r0, #0
   293f4:	bic	r1, r1, #2
   293f8:	str	r2, [sp]
   293fc:	mov	r2, ip
   29400:	mov	r3, lr
   29404:	str	r0, [sp, #8]
   29408:	ldr	r0, [sp, #76]	; 0x4c
   2940c:	str	r1, [sp, #4]
   29410:	mov	r1, r4
   29414:	str	r0, [sp, #12]
   29418:	ldr	r0, [sp, #80]	; 0x50
   2941c:	str	r0, [sp, #16]
   29420:	mov	r0, r5
   29424:	bl	2849c <__assert_fail@plt+0x1717c>
   29428:	mov	r8, r0
   2942c:	b	294b0 <__assert_fail@plt+0x18190>
   29430:	mov	r0, #5
   29434:	ldr	r1, [sp, #56]	; 0x38
   29438:	ldr	r2, [fp, #-80]	; 0xffffffb0
   2943c:	mov	r3, sl
   29440:	str	r0, [sp]
   29444:	ldr	r0, [fp, #12]
   29448:	str	r0, [sp, #4]
   2944c:	ldr	r0, [fp, #16]
   29450:	str	r0, [sp, #8]
   29454:	ldr	r0, [sp, #76]	; 0x4c
   29458:	b	29414 <__assert_fail@plt+0x180f4>
   2945c:	mov	r0, #0
   29460:	str	r0, [fp, #-76]	; 0xffffffb4
   29464:	ldr	r1, [fp, #-88]	; 0xffffffa8
   29468:	cmp	r1, #0
   2946c:	beq	294a4 <__assert_fail@plt+0x18184>
   29470:	ldr	r0, [fp, #-76]	; 0xffffffb4
   29474:	tst	r0, #1
   29478:	bne	294a4 <__assert_fail@plt+0x18184>
   2947c:	ldrb	r0, [r1]
   29480:	cmp	r0, #0
   29484:	beq	294a4 <__assert_fail@plt+0x18184>
   29488:	add	r1, r1, #1
   2948c:	cmp	r8, r4
   29490:	strbcc	r0, [r5, r8]
   29494:	add	r8, r8, #1
   29498:	ldrb	r0, [r1], #1
   2949c:	cmp	r0, #0
   294a0:	bne	2948c <__assert_fail@plt+0x1816c>
   294a4:	cmp	r8, r4
   294a8:	movcc	r0, #0
   294ac:	strbcc	r0, [r5, r8]
   294b0:	mov	r0, r8
   294b4:	sub	sp, fp, #28
   294b8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   294bc:	mov	r0, #4
   294c0:	b	293e0 <__assert_fail@plt+0x180c0>
   294c4:	bl	11314 <abort@plt>
   294c8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   294cc:	add	fp, sp, #28
   294d0:	sub	sp, sp, #28
   294d4:	movw	r5, #12712	; 0x31a8
   294d8:	cmp	r2, #0
   294dc:	mov	r4, r1
   294e0:	mov	r7, r0
   294e4:	str	r0, [sp, #20]
   294e8:	movt	r5, #4
   294ec:	movne	r5, r2
   294f0:	bl	11218 <__errno_location@plt>
   294f4:	mov	sl, r0
   294f8:	ldr	r2, [r5, #40]	; 0x28
   294fc:	ldr	r3, [r5, #44]	; 0x2c
   29500:	ldm	r5, {r0, r1}
   29504:	orr	r8, r1, #1
   29508:	add	r9, r5, #8
   2950c:	mov	r1, #0
   29510:	ldr	r6, [sl]
   29514:	stm	sp, {r0, r8, r9}
   29518:	mov	r0, #0
   2951c:	str	r2, [sp, #12]
   29520:	str	r3, [sp, #16]
   29524:	mov	r2, r7
   29528:	mov	r3, r4
   2952c:	str	r6, [sp, #24]
   29530:	mov	r6, r4
   29534:	bl	2849c <__assert_fail@plt+0x1717c>
   29538:	add	r7, r0, #1
   2953c:	mov	r0, r7
   29540:	bl	2ace4 <__assert_fail@plt+0x199c4>
   29544:	mov	r4, r0
   29548:	ldr	r0, [r5]
   2954c:	ldr	r2, [r5, #44]	; 0x2c
   29550:	ldr	r1, [r5, #40]	; 0x28
   29554:	mov	r3, r6
   29558:	stm	sp, {r0, r8, r9}
   2955c:	str	r2, [sp, #16]
   29560:	ldr	r2, [sp, #20]
   29564:	str	r1, [sp, #12]
   29568:	mov	r0, r4
   2956c:	mov	r1, r7
   29570:	bl	2849c <__assert_fail@plt+0x1717c>
   29574:	ldr	r0, [sp, #24]
   29578:	str	r0, [sl]
   2957c:	mov	r0, r4
   29580:	sub	sp, fp, #28
   29584:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   29588:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2958c:	add	fp, sp, #28
   29590:	sub	sp, sp, #36	; 0x24
   29594:	movw	r8, #12712	; 0x31a8
   29598:	cmp	r3, #0
   2959c:	mov	r4, r2
   295a0:	str	r2, [sp, #24]
   295a4:	mov	r5, r1
   295a8:	mov	r6, r0
   295ac:	str	r0, [sp, #20]
   295b0:	movt	r8, #4
   295b4:	movne	r8, r3
   295b8:	bl	11218 <__errno_location@plt>
   295bc:	str	r0, [sp, #28]
   295c0:	ldr	r1, [r8, #40]	; 0x28
   295c4:	ldr	r2, [r8, #44]	; 0x2c
   295c8:	ldr	r7, [r0]
   295cc:	cmp	r4, #0
   295d0:	add	sl, r8, #8
   295d4:	mov	r0, #0
   295d8:	ldm	r8, {r3, r9}
   295dc:	orreq	r9, r9, #1
   295e0:	stm	sp, {r3, r9, sl}
   295e4:	str	r1, [sp, #12]
   295e8:	str	r2, [sp, #16]
   295ec:	mov	r1, #0
   295f0:	mov	r2, r6
   295f4:	mov	r3, r5
   295f8:	str	r7, [sp, #32]
   295fc:	mov	r7, r5
   29600:	bl	2849c <__assert_fail@plt+0x1717c>
   29604:	add	r4, r0, #1
   29608:	mov	r5, r0
   2960c:	mov	r0, r4
   29610:	bl	2ace4 <__assert_fail@plt+0x199c4>
   29614:	mov	r6, r0
   29618:	ldr	r0, [r8]
   2961c:	ldr	r2, [r8, #44]	; 0x2c
   29620:	ldr	r1, [r8, #40]	; 0x28
   29624:	mov	r3, r7
   29628:	stm	sp, {r0, r9, sl}
   2962c:	str	r2, [sp, #16]
   29630:	ldr	r2, [sp, #20]
   29634:	str	r1, [sp, #12]
   29638:	mov	r0, r6
   2963c:	mov	r1, r4
   29640:	bl	2849c <__assert_fail@plt+0x1717c>
   29644:	ldr	r0, [sp, #24]
   29648:	ldr	r1, [sp, #32]
   2964c:	ldr	r2, [sp, #28]
   29650:	cmp	r0, #0
   29654:	str	r1, [r2]
   29658:	strne	r5, [r0]
   2965c:	mov	r0, r6
   29660:	sub	sp, fp, #28
   29664:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   29668:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   2966c:	add	fp, sp, #24
   29670:	movw	r5, #12588	; 0x312c
   29674:	movw	r8, #12584	; 0x3128
   29678:	movt	r5, #4
   2967c:	movt	r8, #4
   29680:	ldr	r0, [r5]
   29684:	ldr	r4, [r8]
   29688:	cmp	r0, #2
   2968c:	blt	296b8 <__assert_fail@plt+0x18398>
   29690:	add	r7, r4, #12
   29694:	mov	r6, #0
   29698:	ldr	r0, [r7, r6, lsl #3]
   2969c:	bl	184a0 <__assert_fail@plt+0x7180>
   296a0:	ldr	r1, [r5]
   296a4:	add	r2, r6, #2
   296a8:	add	r0, r6, #1
   296ac:	mov	r6, r0
   296b0:	cmp	r2, r1
   296b4:	blt	29698 <__assert_fail@plt+0x18378>
   296b8:	ldr	r0, [r4, #4]
   296bc:	movw	r9, #12760	; 0x31d8
   296c0:	movw	r7, #12592	; 0x3130
   296c4:	movt	r9, #4
   296c8:	movt	r7, #4
   296cc:	cmp	r0, r9
   296d0:	beq	296e0 <__assert_fail@plt+0x183c0>
   296d4:	bl	184a0 <__assert_fail@plt+0x7180>
   296d8:	mov	r0, #256	; 0x100
   296dc:	stm	r7, {r0, r9}
   296e0:	cmp	r4, r7
   296e4:	beq	296f4 <__assert_fail@plt+0x183d4>
   296e8:	mov	r0, r4
   296ec:	bl	184a0 <__assert_fail@plt+0x7180>
   296f0:	str	r7, [r8]
   296f4:	mov	r0, #1
   296f8:	str	r0, [r5]
   296fc:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   29700:	movw	r3, #12712	; 0x31a8
   29704:	mvn	r2, #0
   29708:	movt	r3, #4
   2970c:	b	29710 <__assert_fail@plt+0x183f0>
   29710:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   29714:	add	fp, sp, #28
   29718:	sub	sp, sp, #44	; 0x2c
   2971c:	mov	r7, r3
   29720:	str	r2, [sp, #36]	; 0x24
   29724:	str	r1, [sp, #32]
   29728:	mov	r5, r0
   2972c:	bl	11218 <__errno_location@plt>
   29730:	cmp	r5, #0
   29734:	bmi	298a4 <__assert_fail@plt+0x18584>
   29738:	cmn	r5, #-2147483647	; 0x80000001
   2973c:	beq	298a4 <__assert_fail@plt+0x18584>
   29740:	movw	r8, #12588	; 0x312c
   29744:	movw	r4, #12584	; 0x3128
   29748:	str	r0, [sp, #28]
   2974c:	ldr	r0, [r0]
   29750:	movt	r8, #4
   29754:	movt	r4, #4
   29758:	ldr	r1, [r8]
   2975c:	ldr	r6, [r4]
   29760:	str	r0, [sp, #24]
   29764:	cmp	r1, r5
   29768:	ble	29774 <__assert_fail@plt+0x18454>
   2976c:	mov	sl, r6
   29770:	b	297e0 <__assert_fail@plt+0x184c0>
   29774:	movw	r9, #12592	; 0x3130
   29778:	mov	r0, #8
   2977c:	str	r1, [fp, #-32]	; 0xffffffe0
   29780:	sub	r1, r5, r1
   29784:	mvn	r3, #-2147483648	; 0x80000000
   29788:	movt	r9, #4
   2978c:	str	r0, [sp]
   29790:	add	r2, r1, #1
   29794:	sub	r1, fp, #32
   29798:	subs	r0, r6, r9
   2979c:	movne	r0, r6
   297a0:	bl	2aee4 <__assert_fail@plt+0x19bc4>
   297a4:	mov	sl, r0
   297a8:	cmp	r6, r9
   297ac:	str	r0, [r4]
   297b0:	bne	297bc <__assert_fail@plt+0x1849c>
   297b4:	ldrd	r0, [r9]
   297b8:	stm	sl, {r0, r1}
   297bc:	ldr	r1, [r8]
   297c0:	ldr	r2, [fp, #-32]	; 0xffffffe0
   297c4:	add	r0, sl, r1, lsl #3
   297c8:	sub	r1, r2, r1
   297cc:	lsl	r2, r1, #3
   297d0:	mov	r1, #0
   297d4:	bl	11248 <memset@plt>
   297d8:	ldr	r0, [fp, #-32]	; 0xffffffe0
   297dc:	str	r0, [r8]
   297e0:	mov	r9, sl
   297e4:	ldm	r7, {r0, r1}
   297e8:	orr	r8, r1, #1
   297ec:	add	r1, r7, #8
   297f0:	ldr	r2, [r7, #40]	; 0x28
   297f4:	ldr	r3, [r7, #44]	; 0x2c
   297f8:	ldr	r6, [r9, r5, lsl #3]!
   297fc:	str	r1, [sp, #20]
   29800:	ldr	r4, [r9, #4]!
   29804:	stm	sp, {r0, r8}
   29808:	add	r0, sp, #8
   2980c:	stm	r0, {r1, r2, r3}
   29810:	ldr	r2, [sp, #32]
   29814:	ldr	r3, [sp, #36]	; 0x24
   29818:	mov	r1, r6
   2981c:	mov	r0, r4
   29820:	bl	2849c <__assert_fail@plt+0x1717c>
   29824:	cmp	r6, r0
   29828:	bhi	2988c <__assert_fail@plt+0x1856c>
   2982c:	add	r6, r0, #1
   29830:	movw	r0, #12760	; 0x31d8
   29834:	movt	r0, #4
   29838:	str	r6, [sl, r5, lsl #3]
   2983c:	cmp	r4, r0
   29840:	beq	2984c <__assert_fail@plt+0x1852c>
   29844:	mov	r0, r4
   29848:	bl	184a0 <__assert_fail@plt+0x7180>
   2984c:	mov	r0, r6
   29850:	bl	2ace4 <__assert_fail@plt+0x199c4>
   29854:	str	r0, [r9]
   29858:	mov	r4, r0
   2985c:	add	r3, sp, #8
   29860:	ldr	r0, [r7]
   29864:	ldr	r1, [r7, #40]	; 0x28
   29868:	ldr	r2, [r7, #44]	; 0x2c
   2986c:	stm	sp, {r0, r8}
   29870:	ldr	r0, [sp, #20]
   29874:	stm	r3, {r0, r1, r2}
   29878:	ldr	r2, [sp, #32]
   2987c:	ldr	r3, [sp, #36]	; 0x24
   29880:	mov	r0, r4
   29884:	mov	r1, r6
   29888:	bl	2849c <__assert_fail@plt+0x1717c>
   2988c:	ldr	r0, [sp, #28]
   29890:	ldr	r1, [sp, #24]
   29894:	str	r1, [r0]
   29898:	mov	r0, r4
   2989c:	sub	sp, fp, #28
   298a0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   298a4:	bl	11314 <abort@plt>
   298a8:	movw	r3, #12712	; 0x31a8
   298ac:	movt	r3, #4
   298b0:	b	29710 <__assert_fail@plt+0x183f0>
   298b4:	movw	r3, #12712	; 0x31a8
   298b8:	mov	r1, r0
   298bc:	mov	r0, #0
   298c0:	mvn	r2, #0
   298c4:	movt	r3, #4
   298c8:	b	29710 <__assert_fail@plt+0x183f0>
   298cc:	movw	r3, #12712	; 0x31a8
   298d0:	mov	r2, r1
   298d4:	mov	r1, r0
   298d8:	mov	r0, #0
   298dc:	movt	r3, #4
   298e0:	b	29710 <__assert_fail@plt+0x183f0>
   298e4:	push	{fp, lr}
   298e8:	mov	fp, sp
   298ec:	sub	sp, sp, #48	; 0x30
   298f0:	vmov.i32	q8, #0	; 0x00000000
   298f4:	mov	ip, #32
   298f8:	mov	r3, sp
   298fc:	mov	lr, r2
   29900:	cmp	r1, #10
   29904:	add	r2, r3, #16
   29908:	vst1.64	{d16-d17}, [r3], ip
   2990c:	vst1.64	{d16-d17}, [r2]
   29910:	vst1.64	{d16-d17}, [r3]
   29914:	beq	29934 <__assert_fail@plt+0x18614>
   29918:	str	r1, [sp]
   2991c:	mov	r3, sp
   29920:	mov	r1, lr
   29924:	mvn	r2, #0
   29928:	bl	29710 <__assert_fail@plt+0x183f0>
   2992c:	mov	sp, fp
   29930:	pop	{fp, pc}
   29934:	bl	11314 <abort@plt>
   29938:	push	{r4, sl, fp, lr}
   2993c:	add	fp, sp, #8
   29940:	sub	sp, sp, #48	; 0x30
   29944:	vmov.i32	q8, #0	; 0x00000000
   29948:	mov	ip, r3
   2994c:	mov	r3, sp
   29950:	mov	lr, #32
   29954:	cmp	r1, #10
   29958:	add	r4, r3, #16
   2995c:	vst1.64	{d16-d17}, [r3], lr
   29960:	vst1.64	{d16-d17}, [r4]
   29964:	vst1.64	{d16-d17}, [r3]
   29968:	beq	29988 <__assert_fail@plt+0x18668>
   2996c:	str	r1, [sp]
   29970:	mov	r1, r2
   29974:	mov	r3, sp
   29978:	mov	r2, ip
   2997c:	bl	29710 <__assert_fail@plt+0x183f0>
   29980:	sub	sp, fp, #8
   29984:	pop	{r4, sl, fp, pc}
   29988:	bl	11314 <abort@plt>
   2998c:	push	{fp, lr}
   29990:	mov	fp, sp
   29994:	sub	sp, sp, #48	; 0x30
   29998:	vmov.i32	q8, #0	; 0x00000000
   2999c:	mov	r3, sp
   299a0:	mov	ip, #32
   299a4:	cmp	r0, #10
   299a8:	add	r2, r3, #16
   299ac:	vst1.64	{d16-d17}, [r3], ip
   299b0:	vst1.64	{d16-d17}, [r2]
   299b4:	vst1.64	{d16-d17}, [r3]
   299b8:	beq	299d8 <__assert_fail@plt+0x186b8>
   299bc:	str	r0, [sp]
   299c0:	mov	r3, sp
   299c4:	mov	r0, #0
   299c8:	mvn	r2, #0
   299cc:	bl	29710 <__assert_fail@plt+0x183f0>
   299d0:	mov	sp, fp
   299d4:	pop	{fp, pc}
   299d8:	bl	11314 <abort@plt>
   299dc:	push	{fp, lr}
   299e0:	mov	fp, sp
   299e4:	sub	sp, sp, #48	; 0x30
   299e8:	vmov.i32	q8, #0	; 0x00000000
   299ec:	mov	r3, sp
   299f0:	mov	ip, #32
   299f4:	cmp	r0, #10
   299f8:	add	lr, r3, #16
   299fc:	vst1.64	{d16-d17}, [r3], ip
   29a00:	vst1.64	{d16-d17}, [lr]
   29a04:	vst1.64	{d16-d17}, [r3]
   29a08:	beq	29a24 <__assert_fail@plt+0x18704>
   29a0c:	str	r0, [sp]
   29a10:	mov	r3, sp
   29a14:	mov	r0, #0
   29a18:	bl	29710 <__assert_fail@plt+0x183f0>
   29a1c:	mov	sp, fp
   29a20:	pop	{fp, pc}
   29a24:	bl	11314 <abort@plt>
   29a28:	push	{r4, sl, fp, lr}
   29a2c:	add	fp, sp, #8
   29a30:	sub	sp, sp, #48	; 0x30
   29a34:	mov	lr, r0
   29a38:	movw	r0, #12712	; 0x31a8
   29a3c:	mov	ip, r1
   29a40:	mov	r1, #32
   29a44:	mov	r4, #1
   29a48:	movt	r0, #4
   29a4c:	add	r3, r0, #16
   29a50:	vld1.64	{d16-d17}, [r0], r1
   29a54:	vld1.64	{d20-d21}, [r0]
   29a58:	vld1.64	{d18-d19}, [r3]
   29a5c:	mov	r3, sp
   29a60:	add	r0, r3, #32
   29a64:	add	r1, r3, #16
   29a68:	vst1.64	{d20-d21}, [r0]
   29a6c:	mov	r0, #28
   29a70:	vst1.64	{d18-d19}, [r1]
   29a74:	mov	r1, r3
   29a78:	and	r0, r0, r2, lsr #3
   29a7c:	and	r2, r2, #31
   29a80:	vst1.64	{d16-d17}, [r1], r0
   29a84:	ldr	r0, [r1, #8]
   29a88:	bic	r4, r4, r0, lsr r2
   29a8c:	eor	r0, r0, r4, lsl r2
   29a90:	mov	r2, ip
   29a94:	str	r0, [r1, #8]
   29a98:	mov	r0, #0
   29a9c:	mov	r1, lr
   29aa0:	bl	29710 <__assert_fail@plt+0x183f0>
   29aa4:	sub	sp, fp, #8
   29aa8:	pop	{r4, sl, fp, pc}
   29aac:	push	{fp, lr}
   29ab0:	mov	fp, sp
   29ab4:	sub	sp, sp, #48	; 0x30
   29ab8:	mov	ip, r0
   29abc:	movw	r0, #12712	; 0x31a8
   29ac0:	mov	r2, #32
   29ac4:	movt	r0, #4
   29ac8:	add	r3, r0, #16
   29acc:	vld1.64	{d16-d17}, [r0], r2
   29ad0:	vld1.64	{d20-d21}, [r0]
   29ad4:	vld1.64	{d18-d19}, [r3]
   29ad8:	mov	r3, sp
   29adc:	add	r0, r3, #32
   29ae0:	add	r2, r3, #16
   29ae4:	vst1.64	{d20-d21}, [r0]
   29ae8:	mov	r0, #28
   29aec:	vst1.64	{d18-d19}, [r2]
   29af0:	mov	r2, r3
   29af4:	and	r0, r0, r1, lsr #3
   29af8:	and	r1, r1, #31
   29afc:	vst1.64	{d16-d17}, [r2], r0
   29b00:	mov	r0, #1
   29b04:	ldr	lr, [r2, #8]
   29b08:	bic	r0, r0, lr, lsr r1
   29b0c:	eor	r0, lr, r0, lsl r1
   29b10:	mov	r1, ip
   29b14:	str	r0, [r2, #8]
   29b18:	mov	r0, #0
   29b1c:	mvn	r2, #0
   29b20:	bl	29710 <__assert_fail@plt+0x183f0>
   29b24:	mov	sp, fp
   29b28:	pop	{fp, pc}
   29b2c:	push	{fp, lr}
   29b30:	mov	fp, sp
   29b34:	sub	sp, sp, #48	; 0x30
   29b38:	mov	r1, r0
   29b3c:	movw	r0, #12712	; 0x31a8
   29b40:	mov	r3, #32
   29b44:	movt	r0, #4
   29b48:	add	r2, r0, #16
   29b4c:	vld1.64	{d16-d17}, [r0], r3
   29b50:	mov	r3, sp
   29b54:	vld1.64	{d18-d19}, [r2]
   29b58:	vld1.64	{d20-d21}, [r0]
   29b5c:	add	r2, r3, #16
   29b60:	add	r0, r3, #32
   29b64:	vst1.64	{d18-d19}, [r2]
   29b68:	vst1.64	{d20-d21}, [r0]
   29b6c:	mov	r0, #12
   29b70:	mov	r2, r3
   29b74:	vst1.64	{d16-d17}, [r2], r0
   29b78:	ldr	r0, [r2]
   29b7c:	orr	r0, r0, #67108864	; 0x4000000
   29b80:	str	r0, [r2]
   29b84:	mov	r0, #0
   29b88:	mvn	r2, #0
   29b8c:	bl	29710 <__assert_fail@plt+0x183f0>
   29b90:	mov	sp, fp
   29b94:	pop	{fp, pc}
   29b98:	push	{fp, lr}
   29b9c:	mov	fp, sp
   29ba0:	sub	sp, sp, #48	; 0x30
   29ba4:	mov	ip, r1
   29ba8:	mov	r1, r0
   29bac:	movw	r0, #12712	; 0x31a8
   29bb0:	mov	r2, #32
   29bb4:	movt	r0, #4
   29bb8:	add	r3, r0, #16
   29bbc:	vld1.64	{d16-d17}, [r0], r2
   29bc0:	vld1.64	{d18-d19}, [r3]
   29bc4:	vld1.64	{d20-d21}, [r0]
   29bc8:	mov	r3, sp
   29bcc:	add	r2, r3, #16
   29bd0:	add	r0, r3, #32
   29bd4:	vst1.64	{d18-d19}, [r2]
   29bd8:	vst1.64	{d20-d21}, [r0]
   29bdc:	mov	r0, #12
   29be0:	mov	r2, r3
   29be4:	vst1.64	{d16-d17}, [r2], r0
   29be8:	ldr	r0, [r2]
   29bec:	orr	r0, r0, #67108864	; 0x4000000
   29bf0:	str	r0, [r2]
   29bf4:	mov	r0, #0
   29bf8:	mov	r2, ip
   29bfc:	bl	29710 <__assert_fail@plt+0x183f0>
   29c00:	mov	sp, fp
   29c04:	pop	{fp, pc}
   29c08:	push	{r4, sl, fp, lr}
   29c0c:	add	fp, sp, #8
   29c10:	sub	sp, sp, #96	; 0x60
   29c14:	vmov.i32	q8, #0	; 0x00000000
   29c18:	mov	ip, r2
   29c1c:	mov	r2, sp
   29c20:	mov	r4, #28
   29c24:	cmp	r1, #10
   29c28:	mov	r3, r2
   29c2c:	add	lr, r2, #16
   29c30:	vst1.64	{d16-d17}, [r3], r4
   29c34:	vst1.64	{d16-d17}, [lr]
   29c38:	vst1.32	{d16-d17}, [r3]
   29c3c:	beq	29c8c <__assert_fail@plt+0x1896c>
   29c40:	vld1.64	{d16-d17}, [r2], r4
   29c44:	vld1.64	{d18-d19}, [lr]
   29c48:	add	r3, sp, #48	; 0x30
   29c4c:	vld1.32	{d20-d21}, [r2]
   29c50:	add	r2, r3, #20
   29c54:	add	r4, r3, #4
   29c58:	vst1.32	{d18-d19}, [r2]
   29c5c:	add	r2, r3, #32
   29c60:	vst1.32	{d16-d17}, [r4]
   29c64:	vst1.32	{d20-d21}, [r2]
   29c68:	str	r1, [sp, #48]	; 0x30
   29c6c:	mvn	r2, #0
   29c70:	ldr	r1, [sp, #60]	; 0x3c
   29c74:	orr	r1, r1, #67108864	; 0x4000000
   29c78:	str	r1, [sp, #60]	; 0x3c
   29c7c:	mov	r1, ip
   29c80:	bl	29710 <__assert_fail@plt+0x183f0>
   29c84:	sub	sp, fp, #8
   29c88:	pop	{r4, sl, fp, pc}
   29c8c:	bl	11314 <abort@plt>
   29c90:	push	{r4, r5, r6, sl, fp, lr}
   29c94:	add	fp, sp, #16
   29c98:	sub	sp, sp, #48	; 0x30
   29c9c:	mov	ip, r3
   29ca0:	movw	r3, #12712	; 0x31a8
   29ca4:	mov	r6, #32
   29ca8:	cmp	r1, #0
   29cac:	mov	r4, sp
   29cb0:	movt	r3, #4
   29cb4:	cmpne	r2, #0
   29cb8:	add	r5, r4, #16
   29cbc:	add	lr, r3, #16
   29cc0:	vld1.64	{d16-d17}, [r3], r6
   29cc4:	vld1.64	{d18-d19}, [lr]
   29cc8:	vld1.64	{d20-d21}, [r3]
   29ccc:	mov	r3, #10
   29cd0:	vst1.64	{d16-d17}, [r4], r6
   29cd4:	vst1.64	{d18-d19}, [r5]
   29cd8:	vst1.64	{d20-d21}, [r4]
   29cdc:	str	r3, [sp]
   29ce0:	bne	29ce8 <__assert_fail@plt+0x189c8>
   29ce4:	bl	11314 <abort@plt>
   29ce8:	str	r2, [sp, #44]	; 0x2c
   29cec:	str	r1, [sp, #40]	; 0x28
   29cf0:	mov	r3, sp
   29cf4:	mov	r1, ip
   29cf8:	mvn	r2, #0
   29cfc:	bl	29710 <__assert_fail@plt+0x183f0>
   29d00:	sub	sp, fp, #16
   29d04:	pop	{r4, r5, r6, sl, fp, pc}
   29d08:	push	{r4, r5, r6, sl, fp, lr}
   29d0c:	add	fp, sp, #16
   29d10:	sub	sp, sp, #48	; 0x30
   29d14:	mov	lr, r3
   29d18:	movw	r3, #12712	; 0x31a8
   29d1c:	mov	r6, #32
   29d20:	cmp	r1, #0
   29d24:	mov	r4, sp
   29d28:	movt	r3, #4
   29d2c:	cmpne	r2, #0
   29d30:	add	r5, r4, #16
   29d34:	add	ip, r3, #16
   29d38:	vld1.64	{d16-d17}, [r3], r6
   29d3c:	vld1.64	{d18-d19}, [ip]
   29d40:	vld1.64	{d20-d21}, [r3]
   29d44:	mov	r3, #10
   29d48:	vst1.64	{d16-d17}, [r4], r6
   29d4c:	vst1.64	{d18-d19}, [r5]
   29d50:	vst1.64	{d20-d21}, [r4]
   29d54:	str	r3, [sp]
   29d58:	bne	29d60 <__assert_fail@plt+0x18a40>
   29d5c:	bl	11314 <abort@plt>
   29d60:	ldr	ip, [fp, #8]
   29d64:	str	r2, [sp, #44]	; 0x2c
   29d68:	str	r1, [sp, #40]	; 0x28
   29d6c:	mov	r3, sp
   29d70:	mov	r1, lr
   29d74:	mov	r2, ip
   29d78:	bl	29710 <__assert_fail@plt+0x183f0>
   29d7c:	sub	sp, fp, #16
   29d80:	pop	{r4, r5, r6, sl, fp, pc}
   29d84:	push	{r4, sl, fp, lr}
   29d88:	add	fp, sp, #8
   29d8c:	sub	sp, sp, #48	; 0x30
   29d90:	movw	r3, #12712	; 0x31a8
   29d94:	mov	lr, #32
   29d98:	mov	ip, r2
   29d9c:	cmp	r0, #0
   29da0:	movt	r3, #4
   29da4:	cmpne	r1, #0
   29da8:	add	r2, r3, #16
   29dac:	vld1.64	{d16-d17}, [r3], lr
   29db0:	vld1.64	{d20-d21}, [r3]
   29db4:	vld1.64	{d18-d19}, [r2]
   29db8:	mov	r2, sp
   29dbc:	add	r4, r2, #16
   29dc0:	vst1.64	{d16-d17}, [r2], lr
   29dc4:	vst1.64	{d20-d21}, [r2]
   29dc8:	mov	r2, #10
   29dcc:	vst1.64	{d18-d19}, [r4]
   29dd0:	str	r2, [sp]
   29dd4:	bne	29ddc <__assert_fail@plt+0x18abc>
   29dd8:	bl	11314 <abort@plt>
   29ddc:	str	r1, [sp, #44]	; 0x2c
   29de0:	str	r0, [sp, #40]	; 0x28
   29de4:	mov	r3, sp
   29de8:	mov	r0, #0
   29dec:	mov	r1, ip
   29df0:	mvn	r2, #0
   29df4:	bl	29710 <__assert_fail@plt+0x183f0>
   29df8:	sub	sp, fp, #8
   29dfc:	pop	{r4, sl, fp, pc}
   29e00:	push	{r4, r5, fp, lr}
   29e04:	add	fp, sp, #8
   29e08:	sub	sp, sp, #48	; 0x30
   29e0c:	mov	ip, r3
   29e10:	movw	r3, #12712	; 0x31a8
   29e14:	mov	r4, #32
   29e18:	mov	lr, r2
   29e1c:	cmp	r0, #0
   29e20:	movt	r3, #4
   29e24:	cmpne	r1, #0
   29e28:	add	r2, r3, #16
   29e2c:	vld1.64	{d16-d17}, [r3], r4
   29e30:	vld1.64	{d20-d21}, [r3]
   29e34:	vld1.64	{d18-d19}, [r2]
   29e38:	mov	r2, sp
   29e3c:	add	r5, r2, #16
   29e40:	vst1.64	{d16-d17}, [r2], r4
   29e44:	vst1.64	{d20-d21}, [r2]
   29e48:	mov	r2, #10
   29e4c:	vst1.64	{d18-d19}, [r5]
   29e50:	str	r2, [sp]
   29e54:	bne	29e5c <__assert_fail@plt+0x18b3c>
   29e58:	bl	11314 <abort@plt>
   29e5c:	str	r1, [sp, #44]	; 0x2c
   29e60:	str	r0, [sp, #40]	; 0x28
   29e64:	mov	r3, sp
   29e68:	mov	r0, #0
   29e6c:	mov	r1, lr
   29e70:	mov	r2, ip
   29e74:	bl	29710 <__assert_fail@plt+0x183f0>
   29e78:	sub	sp, fp, #8
   29e7c:	pop	{r4, r5, fp, pc}
   29e80:	movw	r3, #12600	; 0x3138
   29e84:	movt	r3, #4
   29e88:	b	29710 <__assert_fail@plt+0x183f0>
   29e8c:	movw	r3, #12600	; 0x3138
   29e90:	mov	r2, r1
   29e94:	mov	r1, r0
   29e98:	mov	r0, #0
   29e9c:	movt	r3, #4
   29ea0:	b	29710 <__assert_fail@plt+0x183f0>
   29ea4:	movw	r3, #12600	; 0x3138
   29ea8:	mvn	r2, #0
   29eac:	movt	r3, #4
   29eb0:	b	29710 <__assert_fail@plt+0x183f0>
   29eb4:	movw	r3, #12600	; 0x3138
   29eb8:	mov	r1, r0
   29ebc:	mov	r0, #0
   29ec0:	mvn	r2, #0
   29ec4:	movt	r3, #4
   29ec8:	b	29710 <__assert_fail@plt+0x183f0>
   29ecc:	push	{r4, r5, fp, lr}
   29ed0:	add	fp, sp, #8
   29ed4:	mov	r5, r0
   29ed8:	mov	r4, r1
   29edc:	mov	r0, #0
   29ee0:	mov	r2, #5
   29ee4:	mov	r1, r5
   29ee8:	bl	110ec <dcgettext@plt>
   29eec:	cmp	r0, r5
   29ef0:	popne	{r4, r5, fp, pc}
   29ef4:	bl	2b630 <__assert_fail@plt+0x1a310>
   29ef8:	ldrb	r1, [r0]
   29efc:	and	r1, r1, #223	; 0xdf
   29f00:	cmp	r1, #71	; 0x47
   29f04:	beq	29f6c <__assert_fail@plt+0x18c4c>
   29f08:	cmp	r1, #85	; 0x55
   29f0c:	bne	29fc4 <__assert_fail@plt+0x18ca4>
   29f10:	ldrb	r1, [r0, #1]
   29f14:	and	r1, r1, #223	; 0xdf
   29f18:	cmp	r1, #84	; 0x54
   29f1c:	bne	29fc4 <__assert_fail@plt+0x18ca4>
   29f20:	ldrb	r1, [r0, #2]
   29f24:	and	r1, r1, #223	; 0xdf
   29f28:	cmp	r1, #70	; 0x46
   29f2c:	bne	29fc4 <__assert_fail@plt+0x18ca4>
   29f30:	ldrb	r1, [r0, #3]
   29f34:	cmp	r1, #45	; 0x2d
   29f38:	bne	29fc4 <__assert_fail@plt+0x18ca4>
   29f3c:	ldrb	r1, [r0, #4]
   29f40:	cmp	r1, #56	; 0x38
   29f44:	bne	29fc4 <__assert_fail@plt+0x18ca4>
   29f48:	ldrb	r0, [r0, #5]
   29f4c:	cmp	r0, #0
   29f50:	bne	29fc4 <__assert_fail@plt+0x18ca4>
   29f54:	ldrb	r1, [r5]
   29f58:	movw	r2, #6944	; 0x1b20
   29f5c:	movw	r0, #6948	; 0x1b24
   29f60:	movt	r2, #3
   29f64:	movt	r0, #3
   29f68:	b	29ff4 <__assert_fail@plt+0x18cd4>
   29f6c:	ldrb	r1, [r0, #1]
   29f70:	and	r1, r1, #223	; 0xdf
   29f74:	cmp	r1, #66	; 0x42
   29f78:	bne	29fc4 <__assert_fail@plt+0x18ca4>
   29f7c:	ldrb	r1, [r0, #2]
   29f80:	cmp	r1, #49	; 0x31
   29f84:	bne	29fc4 <__assert_fail@plt+0x18ca4>
   29f88:	ldrb	r1, [r0, #3]
   29f8c:	cmp	r1, #56	; 0x38
   29f90:	bne	29fc4 <__assert_fail@plt+0x18ca4>
   29f94:	ldrb	r1, [r0, #4]
   29f98:	cmp	r1, #48	; 0x30
   29f9c:	bne	29fc4 <__assert_fail@plt+0x18ca4>
   29fa0:	ldrb	r1, [r0, #5]
   29fa4:	cmp	r1, #51	; 0x33
   29fa8:	bne	29fc4 <__assert_fail@plt+0x18ca4>
   29fac:	ldrb	r1, [r0, #6]
   29fb0:	cmp	r1, #48	; 0x30
   29fb4:	bne	29fc4 <__assert_fail@plt+0x18ca4>
   29fb8:	ldrb	r0, [r0, #7]
   29fbc:	cmp	r0, #0
   29fc0:	beq	29fe0 <__assert_fail@plt+0x18cc0>
   29fc4:	movw	r1, #6940	; 0x1b1c
   29fc8:	movw	r0, #7956	; 0x1f14
   29fcc:	cmp	r4, #9
   29fd0:	movt	r1, #3
   29fd4:	movt	r0, #3
   29fd8:	moveq	r0, r1
   29fdc:	pop	{r4, r5, fp, pc}
   29fe0:	ldrb	r1, [r5]
   29fe4:	movw	r2, #6952	; 0x1b28
   29fe8:	movw	r0, #6956	; 0x1b2c
   29fec:	movt	r2, #3
   29ff0:	movt	r0, #3
   29ff4:	cmp	r1, #96	; 0x60
   29ff8:	moveq	r0, r2
   29ffc:	pop	{r4, r5, fp, pc}
   2a000:	mov	r1, #0
   2a004:	str	r1, [r0]
   2a008:	str	r1, [r0, #4]
   2a00c:	bx	lr
   2a010:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2a014:	add	fp, sp, #28
   2a018:	sub	sp, sp, #52	; 0x34
   2a01c:	vmov.i32	q8, #0	; 0x00000000
   2a020:	add	sl, sp, #16
   2a024:	mov	r5, r0
   2a028:	mov	r8, r3
   2a02c:	cmp	r2, #0
   2a030:	mov	r0, sl
   2a034:	vst1.64	{d16-d17}, [r0]!
   2a038:	vst1.64	{d16-d17}, [r0]
   2a03c:	beq	2a064 <__assert_fail@plt+0x18d44>
   2a040:	mov	r0, #1
   2a044:	ldrb	r3, [r1], #1
   2a048:	subs	r2, r2, #1
   2a04c:	ubfx	r7, r3, #5, #3
   2a050:	and	r3, r3, #31
   2a054:	ldr	r6, [sl, r7, lsl #2]
   2a058:	orr	r3, r6, r0, lsl r3
   2a05c:	str	r3, [sl, r7, lsl #2]
   2a060:	bne	2a044 <__assert_fail@plt+0x18d24>
   2a064:	ldmib	r5, {r0, r1}
   2a068:	cmp	r0, r1
   2a06c:	bcs	2a0d0 <__assert_fail@plt+0x18db0>
   2a070:	add	r1, r0, #1
   2a074:	str	r1, [r5, #4]
   2a078:	ldrb	r6, [r0]
   2a07c:	mov	r4, #1
   2a080:	lsr	r0, r6, #5
   2a084:	and	r1, r6, #31
   2a088:	ldr	r0, [sl, r0, lsl #2]
   2a08c:	tst	r0, r4, lsl r1
   2a090:	beq	2a0e4 <__assert_fail@plt+0x18dc4>
   2a094:	ldmib	r5, {r0, r1}
   2a098:	cmp	r0, r1
   2a09c:	bcs	2a0b8 <__assert_fail@plt+0x18d98>
   2a0a0:	add	r1, r0, #1
   2a0a4:	str	r1, [r5, #4]
   2a0a8:	ldrb	r6, [r0]
   2a0ac:	cmn	r6, #1
   2a0b0:	bgt	2a080 <__assert_fail@plt+0x18d60>
   2a0b4:	b	2a0e4 <__assert_fail@plt+0x18dc4>
   2a0b8:	mov	r0, r5
   2a0bc:	bl	112b4 <__uflow@plt>
   2a0c0:	mov	r6, r0
   2a0c4:	cmn	r6, #1
   2a0c8:	bgt	2a080 <__assert_fail@plt+0x18d60>
   2a0cc:	b	2a0e4 <__assert_fail@plt+0x18dc4>
   2a0d0:	mov	r0, r5
   2a0d4:	bl	112b4 <__uflow@plt>
   2a0d8:	mov	r6, r0
   2a0dc:	cmp	r0, #0
   2a0e0:	bpl	2a07c <__assert_fail@plt+0x18d5c>
   2a0e4:	ldm	r8, {r0, r7}
   2a0e8:	cmp	r6, #0
   2a0ec:	str	r0, [sp, #12]
   2a0f0:	bmi	2a19c <__assert_fail@plt+0x18e7c>
   2a0f4:	str	r8, [sp, #8]
   2a0f8:	mov	r9, #0
   2a0fc:	mov	r8, #1
   2a100:	mov	r4, #0
   2a104:	cmp	r4, r0
   2a108:	bne	2a128 <__assert_fail@plt+0x18e08>
   2a10c:	mov	r0, r7
   2a110:	add	r1, sp, #12
   2a114:	mov	r2, #1
   2a118:	mvn	r3, #0
   2a11c:	str	r8, [sp]
   2a120:	bl	2aee4 <__assert_fail@plt+0x19bc4>
   2a124:	mov	r7, r0
   2a128:	tst	r9, #1
   2a12c:	lsreq	r0, r6, #5
   2a130:	andeq	r1, r6, #31
   2a134:	ldreq	r0, [sl, r0, lsl #2]
   2a138:	tsteq	r0, r8, lsl r1
   2a13c:	bne	2a184 <__assert_fail@plt+0x18e64>
   2a140:	strb	r6, [r7, r4]
   2a144:	ldmib	r5, {r0, r1}
   2a148:	cmp	r0, r1
   2a14c:	bcs	2a174 <__assert_fail@plt+0x18e54>
   2a150:	add	r1, r0, #1
   2a154:	str	r1, [r5, #4]
   2a158:	ldrb	r6, [r0]
   2a15c:	ldr	r0, [sp, #12]
   2a160:	add	r4, r4, #1
   2a164:	lsr	r9, r6, #31
   2a168:	cmp	r4, r0
   2a16c:	beq	2a10c <__assert_fail@plt+0x18dec>
   2a170:	b	2a128 <__assert_fail@plt+0x18e08>
   2a174:	mov	r0, r5
   2a178:	bl	112b4 <__uflow@plt>
   2a17c:	mov	r6, r0
   2a180:	b	2a15c <__assert_fail@plt+0x18e3c>
   2a184:	mov	r0, #0
   2a188:	ldr	r1, [sp, #8]
   2a18c:	strb	r0, [r7, r4]
   2a190:	ldr	r0, [sp, #12]
   2a194:	stm	r1, {r0, r7}
   2a198:	b	2a1a0 <__assert_fail@plt+0x18e80>
   2a19c:	mvn	r4, #0
   2a1a0:	mov	r0, r4
   2a1a4:	sub	sp, fp, #28
   2a1a8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2a1ac:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2a1b0:	add	fp, sp, #28
   2a1b4:	sub	sp, sp, #28
   2a1b8:	cmp	r1, #0
   2a1bc:	add	r4, r1, #1
   2a1c0:	mov	r7, r0
   2a1c4:	mov	r1, #4
   2a1c8:	str	r3, [sp, #12]
   2a1cc:	str	r2, [sp, #8]
   2a1d0:	movweq	r4, #64	; 0x40
   2a1d4:	mov	r0, r4
   2a1d8:	str	r4, [sp, #16]
   2a1dc:	bl	2ad84 <__assert_fail@plt+0x19a64>
   2a1e0:	mov	r6, r0
   2a1e4:	mov	r0, r4
   2a1e8:	mov	r1, #4
   2a1ec:	bl	2ad84 <__assert_fail@plt+0x19a64>
   2a1f0:	mov	r4, #0
   2a1f4:	mov	r5, r0
   2a1f8:	str	r4, [sp, #24]
   2a1fc:	str	r4, [sp, #20]
   2a200:	ldr	r1, [sp, #8]
   2a204:	ldr	r2, [sp, #12]
   2a208:	mov	r0, r7
   2a20c:	add	r3, sp, #20
   2a210:	bl	2a010 <__assert_fail@plt+0x18cf0>
   2a214:	mov	sl, r0
   2a218:	ldr	r0, [sp, #16]
   2a21c:	cmp	r4, r0
   2a220:	blt	2a258 <__assert_fail@plt+0x18f38>
   2a224:	mov	r0, #4
   2a228:	add	r1, sp, #16
   2a22c:	mov	r2, #1
   2a230:	mvn	r3, #0
   2a234:	str	r0, [sp]
   2a238:	mov	r0, r6
   2a23c:	bl	2aee4 <__assert_fail@plt+0x19bc4>
   2a240:	ldr	r1, [sp, #16]
   2a244:	mov	r6, r0
   2a248:	mov	r0, r5
   2a24c:	mov	r2, #4
   2a250:	bl	2ac78 <__assert_fail@plt+0x19958>
   2a254:	mov	r5, r0
   2a258:	cmn	sl, #1
   2a25c:	beq	2a290 <__assert_fail@plt+0x18f70>
   2a260:	add	r8, sl, #1
   2a264:	mov	r1, #1
   2a268:	mov	r0, r8
   2a26c:	bl	2ad84 <__assert_fail@plt+0x19a64>
   2a270:	str	sl, [r5, r4, lsl #2]
   2a274:	mov	r2, r8
   2a278:	mov	r9, r0
   2a27c:	ldr	r1, [sp, #24]
   2a280:	bl	110d4 <memcpy@plt>
   2a284:	str	r9, [r6, r4, lsl #2]
   2a288:	add	r4, r4, #1
   2a28c:	b	2a200 <__assert_fail@plt+0x18ee0>
   2a290:	mov	r0, #0
   2a294:	str	r0, [r6, r4, lsl #2]
   2a298:	str	r0, [r5, r4, lsl #2]
   2a29c:	ldr	r0, [sp, #24]
   2a2a0:	bl	184a0 <__assert_fail@plt+0x7180>
   2a2a4:	ldr	r0, [fp, #8]
   2a2a8:	str	r6, [r0]
   2a2ac:	ldr	r0, [fp, #12]
   2a2b0:	cmp	r0, #0
   2a2b4:	beq	2a2c0 <__assert_fail@plt+0x18fa0>
   2a2b8:	str	r5, [r0]
   2a2bc:	b	2a2c8 <__assert_fail@plt+0x18fa8>
   2a2c0:	mov	r0, r5
   2a2c4:	bl	184a0 <__assert_fail@plt+0x7180>
   2a2c8:	mov	r0, r4
   2a2cc:	sub	sp, fp, #28
   2a2d0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2a2d4:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   2a2d8:	add	fp, sp, #24
   2a2dc:	movw	r8, #0
   2a2e0:	mov	r6, r2
   2a2e4:	mov	r4, r1
   2a2e8:	mov	r5, r0
   2a2ec:	movt	r8, #32752	; 0x7ff0
   2a2f0:	mov	r0, r5
   2a2f4:	mov	r1, r4
   2a2f8:	mov	r2, r6
   2a2fc:	bl	11260 <write@plt>
   2a300:	mov	r7, r0
   2a304:	cmn	r0, #1
   2a308:	bgt	2a330 <__assert_fail@plt+0x19010>
   2a30c:	bl	11218 <__errno_location@plt>
   2a310:	ldr	r0, [r0]
   2a314:	cmp	r0, #4
   2a318:	beq	2a2f0 <__assert_fail@plt+0x18fd0>
   2a31c:	cmp	r6, r8
   2a320:	bls	2a330 <__assert_fail@plt+0x19010>
   2a324:	cmp	r0, #22
   2a328:	mov	r6, r8
   2a32c:	beq	2a2f0 <__assert_fail@plt+0x18fd0>
   2a330:	mov	r0, r7
   2a334:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   2a338:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   2a33c:	add	fp, sp, #24
   2a340:	sub	sp, sp, #64	; 0x40
   2a344:	mov	r5, r1
   2a348:	bl	110f8 <strdup@plt>
   2a34c:	cmp	r0, #0
   2a350:	beq	2a5f8 <__assert_fail@plt+0x192d8>
   2a354:	mov	r4, r0
   2a358:	bl	11158 <__ctype_get_mb_cur_max@plt>
   2a35c:	cmp	r0, #2
   2a360:	bcc	2a538 <__assert_fail@plt+0x19218>
   2a364:	cmp	r5, #0
   2a368:	beq	2a40c <__assert_fail@plt+0x190ec>
   2a36c:	mov	r0, r4
   2a370:	str	r4, [sp, #24]
   2a374:	bl	11200 <strlen@plt>
   2a378:	mov	r7, #0
   2a37c:	add	r1, r4, r0
   2a380:	cmp	r0, #1
   2a384:	mov	r6, r4
   2a388:	str	r7, [sp, #16]
   2a38c:	str	r7, [sp, #12]
   2a390:	strb	r7, [sp, #20]
   2a394:	strb	r7, [sp, #8]
   2a398:	str	r1, [sp, #4]
   2a39c:	blt	2a3ec <__assert_fail@plt+0x190cc>
   2a3a0:	add	r6, sp, #4
   2a3a4:	mov	r0, r6
   2a3a8:	bl	2b668 <__assert_fail@plt+0x1a348>
   2a3ac:	ldrb	r0, [sp, #32]
   2a3b0:	cmp	r0, #0
   2a3b4:	beq	2a3e8 <__assert_fail@plt+0x190c8>
   2a3b8:	ldr	r0, [sp, #36]	; 0x24
   2a3bc:	bl	111e8 <iswspace@plt>
   2a3c0:	cmp	r0, #0
   2a3c4:	beq	2a3e8 <__assert_fail@plt+0x190c8>
   2a3c8:	strb	r7, [sp, #20]
   2a3cc:	ldr	r1, [sp, #24]
   2a3d0:	ldr	r2, [sp, #28]
   2a3d4:	ldr	r0, [sp, #4]
   2a3d8:	add	r1, r1, r2
   2a3dc:	cmp	r1, r0
   2a3e0:	str	r1, [sp, #24]
   2a3e4:	bcc	2a3a4 <__assert_fail@plt+0x19084>
   2a3e8:	ldr	r6, [sp, #24]
   2a3ec:	mov	r0, r6
   2a3f0:	bl	11200 <strlen@plt>
   2a3f4:	add	r2, r0, #1
   2a3f8:	mov	r0, r4
   2a3fc:	mov	r1, r6
   2a400:	bl	110b0 <memmove@plt>
   2a404:	cmp	r5, #1
   2a408:	beq	2a5ec <__assert_fail@plt+0x192cc>
   2a40c:	mov	r0, r4
   2a410:	str	r4, [sp, #24]
   2a414:	bl	11200 <strlen@plt>
   2a418:	mov	r6, #0
   2a41c:	cmp	r0, #1
   2a420:	add	r1, r4, r0
   2a424:	str	r6, [sp, #16]
   2a428:	str	r6, [sp, #12]
   2a42c:	strb	r6, [sp, #20]
   2a430:	strb	r6, [sp, #8]
   2a434:	str	r1, [sp, #4]
   2a438:	blt	2a5ec <__assert_fail@plt+0x192cc>
   2a43c:	add	r5, sp, #4
   2a440:	mov	r7, #0
   2a444:	b	2a46c <__assert_fail@plt+0x1914c>
   2a448:	mov	r7, #1
   2a44c:	strb	r6, [sp, #20]
   2a450:	ldr	r1, [sp, #24]
   2a454:	ldr	r2, [sp, #28]
   2a458:	ldr	r0, [sp, #4]
   2a45c:	add	r1, r1, r2
   2a460:	cmp	r1, r0
   2a464:	str	r1, [sp, #24]
   2a468:	bcs	2a5e0 <__assert_fail@plt+0x192c0>
   2a46c:	mov	r0, r5
   2a470:	bl	2b668 <__assert_fail@plt+0x1a348>
   2a474:	cmp	r7, #1
   2a478:	beq	2a4ac <__assert_fail@plt+0x1918c>
   2a47c:	cmp	r7, #0
   2a480:	bne	2a4f4 <__assert_fail@plt+0x191d4>
   2a484:	ldrb	r0, [sp, #32]
   2a488:	mov	r7, #1
   2a48c:	cmp	r0, #0
   2a490:	beq	2a44c <__assert_fail@plt+0x1912c>
   2a494:	ldr	r0, [sp, #36]	; 0x24
   2a498:	bl	111e8 <iswspace@plt>
   2a49c:	cmp	r0, #0
   2a4a0:	beq	2a518 <__assert_fail@plt+0x191f8>
   2a4a4:	mov	r7, #0
   2a4a8:	b	2a44c <__assert_fail@plt+0x1912c>
   2a4ac:	ldrb	r0, [sp, #32]
   2a4b0:	mov	r7, #1
   2a4b4:	cmp	r0, #0
   2a4b8:	beq	2a44c <__assert_fail@plt+0x1912c>
   2a4bc:	ldr	r0, [sp, #36]	; 0x24
   2a4c0:	bl	111e8 <iswspace@plt>
   2a4c4:	cmp	r0, #0
   2a4c8:	beq	2a44c <__assert_fail@plt+0x1912c>
   2a4cc:	ldrb	r0, [sp, #32]
   2a4d0:	cmp	r0, #0
   2a4d4:	beq	2a448 <__assert_fail@plt+0x19128>
   2a4d8:	ldr	r0, [sp, #36]	; 0x24
   2a4dc:	bl	111e8 <iswspace@plt>
   2a4e0:	cmp	r0, #0
   2a4e4:	beq	2a448 <__assert_fail@plt+0x19128>
   2a4e8:	ldr	r8, [sp, #24]
   2a4ec:	mov	r7, #2
   2a4f0:	b	2a44c <__assert_fail@plt+0x1912c>
   2a4f4:	ldrb	r0, [sp, #32]
   2a4f8:	cmp	r0, #0
   2a4fc:	beq	2a448 <__assert_fail@plt+0x19128>
   2a500:	ldr	r0, [sp, #36]	; 0x24
   2a504:	bl	111e8 <iswspace@plt>
   2a508:	mov	r7, #2
   2a50c:	cmp	r0, #0
   2a510:	bne	2a44c <__assert_fail@plt+0x1912c>
   2a514:	b	2a448 <__assert_fail@plt+0x19128>
   2a518:	ldrb	r0, [sp, #32]
   2a51c:	cmp	r0, #0
   2a520:	beq	2a44c <__assert_fail@plt+0x1912c>
   2a524:	ldr	r0, [sp, #36]	; 0x24
   2a528:	bl	111e8 <iswspace@plt>
   2a52c:	cmp	r0, #0
   2a530:	movne	r7, #1
   2a534:	b	2a44c <__assert_fail@plt+0x1912c>
   2a538:	cmp	r5, #0
   2a53c:	beq	2a598 <__assert_fail@plt+0x19278>
   2a540:	ldrb	r7, [r4]
   2a544:	mov	r6, r4
   2a548:	cmp	r7, #0
   2a54c:	beq	2a578 <__assert_fail@plt+0x19258>
   2a550:	bl	111d0 <__ctype_b_loc@plt>
   2a554:	ldr	r0, [r0]
   2a558:	mov	r6, r4
   2a55c:	uxtb	r1, r7
   2a560:	add	r1, r0, r1, lsl #1
   2a564:	ldrb	r1, [r1, #1]
   2a568:	tst	r1, #32
   2a56c:	ldrbne	r7, [r6, #1]!
   2a570:	cmpne	r7, #0
   2a574:	bne	2a55c <__assert_fail@plt+0x1923c>
   2a578:	mov	r0, r6
   2a57c:	bl	11200 <strlen@plt>
   2a580:	add	r2, r0, #1
   2a584:	mov	r0, r4
   2a588:	mov	r1, r6
   2a58c:	bl	110b0 <memmove@plt>
   2a590:	cmp	r5, #1
   2a594:	beq	2a5ec <__assert_fail@plt+0x192cc>
   2a598:	mov	r0, r4
   2a59c:	bl	11200 <strlen@plt>
   2a5a0:	add	r0, r4, r0
   2a5a4:	sub	r5, r0, #1
   2a5a8:	cmp	r5, r4
   2a5ac:	bcc	2a5ec <__assert_fail@plt+0x192cc>
   2a5b0:	bl	111d0 <__ctype_b_loc@plt>
   2a5b4:	mov	r1, #0
   2a5b8:	ldrb	r2, [r5]
   2a5bc:	ldr	r3, [r0]
   2a5c0:	add	r2, r3, r2, lsl #1
   2a5c4:	ldrb	r2, [r2, #1]
   2a5c8:	tst	r2, #32
   2a5cc:	beq	2a5ec <__assert_fail@plt+0x192cc>
   2a5d0:	strb	r1, [r5], #-1
   2a5d4:	cmp	r5, r4
   2a5d8:	bcs	2a5b8 <__assert_fail@plt+0x19298>
   2a5dc:	b	2a5ec <__assert_fail@plt+0x192cc>
   2a5e0:	cmp	r7, #2
   2a5e4:	moveq	r0, #0
   2a5e8:	strbeq	r0, [r8]
   2a5ec:	mov	r0, r4
   2a5f0:	sub	sp, fp, #24
   2a5f4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   2a5f8:	bl	2b1f0 <__assert_fail@plt+0x19ed0>
   2a5fc:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   2a600:	add	fp, sp, #24
   2a604:	sub	sp, sp, #32
   2a608:	ldr	r6, [fp, #12]
   2a60c:	ldr	r7, [fp, #8]
   2a610:	mov	r4, r2
   2a614:	mov	r8, r0
   2a618:	cmp	r1, #0
   2a61c:	beq	2a644 <__assert_fail@plt+0x19324>
   2a620:	movw	r2, #7044	; 0x1b84
   2a624:	mov	r5, r1
   2a628:	str	r3, [sp, #4]
   2a62c:	str	r4, [sp]
   2a630:	mov	r0, r8
   2a634:	mov	r1, #1
   2a638:	movt	r2, #3
   2a63c:	mov	r3, r5
   2a640:	b	2a65c <__assert_fail@plt+0x1933c>
   2a644:	movw	r2, #7056	; 0x1b90
   2a648:	str	r3, [sp]
   2a64c:	mov	r0, r8
   2a650:	mov	r1, #1
   2a654:	mov	r3, r4
   2a658:	movt	r2, #3
   2a65c:	bl	11278 <__fprintf_chk@plt>
   2a660:	movw	r1, #7063	; 0x1b97
   2a664:	mov	r0, #0
   2a668:	mov	r2, #5
   2a66c:	movt	r1, #3
   2a670:	bl	110ec <dcgettext@plt>
   2a674:	movw	r2, #7781	; 0x1e65
   2a678:	mov	r3, r0
   2a67c:	movw	r0, #2022	; 0x7e6
   2a680:	mov	r1, #1
   2a684:	movt	r2, #3
   2a688:	str	r0, [sp]
   2a68c:	mov	r0, r8
   2a690:	bl	11278 <__fprintf_chk@plt>
   2a694:	movw	r4, #53672	; 0xd1a8
   2a698:	mov	r1, r8
   2a69c:	movt	r4, #2
   2a6a0:	mov	r0, r4
   2a6a4:	bl	1105c <fputs_unlocked@plt>
   2a6a8:	movw	r1, #7067	; 0x1b9b
   2a6ac:	mov	r0, #0
   2a6b0:	mov	r2, #5
   2a6b4:	movt	r1, #3
   2a6b8:	bl	110ec <dcgettext@plt>
   2a6bc:	movw	r3, #7238	; 0x1c46
   2a6c0:	mov	r2, r0
   2a6c4:	mov	r0, r8
   2a6c8:	mov	r1, #1
   2a6cc:	movt	r3, #3
   2a6d0:	bl	11278 <__fprintf_chk@plt>
   2a6d4:	mov	r0, r4
   2a6d8:	mov	r1, r8
   2a6dc:	bl	1105c <fputs_unlocked@plt>
   2a6e0:	cmp	r6, #9
   2a6e4:	bhi	2a720 <__assert_fail@plt+0x19400>
   2a6e8:	add	r0, pc, #0
   2a6ec:	ldr	pc, [r0, r6, lsl #2]
   2a6f0:	andeq	sl, r2, r8, lsl r7
   2a6f4:	andeq	sl, r2, ip, lsr #14
   2a6f8:	andeq	sl, r2, ip, asr r7
   2a6fc:	andeq	sl, r2, r4, lsl #15
   2a700:	andeq	sl, r2, ip, lsr #15
   2a704:	ldrdeq	sl, [r2], -r4
   2a708:	strdeq	sl, [r2], -ip
   2a70c:	andeq	sl, r2, r4, lsr r8
   2a710:	ldrdeq	sl, [r2], -r4
   2a714:	andeq	sl, r2, ip, ror r8
   2a718:	sub	sp, fp, #24
   2a71c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   2a720:	movw	r1, #7591	; 0x1da7
   2a724:	movt	r1, #3
   2a728:	b	2a884 <__assert_fail@plt+0x19564>
   2a72c:	movw	r1, #7272	; 0x1c68
   2a730:	mov	r0, #0
   2a734:	mov	r2, #5
   2a738:	movt	r1, #3
   2a73c:	bl	110ec <dcgettext@plt>
   2a740:	ldr	r3, [r7]
   2a744:	mov	r2, r0
   2a748:	mov	r0, r8
   2a74c:	mov	r1, #1
   2a750:	sub	sp, fp, #24
   2a754:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   2a758:	b	11278 <__fprintf_chk@plt>
   2a75c:	movw	r1, #7288	; 0x1c78
   2a760:	mov	r0, #0
   2a764:	mov	r2, #5
   2a768:	movt	r1, #3
   2a76c:	bl	110ec <dcgettext@plt>
   2a770:	mov	r2, r0
   2a774:	ldr	r3, [r7]
   2a778:	ldr	r0, [r7, #4]
   2a77c:	str	r0, [sp]
   2a780:	b	2a870 <__assert_fail@plt+0x19550>
   2a784:	movw	r1, #7311	; 0x1c8f
   2a788:	mov	r0, #0
   2a78c:	mov	r2, #5
   2a790:	movt	r1, #3
   2a794:	bl	110ec <dcgettext@plt>
   2a798:	mov	r2, r0
   2a79c:	ldr	r3, [r7]
   2a7a0:	ldmib	r7, {r0, r1}
   2a7a4:	stm	sp, {r0, r1}
   2a7a8:	b	2a870 <__assert_fail@plt+0x19550>
   2a7ac:	movw	r1, #7339	; 0x1cab
   2a7b0:	mov	r0, #0
   2a7b4:	mov	r2, #5
   2a7b8:	movt	r1, #3
   2a7bc:	bl	110ec <dcgettext@plt>
   2a7c0:	ldr	r3, [r7]
   2a7c4:	mov	r2, r0
   2a7c8:	ldmib	r7, {r0, r1, r7}
   2a7cc:	stm	sp, {r0, r1, r7}
   2a7d0:	b	2a870 <__assert_fail@plt+0x19550>
   2a7d4:	movw	r1, #7371	; 0x1ccb
   2a7d8:	mov	r0, #0
   2a7dc:	mov	r2, #5
   2a7e0:	movt	r1, #3
   2a7e4:	bl	110ec <dcgettext@plt>
   2a7e8:	ldr	r3, [r7]
   2a7ec:	mov	r2, r0
   2a7f0:	ldmib	r7, {r0, r1, r6, r7}
   2a7f4:	stm	sp, {r0, r1, r6, r7}
   2a7f8:	b	2a870 <__assert_fail@plt+0x19550>
   2a7fc:	movw	r1, #7407	; 0x1cef
   2a800:	mov	r0, #0
   2a804:	mov	r2, #5
   2a808:	movt	r1, #3
   2a80c:	bl	110ec <dcgettext@plt>
   2a810:	mov	r2, r0
   2a814:	ldr	r3, [r7]
   2a818:	ldmib	r7, {r0, r1, r6}
   2a81c:	ldr	r5, [r7, #16]
   2a820:	ldr	r7, [r7, #20]
   2a824:	stm	sp, {r0, r1, r6}
   2a828:	str	r5, [sp, #12]
   2a82c:	str	r7, [sp, #16]
   2a830:	b	2a870 <__assert_fail@plt+0x19550>
   2a834:	movw	r1, #7447	; 0x1d17
   2a838:	mov	r0, #0
   2a83c:	mov	r2, #5
   2a840:	movt	r1, #3
   2a844:	bl	110ec <dcgettext@plt>
   2a848:	mov	r2, r0
   2a84c:	ldr	r3, [r7]
   2a850:	ldmib	r7, {r0, r1, r6}
   2a854:	ldr	r5, [r7, #16]
   2a858:	ldr	r4, [r7, #20]
   2a85c:	ldr	r7, [r7, #24]
   2a860:	stm	sp, {r0, r1, r6}
   2a864:	str	r5, [sp, #12]
   2a868:	str	r4, [sp, #16]
   2a86c:	str	r7, [sp, #20]
   2a870:	mov	r0, r8
   2a874:	mov	r1, #1
   2a878:	b	2a924 <__assert_fail@plt+0x19604>
   2a87c:	movw	r1, #7539	; 0x1d73
   2a880:	movt	r1, #3
   2a884:	mov	r0, #0
   2a888:	mov	r2, #5
   2a88c:	bl	110ec <dcgettext@plt>
   2a890:	mov	ip, r0
   2a894:	ldr	r3, [r7]
   2a898:	ldr	r0, [r7, #4]
   2a89c:	ldr	r1, [r7, #8]
   2a8a0:	ldr	r6, [r7, #12]
   2a8a4:	ldr	r5, [r7, #16]
   2a8a8:	ldr	r4, [r7, #20]
   2a8ac:	ldr	r2, [r7, #24]
   2a8b0:	ldr	lr, [r7, #28]
   2a8b4:	ldr	r7, [r7, #32]
   2a8b8:	stm	sp, {r0, r1, r6}
   2a8bc:	str	r5, [sp, #12]
   2a8c0:	str	r4, [sp, #16]
   2a8c4:	str	r2, [sp, #20]
   2a8c8:	str	lr, [sp, #24]
   2a8cc:	str	r7, [sp, #28]
   2a8d0:	b	2a918 <__assert_fail@plt+0x195f8>
   2a8d4:	movw	r1, #7491	; 0x1d43
   2a8d8:	mov	r0, #0
   2a8dc:	mov	r2, #5
   2a8e0:	movt	r1, #3
   2a8e4:	bl	110ec <dcgettext@plt>
   2a8e8:	mov	ip, r0
   2a8ec:	ldr	r3, [r7]
   2a8f0:	ldmib	r7, {r0, r1, r6}
   2a8f4:	ldr	r5, [r7, #16]
   2a8f8:	ldr	r4, [r7, #20]
   2a8fc:	ldr	r2, [r7, #24]
   2a900:	ldr	r7, [r7, #28]
   2a904:	stm	sp, {r0, r1, r6}
   2a908:	str	r5, [sp, #12]
   2a90c:	str	r4, [sp, #16]
   2a910:	str	r2, [sp, #20]
   2a914:	str	r7, [sp, #24]
   2a918:	mov	r0, r8
   2a91c:	mov	r1, #1
   2a920:	mov	r2, ip
   2a924:	bl	11278 <__fprintf_chk@plt>
   2a928:	sub	sp, fp, #24
   2a92c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   2a930:	push	{r4, sl, fp, lr}
   2a934:	add	fp, sp, #8
   2a938:	sub	sp, sp, #8
   2a93c:	ldr	ip, [fp, #8]
   2a940:	mov	lr, #0
   2a944:	ldr	r4, [ip, lr, lsl #2]
   2a948:	add	lr, lr, #1
   2a94c:	cmp	r4, #0
   2a950:	bne	2a944 <__assert_fail@plt+0x19624>
   2a954:	sub	r4, lr, #1
   2a958:	str	ip, [sp]
   2a95c:	str	r4, [sp, #4]
   2a960:	bl	2a5fc <__assert_fail@plt+0x192dc>
   2a964:	sub	sp, fp, #8
   2a968:	pop	{r4, sl, fp, pc}
   2a96c:	push	{fp, lr}
   2a970:	mov	fp, sp
   2a974:	sub	sp, sp, #48	; 0x30
   2a978:	ldr	ip, [fp, #8]
   2a97c:	ldr	lr, [ip]
   2a980:	cmp	lr, #0
   2a984:	str	lr, [sp, #8]
   2a988:	beq	2aa24 <__assert_fail@plt+0x19704>
   2a98c:	ldr	lr, [ip, #4]
   2a990:	cmp	lr, #0
   2a994:	str	lr, [sp, #12]
   2a998:	beq	2aa2c <__assert_fail@plt+0x1970c>
   2a99c:	ldr	lr, [ip, #8]
   2a9a0:	cmp	lr, #0
   2a9a4:	str	lr, [sp, #16]
   2a9a8:	beq	2aa34 <__assert_fail@plt+0x19714>
   2a9ac:	ldr	lr, [ip, #12]
   2a9b0:	cmp	lr, #0
   2a9b4:	str	lr, [sp, #20]
   2a9b8:	beq	2aa3c <__assert_fail@plt+0x1971c>
   2a9bc:	ldr	lr, [ip, #16]
   2a9c0:	cmp	lr, #0
   2a9c4:	str	lr, [sp, #24]
   2a9c8:	beq	2aa44 <__assert_fail@plt+0x19724>
   2a9cc:	ldr	lr, [ip, #20]
   2a9d0:	cmp	lr, #0
   2a9d4:	str	lr, [sp, #28]
   2a9d8:	beq	2aa4c <__assert_fail@plt+0x1972c>
   2a9dc:	ldr	lr, [ip, #24]
   2a9e0:	cmp	lr, #0
   2a9e4:	str	lr, [sp, #32]
   2a9e8:	beq	2aa54 <__assert_fail@plt+0x19734>
   2a9ec:	ldr	lr, [ip, #28]
   2a9f0:	cmp	lr, #0
   2a9f4:	str	lr, [sp, #36]	; 0x24
   2a9f8:	beq	2aa5c <__assert_fail@plt+0x1973c>
   2a9fc:	ldr	lr, [ip, #32]
   2aa00:	cmp	lr, #0
   2aa04:	str	lr, [sp, #40]	; 0x28
   2aa08:	beq	2aa64 <__assert_fail@plt+0x19744>
   2aa0c:	ldr	lr, [ip, #36]	; 0x24
   2aa10:	mov	ip, #10
   2aa14:	cmp	lr, #0
   2aa18:	str	lr, [sp, #44]	; 0x2c
   2aa1c:	movweq	ip, #9
   2aa20:	b	2aa68 <__assert_fail@plt+0x19748>
   2aa24:	mov	ip, #0
   2aa28:	b	2aa68 <__assert_fail@plt+0x19748>
   2aa2c:	mov	ip, #1
   2aa30:	b	2aa68 <__assert_fail@plt+0x19748>
   2aa34:	mov	ip, #2
   2aa38:	b	2aa68 <__assert_fail@plt+0x19748>
   2aa3c:	mov	ip, #3
   2aa40:	b	2aa68 <__assert_fail@plt+0x19748>
   2aa44:	mov	ip, #4
   2aa48:	b	2aa68 <__assert_fail@plt+0x19748>
   2aa4c:	mov	ip, #5
   2aa50:	b	2aa68 <__assert_fail@plt+0x19748>
   2aa54:	mov	ip, #6
   2aa58:	b	2aa68 <__assert_fail@plt+0x19748>
   2aa5c:	mov	ip, #7
   2aa60:	b	2aa68 <__assert_fail@plt+0x19748>
   2aa64:	mov	ip, #8
   2aa68:	add	lr, sp, #8
   2aa6c:	str	ip, [sp, #4]
   2aa70:	str	lr, [sp]
   2aa74:	bl	2a5fc <__assert_fail@plt+0x192dc>
   2aa78:	mov	sp, fp
   2aa7c:	pop	{fp, pc}
   2aa80:	push	{fp, lr}
   2aa84:	mov	fp, sp
   2aa88:	sub	sp, sp, #56	; 0x38
   2aa8c:	add	ip, fp, #8
   2aa90:	str	ip, [sp, #12]
   2aa94:	ldr	lr, [fp, #8]
   2aa98:	cmp	lr, #0
   2aa9c:	str	lr, [sp, #16]
   2aaa0:	beq	2ab3c <__assert_fail@plt+0x1981c>
   2aaa4:	ldr	lr, [ip, #4]
   2aaa8:	cmp	lr, #0
   2aaac:	str	lr, [sp, #20]
   2aab0:	beq	2ab44 <__assert_fail@plt+0x19824>
   2aab4:	ldr	lr, [ip, #8]
   2aab8:	cmp	lr, #0
   2aabc:	str	lr, [sp, #24]
   2aac0:	beq	2ab4c <__assert_fail@plt+0x1982c>
   2aac4:	ldr	lr, [ip, #12]
   2aac8:	cmp	lr, #0
   2aacc:	str	lr, [sp, #28]
   2aad0:	beq	2ab54 <__assert_fail@plt+0x19834>
   2aad4:	ldr	lr, [ip, #16]
   2aad8:	cmp	lr, #0
   2aadc:	str	lr, [sp, #32]
   2aae0:	beq	2ab5c <__assert_fail@plt+0x1983c>
   2aae4:	ldr	lr, [ip, #20]
   2aae8:	cmp	lr, #0
   2aaec:	str	lr, [sp, #36]	; 0x24
   2aaf0:	beq	2ab64 <__assert_fail@plt+0x19844>
   2aaf4:	ldr	lr, [ip, #24]
   2aaf8:	cmp	lr, #0
   2aafc:	str	lr, [sp, #40]	; 0x28
   2ab00:	beq	2ab6c <__assert_fail@plt+0x1984c>
   2ab04:	ldr	lr, [ip, #28]
   2ab08:	cmp	lr, #0
   2ab0c:	str	lr, [sp, #44]	; 0x2c
   2ab10:	beq	2ab74 <__assert_fail@plt+0x19854>
   2ab14:	ldr	lr, [ip, #32]
   2ab18:	cmp	lr, #0
   2ab1c:	str	lr, [sp, #48]	; 0x30
   2ab20:	beq	2ab7c <__assert_fail@plt+0x1985c>
   2ab24:	ldr	lr, [ip, #36]	; 0x24
   2ab28:	mov	ip, #10
   2ab2c:	cmp	lr, #0
   2ab30:	str	lr, [sp, #52]	; 0x34
   2ab34:	movweq	ip, #9
   2ab38:	b	2ab80 <__assert_fail@plt+0x19860>
   2ab3c:	mov	ip, #0
   2ab40:	b	2ab80 <__assert_fail@plt+0x19860>
   2ab44:	mov	ip, #1
   2ab48:	b	2ab80 <__assert_fail@plt+0x19860>
   2ab4c:	mov	ip, #2
   2ab50:	b	2ab80 <__assert_fail@plt+0x19860>
   2ab54:	mov	ip, #3
   2ab58:	b	2ab80 <__assert_fail@plt+0x19860>
   2ab5c:	mov	ip, #4
   2ab60:	b	2ab80 <__assert_fail@plt+0x19860>
   2ab64:	mov	ip, #5
   2ab68:	b	2ab80 <__assert_fail@plt+0x19860>
   2ab6c:	mov	ip, #6
   2ab70:	b	2ab80 <__assert_fail@plt+0x19860>
   2ab74:	mov	ip, #7
   2ab78:	b	2ab80 <__assert_fail@plt+0x19860>
   2ab7c:	mov	ip, #8
   2ab80:	add	lr, sp, #16
   2ab84:	str	ip, [sp, #4]
   2ab88:	str	lr, [sp]
   2ab8c:	bl	2a5fc <__assert_fail@plt+0x192dc>
   2ab90:	mov	sp, fp
   2ab94:	pop	{fp, pc}
   2ab98:	push	{fp, lr}
   2ab9c:	mov	fp, sp
   2aba0:	movw	r0, #12676	; 0x3184
   2aba4:	movt	r0, #4
   2aba8:	ldr	r1, [r0]
   2abac:	movw	r0, #53672	; 0xd1a8
   2abb0:	movt	r0, #2
   2abb4:	bl	1105c <fputs_unlocked@plt>
   2abb8:	movw	r1, #7651	; 0x1de3
   2abbc:	mov	r0, #0
   2abc0:	mov	r2, #5
   2abc4:	movt	r1, #3
   2abc8:	bl	110ec <dcgettext@plt>
   2abcc:	movw	r2, #7671	; 0x1df7
   2abd0:	mov	r1, r0
   2abd4:	mov	r0, #1
   2abd8:	movt	r2, #3
   2abdc:	bl	11254 <__printf_chk@plt>
   2abe0:	movw	r1, #7693	; 0x1e0d
   2abe4:	mov	r0, #0
   2abe8:	mov	r2, #5
   2abec:	movt	r1, #3
   2abf0:	bl	110ec <dcgettext@plt>
   2abf4:	movw	r2, #53804	; 0xd22c
   2abf8:	movw	r3, #54011	; 0xd2fb
   2abfc:	mov	r1, r0
   2ac00:	mov	r0, #1
   2ac04:	movt	r2, #2
   2ac08:	movt	r3, #2
   2ac0c:	bl	11254 <__printf_chk@plt>
   2ac10:	movw	r1, #7713	; 0x1e21
   2ac14:	mov	r0, #0
   2ac18:	mov	r2, #5
   2ac1c:	movt	r1, #3
   2ac20:	bl	110ec <dcgettext@plt>
   2ac24:	movw	r2, #7752	; 0x1e48
   2ac28:	mov	r1, r0
   2ac2c:	mov	r0, #1
   2ac30:	movt	r2, #3
   2ac34:	pop	{fp, lr}
   2ac38:	b	11254 <__printf_chk@plt>
   2ac3c:	push	{r4, r5, r6, sl, fp, lr}
   2ac40:	add	fp, sp, #16
   2ac44:	mov	r4, r2
   2ac48:	mov	r5, r1
   2ac4c:	mov	r6, r0
   2ac50:	bl	2c5b4 <__assert_fail@plt+0x1b294>
   2ac54:	cmp	r0, #0
   2ac58:	popne	{r4, r5, r6, sl, fp, pc}
   2ac5c:	cmp	r6, #0
   2ac60:	beq	2ac74 <__assert_fail@plt+0x19954>
   2ac64:	cmp	r5, #0
   2ac68:	cmpne	r4, #0
   2ac6c:	bne	2ac74 <__assert_fail@plt+0x19954>
   2ac70:	pop	{r4, r5, r6, sl, fp, pc}
   2ac74:	bl	2b1f0 <__assert_fail@plt+0x19ed0>
   2ac78:	push	{r4, r5, r6, sl, fp, lr}
   2ac7c:	add	fp, sp, #16
   2ac80:	mov	r4, r2
   2ac84:	mov	r5, r1
   2ac88:	mov	r6, r0
   2ac8c:	bl	2c5b4 <__assert_fail@plt+0x1b294>
   2ac90:	cmp	r0, #0
   2ac94:	popne	{r4, r5, r6, sl, fp, pc}
   2ac98:	cmp	r6, #0
   2ac9c:	beq	2acb0 <__assert_fail@plt+0x19990>
   2aca0:	cmp	r5, #0
   2aca4:	cmpne	r4, #0
   2aca8:	bne	2acb0 <__assert_fail@plt+0x19990>
   2acac:	pop	{r4, r5, r6, sl, fp, pc}
   2acb0:	bl	2b1f0 <__assert_fail@plt+0x19ed0>
   2acb4:	push	{fp, lr}
   2acb8:	mov	fp, sp
   2acbc:	bl	2b334 <__assert_fail@plt+0x1a014>
   2acc0:	cmp	r0, #0
   2acc4:	popne	{fp, pc}
   2acc8:	bl	2b1f0 <__assert_fail@plt+0x19ed0>
   2accc:	push	{fp, lr}
   2acd0:	mov	fp, sp
   2acd4:	bl	2b334 <__assert_fail@plt+0x1a014>
   2acd8:	cmp	r0, #0
   2acdc:	popne	{fp, pc}
   2ace0:	bl	2b1f0 <__assert_fail@plt+0x19ed0>
   2ace4:	push	{fp, lr}
   2ace8:	mov	fp, sp
   2acec:	bl	2b334 <__assert_fail@plt+0x1a014>
   2acf0:	cmp	r0, #0
   2acf4:	popne	{fp, pc}
   2acf8:	bl	2b1f0 <__assert_fail@plt+0x19ed0>
   2acfc:	push	{r4, r5, fp, lr}
   2ad00:	add	fp, sp, #8
   2ad04:	mov	r4, r1
   2ad08:	mov	r5, r0
   2ad0c:	bl	2b364 <__assert_fail@plt+0x1a044>
   2ad10:	cmp	r0, #0
   2ad14:	popne	{r4, r5, fp, pc}
   2ad18:	cmp	r5, #0
   2ad1c:	beq	2ad2c <__assert_fail@plt+0x19a0c>
   2ad20:	cmp	r4, #0
   2ad24:	bne	2ad2c <__assert_fail@plt+0x19a0c>
   2ad28:	pop	{r4, r5, fp, pc}
   2ad2c:	bl	2b1f0 <__assert_fail@plt+0x19ed0>
   2ad30:	push	{fp, lr}
   2ad34:	mov	fp, sp
   2ad38:	cmp	r1, #0
   2ad3c:	orreq	r1, r1, #1
   2ad40:	bl	2b364 <__assert_fail@plt+0x1a044>
   2ad44:	cmp	r0, #0
   2ad48:	popne	{fp, pc}
   2ad4c:	bl	2b1f0 <__assert_fail@plt+0x19ed0>
   2ad50:	push	{fp, lr}
   2ad54:	mov	fp, sp
   2ad58:	clz	r3, r2
   2ad5c:	lsr	ip, r3, #5
   2ad60:	clz	r3, r1
   2ad64:	lsr	r3, r3, #5
   2ad68:	orrs	r3, r3, ip
   2ad6c:	movwne	r1, #1
   2ad70:	movwne	r2, #1
   2ad74:	bl	2c5b4 <__assert_fail@plt+0x1b294>
   2ad78:	cmp	r0, #0
   2ad7c:	popne	{fp, pc}
   2ad80:	bl	2b1f0 <__assert_fail@plt+0x19ed0>
   2ad84:	push	{fp, lr}
   2ad88:	mov	fp, sp
   2ad8c:	mov	r2, r1
   2ad90:	mov	r1, r0
   2ad94:	mov	r0, #0
   2ad98:	bl	2c5b4 <__assert_fail@plt+0x1b294>
   2ad9c:	cmp	r0, #0
   2ada0:	popne	{fp, pc}
   2ada4:	bl	2b1f0 <__assert_fail@plt+0x19ed0>
   2ada8:	push	{fp, lr}
   2adac:	mov	fp, sp
   2adb0:	mov	r2, r1
   2adb4:	mov	r1, r0
   2adb8:	clz	r0, r2
   2adbc:	clz	r3, r1
   2adc0:	lsr	r0, r0, #5
   2adc4:	lsr	r3, r3, #5
   2adc8:	orrs	r0, r3, r0
   2adcc:	mov	r0, #0
   2add0:	movwne	r1, #1
   2add4:	movwne	r2, #1
   2add8:	bl	2c5b4 <__assert_fail@plt+0x1b294>
   2addc:	cmp	r0, #0
   2ade0:	popne	{fp, pc}
   2ade4:	bl	2b1f0 <__assert_fail@plt+0x19ed0>
   2ade8:	push	{r4, r5, r6, sl, fp, lr}
   2adec:	add	fp, sp, #16
   2adf0:	ldr	r5, [r1]
   2adf4:	mov	r4, r1
   2adf8:	mov	r6, r0
   2adfc:	cmp	r0, #0
   2ae00:	beq	2ae18 <__assert_fail@plt+0x19af8>
   2ae04:	mov	r0, #1
   2ae08:	add	r0, r0, r5, lsr #1
   2ae0c:	adds	r5, r5, r0
   2ae10:	bcc	2ae20 <__assert_fail@plt+0x19b00>
   2ae14:	b	2ae5c <__assert_fail@plt+0x19b3c>
   2ae18:	cmp	r5, #0
   2ae1c:	movweq	r5, #64	; 0x40
   2ae20:	mov	r0, r6
   2ae24:	mov	r1, r5
   2ae28:	mov	r2, #1
   2ae2c:	bl	2c5b4 <__assert_fail@plt+0x1b294>
   2ae30:	cmp	r5, #0
   2ae34:	mov	r1, r5
   2ae38:	movwne	r1, #1
   2ae3c:	cmp	r0, #0
   2ae40:	bne	2ae54 <__assert_fail@plt+0x19b34>
   2ae44:	clz	r2, r6
   2ae48:	lsr	r2, r2, #5
   2ae4c:	orrs	r1, r2, r1
   2ae50:	bne	2ae5c <__assert_fail@plt+0x19b3c>
   2ae54:	str	r5, [r4]
   2ae58:	pop	{r4, r5, r6, sl, fp, pc}
   2ae5c:	bl	2b1f0 <__assert_fail@plt+0x19ed0>
   2ae60:	push	{r4, r5, r6, r7, fp, lr}
   2ae64:	add	fp, sp, #16
   2ae68:	ldr	r5, [r1]
   2ae6c:	mov	r6, r2
   2ae70:	mov	r4, r1
   2ae74:	mov	r7, r0
   2ae78:	cmp	r0, #0
   2ae7c:	beq	2ae94 <__assert_fail@plt+0x19b74>
   2ae80:	mov	r0, #1
   2ae84:	add	r0, r0, r5, lsr #1
   2ae88:	adds	r5, r5, r0
   2ae8c:	bcc	2aeac <__assert_fail@plt+0x19b8c>
   2ae90:	b	2aee0 <__assert_fail@plt+0x19bc0>
   2ae94:	cmp	r5, #0
   2ae98:	bne	2aeac <__assert_fail@plt+0x19b8c>
   2ae9c:	mov	r0, #64	; 0x40
   2aea0:	cmp	r6, #64	; 0x40
   2aea4:	udiv	r5, r0, r6
   2aea8:	addhi	r5, r5, #1
   2aeac:	mov	r0, r7
   2aeb0:	mov	r1, r5
   2aeb4:	mov	r2, r6
   2aeb8:	bl	2c5b4 <__assert_fail@plt+0x1b294>
   2aebc:	cmp	r0, #0
   2aec0:	bne	2aed8 <__assert_fail@plt+0x19bb8>
   2aec4:	cmp	r7, #0
   2aec8:	beq	2aee0 <__assert_fail@plt+0x19bc0>
   2aecc:	cmp	r6, #0
   2aed0:	cmpne	r5, #0
   2aed4:	bne	2aee0 <__assert_fail@plt+0x19bc0>
   2aed8:	str	r5, [r4]
   2aedc:	pop	{r4, r5, r6, r7, fp, pc}
   2aee0:	bl	2b1f0 <__assert_fail@plt+0x19ed0>
   2aee4:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   2aee8:	add	fp, sp, #24
   2aeec:	mov	r8, r1
   2aef0:	ldr	r1, [r1]
   2aef4:	mov	r5, r0
   2aef8:	add	r0, r1, r1, asr #1
   2aefc:	cmp	r0, r1
   2af00:	mvnvs	r0, #-2147483648	; 0x80000000
   2af04:	cmp	r0, r3
   2af08:	mov	r7, r0
   2af0c:	movgt	r7, r3
   2af10:	cmn	r3, #1
   2af14:	movle	r7, r0
   2af18:	ldr	r0, [fp, #8]
   2af1c:	cmn	r0, #1
   2af20:	ble	2af48 <__assert_fail@plt+0x19c28>
   2af24:	cmp	r0, #0
   2af28:	beq	2af9c <__assert_fail@plt+0x19c7c>
   2af2c:	cmn	r7, #1
   2af30:	ble	2af70 <__assert_fail@plt+0x19c50>
   2af34:	mvn	r4, #-2147483648	; 0x80000000
   2af38:	udiv	r6, r4, r0
   2af3c:	cmp	r6, r7
   2af40:	bge	2af9c <__assert_fail@plt+0x19c7c>
   2af44:	b	2afac <__assert_fail@plt+0x19c8c>
   2af48:	cmn	r7, #1
   2af4c:	ble	2af8c <__assert_fail@plt+0x19c6c>
   2af50:	cmn	r0, #1
   2af54:	beq	2af9c <__assert_fail@plt+0x19c7c>
   2af58:	mov	r6, #-2147483648	; 0x80000000
   2af5c:	mvn	r4, #-2147483648	; 0x80000000
   2af60:	sdiv	r6, r6, r0
   2af64:	cmp	r6, r7
   2af68:	bge	2af9c <__assert_fail@plt+0x19c7c>
   2af6c:	b	2afac <__assert_fail@plt+0x19c8c>
   2af70:	beq	2af9c <__assert_fail@plt+0x19c7c>
   2af74:	mov	r6, #-2147483648	; 0x80000000
   2af78:	mvn	r4, #-2147483648	; 0x80000000
   2af7c:	sdiv	r6, r6, r7
   2af80:	cmp	r6, r0
   2af84:	bge	2af9c <__assert_fail@plt+0x19c7c>
   2af88:	b	2afac <__assert_fail@plt+0x19c8c>
   2af8c:	mvn	r4, #-2147483648	; 0x80000000
   2af90:	sdiv	r6, r4, r0
   2af94:	cmp	r7, r6
   2af98:	blt	2afac <__assert_fail@plt+0x19c8c>
   2af9c:	mul	r6, r7, r0
   2afa0:	mov	r4, #64	; 0x40
   2afa4:	cmp	r6, #63	; 0x3f
   2afa8:	bgt	2afb4 <__assert_fail@plt+0x19c94>
   2afac:	sdiv	r7, r4, r0
   2afb0:	mul	r6, r7, r0
   2afb4:	cmp	r5, #0
   2afb8:	moveq	r4, #0
   2afbc:	streq	r4, [r8]
   2afc0:	sub	r4, r7, r1
   2afc4:	cmp	r4, r2
   2afc8:	bge	2b074 <__assert_fail@plt+0x19d54>
   2afcc:	add	r7, r1, r2
   2afd0:	mov	r6, #0
   2afd4:	mov	r2, #0
   2afd8:	cmp	r7, r3
   2afdc:	movwgt	r6, #1
   2afe0:	cmn	r3, #1
   2afe4:	movwgt	r2, #1
   2afe8:	cmp	r7, r1
   2afec:	bvs	2b0a8 <__assert_fail@plt+0x19d88>
   2aff0:	ands	r1, r2, r6
   2aff4:	bne	2b0a8 <__assert_fail@plt+0x19d88>
   2aff8:	cmn	r0, #1
   2affc:	ble	2b024 <__assert_fail@plt+0x19d04>
   2b000:	cmp	r0, #0
   2b004:	beq	2b070 <__assert_fail@plt+0x19d50>
   2b008:	cmn	r7, #1
   2b00c:	ble	2b048 <__assert_fail@plt+0x19d28>
   2b010:	mvn	r1, #-2147483648	; 0x80000000
   2b014:	udiv	r1, r1, r0
   2b018:	cmp	r1, r7
   2b01c:	bge	2b070 <__assert_fail@plt+0x19d50>
   2b020:	b	2b0a8 <__assert_fail@plt+0x19d88>
   2b024:	cmn	r7, #1
   2b028:	ble	2b060 <__assert_fail@plt+0x19d40>
   2b02c:	cmn	r0, #1
   2b030:	beq	2b070 <__assert_fail@plt+0x19d50>
   2b034:	mov	r1, #-2147483648	; 0x80000000
   2b038:	sdiv	r1, r1, r0
   2b03c:	cmp	r1, r7
   2b040:	bge	2b070 <__assert_fail@plt+0x19d50>
   2b044:	b	2b0a8 <__assert_fail@plt+0x19d88>
   2b048:	beq	2b070 <__assert_fail@plt+0x19d50>
   2b04c:	mov	r1, #-2147483648	; 0x80000000
   2b050:	sdiv	r1, r1, r7
   2b054:	cmp	r1, r0
   2b058:	bge	2b070 <__assert_fail@plt+0x19d50>
   2b05c:	b	2b0a8 <__assert_fail@plt+0x19d88>
   2b060:	mvn	r1, #-2147483648	; 0x80000000
   2b064:	sdiv	r1, r1, r0
   2b068:	cmp	r7, r1
   2b06c:	blt	2b0a8 <__assert_fail@plt+0x19d88>
   2b070:	mul	r6, r7, r0
   2b074:	mov	r0, r5
   2b078:	mov	r1, r6
   2b07c:	bl	2b364 <__assert_fail@plt+0x1a044>
   2b080:	cmp	r6, #0
   2b084:	movwne	r6, #1
   2b088:	cmp	r0, #0
   2b08c:	bne	2b0a0 <__assert_fail@plt+0x19d80>
   2b090:	clz	r1, r5
   2b094:	lsr	r1, r1, #5
   2b098:	orrs	r1, r1, r6
   2b09c:	bne	2b0a8 <__assert_fail@plt+0x19d88>
   2b0a0:	str	r7, [r8]
   2b0a4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   2b0a8:	bl	2b1f0 <__assert_fail@plt+0x19ed0>
   2b0ac:	push	{fp, lr}
   2b0b0:	mov	fp, sp
   2b0b4:	mov	r1, #1
   2b0b8:	bl	2b2e0 <__assert_fail@plt+0x19fc0>
   2b0bc:	cmp	r0, #0
   2b0c0:	popne	{fp, pc}
   2b0c4:	bl	2b1f0 <__assert_fail@plt+0x19ed0>
   2b0c8:	push	{fp, lr}
   2b0cc:	mov	fp, sp
   2b0d0:	bl	2b2e0 <__assert_fail@plt+0x19fc0>
   2b0d4:	cmp	r0, #0
   2b0d8:	popne	{fp, pc}
   2b0dc:	bl	2b1f0 <__assert_fail@plt+0x19ed0>
   2b0e0:	push	{fp, lr}
   2b0e4:	mov	fp, sp
   2b0e8:	mov	r1, #1
   2b0ec:	bl	2b2e0 <__assert_fail@plt+0x19fc0>
   2b0f0:	cmp	r0, #0
   2b0f4:	popne	{fp, pc}
   2b0f8:	bl	2b1f0 <__assert_fail@plt+0x19ed0>
   2b0fc:	push	{fp, lr}
   2b100:	mov	fp, sp
   2b104:	bl	2b2e0 <__assert_fail@plt+0x19fc0>
   2b108:	cmp	r0, #0
   2b10c:	popne	{fp, pc}
   2b110:	bl	2b1f0 <__assert_fail@plt+0x19ed0>
   2b114:	push	{r4, r5, fp, lr}
   2b118:	add	fp, sp, #8
   2b11c:	mov	r5, r0
   2b120:	mov	r0, r1
   2b124:	mov	r4, r1
   2b128:	bl	2b334 <__assert_fail@plt+0x1a014>
   2b12c:	cmp	r0, #0
   2b130:	beq	2b144 <__assert_fail@plt+0x19e24>
   2b134:	mov	r1, r5
   2b138:	mov	r2, r4
   2b13c:	pop	{r4, r5, fp, lr}
   2b140:	b	110d4 <memcpy@plt>
   2b144:	bl	2b1f0 <__assert_fail@plt+0x19ed0>
   2b148:	push	{r4, r5, fp, lr}
   2b14c:	add	fp, sp, #8
   2b150:	mov	r5, r0
   2b154:	mov	r0, r1
   2b158:	mov	r4, r1
   2b15c:	bl	2b334 <__assert_fail@plt+0x1a014>
   2b160:	cmp	r0, #0
   2b164:	beq	2b178 <__assert_fail@plt+0x19e58>
   2b168:	mov	r1, r5
   2b16c:	mov	r2, r4
   2b170:	pop	{r4, r5, fp, lr}
   2b174:	b	110d4 <memcpy@plt>
   2b178:	bl	2b1f0 <__assert_fail@plt+0x19ed0>
   2b17c:	push	{r4, r5, fp, lr}
   2b180:	add	fp, sp, #8
   2b184:	mov	r5, r0
   2b188:	add	r0, r1, #1
   2b18c:	mov	r4, r1
   2b190:	bl	2b334 <__assert_fail@plt+0x1a014>
   2b194:	cmp	r0, #0
   2b198:	beq	2b1b4 <__assert_fail@plt+0x19e94>
   2b19c:	mov	r1, #0
   2b1a0:	mov	r2, r4
   2b1a4:	strb	r1, [r0, r4]
   2b1a8:	mov	r1, r5
   2b1ac:	pop	{r4, r5, fp, lr}
   2b1b0:	b	110d4 <memcpy@plt>
   2b1b4:	bl	2b1f0 <__assert_fail@plt+0x19ed0>
   2b1b8:	push	{r4, r5, fp, lr}
   2b1bc:	add	fp, sp, #8
   2b1c0:	mov	r4, r0
   2b1c4:	bl	11200 <strlen@plt>
   2b1c8:	add	r5, r0, #1
   2b1cc:	mov	r0, r5
   2b1d0:	bl	2b334 <__assert_fail@plt+0x1a014>
   2b1d4:	cmp	r0, #0
   2b1d8:	beq	2b1ec <__assert_fail@plt+0x19ecc>
   2b1dc:	mov	r1, r4
   2b1e0:	mov	r2, r5
   2b1e4:	pop	{r4, r5, fp, lr}
   2b1e8:	b	110d4 <memcpy@plt>
   2b1ec:	bl	2b1f0 <__assert_fail@plt+0x19ed0>
   2b1f0:	push	{fp, lr}
   2b1f4:	mov	fp, sp
   2b1f8:	movw	r0, #12568	; 0x3118
   2b1fc:	movw	r1, #7828	; 0x1e94
   2b200:	mov	r2, #5
   2b204:	movt	r0, #4
   2b208:	movt	r1, #3
   2b20c:	ldr	r4, [r0]
   2b210:	mov	r0, #0
   2b214:	bl	110ec <dcgettext@plt>
   2b218:	movw	r2, #1985	; 0x7c1
   2b21c:	mov	r3, r0
   2b220:	mov	r0, r4
   2b224:	mov	r1, #0
   2b228:	movt	r2, #3
   2b22c:	bl	1117c <error@plt>
   2b230:	bl	11314 <abort@plt>
   2b234:	push	{r4, sl, fp, lr}
   2b238:	add	fp, sp, #8
   2b23c:	sub	sp, sp, #8
   2b240:	ldr	r4, [fp, #8]
   2b244:	str	r4, [sp]
   2b248:	bl	2c5f0 <__assert_fail@plt+0x1b2d0>
   2b24c:	mov	r4, r0
   2b250:	cmn	r0, #1
   2b254:	bgt	2b268 <__assert_fail@plt+0x19f48>
   2b258:	bl	11218 <__errno_location@plt>
   2b25c:	ldr	r0, [r0]
   2b260:	cmp	r0, #12
   2b264:	beq	2b274 <__assert_fail@plt+0x19f54>
   2b268:	mov	r0, r4
   2b26c:	sub	sp, fp, #8
   2b270:	pop	{r4, sl, fp, pc}
   2b274:	bl	2b1f0 <__assert_fail@plt+0x19ed0>
   2b278:	push	{r4, sl, fp, lr}
   2b27c:	add	fp, sp, #8
   2b280:	bl	2c878 <__assert_fail@plt+0x1b558>
   2b284:	mov	r4, r0
   2b288:	cmp	r0, #0
   2b28c:	bne	2b2a0 <__assert_fail@plt+0x19f80>
   2b290:	bl	11218 <__errno_location@plt>
   2b294:	ldr	r0, [r0]
   2b298:	cmp	r0, #12
   2b29c:	beq	2b2a8 <__assert_fail@plt+0x19f88>
   2b2a0:	mov	r0, r4
   2b2a4:	pop	{r4, sl, fp, pc}
   2b2a8:	bl	2b1f0 <__assert_fail@plt+0x19ed0>
   2b2ac:	push	{r4, sl, fp, lr}
   2b2b0:	add	fp, sp, #8
   2b2b4:	bl	2cab8 <__assert_fail@plt+0x1b798>
   2b2b8:	mov	r4, r0
   2b2bc:	cmp	r0, #0
   2b2c0:	bne	2b2d4 <__assert_fail@plt+0x19fb4>
   2b2c4:	bl	11218 <__errno_location@plt>
   2b2c8:	ldr	r0, [r0]
   2b2cc:	cmp	r0, #12
   2b2d0:	beq	2b2dc <__assert_fail@plt+0x19fbc>
   2b2d4:	mov	r0, r4
   2b2d8:	pop	{r4, sl, fp, pc}
   2b2dc:	bl	2b1f0 <__assert_fail@plt+0x19ed0>
   2b2e0:	clz	r2, r1
   2b2e4:	clz	r3, r0
   2b2e8:	lsr	r2, r2, #5
   2b2ec:	lsr	r3, r3, #5
   2b2f0:	orrs	r2, r3, r2
   2b2f4:	movwne	r1, #1
   2b2f8:	movwne	r0, #1
   2b2fc:	cmp	r1, #0
   2b300:	beq	2b330 <__assert_fail@plt+0x1a010>
   2b304:	mvn	r2, #-2147483648	; 0x80000000
   2b308:	udiv	r2, r2, r1
   2b30c:	cmp	r2, r0
   2b310:	bcs	2b330 <__assert_fail@plt+0x1a010>
   2b314:	push	{fp, lr}
   2b318:	mov	fp, sp
   2b31c:	bl	11218 <__errno_location@plt>
   2b320:	mov	r1, #12
   2b324:	str	r1, [r0]
   2b328:	mov	r0, #0
   2b32c:	pop	{fp, pc}
   2b330:	b	11050 <calloc@plt>
   2b334:	cmp	r0, #0
   2b338:	movweq	r0, #1
   2b33c:	cmn	r0, #1
   2b340:	ble	2b348 <__assert_fail@plt+0x1a028>
   2b344:	b	11188 <malloc@plt>
   2b348:	push	{fp, lr}
   2b34c:	mov	fp, sp
   2b350:	bl	11218 <__errno_location@plt>
   2b354:	mov	r1, #12
   2b358:	str	r1, [r0]
   2b35c:	mov	r0, #0
   2b360:	pop	{fp, pc}
   2b364:	push	{fp, lr}
   2b368:	mov	fp, sp
   2b36c:	cmp	r0, #0
   2b370:	beq	2b38c <__assert_fail@plt+0x1a06c>
   2b374:	cmp	r1, #0
   2b378:	beq	2b398 <__assert_fail@plt+0x1a078>
   2b37c:	cmn	r1, #1
   2b380:	ble	2b3a4 <__assert_fail@plt+0x1a084>
   2b384:	pop	{fp, lr}
   2b388:	b	11104 <realloc@plt>
   2b38c:	mov	r0, r1
   2b390:	pop	{fp, lr}
   2b394:	b	2b334 <__assert_fail@plt+0x1a014>
   2b398:	bl	184a0 <__assert_fail@plt+0x7180>
   2b39c:	mov	r0, #0
   2b3a0:	pop	{fp, pc}
   2b3a4:	bl	11218 <__errno_location@plt>
   2b3a8:	mov	r1, #12
   2b3ac:	str	r1, [r0]
   2b3b0:	mov	r0, #0
   2b3b4:	pop	{fp, pc}
   2b3b8:	cmp	r0, r1
   2b3bc:	moveq	r0, #0
   2b3c0:	bxeq	lr
   2b3c4:	ldrb	r3, [r1]
   2b3c8:	ldrb	ip, [r0]
   2b3cc:	sub	r2, r3, #65	; 0x41
   2b3d0:	cmp	r2, #26
   2b3d4:	sub	r2, ip, #65	; 0x41
   2b3d8:	addcc	r3, r3, #32
   2b3dc:	cmp	r2, #26
   2b3e0:	addcc	ip, ip, #32
   2b3e4:	uxtb	r3, r3
   2b3e8:	uxtb	r2, ip
   2b3ec:	cmp	r2, #0
   2b3f0:	beq	2b404 <__assert_fail@plt+0x1a0e4>
   2b3f4:	add	r1, r1, #1
   2b3f8:	add	r0, r0, #1
   2b3fc:	cmp	r2, r3
   2b400:	beq	2b3c4 <__assert_fail@plt+0x1a0a4>
   2b404:	sub	r0, r2, r3
   2b408:	bx	lr
   2b40c:	push	{r4, r5, r6, sl, fp, lr}
   2b410:	add	fp, sp, #16
   2b414:	mov	r4, r0
   2b418:	bl	11164 <__fpending@plt>
   2b41c:	ldr	r6, [r4]
   2b420:	mov	r5, r0
   2b424:	mov	r0, r4
   2b428:	bl	2b490 <__assert_fail@plt+0x1a170>
   2b42c:	tst	r6, #32
   2b430:	bne	2b468 <__assert_fail@plt+0x1a148>
   2b434:	cmp	r0, #0
   2b438:	mov	r4, r0
   2b43c:	mvnne	r4, #0
   2b440:	cmp	r5, #0
   2b444:	bne	2b474 <__assert_fail@plt+0x1a154>
   2b448:	cmp	r0, #0
   2b44c:	beq	2b474 <__assert_fail@plt+0x1a154>
   2b450:	bl	11218 <__errno_location@plt>
   2b454:	ldr	r0, [r0]
   2b458:	subs	r4, r0, #9
   2b45c:	mvnne	r4, #0
   2b460:	mov	r0, r4
   2b464:	pop	{r4, r5, r6, sl, fp, pc}
   2b468:	mvn	r4, #0
   2b46c:	cmp	r0, #0
   2b470:	beq	2b47c <__assert_fail@plt+0x1a15c>
   2b474:	mov	r0, r4
   2b478:	pop	{r4, r5, r6, sl, fp, pc}
   2b47c:	bl	11218 <__errno_location@plt>
   2b480:	mov	r1, #0
   2b484:	str	r1, [r0]
   2b488:	mov	r0, r4
   2b48c:	pop	{r4, r5, r6, sl, fp, pc}
   2b490:	push	{r4, r5, r6, sl, fp, lr}
   2b494:	add	fp, sp, #16
   2b498:	sub	sp, sp, #8
   2b49c:	mov	r4, r0
   2b4a0:	bl	1126c <fileno@plt>
   2b4a4:	cmn	r0, #1
   2b4a8:	ble	2b51c <__assert_fail@plt+0x1a1fc>
   2b4ac:	mov	r0, r4
   2b4b0:	bl	111ac <__freading@plt>
   2b4b4:	cmp	r0, #0
   2b4b8:	beq	2b4e4 <__assert_fail@plt+0x1a1c4>
   2b4bc:	mov	r0, r4
   2b4c0:	bl	1126c <fileno@plt>
   2b4c4:	mov	r1, #1
   2b4c8:	mov	r2, #0
   2b4cc:	mov	r3, #0
   2b4d0:	str	r1, [sp]
   2b4d4:	bl	1114c <lseek64@plt>
   2b4d8:	and	r0, r0, r1
   2b4dc:	cmn	r0, #1
   2b4e0:	beq	2b51c <__assert_fail@plt+0x1a1fc>
   2b4e4:	mov	r0, r4
   2b4e8:	bl	2b52c <__assert_fail@plt+0x1a20c>
   2b4ec:	cmp	r0, #0
   2b4f0:	beq	2b51c <__assert_fail@plt+0x1a1fc>
   2b4f4:	bl	11218 <__errno_location@plt>
   2b4f8:	ldr	r6, [r0]
   2b4fc:	mov	r5, r0
   2b500:	mov	r0, r4
   2b504:	bl	11290 <fclose@plt>
   2b508:	cmp	r6, #0
   2b50c:	strne	r6, [r5]
   2b510:	mvnne	r0, #0
   2b514:	sub	sp, fp, #16
   2b518:	pop	{r4, r5, r6, sl, fp, pc}
   2b51c:	mov	r0, r4
   2b520:	sub	sp, fp, #16
   2b524:	pop	{r4, r5, r6, sl, fp, lr}
   2b528:	b	11290 <fclose@plt>
   2b52c:	push	{r4, sl, fp, lr}
   2b530:	add	fp, sp, #8
   2b534:	sub	sp, sp, #8
   2b538:	mov	r4, r0
   2b53c:	cmp	r0, #0
   2b540:	beq	2b578 <__assert_fail@plt+0x1a258>
   2b544:	mov	r0, r4
   2b548:	bl	111ac <__freading@plt>
   2b54c:	cmp	r0, #0
   2b550:	beq	2b578 <__assert_fail@plt+0x1a258>
   2b554:	ldrb	r0, [r4, #1]
   2b558:	tst	r0, #1
   2b55c:	beq	2b578 <__assert_fail@plt+0x1a258>
   2b560:	mov	r0, #1
   2b564:	mov	r2, #0
   2b568:	mov	r3, #0
   2b56c:	str	r0, [sp]
   2b570:	mov	r0, r4
   2b574:	bl	2b588 <__assert_fail@plt+0x1a268>
   2b578:	mov	r0, r4
   2b57c:	sub	sp, fp, #8
   2b580:	pop	{r4, sl, fp, lr}
   2b584:	b	11098 <fflush@plt>
   2b588:	push	{r4, r5, r6, r7, fp, lr}
   2b58c:	add	fp, sp, #16
   2b590:	sub	sp, sp, #8
   2b594:	mov	r4, r0
   2b598:	ldr	r0, [r0, #4]
   2b59c:	mov	r5, r3
   2b5a0:	mov	r6, r2
   2b5a4:	ldr	r1, [r4, #8]
   2b5a8:	cmp	r1, r0
   2b5ac:	bne	2b5c8 <__assert_fail@plt+0x1a2a8>
   2b5b0:	ldrd	r0, [r4, #16]
   2b5b4:	cmp	r1, r0
   2b5b8:	bne	2b5c8 <__assert_fail@plt+0x1a2a8>
   2b5bc:	ldr	r0, [r4, #36]	; 0x24
   2b5c0:	cmp	r0, #0
   2b5c4:	beq	2b5e0 <__assert_fail@plt+0x1a2c0>
   2b5c8:	mov	r0, r4
   2b5cc:	mov	r2, r6
   2b5d0:	mov	r3, r5
   2b5d4:	sub	sp, fp, #16
   2b5d8:	pop	{r4, r5, r6, r7, fp, lr}
   2b5dc:	b	112a8 <fseeko64@plt>
   2b5e0:	ldr	r7, [fp, #8]
   2b5e4:	mov	r0, r4
   2b5e8:	bl	1126c <fileno@plt>
   2b5ec:	mov	r2, r6
   2b5f0:	mov	r3, r5
   2b5f4:	str	r7, [sp]
   2b5f8:	bl	1114c <lseek64@plt>
   2b5fc:	and	r2, r0, r1
   2b600:	cmn	r2, #1
   2b604:	beq	2b624 <__assert_fail@plt+0x1a304>
   2b608:	strd	r0, [r4, #80]	; 0x50
   2b60c:	ldr	r0, [r4]
   2b610:	bic	r0, r0, #16
   2b614:	str	r0, [r4]
   2b618:	mov	r0, #0
   2b61c:	sub	sp, fp, #16
   2b620:	pop	{r4, r5, r6, r7, fp, pc}
   2b624:	mvn	r0, #0
   2b628:	sub	sp, fp, #16
   2b62c:	pop	{r4, r5, r6, r7, fp, pc}
   2b630:	push	{fp, lr}
   2b634:	mov	fp, sp
   2b638:	mov	r0, #14
   2b63c:	bl	112e4 <nl_langinfo@plt>
   2b640:	movw	r1, #53673	; 0xd1a9
   2b644:	cmp	r0, #0
   2b648:	movt	r1, #2
   2b64c:	movne	r1, r0
   2b650:	movw	r0, #7845	; 0x1ea5
   2b654:	ldrb	r2, [r1]
   2b658:	movt	r0, #3
   2b65c:	cmp	r2, #0
   2b660:	movne	r0, r1
   2b664:	pop	{fp, pc}
   2b668:	push	{r4, r5, r6, r7, fp, lr}
   2b66c:	add	fp, sp, #16
   2b670:	mov	r4, r0
   2b674:	ldrb	r0, [r0, #16]
   2b678:	cmp	r0, #0
   2b67c:	popne	{r4, r5, r6, r7, fp, pc}
   2b680:	ldrb	r0, [r4, #4]
   2b684:	ldr	r5, [r4, #20]
   2b688:	cmp	r0, #0
   2b68c:	beq	2b6dc <__assert_fail@plt+0x1a3bc>
   2b690:	ldr	r0, [r4]
   2b694:	add	r6, r4, #8
   2b698:	add	r7, r4, #32
   2b69c:	mov	r1, r5
   2b6a0:	mov	r3, r6
   2b6a4:	sub	r2, r0, r5
   2b6a8:	mov	r0, r7
   2b6ac:	bl	2b8a0 <__assert_fail@plt+0x1a580>
   2b6b0:	cmn	r0, #2
   2b6b4:	str	r0, [r4, #24]
   2b6b8:	beq	2b758 <__assert_fail@plt+0x1a438>
   2b6bc:	cmp	r0, #0
   2b6c0:	beq	2b714 <__assert_fail@plt+0x1a3f4>
   2b6c4:	cmn	r0, #1
   2b6c8:	bne	2b738 <__assert_fail@plt+0x1a418>
   2b6cc:	mov	r0, #0
   2b6d0:	strb	r0, [r4, #28]
   2b6d4:	mov	r0, #1
   2b6d8:	b	2b76c <__assert_fail@plt+0x1a44c>
   2b6dc:	ldrb	r0, [r5]
   2b6e0:	movw	r2, #8048	; 0x1f70
   2b6e4:	movt	r2, #3
   2b6e8:	ubfx	r1, r0, #5, #3
   2b6ec:	ldr	r1, [r2, r1, lsl #2]
   2b6f0:	and	r2, r0, #31
   2b6f4:	mov	r0, #1
   2b6f8:	tst	r1, r0, lsl r2
   2b6fc:	beq	2b77c <__assert_fail@plt+0x1a45c>
   2b700:	str	r0, [r4, #24]
   2b704:	ldrb	r1, [r5]
   2b708:	strb	r0, [r4, #28]
   2b70c:	str	r1, [r4, #32]
   2b710:	b	2b770 <__assert_fail@plt+0x1a450>
   2b714:	mov	r0, #1
   2b718:	str	r0, [r4, #24]
   2b71c:	ldr	r0, [r4, #20]
   2b720:	ldrb	r0, [r0]
   2b724:	cmp	r0, #0
   2b728:	bne	2b798 <__assert_fail@plt+0x1a478>
   2b72c:	ldr	r0, [r7]
   2b730:	cmp	r0, #0
   2b734:	bne	2b7b0 <__assert_fail@plt+0x1a490>
   2b738:	mov	r0, #1
   2b73c:	strb	r0, [r4, #28]
   2b740:	mov	r0, r6
   2b744:	bl	110e0 <mbsinit@plt>
   2b748:	cmp	r0, #0
   2b74c:	movne	r0, #0
   2b750:	strbne	r0, [r4, #4]
   2b754:	b	2b770 <__assert_fail@plt+0x1a450>
   2b758:	mov	r0, #0
   2b75c:	strb	r0, [r4, #28]
   2b760:	ldr	r0, [r4]
   2b764:	ldr	r1, [r4, #20]
   2b768:	sub	r0, r0, r1
   2b76c:	str	r0, [r4, #24]
   2b770:	mov	r0, #1
   2b774:	strb	r0, [r4, #16]
   2b778:	pop	{r4, r5, r6, r7, fp, pc}
   2b77c:	add	r0, r4, #8
   2b780:	bl	110e0 <mbsinit@plt>
   2b784:	cmp	r0, #0
   2b788:	beq	2b7c8 <__assert_fail@plt+0x1a4a8>
   2b78c:	mov	r0, #1
   2b790:	strb	r0, [r4, #4]
   2b794:	b	2b690 <__assert_fail@plt+0x1a370>
   2b798:	movw	r0, #7935	; 0x1eff
   2b79c:	movw	r1, #7874	; 0x1ec2
   2b7a0:	movw	r3, #7889	; 0x1ed1
   2b7a4:	mov	r2, #162	; 0xa2
   2b7a8:	movt	r0, #3
   2b7ac:	b	2b7dc <__assert_fail@plt+0x1a4bc>
   2b7b0:	movw	r0, #7958	; 0x1f16
   2b7b4:	movw	r1, #7874	; 0x1ec2
   2b7b8:	movw	r3, #7889	; 0x1ed1
   2b7bc:	mov	r2, #163	; 0xa3
   2b7c0:	movt	r0, #3
   2b7c4:	b	2b7dc <__assert_fail@plt+0x1a4bc>
   2b7c8:	movw	r0, #7851	; 0x1eab
   2b7cc:	movw	r1, #7874	; 0x1ec2
   2b7d0:	movw	r3, #7889	; 0x1ed1
   2b7d4:	mov	r2, #135	; 0x87
   2b7d8:	movt	r0, #3
   2b7dc:	movt	r1, #3
   2b7e0:	movt	r3, #3
   2b7e4:	bl	11320 <__assert_fail@plt>
   2b7e8:	ldr	r3, [r0, #20]
   2b7ec:	ldr	r2, [r0]
   2b7f0:	add	r3, r3, r1
   2b7f4:	add	r1, r2, r1
   2b7f8:	str	r3, [r0, #20]
   2b7fc:	str	r1, [r0]
   2b800:	bx	lr
   2b804:	push	{r4, r5, r6, sl, fp, lr}
   2b808:	add	fp, sp, #16
   2b80c:	mov	r4, r0
   2b810:	ldr	r0, [r1]
   2b814:	mov	r5, r1
   2b818:	str	r0, [r4]
   2b81c:	add	r0, r4, #8
   2b820:	ldrb	r1, [r1, #4]
   2b824:	cmp	r1, #0
   2b828:	strb	r1, [r4, #4]
   2b82c:	beq	2b840 <__assert_fail@plt+0x1a520>
   2b830:	ldr	r1, [r5, #8]
   2b834:	ldr	r2, [r5, #12]
   2b838:	stm	r0, {r1, r2}
   2b83c:	b	2b84c <__assert_fail@plt+0x1a52c>
   2b840:	mov	r1, #0
   2b844:	str	r1, [r0]
   2b848:	str	r1, [r0, #4]
   2b84c:	ldrb	r0, [r5, #16]
   2b850:	strb	r0, [r4, #16]
   2b854:	add	r0, r5, #36	; 0x24
   2b858:	ldr	r1, [r5, #20]
   2b85c:	cmp	r1, r0
   2b860:	beq	2b86c <__assert_fail@plt+0x1a54c>
   2b864:	mov	r6, r1
   2b868:	b	2b87c <__assert_fail@plt+0x1a55c>
   2b86c:	ldr	r2, [r5, #24]
   2b870:	add	r6, r4, #36	; 0x24
   2b874:	mov	r0, r6
   2b878:	bl	110d4 <memcpy@plt>
   2b87c:	str	r6, [r4, #20]
   2b880:	ldr	r0, [r5, #24]
   2b884:	str	r0, [r4, #24]
   2b888:	ldrb	r0, [r5, #28]
   2b88c:	strb	r0, [r4, #28]
   2b890:	cmp	r0, #0
   2b894:	ldrne	r0, [r5, #32]
   2b898:	strne	r0, [r4, #32]
   2b89c:	pop	{r4, r5, r6, sl, fp, pc}
   2b8a0:	push	{r4, r5, r6, r7, fp, lr}
   2b8a4:	add	fp, sp, #16
   2b8a8:	sub	sp, sp, #8
   2b8ac:	cmp	r0, #0
   2b8b0:	add	r5, sp, #4
   2b8b4:	mov	r7, r2
   2b8b8:	mov	r4, r1
   2b8bc:	movne	r5, r0
   2b8c0:	mov	r0, r5
   2b8c4:	bl	11170 <mbrtowc@plt>
   2b8c8:	mov	r6, r0
   2b8cc:	cmp	r7, #0
   2b8d0:	beq	2b8f8 <__assert_fail@plt+0x1a5d8>
   2b8d4:	cmn	r6, #2
   2b8d8:	bcc	2b8f8 <__assert_fail@plt+0x1a5d8>
   2b8dc:	mov	r0, #0
   2b8e0:	bl	2cbcc <__assert_fail@plt+0x1b8ac>
   2b8e4:	cmp	r0, #0
   2b8e8:	bne	2b8f8 <__assert_fail@plt+0x1a5d8>
   2b8ec:	ldrb	r0, [r4]
   2b8f0:	mov	r6, #1
   2b8f4:	str	r0, [r5]
   2b8f8:	mov	r0, r6
   2b8fc:	sub	sp, fp, #16
   2b900:	pop	{r4, r5, r6, r7, fp, pc}
   2b904:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2b908:	add	fp, sp, #28
   2b90c:	sub	sp, sp, #308	; 0x134
   2b910:	mov	r6, r1
   2b914:	mov	sl, r0
   2b918:	bl	11158 <__ctype_get_mb_cur_max@plt>
   2b91c:	cmp	r0, #2
   2b920:	bcc	2bcd4 <__assert_fail@plt+0x1a9b4>
   2b924:	mov	r4, #0
   2b928:	sub	r0, fp, #88	; 0x58
   2b92c:	str	r4, [fp, #-80]	; 0xffffffb0
   2b930:	str	r4, [fp, #-84]	; 0xffffffac
   2b934:	strb	r4, [fp, #-76]	; 0xffffffb4
   2b938:	strb	r4, [fp, #-88]	; 0xffffffa8
   2b93c:	str	r6, [fp, #-72]	; 0xffffffb8
   2b940:	bl	2c390 <__assert_fail@plt+0x1b070>
   2b944:	ldrb	r0, [fp, #-64]	; 0xffffffc0
   2b948:	cmp	r0, #0
   2b94c:	beq	2b95c <__assert_fail@plt+0x1a63c>
   2b950:	ldr	r0, [fp, #-60]	; 0xffffffc4
   2b954:	cmp	r0, #0
   2b958:	beq	2bdf0 <__assert_fail@plt+0x1aad0>
   2b95c:	add	r0, sp, #136	; 0x88
   2b960:	str	r4, [fp, #-136]	; 0xffffff78
   2b964:	str	r4, [fp, #-140]	; 0xffffff74
   2b968:	str	r6, [fp, #-128]	; 0xffffff80
   2b96c:	strb	r4, [fp, #-132]	; 0xffffff7c
   2b970:	str	r6, [sp, #16]
   2b974:	strb	r4, [fp, #-144]	; 0xffffff70
   2b978:	str	r4, [sp, #144]	; 0x90
   2b97c:	str	r4, [sp, #140]	; 0x8c
   2b980:	str	sl, [sp, #152]	; 0x98
   2b984:	strb	r4, [sp, #148]	; 0x94
   2b988:	strb	r4, [sp, #136]	; 0x88
   2b98c:	bl	2c390 <__assert_fail@plt+0x1b070>
   2b990:	ldrb	r0, [sp, #160]	; 0xa0
   2b994:	cmp	r0, #0
   2b998:	beq	2b9a8 <__assert_fail@plt+0x1a688>
   2b99c:	ldr	r0, [sp, #164]	; 0xa4
   2b9a0:	cmp	r0, #0
   2b9a4:	beq	2bdfc <__assert_fail@plt+0x1aadc>
   2b9a8:	add	r0, sp, #24
   2b9ac:	mov	r8, #1
   2b9b0:	mov	r6, #0
   2b9b4:	sub	r5, fp, #144	; 0x90
   2b9b8:	mov	r1, #0
   2b9bc:	mov	r7, #0
   2b9c0:	mov	r9, #0
   2b9c4:	add	r0, r0, #4
   2b9c8:	str	r0, [sp, #12]
   2b9cc:	add	r0, sp, #136	; 0x88
   2b9d0:	add	r0, r0, #16
   2b9d4:	str	r0, [sp, #8]
   2b9d8:	add	r0, r9, r9, lsl #2
   2b9dc:	mov	r4, r7
   2b9e0:	cmp	r7, r0
   2b9e4:	bcc	2ba90 <__assert_fail@plt+0x1a770>
   2b9e8:	tst	r8, #1
   2b9ec:	beq	2ba90 <__assert_fail@plt+0x1a770>
   2b9f0:	cmp	r9, #10
   2b9f4:	bcc	2ba90 <__assert_fail@plt+0x1a770>
   2b9f8:	subs	r0, r4, r1
   2b9fc:	beq	2ba44 <__assert_fail@plt+0x1a724>
   2ba00:	sub	r7, r1, r4
   2ba04:	b	2ba24 <__assert_fail@plt+0x1a704>
   2ba08:	strb	r6, [fp, #-132]	; 0xffffff7c
   2ba0c:	adds	r7, r7, #1
   2ba10:	ldr	r0, [fp, #-128]	; 0xffffff80
   2ba14:	ldr	r1, [fp, #-124]	; 0xffffff84
   2ba18:	add	r0, r0, r1
   2ba1c:	str	r0, [fp, #-128]	; 0xffffff80
   2ba20:	bcs	2ba44 <__assert_fail@plt+0x1a724>
   2ba24:	mov	r0, r5
   2ba28:	bl	2c390 <__assert_fail@plt+0x1b070>
   2ba2c:	ldrb	r0, [fp, #-120]	; 0xffffff88
   2ba30:	cmp	r0, #0
   2ba34:	beq	2ba08 <__assert_fail@plt+0x1a6e8>
   2ba38:	ldr	r0, [fp, #-116]	; 0xffffff8c
   2ba3c:	cmp	r0, #0
   2ba40:	bne	2ba08 <__assert_fail@plt+0x1a6e8>
   2ba44:	mov	r0, r5
   2ba48:	bl	2c390 <__assert_fail@plt+0x1b070>
   2ba4c:	ldrb	r0, [fp, #-120]	; 0xffffff88
   2ba50:	cmp	r0, #0
   2ba54:	beq	2ba8c <__assert_fail@plt+0x1a76c>
   2ba58:	ldr	r0, [fp, #-116]	; 0xffffff8c
   2ba5c:	mov	r1, r4
   2ba60:	cmp	r0, #0
   2ba64:	bne	2ba90 <__assert_fail@plt+0x1a770>
   2ba68:	ldr	r1, [sp, #16]
   2ba6c:	mov	r0, sl
   2ba70:	add	r2, sp, #80	; 0x50
   2ba74:	bl	2be24 <__assert_fail@plt+0x1ab04>
   2ba78:	mov	r8, #0
   2ba7c:	cmp	r0, #0
   2ba80:	mov	r1, r4
   2ba84:	beq	2ba90 <__assert_fail@plt+0x1a770>
   2ba88:	b	2be18 <__assert_fail@plt+0x1aaf8>
   2ba8c:	mov	r1, r4
   2ba90:	ldrb	r0, [sp, #160]	; 0xa0
   2ba94:	add	r7, r4, #1
   2ba98:	str	r1, [sp, #20]
   2ba9c:	cmp	r0, #0
   2baa0:	ldrbne	r0, [fp, #-64]	; 0xffffffc0
   2baa4:	cmpne	r0, #0
   2baa8:	bne	2bad4 <__assert_fail@plt+0x1a7b4>
   2baac:	ldr	r2, [sp, #156]	; 0x9c
   2bab0:	ldr	r0, [fp, #-68]	; 0xffffffbc
   2bab4:	cmp	r2, r0
   2bab8:	bne	2bc90 <__assert_fail@plt+0x1a970>
   2babc:	ldr	r1, [fp, #-72]	; 0xffffffb8
   2bac0:	ldr	r0, [sp, #152]	; 0x98
   2bac4:	bl	111f4 <bcmp@plt>
   2bac8:	cmp	r0, #0
   2bacc:	bne	2bc90 <__assert_fail@plt+0x1a970>
   2bad0:	b	2bae4 <__assert_fail@plt+0x1a7c4>
   2bad4:	ldr	r0, [fp, #-60]	; 0xffffffc4
   2bad8:	ldr	r1, [sp, #164]	; 0xa4
   2badc:	cmp	r1, r0
   2bae0:	bne	2bc90 <__assert_fail@plt+0x1a970>
   2bae4:	add	r2, sp, #136	; 0x88
   2bae8:	mov	r1, #48	; 0x30
   2baec:	add	r3, sp, #80	; 0x50
   2baf0:	str	r9, [sp]
   2baf4:	str	r8, [sp, #4]
   2baf8:	mov	r0, r2
   2bafc:	add	r2, r2, #32
   2bb00:	vld1.64	{d16-d17}, [r0], r1
   2bb04:	ldr	r1, [sp, #8]
   2bb08:	vld1.64	{d20-d21}, [r2]
   2bb0c:	vldr	d22, [r0]
   2bb10:	add	r0, r3, #32
   2bb14:	vld1.64	{d18-d19}, [r1]
   2bb18:	add	r1, r3, #16
   2bb1c:	vst1.64	{d20-d21}, [r0]
   2bb20:	mov	r0, r3
   2bb24:	vst1.64	{d18-d19}, [r1]
   2bb28:	mov	r1, #12
   2bb2c:	vst1.64	{d16-d17}, [r0], r1
   2bb30:	strb	r6, [r0]
   2bb34:	ldr	r0, [sp, #16]
   2bb38:	vstr	d22, [sp, #128]	; 0x80
   2bb3c:	ldr	r1, [sp, #100]	; 0x64
   2bb40:	str	r0, [sp, #40]	; 0x28
   2bb44:	ldr	r0, [sp, #96]	; 0x60
   2bb48:	strb	r6, [sp, #24]
   2bb4c:	add	r0, r0, r1
   2bb50:	str	r0, [sp, #96]	; 0x60
   2bb54:	ldr	r0, [sp, #12]
   2bb58:	str	r6, [r0]
   2bb5c:	str	r6, [r0, #4]
   2bb60:	add	r0, sp, #24
   2bb64:	strb	r6, [sp, #36]	; 0x24
   2bb68:	bl	2c390 <__assert_fail@plt+0x1b070>
   2bb6c:	ldrb	r0, [sp, #48]	; 0x30
   2bb70:	cmp	r0, #0
   2bb74:	beq	2bb84 <__assert_fail@plt+0x1a864>
   2bb78:	ldr	r0, [sp, #52]	; 0x34
   2bb7c:	cmp	r0, #0
   2bb80:	beq	2be20 <__assert_fail@plt+0x1ab00>
   2bb84:	strb	r6, [sp, #36]	; 0x24
   2bb88:	ldr	r0, [sp, #40]	; 0x28
   2bb8c:	ldr	r1, [sp, #44]	; 0x2c
   2bb90:	add	r0, r0, r1
   2bb94:	str	r0, [sp, #40]	; 0x28
   2bb98:	add	r0, sp, #24
   2bb9c:	bl	2c390 <__assert_fail@plt+0x1b070>
   2bba0:	ldrb	r0, [sp, #48]	; 0x30
   2bba4:	cmp	r0, #0
   2bba8:	beq	2bbb8 <__assert_fail@plt+0x1a898>
   2bbac:	ldr	r0, [sp, #52]	; 0x34
   2bbb0:	cmp	r0, #0
   2bbb4:	beq	2be08 <__assert_fail@plt+0x1aae8>
   2bbb8:	add	r7, r4, #2
   2bbbc:	add	r0, sp, #80	; 0x50
   2bbc0:	bl	2c390 <__assert_fail@plt+0x1b070>
   2bbc4:	ldr	r0, [sp, #108]	; 0x6c
   2bbc8:	ldrb	r1, [sp, #104]	; 0x68
   2bbcc:	cmp	r0, #0
   2bbd0:	bne	2bbdc <__assert_fail@plt+0x1a8bc>
   2bbd4:	cmp	r1, #0
   2bbd8:	bne	2bdf8 <__assert_fail@plt+0x1aad8>
   2bbdc:	cmp	r1, #0
   2bbe0:	ldrbne	r1, [sp, #48]	; 0x30
   2bbe4:	cmpne	r1, #0
   2bbe8:	bne	2bc24 <__assert_fail@plt+0x1a904>
   2bbec:	ldr	r4, [sp, #100]	; 0x64
   2bbf0:	ldr	r0, [sp, #44]	; 0x2c
   2bbf4:	cmp	r4, r0
   2bbf8:	bne	2bc84 <__assert_fail@plt+0x1a964>
   2bbfc:	ldr	r8, [sp, #40]	; 0x28
   2bc00:	ldr	r9, [sp, #96]	; 0x60
   2bc04:	mov	r2, r4
   2bc08:	mov	r0, r9
   2bc0c:	mov	r1, r8
   2bc10:	bl	111f4 <bcmp@plt>
   2bc14:	cmp	r0, #0
   2bc18:	mov	r0, r4
   2bc1c:	beq	2bc40 <__assert_fail@plt+0x1a920>
   2bc20:	b	2bc84 <__assert_fail@plt+0x1a964>
   2bc24:	ldr	r1, [sp, #52]	; 0x34
   2bc28:	cmp	r0, r1
   2bc2c:	bne	2bc84 <__assert_fail@plt+0x1a964>
   2bc30:	ldr	r8, [sp, #40]	; 0x28
   2bc34:	ldr	r4, [sp, #44]	; 0x2c
   2bc38:	ldr	r9, [sp, #96]	; 0x60
   2bc3c:	ldr	r0, [sp, #100]	; 0x64
   2bc40:	mov	r1, #0
   2bc44:	add	r0, r9, r0
   2bc48:	strb	r1, [sp, #92]	; 0x5c
   2bc4c:	str	r0, [sp, #96]	; 0x60
   2bc50:	add	r0, r8, r4
   2bc54:	strb	r1, [sp, #36]	; 0x24
   2bc58:	str	r0, [sp, #40]	; 0x28
   2bc5c:	add	r0, sp, #24
   2bc60:	bl	2c390 <__assert_fail@plt+0x1b070>
   2bc64:	ldrb	r0, [sp, #48]	; 0x30
   2bc68:	add	r7, r7, #1
   2bc6c:	cmp	r0, #0
   2bc70:	beq	2bbbc <__assert_fail@plt+0x1a89c>
   2bc74:	ldr	r0, [sp, #52]	; 0x34
   2bc78:	cmp	r0, #0
   2bc7c:	bne	2bbbc <__assert_fail@plt+0x1a89c>
   2bc80:	b	2be08 <__assert_fail@plt+0x1aae8>
   2bc84:	ldr	r8, [sp, #4]
   2bc88:	ldr	r9, [sp]
   2bc8c:	mov	r6, #0
   2bc90:	mov	r4, #0
   2bc94:	add	r9, r9, #1
   2bc98:	strb	r4, [sp, #148]	; 0x94
   2bc9c:	ldr	r0, [sp, #152]	; 0x98
   2bca0:	ldr	r1, [sp, #156]	; 0x9c
   2bca4:	add	r0, r0, r1
   2bca8:	str	r0, [sp, #152]	; 0x98
   2bcac:	add	r0, sp, #136	; 0x88
   2bcb0:	bl	2c390 <__assert_fail@plt+0x1b070>
   2bcb4:	ldrb	r0, [sp, #160]	; 0xa0
   2bcb8:	ldr	r1, [sp, #20]
   2bcbc:	cmp	r0, #0
   2bcc0:	beq	2b9d8 <__assert_fail@plt+0x1a6b8>
   2bcc4:	ldr	r0, [sp, #164]	; 0xa4
   2bcc8:	cmp	r0, #0
   2bccc:	bne	2b9d8 <__assert_fail@plt+0x1a6b8>
   2bcd0:	b	2bdfc <__assert_fail@plt+0x1aadc>
   2bcd4:	ldrb	r5, [r6]
   2bcd8:	cmp	r5, #0
   2bcdc:	beq	2bdf0 <__assert_fail@plt+0x1aad0>
   2bce0:	ldrb	r9, [sl]
   2bce4:	cmp	r9, #0
   2bce8:	beq	2bdf8 <__assert_fail@plt+0x1aad8>
   2bcec:	mov	lr, #1
   2bcf0:	mov	ip, #0
   2bcf4:	mov	r3, r6
   2bcf8:	mov	r7, #0
   2bcfc:	mov	r8, #0
   2bd00:	add	r0, r8, r8, lsl #2
   2bd04:	cmp	r7, r0
   2bd08:	bcc	2bd98 <__assert_fail@plt+0x1aa78>
   2bd0c:	tst	lr, #1
   2bd10:	beq	2bd98 <__assert_fail@plt+0x1aa78>
   2bd14:	cmp	r8, #10
   2bd18:	bcc	2bd98 <__assert_fail@plt+0x1aa78>
   2bd1c:	cmp	r3, #0
   2bd20:	beq	2bd60 <__assert_fail@plt+0x1aa40>
   2bd24:	sub	r1, r7, ip
   2bd28:	mov	r0, r3
   2bd2c:	str	r7, [sp, #20]
   2bd30:	mov	r7, r5
   2bd34:	mov	r4, lr
   2bd38:	mov	r5, r3
   2bd3c:	bl	1129c <strnlen@plt>
   2bd40:	mov	r3, r5
   2bd44:	mov	r5, r7
   2bd48:	ldr	r7, [sp, #20]
   2bd4c:	mov	lr, r4
   2bd50:	ldrb	r0, [r3, r0]!
   2bd54:	mov	ip, r7
   2bd58:	cmp	r0, #0
   2bd5c:	bne	2bd98 <__assert_fail@plt+0x1aa78>
   2bd60:	mov	r0, r6
   2bd64:	mov	r4, ip
   2bd68:	bl	11200 <strlen@plt>
   2bd6c:	mov	r2, r0
   2bd70:	mov	r0, sl
   2bd74:	mov	r1, r6
   2bd78:	sub	r3, fp, #88	; 0x58
   2bd7c:	bl	2c234 <__assert_fail@plt+0x1af14>
   2bd80:	cmp	r0, #0
   2bd84:	bne	2be10 <__assert_fail@plt+0x1aaf0>
   2bd88:	ldrb	r9, [sl]
   2bd8c:	mov	lr, #0
   2bd90:	mov	r3, #0
   2bd94:	mov	ip, r4
   2bd98:	uxtb	r0, r9
   2bd9c:	cmp	r0, r5
   2bda0:	bne	2bdd4 <__assert_fail@plt+0x1aab4>
   2bda4:	mov	r0, #1
   2bda8:	ldrb	r1, [r6, r0]
   2bdac:	cmp	r1, #0
   2bdb0:	beq	2bdf0 <__assert_fail@plt+0x1aad0>
   2bdb4:	ldrb	r2, [sl, r0]
   2bdb8:	cmp	r2, #0
   2bdbc:	beq	2bdf8 <__assert_fail@plt+0x1aad8>
   2bdc0:	add	r0, r0, #1
   2bdc4:	cmp	r2, r1
   2bdc8:	beq	2bda8 <__assert_fail@plt+0x1aa88>
   2bdcc:	add	r7, r7, r0
   2bdd0:	b	2bdd8 <__assert_fail@plt+0x1aab8>
   2bdd4:	add	r7, r7, #1
   2bdd8:	ldrb	r9, [sl, #1]!
   2bddc:	add	r8, r8, #1
   2bde0:	mov	r4, #0
   2bde4:	cmp	r9, #0
   2bde8:	bne	2bd00 <__assert_fail@plt+0x1a9e0>
   2bdec:	b	2bdfc <__assert_fail@plt+0x1aadc>
   2bdf0:	mov	r4, sl
   2bdf4:	b	2bdfc <__assert_fail@plt+0x1aadc>
   2bdf8:	mov	r4, #0
   2bdfc:	mov	r0, r4
   2be00:	sub	sp, fp, #28
   2be04:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2be08:	ldr	r4, [sp, #152]	; 0x98
   2be0c:	b	2bdfc <__assert_fail@plt+0x1aadc>
   2be10:	ldr	r4, [fp, #-88]	; 0xffffffa8
   2be14:	b	2bdfc <__assert_fail@plt+0x1aadc>
   2be18:	ldr	r4, [sp, #80]	; 0x50
   2be1c:	b	2bdfc <__assert_fail@plt+0x1aadc>
   2be20:	bl	11314 <abort@plt>
   2be24:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2be28:	add	fp, sp, #28
   2be2c:	sub	sp, sp, #132	; 0x84
   2be30:	mov	r4, r0
   2be34:	mov	r0, r1
   2be38:	mov	r8, r2
   2be3c:	mov	r7, r1
   2be40:	bl	2cd84 <__assert_fail@plt+0x1ba64>
   2be44:	mov	sl, r0
   2be48:	movw	r0, #47662	; 0xba2e
   2be4c:	mov	r5, #0
   2be50:	movt	r0, #744	; 0x2e8
   2be54:	cmp	sl, r0
   2be58:	bhi	2c224 <__assert_fail@plt+0x1af04>
   2be5c:	mov	r0, #44	; 0x2c
   2be60:	mul	r0, sl, r0
   2be64:	cmp	r0, #4016	; 0xfb0
   2be68:	bhi	2be90 <__assert_fail@plt+0x1ab70>
   2be6c:	add	r0, r0, #22
   2be70:	bic	r0, r0, #7
   2be74:	sub	r0, sp, r0
   2be78:	add	r1, r0, #15
   2be7c:	bic	r9, r1, #15
   2be80:	mov	sp, r0
   2be84:	cmp	r9, #0
   2be88:	bne	2bea0 <__assert_fail@plt+0x1ab80>
   2be8c:	b	2c224 <__assert_fail@plt+0x1af04>
   2be90:	bl	2cc38 <__assert_fail@plt+0x1b918>
   2be94:	mov	r9, r0
   2be98:	cmp	r9, #0
   2be9c:	beq	2c224 <__assert_fail@plt+0x1af04>
   2bea0:	sub	r6, fp, #88	; 0x58
   2bea4:	str	r4, [fp, #-160]	; 0xffffff60
   2bea8:	mov	r4, #0
   2beac:	mov	r0, r6
   2beb0:	str	r4, [fp, #-80]	; 0xffffffb0
   2beb4:	str	r4, [fp, #-84]	; 0xffffffac
   2beb8:	strb	r4, [fp, #-76]	; 0xffffffb4
   2bebc:	strb	r4, [fp, #-88]	; 0xffffffa8
   2bec0:	str	r7, [fp, #-72]	; 0xffffffb8
   2bec4:	bl	2c390 <__assert_fail@plt+0x1b070>
   2bec8:	add	r0, sl, sl, lsl #2
   2becc:	add	r3, r9, r0, lsl #3
   2bed0:	ldrb	r0, [fp, #-64]	; 0xffffffc0
   2bed4:	str	r3, [fp, #-148]	; 0xffffff6c
   2bed8:	cmp	r0, #0
   2bedc:	beq	2beec <__assert_fail@plt+0x1abcc>
   2bee0:	ldr	r0, [fp, #-60]	; 0xffffffc4
   2bee4:	cmp	r0, #0
   2bee8:	beq	2bf70 <__assert_fail@plt+0x1ac50>
   2beec:	add	r7, r9, #16
   2bef0:	add	r5, r6, #32
   2bef4:	ldr	r0, [fp, #-72]	; 0xffffffb8
   2bef8:	cmp	r0, r5
   2befc:	bne	2bf14 <__assert_fail@plt+0x1abf4>
   2bf00:	ldr	r2, [fp, #-68]	; 0xffffffbc
   2bf04:	mov	r0, r7
   2bf08:	mov	r1, r5
   2bf0c:	bl	110d4 <memcpy@plt>
   2bf10:	mov	r0, r7
   2bf14:	str	r0, [r7, #-16]
   2bf18:	ldr	r0, [fp, #-68]	; 0xffffffbc
   2bf1c:	str	r0, [r7, #-12]
   2bf20:	ldrb	r0, [fp, #-64]	; 0xffffffc0
   2bf24:	strb	r0, [r7, #-8]
   2bf28:	cmp	r0, #0
   2bf2c:	ldrne	r0, [fp, #-60]	; 0xffffffc4
   2bf30:	strne	r0, [r7, #-4]
   2bf34:	strb	r4, [fp, #-76]	; 0xffffffb4
   2bf38:	ldr	r0, [fp, #-72]	; 0xffffffb8
   2bf3c:	ldr	r1, [fp, #-68]	; 0xffffffbc
   2bf40:	add	r0, r0, r1
   2bf44:	str	r0, [fp, #-72]	; 0xffffffb8
   2bf48:	mov	r0, r6
   2bf4c:	bl	2c390 <__assert_fail@plt+0x1b070>
   2bf50:	ldrb	r1, [fp, #-64]	; 0xffffffc0
   2bf54:	ldr	r0, [fp, #-60]	; 0xffffffc4
   2bf58:	ldr	r3, [fp, #-148]	; 0xffffff6c
   2bf5c:	add	r7, r7, #40	; 0x28
   2bf60:	cmp	r1, #0
   2bf64:	beq	2bef4 <__assert_fail@plt+0x1abd4>
   2bf68:	cmp	r0, #0
   2bf6c:	bne	2bef4 <__assert_fail@plt+0x1abd4>
   2bf70:	mov	r0, #1
   2bf74:	cmp	sl, #3
   2bf78:	str	r8, [fp, #-156]	; 0xffffff64
   2bf7c:	str	sl, [fp, #-152]	; 0xffffff68
   2bf80:	str	r0, [r3, #4]
   2bf84:	bcc	2c050 <__assert_fail@plt+0x1ad30>
   2bf88:	mov	r4, #2
   2bf8c:	mov	r5, #0
   2bf90:	b	2bfb0 <__assert_fail@plt+0x1ac90>
   2bf94:	mov	r5, #0
   2bf98:	mov	r0, r4
   2bf9c:	str	r0, [r3, r4, lsl #2]
   2bfa0:	ldr	r0, [fp, #-152]	; 0xffffff68
   2bfa4:	add	r4, r4, #1
   2bfa8:	cmp	r4, r0
   2bfac:	beq	2c050 <__assert_fail@plt+0x1ad30>
   2bfb0:	add	r0, r4, r4, lsl #2
   2bfb4:	add	r0, r9, r0, lsl #3
   2bfb8:	ldrb	r8, [r0, #-32]	; 0xffffffe0
   2bfbc:	sub	sl, r0, #40	; 0x28
   2bfc0:	sub	r6, r0, #36	; 0x24
   2bfc4:	sub	r7, r0, #28
   2bfc8:	cmp	r8, #0
   2bfcc:	beq	2bff8 <__assert_fail@plt+0x1acd8>
   2bfd0:	add	r0, r5, r5, lsl #2
   2bfd4:	add	r0, r9, r0, lsl #3
   2bfd8:	ldrb	r1, [r0, #8]
   2bfdc:	cmp	r1, #0
   2bfe0:	beq	2bff8 <__assert_fail@plt+0x1acd8>
   2bfe4:	ldr	r0, [r0, #12]
   2bfe8:	ldr	r1, [r7]
   2bfec:	cmp	r1, r0
   2bff0:	bne	2c028 <__assert_fail@plt+0x1ad08>
   2bff4:	b	2c044 <__assert_fail@plt+0x1ad24>
   2bff8:	add	r0, r5, r5, lsl #2
   2bffc:	ldr	r2, [r6]
   2c000:	add	r1, r9, r0, lsl #3
   2c004:	ldr	r1, [r1, #4]
   2c008:	cmp	r2, r1
   2c00c:	bne	2c028 <__assert_fail@plt+0x1ad08>
   2c010:	ldr	r1, [r9, r0, lsl #3]
   2c014:	ldr	r0, [sl]
   2c018:	bl	111f4 <bcmp@plt>
   2c01c:	ldr	r3, [fp, #-148]	; 0xffffff6c
   2c020:	cmp	r0, #0
   2c024:	beq	2c044 <__assert_fail@plt+0x1ad24>
   2c028:	cmp	r5, #0
   2c02c:	beq	2bf94 <__assert_fail@plt+0x1ac74>
   2c030:	ldr	r0, [r3, r5, lsl #2]
   2c034:	sub	r5, r5, r0
   2c038:	cmp	r8, #0
   2c03c:	bne	2bfd0 <__assert_fail@plt+0x1acb0>
   2c040:	b	2bff8 <__assert_fail@plt+0x1acd8>
   2c044:	add	r5, r5, #1
   2c048:	sub	r0, r4, r5
   2c04c:	b	2bf9c <__assert_fail@plt+0x1ac7c>
   2c050:	ldr	r8, [fp, #-156]	; 0xffffff64
   2c054:	ldr	r0, [fp, #-160]	; 0xffffff60
   2c058:	mov	r6, #0
   2c05c:	str	r6, [r8]
   2c060:	str	r6, [fp, #-80]	; 0xffffffb0
   2c064:	str	r6, [fp, #-84]	; 0xffffffac
   2c068:	strb	r6, [fp, #-76]	; 0xffffffb4
   2c06c:	strb	r6, [fp, #-88]	; 0xffffffa8
   2c070:	str	r6, [fp, #-136]	; 0xffffff78
   2c074:	str	r6, [fp, #-140]	; 0xffffff74
   2c078:	str	r0, [fp, #-128]	; 0xffffff80
   2c07c:	str	r0, [fp, #-72]	; 0xffffffb8
   2c080:	sub	r0, fp, #144	; 0x90
   2c084:	strb	r6, [fp, #-132]	; 0xffffff7c
   2c088:	strb	r6, [fp, #-144]	; 0xffffff70
   2c08c:	bl	2c390 <__assert_fail@plt+0x1b070>
   2c090:	ldr	r0, [fp, #-116]	; 0xffffff8c
   2c094:	ldrb	r1, [fp, #-120]	; 0xffffff88
   2c098:	cmp	r0, #0
   2c09c:	bne	2c0a8 <__assert_fail@plt+0x1ad88>
   2c0a0:	cmp	r1, #0
   2c0a4:	bne	2c218 <__assert_fail@plt+0x1aef8>
   2c0a8:	clz	r1, r1
   2c0ac:	sub	r4, fp, #88	; 0x58
   2c0b0:	mov	sl, #0
   2c0b4:	lsr	r1, r1, #5
   2c0b8:	add	r2, sl, sl, lsl #2
   2c0bc:	tst	r1, #1
   2c0c0:	add	r3, r9, r2, lsl #3
   2c0c4:	bne	2c0ec <__assert_fail@plt+0x1adcc>
   2c0c8:	ldrb	r1, [r3, #8]
   2c0cc:	cmp	r1, #0
   2c0d0:	beq	2c0ec <__assert_fail@plt+0x1adcc>
   2c0d4:	ldr	r1, [r3, #12]
   2c0d8:	cmp	r1, r0
   2c0dc:	bne	2c118 <__assert_fail@plt+0x1adf8>
   2c0e0:	ldr	r7, [fp, #-128]	; 0xffffff80
   2c0e4:	ldr	r5, [fp, #-124]	; 0xffffff84
   2c0e8:	b	2c178 <__assert_fail@plt+0x1ae58>
   2c0ec:	ldr	r5, [r3, #4]
   2c0f0:	ldr	r0, [fp, #-124]	; 0xffffff84
   2c0f4:	cmp	r5, r0
   2c0f8:	bne	2c118 <__assert_fail@plt+0x1adf8>
   2c0fc:	ldr	r0, [r9, r2, lsl #3]
   2c100:	ldr	r7, [fp, #-128]	; 0xffffff80
   2c104:	mov	r2, r5
   2c108:	mov	r1, r7
   2c10c:	bl	111f4 <bcmp@plt>
   2c110:	cmp	r0, #0
   2c114:	beq	2c178 <__assert_fail@plt+0x1ae58>
   2c118:	cmp	sl, #0
   2c11c:	beq	2c198 <__assert_fail@plt+0x1ae78>
   2c120:	ldr	r0, [fp, #-148]	; 0xffffff6c
   2c124:	ldr	r5, [r0, sl, lsl #2]
   2c128:	sub	sl, sl, r5
   2c12c:	cmp	r5, #0
   2c130:	bne	2c154 <__assert_fail@plt+0x1ae34>
   2c134:	b	2c1e4 <__assert_fail@plt+0x1aec4>
   2c138:	strb	r6, [fp, #-76]	; 0xffffffb4
   2c13c:	subs	r5, r5, #1
   2c140:	ldr	r0, [fp, #-72]	; 0xffffffb8
   2c144:	ldr	r1, [fp, #-68]	; 0xffffffbc
   2c148:	add	r0, r0, r1
   2c14c:	str	r0, [fp, #-72]	; 0xffffffb8
   2c150:	beq	2c1e4 <__assert_fail@plt+0x1aec4>
   2c154:	mov	r0, r4
   2c158:	bl	2c390 <__assert_fail@plt+0x1b070>
   2c15c:	ldrb	r0, [fp, #-64]	; 0xffffffc0
   2c160:	cmp	r0, #0
   2c164:	beq	2c138 <__assert_fail@plt+0x1ae18>
   2c168:	ldr	r0, [fp, #-60]	; 0xffffffc4
   2c16c:	cmp	r0, #0
   2c170:	bne	2c138 <__assert_fail@plt+0x1ae18>
   2c174:	b	2c230 <__assert_fail@plt+0x1af10>
   2c178:	add	r0, r7, r5
   2c17c:	strb	r6, [fp, #-132]	; 0xffffff7c
   2c180:	add	sl, sl, #1
   2c184:	str	r0, [fp, #-128]	; 0xffffff80
   2c188:	ldr	r0, [fp, #-152]	; 0xffffff68
   2c18c:	cmp	sl, r0
   2c190:	bne	2c1e4 <__assert_fail@plt+0x1aec4>
   2c194:	b	2c210 <__assert_fail@plt+0x1aef0>
   2c198:	mov	r0, r4
   2c19c:	bl	2c390 <__assert_fail@plt+0x1b070>
   2c1a0:	ldrb	r0, [fp, #-64]	; 0xffffffc0
   2c1a4:	cmp	r0, #0
   2c1a8:	beq	2c1b8 <__assert_fail@plt+0x1ae98>
   2c1ac:	ldr	r0, [fp, #-60]	; 0xffffffc4
   2c1b0:	cmp	r0, #0
   2c1b4:	beq	2c230 <__assert_fail@plt+0x1af10>
   2c1b8:	mov	sl, #0
   2c1bc:	strb	sl, [fp, #-76]	; 0xffffffb4
   2c1c0:	strb	sl, [fp, #-132]	; 0xffffff7c
   2c1c4:	ldr	r0, [fp, #-72]	; 0xffffffb8
   2c1c8:	ldr	r1, [fp, #-68]	; 0xffffffbc
   2c1cc:	add	r0, r0, r1
   2c1d0:	ldr	r1, [fp, #-124]	; 0xffffff84
   2c1d4:	str	r0, [fp, #-72]	; 0xffffffb8
   2c1d8:	ldr	r0, [fp, #-128]	; 0xffffff80
   2c1dc:	add	r0, r0, r1
   2c1e0:	str	r0, [fp, #-128]	; 0xffffff80
   2c1e4:	sub	r0, fp, #144	; 0x90
   2c1e8:	bl	2c390 <__assert_fail@plt+0x1b070>
   2c1ec:	ldrb	r2, [fp, #-120]	; 0xffffff88
   2c1f0:	clz	r0, r2
   2c1f4:	lsr	r1, r0, #5
   2c1f8:	ldr	r0, [fp, #-116]	; 0xffffff8c
   2c1fc:	cmp	r0, #0
   2c200:	bne	2c0b8 <__assert_fail@plt+0x1ad98>
   2c204:	cmp	r2, #0
   2c208:	beq	2c0b8 <__assert_fail@plt+0x1ad98>
   2c20c:	b	2c218 <__assert_fail@plt+0x1aef8>
   2c210:	ldr	r0, [fp, #-72]	; 0xffffffb8
   2c214:	str	r0, [r8]
   2c218:	mov	r0, r9
   2c21c:	bl	2cca8 <__assert_fail@plt+0x1b988>
   2c220:	mov	r5, #1
   2c224:	mov	r0, r5
   2c228:	sub	sp, fp, #28
   2c22c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2c230:	bl	11314 <abort@plt>
   2c234:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   2c238:	add	fp, sp, #24
   2c23c:	mov	r4, #0
   2c240:	cmn	r2, #-536870911	; 0xe0000001
   2c244:	bhi	2c384 <__assert_fail@plt+0x1b064>
   2c248:	mov	r7, r0
   2c24c:	lsl	r0, r2, #2
   2c250:	mov	r8, r3
   2c254:	mov	r5, r2
   2c258:	mov	r6, r1
   2c25c:	cmp	r0, #4016	; 0xfb0
   2c260:	bhi	2c288 <__assert_fail@plt+0x1af68>
   2c264:	add	r0, r0, #22
   2c268:	bic	r0, r0, #7
   2c26c:	sub	r1, sp, r0
   2c270:	add	r0, r1, #15
   2c274:	bic	r0, r0, #15
   2c278:	mov	sp, r1
   2c27c:	cmp	r0, #0
   2c280:	bne	2c294 <__assert_fail@plt+0x1af74>
   2c284:	b	2c384 <__assert_fail@plt+0x1b064>
   2c288:	bl	2cc38 <__assert_fail@plt+0x1b918>
   2c28c:	cmp	r0, #0
   2c290:	beq	2c384 <__assert_fail@plt+0x1b064>
   2c294:	mov	r1, #1
   2c298:	cmp	r5, #3
   2c29c:	str	r1, [r0, #4]
   2c2a0:	bcc	2c308 <__assert_fail@plt+0x1afe8>
   2c2a4:	mov	r1, #2
   2c2a8:	mov	r2, #0
   2c2ac:	b	2c2c8 <__assert_fail@plt+0x1afa8>
   2c2b0:	add	r2, r2, #1
   2c2b4:	sub	r3, r1, r2
   2c2b8:	str	r3, [r0, r1, lsl #2]
   2c2bc:	add	r1, r1, #1
   2c2c0:	cmp	r1, r5
   2c2c4:	beq	2c308 <__assert_fail@plt+0x1afe8>
   2c2c8:	add	r3, r1, r6
   2c2cc:	ldrb	r4, [r6, r2]
   2c2d0:	ldrb	r3, [r3, #-1]
   2c2d4:	cmp	r3, r4
   2c2d8:	beq	2c2b0 <__assert_fail@plt+0x1af90>
   2c2dc:	cmp	r2, #0
   2c2e0:	beq	2c2fc <__assert_fail@plt+0x1afdc>
   2c2e4:	ldr	r4, [r0, r2, lsl #2]
   2c2e8:	sub	r2, r2, r4
   2c2ec:	ldrb	r4, [r6, r2]
   2c2f0:	cmp	r3, r4
   2c2f4:	bne	2c2dc <__assert_fail@plt+0x1afbc>
   2c2f8:	b	2c2b0 <__assert_fail@plt+0x1af90>
   2c2fc:	mov	r2, #0
   2c300:	mov	r3, r1
   2c304:	b	2c2b8 <__assert_fail@plt+0x1af98>
   2c308:	mov	r1, #0
   2c30c:	str	r1, [r8]
   2c310:	ldrb	r3, [r7]
   2c314:	cmp	r3, #0
   2c318:	beq	2c37c <__assert_fail@plt+0x1b05c>
   2c31c:	mov	r2, r7
   2c320:	b	2c33c <__assert_fail@plt+0x1b01c>
   2c324:	add	r7, r7, #1
   2c328:	add	r2, r2, #1
   2c32c:	mov	r1, #0
   2c330:	ldrb	r3, [r7]
   2c334:	cmp	r3, #0
   2c338:	beq	2c37c <__assert_fail@plt+0x1b05c>
   2c33c:	ldrb	r4, [r6, r1]
   2c340:	uxtb	r3, r3
   2c344:	cmp	r4, r3
   2c348:	bne	2c360 <__assert_fail@plt+0x1b040>
   2c34c:	add	r1, r1, #1
   2c350:	cmp	r1, r5
   2c354:	beq	2c378 <__assert_fail@plt+0x1b058>
   2c358:	add	r7, r7, #1
   2c35c:	b	2c330 <__assert_fail@plt+0x1b010>
   2c360:	cmp	r1, #0
   2c364:	beq	2c324 <__assert_fail@plt+0x1b004>
   2c368:	ldr	r3, [r0, r1, lsl #2]
   2c36c:	sub	r1, r1, r3
   2c370:	add	r2, r2, r3
   2c374:	b	2c330 <__assert_fail@plt+0x1b010>
   2c378:	str	r2, [r8]
   2c37c:	bl	2cca8 <__assert_fail@plt+0x1b988>
   2c380:	mov	r4, #1
   2c384:	mov	r0, r4
   2c388:	sub	sp, fp, #24
   2c38c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   2c390:	push	{r4, r5, r6, r7, fp, lr}
   2c394:	add	fp, sp, #16
   2c398:	mov	r4, r0
   2c39c:	ldrb	r0, [r0, #12]
   2c3a0:	cmp	r0, #0
   2c3a4:	popne	{r4, r5, r6, r7, fp, pc}
   2c3a8:	ldrb	r0, [r4]
   2c3ac:	ldr	r5, [r4, #16]
   2c3b0:	cmp	r0, #0
   2c3b4:	beq	2c410 <__assert_fail@plt+0x1b0f0>
   2c3b8:	bl	11158 <__ctype_get_mb_cur_max@plt>
   2c3bc:	mov	r1, r0
   2c3c0:	mov	r0, r5
   2c3c4:	bl	2cb9c <__assert_fail@plt+0x1b87c>
   2c3c8:	add	r6, r4, #4
   2c3cc:	add	r7, r4, #28
   2c3d0:	mov	r2, r0
   2c3d4:	mov	r1, r5
   2c3d8:	mov	r0, r7
   2c3dc:	mov	r3, r6
   2c3e0:	bl	2b8a0 <__assert_fail@plt+0x1a580>
   2c3e4:	cmn	r0, #2
   2c3e8:	str	r0, [r4, #20]
   2c3ec:	beq	2c48c <__assert_fail@plt+0x1b16c>
   2c3f0:	cmp	r0, #0
   2c3f4:	beq	2c448 <__assert_fail@plt+0x1b128>
   2c3f8:	cmn	r0, #1
   2c3fc:	bne	2c46c <__assert_fail@plt+0x1b14c>
   2c400:	mov	r0, #0
   2c404:	strb	r0, [r4, #24]
   2c408:	mov	r0, #1
   2c40c:	b	2c49c <__assert_fail@plt+0x1b17c>
   2c410:	ldrb	r0, [r5]
   2c414:	movw	r2, #8048	; 0x1f70
   2c418:	movt	r2, #3
   2c41c:	ubfx	r1, r0, #5, #3
   2c420:	ldr	r1, [r2, r1, lsl #2]
   2c424:	and	r2, r0, #31
   2c428:	mov	r0, #1
   2c42c:	tst	r1, r0, lsl r2
   2c430:	beq	2c4ac <__assert_fail@plt+0x1b18c>
   2c434:	str	r0, [r4, #20]
   2c438:	ldrb	r1, [r5]
   2c43c:	strb	r0, [r4, #24]
   2c440:	str	r1, [r4, #28]
   2c444:	b	2c4a0 <__assert_fail@plt+0x1b180>
   2c448:	mov	r0, #1
   2c44c:	str	r0, [r4, #20]
   2c450:	ldr	r0, [r4, #16]
   2c454:	ldrb	r0, [r0]
   2c458:	cmp	r0, #0
   2c45c:	bne	2c4c8 <__assert_fail@plt+0x1b1a8>
   2c460:	ldr	r0, [r7]
   2c464:	cmp	r0, #0
   2c468:	bne	2c4e0 <__assert_fail@plt+0x1b1c0>
   2c46c:	mov	r0, #1
   2c470:	strb	r0, [r4, #24]
   2c474:	mov	r0, r6
   2c478:	bl	110e0 <mbsinit@plt>
   2c47c:	cmp	r0, #0
   2c480:	movne	r0, #0
   2c484:	strbne	r0, [r4]
   2c488:	b	2c4a0 <__assert_fail@plt+0x1b180>
   2c48c:	ldr	r0, [r4, #16]
   2c490:	bl	11200 <strlen@plt>
   2c494:	mov	r1, #0
   2c498:	strb	r1, [r4, #24]
   2c49c:	str	r0, [r4, #20]
   2c4a0:	mov	r0, #1
   2c4a4:	strb	r0, [r4, #12]
   2c4a8:	pop	{r4, r5, r6, r7, fp, pc}
   2c4ac:	add	r0, r4, #4
   2c4b0:	bl	110e0 <mbsinit@plt>
   2c4b4:	cmp	r0, #0
   2c4b8:	beq	2c4f8 <__assert_fail@plt+0x1b1d8>
   2c4bc:	mov	r0, #1
   2c4c0:	strb	r0, [r4]
   2c4c4:	b	2c3b8 <__assert_fail@plt+0x1b098>
   2c4c8:	movw	r0, #7935	; 0x1eff
   2c4cc:	movw	r1, #7976	; 0x1f28
   2c4d0:	movw	r3, #7992	; 0x1f38
   2c4d4:	mov	r2, #171	; 0xab
   2c4d8:	movt	r0, #3
   2c4dc:	b	2c50c <__assert_fail@plt+0x1b1ec>
   2c4e0:	movw	r0, #7958	; 0x1f16
   2c4e4:	movw	r1, #7976	; 0x1f28
   2c4e8:	movw	r3, #7992	; 0x1f38
   2c4ec:	mov	r2, #172	; 0xac
   2c4f0:	movt	r0, #3
   2c4f4:	b	2c50c <__assert_fail@plt+0x1b1ec>
   2c4f8:	movw	r0, #7851	; 0x1eab
   2c4fc:	movw	r1, #7976	; 0x1f28
   2c500:	movw	r3, #7992	; 0x1f38
   2c504:	mov	r2, #143	; 0x8f
   2c508:	movt	r0, #3
   2c50c:	movt	r1, #3
   2c510:	movt	r3, #3
   2c514:	bl	11320 <__assert_fail@plt>
   2c518:	ldr	r2, [r0, #16]
   2c51c:	add	r1, r2, r1
   2c520:	str	r1, [r0, #16]
   2c524:	bx	lr
   2c528:	push	{r4, r5, r6, sl, fp, lr}
   2c52c:	add	fp, sp, #16
   2c530:	mov	r5, r1
   2c534:	ldrb	r1, [r1]
   2c538:	mov	r4, r0
   2c53c:	strb	r1, [r0], #4
   2c540:	cmp	r1, #0
   2c544:	beq	2c554 <__assert_fail@plt+0x1b234>
   2c548:	ldmib	r5, {r1, r2}
   2c54c:	stm	r0, {r1, r2}
   2c550:	b	2c560 <__assert_fail@plt+0x1b240>
   2c554:	mov	r1, #0
   2c558:	str	r1, [r0]
   2c55c:	str	r1, [r0, #4]
   2c560:	ldrb	r0, [r5, #12]
   2c564:	strb	r0, [r4, #12]
   2c568:	add	r0, r5, #32
   2c56c:	ldr	r1, [r5, #16]
   2c570:	cmp	r1, r0
   2c574:	beq	2c580 <__assert_fail@plt+0x1b260>
   2c578:	mov	r6, r1
   2c57c:	b	2c590 <__assert_fail@plt+0x1b270>
   2c580:	ldr	r2, [r5, #20]
   2c584:	add	r6, r4, #32
   2c588:	mov	r0, r6
   2c58c:	bl	110d4 <memcpy@plt>
   2c590:	str	r6, [r4, #16]
   2c594:	ldr	r0, [r5, #20]
   2c598:	str	r0, [r4, #20]
   2c59c:	ldrb	r0, [r5, #24]
   2c5a0:	strb	r0, [r4, #24]
   2c5a4:	cmp	r0, #0
   2c5a8:	ldrne	r0, [r5, #28]
   2c5ac:	strne	r0, [r4, #28]
   2c5b0:	pop	{r4, r5, r6, sl, fp, pc}
   2c5b4:	cmp	r2, #0
   2c5b8:	beq	2c5e8 <__assert_fail@plt+0x1b2c8>
   2c5bc:	mvn	r3, #0
   2c5c0:	udiv	r3, r3, r2
   2c5c4:	cmp	r3, r1
   2c5c8:	bcs	2c5e8 <__assert_fail@plt+0x1b2c8>
   2c5cc:	push	{fp, lr}
   2c5d0:	mov	fp, sp
   2c5d4:	bl	11218 <__errno_location@plt>
   2c5d8:	mov	r1, #12
   2c5dc:	str	r1, [r0]
   2c5e0:	mov	r0, #0
   2c5e4:	pop	{fp, pc}
   2c5e8:	mul	r1, r2, r1
   2c5ec:	b	2b364 <__assert_fail@plt+0x1a044>
   2c5f0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2c5f4:	add	fp, sp, #28
   2c5f8:	sub	sp, sp, #44	; 0x2c
   2c5fc:	sub	sp, sp, #4096	; 0x1000
   2c600:	mov	r5, r0
   2c604:	mov	r0, #0
   2c608:	str	r3, [sp, #16]
   2c60c:	mov	r4, r1
   2c610:	str	r2, [sp, #20]
   2c614:	mov	r1, #0
   2c618:	mov	r3, #0
   2c61c:	str	r0, [sp]
   2c620:	mov	r0, r2
   2c624:	mov	r2, #0
   2c628:	bl	11080 <iconv@plt>
   2c62c:	cmp	r4, #0
   2c630:	mov	r6, #0
   2c634:	str	r5, [sp, #8]
   2c638:	str	r5, [sp, #36]	; 0x24
   2c63c:	str	r4, [sp, #32]
   2c640:	str	r4, [sp, #12]
   2c644:	beq	2c6c0 <__assert_fail@plt+0x1b3a0>
   2c648:	mov	r6, #0
   2c64c:	add	r8, sp, #40	; 0x28
   2c650:	mov	sl, #4096	; 0x1000
   2c654:	add	r9, sp, #24
   2c658:	add	r4, sp, #36	; 0x24
   2c65c:	add	r7, sp, #32
   2c660:	add	r5, sp, #28
   2c664:	b	2c680 <__assert_fail@plt+0x1b360>
   2c668:	ldr	r1, [sp, #28]
   2c66c:	sub	r0, r6, r8
   2c670:	add	r6, r0, r1
   2c674:	ldr	r0, [sp, #32]
   2c678:	cmp	r0, #0
   2c67c:	beq	2c6c0 <__assert_fail@plt+0x1b3a0>
   2c680:	ldr	r0, [sp, #20]
   2c684:	mov	r1, r4
   2c688:	mov	r2, r7
   2c68c:	mov	r3, r5
   2c690:	str	r8, [sp, #28]
   2c694:	str	sl, [sp, #24]
   2c698:	str	r9, [sp]
   2c69c:	bl	11080 <iconv@plt>
   2c6a0:	cmn	r0, #1
   2c6a4:	bne	2c668 <__assert_fail@plt+0x1b348>
   2c6a8:	bl	11218 <__errno_location@plt>
   2c6ac:	ldr	r0, [r0]
   2c6b0:	cmp	r0, #7
   2c6b4:	beq	2c668 <__assert_fail@plt+0x1b348>
   2c6b8:	cmp	r0, #22
   2c6bc:	bne	2c710 <__assert_fail@plt+0x1b3f0>
   2c6c0:	mov	r0, #4096	; 0x1000
   2c6c4:	add	r4, sp, #40	; 0x28
   2c6c8:	add	r3, sp, #28
   2c6cc:	mov	r1, #0
   2c6d0:	mov	r2, #0
   2c6d4:	str	r0, [sp, #24]
   2c6d8:	add	r0, sp, #24
   2c6dc:	str	r4, [sp, #28]
   2c6e0:	str	r0, [sp]
   2c6e4:	ldr	r0, [sp, #20]
   2c6e8:	bl	11080 <iconv@plt>
   2c6ec:	cmn	r0, #1
   2c6f0:	beq	2c708 <__assert_fail@plt+0x1b3e8>
   2c6f4:	ldr	r1, [sp, #28]
   2c6f8:	sub	r0, r6, r4
   2c6fc:	add	r6, r0, r1
   2c700:	mov	r0, #1
   2c704:	b	2c714 <__assert_fail@plt+0x1b3f4>
   2c708:	mov	r0, #0
   2c70c:	b	2c714 <__assert_fail@plt+0x1b3f4>
   2c710:	mov	r0, #0
   2c714:	mvn	r9, #0
   2c718:	cmp	r0, #0
   2c71c:	beq	2c868 <__assert_fail@plt+0x1b548>
   2c720:	ldr	r1, [fp, #8]
   2c724:	cmp	r6, #0
   2c728:	beq	2c7dc <__assert_fail@plt+0x1b4bc>
   2c72c:	ldr	r0, [sp, #16]
   2c730:	ldr	r4, [r0]
   2c734:	cmp	r4, #0
   2c738:	beq	2c748 <__assert_fail@plt+0x1b428>
   2c73c:	ldr	r0, [r1]
   2c740:	cmp	r0, r6
   2c744:	bcs	2c75c <__assert_fail@plt+0x1b43c>
   2c748:	mov	r0, r6
   2c74c:	bl	2b334 <__assert_fail@plt+0x1a014>
   2c750:	mov	r4, r0
   2c754:	cmp	r0, #0
   2c758:	beq	2c7e8 <__assert_fail@plt+0x1b4c8>
   2c75c:	mov	r0, #0
   2c760:	mov	r1, #0
   2c764:	mov	r2, #0
   2c768:	mov	r3, #0
   2c76c:	str	r0, [sp]
   2c770:	ldr	r0, [sp, #20]
   2c774:	bl	11080 <iconv@plt>
   2c778:	ldr	r0, [sp, #8]
   2c77c:	mov	sl, r4
   2c780:	str	r4, [sp, #32]
   2c784:	str	r6, [sp, #28]
   2c788:	str	r0, [sp, #40]	; 0x28
   2c78c:	ldr	r0, [sp, #12]
   2c790:	cmp	r0, #0
   2c794:	str	r0, [sp, #36]	; 0x24
   2c798:	beq	2c808 <__assert_fail@plt+0x1b4e8>
   2c79c:	add	r8, sp, #28
   2c7a0:	add	r5, sp, #40	; 0x28
   2c7a4:	add	r7, sp, #36	; 0x24
   2c7a8:	add	r4, sp, #32
   2c7ac:	ldr	r0, [sp, #20]
   2c7b0:	mov	r1, r5
   2c7b4:	mov	r2, r7
   2c7b8:	mov	r3, r4
   2c7bc:	str	r8, [sp]
   2c7c0:	bl	11080 <iconv@plt>
   2c7c4:	cmn	r0, #1
   2c7c8:	beq	2c7f8 <__assert_fail@plt+0x1b4d8>
   2c7cc:	ldr	r0, [sp, #36]	; 0x24
   2c7d0:	cmp	r0, #0
   2c7d4:	bne	2c7ac <__assert_fail@plt+0x1b48c>
   2c7d8:	b	2c808 <__assert_fail@plt+0x1b4e8>
   2c7dc:	mov	r9, #0
   2c7e0:	str	r9, [r1]
   2c7e4:	b	2c868 <__assert_fail@plt+0x1b548>
   2c7e8:	bl	11218 <__errno_location@plt>
   2c7ec:	mov	r1, #12
   2c7f0:	str	r1, [r0]
   2c7f4:	b	2c868 <__assert_fail@plt+0x1b548>
   2c7f8:	bl	11218 <__errno_location@plt>
   2c7fc:	ldr	r0, [r0]
   2c800:	cmp	r0, #22
   2c804:	bne	2c850 <__assert_fail@plt+0x1b530>
   2c808:	add	r0, sp, #28
   2c80c:	add	r3, sp, #32
   2c810:	mov	r1, #0
   2c814:	mov	r2, #0
   2c818:	str	r0, [sp]
   2c81c:	ldr	r0, [sp, #20]
   2c820:	bl	11080 <iconv@plt>
   2c824:	cmn	r0, #1
   2c828:	beq	2c850 <__assert_fail@plt+0x1b530>
   2c82c:	ldr	r0, [sp, #28]
   2c830:	cmp	r0, #0
   2c834:	bne	2c874 <__assert_fail@plt+0x1b554>
   2c838:	ldr	r0, [sp, #16]
   2c83c:	mov	r9, #0
   2c840:	str	sl, [r0]
   2c844:	ldr	r0, [fp, #8]
   2c848:	str	r6, [r0]
   2c84c:	b	2c868 <__assert_fail@plt+0x1b548>
   2c850:	ldr	r0, [sp, #16]
   2c854:	ldr	r1, [r0]
   2c858:	cmp	sl, r1
   2c85c:	beq	2c868 <__assert_fail@plt+0x1b548>
   2c860:	mov	r0, sl
   2c864:	bl	184a0 <__assert_fail@plt+0x7180>
   2c868:	mov	r0, r9
   2c86c:	sub	sp, fp, #28
   2c870:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2c874:	bl	11314 <abort@plt>
   2c878:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2c87c:	add	fp, sp, #28
   2c880:	sub	sp, sp, #20
   2c884:	mov	r8, r1
   2c888:	str	r0, [sp, #16]
   2c88c:	bl	11200 <strlen@plt>
   2c890:	cmp	r0, #4096	; 0x1000
   2c894:	mov	r5, r0
   2c898:	str	r0, [sp, #12]
   2c89c:	lslcc	r5, r0, #4
   2c8a0:	add	r4, r5, #1
   2c8a4:	mov	r0, r4
   2c8a8:	bl	2b334 <__assert_fail@plt+0x1a014>
   2c8ac:	cmp	r0, #0
   2c8b0:	beq	2c960 <__assert_fail@plt+0x1b640>
   2c8b4:	mov	r7, r0
   2c8b8:	mov	r0, #0
   2c8bc:	mov	r1, #0
   2c8c0:	mov	r2, #0
   2c8c4:	mov	r3, #0
   2c8c8:	str	r0, [sp]
   2c8cc:	mov	r0, r8
   2c8d0:	bl	11080 <iconv@plt>
   2c8d4:	stmib	sp, {r5, r7}
   2c8d8:	add	r5, sp, #4
   2c8dc:	add	r1, sp, #16
   2c8e0:	add	r2, sp, #12
   2c8e4:	add	r3, sp, #8
   2c8e8:	mov	r0, r8
   2c8ec:	str	r5, [sp]
   2c8f0:	bl	11080 <iconv@plt>
   2c8f4:	cmn	r0, #1
   2c8f8:	beq	2c970 <__assert_fail@plt+0x1b650>
   2c8fc:	mov	r6, r7
   2c900:	add	r3, sp, #8
   2c904:	mov	r0, r8
   2c908:	mov	r1, #0
   2c90c:	mov	r2, #0
   2c910:	str	r5, [sp]
   2c914:	bl	11080 <iconv@plt>
   2c918:	cmn	r0, #1
   2c91c:	beq	2c9f0 <__assert_fail@plt+0x1b6d0>
   2c920:	mov	r5, r6
   2c924:	ldr	r0, [sp, #8]
   2c928:	add	r1, r0, #1
   2c92c:	str	r1, [sp, #8]
   2c930:	mov	r1, #0
   2c934:	strb	r1, [r0]
   2c938:	ldr	r0, [sp, #8]
   2c93c:	sub	r1, r0, r5
   2c940:	cmp	r1, r4
   2c944:	bcs	2ca74 <__assert_fail@plt+0x1b754>
   2c948:	mov	r0, r5
   2c94c:	bl	2b364 <__assert_fail@plt+0x1a044>
   2c950:	cmp	r0, #0
   2c954:	moveq	r0, r5
   2c958:	sub	sp, fp, #28
   2c95c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2c960:	bl	11218 <__errno_location@plt>
   2c964:	mov	r1, #12
   2c968:	str	r1, [r0]
   2c96c:	b	2caa0 <__assert_fail@plt+0x1b780>
   2c970:	bl	11218 <__errno_location@plt>
   2c974:	mov	r9, r0
   2c978:	ldr	r0, [r9]
   2c97c:	cmp	r0, #7
   2c980:	bne	2caac <__assert_fail@plt+0x1b78c>
   2c984:	cmp	r4, r4, lsl #1
   2c988:	bcs	2ca80 <__assert_fail@plt+0x1b760>
   2c98c:	ldr	sl, [sp, #8]
   2c990:	lsl	r4, r4, #1
   2c994:	mov	r0, r7
   2c998:	mov	r1, r4
   2c99c:	bl	2b364 <__assert_fail@plt+0x1a044>
   2c9a0:	cmp	r0, #0
   2c9a4:	beq	2ca80 <__assert_fail@plt+0x1b760>
   2c9a8:	mov	r6, r0
   2c9ac:	sub	r0, sl, r7
   2c9b0:	add	r5, sp, #4
   2c9b4:	add	r2, sp, #12
   2c9b8:	add	r3, sp, #8
   2c9bc:	add	r1, r6, r0
   2c9c0:	mvn	r0, r0
   2c9c4:	str	r5, [sp]
   2c9c8:	add	r0, r4, r0
   2c9cc:	str	r1, [sp, #8]
   2c9d0:	add	r1, sp, #16
   2c9d4:	str	r0, [sp, #4]
   2c9d8:	mov	r0, r8
   2c9dc:	bl	11080 <iconv@plt>
   2c9e0:	cmn	r0, #1
   2c9e4:	mov	r7, r6
   2c9e8:	beq	2c978 <__assert_fail@plt+0x1b658>
   2c9ec:	b	2c900 <__assert_fail@plt+0x1b5e0>
   2c9f0:	bl	11218 <__errno_location@plt>
   2c9f4:	mov	r7, r0
   2c9f8:	add	r9, sp, #8
   2c9fc:	ldr	r0, [r7]
   2ca00:	cmp	r0, #7
   2ca04:	bne	2ca94 <__assert_fail@plt+0x1b774>
   2ca08:	cmp	r4, r4, lsl #1
   2ca0c:	bcs	2ca8c <__assert_fail@plt+0x1b76c>
   2ca10:	ldr	sl, [sp, #8]
   2ca14:	lsl	r4, r4, #1
   2ca18:	mov	r0, r6
   2ca1c:	mov	r1, r4
   2ca20:	bl	2b364 <__assert_fail@plt+0x1a044>
   2ca24:	cmp	r0, #0
   2ca28:	beq	2ca8c <__assert_fail@plt+0x1b76c>
   2ca2c:	mov	r5, r0
   2ca30:	sub	r0, sl, r6
   2ca34:	mov	r2, #0
   2ca38:	mov	r3, r9
   2ca3c:	add	r1, r5, r0
   2ca40:	mvn	r0, r0
   2ca44:	add	r0, r4, r0
   2ca48:	str	r1, [sp, #8]
   2ca4c:	mov	r1, #0
   2ca50:	str	r0, [sp, #4]
   2ca54:	add	r0, sp, #4
   2ca58:	str	r0, [sp]
   2ca5c:	mov	r0, r8
   2ca60:	bl	11080 <iconv@plt>
   2ca64:	cmn	r0, #1
   2ca68:	mov	r6, r5
   2ca6c:	beq	2c9fc <__assert_fail@plt+0x1b6dc>
   2ca70:	b	2c924 <__assert_fail@plt+0x1b604>
   2ca74:	mov	r0, r5
   2ca78:	sub	sp, fp, #28
   2ca7c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2ca80:	mov	r0, #12
   2ca84:	str	r0, [r9]
   2ca88:	b	2ca98 <__assert_fail@plt+0x1b778>
   2ca8c:	mov	r0, #12
   2ca90:	str	r0, [r7]
   2ca94:	mov	r7, r6
   2ca98:	mov	r0, r7
   2ca9c:	bl	184a0 <__assert_fail@plt+0x7180>
   2caa0:	mov	r0, #0
   2caa4:	sub	sp, fp, #28
   2caa8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2caac:	cmp	r0, #22
   2cab0:	beq	2c8fc <__assert_fail@plt+0x1b5dc>
   2cab4:	b	2ca98 <__assert_fail@plt+0x1b778>
   2cab8:	push	{r4, r5, r6, r7, fp, lr}
   2cabc:	add	fp, sp, #16
   2cac0:	mov	r5, r0
   2cac4:	ldrb	r0, [r0]
   2cac8:	cmp	r0, #0
   2cacc:	beq	2cb38 <__assert_fail@plt+0x1b818>
   2cad0:	mov	r4, r1
   2cad4:	mov	r0, r1
   2cad8:	mov	r1, r2
   2cadc:	mov	r6, r2
   2cae0:	bl	2b3b8 <__assert_fail@plt+0x1a098>
   2cae4:	cmp	r0, #0
   2cae8:	beq	2cb38 <__assert_fail@plt+0x1b818>
   2caec:	mov	r0, r6
   2caf0:	mov	r1, r4
   2caf4:	bl	11194 <iconv_open@plt>
   2caf8:	mov	r4, #0
   2cafc:	cmn	r0, #1
   2cb00:	beq	2cb4c <__assert_fail@plt+0x1b82c>
   2cb04:	mov	r6, r0
   2cb08:	mov	r0, r5
   2cb0c:	mov	r1, r6
   2cb10:	bl	2c878 <__assert_fail@plt+0x1b558>
   2cb14:	cmp	r0, #0
   2cb18:	beq	2cb6c <__assert_fail@plt+0x1b84c>
   2cb1c:	mov	r5, r0
   2cb20:	mov	r0, r6
   2cb24:	bl	11074 <iconv_close@plt>
   2cb28:	cmn	r0, #1
   2cb2c:	ble	2cb8c <__assert_fail@plt+0x1b86c>
   2cb30:	mov	r0, r5
   2cb34:	pop	{r4, r5, r6, r7, fp, pc}
   2cb38:	mov	r0, r5
   2cb3c:	bl	110f8 <strdup@plt>
   2cb40:	mov	r4, r0
   2cb44:	cmp	r0, #0
   2cb48:	beq	2cb54 <__assert_fail@plt+0x1b834>
   2cb4c:	mov	r0, r4
   2cb50:	pop	{r4, r5, r6, r7, fp, pc}
   2cb54:	bl	11218 <__errno_location@plt>
   2cb58:	mov	r1, #12
   2cb5c:	mov	r4, #0
   2cb60:	str	r1, [r0]
   2cb64:	mov	r0, r4
   2cb68:	pop	{r4, r5, r6, r7, fp, pc}
   2cb6c:	bl	11218 <__errno_location@plt>
   2cb70:	ldr	r7, [r0]
   2cb74:	mov	r5, r0
   2cb78:	mov	r0, r6
   2cb7c:	bl	11074 <iconv_close@plt>
   2cb80:	mov	r0, r4
   2cb84:	str	r7, [r5]
   2cb88:	pop	{r4, r5, r6, r7, fp, pc}
   2cb8c:	mov	r0, r5
   2cb90:	bl	184a0 <__assert_fail@plt+0x7180>
   2cb94:	mov	r0, r4
   2cb98:	pop	{r4, r5, r6, r7, fp, pc}
   2cb9c:	push	{r4, r5, fp, lr}
   2cba0:	add	fp, sp, #8
   2cba4:	mov	r4, r1
   2cba8:	mov	r1, #0
   2cbac:	mov	r5, r0
   2cbb0:	mov	r2, r4
   2cbb4:	bl	11284 <memchr@plt>
   2cbb8:	sub	r1, r0, r5
   2cbbc:	cmp	r0, #0
   2cbc0:	addne	r4, r1, #1
   2cbc4:	mov	r0, r4
   2cbc8:	pop	{r4, r5, fp, pc}
   2cbcc:	push	{r4, sl, fp, lr}
   2cbd0:	add	fp, sp, #8
   2cbd4:	sub	sp, sp, #264	; 0x108
   2cbd8:	add	r1, sp, #7
   2cbdc:	movw	r2, #257	; 0x101
   2cbe0:	bl	2ce38 <__assert_fail@plt+0x1bb18>
   2cbe4:	mov	r4, #0
   2cbe8:	cmp	r0, #0
   2cbec:	bne	2cc2c <__assert_fail@plt+0x1b90c>
   2cbf0:	movw	r1, #8040	; 0x1f68
   2cbf4:	add	r0, sp, #7
   2cbf8:	mov	r2, #2
   2cbfc:	movt	r1, #3
   2cc00:	bl	111f4 <bcmp@plt>
   2cc04:	cmp	r0, #0
   2cc08:	beq	2cc2c <__assert_fail@plt+0x1b90c>
   2cc0c:	movw	r1, #8042	; 0x1f6a
   2cc10:	add	r0, sp, #7
   2cc14:	mov	r2, #6
   2cc18:	movt	r1, #3
   2cc1c:	bl	111f4 <bcmp@plt>
   2cc20:	cmp	r0, #0
   2cc24:	mov	r4, r0
   2cc28:	movwne	r4, #1
   2cc2c:	mov	r0, r4
   2cc30:	sub	sp, fp, #8
   2cc34:	pop	{r4, sl, fp, pc}
   2cc38:	push	{r4, sl, fp, lr}
   2cc3c:	add	fp, sp, #8
   2cc40:	mov	r4, #0
   2cc44:	adds	r0, r0, #16
   2cc48:	adc	r1, r4, #0
   2cc4c:	rsb	r2, r1, #0
   2cc50:	eors	r2, r2, r1
   2cc54:	movwne	r2, #1
   2cc58:	cmp	r0, #0
   2cc5c:	bmi	2cc7c <__assert_fail@plt+0x1b95c>
   2cc60:	cmp	r2, #0
   2cc64:	asreq	r2, r0, #31
   2cc68:	eoreq	r3, r0, r0
   2cc6c:	andeq	r2, r2, #1
   2cc70:	eoreq	r1, r1, r2
   2cc74:	orrseq	r1, r3, r1
   2cc78:	beq	2cc84 <__assert_fail@plt+0x1b964>
   2cc7c:	mov	r0, r4
   2cc80:	pop	{r4, sl, fp, pc}
   2cc84:	bl	11188 <malloc@plt>
   2cc88:	cmp	r0, #0
   2cc8c:	addne	r4, r0, #8
   2cc90:	movne	r1, #8
   2cc94:	bfine	r4, r1, #0, #4
   2cc98:	subne	r0, r4, r0
   2cc9c:	strbne	r0, [r4, #-1]
   2cca0:	mov	r0, r4
   2cca4:	pop	{r4, sl, fp, pc}
   2cca8:	push	{fp, lr}
   2ccac:	mov	fp, sp
   2ccb0:	tst	r0, #7
   2ccb4:	bne	2ccd0 <__assert_fail@plt+0x1b9b0>
   2ccb8:	tst	r0, #8
   2ccbc:	popeq	{fp, pc}
   2ccc0:	ldrb	r1, [r0, #-1]
   2ccc4:	sub	r0, r0, r1
   2ccc8:	pop	{fp, lr}
   2cccc:	b	184a0 <__assert_fail@plt+0x7180>
   2ccd0:	bl	11314 <abort@plt>
   2ccd4:	push	{r4, sl, fp, lr}
   2ccd8:	add	fp, sp, #8
   2ccdc:	mov	r4, r0
   2cce0:	bl	110a4 <wcwidth@plt>
   2cce4:	cmn	r0, #1
   2cce8:	popgt	{r4, sl, fp, pc}
   2ccec:	mov	r0, r4
   2ccf0:	bl	1111c <iswcntrl@plt>
   2ccf4:	clz	r0, r0
   2ccf8:	lsr	r0, r0, #5
   2ccfc:	pop	{r4, sl, fp, pc}
   2cd00:	push	{r4, r5, r6, sl, fp, lr}
   2cd04:	add	fp, sp, #16
   2cd08:	mov	r4, r0
   2cd0c:	mov	r0, r1
   2cd10:	mov	r5, r1
   2cd14:	ldr	r1, [r0], #16
   2cd18:	cmp	r1, r0
   2cd1c:	beq	2cd28 <__assert_fail@plt+0x1ba08>
   2cd20:	mov	r6, r1
   2cd24:	b	2cd38 <__assert_fail@plt+0x1ba18>
   2cd28:	ldr	r2, [r5, #4]
   2cd2c:	add	r6, r4, #16
   2cd30:	mov	r0, r6
   2cd34:	bl	110d4 <memcpy@plt>
   2cd38:	str	r6, [r4]
   2cd3c:	ldr	r0, [r5, #4]
   2cd40:	str	r0, [r4, #4]
   2cd44:	ldrb	r0, [r5, #8]
   2cd48:	strb	r0, [r4, #8]
   2cd4c:	cmp	r0, #0
   2cd50:	ldrne	r0, [r5, #12]
   2cd54:	strne	r0, [r4, #12]
   2cd58:	pop	{r4, r5, r6, sl, fp, pc}
   2cd5c:	movw	r2, #8048	; 0x1f70
   2cd60:	ubfx	r1, r0, #5, #3
   2cd64:	and	r0, r0, #31
   2cd68:	movt	r2, #3
   2cd6c:	ldr	r1, [r2, r1, lsl #2]
   2cd70:	mov	r2, #1
   2cd74:	and	r0, r1, r2, lsl r0
   2cd78:	cmp	r0, #0
   2cd7c:	movwne	r0, #1
   2cd80:	bx	lr
   2cd84:	push	{r4, r5, r6, sl, fp, lr}
   2cd88:	add	fp, sp, #16
   2cd8c:	sub	sp, sp, #56	; 0x38
   2cd90:	mov	r5, r0
   2cd94:	bl	11158 <__ctype_get_mb_cur_max@plt>
   2cd98:	cmp	r0, #2
   2cd9c:	bcc	2ce28 <__assert_fail@plt+0x1bb08>
   2cda0:	mov	r4, #0
   2cda4:	mov	r0, sp
   2cda8:	str	r4, [sp, #8]
   2cdac:	str	r4, [sp, #4]
   2cdb0:	strb	r4, [sp, #12]
   2cdb4:	strb	r4, [sp]
   2cdb8:	str	r5, [sp, #16]
   2cdbc:	bl	2c390 <__assert_fail@plt+0x1b070>
   2cdc0:	ldrb	r0, [sp, #24]
   2cdc4:	cmp	r0, #0
   2cdc8:	beq	2cdd8 <__assert_fail@plt+0x1bab8>
   2cdcc:	ldr	r0, [sp, #28]
   2cdd0:	cmp	r0, #0
   2cdd4:	beq	2ce1c <__assert_fail@plt+0x1bafc>
   2cdd8:	mov	r6, #0
   2cddc:	mov	r5, sp
   2cde0:	mov	r4, #0
   2cde4:	strb	r6, [sp, #12]
   2cde8:	ldr	r0, [sp, #16]
   2cdec:	ldr	r1, [sp, #20]
   2cdf0:	add	r0, r0, r1
   2cdf4:	str	r0, [sp, #16]
   2cdf8:	mov	r0, r5
   2cdfc:	bl	2c390 <__assert_fail@plt+0x1b070>
   2ce00:	ldrb	r1, [sp, #24]
   2ce04:	ldr	r0, [sp, #28]
   2ce08:	add	r4, r4, #1
   2ce0c:	cmp	r1, #0
   2ce10:	beq	2cde4 <__assert_fail@plt+0x1bac4>
   2ce14:	cmp	r0, #0
   2ce18:	bne	2cde4 <__assert_fail@plt+0x1bac4>
   2ce1c:	mov	r0, r4
   2ce20:	sub	sp, fp, #16
   2ce24:	pop	{r4, r5, r6, sl, fp, pc}
   2ce28:	mov	r0, r5
   2ce2c:	sub	sp, fp, #16
   2ce30:	pop	{r4, r5, r6, sl, fp, lr}
   2ce34:	b	11200 <strlen@plt>
   2ce38:	push	{r4, r5, r6, r7, fp, lr}
   2ce3c:	add	fp, sp, #16
   2ce40:	mov	r4, r1
   2ce44:	mov	r1, #0
   2ce48:	mov	r6, r2
   2ce4c:	bl	112cc <setlocale@plt>
   2ce50:	cmp	r0, #0
   2ce54:	beq	2ce84 <__assert_fail@plt+0x1bb64>
   2ce58:	mov	r7, r0
   2ce5c:	bl	11200 <strlen@plt>
   2ce60:	cmp	r0, r6
   2ce64:	bcs	2cea0 <__assert_fail@plt+0x1bb80>
   2ce68:	add	r2, r0, #1
   2ce6c:	mov	r0, r4
   2ce70:	mov	r1, r7
   2ce74:	bl	110d4 <memcpy@plt>
   2ce78:	mov	r5, #0
   2ce7c:	mov	r0, r5
   2ce80:	pop	{r4, r5, r6, r7, fp, pc}
   2ce84:	mov	r5, #22
   2ce88:	cmp	r6, #0
   2ce8c:	beq	2cec8 <__assert_fail@plt+0x1bba8>
   2ce90:	mov	r0, #0
   2ce94:	strb	r0, [r4]
   2ce98:	mov	r0, r5
   2ce9c:	pop	{r4, r5, r6, r7, fp, pc}
   2cea0:	mov	r5, #34	; 0x22
   2cea4:	cmp	r6, #0
   2cea8:	beq	2cec8 <__assert_fail@plt+0x1bba8>
   2ceac:	sub	r6, r6, #1
   2ceb0:	mov	r0, r4
   2ceb4:	mov	r1, r7
   2ceb8:	mov	r2, r6
   2cebc:	bl	110d4 <memcpy@plt>
   2cec0:	mov	r0, #0
   2cec4:	strb	r0, [r4, r6]
   2cec8:	mov	r0, r5
   2cecc:	pop	{r4, r5, r6, r7, fp, pc}
   2ced0:	mov	r1, #0
   2ced4:	b	112cc <setlocale@plt>
   2ced8:	cmp	r3, #0
   2cedc:	cmpeq	r2, #0
   2cee0:	bne	2cef8 <__assert_fail@plt+0x1bbd8>
   2cee4:	cmp	r1, #0
   2cee8:	cmpeq	r0, #0
   2ceec:	mvnne	r1, #0
   2cef0:	mvnne	r0, #0
   2cef4:	b	2cf14 <__assert_fail@plt+0x1bbf4>
   2cef8:	sub	sp, sp, #8
   2cefc:	push	{sp, lr}
   2cf00:	bl	2cf24 <__assert_fail@plt+0x1bc04>
   2cf04:	ldr	lr, [sp, #4]
   2cf08:	add	sp, sp, #8
   2cf0c:	pop	{r2, r3}
   2cf10:	bx	lr
   2cf14:	push	{r1, lr}
   2cf18:	mov	r0, #8
   2cf1c:	bl	11068 <raise@plt>
   2cf20:	pop	{r1, pc}
   2cf24:	cmp	r1, r3
   2cf28:	cmpeq	r0, r2
   2cf2c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2cf30:	mov	r4, r0
   2cf34:	movcc	r0, #0
   2cf38:	mov	r5, r1
   2cf3c:	ldr	lr, [sp, #36]	; 0x24
   2cf40:	movcc	r1, r0
   2cf44:	bcc	2d040 <__assert_fail@plt+0x1bd20>
   2cf48:	cmp	r3, #0
   2cf4c:	clzeq	ip, r2
   2cf50:	clzne	ip, r3
   2cf54:	addeq	ip, ip, #32
   2cf58:	cmp	r5, #0
   2cf5c:	clzeq	r1, r4
   2cf60:	addeq	r1, r1, #32
   2cf64:	clzne	r1, r5
   2cf68:	sub	ip, ip, r1
   2cf6c:	sub	sl, ip, #32
   2cf70:	lsl	r9, r3, ip
   2cf74:	rsb	fp, ip, #32
   2cf78:	orr	r9, r9, r2, lsl sl
   2cf7c:	orr	r9, r9, r2, lsr fp
   2cf80:	lsl	r8, r2, ip
   2cf84:	cmp	r5, r9
   2cf88:	cmpeq	r4, r8
   2cf8c:	movcc	r0, #0
   2cf90:	movcc	r1, r0
   2cf94:	bcc	2cfb0 <__assert_fail@plt+0x1bc90>
   2cf98:	mov	r0, #1
   2cf9c:	subs	r4, r4, r8
   2cfa0:	lsl	r1, r0, sl
   2cfa4:	orr	r1, r1, r0, lsr fp
   2cfa8:	lsl	r0, r0, ip
   2cfac:	sbc	r5, r5, r9
   2cfb0:	cmp	ip, #0
   2cfb4:	beq	2d040 <__assert_fail@plt+0x1bd20>
   2cfb8:	lsr	r6, r8, #1
   2cfbc:	orr	r6, r6, r9, lsl #31
   2cfc0:	lsr	r7, r9, #1
   2cfc4:	mov	r2, ip
   2cfc8:	b	2cfec <__assert_fail@plt+0x1bccc>
   2cfcc:	subs	r3, r4, r6
   2cfd0:	sbc	r8, r5, r7
   2cfd4:	adds	r3, r3, r3
   2cfd8:	adc	r8, r8, r8
   2cfdc:	adds	r4, r3, #1
   2cfe0:	adc	r5, r8, #0
   2cfe4:	subs	r2, r2, #1
   2cfe8:	beq	2d008 <__assert_fail@plt+0x1bce8>
   2cfec:	cmp	r5, r7
   2cff0:	cmpeq	r4, r6
   2cff4:	bcs	2cfcc <__assert_fail@plt+0x1bcac>
   2cff8:	adds	r4, r4, r4
   2cffc:	adc	r5, r5, r5
   2d000:	subs	r2, r2, #1
   2d004:	bne	2cfec <__assert_fail@plt+0x1bccc>
   2d008:	lsr	r3, r4, ip
   2d00c:	orr	r3, r3, r5, lsl fp
   2d010:	lsr	r2, r5, ip
   2d014:	orr	r3, r3, r5, lsr sl
   2d018:	adds	r0, r0, r4
   2d01c:	mov	r4, r3
   2d020:	lsl	r3, r2, ip
   2d024:	orr	r3, r3, r4, lsl sl
   2d028:	lsl	ip, r4, ip
   2d02c:	orr	r3, r3, r4, lsr fp
   2d030:	adc	r1, r1, r5
   2d034:	subs	r0, r0, ip
   2d038:	mov	r5, r2
   2d03c:	sbc	r1, r1, r3
   2d040:	cmp	lr, #0
   2d044:	strdne	r4, [lr]
   2d048:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2d04c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   2d050:	mov	r7, r0
   2d054:	ldr	r6, [pc, #72]	; 2d0a4 <__assert_fail@plt+0x1bd84>
   2d058:	ldr	r5, [pc, #72]	; 2d0a8 <__assert_fail@plt+0x1bd88>
   2d05c:	add	r6, pc, r6
   2d060:	add	r5, pc, r5
   2d064:	sub	r6, r6, r5
   2d068:	mov	r8, r1
   2d06c:	mov	r9, r2
   2d070:	bl	11030 <calloc@plt-0x20>
   2d074:	asrs	r6, r6, #2
   2d078:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   2d07c:	mov	r4, #0
   2d080:	add	r4, r4, #1
   2d084:	ldr	r3, [r5], #4
   2d088:	mov	r2, r9
   2d08c:	mov	r1, r8
   2d090:	mov	r0, r7
   2d094:	blx	r3
   2d098:	cmp	r6, r4
   2d09c:	bne	2d080 <__assert_fail@plt+0x1bd60>
   2d0a0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   2d0a4:	andeq	r5, r1, r8, lsr #29
   2d0a8:	andeq	r5, r1, r0, lsr #29
   2d0ac:	bx	lr
   2d0b0:	ldr	r3, [pc, #12]	; 2d0c4 <__assert_fail@plt+0x1bda4>
   2d0b4:	mov	r1, #0
   2d0b8:	add	r3, pc, r3
   2d0bc:	ldr	r2, [r3]
   2d0c0:	b	1123c <__cxa_atexit@plt>
   2d0c4:	andeq	r6, r1, ip, asr #32

Disassembly of section .fini:

0002d0c8 <.fini>:
   2d0c8:	push	{r3, lr}
   2d0cc:	pop	{r3, pc}
