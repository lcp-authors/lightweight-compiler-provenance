
../repos/coreutils/src/pr:     file format elf32-littlearm


Disassembly of section .init:

00011058 <.init>:
   11058:	push	{r3, lr}
   1105c:	bl	1142c <__assert_fail@plt+0x48>
   11060:	pop	{r3, pc}

Disassembly of section .plt:

00011064 <fdopen@plt-0x14>:
   11064:	push	{lr}		; (str lr, [sp, #-4]!)
   11068:	ldr	lr, [pc, #4]	; 11074 <fdopen@plt-0x4>
   1106c:	add	lr, pc, lr
   11070:	ldr	pc, [lr, #8]!
   11074:	andeq	r2, r2, ip, lsl #31

00011078 <fdopen@plt>:
   11078:	add	ip, pc, #0, 12
   1107c:	add	ip, ip, #139264	; 0x22000
   11080:	ldr	pc, [ip, #3980]!	; 0xf8c

00011084 <calloc@plt>:
   11084:	add	ip, pc, #0, 12
   11088:	add	ip, ip, #139264	; 0x22000
   1108c:	ldr	pc, [ip, #3972]!	; 0xf84

00011090 <fputs_unlocked@plt>:
   11090:	add	ip, pc, #0, 12
   11094:	add	ip, ip, #139264	; 0x22000
   11098:	ldr	pc, [ip, #3964]!	; 0xf7c

0001109c <raise@plt>:
   1109c:	add	ip, pc, #0, 12
   110a0:	add	ip, ip, #139264	; 0x22000
   110a4:	ldr	pc, [ip, #3956]!	; 0xf74

000110a8 <gmtime_r@plt>:
   110a8:	add	ip, pc, #0, 12
   110ac:	add	ip, ip, #139264	; 0x22000
   110b0:	ldr	pc, [ip, #3948]!	; 0xf6c

000110b4 <strcmp@plt>:
   110b4:	add	ip, pc, #0, 12
   110b8:	add	ip, ip, #139264	; 0x22000
   110bc:	ldr	pc, [ip, #3940]!	; 0xf64

000110c0 <strtol@plt>:
   110c0:	add	ip, pc, #0, 12
   110c4:	add	ip, ip, #139264	; 0x22000
   110c8:	ldr	pc, [ip, #3932]!	; 0xf5c

000110cc <posix_fadvise64@plt>:
   110cc:	add	ip, pc, #0, 12
   110d0:	add	ip, ip, #139264	; 0x22000
   110d4:	ldr	pc, [ip, #3924]!	; 0xf54

000110d8 <printf@plt>:
   110d8:	add	ip, pc, #0, 12
   110dc:	add	ip, ip, #139264	; 0x22000
   110e0:	ldr	pc, [ip, #3916]!	; 0xf4c

000110e4 <mktime@plt>:
   110e4:	add	ip, pc, #0, 12
   110e8:	add	ip, ip, #139264	; 0x22000
   110ec:	ldr	pc, [ip, #3908]!	; 0xf44

000110f0 <fflush@plt>:
   110f0:	add	ip, pc, #0, 12
   110f4:	add	ip, ip, #139264	; 0x22000
   110f8:	ldr	pc, [ip, #3900]!	; 0xf3c

000110fc <wcwidth@plt>:
   110fc:	add	ip, pc, #0, 12
   11100:	add	ip, ip, #139264	; 0x22000
   11104:	ldr	pc, [ip, #3892]!	; 0xf34

00011108 <free@plt>:
   11108:	add	ip, pc, #0, 12
   1110c:	add	ip, ip, #139264	; 0x22000
   11110:	ldr	pc, [ip, #3884]!	; 0xf2c

00011114 <clock_gettime@plt>:
   11114:	add	ip, pc, #0, 12
   11118:	add	ip, ip, #139264	; 0x22000
   1111c:	ldr	pc, [ip, #3876]!	; 0xf24

00011120 <_exit@plt>:
   11120:	add	ip, pc, #0, 12
   11124:	add	ip, ip, #139264	; 0x22000
   11128:	ldr	pc, [ip, #3868]!	; 0xf1c

0001112c <memcpy@plt>:
   1112c:	add	ip, pc, #0, 12
   11130:	add	ip, ip, #139264	; 0x22000
   11134:	ldr	pc, [ip, #3860]!	; 0xf14

00011138 <tolower@plt>:
   11138:	add	ip, pc, #0, 12
   1113c:	add	ip, ip, #139264	; 0x22000
   11140:	ldr	pc, [ip, #3852]!	; 0xf0c

00011144 <mbsinit@plt>:
   11144:	add	ip, pc, #0, 12
   11148:	add	ip, ip, #139264	; 0x22000
   1114c:	ldr	pc, [ip, #3844]!	; 0xf04

00011150 <memcmp@plt>:
   11150:	add	ip, pc, #0, 12
   11154:	add	ip, ip, #139264	; 0x22000
   11158:	ldr	pc, [ip, #3836]!	; 0xefc

0001115c <fputc_unlocked@plt>:
   1115c:	add	ip, pc, #0, 12
   11160:	add	ip, ip, #139264	; 0x22000
   11164:	ldr	pc, [ip, #3828]!	; 0xef4

00011168 <getc_unlocked@plt>:
   11168:	add	ip, pc, #0, 12
   1116c:	add	ip, ip, #139264	; 0x22000
   11170:	ldr	pc, [ip, #3820]!	; 0xeec

00011174 <realloc@plt>:
   11174:	add	ip, pc, #0, 12
   11178:	add	ip, ip, #139264	; 0x22000
   1117c:	ldr	pc, [ip, #3812]!	; 0xee4

00011180 <localtime_r@plt>:
   11180:	add	ip, pc, #0, 12
   11184:	add	ip, ip, #139264	; 0x22000
   11188:	ldr	pc, [ip, #3804]!	; 0xedc

0001118c <textdomain@plt>:
   1118c:	add	ip, pc, #0, 12
   11190:	add	ip, ip, #139264	; 0x22000
   11194:	ldr	pc, [ip, #3796]!	; 0xed4

00011198 <iswcntrl@plt>:
   11198:	add	ip, pc, #0, 12
   1119c:	add	ip, ip, #139264	; 0x22000
   111a0:	ldr	pc, [ip, #3788]!	; 0xecc

000111a4 <iswprint@plt>:
   111a4:	add	ip, pc, #0, 12
   111a8:	add	ip, ip, #139264	; 0x22000
   111ac:	ldr	pc, [ip, #3780]!	; 0xec4

000111b0 <tzset@plt>:
   111b0:	add	ip, pc, #0, 12
   111b4:	add	ip, ip, #139264	; 0x22000
   111b8:	ldr	pc, [ip, #3772]!	; 0xebc

000111bc <__fxstat64@plt>:
   111bc:	add	ip, pc, #0, 12
   111c0:	add	ip, ip, #139264	; 0x22000
   111c4:	ldr	pc, [ip, #3764]!	; 0xeb4

000111c8 <fwrite@plt>:
   111c8:	add	ip, pc, #0, 12
   111cc:	add	ip, ip, #139264	; 0x22000
   111d0:	ldr	pc, [ip, #3756]!	; 0xeac

000111d4 <lseek64@plt>:
   111d4:	add	ip, pc, #0, 12
   111d8:	add	ip, ip, #139264	; 0x22000
   111dc:	ldr	pc, [ip, #3748]!	; 0xea4

000111e0 <__ctype_get_mb_cur_max@plt>:
   111e0:	add	ip, pc, #0, 12
   111e4:	add	ip, ip, #139264	; 0x22000
   111e8:	ldr	pc, [ip, #3740]!	; 0xe9c

000111ec <__fpending@plt>:
   111ec:	add	ip, pc, #0, 12
   111f0:	add	ip, ip, #139264	; 0x22000
   111f4:	ldr	pc, [ip, #3732]!	; 0xe94

000111f8 <ferror_unlocked@plt>:
   111f8:	add	ip, pc, #0, 12
   111fc:	add	ip, ip, #139264	; 0x22000
   11200:	ldr	pc, [ip, #3724]!	; 0xe8c

00011204 <mbrtowc@plt>:
   11204:	add	ip, pc, #0, 12
   11208:	add	ip, ip, #139264	; 0x22000
   1120c:	ldr	pc, [ip, #3716]!	; 0xe84

00011210 <error@plt>:
   11210:	add	ip, pc, #0, 12
   11214:	add	ip, ip, #139264	; 0x22000
   11218:	ldr	pc, [ip, #3708]!	; 0xe7c

0001121c <getenv@plt>:
   1121c:	add	ip, pc, #0, 12
   11220:	add	ip, ip, #139264	; 0x22000
   11224:	ldr	pc, [ip, #3700]!	; 0xe74

00011228 <malloc@plt>:
   11228:	add	ip, pc, #0, 12
   1122c:	add	ip, ip, #139264	; 0x22000
   11230:	ldr	pc, [ip, #3692]!	; 0xe6c

00011234 <__libc_start_main@plt>:
   11234:	add	ip, pc, #0, 12
   11238:	add	ip, ip, #139264	; 0x22000
   1123c:	ldr	pc, [ip, #3684]!	; 0xe64

00011240 <strftime@plt>:
   11240:	add	ip, pc, #0, 12
   11244:	add	ip, ip, #139264	; 0x22000
   11248:	ldr	pc, [ip, #3676]!	; 0xe5c

0001124c <__freading@plt>:
   1124c:	add	ip, pc, #0, 12
   11250:	add	ip, ip, #139264	; 0x22000
   11254:	ldr	pc, [ip, #3668]!	; 0xe54

00011258 <__gmon_start__@plt>:
   11258:	add	ip, pc, #0, 12
   1125c:	add	ip, ip, #139264	; 0x22000
   11260:	ldr	pc, [ip, #3660]!	; 0xe4c

00011264 <getopt_long@plt>:
   11264:	add	ip, pc, #0, 12
   11268:	add	ip, ip, #139264	; 0x22000
   1126c:	ldr	pc, [ip, #3652]!	; 0xe44

00011270 <__ctype_b_loc@plt>:
   11270:	add	ip, pc, #0, 12
   11274:	add	ip, ip, #139264	; 0x22000
   11278:	ldr	pc, [ip, #3644]!	; 0xe3c

0001127c <exit@plt>:
   1127c:	add	ip, pc, #0, 12
   11280:	add	ip, ip, #139264	; 0x22000
   11284:	ldr	pc, [ip, #3636]!	; 0xe34

00011288 <gettext@plt>:
   11288:	add	ip, pc, #0, 12
   1128c:	add	ip, ip, #139264	; 0x22000
   11290:	ldr	pc, [ip, #3628]!	; 0xe2c

00011294 <strlen@plt>:
   11294:	add	ip, pc, #0, 12
   11298:	add	ip, ip, #139264	; 0x22000
   1129c:	ldr	pc, [ip, #3620]!	; 0xe24

000112a0 <strchr@plt>:
   112a0:	add	ip, pc, #0, 12
   112a4:	add	ip, ip, #139264	; 0x22000
   112a8:	ldr	pc, [ip, #3612]!	; 0xe1c

000112ac <setenv@plt>:
   112ac:	add	ip, pc, #0, 12
   112b0:	add	ip, ip, #139264	; 0x22000
   112b4:	ldr	pc, [ip, #3604]!	; 0xe14

000112b8 <fprintf@plt>:
   112b8:	add	ip, pc, #0, 12
   112bc:	add	ip, ip, #139264	; 0x22000
   112c0:	ldr	pc, [ip, #3596]!	; 0xe0c

000112c4 <ungetc@plt>:
   112c4:	add	ip, pc, #0, 12
   112c8:	add	ip, ip, #139264	; 0x22000
   112cc:	ldr	pc, [ip, #3588]!	; 0xe04

000112d0 <__errno_location@plt>:
   112d0:	add	ip, pc, #0, 12
   112d4:	add	ip, ip, #139264	; 0x22000
   112d8:	ldr	pc, [ip, #3580]!	; 0xdfc

000112dc <__cxa_atexit@plt>:
   112dc:	add	ip, pc, #0, 12
   112e0:	add	ip, ip, #139264	; 0x22000
   112e4:	ldr	pc, [ip, #3572]!	; 0xdf4

000112e8 <memset@plt>:
   112e8:	add	ip, pc, #0, 12
   112ec:	add	ip, ip, #139264	; 0x22000
   112f0:	ldr	pc, [ip, #3564]!	; 0xdec

000112f4 <fileno@plt>:
   112f4:	add	ip, pc, #0, 12
   112f8:	add	ip, ip, #139264	; 0x22000
   112fc:	ldr	pc, [ip, #3556]!	; 0xde4

00011300 <strtoumax@plt>:
   11300:	add	ip, pc, #0, 12
   11304:	add	ip, ip, #139264	; 0x22000
   11308:	ldr	pc, [ip, #3548]!	; 0xddc

0001130c <strtoimax@plt>:
   1130c:	add	ip, pc, #0, 12
   11310:	add	ip, ip, #139264	; 0x22000
   11314:	ldr	pc, [ip, #3540]!	; 0xdd4

00011318 <fclose@plt>:
   11318:	add	ip, pc, #0, 12
   1131c:	add	ip, ip, #139264	; 0x22000
   11320:	ldr	pc, [ip, #3532]!	; 0xdcc

00011324 <fseeko64@plt>:
   11324:	add	ip, pc, #0, 12
   11328:	add	ip, ip, #139264	; 0x22000
   1132c:	ldr	pc, [ip, #3524]!	; 0xdc4

00011330 <fcntl64@plt>:
   11330:	add	ip, pc, #0, 12
   11334:	add	ip, ip, #139264	; 0x22000
   11338:	ldr	pc, [ip, #3516]!	; 0xdbc

0001133c <setlocale@plt>:
   1133c:	add	ip, pc, #0, 12
   11340:	add	ip, ip, #139264	; 0x22000
   11344:	ldr	pc, [ip, #3508]!	; 0xdb4

00011348 <toupper@plt>:
   11348:	add	ip, pc, #0, 12
   1134c:	add	ip, ip, #139264	; 0x22000
   11350:	ldr	pc, [ip, #3500]!	; 0xdac

00011354 <strrchr@plt>:
   11354:	add	ip, pc, #0, 12
   11358:	add	ip, ip, #139264	; 0x22000
   1135c:	ldr	pc, [ip, #3492]!	; 0xda4

00011360 <nl_langinfo@plt>:
   11360:	add	ip, pc, #0, 12
   11364:	add	ip, ip, #139264	; 0x22000
   11368:	ldr	pc, [ip, #3484]!	; 0xd9c

0001136c <sprintf@plt>:
   1136c:	add	ip, pc, #0, 12
   11370:	add	ip, ip, #139264	; 0x22000
   11374:	ldr	pc, [ip, #3476]!	; 0xd94

00011378 <timegm@plt>:
   11378:	add	ip, pc, #0, 12
   1137c:	add	ip, ip, #139264	; 0x22000
   11380:	ldr	pc, [ip, #3468]!	; 0xd8c

00011384 <clearerr_unlocked@plt>:
   11384:	add	ip, pc, #0, 12
   11388:	add	ip, ip, #139264	; 0x22000
   1138c:	ldr	pc, [ip, #3460]!	; 0xd84

00011390 <fopen64@plt>:
   11390:	add	ip, pc, #0, 12
   11394:	add	ip, ip, #139264	; 0x22000
   11398:	ldr	pc, [ip, #3452]!	; 0xd7c

0001139c <bindtextdomain@plt>:
   1139c:	add	ip, pc, #0, 12
   113a0:	add	ip, ip, #139264	; 0x22000
   113a4:	ldr	pc, [ip, #3444]!	; 0xd74

000113a8 <unsetenv@plt>:
   113a8:	add	ip, pc, #0, 12
   113ac:	add	ip, ip, #139264	; 0x22000
   113b0:	ldr	pc, [ip, #3436]!	; 0xd6c

000113b4 <strncmp@plt>:
   113b4:	add	ip, pc, #0, 12
   113b8:	add	ip, ip, #139264	; 0x22000
   113bc:	ldr	pc, [ip, #3428]!	; 0xd64

000113c0 <abort@plt>:
   113c0:	add	ip, pc, #0, 12
   113c4:	add	ip, ip, #139264	; 0x22000
   113c8:	ldr	pc, [ip, #3420]!	; 0xd5c

000113cc <close@plt>:
   113cc:	add	ip, pc, #0, 12
   113d0:	add	ip, ip, #139264	; 0x22000
   113d4:	ldr	pc, [ip, #3412]!	; 0xd54

000113d8 <putchar_unlocked@plt>:
   113d8:	add	ip, pc, #0, 12
   113dc:	add	ip, ip, #139264	; 0x22000
   113e0:	ldr	pc, [ip, #3404]!	; 0xd4c

000113e4 <__assert_fail@plt>:
   113e4:	add	ip, pc, #0, 12
   113e8:	add	ip, ip, #139264	; 0x22000
   113ec:	ldr	pc, [ip, #3396]!	; 0xd44

Disassembly of section .text:

000113f0 <.text>:
   113f0:	mov	fp, #0
   113f4:	mov	lr, #0
   113f8:	pop	{r1}		; (ldr r1, [sp], #4)
   113fc:	mov	r2, sp
   11400:	push	{r2}		; (str r2, [sp, #-4]!)
   11404:	push	{r0}		; (str r0, [sp, #-4]!)
   11408:	ldr	ip, [pc, #16]	; 11420 <__assert_fail@plt+0x3c>
   1140c:	push	{ip}		; (str ip, [sp, #-4]!)
   11410:	ldr	r0, [pc, #12]	; 11424 <__assert_fail@plt+0x40>
   11414:	ldr	r3, [pc, #12]	; 11428 <__assert_fail@plt+0x44>
   11418:	bl	11234 <__libc_start_main@plt>
   1141c:	bl	113c0 <abort@plt>
   11420:	andeq	r1, r2, r4, lsl #26
   11424:			; <UNDEFINED> instruction: 0x00011ab8
   11428:	andeq	r1, r2, r4, lsr #25
   1142c:	ldr	r3, [pc, #20]	; 11448 <__assert_fail@plt+0x64>
   11430:	ldr	r2, [pc, #20]	; 1144c <__assert_fail@plt+0x68>
   11434:	add	r3, pc, r3
   11438:	ldr	r2, [r3, r2]
   1143c:	cmp	r2, #0
   11440:	bxeq	lr
   11444:	b	11258 <__gmon_start__@plt>
   11448:	andeq	r2, r2, r4, asr #23
   1144c:	andeq	r0, r0, r4, lsr r1
   11450:	ldr	r3, [pc, #28]	; 11474 <__assert_fail@plt+0x90>
   11454:	ldr	r0, [pc, #28]	; 11478 <__assert_fail@plt+0x94>
   11458:	sub	r3, r3, r0
   1145c:	cmp	r3, #6
   11460:	bxls	lr
   11464:	ldr	r3, [pc, #16]	; 1147c <__assert_fail@plt+0x98>
   11468:	cmp	r3, #0
   1146c:	bxeq	lr
   11470:	bx	r3
   11474:	ldrdeq	r4, [r3], -r3
   11478:	ldrdeq	r4, [r3], -r0
   1147c:	andeq	r0, r0, r0
   11480:	ldr	r1, [pc, #36]	; 114ac <__assert_fail@plt+0xc8>
   11484:	ldr	r0, [pc, #36]	; 114b0 <__assert_fail@plt+0xcc>
   11488:	sub	r1, r1, r0
   1148c:	asr	r1, r1, #2
   11490:	add	r1, r1, r1, lsr #31
   11494:	asrs	r1, r1, #1
   11498:	bxeq	lr
   1149c:	ldr	r3, [pc, #16]	; 114b4 <__assert_fail@plt+0xd0>
   114a0:	cmp	r3, #0
   114a4:	bxeq	lr
   114a8:	bx	r3
   114ac:	ldrdeq	r4, [r3], -r0
   114b0:	ldrdeq	r4, [r3], -r0
   114b4:	andeq	r0, r0, r0
   114b8:	push	{r4, lr}
   114bc:	ldr	r4, [pc, #24]	; 114dc <__assert_fail@plt+0xf8>
   114c0:	ldrb	r3, [r4]
   114c4:	cmp	r3, #0
   114c8:	popne	{r4, pc}
   114cc:	bl	11450 <__assert_fail@plt+0x6c>
   114d0:	mov	r3, #1
   114d4:	strb	r3, [r4]
   114d8:	pop	{r4, pc}
   114dc:	strdeq	r4, [r3], -r4	; <UNPREDICTABLE>
   114e0:	ldr	r0, [pc, #40]	; 11510 <__assert_fail@plt+0x12c>
   114e4:	ldr	r3, [r0]
   114e8:	cmp	r3, #0
   114ec:	bne	114f4 <__assert_fail@plt+0x110>
   114f0:	b	11480 <__assert_fail@plt+0x9c>
   114f4:	ldr	r3, [pc, #24]	; 11514 <__assert_fail@plt+0x130>
   114f8:	cmp	r3, #0
   114fc:	beq	114f0 <__assert_fail@plt+0x10c>
   11500:	push	{r4, lr}
   11504:	blx	r3
   11508:	pop	{r4, lr}
   1150c:	b	11480 <__assert_fail@plt+0x9c>
   11510:	andeq	r3, r3, r4, lsl pc
   11514:	andeq	r0, r0, r0
   11518:	push	{fp}		; (str fp, [sp, #-4]!)
   1151c:	add	fp, sp, #0
   11520:	sub	sp, sp, #12
   11524:	mov	r3, r0
   11528:	strb	r3, [fp, #-5]
   1152c:	ldrb	r3, [fp, #-5]
   11530:	mov	r0, r3
   11534:	add	sp, fp, #0
   11538:	pop	{fp}		; (ldr fp, [sp], #4)
   1153c:	bx	lr
   11540:	push	{fp, lr}
   11544:	add	fp, sp, #4
   11548:	ldr	r0, [pc, #32]	; 11570 <__assert_fail@plt+0x18c>
   1154c:	bl	11288 <gettext@plt>
   11550:	mov	r2, r0
   11554:	ldr	r3, [pc, #24]	; 11574 <__assert_fail@plt+0x190>
   11558:	ldr	r3, [r3]
   1155c:	mov	r1, r3
   11560:	mov	r0, r2
   11564:	bl	11090 <fputs_unlocked@plt>
   11568:	nop			; (mov r0, r0)
   1156c:	pop	{fp, pc}
   11570:	andeq	r1, r2, ip, lsr sp
   11574:	andeq	r4, r3, ip, ror #3
   11578:	push	{fp, lr}
   1157c:	add	fp, sp, #4
   11580:	ldr	r0, [pc, #32]	; 115a8 <__assert_fail@plt+0x1c4>
   11584:	bl	11288 <gettext@plt>
   11588:	mov	r2, r0
   1158c:	ldr	r3, [pc, #24]	; 115ac <__assert_fail@plt+0x1c8>
   11590:	ldr	r3, [r3]
   11594:	mov	r1, r3
   11598:	mov	r0, r2
   1159c:	bl	11090 <fputs_unlocked@plt>
   115a0:	nop			; (mov r0, r0)
   115a4:	pop	{fp, pc}
   115a8:	andeq	r1, r2, r4, ror sp
   115ac:	andeq	r4, r3, ip, ror #3
   115b0:	push	{fp, lr}
   115b4:	add	fp, sp, #4
   115b8:	sub	sp, sp, #80	; 0x50
   115bc:	str	r0, [fp, #-80]	; 0xffffffb0
   115c0:	ldr	r3, [pc, #348]	; 11724 <__assert_fail@plt+0x340>
   115c4:	sub	ip, fp, #72	; 0x48
   115c8:	mov	lr, r3
   115cc:	ldm	lr!, {r0, r1, r2, r3}
   115d0:	stmia	ip!, {r0, r1, r2, r3}
   115d4:	ldm	lr!, {r0, r1, r2, r3}
   115d8:	stmia	ip!, {r0, r1, r2, r3}
   115dc:	ldm	lr!, {r0, r1, r2, r3}
   115e0:	stmia	ip!, {r0, r1, r2, r3}
   115e4:	ldm	lr, {r0, r1}
   115e8:	stm	ip, {r0, r1}
   115ec:	ldr	r3, [fp, #-80]	; 0xffffffb0
   115f0:	str	r3, [fp, #-8]
   115f4:	sub	r3, fp, #72	; 0x48
   115f8:	str	r3, [fp, #-12]
   115fc:	b	1160c <__assert_fail@plt+0x228>
   11600:	ldr	r3, [fp, #-12]
   11604:	add	r3, r3, #8
   11608:	str	r3, [fp, #-12]
   1160c:	ldr	r3, [fp, #-12]
   11610:	ldr	r3, [r3]
   11614:	cmp	r3, #0
   11618:	beq	1163c <__assert_fail@plt+0x258>
   1161c:	ldr	r3, [fp, #-12]
   11620:	ldr	r3, [r3]
   11624:	mov	r1, r3
   11628:	ldr	r0, [fp, #-80]	; 0xffffffb0
   1162c:	bl	110b4 <strcmp@plt>
   11630:	mov	r3, r0
   11634:	cmp	r3, #0
   11638:	bne	11600 <__assert_fail@plt+0x21c>
   1163c:	ldr	r3, [fp, #-12]
   11640:	ldr	r3, [r3, #4]
   11644:	cmp	r3, #0
   11648:	beq	11658 <__assert_fail@plt+0x274>
   1164c:	ldr	r3, [fp, #-12]
   11650:	ldr	r3, [r3, #4]
   11654:	str	r3, [fp, #-8]
   11658:	ldr	r0, [pc, #200]	; 11728 <__assert_fail@plt+0x344>
   1165c:	bl	11288 <gettext@plt>
   11660:	mov	r3, r0
   11664:	ldr	r2, [pc, #192]	; 1172c <__assert_fail@plt+0x348>
   11668:	ldr	r1, [pc, #192]	; 11730 <__assert_fail@plt+0x34c>
   1166c:	mov	r0, r3
   11670:	bl	110d8 <printf@plt>
   11674:	mov	r1, #0
   11678:	mov	r0, #5
   1167c:	bl	1133c <setlocale@plt>
   11680:	str	r0, [fp, #-16]
   11684:	ldr	r3, [fp, #-16]
   11688:	cmp	r3, #0
   1168c:	beq	116cc <__assert_fail@plt+0x2e8>
   11690:	mov	r2, #3
   11694:	ldr	r1, [pc, #152]	; 11734 <__assert_fail@plt+0x350>
   11698:	ldr	r0, [fp, #-16]
   1169c:	bl	113b4 <strncmp@plt>
   116a0:	mov	r3, r0
   116a4:	cmp	r3, #0
   116a8:	beq	116cc <__assert_fail@plt+0x2e8>
   116ac:	ldr	r0, [pc, #132]	; 11738 <__assert_fail@plt+0x354>
   116b0:	bl	11288 <gettext@plt>
   116b4:	mov	r2, r0
   116b8:	ldr	r3, [pc, #124]	; 1173c <__assert_fail@plt+0x358>
   116bc:	ldr	r3, [r3]
   116c0:	mov	r1, r3
   116c4:	mov	r0, r2
   116c8:	bl	11090 <fputs_unlocked@plt>
   116cc:	ldr	r0, [pc, #108]	; 11740 <__assert_fail@plt+0x35c>
   116d0:	bl	11288 <gettext@plt>
   116d4:	mov	r3, r0
   116d8:	ldr	r2, [fp, #-80]	; 0xffffffb0
   116dc:	ldr	r1, [pc, #72]	; 1172c <__assert_fail@plt+0x348>
   116e0:	mov	r0, r3
   116e4:	bl	110d8 <printf@plt>
   116e8:	ldr	r0, [pc, #84]	; 11744 <__assert_fail@plt+0x360>
   116ec:	bl	11288 <gettext@plt>
   116f0:	ldr	r2, [fp, #-8]
   116f4:	ldr	r3, [fp, #-80]	; 0xffffffb0
   116f8:	cmp	r2, r3
   116fc:	bne	11708 <__assert_fail@plt+0x324>
   11700:	ldr	r3, [pc, #64]	; 11748 <__assert_fail@plt+0x364>
   11704:	b	1170c <__assert_fail@plt+0x328>
   11708:	ldr	r3, [pc, #60]	; 1174c <__assert_fail@plt+0x368>
   1170c:	mov	r2, r3
   11710:	ldr	r1, [fp, #-8]
   11714:	bl	110d8 <printf@plt>
   11718:	nop			; (mov r0, r0)
   1171c:	sub	sp, fp, #4
   11720:	pop	{fp, pc}
   11724:	andeq	r1, r2, r4, lsr pc
   11728:	andeq	r1, r2, r0, asr #27
   1172c:	ldrdeq	r1, [r2], -r8
   11730:	andeq	r1, r2, r0, lsl #28
   11734:	andeq	r1, r2, r0, lsl lr
   11738:	andeq	r1, r2, r4, lsl lr
   1173c:	andeq	r4, r3, ip, ror #3
   11740:	andeq	r1, r2, ip, asr lr
   11744:	andeq	r1, r2, r8, ror lr
   11748:	andeq	r1, r2, ip, lsr #29
   1174c:			; <UNDEFINED> instruction: 0x00021eb8
   11750:	push	{fp, lr}
   11754:	add	fp, sp, #4
   11758:	sub	sp, sp, #8
   1175c:	str	r0, [fp, #-8]
   11760:	str	r1, [fp, #-12]
   11764:	ldr	r3, [fp, #-8]
   11768:	mov	r0, r3
   1176c:	asr	r1, r0, #31
   11770:	ldr	r2, [fp, #-12]
   11774:	bl	173a0 <__assert_fail@plt+0x5fbc>
   11778:	mov	r3, r0
   1177c:	mov	r0, r3
   11780:	sub	sp, fp, #4
   11784:	pop	{fp, pc}
   11788:	push	{fp, lr}
   1178c:	add	fp, sp, #4
   11790:	ldr	r0, [pc, #20]	; 117ac <__assert_fail@plt+0x3c8>
   11794:	bl	11288 <gettext@plt>
   11798:	mov	r3, r0
   1179c:	mov	r2, r3
   117a0:	mov	r1, #0
   117a4:	mov	r0, #1
   117a8:	bl	11210 <error@plt>
   117ac:	muleq	r2, r8, r2
   117b0:	push	{fp}		; (str fp, [sp, #-4]!)
   117b4:	add	fp, sp, #0
   117b8:	sub	sp, sp, #20
   117bc:	mov	r3, #0
   117c0:	str	r3, [fp, #-16]
   117c4:	ldr	r3, [pc, #176]	; 1187c <__assert_fail@plt+0x498>
   117c8:	ldr	r3, [r3]
   117cc:	str	r3, [fp, #-8]
   117d0:	mov	r3, #0
   117d4:	str	r3, [fp, #-12]
   117d8:	b	11850 <__assert_fail@plt+0x46c>
   117dc:	ldr	r3, [fp, #-8]
   117e0:	ldr	r3, [r3, #8]
   117e4:	cmp	r3, #0
   117e8:	beq	1182c <__assert_fail@plt+0x448>
   117ec:	ldr	r3, [fp, #-8]
   117f0:	ldr	r3, [r3, #8]
   117f4:	cmp	r3, #1
   117f8:	beq	1182c <__assert_fail@plt+0x448>
   117fc:	ldr	r3, [pc, #124]	; 11880 <__assert_fail@plt+0x49c>
   11800:	ldrb	r3, [r3]
   11804:	cmp	r3, #0
   11808:	beq	11838 <__assert_fail@plt+0x454>
   1180c:	ldr	r3, [fp, #-8]
   11810:	ldr	r3, [r3, #24]
   11814:	cmp	r3, #0
   11818:	ble	11838 <__assert_fail@plt+0x454>
   1181c:	ldr	r3, [fp, #-8]
   11820:	ldr	r3, [r3, #28]
   11824:	cmp	r3, #0
   11828:	ble	11838 <__assert_fail@plt+0x454>
   1182c:	ldr	r3, [fp, #-16]
   11830:	add	r3, r3, #1
   11834:	str	r3, [fp, #-16]
   11838:	ldr	r3, [fp, #-8]
   1183c:	add	r3, r3, #40	; 0x28
   11840:	str	r3, [fp, #-8]
   11844:	ldr	r3, [fp, #-12]
   11848:	add	r3, r3, #1
   1184c:	str	r3, [fp, #-12]
   11850:	ldr	r3, [pc, #44]	; 11884 <__assert_fail@plt+0x4a0>
   11854:	ldr	r3, [r3]
   11858:	mov	r2, r3
   1185c:	ldr	r3, [fp, #-12]
   11860:	cmp	r3, r2
   11864:	bcc	117dc <__assert_fail@plt+0x3f8>
   11868:	ldr	r3, [fp, #-16]
   1186c:	mov	r0, r3
   11870:	add	sp, fp, #0
   11874:	pop	{fp}		; (ldr fp, [sp], #4)
   11878:	bx	lr
   1187c:	strdeq	r4, [r3], -r8
   11880:	andeq	r4, r3, r1, asr #2
   11884:	andeq	r4, r3, ip, asr r1
   11888:	push	{fp, lr}
   1188c:	add	fp, sp, #4
   11890:	sub	sp, sp, #56	; 0x38
   11894:	str	r0, [fp, #-40]	; 0xffffffd8
   11898:	mov	r3, r1
   1189c:	str	r2, [fp, #-48]	; 0xffffffd0
   118a0:	strb	r3, [fp, #-41]	; 0xffffffd7
   118a4:	mvn	r2, #0
   118a8:	mvn	r3, #0
   118ac:	strd	r2, [fp, #-36]	; 0xffffffdc
   118b0:	sub	r2, fp, #28
   118b4:	sub	r1, fp, #16
   118b8:	ldr	r3, [pc, #320]	; 11a00 <__assert_fail@plt+0x61c>
   118bc:	str	r3, [sp]
   118c0:	mov	r3, r2
   118c4:	mov	r2, #10
   118c8:	ldr	r0, [fp, #-48]	; 0xffffffd0
   118cc:	bl	200bc <__assert_fail@plt+0xecd8>
   118d0:	str	r0, [fp, #-8]
   118d4:	ldr	r3, [fp, #-8]
   118d8:	cmp	r3, #0
   118dc:	beq	11908 <__assert_fail@plt+0x524>
   118e0:	ldr	r3, [fp, #-8]
   118e4:	cmp	r3, #2
   118e8:	beq	11908 <__assert_fail@plt+0x524>
   118ec:	ldrb	r2, [fp, #-41]	; 0xffffffd7
   118f0:	ldr	r3, [fp, #-48]	; 0xffffffd0
   118f4:	str	r3, [sp]
   118f8:	ldr	r3, [pc, #260]	; 11a04 <__assert_fail@plt+0x620>
   118fc:	ldr	r1, [fp, #-40]	; 0xffffffd8
   11900:	ldr	r0, [fp, #-8]
   11904:	bl	1fea4 <__assert_fail@plt+0xeac0>
   11908:	ldr	r2, [fp, #-16]
   1190c:	ldr	r3, [fp, #-48]	; 0xffffffd0
   11910:	cmp	r2, r3
   11914:	beq	11924 <__assert_fail@plt+0x540>
   11918:	ldrd	r2, [fp, #-28]	; 0xffffffe4
   1191c:	orrs	r3, r2, r3
   11920:	bne	1192c <__assert_fail@plt+0x548>
   11924:	mov	r3, #0
   11928:	b	119f4 <__assert_fail@plt+0x610>
   1192c:	ldr	r3, [fp, #-16]
   11930:	ldrb	r3, [r3]
   11934:	cmp	r3, #58	; 0x3a
   11938:	bne	119c0 <__assert_fail@plt+0x5dc>
   1193c:	ldr	r3, [fp, #-16]
   11940:	add	r3, r3, #1
   11944:	str	r3, [fp, #-12]
   11948:	sub	r2, fp, #36	; 0x24
   1194c:	sub	r1, fp, #16
   11950:	ldr	r3, [pc, #168]	; 11a00 <__assert_fail@plt+0x61c>
   11954:	str	r3, [sp]
   11958:	mov	r3, r2
   1195c:	mov	r2, #10
   11960:	ldr	r0, [fp, #-12]
   11964:	bl	200bc <__assert_fail@plt+0xecd8>
   11968:	str	r0, [fp, #-8]
   1196c:	ldr	r3, [fp, #-8]
   11970:	cmp	r3, #0
   11974:	beq	11994 <__assert_fail@plt+0x5b0>
   11978:	ldrb	r2, [fp, #-41]	; 0xffffffd7
   1197c:	ldr	r3, [fp, #-48]	; 0xffffffd0
   11980:	str	r3, [sp]
   11984:	ldr	r3, [pc, #120]	; 11a04 <__assert_fail@plt+0x620>
   11988:	ldr	r1, [fp, #-40]	; 0xffffffd8
   1198c:	ldr	r0, [fp, #-8]
   11990:	bl	1fea4 <__assert_fail@plt+0xeac0>
   11994:	ldr	r3, [fp, #-16]
   11998:	ldr	r2, [fp, #-12]
   1199c:	cmp	r2, r3
   119a0:	beq	119b8 <__assert_fail@plt+0x5d4>
   119a4:	ldrd	r0, [fp, #-36]	; 0xffffffdc
   119a8:	ldrd	r2, [fp, #-28]	; 0xffffffe4
   119ac:	cmp	r1, r3
   119b0:	cmpeq	r0, r2
   119b4:	bcs	119c0 <__assert_fail@plt+0x5dc>
   119b8:	mov	r3, #0
   119bc:	b	119f4 <__assert_fail@plt+0x610>
   119c0:	ldr	r3, [fp, #-16]
   119c4:	ldrb	r3, [r3]
   119c8:	cmp	r3, #0
   119cc:	beq	119d8 <__assert_fail@plt+0x5f4>
   119d0:	mov	r3, #0
   119d4:	b	119f4 <__assert_fail@plt+0x610>
   119d8:	ldrd	r2, [fp, #-28]	; 0xffffffe4
   119dc:	ldr	r1, [pc, #36]	; 11a08 <__assert_fail@plt+0x624>
   119e0:	strd	r2, [r1]
   119e4:	ldrd	r2, [fp, #-36]	; 0xffffffdc
   119e8:	ldr	r1, [pc, #28]	; 11a0c <__assert_fail@plt+0x628>
   119ec:	strd	r2, [r1]
   119f0:	mov	r3, #1
   119f4:	mov	r0, r3
   119f8:	sub	sp, fp, #4
   119fc:	pop	{fp, pc}
   11a00:			; <UNDEFINED> instruction: 0x00021eb8
   11a04:	andeq	r2, r2, r8, ror #1
   11a08:	andeq	r4, r3, r0, asr #4
   11a0c:	andeq	r4, r3, r0, ror #2
   11a10:	push	{fp, lr}
   11a14:	add	fp, sp, #4
   11a18:	sub	sp, sp, #8
   11a1c:	str	r0, [fp, #-8]
   11a20:	ldr	r0, [pc, #44]	; 11a54 <__assert_fail@plt+0x670>
   11a24:	bl	11288 <gettext@plt>
   11a28:	mov	r3, r0
   11a2c:	ldr	r2, [pc, #36]	; 11a58 <__assert_fail@plt+0x674>
   11a30:	mov	r1, #1
   11a34:	ldr	r0, [fp, #-8]
   11a38:	bl	129dc <__assert_fail@plt+0x15f8>
   11a3c:	ldr	r3, [pc, #24]	; 11a5c <__assert_fail@plt+0x678>
   11a40:	mov	r2, #1
   11a44:	strb	r2, [r3]
   11a48:	nop			; (mov r0, r0)
   11a4c:	sub	sp, fp, #4
   11a50:	pop	{fp, pc}
   11a54:	andeq	r2, r2, ip, lsr #5
   11a58:	andeq	r4, r3, ip, asr r1
   11a5c:	andeq	r4, r3, r4, lsl r2
   11a60:	push	{fp, lr}
   11a64:	add	fp, sp, #4
   11a68:	sub	sp, sp, #16
   11a6c:	str	r0, [fp, #-16]
   11a70:	ldr	r0, [fp, #-16]
   11a74:	bl	11294 <strlen@plt>
   11a78:	str	r0, [fp, #-8]
   11a7c:	ldr	r3, [fp, #-8]
   11a80:	cmp	r3, #0
   11a84:	bge	11a8c <__assert_fail@plt+0x6a8>
   11a88:	bl	11788 <__assert_fail@plt+0x3a4>
   11a8c:	ldr	r3, [fp, #-8]
   11a90:	ldr	r2, [pc, #24]	; 11ab0 <__assert_fail@plt+0x6cc>
   11a94:	str	r3, [r2]
   11a98:	ldr	r2, [pc, #20]	; 11ab4 <__assert_fail@plt+0x6d0>
   11a9c:	ldr	r3, [fp, #-16]
   11aa0:	str	r3, [r2]
   11aa4:	nop			; (mov r0, r0)
   11aa8:	sub	sp, fp, #4
   11aac:	pop	{fp, pc}
   11ab0:	andeq	r4, r3, r4, ror r2
   11ab4:	andeq	r4, r3, ip, ror r1
   11ab8:	push	{r4, fp, lr}
   11abc:	add	fp, sp, #8
   11ac0:	sub	sp, sp, #68	; 0x44
   11ac4:	str	r0, [fp, #-56]	; 0xffffffc8
   11ac8:	str	r1, [fp, #-60]	; 0xffffffc4
   11acc:	mov	r3, #0
   11ad0:	strb	r3, [fp, #-17]	; 0xffffffef
   11ad4:	mov	r3, #0
   11ad8:	strb	r3, [fp, #-18]	; 0xffffffee
   11adc:	mov	r3, #0
   11ae0:	strb	r3, [fp, #-19]	; 0xffffffed
   11ae4:	mov	r3, #0
   11ae8:	str	r3, [fp, #-24]	; 0xffffffe8
   11aec:	mov	r3, #0
   11af0:	str	r3, [fp, #-28]	; 0xffffffe4
   11af4:	mov	r3, #0
   11af8:	str	r3, [fp, #-44]	; 0xffffffd4
   11afc:	ldr	r3, [fp, #-60]	; 0xffffffc4
   11b00:	ldr	r3, [r3]
   11b04:	mov	r0, r3
   11b08:	bl	1a454 <__assert_fail@plt+0x9070>
   11b0c:	ldr	r1, [pc, #3520]	; 128d4 <__assert_fail@plt+0x14f0>
   11b10:	mov	r0, #6
   11b14:	bl	1133c <setlocale@plt>
   11b18:	ldr	r1, [pc, #3512]	; 128d8 <__assert_fail@plt+0x14f4>
   11b1c:	ldr	r0, [pc, #3512]	; 128dc <__assert_fail@plt+0x14f8>
   11b20:	bl	1139c <bindtextdomain@plt>
   11b24:	ldr	r0, [pc, #3504]	; 128dc <__assert_fail@plt+0x14f8>
   11b28:	bl	1118c <textdomain@plt>
   11b2c:	ldr	r0, [pc, #3500]	; 128e0 <__assert_fail@plt+0x14fc>
   11b30:	bl	21d08 <__assert_fail@plt+0x10924>
   11b34:	mov	r3, #0
   11b38:	str	r3, [fp, #-16]
   11b3c:	ldr	r3, [fp, #-56]	; 0xffffffc8
   11b40:	cmp	r3, #1
   11b44:	ble	11b64 <__assert_fail@plt+0x780>
   11b48:	ldr	r3, [fp, #-56]	; 0xffffffc8
   11b4c:	sub	r3, r3, #1
   11b50:	mov	r1, #4
   11b54:	mov	r0, r3
   11b58:	bl	1e0e4 <__assert_fail@plt+0xcd00>
   11b5c:	mov	r3, r0
   11b60:	b	11b68 <__assert_fail@plt+0x784>
   11b64:	mov	r3, #0
   11b68:	str	r3, [fp, #-36]	; 0xffffffdc
   11b6c:	mvn	r3, #0
   11b70:	str	r3, [fp, #-48]	; 0xffffffd0
   11b74:	sub	r3, fp, #48	; 0x30
   11b78:	str	r3, [sp]
   11b7c:	ldr	r3, [pc, #3424]	; 128e4 <__assert_fail@plt+0x1500>
   11b80:	ldr	r2, [pc, #3424]	; 128e8 <__assert_fail@plt+0x1504>
   11b84:	ldr	r1, [fp, #-60]	; 0xffffffc4
   11b88:	ldr	r0, [fp, #-56]	; 0xffffffc8
   11b8c:	bl	11264 <getopt_long@plt>
   11b90:	str	r0, [fp, #-40]	; 0xffffffd8
   11b94:	ldr	r3, [fp, #-40]	; 0xffffffd8
   11b98:	cmn	r3, #1
   11b9c:	bne	11bb0 <__assert_fail@plt+0x7cc>
   11ba0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   11ba4:	cmp	r3, #0
   11ba8:	bne	12568 <__assert_fail@plt+0x1184>
   11bac:	b	12578 <__assert_fail@plt+0x1194>
   11bb0:	ldr	r3, [fp, #-40]	; 0xffffffd8
   11bb4:	sub	r3, r3, #48	; 0x30
   11bb8:	cmp	r3, #9
   11bbc:	bhi	11c20 <__assert_fail@plt+0x83c>
   11bc0:	ldr	r3, [fp, #-28]	; 0xffffffe4
   11bc4:	add	r2, r3, #1
   11bc8:	ldr	r3, [fp, #-44]	; 0xffffffd4
   11bcc:	cmp	r2, r3
   11bd0:	bcc	11be8 <__assert_fail@plt+0x804>
   11bd4:	sub	r3, fp, #44	; 0x2c
   11bd8:	mov	r1, r3
   11bdc:	ldr	r0, [fp, #-24]	; 0xffffffe8
   11be0:	bl	1e14c <__assert_fail@plt+0xcd68>
   11be4:	str	r0, [fp, #-24]	; 0xffffffe8
   11be8:	ldr	r3, [fp, #-28]	; 0xffffffe4
   11bec:	add	r2, r3, #1
   11bf0:	str	r2, [fp, #-28]	; 0xffffffe4
   11bf4:	ldr	r2, [fp, #-24]	; 0xffffffe8
   11bf8:	add	r3, r2, r3
   11bfc:	ldr	r2, [fp, #-40]	; 0xffffffd8
   11c00:	uxtb	r2, r2
   11c04:	strb	r2, [r3]
   11c08:	ldr	r2, [fp, #-24]	; 0xffffffe8
   11c0c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   11c10:	add	r3, r2, r3
   11c14:	mov	r2, #0
   11c18:	strb	r2, [r3]
   11c1c:	b	11b6c <__assert_fail@plt+0x788>
   11c20:	mov	r3, #0
   11c24:	str	r3, [fp, #-28]	; 0xffffffe4
   11c28:	ldr	r3, [fp, #-40]	; 0xffffffd8
   11c2c:	add	r3, r3, #3
   11c30:	cmp	r3, #260	; 0x104
   11c34:	ldrls	pc, [pc, r3, lsl #2]
   11c38:	b	12530 <__assert_fail@plt+0x114c>
   11c3c:	strdeq	r2, [r1], -r0
   11c40:	andeq	r2, r1, r8, ror #9
   11c44:	andeq	r2, r1, r0, lsr r5
   11c48:	andeq	r2, r1, r0, lsr r5
   11c4c:	andeq	r2, r1, r0, asr r0
   11c50:	andeq	r2, r1, r0, lsr r5
   11c54:	andeq	r2, r1, r0, lsr r5
   11c58:	andeq	r2, r1, r0, lsr r5
   11c5c:	andeq	r2, r1, r0, lsr r5
   11c60:	andeq	r2, r1, r0, lsr r5
   11c64:	andeq	r2, r1, r0, lsr r5
   11c68:	andeq	r2, r1, r0, lsr r5
   11c6c:	andeq	r2, r1, r0, lsr r5
   11c70:	andeq	r2, r1, r0, lsr r5
   11c74:	andeq	r2, r1, r0, lsr r5
   11c78:	andeq	r2, r1, r0, lsr r5
   11c7c:	andeq	r2, r1, r0, lsr r5
   11c80:	andeq	r2, r1, r0, lsr r5
   11c84:	andeq	r2, r1, r0, lsr r5
   11c88:	andeq	r2, r1, r0, lsr r5
   11c8c:	andeq	r2, r1, r0, lsr r5
   11c90:	andeq	r2, r1, r0, lsr r5
   11c94:	andeq	r2, r1, r0, lsr r5
   11c98:	andeq	r2, r1, r0, lsr r5
   11c9c:	andeq	r2, r1, r0, lsr r5
   11ca0:	andeq	r2, r1, r0, lsr r5
   11ca4:	andeq	r2, r1, r0, lsr r5
   11ca8:	andeq	r2, r1, r0, lsr r5
   11cac:	andeq	r2, r1, r0, lsr r5
   11cb0:	andeq	r2, r1, r0, lsr r5
   11cb4:	andeq	r2, r1, r0, lsr r5
   11cb8:	andeq	r2, r1, r0, lsr r5
   11cbc:	andeq	r2, r1, r0, lsr r5
   11cc0:	andeq	r2, r1, r0, lsr r5
   11cc4:	andeq	r2, r1, r0, lsr r5
   11cc8:	andeq	r2, r1, r0, lsr r5
   11ccc:	andeq	r2, r1, r0, lsr r5
   11cd0:	andeq	r2, r1, r0, lsr r5
   11cd4:	andeq	r2, r1, r0, lsr r5
   11cd8:	andeq	r2, r1, r0, lsr r5
   11cdc:	andeq	r2, r1, r0, lsr r5
   11ce0:	andeq	r2, r1, r0, lsr r5
   11ce4:	andeq	r2, r1, r0, lsr r5
   11ce8:	andeq	r2, r1, r0, lsr r5
   11cec:	andeq	r2, r1, r0, lsr r5
   11cf0:	andeq	r2, r1, r0, lsr r5
   11cf4:	andeq	r2, r1, r0, lsr r5
   11cf8:	andeq	r2, r1, r0, lsr r5
   11cfc:	andeq	r2, r1, r0, lsr r5
   11d00:	andeq	r2, r1, r0, lsr r5
   11d04:	andeq	r2, r1, r0, lsr r5
   11d08:	andeq	r2, r1, r0, lsr r5
   11d0c:	andeq	r2, r1, r0, lsr r5
   11d10:	andeq	r2, r1, r0, lsr r5
   11d14:	andeq	r2, r1, r0, lsr r5
   11d18:	andeq	r2, r1, r0, lsr r5
   11d1c:	andeq	r2, r1, r0, lsr r5
   11d20:	andeq	r2, r1, r0, lsr r5
   11d24:	andeq	r2, r1, r0, lsr r5
   11d28:	andeq	r2, r1, r0, lsr r5
   11d2c:	andeq	r2, r1, r0, lsr r5
   11d30:	andeq	r2, r1, r0, lsr r5
   11d34:	andeq	r2, r1, r0, lsr r5
   11d38:	andeq	r2, r1, r0, lsr r5
   11d3c:	andeq	r2, r1, r0, lsr r5
   11d40:	andeq	r2, r1, r0, lsr r5
   11d44:	andeq	r2, r1, r0, lsr r5
   11d48:	andeq	r2, r1, r0, lsr r5
   11d4c:	andeq	r2, r1, r0, lsr r5
   11d50:	andeq	r2, r1, r0, lsr r5
   11d54:	andeq	r2, r1, r0, lsr r5
   11d58:	andeq	r2, r1, ip, asr #3
   11d5c:	andeq	r2, r1, r0, lsr r5
   11d60:	andeq	r2, r1, r8, lsl r2
   11d64:	andeq	r2, r1, r0, lsr r5
   11d68:	andeq	r2, r1, r0, lsr r5
   11d6c:	andeq	r2, r1, r0, lsr r5
   11d70:	andeq	r2, r1, r4, ror r2
   11d74:	andeq	r2, r1, r0, lsr r5
   11d78:	andeq	r2, r1, r0, lsr r5
   11d7c:	andeq	r2, r1, r0, lsr r5
   11d80:	andeq	r2, r1, r0, lsl #6
   11d84:	andeq	r2, r1, r0, lsr r5
   11d88:	andeq	r2, r1, r0, lsr r5
   11d8c:	andeq	r2, r1, r0, lsr r5
   11d90:	andeq	r2, r1, r0, lsr r5
   11d94:			; <UNDEFINED> instruction: 0x000123b8
   11d98:	andeq	r2, r1, r4, lsr #8
   11d9c:	andeq	r2, r1, r0, lsr r5
   11da0:	andeq	r2, r1, r0, lsr r5
   11da4:	andeq	r2, r1, ip, lsr #9
   11da8:	andeq	r2, r1, r0, lsr r5
   11dac:	andeq	r2, r1, r0, lsr r5
   11db0:	andeq	r2, r1, r0, lsr r5
   11db4:	andeq	r2, r1, r0, lsr r5
   11db8:	andeq	r2, r1, r0, lsr r5
   11dbc:	andeq	r2, r1, r0, lsr r5
   11dc0:	andeq	r2, r1, r0, lsr r5
   11dc4:	andeq	r2, r1, r0, lsr r5
   11dc8:	andeq	r2, r1, r0, lsr r5
   11dcc:	andeq	r2, r1, r0, lsl #3
   11dd0:	muleq	r1, ip, r1
   11dd4:	andeq	r2, r1, ip, lsr #3
   11dd8:			; <UNDEFINED> instruction: 0x000121bc
   11ddc:	andeq	r2, r1, r0, ror #3
   11de0:	andeq	r2, r1, r8, lsl r2
   11de4:	andeq	r2, r1, r0, lsr r5
   11de8:	andeq	r2, r1, r8, lsr #4
   11dec:	andeq	r2, r1, ip, lsr r2
   11df0:	andeq	r2, r1, r0, lsr r5
   11df4:	andeq	r2, r1, r0, lsr r5
   11df8:	andeq	r2, r1, r4, lsl #5
   11dfc:	andeq	r2, r1, ip, lsr #5
   11e00:	andeq	r2, r1, r8, asr #5
   11e04:	andeq	r2, r1, r4, lsr r3
   11e08:	andeq	r2, r1, r0, lsr r5
   11e0c:	andeq	r2, r1, r0, lsr r5
   11e10:	andeq	r2, r1, ip, asr r3
   11e14:	andeq	r2, r1, ip, ror #6
   11e18:	andeq	r2, r1, r8, lsl #8
   11e1c:	andeq	r2, r1, r0, lsr r5
   11e20:	andeq	r2, r1, r0, asr #8
   11e24:	andeq	r2, r1, r0, asr r4
   11e28:	andeq	r2, r1, r0, lsr r5
   11e2c:	andeq	r2, r1, r0, lsr r5
   11e30:	andeq	r2, r1, r0, lsr r5
   11e34:	andeq	r2, r1, r0, lsr r5
   11e38:	andeq	r2, r1, r0, lsr r5
   11e3c:	andeq	r2, r1, r0, lsr r5
   11e40:	andeq	r2, r1, r0, lsr r5
   11e44:	andeq	r2, r1, r0, lsr r5
   11e48:	andeq	r2, r1, r0, lsr r5
   11e4c:	andeq	r2, r1, r0, lsr r5
   11e50:	andeq	r2, r1, r0, lsr r5
   11e54:	andeq	r2, r1, r0, lsr r5
   11e58:	andeq	r2, r1, r0, lsr r5
   11e5c:	andeq	r2, r1, r0, lsr r5
   11e60:	andeq	r2, r1, r0, lsr r5
   11e64:	andeq	r2, r1, r0, lsr r5
   11e68:	andeq	r2, r1, r0, lsr r5
   11e6c:	andeq	r2, r1, r0, lsr r5
   11e70:	andeq	r2, r1, r0, lsr r5
   11e74:	andeq	r2, r1, r0, lsr r5
   11e78:	andeq	r2, r1, r0, lsr r5
   11e7c:	andeq	r2, r1, r0, lsr r5
   11e80:	andeq	r2, r1, r0, lsr r5
   11e84:	andeq	r2, r1, r0, lsr r5
   11e88:	andeq	r2, r1, r0, lsr r5
   11e8c:	andeq	r2, r1, r0, lsr r5
   11e90:	andeq	r2, r1, r0, lsr r5
   11e94:	andeq	r2, r1, r0, lsr r5
   11e98:	andeq	r2, r1, r0, lsr r5
   11e9c:	andeq	r2, r1, r0, lsr r5
   11ea0:	andeq	r2, r1, r0, lsr r5
   11ea4:	andeq	r2, r1, r0, lsr r5
   11ea8:	andeq	r2, r1, r0, lsr r5
   11eac:	andeq	r2, r1, r0, lsr r5
   11eb0:	andeq	r2, r1, r0, lsr r5
   11eb4:	andeq	r2, r1, r0, lsr r5
   11eb8:	andeq	r2, r1, r0, lsr r5
   11ebc:	andeq	r2, r1, r0, lsr r5
   11ec0:	andeq	r2, r1, r0, lsr r5
   11ec4:	andeq	r2, r1, r0, lsr r5
   11ec8:	andeq	r2, r1, r0, lsr r5
   11ecc:	andeq	r2, r1, r0, lsr r5
   11ed0:	andeq	r2, r1, r0, lsr r5
   11ed4:	andeq	r2, r1, r0, lsr r5
   11ed8:	andeq	r2, r1, r0, lsr r5
   11edc:	andeq	r2, r1, r0, lsr r5
   11ee0:	andeq	r2, r1, r0, lsr r5
   11ee4:	andeq	r2, r1, r0, lsr r5
   11ee8:	andeq	r2, r1, r0, lsr r5
   11eec:	andeq	r2, r1, r0, lsr r5
   11ef0:	andeq	r2, r1, r0, lsr r5
   11ef4:	andeq	r2, r1, r0, lsr r5
   11ef8:	andeq	r2, r1, r0, lsr r5
   11efc:	andeq	r2, r1, r0, lsr r5
   11f00:	andeq	r2, r1, r0, lsr r5
   11f04:	andeq	r2, r1, r0, lsr r5
   11f08:	andeq	r2, r1, r0, lsr r5
   11f0c:	andeq	r2, r1, r0, lsr r5
   11f10:	andeq	r2, r1, r0, lsr r5
   11f14:	andeq	r2, r1, r0, lsr r5
   11f18:	andeq	r2, r1, r0, lsr r5
   11f1c:	andeq	r2, r1, r0, lsr r5
   11f20:	andeq	r2, r1, r0, lsr r5
   11f24:	andeq	r2, r1, r0, lsr r5
   11f28:	andeq	r2, r1, r0, lsr r5
   11f2c:	andeq	r2, r1, r0, lsr r5
   11f30:	andeq	r2, r1, r0, lsr r5
   11f34:	andeq	r2, r1, r0, lsr r5
   11f38:	andeq	r2, r1, r0, lsr r5
   11f3c:	andeq	r2, r1, r0, lsr r5
   11f40:	andeq	r2, r1, r0, lsr r5
   11f44:	andeq	r2, r1, r0, lsr r5
   11f48:	andeq	r2, r1, r0, lsr r5
   11f4c:	andeq	r2, r1, r0, lsr r5
   11f50:	andeq	r2, r1, r0, lsr r5
   11f54:	andeq	r2, r1, r0, lsr r5
   11f58:	andeq	r2, r1, r0, lsr r5
   11f5c:	andeq	r2, r1, r0, lsr r5
   11f60:	andeq	r2, r1, r0, lsr r5
   11f64:	andeq	r2, r1, r0, lsr r5
   11f68:	andeq	r2, r1, r0, lsr r5
   11f6c:	andeq	r2, r1, r0, lsr r5
   11f70:	andeq	r2, r1, r0, lsr r5
   11f74:	andeq	r2, r1, r0, lsr r5
   11f78:	andeq	r2, r1, r0, lsr r5
   11f7c:	andeq	r2, r1, r0, lsr r5
   11f80:	andeq	r2, r1, r0, lsr r5
   11f84:	andeq	r2, r1, r0, lsr r5
   11f88:	andeq	r2, r1, r0, lsr r5
   11f8c:	andeq	r2, r1, r0, lsr r5
   11f90:	andeq	r2, r1, r0, lsr r5
   11f94:	andeq	r2, r1, r0, lsr r5
   11f98:	andeq	r2, r1, r0, lsr r5
   11f9c:	andeq	r2, r1, r0, lsr r5
   11fa0:	andeq	r2, r1, r0, lsr r5
   11fa4:	andeq	r2, r1, r0, lsr r5
   11fa8:	andeq	r2, r1, r0, lsr r5
   11fac:	andeq	r2, r1, r0, lsr r5
   11fb0:	andeq	r2, r1, r0, lsr r5
   11fb4:	andeq	r2, r1, r0, lsr r5
   11fb8:	andeq	r2, r1, r0, lsr r5
   11fbc:	andeq	r2, r1, r0, lsr r5
   11fc0:	andeq	r2, r1, r0, lsr r5
   11fc4:	andeq	r2, r1, r0, lsr r5
   11fc8:	andeq	r2, r1, r0, lsr r5
   11fcc:	andeq	r2, r1, r0, lsr r5
   11fd0:	andeq	r2, r1, r0, lsr r5
   11fd4:	andeq	r2, r1, r0, lsr r5
   11fd8:	andeq	r2, r1, r0, lsr r5
   11fdc:	andeq	r2, r1, r0, lsr r5
   11fe0:	andeq	r2, r1, r0, lsr r5
   11fe4:	andeq	r2, r1, r0, lsr r5
   11fe8:	andeq	r2, r1, r0, lsr r5
   11fec:	andeq	r2, r1, r0, lsr r5
   11ff0:	andeq	r2, r1, r0, lsr r5
   11ff4:	andeq	r2, r1, r0, lsr r5
   11ff8:	andeq	r2, r1, r0, lsr r5
   11ffc:	andeq	r2, r1, r0, lsr r5
   12000:	andeq	r2, r1, r0, lsr r5
   12004:	andeq	r2, r1, r0, lsr r5
   12008:	andeq	r2, r1, r0, lsr r5
   1200c:	andeq	r2, r1, r0, lsr r5
   12010:	andeq	r2, r1, r0, lsr r5
   12014:	andeq	r2, r1, r0, lsr r5
   12018:	andeq	r2, r1, r0, lsr r5
   1201c:	andeq	r2, r1, r0, lsr r5
   12020:	andeq	r2, r1, r0, lsr r5
   12024:	andeq	r2, r1, r0, lsr r5
   12028:	andeq	r2, r1, r0, lsr r5
   1202c:	andeq	r2, r1, r0, lsr r5
   12030:	andeq	r2, r1, r0, lsr r5
   12034:	andeq	r2, r1, r0, lsr r5
   12038:	andeq	r2, r1, r0, lsr r5
   1203c:	andeq	r2, r1, r0, lsr r5
   12040:	andeq	r2, r1, r0, lsr r5
   12044:	andeq	r2, r1, r0, lsr r5
   12048:	andeq	r2, r1, r4, asr r1
   1204c:	andeq	r2, r1, ip, asr #1
   12050:	ldr	r3, [pc, #2196]	; 128ec <__assert_fail@plt+0x1508>
   12054:	ldrd	r2, [r3]
   12058:	orrs	r3, r2, r3
   1205c:	bne	120a4 <__assert_fail@plt+0xcc0>
   12060:	ldr	r3, [pc, #2184]	; 128f0 <__assert_fail@plt+0x150c>
   12064:	ldr	r3, [r3]
   12068:	ldrb	r3, [r3]
   1206c:	cmp	r3, #43	; 0x2b
   12070:	bne	120a4 <__assert_fail@plt+0xcc0>
   12074:	ldr	r3, [pc, #2164]	; 128f0 <__assert_fail@plt+0x150c>
   12078:	ldr	r3, [r3]
   1207c:	add	r3, r3, #1
   12080:	mov	r2, r3
   12084:	mov	r1, #43	; 0x2b
   12088:	mvn	r0, #1
   1208c:	bl	11888 <__assert_fail@plt+0x4a4>
   12090:	mov	r3, r0
   12094:	eor	r3, r3, #1
   12098:	uxtb	r3, r3
   1209c:	cmp	r3, #0
   120a0:	beq	12538 <__assert_fail@plt+0x1154>
   120a4:	ldr	r3, [fp, #-16]
   120a8:	add	r2, r3, #1
   120ac:	str	r2, [fp, #-16]
   120b0:	lsl	r3, r3, #2
   120b4:	ldr	r2, [fp, #-36]	; 0xffffffdc
   120b8:	add	r3, r2, r3
   120bc:	ldr	r2, [pc, #2092]	; 128f0 <__assert_fail@plt+0x150c>
   120c0:	ldr	r2, [r2]
   120c4:	str	r2, [r3]
   120c8:	b	12538 <__assert_fail@plt+0x1154>
   120cc:	ldr	r3, [pc, #2076]	; 128f0 <__assert_fail@plt+0x150c>
   120d0:	ldr	r3, [r3]
   120d4:	cmp	r3, #0
   120d8:	bne	120f8 <__assert_fail@plt+0xd14>
   120dc:	ldr	r0, [pc, #2064]	; 128f4 <__assert_fail@plt+0x1510>
   120e0:	bl	11288 <gettext@plt>
   120e4:	mov	r3, r0
   120e8:	mov	r2, r3
   120ec:	mov	r1, #0
   120f0:	mov	r0, #1
   120f4:	bl	11210 <error@plt>
   120f8:	ldr	r0, [fp, #-48]	; 0xffffffd0
   120fc:	ldr	r3, [pc, #2028]	; 128f0 <__assert_fail@plt+0x150c>
   12100:	ldr	r3, [r3]
   12104:	mov	r2, r3
   12108:	mov	r1, #0
   1210c:	bl	11888 <__assert_fail@plt+0x4a4>
   12110:	mov	r3, r0
   12114:	eor	r3, r3, #1
   12118:	uxtb	r3, r3
   1211c:	cmp	r3, #0
   12120:	beq	12540 <__assert_fail@plt+0x115c>
   12124:	ldr	r0, [pc, #1996]	; 128f8 <__assert_fail@plt+0x1514>
   12128:	bl	11288 <gettext@plt>
   1212c:	mov	r4, r0
   12130:	ldr	r3, [pc, #1976]	; 128f0 <__assert_fail@plt+0x150c>
   12134:	ldr	r3, [r3]
   12138:	mov	r0, r3
   1213c:	bl	1cb84 <__assert_fail@plt+0xb7a0>
   12140:	mov	r3, r0
   12144:	mov	r2, r4
   12148:	mov	r1, #0
   1214c:	mov	r0, #1
   12150:	bl	11210 <error@plt>
   12154:	ldr	r3, [pc, #1940]	; 128f0 <__assert_fail@plt+0x150c>
   12158:	ldr	r3, [r3]
   1215c:	mov	r0, r3
   12160:	bl	11a10 <__assert_fail@plt+0x62c>
   12164:	ldr	r0, [fp, #-24]	; 0xffffffe8
   12168:	bl	17130 <__assert_fail@plt+0x5d4c>
   1216c:	mov	r3, #0
   12170:	str	r3, [fp, #-24]	; 0xffffffe8
   12174:	mov	r3, #0
   12178:	str	r3, [fp, #-44]	; 0xffffffd4
   1217c:	b	12564 <__assert_fail@plt+0x1180>
   12180:	ldr	r3, [pc, #1908]	; 128fc <__assert_fail@plt+0x1518>
   12184:	mov	r2, #1
   12188:	strb	r2, [r3]
   1218c:	ldr	r3, [pc, #1900]	; 12900 <__assert_fail@plt+0x151c>
   12190:	mov	r2, #0
   12194:	strb	r2, [r3]
   12198:	b	12564 <__assert_fail@plt+0x1180>
   1219c:	ldr	r3, [pc, #1888]	; 12904 <__assert_fail@plt+0x1520>
   121a0:	mov	r2, #1
   121a4:	strb	r2, [r3]
   121a8:	b	12564 <__assert_fail@plt+0x1180>
   121ac:	ldr	r3, [pc, #1876]	; 12908 <__assert_fail@plt+0x1524>
   121b0:	mov	r2, #1
   121b4:	strb	r2, [r3]
   121b8:	b	12564 <__assert_fail@plt+0x1180>
   121bc:	ldr	r3, [pc, #1864]	; 1290c <__assert_fail@plt+0x1528>
   121c0:	mov	r2, #1
   121c4:	strb	r2, [r3]
   121c8:	b	12564 <__assert_fail@plt+0x1180>
   121cc:	ldr	r3, [pc, #1820]	; 128f0 <__assert_fail@plt+0x150c>
   121d0:	ldr	r3, [r3]
   121d4:	ldr	r2, [pc, #1844]	; 12910 <__assert_fail@plt+0x152c>
   121d8:	str	r3, [r2]
   121dc:	b	12564 <__assert_fail@plt+0x1180>
   121e0:	ldr	r3, [pc, #1800]	; 128f0 <__assert_fail@plt+0x150c>
   121e4:	ldr	r3, [r3]
   121e8:	cmp	r3, #0
   121ec:	beq	12208 <__assert_fail@plt+0xe24>
   121f0:	ldr	r3, [pc, #1784]	; 128f0 <__assert_fail@plt+0x150c>
   121f4:	ldr	r0, [r3]
   121f8:	ldr	r3, [pc, #1812]	; 12914 <__assert_fail@plt+0x1530>
   121fc:	ldr	r2, [pc, #1812]	; 12918 <__assert_fail@plt+0x1534>
   12200:	mov	r1, #101	; 0x65
   12204:	bl	12a58 <__assert_fail@plt+0x1674>
   12208:	ldr	r3, [pc, #1804]	; 1291c <__assert_fail@plt+0x1538>
   1220c:	mov	r2, #1
   12210:	strb	r2, [r3]
   12214:	b	12564 <__assert_fail@plt+0x1180>
   12218:	ldr	r3, [pc, #1792]	; 12920 <__assert_fail@plt+0x153c>
   1221c:	mov	r2, #1
   12220:	strb	r2, [r3]
   12224:	b	12564 <__assert_fail@plt+0x1180>
   12228:	ldr	r3, [pc, #1728]	; 128f0 <__assert_fail@plt+0x150c>
   1222c:	ldr	r3, [r3]
   12230:	ldr	r2, [pc, #1772]	; 12924 <__assert_fail@plt+0x1540>
   12234:	str	r3, [r2]
   12238:	b	12564 <__assert_fail@plt+0x1180>
   1223c:	ldr	r3, [pc, #1708]	; 128f0 <__assert_fail@plt+0x150c>
   12240:	ldr	r3, [r3]
   12244:	cmp	r3, #0
   12248:	beq	12264 <__assert_fail@plt+0xe80>
   1224c:	ldr	r3, [pc, #1692]	; 128f0 <__assert_fail@plt+0x150c>
   12250:	ldr	r0, [r3]
   12254:	ldr	r3, [pc, #1740]	; 12928 <__assert_fail@plt+0x1544>
   12258:	ldr	r2, [pc, #1740]	; 1292c <__assert_fail@plt+0x1548>
   1225c:	mov	r1, #105	; 0x69
   12260:	bl	12a58 <__assert_fail@plt+0x1674>
   12264:	ldr	r3, [pc, #1732]	; 12930 <__assert_fail@plt+0x154c>
   12268:	mov	r2, #1
   1226c:	strb	r2, [r3]
   12270:	b	12564 <__assert_fail@plt+0x1180>
   12274:	ldr	r3, [pc, #1720]	; 12934 <__assert_fail@plt+0x1550>
   12278:	mov	r2, #1
   1227c:	strb	r2, [r3]
   12280:	b	12564 <__assert_fail@plt+0x1180>
   12284:	ldr	r3, [pc, #1636]	; 128f0 <__assert_fail@plt+0x150c>
   12288:	ldr	r4, [r3]
   1228c:	ldr	r0, [pc, #1700]	; 12938 <__assert_fail@plt+0x1554>
   12290:	bl	11288 <gettext@plt>
   12294:	mov	r3, r0
   12298:	ldr	r2, [pc, #1692]	; 1293c <__assert_fail@plt+0x1558>
   1229c:	mov	r1, #1
   122a0:	mov	r0, r4
   122a4:	bl	129dc <__assert_fail@plt+0x15f8>
   122a8:	b	12564 <__assert_fail@plt+0x1180>
   122ac:	ldr	r3, [pc, #1676]	; 12940 <__assert_fail@plt+0x155c>
   122b0:	mov	r2, #1
   122b4:	strb	r2, [r3]
   122b8:	ldr	r3, [pc, #1600]	; 12900 <__assert_fail@plt+0x151c>
   122bc:	mov	r2, #0
   122c0:	strb	r2, [r3]
   122c4:	b	12564 <__assert_fail@plt+0x1180>
   122c8:	ldr	r3, [pc, #1652]	; 12944 <__assert_fail@plt+0x1560>
   122cc:	mov	r2, #1
   122d0:	strb	r2, [r3]
   122d4:	ldr	r3, [pc, #1556]	; 128f0 <__assert_fail@plt+0x150c>
   122d8:	ldr	r3, [r3]
   122dc:	cmp	r3, #0
   122e0:	beq	12548 <__assert_fail@plt+0x1164>
   122e4:	ldr	r3, [pc, #1540]	; 128f0 <__assert_fail@plt+0x150c>
   122e8:	ldr	r0, [r3]
   122ec:	ldr	r3, [pc, #1620]	; 12948 <__assert_fail@plt+0x1564>
   122f0:	ldr	r2, [pc, #1620]	; 1294c <__assert_fail@plt+0x1568>
   122f4:	mov	r1, #110	; 0x6e
   122f8:	bl	12a58 <__assert_fail@plt+0x1674>
   122fc:	b	12548 <__assert_fail@plt+0x1164>
   12300:	ldr	r3, [pc, #1608]	; 12950 <__assert_fail@plt+0x156c>
   12304:	mov	r2, #0
   12308:	strb	r2, [r3]
   1230c:	ldr	r3, [pc, #1500]	; 128f0 <__assert_fail@plt+0x150c>
   12310:	ldr	r4, [r3]
   12314:	ldr	r0, [pc, #1592]	; 12954 <__assert_fail@plt+0x1570>
   12318:	bl	11288 <gettext@plt>
   1231c:	mov	r3, r0
   12320:	ldr	r2, [pc, #1584]	; 12958 <__assert_fail@plt+0x1574>
   12324:	mov	r1, #-2147483648	; 0x80000000
   12328:	mov	r0, r4
   1232c:	bl	129dc <__assert_fail@plt+0x15f8>
   12330:	b	12564 <__assert_fail@plt+0x1180>
   12334:	ldr	r3, [pc, #1460]	; 128f0 <__assert_fail@plt+0x150c>
   12338:	ldr	r4, [r3]
   1233c:	ldr	r0, [pc, #1560]	; 1295c <__assert_fail@plt+0x1578>
   12340:	bl	11288 <gettext@plt>
   12344:	mov	r3, r0
   12348:	ldr	r2, [pc, #1552]	; 12960 <__assert_fail@plt+0x157c>
   1234c:	mov	r1, #0
   12350:	mov	r0, r4
   12354:	bl	129dc <__assert_fail@plt+0x15f8>
   12358:	b	12564 <__assert_fail@plt+0x1180>
   1235c:	ldr	r3, [pc, #1536]	; 12964 <__assert_fail@plt+0x1580>
   12360:	mov	r2, #1
   12364:	strb	r2, [r3]
   12368:	b	12564 <__assert_fail@plt+0x1180>
   1236c:	mov	r3, #1
   12370:	strb	r3, [fp, #-17]	; 0xffffffef
   12374:	mov	r3, #1
   12378:	strb	r3, [fp, #-19]	; 0xffffffed
   1237c:	ldr	r3, [pc, #1508]	; 12968 <__assert_fail@plt+0x1584>
   12380:	ldrb	r3, [r3]
   12384:	eor	r3, r3, #1
   12388:	uxtb	r3, r3
   1238c:	cmp	r3, #0
   12390:	beq	12550 <__assert_fail@plt+0x116c>
   12394:	ldr	r3, [pc, #1364]	; 128f0 <__assert_fail@plt+0x150c>
   12398:	ldr	r3, [r3]
   1239c:	cmp	r3, #0
   123a0:	beq	12550 <__assert_fail@plt+0x116c>
   123a4:	ldr	r3, [pc, #1348]	; 128f0 <__assert_fail@plt+0x150c>
   123a8:	ldr	r3, [r3]
   123ac:	mov	r0, r3
   123b0:	bl	11a60 <__assert_fail@plt+0x67c>
   123b4:	b	12550 <__assert_fail@plt+0x116c>
   123b8:	mov	r3, #0
   123bc:	strb	r3, [fp, #-19]	; 0xffffffed
   123c0:	ldr	r3, [pc, #1444]	; 1296c <__assert_fail@plt+0x1588>
   123c4:	ldr	r2, [pc, #1288]	; 128d4 <__assert_fail@plt+0x14f0>
   123c8:	str	r2, [r3]
   123cc:	ldr	r3, [pc, #1436]	; 12970 <__assert_fail@plt+0x158c>
   123d0:	mov	r2, #0
   123d4:	str	r2, [r3]
   123d8:	ldr	r3, [pc, #1416]	; 12968 <__assert_fail@plt+0x1584>
   123dc:	mov	r2, #1
   123e0:	strb	r2, [r3]
   123e4:	ldr	r3, [pc, #1284]	; 128f0 <__assert_fail@plt+0x150c>
   123e8:	ldr	r3, [r3]
   123ec:	cmp	r3, #0
   123f0:	beq	12558 <__assert_fail@plt+0x1174>
   123f4:	ldr	r3, [pc, #1268]	; 128f0 <__assert_fail@plt+0x150c>
   123f8:	ldr	r3, [r3]
   123fc:	mov	r0, r3
   12400:	bl	11a60 <__assert_fail@plt+0x67c>
   12404:	b	12558 <__assert_fail@plt+0x1174>
   12408:	ldr	r3, [pc, #1380]	; 12974 <__assert_fail@plt+0x1590>
   1240c:	mov	r2, #0
   12410:	strb	r2, [r3]
   12414:	ldr	r3, [pc, #1372]	; 12978 <__assert_fail@plt+0x1594>
   12418:	mov	r2, #1
   1241c:	strb	r2, [r3]
   12420:	b	12564 <__assert_fail@plt+0x1180>
   12424:	ldr	r3, [pc, #1352]	; 12974 <__assert_fail@plt+0x1590>
   12428:	mov	r2, #0
   1242c:	strb	r2, [r3]
   12430:	ldr	r3, [pc, #1344]	; 12978 <__assert_fail@plt+0x1594>
   12434:	mov	r2, #0
   12438:	strb	r2, [r3]
   1243c:	b	12564 <__assert_fail@plt+0x1180>
   12440:	ldr	r3, [pc, #1332]	; 1297c <__assert_fail@plt+0x1598>
   12444:	mov	r2, #1
   12448:	strb	r2, [r3]
   1244c:	b	12564 <__assert_fail@plt+0x1180>
   12450:	mov	r3, #1
   12454:	strb	r3, [fp, #-17]	; 0xffffffef
   12458:	mov	r3, #1
   1245c:	strb	r3, [fp, #-18]	; 0xffffffee
   12460:	ldr	r3, [pc, #1160]	; 128f0 <__assert_fail@plt+0x150c>
   12464:	ldr	r4, [r3]
   12468:	ldr	r0, [pc, #1296]	; 12980 <__assert_fail@plt+0x159c>
   1246c:	bl	11288 <gettext@plt>
   12470:	mov	r3, r0
   12474:	sub	r2, fp, #52	; 0x34
   12478:	mov	r1, #1
   1247c:	mov	r0, r4
   12480:	bl	129dc <__assert_fail@plt+0x15f8>
   12484:	ldr	r3, [pc, #1272]	; 12984 <__assert_fail@plt+0x15a0>
   12488:	ldrb	r3, [r3]
   1248c:	eor	r3, r3, #1
   12490:	uxtb	r3, r3
   12494:	cmp	r3, #0
   12498:	beq	12560 <__assert_fail@plt+0x117c>
   1249c:	ldr	r3, [fp, #-52]	; 0xffffffcc
   124a0:	ldr	r2, [pc, #1248]	; 12988 <__assert_fail@plt+0x15a4>
   124a4:	str	r3, [r2]
   124a8:	b	12560 <__assert_fail@plt+0x117c>
   124ac:	mov	r3, #0
   124b0:	strb	r3, [fp, #-18]	; 0xffffffee
   124b4:	ldr	r3, [pc, #1224]	; 12984 <__assert_fail@plt+0x15a0>
   124b8:	mov	r2, #1
   124bc:	strb	r2, [r3]
   124c0:	ldr	r3, [pc, #1064]	; 128f0 <__assert_fail@plt+0x150c>
   124c4:	ldr	r4, [r3]
   124c8:	ldr	r0, [pc, #1212]	; 1298c <__assert_fail@plt+0x15a8>
   124cc:	bl	11288 <gettext@plt>
   124d0:	mov	r3, r0
   124d4:	ldr	r2, [pc, #1196]	; 12988 <__assert_fail@plt+0x15a4>
   124d8:	mov	r1, #1
   124dc:	mov	r0, r4
   124e0:	bl	129dc <__assert_fail@plt+0x15f8>
   124e4:	b	12564 <__assert_fail@plt+0x1180>
   124e8:	mov	r0, #0
   124ec:	bl	16978 <__assert_fail@plt+0x5594>
   124f0:	ldr	r3, [pc, #1176]	; 12990 <__assert_fail@plt+0x15ac>
   124f4:	ldr	r0, [r3]
   124f8:	ldr	r3, [pc, #1172]	; 12994 <__assert_fail@plt+0x15b0>
   124fc:	ldr	r2, [r3]
   12500:	mov	r3, #0
   12504:	str	r3, [sp, #8]
   12508:	ldr	r3, [pc, #1160]	; 12998 <__assert_fail@plt+0x15b4>
   1250c:	str	r3, [sp, #4]
   12510:	ldr	r3, [pc, #1156]	; 1299c <__assert_fail@plt+0x15b8>
   12514:	str	r3, [sp]
   12518:	mov	r3, r2
   1251c:	ldr	r2, [pc, #1148]	; 129a0 <__assert_fail@plt+0x15bc>
   12520:	ldr	r1, [pc, #1148]	; 129a4 <__assert_fail@plt+0x15c0>
   12524:	bl	1ddbc <__assert_fail@plt+0xc9d8>
   12528:	mov	r0, #0
   1252c:	bl	1127c <exit@plt>
   12530:	mov	r0, #1
   12534:	bl	16978 <__assert_fail@plt+0x5594>
   12538:	nop			; (mov r0, r0)
   1253c:	b	11b6c <__assert_fail@plt+0x788>
   12540:	nop			; (mov r0, r0)
   12544:	b	11b6c <__assert_fail@plt+0x788>
   12548:	nop			; (mov r0, r0)
   1254c:	b	11b6c <__assert_fail@plt+0x788>
   12550:	nop			; (mov r0, r0)
   12554:	b	11b6c <__assert_fail@plt+0x788>
   12558:	nop			; (mov r0, r0)
   1255c:	b	11b6c <__assert_fail@plt+0x788>
   12560:	nop			; (mov r0, r0)
   12564:	b	11b6c <__assert_fail@plt+0x788>
   12568:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1256c:	bl	11a10 <__assert_fail@plt+0x62c>
   12570:	ldr	r0, [fp, #-24]	; 0xffffffe8
   12574:	bl	17130 <__assert_fail@plt+0x5d4c>
   12578:	ldr	r3, [pc, #912]	; 12910 <__assert_fail@plt+0x152c>
   1257c:	ldr	r3, [r3]
   12580:	cmp	r3, #0
   12584:	bne	125cc <__assert_fail@plt+0x11e8>
   12588:	ldr	r0, [pc, #1048]	; 129a8 <__assert_fail@plt+0x15c4>
   1258c:	bl	1121c <getenv@plt>
   12590:	mov	r3, r0
   12594:	cmp	r3, #0
   12598:	beq	125c0 <__assert_fail@plt+0x11dc>
   1259c:	mov	r0, #2
   125a0:	bl	17304 <__assert_fail@plt+0x5f20>
   125a4:	mov	r3, r0
   125a8:	eor	r3, r3, #1
   125ac:	uxtb	r3, r3
   125b0:	cmp	r3, #0
   125b4:	beq	125c0 <__assert_fail@plt+0x11dc>
   125b8:	ldr	r3, [pc, #1004]	; 129ac <__assert_fail@plt+0x15c8>
   125bc:	b	125c4 <__assert_fail@plt+0x11e0>
   125c0:	ldr	r3, [pc, #1000]	; 129b0 <__assert_fail@plt+0x15cc>
   125c4:	ldr	r2, [pc, #836]	; 12910 <__assert_fail@plt+0x152c>
   125c8:	str	r3, [r2]
   125cc:	ldr	r0, [pc, #992]	; 129b4 <__assert_fail@plt+0x15d0>
   125d0:	bl	1121c <getenv@plt>
   125d4:	mov	r3, r0
   125d8:	mov	r0, r3
   125dc:	bl	1cf14 <__assert_fail@plt+0xbb30>
   125e0:	mov	r2, r0
   125e4:	ldr	r3, [pc, #972]	; 129b8 <__assert_fail@plt+0x15d4>
   125e8:	str	r2, [r3]
   125ec:	ldr	r3, [pc, #760]	; 128ec <__assert_fail@plt+0x1508>
   125f0:	ldrd	r2, [r3]
   125f4:	orrs	r3, r2, r3
   125f8:	bne	1260c <__assert_fail@plt+0x1228>
   125fc:	ldr	r1, [pc, #744]	; 128ec <__assert_fail@plt+0x1508>
   12600:	mov	r2, #1
   12604:	mov	r3, #0
   12608:	strd	r2, [r1]
   1260c:	ldr	r3, [pc, #812]	; 12940 <__assert_fail@plt+0x155c>
   12610:	ldrb	r3, [r3]
   12614:	cmp	r3, #0
   12618:	beq	12648 <__assert_fail@plt+0x1264>
   1261c:	ldr	r3, [pc, #920]	; 129bc <__assert_fail@plt+0x15d8>
   12620:	ldrb	r3, [r3]
   12624:	cmp	r3, #0
   12628:	beq	12648 <__assert_fail@plt+0x1264>
   1262c:	ldr	r0, [pc, #908]	; 129c0 <__assert_fail@plt+0x15dc>
   12630:	bl	11288 <gettext@plt>
   12634:	mov	r3, r0
   12638:	mov	r2, r3
   1263c:	mov	r1, #0
   12640:	mov	r0, #1
   12644:	bl	11210 <error@plt>
   12648:	ldr	r3, [pc, #752]	; 12940 <__assert_fail@plt+0x155c>
   1264c:	ldrb	r3, [r3]
   12650:	cmp	r3, #0
   12654:	beq	12684 <__assert_fail@plt+0x12a0>
   12658:	ldr	r3, [pc, #668]	; 128fc <__assert_fail@plt+0x1518>
   1265c:	ldrb	r3, [r3]
   12660:	cmp	r3, #0
   12664:	beq	12684 <__assert_fail@plt+0x12a0>
   12668:	ldr	r0, [pc, #852]	; 129c4 <__assert_fail@plt+0x15e0>
   1266c:	bl	11288 <gettext@plt>
   12670:	mov	r3, r0
   12674:	mov	r2, r3
   12678:	mov	r1, #0
   1267c:	mov	r0, #1
   12680:	bl	11210 <error@plt>
   12684:	ldrb	r3, [fp, #-17]	; 0xffffffef
   12688:	cmp	r3, #0
   1268c:	beq	127d4 <__assert_fail@plt+0x13f0>
   12690:	ldrb	r3, [fp, #-18]	; 0xffffffee
   12694:	cmp	r3, #0
   12698:	beq	126f4 <__assert_fail@plt+0x1310>
   1269c:	ldr	r3, [pc, #668]	; 12940 <__assert_fail@plt+0x155c>
   126a0:	ldrb	r3, [r3]
   126a4:	cmp	r3, #0
   126a8:	bne	126bc <__assert_fail@plt+0x12d8>
   126ac:	ldr	r3, [pc, #776]	; 129bc <__assert_fail@plt+0x15d8>
   126b0:	ldrb	r3, [r3]
   126b4:	cmp	r3, #0
   126b8:	beq	126e4 <__assert_fail@plt+0x1300>
   126bc:	ldr	r3, [pc, #704]	; 12984 <__assert_fail@plt+0x15a0>
   126c0:	mov	r2, #1
   126c4:	strb	r2, [r3]
   126c8:	ldrb	r3, [fp, #-19]	; 0xffffffed
   126cc:	cmp	r3, #0
   126d0:	beq	12788 <__assert_fail@plt+0x13a4>
   126d4:	ldr	r3, [pc, #652]	; 12968 <__assert_fail@plt+0x1584>
   126d8:	mov	r2, #1
   126dc:	strb	r2, [r3]
   126e0:	b	12788 <__assert_fail@plt+0x13a4>
   126e4:	ldr	r3, [pc, #584]	; 12934 <__assert_fail@plt+0x1550>
   126e8:	mov	r2, #1
   126ec:	strb	r2, [r3]
   126f0:	b	127d4 <__assert_fail@plt+0x13f0>
   126f4:	ldr	r3, [pc, #620]	; 12968 <__assert_fail@plt+0x1584>
   126f8:	ldrb	r3, [r3]
   126fc:	eor	r3, r3, #1
   12700:	uxtb	r3, r3
   12704:	cmp	r3, #0
   12708:	beq	127d4 <__assert_fail@plt+0x13f0>
   1270c:	ldrb	r3, [fp, #-19]	; 0xffffffed
   12710:	cmp	r3, #0
   12714:	beq	127d4 <__assert_fail@plt+0x13f0>
   12718:	ldr	r3, [pc, #544]	; 12940 <__assert_fail@plt+0x155c>
   1271c:	ldrb	r3, [r3]
   12720:	cmp	r3, #0
   12724:	bne	12738 <__assert_fail@plt+0x1354>
   12728:	ldr	r3, [pc, #652]	; 129bc <__assert_fail@plt+0x15d8>
   1272c:	ldrb	r3, [r3]
   12730:	cmp	r3, #0
   12734:	beq	127d4 <__assert_fail@plt+0x13f0>
   12738:	ldr	r3, [pc, #580]	; 12984 <__assert_fail@plt+0x15a0>
   1273c:	ldrb	r3, [r3]
   12740:	eor	r3, r3, #1
   12744:	uxtb	r3, r3
   12748:	cmp	r3, #0
   1274c:	beq	1277c <__assert_fail@plt+0x1398>
   12750:	ldr	r3, [pc, #476]	; 12934 <__assert_fail@plt+0x1550>
   12754:	mov	r2, #1
   12758:	strb	r2, [r3]
   1275c:	ldr	r3, [pc, #524]	; 12970 <__assert_fail@plt+0x158c>
   12760:	ldr	r3, [r3]
   12764:	cmp	r3, #0
   12768:	ble	127d4 <__assert_fail@plt+0x13f0>
   1276c:	ldr	r3, [pc, #500]	; 12968 <__assert_fail@plt+0x1584>
   12770:	mov	r2, #1
   12774:	strb	r2, [r3]
   12778:	b	127d4 <__assert_fail@plt+0x13f0>
   1277c:	ldr	r3, [pc, #484]	; 12968 <__assert_fail@plt+0x1584>
   12780:	mov	r2, #1
   12784:	strb	r2, [r3]
   12788:	b	127d4 <__assert_fail@plt+0x13f0>
   1278c:	ldr	r3, [fp, #-16]
   12790:	add	r2, r3, #1
   12794:	str	r2, [fp, #-16]
   12798:	lsl	r3, r3, #2
   1279c:	ldr	r2, [fp, #-36]	; 0xffffffdc
   127a0:	add	r3, r2, r3
   127a4:	ldr	r2, [pc, #540]	; 129c8 <__assert_fail@plt+0x15e4>
   127a8:	ldr	r2, [r2]
   127ac:	lsl	r2, r2, #2
   127b0:	ldr	r1, [fp, #-60]	; 0xffffffc4
   127b4:	add	r2, r1, r2
   127b8:	ldr	r2, [r2]
   127bc:	str	r2, [r3]
   127c0:	ldr	r3, [pc, #512]	; 129c8 <__assert_fail@plt+0x15e4>
   127c4:	ldr	r3, [r3]
   127c8:	add	r3, r3, #1
   127cc:	ldr	r2, [pc, #500]	; 129c8 <__assert_fail@plt+0x15e4>
   127d0:	str	r3, [r2]
   127d4:	ldr	r3, [pc, #492]	; 129c8 <__assert_fail@plt+0x15e4>
   127d8:	ldr	r2, [r3]
   127dc:	ldr	r3, [fp, #-56]	; 0xffffffc8
   127e0:	cmp	r2, r3
   127e4:	blt	1278c <__assert_fail@plt+0x13a8>
   127e8:	ldr	r3, [fp, #-16]
   127ec:	cmp	r3, #0
   127f0:	bne	12804 <__assert_fail@plt+0x1420>
   127f4:	mov	r1, #0
   127f8:	mov	r0, #0
   127fc:	bl	13d54 <__assert_fail@plt+0x2970>
   12800:	b	1286c <__assert_fail@plt+0x1488>
   12804:	ldr	r3, [pc, #308]	; 12940 <__assert_fail@plt+0x155c>
   12808:	ldrb	r3, [r3]
   1280c:	cmp	r3, #0
   12810:	beq	12828 <__assert_fail@plt+0x1444>
   12814:	ldr	r3, [fp, #-16]
   12818:	ldr	r1, [fp, #-36]	; 0xffffffdc
   1281c:	mov	r0, r3
   12820:	bl	13d54 <__assert_fail@plt+0x2970>
   12824:	b	1286c <__assert_fail@plt+0x1488>
   12828:	mov	r3, #0
   1282c:	str	r3, [fp, #-32]	; 0xffffffe0
   12830:	b	1285c <__assert_fail@plt+0x1478>
   12834:	ldr	r3, [fp, #-32]	; 0xffffffe0
   12838:	lsl	r3, r3, #2
   1283c:	ldr	r2, [fp, #-36]	; 0xffffffdc
   12840:	add	r3, r2, r3
   12844:	mov	r1, r3
   12848:	mov	r0, #1
   1284c:	bl	13d54 <__assert_fail@plt+0x2970>
   12850:	ldr	r3, [fp, #-32]	; 0xffffffe0
   12854:	add	r3, r3, #1
   12858:	str	r3, [fp, #-32]	; 0xffffffe0
   1285c:	ldr	r2, [fp, #-32]	; 0xffffffe0
   12860:	ldr	r3, [fp, #-16]
   12864:	cmp	r2, r3
   12868:	bcc	12834 <__assert_fail@plt+0x1450>
   1286c:	bl	168f0 <__assert_fail@plt+0x550c>
   12870:	ldr	r3, [pc, #340]	; 129cc <__assert_fail@plt+0x15e8>
   12874:	ldrb	r3, [r3]
   12878:	cmp	r3, #0
   1287c:	beq	128c4 <__assert_fail@plt+0x14e0>
   12880:	ldr	r3, [pc, #328]	; 129d0 <__assert_fail@plt+0x15ec>
   12884:	ldr	r3, [r3]
   12888:	mov	r0, r3
   1288c:	bl	16e84 <__assert_fail@plt+0x5aa0>
   12890:	mov	r3, r0
   12894:	cmn	r3, #1
   12898:	bne	128c4 <__assert_fail@plt+0x14e0>
   1289c:	bl	112d0 <__errno_location@plt>
   128a0:	mov	r3, r0
   128a4:	ldr	r4, [r3]
   128a8:	ldr	r0, [pc, #292]	; 129d4 <__assert_fail@plt+0x15f0>
   128ac:	bl	11288 <gettext@plt>
   128b0:	mov	r3, r0
   128b4:	mov	r2, r3
   128b8:	mov	r1, r4
   128bc:	mov	r0, #1
   128c0:	bl	11210 <error@plt>
   128c4:	ldr	r3, [pc, #268]	; 129d8 <__assert_fail@plt+0x15f4>
   128c8:	ldrb	r3, [r3]
   128cc:	mov	r0, r3
   128d0:	bl	1127c <exit@plt>
   128d4:			; <UNDEFINED> instruction: 0x00021eb8
   128d8:	andeq	r2, r2, r8, asr #5
   128dc:	ldrdeq	r1, [r2], -r0
   128e0:			; <UNDEFINED> instruction: 0x00016cb4
   128e4:	andeq	r2, r2, r8, ror #1
   128e8:	andeq	r1, r2, r4, ror pc
   128ec:	andeq	r4, r3, r0, asr #4
   128f0:	strdeq	r4, [r3], -r0
   128f4:	andeq	r2, r2, r0, ror #5
   128f8:	andeq	r2, r2, r4, lsl r3
   128fc:	andeq	r4, r3, sl, lsl r2
   12900:	andeq	r4, r3, r1, asr #2
   12904:	andeq	r4, r3, fp, lsl r2
   12908:	andeq	r4, r3, r9, ror #4
   1290c:	andeq	r4, r3, sl, ror #4
   12910:	andeq	r4, r3, r8, lsl #5
   12914:	andeq	r4, r3, r0, asr r1
   12918:	andeq	r4, r3, ip, asr #2
   1291c:	andeq	r4, r3, r8, lsr #4
   12920:	andeq	r4, r3, r8, lsl r2
   12924:	andeq	r4, r3, r4, lsl #5
   12928:	andeq	r4, r3, r8, asr r1
   1292c:	andeq	r4, r3, r4, asr r1
   12930:	andeq	r4, r3, r9, lsr #4
   12934:	andeq	r4, r3, r1, lsr #4
   12938:	andeq	r2, r2, ip, lsr #6
   1293c:	andeq	r4, r3, r4, asr #2
   12940:	andeq	r4, r3, r0, lsl r2
   12944:	andeq	r4, r3, ip, asr r2
   12948:	andeq	r4, r3, r8, ror r1
   1294c:	andeq	r4, r3, r8, ror #2
   12950:	andeq	r4, r3, r0, ror r1
   12954:	andeq	r2, r2, r8, asr r3
   12958:	andeq	r4, r3, r4, ror r1
   1295c:	andeq	r2, r2, r4, lsl #7
   12960:	andeq	r4, r3, r0, lsr r2
   12964:	andeq	r4, r3, r0, ror r2
   12968:	andeq	r4, r3, r1, ror r2
   1296c:	andeq	r4, r3, ip, ror r1
   12970:	andeq	r4, r3, r4, ror r2
   12974:	andeq	r4, r3, r0, asr #2
   12978:	andeq	r4, r3, r5, lsl r2
   1297c:	andeq	r4, r3, r8, ror #4
   12980:	andeq	r2, r2, r4, lsr #7
   12984:	andeq	r4, r3, r0, lsr #4
   12988:	andeq	r4, r3, r8, asr #2
   1298c:	ldrdeq	r2, [r2], -r4
   12990:	andeq	r4, r3, ip, ror #3
   12994:	andeq	r4, r3, r8, lsl #3
   12998:	andeq	r2, r2, r8, lsl #8
   1299c:	andeq	r2, r2, r8, lsl r4
   129a0:	andeq	r1, r2, r0, lsl #28
   129a4:	andeq	r2, r2, r4, lsl #8
   129a8:	andeq	r2, r2, r8, lsr #8
   129ac:	andeq	r2, r2, r8, lsr r4
   129b0:	andeq	r2, r2, r8, asr #8
   129b4:	andeq	r2, r2, r8, asr r4
   129b8:	andeq	r4, r3, ip, lsl #5
   129bc:	andeq	r4, r3, r4, lsl r2
   129c0:	andeq	r2, r2, ip, asr r4
   129c4:	muleq	r2, r8, r4
   129c8:	ldrdeq	r4, [r3], -r8
   129cc:	andeq	r4, r3, r9, lsl r2
   129d0:	andeq	r4, r3, r8, ror #3
   129d4:	ldrdeq	r2, [r2], -r8
   129d8:	andeq	r4, r3, ip, lsr r2
   129dc:	push	{fp, lr}
   129e0:	add	fp, sp, #4
   129e4:	sub	sp, sp, #48	; 0x30
   129e8:	str	r0, [fp, #-16]
   129ec:	str	r1, [fp, #-20]	; 0xffffffec
   129f0:	str	r2, [fp, #-24]	; 0xffffffe8
   129f4:	str	r3, [fp, #-28]	; 0xffffffe4
   129f8:	ldr	r3, [fp, #-20]	; 0xffffffec
   129fc:	mov	r0, r3
   12a00:	asr	r1, r0, #31
   12a04:	mov	r3, #0
   12a08:	str	r3, [sp, #16]
   12a0c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   12a10:	str	r3, [sp, #12]
   12a14:	ldr	r3, [pc, #56]	; 12a54 <__assert_fail@plt+0x1670>
   12a18:	str	r3, [sp, #8]
   12a1c:	mvn	r2, #-2147483648	; 0x80000000
   12a20:	mov	r3, #0
   12a24:	strd	r2, [sp]
   12a28:	mov	r2, r0
   12a2c:	mov	r3, r1
   12a30:	ldr	r0, [fp, #-16]
   12a34:	bl	1ec08 <__assert_fail@plt+0xd824>
   12a38:	strd	r0, [fp, #-12]
   12a3c:	ldr	r2, [fp, #-12]
   12a40:	ldr	r3, [fp, #-24]	; 0xffffffe8
   12a44:	str	r2, [r3]
   12a48:	nop			; (mov r0, r0)
   12a4c:	sub	sp, fp, #4
   12a50:	pop	{fp, pc}
   12a54:			; <UNDEFINED> instruction: 0x00021eb8
   12a58:	push	{r4, r5, r6, fp, lr}
   12a5c:	add	fp, sp, #16
   12a60:	sub	sp, sp, #36	; 0x24
   12a64:	str	r0, [fp, #-32]	; 0xffffffe0
   12a68:	str	r2, [fp, #-40]	; 0xffffffd8
   12a6c:	str	r3, [fp, #-44]	; 0xffffffd4
   12a70:	mov	r3, r1
   12a74:	strb	r3, [fp, #-33]	; 0xffffffdf
   12a78:	ldr	r3, [fp, #-32]	; 0xffffffe0
   12a7c:	ldrb	r3, [r3]
   12a80:	sub	r3, r3, #48	; 0x30
   12a84:	cmp	r3, #9
   12a88:	bls	12aa4 <__assert_fail@plt+0x16c0>
   12a8c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   12a90:	add	r2, r3, #1
   12a94:	str	r2, [fp, #-32]	; 0xffffffe0
   12a98:	ldrb	r2, [r3]
   12a9c:	ldr	r3, [fp, #-40]	; 0xffffffd8
   12aa0:	strb	r2, [r3]
   12aa4:	ldr	r3, [fp, #-32]	; 0xffffffe0
   12aa8:	ldrb	r3, [r3]
   12aac:	cmp	r3, #0
   12ab0:	beq	12b40 <__assert_fail@plt+0x175c>
   12ab4:	sub	r2, fp, #24
   12ab8:	ldr	r3, [pc, #140]	; 12b4c <__assert_fail@plt+0x1768>
   12abc:	str	r3, [sp]
   12ac0:	mov	r3, r2
   12ac4:	mov	r2, #10
   12ac8:	mov	r1, #0
   12acc:	ldr	r0, [fp, #-32]	; 0xffffffe0
   12ad0:	bl	1f7c8 <__assert_fail@plt+0xe3e4>
   12ad4:	mov	r3, r0
   12ad8:	cmp	r3, #0
   12adc:	bne	12aec <__assert_fail@plt+0x1708>
   12ae0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   12ae4:	cmp	r3, #0
   12ae8:	bgt	12b34 <__assert_fail@plt+0x1750>
   12aec:	bl	112d0 <__errno_location@plt>
   12af0:	mov	r3, r0
   12af4:	ldr	r4, [r3]
   12af8:	ldr	r0, [pc, #80]	; 12b50 <__assert_fail@plt+0x176c>
   12afc:	bl	11288 <gettext@plt>
   12b00:	mov	r6, r0
   12b04:	ldrb	r5, [fp, #-33]	; 0xffffffdf
   12b08:	ldr	r0, [fp, #-32]	; 0xffffffe0
   12b0c:	bl	1cb84 <__assert_fail@plt+0xb7a0>
   12b10:	mov	r3, r0
   12b14:	str	r3, [sp]
   12b18:	mov	r3, r5
   12b1c:	mov	r2, r6
   12b20:	mov	r1, r4
   12b24:	mov	r0, #0
   12b28:	bl	11210 <error@plt>
   12b2c:	mov	r0, #1
   12b30:	bl	16978 <__assert_fail@plt+0x5594>
   12b34:	ldr	r2, [fp, #-24]	; 0xffffffe8
   12b38:	ldr	r3, [fp, #-44]	; 0xffffffd4
   12b3c:	str	r2, [r3]
   12b40:	nop			; (mov r0, r0)
   12b44:	sub	sp, fp, #16
   12b48:	pop	{r4, r5, r6, fp, pc}
   12b4c:			; <UNDEFINED> instruction: 0x00021eb8
   12b50:	andeq	r2, r2, r8, ror #9
   12b54:	push	{r4, fp, lr}
   12b58:	add	fp, sp, #8
   12b5c:	sub	sp, sp, #28
   12b60:	str	r0, [fp, #-32]	; 0xffffffe0
   12b64:	mov	r3, #0
   12b68:	str	r3, [fp, #-16]
   12b6c:	ldr	r3, [pc, #1716]	; 13228 <__assert_fail@plt+0x1e44>
   12b70:	ldr	r3, [r3]
   12b74:	sub	r3, r3, #10
   12b78:	ldr	r2, [pc, #1708]	; 1322c <__assert_fail@plt+0x1e48>
   12b7c:	str	r3, [r2]
   12b80:	ldr	r3, [pc, #1700]	; 1322c <__assert_fail@plt+0x1e48>
   12b84:	ldr	r3, [r3]
   12b88:	cmp	r3, #0
   12b8c:	bgt	12ba8 <__assert_fail@plt+0x17c4>
   12b90:	ldr	r3, [pc, #1688]	; 13230 <__assert_fail@plt+0x1e4c>
   12b94:	mov	r2, #0
   12b98:	strb	r2, [r3]
   12b9c:	ldr	r3, [pc, #1680]	; 13234 <__assert_fail@plt+0x1e50>
   12ba0:	mov	r2, #1
   12ba4:	strb	r2, [r3]
   12ba8:	ldr	r3, [pc, #1664]	; 13230 <__assert_fail@plt+0x1e4c>
   12bac:	ldrb	r3, [r3]
   12bb0:	eor	r3, r3, #1
   12bb4:	uxtb	r3, r3
   12bb8:	cmp	r3, #0
   12bbc:	beq	12bd0 <__assert_fail@plt+0x17ec>
   12bc0:	ldr	r3, [pc, #1632]	; 13228 <__assert_fail@plt+0x1e44>
   12bc4:	ldr	r3, [r3]
   12bc8:	ldr	r2, [pc, #1628]	; 1322c <__assert_fail@plt+0x1e48>
   12bcc:	str	r3, [r2]
   12bd0:	ldr	r3, [pc, #1632]	; 13238 <__assert_fail@plt+0x1e54>
   12bd4:	ldrb	r3, [r3]
   12bd8:	cmp	r3, #0
   12bdc:	beq	12c00 <__assert_fail@plt+0x181c>
   12be0:	ldr	r3, [pc, #1604]	; 1322c <__assert_fail@plt+0x1e48>
   12be4:	ldr	r3, [r3]
   12be8:	lsr	r2, r3, #31
   12bec:	add	r3, r2, r3
   12bf0:	asr	r3, r3, #1
   12bf4:	mov	r2, r3
   12bf8:	ldr	r3, [pc, #1580]	; 1322c <__assert_fail@plt+0x1e48>
   12bfc:	str	r2, [r3]
   12c00:	ldr	r3, [fp, #-32]	; 0xffffffe0
   12c04:	cmp	r3, #0
   12c08:	bne	12c18 <__assert_fail@plt+0x1834>
   12c0c:	ldr	r3, [pc, #1576]	; 1323c <__assert_fail@plt+0x1e58>
   12c10:	mov	r2, #0
   12c14:	strb	r2, [r3]
   12c18:	ldr	r3, [pc, #1564]	; 1323c <__assert_fail@plt+0x1e58>
   12c1c:	ldrb	r3, [r3]
   12c20:	cmp	r3, #0
   12c24:	beq	12c34 <__assert_fail@plt+0x1850>
   12c28:	ldr	r2, [pc, #1552]	; 13240 <__assert_fail@plt+0x1e5c>
   12c2c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   12c30:	str	r3, [r2]
   12c34:	ldr	r3, [pc, #1544]	; 13244 <__assert_fail@plt+0x1e60>
   12c38:	ldrb	r3, [r3]
   12c3c:	cmp	r3, #0
   12c40:	beq	12c50 <__assert_fail@plt+0x186c>
   12c44:	ldr	r3, [pc, #1532]	; 13248 <__assert_fail@plt+0x1e64>
   12c48:	mov	r2, #1
   12c4c:	strb	r2, [r3]
   12c50:	ldr	r3, [pc, #1512]	; 13240 <__assert_fail@plt+0x1e5c>
   12c54:	ldr	r3, [r3]
   12c58:	cmp	r3, #1
   12c5c:	ble	12d60 <__assert_fail@plt+0x197c>
   12c60:	ldr	r3, [pc, #1508]	; 1324c <__assert_fail@plt+0x1e68>
   12c64:	ldrb	r3, [r3]
   12c68:	eor	r3, r3, #1
   12c6c:	uxtb	r3, r3
   12c70:	cmp	r3, #0
   12c74:	beq	12cc8 <__assert_fail@plt+0x18e4>
   12c78:	ldr	r3, [pc, #1488]	; 13250 <__assert_fail@plt+0x1e6c>
   12c7c:	ldrb	r3, [r3]
   12c80:	cmp	r3, #0
   12c84:	beq	12c9c <__assert_fail@plt+0x18b8>
   12c88:	ldr	r3, [pc, #1476]	; 13254 <__assert_fail@plt+0x1e70>
   12c8c:	ldr	r3, [r3]
   12c90:	ldr	r2, [pc, #1472]	; 13258 <__assert_fail@plt+0x1e74>
   12c94:	str	r3, [r2]
   12c98:	b	12cac <__assert_fail@plt+0x18c8>
   12c9c:	ldr	r3, [pc, #1464]	; 1325c <__assert_fail@plt+0x1e78>
   12ca0:	ldr	r3, [r3]
   12ca4:	ldr	r2, [pc, #1452]	; 13258 <__assert_fail@plt+0x1e74>
   12ca8:	str	r3, [r2]
   12cac:	ldr	r3, [pc, #1452]	; 13260 <__assert_fail@plt+0x1e7c>
   12cb0:	mov	r2, #1
   12cb4:	str	r2, [r3]
   12cb8:	ldr	r3, [pc, #1420]	; 1324c <__assert_fail@plt+0x1e68>
   12cbc:	mov	r2, #1
   12cc0:	strb	r2, [r3]
   12cc4:	b	12d14 <__assert_fail@plt+0x1930>
   12cc8:	ldr	r3, [pc, #1408]	; 13250 <__assert_fail@plt+0x1e6c>
   12ccc:	ldrb	r3, [r3]
   12cd0:	eor	r3, r3, #1
   12cd4:	uxtb	r3, r3
   12cd8:	cmp	r3, #0
   12cdc:	beq	12d14 <__assert_fail@plt+0x1930>
   12ce0:	ldr	r3, [pc, #1400]	; 13260 <__assert_fail@plt+0x1e7c>
   12ce4:	ldr	r3, [r3]
   12ce8:	cmp	r3, #1
   12cec:	bne	12d14 <__assert_fail@plt+0x1930>
   12cf0:	ldr	r3, [pc, #1376]	; 13258 <__assert_fail@plt+0x1e74>
   12cf4:	ldr	r3, [r3]
   12cf8:	ldrb	r3, [r3]
   12cfc:	cmp	r3, #9
   12d00:	bne	12d14 <__assert_fail@plt+0x1930>
   12d04:	ldr	r3, [pc, #1360]	; 1325c <__assert_fail@plt+0x1e78>
   12d08:	ldr	r3, [r3]
   12d0c:	ldr	r2, [pc, #1348]	; 13258 <__assert_fail@plt+0x1e74>
   12d10:	str	r3, [r2]
   12d14:	ldr	r3, [pc, #1352]	; 13264 <__assert_fail@plt+0x1e80>
   12d18:	mov	r2, #1
   12d1c:	strb	r2, [r3]
   12d20:	ldr	r3, [pc, #1336]	; 13260 <__assert_fail@plt+0x1e7c>
   12d24:	ldr	r3, [r3]
   12d28:	cmp	r3, #1
   12d2c:	bne	12d44 <__assert_fail@plt+0x1960>
   12d30:	ldr	r3, [pc, #1312]	; 13258 <__assert_fail@plt+0x1e74>
   12d34:	ldr	r3, [r3]
   12d38:	ldrb	r3, [r3]
   12d3c:	cmp	r3, #9
   12d40:	beq	12d50 <__assert_fail@plt+0x196c>
   12d44:	ldr	r3, [pc, #1308]	; 13268 <__assert_fail@plt+0x1e84>
   12d48:	mov	r2, #1
   12d4c:	strb	r2, [r3]
   12d50:	ldr	r3, [pc, #1300]	; 1326c <__assert_fail@plt+0x1e88>
   12d54:	mov	r2, #1
   12d58:	strb	r2, [r3]
   12d5c:	b	12d6c <__assert_fail@plt+0x1988>
   12d60:	ldr	r3, [pc, #1244]	; 13244 <__assert_fail@plt+0x1e60>
   12d64:	mov	r2, #0
   12d68:	strb	r2, [r3]
   12d6c:	ldr	r3, [pc, #1244]	; 13250 <__assert_fail@plt+0x1e6c>
   12d70:	ldrb	r3, [r3]
   12d74:	cmp	r3, #0
   12d78:	beq	12d88 <__assert_fail@plt+0x19a4>
   12d7c:	ldr	r3, [pc, #1248]	; 13264 <__assert_fail@plt+0x1e80>
   12d80:	mov	r2, #0
   12d84:	strb	r2, [r3]
   12d88:	ldr	r3, [pc, #1248]	; 13270 <__assert_fail@plt+0x1e8c>
   12d8c:	ldrb	r3, [r3]
   12d90:	cmp	r3, #0
   12d94:	beq	12e2c <__assert_fail@plt+0x1a48>
   12d98:	mov	r3, #8
   12d9c:	str	r3, [fp, #-20]	; 0xffffffec
   12da0:	ldr	r3, [pc, #1228]	; 13274 <__assert_fail@plt+0x1e90>
   12da4:	ldr	r3, [r3]
   12da8:	ldr	r2, [pc, #1224]	; 13278 <__assert_fail@plt+0x1e94>
   12dac:	str	r3, [r2]
   12db0:	ldr	r3, [pc, #1220]	; 1327c <__assert_fail@plt+0x1e98>
   12db4:	ldrb	r3, [r3]
   12db8:	cmp	r3, #9
   12dbc:	bne	12dfc <__assert_fail@plt+0x1a18>
   12dc0:	ldr	r3, [pc, #1208]	; 13280 <__assert_fail@plt+0x1e9c>
   12dc4:	ldr	r3, [r3]
   12dc8:	ldr	r1, [fp, #-20]	; 0xffffffec
   12dcc:	mov	r0, r3
   12dd0:	bl	21a3c <__assert_fail@plt+0x10658>
   12dd4:	mov	r3, r1
   12dd8:	mov	r2, r3
   12ddc:	ldr	r3, [fp, #-20]	; 0xffffffec
   12de0:	sub	r2, r3, r2
   12de4:	ldr	r3, [pc, #1172]	; 13280 <__assert_fail@plt+0x1e9c>
   12de8:	ldr	r3, [r3]
   12dec:	add	r3, r2, r3
   12df0:	ldr	r2, [pc, #1164]	; 13284 <__assert_fail@plt+0x1ea0>
   12df4:	str	r3, [r2]
   12df8:	b	12e10 <__assert_fail@plt+0x1a2c>
   12dfc:	ldr	r3, [pc, #1148]	; 13280 <__assert_fail@plt+0x1e9c>
   12e00:	ldr	r3, [r3]
   12e04:	add	r3, r3, #1
   12e08:	ldr	r2, [pc, #1140]	; 13284 <__assert_fail@plt+0x1ea0>
   12e0c:	str	r3, [r2]
   12e10:	ldr	r3, [pc, #1060]	; 1323c <__assert_fail@plt+0x1e58>
   12e14:	ldrb	r3, [r3]
   12e18:	cmp	r3, #0
   12e1c:	beq	12e2c <__assert_fail@plt+0x1a48>
   12e20:	ldr	r3, [pc, #1116]	; 13284 <__assert_fail@plt+0x1ea0>
   12e24:	ldr	r3, [r3]
   12e28:	str	r3, [fp, #-16]
   12e2c:	ldr	r3, [pc, #1068]	; 13260 <__assert_fail@plt+0x1e7c>
   12e30:	ldr	r3, [r3]
   12e34:	cmp	r3, #0
   12e38:	bge	12ef8 <__assert_fail@plt+0x1b14>
   12e3c:	ldr	r3, [pc, #1020]	; 13240 <__assert_fail@plt+0x1e5c>
   12e40:	ldr	r3, [r3]
   12e44:	sub	r3, r3, #1
   12e48:	cmp	r3, #0
   12e4c:	bge	12e88 <__assert_fail@plt+0x1aa4>
   12e50:	ldr	r3, [pc, #1000]	; 13240 <__assert_fail@plt+0x1e5c>
   12e54:	ldr	r3, [r3]
   12e58:	sub	r4, r3, #1
   12e5c:	ldr	r3, [pc, #1020]	; 13260 <__assert_fail@plt+0x1e7c>
   12e60:	ldr	r3, [r3]
   12e64:	mov	r1, r3
   12e68:	mvn	r0, #-2147483648	; 0x80000000
   12e6c:	bl	2181c <__assert_fail@plt+0x10438>
   12e70:	mov	r3, r0
   12e74:	cmp	r4, r3
   12e78:	movlt	r3, #1
   12e7c:	movge	r3, #0
   12e80:	uxtb	r3, r3
   12e84:	b	12fc8 <__assert_fail@plt+0x1be4>
   12e88:	ldr	r3, [pc, #976]	; 13260 <__assert_fail@plt+0x1e7c>
   12e8c:	ldr	r3, [r3]
   12e90:	cmn	r3, #1
   12e94:	bne	12ebc <__assert_fail@plt+0x1ad8>
   12e98:	ldr	r3, [pc, #928]	; 13240 <__assert_fail@plt+0x1e5c>
   12e9c:	ldr	r3, [r3]
   12ea0:	sub	r3, r3, #1
   12ea4:	add	r3, r3, #-2147483648	; 0x80000000
   12ea8:	cmp	r3, #0
   12eac:	movgt	r3, #1
   12eb0:	movle	r3, #0
   12eb4:	uxtb	r3, r3
   12eb8:	b	12fc8 <__assert_fail@plt+0x1be4>
   12ebc:	ldr	r3, [pc, #924]	; 13260 <__assert_fail@plt+0x1e7c>
   12ec0:	ldr	r3, [r3]
   12ec4:	mov	r1, r3
   12ec8:	mov	r0, #-2147483648	; 0x80000000
   12ecc:	bl	2181c <__assert_fail@plt+0x10438>
   12ed0:	mov	r3, r0
   12ed4:	mov	r2, r3
   12ed8:	ldr	r3, [pc, #864]	; 13240 <__assert_fail@plt+0x1e5c>
   12edc:	ldr	r3, [r3]
   12ee0:	sub	r3, r3, #1
   12ee4:	cmp	r2, r3
   12ee8:	movlt	r3, #1
   12eec:	movge	r3, #0
   12ef0:	uxtb	r3, r3
   12ef4:	b	12fc8 <__assert_fail@plt+0x1be4>
   12ef8:	ldr	r3, [pc, #864]	; 13260 <__assert_fail@plt+0x1e7c>
   12efc:	ldr	r3, [r3]
   12f00:	cmp	r3, #0
   12f04:	beq	12fc4 <__assert_fail@plt+0x1be0>
   12f08:	ldr	r3, [pc, #816]	; 13240 <__assert_fail@plt+0x1e5c>
   12f0c:	ldr	r3, [r3]
   12f10:	sub	r3, r3, #1
   12f14:	cmp	r3, #0
   12f18:	bge	12f88 <__assert_fail@plt+0x1ba4>
   12f1c:	ldr	r3, [pc, #796]	; 13240 <__assert_fail@plt+0x1e5c>
   12f20:	ldr	r3, [r3]
   12f24:	cmp	r3, #0
   12f28:	bne	12f4c <__assert_fail@plt+0x1b68>
   12f2c:	ldr	r3, [pc, #812]	; 13260 <__assert_fail@plt+0x1e7c>
   12f30:	ldr	r3, [r3]
   12f34:	add	r3, r3, #-2147483648	; 0x80000000
   12f38:	cmp	r3, #0
   12f3c:	movgt	r3, #1
   12f40:	movle	r3, #0
   12f44:	uxtb	r3, r3
   12f48:	b	12fc8 <__assert_fail@plt+0x1be4>
   12f4c:	ldr	r3, [pc, #748]	; 13240 <__assert_fail@plt+0x1e5c>
   12f50:	ldr	r3, [r3]
   12f54:	sub	r3, r3, #1
   12f58:	mov	r1, r3
   12f5c:	mov	r0, #-2147483648	; 0x80000000
   12f60:	bl	2181c <__assert_fail@plt+0x10438>
   12f64:	mov	r3, r0
   12f68:	mov	r2, r3
   12f6c:	ldr	r3, [pc, #748]	; 13260 <__assert_fail@plt+0x1e7c>
   12f70:	ldr	r3, [r3]
   12f74:	cmp	r2, r3
   12f78:	movlt	r3, #1
   12f7c:	movge	r3, #0
   12f80:	uxtb	r3, r3
   12f84:	b	12fc8 <__assert_fail@plt+0x1be4>
   12f88:	ldr	r3, [pc, #720]	; 13260 <__assert_fail@plt+0x1e7c>
   12f8c:	ldr	r3, [r3]
   12f90:	mov	r1, r3
   12f94:	mvn	r0, #-2147483648	; 0x80000000
   12f98:	bl	2181c <__assert_fail@plt+0x10438>
   12f9c:	mov	r3, r0
   12fa0:	mov	r2, r3
   12fa4:	ldr	r3, [pc, #660]	; 13240 <__assert_fail@plt+0x1e5c>
   12fa8:	ldr	r3, [r3]
   12fac:	sub	r3, r3, #1
   12fb0:	cmp	r2, r3
   12fb4:	movlt	r3, #1
   12fb8:	movge	r3, #0
   12fbc:	uxtb	r3, r3
   12fc0:	b	12fc8 <__assert_fail@plt+0x1be4>
   12fc4:	mov	r3, #0
   12fc8:	cmp	r3, #0
   12fcc:	beq	12ff8 <__assert_fail@plt+0x1c14>
   12fd0:	ldr	r3, [pc, #616]	; 13240 <__assert_fail@plt+0x1e5c>
   12fd4:	ldr	r3, [r3]
   12fd8:	sub	r3, r3, #1
   12fdc:	mov	r2, r3
   12fe0:	ldr	r3, [pc, #632]	; 13260 <__assert_fail@plt+0x1e7c>
   12fe4:	ldr	r3, [r3]
   12fe8:	mul	r3, r3, r2
   12fec:	str	r3, [fp, #-24]	; 0xffffffe8
   12ff0:	mov	r3, #1
   12ff4:	b	1301c <__assert_fail@plt+0x1c38>
   12ff8:	ldr	r3, [pc, #576]	; 13240 <__assert_fail@plt+0x1e5c>
   12ffc:	ldr	r3, [r3]
   13000:	sub	r3, r3, #1
   13004:	mov	r2, r3
   13008:	ldr	r3, [pc, #592]	; 13260 <__assert_fail@plt+0x1e7c>
   1300c:	ldr	r3, [r3]
   13010:	mul	r3, r3, r2
   13014:	str	r3, [fp, #-24]	; 0xffffffe8
   13018:	mov	r3, #0
   1301c:	cmp	r3, #0
   13020:	beq	1302c <__assert_fail@plt+0x1c48>
   13024:	mvn	r3, #-2147483648	; 0x80000000
   13028:	str	r3, [fp, #-24]	; 0xffffffe8
   1302c:	ldr	r3, [pc, #596]	; 13288 <__assert_fail@plt+0x1ea4>
   13030:	ldr	r2, [r3]
   13034:	ldr	r3, [fp, #-16]
   13038:	sub	r3, r2, r3
   1303c:	mvn	r3, r3
   13040:	lsr	r3, r3, #31
   13044:	uxtb	r2, r3
   13048:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1304c:	lsr	r3, r3, #31
   13050:	uxtb	r3, r3
   13054:	eor	r3, r3, r2
   13058:	uxtb	r3, r3
   1305c:	cmp	r3, #0
   13060:	beq	1306c <__assert_fail@plt+0x1c88>
   13064:	mov	r3, #0
   13068:	b	130d8 <__assert_fail@plt+0x1cf4>
   1306c:	ldr	r3, [pc, #532]	; 13288 <__assert_fail@plt+0x1ea4>
   13070:	ldr	r2, [r3]
   13074:	ldr	r3, [fp, #-16]
   13078:	sub	r3, r2, r3
   1307c:	cmp	r3, #0
   13080:	bge	130b0 <__assert_fail@plt+0x1ccc>
   13084:	ldr	r3, [pc, #508]	; 13288 <__assert_fail@plt+0x1ea4>
   13088:	ldr	r2, [r3]
   1308c:	ldr	r3, [fp, #-16]
   13090:	sub	r3, r2, r3
   13094:	add	r2, r3, #-2147483648	; 0x80000000
   13098:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1309c:	cmp	r2, r3
   130a0:	movlt	r3, #1
   130a4:	movge	r3, #0
   130a8:	uxtb	r3, r3
   130ac:	b	130d8 <__assert_fail@plt+0x1cf4>
   130b0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   130b4:	sub	r2, r3, #-2147483647	; 0x80000001
   130b8:	ldr	r3, [pc, #456]	; 13288 <__assert_fail@plt+0x1ea4>
   130bc:	ldr	r1, [r3]
   130c0:	ldr	r3, [fp, #-16]
   130c4:	sub	r3, r1, r3
   130c8:	cmp	r2, r3
   130cc:	movlt	r3, #1
   130d0:	movge	r3, #0
   130d4:	uxtb	r3, r3
   130d8:	cmp	r3, #0
   130dc:	beq	13108 <__assert_fail@plt+0x1d24>
   130e0:	ldr	r3, [pc, #416]	; 13288 <__assert_fail@plt+0x1ea4>
   130e4:	ldr	r2, [r3]
   130e8:	ldr	r3, [fp, #-16]
   130ec:	sub	r3, r2, r3
   130f0:	mov	r2, r3
   130f4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   130f8:	sub	r3, r2, r3
   130fc:	str	r3, [fp, #-28]	; 0xffffffe4
   13100:	mov	r3, #1
   13104:	b	1312c <__assert_fail@plt+0x1d48>
   13108:	ldr	r3, [pc, #376]	; 13288 <__assert_fail@plt+0x1ea4>
   1310c:	ldr	r2, [r3]
   13110:	ldr	r3, [fp, #-16]
   13114:	sub	r3, r2, r3
   13118:	mov	r2, r3
   1311c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   13120:	sub	r3, r2, r3
   13124:	str	r3, [fp, #-28]	; 0xffffffe4
   13128:	mov	r3, #0
   1312c:	cmp	r3, #0
   13130:	beq	1313c <__assert_fail@plt+0x1d58>
   13134:	mov	r3, #0
   13138:	str	r3, [fp, #-28]	; 0xffffffe4
   1313c:	ldr	r2, [fp, #-28]	; 0xffffffe4
   13140:	ldr	r3, [pc, #248]	; 13240 <__assert_fail@plt+0x1e5c>
   13144:	ldr	r3, [r3]
   13148:	mov	r1, r3
   1314c:	mov	r0, r2
   13150:	bl	2181c <__assert_fail@plt+0x10438>
   13154:	mov	r3, r0
   13158:	mov	r2, r3
   1315c:	ldr	r3, [pc, #296]	; 1328c <__assert_fail@plt+0x1ea8>
   13160:	str	r2, [r3]
   13164:	ldr	r3, [pc, #288]	; 1328c <__assert_fail@plt+0x1ea8>
   13168:	ldr	r3, [r3]
   1316c:	cmp	r3, #0
   13170:	bgt	13190 <__assert_fail@plt+0x1dac>
   13174:	ldr	r0, [pc, #276]	; 13290 <__assert_fail@plt+0x1eac>
   13178:	bl	11288 <gettext@plt>
   1317c:	mov	r3, r0
   13180:	mov	r2, r3
   13184:	mov	r1, #0
   13188:	mov	r0, #1
   1318c:	bl	11210 <error@plt>
   13190:	ldr	r3, [pc, #216]	; 13270 <__assert_fail@plt+0x1e8c>
   13194:	ldrb	r3, [r3]
   13198:	cmp	r3, #0
   1319c:	beq	131e0 <__assert_fail@plt+0x1dfc>
   131a0:	ldr	r3, [pc, #236]	; 13294 <__assert_fail@plt+0x1eb0>
   131a4:	ldr	r3, [r3]
   131a8:	mov	r0, r3
   131ac:	bl	17130 <__assert_fail@plt+0x5d4c>
   131b0:	ldr	r3, [pc, #200]	; 13280 <__assert_fail@plt+0x1e9c>
   131b4:	ldr	r3, [r3]
   131b8:	cmp	r3, #11
   131bc:	movcs	r3, r3
   131c0:	movcc	r3, #11
   131c4:	add	r3, r3, #1
   131c8:	mov	r0, r3
   131cc:	bl	1df08 <__assert_fail@plt+0xcb24>
   131d0:	mov	r3, r0
   131d4:	mov	r2, r3
   131d8:	ldr	r3, [pc, #180]	; 13294 <__assert_fail@plt+0x1eb0>
   131dc:	str	r2, [r3]
   131e0:	ldr	r3, [pc, #176]	; 13298 <__assert_fail@plt+0x1eb4>
   131e4:	ldr	r3, [r3]
   131e8:	mov	r0, r3
   131ec:	bl	17130 <__assert_fail@plt+0x5d4c>
   131f0:	ldr	r3, [pc, #164]	; 1329c <__assert_fail@plt+0x1eb8>
   131f4:	ldr	r3, [r3]
   131f8:	cmp	r3, #8
   131fc:	movge	r3, r3
   13200:	movlt	r3, #8
   13204:	mov	r0, r3
   13208:	bl	1df08 <__assert_fail@plt+0xcb24>
   1320c:	mov	r3, r0
   13210:	mov	r2, r3
   13214:	ldr	r3, [pc, #124]	; 13298 <__assert_fail@plt+0x1eb4>
   13218:	str	r2, [r3]
   1321c:	nop			; (mov r0, r0)
   13220:	sub	sp, fp, #8
   13224:	pop	{r4, fp, pc}
   13228:	andeq	r4, r3, r4, asr #2
   1322c:	andeq	r4, r3, ip, lsl r2
   13230:	andeq	r4, r3, r0, asr #2
   13234:	andeq	r4, r3, r5, lsl r2
   13238:	andeq	r4, r3, sl, ror #4
   1323c:	andeq	r4, r3, r0, lsl r2
   13240:	andeq	r4, r3, ip, asr r1
   13244:	andeq	r4, r3, r1, asr #2
   13248:	andeq	r4, r3, fp, lsl r2
   1324c:	andeq	r4, r3, r1, ror r2
   13250:	andeq	r4, r3, r1, lsr #4
   13254:	andeq	r4, r3, r4, lsl #3
   13258:	andeq	r4, r3, ip, ror r1
   1325c:	andeq	r4, r3, r0, lsl #3
   13260:	andeq	r4, r3, r4, ror r2
   13264:	andeq	r4, r3, r0, lsr #4
   13268:	andeq	r4, r3, r8, lsr #4
   1326c:	andeq	r4, r3, r9, lsr #4
   13270:	andeq	r4, r3, ip, asr r2
   13274:	andeq	r4, r3, r4, ror r1
   13278:	andeq	r4, r3, ip, ror #2
   1327c:	andeq	r4, r3, r8, ror #2
   13280:	andeq	r4, r3, r8, ror r1
   13284:	andeq	r4, r3, r0, ror #4
   13288:	andeq	r4, r3, r8, asr #2
   1328c:	andeq	r4, r3, r4, lsr #4
   13290:	andeq	r2, r2, r8, lsr #10
   13294:	andeq	r4, r3, r4, ror #4
   13298:	muleq	r3, ip, r2
   1329c:	andeq	r4, r3, r0, asr r1
   132a0:	push	{r4, fp, lr}
   132a4:	add	fp, sp, #8
   132a8:	sub	sp, sp, #36	; 0x24
   132ac:	str	r0, [fp, #-40]	; 0xffffffd8
   132b0:	str	r1, [fp, #-44]	; 0xffffffd4
   132b4:	ldr	r3, [pc, #680]	; 13564 <__assert_fail@plt+0x2180>
   132b8:	mov	r2, #0
   132bc:	str	r2, [r3]
   132c0:	ldr	r3, [pc, #672]	; 13568 <__assert_fail@plt+0x2184>
   132c4:	ldr	r3, [r3]
   132c8:	mov	r0, r3
   132cc:	bl	17130 <__assert_fail@plt+0x5d4c>
   132d0:	ldr	r3, [pc, #660]	; 1356c <__assert_fail@plt+0x2188>
   132d4:	ldr	r3, [r3]
   132d8:	mov	r1, #40	; 0x28
   132dc:	mov	r0, r3
   132e0:	bl	1e0e4 <__assert_fail@plt+0xcd00>
   132e4:	mov	r3, r0
   132e8:	mov	r2, r3
   132ec:	ldr	r3, [pc, #628]	; 13568 <__assert_fail@plt+0x2184>
   132f0:	str	r2, [r3]
   132f4:	ldr	r3, [pc, #628]	; 13570 <__assert_fail@plt+0x218c>
   132f8:	ldrb	r3, [r3]
   132fc:	cmp	r3, #0
   13300:	beq	133b8 <__assert_fail@plt+0x1fd4>
   13304:	ldr	r3, [fp, #-40]	; 0xffffffd8
   13308:	str	r3, [fp, #-20]	; 0xffffffec
   1330c:	ldr	r3, [pc, #596]	; 13568 <__assert_fail@plt+0x2184>
   13310:	ldr	r3, [r3]
   13314:	str	r3, [fp, #-16]
   13318:	b	1337c <__assert_fail@plt+0x1f98>
   1331c:	ldr	r3, [fp, #-44]	; 0xffffffd4
   13320:	ldr	r3, [r3]
   13324:	ldr	r1, [fp, #-16]
   13328:	mov	r0, r3
   1332c:	bl	13864 <__assert_fail@plt+0x2480>
   13330:	mov	r3, r0
   13334:	eor	r3, r3, #1
   13338:	uxtb	r3, r3
   1333c:	cmp	r3, #0
   13340:	beq	13364 <__assert_fail@plt+0x1f80>
   13344:	ldr	r3, [fp, #-16]
   13348:	sub	r3, r3, #40	; 0x28
   1334c:	str	r3, [fp, #-16]
   13350:	ldr	r3, [pc, #532]	; 1356c <__assert_fail@plt+0x2188>
   13354:	ldr	r3, [r3]
   13358:	sub	r3, r3, #1
   1335c:	ldr	r2, [pc, #520]	; 1356c <__assert_fail@plt+0x2188>
   13360:	str	r3, [r2]
   13364:	ldr	r3, [fp, #-16]
   13368:	add	r3, r3, #40	; 0x28
   1336c:	str	r3, [fp, #-16]
   13370:	ldr	r3, [fp, #-44]	; 0xffffffd4
   13374:	add	r3, r3, #4
   13378:	str	r3, [fp, #-44]	; 0xffffffd4
   1337c:	ldr	r3, [fp, #-20]	; 0xffffffec
   13380:	sub	r2, r3, #1
   13384:	str	r2, [fp, #-20]	; 0xffffffec
   13388:	cmp	r3, #0
   1338c:	bne	1331c <__assert_fail@plt+0x1f38>
   13390:	ldr	r3, [pc, #468]	; 1356c <__assert_fail@plt+0x2188>
   13394:	ldr	r3, [r3]
   13398:	cmp	r3, #0
   1339c:	bne	133a8 <__assert_fail@plt+0x1fc4>
   133a0:	mov	r3, #0
   133a4:	b	13558 <__assert_fail@plt+0x2174>
   133a8:	mvn	r1, #0
   133ac:	ldr	r0, [pc, #448]	; 13574 <__assert_fail@plt+0x2190>
   133b0:	bl	13e58 <__assert_fail@plt+0x2a74>
   133b4:	b	13544 <__assert_fail@plt+0x2160>
   133b8:	ldr	r3, [pc, #424]	; 13568 <__assert_fail@plt+0x2184>
   133bc:	ldr	r3, [r3]
   133c0:	str	r3, [fp, #-16]
   133c4:	ldr	r3, [fp, #-40]	; 0xffffffd8
   133c8:	cmp	r3, #0
   133cc:	ble	13438 <__assert_fail@plt+0x2054>
   133d0:	ldr	r3, [fp, #-44]	; 0xffffffd4
   133d4:	ldr	r3, [r3]
   133d8:	ldr	r1, [fp, #-16]
   133dc:	mov	r0, r3
   133e0:	bl	13864 <__assert_fail@plt+0x2480>
   133e4:	mov	r3, r0
   133e8:	eor	r3, r3, #1
   133ec:	uxtb	r3, r3
   133f0:	cmp	r3, #0
   133f4:	beq	13400 <__assert_fail@plt+0x201c>
   133f8:	mov	r3, #0
   133fc:	b	13558 <__assert_fail@plt+0x2174>
   13400:	ldr	r3, [fp, #-44]	; 0xffffffd4
   13404:	ldr	r4, [r3]
   13408:	ldr	r3, [fp, #-16]
   1340c:	ldr	r3, [r3]
   13410:	mov	r0, r3
   13414:	bl	112f4 <fileno@plt>
   13418:	mov	r3, r0
   1341c:	mov	r1, r3
   13420:	mov	r0, r4
   13424:	bl	13e58 <__assert_fail@plt+0x2a74>
   13428:	ldr	r3, [fp, #-16]
   1342c:	mov	r2, #0
   13430:	str	r2, [r3, #24]
   13434:	b	134ac <__assert_fail@plt+0x20c8>
   13438:	ldr	r0, [pc, #312]	; 13578 <__assert_fail@plt+0x2194>
   1343c:	bl	11288 <gettext@plt>
   13440:	mov	r2, r0
   13444:	ldr	r3, [fp, #-16]
   13448:	str	r2, [r3, #4]
   1344c:	ldr	r3, [pc, #296]	; 1357c <__assert_fail@plt+0x2198>
   13450:	ldr	r2, [r3]
   13454:	ldr	r3, [fp, #-16]
   13458:	str	r2, [r3]
   1345c:	ldr	r3, [pc, #284]	; 13580 <__assert_fail@plt+0x219c>
   13460:	mov	r2, #1
   13464:	strb	r2, [r3]
   13468:	ldr	r3, [fp, #-16]
   1346c:	mov	r2, #0
   13470:	str	r2, [r3, #8]
   13474:	ldr	r3, [fp, #-16]
   13478:	mov	r2, #0
   1347c:	strb	r2, [r3, #37]	; 0x25
   13480:	ldr	r3, [pc, #220]	; 13564 <__assert_fail@plt+0x2180>
   13484:	ldr	r3, [r3]
   13488:	add	r3, r3, #1
   1348c:	ldr	r2, [pc, #208]	; 13564 <__assert_fail@plt+0x2180>
   13490:	str	r3, [r2]
   13494:	mvn	r1, #0
   13498:	ldr	r0, [pc, #212]	; 13574 <__assert_fail@plt+0x2190>
   1349c:	bl	13e58 <__assert_fail@plt+0x2a74>
   134a0:	ldr	r3, [fp, #-16]
   134a4:	mov	r2, #0
   134a8:	str	r2, [r3, #24]
   134ac:	ldr	r3, [fp, #-16]
   134b0:	ldr	r3, [r3, #4]
   134b4:	str	r3, [fp, #-28]	; 0xffffffe4
   134b8:	ldr	r3, [fp, #-16]
   134bc:	ldr	r3, [r3]
   134c0:	str	r3, [fp, #-32]	; 0xffffffe0
   134c4:	ldr	r3, [pc, #160]	; 1356c <__assert_fail@plt+0x2188>
   134c8:	ldr	r3, [r3]
   134cc:	sub	r3, r3, #1
   134d0:	str	r3, [fp, #-24]	; 0xffffffe8
   134d4:	ldr	r3, [fp, #-16]
   134d8:	add	r3, r3, #40	; 0x28
   134dc:	str	r3, [fp, #-16]
   134e0:	b	13538 <__assert_fail@plt+0x2154>
   134e4:	ldr	r3, [fp, #-16]
   134e8:	ldr	r2, [fp, #-28]	; 0xffffffe4
   134ec:	str	r2, [r3, #4]
   134f0:	ldr	r3, [fp, #-16]
   134f4:	ldr	r2, [fp, #-32]	; 0xffffffe0
   134f8:	str	r2, [r3]
   134fc:	ldr	r3, [fp, #-16]
   13500:	mov	r2, #0
   13504:	str	r2, [r3, #8]
   13508:	ldr	r3, [fp, #-16]
   1350c:	mov	r2, #0
   13510:	strb	r2, [r3, #37]	; 0x25
   13514:	ldr	r3, [fp, #-16]
   13518:	mov	r2, #0
   1351c:	str	r2, [r3, #24]
   13520:	ldr	r3, [fp, #-24]	; 0xffffffe8
   13524:	sub	r3, r3, #1
   13528:	str	r3, [fp, #-24]	; 0xffffffe8
   1352c:	ldr	r3, [fp, #-16]
   13530:	add	r3, r3, #40	; 0x28
   13534:	str	r3, [fp, #-16]
   13538:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1353c:	cmp	r3, #0
   13540:	bne	134e4 <__assert_fail@plt+0x2100>
   13544:	ldr	r3, [pc, #24]	; 13564 <__assert_fail@plt+0x2180>
   13548:	ldr	r3, [r3]
   1354c:	ldr	r2, [pc, #48]	; 13584 <__assert_fail@plt+0x21a0>
   13550:	str	r3, [r2]
   13554:	mov	r3, #1
   13558:	mov	r0, r3
   1355c:	sub	sp, fp, #8
   13560:	pop	{r4, fp, pc}
   13564:	andeq	r4, r3, ip, ror #4
   13568:	strdeq	r4, [r3], -r8
   1356c:	andeq	r4, r3, ip, asr r1
   13570:	andeq	r4, r3, r0, lsl r2
   13574:			; <UNDEFINED> instruction: 0x00021eb8
   13578:	ldrdeq	r2, [r2], -r8
   1357c:	andeq	r4, r3, r8, ror #3
   13580:	andeq	r4, r3, r9, lsl r2
   13584:	andeq	r4, r3, r8, asr #4
   13588:	push	{fp}		; (str fp, [sp, #-4]!)
   1358c:	add	fp, sp, #0
   13590:	sub	sp, sp, #20
   13594:	ldr	r3, [pc, #652]	; 13828 <__assert_fail@plt+0x2444>
   13598:	ldr	r3, [r3]
   1359c:	str	r3, [fp, #-12]
   135a0:	ldr	r3, [pc, #644]	; 1382c <__assert_fail@plt+0x2448>
   135a4:	ldrb	r3, [r3]
   135a8:	eor	r3, r3, #1
   135ac:	uxtb	r3, r3
   135b0:	cmp	r3, #0
   135b4:	beq	135c4 <__assert_fail@plt+0x21e0>
   135b8:	mov	r3, #0
   135bc:	str	r3, [fp, #-16]
   135c0:	b	1361c <__assert_fail@plt+0x2238>
   135c4:	ldr	r3, [pc, #612]	; 13830 <__assert_fail@plt+0x244c>
   135c8:	ldrb	r3, [r3]
   135cc:	cmp	r3, #0
   135d0:	beq	13608 <__assert_fail@plt+0x2224>
   135d4:	ldr	r3, [pc, #600]	; 13834 <__assert_fail@plt+0x2450>
   135d8:	ldrb	r3, [r3]
   135dc:	cmp	r3, #0
   135e0:	beq	13608 <__assert_fail@plt+0x2224>
   135e4:	ldr	r3, [pc, #588]	; 13838 <__assert_fail@plt+0x2454>
   135e8:	ldr	r2, [r3]
   135ec:	ldr	r3, [fp, #-12]
   135f0:	add	r2, r2, r3
   135f4:	ldr	r3, [pc, #576]	; 1383c <__assert_fail@plt+0x2458>
   135f8:	ldr	r3, [r3]
   135fc:	add	r3, r2, r3
   13600:	str	r3, [fp, #-16]
   13604:	b	1361c <__assert_fail@plt+0x2238>
   13608:	ldr	r3, [pc, #552]	; 13838 <__assert_fail@plt+0x2454>
   1360c:	ldr	r3, [r3]
   13610:	ldr	r2, [fp, #-12]
   13614:	add	r3, r2, r3
   13618:	str	r3, [fp, #-16]
   1361c:	ldr	r3, [pc, #540]	; 13840 <__assert_fail@plt+0x245c>
   13620:	ldr	r3, [r3]
   13624:	ldr	r2, [fp, #-12]
   13628:	add	r3, r2, r3
   1362c:	str	r3, [fp, #-12]
   13630:	ldr	r3, [pc, #524]	; 13844 <__assert_fail@plt+0x2460>
   13634:	ldr	r3, [r3]
   13638:	str	r3, [fp, #-20]	; 0xffffffec
   1363c:	mov	r3, #1
   13640:	str	r3, [fp, #-8]
   13644:	b	13754 <__assert_fail@plt+0x2370>
   13648:	ldr	r3, [pc, #504]	; 13848 <__assert_fail@plt+0x2464>
   1364c:	ldrb	r3, [r3]
   13650:	cmp	r3, #0
   13654:	beq	13674 <__assert_fail@plt+0x2290>
   13658:	ldr	r3, [fp, #-20]	; 0xffffffec
   1365c:	ldr	r2, [pc, #488]	; 1384c <__assert_fail@plt+0x2468>
   13660:	str	r2, [r3, #16]
   13664:	ldr	r3, [fp, #-20]	; 0xffffffec
   13668:	ldr	r2, [pc, #480]	; 13850 <__assert_fail@plt+0x246c>
   1366c:	str	r2, [r3, #12]
   13670:	b	1368c <__assert_fail@plt+0x22a8>
   13674:	ldr	r3, [fp, #-20]	; 0xffffffec
   13678:	ldr	r2, [pc, #468]	; 13854 <__assert_fail@plt+0x2470>
   1367c:	str	r2, [r3, #16]
   13680:	ldr	r3, [fp, #-20]	; 0xffffffec
   13684:	ldr	r2, [pc, #460]	; 13858 <__assert_fail@plt+0x2474>
   13688:	str	r2, [r3, #12]
   1368c:	ldr	r3, [pc, #416]	; 13834 <__assert_fail@plt+0x2450>
   13690:	ldrb	r3, [r3]
   13694:	cmp	r3, #0
   13698:	beq	136c8 <__assert_fail@plt+0x22e4>
   1369c:	ldr	r3, [pc, #396]	; 13830 <__assert_fail@plt+0x244c>
   136a0:	ldrb	r3, [r3]
   136a4:	eor	r3, r3, #1
   136a8:	uxtb	r3, r3
   136ac:	cmp	r3, #0
   136b0:	bne	136c0 <__assert_fail@plt+0x22dc>
   136b4:	ldr	r3, [fp, #-8]
   136b8:	cmp	r3, #1
   136bc:	bne	136c8 <__assert_fail@plt+0x22e4>
   136c0:	mov	r3, #1
   136c4:	b	136cc <__assert_fail@plt+0x22e8>
   136c8:	mov	r3, #0
   136cc:	and	r3, r3, #1
   136d0:	uxtb	r2, r3
   136d4:	ldr	r3, [fp, #-20]	; 0xffffffec
   136d8:	strb	r2, [r3, #36]	; 0x24
   136dc:	ldr	r3, [fp, #-20]	; 0xffffffec
   136e0:	ldr	r2, [fp, #-12]
   136e4:	str	r2, [r3, #32]
   136e8:	ldr	r3, [pc, #316]	; 1382c <__assert_fail@plt+0x2448>
   136ec:	ldrb	r3, [r3]
   136f0:	eor	r3, r3, #1
   136f4:	uxtb	r3, r3
   136f8:	cmp	r3, #0
   136fc:	beq	13714 <__assert_fail@plt+0x2330>
   13700:	mov	r3, #0
   13704:	str	r3, [fp, #-12]
   13708:	mov	r3, #0
   1370c:	str	r3, [fp, #-16]
   13710:	b	1373c <__assert_fail@plt+0x2358>
   13714:	ldr	r3, [pc, #292]	; 13840 <__assert_fail@plt+0x245c>
   13718:	ldr	r3, [r3]
   1371c:	ldr	r2, [fp, #-16]
   13720:	add	r3, r2, r3
   13724:	str	r3, [fp, #-12]
   13728:	ldr	r3, [pc, #264]	; 13838 <__assert_fail@plt+0x2454>
   1372c:	ldr	r3, [r3]
   13730:	ldr	r2, [fp, #-12]
   13734:	add	r3, r2, r3
   13738:	str	r3, [fp, #-16]
   1373c:	ldr	r3, [fp, #-20]	; 0xffffffec
   13740:	add	r3, r3, #40	; 0x28
   13744:	str	r3, [fp, #-20]	; 0xffffffec
   13748:	ldr	r3, [fp, #-8]
   1374c:	add	r3, r3, #1
   13750:	str	r3, [fp, #-8]
   13754:	ldr	r3, [pc, #256]	; 1385c <__assert_fail@plt+0x2478>
   13758:	ldr	r3, [r3]
   1375c:	ldr	r2, [fp, #-8]
   13760:	cmp	r2, r3
   13764:	blt	13648 <__assert_fail@plt+0x2264>
   13768:	ldr	r3, [pc, #216]	; 13848 <__assert_fail@plt+0x2464>
   1376c:	ldrb	r3, [r3]
   13770:	cmp	r3, #0
   13774:	beq	137a4 <__assert_fail@plt+0x23c0>
   13778:	ldr	r3, [pc, #224]	; 13860 <__assert_fail@plt+0x247c>
   1377c:	ldrb	r3, [r3]
   13780:	cmp	r3, #0
   13784:	beq	137a4 <__assert_fail@plt+0x23c0>
   13788:	ldr	r3, [fp, #-20]	; 0xffffffec
   1378c:	ldr	r2, [pc, #184]	; 1384c <__assert_fail@plt+0x2468>
   13790:	str	r2, [r3, #16]
   13794:	ldr	r3, [fp, #-20]	; 0xffffffec
   13798:	ldr	r2, [pc, #176]	; 13850 <__assert_fail@plt+0x246c>
   1379c:	str	r2, [r3, #12]
   137a0:	b	137bc <__assert_fail@plt+0x23d8>
   137a4:	ldr	r3, [fp, #-20]	; 0xffffffec
   137a8:	ldr	r2, [pc, #164]	; 13854 <__assert_fail@plt+0x2470>
   137ac:	str	r2, [r3, #16]
   137b0:	ldr	r3, [fp, #-20]	; 0xffffffec
   137b4:	ldr	r2, [pc, #156]	; 13858 <__assert_fail@plt+0x2474>
   137b8:	str	r2, [r3, #12]
   137bc:	ldr	r3, [pc, #112]	; 13834 <__assert_fail@plt+0x2450>
   137c0:	ldrb	r3, [r3]
   137c4:	cmp	r3, #0
   137c8:	beq	137f8 <__assert_fail@plt+0x2414>
   137cc:	ldr	r3, [pc, #92]	; 13830 <__assert_fail@plt+0x244c>
   137d0:	ldrb	r3, [r3]
   137d4:	eor	r3, r3, #1
   137d8:	uxtb	r3, r3
   137dc:	cmp	r3, #0
   137e0:	bne	137f0 <__assert_fail@plt+0x240c>
   137e4:	ldr	r3, [fp, #-8]
   137e8:	cmp	r3, #1
   137ec:	bne	137f8 <__assert_fail@plt+0x2414>
   137f0:	mov	r3, #1
   137f4:	b	137fc <__assert_fail@plt+0x2418>
   137f8:	mov	r3, #0
   137fc:	and	r3, r3, #1
   13800:	uxtb	r2, r3
   13804:	ldr	r3, [fp, #-20]	; 0xffffffec
   13808:	strb	r2, [r3, #36]	; 0x24
   1380c:	ldr	r3, [fp, #-20]	; 0xffffffec
   13810:	ldr	r2, [fp, #-12]
   13814:	str	r2, [r3, #32]
   13818:	nop			; (mov r0, r0)
   1381c:	add	sp, fp, #0
   13820:	pop	{fp}		; (ldr fp, [sp], #4)
   13824:	bx	lr
   13828:	andeq	r4, r3, r0, lsr r2
   1382c:	andeq	r4, r3, r0, lsr #4
   13830:	andeq	r4, r3, r0, lsl r2
   13834:	andeq	r4, r3, ip, asr r2
   13838:	andeq	r4, r3, r4, lsr #4
   1383c:	andeq	r4, r3, r0, ror #4
   13840:	andeq	r4, r3, r4, ror r2
   13844:	strdeq	r4, [r3], -r8
   13848:	andeq	r4, r3, r1, asr #2
   1384c:	andeq	r5, r1, ip, lsr #32
   13850:	andeq	r6, r1, r4, asr #5
   13854:	andeq	r5, r1, ip, lsr #18
   13858:			; <UNDEFINED> instruction: 0x00015db8
   1385c:	andeq	r4, r3, ip, asr r1
   13860:	andeq	r4, r3, fp, lsl r2
   13864:	push	{r4, fp, lr}
   13868:	add	fp, sp, #8
   1386c:	sub	sp, sp, #12
   13870:	str	r0, [fp, #-16]
   13874:	str	r1, [fp, #-20]	; 0xffffffec
   13878:	ldr	r1, [pc, #292]	; 139a4 <__assert_fail@plt+0x25c0>
   1387c:	ldr	r0, [fp, #-16]
   13880:	bl	110b4 <strcmp@plt>
   13884:	mov	r3, r0
   13888:	cmp	r3, #0
   1388c:	bne	138c4 <__assert_fail@plt+0x24e0>
   13890:	ldr	r0, [pc, #272]	; 139a8 <__assert_fail@plt+0x25c4>
   13894:	bl	11288 <gettext@plt>
   13898:	mov	r2, r0
   1389c:	ldr	r3, [fp, #-20]	; 0xffffffec
   138a0:	str	r2, [r3, #4]
   138a4:	ldr	r3, [pc, #256]	; 139ac <__assert_fail@plt+0x25c8>
   138a8:	ldr	r2, [r3]
   138ac:	ldr	r3, [fp, #-20]	; 0xffffffec
   138b0:	str	r2, [r3]
   138b4:	ldr	r3, [pc, #244]	; 139b0 <__assert_fail@plt+0x25cc>
   138b8:	mov	r2, #1
   138bc:	strb	r2, [r3]
   138c0:	b	138e8 <__assert_fail@plt+0x2504>
   138c4:	ldr	r3, [fp, #-20]	; 0xffffffec
   138c8:	ldr	r2, [fp, #-16]
   138cc:	str	r2, [r3, #4]
   138d0:	ldr	r1, [pc, #220]	; 139b4 <__assert_fail@plt+0x25d0>
   138d4:	ldr	r0, [fp, #-16]
   138d8:	bl	17024 <__assert_fail@plt+0x5c40>
   138dc:	mov	r2, r0
   138e0:	ldr	r3, [fp, #-20]	; 0xffffffec
   138e4:	str	r2, [r3]
   138e8:	ldr	r3, [fp, #-20]	; 0xffffffec
   138ec:	ldr	r3, [r3]
   138f0:	cmp	r3, #0
   138f4:	bne	13954 <__assert_fail@plt+0x2570>
   138f8:	ldr	r3, [pc, #184]	; 139b8 <__assert_fail@plt+0x25d4>
   138fc:	mov	r2, #1
   13900:	strb	r2, [r3]
   13904:	ldr	r3, [pc, #176]	; 139bc <__assert_fail@plt+0x25d8>
   13908:	ldrb	r3, [r3]
   1390c:	eor	r3, r3, #1
   13910:	uxtb	r3, r3
   13914:	cmp	r3, #0
   13918:	beq	1394c <__assert_fail@plt+0x2568>
   1391c:	bl	112d0 <__errno_location@plt>
   13920:	mov	r3, r0
   13924:	ldr	r4, [r3]
   13928:	ldr	r2, [fp, #-16]
   1392c:	mov	r1, #3
   13930:	mov	r0, #0
   13934:	bl	1c914 <__assert_fail@plt+0xb530>
   13938:	mov	r3, r0
   1393c:	ldr	r2, [pc, #124]	; 139c0 <__assert_fail@plt+0x25dc>
   13940:	mov	r1, r4
   13944:	mov	r0, #0
   13948:	bl	11210 <error@plt>
   1394c:	mov	r3, #0
   13950:	b	13998 <__assert_fail@plt+0x25b4>
   13954:	ldr	r3, [fp, #-20]	; 0xffffffec
   13958:	ldr	r3, [r3]
   1395c:	mov	r1, #2
   13960:	mov	r0, r3
   13964:	bl	16e28 <__assert_fail@plt+0x5a44>
   13968:	ldr	r3, [fp, #-20]	; 0xffffffec
   1396c:	mov	r2, #0
   13970:	str	r2, [r3, #8]
   13974:	ldr	r3, [fp, #-20]	; 0xffffffec
   13978:	mov	r2, #0
   1397c:	strb	r2, [r3, #37]	; 0x25
   13980:	ldr	r3, [pc, #60]	; 139c4 <__assert_fail@plt+0x25e0>
   13984:	ldr	r3, [r3]
   13988:	add	r3, r3, #1
   1398c:	ldr	r2, [pc, #48]	; 139c4 <__assert_fail@plt+0x25e0>
   13990:	str	r3, [r2]
   13994:	mov	r3, #1
   13998:	mov	r0, r3
   1399c:	sub	sp, fp, #8
   139a0:	pop	{r4, fp, pc}
   139a4:	andeq	r2, r2, r0, asr #10
   139a8:	ldrdeq	r2, [r2], -r8
   139ac:	andeq	r4, r3, r8, ror #3
   139b0:	andeq	r4, r3, r9, lsl r2
   139b4:	andeq	r2, r2, r4, asr #10
   139b8:	andeq	r4, r3, ip, lsr r2
   139bc:	andeq	r4, r3, r0, ror r2
   139c0:	andeq	r2, r2, r8, asr #10
   139c4:	andeq	r4, r3, ip, ror #4
   139c8:	push	{fp, lr}
   139cc:	add	fp, sp, #4
   139d0:	sub	sp, sp, #24
   139d4:	str	r0, [fp, #-24]	; 0xffffffe8
   139d8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   139dc:	ldr	r3, [r3, #8]
   139e0:	cmp	r3, #3
   139e4:	beq	13b70 <__assert_fail@plt+0x278c>
   139e8:	bl	112d0 <__errno_location@plt>
   139ec:	mov	r3, r0
   139f0:	ldr	r3, [r3]
   139f4:	str	r3, [fp, #-16]
   139f8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   139fc:	ldr	r3, [r3]
   13a00:	mov	r0, r3
   13a04:	bl	111f8 <ferror_unlocked@plt>
   13a08:	mov	r3, r0
   13a0c:	cmp	r3, #0
   13a10:	bne	13a1c <__assert_fail@plt+0x2638>
   13a14:	mov	r3, #0
   13a18:	str	r3, [fp, #-16]
   13a1c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   13a20:	ldr	r3, [r3]
   13a24:	mov	r0, r3
   13a28:	bl	112f4 <fileno@plt>
   13a2c:	mov	r3, r0
   13a30:	cmp	r3, #0
   13a34:	bne	13a4c <__assert_fail@plt+0x2668>
   13a38:	ldr	r3, [fp, #-24]	; 0xffffffe8
   13a3c:	ldr	r3, [r3]
   13a40:	mov	r0, r3
   13a44:	bl	11384 <clearerr_unlocked@plt>
   13a48:	b	13a84 <__assert_fail@plt+0x26a0>
   13a4c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   13a50:	ldr	r3, [r3]
   13a54:	mov	r0, r3
   13a58:	bl	16e84 <__assert_fail@plt+0x5aa0>
   13a5c:	mov	r3, r0
   13a60:	cmp	r3, #0
   13a64:	beq	13a84 <__assert_fail@plt+0x26a0>
   13a68:	ldr	r3, [fp, #-16]
   13a6c:	cmp	r3, #0
   13a70:	bne	13a84 <__assert_fail@plt+0x26a0>
   13a74:	bl	112d0 <__errno_location@plt>
   13a78:	mov	r3, r0
   13a7c:	ldr	r3, [r3]
   13a80:	str	r3, [fp, #-16]
   13a84:	ldr	r3, [fp, #-16]
   13a88:	cmp	r3, #0
   13a8c:	beq	13abc <__assert_fail@plt+0x26d8>
   13a90:	ldr	r3, [fp, #-24]	; 0xffffffe8
   13a94:	ldr	r3, [r3, #4]
   13a98:	mov	r2, r3
   13a9c:	mov	r1, #3
   13aa0:	mov	r0, #0
   13aa4:	bl	1c914 <__assert_fail@plt+0xb530>
   13aa8:	mov	r3, r0
   13aac:	ldr	r2, [pc, #200]	; 13b7c <__assert_fail@plt+0x2798>
   13ab0:	ldr	r1, [fp, #-16]
   13ab4:	mov	r0, #1
   13ab8:	bl	11210 <error@plt>
   13abc:	ldr	r3, [pc, #188]	; 13b80 <__assert_fail@plt+0x279c>
   13ac0:	ldrb	r3, [r3]
   13ac4:	eor	r3, r3, #1
   13ac8:	uxtb	r3, r3
   13acc:	cmp	r3, #0
   13ad0:	beq	13b40 <__assert_fail@plt+0x275c>
   13ad4:	ldr	r3, [pc, #168]	; 13b84 <__assert_fail@plt+0x27a0>
   13ad8:	ldr	r3, [r3]
   13adc:	str	r3, [fp, #-8]
   13ae0:	ldr	r3, [pc, #160]	; 13b88 <__assert_fail@plt+0x27a4>
   13ae4:	ldr	r3, [r3]
   13ae8:	str	r3, [fp, #-12]
   13aec:	b	13b30 <__assert_fail@plt+0x274c>
   13af0:	ldr	r3, [fp, #-8]
   13af4:	mov	r2, #3
   13af8:	str	r2, [r3, #8]
   13afc:	ldr	r3, [fp, #-8]
   13b00:	ldr	r3, [r3, #24]
   13b04:	cmp	r3, #0
   13b08:	bne	13b18 <__assert_fail@plt+0x2734>
   13b0c:	ldr	r3, [fp, #-8]
   13b10:	mov	r2, #0
   13b14:	str	r2, [r3, #28]
   13b18:	ldr	r3, [fp, #-8]
   13b1c:	add	r3, r3, #40	; 0x28
   13b20:	str	r3, [fp, #-8]
   13b24:	ldr	r3, [fp, #-12]
   13b28:	sub	r3, r3, #1
   13b2c:	str	r3, [fp, #-12]
   13b30:	ldr	r3, [fp, #-12]
   13b34:	cmp	r3, #0
   13b38:	bne	13af0 <__assert_fail@plt+0x270c>
   13b3c:	b	13b58 <__assert_fail@plt+0x2774>
   13b40:	ldr	r3, [fp, #-24]	; 0xffffffe8
   13b44:	mov	r2, #3
   13b48:	str	r2, [r3, #8]
   13b4c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   13b50:	mov	r2, #0
   13b54:	str	r2, [r3, #28]
   13b58:	ldr	r3, [pc, #44]	; 13b8c <__assert_fail@plt+0x27a8>
   13b5c:	ldr	r3, [r3]
   13b60:	sub	r3, r3, #1
   13b64:	ldr	r2, [pc, #32]	; 13b8c <__assert_fail@plt+0x27a8>
   13b68:	str	r3, [r2]
   13b6c:	b	13b74 <__assert_fail@plt+0x2790>
   13b70:	nop			; (mov r0, r0)
   13b74:	sub	sp, fp, #4
   13b78:	pop	{fp, pc}
   13b7c:	andeq	r2, r2, r8, asr #10
   13b80:	andeq	r4, r3, r0, lsl r2
   13b84:	strdeq	r4, [r3], -r8
   13b88:	andeq	r4, r3, ip, asr r1
   13b8c:	andeq	r4, r3, r8, asr #4
   13b90:	push	{fp}		; (str fp, [sp, #-4]!)
   13b94:	add	fp, sp, #0
   13b98:	sub	sp, sp, #20
   13b9c:	str	r0, [fp, #-16]
   13ba0:	ldr	r3, [pc, #188]	; 13c64 <__assert_fail@plt+0x2880>
   13ba4:	ldrb	r3, [r3]
   13ba8:	eor	r3, r3, #1
   13bac:	uxtb	r3, r3
   13bb0:	cmp	r3, #0
   13bb4:	beq	13c28 <__assert_fail@plt+0x2844>
   13bb8:	ldr	r3, [pc, #168]	; 13c68 <__assert_fail@plt+0x2884>
   13bbc:	ldr	r3, [r3]
   13bc0:	str	r3, [fp, #-8]
   13bc4:	ldr	r3, [pc, #160]	; 13c6c <__assert_fail@plt+0x2888>
   13bc8:	ldr	r3, [r3]
   13bcc:	str	r3, [fp, #-12]
   13bd0:	b	13c18 <__assert_fail@plt+0x2834>
   13bd4:	ldr	r3, [pc, #148]	; 13c70 <__assert_fail@plt+0x288c>
   13bd8:	ldrb	r3, [r3]
   13bdc:	cmp	r3, #0
   13be0:	beq	13bf4 <__assert_fail@plt+0x2810>
   13be4:	ldr	r3, [fp, #-8]
   13be8:	mov	r2, #1
   13bec:	str	r2, [r3, #8]
   13bf0:	b	13c00 <__assert_fail@plt+0x281c>
   13bf4:	ldr	r3, [fp, #-8]
   13bf8:	mov	r2, #2
   13bfc:	str	r2, [r3, #8]
   13c00:	ldr	r3, [fp, #-8]
   13c04:	add	r3, r3, #40	; 0x28
   13c08:	str	r3, [fp, #-8]
   13c0c:	ldr	r3, [fp, #-12]
   13c10:	sub	r3, r3, #1
   13c14:	str	r3, [fp, #-12]
   13c18:	ldr	r3, [fp, #-12]
   13c1c:	cmp	r3, #0
   13c20:	bne	13bd4 <__assert_fail@plt+0x27f0>
   13c24:	b	13c34 <__assert_fail@plt+0x2850>
   13c28:	ldr	r3, [fp, #-16]
   13c2c:	mov	r2, #2
   13c30:	str	r2, [r3, #8]
   13c34:	ldr	r3, [fp, #-16]
   13c38:	mov	r2, #0
   13c3c:	str	r2, [r3, #28]
   13c40:	ldr	r3, [pc, #44]	; 13c74 <__assert_fail@plt+0x2890>
   13c44:	ldr	r3, [r3]
   13c48:	sub	r3, r3, #1
   13c4c:	ldr	r2, [pc, #32]	; 13c74 <__assert_fail@plt+0x2890>
   13c50:	str	r3, [r2]
   13c54:	nop			; (mov r0, r0)
   13c58:	add	sp, fp, #0
   13c5c:	pop	{fp}		; (ldr fp, [sp], #4)
   13c60:	bx	lr
   13c64:	andeq	r4, r3, r0, lsl r2
   13c68:	strdeq	r4, [r3], -r8
   13c6c:	andeq	r4, r3, ip, asr r1
   13c70:	andeq	r4, r3, r1, asr #2
   13c74:	andeq	r4, r3, r8, asr #4
   13c78:	push	{fp}		; (str fp, [sp, #-4]!)
   13c7c:	add	fp, sp, #0
   13c80:	sub	sp, sp, #12
   13c84:	ldr	r3, [pc, #184]	; 13d44 <__assert_fail@plt+0x2960>
   13c88:	ldr	r3, [r3]
   13c8c:	str	r3, [fp, #-8]
   13c90:	ldr	r3, [pc, #176]	; 13d48 <__assert_fail@plt+0x2964>
   13c94:	ldr	r3, [r3]
   13c98:	str	r3, [fp, #-12]
   13c9c:	b	13ce8 <__assert_fail@plt+0x2904>
   13ca0:	ldr	r3, [fp, #-12]
   13ca4:	ldr	r3, [r3, #8]
   13ca8:	cmp	r3, #2
   13cac:	bne	13cd0 <__assert_fail@plt+0x28ec>
   13cb0:	ldr	r3, [fp, #-12]
   13cb4:	mov	r2, #0
   13cb8:	str	r2, [r3, #8]
   13cbc:	ldr	r3, [pc, #136]	; 13d4c <__assert_fail@plt+0x2968>
   13cc0:	ldr	r3, [r3]
   13cc4:	add	r3, r3, #1
   13cc8:	ldr	r2, [pc, #124]	; 13d4c <__assert_fail@plt+0x2968>
   13ccc:	str	r3, [r2]
   13cd0:	ldr	r3, [fp, #-8]
   13cd4:	sub	r3, r3, #1
   13cd8:	str	r3, [fp, #-8]
   13cdc:	ldr	r3, [fp, #-12]
   13ce0:	add	r3, r3, #40	; 0x28
   13ce4:	str	r3, [fp, #-12]
   13ce8:	ldr	r3, [fp, #-8]
   13cec:	cmp	r3, #0
   13cf0:	bne	13ca0 <__assert_fail@plt+0x28bc>
   13cf4:	ldr	r3, [pc, #84]	; 13d50 <__assert_fail@plt+0x296c>
   13cf8:	ldrb	r3, [r3]
   13cfc:	cmp	r3, #0
   13d00:	beq	13d34 <__assert_fail@plt+0x2950>
   13d04:	ldr	r3, [pc, #60]	; 13d48 <__assert_fail@plt+0x2964>
   13d08:	ldr	r3, [r3]
   13d0c:	ldr	r3, [r3, #8]
   13d10:	cmp	r3, #3
   13d14:	bne	13d28 <__assert_fail@plt+0x2944>
   13d18:	ldr	r3, [pc, #44]	; 13d4c <__assert_fail@plt+0x2968>
   13d1c:	mov	r2, #0
   13d20:	str	r2, [r3]
   13d24:	b	13d34 <__assert_fail@plt+0x2950>
   13d28:	ldr	r3, [pc, #28]	; 13d4c <__assert_fail@plt+0x2968>
   13d2c:	mov	r2, #1
   13d30:	str	r2, [r3]
   13d34:	nop			; (mov r0, r0)
   13d38:	add	sp, fp, #0
   13d3c:	pop	{fp}		; (ldr fp, [sp], #4)
   13d40:	bx	lr
   13d44:	andeq	r4, r3, ip, asr r1
   13d48:	strdeq	r4, [r3], -r8
   13d4c:	andeq	r4, r3, r8, asr #4
   13d50:	andeq	r4, r3, r1, asr #2
   13d54:	push	{fp, lr}
   13d58:	add	fp, sp, #4
   13d5c:	sub	sp, sp, #8
   13d60:	str	r0, [fp, #-8]
   13d64:	str	r1, [fp, #-12]
   13d68:	ldr	r0, [fp, #-8]
   13d6c:	bl	12b54 <__assert_fail@plt+0x1770>
   13d70:	ldr	r1, [fp, #-12]
   13d74:	ldr	r0, [fp, #-8]
   13d78:	bl	132a0 <__assert_fail@plt+0x1ebc>
   13d7c:	mov	r3, r0
   13d80:	eor	r3, r3, #1
   13d84:	uxtb	r3, r3
   13d88:	cmp	r3, #0
   13d8c:	bne	13e30 <__assert_fail@plt+0x2a4c>
   13d90:	ldr	r3, [pc, #172]	; 13e44 <__assert_fail@plt+0x2a60>
   13d94:	ldrb	r3, [r3]
   13d98:	cmp	r3, #0
   13d9c:	beq	13da4 <__assert_fail@plt+0x29c0>
   13da0:	bl	147b8 <__assert_fail@plt+0x33d4>
   13da4:	ldr	r3, [pc, #156]	; 13e48 <__assert_fail@plt+0x2a64>
   13da8:	ldrd	r2, [r3]
   13dac:	cmp	r3, #0
   13db0:	cmpeq	r2, #1
   13db4:	bls	13df4 <__assert_fail@plt+0x2a10>
   13db8:	ldr	r3, [pc, #136]	; 13e48 <__assert_fail@plt+0x2a64>
   13dbc:	ldrd	r2, [r3]
   13dc0:	mov	r0, r2
   13dc4:	mov	r1, r3
   13dc8:	bl	15a14 <__assert_fail@plt+0x4630>
   13dcc:	mov	r3, r0
   13dd0:	eor	r3, r3, #1
   13dd4:	uxtb	r3, r3
   13dd8:	cmp	r3, #0
   13ddc:	bne	13e38 <__assert_fail@plt+0x2a54>
   13de0:	ldr	r3, [pc, #96]	; 13e48 <__assert_fail@plt+0x2a64>
   13de4:	ldrd	r2, [r3]
   13de8:	ldr	r1, [pc, #92]	; 13e4c <__assert_fail@plt+0x2a68>
   13dec:	strd	r2, [r1]
   13df0:	b	13e04 <__assert_fail@plt+0x2a20>
   13df4:	ldr	r1, [pc, #80]	; 13e4c <__assert_fail@plt+0x2a68>
   13df8:	mov	r2, #1
   13dfc:	mov	r3, #0
   13e00:	strd	r2, [r1]
   13e04:	bl	13588 <__assert_fail@plt+0x21a4>
   13e08:	ldr	r3, [pc, #64]	; 13e50 <__assert_fail@plt+0x2a6c>
   13e0c:	ldr	r3, [r3]
   13e10:	ldr	r2, [pc, #60]	; 13e54 <__assert_fail@plt+0x2a70>
   13e14:	str	r3, [r2]
   13e18:	nop			; (mov r0, r0)
   13e1c:	bl	142d0 <__assert_fail@plt+0x2eec>
   13e20:	mov	r3, r0
   13e24:	cmp	r3, #0
   13e28:	bne	13e1c <__assert_fail@plt+0x2a38>
   13e2c:	b	13e3c <__assert_fail@plt+0x2a58>
   13e30:	nop			; (mov r0, r0)
   13e34:	b	13e3c <__assert_fail@plt+0x2a58>
   13e38:	nop			; (mov r0, r0)
   13e3c:	sub	sp, fp, #4
   13e40:	pop	{fp, pc}
   13e44:	andeq	r4, r3, r1, asr #2
   13e48:	andeq	r4, r3, r0, asr #4
   13e4c:	andeq	r4, r3, r0, asr r2
   13e50:	andeq	r4, r3, ip, ror #2
   13e54:	andeq	r4, r3, r8, asr r2
   13e58:	push	{r4, fp, lr}
   13e5c:	add	fp, sp, #8
   13e60:	sub	sp, sp, #228	; 0xe4
   13e64:	str	r0, [fp, #-216]	; 0xffffff28
   13e68:	str	r1, [fp, #-220]	; 0xffffff24
   13e6c:	mov	r3, #0
   13e70:	str	r3, [fp, #-16]
   13e74:	ldr	r1, [pc, #552]	; 140a4 <__assert_fail@plt+0x2cc0>
   13e78:	ldr	r0, [fp, #-216]	; 0xffffff28
   13e7c:	bl	110b4 <strcmp@plt>
   13e80:	mov	r3, r0
   13e84:	cmp	r3, #0
   13e88:	bne	13e94 <__assert_fail@plt+0x2ab0>
   13e8c:	mvn	r3, #0
   13e90:	str	r3, [fp, #-220]	; 0xffffff24
   13e94:	ldr	r3, [fp, #-220]	; 0xffffff24
   13e98:	cmp	r3, #0
   13e9c:	blt	13ee4 <__assert_fail@plt+0x2b00>
   13ea0:	sub	r3, fp, #132	; 0x84
   13ea4:	mov	r1, r3
   13ea8:	ldr	r0, [fp, #-220]	; 0xffffff24
   13eac:	bl	21d20 <__assert_fail@plt+0x1093c>
   13eb0:	mov	r3, r0
   13eb4:	cmp	r3, #0
   13eb8:	bne	13ee4 <__assert_fail@plt+0x2b00>
   13ebc:	sub	r3, fp, #228	; 0xe4
   13ec0:	sub	r2, fp, #132	; 0x84
   13ec4:	mov	r1, r2
   13ec8:	mov	r0, r3
   13ecc:	bl	1ce24 <__assert_fail@plt+0xba40>
   13ed0:	sub	r3, fp, #140	; 0x8c
   13ed4:	sub	r2, fp, #228	; 0xe4
   13ed8:	ldm	r2, {r0, r1}
   13edc:	stm	r3, {r0, r1}
   13ee0:	b	13f0c <__assert_fail@plt+0x2b28>
   13ee4:	ldr	r3, [pc, #444]	; 140a8 <__assert_fail@plt+0x2cc4>
   13ee8:	ldr	r3, [r3]
   13eec:	cmp	r3, #0
   13ef0:	bne	13efc <__assert_fail@plt+0x2b18>
   13ef4:	ldr	r0, [pc, #428]	; 140a8 <__assert_fail@plt+0x2cc4>
   13ef8:	bl	172a0 <__assert_fail@plt+0x5ebc>
   13efc:	ldr	r2, [pc, #420]	; 140a8 <__assert_fail@plt+0x2cc4>
   13f00:	sub	r3, fp, #140	; 0x8c
   13f04:	ldm	r2, {r0, r1}
   13f08:	stm	r3, {r0, r1}
   13f0c:	ldr	r3, [fp, #-136]	; 0xffffff78
   13f10:	str	r3, [fp, #-20]	; 0xffffffec
   13f14:	ldr	r3, [pc, #400]	; 140ac <__assert_fail@plt+0x2cc8>
   13f18:	ldr	r3, [r3]
   13f1c:	sub	r2, fp, #184	; 0xb8
   13f20:	sub	r1, fp, #140	; 0x8c
   13f24:	mov	r0, r3
   13f28:	bl	1d4b4 <__assert_fail@plt+0xc0d0>
   13f2c:	mov	r3, r0
   13f30:	cmp	r3, #0
   13f34:	beq	13fc0 <__assert_fail@plt+0x2bdc>
   13f38:	ldr	r3, [pc, #368]	; 140b0 <__assert_fail@plt+0x2ccc>
   13f3c:	ldr	r1, [r3]
   13f40:	ldr	r3, [pc, #356]	; 140ac <__assert_fail@plt+0x2cc8>
   13f44:	ldr	r3, [r3]
   13f48:	sub	r0, fp, #184	; 0xb8
   13f4c:	ldr	r2, [fp, #-20]	; 0xffffffec
   13f50:	str	r2, [sp, #4]
   13f54:	str	r3, [sp]
   13f58:	mov	r3, r0
   13f5c:	mov	r2, r1
   13f60:	mvn	r1, #0
   13f64:	mov	r0, #0
   13f68:	bl	1799c <__assert_fail@plt+0x65b8>
   13f6c:	mov	r3, r0
   13f70:	add	r3, r3, #1
   13f74:	str	r3, [fp, #-24]	; 0xffffffe8
   13f78:	ldr	r0, [fp, #-24]	; 0xffffffe8
   13f7c:	bl	1df08 <__assert_fail@plt+0xcb24>
   13f80:	mov	r3, r0
   13f84:	str	r3, [fp, #-16]
   13f88:	ldr	r3, [pc, #288]	; 140b0 <__assert_fail@plt+0x2ccc>
   13f8c:	ldr	r1, [r3]
   13f90:	ldr	r3, [pc, #276]	; 140ac <__assert_fail@plt+0x2cc8>
   13f94:	ldr	r3, [r3]
   13f98:	sub	r0, fp, #184	; 0xb8
   13f9c:	ldr	r2, [fp, #-20]	; 0xffffffec
   13fa0:	str	r2, [sp, #4]
   13fa4:	str	r3, [sp]
   13fa8:	mov	r3, r0
   13fac:	mov	r2, r1
   13fb0:	ldr	r1, [fp, #-24]	; 0xffffffe8
   13fb4:	ldr	r0, [fp, #-16]
   13fb8:	bl	1799c <__assert_fail@plt+0x65b8>
   13fbc:	b	13ff8 <__assert_fail@plt+0x2c14>
   13fc0:	mov	r0, #33	; 0x21
   13fc4:	bl	1df08 <__assert_fail@plt+0xcb24>
   13fc8:	mov	r3, r0
   13fcc:	str	r3, [fp, #-16]
   13fd0:	ldr	r3, [fp, #-140]	; 0xffffff74
   13fd4:	sub	r2, fp, #208	; 0xd0
   13fd8:	mov	r1, r2
   13fdc:	mov	r0, r3
   13fe0:	bl	11750 <__assert_fail@plt+0x36c>
   13fe4:	mov	r2, r0
   13fe8:	ldr	r3, [fp, #-20]	; 0xffffffec
   13fec:	ldr	r1, [pc, #192]	; 140b4 <__assert_fail@plt+0x2cd0>
   13ff0:	ldr	r0, [fp, #-16]
   13ff4:	bl	1136c <sprintf@plt>
   13ff8:	ldr	r3, [pc, #184]	; 140b8 <__assert_fail@plt+0x2cd4>
   13ffc:	ldr	r3, [r3]
   14000:	mov	r0, r3
   14004:	bl	17130 <__assert_fail@plt+0x5d4c>
   14008:	ldr	r2, [pc, #168]	; 140b8 <__assert_fail@plt+0x2cd4>
   1400c:	ldr	r3, [fp, #-16]
   14010:	str	r3, [r2]
   14014:	ldr	r3, [pc, #160]	; 140bc <__assert_fail@plt+0x2cd8>
   14018:	ldr	r3, [r3]
   1401c:	cmp	r3, #0
   14020:	bne	14040 <__assert_fail@plt+0x2c5c>
   14024:	ldr	r3, [fp, #-220]	; 0xffffff24
   14028:	cmp	r3, #0
   1402c:	blt	14038 <__assert_fail@plt+0x2c54>
   14030:	ldr	r3, [fp, #-216]	; 0xffffff28
   14034:	b	14048 <__assert_fail@plt+0x2c64>
   14038:	ldr	r3, [pc, #128]	; 140c0 <__assert_fail@plt+0x2cdc>
   1403c:	b	14048 <__assert_fail@plt+0x2c64>
   14040:	ldr	r3, [pc, #116]	; 140bc <__assert_fail@plt+0x2cd8>
   14044:	ldr	r3, [r3]
   14048:	ldr	r2, [pc, #116]	; 140c4 <__assert_fail@plt+0x2ce0>
   1404c:	str	r3, [r2]
   14050:	ldr	r3, [pc, #112]	; 140c8 <__assert_fail@plt+0x2ce4>
   14054:	ldr	r4, [r3]
   14058:	ldr	r3, [pc, #88]	; 140b8 <__assert_fail@plt+0x2cd4>
   1405c:	ldr	r3, [r3]
   14060:	mov	r1, #0
   14064:	mov	r0, r3
   14068:	bl	174b8 <__assert_fail@plt+0x60d4>
   1406c:	mov	r3, r0
   14070:	sub	r4, r4, r3
   14074:	ldr	r3, [pc, #72]	; 140c4 <__assert_fail@plt+0x2ce0>
   14078:	ldr	r3, [r3]
   1407c:	mov	r1, #0
   14080:	mov	r0, r3
   14084:	bl	174b8 <__assert_fail@plt+0x60d4>
   14088:	mov	r3, r0
   1408c:	sub	r3, r4, r3
   14090:	ldr	r2, [pc, #52]	; 140cc <__assert_fail@plt+0x2ce8>
   14094:	str	r3, [r2]
   14098:	nop			; (mov r0, r0)
   1409c:	sub	sp, fp, #8
   140a0:	pop	{r4, fp, pc}
   140a4:	andeq	r2, r2, r0, asr #10
   140a8:	andeq	r4, r3, r4, lsr #5
   140ac:	andeq	r4, r3, ip, lsl #5
   140b0:	andeq	r4, r3, r8, lsl #5
   140b4:	andeq	r2, r2, ip, asr #10
   140b8:	muleq	r3, r0, r2
   140bc:	andeq	r4, r3, r4, lsl #5
   140c0:			; <UNDEFINED> instruction: 0x00021eb8
   140c4:	muleq	r3, r4, r2
   140c8:	andeq	r4, r3, r8, asr #2
   140cc:	muleq	r3, r8, r2
   140d0:	push	{fp, lr}
   140d4:	add	fp, sp, #4
   140d8:	sub	sp, sp, #8
   140dc:	ldr	r3, [pc, #308]	; 14218 <__assert_fail@plt+0x2e34>
   140e0:	ldrb	r3, [r3]
   140e4:	cmp	r3, #0
   140e8:	beq	1419c <__assert_fail@plt+0x2db8>
   140ec:	bl	14cd8 <__assert_fail@plt+0x38f4>
   140f0:	ldr	r3, [pc, #292]	; 1421c <__assert_fail@plt+0x2e38>
   140f4:	ldr	r3, [r3]
   140f8:	sub	r3, r3, #1
   140fc:	str	r3, [fp, #-8]
   14100:	ldr	r3, [pc, #280]	; 14220 <__assert_fail@plt+0x2e3c>
   14104:	ldr	r3, [r3]
   14108:	str	r3, [fp, #-12]
   1410c:	b	14138 <__assert_fail@plt+0x2d54>
   14110:	ldr	r3, [fp, #-12]
   14114:	ldr	r2, [r3, #24]
   14118:	ldr	r3, [fp, #-12]
   1411c:	str	r2, [r3, #28]
   14120:	ldr	r3, [fp, #-8]
   14124:	sub	r3, r3, #1
   14128:	str	r3, [fp, #-8]
   1412c:	ldr	r3, [fp, #-12]
   14130:	add	r3, r3, #40	; 0x28
   14134:	str	r3, [fp, #-12]
   14138:	ldr	r3, [fp, #-8]
   1413c:	cmp	r3, #0
   14140:	bne	14110 <__assert_fail@plt+0x2d2c>
   14144:	ldr	r3, [pc, #216]	; 14224 <__assert_fail@plt+0x2e40>
   14148:	ldrb	r3, [r3]
   1414c:	cmp	r3, #0
   14150:	beq	14168 <__assert_fail@plt+0x2d84>
   14154:	ldr	r3, [fp, #-12]
   14158:	ldr	r2, [r3, #24]
   1415c:	ldr	r3, [fp, #-12]
   14160:	str	r2, [r3, #28]
   14164:	b	1420c <__assert_fail@plt+0x2e28>
   14168:	ldr	r3, [fp, #-12]
   1416c:	ldr	r3, [r3, #8]
   14170:	cmp	r3, #0
   14174:	bne	1418c <__assert_fail@plt+0x2da8>
   14178:	ldr	r3, [pc, #168]	; 14228 <__assert_fail@plt+0x2e44>
   1417c:	ldr	r2, [r3]
   14180:	ldr	r3, [fp, #-12]
   14184:	str	r2, [r3, #28]
   14188:	b	1420c <__assert_fail@plt+0x2e28>
   1418c:	ldr	r3, [fp, #-12]
   14190:	mov	r2, #0
   14194:	str	r2, [r3, #28]
   14198:	b	1420c <__assert_fail@plt+0x2e28>
   1419c:	ldr	r3, [pc, #120]	; 1421c <__assert_fail@plt+0x2e38>
   141a0:	ldr	r3, [r3]
   141a4:	str	r3, [fp, #-8]
   141a8:	ldr	r3, [pc, #112]	; 14220 <__assert_fail@plt+0x2e3c>
   141ac:	ldr	r3, [r3]
   141b0:	str	r3, [fp, #-12]
   141b4:	b	14200 <__assert_fail@plt+0x2e1c>
   141b8:	ldr	r3, [fp, #-12]
   141bc:	ldr	r3, [r3, #8]
   141c0:	cmp	r3, #0
   141c4:	bne	141dc <__assert_fail@plt+0x2df8>
   141c8:	ldr	r3, [pc, #88]	; 14228 <__assert_fail@plt+0x2e44>
   141cc:	ldr	r2, [r3]
   141d0:	ldr	r3, [fp, #-12]
   141d4:	str	r2, [r3, #28]
   141d8:	b	141e8 <__assert_fail@plt+0x2e04>
   141dc:	ldr	r3, [fp, #-12]
   141e0:	mov	r2, #0
   141e4:	str	r2, [r3, #28]
   141e8:	ldr	r3, [fp, #-8]
   141ec:	sub	r3, r3, #1
   141f0:	str	r3, [fp, #-8]
   141f4:	ldr	r3, [fp, #-12]
   141f8:	add	r3, r3, #40	; 0x28
   141fc:	str	r3, [fp, #-12]
   14200:	ldr	r3, [fp, #-8]
   14204:	cmp	r3, #0
   14208:	bne	141b8 <__assert_fail@plt+0x2dd4>
   1420c:	nop			; (mov r0, r0)
   14210:	sub	sp, fp, #4
   14214:	pop	{fp, pc}
   14218:	andeq	r4, r3, r1, asr #2
   1421c:	andeq	r4, r3, ip, asr r1
   14220:	strdeq	r4, [r3], -r8
   14224:	andeq	r4, r3, fp, lsl r2
   14228:	andeq	r4, r3, ip, lsl r2
   1422c:	push	{fp, lr}
   14230:	add	fp, sp, #4
   14234:	sub	sp, sp, #8
   14238:	str	r0, [fp, #-8]
   1423c:	ldr	r3, [fp, #-8]
   14240:	ldr	r3, [r3, #32]
   14244:	ldr	r2, [pc, #120]	; 142c4 <__assert_fail@plt+0x2ee0>
   14248:	str	r3, [r2]
   1424c:	ldr	r3, [pc, #116]	; 142c8 <__assert_fail@plt+0x2ee4>
   14250:	ldr	r2, [r3]
   14254:	ldr	r3, [pc, #104]	; 142c4 <__assert_fail@plt+0x2ee0>
   14258:	ldr	r3, [r3]
   1425c:	cmp	r2, r3
   14260:	bge	1428c <__assert_fail@plt+0x2ea8>
   14264:	ldr	r3, [pc, #88]	; 142c4 <__assert_fail@plt+0x2ee0>
   14268:	ldr	r2, [r3]
   1426c:	ldr	r3, [pc, #84]	; 142c8 <__assert_fail@plt+0x2ee4>
   14270:	ldr	r3, [r3]
   14274:	sub	r3, r2, r3
   14278:	mov	r0, r3
   1427c:	bl	152d0 <__assert_fail@plt+0x3eec>
   14280:	ldr	r3, [pc, #60]	; 142c4 <__assert_fail@plt+0x2ee0>
   14284:	mov	r2, #0
   14288:	str	r2, [r3]
   1428c:	ldr	r3, [pc, #56]	; 142cc <__assert_fail@plt+0x2ee8>
   14290:	ldrb	r3, [r3]
   14294:	cmp	r3, #0
   14298:	beq	142a0 <__assert_fail@plt+0x2ebc>
   1429c:	bl	157a4 <__assert_fail@plt+0x43c0>
   142a0:	ldr	r3, [fp, #-8]
   142a4:	ldrb	r3, [r3, #36]	; 0x24
   142a8:	cmp	r3, #0
   142ac:	beq	142b8 <__assert_fail@plt+0x2ed4>
   142b0:	ldr	r0, [fp, #-8]
   142b4:	bl	150b8 <__assert_fail@plt+0x3cd4>
   142b8:	nop			; (mov r0, r0)
   142bc:	sub	sp, fp, #4
   142c0:	pop	{fp, pc}
   142c4:	andeq	r4, r3, ip, ror r2
   142c8:	andeq	r4, r3, r4, ror r2
   142cc:	andeq	r4, r3, r1, ror r2
   142d0:	push	{fp, lr}
   142d4:	add	fp, sp, #4
   142d8:	sub	sp, sp, #16
   142dc:	bl	140d0 <__assert_fail@plt+0x2cec>
   142e0:	bl	117b0 <__assert_fail@plt+0x3cc>
   142e4:	mov	r3, r0
   142e8:	cmp	r3, #0
   142ec:	bne	142f8 <__assert_fail@plt+0x2f14>
   142f0:	mov	r3, #0
   142f4:	b	14758 <__assert_fail@plt+0x3374>
   142f8:	ldr	r3, [pc, #1124]	; 14764 <__assert_fail@plt+0x3380>
   142fc:	ldrb	r3, [r3]
   14300:	cmp	r3, #0
   14304:	beq	14314 <__assert_fail@plt+0x2f30>
   14308:	ldr	r3, [pc, #1112]	; 14768 <__assert_fail@plt+0x3384>
   1430c:	mov	r2, #1
   14310:	strb	r2, [r3]
   14314:	ldr	r3, [pc, #1104]	; 1476c <__assert_fail@plt+0x3388>
   14318:	mov	r2, #0
   1431c:	strb	r2, [r3]
   14320:	mov	r3, #0
   14324:	strb	r3, [fp, #-17]	; 0xffffffef
   14328:	ldr	r3, [pc, #1088]	; 14770 <__assert_fail@plt+0x338c>
   1432c:	ldr	r3, [r3]
   14330:	str	r3, [fp, #-12]
   14334:	ldr	r3, [pc, #1080]	; 14774 <__assert_fail@plt+0x3390>
   14338:	ldrb	r3, [r3]
   1433c:	cmp	r3, #0
   14340:	beq	14610 <__assert_fail@plt+0x322c>
   14344:	ldr	r3, [fp, #-12]
   14348:	lsl	r3, r3, #1
   1434c:	str	r3, [fp, #-12]
   14350:	b	14610 <__assert_fail@plt+0x322c>
   14354:	ldr	r3, [pc, #1052]	; 14778 <__assert_fail@plt+0x3394>
   14358:	mov	r2, #0
   1435c:	str	r2, [r3]
   14360:	ldr	r3, [pc, #1044]	; 1477c <__assert_fail@plt+0x3398>
   14364:	mov	r2, #0
   14368:	str	r2, [r3]
   1436c:	ldr	r3, [pc, #1036]	; 14780 <__assert_fail@plt+0x339c>
   14370:	mov	r2, #0
   14374:	str	r2, [r3]
   14378:	ldr	r3, [pc, #1004]	; 1476c <__assert_fail@plt+0x3388>
   1437c:	mov	r2, #0
   14380:	strb	r2, [r3]
   14384:	ldr	r3, [pc, #1016]	; 14784 <__assert_fail@plt+0x33a0>
   14388:	mov	r2, #0
   1438c:	strb	r2, [r3]
   14390:	ldr	r3, [pc, #1008]	; 14788 <__assert_fail@plt+0x33a4>
   14394:	mov	r2, #1
   14398:	strb	r2, [r3]
   1439c:	mov	r3, #1
   143a0:	str	r3, [fp, #-8]
   143a4:	ldr	r3, [pc, #992]	; 1478c <__assert_fail@plt+0x33a8>
   143a8:	ldr	r3, [r3]
   143ac:	str	r3, [fp, #-16]
   143b0:	b	14578 <__assert_fail@plt+0x3194>
   143b4:	ldr	r3, [pc, #980]	; 14790 <__assert_fail@plt+0x33ac>
   143b8:	mov	r2, #0
   143bc:	str	r2, [r3]
   143c0:	ldr	r3, [fp, #-16]
   143c4:	ldr	r3, [r3, #28]
   143c8:	cmp	r3, #0
   143cc:	bgt	143e0 <__assert_fail@plt+0x2ffc>
   143d0:	ldr	r3, [fp, #-16]
   143d4:	ldr	r3, [r3, #8]
   143d8:	cmp	r3, #1
   143dc:	bne	144fc <__assert_fail@plt+0x3118>
   143e0:	ldr	r3, [pc, #940]	; 14794 <__assert_fail@plt+0x33b0>
   143e4:	mov	r2, #0
   143e8:	strb	r2, [r3]
   143ec:	ldr	r3, [fp, #-16]
   143f0:	ldr	r3, [r3, #32]
   143f4:	ldr	r2, [pc, #924]	; 14798 <__assert_fail@plt+0x33b4>
   143f8:	str	r3, [r2]
   143fc:	ldr	r3, [fp, #-16]
   14400:	ldr	r3, [r3, #12]
   14404:	ldr	r0, [fp, #-16]
   14408:	blx	r3
   1440c:	mov	r3, r0
   14410:	eor	r3, r3, #1
   14414:	uxtb	r3, r3
   14418:	cmp	r3, #0
   1441c:	beq	14428 <__assert_fail@plt+0x3044>
   14420:	ldr	r0, [fp, #-16]
   14424:	bl	153c8 <__assert_fail@plt+0x3fe4>
   14428:	ldr	r3, [pc, #828]	; 1476c <__assert_fail@plt+0x3388>
   1442c:	ldrb	r2, [r3]
   14430:	ldrb	r3, [fp, #-17]	; 0xffffffef
   14434:	orr	r3, r2, r3
   14438:	uxtb	r3, r3
   1443c:	cmp	r3, #0
   14440:	movne	r3, #1
   14444:	moveq	r3, #0
   14448:	strb	r3, [fp, #-17]	; 0xffffffef
   1444c:	ldr	r3, [fp, #-16]
   14450:	ldr	r3, [r3, #28]
   14454:	sub	r2, r3, #1
   14458:	ldr	r3, [fp, #-16]
   1445c:	str	r2, [r3, #28]
   14460:	ldr	r3, [fp, #-16]
   14464:	ldr	r3, [r3, #28]
   14468:	cmp	r3, #0
   1446c:	bgt	14480 <__assert_fail@plt+0x309c>
   14470:	bl	117b0 <__assert_fail@plt+0x3cc>
   14474:	mov	r3, r0
   14478:	cmp	r3, #0
   1447c:	beq	14590 <__assert_fail@plt+0x31ac>
   14480:	ldr	r3, [pc, #788]	; 1479c <__assert_fail@plt+0x33b8>
   14484:	ldrb	r3, [r3]
   14488:	cmp	r3, #0
   1448c:	beq	14538 <__assert_fail@plt+0x3154>
   14490:	ldr	r3, [fp, #-16]
   14494:	ldr	r3, [r3, #8]
   14498:	cmp	r3, #0
   1449c:	beq	14538 <__assert_fail@plt+0x3154>
   144a0:	ldr	r3, [pc, #736]	; 14788 <__assert_fail@plt+0x33a4>
   144a4:	ldrb	r3, [r3]
   144a8:	cmp	r3, #0
   144ac:	beq	144c0 <__assert_fail@plt+0x30dc>
   144b0:	ldr	r3, [pc, #716]	; 14784 <__assert_fail@plt+0x33a0>
   144b4:	mov	r2, #1
   144b8:	strb	r2, [r3]
   144bc:	b	14538 <__assert_fail@plt+0x3154>
   144c0:	ldr	r3, [fp, #-16]
   144c4:	ldr	r3, [r3, #8]
   144c8:	cmp	r3, #3
   144cc:	beq	144f0 <__assert_fail@plt+0x310c>
   144d0:	ldr	r3, [fp, #-16]
   144d4:	ldr	r3, [r3, #8]
   144d8:	cmp	r3, #2
   144dc:	bne	14538 <__assert_fail@plt+0x3154>
   144e0:	ldr	r3, [pc, #684]	; 14794 <__assert_fail@plt+0x33b0>
   144e4:	ldrb	r3, [r3]
   144e8:	cmp	r3, #0
   144ec:	beq	14538 <__assert_fail@plt+0x3154>
   144f0:	ldr	r0, [fp, #-16]
   144f4:	bl	1422c <__assert_fail@plt+0x2e48>
   144f8:	b	14538 <__assert_fail@plt+0x3154>
   144fc:	ldr	r3, [pc, #664]	; 1479c <__assert_fail@plt+0x33b8>
   14500:	ldrb	r3, [r3]
   14504:	cmp	r3, #0
   14508:	beq	1453c <__assert_fail@plt+0x3158>
   1450c:	ldr	r3, [pc, #628]	; 14788 <__assert_fail@plt+0x33a4>
   14510:	ldrb	r3, [r3]
   14514:	cmp	r3, #0
   14518:	beq	1452c <__assert_fail@plt+0x3148>
   1451c:	ldr	r3, [pc, #608]	; 14784 <__assert_fail@plt+0x33a0>
   14520:	mov	r2, #1
   14524:	strb	r2, [r3]
   14528:	b	1453c <__assert_fail@plt+0x3158>
   1452c:	ldr	r0, [fp, #-16]
   14530:	bl	1422c <__assert_fail@plt+0x2e48>
   14534:	b	1453c <__assert_fail@plt+0x3158>
   14538:	nop			; (mov r0, r0)
   1453c:	ldr	r3, [pc, #604]	; 147a0 <__assert_fail@plt+0x33bc>
   14540:	ldrb	r3, [r3]
   14544:	cmp	r3, #0
   14548:	beq	14560 <__assert_fail@plt+0x317c>
   1454c:	ldr	r3, [pc, #556]	; 14780 <__assert_fail@plt+0x339c>
   14550:	ldr	r3, [r3]
   14554:	add	r3, r3, #1
   14558:	ldr	r2, [pc, #544]	; 14780 <__assert_fail@plt+0x339c>
   1455c:	str	r3, [r2]
   14560:	ldr	r3, [fp, #-8]
   14564:	add	r3, r3, #1
   14568:	str	r3, [fp, #-8]
   1456c:	ldr	r3, [fp, #-16]
   14570:	add	r3, r3, #40	; 0x28
   14574:	str	r3, [fp, #-16]
   14578:	ldr	r3, [pc, #548]	; 147a4 <__assert_fail@plt+0x33c0>
   1457c:	ldr	r3, [r3]
   14580:	ldr	r2, [fp, #-8]
   14584:	cmp	r2, r3
   14588:	ble	143b4 <__assert_fail@plt+0x2fd0>
   1458c:	b	14594 <__assert_fail@plt+0x31b0>
   14590:	nop			; (mov r0, r0)
   14594:	ldr	r3, [pc, #464]	; 1476c <__assert_fail@plt+0x3388>
   14598:	ldrb	r3, [r3]
   1459c:	cmp	r3, #0
   145a0:	beq	145b8 <__assert_fail@plt+0x31d4>
   145a4:	mov	r0, #10
   145a8:	bl	113d8 <putchar_unlocked@plt>
   145ac:	ldr	r3, [fp, #-12]
   145b0:	sub	r3, r3, #1
   145b4:	str	r3, [fp, #-12]
   145b8:	bl	117b0 <__assert_fail@plt+0x3cc>
   145bc:	mov	r3, r0
   145c0:	cmp	r3, #0
   145c4:	bne	145e0 <__assert_fail@plt+0x31fc>
   145c8:	ldr	r3, [pc, #404]	; 14764 <__assert_fail@plt+0x3380>
   145cc:	ldrb	r3, [r3]
   145d0:	eor	r3, r3, #1
   145d4:	uxtb	r3, r3
   145d8:	cmp	r3, #0
   145dc:	bne	14630 <__assert_fail@plt+0x324c>
   145e0:	ldr	r3, [pc, #396]	; 14774 <__assert_fail@plt+0x3390>
   145e4:	ldrb	r3, [r3]
   145e8:	cmp	r3, #0
   145ec:	beq	14610 <__assert_fail@plt+0x322c>
   145f0:	ldrb	r3, [fp, #-17]	; 0xffffffef
   145f4:	cmp	r3, #0
   145f8:	beq	14610 <__assert_fail@plt+0x322c>
   145fc:	mov	r0, #10
   14600:	bl	113d8 <putchar_unlocked@plt>
   14604:	ldr	r3, [fp, #-12]
   14608:	sub	r3, r3, #1
   1460c:	str	r3, [fp, #-12]
   14610:	ldr	r3, [fp, #-12]
   14614:	cmp	r3, #0
   14618:	ble	14634 <__assert_fail@plt+0x3250>
   1461c:	bl	117b0 <__assert_fail@plt+0x3cc>
   14620:	mov	r3, r0
   14624:	cmp	r3, #0
   14628:	bne	14354 <__assert_fail@plt+0x2f70>
   1462c:	b	14634 <__assert_fail@plt+0x3250>
   14630:	nop			; (mov r0, r0)
   14634:	ldr	r3, [fp, #-12]
   14638:	cmp	r3, #0
   1463c:	bne	146a0 <__assert_fail@plt+0x32bc>
   14640:	mov	r3, #1
   14644:	str	r3, [fp, #-8]
   14648:	ldr	r3, [pc, #316]	; 1478c <__assert_fail@plt+0x33a8>
   1464c:	ldr	r3, [r3]
   14650:	str	r3, [fp, #-16]
   14654:	b	1468c <__assert_fail@plt+0x32a8>
   14658:	ldr	r3, [fp, #-16]
   1465c:	ldr	r3, [r3, #8]
   14660:	cmp	r3, #0
   14664:	bne	14674 <__assert_fail@plt+0x3290>
   14668:	ldr	r3, [fp, #-16]
   1466c:	mov	r2, #1
   14670:	strb	r2, [r3, #37]	; 0x25
   14674:	ldr	r3, [fp, #-8]
   14678:	add	r3, r3, #1
   1467c:	str	r3, [fp, #-8]
   14680:	ldr	r3, [fp, #-16]
   14684:	add	r3, r3, #40	; 0x28
   14688:	str	r3, [fp, #-16]
   1468c:	ldr	r3, [pc, #272]	; 147a4 <__assert_fail@plt+0x33c0>
   14690:	ldr	r3, [r3]
   14694:	ldr	r2, [fp, #-8]
   14698:	cmp	r2, r3
   1469c:	ble	14658 <__assert_fail@plt+0x3274>
   146a0:	ldr	r2, [pc, #196]	; 1476c <__assert_fail@plt+0x3388>
   146a4:	ldrb	r3, [fp, #-17]	; 0xffffffef
   146a8:	strb	r3, [r2]
   146ac:	ldr	r3, [pc, #184]	; 1476c <__assert_fail@plt+0x3388>
   146b0:	ldrb	r3, [r3]
   146b4:	cmp	r3, #0
   146b8:	beq	146e0 <__assert_fail@plt+0x32fc>
   146bc:	ldr	r3, [pc, #160]	; 14764 <__assert_fail@plt+0x3380>
   146c0:	ldrb	r3, [r3]
   146c4:	cmp	r3, #0
   146c8:	beq	146e0 <__assert_fail@plt+0x32fc>
   146cc:	ldr	r3, [fp, #-12]
   146d0:	add	r3, r3, #5
   146d4:	mov	r0, r3
   146d8:	bl	15360 <__assert_fail@plt+0x3f7c>
   146dc:	b	14714 <__assert_fail@plt+0x3330>
   146e0:	ldr	r3, [pc, #192]	; 147a8 <__assert_fail@plt+0x33c4>
   146e4:	ldrb	r3, [r3]
   146e8:	cmp	r3, #0
   146ec:	beq	14714 <__assert_fail@plt+0x3330>
   146f0:	ldr	r3, [pc, #180]	; 147ac <__assert_fail@plt+0x33c8>
   146f4:	ldrb	r3, [r3]
   146f8:	cmp	r3, #0
   146fc:	beq	14714 <__assert_fail@plt+0x3330>
   14700:	mov	r0, #12
   14704:	bl	113d8 <putchar_unlocked@plt>
   14708:	ldr	r3, [pc, #156]	; 147ac <__assert_fail@plt+0x33c8>
   1470c:	mov	r2, #0
   14710:	strb	r2, [r3]
   14714:	ldr	r3, [pc, #148]	; 147b0 <__assert_fail@plt+0x33cc>
   14718:	ldrd	r2, [r3]
   1471c:	adds	r2, r2, #1
   14720:	adc	r3, r3, #0
   14724:	ldr	r1, [pc, #132]	; 147b0 <__assert_fail@plt+0x33cc>
   14728:	strd	r2, [r1]
   1472c:	ldr	r3, [pc, #124]	; 147b0 <__assert_fail@plt+0x33cc>
   14730:	ldrd	r0, [r3]
   14734:	ldr	r3, [pc, #120]	; 147b4 <__assert_fail@plt+0x33d0>
   14738:	ldrd	r2, [r3]
   1473c:	cmp	r1, r3
   14740:	cmpeq	r0, r2
   14744:	bls	14750 <__assert_fail@plt+0x336c>
   14748:	mov	r3, #0
   1474c:	b	14758 <__assert_fail@plt+0x3374>
   14750:	bl	13c78 <__assert_fail@plt+0x2894>
   14754:	mov	r3, #1
   14758:	mov	r0, r3
   1475c:	sub	sp, fp, #4
   14760:	pop	{fp, pc}
   14764:	andeq	r4, r3, r0, asr #2
   14768:	andeq	r4, r3, r7, lsl r2
   1476c:	andeq	r4, r3, r0, lsl #5
   14770:	andeq	r4, r3, ip, lsl r2
   14774:	andeq	r4, r3, sl, ror #4
   14778:	andeq	r4, r3, r4, lsr r2
   1477c:	andeq	r4, r3, ip, lsr #4
   14780:	andeq	r4, r3, r8, ror r2
   14784:	andeq	r4, r3, r1, lsl r2
   14788:	andeq	r4, r3, r2, lsl r2
   1478c:	strdeq	r4, [r3], -r8
   14790:	andeq	r4, r3, r8, lsr r2
   14794:	andeq	r4, r3, r3, lsl r2
   14798:	andeq	r4, r3, ip, ror r2
   1479c:	andeq	r4, r3, r0, lsl r2
   147a0:	andeq	r4, r3, r1, ror r2
   147a4:	andeq	r4, r3, ip, asr r1
   147a8:	andeq	r4, r3, r5, lsl r2
   147ac:	andeq	r4, r3, r6, lsl r2
   147b0:	andeq	r4, r3, r0, asr r2
   147b4:	andeq	r4, r3, r0, ror #2
   147b8:	push	{fp, lr}
   147bc:	add	fp, sp, #4
   147c0:	sub	sp, sp, #16
   147c4:	ldr	r3, [pc, #1260]	; 14cb8 <__assert_fail@plt+0x38d4>
   147c8:	ldr	r3, [r3]
   147cc:	cmp	r3, #0
   147d0:	bge	14884 <__assert_fail@plt+0x34a0>
   147d4:	ldr	r3, [pc, #1248]	; 14cbc <__assert_fail@plt+0x38d8>
   147d8:	ldr	r3, [r3]
   147dc:	cmp	r3, #0
   147e0:	bge	1481c <__assert_fail@plt+0x3438>
   147e4:	ldr	r3, [pc, #1228]	; 14cb8 <__assert_fail@plt+0x38d4>
   147e8:	ldr	r3, [r3]
   147ec:	mov	r1, r3
   147f0:	mvn	r0, #-2147483648	; 0x80000000
   147f4:	bl	2181c <__assert_fail@plt+0x10438>
   147f8:	mov	r3, r0
   147fc:	mov	r2, r3
   14800:	ldr	r3, [pc, #1204]	; 14cbc <__assert_fail@plt+0x38d8>
   14804:	ldr	r3, [r3]
   14808:	cmp	r2, r3
   1480c:	movgt	r3, #1
   14810:	movle	r3, #0
   14814:	uxtb	r3, r3
   14818:	b	14948 <__assert_fail@plt+0x3564>
   1481c:	ldr	r3, [pc, #1172]	; 14cb8 <__assert_fail@plt+0x38d4>
   14820:	ldr	r3, [r3]
   14824:	cmn	r3, #1
   14828:	bne	1484c <__assert_fail@plt+0x3468>
   1482c:	ldr	r3, [pc, #1160]	; 14cbc <__assert_fail@plt+0x38d8>
   14830:	ldr	r3, [r3]
   14834:	add	r3, r3, #-2147483648	; 0x80000000
   14838:	cmp	r3, #0
   1483c:	movgt	r3, #1
   14840:	movle	r3, #0
   14844:	uxtb	r3, r3
   14848:	b	14948 <__assert_fail@plt+0x3564>
   1484c:	ldr	r3, [pc, #1124]	; 14cb8 <__assert_fail@plt+0x38d4>
   14850:	ldr	r3, [r3]
   14854:	mov	r1, r3
   14858:	mov	r0, #-2147483648	; 0x80000000
   1485c:	bl	2181c <__assert_fail@plt+0x10438>
   14860:	mov	r3, r0
   14864:	mov	r2, r3
   14868:	ldr	r3, [pc, #1100]	; 14cbc <__assert_fail@plt+0x38d8>
   1486c:	ldr	r3, [r3]
   14870:	cmp	r2, r3
   14874:	movlt	r3, #1
   14878:	movge	r3, #0
   1487c:	uxtb	r3, r3
   14880:	b	14948 <__assert_fail@plt+0x3564>
   14884:	ldr	r3, [pc, #1068]	; 14cb8 <__assert_fail@plt+0x38d4>
   14888:	ldr	r3, [r3]
   1488c:	cmp	r3, #0
   14890:	beq	14944 <__assert_fail@plt+0x3560>
   14894:	ldr	r3, [pc, #1056]	; 14cbc <__assert_fail@plt+0x38d8>
   14898:	ldr	r3, [r3]
   1489c:	cmp	r3, #0
   148a0:	bge	1490c <__assert_fail@plt+0x3528>
   148a4:	ldr	r3, [pc, #1040]	; 14cbc <__assert_fail@plt+0x38d8>
   148a8:	ldr	r3, [r3]
   148ac:	cmn	r3, #1
   148b0:	bne	148d4 <__assert_fail@plt+0x34f0>
   148b4:	ldr	r3, [pc, #1020]	; 14cb8 <__assert_fail@plt+0x38d4>
   148b8:	ldr	r3, [r3]
   148bc:	add	r3, r3, #-2147483648	; 0x80000000
   148c0:	cmp	r3, #0
   148c4:	movgt	r3, #1
   148c8:	movle	r3, #0
   148cc:	uxtb	r3, r3
   148d0:	b	14948 <__assert_fail@plt+0x3564>
   148d4:	ldr	r3, [pc, #992]	; 14cbc <__assert_fail@plt+0x38d8>
   148d8:	ldr	r3, [r3]
   148dc:	mov	r1, r3
   148e0:	mov	r0, #-2147483648	; 0x80000000
   148e4:	bl	2181c <__assert_fail@plt+0x10438>
   148e8:	mov	r3, r0
   148ec:	mov	r2, r3
   148f0:	ldr	r3, [pc, #960]	; 14cb8 <__assert_fail@plt+0x38d4>
   148f4:	ldr	r3, [r3]
   148f8:	cmp	r2, r3
   148fc:	movlt	r3, #1
   14900:	movge	r3, #0
   14904:	uxtb	r3, r3
   14908:	b	14948 <__assert_fail@plt+0x3564>
   1490c:	ldr	r3, [pc, #932]	; 14cb8 <__assert_fail@plt+0x38d4>
   14910:	ldr	r3, [r3]
   14914:	mov	r1, r3
   14918:	mvn	r0, #-2147483648	; 0x80000000
   1491c:	bl	2181c <__assert_fail@plt+0x10438>
   14920:	mov	r3, r0
   14924:	mov	r2, r3
   14928:	ldr	r3, [pc, #908]	; 14cbc <__assert_fail@plt+0x38d8>
   1492c:	ldr	r3, [r3]
   14930:	cmp	r2, r3
   14934:	movlt	r3, #1
   14938:	movge	r3, #0
   1493c:	uxtb	r3, r3
   14940:	b	14948 <__assert_fail@plt+0x3564>
   14944:	mov	r3, #0
   14948:	cmp	r3, #0
   1494c:	beq	14970 <__assert_fail@plt+0x358c>
   14950:	ldr	r3, [pc, #868]	; 14cbc <__assert_fail@plt+0x38d8>
   14954:	ldr	r3, [r3]
   14958:	mov	r2, r3
   1495c:	ldr	r3, [pc, #852]	; 14cb8 <__assert_fail@plt+0x38d4>
   14960:	ldr	r3, [r3]
   14964:	mul	r3, r3, r2
   14968:	str	r3, [fp, #-8]
   1496c:	b	14bd4 <__assert_fail@plt+0x37f0>
   14970:	ldr	r3, [pc, #836]	; 14cbc <__assert_fail@plt+0x38d8>
   14974:	ldr	r3, [r3]
   14978:	mov	r2, r3
   1497c:	ldr	r3, [pc, #820]	; 14cb8 <__assert_fail@plt+0x38d4>
   14980:	ldr	r3, [r3]
   14984:	mul	r3, r3, r2
   14988:	str	r3, [fp, #-8]
   1498c:	ldr	r3, [fp, #-8]
   14990:	cmp	r3, #0
   14994:	bge	149b4 <__assert_fail@plt+0x35d0>
   14998:	ldr	r3, [fp, #-8]
   1499c:	rsb	r3, r3, #-2147483648	; 0x80000000
   149a0:	cmp	r3, #1
   149a4:	movgt	r3, #1
   149a8:	movle	r3, #0
   149ac:	uxtb	r3, r3
   149b0:	b	149c8 <__assert_fail@plt+0x35e4>
   149b4:	ldr	r3, [fp, #-8]
   149b8:	cmn	r3, #-2147483647	; 0x80000001
   149bc:	moveq	r3, #1
   149c0:	movne	r3, #0
   149c4:	uxtb	r3, r3
   149c8:	cmp	r3, #0
   149cc:	beq	149e0 <__assert_fail@plt+0x35fc>
   149d0:	ldr	r3, [fp, #-8]
   149d4:	add	r3, r3, #1
   149d8:	str	r3, [fp, #-12]
   149dc:	b	14bd4 <__assert_fail@plt+0x37f0>
   149e0:	ldr	r3, [fp, #-8]
   149e4:	add	r3, r3, #1
   149e8:	str	r3, [fp, #-12]
   149ec:	ldr	r3, [pc, #716]	; 14cc0 <__assert_fail@plt+0x38dc>
   149f0:	ldr	r3, [r3]
   149f4:	cmp	r3, #0
   149f8:	bge	14a1c <__assert_fail@plt+0x3638>
   149fc:	ldr	r3, [pc, #700]	; 14cc0 <__assert_fail@plt+0x38dc>
   14a00:	ldr	r3, [r3]
   14a04:	rsb	r3, r3, #-2147483648	; 0x80000000
   14a08:	cmp	r3, #1
   14a0c:	movgt	r3, #1
   14a10:	movle	r3, #0
   14a14:	uxtb	r3, r3
   14a18:	b	14a34 <__assert_fail@plt+0x3650>
   14a1c:	ldr	r3, [pc, #668]	; 14cc0 <__assert_fail@plt+0x38dc>
   14a20:	ldr	r3, [r3]
   14a24:	cmn	r3, #-2147483647	; 0x80000001
   14a28:	moveq	r3, #1
   14a2c:	movne	r3, #0
   14a30:	uxtb	r3, r3
   14a34:	cmp	r3, #0
   14a38:	beq	14a50 <__assert_fail@plt+0x366c>
   14a3c:	ldr	r3, [pc, #636]	; 14cc0 <__assert_fail@plt+0x38dc>
   14a40:	ldr	r3, [r3]
   14a44:	add	r3, r3, #1
   14a48:	str	r3, [fp, #-16]
   14a4c:	b	14bd4 <__assert_fail@plt+0x37f0>
   14a50:	ldr	r3, [pc, #616]	; 14cc0 <__assert_fail@plt+0x38dc>
   14a54:	ldr	r3, [r3]
   14a58:	add	r3, r3, #1
   14a5c:	str	r3, [fp, #-16]
   14a60:	ldr	r3, [fp, #-16]
   14a64:	cmp	r3, #0
   14a68:	bge	14b00 <__assert_fail@plt+0x371c>
   14a6c:	ldr	r3, [fp, #-8]
   14a70:	cmp	r3, #0
   14a74:	bge	14aa8 <__assert_fail@plt+0x36c4>
   14a78:	ldr	r3, [fp, #-16]
   14a7c:	mov	r1, r3
   14a80:	mvn	r0, #-2147483648	; 0x80000000
   14a84:	bl	2181c <__assert_fail@plt+0x10438>
   14a88:	mov	r3, r0
   14a8c:	mov	r2, r3
   14a90:	ldr	r3, [fp, #-8]
   14a94:	cmp	r2, r3
   14a98:	movgt	r3, #1
   14a9c:	movle	r3, #0
   14aa0:	uxtb	r3, r3
   14aa4:	b	14ba4 <__assert_fail@plt+0x37c0>
   14aa8:	ldr	r3, [fp, #-16]
   14aac:	cmn	r3, #1
   14ab0:	bne	14ad0 <__assert_fail@plt+0x36ec>
   14ab4:	ldr	r3, [fp, #-8]
   14ab8:	add	r3, r3, #-2147483648	; 0x80000000
   14abc:	cmp	r3, #0
   14ac0:	movgt	r3, #1
   14ac4:	movle	r3, #0
   14ac8:	uxtb	r3, r3
   14acc:	b	14ba4 <__assert_fail@plt+0x37c0>
   14ad0:	ldr	r3, [fp, #-16]
   14ad4:	mov	r1, r3
   14ad8:	mov	r0, #-2147483648	; 0x80000000
   14adc:	bl	2181c <__assert_fail@plt+0x10438>
   14ae0:	mov	r3, r0
   14ae4:	mov	r2, r3
   14ae8:	ldr	r3, [fp, #-8]
   14aec:	cmp	r2, r3
   14af0:	movlt	r3, #1
   14af4:	movge	r3, #0
   14af8:	uxtb	r3, r3
   14afc:	b	14ba4 <__assert_fail@plt+0x37c0>
   14b00:	ldr	r3, [fp, #-16]
   14b04:	cmp	r3, #0
   14b08:	beq	14ba0 <__assert_fail@plt+0x37bc>
   14b0c:	ldr	r3, [fp, #-8]
   14b10:	cmp	r3, #0
   14b14:	bge	14b70 <__assert_fail@plt+0x378c>
   14b18:	ldr	r3, [fp, #-8]
   14b1c:	cmn	r3, #1
   14b20:	bne	14b40 <__assert_fail@plt+0x375c>
   14b24:	ldr	r3, [fp, #-16]
   14b28:	add	r3, r3, #-2147483648	; 0x80000000
   14b2c:	cmp	r3, #0
   14b30:	movgt	r3, #1
   14b34:	movle	r3, #0
   14b38:	uxtb	r3, r3
   14b3c:	b	14ba4 <__assert_fail@plt+0x37c0>
   14b40:	ldr	r3, [fp, #-8]
   14b44:	mov	r1, r3
   14b48:	mov	r0, #-2147483648	; 0x80000000
   14b4c:	bl	2181c <__assert_fail@plt+0x10438>
   14b50:	mov	r3, r0
   14b54:	mov	r2, r3
   14b58:	ldr	r3, [fp, #-16]
   14b5c:	cmp	r2, r3
   14b60:	movlt	r3, #1
   14b64:	movge	r3, #0
   14b68:	uxtb	r3, r3
   14b6c:	b	14ba4 <__assert_fail@plt+0x37c0>
   14b70:	ldr	r3, [fp, #-16]
   14b74:	mov	r1, r3
   14b78:	mvn	r0, #-2147483648	; 0x80000000
   14b7c:	bl	2181c <__assert_fail@plt+0x10438>
   14b80:	mov	r3, r0
   14b84:	mov	r2, r3
   14b88:	ldr	r3, [fp, #-8]
   14b8c:	cmp	r2, r3
   14b90:	movlt	r3, #1
   14b94:	movge	r3, #0
   14b98:	uxtb	r3, r3
   14b9c:	b	14ba4 <__assert_fail@plt+0x37c0>
   14ba0:	mov	r3, #0
   14ba4:	cmp	r3, #0
   14ba8:	beq	14bc0 <__assert_fail@plt+0x37dc>
   14bac:	ldr	r3, [fp, #-8]
   14bb0:	ldr	r2, [fp, #-16]
   14bb4:	mul	r3, r2, r3
   14bb8:	str	r3, [fp, #-20]	; 0xffffffec
   14bbc:	b	14bd4 <__assert_fail@plt+0x37f0>
   14bc0:	ldr	r3, [fp, #-8]
   14bc4:	ldr	r2, [fp, #-16]
   14bc8:	mul	r3, r2, r3
   14bcc:	str	r3, [fp, #-20]	; 0xffffffec
   14bd0:	b	14bd8 <__assert_fail@plt+0x37f4>
   14bd4:	bl	11788 <__assert_fail@plt+0x3a4>
   14bd8:	ldr	r3, [pc, #228]	; 14cc4 <__assert_fail@plt+0x38e0>
   14bdc:	ldr	r3, [r3]
   14be0:	mov	r0, r3
   14be4:	bl	17130 <__assert_fail@plt+0x5d4c>
   14be8:	ldr	r3, [fp, #-12]
   14bec:	mov	r1, #4
   14bf0:	mov	r0, r3
   14bf4:	bl	1e0e4 <__assert_fail@plt+0xcd00>
   14bf8:	mov	r3, r0
   14bfc:	mov	r2, r3
   14c00:	ldr	r3, [pc, #188]	; 14cc4 <__assert_fail@plt+0x38e0>
   14c04:	str	r2, [r3]
   14c08:	ldr	r3, [pc, #184]	; 14cc8 <__assert_fail@plt+0x38e4>
   14c0c:	ldr	r3, [r3]
   14c10:	mov	r0, r3
   14c14:	bl	17130 <__assert_fail@plt+0x5d4c>
   14c18:	ldr	r3, [fp, #-8]
   14c1c:	mov	r1, #4
   14c20:	mov	r0, r3
   14c24:	bl	1e0e4 <__assert_fail@plt+0xcd00>
   14c28:	mov	r3, r0
   14c2c:	mov	r2, r3
   14c30:	ldr	r3, [pc, #144]	; 14cc8 <__assert_fail@plt+0x38e4>
   14c34:	str	r2, [r3]
   14c38:	ldr	r3, [pc, #140]	; 14ccc <__assert_fail@plt+0x38e8>
   14c3c:	ldr	r3, [r3]
   14c40:	mov	r0, r3
   14c44:	bl	17130 <__assert_fail@plt+0x5d4c>
   14c48:	ldr	r3, [fp, #-20]	; 0xffffffec
   14c4c:	mov	r2, r3
   14c50:	ldr	r3, [pc, #120]	; 14cd0 <__assert_fail@plt+0x38ec>
   14c54:	ldrb	r3, [r3]
   14c58:	add	r3, r3, #1
   14c5c:	mov	r1, r3
   14c60:	mov	r0, r2
   14c64:	bl	1e0e4 <__assert_fail@plt+0xcd00>
   14c68:	mov	r3, r0
   14c6c:	mov	r2, r3
   14c70:	ldr	r3, [pc, #84]	; 14ccc <__assert_fail@plt+0x38e8>
   14c74:	str	r2, [r3]
   14c78:	ldr	r3, [fp, #-20]	; 0xffffffec
   14c7c:	mov	r2, r3
   14c80:	ldr	r3, [pc, #76]	; 14cd4 <__assert_fail@plt+0x38f0>
   14c84:	str	r2, [r3]
   14c88:	ldr	r3, [pc, #64]	; 14cd0 <__assert_fail@plt+0x38ec>
   14c8c:	ldrb	r3, [r3]
   14c90:	add	r3, r3, #1
   14c94:	mov	r2, r3
   14c98:	ldr	r3, [pc, #52]	; 14cd4 <__assert_fail@plt+0x38f0>
   14c9c:	ldr	r3, [r3]
   14ca0:	mul	r3, r3, r2
   14ca4:	ldr	r2, [pc, #40]	; 14cd4 <__assert_fail@plt+0x38f0>
   14ca8:	str	r3, [r2]
   14cac:	nop			; (mov r0, r0)
   14cb0:	sub	sp, fp, #4
   14cb4:	pop	{fp, pc}
   14cb8:	andeq	r4, r3, ip, asr r1
   14cbc:	andeq	r4, r3, ip, lsl r2
   14cc0:	andeq	r4, r3, r4, lsr #4
   14cc4:	andeq	r4, r3, r8, lsl #4
   14cc8:	andeq	r4, r3, ip, lsl #4
   14ccc:	strdeq	r4, [r3], -ip
   14cd0:	andeq	r4, r3, r1, ror r2
   14cd4:	andeq	r4, r3, r4, lsl #4
   14cd8:	push	{fp, lr}
   14cdc:	add	fp, sp, #4
   14ce0:	sub	sp, sp, #24
   14ce4:	mov	r3, #0
   14ce8:	str	r3, [fp, #-16]
   14cec:	ldr	r3, [pc, #552]	; 14f1c <__assert_fail@plt+0x3b38>
   14cf0:	mov	r2, #0
   14cf4:	str	r2, [r3]
   14cf8:	mov	r3, #0
   14cfc:	str	r3, [fp, #-20]	; 0xffffffec
   14d00:	ldr	r3, [pc, #536]	; 14f20 <__assert_fail@plt+0x3b3c>
   14d04:	ldrb	r3, [r3]
   14d08:	cmp	r3, #0
   14d0c:	beq	14d20 <__assert_fail@plt+0x393c>
   14d10:	ldr	r3, [pc, #524]	; 14f24 <__assert_fail@plt+0x3b40>
   14d14:	ldr	r3, [r3]
   14d18:	str	r3, [fp, #-24]	; 0xffffffe8
   14d1c:	b	14d30 <__assert_fail@plt+0x394c>
   14d20:	ldr	r3, [pc, #508]	; 14f24 <__assert_fail@plt+0x3b40>
   14d24:	ldr	r3, [r3]
   14d28:	sub	r3, r3, #1
   14d2c:	str	r3, [fp, #-24]	; 0xffffffe8
   14d30:	mov	r3, #1
   14d34:	str	r3, [fp, #-8]
   14d38:	ldr	r3, [pc, #488]	; 14f28 <__assert_fail@plt+0x3b44>
   14d3c:	ldr	r3, [r3]
   14d40:	str	r3, [fp, #-28]	; 0xffffffe4
   14d44:	b	14d6c <__assert_fail@plt+0x3988>
   14d48:	ldr	r3, [fp, #-28]	; 0xffffffe4
   14d4c:	mov	r2, #0
   14d50:	str	r2, [r3, #24]
   14d54:	ldr	r3, [fp, #-8]
   14d58:	add	r3, r3, #1
   14d5c:	str	r3, [fp, #-8]
   14d60:	ldr	r3, [fp, #-28]	; 0xffffffe4
   14d64:	add	r3, r3, #40	; 0x28
   14d68:	str	r3, [fp, #-28]	; 0xffffffe4
   14d6c:	ldr	r2, [fp, #-8]
   14d70:	ldr	r3, [fp, #-24]	; 0xffffffe8
   14d74:	cmp	r2, r3
   14d78:	ble	14d48 <__assert_fail@plt+0x3964>
   14d7c:	mov	r3, #1
   14d80:	str	r3, [fp, #-8]
   14d84:	ldr	r3, [pc, #412]	; 14f28 <__assert_fail@plt+0x3b44>
   14d88:	ldr	r3, [r3]
   14d8c:	str	r3, [fp, #-28]	; 0xffffffe4
   14d90:	b	14eb8 <__assert_fail@plt+0x3ad4>
   14d94:	ldr	r2, [fp, #-16]
   14d98:	ldr	r3, [fp, #-28]	; 0xffffffe4
   14d9c:	str	r2, [r3, #20]
   14da0:	ldr	r3, [pc, #388]	; 14f2c <__assert_fail@plt+0x3b48>
   14da4:	ldr	r3, [r3]
   14da8:	str	r3, [fp, #-12]
   14dac:	b	14e84 <__assert_fail@plt+0x3aa0>
   14db0:	ldr	r3, [fp, #-28]	; 0xffffffe4
   14db4:	ldr	r3, [r3, #8]
   14db8:	cmp	r3, #0
   14dbc:	bne	14e78 <__assert_fail@plt+0x3a94>
   14dc0:	ldr	r3, [pc, #360]	; 14f30 <__assert_fail@plt+0x3b4c>
   14dc4:	mov	r2, #0
   14dc8:	str	r2, [r3]
   14dcc:	ldr	r0, [fp, #-28]	; 0xffffffe4
   14dd0:	bl	15db8 <__assert_fail@plt+0x49d4>
   14dd4:	mov	r3, r0
   14dd8:	eor	r3, r3, #1
   14ddc:	uxtb	r3, r3
   14de0:	cmp	r3, #0
   14de4:	beq	14df0 <__assert_fail@plt+0x3a0c>
   14de8:	ldr	r0, [fp, #-28]	; 0xffffffe4
   14dec:	bl	153c8 <__assert_fail@plt+0x3fe4>
   14df0:	ldr	r3, [fp, #-28]	; 0xffffffe4
   14df4:	ldr	r3, [r3, #8]
   14df8:	cmp	r3, #0
   14dfc:	beq	14e14 <__assert_fail@plt+0x3a30>
   14e00:	ldr	r3, [pc, #276]	; 14f1c <__assert_fail@plt+0x3b38>
   14e04:	ldr	r3, [r3]
   14e08:	ldr	r2, [fp, #-20]	; 0xffffffec
   14e0c:	cmp	r2, r3
   14e10:	beq	14e78 <__assert_fail@plt+0x3a94>
   14e14:	ldr	r3, [fp, #-28]	; 0xffffffe4
   14e18:	ldr	r3, [r3, #24]
   14e1c:	add	r2, r3, #1
   14e20:	ldr	r3, [fp, #-28]	; 0xffffffe4
   14e24:	str	r2, [r3, #24]
   14e28:	ldr	r3, [pc, #260]	; 14f34 <__assert_fail@plt+0x3b50>
   14e2c:	ldr	r2, [r3]
   14e30:	ldr	r3, [fp, #-16]
   14e34:	lsl	r3, r3, #2
   14e38:	add	r3, r2, r3
   14e3c:	ldr	r2, [fp, #-20]	; 0xffffffec
   14e40:	str	r2, [r3]
   14e44:	ldr	r3, [pc, #236]	; 14f38 <__assert_fail@plt+0x3b54>
   14e48:	ldr	r2, [r3]
   14e4c:	ldr	r3, [fp, #-16]
   14e50:	add	r1, r3, #1
   14e54:	str	r1, [fp, #-16]
   14e58:	lsl	r3, r3, #2
   14e5c:	add	r3, r2, r3
   14e60:	ldr	r2, [pc, #200]	; 14f30 <__assert_fail@plt+0x3b4c>
   14e64:	ldr	r2, [r2]
   14e68:	str	r2, [r3]
   14e6c:	ldr	r3, [pc, #168]	; 14f1c <__assert_fail@plt+0x3b38>
   14e70:	ldr	r3, [r3]
   14e74:	str	r3, [fp, #-20]	; 0xffffffec
   14e78:	ldr	r3, [fp, #-12]
   14e7c:	sub	r3, r3, #1
   14e80:	str	r3, [fp, #-12]
   14e84:	ldr	r3, [fp, #-12]
   14e88:	cmp	r3, #0
   14e8c:	beq	14ea0 <__assert_fail@plt+0x3abc>
   14e90:	ldr	r3, [pc, #164]	; 14f3c <__assert_fail@plt+0x3b58>
   14e94:	ldr	r3, [r3]
   14e98:	cmp	r3, #0
   14e9c:	bne	14db0 <__assert_fail@plt+0x39cc>
   14ea0:	ldr	r3, [fp, #-8]
   14ea4:	add	r3, r3, #1
   14ea8:	str	r3, [fp, #-8]
   14eac:	ldr	r3, [fp, #-28]	; 0xffffffe4
   14eb0:	add	r3, r3, #40	; 0x28
   14eb4:	str	r3, [fp, #-28]	; 0xffffffe4
   14eb8:	ldr	r2, [fp, #-8]
   14ebc:	ldr	r3, [fp, #-24]	; 0xffffffe8
   14ec0:	cmp	r2, r3
   14ec4:	bgt	14ed8 <__assert_fail@plt+0x3af4>
   14ec8:	ldr	r3, [pc, #108]	; 14f3c <__assert_fail@plt+0x3b58>
   14ecc:	ldr	r3, [r3]
   14ed0:	cmp	r3, #0
   14ed4:	bne	14d94 <__assert_fail@plt+0x39b0>
   14ed8:	ldr	r3, [pc, #84]	; 14f34 <__assert_fail@plt+0x3b50>
   14edc:	ldr	r2, [r3]
   14ee0:	ldr	r3, [fp, #-16]
   14ee4:	lsl	r3, r3, #2
   14ee8:	add	r3, r2, r3
   14eec:	ldr	r2, [fp, #-20]	; 0xffffffec
   14ef0:	str	r2, [r3]
   14ef4:	ldr	r3, [pc, #36]	; 14f20 <__assert_fail@plt+0x3b3c>
   14ef8:	ldrb	r3, [r3]
   14efc:	cmp	r3, #0
   14f00:	beq	14f10 <__assert_fail@plt+0x3b2c>
   14f04:	ldr	r3, [fp, #-16]
   14f08:	mov	r0, r3
   14f0c:	bl	14f40 <__assert_fail@plt+0x3b5c>
   14f10:	nop			; (mov r0, r0)
   14f14:	sub	sp, fp, #4
   14f18:	pop	{fp, pc}
   14f1c:	andeq	r4, r3, r0, lsl #4
   14f20:	andeq	r4, r3, fp, lsl r2
   14f24:	andeq	r4, r3, ip, asr r1
   14f28:	strdeq	r4, [r3], -r8
   14f2c:	andeq	r4, r3, ip, lsl r2
   14f30:	andeq	r4, r3, r8, lsr r2
   14f34:	andeq	r4, r3, r8, lsl #4
   14f38:	andeq	r4, r3, ip, lsl #4
   14f3c:	andeq	r4, r3, r8, asr #4
   14f40:	push	{fp, lr}
   14f44:	add	fp, sp, #4
   14f48:	sub	sp, sp, #24
   14f4c:	str	r0, [fp, #-24]	; 0xffffffe8
   14f50:	mov	r3, #0
   14f54:	str	r3, [fp, #-20]	; 0xffffffec
   14f58:	mov	r3, #1
   14f5c:	str	r3, [fp, #-12]
   14f60:	ldr	r3, [pc, #188]	; 15024 <__assert_fail@plt+0x3c40>
   14f64:	ldr	r3, [r3]
   14f68:	str	r3, [fp, #-8]
   14f6c:	b	15004 <__assert_fail@plt+0x3c20>
   14f70:	ldr	r3, [pc, #176]	; 15028 <__assert_fail@plt+0x3c44>
   14f74:	ldr	r3, [r3]
   14f78:	mov	r1, r3
   14f7c:	ldr	r0, [fp, #-24]	; 0xffffffe8
   14f80:	bl	2181c <__assert_fail@plt+0x10438>
   14f84:	mov	r3, r0
   14f88:	str	r3, [fp, #-16]
   14f8c:	ldr	r3, [pc, #148]	; 15028 <__assert_fail@plt+0x3c44>
   14f90:	ldr	r2, [r3]
   14f94:	ldr	r3, [fp, #-24]	; 0xffffffe8
   14f98:	mov	r1, r2
   14f9c:	mov	r0, r3
   14fa0:	bl	21a3c <__assert_fail@plt+0x10658>
   14fa4:	mov	r3, r1
   14fa8:	mov	r2, r3
   14fac:	ldr	r3, [fp, #-12]
   14fb0:	cmp	r2, r3
   14fb4:	blt	14fc4 <__assert_fail@plt+0x3be0>
   14fb8:	ldr	r3, [fp, #-16]
   14fbc:	add	r3, r3, #1
   14fc0:	str	r3, [fp, #-16]
   14fc4:	ldr	r3, [fp, #-8]
   14fc8:	ldr	r2, [fp, #-16]
   14fcc:	str	r2, [r3, #24]
   14fd0:	ldr	r3, [fp, #-8]
   14fd4:	ldr	r2, [fp, #-20]	; 0xffffffec
   14fd8:	str	r2, [r3, #20]
   14fdc:	ldr	r2, [fp, #-20]	; 0xffffffec
   14fe0:	ldr	r3, [fp, #-16]
   14fe4:	add	r3, r2, r3
   14fe8:	str	r3, [fp, #-20]	; 0xffffffec
   14fec:	ldr	r3, [fp, #-12]
   14ff0:	add	r3, r3, #1
   14ff4:	str	r3, [fp, #-12]
   14ff8:	ldr	r3, [fp, #-8]
   14ffc:	add	r3, r3, #40	; 0x28
   15000:	str	r3, [fp, #-8]
   15004:	ldr	r3, [pc, #28]	; 15028 <__assert_fail@plt+0x3c44>
   15008:	ldr	r3, [r3]
   1500c:	ldr	r2, [fp, #-12]
   15010:	cmp	r2, r3
   15014:	ble	14f70 <__assert_fail@plt+0x3b8c>
   15018:	nop			; (mov r0, r0)
   1501c:	sub	sp, fp, #4
   15020:	pop	{fp, pc}
   15024:	strdeq	r4, [r3], -r8
   15028:	andeq	r4, r3, ip, asr r1
   1502c:	push	{fp, lr}
   15030:	add	fp, sp, #4
   15034:	sub	sp, sp, #8
   15038:	mov	r3, r0
   1503c:	strb	r3, [fp, #-5]
   15040:	ldr	r3, [pc, #100]	; 150ac <__assert_fail@plt+0x3cc8>
   15044:	ldr	r2, [r3]
   15048:	ldr	r3, [pc, #96]	; 150b0 <__assert_fail@plt+0x3ccc>
   1504c:	ldr	r3, [r3]
   15050:	cmp	r2, r3
   15054:	bcc	15078 <__assert_fail@plt+0x3c94>
   15058:	ldr	r3, [pc, #84]	; 150b4 <__assert_fail@plt+0x3cd0>
   1505c:	ldr	r3, [r3]
   15060:	ldr	r1, [pc, #72]	; 150b0 <__assert_fail@plt+0x3ccc>
   15064:	mov	r0, r3
   15068:	bl	1e14c <__assert_fail@plt+0xcd68>
   1506c:	mov	r2, r0
   15070:	ldr	r3, [pc, #60]	; 150b4 <__assert_fail@plt+0x3cd0>
   15074:	str	r2, [r3]
   15078:	ldr	r3, [pc, #52]	; 150b4 <__assert_fail@plt+0x3cd0>
   1507c:	ldr	r2, [r3]
   15080:	ldr	r3, [pc, #36]	; 150ac <__assert_fail@plt+0x3cc8>
   15084:	ldr	r3, [r3]
   15088:	add	r1, r3, #1
   1508c:	ldr	r0, [pc, #24]	; 150ac <__assert_fail@plt+0x3cc8>
   15090:	str	r1, [r0]
   15094:	add	r3, r2, r3
   15098:	ldrb	r2, [fp, #-5]
   1509c:	strb	r2, [r3]
   150a0:	nop			; (mov r0, r0)
   150a4:	sub	sp, fp, #4
   150a8:	pop	{fp, pc}
   150ac:	andeq	r4, r3, r0, lsl #4
   150b0:	andeq	r4, r3, r4, lsl #4
   150b4:	strdeq	r4, [r3], -ip
   150b8:	push	{r4, fp, lr}
   150bc:	add	fp, sp, #8
   150c0:	sub	sp, sp, #28
   150c4:	str	r0, [fp, #-32]	; 0xffffffe0
   150c8:	ldr	r3, [pc, #464]	; 152a0 <__assert_fail@plt+0x3ebc>
   150cc:	ldr	r0, [r3]
   150d0:	ldr	r3, [pc, #460]	; 152a4 <__assert_fail@plt+0x3ec0>
   150d4:	ldr	r2, [r3]
   150d8:	ldr	r3, [pc, #456]	; 152a8 <__assert_fail@plt+0x3ec4>
   150dc:	ldr	r3, [r3]
   150e0:	ldr	r1, [pc, #452]	; 152ac <__assert_fail@plt+0x3ec8>
   150e4:	bl	1136c <sprintf@plt>
   150e8:	str	r0, [fp, #-24]	; 0xffffffe8
   150ec:	ldr	r3, [pc, #436]	; 152a8 <__assert_fail@plt+0x3ec4>
   150f0:	ldr	r3, [r3]
   150f4:	add	r3, r3, #1
   150f8:	ldr	r2, [pc, #424]	; 152a8 <__assert_fail@plt+0x3ec4>
   150fc:	str	r3, [r2]
   15100:	ldr	r3, [pc, #408]	; 152a0 <__assert_fail@plt+0x3ebc>
   15104:	ldr	r3, [r3]
   15108:	ldr	r2, [pc, #404]	; 152a4 <__assert_fail@plt+0x3ec0>
   1510c:	ldr	r2, [r2]
   15110:	ldr	r1, [fp, #-24]	; 0xffffffe8
   15114:	sub	r2, r1, r2
   15118:	add	r3, r3, r2
   1511c:	str	r3, [fp, #-20]	; 0xffffffec
   15120:	ldr	r3, [pc, #380]	; 152a4 <__assert_fail@plt+0x3ec0>
   15124:	ldr	r3, [r3]
   15128:	str	r3, [fp, #-16]
   1512c:	b	1515c <__assert_fail@plt+0x3d78>
   15130:	ldr	r3, [fp, #-32]	; 0xffffffe0
   15134:	ldr	r2, [r3, #16]
   15138:	ldr	r3, [fp, #-20]	; 0xffffffec
   1513c:	add	r1, r3, #1
   15140:	str	r1, [fp, #-20]	; 0xffffffec
   15144:	ldrb	r3, [r3]
   15148:	mov	r0, r3
   1514c:	blx	r2
   15150:	ldr	r3, [fp, #-16]
   15154:	sub	r3, r3, #1
   15158:	str	r3, [fp, #-16]
   1515c:	ldr	r3, [fp, #-16]
   15160:	cmp	r3, #0
   15164:	bgt	15130 <__assert_fail@plt+0x3d4c>
   15168:	ldr	r3, [pc, #320]	; 152b0 <__assert_fail@plt+0x3ecc>
   1516c:	ldr	r3, [r3]
   15170:	cmp	r3, #1
   15174:	ble	151e8 <__assert_fail@plt+0x3e04>
   15178:	ldr	r3, [pc, #308]	; 152b4 <__assert_fail@plt+0x3ed0>
   1517c:	ldrb	r3, [r3]
   15180:	cmp	r3, #9
   15184:	bne	151cc <__assert_fail@plt+0x3de8>
   15188:	ldr	r3, [pc, #296]	; 152b8 <__assert_fail@plt+0x3ed4>
   1518c:	ldr	r2, [r3]
   15190:	ldr	r3, [pc, #268]	; 152a4 <__assert_fail@plt+0x3ec0>
   15194:	ldr	r3, [r3]
   15198:	sub	r3, r2, r3
   1519c:	str	r3, [fp, #-16]
   151a0:	b	151b4 <__assert_fail@plt+0x3dd0>
   151a4:	ldr	r3, [fp, #-32]	; 0xffffffe0
   151a8:	ldr	r3, [r3, #16]
   151ac:	mov	r0, #32
   151b0:	blx	r3
   151b4:	ldr	r3, [fp, #-16]
   151b8:	sub	r2, r3, #1
   151bc:	str	r2, [fp, #-16]
   151c0:	cmp	r3, #0
   151c4:	bgt	151a4 <__assert_fail@plt+0x3dc0>
   151c8:	b	15250 <__assert_fail@plt+0x3e6c>
   151cc:	ldr	r3, [fp, #-32]	; 0xffffffe0
   151d0:	ldr	r3, [r3, #16]
   151d4:	ldr	r2, [pc, #216]	; 152b4 <__assert_fail@plt+0x3ed0>
   151d8:	ldrb	r2, [r2]
   151dc:	mov	r0, r2
   151e0:	blx	r3
   151e4:	b	15250 <__assert_fail@plt+0x3e6c>
   151e8:	ldr	r3, [fp, #-32]	; 0xffffffe0
   151ec:	ldr	r3, [r3, #16]
   151f0:	ldr	r2, [pc, #188]	; 152b4 <__assert_fail@plt+0x3ed0>
   151f4:	ldrb	r2, [r2]
   151f8:	mov	r0, r2
   151fc:	blx	r3
   15200:	ldr	r3, [pc, #172]	; 152b4 <__assert_fail@plt+0x3ed0>
   15204:	ldrb	r3, [r3]
   15208:	cmp	r3, #9
   1520c:	bne	15250 <__assert_fail@plt+0x3e6c>
   15210:	ldr	r3, [pc, #164]	; 152bc <__assert_fail@plt+0x3ed8>
   15214:	ldr	r4, [r3]
   15218:	ldr	r3, [pc, #160]	; 152c0 <__assert_fail@plt+0x3edc>
   1521c:	ldr	r2, [r3]
   15220:	ldr	r3, [pc, #148]	; 152bc <__assert_fail@plt+0x3ed8>
   15224:	ldr	r3, [r3]
   15228:	mov	r1, r3
   1522c:	mov	r0, r2
   15230:	bl	21a3c <__assert_fail@plt+0x10658>
   15234:	mov	r3, r1
   15238:	sub	r2, r4, r3
   1523c:	ldr	r3, [pc, #124]	; 152c0 <__assert_fail@plt+0x3edc>
   15240:	ldr	r3, [r3]
   15244:	add	r3, r2, r3
   15248:	ldr	r2, [pc, #112]	; 152c0 <__assert_fail@plt+0x3edc>
   1524c:	str	r3, [r2]
   15250:	ldr	r3, [pc, #108]	; 152c4 <__assert_fail@plt+0x3ee0>
   15254:	ldrb	r3, [r3]
   15258:	cmp	r3, #0
   1525c:	beq	15294 <__assert_fail@plt+0x3eb0>
   15260:	ldr	r3, [pc, #96]	; 152c8 <__assert_fail@plt+0x3ee4>
   15264:	ldrb	r3, [r3]
   15268:	eor	r3, r3, #1
   1526c:	uxtb	r3, r3
   15270:	cmp	r3, #0
   15274:	beq	15294 <__assert_fail@plt+0x3eb0>
   15278:	ldr	r3, [pc, #76]	; 152cc <__assert_fail@plt+0x3ee8>
   1527c:	ldr	r2, [r3]
   15280:	ldr	r3, [pc, #48]	; 152b8 <__assert_fail@plt+0x3ed4>
   15284:	ldr	r3, [r3]
   15288:	add	r3, r2, r3
   1528c:	ldr	r2, [pc, #56]	; 152cc <__assert_fail@plt+0x3ee8>
   15290:	str	r3, [r2]
   15294:	nop			; (mov r0, r0)
   15298:	sub	sp, fp, #8
   1529c:	pop	{r4, fp, pc}
   152a0:	andeq	r4, r3, r4, ror #4
   152a4:	andeq	r4, r3, r8, ror r1
   152a8:	andeq	r4, r3, r8, asr r2
   152ac:	andeq	r2, r2, r4, asr r5
   152b0:	andeq	r4, r3, ip, asr r1
   152b4:	andeq	r4, r3, r8, ror #2
   152b8:	andeq	r4, r3, r0, ror #4
   152bc:	andeq	r4, r3, r8, asr r1
   152c0:	andeq	r4, r3, r4, lsr r2
   152c4:	andeq	r4, r3, r0, lsr #4
   152c8:	andeq	r4, r3, r0, lsl r2
   152cc:	andeq	r4, r3, r8, lsr r2
   152d0:	push	{fp, lr}
   152d4:	add	fp, sp, #4
   152d8:	sub	sp, sp, #16
   152dc:	str	r0, [fp, #-16]
   152e0:	ldr	r3, [pc, #108]	; 15354 <__assert_fail@plt+0x3f70>
   152e4:	ldr	r3, [r3]
   152e8:	str	r3, [fp, #-8]
   152ec:	ldr	r3, [pc, #100]	; 15358 <__assert_fail@plt+0x3f74>
   152f0:	ldrb	r3, [r3]
   152f4:	cmp	r3, #0
   152f8:	beq	15320 <__assert_fail@plt+0x3f3c>
   152fc:	ldr	r3, [pc, #80]	; 15354 <__assert_fail@plt+0x3f70>
   15300:	ldr	r3, [r3]
   15304:	ldr	r2, [fp, #-16]
   15308:	sub	r3, r2, r3
   1530c:	ldr	r2, [pc, #72]	; 1535c <__assert_fail@plt+0x3f78>
   15310:	str	r3, [r2]
   15314:	b	15348 <__assert_fail@plt+0x3f64>
   15318:	mov	r0, #32
   1531c:	bl	113d8 <putchar_unlocked@plt>
   15320:	ldr	r3, [fp, #-8]
   15324:	add	r3, r3, #1
   15328:	str	r3, [fp, #-8]
   1532c:	ldr	r2, [fp, #-8]
   15330:	ldr	r3, [fp, #-16]
   15334:	cmp	r2, r3
   15338:	ble	15318 <__assert_fail@plt+0x3f34>
   1533c:	ldr	r2, [pc, #16]	; 15354 <__assert_fail@plt+0x3f70>
   15340:	ldr	r3, [fp, #-16]
   15344:	str	r3, [r2]
   15348:	nop			; (mov r0, r0)
   1534c:	sub	sp, fp, #4
   15350:	pop	{fp, pc}
   15354:	andeq	r4, r3, r4, lsr r2
   15358:	andeq	r4, r3, r9, lsr #4
   1535c:	andeq	r4, r3, ip, lsr #4
   15360:	push	{fp, lr}
   15364:	add	fp, sp, #4
   15368:	sub	sp, sp, #16
   1536c:	str	r0, [fp, #-16]
   15370:	ldr	r3, [pc, #76]	; 153c4 <__assert_fail@plt+0x3fe0>
   15374:	ldrb	r3, [r3]
   15378:	cmp	r3, #0
   1537c:	beq	1538c <__assert_fail@plt+0x3fa8>
   15380:	mov	r0, #12
   15384:	bl	113d8 <putchar_unlocked@plt>
   15388:	b	153b8 <__assert_fail@plt+0x3fd4>
   1538c:	ldr	r3, [fp, #-16]
   15390:	str	r3, [fp, #-8]
   15394:	b	153ac <__assert_fail@plt+0x3fc8>
   15398:	mov	r0, #10
   1539c:	bl	113d8 <putchar_unlocked@plt>
   153a0:	ldr	r3, [fp, #-8]
   153a4:	sub	r3, r3, #1
   153a8:	str	r3, [fp, #-8]
   153ac:	ldr	r3, [fp, #-8]
   153b0:	cmp	r3, #0
   153b4:	bne	15398 <__assert_fail@plt+0x3fb4>
   153b8:	nop			; (mov r0, r0)
   153bc:	sub	sp, fp, #4
   153c0:	pop	{fp, pc}
   153c4:	andeq	r4, r3, r8, lsl r2
   153c8:	push	{fp, lr}
   153cc:	add	fp, sp, #4
   153d0:	sub	sp, sp, #16
   153d4:	str	r0, [fp, #-16]
   153d8:	ldr	r3, [fp, #-16]
   153dc:	ldr	r3, [r3]
   153e0:	str	r3, [fp, #-8]
   153e4:	b	15458 <__assert_fail@plt+0x4074>
   153e8:	ldr	r3, [fp, #-12]
   153ec:	cmp	r3, #12
   153f0:	bne	15440 <__assert_fail@plt+0x405c>
   153f4:	ldr	r0, [fp, #-8]
   153f8:	bl	11168 <getc_unlocked@plt>
   153fc:	str	r0, [fp, #-12]
   15400:	ldr	r3, [fp, #-12]
   15404:	cmp	r3, #10
   15408:	beq	15418 <__assert_fail@plt+0x4034>
   1540c:	ldr	r1, [fp, #-8]
   15410:	ldr	r0, [fp, #-12]
   15414:	bl	112c4 <ungetc@plt>
   15418:	ldr	r3, [pc, #92]	; 1547c <__assert_fail@plt+0x4098>
   1541c:	ldrb	r3, [r3]
   15420:	cmp	r3, #0
   15424:	beq	15434 <__assert_fail@plt+0x4050>
   15428:	ldr	r3, [pc, #80]	; 15480 <__assert_fail@plt+0x409c>
   1542c:	mov	r2, #1
   15430:	strb	r2, [r3]
   15434:	ldr	r0, [fp, #-16]
   15438:	bl	13b90 <__assert_fail@plt+0x27ac>
   1543c:	b	15470 <__assert_fail@plt+0x408c>
   15440:	ldr	r3, [fp, #-12]
   15444:	cmn	r3, #1
   15448:	bne	15458 <__assert_fail@plt+0x4074>
   1544c:	ldr	r0, [fp, #-16]
   15450:	bl	139c8 <__assert_fail@plt+0x25e4>
   15454:	b	15470 <__assert_fail@plt+0x408c>
   15458:	ldr	r0, [fp, #-8]
   1545c:	bl	11168 <getc_unlocked@plt>
   15460:	str	r0, [fp, #-12]
   15464:	ldr	r3, [fp, #-12]
   15468:	cmp	r3, #10
   1546c:	bne	153e8 <__assert_fail@plt+0x4004>
   15470:	nop			; (mov r0, r0)
   15474:	sub	sp, fp, #4
   15478:	pop	{fp, pc}
   1547c:	andeq	r4, r3, r5, lsl r2
   15480:	andeq	r4, r3, r6, lsl r2
   15484:	push	{fp, lr}
   15488:	add	fp, sp, #4
   1548c:	sub	sp, sp, #32
   15490:	str	r0, [fp, #-32]	; 0xffffffe0
   15494:	str	r1, [fp, #-36]	; 0xffffffdc
   15498:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1549c:	ldr	r3, [r3]
   154a0:	str	r3, [fp, #-24]	; 0xffffffe8
   154a4:	mov	r3, #0
   154a8:	strb	r3, [fp, #-13]
   154ac:	ldr	r0, [fp, #-24]	; 0xffffffe8
   154b0:	bl	11168 <getc_unlocked@plt>
   154b4:	str	r0, [fp, #-8]
   154b8:	ldr	r3, [fp, #-8]
   154bc:	cmp	r3, #12
   154c0:	bne	154f8 <__assert_fail@plt+0x4114>
   154c4:	ldr	r3, [fp, #-32]	; 0xffffffe0
   154c8:	ldrb	r3, [r3, #37]	; 0x25
   154cc:	cmp	r3, #0
   154d0:	beq	154f8 <__assert_fail@plt+0x4114>
   154d4:	ldr	r0, [fp, #-24]	; 0xffffffe8
   154d8:	bl	11168 <getc_unlocked@plt>
   154dc:	str	r0, [fp, #-8]
   154e0:	ldr	r3, [fp, #-8]
   154e4:	cmp	r3, #10
   154e8:	bne	154f8 <__assert_fail@plt+0x4114>
   154ec:	ldr	r0, [fp, #-24]	; 0xffffffe8
   154f0:	bl	11168 <getc_unlocked@plt>
   154f4:	str	r0, [fp, #-8]
   154f8:	ldr	r3, [fp, #-32]	; 0xffffffe0
   154fc:	mov	r2, #0
   15500:	strb	r2, [r3, #37]	; 0x25
   15504:	ldr	r3, [fp, #-8]
   15508:	cmp	r3, #12
   1550c:	bne	15518 <__assert_fail@plt+0x4134>
   15510:	mov	r3, #1
   15514:	strb	r3, [fp, #-13]
   15518:	ldr	r3, [pc, #368]	; 15690 <__assert_fail@plt+0x42ac>
   1551c:	ldrb	r3, [r3]
   15520:	cmp	r3, #0
   15524:	beq	1561c <__assert_fail@plt+0x4238>
   15528:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1552c:	mov	r2, #1
   15530:	strb	r2, [r3, #37]	; 0x25
   15534:	b	1561c <__assert_fail@plt+0x4238>
   15538:	ldr	r3, [fp, #-8]
   1553c:	cmp	r3, #12
   15540:	bne	155f8 <__assert_fail@plt+0x4214>
   15544:	ldr	r3, [pc, #324]	; 15690 <__assert_fail@plt+0x42ac>
   15548:	ldrb	r3, [r3]
   1554c:	cmp	r3, #0
   15550:	beq	155c8 <__assert_fail@plt+0x41e4>
   15554:	ldr	r3, [pc, #312]	; 15694 <__assert_fail@plt+0x42b0>
   15558:	ldrb	r3, [r3]
   1555c:	eor	r3, r3, #1
   15560:	uxtb	r3, r3
   15564:	cmp	r3, #0
   15568:	beq	155bc <__assert_fail@plt+0x41d8>
   1556c:	ldr	r3, [pc, #292]	; 15698 <__assert_fail@plt+0x42b4>
   15570:	ldr	r3, [r3]
   15574:	str	r3, [fp, #-20]	; 0xffffffec
   15578:	ldr	r3, [pc, #284]	; 1569c <__assert_fail@plt+0x42b8>
   1557c:	ldr	r3, [r3]
   15580:	str	r3, [fp, #-12]
   15584:	b	155ac <__assert_fail@plt+0x41c8>
   15588:	ldr	r3, [fp, #-20]	; 0xffffffec
   1558c:	mov	r2, #0
   15590:	strb	r2, [r3, #37]	; 0x25
   15594:	ldr	r3, [fp, #-20]	; 0xffffffec
   15598:	add	r3, r3, #40	; 0x28
   1559c:	str	r3, [fp, #-20]	; 0xffffffec
   155a0:	ldr	r3, [fp, #-12]
   155a4:	sub	r3, r3, #1
   155a8:	str	r3, [fp, #-12]
   155ac:	ldr	r3, [fp, #-12]
   155b0:	cmp	r3, #0
   155b4:	bne	15588 <__assert_fail@plt+0x41a4>
   155b8:	b	155c8 <__assert_fail@plt+0x41e4>
   155bc:	ldr	r3, [fp, #-32]	; 0xffffffe0
   155c0:	mov	r2, #0
   155c4:	strb	r2, [r3, #37]	; 0x25
   155c8:	ldr	r0, [fp, #-24]	; 0xffffffe8
   155cc:	bl	11168 <getc_unlocked@plt>
   155d0:	str	r0, [fp, #-8]
   155d4:	ldr	r3, [fp, #-8]
   155d8:	cmp	r3, #10
   155dc:	beq	155ec <__assert_fail@plt+0x4208>
   155e0:	ldr	r1, [fp, #-24]	; 0xffffffe8
   155e4:	ldr	r0, [fp, #-8]
   155e8:	bl	112c4 <ungetc@plt>
   155ec:	ldr	r0, [fp, #-32]	; 0xffffffe0
   155f0:	bl	13b90 <__assert_fail@plt+0x27ac>
   155f4:	b	15628 <__assert_fail@plt+0x4244>
   155f8:	ldr	r3, [fp, #-8]
   155fc:	cmn	r3, #1
   15600:	bne	15610 <__assert_fail@plt+0x422c>
   15604:	ldr	r0, [fp, #-32]	; 0xffffffe0
   15608:	bl	139c8 <__assert_fail@plt+0x25e4>
   1560c:	b	15628 <__assert_fail@plt+0x4244>
   15610:	ldr	r0, [fp, #-24]	; 0xffffffe8
   15614:	bl	11168 <getc_unlocked@plt>
   15618:	str	r0, [fp, #-8]
   1561c:	ldr	r3, [fp, #-8]
   15620:	cmp	r3, #10
   15624:	bne	15538 <__assert_fail@plt+0x4154>
   15628:	ldr	r3, [pc, #112]	; 156a0 <__assert_fail@plt+0x42bc>
   1562c:	ldrb	r3, [r3]
   15630:	cmp	r3, #0
   15634:	beq	15684 <__assert_fail@plt+0x42a0>
   15638:	ldr	r3, [pc, #84]	; 15694 <__assert_fail@plt+0x42b0>
   1563c:	ldrb	r3, [r3]
   15640:	eor	r3, r3, #1
   15644:	uxtb	r3, r3
   15648:	cmp	r3, #0
   1564c:	bne	1565c <__assert_fail@plt+0x4278>
   15650:	ldr	r3, [fp, #-36]	; 0xffffffdc
   15654:	cmp	r3, #1
   15658:	bne	15684 <__assert_fail@plt+0x42a0>
   1565c:	ldrb	r3, [fp, #-13]
   15660:	eor	r3, r3, #1
   15664:	uxtb	r3, r3
   15668:	cmp	r3, #0
   1566c:	beq	15684 <__assert_fail@plt+0x42a0>
   15670:	ldr	r3, [pc, #44]	; 156a4 <__assert_fail@plt+0x42c0>
   15674:	ldr	r3, [r3]
   15678:	add	r3, r3, #1
   1567c:	ldr	r2, [pc, #32]	; 156a4 <__assert_fail@plt+0x42c0>
   15680:	str	r3, [r2]
   15684:	nop			; (mov r0, r0)
   15688:	sub	sp, fp, #4
   1568c:	pop	{fp, pc}
   15690:	andeq	r4, r3, r0, lsr #5
   15694:	andeq	r4, r3, r0, lsl r2
   15698:	strdeq	r4, [r3], -r8
   1569c:	andeq	r4, r3, ip, asr r1
   156a0:	andeq	r4, r3, r0, ror r1
   156a4:	andeq	r4, r3, ip, ror #2
   156a8:	push	{r4, fp, lr}
   156ac:	add	fp, sp, #8
   156b0:	sub	sp, sp, #20
   156b4:	ldr	r3, [pc, #216]	; 15794 <__assert_fail@plt+0x43b0>
   156b8:	ldr	r3, [r3]
   156bc:	str	r3, [fp, #-16]
   156c0:	ldr	r3, [pc, #208]	; 15798 <__assert_fail@plt+0x43b4>
   156c4:	ldr	r3, [r3]
   156c8:	ldr	r2, [fp, #-16]
   156cc:	add	r3, r2, r3
   156d0:	str	r3, [fp, #-20]	; 0xffffffec
   156d4:	b	156f0 <__assert_fail@plt+0x430c>
   156d8:	ldr	r3, [pc, #188]	; 1579c <__assert_fail@plt+0x43b8>
   156dc:	ldrb	r3, [r3]
   156e0:	mov	r0, r3
   156e4:	bl	113d8 <putchar_unlocked@plt>
   156e8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   156ec:	str	r3, [fp, #-16]
   156f0:	ldr	r2, [fp, #-20]	; 0xffffffec
   156f4:	ldr	r3, [fp, #-16]
   156f8:	sub	r3, r2, r3
   156fc:	cmp	r3, #1
   15700:	ble	15754 <__assert_fail@plt+0x4370>
   15704:	ldr	r3, [pc, #148]	; 157a0 <__assert_fail@plt+0x43bc>
   15708:	ldr	r4, [r3]
   1570c:	ldr	r3, [pc, #140]	; 157a0 <__assert_fail@plt+0x43bc>
   15710:	ldr	r2, [r3]
   15714:	ldr	r3, [fp, #-16]
   15718:	mov	r1, r2
   1571c:	mov	r0, r3
   15720:	bl	21a3c <__assert_fail@plt+0x10658>
   15724:	mov	r3, r1
   15728:	sub	r2, r4, r3
   1572c:	ldr	r3, [fp, #-16]
   15730:	add	r3, r2, r3
   15734:	str	r3, [fp, #-24]	; 0xffffffe8
   15738:	ldr	r2, [fp, #-24]	; 0xffffffe8
   1573c:	ldr	r3, [fp, #-20]	; 0xffffffec
   15740:	cmp	r2, r3
   15744:	ble	156d8 <__assert_fail@plt+0x42f4>
   15748:	b	15754 <__assert_fail@plt+0x4370>
   1574c:	mov	r0, #32
   15750:	bl	113d8 <putchar_unlocked@plt>
   15754:	ldr	r3, [fp, #-16]
   15758:	add	r3, r3, #1
   1575c:	str	r3, [fp, #-16]
   15760:	ldr	r2, [fp, #-16]
   15764:	ldr	r3, [fp, #-20]	; 0xffffffec
   15768:	cmp	r2, r3
   1576c:	ble	1574c <__assert_fail@plt+0x4368>
   15770:	ldr	r2, [pc, #28]	; 15794 <__assert_fail@plt+0x43b0>
   15774:	ldr	r3, [fp, #-20]	; 0xffffffec
   15778:	str	r3, [r2]
   1577c:	ldr	r3, [pc, #20]	; 15798 <__assert_fail@plt+0x43b4>
   15780:	mov	r2, #0
   15784:	str	r2, [r3]
   15788:	nop			; (mov r0, r0)
   1578c:	sub	sp, fp, #8
   15790:	pop	{r4, fp, pc}
   15794:	andeq	r4, r3, r4, lsr r2
   15798:	andeq	r4, r3, ip, lsr #4
   1579c:	andeq	r4, r3, r4, asr r1
   157a0:	andeq	r4, r3, r8, asr r1
   157a4:	push	{fp, lr}
   157a8:	add	fp, sp, #4
   157ac:	sub	sp, sp, #8
   157b0:	ldr	r3, [pc, #260]	; 158bc <__assert_fail@plt+0x44d8>
   157b4:	ldr	r3, [r3]
   157b8:	str	r3, [fp, #-8]
   157bc:	ldr	r3, [pc, #252]	; 158c0 <__assert_fail@plt+0x44dc>
   157c0:	ldr	r3, [r3]
   157c4:	str	r3, [fp, #-12]
   157c8:	ldr	r3, [pc, #244]	; 158c4 <__assert_fail@plt+0x44e0>
   157cc:	ldr	r3, [r3]
   157d0:	cmp	r3, #0
   157d4:	bgt	158a0 <__assert_fail@plt+0x44bc>
   157d8:	ldr	r3, [pc, #232]	; 158c8 <__assert_fail@plt+0x44e4>
   157dc:	ldr	r3, [r3]
   157e0:	cmp	r3, #0
   157e4:	ble	158b0 <__assert_fail@plt+0x44cc>
   157e8:	bl	156a8 <__assert_fail@plt+0x42c4>
   157ec:	b	158b0 <__assert_fail@plt+0x44cc>
   157f0:	ldr	r3, [fp, #-8]
   157f4:	ldrb	r3, [r3]
   157f8:	cmp	r3, #32
   157fc:	bne	15824 <__assert_fail@plt+0x4440>
   15800:	ldr	r3, [fp, #-8]
   15804:	add	r3, r3, #1
   15808:	str	r3, [fp, #-8]
   1580c:	ldr	r3, [pc, #180]	; 158c8 <__assert_fail@plt+0x44e4>
   15810:	ldr	r3, [r3]
   15814:	add	r3, r3, #1
   15818:	ldr	r2, [pc, #168]	; 158c8 <__assert_fail@plt+0x44e4>
   1581c:	str	r3, [r2]
   15820:	b	15864 <__assert_fail@plt+0x4480>
   15824:	ldr	r3, [pc, #156]	; 158c8 <__assert_fail@plt+0x44e4>
   15828:	ldr	r3, [r3]
   1582c:	cmp	r3, #0
   15830:	ble	15838 <__assert_fail@plt+0x4454>
   15834:	bl	156a8 <__assert_fail@plt+0x42c4>
   15838:	ldr	r3, [fp, #-8]
   1583c:	add	r2, r3, #1
   15840:	str	r2, [fp, #-8]
   15844:	ldrb	r3, [r3]
   15848:	mov	r0, r3
   1584c:	bl	113d8 <putchar_unlocked@plt>
   15850:	ldr	r3, [pc, #116]	; 158cc <__assert_fail@plt+0x44e8>
   15854:	ldr	r3, [r3]
   15858:	add	r3, r3, #1
   1585c:	ldr	r2, [pc, #104]	; 158cc <__assert_fail@plt+0x44e8>
   15860:	str	r3, [r2]
   15864:	ldr	r3, [fp, #-12]
   15868:	sub	r2, r3, #1
   1586c:	str	r2, [fp, #-12]
   15870:	cmp	r3, #0
   15874:	bgt	157f0 <__assert_fail@plt+0x440c>
   15878:	ldr	r3, [pc, #72]	; 158c8 <__assert_fail@plt+0x44e4>
   1587c:	ldr	r3, [r3]
   15880:	cmp	r3, #0
   15884:	ble	1588c <__assert_fail@plt+0x44a8>
   15888:	bl	156a8 <__assert_fail@plt+0x42c4>
   1588c:	ldr	r3, [pc, #48]	; 158c4 <__assert_fail@plt+0x44e0>
   15890:	ldr	r3, [r3]
   15894:	sub	r3, r3, #1
   15898:	ldr	r2, [pc, #36]	; 158c4 <__assert_fail@plt+0x44e0>
   1589c:	str	r3, [r2]
   158a0:	ldr	r3, [pc, #28]	; 158c4 <__assert_fail@plt+0x44e0>
   158a4:	ldr	r3, [r3]
   158a8:	cmp	r3, #0
   158ac:	bgt	15864 <__assert_fail@plt+0x4480>
   158b0:	nop			; (mov r0, r0)
   158b4:	sub	sp, fp, #4
   158b8:	pop	{fp, pc}
   158bc:	andeq	r4, r3, ip, ror r1
   158c0:	andeq	r4, r3, r4, ror r2
   158c4:	andeq	r4, r3, r8, ror r2
   158c8:	andeq	r4, r3, ip, lsr #4
   158cc:	andeq	r4, r3, r4, lsr r2
   158d0:	push	{fp, lr}
   158d4:	add	fp, sp, #4
   158d8:	sub	sp, sp, #16
   158dc:	str	r0, [fp, #-8]
   158e0:	str	r1, [fp, #-12]
   158e4:	str	r2, [fp, #-16]
   158e8:	b	1590c <__assert_fail@plt+0x4528>
   158ec:	ldr	r3, [fp, #-8]
   158f0:	ldr	r2, [r3, #16]
   158f4:	ldr	r3, [fp, #-16]
   158f8:	add	r1, r3, #1
   158fc:	str	r1, [fp, #-16]
   15900:	ldrb	r3, [r3]
   15904:	mov	r0, r3
   15908:	blx	r2
   1590c:	ldr	r3, [fp, #-12]
   15910:	sub	r2, r3, #1
   15914:	str	r2, [fp, #-12]
   15918:	cmp	r3, #0
   1591c:	bne	158ec <__assert_fail@plt+0x4508>
   15920:	nop			; (mov r0, r0)
   15924:	sub	sp, fp, #4
   15928:	pop	{fp, pc}
   1592c:	push	{r4, fp, lr}
   15930:	add	fp, sp, #8
   15934:	sub	sp, sp, #12
   15938:	mov	r3, r0
   1593c:	strb	r3, [fp, #-13]
   15940:	ldr	r3, [pc, #192]	; 15a08 <__assert_fail@plt+0x4624>
   15944:	ldrb	r3, [r3]
   15948:	cmp	r3, #0
   1594c:	beq	159f4 <__assert_fail@plt+0x4610>
   15950:	ldrb	r3, [fp, #-13]
   15954:	cmp	r3, #32
   15958:	bne	15974 <__assert_fail@plt+0x4590>
   1595c:	ldr	r3, [pc, #168]	; 15a0c <__assert_fail@plt+0x4628>
   15960:	ldr	r3, [r3]
   15964:	add	r3, r3, #1
   15968:	ldr	r2, [pc, #156]	; 15a0c <__assert_fail@plt+0x4628>
   1596c:	str	r3, [r2]
   15970:	b	15a00 <__assert_fail@plt+0x461c>
   15974:	ldr	r3, [pc, #144]	; 15a0c <__assert_fail@plt+0x4628>
   15978:	ldr	r3, [r3]
   1597c:	cmp	r3, #0
   15980:	ble	15988 <__assert_fail@plt+0x45a4>
   15984:	bl	156a8 <__assert_fail@plt+0x42c4>
   15988:	bl	11270 <__ctype_b_loc@plt>
   1598c:	mov	r3, r0
   15990:	ldr	r4, [r3]
   15994:	ldrb	r3, [fp, #-13]
   15998:	mov	r0, r3
   1599c:	bl	11518 <__assert_fail@plt+0x134>
   159a0:	mov	r3, r0
   159a4:	lsl	r3, r3, #1
   159a8:	add	r3, r4, r3
   159ac:	ldrh	r3, [r3]
   159b0:	and	r3, r3, #16384	; 0x4000
   159b4:	cmp	r3, #0
   159b8:	bne	159e0 <__assert_fail@plt+0x45fc>
   159bc:	ldrb	r3, [fp, #-13]
   159c0:	cmp	r3, #8
   159c4:	bne	159f4 <__assert_fail@plt+0x4610>
   159c8:	ldr	r3, [pc, #64]	; 15a10 <__assert_fail@plt+0x462c>
   159cc:	ldr	r3, [r3]
   159d0:	sub	r3, r3, #1
   159d4:	ldr	r2, [pc, #52]	; 15a10 <__assert_fail@plt+0x462c>
   159d8:	str	r3, [r2]
   159dc:	b	159f4 <__assert_fail@plt+0x4610>
   159e0:	ldr	r3, [pc, #40]	; 15a10 <__assert_fail@plt+0x462c>
   159e4:	ldr	r3, [r3]
   159e8:	add	r3, r3, #1
   159ec:	ldr	r2, [pc, #28]	; 15a10 <__assert_fail@plt+0x462c>
   159f0:	str	r3, [r2]
   159f4:	ldrb	r3, [fp, #-13]
   159f8:	mov	r0, r3
   159fc:	bl	113d8 <putchar_unlocked@plt>
   15a00:	sub	sp, fp, #8
   15a04:	pop	{r4, fp, pc}
   15a08:	andeq	r4, r3, r9, lsr #4
   15a0c:	andeq	r4, r3, ip, lsr #4
   15a10:	andeq	r4, r3, r4, lsr r2
   15a14:	push	{fp, lr}
   15a18:	add	fp, sp, #4
   15a1c:	sub	sp, sp, #48	; 0x30
   15a20:	strd	r0, [fp, #-36]	; 0xffffffdc
   15a24:	mov	r2, #1
   15a28:	mov	r3, #0
   15a2c:	strd	r2, [fp, #-12]
   15a30:	b	15bfc <__assert_fail@plt+0x4818>
   15a34:	mov	r3, #1
   15a38:	str	r3, [fp, #-24]	; 0xffffffe8
   15a3c:	b	15aac <__assert_fail@plt+0x46c8>
   15a40:	mov	r3, #1
   15a44:	str	r3, [fp, #-20]	; 0xffffffec
   15a48:	ldr	r3, [pc, #484]	; 15c34 <__assert_fail@plt+0x4850>
   15a4c:	ldr	r3, [r3]
   15a50:	str	r3, [fp, #-16]
   15a54:	b	15a8c <__assert_fail@plt+0x46a8>
   15a58:	ldr	r3, [fp, #-16]
   15a5c:	ldr	r3, [r3, #8]
   15a60:	cmp	r3, #0
   15a64:	bne	15a74 <__assert_fail@plt+0x4690>
   15a68:	ldr	r1, [fp, #-20]	; 0xffffffec
   15a6c:	ldr	r0, [fp, #-16]
   15a70:	bl	15484 <__assert_fail@plt+0x40a0>
   15a74:	ldr	r3, [fp, #-20]	; 0xffffffec
   15a78:	add	r3, r3, #1
   15a7c:	str	r3, [fp, #-20]	; 0xffffffec
   15a80:	ldr	r3, [fp, #-16]
   15a84:	add	r3, r3, #40	; 0x28
   15a88:	str	r3, [fp, #-16]
   15a8c:	ldr	r3, [pc, #420]	; 15c38 <__assert_fail@plt+0x4854>
   15a90:	ldr	r3, [r3]
   15a94:	ldr	r2, [fp, #-20]	; 0xffffffec
   15a98:	cmp	r2, r3
   15a9c:	ble	15a58 <__assert_fail@plt+0x4674>
   15aa0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   15aa4:	add	r3, r3, #1
   15aa8:	str	r3, [fp, #-24]	; 0xffffffe8
   15aac:	ldr	r3, [pc, #392]	; 15c3c <__assert_fail@plt+0x4858>
   15ab0:	ldr	r3, [r3]
   15ab4:	ldr	r2, [fp, #-24]	; 0xffffffe8
   15ab8:	cmp	r2, r3
   15abc:	blt	15a40 <__assert_fail@plt+0x465c>
   15ac0:	ldr	r3, [pc, #376]	; 15c40 <__assert_fail@plt+0x485c>
   15ac4:	mov	r2, #1
   15ac8:	strb	r2, [r3]
   15acc:	mov	r3, #1
   15ad0:	str	r3, [fp, #-20]	; 0xffffffec
   15ad4:	ldr	r3, [pc, #344]	; 15c34 <__assert_fail@plt+0x4850>
   15ad8:	ldr	r3, [r3]
   15adc:	str	r3, [fp, #-16]
   15ae0:	b	15b18 <__assert_fail@plt+0x4734>
   15ae4:	ldr	r3, [fp, #-16]
   15ae8:	ldr	r3, [r3, #8]
   15aec:	cmp	r3, #0
   15af0:	bne	15b00 <__assert_fail@plt+0x471c>
   15af4:	ldr	r1, [fp, #-20]	; 0xffffffec
   15af8:	ldr	r0, [fp, #-16]
   15afc:	bl	15484 <__assert_fail@plt+0x40a0>
   15b00:	ldr	r3, [fp, #-20]	; 0xffffffec
   15b04:	add	r3, r3, #1
   15b08:	str	r3, [fp, #-20]	; 0xffffffec
   15b0c:	ldr	r3, [fp, #-16]
   15b10:	add	r3, r3, #40	; 0x28
   15b14:	str	r3, [fp, #-16]
   15b18:	ldr	r3, [pc, #280]	; 15c38 <__assert_fail@plt+0x4854>
   15b1c:	ldr	r3, [r3]
   15b20:	ldr	r2, [fp, #-20]	; 0xffffffec
   15b24:	cmp	r2, r3
   15b28:	ble	15ae4 <__assert_fail@plt+0x4700>
   15b2c:	ldr	r3, [pc, #272]	; 15c44 <__assert_fail@plt+0x4860>
   15b30:	ldrb	r3, [r3]
   15b34:	cmp	r3, #0
   15b38:	beq	15b9c <__assert_fail@plt+0x47b8>
   15b3c:	mov	r3, #1
   15b40:	str	r3, [fp, #-20]	; 0xffffffec
   15b44:	ldr	r3, [pc, #232]	; 15c34 <__assert_fail@plt+0x4850>
   15b48:	ldr	r3, [r3]
   15b4c:	str	r3, [fp, #-16]
   15b50:	b	15b88 <__assert_fail@plt+0x47a4>
   15b54:	ldr	r3, [fp, #-16]
   15b58:	ldr	r3, [r3, #8]
   15b5c:	cmp	r3, #3
   15b60:	beq	15b70 <__assert_fail@plt+0x478c>
   15b64:	ldr	r3, [fp, #-16]
   15b68:	mov	r2, #2
   15b6c:	str	r2, [r3, #8]
   15b70:	ldr	r3, [fp, #-20]	; 0xffffffec
   15b74:	add	r3, r3, #1
   15b78:	str	r3, [fp, #-20]	; 0xffffffec
   15b7c:	ldr	r3, [fp, #-16]
   15b80:	add	r3, r3, #40	; 0x28
   15b84:	str	r3, [fp, #-16]
   15b88:	ldr	r3, [pc, #168]	; 15c38 <__assert_fail@plt+0x4854>
   15b8c:	ldr	r3, [r3]
   15b90:	ldr	r2, [fp, #-20]	; 0xffffffec
   15b94:	cmp	r2, r3
   15b98:	ble	15b54 <__assert_fail@plt+0x4770>
   15b9c:	bl	13c78 <__assert_fail@plt+0x2894>
   15ba0:	ldr	r3, [pc, #152]	; 15c40 <__assert_fail@plt+0x485c>
   15ba4:	mov	r2, #0
   15ba8:	strb	r2, [r3]
   15bac:	ldr	r3, [pc, #148]	; 15c48 <__assert_fail@plt+0x4864>
   15bb0:	ldr	r3, [r3]
   15bb4:	cmp	r3, #0
   15bb8:	bgt	15bec <__assert_fail@plt+0x4808>
   15bbc:	ldr	r0, [pc, #136]	; 15c4c <__assert_fail@plt+0x4868>
   15bc0:	bl	11288 <gettext@plt>
   15bc4:	mov	r1, r0
   15bc8:	ldrd	r2, [fp, #-12]
   15bcc:	strd	r2, [sp, #8]
   15bd0:	ldrd	r2, [fp, #-36]	; 0xffffffdc
   15bd4:	strd	r2, [sp]
   15bd8:	mov	r2, r1
   15bdc:	mov	r1, #0
   15be0:	mov	r0, #0
   15be4:	bl	11210 <error@plt>
   15be8:	b	15c10 <__assert_fail@plt+0x482c>
   15bec:	ldrd	r2, [fp, #-12]
   15bf0:	adds	r2, r2, #1
   15bf4:	adc	r3, r3, #0
   15bf8:	strd	r2, [fp, #-12]
   15bfc:	ldrd	r0, [fp, #-12]
   15c00:	ldrd	r2, [fp, #-36]	; 0xffffffdc
   15c04:	cmp	r1, r3
   15c08:	cmpeq	r0, r2
   15c0c:	bcc	15a34 <__assert_fail@plt+0x4650>
   15c10:	ldr	r3, [pc, #48]	; 15c48 <__assert_fail@plt+0x4864>
   15c14:	ldr	r3, [r3]
   15c18:	cmp	r3, #0
   15c1c:	movgt	r3, #1
   15c20:	movle	r3, #0
   15c24:	uxtb	r3, r3
   15c28:	mov	r0, r3
   15c2c:	sub	sp, fp, #4
   15c30:	pop	{fp, pc}
   15c34:	strdeq	r4, [r3], -r8
   15c38:	andeq	r4, r3, ip, asr r1
   15c3c:	andeq	r4, r3, ip, lsl r2
   15c40:	andeq	r4, r3, r0, lsr #5
   15c44:	andeq	r4, r3, r1, asr #2
   15c48:	andeq	r4, r3, r8, asr #4
   15c4c:	andeq	r2, r2, r8, asr r5
   15c50:	push	{r4, fp, lr}
   15c54:	add	fp, sp, #8
   15c58:	sub	sp, sp, #316	; 0x13c
   15c5c:	ldr	r3, [pc, #292]	; 15d88 <__assert_fail@plt+0x49a4>
   15c60:	mov	r2, #0
   15c64:	str	r2, [r3]
   15c68:	ldr	r3, [pc, #284]	; 15d8c <__assert_fail@plt+0x49a8>
   15c6c:	ldr	r3, [r3]
   15c70:	mov	r0, r3
   15c74:	bl	152d0 <__assert_fail@plt+0x3eec>
   15c78:	bl	156a8 <__assert_fail@plt+0x42c4>
   15c7c:	ldr	r3, [pc, #268]	; 15d90 <__assert_fail@plt+0x49ac>
   15c80:	ldrd	r2, [r3]
   15c84:	orrs	r3, r2, r3
   15c88:	bne	15ca8 <__assert_fail@plt+0x48c4>
   15c8c:	ldr	r0, [pc, #256]	; 15d94 <__assert_fail@plt+0x49b0>
   15c90:	bl	11288 <gettext@plt>
   15c94:	mov	r3, r0
   15c98:	mov	r2, r3
   15c9c:	mov	r1, #0
   15ca0:	mov	r0, #1
   15ca4:	bl	11210 <error@plt>
   15ca8:	ldr	r0, [pc, #232]	; 15d98 <__assert_fail@plt+0x49b4>
   15cac:	bl	11288 <gettext@plt>
   15cb0:	mov	r1, r0
   15cb4:	ldr	r3, [pc, #212]	; 15d90 <__assert_fail@plt+0x49ac>
   15cb8:	ldrd	r2, [r3]
   15cbc:	sub	r0, fp, #300	; 0x12c
   15cc0:	bl	1136c <sprintf@plt>
   15cc4:	ldr	r3, [pc, #208]	; 15d9c <__assert_fail@plt+0x49b8>
   15cc8:	ldr	r4, [r3]
   15ccc:	sub	r3, fp, #300	; 0x12c
   15cd0:	mov	r1, #0
   15cd4:	mov	r0, r3
   15cd8:	bl	174b8 <__assert_fail@plt+0x60d4>
   15cdc:	mov	r3, r0
   15ce0:	sub	r3, r4, r3
   15ce4:	str	r3, [fp, #-16]
   15ce8:	ldr	r3, [fp, #-16]
   15cec:	bic	r3, r3, r3, asr #31
   15cf0:	str	r3, [fp, #-16]
   15cf4:	ldr	r3, [fp, #-16]
   15cf8:	asr	r3, r3, #1
   15cfc:	str	r3, [fp, #-20]	; 0xffffffec
   15d00:	ldr	r2, [fp, #-16]
   15d04:	ldr	r3, [fp, #-20]	; 0xffffffec
   15d08:	sub	r3, r2, r3
   15d0c:	str	r3, [fp, #-24]	; 0xffffffe8
   15d10:	ldr	r3, [pc, #116]	; 15d8c <__assert_fail@plt+0x49a8>
   15d14:	ldr	r1, [r3]
   15d18:	ldr	r3, [pc, #128]	; 15da0 <__assert_fail@plt+0x49bc>
   15d1c:	ldr	r0, [r3]
   15d20:	ldr	r3, [pc, #124]	; 15da4 <__assert_fail@plt+0x49c0>
   15d24:	ldr	r3, [r3]
   15d28:	sub	r2, fp, #300	; 0x12c
   15d2c:	str	r2, [sp, #20]
   15d30:	ldr	r2, [pc, #112]	; 15da8 <__assert_fail@plt+0x49c4>
   15d34:	str	r2, [sp, #16]
   15d38:	ldr	r2, [fp, #-24]	; 0xffffffe8
   15d3c:	str	r2, [sp, #12]
   15d40:	str	r3, [sp, #8]
   15d44:	ldr	r3, [pc, #92]	; 15da8 <__assert_fail@plt+0x49c4>
   15d48:	str	r3, [sp, #4]
   15d4c:	ldr	r3, [fp, #-20]	; 0xffffffec
   15d50:	str	r3, [sp]
   15d54:	mov	r3, r0
   15d58:	ldr	r2, [pc, #76]	; 15dac <__assert_fail@plt+0x49c8>
   15d5c:	ldr	r0, [pc, #76]	; 15db0 <__assert_fail@plt+0x49cc>
   15d60:	bl	110d8 <printf@plt>
   15d64:	ldr	r3, [pc, #72]	; 15db4 <__assert_fail@plt+0x49d0>
   15d68:	mov	r2, #0
   15d6c:	strb	r2, [r3]
   15d70:	ldr	r3, [pc, #16]	; 15d88 <__assert_fail@plt+0x49a4>
   15d74:	mov	r2, #0
   15d78:	str	r2, [r3]
   15d7c:	nop			; (mov r0, r0)
   15d80:	sub	sp, fp, #8
   15d84:	pop	{r4, fp, pc}
   15d88:	andeq	r4, r3, r4, lsr r2
   15d8c:	andeq	r4, r3, r0, lsr r2
   15d90:	andeq	r4, r3, r0, asr r2
   15d94:	andeq	r2, r2, ip, lsl #11
   15d98:	andeq	r2, r2, r4, lsr #11
   15d9c:	muleq	r3, r8, r2
   15da0:	muleq	r3, r0, r2
   15da4:	muleq	r3, r4, r2
   15da8:	andeq	r1, r2, ip, ror #30
   15dac:			; <UNDEFINED> instruction: 0x00021eb8
   15db0:			; <UNDEFINED> instruction: 0x000225b0
   15db4:	andeq	r4, r3, r7, lsl r2
   15db8:	push	{fp, lr}
   15dbc:	add	fp, sp, #4
   15dc0:	sub	sp, sp, #32
   15dc4:	str	r0, [fp, #-32]	; 0xffffffe0
   15dc8:	ldr	r3, [fp, #-32]	; 0xffffffe0
   15dcc:	ldr	r3, [r3]
   15dd0:	mov	r0, r3
   15dd4:	bl	11168 <getc_unlocked@plt>
   15dd8:	str	r0, [fp, #-8]
   15ddc:	ldr	r3, [pc, #1168]	; 16274 <__assert_fail@plt+0x4e90>
   15de0:	ldr	r3, [r3]
   15de4:	str	r3, [fp, #-24]	; 0xffffffe8
   15de8:	ldr	r3, [fp, #-8]
   15dec:	cmp	r3, #12
   15df0:	bne	15e38 <__assert_fail@plt+0x4a54>
   15df4:	ldr	r3, [fp, #-32]	; 0xffffffe0
   15df8:	ldrb	r3, [r3, #37]	; 0x25
   15dfc:	cmp	r3, #0
   15e00:	beq	15e38 <__assert_fail@plt+0x4a54>
   15e04:	ldr	r3, [fp, #-32]	; 0xffffffe0
   15e08:	ldr	r3, [r3]
   15e0c:	mov	r0, r3
   15e10:	bl	11168 <getc_unlocked@plt>
   15e14:	str	r0, [fp, #-8]
   15e18:	ldr	r3, [fp, #-8]
   15e1c:	cmp	r3, #10
   15e20:	bne	15e38 <__assert_fail@plt+0x4a54>
   15e24:	ldr	r3, [fp, #-32]	; 0xffffffe0
   15e28:	ldr	r3, [r3]
   15e2c:	mov	r0, r3
   15e30:	bl	11168 <getc_unlocked@plt>
   15e34:	str	r0, [fp, #-8]
   15e38:	ldr	r3, [fp, #-32]	; 0xffffffe0
   15e3c:	mov	r2, #0
   15e40:	strb	r2, [r3, #37]	; 0x25
   15e44:	ldr	r3, [fp, #-8]
   15e48:	cmp	r3, #10
   15e4c:	beq	15f34 <__assert_fail@plt+0x4b50>
   15e50:	cmp	r3, #12
   15e54:	beq	15e64 <__assert_fail@plt+0x4a80>
   15e58:	cmn	r3, #1
   15e5c:	beq	15f0c <__assert_fail@plt+0x4b28>
   15e60:	b	15f1c <__assert_fail@plt+0x4b38>
   15e64:	ldr	r3, [fp, #-32]	; 0xffffffe0
   15e68:	ldr	r3, [r3]
   15e6c:	mov	r0, r3
   15e70:	bl	11168 <getc_unlocked@plt>
   15e74:	str	r0, [fp, #-8]
   15e78:	ldr	r3, [fp, #-8]
   15e7c:	cmp	r3, #10
   15e80:	beq	15e98 <__assert_fail@plt+0x4ab4>
   15e84:	ldr	r3, [fp, #-32]	; 0xffffffe0
   15e88:	ldr	r3, [r3]
   15e8c:	mov	r1, r3
   15e90:	ldr	r0, [fp, #-8]
   15e94:	bl	112c4 <ungetc@plt>
   15e98:	ldr	r3, [pc, #984]	; 16278 <__assert_fail@plt+0x4e94>
   15e9c:	mov	r2, #1
   15ea0:	strb	r2, [r3]
   15ea4:	ldr	r3, [pc, #976]	; 1627c <__assert_fail@plt+0x4e98>
   15ea8:	ldrb	r3, [r3]
   15eac:	cmp	r3, #0
   15eb0:	beq	15ee0 <__assert_fail@plt+0x4afc>
   15eb4:	ldr	r3, [pc, #964]	; 16280 <__assert_fail@plt+0x4e9c>
   15eb8:	ldrb	r3, [r3]
   15ebc:	eor	r3, r3, #1
   15ec0:	uxtb	r3, r3
   15ec4:	cmp	r3, #0
   15ec8:	beq	15ee0 <__assert_fail@plt+0x4afc>
   15ecc:	ldr	r3, [pc, #944]	; 16284 <__assert_fail@plt+0x4ea0>
   15ed0:	mov	r2, #1
   15ed4:	strb	r2, [r3]
   15ed8:	bl	15c50 <__assert_fail@plt+0x486c>
   15edc:	b	15efc <__assert_fail@plt+0x4b18>
   15ee0:	ldr	r3, [pc, #928]	; 16288 <__assert_fail@plt+0x4ea4>
   15ee4:	ldrb	r3, [r3]
   15ee8:	cmp	r3, #0
   15eec:	beq	15efc <__assert_fail@plt+0x4b18>
   15ef0:	ldr	r3, [pc, #916]	; 1628c <__assert_fail@plt+0x4ea8>
   15ef4:	mov	r2, #1
   15ef8:	strb	r2, [r3]
   15efc:	ldr	r0, [fp, #-32]	; 0xffffffe0
   15f00:	bl	13b90 <__assert_fail@plt+0x27ac>
   15f04:	mov	r3, #1
   15f08:	b	16268 <__assert_fail@plt+0x4e84>
   15f0c:	ldr	r0, [fp, #-32]	; 0xffffffe0
   15f10:	bl	139c8 <__assert_fail@plt+0x25e4>
   15f14:	mov	r3, #1
   15f18:	b	16268 <__assert_fail@plt+0x4e84>
   15f1c:	ldr	r3, [fp, #-8]
   15f20:	uxtb	r3, r3
   15f24:	mov	r0, r3
   15f28:	bl	16544 <__assert_fail@plt+0x5160>
   15f2c:	str	r0, [fp, #-12]
   15f30:	b	15f38 <__assert_fail@plt+0x4b54>
   15f34:	nop			; (mov r0, r0)
   15f38:	ldr	r3, [pc, #848]	; 16290 <__assert_fail@plt+0x4eac>
   15f3c:	ldrb	r3, [r3]
   15f40:	cmp	r3, #0
   15f44:	beq	15f74 <__assert_fail@plt+0x4b90>
   15f48:	ldr	r3, [pc, #804]	; 16274 <__assert_fail@plt+0x4e90>
   15f4c:	ldr	r2, [r3]
   15f50:	ldr	r3, [pc, #828]	; 16294 <__assert_fail@plt+0x4eb0>
   15f54:	ldr	r3, [r3]
   15f58:	cmp	r2, r3
   15f5c:	ble	15f74 <__assert_fail@plt+0x4b90>
   15f60:	ldr	r2, [pc, #780]	; 16274 <__assert_fail@plt+0x4e90>
   15f64:	ldr	r3, [fp, #-24]	; 0xffffffe8
   15f68:	str	r3, [r2]
   15f6c:	mov	r3, #0
   15f70:	b	16268 <__assert_fail@plt+0x4e84>
   15f74:	ldr	r3, [fp, #-32]	; 0xffffffe0
   15f78:	ldr	r3, [r3, #16]
   15f7c:	ldr	r2, [pc, #788]	; 16298 <__assert_fail@plt+0x4eb4>
   15f80:	cmp	r3, r2
   15f84:	beq	160f4 <__assert_fail@plt+0x4d10>
   15f88:	ldr	r3, [pc, #756]	; 16284 <__assert_fail@plt+0x4ea0>
   15f8c:	mov	r2, #1
   15f90:	strb	r2, [r3]
   15f94:	ldr	r3, [pc, #736]	; 1627c <__assert_fail@plt+0x4e98>
   15f98:	ldrb	r3, [r3]
   15f9c:	cmp	r3, #0
   15fa0:	beq	15fc0 <__assert_fail@plt+0x4bdc>
   15fa4:	ldr	r3, [pc, #724]	; 16280 <__assert_fail@plt+0x4e9c>
   15fa8:	ldrb	r3, [r3]
   15fac:	eor	r3, r3, #1
   15fb0:	uxtb	r3, r3
   15fb4:	cmp	r3, #0
   15fb8:	beq	15fc0 <__assert_fail@plt+0x4bdc>
   15fbc:	bl	15c50 <__assert_fail@plt+0x486c>
   15fc0:	ldr	r3, [pc, #724]	; 1629c <__assert_fail@plt+0x4eb8>
   15fc4:	ldrb	r3, [r3]
   15fc8:	cmp	r3, #0
   15fcc:	beq	160a0 <__assert_fail@plt+0x4cbc>
   15fd0:	ldr	r3, [pc, #712]	; 162a0 <__assert_fail@plt+0x4ebc>
   15fd4:	ldrb	r3, [r3]
   15fd8:	cmp	r3, #0
   15fdc:	beq	160a0 <__assert_fail@plt+0x4cbc>
   15fe0:	ldr	r3, [pc, #700]	; 162a4 <__assert_fail@plt+0x4ec0>
   15fe4:	ldr	r3, [r3]
   15fe8:	str	r3, [fp, #-28]	; 0xffffffe4
   15fec:	ldr	r3, [pc, #688]	; 162a4 <__assert_fail@plt+0x4ec0>
   15ff0:	mov	r2, #0
   15ff4:	str	r2, [r3]
   15ff8:	mov	r3, #1
   15ffc:	str	r3, [fp, #-16]
   16000:	ldr	r3, [pc, #672]	; 162a8 <__assert_fail@plt+0x4ec4>
   16004:	ldr	r3, [r3]
   16008:	str	r3, [fp, #-20]	; 0xffffffec
   1600c:	b	16044 <__assert_fail@plt+0x4c60>
   16010:	ldr	r0, [fp, #-20]	; 0xffffffec
   16014:	bl	1422c <__assert_fail@plt+0x2e48>
   16018:	ldr	r3, [pc, #644]	; 162a4 <__assert_fail@plt+0x4ec0>
   1601c:	ldr	r3, [r3]
   16020:	add	r3, r3, #1
   16024:	ldr	r2, [pc, #632]	; 162a4 <__assert_fail@plt+0x4ec0>
   16028:	str	r3, [r2]
   1602c:	ldr	r3, [fp, #-16]
   16030:	add	r3, r3, #1
   16034:	str	r3, [fp, #-16]
   16038:	ldr	r3, [fp, #-20]	; 0xffffffec
   1603c:	add	r3, r3, #40	; 0x28
   16040:	str	r3, [fp, #-20]	; 0xffffffec
   16044:	ldr	r2, [fp, #-16]
   16048:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1604c:	cmp	r2, r3
   16050:	ble	16010 <__assert_fail@plt+0x4c2c>
   16054:	ldr	r3, [fp, #-32]	; 0xffffffe0
   16058:	ldr	r3, [r3, #32]
   1605c:	ldr	r2, [pc, #584]	; 162ac <__assert_fail@plt+0x4ec8>
   16060:	str	r3, [r2]
   16064:	ldr	r3, [pc, #548]	; 16290 <__assert_fail@plt+0x4eac>
   16068:	ldrb	r3, [r3]
   1606c:	cmp	r3, #0
   16070:	beq	16088 <__assert_fail@plt+0x4ca4>
   16074:	ldr	r3, [pc, #536]	; 16294 <__assert_fail@plt+0x4eb0>
   16078:	ldr	r3, [r3]
   1607c:	ldr	r2, [pc, #556]	; 162b0 <__assert_fail@plt+0x4ecc>
   16080:	str	r3, [r2]
   16084:	b	16094 <__assert_fail@plt+0x4cb0>
   16088:	ldr	r3, [pc, #544]	; 162b0 <__assert_fail@plt+0x4ecc>
   1608c:	mov	r2, #0
   16090:	str	r2, [r3]
   16094:	ldr	r3, [pc, #516]	; 162a0 <__assert_fail@plt+0x4ebc>
   16098:	mov	r2, #0
   1609c:	strb	r2, [r3]
   160a0:	ldr	r3, [pc, #524]	; 162b4 <__assert_fail@plt+0x4ed0>
   160a4:	ldr	r2, [r3]
   160a8:	ldr	r3, [pc, #508]	; 162ac <__assert_fail@plt+0x4ec8>
   160ac:	ldr	r3, [r3]
   160b0:	cmp	r2, r3
   160b4:	bge	160e0 <__assert_fail@plt+0x4cfc>
   160b8:	ldr	r3, [pc, #492]	; 162ac <__assert_fail@plt+0x4ec8>
   160bc:	ldr	r2, [r3]
   160c0:	ldr	r3, [pc, #492]	; 162b4 <__assert_fail@plt+0x4ed0>
   160c4:	ldr	r3, [r3]
   160c8:	sub	r3, r2, r3
   160cc:	mov	r0, r3
   160d0:	bl	152d0 <__assert_fail@plt+0x3eec>
   160d4:	ldr	r3, [pc, #464]	; 162ac <__assert_fail@plt+0x4ec8>
   160d8:	mov	r2, #0
   160dc:	str	r2, [r3]
   160e0:	ldr	r3, [pc, #464]	; 162b8 <__assert_fail@plt+0x4ed4>
   160e4:	ldrb	r3, [r3]
   160e8:	cmp	r3, #0
   160ec:	beq	160f4 <__assert_fail@plt+0x4d10>
   160f0:	bl	157a4 <__assert_fail@plt+0x43c0>
   160f4:	ldr	r3, [fp, #-32]	; 0xffffffe0
   160f8:	ldrb	r3, [r3, #36]	; 0x24
   160fc:	cmp	r3, #0
   16100:	beq	1610c <__assert_fail@plt+0x4d28>
   16104:	ldr	r0, [fp, #-32]	; 0xffffffe0
   16108:	bl	150b8 <__assert_fail@plt+0x3cd4>
   1610c:	ldr	r3, [pc, #424]	; 162bc <__assert_fail@plt+0x4ed8>
   16110:	mov	r2, #0
   16114:	strb	r2, [r3]
   16118:	ldr	r3, [fp, #-8]
   1611c:	cmp	r3, #10
   16120:	bne	1612c <__assert_fail@plt+0x4d48>
   16124:	mov	r3, #1
   16128:	b	16268 <__assert_fail@plt+0x4e84>
   1612c:	ldr	r3, [pc, #396]	; 162c0 <__assert_fail@plt+0x4edc>
   16130:	ldr	r3, [r3]
   16134:	mov	r2, r3
   16138:	ldr	r1, [fp, #-12]
   1613c:	ldr	r0, [fp, #-32]	; 0xffffffe0
   16140:	bl	158d0 <__assert_fail@plt+0x44ec>
   16144:	ldr	r3, [fp, #-32]	; 0xffffffe0
   16148:	ldr	r3, [r3]
   1614c:	mov	r0, r3
   16150:	bl	11168 <getc_unlocked@plt>
   16154:	str	r0, [fp, #-8]
   16158:	ldr	r3, [fp, #-8]
   1615c:	cmp	r3, #10
   16160:	beq	16178 <__assert_fail@plt+0x4d94>
   16164:	cmp	r3, #12
   16168:	beq	16180 <__assert_fail@plt+0x4d9c>
   1616c:	cmn	r3, #1
   16170:	beq	161e0 <__assert_fail@plt+0x4dfc>
   16174:	b	161f0 <__assert_fail@plt+0x4e0c>
   16178:	mov	r3, #1
   1617c:	b	16268 <__assert_fail@plt+0x4e84>
   16180:	ldr	r3, [fp, #-32]	; 0xffffffe0
   16184:	ldr	r3, [r3]
   16188:	mov	r0, r3
   1618c:	bl	11168 <getc_unlocked@plt>
   16190:	str	r0, [fp, #-8]
   16194:	ldr	r3, [fp, #-8]
   16198:	cmp	r3, #10
   1619c:	beq	161b4 <__assert_fail@plt+0x4dd0>
   161a0:	ldr	r3, [fp, #-32]	; 0xffffffe0
   161a4:	ldr	r3, [r3]
   161a8:	mov	r1, r3
   161ac:	ldr	r0, [fp, #-8]
   161b0:	bl	112c4 <ungetc@plt>
   161b4:	ldr	r3, [pc, #204]	; 16288 <__assert_fail@plt+0x4ea4>
   161b8:	ldrb	r3, [r3]
   161bc:	cmp	r3, #0
   161c0:	beq	161d0 <__assert_fail@plt+0x4dec>
   161c4:	ldr	r3, [pc, #192]	; 1628c <__assert_fail@plt+0x4ea8>
   161c8:	mov	r2, #1
   161cc:	strb	r2, [r3]
   161d0:	ldr	r0, [fp, #-32]	; 0xffffffe0
   161d4:	bl	13b90 <__assert_fail@plt+0x27ac>
   161d8:	mov	r3, #1
   161dc:	b	16268 <__assert_fail@plt+0x4e84>
   161e0:	ldr	r0, [fp, #-32]	; 0xffffffe0
   161e4:	bl	139c8 <__assert_fail@plt+0x25e4>
   161e8:	mov	r3, #1
   161ec:	b	16268 <__assert_fail@plt+0x4e84>
   161f0:	ldr	r3, [pc, #124]	; 16274 <__assert_fail@plt+0x4e90>
   161f4:	ldr	r3, [r3]
   161f8:	str	r3, [fp, #-24]	; 0xffffffe8
   161fc:	ldr	r3, [fp, #-8]
   16200:	uxtb	r3, r3
   16204:	mov	r0, r3
   16208:	bl	16544 <__assert_fail@plt+0x5160>
   1620c:	str	r0, [fp, #-12]
   16210:	ldr	r3, [pc, #120]	; 16290 <__assert_fail@plt+0x4eac>
   16214:	ldrb	r3, [r3]
   16218:	cmp	r3, #0
   1621c:	beq	1624c <__assert_fail@plt+0x4e68>
   16220:	ldr	r3, [pc, #76]	; 16274 <__assert_fail@plt+0x4e90>
   16224:	ldr	r2, [r3]
   16228:	ldr	r3, [pc, #100]	; 16294 <__assert_fail@plt+0x4eb0>
   1622c:	ldr	r3, [r3]
   16230:	cmp	r2, r3
   16234:	ble	1624c <__assert_fail@plt+0x4e68>
   16238:	ldr	r2, [pc, #52]	; 16274 <__assert_fail@plt+0x4e90>
   1623c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   16240:	str	r3, [r2]
   16244:	mov	r3, #0
   16248:	b	16268 <__assert_fail@plt+0x4e84>
   1624c:	ldr	r3, [pc, #108]	; 162c0 <__assert_fail@plt+0x4edc>
   16250:	ldr	r3, [r3]
   16254:	mov	r2, r3
   16258:	ldr	r1, [fp, #-12]
   1625c:	ldr	r0, [fp, #-32]	; 0xffffffe0
   16260:	bl	158d0 <__assert_fail@plt+0x44ec>
   16264:	b	16144 <__assert_fail@plt+0x4d60>
   16268:	mov	r0, r3
   1626c:	sub	sp, fp, #4
   16270:	pop	{fp, pc}
   16274:	andeq	r4, r3, r8, lsr r2
   16278:	andeq	r4, r3, r3, lsl r2
   1627c:	andeq	r4, r3, r7, lsl r2
   16280:	andeq	r4, r3, r1, asr #2
   16284:	andeq	r4, r3, r0, lsl #5
   16288:	andeq	r4, r3, r5, lsl r2
   1628c:	andeq	r4, r3, r6, lsl r2
   16290:	andeq	r4, r3, r0, lsr #4
   16294:	andeq	r4, r3, r4, lsr #4
   16298:	andeq	r5, r1, ip, lsr #32
   1629c:	andeq	r4, r3, r0, lsl r2
   162a0:	andeq	r4, r3, r1, lsl r2
   162a4:	andeq	r4, r3, r8, ror r2
   162a8:	strdeq	r4, [r3], -r8
   162ac:	andeq	r4, r3, ip, ror r2
   162b0:	andeq	r4, r3, ip, lsr #4
   162b4:	andeq	r4, r3, r4, ror r2
   162b8:	andeq	r4, r3, r1, ror r2
   162bc:	andeq	r4, r3, r2, lsl r2
   162c0:	muleq	r3, ip, r2
   162c4:	push	{fp, lr}
   162c8:	add	fp, sp, #4
   162cc:	sub	sp, sp, #32
   162d0:	str	r0, [fp, #-32]	; 0xffffffe0
   162d4:	ldr	r3, [fp, #-32]	; 0xffffffe0
   162d8:	ldr	r3, [r3, #20]
   162dc:	add	r1, r3, #1
   162e0:	ldr	r2, [fp, #-32]	; 0xffffffe0
   162e4:	str	r1, [r2, #20]
   162e8:	str	r3, [fp, #-20]	; 0xffffffec
   162ec:	ldr	r3, [pc, #536]	; 1650c <__assert_fail@plt+0x5128>
   162f0:	ldr	r3, [r3]
   162f4:	ldr	r2, [pc, #532]	; 16510 <__assert_fail@plt+0x512c>
   162f8:	ldr	r1, [r2]
   162fc:	ldr	r2, [fp, #-20]	; 0xffffffec
   16300:	lsl	r2, r2, #2
   16304:	add	r2, r1, r2
   16308:	ldr	r2, [r2]
   1630c:	add	r3, r3, r2
   16310:	str	r3, [fp, #-12]
   16314:	ldr	r3, [pc, #496]	; 1650c <__assert_fail@plt+0x5128>
   16318:	ldr	r3, [r3]
   1631c:	ldr	r2, [pc, #492]	; 16510 <__assert_fail@plt+0x512c>
   16320:	ldr	r1, [r2]
   16324:	ldr	r2, [fp, #-20]	; 0xffffffec
   16328:	add	r2, r2, #1
   1632c:	lsl	r2, r2, #2
   16330:	add	r2, r1, r2
   16334:	ldr	r2, [r2]
   16338:	add	r3, r3, r2
   1633c:	str	r3, [fp, #-24]	; 0xffffffe8
   16340:	ldr	r3, [pc, #460]	; 16514 <__assert_fail@plt+0x5130>
   16344:	mov	r2, #1
   16348:	strb	r2, [r3]
   1634c:	ldr	r3, [pc, #452]	; 16518 <__assert_fail@plt+0x5134>
   16350:	ldrb	r3, [r3]
   16354:	cmp	r3, #0
   16358:	beq	16360 <__assert_fail@plt+0x4f7c>
   1635c:	bl	15c50 <__assert_fail@plt+0x486c>
   16360:	ldr	r3, [fp, #-32]	; 0xffffffe0
   16364:	ldr	r3, [r3, #8]
   16368:	cmp	r3, #1
   1636c:	bne	16400 <__assert_fail@plt+0x501c>
   16370:	mov	r3, #1
   16374:	str	r3, [fp, #-16]
   16378:	ldr	r3, [pc, #412]	; 1651c <__assert_fail@plt+0x5138>
   1637c:	ldr	r3, [r3]
   16380:	str	r3, [fp, #-8]
   16384:	b	163ac <__assert_fail@plt+0x4fc8>
   16388:	ldr	r3, [fp, #-8]
   1638c:	mov	r2, #2
   16390:	str	r2, [r3, #8]
   16394:	ldr	r3, [fp, #-16]
   16398:	add	r3, r3, #1
   1639c:	str	r3, [fp, #-16]
   163a0:	ldr	r3, [fp, #-8]
   163a4:	add	r3, r3, #40	; 0x28
   163a8:	str	r3, [fp, #-8]
   163ac:	ldr	r3, [pc, #364]	; 16520 <__assert_fail@plt+0x513c>
   163b0:	ldr	r3, [r3]
   163b4:	ldr	r2, [fp, #-16]
   163b8:	cmp	r2, r3
   163bc:	ble	16388 <__assert_fail@plt+0x4fa4>
   163c0:	ldr	r3, [pc, #340]	; 1651c <__assert_fail@plt+0x5138>
   163c4:	ldr	r3, [r3]
   163c8:	ldr	r3, [r3, #28]
   163cc:	cmp	r3, #0
   163d0:	bgt	16400 <__assert_fail@plt+0x501c>
   163d4:	ldr	r3, [pc, #328]	; 16524 <__assert_fail@plt+0x5140>
   163d8:	ldrb	r3, [r3]
   163dc:	eor	r3, r3, #1
   163e0:	uxtb	r3, r3
   163e4:	cmp	r3, #0
   163e8:	beq	163f8 <__assert_fail@plt+0x5014>
   163ec:	ldr	r3, [pc, #288]	; 16514 <__assert_fail@plt+0x5130>
   163f0:	mov	r2, #0
   163f4:	strb	r2, [r3]
   163f8:	mov	r3, #1
   163fc:	b	16500 <__assert_fail@plt+0x511c>
   16400:	ldr	r3, [pc, #288]	; 16528 <__assert_fail@plt+0x5144>
   16404:	ldr	r2, [r3]
   16408:	ldr	r3, [pc, #284]	; 1652c <__assert_fail@plt+0x5148>
   1640c:	ldr	r3, [r3]
   16410:	cmp	r2, r3
   16414:	bge	16440 <__assert_fail@plt+0x505c>
   16418:	ldr	r3, [pc, #268]	; 1652c <__assert_fail@plt+0x5148>
   1641c:	ldr	r2, [r3]
   16420:	ldr	r3, [pc, #256]	; 16528 <__assert_fail@plt+0x5144>
   16424:	ldr	r3, [r3]
   16428:	sub	r3, r2, r3
   1642c:	mov	r0, r3
   16430:	bl	152d0 <__assert_fail@plt+0x3eec>
   16434:	ldr	r3, [pc, #240]	; 1652c <__assert_fail@plt+0x5148>
   16438:	mov	r2, #0
   1643c:	str	r2, [r3]
   16440:	ldr	r3, [pc, #232]	; 16530 <__assert_fail@plt+0x514c>
   16444:	ldrb	r3, [r3]
   16448:	cmp	r3, #0
   1644c:	beq	16470 <__assert_fail@plt+0x508c>
   16450:	bl	157a4 <__assert_fail@plt+0x43c0>
   16454:	b	16470 <__assert_fail@plt+0x508c>
   16458:	ldr	r3, [fp, #-12]
   1645c:	add	r2, r3, #1
   16460:	str	r2, [fp, #-12]
   16464:	ldrb	r3, [r3]
   16468:	mov	r0, r3
   1646c:	bl	1592c <__assert_fail@plt+0x4548>
   16470:	ldr	r2, [fp, #-12]
   16474:	ldr	r3, [fp, #-24]	; 0xffffffe8
   16478:	cmp	r2, r3
   1647c:	bne	16458 <__assert_fail@plt+0x5074>
   16480:	ldr	r3, [pc, #172]	; 16534 <__assert_fail@plt+0x5150>
   16484:	ldr	r3, [r3]
   16488:	cmp	r3, #0
   1648c:	bne	164fc <__assert_fail@plt+0x5118>
   16490:	ldr	r3, [fp, #-32]	; 0xffffffe0
   16494:	ldr	r2, [r3, #32]
   16498:	ldr	r3, [pc, #152]	; 16538 <__assert_fail@plt+0x5154>
   1649c:	ldr	r1, [r3]
   164a0:	ldr	r3, [fp, #-20]	; 0xffffffec
   164a4:	lsl	r3, r3, #2
   164a8:	add	r3, r1, r3
   164ac:	ldr	r3, [r3]
   164b0:	add	r3, r2, r3
   164b4:	ldr	r2, [pc, #128]	; 1653c <__assert_fail@plt+0x5158>
   164b8:	str	r3, [r2]
   164bc:	ldr	r3, [fp, #-32]	; 0xffffffe0
   164c0:	ldr	r2, [r3, #32]
   164c4:	ldr	r3, [pc, #92]	; 16528 <__assert_fail@plt+0x5144>
   164c8:	ldr	r3, [r3]
   164cc:	sub	r2, r2, r3
   164d0:	ldr	r3, [pc, #104]	; 16540 <__assert_fail@plt+0x515c>
   164d4:	ldr	r3, [r3]
   164d8:	cmp	r2, r3
   164dc:	bne	164fc <__assert_fail@plt+0x5118>
   164e0:	ldr	r3, [pc, #84]	; 1653c <__assert_fail@plt+0x5158>
   164e4:	ldr	r2, [r3]
   164e8:	ldr	r3, [pc, #56]	; 16528 <__assert_fail@plt+0x5144>
   164ec:	ldr	r3, [r3]
   164f0:	sub	r3, r2, r3
   164f4:	ldr	r2, [pc, #64]	; 1653c <__assert_fail@plt+0x5158>
   164f8:	str	r3, [r2]
   164fc:	mov	r3, #1
   16500:	mov	r0, r3
   16504:	sub	sp, fp, #4
   16508:	pop	{fp, pc}
   1650c:	strdeq	r4, [r3], -ip
   16510:	andeq	r4, r3, r8, lsl #4
   16514:	andeq	r4, r3, r0, lsl #5
   16518:	andeq	r4, r3, r7, lsl r2
   1651c:	strdeq	r4, [r3], -r8
   16520:	andeq	r4, r3, ip, asr r1
   16524:	andeq	r4, r3, r0, asr #2
   16528:	andeq	r4, r3, r4, ror r2
   1652c:	andeq	r4, r3, ip, ror r2
   16530:	andeq	r4, r3, r1, ror r2
   16534:	andeq	r4, r3, ip, lsr #4
   16538:	andeq	r4, r3, ip, lsl #4
   1653c:	andeq	r4, r3, r4, lsr r2
   16540:	andeq	r4, r3, r0, lsr r2
   16544:	push	{fp, lr}
   16548:	add	fp, sp, #4
   1654c:	sub	sp, sp, #40	; 0x28
   16550:	mov	r3, r0
   16554:	strb	r3, [fp, #-37]	; 0xffffffdb
   16558:	ldrb	r3, [fp, #-37]	; 0xffffffdb
   1655c:	strb	r3, [fp, #-25]	; 0xffffffe7
   16560:	ldr	r3, [pc, #872]	; 168d0 <__assert_fail@plt+0x54ec>
   16564:	ldr	r3, [r3]
   16568:	str	r3, [fp, #-8]
   1656c:	mov	r3, #8
   16570:	str	r3, [fp, #-24]	; 0xffffffe8
   16574:	ldr	r3, [pc, #856]	; 168d4 <__assert_fail@plt+0x54f0>
   16578:	ldrb	r3, [r3]
   1657c:	ldrb	r2, [fp, #-37]	; 0xffffffdb
   16580:	cmp	r2, r3
   16584:	bne	16594 <__assert_fail@plt+0x51b0>
   16588:	ldr	r3, [pc, #840]	; 168d8 <__assert_fail@plt+0x54f4>
   1658c:	ldr	r3, [r3]
   16590:	str	r3, [fp, #-24]	; 0xffffffe8
   16594:	ldr	r3, [pc, #824]	; 168d4 <__assert_fail@plt+0x54f0>
   16598:	ldrb	r3, [r3]
   1659c:	ldrb	r2, [fp, #-37]	; 0xffffffdb
   165a0:	cmp	r2, r3
   165a4:	beq	165b4 <__assert_fail@plt+0x51d0>
   165a8:	ldrb	r3, [fp, #-37]	; 0xffffffdb
   165ac:	cmp	r3, #9
   165b0:	bne	16648 <__assert_fail@plt+0x5264>
   165b4:	ldr	r3, [pc, #800]	; 168dc <__assert_fail@plt+0x54f8>
   165b8:	ldr	r3, [r3]
   165bc:	ldr	r1, [fp, #-24]	; 0xffffffe8
   165c0:	mov	r0, r3
   165c4:	bl	21a3c <__assert_fail@plt+0x10658>
   165c8:	mov	r3, r1
   165cc:	mov	r2, r3
   165d0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   165d4:	sub	r3, r3, r2
   165d8:	str	r3, [fp, #-16]
   165dc:	ldr	r3, [pc, #764]	; 168e0 <__assert_fail@plt+0x54fc>
   165e0:	ldrb	r3, [r3]
   165e4:	cmp	r3, #0
   165e8:	beq	16630 <__assert_fail@plt+0x524c>
   165ec:	ldr	r3, [fp, #-16]
   165f0:	str	r3, [fp, #-12]
   165f4:	b	16618 <__assert_fail@plt+0x5234>
   165f8:	ldr	r3, [fp, #-8]
   165fc:	add	r2, r3, #1
   16600:	str	r2, [fp, #-8]
   16604:	mov	r2, #32
   16608:	strb	r2, [r3]
   1660c:	ldr	r3, [fp, #-12]
   16610:	sub	r3, r3, #1
   16614:	str	r3, [fp, #-12]
   16618:	ldr	r3, [fp, #-12]
   1661c:	cmp	r3, #0
   16620:	bne	165f8 <__assert_fail@plt+0x5214>
   16624:	ldr	r3, [fp, #-16]
   16628:	str	r3, [fp, #-20]	; 0xffffffec
   1662c:	b	16840 <__assert_fail@plt+0x545c>
   16630:	ldr	r3, [fp, #-8]
   16634:	ldrb	r2, [fp, #-37]	; 0xffffffdb
   16638:	strb	r2, [r3]
   1663c:	mov	r3, #1
   16640:	str	r3, [fp, #-20]	; 0xffffffec
   16644:	b	16840 <__assert_fail@plt+0x545c>
   16648:	bl	11270 <__ctype_b_loc@plt>
   1664c:	mov	r3, r0
   16650:	ldr	r2, [r3]
   16654:	ldrb	r3, [fp, #-25]	; 0xffffffe7
   16658:	lsl	r3, r3, #1
   1665c:	add	r3, r2, r3
   16660:	ldrh	r3, [r3]
   16664:	and	r3, r3, #16384	; 0x4000
   16668:	cmp	r3, #0
   1666c:	bne	16824 <__assert_fail@plt+0x5440>
   16670:	ldr	r3, [pc, #620]	; 168e4 <__assert_fail@plt+0x5500>
   16674:	ldrb	r3, [r3]
   16678:	cmp	r3, #0
   1667c:	beq	16700 <__assert_fail@plt+0x531c>
   16680:	mov	r3, #4
   16684:	str	r3, [fp, #-16]
   16688:	mov	r3, #4
   1668c:	str	r3, [fp, #-20]	; 0xffffffec
   16690:	ldr	r3, [fp, #-8]
   16694:	add	r2, r3, #1
   16698:	str	r2, [fp, #-8]
   1669c:	mov	r2, #92	; 0x5c
   166a0:	strb	r2, [r3]
   166a4:	ldrb	r2, [fp, #-25]	; 0xffffffe7
   166a8:	sub	r3, fp, #32
   166ac:	ldr	r1, [pc, #564]	; 168e8 <__assert_fail@plt+0x5504>
   166b0:	mov	r0, r3
   166b4:	bl	1136c <sprintf@plt>
   166b8:	mov	r3, #0
   166bc:	str	r3, [fp, #-12]
   166c0:	b	166f0 <__assert_fail@plt+0x530c>
   166c4:	ldr	r3, [fp, #-8]
   166c8:	add	r2, r3, #1
   166cc:	str	r2, [fp, #-8]
   166d0:	sub	r1, fp, #32
   166d4:	ldr	r2, [fp, #-12]
   166d8:	add	r2, r1, r2
   166dc:	ldrb	r2, [r2]
   166e0:	strb	r2, [r3]
   166e4:	ldr	r3, [fp, #-12]
   166e8:	add	r3, r3, #1
   166ec:	str	r3, [fp, #-12]
   166f0:	ldr	r3, [fp, #-12]
   166f4:	cmp	r3, #2
   166f8:	ble	166c4 <__assert_fail@plt+0x52e0>
   166fc:	b	16840 <__assert_fail@plt+0x545c>
   16700:	ldr	r3, [pc, #484]	; 168ec <__assert_fail@plt+0x5508>
   16704:	ldrb	r3, [r3]
   16708:	cmp	r3, #0
   1670c:	beq	167d8 <__assert_fail@plt+0x53f4>
   16710:	ldrsb	r3, [fp, #-25]	; 0xffffffe7
   16714:	cmp	r3, #0
   16718:	blt	16758 <__assert_fail@plt+0x5374>
   1671c:	mov	r3, #2
   16720:	str	r3, [fp, #-16]
   16724:	mov	r3, #2
   16728:	str	r3, [fp, #-20]	; 0xffffffec
   1672c:	ldr	r3, [fp, #-8]
   16730:	add	r2, r3, #1
   16734:	str	r2, [fp, #-8]
   16738:	mov	r2, #94	; 0x5e
   1673c:	strb	r2, [r3]
   16740:	ldrb	r3, [fp, #-37]	; 0xffffffdb
   16744:	eor	r3, r3, #64	; 0x40
   16748:	uxtb	r2, r3
   1674c:	ldr	r3, [fp, #-8]
   16750:	strb	r2, [r3]
   16754:	b	16840 <__assert_fail@plt+0x545c>
   16758:	mov	r3, #4
   1675c:	str	r3, [fp, #-16]
   16760:	mov	r3, #4
   16764:	str	r3, [fp, #-20]	; 0xffffffec
   16768:	ldr	r3, [fp, #-8]
   1676c:	add	r2, r3, #1
   16770:	str	r2, [fp, #-8]
   16774:	mov	r2, #92	; 0x5c
   16778:	strb	r2, [r3]
   1677c:	ldrb	r2, [fp, #-25]	; 0xffffffe7
   16780:	sub	r3, fp, #32
   16784:	ldr	r1, [pc, #348]	; 168e8 <__assert_fail@plt+0x5504>
   16788:	mov	r0, r3
   1678c:	bl	1136c <sprintf@plt>
   16790:	mov	r3, #0
   16794:	str	r3, [fp, #-12]
   16798:	b	167c8 <__assert_fail@plt+0x53e4>
   1679c:	ldr	r3, [fp, #-8]
   167a0:	add	r2, r3, #1
   167a4:	str	r2, [fp, #-8]
   167a8:	sub	r1, fp, #32
   167ac:	ldr	r2, [fp, #-12]
   167b0:	add	r2, r1, r2
   167b4:	ldrb	r2, [r2]
   167b8:	strb	r2, [r3]
   167bc:	ldr	r3, [fp, #-12]
   167c0:	add	r3, r3, #1
   167c4:	str	r3, [fp, #-12]
   167c8:	ldr	r3, [fp, #-12]
   167cc:	cmp	r3, #2
   167d0:	ble	1679c <__assert_fail@plt+0x53b8>
   167d4:	b	16840 <__assert_fail@plt+0x545c>
   167d8:	ldrb	r3, [fp, #-37]	; 0xffffffdb
   167dc:	cmp	r3, #8
   167e0:	bne	16804 <__assert_fail@plt+0x5420>
   167e4:	mvn	r3, #0
   167e8:	str	r3, [fp, #-16]
   167ec:	mov	r3, #1
   167f0:	str	r3, [fp, #-20]	; 0xffffffec
   167f4:	ldr	r3, [fp, #-8]
   167f8:	ldrb	r2, [fp, #-37]	; 0xffffffdb
   167fc:	strb	r2, [r3]
   16800:	b	16840 <__assert_fail@plt+0x545c>
   16804:	mov	r3, #0
   16808:	str	r3, [fp, #-16]
   1680c:	mov	r3, #1
   16810:	str	r3, [fp, #-20]	; 0xffffffec
   16814:	ldr	r3, [fp, #-8]
   16818:	ldrb	r2, [fp, #-37]	; 0xffffffdb
   1681c:	strb	r2, [r3]
   16820:	b	16840 <__assert_fail@plt+0x545c>
   16824:	mov	r3, #1
   16828:	str	r3, [fp, #-16]
   1682c:	mov	r3, #1
   16830:	str	r3, [fp, #-20]	; 0xffffffec
   16834:	ldr	r3, [fp, #-8]
   16838:	ldrb	r2, [fp, #-37]	; 0xffffffdb
   1683c:	strb	r2, [r3]
   16840:	ldr	r3, [fp, #-16]
   16844:	cmp	r3, #0
   16848:	bge	16874 <__assert_fail@plt+0x5490>
   1684c:	ldr	r3, [pc, #136]	; 168dc <__assert_fail@plt+0x54f8>
   16850:	ldr	r3, [r3]
   16854:	cmp	r3, #0
   16858:	bne	16874 <__assert_fail@plt+0x5490>
   1685c:	mov	r3, #0
   16860:	str	r3, [fp, #-20]	; 0xffffffec
   16864:	ldr	r3, [pc, #112]	; 168dc <__assert_fail@plt+0x54f8>
   16868:	mov	r2, #0
   1686c:	str	r2, [r3]
   16870:	b	168c0 <__assert_fail@plt+0x54dc>
   16874:	ldr	r3, [fp, #-16]
   16878:	cmp	r3, #0
   1687c:	bge	168a8 <__assert_fail@plt+0x54c4>
   16880:	ldr	r3, [fp, #-16]
   16884:	rsb	r2, r3, #0
   16888:	ldr	r3, [pc, #76]	; 168dc <__assert_fail@plt+0x54f8>
   1688c:	ldr	r3, [r3]
   16890:	cmp	r2, r3
   16894:	blt	168a8 <__assert_fail@plt+0x54c4>
   16898:	ldr	r3, [pc, #60]	; 168dc <__assert_fail@plt+0x54f8>
   1689c:	mov	r2, #0
   168a0:	str	r2, [r3]
   168a4:	b	168c0 <__assert_fail@plt+0x54dc>
   168a8:	ldr	r3, [pc, #44]	; 168dc <__assert_fail@plt+0x54f8>
   168ac:	ldr	r2, [r3]
   168b0:	ldr	r3, [fp, #-16]
   168b4:	add	r3, r2, r3
   168b8:	ldr	r2, [pc, #28]	; 168dc <__assert_fail@plt+0x54f8>
   168bc:	str	r3, [r2]
   168c0:	ldr	r3, [fp, #-20]	; 0xffffffec
   168c4:	mov	r0, r3
   168c8:	sub	sp, fp, #4
   168cc:	pop	{fp, pc}
   168d0:	muleq	r3, ip, r2
   168d4:	andeq	r4, r3, ip, asr #2
   168d8:	andeq	r4, r3, r0, asr r1
   168dc:	andeq	r4, r3, r8, lsr r2
   168e0:	andeq	r4, r3, r8, lsr #4
   168e4:	andeq	r4, r3, r8, ror #4
   168e8:	andeq	r2, r2, r8, asr #11
   168ec:	andeq	r4, r3, r9, ror #4
   168f0:	push	{fp, lr}
   168f4:	add	fp, sp, #4
   168f8:	ldr	r3, [pc, #96]	; 16960 <__assert_fail@plt+0x557c>
   168fc:	ldr	r3, [r3]
   16900:	mov	r0, r3
   16904:	bl	17130 <__assert_fail@plt+0x5d4c>
   16908:	ldr	r3, [pc, #84]	; 16964 <__assert_fail@plt+0x5580>
   1690c:	ldr	r3, [r3]
   16910:	mov	r0, r3
   16914:	bl	17130 <__assert_fail@plt+0x5d4c>
   16918:	ldr	r3, [pc, #72]	; 16968 <__assert_fail@plt+0x5584>
   1691c:	ldr	r3, [r3]
   16920:	mov	r0, r3
   16924:	bl	17130 <__assert_fail@plt+0x5d4c>
   16928:	ldr	r3, [pc, #60]	; 1696c <__assert_fail@plt+0x5588>
   1692c:	ldr	r3, [r3]
   16930:	mov	r0, r3
   16934:	bl	17130 <__assert_fail@plt+0x5d4c>
   16938:	ldr	r3, [pc, #48]	; 16970 <__assert_fail@plt+0x558c>
   1693c:	ldr	r3, [r3]
   16940:	mov	r0, r3
   16944:	bl	17130 <__assert_fail@plt+0x5d4c>
   16948:	ldr	r3, [pc, #36]	; 16974 <__assert_fail@plt+0x5590>
   1694c:	ldr	r3, [r3]
   16950:	mov	r0, r3
   16954:	bl	17130 <__assert_fail@plt+0x5d4c>
   16958:	nop			; (mov r0, r0)
   1695c:	pop	{fp, pc}
   16960:	andeq	r4, r3, r4, ror #4
   16964:	muleq	r3, ip, r2
   16968:	strdeq	r4, [r3], -r8
   1696c:	andeq	r4, r3, r8, lsl #4
   16970:	andeq	r4, r3, ip, lsl #4
   16974:	strdeq	r4, [r3], -ip
   16978:	push	{r4, fp, lr}
   1697c:	add	fp, sp, #8
   16980:	sub	sp, sp, #12
   16984:	str	r0, [fp, #-16]
   16988:	ldr	r3, [fp, #-16]
   1698c:	cmp	r3, #0
   16990:	beq	169c0 <__assert_fail@plt+0x55dc>
   16994:	ldr	r3, [pc, #604]	; 16bf8 <__assert_fail@plt+0x5814>
   16998:	ldr	r4, [r3]
   1699c:	ldr	r0, [pc, #600]	; 16bfc <__assert_fail@plt+0x5818>
   169a0:	bl	11288 <gettext@plt>
   169a4:	mov	r1, r0
   169a8:	ldr	r3, [pc, #592]	; 16c00 <__assert_fail@plt+0x581c>
   169ac:	ldr	r3, [r3]
   169b0:	mov	r2, r3
   169b4:	mov	r0, r4
   169b8:	bl	112b8 <fprintf@plt>
   169bc:	b	16bf0 <__assert_fail@plt+0x580c>
   169c0:	ldr	r0, [pc, #572]	; 16c04 <__assert_fail@plt+0x5820>
   169c4:	bl	11288 <gettext@plt>
   169c8:	mov	r2, r0
   169cc:	ldr	r3, [pc, #556]	; 16c00 <__assert_fail@plt+0x581c>
   169d0:	ldr	r3, [r3]
   169d4:	mov	r1, r3
   169d8:	mov	r0, r2
   169dc:	bl	110d8 <printf@plt>
   169e0:	ldr	r0, [pc, #544]	; 16c08 <__assert_fail@plt+0x5824>
   169e4:	bl	11288 <gettext@plt>
   169e8:	mov	r2, r0
   169ec:	ldr	r3, [pc, #536]	; 16c0c <__assert_fail@plt+0x5828>
   169f0:	ldr	r3, [r3]
   169f4:	mov	r1, r3
   169f8:	mov	r0, r2
   169fc:	bl	11090 <fputs_unlocked@plt>
   16a00:	bl	11540 <__assert_fail@plt+0x15c>
   16a04:	bl	11578 <__assert_fail@plt+0x194>
   16a08:	ldr	r0, [pc, #512]	; 16c10 <__assert_fail@plt+0x582c>
   16a0c:	bl	11288 <gettext@plt>
   16a10:	mov	r2, r0
   16a14:	ldr	r3, [pc, #496]	; 16c0c <__assert_fail@plt+0x5828>
   16a18:	ldr	r3, [r3]
   16a1c:	mov	r1, r3
   16a20:	mov	r0, r2
   16a24:	bl	11090 <fputs_unlocked@plt>
   16a28:	ldr	r0, [pc, #484]	; 16c14 <__assert_fail@plt+0x5830>
   16a2c:	bl	11288 <gettext@plt>
   16a30:	mov	r2, r0
   16a34:	ldr	r3, [pc, #464]	; 16c0c <__assert_fail@plt+0x5828>
   16a38:	ldr	r3, [r3]
   16a3c:	mov	r1, r3
   16a40:	mov	r0, r2
   16a44:	bl	11090 <fputs_unlocked@plt>
   16a48:	ldr	r0, [pc, #456]	; 16c18 <__assert_fail@plt+0x5834>
   16a4c:	bl	11288 <gettext@plt>
   16a50:	mov	r2, r0
   16a54:	ldr	r3, [pc, #432]	; 16c0c <__assert_fail@plt+0x5828>
   16a58:	ldr	r3, [r3]
   16a5c:	mov	r1, r3
   16a60:	mov	r0, r2
   16a64:	bl	11090 <fputs_unlocked@plt>
   16a68:	ldr	r0, [pc, #428]	; 16c1c <__assert_fail@plt+0x5838>
   16a6c:	bl	11288 <gettext@plt>
   16a70:	mov	r2, r0
   16a74:	ldr	r3, [pc, #400]	; 16c0c <__assert_fail@plt+0x5828>
   16a78:	ldr	r3, [r3]
   16a7c:	mov	r1, r3
   16a80:	mov	r0, r2
   16a84:	bl	11090 <fputs_unlocked@plt>
   16a88:	ldr	r0, [pc, #400]	; 16c20 <__assert_fail@plt+0x583c>
   16a8c:	bl	11288 <gettext@plt>
   16a90:	mov	r2, r0
   16a94:	ldr	r3, [pc, #368]	; 16c0c <__assert_fail@plt+0x5828>
   16a98:	ldr	r3, [r3]
   16a9c:	mov	r1, r3
   16aa0:	mov	r0, r2
   16aa4:	bl	11090 <fputs_unlocked@plt>
   16aa8:	ldr	r0, [pc, #372]	; 16c24 <__assert_fail@plt+0x5840>
   16aac:	bl	11288 <gettext@plt>
   16ab0:	mov	r2, r0
   16ab4:	ldr	r3, [pc, #336]	; 16c0c <__assert_fail@plt+0x5828>
   16ab8:	ldr	r3, [r3]
   16abc:	mov	r1, r3
   16ac0:	mov	r0, r2
   16ac4:	bl	11090 <fputs_unlocked@plt>
   16ac8:	ldr	r0, [pc, #344]	; 16c28 <__assert_fail@plt+0x5844>
   16acc:	bl	11288 <gettext@plt>
   16ad0:	mov	r2, r0
   16ad4:	ldr	r3, [pc, #304]	; 16c0c <__assert_fail@plt+0x5828>
   16ad8:	ldr	r3, [r3]
   16adc:	mov	r1, r3
   16ae0:	mov	r0, r2
   16ae4:	bl	11090 <fputs_unlocked@plt>
   16ae8:	ldr	r0, [pc, #316]	; 16c2c <__assert_fail@plt+0x5848>
   16aec:	bl	11288 <gettext@plt>
   16af0:	mov	r2, r0
   16af4:	ldr	r3, [pc, #272]	; 16c0c <__assert_fail@plt+0x5828>
   16af8:	ldr	r3, [r3]
   16afc:	mov	r1, r3
   16b00:	mov	r0, r2
   16b04:	bl	11090 <fputs_unlocked@plt>
   16b08:	ldr	r0, [pc, #288]	; 16c30 <__assert_fail@plt+0x584c>
   16b0c:	bl	11288 <gettext@plt>
   16b10:	mov	r2, r0
   16b14:	ldr	r3, [pc, #240]	; 16c0c <__assert_fail@plt+0x5828>
   16b18:	ldr	r3, [r3]
   16b1c:	mov	r1, r3
   16b20:	mov	r0, r2
   16b24:	bl	11090 <fputs_unlocked@plt>
   16b28:	ldr	r0, [pc, #260]	; 16c34 <__assert_fail@plt+0x5850>
   16b2c:	bl	11288 <gettext@plt>
   16b30:	mov	r2, r0
   16b34:	ldr	r3, [pc, #208]	; 16c0c <__assert_fail@plt+0x5828>
   16b38:	ldr	r3, [r3]
   16b3c:	mov	r1, r3
   16b40:	mov	r0, r2
   16b44:	bl	11090 <fputs_unlocked@plt>
   16b48:	ldr	r0, [pc, #232]	; 16c38 <__assert_fail@plt+0x5854>
   16b4c:	bl	11288 <gettext@plt>
   16b50:	mov	r2, r0
   16b54:	ldr	r3, [pc, #176]	; 16c0c <__assert_fail@plt+0x5828>
   16b58:	ldr	r3, [r3]
   16b5c:	mov	r1, r3
   16b60:	mov	r0, r2
   16b64:	bl	11090 <fputs_unlocked@plt>
   16b68:	ldr	r0, [pc, #204]	; 16c3c <__assert_fail@plt+0x5858>
   16b6c:	bl	11288 <gettext@plt>
   16b70:	mov	r2, r0
   16b74:	ldr	r3, [pc, #144]	; 16c0c <__assert_fail@plt+0x5828>
   16b78:	ldr	r3, [r3]
   16b7c:	mov	r1, r3
   16b80:	mov	r0, r2
   16b84:	bl	11090 <fputs_unlocked@plt>
   16b88:	ldr	r0, [pc, #176]	; 16c40 <__assert_fail@plt+0x585c>
   16b8c:	bl	11288 <gettext@plt>
   16b90:	mov	r2, r0
   16b94:	ldr	r3, [pc, #112]	; 16c0c <__assert_fail@plt+0x5828>
   16b98:	ldr	r3, [r3]
   16b9c:	mov	r1, r3
   16ba0:	mov	r0, r2
   16ba4:	bl	11090 <fputs_unlocked@plt>
   16ba8:	ldr	r0, [pc, #148]	; 16c44 <__assert_fail@plt+0x5860>
   16bac:	bl	11288 <gettext@plt>
   16bb0:	mov	r2, r0
   16bb4:	ldr	r3, [pc, #80]	; 16c0c <__assert_fail@plt+0x5828>
   16bb8:	ldr	r3, [r3]
   16bbc:	mov	r1, r3
   16bc0:	mov	r0, r2
   16bc4:	bl	11090 <fputs_unlocked@plt>
   16bc8:	ldr	r0, [pc, #120]	; 16c48 <__assert_fail@plt+0x5864>
   16bcc:	bl	11288 <gettext@plt>
   16bd0:	mov	r2, r0
   16bd4:	ldr	r3, [pc, #48]	; 16c0c <__assert_fail@plt+0x5828>
   16bd8:	ldr	r3, [r3]
   16bdc:	mov	r1, r3
   16be0:	mov	r0, r2
   16be4:	bl	11090 <fputs_unlocked@plt>
   16be8:	ldr	r0, [pc, #92]	; 16c4c <__assert_fail@plt+0x5868>
   16bec:	bl	115b0 <__assert_fail@plt+0x1cc>
   16bf0:	ldr	r0, [fp, #-16]
   16bf4:	bl	1127c <exit@plt>
   16bf8:	andeq	r4, r3, r0, ror #3
   16bfc:	ldrdeq	r2, [r2], -r0
   16c00:			; <UNDEFINED> instruction: 0x000342b4
   16c04:	strdeq	r2, [r2], -r8
   16c08:	andeq	r2, r2, ip, lsl r6
   16c0c:	andeq	r4, r3, ip, ror #3
   16c10:	andeq	r2, r2, ip, asr #12
   16c14:	muleq	r2, ip, r7
   16c18:	andeq	r2, r2, ip, lsr #17
   16c1c:	andeq	r2, r2, ip, lsr sl
   16c20:	andeq	r2, r2, r8, ror #23
   16c24:	andeq	r2, r2, r4, asr #25
   16c28:	andeq	r2, r2, r4, asr sp
   16c2c:			; <UNDEFINED> instruction: 0x00022eb0
   16c30:			; <UNDEFINED> instruction: 0x00022fb0
   16c34:	strdeq	r3, [r2], -r8
   16c38:	andeq	r3, r2, r4, ror #3
   16c3c:	andeq	r3, r2, ip, asr #4
   16c40:	andeq	r3, r2, r0, ror #7
   16c44:			; <UNDEFINED> instruction: 0x000234b8
   16c48:	andeq	r3, r2, r8, ror #9
   16c4c:	andeq	r2, r2, r4, lsl #8
   16c50:	push	{fp}		; (str fp, [sp, #-4]!)
   16c54:	add	fp, sp, #0
   16c58:	sub	sp, sp, #12
   16c5c:	str	r0, [fp, #-8]
   16c60:	ldr	r2, [pc, #20]	; 16c7c <__assert_fail@plt+0x5898>
   16c64:	ldr	r3, [fp, #-8]
   16c68:	str	r3, [r2]
   16c6c:	nop			; (mov r0, r0)
   16c70:	add	sp, fp, #0
   16c74:	pop	{fp}		; (ldr fp, [sp], #4)
   16c78:	bx	lr
   16c7c:	andeq	r4, r3, ip, lsr #5
   16c80:	push	{fp}		; (str fp, [sp, #-4]!)
   16c84:	add	fp, sp, #0
   16c88:	sub	sp, sp, #12
   16c8c:	mov	r3, r0
   16c90:	strb	r3, [fp, #-5]
   16c94:	ldr	r2, [pc, #20]	; 16cb0 <__assert_fail@plt+0x58cc>
   16c98:	ldrb	r3, [fp, #-5]
   16c9c:	strb	r3, [r2]
   16ca0:	nop			; (mov r0, r0)
   16ca4:	add	sp, fp, #0
   16ca8:	pop	{fp}		; (ldr fp, [sp], #4)
   16cac:	bx	lr
   16cb0:			; <UNDEFINED> instruction: 0x000342b0
   16cb4:	push	{r4, fp, lr}
   16cb8:	add	fp, sp, #8
   16cbc:	sub	sp, sp, #20
   16cc0:	ldr	r3, [pc, #256]	; 16dc8 <__assert_fail@plt+0x59e4>
   16cc4:	ldr	r3, [r3]
   16cc8:	mov	r0, r3
   16ccc:	bl	209d0 <__assert_fail@plt+0xf5ec>
   16cd0:	mov	r3, r0
   16cd4:	cmp	r3, #0
   16cd8:	beq	16d90 <__assert_fail@plt+0x59ac>
   16cdc:	ldr	r3, [pc, #232]	; 16dcc <__assert_fail@plt+0x59e8>
   16ce0:	ldrb	r3, [r3]
   16ce4:	eor	r3, r3, #1
   16ce8:	uxtb	r3, r3
   16cec:	cmp	r3, #0
   16cf0:	bne	16d08 <__assert_fail@plt+0x5924>
   16cf4:	bl	112d0 <__errno_location@plt>
   16cf8:	mov	r3, r0
   16cfc:	ldr	r3, [r3]
   16d00:	cmp	r3, #32
   16d04:	beq	16d90 <__assert_fail@plt+0x59ac>
   16d08:	ldr	r0, [pc, #192]	; 16dd0 <__assert_fail@plt+0x59ec>
   16d0c:	bl	11288 <gettext@plt>
   16d10:	str	r0, [fp, #-16]
   16d14:	ldr	r3, [pc, #184]	; 16dd4 <__assert_fail@plt+0x59f0>
   16d18:	ldr	r3, [r3]
   16d1c:	cmp	r3, #0
   16d20:	beq	16d64 <__assert_fail@plt+0x5980>
   16d24:	bl	112d0 <__errno_location@plt>
   16d28:	mov	r3, r0
   16d2c:	ldr	r4, [r3]
   16d30:	ldr	r3, [pc, #156]	; 16dd4 <__assert_fail@plt+0x59f0>
   16d34:	ldr	r3, [r3]
   16d38:	mov	r0, r3
   16d3c:	bl	1c8b4 <__assert_fail@plt+0xb4d0>
   16d40:	mov	r2, r0
   16d44:	ldr	r3, [fp, #-16]
   16d48:	str	r3, [sp]
   16d4c:	mov	r3, r2
   16d50:	ldr	r2, [pc, #128]	; 16dd8 <__assert_fail@plt+0x59f4>
   16d54:	mov	r1, r4
   16d58:	mov	r0, #0
   16d5c:	bl	11210 <error@plt>
   16d60:	b	16d80 <__assert_fail@plt+0x599c>
   16d64:	bl	112d0 <__errno_location@plt>
   16d68:	mov	r3, r0
   16d6c:	ldr	r1, [r3]
   16d70:	ldr	r3, [fp, #-16]
   16d74:	ldr	r2, [pc, #96]	; 16ddc <__assert_fail@plt+0x59f8>
   16d78:	mov	r0, #0
   16d7c:	bl	11210 <error@plt>
   16d80:	ldr	r3, [pc, #88]	; 16de0 <__assert_fail@plt+0x59fc>
   16d84:	ldr	r3, [r3]
   16d88:	mov	r0, r3
   16d8c:	bl	11120 <_exit@plt>
   16d90:	ldr	r3, [pc, #76]	; 16de4 <__assert_fail@plt+0x5a00>
   16d94:	ldr	r3, [r3]
   16d98:	mov	r0, r3
   16d9c:	bl	209d0 <__assert_fail@plt+0xf5ec>
   16da0:	mov	r3, r0
   16da4:	cmp	r3, #0
   16da8:	beq	16dbc <__assert_fail@plt+0x59d8>
   16dac:	ldr	r3, [pc, #44]	; 16de0 <__assert_fail@plt+0x59fc>
   16db0:	ldr	r3, [r3]
   16db4:	mov	r0, r3
   16db8:	bl	11120 <_exit@plt>
   16dbc:	nop			; (mov r0, r0)
   16dc0:	sub	sp, fp, #8
   16dc4:	pop	{r4, fp, pc}
   16dc8:	andeq	r4, r3, ip, ror #3
   16dcc:			; <UNDEFINED> instruction: 0x000342b0
   16dd0:	andeq	r3, r2, r0, lsr r5
   16dd4:	andeq	r4, r3, ip, lsr #5
   16dd8:	andeq	r3, r2, ip, lsr r5
   16ddc:	andeq	r3, r2, r4, asr #10
   16de0:	andeq	r4, r3, ip, lsl #3
   16de4:	andeq	r4, r3, r0, ror #3
   16de8:	push	{fp, lr}
   16dec:	add	fp, sp, #4
   16df0:	sub	sp, sp, #40	; 0x28
   16df4:	str	r0, [fp, #-16]
   16df8:	strd	r2, [fp, #-28]	; 0xffffffe4
   16dfc:	ldr	r3, [fp, #12]
   16e00:	str	r3, [sp, #8]
   16e04:	ldrd	r2, [fp, #4]
   16e08:	strd	r2, [sp]
   16e0c:	ldrd	r2, [fp, #-28]	; 0xffffffe4
   16e10:	ldr	r0, [fp, #-16]
   16e14:	bl	110cc <posix_fadvise64@plt>
   16e18:	str	r0, [fp, #-8]
   16e1c:	nop			; (mov r0, r0)
   16e20:	sub	sp, fp, #4
   16e24:	pop	{fp, pc}
   16e28:	push	{fp, lr}
   16e2c:	add	fp, sp, #4
   16e30:	sub	sp, sp, #24
   16e34:	str	r0, [fp, #-8]
   16e38:	str	r1, [fp, #-12]
   16e3c:	ldr	r3, [fp, #-8]
   16e40:	cmp	r3, #0
   16e44:	beq	16e78 <__assert_fail@plt+0x5a94>
   16e48:	ldr	r0, [fp, #-8]
   16e4c:	bl	112f4 <fileno@plt>
   16e50:	mov	r1, r0
   16e54:	ldr	r3, [fp, #-12]
   16e58:	str	r3, [sp, #8]
   16e5c:	mov	r2, #0
   16e60:	mov	r3, #0
   16e64:	strd	r2, [sp]
   16e68:	mov	r2, #0
   16e6c:	mov	r3, #0
   16e70:	mov	r0, r1
   16e74:	bl	16de8 <__assert_fail@plt+0x5a04>
   16e78:	nop			; (mov r0, r0)
   16e7c:	sub	sp, fp, #4
   16e80:	pop	{fp, pc}
   16e84:	push	{fp, lr}
   16e88:	add	fp, sp, #4
   16e8c:	sub	sp, sp, #32
   16e90:	str	r0, [fp, #-24]	; 0xffffffe8
   16e94:	mov	r3, #0
   16e98:	str	r3, [fp, #-8]
   16e9c:	mov	r3, #0
   16ea0:	str	r3, [fp, #-12]
   16ea4:	ldr	r0, [fp, #-24]	; 0xffffffe8
   16ea8:	bl	112f4 <fileno@plt>
   16eac:	str	r0, [fp, #-16]
   16eb0:	ldr	r3, [fp, #-16]
   16eb4:	cmp	r3, #0
   16eb8:	bge	16ecc <__assert_fail@plt+0x5ae8>
   16ebc:	ldr	r0, [fp, #-24]	; 0xffffffe8
   16ec0:	bl	11318 <fclose@plt>
   16ec4:	mov	r3, r0
   16ec8:	b	16f70 <__assert_fail@plt+0x5b8c>
   16ecc:	ldr	r0, [fp, #-24]	; 0xffffffe8
   16ed0:	bl	1124c <__freading@plt>
   16ed4:	mov	r3, r0
   16ed8:	cmp	r3, #0
   16edc:	beq	16f18 <__assert_fail@plt+0x5b34>
   16ee0:	ldr	r0, [fp, #-24]	; 0xffffffe8
   16ee4:	bl	112f4 <fileno@plt>
   16ee8:	mov	r1, r0
   16eec:	mov	r3, #1
   16ef0:	str	r3, [sp]
   16ef4:	mov	r2, #0
   16ef8:	mov	r3, #0
   16efc:	mov	r0, r1
   16f00:	bl	111d4 <lseek64@plt>
   16f04:	mvn	r2, #0
   16f08:	mvn	r3, #0
   16f0c:	cmp	r1, r3
   16f10:	cmpeq	r0, r2
   16f14:	beq	16f3c <__assert_fail@plt+0x5b58>
   16f18:	ldr	r0, [fp, #-24]	; 0xffffffe8
   16f1c:	bl	16fc4 <__assert_fail@plt+0x5be0>
   16f20:	mov	r3, r0
   16f24:	cmp	r3, #0
   16f28:	beq	16f3c <__assert_fail@plt+0x5b58>
   16f2c:	bl	112d0 <__errno_location@plt>
   16f30:	mov	r3, r0
   16f34:	ldr	r3, [r3]
   16f38:	str	r3, [fp, #-8]
   16f3c:	ldr	r0, [fp, #-24]	; 0xffffffe8
   16f40:	bl	11318 <fclose@plt>
   16f44:	str	r0, [fp, #-12]
   16f48:	ldr	r3, [fp, #-8]
   16f4c:	cmp	r3, #0
   16f50:	beq	16f6c <__assert_fail@plt+0x5b88>
   16f54:	bl	112d0 <__errno_location@plt>
   16f58:	mov	r2, r0
   16f5c:	ldr	r3, [fp, #-8]
   16f60:	str	r3, [r2]
   16f64:	mvn	r3, #0
   16f68:	str	r3, [fp, #-12]
   16f6c:	ldr	r3, [fp, #-12]
   16f70:	mov	r0, r3
   16f74:	sub	sp, fp, #4
   16f78:	pop	{fp, pc}
   16f7c:	push	{fp, lr}
   16f80:	add	fp, sp, #4
   16f84:	sub	sp, sp, #16
   16f88:	str	r0, [fp, #-8]
   16f8c:	ldr	r3, [fp, #-8]
   16f90:	ldr	r3, [r3]
   16f94:	and	r3, r3, #256	; 0x100
   16f98:	cmp	r3, #0
   16f9c:	beq	16fb8 <__assert_fail@plt+0x5bd4>
   16fa0:	mov	r3, #1
   16fa4:	str	r3, [sp]
   16fa8:	mov	r2, #0
   16fac:	mov	r3, #0
   16fb0:	ldr	r0, [fp, #-8]
   16fb4:	bl	171bc <__assert_fail@plt+0x5dd8>
   16fb8:	nop			; (mov r0, r0)
   16fbc:	sub	sp, fp, #4
   16fc0:	pop	{fp, pc}
   16fc4:	push	{fp, lr}
   16fc8:	add	fp, sp, #4
   16fcc:	sub	sp, sp, #8
   16fd0:	str	r0, [fp, #-8]
   16fd4:	ldr	r3, [fp, #-8]
   16fd8:	cmp	r3, #0
   16fdc:	beq	16ff4 <__assert_fail@plt+0x5c10>
   16fe0:	ldr	r0, [fp, #-8]
   16fe4:	bl	1124c <__freading@plt>
   16fe8:	mov	r3, r0
   16fec:	cmp	r3, #0
   16ff0:	bne	17004 <__assert_fail@plt+0x5c20>
   16ff4:	ldr	r0, [fp, #-8]
   16ff8:	bl	110f0 <fflush@plt>
   16ffc:	mov	r3, r0
   17000:	b	17018 <__assert_fail@plt+0x5c34>
   17004:	ldr	r0, [fp, #-8]
   17008:	bl	16f7c <__assert_fail@plt+0x5b98>
   1700c:	ldr	r0, [fp, #-8]
   17010:	bl	110f0 <fflush@plt>
   17014:	mov	r3, r0
   17018:	mov	r0, r3
   1701c:	sub	sp, fp, #4
   17020:	pop	{fp, pc}
   17024:	push	{fp, lr}
   17028:	add	fp, sp, #4
   1702c:	sub	sp, sp, #32
   17030:	str	r0, [fp, #-32]	; 0xffffffe0
   17034:	str	r1, [fp, #-36]	; 0xffffffdc
   17038:	ldr	r1, [fp, #-36]	; 0xffffffdc
   1703c:	ldr	r0, [fp, #-32]	; 0xffffffe0
   17040:	bl	11390 <fopen64@plt>
   17044:	str	r0, [fp, #-8]
   17048:	ldr	r3, [fp, #-8]
   1704c:	cmp	r3, #0
   17050:	beq	17120 <__assert_fail@plt+0x5d3c>
   17054:	ldr	r0, [fp, #-8]
   17058:	bl	112f4 <fileno@plt>
   1705c:	str	r0, [fp, #-12]
   17060:	ldr	r3, [fp, #-12]
   17064:	cmp	r3, #0
   17068:	blt	17120 <__assert_fail@plt+0x5d3c>
   1706c:	ldr	r3, [fp, #-12]
   17070:	cmp	r3, #2
   17074:	bgt	17120 <__assert_fail@plt+0x5d3c>
   17078:	ldr	r0, [fp, #-12]
   1707c:	bl	1d6ec <__assert_fail@plt+0xc308>
   17080:	str	r0, [fp, #-16]
   17084:	ldr	r3, [fp, #-16]
   17088:	cmp	r3, #0
   1708c:	bge	170c0 <__assert_fail@plt+0x5cdc>
   17090:	bl	112d0 <__errno_location@plt>
   17094:	mov	r3, r0
   17098:	ldr	r3, [r3]
   1709c:	str	r3, [fp, #-20]	; 0xffffffec
   170a0:	ldr	r0, [fp, #-8]
   170a4:	bl	16e84 <__assert_fail@plt+0x5aa0>
   170a8:	bl	112d0 <__errno_location@plt>
   170ac:	mov	r2, r0
   170b0:	ldr	r3, [fp, #-20]	; 0xffffffec
   170b4:	str	r3, [r2]
   170b8:	mov	r3, #0
   170bc:	b	17124 <__assert_fail@plt+0x5d40>
   170c0:	ldr	r0, [fp, #-8]
   170c4:	bl	16e84 <__assert_fail@plt+0x5aa0>
   170c8:	mov	r3, r0
   170cc:	cmp	r3, #0
   170d0:	bne	170f0 <__assert_fail@plt+0x5d0c>
   170d4:	ldr	r1, [fp, #-36]	; 0xffffffdc
   170d8:	ldr	r0, [fp, #-16]
   170dc:	bl	11078 <fdopen@plt>
   170e0:	str	r0, [fp, #-8]
   170e4:	ldr	r3, [fp, #-8]
   170e8:	cmp	r3, #0
   170ec:	bne	17120 <__assert_fail@plt+0x5d3c>
   170f0:	bl	112d0 <__errno_location@plt>
   170f4:	mov	r3, r0
   170f8:	ldr	r3, [r3]
   170fc:	str	r3, [fp, #-24]	; 0xffffffe8
   17100:	ldr	r0, [fp, #-16]
   17104:	bl	113cc <close@plt>
   17108:	bl	112d0 <__errno_location@plt>
   1710c:	mov	r2, r0
   17110:	ldr	r3, [fp, #-24]	; 0xffffffe8
   17114:	str	r3, [r2]
   17118:	mov	r3, #0
   1711c:	b	17124 <__assert_fail@plt+0x5d40>
   17120:	ldr	r3, [fp, #-8]
   17124:	mov	r0, r3
   17128:	sub	sp, fp, #4
   1712c:	pop	{fp, pc}
   17130:	push	{r4, fp, lr}
   17134:	add	fp, sp, #8
   17138:	sub	sp, sp, #20
   1713c:	str	r0, [fp, #-24]	; 0xffffffe8
   17140:	bl	112d0 <__errno_location@plt>
   17144:	mov	r3, r0
   17148:	ldr	r3, [r3]
   1714c:	str	r3, [fp, #-20]	; 0xffffffec
   17150:	bl	112d0 <__errno_location@plt>
   17154:	mov	r3, r0
   17158:	ldr	r3, [r3]
   1715c:	str	r3, [fp, #-16]
   17160:	bl	112d0 <__errno_location@plt>
   17164:	mov	r2, r0
   17168:	mov	r3, #0
   1716c:	str	r3, [r2]
   17170:	ldr	r0, [fp, #-24]	; 0xffffffe8
   17174:	bl	11108 <free@plt>
   17178:	bl	112d0 <__errno_location@plt>
   1717c:	mov	r4, r0
   17180:	bl	112d0 <__errno_location@plt>
   17184:	mov	r3, r0
   17188:	ldr	r3, [r3]
   1718c:	cmp	r3, #0
   17190:	moveq	r3, #1
   17194:	movne	r3, #0
   17198:	uxtb	r3, r3
   1719c:	lsl	r3, r3, #2
   171a0:	sub	r2, fp, #12
   171a4:	add	r3, r2, r3
   171a8:	ldr	r3, [r3, #-8]
   171ac:	str	r3, [r4]
   171b0:	nop			; (mov r0, r0)
   171b4:	sub	sp, fp, #8
   171b8:	pop	{r4, fp, pc}
   171bc:	push	{fp, lr}
   171c0:	add	fp, sp, #4
   171c4:	sub	sp, sp, #32
   171c8:	str	r0, [fp, #-16]
   171cc:	strd	r2, [fp, #-28]	; 0xffffffe4
   171d0:	ldr	r3, [fp, #-16]
   171d4:	ldr	r2, [r3, #8]
   171d8:	ldr	r3, [fp, #-16]
   171dc:	ldr	r3, [r3, #4]
   171e0:	cmp	r2, r3
   171e4:	bne	1727c <__assert_fail@plt+0x5e98>
   171e8:	ldr	r3, [fp, #-16]
   171ec:	ldr	r2, [r3, #20]
   171f0:	ldr	r3, [fp, #-16]
   171f4:	ldr	r3, [r3, #16]
   171f8:	cmp	r2, r3
   171fc:	bne	1727c <__assert_fail@plt+0x5e98>
   17200:	ldr	r3, [fp, #-16]
   17204:	ldr	r3, [r3, #36]	; 0x24
   17208:	cmp	r3, #0
   1720c:	bne	1727c <__assert_fail@plt+0x5e98>
   17210:	ldr	r0, [fp, #-16]
   17214:	bl	112f4 <fileno@plt>
   17218:	mov	r1, r0
   1721c:	ldr	r3, [fp, #4]
   17220:	str	r3, [sp]
   17224:	ldrd	r2, [fp, #-28]	; 0xffffffe4
   17228:	mov	r0, r1
   1722c:	bl	111d4 <lseek64@plt>
   17230:	strd	r0, [fp, #-12]
   17234:	ldrd	r2, [fp, #-12]
   17238:	mvn	r0, #0
   1723c:	mvn	r1, #0
   17240:	cmp	r3, r1
   17244:	cmpeq	r2, r0
   17248:	bne	17254 <__assert_fail@plt+0x5e70>
   1724c:	mvn	r3, #0
   17250:	b	17294 <__assert_fail@plt+0x5eb0>
   17254:	ldr	r3, [fp, #-16]
   17258:	ldr	r3, [r3]
   1725c:	bic	r2, r3, #16
   17260:	ldr	r3, [fp, #-16]
   17264:	str	r2, [r3]
   17268:	ldr	r1, [fp, #-16]
   1726c:	ldrd	r2, [fp, #-12]
   17270:	strd	r2, [r1, #80]	; 0x50
   17274:	mov	r3, #0
   17278:	b	17294 <__assert_fail@plt+0x5eb0>
   1727c:	ldr	r3, [fp, #4]
   17280:	str	r3, [sp]
   17284:	ldrd	r2, [fp, #-28]	; 0xffffffe4
   17288:	ldr	r0, [fp, #-16]
   1728c:	bl	11324 <fseeko64@plt>
   17290:	mov	r3, r0
   17294:	mov	r0, r3
   17298:	sub	sp, fp, #4
   1729c:	pop	{fp, pc}
   172a0:	push	{fp, lr}
   172a4:	add	fp, sp, #4
   172a8:	sub	sp, sp, #8
   172ac:	str	r0, [fp, #-8]
   172b0:	ldr	r1, [fp, #-8]
   172b4:	mov	r0, #0
   172b8:	bl	11114 <clock_gettime@plt>
   172bc:	nop			; (mov r0, r0)
   172c0:	sub	sp, fp, #4
   172c4:	pop	{fp, pc}
   172c8:	push	{fp, lr}
   172cc:	add	fp, sp, #4
   172d0:	sub	sp, sp, #16
   172d4:	str	r0, [fp, #-16]
   172d8:	sub	r3, fp, #12
   172dc:	mov	r0, r3
   172e0:	bl	172a0 <__assert_fail@plt+0x5ebc>
   172e4:	ldr	r3, [fp, #-16]
   172e8:	mov	r2, r3
   172ec:	sub	r3, fp, #12
   172f0:	ldm	r3, {r0, r1}
   172f4:	stm	r2, {r0, r1}
   172f8:	ldr	r0, [fp, #-16]
   172fc:	sub	sp, fp, #4
   17300:	pop	{fp, pc}
   17304:	push	{fp, lr}
   17308:	add	fp, sp, #4
   1730c:	sub	sp, sp, #272	; 0x110
   17310:	str	r0, [fp, #-272]	; 0xfffffef0
   17314:	sub	r3, fp, #264	; 0x108
   17318:	ldr	r2, [pc, #116]	; 17394 <__assert_fail@plt+0x5fb0>
   1731c:	mov	r1, r3
   17320:	ldr	r0, [fp, #-272]	; 0xfffffef0
   17324:	bl	1ccb8 <__assert_fail@plt+0xb8d4>
   17328:	mov	r3, r0
   1732c:	cmp	r3, #0
   17330:	beq	1733c <__assert_fail@plt+0x5f58>
   17334:	mov	r3, #0
   17338:	b	17388 <__assert_fail@plt+0x5fa4>
   1733c:	sub	r3, fp, #264	; 0x108
   17340:	ldr	r1, [pc, #80]	; 17398 <__assert_fail@plt+0x5fb4>
   17344:	mov	r0, r3
   17348:	bl	110b4 <strcmp@plt>
   1734c:	mov	r3, r0
   17350:	cmp	r3, #0
   17354:	beq	1737c <__assert_fail@plt+0x5f98>
   17358:	sub	r3, fp, #264	; 0x108
   1735c:	ldr	r1, [pc, #56]	; 1739c <__assert_fail@plt+0x5fb8>
   17360:	mov	r0, r3
   17364:	bl	110b4 <strcmp@plt>
   17368:	mov	r3, r0
   1736c:	cmp	r3, #0
   17370:	beq	1737c <__assert_fail@plt+0x5f98>
   17374:	mov	r3, #1
   17378:	b	17380 <__assert_fail@plt+0x5f9c>
   1737c:	mov	r3, #0
   17380:	and	r3, r3, #1
   17384:	uxtb	r3, r3
   17388:	mov	r0, r3
   1738c:	sub	sp, fp, #4
   17390:	pop	{fp, pc}
   17394:	andeq	r0, r0, r1, lsl #2
   17398:	andeq	r3, r2, r8, asr #10
   1739c:	andeq	r3, r2, ip, asr #10
   173a0:	push	{fp, lr}
   173a4:	add	fp, sp, #4
   173a8:	sub	sp, sp, #24
   173ac:	strd	r0, [fp, #-20]	; 0xffffffec
   173b0:	str	r2, [fp, #-24]	; 0xffffffe8
   173b4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   173b8:	add	r3, r3, #20
   173bc:	str	r3, [fp, #-8]
   173c0:	ldr	r3, [fp, #-8]
   173c4:	mov	r2, #0
   173c8:	strb	r2, [r3]
   173cc:	ldrd	r2, [fp, #-20]	; 0xffffffec
   173d0:	cmp	r2, #0
   173d4:	sbcs	r3, r3, #0
   173d8:	bge	17450 <__assert_fail@plt+0x606c>
   173dc:	ldr	r3, [fp, #-8]
   173e0:	sub	r3, r3, #1
   173e4:	str	r3, [fp, #-8]
   173e8:	ldrd	r0, [fp, #-20]	; 0xffffffec
   173ec:	mov	r2, #10
   173f0:	mov	r3, #0
   173f4:	bl	21a5c <__assert_fail@plt+0x10678>
   173f8:	uxtb	r3, r2
   173fc:	rsb	r3, r3, #48	; 0x30
   17400:	uxtb	r2, r3
   17404:	ldr	r3, [fp, #-8]
   17408:	strb	r2, [r3]
   1740c:	ldrd	r0, [fp, #-20]	; 0xffffffec
   17410:	mov	r2, #10
   17414:	mov	r3, #0
   17418:	bl	21a5c <__assert_fail@plt+0x10678>
   1741c:	mov	r2, r0
   17420:	mov	r3, r1
   17424:	strd	r2, [fp, #-20]	; 0xffffffec
   17428:	ldrd	r2, [fp, #-20]	; 0xffffffec
   1742c:	orrs	r3, r2, r3
   17430:	bne	173dc <__assert_fail@plt+0x5ff8>
   17434:	ldr	r3, [fp, #-8]
   17438:	sub	r3, r3, #1
   1743c:	str	r3, [fp, #-8]
   17440:	ldr	r3, [fp, #-8]
   17444:	mov	r2, #45	; 0x2d
   17448:	strb	r2, [r3]
   1744c:	b	174a8 <__assert_fail@plt+0x60c4>
   17450:	ldr	r3, [fp, #-8]
   17454:	sub	r3, r3, #1
   17458:	str	r3, [fp, #-8]
   1745c:	ldrd	r0, [fp, #-20]	; 0xffffffec
   17460:	mov	r2, #10
   17464:	mov	r3, #0
   17468:	bl	21a5c <__assert_fail@plt+0x10678>
   1746c:	uxtb	r3, r2
   17470:	add	r3, r3, #48	; 0x30
   17474:	uxtb	r2, r3
   17478:	ldr	r3, [fp, #-8]
   1747c:	strb	r2, [r3]
   17480:	ldrd	r0, [fp, #-20]	; 0xffffffec
   17484:	mov	r2, #10
   17488:	mov	r3, #0
   1748c:	bl	21a5c <__assert_fail@plt+0x10678>
   17490:	mov	r2, r0
   17494:	mov	r3, r1
   17498:	strd	r2, [fp, #-20]	; 0xffffffec
   1749c:	ldrd	r2, [fp, #-20]	; 0xffffffec
   174a0:	orrs	r3, r2, r3
   174a4:	bne	17450 <__assert_fail@plt+0x606c>
   174a8:	ldr	r3, [fp, #-8]
   174ac:	mov	r0, r3
   174b0:	sub	sp, fp, #4
   174b4:	pop	{fp, pc}
   174b8:	push	{fp, lr}
   174bc:	add	fp, sp, #4
   174c0:	sub	sp, sp, #8
   174c4:	str	r0, [fp, #-8]
   174c8:	str	r1, [fp, #-12]
   174cc:	ldr	r0, [fp, #-8]
   174d0:	bl	11294 <strlen@plt>
   174d4:	mov	r3, r0
   174d8:	ldr	r2, [fp, #-12]
   174dc:	mov	r1, r3
   174e0:	ldr	r0, [fp, #-8]
   174e4:	bl	174f8 <__assert_fail@plt+0x6114>
   174e8:	mov	r3, r0
   174ec:	mov	r0, r3
   174f0:	sub	sp, fp, #4
   174f4:	pop	{fp, pc}
   174f8:	push	{fp, lr}
   174fc:	add	fp, sp, #4
   17500:	sub	sp, sp, #56	; 0x38
   17504:	str	r0, [fp, #-48]	; 0xffffffd0
   17508:	str	r1, [fp, #-52]	; 0xffffffcc
   1750c:	str	r2, [fp, #-56]	; 0xffffffc8
   17510:	ldr	r3, [fp, #-48]	; 0xffffffd0
   17514:	str	r3, [fp, #-8]
   17518:	ldr	r2, [fp, #-8]
   1751c:	ldr	r3, [fp, #-52]	; 0xffffffcc
   17520:	add	r3, r2, r3
   17524:	str	r3, [fp, #-20]	; 0xffffffec
   17528:	mov	r3, #0
   1752c:	str	r3, [fp, #-12]
   17530:	bl	111e0 <__ctype_get_mb_cur_max@plt>
   17534:	mov	r3, r0
   17538:	cmp	r3, #1
   1753c:	bls	177f8 <__assert_fail@plt+0x6414>
   17540:	b	1772c <__assert_fail@plt+0x6348>
   17544:	ldr	r3, [fp, #-8]
   17548:	ldrb	r3, [r3]
   1754c:	cmp	r3, #63	; 0x3f
   17550:	bgt	1756c <__assert_fail@plt+0x6188>
   17554:	cmp	r3, #37	; 0x25
   17558:	bge	17588 <__assert_fail@plt+0x61a4>
   1755c:	sub	r3, r3, #32
   17560:	cmp	r3, #3
   17564:	bhi	175a4 <__assert_fail@plt+0x61c0>
   17568:	b	17588 <__assert_fail@plt+0x61a4>
   1756c:	cmp	r3, #65	; 0x41
   17570:	blt	175a4 <__assert_fail@plt+0x61c0>
   17574:	cmp	r3, #95	; 0x5f
   17578:	ble	17588 <__assert_fail@plt+0x61a4>
   1757c:	sub	r3, r3, #97	; 0x61
   17580:	cmp	r3, #29
   17584:	bhi	175a4 <__assert_fail@plt+0x61c0>
   17588:	ldr	r3, [fp, #-8]
   1758c:	add	r3, r3, #1
   17590:	str	r3, [fp, #-8]
   17594:	ldr	r3, [fp, #-12]
   17598:	add	r3, r3, #1
   1759c:	str	r3, [fp, #-12]
   175a0:	b	1772c <__assert_fail@plt+0x6348>
   175a4:	sub	r3, fp, #36	; 0x24
   175a8:	mov	r2, #8
   175ac:	mov	r1, #0
   175b0:	mov	r0, r3
   175b4:	bl	112e8 <memset@plt>
   175b8:	ldr	r2, [fp, #-20]	; 0xffffffec
   175bc:	ldr	r3, [fp, #-8]
   175c0:	sub	r3, r2, r3
   175c4:	mov	r2, r3
   175c8:	sub	r3, fp, #36	; 0x24
   175cc:	sub	r0, fp, #40	; 0x28
   175d0:	ldr	r1, [fp, #-8]
   175d4:	bl	20fc0 <__assert_fail@plt+0xfbdc>
   175d8:	str	r0, [fp, #-16]
   175dc:	ldr	r3, [fp, #-16]
   175e0:	cmn	r3, #1
   175e4:	bne	1761c <__assert_fail@plt+0x6238>
   175e8:	ldr	r3, [fp, #-56]	; 0xffffffc8
   175ec:	and	r3, r3, #1
   175f0:	cmp	r3, #0
   175f4:	bne	17614 <__assert_fail@plt+0x6230>
   175f8:	ldr	r3, [fp, #-8]
   175fc:	add	r3, r3, #1
   17600:	str	r3, [fp, #-8]
   17604:	ldr	r3, [fp, #-12]
   17608:	add	r3, r3, #1
   1760c:	str	r3, [fp, #-12]
   17610:	b	17728 <__assert_fail@plt+0x6344>
   17614:	mvn	r3, #0
   17618:	b	17830 <__assert_fail@plt+0x644c>
   1761c:	ldr	r3, [fp, #-16]
   17620:	cmn	r3, #2
   17624:	bne	17658 <__assert_fail@plt+0x6274>
   17628:	ldr	r3, [fp, #-56]	; 0xffffffc8
   1762c:	and	r3, r3, #1
   17630:	cmp	r3, #0
   17634:	bne	17650 <__assert_fail@plt+0x626c>
   17638:	ldr	r3, [fp, #-20]	; 0xffffffec
   1763c:	str	r3, [fp, #-8]
   17640:	ldr	r3, [fp, #-12]
   17644:	add	r3, r3, #1
   17648:	str	r3, [fp, #-12]
   1764c:	b	17728 <__assert_fail@plt+0x6344>
   17650:	mvn	r3, #0
   17654:	b	17830 <__assert_fail@plt+0x644c>
   17658:	ldr	r3, [fp, #-16]
   1765c:	cmp	r3, #0
   17660:	bne	1766c <__assert_fail@plt+0x6288>
   17664:	mov	r3, #1
   17668:	str	r3, [fp, #-16]
   1766c:	ldr	r3, [fp, #-40]	; 0xffffffd8
   17670:	mov	r0, r3
   17674:	bl	110fc <wcwidth@plt>
   17678:	str	r0, [fp, #-24]	; 0xffffffe8
   1767c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   17680:	cmp	r3, #0
   17684:	blt	176b4 <__assert_fail@plt+0x62d0>
   17688:	ldr	r2, [fp, #-12]
   1768c:	mvn	r3, #-2147483648	; 0x80000000
   17690:	sub	r3, r3, r2
   17694:	ldr	r2, [fp, #-24]	; 0xffffffe8
   17698:	cmp	r3, r2
   1769c:	blt	17810 <__assert_fail@plt+0x642c>
   176a0:	ldr	r2, [fp, #-12]
   176a4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   176a8:	add	r3, r2, r3
   176ac:	str	r3, [fp, #-12]
   176b0:	b	17700 <__assert_fail@plt+0x631c>
   176b4:	ldr	r3, [fp, #-56]	; 0xffffffc8
   176b8:	and	r3, r3, #2
   176bc:	cmp	r3, #0
   176c0:	bne	176f8 <__assert_fail@plt+0x6314>
   176c4:	ldr	r3, [fp, #-40]	; 0xffffffd8
   176c8:	mov	r0, r3
   176cc:	bl	11198 <iswcntrl@plt>
   176d0:	mov	r3, r0
   176d4:	cmp	r3, #0
   176d8:	bne	17700 <__assert_fail@plt+0x631c>
   176dc:	ldr	r3, [fp, #-12]
   176e0:	cmn	r3, #-2147483647	; 0x80000001
   176e4:	beq	17818 <__assert_fail@plt+0x6434>
   176e8:	ldr	r3, [fp, #-12]
   176ec:	add	r3, r3, #1
   176f0:	str	r3, [fp, #-12]
   176f4:	b	17700 <__assert_fail@plt+0x631c>
   176f8:	mvn	r3, #0
   176fc:	b	17830 <__assert_fail@plt+0x644c>
   17700:	ldr	r2, [fp, #-8]
   17704:	ldr	r3, [fp, #-16]
   17708:	add	r3, r2, r3
   1770c:	str	r3, [fp, #-8]
   17710:	sub	r3, fp, #36	; 0x24
   17714:	mov	r0, r3
   17718:	bl	11144 <mbsinit@plt>
   1771c:	mov	r3, r0
   17720:	cmp	r3, #0
   17724:	beq	175b8 <__assert_fail@plt+0x61d4>
   17728:	nop			; (mov r0, r0)
   1772c:	ldr	r2, [fp, #-8]
   17730:	ldr	r3, [fp, #-20]	; 0xffffffec
   17734:	cmp	r2, r3
   17738:	bcc	17544 <__assert_fail@plt+0x6160>
   1773c:	ldr	r3, [fp, #-12]
   17740:	b	17830 <__assert_fail@plt+0x644c>
   17744:	ldr	r3, [fp, #-8]
   17748:	add	r2, r3, #1
   1774c:	str	r2, [fp, #-8]
   17750:	ldrb	r3, [r3]
   17754:	strb	r3, [fp, #-25]	; 0xffffffe7
   17758:	bl	11270 <__ctype_b_loc@plt>
   1775c:	mov	r3, r0
   17760:	ldr	r2, [r3]
   17764:	ldrb	r3, [fp, #-25]	; 0xffffffe7
   17768:	lsl	r3, r3, #1
   1776c:	add	r3, r2, r3
   17770:	ldrh	r3, [r3]
   17774:	and	r3, r3, #16384	; 0x4000
   17778:	cmp	r3, #0
   1777c:	beq	1779c <__assert_fail@plt+0x63b8>
   17780:	ldr	r3, [fp, #-12]
   17784:	cmn	r3, #-2147483647	; 0x80000001
   17788:	beq	17820 <__assert_fail@plt+0x643c>
   1778c:	ldr	r3, [fp, #-12]
   17790:	add	r3, r3, #1
   17794:	str	r3, [fp, #-12]
   17798:	b	177f8 <__assert_fail@plt+0x6414>
   1779c:	ldr	r3, [fp, #-56]	; 0xffffffc8
   177a0:	and	r3, r3, #2
   177a4:	cmp	r3, #0
   177a8:	bne	177f0 <__assert_fail@plt+0x640c>
   177ac:	bl	11270 <__ctype_b_loc@plt>
   177b0:	mov	r3, r0
   177b4:	ldr	r2, [r3]
   177b8:	ldrb	r3, [fp, #-25]	; 0xffffffe7
   177bc:	lsl	r3, r3, #1
   177c0:	add	r3, r2, r3
   177c4:	ldrh	r3, [r3]
   177c8:	and	r3, r3, #2
   177cc:	cmp	r3, #0
   177d0:	bne	177f8 <__assert_fail@plt+0x6414>
   177d4:	ldr	r3, [fp, #-12]
   177d8:	cmn	r3, #-2147483647	; 0x80000001
   177dc:	beq	17828 <__assert_fail@plt+0x6444>
   177e0:	ldr	r3, [fp, #-12]
   177e4:	add	r3, r3, #1
   177e8:	str	r3, [fp, #-12]
   177ec:	b	177f8 <__assert_fail@plt+0x6414>
   177f0:	mvn	r3, #0
   177f4:	b	17830 <__assert_fail@plt+0x644c>
   177f8:	ldr	r2, [fp, #-8]
   177fc:	ldr	r3, [fp, #-20]	; 0xffffffec
   17800:	cmp	r2, r3
   17804:	bcc	17744 <__assert_fail@plt+0x6360>
   17808:	ldr	r3, [fp, #-12]
   1780c:	b	17830 <__assert_fail@plt+0x644c>
   17810:	nop			; (mov r0, r0)
   17814:	b	1782c <__assert_fail@plt+0x6448>
   17818:	nop			; (mov r0, r0)
   1781c:	b	1782c <__assert_fail@plt+0x6448>
   17820:	nop			; (mov r0, r0)
   17824:	b	1782c <__assert_fail@plt+0x6448>
   17828:	nop			; (mov r0, r0)
   1782c:	mvn	r3, #-2147483648	; 0x80000000
   17830:	mov	r0, r3
   17834:	sub	sp, fp, #4
   17838:	pop	{fp, pc}
   1783c:	push	{r4, fp, lr}
   17840:	add	fp, sp, #8
   17844:	sub	sp, sp, #20
   17848:	str	r0, [fp, #-16]
   1784c:	str	r1, [fp, #-20]	; 0xffffffec
   17850:	str	r2, [fp, #-24]	; 0xffffffe8
   17854:	b	17888 <__assert_fail@plt+0x64a4>
   17858:	ldr	r2, [fp, #-16]
   1785c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   17860:	add	r4, r2, r3
   17864:	ldr	r2, [fp, #-20]	; 0xffffffec
   17868:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1786c:	add	r3, r2, r3
   17870:	ldrb	r3, [r3]
   17874:	mov	r0, r3
   17878:	bl	11138 <tolower@plt>
   1787c:	mov	r3, r0
   17880:	uxtb	r3, r3
   17884:	strb	r3, [r4]
   17888:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1788c:	sub	r2, r3, #1
   17890:	str	r2, [fp, #-24]	; 0xffffffe8
   17894:	cmp	r3, #0
   17898:	bne	17858 <__assert_fail@plt+0x6474>
   1789c:	ldr	r3, [fp, #-16]
   178a0:	mov	r0, r3
   178a4:	sub	sp, fp, #8
   178a8:	pop	{r4, fp, pc}
   178ac:	push	{r4, fp, lr}
   178b0:	add	fp, sp, #8
   178b4:	sub	sp, sp, #20
   178b8:	str	r0, [fp, #-16]
   178bc:	str	r1, [fp, #-20]	; 0xffffffec
   178c0:	str	r2, [fp, #-24]	; 0xffffffe8
   178c4:	b	178f8 <__assert_fail@plt+0x6514>
   178c8:	ldr	r2, [fp, #-16]
   178cc:	ldr	r3, [fp, #-24]	; 0xffffffe8
   178d0:	add	r4, r2, r3
   178d4:	ldr	r2, [fp, #-20]	; 0xffffffec
   178d8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   178dc:	add	r3, r2, r3
   178e0:	ldrb	r3, [r3]
   178e4:	mov	r0, r3
   178e8:	bl	11348 <toupper@plt>
   178ec:	mov	r3, r0
   178f0:	uxtb	r3, r3
   178f4:	strb	r3, [r4]
   178f8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   178fc:	sub	r2, r3, #1
   17900:	str	r2, [fp, #-24]	; 0xffffffe8
   17904:	cmp	r3, #0
   17908:	bne	178c8 <__assert_fail@plt+0x64e4>
   1790c:	ldr	r3, [fp, #-16]
   17910:	mov	r0, r3
   17914:	sub	sp, fp, #8
   17918:	pop	{r4, fp, pc}
   1791c:	push	{fp}		; (str fp, [sp, #-4]!)
   17920:	add	fp, sp, #0
   17924:	sub	sp, sp, #20
   17928:	str	r0, [fp, #-16]
   1792c:	str	r1, [fp, #-20]	; 0xffffffec
   17930:	ldr	r3, [pc, #92]	; 17994 <__assert_fail@plt+0x65b0>
   17934:	str	r3, [fp, #-8]
   17938:	ldr	r2, [fp, #-16]
   1793c:	ldr	r3, [fp, #-20]	; 0xffffffec
   17940:	sub	r3, r2, r3
   17944:	add	r2, r3, #4
   17948:	ldr	r3, [fp, #-8]
   1794c:	add	r2, r2, r3
   17950:	ldr	r3, [pc, #64]	; 17998 <__assert_fail@plt+0x65b4>
   17954:	smull	r1, r3, r3, r2
   17958:	add	r3, r3, r2
   1795c:	asr	r1, r3, #2
   17960:	asr	r3, r2, #31
   17964:	sub	r1, r1, r3
   17968:	mov	r3, r1
   1796c:	lsl	r3, r3, #3
   17970:	sub	r3, r3, r1
   17974:	sub	r1, r2, r3
   17978:	ldr	r3, [fp, #-16]
   1797c:	sub	r3, r3, r1
   17980:	add	r3, r3, #3
   17984:	mov	r0, r3
   17988:	add	sp, fp, #0
   1798c:	pop	{fp}		; (ldr fp, [sp], #4)
   17990:	bx	lr
   17994:	andeq	r0, r0, sl, ror r1
   17998:	subls	r2, r9, #-1828716544	; 0x93000000
   1799c:	push	{fp, lr}
   179a0:	add	fp, sp, #4
   179a4:	sub	sp, sp, #48	; 0x30
   179a8:	str	r0, [fp, #-16]
   179ac:	str	r1, [fp, #-20]	; 0xffffffec
   179b0:	str	r2, [fp, #-24]	; 0xffffffe8
   179b4:	str	r3, [fp, #-28]	; 0xffffffe4
   179b8:	mov	r3, #0
   179bc:	strb	r3, [fp, #-5]
   179c0:	ldr	r3, [fp, #8]
   179c4:	str	r3, [sp, #20]
   179c8:	ldr	r3, [fp, #4]
   179cc:	str	r3, [sp, #16]
   179d0:	sub	r3, fp, #5
   179d4:	str	r3, [sp, #12]
   179d8:	mvn	r3, #0
   179dc:	str	r3, [sp, #8]
   179e0:	mov	r3, #0
   179e4:	str	r3, [sp, #4]
   179e8:	mov	r3, #0
   179ec:	str	r3, [sp]
   179f0:	ldr	r3, [fp, #-28]	; 0xffffffe4
   179f4:	ldr	r2, [fp, #-24]	; 0xffffffe8
   179f8:	ldr	r1, [fp, #-20]	; 0xffffffec
   179fc:	ldr	r0, [fp, #-16]
   17a00:	bl	17a14 <__assert_fail@plt+0x6630>
   17a04:	mov	r3, r0
   17a08:	mov	r0, r3
   17a0c:	sub	sp, fp, #4
   17a10:	pop	{fp, pc}
   17a14:	push	{fp, lr}
   17a18:	add	fp, sp, #4
   17a1c:	sub	sp, sp, #1456	; 0x5b0
   17a20:	sub	sp, sp, #8
   17a24:	str	r0, [fp, #-1432]	; 0xfffffa68
   17a28:	str	r1, [fp, #-1436]	; 0xfffffa64
   17a2c:	str	r2, [fp, #-1440]	; 0xfffffa60
   17a30:	str	r3, [fp, #-1444]	; 0xfffffa5c
   17a34:	bl	112d0 <__errno_location@plt>
   17a38:	mov	r3, r0
   17a3c:	ldr	r3, [r3]
   17a40:	str	r3, [fp, #-116]	; 0xffffff8c
   17a44:	ldr	r3, [fp, #-1444]	; 0xfffffa5c
   17a48:	ldr	r3, [r3, #8]
   17a4c:	str	r3, [fp, #-8]
   17a50:	mov	r3, #0
   17a54:	str	r3, [fp, #-16]
   17a58:	ldr	r3, [fp, #-1432]	; 0xfffffa68
   17a5c:	str	r3, [fp, #-20]	; 0xffffffec
   17a60:	mov	r3, #0
   17a64:	str	r3, [fp, #-12]
   17a68:	ldr	r3, [fp, #-1444]	; 0xfffffa5c
   17a6c:	ldr	r3, [r3, #40]	; 0x28
   17a70:	str	r3, [fp, #-12]
   17a74:	ldr	r3, [fp, #-12]
   17a78:	cmp	r3, #0
   17a7c:	bne	17a88 <__assert_fail@plt+0x66a4>
   17a80:	ldr	r3, [pc, #3856]	; 18998 <__assert_fail@plt+0x75b4>
   17a84:	str	r3, [fp, #-12]
   17a88:	ldr	r3, [fp, #-8]
   17a8c:	cmp	r3, #12
   17a90:	ble	17aa4 <__assert_fail@plt+0x66c0>
   17a94:	ldr	r3, [fp, #-8]
   17a98:	sub	r3, r3, #12
   17a9c:	str	r3, [fp, #-8]
   17aa0:	b	17ab8 <__assert_fail@plt+0x66d4>
   17aa4:	ldr	r3, [fp, #-8]
   17aa8:	cmp	r3, #0
   17aac:	bne	17ab8 <__assert_fail@plt+0x66d4>
   17ab0:	mov	r3, #12
   17ab4:	str	r3, [fp, #-8]
   17ab8:	ldr	r3, [fp, #-1440]	; 0xfffffa60
   17abc:	str	r3, [fp, #-24]	; 0xffffffe8
   17ac0:	b	1a3e8 <__assert_fail@plt+0x9004>
   17ac4:	mov	r3, #0
   17ac8:	str	r3, [fp, #-28]	; 0xffffffe4
   17acc:	mov	r3, #0
   17ad0:	str	r3, [fp, #-36]	; 0xffffffdc
   17ad4:	mov	r3, #0
   17ad8:	strb	r3, [fp, #-61]	; 0xffffffc3
   17adc:	ldrb	r3, [fp, #4]
   17ae0:	strb	r3, [fp, #-62]	; 0xffffffc2
   17ae4:	mov	r3, #0
   17ae8:	strb	r3, [fp, #-69]	; 0xffffffbb
   17aec:	ldr	r3, [fp, #-24]	; 0xffffffe8
   17af0:	ldrb	r3, [r3]
   17af4:	cmp	r3, #37	; 0x25
   17af8:	beq	17c30 <__assert_fail@plt+0x684c>
   17afc:	mov	r3, #1
   17b00:	str	r3, [fp, #-368]	; 0xfffffe90
   17b04:	ldr	r3, [fp, #-28]	; 0xffffffe4
   17b08:	cmp	r3, #45	; 0x2d
   17b0c:	beq	17b24 <__assert_fail@plt+0x6740>
   17b10:	ldr	r3, [fp, #12]
   17b14:	cmp	r3, #0
   17b18:	blt	17b24 <__assert_fail@plt+0x6740>
   17b1c:	ldr	r3, [fp, #12]
   17b20:	b	17b28 <__assert_fail@plt+0x6744>
   17b24:	mov	r3, #0
   17b28:	str	r3, [fp, #-372]	; 0xfffffe8c
   17b2c:	ldr	r2, [fp, #-368]	; 0xfffffe90
   17b30:	ldr	r3, [fp, #-372]	; 0xfffffe8c
   17b34:	cmp	r2, r3
   17b38:	movcs	r3, r2
   17b3c:	movcc	r3, r3
   17b40:	str	r3, [fp, #-376]	; 0xfffffe88
   17b44:	ldr	r2, [fp, #-1436]	; 0xfffffa64
   17b48:	ldr	r3, [fp, #-16]
   17b4c:	sub	r2, r2, r3
   17b50:	ldr	r3, [fp, #-376]	; 0xfffffe88
   17b54:	cmp	r2, r3
   17b58:	bhi	17b74 <__assert_fail@plt+0x6790>
   17b5c:	bl	112d0 <__errno_location@plt>
   17b60:	mov	r2, r0
   17b64:	mov	r3, #34	; 0x22
   17b68:	str	r3, [r2]
   17b6c:	mov	r3, #0
   17b70:	b	1a430 <__assert_fail@plt+0x904c>
   17b74:	ldr	r3, [fp, #-20]	; 0xffffffec
   17b78:	cmp	r3, #0
   17b7c:	beq	17c1c <__assert_fail@plt+0x6838>
   17b80:	ldr	r2, [fp, #-368]	; 0xfffffe90
   17b84:	ldr	r3, [fp, #-372]	; 0xfffffe8c
   17b88:	cmp	r2, r3
   17b8c:	bcs	17bfc <__assert_fail@plt+0x6818>
   17b90:	ldr	r2, [fp, #-372]	; 0xfffffe8c
   17b94:	ldr	r3, [fp, #-368]	; 0xfffffe90
   17b98:	sub	r3, r2, r3
   17b9c:	str	r3, [fp, #-380]	; 0xfffffe84
   17ba0:	ldr	r3, [fp, #-28]	; 0xffffffe4
   17ba4:	cmp	r3, #48	; 0x30
   17ba8:	beq	17bb8 <__assert_fail@plt+0x67d4>
   17bac:	ldr	r3, [fp, #-28]	; 0xffffffe4
   17bb0:	cmp	r3, #43	; 0x2b
   17bb4:	bne	17bdc <__assert_fail@plt+0x67f8>
   17bb8:	ldr	r2, [fp, #-380]	; 0xfffffe84
   17bbc:	mov	r1, #48	; 0x30
   17bc0:	ldr	r0, [fp, #-20]	; 0xffffffec
   17bc4:	bl	112e8 <memset@plt>
   17bc8:	ldr	r2, [fp, #-20]	; 0xffffffec
   17bcc:	ldr	r3, [fp, #-380]	; 0xfffffe84
   17bd0:	add	r3, r2, r3
   17bd4:	str	r3, [fp, #-20]	; 0xffffffec
   17bd8:	b	17bfc <__assert_fail@plt+0x6818>
   17bdc:	ldr	r2, [fp, #-380]	; 0xfffffe84
   17be0:	mov	r1, #32
   17be4:	ldr	r0, [fp, #-20]	; 0xffffffec
   17be8:	bl	112e8 <memset@plt>
   17bec:	ldr	r2, [fp, #-20]	; 0xffffffec
   17bf0:	ldr	r3, [fp, #-380]	; 0xfffffe84
   17bf4:	add	r3, r2, r3
   17bf8:	str	r3, [fp, #-20]	; 0xffffffec
   17bfc:	ldr	r3, [fp, #-24]	; 0xffffffe8
   17c00:	ldrb	r2, [r3]
   17c04:	ldr	r3, [fp, #-20]	; 0xffffffec
   17c08:	strb	r2, [r3]
   17c0c:	ldr	r2, [fp, #-20]	; 0xffffffec
   17c10:	ldr	r3, [fp, #-368]	; 0xfffffe90
   17c14:	add	r3, r2, r3
   17c18:	str	r3, [fp, #-20]	; 0xffffffec
   17c1c:	ldr	r2, [fp, #-16]
   17c20:	ldr	r3, [fp, #-376]	; 0xfffffe88
   17c24:	add	r3, r2, r3
   17c28:	str	r3, [fp, #-16]
   17c2c:	b	1a3d4 <__assert_fail@plt+0x8ff0>
   17c30:	ldr	r3, [fp, #-24]	; 0xffffffe8
   17c34:	str	r3, [fp, #-120]	; 0xffffff88
   17c38:	ldr	r3, [fp, #-24]	; 0xffffffe8
   17c3c:	add	r3, r3, #1
   17c40:	str	r3, [fp, #-24]	; 0xffffffe8
   17c44:	ldr	r3, [fp, #-24]	; 0xffffffe8
   17c48:	ldrb	r3, [r3]
   17c4c:	sub	r3, r3, #35	; 0x23
   17c50:	cmp	r3, #60	; 0x3c
   17c54:	ldrls	pc, [pc, r3, lsl #2]
   17c58:	b	17d78 <__assert_fail@plt+0x6994>
   17c5c:	andeq	r7, r1, ip, ror #26
   17c60:	andeq	r7, r1, r8, ror sp
   17c64:	andeq	r7, r1, r8, ror sp
   17c68:	andeq	r7, r1, r8, ror sp
   17c6c:	andeq	r7, r1, r8, ror sp
   17c70:	andeq	r7, r1, r8, ror sp
   17c74:	andeq	r7, r1, r8, ror sp
   17c78:	andeq	r7, r1, r8, ror sp
   17c7c:	andeq	r7, r1, r0, asr sp
   17c80:	andeq	r7, r1, r8, ror sp
   17c84:	andeq	r7, r1, r0, asr sp
   17c88:	andeq	r7, r1, r8, ror sp
   17c8c:	andeq	r7, r1, r8, ror sp
   17c90:	andeq	r7, r1, r0, asr sp
   17c94:	andeq	r7, r1, r8, ror sp
   17c98:	andeq	r7, r1, r8, ror sp
   17c9c:	andeq	r7, r1, r8, ror sp
   17ca0:	andeq	r7, r1, r8, ror sp
   17ca4:	andeq	r7, r1, r8, ror sp
   17ca8:	andeq	r7, r1, r8, ror sp
   17cac:	andeq	r7, r1, r8, ror sp
   17cb0:	andeq	r7, r1, r8, ror sp
   17cb4:	andeq	r7, r1, r8, ror sp
   17cb8:	andeq	r7, r1, r8, ror sp
   17cbc:	andeq	r7, r1, r8, ror sp
   17cc0:	andeq	r7, r1, r8, ror sp
   17cc4:	andeq	r7, r1, r8, ror sp
   17cc8:	andeq	r7, r1, r8, ror sp
   17ccc:	andeq	r7, r1, r8, ror sp
   17cd0:	andeq	r7, r1, r8, ror sp
   17cd4:	andeq	r7, r1, r8, ror sp
   17cd8:	andeq	r7, r1, r8, ror sp
   17cdc:	andeq	r7, r1, r8, ror sp
   17ce0:	andeq	r7, r1, r8, ror sp
   17ce4:	andeq	r7, r1, r8, ror sp
   17ce8:	andeq	r7, r1, r8, ror sp
   17cec:	andeq	r7, r1, r8, ror sp
   17cf0:	andeq	r7, r1, r8, ror sp
   17cf4:	andeq	r7, r1, r8, ror sp
   17cf8:	andeq	r7, r1, r8, ror sp
   17cfc:	andeq	r7, r1, r8, ror sp
   17d00:	andeq	r7, r1, r8, ror sp
   17d04:	andeq	r7, r1, r8, ror sp
   17d08:	andeq	r7, r1, r8, ror sp
   17d0c:	andeq	r7, r1, r8, ror sp
   17d10:	andeq	r7, r1, r8, ror sp
   17d14:	andeq	r7, r1, r8, ror sp
   17d18:	andeq	r7, r1, r8, ror sp
   17d1c:	andeq	r7, r1, r8, ror sp
   17d20:	andeq	r7, r1, r8, ror sp
   17d24:	andeq	r7, r1, r8, ror sp
   17d28:	andeq	r7, r1, r8, ror sp
   17d2c:	andeq	r7, r1, r8, ror sp
   17d30:	andeq	r7, r1, r8, ror sp
   17d34:	andeq	r7, r1, r8, ror sp
   17d38:	andeq	r7, r1, r8, ror sp
   17d3c:	andeq	r7, r1, r8, ror sp
   17d40:	andeq	r7, r1, r8, ror sp
   17d44:	andeq	r7, r1, r8, ror sp
   17d48:	andeq	r7, r1, r0, ror #26
   17d4c:	andeq	r7, r1, r0, asr sp
   17d50:	ldr	r3, [fp, #-24]	; 0xffffffe8
   17d54:	ldrb	r3, [r3]
   17d58:	str	r3, [fp, #-28]	; 0xffffffe4
   17d5c:	b	17d98 <__assert_fail@plt+0x69b4>
   17d60:	mov	r3, #1
   17d64:	strb	r3, [fp, #-62]	; 0xffffffc2
   17d68:	b	17d98 <__assert_fail@plt+0x69b4>
   17d6c:	mov	r3, #1
   17d70:	strb	r3, [fp, #-69]	; 0xffffffbb
   17d74:	b	17d98 <__assert_fail@plt+0x69b4>
   17d78:	nop			; (mov r0, r0)
   17d7c:	nop			; (mov r0, r0)
   17d80:	ldr	r3, [fp, #-24]	; 0xffffffe8
   17d84:	ldrb	r3, [r3]
   17d88:	sub	r3, r3, #48	; 0x30
   17d8c:	cmp	r3, #9
   17d90:	bhi	17f50 <__assert_fail@plt+0x6b6c>
   17d94:	b	17d9c <__assert_fail@plt+0x69b8>
   17d98:	b	17c38 <__assert_fail@plt+0x6854>
   17d9c:	mov	r3, #0
   17da0:	str	r3, [fp, #12]
   17da4:	ldr	r3, [fp, #12]
   17da8:	cmp	r3, #0
   17dac:	bge	17df0 <__assert_fail@plt+0x6a0c>
   17db0:	ldr	r3, [fp, #12]
   17db4:	cmn	r3, #1
   17db8:	beq	17de0 <__assert_fail@plt+0x69fc>
   17dbc:	ldr	r3, [fp, #12]
   17dc0:	mov	r1, r3
   17dc4:	mov	r0, #-2147483648	; 0x80000000
   17dc8:	bl	2181c <__assert_fail@plt+0x10438>
   17dcc:	mov	r3, r0
   17dd0:	cmp	r3, #9
   17dd4:	bgt	17de0 <__assert_fail@plt+0x69fc>
   17dd8:	mov	r3, #1
   17ddc:	b	17de4 <__assert_fail@plt+0x6a00>
   17de0:	mov	r3, #0
   17de4:	and	r3, r3, #1
   17de8:	uxtb	r3, r3
   17dec:	b	17e08 <__assert_fail@plt+0x6a24>
   17df0:	ldr	r3, [fp, #12]
   17df4:	ldr	r2, [pc, #2976]	; 1899c <__assert_fail@plt+0x75b8>
   17df8:	cmp	r3, r2
   17dfc:	movgt	r3, #1
   17e00:	movle	r3, #0
   17e04:	uxtb	r3, r3
   17e08:	cmp	r3, #0
   17e0c:	beq	17e30 <__assert_fail@plt+0x6a4c>
   17e10:	ldr	r3, [fp, #12]
   17e14:	mov	r2, r3
   17e18:	mov	r3, r2
   17e1c:	lsl	r3, r3, #2
   17e20:	add	r3, r3, r2
   17e24:	lsl	r3, r3, #1
   17e28:	str	r3, [fp, #12]
   17e2c:	b	17f28 <__assert_fail@plt+0x6b44>
   17e30:	ldr	r3, [fp, #12]
   17e34:	mov	r2, r3
   17e38:	mov	r3, r2
   17e3c:	lsl	r3, r3, #2
   17e40:	add	r3, r3, r2
   17e44:	lsl	r3, r3, #1
   17e48:	str	r3, [fp, #12]
   17e4c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   17e50:	ldrb	r3, [r3]
   17e54:	sub	r3, r3, #48	; 0x30
   17e58:	cmp	r3, #0
   17e5c:	bge	17e84 <__assert_fail@plt+0x6aa0>
   17e60:	ldr	r3, [fp, #-24]	; 0xffffffe8
   17e64:	ldrb	r3, [r3]
   17e68:	rsb	r2, r3, #-2147483600	; 0x80000030
   17e6c:	ldr	r3, [fp, #12]
   17e70:	cmp	r2, r3
   17e74:	movgt	r3, #1
   17e78:	movle	r3, #0
   17e7c:	uxtb	r3, r3
   17e80:	b	17ee0 <__assert_fail@plt+0x6afc>
   17e84:	ldr	r3, [fp, #12]
   17e88:	cmp	r3, #0
   17e8c:	bge	17eb8 <__assert_fail@plt+0x6ad4>
   17e90:	ldr	r3, [fp, #-24]	; 0xffffffe8
   17e94:	ldrb	r3, [r3]
   17e98:	sub	r2, r3, #48	; 0x30
   17e9c:	ldr	r3, [fp, #12]
   17ea0:	rsb	r3, r3, #-2147483648	; 0x80000000
   17ea4:	cmp	r2, r3
   17ea8:	movlt	r3, #1
   17eac:	movge	r3, #0
   17eb0:	uxtb	r3, r3
   17eb4:	b	17ee0 <__assert_fail@plt+0x6afc>
   17eb8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   17ebc:	ldrb	r3, [r3]
   17ec0:	sub	r2, r3, #48	; 0x30
   17ec4:	mvn	r3, #-2147483648	; 0x80000000
   17ec8:	sub	r3, r3, r2
   17ecc:	ldr	r2, [fp, #12]
   17ed0:	cmp	r3, r2
   17ed4:	movlt	r3, #1
   17ed8:	movge	r3, #0
   17edc:	uxtb	r3, r3
   17ee0:	cmp	r3, #0
   17ee4:	beq	17f08 <__assert_fail@plt+0x6b24>
   17ee8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   17eec:	ldrb	r3, [r3]
   17ef0:	mov	r2, r3
   17ef4:	ldr	r3, [fp, #12]
   17ef8:	add	r3, r2, r3
   17efc:	sub	r3, r3, #48	; 0x30
   17f00:	str	r3, [fp, #12]
   17f04:	b	17f28 <__assert_fail@plt+0x6b44>
   17f08:	ldr	r3, [fp, #-24]	; 0xffffffe8
   17f0c:	ldrb	r3, [r3]
   17f10:	mov	r2, r3
   17f14:	ldr	r3, [fp, #12]
   17f18:	add	r3, r2, r3
   17f1c:	sub	r3, r3, #48	; 0x30
   17f20:	str	r3, [fp, #12]
   17f24:	b	17f30 <__assert_fail@plt+0x6b4c>
   17f28:	mvn	r3, #-2147483648	; 0x80000000
   17f2c:	str	r3, [fp, #12]
   17f30:	ldr	r3, [fp, #-24]	; 0xffffffe8
   17f34:	add	r3, r3, #1
   17f38:	str	r3, [fp, #-24]	; 0xffffffe8
   17f3c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   17f40:	ldrb	r3, [r3]
   17f44:	sub	r3, r3, #48	; 0x30
   17f48:	cmp	r3, #9
   17f4c:	bls	17da4 <__assert_fail@plt+0x69c0>
   17f50:	ldr	r3, [fp, #-24]	; 0xffffffe8
   17f54:	ldrb	r3, [r3]
   17f58:	cmp	r3, #69	; 0x45
   17f5c:	beq	17f68 <__assert_fail@plt+0x6b84>
   17f60:	cmp	r3, #79	; 0x4f
   17f64:	bne	17f80 <__assert_fail@plt+0x6b9c>
   17f68:	ldr	r3, [fp, #-24]	; 0xffffffe8
   17f6c:	add	r2, r3, #1
   17f70:	str	r2, [fp, #-24]	; 0xffffffe8
   17f74:	ldrb	r3, [r3]
   17f78:	str	r3, [fp, #-32]	; 0xffffffe0
   17f7c:	b	17f8c <__assert_fail@plt+0x6ba8>
   17f80:	mov	r3, #0
   17f84:	str	r3, [fp, #-32]	; 0xffffffe0
   17f88:	nop			; (mov r0, r0)
   17f8c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   17f90:	ldrb	r3, [r3]
   17f94:	str	r3, [fp, #-76]	; 0xffffffb4
   17f98:	ldr	r3, [fp, #-76]	; 0xffffffb4
   17f9c:	cmp	r3, #122	; 0x7a
   17fa0:	ldrls	pc, [pc, r3, lsl #2]
   17fa4:	b	1a244 <__assert_fail@plt+0x8e60>
   17fa8:	andeq	sl, r1, r0, lsl #3
   17fac:	andeq	sl, r1, r4, asr #4
   17fb0:	andeq	sl, r1, r4, asr #4
   17fb4:	andeq	sl, r1, r4, asr #4
   17fb8:	andeq	sl, r1, r4, asr #4
   17fbc:	andeq	sl, r1, r4, asr #4
   17fc0:	andeq	sl, r1, r4, asr #4
   17fc4:	andeq	sl, r1, r4, asr #4
   17fc8:	andeq	sl, r1, r4, asr #4
   17fcc:	andeq	sl, r1, r4, asr #4
   17fd0:	andeq	sl, r1, r4, asr #4
   17fd4:	andeq	sl, r1, r4, asr #4
   17fd8:	andeq	sl, r1, r4, asr #4
   17fdc:	andeq	sl, r1, r4, asr #4
   17fe0:	andeq	sl, r1, r4, asr #4
   17fe4:	andeq	sl, r1, r4, asr #4
   17fe8:	andeq	sl, r1, r4, asr #4
   17fec:	andeq	sl, r1, r4, asr #4
   17ff0:	andeq	sl, r1, r4, asr #4
   17ff4:	andeq	sl, r1, r4, asr #4
   17ff8:	andeq	sl, r1, r4, asr #4
   17ffc:	andeq	sl, r1, r4, asr #4
   18000:	andeq	sl, r1, r4, asr #4
   18004:	andeq	sl, r1, r4, asr #4
   18008:	andeq	sl, r1, r4, asr #4
   1800c:	andeq	sl, r1, r4, asr #4
   18010:	andeq	sl, r1, r4, asr #4
   18014:	andeq	sl, r1, r4, asr #4
   18018:	andeq	sl, r1, r4, asr #4
   1801c:	andeq	sl, r1, r4, asr #4
   18020:	andeq	sl, r1, r4, asr #4
   18024:	andeq	sl, r1, r4, asr #4
   18028:	andeq	sl, r1, r4, asr #4
   1802c:	andeq	sl, r1, r4, asr #4
   18030:	andeq	sl, r1, r4, asr #4
   18034:	andeq	sl, r1, r4, asr #4
   18038:	andeq	sl, r1, r4, asr #4
   1803c:	muleq	r1, r4, r1
   18040:	andeq	sl, r1, r4, asr #4
   18044:	andeq	sl, r1, r4, asr #4
   18048:	andeq	sl, r1, r4, asr #4
   1804c:	andeq	sl, r1, r4, asr #4
   18050:	andeq	sl, r1, r4, asr #4
   18054:	andeq	sl, r1, r4, asr #4
   18058:	andeq	sl, r1, r4, asr #4
   1805c:	andeq	sl, r1, r4, asr #4
   18060:	andeq	sl, r1, r4, asr #4
   18064:	andeq	sl, r1, r4, asr #4
   18068:	andeq	sl, r1, r4, asr #4
   1806c:	andeq	sl, r1, r4, asr #4
   18070:	andeq	sl, r1, r4, asr #4
   18074:	andeq	sl, r1, r4, asr #4
   18078:	andeq	sl, r1, r4, asr #4
   1807c:	andeq	sl, r1, r4, asr #4
   18080:	andeq	sl, r1, r4, asr #4
   18084:	andeq	sl, r1, r4, asr #4
   18088:	andeq	sl, r1, r4, asr #4
   1808c:	andeq	sl, r1, r4, asr #4
   18090:	andeq	r9, r1, r8, lsr #30
   18094:	andeq	sl, r1, r4, asr #4
   18098:	andeq	sl, r1, r4, asr #4
   1809c:	andeq	sl, r1, r4, asr #4
   180a0:	andeq	sl, r1, r4, asr #4
   180a4:	andeq	sl, r1, r4, asr #4
   180a8:	andeq	sl, r1, r4, asr #4
   180ac:	andeq	r8, r1, r8, lsl #6
   180b0:	andeq	r8, r1, r0, ror #6
   180b4:	strdeq	r8, [r1], -ip
   180b8:			; <UNDEFINED> instruction: 0x000188b8
   180bc:	andeq	sl, r1, r4, asr #4
   180c0:	muleq	r1, ip, lr
   180c4:	strdeq	r9, [r1], -r0
   180c8:	andeq	r8, r1, r0, lsl #30
   180cc:	andeq	r8, r1, r4, lsr #30
   180d0:	andeq	sl, r1, r4, asr #4
   180d4:	andeq	sl, r1, r4, asr #4
   180d8:	andeq	sl, r1, r4, asr #4
   180dc:	andeq	r8, r1, r8, asr #31
   180e0:	andeq	r9, r1, ip, lsr #32
   180e4:	andeq	sl, r1, r4, asr #4
   180e8:	andeq	r9, r1, r0, asr #10
   180ec:	andeq	sl, r1, r4, asr #4
   180f0:	andeq	r9, r1, ip, lsr #11
   180f4:			; <UNDEFINED> instruction: 0x000195b8
   180f8:	andeq	r9, r1, r0, lsr #14
   180fc:	andeq	r9, r1, r4, lsr #17
   18100:	strdeq	r9, [r1], -r0
   18104:	andeq	r9, r1, r8, lsl ip
   18108:	andeq	r9, r1, r0, lsl r7
   1810c:			; <UNDEFINED> instruction: 0x00019cb4
   18110:	muleq	r1, r4, sp
   18114:	andeq	sl, r1, r4, asr #4
   18118:	andeq	sl, r1, r4, asr #4
   1811c:	andeq	sl, r1, r4, asr #4
   18120:	andeq	sl, r1, r4, asr #4
   18124:	andeq	sl, r1, r4, asr #4
   18128:	andeq	sl, r1, r4, asr #4
   1812c:	ldrdeq	r8, [r1], -ip
   18130:	andeq	r8, r1, r4, lsr r3
   18134:	andeq	r8, r1, ip, lsl #7
   18138:	ldrdeq	r8, [r1], -r0
   1813c:	strdeq	r8, [r1], -r4
   18140:	andeq	sl, r1, r4, asr #4
   18144:	strdeq	r9, [r1], -r0
   18148:	andeq	r8, r1, r4, lsr r3
   1814c:	andeq	sl, r1, r4, asr #4
   18150:	andeq	r8, r1, r8, lsl #31
   18154:	andeq	r8, r1, r4, asr #30
   18158:	andeq	r8, r1, r8, ror #30
   1815c:	andeq	r8, r1, ip, ror #31
   18160:	andeq	r9, r1, r0, lsl r4
   18164:	andeq	sl, r1, r4, asr #4
   18168:	andeq	r9, r1, r0, asr r5
   1816c:	andeq	r9, r1, r0, ror r5
   18170:	andeq	r8, r1, ip, asr r5
   18174:	ldrdeq	r9, [r1], -ip
   18178:	andeq	r9, r1, ip, lsr #14
   1817c:	andeq	r9, r1, ip, asr r8
   18180:	andeq	sl, r1, r4, asr #4
   18184:	muleq	r1, r0, ip
   18188:	andeq	r8, r1, r8, lsr #17
   1818c:	andeq	r9, r1, r8, lsl #26
   18190:	andeq	r9, r1, r4, lsl #31
   18194:	ldr	r3, [fp, #-24]	; 0xffffffe8
   18198:	sub	r2, r3, #1
   1819c:	ldr	r3, [fp, #-120]	; 0xffffff88
   181a0:	cmp	r2, r3
   181a4:	bne	1a17c <__assert_fail@plt+0x8d98>
   181a8:	mov	r3, #1
   181ac:	str	r3, [fp, #-124]	; 0xffffff84
   181b0:	ldr	r3, [fp, #-28]	; 0xffffffe4
   181b4:	cmp	r3, #45	; 0x2d
   181b8:	beq	181d0 <__assert_fail@plt+0x6dec>
   181bc:	ldr	r3, [fp, #12]
   181c0:	cmp	r3, #0
   181c4:	blt	181d0 <__assert_fail@plt+0x6dec>
   181c8:	ldr	r3, [fp, #12]
   181cc:	b	181d4 <__assert_fail@plt+0x6df0>
   181d0:	mov	r3, #0
   181d4:	str	r3, [fp, #-128]	; 0xffffff80
   181d8:	ldr	r2, [fp, #-124]	; 0xffffff84
   181dc:	ldr	r3, [fp, #-128]	; 0xffffff80
   181e0:	cmp	r2, r3
   181e4:	movcs	r3, r2
   181e8:	movcc	r3, r3
   181ec:	str	r3, [fp, #-132]	; 0xffffff7c
   181f0:	ldr	r2, [fp, #-1436]	; 0xfffffa64
   181f4:	ldr	r3, [fp, #-16]
   181f8:	sub	r2, r2, r3
   181fc:	ldr	r3, [fp, #-132]	; 0xffffff7c
   18200:	cmp	r2, r3
   18204:	bhi	18220 <__assert_fail@plt+0x6e3c>
   18208:	bl	112d0 <__errno_location@plt>
   1820c:	mov	r2, r0
   18210:	mov	r3, #34	; 0x22
   18214:	str	r3, [r2]
   18218:	mov	r3, #0
   1821c:	b	1a430 <__assert_fail@plt+0x904c>
   18220:	ldr	r3, [fp, #-20]	; 0xffffffec
   18224:	cmp	r3, #0
   18228:	beq	182c8 <__assert_fail@plt+0x6ee4>
   1822c:	ldr	r2, [fp, #-124]	; 0xffffff84
   18230:	ldr	r3, [fp, #-128]	; 0xffffff80
   18234:	cmp	r2, r3
   18238:	bcs	182a8 <__assert_fail@plt+0x6ec4>
   1823c:	ldr	r2, [fp, #-128]	; 0xffffff80
   18240:	ldr	r3, [fp, #-124]	; 0xffffff84
   18244:	sub	r3, r2, r3
   18248:	str	r3, [fp, #-136]	; 0xffffff78
   1824c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   18250:	cmp	r3, #48	; 0x30
   18254:	beq	18264 <__assert_fail@plt+0x6e80>
   18258:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1825c:	cmp	r3, #43	; 0x2b
   18260:	bne	18288 <__assert_fail@plt+0x6ea4>
   18264:	ldr	r2, [fp, #-136]	; 0xffffff78
   18268:	mov	r1, #48	; 0x30
   1826c:	ldr	r0, [fp, #-20]	; 0xffffffec
   18270:	bl	112e8 <memset@plt>
   18274:	ldr	r2, [fp, #-20]	; 0xffffffec
   18278:	ldr	r3, [fp, #-136]	; 0xffffff78
   1827c:	add	r3, r2, r3
   18280:	str	r3, [fp, #-20]	; 0xffffffec
   18284:	b	182a8 <__assert_fail@plt+0x6ec4>
   18288:	ldr	r2, [fp, #-136]	; 0xffffff78
   1828c:	mov	r1, #32
   18290:	ldr	r0, [fp, #-20]	; 0xffffffec
   18294:	bl	112e8 <memset@plt>
   18298:	ldr	r2, [fp, #-20]	; 0xffffffec
   1829c:	ldr	r3, [fp, #-136]	; 0xffffff78
   182a0:	add	r3, r2, r3
   182a4:	str	r3, [fp, #-20]	; 0xffffffec
   182a8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   182ac:	ldrb	r2, [r3]
   182b0:	ldr	r3, [fp, #-20]	; 0xffffffec
   182b4:	strb	r2, [r3]
   182b8:	ldr	r2, [fp, #-20]	; 0xffffffec
   182bc:	ldr	r3, [fp, #-124]	; 0xffffff84
   182c0:	add	r3, r2, r3
   182c4:	str	r3, [fp, #-20]	; 0xffffffec
   182c8:	ldr	r2, [fp, #-16]
   182cc:	ldr	r3, [fp, #-132]	; 0xffffff7c
   182d0:	add	r3, r2, r3
   182d4:	str	r3, [fp, #-16]
   182d8:	b	1a3d4 <__assert_fail@plt+0x8ff0>
   182dc:	ldr	r3, [fp, #-32]	; 0xffffffe0
   182e0:	cmp	r3, #0
   182e4:	bne	1a190 <__assert_fail@plt+0x8dac>
   182e8:	ldrb	r3, [fp, #-69]	; 0xffffffbb
   182ec:	cmp	r3, #0
   182f0:	beq	18564 <__assert_fail@plt+0x7180>
   182f4:	mov	r3, #1
   182f8:	strb	r3, [fp, #-62]	; 0xffffffc2
   182fc:	mov	r3, #0
   18300:	strb	r3, [fp, #-61]	; 0xffffffc3
   18304:	b	18564 <__assert_fail@plt+0x7180>
   18308:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1830c:	cmp	r3, #0
   18310:	bne	1a198 <__assert_fail@plt+0x8db4>
   18314:	ldrb	r3, [fp, #-69]	; 0xffffffbb
   18318:	cmp	r3, #0
   1831c:	beq	1856c <__assert_fail@plt+0x7188>
   18320:	mov	r3, #1
   18324:	strb	r3, [fp, #-62]	; 0xffffffc2
   18328:	mov	r3, #0
   1832c:	strb	r3, [fp, #-61]	; 0xffffffc3
   18330:	b	1856c <__assert_fail@plt+0x7188>
   18334:	ldrb	r3, [fp, #-69]	; 0xffffffbb
   18338:	cmp	r3, #0
   1833c:	beq	18350 <__assert_fail@plt+0x6f6c>
   18340:	mov	r3, #1
   18344:	strb	r3, [fp, #-62]	; 0xffffffc2
   18348:	mov	r3, #0
   1834c:	strb	r3, [fp, #-61]	; 0xffffffc3
   18350:	ldr	r3, [fp, #-32]	; 0xffffffe0
   18354:	cmp	r3, #69	; 0x45
   18358:	bne	18574 <__assert_fail@plt+0x7190>
   1835c:	b	1a244 <__assert_fail@plt+0x8e60>
   18360:	ldr	r3, [fp, #-32]	; 0xffffffe0
   18364:	cmp	r3, #69	; 0x45
   18368:	beq	1a1a0 <__assert_fail@plt+0x8dbc>
   1836c:	ldrb	r3, [fp, #-69]	; 0xffffffbb
   18370:	cmp	r3, #0
   18374:	beq	1857c <__assert_fail@plt+0x7198>
   18378:	mov	r3, #1
   1837c:	strb	r3, [fp, #-62]	; 0xffffffc2
   18380:	mov	r3, #0
   18384:	strb	r3, [fp, #-61]	; 0xffffffc3
   18388:	b	1857c <__assert_fail@plt+0x7198>
   1838c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   18390:	cmp	r3, #79	; 0x4f
   18394:	bne	18584 <__assert_fail@plt+0x71a0>
   18398:	b	1a244 <__assert_fail@plt+0x8e60>
   1839c:	mvn	r3, #0
   183a0:	str	r3, [fp, #-80]	; 0xffffffb0
   183a4:	ldr	r3, [fp, #24]
   183a8:	str	r3, [sp, #20]
   183ac:	ldr	r3, [fp, #20]
   183b0:	str	r3, [sp, #16]
   183b4:	ldr	r3, [fp, #16]
   183b8:	str	r3, [sp, #12]
   183bc:	ldr	r3, [fp, #-80]	; 0xffffffb0
   183c0:	str	r3, [sp, #8]
   183c4:	ldr	r3, [fp, #-28]	; 0xffffffe4
   183c8:	str	r3, [sp, #4]
   183cc:	ldrb	r3, [fp, #-62]	; 0xffffffc2
   183d0:	str	r3, [sp]
   183d4:	ldr	r3, [fp, #-1444]	; 0xfffffa5c
   183d8:	ldr	r2, [fp, #-56]	; 0xffffffc8
   183dc:	mvn	r1, #0
   183e0:	mov	r0, #0
   183e4:	bl	17a14 <__assert_fail@plt+0x6630>
   183e8:	str	r0, [fp, #-140]	; 0xffffff74
   183ec:	ldr	r3, [fp, #-140]	; 0xffffff74
   183f0:	str	r3, [fp, #-144]	; 0xffffff70
   183f4:	ldr	r3, [fp, #-28]	; 0xffffffe4
   183f8:	cmp	r3, #45	; 0x2d
   183fc:	beq	18414 <__assert_fail@plt+0x7030>
   18400:	ldr	r3, [fp, #12]
   18404:	cmp	r3, #0
   18408:	blt	18414 <__assert_fail@plt+0x7030>
   1840c:	ldr	r3, [fp, #12]
   18410:	b	18418 <__assert_fail@plt+0x7034>
   18414:	mov	r3, #0
   18418:	str	r3, [fp, #-148]	; 0xffffff6c
   1841c:	ldr	r2, [fp, #-144]	; 0xffffff70
   18420:	ldr	r3, [fp, #-148]	; 0xffffff6c
   18424:	cmp	r2, r3
   18428:	movcs	r3, r2
   1842c:	movcc	r3, r3
   18430:	str	r3, [fp, #-152]	; 0xffffff68
   18434:	ldr	r2, [fp, #-1436]	; 0xfffffa64
   18438:	ldr	r3, [fp, #-16]
   1843c:	sub	r2, r2, r3
   18440:	ldr	r3, [fp, #-152]	; 0xffffff68
   18444:	cmp	r2, r3
   18448:	bhi	18464 <__assert_fail@plt+0x7080>
   1844c:	bl	112d0 <__errno_location@plt>
   18450:	mov	r2, r0
   18454:	mov	r3, #34	; 0x22
   18458:	str	r3, [r2]
   1845c:	mov	r3, #0
   18460:	b	1a430 <__assert_fail@plt+0x904c>
   18464:	ldr	r3, [fp, #-20]	; 0xffffffec
   18468:	cmp	r3, #0
   1846c:	beq	18548 <__assert_fail@plt+0x7164>
   18470:	ldr	r2, [fp, #-144]	; 0xffffff70
   18474:	ldr	r3, [fp, #-148]	; 0xffffff6c
   18478:	cmp	r2, r3
   1847c:	bcs	184ec <__assert_fail@plt+0x7108>
   18480:	ldr	r2, [fp, #-148]	; 0xffffff6c
   18484:	ldr	r3, [fp, #-144]	; 0xffffff70
   18488:	sub	r3, r2, r3
   1848c:	str	r3, [fp, #-156]	; 0xffffff64
   18490:	ldr	r3, [fp, #-28]	; 0xffffffe4
   18494:	cmp	r3, #48	; 0x30
   18498:	beq	184a8 <__assert_fail@plt+0x70c4>
   1849c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   184a0:	cmp	r3, #43	; 0x2b
   184a4:	bne	184cc <__assert_fail@plt+0x70e8>
   184a8:	ldr	r2, [fp, #-156]	; 0xffffff64
   184ac:	mov	r1, #48	; 0x30
   184b0:	ldr	r0, [fp, #-20]	; 0xffffffec
   184b4:	bl	112e8 <memset@plt>
   184b8:	ldr	r2, [fp, #-20]	; 0xffffffec
   184bc:	ldr	r3, [fp, #-156]	; 0xffffff64
   184c0:	add	r3, r2, r3
   184c4:	str	r3, [fp, #-20]	; 0xffffffec
   184c8:	b	184ec <__assert_fail@plt+0x7108>
   184cc:	ldr	r2, [fp, #-156]	; 0xffffff64
   184d0:	mov	r1, #32
   184d4:	ldr	r0, [fp, #-20]	; 0xffffffec
   184d8:	bl	112e8 <memset@plt>
   184dc:	ldr	r2, [fp, #-20]	; 0xffffffec
   184e0:	ldr	r3, [fp, #-156]	; 0xffffff64
   184e4:	add	r3, r2, r3
   184e8:	str	r3, [fp, #-20]	; 0xffffffec
   184ec:	ldr	r2, [fp, #-1436]	; 0xfffffa64
   184f0:	ldr	r3, [fp, #-16]
   184f4:	sub	r1, r2, r3
   184f8:	ldr	r3, [fp, #24]
   184fc:	str	r3, [sp, #20]
   18500:	ldr	r3, [fp, #20]
   18504:	str	r3, [sp, #16]
   18508:	ldr	r3, [fp, #16]
   1850c:	str	r3, [sp, #12]
   18510:	ldr	r3, [fp, #-80]	; 0xffffffb0
   18514:	str	r3, [sp, #8]
   18518:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1851c:	str	r3, [sp, #4]
   18520:	ldrb	r3, [fp, #-62]	; 0xffffffc2
   18524:	str	r3, [sp]
   18528:	ldr	r3, [fp, #-1444]	; 0xfffffa5c
   1852c:	ldr	r2, [fp, #-56]	; 0xffffffc8
   18530:	ldr	r0, [fp, #-20]	; 0xffffffec
   18534:	bl	17a14 <__assert_fail@plt+0x6630>
   18538:	ldr	r2, [fp, #-20]	; 0xffffffec
   1853c:	ldr	r3, [fp, #-144]	; 0xffffff70
   18540:	add	r3, r2, r3
   18544:	str	r3, [fp, #-20]	; 0xffffffec
   18548:	ldr	r2, [fp, #-16]
   1854c:	ldr	r3, [fp, #-152]	; 0xffffff68
   18550:	add	r3, r2, r3
   18554:	str	r3, [fp, #-16]
   18558:	b	1a3d4 <__assert_fail@plt+0x8ff0>
   1855c:	nop			; (mov r0, r0)
   18560:	b	185c0 <__assert_fail@plt+0x71dc>
   18564:	nop			; (mov r0, r0)
   18568:	b	185c0 <__assert_fail@plt+0x71dc>
   1856c:	nop			; (mov r0, r0)
   18570:	b	185c0 <__assert_fail@plt+0x71dc>
   18574:	nop			; (mov r0, r0)
   18578:	b	185c0 <__assert_fail@plt+0x71dc>
   1857c:	nop			; (mov r0, r0)
   18580:	b	185c0 <__assert_fail@plt+0x71dc>
   18584:	nop			; (mov r0, r0)
   18588:	b	185c0 <__assert_fail@plt+0x71dc>
   1858c:	nop			; (mov r0, r0)
   18590:	b	185c0 <__assert_fail@plt+0x71dc>
   18594:	nop			; (mov r0, r0)
   18598:	b	185c0 <__assert_fail@plt+0x71dc>
   1859c:	nop			; (mov r0, r0)
   185a0:	b	185c0 <__assert_fail@plt+0x71dc>
   185a4:	nop			; (mov r0, r0)
   185a8:	b	185c0 <__assert_fail@plt+0x71dc>
   185ac:	nop			; (mov r0, r0)
   185b0:	b	185c0 <__assert_fail@plt+0x71dc>
   185b4:	nop			; (mov r0, r0)
   185b8:	b	185c0 <__assert_fail@plt+0x71dc>
   185bc:	nop			; (mov r0, r0)
   185c0:	sub	r3, fp, #404	; 0x194
   185c4:	str	r3, [fp, #-84]	; 0xffffffac
   185c8:	ldr	r3, [fp, #-84]	; 0xffffffac
   185cc:	add	r2, r3, #1
   185d0:	str	r2, [fp, #-84]	; 0xffffffac
   185d4:	mov	r2, #32
   185d8:	strb	r2, [r3]
   185dc:	ldr	r3, [fp, #-84]	; 0xffffffac
   185e0:	add	r2, r3, #1
   185e4:	str	r2, [fp, #-84]	; 0xffffffac
   185e8:	mov	r2, #37	; 0x25
   185ec:	strb	r2, [r3]
   185f0:	ldr	r3, [fp, #-32]	; 0xffffffe0
   185f4:	cmp	r3, #0
   185f8:	beq	18614 <__assert_fail@plt+0x7230>
   185fc:	ldr	r3, [fp, #-84]	; 0xffffffac
   18600:	add	r2, r3, #1
   18604:	str	r2, [fp, #-84]	; 0xffffffac
   18608:	ldr	r2, [fp, #-32]	; 0xffffffe0
   1860c:	uxtb	r2, r2
   18610:	strb	r2, [r3]
   18614:	ldr	r3, [fp, #-84]	; 0xffffffac
   18618:	add	r2, r3, #1
   1861c:	str	r2, [fp, #-84]	; 0xffffffac
   18620:	ldr	r2, [fp, #-76]	; 0xffffffb4
   18624:	uxtb	r2, r2
   18628:	strb	r2, [r3]
   1862c:	ldr	r3, [fp, #-84]	; 0xffffffac
   18630:	mov	r2, #0
   18634:	strb	r2, [r3]
   18638:	sub	r2, fp, #404	; 0x194
   1863c:	sub	r0, fp, #1424	; 0x590
   18640:	sub	r0, r0, #4
   18644:	ldr	r3, [fp, #-1444]	; 0xfffffa5c
   18648:	mov	r1, #1024	; 0x400
   1864c:	bl	11240 <strftime@plt>
   18650:	str	r0, [fp, #-196]	; 0xffffff3c
   18654:	ldr	r3, [fp, #-196]	; 0xffffff3c
   18658:	cmp	r3, #0
   1865c:	beq	1a3c8 <__assert_fail@plt+0x8fe4>
   18660:	ldr	r3, [fp, #-196]	; 0xffffff3c
   18664:	sub	r3, r3, #1
   18668:	str	r3, [fp, #-200]	; 0xffffff38
   1866c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   18670:	cmp	r3, #45	; 0x2d
   18674:	beq	1868c <__assert_fail@plt+0x72a8>
   18678:	ldr	r3, [fp, #12]
   1867c:	cmp	r3, #0
   18680:	blt	1868c <__assert_fail@plt+0x72a8>
   18684:	ldr	r3, [fp, #12]
   18688:	b	18690 <__assert_fail@plt+0x72ac>
   1868c:	mov	r3, #0
   18690:	str	r3, [fp, #-204]	; 0xffffff34
   18694:	ldr	r2, [fp, #-200]	; 0xffffff38
   18698:	ldr	r3, [fp, #-204]	; 0xffffff34
   1869c:	cmp	r2, r3
   186a0:	movcs	r3, r2
   186a4:	movcc	r3, r3
   186a8:	str	r3, [fp, #-208]	; 0xffffff30
   186ac:	ldr	r2, [fp, #-1436]	; 0xfffffa64
   186b0:	ldr	r3, [fp, #-16]
   186b4:	sub	r2, r2, r3
   186b8:	ldr	r3, [fp, #-208]	; 0xffffff30
   186bc:	cmp	r2, r3
   186c0:	bhi	186dc <__assert_fail@plt+0x72f8>
   186c4:	bl	112d0 <__errno_location@plt>
   186c8:	mov	r2, r0
   186cc:	mov	r3, #34	; 0x22
   186d0:	str	r3, [r2]
   186d4:	mov	r3, #0
   186d8:	b	1a430 <__assert_fail@plt+0x904c>
   186dc:	ldr	r3, [fp, #-20]	; 0xffffffec
   186e0:	cmp	r3, #0
   186e4:	beq	187e8 <__assert_fail@plt+0x7404>
   186e8:	ldr	r2, [fp, #-200]	; 0xffffff38
   186ec:	ldr	r3, [fp, #-204]	; 0xffffff34
   186f0:	cmp	r2, r3
   186f4:	bcs	18764 <__assert_fail@plt+0x7380>
   186f8:	ldr	r2, [fp, #-204]	; 0xffffff34
   186fc:	ldr	r3, [fp, #-200]	; 0xffffff38
   18700:	sub	r3, r2, r3
   18704:	str	r3, [fp, #-212]	; 0xffffff2c
   18708:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1870c:	cmp	r3, #48	; 0x30
   18710:	beq	18720 <__assert_fail@plt+0x733c>
   18714:	ldr	r3, [fp, #-28]	; 0xffffffe4
   18718:	cmp	r3, #43	; 0x2b
   1871c:	bne	18744 <__assert_fail@plt+0x7360>
   18720:	ldr	r2, [fp, #-212]	; 0xffffff2c
   18724:	mov	r1, #48	; 0x30
   18728:	ldr	r0, [fp, #-20]	; 0xffffffec
   1872c:	bl	112e8 <memset@plt>
   18730:	ldr	r2, [fp, #-20]	; 0xffffffec
   18734:	ldr	r3, [fp, #-212]	; 0xffffff2c
   18738:	add	r3, r2, r3
   1873c:	str	r3, [fp, #-20]	; 0xffffffec
   18740:	b	18764 <__assert_fail@plt+0x7380>
   18744:	ldr	r2, [fp, #-212]	; 0xffffff2c
   18748:	mov	r1, #32
   1874c:	ldr	r0, [fp, #-20]	; 0xffffffec
   18750:	bl	112e8 <memset@plt>
   18754:	ldr	r2, [fp, #-20]	; 0xffffffec
   18758:	ldr	r3, [fp, #-212]	; 0xffffff2c
   1875c:	add	r3, r2, r3
   18760:	str	r3, [fp, #-20]	; 0xffffffec
   18764:	ldrb	r3, [fp, #-61]	; 0xffffffc3
   18768:	cmp	r3, #0
   1876c:	beq	18790 <__assert_fail@plt+0x73ac>
   18770:	sub	r3, fp, #1424	; 0x590
   18774:	sub	r3, r3, #4
   18778:	add	r3, r3, #1
   1877c:	ldr	r2, [fp, #-200]	; 0xffffff38
   18780:	mov	r1, r3
   18784:	ldr	r0, [fp, #-20]	; 0xffffffec
   18788:	bl	1783c <__assert_fail@plt+0x6458>
   1878c:	b	187d8 <__assert_fail@plt+0x73f4>
   18790:	ldrb	r3, [fp, #-62]	; 0xffffffc2
   18794:	cmp	r3, #0
   18798:	beq	187bc <__assert_fail@plt+0x73d8>
   1879c:	sub	r3, fp, #1424	; 0x590
   187a0:	sub	r3, r3, #4
   187a4:	add	r3, r3, #1
   187a8:	ldr	r2, [fp, #-200]	; 0xffffff38
   187ac:	mov	r1, r3
   187b0:	ldr	r0, [fp, #-20]	; 0xffffffec
   187b4:	bl	178ac <__assert_fail@plt+0x64c8>
   187b8:	b	187d8 <__assert_fail@plt+0x73f4>
   187bc:	sub	r3, fp, #1424	; 0x590
   187c0:	sub	r3, r3, #4
   187c4:	add	r3, r3, #1
   187c8:	ldr	r2, [fp, #-200]	; 0xffffff38
   187cc:	mov	r1, r3
   187d0:	ldr	r0, [fp, #-20]	; 0xffffffec
   187d4:	bl	1112c <memcpy@plt>
   187d8:	ldr	r2, [fp, #-20]	; 0xffffffec
   187dc:	ldr	r3, [fp, #-200]	; 0xffffff38
   187e0:	add	r3, r2, r3
   187e4:	str	r3, [fp, #-20]	; 0xffffffec
   187e8:	ldr	r2, [fp, #-16]
   187ec:	ldr	r3, [fp, #-208]	; 0xffffff30
   187f0:	add	r3, r2, r3
   187f4:	str	r3, [fp, #-16]
   187f8:	b	1a3c8 <__assert_fail@plt+0x8fe4>
   187fc:	ldr	r3, [fp, #-32]	; 0xffffffe0
   18800:	cmp	r3, #69	; 0x45
   18804:	beq	1858c <__assert_fail@plt+0x71a8>
   18808:	ldr	r3, [fp, #-1444]	; 0xfffffa5c
   1880c:	ldr	r3, [r3, #20]
   18810:	ldr	r2, [pc, #392]	; 189a0 <__assert_fail@plt+0x75bc>
   18814:	cmp	r3, r2
   18818:	movlt	r3, #1
   1881c:	movge	r3, #0
   18820:	strb	r3, [fp, #-157]	; 0xffffff63
   18824:	ldrb	r3, [fp, #-157]	; 0xffffff63
   18828:	eor	r3, r3, #1
   1882c:	uxtb	r3, r3
   18830:	mov	r2, r3
   18834:	ldr	r3, [fp, #-1444]	; 0xfffffa5c
   18838:	ldr	r3, [r3, #20]
   1883c:	lsr	r3, r3, #31
   18840:	uxtb	r3, r3
   18844:	and	r3, r3, r2
   18848:	cmp	r3, #0
   1884c:	movne	r3, #1
   18850:	moveq	r3, #0
   18854:	strb	r3, [fp, #-158]	; 0xffffff62
   18858:	ldr	r3, [fp, #-1444]	; 0xfffffa5c
   1885c:	ldr	r2, [r3, #20]
   18860:	ldrb	r3, [fp, #-158]	; 0xffffff62
   18864:	mvn	r1, #98	; 0x62
   18868:	mul	r3, r1, r3
   1886c:	add	r3, r2, r3
   18870:	ldr	r2, [pc, #332]	; 189c4 <__assert_fail@plt+0x75e0>
   18874:	smull	r1, r2, r2, r3
   18878:	asr	r2, r2, #5
   1887c:	asr	r3, r3, #31
   18880:	sub	r3, r2, r3
   18884:	add	r3, r3, #19
   18888:	str	r3, [fp, #-164]	; 0xffffff5c
   1888c:	mov	r3, #2
   18890:	str	r3, [fp, #-36]	; 0xffffffdc
   18894:	ldrb	r3, [fp, #-157]	; 0xffffff63
   18898:	strb	r3, [fp, #-45]	; 0xffffffd3
   1889c:	ldr	r3, [fp, #-164]	; 0xffffff5c
   188a0:	str	r3, [fp, #-44]	; 0xffffffd4
   188a4:	b	18924 <__assert_fail@plt+0x7540>
   188a8:	ldr	r3, [fp, #-32]	; 0xffffffe0
   188ac:	cmp	r3, #79	; 0x4f
   188b0:	bne	18594 <__assert_fail@plt+0x71b0>
   188b4:	b	1a244 <__assert_fail@plt+0x8e60>
   188b8:	ldr	r3, [fp, #-32]	; 0xffffffe0
   188bc:	cmp	r3, #0
   188c0:	bne	1a1a8 <__assert_fail@plt+0x8dc4>
   188c4:	ldr	r3, [pc, #216]	; 189a4 <__assert_fail@plt+0x75c0>
   188c8:	str	r3, [fp, #-56]	; 0xffffffc8
   188cc:	b	1839c <__assert_fail@plt+0x6fb8>
   188d0:	ldr	r3, [fp, #-32]	; 0xffffffe0
   188d4:	cmp	r3, #69	; 0x45
   188d8:	beq	1a1b0 <__assert_fail@plt+0x8dcc>
   188dc:	mov	r3, #2
   188e0:	str	r3, [fp, #-36]	; 0xffffffdc
   188e4:	ldr	r3, [fp, #-1444]	; 0xfffffa5c
   188e8:	ldr	r3, [r3, #12]
   188ec:	str	r3, [fp, #-40]	; 0xffffffd8
   188f0:	b	189dc <__assert_fail@plt+0x75f8>
   188f4:	ldr	r3, [fp, #-32]	; 0xffffffe0
   188f8:	cmp	r3, #69	; 0x45
   188fc:	beq	1a1b8 <__assert_fail@plt+0x8dd4>
   18900:	mov	r3, #2
   18904:	str	r3, [fp, #-36]	; 0xffffffdc
   18908:	ldr	r3, [fp, #-1444]	; 0xfffffa5c
   1890c:	ldr	r3, [r3, #12]
   18910:	str	r3, [fp, #-40]	; 0xffffffd8
   18914:	b	189c8 <__assert_fail@plt+0x75e4>
   18918:	mov	r3, #1
   1891c:	strb	r3, [fp, #-46]	; 0xffffffd2
   18920:	b	18a00 <__assert_fail@plt+0x761c>
   18924:	ldr	r3, [fp, #-28]	; 0xffffffe4
   18928:	cmp	r3, #0
   1892c:	bne	18938 <__assert_fail@plt+0x7554>
   18930:	ldr	r3, [fp, #8]
   18934:	str	r3, [fp, #-28]	; 0xffffffe4
   18938:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1893c:	cmp	r3, #43	; 0x2b
   18940:	bne	18980 <__assert_fail@plt+0x759c>
   18944:	ldr	r3, [fp, #-36]	; 0xffffffdc
   18948:	cmp	r3, #2
   1894c:	bne	18958 <__assert_fail@plt+0x7574>
   18950:	mov	r2, #99	; 0x63
   18954:	b	1895c <__assert_fail@plt+0x7578>
   18958:	ldr	r2, [pc, #72]	; 189a8 <__assert_fail@plt+0x75c4>
   1895c:	ldr	r3, [fp, #-44]	; 0xffffffd4
   18960:	cmp	r2, r3
   18964:	bcc	18978 <__assert_fail@plt+0x7594>
   18968:	ldr	r3, [fp, #12]
   1896c:	ldr	r2, [fp, #-36]	; 0xffffffdc
   18970:	cmp	r2, r3
   18974:	bge	18980 <__assert_fail@plt+0x759c>
   18978:	mov	r3, #1
   1897c:	b	18984 <__assert_fail@plt+0x75a0>
   18980:	mov	r3, #0
   18984:	strb	r3, [fp, #-46]	; 0xffffffd2
   18988:	ldrb	r3, [fp, #-46]	; 0xffffffd2
   1898c:	and	r3, r3, #1
   18990:	strb	r3, [fp, #-46]	; 0xffffffd2
   18994:	b	189f8 <__assert_fail@plt+0x7614>
   18998:	andeq	r3, r2, r4, asr r5
   1899c:	stcleq	12, cr12, [ip], {204}	; 0xcc
   189a0:			; <UNDEFINED> instruction: 0xfffff894
   189a4:	andeq	r3, r2, r8, asr r5
   189a8:	andeq	r2, r0, pc, lsl #14
   189ac:	stclgt	12, cr12, [ip], {205}	; 0xcd
   189b0:	andeq	r3, r2, r4, ror #10
   189b4:	andeq	r3, r2, r0, ror r5
   189b8:	strbtvs	r6, [r6], -r7, ror #12
   189bc:	andeq	r3, r2, r8, ror r5
   189c0:	subls	r2, r9, #-1828716544	; 0x93000000
   189c4:	mvnpl	r8, pc, lsl r5
   189c8:	ldr	r3, [fp, #-28]	; 0xffffffe4
   189cc:	cmp	r3, #0
   189d0:	bne	189dc <__assert_fail@plt+0x75f8>
   189d4:	mov	r3, #95	; 0x5f
   189d8:	str	r3, [fp, #-28]	; 0xffffffe4
   189dc:	ldr	r3, [fp, #-40]	; 0xffffffd8
   189e0:	lsr	r3, r3, #31
   189e4:	strb	r3, [fp, #-45]	; 0xffffffd3
   189e8:	ldr	r3, [fp, #-40]	; 0xffffffd8
   189ec:	str	r3, [fp, #-44]	; 0xffffffd4
   189f0:	mov	r3, #0
   189f4:	strb	r3, [fp, #-46]	; 0xffffffd2
   189f8:	mov	r3, #0
   189fc:	str	r3, [fp, #-52]	; 0xffffffcc
   18a00:	ldr	r3, [fp, #-32]	; 0xffffffe0
   18a04:	cmp	r3, #79	; 0x4f
   18a08:	bne	18a20 <__assert_fail@plt+0x763c>
   18a0c:	ldrb	r3, [fp, #-45]	; 0xffffffd3
   18a10:	eor	r3, r3, #1
   18a14:	uxtb	r3, r3
   18a18:	cmp	r3, #0
   18a1c:	bne	1859c <__assert_fail@plt+0x71b8>
   18a20:	sub	r3, fp, #396	; 0x18c
   18a24:	add	r3, r3, #14
   18a28:	str	r3, [fp, #-60]	; 0xffffffc4
   18a2c:	ldrb	r3, [fp, #-45]	; 0xffffffd3
   18a30:	cmp	r3, #0
   18a34:	beq	18a44 <__assert_fail@plt+0x7660>
   18a38:	ldr	r3, [fp, #-44]	; 0xffffffd4
   18a3c:	rsb	r3, r3, #0
   18a40:	str	r3, [fp, #-44]	; 0xffffffd4
   18a44:	ldr	r3, [fp, #-52]	; 0xffffffcc
   18a48:	and	r3, r3, #1
   18a4c:	cmp	r3, #0
   18a50:	beq	18a6c <__assert_fail@plt+0x7688>
   18a54:	ldr	r3, [fp, #-60]	; 0xffffffc4
   18a58:	sub	r3, r3, #1
   18a5c:	str	r3, [fp, #-60]	; 0xffffffc4
   18a60:	ldr	r3, [fp, #-60]	; 0xffffffc4
   18a64:	mov	r2, #58	; 0x3a
   18a68:	strb	r2, [r3]
   18a6c:	ldr	r3, [fp, #-52]	; 0xffffffcc
   18a70:	asr	r3, r3, #1
   18a74:	str	r3, [fp, #-52]	; 0xffffffcc
   18a78:	ldr	r3, [fp, #-60]	; 0xffffffc4
   18a7c:	sub	r3, r3, #1
   18a80:	str	r3, [fp, #-60]	; 0xffffffc4
   18a84:	ldr	r1, [fp, #-44]	; 0xffffffd4
   18a88:	ldr	r3, [pc, #-228]	; 189ac <__assert_fail@plt+0x75c8>
   18a8c:	umull	r2, r3, r3, r1
   18a90:	lsr	r2, r3, #3
   18a94:	mov	r3, r2
   18a98:	lsl	r3, r3, #2
   18a9c:	add	r3, r3, r2
   18aa0:	lsl	r3, r3, #1
   18aa4:	sub	r2, r1, r3
   18aa8:	uxtb	r3, r2
   18aac:	add	r3, r3, #48	; 0x30
   18ab0:	uxtb	r2, r3
   18ab4:	ldr	r3, [fp, #-60]	; 0xffffffc4
   18ab8:	strb	r2, [r3]
   18abc:	ldr	r3, [fp, #-44]	; 0xffffffd4
   18ac0:	ldr	r2, [pc, #-284]	; 189ac <__assert_fail@plt+0x75c8>
   18ac4:	umull	r2, r3, r2, r3
   18ac8:	lsr	r3, r3, #3
   18acc:	str	r3, [fp, #-44]	; 0xffffffd4
   18ad0:	ldr	r3, [fp, #-44]	; 0xffffffd4
   18ad4:	cmp	r3, #0
   18ad8:	bne	18a44 <__assert_fail@plt+0x7660>
   18adc:	ldr	r3, [fp, #-52]	; 0xffffffcc
   18ae0:	cmp	r3, #0
   18ae4:	bne	18a44 <__assert_fail@plt+0x7660>
   18ae8:	ldr	r3, [fp, #-28]	; 0xffffffe4
   18aec:	cmp	r3, #0
   18af0:	bne	18afc <__assert_fail@plt+0x7718>
   18af4:	mov	r3, #48	; 0x30
   18af8:	str	r3, [fp, #-28]	; 0xffffffe4
   18afc:	ldr	r3, [fp, #12]
   18b00:	cmp	r3, #0
   18b04:	bge	18b10 <__assert_fail@plt+0x772c>
   18b08:	ldr	r3, [fp, #-36]	; 0xffffffdc
   18b0c:	str	r3, [fp, #12]
   18b10:	ldrb	r3, [fp, #-45]	; 0xffffffd3
   18b14:	cmp	r3, #0
   18b18:	beq	18b24 <__assert_fail@plt+0x7740>
   18b1c:	mov	r3, #45	; 0x2d
   18b20:	b	18b3c <__assert_fail@plt+0x7758>
   18b24:	ldrb	r3, [fp, #-46]	; 0xffffffd2
   18b28:	cmp	r3, #0
   18b2c:	beq	18b38 <__assert_fail@plt+0x7754>
   18b30:	mov	r3, #43	; 0x2b
   18b34:	b	18b3c <__assert_fail@plt+0x7758>
   18b38:	mov	r3, #0
   18b3c:	strb	r3, [fp, #-217]	; 0xffffff27
   18b40:	sub	r3, fp, #396	; 0x18c
   18b44:	add	r3, r3, #14
   18b48:	mov	r2, r3
   18b4c:	ldr	r3, [fp, #-60]	; 0xffffffc4
   18b50:	sub	r3, r2, r3
   18b54:	str	r3, [fp, #-224]	; 0xffffff20
   18b58:	ldr	r3, [fp, #12]
   18b5c:	ldrb	r2, [fp, #-217]	; 0xffffff27
   18b60:	cmp	r2, #0
   18b64:	movne	r2, #1
   18b68:	moveq	r2, #0
   18b6c:	uxtb	r2, r2
   18b70:	sub	r2, r3, r2
   18b74:	ldr	r3, [fp, #-224]	; 0xffffff20
   18b78:	sub	r3, r2, r3
   18b7c:	str	r3, [fp, #-228]	; 0xffffff1c
   18b80:	ldr	r3, [fp, #-28]	; 0xffffffe4
   18b84:	cmp	r3, #45	; 0x2d
   18b88:	beq	18ba0 <__assert_fail@plt+0x77bc>
   18b8c:	ldr	r3, [fp, #-228]	; 0xffffff1c
   18b90:	cmp	r3, #0
   18b94:	ble	18ba0 <__assert_fail@plt+0x77bc>
   18b98:	ldr	r3, [fp, #-228]	; 0xffffff1c
   18b9c:	b	18ba4 <__assert_fail@plt+0x77c0>
   18ba0:	mov	r3, #0
   18ba4:	str	r3, [fp, #-232]	; 0xffffff18
   18ba8:	ldrb	r3, [fp, #-217]	; 0xffffff27
   18bac:	cmp	r3, #0
   18bb0:	beq	18d28 <__assert_fail@plt+0x7944>
   18bb4:	ldr	r3, [fp, #-28]	; 0xffffffe4
   18bb8:	cmp	r3, #95	; 0x5f
   18bbc:	bne	18c10 <__assert_fail@plt+0x782c>
   18bc0:	ldr	r3, [fp, #-20]	; 0xffffffec
   18bc4:	cmp	r3, #0
   18bc8:	beq	18bf0 <__assert_fail@plt+0x780c>
   18bcc:	ldr	r3, [fp, #-232]	; 0xffffff18
   18bd0:	mov	r2, r3
   18bd4:	mov	r1, #32
   18bd8:	ldr	r0, [fp, #-20]	; 0xffffffec
   18bdc:	bl	112e8 <memset@plt>
   18be0:	ldr	r3, [fp, #-232]	; 0xffffff18
   18be4:	ldr	r2, [fp, #-20]	; 0xffffffec
   18be8:	add	r3, r2, r3
   18bec:	str	r3, [fp, #-20]	; 0xffffffec
   18bf0:	ldr	r3, [fp, #-232]	; 0xffffff18
   18bf4:	ldr	r2, [fp, #-16]
   18bf8:	add	r3, r2, r3
   18bfc:	str	r3, [fp, #-16]
   18c00:	ldr	r2, [fp, #12]
   18c04:	ldr	r3, [fp, #-232]	; 0xffffff18
   18c08:	sub	r3, r2, r3
   18c0c:	str	r3, [fp, #12]
   18c10:	mov	r3, #1
   18c14:	str	r3, [fp, #-236]	; 0xffffff14
   18c18:	mov	r3, #0
   18c1c:	str	r3, [fp, #-240]	; 0xffffff10
   18c20:	ldr	r2, [fp, #-236]	; 0xffffff14
   18c24:	ldr	r3, [fp, #-240]	; 0xffffff10
   18c28:	cmp	r2, r3
   18c2c:	movcs	r3, r2
   18c30:	movcc	r3, r3
   18c34:	str	r3, [fp, #-244]	; 0xffffff0c
   18c38:	ldr	r2, [fp, #-1436]	; 0xfffffa64
   18c3c:	ldr	r3, [fp, #-16]
   18c40:	sub	r2, r2, r3
   18c44:	ldr	r3, [fp, #-244]	; 0xffffff0c
   18c48:	cmp	r2, r3
   18c4c:	bhi	18c68 <__assert_fail@plt+0x7884>
   18c50:	bl	112d0 <__errno_location@plt>
   18c54:	mov	r2, r0
   18c58:	mov	r3, #34	; 0x22
   18c5c:	str	r3, [r2]
   18c60:	mov	r3, #0
   18c64:	b	1a430 <__assert_fail@plt+0x904c>
   18c68:	ldr	r3, [fp, #-20]	; 0xffffffec
   18c6c:	cmp	r3, #0
   18c70:	beq	18d0c <__assert_fail@plt+0x7928>
   18c74:	ldr	r2, [fp, #-236]	; 0xffffff14
   18c78:	ldr	r3, [fp, #-240]	; 0xffffff10
   18c7c:	cmp	r2, r3
   18c80:	bcs	18cf0 <__assert_fail@plt+0x790c>
   18c84:	ldr	r2, [fp, #-240]	; 0xffffff10
   18c88:	ldr	r3, [fp, #-236]	; 0xffffff14
   18c8c:	sub	r3, r2, r3
   18c90:	str	r3, [fp, #-248]	; 0xffffff08
   18c94:	ldr	r3, [fp, #-28]	; 0xffffffe4
   18c98:	cmp	r3, #48	; 0x30
   18c9c:	beq	18cac <__assert_fail@plt+0x78c8>
   18ca0:	ldr	r3, [fp, #-28]	; 0xffffffe4
   18ca4:	cmp	r3, #43	; 0x2b
   18ca8:	bne	18cd0 <__assert_fail@plt+0x78ec>
   18cac:	ldr	r2, [fp, #-248]	; 0xffffff08
   18cb0:	mov	r1, #48	; 0x30
   18cb4:	ldr	r0, [fp, #-20]	; 0xffffffec
   18cb8:	bl	112e8 <memset@plt>
   18cbc:	ldr	r2, [fp, #-20]	; 0xffffffec
   18cc0:	ldr	r3, [fp, #-248]	; 0xffffff08
   18cc4:	add	r3, r2, r3
   18cc8:	str	r3, [fp, #-20]	; 0xffffffec
   18ccc:	b	18cf0 <__assert_fail@plt+0x790c>
   18cd0:	ldr	r2, [fp, #-248]	; 0xffffff08
   18cd4:	mov	r1, #32
   18cd8:	ldr	r0, [fp, #-20]	; 0xffffffec
   18cdc:	bl	112e8 <memset@plt>
   18ce0:	ldr	r2, [fp, #-20]	; 0xffffffec
   18ce4:	ldr	r3, [fp, #-248]	; 0xffffff08
   18ce8:	add	r3, r2, r3
   18cec:	str	r3, [fp, #-20]	; 0xffffffec
   18cf0:	ldr	r3, [fp, #-20]	; 0xffffffec
   18cf4:	ldrb	r2, [fp, #-217]	; 0xffffff27
   18cf8:	strb	r2, [r3]
   18cfc:	ldr	r2, [fp, #-20]	; 0xffffffec
   18d00:	ldr	r3, [fp, #-236]	; 0xffffff14
   18d04:	add	r3, r2, r3
   18d08:	str	r3, [fp, #-20]	; 0xffffffec
   18d0c:	ldr	r2, [fp, #-16]
   18d10:	ldr	r3, [fp, #-244]	; 0xffffff0c
   18d14:	add	r3, r2, r3
   18d18:	str	r3, [fp, #-16]
   18d1c:	ldr	r3, [fp, #12]
   18d20:	sub	r3, r3, #1
   18d24:	str	r3, [fp, #12]
   18d28:	ldr	r3, [fp, #-224]	; 0xffffff20
   18d2c:	str	r3, [fp, #-252]	; 0xffffff04
   18d30:	ldr	r3, [fp, #-28]	; 0xffffffe4
   18d34:	cmp	r3, #45	; 0x2d
   18d38:	beq	18d50 <__assert_fail@plt+0x796c>
   18d3c:	ldr	r3, [fp, #12]
   18d40:	cmp	r3, #0
   18d44:	blt	18d50 <__assert_fail@plt+0x796c>
   18d48:	ldr	r3, [fp, #12]
   18d4c:	b	18d54 <__assert_fail@plt+0x7970>
   18d50:	mov	r3, #0
   18d54:	str	r3, [fp, #-256]	; 0xffffff00
   18d58:	ldr	r2, [fp, #-252]	; 0xffffff04
   18d5c:	ldr	r3, [fp, #-256]	; 0xffffff00
   18d60:	cmp	r2, r3
   18d64:	movcs	r3, r2
   18d68:	movcc	r3, r3
   18d6c:	str	r3, [fp, #-260]	; 0xfffffefc
   18d70:	ldr	r2, [fp, #-1436]	; 0xfffffa64
   18d74:	ldr	r3, [fp, #-16]
   18d78:	sub	r2, r2, r3
   18d7c:	ldr	r3, [fp, #-260]	; 0xfffffefc
   18d80:	cmp	r2, r3
   18d84:	bhi	18da0 <__assert_fail@plt+0x79bc>
   18d88:	bl	112d0 <__errno_location@plt>
   18d8c:	mov	r2, r0
   18d90:	mov	r3, #34	; 0x22
   18d94:	str	r3, [r2]
   18d98:	mov	r3, #0
   18d9c:	b	1a430 <__assert_fail@plt+0x904c>
   18da0:	ldr	r3, [fp, #-20]	; 0xffffffec
   18da4:	cmp	r3, #0
   18da8:	beq	18e88 <__assert_fail@plt+0x7aa4>
   18dac:	ldr	r2, [fp, #-252]	; 0xffffff04
   18db0:	ldr	r3, [fp, #-256]	; 0xffffff00
   18db4:	cmp	r2, r3
   18db8:	bcs	18e28 <__assert_fail@plt+0x7a44>
   18dbc:	ldr	r2, [fp, #-256]	; 0xffffff00
   18dc0:	ldr	r3, [fp, #-252]	; 0xffffff04
   18dc4:	sub	r3, r2, r3
   18dc8:	str	r3, [fp, #-264]	; 0xfffffef8
   18dcc:	ldr	r3, [fp, #-28]	; 0xffffffe4
   18dd0:	cmp	r3, #48	; 0x30
   18dd4:	beq	18de4 <__assert_fail@plt+0x7a00>
   18dd8:	ldr	r3, [fp, #-28]	; 0xffffffe4
   18ddc:	cmp	r3, #43	; 0x2b
   18de0:	bne	18e08 <__assert_fail@plt+0x7a24>
   18de4:	ldr	r2, [fp, #-264]	; 0xfffffef8
   18de8:	mov	r1, #48	; 0x30
   18dec:	ldr	r0, [fp, #-20]	; 0xffffffec
   18df0:	bl	112e8 <memset@plt>
   18df4:	ldr	r2, [fp, #-20]	; 0xffffffec
   18df8:	ldr	r3, [fp, #-264]	; 0xfffffef8
   18dfc:	add	r3, r2, r3
   18e00:	str	r3, [fp, #-20]	; 0xffffffec
   18e04:	b	18e28 <__assert_fail@plt+0x7a44>
   18e08:	ldr	r2, [fp, #-264]	; 0xfffffef8
   18e0c:	mov	r1, #32
   18e10:	ldr	r0, [fp, #-20]	; 0xffffffec
   18e14:	bl	112e8 <memset@plt>
   18e18:	ldr	r2, [fp, #-20]	; 0xffffffec
   18e1c:	ldr	r3, [fp, #-264]	; 0xfffffef8
   18e20:	add	r3, r2, r3
   18e24:	str	r3, [fp, #-20]	; 0xffffffec
   18e28:	ldrb	r3, [fp, #-61]	; 0xffffffc3
   18e2c:	cmp	r3, #0
   18e30:	beq	18e48 <__assert_fail@plt+0x7a64>
   18e34:	ldr	r2, [fp, #-252]	; 0xffffff04
   18e38:	ldr	r1, [fp, #-60]	; 0xffffffc4
   18e3c:	ldr	r0, [fp, #-20]	; 0xffffffec
   18e40:	bl	1783c <__assert_fail@plt+0x6458>
   18e44:	b	18e78 <__assert_fail@plt+0x7a94>
   18e48:	ldrb	r3, [fp, #-62]	; 0xffffffc2
   18e4c:	cmp	r3, #0
   18e50:	beq	18e68 <__assert_fail@plt+0x7a84>
   18e54:	ldr	r2, [fp, #-252]	; 0xffffff04
   18e58:	ldr	r1, [fp, #-60]	; 0xffffffc4
   18e5c:	ldr	r0, [fp, #-20]	; 0xffffffec
   18e60:	bl	178ac <__assert_fail@plt+0x64c8>
   18e64:	b	18e78 <__assert_fail@plt+0x7a94>
   18e68:	ldr	r2, [fp, #-252]	; 0xffffff04
   18e6c:	ldr	r1, [fp, #-60]	; 0xffffffc4
   18e70:	ldr	r0, [fp, #-20]	; 0xffffffec
   18e74:	bl	1112c <memcpy@plt>
   18e78:	ldr	r2, [fp, #-20]	; 0xffffffec
   18e7c:	ldr	r3, [fp, #-252]	; 0xffffff04
   18e80:	add	r3, r2, r3
   18e84:	str	r3, [fp, #-20]	; 0xffffffec
   18e88:	ldr	r2, [fp, #-16]
   18e8c:	ldr	r3, [fp, #-260]	; 0xfffffefc
   18e90:	add	r3, r2, r3
   18e94:	str	r3, [fp, #-16]
   18e98:	b	1a3d4 <__assert_fail@plt+0x8ff0>
   18e9c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   18ea0:	cmp	r3, #0
   18ea4:	bne	1a1c0 <__assert_fail@plt+0x8ddc>
   18ea8:	ldr	r3, [fp, #-28]	; 0xffffffe4
   18eac:	cmp	r3, #0
   18eb0:	bne	18ed4 <__assert_fail@plt+0x7af0>
   18eb4:	ldr	r3, [fp, #12]
   18eb8:	cmp	r3, #0
   18ebc:	bge	18ed4 <__assert_fail@plt+0x7af0>
   18ec0:	mov	r3, #43	; 0x2b
   18ec4:	str	r3, [fp, #-28]	; 0xffffffe4
   18ec8:	mov	r3, #4
   18ecc:	str	r3, [fp, #-80]	; 0xffffffb0
   18ed0:	b	18ef4 <__assert_fail@plt+0x7b10>
   18ed4:	ldr	r3, [fp, #12]
   18ed8:	sub	r3, r3, #6
   18edc:	str	r3, [fp, #-80]	; 0xffffffb0
   18ee0:	ldr	r3, [fp, #-80]	; 0xffffffb0
   18ee4:	cmp	r3, #0
   18ee8:	bge	18ef4 <__assert_fail@plt+0x7b10>
   18eec:	mov	r3, #0
   18ef0:	str	r3, [fp, #-80]	; 0xffffffb0
   18ef4:	ldr	r3, [pc, #-1356]	; 189b0 <__assert_fail@plt+0x75cc>
   18ef8:	str	r3, [fp, #-56]	; 0xffffffc8
   18efc:	b	183a4 <__assert_fail@plt+0x6fc0>
   18f00:	ldr	r3, [fp, #-32]	; 0xffffffe0
   18f04:	cmp	r3, #69	; 0x45
   18f08:	beq	1a1c8 <__assert_fail@plt+0x8de4>
   18f0c:	mov	r3, #2
   18f10:	str	r3, [fp, #-36]	; 0xffffffdc
   18f14:	ldr	r3, [fp, #-1444]	; 0xfffffa5c
   18f18:	ldr	r3, [r3, #8]
   18f1c:	str	r3, [fp, #-40]	; 0xffffffd8
   18f20:	b	189dc <__assert_fail@plt+0x75f8>
   18f24:	ldr	r3, [fp, #-32]	; 0xffffffe0
   18f28:	cmp	r3, #69	; 0x45
   18f2c:	beq	1a1d0 <__assert_fail@plt+0x8dec>
   18f30:	mov	r3, #2
   18f34:	str	r3, [fp, #-36]	; 0xffffffdc
   18f38:	ldr	r3, [fp, #-8]
   18f3c:	str	r3, [fp, #-40]	; 0xffffffd8
   18f40:	b	189dc <__assert_fail@plt+0x75f8>
   18f44:	ldr	r3, [fp, #-32]	; 0xffffffe0
   18f48:	cmp	r3, #69	; 0x45
   18f4c:	beq	1a1d8 <__assert_fail@plt+0x8df4>
   18f50:	mov	r3, #2
   18f54:	str	r3, [fp, #-36]	; 0xffffffdc
   18f58:	ldr	r3, [fp, #-1444]	; 0xfffffa5c
   18f5c:	ldr	r3, [r3, #8]
   18f60:	str	r3, [fp, #-40]	; 0xffffffd8
   18f64:	b	189c8 <__assert_fail@plt+0x75e4>
   18f68:	ldr	r3, [fp, #-32]	; 0xffffffe0
   18f6c:	cmp	r3, #69	; 0x45
   18f70:	beq	1a1e0 <__assert_fail@plt+0x8dfc>
   18f74:	mov	r3, #2
   18f78:	str	r3, [fp, #-36]	; 0xffffffdc
   18f7c:	ldr	r3, [fp, #-8]
   18f80:	str	r3, [fp, #-40]	; 0xffffffd8
   18f84:	b	189c8 <__assert_fail@plt+0x75e4>
   18f88:	ldr	r3, [fp, #-32]	; 0xffffffe0
   18f8c:	cmp	r3, #69	; 0x45
   18f90:	beq	1a1e8 <__assert_fail@plt+0x8e04>
   18f94:	mov	r3, #3
   18f98:	str	r3, [fp, #-36]	; 0xffffffdc
   18f9c:	ldr	r3, [fp, #-1444]	; 0xfffffa5c
   18fa0:	ldr	r3, [r3, #28]
   18fa4:	cmn	r3, #1
   18fa8:	movlt	r3, #1
   18fac:	movge	r3, #0
   18fb0:	strb	r3, [fp, #-45]	; 0xffffffd3
   18fb4:	ldr	r3, [fp, #-1444]	; 0xfffffa5c
   18fb8:	ldr	r3, [r3, #28]
   18fbc:	add	r3, r3, #1
   18fc0:	str	r3, [fp, #-44]	; 0xffffffd4
   18fc4:	b	189f0 <__assert_fail@plt+0x760c>
   18fc8:	ldr	r3, [fp, #-32]	; 0xffffffe0
   18fcc:	cmp	r3, #69	; 0x45
   18fd0:	beq	1a1f0 <__assert_fail@plt+0x8e0c>
   18fd4:	mov	r3, #2
   18fd8:	str	r3, [fp, #-36]	; 0xffffffdc
   18fdc:	ldr	r3, [fp, #-1444]	; 0xfffffa5c
   18fe0:	ldr	r3, [r3, #4]
   18fe4:	str	r3, [fp, #-40]	; 0xffffffd8
   18fe8:	b	189dc <__assert_fail@plt+0x75f8>
   18fec:	ldr	r3, [fp, #-32]	; 0xffffffe0
   18ff0:	cmp	r3, #69	; 0x45
   18ff4:	beq	1a1f8 <__assert_fail@plt+0x8e14>
   18ff8:	mov	r3, #2
   18ffc:	str	r3, [fp, #-36]	; 0xffffffdc
   19000:	ldr	r3, [fp, #-1444]	; 0xfffffa5c
   19004:	ldr	r3, [r3, #16]
   19008:	cmn	r3, #1
   1900c:	movlt	r3, #1
   19010:	movge	r3, #0
   19014:	strb	r3, [fp, #-45]	; 0xffffffd3
   19018:	ldr	r3, [fp, #-1444]	; 0xfffffa5c
   1901c:	ldr	r3, [r3, #16]
   19020:	add	r3, r3, #1
   19024:	str	r3, [fp, #-44]	; 0xffffffd4
   19028:	b	189f0 <__assert_fail@plt+0x760c>
   1902c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   19030:	cmp	r3, #69	; 0x45
   19034:	beq	1a200 <__assert_fail@plt+0x8e1c>
   19038:	ldr	r3, [fp, #24]
   1903c:	str	r3, [fp, #-88]	; 0xffffffa8
   19040:	mov	r3, #9
   19044:	str	r3, [fp, #-268]	; 0xfffffef4
   19048:	ldr	r3, [fp, #12]
   1904c:	cmp	r3, #0
   19050:	bgt	1905c <__assert_fail@plt+0x7c78>
   19054:	ldr	r3, [fp, #-268]	; 0xfffffef4
   19058:	str	r3, [fp, #12]
   1905c:	ldr	r3, [fp, #-268]	; 0xfffffef4
   19060:	str	r3, [fp, #-92]	; 0xffffffa4
   19064:	b	19090 <__assert_fail@plt+0x7cac>
   19068:	ldr	r3, [fp, #-92]	; 0xffffffa4
   1906c:	sub	r3, r3, #1
   19070:	str	r3, [fp, #-92]	; 0xffffffa4
   19074:	ldr	r3, [fp, #-88]	; 0xffffffa8
   19078:	ldr	r2, [pc, #-1736]	; 189b8 <__assert_fail@plt+0x75d4>
   1907c:	smull	r1, r2, r2, r3
   19080:	asr	r2, r2, #2
   19084:	asr	r3, r3, #31
   19088:	sub	r3, r2, r3
   1908c:	str	r3, [fp, #-88]	; 0xffffffa8
   19090:	ldr	r2, [fp, #12]
   19094:	ldr	r3, [fp, #-92]	; 0xffffffa4
   19098:	cmp	r2, r3
   1909c:	blt	19068 <__assert_fail@plt+0x7c84>
   190a0:	ldr	r3, [fp, #-92]	; 0xffffffa4
   190a4:	cmp	r3, #1
   190a8:	ble	190e0 <__assert_fail@plt+0x7cfc>
   190ac:	ldr	r1, [fp, #-88]	; 0xffffffa8
   190b0:	ldr	r3, [pc, #-1792]	; 189b8 <__assert_fail@plt+0x75d4>
   190b4:	smull	r2, r3, r3, r1
   190b8:	asr	r2, r3, #2
   190bc:	asr	r3, r1, #31
   190c0:	sub	r2, r2, r3
   190c4:	mov	r3, r2
   190c8:	lsl	r3, r3, #2
   190cc:	add	r3, r3, r2
   190d0:	lsl	r3, r3, #1
   190d4:	sub	r2, r1, r3
   190d8:	cmp	r2, #0
   190dc:	beq	19068 <__assert_fail@plt+0x7c84>
   190e0:	ldr	r3, [fp, #-92]	; 0xffffffa4
   190e4:	str	r3, [fp, #-96]	; 0xffffffa0
   190e8:	b	19160 <__assert_fail@plt+0x7d7c>
   190ec:	ldr	r3, [fp, #-96]	; 0xffffffa0
   190f0:	sub	r0, r3, #1
   190f4:	ldr	r2, [fp, #-88]	; 0xffffffa8
   190f8:	ldr	r3, [pc, #-1864]	; 189b8 <__assert_fail@plt+0x75d4>
   190fc:	smull	r1, r3, r3, r2
   19100:	asr	r1, r3, #2
   19104:	asr	r3, r2, #31
   19108:	sub	r1, r1, r3
   1910c:	mov	r3, r1
   19110:	lsl	r3, r3, #2
   19114:	add	r3, r3, r1
   19118:	lsl	r3, r3, #1
   1911c:	sub	r1, r2, r3
   19120:	uxtb	r3, r1
   19124:	add	r3, r3, #48	; 0x30
   19128:	uxtb	r2, r3
   1912c:	sub	r3, fp, #4
   19130:	add	r3, r3, r0
   19134:	strb	r2, [r3, #-392]	; 0xfffffe78
   19138:	ldr	r3, [fp, #-88]	; 0xffffffa8
   1913c:	ldr	r2, [pc, #-1932]	; 189b8 <__assert_fail@plt+0x75d4>
   19140:	smull	r1, r2, r2, r3
   19144:	asr	r2, r2, #2
   19148:	asr	r3, r3, #31
   1914c:	sub	r3, r2, r3
   19150:	str	r3, [fp, #-88]	; 0xffffffa8
   19154:	ldr	r3, [fp, #-96]	; 0xffffffa0
   19158:	sub	r3, r3, #1
   1915c:	str	r3, [fp, #-96]	; 0xffffffa0
   19160:	ldr	r3, [fp, #-96]	; 0xffffffa0
   19164:	cmp	r3, #0
   19168:	bgt	190ec <__assert_fail@plt+0x7d08>
   1916c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   19170:	cmp	r3, #0
   19174:	bne	19180 <__assert_fail@plt+0x7d9c>
   19178:	mov	r3, #48	; 0x30
   1917c:	str	r3, [fp, #-28]	; 0xffffffe4
   19180:	ldr	r3, [fp, #-92]	; 0xffffffa4
   19184:	str	r3, [fp, #-272]	; 0xfffffef0
   19188:	mov	r3, #0
   1918c:	str	r3, [fp, #-276]	; 0xfffffeec
   19190:	ldr	r2, [fp, #-272]	; 0xfffffef0
   19194:	ldr	r3, [fp, #-276]	; 0xfffffeec
   19198:	cmp	r2, r3
   1919c:	movcs	r3, r2
   191a0:	movcc	r3, r3
   191a4:	str	r3, [fp, #-280]	; 0xfffffee8
   191a8:	ldr	r2, [fp, #-1436]	; 0xfffffa64
   191ac:	ldr	r3, [fp, #-16]
   191b0:	sub	r2, r2, r3
   191b4:	ldr	r3, [fp, #-280]	; 0xfffffee8
   191b8:	cmp	r2, r3
   191bc:	bhi	191d8 <__assert_fail@plt+0x7df4>
   191c0:	bl	112d0 <__errno_location@plt>
   191c4:	mov	r2, r0
   191c8:	mov	r3, #34	; 0x22
   191cc:	str	r3, [r2]
   191d0:	mov	r3, #0
   191d4:	b	1a430 <__assert_fail@plt+0x904c>
   191d8:	ldr	r3, [fp, #-20]	; 0xffffffec
   191dc:	cmp	r3, #0
   191e0:	beq	192cc <__assert_fail@plt+0x7ee8>
   191e4:	ldr	r2, [fp, #-272]	; 0xfffffef0
   191e8:	ldr	r3, [fp, #-276]	; 0xfffffeec
   191ec:	cmp	r2, r3
   191f0:	bcs	19260 <__assert_fail@plt+0x7e7c>
   191f4:	ldr	r2, [fp, #-276]	; 0xfffffeec
   191f8:	ldr	r3, [fp, #-272]	; 0xfffffef0
   191fc:	sub	r3, r2, r3
   19200:	str	r3, [fp, #-284]	; 0xfffffee4
   19204:	ldr	r3, [fp, #-28]	; 0xffffffe4
   19208:	cmp	r3, #48	; 0x30
   1920c:	beq	1921c <__assert_fail@plt+0x7e38>
   19210:	ldr	r3, [fp, #-28]	; 0xffffffe4
   19214:	cmp	r3, #43	; 0x2b
   19218:	bne	19240 <__assert_fail@plt+0x7e5c>
   1921c:	ldr	r2, [fp, #-284]	; 0xfffffee4
   19220:	mov	r1, #48	; 0x30
   19224:	ldr	r0, [fp, #-20]	; 0xffffffec
   19228:	bl	112e8 <memset@plt>
   1922c:	ldr	r2, [fp, #-20]	; 0xffffffec
   19230:	ldr	r3, [fp, #-284]	; 0xfffffee4
   19234:	add	r3, r2, r3
   19238:	str	r3, [fp, #-20]	; 0xffffffec
   1923c:	b	19260 <__assert_fail@plt+0x7e7c>
   19240:	ldr	r2, [fp, #-284]	; 0xfffffee4
   19244:	mov	r1, #32
   19248:	ldr	r0, [fp, #-20]	; 0xffffffec
   1924c:	bl	112e8 <memset@plt>
   19250:	ldr	r2, [fp, #-20]	; 0xffffffec
   19254:	ldr	r3, [fp, #-284]	; 0xfffffee4
   19258:	add	r3, r2, r3
   1925c:	str	r3, [fp, #-20]	; 0xffffffec
   19260:	ldrb	r3, [fp, #-61]	; 0xffffffc3
   19264:	cmp	r3, #0
   19268:	beq	19284 <__assert_fail@plt+0x7ea0>
   1926c:	sub	r3, fp, #396	; 0x18c
   19270:	ldr	r2, [fp, #-272]	; 0xfffffef0
   19274:	mov	r1, r3
   19278:	ldr	r0, [fp, #-20]	; 0xffffffec
   1927c:	bl	1783c <__assert_fail@plt+0x6458>
   19280:	b	192bc <__assert_fail@plt+0x7ed8>
   19284:	ldrb	r3, [fp, #-62]	; 0xffffffc2
   19288:	cmp	r3, #0
   1928c:	beq	192a8 <__assert_fail@plt+0x7ec4>
   19290:	sub	r3, fp, #396	; 0x18c
   19294:	ldr	r2, [fp, #-272]	; 0xfffffef0
   19298:	mov	r1, r3
   1929c:	ldr	r0, [fp, #-20]	; 0xffffffec
   192a0:	bl	178ac <__assert_fail@plt+0x64c8>
   192a4:	b	192bc <__assert_fail@plt+0x7ed8>
   192a8:	sub	r3, fp, #396	; 0x18c
   192ac:	ldr	r2, [fp, #-272]	; 0xfffffef0
   192b0:	mov	r1, r3
   192b4:	ldr	r0, [fp, #-20]	; 0xffffffec
   192b8:	bl	1112c <memcpy@plt>
   192bc:	ldr	r2, [fp, #-20]	; 0xffffffec
   192c0:	ldr	r3, [fp, #-272]	; 0xfffffef0
   192c4:	add	r3, r2, r3
   192c8:	str	r3, [fp, #-20]	; 0xffffffec
   192cc:	ldr	r2, [fp, #-16]
   192d0:	ldr	r3, [fp, #-280]	; 0xfffffee8
   192d4:	add	r3, r2, r3
   192d8:	str	r3, [fp, #-16]
   192dc:	mov	r3, #0
   192e0:	str	r3, [fp, #-288]	; 0xfffffee0
   192e4:	ldr	r3, [fp, #-28]	; 0xffffffe4
   192e8:	cmp	r3, #45	; 0x2d
   192ec:	beq	19314 <__assert_fail@plt+0x7f30>
   192f0:	ldr	r2, [fp, #12]
   192f4:	ldr	r3, [fp, #-92]	; 0xffffffa4
   192f8:	sub	r3, r2, r3
   192fc:	cmp	r3, #0
   19300:	blt	19314 <__assert_fail@plt+0x7f30>
   19304:	ldr	r2, [fp, #12]
   19308:	ldr	r3, [fp, #-92]	; 0xffffffa4
   1930c:	sub	r3, r2, r3
   19310:	b	19318 <__assert_fail@plt+0x7f34>
   19314:	mov	r3, #0
   19318:	str	r3, [fp, #-292]	; 0xfffffedc
   1931c:	ldr	r2, [fp, #-288]	; 0xfffffee0
   19320:	ldr	r3, [fp, #-292]	; 0xfffffedc
   19324:	cmp	r2, r3
   19328:	movcs	r3, r2
   1932c:	movcc	r3, r3
   19330:	str	r3, [fp, #-296]	; 0xfffffed8
   19334:	ldr	r2, [fp, #-1436]	; 0xfffffa64
   19338:	ldr	r3, [fp, #-16]
   1933c:	sub	r2, r2, r3
   19340:	ldr	r3, [fp, #-296]	; 0xfffffed8
   19344:	cmp	r2, r3
   19348:	bhi	19364 <__assert_fail@plt+0x7f80>
   1934c:	bl	112d0 <__errno_location@plt>
   19350:	mov	r2, r0
   19354:	mov	r3, #34	; 0x22
   19358:	str	r3, [r2]
   1935c:	mov	r3, #0
   19360:	b	1a430 <__assert_fail@plt+0x904c>
   19364:	ldr	r3, [fp, #-20]	; 0xffffffec
   19368:	cmp	r3, #0
   1936c:	beq	193fc <__assert_fail@plt+0x8018>
   19370:	ldr	r2, [fp, #-288]	; 0xfffffee0
   19374:	ldr	r3, [fp, #-292]	; 0xfffffedc
   19378:	cmp	r2, r3
   1937c:	bcs	193ec <__assert_fail@plt+0x8008>
   19380:	ldr	r2, [fp, #-292]	; 0xfffffedc
   19384:	ldr	r3, [fp, #-288]	; 0xfffffee0
   19388:	sub	r3, r2, r3
   1938c:	str	r3, [fp, #-300]	; 0xfffffed4
   19390:	ldr	r3, [fp, #-28]	; 0xffffffe4
   19394:	cmp	r3, #48	; 0x30
   19398:	beq	193a8 <__assert_fail@plt+0x7fc4>
   1939c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   193a0:	cmp	r3, #43	; 0x2b
   193a4:	bne	193cc <__assert_fail@plt+0x7fe8>
   193a8:	ldr	r2, [fp, #-300]	; 0xfffffed4
   193ac:	mov	r1, #48	; 0x30
   193b0:	ldr	r0, [fp, #-20]	; 0xffffffec
   193b4:	bl	112e8 <memset@plt>
   193b8:	ldr	r2, [fp, #-20]	; 0xffffffec
   193bc:	ldr	r3, [fp, #-300]	; 0xfffffed4
   193c0:	add	r3, r2, r3
   193c4:	str	r3, [fp, #-20]	; 0xffffffec
   193c8:	b	193ec <__assert_fail@plt+0x8008>
   193cc:	ldr	r2, [fp, #-300]	; 0xfffffed4
   193d0:	mov	r1, #32
   193d4:	ldr	r0, [fp, #-20]	; 0xffffffec
   193d8:	bl	112e8 <memset@plt>
   193dc:	ldr	r2, [fp, #-20]	; 0xffffffec
   193e0:	ldr	r3, [fp, #-300]	; 0xfffffed4
   193e4:	add	r3, r2, r3
   193e8:	str	r3, [fp, #-20]	; 0xffffffec
   193ec:	ldr	r2, [fp, #-20]	; 0xffffffec
   193f0:	ldr	r3, [fp, #-288]	; 0xfffffee0
   193f4:	add	r3, r2, r3
   193f8:	str	r3, [fp, #-20]	; 0xffffffec
   193fc:	ldr	r2, [fp, #-16]
   19400:	ldr	r3, [fp, #-296]	; 0xfffffed8
   19404:	add	r3, r2, r3
   19408:	str	r3, [fp, #-16]
   1940c:	b	1a3d4 <__assert_fail@plt+0x8ff0>
   19410:	mov	r3, #1
   19414:	str	r3, [fp, #-304]	; 0xfffffed0
   19418:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1941c:	cmp	r3, #45	; 0x2d
   19420:	beq	19438 <__assert_fail@plt+0x8054>
   19424:	ldr	r3, [fp, #12]
   19428:	cmp	r3, #0
   1942c:	blt	19438 <__assert_fail@plt+0x8054>
   19430:	ldr	r3, [fp, #12]
   19434:	b	1943c <__assert_fail@plt+0x8058>
   19438:	mov	r3, #0
   1943c:	str	r3, [fp, #-308]	; 0xfffffecc
   19440:	ldr	r2, [fp, #-304]	; 0xfffffed0
   19444:	ldr	r3, [fp, #-308]	; 0xfffffecc
   19448:	cmp	r2, r3
   1944c:	movcs	r3, r2
   19450:	movcc	r3, r3
   19454:	str	r3, [fp, #-312]	; 0xfffffec8
   19458:	ldr	r2, [fp, #-1436]	; 0xfffffa64
   1945c:	ldr	r3, [fp, #-16]
   19460:	sub	r2, r2, r3
   19464:	ldr	r3, [fp, #-312]	; 0xfffffec8
   19468:	cmp	r2, r3
   1946c:	bhi	19488 <__assert_fail@plt+0x80a4>
   19470:	bl	112d0 <__errno_location@plt>
   19474:	mov	r2, r0
   19478:	mov	r3, #34	; 0x22
   1947c:	str	r3, [r2]
   19480:	mov	r3, #0
   19484:	b	1a430 <__assert_fail@plt+0x904c>
   19488:	ldr	r3, [fp, #-20]	; 0xffffffec
   1948c:	cmp	r3, #0
   19490:	beq	1952c <__assert_fail@plt+0x8148>
   19494:	ldr	r2, [fp, #-304]	; 0xfffffed0
   19498:	ldr	r3, [fp, #-308]	; 0xfffffecc
   1949c:	cmp	r2, r3
   194a0:	bcs	19510 <__assert_fail@plt+0x812c>
   194a4:	ldr	r2, [fp, #-308]	; 0xfffffecc
   194a8:	ldr	r3, [fp, #-304]	; 0xfffffed0
   194ac:	sub	r3, r2, r3
   194b0:	str	r3, [fp, #-316]	; 0xfffffec4
   194b4:	ldr	r3, [fp, #-28]	; 0xffffffe4
   194b8:	cmp	r3, #48	; 0x30
   194bc:	beq	194cc <__assert_fail@plt+0x80e8>
   194c0:	ldr	r3, [fp, #-28]	; 0xffffffe4
   194c4:	cmp	r3, #43	; 0x2b
   194c8:	bne	194f0 <__assert_fail@plt+0x810c>
   194cc:	ldr	r2, [fp, #-316]	; 0xfffffec4
   194d0:	mov	r1, #48	; 0x30
   194d4:	ldr	r0, [fp, #-20]	; 0xffffffec
   194d8:	bl	112e8 <memset@plt>
   194dc:	ldr	r2, [fp, #-20]	; 0xffffffec
   194e0:	ldr	r3, [fp, #-316]	; 0xfffffec4
   194e4:	add	r3, r2, r3
   194e8:	str	r3, [fp, #-20]	; 0xffffffec
   194ec:	b	19510 <__assert_fail@plt+0x812c>
   194f0:	ldr	r2, [fp, #-316]	; 0xfffffec4
   194f4:	mov	r1, #32
   194f8:	ldr	r0, [fp, #-20]	; 0xffffffec
   194fc:	bl	112e8 <memset@plt>
   19500:	ldr	r2, [fp, #-20]	; 0xffffffec
   19504:	ldr	r3, [fp, #-316]	; 0xfffffec4
   19508:	add	r3, r2, r3
   1950c:	str	r3, [fp, #-20]	; 0xffffffec
   19510:	ldr	r3, [fp, #-20]	; 0xffffffec
   19514:	mov	r2, #10
   19518:	strb	r2, [r3]
   1951c:	ldr	r2, [fp, #-20]	; 0xffffffec
   19520:	ldr	r3, [fp, #-304]	; 0xfffffed0
   19524:	add	r3, r2, r3
   19528:	str	r3, [fp, #-20]	; 0xffffffec
   1952c:	ldr	r2, [fp, #-16]
   19530:	ldr	r3, [fp, #-312]	; 0xfffffec8
   19534:	add	r3, r2, r3
   19538:	str	r3, [fp, #-16]
   1953c:	b	1a3d4 <__assert_fail@plt+0x8ff0>
   19540:	mov	r3, #1
   19544:	strb	r3, [fp, #-61]	; 0xffffffc3
   19548:	mov	r3, #112	; 0x70
   1954c:	str	r3, [fp, #-76]	; 0xffffffb4
   19550:	ldrb	r3, [fp, #-69]	; 0xffffffbb
   19554:	cmp	r3, #0
   19558:	beq	185a4 <__assert_fail@plt+0x71c0>
   1955c:	mov	r3, #0
   19560:	strb	r3, [fp, #-62]	; 0xffffffc2
   19564:	mov	r3, #1
   19568:	strb	r3, [fp, #-61]	; 0xffffffc3
   1956c:	b	185a4 <__assert_fail@plt+0x71c0>
   19570:	mov	r3, #1
   19574:	str	r3, [fp, #-36]	; 0xffffffdc
   19578:	mov	r3, #0
   1957c:	strb	r3, [fp, #-45]	; 0xffffffd3
   19580:	ldr	r3, [fp, #-1444]	; 0xfffffa5c
   19584:	ldr	r2, [r3, #16]
   19588:	mov	r3, r2
   1958c:	lsl	r3, r3, #2
   19590:	add	r3, r3, r2
   19594:	lsl	r3, r3, #1
   19598:	add	r3, r3, r2
   1959c:	asr	r3, r3, #5
   195a0:	add	r3, r3, #1
   195a4:	str	r3, [fp, #-44]	; 0xffffffd4
   195a8:	b	189f0 <__assert_fail@plt+0x760c>
   195ac:	ldr	r3, [pc, #-3072]	; 189b4 <__assert_fail@plt+0x75d0>
   195b0:	str	r3, [fp, #-56]	; 0xffffffc8
   195b4:	b	1839c <__assert_fail@plt+0x6fb8>
   195b8:	ldr	r3, [fp, #-32]	; 0xffffffe0
   195bc:	cmp	r3, #69	; 0x45
   195c0:	beq	1a208 <__assert_fail@plt+0x8e24>
   195c4:	mov	r3, #2
   195c8:	str	r3, [fp, #-36]	; 0xffffffdc
   195cc:	ldr	r3, [fp, #-1444]	; 0xfffffa5c
   195d0:	ldr	r3, [r3]
   195d4:	str	r3, [fp, #-40]	; 0xffffffd8
   195d8:	b	189dc <__assert_fail@plt+0x75f8>
   195dc:	ldr	r3, [fp, #-1444]	; 0xfffffa5c
   195e0:	sub	ip, fp, #1424	; 0x590
   195e4:	sub	ip, ip, #4
   195e8:	mov	lr, r3
   195ec:	ldm	lr!, {r0, r1, r2, r3}
   195f0:	stmia	ip!, {r0, r1, r2, r3}
   195f4:	ldm	lr!, {r0, r1, r2, r3}
   195f8:	stmia	ip!, {r0, r1, r2, r3}
   195fc:	ldm	lr, {r0, r1, r2}
   19600:	stm	ip, {r0, r1, r2}
   19604:	mvn	r3, #0
   19608:	str	r3, [fp, #-1400]	; 0xfffffa88
   1960c:	sub	r3, fp, #1424	; 0x590
   19610:	sub	r3, r3, #4
   19614:	mov	r1, r3
   19618:	ldr	r0, [fp, #20]
   1961c:	bl	1d588 <__assert_fail@plt+0xc1a4>
   19620:	str	r0, [fp, #-100]	; 0xffffff9c
   19624:	ldr	r3, [fp, #-1400]	; 0xfffffa88
   19628:	cmp	r3, #0
   1962c:	bge	19648 <__assert_fail@plt+0x8264>
   19630:	bl	112d0 <__errno_location@plt>
   19634:	mov	r2, r0
   19638:	mov	r3, #75	; 0x4b
   1963c:	str	r3, [r2]
   19640:	mov	r3, #0
   19644:	b	1a430 <__assert_fail@plt+0x904c>
   19648:	sub	r3, fp, #396	; 0x18c
   1964c:	add	r3, r3, #14
   19650:	str	r3, [fp, #-60]	; 0xffffffc4
   19654:	ldr	r3, [fp, #-100]	; 0xffffff9c
   19658:	lsr	r3, r3, #31
   1965c:	strb	r3, [fp, #-45]	; 0xffffffd3
   19660:	ldr	r2, [fp, #-100]	; 0xffffff9c
   19664:	ldr	r3, [pc, #-3252]	; 189b8 <__assert_fail@plt+0x75d4>
   19668:	smull	r1, r3, r3, r2
   1966c:	asr	r1, r3, #2
   19670:	asr	r3, r2, #31
   19674:	sub	r1, r1, r3
   19678:	mov	r3, r1
   1967c:	lsl	r3, r3, #2
   19680:	add	r3, r3, r1
   19684:	lsl	r3, r3, #1
   19688:	sub	r3, r2, r3
   1968c:	str	r3, [fp, #-216]	; 0xffffff28
   19690:	ldr	r3, [fp, #-100]	; 0xffffff9c
   19694:	ldr	r2, [pc, #-3300]	; 189b8 <__assert_fail@plt+0x75d4>
   19698:	smull	r1, r2, r2, r3
   1969c:	asr	r2, r2, #2
   196a0:	asr	r3, r3, #31
   196a4:	sub	r3, r2, r3
   196a8:	str	r3, [fp, #-100]	; 0xffffff9c
   196ac:	ldr	r3, [fp, #-60]	; 0xffffffc4
   196b0:	sub	r3, r3, #1
   196b4:	str	r3, [fp, #-60]	; 0xffffffc4
   196b8:	ldrb	r3, [fp, #-45]	; 0xffffffd3
   196bc:	cmp	r3, #0
   196c0:	beq	196d8 <__assert_fail@plt+0x82f4>
   196c4:	ldr	r3, [fp, #-216]	; 0xffffff28
   196c8:	uxtb	r3, r3
   196cc:	rsb	r3, r3, #48	; 0x30
   196d0:	uxtb	r3, r3
   196d4:	b	196e8 <__assert_fail@plt+0x8304>
   196d8:	ldr	r3, [fp, #-216]	; 0xffffff28
   196dc:	uxtb	r3, r3
   196e0:	add	r3, r3, #48	; 0x30
   196e4:	uxtb	r3, r3
   196e8:	ldr	r2, [fp, #-60]	; 0xffffffc4
   196ec:	strb	r3, [r2]
   196f0:	ldr	r3, [fp, #-100]	; 0xffffff9c
   196f4:	cmp	r3, #0
   196f8:	bne	19660 <__assert_fail@plt+0x827c>
   196fc:	mov	r3, #1
   19700:	str	r3, [fp, #-36]	; 0xffffffdc
   19704:	mov	r3, #0
   19708:	strb	r3, [fp, #-46]	; 0xffffffd2
   1970c:	b	18ae8 <__assert_fail@plt+0x7704>
   19710:	ldr	r3, [fp, #-32]	; 0xffffffe0
   19714:	cmp	r3, #79	; 0x4f
   19718:	bne	185ac <__assert_fail@plt+0x71c8>
   1971c:	b	1a244 <__assert_fail@plt+0x8e60>
   19720:	ldr	r3, [pc, #-3436]	; 189bc <__assert_fail@plt+0x75d8>
   19724:	str	r3, [fp, #-56]	; 0xffffffc8
   19728:	b	1839c <__assert_fail@plt+0x6fb8>
   1972c:	mov	r3, #1
   19730:	str	r3, [fp, #-320]	; 0xfffffec0
   19734:	ldr	r3, [fp, #-28]	; 0xffffffe4
   19738:	cmp	r3, #45	; 0x2d
   1973c:	beq	19754 <__assert_fail@plt+0x8370>
   19740:	ldr	r3, [fp, #12]
   19744:	cmp	r3, #0
   19748:	blt	19754 <__assert_fail@plt+0x8370>
   1974c:	ldr	r3, [fp, #12]
   19750:	b	19758 <__assert_fail@plt+0x8374>
   19754:	mov	r3, #0
   19758:	str	r3, [fp, #-324]	; 0xfffffebc
   1975c:	ldr	r2, [fp, #-320]	; 0xfffffec0
   19760:	ldr	r3, [fp, #-324]	; 0xfffffebc
   19764:	cmp	r2, r3
   19768:	movcs	r3, r2
   1976c:	movcc	r3, r3
   19770:	str	r3, [fp, #-328]	; 0xfffffeb8
   19774:	ldr	r2, [fp, #-1436]	; 0xfffffa64
   19778:	ldr	r3, [fp, #-16]
   1977c:	sub	r2, r2, r3
   19780:	ldr	r3, [fp, #-328]	; 0xfffffeb8
   19784:	cmp	r2, r3
   19788:	bhi	197a4 <__assert_fail@plt+0x83c0>
   1978c:	bl	112d0 <__errno_location@plt>
   19790:	mov	r2, r0
   19794:	mov	r3, #34	; 0x22
   19798:	str	r3, [r2]
   1979c:	mov	r3, #0
   197a0:	b	1a430 <__assert_fail@plt+0x904c>
   197a4:	ldr	r3, [fp, #-20]	; 0xffffffec
   197a8:	cmp	r3, #0
   197ac:	beq	19848 <__assert_fail@plt+0x8464>
   197b0:	ldr	r2, [fp, #-320]	; 0xfffffec0
   197b4:	ldr	r3, [fp, #-324]	; 0xfffffebc
   197b8:	cmp	r2, r3
   197bc:	bcs	1982c <__assert_fail@plt+0x8448>
   197c0:	ldr	r2, [fp, #-324]	; 0xfffffebc
   197c4:	ldr	r3, [fp, #-320]	; 0xfffffec0
   197c8:	sub	r3, r2, r3
   197cc:	str	r3, [fp, #-332]	; 0xfffffeb4
   197d0:	ldr	r3, [fp, #-28]	; 0xffffffe4
   197d4:	cmp	r3, #48	; 0x30
   197d8:	beq	197e8 <__assert_fail@plt+0x8404>
   197dc:	ldr	r3, [fp, #-28]	; 0xffffffe4
   197e0:	cmp	r3, #43	; 0x2b
   197e4:	bne	1980c <__assert_fail@plt+0x8428>
   197e8:	ldr	r2, [fp, #-332]	; 0xfffffeb4
   197ec:	mov	r1, #48	; 0x30
   197f0:	ldr	r0, [fp, #-20]	; 0xffffffec
   197f4:	bl	112e8 <memset@plt>
   197f8:	ldr	r2, [fp, #-20]	; 0xffffffec
   197fc:	ldr	r3, [fp, #-332]	; 0xfffffeb4
   19800:	add	r3, r2, r3
   19804:	str	r3, [fp, #-20]	; 0xffffffec
   19808:	b	1982c <__assert_fail@plt+0x8448>
   1980c:	ldr	r2, [fp, #-332]	; 0xfffffeb4
   19810:	mov	r1, #32
   19814:	ldr	r0, [fp, #-20]	; 0xffffffec
   19818:	bl	112e8 <memset@plt>
   1981c:	ldr	r2, [fp, #-20]	; 0xffffffec
   19820:	ldr	r3, [fp, #-332]	; 0xfffffeb4
   19824:	add	r3, r2, r3
   19828:	str	r3, [fp, #-20]	; 0xffffffec
   1982c:	ldr	r3, [fp, #-20]	; 0xffffffec
   19830:	mov	r2, #9
   19834:	strb	r2, [r3]
   19838:	ldr	r2, [fp, #-20]	; 0xffffffec
   1983c:	ldr	r3, [fp, #-320]	; 0xfffffec0
   19840:	add	r3, r2, r3
   19844:	str	r3, [fp, #-20]	; 0xffffffec
   19848:	ldr	r2, [fp, #-16]
   1984c:	ldr	r3, [fp, #-328]	; 0xfffffeb8
   19850:	add	r3, r2, r3
   19854:	str	r3, [fp, #-16]
   19858:	b	1a3d4 <__assert_fail@plt+0x8ff0>
   1985c:	mov	r3, #1
   19860:	str	r3, [fp, #-36]	; 0xffffffdc
   19864:	ldr	r3, [fp, #-1444]	; 0xfffffa5c
   19868:	ldr	r3, [r3, #24]
   1986c:	add	r2, r3, #6
   19870:	ldr	r3, [pc, #-3768]	; 189c0 <__assert_fail@plt+0x75dc>
   19874:	smull	r1, r3, r3, r2
   19878:	add	r3, r3, r2
   1987c:	asr	r1, r3, #2
   19880:	asr	r3, r2, #31
   19884:	sub	r1, r1, r3
   19888:	mov	r3, r1
   1988c:	lsl	r3, r3, #3
   19890:	sub	r3, r3, r1
   19894:	sub	r1, r2, r3
   19898:	add	r3, r1, #1
   1989c:	str	r3, [fp, #-40]	; 0xffffffd8
   198a0:	b	189dc <__assert_fail@plt+0x75f8>
   198a4:	ldr	r3, [fp, #-32]	; 0xffffffe0
   198a8:	cmp	r3, #69	; 0x45
   198ac:	beq	1a210 <__assert_fail@plt+0x8e2c>
   198b0:	mov	r3, #2
   198b4:	str	r3, [fp, #-36]	; 0xffffffdc
   198b8:	ldr	r3, [fp, #-1444]	; 0xfffffa5c
   198bc:	ldr	r2, [r3, #28]
   198c0:	ldr	r3, [fp, #-1444]	; 0xfffffa5c
   198c4:	ldr	r3, [r3, #24]
   198c8:	sub	r3, r2, r3
   198cc:	add	r3, r3, #7
   198d0:	ldr	r2, [pc, #-3864]	; 189c0 <__assert_fail@plt+0x75dc>
   198d4:	smull	r1, r2, r2, r3
   198d8:	add	r2, r2, r3
   198dc:	asr	r2, r2, #2
   198e0:	asr	r3, r3, #31
   198e4:	sub	r3, r2, r3
   198e8:	str	r3, [fp, #-40]	; 0xffffffd8
   198ec:	b	189dc <__assert_fail@plt+0x75f8>
   198f0:	ldr	r3, [fp, #-32]	; 0xffffffe0
   198f4:	cmp	r3, #69	; 0x45
   198f8:	beq	1a218 <__assert_fail@plt+0x8e34>
   198fc:	ldr	r3, [fp, #-1444]	; 0xfffffa5c
   19900:	ldr	r2, [r3, #20]
   19904:	ldr	r3, [fp, #-1444]	; 0xfffffa5c
   19908:	ldr	r3, [r3, #20]
   1990c:	cmp	r3, #0
   19910:	bge	1991c <__assert_fail@plt+0x8538>
   19914:	mov	r3, #300	; 0x12c
   19918:	b	19920 <__assert_fail@plt+0x853c>
   1991c:	mvn	r3, #99	; 0x63
   19920:	add	r3, r2, r3
   19924:	str	r3, [fp, #-184]	; 0xffffff48
   19928:	mov	r3, #0
   1992c:	str	r3, [fp, #-104]	; 0xffffff98
   19930:	ldr	r3, [fp, #-1444]	; 0xfffffa5c
   19934:	ldr	r2, [r3, #28]
   19938:	ldr	r3, [fp, #-1444]	; 0xfffffa5c
   1993c:	ldr	r3, [r3, #24]
   19940:	mov	r1, r3
   19944:	mov	r0, r2
   19948:	bl	1791c <__assert_fail@plt+0x6538>
   1994c:	str	r0, [fp, #-108]	; 0xffffff94
   19950:	ldr	r3, [fp, #-108]	; 0xffffff94
   19954:	cmp	r3, #0
   19958:	bge	19a14 <__assert_fail@plt+0x8630>
   1995c:	mvn	r3, #0
   19960:	str	r3, [fp, #-104]	; 0xffffff98
   19964:	ldr	r3, [fp, #-1444]	; 0xfffffa5c
   19968:	ldr	r1, [r3, #28]
   1996c:	ldr	r3, [fp, #-184]	; 0xffffff48
   19970:	sub	r3, r3, #1
   19974:	and	r3, r3, #3
   19978:	cmp	r3, #0
   1997c:	bne	199e8 <__assert_fail@plt+0x8604>
   19980:	ldr	r3, [fp, #-184]	; 0xffffff48
   19984:	sub	r2, r3, #1
   19988:	ldr	r3, [pc, #-4044]	; 189c4 <__assert_fail@plt+0x75e0>
   1998c:	smull	r0, r3, r3, r2
   19990:	asr	r0, r3, #5
   19994:	asr	r3, r2, #31
   19998:	sub	r3, r0, r3
   1999c:	mov	r0, #100	; 0x64
   199a0:	mul	r3, r0, r3
   199a4:	sub	r3, r2, r3
   199a8:	cmp	r3, #0
   199ac:	bne	199e0 <__assert_fail@plt+0x85fc>
   199b0:	ldr	r3, [fp, #-184]	; 0xffffff48
   199b4:	sub	r2, r3, #1
   199b8:	ldr	r3, [pc, #-4092]	; 189c4 <__assert_fail@plt+0x75e0>
   199bc:	smull	r0, r3, r3, r2
   199c0:	asr	r0, r3, #7
   199c4:	asr	r3, r2, #31
   199c8:	sub	r3, r0, r3
   199cc:	mov	r0, #400	; 0x190
   199d0:	mul	r3, r0, r3
   199d4:	sub	r3, r2, r3
   199d8:	cmp	r3, #0
   199dc:	bne	199e8 <__assert_fail@plt+0x8604>
   199e0:	mov	r3, #1
   199e4:	b	199ec <__assert_fail@plt+0x8608>
   199e8:	mov	r3, #0
   199ec:	add	r3, r3, #364	; 0x16c
   199f0:	add	r3, r3, #1
   199f4:	add	r2, r1, r3
   199f8:	ldr	r3, [fp, #-1444]	; 0xfffffa5c
   199fc:	ldr	r3, [r3, #24]
   19a00:	mov	r1, r3
   19a04:	mov	r0, r2
   19a08:	bl	1791c <__assert_fail@plt+0x6538>
   19a0c:	str	r0, [fp, #-108]	; 0xffffff94
   19a10:	b	19ad0 <__assert_fail@plt+0x86ec>
   19a14:	ldr	r3, [fp, #-1444]	; 0xfffffa5c
   19a18:	ldr	r1, [r3, #28]
   19a1c:	ldr	r3, [fp, #-184]	; 0xffffff48
   19a20:	and	r3, r3, #3
   19a24:	cmp	r3, #0
   19a28:	bne	19a8c <__assert_fail@plt+0x86a8>
   19a2c:	ldr	r2, [fp, #-184]	; 0xffffff48
   19a30:	ldr	r3, [pc, #2564]	; 1a43c <__assert_fail@plt+0x9058>
   19a34:	smull	r0, r3, r3, r2
   19a38:	asr	r0, r3, #5
   19a3c:	asr	r3, r2, #31
   19a40:	sub	r3, r0, r3
   19a44:	mov	r0, #100	; 0x64
   19a48:	mul	r3, r0, r3
   19a4c:	sub	r3, r2, r3
   19a50:	cmp	r3, #0
   19a54:	bne	19a84 <__assert_fail@plt+0x86a0>
   19a58:	ldr	r2, [fp, #-184]	; 0xffffff48
   19a5c:	ldr	r3, [pc, #2520]	; 1a43c <__assert_fail@plt+0x9058>
   19a60:	smull	r0, r3, r3, r2
   19a64:	asr	r0, r3, #7
   19a68:	asr	r3, r2, #31
   19a6c:	sub	r3, r0, r3
   19a70:	mov	r0, #400	; 0x190
   19a74:	mul	r3, r0, r3
   19a78:	sub	r3, r2, r3
   19a7c:	cmp	r3, #0
   19a80:	bne	19a8c <__assert_fail@plt+0x86a8>
   19a84:	mov	r3, #1
   19a88:	b	19a90 <__assert_fail@plt+0x86ac>
   19a8c:	mov	r3, #0
   19a90:	add	r3, r3, #364	; 0x16c
   19a94:	add	r3, r3, #1
   19a98:	sub	r2, r1, r3
   19a9c:	ldr	r3, [fp, #-1444]	; 0xfffffa5c
   19aa0:	ldr	r3, [r3, #24]
   19aa4:	mov	r1, r3
   19aa8:	mov	r0, r2
   19aac:	bl	1791c <__assert_fail@plt+0x6538>
   19ab0:	str	r0, [fp, #-188]	; 0xffffff44
   19ab4:	ldr	r3, [fp, #-188]	; 0xffffff44
   19ab8:	cmp	r3, #0
   19abc:	blt	19ad0 <__assert_fail@plt+0x86ec>
   19ac0:	mov	r3, #1
   19ac4:	str	r3, [fp, #-104]	; 0xffffff98
   19ac8:	ldr	r3, [fp, #-188]	; 0xffffff44
   19acc:	str	r3, [fp, #-108]	; 0xffffff94
   19ad0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   19ad4:	ldrb	r3, [r3]
   19ad8:	cmp	r3, #71	; 0x47
   19adc:	beq	19b98 <__assert_fail@plt+0x87b4>
   19ae0:	cmp	r3, #103	; 0x67
   19ae4:	bne	19be8 <__assert_fail@plt+0x8804>
   19ae8:	ldr	r3, [fp, #-1444]	; 0xfffffa5c
   19aec:	ldr	r2, [r3, #20]
   19af0:	ldr	r3, [pc, #2372]	; 1a43c <__assert_fail@plt+0x9058>
   19af4:	smull	r1, r3, r3, r2
   19af8:	asr	r1, r3, #5
   19afc:	asr	r3, r2, #31
   19b00:	sub	r3, r1, r3
   19b04:	mov	r1, #100	; 0x64
   19b08:	mul	r3, r1, r3
   19b0c:	sub	r3, r2, r3
   19b10:	ldr	r2, [fp, #-104]	; 0xffffff98
   19b14:	add	r3, r3, r2
   19b18:	ldr	r2, [pc, #2332]	; 1a43c <__assert_fail@plt+0x9058>
   19b1c:	smull	r1, r2, r2, r3
   19b20:	asr	r1, r2, #5
   19b24:	asr	r2, r3, #31
   19b28:	sub	r2, r1, r2
   19b2c:	mov	r1, #100	; 0x64
   19b30:	mul	r2, r1, r2
   19b34:	sub	r3, r3, r2
   19b38:	str	r3, [fp, #-192]	; 0xffffff40
   19b3c:	mov	r3, #2
   19b40:	str	r3, [fp, #-36]	; 0xffffffdc
   19b44:	mov	r3, #0
   19b48:	strb	r3, [fp, #-45]	; 0xffffffd3
   19b4c:	ldr	r3, [fp, #-192]	; 0xffffff40
   19b50:	cmp	r3, #0
   19b54:	bge	19b8c <__assert_fail@plt+0x87a8>
   19b58:	ldr	r3, [fp, #-1444]	; 0xfffffa5c
   19b5c:	ldr	r2, [r3, #20]
   19b60:	ldr	r1, [fp, #-104]	; 0xffffff98
   19b64:	ldr	r3, [pc, #2260]	; 1a440 <__assert_fail@plt+0x905c>
   19b68:	sub	r3, r3, r1
   19b6c:	cmp	r2, r3
   19b70:	bge	19b80 <__assert_fail@plt+0x879c>
   19b74:	ldr	r3, [fp, #-192]	; 0xffffff40
   19b78:	rsb	r3, r3, #0
   19b7c:	b	19b90 <__assert_fail@plt+0x87ac>
   19b80:	ldr	r3, [fp, #-192]	; 0xffffff40
   19b84:	add	r3, r3, #100	; 0x64
   19b88:	b	19b90 <__assert_fail@plt+0x87ac>
   19b8c:	ldr	r3, [fp, #-192]	; 0xffffff40
   19b90:	str	r3, [fp, #-44]	; 0xffffffd4
   19b94:	b	18924 <__assert_fail@plt+0x7540>
   19b98:	mov	r3, #4
   19b9c:	str	r3, [fp, #-36]	; 0xffffffdc
   19ba0:	ldr	r3, [fp, #-1444]	; 0xfffffa5c
   19ba4:	ldr	r2, [r3, #20]
   19ba8:	ldr	r1, [fp, #-104]	; 0xffffff98
   19bac:	ldr	r3, [pc, #2188]	; 1a440 <__assert_fail@plt+0x905c>
   19bb0:	sub	r3, r3, r1
   19bb4:	cmp	r2, r3
   19bb8:	movlt	r3, #1
   19bbc:	movge	r3, #0
   19bc0:	strb	r3, [fp, #-45]	; 0xffffffd3
   19bc4:	ldr	r3, [fp, #-1444]	; 0xfffffa5c
   19bc8:	ldr	r3, [r3, #20]
   19bcc:	mov	r2, r3
   19bd0:	ldr	r3, [fp, #-104]	; 0xffffff98
   19bd4:	add	r3, r2, r3
   19bd8:	add	r3, r3, #1888	; 0x760
   19bdc:	add	r3, r3, #12
   19be0:	str	r3, [fp, #-44]	; 0xffffffd4
   19be4:	b	18924 <__assert_fail@plt+0x7540>
   19be8:	mov	r3, #2
   19bec:	str	r3, [fp, #-36]	; 0xffffffdc
   19bf0:	ldr	r3, [fp, #-108]	; 0xffffff94
   19bf4:	ldr	r2, [pc, #2120]	; 1a444 <__assert_fail@plt+0x9060>
   19bf8:	smull	r1, r2, r2, r3
   19bfc:	add	r2, r2, r3
   19c00:	asr	r2, r2, #2
   19c04:	asr	r3, r3, #31
   19c08:	sub	r3, r2, r3
   19c0c:	add	r3, r3, #1
   19c10:	str	r3, [fp, #-40]	; 0xffffffd8
   19c14:	b	189dc <__assert_fail@plt+0x75f8>
   19c18:	ldr	r3, [fp, #-32]	; 0xffffffe0
   19c1c:	cmp	r3, #69	; 0x45
   19c20:	beq	1a220 <__assert_fail@plt+0x8e3c>
   19c24:	mov	r3, #2
   19c28:	str	r3, [fp, #-36]	; 0xffffffdc
   19c2c:	ldr	r3, [fp, #-1444]	; 0xfffffa5c
   19c30:	ldr	r0, [r3, #28]
   19c34:	ldr	r3, [fp, #-1444]	; 0xfffffa5c
   19c38:	ldr	r3, [r3, #24]
   19c3c:	add	r2, r3, #6
   19c40:	ldr	r3, [pc, #2044]	; 1a444 <__assert_fail@plt+0x9060>
   19c44:	smull	r1, r3, r3, r2
   19c48:	add	r3, r3, r2
   19c4c:	asr	r1, r3, #2
   19c50:	asr	r3, r2, #31
   19c54:	sub	r1, r1, r3
   19c58:	mov	r3, r1
   19c5c:	lsl	r3, r3, #3
   19c60:	sub	r3, r3, r1
   19c64:	sub	r1, r2, r3
   19c68:	sub	r3, r0, r1
   19c6c:	add	r3, r3, #7
   19c70:	ldr	r2, [pc, #1996]	; 1a444 <__assert_fail@plt+0x9060>
   19c74:	smull	r1, r2, r2, r3
   19c78:	add	r2, r2, r3
   19c7c:	asr	r2, r2, #2
   19c80:	asr	r3, r3, #31
   19c84:	sub	r3, r2, r3
   19c88:	str	r3, [fp, #-40]	; 0xffffffd8
   19c8c:	b	189dc <__assert_fail@plt+0x75f8>
   19c90:	ldr	r3, [fp, #-32]	; 0xffffffe0
   19c94:	cmp	r3, #69	; 0x45
   19c98:	beq	1a228 <__assert_fail@plt+0x8e44>
   19c9c:	mov	r3, #1
   19ca0:	str	r3, [fp, #-36]	; 0xffffffdc
   19ca4:	ldr	r3, [fp, #-1444]	; 0xfffffa5c
   19ca8:	ldr	r3, [r3, #24]
   19cac:	str	r3, [fp, #-40]	; 0xffffffd8
   19cb0:	b	189dc <__assert_fail@plt+0x75f8>
   19cb4:	ldr	r3, [fp, #-32]	; 0xffffffe0
   19cb8:	cmp	r3, #69	; 0x45
   19cbc:	beq	185b4 <__assert_fail@plt+0x71d0>
   19cc0:	ldr	r3, [fp, #-32]	; 0xffffffe0
   19cc4:	cmp	r3, #79	; 0x4f
   19cc8:	beq	1a230 <__assert_fail@plt+0x8e4c>
   19ccc:	mov	r3, #4
   19cd0:	str	r3, [fp, #-36]	; 0xffffffdc
   19cd4:	ldr	r3, [fp, #-1444]	; 0xfffffa5c
   19cd8:	ldr	r3, [r3, #20]
   19cdc:	ldr	r2, [pc, #1884]	; 1a440 <__assert_fail@plt+0x905c>
   19ce0:	cmp	r3, r2
   19ce4:	movlt	r3, #1
   19ce8:	movge	r3, #0
   19cec:	strb	r3, [fp, #-45]	; 0xffffffd3
   19cf0:	ldr	r3, [fp, #-1444]	; 0xfffffa5c
   19cf4:	ldr	r3, [r3, #20]
   19cf8:	add	r3, r3, #1888	; 0x760
   19cfc:	add	r3, r3, #12
   19d00:	str	r3, [fp, #-44]	; 0xffffffd4
   19d04:	b	18924 <__assert_fail@plt+0x7540>
   19d08:	ldr	r3, [fp, #-32]	; 0xffffffe0
   19d0c:	cmp	r3, #69	; 0x45
   19d10:	beq	185bc <__assert_fail@plt+0x71d8>
   19d14:	ldr	r3, [fp, #-1444]	; 0xfffffa5c
   19d18:	ldr	r3, [r3, #20]
   19d1c:	ldr	r2, [pc, #1816]	; 1a43c <__assert_fail@plt+0x9058>
   19d20:	smull	r1, r2, r2, r3
   19d24:	asr	r1, r2, #5
   19d28:	asr	r2, r3, #31
   19d2c:	sub	r2, r1, r2
   19d30:	mov	r1, #100	; 0x64
   19d34:	mul	r2, r1, r2
   19d38:	sub	r3, r3, r2
   19d3c:	str	r3, [fp, #-112]	; 0xffffff90
   19d40:	ldr	r3, [fp, #-112]	; 0xffffff90
   19d44:	cmp	r3, #0
   19d48:	bge	19d78 <__assert_fail@plt+0x8994>
   19d4c:	ldr	r3, [fp, #-1444]	; 0xfffffa5c
   19d50:	ldr	r3, [r3, #20]
   19d54:	ldr	r2, [pc, #1764]	; 1a440 <__assert_fail@plt+0x905c>
   19d58:	cmp	r3, r2
   19d5c:	bge	19d6c <__assert_fail@plt+0x8988>
   19d60:	ldr	r3, [fp, #-112]	; 0xffffff90
   19d64:	rsb	r3, r3, #0
   19d68:	b	19d74 <__assert_fail@plt+0x8990>
   19d6c:	ldr	r3, [fp, #-112]	; 0xffffff90
   19d70:	add	r3, r3, #100	; 0x64
   19d74:	str	r3, [fp, #-112]	; 0xffffff90
   19d78:	mov	r3, #2
   19d7c:	str	r3, [fp, #-36]	; 0xffffffdc
   19d80:	mov	r3, #0
   19d84:	strb	r3, [fp, #-45]	; 0xffffffd3
   19d88:	ldr	r3, [fp, #-112]	; 0xffffff90
   19d8c:	str	r3, [fp, #-44]	; 0xffffffd4
   19d90:	b	18924 <__assert_fail@plt+0x7540>
   19d94:	ldrb	r3, [fp, #-69]	; 0xffffffbb
   19d98:	cmp	r3, #0
   19d9c:	beq	19db0 <__assert_fail@plt+0x89cc>
   19da0:	mov	r3, #0
   19da4:	strb	r3, [fp, #-62]	; 0xffffffc2
   19da8:	mov	r3, #1
   19dac:	strb	r3, [fp, #-61]	; 0xffffffc3
   19db0:	ldr	r0, [fp, #-12]
   19db4:	bl	11294 <strlen@plt>
   19db8:	str	r0, [fp, #-336]	; 0xfffffeb0
   19dbc:	ldr	r3, [fp, #-28]	; 0xffffffe4
   19dc0:	cmp	r3, #45	; 0x2d
   19dc4:	beq	19ddc <__assert_fail@plt+0x89f8>
   19dc8:	ldr	r3, [fp, #12]
   19dcc:	cmp	r3, #0
   19dd0:	blt	19ddc <__assert_fail@plt+0x89f8>
   19dd4:	ldr	r3, [fp, #12]
   19dd8:	b	19de0 <__assert_fail@plt+0x89fc>
   19ddc:	mov	r3, #0
   19de0:	str	r3, [fp, #-340]	; 0xfffffeac
   19de4:	ldr	r2, [fp, #-336]	; 0xfffffeb0
   19de8:	ldr	r3, [fp, #-340]	; 0xfffffeac
   19dec:	cmp	r2, r3
   19df0:	movcs	r3, r2
   19df4:	movcc	r3, r3
   19df8:	str	r3, [fp, #-344]	; 0xfffffea8
   19dfc:	ldr	r2, [fp, #-1436]	; 0xfffffa64
   19e00:	ldr	r3, [fp, #-16]
   19e04:	sub	r2, r2, r3
   19e08:	ldr	r3, [fp, #-344]	; 0xfffffea8
   19e0c:	cmp	r2, r3
   19e10:	bhi	19e2c <__assert_fail@plt+0x8a48>
   19e14:	bl	112d0 <__errno_location@plt>
   19e18:	mov	r2, r0
   19e1c:	mov	r3, #34	; 0x22
   19e20:	str	r3, [r2]
   19e24:	mov	r3, #0
   19e28:	b	1a430 <__assert_fail@plt+0x904c>
   19e2c:	ldr	r3, [fp, #-20]	; 0xffffffec
   19e30:	cmp	r3, #0
   19e34:	beq	19f14 <__assert_fail@plt+0x8b30>
   19e38:	ldr	r2, [fp, #-336]	; 0xfffffeb0
   19e3c:	ldr	r3, [fp, #-340]	; 0xfffffeac
   19e40:	cmp	r2, r3
   19e44:	bcs	19eb4 <__assert_fail@plt+0x8ad0>
   19e48:	ldr	r2, [fp, #-340]	; 0xfffffeac
   19e4c:	ldr	r3, [fp, #-336]	; 0xfffffeb0
   19e50:	sub	r3, r2, r3
   19e54:	str	r3, [fp, #-348]	; 0xfffffea4
   19e58:	ldr	r3, [fp, #-28]	; 0xffffffe4
   19e5c:	cmp	r3, #48	; 0x30
   19e60:	beq	19e70 <__assert_fail@plt+0x8a8c>
   19e64:	ldr	r3, [fp, #-28]	; 0xffffffe4
   19e68:	cmp	r3, #43	; 0x2b
   19e6c:	bne	19e94 <__assert_fail@plt+0x8ab0>
   19e70:	ldr	r2, [fp, #-348]	; 0xfffffea4
   19e74:	mov	r1, #48	; 0x30
   19e78:	ldr	r0, [fp, #-20]	; 0xffffffec
   19e7c:	bl	112e8 <memset@plt>
   19e80:	ldr	r2, [fp, #-20]	; 0xffffffec
   19e84:	ldr	r3, [fp, #-348]	; 0xfffffea4
   19e88:	add	r3, r2, r3
   19e8c:	str	r3, [fp, #-20]	; 0xffffffec
   19e90:	b	19eb4 <__assert_fail@plt+0x8ad0>
   19e94:	ldr	r2, [fp, #-348]	; 0xfffffea4
   19e98:	mov	r1, #32
   19e9c:	ldr	r0, [fp, #-20]	; 0xffffffec
   19ea0:	bl	112e8 <memset@plt>
   19ea4:	ldr	r2, [fp, #-20]	; 0xffffffec
   19ea8:	ldr	r3, [fp, #-348]	; 0xfffffea4
   19eac:	add	r3, r2, r3
   19eb0:	str	r3, [fp, #-20]	; 0xffffffec
   19eb4:	ldrb	r3, [fp, #-61]	; 0xffffffc3
   19eb8:	cmp	r3, #0
   19ebc:	beq	19ed4 <__assert_fail@plt+0x8af0>
   19ec0:	ldr	r2, [fp, #-336]	; 0xfffffeb0
   19ec4:	ldr	r1, [fp, #-12]
   19ec8:	ldr	r0, [fp, #-20]	; 0xffffffec
   19ecc:	bl	1783c <__assert_fail@plt+0x6458>
   19ed0:	b	19f04 <__assert_fail@plt+0x8b20>
   19ed4:	ldrb	r3, [fp, #-62]	; 0xffffffc2
   19ed8:	cmp	r3, #0
   19edc:	beq	19ef4 <__assert_fail@plt+0x8b10>
   19ee0:	ldr	r2, [fp, #-336]	; 0xfffffeb0
   19ee4:	ldr	r1, [fp, #-12]
   19ee8:	ldr	r0, [fp, #-20]	; 0xffffffec
   19eec:	bl	178ac <__assert_fail@plt+0x64c8>
   19ef0:	b	19f04 <__assert_fail@plt+0x8b20>
   19ef4:	ldr	r2, [fp, #-336]	; 0xfffffeb0
   19ef8:	ldr	r1, [fp, #-12]
   19efc:	ldr	r0, [fp, #-20]	; 0xffffffec
   19f00:	bl	1112c <memcpy@plt>
   19f04:	ldr	r2, [fp, #-20]	; 0xffffffec
   19f08:	ldr	r3, [fp, #-336]	; 0xfffffeb0
   19f0c:	add	r3, r2, r3
   19f10:	str	r3, [fp, #-20]	; 0xffffffec
   19f14:	ldr	r2, [fp, #-16]
   19f18:	ldr	r3, [fp, #-344]	; 0xfffffea8
   19f1c:	add	r3, r2, r3
   19f20:	str	r3, [fp, #-16]
   19f24:	b	1a3d4 <__assert_fail@plt+0x8ff0>
   19f28:	mov	r3, #1
   19f2c:	str	r3, [fp, #-68]	; 0xffffffbc
   19f30:	b	19f40 <__assert_fail@plt+0x8b5c>
   19f34:	ldr	r3, [fp, #-68]	; 0xffffffbc
   19f38:	add	r3, r3, #1
   19f3c:	str	r3, [fp, #-68]	; 0xffffffbc
   19f40:	ldr	r2, [fp, #-24]	; 0xffffffe8
   19f44:	ldr	r3, [fp, #-68]	; 0xffffffbc
   19f48:	add	r3, r2, r3
   19f4c:	ldrb	r3, [r3]
   19f50:	cmp	r3, #58	; 0x3a
   19f54:	beq	19f34 <__assert_fail@plt+0x8b50>
   19f58:	ldr	r2, [fp, #-24]	; 0xffffffe8
   19f5c:	ldr	r3, [fp, #-68]	; 0xffffffbc
   19f60:	add	r3, r2, r3
   19f64:	ldrb	r3, [r3]
   19f68:	cmp	r3, #122	; 0x7a
   19f6c:	bne	1a238 <__assert_fail@plt+0x8e54>
   19f70:	ldr	r2, [fp, #-24]	; 0xffffffe8
   19f74:	ldr	r3, [fp, #-68]	; 0xffffffbc
   19f78:	add	r3, r2, r3
   19f7c:	str	r3, [fp, #-24]	; 0xffffffe8
   19f80:	b	19f8c <__assert_fail@plt+0x8ba8>
   19f84:	mov	r3, #0
   19f88:	str	r3, [fp, #-68]	; 0xffffffbc
   19f8c:	ldr	r3, [fp, #-1444]	; 0xfffffa5c
   19f90:	ldr	r3, [r3, #32]
   19f94:	cmp	r3, #0
   19f98:	blt	1a3d0 <__assert_fail@plt+0x8fec>
   19f9c:	ldr	r3, [fp, #-1444]	; 0xfffffa5c
   19fa0:	ldr	r3, [r3, #36]	; 0x24
   19fa4:	str	r3, [fp, #-168]	; 0xffffff58
   19fa8:	ldr	r3, [fp, #-168]	; 0xffffff58
   19fac:	cmp	r3, #0
   19fb0:	blt	19fd0 <__assert_fail@plt+0x8bec>
   19fb4:	ldr	r3, [fp, #-168]	; 0xffffff58
   19fb8:	cmp	r3, #0
   19fbc:	bne	19fd8 <__assert_fail@plt+0x8bf4>
   19fc0:	ldr	r3, [fp, #-12]
   19fc4:	ldrb	r3, [r3]
   19fc8:	cmp	r3, #45	; 0x2d
   19fcc:	bne	19fd8 <__assert_fail@plt+0x8bf4>
   19fd0:	mov	r3, #1
   19fd4:	b	19fdc <__assert_fail@plt+0x8bf8>
   19fd8:	mov	r3, #0
   19fdc:	strb	r3, [fp, #-45]	; 0xffffffd3
   19fe0:	ldrb	r3, [fp, #-45]	; 0xffffffd3
   19fe4:	and	r3, r3, #1
   19fe8:	strb	r3, [fp, #-45]	; 0xffffffd3
   19fec:	ldr	r3, [fp, #-168]	; 0xffffff58
   19ff0:	ldr	r2, [pc, #1104]	; 1a448 <__assert_fail@plt+0x9064>
   19ff4:	smull	r1, r2, r2, r3
   19ff8:	add	r2, r2, r3
   19ffc:	asr	r2, r2, #11
   1a000:	asr	r3, r3, #31
   1a004:	sub	r3, r2, r3
   1a008:	str	r3, [fp, #-172]	; 0xffffff54
   1a00c:	ldr	r3, [fp, #-168]	; 0xffffff58
   1a010:	ldr	r2, [pc, #1076]	; 1a44c <__assert_fail@plt+0x9068>
   1a014:	smull	r1, r2, r2, r3
   1a018:	add	r2, r2, r3
   1a01c:	asr	r2, r2, #5
   1a020:	asr	r3, r3, #31
   1a024:	sub	r2, r2, r3
   1a028:	ldr	r3, [pc, #1052]	; 1a44c <__assert_fail@plt+0x9068>
   1a02c:	smull	r1, r3, r3, r2
   1a030:	add	r3, r3, r2
   1a034:	asr	r1, r3, #5
   1a038:	asr	r3, r2, #31
   1a03c:	sub	r1, r1, r3
   1a040:	mov	r3, r1
   1a044:	lsl	r3, r3, #4
   1a048:	sub	r3, r3, r1
   1a04c:	lsl	r3, r3, #2
   1a050:	sub	r3, r2, r3
   1a054:	str	r3, [fp, #-176]	; 0xffffff50
   1a058:	ldr	r2, [fp, #-168]	; 0xffffff58
   1a05c:	ldr	r3, [pc, #1000]	; 1a44c <__assert_fail@plt+0x9068>
   1a060:	smull	r1, r3, r3, r2
   1a064:	add	r3, r3, r2
   1a068:	asr	r1, r3, #5
   1a06c:	asr	r3, r2, #31
   1a070:	sub	r1, r1, r3
   1a074:	mov	r3, r1
   1a078:	lsl	r3, r3, #4
   1a07c:	sub	r3, r3, r1
   1a080:	lsl	r3, r3, #2
   1a084:	sub	r3, r2, r3
   1a088:	str	r3, [fp, #-180]	; 0xffffff4c
   1a08c:	ldr	r3, [fp, #-68]	; 0xffffffbc
   1a090:	cmp	r3, #3
   1a094:	ldrls	pc, [pc, r3, lsl #2]
   1a098:	b	1a240 <__assert_fail@plt+0x8e5c>
   1a09c:	andeq	sl, r1, ip, lsr #1
   1a0a0:	ldrdeq	sl, [r1], -ip
   1a0a4:	andeq	sl, r1, ip, lsl #2
   1a0a8:	andeq	sl, r1, r8, asr #2
   1a0ac:	mov	r3, #5
   1a0b0:	str	r3, [fp, #-36]	; 0xffffffdc
   1a0b4:	mov	r3, #0
   1a0b8:	str	r3, [fp, #-52]	; 0xffffffcc
   1a0bc:	ldr	r3, [fp, #-172]	; 0xffffff54
   1a0c0:	mov	r2, #100	; 0x64
   1a0c4:	mul	r2, r2, r3
   1a0c8:	ldr	r3, [fp, #-176]	; 0xffffff50
   1a0cc:	add	r3, r2, r3
   1a0d0:	str	r3, [fp, #-44]	; 0xffffffd4
   1a0d4:	b	18918 <__assert_fail@plt+0x7534>
   1a0d8:	nop			; (mov r0, r0)
   1a0dc:	mov	r3, #6
   1a0e0:	str	r3, [fp, #-36]	; 0xffffffdc
   1a0e4:	mov	r3, #4
   1a0e8:	str	r3, [fp, #-52]	; 0xffffffcc
   1a0ec:	ldr	r3, [fp, #-172]	; 0xffffff54
   1a0f0:	mov	r2, #100	; 0x64
   1a0f4:	mul	r2, r2, r3
   1a0f8:	ldr	r3, [fp, #-176]	; 0xffffff50
   1a0fc:	add	r3, r2, r3
   1a100:	str	r3, [fp, #-44]	; 0xffffffd4
   1a104:	b	18918 <__assert_fail@plt+0x7534>
   1a108:	nop			; (mov r0, r0)
   1a10c:	mov	r3, #9
   1a110:	str	r3, [fp, #-36]	; 0xffffffdc
   1a114:	mov	r3, #20
   1a118:	str	r3, [fp, #-52]	; 0xffffffcc
   1a11c:	ldr	r3, [fp, #-172]	; 0xffffff54
   1a120:	ldr	r2, [pc, #808]	; 1a450 <__assert_fail@plt+0x906c>
   1a124:	mul	r2, r2, r3
   1a128:	ldr	r3, [fp, #-176]	; 0xffffff50
   1a12c:	mov	r1, #100	; 0x64
   1a130:	mul	r3, r1, r3
   1a134:	add	r2, r2, r3
   1a138:	ldr	r3, [fp, #-180]	; 0xffffff4c
   1a13c:	add	r3, r2, r3
   1a140:	str	r3, [fp, #-44]	; 0xffffffd4
   1a144:	b	18918 <__assert_fail@plt+0x7534>
   1a148:	ldr	r3, [fp, #-180]	; 0xffffff4c
   1a14c:	cmp	r3, #0
   1a150:	bne	1a108 <__assert_fail@plt+0x8d24>
   1a154:	ldr	r3, [fp, #-176]	; 0xffffff50
   1a158:	cmp	r3, #0
   1a15c:	bne	1a0d8 <__assert_fail@plt+0x8cf4>
   1a160:	mov	r3, #3
   1a164:	str	r3, [fp, #-36]	; 0xffffffdc
   1a168:	mov	r3, #0
   1a16c:	str	r3, [fp, #-52]	; 0xffffffcc
   1a170:	ldr	r3, [fp, #-172]	; 0xffffff54
   1a174:	str	r3, [fp, #-44]	; 0xffffffd4
   1a178:	b	18918 <__assert_fail@plt+0x7534>
   1a17c:	nop			; (mov r0, r0)
   1a180:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1a184:	sub	r3, r3, #1
   1a188:	str	r3, [fp, #-24]	; 0xffffffe8
   1a18c:	b	1a244 <__assert_fail@plt+0x8e60>
   1a190:	nop			; (mov r0, r0)
   1a194:	b	1a244 <__assert_fail@plt+0x8e60>
   1a198:	nop			; (mov r0, r0)
   1a19c:	b	1a244 <__assert_fail@plt+0x8e60>
   1a1a0:	nop			; (mov r0, r0)
   1a1a4:	b	1a244 <__assert_fail@plt+0x8e60>
   1a1a8:	nop			; (mov r0, r0)
   1a1ac:	b	1a244 <__assert_fail@plt+0x8e60>
   1a1b0:	nop			; (mov r0, r0)
   1a1b4:	b	1a244 <__assert_fail@plt+0x8e60>
   1a1b8:	nop			; (mov r0, r0)
   1a1bc:	b	1a244 <__assert_fail@plt+0x8e60>
   1a1c0:	nop			; (mov r0, r0)
   1a1c4:	b	1a244 <__assert_fail@plt+0x8e60>
   1a1c8:	nop			; (mov r0, r0)
   1a1cc:	b	1a244 <__assert_fail@plt+0x8e60>
   1a1d0:	nop			; (mov r0, r0)
   1a1d4:	b	1a244 <__assert_fail@plt+0x8e60>
   1a1d8:	nop			; (mov r0, r0)
   1a1dc:	b	1a244 <__assert_fail@plt+0x8e60>
   1a1e0:	nop			; (mov r0, r0)
   1a1e4:	b	1a244 <__assert_fail@plt+0x8e60>
   1a1e8:	nop			; (mov r0, r0)
   1a1ec:	b	1a244 <__assert_fail@plt+0x8e60>
   1a1f0:	nop			; (mov r0, r0)
   1a1f4:	b	1a244 <__assert_fail@plt+0x8e60>
   1a1f8:	nop			; (mov r0, r0)
   1a1fc:	b	1a244 <__assert_fail@plt+0x8e60>
   1a200:	nop			; (mov r0, r0)
   1a204:	b	1a244 <__assert_fail@plt+0x8e60>
   1a208:	nop			; (mov r0, r0)
   1a20c:	b	1a244 <__assert_fail@plt+0x8e60>
   1a210:	nop			; (mov r0, r0)
   1a214:	b	1a244 <__assert_fail@plt+0x8e60>
   1a218:	nop			; (mov r0, r0)
   1a21c:	b	1a244 <__assert_fail@plt+0x8e60>
   1a220:	nop			; (mov r0, r0)
   1a224:	b	1a244 <__assert_fail@plt+0x8e60>
   1a228:	nop			; (mov r0, r0)
   1a22c:	b	1a244 <__assert_fail@plt+0x8e60>
   1a230:	nop			; (mov r0, r0)
   1a234:	b	1a244 <__assert_fail@plt+0x8e60>
   1a238:	nop			; (mov r0, r0)
   1a23c:	b	1a244 <__assert_fail@plt+0x8e60>
   1a240:	nop			; (mov r0, r0)
   1a244:	ldr	r2, [fp, #-24]	; 0xffffffe8
   1a248:	ldr	r3, [fp, #-120]	; 0xffffff88
   1a24c:	sub	r3, r2, r3
   1a250:	add	r3, r3, #1
   1a254:	str	r3, [fp, #-352]	; 0xfffffea0
   1a258:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1a25c:	cmp	r3, #45	; 0x2d
   1a260:	beq	1a278 <__assert_fail@plt+0x8e94>
   1a264:	ldr	r3, [fp, #12]
   1a268:	cmp	r3, #0
   1a26c:	blt	1a278 <__assert_fail@plt+0x8e94>
   1a270:	ldr	r3, [fp, #12]
   1a274:	b	1a27c <__assert_fail@plt+0x8e98>
   1a278:	mov	r3, #0
   1a27c:	str	r3, [fp, #-356]	; 0xfffffe9c
   1a280:	ldr	r2, [fp, #-352]	; 0xfffffea0
   1a284:	ldr	r3, [fp, #-356]	; 0xfffffe9c
   1a288:	cmp	r2, r3
   1a28c:	movcs	r3, r2
   1a290:	movcc	r3, r3
   1a294:	str	r3, [fp, #-360]	; 0xfffffe98
   1a298:	ldr	r2, [fp, #-1436]	; 0xfffffa64
   1a29c:	ldr	r3, [fp, #-16]
   1a2a0:	sub	r2, r2, r3
   1a2a4:	ldr	r3, [fp, #-360]	; 0xfffffe98
   1a2a8:	cmp	r2, r3
   1a2ac:	bhi	1a2c8 <__assert_fail@plt+0x8ee4>
   1a2b0:	bl	112d0 <__errno_location@plt>
   1a2b4:	mov	r2, r0
   1a2b8:	mov	r3, #34	; 0x22
   1a2bc:	str	r3, [r2]
   1a2c0:	mov	r3, #0
   1a2c4:	b	1a430 <__assert_fail@plt+0x904c>
   1a2c8:	ldr	r3, [fp, #-20]	; 0xffffffec
   1a2cc:	cmp	r3, #0
   1a2d0:	beq	1a3b0 <__assert_fail@plt+0x8fcc>
   1a2d4:	ldr	r2, [fp, #-352]	; 0xfffffea0
   1a2d8:	ldr	r3, [fp, #-356]	; 0xfffffe9c
   1a2dc:	cmp	r2, r3
   1a2e0:	bcs	1a350 <__assert_fail@plt+0x8f6c>
   1a2e4:	ldr	r2, [fp, #-356]	; 0xfffffe9c
   1a2e8:	ldr	r3, [fp, #-352]	; 0xfffffea0
   1a2ec:	sub	r3, r2, r3
   1a2f0:	str	r3, [fp, #-364]	; 0xfffffe94
   1a2f4:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1a2f8:	cmp	r3, #48	; 0x30
   1a2fc:	beq	1a30c <__assert_fail@plt+0x8f28>
   1a300:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1a304:	cmp	r3, #43	; 0x2b
   1a308:	bne	1a330 <__assert_fail@plt+0x8f4c>
   1a30c:	ldr	r2, [fp, #-364]	; 0xfffffe94
   1a310:	mov	r1, #48	; 0x30
   1a314:	ldr	r0, [fp, #-20]	; 0xffffffec
   1a318:	bl	112e8 <memset@plt>
   1a31c:	ldr	r2, [fp, #-20]	; 0xffffffec
   1a320:	ldr	r3, [fp, #-364]	; 0xfffffe94
   1a324:	add	r3, r2, r3
   1a328:	str	r3, [fp, #-20]	; 0xffffffec
   1a32c:	b	1a350 <__assert_fail@plt+0x8f6c>
   1a330:	ldr	r2, [fp, #-364]	; 0xfffffe94
   1a334:	mov	r1, #32
   1a338:	ldr	r0, [fp, #-20]	; 0xffffffec
   1a33c:	bl	112e8 <memset@plt>
   1a340:	ldr	r2, [fp, #-20]	; 0xffffffec
   1a344:	ldr	r3, [fp, #-364]	; 0xfffffe94
   1a348:	add	r3, r2, r3
   1a34c:	str	r3, [fp, #-20]	; 0xffffffec
   1a350:	ldrb	r3, [fp, #-61]	; 0xffffffc3
   1a354:	cmp	r3, #0
   1a358:	beq	1a370 <__assert_fail@plt+0x8f8c>
   1a35c:	ldr	r2, [fp, #-352]	; 0xfffffea0
   1a360:	ldr	r1, [fp, #-120]	; 0xffffff88
   1a364:	ldr	r0, [fp, #-20]	; 0xffffffec
   1a368:	bl	1783c <__assert_fail@plt+0x6458>
   1a36c:	b	1a3a0 <__assert_fail@plt+0x8fbc>
   1a370:	ldrb	r3, [fp, #-62]	; 0xffffffc2
   1a374:	cmp	r3, #0
   1a378:	beq	1a390 <__assert_fail@plt+0x8fac>
   1a37c:	ldr	r2, [fp, #-352]	; 0xfffffea0
   1a380:	ldr	r1, [fp, #-120]	; 0xffffff88
   1a384:	ldr	r0, [fp, #-20]	; 0xffffffec
   1a388:	bl	178ac <__assert_fail@plt+0x64c8>
   1a38c:	b	1a3a0 <__assert_fail@plt+0x8fbc>
   1a390:	ldr	r2, [fp, #-352]	; 0xfffffea0
   1a394:	ldr	r1, [fp, #-120]	; 0xffffff88
   1a398:	ldr	r0, [fp, #-20]	; 0xffffffec
   1a39c:	bl	1112c <memcpy@plt>
   1a3a0:	ldr	r2, [fp, #-20]	; 0xffffffec
   1a3a4:	ldr	r3, [fp, #-352]	; 0xfffffea0
   1a3a8:	add	r3, r2, r3
   1a3ac:	str	r3, [fp, #-20]	; 0xffffffec
   1a3b0:	ldr	r2, [fp, #-16]
   1a3b4:	ldr	r3, [fp, #-360]	; 0xfffffe98
   1a3b8:	add	r3, r2, r3
   1a3bc:	str	r3, [fp, #-16]
   1a3c0:	nop			; (mov r0, r0)
   1a3c4:	b	1a3d4 <__assert_fail@plt+0x8ff0>
   1a3c8:	nop			; (mov r0, r0)
   1a3cc:	b	1a3d4 <__assert_fail@plt+0x8ff0>
   1a3d0:	nop			; (mov r0, r0)
   1a3d4:	mvn	r3, #0
   1a3d8:	str	r3, [fp, #12]
   1a3dc:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1a3e0:	add	r3, r3, #1
   1a3e4:	str	r3, [fp, #-24]	; 0xffffffe8
   1a3e8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1a3ec:	ldrb	r3, [r3]
   1a3f0:	cmp	r3, #0
   1a3f4:	bne	17ac4 <__assert_fail@plt+0x66e0>
   1a3f8:	ldr	r3, [fp, #-20]	; 0xffffffec
   1a3fc:	cmp	r3, #0
   1a400:	beq	1a41c <__assert_fail@plt+0x9038>
   1a404:	ldr	r3, [fp, #-1436]	; 0xfffffa64
   1a408:	cmp	r3, #0
   1a40c:	beq	1a41c <__assert_fail@plt+0x9038>
   1a410:	ldr	r3, [fp, #-20]	; 0xffffffec
   1a414:	mov	r2, #0
   1a418:	strb	r2, [r3]
   1a41c:	bl	112d0 <__errno_location@plt>
   1a420:	mov	r2, r0
   1a424:	ldr	r3, [fp, #-116]	; 0xffffff8c
   1a428:	str	r3, [r2]
   1a42c:	ldr	r3, [fp, #-16]
   1a430:	mov	r0, r3
   1a434:	sub	sp, fp, #4
   1a438:	pop	{fp, pc}
   1a43c:	mvnpl	r8, pc, lsl r5
   1a440:			; <UNDEFINED> instruction: 0xfffff894
   1a444:	subls	r2, r9, #-1828716544	; 0x93000000
   1a448:			; <UNDEFINED> instruction: 0x91a2b3c5
   1a44c:	stmhi	r8, {r0, r3, r7, fp, pc}
   1a450:	andeq	r2, r0, r0, lsl r7
   1a454:	push	{fp, lr}
   1a458:	add	fp, sp, #4
   1a45c:	sub	sp, sp, #16
   1a460:	str	r0, [fp, #-16]
   1a464:	ldr	r3, [fp, #-16]
   1a468:	cmp	r3, #0
   1a46c:	bne	1a48c <__assert_fail@plt+0x90a8>
   1a470:	ldr	r3, [pc, #220]	; 1a554 <__assert_fail@plt+0x9170>
   1a474:	ldr	r3, [r3]
   1a478:	mov	r2, #55	; 0x37
   1a47c:	mov	r1, #1
   1a480:	ldr	r0, [pc, #208]	; 1a558 <__assert_fail@plt+0x9174>
   1a484:	bl	111c8 <fwrite@plt>
   1a488:	bl	113c0 <abort@plt>
   1a48c:	mov	r1, #47	; 0x2f
   1a490:	ldr	r0, [fp, #-16]
   1a494:	bl	11354 <strrchr@plt>
   1a498:	str	r0, [fp, #-8]
   1a49c:	ldr	r3, [fp, #-8]
   1a4a0:	cmp	r3, #0
   1a4a4:	beq	1a4b4 <__assert_fail@plt+0x90d0>
   1a4a8:	ldr	r3, [fp, #-8]
   1a4ac:	add	r3, r3, #1
   1a4b0:	b	1a4b8 <__assert_fail@plt+0x90d4>
   1a4b4:	ldr	r3, [fp, #-16]
   1a4b8:	str	r3, [fp, #-12]
   1a4bc:	ldr	r2, [fp, #-12]
   1a4c0:	ldr	r3, [fp, #-16]
   1a4c4:	sub	r3, r2, r3
   1a4c8:	cmp	r3, #6
   1a4cc:	ble	1a530 <__assert_fail@plt+0x914c>
   1a4d0:	ldr	r3, [fp, #-12]
   1a4d4:	sub	r3, r3, #7
   1a4d8:	mov	r2, #7
   1a4dc:	ldr	r1, [pc, #120]	; 1a55c <__assert_fail@plt+0x9178>
   1a4e0:	mov	r0, r3
   1a4e4:	bl	113b4 <strncmp@plt>
   1a4e8:	mov	r3, r0
   1a4ec:	cmp	r3, #0
   1a4f0:	bne	1a530 <__assert_fail@plt+0x914c>
   1a4f4:	ldr	r3, [fp, #-12]
   1a4f8:	str	r3, [fp, #-16]
   1a4fc:	mov	r2, #3
   1a500:	ldr	r1, [pc, #88]	; 1a560 <__assert_fail@plt+0x917c>
   1a504:	ldr	r0, [fp, #-12]
   1a508:	bl	113b4 <strncmp@plt>
   1a50c:	mov	r3, r0
   1a510:	cmp	r3, #0
   1a514:	bne	1a530 <__assert_fail@plt+0x914c>
   1a518:	ldr	r3, [fp, #-12]
   1a51c:	add	r3, r3, #3
   1a520:	str	r3, [fp, #-16]
   1a524:	ldr	r2, [pc, #56]	; 1a564 <__assert_fail@plt+0x9180>
   1a528:	ldr	r3, [fp, #-16]
   1a52c:	str	r3, [r2]
   1a530:	ldr	r2, [pc, #48]	; 1a568 <__assert_fail@plt+0x9184>
   1a534:	ldr	r3, [fp, #-16]
   1a538:	str	r3, [r2]
   1a53c:	ldr	r2, [pc, #40]	; 1a56c <__assert_fail@plt+0x9188>
   1a540:	ldr	r3, [fp, #-16]
   1a544:	str	r3, [r2]
   1a548:	nop			; (mov r0, r0)
   1a54c:	sub	sp, fp, #4
   1a550:	pop	{fp, pc}
   1a554:	andeq	r4, r3, r0, ror #3
   1a558:	andeq	r3, r2, r4, lsl #11
   1a55c:			; <UNDEFINED> instruction: 0x000235bc
   1a560:	andeq	r3, r2, r4, asr #11
   1a564:	ldrdeq	r4, [r3], -r0
   1a568:			; <UNDEFINED> instruction: 0x000342b4
   1a56c:	ldrdeq	r4, [r3], -r4	; <UNPREDICTABLE>
   1a570:	push	{fp, lr}
   1a574:	add	fp, sp, #4
   1a578:	sub	sp, sp, #16
   1a57c:	str	r0, [fp, #-16]
   1a580:	bl	112d0 <__errno_location@plt>
   1a584:	mov	r3, r0
   1a588:	ldr	r3, [r3]
   1a58c:	str	r3, [fp, #-8]
   1a590:	ldr	r3, [fp, #-16]
   1a594:	cmp	r3, #0
   1a598:	beq	1a5a4 <__assert_fail@plt+0x91c0>
   1a59c:	ldr	r3, [fp, #-16]
   1a5a0:	b	1a5a8 <__assert_fail@plt+0x91c4>
   1a5a4:	ldr	r3, [pc, #48]	; 1a5dc <__assert_fail@plt+0x91f8>
   1a5a8:	mov	r1, #48	; 0x30
   1a5ac:	mov	r0, r3
   1a5b0:	bl	1e900 <__assert_fail@plt+0xd51c>
   1a5b4:	mov	r3, r0
   1a5b8:	str	r3, [fp, #-12]
   1a5bc:	bl	112d0 <__errno_location@plt>
   1a5c0:	mov	r2, r0
   1a5c4:	ldr	r3, [fp, #-8]
   1a5c8:	str	r3, [r2]
   1a5cc:	ldr	r3, [fp, #-12]
   1a5d0:	mov	r0, r3
   1a5d4:	sub	sp, fp, #4
   1a5d8:	pop	{fp, pc}
   1a5dc:			; <UNDEFINED> instruction: 0x000342b8
   1a5e0:	push	{fp}		; (str fp, [sp, #-4]!)
   1a5e4:	add	fp, sp, #0
   1a5e8:	sub	sp, sp, #12
   1a5ec:	str	r0, [fp, #-8]
   1a5f0:	ldr	r3, [fp, #-8]
   1a5f4:	cmp	r3, #0
   1a5f8:	beq	1a604 <__assert_fail@plt+0x9220>
   1a5fc:	ldr	r3, [fp, #-8]
   1a600:	b	1a608 <__assert_fail@plt+0x9224>
   1a604:	ldr	r3, [pc, #16]	; 1a61c <__assert_fail@plt+0x9238>
   1a608:	ldr	r3, [r3]
   1a60c:	mov	r0, r3
   1a610:	add	sp, fp, #0
   1a614:	pop	{fp}		; (ldr fp, [sp], #4)
   1a618:	bx	lr
   1a61c:			; <UNDEFINED> instruction: 0x000342b8
   1a620:	push	{fp}		; (str fp, [sp, #-4]!)
   1a624:	add	fp, sp, #0
   1a628:	sub	sp, sp, #12
   1a62c:	str	r0, [fp, #-8]
   1a630:	str	r1, [fp, #-12]
   1a634:	ldr	r3, [fp, #-8]
   1a638:	cmp	r3, #0
   1a63c:	beq	1a648 <__assert_fail@plt+0x9264>
   1a640:	ldr	r3, [fp, #-8]
   1a644:	b	1a64c <__assert_fail@plt+0x9268>
   1a648:	ldr	r3, [pc, #20]	; 1a664 <__assert_fail@plt+0x9280>
   1a64c:	ldr	r2, [fp, #-12]
   1a650:	str	r2, [r3]
   1a654:	nop			; (mov r0, r0)
   1a658:	add	sp, fp, #0
   1a65c:	pop	{fp}		; (ldr fp, [sp], #4)
   1a660:	bx	lr
   1a664:			; <UNDEFINED> instruction: 0x000342b8
   1a668:	push	{fp}		; (str fp, [sp, #-4]!)
   1a66c:	add	fp, sp, #0
   1a670:	sub	sp, sp, #36	; 0x24
   1a674:	str	r0, [fp, #-24]	; 0xffffffe8
   1a678:	mov	r3, r1
   1a67c:	str	r2, [fp, #-32]	; 0xffffffe0
   1a680:	strb	r3, [fp, #-25]	; 0xffffffe7
   1a684:	ldrb	r3, [fp, #-25]	; 0xffffffe7
   1a688:	strb	r3, [fp, #-5]
   1a68c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1a690:	cmp	r3, #0
   1a694:	beq	1a6a0 <__assert_fail@plt+0x92bc>
   1a698:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1a69c:	b	1a6a4 <__assert_fail@plt+0x92c0>
   1a6a0:	ldr	r3, [pc, #124]	; 1a724 <__assert_fail@plt+0x9340>
   1a6a4:	add	r2, r3, #8
   1a6a8:	ldrb	r3, [fp, #-5]
   1a6ac:	lsr	r3, r3, #5
   1a6b0:	uxtb	r3, r3
   1a6b4:	lsl	r3, r3, #2
   1a6b8:	add	r3, r2, r3
   1a6bc:	str	r3, [fp, #-12]
   1a6c0:	ldrb	r3, [fp, #-5]
   1a6c4:	and	r3, r3, #31
   1a6c8:	str	r3, [fp, #-16]
   1a6cc:	ldr	r3, [fp, #-12]
   1a6d0:	ldr	r2, [r3]
   1a6d4:	ldr	r3, [fp, #-16]
   1a6d8:	lsr	r3, r2, r3
   1a6dc:	and	r3, r3, #1
   1a6e0:	str	r3, [fp, #-20]	; 0xffffffec
   1a6e4:	ldr	r3, [fp, #-12]
   1a6e8:	ldr	r3, [r3]
   1a6ec:	ldr	r2, [fp, #-32]	; 0xffffffe0
   1a6f0:	and	r1, r2, #1
   1a6f4:	ldr	r2, [fp, #-20]	; 0xffffffec
   1a6f8:	eor	r1, r1, r2
   1a6fc:	ldr	r2, [fp, #-16]
   1a700:	lsl	r2, r1, r2
   1a704:	eor	r2, r2, r3
   1a708:	ldr	r3, [fp, #-12]
   1a70c:	str	r2, [r3]
   1a710:	ldr	r3, [fp, #-20]	; 0xffffffec
   1a714:	mov	r0, r3
   1a718:	add	sp, fp, #0
   1a71c:	pop	{fp}		; (ldr fp, [sp], #4)
   1a720:	bx	lr
   1a724:			; <UNDEFINED> instruction: 0x000342b8
   1a728:	push	{fp}		; (str fp, [sp, #-4]!)
   1a72c:	add	fp, sp, #0
   1a730:	sub	sp, sp, #20
   1a734:	str	r0, [fp, #-16]
   1a738:	str	r1, [fp, #-20]	; 0xffffffec
   1a73c:	ldr	r3, [fp, #-16]
   1a740:	cmp	r3, #0
   1a744:	bne	1a750 <__assert_fail@plt+0x936c>
   1a748:	ldr	r3, [pc, #44]	; 1a77c <__assert_fail@plt+0x9398>
   1a74c:	str	r3, [fp, #-16]
   1a750:	ldr	r3, [fp, #-16]
   1a754:	ldr	r3, [r3, #4]
   1a758:	str	r3, [fp, #-8]
   1a75c:	ldr	r3, [fp, #-16]
   1a760:	ldr	r2, [fp, #-20]	; 0xffffffec
   1a764:	str	r2, [r3, #4]
   1a768:	ldr	r3, [fp, #-8]
   1a76c:	mov	r0, r3
   1a770:	add	sp, fp, #0
   1a774:	pop	{fp}		; (ldr fp, [sp], #4)
   1a778:	bx	lr
   1a77c:			; <UNDEFINED> instruction: 0x000342b8
   1a780:	push	{fp, lr}
   1a784:	add	fp, sp, #4
   1a788:	sub	sp, sp, #16
   1a78c:	str	r0, [fp, #-8]
   1a790:	str	r1, [fp, #-12]
   1a794:	str	r2, [fp, #-16]
   1a798:	ldr	r3, [fp, #-8]
   1a79c:	cmp	r3, #0
   1a7a0:	bne	1a7ac <__assert_fail@plt+0x93c8>
   1a7a4:	ldr	r3, [pc, #76]	; 1a7f8 <__assert_fail@plt+0x9414>
   1a7a8:	str	r3, [fp, #-8]
   1a7ac:	ldr	r3, [fp, #-8]
   1a7b0:	mov	r2, #10
   1a7b4:	str	r2, [r3]
   1a7b8:	ldr	r3, [fp, #-12]
   1a7bc:	cmp	r3, #0
   1a7c0:	beq	1a7d0 <__assert_fail@plt+0x93ec>
   1a7c4:	ldr	r3, [fp, #-16]
   1a7c8:	cmp	r3, #0
   1a7cc:	bne	1a7d4 <__assert_fail@plt+0x93f0>
   1a7d0:	bl	113c0 <abort@plt>
   1a7d4:	ldr	r3, [fp, #-8]
   1a7d8:	ldr	r2, [fp, #-12]
   1a7dc:	str	r2, [r3, #40]	; 0x28
   1a7e0:	ldr	r3, [fp, #-8]
   1a7e4:	ldr	r2, [fp, #-16]
   1a7e8:	str	r2, [r3, #44]	; 0x2c
   1a7ec:	nop			; (mov r0, r0)
   1a7f0:	sub	sp, fp, #4
   1a7f4:	pop	{fp, pc}
   1a7f8:			; <UNDEFINED> instruction: 0x000342b8
   1a7fc:	push	{fp, lr}
   1a800:	add	fp, sp, #4
   1a804:	sub	sp, sp, #56	; 0x38
   1a808:	str	r0, [fp, #-56]	; 0xffffffc8
   1a80c:	str	r1, [fp, #-60]	; 0xffffffc4
   1a810:	sub	r3, fp, #52	; 0x34
   1a814:	mov	r2, #48	; 0x30
   1a818:	mov	r1, #0
   1a81c:	mov	r0, r3
   1a820:	bl	112e8 <memset@plt>
   1a824:	ldr	r3, [fp, #-60]	; 0xffffffc4
   1a828:	cmp	r3, #10
   1a82c:	bne	1a834 <__assert_fail@plt+0x9450>
   1a830:	bl	113c0 <abort@plt>
   1a834:	ldr	r3, [fp, #-60]	; 0xffffffc4
   1a838:	str	r3, [fp, #-52]	; 0xffffffcc
   1a83c:	ldr	r3, [fp, #-56]	; 0xffffffc8
   1a840:	mov	lr, r3
   1a844:	sub	ip, fp, #52	; 0x34
   1a848:	ldm	ip!, {r0, r1, r2, r3}
   1a84c:	stmia	lr!, {r0, r1, r2, r3}
   1a850:	ldm	ip!, {r0, r1, r2, r3}
   1a854:	stmia	lr!, {r0, r1, r2, r3}
   1a858:	ldm	ip, {r0, r1, r2, r3}
   1a85c:	stm	lr, {r0, r1, r2, r3}
   1a860:	ldr	r0, [fp, #-56]	; 0xffffffc8
   1a864:	sub	sp, fp, #4
   1a868:	pop	{fp, pc}
   1a86c:	push	{fp, lr}
   1a870:	add	fp, sp, #4
   1a874:	sub	sp, sp, #16
   1a878:	str	r0, [fp, #-16]
   1a87c:	str	r1, [fp, #-20]	; 0xffffffec
   1a880:	ldr	r0, [fp, #-16]
   1a884:	bl	11288 <gettext@plt>
   1a888:	str	r0, [fp, #-8]
   1a88c:	ldr	r2, [fp, #-8]
   1a890:	ldr	r3, [fp, #-16]
   1a894:	cmp	r2, r3
   1a898:	beq	1a8a4 <__assert_fail@plt+0x94c0>
   1a89c:	ldr	r3, [fp, #-8]
   1a8a0:	b	1a934 <__assert_fail@plt+0x9550>
   1a8a4:	bl	20f64 <__assert_fail@plt+0xfb80>
   1a8a8:	str	r0, [fp, #-12]
   1a8ac:	ldr	r1, [pc, #140]	; 1a940 <__assert_fail@plt+0x955c>
   1a8b0:	ldr	r0, [fp, #-12]
   1a8b4:	bl	20938 <__assert_fail@plt+0xf554>
   1a8b8:	mov	r3, r0
   1a8bc:	cmp	r3, #0
   1a8c0:	bne	1a8e4 <__assert_fail@plt+0x9500>
   1a8c4:	ldr	r3, [fp, #-16]
   1a8c8:	ldrb	r3, [r3]
   1a8cc:	cmp	r3, #96	; 0x60
   1a8d0:	bne	1a8dc <__assert_fail@plt+0x94f8>
   1a8d4:	ldr	r3, [pc, #104]	; 1a944 <__assert_fail@plt+0x9560>
   1a8d8:	b	1a934 <__assert_fail@plt+0x9550>
   1a8dc:	ldr	r3, [pc, #100]	; 1a948 <__assert_fail@plt+0x9564>
   1a8e0:	b	1a934 <__assert_fail@plt+0x9550>
   1a8e4:	ldr	r1, [pc, #96]	; 1a94c <__assert_fail@plt+0x9568>
   1a8e8:	ldr	r0, [fp, #-12]
   1a8ec:	bl	20938 <__assert_fail@plt+0xf554>
   1a8f0:	mov	r3, r0
   1a8f4:	cmp	r3, #0
   1a8f8:	bne	1a91c <__assert_fail@plt+0x9538>
   1a8fc:	ldr	r3, [fp, #-16]
   1a900:	ldrb	r3, [r3]
   1a904:	cmp	r3, #96	; 0x60
   1a908:	bne	1a914 <__assert_fail@plt+0x9530>
   1a90c:	ldr	r3, [pc, #60]	; 1a950 <__assert_fail@plt+0x956c>
   1a910:	b	1a934 <__assert_fail@plt+0x9550>
   1a914:	ldr	r3, [pc, #56]	; 1a954 <__assert_fail@plt+0x9570>
   1a918:	b	1a934 <__assert_fail@plt+0x9550>
   1a91c:	ldr	r3, [fp, #-20]	; 0xffffffec
   1a920:	cmp	r3, #9
   1a924:	bne	1a930 <__assert_fail@plt+0x954c>
   1a928:	ldr	r3, [pc, #40]	; 1a958 <__assert_fail@plt+0x9574>
   1a92c:	b	1a934 <__assert_fail@plt+0x9550>
   1a930:	ldr	r3, [pc, #36]	; 1a95c <__assert_fail@plt+0x9578>
   1a934:	mov	r0, r3
   1a938:	sub	sp, fp, #4
   1a93c:	pop	{fp, pc}
   1a940:	andeq	r3, r2, r4, lsl #13
   1a944:	andeq	r3, r2, ip, lsl #13
   1a948:	muleq	r2, r0, r6
   1a94c:	muleq	r2, r4, r6
   1a950:	muleq	r2, ip, r6
   1a954:	andeq	r3, r2, r0, lsr #13
   1a958:	andeq	r3, r2, r4, lsr #13
   1a95c:	andeq	r3, r2, r8, lsr #13
   1a960:	push	{r4, fp, lr}
   1a964:	add	fp, sp, #8
   1a968:	sub	sp, sp, #116	; 0x74
   1a96c:	str	r0, [fp, #-88]	; 0xffffffa8
   1a970:	str	r1, [fp, #-92]	; 0xffffffa4
   1a974:	str	r2, [fp, #-96]	; 0xffffffa0
   1a978:	str	r3, [fp, #-100]	; 0xffffff9c
   1a97c:	mov	r3, #0
   1a980:	str	r3, [fp, #-20]	; 0xffffffec
   1a984:	mov	r3, #0
   1a988:	str	r3, [fp, #-24]	; 0xffffffe8
   1a98c:	mov	r3, #0
   1a990:	str	r3, [fp, #-28]	; 0xffffffe4
   1a994:	mov	r3, #0
   1a998:	str	r3, [fp, #-32]	; 0xffffffe0
   1a99c:	mov	r3, #0
   1a9a0:	strb	r3, [fp, #-33]	; 0xffffffdf
   1a9a4:	bl	111e0 <__ctype_get_mb_cur_max@plt>
   1a9a8:	mov	r3, r0
   1a9ac:	cmp	r3, #1
   1a9b0:	moveq	r3, #1
   1a9b4:	movne	r3, #0
   1a9b8:	strb	r3, [fp, #-57]	; 0xffffffc7
   1a9bc:	ldr	r3, [fp, #8]
   1a9c0:	and	r3, r3, #2
   1a9c4:	cmp	r3, #0
   1a9c8:	movne	r3, #1
   1a9cc:	moveq	r3, #0
   1a9d0:	strb	r3, [fp, #-34]	; 0xffffffde
   1a9d4:	mov	r3, #0
   1a9d8:	strb	r3, [fp, #-35]	; 0xffffffdd
   1a9dc:	mov	r3, #0
   1a9e0:	strb	r3, [fp, #-36]	; 0xffffffdc
   1a9e4:	mov	r3, #1
   1a9e8:	strb	r3, [fp, #-37]	; 0xffffffdb
   1a9ec:	ldr	r3, [fp, #4]
   1a9f0:	cmp	r3, #10
   1a9f4:	ldrls	pc, [pc, r3, lsl #2]
   1a9f8:	b	1ac00 <__assert_fail@plt+0x981c>
   1a9fc:	strdeq	sl, [r1], -r4
   1aa00:	andeq	sl, r1, r0, ror fp
   1aa04:	muleq	r1, r4, fp
   1aa08:	andeq	sl, r1, r8, ror #22
   1aa0c:	andeq	sl, r1, r8, ror fp
   1aa10:	andeq	sl, r1, r8, lsr sl
   1aa14:	andeq	sl, r1, r8, lsr #20
   1aa18:	muleq	r1, r8, sl
   1aa1c:	andeq	sl, r1, ip, lsr #21
   1aa20:	andeq	sl, r1, ip, lsr #21
   1aa24:	andeq	sl, r1, ip, lsr #21
   1aa28:	mov	r3, #5
   1aa2c:	str	r3, [fp, #4]
   1aa30:	mov	r3, #1
   1aa34:	strb	r3, [fp, #-34]	; 0xffffffde
   1aa38:	ldrb	r3, [fp, #-34]	; 0xffffffde
   1aa3c:	eor	r3, r3, #1
   1aa40:	uxtb	r3, r3
   1aa44:	cmp	r3, #0
   1aa48:	beq	1aa7c <__assert_fail@plt+0x9698>
   1aa4c:	ldr	r2, [fp, #-20]	; 0xffffffec
   1aa50:	ldr	r3, [fp, #-92]	; 0xffffffa4
   1aa54:	cmp	r2, r3
   1aa58:	bcs	1aa70 <__assert_fail@plt+0x968c>
   1aa5c:	ldr	r2, [fp, #-88]	; 0xffffffa8
   1aa60:	ldr	r3, [fp, #-20]	; 0xffffffec
   1aa64:	add	r3, r2, r3
   1aa68:	mov	r2, #34	; 0x22
   1aa6c:	strb	r2, [r3]
   1aa70:	ldr	r3, [fp, #-20]	; 0xffffffec
   1aa74:	add	r3, r3, #1
   1aa78:	str	r3, [fp, #-20]	; 0xffffffec
   1aa7c:	mov	r3, #1
   1aa80:	strb	r3, [fp, #-33]	; 0xffffffdf
   1aa84:	ldr	r3, [pc, #3872]	; 1b9ac <__assert_fail@plt+0xa5c8>
   1aa88:	str	r3, [fp, #-28]	; 0xffffffe4
   1aa8c:	mov	r3, #1
   1aa90:	str	r3, [fp, #-32]	; 0xffffffe0
   1aa94:	b	1ac04 <__assert_fail@plt+0x9820>
   1aa98:	mov	r3, #1
   1aa9c:	strb	r3, [fp, #-33]	; 0xffffffdf
   1aaa0:	mov	r3, #0
   1aaa4:	strb	r3, [fp, #-34]	; 0xffffffde
   1aaa8:	b	1ac04 <__assert_fail@plt+0x9820>
   1aaac:	ldr	r3, [fp, #4]
   1aab0:	cmp	r3, #10
   1aab4:	beq	1aad8 <__assert_fail@plt+0x96f4>
   1aab8:	ldr	r1, [fp, #4]
   1aabc:	ldr	r0, [pc, #3820]	; 1b9b0 <__assert_fail@plt+0xa5cc>
   1aac0:	bl	1a86c <__assert_fail@plt+0x9488>
   1aac4:	str	r0, [fp, #16]
   1aac8:	ldr	r1, [fp, #4]
   1aacc:	ldr	r0, [pc, #3808]	; 1b9b4 <__assert_fail@plt+0xa5d0>
   1aad0:	bl	1a86c <__assert_fail@plt+0x9488>
   1aad4:	str	r0, [fp, #20]
   1aad8:	ldrb	r3, [fp, #-34]	; 0xffffffde
   1aadc:	eor	r3, r3, #1
   1aae0:	uxtb	r3, r3
   1aae4:	cmp	r3, #0
   1aae8:	beq	1ab48 <__assert_fail@plt+0x9764>
   1aaec:	ldr	r3, [fp, #16]
   1aaf0:	str	r3, [fp, #-28]	; 0xffffffe4
   1aaf4:	b	1ab38 <__assert_fail@plt+0x9754>
   1aaf8:	ldr	r2, [fp, #-20]	; 0xffffffec
   1aafc:	ldr	r3, [fp, #-92]	; 0xffffffa4
   1ab00:	cmp	r2, r3
   1ab04:	bcs	1ab20 <__assert_fail@plt+0x973c>
   1ab08:	ldr	r2, [fp, #-88]	; 0xffffffa8
   1ab0c:	ldr	r3, [fp, #-20]	; 0xffffffec
   1ab10:	add	r3, r2, r3
   1ab14:	ldr	r2, [fp, #-28]	; 0xffffffe4
   1ab18:	ldrb	r2, [r2]
   1ab1c:	strb	r2, [r3]
   1ab20:	ldr	r3, [fp, #-20]	; 0xffffffec
   1ab24:	add	r3, r3, #1
   1ab28:	str	r3, [fp, #-20]	; 0xffffffec
   1ab2c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1ab30:	add	r3, r3, #1
   1ab34:	str	r3, [fp, #-28]	; 0xffffffe4
   1ab38:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1ab3c:	ldrb	r3, [r3]
   1ab40:	cmp	r3, #0
   1ab44:	bne	1aaf8 <__assert_fail@plt+0x9714>
   1ab48:	mov	r3, #1
   1ab4c:	strb	r3, [fp, #-33]	; 0xffffffdf
   1ab50:	ldr	r3, [fp, #20]
   1ab54:	str	r3, [fp, #-28]	; 0xffffffe4
   1ab58:	ldr	r0, [fp, #-28]	; 0xffffffe4
   1ab5c:	bl	11294 <strlen@plt>
   1ab60:	str	r0, [fp, #-32]	; 0xffffffe0
   1ab64:	b	1ac04 <__assert_fail@plt+0x9820>
   1ab68:	mov	r3, #1
   1ab6c:	strb	r3, [fp, #-33]	; 0xffffffdf
   1ab70:	mov	r3, #1
   1ab74:	strb	r3, [fp, #-34]	; 0xffffffde
   1ab78:	ldrb	r3, [fp, #-34]	; 0xffffffde
   1ab7c:	eor	r3, r3, #1
   1ab80:	uxtb	r3, r3
   1ab84:	cmp	r3, #0
   1ab88:	beq	1ab94 <__assert_fail@plt+0x97b0>
   1ab8c:	mov	r3, #1
   1ab90:	strb	r3, [fp, #-33]	; 0xffffffdf
   1ab94:	mov	r3, #2
   1ab98:	str	r3, [fp, #4]
   1ab9c:	ldrb	r3, [fp, #-34]	; 0xffffffde
   1aba0:	eor	r3, r3, #1
   1aba4:	uxtb	r3, r3
   1aba8:	cmp	r3, #0
   1abac:	beq	1abe0 <__assert_fail@plt+0x97fc>
   1abb0:	ldr	r2, [fp, #-20]	; 0xffffffec
   1abb4:	ldr	r3, [fp, #-92]	; 0xffffffa4
   1abb8:	cmp	r2, r3
   1abbc:	bcs	1abd4 <__assert_fail@plt+0x97f0>
   1abc0:	ldr	r2, [fp, #-88]	; 0xffffffa8
   1abc4:	ldr	r3, [fp, #-20]	; 0xffffffec
   1abc8:	add	r3, r2, r3
   1abcc:	mov	r2, #39	; 0x27
   1abd0:	strb	r2, [r3]
   1abd4:	ldr	r3, [fp, #-20]	; 0xffffffec
   1abd8:	add	r3, r3, #1
   1abdc:	str	r3, [fp, #-20]	; 0xffffffec
   1abe0:	ldr	r3, [pc, #3532]	; 1b9b4 <__assert_fail@plt+0xa5d0>
   1abe4:	str	r3, [fp, #-28]	; 0xffffffe4
   1abe8:	mov	r3, #1
   1abec:	str	r3, [fp, #-32]	; 0xffffffe0
   1abf0:	b	1ac04 <__assert_fail@plt+0x9820>
   1abf4:	mov	r3, #0
   1abf8:	strb	r3, [fp, #-34]	; 0xffffffde
   1abfc:	b	1ac04 <__assert_fail@plt+0x9820>
   1ac00:	bl	113c0 <abort@plt>
   1ac04:	mov	r3, #0
   1ac08:	str	r3, [fp, #-16]
   1ac0c:	b	1bd9c <__assert_fail@plt+0xa9b8>
   1ac10:	mov	r3, #0
   1ac14:	strb	r3, [fp, #-40]	; 0xffffffd8
   1ac18:	mov	r3, #0
   1ac1c:	strb	r3, [fp, #-41]	; 0xffffffd7
   1ac20:	mov	r3, #0
   1ac24:	strb	r3, [fp, #-42]	; 0xffffffd6
   1ac28:	ldrb	r3, [fp, #-33]	; 0xffffffdf
   1ac2c:	cmp	r3, #0
   1ac30:	beq	1accc <__assert_fail@plt+0x98e8>
   1ac34:	ldr	r3, [fp, #4]
   1ac38:	cmp	r3, #2
   1ac3c:	beq	1accc <__assert_fail@plt+0x98e8>
   1ac40:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1ac44:	cmp	r3, #0
   1ac48:	beq	1accc <__assert_fail@plt+0x98e8>
   1ac4c:	ldr	r2, [fp, #-16]
   1ac50:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1ac54:	add	r4, r2, r3
   1ac58:	ldr	r3, [fp, #-100]	; 0xffffff9c
   1ac5c:	cmn	r3, #1
   1ac60:	bne	1ac84 <__assert_fail@plt+0x98a0>
   1ac64:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1ac68:	cmp	r3, #1
   1ac6c:	bls	1ac84 <__assert_fail@plt+0x98a0>
   1ac70:	ldr	r0, [fp, #-96]	; 0xffffffa0
   1ac74:	bl	11294 <strlen@plt>
   1ac78:	str	r0, [fp, #-100]	; 0xffffff9c
   1ac7c:	ldr	r3, [fp, #-100]	; 0xffffff9c
   1ac80:	b	1ac88 <__assert_fail@plt+0x98a4>
   1ac84:	ldr	r3, [fp, #-100]	; 0xffffff9c
   1ac88:	cmp	r4, r3
   1ac8c:	bhi	1accc <__assert_fail@plt+0x98e8>
   1ac90:	ldr	r2, [fp, #-96]	; 0xffffffa0
   1ac94:	ldr	r3, [fp, #-16]
   1ac98:	add	r3, r2, r3
   1ac9c:	ldr	r2, [fp, #-32]	; 0xffffffe0
   1aca0:	ldr	r1, [fp, #-28]	; 0xffffffe4
   1aca4:	mov	r0, r3
   1aca8:	bl	11150 <memcmp@plt>
   1acac:	mov	r3, r0
   1acb0:	cmp	r3, #0
   1acb4:	bne	1accc <__assert_fail@plt+0x98e8>
   1acb8:	ldrb	r3, [fp, #-34]	; 0xffffffde
   1acbc:	cmp	r3, #0
   1acc0:	bne	1bf58 <__assert_fail@plt+0xab74>
   1acc4:	mov	r3, #1
   1acc8:	strb	r3, [fp, #-40]	; 0xffffffd8
   1accc:	ldr	r2, [fp, #-96]	; 0xffffffa0
   1acd0:	ldr	r3, [fp, #-16]
   1acd4:	add	r3, r2, r3
   1acd8:	ldrb	r3, [r3]
   1acdc:	strb	r3, [fp, #-38]	; 0xffffffda
   1ace0:	ldrb	r3, [fp, #-38]	; 0xffffffda
   1ace4:	cmp	r3, #126	; 0x7e
   1ace8:	ldrls	pc, [pc, r3, lsl #2]
   1acec:	b	1b518 <__assert_fail@plt+0xa134>
   1acf0:	andeq	sl, r1, ip, ror #29
   1acf4:	andeq	fp, r1, r8, lsl r5
   1acf8:	andeq	fp, r1, r8, lsl r5
   1acfc:	andeq	fp, r1, r8, lsl r5
   1ad00:	andeq	fp, r1, r8, lsl r5
   1ad04:	andeq	fp, r1, r8, lsl r5
   1ad08:	andeq	fp, r1, r8, lsl r5
   1ad0c:	ldrdeq	fp, [r1], -ip
   1ad10:	andeq	fp, r1, r8, ror #5
   1ad14:	andeq	fp, r1, r8, lsl r3
   1ad18:	andeq	fp, r1, r0, lsl #6
   1ad1c:	andeq	fp, r1, r4, lsr #6
   1ad20:	strdeq	fp, [r1], -r4
   1ad24:	andeq	fp, r1, ip, lsl #6
   1ad28:	andeq	fp, r1, r8, lsl r5
   1ad2c:	andeq	fp, r1, r8, lsl r5
   1ad30:	andeq	fp, r1, r8, lsl r5
   1ad34:	andeq	fp, r1, r8, lsl r5
   1ad38:	andeq	fp, r1, r8, lsl r5
   1ad3c:	andeq	fp, r1, r8, lsl r5
   1ad40:	andeq	fp, r1, r8, lsl r5
   1ad44:	andeq	fp, r1, r8, lsl r5
   1ad48:	andeq	fp, r1, r8, lsl r5
   1ad4c:	andeq	fp, r1, r8, lsl r5
   1ad50:	andeq	fp, r1, r8, lsl r5
   1ad54:	andeq	fp, r1, r8, lsl r5
   1ad58:	andeq	fp, r1, r8, lsl r5
   1ad5c:	andeq	fp, r1, r8, lsl r5
   1ad60:	andeq	fp, r1, r8, lsl r5
   1ad64:	andeq	fp, r1, r8, lsl r5
   1ad68:	andeq	fp, r1, r8, lsl r5
   1ad6c:	andeq	fp, r1, r8, lsl r5
   1ad70:	strdeq	fp, [r1], -ip
   1ad74:	andeq	fp, r1, r4, lsl #8
   1ad78:	andeq	fp, r1, r4, lsl #8
   1ad7c:	strdeq	fp, [r1], -r0
   1ad80:	andeq	fp, r1, r4, lsl #8
   1ad84:	andeq	fp, r1, ip, lsl #10
   1ad88:	andeq	fp, r1, r4, lsl #8
   1ad8c:	andeq	fp, r1, r0, lsr #8
   1ad90:	andeq	fp, r1, r4, lsl #8
   1ad94:	andeq	fp, r1, r4, lsl #8
   1ad98:	andeq	fp, r1, r4, lsl #8
   1ad9c:	andeq	fp, r1, ip, lsl #10
   1ada0:	andeq	fp, r1, ip, lsl #10
   1ada4:	andeq	fp, r1, ip, lsl #10
   1ada8:	andeq	fp, r1, ip, lsl #10
   1adac:	andeq	fp, r1, ip, lsl #10
   1adb0:	andeq	fp, r1, ip, lsl #10
   1adb4:	andeq	fp, r1, ip, lsl #10
   1adb8:	andeq	fp, r1, ip, lsl #10
   1adbc:	andeq	fp, r1, ip, lsl #10
   1adc0:	andeq	fp, r1, ip, lsl #10
   1adc4:	andeq	fp, r1, ip, lsl #10
   1adc8:	andeq	fp, r1, ip, lsl #10
   1adcc:	andeq	fp, r1, ip, lsl #10
   1add0:	andeq	fp, r1, ip, lsl #10
   1add4:	andeq	fp, r1, ip, lsl #10
   1add8:	andeq	fp, r1, ip, lsl #10
   1addc:	andeq	fp, r1, r4, lsl #8
   1ade0:	andeq	fp, r1, r4, lsl #8
   1ade4:	andeq	fp, r1, r4, lsl #8
   1ade8:	andeq	fp, r1, r4, lsl #8
   1adec:	andeq	fp, r1, ip, asr #1
   1adf0:	andeq	fp, r1, r8, lsl r5
   1adf4:	andeq	fp, r1, ip, lsl #10
   1adf8:	andeq	fp, r1, ip, lsl #10
   1adfc:	andeq	fp, r1, ip, lsl #10
   1ae00:	andeq	fp, r1, ip, lsl #10
   1ae04:	andeq	fp, r1, ip, lsl #10
   1ae08:	andeq	fp, r1, ip, lsl #10
   1ae0c:	andeq	fp, r1, ip, lsl #10
   1ae10:	andeq	fp, r1, ip, lsl #10
   1ae14:	andeq	fp, r1, ip, lsl #10
   1ae18:	andeq	fp, r1, ip, lsl #10
   1ae1c:	andeq	fp, r1, ip, lsl #10
   1ae20:	andeq	fp, r1, ip, lsl #10
   1ae24:	andeq	fp, r1, ip, lsl #10
   1ae28:	andeq	fp, r1, ip, lsl #10
   1ae2c:	andeq	fp, r1, ip, lsl #10
   1ae30:	andeq	fp, r1, ip, lsl #10
   1ae34:	andeq	fp, r1, ip, lsl #10
   1ae38:	andeq	fp, r1, ip, lsl #10
   1ae3c:	andeq	fp, r1, ip, lsl #10
   1ae40:	andeq	fp, r1, ip, lsl #10
   1ae44:	andeq	fp, r1, ip, lsl #10
   1ae48:	andeq	fp, r1, ip, lsl #10
   1ae4c:	andeq	fp, r1, ip, lsl #10
   1ae50:	andeq	fp, r1, ip, lsl #10
   1ae54:	andeq	fp, r1, ip, lsl #10
   1ae58:	andeq	fp, r1, ip, lsl #10
   1ae5c:	andeq	fp, r1, r4, lsl #8
   1ae60:	andeq	fp, r1, r0, lsr r3
   1ae64:	andeq	fp, r1, ip, lsl #10
   1ae68:	andeq	fp, r1, r4, lsl #8
   1ae6c:	andeq	fp, r1, ip, lsl #10
   1ae70:	andeq	fp, r1, r4, lsl #8
   1ae74:	andeq	fp, r1, ip, lsl #10
   1ae78:	andeq	fp, r1, ip, lsl #10
   1ae7c:	andeq	fp, r1, ip, lsl #10
   1ae80:	andeq	fp, r1, ip, lsl #10
   1ae84:	andeq	fp, r1, ip, lsl #10
   1ae88:	andeq	fp, r1, ip, lsl #10
   1ae8c:	andeq	fp, r1, ip, lsl #10
   1ae90:	andeq	fp, r1, ip, lsl #10
   1ae94:	andeq	fp, r1, ip, lsl #10
   1ae98:	andeq	fp, r1, ip, lsl #10
   1ae9c:	andeq	fp, r1, ip, lsl #10
   1aea0:	andeq	fp, r1, ip, lsl #10
   1aea4:	andeq	fp, r1, ip, lsl #10
   1aea8:	andeq	fp, r1, ip, lsl #10
   1aeac:	andeq	fp, r1, ip, lsl #10
   1aeb0:	andeq	fp, r1, ip, lsl #10
   1aeb4:	andeq	fp, r1, ip, lsl #10
   1aeb8:	andeq	fp, r1, ip, lsl #10
   1aebc:	andeq	fp, r1, ip, lsl #10
   1aec0:	andeq	fp, r1, ip, lsl #10
   1aec4:	andeq	fp, r1, ip, lsl #10
   1aec8:	andeq	fp, r1, ip, lsl #10
   1aecc:	andeq	fp, r1, ip, lsl #10
   1aed0:	andeq	fp, r1, ip, lsl #10
   1aed4:	andeq	fp, r1, ip, lsl #10
   1aed8:	andeq	fp, r1, ip, lsl #10
   1aedc:	andeq	fp, r1, r8, lsr #7
   1aee0:	andeq	fp, r1, r4, lsl #8
   1aee4:	andeq	fp, r1, r8, lsr #7
   1aee8:	strdeq	fp, [r1], -r0
   1aeec:	ldrb	r3, [fp, #-33]	; 0xffffffdf
   1aef0:	cmp	r3, #0
   1aef4:	beq	1b0b8 <__assert_fail@plt+0x9cd4>
   1aef8:	ldrb	r3, [fp, #-34]	; 0xffffffde
   1aefc:	cmp	r3, #0
   1af00:	bne	1bf60 <__assert_fail@plt+0xab7c>
   1af04:	mov	r3, #1
   1af08:	strb	r3, [fp, #-41]	; 0xffffffd7
   1af0c:	ldr	r3, [fp, #4]
   1af10:	cmp	r3, #2
   1af14:	bne	1afc4 <__assert_fail@plt+0x9be0>
   1af18:	ldrb	r3, [fp, #-35]	; 0xffffffdd
   1af1c:	eor	r3, r3, #1
   1af20:	uxtb	r3, r3
   1af24:	cmp	r3, #0
   1af28:	beq	1afc4 <__assert_fail@plt+0x9be0>
   1af2c:	ldr	r2, [fp, #-20]	; 0xffffffec
   1af30:	ldr	r3, [fp, #-92]	; 0xffffffa4
   1af34:	cmp	r2, r3
   1af38:	bcs	1af50 <__assert_fail@plt+0x9b6c>
   1af3c:	ldr	r2, [fp, #-88]	; 0xffffffa8
   1af40:	ldr	r3, [fp, #-20]	; 0xffffffec
   1af44:	add	r3, r2, r3
   1af48:	mov	r2, #39	; 0x27
   1af4c:	strb	r2, [r3]
   1af50:	ldr	r3, [fp, #-20]	; 0xffffffec
   1af54:	add	r3, r3, #1
   1af58:	str	r3, [fp, #-20]	; 0xffffffec
   1af5c:	ldr	r2, [fp, #-20]	; 0xffffffec
   1af60:	ldr	r3, [fp, #-92]	; 0xffffffa4
   1af64:	cmp	r2, r3
   1af68:	bcs	1af80 <__assert_fail@plt+0x9b9c>
   1af6c:	ldr	r2, [fp, #-88]	; 0xffffffa8
   1af70:	ldr	r3, [fp, #-20]	; 0xffffffec
   1af74:	add	r3, r2, r3
   1af78:	mov	r2, #36	; 0x24
   1af7c:	strb	r2, [r3]
   1af80:	ldr	r3, [fp, #-20]	; 0xffffffec
   1af84:	add	r3, r3, #1
   1af88:	str	r3, [fp, #-20]	; 0xffffffec
   1af8c:	ldr	r2, [fp, #-20]	; 0xffffffec
   1af90:	ldr	r3, [fp, #-92]	; 0xffffffa4
   1af94:	cmp	r2, r3
   1af98:	bcs	1afb0 <__assert_fail@plt+0x9bcc>
   1af9c:	ldr	r2, [fp, #-88]	; 0xffffffa8
   1afa0:	ldr	r3, [fp, #-20]	; 0xffffffec
   1afa4:	add	r3, r2, r3
   1afa8:	mov	r2, #39	; 0x27
   1afac:	strb	r2, [r3]
   1afb0:	ldr	r3, [fp, #-20]	; 0xffffffec
   1afb4:	add	r3, r3, #1
   1afb8:	str	r3, [fp, #-20]	; 0xffffffec
   1afbc:	mov	r3, #1
   1afc0:	strb	r3, [fp, #-35]	; 0xffffffdd
   1afc4:	ldr	r2, [fp, #-20]	; 0xffffffec
   1afc8:	ldr	r3, [fp, #-92]	; 0xffffffa4
   1afcc:	cmp	r2, r3
   1afd0:	bcs	1afe8 <__assert_fail@plt+0x9c04>
   1afd4:	ldr	r2, [fp, #-88]	; 0xffffffa8
   1afd8:	ldr	r3, [fp, #-20]	; 0xffffffec
   1afdc:	add	r3, r2, r3
   1afe0:	mov	r2, #92	; 0x5c
   1afe4:	strb	r2, [r3]
   1afe8:	ldr	r3, [fp, #-20]	; 0xffffffec
   1afec:	add	r3, r3, #1
   1aff0:	str	r3, [fp, #-20]	; 0xffffffec
   1aff4:	ldr	r3, [fp, #4]
   1aff8:	cmp	r3, #2
   1affc:	beq	1b0ac <__assert_fail@plt+0x9cc8>
   1b000:	ldr	r3, [fp, #-16]
   1b004:	add	r2, r3, #1
   1b008:	ldr	r3, [fp, #-100]	; 0xffffff9c
   1b00c:	cmp	r2, r3
   1b010:	bcs	1b0ac <__assert_fail@plt+0x9cc8>
   1b014:	ldr	r3, [fp, #-16]
   1b018:	add	r3, r3, #1
   1b01c:	ldr	r2, [fp, #-96]	; 0xffffffa0
   1b020:	add	r3, r2, r3
   1b024:	ldrb	r3, [r3]
   1b028:	cmp	r3, #47	; 0x2f
   1b02c:	bls	1b0ac <__assert_fail@plt+0x9cc8>
   1b030:	ldr	r3, [fp, #-16]
   1b034:	add	r3, r3, #1
   1b038:	ldr	r2, [fp, #-96]	; 0xffffffa0
   1b03c:	add	r3, r2, r3
   1b040:	ldrb	r3, [r3]
   1b044:	cmp	r3, #57	; 0x39
   1b048:	bhi	1b0ac <__assert_fail@plt+0x9cc8>
   1b04c:	ldr	r2, [fp, #-20]	; 0xffffffec
   1b050:	ldr	r3, [fp, #-92]	; 0xffffffa4
   1b054:	cmp	r2, r3
   1b058:	bcs	1b070 <__assert_fail@plt+0x9c8c>
   1b05c:	ldr	r2, [fp, #-88]	; 0xffffffa8
   1b060:	ldr	r3, [fp, #-20]	; 0xffffffec
   1b064:	add	r3, r2, r3
   1b068:	mov	r2, #48	; 0x30
   1b06c:	strb	r2, [r3]
   1b070:	ldr	r3, [fp, #-20]	; 0xffffffec
   1b074:	add	r3, r3, #1
   1b078:	str	r3, [fp, #-20]	; 0xffffffec
   1b07c:	ldr	r2, [fp, #-20]	; 0xffffffec
   1b080:	ldr	r3, [fp, #-92]	; 0xffffffa4
   1b084:	cmp	r2, r3
   1b088:	bcs	1b0a0 <__assert_fail@plt+0x9cbc>
   1b08c:	ldr	r2, [fp, #-88]	; 0xffffffa8
   1b090:	ldr	r3, [fp, #-20]	; 0xffffffec
   1b094:	add	r3, r2, r3
   1b098:	mov	r2, #48	; 0x30
   1b09c:	strb	r2, [r3]
   1b0a0:	ldr	r3, [fp, #-20]	; 0xffffffec
   1b0a4:	add	r3, r3, #1
   1b0a8:	str	r3, [fp, #-20]	; 0xffffffec
   1b0ac:	mov	r3, #48	; 0x30
   1b0b0:	strb	r3, [fp, #-38]	; 0xffffffda
   1b0b4:	b	1baf4 <__assert_fail@plt+0xa710>
   1b0b8:	ldr	r3, [fp, #8]
   1b0bc:	and	r3, r3, #1
   1b0c0:	cmp	r3, #0
   1b0c4:	beq	1baf4 <__assert_fail@plt+0xa710>
   1b0c8:	b	1bd90 <__assert_fail@plt+0xa9ac>
   1b0cc:	ldr	r3, [fp, #4]
   1b0d0:	cmp	r3, #2
   1b0d4:	beq	1b0e4 <__assert_fail@plt+0x9d00>
   1b0d8:	cmp	r3, #5
   1b0dc:	beq	1b0f4 <__assert_fail@plt+0x9d10>
   1b0e0:	b	1b2d8 <__assert_fail@plt+0x9ef4>
   1b0e4:	ldrb	r3, [fp, #-34]	; 0xffffffde
   1b0e8:	cmp	r3, #0
   1b0ec:	beq	1b2cc <__assert_fail@plt+0x9ee8>
   1b0f0:	b	1bf9c <__assert_fail@plt+0xabb8>
   1b0f4:	ldr	r3, [fp, #8]
   1b0f8:	and	r3, r3, #4
   1b0fc:	cmp	r3, #0
   1b100:	beq	1b2d4 <__assert_fail@plt+0x9ef0>
   1b104:	ldr	r3, [fp, #-16]
   1b108:	add	r2, r3, #2
   1b10c:	ldr	r3, [fp, #-100]	; 0xffffff9c
   1b110:	cmp	r2, r3
   1b114:	bcs	1b2d4 <__assert_fail@plt+0x9ef0>
   1b118:	ldr	r3, [fp, #-16]
   1b11c:	add	r3, r3, #1
   1b120:	ldr	r2, [fp, #-96]	; 0xffffffa0
   1b124:	add	r3, r2, r3
   1b128:	ldrb	r3, [r3]
   1b12c:	cmp	r3, #63	; 0x3f
   1b130:	bne	1b2d4 <__assert_fail@plt+0x9ef0>
   1b134:	ldr	r3, [fp, #-16]
   1b138:	add	r3, r3, #2
   1b13c:	ldr	r2, [fp, #-96]	; 0xffffffa0
   1b140:	add	r3, r2, r3
   1b144:	ldrb	r3, [r3]
   1b148:	sub	r3, r3, #33	; 0x21
   1b14c:	cmp	r3, #29
   1b150:	ldrls	pc, [pc, r3, lsl #2]
   1b154:	b	1b2c4 <__assert_fail@plt+0x9ee0>
   1b158:	ldrdeq	fp, [r1], -r0
   1b15c:	andeq	fp, r1, r4, asr #5
   1b160:	andeq	fp, r1, r4, asr #5
   1b164:	andeq	fp, r1, r4, asr #5
   1b168:	andeq	fp, r1, r4, asr #5
   1b16c:	andeq	fp, r1, r4, asr #5
   1b170:	ldrdeq	fp, [r1], -r0
   1b174:	ldrdeq	fp, [r1], -r0
   1b178:	ldrdeq	fp, [r1], -r0
   1b17c:	andeq	fp, r1, r4, asr #5
   1b180:	andeq	fp, r1, r4, asr #5
   1b184:	andeq	fp, r1, r4, asr #5
   1b188:	ldrdeq	fp, [r1], -r0
   1b18c:	andeq	fp, r1, r4, asr #5
   1b190:	ldrdeq	fp, [r1], -r0
   1b194:	andeq	fp, r1, r4, asr #5
   1b198:	andeq	fp, r1, r4, asr #5
   1b19c:	andeq	fp, r1, r4, asr #5
   1b1a0:	andeq	fp, r1, r4, asr #5
   1b1a4:	andeq	fp, r1, r4, asr #5
   1b1a8:	andeq	fp, r1, r4, asr #5
   1b1ac:	andeq	fp, r1, r4, asr #5
   1b1b0:	andeq	fp, r1, r4, asr #5
   1b1b4:	andeq	fp, r1, r4, asr #5
   1b1b8:	andeq	fp, r1, r4, asr #5
   1b1bc:	andeq	fp, r1, r4, asr #5
   1b1c0:	andeq	fp, r1, r4, asr #5
   1b1c4:	ldrdeq	fp, [r1], -r0
   1b1c8:	ldrdeq	fp, [r1], -r0
   1b1cc:	ldrdeq	fp, [r1], -r0
   1b1d0:	ldrb	r3, [fp, #-34]	; 0xffffffde
   1b1d4:	cmp	r3, #0
   1b1d8:	bne	1bf68 <__assert_fail@plt+0xab84>
   1b1dc:	ldr	r3, [fp, #-16]
   1b1e0:	add	r3, r3, #2
   1b1e4:	ldr	r2, [fp, #-96]	; 0xffffffa0
   1b1e8:	add	r3, r2, r3
   1b1ec:	ldrb	r3, [r3]
   1b1f0:	strb	r3, [fp, #-38]	; 0xffffffda
   1b1f4:	ldr	r3, [fp, #-16]
   1b1f8:	add	r3, r3, #2
   1b1fc:	str	r3, [fp, #-16]
   1b200:	ldr	r2, [fp, #-20]	; 0xffffffec
   1b204:	ldr	r3, [fp, #-92]	; 0xffffffa4
   1b208:	cmp	r2, r3
   1b20c:	bcs	1b224 <__assert_fail@plt+0x9e40>
   1b210:	ldr	r2, [fp, #-88]	; 0xffffffa8
   1b214:	ldr	r3, [fp, #-20]	; 0xffffffec
   1b218:	add	r3, r2, r3
   1b21c:	mov	r2, #63	; 0x3f
   1b220:	strb	r2, [r3]
   1b224:	ldr	r3, [fp, #-20]	; 0xffffffec
   1b228:	add	r3, r3, #1
   1b22c:	str	r3, [fp, #-20]	; 0xffffffec
   1b230:	ldr	r2, [fp, #-20]	; 0xffffffec
   1b234:	ldr	r3, [fp, #-92]	; 0xffffffa4
   1b238:	cmp	r2, r3
   1b23c:	bcs	1b254 <__assert_fail@plt+0x9e70>
   1b240:	ldr	r2, [fp, #-88]	; 0xffffffa8
   1b244:	ldr	r3, [fp, #-20]	; 0xffffffec
   1b248:	add	r3, r2, r3
   1b24c:	mov	r2, #34	; 0x22
   1b250:	strb	r2, [r3]
   1b254:	ldr	r3, [fp, #-20]	; 0xffffffec
   1b258:	add	r3, r3, #1
   1b25c:	str	r3, [fp, #-20]	; 0xffffffec
   1b260:	ldr	r2, [fp, #-20]	; 0xffffffec
   1b264:	ldr	r3, [fp, #-92]	; 0xffffffa4
   1b268:	cmp	r2, r3
   1b26c:	bcs	1b284 <__assert_fail@plt+0x9ea0>
   1b270:	ldr	r2, [fp, #-88]	; 0xffffffa8
   1b274:	ldr	r3, [fp, #-20]	; 0xffffffec
   1b278:	add	r3, r2, r3
   1b27c:	mov	r2, #34	; 0x22
   1b280:	strb	r2, [r3]
   1b284:	ldr	r3, [fp, #-20]	; 0xffffffec
   1b288:	add	r3, r3, #1
   1b28c:	str	r3, [fp, #-20]	; 0xffffffec
   1b290:	ldr	r2, [fp, #-20]	; 0xffffffec
   1b294:	ldr	r3, [fp, #-92]	; 0xffffffa4
   1b298:	cmp	r2, r3
   1b29c:	bcs	1b2b4 <__assert_fail@plt+0x9ed0>
   1b2a0:	ldr	r2, [fp, #-88]	; 0xffffffa8
   1b2a4:	ldr	r3, [fp, #-20]	; 0xffffffec
   1b2a8:	add	r3, r2, r3
   1b2ac:	mov	r2, #63	; 0x3f
   1b2b0:	strb	r2, [r3]
   1b2b4:	ldr	r3, [fp, #-20]	; 0xffffffec
   1b2b8:	add	r3, r3, #1
   1b2bc:	str	r3, [fp, #-20]	; 0xffffffec
   1b2c0:	b	1b2c8 <__assert_fail@plt+0x9ee4>
   1b2c4:	nop			; (mov r0, r0)
   1b2c8:	b	1b2d4 <__assert_fail@plt+0x9ef0>
   1b2cc:	nop			; (mov r0, r0)
   1b2d0:	b	1bb20 <__assert_fail@plt+0xa73c>
   1b2d4:	nop			; (mov r0, r0)
   1b2d8:	b	1bb20 <__assert_fail@plt+0xa73c>
   1b2dc:	mov	r3, #97	; 0x61
   1b2e0:	strb	r3, [fp, #-39]	; 0xffffffd9
   1b2e4:	b	1b390 <__assert_fail@plt+0x9fac>
   1b2e8:	mov	r3, #98	; 0x62
   1b2ec:	strb	r3, [fp, #-39]	; 0xffffffd9
   1b2f0:	b	1b390 <__assert_fail@plt+0x9fac>
   1b2f4:	mov	r3, #102	; 0x66
   1b2f8:	strb	r3, [fp, #-39]	; 0xffffffd9
   1b2fc:	b	1b390 <__assert_fail@plt+0x9fac>
   1b300:	mov	r3, #110	; 0x6e
   1b304:	strb	r3, [fp, #-39]	; 0xffffffd9
   1b308:	b	1b378 <__assert_fail@plt+0x9f94>
   1b30c:	mov	r3, #114	; 0x72
   1b310:	strb	r3, [fp, #-39]	; 0xffffffd9
   1b314:	b	1b378 <__assert_fail@plt+0x9f94>
   1b318:	mov	r3, #116	; 0x74
   1b31c:	strb	r3, [fp, #-39]	; 0xffffffd9
   1b320:	b	1b378 <__assert_fail@plt+0x9f94>
   1b324:	mov	r3, #118	; 0x76
   1b328:	strb	r3, [fp, #-39]	; 0xffffffd9
   1b32c:	b	1b390 <__assert_fail@plt+0x9fac>
   1b330:	ldrb	r3, [fp, #-38]	; 0xffffffda
   1b334:	strb	r3, [fp, #-39]	; 0xffffffd9
   1b338:	ldr	r3, [fp, #4]
   1b33c:	cmp	r3, #2
   1b340:	bne	1b354 <__assert_fail@plt+0x9f70>
   1b344:	ldrb	r3, [fp, #-34]	; 0xffffffde
   1b348:	cmp	r3, #0
   1b34c:	beq	1bca8 <__assert_fail@plt+0xa8c4>
   1b350:	b	1bf9c <__assert_fail@plt+0xabb8>
   1b354:	ldrb	r3, [fp, #-33]	; 0xffffffdf
   1b358:	cmp	r3, #0
   1b35c:	beq	1b378 <__assert_fail@plt+0x9f94>
   1b360:	ldrb	r3, [fp, #-34]	; 0xffffffde
   1b364:	cmp	r3, #0
   1b368:	beq	1b378 <__assert_fail@plt+0x9f94>
   1b36c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1b370:	cmp	r3, #0
   1b374:	bne	1bcb0 <__assert_fail@plt+0xa8cc>
   1b378:	ldr	r3, [fp, #4]
   1b37c:	cmp	r3, #2
   1b380:	bne	1b390 <__assert_fail@plt+0x9fac>
   1b384:	ldrb	r3, [fp, #-34]	; 0xffffffde
   1b388:	cmp	r3, #0
   1b38c:	bne	1bf70 <__assert_fail@plt+0xab8c>
   1b390:	ldrb	r3, [fp, #-33]	; 0xffffffdf
   1b394:	cmp	r3, #0
   1b398:	beq	1bafc <__assert_fail@plt+0xa718>
   1b39c:	ldrb	r3, [fp, #-39]	; 0xffffffd9
   1b3a0:	strb	r3, [fp, #-38]	; 0xffffffda
   1b3a4:	b	1bba8 <__assert_fail@plt+0xa7c4>
   1b3a8:	ldr	r3, [fp, #-100]	; 0xffffff9c
   1b3ac:	cmn	r3, #1
   1b3b0:	bne	1b3d4 <__assert_fail@plt+0x9ff0>
   1b3b4:	ldr	r3, [fp, #-96]	; 0xffffffa0
   1b3b8:	add	r3, r3, #1
   1b3bc:	ldrb	r3, [r3]
   1b3c0:	cmp	r3, #0
   1b3c4:	movne	r3, #1
   1b3c8:	moveq	r3, #0
   1b3cc:	uxtb	r3, r3
   1b3d0:	b	1b3e8 <__assert_fail@plt+0xa004>
   1b3d4:	ldr	r3, [fp, #-100]	; 0xffffff9c
   1b3d8:	cmp	r3, #1
   1b3dc:	movne	r3, #1
   1b3e0:	moveq	r3, #0
   1b3e4:	uxtb	r3, r3
   1b3e8:	cmp	r3, #0
   1b3ec:	bne	1bb04 <__assert_fail@plt+0xa720>
   1b3f0:	ldr	r3, [fp, #-16]
   1b3f4:	cmp	r3, #0
   1b3f8:	bne	1bb0c <__assert_fail@plt+0xa728>
   1b3fc:	mov	r3, #1
   1b400:	strb	r3, [fp, #-42]	; 0xffffffd6
   1b404:	ldr	r3, [fp, #4]
   1b408:	cmp	r3, #2
   1b40c:	bne	1bb14 <__assert_fail@plt+0xa730>
   1b410:	ldrb	r3, [fp, #-34]	; 0xffffffde
   1b414:	cmp	r3, #0
   1b418:	beq	1bb14 <__assert_fail@plt+0xa730>
   1b41c:	b	1bf9c <__assert_fail@plt+0xabb8>
   1b420:	mov	r3, #1
   1b424:	strb	r3, [fp, #-36]	; 0xffffffdc
   1b428:	mov	r3, #1
   1b42c:	strb	r3, [fp, #-42]	; 0xffffffd6
   1b430:	ldr	r3, [fp, #4]
   1b434:	cmp	r3, #2
   1b438:	bne	1bb1c <__assert_fail@plt+0xa738>
   1b43c:	ldrb	r3, [fp, #-34]	; 0xffffffde
   1b440:	cmp	r3, #0
   1b444:	bne	1bf78 <__assert_fail@plt+0xab94>
   1b448:	ldr	r3, [fp, #-92]	; 0xffffffa4
   1b44c:	cmp	r3, #0
   1b450:	beq	1b470 <__assert_fail@plt+0xa08c>
   1b454:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1b458:	cmp	r3, #0
   1b45c:	bne	1b470 <__assert_fail@plt+0xa08c>
   1b460:	ldr	r3, [fp, #-92]	; 0xffffffa4
   1b464:	str	r3, [fp, #-24]	; 0xffffffe8
   1b468:	mov	r3, #0
   1b46c:	str	r3, [fp, #-92]	; 0xffffffa4
   1b470:	ldr	r2, [fp, #-20]	; 0xffffffec
   1b474:	ldr	r3, [fp, #-92]	; 0xffffffa4
   1b478:	cmp	r2, r3
   1b47c:	bcs	1b494 <__assert_fail@plt+0xa0b0>
   1b480:	ldr	r2, [fp, #-88]	; 0xffffffa8
   1b484:	ldr	r3, [fp, #-20]	; 0xffffffec
   1b488:	add	r3, r2, r3
   1b48c:	mov	r2, #39	; 0x27
   1b490:	strb	r2, [r3]
   1b494:	ldr	r3, [fp, #-20]	; 0xffffffec
   1b498:	add	r3, r3, #1
   1b49c:	str	r3, [fp, #-20]	; 0xffffffec
   1b4a0:	ldr	r2, [fp, #-20]	; 0xffffffec
   1b4a4:	ldr	r3, [fp, #-92]	; 0xffffffa4
   1b4a8:	cmp	r2, r3
   1b4ac:	bcs	1b4c4 <__assert_fail@plt+0xa0e0>
   1b4b0:	ldr	r2, [fp, #-88]	; 0xffffffa8
   1b4b4:	ldr	r3, [fp, #-20]	; 0xffffffec
   1b4b8:	add	r3, r2, r3
   1b4bc:	mov	r2, #92	; 0x5c
   1b4c0:	strb	r2, [r3]
   1b4c4:	ldr	r3, [fp, #-20]	; 0xffffffec
   1b4c8:	add	r3, r3, #1
   1b4cc:	str	r3, [fp, #-20]	; 0xffffffec
   1b4d0:	ldr	r2, [fp, #-20]	; 0xffffffec
   1b4d4:	ldr	r3, [fp, #-92]	; 0xffffffa4
   1b4d8:	cmp	r2, r3
   1b4dc:	bcs	1b4f4 <__assert_fail@plt+0xa110>
   1b4e0:	ldr	r2, [fp, #-88]	; 0xffffffa8
   1b4e4:	ldr	r3, [fp, #-20]	; 0xffffffec
   1b4e8:	add	r3, r2, r3
   1b4ec:	mov	r2, #39	; 0x27
   1b4f0:	strb	r2, [r3]
   1b4f4:	ldr	r3, [fp, #-20]	; 0xffffffec
   1b4f8:	add	r3, r3, #1
   1b4fc:	str	r3, [fp, #-20]	; 0xffffffec
   1b500:	mov	r3, #0
   1b504:	strb	r3, [fp, #-35]	; 0xffffffdd
   1b508:	b	1bb1c <__assert_fail@plt+0xa738>
   1b50c:	mov	r3, #1
   1b510:	strb	r3, [fp, #-42]	; 0xffffffd6
   1b514:	b	1bb20 <__assert_fail@plt+0xa73c>
   1b518:	ldrb	r3, [fp, #-57]	; 0xffffffc7
   1b51c:	cmp	r3, #0
   1b520:	beq	1b560 <__assert_fail@plt+0xa17c>
   1b524:	mov	r3, #1
   1b528:	str	r3, [fp, #-48]	; 0xffffffd0
   1b52c:	bl	11270 <__ctype_b_loc@plt>
   1b530:	mov	r3, r0
   1b534:	ldr	r2, [r3]
   1b538:	ldrb	r3, [fp, #-38]	; 0xffffffda
   1b53c:	lsl	r3, r3, #1
   1b540:	add	r3, r2, r3
   1b544:	ldrh	r3, [r3]
   1b548:	and	r3, r3, #16384	; 0x4000
   1b54c:	cmp	r3, #0
   1b550:	movne	r3, #1
   1b554:	moveq	r3, #0
   1b558:	strb	r3, [fp, #-49]	; 0xffffffcf
   1b55c:	b	1b7ac <__assert_fail@plt+0xa3c8>
   1b560:	sub	r3, fp, #76	; 0x4c
   1b564:	mov	r2, #8
   1b568:	mov	r1, #0
   1b56c:	mov	r0, r3
   1b570:	bl	112e8 <memset@plt>
   1b574:	mov	r3, #0
   1b578:	str	r3, [fp, #-48]	; 0xffffffd0
   1b57c:	mov	r3, #1
   1b580:	strb	r3, [fp, #-49]	; 0xffffffcf
   1b584:	ldr	r3, [fp, #-100]	; 0xffffff9c
   1b588:	cmn	r3, #1
   1b58c:	bne	1b59c <__assert_fail@plt+0xa1b8>
   1b590:	ldr	r0, [fp, #-96]	; 0xffffffa0
   1b594:	bl	11294 <strlen@plt>
   1b598:	str	r0, [fp, #-100]	; 0xffffff9c
   1b59c:	ldr	r2, [fp, #-16]
   1b5a0:	ldr	r3, [fp, #-48]	; 0xffffffd0
   1b5a4:	add	r3, r2, r3
   1b5a8:	ldr	r2, [fp, #-96]	; 0xffffffa0
   1b5ac:	add	r1, r2, r3
   1b5b0:	ldr	r2, [fp, #-16]
   1b5b4:	ldr	r3, [fp, #-48]	; 0xffffffd0
   1b5b8:	add	r3, r2, r3
   1b5bc:	ldr	r2, [fp, #-100]	; 0xffffff9c
   1b5c0:	sub	r2, r2, r3
   1b5c4:	sub	r3, fp, #76	; 0x4c
   1b5c8:	sub	r0, fp, #80	; 0x50
   1b5cc:	bl	20fc0 <__assert_fail@plt+0xfbdc>
   1b5d0:	str	r0, [fp, #-64]	; 0xffffffc0
   1b5d4:	ldr	r3, [fp, #-64]	; 0xffffffc0
   1b5d8:	cmp	r3, #0
   1b5dc:	beq	1b7a0 <__assert_fail@plt+0xa3bc>
   1b5e0:	ldr	r3, [fp, #-64]	; 0xffffffc0
   1b5e4:	cmn	r3, #1
   1b5e8:	bne	1b5f8 <__assert_fail@plt+0xa214>
   1b5ec:	mov	r3, #0
   1b5f0:	strb	r3, [fp, #-49]	; 0xffffffcf
   1b5f4:	b	1b7ac <__assert_fail@plt+0xa3c8>
   1b5f8:	ldr	r3, [fp, #-64]	; 0xffffffc0
   1b5fc:	cmn	r3, #2
   1b600:	bne	1b658 <__assert_fail@plt+0xa274>
   1b604:	mov	r3, #0
   1b608:	strb	r3, [fp, #-49]	; 0xffffffcf
   1b60c:	b	1b61c <__assert_fail@plt+0xa238>
   1b610:	ldr	r3, [fp, #-48]	; 0xffffffd0
   1b614:	add	r3, r3, #1
   1b618:	str	r3, [fp, #-48]	; 0xffffffd0
   1b61c:	ldr	r2, [fp, #-16]
   1b620:	ldr	r3, [fp, #-48]	; 0xffffffd0
   1b624:	add	r2, r2, r3
   1b628:	ldr	r3, [fp, #-100]	; 0xffffff9c
   1b62c:	cmp	r2, r3
   1b630:	bcs	1b7a8 <__assert_fail@plt+0xa3c4>
   1b634:	ldr	r2, [fp, #-16]
   1b638:	ldr	r3, [fp, #-48]	; 0xffffffd0
   1b63c:	add	r3, r2, r3
   1b640:	ldr	r2, [fp, #-96]	; 0xffffffa0
   1b644:	add	r3, r2, r3
   1b648:	ldrb	r3, [r3]
   1b64c:	cmp	r3, #0
   1b650:	bne	1b610 <__assert_fail@plt+0xa22c>
   1b654:	b	1b7a8 <__assert_fail@plt+0xa3c4>
   1b658:	ldrb	r3, [fp, #-34]	; 0xffffffde
   1b65c:	cmp	r3, #0
   1b660:	beq	1b754 <__assert_fail@plt+0xa370>
   1b664:	ldr	r3, [fp, #4]
   1b668:	cmp	r3, #2
   1b66c:	bne	1b754 <__assert_fail@plt+0xa370>
   1b670:	mov	r3, #1
   1b674:	str	r3, [fp, #-56]	; 0xffffffc8
   1b678:	b	1b744 <__assert_fail@plt+0xa360>
   1b67c:	ldr	r2, [fp, #-16]
   1b680:	ldr	r3, [fp, #-48]	; 0xffffffd0
   1b684:	add	r2, r2, r3
   1b688:	ldr	r3, [fp, #-56]	; 0xffffffc8
   1b68c:	add	r3, r2, r3
   1b690:	ldr	r2, [fp, #-96]	; 0xffffffa0
   1b694:	add	r3, r2, r3
   1b698:	ldrb	r3, [r3]
   1b69c:	sub	r3, r3, #91	; 0x5b
   1b6a0:	cmp	r3, #33	; 0x21
   1b6a4:	ldrls	pc, [pc, r3, lsl #2]
   1b6a8:	b	1b734 <__assert_fail@plt+0xa350>
   1b6ac:	andeq	fp, r1, r0, lsl #31
   1b6b0:	andeq	fp, r1, r0, lsl #31
   1b6b4:	andeq	fp, r1, r4, lsr r7
   1b6b8:	andeq	fp, r1, r0, lsl #31
   1b6bc:	andeq	fp, r1, r4, lsr r7
   1b6c0:	andeq	fp, r1, r0, lsl #31
   1b6c4:	andeq	fp, r1, r4, lsr r7
   1b6c8:	andeq	fp, r1, r4, lsr r7
   1b6cc:	andeq	fp, r1, r4, lsr r7
   1b6d0:	andeq	fp, r1, r4, lsr r7
   1b6d4:	andeq	fp, r1, r4, lsr r7
   1b6d8:	andeq	fp, r1, r4, lsr r7
   1b6dc:	andeq	fp, r1, r4, lsr r7
   1b6e0:	andeq	fp, r1, r4, lsr r7
   1b6e4:	andeq	fp, r1, r4, lsr r7
   1b6e8:	andeq	fp, r1, r4, lsr r7
   1b6ec:	andeq	fp, r1, r4, lsr r7
   1b6f0:	andeq	fp, r1, r4, lsr r7
   1b6f4:	andeq	fp, r1, r4, lsr r7
   1b6f8:	andeq	fp, r1, r4, lsr r7
   1b6fc:	andeq	fp, r1, r4, lsr r7
   1b700:	andeq	fp, r1, r4, lsr r7
   1b704:	andeq	fp, r1, r4, lsr r7
   1b708:	andeq	fp, r1, r4, lsr r7
   1b70c:	andeq	fp, r1, r4, lsr r7
   1b710:	andeq	fp, r1, r4, lsr r7
   1b714:	andeq	fp, r1, r4, lsr r7
   1b718:	andeq	fp, r1, r4, lsr r7
   1b71c:	andeq	fp, r1, r4, lsr r7
   1b720:	andeq	fp, r1, r4, lsr r7
   1b724:	andeq	fp, r1, r4, lsr r7
   1b728:	andeq	fp, r1, r4, lsr r7
   1b72c:	andeq	fp, r1, r4, lsr r7
   1b730:	andeq	fp, r1, r0, lsl #31
   1b734:	nop			; (mov r0, r0)
   1b738:	ldr	r3, [fp, #-56]	; 0xffffffc8
   1b73c:	add	r3, r3, #1
   1b740:	str	r3, [fp, #-56]	; 0xffffffc8
   1b744:	ldr	r2, [fp, #-56]	; 0xffffffc8
   1b748:	ldr	r3, [fp, #-64]	; 0xffffffc0
   1b74c:	cmp	r2, r3
   1b750:	bcc	1b67c <__assert_fail@plt+0xa298>
   1b754:	ldr	r3, [fp, #-80]	; 0xffffffb0
   1b758:	mov	r0, r3
   1b75c:	bl	111a4 <iswprint@plt>
   1b760:	mov	r3, r0
   1b764:	cmp	r3, #0
   1b768:	bne	1b774 <__assert_fail@plt+0xa390>
   1b76c:	mov	r3, #0
   1b770:	strb	r3, [fp, #-49]	; 0xffffffcf
   1b774:	ldr	r2, [fp, #-48]	; 0xffffffd0
   1b778:	ldr	r3, [fp, #-64]	; 0xffffffc0
   1b77c:	add	r3, r2, r3
   1b780:	str	r3, [fp, #-48]	; 0xffffffd0
   1b784:	sub	r3, fp, #76	; 0x4c
   1b788:	mov	r0, r3
   1b78c:	bl	11144 <mbsinit@plt>
   1b790:	mov	r3, r0
   1b794:	cmp	r3, #0
   1b798:	beq	1b59c <__assert_fail@plt+0xa1b8>
   1b79c:	b	1b7ac <__assert_fail@plt+0xa3c8>
   1b7a0:	nop			; (mov r0, r0)
   1b7a4:	b	1b7ac <__assert_fail@plt+0xa3c8>
   1b7a8:	nop			; (mov r0, r0)
   1b7ac:	ldrb	r3, [fp, #-49]	; 0xffffffcf
   1b7b0:	strb	r3, [fp, #-42]	; 0xffffffd6
   1b7b4:	ldr	r3, [fp, #-48]	; 0xffffffd0
   1b7b8:	cmp	r3, #1
   1b7bc:	bhi	1b7e0 <__assert_fail@plt+0xa3fc>
   1b7c0:	ldrb	r3, [fp, #-33]	; 0xffffffdf
   1b7c4:	cmp	r3, #0
   1b7c8:	beq	1bb20 <__assert_fail@plt+0xa73c>
   1b7cc:	ldrb	r3, [fp, #-49]	; 0xffffffcf
   1b7d0:	eor	r3, r3, #1
   1b7d4:	uxtb	r3, r3
   1b7d8:	cmp	r3, #0
   1b7dc:	beq	1bb20 <__assert_fail@plt+0xa73c>
   1b7e0:	ldr	r2, [fp, #-16]
   1b7e4:	ldr	r3, [fp, #-48]	; 0xffffffd0
   1b7e8:	add	r3, r2, r3
   1b7ec:	str	r3, [fp, #-68]	; 0xffffffbc
   1b7f0:	ldrb	r3, [fp, #-33]	; 0xffffffdf
   1b7f4:	cmp	r3, #0
   1b7f8:	beq	1b9b8 <__assert_fail@plt+0xa5d4>
   1b7fc:	ldrb	r3, [fp, #-49]	; 0xffffffcf
   1b800:	eor	r3, r3, #1
   1b804:	uxtb	r3, r3
   1b808:	cmp	r3, #0
   1b80c:	beq	1b9b8 <__assert_fail@plt+0xa5d4>
   1b810:	ldrb	r3, [fp, #-34]	; 0xffffffde
   1b814:	cmp	r3, #0
   1b818:	bne	1bf88 <__assert_fail@plt+0xaba4>
   1b81c:	mov	r3, #1
   1b820:	strb	r3, [fp, #-41]	; 0xffffffd7
   1b824:	ldr	r3, [fp, #4]
   1b828:	cmp	r3, #2
   1b82c:	bne	1b8dc <__assert_fail@plt+0xa4f8>
   1b830:	ldrb	r3, [fp, #-35]	; 0xffffffdd
   1b834:	eor	r3, r3, #1
   1b838:	uxtb	r3, r3
   1b83c:	cmp	r3, #0
   1b840:	beq	1b8dc <__assert_fail@plt+0xa4f8>
   1b844:	ldr	r2, [fp, #-20]	; 0xffffffec
   1b848:	ldr	r3, [fp, #-92]	; 0xffffffa4
   1b84c:	cmp	r2, r3
   1b850:	bcs	1b868 <__assert_fail@plt+0xa484>
   1b854:	ldr	r2, [fp, #-88]	; 0xffffffa8
   1b858:	ldr	r3, [fp, #-20]	; 0xffffffec
   1b85c:	add	r3, r2, r3
   1b860:	mov	r2, #39	; 0x27
   1b864:	strb	r2, [r3]
   1b868:	ldr	r3, [fp, #-20]	; 0xffffffec
   1b86c:	add	r3, r3, #1
   1b870:	str	r3, [fp, #-20]	; 0xffffffec
   1b874:	ldr	r2, [fp, #-20]	; 0xffffffec
   1b878:	ldr	r3, [fp, #-92]	; 0xffffffa4
   1b87c:	cmp	r2, r3
   1b880:	bcs	1b898 <__assert_fail@plt+0xa4b4>
   1b884:	ldr	r2, [fp, #-88]	; 0xffffffa8
   1b888:	ldr	r3, [fp, #-20]	; 0xffffffec
   1b88c:	add	r3, r2, r3
   1b890:	mov	r2, #36	; 0x24
   1b894:	strb	r2, [r3]
   1b898:	ldr	r3, [fp, #-20]	; 0xffffffec
   1b89c:	add	r3, r3, #1
   1b8a0:	str	r3, [fp, #-20]	; 0xffffffec
   1b8a4:	ldr	r2, [fp, #-20]	; 0xffffffec
   1b8a8:	ldr	r3, [fp, #-92]	; 0xffffffa4
   1b8ac:	cmp	r2, r3
   1b8b0:	bcs	1b8c8 <__assert_fail@plt+0xa4e4>
   1b8b4:	ldr	r2, [fp, #-88]	; 0xffffffa8
   1b8b8:	ldr	r3, [fp, #-20]	; 0xffffffec
   1b8bc:	add	r3, r2, r3
   1b8c0:	mov	r2, #39	; 0x27
   1b8c4:	strb	r2, [r3]
   1b8c8:	ldr	r3, [fp, #-20]	; 0xffffffec
   1b8cc:	add	r3, r3, #1
   1b8d0:	str	r3, [fp, #-20]	; 0xffffffec
   1b8d4:	mov	r3, #1
   1b8d8:	strb	r3, [fp, #-35]	; 0xffffffdd
   1b8dc:	ldr	r2, [fp, #-20]	; 0xffffffec
   1b8e0:	ldr	r3, [fp, #-92]	; 0xffffffa4
   1b8e4:	cmp	r2, r3
   1b8e8:	bcs	1b900 <__assert_fail@plt+0xa51c>
   1b8ec:	ldr	r2, [fp, #-88]	; 0xffffffa8
   1b8f0:	ldr	r3, [fp, #-20]	; 0xffffffec
   1b8f4:	add	r3, r2, r3
   1b8f8:	mov	r2, #92	; 0x5c
   1b8fc:	strb	r2, [r3]
   1b900:	ldr	r3, [fp, #-20]	; 0xffffffec
   1b904:	add	r3, r3, #1
   1b908:	str	r3, [fp, #-20]	; 0xffffffec
   1b90c:	ldr	r2, [fp, #-20]	; 0xffffffec
   1b910:	ldr	r3, [fp, #-92]	; 0xffffffa4
   1b914:	cmp	r2, r3
   1b918:	bcs	1b940 <__assert_fail@plt+0xa55c>
   1b91c:	ldr	r2, [fp, #-88]	; 0xffffffa8
   1b920:	ldr	r3, [fp, #-20]	; 0xffffffec
   1b924:	add	r3, r2, r3
   1b928:	ldrb	r2, [fp, #-38]	; 0xffffffda
   1b92c:	lsr	r2, r2, #6
   1b930:	uxtb	r2, r2
   1b934:	add	r2, r2, #48	; 0x30
   1b938:	uxtb	r2, r2
   1b93c:	strb	r2, [r3]
   1b940:	ldr	r3, [fp, #-20]	; 0xffffffec
   1b944:	add	r3, r3, #1
   1b948:	str	r3, [fp, #-20]	; 0xffffffec
   1b94c:	ldr	r2, [fp, #-20]	; 0xffffffec
   1b950:	ldr	r3, [fp, #-92]	; 0xffffffa4
   1b954:	cmp	r2, r3
   1b958:	bcs	1b988 <__assert_fail@plt+0xa5a4>
   1b95c:	ldr	r2, [fp, #-88]	; 0xffffffa8
   1b960:	ldr	r3, [fp, #-20]	; 0xffffffec
   1b964:	add	r3, r2, r3
   1b968:	ldrb	r2, [fp, #-38]	; 0xffffffda
   1b96c:	lsr	r2, r2, #3
   1b970:	uxtb	r2, r2
   1b974:	and	r2, r2, #7
   1b978:	uxtb	r2, r2
   1b97c:	add	r2, r2, #48	; 0x30
   1b980:	uxtb	r2, r2
   1b984:	strb	r2, [r3]
   1b988:	ldr	r3, [fp, #-20]	; 0xffffffec
   1b98c:	add	r3, r3, #1
   1b990:	str	r3, [fp, #-20]	; 0xffffffec
   1b994:	ldrb	r3, [fp, #-38]	; 0xffffffda
   1b998:	and	r3, r3, #7
   1b99c:	uxtb	r3, r3
   1b9a0:	add	r3, r3, #48	; 0x30
   1b9a4:	strb	r3, [fp, #-38]	; 0xffffffda
   1b9a8:	b	1b9fc <__assert_fail@plt+0xa618>
   1b9ac:	andeq	r3, r2, r4, lsr #13
   1b9b0:	andeq	r3, r2, ip, lsr #13
   1b9b4:	andeq	r3, r2, r8, lsr #13
   1b9b8:	ldrb	r3, [fp, #-40]	; 0xffffffd8
   1b9bc:	cmp	r3, #0
   1b9c0:	beq	1b9fc <__assert_fail@plt+0xa618>
   1b9c4:	ldr	r2, [fp, #-20]	; 0xffffffec
   1b9c8:	ldr	r3, [fp, #-92]	; 0xffffffa4
   1b9cc:	cmp	r2, r3
   1b9d0:	bcs	1b9e8 <__assert_fail@plt+0xa604>
   1b9d4:	ldr	r2, [fp, #-88]	; 0xffffffa8
   1b9d8:	ldr	r3, [fp, #-20]	; 0xffffffec
   1b9dc:	add	r3, r2, r3
   1b9e0:	mov	r2, #92	; 0x5c
   1b9e4:	strb	r2, [r3]
   1b9e8:	ldr	r3, [fp, #-20]	; 0xffffffec
   1b9ec:	add	r3, r3, #1
   1b9f0:	str	r3, [fp, #-20]	; 0xffffffec
   1b9f4:	mov	r3, #0
   1b9f8:	strb	r3, [fp, #-40]	; 0xffffffd8
   1b9fc:	ldr	r3, [fp, #-16]
   1ba00:	add	r2, r3, #1
   1ba04:	ldr	r3, [fp, #-68]	; 0xffffffbc
   1ba08:	cmp	r2, r3
   1ba0c:	bcs	1baec <__assert_fail@plt+0xa708>
   1ba10:	ldrb	r3, [fp, #-35]	; 0xffffffdd
   1ba14:	cmp	r3, #0
   1ba18:	beq	1ba98 <__assert_fail@plt+0xa6b4>
   1ba1c:	ldrb	r3, [fp, #-41]	; 0xffffffd7
   1ba20:	eor	r3, r3, #1
   1ba24:	uxtb	r3, r3
   1ba28:	cmp	r3, #0
   1ba2c:	beq	1ba98 <__assert_fail@plt+0xa6b4>
   1ba30:	ldr	r2, [fp, #-20]	; 0xffffffec
   1ba34:	ldr	r3, [fp, #-92]	; 0xffffffa4
   1ba38:	cmp	r2, r3
   1ba3c:	bcs	1ba54 <__assert_fail@plt+0xa670>
   1ba40:	ldr	r2, [fp, #-88]	; 0xffffffa8
   1ba44:	ldr	r3, [fp, #-20]	; 0xffffffec
   1ba48:	add	r3, r2, r3
   1ba4c:	mov	r2, #39	; 0x27
   1ba50:	strb	r2, [r3]
   1ba54:	ldr	r3, [fp, #-20]	; 0xffffffec
   1ba58:	add	r3, r3, #1
   1ba5c:	str	r3, [fp, #-20]	; 0xffffffec
   1ba60:	ldr	r2, [fp, #-20]	; 0xffffffec
   1ba64:	ldr	r3, [fp, #-92]	; 0xffffffa4
   1ba68:	cmp	r2, r3
   1ba6c:	bcs	1ba84 <__assert_fail@plt+0xa6a0>
   1ba70:	ldr	r2, [fp, #-88]	; 0xffffffa8
   1ba74:	ldr	r3, [fp, #-20]	; 0xffffffec
   1ba78:	add	r3, r2, r3
   1ba7c:	mov	r2, #39	; 0x27
   1ba80:	strb	r2, [r3]
   1ba84:	ldr	r3, [fp, #-20]	; 0xffffffec
   1ba88:	add	r3, r3, #1
   1ba8c:	str	r3, [fp, #-20]	; 0xffffffec
   1ba90:	mov	r3, #0
   1ba94:	strb	r3, [fp, #-35]	; 0xffffffdd
   1ba98:	ldr	r2, [fp, #-20]	; 0xffffffec
   1ba9c:	ldr	r3, [fp, #-92]	; 0xffffffa4
   1baa0:	cmp	r2, r3
   1baa4:	bcs	1babc <__assert_fail@plt+0xa6d8>
   1baa8:	ldr	r2, [fp, #-88]	; 0xffffffa8
   1baac:	ldr	r3, [fp, #-20]	; 0xffffffec
   1bab0:	add	r3, r2, r3
   1bab4:	ldrb	r2, [fp, #-38]	; 0xffffffda
   1bab8:	strb	r2, [r3]
   1babc:	ldr	r3, [fp, #-20]	; 0xffffffec
   1bac0:	add	r3, r3, #1
   1bac4:	str	r3, [fp, #-20]	; 0xffffffec
   1bac8:	ldr	r3, [fp, #-16]
   1bacc:	add	r3, r3, #1
   1bad0:	str	r3, [fp, #-16]
   1bad4:	ldr	r2, [fp, #-96]	; 0xffffffa0
   1bad8:	ldr	r3, [fp, #-16]
   1badc:	add	r3, r2, r3
   1bae0:	ldrb	r3, [r3]
   1bae4:	strb	r3, [fp, #-38]	; 0xffffffda
   1bae8:	b	1b7f0 <__assert_fail@plt+0xa40c>
   1baec:	nop			; (mov r0, r0)
   1baf0:	b	1bcbc <__assert_fail@plt+0xa8d8>
   1baf4:	nop			; (mov r0, r0)
   1baf8:	b	1bb20 <__assert_fail@plt+0xa73c>
   1bafc:	nop			; (mov r0, r0)
   1bb00:	b	1bb20 <__assert_fail@plt+0xa73c>
   1bb04:	nop			; (mov r0, r0)
   1bb08:	b	1bb20 <__assert_fail@plt+0xa73c>
   1bb0c:	nop			; (mov r0, r0)
   1bb10:	b	1bb20 <__assert_fail@plt+0xa73c>
   1bb14:	nop			; (mov r0, r0)
   1bb18:	b	1bb20 <__assert_fail@plt+0xa73c>
   1bb1c:	nop			; (mov r0, r0)
   1bb20:	ldrb	r3, [fp, #-33]	; 0xffffffdf
   1bb24:	eor	r3, r3, #1
   1bb28:	uxtb	r3, r3
   1bb2c:	cmp	r3, #0
   1bb30:	bne	1bb40 <__assert_fail@plt+0xa75c>
   1bb34:	ldr	r3, [fp, #4]
   1bb38:	cmp	r3, #2
   1bb3c:	bne	1bb54 <__assert_fail@plt+0xa770>
   1bb40:	ldrb	r3, [fp, #-34]	; 0xffffffde
   1bb44:	eor	r3, r3, #1
   1bb48:	uxtb	r3, r3
   1bb4c:	cmp	r3, #0
   1bb50:	bne	1bb94 <__assert_fail@plt+0xa7b0>
   1bb54:	ldr	r3, [fp, #12]
   1bb58:	cmp	r3, #0
   1bb5c:	beq	1bb94 <__assert_fail@plt+0xa7b0>
   1bb60:	ldrb	r3, [fp, #-38]	; 0xffffffda
   1bb64:	lsr	r3, r3, #5
   1bb68:	uxtb	r3, r3
   1bb6c:	lsl	r3, r3, #2
   1bb70:	ldr	r2, [fp, #12]
   1bb74:	add	r3, r2, r3
   1bb78:	ldr	r2, [r3]
   1bb7c:	ldrb	r3, [fp, #-38]	; 0xffffffda
   1bb80:	and	r3, r3, #31
   1bb84:	lsr	r3, r2, r3
   1bb88:	and	r3, r3, #1
   1bb8c:	cmp	r3, #0
   1bb90:	bne	1bba8 <__assert_fail@plt+0xa7c4>
   1bb94:	ldrb	r3, [fp, #-40]	; 0xffffffd8
   1bb98:	eor	r3, r3, #1
   1bb9c:	uxtb	r3, r3
   1bba0:	cmp	r3, #0
   1bba4:	bne	1bcb8 <__assert_fail@plt+0xa8d4>
   1bba8:	ldrb	r3, [fp, #-34]	; 0xffffffde
   1bbac:	cmp	r3, #0
   1bbb0:	bne	1bf90 <__assert_fail@plt+0xabac>
   1bbb4:	mov	r3, #1
   1bbb8:	strb	r3, [fp, #-41]	; 0xffffffd7
   1bbbc:	ldr	r3, [fp, #4]
   1bbc0:	cmp	r3, #2
   1bbc4:	bne	1bc74 <__assert_fail@plt+0xa890>
   1bbc8:	ldrb	r3, [fp, #-35]	; 0xffffffdd
   1bbcc:	eor	r3, r3, #1
   1bbd0:	uxtb	r3, r3
   1bbd4:	cmp	r3, #0
   1bbd8:	beq	1bc74 <__assert_fail@plt+0xa890>
   1bbdc:	ldr	r2, [fp, #-20]	; 0xffffffec
   1bbe0:	ldr	r3, [fp, #-92]	; 0xffffffa4
   1bbe4:	cmp	r2, r3
   1bbe8:	bcs	1bc00 <__assert_fail@plt+0xa81c>
   1bbec:	ldr	r2, [fp, #-88]	; 0xffffffa8
   1bbf0:	ldr	r3, [fp, #-20]	; 0xffffffec
   1bbf4:	add	r3, r2, r3
   1bbf8:	mov	r2, #39	; 0x27
   1bbfc:	strb	r2, [r3]
   1bc00:	ldr	r3, [fp, #-20]	; 0xffffffec
   1bc04:	add	r3, r3, #1
   1bc08:	str	r3, [fp, #-20]	; 0xffffffec
   1bc0c:	ldr	r2, [fp, #-20]	; 0xffffffec
   1bc10:	ldr	r3, [fp, #-92]	; 0xffffffa4
   1bc14:	cmp	r2, r3
   1bc18:	bcs	1bc30 <__assert_fail@plt+0xa84c>
   1bc1c:	ldr	r2, [fp, #-88]	; 0xffffffa8
   1bc20:	ldr	r3, [fp, #-20]	; 0xffffffec
   1bc24:	add	r3, r2, r3
   1bc28:	mov	r2, #36	; 0x24
   1bc2c:	strb	r2, [r3]
   1bc30:	ldr	r3, [fp, #-20]	; 0xffffffec
   1bc34:	add	r3, r3, #1
   1bc38:	str	r3, [fp, #-20]	; 0xffffffec
   1bc3c:	ldr	r2, [fp, #-20]	; 0xffffffec
   1bc40:	ldr	r3, [fp, #-92]	; 0xffffffa4
   1bc44:	cmp	r2, r3
   1bc48:	bcs	1bc60 <__assert_fail@plt+0xa87c>
   1bc4c:	ldr	r2, [fp, #-88]	; 0xffffffa8
   1bc50:	ldr	r3, [fp, #-20]	; 0xffffffec
   1bc54:	add	r3, r2, r3
   1bc58:	mov	r2, #39	; 0x27
   1bc5c:	strb	r2, [r3]
   1bc60:	ldr	r3, [fp, #-20]	; 0xffffffec
   1bc64:	add	r3, r3, #1
   1bc68:	str	r3, [fp, #-20]	; 0xffffffec
   1bc6c:	mov	r3, #1
   1bc70:	strb	r3, [fp, #-35]	; 0xffffffdd
   1bc74:	ldr	r2, [fp, #-20]	; 0xffffffec
   1bc78:	ldr	r3, [fp, #-92]	; 0xffffffa4
   1bc7c:	cmp	r2, r3
   1bc80:	bcs	1bc98 <__assert_fail@plt+0xa8b4>
   1bc84:	ldr	r2, [fp, #-88]	; 0xffffffa8
   1bc88:	ldr	r3, [fp, #-20]	; 0xffffffec
   1bc8c:	add	r3, r2, r3
   1bc90:	mov	r2, #92	; 0x5c
   1bc94:	strb	r2, [r3]
   1bc98:	ldr	r3, [fp, #-20]	; 0xffffffec
   1bc9c:	add	r3, r3, #1
   1bca0:	str	r3, [fp, #-20]	; 0xffffffec
   1bca4:	b	1bcbc <__assert_fail@plt+0xa8d8>
   1bca8:	nop			; (mov r0, r0)
   1bcac:	b	1bcbc <__assert_fail@plt+0xa8d8>
   1bcb0:	nop			; (mov r0, r0)
   1bcb4:	b	1bcbc <__assert_fail@plt+0xa8d8>
   1bcb8:	nop			; (mov r0, r0)
   1bcbc:	ldrb	r3, [fp, #-35]	; 0xffffffdd
   1bcc0:	cmp	r3, #0
   1bcc4:	beq	1bd44 <__assert_fail@plt+0xa960>
   1bcc8:	ldrb	r3, [fp, #-41]	; 0xffffffd7
   1bccc:	eor	r3, r3, #1
   1bcd0:	uxtb	r3, r3
   1bcd4:	cmp	r3, #0
   1bcd8:	beq	1bd44 <__assert_fail@plt+0xa960>
   1bcdc:	ldr	r2, [fp, #-20]	; 0xffffffec
   1bce0:	ldr	r3, [fp, #-92]	; 0xffffffa4
   1bce4:	cmp	r2, r3
   1bce8:	bcs	1bd00 <__assert_fail@plt+0xa91c>
   1bcec:	ldr	r2, [fp, #-88]	; 0xffffffa8
   1bcf0:	ldr	r3, [fp, #-20]	; 0xffffffec
   1bcf4:	add	r3, r2, r3
   1bcf8:	mov	r2, #39	; 0x27
   1bcfc:	strb	r2, [r3]
   1bd00:	ldr	r3, [fp, #-20]	; 0xffffffec
   1bd04:	add	r3, r3, #1
   1bd08:	str	r3, [fp, #-20]	; 0xffffffec
   1bd0c:	ldr	r2, [fp, #-20]	; 0xffffffec
   1bd10:	ldr	r3, [fp, #-92]	; 0xffffffa4
   1bd14:	cmp	r2, r3
   1bd18:	bcs	1bd30 <__assert_fail@plt+0xa94c>
   1bd1c:	ldr	r2, [fp, #-88]	; 0xffffffa8
   1bd20:	ldr	r3, [fp, #-20]	; 0xffffffec
   1bd24:	add	r3, r2, r3
   1bd28:	mov	r2, #39	; 0x27
   1bd2c:	strb	r2, [r3]
   1bd30:	ldr	r3, [fp, #-20]	; 0xffffffec
   1bd34:	add	r3, r3, #1
   1bd38:	str	r3, [fp, #-20]	; 0xffffffec
   1bd3c:	mov	r3, #0
   1bd40:	strb	r3, [fp, #-35]	; 0xffffffdd
   1bd44:	ldr	r2, [fp, #-20]	; 0xffffffec
   1bd48:	ldr	r3, [fp, #-92]	; 0xffffffa4
   1bd4c:	cmp	r2, r3
   1bd50:	bcs	1bd68 <__assert_fail@plt+0xa984>
   1bd54:	ldr	r2, [fp, #-88]	; 0xffffffa8
   1bd58:	ldr	r3, [fp, #-20]	; 0xffffffec
   1bd5c:	add	r3, r2, r3
   1bd60:	ldrb	r2, [fp, #-38]	; 0xffffffda
   1bd64:	strb	r2, [r3]
   1bd68:	ldr	r3, [fp, #-20]	; 0xffffffec
   1bd6c:	add	r3, r3, #1
   1bd70:	str	r3, [fp, #-20]	; 0xffffffec
   1bd74:	ldrb	r3, [fp, #-42]	; 0xffffffd6
   1bd78:	eor	r3, r3, #1
   1bd7c:	uxtb	r3, r3
   1bd80:	cmp	r3, #0
   1bd84:	beq	1bd90 <__assert_fail@plt+0xa9ac>
   1bd88:	mov	r3, #0
   1bd8c:	strb	r3, [fp, #-37]	; 0xffffffdb
   1bd90:	ldr	r3, [fp, #-16]
   1bd94:	add	r3, r3, #1
   1bd98:	str	r3, [fp, #-16]
   1bd9c:	ldr	r3, [fp, #-100]	; 0xffffff9c
   1bda0:	cmn	r3, #1
   1bda4:	bne	1bdcc <__assert_fail@plt+0xa9e8>
   1bda8:	ldr	r2, [fp, #-96]	; 0xffffffa0
   1bdac:	ldr	r3, [fp, #-16]
   1bdb0:	add	r3, r2, r3
   1bdb4:	ldrb	r3, [r3]
   1bdb8:	cmp	r3, #0
   1bdbc:	movne	r3, #1
   1bdc0:	moveq	r3, #0
   1bdc4:	uxtb	r3, r3
   1bdc8:	b	1bde4 <__assert_fail@plt+0xaa00>
   1bdcc:	ldr	r2, [fp, #-16]
   1bdd0:	ldr	r3, [fp, #-100]	; 0xffffff9c
   1bdd4:	cmp	r2, r3
   1bdd8:	movne	r3, #1
   1bddc:	moveq	r3, #0
   1bde0:	uxtb	r3, r3
   1bde4:	cmp	r3, #0
   1bde8:	bne	1ac10 <__assert_fail@plt+0x982c>
   1bdec:	ldr	r3, [fp, #-20]	; 0xffffffec
   1bdf0:	cmp	r3, #0
   1bdf4:	bne	1be10 <__assert_fail@plt+0xaa2c>
   1bdf8:	ldr	r3, [fp, #4]
   1bdfc:	cmp	r3, #2
   1be00:	bne	1be10 <__assert_fail@plt+0xaa2c>
   1be04:	ldrb	r3, [fp, #-34]	; 0xffffffde
   1be08:	cmp	r3, #0
   1be0c:	bne	1bf98 <__assert_fail@plt+0xabb4>
   1be10:	ldr	r3, [fp, #4]
   1be14:	cmp	r3, #2
   1be18:	bne	1beb8 <__assert_fail@plt+0xaad4>
   1be1c:	ldrb	r3, [fp, #-34]	; 0xffffffde
   1be20:	eor	r3, r3, #1
   1be24:	uxtb	r3, r3
   1be28:	cmp	r3, #0
   1be2c:	beq	1beb8 <__assert_fail@plt+0xaad4>
   1be30:	ldrb	r3, [fp, #-36]	; 0xffffffdc
   1be34:	cmp	r3, #0
   1be38:	beq	1beb8 <__assert_fail@plt+0xaad4>
   1be3c:	ldrb	r3, [fp, #-37]	; 0xffffffdb
   1be40:	cmp	r3, #0
   1be44:	beq	1be8c <__assert_fail@plt+0xaaa8>
   1be48:	ldr	r3, [fp, #20]
   1be4c:	str	r3, [sp, #16]
   1be50:	ldr	r3, [fp, #16]
   1be54:	str	r3, [sp, #12]
   1be58:	ldr	r3, [fp, #12]
   1be5c:	str	r3, [sp, #8]
   1be60:	ldr	r3, [fp, #8]
   1be64:	str	r3, [sp, #4]
   1be68:	mov	r3, #5
   1be6c:	str	r3, [sp]
   1be70:	ldr	r3, [fp, #-100]	; 0xffffff9c
   1be74:	ldr	r2, [fp, #-96]	; 0xffffffa0
   1be78:	ldr	r1, [fp, #-24]	; 0xffffffe8
   1be7c:	ldr	r0, [fp, #-88]	; 0xffffffa8
   1be80:	bl	1a960 <__assert_fail@plt+0x957c>
   1be84:	mov	r3, r0
   1be88:	b	1c000 <__assert_fail@plt+0xac1c>
   1be8c:	ldr	r3, [fp, #-92]	; 0xffffffa4
   1be90:	cmp	r3, #0
   1be94:	bne	1beb8 <__assert_fail@plt+0xaad4>
   1be98:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1be9c:	cmp	r3, #0
   1bea0:	beq	1beb8 <__assert_fail@plt+0xaad4>
   1bea4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1bea8:	str	r3, [fp, #-92]	; 0xffffffa4
   1beac:	mov	r3, #0
   1beb0:	str	r3, [fp, #-20]	; 0xffffffec
   1beb4:	b	1a9ec <__assert_fail@plt+0x9608>
   1beb8:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1bebc:	cmp	r3, #0
   1bec0:	beq	1bf2c <__assert_fail@plt+0xab48>
   1bec4:	ldrb	r3, [fp, #-34]	; 0xffffffde
   1bec8:	eor	r3, r3, #1
   1becc:	uxtb	r3, r3
   1bed0:	cmp	r3, #0
   1bed4:	beq	1bf2c <__assert_fail@plt+0xab48>
   1bed8:	b	1bf1c <__assert_fail@plt+0xab38>
   1bedc:	ldr	r2, [fp, #-20]	; 0xffffffec
   1bee0:	ldr	r3, [fp, #-92]	; 0xffffffa4
   1bee4:	cmp	r2, r3
   1bee8:	bcs	1bf04 <__assert_fail@plt+0xab20>
   1beec:	ldr	r2, [fp, #-88]	; 0xffffffa8
   1bef0:	ldr	r3, [fp, #-20]	; 0xffffffec
   1bef4:	add	r3, r2, r3
   1bef8:	ldr	r2, [fp, #-28]	; 0xffffffe4
   1befc:	ldrb	r2, [r2]
   1bf00:	strb	r2, [r3]
   1bf04:	ldr	r3, [fp, #-20]	; 0xffffffec
   1bf08:	add	r3, r3, #1
   1bf0c:	str	r3, [fp, #-20]	; 0xffffffec
   1bf10:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1bf14:	add	r3, r3, #1
   1bf18:	str	r3, [fp, #-28]	; 0xffffffe4
   1bf1c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1bf20:	ldrb	r3, [r3]
   1bf24:	cmp	r3, #0
   1bf28:	bne	1bedc <__assert_fail@plt+0xaaf8>
   1bf2c:	ldr	r2, [fp, #-20]	; 0xffffffec
   1bf30:	ldr	r3, [fp, #-92]	; 0xffffffa4
   1bf34:	cmp	r2, r3
   1bf38:	bcs	1bf50 <__assert_fail@plt+0xab6c>
   1bf3c:	ldr	r2, [fp, #-88]	; 0xffffffa8
   1bf40:	ldr	r3, [fp, #-20]	; 0xffffffec
   1bf44:	add	r3, r2, r3
   1bf48:	mov	r2, #0
   1bf4c:	strb	r2, [r3]
   1bf50:	ldr	r3, [fp, #-20]	; 0xffffffec
   1bf54:	b	1c000 <__assert_fail@plt+0xac1c>
   1bf58:	nop			; (mov r0, r0)
   1bf5c:	b	1bf9c <__assert_fail@plt+0xabb8>
   1bf60:	nop			; (mov r0, r0)
   1bf64:	b	1bf9c <__assert_fail@plt+0xabb8>
   1bf68:	nop			; (mov r0, r0)
   1bf6c:	b	1bf9c <__assert_fail@plt+0xabb8>
   1bf70:	nop			; (mov r0, r0)
   1bf74:	b	1bf9c <__assert_fail@plt+0xabb8>
   1bf78:	nop			; (mov r0, r0)
   1bf7c:	b	1bf9c <__assert_fail@plt+0xabb8>
   1bf80:	nop			; (mov r0, r0)
   1bf84:	b	1bf9c <__assert_fail@plt+0xabb8>
   1bf88:	nop			; (mov r0, r0)
   1bf8c:	b	1bf9c <__assert_fail@plt+0xabb8>
   1bf90:	nop			; (mov r0, r0)
   1bf94:	b	1bf9c <__assert_fail@plt+0xabb8>
   1bf98:	nop			; (mov r0, r0)
   1bf9c:	ldr	r3, [fp, #4]
   1bfa0:	cmp	r3, #2
   1bfa4:	bne	1bfbc <__assert_fail@plt+0xabd8>
   1bfa8:	ldrb	r3, [fp, #-33]	; 0xffffffdf
   1bfac:	cmp	r3, #0
   1bfb0:	beq	1bfbc <__assert_fail@plt+0xabd8>
   1bfb4:	mov	r3, #4
   1bfb8:	str	r3, [fp, #4]
   1bfbc:	ldr	r3, [fp, #8]
   1bfc0:	bic	r3, r3, #2
   1bfc4:	ldr	r2, [fp, #20]
   1bfc8:	str	r2, [sp, #16]
   1bfcc:	ldr	r2, [fp, #16]
   1bfd0:	str	r2, [sp, #12]
   1bfd4:	mov	r2, #0
   1bfd8:	str	r2, [sp, #8]
   1bfdc:	str	r3, [sp, #4]
   1bfe0:	ldr	r3, [fp, #4]
   1bfe4:	str	r3, [sp]
   1bfe8:	ldr	r3, [fp, #-100]	; 0xffffff9c
   1bfec:	ldr	r2, [fp, #-96]	; 0xffffffa0
   1bff0:	ldr	r1, [fp, #-92]	; 0xffffffa4
   1bff4:	ldr	r0, [fp, #-88]	; 0xffffffa8
   1bff8:	bl	1a960 <__assert_fail@plt+0x957c>
   1bffc:	mov	r3, r0
   1c000:	mov	r0, r3
   1c004:	sub	sp, fp, #8
   1c008:	pop	{r4, fp, pc}
   1c00c:	push	{fp, lr}
   1c010:	add	fp, sp, #4
   1c014:	sub	sp, sp, #56	; 0x38
   1c018:	str	r0, [fp, #-24]	; 0xffffffe8
   1c01c:	str	r1, [fp, #-28]	; 0xffffffe4
   1c020:	str	r2, [fp, #-32]	; 0xffffffe0
   1c024:	str	r3, [fp, #-36]	; 0xffffffdc
   1c028:	ldr	r3, [fp, #4]
   1c02c:	cmp	r3, #0
   1c030:	beq	1c03c <__assert_fail@plt+0xac58>
   1c034:	ldr	r3, [fp, #4]
   1c038:	b	1c040 <__assert_fail@plt+0xac5c>
   1c03c:	ldr	r3, [pc, #132]	; 1c0c8 <__assert_fail@plt+0xace4>
   1c040:	str	r3, [fp, #-8]
   1c044:	bl	112d0 <__errno_location@plt>
   1c048:	mov	r3, r0
   1c04c:	ldr	r3, [r3]
   1c050:	str	r3, [fp, #-12]
   1c054:	ldr	r3, [fp, #-8]
   1c058:	ldr	r3, [r3]
   1c05c:	ldr	r2, [fp, #-8]
   1c060:	ldr	r2, [r2, #4]
   1c064:	ldr	r1, [fp, #-8]
   1c068:	add	r1, r1, #8
   1c06c:	ldr	r0, [fp, #-8]
   1c070:	ldr	r0, [r0, #40]	; 0x28
   1c074:	ldr	ip, [fp, #-8]
   1c078:	ldr	ip, [ip, #44]	; 0x2c
   1c07c:	str	ip, [sp, #16]
   1c080:	str	r0, [sp, #12]
   1c084:	str	r1, [sp, #8]
   1c088:	str	r2, [sp, #4]
   1c08c:	str	r3, [sp]
   1c090:	ldr	r3, [fp, #-36]	; 0xffffffdc
   1c094:	ldr	r2, [fp, #-32]	; 0xffffffe0
   1c098:	ldr	r1, [fp, #-28]	; 0xffffffe4
   1c09c:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1c0a0:	bl	1a960 <__assert_fail@plt+0x957c>
   1c0a4:	str	r0, [fp, #-16]
   1c0a8:	bl	112d0 <__errno_location@plt>
   1c0ac:	mov	r2, r0
   1c0b0:	ldr	r3, [fp, #-12]
   1c0b4:	str	r3, [r2]
   1c0b8:	ldr	r3, [fp, #-16]
   1c0bc:	mov	r0, r3
   1c0c0:	sub	sp, fp, #4
   1c0c4:	pop	{fp, pc}
   1c0c8:			; <UNDEFINED> instruction: 0x000342b8
   1c0cc:	push	{fp, lr}
   1c0d0:	add	fp, sp, #4
   1c0d4:	sub	sp, sp, #16
   1c0d8:	str	r0, [fp, #-8]
   1c0dc:	str	r1, [fp, #-12]
   1c0e0:	str	r2, [fp, #-16]
   1c0e4:	ldr	r3, [fp, #-16]
   1c0e8:	mov	r2, #0
   1c0ec:	ldr	r1, [fp, #-12]
   1c0f0:	ldr	r0, [fp, #-8]
   1c0f4:	bl	1c108 <__assert_fail@plt+0xad24>
   1c0f8:	mov	r3, r0
   1c0fc:	mov	r0, r3
   1c100:	sub	sp, fp, #4
   1c104:	pop	{fp, pc}
   1c108:	push	{fp, lr}
   1c10c:	add	fp, sp, #4
   1c110:	sub	sp, sp, #64	; 0x40
   1c114:	str	r0, [fp, #-32]	; 0xffffffe0
   1c118:	str	r1, [fp, #-36]	; 0xffffffdc
   1c11c:	str	r2, [fp, #-40]	; 0xffffffd8
   1c120:	str	r3, [fp, #-44]	; 0xffffffd4
   1c124:	ldr	r3, [fp, #-44]	; 0xffffffd4
   1c128:	cmp	r3, #0
   1c12c:	beq	1c138 <__assert_fail@plt+0xad54>
   1c130:	ldr	r3, [fp, #-44]	; 0xffffffd4
   1c134:	b	1c13c <__assert_fail@plt+0xad58>
   1c138:	ldr	r3, [pc, #292]	; 1c264 <__assert_fail@plt+0xae80>
   1c13c:	str	r3, [fp, #-8]
   1c140:	bl	112d0 <__errno_location@plt>
   1c144:	mov	r3, r0
   1c148:	ldr	r3, [r3]
   1c14c:	str	r3, [fp, #-12]
   1c150:	ldr	r3, [fp, #-8]
   1c154:	ldr	r3, [r3, #4]
   1c158:	ldr	r2, [fp, #-40]	; 0xffffffd8
   1c15c:	cmp	r2, #0
   1c160:	moveq	r2, #1
   1c164:	movne	r2, #0
   1c168:	uxtb	r2, r2
   1c16c:	orr	r3, r3, r2
   1c170:	str	r3, [fp, #-16]
   1c174:	ldr	r3, [fp, #-8]
   1c178:	ldr	r3, [r3]
   1c17c:	ldr	r2, [fp, #-8]
   1c180:	add	r2, r2, #8
   1c184:	ldr	r1, [fp, #-8]
   1c188:	ldr	r1, [r1, #40]	; 0x28
   1c18c:	ldr	r0, [fp, #-8]
   1c190:	ldr	r0, [r0, #44]	; 0x2c
   1c194:	str	r0, [sp, #16]
   1c198:	str	r1, [sp, #12]
   1c19c:	str	r2, [sp, #8]
   1c1a0:	ldr	r2, [fp, #-16]
   1c1a4:	str	r2, [sp, #4]
   1c1a8:	str	r3, [sp]
   1c1ac:	ldr	r3, [fp, #-36]	; 0xffffffdc
   1c1b0:	ldr	r2, [fp, #-32]	; 0xffffffe0
   1c1b4:	mov	r1, #0
   1c1b8:	mov	r0, #0
   1c1bc:	bl	1a960 <__assert_fail@plt+0x957c>
   1c1c0:	mov	r3, r0
   1c1c4:	add	r3, r3, #1
   1c1c8:	str	r3, [fp, #-20]	; 0xffffffec
   1c1cc:	ldr	r0, [fp, #-20]	; 0xffffffec
   1c1d0:	bl	1df70 <__assert_fail@plt+0xcb8c>
   1c1d4:	mov	r3, r0
   1c1d8:	str	r3, [fp, #-24]	; 0xffffffe8
   1c1dc:	ldr	r3, [fp, #-8]
   1c1e0:	ldr	r3, [r3]
   1c1e4:	ldr	r2, [fp, #-8]
   1c1e8:	add	r2, r2, #8
   1c1ec:	ldr	r1, [fp, #-8]
   1c1f0:	ldr	r1, [r1, #40]	; 0x28
   1c1f4:	ldr	r0, [fp, #-8]
   1c1f8:	ldr	r0, [r0, #44]	; 0x2c
   1c1fc:	str	r0, [sp, #16]
   1c200:	str	r1, [sp, #12]
   1c204:	str	r2, [sp, #8]
   1c208:	ldr	r2, [fp, #-16]
   1c20c:	str	r2, [sp, #4]
   1c210:	str	r3, [sp]
   1c214:	ldr	r3, [fp, #-36]	; 0xffffffdc
   1c218:	ldr	r2, [fp, #-32]	; 0xffffffe0
   1c21c:	ldr	r1, [fp, #-20]	; 0xffffffec
   1c220:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1c224:	bl	1a960 <__assert_fail@plt+0x957c>
   1c228:	bl	112d0 <__errno_location@plt>
   1c22c:	mov	r2, r0
   1c230:	ldr	r3, [fp, #-12]
   1c234:	str	r3, [r2]
   1c238:	ldr	r3, [fp, #-40]	; 0xffffffd8
   1c23c:	cmp	r3, #0
   1c240:	beq	1c254 <__assert_fail@plt+0xae70>
   1c244:	ldr	r3, [fp, #-20]	; 0xffffffec
   1c248:	sub	r2, r3, #1
   1c24c:	ldr	r3, [fp, #-40]	; 0xffffffd8
   1c250:	str	r2, [r3]
   1c254:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1c258:	mov	r0, r3
   1c25c:	sub	sp, fp, #4
   1c260:	pop	{fp, pc}
   1c264:			; <UNDEFINED> instruction: 0x000342b8
   1c268:	push	{fp, lr}
   1c26c:	add	fp, sp, #4
   1c270:	sub	sp, sp, #8
   1c274:	ldr	r3, [pc, #196]	; 1c340 <__assert_fail@plt+0xaf5c>
   1c278:	ldr	r3, [r3]
   1c27c:	str	r3, [fp, #-12]
   1c280:	mov	r3, #1
   1c284:	str	r3, [fp, #-8]
   1c288:	b	1c2b4 <__assert_fail@plt+0xaed0>
   1c28c:	ldr	r3, [fp, #-8]
   1c290:	lsl	r3, r3, #3
   1c294:	ldr	r2, [fp, #-12]
   1c298:	add	r3, r2, r3
   1c29c:	ldr	r3, [r3, #4]
   1c2a0:	mov	r0, r3
   1c2a4:	bl	17130 <__assert_fail@plt+0x5d4c>
   1c2a8:	ldr	r3, [fp, #-8]
   1c2ac:	add	r3, r3, #1
   1c2b0:	str	r3, [fp, #-8]
   1c2b4:	ldr	r3, [pc, #136]	; 1c344 <__assert_fail@plt+0xaf60>
   1c2b8:	ldr	r3, [r3]
   1c2bc:	ldr	r2, [fp, #-8]
   1c2c0:	cmp	r2, r3
   1c2c4:	blt	1c28c <__assert_fail@plt+0xaea8>
   1c2c8:	ldr	r3, [fp, #-12]
   1c2cc:	ldr	r3, [r3, #4]
   1c2d0:	ldr	r2, [pc, #112]	; 1c348 <__assert_fail@plt+0xaf64>
   1c2d4:	cmp	r3, r2
   1c2d8:	beq	1c304 <__assert_fail@plt+0xaf20>
   1c2dc:	ldr	r3, [fp, #-12]
   1c2e0:	ldr	r3, [r3, #4]
   1c2e4:	mov	r0, r3
   1c2e8:	bl	17130 <__assert_fail@plt+0x5d4c>
   1c2ec:	ldr	r3, [pc, #88]	; 1c34c <__assert_fail@plt+0xaf68>
   1c2f0:	mov	r2, #256	; 0x100
   1c2f4:	str	r2, [r3]
   1c2f8:	ldr	r3, [pc, #76]	; 1c34c <__assert_fail@plt+0xaf68>
   1c2fc:	ldr	r2, [pc, #68]	; 1c348 <__assert_fail@plt+0xaf64>
   1c300:	str	r2, [r3, #4]
   1c304:	ldr	r3, [fp, #-12]
   1c308:	ldr	r2, [pc, #60]	; 1c34c <__assert_fail@plt+0xaf68>
   1c30c:	cmp	r3, r2
   1c310:	beq	1c328 <__assert_fail@plt+0xaf44>
   1c314:	ldr	r0, [fp, #-12]
   1c318:	bl	17130 <__assert_fail@plt+0x5d4c>
   1c31c:	ldr	r3, [pc, #28]	; 1c340 <__assert_fail@plt+0xaf5c>
   1c320:	ldr	r2, [pc, #36]	; 1c34c <__assert_fail@plt+0xaf68>
   1c324:	str	r2, [r3]
   1c328:	ldr	r3, [pc, #20]	; 1c344 <__assert_fail@plt+0xaf60>
   1c32c:	mov	r2, #1
   1c330:	str	r2, [r3]
   1c334:	nop			; (mov r0, r0)
   1c338:	sub	sp, fp, #4
   1c33c:	pop	{fp, pc}
   1c340:	muleq	r3, ip, r1
   1c344:	muleq	r3, r0, r1
   1c348:	andeq	r4, r3, r8, ror #5
   1c34c:	muleq	r3, r4, r1
   1c350:	push	{r4, fp, lr}
   1c354:	add	fp, sp, #8
   1c358:	sub	sp, sp, #84	; 0x54
   1c35c:	str	r0, [fp, #-56]	; 0xffffffc8
   1c360:	str	r1, [fp, #-60]	; 0xffffffc4
   1c364:	str	r2, [fp, #-64]	; 0xffffffc0
   1c368:	str	r3, [fp, #-68]	; 0xffffffbc
   1c36c:	bl	112d0 <__errno_location@plt>
   1c370:	mov	r3, r0
   1c374:	ldr	r3, [r3]
   1c378:	str	r3, [fp, #-24]	; 0xffffffe8
   1c37c:	ldr	r3, [pc, #640]	; 1c604 <__assert_fail@plt+0xb220>
   1c380:	ldr	r3, [r3]
   1c384:	str	r3, [fp, #-16]
   1c388:	mvn	r3, #-2147483648	; 0x80000000
   1c38c:	str	r3, [fp, #-28]	; 0xffffffe4
   1c390:	ldr	r3, [fp, #-56]	; 0xffffffc8
   1c394:	cmp	r3, #0
   1c398:	blt	1c3ac <__assert_fail@plt+0xafc8>
   1c39c:	ldr	r2, [fp, #-56]	; 0xffffffc8
   1c3a0:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1c3a4:	cmp	r2, r3
   1c3a8:	blt	1c3b0 <__assert_fail@plt+0xafcc>
   1c3ac:	bl	113c0 <abort@plt>
   1c3b0:	ldr	r3, [pc, #592]	; 1c608 <__assert_fail@plt+0xb224>
   1c3b4:	ldr	r2, [r3]
   1c3b8:	ldr	r3, [fp, #-56]	; 0xffffffc8
   1c3bc:	cmp	r2, r3
   1c3c0:	bgt	1c494 <__assert_fail@plt+0xb0b0>
   1c3c4:	ldr	r3, [fp, #-16]
   1c3c8:	ldr	r2, [pc, #572]	; 1c60c <__assert_fail@plt+0xb228>
   1c3cc:	cmp	r3, r2
   1c3d0:	moveq	r3, #1
   1c3d4:	movne	r3, #0
   1c3d8:	strb	r3, [fp, #-29]	; 0xffffffe3
   1c3dc:	ldr	r3, [pc, #548]	; 1c608 <__assert_fail@plt+0xb224>
   1c3e0:	ldr	r3, [r3]
   1c3e4:	str	r3, [fp, #-48]	; 0xffffffd0
   1c3e8:	ldrb	r3, [fp, #-29]	; 0xffffffe3
   1c3ec:	cmp	r3, #0
   1c3f0:	beq	1c3fc <__assert_fail@plt+0xb018>
   1c3f4:	mov	r0, #0
   1c3f8:	b	1c400 <__assert_fail@plt+0xb01c>
   1c3fc:	ldr	r0, [fp, #-16]
   1c400:	ldr	r3, [pc, #512]	; 1c608 <__assert_fail@plt+0xb224>
   1c404:	ldr	r3, [r3]
   1c408:	ldr	r2, [fp, #-56]	; 0xffffffc8
   1c40c:	sub	r3, r2, r3
   1c410:	add	r2, r3, #1
   1c414:	sub	r1, fp, #48	; 0x30
   1c418:	mov	r3, #8
   1c41c:	str	r3, [sp]
   1c420:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1c424:	bl	1e290 <__assert_fail@plt+0xceac>
   1c428:	str	r0, [fp, #-16]
   1c42c:	ldr	r2, [pc, #464]	; 1c604 <__assert_fail@plt+0xb220>
   1c430:	ldr	r3, [fp, #-16]
   1c434:	str	r3, [r2]
   1c438:	ldrb	r3, [fp, #-29]	; 0xffffffe3
   1c43c:	cmp	r3, #0
   1c440:	beq	1c454 <__assert_fail@plt+0xb070>
   1c444:	ldr	r3, [fp, #-16]
   1c448:	ldr	r2, [pc, #444]	; 1c60c <__assert_fail@plt+0xb228>
   1c44c:	ldm	r2, {r0, r1}
   1c450:	stm	r3, {r0, r1}
   1c454:	ldr	r3, [pc, #428]	; 1c608 <__assert_fail@plt+0xb224>
   1c458:	ldr	r3, [r3]
   1c45c:	lsl	r3, r3, #3
   1c460:	ldr	r2, [fp, #-16]
   1c464:	add	r0, r2, r3
   1c468:	ldr	r2, [fp, #-48]	; 0xffffffd0
   1c46c:	ldr	r3, [pc, #404]	; 1c608 <__assert_fail@plt+0xb224>
   1c470:	ldr	r3, [r3]
   1c474:	sub	r3, r2, r3
   1c478:	lsl	r3, r3, #3
   1c47c:	mov	r2, r3
   1c480:	mov	r1, #0
   1c484:	bl	112e8 <memset@plt>
   1c488:	ldr	r3, [fp, #-48]	; 0xffffffd0
   1c48c:	ldr	r2, [pc, #372]	; 1c608 <__assert_fail@plt+0xb224>
   1c490:	str	r3, [r2]
   1c494:	ldr	r3, [fp, #-56]	; 0xffffffc8
   1c498:	lsl	r3, r3, #3
   1c49c:	ldr	r2, [fp, #-16]
   1c4a0:	add	r3, r2, r3
   1c4a4:	ldr	r3, [r3]
   1c4a8:	str	r3, [fp, #-36]	; 0xffffffdc
   1c4ac:	ldr	r3, [fp, #-56]	; 0xffffffc8
   1c4b0:	lsl	r3, r3, #3
   1c4b4:	ldr	r2, [fp, #-16]
   1c4b8:	add	r3, r2, r3
   1c4bc:	ldr	r3, [r3, #4]
   1c4c0:	str	r3, [fp, #-20]	; 0xffffffec
   1c4c4:	ldr	r3, [fp, #-68]	; 0xffffffbc
   1c4c8:	ldr	r3, [r3, #4]
   1c4cc:	orr	r3, r3, #1
   1c4d0:	str	r3, [fp, #-40]	; 0xffffffd8
   1c4d4:	ldr	r3, [fp, #-68]	; 0xffffffbc
   1c4d8:	ldr	r3, [r3]
   1c4dc:	ldr	r2, [fp, #-68]	; 0xffffffbc
   1c4e0:	add	r2, r2, #8
   1c4e4:	ldr	r1, [fp, #-68]	; 0xffffffbc
   1c4e8:	ldr	r1, [r1, #40]	; 0x28
   1c4ec:	ldr	r0, [fp, #-68]	; 0xffffffbc
   1c4f0:	ldr	r0, [r0, #44]	; 0x2c
   1c4f4:	str	r0, [sp, #16]
   1c4f8:	str	r1, [sp, #12]
   1c4fc:	str	r2, [sp, #8]
   1c500:	ldr	r2, [fp, #-40]	; 0xffffffd8
   1c504:	str	r2, [sp, #4]
   1c508:	str	r3, [sp]
   1c50c:	ldr	r3, [fp, #-64]	; 0xffffffc0
   1c510:	ldr	r2, [fp, #-60]	; 0xffffffc4
   1c514:	ldr	r1, [fp, #-36]	; 0xffffffdc
   1c518:	ldr	r0, [fp, #-20]	; 0xffffffec
   1c51c:	bl	1a960 <__assert_fail@plt+0x957c>
   1c520:	str	r0, [fp, #-44]	; 0xffffffd4
   1c524:	ldr	r2, [fp, #-36]	; 0xffffffdc
   1c528:	ldr	r3, [fp, #-44]	; 0xffffffd4
   1c52c:	cmp	r2, r3
   1c530:	bhi	1c5e4 <__assert_fail@plt+0xb200>
   1c534:	ldr	r3, [fp, #-56]	; 0xffffffc8
   1c538:	lsl	r3, r3, #3
   1c53c:	ldr	r2, [fp, #-16]
   1c540:	add	r3, r2, r3
   1c544:	ldr	r2, [fp, #-44]	; 0xffffffd4
   1c548:	add	r2, r2, #1
   1c54c:	str	r2, [fp, #-36]	; 0xffffffdc
   1c550:	ldr	r2, [fp, #-36]	; 0xffffffdc
   1c554:	str	r2, [r3]
   1c558:	ldr	r3, [fp, #-20]	; 0xffffffec
   1c55c:	ldr	r2, [pc, #172]	; 1c610 <__assert_fail@plt+0xb22c>
   1c560:	cmp	r3, r2
   1c564:	beq	1c570 <__assert_fail@plt+0xb18c>
   1c568:	ldr	r0, [fp, #-20]	; 0xffffffec
   1c56c:	bl	17130 <__assert_fail@plt+0x5d4c>
   1c570:	ldr	r3, [fp, #-56]	; 0xffffffc8
   1c574:	lsl	r3, r3, #3
   1c578:	ldr	r2, [fp, #-16]
   1c57c:	add	r4, r2, r3
   1c580:	ldr	r0, [fp, #-36]	; 0xffffffdc
   1c584:	bl	1df70 <__assert_fail@plt+0xcb8c>
   1c588:	mov	r3, r0
   1c58c:	str	r3, [fp, #-20]	; 0xffffffec
   1c590:	ldr	r3, [fp, #-20]	; 0xffffffec
   1c594:	str	r3, [r4, #4]
   1c598:	ldr	r3, [fp, #-68]	; 0xffffffbc
   1c59c:	ldr	r3, [r3]
   1c5a0:	ldr	r2, [fp, #-68]	; 0xffffffbc
   1c5a4:	add	r2, r2, #8
   1c5a8:	ldr	r1, [fp, #-68]	; 0xffffffbc
   1c5ac:	ldr	r1, [r1, #40]	; 0x28
   1c5b0:	ldr	r0, [fp, #-68]	; 0xffffffbc
   1c5b4:	ldr	r0, [r0, #44]	; 0x2c
   1c5b8:	str	r0, [sp, #16]
   1c5bc:	str	r1, [sp, #12]
   1c5c0:	str	r2, [sp, #8]
   1c5c4:	ldr	r2, [fp, #-40]	; 0xffffffd8
   1c5c8:	str	r2, [sp, #4]
   1c5cc:	str	r3, [sp]
   1c5d0:	ldr	r3, [fp, #-64]	; 0xffffffc0
   1c5d4:	ldr	r2, [fp, #-60]	; 0xffffffc4
   1c5d8:	ldr	r1, [fp, #-36]	; 0xffffffdc
   1c5dc:	ldr	r0, [fp, #-20]	; 0xffffffec
   1c5e0:	bl	1a960 <__assert_fail@plt+0x957c>
   1c5e4:	bl	112d0 <__errno_location@plt>
   1c5e8:	mov	r2, r0
   1c5ec:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1c5f0:	str	r3, [r2]
   1c5f4:	ldr	r3, [fp, #-20]	; 0xffffffec
   1c5f8:	mov	r0, r3
   1c5fc:	sub	sp, fp, #8
   1c600:	pop	{r4, fp, pc}
   1c604:	muleq	r3, ip, r1
   1c608:	muleq	r3, r0, r1
   1c60c:	muleq	r3, r4, r1
   1c610:	andeq	r4, r3, r8, ror #5
   1c614:	push	{fp, lr}
   1c618:	add	fp, sp, #4
   1c61c:	sub	sp, sp, #8
   1c620:	str	r0, [fp, #-8]
   1c624:	str	r1, [fp, #-12]
   1c628:	ldr	r3, [pc, #28]	; 1c64c <__assert_fail@plt+0xb268>
   1c62c:	mvn	r2, #0
   1c630:	ldr	r1, [fp, #-12]
   1c634:	ldr	r0, [fp, #-8]
   1c638:	bl	1c350 <__assert_fail@plt+0xaf6c>
   1c63c:	mov	r3, r0
   1c640:	mov	r0, r3
   1c644:	sub	sp, fp, #4
   1c648:	pop	{fp, pc}
   1c64c:			; <UNDEFINED> instruction: 0x000342b8
   1c650:	push	{fp, lr}
   1c654:	add	fp, sp, #4
   1c658:	sub	sp, sp, #16
   1c65c:	str	r0, [fp, #-8]
   1c660:	str	r1, [fp, #-12]
   1c664:	str	r2, [fp, #-16]
   1c668:	ldr	r3, [pc, #28]	; 1c68c <__assert_fail@plt+0xb2a8>
   1c66c:	ldr	r2, [fp, #-16]
   1c670:	ldr	r1, [fp, #-12]
   1c674:	ldr	r0, [fp, #-8]
   1c678:	bl	1c350 <__assert_fail@plt+0xaf6c>
   1c67c:	mov	r3, r0
   1c680:	mov	r0, r3
   1c684:	sub	sp, fp, #4
   1c688:	pop	{fp, pc}
   1c68c:			; <UNDEFINED> instruction: 0x000342b8
   1c690:	push	{fp, lr}
   1c694:	add	fp, sp, #4
   1c698:	sub	sp, sp, #8
   1c69c:	str	r0, [fp, #-8]
   1c6a0:	ldr	r1, [fp, #-8]
   1c6a4:	mov	r0, #0
   1c6a8:	bl	1c614 <__assert_fail@plt+0xb230>
   1c6ac:	mov	r3, r0
   1c6b0:	mov	r0, r3
   1c6b4:	sub	sp, fp, #4
   1c6b8:	pop	{fp, pc}
   1c6bc:	push	{fp, lr}
   1c6c0:	add	fp, sp, #4
   1c6c4:	sub	sp, sp, #8
   1c6c8:	str	r0, [fp, #-8]
   1c6cc:	str	r1, [fp, #-12]
   1c6d0:	ldr	r2, [fp, #-12]
   1c6d4:	ldr	r1, [fp, #-8]
   1c6d8:	mov	r0, #0
   1c6dc:	bl	1c650 <__assert_fail@plt+0xb26c>
   1c6e0:	mov	r3, r0
   1c6e4:	mov	r0, r3
   1c6e8:	sub	sp, fp, #4
   1c6ec:	pop	{fp, pc}
   1c6f0:	push	{fp, lr}
   1c6f4:	add	fp, sp, #4
   1c6f8:	sub	sp, sp, #64	; 0x40
   1c6fc:	str	r0, [fp, #-56]	; 0xffffffc8
   1c700:	str	r1, [fp, #-60]	; 0xffffffc4
   1c704:	str	r2, [fp, #-64]	; 0xffffffc0
   1c708:	sub	r3, fp, #52	; 0x34
   1c70c:	ldr	r1, [fp, #-60]	; 0xffffffc4
   1c710:	mov	r0, r3
   1c714:	bl	1a7fc <__assert_fail@plt+0x9418>
   1c718:	sub	r3, fp, #52	; 0x34
   1c71c:	mvn	r2, #0
   1c720:	ldr	r1, [fp, #-64]	; 0xffffffc0
   1c724:	ldr	r0, [fp, #-56]	; 0xffffffc8
   1c728:	bl	1c350 <__assert_fail@plt+0xaf6c>
   1c72c:	mov	r3, r0
   1c730:	mov	r0, r3
   1c734:	sub	sp, fp, #4
   1c738:	pop	{fp, pc}
   1c73c:	push	{fp, lr}
   1c740:	add	fp, sp, #4
   1c744:	sub	sp, sp, #64	; 0x40
   1c748:	str	r0, [fp, #-56]	; 0xffffffc8
   1c74c:	str	r1, [fp, #-60]	; 0xffffffc4
   1c750:	str	r2, [fp, #-64]	; 0xffffffc0
   1c754:	str	r3, [fp, #-68]	; 0xffffffbc
   1c758:	sub	r3, fp, #52	; 0x34
   1c75c:	ldr	r1, [fp, #-60]	; 0xffffffc4
   1c760:	mov	r0, r3
   1c764:	bl	1a7fc <__assert_fail@plt+0x9418>
   1c768:	sub	r3, fp, #52	; 0x34
   1c76c:	ldr	r2, [fp, #-68]	; 0xffffffbc
   1c770:	ldr	r1, [fp, #-64]	; 0xffffffc0
   1c774:	ldr	r0, [fp, #-56]	; 0xffffffc8
   1c778:	bl	1c350 <__assert_fail@plt+0xaf6c>
   1c77c:	mov	r3, r0
   1c780:	mov	r0, r3
   1c784:	sub	sp, fp, #4
   1c788:	pop	{fp, pc}
   1c78c:	push	{fp, lr}
   1c790:	add	fp, sp, #4
   1c794:	sub	sp, sp, #8
   1c798:	str	r0, [fp, #-8]
   1c79c:	str	r1, [fp, #-12]
   1c7a0:	ldr	r2, [fp, #-12]
   1c7a4:	ldr	r1, [fp, #-8]
   1c7a8:	mov	r0, #0
   1c7ac:	bl	1c6f0 <__assert_fail@plt+0xb30c>
   1c7b0:	mov	r3, r0
   1c7b4:	mov	r0, r3
   1c7b8:	sub	sp, fp, #4
   1c7bc:	pop	{fp, pc}
   1c7c0:	push	{fp, lr}
   1c7c4:	add	fp, sp, #4
   1c7c8:	sub	sp, sp, #16
   1c7cc:	str	r0, [fp, #-8]
   1c7d0:	str	r1, [fp, #-12]
   1c7d4:	str	r2, [fp, #-16]
   1c7d8:	ldr	r3, [fp, #-16]
   1c7dc:	ldr	r2, [fp, #-12]
   1c7e0:	ldr	r1, [fp, #-8]
   1c7e4:	mov	r0, #0
   1c7e8:	bl	1c73c <__assert_fail@plt+0xb358>
   1c7ec:	mov	r3, r0
   1c7f0:	mov	r0, r3
   1c7f4:	sub	sp, fp, #4
   1c7f8:	pop	{fp, pc}
   1c7fc:	push	{fp, lr}
   1c800:	add	fp, sp, #4
   1c804:	sub	sp, sp, #64	; 0x40
   1c808:	str	r0, [fp, #-56]	; 0xffffffc8
   1c80c:	str	r1, [fp, #-60]	; 0xffffffc4
   1c810:	mov	r3, r2
   1c814:	strb	r3, [fp, #-61]	; 0xffffffc3
   1c818:	ldr	r3, [pc, #84]	; 1c874 <__assert_fail@plt+0xb490>
   1c81c:	sub	ip, fp, #52	; 0x34
   1c820:	mov	lr, r3
   1c824:	ldm	lr!, {r0, r1, r2, r3}
   1c828:	stmia	ip!, {r0, r1, r2, r3}
   1c82c:	ldm	lr!, {r0, r1, r2, r3}
   1c830:	stmia	ip!, {r0, r1, r2, r3}
   1c834:	ldm	lr, {r0, r1, r2, r3}
   1c838:	stm	ip, {r0, r1, r2, r3}
   1c83c:	ldrb	r1, [fp, #-61]	; 0xffffffc3
   1c840:	sub	r3, fp, #52	; 0x34
   1c844:	mov	r2, #1
   1c848:	mov	r0, r3
   1c84c:	bl	1a668 <__assert_fail@plt+0x9284>
   1c850:	sub	r3, fp, #52	; 0x34
   1c854:	ldr	r2, [fp, #-60]	; 0xffffffc4
   1c858:	ldr	r1, [fp, #-56]	; 0xffffffc8
   1c85c:	mov	r0, #0
   1c860:	bl	1c350 <__assert_fail@plt+0xaf6c>
   1c864:	mov	r3, r0
   1c868:	mov	r0, r3
   1c86c:	sub	sp, fp, #4
   1c870:	pop	{fp, pc}
   1c874:			; <UNDEFINED> instruction: 0x000342b8
   1c878:	push	{fp, lr}
   1c87c:	add	fp, sp, #4
   1c880:	sub	sp, sp, #8
   1c884:	str	r0, [fp, #-8]
   1c888:	mov	r3, r1
   1c88c:	strb	r3, [fp, #-9]
   1c890:	ldrb	r3, [fp, #-9]
   1c894:	mov	r2, r3
   1c898:	mvn	r1, #0
   1c89c:	ldr	r0, [fp, #-8]
   1c8a0:	bl	1c7fc <__assert_fail@plt+0xb418>
   1c8a4:	mov	r3, r0
   1c8a8:	mov	r0, r3
   1c8ac:	sub	sp, fp, #4
   1c8b0:	pop	{fp, pc}
   1c8b4:	push	{fp, lr}
   1c8b8:	add	fp, sp, #4
   1c8bc:	sub	sp, sp, #8
   1c8c0:	str	r0, [fp, #-8]
   1c8c4:	mov	r1, #58	; 0x3a
   1c8c8:	ldr	r0, [fp, #-8]
   1c8cc:	bl	1c878 <__assert_fail@plt+0xb494>
   1c8d0:	mov	r3, r0
   1c8d4:	mov	r0, r3
   1c8d8:	sub	sp, fp, #4
   1c8dc:	pop	{fp, pc}
   1c8e0:	push	{fp, lr}
   1c8e4:	add	fp, sp, #4
   1c8e8:	sub	sp, sp, #8
   1c8ec:	str	r0, [fp, #-8]
   1c8f0:	str	r1, [fp, #-12]
   1c8f4:	mov	r2, #58	; 0x3a
   1c8f8:	ldr	r1, [fp, #-12]
   1c8fc:	ldr	r0, [fp, #-8]
   1c900:	bl	1c7fc <__assert_fail@plt+0xb418>
   1c904:	mov	r3, r0
   1c908:	mov	r0, r3
   1c90c:	sub	sp, fp, #4
   1c910:	pop	{fp, pc}
   1c914:	push	{fp, lr}
   1c918:	add	fp, sp, #4
   1c91c:	sub	sp, sp, #112	; 0x70
   1c920:	str	r0, [fp, #-56]	; 0xffffffc8
   1c924:	str	r1, [fp, #-60]	; 0xffffffc4
   1c928:	str	r2, [fp, #-64]	; 0xffffffc0
   1c92c:	sub	r3, fp, #116	; 0x74
   1c930:	ldr	r1, [fp, #-60]	; 0xffffffc4
   1c934:	mov	r0, r3
   1c938:	bl	1a7fc <__assert_fail@plt+0x9418>
   1c93c:	sub	ip, fp, #52	; 0x34
   1c940:	sub	lr, fp, #116	; 0x74
   1c944:	ldm	lr!, {r0, r1, r2, r3}
   1c948:	stmia	ip!, {r0, r1, r2, r3}
   1c94c:	ldm	lr!, {r0, r1, r2, r3}
   1c950:	stmia	ip!, {r0, r1, r2, r3}
   1c954:	ldm	lr, {r0, r1, r2, r3}
   1c958:	stm	ip, {r0, r1, r2, r3}
   1c95c:	sub	r3, fp, #52	; 0x34
   1c960:	mov	r2, #1
   1c964:	mov	r1, #58	; 0x3a
   1c968:	mov	r0, r3
   1c96c:	bl	1a668 <__assert_fail@plt+0x9284>
   1c970:	sub	r3, fp, #52	; 0x34
   1c974:	mvn	r2, #0
   1c978:	ldr	r1, [fp, #-64]	; 0xffffffc0
   1c97c:	ldr	r0, [fp, #-56]	; 0xffffffc8
   1c980:	bl	1c350 <__assert_fail@plt+0xaf6c>
   1c984:	mov	r3, r0
   1c988:	mov	r0, r3
   1c98c:	sub	sp, fp, #4
   1c990:	pop	{fp, pc}
   1c994:	push	{fp, lr}
   1c998:	add	fp, sp, #4
   1c99c:	sub	sp, sp, #24
   1c9a0:	str	r0, [fp, #-8]
   1c9a4:	str	r1, [fp, #-12]
   1c9a8:	str	r2, [fp, #-16]
   1c9ac:	str	r3, [fp, #-20]	; 0xffffffec
   1c9b0:	mvn	r3, #0
   1c9b4:	str	r3, [sp]
   1c9b8:	ldr	r3, [fp, #-20]	; 0xffffffec
   1c9bc:	ldr	r2, [fp, #-16]
   1c9c0:	ldr	r1, [fp, #-12]
   1c9c4:	ldr	r0, [fp, #-8]
   1c9c8:	bl	1c9dc <__assert_fail@plt+0xb5f8>
   1c9cc:	mov	r3, r0
   1c9d0:	mov	r0, r3
   1c9d4:	sub	sp, fp, #4
   1c9d8:	pop	{fp, pc}
   1c9dc:	push	{fp, lr}
   1c9e0:	add	fp, sp, #4
   1c9e4:	sub	sp, sp, #64	; 0x40
   1c9e8:	str	r0, [fp, #-56]	; 0xffffffc8
   1c9ec:	str	r1, [fp, #-60]	; 0xffffffc4
   1c9f0:	str	r2, [fp, #-64]	; 0xffffffc0
   1c9f4:	str	r3, [fp, #-68]	; 0xffffffbc
   1c9f8:	ldr	r3, [pc, #84]	; 1ca54 <__assert_fail@plt+0xb670>
   1c9fc:	sub	ip, fp, #52	; 0x34
   1ca00:	mov	lr, r3
   1ca04:	ldm	lr!, {r0, r1, r2, r3}
   1ca08:	stmia	ip!, {r0, r1, r2, r3}
   1ca0c:	ldm	lr!, {r0, r1, r2, r3}
   1ca10:	stmia	ip!, {r0, r1, r2, r3}
   1ca14:	ldm	lr, {r0, r1, r2, r3}
   1ca18:	stm	ip, {r0, r1, r2, r3}
   1ca1c:	sub	r3, fp, #52	; 0x34
   1ca20:	ldr	r2, [fp, #-64]	; 0xffffffc0
   1ca24:	ldr	r1, [fp, #-60]	; 0xffffffc4
   1ca28:	mov	r0, r3
   1ca2c:	bl	1a780 <__assert_fail@plt+0x939c>
   1ca30:	sub	r3, fp, #52	; 0x34
   1ca34:	ldr	r2, [fp, #4]
   1ca38:	ldr	r1, [fp, #-68]	; 0xffffffbc
   1ca3c:	ldr	r0, [fp, #-56]	; 0xffffffc8
   1ca40:	bl	1c350 <__assert_fail@plt+0xaf6c>
   1ca44:	mov	r3, r0
   1ca48:	mov	r0, r3
   1ca4c:	sub	sp, fp, #4
   1ca50:	pop	{fp, pc}
   1ca54:			; <UNDEFINED> instruction: 0x000342b8
   1ca58:	push	{fp, lr}
   1ca5c:	add	fp, sp, #4
   1ca60:	sub	sp, sp, #16
   1ca64:	str	r0, [fp, #-8]
   1ca68:	str	r1, [fp, #-12]
   1ca6c:	str	r2, [fp, #-16]
   1ca70:	ldr	r3, [fp, #-16]
   1ca74:	ldr	r2, [fp, #-12]
   1ca78:	ldr	r1, [fp, #-8]
   1ca7c:	mov	r0, #0
   1ca80:	bl	1c994 <__assert_fail@plt+0xb5b0>
   1ca84:	mov	r3, r0
   1ca88:	mov	r0, r3
   1ca8c:	sub	sp, fp, #4
   1ca90:	pop	{fp, pc}
   1ca94:	push	{fp, lr}
   1ca98:	add	fp, sp, #4
   1ca9c:	sub	sp, sp, #24
   1caa0:	str	r0, [fp, #-8]
   1caa4:	str	r1, [fp, #-12]
   1caa8:	str	r2, [fp, #-16]
   1caac:	str	r3, [fp, #-20]	; 0xffffffec
   1cab0:	ldr	r3, [fp, #-20]	; 0xffffffec
   1cab4:	str	r3, [sp]
   1cab8:	ldr	r3, [fp, #-16]
   1cabc:	ldr	r2, [fp, #-12]
   1cac0:	ldr	r1, [fp, #-8]
   1cac4:	mov	r0, #0
   1cac8:	bl	1c9dc <__assert_fail@plt+0xb5f8>
   1cacc:	mov	r3, r0
   1cad0:	mov	r0, r3
   1cad4:	sub	sp, fp, #4
   1cad8:	pop	{fp, pc}
   1cadc:	push	{fp, lr}
   1cae0:	add	fp, sp, #4
   1cae4:	sub	sp, sp, #16
   1cae8:	str	r0, [fp, #-8]
   1caec:	str	r1, [fp, #-12]
   1caf0:	str	r2, [fp, #-16]
   1caf4:	ldr	r3, [pc, #28]	; 1cb18 <__assert_fail@plt+0xb734>
   1caf8:	ldr	r2, [fp, #-16]
   1cafc:	ldr	r1, [fp, #-12]
   1cb00:	ldr	r0, [fp, #-8]
   1cb04:	bl	1c350 <__assert_fail@plt+0xaf6c>
   1cb08:	mov	r3, r0
   1cb0c:	mov	r0, r3
   1cb10:	sub	sp, fp, #4
   1cb14:	pop	{fp, pc}
   1cb18:	andeq	r4, r3, r0, lsr #3
   1cb1c:	push	{fp, lr}
   1cb20:	add	fp, sp, #4
   1cb24:	sub	sp, sp, #8
   1cb28:	str	r0, [fp, #-8]
   1cb2c:	str	r1, [fp, #-12]
   1cb30:	ldr	r2, [fp, #-12]
   1cb34:	ldr	r1, [fp, #-8]
   1cb38:	mov	r0, #0
   1cb3c:	bl	1cadc <__assert_fail@plt+0xb6f8>
   1cb40:	mov	r3, r0
   1cb44:	mov	r0, r3
   1cb48:	sub	sp, fp, #4
   1cb4c:	pop	{fp, pc}
   1cb50:	push	{fp, lr}
   1cb54:	add	fp, sp, #4
   1cb58:	sub	sp, sp, #8
   1cb5c:	str	r0, [fp, #-8]
   1cb60:	str	r1, [fp, #-12]
   1cb64:	mvn	r2, #0
   1cb68:	ldr	r1, [fp, #-12]
   1cb6c:	ldr	r0, [fp, #-8]
   1cb70:	bl	1cadc <__assert_fail@plt+0xb6f8>
   1cb74:	mov	r3, r0
   1cb78:	mov	r0, r3
   1cb7c:	sub	sp, fp, #4
   1cb80:	pop	{fp, pc}
   1cb84:	push	{fp, lr}
   1cb88:	add	fp, sp, #4
   1cb8c:	sub	sp, sp, #8
   1cb90:	str	r0, [fp, #-8]
   1cb94:	ldr	r1, [fp, #-8]
   1cb98:	mov	r0, #0
   1cb9c:	bl	1cb50 <__assert_fail@plt+0xb76c>
   1cba0:	mov	r3, r0
   1cba4:	mov	r0, r3
   1cba8:	sub	sp, fp, #4
   1cbac:	pop	{fp, pc}
   1cbb0:	push	{fp, lr}
   1cbb4:	add	fp, sp, #4
   1cbb8:	sub	sp, sp, #16
   1cbbc:	str	r0, [fp, #-16]
   1cbc0:	mov	r1, #0
   1cbc4:	ldr	r0, [fp, #-16]
   1cbc8:	bl	1133c <setlocale@plt>
   1cbcc:	str	r0, [fp, #-8]
   1cbd0:	ldr	r3, [fp, #-8]
   1cbd4:	mov	r0, r3
   1cbd8:	sub	sp, fp, #4
   1cbdc:	pop	{fp, pc}
   1cbe0:	push	{fp, lr}
   1cbe4:	add	fp, sp, #4
   1cbe8:	sub	sp, sp, #24
   1cbec:	str	r0, [fp, #-16]
   1cbf0:	str	r1, [fp, #-20]	; 0xffffffec
   1cbf4:	str	r2, [fp, #-24]	; 0xffffffe8
   1cbf8:	ldr	r0, [fp, #-16]
   1cbfc:	bl	1cbb0 <__assert_fail@plt+0xb7cc>
   1cc00:	str	r0, [fp, #-8]
   1cc04:	ldr	r3, [fp, #-8]
   1cc08:	cmp	r3, #0
   1cc0c:	bne	1cc30 <__assert_fail@plt+0xb84c>
   1cc10:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1cc14:	cmp	r3, #0
   1cc18:	beq	1cc28 <__assert_fail@plt+0xb844>
   1cc1c:	ldr	r3, [fp, #-20]	; 0xffffffec
   1cc20:	mov	r2, #0
   1cc24:	strb	r2, [r3]
   1cc28:	mov	r3, #22
   1cc2c:	b	1ccac <__assert_fail@plt+0xb8c8>
   1cc30:	ldr	r0, [fp, #-8]
   1cc34:	bl	11294 <strlen@plt>
   1cc38:	str	r0, [fp, #-12]
   1cc3c:	ldr	r2, [fp, #-12]
   1cc40:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1cc44:	cmp	r2, r3
   1cc48:	bcs	1cc6c <__assert_fail@plt+0xb888>
   1cc4c:	ldr	r3, [fp, #-12]
   1cc50:	add	r3, r3, #1
   1cc54:	mov	r2, r3
   1cc58:	ldr	r1, [fp, #-8]
   1cc5c:	ldr	r0, [fp, #-20]	; 0xffffffec
   1cc60:	bl	1112c <memcpy@plt>
   1cc64:	mov	r3, #0
   1cc68:	b	1ccac <__assert_fail@plt+0xb8c8>
   1cc6c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1cc70:	cmp	r3, #0
   1cc74:	beq	1cca8 <__assert_fail@plt+0xb8c4>
   1cc78:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1cc7c:	sub	r3, r3, #1
   1cc80:	mov	r2, r3
   1cc84:	ldr	r1, [fp, #-8]
   1cc88:	ldr	r0, [fp, #-20]	; 0xffffffec
   1cc8c:	bl	1112c <memcpy@plt>
   1cc90:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1cc94:	sub	r3, r3, #1
   1cc98:	ldr	r2, [fp, #-20]	; 0xffffffec
   1cc9c:	add	r3, r2, r3
   1cca0:	mov	r2, #0
   1cca4:	strb	r2, [r3]
   1cca8:	mov	r3, #34	; 0x22
   1ccac:	mov	r0, r3
   1ccb0:	sub	sp, fp, #4
   1ccb4:	pop	{fp, pc}
   1ccb8:	push	{fp, lr}
   1ccbc:	add	fp, sp, #4
   1ccc0:	sub	sp, sp, #16
   1ccc4:	str	r0, [fp, #-8]
   1ccc8:	str	r1, [fp, #-12]
   1cccc:	str	r2, [fp, #-16]
   1ccd0:	ldr	r2, [fp, #-16]
   1ccd4:	ldr	r1, [fp, #-12]
   1ccd8:	ldr	r0, [fp, #-8]
   1ccdc:	bl	1cbe0 <__assert_fail@plt+0xb7fc>
   1cce0:	mov	r3, r0
   1cce4:	mov	r0, r3
   1cce8:	sub	sp, fp, #4
   1ccec:	pop	{fp, pc}
   1ccf0:	push	{fp, lr}
   1ccf4:	add	fp, sp, #4
   1ccf8:	sub	sp, sp, #8
   1ccfc:	str	r0, [fp, #-8]
   1cd00:	ldr	r0, [fp, #-8]
   1cd04:	bl	1cbb0 <__assert_fail@plt+0xb7cc>
   1cd08:	mov	r3, r0
   1cd0c:	mov	r0, r3
   1cd10:	sub	sp, fp, #4
   1cd14:	pop	{fp, pc}
   1cd18:	push	{fp}		; (str fp, [sp, #-4]!)
   1cd1c:	add	fp, sp, #0
   1cd20:	sub	sp, sp, #12
   1cd24:	str	r0, [fp, #-8]
   1cd28:	ldr	r3, [fp, #-8]
   1cd2c:	ldr	r3, [r3, #76]	; 0x4c
   1cd30:	mov	r0, r3
   1cd34:	add	sp, fp, #0
   1cd38:	pop	{fp}		; (ldr fp, [sp], #4)
   1cd3c:	bx	lr
   1cd40:	push	{fp}		; (str fp, [sp, #-4]!)
   1cd44:	add	fp, sp, #0
   1cd48:	sub	sp, sp, #12
   1cd4c:	str	r0, [fp, #-8]
   1cd50:	ldr	r3, [fp, #-8]
   1cd54:	ldr	r3, [r3, #92]	; 0x5c
   1cd58:	mov	r0, r3
   1cd5c:	add	sp, fp, #0
   1cd60:	pop	{fp}		; (ldr fp, [sp], #4)
   1cd64:	bx	lr
   1cd68:	push	{fp}		; (str fp, [sp, #-4]!)
   1cd6c:	add	fp, sp, #0
   1cd70:	sub	sp, sp, #12
   1cd74:	str	r0, [fp, #-8]
   1cd78:	ldr	r3, [fp, #-8]
   1cd7c:	ldr	r3, [r3, #84]	; 0x54
   1cd80:	mov	r0, r3
   1cd84:	add	sp, fp, #0
   1cd88:	pop	{fp}		; (ldr fp, [sp], #4)
   1cd8c:	bx	lr
   1cd90:	push	{fp}		; (str fp, [sp, #-4]!)
   1cd94:	add	fp, sp, #0
   1cd98:	sub	sp, sp, #12
   1cd9c:	str	r0, [fp, #-8]
   1cda0:	mov	r3, #0
   1cda4:	mov	r0, r3
   1cda8:	add	sp, fp, #0
   1cdac:	pop	{fp}		; (ldr fp, [sp], #4)
   1cdb0:	bx	lr
   1cdb4:	push	{fp}		; (str fp, [sp, #-4]!)
   1cdb8:	add	fp, sp, #0
   1cdbc:	sub	sp, sp, #12
   1cdc0:	str	r0, [fp, #-8]
   1cdc4:	str	r1, [fp, #-12]
   1cdc8:	ldr	r2, [fp, #-8]
   1cdcc:	ldr	r3, [fp, #-12]
   1cdd0:	add	r3, r3, #72	; 0x48
   1cdd4:	ldm	r3, {r0, r1}
   1cdd8:	stm	r2, {r0, r1}
   1cddc:	ldr	r0, [fp, #-8]
   1cde0:	add	sp, fp, #0
   1cde4:	pop	{fp}		; (ldr fp, [sp], #4)
   1cde8:	bx	lr
   1cdec:	push	{fp}		; (str fp, [sp, #-4]!)
   1cdf0:	add	fp, sp, #0
   1cdf4:	sub	sp, sp, #12
   1cdf8:	str	r0, [fp, #-8]
   1cdfc:	str	r1, [fp, #-12]
   1ce00:	ldr	r2, [fp, #-8]
   1ce04:	ldr	r3, [fp, #-12]
   1ce08:	add	r3, r3, #88	; 0x58
   1ce0c:	ldm	r3, {r0, r1}
   1ce10:	stm	r2, {r0, r1}
   1ce14:	ldr	r0, [fp, #-8]
   1ce18:	add	sp, fp, #0
   1ce1c:	pop	{fp}		; (ldr fp, [sp], #4)
   1ce20:	bx	lr
   1ce24:	push	{fp}		; (str fp, [sp, #-4]!)
   1ce28:	add	fp, sp, #0
   1ce2c:	sub	sp, sp, #12
   1ce30:	str	r0, [fp, #-8]
   1ce34:	str	r1, [fp, #-12]
   1ce38:	ldr	r2, [fp, #-8]
   1ce3c:	ldr	r3, [fp, #-12]
   1ce40:	add	r3, r3, #80	; 0x50
   1ce44:	ldm	r3, {r0, r1}
   1ce48:	stm	r2, {r0, r1}
   1ce4c:	ldr	r0, [fp, #-8]
   1ce50:	add	sp, fp, #0
   1ce54:	pop	{fp}		; (ldr fp, [sp], #4)
   1ce58:	bx	lr
   1ce5c:	push	{fp}		; (str fp, [sp, #-4]!)
   1ce60:	add	fp, sp, #0
   1ce64:	sub	sp, sp, #20
   1ce68:	str	r0, [fp, #-16]
   1ce6c:	str	r1, [fp, #-20]	; 0xffffffec
   1ce70:	mvn	r3, #0
   1ce74:	str	r3, [fp, #-12]
   1ce78:	mvn	r3, #0
   1ce7c:	str	r3, [fp, #-8]
   1ce80:	ldr	r3, [fp, #-16]
   1ce84:	mov	r2, r3
   1ce88:	sub	r3, fp, #12
   1ce8c:	ldm	r3, {r0, r1}
   1ce90:	stm	r2, {r0, r1}
   1ce94:	ldr	r0, [fp, #-16]
   1ce98:	add	sp, fp, #0
   1ce9c:	pop	{fp}		; (ldr fp, [sp], #4)
   1cea0:	bx	lr
   1cea4:	push	{fp}		; (str fp, [sp, #-4]!)
   1cea8:	add	fp, sp, #0
   1ceac:	sub	sp, sp, #12
   1ceb0:	str	r0, [fp, #-8]
   1ceb4:	str	r1, [fp, #-12]
   1ceb8:	ldr	r3, [fp, #-8]
   1cebc:	mov	r0, r3
   1cec0:	add	sp, fp, #0
   1cec4:	pop	{fp}		; (ldr fp, [sp], #4)
   1cec8:	bx	lr
   1cecc:	push	{fp, lr}
   1ced0:	add	fp, sp, #4
   1ced4:	sub	sp, sp, #16
   1ced8:	str	r0, [fp, #-8]
   1cedc:	str	r1, [fp, #-12]
   1cee0:	str	r2, [fp, #-16]
   1cee4:	ldr	r2, [fp, #-16]
   1cee8:	ldr	r1, [fp, #-12]
   1ceec:	ldr	r0, [fp, #-8]
   1cef0:	bl	1112c <memcpy@plt>
   1cef4:	ldr	r2, [fp, #-8]
   1cef8:	ldr	r3, [fp, #-16]
   1cefc:	add	r3, r2, r3
   1cf00:	mov	r2, #0
   1cf04:	strb	r2, [r3]
   1cf08:	nop			; (mov r0, r0)
   1cf0c:	sub	sp, fp, #4
   1cf10:	pop	{fp, pc}
   1cf14:	push	{fp, lr}
   1cf18:	add	fp, sp, #4
   1cf1c:	sub	sp, sp, #24
   1cf20:	str	r0, [fp, #-24]	; 0xffffffe8
   1cf24:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1cf28:	cmp	r3, #0
   1cf2c:	beq	1cf44 <__assert_fail@plt+0xbb60>
   1cf30:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1cf34:	bl	11294 <strlen@plt>
   1cf38:	mov	r3, r0
   1cf3c:	add	r3, r3, #1
   1cf40:	b	1cf48 <__assert_fail@plt+0xbb64>
   1cf44:	mov	r3, #0
   1cf48:	str	r3, [fp, #-8]
   1cf4c:	ldr	r3, [fp, #-8]
   1cf50:	cmp	r3, #58	; 0x3a
   1cf54:	bls	1cf64 <__assert_fail@plt+0xbb80>
   1cf58:	ldr	r3, [fp, #-8]
   1cf5c:	add	r3, r3, #1
   1cf60:	b	1cf68 <__assert_fail@plt+0xbb84>
   1cf64:	mov	r3, #59	; 0x3b
   1cf68:	str	r3, [fp, #-12]
   1cf6c:	ldr	r3, [fp, #-12]
   1cf70:	add	r3, r3, #8
   1cf74:	bic	r3, r3, #3
   1cf78:	mov	r0, r3
   1cf7c:	bl	207c0 <__assert_fail@plt+0xf3dc>
   1cf80:	mov	r3, r0
   1cf84:	str	r3, [fp, #-16]
   1cf88:	ldr	r3, [fp, #-16]
   1cf8c:	cmp	r3, #0
   1cf90:	beq	1cff0 <__assert_fail@plt+0xbc0c>
   1cf94:	ldr	r3, [fp, #-16]
   1cf98:	mov	r2, #0
   1cf9c:	str	r2, [r3]
   1cfa0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1cfa4:	cmp	r3, #0
   1cfa8:	movne	r3, #1
   1cfac:	moveq	r3, #0
   1cfb0:	uxtb	r3, r3
   1cfb4:	mov	r2, r3
   1cfb8:	ldr	r3, [fp, #-16]
   1cfbc:	strb	r2, [r3, #4]
   1cfc0:	ldr	r3, [fp, #-16]
   1cfc4:	mov	r2, #0
   1cfc8:	strb	r2, [r3, #5]
   1cfcc:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1cfd0:	cmp	r3, #0
   1cfd4:	beq	1cff0 <__assert_fail@plt+0xbc0c>
   1cfd8:	ldr	r3, [fp, #-16]
   1cfdc:	add	r3, r3, #5
   1cfe0:	ldr	r2, [fp, #-8]
   1cfe4:	ldr	r1, [fp, #-24]	; 0xffffffe8
   1cfe8:	mov	r0, r3
   1cfec:	bl	1cecc <__assert_fail@plt+0xbae8>
   1cff0:	ldr	r3, [fp, #-16]
   1cff4:	mov	r0, r3
   1cff8:	sub	sp, fp, #4
   1cffc:	pop	{fp, pc}
   1d000:	push	{fp, lr}
   1d004:	add	fp, sp, #4
   1d008:	sub	sp, sp, #24
   1d00c:	str	r0, [fp, #-24]	; 0xffffffe8
   1d010:	str	r1, [fp, #-28]	; 0xffffffe4
   1d014:	mov	r3, #0
   1d018:	str	r3, [fp, #-12]
   1d01c:	ldr	r3, [pc, #448]	; 1d1e4 <__assert_fail@plt+0xbe00>
   1d020:	str	r3, [fp, #-8]
   1d024:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1d028:	ldr	r3, [r3, #40]	; 0x28
   1d02c:	str	r3, [fp, #-12]
   1d030:	ldr	r3, [fp, #-12]
   1d034:	cmp	r3, #0
   1d038:	beq	1d060 <__assert_fail@plt+0xbc7c>
   1d03c:	ldr	r2, [fp, #-28]	; 0xffffffe4
   1d040:	ldr	r3, [fp, #-12]
   1d044:	cmp	r2, r3
   1d048:	bhi	1d068 <__assert_fail@plt+0xbc84>
   1d04c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1d050:	add	r2, r3, #44	; 0x2c
   1d054:	ldr	r3, [fp, #-12]
   1d058:	cmp	r2, r3
   1d05c:	bls	1d068 <__assert_fail@plt+0xbc84>
   1d060:	mov	r3, #1
   1d064:	b	1d1d8 <__assert_fail@plt+0xbdf4>
   1d068:	ldr	r3, [fp, #-12]
   1d06c:	ldrb	r3, [r3]
   1d070:	cmp	r3, #0
   1d074:	beq	1d1c8 <__assert_fail@plt+0xbde4>
   1d078:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1d07c:	add	r3, r3, #5
   1d080:	str	r3, [fp, #-8]
   1d084:	b	1d1b0 <__assert_fail@plt+0xbdcc>
   1d088:	ldr	r3, [fp, #-8]
   1d08c:	ldrb	r3, [r3]
   1d090:	cmp	r3, #0
   1d094:	bne	1d15c <__assert_fail@plt+0xbd78>
   1d098:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1d09c:	add	r2, r3, #5
   1d0a0:	ldr	r3, [fp, #-8]
   1d0a4:	cmp	r2, r3
   1d0a8:	bne	1d0bc <__assert_fail@plt+0xbcd8>
   1d0ac:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1d0b0:	ldrb	r3, [r3, #4]
   1d0b4:	cmp	r3, #0
   1d0b8:	bne	1d15c <__assert_fail@plt+0xbd78>
   1d0bc:	ldr	r0, [fp, #-12]
   1d0c0:	bl	11294 <strlen@plt>
   1d0c4:	mov	r3, r0
   1d0c8:	add	r3, r3, #1
   1d0cc:	str	r3, [fp, #-16]
   1d0d0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1d0d4:	add	r3, r3, #5
   1d0d8:	add	r3, r3, #59	; 0x3b
   1d0dc:	mov	r2, r3
   1d0e0:	ldr	r3, [fp, #-8]
   1d0e4:	sub	r2, r2, r3
   1d0e8:	ldr	r3, [fp, #-16]
   1d0ec:	cmp	r2, r3
   1d0f0:	ble	1d10c <__assert_fail@plt+0xbd28>
   1d0f4:	ldr	r3, [fp, #-16]
   1d0f8:	mov	r2, r3
   1d0fc:	ldr	r1, [fp, #-12]
   1d100:	ldr	r0, [fp, #-8]
   1d104:	bl	1cecc <__assert_fail@plt+0xbae8>
   1d108:	b	1d1c8 <__assert_fail@plt+0xbde4>
   1d10c:	ldr	r0, [fp, #-12]
   1d110:	bl	1cf14 <__assert_fail@plt+0xbb30>
   1d114:	mov	r2, r0
   1d118:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1d11c:	str	r2, [r3]
   1d120:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1d124:	ldr	r3, [r3]
   1d128:	str	r3, [fp, #-24]	; 0xffffffe8
   1d12c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1d130:	cmp	r3, #0
   1d134:	bne	1d140 <__assert_fail@plt+0xbd5c>
   1d138:	mov	r3, #0
   1d13c:	b	1d1d8 <__assert_fail@plt+0xbdf4>
   1d140:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1d144:	mov	r2, #0
   1d148:	strb	r2, [r3, #4]
   1d14c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1d150:	add	r3, r3, #5
   1d154:	str	r3, [fp, #-8]
   1d158:	b	1d1c8 <__assert_fail@plt+0xbde4>
   1d15c:	ldr	r0, [fp, #-8]
   1d160:	bl	11294 <strlen@plt>
   1d164:	mov	r3, r0
   1d168:	add	r3, r3, #1
   1d16c:	ldr	r2, [fp, #-8]
   1d170:	add	r3, r2, r3
   1d174:	str	r3, [fp, #-8]
   1d178:	ldr	r3, [fp, #-8]
   1d17c:	ldrb	r3, [r3]
   1d180:	cmp	r3, #0
   1d184:	bne	1d1b0 <__assert_fail@plt+0xbdcc>
   1d188:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1d18c:	ldr	r3, [r3]
   1d190:	cmp	r3, #0
   1d194:	beq	1d1b0 <__assert_fail@plt+0xbdcc>
   1d198:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1d19c:	ldr	r3, [r3]
   1d1a0:	str	r3, [fp, #-24]	; 0xffffffe8
   1d1a4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1d1a8:	add	r3, r3, #5
   1d1ac:	str	r3, [fp, #-8]
   1d1b0:	ldr	r1, [fp, #-12]
   1d1b4:	ldr	r0, [fp, #-8]
   1d1b8:	bl	110b4 <strcmp@plt>
   1d1bc:	mov	r3, r0
   1d1c0:	cmp	r3, #0
   1d1c4:	bne	1d088 <__assert_fail@plt+0xbca4>
   1d1c8:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1d1cc:	ldr	r2, [fp, #-8]
   1d1d0:	str	r2, [r3, #40]	; 0x28
   1d1d4:	mov	r3, #1
   1d1d8:	mov	r0, r3
   1d1dc:	sub	sp, fp, #4
   1d1e0:	pop	{fp, pc}
   1d1e4:			; <UNDEFINED> instruction: 0x000236b4
   1d1e8:	push	{fp, lr}
   1d1ec:	add	fp, sp, #4
   1d1f0:	sub	sp, sp, #16
   1d1f4:	str	r0, [fp, #-16]
   1d1f8:	mov	r2, #1
   1d1fc:	ldr	r3, [fp, #-16]
   1d200:	cmp	r3, r2
   1d204:	beq	1d234 <__assert_fail@plt+0xbe50>
   1d208:	b	1d228 <__assert_fail@plt+0xbe44>
   1d20c:	ldr	r3, [fp, #-16]
   1d210:	ldr	r3, [r3]
   1d214:	str	r3, [fp, #-8]
   1d218:	ldr	r0, [fp, #-16]
   1d21c:	bl	17130 <__assert_fail@plt+0x5d4c>
   1d220:	ldr	r3, [fp, #-8]
   1d224:	str	r3, [fp, #-16]
   1d228:	ldr	r3, [fp, #-16]
   1d22c:	cmp	r3, #0
   1d230:	bne	1d20c <__assert_fail@plt+0xbe28>
   1d234:	nop			; (mov r0, r0)
   1d238:	sub	sp, fp, #4
   1d23c:	pop	{fp, pc}
   1d240:	push	{fp, lr}
   1d244:	add	fp, sp, #4
   1d248:	ldr	r0, [pc, #12]	; 1d25c <__assert_fail@plt+0xbe78>
   1d24c:	bl	1121c <getenv@plt>
   1d250:	mov	r3, r0
   1d254:	mov	r0, r3
   1d258:	pop	{fp, pc}
   1d25c:			; <UNDEFINED> instruction: 0x000236b8
   1d260:	push	{fp, lr}
   1d264:	add	fp, sp, #4
   1d268:	sub	sp, sp, #8
   1d26c:	str	r0, [fp, #-8]
   1d270:	ldr	r3, [fp, #-8]
   1d274:	cmp	r3, #0
   1d278:	beq	1d294 <__assert_fail@plt+0xbeb0>
   1d27c:	mov	r2, #1
   1d280:	ldr	r1, [fp, #-8]
   1d284:	ldr	r0, [pc, #32]	; 1d2ac <__assert_fail@plt+0xbec8>
   1d288:	bl	112ac <setenv@plt>
   1d28c:	mov	r3, r0
   1d290:	b	1d2a0 <__assert_fail@plt+0xbebc>
   1d294:	ldr	r0, [pc, #16]	; 1d2ac <__assert_fail@plt+0xbec8>
   1d298:	bl	113a8 <unsetenv@plt>
   1d29c:	mov	r3, r0
   1d2a0:	mov	r0, r3
   1d2a4:	sub	sp, fp, #4
   1d2a8:	pop	{fp, pc}
   1d2ac:			; <UNDEFINED> instruction: 0x000236b8
   1d2b0:	push	{fp, lr}
   1d2b4:	add	fp, sp, #4
   1d2b8:	sub	sp, sp, #8
   1d2bc:	str	r0, [fp, #-8]
   1d2c0:	ldr	r3, [fp, #-8]
   1d2c4:	ldrb	r3, [r3, #4]
   1d2c8:	cmp	r3, #0
   1d2cc:	beq	1d2dc <__assert_fail@plt+0xbef8>
   1d2d0:	ldr	r3, [fp, #-8]
   1d2d4:	add	r3, r3, #5
   1d2d8:	b	1d2e0 <__assert_fail@plt+0xbefc>
   1d2dc:	mov	r3, #0
   1d2e0:	mov	r0, r3
   1d2e4:	bl	1d260 <__assert_fail@plt+0xbe7c>
   1d2e8:	mov	r3, r0
   1d2ec:	cmp	r3, #0
   1d2f0:	beq	1d2fc <__assert_fail@plt+0xbf18>
   1d2f4:	mov	r3, #0
   1d2f8:	b	1d304 <__assert_fail@plt+0xbf20>
   1d2fc:	bl	111b0 <tzset@plt>
   1d300:	mov	r3, #1
   1d304:	mov	r0, r3
   1d308:	sub	sp, fp, #4
   1d30c:	pop	{fp, pc}
   1d310:	push	{fp, lr}
   1d314:	add	fp, sp, #4
   1d318:	sub	sp, sp, #24
   1d31c:	str	r0, [fp, #-24]	; 0xffffffe8
   1d320:	bl	1d240 <__assert_fail@plt+0xbe5c>
   1d324:	str	r0, [fp, #-8]
   1d328:	ldr	r3, [fp, #-8]
   1d32c:	cmp	r3, #0
   1d330:	beq	1d37c <__assert_fail@plt+0xbf98>
   1d334:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1d338:	ldrb	r3, [r3, #4]
   1d33c:	cmp	r3, #0
   1d340:	beq	1d36c <__assert_fail@plt+0xbf88>
   1d344:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1d348:	add	r3, r3, #5
   1d34c:	ldr	r1, [fp, #-8]
   1d350:	mov	r0, r3
   1d354:	bl	110b4 <strcmp@plt>
   1d358:	mov	r3, r0
   1d35c:	cmp	r3, #0
   1d360:	bne	1d36c <__assert_fail@plt+0xbf88>
   1d364:	mov	r3, #1
   1d368:	b	1d370 <__assert_fail@plt+0xbf8c>
   1d36c:	mov	r3, #0
   1d370:	and	r3, r3, #1
   1d374:	uxtb	r3, r3
   1d378:	b	1d394 <__assert_fail@plt+0xbfb0>
   1d37c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1d380:	ldrb	r3, [r3, #4]
   1d384:	cmp	r3, #0
   1d388:	moveq	r3, #1
   1d38c:	movne	r3, #0
   1d390:	uxtb	r3, r3
   1d394:	cmp	r3, #0
   1d398:	beq	1d3a4 <__assert_fail@plt+0xbfc0>
   1d39c:	mov	r3, #1
   1d3a0:	b	1d414 <__assert_fail@plt+0xc030>
   1d3a4:	ldr	r0, [fp, #-8]
   1d3a8:	bl	1cf14 <__assert_fail@plt+0xbb30>
   1d3ac:	str	r0, [fp, #-12]
   1d3b0:	ldr	r3, [fp, #-12]
   1d3b4:	cmp	r3, #0
   1d3b8:	bne	1d3c4 <__assert_fail@plt+0xbfe0>
   1d3bc:	ldr	r3, [fp, #-12]
   1d3c0:	b	1d414 <__assert_fail@plt+0xc030>
   1d3c4:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1d3c8:	bl	1d2b0 <__assert_fail@plt+0xbecc>
   1d3cc:	mov	r3, r0
   1d3d0:	eor	r3, r3, #1
   1d3d4:	uxtb	r3, r3
   1d3d8:	cmp	r3, #0
   1d3dc:	beq	1d410 <__assert_fail@plt+0xc02c>
   1d3e0:	bl	112d0 <__errno_location@plt>
   1d3e4:	mov	r3, r0
   1d3e8:	ldr	r3, [r3]
   1d3ec:	str	r3, [fp, #-16]
   1d3f0:	ldr	r0, [fp, #-12]
   1d3f4:	bl	1d1e8 <__assert_fail@plt+0xbe04>
   1d3f8:	bl	112d0 <__errno_location@plt>
   1d3fc:	mov	r2, r0
   1d400:	ldr	r3, [fp, #-16]
   1d404:	str	r3, [r2]
   1d408:	mov	r3, #0
   1d40c:	b	1d414 <__assert_fail@plt+0xc030>
   1d410:	ldr	r3, [fp, #-12]
   1d414:	mov	r0, r3
   1d418:	sub	sp, fp, #4
   1d41c:	pop	{fp, pc}
   1d420:	push	{fp, lr}
   1d424:	add	fp, sp, #4
   1d428:	sub	sp, sp, #16
   1d42c:	str	r0, [fp, #-16]
   1d430:	mov	r2, #1
   1d434:	ldr	r3, [fp, #-16]
   1d438:	cmp	r3, r2
   1d43c:	bne	1d448 <__assert_fail@plt+0xc064>
   1d440:	mov	r3, #1
   1d444:	b	1d4a8 <__assert_fail@plt+0xc0c4>
   1d448:	bl	112d0 <__errno_location@plt>
   1d44c:	mov	r3, r0
   1d450:	ldr	r3, [r3]
   1d454:	str	r3, [fp, #-8]
   1d458:	ldr	r0, [fp, #-16]
   1d45c:	bl	1d2b0 <__assert_fail@plt+0xbecc>
   1d460:	mov	r3, r0
   1d464:	strb	r3, [fp, #-9]
   1d468:	ldrb	r3, [fp, #-9]
   1d46c:	eor	r3, r3, #1
   1d470:	uxtb	r3, r3
   1d474:	cmp	r3, #0
   1d478:	beq	1d48c <__assert_fail@plt+0xc0a8>
   1d47c:	bl	112d0 <__errno_location@plt>
   1d480:	mov	r3, r0
   1d484:	ldr	r3, [r3]
   1d488:	str	r3, [fp, #-8]
   1d48c:	ldr	r0, [fp, #-16]
   1d490:	bl	1d1e8 <__assert_fail@plt+0xbe04>
   1d494:	bl	112d0 <__errno_location@plt>
   1d498:	mov	r2, r0
   1d49c:	ldr	r3, [fp, #-8]
   1d4a0:	str	r3, [r2]
   1d4a4:	ldrb	r3, [fp, #-9]
   1d4a8:	mov	r0, r3
   1d4ac:	sub	sp, fp, #4
   1d4b0:	pop	{fp, pc}
   1d4b4:	push	{fp, lr}
   1d4b8:	add	fp, sp, #4
   1d4bc:	sub	sp, sp, #24
   1d4c0:	str	r0, [fp, #-16]
   1d4c4:	str	r1, [fp, #-20]	; 0xffffffec
   1d4c8:	str	r2, [fp, #-24]	; 0xffffffe8
   1d4cc:	ldr	r3, [fp, #-16]
   1d4d0:	cmp	r3, #0
   1d4d4:	bne	1d4ec <__assert_fail@plt+0xc108>
   1d4d8:	ldr	r1, [fp, #-24]	; 0xffffffe8
   1d4dc:	ldr	r0, [fp, #-20]	; 0xffffffec
   1d4e0:	bl	110a8 <gmtime_r@plt>
   1d4e4:	mov	r3, r0
   1d4e8:	b	1d57c <__assert_fail@plt+0xc198>
   1d4ec:	ldr	r0, [fp, #-16]
   1d4f0:	bl	1d310 <__assert_fail@plt+0xbf2c>
   1d4f4:	str	r0, [fp, #-8]
   1d4f8:	ldr	r3, [fp, #-8]
   1d4fc:	cmp	r3, #0
   1d500:	beq	1d578 <__assert_fail@plt+0xc194>
   1d504:	ldr	r1, [fp, #-24]	; 0xffffffe8
   1d508:	ldr	r0, [fp, #-20]	; 0xffffffec
   1d50c:	bl	11180 <localtime_r@plt>
   1d510:	mov	r3, r0
   1d514:	cmp	r3, #0
   1d518:	beq	1d53c <__assert_fail@plt+0xc158>
   1d51c:	ldr	r1, [fp, #-24]	; 0xffffffe8
   1d520:	ldr	r0, [fp, #-16]
   1d524:	bl	1d000 <__assert_fail@plt+0xbc1c>
   1d528:	mov	r3, r0
   1d52c:	cmp	r3, #0
   1d530:	beq	1d53c <__assert_fail@plt+0xc158>
   1d534:	mov	r3, #1
   1d538:	b	1d540 <__assert_fail@plt+0xc15c>
   1d53c:	mov	r3, #0
   1d540:	strb	r3, [fp, #-9]
   1d544:	ldrb	r3, [fp, #-9]
   1d548:	and	r3, r3, #1
   1d54c:	strb	r3, [fp, #-9]
   1d550:	ldr	r0, [fp, #-8]
   1d554:	bl	1d420 <__assert_fail@plt+0xc03c>
   1d558:	mov	r3, r0
   1d55c:	cmp	r3, #0
   1d560:	beq	1d578 <__assert_fail@plt+0xc194>
   1d564:	ldrb	r3, [fp, #-9]
   1d568:	cmp	r3, #0
   1d56c:	beq	1d578 <__assert_fail@plt+0xc194>
   1d570:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1d574:	b	1d57c <__assert_fail@plt+0xc198>
   1d578:	mov	r3, #0
   1d57c:	mov	r0, r3
   1d580:	sub	sp, fp, #4
   1d584:	pop	{fp, pc}
   1d588:	push	{fp, lr}
   1d58c:	add	fp, sp, #4
   1d590:	sub	sp, sp, #64	; 0x40
   1d594:	str	r0, [fp, #-64]	; 0xffffffc0
   1d598:	str	r1, [fp, #-68]	; 0xffffffbc
   1d59c:	ldr	r3, [fp, #-64]	; 0xffffffc0
   1d5a0:	cmp	r3, #0
   1d5a4:	bne	1d5b8 <__assert_fail@plt+0xc1d4>
   1d5a8:	ldr	r0, [fp, #-68]	; 0xffffffbc
   1d5ac:	bl	11378 <timegm@plt>
   1d5b0:	mov	r3, r0
   1d5b4:	b	1d6e0 <__assert_fail@plt+0xc2fc>
   1d5b8:	ldr	r0, [fp, #-64]	; 0xffffffc0
   1d5bc:	bl	1d310 <__assert_fail@plt+0xbf2c>
   1d5c0:	str	r0, [fp, #-8]
   1d5c4:	ldr	r3, [fp, #-8]
   1d5c8:	cmp	r3, #0
   1d5cc:	beq	1d6dc <__assert_fail@plt+0xc2f8>
   1d5d0:	ldr	r3, [fp, #-68]	; 0xffffffbc
   1d5d4:	ldr	r3, [r3]
   1d5d8:	str	r3, [fp, #-60]	; 0xffffffc4
   1d5dc:	ldr	r3, [fp, #-68]	; 0xffffffbc
   1d5e0:	ldr	r3, [r3, #4]
   1d5e4:	str	r3, [fp, #-56]	; 0xffffffc8
   1d5e8:	ldr	r3, [fp, #-68]	; 0xffffffbc
   1d5ec:	ldr	r3, [r3, #8]
   1d5f0:	str	r3, [fp, #-52]	; 0xffffffcc
   1d5f4:	ldr	r3, [fp, #-68]	; 0xffffffbc
   1d5f8:	ldr	r3, [r3, #12]
   1d5fc:	str	r3, [fp, #-48]	; 0xffffffd0
   1d600:	ldr	r3, [fp, #-68]	; 0xffffffbc
   1d604:	ldr	r3, [r3, #16]
   1d608:	str	r3, [fp, #-44]	; 0xffffffd4
   1d60c:	ldr	r3, [fp, #-68]	; 0xffffffbc
   1d610:	ldr	r3, [r3, #20]
   1d614:	str	r3, [fp, #-40]	; 0xffffffd8
   1d618:	mvn	r3, #0
   1d61c:	str	r3, [fp, #-32]	; 0xffffffe0
   1d620:	ldr	r3, [fp, #-68]	; 0xffffffbc
   1d624:	ldr	r3, [r3, #32]
   1d628:	str	r3, [fp, #-28]	; 0xffffffe4
   1d62c:	sub	r3, fp, #60	; 0x3c
   1d630:	mov	r0, r3
   1d634:	bl	110e4 <mktime@plt>
   1d638:	str	r0, [fp, #-12]
   1d63c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1d640:	mvn	r3, r3
   1d644:	lsr	r3, r3, #31
   1d648:	strb	r3, [fp, #-13]
   1d64c:	ldrb	r3, [fp, #-13]
   1d650:	cmp	r3, #0
   1d654:	beq	1d67c <__assert_fail@plt+0xc298>
   1d658:	sub	r3, fp, #60	; 0x3c
   1d65c:	mov	r1, r3
   1d660:	ldr	r0, [fp, #-64]	; 0xffffffc0
   1d664:	bl	1d000 <__assert_fail@plt+0xbc1c>
   1d668:	mov	r3, r0
   1d66c:	cmp	r3, #0
   1d670:	beq	1d67c <__assert_fail@plt+0xc298>
   1d674:	mov	r3, #1
   1d678:	b	1d680 <__assert_fail@plt+0xc29c>
   1d67c:	mov	r3, #0
   1d680:	strb	r3, [fp, #-13]
   1d684:	ldrb	r3, [fp, #-13]
   1d688:	and	r3, r3, #1
   1d68c:	strb	r3, [fp, #-13]
   1d690:	ldr	r0, [fp, #-8]
   1d694:	bl	1d420 <__assert_fail@plt+0xc03c>
   1d698:	mov	r3, r0
   1d69c:	cmp	r3, #0
   1d6a0:	beq	1d6dc <__assert_fail@plt+0xc2f8>
   1d6a4:	ldrb	r3, [fp, #-13]
   1d6a8:	cmp	r3, #0
   1d6ac:	beq	1d6dc <__assert_fail@plt+0xc2f8>
   1d6b0:	ldr	r3, [fp, #-68]	; 0xffffffbc
   1d6b4:	mov	lr, r3
   1d6b8:	sub	ip, fp, #60	; 0x3c
   1d6bc:	ldm	ip!, {r0, r1, r2, r3}
   1d6c0:	stmia	lr!, {r0, r1, r2, r3}
   1d6c4:	ldm	ip!, {r0, r1, r2, r3}
   1d6c8:	stmia	lr!, {r0, r1, r2, r3}
   1d6cc:	ldm	ip, {r0, r1, r2}
   1d6d0:	stm	lr, {r0, r1, r2}
   1d6d4:	ldr	r3, [fp, #-12]
   1d6d8:	b	1d6e0 <__assert_fail@plt+0xc2fc>
   1d6dc:	mvn	r3, #0
   1d6e0:	mov	r0, r3
   1d6e4:	sub	sp, fp, #4
   1d6e8:	pop	{fp, pc}
   1d6ec:	push	{fp, lr}
   1d6f0:	add	fp, sp, #4
   1d6f4:	sub	sp, sp, #8
   1d6f8:	str	r0, [fp, #-8]
   1d6fc:	mov	r2, #3
   1d700:	mov	r1, #0
   1d704:	ldr	r0, [fp, #-8]
   1d708:	bl	20aa8 <__assert_fail@plt+0xf6c4>
   1d70c:	mov	r3, r0
   1d710:	mov	r0, r3
   1d714:	sub	sp, fp, #4
   1d718:	pop	{fp, pc}
   1d71c:	push	{r4, r5, r6, r7, fp, lr}
   1d720:	add	fp, sp, #20
   1d724:	sub	sp, sp, #48	; 0x30
   1d728:	str	r0, [fp, #-24]	; 0xffffffe8
   1d72c:	str	r1, [fp, #-28]	; 0xffffffe4
   1d730:	str	r2, [fp, #-32]	; 0xffffffe0
   1d734:	str	r3, [fp, #-36]	; 0xffffffdc
   1d738:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1d73c:	cmp	r3, #0
   1d740:	beq	1d764 <__assert_fail@plt+0xc380>
   1d744:	ldr	r3, [fp, #-36]	; 0xffffffdc
   1d748:	str	r3, [sp]
   1d74c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1d750:	ldr	r2, [fp, #-28]	; 0xffffffe4
   1d754:	ldr	r1, [pc, #1260]	; 1dc48 <__assert_fail@plt+0xc864>
   1d758:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1d75c:	bl	112b8 <fprintf@plt>
   1d760:	b	1d778 <__assert_fail@plt+0xc394>
   1d764:	ldr	r3, [fp, #-36]	; 0xffffffdc
   1d768:	ldr	r2, [fp, #-32]	; 0xffffffe0
   1d76c:	ldr	r1, [pc, #1240]	; 1dc4c <__assert_fail@plt+0xc868>
   1d770:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1d774:	bl	112b8 <fprintf@plt>
   1d778:	ldr	r0, [pc, #1232]	; 1dc50 <__assert_fail@plt+0xc86c>
   1d77c:	bl	11288 <gettext@plt>
   1d780:	mov	r2, r0
   1d784:	ldr	r3, [pc, #1224]	; 1dc54 <__assert_fail@plt+0xc870>
   1d788:	ldr	r1, [pc, #1224]	; 1dc58 <__assert_fail@plt+0xc874>
   1d78c:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1d790:	bl	112b8 <fprintf@plt>
   1d794:	ldr	r1, [fp, #-24]	; 0xffffffe8
   1d798:	mov	r0, #10
   1d79c:	bl	1115c <fputc_unlocked@plt>
   1d7a0:	ldr	r0, [pc, #1204]	; 1dc5c <__assert_fail@plt+0xc878>
   1d7a4:	bl	11288 <gettext@plt>
   1d7a8:	mov	r3, r0
   1d7ac:	ldr	r2, [pc, #1196]	; 1dc60 <__assert_fail@plt+0xc87c>
   1d7b0:	mov	r1, r3
   1d7b4:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1d7b8:	bl	112b8 <fprintf@plt>
   1d7bc:	ldr	r1, [fp, #-24]	; 0xffffffe8
   1d7c0:	mov	r0, #10
   1d7c4:	bl	1115c <fputc_unlocked@plt>
   1d7c8:	ldr	r3, [fp, #8]
   1d7cc:	cmp	r3, #9
   1d7d0:	ldrls	pc, [pc, r3, lsl #2]
   1d7d4:	b	1db90 <__assert_fail@plt+0xc7ac>
   1d7d8:	andeq	sp, r1, r8, lsr ip
   1d7dc:	andeq	sp, r1, r0, lsl #16
   1d7e0:	andeq	sp, r1, r4, lsr #16
   1d7e4:	andeq	sp, r1, r0, asr r8
   1d7e8:	muleq	r1, r0, r8
   1d7ec:	andeq	sp, r1, r8, ror #17
   1d7f0:	andeq	sp, r1, r0, asr r9
   1d7f4:	andeq	sp, r1, r8, asr #19
   1d7f8:	andeq	sp, r1, r0, asr sl
   1d7fc:	andeq	sp, r1, r8, ror #21
   1d800:	ldr	r0, [pc, #1116]	; 1dc64 <__assert_fail@plt+0xc880>
   1d804:	bl	11288 <gettext@plt>
   1d808:	mov	r1, r0
   1d80c:	ldr	r3, [fp, #4]
   1d810:	ldr	r3, [r3]
   1d814:	mov	r2, r3
   1d818:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1d81c:	bl	112b8 <fprintf@plt>
   1d820:	b	1dc3c <__assert_fail@plt+0xc858>
   1d824:	ldr	r0, [pc, #1084]	; 1dc68 <__assert_fail@plt+0xc884>
   1d828:	bl	11288 <gettext@plt>
   1d82c:	mov	r1, r0
   1d830:	ldr	r3, [fp, #4]
   1d834:	ldr	r2, [r3]
   1d838:	ldr	r3, [fp, #4]
   1d83c:	add	r3, r3, #4
   1d840:	ldr	r3, [r3]
   1d844:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1d848:	bl	112b8 <fprintf@plt>
   1d84c:	b	1dc3c <__assert_fail@plt+0xc858>
   1d850:	ldr	r0, [pc, #1044]	; 1dc6c <__assert_fail@plt+0xc888>
   1d854:	bl	11288 <gettext@plt>
   1d858:	ldr	r3, [fp, #4]
   1d85c:	ldr	r2, [r3]
   1d860:	ldr	r3, [fp, #4]
   1d864:	add	r3, r3, #4
   1d868:	ldr	r1, [r3]
   1d86c:	ldr	r3, [fp, #4]
   1d870:	add	r3, r3, #8
   1d874:	ldr	r3, [r3]
   1d878:	str	r3, [sp]
   1d87c:	mov	r3, r1
   1d880:	mov	r1, r0
   1d884:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1d888:	bl	112b8 <fprintf@plt>
   1d88c:	b	1dc3c <__assert_fail@plt+0xc858>
   1d890:	ldr	r0, [pc, #984]	; 1dc70 <__assert_fail@plt+0xc88c>
   1d894:	bl	11288 <gettext@plt>
   1d898:	mov	ip, r0
   1d89c:	ldr	r3, [fp, #4]
   1d8a0:	ldr	r1, [r3]
   1d8a4:	ldr	r3, [fp, #4]
   1d8a8:	add	r3, r3, #4
   1d8ac:	ldr	r0, [r3]
   1d8b0:	ldr	r3, [fp, #4]
   1d8b4:	add	r3, r3, #8
   1d8b8:	ldr	r3, [r3]
   1d8bc:	ldr	r2, [fp, #4]
   1d8c0:	add	r2, r2, #12
   1d8c4:	ldr	r2, [r2]
   1d8c8:	str	r2, [sp, #4]
   1d8cc:	str	r3, [sp]
   1d8d0:	mov	r3, r0
   1d8d4:	mov	r2, r1
   1d8d8:	mov	r1, ip
   1d8dc:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1d8e0:	bl	112b8 <fprintf@plt>
   1d8e4:	b	1dc3c <__assert_fail@plt+0xc858>
   1d8e8:	ldr	r0, [pc, #900]	; 1dc74 <__assert_fail@plt+0xc890>
   1d8ec:	bl	11288 <gettext@plt>
   1d8f0:	mov	lr, r0
   1d8f4:	ldr	r3, [fp, #4]
   1d8f8:	ldr	r0, [r3]
   1d8fc:	ldr	r3, [fp, #4]
   1d900:	add	r3, r3, #4
   1d904:	ldr	ip, [r3]
   1d908:	ldr	r3, [fp, #4]
   1d90c:	add	r3, r3, #8
   1d910:	ldr	r3, [r3]
   1d914:	ldr	r2, [fp, #4]
   1d918:	add	r2, r2, #12
   1d91c:	ldr	r2, [r2]
   1d920:	ldr	r1, [fp, #4]
   1d924:	add	r1, r1, #16
   1d928:	ldr	r1, [r1]
   1d92c:	str	r1, [sp, #8]
   1d930:	str	r2, [sp, #4]
   1d934:	str	r3, [sp]
   1d938:	mov	r3, ip
   1d93c:	mov	r2, r0
   1d940:	mov	r1, lr
   1d944:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1d948:	bl	112b8 <fprintf@plt>
   1d94c:	b	1dc3c <__assert_fail@plt+0xc858>
   1d950:	ldr	r0, [pc, #800]	; 1dc78 <__assert_fail@plt+0xc894>
   1d954:	bl	11288 <gettext@plt>
   1d958:	mov	r4, r0
   1d95c:	ldr	r3, [fp, #4]
   1d960:	ldr	ip, [r3]
   1d964:	ldr	r3, [fp, #4]
   1d968:	add	r3, r3, #4
   1d96c:	ldr	lr, [r3]
   1d970:	ldr	r3, [fp, #4]
   1d974:	add	r3, r3, #8
   1d978:	ldr	r3, [r3]
   1d97c:	ldr	r2, [fp, #4]
   1d980:	add	r2, r2, #12
   1d984:	ldr	r2, [r2]
   1d988:	ldr	r1, [fp, #4]
   1d98c:	add	r1, r1, #16
   1d990:	ldr	r1, [r1]
   1d994:	ldr	r0, [fp, #4]
   1d998:	add	r0, r0, #20
   1d99c:	ldr	r0, [r0]
   1d9a0:	str	r0, [sp, #12]
   1d9a4:	str	r1, [sp, #8]
   1d9a8:	str	r2, [sp, #4]
   1d9ac:	str	r3, [sp]
   1d9b0:	mov	r3, lr
   1d9b4:	mov	r2, ip
   1d9b8:	mov	r1, r4
   1d9bc:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1d9c0:	bl	112b8 <fprintf@plt>
   1d9c4:	b	1dc3c <__assert_fail@plt+0xc858>
   1d9c8:	ldr	r0, [pc, #684]	; 1dc7c <__assert_fail@plt+0xc898>
   1d9cc:	bl	11288 <gettext@plt>
   1d9d0:	mov	r5, r0
   1d9d4:	ldr	r3, [fp, #4]
   1d9d8:	ldr	lr, [r3]
   1d9dc:	ldr	r3, [fp, #4]
   1d9e0:	add	r3, r3, #4
   1d9e4:	ldr	r4, [r3]
   1d9e8:	ldr	r3, [fp, #4]
   1d9ec:	add	r3, r3, #8
   1d9f0:	ldr	r3, [r3]
   1d9f4:	ldr	r2, [fp, #4]
   1d9f8:	add	r2, r2, #12
   1d9fc:	ldr	r2, [r2]
   1da00:	ldr	r1, [fp, #4]
   1da04:	add	r1, r1, #16
   1da08:	ldr	r1, [r1]
   1da0c:	ldr	r0, [fp, #4]
   1da10:	add	r0, r0, #20
   1da14:	ldr	r0, [r0]
   1da18:	ldr	ip, [fp, #4]
   1da1c:	add	ip, ip, #24
   1da20:	ldr	ip, [ip]
   1da24:	str	ip, [sp, #16]
   1da28:	str	r0, [sp, #12]
   1da2c:	str	r1, [sp, #8]
   1da30:	str	r2, [sp, #4]
   1da34:	str	r3, [sp]
   1da38:	mov	r3, r4
   1da3c:	mov	r2, lr
   1da40:	mov	r1, r5
   1da44:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1da48:	bl	112b8 <fprintf@plt>
   1da4c:	b	1dc3c <__assert_fail@plt+0xc858>
   1da50:	ldr	r0, [pc, #552]	; 1dc80 <__assert_fail@plt+0xc89c>
   1da54:	bl	11288 <gettext@plt>
   1da58:	mov	r6, r0
   1da5c:	ldr	r3, [fp, #4]
   1da60:	ldr	r4, [r3]
   1da64:	ldr	r3, [fp, #4]
   1da68:	add	r3, r3, #4
   1da6c:	ldr	r5, [r3]
   1da70:	ldr	r3, [fp, #4]
   1da74:	add	r3, r3, #8
   1da78:	ldr	r3, [r3]
   1da7c:	ldr	r2, [fp, #4]
   1da80:	add	r2, r2, #12
   1da84:	ldr	r2, [r2]
   1da88:	ldr	r1, [fp, #4]
   1da8c:	add	r1, r1, #16
   1da90:	ldr	r1, [r1]
   1da94:	ldr	r0, [fp, #4]
   1da98:	add	r0, r0, #20
   1da9c:	ldr	r0, [r0]
   1daa0:	ldr	ip, [fp, #4]
   1daa4:	add	ip, ip, #24
   1daa8:	ldr	ip, [ip]
   1daac:	ldr	lr, [fp, #4]
   1dab0:	add	lr, lr, #28
   1dab4:	ldr	lr, [lr]
   1dab8:	str	lr, [sp, #20]
   1dabc:	str	ip, [sp, #16]
   1dac0:	str	r0, [sp, #12]
   1dac4:	str	r1, [sp, #8]
   1dac8:	str	r2, [sp, #4]
   1dacc:	str	r3, [sp]
   1dad0:	mov	r3, r5
   1dad4:	mov	r2, r4
   1dad8:	mov	r1, r6
   1dadc:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1dae0:	bl	112b8 <fprintf@plt>
   1dae4:	b	1dc3c <__assert_fail@plt+0xc858>
   1dae8:	ldr	r0, [pc, #404]	; 1dc84 <__assert_fail@plt+0xc8a0>
   1daec:	bl	11288 <gettext@plt>
   1daf0:	mov	r7, r0
   1daf4:	ldr	r3, [fp, #4]
   1daf8:	ldr	r5, [r3]
   1dafc:	ldr	r3, [fp, #4]
   1db00:	add	r3, r3, #4
   1db04:	ldr	r6, [r3]
   1db08:	ldr	r3, [fp, #4]
   1db0c:	add	r3, r3, #8
   1db10:	ldr	r3, [r3]
   1db14:	ldr	r2, [fp, #4]
   1db18:	add	r2, r2, #12
   1db1c:	ldr	r2, [r2]
   1db20:	ldr	r1, [fp, #4]
   1db24:	add	r1, r1, #16
   1db28:	ldr	r1, [r1]
   1db2c:	ldr	r0, [fp, #4]
   1db30:	add	r0, r0, #20
   1db34:	ldr	r0, [r0]
   1db38:	ldr	ip, [fp, #4]
   1db3c:	add	ip, ip, #24
   1db40:	ldr	ip, [ip]
   1db44:	ldr	lr, [fp, #4]
   1db48:	add	lr, lr, #28
   1db4c:	ldr	lr, [lr]
   1db50:	ldr	r4, [fp, #4]
   1db54:	add	r4, r4, #32
   1db58:	ldr	r4, [r4]
   1db5c:	str	r4, [sp, #24]
   1db60:	str	lr, [sp, #20]
   1db64:	str	ip, [sp, #16]
   1db68:	str	r0, [sp, #12]
   1db6c:	str	r1, [sp, #8]
   1db70:	str	r2, [sp, #4]
   1db74:	str	r3, [sp]
   1db78:	mov	r3, r6
   1db7c:	mov	r2, r5
   1db80:	mov	r1, r7
   1db84:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1db88:	bl	112b8 <fprintf@plt>
   1db8c:	b	1dc3c <__assert_fail@plt+0xc858>
   1db90:	ldr	r0, [pc, #240]	; 1dc88 <__assert_fail@plt+0xc8a4>
   1db94:	bl	11288 <gettext@plt>
   1db98:	mov	r7, r0
   1db9c:	ldr	r3, [fp, #4]
   1dba0:	ldr	r5, [r3]
   1dba4:	ldr	r3, [fp, #4]
   1dba8:	add	r3, r3, #4
   1dbac:	ldr	r6, [r3]
   1dbb0:	ldr	r3, [fp, #4]
   1dbb4:	add	r3, r3, #8
   1dbb8:	ldr	r3, [r3]
   1dbbc:	ldr	r2, [fp, #4]
   1dbc0:	add	r2, r2, #12
   1dbc4:	ldr	r2, [r2]
   1dbc8:	ldr	r1, [fp, #4]
   1dbcc:	add	r1, r1, #16
   1dbd0:	ldr	r1, [r1]
   1dbd4:	ldr	r0, [fp, #4]
   1dbd8:	add	r0, r0, #20
   1dbdc:	ldr	r0, [r0]
   1dbe0:	ldr	ip, [fp, #4]
   1dbe4:	add	ip, ip, #24
   1dbe8:	ldr	ip, [ip]
   1dbec:	ldr	lr, [fp, #4]
   1dbf0:	add	lr, lr, #28
   1dbf4:	ldr	lr, [lr]
   1dbf8:	ldr	r4, [fp, #4]
   1dbfc:	add	r4, r4, #32
   1dc00:	ldr	r4, [r4]
   1dc04:	str	r4, [sp, #24]
   1dc08:	str	lr, [sp, #20]
   1dc0c:	str	ip, [sp, #16]
   1dc10:	str	r0, [sp, #12]
   1dc14:	str	r1, [sp, #8]
   1dc18:	str	r2, [sp, #4]
   1dc1c:	str	r3, [sp]
   1dc20:	mov	r3, r6
   1dc24:	mov	r2, r5
   1dc28:	mov	r1, r7
   1dc2c:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1dc30:	bl	112b8 <fprintf@plt>
   1dc34:	b	1dc3c <__assert_fail@plt+0xc858>
   1dc38:	nop			; (mov r0, r0)
   1dc3c:	nop			; (mov r0, r0)
   1dc40:	sub	sp, fp, #20
   1dc44:	pop	{r4, r5, r6, r7, fp, pc}
   1dc48:			; <UNDEFINED> instruction: 0x000236bc
   1dc4c:	andeq	r3, r2, r8, asr #13
   1dc50:	ldrdeq	r3, [r2], -r0
   1dc54:	andeq	r0, r0, r6, ror #15
   1dc58:	andeq	r3, r2, r0, ror #19
   1dc5c:	ldrdeq	r3, [r2], -r4
   1dc60:	andeq	r3, r2, r0, lsl #15
   1dc64:	andeq	r3, r2, r4, lsr #15
   1dc68:			; <UNDEFINED> instruction: 0x000237b4
   1dc6c:	andeq	r3, r2, ip, asr #15
   1dc70:	andeq	r3, r2, r8, ror #15
   1dc74:	andeq	r3, r2, r8, lsl #16
   1dc78:	andeq	r3, r2, ip, lsr #16
   1dc7c:	andeq	r3, r2, r4, asr r8
   1dc80:	andeq	r3, r2, r0, lsl #17
   1dc84:			; <UNDEFINED> instruction: 0x000238b0
   1dc88:	andeq	r3, r2, r4, ror #17
   1dc8c:	push	{fp, lr}
   1dc90:	add	fp, sp, #4
   1dc94:	sub	sp, sp, #32
   1dc98:	str	r0, [fp, #-16]
   1dc9c:	str	r1, [fp, #-20]	; 0xffffffec
   1dca0:	str	r2, [fp, #-24]	; 0xffffffe8
   1dca4:	str	r3, [fp, #-28]	; 0xffffffe4
   1dca8:	mov	r3, #0
   1dcac:	str	r3, [fp, #-8]
   1dcb0:	b	1dcc0 <__assert_fail@plt+0xc8dc>
   1dcb4:	ldr	r3, [fp, #-8]
   1dcb8:	add	r3, r3, #1
   1dcbc:	str	r3, [fp, #-8]
   1dcc0:	ldr	r3, [fp, #-8]
   1dcc4:	lsl	r3, r3, #2
   1dcc8:	ldr	r2, [fp, #4]
   1dccc:	add	r3, r2, r3
   1dcd0:	ldr	r3, [r3]
   1dcd4:	cmp	r3, #0
   1dcd8:	bne	1dcb4 <__assert_fail@plt+0xc8d0>
   1dcdc:	ldr	r3, [fp, #-8]
   1dce0:	str	r3, [sp, #4]
   1dce4:	ldr	r3, [fp, #4]
   1dce8:	str	r3, [sp]
   1dcec:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1dcf0:	ldr	r2, [fp, #-24]	; 0xffffffe8
   1dcf4:	ldr	r1, [fp, #-20]	; 0xffffffec
   1dcf8:	ldr	r0, [fp, #-16]
   1dcfc:	bl	1d71c <__assert_fail@plt+0xc338>
   1dd00:	nop			; (mov r0, r0)
   1dd04:	sub	sp, fp, #4
   1dd08:	pop	{fp, pc}
   1dd0c:	push	{fp, lr}
   1dd10:	add	fp, sp, #4
   1dd14:	sub	sp, sp, #72	; 0x48
   1dd18:	str	r0, [fp, #-56]	; 0xffffffc8
   1dd1c:	str	r1, [fp, #-60]	; 0xffffffc4
   1dd20:	str	r2, [fp, #-64]	; 0xffffffc0
   1dd24:	str	r3, [fp, #-68]	; 0xffffffbc
   1dd28:	mov	r3, #0
   1dd2c:	str	r3, [fp, #-8]
   1dd30:	b	1dd40 <__assert_fail@plt+0xc95c>
   1dd34:	ldr	r3, [fp, #-8]
   1dd38:	add	r3, r3, #1
   1dd3c:	str	r3, [fp, #-8]
   1dd40:	ldr	r3, [fp, #-8]
   1dd44:	cmp	r3, #9
   1dd48:	bhi	1dd8c <__assert_fail@plt+0xc9a8>
   1dd4c:	ldr	r3, [fp, #4]
   1dd50:	add	r2, r3, #4
   1dd54:	str	r2, [fp, #4]
   1dd58:	ldr	r2, [r3]
   1dd5c:	ldr	r3, [fp, #-8]
   1dd60:	lsl	r3, r3, #2
   1dd64:	sub	r1, fp, #4
   1dd68:	add	r3, r1, r3
   1dd6c:	str	r2, [r3, #-44]	; 0xffffffd4
   1dd70:	ldr	r3, [fp, #-8]
   1dd74:	lsl	r3, r3, #2
   1dd78:	sub	r2, fp, #4
   1dd7c:	add	r3, r2, r3
   1dd80:	ldr	r3, [r3, #-44]	; 0xffffffd4
   1dd84:	cmp	r3, #0
   1dd88:	bne	1dd34 <__assert_fail@plt+0xc950>
   1dd8c:	ldr	r3, [fp, #-8]
   1dd90:	str	r3, [sp, #4]
   1dd94:	sub	r3, fp, #48	; 0x30
   1dd98:	str	r3, [sp]
   1dd9c:	ldr	r3, [fp, #-68]	; 0xffffffbc
   1dda0:	ldr	r2, [fp, #-64]	; 0xffffffc0
   1dda4:	ldr	r1, [fp, #-60]	; 0xffffffc4
   1dda8:	ldr	r0, [fp, #-56]	; 0xffffffc8
   1ddac:	bl	1d71c <__assert_fail@plt+0xc338>
   1ddb0:	nop			; (mov r0, r0)
   1ddb4:	sub	sp, fp, #4
   1ddb8:	pop	{fp, pc}
   1ddbc:	push	{r3}		; (str r3, [sp, #-4]!)
   1ddc0:	push	{fp, lr}
   1ddc4:	add	fp, sp, #4
   1ddc8:	sub	sp, sp, #36	; 0x24
   1ddcc:	str	r0, [fp, #-20]	; 0xffffffec
   1ddd0:	str	r1, [fp, #-24]	; 0xffffffe8
   1ddd4:	str	r2, [fp, #-28]	; 0xffffffe4
   1ddd8:	add	r3, fp, #8
   1dddc:	str	r3, [fp, #-12]
   1dde0:	ldr	r3, [fp, #-12]
   1dde4:	str	r3, [sp]
   1dde8:	ldr	r3, [fp, #4]
   1ddec:	ldr	r2, [fp, #-28]	; 0xffffffe4
   1ddf0:	ldr	r1, [fp, #-24]	; 0xffffffe8
   1ddf4:	ldr	r0, [fp, #-20]	; 0xffffffec
   1ddf8:	bl	1dd0c <__assert_fail@plt+0xc928>
   1ddfc:	nop			; (mov r0, r0)
   1de00:	sub	sp, fp, #4
   1de04:	pop	{fp, lr}
   1de08:	add	sp, sp, #4
   1de0c:	bx	lr
   1de10:	push	{fp, lr}
   1de14:	add	fp, sp, #4
   1de18:	ldr	r3, [pc, #96]	; 1de80 <__assert_fail@plt+0xca9c>
   1de1c:	ldr	r3, [r3]
   1de20:	mov	r1, r3
   1de24:	mov	r0, #10
   1de28:	bl	1115c <fputc_unlocked@plt>
   1de2c:	ldr	r0, [pc, #80]	; 1de84 <__assert_fail@plt+0xcaa0>
   1de30:	bl	11288 <gettext@plt>
   1de34:	mov	r3, r0
   1de38:	ldr	r1, [pc, #72]	; 1de88 <__assert_fail@plt+0xcaa4>
   1de3c:	mov	r0, r3
   1de40:	bl	110d8 <printf@plt>
   1de44:	ldr	r0, [pc, #64]	; 1de8c <__assert_fail@plt+0xcaa8>
   1de48:	bl	11288 <gettext@plt>
   1de4c:	mov	r3, r0
   1de50:	ldr	r2, [pc, #56]	; 1de90 <__assert_fail@plt+0xcaac>
   1de54:	ldr	r1, [pc, #56]	; 1de94 <__assert_fail@plt+0xcab0>
   1de58:	mov	r0, r3
   1de5c:	bl	110d8 <printf@plt>
   1de60:	ldr	r0, [pc, #48]	; 1de98 <__assert_fail@plt+0xcab4>
   1de64:	bl	11288 <gettext@plt>
   1de68:	mov	r3, r0
   1de6c:	ldr	r1, [pc, #40]	; 1de9c <__assert_fail@plt+0xcab8>
   1de70:	mov	r0, r3
   1de74:	bl	110d8 <printf@plt>
   1de78:	nop			; (mov r0, r0)
   1de7c:	pop	{fp, pc}
   1de80:	andeq	r4, r3, ip, ror #3
   1de84:	andeq	r3, r2, r0, lsr #18
   1de88:	andeq	r3, r2, r4, lsr r9
   1de8c:	andeq	r3, r2, ip, asr #18
   1de90:	andeq	r3, r2, r0, ror #18
   1de94:	andeq	r3, r2, r8, lsl #19
   1de98:	muleq	r2, r8, r9
   1de9c:	andeq	r3, r2, r0, asr #19
   1dea0:	push	{fp, lr}
   1dea4:	add	fp, sp, #4
   1dea8:	sub	sp, sp, #16
   1deac:	str	r0, [fp, #-8]
   1deb0:	str	r1, [fp, #-12]
   1deb4:	str	r2, [fp, #-16]
   1deb8:	ldr	r2, [fp, #-16]
   1debc:	ldr	r1, [fp, #-12]
   1dec0:	ldr	r0, [fp, #-8]
   1dec4:	bl	1e030 <__assert_fail@plt+0xcc4c>
   1dec8:	mov	r3, r0
   1decc:	mov	r0, r3
   1ded0:	sub	sp, fp, #4
   1ded4:	pop	{fp, pc}
   1ded8:	push	{fp, lr}
   1dedc:	add	fp, sp, #4
   1dee0:	sub	sp, sp, #8
   1dee4:	str	r0, [fp, #-8]
   1dee8:	ldr	r3, [fp, #-8]
   1deec:	cmp	r3, #0
   1def0:	bne	1def8 <__assert_fail@plt+0xcb14>
   1def4:	bl	1ea24 <__assert_fail@plt+0xd640>
   1def8:	ldr	r3, [fp, #-8]
   1defc:	mov	r0, r3
   1df00:	sub	sp, fp, #4
   1df04:	pop	{fp, pc}
   1df08:	push	{fp, lr}
   1df0c:	add	fp, sp, #4
   1df10:	sub	sp, sp, #8
   1df14:	str	r0, [fp, #-8]
   1df18:	ldr	r0, [fp, #-8]
   1df1c:	bl	207c0 <__assert_fail@plt+0xf3dc>
   1df20:	mov	r3, r0
   1df24:	mov	r0, r3
   1df28:	bl	1ded8 <__assert_fail@plt+0xcaf4>
   1df2c:	mov	r3, r0
   1df30:	mov	r0, r3
   1df34:	sub	sp, fp, #4
   1df38:	pop	{fp, pc}
   1df3c:	push	{fp, lr}
   1df40:	add	fp, sp, #4
   1df44:	sub	sp, sp, #8
   1df48:	str	r0, [fp, #-8]
   1df4c:	ldr	r0, [fp, #-8]
   1df50:	bl	20e4c <__assert_fail@plt+0xfa68>
   1df54:	mov	r3, r0
   1df58:	mov	r0, r3
   1df5c:	bl	1ded8 <__assert_fail@plt+0xcaf4>
   1df60:	mov	r3, r0
   1df64:	mov	r0, r3
   1df68:	sub	sp, fp, #4
   1df6c:	pop	{fp, pc}
   1df70:	push	{fp, lr}
   1df74:	add	fp, sp, #4
   1df78:	sub	sp, sp, #8
   1df7c:	str	r0, [fp, #-8]
   1df80:	ldr	r0, [fp, #-8]
   1df84:	bl	1df08 <__assert_fail@plt+0xcb24>
   1df88:	mov	r3, r0
   1df8c:	mov	r0, r3
   1df90:	sub	sp, fp, #4
   1df94:	pop	{fp, pc}
   1df98:	push	{fp, lr}
   1df9c:	add	fp, sp, #4
   1dfa0:	sub	sp, sp, #16
   1dfa4:	str	r0, [fp, #-16]
   1dfa8:	str	r1, [fp, #-20]	; 0xffffffec
   1dfac:	ldr	r1, [fp, #-20]	; 0xffffffec
   1dfb0:	ldr	r0, [fp, #-16]
   1dfb4:	bl	20868 <__assert_fail@plt+0xf484>
   1dfb8:	str	r0, [fp, #-8]
   1dfbc:	ldr	r3, [fp, #-8]
   1dfc0:	cmp	r3, #0
   1dfc4:	bne	1dfe4 <__assert_fail@plt+0xcc00>
   1dfc8:	ldr	r3, [fp, #-16]
   1dfcc:	cmp	r3, #0
   1dfd0:	beq	1dfe0 <__assert_fail@plt+0xcbfc>
   1dfd4:	ldr	r3, [fp, #-20]	; 0xffffffec
   1dfd8:	cmp	r3, #0
   1dfdc:	beq	1dfe4 <__assert_fail@plt+0xcc00>
   1dfe0:	bl	1ea24 <__assert_fail@plt+0xd640>
   1dfe4:	ldr	r3, [fp, #-8]
   1dfe8:	mov	r0, r3
   1dfec:	sub	sp, fp, #4
   1dff0:	pop	{fp, pc}
   1dff4:	push	{fp, lr}
   1dff8:	add	fp, sp, #4
   1dffc:	sub	sp, sp, #8
   1e000:	str	r0, [fp, #-8]
   1e004:	str	r1, [fp, #-12]
   1e008:	ldr	r1, [fp, #-12]
   1e00c:	ldr	r0, [fp, #-8]
   1e010:	bl	20e78 <__assert_fail@plt+0xfa94>
   1e014:	mov	r3, r0
   1e018:	mov	r0, r3
   1e01c:	bl	1ded8 <__assert_fail@plt+0xcaf4>
   1e020:	mov	r3, r0
   1e024:	mov	r0, r3
   1e028:	sub	sp, fp, #4
   1e02c:	pop	{fp, pc}
   1e030:	push	{fp, lr}
   1e034:	add	fp, sp, #4
   1e038:	sub	sp, sp, #24
   1e03c:	str	r0, [fp, #-16]
   1e040:	str	r1, [fp, #-20]	; 0xffffffec
   1e044:	str	r2, [fp, #-24]	; 0xffffffe8
   1e048:	ldr	r2, [fp, #-24]	; 0xffffffe8
   1e04c:	ldr	r1, [fp, #-20]	; 0xffffffec
   1e050:	ldr	r0, [fp, #-16]
   1e054:	bl	2106c <__assert_fail@plt+0xfc88>
   1e058:	str	r0, [fp, #-8]
   1e05c:	ldr	r3, [fp, #-8]
   1e060:	cmp	r3, #0
   1e064:	bne	1e090 <__assert_fail@plt+0xccac>
   1e068:	ldr	r3, [fp, #-16]
   1e06c:	cmp	r3, #0
   1e070:	beq	1e08c <__assert_fail@plt+0xcca8>
   1e074:	ldr	r3, [fp, #-20]	; 0xffffffec
   1e078:	cmp	r3, #0
   1e07c:	beq	1e090 <__assert_fail@plt+0xccac>
   1e080:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1e084:	cmp	r3, #0
   1e088:	beq	1e090 <__assert_fail@plt+0xccac>
   1e08c:	bl	1ea24 <__assert_fail@plt+0xd640>
   1e090:	ldr	r3, [fp, #-8]
   1e094:	mov	r0, r3
   1e098:	sub	sp, fp, #4
   1e09c:	pop	{fp, pc}
   1e0a0:	push	{fp, lr}
   1e0a4:	add	fp, sp, #4
   1e0a8:	sub	sp, sp, #16
   1e0ac:	str	r0, [fp, #-8]
   1e0b0:	str	r1, [fp, #-12]
   1e0b4:	str	r2, [fp, #-16]
   1e0b8:	ldr	r2, [fp, #-16]
   1e0bc:	ldr	r1, [fp, #-12]
   1e0c0:	ldr	r0, [fp, #-8]
   1e0c4:	bl	20f00 <__assert_fail@plt+0xfb1c>
   1e0c8:	mov	r3, r0
   1e0cc:	mov	r0, r3
   1e0d0:	bl	1ded8 <__assert_fail@plt+0xcaf4>
   1e0d4:	mov	r3, r0
   1e0d8:	mov	r0, r3
   1e0dc:	sub	sp, fp, #4
   1e0e0:	pop	{fp, pc}
   1e0e4:	push	{fp, lr}
   1e0e8:	add	fp, sp, #4
   1e0ec:	sub	sp, sp, #8
   1e0f0:	str	r0, [fp, #-8]
   1e0f4:	str	r1, [fp, #-12]
   1e0f8:	ldr	r2, [fp, #-12]
   1e0fc:	ldr	r1, [fp, #-8]
   1e100:	mov	r0, #0
   1e104:	bl	1e030 <__assert_fail@plt+0xcc4c>
   1e108:	mov	r3, r0
   1e10c:	mov	r0, r3
   1e110:	sub	sp, fp, #4
   1e114:	pop	{fp, pc}
   1e118:	push	{fp, lr}
   1e11c:	add	fp, sp, #4
   1e120:	sub	sp, sp, #8
   1e124:	str	r0, [fp, #-8]
   1e128:	str	r1, [fp, #-12]
   1e12c:	ldr	r2, [fp, #-12]
   1e130:	ldr	r1, [fp, #-8]
   1e134:	mov	r0, #0
   1e138:	bl	1e0a0 <__assert_fail@plt+0xccbc>
   1e13c:	mov	r3, r0
   1e140:	mov	r0, r3
   1e144:	sub	sp, fp, #4
   1e148:	pop	{fp, pc}
   1e14c:	push	{fp, lr}
   1e150:	add	fp, sp, #4
   1e154:	sub	sp, sp, #8
   1e158:	str	r0, [fp, #-8]
   1e15c:	str	r1, [fp, #-12]
   1e160:	mov	r2, #1
   1e164:	ldr	r1, [fp, #-12]
   1e168:	ldr	r0, [fp, #-8]
   1e16c:	bl	1e180 <__assert_fail@plt+0xcd9c>
   1e170:	mov	r3, r0
   1e174:	mov	r0, r3
   1e178:	sub	sp, fp, #4
   1e17c:	pop	{fp, pc}
   1e180:	push	{fp, lr}
   1e184:	add	fp, sp, #4
   1e188:	sub	sp, sp, #24
   1e18c:	str	r0, [fp, #-16]
   1e190:	str	r1, [fp, #-20]	; 0xffffffec
   1e194:	str	r2, [fp, #-24]	; 0xffffffe8
   1e198:	ldr	r3, [fp, #-20]	; 0xffffffec
   1e19c:	ldr	r3, [r3]
   1e1a0:	str	r3, [fp, #-8]
   1e1a4:	ldr	r3, [fp, #-16]
   1e1a8:	cmp	r3, #0
   1e1ac:	bne	1e1f8 <__assert_fail@plt+0xce14>
   1e1b0:	ldr	r3, [fp, #-8]
   1e1b4:	cmp	r3, #0
   1e1b8:	bne	1e25c <__assert_fail@plt+0xce78>
   1e1bc:	ldr	r1, [fp, #-24]	; 0xffffffe8
   1e1c0:	mov	r0, #64	; 0x40
   1e1c4:	bl	21610 <__assert_fail@plt+0x1022c>
   1e1c8:	mov	r3, r0
   1e1cc:	str	r3, [fp, #-8]
   1e1d0:	ldr	r3, [fp, #-8]
   1e1d4:	cmp	r3, #0
   1e1d8:	moveq	r3, #1
   1e1dc:	movne	r3, #0
   1e1e0:	uxtb	r3, r3
   1e1e4:	mov	r2, r3
   1e1e8:	ldr	r3, [fp, #-8]
   1e1ec:	add	r3, r2, r3
   1e1f0:	str	r3, [fp, #-8]
   1e1f4:	b	1e25c <__assert_fail@plt+0xce78>
   1e1f8:	ldr	r3, [fp, #-8]
   1e1fc:	lsr	r3, r3, #1
   1e200:	add	r3, r3, #1
   1e204:	mvn	r2, r3
   1e208:	ldr	r3, [fp, #-8]
   1e20c:	cmp	r2, r3
   1e210:	bcs	1e234 <__assert_fail@plt+0xce50>
   1e214:	ldr	r3, [fp, #-8]
   1e218:	lsr	r2, r3, #1
   1e21c:	ldr	r3, [fp, #-8]
   1e220:	add	r3, r2, r3
   1e224:	add	r3, r3, #1
   1e228:	str	r3, [fp, #-8]
   1e22c:	mov	r3, #1
   1e230:	b	1e250 <__assert_fail@plt+0xce6c>
   1e234:	ldr	r3, [fp, #-8]
   1e238:	lsr	r2, r3, #1
   1e23c:	ldr	r3, [fp, #-8]
   1e240:	add	r3, r2, r3
   1e244:	add	r3, r3, #1
   1e248:	str	r3, [fp, #-8]
   1e24c:	mov	r3, #0
   1e250:	cmp	r3, #0
   1e254:	beq	1e25c <__assert_fail@plt+0xce78>
   1e258:	bl	1ea24 <__assert_fail@plt+0xd640>
   1e25c:	ldr	r3, [fp, #-8]
   1e260:	ldr	r2, [fp, #-24]	; 0xffffffe8
   1e264:	mov	r1, r3
   1e268:	ldr	r0, [fp, #-16]
   1e26c:	bl	1e030 <__assert_fail@plt+0xcc4c>
   1e270:	str	r0, [fp, #-16]
   1e274:	ldr	r2, [fp, #-8]
   1e278:	ldr	r3, [fp, #-20]	; 0xffffffec
   1e27c:	str	r2, [r3]
   1e280:	ldr	r3, [fp, #-16]
   1e284:	mov	r0, r3
   1e288:	sub	sp, fp, #4
   1e28c:	pop	{fp, pc}
   1e290:	push	{fp, lr}
   1e294:	add	fp, sp, #4
   1e298:	sub	sp, sp, #32
   1e29c:	str	r0, [fp, #-24]	; 0xffffffe8
   1e2a0:	str	r1, [fp, #-28]	; 0xffffffe4
   1e2a4:	str	r2, [fp, #-32]	; 0xffffffe0
   1e2a8:	str	r3, [fp, #-36]	; 0xffffffdc
   1e2ac:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1e2b0:	ldr	r3, [r3]
   1e2b4:	str	r3, [fp, #-8]
   1e2b8:	ldr	r3, [fp, #-8]
   1e2bc:	asr	r3, r3, #1
   1e2c0:	cmp	r3, #0
   1e2c4:	bge	1e2ec <__assert_fail@plt+0xcf08>
   1e2c8:	ldr	r3, [fp, #-8]
   1e2cc:	asr	r3, r3, #1
   1e2d0:	rsb	r2, r3, #-2147483648	; 0x80000000
   1e2d4:	ldr	r3, [fp, #-8]
   1e2d8:	cmp	r2, r3
   1e2dc:	movgt	r3, #1
   1e2e0:	movle	r3, #0
   1e2e4:	uxtb	r3, r3
   1e2e8:	b	1e340 <__assert_fail@plt+0xcf5c>
   1e2ec:	ldr	r3, [fp, #-8]
   1e2f0:	cmp	r3, #0
   1e2f4:	bge	1e31c <__assert_fail@plt+0xcf38>
   1e2f8:	ldr	r3, [fp, #-8]
   1e2fc:	asr	r2, r3, #1
   1e300:	ldr	r3, [fp, #-8]
   1e304:	rsb	r3, r3, #-2147483648	; 0x80000000
   1e308:	cmp	r2, r3
   1e30c:	movlt	r3, #1
   1e310:	movge	r3, #0
   1e314:	uxtb	r3, r3
   1e318:	b	1e340 <__assert_fail@plt+0xcf5c>
   1e31c:	ldr	r3, [fp, #-8]
   1e320:	asr	r2, r3, #1
   1e324:	mvn	r3, #-2147483648	; 0x80000000
   1e328:	sub	r3, r3, r2
   1e32c:	ldr	r2, [fp, #-8]
   1e330:	cmp	r3, r2
   1e334:	movlt	r3, #1
   1e338:	movge	r3, #0
   1e33c:	uxtb	r3, r3
   1e340:	cmp	r3, #0
   1e344:	beq	1e368 <__assert_fail@plt+0xcf84>
   1e348:	ldr	r3, [fp, #-8]
   1e34c:	asr	r3, r3, #1
   1e350:	mov	r2, r3
   1e354:	ldr	r3, [fp, #-8]
   1e358:	add	r3, r2, r3
   1e35c:	str	r3, [fp, #-16]
   1e360:	mov	r3, #1
   1e364:	b	1e384 <__assert_fail@plt+0xcfa0>
   1e368:	ldr	r3, [fp, #-8]
   1e36c:	asr	r3, r3, #1
   1e370:	mov	r2, r3
   1e374:	ldr	r3, [fp, #-8]
   1e378:	add	r3, r2, r3
   1e37c:	str	r3, [fp, #-16]
   1e380:	mov	r3, #0
   1e384:	cmp	r3, #0
   1e388:	beq	1e394 <__assert_fail@plt+0xcfb0>
   1e38c:	mvn	r3, #-2147483648	; 0x80000000
   1e390:	str	r3, [fp, #-16]
   1e394:	ldr	r3, [fp, #-36]	; 0xffffffdc
   1e398:	cmp	r3, #0
   1e39c:	blt	1e3b8 <__assert_fail@plt+0xcfd4>
   1e3a0:	ldr	r3, [fp, #-16]
   1e3a4:	ldr	r2, [fp, #-36]	; 0xffffffdc
   1e3a8:	cmp	r2, r3
   1e3ac:	bge	1e3b8 <__assert_fail@plt+0xcfd4>
   1e3b0:	ldr	r3, [fp, #-36]	; 0xffffffdc
   1e3b4:	str	r3, [fp, #-16]
   1e3b8:	ldr	r3, [fp, #4]
   1e3bc:	cmp	r3, #0
   1e3c0:	bge	1e450 <__assert_fail@plt+0xd06c>
   1e3c4:	ldr	r3, [fp, #-16]
   1e3c8:	cmp	r3, #0
   1e3cc:	bge	1e3fc <__assert_fail@plt+0xd018>
   1e3d0:	ldr	r1, [fp, #4]
   1e3d4:	mvn	r0, #-2147483648	; 0x80000000
   1e3d8:	bl	2181c <__assert_fail@plt+0x10438>
   1e3dc:	mov	r3, r0
   1e3e0:	mov	r2, r3
   1e3e4:	ldr	r3, [fp, #-16]
   1e3e8:	cmp	r2, r3
   1e3ec:	movgt	r3, #1
   1e3f0:	movle	r3, #0
   1e3f4:	uxtb	r3, r3
   1e3f8:	b	1e4f0 <__assert_fail@plt+0xd10c>
   1e3fc:	ldr	r3, [fp, #4]
   1e400:	cmn	r3, #1
   1e404:	bne	1e424 <__assert_fail@plt+0xd040>
   1e408:	ldr	r3, [fp, #-16]
   1e40c:	add	r3, r3, #-2147483648	; 0x80000000
   1e410:	cmp	r3, #0
   1e414:	movgt	r3, #1
   1e418:	movle	r3, #0
   1e41c:	uxtb	r3, r3
   1e420:	b	1e4f0 <__assert_fail@plt+0xd10c>
   1e424:	ldr	r1, [fp, #4]
   1e428:	mov	r0, #-2147483648	; 0x80000000
   1e42c:	bl	2181c <__assert_fail@plt+0x10438>
   1e430:	mov	r3, r0
   1e434:	mov	r2, r3
   1e438:	ldr	r3, [fp, #-16]
   1e43c:	cmp	r2, r3
   1e440:	movlt	r3, #1
   1e444:	movge	r3, #0
   1e448:	uxtb	r3, r3
   1e44c:	b	1e4f0 <__assert_fail@plt+0xd10c>
   1e450:	ldr	r3, [fp, #4]
   1e454:	cmp	r3, #0
   1e458:	beq	1e4ec <__assert_fail@plt+0xd108>
   1e45c:	ldr	r3, [fp, #-16]
   1e460:	cmp	r3, #0
   1e464:	bge	1e4c0 <__assert_fail@plt+0xd0dc>
   1e468:	ldr	r3, [fp, #-16]
   1e46c:	cmn	r3, #1
   1e470:	bne	1e490 <__assert_fail@plt+0xd0ac>
   1e474:	ldr	r3, [fp, #4]
   1e478:	add	r3, r3, #-2147483648	; 0x80000000
   1e47c:	cmp	r3, #0
   1e480:	movgt	r3, #1
   1e484:	movle	r3, #0
   1e488:	uxtb	r3, r3
   1e48c:	b	1e4f0 <__assert_fail@plt+0xd10c>
   1e490:	ldr	r3, [fp, #-16]
   1e494:	mov	r1, r3
   1e498:	mov	r0, #-2147483648	; 0x80000000
   1e49c:	bl	2181c <__assert_fail@plt+0x10438>
   1e4a0:	mov	r3, r0
   1e4a4:	mov	r2, r3
   1e4a8:	ldr	r3, [fp, #4]
   1e4ac:	cmp	r2, r3
   1e4b0:	movlt	r3, #1
   1e4b4:	movge	r3, #0
   1e4b8:	uxtb	r3, r3
   1e4bc:	b	1e4f0 <__assert_fail@plt+0xd10c>
   1e4c0:	ldr	r1, [fp, #4]
   1e4c4:	mvn	r0, #-2147483648	; 0x80000000
   1e4c8:	bl	2181c <__assert_fail@plt+0x10438>
   1e4cc:	mov	r3, r0
   1e4d0:	mov	r2, r3
   1e4d4:	ldr	r3, [fp, #-16]
   1e4d8:	cmp	r2, r3
   1e4dc:	movlt	r3, #1
   1e4e0:	movge	r3, #0
   1e4e4:	uxtb	r3, r3
   1e4e8:	b	1e4f0 <__assert_fail@plt+0xd10c>
   1e4ec:	mov	r3, #0
   1e4f0:	cmp	r3, #0
   1e4f4:	beq	1e514 <__assert_fail@plt+0xd130>
   1e4f8:	ldr	r3, [fp, #-16]
   1e4fc:	mov	r2, r3
   1e500:	ldr	r3, [fp, #4]
   1e504:	mul	r3, r3, r2
   1e508:	str	r3, [fp, #-20]	; 0xffffffec
   1e50c:	mov	r3, #1
   1e510:	b	1e52c <__assert_fail@plt+0xd148>
   1e514:	ldr	r3, [fp, #-16]
   1e518:	mov	r2, r3
   1e51c:	ldr	r3, [fp, #4]
   1e520:	mul	r3, r3, r2
   1e524:	str	r3, [fp, #-20]	; 0xffffffec
   1e528:	mov	r3, #0
   1e52c:	cmp	r3, #0
   1e530:	beq	1e53c <__assert_fail@plt+0xd158>
   1e534:	mvn	r3, #-2147483648	; 0x80000000
   1e538:	b	1e554 <__assert_fail@plt+0xd170>
   1e53c:	ldr	r3, [fp, #-20]	; 0xffffffec
   1e540:	cmp	r3, #63	; 0x3f
   1e544:	bgt	1e550 <__assert_fail@plt+0xd16c>
   1e548:	mov	r3, #64	; 0x40
   1e54c:	b	1e554 <__assert_fail@plt+0xd170>
   1e550:	mov	r3, #0
   1e554:	str	r3, [fp, #-12]
   1e558:	ldr	r3, [fp, #-12]
   1e55c:	cmp	r3, #0
   1e560:	beq	1e59c <__assert_fail@plt+0xd1b8>
   1e564:	ldr	r1, [fp, #4]
   1e568:	ldr	r0, [fp, #-12]
   1e56c:	bl	2181c <__assert_fail@plt+0x10438>
   1e570:	mov	r3, r0
   1e574:	str	r3, [fp, #-16]
   1e578:	ldr	r3, [fp, #-12]
   1e57c:	ldr	r1, [fp, #4]
   1e580:	mov	r0, r3
   1e584:	bl	21a3c <__assert_fail@plt+0x10658>
   1e588:	mov	r3, r1
   1e58c:	mov	r2, r3
   1e590:	ldr	r3, [fp, #-12]
   1e594:	sub	r3, r3, r2
   1e598:	str	r3, [fp, #-20]	; 0xffffffec
   1e59c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1e5a0:	cmp	r3, #0
   1e5a4:	bne	1e5b4 <__assert_fail@plt+0xd1d0>
   1e5a8:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1e5ac:	mov	r2, #0
   1e5b0:	str	r2, [r3]
   1e5b4:	ldr	r2, [fp, #-16]
   1e5b8:	ldr	r3, [fp, #-8]
   1e5bc:	sub	r2, r2, r3
   1e5c0:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1e5c4:	cmp	r2, r3
   1e5c8:	bge	1e800 <__assert_fail@plt+0xd41c>
   1e5cc:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1e5d0:	cmp	r3, #0
   1e5d4:	bge	1e5f8 <__assert_fail@plt+0xd214>
   1e5d8:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1e5dc:	rsb	r2, r3, #-2147483648	; 0x80000000
   1e5e0:	ldr	r3, [fp, #-8]
   1e5e4:	cmp	r2, r3
   1e5e8:	movgt	r3, #1
   1e5ec:	movle	r3, #0
   1e5f0:	uxtb	r3, r3
   1e5f4:	b	1e644 <__assert_fail@plt+0xd260>
   1e5f8:	ldr	r3, [fp, #-8]
   1e5fc:	cmp	r3, #0
   1e600:	bge	1e624 <__assert_fail@plt+0xd240>
   1e604:	ldr	r3, [fp, #-8]
   1e608:	rsb	r2, r3, #-2147483648	; 0x80000000
   1e60c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1e610:	cmp	r2, r3
   1e614:	movgt	r3, #1
   1e618:	movle	r3, #0
   1e61c:	uxtb	r3, r3
   1e620:	b	1e644 <__assert_fail@plt+0xd260>
   1e624:	ldr	r2, [fp, #-32]	; 0xffffffe0
   1e628:	mvn	r3, #-2147483648	; 0x80000000
   1e62c:	sub	r3, r3, r2
   1e630:	ldr	r2, [fp, #-8]
   1e634:	cmp	r3, r2
   1e638:	movlt	r3, #1
   1e63c:	movge	r3, #0
   1e640:	uxtb	r3, r3
   1e644:	cmp	r3, #0
   1e648:	beq	1e660 <__assert_fail@plt+0xd27c>
   1e64c:	ldr	r2, [fp, #-8]
   1e650:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1e654:	add	r3, r2, r3
   1e658:	str	r3, [fp, #-16]
   1e65c:	b	1e7fc <__assert_fail@plt+0xd418>
   1e660:	ldr	r2, [fp, #-8]
   1e664:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1e668:	add	r3, r2, r3
   1e66c:	str	r3, [fp, #-16]
   1e670:	ldr	r3, [fp, #-36]	; 0xffffffdc
   1e674:	cmp	r3, #0
   1e678:	blt	1e68c <__assert_fail@plt+0xd2a8>
   1e67c:	ldr	r3, [fp, #-16]
   1e680:	ldr	r2, [fp, #-36]	; 0xffffffdc
   1e684:	cmp	r2, r3
   1e688:	blt	1e7fc <__assert_fail@plt+0xd418>
   1e68c:	ldr	r3, [fp, #4]
   1e690:	cmp	r3, #0
   1e694:	bge	1e724 <__assert_fail@plt+0xd340>
   1e698:	ldr	r3, [fp, #-16]
   1e69c:	cmp	r3, #0
   1e6a0:	bge	1e6d0 <__assert_fail@plt+0xd2ec>
   1e6a4:	ldr	r1, [fp, #4]
   1e6a8:	mvn	r0, #-2147483648	; 0x80000000
   1e6ac:	bl	2181c <__assert_fail@plt+0x10438>
   1e6b0:	mov	r3, r0
   1e6b4:	mov	r2, r3
   1e6b8:	ldr	r3, [fp, #-16]
   1e6bc:	cmp	r2, r3
   1e6c0:	movgt	r3, #1
   1e6c4:	movle	r3, #0
   1e6c8:	uxtb	r3, r3
   1e6cc:	b	1e7c4 <__assert_fail@plt+0xd3e0>
   1e6d0:	ldr	r3, [fp, #4]
   1e6d4:	cmn	r3, #1
   1e6d8:	bne	1e6f8 <__assert_fail@plt+0xd314>
   1e6dc:	ldr	r3, [fp, #-16]
   1e6e0:	add	r3, r3, #-2147483648	; 0x80000000
   1e6e4:	cmp	r3, #0
   1e6e8:	movgt	r3, #1
   1e6ec:	movle	r3, #0
   1e6f0:	uxtb	r3, r3
   1e6f4:	b	1e7c4 <__assert_fail@plt+0xd3e0>
   1e6f8:	ldr	r1, [fp, #4]
   1e6fc:	mov	r0, #-2147483648	; 0x80000000
   1e700:	bl	2181c <__assert_fail@plt+0x10438>
   1e704:	mov	r3, r0
   1e708:	mov	r2, r3
   1e70c:	ldr	r3, [fp, #-16]
   1e710:	cmp	r2, r3
   1e714:	movlt	r3, #1
   1e718:	movge	r3, #0
   1e71c:	uxtb	r3, r3
   1e720:	b	1e7c4 <__assert_fail@plt+0xd3e0>
   1e724:	ldr	r3, [fp, #4]
   1e728:	cmp	r3, #0
   1e72c:	beq	1e7c0 <__assert_fail@plt+0xd3dc>
   1e730:	ldr	r3, [fp, #-16]
   1e734:	cmp	r3, #0
   1e738:	bge	1e794 <__assert_fail@plt+0xd3b0>
   1e73c:	ldr	r3, [fp, #-16]
   1e740:	cmn	r3, #1
   1e744:	bne	1e764 <__assert_fail@plt+0xd380>
   1e748:	ldr	r3, [fp, #4]
   1e74c:	add	r3, r3, #-2147483648	; 0x80000000
   1e750:	cmp	r3, #0
   1e754:	movgt	r3, #1
   1e758:	movle	r3, #0
   1e75c:	uxtb	r3, r3
   1e760:	b	1e7c4 <__assert_fail@plt+0xd3e0>
   1e764:	ldr	r3, [fp, #-16]
   1e768:	mov	r1, r3
   1e76c:	mov	r0, #-2147483648	; 0x80000000
   1e770:	bl	2181c <__assert_fail@plt+0x10438>
   1e774:	mov	r3, r0
   1e778:	mov	r2, r3
   1e77c:	ldr	r3, [fp, #4]
   1e780:	cmp	r2, r3
   1e784:	movlt	r3, #1
   1e788:	movge	r3, #0
   1e78c:	uxtb	r3, r3
   1e790:	b	1e7c4 <__assert_fail@plt+0xd3e0>
   1e794:	ldr	r1, [fp, #4]
   1e798:	mvn	r0, #-2147483648	; 0x80000000
   1e79c:	bl	2181c <__assert_fail@plt+0x10438>
   1e7a0:	mov	r3, r0
   1e7a4:	mov	r2, r3
   1e7a8:	ldr	r3, [fp, #-16]
   1e7ac:	cmp	r2, r3
   1e7b0:	movlt	r3, #1
   1e7b4:	movge	r3, #0
   1e7b8:	uxtb	r3, r3
   1e7bc:	b	1e7c4 <__assert_fail@plt+0xd3e0>
   1e7c0:	mov	r3, #0
   1e7c4:	cmp	r3, #0
   1e7c8:	beq	1e7e4 <__assert_fail@plt+0xd400>
   1e7cc:	ldr	r3, [fp, #-16]
   1e7d0:	mov	r2, r3
   1e7d4:	ldr	r3, [fp, #4]
   1e7d8:	mul	r3, r3, r2
   1e7dc:	str	r3, [fp, #-20]	; 0xffffffec
   1e7e0:	b	1e7fc <__assert_fail@plt+0xd418>
   1e7e4:	ldr	r3, [fp, #-16]
   1e7e8:	mov	r2, r3
   1e7ec:	ldr	r3, [fp, #4]
   1e7f0:	mul	r3, r3, r2
   1e7f4:	str	r3, [fp, #-20]	; 0xffffffec
   1e7f8:	b	1e800 <__assert_fail@plt+0xd41c>
   1e7fc:	bl	1ea24 <__assert_fail@plt+0xd640>
   1e800:	ldr	r3, [fp, #-20]	; 0xffffffec
   1e804:	mov	r1, r3
   1e808:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1e80c:	bl	1df98 <__assert_fail@plt+0xcbb4>
   1e810:	str	r0, [fp, #-24]	; 0xffffffe8
   1e814:	ldr	r2, [fp, #-16]
   1e818:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1e81c:	str	r2, [r3]
   1e820:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1e824:	mov	r0, r3
   1e828:	sub	sp, fp, #4
   1e82c:	pop	{fp, pc}
   1e830:	push	{fp, lr}
   1e834:	add	fp, sp, #4
   1e838:	sub	sp, sp, #8
   1e83c:	str	r0, [fp, #-8]
   1e840:	mov	r1, #1
   1e844:	ldr	r0, [fp, #-8]
   1e848:	bl	1e888 <__assert_fail@plt+0xd4a4>
   1e84c:	mov	r3, r0
   1e850:	mov	r0, r3
   1e854:	sub	sp, fp, #4
   1e858:	pop	{fp, pc}
   1e85c:	push	{fp, lr}
   1e860:	add	fp, sp, #4
   1e864:	sub	sp, sp, #8
   1e868:	str	r0, [fp, #-8]
   1e86c:	mov	r1, #1
   1e870:	ldr	r0, [fp, #-8]
   1e874:	bl	1e8c4 <__assert_fail@plt+0xd4e0>
   1e878:	mov	r3, r0
   1e87c:	mov	r0, r3
   1e880:	sub	sp, fp, #4
   1e884:	pop	{fp, pc}
   1e888:	push	{fp, lr}
   1e88c:	add	fp, sp, #4
   1e890:	sub	sp, sp, #8
   1e894:	str	r0, [fp, #-8]
   1e898:	str	r1, [fp, #-12]
   1e89c:	ldr	r1, [fp, #-12]
   1e8a0:	ldr	r0, [fp, #-8]
   1e8a4:	bl	206fc <__assert_fail@plt+0xf318>
   1e8a8:	mov	r3, r0
   1e8ac:	mov	r0, r3
   1e8b0:	bl	1ded8 <__assert_fail@plt+0xcaf4>
   1e8b4:	mov	r3, r0
   1e8b8:	mov	r0, r3
   1e8bc:	sub	sp, fp, #4
   1e8c0:	pop	{fp, pc}
   1e8c4:	push	{fp, lr}
   1e8c8:	add	fp, sp, #4
   1e8cc:	sub	sp, sp, #8
   1e8d0:	str	r0, [fp, #-8]
   1e8d4:	str	r1, [fp, #-12]
   1e8d8:	ldr	r1, [fp, #-12]
   1e8dc:	ldr	r0, [fp, #-8]
   1e8e0:	bl	20ec8 <__assert_fail@plt+0xfae4>
   1e8e4:	mov	r3, r0
   1e8e8:	mov	r0, r3
   1e8ec:	bl	1ded8 <__assert_fail@plt+0xcaf4>
   1e8f0:	mov	r3, r0
   1e8f4:	mov	r0, r3
   1e8f8:	sub	sp, fp, #4
   1e8fc:	pop	{fp, pc}
   1e900:	push	{fp, lr}
   1e904:	add	fp, sp, #4
   1e908:	sub	sp, sp, #8
   1e90c:	str	r0, [fp, #-8]
   1e910:	str	r1, [fp, #-12]
   1e914:	ldr	r0, [fp, #-12]
   1e918:	bl	1df08 <__assert_fail@plt+0xcb24>
   1e91c:	mov	r3, r0
   1e920:	ldr	r2, [fp, #-12]
   1e924:	ldr	r1, [fp, #-8]
   1e928:	mov	r0, r3
   1e92c:	bl	1112c <memcpy@plt>
   1e930:	mov	r3, r0
   1e934:	mov	r0, r3
   1e938:	sub	sp, fp, #4
   1e93c:	pop	{fp, pc}
   1e940:	push	{fp, lr}
   1e944:	add	fp, sp, #4
   1e948:	sub	sp, sp, #8
   1e94c:	str	r0, [fp, #-8]
   1e950:	str	r1, [fp, #-12]
   1e954:	ldr	r0, [fp, #-12]
   1e958:	bl	1df3c <__assert_fail@plt+0xcb58>
   1e95c:	mov	r3, r0
   1e960:	mov	r0, r3
   1e964:	ldr	r3, [fp, #-12]
   1e968:	mov	r2, r3
   1e96c:	ldr	r1, [fp, #-8]
   1e970:	bl	1112c <memcpy@plt>
   1e974:	mov	r3, r0
   1e978:	mov	r0, r3
   1e97c:	sub	sp, fp, #4
   1e980:	pop	{fp, pc}
   1e984:	push	{fp, lr}
   1e988:	add	fp, sp, #4
   1e98c:	sub	sp, sp, #16
   1e990:	str	r0, [fp, #-16]
   1e994:	str	r1, [fp, #-20]	; 0xffffffec
   1e998:	ldr	r3, [fp, #-20]	; 0xffffffec
   1e99c:	add	r3, r3, #1
   1e9a0:	mov	r0, r3
   1e9a4:	bl	1df3c <__assert_fail@plt+0xcb58>
   1e9a8:	mov	r3, r0
   1e9ac:	str	r3, [fp, #-8]
   1e9b0:	ldr	r3, [fp, #-20]	; 0xffffffec
   1e9b4:	ldr	r2, [fp, #-8]
   1e9b8:	add	r3, r2, r3
   1e9bc:	mov	r2, #0
   1e9c0:	strb	r2, [r3]
   1e9c4:	ldr	r3, [fp, #-20]	; 0xffffffec
   1e9c8:	mov	r2, r3
   1e9cc:	ldr	r1, [fp, #-16]
   1e9d0:	ldr	r0, [fp, #-8]
   1e9d4:	bl	1112c <memcpy@plt>
   1e9d8:	mov	r3, r0
   1e9dc:	mov	r0, r3
   1e9e0:	sub	sp, fp, #4
   1e9e4:	pop	{fp, pc}
   1e9e8:	push	{fp, lr}
   1e9ec:	add	fp, sp, #4
   1e9f0:	sub	sp, sp, #8
   1e9f4:	str	r0, [fp, #-8]
   1e9f8:	ldr	r0, [fp, #-8]
   1e9fc:	bl	11294 <strlen@plt>
   1ea00:	mov	r3, r0
   1ea04:	add	r3, r3, #1
   1ea08:	mov	r1, r3
   1ea0c:	ldr	r0, [fp, #-8]
   1ea10:	bl	1e900 <__assert_fail@plt+0xd51c>
   1ea14:	mov	r3, r0
   1ea18:	mov	r0, r3
   1ea1c:	sub	sp, fp, #4
   1ea20:	pop	{fp, pc}
   1ea24:	push	{r4, r5, fp, lr}
   1ea28:	add	fp, sp, #12
   1ea2c:	ldr	r3, [pc, #32]	; 1ea54 <__assert_fail@plt+0xd670>
   1ea30:	ldr	r4, [r3]
   1ea34:	ldr	r0, [pc, #28]	; 1ea58 <__assert_fail@plt+0xd674>
   1ea38:	bl	11288 <gettext@plt>
   1ea3c:	mov	r3, r0
   1ea40:	ldr	r2, [pc, #20]	; 1ea5c <__assert_fail@plt+0xd678>
   1ea44:	mov	r1, #0
   1ea48:	mov	r0, r4
   1ea4c:	bl	11210 <error@plt>
   1ea50:	bl	113c0 <abort@plt>
   1ea54:	andeq	r4, r3, ip, lsl #3
   1ea58:	andeq	r3, r2, r0, lsl sl
   1ea5c:	andeq	r3, r2, r4, lsr #20
   1ea60:	push	{r4, r5, fp, lr}
   1ea64:	add	fp, sp, #12
   1ea68:	sub	sp, sp, #40	; 0x28
   1ea6c:	str	r0, [fp, #-32]	; 0xffffffe0
   1ea70:	str	r1, [fp, #-36]	; 0xffffffdc
   1ea74:	strd	r2, [fp, #-44]	; 0xffffffd4
   1ea78:	sub	r2, fp, #28
   1ea7c:	ldr	r3, [fp, #12]
   1ea80:	str	r3, [sp]
   1ea84:	mov	r3, r2
   1ea88:	ldr	r2, [fp, #-36]	; 0xffffffdc
   1ea8c:	mov	r1, #0
   1ea90:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1ea94:	bl	1ef94 <__assert_fail@plt+0xdbb0>
   1ea98:	str	r0, [fp, #-16]
   1ea9c:	ldr	r3, [fp, #-16]
   1eaa0:	cmp	r3, #0
   1eaa4:	bne	1eb44 <__assert_fail@plt+0xd760>
   1eaa8:	ldrd	r0, [fp, #-28]	; 0xffffffe4
   1eaac:	ldrd	r2, [fp, #-44]	; 0xffffffd4
   1eab0:	cmp	r0, r2
   1eab4:	sbcs	r3, r1, r3
   1eab8:	blt	1ead0 <__assert_fail@plt+0xd6ec>
   1eabc:	ldrd	r2, [fp, #-28]	; 0xffffffe4
   1eac0:	ldrd	r0, [fp, #4]
   1eac4:	cmp	r0, r2
   1eac8:	sbcs	r3, r1, r3
   1eacc:	bge	1eb80 <__assert_fail@plt+0xd79c>
   1ead0:	mov	r3, #1
   1ead4:	str	r3, [fp, #-16]
   1ead8:	ldrd	r2, [fp, #-28]	; 0xffffffe4
   1eadc:	mvn	r0, #-1073741824	; 0xc0000000
   1eae0:	mov	r1, #0
   1eae4:	cmp	r0, r2
   1eae8:	sbcs	r3, r1, r3
   1eaec:	bge	1eb04 <__assert_fail@plt+0xd720>
   1eaf0:	bl	112d0 <__errno_location@plt>
   1eaf4:	mov	r2, r0
   1eaf8:	mov	r3, #75	; 0x4b
   1eafc:	str	r3, [r2]
   1eb00:	b	1eb80 <__assert_fail@plt+0xd79c>
   1eb04:	ldrd	r2, [fp, #-28]	; 0xffffffe4
   1eb08:	mov	r0, #-1073741824	; 0xc0000000
   1eb0c:	mvn	r1, #0
   1eb10:	cmp	r2, r0
   1eb14:	sbcs	r3, r3, r1
   1eb18:	bge	1eb30 <__assert_fail@plt+0xd74c>
   1eb1c:	bl	112d0 <__errno_location@plt>
   1eb20:	mov	r2, r0
   1eb24:	mov	r3, #75	; 0x4b
   1eb28:	str	r3, [r2]
   1eb2c:	b	1eb80 <__assert_fail@plt+0xd79c>
   1eb30:	bl	112d0 <__errno_location@plt>
   1eb34:	mov	r2, r0
   1eb38:	mov	r3, #34	; 0x22
   1eb3c:	str	r3, [r2]
   1eb40:	b	1eb80 <__assert_fail@plt+0xd79c>
   1eb44:	ldr	r3, [fp, #-16]
   1eb48:	cmp	r3, #1
   1eb4c:	bne	1eb64 <__assert_fail@plt+0xd780>
   1eb50:	bl	112d0 <__errno_location@plt>
   1eb54:	mov	r2, r0
   1eb58:	mov	r3, #75	; 0x4b
   1eb5c:	str	r3, [r2]
   1eb60:	b	1eb80 <__assert_fail@plt+0xd79c>
   1eb64:	ldr	r3, [fp, #-16]
   1eb68:	cmp	r3, #3
   1eb6c:	bne	1eb80 <__assert_fail@plt+0xd79c>
   1eb70:	bl	112d0 <__errno_location@plt>
   1eb74:	mov	r2, r0
   1eb78:	mov	r3, #0
   1eb7c:	str	r3, [r2]
   1eb80:	ldr	r3, [fp, #-16]
   1eb84:	cmp	r3, #0
   1eb88:	beq	1ebf0 <__assert_fail@plt+0xd80c>
   1eb8c:	ldr	r3, [fp, #20]
   1eb90:	cmp	r3, #0
   1eb94:	beq	1eba0 <__assert_fail@plt+0xd7bc>
   1eb98:	ldr	r4, [fp, #20]
   1eb9c:	b	1eba4 <__assert_fail@plt+0xd7c0>
   1eba0:	mov	r4, #1
   1eba4:	bl	112d0 <__errno_location@plt>
   1eba8:	mov	r3, r0
   1ebac:	ldr	r3, [r3]
   1ebb0:	cmp	r3, #22
   1ebb4:	beq	1ebc8 <__assert_fail@plt+0xd7e4>
   1ebb8:	bl	112d0 <__errno_location@plt>
   1ebbc:	mov	r3, r0
   1ebc0:	ldr	r5, [r3]
   1ebc4:	b	1ebcc <__assert_fail@plt+0xd7e8>
   1ebc8:	mov	r5, #0
   1ebcc:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1ebd0:	bl	1cb84 <__assert_fail@plt+0xb7a0>
   1ebd4:	mov	r3, r0
   1ebd8:	str	r3, [sp]
   1ebdc:	ldr	r3, [fp, #16]
   1ebe0:	ldr	r2, [pc, #28]	; 1ec04 <__assert_fail@plt+0xd820>
   1ebe4:	mov	r1, r5
   1ebe8:	mov	r0, r4
   1ebec:	bl	11210 <error@plt>
   1ebf0:	ldrd	r2, [fp, #-28]	; 0xffffffe4
   1ebf4:	mov	r0, r2
   1ebf8:	mov	r1, r3
   1ebfc:	sub	sp, fp, #12
   1ec00:	pop	{r4, r5, fp, pc}
   1ec04:	andeq	r3, r2, r8, lsr #20
   1ec08:	push	{fp, lr}
   1ec0c:	add	fp, sp, #4
   1ec10:	sub	sp, sp, #40	; 0x28
   1ec14:	str	r0, [fp, #-8]
   1ec18:	strd	r2, [fp, #-20]	; 0xffffffec
   1ec1c:	ldr	r3, [fp, #20]
   1ec20:	str	r3, [sp, #16]
   1ec24:	ldr	r3, [fp, #16]
   1ec28:	str	r3, [sp, #12]
   1ec2c:	ldr	r3, [fp, #12]
   1ec30:	str	r3, [sp, #8]
   1ec34:	ldrd	r2, [fp, #4]
   1ec38:	strd	r2, [sp]
   1ec3c:	ldrd	r2, [fp, #-20]	; 0xffffffec
   1ec40:	mov	r1, #10
   1ec44:	ldr	r0, [fp, #-8]
   1ec48:	bl	1ea60 <__assert_fail@plt+0xd67c>
   1ec4c:	mov	r2, r0
   1ec50:	mov	r3, r1
   1ec54:	mov	r0, r2
   1ec58:	mov	r1, r3
   1ec5c:	sub	sp, fp, #4
   1ec60:	pop	{fp, pc}
   1ec64:	push	{r4, r5, fp, lr}
   1ec68:	add	fp, sp, #12
   1ec6c:	sub	sp, sp, #16
   1ec70:	str	r0, [fp, #-24]	; 0xffffffe8
   1ec74:	str	r1, [fp, #-28]	; 0xffffffe4
   1ec78:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1ec7c:	cmp	r3, #0
   1ec80:	bge	1ed54 <__assert_fail@plt+0xd970>
   1ec84:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1ec88:	ldrd	r2, [r3]
   1ec8c:	cmp	r2, #0
   1ec90:	sbcs	r3, r3, #0
   1ec94:	bge	1ecd8 <__assert_fail@plt+0xd8f4>
   1ec98:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1ec9c:	ldrd	r4, [r3]
   1eca0:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1eca4:	mov	r2, r3
   1eca8:	asr	r3, r2, #31
   1ecac:	mvn	r0, #0
   1ecb0:	mvn	r1, #-2147483648	; 0x80000000
   1ecb4:	bl	21a5c <__assert_fail@plt+0x10678>
   1ecb8:	mov	r2, r0
   1ecbc:	mov	r3, r1
   1ecc0:	cmp	r4, r2
   1ecc4:	sbcs	r3, r5, r3
   1ecc8:	movlt	r3, #1
   1eccc:	movge	r3, #0
   1ecd0:	uxtb	r3, r3
   1ecd4:	b	1ee50 <__assert_fail@plt+0xda6c>
   1ecd8:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1ecdc:	cmn	r3, #1
   1ece0:	bne	1ed0c <__assert_fail@plt+0xd928>
   1ece4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1ece8:	ldrd	r2, [r3]
   1ecec:	adds	r2, r2, #0
   1ecf0:	adc	r3, r3, #-2147483648	; 0x80000000
   1ecf4:	cmp	r2, #1
   1ecf8:	sbcs	r3, r3, #0
   1ecfc:	movge	r3, #1
   1ed00:	movlt	r3, #0
   1ed04:	uxtb	r3, r3
   1ed08:	b	1ee50 <__assert_fail@plt+0xda6c>
   1ed0c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1ed10:	mov	r2, r3
   1ed14:	asr	r3, r2, #31
   1ed18:	mov	r0, #0
   1ed1c:	mov	r1, #-2147483648	; 0x80000000
   1ed20:	bl	21a5c <__assert_fail@plt+0x10678>
   1ed24:	mov	r2, r0
   1ed28:	mov	r3, r1
   1ed2c:	mov	r0, r2
   1ed30:	mov	r1, r3
   1ed34:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1ed38:	ldrd	r2, [r3]
   1ed3c:	cmp	r0, r2
   1ed40:	sbcs	r3, r1, r3
   1ed44:	movlt	r3, #1
   1ed48:	movge	r3, #0
   1ed4c:	uxtb	r3, r3
   1ed50:	b	1ee50 <__assert_fail@plt+0xda6c>
   1ed54:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1ed58:	cmp	r3, #0
   1ed5c:	beq	1ee4c <__assert_fail@plt+0xda68>
   1ed60:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1ed64:	ldrd	r2, [r3]
   1ed68:	cmp	r2, #0
   1ed6c:	sbcs	r3, r3, #0
   1ed70:	bge	1ee04 <__assert_fail@plt+0xda20>
   1ed74:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1ed78:	ldrd	r2, [r3]
   1ed7c:	mvn	r0, #0
   1ed80:	mvn	r1, #0
   1ed84:	cmp	r3, r1
   1ed88:	cmpeq	r2, r0
   1ed8c:	bne	1edbc <__assert_fail@plt+0xd9d8>
   1ed90:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1ed94:	mov	r2, r3
   1ed98:	asr	r3, r2, #31
   1ed9c:	adds	r2, r2, #0
   1eda0:	adc	r3, r3, #-2147483648	; 0x80000000
   1eda4:	cmp	r2, #1
   1eda8:	sbcs	r3, r3, #0
   1edac:	movge	r3, #1
   1edb0:	movlt	r3, #0
   1edb4:	uxtb	r3, r3
   1edb8:	b	1ee50 <__assert_fail@plt+0xda6c>
   1edbc:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1edc0:	ldrd	r2, [r3]
   1edc4:	mov	r0, #0
   1edc8:	mov	r1, #-2147483648	; 0x80000000
   1edcc:	bl	21a5c <__assert_fail@plt+0x10678>
   1edd0:	mov	r2, r0
   1edd4:	mov	r3, r1
   1edd8:	mov	r0, r2
   1eddc:	mov	r1, r3
   1ede0:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1ede4:	mov	r2, r3
   1ede8:	asr	r3, r2, #31
   1edec:	cmp	r0, r2
   1edf0:	sbcs	r3, r1, r3
   1edf4:	movlt	r3, #1
   1edf8:	movge	r3, #0
   1edfc:	uxtb	r3, r3
   1ee00:	b	1ee50 <__assert_fail@plt+0xda6c>
   1ee04:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1ee08:	mov	r2, r3
   1ee0c:	asr	r3, r2, #31
   1ee10:	mvn	r0, #0
   1ee14:	mvn	r1, #-2147483648	; 0x80000000
   1ee18:	bl	21a5c <__assert_fail@plt+0x10678>
   1ee1c:	mov	r2, r0
   1ee20:	mov	r3, r1
   1ee24:	mov	r0, r2
   1ee28:	mov	r1, r3
   1ee2c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1ee30:	ldrd	r2, [r3]
   1ee34:	cmp	r0, r2
   1ee38:	sbcs	r3, r1, r3
   1ee3c:	movlt	r3, #1
   1ee40:	movge	r3, #0
   1ee44:	uxtb	r3, r3
   1ee48:	b	1ee50 <__assert_fail@plt+0xda6c>
   1ee4c:	mov	r3, #0
   1ee50:	cmp	r3, #0
   1ee54:	beq	1ee98 <__assert_fail@plt+0xdab4>
   1ee58:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1ee5c:	ldrd	r2, [r3]
   1ee60:	mov	r0, r2
   1ee64:	mov	r1, r3
   1ee68:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1ee6c:	mov	r2, r3
   1ee70:	asr	r3, r2, #31
   1ee74:	mul	lr, r2, r1
   1ee78:	mul	ip, r0, r3
   1ee7c:	add	ip, lr, ip
   1ee80:	umull	r2, r3, r0, r2
   1ee84:	add	r1, ip, r3
   1ee88:	mov	r3, r1
   1ee8c:	strd	r2, [fp, #-20]	; 0xffffffec
   1ee90:	mov	r3, #1
   1ee94:	b	1eed4 <__assert_fail@plt+0xdaf0>
   1ee98:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1ee9c:	ldrd	r2, [r3]
   1eea0:	mov	r0, r2
   1eea4:	mov	r1, r3
   1eea8:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1eeac:	mov	r2, r3
   1eeb0:	asr	r3, r2, #31
   1eeb4:	mul	lr, r2, r1
   1eeb8:	mul	ip, r0, r3
   1eebc:	add	ip, lr, ip
   1eec0:	umull	r2, r3, r0, r2
   1eec4:	add	r1, ip, r3
   1eec8:	mov	r3, r1
   1eecc:	strd	r2, [fp, #-20]	; 0xffffffec
   1eed0:	mov	r3, #0
   1eed4:	cmp	r3, #0
   1eed8:	beq	1ef14 <__assert_fail@plt+0xdb30>
   1eedc:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1eee0:	ldrd	r2, [r3]
   1eee4:	cmp	r2, #0
   1eee8:	sbcs	r3, r3, #0
   1eeec:	bge	1eefc <__assert_fail@plt+0xdb18>
   1eef0:	mov	r2, #0
   1eef4:	mov	r3, #-2147483648	; 0x80000000
   1eef8:	b	1ef04 <__assert_fail@plt+0xdb20>
   1eefc:	mvn	r2, #0
   1ef00:	mvn	r3, #-2147483648	; 0x80000000
   1ef04:	ldr	r1, [fp, #-24]	; 0xffffffe8
   1ef08:	strd	r2, [r1]
   1ef0c:	mov	r3, #1
   1ef10:	b	1ef24 <__assert_fail@plt+0xdb40>
   1ef14:	ldrd	r2, [fp, #-20]	; 0xffffffec
   1ef18:	ldr	r1, [fp, #-24]	; 0xffffffe8
   1ef1c:	strd	r2, [r1]
   1ef20:	mov	r3, #0
   1ef24:	mov	r0, r3
   1ef28:	sub	sp, fp, #12
   1ef2c:	pop	{r4, r5, fp, pc}
   1ef30:	push	{fp, lr}
   1ef34:	add	fp, sp, #4
   1ef38:	sub	sp, sp, #24
   1ef3c:	str	r0, [fp, #-16]
   1ef40:	str	r1, [fp, #-20]	; 0xffffffec
   1ef44:	str	r2, [fp, #-24]	; 0xffffffe8
   1ef48:	mov	r3, #0
   1ef4c:	str	r3, [fp, #-8]
   1ef50:	b	1ef70 <__assert_fail@plt+0xdb8c>
   1ef54:	ldr	r1, [fp, #-20]	; 0xffffffec
   1ef58:	ldr	r0, [fp, #-16]
   1ef5c:	bl	1ec64 <__assert_fail@plt+0xd880>
   1ef60:	mov	r2, r0
   1ef64:	ldr	r3, [fp, #-8]
   1ef68:	orr	r3, r3, r2
   1ef6c:	str	r3, [fp, #-8]
   1ef70:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1ef74:	sub	r2, r3, #1
   1ef78:	str	r2, [fp, #-24]	; 0xffffffe8
   1ef7c:	cmp	r3, #0
   1ef80:	bne	1ef54 <__assert_fail@plt+0xdb70>
   1ef84:	ldr	r3, [fp, #-8]
   1ef88:	mov	r0, r3
   1ef8c:	sub	sp, fp, #4
   1ef90:	pop	{fp, pc}
   1ef94:	push	{fp, lr}
   1ef98:	add	fp, sp, #4
   1ef9c:	sub	sp, sp, #48	; 0x30
   1efa0:	str	r0, [fp, #-40]	; 0xffffffd8
   1efa4:	str	r1, [fp, #-44]	; 0xffffffd4
   1efa8:	str	r2, [fp, #-48]	; 0xffffffd0
   1efac:	str	r3, [fp, #-52]	; 0xffffffcc
   1efb0:	mov	r3, #0
   1efb4:	str	r3, [fp, #-8]
   1efb8:	ldr	r3, [fp, #-48]	; 0xffffffd0
   1efbc:	cmp	r3, #0
   1efc0:	blt	1efd0 <__assert_fail@plt+0xdbec>
   1efc4:	ldr	r3, [fp, #-48]	; 0xffffffd0
   1efc8:	cmp	r3, #36	; 0x24
   1efcc:	ble	1efe4 <__assert_fail@plt+0xdc00>
   1efd0:	ldr	r3, [pc, #1412]	; 1f55c <__assert_fail@plt+0xe178>
   1efd4:	mov	r2, #85	; 0x55
   1efd8:	ldr	r1, [pc, #1408]	; 1f560 <__assert_fail@plt+0xe17c>
   1efdc:	ldr	r0, [pc, #1408]	; 1f564 <__assert_fail@plt+0xe180>
   1efe0:	bl	113e4 <__assert_fail@plt>
   1efe4:	ldr	r3, [fp, #-44]	; 0xffffffd4
   1efe8:	cmp	r3, #0
   1efec:	bne	1eff8 <__assert_fail@plt+0xdc14>
   1eff0:	sub	r3, fp, #28
   1eff4:	b	1effc <__assert_fail@plt+0xdc18>
   1eff8:	ldr	r3, [fp, #-44]	; 0xffffffd4
   1effc:	str	r3, [fp, #-24]	; 0xffffffe8
   1f000:	bl	112d0 <__errno_location@plt>
   1f004:	mov	r2, r0
   1f008:	mov	r3, #0
   1f00c:	str	r3, [r2]
   1f010:	ldr	r2, [fp, #-48]	; 0xffffffd0
   1f014:	ldr	r1, [fp, #-24]	; 0xffffffe8
   1f018:	ldr	r0, [fp, #-40]	; 0xffffffd8
   1f01c:	bl	1130c <strtoimax@plt>
   1f020:	mov	r2, r0
   1f024:	mov	r3, r1
   1f028:	strd	r2, [fp, #-36]	; 0xffffffdc
   1f02c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1f030:	ldr	r2, [r3]
   1f034:	ldr	r3, [fp, #-40]	; 0xffffffd8
   1f038:	cmp	r2, r3
   1f03c:	bne	1f09c <__assert_fail@plt+0xdcb8>
   1f040:	ldr	r3, [fp, #4]
   1f044:	cmp	r3, #0
   1f048:	beq	1f094 <__assert_fail@plt+0xdcb0>
   1f04c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1f050:	ldr	r3, [r3]
   1f054:	ldrb	r3, [r3]
   1f058:	cmp	r3, #0
   1f05c:	beq	1f094 <__assert_fail@plt+0xdcb0>
   1f060:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1f064:	ldr	r3, [r3]
   1f068:	ldrb	r3, [r3]
   1f06c:	mov	r1, r3
   1f070:	ldr	r0, [fp, #4]
   1f074:	bl	112a0 <strchr@plt>
   1f078:	mov	r3, r0
   1f07c:	cmp	r3, #0
   1f080:	beq	1f094 <__assert_fail@plt+0xdcb0>
   1f084:	mov	r2, #1
   1f088:	mov	r3, #0
   1f08c:	strd	r2, [fp, #-36]	; 0xffffffdc
   1f090:	b	1f0d4 <__assert_fail@plt+0xdcf0>
   1f094:	mov	r3, #4
   1f098:	b	1f550 <__assert_fail@plt+0xe16c>
   1f09c:	bl	112d0 <__errno_location@plt>
   1f0a0:	mov	r3, r0
   1f0a4:	ldr	r3, [r3]
   1f0a8:	cmp	r3, #0
   1f0ac:	beq	1f0d4 <__assert_fail@plt+0xdcf0>
   1f0b0:	bl	112d0 <__errno_location@plt>
   1f0b4:	mov	r3, r0
   1f0b8:	ldr	r3, [r3]
   1f0bc:	cmp	r3, #34	; 0x22
   1f0c0:	beq	1f0cc <__assert_fail@plt+0xdce8>
   1f0c4:	mov	r3, #4
   1f0c8:	b	1f550 <__assert_fail@plt+0xe16c>
   1f0cc:	mov	r3, #1
   1f0d0:	str	r3, [fp, #-8]
   1f0d4:	ldr	r3, [fp, #4]
   1f0d8:	cmp	r3, #0
   1f0dc:	bne	1f0f4 <__assert_fail@plt+0xdd10>
   1f0e0:	ldrd	r2, [fp, #-36]	; 0xffffffdc
   1f0e4:	ldr	r1, [fp, #-52]	; 0xffffffcc
   1f0e8:	strd	r2, [r1]
   1f0ec:	ldr	r3, [fp, #-8]
   1f0f0:	b	1f550 <__assert_fail@plt+0xe16c>
   1f0f4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1f0f8:	ldr	r3, [r3]
   1f0fc:	ldrb	r3, [r3]
   1f100:	cmp	r3, #0
   1f104:	beq	1f540 <__assert_fail@plt+0xe15c>
   1f108:	mov	r3, #1024	; 0x400
   1f10c:	str	r3, [fp, #-12]
   1f110:	mov	r3, #1
   1f114:	str	r3, [fp, #-16]
   1f118:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1f11c:	ldr	r3, [r3]
   1f120:	ldrb	r3, [r3]
   1f124:	mov	r1, r3
   1f128:	ldr	r0, [fp, #4]
   1f12c:	bl	112a0 <strchr@plt>
   1f130:	mov	r3, r0
   1f134:	cmp	r3, #0
   1f138:	bne	1f154 <__assert_fail@plt+0xdd70>
   1f13c:	ldrd	r2, [fp, #-36]	; 0xffffffdc
   1f140:	ldr	r1, [fp, #-52]	; 0xffffffcc
   1f144:	strd	r2, [r1]
   1f148:	ldr	r3, [fp, #-8]
   1f14c:	orr	r3, r3, #2
   1f150:	b	1f550 <__assert_fail@plt+0xe16c>
   1f154:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1f158:	ldr	r3, [r3]
   1f15c:	ldrb	r3, [r3]
   1f160:	sub	r3, r3, #69	; 0x45
   1f164:	cmp	r3, #47	; 0x2f
   1f168:	ldrls	pc, [pc, r3, lsl #2]
   1f16c:	b	1f2b8 <__assert_fail@plt+0xded4>
   1f170:	andeq	pc, r1, r0, lsr r2	; <UNPREDICTABLE>
   1f174:			; <UNDEFINED> instruction: 0x0001f2b8
   1f178:	andeq	pc, r1, r0, lsr r2	; <UNPREDICTABLE>
   1f17c:			; <UNDEFINED> instruction: 0x0001f2b8
   1f180:			; <UNDEFINED> instruction: 0x0001f2b8
   1f184:			; <UNDEFINED> instruction: 0x0001f2b8
   1f188:	andeq	pc, r1, r0, lsr r2	; <UNPREDICTABLE>
   1f18c:			; <UNDEFINED> instruction: 0x0001f2b8
   1f190:	andeq	pc, r1, r0, lsr r2	; <UNPREDICTABLE>
   1f194:			; <UNDEFINED> instruction: 0x0001f2b8
   1f198:			; <UNDEFINED> instruction: 0x0001f2b8
   1f19c:	andeq	pc, r1, r0, lsr r2	; <UNPREDICTABLE>
   1f1a0:			; <UNDEFINED> instruction: 0x0001f2b8
   1f1a4:			; <UNDEFINED> instruction: 0x0001f2b8
   1f1a8:			; <UNDEFINED> instruction: 0x0001f2b8
   1f1ac:	andeq	pc, r1, r0, lsr r2	; <UNPREDICTABLE>
   1f1b0:			; <UNDEFINED> instruction: 0x0001f2b8
   1f1b4:			; <UNDEFINED> instruction: 0x0001f2b8
   1f1b8:			; <UNDEFINED> instruction: 0x0001f2b8
   1f1bc:			; <UNDEFINED> instruction: 0x0001f2b8
   1f1c0:	andeq	pc, r1, r0, lsr r2	; <UNPREDICTABLE>
   1f1c4:	andeq	pc, r1, r0, lsr r2	; <UNPREDICTABLE>
   1f1c8:			; <UNDEFINED> instruction: 0x0001f2b8
   1f1cc:			; <UNDEFINED> instruction: 0x0001f2b8
   1f1d0:			; <UNDEFINED> instruction: 0x0001f2b8
   1f1d4:			; <UNDEFINED> instruction: 0x0001f2b8
   1f1d8:			; <UNDEFINED> instruction: 0x0001f2b8
   1f1dc:			; <UNDEFINED> instruction: 0x0001f2b8
   1f1e0:			; <UNDEFINED> instruction: 0x0001f2b8
   1f1e4:			; <UNDEFINED> instruction: 0x0001f2b8
   1f1e8:			; <UNDEFINED> instruction: 0x0001f2b8
   1f1ec:			; <UNDEFINED> instruction: 0x0001f2b8
   1f1f0:			; <UNDEFINED> instruction: 0x0001f2b8
   1f1f4:			; <UNDEFINED> instruction: 0x0001f2b8
   1f1f8:	andeq	pc, r1, r0, lsr r2	; <UNPREDICTABLE>
   1f1fc:			; <UNDEFINED> instruction: 0x0001f2b8
   1f200:			; <UNDEFINED> instruction: 0x0001f2b8
   1f204:			; <UNDEFINED> instruction: 0x0001f2b8
   1f208:	andeq	pc, r1, r0, lsr r2	; <UNPREDICTABLE>
   1f20c:			; <UNDEFINED> instruction: 0x0001f2b8
   1f210:	andeq	pc, r1, r0, lsr r2	; <UNPREDICTABLE>
   1f214:			; <UNDEFINED> instruction: 0x0001f2b8
   1f218:			; <UNDEFINED> instruction: 0x0001f2b8
   1f21c:			; <UNDEFINED> instruction: 0x0001f2b8
   1f220:			; <UNDEFINED> instruction: 0x0001f2b8
   1f224:			; <UNDEFINED> instruction: 0x0001f2b8
   1f228:			; <UNDEFINED> instruction: 0x0001f2b8
   1f22c:	andeq	pc, r1, r0, lsr r2	; <UNPREDICTABLE>
   1f230:	mov	r1, #48	; 0x30
   1f234:	ldr	r0, [fp, #4]
   1f238:	bl	112a0 <strchr@plt>
   1f23c:	mov	r3, r0
   1f240:	cmp	r3, #0
   1f244:	beq	1f2b8 <__assert_fail@plt+0xded4>
   1f248:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1f24c:	ldr	r3, [r3]
   1f250:	add	r3, r3, #1
   1f254:	ldrb	r3, [r3]
   1f258:	cmp	r3, #68	; 0x44
   1f25c:	beq	1f29c <__assert_fail@plt+0xdeb8>
   1f260:	cmp	r3, #105	; 0x69
   1f264:	beq	1f274 <__assert_fail@plt+0xde90>
   1f268:	cmp	r3, #66	; 0x42
   1f26c:	beq	1f29c <__assert_fail@plt+0xdeb8>
   1f270:	b	1f2b8 <__assert_fail@plt+0xded4>
   1f274:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1f278:	ldr	r3, [r3]
   1f27c:	add	r3, r3, #2
   1f280:	ldrb	r3, [r3]
   1f284:	cmp	r3, #66	; 0x42
   1f288:	bne	1f2b4 <__assert_fail@plt+0xded0>
   1f28c:	ldr	r3, [fp, #-16]
   1f290:	add	r3, r3, #2
   1f294:	str	r3, [fp, #-16]
   1f298:	b	1f2b4 <__assert_fail@plt+0xded0>
   1f29c:	mov	r3, #1000	; 0x3e8
   1f2a0:	str	r3, [fp, #-12]
   1f2a4:	ldr	r3, [fp, #-16]
   1f2a8:	add	r3, r3, #1
   1f2ac:	str	r3, [fp, #-16]
   1f2b0:	b	1f2b8 <__assert_fail@plt+0xded4>
   1f2b4:	nop			; (mov r0, r0)
   1f2b8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1f2bc:	ldr	r3, [r3]
   1f2c0:	ldrb	r3, [r3]
   1f2c4:	sub	r3, r3, #66	; 0x42
   1f2c8:	cmp	r3, #53	; 0x35
   1f2cc:	ldrls	pc, [pc, r3, lsl #2]
   1f2d0:	b	1f4e0 <__assert_fail@plt+0xe0fc>
   1f2d4:	andeq	pc, r1, r4, asr #7
   1f2d8:	andeq	pc, r1, r0, ror #9
   1f2dc:	andeq	pc, r1, r0, ror #9
   1f2e0:	andeq	pc, r1, r8, ror #7
   1f2e4:	andeq	pc, r1, r0, ror #9
   1f2e8:	andeq	pc, r1, r4, lsl #8
   1f2ec:	andeq	pc, r1, r0, ror #9
   1f2f0:	andeq	pc, r1, r0, ror #9
   1f2f4:	andeq	pc, r1, r0, ror #9
   1f2f8:	andeq	pc, r1, r0, lsr #8
   1f2fc:	andeq	pc, r1, r0, ror #9
   1f300:	andeq	pc, r1, ip, lsr r4	; <UNPREDICTABLE>
   1f304:	andeq	pc, r1, r0, ror #9
   1f308:	andeq	pc, r1, r0, ror #9
   1f30c:	andeq	pc, r1, r8, asr r4	; <UNPREDICTABLE>
   1f310:	andeq	pc, r1, r0, ror #9
   1f314:	andeq	pc, r1, r0, ror #9
   1f318:	andeq	pc, r1, r0, ror #9
   1f31c:	andeq	pc, r1, r4, ror r4	; <UNPREDICTABLE>
   1f320:	andeq	pc, r1, r0, ror #9
   1f324:	andeq	pc, r1, r0, ror #9
   1f328:	andeq	pc, r1, r0, ror #9
   1f32c:	andeq	pc, r1, r0, ror #9
   1f330:	andeq	pc, r1, r8, lsr #9
   1f334:	andeq	pc, r1, r4, asr #9
   1f338:	andeq	pc, r1, r0, ror #9
   1f33c:	andeq	pc, r1, r0, ror #9
   1f340:	andeq	pc, r1, r0, ror #9
   1f344:	andeq	pc, r1, r0, ror #9
   1f348:	andeq	pc, r1, r0, ror #9
   1f34c:	andeq	pc, r1, r0, ror #9
   1f350:	andeq	pc, r1, r0, ror #9
   1f354:	andeq	pc, r1, ip, lsr #7
   1f358:	ldrdeq	pc, [r1], -ip
   1f35c:	andeq	pc, r1, r0, ror #9
   1f360:	andeq	pc, r1, r0, ror #9
   1f364:	andeq	pc, r1, r0, ror #9
   1f368:	andeq	pc, r1, r4, lsl #8
   1f36c:	andeq	pc, r1, r0, ror #9
   1f370:	andeq	pc, r1, r0, ror #9
   1f374:	andeq	pc, r1, r0, ror #9
   1f378:	andeq	pc, r1, r0, lsr #8
   1f37c:	andeq	pc, r1, r0, ror #9
   1f380:	andeq	pc, r1, ip, lsr r4	; <UNPREDICTABLE>
   1f384:	andeq	pc, r1, r0, ror #9
   1f388:	andeq	pc, r1, r0, ror #9
   1f38c:	andeq	pc, r1, r0, ror #9
   1f390:	andeq	pc, r1, r0, ror #9
   1f394:	andeq	pc, r1, r0, ror #9
   1f398:	andeq	pc, r1, r0, ror #9
   1f39c:	andeq	pc, r1, r4, ror r4	; <UNPREDICTABLE>
   1f3a0:	andeq	pc, r1, r0, ror #9
   1f3a4:	andeq	pc, r1, r0, ror #9
   1f3a8:	muleq	r1, r0, r4
   1f3ac:	sub	r3, fp, #36	; 0x24
   1f3b0:	mov	r1, #512	; 0x200
   1f3b4:	mov	r0, r3
   1f3b8:	bl	1ec64 <__assert_fail@plt+0xd880>
   1f3bc:	str	r0, [fp, #-20]	; 0xffffffec
   1f3c0:	b	1f4f8 <__assert_fail@plt+0xe114>
   1f3c4:	sub	r3, fp, #36	; 0x24
   1f3c8:	mov	r1, #1024	; 0x400
   1f3cc:	mov	r0, r3
   1f3d0:	bl	1ec64 <__assert_fail@plt+0xd880>
   1f3d4:	str	r0, [fp, #-20]	; 0xffffffec
   1f3d8:	b	1f4f8 <__assert_fail@plt+0xe114>
   1f3dc:	mov	r3, #0
   1f3e0:	str	r3, [fp, #-20]	; 0xffffffec
   1f3e4:	b	1f4f8 <__assert_fail@plt+0xe114>
   1f3e8:	sub	r3, fp, #36	; 0x24
   1f3ec:	mov	r2, #6
   1f3f0:	ldr	r1, [fp, #-12]
   1f3f4:	mov	r0, r3
   1f3f8:	bl	1ef30 <__assert_fail@plt+0xdb4c>
   1f3fc:	str	r0, [fp, #-20]	; 0xffffffec
   1f400:	b	1f4f8 <__assert_fail@plt+0xe114>
   1f404:	sub	r3, fp, #36	; 0x24
   1f408:	mov	r2, #3
   1f40c:	ldr	r1, [fp, #-12]
   1f410:	mov	r0, r3
   1f414:	bl	1ef30 <__assert_fail@plt+0xdb4c>
   1f418:	str	r0, [fp, #-20]	; 0xffffffec
   1f41c:	b	1f4f8 <__assert_fail@plt+0xe114>
   1f420:	sub	r3, fp, #36	; 0x24
   1f424:	mov	r2, #1
   1f428:	ldr	r1, [fp, #-12]
   1f42c:	mov	r0, r3
   1f430:	bl	1ef30 <__assert_fail@plt+0xdb4c>
   1f434:	str	r0, [fp, #-20]	; 0xffffffec
   1f438:	b	1f4f8 <__assert_fail@plt+0xe114>
   1f43c:	sub	r3, fp, #36	; 0x24
   1f440:	mov	r2, #2
   1f444:	ldr	r1, [fp, #-12]
   1f448:	mov	r0, r3
   1f44c:	bl	1ef30 <__assert_fail@plt+0xdb4c>
   1f450:	str	r0, [fp, #-20]	; 0xffffffec
   1f454:	b	1f4f8 <__assert_fail@plt+0xe114>
   1f458:	sub	r3, fp, #36	; 0x24
   1f45c:	mov	r2, #5
   1f460:	ldr	r1, [fp, #-12]
   1f464:	mov	r0, r3
   1f468:	bl	1ef30 <__assert_fail@plt+0xdb4c>
   1f46c:	str	r0, [fp, #-20]	; 0xffffffec
   1f470:	b	1f4f8 <__assert_fail@plt+0xe114>
   1f474:	sub	r3, fp, #36	; 0x24
   1f478:	mov	r2, #4
   1f47c:	ldr	r1, [fp, #-12]
   1f480:	mov	r0, r3
   1f484:	bl	1ef30 <__assert_fail@plt+0xdb4c>
   1f488:	str	r0, [fp, #-20]	; 0xffffffec
   1f48c:	b	1f4f8 <__assert_fail@plt+0xe114>
   1f490:	sub	r3, fp, #36	; 0x24
   1f494:	mov	r1, #2
   1f498:	mov	r0, r3
   1f49c:	bl	1ec64 <__assert_fail@plt+0xd880>
   1f4a0:	str	r0, [fp, #-20]	; 0xffffffec
   1f4a4:	b	1f4f8 <__assert_fail@plt+0xe114>
   1f4a8:	sub	r3, fp, #36	; 0x24
   1f4ac:	mov	r2, #8
   1f4b0:	ldr	r1, [fp, #-12]
   1f4b4:	mov	r0, r3
   1f4b8:	bl	1ef30 <__assert_fail@plt+0xdb4c>
   1f4bc:	str	r0, [fp, #-20]	; 0xffffffec
   1f4c0:	b	1f4f8 <__assert_fail@plt+0xe114>
   1f4c4:	sub	r3, fp, #36	; 0x24
   1f4c8:	mov	r2, #7
   1f4cc:	ldr	r1, [fp, #-12]
   1f4d0:	mov	r0, r3
   1f4d4:	bl	1ef30 <__assert_fail@plt+0xdb4c>
   1f4d8:	str	r0, [fp, #-20]	; 0xffffffec
   1f4dc:	b	1f4f8 <__assert_fail@plt+0xe114>
   1f4e0:	ldrd	r2, [fp, #-36]	; 0xffffffdc
   1f4e4:	ldr	r1, [fp, #-52]	; 0xffffffcc
   1f4e8:	strd	r2, [r1]
   1f4ec:	ldr	r3, [fp, #-8]
   1f4f0:	orr	r3, r3, #2
   1f4f4:	b	1f550 <__assert_fail@plt+0xe16c>
   1f4f8:	ldr	r2, [fp, #-8]
   1f4fc:	ldr	r3, [fp, #-20]	; 0xffffffec
   1f500:	orr	r3, r2, r3
   1f504:	str	r3, [fp, #-8]
   1f508:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1f50c:	ldr	r2, [r3]
   1f510:	ldr	r3, [fp, #-16]
   1f514:	add	r2, r2, r3
   1f518:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1f51c:	str	r2, [r3]
   1f520:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1f524:	ldr	r3, [r3]
   1f528:	ldrb	r3, [r3]
   1f52c:	cmp	r3, #0
   1f530:	beq	1f540 <__assert_fail@plt+0xe15c>
   1f534:	ldr	r3, [fp, #-8]
   1f538:	orr	r3, r3, #2
   1f53c:	str	r3, [fp, #-8]
   1f540:	ldrd	r2, [fp, #-36]	; 0xffffffdc
   1f544:	ldr	r1, [fp, #-52]	; 0xffffffcc
   1f548:	strd	r2, [r1]
   1f54c:	ldr	r3, [fp, #-8]
   1f550:	mov	r0, r3
   1f554:	sub	sp, fp, #4
   1f558:	pop	{fp, pc}
   1f55c:	andeq	r3, r2, r8, ror #20
   1f560:	andeq	r3, r2, r0, lsr sl
   1f564:	andeq	r3, r2, r0, asr #20
   1f568:	push	{r4, fp, lr}
   1f56c:	add	fp, sp, #8
   1f570:	sub	sp, sp, #20
   1f574:	str	r0, [fp, #-24]	; 0xffffffe8
   1f578:	str	r1, [fp, #-28]	; 0xffffffe4
   1f57c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1f580:	cmp	r3, #0
   1f584:	bge	1f620 <__assert_fail@plt+0xe23c>
   1f588:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1f58c:	ldr	r3, [r3]
   1f590:	cmp	r3, #0
   1f594:	bge	1f5c4 <__assert_fail@plt+0xe1e0>
   1f598:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1f59c:	ldr	r4, [r3]
   1f5a0:	ldr	r1, [fp, #-28]	; 0xffffffe4
   1f5a4:	mvn	r0, #-2147483648	; 0x80000000
   1f5a8:	bl	2181c <__assert_fail@plt+0x10438>
   1f5ac:	mov	r3, r0
   1f5b0:	cmp	r4, r3
   1f5b4:	movlt	r3, #1
   1f5b8:	movge	r3, #0
   1f5bc:	uxtb	r3, r3
   1f5c0:	b	1f6d0 <__assert_fail@plt+0xe2ec>
   1f5c4:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1f5c8:	cmn	r3, #1
   1f5cc:	bne	1f5f0 <__assert_fail@plt+0xe20c>
   1f5d0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1f5d4:	ldr	r3, [r3]
   1f5d8:	add	r3, r3, #-2147483648	; 0x80000000
   1f5dc:	cmp	r3, #0
   1f5e0:	movgt	r3, #1
   1f5e4:	movle	r3, #0
   1f5e8:	uxtb	r3, r3
   1f5ec:	b	1f6d0 <__assert_fail@plt+0xe2ec>
   1f5f0:	ldr	r1, [fp, #-28]	; 0xffffffe4
   1f5f4:	mov	r0, #-2147483648	; 0x80000000
   1f5f8:	bl	2181c <__assert_fail@plt+0x10438>
   1f5fc:	mov	r3, r0
   1f600:	mov	r2, r3
   1f604:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1f608:	ldr	r3, [r3]
   1f60c:	cmp	r2, r3
   1f610:	movlt	r3, #1
   1f614:	movge	r3, #0
   1f618:	uxtb	r3, r3
   1f61c:	b	1f6d0 <__assert_fail@plt+0xe2ec>
   1f620:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1f624:	cmp	r3, #0
   1f628:	beq	1f6cc <__assert_fail@plt+0xe2e8>
   1f62c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1f630:	ldr	r3, [r3]
   1f634:	cmp	r3, #0
   1f638:	bge	1f69c <__assert_fail@plt+0xe2b8>
   1f63c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1f640:	ldr	r3, [r3]
   1f644:	cmn	r3, #1
   1f648:	bne	1f668 <__assert_fail@plt+0xe284>
   1f64c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1f650:	add	r3, r3, #-2147483648	; 0x80000000
   1f654:	cmp	r3, #0
   1f658:	movgt	r3, #1
   1f65c:	movle	r3, #0
   1f660:	uxtb	r3, r3
   1f664:	b	1f6d0 <__assert_fail@plt+0xe2ec>
   1f668:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1f66c:	ldr	r3, [r3]
   1f670:	mov	r1, r3
   1f674:	mov	r0, #-2147483648	; 0x80000000
   1f678:	bl	2181c <__assert_fail@plt+0x10438>
   1f67c:	mov	r3, r0
   1f680:	mov	r2, r3
   1f684:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1f688:	cmp	r2, r3
   1f68c:	movlt	r3, #1
   1f690:	movge	r3, #0
   1f694:	uxtb	r3, r3
   1f698:	b	1f6d0 <__assert_fail@plt+0xe2ec>
   1f69c:	ldr	r1, [fp, #-28]	; 0xffffffe4
   1f6a0:	mvn	r0, #-2147483648	; 0x80000000
   1f6a4:	bl	2181c <__assert_fail@plt+0x10438>
   1f6a8:	mov	r3, r0
   1f6ac:	mov	r2, r3
   1f6b0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1f6b4:	ldr	r3, [r3]
   1f6b8:	cmp	r2, r3
   1f6bc:	movlt	r3, #1
   1f6c0:	movge	r3, #0
   1f6c4:	uxtb	r3, r3
   1f6c8:	b	1f6d0 <__assert_fail@plt+0xe2ec>
   1f6cc:	mov	r3, #0
   1f6d0:	cmp	r3, #0
   1f6d4:	beq	1f6f8 <__assert_fail@plt+0xe314>
   1f6d8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1f6dc:	ldr	r3, [r3]
   1f6e0:	mov	r2, r3
   1f6e4:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1f6e8:	mul	r3, r3, r2
   1f6ec:	str	r3, [fp, #-16]
   1f6f0:	mov	r3, #1
   1f6f4:	b	1f714 <__assert_fail@plt+0xe330>
   1f6f8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1f6fc:	ldr	r3, [r3]
   1f700:	mov	r2, r3
   1f704:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1f708:	mul	r3, r3, r2
   1f70c:	str	r3, [fp, #-16]
   1f710:	mov	r3, #0
   1f714:	cmp	r3, #0
   1f718:	beq	1f748 <__assert_fail@plt+0xe364>
   1f71c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1f720:	ldr	r3, [r3]
   1f724:	cmp	r3, #0
   1f728:	bge	1f734 <__assert_fail@plt+0xe350>
   1f72c:	mov	r2, #-2147483648	; 0x80000000
   1f730:	b	1f738 <__assert_fail@plt+0xe354>
   1f734:	mvn	r2, #-2147483648	; 0x80000000
   1f738:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1f73c:	str	r2, [r3]
   1f740:	mov	r3, #1
   1f744:	b	1f758 <__assert_fail@plt+0xe374>
   1f748:	ldr	r2, [fp, #-16]
   1f74c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1f750:	str	r2, [r3]
   1f754:	mov	r3, #0
   1f758:	mov	r0, r3
   1f75c:	sub	sp, fp, #8
   1f760:	pop	{r4, fp, pc}
   1f764:	push	{fp, lr}
   1f768:	add	fp, sp, #4
   1f76c:	sub	sp, sp, #24
   1f770:	str	r0, [fp, #-16]
   1f774:	str	r1, [fp, #-20]	; 0xffffffec
   1f778:	str	r2, [fp, #-24]	; 0xffffffe8
   1f77c:	mov	r3, #0
   1f780:	str	r3, [fp, #-8]
   1f784:	b	1f7a4 <__assert_fail@plt+0xe3c0>
   1f788:	ldr	r1, [fp, #-20]	; 0xffffffec
   1f78c:	ldr	r0, [fp, #-16]
   1f790:	bl	1f568 <__assert_fail@plt+0xe184>
   1f794:	mov	r2, r0
   1f798:	ldr	r3, [fp, #-8]
   1f79c:	orr	r3, r3, r2
   1f7a0:	str	r3, [fp, #-8]
   1f7a4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1f7a8:	sub	r2, r3, #1
   1f7ac:	str	r2, [fp, #-24]	; 0xffffffe8
   1f7b0:	cmp	r3, #0
   1f7b4:	bne	1f788 <__assert_fail@plt+0xe3a4>
   1f7b8:	ldr	r3, [fp, #-8]
   1f7bc:	mov	r0, r3
   1f7c0:	sub	sp, fp, #4
   1f7c4:	pop	{fp, pc}
   1f7c8:	push	{fp, lr}
   1f7cc:	add	fp, sp, #4
   1f7d0:	sub	sp, sp, #48	; 0x30
   1f7d4:	str	r0, [fp, #-40]	; 0xffffffd8
   1f7d8:	str	r1, [fp, #-44]	; 0xffffffd4
   1f7dc:	str	r2, [fp, #-48]	; 0xffffffd0
   1f7e0:	str	r3, [fp, #-52]	; 0xffffffcc
   1f7e4:	mov	r3, #0
   1f7e8:	str	r3, [fp, #-8]
   1f7ec:	ldr	r3, [fp, #-48]	; 0xffffffd0
   1f7f0:	cmp	r3, #0
   1f7f4:	blt	1f804 <__assert_fail@plt+0xe420>
   1f7f8:	ldr	r3, [fp, #-48]	; 0xffffffd0
   1f7fc:	cmp	r3, #36	; 0x24
   1f800:	ble	1f818 <__assert_fail@plt+0xe434>
   1f804:	ldr	r3, [pc, #1404]	; 1fd88 <__assert_fail@plt+0xe9a4>
   1f808:	mov	r2, #85	; 0x55
   1f80c:	ldr	r1, [pc, #1400]	; 1fd8c <__assert_fail@plt+0xe9a8>
   1f810:	ldr	r0, [pc, #1400]	; 1fd90 <__assert_fail@plt+0xe9ac>
   1f814:	bl	113e4 <__assert_fail@plt>
   1f818:	ldr	r3, [fp, #-44]	; 0xffffffd4
   1f81c:	cmp	r3, #0
   1f820:	bne	1f82c <__assert_fail@plt+0xe448>
   1f824:	sub	r3, fp, #28
   1f828:	b	1f830 <__assert_fail@plt+0xe44c>
   1f82c:	ldr	r3, [fp, #-44]	; 0xffffffd4
   1f830:	str	r3, [fp, #-24]	; 0xffffffe8
   1f834:	bl	112d0 <__errno_location@plt>
   1f838:	mov	r2, r0
   1f83c:	mov	r3, #0
   1f840:	str	r3, [r2]
   1f844:	ldr	r2, [fp, #-48]	; 0xffffffd0
   1f848:	ldr	r1, [fp, #-24]	; 0xffffffe8
   1f84c:	ldr	r0, [fp, #-40]	; 0xffffffd8
   1f850:	bl	110c0 <strtol@plt>
   1f854:	mov	r3, r0
   1f858:	str	r3, [fp, #-32]	; 0xffffffe0
   1f85c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1f860:	ldr	r2, [r3]
   1f864:	ldr	r3, [fp, #-40]	; 0xffffffd8
   1f868:	cmp	r2, r3
   1f86c:	bne	1f8c8 <__assert_fail@plt+0xe4e4>
   1f870:	ldr	r3, [fp, #4]
   1f874:	cmp	r3, #0
   1f878:	beq	1f8c0 <__assert_fail@plt+0xe4dc>
   1f87c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1f880:	ldr	r3, [r3]
   1f884:	ldrb	r3, [r3]
   1f888:	cmp	r3, #0
   1f88c:	beq	1f8c0 <__assert_fail@plt+0xe4dc>
   1f890:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1f894:	ldr	r3, [r3]
   1f898:	ldrb	r3, [r3]
   1f89c:	mov	r1, r3
   1f8a0:	ldr	r0, [fp, #4]
   1f8a4:	bl	112a0 <strchr@plt>
   1f8a8:	mov	r3, r0
   1f8ac:	cmp	r3, #0
   1f8b0:	beq	1f8c0 <__assert_fail@plt+0xe4dc>
   1f8b4:	mov	r3, #1
   1f8b8:	str	r3, [fp, #-32]	; 0xffffffe0
   1f8bc:	b	1f900 <__assert_fail@plt+0xe51c>
   1f8c0:	mov	r3, #4
   1f8c4:	b	1fd7c <__assert_fail@plt+0xe998>
   1f8c8:	bl	112d0 <__errno_location@plt>
   1f8cc:	mov	r3, r0
   1f8d0:	ldr	r3, [r3]
   1f8d4:	cmp	r3, #0
   1f8d8:	beq	1f900 <__assert_fail@plt+0xe51c>
   1f8dc:	bl	112d0 <__errno_location@plt>
   1f8e0:	mov	r3, r0
   1f8e4:	ldr	r3, [r3]
   1f8e8:	cmp	r3, #34	; 0x22
   1f8ec:	beq	1f8f8 <__assert_fail@plt+0xe514>
   1f8f0:	mov	r3, #4
   1f8f4:	b	1fd7c <__assert_fail@plt+0xe998>
   1f8f8:	mov	r3, #1
   1f8fc:	str	r3, [fp, #-8]
   1f900:	ldr	r3, [fp, #4]
   1f904:	cmp	r3, #0
   1f908:	bne	1f920 <__assert_fail@plt+0xe53c>
   1f90c:	ldr	r2, [fp, #-32]	; 0xffffffe0
   1f910:	ldr	r3, [fp, #-52]	; 0xffffffcc
   1f914:	str	r2, [r3]
   1f918:	ldr	r3, [fp, #-8]
   1f91c:	b	1fd7c <__assert_fail@plt+0xe998>
   1f920:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1f924:	ldr	r3, [r3]
   1f928:	ldrb	r3, [r3]
   1f92c:	cmp	r3, #0
   1f930:	beq	1fd6c <__assert_fail@plt+0xe988>
   1f934:	mov	r3, #1024	; 0x400
   1f938:	str	r3, [fp, #-12]
   1f93c:	mov	r3, #1
   1f940:	str	r3, [fp, #-16]
   1f944:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1f948:	ldr	r3, [r3]
   1f94c:	ldrb	r3, [r3]
   1f950:	mov	r1, r3
   1f954:	ldr	r0, [fp, #4]
   1f958:	bl	112a0 <strchr@plt>
   1f95c:	mov	r3, r0
   1f960:	cmp	r3, #0
   1f964:	bne	1f980 <__assert_fail@plt+0xe59c>
   1f968:	ldr	r2, [fp, #-32]	; 0xffffffe0
   1f96c:	ldr	r3, [fp, #-52]	; 0xffffffcc
   1f970:	str	r2, [r3]
   1f974:	ldr	r3, [fp, #-8]
   1f978:	orr	r3, r3, #2
   1f97c:	b	1fd7c <__assert_fail@plt+0xe998>
   1f980:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1f984:	ldr	r3, [r3]
   1f988:	ldrb	r3, [r3]
   1f98c:	sub	r3, r3, #69	; 0x45
   1f990:	cmp	r3, #47	; 0x2f
   1f994:	ldrls	pc, [pc, r3, lsl #2]
   1f998:	b	1fae4 <__assert_fail@plt+0xe700>
   1f99c:	andeq	pc, r1, ip, asr sl	; <UNPREDICTABLE>
   1f9a0:	andeq	pc, r1, r4, ror #21
   1f9a4:	andeq	pc, r1, ip, asr sl	; <UNPREDICTABLE>
   1f9a8:	andeq	pc, r1, r4, ror #21
   1f9ac:	andeq	pc, r1, r4, ror #21
   1f9b0:	andeq	pc, r1, r4, ror #21
   1f9b4:	andeq	pc, r1, ip, asr sl	; <UNPREDICTABLE>
   1f9b8:	andeq	pc, r1, r4, ror #21
   1f9bc:	andeq	pc, r1, ip, asr sl	; <UNPREDICTABLE>
   1f9c0:	andeq	pc, r1, r4, ror #21
   1f9c4:	andeq	pc, r1, r4, ror #21
   1f9c8:	andeq	pc, r1, ip, asr sl	; <UNPREDICTABLE>
   1f9cc:	andeq	pc, r1, r4, ror #21
   1f9d0:	andeq	pc, r1, r4, ror #21
   1f9d4:	andeq	pc, r1, r4, ror #21
   1f9d8:	andeq	pc, r1, ip, asr sl	; <UNPREDICTABLE>
   1f9dc:	andeq	pc, r1, r4, ror #21
   1f9e0:	andeq	pc, r1, r4, ror #21
   1f9e4:	andeq	pc, r1, r4, ror #21
   1f9e8:	andeq	pc, r1, r4, ror #21
   1f9ec:	andeq	pc, r1, ip, asr sl	; <UNPREDICTABLE>
   1f9f0:	andeq	pc, r1, ip, asr sl	; <UNPREDICTABLE>
   1f9f4:	andeq	pc, r1, r4, ror #21
   1f9f8:	andeq	pc, r1, r4, ror #21
   1f9fc:	andeq	pc, r1, r4, ror #21
   1fa00:	andeq	pc, r1, r4, ror #21
   1fa04:	andeq	pc, r1, r4, ror #21
   1fa08:	andeq	pc, r1, r4, ror #21
   1fa0c:	andeq	pc, r1, r4, ror #21
   1fa10:	andeq	pc, r1, r4, ror #21
   1fa14:	andeq	pc, r1, r4, ror #21
   1fa18:	andeq	pc, r1, r4, ror #21
   1fa1c:	andeq	pc, r1, r4, ror #21
   1fa20:	andeq	pc, r1, r4, ror #21
   1fa24:	andeq	pc, r1, ip, asr sl	; <UNPREDICTABLE>
   1fa28:	andeq	pc, r1, r4, ror #21
   1fa2c:	andeq	pc, r1, r4, ror #21
   1fa30:	andeq	pc, r1, r4, ror #21
   1fa34:	andeq	pc, r1, ip, asr sl	; <UNPREDICTABLE>
   1fa38:	andeq	pc, r1, r4, ror #21
   1fa3c:	andeq	pc, r1, ip, asr sl	; <UNPREDICTABLE>
   1fa40:	andeq	pc, r1, r4, ror #21
   1fa44:	andeq	pc, r1, r4, ror #21
   1fa48:	andeq	pc, r1, r4, ror #21
   1fa4c:	andeq	pc, r1, r4, ror #21
   1fa50:	andeq	pc, r1, r4, ror #21
   1fa54:	andeq	pc, r1, r4, ror #21
   1fa58:	andeq	pc, r1, ip, asr sl	; <UNPREDICTABLE>
   1fa5c:	mov	r1, #48	; 0x30
   1fa60:	ldr	r0, [fp, #4]
   1fa64:	bl	112a0 <strchr@plt>
   1fa68:	mov	r3, r0
   1fa6c:	cmp	r3, #0
   1fa70:	beq	1fae4 <__assert_fail@plt+0xe700>
   1fa74:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1fa78:	ldr	r3, [r3]
   1fa7c:	add	r3, r3, #1
   1fa80:	ldrb	r3, [r3]
   1fa84:	cmp	r3, #68	; 0x44
   1fa88:	beq	1fac8 <__assert_fail@plt+0xe6e4>
   1fa8c:	cmp	r3, #105	; 0x69
   1fa90:	beq	1faa0 <__assert_fail@plt+0xe6bc>
   1fa94:	cmp	r3, #66	; 0x42
   1fa98:	beq	1fac8 <__assert_fail@plt+0xe6e4>
   1fa9c:	b	1fae4 <__assert_fail@plt+0xe700>
   1faa0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1faa4:	ldr	r3, [r3]
   1faa8:	add	r3, r3, #2
   1faac:	ldrb	r3, [r3]
   1fab0:	cmp	r3, #66	; 0x42
   1fab4:	bne	1fae0 <__assert_fail@plt+0xe6fc>
   1fab8:	ldr	r3, [fp, #-16]
   1fabc:	add	r3, r3, #2
   1fac0:	str	r3, [fp, #-16]
   1fac4:	b	1fae0 <__assert_fail@plt+0xe6fc>
   1fac8:	mov	r3, #1000	; 0x3e8
   1facc:	str	r3, [fp, #-12]
   1fad0:	ldr	r3, [fp, #-16]
   1fad4:	add	r3, r3, #1
   1fad8:	str	r3, [fp, #-16]
   1fadc:	b	1fae4 <__assert_fail@plt+0xe700>
   1fae0:	nop			; (mov r0, r0)
   1fae4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1fae8:	ldr	r3, [r3]
   1faec:	ldrb	r3, [r3]
   1faf0:	sub	r3, r3, #66	; 0x42
   1faf4:	cmp	r3, #53	; 0x35
   1faf8:	ldrls	pc, [pc, r3, lsl #2]
   1fafc:	b	1fd0c <__assert_fail@plt+0xe928>
   1fb00:	strdeq	pc, [r1], -r0
   1fb04:	andeq	pc, r1, ip, lsl #26
   1fb08:	andeq	pc, r1, ip, lsl #26
   1fb0c:	andeq	pc, r1, r4, lsl ip	; <UNPREDICTABLE>
   1fb10:	andeq	pc, r1, ip, lsl #26
   1fb14:	andeq	pc, r1, r0, lsr ip	; <UNPREDICTABLE>
   1fb18:	andeq	pc, r1, ip, lsl #26
   1fb1c:	andeq	pc, r1, ip, lsl #26
   1fb20:	andeq	pc, r1, ip, lsl #26
   1fb24:	andeq	pc, r1, ip, asr #24
   1fb28:	andeq	pc, r1, ip, lsl #26
   1fb2c:	andeq	pc, r1, r8, ror #24
   1fb30:	andeq	pc, r1, ip, lsl #26
   1fb34:	andeq	pc, r1, ip, lsl #26
   1fb38:	andeq	pc, r1, r4, lsl #25
   1fb3c:	andeq	pc, r1, ip, lsl #26
   1fb40:	andeq	pc, r1, ip, lsl #26
   1fb44:	andeq	pc, r1, ip, lsl #26
   1fb48:	andeq	pc, r1, r0, lsr #25
   1fb4c:	andeq	pc, r1, ip, lsl #26
   1fb50:	andeq	pc, r1, ip, lsl #26
   1fb54:	andeq	pc, r1, ip, lsl #26
   1fb58:	andeq	pc, r1, ip, lsl #26
   1fb5c:	ldrdeq	pc, [r1], -r4
   1fb60:	strdeq	pc, [r1], -r0
   1fb64:	andeq	pc, r1, ip, lsl #26
   1fb68:	andeq	pc, r1, ip, lsl #26
   1fb6c:	andeq	pc, r1, ip, lsl #26
   1fb70:	andeq	pc, r1, ip, lsl #26
   1fb74:	andeq	pc, r1, ip, lsl #26
   1fb78:	andeq	pc, r1, ip, lsl #26
   1fb7c:	andeq	pc, r1, ip, lsl #26
   1fb80:	ldrdeq	pc, [r1], -r8
   1fb84:	andeq	pc, r1, r8, lsl #24
   1fb88:	andeq	pc, r1, ip, lsl #26
   1fb8c:	andeq	pc, r1, ip, lsl #26
   1fb90:	andeq	pc, r1, ip, lsl #26
   1fb94:	andeq	pc, r1, r0, lsr ip	; <UNPREDICTABLE>
   1fb98:	andeq	pc, r1, ip, lsl #26
   1fb9c:	andeq	pc, r1, ip, lsl #26
   1fba0:	andeq	pc, r1, ip, lsl #26
   1fba4:	andeq	pc, r1, ip, asr #24
   1fba8:	andeq	pc, r1, ip, lsl #26
   1fbac:	andeq	pc, r1, r8, ror #24
   1fbb0:	andeq	pc, r1, ip, lsl #26
   1fbb4:	andeq	pc, r1, ip, lsl #26
   1fbb8:	andeq	pc, r1, ip, lsl #26
   1fbbc:	andeq	pc, r1, ip, lsl #26
   1fbc0:	andeq	pc, r1, ip, lsl #26
   1fbc4:	andeq	pc, r1, ip, lsl #26
   1fbc8:	andeq	pc, r1, r0, lsr #25
   1fbcc:	andeq	pc, r1, ip, lsl #26
   1fbd0:	andeq	pc, r1, ip, lsl #26
   1fbd4:			; <UNDEFINED> instruction: 0x0001fcbc
   1fbd8:	sub	r3, fp, #32
   1fbdc:	mov	r1, #512	; 0x200
   1fbe0:	mov	r0, r3
   1fbe4:	bl	1f568 <__assert_fail@plt+0xe184>
   1fbe8:	str	r0, [fp, #-20]	; 0xffffffec
   1fbec:	b	1fd24 <__assert_fail@plt+0xe940>
   1fbf0:	sub	r3, fp, #32
   1fbf4:	mov	r1, #1024	; 0x400
   1fbf8:	mov	r0, r3
   1fbfc:	bl	1f568 <__assert_fail@plt+0xe184>
   1fc00:	str	r0, [fp, #-20]	; 0xffffffec
   1fc04:	b	1fd24 <__assert_fail@plt+0xe940>
   1fc08:	mov	r3, #0
   1fc0c:	str	r3, [fp, #-20]	; 0xffffffec
   1fc10:	b	1fd24 <__assert_fail@plt+0xe940>
   1fc14:	sub	r3, fp, #32
   1fc18:	mov	r2, #6
   1fc1c:	ldr	r1, [fp, #-12]
   1fc20:	mov	r0, r3
   1fc24:	bl	1f764 <__assert_fail@plt+0xe380>
   1fc28:	str	r0, [fp, #-20]	; 0xffffffec
   1fc2c:	b	1fd24 <__assert_fail@plt+0xe940>
   1fc30:	sub	r3, fp, #32
   1fc34:	mov	r2, #3
   1fc38:	ldr	r1, [fp, #-12]
   1fc3c:	mov	r0, r3
   1fc40:	bl	1f764 <__assert_fail@plt+0xe380>
   1fc44:	str	r0, [fp, #-20]	; 0xffffffec
   1fc48:	b	1fd24 <__assert_fail@plt+0xe940>
   1fc4c:	sub	r3, fp, #32
   1fc50:	mov	r2, #1
   1fc54:	ldr	r1, [fp, #-12]
   1fc58:	mov	r0, r3
   1fc5c:	bl	1f764 <__assert_fail@plt+0xe380>
   1fc60:	str	r0, [fp, #-20]	; 0xffffffec
   1fc64:	b	1fd24 <__assert_fail@plt+0xe940>
   1fc68:	sub	r3, fp, #32
   1fc6c:	mov	r2, #2
   1fc70:	ldr	r1, [fp, #-12]
   1fc74:	mov	r0, r3
   1fc78:	bl	1f764 <__assert_fail@plt+0xe380>
   1fc7c:	str	r0, [fp, #-20]	; 0xffffffec
   1fc80:	b	1fd24 <__assert_fail@plt+0xe940>
   1fc84:	sub	r3, fp, #32
   1fc88:	mov	r2, #5
   1fc8c:	ldr	r1, [fp, #-12]
   1fc90:	mov	r0, r3
   1fc94:	bl	1f764 <__assert_fail@plt+0xe380>
   1fc98:	str	r0, [fp, #-20]	; 0xffffffec
   1fc9c:	b	1fd24 <__assert_fail@plt+0xe940>
   1fca0:	sub	r3, fp, #32
   1fca4:	mov	r2, #4
   1fca8:	ldr	r1, [fp, #-12]
   1fcac:	mov	r0, r3
   1fcb0:	bl	1f764 <__assert_fail@plt+0xe380>
   1fcb4:	str	r0, [fp, #-20]	; 0xffffffec
   1fcb8:	b	1fd24 <__assert_fail@plt+0xe940>
   1fcbc:	sub	r3, fp, #32
   1fcc0:	mov	r1, #2
   1fcc4:	mov	r0, r3
   1fcc8:	bl	1f568 <__assert_fail@plt+0xe184>
   1fccc:	str	r0, [fp, #-20]	; 0xffffffec
   1fcd0:	b	1fd24 <__assert_fail@plt+0xe940>
   1fcd4:	sub	r3, fp, #32
   1fcd8:	mov	r2, #8
   1fcdc:	ldr	r1, [fp, #-12]
   1fce0:	mov	r0, r3
   1fce4:	bl	1f764 <__assert_fail@plt+0xe380>
   1fce8:	str	r0, [fp, #-20]	; 0xffffffec
   1fcec:	b	1fd24 <__assert_fail@plt+0xe940>
   1fcf0:	sub	r3, fp, #32
   1fcf4:	mov	r2, #7
   1fcf8:	ldr	r1, [fp, #-12]
   1fcfc:	mov	r0, r3
   1fd00:	bl	1f764 <__assert_fail@plt+0xe380>
   1fd04:	str	r0, [fp, #-20]	; 0xffffffec
   1fd08:	b	1fd24 <__assert_fail@plt+0xe940>
   1fd0c:	ldr	r2, [fp, #-32]	; 0xffffffe0
   1fd10:	ldr	r3, [fp, #-52]	; 0xffffffcc
   1fd14:	str	r2, [r3]
   1fd18:	ldr	r3, [fp, #-8]
   1fd1c:	orr	r3, r3, #2
   1fd20:	b	1fd7c <__assert_fail@plt+0xe998>
   1fd24:	ldr	r2, [fp, #-8]
   1fd28:	ldr	r3, [fp, #-20]	; 0xffffffec
   1fd2c:	orr	r3, r2, r3
   1fd30:	str	r3, [fp, #-8]
   1fd34:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1fd38:	ldr	r2, [r3]
   1fd3c:	ldr	r3, [fp, #-16]
   1fd40:	add	r2, r2, r3
   1fd44:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1fd48:	str	r2, [r3]
   1fd4c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1fd50:	ldr	r3, [r3]
   1fd54:	ldrb	r3, [r3]
   1fd58:	cmp	r3, #0
   1fd5c:	beq	1fd6c <__assert_fail@plt+0xe988>
   1fd60:	ldr	r3, [fp, #-8]
   1fd64:	orr	r3, r3, #2
   1fd68:	str	r3, [fp, #-8]
   1fd6c:	ldr	r2, [fp, #-32]	; 0xffffffe0
   1fd70:	ldr	r3, [fp, #-52]	; 0xffffffcc
   1fd74:	str	r2, [r3]
   1fd78:	ldr	r3, [fp, #-8]
   1fd7c:	mov	r0, r3
   1fd80:	sub	sp, fp, #4
   1fd84:	pop	{fp, pc}
   1fd88:	andeq	r3, r2, ip, lsr #21
   1fd8c:	andeq	r3, r2, r4, ror sl
   1fd90:	andeq	r3, r2, r4, lsl #21
   1fd94:	push	{fp, lr}
   1fd98:	add	fp, sp, #4
   1fd9c:	sub	sp, sp, #40	; 0x28
   1fda0:	str	r0, [fp, #-24]	; 0xffffffe8
   1fda4:	str	r1, [fp, #-28]	; 0xffffffe4
   1fda8:	str	r3, [fp, #-36]	; 0xffffffdc
   1fdac:	mov	r3, r2
   1fdb0:	strb	r3, [fp, #-29]	; 0xffffffe3
   1fdb4:	ldr	r3, [pc, #216]	; 1fe94 <__assert_fail@plt+0xeab0>
   1fdb8:	str	r3, [fp, #-8]
   1fdbc:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1fdc0:	sub	r3, r3, #1
   1fdc4:	cmp	r3, #3
   1fdc8:	ldrls	pc, [pc, r3, lsl #2]
   1fdcc:	b	1fde0 <__assert_fail@plt+0xe9fc>
   1fdd0:	strdeq	pc, [r1], -ip
   1fdd4:	strdeq	pc, [r1], -r0
   1fdd8:	strdeq	pc, [r1], -r0
   1fddc:	andeq	pc, r1, r4, ror #27
   1fde0:	bl	113c0 <abort@plt>
   1fde4:	ldr	r3, [pc, #172]	; 1fe98 <__assert_fail@plt+0xeab4>
   1fde8:	str	r3, [fp, #-12]
   1fdec:	b	1fe08 <__assert_fail@plt+0xea24>
   1fdf0:	ldr	r3, [pc, #164]	; 1fe9c <__assert_fail@plt+0xeab8>
   1fdf4:	str	r3, [fp, #-12]
   1fdf8:	b	1fe08 <__assert_fail@plt+0xea24>
   1fdfc:	ldr	r3, [pc, #156]	; 1fea0 <__assert_fail@plt+0xeabc>
   1fe00:	str	r3, [fp, #-12]
   1fe04:	nop			; (mov r0, r0)
   1fe08:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1fe0c:	cmp	r3, #0
   1fe10:	bge	1fe44 <__assert_fail@plt+0xea60>
   1fe14:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1fe18:	rsb	r3, r3, #0
   1fe1c:	ldr	r2, [fp, #-8]
   1fe20:	add	r3, r2, r3
   1fe24:	str	r3, [fp, #-8]
   1fe28:	ldrb	r3, [fp, #-29]	; 0xffffffe3
   1fe2c:	strb	r3, [fp, #-20]	; 0xffffffec
   1fe30:	mov	r3, #0
   1fe34:	strb	r3, [fp, #-19]	; 0xffffffed
   1fe38:	sub	r3, fp, #20
   1fe3c:	str	r3, [fp, #-16]
   1fe40:	b	1fe5c <__assert_fail@plt+0xea78>
   1fe44:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1fe48:	lsl	r3, r3, #4
   1fe4c:	ldr	r2, [fp, #-36]	; 0xffffffdc
   1fe50:	add	r3, r2, r3
   1fe54:	ldr	r3, [r3]
   1fe58:	str	r3, [fp, #-16]
   1fe5c:	ldr	r0, [fp, #-12]
   1fe60:	bl	11288 <gettext@plt>
   1fe64:	mov	r2, r0
   1fe68:	ldr	r3, [fp, #4]
   1fe6c:	str	r3, [sp, #4]
   1fe70:	ldr	r3, [fp, #-16]
   1fe74:	str	r3, [sp]
   1fe78:	ldr	r3, [fp, #-8]
   1fe7c:	mov	r1, #0
   1fe80:	ldr	r0, [fp, #8]
   1fe84:	bl	11210 <error@plt>
   1fe88:	nop			; (mov r0, r0)
   1fe8c:	sub	sp, fp, #4
   1fe90:	pop	{fp, pc}
   1fe94:			; <UNDEFINED> instruction: 0x00023ab4
   1fe98:			; <UNDEFINED> instruction: 0x00023ab8
   1fe9c:	ldrdeq	r3, [r2], -r4
   1fea0:	strdeq	r3, [r2], -ip
   1fea4:	push	{fp, lr}
   1fea8:	add	fp, sp, #4
   1feac:	sub	sp, sp, #24
   1feb0:	str	r0, [fp, #-8]
   1feb4:	str	r1, [fp, #-12]
   1feb8:	str	r3, [fp, #-20]	; 0xffffffec
   1febc:	mov	r3, r2
   1fec0:	strb	r3, [fp, #-13]
   1fec4:	ldr	r3, [pc, #36]	; 1fef0 <__assert_fail@plt+0xeb0c>
   1fec8:	ldr	r3, [r3]
   1fecc:	ldrb	r2, [fp, #-13]
   1fed0:	str	r3, [sp, #4]
   1fed4:	ldr	r3, [fp, #4]
   1fed8:	str	r3, [sp]
   1fedc:	ldr	r3, [fp, #-20]	; 0xffffffec
   1fee0:	ldr	r1, [fp, #-12]
   1fee4:	ldr	r0, [fp, #-8]
   1fee8:	bl	1fd94 <__assert_fail@plt+0xe9b0>
   1feec:	bl	113c0 <abort@plt>
   1fef0:	andeq	r4, r3, ip, lsl #3
   1fef4:	push	{fp, lr}
   1fef8:	add	fp, sp, #4
   1fefc:	sub	sp, sp, #16
   1ff00:	str	r0, [fp, #-16]
   1ff04:	str	r1, [fp, #-20]	; 0xffffffec
   1ff08:	ldr	r3, [fp, #-20]	; 0xffffffec
   1ff0c:	cmp	r3, #0
   1ff10:	bge	1ff4c <__assert_fail@plt+0xeb68>
   1ff14:	ldr	r1, [fp, #-20]	; 0xffffffec
   1ff18:	mov	r0, #0
   1ff1c:	bl	2181c <__assert_fail@plt+0x10438>
   1ff20:	mov	r3, r0
   1ff24:	mov	r0, r3
   1ff28:	asr	r1, r0, #31
   1ff2c:	ldr	r3, [fp, #-16]
   1ff30:	ldrd	r2, [r3]
   1ff34:	cmp	r1, r3
   1ff38:	cmpeq	r0, r2
   1ff3c:	movcc	r3, #1
   1ff40:	movcs	r3, #0
   1ff44:	uxtb	r3, r3
   1ff48:	b	1ffa8 <__assert_fail@plt+0xebc4>
   1ff4c:	ldr	r3, [fp, #-20]	; 0xffffffec
   1ff50:	cmp	r3, #0
   1ff54:	beq	1ff9c <__assert_fail@plt+0xebb8>
   1ff58:	ldr	r3, [fp, #-20]	; 0xffffffec
   1ff5c:	mov	r2, r3
   1ff60:	asr	r3, r2, #31
   1ff64:	mvn	r0, #0
   1ff68:	mvn	r1, #0
   1ff6c:	bl	21b30 <__assert_fail@plt+0x1074c>
   1ff70:	mov	r2, r0
   1ff74:	mov	r3, r1
   1ff78:	mov	r0, r2
   1ff7c:	mov	r1, r3
   1ff80:	ldr	r3, [fp, #-16]
   1ff84:	ldrd	r2, [r3]
   1ff88:	cmp	r1, r3
   1ff8c:	cmpeq	r0, r2
   1ff90:	bcs	1ff9c <__assert_fail@plt+0xebb8>
   1ff94:	mov	r3, #1
   1ff98:	b	1ffa0 <__assert_fail@plt+0xebbc>
   1ff9c:	mov	r3, #0
   1ffa0:	and	r3, r3, #1
   1ffa4:	uxtb	r3, r3
   1ffa8:	cmp	r3, #0
   1ffac:	beq	1ffe8 <__assert_fail@plt+0xec04>
   1ffb0:	ldr	r3, [fp, #-16]
   1ffb4:	ldrd	r0, [r3]
   1ffb8:	ldr	r3, [fp, #-20]	; 0xffffffec
   1ffbc:	mov	r2, r3
   1ffc0:	asr	r3, r2, #31
   1ffc4:	mul	lr, r2, r1
   1ffc8:	mul	ip, r0, r3
   1ffcc:	add	ip, lr, ip
   1ffd0:	umull	r2, r3, r0, r2
   1ffd4:	add	r1, ip, r3
   1ffd8:	mov	r3, r1
   1ffdc:	strd	r2, [fp, #-12]
   1ffe0:	mov	r3, #1
   1ffe4:	b	2001c <__assert_fail@plt+0xec38>
   1ffe8:	ldr	r3, [fp, #-16]
   1ffec:	ldrd	r0, [r3]
   1fff0:	ldr	r3, [fp, #-20]	; 0xffffffec
   1fff4:	mov	r2, r3
   1fff8:	asr	r3, r2, #31
   1fffc:	mul	lr, r2, r1
   20000:	mul	ip, r0, r3
   20004:	add	ip, lr, ip
   20008:	umull	r2, r3, r0, r2
   2000c:	add	r1, ip, r3
   20010:	mov	r3, r1
   20014:	strd	r2, [fp, #-12]
   20018:	mov	r3, #0
   2001c:	cmp	r3, #0
   20020:	beq	2003c <__assert_fail@plt+0xec58>
   20024:	ldr	r1, [fp, #-16]
   20028:	mvn	r2, #0
   2002c:	mvn	r3, #0
   20030:	strd	r2, [r1]
   20034:	mov	r3, #1
   20038:	b	2004c <__assert_fail@plt+0xec68>
   2003c:	ldrd	r2, [fp, #-12]
   20040:	ldr	r1, [fp, #-16]
   20044:	strd	r2, [r1]
   20048:	mov	r3, #0
   2004c:	mov	r0, r3
   20050:	sub	sp, fp, #4
   20054:	pop	{fp, pc}
   20058:	push	{fp, lr}
   2005c:	add	fp, sp, #4
   20060:	sub	sp, sp, #24
   20064:	str	r0, [fp, #-16]
   20068:	str	r1, [fp, #-20]	; 0xffffffec
   2006c:	str	r2, [fp, #-24]	; 0xffffffe8
   20070:	mov	r3, #0
   20074:	str	r3, [fp, #-8]
   20078:	b	20098 <__assert_fail@plt+0xecb4>
   2007c:	ldr	r1, [fp, #-20]	; 0xffffffec
   20080:	ldr	r0, [fp, #-16]
   20084:	bl	1fef4 <__assert_fail@plt+0xeb10>
   20088:	mov	r2, r0
   2008c:	ldr	r3, [fp, #-8]
   20090:	orr	r3, r3, r2
   20094:	str	r3, [fp, #-8]
   20098:	ldr	r3, [fp, #-24]	; 0xffffffe8
   2009c:	sub	r2, r3, #1
   200a0:	str	r2, [fp, #-24]	; 0xffffffe8
   200a4:	cmp	r3, #0
   200a8:	bne	2007c <__assert_fail@plt+0xec98>
   200ac:	ldr	r3, [fp, #-8]
   200b0:	mov	r0, r3
   200b4:	sub	sp, fp, #4
   200b8:	pop	{fp, pc}
   200bc:	push	{fp, lr}
   200c0:	add	fp, sp, #4
   200c4:	sub	sp, sp, #56	; 0x38
   200c8:	str	r0, [fp, #-48]	; 0xffffffd0
   200cc:	str	r1, [fp, #-52]	; 0xffffffcc
   200d0:	str	r2, [fp, #-56]	; 0xffffffc8
   200d4:	str	r3, [fp, #-60]	; 0xffffffc4
   200d8:	mov	r3, #0
   200dc:	str	r3, [fp, #-8]
   200e0:	ldr	r3, [fp, #-56]	; 0xffffffc8
   200e4:	cmp	r3, #0
   200e8:	blt	200f8 <__assert_fail@plt+0xed14>
   200ec:	ldr	r3, [fp, #-56]	; 0xffffffc8
   200f0:	cmp	r3, #36	; 0x24
   200f4:	ble	2010c <__assert_fail@plt+0xed28>
   200f8:	ldr	r3, [pc, #1520]	; 206f0 <__assert_fail@plt+0xf30c>
   200fc:	mov	r2, #85	; 0x55
   20100:	ldr	r1, [pc, #1516]	; 206f4 <__assert_fail@plt+0xf310>
   20104:	ldr	r0, [pc, #1516]	; 206f8 <__assert_fail@plt+0xf314>
   20108:	bl	113e4 <__assert_fail@plt>
   2010c:	ldr	r3, [fp, #-52]	; 0xffffffcc
   20110:	cmp	r3, #0
   20114:	bne	20120 <__assert_fail@plt+0xed3c>
   20118:	sub	r3, fp, #36	; 0x24
   2011c:	b	20124 <__assert_fail@plt+0xed40>
   20120:	ldr	r3, [fp, #-52]	; 0xffffffcc
   20124:	str	r3, [fp, #-32]	; 0xffffffe0
   20128:	bl	112d0 <__errno_location@plt>
   2012c:	mov	r2, r0
   20130:	mov	r3, #0
   20134:	str	r3, [r2]
   20138:	ldr	r3, [fp, #-48]	; 0xffffffd0
   2013c:	str	r3, [fp, #-12]
   20140:	ldr	r3, [fp, #-12]
   20144:	ldrb	r3, [r3]
   20148:	strb	r3, [fp, #-13]
   2014c:	b	20168 <__assert_fail@plt+0xed84>
   20150:	ldr	r3, [fp, #-12]
   20154:	add	r3, r3, #1
   20158:	str	r3, [fp, #-12]
   2015c:	ldr	r3, [fp, #-12]
   20160:	ldrb	r3, [r3]
   20164:	strb	r3, [fp, #-13]
   20168:	bl	11270 <__ctype_b_loc@plt>
   2016c:	mov	r3, r0
   20170:	ldr	r2, [r3]
   20174:	ldrb	r3, [fp, #-13]
   20178:	lsl	r3, r3, #1
   2017c:	add	r3, r2, r3
   20180:	ldrh	r3, [r3]
   20184:	and	r3, r3, #8192	; 0x2000
   20188:	cmp	r3, #0
   2018c:	bne	20150 <__assert_fail@plt+0xed6c>
   20190:	ldrb	r3, [fp, #-13]
   20194:	cmp	r3, #45	; 0x2d
   20198:	bne	201a4 <__assert_fail@plt+0xedc0>
   2019c:	mov	r3, #4
   201a0:	b	206e4 <__assert_fail@plt+0xf300>
   201a4:	ldr	r2, [fp, #-56]	; 0xffffffc8
   201a8:	ldr	r1, [fp, #-32]	; 0xffffffe0
   201ac:	ldr	r0, [fp, #-48]	; 0xffffffd0
   201b0:	bl	11300 <strtoumax@plt>
   201b4:	mov	r2, r0
   201b8:	mov	r3, r1
   201bc:	strd	r2, [fp, #-44]	; 0xffffffd4
   201c0:	ldr	r3, [fp, #-32]	; 0xffffffe0
   201c4:	ldr	r2, [r3]
   201c8:	ldr	r3, [fp, #-48]	; 0xffffffd0
   201cc:	cmp	r2, r3
   201d0:	bne	20230 <__assert_fail@plt+0xee4c>
   201d4:	ldr	r3, [fp, #4]
   201d8:	cmp	r3, #0
   201dc:	beq	20228 <__assert_fail@plt+0xee44>
   201e0:	ldr	r3, [fp, #-32]	; 0xffffffe0
   201e4:	ldr	r3, [r3]
   201e8:	ldrb	r3, [r3]
   201ec:	cmp	r3, #0
   201f0:	beq	20228 <__assert_fail@plt+0xee44>
   201f4:	ldr	r3, [fp, #-32]	; 0xffffffe0
   201f8:	ldr	r3, [r3]
   201fc:	ldrb	r3, [r3]
   20200:	mov	r1, r3
   20204:	ldr	r0, [fp, #4]
   20208:	bl	112a0 <strchr@plt>
   2020c:	mov	r3, r0
   20210:	cmp	r3, #0
   20214:	beq	20228 <__assert_fail@plt+0xee44>
   20218:	mov	r2, #1
   2021c:	mov	r3, #0
   20220:	strd	r2, [fp, #-44]	; 0xffffffd4
   20224:	b	20268 <__assert_fail@plt+0xee84>
   20228:	mov	r3, #4
   2022c:	b	206e4 <__assert_fail@plt+0xf300>
   20230:	bl	112d0 <__errno_location@plt>
   20234:	mov	r3, r0
   20238:	ldr	r3, [r3]
   2023c:	cmp	r3, #0
   20240:	beq	20268 <__assert_fail@plt+0xee84>
   20244:	bl	112d0 <__errno_location@plt>
   20248:	mov	r3, r0
   2024c:	ldr	r3, [r3]
   20250:	cmp	r3, #34	; 0x22
   20254:	beq	20260 <__assert_fail@plt+0xee7c>
   20258:	mov	r3, #4
   2025c:	b	206e4 <__assert_fail@plt+0xf300>
   20260:	mov	r3, #1
   20264:	str	r3, [fp, #-8]
   20268:	ldr	r3, [fp, #4]
   2026c:	cmp	r3, #0
   20270:	bne	20288 <__assert_fail@plt+0xeea4>
   20274:	ldrd	r2, [fp, #-44]	; 0xffffffd4
   20278:	ldr	r1, [fp, #-60]	; 0xffffffc4
   2027c:	strd	r2, [r1]
   20280:	ldr	r3, [fp, #-8]
   20284:	b	206e4 <__assert_fail@plt+0xf300>
   20288:	ldr	r3, [fp, #-32]	; 0xffffffe0
   2028c:	ldr	r3, [r3]
   20290:	ldrb	r3, [r3]
   20294:	cmp	r3, #0
   20298:	beq	206d4 <__assert_fail@plt+0xf2f0>
   2029c:	mov	r3, #1024	; 0x400
   202a0:	str	r3, [fp, #-20]	; 0xffffffec
   202a4:	mov	r3, #1
   202a8:	str	r3, [fp, #-24]	; 0xffffffe8
   202ac:	ldr	r3, [fp, #-32]	; 0xffffffe0
   202b0:	ldr	r3, [r3]
   202b4:	ldrb	r3, [r3]
   202b8:	mov	r1, r3
   202bc:	ldr	r0, [fp, #4]
   202c0:	bl	112a0 <strchr@plt>
   202c4:	mov	r3, r0
   202c8:	cmp	r3, #0
   202cc:	bne	202e8 <__assert_fail@plt+0xef04>
   202d0:	ldrd	r2, [fp, #-44]	; 0xffffffd4
   202d4:	ldr	r1, [fp, #-60]	; 0xffffffc4
   202d8:	strd	r2, [r1]
   202dc:	ldr	r3, [fp, #-8]
   202e0:	orr	r3, r3, #2
   202e4:	b	206e4 <__assert_fail@plt+0xf300>
   202e8:	ldr	r3, [fp, #-32]	; 0xffffffe0
   202ec:	ldr	r3, [r3]
   202f0:	ldrb	r3, [r3]
   202f4:	sub	r3, r3, #69	; 0x45
   202f8:	cmp	r3, #47	; 0x2f
   202fc:	ldrls	pc, [pc, r3, lsl #2]
   20300:	b	2044c <__assert_fail@plt+0xf068>
   20304:	andeq	r0, r2, r4, asr #7
   20308:	andeq	r0, r2, ip, asr #8
   2030c:	andeq	r0, r2, r4, asr #7
   20310:	andeq	r0, r2, ip, asr #8
   20314:	andeq	r0, r2, ip, asr #8
   20318:	andeq	r0, r2, ip, asr #8
   2031c:	andeq	r0, r2, r4, asr #7
   20320:	andeq	r0, r2, ip, asr #8
   20324:	andeq	r0, r2, r4, asr #7
   20328:	andeq	r0, r2, ip, asr #8
   2032c:	andeq	r0, r2, ip, asr #8
   20330:	andeq	r0, r2, r4, asr #7
   20334:	andeq	r0, r2, ip, asr #8
   20338:	andeq	r0, r2, ip, asr #8
   2033c:	andeq	r0, r2, ip, asr #8
   20340:	andeq	r0, r2, r4, asr #7
   20344:	andeq	r0, r2, ip, asr #8
   20348:	andeq	r0, r2, ip, asr #8
   2034c:	andeq	r0, r2, ip, asr #8
   20350:	andeq	r0, r2, ip, asr #8
   20354:	andeq	r0, r2, r4, asr #7
   20358:	andeq	r0, r2, r4, asr #7
   2035c:	andeq	r0, r2, ip, asr #8
   20360:	andeq	r0, r2, ip, asr #8
   20364:	andeq	r0, r2, ip, asr #8
   20368:	andeq	r0, r2, ip, asr #8
   2036c:	andeq	r0, r2, ip, asr #8
   20370:	andeq	r0, r2, ip, asr #8
   20374:	andeq	r0, r2, ip, asr #8
   20378:	andeq	r0, r2, ip, asr #8
   2037c:	andeq	r0, r2, ip, asr #8
   20380:	andeq	r0, r2, ip, asr #8
   20384:	andeq	r0, r2, ip, asr #8
   20388:	andeq	r0, r2, ip, asr #8
   2038c:	andeq	r0, r2, r4, asr #7
   20390:	andeq	r0, r2, ip, asr #8
   20394:	andeq	r0, r2, ip, asr #8
   20398:	andeq	r0, r2, ip, asr #8
   2039c:	andeq	r0, r2, r4, asr #7
   203a0:	andeq	r0, r2, ip, asr #8
   203a4:	andeq	r0, r2, r4, asr #7
   203a8:	andeq	r0, r2, ip, asr #8
   203ac:	andeq	r0, r2, ip, asr #8
   203b0:	andeq	r0, r2, ip, asr #8
   203b4:	andeq	r0, r2, ip, asr #8
   203b8:	andeq	r0, r2, ip, asr #8
   203bc:	andeq	r0, r2, ip, asr #8
   203c0:	andeq	r0, r2, r4, asr #7
   203c4:	mov	r1, #48	; 0x30
   203c8:	ldr	r0, [fp, #4]
   203cc:	bl	112a0 <strchr@plt>
   203d0:	mov	r3, r0
   203d4:	cmp	r3, #0
   203d8:	beq	2044c <__assert_fail@plt+0xf068>
   203dc:	ldr	r3, [fp, #-32]	; 0xffffffe0
   203e0:	ldr	r3, [r3]
   203e4:	add	r3, r3, #1
   203e8:	ldrb	r3, [r3]
   203ec:	cmp	r3, #68	; 0x44
   203f0:	beq	20430 <__assert_fail@plt+0xf04c>
   203f4:	cmp	r3, #105	; 0x69
   203f8:	beq	20408 <__assert_fail@plt+0xf024>
   203fc:	cmp	r3, #66	; 0x42
   20400:	beq	20430 <__assert_fail@plt+0xf04c>
   20404:	b	2044c <__assert_fail@plt+0xf068>
   20408:	ldr	r3, [fp, #-32]	; 0xffffffe0
   2040c:	ldr	r3, [r3]
   20410:	add	r3, r3, #2
   20414:	ldrb	r3, [r3]
   20418:	cmp	r3, #66	; 0x42
   2041c:	bne	20448 <__assert_fail@plt+0xf064>
   20420:	ldr	r3, [fp, #-24]	; 0xffffffe8
   20424:	add	r3, r3, #2
   20428:	str	r3, [fp, #-24]	; 0xffffffe8
   2042c:	b	20448 <__assert_fail@plt+0xf064>
   20430:	mov	r3, #1000	; 0x3e8
   20434:	str	r3, [fp, #-20]	; 0xffffffec
   20438:	ldr	r3, [fp, #-24]	; 0xffffffe8
   2043c:	add	r3, r3, #1
   20440:	str	r3, [fp, #-24]	; 0xffffffe8
   20444:	b	2044c <__assert_fail@plt+0xf068>
   20448:	nop			; (mov r0, r0)
   2044c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   20450:	ldr	r3, [r3]
   20454:	ldrb	r3, [r3]
   20458:	sub	r3, r3, #66	; 0x42
   2045c:	cmp	r3, #53	; 0x35
   20460:	ldrls	pc, [pc, r3, lsl #2]
   20464:	b	20674 <__assert_fail@plt+0xf290>
   20468:	andeq	r0, r2, r8, asr r5
   2046c:	andeq	r0, r2, r4, ror r6
   20470:	andeq	r0, r2, r4, ror r6
   20474:	andeq	r0, r2, ip, ror r5
   20478:	andeq	r0, r2, r4, ror r6
   2047c:	muleq	r2, r8, r5
   20480:	andeq	r0, r2, r4, ror r6
   20484:	andeq	r0, r2, r4, ror r6
   20488:	andeq	r0, r2, r4, ror r6
   2048c:			; <UNDEFINED> instruction: 0x000205b4
   20490:	andeq	r0, r2, r4, ror r6
   20494:	ldrdeq	r0, [r2], -r0	; <UNPREDICTABLE>
   20498:	andeq	r0, r2, r4, ror r6
   2049c:	andeq	r0, r2, r4, ror r6
   204a0:	andeq	r0, r2, ip, ror #11
   204a4:	andeq	r0, r2, r4, ror r6
   204a8:	andeq	r0, r2, r4, ror r6
   204ac:	andeq	r0, r2, r4, ror r6
   204b0:	andeq	r0, r2, r8, lsl #12
   204b4:	andeq	r0, r2, r4, ror r6
   204b8:	andeq	r0, r2, r4, ror r6
   204bc:	andeq	r0, r2, r4, ror r6
   204c0:	andeq	r0, r2, r4, ror r6
   204c4:	andeq	r0, r2, ip, lsr r6
   204c8:	andeq	r0, r2, r8, asr r6
   204cc:	andeq	r0, r2, r4, ror r6
   204d0:	andeq	r0, r2, r4, ror r6
   204d4:	andeq	r0, r2, r4, ror r6
   204d8:	andeq	r0, r2, r4, ror r6
   204dc:	andeq	r0, r2, r4, ror r6
   204e0:	andeq	r0, r2, r4, ror r6
   204e4:	andeq	r0, r2, r4, ror r6
   204e8:	andeq	r0, r2, r0, asr #10
   204ec:	andeq	r0, r2, r0, ror r5
   204f0:	andeq	r0, r2, r4, ror r6
   204f4:	andeq	r0, r2, r4, ror r6
   204f8:	andeq	r0, r2, r4, ror r6
   204fc:	muleq	r2, r8, r5
   20500:	andeq	r0, r2, r4, ror r6
   20504:	andeq	r0, r2, r4, ror r6
   20508:	andeq	r0, r2, r4, ror r6
   2050c:			; <UNDEFINED> instruction: 0x000205b4
   20510:	andeq	r0, r2, r4, ror r6
   20514:	ldrdeq	r0, [r2], -r0	; <UNPREDICTABLE>
   20518:	andeq	r0, r2, r4, ror r6
   2051c:	andeq	r0, r2, r4, ror r6
   20520:	andeq	r0, r2, r4, ror r6
   20524:	andeq	r0, r2, r4, ror r6
   20528:	andeq	r0, r2, r4, ror r6
   2052c:	andeq	r0, r2, r4, ror r6
   20530:	andeq	r0, r2, r8, lsl #12
   20534:	andeq	r0, r2, r4, ror r6
   20538:	andeq	r0, r2, r4, ror r6
   2053c:	andeq	r0, r2, r4, lsr #12
   20540:	sub	r3, fp, #44	; 0x2c
   20544:	mov	r1, #512	; 0x200
   20548:	mov	r0, r3
   2054c:	bl	1fef4 <__assert_fail@plt+0xeb10>
   20550:	str	r0, [fp, #-28]	; 0xffffffe4
   20554:	b	2068c <__assert_fail@plt+0xf2a8>
   20558:	sub	r3, fp, #44	; 0x2c
   2055c:	mov	r1, #1024	; 0x400
   20560:	mov	r0, r3
   20564:	bl	1fef4 <__assert_fail@plt+0xeb10>
   20568:	str	r0, [fp, #-28]	; 0xffffffe4
   2056c:	b	2068c <__assert_fail@plt+0xf2a8>
   20570:	mov	r3, #0
   20574:	str	r3, [fp, #-28]	; 0xffffffe4
   20578:	b	2068c <__assert_fail@plt+0xf2a8>
   2057c:	sub	r3, fp, #44	; 0x2c
   20580:	mov	r2, #6
   20584:	ldr	r1, [fp, #-20]	; 0xffffffec
   20588:	mov	r0, r3
   2058c:	bl	20058 <__assert_fail@plt+0xec74>
   20590:	str	r0, [fp, #-28]	; 0xffffffe4
   20594:	b	2068c <__assert_fail@plt+0xf2a8>
   20598:	sub	r3, fp, #44	; 0x2c
   2059c:	mov	r2, #3
   205a0:	ldr	r1, [fp, #-20]	; 0xffffffec
   205a4:	mov	r0, r3
   205a8:	bl	20058 <__assert_fail@plt+0xec74>
   205ac:	str	r0, [fp, #-28]	; 0xffffffe4
   205b0:	b	2068c <__assert_fail@plt+0xf2a8>
   205b4:	sub	r3, fp, #44	; 0x2c
   205b8:	mov	r2, #1
   205bc:	ldr	r1, [fp, #-20]	; 0xffffffec
   205c0:	mov	r0, r3
   205c4:	bl	20058 <__assert_fail@plt+0xec74>
   205c8:	str	r0, [fp, #-28]	; 0xffffffe4
   205cc:	b	2068c <__assert_fail@plt+0xf2a8>
   205d0:	sub	r3, fp, #44	; 0x2c
   205d4:	mov	r2, #2
   205d8:	ldr	r1, [fp, #-20]	; 0xffffffec
   205dc:	mov	r0, r3
   205e0:	bl	20058 <__assert_fail@plt+0xec74>
   205e4:	str	r0, [fp, #-28]	; 0xffffffe4
   205e8:	b	2068c <__assert_fail@plt+0xf2a8>
   205ec:	sub	r3, fp, #44	; 0x2c
   205f0:	mov	r2, #5
   205f4:	ldr	r1, [fp, #-20]	; 0xffffffec
   205f8:	mov	r0, r3
   205fc:	bl	20058 <__assert_fail@plt+0xec74>
   20600:	str	r0, [fp, #-28]	; 0xffffffe4
   20604:	b	2068c <__assert_fail@plt+0xf2a8>
   20608:	sub	r3, fp, #44	; 0x2c
   2060c:	mov	r2, #4
   20610:	ldr	r1, [fp, #-20]	; 0xffffffec
   20614:	mov	r0, r3
   20618:	bl	20058 <__assert_fail@plt+0xec74>
   2061c:	str	r0, [fp, #-28]	; 0xffffffe4
   20620:	b	2068c <__assert_fail@plt+0xf2a8>
   20624:	sub	r3, fp, #44	; 0x2c
   20628:	mov	r1, #2
   2062c:	mov	r0, r3
   20630:	bl	1fef4 <__assert_fail@plt+0xeb10>
   20634:	str	r0, [fp, #-28]	; 0xffffffe4
   20638:	b	2068c <__assert_fail@plt+0xf2a8>
   2063c:	sub	r3, fp, #44	; 0x2c
   20640:	mov	r2, #8
   20644:	ldr	r1, [fp, #-20]	; 0xffffffec
   20648:	mov	r0, r3
   2064c:	bl	20058 <__assert_fail@plt+0xec74>
   20650:	str	r0, [fp, #-28]	; 0xffffffe4
   20654:	b	2068c <__assert_fail@plt+0xf2a8>
   20658:	sub	r3, fp, #44	; 0x2c
   2065c:	mov	r2, #7
   20660:	ldr	r1, [fp, #-20]	; 0xffffffec
   20664:	mov	r0, r3
   20668:	bl	20058 <__assert_fail@plt+0xec74>
   2066c:	str	r0, [fp, #-28]	; 0xffffffe4
   20670:	b	2068c <__assert_fail@plt+0xf2a8>
   20674:	ldrd	r2, [fp, #-44]	; 0xffffffd4
   20678:	ldr	r1, [fp, #-60]	; 0xffffffc4
   2067c:	strd	r2, [r1]
   20680:	ldr	r3, [fp, #-8]
   20684:	orr	r3, r3, #2
   20688:	b	206e4 <__assert_fail@plt+0xf300>
   2068c:	ldr	r2, [fp, #-8]
   20690:	ldr	r3, [fp, #-28]	; 0xffffffe4
   20694:	orr	r3, r2, r3
   20698:	str	r3, [fp, #-8]
   2069c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   206a0:	ldr	r2, [r3]
   206a4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   206a8:	add	r2, r2, r3
   206ac:	ldr	r3, [fp, #-32]	; 0xffffffe0
   206b0:	str	r2, [r3]
   206b4:	ldr	r3, [fp, #-32]	; 0xffffffe0
   206b8:	ldr	r3, [r3]
   206bc:	ldrb	r3, [r3]
   206c0:	cmp	r3, #0
   206c4:	beq	206d4 <__assert_fail@plt+0xf2f0>
   206c8:	ldr	r3, [fp, #-8]
   206cc:	orr	r3, r3, #2
   206d0:	str	r3, [fp, #-8]
   206d4:	ldrd	r2, [fp, #-44]	; 0xffffffd4
   206d8:	ldr	r1, [fp, #-60]	; 0xffffffc4
   206dc:	strd	r2, [r1]
   206e0:	ldr	r3, [fp, #-8]
   206e4:	mov	r0, r3
   206e8:	sub	sp, fp, #4
   206ec:	pop	{fp, pc}
   206f0:	andeq	r3, r2, r4, asr fp
   206f4:	andeq	r3, r2, ip, lsl fp
   206f8:	andeq	r3, r2, ip, lsr #22
   206fc:	push	{r4, r5, fp, lr}
   20700:	add	fp, sp, #12
   20704:	sub	sp, sp, #16
   20708:	str	r0, [fp, #-24]	; 0xffffffe8
   2070c:	str	r1, [fp, #-28]	; 0xffffffe4
   20710:	ldr	r3, [fp, #-24]	; 0xffffffe8
   20714:	cmp	r3, #0
   20718:	beq	20728 <__assert_fail@plt+0xf344>
   2071c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   20720:	cmp	r3, #0
   20724:	bne	20738 <__assert_fail@plt+0xf354>
   20728:	mov	r3, #1
   2072c:	str	r3, [fp, #-28]	; 0xffffffe4
   20730:	ldr	r3, [fp, #-28]	; 0xffffffe4
   20734:	str	r3, [fp, #-24]	; 0xffffffe8
   20738:	mov	r1, #0
   2073c:	ldr	r2, [fp, #-24]	; 0xffffffe8
   20740:	ldr	r3, [fp, #-28]	; 0xffffffe4
   20744:	umull	r2, r3, r2, r3
   20748:	mov	r4, r3
   2074c:	mov	r5, #0
   20750:	cmp	r4, #0
   20754:	beq	2075c <__assert_fail@plt+0xf378>
   20758:	mov	r1, #1
   2075c:	cmp	r2, #0
   20760:	bge	20768 <__assert_fail@plt+0xf384>
   20764:	mov	r1, #1
   20768:	mov	r3, r2
   2076c:	str	r3, [fp, #-20]	; 0xffffffec
   20770:	mov	r3, r1
   20774:	and	r3, r3, #1
   20778:	uxtb	r3, r3
   2077c:	cmp	r3, #0
   20780:	beq	2079c <__assert_fail@plt+0xf3b8>
   20784:	bl	112d0 <__errno_location@plt>
   20788:	mov	r2, r0
   2078c:	mov	r3, #12
   20790:	str	r3, [r2]
   20794:	mov	r3, #0
   20798:	b	207b4 <__assert_fail@plt+0xf3d0>
   2079c:	ldr	r1, [fp, #-28]	; 0xffffffe4
   207a0:	ldr	r0, [fp, #-24]	; 0xffffffe8
   207a4:	bl	11084 <calloc@plt>
   207a8:	mov	r3, r0
   207ac:	str	r3, [fp, #-16]
   207b0:	ldr	r3, [fp, #-16]
   207b4:	mov	r0, r3
   207b8:	sub	sp, fp, #12
   207bc:	pop	{r4, r5, fp, pc}
   207c0:	push	{r4, r5, fp, lr}
   207c4:	add	fp, sp, #12
   207c8:	sub	sp, sp, #16
   207cc:	str	r0, [fp, #-24]	; 0xffffffe8
   207d0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   207d4:	cmp	r3, #0
   207d8:	bne	207e4 <__assert_fail@plt+0xf400>
   207dc:	mov	r3, #1
   207e0:	str	r3, [fp, #-24]	; 0xffffffe8
   207e4:	mov	r1, #0
   207e8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   207ec:	mov	r2, r3
   207f0:	mov	r3, #0
   207f4:	mov	r4, r3
   207f8:	mov	r5, #0
   207fc:	cmp	r4, #0
   20800:	beq	20808 <__assert_fail@plt+0xf424>
   20804:	mov	r1, #1
   20808:	cmp	r2, #0
   2080c:	bge	20814 <__assert_fail@plt+0xf430>
   20810:	mov	r1, #1
   20814:	mov	r3, r2
   20818:	str	r3, [fp, #-20]	; 0xffffffec
   2081c:	mov	r3, r1
   20820:	and	r3, r3, #1
   20824:	uxtb	r3, r3
   20828:	cmp	r3, #0
   2082c:	beq	20848 <__assert_fail@plt+0xf464>
   20830:	bl	112d0 <__errno_location@plt>
   20834:	mov	r2, r0
   20838:	mov	r3, #12
   2083c:	str	r3, [r2]
   20840:	mov	r3, #0
   20844:	b	2085c <__assert_fail@plt+0xf478>
   20848:	ldr	r0, [fp, #-24]	; 0xffffffe8
   2084c:	bl	11228 <malloc@plt>
   20850:	mov	r3, r0
   20854:	str	r3, [fp, #-16]
   20858:	ldr	r3, [fp, #-16]
   2085c:	mov	r0, r3
   20860:	sub	sp, fp, #12
   20864:	pop	{r4, r5, fp, pc}
   20868:	push	{r4, r5, fp, lr}
   2086c:	add	fp, sp, #12
   20870:	sub	sp, sp, #16
   20874:	str	r0, [fp, #-24]	; 0xffffffe8
   20878:	str	r1, [fp, #-28]	; 0xffffffe4
   2087c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   20880:	cmp	r3, #0
   20884:	bne	20898 <__assert_fail@plt+0xf4b4>
   20888:	ldr	r0, [fp, #-28]	; 0xffffffe4
   2088c:	bl	207c0 <__assert_fail@plt+0xf3dc>
   20890:	mov	r3, r0
   20894:	b	2092c <__assert_fail@plt+0xf548>
   20898:	ldr	r3, [fp, #-28]	; 0xffffffe4
   2089c:	cmp	r3, #0
   208a0:	bne	208b4 <__assert_fail@plt+0xf4d0>
   208a4:	ldr	r0, [fp, #-24]	; 0xffffffe8
   208a8:	bl	17130 <__assert_fail@plt+0x5d4c>
   208ac:	mov	r3, #0
   208b0:	b	2092c <__assert_fail@plt+0xf548>
   208b4:	mov	r1, #0
   208b8:	ldr	r3, [fp, #-28]	; 0xffffffe4
   208bc:	mov	r2, r3
   208c0:	mov	r3, #0
   208c4:	mov	r4, r3
   208c8:	mov	r5, #0
   208cc:	cmp	r4, #0
   208d0:	beq	208d8 <__assert_fail@plt+0xf4f4>
   208d4:	mov	r1, #1
   208d8:	cmp	r2, #0
   208dc:	bge	208e4 <__assert_fail@plt+0xf500>
   208e0:	mov	r1, #1
   208e4:	mov	r3, r2
   208e8:	str	r3, [fp, #-20]	; 0xffffffec
   208ec:	mov	r3, r1
   208f0:	and	r3, r3, #1
   208f4:	uxtb	r3, r3
   208f8:	cmp	r3, #0
   208fc:	beq	20918 <__assert_fail@plt+0xf534>
   20900:	bl	112d0 <__errno_location@plt>
   20904:	mov	r2, r0
   20908:	mov	r3, #12
   2090c:	str	r3, [r2]
   20910:	mov	r3, #0
   20914:	b	2092c <__assert_fail@plt+0xf548>
   20918:	ldr	r1, [fp, #-28]	; 0xffffffe4
   2091c:	ldr	r0, [fp, #-24]	; 0xffffffe8
   20920:	bl	11174 <realloc@plt>
   20924:	str	r0, [fp, #-16]
   20928:	ldr	r3, [fp, #-16]
   2092c:	mov	r0, r3
   20930:	sub	sp, fp, #12
   20934:	pop	{r4, r5, fp, pc}
   20938:	push	{r4, r5, fp, lr}
   2093c:	add	fp, sp, #12
   20940:	sub	sp, sp, #16
   20944:	str	r0, [fp, #-24]	; 0xffffffe8
   20948:	str	r1, [fp, #-28]	; 0xffffffe4
   2094c:	ldr	r5, [fp, #-24]	; 0xffffffe8
   20950:	ldr	r4, [fp, #-28]	; 0xffffffe4
   20954:	cmp	r5, r4
   20958:	bne	20964 <__assert_fail@plt+0xf580>
   2095c:	mov	r3, #0
   20960:	b	209c4 <__assert_fail@plt+0xf5e0>
   20964:	ldrb	r3, [r5]
   20968:	mov	r0, r3
   2096c:	bl	21590 <__assert_fail@plt+0x101ac>
   20970:	mov	r3, r0
   20974:	strb	r3, [fp, #-13]
   20978:	ldrb	r3, [r4]
   2097c:	mov	r0, r3
   20980:	bl	21590 <__assert_fail@plt+0x101ac>
   20984:	mov	r3, r0
   20988:	strb	r3, [fp, #-14]
   2098c:	ldrb	r3, [fp, #-13]
   20990:	cmp	r3, #0
   20994:	beq	209b4 <__assert_fail@plt+0xf5d0>
   20998:	add	r5, r5, #1
   2099c:	add	r4, r4, #1
   209a0:	ldrb	r2, [fp, #-13]
   209a4:	ldrb	r3, [fp, #-14]
   209a8:	cmp	r2, r3
   209ac:	beq	20964 <__assert_fail@plt+0xf580>
   209b0:	b	209b8 <__assert_fail@plt+0xf5d4>
   209b4:	nop			; (mov r0, r0)
   209b8:	ldrb	r2, [fp, #-13]
   209bc:	ldrb	r3, [fp, #-14]
   209c0:	sub	r3, r2, r3
   209c4:	mov	r0, r3
   209c8:	sub	sp, fp, #12
   209cc:	pop	{r4, r5, fp, pc}
   209d0:	push	{fp, lr}
   209d4:	add	fp, sp, #4
   209d8:	sub	sp, sp, #16
   209dc:	str	r0, [fp, #-16]
   209e0:	ldr	r0, [fp, #-16]
   209e4:	bl	111ec <__fpending@plt>
   209e8:	mov	r3, r0
   209ec:	cmp	r3, #0
   209f0:	movne	r3, #1
   209f4:	moveq	r3, #0
   209f8:	strb	r3, [fp, #-5]
   209fc:	ldr	r0, [fp, #-16]
   20a00:	bl	111f8 <ferror_unlocked@plt>
   20a04:	mov	r3, r0
   20a08:	cmp	r3, #0
   20a0c:	movne	r3, #1
   20a10:	moveq	r3, #0
   20a14:	strb	r3, [fp, #-6]
   20a18:	ldr	r0, [fp, #-16]
   20a1c:	bl	16e84 <__assert_fail@plt+0x5aa0>
   20a20:	mov	r3, r0
   20a24:	cmp	r3, #0
   20a28:	movne	r3, #1
   20a2c:	moveq	r3, #0
   20a30:	strb	r3, [fp, #-7]
   20a34:	ldrb	r3, [fp, #-6]
   20a38:	cmp	r3, #0
   20a3c:	bne	20a6c <__assert_fail@plt+0xf688>
   20a40:	ldrb	r3, [fp, #-7]
   20a44:	cmp	r3, #0
   20a48:	beq	20a98 <__assert_fail@plt+0xf6b4>
   20a4c:	ldrb	r3, [fp, #-5]
   20a50:	cmp	r3, #0
   20a54:	bne	20a6c <__assert_fail@plt+0xf688>
   20a58:	bl	112d0 <__errno_location@plt>
   20a5c:	mov	r3, r0
   20a60:	ldr	r3, [r3]
   20a64:	cmp	r3, #9
   20a68:	beq	20a98 <__assert_fail@plt+0xf6b4>
   20a6c:	ldrb	r3, [fp, #-7]
   20a70:	eor	r3, r3, #1
   20a74:	uxtb	r3, r3
   20a78:	cmp	r3, #0
   20a7c:	beq	20a90 <__assert_fail@plt+0xf6ac>
   20a80:	bl	112d0 <__errno_location@plt>
   20a84:	mov	r2, r0
   20a88:	mov	r3, #0
   20a8c:	str	r3, [r2]
   20a90:	mvn	r3, #0
   20a94:	b	20a9c <__assert_fail@plt+0xf6b8>
   20a98:	mov	r3, #0
   20a9c:	mov	r0, r3
   20aa0:	sub	sp, fp, #4
   20aa4:	pop	{fp, pc}
   20aa8:	push	{r1, r2, r3}
   20aac:	push	{fp, lr}
   20ab0:	add	fp, sp, #4
   20ab4:	sub	sp, sp, #36	; 0x24
   20ab8:	str	r0, [fp, #-36]	; 0xffffffdc
   20abc:	mvn	r3, #0
   20ac0:	str	r3, [fp, #-12]
   20ac4:	add	r3, fp, #8
   20ac8:	str	r3, [fp, #-32]	; 0xffffffe0
   20acc:	ldr	r3, [fp, #4]
   20ad0:	cmp	r3, #0
   20ad4:	beq	20ae8 <__assert_fail@plt+0xf704>
   20ad8:	ldr	r2, [pc, #432]	; 20c90 <__assert_fail@plt+0xf8ac>
   20adc:	cmp	r3, r2
   20ae0:	beq	20b10 <__assert_fail@plt+0xf72c>
   20ae4:	b	20b38 <__assert_fail@plt+0xf754>
   20ae8:	ldr	r3, [fp, #-32]	; 0xffffffe0
   20aec:	add	r2, r3, #4
   20af0:	str	r2, [fp, #-32]	; 0xffffffe0
   20af4:	ldr	r3, [r3]
   20af8:	str	r3, [fp, #-16]
   20afc:	ldr	r1, [fp, #-16]
   20b00:	ldr	r0, [fp, #-36]	; 0xffffffdc
   20b04:	bl	20ca8 <__assert_fail@plt+0xf8c4>
   20b08:	str	r0, [fp, #-12]
   20b0c:	b	20c78 <__assert_fail@plt+0xf894>
   20b10:	ldr	r3, [fp, #-32]	; 0xffffffe0
   20b14:	add	r2, r3, #4
   20b18:	str	r2, [fp, #-32]	; 0xffffffe0
   20b1c:	ldr	r3, [r3]
   20b20:	str	r3, [fp, #-20]	; 0xffffffec
   20b24:	ldr	r1, [fp, #-20]	; 0xffffffec
   20b28:	ldr	r0, [fp, #-36]	; 0xffffffdc
   20b2c:	bl	20ce0 <__assert_fail@plt+0xf8fc>
   20b30:	str	r0, [fp, #-12]
   20b34:	b	20c78 <__assert_fail@plt+0xf894>
   20b38:	ldr	r3, [fp, #4]
   20b3c:	cmp	r3, #11
   20b40:	beq	20c08 <__assert_fail@plt+0xf824>
   20b44:	cmp	r3, #11
   20b48:	bgt	20ba8 <__assert_fail@plt+0xf7c4>
   20b4c:	cmp	r3, #3
   20b50:	beq	20c08 <__assert_fail@plt+0xf824>
   20b54:	cmp	r3, #3
   20b58:	bgt	20b78 <__assert_fail@plt+0xf794>
   20b5c:	cmp	r3, #1
   20b60:	beq	20c08 <__assert_fail@plt+0xf824>
   20b64:	cmp	r3, #1
   20b68:	bgt	20c1c <__assert_fail@plt+0xf838>
   20b6c:	cmp	r3, #0
   20b70:	beq	20c1c <__assert_fail@plt+0xf838>
   20b74:	b	20c48 <__assert_fail@plt+0xf864>
   20b78:	cmp	r3, #8
   20b7c:	beq	20c1c <__assert_fail@plt+0xf838>
   20b80:	cmp	r3, #8
   20b84:	bgt	20b94 <__assert_fail@plt+0xf7b0>
   20b88:	cmp	r3, #4
   20b8c:	beq	20c1c <__assert_fail@plt+0xf838>
   20b90:	b	20c48 <__assert_fail@plt+0xf864>
   20b94:	cmp	r3, #9
   20b98:	beq	20c08 <__assert_fail@plt+0xf824>
   20b9c:	cmp	r3, #10
   20ba0:	beq	20c1c <__assert_fail@plt+0xf838>
   20ba4:	b	20c48 <__assert_fail@plt+0xf864>
   20ba8:	ldr	r2, [pc, #228]	; 20c94 <__assert_fail@plt+0xf8b0>
   20bac:	cmp	r3, r2
   20bb0:	bgt	20be4 <__assert_fail@plt+0xf800>
   20bb4:	ldr	r2, [pc, #212]	; 20c90 <__assert_fail@plt+0xf8ac>
   20bb8:	cmp	r3, r2
   20bbc:	bge	20c1c <__assert_fail@plt+0xf838>
   20bc0:	ldr	r2, [pc, #208]	; 20c98 <__assert_fail@plt+0xf8b4>
   20bc4:	cmp	r3, r2
   20bc8:	beq	20c08 <__assert_fail@plt+0xf824>
   20bcc:	ldr	r2, [pc, #200]	; 20c9c <__assert_fail@plt+0xf8b8>
   20bd0:	cmp	r3, r2
   20bd4:	beq	20c1c <__assert_fail@plt+0xf838>
   20bd8:	cmp	r3, #1024	; 0x400
   20bdc:	beq	20c1c <__assert_fail@plt+0xf838>
   20be0:	b	20c48 <__assert_fail@plt+0xf864>
   20be4:	ldr	r2, [pc, #180]	; 20ca0 <__assert_fail@plt+0xf8bc>
   20be8:	cmp	r3, r2
   20bec:	beq	20c1c <__assert_fail@plt+0xf838>
   20bf0:	ldr	r2, [pc, #168]	; 20ca0 <__assert_fail@plt+0xf8bc>
   20bf4:	cmp	r3, r2
   20bf8:	blt	20c08 <__assert_fail@plt+0xf824>
   20bfc:	ldr	r2, [pc, #160]	; 20ca4 <__assert_fail@plt+0xf8c0>
   20c00:	cmp	r3, r2
   20c04:	bne	20c48 <__assert_fail@plt+0xf864>
   20c08:	ldr	r1, [fp, #4]
   20c0c:	ldr	r0, [fp, #-36]	; 0xffffffdc
   20c10:	bl	11330 <fcntl64@plt>
   20c14:	str	r0, [fp, #-12]
   20c18:	b	20c74 <__assert_fail@plt+0xf890>
   20c1c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   20c20:	add	r2, r3, #4
   20c24:	str	r2, [fp, #-32]	; 0xffffffe0
   20c28:	ldr	r3, [r3]
   20c2c:	str	r3, [fp, #-24]	; 0xffffffe8
   20c30:	ldr	r2, [fp, #-24]	; 0xffffffe8
   20c34:	ldr	r1, [fp, #4]
   20c38:	ldr	r0, [fp, #-36]	; 0xffffffdc
   20c3c:	bl	11330 <fcntl64@plt>
   20c40:	str	r0, [fp, #-12]
   20c44:	b	20c74 <__assert_fail@plt+0xf890>
   20c48:	ldr	r3, [fp, #-32]	; 0xffffffe0
   20c4c:	add	r2, r3, #4
   20c50:	str	r2, [fp, #-32]	; 0xffffffe0
   20c54:	ldr	r3, [r3]
   20c58:	str	r3, [fp, #-28]	; 0xffffffe4
   20c5c:	ldr	r2, [fp, #-28]	; 0xffffffe4
   20c60:	ldr	r1, [fp, #4]
   20c64:	ldr	r0, [fp, #-36]	; 0xffffffdc
   20c68:	bl	11330 <fcntl64@plt>
   20c6c:	str	r0, [fp, #-12]
   20c70:	nop			; (mov r0, r0)
   20c74:	nop			; (mov r0, r0)
   20c78:	ldr	r3, [fp, #-12]
   20c7c:	mov	r0, r3
   20c80:	sub	sp, fp, #4
   20c84:	pop	{fp, lr}
   20c88:	add	sp, sp, #12
   20c8c:	bx	lr
   20c90:	andeq	r0, r0, r6, lsl #8
   20c94:	andeq	r0, r0, r7, lsl #8
   20c98:	andeq	r0, r0, r1, lsl #8
   20c9c:	andeq	r0, r0, r2, lsl #8
   20ca0:	andeq	r0, r0, r9, lsl #8
   20ca4:	andeq	r0, r0, sl, lsl #8
   20ca8:	push	{fp, lr}
   20cac:	add	fp, sp, #4
   20cb0:	sub	sp, sp, #16
   20cb4:	str	r0, [fp, #-16]
   20cb8:	str	r1, [fp, #-20]	; 0xffffffec
   20cbc:	ldr	r2, [fp, #-20]	; 0xffffffec
   20cc0:	mov	r1, #0
   20cc4:	ldr	r0, [fp, #-16]
   20cc8:	bl	11330 <fcntl64@plt>
   20ccc:	str	r0, [fp, #-8]
   20cd0:	ldr	r3, [fp, #-8]
   20cd4:	mov	r0, r3
   20cd8:	sub	sp, fp, #4
   20cdc:	pop	{fp, pc}
   20ce0:	push	{fp, lr}
   20ce4:	add	fp, sp, #4
   20ce8:	sub	sp, sp, #24
   20cec:	str	r0, [fp, #-24]	; 0xffffffe8
   20cf0:	str	r1, [fp, #-28]	; 0xffffffe4
   20cf4:	ldr	r3, [pc, #292]	; 20e20 <__assert_fail@plt+0xfa3c>
   20cf8:	ldr	r3, [r3]
   20cfc:	cmp	r3, #0
   20d00:	blt	20d74 <__assert_fail@plt+0xf990>
   20d04:	ldr	r2, [fp, #-28]	; 0xffffffe4
   20d08:	ldr	r1, [pc, #276]	; 20e24 <__assert_fail@plt+0xfa40>
   20d0c:	ldr	r0, [fp, #-24]	; 0xffffffe8
   20d10:	bl	11330 <fcntl64@plt>
   20d14:	str	r0, [fp, #-8]
   20d18:	ldr	r3, [fp, #-8]
   20d1c:	cmp	r3, #0
   20d20:	bge	20d38 <__assert_fail@plt+0xf954>
   20d24:	bl	112d0 <__errno_location@plt>
   20d28:	mov	r3, r0
   20d2c:	ldr	r3, [r3]
   20d30:	cmp	r3, #22
   20d34:	beq	20d48 <__assert_fail@plt+0xf964>
   20d38:	ldr	r3, [pc, #224]	; 20e20 <__assert_fail@plt+0xfa3c>
   20d3c:	mov	r2, #1
   20d40:	str	r2, [r3]
   20d44:	b	20d84 <__assert_fail@plt+0xf9a0>
   20d48:	ldr	r1, [fp, #-28]	; 0xffffffe4
   20d4c:	ldr	r0, [fp, #-24]	; 0xffffffe8
   20d50:	bl	20ca8 <__assert_fail@plt+0xf8c4>
   20d54:	str	r0, [fp, #-8]
   20d58:	ldr	r3, [fp, #-8]
   20d5c:	cmp	r3, #0
   20d60:	blt	20d84 <__assert_fail@plt+0xf9a0>
   20d64:	ldr	r3, [pc, #180]	; 20e20 <__assert_fail@plt+0xfa3c>
   20d68:	mvn	r2, #0
   20d6c:	str	r2, [r3]
   20d70:	b	20d84 <__assert_fail@plt+0xf9a0>
   20d74:	ldr	r1, [fp, #-28]	; 0xffffffe4
   20d78:	ldr	r0, [fp, #-24]	; 0xffffffe8
   20d7c:	bl	20ca8 <__assert_fail@plt+0xf8c4>
   20d80:	str	r0, [fp, #-8]
   20d84:	ldr	r3, [fp, #-8]
   20d88:	cmp	r3, #0
   20d8c:	blt	20e10 <__assert_fail@plt+0xfa2c>
   20d90:	ldr	r3, [pc, #136]	; 20e20 <__assert_fail@plt+0xfa3c>
   20d94:	ldr	r3, [r3]
   20d98:	cmn	r3, #1
   20d9c:	bne	20e10 <__assert_fail@plt+0xfa2c>
   20da0:	mov	r1, #1
   20da4:	ldr	r0, [fp, #-8]
   20da8:	bl	11330 <fcntl64@plt>
   20dac:	str	r0, [fp, #-12]
   20db0:	ldr	r3, [fp, #-12]
   20db4:	cmp	r3, #0
   20db8:	blt	20de0 <__assert_fail@plt+0xf9fc>
   20dbc:	ldr	r3, [fp, #-12]
   20dc0:	orr	r3, r3, #1
   20dc4:	mov	r2, r3
   20dc8:	mov	r1, #2
   20dcc:	ldr	r0, [fp, #-8]
   20dd0:	bl	11330 <fcntl64@plt>
   20dd4:	mov	r3, r0
   20dd8:	cmn	r3, #1
   20ddc:	bne	20e10 <__assert_fail@plt+0xfa2c>
   20de0:	bl	112d0 <__errno_location@plt>
   20de4:	mov	r3, r0
   20de8:	ldr	r3, [r3]
   20dec:	str	r3, [fp, #-16]
   20df0:	ldr	r0, [fp, #-8]
   20df4:	bl	113cc <close@plt>
   20df8:	bl	112d0 <__errno_location@plt>
   20dfc:	mov	r2, r0
   20e00:	ldr	r3, [fp, #-16]
   20e04:	str	r3, [r2]
   20e08:	mvn	r3, #0
   20e0c:	str	r3, [fp, #-8]
   20e10:	ldr	r3, [fp, #-8]
   20e14:	mov	r0, r3
   20e18:	sub	sp, fp, #4
   20e1c:	pop	{fp, pc}
   20e20:	andeq	r4, r3, r8, ror #7
   20e24:	andeq	r0, r0, r6, lsl #8
   20e28:	push	{fp, lr}
   20e2c:	add	fp, sp, #4
   20e30:	bl	112d0 <__errno_location@plt>
   20e34:	mov	r2, r0
   20e38:	mov	r3, #12
   20e3c:	str	r3, [r2]
   20e40:	mov	r3, #0
   20e44:	mov	r0, r3
   20e48:	pop	{fp, pc}
   20e4c:	push	{fp, lr}
   20e50:	add	fp, sp, #4
   20e54:	sub	sp, sp, #8
   20e58:	str	r0, [fp, #-8]
   20e5c:	ldr	r3, [fp, #-8]
   20e60:	mov	r0, r3
   20e64:	bl	207c0 <__assert_fail@plt+0xf3dc>
   20e68:	mov	r3, r0
   20e6c:	mov	r0, r3
   20e70:	sub	sp, fp, #4
   20e74:	pop	{fp, pc}
   20e78:	push	{fp, lr}
   20e7c:	add	fp, sp, #4
   20e80:	sub	sp, sp, #8
   20e84:	str	r0, [fp, #-8]
   20e88:	str	r1, [fp, #-12]
   20e8c:	ldr	r3, [fp, #-12]
   20e90:	cmp	r3, #0
   20e94:	moveq	r3, #1
   20e98:	movne	r3, #0
   20e9c:	uxtb	r3, r3
   20ea0:	mov	r2, r3
   20ea4:	ldr	r3, [fp, #-12]
   20ea8:	orr	r3, r2, r3
   20eac:	mov	r1, r3
   20eb0:	ldr	r0, [fp, #-8]
   20eb4:	bl	20868 <__assert_fail@plt+0xf484>
   20eb8:	mov	r3, r0
   20ebc:	mov	r0, r3
   20ec0:	sub	sp, fp, #4
   20ec4:	pop	{fp, pc}
   20ec8:	push	{fp, lr}
   20ecc:	add	fp, sp, #4
   20ed0:	sub	sp, sp, #8
   20ed4:	str	r0, [fp, #-8]
   20ed8:	str	r1, [fp, #-12]
   20edc:	ldr	r3, [fp, #-8]
   20ee0:	ldr	r2, [fp, #-12]
   20ee4:	mov	r1, r2
   20ee8:	mov	r0, r3
   20eec:	bl	206fc <__assert_fail@plt+0xf318>
   20ef0:	mov	r3, r0
   20ef4:	mov	r0, r3
   20ef8:	sub	sp, fp, #4
   20efc:	pop	{fp, pc}
   20f00:	push	{fp, lr}
   20f04:	add	fp, sp, #4
   20f08:	sub	sp, sp, #16
   20f0c:	str	r0, [fp, #-8]
   20f10:	str	r1, [fp, #-12]
   20f14:	str	r2, [fp, #-16]
   20f18:	ldr	r3, [fp, #-12]
   20f1c:	cmp	r3, #0
   20f20:	beq	20f30 <__assert_fail@plt+0xfb4c>
   20f24:	ldr	r3, [fp, #-16]
   20f28:	cmp	r3, #0
   20f2c:	bne	20f40 <__assert_fail@plt+0xfb5c>
   20f30:	mov	r3, #1
   20f34:	str	r3, [fp, #-16]
   20f38:	ldr	r3, [fp, #-16]
   20f3c:	str	r3, [fp, #-12]
   20f40:	ldr	r3, [fp, #-12]
   20f44:	ldr	r2, [fp, #-16]
   20f48:	mov	r1, r3
   20f4c:	ldr	r0, [fp, #-8]
   20f50:	bl	2106c <__assert_fail@plt+0xfc88>
   20f54:	mov	r3, r0
   20f58:	mov	r0, r3
   20f5c:	sub	sp, fp, #4
   20f60:	pop	{fp, pc}
   20f64:	push	{fp, lr}
   20f68:	add	fp, sp, #4
   20f6c:	sub	sp, sp, #8
   20f70:	mov	r0, #14
   20f74:	bl	11360 <nl_langinfo@plt>
   20f78:	str	r0, [fp, #-8]
   20f7c:	ldr	r3, [fp, #-8]
   20f80:	cmp	r3, #0
   20f84:	bne	20f90 <__assert_fail@plt+0xfbac>
   20f88:	ldr	r3, [pc, #40]	; 20fb8 <__assert_fail@plt+0xfbd4>
   20f8c:	str	r3, [fp, #-8]
   20f90:	ldr	r3, [fp, #-8]
   20f94:	ldrb	r3, [r3]
   20f98:	cmp	r3, #0
   20f9c:	bne	20fa8 <__assert_fail@plt+0xfbc4>
   20fa0:	ldr	r3, [pc, #20]	; 20fbc <__assert_fail@plt+0xfbd8>
   20fa4:	str	r3, [fp, #-8]
   20fa8:	ldr	r3, [fp, #-8]
   20fac:	mov	r0, r3
   20fb0:	sub	sp, fp, #4
   20fb4:	pop	{fp, pc}
   20fb8:	andeq	r3, r2, r0, ror #22
   20fbc:	andeq	r3, r2, r4, ror #22
   20fc0:	push	{fp, lr}
   20fc4:	add	fp, sp, #4
   20fc8:	sub	sp, sp, #32
   20fcc:	str	r0, [fp, #-24]	; 0xffffffe8
   20fd0:	str	r1, [fp, #-28]	; 0xffffffe4
   20fd4:	str	r2, [fp, #-32]	; 0xffffffe0
   20fd8:	str	r3, [fp, #-36]	; 0xffffffdc
   20fdc:	ldr	r3, [fp, #-24]	; 0xffffffe8
   20fe0:	cmp	r3, #0
   20fe4:	bne	20ff0 <__assert_fail@plt+0xfc0c>
   20fe8:	sub	r3, fp, #16
   20fec:	str	r3, [fp, #-24]	; 0xffffffe8
   20ff0:	ldr	r3, [fp, #-36]	; 0xffffffdc
   20ff4:	ldr	r2, [fp, #-32]	; 0xffffffe0
   20ff8:	ldr	r1, [fp, #-28]	; 0xffffffe4
   20ffc:	ldr	r0, [fp, #-24]	; 0xffffffe8
   21000:	bl	11204 <mbrtowc@plt>
   21004:	str	r0, [fp, #-8]
   21008:	ldr	r3, [fp, #-8]
   2100c:	cmn	r3, #3
   21010:	bls	2105c <__assert_fail@plt+0xfc78>
   21014:	ldr	r3, [fp, #-32]	; 0xffffffe0
   21018:	cmp	r3, #0
   2101c:	beq	2105c <__assert_fail@plt+0xfc78>
   21020:	mov	r0, #0
   21024:	bl	17304 <__assert_fail@plt+0x5f20>
   21028:	mov	r3, r0
   2102c:	eor	r3, r3, #1
   21030:	uxtb	r3, r3
   21034:	cmp	r3, #0
   21038:	beq	2105c <__assert_fail@plt+0xfc78>
   2103c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   21040:	ldrb	r3, [r3]
   21044:	strb	r3, [fp, #-9]
   21048:	ldrb	r2, [fp, #-9]
   2104c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   21050:	str	r2, [r3]
   21054:	mov	r3, #1
   21058:	b	21060 <__assert_fail@plt+0xfc7c>
   2105c:	ldr	r3, [fp, #-8]
   21060:	mov	r0, r3
   21064:	sub	sp, fp, #4
   21068:	pop	{fp, pc}
   2106c:	push	{fp, lr}
   21070:	add	fp, sp, #4
   21074:	sub	sp, sp, #24
   21078:	str	r0, [fp, #-16]
   2107c:	str	r1, [fp, #-20]	; 0xffffffec
   21080:	str	r2, [fp, #-24]	; 0xffffffe8
   21084:	ldr	r3, [fp, #-24]	; 0xffffffe8
   21088:	cmp	r3, #0
   2108c:	beq	210c8 <__assert_fail@plt+0xfce4>
   21090:	ldr	r1, [fp, #-24]	; 0xffffffe8
   21094:	mvn	r0, #0
   21098:	bl	21610 <__assert_fail@plt+0x1022c>
   2109c:	mov	r3, r0
   210a0:	mov	r2, r3
   210a4:	ldr	r3, [fp, #-20]	; 0xffffffec
   210a8:	cmp	r2, r3
   210ac:	bcs	210c8 <__assert_fail@plt+0xfce4>
   210b0:	ldr	r3, [fp, #-20]	; 0xffffffec
   210b4:	ldr	r2, [fp, #-24]	; 0xffffffe8
   210b8:	mul	r3, r2, r3
   210bc:	str	r3, [fp, #-8]
   210c0:	mov	r3, #1
   210c4:	b	210dc <__assert_fail@plt+0xfcf8>
   210c8:	ldr	r3, [fp, #-20]	; 0xffffffec
   210cc:	ldr	r2, [fp, #-24]	; 0xffffffe8
   210d0:	mul	r3, r2, r3
   210d4:	str	r3, [fp, #-8]
   210d8:	mov	r3, #0
   210dc:	cmp	r3, #0
   210e0:	beq	210fc <__assert_fail@plt+0xfd18>
   210e4:	bl	112d0 <__errno_location@plt>
   210e8:	mov	r2, r0
   210ec:	mov	r3, #12
   210f0:	str	r3, [r2]
   210f4:	mov	r3, #0
   210f8:	b	21110 <__assert_fail@plt+0xfd2c>
   210fc:	ldr	r3, [fp, #-8]
   21100:	mov	r1, r3
   21104:	ldr	r0, [fp, #-16]
   21108:	bl	20868 <__assert_fail@plt+0xf484>
   2110c:	mov	r3, r0
   21110:	mov	r0, r3
   21114:	sub	sp, fp, #4
   21118:	pop	{fp, pc}
   2111c:	push	{fp}		; (str fp, [sp, #-4]!)
   21120:	add	fp, sp, #0
   21124:	sub	sp, sp, #12
   21128:	str	r0, [fp, #-8]
   2112c:	ldr	r3, [fp, #-8]
   21130:	cmp	r3, #90	; 0x5a
   21134:	bgt	21150 <__assert_fail@plt+0xfd6c>
   21138:	cmp	r3, #65	; 0x41
   2113c:	bge	2115c <__assert_fail@plt+0xfd78>
   21140:	sub	r3, r3, #48	; 0x30
   21144:	cmp	r3, #9
   21148:	bhi	21164 <__assert_fail@plt+0xfd80>
   2114c:	b	2115c <__assert_fail@plt+0xfd78>
   21150:	sub	r3, r3, #97	; 0x61
   21154:	cmp	r3, #25
   21158:	bhi	21164 <__assert_fail@plt+0xfd80>
   2115c:	mov	r3, #1
   21160:	b	21168 <__assert_fail@plt+0xfd84>
   21164:	mov	r3, #0
   21168:	mov	r0, r3
   2116c:	add	sp, fp, #0
   21170:	pop	{fp}		; (ldr fp, [sp], #4)
   21174:	bx	lr
   21178:	push	{fp}		; (str fp, [sp, #-4]!)
   2117c:	add	fp, sp, #0
   21180:	sub	sp, sp, #12
   21184:	str	r0, [fp, #-8]
   21188:	ldr	r3, [fp, #-8]
   2118c:	cmp	r3, #65	; 0x41
   21190:	blt	211b0 <__assert_fail@plt+0xfdcc>
   21194:	cmp	r3, #90	; 0x5a
   21198:	ble	211a8 <__assert_fail@plt+0xfdc4>
   2119c:	sub	r3, r3, #97	; 0x61
   211a0:	cmp	r3, #25
   211a4:	bhi	211b0 <__assert_fail@plt+0xfdcc>
   211a8:	mov	r3, #1
   211ac:	b	211b4 <__assert_fail@plt+0xfdd0>
   211b0:	mov	r3, #0
   211b4:	mov	r0, r3
   211b8:	add	sp, fp, #0
   211bc:	pop	{fp}		; (ldr fp, [sp], #4)
   211c0:	bx	lr
   211c4:	push	{fp}		; (str fp, [sp, #-4]!)
   211c8:	add	fp, sp, #0
   211cc:	sub	sp, sp, #12
   211d0:	str	r0, [fp, #-8]
   211d4:	ldr	r3, [fp, #-8]
   211d8:	add	r3, r3, #0
   211dc:	cmp	r3, #127	; 0x7f
   211e0:	bhi	211ec <__assert_fail@plt+0xfe08>
   211e4:	mov	r3, #1
   211e8:	b	211f0 <__assert_fail@plt+0xfe0c>
   211ec:	mov	r3, #0
   211f0:	mov	r0, r3
   211f4:	add	sp, fp, #0
   211f8:	pop	{fp}		; (ldr fp, [sp], #4)
   211fc:	bx	lr
   21200:	push	{fp}		; (str fp, [sp, #-4]!)
   21204:	add	fp, sp, #0
   21208:	sub	sp, sp, #12
   2120c:	str	r0, [fp, #-8]
   21210:	ldr	r3, [fp, #-8]
   21214:	cmp	r3, #32
   21218:	beq	21228 <__assert_fail@plt+0xfe44>
   2121c:	ldr	r3, [fp, #-8]
   21220:	cmp	r3, #9
   21224:	bne	21230 <__assert_fail@plt+0xfe4c>
   21228:	mov	r3, #1
   2122c:	b	21234 <__assert_fail@plt+0xfe50>
   21230:	mov	r3, #0
   21234:	and	r3, r3, #1
   21238:	uxtb	r3, r3
   2123c:	mov	r0, r3
   21240:	add	sp, fp, #0
   21244:	pop	{fp}		; (ldr fp, [sp], #4)
   21248:	bx	lr
   2124c:	push	{fp}		; (str fp, [sp, #-4]!)
   21250:	add	fp, sp, #0
   21254:	sub	sp, sp, #12
   21258:	str	r0, [fp, #-8]
   2125c:	ldr	r3, [fp, #-8]
   21260:	cmp	r3, #0
   21264:	blt	21280 <__assert_fail@plt+0xfe9c>
   21268:	cmp	r3, #31
   2126c:	ble	21278 <__assert_fail@plt+0xfe94>
   21270:	cmp	r3, #127	; 0x7f
   21274:	bne	21280 <__assert_fail@plt+0xfe9c>
   21278:	mov	r3, #1
   2127c:	b	21284 <__assert_fail@plt+0xfea0>
   21280:	mov	r3, #0
   21284:	mov	r0, r3
   21288:	add	sp, fp, #0
   2128c:	pop	{fp}		; (ldr fp, [sp], #4)
   21290:	bx	lr
   21294:	push	{fp}		; (str fp, [sp, #-4]!)
   21298:	add	fp, sp, #0
   2129c:	sub	sp, sp, #12
   212a0:	str	r0, [fp, #-8]
   212a4:	ldr	r3, [fp, #-8]
   212a8:	sub	r3, r3, #48	; 0x30
   212ac:	cmp	r3, #9
   212b0:	bhi	212bc <__assert_fail@plt+0xfed8>
   212b4:	mov	r3, #1
   212b8:	b	212c0 <__assert_fail@plt+0xfedc>
   212bc:	mov	r3, #0
   212c0:	mov	r0, r3
   212c4:	add	sp, fp, #0
   212c8:	pop	{fp}		; (ldr fp, [sp], #4)
   212cc:	bx	lr
   212d0:	push	{fp}		; (str fp, [sp, #-4]!)
   212d4:	add	fp, sp, #0
   212d8:	sub	sp, sp, #12
   212dc:	str	r0, [fp, #-8]
   212e0:	ldr	r3, [fp, #-8]
   212e4:	sub	r3, r3, #33	; 0x21
   212e8:	cmp	r3, #93	; 0x5d
   212ec:	bhi	212f8 <__assert_fail@plt+0xff14>
   212f0:	mov	r3, #1
   212f4:	b	212fc <__assert_fail@plt+0xff18>
   212f8:	mov	r3, #0
   212fc:	mov	r0, r3
   21300:	add	sp, fp, #0
   21304:	pop	{fp}		; (ldr fp, [sp], #4)
   21308:	bx	lr
   2130c:	push	{fp}		; (str fp, [sp, #-4]!)
   21310:	add	fp, sp, #0
   21314:	sub	sp, sp, #12
   21318:	str	r0, [fp, #-8]
   2131c:	ldr	r3, [fp, #-8]
   21320:	sub	r3, r3, #97	; 0x61
   21324:	cmp	r3, #25
   21328:	bhi	21334 <__assert_fail@plt+0xff50>
   2132c:	mov	r3, #1
   21330:	b	21338 <__assert_fail@plt+0xff54>
   21334:	mov	r3, #0
   21338:	mov	r0, r3
   2133c:	add	sp, fp, #0
   21340:	pop	{fp}		; (ldr fp, [sp], #4)
   21344:	bx	lr
   21348:	push	{fp}		; (str fp, [sp, #-4]!)
   2134c:	add	fp, sp, #0
   21350:	sub	sp, sp, #12
   21354:	str	r0, [fp, #-8]
   21358:	ldr	r3, [fp, #-8]
   2135c:	sub	r3, r3, #32
   21360:	cmp	r3, #94	; 0x5e
   21364:	bhi	21370 <__assert_fail@plt+0xff8c>
   21368:	mov	r3, #1
   2136c:	b	21374 <__assert_fail@plt+0xff90>
   21370:	mov	r3, #0
   21374:	mov	r0, r3
   21378:	add	sp, fp, #0
   2137c:	pop	{fp}		; (ldr fp, [sp], #4)
   21380:	bx	lr
   21384:	push	{fp}		; (str fp, [sp, #-4]!)
   21388:	add	fp, sp, #0
   2138c:	sub	sp, sp, #12
   21390:	str	r0, [fp, #-8]
   21394:	ldr	r3, [fp, #-8]
   21398:	cmp	r3, #64	; 0x40
   2139c:	bgt	213b8 <__assert_fail@plt+0xffd4>
   213a0:	cmp	r3, #58	; 0x3a
   213a4:	bge	213d4 <__assert_fail@plt+0xfff0>
   213a8:	sub	r3, r3, #33	; 0x21
   213ac:	cmp	r3, #14
   213b0:	bhi	213dc <__assert_fail@plt+0xfff8>
   213b4:	b	213d4 <__assert_fail@plt+0xfff0>
   213b8:	cmp	r3, #91	; 0x5b
   213bc:	blt	213dc <__assert_fail@plt+0xfff8>
   213c0:	cmp	r3, #96	; 0x60
   213c4:	ble	213d4 <__assert_fail@plt+0xfff0>
   213c8:	sub	r3, r3, #123	; 0x7b
   213cc:	cmp	r3, #3
   213d0:	bhi	213dc <__assert_fail@plt+0xfff8>
   213d4:	mov	r3, #1
   213d8:	b	213e0 <__assert_fail@plt+0xfffc>
   213dc:	mov	r3, #0
   213e0:	mov	r0, r3
   213e4:	add	sp, fp, #0
   213e8:	pop	{fp}		; (ldr fp, [sp], #4)
   213ec:	bx	lr
   213f0:	push	{fp}		; (str fp, [sp, #-4]!)
   213f4:	add	fp, sp, #0
   213f8:	sub	sp, sp, #12
   213fc:	str	r0, [fp, #-8]
   21400:	ldr	r3, [fp, #-8]
   21404:	cmp	r3, #9
   21408:	blt	21424 <__assert_fail@plt+0x10040>
   2140c:	cmp	r3, #13
   21410:	ble	2141c <__assert_fail@plt+0x10038>
   21414:	cmp	r3, #32
   21418:	bne	21424 <__assert_fail@plt+0x10040>
   2141c:	mov	r3, #1
   21420:	b	21428 <__assert_fail@plt+0x10044>
   21424:	mov	r3, #0
   21428:	mov	r0, r3
   2142c:	add	sp, fp, #0
   21430:	pop	{fp}		; (ldr fp, [sp], #4)
   21434:	bx	lr
   21438:	push	{fp}		; (str fp, [sp, #-4]!)
   2143c:	add	fp, sp, #0
   21440:	sub	sp, sp, #12
   21444:	str	r0, [fp, #-8]
   21448:	ldr	r3, [fp, #-8]
   2144c:	sub	r3, r3, #65	; 0x41
   21450:	cmp	r3, #25
   21454:	bhi	21460 <__assert_fail@plt+0x1007c>
   21458:	mov	r3, #1
   2145c:	b	21464 <__assert_fail@plt+0x10080>
   21460:	mov	r3, #0
   21464:	mov	r0, r3
   21468:	add	sp, fp, #0
   2146c:	pop	{fp}		; (ldr fp, [sp], #4)
   21470:	bx	lr
   21474:	push	{fp}		; (str fp, [sp, #-4]!)
   21478:	add	fp, sp, #0
   2147c:	sub	sp, sp, #12
   21480:	str	r0, [fp, #-8]
   21484:	ldr	r3, [fp, #-8]
   21488:	sub	r3, r3, #48	; 0x30
   2148c:	cmp	r3, #54	; 0x36
   21490:	addls	pc, pc, r3, lsl #2
   21494:	b	2157c <__assert_fail@plt+0x10198>
   21498:	b	21574 <__assert_fail@plt+0x10190>
   2149c:	b	21574 <__assert_fail@plt+0x10190>
   214a0:	b	21574 <__assert_fail@plt+0x10190>
   214a4:	b	21574 <__assert_fail@plt+0x10190>
   214a8:	b	21574 <__assert_fail@plt+0x10190>
   214ac:	b	21574 <__assert_fail@plt+0x10190>
   214b0:	b	21574 <__assert_fail@plt+0x10190>
   214b4:	b	21574 <__assert_fail@plt+0x10190>
   214b8:	b	21574 <__assert_fail@plt+0x10190>
   214bc:	b	21574 <__assert_fail@plt+0x10190>
   214c0:	b	2157c <__assert_fail@plt+0x10198>
   214c4:	b	2157c <__assert_fail@plt+0x10198>
   214c8:	b	2157c <__assert_fail@plt+0x10198>
   214cc:	b	2157c <__assert_fail@plt+0x10198>
   214d0:	b	2157c <__assert_fail@plt+0x10198>
   214d4:	b	2157c <__assert_fail@plt+0x10198>
   214d8:	b	2157c <__assert_fail@plt+0x10198>
   214dc:	b	21574 <__assert_fail@plt+0x10190>
   214e0:	b	21574 <__assert_fail@plt+0x10190>
   214e4:	b	21574 <__assert_fail@plt+0x10190>
   214e8:	b	21574 <__assert_fail@plt+0x10190>
   214ec:	b	21574 <__assert_fail@plt+0x10190>
   214f0:	b	21574 <__assert_fail@plt+0x10190>
   214f4:	b	2157c <__assert_fail@plt+0x10198>
   214f8:	b	2157c <__assert_fail@plt+0x10198>
   214fc:	b	2157c <__assert_fail@plt+0x10198>
   21500:	b	2157c <__assert_fail@plt+0x10198>
   21504:	b	2157c <__assert_fail@plt+0x10198>
   21508:	b	2157c <__assert_fail@plt+0x10198>
   2150c:	b	2157c <__assert_fail@plt+0x10198>
   21510:	b	2157c <__assert_fail@plt+0x10198>
   21514:	b	2157c <__assert_fail@plt+0x10198>
   21518:	b	2157c <__assert_fail@plt+0x10198>
   2151c:	b	2157c <__assert_fail@plt+0x10198>
   21520:	b	2157c <__assert_fail@plt+0x10198>
   21524:	b	2157c <__assert_fail@plt+0x10198>
   21528:	b	2157c <__assert_fail@plt+0x10198>
   2152c:	b	2157c <__assert_fail@plt+0x10198>
   21530:	b	2157c <__assert_fail@plt+0x10198>
   21534:	b	2157c <__assert_fail@plt+0x10198>
   21538:	b	2157c <__assert_fail@plt+0x10198>
   2153c:	b	2157c <__assert_fail@plt+0x10198>
   21540:	b	2157c <__assert_fail@plt+0x10198>
   21544:	b	2157c <__assert_fail@plt+0x10198>
   21548:	b	2157c <__assert_fail@plt+0x10198>
   2154c:	b	2157c <__assert_fail@plt+0x10198>
   21550:	b	2157c <__assert_fail@plt+0x10198>
   21554:	b	2157c <__assert_fail@plt+0x10198>
   21558:	b	2157c <__assert_fail@plt+0x10198>
   2155c:	b	21574 <__assert_fail@plt+0x10190>
   21560:	b	21574 <__assert_fail@plt+0x10190>
   21564:	b	21574 <__assert_fail@plt+0x10190>
   21568:	b	21574 <__assert_fail@plt+0x10190>
   2156c:	b	21574 <__assert_fail@plt+0x10190>
   21570:	b	21574 <__assert_fail@plt+0x10190>
   21574:	mov	r3, #1
   21578:	b	21580 <__assert_fail@plt+0x1019c>
   2157c:	mov	r3, #0
   21580:	mov	r0, r3
   21584:	add	sp, fp, #0
   21588:	pop	{fp}		; (ldr fp, [sp], #4)
   2158c:	bx	lr
   21590:	push	{fp}		; (str fp, [sp, #-4]!)
   21594:	add	fp, sp, #0
   21598:	sub	sp, sp, #12
   2159c:	str	r0, [fp, #-8]
   215a0:	ldr	r3, [fp, #-8]
   215a4:	sub	r3, r3, #65	; 0x41
   215a8:	cmp	r3, #25
   215ac:	bhi	215bc <__assert_fail@plt+0x101d8>
   215b0:	ldr	r3, [fp, #-8]
   215b4:	add	r3, r3, #32
   215b8:	b	215c0 <__assert_fail@plt+0x101dc>
   215bc:	ldr	r3, [fp, #-8]
   215c0:	mov	r0, r3
   215c4:	add	sp, fp, #0
   215c8:	pop	{fp}		; (ldr fp, [sp], #4)
   215cc:	bx	lr
   215d0:	push	{fp}		; (str fp, [sp, #-4]!)
   215d4:	add	fp, sp, #0
   215d8:	sub	sp, sp, #12
   215dc:	str	r0, [fp, #-8]
   215e0:	ldr	r3, [fp, #-8]
   215e4:	sub	r3, r3, #97	; 0x61
   215e8:	cmp	r3, #25
   215ec:	bhi	215fc <__assert_fail@plt+0x10218>
   215f0:	ldr	r3, [fp, #-8]
   215f4:	sub	r3, r3, #32
   215f8:	b	21600 <__assert_fail@plt+0x1021c>
   215fc:	ldr	r3, [fp, #-8]
   21600:	mov	r0, r3
   21604:	add	sp, fp, #0
   21608:	pop	{fp}		; (ldr fp, [sp], #4)
   2160c:	bx	lr
   21610:	subs	r2, r1, #1
   21614:	bxeq	lr
   21618:	bcc	217f0 <__assert_fail@plt+0x1040c>
   2161c:	cmp	r0, r1
   21620:	bls	217d4 <__assert_fail@plt+0x103f0>
   21624:	tst	r1, r2
   21628:	beq	217e0 <__assert_fail@plt+0x103fc>
   2162c:	clz	r3, r0
   21630:	clz	r2, r1
   21634:	sub	r3, r2, r3
   21638:	rsbs	r3, r3, #31
   2163c:	addne	r3, r3, r3, lsl #1
   21640:	mov	r2, #0
   21644:	addne	pc, pc, r3, lsl #2
   21648:	nop			; (mov r0, r0)
   2164c:	cmp	r0, r1, lsl #31
   21650:	adc	r2, r2, r2
   21654:	subcs	r0, r0, r1, lsl #31
   21658:	cmp	r0, r1, lsl #30
   2165c:	adc	r2, r2, r2
   21660:	subcs	r0, r0, r1, lsl #30
   21664:	cmp	r0, r1, lsl #29
   21668:	adc	r2, r2, r2
   2166c:	subcs	r0, r0, r1, lsl #29
   21670:	cmp	r0, r1, lsl #28
   21674:	adc	r2, r2, r2
   21678:	subcs	r0, r0, r1, lsl #28
   2167c:	cmp	r0, r1, lsl #27
   21680:	adc	r2, r2, r2
   21684:	subcs	r0, r0, r1, lsl #27
   21688:	cmp	r0, r1, lsl #26
   2168c:	adc	r2, r2, r2
   21690:	subcs	r0, r0, r1, lsl #26
   21694:	cmp	r0, r1, lsl #25
   21698:	adc	r2, r2, r2
   2169c:	subcs	r0, r0, r1, lsl #25
   216a0:	cmp	r0, r1, lsl #24
   216a4:	adc	r2, r2, r2
   216a8:	subcs	r0, r0, r1, lsl #24
   216ac:	cmp	r0, r1, lsl #23
   216b0:	adc	r2, r2, r2
   216b4:	subcs	r0, r0, r1, lsl #23
   216b8:	cmp	r0, r1, lsl #22
   216bc:	adc	r2, r2, r2
   216c0:	subcs	r0, r0, r1, lsl #22
   216c4:	cmp	r0, r1, lsl #21
   216c8:	adc	r2, r2, r2
   216cc:	subcs	r0, r0, r1, lsl #21
   216d0:	cmp	r0, r1, lsl #20
   216d4:	adc	r2, r2, r2
   216d8:	subcs	r0, r0, r1, lsl #20
   216dc:	cmp	r0, r1, lsl #19
   216e0:	adc	r2, r2, r2
   216e4:	subcs	r0, r0, r1, lsl #19
   216e8:	cmp	r0, r1, lsl #18
   216ec:	adc	r2, r2, r2
   216f0:	subcs	r0, r0, r1, lsl #18
   216f4:	cmp	r0, r1, lsl #17
   216f8:	adc	r2, r2, r2
   216fc:	subcs	r0, r0, r1, lsl #17
   21700:	cmp	r0, r1, lsl #16
   21704:	adc	r2, r2, r2
   21708:	subcs	r0, r0, r1, lsl #16
   2170c:	cmp	r0, r1, lsl #15
   21710:	adc	r2, r2, r2
   21714:	subcs	r0, r0, r1, lsl #15
   21718:	cmp	r0, r1, lsl #14
   2171c:	adc	r2, r2, r2
   21720:	subcs	r0, r0, r1, lsl #14
   21724:	cmp	r0, r1, lsl #13
   21728:	adc	r2, r2, r2
   2172c:	subcs	r0, r0, r1, lsl #13
   21730:	cmp	r0, r1, lsl #12
   21734:	adc	r2, r2, r2
   21738:	subcs	r0, r0, r1, lsl #12
   2173c:	cmp	r0, r1, lsl #11
   21740:	adc	r2, r2, r2
   21744:	subcs	r0, r0, r1, lsl #11
   21748:	cmp	r0, r1, lsl #10
   2174c:	adc	r2, r2, r2
   21750:	subcs	r0, r0, r1, lsl #10
   21754:	cmp	r0, r1, lsl #9
   21758:	adc	r2, r2, r2
   2175c:	subcs	r0, r0, r1, lsl #9
   21760:	cmp	r0, r1, lsl #8
   21764:	adc	r2, r2, r2
   21768:	subcs	r0, r0, r1, lsl #8
   2176c:	cmp	r0, r1, lsl #7
   21770:	adc	r2, r2, r2
   21774:	subcs	r0, r0, r1, lsl #7
   21778:	cmp	r0, r1, lsl #6
   2177c:	adc	r2, r2, r2
   21780:	subcs	r0, r0, r1, lsl #6
   21784:	cmp	r0, r1, lsl #5
   21788:	adc	r2, r2, r2
   2178c:	subcs	r0, r0, r1, lsl #5
   21790:	cmp	r0, r1, lsl #4
   21794:	adc	r2, r2, r2
   21798:	subcs	r0, r0, r1, lsl #4
   2179c:	cmp	r0, r1, lsl #3
   217a0:	adc	r2, r2, r2
   217a4:	subcs	r0, r0, r1, lsl #3
   217a8:	cmp	r0, r1, lsl #2
   217ac:	adc	r2, r2, r2
   217b0:	subcs	r0, r0, r1, lsl #2
   217b4:	cmp	r0, r1, lsl #1
   217b8:	adc	r2, r2, r2
   217bc:	subcs	r0, r0, r1, lsl #1
   217c0:	cmp	r0, r1
   217c4:	adc	r2, r2, r2
   217c8:	subcs	r0, r0, r1
   217cc:	mov	r0, r2
   217d0:	bx	lr
   217d4:	moveq	r0, #1
   217d8:	movne	r0, #0
   217dc:	bx	lr
   217e0:	clz	r2, r1
   217e4:	rsb	r2, r2, #31
   217e8:	lsr	r0, r0, r2
   217ec:	bx	lr
   217f0:	cmp	r0, #0
   217f4:	mvnne	r0, #0
   217f8:	b	21b6c <__assert_fail@plt+0x10788>
   217fc:	cmp	r1, #0
   21800:	beq	217f0 <__assert_fail@plt+0x1040c>
   21804:	push	{r0, r1, lr}
   21808:	bl	21610 <__assert_fail@plt+0x1022c>
   2180c:	pop	{r1, r2, lr}
   21810:	mul	r3, r2, r0
   21814:	sub	r1, r1, r3
   21818:	bx	lr
   2181c:	cmp	r1, #0
   21820:	beq	21a2c <__assert_fail@plt+0x10648>
   21824:	eor	ip, r0, r1
   21828:	rsbmi	r1, r1, #0
   2182c:	subs	r2, r1, #1
   21830:	beq	219f8 <__assert_fail@plt+0x10614>
   21834:	movs	r3, r0
   21838:	rsbmi	r3, r0, #0
   2183c:	cmp	r3, r1
   21840:	bls	21a04 <__assert_fail@plt+0x10620>
   21844:	tst	r1, r2
   21848:	beq	21a14 <__assert_fail@plt+0x10630>
   2184c:	clz	r2, r3
   21850:	clz	r0, r1
   21854:	sub	r2, r0, r2
   21858:	rsbs	r2, r2, #31
   2185c:	addne	r2, r2, r2, lsl #1
   21860:	mov	r0, #0
   21864:	addne	pc, pc, r2, lsl #2
   21868:	nop			; (mov r0, r0)
   2186c:	cmp	r3, r1, lsl #31
   21870:	adc	r0, r0, r0
   21874:	subcs	r3, r3, r1, lsl #31
   21878:	cmp	r3, r1, lsl #30
   2187c:	adc	r0, r0, r0
   21880:	subcs	r3, r3, r1, lsl #30
   21884:	cmp	r3, r1, lsl #29
   21888:	adc	r0, r0, r0
   2188c:	subcs	r3, r3, r1, lsl #29
   21890:	cmp	r3, r1, lsl #28
   21894:	adc	r0, r0, r0
   21898:	subcs	r3, r3, r1, lsl #28
   2189c:	cmp	r3, r1, lsl #27
   218a0:	adc	r0, r0, r0
   218a4:	subcs	r3, r3, r1, lsl #27
   218a8:	cmp	r3, r1, lsl #26
   218ac:	adc	r0, r0, r0
   218b0:	subcs	r3, r3, r1, lsl #26
   218b4:	cmp	r3, r1, lsl #25
   218b8:	adc	r0, r0, r0
   218bc:	subcs	r3, r3, r1, lsl #25
   218c0:	cmp	r3, r1, lsl #24
   218c4:	adc	r0, r0, r0
   218c8:	subcs	r3, r3, r1, lsl #24
   218cc:	cmp	r3, r1, lsl #23
   218d0:	adc	r0, r0, r0
   218d4:	subcs	r3, r3, r1, lsl #23
   218d8:	cmp	r3, r1, lsl #22
   218dc:	adc	r0, r0, r0
   218e0:	subcs	r3, r3, r1, lsl #22
   218e4:	cmp	r3, r1, lsl #21
   218e8:	adc	r0, r0, r0
   218ec:	subcs	r3, r3, r1, lsl #21
   218f0:	cmp	r3, r1, lsl #20
   218f4:	adc	r0, r0, r0
   218f8:	subcs	r3, r3, r1, lsl #20
   218fc:	cmp	r3, r1, lsl #19
   21900:	adc	r0, r0, r0
   21904:	subcs	r3, r3, r1, lsl #19
   21908:	cmp	r3, r1, lsl #18
   2190c:	adc	r0, r0, r0
   21910:	subcs	r3, r3, r1, lsl #18
   21914:	cmp	r3, r1, lsl #17
   21918:	adc	r0, r0, r0
   2191c:	subcs	r3, r3, r1, lsl #17
   21920:	cmp	r3, r1, lsl #16
   21924:	adc	r0, r0, r0
   21928:	subcs	r3, r3, r1, lsl #16
   2192c:	cmp	r3, r1, lsl #15
   21930:	adc	r0, r0, r0
   21934:	subcs	r3, r3, r1, lsl #15
   21938:	cmp	r3, r1, lsl #14
   2193c:	adc	r0, r0, r0
   21940:	subcs	r3, r3, r1, lsl #14
   21944:	cmp	r3, r1, lsl #13
   21948:	adc	r0, r0, r0
   2194c:	subcs	r3, r3, r1, lsl #13
   21950:	cmp	r3, r1, lsl #12
   21954:	adc	r0, r0, r0
   21958:	subcs	r3, r3, r1, lsl #12
   2195c:	cmp	r3, r1, lsl #11
   21960:	adc	r0, r0, r0
   21964:	subcs	r3, r3, r1, lsl #11
   21968:	cmp	r3, r1, lsl #10
   2196c:	adc	r0, r0, r0
   21970:	subcs	r3, r3, r1, lsl #10
   21974:	cmp	r3, r1, lsl #9
   21978:	adc	r0, r0, r0
   2197c:	subcs	r3, r3, r1, lsl #9
   21980:	cmp	r3, r1, lsl #8
   21984:	adc	r0, r0, r0
   21988:	subcs	r3, r3, r1, lsl #8
   2198c:	cmp	r3, r1, lsl #7
   21990:	adc	r0, r0, r0
   21994:	subcs	r3, r3, r1, lsl #7
   21998:	cmp	r3, r1, lsl #6
   2199c:	adc	r0, r0, r0
   219a0:	subcs	r3, r3, r1, lsl #6
   219a4:	cmp	r3, r1, lsl #5
   219a8:	adc	r0, r0, r0
   219ac:	subcs	r3, r3, r1, lsl #5
   219b0:	cmp	r3, r1, lsl #4
   219b4:	adc	r0, r0, r0
   219b8:	subcs	r3, r3, r1, lsl #4
   219bc:	cmp	r3, r1, lsl #3
   219c0:	adc	r0, r0, r0
   219c4:	subcs	r3, r3, r1, lsl #3
   219c8:	cmp	r3, r1, lsl #2
   219cc:	adc	r0, r0, r0
   219d0:	subcs	r3, r3, r1, lsl #2
   219d4:	cmp	r3, r1, lsl #1
   219d8:	adc	r0, r0, r0
   219dc:	subcs	r3, r3, r1, lsl #1
   219e0:	cmp	r3, r1
   219e4:	adc	r0, r0, r0
   219e8:	subcs	r3, r3, r1
   219ec:	cmp	ip, #0
   219f0:	rsbmi	r0, r0, #0
   219f4:	bx	lr
   219f8:	teq	ip, r0
   219fc:	rsbmi	r0, r0, #0
   21a00:	bx	lr
   21a04:	movcc	r0, #0
   21a08:	asreq	r0, ip, #31
   21a0c:	orreq	r0, r0, #1
   21a10:	bx	lr
   21a14:	clz	r2, r1
   21a18:	rsb	r2, r2, #31
   21a1c:	cmp	ip, #0
   21a20:	lsr	r0, r3, r2
   21a24:	rsbmi	r0, r0, #0
   21a28:	bx	lr
   21a2c:	cmp	r0, #0
   21a30:	mvngt	r0, #-2147483648	; 0x80000000
   21a34:	movlt	r0, #-2147483648	; 0x80000000
   21a38:	b	21b6c <__assert_fail@plt+0x10788>
   21a3c:	cmp	r1, #0
   21a40:	beq	21a2c <__assert_fail@plt+0x10648>
   21a44:	push	{r0, r1, lr}
   21a48:	bl	21824 <__assert_fail@plt+0x10440>
   21a4c:	pop	{r1, r2, lr}
   21a50:	mul	r3, r2, r0
   21a54:	sub	r1, r1, r3
   21a58:	bx	lr
   21a5c:	cmp	r3, #0
   21a60:	cmpeq	r2, #0
   21a64:	bne	21a88 <__assert_fail@plt+0x106a4>
   21a68:	cmp	r1, #0
   21a6c:	movlt	r1, #-2147483648	; 0x80000000
   21a70:	movlt	r0, #0
   21a74:	blt	21a84 <__assert_fail@plt+0x106a0>
   21a78:	cmpeq	r0, #0
   21a7c:	mvnne	r1, #-2147483648	; 0x80000000
   21a80:	mvnne	r0, #0
   21a84:	b	21b6c <__assert_fail@plt+0x10788>
   21a88:	sub	sp, sp, #8
   21a8c:	push	{sp, lr}
   21a90:	cmp	r1, #0
   21a94:	blt	21ab4 <__assert_fail@plt+0x106d0>
   21a98:	cmp	r3, #0
   21a9c:	blt	21ae8 <__assert_fail@plt+0x10704>
   21aa0:	bl	21b7c <__assert_fail@plt+0x10798>
   21aa4:	ldr	lr, [sp, #4]
   21aa8:	add	sp, sp, #8
   21aac:	pop	{r2, r3}
   21ab0:	bx	lr
   21ab4:	rsbs	r0, r0, #0
   21ab8:	sbc	r1, r1, r1, lsl #1
   21abc:	cmp	r3, #0
   21ac0:	blt	21b0c <__assert_fail@plt+0x10728>
   21ac4:	bl	21b7c <__assert_fail@plt+0x10798>
   21ac8:	ldr	lr, [sp, #4]
   21acc:	add	sp, sp, #8
   21ad0:	pop	{r2, r3}
   21ad4:	rsbs	r0, r0, #0
   21ad8:	sbc	r1, r1, r1, lsl #1
   21adc:	rsbs	r2, r2, #0
   21ae0:	sbc	r3, r3, r3, lsl #1
   21ae4:	bx	lr
   21ae8:	rsbs	r2, r2, #0
   21aec:	sbc	r3, r3, r3, lsl #1
   21af0:	bl	21b7c <__assert_fail@plt+0x10798>
   21af4:	ldr	lr, [sp, #4]
   21af8:	add	sp, sp, #8
   21afc:	pop	{r2, r3}
   21b00:	rsbs	r0, r0, #0
   21b04:	sbc	r1, r1, r1, lsl #1
   21b08:	bx	lr
   21b0c:	rsbs	r2, r2, #0
   21b10:	sbc	r3, r3, r3, lsl #1
   21b14:	bl	21b7c <__assert_fail@plt+0x10798>
   21b18:	ldr	lr, [sp, #4]
   21b1c:	add	sp, sp, #8
   21b20:	pop	{r2, r3}
   21b24:	rsbs	r2, r2, #0
   21b28:	sbc	r3, r3, r3, lsl #1
   21b2c:	bx	lr
   21b30:	cmp	r3, #0
   21b34:	cmpeq	r2, #0
   21b38:	bne	21b50 <__assert_fail@plt+0x1076c>
   21b3c:	cmp	r1, #0
   21b40:	cmpeq	r0, #0
   21b44:	mvnne	r1, #0
   21b48:	mvnne	r0, #0
   21b4c:	b	21b6c <__assert_fail@plt+0x10788>
   21b50:	sub	sp, sp, #8
   21b54:	push	{sp, lr}
   21b58:	bl	21b7c <__assert_fail@plt+0x10798>
   21b5c:	ldr	lr, [sp, #4]
   21b60:	add	sp, sp, #8
   21b64:	pop	{r2, r3}
   21b68:	bx	lr
   21b6c:	push	{r1, lr}
   21b70:	mov	r0, #8
   21b74:	bl	1109c <raise@plt>
   21b78:	pop	{r1, pc}
   21b7c:	cmp	r1, r3
   21b80:	push	{r4, r5, r6, r7, r8, r9, lr}
   21b84:	cmpeq	r0, r2
   21b88:	mov	r4, r0
   21b8c:	mov	r5, r1
   21b90:	ldr	r9, [sp, #28]
   21b94:	movcc	r0, #0
   21b98:	movcc	r1, #0
   21b9c:	bcc	21c94 <__assert_fail@plt+0x108b0>
   21ba0:	cmp	r3, #0
   21ba4:	clzeq	ip, r2
   21ba8:	clzne	ip, r3
   21bac:	addeq	ip, ip, #32
   21bb0:	cmp	r5, #0
   21bb4:	clzeq	r1, r4
   21bb8:	addeq	r1, r1, #32
   21bbc:	clzne	r1, r5
   21bc0:	sub	ip, ip, r1
   21bc4:	sub	lr, ip, #32
   21bc8:	lsl	r7, r3, ip
   21bcc:	rsb	r8, ip, #32
   21bd0:	orr	r7, r7, r2, lsl lr
   21bd4:	orr	r7, r7, r2, lsr r8
   21bd8:	lsl	r6, r2, ip
   21bdc:	cmp	r5, r7
   21be0:	cmpeq	r4, r6
   21be4:	movcc	r0, #0
   21be8:	movcc	r1, #0
   21bec:	bcc	21c08 <__assert_fail@plt+0x10824>
   21bf0:	mov	r3, #1
   21bf4:	subs	r4, r4, r6
   21bf8:	lsl	r1, r3, lr
   21bfc:	lsl	r0, r3, ip
   21c00:	orr	r1, r1, r3, lsr r8
   21c04:	sbc	r5, r5, r7
   21c08:	cmp	ip, #0
   21c0c:	beq	21c94 <__assert_fail@plt+0x108b0>
   21c10:	lsrs	r3, r7, #1
   21c14:	rrx	r2, r6
   21c18:	mov	r6, ip
   21c1c:	b	21c40 <__assert_fail@plt+0x1085c>
   21c20:	subs	r4, r4, r2
   21c24:	sbc	r5, r5, r3
   21c28:	adds	r4, r4, r4
   21c2c:	adc	r5, r5, r5
   21c30:	adds	r4, r4, #1
   21c34:	adc	r5, r5, #0
   21c38:	subs	r6, r6, #1
   21c3c:	beq	21c5c <__assert_fail@plt+0x10878>
   21c40:	cmp	r5, r3
   21c44:	cmpeq	r4, r2
   21c48:	bcs	21c20 <__assert_fail@plt+0x1083c>
   21c4c:	adds	r4, r4, r4
   21c50:	adc	r5, r5, r5
   21c54:	subs	r6, r6, #1
   21c58:	bne	21c40 <__assert_fail@plt+0x1085c>
   21c5c:	lsr	r6, r4, ip
   21c60:	lsr	r7, r5, ip
   21c64:	orr	r6, r6, r5, lsl r8
   21c68:	adds	r2, r0, r4
   21c6c:	orr	r6, r6, r5, lsr lr
   21c70:	adc	r3, r1, r5
   21c74:	lsl	r1, r7, ip
   21c78:	orr	r1, r1, r6, lsl lr
   21c7c:	lsl	r0, r6, ip
   21c80:	orr	r1, r1, r6, lsr r8
   21c84:	subs	r0, r2, r0
   21c88:	mov	r4, r6
   21c8c:	mov	r5, r7
   21c90:	sbc	r1, r3, r1
   21c94:	cmp	r9, #0
   21c98:	popeq	{r4, r5, r6, r7, r8, r9, pc}
   21c9c:	strd	r4, [r9]
   21ca0:	pop	{r4, r5, r6, r7, r8, r9, pc}
   21ca4:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   21ca8:	mov	r7, r0
   21cac:	ldr	r6, [pc, #72]	; 21cfc <__assert_fail@plt+0x10918>
   21cb0:	ldr	r5, [pc, #72]	; 21d00 <__assert_fail@plt+0x1091c>
   21cb4:	add	r6, pc, r6
   21cb8:	add	r5, pc, r5
   21cbc:	sub	r6, r6, r5
   21cc0:	mov	r8, r1
   21cc4:	mov	r9, r2
   21cc8:	bl	11058 <fdopen@plt-0x20>
   21ccc:	asrs	r6, r6, #2
   21cd0:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   21cd4:	mov	r4, #0
   21cd8:	add	r4, r4, #1
   21cdc:	ldr	r3, [r5], #4
   21ce0:	mov	r2, r9
   21ce4:	mov	r1, r8
   21ce8:	mov	r0, r7
   21cec:	blx	r3
   21cf0:	cmp	r6, r4
   21cf4:	bne	21cd8 <__assert_fail@plt+0x108f4>
   21cf8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   21cfc:	andeq	r2, r1, r4, asr r2
   21d00:	andeq	r2, r1, ip, asr #4
   21d04:	bx	lr
   21d08:	ldr	r3, [pc, #12]	; 21d1c <__assert_fail@plt+0x10938>
   21d0c:	mov	r1, #0
   21d10:	add	r3, pc, r3
   21d14:	ldr	r2, [r3]
   21d18:	b	112dc <__cxa_atexit@plt>
   21d1c:	andeq	r2, r1, r4, lsr #8
   21d20:	mov	r2, r1
   21d24:	mov	r1, r0
   21d28:	mov	r0, #3
   21d2c:	b	111bc <__fxstat64@plt>

Disassembly of section .fini:

00021d30 <.fini>:
   21d30:	push	{r3, lr}
   21d34:	pop	{r3, pc}
