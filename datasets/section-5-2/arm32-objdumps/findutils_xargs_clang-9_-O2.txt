
../repos/findutils/xargs/xargs:     file format elf32-littlearm


Disassembly of section .init:

00011408 <.init>:
   11408:	push	{r3, lr}
   1140c:	bl	11848 <__assert_fail@plt+0x48>
   11410:	pop	{r3, pc}

Disassembly of section .plt:

00011414 <fdopen@plt-0x14>:
   11414:	push	{lr}		; (str lr, [sp, #-4]!)
   11418:	ldr	lr, [pc, #4]	; 11424 <fdopen@plt-0x4>
   1141c:	add	lr, pc, lr
   11420:	ldr	pc, [lr, #8]!
   11424:	ldrdeq	fp, [r1], -ip

00011428 <fdopen@plt>:
   11428:	add	ip, pc, #0, 12
   1142c:	add	ip, ip, #110592	; 0x1b000
   11430:	ldr	pc, [ip, #3036]!	; 0xbdc

00011434 <calloc@plt>:
   11434:	add	ip, pc, #0, 12
   11438:	add	ip, ip, #110592	; 0x1b000
   1143c:	ldr	pc, [ip, #3028]!	; 0xbd4

00011440 <strcmp@plt>:
   11440:	add	ip, pc, #0, 12
   11444:	add	ip, ip, #110592	; 0x1b000
   11448:	ldr	pc, [ip, #3020]!	; 0xbcc

0001144c <strtol@plt>:
   1144c:	add	ip, pc, #0, 12
   11450:	add	ip, ip, #110592	; 0x1b000
   11454:	ldr	pc, [ip, #3012]!	; 0xbc4

00011458 <printf@plt>:
   11458:	add	ip, pc, #0, 12
   1145c:	add	ip, ip, #110592	; 0x1b000
   11460:	ldr	pc, [ip, #3004]!	; 0xbbc

00011464 <read@plt>:
   11464:	add	ip, pc, #0, 12
   11468:	add	ip, ip, #110592	; 0x1b000
   1146c:	ldr	pc, [ip, #2996]!	; 0xbb4

00011470 <fflush@plt>:
   11470:	add	ip, pc, #0, 12
   11474:	add	ip, ip, #110592	; 0x1b000
   11478:	ldr	pc, [ip, #2988]!	; 0xbac

0001147c <wcwidth@plt>:
   1147c:	add	ip, pc, #0, 12
   11480:	add	ip, ip, #110592	; 0x1b000
   11484:	ldr	pc, [ip, #2980]!	; 0xba4

00011488 <free@plt>:
   11488:	add	ip, pc, #0, 12
   1148c:	add	ip, ip, #110592	; 0x1b000
   11490:	ldr	pc, [ip, #2972]!	; 0xb9c

00011494 <ferror@plt>:
   11494:	add	ip, pc, #0, 12
   11498:	add	ip, ip, #110592	; 0x1b000
   1149c:	ldr	pc, [ip, #2964]!	; 0xb94

000114a0 <_exit@plt>:
   114a0:	add	ip, pc, #0, 12
   114a4:	add	ip, ip, #110592	; 0x1b000
   114a8:	ldr	pc, [ip, #2956]!	; 0xb8c

000114ac <memcpy@plt>:
   114ac:	add	ip, pc, #0, 12
   114b0:	add	ip, ip, #110592	; 0x1b000
   114b4:	ldr	pc, [ip, #2948]!	; 0xb84

000114b8 <execvp@plt>:
   114b8:	add	ip, pc, #0, 12
   114bc:	add	ip, ip, #110592	; 0x1b000
   114c0:	ldr	pc, [ip, #2940]!	; 0xb7c

000114c4 <mbsinit@plt>:
   114c4:	add	ip, pc, #0, 12
   114c8:	add	ip, ip, #110592	; 0x1b000
   114cc:	ldr	pc, [ip, #2932]!	; 0xb74

000114d0 <signal@plt>:
   114d0:	add	ip, pc, #0, 12
   114d4:	add	ip, ip, #110592	; 0x1b000
   114d8:	ldr	pc, [ip, #2924]!	; 0xb6c

000114dc <dcgettext@plt>:
   114dc:	add	ip, pc, #0, 12
   114e0:	add	ip, ip, #110592	; 0x1b000
   114e4:	ldr	pc, [ip, #2916]!	; 0xb64

000114e8 <sysconf@plt>:
   114e8:	add	ip, pc, #0, 12
   114ec:	add	ip, ip, #110592	; 0x1b000
   114f0:	ldr	pc, [ip, #2908]!	; 0xb5c

000114f4 <dup2@plt>:
   114f4:	add	ip, pc, #0, 12
   114f8:	add	ip, ip, #110592	; 0x1b000
   114fc:	ldr	pc, [ip, #2900]!	; 0xb54

00011500 <getrlimit64@plt>:
   11500:	add	ip, pc, #0, 12
   11504:	add	ip, ip, #110592	; 0x1b000
   11508:	ldr	pc, [ip, #2892]!	; 0xb4c

0001150c <realloc@plt>:
   1150c:	add	ip, pc, #0, 12
   11510:	add	ip, ip, #110592	; 0x1b000
   11514:	ldr	pc, [ip, #2884]!	; 0xb44

00011518 <textdomain@plt>:
   11518:	add	ip, pc, #0, 12
   1151c:	add	ip, ip, #110592	; 0x1b000
   11520:	ldr	pc, [ip, #2876]!	; 0xb3c

00011524 <iswcntrl@plt>:
   11524:	add	ip, pc, #0, 12
   11528:	add	ip, ip, #110592	; 0x1b000
   1152c:	ldr	pc, [ip, #2868]!	; 0xb34

00011530 <iswprint@plt>:
   11530:	add	ip, pc, #0, 12
   11534:	add	ip, ip, #110592	; 0x1b000
   11538:	ldr	pc, [ip, #2860]!	; 0xb2c

0001153c <poll@plt>:
   1153c:	add	ip, pc, #0, 12
   11540:	add	ip, ip, #110592	; 0x1b000
   11544:	ldr	pc, [ip, #2852]!	; 0xb24

00011548 <sigaction@plt>:
   11548:	add	ip, pc, #0, 12
   1154c:	add	ip, ip, #110592	; 0x1b000
   11550:	ldr	pc, [ip, #2844]!	; 0xb1c

00011554 <fwrite@plt>:
   11554:	add	ip, pc, #0, 12
   11558:	add	ip, ip, #110592	; 0x1b000
   1155c:	ldr	pc, [ip, #2836]!	; 0xb14

00011560 <lseek64@plt>:
   11560:	add	ip, pc, #0, 12
   11564:	add	ip, ip, #110592	; 0x1b000
   11568:	ldr	pc, [ip, #2828]!	; 0xb0c

0001156c <waitpid@plt>:
   1156c:	add	ip, pc, #0, 12
   11570:	add	ip, ip, #110592	; 0x1b000
   11574:	ldr	pc, [ip, #2820]!	; 0xb04

00011578 <__ctype_get_mb_cur_max@plt>:
   11578:	add	ip, pc, #0, 12
   1157c:	add	ip, ip, #110592	; 0x1b000
   11580:	ldr	pc, [ip, #2812]!	; 0xafc

00011584 <strcpy@plt>:
   11584:	add	ip, pc, #0, 12
   11588:	add	ip, ip, #110592	; 0x1b000
   1158c:	ldr	pc, [ip, #2804]!	; 0xaf4

00011590 <__fpending@plt>:
   11590:	add	ip, pc, #0, 12
   11594:	add	ip, ip, #110592	; 0x1b000
   11598:	ldr	pc, [ip, #2796]!	; 0xaec

0001159c <mbrtowc@plt>:
   1159c:	add	ip, pc, #0, 12
   115a0:	add	ip, ip, #110592	; 0x1b000
   115a4:	ldr	pc, [ip, #2788]!	; 0xae4

000115a8 <error@plt>:
   115a8:	add	ip, pc, #0, 12
   115ac:	add	ip, ip, #110592	; 0x1b000
   115b0:	ldr	pc, [ip, #2780]!	; 0xadc

000115b4 <opendir@plt>:
   115b4:	add	ip, pc, #0, 12
   115b8:	add	ip, ip, #110592	; 0x1b000
   115bc:	ldr	pc, [ip, #2772]!	; 0xad4

000115c0 <open64@plt>:
   115c0:	add	ip, pc, #0, 12
   115c4:	add	ip, ip, #110592	; 0x1b000
   115c8:	ldr	pc, [ip, #2764]!	; 0xacc

000115cc <getenv@plt>:
   115cc:	add	ip, pc, #0, 12
   115d0:	add	ip, ip, #110592	; 0x1b000
   115d4:	ldr	pc, [ip, #2756]!	; 0xac4

000115d8 <malloc@plt>:
   115d8:	add	ip, pc, #0, 12
   115dc:	add	ip, ip, #110592	; 0x1b000
   115e0:	ldr	pc, [ip, #2748]!	; 0xabc

000115e4 <__libc_start_main@plt>:
   115e4:	add	ip, pc, #0, 12
   115e8:	add	ip, ip, #110592	; 0x1b000
   115ec:	ldr	pc, [ip, #2740]!	; 0xab4

000115f0 <__freading@plt>:
   115f0:	add	ip, pc, #0, 12
   115f4:	add	ip, ip, #110592	; 0x1b000
   115f8:	ldr	pc, [ip, #2732]!	; 0xaac

000115fc <__gmon_start__@plt>:
   115fc:	add	ip, pc, #0, 12
   11600:	add	ip, ip, #110592	; 0x1b000
   11604:	ldr	pc, [ip, #2724]!	; 0xaa4

00011608 <getopt_long@plt>:
   11608:	add	ip, pc, #0, 12
   1160c:	add	ip, ip, #110592	; 0x1b000
   11610:	ldr	pc, [ip, #2716]!	; 0xa9c

00011614 <__ctype_b_loc@plt>:
   11614:	add	ip, pc, #0, 12
   11618:	add	ip, ip, #110592	; 0x1b000
   1161c:	ldr	pc, [ip, #2708]!	; 0xa94

00011620 <getpid@plt>:
   11620:	add	ip, pc, #0, 12
   11624:	add	ip, ip, #110592	; 0x1b000
   11628:	ldr	pc, [ip, #2700]!	; 0xa8c

0001162c <exit@plt>:
   1162c:	add	ip, pc, #0, 12
   11630:	add	ip, ip, #110592	; 0x1b000
   11634:	ldr	pc, [ip, #2692]!	; 0xa84

00011638 <bcmp@plt>:
   11638:	add	ip, pc, #0, 12
   1163c:	add	ip, ip, #110592	; 0x1b000
   11640:	ldr	pc, [ip, #2684]!	; 0xa7c

00011644 <strtoul@plt>:
   11644:	add	ip, pc, #0, 12
   11648:	add	ip, ip, #110592	; 0x1b000
   1164c:	ldr	pc, [ip, #2676]!	; 0xa74

00011650 <strlen@plt>:
   11650:	add	ip, pc, #0, 12
   11654:	add	ip, ip, #110592	; 0x1b000
   11658:	ldr	pc, [ip, #2668]!	; 0xa6c

0001165c <strchr@plt>:
   1165c:	add	ip, pc, #0, 12
   11660:	add	ip, ip, #110592	; 0x1b000
   11664:	ldr	pc, [ip, #2660]!	; 0xa64

00011668 <setenv@plt>:
   11668:	add	ip, pc, #0, 12
   1166c:	add	ip, ip, #110592	; 0x1b000
   11670:	ldr	pc, [ip, #2652]!	; 0xa5c

00011674 <fprintf@plt>:
   11674:	add	ip, pc, #0, 12
   11678:	add	ip, ip, #110592	; 0x1b000
   1167c:	ldr	pc, [ip, #2644]!	; 0xa54

00011680 <__errno_location@plt>:
   11680:	add	ip, pc, #0, 12
   11684:	add	ip, ip, #110592	; 0x1b000
   11688:	ldr	pc, [ip, #2636]!	; 0xa4c

0001168c <snprintf@plt>:
   1168c:	add	ip, pc, #0, 12
   11690:	add	ip, ip, #110592	; 0x1b000
   11694:	ldr	pc, [ip, #2628]!	; 0xa44

00011698 <__cxa_atexit@plt>:
   11698:	add	ip, pc, #0, 12
   1169c:	add	ip, ip, #110592	; 0x1b000
   116a0:	ldr	pc, [ip, #2620]!	; 0xa3c

000116a4 <memset@plt>:
   116a4:	add	ip, pc, #0, 12
   116a8:	add	ip, ip, #110592	; 0x1b000
   116ac:	ldr	pc, [ip, #2612]!	; 0xa34

000116b0 <strncpy@plt>:
   116b0:	add	ip, pc, #0, 12
   116b4:	add	ip, ip, #110592	; 0x1b000
   116b8:	ldr	pc, [ip, #2604]!	; 0xa2c

000116bc <write@plt>:
   116bc:	add	ip, pc, #0, 12
   116c0:	add	ip, ip, #110592	; 0x1b000
   116c4:	ldr	pc, [ip, #2596]!	; 0xa24

000116c8 <fileno@plt>:
   116c8:	add	ip, pc, #0, 12
   116cc:	add	ip, ip, #110592	; 0x1b000
   116d0:	ldr	pc, [ip, #2588]!	; 0xa1c

000116d4 <memchr@plt>:
   116d4:	add	ip, pc, #0, 12
   116d8:	add	ip, ip, #110592	; 0x1b000
   116dc:	ldr	pc, [ip, #2580]!	; 0xa14

000116e0 <fclose@plt>:
   116e0:	add	ip, pc, #0, 12
   116e4:	add	ip, ip, #110592	; 0x1b000
   116e8:	ldr	pc, [ip, #2572]!	; 0xa0c

000116ec <strnlen@plt>:
   116ec:	add	ip, pc, #0, 12
   116f0:	add	ip, ip, #110592	; 0x1b000
   116f4:	ldr	pc, [ip, #2564]!	; 0xa04

000116f8 <pipe@plt>:
   116f8:	add	ip, pc, #0, 12
   116fc:	add	ip, ip, #110592	; 0x1b000
   11700:	ldr	pc, [ip, #2556]!	; 0x9fc

00011704 <fseeko64@plt>:
   11704:	add	ip, pc, #0, 12
   11708:	add	ip, ip, #110592	; 0x1b000
   1170c:	ldr	pc, [ip, #2548]!	; 0x9f4

00011710 <fcntl64@plt>:
   11710:	add	ip, pc, #0, 12
   11714:	add	ip, ip, #110592	; 0x1b000
   11718:	ldr	pc, [ip, #2540]!	; 0x9ec

0001171c <setlocale@plt>:
   1171c:	add	ip, pc, #0, 12
   11720:	add	ip, ip, #110592	; 0x1b000
   11724:	ldr	pc, [ip, #2532]!	; 0x9e4

00011728 <sigemptyset@plt>:
   11728:	add	ip, pc, #0, 12
   1172c:	add	ip, ip, #110592	; 0x1b000
   11730:	ldr	pc, [ip, #2524]!	; 0x9dc

00011734 <fork@plt>:
   11734:	add	ip, pc, #0, 12
   11738:	add	ip, ip, #110592	; 0x1b000
   1173c:	ldr	pc, [ip, #2516]!	; 0x9d4

00011740 <strrchr@plt>:
   11740:	add	ip, pc, #0, 12
   11744:	add	ip, ip, #110592	; 0x1b000
   11748:	ldr	pc, [ip, #2508]!	; 0x9cc

0001174c <nl_langinfo@plt>:
   1174c:	add	ip, pc, #0, 12
   11750:	add	ip, ip, #110592	; 0x1b000
   11754:	ldr	pc, [ip, #2500]!	; 0x9c4

00011758 <fputc@plt>:
   11758:	add	ip, pc, #0, 12
   1175c:	add	ip, ip, #110592	; 0x1b000
   11760:	ldr	pc, [ip, #2492]!	; 0x9bc

00011764 <readdir64@plt>:
   11764:	add	ip, pc, #0, 12
   11768:	add	ip, ip, #110592	; 0x1b000
   1176c:	ldr	pc, [ip, #2484]!	; 0x9b4

00011770 <fdopendir@plt>:
   11770:	add	ip, pc, #0, 12
   11774:	add	ip, ip, #110592	; 0x1b000
   11778:	ldr	pc, [ip, #2476]!	; 0x9ac

0001177c <putc@plt>:
   1177c:	add	ip, pc, #0, 12
   11780:	add	ip, ip, #110592	; 0x1b000
   11784:	ldr	pc, [ip, #2468]!	; 0x9a4

00011788 <dirfd@plt>:
   11788:	add	ip, pc, #0, 12
   1178c:	add	ip, ip, #110592	; 0x1b000
   11790:	ldr	pc, [ip, #2460]!	; 0x99c

00011794 <bindtextdomain@plt>:
   11794:	add	ip, pc, #0, 12
   11798:	add	ip, ip, #110592	; 0x1b000
   1179c:	ldr	pc, [ip, #2452]!	; 0x994

000117a0 <isatty@plt>:
   117a0:	add	ip, pc, #0, 12
   117a4:	add	ip, ip, #110592	; 0x1b000
   117a8:	ldr	pc, [ip, #2444]!	; 0x98c

000117ac <unsetenv@plt>:
   117ac:	add	ip, pc, #0, 12
   117b0:	add	ip, ip, #110592	; 0x1b000
   117b4:	ldr	pc, [ip, #2436]!	; 0x984

000117b8 <fputs@plt>:
   117b8:	add	ip, pc, #0, 12
   117bc:	add	ip, ip, #110592	; 0x1b000
   117c0:	ldr	pc, [ip, #2428]!	; 0x97c

000117c4 <strncmp@plt>:
   117c4:	add	ip, pc, #0, 12
   117c8:	add	ip, ip, #110592	; 0x1b000
   117cc:	ldr	pc, [ip, #2420]!	; 0x974

000117d0 <abort@plt>:
   117d0:	add	ip, pc, #0, 12
   117d4:	add	ip, ip, #110592	; 0x1b000
   117d8:	ldr	pc, [ip, #2412]!	; 0x96c

000117dc <getc@plt>:
   117dc:	add	ip, pc, #0, 12
   117e0:	add	ip, ip, #110592	; 0x1b000
   117e4:	ldr	pc, [ip, #2404]!	; 0x964

000117e8 <close@plt>:
   117e8:	add	ip, pc, #0, 12
   117ec:	add	ip, ip, #110592	; 0x1b000
   117f0:	ldr	pc, [ip, #2396]!	; 0x95c

000117f4 <closedir@plt>:
   117f4:	add	ip, pc, #0, 12
   117f8:	add	ip, ip, #110592	; 0x1b000
   117fc:	ldr	pc, [ip, #2388]!	; 0x954

00011800 <__assert_fail@plt>:
   11800:	add	ip, pc, #0, 12
   11804:	add	ip, ip, #110592	; 0x1b000
   11808:	ldr	pc, [ip, #2380]!	; 0x94c

Disassembly of section .text:

0001180c <.text>:
   1180c:	mov	fp, #0
   11810:	mov	lr, #0
   11814:	pop	{r1}		; (ldr r1, [sp], #4)
   11818:	mov	r2, sp
   1181c:	push	{r2}		; (str r2, [sp, #-4]!)
   11820:	push	{r0}		; (str r0, [sp, #-4]!)
   11824:	ldr	ip, [pc, #16]	; 1183c <__assert_fail@plt+0x3c>
   11828:	push	{ip}		; (str ip, [sp, #-4]!)
   1182c:	ldr	r0, [pc, #12]	; 11840 <__assert_fail@plt+0x40>
   11830:	ldr	r3, [pc, #12]	; 11844 <__assert_fail@plt+0x44>
   11834:	bl	115e4 <__libc_start_main@plt>
   11838:	bl	117d0 <abort@plt>
   1183c:	andeq	sl, r1, ip, lsr #16
   11840:	strdeq	r1, [r1], -ip
   11844:	andeq	sl, r1, ip, asr #15
   11848:	ldr	r3, [pc, #20]	; 11864 <__assert_fail@plt+0x64>
   1184c:	ldr	r2, [pc, #20]	; 11868 <__assert_fail@plt+0x68>
   11850:	add	r3, pc, r3
   11854:	ldr	r2, [r3, r2]
   11858:	cmp	r2, #0
   1185c:	bxeq	lr
   11860:	b	115fc <__gmon_start__@plt>
   11864:	andeq	fp, r1, r8, lsr #15
   11868:	andeq	r0, r0, r8, asr r1
   1186c:	ldr	r0, [pc, #24]	; 1188c <__assert_fail@plt+0x8c>
   11870:	ldr	r3, [pc, #24]	; 11890 <__assert_fail@plt+0x90>
   11874:	cmp	r3, r0
   11878:	bxeq	lr
   1187c:	ldr	r3, [pc, #16]	; 11894 <__assert_fail@plt+0x94>
   11880:	cmp	r3, #0
   11884:	bxeq	lr
   11888:	bx	r3
   1188c:			; <UNDEFINED> instruction: 0x0002d1b8
   11890:			; <UNDEFINED> instruction: 0x0002d1b8
   11894:	andeq	r0, r0, r0
   11898:	ldr	r0, [pc, #36]	; 118c4 <__assert_fail@plt+0xc4>
   1189c:	ldr	r1, [pc, #36]	; 118c8 <__assert_fail@plt+0xc8>
   118a0:	sub	r1, r1, r0
   118a4:	asr	r1, r1, #2
   118a8:	add	r1, r1, r1, lsr #31
   118ac:	asrs	r1, r1, #1
   118b0:	bxeq	lr
   118b4:	ldr	r3, [pc, #16]	; 118cc <__assert_fail@plt+0xcc>
   118b8:	cmp	r3, #0
   118bc:	bxeq	lr
   118c0:	bx	r3
   118c4:			; <UNDEFINED> instruction: 0x0002d1b8
   118c8:			; <UNDEFINED> instruction: 0x0002d1b8
   118cc:	andeq	r0, r0, r0
   118d0:	push	{r4, lr}
   118d4:	ldr	r4, [pc, #24]	; 118f4 <__assert_fail@plt+0xf4>
   118d8:	ldrb	r3, [r4]
   118dc:	cmp	r3, #0
   118e0:	popne	{r4, pc}
   118e4:	bl	1186c <__assert_fail@plt+0x6c>
   118e8:	mov	r3, #1
   118ec:	strb	r3, [r4]
   118f0:	pop	{r4, pc}
   118f4:	andeq	sp, r2, r4, ror #3
   118f8:	b	11898 <__assert_fail@plt+0x98>
   118fc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11900:	add	fp, sp, #28
   11904:	sub	sp, sp, #212	; 0xd4
   11908:	mov	r9, r0
   1190c:	mov	r0, #0
   11910:	mov	sl, r1
   11914:	strb	r0, [fp, #-40]	; 0xffffffd8
   11918:	movw	r0, #25445	; 0x6365
   1191c:	movt	r0, #28520	; 0x6f68
   11920:	str	r0, [fp, #-44]	; 0xffffffd4
   11924:	ldr	r0, [r1]
   11928:	cmp	r0, #0
   1192c:	movweq	r0, #43097	; 0xa859
   11930:	movteq	r0, #1
   11934:	bl	16c08 <__assert_fail@plt+0x5408>
   11938:	bl	1533c <__assert_fail@plt+0x3b3c>
   1193c:	bl	11620 <getpid@plt>
   11940:	movw	r1, #53736	; 0xd1e8
   11944:	movt	r1, #2
   11948:	str	r0, [r1]
   1194c:	movw	r1, #53740	; 0xd1ec
   11950:	mov	r0, #0
   11954:	movt	r1, #2
   11958:	str	r0, [r1]
   1195c:	movw	r1, #46407	; 0xb547
   11960:	mov	r0, #6
   11964:	movt	r1, #1
   11968:	bl	1171c <setlocale@plt>
   1196c:	movw	r4, #50586	; 0xc59a
   11970:	movw	r1, #43103	; 0xa85f
   11974:	movt	r4, #1
   11978:	movt	r1, #1
   1197c:	mov	r0, r4
   11980:	bl	11794 <bindtextdomain@plt>
   11984:	mov	r0, r4
   11988:	bl	11518 <textdomain@plt>
   1198c:	movw	r0, #23660	; 0x5c6c
   11990:	movt	r0, #1
   11994:	bl	1a830 <__assert_fail@plt+0x9030>
   11998:	cmp	r0, #0
   1199c:	bne	12bf8 <__assert_fail@plt+0x13f8>
   119a0:	movw	r0, #13288	; 0x33e8
   119a4:	movt	r0, #1
   119a8:	bl	1a830 <__assert_fail@plt+0x9030>
   119ac:	cmp	r0, #0
   119b0:	bne	12bf8 <__assert_fail@plt+0x13f8>
   119b4:	movw	r5, #53744	; 0xd1f0
   119b8:	mov	r1, #2048	; 0x800
   119bc:	movt	r5, #2
   119c0:	mov	r0, r5
   119c4:	bl	15074 <__assert_fail@plt+0x3874>
   119c8:	mov	r4, r0
   119cc:	sub	r0, r0, #1
   119d0:	cmp	r0, #2
   119d4:	str	r4, [sp, #36]	; 0x24
   119d8:	bcs	119e8 <__assert_fail@plt+0x1e8>
   119dc:	movw	r0, #13444	; 0x3484
   119e0:	movt	r0, #1
   119e4:	b	11a44 <__assert_fail@plt+0x244>
   119e8:	mov	r0, #0
   119ec:	bl	114e8 <sysconf@plt>
   119f0:	cmp	r0, #1
   119f4:	blt	11a18 <__assert_fail@plt+0x218>
   119f8:	cmp	r0, #2048	; 0x800
   119fc:	ble	12d24 <__assert_fail@plt+0x1524>
   11a00:	ldr	r1, [r5, #12]
   11a04:	sub	r0, r0, #2048	; 0x800
   11a08:	cmp	r1, r0
   11a0c:	movcc	r0, r1
   11a10:	str	r0, [r5, #12]
   11a14:	b	11a1c <__assert_fail@plt+0x21c>
   11a18:	ldr	r0, [r5, #12]
   11a1c:	mov	r1, #0
   11a20:	cmp	r1, r0, lsr #11
   11a24:	beq	12cf4 <__assert_fail@plt+0x14f4>
   11a28:	movw	r0, #13488	; 0x34b0
   11a2c:	movt	r0, #1
   11a30:	str	r0, [r5, #32]
   11a34:	mov	r0, r5
   11a38:	bl	15178 <__assert_fail@plt+0x3978>
   11a3c:	movw	r0, #13284	; 0x33e4
   11a40:	movt	r0, #1
   11a44:	str	r0, [sp, #40]	; 0x28
   11a48:	movw	r0, #11668	; 0x2d94
   11a4c:	movw	r4, #49104	; 0xbfd0
   11a50:	mov	r6, #0
   11a54:	mov	r8, #1
   11a58:	movt	r0, #1
   11a5c:	movt	r4, #1
   11a60:	str	r0, [sp, #48]	; 0x30
   11a64:	movw	r0, #51315	; 0xc873
   11a68:	movt	r0, #1
   11a6c:	str	r0, [sp, #44]	; 0x2c
   11a70:	mov	r0, #1
   11a74:	str	r0, [sp, #32]
   11a78:	mov	r0, #0
   11a7c:	movw	r2, #43247	; 0xa8ef
   11a80:	mov	r7, r0
   11a84:	sub	r0, fp, #36	; 0x24
   11a88:	mov	r1, sl
   11a8c:	mov	r3, r4
   11a90:	movt	r2, #1
   11a94:	str	r0, [sp]
   11a98:	mov	r0, r9
   11a9c:	bl	11608 <getopt_long@plt>
   11aa0:	sub	r1, r0, #48	; 0x30
   11aa4:	cmp	r1, #208	; 0xd0
   11aa8:	bhi	12480 <__assert_fail@plt+0xc80>
   11aac:	add	r2, pc, #4
   11ab0:	mov	r0, #1
   11ab4:	ldr	pc, [r2, r1, lsl #2]
   11ab8:	andeq	r2, r1, r4, asr r0
   11abc:	andeq	r2, r1, r8, ror #23
   11ac0:	andeq	r2, r1, r8, ror #23
   11ac4:	andeq	r2, r1, r8, ror #23
   11ac8:	andeq	r2, r1, r8, ror #23
   11acc:	andeq	r2, r1, r8, ror #23
   11ad0:	andeq	r2, r1, r8, ror #23
   11ad4:	andeq	r2, r1, r8, ror #23
   11ad8:	andeq	r2, r1, r8, ror #23
   11adc:	andeq	r2, r1, r8, ror #23
   11ae0:	andeq	r2, r1, r8, ror #23
   11ae4:	andeq	r2, r1, r8, ror #23
   11ae8:	andeq	r2, r1, r8, ror #23
   11aec:	andeq	r2, r1, r8, ror #23
   11af0:	andeq	r2, r1, r8, ror #23
   11af4:	andeq	r2, r1, r8, ror #23
   11af8:	andeq	r2, r1, r8, ror #23
   11afc:	andeq	r2, r1, r8, ror #23
   11b00:	andeq	r2, r1, r8, ror #23
   11b04:	andeq	r2, r1, r8, ror #23
   11b08:	andeq	r2, r1, r8, ror #23
   11b0c:	strdeq	r1, [r1], -ip
   11b10:	andeq	r2, r1, r8, ror #23
   11b14:	andeq	r2, r1, r8, ror #23
   11b18:	andeq	r2, r1, r8, ror #23
   11b1c:	andeq	r1, r1, r8, lsr #28
   11b20:	andeq	r2, r1, r8, ror #23
   11b24:	andeq	r2, r1, r8, ror #23
   11b28:	andeq	r1, r1, r4, lsr #31
   11b2c:	andeq	r2, r1, r8, ror #23
   11b30:	andeq	r2, r1, r8, ror #23
   11b34:	andeq	r2, r1, r8, ror #23
   11b38:	andeq	r2, r1, r8, asr r1
   11b3c:	andeq	r2, r1, r8, ror #23
   11b40:	andeq	r2, r1, r8, ror #23
   11b44:	andeq	r1, r1, ip, ror sl
   11b48:	andeq	r2, r1, r8, ror #23
   11b4c:	andeq	r2, r1, r8, ror #23
   11b50:	andeq	r2, r1, r8, ror #23
   11b54:	andeq	r2, r1, r8, ror #23
   11b58:	andeq	r2, r1, r8, ror #23
   11b5c:	andeq	r2, r1, r8, ror #23
   11b60:	andeq	r2, r1, r8, ror #23
   11b64:	andeq	r2, r1, r8, ror #23
   11b68:	andeq	r2, r1, r8, ror #23
   11b6c:	andeq	r2, r1, r8, ror #23
   11b70:	andeq	r2, r1, r8, ror #23
   11b74:	andeq	r2, r1, r8, ror #23
   11b78:	andeq	r2, r1, r8, ror #23
   11b7c:	andeq	r2, r1, r4, asr #4
   11b80:	andeq	r2, r1, r8, ror #23
   11b84:	andeq	r2, r1, r8, ror #23
   11b88:	andeq	r2, r1, r0, lsl #2
   11b8c:	strdeq	r1, [r1], -ip
   11b90:	andeq	r2, r1, r8, ror #23
   11b94:	andeq	r2, r1, r8, ror #23
   11b98:	strdeq	r2, [r1], -r0
   11b9c:	andeq	r1, r1, r8, lsr #28
   11ba0:	andeq	r2, r1, r8, ror #23
   11ba4:	andeq	r2, r1, r8, ror #23
   11ba8:	andeq	r1, r1, r8, ror pc
   11bac:	andeq	r2, r1, r8, ror #23
   11bb0:	andeq	r2, r1, ip, lsr #3
   11bb4:	andeq	r2, r1, r8, asr #32
   11bb8:	andeq	r2, r1, ip, lsl #3
   11bbc:	andeq	r2, r1, r8, ror #23
   11bc0:	andeq	r1, r1, ip, lsl #30
   11bc4:	andeq	r2, r1, r4, ror r0
   11bc8:	andeq	r1, r1, r0, lsl #30
   11bcc:	andeq	r2, r1, r8, ror #23
   11bd0:	andeq	r2, r1, r0, lsr r6
   11bd4:	andeq	r2, r1, r8, ror #23
   11bd8:	andeq	r1, r1, ip, lsl pc
   11bdc:	andeq	r2, r1, r8, ror #23
   11be0:	andeq	r2, r1, r8, ror #23
   11be4:	andeq	r2, r1, r8, ror #23
   11be8:	andeq	r2, r1, r8, ror #23
   11bec:	andeq	r2, r1, r8, ror #23
   11bf0:	andeq	r2, r1, r8, ror #23
   11bf4:	andeq	r2, r1, r8, ror #23
   11bf8:	andeq	r2, r1, r8, ror #23
   11bfc:	andeq	r2, r1, r8, ror #23
   11c00:	andeq	r2, r1, r8, ror #23
   11c04:	andeq	r2, r1, r8, ror #23
   11c08:	andeq	r2, r1, r8, ror #23
   11c0c:	andeq	r2, r1, r8, ror #23
   11c10:	andeq	r2, r1, r8, ror #23
   11c14:	andeq	r2, r1, r8, ror #23
   11c18:	andeq	r2, r1, r8, ror #23
   11c1c:	andeq	r2, r1, r8, ror #23
   11c20:	andeq	r2, r1, r8, ror #23
   11c24:	andeq	r2, r1, r8, ror #23
   11c28:	andeq	r2, r1, r8, ror #23
   11c2c:	andeq	r2, r1, r8, ror #23
   11c30:	andeq	r2, r1, r8, ror #23
   11c34:	andeq	r2, r1, r8, ror #23
   11c38:	andeq	r2, r1, r8, ror #23
   11c3c:	andeq	r2, r1, r8, ror #23
   11c40:	andeq	r2, r1, r8, ror #23
   11c44:	andeq	r2, r1, r8, ror #23
   11c48:	andeq	r2, r1, r8, ror #23
   11c4c:	andeq	r2, r1, r8, ror #23
   11c50:	andeq	r2, r1, r8, ror #23
   11c54:	andeq	r2, r1, r8, ror #23
   11c58:	andeq	r2, r1, r8, ror #23
   11c5c:	andeq	r2, r1, r8, ror #23
   11c60:	andeq	r2, r1, r8, ror #23
   11c64:	andeq	r2, r1, r8, ror #23
   11c68:	andeq	r2, r1, r8, ror #23
   11c6c:	andeq	r2, r1, r8, ror #23
   11c70:	andeq	r2, r1, r8, ror #23
   11c74:	andeq	r2, r1, r8, ror #23
   11c78:	andeq	r2, r1, r8, ror #23
   11c7c:	andeq	r2, r1, r8, ror #23
   11c80:	andeq	r2, r1, r8, ror #23
   11c84:	andeq	r2, r1, r8, ror #23
   11c88:	andeq	r2, r1, r8, ror #23
   11c8c:	andeq	r2, r1, r8, ror #23
   11c90:	andeq	r2, r1, r8, ror #23
   11c94:	andeq	r2, r1, r8, ror #23
   11c98:	andeq	r2, r1, r8, ror #23
   11c9c:	andeq	r2, r1, r8, ror #23
   11ca0:	andeq	r2, r1, r8, ror #23
   11ca4:	andeq	r2, r1, r8, ror #23
   11ca8:	andeq	r2, r1, r8, ror #23
   11cac:	andeq	r2, r1, r8, ror #23
   11cb0:	andeq	r2, r1, r8, ror #23
   11cb4:	andeq	r2, r1, r8, ror #23
   11cb8:	andeq	r2, r1, r8, ror #23
   11cbc:	andeq	r2, r1, r8, ror #23
   11cc0:	andeq	r2, r1, r8, ror #23
   11cc4:	andeq	r2, r1, r8, ror #23
   11cc8:	andeq	r2, r1, r8, ror #23
   11ccc:	andeq	r2, r1, r8, ror #23
   11cd0:	andeq	r2, r1, r8, ror #23
   11cd4:	andeq	r2, r1, r8, ror #23
   11cd8:	andeq	r2, r1, r8, ror #23
   11cdc:	andeq	r2, r1, r8, ror #23
   11ce0:	andeq	r2, r1, r8, ror #23
   11ce4:	andeq	r2, r1, r8, ror #23
   11ce8:	andeq	r2, r1, r8, ror #23
   11cec:	andeq	r2, r1, r8, ror #23
   11cf0:	andeq	r2, r1, r8, ror #23
   11cf4:	andeq	r2, r1, r8, ror #23
   11cf8:	andeq	r2, r1, r8, ror #23
   11cfc:	andeq	r2, r1, r8, ror #23
   11d00:	andeq	r2, r1, r8, ror #23
   11d04:	andeq	r2, r1, r8, ror #23
   11d08:	andeq	r2, r1, r8, ror #23
   11d0c:	andeq	r2, r1, r8, ror #23
   11d10:	andeq	r2, r1, r8, ror #23
   11d14:	andeq	r2, r1, r8, ror #23
   11d18:	andeq	r2, r1, r8, ror #23
   11d1c:	andeq	r2, r1, r8, ror #23
   11d20:	andeq	r2, r1, r8, ror #23
   11d24:	andeq	r2, r1, r8, ror #23
   11d28:	andeq	r2, r1, r8, ror #23
   11d2c:	andeq	r2, r1, r8, ror #23
   11d30:	andeq	r2, r1, r8, ror #23
   11d34:	andeq	r2, r1, r8, ror #23
   11d38:	andeq	r2, r1, r8, ror #23
   11d3c:	andeq	r2, r1, r8, ror #23
   11d40:	andeq	r2, r1, r8, ror #23
   11d44:	andeq	r2, r1, r8, ror #23
   11d48:	andeq	r2, r1, r8, ror #23
   11d4c:	andeq	r2, r1, r8, ror #23
   11d50:	andeq	r2, r1, r8, ror #23
   11d54:	andeq	r2, r1, r8, ror #23
   11d58:	andeq	r2, r1, r8, ror #23
   11d5c:	andeq	r2, r1, r8, ror #23
   11d60:	andeq	r2, r1, r8, ror #23
   11d64:	andeq	r2, r1, r8, ror #23
   11d68:	andeq	r2, r1, r8, ror #23
   11d6c:	andeq	r2, r1, r8, ror #23
   11d70:	andeq	r2, r1, r8, ror #23
   11d74:	andeq	r2, r1, r8, ror #23
   11d78:	andeq	r2, r1, r8, ror #23
   11d7c:	andeq	r2, r1, r8, ror #23
   11d80:	andeq	r2, r1, r8, ror #23
   11d84:	andeq	r2, r1, r8, ror #23
   11d88:	andeq	r2, r1, r8, ror #23
   11d8c:	andeq	r2, r1, r8, ror #23
   11d90:	andeq	r2, r1, r8, ror #23
   11d94:	andeq	r2, r1, r8, ror #23
   11d98:	andeq	r2, r1, r8, ror #23
   11d9c:	andeq	r2, r1, r8, ror #23
   11da0:	andeq	r2, r1, r8, ror #23
   11da4:	andeq	r2, r1, r8, ror #23
   11da8:	andeq	r2, r1, r8, ror #23
   11dac:	andeq	r2, r1, r8, ror #23
   11db0:	andeq	r2, r1, r8, ror #23
   11db4:	andeq	r2, r1, r8, ror #23
   11db8:	andeq	r2, r1, r8, ror #23
   11dbc:	andeq	r2, r1, r8, ror #23
   11dc0:	andeq	r2, r1, r8, ror #23
   11dc4:	andeq	r2, r1, r8, ror #23
   11dc8:	andeq	r2, r1, r8, ror #23
   11dcc:	andeq	r2, r1, r8, ror #23
   11dd0:	andeq	r2, r1, r8, ror #23
   11dd4:	andeq	r2, r1, r8, ror #23
   11dd8:	andeq	r2, r1, r8, ror #23
   11ddc:	andeq	r2, r1, r8, ror #23
   11de0:	andeq	r2, r1, r8, ror #23
   11de4:	andeq	r2, r1, r8, ror #23
   11de8:	andeq	r2, r1, r8, ror #23
   11dec:	andeq	r2, r1, r8, ror #23
   11df0:	andeq	r2, r1, r8, ror #23
   11df4:	andeq	r2, r1, r8, ror #23
   11df8:	andeq	r1, r1, r8, lsr #30
   11dfc:	movw	r0, #53728	; 0xd1e0
   11e00:	movt	r0, #2
   11e04:	ldr	r0, [r0]
   11e08:	cmp	r0, #0
   11e0c:	beq	11eec <__assert_fail@plt+0x6ec>
   11e10:	ldrb	r1, [r0]
   11e14:	cmp	r1, #0
   11e18:	beq	11eec <__assert_fail@plt+0x6ec>
   11e1c:	movw	r1, #53792	; 0xd220
   11e20:	movt	r1, #2
   11e24:	b	12180 <__assert_fail@plt+0x980>
   11e28:	movw	r0, #53728	; 0xd1e0
   11e2c:	movw	r1, #43280	; 0xa910
   11e30:	movt	r0, #2
   11e34:	movt	r1, #1
   11e38:	ldr	r0, [r0]
   11e3c:	cmp	r0, #0
   11e40:	moveq	r0, r1
   11e44:	str	r0, [r5, #24]
   11e48:	ldr	r0, [r5, #40]	; 0x28
   11e4c:	cmp	r0, #0
   11e50:	beq	11e94 <__assert_fail@plt+0x694>
   11e54:	movw	r1, #44993	; 0xafc1
   11e58:	mov	r0, #0
   11e5c:	mov	r2, #5
   11e60:	movt	r1, #1
   11e64:	bl	114dc <dcgettext@plt>
   11e68:	mov	r2, r0
   11e6c:	movw	r0, #43283	; 0xa913
   11e70:	movw	r3, #43299	; 0xa923
   11e74:	mov	r1, #0
   11e78:	movt	r0, #1
   11e7c:	movt	r3, #1
   11e80:	str	r0, [sp]
   11e84:	mov	r0, #0
   11e88:	str	r3, [sp, #4]
   11e8c:	bl	115a8 <error@plt>
   11e90:	str	r6, [r5, #40]	; 0x28
   11e94:	ldr	r0, [r5, #36]	; 0x24
   11e98:	cmp	r0, #0
   11e9c:	mov	r0, r7
   11ea0:	beq	11a7c <__assert_fail@plt+0x27c>
   11ea4:	movw	r1, #44993	; 0xafc1
   11ea8:	mov	r0, #0
   11eac:	mov	r2, #5
   11eb0:	movt	r1, #1
   11eb4:	bl	114dc <dcgettext@plt>
   11eb8:	mov	r2, r0
   11ebc:	movw	r0, #43283	; 0xa913
   11ec0:	movw	r3, #43310	; 0xa92e
   11ec4:	mov	r1, #0
   11ec8:	movt	r0, #1
   11ecc:	movt	r3, #1
   11ed0:	str	r0, [sp]
   11ed4:	mov	r0, #0
   11ed8:	str	r3, [sp, #4]
   11edc:	bl	115a8 <error@plt>
   11ee0:	str	r6, [r5, #36]	; 0x24
   11ee4:	mov	r0, r7
   11ee8:	b	11a7c <__assert_fail@plt+0x27c>
   11eec:	movw	r0, #53792	; 0xd220
   11ef0:	movt	r0, #2
   11ef4:	str	r6, [r0]
   11ef8:	mov	r0, r7
   11efc:	b	11a7c <__assert_fail@plt+0x27c>
   11f00:	movw	r0, #53796	; 0xd224
   11f04:	movt	r0, #2
   11f08:	b	121a0 <__assert_fail@plt+0x9a0>
   11f0c:	mov	r0, #0
   11f10:	str	r0, [sp, #32]
   11f14:	mov	r0, r7
   11f18:	b	11a7c <__assert_fail@plt+0x27c>
   11f1c:	str	r8, [r5]
   11f20:	mov	r0, r7
   11f24:	b	11a7c <__assert_fail@plt+0x27c>
   11f28:	movw	r0, #53728	; 0xd1e0
   11f2c:	mov	r6, r4
   11f30:	mov	r1, #61	; 0x3d
   11f34:	movt	r0, #2
   11f38:	ldr	r4, [r0]
   11f3c:	mov	r0, r4
   11f40:	bl	1165c <strchr@plt>
   11f44:	cmp	r0, #0
   11f48:	bne	12c60 <__assert_fail@plt+0x1460>
   11f4c:	movw	r0, #53800	; 0xd228
   11f50:	movt	r0, #2
   11f54:	str	r4, [r0]
   11f58:	mov	r0, r4
   11f5c:	bl	117ac <unsetenv@plt>
   11f60:	cmp	r0, #0
   11f64:	mov	r4, r6
   11f68:	mov	r0, r7
   11f6c:	mov	r6, #0
   11f70:	beq	11a7c <__assert_fail@plt+0x27c>
   11f74:	b	12c8c <__assert_fail@plt+0x148c>
   11f78:	movw	r0, #53728	; 0xd1e0
   11f7c:	movt	r0, #2
   11f80:	ldr	r0, [r0]
   11f84:	cmp	r0, #0
   11f88:	beq	122f8 <__assert_fail@plt+0xaf8>
   11f8c:	mov	r1, #108	; 0x6c
   11f90:	mov	r2, #1
   11f94:	mvn	r3, #0
   11f98:	str	r8, [sp]
   11f9c:	bl	13fa0 <__assert_fail@plt+0x27a0>
   11fa0:	b	122fc <__assert_fail@plt+0xafc>
   11fa4:	movw	r0, #53728	; 0xd1e0
   11fa8:	mov	r1, #76	; 0x4c
   11fac:	mov	r2, #1
   11fb0:	mvn	r3, #0
   11fb4:	str	r8, [sp]
   11fb8:	movt	r0, #2
   11fbc:	ldr	r0, [r0]
   11fc0:	bl	13fa0 <__assert_fail@plt+0x27a0>
   11fc4:	str	r0, [r5, #36]	; 0x24
   11fc8:	ldr	r0, [r5, #40]	; 0x28
   11fcc:	cmp	r0, #0
   11fd0:	beq	12014 <__assert_fail@plt+0x814>
   11fd4:	movw	r1, #44993	; 0xafc1
   11fd8:	mov	r0, #0
   11fdc:	mov	r2, #5
   11fe0:	movt	r1, #1
   11fe4:	bl	114dc <dcgettext@plt>
   11fe8:	mov	r2, r0
   11fec:	movw	r0, #43322	; 0xa93a
   11ff0:	movw	r3, #43299	; 0xa923
   11ff4:	mov	r1, #0
   11ff8:	movt	r0, #1
   11ffc:	movt	r3, #1
   12000:	str	r0, [sp]
   12004:	mov	r0, #0
   12008:	str	r3, [sp, #4]
   1200c:	bl	115a8 <error@plt>
   12010:	str	r6, [r5, #40]	; 0x28
   12014:	ldr	r0, [r5, #24]
   12018:	cmp	r0, #0
   1201c:	mov	r0, r7
   12020:	beq	11a7c <__assert_fail@plt+0x27c>
   12024:	movw	r1, #44993	; 0xafc1
   12028:	mov	r0, #0
   1202c:	mov	r2, #5
   12030:	movt	r1, #1
   12034:	bl	114dc <dcgettext@plt>
   12038:	mov	r2, r0
   1203c:	movw	r0, #43322	; 0xa93a
   12040:	movt	r0, #1
   12044:	b	123a0 <__assert_fail@plt+0xba0>
   12048:	movw	r0, #53797	; 0xd225
   1204c:	movt	r0, #2
   12050:	b	121a0 <__assert_fail@plt+0x9a0>
   12054:	movw	r0, #53788	; 0xd21c
   12058:	movt	r0, #2
   1205c:	strb	r6, [r0]
   12060:	movw	r0, #15116	; 0x3b0c
   12064:	movt	r0, #1
   12068:	str	r0, [sp, #48]	; 0x30
   1206c:	mov	r0, r7
   12070:	b	11a7c <__assert_fail@plt+0x27c>
   12074:	ldr	r0, [sp, #40]	; 0x28
   12078:	mov	r8, #0
   1207c:	mov	r6, r4
   12080:	blx	r0
   12084:	movw	r0, #53728	; 0xd1e0
   12088:	ldr	r3, [r5, #4]
   1208c:	mov	r1, #115	; 0x73
   12090:	mov	r2, #1
   12094:	str	r8, [sp]
   12098:	movt	r0, #2
   1209c:	ldr	r0, [r0]
   120a0:	bl	13fa0 <__assert_fail@plt+0x27a0>
   120a4:	mov	r4, r0
   120a8:	ldr	r0, [r5, #4]
   120ac:	cmp	r4, r0
   120b0:	bls	120e8 <__assert_fail@plt+0x8e8>
   120b4:	movw	r1, #43364	; 0xa964
   120b8:	mov	r0, #0
   120bc:	mov	r2, #5
   120c0:	movt	r1, #1
   120c4:	bl	114dc <dcgettext@plt>
   120c8:	mov	r2, r0
   120cc:	ldr	r0, [r5, #4]
   120d0:	mov	r1, #0
   120d4:	mov	r3, r4
   120d8:	str	r0, [sp]
   120dc:	mov	r0, #0
   120e0:	bl	115a8 <error@plt>
   120e4:	ldr	r4, [r5, #4]
   120e8:	str	r4, [r5, #12]
   120ec:	mov	r4, r6
   120f0:	mov	r0, r7
   120f4:	mov	r6, #0
   120f8:	mov	r8, #1
   120fc:	b	11a7c <__assert_fail@plt+0x27c>
   12100:	movw	r0, #53728	; 0xd1e0
   12104:	movt	r0, #2
   12108:	ldr	r6, [r0]
   1210c:	mov	r0, r6
   12110:	bl	11650 <strlen@plt>
   12114:	mov	r1, r0
   12118:	ldrb	r0, [r6]
   1211c:	cmp	r1, #1
   12120:	bne	1225c <__assert_fail@plt+0xa5c>
   12124:	movw	r1, #53788	; 0xd21c
   12128:	movw	r5, #53744	; 0xd1f0
   1212c:	movw	r4, #49104	; 0xbfd0
   12130:	mov	r6, #0
   12134:	movt	r1, #2
   12138:	movt	r5, #2
   1213c:	movt	r4, #1
   12140:	strb	r0, [r1]
   12144:	movw	r0, #15116	; 0x3b0c
   12148:	movt	r0, #1
   1214c:	str	r0, [sp, #48]	; 0x30
   12150:	mov	r0, r7
   12154:	b	11a7c <__assert_fail@plt+0x27c>
   12158:	movw	r0, #53728	; 0xd1e0
   1215c:	mov	r1, #80	; 0x50
   12160:	mov	r2, #0
   12164:	mvn	r3, #-2147483648	; 0x80000000
   12168:	str	r8, [sp]
   1216c:	movt	r0, #2
   12170:	ldr	r0, [r0]
   12174:	bl	13fa0 <__assert_fail@plt+0x27a0>
   12178:	movw	r1, #53608	; 0xd168
   1217c:	movt	r1, #2
   12180:	str	r0, [r1]
   12184:	mov	r0, r7
   12188:	b	11a7c <__assert_fail@plt+0x27c>
   1218c:	movw	r0, #53796	; 0xd224
   12190:	movt	r0, #2
   12194:	strb	r8, [r0]
   12198:	movw	r0, #53798	; 0xd226
   1219c:	movt	r0, #2
   121a0:	strb	r8, [r0]
   121a4:	mov	r0, r7
   121a8:	b	11a7c <__assert_fail@plt+0x27c>
   121ac:	movw	r0, #53728	; 0xd1e0
   121b0:	mov	r1, #110	; 0x6e
   121b4:	mov	r2, #1
   121b8:	mvn	r3, #0
   121bc:	str	r8, [sp]
   121c0:	movt	r0, #2
   121c4:	ldr	r0, [r0]
   121c8:	bl	13fa0 <__assert_fail@plt+0x27a0>
   121cc:	str	r0, [r5, #40]	; 0x28
   121d0:	ldr	r0, [r5, #36]	; 0x24
   121d4:	cmp	r0, #0
   121d8:	beq	1221c <__assert_fail@plt+0xa1c>
   121dc:	movw	r1, #44993	; 0xafc1
   121e0:	mov	r0, #0
   121e4:	mov	r2, #5
   121e8:	movt	r1, #1
   121ec:	bl	114dc <dcgettext@plt>
   121f0:	mov	r2, r0
   121f4:	movw	r0, #43350	; 0xa956
   121f8:	movw	r3, #43310	; 0xa92e
   121fc:	mov	r1, #0
   12200:	movt	r0, #1
   12204:	movt	r3, #1
   12208:	str	r0, [sp]
   1220c:	mov	r0, #0
   12210:	str	r3, [sp, #4]
   12214:	bl	115a8 <error@plt>
   12218:	str	r6, [r5, #36]	; 0x24
   1221c:	ldr	r0, [r5, #24]
   12220:	cmp	r0, #0
   12224:	mov	r0, r7
   12228:	beq	11a7c <__assert_fail@plt+0x27c>
   1222c:	ldr	r0, [r5, #40]	; 0x28
   12230:	cmp	r0, #1
   12234:	bne	12380 <__assert_fail@plt+0xb80>
   12238:	str	r6, [r5, #40]	; 0x28
   1223c:	mov	r0, r7
   12240:	b	11a7c <__assert_fail@plt+0x27c>
   12244:	movw	r0, #53728	; 0xd1e0
   12248:	movt	r0, #2
   1224c:	ldr	r0, [r0]
   12250:	str	r0, [sp, #44]	; 0x2c
   12254:	mov	r0, r7
   12258:	b	11a7c <__assert_fail@plt+0x27c>
   1225c:	cmp	r0, #92	; 0x5c
   12260:	bne	12c24 <__assert_fail@plt+0x1424>
   12264:	mov	r4, r6
   12268:	ldrb	r5, [r4, #1]!
   1226c:	sub	r1, r5, #92	; 0x5c
   12270:	cmp	r1, #26
   12274:	bhi	123c8 <__assert_fail@plt+0xbc8>
   12278:	add	r2, pc, #4
   1227c:	mov	r0, #7
   12280:	ldr	pc, [r2, r1, lsl #2]
   12284:	strdeq	r2, [r1], -r0
   12288:	andeq	r2, r1, r8, asr #7
   1228c:	andeq	r2, r1, r8, asr #7
   12290:	andeq	r2, r1, r8, asr #7
   12294:	andeq	r2, r1, r8, asr #7
   12298:	andeq	r2, r1, r4, lsr #2
   1229c:	andeq	r2, r1, r4, ror #7
   122a0:	andeq	r2, r1, r8, asr #7
   122a4:	andeq	r2, r1, r8, asr #7
   122a8:	andeq	r2, r1, r8, asr #7
   122ac:	strdeq	r2, [r1], -ip
   122b0:	andeq	r2, r1, r8, asr #7
   122b4:	andeq	r2, r1, r8, asr #7
   122b8:	andeq	r2, r1, r8, asr #7
   122bc:	andeq	r2, r1, r8, asr #7
   122c0:	andeq	r2, r1, r8, asr #7
   122c4:	andeq	r2, r1, r8, asr #7
   122c8:	andeq	r2, r1, r8, asr #7
   122cc:	andeq	r2, r1, r4, lsl #8
   122d0:	andeq	r2, r1, r8, asr #7
   122d4:	andeq	r2, r1, r8, asr #7
   122d8:	andeq	r2, r1, r8, asr #7
   122dc:	ldrdeq	r2, [r1], -ip
   122e0:	andeq	r2, r1, r8, asr #7
   122e4:	andeq	r2, r1, ip, ror #7
   122e8:	andeq	r2, r1, r8, asr #7
   122ec:	strdeq	r2, [r1], -r4
   122f0:	mov	r0, #92	; 0x5c
   122f4:	b	12124 <__assert_fail@plt+0x924>
   122f8:	mov	r0, #1
   122fc:	str	r0, [r5, #36]	; 0x24
   12300:	ldr	r0, [r5, #40]	; 0x28
   12304:	cmp	r0, #0
   12308:	beq	1234c <__assert_fail@plt+0xb4c>
   1230c:	movw	r1, #44993	; 0xafc1
   12310:	mov	r0, #0
   12314:	mov	r2, #5
   12318:	movt	r1, #1
   1231c:	bl	114dc <dcgettext@plt>
   12320:	mov	r2, r0
   12324:	movw	r0, #43335	; 0xa947
   12328:	movw	r3, #43299	; 0xa923
   1232c:	mov	r1, #0
   12330:	movt	r0, #1
   12334:	movt	r3, #1
   12338:	str	r0, [sp]
   1233c:	mov	r0, #0
   12340:	str	r3, [sp, #4]
   12344:	bl	115a8 <error@plt>
   12348:	str	r6, [r5, #40]	; 0x28
   1234c:	ldr	r0, [r5, #24]
   12350:	cmp	r0, #0
   12354:	mov	r0, r7
   12358:	beq	11a7c <__assert_fail@plt+0x27c>
   1235c:	movw	r1, #44993	; 0xafc1
   12360:	mov	r0, #0
   12364:	mov	r2, #5
   12368:	movt	r1, #1
   1236c:	bl	114dc <dcgettext@plt>
   12370:	mov	r2, r0
   12374:	movw	r0, #43335	; 0xa947
   12378:	movt	r0, #1
   1237c:	b	123a0 <__assert_fail@plt+0xba0>
   12380:	movw	r1, #44993	; 0xafc1
   12384:	mov	r0, #0
   12388:	mov	r2, #5
   1238c:	movt	r1, #1
   12390:	bl	114dc <dcgettext@plt>
   12394:	mov	r2, r0
   12398:	movw	r0, #43350	; 0xa956
   1239c:	movt	r0, #1
   123a0:	movw	r3, #43325	; 0xa93d
   123a4:	str	r0, [sp]
   123a8:	mov	r0, #0
   123ac:	mov	r1, #0
   123b0:	movt	r3, #1
   123b4:	str	r3, [sp, #4]
   123b8:	bl	115a8 <error@plt>
   123bc:	str	r6, [r5, #24]
   123c0:	mov	r0, r7
   123c4:	b	11a7c <__assert_fail@plt+0x27c>
   123c8:	cmp	r5, #120	; 0x78
   123cc:	bne	1240c <__assert_fail@plt+0xc0c>
   123d0:	add	r4, r6, #2
   123d4:	mov	r5, #16
   123d8:	b	12428 <__assert_fail@plt+0xc28>
   123dc:	mov	r0, #13
   123e0:	b	12124 <__assert_fail@plt+0x924>
   123e4:	mov	r0, #8
   123e8:	b	12124 <__assert_fail@plt+0x924>
   123ec:	mov	r0, #9
   123f0:	b	12124 <__assert_fail@plt+0x924>
   123f4:	mov	r0, #11
   123f8:	b	12124 <__assert_fail@plt+0x924>
   123fc:	mov	r0, #12
   12400:	b	12124 <__assert_fail@plt+0x924>
   12404:	mov	r0, #10
   12408:	b	12124 <__assert_fail@plt+0x924>
   1240c:	bl	11614 <__ctype_b_loc@plt>
   12410:	ldr	r0, [r0]
   12414:	add	r0, r0, r5, lsl #1
   12418:	mov	r5, #8
   1241c:	ldrb	r0, [r0, #1]
   12420:	tst	r0, #8
   12424:	beq	12c30 <__assert_fail@plt+0x1430>
   12428:	bl	11680 <__errno_location@plt>
   1242c:	mov	r1, #0
   12430:	mov	r2, r5
   12434:	str	r1, [r0]
   12438:	str	r1, [sp, #52]	; 0x34
   1243c:	mov	r0, r4
   12440:	add	r1, sp, #52	; 0x34
   12444:	bl	11644 <strtoul@plt>
   12448:	cmp	r0, #256	; 0x100
   1244c:	bcs	12c4c <__assert_fail@plt+0x144c>
   12450:	ldr	r4, [sp, #52]	; 0x34
   12454:	ldrb	r1, [r4]
   12458:	cmp	r1, #0
   1245c:	beq	12124 <__assert_fail@plt+0x924>
   12460:	movw	r1, #44893	; 0xaf5d
   12464:	mov	r0, #0
   12468:	mov	r2, #5
   1246c:	movt	r1, #1
   12470:	bl	114dc <dcgettext@plt>
   12474:	mov	r2, r0
   12478:	str	r4, [sp]
   1247c:	b	12ce4 <__assert_fail@plt+0x14e4>
   12480:	cmn	r0, #1
   12484:	bne	12be8 <__assert_fail@plt+0x13e8>
   12488:	ldr	r1, [sp, #48]	; 0x30
   1248c:	movw	r0, #15116	; 0x3b0c
   12490:	movt	r0, #1
   12494:	cmp	r1, r0
   12498:	bne	124d4 <__assert_fail@plt+0xcd4>
   1249c:	movw	r0, #53792	; 0xd220
   124a0:	movt	r0, #2
   124a4:	ldr	r0, [r0]
   124a8:	cmp	r0, #0
   124ac:	beq	124d4 <__assert_fail@plt+0xcd4>
   124b0:	movw	r1, #43526	; 0xaa06
   124b4:	mov	r0, #0
   124b8:	mov	r2, #5
   124bc:	movt	r1, #1
   124c0:	bl	114dc <dcgettext@plt>
   124c4:	mov	r2, r0
   124c8:	mov	r0, #0
   124cc:	mov	r1, #0
   124d0:	bl	115a8 <error@plt>
   124d4:	ldr	r0, [sp, #40]	; 0x28
   124d8:	blx	r0
   124dc:	ldr	r0, [sp, #36]	; 0x24
   124e0:	cmp	r0, #0
   124e4:	bne	12d0c <__assert_fail@plt+0x150c>
   124e8:	movw	r0, #16632	; 0x40f8
   124ec:	add	r8, sp, #52	; 0x34
   124f0:	movt	r0, #1
   124f4:	add	r4, r8, #4
   124f8:	str	r0, [sp, #52]	; 0x34
   124fc:	mov	r0, r4
   12500:	bl	11728 <sigemptyset@plt>
   12504:	mov	r6, #0
   12508:	mov	r0, #10
   1250c:	mov	r1, r8
   12510:	mov	r2, #0
   12514:	str	r6, [sp, #184]	; 0xb8
   12518:	bl	11548 <sigaction@plt>
   1251c:	cmp	r0, #0
   12520:	beq	12558 <__assert_fail@plt+0xd58>
   12524:	bl	11680 <__errno_location@plt>
   12528:	movw	r1, #43608	; 0xaa58
   1252c:	ldr	r5, [r0]
   12530:	mov	r0, #0
   12534:	mov	r2, #5
   12538:	movt	r1, #1
   1253c:	bl	114dc <dcgettext@plt>
   12540:	mov	r2, r0
   12544:	mov	r1, r5
   12548:	movw	r5, #53744	; 0xd1f0
   1254c:	mov	r0, #0
   12550:	movt	r5, #2
   12554:	bl	115a8 <error@plt>
   12558:	movw	r0, #16684	; 0x412c
   1255c:	movt	r0, #1
   12560:	str	r0, [sp, #52]	; 0x34
   12564:	mov	r0, r4
   12568:	bl	11728 <sigemptyset@plt>
   1256c:	add	r1, sp, #52	; 0x34
   12570:	mov	r0, #12
   12574:	mov	r2, #0
   12578:	str	r6, [sp, #184]	; 0xb8
   1257c:	bl	11548 <sigaction@plt>
   12580:	cmp	r0, #0
   12584:	beq	125b4 <__assert_fail@plt+0xdb4>
   12588:	bl	11680 <__errno_location@plt>
   1258c:	movw	r1, #43642	; 0xaa7a
   12590:	ldr	r4, [r0]
   12594:	mov	r0, #0
   12598:	mov	r2, #5
   1259c:	movt	r1, #1
   125a0:	bl	114dc <dcgettext@plt>
   125a4:	mov	r2, r0
   125a8:	mov	r0, #0
   125ac:	mov	r1, r4
   125b0:	bl	115a8 <error@plt>
   125b4:	ldr	r4, [sp, #44]	; 0x2c
   125b8:	movw	r1, #51315	; 0xc873
   125bc:	movt	r1, #1
   125c0:	mov	r0, r4
   125c4:	bl	11440 <strcmp@plt>
   125c8:	movw	r6, #53804	; 0xd22c
   125cc:	cmp	r0, #0
   125d0:	movt	r6, #2
   125d4:	beq	12648 <__assert_fail@plt+0xe48>
   125d8:	movw	r0, #53808	; 0xd230
   125dc:	mov	r1, #1
   125e0:	movt	r0, #2
   125e4:	strb	r1, [r0]
   125e8:	mov	r0, r4
   125ec:	mov	r1, #0
   125f0:	bl	155f8 <__assert_fail@plt+0x3df8>
   125f4:	cmn	r0, #1
   125f8:	ble	12d44 <__assert_fail@plt+0x1544>
   125fc:	movw	r1, #44490	; 0xadca
   12600:	mov	r4, r0
   12604:	movt	r1, #1
   12608:	bl	11428 <fdopen@plt>
   1260c:	cmp	r0, #0
   12610:	bne	12654 <__assert_fail@plt+0xe54>
   12614:	bl	11680 <__errno_location@plt>
   12618:	ldr	r7, [r0]
   1261c:	mov	r5, r0
   12620:	mov	r0, r4
   12624:	bl	117e8 <close@plt>
   12628:	str	r7, [r5]
   1262c:	b	12d4c <__assert_fail@plt+0x154c>
   12630:	movw	r0, #43097	; 0xa859
   12634:	movt	r0, #1
   12638:	bl	158b8 <__assert_fail@plt+0x40b8>
   1263c:	mov	r0, #0
   12640:	sub	sp, fp, #28
   12644:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12648:	movw	r0, #53720	; 0xd1d8
   1264c:	movt	r0, #2
   12650:	ldr	r0, [r0]
   12654:	str	r0, [r6]
   12658:	ldr	r0, [r5, #24]
   1265c:	cmp	r0, #0
   12660:	ldreq	r0, [r5, #36]	; 0x24
   12664:	cmpeq	r0, #0
   12668:	beq	12674 <__assert_fail@plt+0xe74>
   1266c:	mov	r0, #1
   12670:	str	r0, [r5]
   12674:	movw	r6, #53704	; 0xd1c8
   12678:	movt	r6, #2
   1267c:	ldr	r0, [r6]
   12680:	cmp	r0, r9
   12684:	bne	126a0 <__assert_fail@plt+0xea0>
   12688:	mov	r0, #0
   1268c:	mov	r9, #1
   12690:	sub	sl, fp, #48	; 0x30
   12694:	str	r0, [r6]
   12698:	sub	r0, fp, #44	; 0x2c
   1269c:	str	r0, [fp, #-48]	; 0xffffffd0
   126a0:	cmp	r7, #0
   126a4:	bne	12a34 <__assert_fail@plt+0x1234>
   126a8:	ldr	r0, [r5, #12]
   126ac:	add	r0, r0, #1
   126b0:	bl	1918c <__assert_fail@plt+0x798c>
   126b4:	movw	r1, #53812	; 0xd234
   126b8:	movt	r1, #2
   126bc:	str	r0, [r1]
   126c0:	ldr	r0, [r5, #12]
   126c4:	add	r0, r0, #1
   126c8:	bl	1918c <__assert_fail@plt+0x798c>
   126cc:	movw	r7, #53816	; 0xd238
   126d0:	mov	r1, #0
   126d4:	movt	r7, #2
   126d8:	str	r0, [r7, #12]
   126dc:	mov	r0, #17
   126e0:	bl	114d0 <signal@plt>
   126e4:	ldr	r0, [r5, #24]
   126e8:	cmp	r0, #0
   126ec:	beq	128b4 <__assert_fail@plt+0x10b4>
   126f0:	lsl	r0, r9, #2
   126f4:	bl	1918c <__assert_fail@plt+0x798c>
   126f8:	str	r0, [sp, #44]	; 0x2c
   126fc:	ldr	r0, [r6]
   12700:	cmp	r0, r9
   12704:	bge	1272c <__assert_fail@plt+0xf2c>
   12708:	ldr	r1, [sp, #44]	; 0x2c
   1270c:	add	r4, sl, r0, lsl #2
   12710:	sub	r6, r9, r0
   12714:	add	r5, r1, r0, lsl #2
   12718:	ldr	r0, [r4], #4
   1271c:	bl	11650 <strlen@plt>
   12720:	str	r0, [r5], #4
   12724:	subs	r6, r6, #1
   12728:	bne	12718 <__assert_fail@plt+0xf18>
   1272c:	movw	r0, #53744	; 0xd1f0
   12730:	str	sl, [sp, #40]	; 0x28
   12734:	movt	r0, #2
   12738:	mov	r4, r0
   1273c:	ldr	r0, [r0, #24]
   12740:	bl	11650 <strlen@plt>
   12744:	str	r0, [r4, #20]
   12748:	ldr	r0, [sp, #48]	; 0x30
   1274c:	blx	r0
   12750:	cmn	r0, #1
   12754:	beq	12a10 <__assert_fail@plt+0x1210>
   12758:	mov	r4, r0
   1275c:	ldr	r0, [sp, #44]	; 0x2c
   12760:	movw	r5, #53744	; 0xd1f0
   12764:	mov	sl, #0
   12768:	str	r9, [sp, #36]	; 0x24
   1276c:	movt	r5, #2
   12770:	add	r0, r0, #4
   12774:	str	r0, [sp, #32]
   12778:	ldr	r0, [sp, #40]	; 0x28
   1277c:	add	r0, r0, #4
   12780:	str	r0, [sp, #28]
   12784:	sub	r0, r9, #2
   12788:	str	r0, [sp, #24]
   1278c:	b	127b8 <__assert_fail@plt+0xfb8>
   12790:	mov	r0, r5
   12794:	mov	r1, r8
   12798:	mov	r7, r8
   1279c:	bl	14a64 <__assert_fail@plt+0x3264>
   127a0:	ldr	r0, [sp, #48]	; 0x30
   127a4:	blx	r0
   127a8:	ldr	r9, [sp, #36]	; 0x24
   127ac:	mov	r4, r0
   127b0:	cmn	r0, #1
   127b4:	beq	12a10 <__assert_fail@plt+0x1210>
   127b8:	mov	r0, r5
   127bc:	mov	r1, r7
   127c0:	bl	14fe0 <__assert_fail@plt+0x37e0>
   127c4:	movw	r0, #53704	; 0xd1c8
   127c8:	ldr	r1, [sp, #40]	; 0x28
   127cc:	str	sl, [r7, #16]
   127d0:	movw	r6, #53860	; 0xd264
   127d4:	mov	r8, r7
   127d8:	movt	r0, #2
   127dc:	movt	r6, #2
   127e0:	ldr	r0, [r0]
   127e4:	ldr	r2, [r1, r0, lsl #2]
   127e8:	ldr	r1, [sp, #44]	; 0x2c
   127ec:	str	sl, [sp]
   127f0:	str	sl, [sp, #4]
   127f4:	ldr	r0, [r1, r0, lsl #2]
   127f8:	ldrb	r1, [r6]
   127fc:	eor	r1, r1, #1
   12800:	add	r3, r0, #1
   12804:	mov	r0, r5
   12808:	str	r1, [sp, #8]
   1280c:	mov	r1, r7
   12810:	bl	147f4 <__assert_fail@plt+0x2ff4>
   12814:	mov	r0, #1
   12818:	strb	r0, [r6]
   1281c:	movw	r0, #53704	; 0xd1c8
   12820:	movt	r0, #2
   12824:	ldr	r0, [r0]
   12828:	add	r1, r0, #1
   1282c:	cmp	r1, r9
   12830:	bge	12790 <__assert_fail@plt+0xf90>
   12834:	ldr	r1, [sp, #32]
   12838:	sub	r4, r4, #1
   1283c:	add	r7, r1, r0, lsl #2
   12840:	ldr	r1, [sp, #28]
   12844:	add	r9, r1, r0, lsl #2
   12848:	ldr	r1, [sp, #24]
   1284c:	sub	r6, r1, r0
   12850:	mov	r0, #1
   12854:	mov	r1, #1
   12858:	ldr	r2, [r9]
   1285c:	ldr	r3, [r7]
   12860:	str	sl, [sp]
   12864:	str	sl, [sp, #4]
   12868:	str	r4, [sp, #12]
   1286c:	bic	r0, r1, r0
   12870:	movw	r1, #53812	; 0xd234
   12874:	movt	r1, #2
   12878:	str	r0, [sp, #16]
   1287c:	mov	r0, r5
   12880:	ldr	r1, [r1]
   12884:	str	r1, [sp, #8]
   12888:	mov	r1, r8
   1288c:	bl	14674 <__assert_fail@plt+0x2e74>
   12890:	cmp	r6, #0
   12894:	beq	12790 <__assert_fail@plt+0xf90>
   12898:	movw	r0, #53860	; 0xd264
   1289c:	add	r7, r7, #4
   128a0:	add	r9, r9, #4
   128a4:	sub	r6, r6, #1
   128a8:	movt	r0, #2
   128ac:	ldrb	r0, [r0]
   128b0:	b	12854 <__assert_fail@plt+0x1054>
   128b4:	ldr	r0, [r6]
   128b8:	cmp	r0, r9
   128bc:	bge	12928 <__assert_fail@plt+0x1128>
   128c0:	movw	r4, #53744	; 0xd1f0
   128c4:	movw	r5, #53816	; 0xd238
   128c8:	mov	r8, r6
   128cc:	mov	r7, #0
   128d0:	movt	r4, #2
   128d4:	movt	r5, #2
   128d8:	ldr	r6, [sl, r0, lsl #2]
   128dc:	mov	r0, r6
   128e0:	bl	11650 <strlen@plt>
   128e4:	movw	r1, #53860	; 0xd264
   128e8:	add	r3, r0, #1
   128ec:	mov	r0, r4
   128f0:	mov	r2, r6
   128f4:	str	r7, [sp]
   128f8:	str	r7, [sp, #4]
   128fc:	movt	r1, #2
   12900:	ldrb	r1, [r1]
   12904:	eor	r1, r1, #1
   12908:	str	r1, [sp, #8]
   1290c:	mov	r1, r5
   12910:	bl	147f4 <__assert_fail@plt+0x2ff4>
   12914:	ldr	r0, [r8]
   12918:	add	r0, r0, #1
   1291c:	cmp	r0, r9
   12920:	str	r0, [r8]
   12924:	blt	128d8 <__assert_fail@plt+0x10d8>
   12928:	movw	r0, #53860	; 0xd264
   1292c:	movw	r7, #53816	; 0xd238
   12930:	mov	r1, #1
   12934:	movt	r0, #2
   12938:	movt	r7, #2
   1293c:	strb	r1, [r0]
   12940:	ldr	r1, [r7, #16]
   12944:	ldr	r0, [r7]
   12948:	str	r1, [r7, #20]
   1294c:	movw	r1, #53744	; 0xd1f0
   12950:	movt	r1, #2
   12954:	str	r0, [r1, #28]
   12958:	ldr	r0, [sp, #48]	; 0x30
   1295c:	blx	r0
   12960:	cmn	r0, #1
   12964:	beq	129c4 <__assert_fail@plt+0x11c4>
   12968:	movw	r5, #53864	; 0xd268
   1296c:	movw	r4, #53816	; 0xd238
   12970:	mov	r6, #0
   12974:	movt	r5, #2
   12978:	movt	r4, #2
   1297c:	b	12990 <__assert_fail@plt+0x1190>
   12980:	ldr	r0, [sp, #48]	; 0x30
   12984:	blx	r0
   12988:	cmn	r0, #1
   1298c:	beq	129c4 <__assert_fail@plt+0x11c4>
   12990:	movw	r1, #53744	; 0xd1f0
   12994:	ldr	r0, [r5]
   12998:	movt	r1, #2
   1299c:	ldr	r1, [r1, #36]	; 0x24
   129a0:	sub	r1, r1, #1
   129a4:	cmp	r1, r0
   129a8:	bcs	12980 <__assert_fail@plt+0x1180>
   129ac:	movw	r0, #53744	; 0xd1f0
   129b0:	mov	r1, r4
   129b4:	movt	r0, #2
   129b8:	bl	14a64 <__assert_fail@plt+0x3264>
   129bc:	str	r6, [r5]
   129c0:	b	12980 <__assert_fail@plt+0x1180>
   129c4:	movw	r0, #53744	; 0xd1f0
   129c8:	ldr	r1, [r7]
   129cc:	movt	r0, #2
   129d0:	ldr	r0, [r0, #28]
   129d4:	cmp	r1, r0
   129d8:	bne	129fc <__assert_fail@plt+0x11fc>
   129dc:	ldr	r0, [sp, #32]
   129e0:	cmp	r0, #0
   129e4:	beq	12a10 <__assert_fail@plt+0x1210>
   129e8:	movw	r0, #53868	; 0xd26c
   129ec:	movt	r0, #2
   129f0:	ldrb	r0, [r0]
   129f4:	cmp	r0, #0
   129f8:	bne	12a10 <__assert_fail@plt+0x1210>
   129fc:	movw	r0, #53744	; 0xd1f0
   12a00:	movw	r1, #53816	; 0xd238
   12a04:	movt	r0, #2
   12a08:	movt	r1, #2
   12a0c:	bl	14a64 <__assert_fail@plt+0x3264>
   12a10:	movw	r0, #53872	; 0xd270
   12a14:	movw	r2, #53740	; 0xd1ec
   12a18:	movt	r0, #2
   12a1c:	movt	r2, #2
   12a20:	ldr	r1, [r0]
   12a24:	str	r1, [r2]
   12a28:	ldr	r0, [r0]
   12a2c:	sub	sp, fp, #28
   12a30:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12a34:	movw	r8, #53712	; 0xd1d0
   12a38:	movw	r1, #43702	; 0xaab6
   12a3c:	mov	r0, #0
   12a40:	mov	r2, #5
   12a44:	movt	r8, #2
   12a48:	movt	r1, #1
   12a4c:	ldr	r4, [r8]
   12a50:	bl	114dc <dcgettext@plt>
   12a54:	mov	r5, r0
   12a58:	bl	15020 <__assert_fail@plt+0x3820>
   12a5c:	mov	r2, r0
   12a60:	mov	r0, r4
   12a64:	mov	r1, r5
   12a68:	mov	r3, #0
   12a6c:	bl	11674 <fprintf@plt>
   12a70:	movw	r1, #43749	; 0xaae5
   12a74:	ldr	r4, [r8]
   12a78:	mov	r0, #0
   12a7c:	mov	r2, #5
   12a80:	movt	r1, #1
   12a84:	bl	114dc <dcgettext@plt>
   12a88:	mov	r1, r0
   12a8c:	movw	r0, #53744	; 0xd1f0
   12a90:	mov	r3, #0
   12a94:	movt	r0, #2
   12a98:	ldr	r2, [r0, #4]
   12a9c:	mov	r0, r4
   12aa0:	bl	11674 <fprintf@plt>
   12aa4:	movw	r1, #43807	; 0xab1f
   12aa8:	ldr	r4, [r8]
   12aac:	mov	r0, #0
   12ab0:	mov	r2, #5
   12ab4:	movt	r1, #1
   12ab8:	bl	114dc <dcgettext@plt>
   12abc:	mov	r1, r0
   12ac0:	movw	r0, #53744	; 0xd1f0
   12ac4:	mov	r3, #0
   12ac8:	movt	r0, #2
   12acc:	ldr	r2, [r0, #8]
   12ad0:	mov	r0, r4
   12ad4:	bl	11674 <fprintf@plt>
   12ad8:	movw	r1, #43884	; 0xab6c
   12adc:	ldr	r4, [r8]
   12ae0:	mov	r0, #0
   12ae4:	mov	r2, #5
   12ae8:	movt	r1, #1
   12aec:	bl	114dc <dcgettext@plt>
   12af0:	mov	r5, r0
   12af4:	movw	r0, #53744	; 0xd1f0
   12af8:	movt	r0, #2
   12afc:	ldr	r7, [r0, #4]
   12b00:	bl	15020 <__assert_fail@plt+0x3820>
   12b04:	sub	r2, r7, r0
   12b08:	mov	r1, r5
   12b0c:	movw	r5, #53744	; 0xd1f0
   12b10:	mov	r0, r4
   12b14:	mov	r3, #0
   12b18:	movt	r5, #2
   12b1c:	bl	11674 <fprintf@plt>
   12b20:	movw	r1, #43939	; 0xaba3
   12b24:	ldr	r4, [r8]
   12b28:	mov	r0, #0
   12b2c:	mov	r2, #5
   12b30:	movt	r1, #1
   12b34:	bl	114dc <dcgettext@plt>
   12b38:	ldr	r2, [r5, #12]
   12b3c:	mov	r1, r0
   12b40:	mov	r0, r4
   12b44:	mov	r3, #0
   12b48:	bl	11674 <fprintf@plt>
   12b4c:	movw	r1, #43991	; 0xabd7
   12b50:	ldr	r4, [r8]
   12b54:	mov	r0, #0
   12b58:	mov	r2, #5
   12b5c:	movt	r1, #1
   12b60:	bl	114dc <dcgettext@plt>
   12b64:	mov	r1, r0
   12b68:	mov	r0, r4
   12b6c:	mvn	r2, #-2147483648	; 0x80000000
   12b70:	mov	r3, #0
   12b74:	bl	11674 <fprintf@plt>
   12b78:	mov	r0, #0
   12b7c:	bl	117a0 <isatty@plt>
   12b80:	cmp	r0, #0
   12b84:	beq	126a8 <__assert_fail@plt+0xea8>
   12b88:	movw	r1, #44051	; 0xac13
   12b8c:	ldr	r4, [r8]
   12b90:	mov	r0, #0
   12b94:	mov	r2, #5
   12b98:	movt	r1, #1
   12b9c:	bl	114dc <dcgettext@plt>
   12ba0:	mov	r1, r0
   12ba4:	mov	r0, r4
   12ba8:	bl	11674 <fprintf@plt>
   12bac:	ldr	r0, [sp, #32]
   12bb0:	cmp	r0, #0
   12bb4:	beq	126a8 <__assert_fail@plt+0xea8>
   12bb8:	movw	r1, #44224	; 0xacc0
   12bbc:	ldr	r4, [r8]
   12bc0:	mov	r0, #0
   12bc4:	mov	r2, #5
   12bc8:	movt	r1, #1
   12bcc:	bl	114dc <dcgettext@plt>
   12bd0:	mov	r1, r0
   12bd4:	ldr	r0, [r6]
   12bd8:	ldr	r2, [sl, r0, lsl #2]
   12bdc:	mov	r0, r4
   12be0:	bl	11674 <fprintf@plt>
   12be4:	b	126a8 <__assert_fail@plt+0xea8>
   12be8:	mov	r0, #1
   12bec:	bl	13c7c <__assert_fail@plt+0x247c>
   12bf0:	mov	r0, #0
   12bf4:	bl	13c7c <__assert_fail@plt+0x247c>
   12bf8:	bl	11680 <__errno_location@plt>
   12bfc:	movw	r1, #43127	; 0xa877
   12c00:	ldr	r4, [r0]
   12c04:	mov	r0, #0
   12c08:	mov	r2, #5
   12c0c:	movt	r1, #1
   12c10:	bl	114dc <dcgettext@plt>
   12c14:	mov	r2, r0
   12c18:	mov	r0, #1
   12c1c:	mov	r1, r4
   12c20:	bl	115a8 <error@plt>
   12c24:	movw	r1, #44505	; 0xadd9
   12c28:	movt	r1, #1
   12c2c:	b	12c38 <__assert_fail@plt+0x1438>
   12c30:	movw	r1, #44634	; 0xae5a
   12c34:	movt	r1, #1
   12c38:	mov	r0, #0
   12c3c:	mov	r2, #5
   12c40:	bl	114dc <dcgettext@plt>
   12c44:	mov	r2, r0
   12c48:	b	12ce4 <__assert_fail@plt+0x14e4>
   12c4c:	cmp	r5, #16
   12c50:	bne	12cc4 <__assert_fail@plt+0x14c4>
   12c54:	movw	r1, #44695	; 0xae97
   12c58:	movt	r1, #1
   12c5c:	b	12ccc <__assert_fail@plt+0x14cc>
   12c60:	movw	r1, #43429	; 0xa9a5
   12c64:	mov	r0, #0
   12c68:	mov	r2, #5
   12c6c:	movt	r1, #1
   12c70:	bl	114dc <dcgettext@plt>
   12c74:	mov	r2, r0
   12c78:	ldr	r0, [fp, #-36]	; 0xffffffdc
   12c7c:	mov	r1, #0
   12c80:	ldr	r3, [r6, r0, lsl #4]
   12c84:	mov	r0, #1
   12c88:	bl	115a8 <error@plt>
   12c8c:	bl	11680 <__errno_location@plt>
   12c90:	movw	r1, #43486	; 0xa9de
   12c94:	ldr	r4, [r0]
   12c98:	mov	r0, #0
   12c9c:	mov	r2, #5
   12ca0:	movt	r1, #1
   12ca4:	bl	114dc <dcgettext@plt>
   12ca8:	mov	r2, r0
   12cac:	movw	r0, #53800	; 0xd228
   12cb0:	mov	r1, r4
   12cb4:	movt	r0, #2
   12cb8:	ldr	r3, [r0]
   12cbc:	mov	r0, #1
   12cc0:	bl	115a8 <error@plt>
   12cc4:	movw	r1, #44794	; 0xaefa
   12cc8:	movt	r1, #1
   12ccc:	mov	r0, #0
   12cd0:	mov	r2, #5
   12cd4:	bl	114dc <dcgettext@plt>
   12cd8:	mov	r2, r0
   12cdc:	mov	r0, #255	; 0xff
   12ce0:	str	r0, [sp]
   12ce4:	mov	r0, #1
   12ce8:	mov	r1, #0
   12cec:	mov	r3, r6
   12cf0:	bl	115a8 <error@plt>
   12cf4:	movw	r0, #43220	; 0xa8d4
   12cf8:	movw	r1, #43189	; 0xa8b5
   12cfc:	movw	r3, #43197	; 0xa8bd
   12d00:	movw	r2, #511	; 0x1ff
   12d04:	movt	r0, #1
   12d08:	b	12d38 <__assert_fail@plt+0x1538>
   12d0c:	movw	r0, #43585	; 0xaa41
   12d10:	movw	r1, #43189	; 0xa8b5
   12d14:	movw	r3, #43197	; 0xa8bd
   12d18:	movw	r2, #723	; 0x2d3
   12d1c:	movt	r0, #1
   12d20:	b	12d38 <__assert_fail@plt+0x1538>
   12d24:	movw	r0, #43162	; 0xa89a
   12d28:	movw	r1, #43189	; 0xa8b5
   12d2c:	movw	r3, #43197	; 0xa8bd
   12d30:	movw	r2, #483	; 0x1e3
   12d34:	movt	r0, #1
   12d38:	movt	r1, #1
   12d3c:	movt	r3, #1
   12d40:	bl	11800 <__assert_fail@plt>
   12d44:	bl	11680 <__errno_location@plt>
   12d48:	mov	r5, r0
   12d4c:	mov	r0, #0
   12d50:	movw	r1, #43676	; 0xaa9c
   12d54:	mov	r2, #5
   12d58:	str	r0, [r6]
   12d5c:	movt	r1, #1
   12d60:	mov	r0, #0
   12d64:	ldr	r4, [r5]
   12d68:	bl	114dc <dcgettext@plt>
   12d6c:	ldr	r2, [sp, #44]	; 0x2c
   12d70:	mov	r5, r0
   12d74:	mov	r0, #0
   12d78:	mov	r1, #8
   12d7c:	bl	1828c <__assert_fail@plt+0x6a8c>
   12d80:	mov	r3, r0
   12d84:	mov	r0, #1
   12d88:	mov	r1, r4
   12d8c:	mov	r2, r5
   12d90:	bl	115a8 <error@plt>
   12d94:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12d98:	add	fp, sp, #28
   12d9c:	sub	sp, sp, #28
   12da0:	movw	r6, #53876	; 0xd274
   12da4:	mvn	r4, #0
   12da8:	movt	r6, #2
   12dac:	ldrb	r0, [r6]
   12db0:	cmp	r0, #0
   12db4:	bne	131d8 <__assert_fail@plt+0x19d8>
   12db8:	movw	r0, #53744	; 0xd1f0
   12dbc:	movw	r8, #53804	; 0xd22c
   12dc0:	movt	r0, #2
   12dc4:	movt	r8, #2
   12dc8:	ldr	r4, [r0, #12]
   12dcc:	movw	r0, #53812	; 0xd234
   12dd0:	movt	r0, #2
   12dd4:	ldr	sl, [r0]
   12dd8:	movw	r0, #53816	; 0xd238
   12ddc:	movt	r0, #2
   12de0:	ldr	r5, [r0, #20]
   12de4:	ldr	r0, [r8]
   12de8:	bl	117dc <getc@plt>
   12dec:	cmn	r0, #1
   12df0:	beq	130e8 <__assert_fail@plt+0x18e8>
   12df4:	movw	r7, #53864	; 0xd268
   12df8:	add	r1, sl, r4
   12dfc:	mvn	r2, r5
   12e00:	mvn	r5, #0
   12e04:	mov	r4, #0
   12e08:	mov	r9, #1
   12e0c:	add	r1, r2, r1
   12e10:	movt	r7, #2
   12e14:	mov	r2, #0
   12e18:	str	r1, [sp, #16]
   12e1c:	mov	r1, #1
   12e20:	str	r2, [sp, #24]
   12e24:	str	r1, [sp, #20]
   12e28:	mov	r6, r5
   12e2c:	mov	r5, r6
   12e30:	b	12e74 <__assert_fail@plt+0x1674>
   12e34:	ldr	r0, [r7]
   12e38:	add	r0, r0, #1
   12e3c:	str	r0, [r7]
   12e40:	movw	r0, #53812	; 0xd234
   12e44:	movt	r0, #2
   12e48:	ldr	r6, [r0]
   12e4c:	subs	r0, sl, r6
   12e50:	movwne	r0, #1
   12e54:	orr	r0, r4, r0
   12e58:	tst	r0, #1
   12e5c:	bne	131e4 <__assert_fail@plt+0x19e4>
   12e60:	ldr	r0, [r8]
   12e64:	bl	117dc <getc@plt>
   12e68:	mov	r9, #1
   12e6c:	cmn	r0, #1
   12e70:	beq	130f8 <__assert_fail@plt+0x18f8>
   12e74:	mov	r6, r5
   12e78:	mov	r5, r0
   12e7c:	cmp	r9, #3
   12e80:	bhi	12f78 <__assert_fail@plt+0x1778>
   12e84:	add	r0, pc, #0
   12e88:	ldr	pc, [r0, r9, lsl #2]
   12e8c:	andeq	r2, r1, r8, asr #29
   12e90:	muleq	r1, ip, lr
   12e94:	andeq	r2, r1, r4, lsr pc
   12e98:	andeq	r2, r1, r4, ror pc
   12e9c:	cmp	r5, #127	; 0x7f
   12ea0:	bhi	12f20 <__assert_fail@plt+0x1720>
   12ea4:	bl	11614 <__ctype_b_loc@plt>
   12ea8:	sub	r1, r5, #10
   12eac:	cmp	r1, #4
   12eb0:	bcc	12e60 <__assert_fail@plt+0x1660>
   12eb4:	ldr	r0, [r0]
   12eb8:	add	r0, r0, r5, lsl #1
   12ebc:	ldrh	r0, [r0]
   12ec0:	ands	r0, r0, #1
   12ec4:	bne	12e60 <__assert_fail@plt+0x1660>
   12ec8:	cmp	r5, #10
   12ecc:	bne	12ef0 <__assert_fail@plt+0x16f0>
   12ed0:	cmp	r6, #127	; 0x7f
   12ed4:	bhi	12e34 <__assert_fail@plt+0x1634>
   12ed8:	bl	11614 <__ctype_b_loc@plt>
   12edc:	ldr	r0, [r0]
   12ee0:	ldrb	r0, [r0, r6, lsl #1]
   12ee4:	tst	r0, #1
   12ee8:	beq	12e34 <__assert_fail@plt+0x1634>
   12eec:	b	12e40 <__assert_fail@plt+0x1640>
   12ef0:	cmp	r5, #127	; 0x7f
   12ef4:	bhi	12f20 <__assert_fail@plt+0x1720>
   12ef8:	movw	r0, #53744	; 0xd1f0
   12efc:	movt	r0, #2
   12f00:	ldr	r0, [r0, #24]
   12f04:	cmp	r0, #0
   12f08:	bne	12f20 <__assert_fail@plt+0x1720>
   12f0c:	bl	11614 <__ctype_b_loc@plt>
   12f10:	ldr	r0, [r0]
   12f14:	ldrb	r0, [r0, r5, lsl #1]
   12f18:	tst	r0, #1
   12f1c:	bne	13000 <__assert_fail@plt+0x1800>
   12f20:	mov	r9, #3
   12f24:	cmp	r5, #92	; 0x5c
   12f28:	bne	12f64 <__assert_fail@plt+0x1764>
   12f2c:	mov	r6, r5
   12f30:	b	12f4c <__assert_fail@plt+0x174c>
   12f34:	cmp	r5, #10
   12f38:	beq	13280 <__assert_fail@plt+0x1a80>
   12f3c:	ldr	r6, [sp, #24]
   12f40:	mov	r9, #0
   12f44:	cmp	r5, r6
   12f48:	bne	12ff0 <__assert_fail@plt+0x17f0>
   12f4c:	ldr	r0, [r8]
   12f50:	bl	117dc <getc@plt>
   12f54:	mov	r4, #1
   12f58:	cmn	r0, #1
   12f5c:	bne	12e2c <__assert_fail@plt+0x162c>
   12f60:	b	130f8 <__assert_fail@plt+0x18f8>
   12f64:	cmp	r5, #34	; 0x22
   12f68:	cmpne	r5, #39	; 0x27
   12f6c:	beq	130bc <__assert_fail@plt+0x18bc>
   12f70:	mov	r4, #1
   12f74:	mov	r9, #0
   12f78:	cmp	r5, #0
   12f7c:	bne	12fc8 <__assert_fail@plt+0x17c8>
   12f80:	movw	r0, #53880	; 0xd278
   12f84:	movt	r0, #2
   12f88:	ldrb	r0, [r0]
   12f8c:	cmp	r0, #0
   12f90:	bne	12fc8 <__assert_fail@plt+0x17c8>
   12f94:	movw	r1, #45173	; 0xb075
   12f98:	mov	r0, #0
   12f9c:	mov	r2, #5
   12fa0:	movt	r1, #1
   12fa4:	bl	114dc <dcgettext@plt>
   12fa8:	mov	r2, r0
   12fac:	mov	r0, #0
   12fb0:	mov	r1, #0
   12fb4:	bl	115a8 <error@plt>
   12fb8:	movw	r1, #53880	; 0xd278
   12fbc:	mov	r0, #1
   12fc0:	movt	r1, #2
   12fc4:	strb	r0, [r1]
   12fc8:	ldr	r0, [sp, #16]
   12fcc:	cmp	sl, r0
   12fd0:	bcs	13258 <__assert_fail@plt+0x1a58>
   12fd4:	strb	r5, [sl], #1
   12fd8:	ldr	r0, [r8]
   12fdc:	bl	117dc <getc@plt>
   12fe0:	cmn	r0, #1
   12fe4:	mov	r6, r5
   12fe8:	bne	12e2c <__assert_fail@plt+0x162c>
   12fec:	b	130f8 <__assert_fail@plt+0x18f8>
   12ff0:	mov	r9, #2
   12ff4:	cmp	r5, #0
   12ff8:	beq	12f80 <__assert_fail@plt+0x1780>
   12ffc:	b	12fc8 <__assert_fail@plt+0x17c8>
   13000:	mov	r0, #0
   13004:	strb	r0, [sl]
   13008:	movw	r0, #53812	; 0xd234
   1300c:	movt	r0, #2
   13010:	ldr	r6, [r0]
   13014:	sub	r0, sl, r6
   13018:	add	r4, r0, #1
   1301c:	movw	r0, #53792	; 0xd220
   13020:	movt	r0, #2
   13024:	ldr	r0, [r0]
   13028:	cmp	r0, #0
   1302c:	beq	13050 <__assert_fail@plt+0x1850>
   13030:	ldrb	r1, [r6]
   13034:	ldrb	r2, [r0]
   13038:	cmp	r2, r1
   1303c:	bne	13050 <__assert_fail@plt+0x1850>
   13040:	mov	r1, r6
   13044:	bl	11440 <strcmp@plt>
   13048:	cmp	r0, #0
   1304c:	beq	13224 <__assert_fail@plt+0x1a24>
   13050:	movw	r0, #53860	; 0xd264
   13054:	mov	r1, #0
   13058:	mov	r2, #0
   1305c:	mov	r3, r4
   13060:	movt	r0, #2
   13064:	str	r1, [sp, #20]
   13068:	movw	r1, #53816	; 0xd238
   1306c:	str	r2, [sp]
   13070:	str	r2, [sp, #4]
   13074:	mov	r2, r6
   13078:	movt	r1, #2
   1307c:	ldrb	r0, [r0]
   13080:	eor	r0, r0, #1
   13084:	str	r0, [sp, #8]
   13088:	movw	r0, #53744	; 0xd1f0
   1308c:	movt	r0, #2
   13090:	bl	147f4 <__assert_fail@plt+0x2ff4>
   13094:	movw	r0, #53812	; 0xd234
   13098:	movt	r0, #2
   1309c:	ldr	sl, [r0]
   130a0:	ldr	r0, [r8]
   130a4:	bl	117dc <getc@plt>
   130a8:	mov	r4, #1
   130ac:	cmn	r0, #1
   130b0:	mov	r9, #1
   130b4:	bne	12e28 <__assert_fail@plt+0x1628>
   130b8:	b	13244 <__assert_fail@plt+0x1a44>
   130bc:	ldr	r0, [r8]
   130c0:	bl	117dc <getc@plt>
   130c4:	ldr	r1, [sp, #20]
   130c8:	movw	r6, #53876	; 0xd274
   130cc:	mov	r4, #1
   130d0:	mov	r9, #2
   130d4:	cmn	r0, #1
   130d8:	str	r5, [sp, #24]
   130dc:	movt	r6, #2
   130e0:	bne	12e24 <__assert_fail@plt+0x1624>
   130e4:	b	13108 <__assert_fail@plt+0x1908>
   130e8:	mov	r5, #0
   130ec:	mov	r1, #1
   130f0:	mov	r9, #1
   130f4:	b	13108 <__assert_fail@plt+0x1908>
   130f8:	ldr	r5, [sp, #24]
   130fc:	ldr	r1, [sp, #20]
   13100:	movw	r6, #53876	; 0xd274
   13104:	movt	r6, #2
   13108:	mov	r0, #1
   1310c:	strb	r0, [r6]
   13110:	movw	r0, #53812	; 0xd234
   13114:	movt	r0, #2
   13118:	ldr	r6, [r0]
   1311c:	cmp	sl, r6
   13120:	beq	131d4 <__assert_fail@plt+0x19d4>
   13124:	mov	r0, #0
   13128:	cmp	r9, #2
   1312c:	strb	r0, [sl], -r6
   13130:	beq	13324 <__assert_fail@plt+0x1b24>
   13134:	movw	r0, #53792	; 0xd220
   13138:	mvn	r1, r1
   1313c:	mvn	r4, #0
   13140:	movt	r0, #2
   13144:	ldr	r0, [r0]
   13148:	clz	r2, r0
   1314c:	lsr	r2, r2, #5
   13150:	orr	r1, r1, r2
   13154:	tst	r1, #1
   13158:	bne	1317c <__assert_fail@plt+0x197c>
   1315c:	ldrb	r1, [r6]
   13160:	ldrb	r2, [r0]
   13164:	cmp	r2, r1
   13168:	bne	1317c <__assert_fail@plt+0x197c>
   1316c:	mov	r1, r6
   13170:	bl	11440 <strcmp@plt>
   13174:	cmp	r0, #0
   13178:	beq	131d8 <__assert_fail@plt+0x19d8>
   1317c:	add	r4, sl, #1
   13180:	movw	r0, #53744	; 0xd1f0
   13184:	movt	r0, #2
   13188:	ldr	r0, [r0, #24]
   1318c:	cmp	r0, #0
   13190:	bne	131d8 <__assert_fail@plt+0x19d8>
   13194:	movw	r0, #53860	; 0xd264
   13198:	mov	r1, #0
   1319c:	mov	r2, r6
   131a0:	mov	r3, r4
   131a4:	movt	r0, #2
   131a8:	str	r1, [sp]
   131ac:	str	r1, [sp, #4]
   131b0:	movw	r1, #53816	; 0xd238
   131b4:	movt	r1, #2
   131b8:	ldrb	r0, [r0]
   131bc:	eor	r0, r0, #1
   131c0:	str	r0, [sp, #8]
   131c4:	movw	r0, #53744	; 0xd1f0
   131c8:	movt	r0, #2
   131cc:	bl	147f4 <__assert_fail@plt+0x2ff4>
   131d0:	b	131d8 <__assert_fail@plt+0x19d8>
   131d4:	mvn	r4, #0
   131d8:	mov	r0, r4
   131dc:	sub	sp, fp, #28
   131e0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   131e4:	mov	r0, #0
   131e8:	strb	r0, [sl], -r6
   131ec:	movw	r0, #53792	; 0xd220
   131f0:	movt	r0, #2
   131f4:	add	r4, sl, #1
   131f8:	ldr	r0, [r0]
   131fc:	cmp	r0, #0
   13200:	beq	13180 <__assert_fail@plt+0x1980>
   13204:	ldrb	r1, [r6]
   13208:	ldrb	r2, [r0]
   1320c:	cmp	r2, r1
   13210:	bne	13180 <__assert_fail@plt+0x1980>
   13214:	mov	r1, r6
   13218:	bl	11440 <strcmp@plt>
   1321c:	cmp	r0, #0
   13220:	bne	13180 <__assert_fail@plt+0x1980>
   13224:	movw	r1, #53876	; 0xd274
   13228:	mov	r0, #1
   1322c:	movt	r1, #2
   13230:	strb	r0, [r1]
   13234:	ldr	r0, [sp, #20]
   13238:	tst	r0, #1
   1323c:	mvnne	r4, #0
   13240:	b	131d8 <__assert_fail@plt+0x19d8>
   13244:	ldr	r5, [sp, #24]
   13248:	movw	r6, #53876	; 0xd274
   1324c:	mov	r9, #1
   13250:	mov	r1, #0
   13254:	b	13104 <__assert_fail@plt+0x1904>
   13258:	bl	14150 <__assert_fail@plt+0x2950>
   1325c:	movw	r1, #45312	; 0xb100
   13260:	mov	r0, #0
   13264:	mov	r2, #5
   13268:	movt	r1, #1
   1326c:	bl	114dc <dcgettext@plt>
   13270:	mov	r2, r0
   13274:	mov	r0, #1
   13278:	mov	r1, #0
   1327c:	bl	115a8 <error@plt>
   13280:	movw	r0, #53744	; 0xd1f0
   13284:	movt	r0, #2
   13288:	ldr	r0, [r0, #24]
   1328c:	cmp	r0, #0
   13290:	bne	132f0 <__assert_fail@plt+0x1af0>
   13294:	movw	r0, #53860	; 0xd264
   13298:	movt	r0, #2
   1329c:	ldrb	r0, [r0]
   132a0:	cmp	r0, #1
   132a4:	bne	132f0 <__assert_fail@plt+0x1af0>
   132a8:	movw	r0, #53744	; 0xd1f0
   132ac:	movw	r1, #53816	; 0xd238
   132b0:	movt	r0, #2
   132b4:	movt	r1, #2
   132b8:	ldr	r0, [r0, #28]
   132bc:	ldr	r1, [r1]
   132c0:	cmp	r1, r0
   132c4:	beq	132f0 <__assert_fail@plt+0x1af0>
   132c8:	movw	r0, #53744	; 0xd1f0
   132cc:	movt	r0, #2
   132d0:	ldr	r0, [r0]
   132d4:	cmp	r0, #0
   132d8:	bne	132f0 <__assert_fail@plt+0x1af0>
   132dc:	movw	r0, #53744	; 0xd1f0
   132e0:	movw	r1, #53816	; 0xd238
   132e4:	movt	r0, #2
   132e8:	movt	r1, #2
   132ec:	bl	14a64 <__assert_fail@plt+0x3264>
   132f0:	movw	r1, #45071	; 0xb00f
   132f4:	mov	r0, #0
   132f8:	mov	r2, #5
   132fc:	movt	r1, #1
   13300:	bl	114dc <dcgettext@plt>
   13304:	ldr	r2, [sp, #24]
   13308:	movw	r1, #45166	; 0xb06e
   1330c:	mov	r4, r0
   13310:	movw	r0, #45159	; 0xb067
   13314:	movt	r0, #1
   13318:	movt	r1, #1
   1331c:	cmp	r2, #34	; 0x22
   13320:	b	133c0 <__assert_fail@plt+0x1bc0>
   13324:	movw	r0, #53744	; 0xd1f0
   13328:	movt	r0, #2
   1332c:	ldr	r0, [r0, #24]
   13330:	cmp	r0, #0
   13334:	bne	13394 <__assert_fail@plt+0x1b94>
   13338:	movw	r0, #53860	; 0xd264
   1333c:	movt	r0, #2
   13340:	ldrb	r0, [r0]
   13344:	cmp	r0, #1
   13348:	bne	13394 <__assert_fail@plt+0x1b94>
   1334c:	movw	r0, #53744	; 0xd1f0
   13350:	movw	r1, #53816	; 0xd238
   13354:	movt	r0, #2
   13358:	movt	r1, #2
   1335c:	ldr	r0, [r0, #28]
   13360:	ldr	r1, [r1]
   13364:	cmp	r1, r0
   13368:	beq	13394 <__assert_fail@plt+0x1b94>
   1336c:	movw	r0, #53744	; 0xd1f0
   13370:	movt	r0, #2
   13374:	ldr	r0, [r0]
   13378:	cmp	r0, #0
   1337c:	bne	13394 <__assert_fail@plt+0x1b94>
   13380:	movw	r0, #53744	; 0xd1f0
   13384:	movw	r1, #53816	; 0xd238
   13388:	movt	r0, #2
   1338c:	movt	r1, #2
   13390:	bl	14a64 <__assert_fail@plt+0x3264>
   13394:	movw	r1, #45071	; 0xb00f
   13398:	mov	r0, #0
   1339c:	mov	r2, #5
   133a0:	movt	r1, #1
   133a4:	bl	114dc <dcgettext@plt>
   133a8:	movw	r1, #45166	; 0xb06e
   133ac:	mov	r4, r0
   133b0:	movw	r0, #45159	; 0xb067
   133b4:	cmp	r5, #34	; 0x22
   133b8:	movt	r0, #1
   133bc:	movt	r1, #1
   133c0:	moveq	r1, r0
   133c4:	mov	r0, #0
   133c8:	mov	r2, #5
   133cc:	bl	114dc <dcgettext@plt>
   133d0:	mov	r3, r0
   133d4:	mov	r0, #1
   133d8:	mov	r1, #0
   133dc:	mov	r2, r4
   133e0:	bl	115a8 <error@plt>
   133e4:	bx	lr
   133e8:	push	{r4, r5, fp, lr}
   133ec:	add	fp, sp, #8
   133f0:	bl	11620 <getpid@plt>
   133f4:	movw	r1, #53736	; 0xd1e8
   133f8:	movt	r1, #2
   133fc:	ldr	r1, [r1]
   13400:	cmp	r0, r1
   13404:	bne	1345c <__assert_fail@plt+0x1c5c>
   13408:	movw	r4, #53904	; 0xd290
   1340c:	movt	r4, #2
   13410:	ldrb	r0, [r4]
   13414:	cmp	r0, #0
   13418:	popne	{r4, r5, fp, pc}
   1341c:	mov	r0, #1
   13420:	mov	r1, #0
   13424:	mov	r5, #0
   13428:	strb	r0, [r4]
   1342c:	mov	r0, #1
   13430:	bl	141b4 <__assert_fail@plt+0x29b4>
   13434:	movw	r0, #53740	; 0xd1ec
   13438:	strb	r5, [r4]
   1343c:	movt	r0, #2
   13440:	ldr	r1, [r0]
   13444:	movw	r0, #53872	; 0xd270
   13448:	movt	r0, #2
   1344c:	ldr	r2, [r0]
   13450:	cmp	r1, r2
   13454:	bne	1347c <__assert_fail@plt+0x1c7c>
   13458:	pop	{r4, r5, fp, pc}
   1345c:	movw	r0, #46061	; 0xb3ed
   13460:	movw	r1, #43189	; 0xa8b5
   13464:	movw	r3, #46081	; 0xb401
   13468:	movw	r2, #1605	; 0x645
   1346c:	movt	r0, #1
   13470:	movt	r1, #1
   13474:	movt	r3, #1
   13478:	bl	11800 <__assert_fail@plt>
   1347c:	ldr	r0, [r0]
   13480:	bl	114a0 <_exit@plt>
   13484:	push	{fp, lr}
   13488:	mov	fp, sp
   1348c:	movw	r1, #44336	; 0xad30
   13490:	mov	r0, #0
   13494:	mov	r2, #5
   13498:	movt	r1, #1
   1349c:	bl	114dc <dcgettext@plt>
   134a0:	mov	r2, r0
   134a4:	mov	r0, #1
   134a8:	mov	r1, #0
   134ac:	bl	115a8 <error@plt>
   134b0:	push	{r4, r5, r6, r7, fp, lr}
   134b4:	add	fp, sp, #16
   134b8:	sub	sp, sp, #32
   134bc:	movw	r5, #53608	; 0xd168
   134c0:	mov	r4, r3
   134c4:	movt	r5, #2
   134c8:	ldr	r0, [r5]
   134cc:	cmp	r0, #0
   134d0:	beq	13500 <__assert_fail@plt+0x1d00>
   134d4:	ldr	r0, [r5]
   134d8:	movw	r6, #53884	; 0xd27c
   134dc:	movt	r6, #2
   134e0:	ldr	r1, [r6]
   134e4:	cmp	r1, r0
   134e8:	bcc	13500 <__assert_fail@plt+0x1d00>
   134ec:	mov	r0, #0
   134f0:	mov	r1, #1
   134f4:	bl	141b4 <__assert_fail@plt+0x29b4>
   134f8:	ldr	r0, [r5]
   134fc:	b	134e0 <__assert_fail@plt+0x1ce0>
   13500:	movw	r5, #53798	; 0xd226
   13504:	movt	r5, #2
   13508:	ldrb	r0, [r5]
   1350c:	cmp	r0, #1
   13510:	bne	13534 <__assert_fail@plt+0x1d34>
   13514:	mov	r0, #1
   13518:	mov	r6, #1
   1351c:	bl	14478 <__assert_fail@plt+0x2c78>
   13520:	cmp	r0, #0
   13524:	beq	13988 <__assert_fail@plt+0x2188>
   13528:	ldrb	r0, [r5]
   1352c:	cmp	r0, #0
   13530:	bne	1354c <__assert_fail@plt+0x1d4c>
   13534:	movw	r0, #53796	; 0xd224
   13538:	movt	r0, #2
   1353c:	ldrb	r0, [r0]
   13540:	cmp	r0, #1
   13544:	moveq	r0, #0
   13548:	bleq	14478 <__assert_fail@plt+0x2c78>
   1354c:	mov	r0, #0
   13550:	mov	r1, #0
   13554:	bl	141b4 <__assert_fail@plt+0x29b4>
   13558:	add	r0, sp, #4
   1355c:	bl	18a84 <__assert_fail@plt+0x7284>
   13560:	cmp	r0, #0
   13564:	bne	13aac <__assert_fail@plt+0x22ac>
   13568:	ldr	r0, [sp, #8]
   1356c:	mov	r1, #2
   13570:	mov	r2, #1
   13574:	bl	19f88 <__assert_fail@plt+0x8788>
   13578:	bl	11734 <fork@plt>
   1357c:	mov	r5, r0
   13580:	cmn	r0, #1
   13584:	ble	1366c <__assert_fail@plt+0x1e6c>
   13588:	cmp	r5, #0
   1358c:	beq	13604 <__assert_fail@plt+0x1e04>
   13590:	cmn	r5, #1
   13594:	beq	13ac0 <__assert_fail@plt+0x22c0>
   13598:	ldr	r0, [sp, #8]
   1359c:	bl	117e8 <close@plt>
   135a0:	ldr	r0, [sp, #4]
   135a4:	add	r1, sp, #12
   135a8:	mov	r2, #4
   135ac:	bl	189a8 <__assert_fail@plt+0x71a8>
   135b0:	cmp	r0, #4
   135b4:	beq	13708 <__assert_fail@plt+0x1f08>
   135b8:	mov	r4, r0
   135bc:	cmp	r0, #0
   135c0:	beq	136c8 <__assert_fail@plt+0x1ec8>
   135c4:	cmn	r4, #1
   135c8:	bne	13ad4 <__assert_fail@plt+0x22d4>
   135cc:	ldr	r0, [sp, #4]
   135d0:	bl	117e8 <close@plt>
   135d4:	bl	11680 <__errno_location@plt>
   135d8:	movw	r1, #45381	; 0xb145
   135dc:	ldr	r4, [r0]
   135e0:	mov	r0, #0
   135e4:	mov	r2, #5
   135e8:	movt	r1, #1
   135ec:	bl	114dc <dcgettext@plt>
   135f0:	mov	r2, r0
   135f4:	mov	r0, #0
   135f8:	mov	r1, r4
   135fc:	bl	115a8 <error@plt>
   13600:	b	1397c <__assert_fail@plt+0x217c>
   13604:	ldr	r0, [sp, #4]
   13608:	bl	117e8 <close@plt>
   1360c:	movw	r0, #53872	; 0xd270
   13610:	mov	r1, #0
   13614:	movt	r0, #2
   13618:	str	r1, [r0]
   1361c:	bl	15700 <__assert_fail@plt+0x3f00>
   13620:	cmp	r0, #0
   13624:	beq	1362c <__assert_fail@plt+0x1e2c>
   13628:	bl	15720 <__assert_fail@plt+0x3f20>
   1362c:	movw	r5, #53892	; 0xd284
   13630:	movw	r0, #53896	; 0xd288
   13634:	movt	r5, #2
   13638:	movt	r0, #2
   1363c:	ldr	r6, [r5]
   13640:	cmp	r6, #0
   13644:	beq	136c0 <__assert_fail@plt+0x1ec0>
   13648:	ldr	r0, [r0]
   1364c:	mov	r3, #0
   13650:	ldr	r1, [r0, r3, lsl #2]
   13654:	cmp	r1, #0
   13658:	beq	13740 <__assert_fail@plt+0x1f40>
   1365c:	add	r3, r3, #1
   13660:	cmp	r6, r3
   13664:	bne	13650 <__assert_fail@plt+0x1e50>
   13668:	b	13748 <__assert_fail@plt+0x1f48>
   1366c:	bl	11680 <__errno_location@plt>
   13670:	mov	r6, r0
   13674:	ldr	r0, [r0]
   13678:	cmp	r0, #11
   1367c:	bne	13588 <__assert_fail@plt+0x1d88>
   13680:	movw	r7, #53884	; 0xd27c
   13684:	movt	r7, #2
   13688:	ldr	r0, [r7]
   1368c:	cmp	r0, #0
   13690:	beq	13588 <__assert_fail@plt+0x1d88>
   13694:	mov	r0, #0
   13698:	mov	r1, #1
   1369c:	bl	141b4 <__assert_fail@plt+0x29b4>
   136a0:	bl	11734 <fork@plt>
   136a4:	mov	r5, r0
   136a8:	cmp	r0, #0
   136ac:	bpl	13588 <__assert_fail@plt+0x1d88>
   136b0:	ldr	r0, [r6]
   136b4:	cmp	r0, #11
   136b8:	beq	13688 <__assert_fail@plt+0x1e88>
   136bc:	b	13588 <__assert_fail@plt+0x1d88>
   136c0:	ldr	r0, [r0]
   136c4:	b	13748 <__assert_fail@plt+0x1f48>
   136c8:	movw	r4, #53892	; 0xd284
   136cc:	movw	r7, #53896	; 0xd288
   136d0:	movt	r4, #2
   136d4:	movt	r7, #2
   136d8:	ldr	r6, [r4]
   136dc:	cmp	r6, #0
   136e0:	beq	1388c <__assert_fail@plt+0x208c>
   136e4:	ldr	r0, [r7]
   136e8:	mov	r1, #0
   136ec:	ldr	r2, [r0, r1, lsl #2]
   136f0:	cmp	r2, #0
   136f4:	beq	13904 <__assert_fail@plt+0x2104>
   136f8:	add	r1, r1, #1
   136fc:	cmp	r6, r1
   13700:	bne	136ec <__assert_fail@plt+0x1eec>
   13704:	b	1390c <__assert_fail@plt+0x210c>
   13708:	ldr	r0, [sp, #4]
   1370c:	bl	117e8 <close@plt>
   13710:	mov	r1, sp
   13714:	mov	r0, r5
   13718:	mov	r2, #0
   1371c:	mov	r6, #0
   13720:	bl	1156c <waitpid@plt>
   13724:	ldr	r0, [sp, #12]
   13728:	cmp	r0, #7
   1372c:	beq	13988 <__assert_fail@plt+0x2188>
   13730:	cmp	r0, #2
   13734:	bne	13b04 <__assert_fail@plt+0x2304>
   13738:	mov	r0, #127	; 0x7f
   1373c:	bl	1162c <exit@plt>
   13740:	cmp	r6, r3
   13744:	bne	1378c <__assert_fail@plt+0x1f8c>
   13748:	mov	r1, r5
   1374c:	mov	r2, #4
   13750:	bl	19338 <__assert_fail@plt+0x7b38>
   13754:	movw	r1, #53896	; 0xd288
   13758:	movt	r1, #2
   1375c:	str	r0, [r1]
   13760:	ldr	r1, [r5]
   13764:	cmp	r6, r1
   13768:	bcs	13788 <__assert_fail@plt+0x1f88>
   1376c:	mov	r1, #0
   13770:	mov	r2, r6
   13774:	str	r1, [r0, r2, lsl #2]
   13778:	add	r2, r2, #1
   1377c:	ldr	r3, [r5]
   13780:	cmp	r2, r3
   13784:	bcc	13774 <__assert_fail@plt+0x1f74>
   13788:	mov	r3, r6
   1378c:	ldr	r1, [r0, r3, lsl #2]
   13790:	cmp	r1, #0
   13794:	bne	13994 <__assert_fail@plt+0x2194>
   13798:	mov	r1, #0
   1379c:	movw	r2, #45888	; 0xb340
   137a0:	str	r1, [r0, r3, lsl #2]
   137a4:	movw	r0, #53868	; 0xd26c
   137a8:	mov	r1, #1
   137ac:	movt	r2, #1
   137b0:	movt	r0, #2
   137b4:	strb	r1, [r0]
   137b8:	movw	r0, #53884	; 0xd27c
   137bc:	movt	r0, #2
   137c0:	ldr	r1, [r0]
   137c4:	add	r1, r1, #1
   137c8:	str	r1, [r0]
   137cc:	add	r0, sp, #12
   137d0:	mov	r1, #19
   137d4:	bl	1168c <snprintf@plt>
   137d8:	cmp	r0, #20
   137dc:	bcs	1386c <__assert_fail@plt+0x206c>
   137e0:	movw	r6, #53800	; 0xd228
   137e4:	movt	r6, #2
   137e8:	ldr	r0, [r6]
   137ec:	cmp	r0, #0
   137f0:	beq	13838 <__assert_fail@plt+0x2038>
   137f4:	add	r1, sp, #12
   137f8:	mov	r2, #1
   137fc:	bl	11668 <setenv@plt>
   13800:	cmn	r0, #1
   13804:	bgt	13838 <__assert_fail@plt+0x2038>
   13808:	bl	11680 <__errno_location@plt>
   1380c:	movw	r1, #45981	; 0xb39d
   13810:	ldr	r5, [r0]
   13814:	mov	r0, #0
   13818:	mov	r2, #5
   1381c:	movt	r1, #1
   13820:	bl	114dc <dcgettext@plt>
   13824:	ldr	r3, [r6]
   13828:	mov	r2, r0
   1382c:	mov	r0, #0
   13830:	mov	r1, r5
   13834:	bl	115a8 <error@plt>
   13838:	movw	r1, #53808	; 0xd230
   1383c:	movw	r7, #53797	; 0xd225
   13840:	movt	r1, #2
   13844:	movt	r7, #2
   13848:	ldrb	r1, [r1]
   1384c:	ldrb	r0, [r7]
   13850:	cmp	r1, #0
   13854:	beq	13894 <__assert_fail@plt+0x2094>
   13858:	cmp	r0, #0
   1385c:	beq	139ec <__assert_fail@plt+0x21ec>
   13860:	movw	r5, #45747	; 0xb2b3
   13864:	movt	r5, #1
   13868:	b	138ac <__assert_fail@plt+0x20ac>
   1386c:	movw	r0, #45891	; 0xb343
   13870:	movw	r1, #43189	; 0xa8b5
   13874:	movw	r3, #45949	; 0xb37d
   13878:	movw	r2, #1190	; 0x4a6
   1387c:	movt	r0, #1
   13880:	movt	r1, #1
   13884:	movt	r3, #1
   13888:	bl	11800 <__assert_fail@plt>
   1388c:	ldr	r0, [r7]
   13890:	b	1390c <__assert_fail@plt+0x210c>
   13894:	movw	r1, #45747	; 0xb2b3
   13898:	movw	r5, #45823	; 0xb2ff
   1389c:	cmp	r0, #0
   138a0:	movt	r1, #1
   138a4:	movt	r5, #1
   138a8:	movne	r5, r1
   138ac:	mov	r0, #0
   138b0:	bl	117e8 <close@plt>
   138b4:	mov	r0, r5
   138b8:	mov	r1, #0
   138bc:	bl	15f1c <__assert_fail@plt+0x471c>
   138c0:	cmn	r0, #1
   138c4:	bgt	139b4 <__assert_fail@plt+0x21b4>
   138c8:	ldrb	r7, [r7]
   138cc:	bl	11680 <__errno_location@plt>
   138d0:	ldr	r6, [r0]
   138d4:	mov	r0, #0
   138d8:	mov	r1, #8
   138dc:	mov	r2, r5
   138e0:	bl	1828c <__assert_fail@plt+0x6a8c>
   138e4:	movw	r2, #50687	; 0xc5ff
   138e8:	mov	r3, r0
   138ec:	cmp	r7, #1
   138f0:	movt	r2, #1
   138f4:	bne	139e0 <__assert_fail@plt+0x21e0>
   138f8:	mov	r0, #1
   138fc:	mov	r1, r6
   13900:	bl	115a8 <error@plt>
   13904:	cmp	r6, r1
   13908:	bne	13948 <__assert_fail@plt+0x2148>
   1390c:	mov	r1, r4
   13910:	mov	r2, #4
   13914:	bl	19338 <__assert_fail@plt+0x7b38>
   13918:	ldr	r1, [r4]
   1391c:	str	r0, [r7]
   13920:	cmp	r6, r1
   13924:	bcs	13944 <__assert_fail@plt+0x2144>
   13928:	mov	r1, #0
   1392c:	mov	r2, r6
   13930:	str	r1, [r0, r2, lsl #2]
   13934:	add	r2, r2, #1
   13938:	ldr	r3, [r4]
   1393c:	cmp	r2, r3
   13940:	bcc	13930 <__assert_fail@plt+0x2130>
   13944:	mov	r1, r6
   13948:	ldr	r2, [r0, r1, lsl #2]
   1394c:	cmp	r2, #0
   13950:	bne	13994 <__assert_fail@plt+0x2194>
   13954:	str	r5, [r0, r1, lsl #2]
   13958:	movw	r0, #53868	; 0xd26c
   1395c:	mov	r1, #1
   13960:	movt	r0, #2
   13964:	strb	r1, [r0]
   13968:	movw	r0, #53884	; 0xd27c
   1396c:	movt	r0, #2
   13970:	ldr	r1, [r0]
   13974:	add	r1, r1, #1
   13978:	str	r1, [r0]
   1397c:	ldr	r0, [sp, #4]
   13980:	bl	117e8 <close@plt>
   13984:	mov	r6, #1
   13988:	mov	r0, r6
   1398c:	sub	sp, fp, #16
   13990:	pop	{r4, r5, r6, r7, fp, pc}
   13994:	movw	r0, #46019	; 0xb3c3
   13998:	movw	r1, #43189	; 0xa8b5
   1399c:	movw	r3, #46032	; 0xb3d0
   139a0:	movw	r2, #1477	; 0x5c5
   139a4:	movt	r0, #1
   139a8:	movt	r1, #1
   139ac:	movt	r3, #1
   139b0:	bl	11800 <__assert_fail@plt>
   139b4:	mov	r6, r0
   139b8:	cmp	r0, #0
   139bc:	beq	139ec <__assert_fail@plt+0x21ec>
   139c0:	mov	r0, r6
   139c4:	mov	r1, #0
   139c8:	bl	114f4 <dup2@plt>
   139cc:	cmp	r0, #0
   139d0:	bne	13a80 <__assert_fail@plt+0x2280>
   139d4:	mov	r0, r6
   139d8:	bl	117e8 <close@plt>
   139dc:	b	139ec <__assert_fail@plt+0x21ec>
   139e0:	mov	r0, #0
   139e4:	mov	r1, r6
   139e8:	bl	115a8 <error@plt>
   139ec:	mov	r0, r4
   139f0:	bl	15224 <__assert_fail@plt+0x3a24>
   139f4:	cmp	r0, #0
   139f8:	beq	13a10 <__assert_fail@plt+0x2210>
   139fc:	bl	11680 <__errno_location@plt>
   13a00:	mov	r5, r0
   13a04:	mov	r0, #7
   13a08:	str	r0, [r5]
   13a0c:	b	13a30 <__assert_fail@plt+0x2230>
   13a10:	ldr	r0, [r4]
   13a14:	mov	r1, r4
   13a18:	bl	114b8 <execvp@plt>
   13a1c:	bl	11680 <__errno_location@plt>
   13a20:	mov	r5, r0
   13a24:	ldr	r0, [r0]
   13a28:	cmp	r0, #0
   13a2c:	beq	13a40 <__assert_fail@plt+0x2240>
   13a30:	ldr	r0, [sp, #8]
   13a34:	mov	r1, r5
   13a38:	mov	r2, #4
   13a3c:	bl	116bc <write@plt>
   13a40:	ldr	r0, [sp, #8]
   13a44:	bl	117e8 <close@plt>
   13a48:	ldr	r1, [r5]
   13a4c:	mov	r0, #126	; 0x7e
   13a50:	cmp	r1, #7
   13a54:	beq	13a7c <__assert_fail@plt+0x227c>
   13a58:	ldr	r3, [r4]
   13a5c:	movw	r2, #50687	; 0xc5ff
   13a60:	mov	r0, #0
   13a64:	movt	r2, #1
   13a68:	bl	115a8 <error@plt>
   13a6c:	ldr	r1, [r5]
   13a70:	mov	r0, #126	; 0x7e
   13a74:	cmp	r1, #2
   13a78:	movweq	r0, #127	; 0x7f
   13a7c:	bl	114a0 <_exit@plt>
   13a80:	bl	11680 <__errno_location@plt>
   13a84:	ldr	r4, [r0]
   13a88:	movw	r1, #45833	; 0xb309
   13a8c:	movt	r1, #1
   13a90:	mov	r0, #0
   13a94:	mov	r2, #5
   13a98:	bl	114dc <dcgettext@plt>
   13a9c:	mov	r2, r0
   13aa0:	mov	r0, #1
   13aa4:	mov	r1, r4
   13aa8:	bl	115a8 <error@plt>
   13aac:	bl	11680 <__errno_location@plt>
   13ab0:	ldr	r4, [r0]
   13ab4:	movw	r1, #45335	; 0xb117
   13ab8:	movt	r1, #1
   13abc:	b	13a90 <__assert_fail@plt+0x2290>
   13ac0:	bl	11680 <__errno_location@plt>
   13ac4:	ldr	r4, [r0]
   13ac8:	movw	r1, #45369	; 0xb139
   13acc:	movt	r1, #1
   13ad0:	b	13a90 <__assert_fail@plt+0x2290>
   13ad4:	bl	11680 <__errno_location@plt>
   13ad8:	movw	r1, #45471	; 0xb19f
   13adc:	ldr	r5, [r0]
   13ae0:	mov	r0, #0
   13ae4:	mov	r2, #5
   13ae8:	movt	r1, #1
   13aec:	bl	114dc <dcgettext@plt>
   13af0:	mov	r2, r0
   13af4:	mov	r0, #1
   13af8:	mov	r1, r5
   13afc:	mov	r3, r4
   13b00:	bl	115a8 <error@plt>
   13b04:	mov	r0, #126	; 0x7e
   13b08:	bl	1162c <exit@plt>
   13b0c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13b10:	add	fp, sp, #28
   13b14:	sub	sp, sp, #12
   13b18:	movw	sl, #53881	; 0xd279
   13b1c:	mvn	r9, #0
   13b20:	movt	sl, #2
   13b24:	ldrb	r0, [sl]
   13b28:	cmp	r0, #0
   13b2c:	bne	13c48 <__assert_fail@plt+0x2448>
   13b30:	movw	r0, #53744	; 0xd1f0
   13b34:	movw	r7, #53804	; 0xd22c
   13b38:	movt	r0, #2
   13b3c:	movt	r7, #2
   13b40:	ldr	r5, [r0, #12]
   13b44:	movw	r0, #53812	; 0xd234
   13b48:	movt	r0, #2
   13b4c:	ldr	r6, [r0]
   13b50:	movw	r0, #53816	; 0xd238
   13b54:	movt	r0, #2
   13b58:	ldr	r4, [r0, #20]
   13b5c:	ldr	r0, [r7]
   13b60:	bl	117dc <getc@plt>
   13b64:	cmn	r0, #1
   13b68:	beq	13ba8 <__assert_fail@plt+0x23a8>
   13b6c:	movw	r8, #53788	; 0xd21c
   13b70:	add	r1, r6, r5
   13b74:	mvn	r2, r4
   13b78:	movt	r8, #2
   13b7c:	add	r5, r2, r1
   13b80:	ldrb	r1, [r8]
   13b84:	cmp	r0, r1
   13b88:	beq	13bd4 <__assert_fail@plt+0x23d4>
   13b8c:	cmp	r6, r5
   13b90:	bcs	13c54 <__assert_fail@plt+0x2454>
   13b94:	strb	r0, [r6], #1
   13b98:	ldr	r0, [r7]
   13b9c:	bl	117dc <getc@plt>
   13ba0:	cmn	r0, #1
   13ba4:	bne	13b80 <__assert_fail@plt+0x2380>
   13ba8:	mov	r0, #1
   13bac:	strb	r0, [sl]
   13bb0:	movw	r0, #53812	; 0xd234
   13bb4:	movt	r0, #2
   13bb8:	ldr	r2, [r0]
   13bbc:	cmp	r6, r2
   13bc0:	beq	13c48 <__assert_fail@plt+0x2448>
   13bc4:	mov	r0, #0
   13bc8:	strb	r0, [r6], -r2
   13bcc:	add	r9, r6, #1
   13bd0:	b	13c04 <__assert_fail@plt+0x2404>
   13bd4:	movw	r0, #53864	; 0xd268
   13bd8:	movt	r0, #2
   13bdc:	ldr	r1, [r0]
   13be0:	add	r1, r1, #1
   13be4:	str	r1, [r0]
   13be8:	movw	r1, #53812	; 0xd234
   13bec:	mov	r0, #0
   13bf0:	movt	r1, #2
   13bf4:	strb	r0, [r6]
   13bf8:	ldr	r2, [r1]
   13bfc:	sub	r1, r6, r2
   13c00:	add	r9, r1, #1
   13c04:	movw	r1, #53744	; 0xd1f0
   13c08:	movt	r1, #2
   13c0c:	ldr	r1, [r1, #24]
   13c10:	cmp	r1, #0
   13c14:	bne	13c48 <__assert_fail@plt+0x2448>
   13c18:	movw	r1, #53860	; 0xd264
   13c1c:	str	r0, [sp]
   13c20:	mov	r3, r9
   13c24:	movt	r1, #2
   13c28:	ldrb	r1, [r1]
   13c2c:	eor	r1, r1, #1
   13c30:	stmib	sp, {r0, r1}
   13c34:	movw	r0, #53744	; 0xd1f0
   13c38:	movw	r1, #53816	; 0xd238
   13c3c:	movt	r0, #2
   13c40:	movt	r1, #2
   13c44:	bl	147f4 <__assert_fail@plt+0x2ff4>
   13c48:	mov	r0, r9
   13c4c:	sub	sp, fp, #28
   13c50:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13c54:	bl	14150 <__assert_fail@plt+0x2950>
   13c58:	movw	r1, #45312	; 0xb100
   13c5c:	mov	r0, #0
   13c60:	mov	r2, #5
   13c64:	movt	r1, #1
   13c68:	bl	114dc <dcgettext@plt>
   13c6c:	mov	r2, r0
   13c70:	mov	r0, #1
   13c74:	mov	r1, #0
   13c78:	bl	115a8 <error@plt>
   13c7c:	push	{fp, lr}
   13c80:	mov	fp, sp
   13c84:	cmp	r0, #0
   13c88:	bne	13f5c <__assert_fail@plt+0x275c>
   13c8c:	movw	r5, #53724	; 0xd1dc
   13c90:	movw	r1, #46281	; 0xb4c9
   13c94:	mov	r0, #0
   13c98:	mov	r2, #5
   13c9c:	movt	r5, #2
   13ca0:	movt	r1, #1
   13ca4:	ldr	r4, [r5]
   13ca8:	bl	114dc <dcgettext@plt>
   13cac:	movw	r6, #53936	; 0xd2b0
   13cb0:	mov	r1, r0
   13cb4:	mov	r0, r4
   13cb8:	movt	r6, #2
   13cbc:	ldr	r2, [r6]
   13cc0:	bl	11674 <fprintf@plt>
   13cc4:	movw	r1, #46330	; 0xb4fa
   13cc8:	mov	r0, #0
   13ccc:	mov	r2, #5
   13cd0:	movt	r1, #1
   13cd4:	bl	114dc <dcgettext@plt>
   13cd8:	ldr	r1, [r5]
   13cdc:	bl	117b8 <fputs@plt>
   13ce0:	movw	r1, #46408	; 0xb548
   13ce4:	mov	r0, #0
   13ce8:	mov	r2, #5
   13cec:	movt	r1, #1
   13cf0:	bl	114dc <dcgettext@plt>
   13cf4:	ldr	r1, [r5]
   13cf8:	bl	117b8 <fputs@plt>
   13cfc:	movw	r1, #46525	; 0xb5bd
   13d00:	mov	r0, #0
   13d04:	mov	r2, #5
   13d08:	movt	r1, #1
   13d0c:	bl	114dc <dcgettext@plt>
   13d10:	ldr	r1, [r5]
   13d14:	bl	117b8 <fputs@plt>
   13d18:	movw	r1, #46737	; 0xb691
   13d1c:	mov	r0, #0
   13d20:	mov	r2, #5
   13d24:	movt	r1, #1
   13d28:	bl	114dc <dcgettext@plt>
   13d2c:	ldr	r1, [r5]
   13d30:	bl	117b8 <fputs@plt>
   13d34:	movw	r1, #46814	; 0xb6de
   13d38:	mov	r0, #0
   13d3c:	mov	r2, #5
   13d40:	movt	r1, #1
   13d44:	bl	114dc <dcgettext@plt>
   13d48:	ldr	r1, [r5]
   13d4c:	bl	117b8 <fputs@plt>
   13d50:	movw	r1, #47048	; 0xb7c8
   13d54:	mov	r0, #0
   13d58:	mov	r2, #5
   13d5c:	movt	r1, #1
   13d60:	bl	114dc <dcgettext@plt>
   13d64:	ldr	r1, [r5]
   13d68:	bl	117b8 <fputs@plt>
   13d6c:	movw	r1, #47273	; 0xb8a9
   13d70:	mov	r0, #0
   13d74:	mov	r2, #5
   13d78:	movt	r1, #1
   13d7c:	bl	114dc <dcgettext@plt>
   13d80:	ldr	r1, [r5]
   13d84:	bl	117b8 <fputs@plt>
   13d88:	movw	r1, #47422	; 0xb93e
   13d8c:	mov	r0, #0
   13d90:	mov	r2, #5
   13d94:	movt	r1, #1
   13d98:	bl	114dc <dcgettext@plt>
   13d9c:	ldr	r1, [r5]
   13da0:	bl	117b8 <fputs@plt>
   13da4:	movw	r1, #47474	; 0xb972
   13da8:	mov	r0, #0
   13dac:	mov	r2, #5
   13db0:	movt	r1, #1
   13db4:	bl	114dc <dcgettext@plt>
   13db8:	ldr	r1, [r5]
   13dbc:	bl	117b8 <fputs@plt>
   13dc0:	movw	r1, #47685	; 0xba45
   13dc4:	mov	r0, #0
   13dc8:	mov	r2, #5
   13dcc:	movt	r1, #1
   13dd0:	bl	114dc <dcgettext@plt>
   13dd4:	ldr	r1, [r5]
   13dd8:	bl	117b8 <fputs@plt>
   13ddc:	movw	r1, #47811	; 0xbac3
   13de0:	mov	r0, #0
   13de4:	mov	r2, #5
   13de8:	movt	r1, #1
   13dec:	bl	114dc <dcgettext@plt>
   13df0:	ldr	r1, [r5]
   13df4:	bl	117b8 <fputs@plt>
   13df8:	movw	r1, #47970	; 0xbb62
   13dfc:	mov	r0, #0
   13e00:	mov	r2, #5
   13e04:	movt	r1, #1
   13e08:	bl	114dc <dcgettext@plt>
   13e0c:	ldr	r1, [r5]
   13e10:	bl	117b8 <fputs@plt>
   13e14:	movw	r1, #48050	; 0xbbb2
   13e18:	mov	r0, #0
   13e1c:	mov	r2, #5
   13e20:	movt	r1, #1
   13e24:	bl	114dc <dcgettext@plt>
   13e28:	ldr	r1, [r5]
   13e2c:	bl	117b8 <fputs@plt>
   13e30:	movw	r1, #48266	; 0xbc8a
   13e34:	mov	r0, #0
   13e38:	mov	r2, #5
   13e3c:	movt	r1, #1
   13e40:	bl	114dc <dcgettext@plt>
   13e44:	ldr	r1, [r5]
   13e48:	bl	117b8 <fputs@plt>
   13e4c:	movw	r1, #48340	; 0xbcd4
   13e50:	mov	r0, #0
   13e54:	mov	r2, #5
   13e58:	movt	r1, #1
   13e5c:	bl	114dc <dcgettext@plt>
   13e60:	ldr	r1, [r5]
   13e64:	bl	117b8 <fputs@plt>
   13e68:	movw	r1, #48403	; 0xbd13
   13e6c:	mov	r0, #0
   13e70:	mov	r2, #5
   13e74:	movt	r1, #1
   13e78:	bl	114dc <dcgettext@plt>
   13e7c:	ldr	r1, [r5]
   13e80:	bl	117b8 <fputs@plt>
   13e84:	movw	r1, #48483	; 0xbd63
   13e88:	mov	r0, #0
   13e8c:	mov	r2, #5
   13e90:	movt	r1, #1
   13e94:	bl	114dc <dcgettext@plt>
   13e98:	ldr	r1, [r5]
   13e9c:	bl	117b8 <fputs@plt>
   13ea0:	movw	r1, #48696	; 0xbe38
   13ea4:	mov	r0, #0
   13ea8:	mov	r2, #5
   13eac:	movt	r1, #1
   13eb0:	bl	114dc <dcgettext@plt>
   13eb4:	ldr	r1, [r5]
   13eb8:	bl	117b8 <fputs@plt>
   13ebc:	movw	r1, #48770	; 0xbe82
   13ec0:	mov	r0, #0
   13ec4:	mov	r2, #5
   13ec8:	movt	r1, #1
   13ecc:	bl	114dc <dcgettext@plt>
   13ed0:	ldr	r1, [r5]
   13ed4:	bl	117b8 <fputs@plt>
   13ed8:	movw	r1, #48837	; 0xbec5
   13edc:	mov	r0, #0
   13ee0:	mov	r2, #5
   13ee4:	movt	r1, #1
   13ee8:	bl	114dc <dcgettext@plt>
   13eec:	ldr	r1, [r5]
   13ef0:	bl	117b8 <fputs@plt>
   13ef4:	movw	r1, #48906	; 0xbf0a
   13ef8:	mov	r0, #0
   13efc:	mov	r2, #5
   13f00:	movt	r1, #1
   13f04:	bl	114dc <dcgettext@plt>
   13f08:	ldr	r1, [r5]
   13f0c:	bl	117b8 <fputs@plt>
   13f10:	movw	r1, #48976	; 0xbf50
   13f14:	mov	r0, #0
   13f18:	mov	r2, #5
   13f1c:	movt	r1, #1
   13f20:	bl	114dc <dcgettext@plt>
   13f24:	ldr	r1, [r5]
   13f28:	bl	117b8 <fputs@plt>
   13f2c:	movw	r1, #49035	; 0xbf8b
   13f30:	mov	r0, #0
   13f34:	mov	r2, #5
   13f38:	movt	r1, #1
   13f3c:	bl	114dc <dcgettext@plt>
   13f40:	ldr	r1, [r5]
   13f44:	bl	117b8 <fputs@plt>
   13f48:	ldr	r0, [r5]
   13f4c:	ldr	r1, [r6]
   13f50:	bl	15a74 <__assert_fail@plt+0x4274>
   13f54:	mov	r0, #0
   13f58:	bl	1162c <exit@plt>
   13f5c:	mov	r4, r0
   13f60:	movw	r0, #53712	; 0xd1d0
   13f64:	movw	r1, #46242	; 0xb4a2
   13f68:	mov	r2, #5
   13f6c:	movt	r0, #2
   13f70:	movt	r1, #1
   13f74:	ldr	r5, [r0]
   13f78:	mov	r0, #0
   13f7c:	bl	114dc <dcgettext@plt>
   13f80:	mov	r1, r0
   13f84:	movw	r0, #53936	; 0xd2b0
   13f88:	movt	r0, #2
   13f8c:	ldr	r2, [r0]
   13f90:	mov	r0, r5
   13f94:	bl	11674 <fprintf@plt>
   13f98:	mov	r0, r4
   13f9c:	bl	1162c <exit@plt>
   13fa0:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   13fa4:	add	fp, sp, #24
   13fa8:	sub	sp, sp, #16
   13fac:	mov	r6, r2
   13fb0:	mov	r5, r1
   13fb4:	add	r1, sp, #12
   13fb8:	mov	r2, #10
   13fbc:	mov	r7, r3
   13fc0:	mov	r4, r0
   13fc4:	bl	1144c <strtol@plt>
   13fc8:	ldr	r1, [sp, #12]
   13fcc:	cmp	r1, r4
   13fd0:	beq	140b0 <__assert_fail@plt+0x28b0>
   13fd4:	ldrb	r1, [r1]
   13fd8:	cmp	r1, #0
   13fdc:	bne	140b0 <__assert_fail@plt+0x28b0>
   13fe0:	ldr	r8, [fp, #8]
   13fe4:	cmp	r0, r6
   13fe8:	blt	14060 <__assert_fail@plt+0x2860>
   13fec:	cmp	r7, #0
   13ff0:	bmi	14050 <__assert_fail@plt+0x2850>
   13ff4:	cmp	r0, r7
   13ff8:	mov	r6, r0
   13ffc:	ble	14054 <__assert_fail@plt+0x2854>
   14000:	movw	r0, #53712	; 0xd1d0
   14004:	movw	r1, #46196	; 0xb474
   14008:	mov	r2, #5
   1400c:	movt	r0, #2
   14010:	movt	r1, #1
   14014:	ldr	r6, [r0]
   14018:	mov	r0, #0
   1401c:	bl	114dc <dcgettext@plt>
   14020:	mov	r1, r0
   14024:	movw	r0, #53936	; 0xd2b0
   14028:	mov	r3, r4
   1402c:	stm	sp, {r5, r7}
   14030:	movt	r0, #2
   14034:	ldr	r2, [r0]
   14038:	mov	r0, r6
   1403c:	bl	11674 <fprintf@plt>
   14040:	cmp	r8, #0
   14044:	mov	r6, r7
   14048:	beq	14054 <__assert_fail@plt+0x2854>
   1404c:	b	140a8 <__assert_fail@plt+0x28a8>
   14050:	mov	r6, r0
   14054:	mov	r0, r6
   14058:	sub	sp, fp, #24
   1405c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14060:	movw	r0, #53712	; 0xd1d0
   14064:	movw	r1, #46150	; 0xb446
   14068:	mov	r2, #5
   1406c:	movt	r0, #2
   14070:	movt	r1, #1
   14074:	ldr	r7, [r0]
   14078:	mov	r0, #0
   1407c:	bl	114dc <dcgettext@plt>
   14080:	mov	r1, r0
   14084:	movw	r0, #53936	; 0xd2b0
   14088:	mov	r3, r4
   1408c:	stm	sp, {r5, r6}
   14090:	movt	r0, #2
   14094:	ldr	r2, [r0]
   14098:	mov	r0, r7
   1409c:	bl	11674 <fprintf@plt>
   140a0:	cmp	r8, #0
   140a4:	beq	14054 <__assert_fail@plt+0x2854>
   140a8:	mov	r0, #1
   140ac:	bl	13c7c <__assert_fail@plt+0x247c>
   140b0:	movw	r0, #53712	; 0xd1d0
   140b4:	movw	r1, #46110	; 0xb41e
   140b8:	mov	r2, #5
   140bc:	movt	r0, #2
   140c0:	movt	r1, #1
   140c4:	ldr	r6, [r0]
   140c8:	mov	r0, #0
   140cc:	bl	114dc <dcgettext@plt>
   140d0:	mov	r1, r0
   140d4:	movw	r0, #53936	; 0xd2b0
   140d8:	mov	r3, r4
   140dc:	str	r5, [sp]
   140e0:	movt	r0, #2
   140e4:	ldr	r2, [r0]
   140e8:	mov	r0, r6
   140ec:	bl	11674 <fprintf@plt>
   140f0:	mov	r0, #1
   140f4:	bl	13c7c <__assert_fail@plt+0x247c>
   140f8:	movw	r0, #53608	; 0xd168
   140fc:	movt	r0, #2
   14100:	ldr	r1, [r0]
   14104:	cmn	r1, #-2147483647	; 0x80000001
   14108:	beq	14118 <__assert_fail@plt+0x2918>
   1410c:	ldr	r1, [r0]
   14110:	add	r1, r1, #1
   14114:	str	r1, [r0]
   14118:	movw	r0, #53888	; 0xd280
   1411c:	mov	r1, #1
   14120:	movt	r0, #2
   14124:	str	r1, [r0]
   14128:	bx	lr
   1412c:	movw	r0, #53608	; 0xd168
   14130:	movt	r0, #2
   14134:	ldr	r1, [r0]
   14138:	cmp	r1, #2
   1413c:	bxlt	lr
   14140:	ldr	r1, [r0]
   14144:	sub	r1, r1, #1
   14148:	str	r1, [r0]
   1414c:	bx	lr
   14150:	movw	r0, #53744	; 0xd1f0
   14154:	movt	r0, #2
   14158:	ldr	r1, [r0, #24]
   1415c:	cmp	r1, #0
   14160:	bne	141b0 <__assert_fail@plt+0x29b0>
   14164:	movw	r1, #53860	; 0xd264
   14168:	movt	r1, #2
   1416c:	ldrb	r1, [r1]
   14170:	cmp	r1, #1
   14174:	bne	141b0 <__assert_fail@plt+0x29b0>
   14178:	movw	r2, #53816	; 0xd238
   1417c:	ldr	r1, [r0, #28]
   14180:	movt	r2, #2
   14184:	ldr	r2, [r2]
   14188:	cmp	r2, r1
   1418c:	bxeq	lr
   14190:	ldr	r0, [r0]
   14194:	cmp	r0, #0
   14198:	bne	141b0 <__assert_fail@plt+0x29b0>
   1419c:	movw	r0, #53744	; 0xd1f0
   141a0:	movw	r1, #53816	; 0xd238
   141a4:	movt	r0, #2
   141a8:	movt	r1, #2
   141ac:	b	14a64 <__assert_fail@plt+0x3264>
   141b0:	bx	lr
   141b4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   141b8:	add	fp, sp, #28
   141bc:	sub	sp, sp, #20
   141c0:	mov	r5, r0
   141c4:	movw	r0, #53884	; 0xd27c
   141c8:	movt	r0, #2
   141cc:	ldr	r0, [r0]
   141d0:	cmp	r0, #0
   141d4:	beq	1444c <__assert_fail@plt+0x2c4c>
   141d8:	movw	sl, #53888	; 0xd280
   141dc:	movw	r8, #53892	; 0xd284
   141e0:	eor	r2, r5, #1
   141e4:	mov	r7, #0
   141e8:	add	r6, sp, #16
   141ec:	mov	r3, #0
   141f0:	str	r1, [sp, #8]
   141f4:	movt	sl, #2
   141f8:	movt	r8, #2
   141fc:	str	r2, [sp, #4]
   14200:	cmp	r3, r1
   14204:	mov	r0, #0
   14208:	str	r7, [sl]
   1420c:	str	r3, [sp, #12]
   14210:	movwcs	r0, #1
   14214:	and	r7, r0, r2
   14218:	b	14228 <__assert_fail@plt+0x2a28>
   1421c:	mov	r2, #0
   14220:	cmp	r2, r1
   14224:	bne	142cc <__assert_fail@plt+0x2acc>
   14228:	mvn	r0, #0
   1422c:	mov	r1, r6
   14230:	mov	r2, r7
   14234:	bl	1156c <waitpid@plt>
   14238:	cmn	r0, #1
   1423c:	bne	1428c <__assert_fail@plt+0x2a8c>
   14240:	mov	r4, r8
   14244:	bl	11680 <__errno_location@plt>
   14248:	mov	r8, r0
   1424c:	ldr	r9, [r8]
   14250:	cmp	r9, #4
   14254:	bne	14454 <__assert_fail@plt+0x2c54>
   14258:	ldr	r1, [sl]
   1425c:	cmp	r5, #0
   14260:	mov	r0, r7
   14264:	moveq	r0, #1
   14268:	cmp	r1, #0
   1426c:	mov	r1, r6
   14270:	movne	r7, r0
   14274:	mvn	r0, #0
   14278:	mov	r2, r7
   1427c:	bl	1156c <waitpid@plt>
   14280:	cmn	r0, #1
   14284:	beq	1424c <__assert_fail@plt+0x2a4c>
   14288:	mov	r8, r4
   1428c:	cmp	r0, #0
   14290:	beq	14414 <__assert_fail@plt+0x2c14>
   14294:	ldr	r1, [r8]
   14298:	cmp	r1, #0
   1429c:	beq	1421c <__assert_fail@plt+0x2a1c>
   142a0:	movw	r2, #53896	; 0xd288
   142a4:	movt	r2, #2
   142a8:	ldr	r3, [r2]
   142ac:	mov	r2, #0
   142b0:	ldr	r4, [r3, r2, lsl #2]
   142b4:	cmp	r0, r4
   142b8:	beq	14220 <__assert_fail@plt+0x2a20>
   142bc:	add	r2, r2, #1
   142c0:	cmp	r2, r1
   142c4:	bcc	142b0 <__assert_fail@plt+0x2ab0>
   142c8:	b	14220 <__assert_fail@plt+0x2a20>
   142cc:	movw	r0, #53896	; 0xd288
   142d0:	movw	r4, #53884	; 0xd27c
   142d4:	mov	r7, #0
   142d8:	movt	r0, #2
   142dc:	movt	r4, #2
   142e0:	ldr	r0, [r0]
   142e4:	str	r7, [r0, r2, lsl #2]
   142e8:	ldr	r0, [r4]
   142ec:	sub	r0, r0, #1
   142f0:	str	r0, [r4]
   142f4:	ldr	r0, [sp, #16]
   142f8:	and	r1, r0, #65280	; 0xff00
   142fc:	cmp	r1, #65280	; 0xff00
   14300:	bne	1433c <__assert_fail@plt+0x2b3c>
   14304:	movw	r1, #45624	; 0xb238
   14308:	mov	r0, #0
   1430c:	mov	r2, #5
   14310:	movt	r1, #1
   14314:	bl	114dc <dcgettext@plt>
   14318:	mov	r2, r0
   1431c:	movw	r0, #53816	; 0xd238
   14320:	mov	r1, #0
   14324:	movt	r0, #2
   14328:	ldr	r0, [r0, #4]
   1432c:	ldr	r3, [r0]
   14330:	mov	r0, #124	; 0x7c
   14334:	bl	115a8 <error@plt>
   14338:	ldr	r0, [sp, #16]
   1433c:	uxtb	r1, r0
   14340:	cmp	r1, #127	; 0x7f
   14344:	bne	14388 <__assert_fail@plt+0x2b88>
   14348:	movw	r1, #45661	; 0xb25d
   1434c:	mov	r0, #0
   14350:	mov	r2, #5
   14354:	movt	r1, #1
   14358:	bl	114dc <dcgettext@plt>
   1435c:	mov	r2, r0
   14360:	movw	r0, #53816	; 0xd238
   14364:	mov	r1, #0
   14368:	movt	r0, #2
   1436c:	ldr	r0, [r0, #4]
   14370:	ldr	r3, [r0]
   14374:	ldrb	r0, [sp, #17]
   14378:	str	r0, [sp]
   1437c:	mov	r0, #125	; 0x7d
   14380:	bl	115a8 <error@plt>
   14384:	ldr	r0, [sp, #16]
   14388:	mov	r1, #2130706432	; 0x7f000000
   1438c:	and	r1, r1, r0, lsl #24
   14390:	add	r1, r1, #16777216	; 0x1000000
   14394:	cmp	r1, #33554432	; 0x2000000
   14398:	blt	143e0 <__assert_fail@plt+0x2be0>
   1439c:	movw	r1, #45686	; 0xb276
   143a0:	mov	r0, #0
   143a4:	mov	r2, #5
   143a8:	movt	r1, #1
   143ac:	bl	114dc <dcgettext@plt>
   143b0:	mov	r2, r0
   143b4:	movw	r0, #53816	; 0xd238
   143b8:	mov	r1, #0
   143bc:	movt	r0, #2
   143c0:	ldr	r0, [r0, #4]
   143c4:	ldr	r3, [r0]
   143c8:	ldr	r0, [sp, #16]
   143cc:	and	r0, r0, #127	; 0x7f
   143d0:	str	r0, [sp]
   143d4:	mov	r0, #125	; 0x7d
   143d8:	bl	115a8 <error@plt>
   143dc:	ldr	r0, [sp, #16]
   143e0:	tst	r0, #65280	; 0xff00
   143e4:	ldr	r3, [sp, #12]
   143e8:	ldr	r2, [sp, #4]
   143ec:	movwne	r0, #53872	; 0xd270
   143f0:	movne	r1, #123	; 0x7b
   143f4:	movtne	r0, #2
   143f8:	strne	r1, [r0]
   143fc:	add	r3, r3, #1
   14400:	ldr	r0, [r4]
   14404:	ldr	r1, [sp, #8]
   14408:	cmp	r0, #0
   1440c:	bne	14200 <__assert_fail@plt+0x2a00>
   14410:	b	1444c <__assert_fail@plt+0x2c4c>
   14414:	tst	r7, #1
   14418:	bne	1444c <__assert_fail@plt+0x2c4c>
   1441c:	movw	r1, #45581	; 0xb20d
   14420:	mov	r0, #0
   14424:	mov	r2, #5
   14428:	movt	r1, #1
   1442c:	bl	114dc <dcgettext@plt>
   14430:	mov	r2, r0
   14434:	movw	r0, #53884	; 0xd27c
   14438:	mov	r1, #0
   1443c:	movt	r0, #2
   14440:	ldr	r3, [r0]
   14444:	mov	r0, #0
   14448:	bl	115a8 <error@plt>
   1444c:	sub	sp, fp, #28
   14450:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14454:	movw	r1, #45549	; 0xb1ed
   14458:	mov	r0, #0
   1445c:	mov	r2, #5
   14460:	movt	r1, #1
   14464:	bl	114dc <dcgettext@plt>
   14468:	mov	r2, r0
   1446c:	mov	r0, #1
   14470:	mov	r1, r9
   14474:	bl	115a8 <error@plt>
   14478:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1447c:	add	fp, sp, #28
   14480:	sub	sp, sp, #4
   14484:	movw	r5, #53816	; 0xd238
   14488:	mov	r9, r0
   1448c:	movt	r5, #2
   14490:	ldr	r0, [r5]
   14494:	cmp	r0, #1
   14498:	bne	14580 <__assert_fail@plt+0x2d80>
   1449c:	cmp	r9, #0
   144a0:	beq	14560 <__assert_fail@plt+0x2d60>
   144a4:	movw	r6, #53900	; 0xd28c
   144a8:	movt	r6, #2
   144ac:	ldr	r0, [r6]
   144b0:	cmp	r0, #0
   144b4:	bne	144ec <__assert_fail@plt+0x2cec>
   144b8:	movw	r0, #45747	; 0xb2b3
   144bc:	mov	r1, #0
   144c0:	movt	r0, #1
   144c4:	bl	155f8 <__assert_fail@plt+0x3df8>
   144c8:	cmn	r0, #1
   144cc:	ble	14620 <__assert_fail@plt+0x2e20>
   144d0:	movw	r1, #44490	; 0xadca
   144d4:	mov	r4, r0
   144d8:	movt	r1, #1
   144dc:	bl	11428 <fdopen@plt>
   144e0:	cmp	r0, #0
   144e4:	beq	1462c <__assert_fail@plt+0x2e2c>
   144e8:	str	r0, [r6]
   144ec:	movw	r4, #53712	; 0xd1d0
   144f0:	movw	r0, #45792	; 0xb2e0
   144f4:	mov	r1, #4
   144f8:	mov	r2, #1
   144fc:	movt	r4, #2
   14500:	movt	r0, #1
   14504:	ldr	r3, [r4]
   14508:	bl	11554 <fwrite@plt>
   1450c:	ldr	r0, [r4]
   14510:	bl	1a168 <__assert_fail@plt+0x8968>
   14514:	cmp	r0, #0
   14518:	bne	145f8 <__assert_fail@plt+0x2df8>
   1451c:	ldr	r0, [r6]
   14520:	bl	117dc <getc@plt>
   14524:	mov	r4, r0
   14528:	cmp	r0, #10
   1452c:	beq	14548 <__assert_fail@plt+0x2d48>
   14530:	cmn	r0, #1
   14534:	beq	1460c <__assert_fail@plt+0x2e0c>
   14538:	ldr	r0, [r6]
   1453c:	bl	117dc <getc@plt>
   14540:	cmp	r0, #10
   14544:	bne	14530 <__assert_fail@plt+0x2d30>
   14548:	orr	r1, r4, #32
   1454c:	mov	r0, #1
   14550:	cmp	r1, #121	; 0x79
   14554:	movne	r0, #0
   14558:	sub	sp, fp, #28
   1455c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14560:	movw	r0, #53712	; 0xd1d0
   14564:	movt	r0, #2
   14568:	ldr	r1, [r0]
   1456c:	mov	r0, #10
   14570:	bl	1177c <putc@plt>
   14574:	mov	r0, #0
   14578:	sub	sp, fp, #28
   1457c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14580:	movw	sl, #53712	; 0xd1d0
   14584:	movw	r8, #45714	; 0xb292
   14588:	mov	r4, #0
   1458c:	movt	sl, #2
   14590:	movt	r8, #1
   14594:	movw	r0, #46407	; 0xb547
   14598:	movw	r6, #45719	; 0xb297
   1459c:	cmp	r4, #0
   145a0:	ldr	r7, [sl]
   145a4:	mov	r1, #3
   145a8:	movt	r0, #1
   145ac:	movt	r6, #1
   145b0:	moveq	r6, r0
   145b4:	ldr	r0, [r5, #4]
   145b8:	ldr	r2, [r0, r4, lsl #2]
   145bc:	mov	r0, #0
   145c0:	bl	1828c <__assert_fail@plt+0x6a8c>
   145c4:	mov	r3, r0
   145c8:	mov	r0, r7
   145cc:	mov	r1, r8
   145d0:	mov	r2, r6
   145d4:	bl	11674 <fprintf@plt>
   145d8:	cmn	r0, #1
   145dc:	ble	145f8 <__assert_fail@plt+0x2df8>
   145e0:	ldr	r0, [r5]
   145e4:	add	r4, r4, #1
   145e8:	sub	r0, r0, #1
   145ec:	cmp	r4, r0
   145f0:	bcc	14594 <__assert_fail@plt+0x2d94>
   145f4:	b	1449c <__assert_fail@plt+0x2c9c>
   145f8:	bl	11680 <__errno_location@plt>
   145fc:	ldr	r4, [r0]
   14600:	movw	r1, #45721	; 0xb299
   14604:	movt	r1, #1
   14608:	b	14658 <__assert_fail@plt+0x2e58>
   1460c:	bl	11680 <__errno_location@plt>
   14610:	ldr	r4, [r0]
   14614:	movw	r1, #45797	; 0xb2e5
   14618:	movt	r1, #1
   1461c:	b	14658 <__assert_fail@plt+0x2e58>
   14620:	bl	11680 <__errno_location@plt>
   14624:	mov	r5, r0
   14628:	b	14644 <__assert_fail@plt+0x2e44>
   1462c:	bl	11680 <__errno_location@plt>
   14630:	ldr	r7, [r0]
   14634:	mov	r5, r0
   14638:	mov	r0, r4
   1463c:	bl	117e8 <close@plt>
   14640:	str	r7, [r5]
   14644:	mov	r0, #0
   14648:	movw	r1, #45756	; 0xb2bc
   1464c:	str	r0, [r6]
   14650:	movt	r1, #1
   14654:	ldr	r4, [r5]
   14658:	mov	r0, #0
   1465c:	mov	r2, #5
   14660:	bl	114dc <dcgettext@plt>
   14664:	mov	r2, r0
   14668:	mov	r0, #1
   1466c:	mov	r1, r4
   14670:	bl	115a8 <error@plt>
   14674:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14678:	add	fp, sp, #28
   1467c:	sub	sp, sp, #20
   14680:	movw	r5, #53908	; 0xd294
   14684:	str	r1, [sp, #12]
   14688:	str	r0, [sp, #16]
   1468c:	ldr	r4, [r0, #12]
   14690:	ldr	r0, [fp, #20]
   14694:	ldr	r1, [fp, #12]
   14698:	mov	r9, r3
   1469c:	mov	r7, r2
   146a0:	movt	r5, #2
   146a4:	ldr	r6, [r5]
   146a8:	cmp	r6, #0
   146ac:	bne	146cc <__assert_fail@plt+0x2ecc>
   146b0:	mov	r8, r0
   146b4:	add	r0, r4, #1
   146b8:	bl	1918c <__assert_fail@plt+0x798c>
   146bc:	ldr	r1, [fp, #12]
   146c0:	mov	r6, r0
   146c4:	mov	r0, r8
   146c8:	str	r6, [r5]
   146cc:	sub	sl, r4, #1
   146d0:	add	r5, r0, r1
   146d4:	b	1470c <__assert_fail@plt+0x2f0c>
   146d8:	ldr	r1, [fp, #16]
   146dc:	mov	r0, r6
   146e0:	sub	sl, sl, r5
   146e4:	bl	11584 <strcpy@plt>
   146e8:	ldr	r0, [fp, #20]
   146ec:	add	r6, r6, r0
   146f0:	ldr	r0, [sp, #16]
   146f4:	ldr	r0, [r0, #20]
   146f8:	sub	r9, r9, r0
   146fc:	add	r7, r7, r0
   14700:	ldrb	r0, [r7]
   14704:	cmp	r0, #0
   14708:	beq	14790 <__assert_fail@plt+0x2f90>
   1470c:	ldr	r0, [sp, #16]
   14710:	ldr	r1, [r0, #24]
   14714:	mov	r0, r7
   14718:	bl	15f58 <__assert_fail@plt+0x4758>
   1471c:	cmp	r0, #0
   14720:	mov	r4, r9
   14724:	subne	r4, r0, r7
   14728:	cmp	sl, r4
   1472c:	bls	14784 <__assert_fail@plt+0x2f84>
   14730:	mov	r8, r0
   14734:	mov	r0, r6
   14738:	mov	r1, r7
   1473c:	mov	r2, r4
   14740:	bl	116b0 <strncpy@plt>
   14744:	sub	r9, r9, r4
   14748:	add	r7, r7, r4
   1474c:	add	r6, r6, r4
   14750:	sub	sl, sl, r4
   14754:	cmp	r8, #0
   14758:	beq	14700 <__assert_fail@plt+0x2f00>
   1475c:	ldr	r4, [fp, #12]
   14760:	ldr	r1, [fp, #8]
   14764:	cmp	sl, r5
   14768:	bls	14784 <__assert_fail@plt+0x2f84>
   1476c:	cmp	r1, #0
   14770:	beq	146d8 <__assert_fail@plt+0x2ed8>
   14774:	mov	r0, r6
   14778:	bl	11584 <strcpy@plt>
   1477c:	add	r6, r6, r4
   14780:	b	146d8 <__assert_fail@plt+0x2ed8>
   14784:	ldrb	r0, [r7]
   14788:	cmp	r0, #0
   1478c:	bne	147d0 <__assert_fail@plt+0x2fd0>
   14790:	movw	r1, #53908	; 0xd294
   14794:	mov	r0, #0
   14798:	movt	r1, #2
   1479c:	strb	r0, [r6]
   147a0:	str	r0, [sp]
   147a4:	str	r0, [sp, #4]
   147a8:	ldr	r0, [fp, #24]
   147ac:	ldr	r2, [r1]
   147b0:	ldr	r1, [sp, #12]
   147b4:	str	r0, [sp, #8]
   147b8:	sub	r0, r6, r2
   147bc:	add	r3, r0, #1
   147c0:	ldr	r0, [sp, #16]
   147c4:	bl	147f4 <__assert_fail@plt+0x2ff4>
   147c8:	sub	sp, fp, #28
   147cc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   147d0:	movw	r1, #49408	; 0xc100
   147d4:	mov	r0, #0
   147d8:	mov	r2, #5
   147dc:	movt	r1, #1
   147e0:	bl	114dc <dcgettext@plt>
   147e4:	mov	r2, r0
   147e8:	mov	r0, #1
   147ec:	mov	r1, #0
   147f0:	bl	115a8 <error@plt>
   147f4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   147f8:	add	fp, sp, #28
   147fc:	sub	sp, sp, #4
   14800:	cmp	r2, #0
   14804:	beq	14a14 <__assert_fail@plt+0x3214>
   14808:	movw	sl, #50247	; 0xc447
   1480c:	mov	r5, r0
   14810:	ldr	r6, [fp, #16]
   14814:	ldr	r0, [fp, #12]
   14818:	mov	r9, r3
   1481c:	mov	r8, r2
   14820:	mov	r4, r1
   14824:	movt	sl, #1
   14828:	cmp	r2, sl
   1482c:	beq	148e0 <__assert_fail@plt+0x30e0>
   14830:	ldr	r1, [r4, #16]
   14834:	add	r0, r0, r9
   14838:	add	r0, r0, r1
   1483c:	ldr	r1, [r5, #12]
   14840:	cmp	r0, r1
   14844:	bls	1489c <__assert_fail@plt+0x309c>
   14848:	cmp	r6, #0
   1484c:	bne	14a34 <__assert_fail@plt+0x3234>
   14850:	ldr	r0, [r5, #28]
   14854:	ldr	r1, [r4]
   14858:	cmp	r1, r0
   1485c:	beq	14a34 <__assert_fail@plt+0x3234>
   14860:	ldr	r0, [r5, #24]
   14864:	cmp	r0, #0
   14868:	bne	14a40 <__assert_fail@plt+0x3240>
   1486c:	ldr	r0, [r5]
   14870:	cmp	r0, #0
   14874:	beq	1488c <__assert_fail@plt+0x308c>
   14878:	ldr	r0, [r5, #36]	; 0x24
   1487c:	cmp	r0, #0
   14880:	ldreq	r0, [r5, #40]	; 0x28
   14884:	cmpeq	r0, #0
   14888:	bne	14a40 <__assert_fail@plt+0x3240>
   1488c:	mov	r0, r5
   14890:	mov	r1, r4
   14894:	bl	14a64 <__assert_fail@plt+0x3264>
   14898:	b	148a4 <__assert_fail@plt+0x30a4>
   1489c:	cmp	r6, #0
   148a0:	bne	148c4 <__assert_fail@plt+0x30c4>
   148a4:	ldr	r0, [r5, #40]	; 0x28
   148a8:	cmp	r0, #0
   148ac:	beq	148c4 <__assert_fail@plt+0x30c4>
   148b0:	ldr	r1, [r5, #28]
   148b4:	ldr	r2, [r4]
   148b8:	sub	r1, r2, r1
   148bc:	cmp	r1, r0
   148c0:	beq	148d4 <__assert_fail@plt+0x30d4>
   148c4:	ldr	r0, [r5, #16]
   148c8:	ldr	r1, [r4]
   148cc:	cmp	r1, r0
   148d0:	bne	148e0 <__assert_fail@plt+0x30e0>
   148d4:	mov	r0, r5
   148d8:	mov	r1, r4
   148dc:	bl	14a64 <__assert_fail@plt+0x3264>
   148e0:	cmp	r6, #0
   148e4:	moveq	r0, #1
   148e8:	streq	r0, [r4, #28]
   148ec:	ldr	r0, [r4]
   148f0:	ldr	r1, [r4, #8]
   148f4:	cmp	r0, r1
   148f8:	bcc	14930 <__assert_fail@plt+0x3130>
   148fc:	ldr	r0, [r4, #4]
   14900:	cmp	r0, #0
   14904:	beq	1491c <__assert_fail@plt+0x311c>
   14908:	lsl	r2, r1, #1
   1490c:	lsl	r1, r1, #3
   14910:	str	r2, [r4, #8]
   14914:	bl	191d4 <__assert_fail@plt+0x79d4>
   14918:	b	1492c <__assert_fail@plt+0x312c>
   1491c:	mov	r0, #64	; 0x40
   14920:	str	r0, [r4, #8]
   14924:	mov	r0, #256	; 0x100
   14928:	bl	1918c <__assert_fail@plt+0x798c>
   1492c:	str	r0, [r4, #4]
   14930:	cmp	r8, sl
   14934:	beq	149bc <__assert_fail@plt+0x31bc>
   14938:	mov	sl, r6
   1493c:	ldr	r1, [fp, #8]
   14940:	ldm	r4, {r2, r3}
   14944:	ldr	r6, [r4, #12]
   14948:	ldr	r0, [r4, #16]
   1494c:	add	r7, r2, #1
   14950:	str	r7, [r4]
   14954:	add	r7, r6, r0
   14958:	cmp	r1, #0
   1495c:	str	r7, [r3, r2, lsl #2]
   14960:	beq	14980 <__assert_fail@plt+0x3180>
   14964:	ldr	r2, [r4, #12]
   14968:	add	r0, r2, r0
   1496c:	bl	11584 <strcpy@plt>
   14970:	ldr	r0, [r4, #16]
   14974:	ldr	r1, [fp, #12]
   14978:	add	r0, r0, r1
   1497c:	str	r0, [r4, #16]
   14980:	ldr	r1, [r4, #12]
   14984:	mov	r6, sl
   14988:	add	r0, r1, r0
   1498c:	mov	r1, r8
   14990:	bl	11584 <strcpy@plt>
   14994:	ldr	r0, [r4, #16]
   14998:	cmp	sl, #0
   1499c:	add	r0, r0, r9
   149a0:	str	r0, [r4, #16]
   149a4:	beq	149d4 <__assert_fail@plt+0x31d4>
   149a8:	ldr	r0, [r5, #16]
   149ac:	ldr	r1, [r4]
   149b0:	cmp	r1, r0
   149b4:	beq	149f4 <__assert_fail@plt+0x31f4>
   149b8:	b	14a00 <__assert_fail@plt+0x3200>
   149bc:	ldm	r4, {r0, r1}
   149c0:	add	r2, r0, #1
   149c4:	str	r2, [r4]
   149c8:	mov	r2, #0
   149cc:	str	r2, [r1, r0, lsl #2]
   149d0:	b	14a00 <__assert_fail@plt+0x3200>
   149d4:	ldr	r0, [r5, #40]	; 0x28
   149d8:	cmp	r0, #0
   149dc:	beq	149a8 <__assert_fail@plt+0x31a8>
   149e0:	ldr	r1, [r5, #28]
   149e4:	ldr	r2, [r4]
   149e8:	sub	r1, r2, r1
   149ec:	cmp	r1, r0
   149f0:	bne	149a8 <__assert_fail@plt+0x31a8>
   149f4:	mov	r0, r5
   149f8:	mov	r1, r4
   149fc:	bl	14a64 <__assert_fail@plt+0x3264>
   14a00:	cmp	r6, #0
   14a04:	ldrne	r0, [r4, #16]
   14a08:	strne	r0, [r4, #20]
   14a0c:	sub	sp, fp, #28
   14a10:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14a14:	movw	r0, #49619	; 0xc1d3
   14a18:	movw	r1, #49445	; 0xc125
   14a1c:	movw	r3, #49631	; 0xc1df
   14a20:	movw	r2, #341	; 0x155
   14a24:	movt	r0, #1
   14a28:	movt	r1, #1
   14a2c:	movt	r3, #1
   14a30:	bl	11800 <__assert_fail@plt>
   14a34:	movw	r1, #49749	; 0xc255
   14a38:	movt	r1, #1
   14a3c:	b	14a48 <__assert_fail@plt+0x3248>
   14a40:	movw	r1, #49808	; 0xc290
   14a44:	movt	r1, #1
   14a48:	mov	r0, #0
   14a4c:	mov	r2, #5
   14a50:	bl	114dc <dcgettext@plt>
   14a54:	mov	r2, r0
   14a58:	mov	r0, #1
   14a5c:	mov	r1, #0
   14a60:	bl	115a8 <error@plt>
   14a64:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14a68:	add	fp, sp, #28
   14a6c:	sub	sp, sp, #36	; 0x24
   14a70:	mov	r5, r0
   14a74:	mov	r0, #1
   14a78:	mov	r8, r1
   14a7c:	str	r0, [r1, #28]
   14a80:	ldr	r2, [r1]
   14a84:	ldmib	r1, {r0, r1}
   14a88:	cmp	r2, r1
   14a8c:	bcc	14ac0 <__assert_fail@plt+0x32c0>
   14a90:	cmp	r0, #0
   14a94:	beq	14aac <__assert_fail@plt+0x32ac>
   14a98:	lsl	r2, r1, #1
   14a9c:	lsl	r1, r1, #3
   14aa0:	str	r2, [r8, #8]
   14aa4:	bl	191d4 <__assert_fail@plt+0x79d4>
   14aa8:	b	14abc <__assert_fail@plt+0x32bc>
   14aac:	mov	r0, #64	; 0x40
   14ab0:	str	r0, [r8, #8]
   14ab4:	mov	r0, #256	; 0x100
   14ab8:	bl	1918c <__assert_fail@plt+0x798c>
   14abc:	str	r0, [r8, #4]
   14ac0:	ldr	r2, [r8]
   14ac4:	mov	r3, #0
   14ac8:	adds	r1, r2, #1
   14acc:	str	r1, [r8]
   14ad0:	str	r3, [r0, r2, lsl #2]
   14ad4:	bcs	14fa8 <__assert_fail@plt+0x37a8>
   14ad8:	ldr	r0, [r8, #4]
   14adc:	ldr	r0, [r0, r2, lsl #2]
   14ae0:	cmp	r0, #0
   14ae4:	bne	14fc0 <__assert_fail@plt+0x37c0>
   14ae8:	mov	r0, #4
   14aec:	add	r0, r0, r1, lsl #2
   14af0:	bl	1918c <__assert_fail@plt+0x798c>
   14af4:	ldr	sl, [r8]
   14af8:	ldr	lr, [r5, #28]
   14afc:	mov	r9, r0
   14b00:	add	r0, r0, #4
   14b04:	mov	ip, #0
   14b08:	str	r5, [sp, #24]
   14b0c:	str	r8, [sp, #4]
   14b10:	str	r0, [sp, #8]
   14b14:	mov	r4, sl
   14b18:	b	14b50 <__assert_fail@plt+0x3350>
   14b1c:	add	r2, lr, #1
   14b20:	cmp	r6, r2
   14b24:	movhi	r2, r6
   14b28:	add	r0, r7, r3
   14b2c:	sub	ip, r0, lr
   14b30:	ldr	sl, [r8]
   14b34:	cmp	r2, #0
   14b38:	add	r1, ip, #1
   14b3c:	movweq	r2, #1
   14b40:	mov	r4, r2
   14b44:	sub	r0, sl, lr
   14b48:	cmp	r1, r0
   14b4c:	bcs	14f34 <__assert_fail@plt+0x3734>
   14b50:	cmp	lr, #0
   14b54:	str	ip, [sp, #28]
   14b58:	str	r4, [sp, #32]
   14b5c:	beq	14cc8 <__assert_fail@plt+0x34c8>
   14b60:	ldr	r2, [r8, #4]
   14b64:	mov	r3, #0
   14b68:	cmp	lr, #4
   14b6c:	bcc	14c58 <__assert_fail@plt+0x3458>
   14b70:	add	r7, r2, lr, lsl #2
   14b74:	cmp	r9, r7
   14b78:	bcs	14b88 <__assert_fail@plt+0x3388>
   14b7c:	add	r7, r9, lr, lsl #2
   14b80:	cmp	r7, r2
   14b84:	bhi	14c58 <__assert_fail@plt+0x3458>
   14b88:	bic	r3, lr, #3
   14b8c:	mov	r0, #1
   14b90:	str	lr, [sp, #20]
   14b94:	mov	lr, #0
   14b98:	mov	ip, #48	; 0x30
   14b9c:	sub	r6, r3, #4
   14ba0:	add	r7, r0, r6, lsr #2
   14ba4:	cmp	r6, #12
   14ba8:	and	r0, r7, #3
   14bac:	str	r0, [sp, #16]
   14bb0:	bcc	14c18 <__assert_fail@plt+0x3418>
   14bb4:	ldr	r0, [sp, #16]
   14bb8:	mov	r4, #0
   14bbc:	mov	lr, #0
   14bc0:	sub	r8, r7, r0
   14bc4:	add	r6, r2, r4
   14bc8:	add	r1, r9, r4
   14bcc:	add	r4, r4, #64	; 0x40
   14bd0:	subs	r8, r8, #4
   14bd4:	add	lr, lr, #16
   14bd8:	mov	r0, r6
   14bdc:	mov	r5, r1
   14be0:	add	r7, r1, #16
   14be4:	add	r1, r1, #32
   14be8:	vld1.32	{d16-d17}, [r0], ip
   14bec:	vst1.32	{d16-d17}, [r5], ip
   14bf0:	add	ip, r6, #16
   14bf4:	vld1.32	{d16-d17}, [ip]
   14bf8:	mov	ip, #48	; 0x30
   14bfc:	vst1.32	{d16-d17}, [r7]
   14c00:	add	r7, r6, #32
   14c04:	vld1.32	{d16-d17}, [r7]
   14c08:	vst1.32	{d16-d17}, [r1]
   14c0c:	vld1.32	{d16-d17}, [r0]
   14c10:	vst1.32	{d16-d17}, [r5]
   14c14:	bne	14bc4 <__assert_fail@plt+0x33c4>
   14c18:	ldr	r0, [sp, #16]
   14c1c:	cmp	r0, #0
   14c20:	beq	14c40 <__assert_fail@plt+0x3440>
   14c24:	add	r7, r2, lr, lsl #2
   14c28:	add	r6, r9, lr, lsl #2
   14c2c:	rsb	r5, r0, #0
   14c30:	vld1.32	{d16-d17}, [r7]!
   14c34:	adds	r5, r5, #1
   14c38:	vst1.32	{d16-d17}, [r6]!
   14c3c:	bcc	14c30 <__assert_fail@plt+0x3430>
   14c40:	ldr	lr, [sp, #20]
   14c44:	ldr	r8, [sp, #4]
   14c48:	ldr	ip, [sp, #28]
   14c4c:	ldr	r4, [sp, #32]
   14c50:	cmp	lr, r3
   14c54:	beq	14cc8 <__assert_fail@plt+0x34c8>
   14c58:	mvn	r0, r3
   14c5c:	ands	r6, lr, #3
   14c60:	add	r7, lr, r0
   14c64:	beq	14c7c <__assert_fail@plt+0x347c>
   14c68:	ldr	r0, [r2, r3, lsl #2]
   14c6c:	subs	r6, r6, #1
   14c70:	str	r0, [r9, r3, lsl #2]
   14c74:	add	r3, r3, #1
   14c78:	bne	14c68 <__assert_fail@plt+0x3468>
   14c7c:	cmp	r7, #3
   14c80:	bcc	14cc8 <__assert_fail@plt+0x34c8>
   14c84:	sub	r7, lr, r3
   14c88:	lsl	r3, r3, #2
   14c8c:	mov	r6, r9
   14c90:	add	r0, r2, #16
   14c94:	ldr	r1, [r2, r3]!
   14c98:	add	r5, r6, #16
   14c9c:	subs	r7, r7, #4
   14ca0:	str	r1, [r6, r3]!
   14ca4:	ldr	r1, [r2, #4]
   14ca8:	str	r1, [r6, #4]
   14cac:	ldr	r1, [r2, #8]
   14cb0:	str	r1, [r6, #8]
   14cb4:	ldr	r1, [r2, #12]
   14cb8:	mov	r2, r0
   14cbc:	str	r1, [r6, #12]
   14cc0:	mov	r6, r5
   14cc4:	bne	14c90 <__assert_fail@plt+0x3490>
   14cc8:	ldr	r5, [sp, #24]
   14ccc:	cmp	lr, r4
   14cd0:	mov	r7, lr
   14cd4:	bcs	14d74 <__assert_fail@plt+0x3574>
   14cd8:	add	r2, lr, ip
   14cdc:	mov	r7, lr
   14ce0:	cmp	r2, sl
   14ce4:	bcs	14d74 <__assert_fail@plt+0x3574>
   14ce8:	mvn	r0, lr
   14cec:	ldr	r3, [r8, #4]
   14cf0:	add	r1, r4, r0
   14cf4:	add	r0, sl, r0
   14cf8:	sub	r7, r0, ip
   14cfc:	mov	r0, r1
   14d00:	cmp	r7, r1
   14d04:	movcc	r0, r7
   14d08:	add	r5, r0, #1
   14d0c:	cmp	r5, #4
   14d10:	bcc	14d50 <__assert_fail@plt+0x3550>
   14d14:	cmp	r7, r1
   14d18:	movcc	r1, r7
   14d1c:	add	r7, r9, lr, lsl #2
   14d20:	add	r0, r2, r1
   14d24:	add	r0, r3, r0, lsl #2
   14d28:	add	r0, r0, #4
   14d2c:	cmp	r7, r0
   14d30:	bcs	14e84 <__assert_fail@plt+0x3684>
   14d34:	lsl	r0, lr, #2
   14d38:	add	r0, r0, r1, lsl #2
   14d3c:	ldr	r1, [sp, #8]
   14d40:	add	r0, r1, r0
   14d44:	add	r1, r3, r2, lsl #2
   14d48:	cmp	r0, r1
   14d4c:	bls	14e84 <__assert_fail@plt+0x3684>
   14d50:	ldr	r5, [sp, #24]
   14d54:	mov	r7, lr
   14d58:	ldr	r0, [r3, r2, lsl #2]
   14d5c:	add	r2, r2, #1
   14d60:	cmp	r2, sl
   14d64:	str	r0, [r9, r7, lsl #2]
   14d68:	add	r7, r7, #1
   14d6c:	cmpcc	r7, r4
   14d70:	bcc	14d58 <__assert_fail@plt+0x3558>
   14d74:	cmp	r7, lr
   14d78:	bcc	14f64 <__assert_fail@plt+0x3764>
   14d7c:	mov	r0, #0
   14d80:	mov	r2, r7
   14d84:	mov	r3, r9
   14d88:	str	r0, [r9, r7, lsl #2]
   14d8c:	mov	r0, r5
   14d90:	ldr	r1, [r8, #24]
   14d94:	ldr	r6, [r5, #32]
   14d98:	blx	r6
   14d9c:	cmp	r0, #0
   14da0:	beq	14dc4 <__assert_fail@plt+0x35c4>
   14da4:	ldr	r0, [r8, #36]	; 0x24
   14da8:	ldr	r6, [sp, #32]
   14dac:	cmp	r0, r6
   14db0:	bcs	14e08 <__assert_fail@plt+0x3608>
   14db4:	ldr	r3, [sp, #28]
   14db8:	str	r6, [r8, #36]	; 0x24
   14dbc:	mov	r0, r6
   14dc0:	b	14e14 <__assert_fail@plt+0x3614>
   14dc4:	ldr	lr, [r5, #28]
   14dc8:	ldr	r1, [sp, #32]
   14dcc:	add	r2, lr, #1
   14dd0:	cmp	r1, r2
   14dd4:	bls	14f84 <__assert_fail@plt+0x3784>
   14dd8:	ldr	r7, [r8, #40]	; 0x28
   14ddc:	ldr	ip, [sp, #28]
   14de0:	sub	r0, r7, #1
   14de4:	cmp	r0, r1
   14de8:	strcs	r1, [r8, #40]	; 0x28
   14dec:	movcs	r7, r1
   14df0:	ldr	r3, [r8, #36]	; 0x24
   14df4:	cmp	r3, #0
   14df8:	cmpne	r7, r3
   14dfc:	bhi	14e58 <__assert_fail@plt+0x3658>
   14e00:	lsr	r1, r1, #1
   14e04:	b	14e70 <__assert_fail@plt+0x3670>
   14e08:	ldr	r3, [sp, #28]
   14e0c:	cmp	r0, #0
   14e10:	beq	14e3c <__assert_fail@plt+0x363c>
   14e14:	ldr	r1, [r8, #40]	; 0x28
   14e18:	cmp	r1, r0
   14e1c:	bls	14e3c <__assert_fail@plt+0x363c>
   14e20:	sub	r0, r1, r0
   14e24:	mov	r1, #0
   14e28:	cmp	r1, r0, lsr #1
   14e2c:	addeq	r6, r6, #1
   14e30:	lsrne	r0, r0, #1
   14e34:	addne	r6, r0, r6
   14e38:	b	14e44 <__assert_fail@plt+0x3644>
   14e3c:	cmn	r6, #1
   14e40:	addne	r6, r6, #1
   14e44:	ldr	lr, [r5, #28]
   14e48:	cmp	lr, #0
   14e4c:	bne	14b1c <__assert_fail@plt+0x331c>
   14e50:	mov	r2, r6
   14e54:	b	14b28 <__assert_fail@plt+0x3328>
   14e58:	sub	r3, r7, r3
   14e5c:	mov	r0, #0
   14e60:	cmp	r0, r3, lsr #1
   14e64:	subeq	r1, r1, #1
   14e68:	lsrne	r0, r3, #1
   14e6c:	subne	r1, r1, r0
   14e70:	cmp	r1, r2
   14e74:	movhi	r2, r1
   14e78:	cmp	lr, #0
   14e7c:	moveq	r2, r1
   14e80:	b	14b30 <__assert_fail@plt+0x3330>
   14e84:	bic	r0, r5, #3
   14e88:	mov	r1, #1
   14e8c:	str	lr, [sp, #20]
   14e90:	str	r0, [sp, #16]
   14e94:	subs	r0, r0, #4
   14e98:	add	r6, r1, r0, lsr #2
   14e9c:	and	r0, r6, #1
   14ea0:	str	r0, [sp, #12]
   14ea4:	beq	14ee4 <__assert_fail@plt+0x36e4>
   14ea8:	sub	r4, r0, r6
   14eac:	add	r0, lr, ip
   14eb0:	mov	lr, #0
   14eb4:	mov	r6, #32
   14eb8:	add	ip, r3, r0, lsl #2
   14ebc:	add	r0, ip, #16
   14ec0:	vld1.32	{d16-d17}, [ip], r6
   14ec4:	add	r1, r7, #16
   14ec8:	adds	r4, r4, #2
   14ecc:	add	lr, lr, #8
   14ed0:	vst1.32	{d16-d17}, [r7], r6
   14ed4:	vld1.32	{d16-d17}, [r0]
   14ed8:	vst1.32	{d16-d17}, [r1]
   14edc:	bne	14ebc <__assert_fail@plt+0x36bc>
   14ee0:	b	14ee8 <__assert_fail@plt+0x36e8>
   14ee4:	mov	lr, #0
   14ee8:	ldr	r0, [sp, #12]
   14eec:	cmp	r0, #0
   14ef0:	beq	14f10 <__assert_fail@plt+0x3710>
   14ef4:	add	r0, r2, lr
   14ef8:	add	r0, r3, r0, lsl #2
   14efc:	vld1.32	{d16-d17}, [r0]
   14f00:	ldr	r0, [sp, #20]
   14f04:	add	r0, r0, lr
   14f08:	add	r0, r9, r0, lsl #2
   14f0c:	vst1.32	{d16-d17}, [r0]
   14f10:	ldr	r0, [sp, #16]
   14f14:	ldr	lr, [sp, #20]
   14f18:	cmp	r5, r0
   14f1c:	ldr	r5, [sp, #24]
   14f20:	add	r7, lr, r0
   14f24:	beq	14d74 <__assert_fail@plt+0x3574>
   14f28:	ldr	r4, [sp, #32]
   14f2c:	add	r2, r2, r0
   14f30:	b	14d58 <__assert_fail@plt+0x3558>
   14f34:	mov	r0, r9
   14f38:	bl	1a204 <__assert_fail@plt+0x8a04>
   14f3c:	ldr	r0, [r5, #28]
   14f40:	mov	r2, #0
   14f44:	mvn	r1, #0
   14f48:	str	r2, [r8, #28]
   14f4c:	str	r1, [r8, #32]
   14f50:	str	r0, [r8]
   14f54:	ldr	r0, [r8, #20]
   14f58:	str	r0, [r8, #16]
   14f5c:	sub	sp, fp, #28
   14f60:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14f64:	movw	r0, #50124	; 0xc3cc
   14f68:	movw	r1, #49445	; 0xc125
   14f6c:	movw	r3, #50153	; 0xc3e9
   14f70:	mov	r2, #242	; 0xf2
   14f74:	movt	r0, #1
   14f78:	movt	r1, #1
   14f7c:	movt	r3, #1
   14f80:	bl	11800 <__assert_fail@plt>
   14f84:	movw	r1, #49567	; 0xc19f
   14f88:	mov	r0, #0
   14f8c:	mov	r2, #5
   14f90:	movt	r1, #1
   14f94:	bl	114dc <dcgettext@plt>
   14f98:	mov	r2, r0
   14f9c:	mov	r0, #1
   14fa0:	mov	r1, #0
   14fa4:	bl	115a8 <error@plt>
   14fa8:	movw	r0, #49425	; 0xc111
   14fac:	movw	r1, #49445	; 0xc125
   14fb0:	movw	r3, #49456	; 0xc130
   14fb4:	movw	r2, #261	; 0x105
   14fb8:	movt	r0, #1
   14fbc:	b	14fd4 <__assert_fail@plt+0x37d4>
   14fc0:	movw	r0, #49524	; 0xc174
   14fc4:	movw	r1, #49445	; 0xc125
   14fc8:	movw	r3, #49456	; 0xc130
   14fcc:	movw	r2, #262	; 0x106
   14fd0:	movt	r0, #1
   14fd4:	movt	r1, #1
   14fd8:	movt	r3, #1
   14fdc:	bl	11800 <__assert_fail@plt>
   14fe0:	ldr	r0, [r0, #28]
   14fe4:	mov	r3, #0
   14fe8:	mvn	r2, #0
   14fec:	str	r3, [r1, #28]
   14ff0:	str	r2, [r1, #32]
   14ff4:	str	r0, [r1]
   14ff8:	ldr	r0, [r1, #20]
   14ffc:	str	r0, [r1, #16]
   15000:	bx	lr
   15004:	push	{fp, lr}
   15008:	mov	fp, sp
   1500c:	mov	r0, #0
   15010:	bl	114e8 <sysconf@plt>
   15014:	cmp	r0, #0
   15018:	mvnle	r0, #-2147483648	; 0x80000000
   1501c:	pop	{fp, pc}
   15020:	push	{r4, r5, fp, lr}
   15024:	add	fp, sp, #8
   15028:	movw	r0, #53692	; 0xd1bc
   1502c:	movt	r0, #2
   15030:	ldr	r1, [r0]
   15034:	ldr	r0, [r1]
   15038:	cmp	r0, #0
   1503c:	beq	15068 <__assert_fail@plt+0x3868>
   15040:	add	r5, r1, #4
   15044:	mov	r4, #0
   15048:	bl	11650 <strlen@plt>
   1504c:	add	r0, r4, r0
   15050:	add	r4, r0, #1
   15054:	ldr	r0, [r5], #4
   15058:	cmp	r0, #0
   1505c:	bne	15048 <__assert_fail@plt+0x3848>
   15060:	mov	r0, r4
   15064:	pop	{r4, r5, fp, pc}
   15068:	mov	r4, #0
   1506c:	mov	r0, r4
   15070:	pop	{r4, r5, fp, pc}
   15074:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   15078:	add	fp, sp, #24
   1507c:	mov	r4, r0
   15080:	movw	r0, #53692	; 0xd1bc
   15084:	mov	r5, r1
   15088:	mov	r8, #0
   1508c:	mov	r6, #0
   15090:	movt	r0, #2
   15094:	ldr	r1, [r0]
   15098:	ldr	r0, [r1]
   1509c:	cmp	r0, #0
   150a0:	beq	150c4 <__assert_fail@plt+0x38c4>
   150a4:	add	r7, r1, #4
   150a8:	mov	r6, #0
   150ac:	bl	11650 <strlen@plt>
   150b0:	add	r0, r6, r0
   150b4:	add	r6, r0, #1
   150b8:	ldr	r0, [r7], #4
   150bc:	cmp	r0, #0
   150c0:	bne	150ac <__assert_fail@plt+0x38ac>
   150c4:	mov	r0, #4096	; 0x1000
   150c8:	str	r0, [r4, #8]
   150cc:	mov	r0, #0
   150d0:	bl	114e8 <sysconf@plt>
   150d4:	cmp	r0, #0
   150d8:	mov	r1, r0
   150dc:	mov	r0, #1
   150e0:	str	r8, [r4]
   150e4:	mvnle	r1, #-2147483648	; 0x80000000
   150e8:	cmp	r1, r6
   150ec:	str	r1, [r4, #4]
   150f0:	bcc	1514c <__assert_fail@plt+0x394c>
   150f4:	add	r2, r6, r5
   150f8:	mov	r0, #2
   150fc:	cmp	r2, r1
   15100:	bcs	1514c <__assert_fail@plt+0x394c>
   15104:	sub	r0, r1, r6
   15108:	sub	r1, r0, r5
   1510c:	mvn	r0, #1
   15110:	add	r0, r0, r1, lsr #2
   15114:	str	r1, [r4, #4]
   15118:	cmp	r0, #0
   1511c:	str	r0, [r4, #16]
   15120:	beq	15150 <__assert_fail@plt+0x3950>
   15124:	movw	r2, #20848	; 0x5170
   15128:	mov	r0, #0
   1512c:	movt	r2, #1
   15130:	str	r0, [r4, #20]
   15134:	str	r0, [r4, #24]
   15138:	str	r0, [r4, #28]
   1513c:	str	r2, [r4, #32]
   15140:	str	r0, [r4, #36]	; 0x24
   15144:	str	r0, [r4, #40]	; 0x28
   15148:	str	r1, [r4, #12]
   1514c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   15150:	movw	r0, #49831	; 0xc2a7
   15154:	movw	r1, #49445	; 0xc125
   15158:	movw	r3, #49854	; 0xc2be
   1515c:	movw	r2, #518	; 0x206
   15160:	movt	r0, #1
   15164:	movt	r1, #1
   15168:	movt	r3, #1
   1516c:	bl	11800 <__assert_fail@plt>
   15170:	mov	r0, #0
   15174:	bx	lr
   15178:	ldr	r1, [r0, #4]
   1517c:	mov	r2, #0
   15180:	cmp	r2, r1, lsr #17
   15184:	beq	15194 <__assert_fail@plt+0x3994>
   15188:	ldr	r1, [r0, #8]
   1518c:	cmp	r1, #131072	; 0x20000
   15190:	movls	r1, #131072	; 0x20000
   15194:	str	r1, [r0, #12]
   15198:	bx	lr
   1519c:	push	{r4, r5, r6, sl, fp, lr}
   151a0:	add	fp, sp, #16
   151a4:	mov	r6, #0
   151a8:	mov	r4, r1
   151ac:	str	r6, [r1, #16]
   151b0:	str	r6, [r1, #36]	; 0x24
   151b4:	str	r6, [r1, #40]	; 0x28
   151b8:	str	r6, [r1]
   151bc:	str	r6, [r1, #4]
   151c0:	str	r6, [r1, #8]
   151c4:	movw	r1, #63488	; 0xf800
   151c8:	ldr	r0, [r0, #12]
   151cc:	movt	r1, #32767	; 0x7fff
   151d0:	cmp	r0, r1
   151d4:	bcs	15204 <__assert_fail@plt+0x3a04>
   151d8:	add	r0, r0, #1
   151dc:	mov	r5, r2
   151e0:	bl	1918c <__assert_fail@plt+0x798c>
   151e4:	mvn	r1, #0
   151e8:	str	r0, [r4, #12]
   151ec:	str	r6, [r4, #16]
   151f0:	str	r6, [r4, #20]
   151f4:	str	r5, [r4, #24]
   151f8:	str	r6, [r4, #28]
   151fc:	str	r1, [r4, #32]
   15200:	pop	{r4, r5, r6, sl, fp, pc}
   15204:	movw	r0, #49929	; 0xc309
   15208:	movw	r1, #49445	; 0xc125
   1520c:	movw	r3, #49964	; 0xc32c
   15210:	mov	r2, #572	; 0x23c
   15214:	movt	r0, #1
   15218:	movt	r1, #1
   1521c:	movt	r3, #1
   15220:	bl	11800 <__assert_fail@plt>
   15224:	push	{r4, r5, r6, sl, fp, lr}
   15228:	add	fp, sp, #16
   1522c:	mov	r1, r0
   15230:	ldr	r0, [r0]
   15234:	cmp	r0, #0
   15238:	beq	15264 <__assert_fail@plt+0x3a64>
   1523c:	add	r6, r1, #4
   15240:	mov	r5, #0
   15244:	mov	r4, #0
   15248:	bl	11650 <strlen@plt>
   1524c:	add	r4, r0, r4
   15250:	ldr	r0, [r6, r5, lsl #2]
   15254:	add	r5, r5, #1
   15258:	cmp	r0, #0
   1525c:	bne	15248 <__assert_fail@plt+0x3a48>
   15260:	b	1526c <__assert_fail@plt+0x3a6c>
   15264:	mov	r4, #0
   15268:	mov	r5, #0
   1526c:	movw	r0, #50049	; 0xc381
   15270:	mov	r1, r5
   15274:	movt	r0, #1
   15278:	bl	152a8 <__assert_fail@plt+0x3aa8>
   1527c:	mov	r1, r0
   15280:	mov	r0, #1
   15284:	cmp	r1, #0
   15288:	popne	{r4, r5, r6, sl, fp, pc}
   1528c:	movw	r0, #50086	; 0xc3a6
   15290:	mov	r1, r4
   15294:	movt	r0, #1
   15298:	bl	152a8 <__assert_fail@plt+0x3aa8>
   1529c:	cmp	r0, #0
   152a0:	movwne	r0, #1
   152a4:	pop	{r4, r5, r6, sl, fp, pc}
   152a8:	push	{r4, r5, fp, lr}
   152ac:	add	fp, sp, #8
   152b0:	sub	sp, sp, #16
   152b4:	mov	r5, r1
   152b8:	mov	r4, r0
   152bc:	bl	115cc <getenv@plt>
   152c0:	cmp	r0, #0
   152c4:	beq	15300 <__assert_fail@plt+0x3b00>
   152c8:	mov	r1, #0
   152cc:	add	r3, sp, #8
   152d0:	mov	r2, #10
   152d4:	str	r1, [sp]
   152d8:	add	r1, sp, #12
   152dc:	bl	1970c <__assert_fail@plt+0x7f0c>
   152e0:	cmp	r0, #0
   152e4:	bne	1530c <__assert_fail@plt+0x3b0c>
   152e8:	ldr	r1, [sp, #8]
   152ec:	mov	r0, #1
   152f0:	cmp	r1, r5
   152f4:	movcs	r0, #0
   152f8:	sub	sp, fp, #8
   152fc:	pop	{r4, r5, fp, pc}
   15300:	mov	r0, #0
   15304:	sub	sp, fp, #8
   15308:	pop	{r4, r5, fp, pc}
   1530c:	bl	11680 <__errno_location@plt>
   15310:	movw	r1, #50259	; 0xc453
   15314:	ldr	r5, [r0]
   15318:	mov	r0, #0
   1531c:	mov	r2, #5
   15320:	movt	r1, #1
   15324:	bl	114dc <dcgettext@plt>
   15328:	mov	r2, r0
   1532c:	mov	r0, #1
   15330:	mov	r1, r5
   15334:	mov	r3, r4
   15338:	bl	115a8 <error@plt>
   1533c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15340:	add	fp, sp, #28
   15344:	sub	sp, sp, #540	; 0x21c
   15348:	bl	154a0 <__assert_fail@plt+0x3ca0>
   1534c:	cmn	r0, #-2147483647	; 0x80000001
   15350:	mov	r5, #0
   15354:	addne	r0, r0, #1
   15358:	str	r5, [sp, #20]
   1535c:	str	r5, [sp, #12]
   15360:	str	r5, [sp, #16]
   15364:	cmp	r0, #1
   15368:	str	r0, [sp, #4]
   1536c:	blt	15478 <__assert_fail@plt+0x3c78>
   15370:	add	r0, sp, #12
   15374:	add	r6, sp, #24
   15378:	mov	sl, #5
   1537c:	add	r0, r0, #8
   15380:	str	r0, [sp, #8]
   15384:	b	15398 <__assert_fail@plt+0x3b98>
   15388:	ldr	r0, [sp, #4]
   1538c:	add	r5, r7, r5
   15390:	cmp	r5, r0
   15394:	bge	15478 <__assert_fail@plt+0x3c78>
   15398:	ldr	r0, [sp, #4]
   1539c:	sub	r4, r0, r5
   153a0:	cmp	r4, #64	; 0x40
   153a4:	mov	r7, r4
   153a8:	movge	r7, #64	; 0x40
   153ac:	cmp	r4, #1
   153b0:	blt	153dc <__assert_fail@plt+0x3bdc>
   153b4:	mov	r0, #0
   153b8:	mov	r1, #0
   153bc:	add	r2, r6, r0
   153c0:	add	r0, r0, #8
   153c4:	str	sl, [r2, #4]
   153c8:	add	r2, r5, r1
   153cc:	str	r2, [r6, r1, lsl #3]
   153d0:	add	r1, r1, #1
   153d4:	cmp	r1, r7
   153d8:	blt	153bc <__assert_fail@plt+0x3bbc>
   153dc:	mov	r0, r6
   153e0:	mov	r1, r7
   153e4:	mov	r2, #0
   153e8:	bl	1153c <poll@plt>
   153ec:	cmn	r0, #1
   153f0:	beq	15478 <__assert_fail@plt+0x3c78>
   153f4:	cmp	r4, #1
   153f8:	blt	15388 <__assert_fail@plt+0x3b88>
   153fc:	mov	r8, #0
   15400:	mov	r9, #6
   15404:	b	15430 <__assert_fail@plt+0x3c30>
   15408:	str	r0, [sp, #12]
   1540c:	ldr	r1, [sp, #16]
   15410:	str	r4, [r0, r1, lsl #2]
   15414:	ldr	r0, [sp, #16]
   15418:	add	r0, r0, #1
   1541c:	str	r0, [sp, #16]
   15420:	add	r8, r8, #1
   15424:	add	r9, r9, #8
   15428:	cmp	r8, r7
   1542c:	bge	15388 <__assert_fail@plt+0x3b88>
   15430:	add	r0, r6, r9
   15434:	ldrh	r0, [r0]
   15438:	cmp	r0, #32
   1543c:	beq	15420 <__assert_fail@plt+0x3c20>
   15440:	ldr	r4, [r6, r8, lsl #3]
   15444:	mov	r1, #1
   15448:	mov	r0, r4
   1544c:	bl	19f88 <__assert_fail@plt+0x8788>
   15450:	tst	r0, #1
   15454:	bne	15420 <__assert_fail@plt+0x3c20>
   15458:	ldr	r1, [sp, #16]
   1545c:	mov	r2, #4
   15460:	ldr	r0, [sp, #12]
   15464:	add	r1, r2, r1, lsl #2
   15468:	ldr	r2, [sp, #8]
   1546c:	bl	15ae0 <__assert_fail@plt+0x42e0>
   15470:	cmp	r0, #0
   15474:	bne	15408 <__assert_fail@plt+0x3c08>
   15478:	ldr	r0, [sp, #12]
   1547c:	movw	r2, #53912	; 0xd298
   15480:	ldr	r1, [sp, #16]
   15484:	movt	r2, #2
   15488:	str	r0, [r2]
   1548c:	movw	r0, #53916	; 0xd29c
   15490:	movt	r0, #2
   15494:	str	r1, [r0]
   15498:	sub	sp, fp, #28
   1549c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   154a0:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   154a4:	add	fp, sp, #24
   154a8:	sub	sp, sp, #16
   154ac:	movw	r0, #50554	; 0xc57a
   154b0:	movt	r0, #1
   154b4:	bl	15e80 <__assert_fail@plt+0x4680>
   154b8:	cmp	r0, #0
   154bc:	beq	15598 <__assert_fail@plt+0x3d98>
   154c0:	mov	r4, r0
   154c4:	bl	11680 <__errno_location@plt>
   154c8:	mov	r7, #0
   154cc:	mov	r6, r0
   154d0:	str	r7, [r0]
   154d4:	mov	r0, r4
   154d8:	bl	11764 <readdir64@plt>
   154dc:	cmp	r0, #0
   154e0:	beq	15554 <__assert_fail@plt+0x3d54>
   154e4:	mov	r8, #0
   154e8:	mvn	r5, #0
   154ec:	mov	r7, #0
   154f0:	b	15520 <__assert_fail@plt+0x3d20>
   154f4:	mov	r0, r1
   154f8:	mov	r1, #0
   154fc:	bl	15968 <__assert_fail@plt+0x4168>
   15500:	cmp	r0, r5
   15504:	mov	r7, #1
   15508:	movgt	r5, r0
   1550c:	mov	r0, r4
   15510:	str	r8, [r6]
   15514:	bl	11764 <readdir64@plt>
   15518:	cmp	r0, #0
   1551c:	beq	15558 <__assert_fail@plt+0x3d58>
   15520:	mov	r1, r0
   15524:	ldrb	r2, [r1, #19]!
   15528:	cmp	r2, #46	; 0x2e
   1552c:	bne	154f4 <__assert_fail@plt+0x3cf4>
   15530:	ldrb	r2, [r0, #20]
   15534:	cmp	r2, #0
   15538:	beq	1550c <__assert_fail@plt+0x3d0c>
   1553c:	cmp	r2, #46	; 0x2e
   15540:	bne	154f4 <__assert_fail@plt+0x3cf4>
   15544:	ldrb	r0, [r0, #21]
   15548:	cmp	r0, #0
   1554c:	bne	154f4 <__assert_fail@plt+0x3cf4>
   15550:	b	1550c <__assert_fail@plt+0x3d0c>
   15554:	mvn	r5, #0
   15558:	ldr	r6, [r6]
   1555c:	cmp	r6, #0
   15560:	beq	155d4 <__assert_fail@plt+0x3dd4>
   15564:	movw	r2, #50554	; 0xc57a
   15568:	mov	r0, #0
   1556c:	mov	r1, #8
   15570:	movt	r2, #1
   15574:	bl	1828c <__assert_fail@plt+0x6a8c>
   15578:	movw	r2, #50687	; 0xc5ff
   1557c:	mov	r3, r0
   15580:	mov	r0, #0
   15584:	mov	r1, r6
   15588:	movt	r2, #1
   1558c:	bl	115a8 <error@plt>
   15590:	mov	r0, r4
   15594:	bl	117f4 <closedir@plt>
   15598:	mov	r0, #4
   1559c:	bl	114e8 <sysconf@plt>
   155a0:	mov	r5, r0
   155a4:	mov	r1, sp
   155a8:	mov	r0, #7
   155ac:	bl	11500 <getrlimit64@plt>
   155b0:	cmn	r5, #1
   155b4:	movweq	r5, #20
   155b8:	cmp	r0, #0
   155bc:	bne	155ec <__assert_fail@plt+0x3dec>
   155c0:	ldm	sp, {r0, r1}
   155c4:	and	r1, r0, r1
   155c8:	cmn	r1, #1
   155cc:	movne	r5, r0
   155d0:	b	155ec <__assert_fail@plt+0x3dec>
   155d4:	mov	r0, r4
   155d8:	bl	117f4 <closedir@plt>
   155dc:	cmp	r7, #0
   155e0:	beq	15598 <__assert_fail@plt+0x3d98>
   155e4:	cmn	r5, #1
   155e8:	ble	15598 <__assert_fail@plt+0x3d98>
   155ec:	mov	r0, r5
   155f0:	sub	sp, fp, #24
   155f4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   155f8:	sub	sp, sp, #8
   155fc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15600:	add	fp, sp, #28
   15604:	sub	sp, sp, #4
   15608:	movw	sl, #53921	; 0xd2a1
   1560c:	mov	r4, r0
   15610:	str	r2, [fp, #8]
   15614:	str	r3, [fp, #12]
   15618:	tst	r1, #64	; 0x40
   1561c:	mov	r6, #0
   15620:	movw	r9, #53920	; 0xd2a0
   15624:	mov	r5, r1
   15628:	movt	sl, #2
   1562c:	ldrne	r6, [fp, #8]
   15630:	movt	r9, #2
   15634:	ldrb	r0, [sl]
   15638:	cmp	r0, #0
   1563c:	bne	15688 <__assert_fail@plt+0x3e88>
   15640:	movw	r0, #52209	; 0xcbf1
   15644:	mov	r1, #524288	; 0x80000
   15648:	movt	r0, #1
   1564c:	bl	15f1c <__assert_fail@plt+0x471c>
   15650:	cmp	r0, #0
   15654:	bmi	15678 <__assert_fail@plt+0x3e78>
   15658:	mov	r1, #1
   1565c:	mov	r7, r0
   15660:	bl	19f88 <__assert_fail@plt+0x8788>
   15664:	mov	r8, r0
   15668:	mov	r0, r7
   1566c:	bl	117e8 <close@plt>
   15670:	and	r0, r8, #1
   15674:	b	1567c <__assert_fail@plt+0x3e7c>
   15678:	mov	r0, #0
   1567c:	mov	r1, #1
   15680:	strb	r0, [r9]
   15684:	strb	r1, [sl]
   15688:	orr	r1, r5, #524288	; 0x80000
   1568c:	mov	r0, r4
   15690:	mov	r2, r6
   15694:	bl	15f1c <__assert_fail@plt+0x471c>
   15698:	mov	r4, r0
   1569c:	cmp	r0, #0
   156a0:	bmi	156bc <__assert_fail@plt+0x3ebc>
   156a4:	ldrb	r0, [r9]
   156a8:	cmp	r0, #0
   156ac:	bne	156bc <__assert_fail@plt+0x3ebc>
   156b0:	mov	r0, r4
   156b4:	mov	r1, #1
   156b8:	bl	15bf0 <__assert_fail@plt+0x43f0>
   156bc:	mov	r0, r4
   156c0:	sub	sp, fp, #28
   156c4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   156c8:	add	sp, sp, #8
   156cc:	bx	lr
   156d0:	push	{r4, sl, fp, lr}
   156d4:	add	fp, sp, #8
   156d8:	movw	r4, #53912	; 0xd298
   156dc:	movt	r4, #2
   156e0:	ldr	r0, [r4]
   156e4:	bl	1a204 <__assert_fail@plt+0x8a04>
   156e8:	movw	r0, #53916	; 0xd29c
   156ec:	mov	r1, #0
   156f0:	movt	r0, #2
   156f4:	str	r1, [r4]
   156f8:	str	r1, [r0]
   156fc:	pop	{r4, sl, fp, pc}
   15700:	push	{fp, lr}
   15704:	mov	fp, sp
   15708:	movw	r0, #50320	; 0xc490
   1570c:	movt	r0, #1
   15710:	bl	115cc <getenv@plt>
   15714:	cmp	r0, #0
   15718:	movwne	r0, #1
   1571c:	pop	{fp, pc}
   15720:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15724:	add	fp, sp, #28
   15728:	sub	sp, sp, #524	; 0x20c
   1572c:	movw	r0, #53916	; 0xd29c
   15730:	movt	r0, #2
   15734:	ldr	sl, [r0]
   15738:	movw	r0, #53912	; 0xd298
   1573c:	movt	r0, #2
   15740:	ldr	r0, [r0]
   15744:	str	r0, [sp, #4]
   15748:	bl	154a0 <__assert_fail@plt+0x3ca0>
   1574c:	mov	r7, r0
   15750:	cmn	r0, #-2147483647	; 0x80000001
   15754:	addne	r7, r7, #1
   15758:	cmp	r7, #1
   1575c:	blt	15868 <__assert_fail@plt+0x4068>
   15760:	mov	r4, #0
   15764:	add	r5, sp, #8
   15768:	mov	r3, #5
   1576c:	mov	r8, #0
   15770:	str	r7, [sp]
   15774:	sub	r9, r7, r8
   15778:	cmp	r9, #64	; 0x40
   1577c:	mov	r6, r9
   15780:	movge	r6, #64	; 0x40
   15784:	cmp	r9, #1
   15788:	blt	157b4 <__assert_fail@plt+0x3fb4>
   1578c:	mov	r0, #0
   15790:	mov	r1, #0
   15794:	add	r2, r5, r0
   15798:	add	r0, r0, #8
   1579c:	str	r3, [r2, #4]
   157a0:	add	r2, r8, r1
   157a4:	str	r2, [r5, r1, lsl #3]
   157a8:	add	r1, r1, #1
   157ac:	cmp	r1, r6
   157b0:	blt	15794 <__assert_fail@plt+0x3f94>
   157b4:	mov	r0, r5
   157b8:	mov	r1, r6
   157bc:	mov	r2, #0
   157c0:	bl	1153c <poll@plt>
   157c4:	mov	r3, #5
   157c8:	cmn	r0, #1
   157cc:	beq	15868 <__assert_fail@plt+0x4068>
   157d0:	cmp	r9, #1
   157d4:	blt	1584c <__assert_fail@plt+0x404c>
   157d8:	mov	r9, #0
   157dc:	b	157f0 <__assert_fail@plt+0x3ff0>
   157e0:	mov	r3, #5
   157e4:	add	r9, r9, #1
   157e8:	cmp	r9, r6
   157ec:	bge	1584c <__assert_fail@plt+0x404c>
   157f0:	add	r0, r5, r9, lsl #3
   157f4:	ldrh	r0, [r0, #6]
   157f8:	cmp	r0, #32
   157fc:	beq	157e4 <__assert_fail@plt+0x3fe4>
   15800:	ldr	r7, [r5, r9, lsl #3]
   15804:	mov	r1, #1
   15808:	mov	r0, r7
   1580c:	bl	19f88 <__assert_fail@plt+0x8788>
   15810:	tst	r0, #1
   15814:	bne	157e0 <__assert_fail@plt+0x3fe0>
   15818:	ldr	r1, [sp, #4]
   1581c:	cmp	r4, sl
   15820:	mov	r3, #5
   15824:	bcs	15860 <__assert_fail@plt+0x4060>
   15828:	ldr	r0, [r1, r4, lsl #2]
   1582c:	cmp	r0, r7
   15830:	bge	15844 <__assert_fail@plt+0x4044>
   15834:	add	r4, r4, #1
   15838:	cmp	sl, r4
   1583c:	bne	15828 <__assert_fail@plt+0x4028>
   15840:	b	15860 <__assert_fail@plt+0x4060>
   15844:	beq	157e4 <__assert_fail@plt+0x3fe4>
   15848:	b	15860 <__assert_fail@plt+0x4060>
   1584c:	ldr	r7, [sp]
   15850:	add	r8, r6, r8
   15854:	cmp	r8, r7
   15858:	blt	15774 <__assert_fail@plt+0x3f74>
   1585c:	b	15868 <__assert_fail@plt+0x4068>
   15860:	cmp	r7, #0
   15864:	bpl	15870 <__assert_fail@plt+0x4070>
   15868:	sub	sp, fp, #28
   1586c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15870:	movw	r1, #50348	; 0xc4ac
   15874:	mov	r0, #0
   15878:	mov	r2, #5
   1587c:	movt	r1, #1
   15880:	bl	114dc <dcgettext@plt>
   15884:	mov	r2, r0
   15888:	mov	r0, #0
   1588c:	mov	r1, #0
   15890:	mov	r3, r7
   15894:	bl	115a8 <error@plt>
   15898:	movw	r0, #50500	; 0xc544
   1589c:	movw	r1, #50509	; 0xc54d
   158a0:	movw	r3, #50518	; 0xc556
   158a4:	mov	r2, #396	; 0x18c
   158a8:	movt	r0, #1
   158ac:	movt	r1, #1
   158b0:	movt	r3, #1
   158b4:	bl	11800 <__assert_fail@plt>
   158b8:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   158bc:	add	fp, sp, #24
   158c0:	sub	sp, sp, #16
   158c4:	mov	r8, r0
   158c8:	movw	r0, #53712	; 0xd1d0
   158cc:	movt	r0, #2
   158d0:	ldr	r0, [r0]
   158d4:	bl	1a168 <__assert_fail@plt+0x8968>
   158d8:	movw	r0, #53724	; 0xd1dc
   158dc:	movw	r1, #50596	; 0xc5a4
   158e0:	mov	r2, #5
   158e4:	mov	r9, #0
   158e8:	movt	r0, #2
   158ec:	movt	r1, #1
   158f0:	ldr	r6, [r0]
   158f4:	movw	r0, #53612	; 0xd16c
   158f8:	movt	r0, #2
   158fc:	ldr	r5, [r0]
   15900:	mov	r0, #0
   15904:	bl	114dc <dcgettext@plt>
   15908:	movw	r1, #50611	; 0xc5b3
   1590c:	mov	r7, r0
   15910:	mov	r0, #0
   15914:	mov	r2, #5
   15918:	movt	r1, #1
   1591c:	bl	114dc <dcgettext@plt>
   15920:	movw	r1, #50626	; 0xc5c2
   15924:	mov	r4, r0
   15928:	mov	r0, #0
   1592c:	mov	r2, #5
   15930:	movt	r1, #1
   15934:	bl	114dc <dcgettext@plt>
   15938:	movw	r2, #50582	; 0xc596
   1593c:	str	r0, [sp, #8]
   15940:	mov	r0, r6
   15944:	mov	r1, r8
   15948:	mov	r3, r5
   1594c:	str	r7, [sp]
   15950:	str	r4, [sp, #4]
   15954:	str	r9, [sp, #12]
   15958:	movt	r2, #1
   1595c:	bl	18f74 <__assert_fail@plt+0x7774>
   15960:	sub	sp, fp, #24
   15964:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   15968:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1596c:	add	fp, sp, #24
   15970:	sub	sp, sp, #8
   15974:	mov	r5, r1
   15978:	mov	r4, r0
   1597c:	bl	11680 <__errno_location@plt>
   15980:	mov	r6, r0
   15984:	mov	r0, #0
   15988:	add	r1, sp, #4
   1598c:	mov	r2, #10
   15990:	str	r0, [r6]
   15994:	mov	r0, r4
   15998:	bl	1144c <strtol@plt>
   1599c:	add	r1, r0, #-2147483647	; 0x80000001
   159a0:	cmp	r1, #1
   159a4:	bls	15a04 <__assert_fail@plt+0x4204>
   159a8:	ldr	r7, [sp, #4]
   159ac:	ldrb	r1, [r7]
   159b0:	cmp	r1, #0
   159b4:	bne	15a1c <__assert_fail@plt+0x421c>
   159b8:	cmp	r7, r4
   159bc:	subne	sp, fp, #24
   159c0:	popne	{r4, r5, r6, r7, r8, sl, fp, pc}
   159c4:	movw	r1, #50666	; 0xc5ea
   159c8:	ldr	r6, [r6]
   159cc:	mov	r0, #0
   159d0:	mov	r2, #5
   159d4:	movt	r1, #1
   159d8:	bl	114dc <dcgettext@plt>
   159dc:	mov	r7, r0
   159e0:	mov	r0, #0
   159e4:	mov	r1, r5
   159e8:	mov	r2, r4
   159ec:	bl	1828c <__assert_fail@plt+0x6a8c>
   159f0:	mov	r3, r0
   159f4:	mov	r0, #1
   159f8:	mov	r1, r6
   159fc:	mov	r2, r7
   15a00:	bl	115a8 <error@plt>
   15a04:	ldr	r1, [r6]
   15a08:	movw	r2, #50687	; 0xc5ff
   15a0c:	mov	r0, #1
   15a10:	mov	r3, r4
   15a14:	movt	r2, #1
   15a18:	bl	115a8 <error@plt>
   15a1c:	movw	r1, #50639	; 0xc5cf
   15a20:	ldr	r8, [r6]
   15a24:	mov	r0, #0
   15a28:	mov	r2, #5
   15a2c:	movt	r1, #1
   15a30:	bl	114dc <dcgettext@plt>
   15a34:	mov	r6, r0
   15a38:	mov	r0, #0
   15a3c:	mov	r1, r5
   15a40:	mov	r2, r7
   15a44:	bl	1828c <__assert_fail@plt+0x6a8c>
   15a48:	mov	r7, r0
   15a4c:	mov	r0, #1
   15a50:	mov	r1, r5
   15a54:	mov	r2, r4
   15a58:	bl	1828c <__assert_fail@plt+0x6a8c>
   15a5c:	str	r0, [sp]
   15a60:	mov	r0, #1
   15a64:	mov	r1, r8
   15a68:	mov	r2, r6
   15a6c:	mov	r3, r7
   15a70:	bl	115a8 <error@plt>
   15a74:	push	{r4, r5, fp, lr}
   15a78:	add	fp, sp, #8
   15a7c:	sub	sp, sp, #16
   15a80:	mov	r4, r1
   15a84:	movw	r1, #50690	; 0xc602
   15a88:	mov	r5, r0
   15a8c:	mov	r0, #0
   15a90:	mov	r2, #5
   15a94:	movt	r1, #1
   15a98:	bl	114dc <dcgettext@plt>
   15a9c:	movw	r2, #50935	; 0xc6f7
   15aa0:	movw	r3, #50582	; 0xc596
   15aa4:	mov	r1, r0
   15aa8:	movw	r0, #50982	; 0xc726
   15aac:	movt	r2, #1
   15ab0:	movt	r0, #1
   15ab4:	movt	r3, #1
   15ab8:	str	r2, [sp, #4]
   15abc:	movw	r2, #50896	; 0xc6d0
   15ac0:	str	r3, [sp]
   15ac4:	str	r0, [sp, #8]
   15ac8:	mov	r0, r5
   15acc:	mov	r3, r4
   15ad0:	movt	r2, #1
   15ad4:	bl	11674 <fprintf@plt>
   15ad8:	sub	sp, fp, #8
   15adc:	pop	{r4, r5, fp, pc}
   15ae0:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   15ae4:	add	fp, sp, #24
   15ae8:	mov	r6, r2
   15aec:	mov	r7, r1
   15af0:	mov	r4, r0
   15af4:	bl	11680 <__errno_location@plt>
   15af8:	cmp	r7, #0
   15afc:	beq	15b94 <__assert_fail@plt+0x4394>
   15b00:	mov	r5, r0
   15b04:	ldr	r8, [r0]
   15b08:	ldr	r0, [r6]
   15b0c:	cmp	r0, #0
   15b10:	mov	r1, r0
   15b14:	movweq	r1, #16
   15b18:	cmp	r1, r7
   15b1c:	bcs	15b34 <__assert_fail@plt+0x4334>
   15b20:	lsl	r2, r1, #1
   15b24:	cmp	r1, r1, lsl #1
   15b28:	mov	r1, r2
   15b2c:	bls	15b18 <__assert_fail@plt+0x4318>
   15b30:	mov	r1, r7
   15b34:	cmp	r0, #0
   15b38:	beq	15b68 <__assert_fail@plt+0x4368>
   15b3c:	cmp	r1, r0
   15b40:	beq	15b80 <__assert_fail@plt+0x4380>
   15b44:	mov	r0, r4
   15b48:	str	r1, [r6]
   15b4c:	bl	1a368 <__assert_fail@plt+0x8b68>
   15b50:	mov	r4, r0
   15b54:	cmp	r0, #0
   15b58:	bne	15b88 <__assert_fail@plt+0x4388>
   15b5c:	mov	r4, #0
   15b60:	mov	r0, r4
   15b64:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   15b68:	cmp	r4, #0
   15b6c:	bne	15bac <__assert_fail@plt+0x43ac>
   15b70:	mov	r0, r1
   15b74:	str	r1, [r6]
   15b78:	bl	1a2d4 <__assert_fail@plt+0x8ad4>
   15b7c:	mov	r4, r0
   15b80:	cmp	r4, #0
   15b84:	beq	15b5c <__assert_fail@plt+0x435c>
   15b88:	mov	r0, r4
   15b8c:	str	r8, [r5]
   15b90:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   15b94:	movw	r0, #51004	; 0xc73c
   15b98:	movw	r1, #51016	; 0xc748
   15b9c:	movw	r3, #51028	; 0xc754
   15ba0:	mov	r2, #71	; 0x47
   15ba4:	movt	r0, #1
   15ba8:	b	15bc0 <__assert_fail@plt+0x43c0>
   15bac:	movw	r0, #51070	; 0xc77e
   15bb0:	movw	r1, #51016	; 0xc748
   15bb4:	movw	r3, #51028	; 0xc754
   15bb8:	mov	r2, #79	; 0x4f
   15bbc:	movt	r0, #1
   15bc0:	movt	r1, #1
   15bc4:	movt	r3, #1
   15bc8:	bl	11800 <__assert_fail@plt>
   15bcc:	push	{r4, sl, fp, lr}
   15bd0:	add	fp, sp, #8
   15bd4:	mov	r4, r0
   15bd8:	bl	15ae0 <__assert_fail@plt+0x42e0>
   15bdc:	cmp	r0, #0
   15be0:	popne	{r4, sl, fp, pc}
   15be4:	mov	r0, r4
   15be8:	bl	1a204 <__assert_fail@plt+0x8a04>
   15bec:	bl	196c8 <__assert_fail@plt+0x7ec8>
   15bf0:	push	{r4, r5, r6, sl, fp, lr}
   15bf4:	add	fp, sp, #16
   15bf8:	mov	r6, r1
   15bfc:	mov	r1, #1
   15c00:	mov	r2, #0
   15c04:	mov	r4, r0
   15c08:	mov	r5, #0
   15c0c:	bl	19f88 <__assert_fail@plt+0x8788>
   15c10:	cmp	r0, #0
   15c14:	bmi	15c44 <__assert_fail@plt+0x4444>
   15c18:	cmp	r6, #0
   15c1c:	bic	r2, r0, #1
   15c20:	orrne	r2, r0, #1
   15c24:	cmp	r0, r2
   15c28:	beq	15c48 <__assert_fail@plt+0x4448>
   15c2c:	mov	r0, r4
   15c30:	mov	r1, #2
   15c34:	bl	19f88 <__assert_fail@plt+0x8788>
   15c38:	cmn	r0, #1
   15c3c:	movwne	r0, #0
   15c40:	pop	{r4, r5, r6, sl, fp, pc}
   15c44:	mvn	r5, #0
   15c48:	mov	r0, r5
   15c4c:	pop	{r4, r5, r6, sl, fp, pc}
   15c50:	movw	r1, #1030	; 0x406
   15c54:	mov	r2, #0
   15c58:	b	19f88 <__assert_fail@plt+0x8788>
   15c5c:	movw	r1, #53924	; 0xd2a4
   15c60:	movt	r1, #2
   15c64:	str	r0, [r1]
   15c68:	bx	lr
   15c6c:	push	{r4, r5, r6, sl, fp, lr}
   15c70:	add	fp, sp, #16
   15c74:	sub	sp, sp, #8
   15c78:	movw	r6, #53720	; 0xd1d8
   15c7c:	movt	r6, #2
   15c80:	ldr	r5, [r6]
   15c84:	mov	r0, r5
   15c88:	bl	1a1c4 <__assert_fail@plt+0x89c4>
   15c8c:	cmp	r0, #0
   15c90:	beq	15cd0 <__assert_fail@plt+0x44d0>
   15c94:	mov	r0, #1
   15c98:	mov	r2, #0
   15c9c:	mov	r3, #0
   15ca0:	mov	r4, #0
   15ca4:	str	r0, [sp]
   15ca8:	mov	r0, r5
   15cac:	bl	1a22c <__assert_fail@plt+0x8a2c>
   15cb0:	cmp	r0, #0
   15cb4:	bne	15cd4 <__assert_fail@plt+0x44d4>
   15cb8:	ldr	r0, [r6]
   15cbc:	bl	1a168 <__assert_fail@plt+0x8968>
   15cc0:	cmp	r0, #0
   15cc4:	mov	r4, r0
   15cc8:	movwne	r4, #1
   15ccc:	b	15cd4 <__assert_fail@plt+0x44d4>
   15cd0:	mov	r4, #0
   15cd4:	ldr	r0, [r6]
   15cd8:	bl	1a3f8 <__assert_fail@plt+0x8bf8>
   15cdc:	cmp	r4, #0
   15ce0:	cmpeq	r0, #0
   15ce4:	bne	15cf4 <__assert_fail@plt+0x44f4>
   15ce8:	sub	sp, fp, #16
   15cec:	pop	{r4, r5, r6, sl, fp, lr}
   15cf0:	b	15d98 <__assert_fail@plt+0x4598>
   15cf4:	movw	r1, #51087	; 0xc78f
   15cf8:	mov	r0, #0
   15cfc:	mov	r2, #5
   15d00:	movt	r1, #1
   15d04:	bl	114dc <dcgettext@plt>
   15d08:	mov	r4, r0
   15d0c:	movw	r0, #53924	; 0xd2a4
   15d10:	movt	r0, #2
   15d14:	ldr	r6, [r0]
   15d18:	bl	11680 <__errno_location@plt>
   15d1c:	ldr	r5, [r0]
   15d20:	cmp	r6, #0
   15d24:	bne	15d40 <__assert_fail@plt+0x4540>
   15d28:	movw	r2, #50687	; 0xc5ff
   15d2c:	mov	r0, #0
   15d30:	mov	r1, r5
   15d34:	mov	r3, r4
   15d38:	movt	r2, #1
   15d3c:	b	15d60 <__assert_fail@plt+0x4560>
   15d40:	mov	r0, r6
   15d44:	bl	184d4 <__assert_fail@plt+0x6cd4>
   15d48:	movw	r2, #51106	; 0xc7a2
   15d4c:	mov	r3, r0
   15d50:	str	r4, [sp]
   15d54:	mov	r0, #0
   15d58:	mov	r1, r5
   15d5c:	movt	r2, #1
   15d60:	bl	115a8 <error@plt>
   15d64:	bl	15d98 <__assert_fail@plt+0x4598>
   15d68:	movw	r0, #53616	; 0xd170
   15d6c:	movt	r0, #2
   15d70:	ldr	r0, [r0]
   15d74:	bl	114a0 <_exit@plt>
   15d78:	movw	r1, #53928	; 0xd2a8
   15d7c:	movt	r1, #2
   15d80:	str	r0, [r1]
   15d84:	bx	lr
   15d88:	movw	r1, #53932	; 0xd2ac
   15d8c:	movt	r1, #2
   15d90:	strb	r0, [r1]
   15d94:	bx	lr
   15d98:	push	{r4, r5, r6, sl, fp, lr}
   15d9c:	add	fp, sp, #16
   15da0:	sub	sp, sp, #8
   15da4:	movw	r0, #53724	; 0xd1dc
   15da8:	movt	r0, #2
   15dac:	ldr	r0, [r0]
   15db0:	bl	1a3f8 <__assert_fail@plt+0x8bf8>
   15db4:	cmp	r0, #0
   15db8:	beq	15de0 <__assert_fail@plt+0x45e0>
   15dbc:	movw	r0, #53932	; 0xd2ac
   15dc0:	movt	r0, #2
   15dc4:	ldrb	r0, [r0]
   15dc8:	cmp	r0, #0
   15dcc:	beq	15e00 <__assert_fail@plt+0x4600>
   15dd0:	bl	11680 <__errno_location@plt>
   15dd4:	ldr	r0, [r0]
   15dd8:	cmp	r0, #32
   15ddc:	bne	15e00 <__assert_fail@plt+0x4600>
   15de0:	movw	r0, #53712	; 0xd1d0
   15de4:	movt	r0, #2
   15de8:	ldr	r0, [r0]
   15dec:	bl	1a3f8 <__assert_fail@plt+0x8bf8>
   15df0:	cmp	r0, #0
   15df4:	subeq	sp, fp, #16
   15df8:	popeq	{r4, r5, r6, sl, fp, pc}
   15dfc:	b	15e70 <__assert_fail@plt+0x4670>
   15e00:	movw	r1, #51113	; 0xc7a9
   15e04:	mov	r0, #0
   15e08:	mov	r2, #5
   15e0c:	movt	r1, #1
   15e10:	bl	114dc <dcgettext@plt>
   15e14:	mov	r4, r0
   15e18:	movw	r0, #53928	; 0xd2a8
   15e1c:	movt	r0, #2
   15e20:	ldr	r6, [r0]
   15e24:	bl	11680 <__errno_location@plt>
   15e28:	ldr	r5, [r0]
   15e2c:	cmp	r6, #0
   15e30:	bne	15e4c <__assert_fail@plt+0x464c>
   15e34:	movw	r2, #50687	; 0xc5ff
   15e38:	mov	r0, #0
   15e3c:	mov	r1, r5
   15e40:	mov	r3, r4
   15e44:	movt	r2, #1
   15e48:	b	15e6c <__assert_fail@plt+0x466c>
   15e4c:	mov	r0, r6
   15e50:	bl	184d4 <__assert_fail@plt+0x6cd4>
   15e54:	movw	r2, #51106	; 0xc7a2
   15e58:	mov	r3, r0
   15e5c:	str	r4, [sp]
   15e60:	mov	r0, #0
   15e64:	mov	r1, r5
   15e68:	movt	r2, #1
   15e6c:	bl	115a8 <error@plt>
   15e70:	movw	r0, #53616	; 0xd170
   15e74:	movt	r0, #2
   15e78:	ldr	r0, [r0]
   15e7c:	bl	114a0 <_exit@plt>
   15e80:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   15e84:	add	fp, sp, #24
   15e88:	bl	115b4 <opendir@plt>
   15e8c:	cmp	r0, #0
   15e90:	beq	15ee4 <__assert_fail@plt+0x46e4>
   15e94:	mov	r4, r0
   15e98:	bl	11788 <dirfd@plt>
   15e9c:	cmp	r0, #2
   15ea0:	bhi	15ef0 <__assert_fail@plt+0x46f0>
   15ea4:	movw	r1, #1030	; 0x406
   15ea8:	mov	r2, #3
   15eac:	bl	19f88 <__assert_fail@plt+0x8788>
   15eb0:	cmn	r0, #1
   15eb4:	ble	15ef8 <__assert_fail@plt+0x46f8>
   15eb8:	mov	r7, r0
   15ebc:	bl	11770 <fdopendir@plt>
   15ec0:	mov	r5, r0
   15ec4:	bl	11680 <__errno_location@plt>
   15ec8:	ldr	r8, [r0]
   15ecc:	mov	r6, r0
   15ed0:	cmp	r5, #0
   15ed4:	bne	15f08 <__assert_fail@plt+0x4708>
   15ed8:	mov	r0, r7
   15edc:	bl	117e8 <close@plt>
   15ee0:	b	15f04 <__assert_fail@plt+0x4704>
   15ee4:	mov	r5, #0
   15ee8:	mov	r0, r5
   15eec:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   15ef0:	mov	r0, r4
   15ef4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   15ef8:	bl	11680 <__errno_location@plt>
   15efc:	ldr	r8, [r0]
   15f00:	mov	r6, r0
   15f04:	mov	r5, #0
   15f08:	mov	r0, r4
   15f0c:	bl	117f4 <closedir@plt>
   15f10:	mov	r0, r5
   15f14:	str	r8, [r6]
   15f18:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   15f1c:	sub	sp, sp, #8
   15f20:	push	{fp, lr}
   15f24:	mov	fp, sp
   15f28:	sub	sp, sp, #8
   15f2c:	str	r2, [fp, #8]
   15f30:	str	r3, [fp, #12]
   15f34:	tst	r1, #64	; 0x40
   15f38:	mov	r2, #0
   15f3c:	ldrne	r2, [fp, #8]
   15f40:	bl	115c0 <open64@plt>
   15f44:	bl	18a3c <__assert_fail@plt+0x723c>
   15f48:	mov	sp, fp
   15f4c:	pop	{fp, lr}
   15f50:	add	sp, sp, #8
   15f54:	bx	lr
   15f58:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15f5c:	add	fp, sp, #28
   15f60:	sub	sp, sp, #308	; 0x134
   15f64:	mov	r6, r1
   15f68:	mov	sl, r0
   15f6c:	bl	11578 <__ctype_get_mb_cur_max@plt>
   15f70:	cmp	r0, #2
   15f74:	bcc	16328 <__assert_fail@plt+0x4b28>
   15f78:	mov	r4, #0
   15f7c:	sub	r0, fp, #88	; 0x58
   15f80:	str	r4, [fp, #-80]	; 0xffffffb0
   15f84:	str	r4, [fp, #-84]	; 0xffffffac
   15f88:	strb	r4, [fp, #-76]	; 0xffffffb4
   15f8c:	strb	r4, [fp, #-88]	; 0xffffffa8
   15f90:	str	r6, [fp, #-72]	; 0xffffffb8
   15f94:	bl	169e4 <__assert_fail@plt+0x51e4>
   15f98:	ldrb	r0, [fp, #-64]	; 0xffffffc0
   15f9c:	cmp	r0, #0
   15fa0:	beq	15fb0 <__assert_fail@plt+0x47b0>
   15fa4:	ldr	r0, [fp, #-60]	; 0xffffffc4
   15fa8:	cmp	r0, #0
   15fac:	beq	16444 <__assert_fail@plt+0x4c44>
   15fb0:	add	r0, sp, #136	; 0x88
   15fb4:	str	r4, [fp, #-136]	; 0xffffff78
   15fb8:	str	r4, [fp, #-140]	; 0xffffff74
   15fbc:	str	r6, [fp, #-128]	; 0xffffff80
   15fc0:	strb	r4, [fp, #-132]	; 0xffffff7c
   15fc4:	str	r6, [sp, #16]
   15fc8:	strb	r4, [fp, #-144]	; 0xffffff70
   15fcc:	str	r4, [sp, #144]	; 0x90
   15fd0:	str	r4, [sp, #140]	; 0x8c
   15fd4:	str	sl, [sp, #152]	; 0x98
   15fd8:	strb	r4, [sp, #148]	; 0x94
   15fdc:	strb	r4, [sp, #136]	; 0x88
   15fe0:	bl	169e4 <__assert_fail@plt+0x51e4>
   15fe4:	ldrb	r0, [sp, #160]	; 0xa0
   15fe8:	cmp	r0, #0
   15fec:	beq	15ffc <__assert_fail@plt+0x47fc>
   15ff0:	ldr	r0, [sp, #164]	; 0xa4
   15ff4:	cmp	r0, #0
   15ff8:	beq	16450 <__assert_fail@plt+0x4c50>
   15ffc:	add	r0, sp, #24
   16000:	mov	r8, #1
   16004:	mov	r6, #0
   16008:	sub	r5, fp, #144	; 0x90
   1600c:	mov	r1, #0
   16010:	mov	r7, #0
   16014:	mov	r9, #0
   16018:	add	r0, r0, #4
   1601c:	str	r0, [sp, #12]
   16020:	add	r0, sp, #136	; 0x88
   16024:	add	r0, r0, #16
   16028:	str	r0, [sp, #8]
   1602c:	add	r0, r9, r9, lsl #2
   16030:	mov	r4, r7
   16034:	cmp	r7, r0
   16038:	bcc	160e4 <__assert_fail@plt+0x48e4>
   1603c:	tst	r8, #1
   16040:	beq	160e4 <__assert_fail@plt+0x48e4>
   16044:	cmp	r9, #10
   16048:	bcc	160e4 <__assert_fail@plt+0x48e4>
   1604c:	subs	r0, r4, r1
   16050:	beq	16098 <__assert_fail@plt+0x4898>
   16054:	sub	r7, r1, r4
   16058:	b	16078 <__assert_fail@plt+0x4878>
   1605c:	strb	r6, [fp, #-132]	; 0xffffff7c
   16060:	adds	r7, r7, #1
   16064:	ldr	r0, [fp, #-128]	; 0xffffff80
   16068:	ldr	r1, [fp, #-124]	; 0xffffff84
   1606c:	add	r0, r0, r1
   16070:	str	r0, [fp, #-128]	; 0xffffff80
   16074:	bcs	16098 <__assert_fail@plt+0x4898>
   16078:	mov	r0, r5
   1607c:	bl	169e4 <__assert_fail@plt+0x51e4>
   16080:	ldrb	r0, [fp, #-120]	; 0xffffff88
   16084:	cmp	r0, #0
   16088:	beq	1605c <__assert_fail@plt+0x485c>
   1608c:	ldr	r0, [fp, #-116]	; 0xffffff8c
   16090:	cmp	r0, #0
   16094:	bne	1605c <__assert_fail@plt+0x485c>
   16098:	mov	r0, r5
   1609c:	bl	169e4 <__assert_fail@plt+0x51e4>
   160a0:	ldrb	r0, [fp, #-120]	; 0xffffff88
   160a4:	cmp	r0, #0
   160a8:	beq	160e0 <__assert_fail@plt+0x48e0>
   160ac:	ldr	r0, [fp, #-116]	; 0xffffff8c
   160b0:	mov	r1, r4
   160b4:	cmp	r0, #0
   160b8:	bne	160e4 <__assert_fail@plt+0x48e4>
   160bc:	ldr	r1, [sp, #16]
   160c0:	mov	r0, sl
   160c4:	add	r2, sp, #80	; 0x50
   160c8:	bl	16478 <__assert_fail@plt+0x4c78>
   160cc:	mov	r8, #0
   160d0:	cmp	r0, #0
   160d4:	mov	r1, r4
   160d8:	beq	160e4 <__assert_fail@plt+0x48e4>
   160dc:	b	1646c <__assert_fail@plt+0x4c6c>
   160e0:	mov	r1, r4
   160e4:	ldrb	r0, [sp, #160]	; 0xa0
   160e8:	add	r7, r4, #1
   160ec:	str	r1, [sp, #20]
   160f0:	cmp	r0, #0
   160f4:	ldrbne	r0, [fp, #-64]	; 0xffffffc0
   160f8:	cmpne	r0, #0
   160fc:	bne	16128 <__assert_fail@plt+0x4928>
   16100:	ldr	r2, [sp, #156]	; 0x9c
   16104:	ldr	r0, [fp, #-68]	; 0xffffffbc
   16108:	cmp	r2, r0
   1610c:	bne	162e4 <__assert_fail@plt+0x4ae4>
   16110:	ldr	r1, [fp, #-72]	; 0xffffffb8
   16114:	ldr	r0, [sp, #152]	; 0x98
   16118:	bl	11638 <bcmp@plt>
   1611c:	cmp	r0, #0
   16120:	bne	162e4 <__assert_fail@plt+0x4ae4>
   16124:	b	16138 <__assert_fail@plt+0x4938>
   16128:	ldr	r0, [fp, #-60]	; 0xffffffc4
   1612c:	ldr	r1, [sp, #164]	; 0xa4
   16130:	cmp	r1, r0
   16134:	bne	162e4 <__assert_fail@plt+0x4ae4>
   16138:	add	r2, sp, #136	; 0x88
   1613c:	mov	r1, #48	; 0x30
   16140:	add	r3, sp, #80	; 0x50
   16144:	str	r9, [sp]
   16148:	str	r8, [sp, #4]
   1614c:	mov	r0, r2
   16150:	add	r2, r2, #32
   16154:	vld1.64	{d16-d17}, [r0], r1
   16158:	ldr	r1, [sp, #8]
   1615c:	vld1.64	{d20-d21}, [r2]
   16160:	vldr	d22, [r0]
   16164:	add	r0, r3, #32
   16168:	vld1.64	{d18-d19}, [r1]
   1616c:	add	r1, r3, #16
   16170:	vst1.64	{d20-d21}, [r0]
   16174:	mov	r0, r3
   16178:	vst1.64	{d18-d19}, [r1]
   1617c:	mov	r1, #12
   16180:	vst1.64	{d16-d17}, [r0], r1
   16184:	strb	r6, [r0]
   16188:	ldr	r0, [sp, #16]
   1618c:	vstr	d22, [sp, #128]	; 0x80
   16190:	ldr	r1, [sp, #100]	; 0x64
   16194:	str	r0, [sp, #40]	; 0x28
   16198:	ldr	r0, [sp, #96]	; 0x60
   1619c:	strb	r6, [sp, #24]
   161a0:	add	r0, r0, r1
   161a4:	str	r0, [sp, #96]	; 0x60
   161a8:	ldr	r0, [sp, #12]
   161ac:	str	r6, [r0]
   161b0:	str	r6, [r0, #4]
   161b4:	add	r0, sp, #24
   161b8:	strb	r6, [sp, #36]	; 0x24
   161bc:	bl	169e4 <__assert_fail@plt+0x51e4>
   161c0:	ldrb	r0, [sp, #48]	; 0x30
   161c4:	cmp	r0, #0
   161c8:	beq	161d8 <__assert_fail@plt+0x49d8>
   161cc:	ldr	r0, [sp, #52]	; 0x34
   161d0:	cmp	r0, #0
   161d4:	beq	16474 <__assert_fail@plt+0x4c74>
   161d8:	strb	r6, [sp, #36]	; 0x24
   161dc:	ldr	r0, [sp, #40]	; 0x28
   161e0:	ldr	r1, [sp, #44]	; 0x2c
   161e4:	add	r0, r0, r1
   161e8:	str	r0, [sp, #40]	; 0x28
   161ec:	add	r0, sp, #24
   161f0:	bl	169e4 <__assert_fail@plt+0x51e4>
   161f4:	ldrb	r0, [sp, #48]	; 0x30
   161f8:	cmp	r0, #0
   161fc:	beq	1620c <__assert_fail@plt+0x4a0c>
   16200:	ldr	r0, [sp, #52]	; 0x34
   16204:	cmp	r0, #0
   16208:	beq	1645c <__assert_fail@plt+0x4c5c>
   1620c:	add	r7, r4, #2
   16210:	add	r0, sp, #80	; 0x50
   16214:	bl	169e4 <__assert_fail@plt+0x51e4>
   16218:	ldr	r0, [sp, #108]	; 0x6c
   1621c:	ldrb	r1, [sp, #104]	; 0x68
   16220:	cmp	r0, #0
   16224:	bne	16230 <__assert_fail@plt+0x4a30>
   16228:	cmp	r1, #0
   1622c:	bne	1644c <__assert_fail@plt+0x4c4c>
   16230:	cmp	r1, #0
   16234:	ldrbne	r1, [sp, #48]	; 0x30
   16238:	cmpne	r1, #0
   1623c:	bne	16278 <__assert_fail@plt+0x4a78>
   16240:	ldr	r4, [sp, #100]	; 0x64
   16244:	ldr	r0, [sp, #44]	; 0x2c
   16248:	cmp	r4, r0
   1624c:	bne	162d8 <__assert_fail@plt+0x4ad8>
   16250:	ldr	r8, [sp, #40]	; 0x28
   16254:	ldr	r9, [sp, #96]	; 0x60
   16258:	mov	r2, r4
   1625c:	mov	r0, r9
   16260:	mov	r1, r8
   16264:	bl	11638 <bcmp@plt>
   16268:	cmp	r0, #0
   1626c:	mov	r0, r4
   16270:	beq	16294 <__assert_fail@plt+0x4a94>
   16274:	b	162d8 <__assert_fail@plt+0x4ad8>
   16278:	ldr	r1, [sp, #52]	; 0x34
   1627c:	cmp	r0, r1
   16280:	bne	162d8 <__assert_fail@plt+0x4ad8>
   16284:	ldr	r8, [sp, #40]	; 0x28
   16288:	ldr	r4, [sp, #44]	; 0x2c
   1628c:	ldr	r9, [sp, #96]	; 0x60
   16290:	ldr	r0, [sp, #100]	; 0x64
   16294:	mov	r1, #0
   16298:	add	r0, r9, r0
   1629c:	strb	r1, [sp, #92]	; 0x5c
   162a0:	str	r0, [sp, #96]	; 0x60
   162a4:	add	r0, r8, r4
   162a8:	strb	r1, [sp, #36]	; 0x24
   162ac:	str	r0, [sp, #40]	; 0x28
   162b0:	add	r0, sp, #24
   162b4:	bl	169e4 <__assert_fail@plt+0x51e4>
   162b8:	ldrb	r0, [sp, #48]	; 0x30
   162bc:	add	r7, r7, #1
   162c0:	cmp	r0, #0
   162c4:	beq	16210 <__assert_fail@plt+0x4a10>
   162c8:	ldr	r0, [sp, #52]	; 0x34
   162cc:	cmp	r0, #0
   162d0:	bne	16210 <__assert_fail@plt+0x4a10>
   162d4:	b	1645c <__assert_fail@plt+0x4c5c>
   162d8:	ldr	r8, [sp, #4]
   162dc:	ldr	r9, [sp]
   162e0:	mov	r6, #0
   162e4:	mov	r4, #0
   162e8:	add	r9, r9, #1
   162ec:	strb	r4, [sp, #148]	; 0x94
   162f0:	ldr	r0, [sp, #152]	; 0x98
   162f4:	ldr	r1, [sp, #156]	; 0x9c
   162f8:	add	r0, r0, r1
   162fc:	str	r0, [sp, #152]	; 0x98
   16300:	add	r0, sp, #136	; 0x88
   16304:	bl	169e4 <__assert_fail@plt+0x51e4>
   16308:	ldrb	r0, [sp, #160]	; 0xa0
   1630c:	ldr	r1, [sp, #20]
   16310:	cmp	r0, #0
   16314:	beq	1602c <__assert_fail@plt+0x482c>
   16318:	ldr	r0, [sp, #164]	; 0xa4
   1631c:	cmp	r0, #0
   16320:	bne	1602c <__assert_fail@plt+0x482c>
   16324:	b	16450 <__assert_fail@plt+0x4c50>
   16328:	ldrb	r5, [r6]
   1632c:	cmp	r5, #0
   16330:	beq	16444 <__assert_fail@plt+0x4c44>
   16334:	ldrb	r9, [sl]
   16338:	cmp	r9, #0
   1633c:	beq	1644c <__assert_fail@plt+0x4c4c>
   16340:	mov	lr, #1
   16344:	mov	ip, #0
   16348:	mov	r3, r6
   1634c:	mov	r7, #0
   16350:	mov	r8, #0
   16354:	add	r0, r8, r8, lsl #2
   16358:	cmp	r7, r0
   1635c:	bcc	163ec <__assert_fail@plt+0x4bec>
   16360:	tst	lr, #1
   16364:	beq	163ec <__assert_fail@plt+0x4bec>
   16368:	cmp	r8, #10
   1636c:	bcc	163ec <__assert_fail@plt+0x4bec>
   16370:	cmp	r3, #0
   16374:	beq	163b4 <__assert_fail@plt+0x4bb4>
   16378:	sub	r1, r7, ip
   1637c:	mov	r0, r3
   16380:	str	r7, [sp, #20]
   16384:	mov	r7, r5
   16388:	mov	r4, lr
   1638c:	mov	r5, r3
   16390:	bl	116ec <strnlen@plt>
   16394:	mov	r3, r5
   16398:	mov	r5, r7
   1639c:	ldr	r7, [sp, #20]
   163a0:	mov	lr, r4
   163a4:	ldrb	r0, [r3, r0]!
   163a8:	mov	ip, r7
   163ac:	cmp	r0, #0
   163b0:	bne	163ec <__assert_fail@plt+0x4bec>
   163b4:	mov	r0, r6
   163b8:	mov	r4, ip
   163bc:	bl	11650 <strlen@plt>
   163c0:	mov	r2, r0
   163c4:	mov	r0, sl
   163c8:	mov	r1, r6
   163cc:	sub	r3, fp, #88	; 0x58
   163d0:	bl	16888 <__assert_fail@plt+0x5088>
   163d4:	cmp	r0, #0
   163d8:	bne	16464 <__assert_fail@plt+0x4c64>
   163dc:	ldrb	r9, [sl]
   163e0:	mov	lr, #0
   163e4:	mov	r3, #0
   163e8:	mov	ip, r4
   163ec:	uxtb	r0, r9
   163f0:	cmp	r0, r5
   163f4:	bne	16428 <__assert_fail@plt+0x4c28>
   163f8:	mov	r0, #1
   163fc:	ldrb	r1, [r6, r0]
   16400:	cmp	r1, #0
   16404:	beq	16444 <__assert_fail@plt+0x4c44>
   16408:	ldrb	r2, [sl, r0]
   1640c:	cmp	r2, #0
   16410:	beq	1644c <__assert_fail@plt+0x4c4c>
   16414:	add	r0, r0, #1
   16418:	cmp	r2, r1
   1641c:	beq	163fc <__assert_fail@plt+0x4bfc>
   16420:	add	r7, r7, r0
   16424:	b	1642c <__assert_fail@plt+0x4c2c>
   16428:	add	r7, r7, #1
   1642c:	ldrb	r9, [sl, #1]!
   16430:	add	r8, r8, #1
   16434:	mov	r4, #0
   16438:	cmp	r9, #0
   1643c:	bne	16354 <__assert_fail@plt+0x4b54>
   16440:	b	16450 <__assert_fail@plt+0x4c50>
   16444:	mov	r4, sl
   16448:	b	16450 <__assert_fail@plt+0x4c50>
   1644c:	mov	r4, #0
   16450:	mov	r0, r4
   16454:	sub	sp, fp, #28
   16458:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1645c:	ldr	r4, [sp, #152]	; 0x98
   16460:	b	16450 <__assert_fail@plt+0x4c50>
   16464:	ldr	r4, [fp, #-88]	; 0xffffffa8
   16468:	b	16450 <__assert_fail@plt+0x4c50>
   1646c:	ldr	r4, [sp, #80]	; 0x50
   16470:	b	16450 <__assert_fail@plt+0x4c50>
   16474:	bl	117d0 <abort@plt>
   16478:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1647c:	add	fp, sp, #28
   16480:	sub	sp, sp, #132	; 0x84
   16484:	mov	r4, r0
   16488:	mov	r0, r1
   1648c:	mov	r8, r2
   16490:	mov	r7, r1
   16494:	bl	1a66c <__assert_fail@plt+0x8e6c>
   16498:	mov	sl, r0
   1649c:	movw	r0, #47662	; 0xba2e
   164a0:	mov	r5, #0
   164a4:	movt	r0, #744	; 0x2e8
   164a8:	cmp	sl, r0
   164ac:	bhi	16878 <__assert_fail@plt+0x5078>
   164b0:	mov	r0, #44	; 0x2c
   164b4:	mul	r0, sl, r0
   164b8:	cmp	r0, #4016	; 0xfb0
   164bc:	bhi	164e4 <__assert_fail@plt+0x4ce4>
   164c0:	add	r0, r0, #22
   164c4:	bic	r0, r0, #7
   164c8:	sub	r0, sp, r0
   164cc:	add	r1, r0, #15
   164d0:	bic	r9, r1, #15
   164d4:	mov	sp, r0
   164d8:	cmp	r9, #0
   164dc:	bne	164f4 <__assert_fail@plt+0x4cf4>
   164e0:	b	16878 <__assert_fail@plt+0x5078>
   164e4:	bl	1a520 <__assert_fail@plt+0x8d20>
   164e8:	mov	r9, r0
   164ec:	cmp	r9, #0
   164f0:	beq	16878 <__assert_fail@plt+0x5078>
   164f4:	sub	r6, fp, #88	; 0x58
   164f8:	str	r4, [fp, #-160]	; 0xffffff60
   164fc:	mov	r4, #0
   16500:	mov	r0, r6
   16504:	str	r4, [fp, #-80]	; 0xffffffb0
   16508:	str	r4, [fp, #-84]	; 0xffffffac
   1650c:	strb	r4, [fp, #-76]	; 0xffffffb4
   16510:	strb	r4, [fp, #-88]	; 0xffffffa8
   16514:	str	r7, [fp, #-72]	; 0xffffffb8
   16518:	bl	169e4 <__assert_fail@plt+0x51e4>
   1651c:	add	r0, sl, sl, lsl #2
   16520:	add	r3, r9, r0, lsl #3
   16524:	ldrb	r0, [fp, #-64]	; 0xffffffc0
   16528:	str	r3, [fp, #-148]	; 0xffffff6c
   1652c:	cmp	r0, #0
   16530:	beq	16540 <__assert_fail@plt+0x4d40>
   16534:	ldr	r0, [fp, #-60]	; 0xffffffc4
   16538:	cmp	r0, #0
   1653c:	beq	165c4 <__assert_fail@plt+0x4dc4>
   16540:	add	r7, r9, #16
   16544:	add	r5, r6, #32
   16548:	ldr	r0, [fp, #-72]	; 0xffffffb8
   1654c:	cmp	r0, r5
   16550:	bne	16568 <__assert_fail@plt+0x4d68>
   16554:	ldr	r2, [fp, #-68]	; 0xffffffbc
   16558:	mov	r0, r7
   1655c:	mov	r1, r5
   16560:	bl	114ac <memcpy@plt>
   16564:	mov	r0, r7
   16568:	str	r0, [r7, #-16]
   1656c:	ldr	r0, [fp, #-68]	; 0xffffffbc
   16570:	str	r0, [r7, #-12]
   16574:	ldrb	r0, [fp, #-64]	; 0xffffffc0
   16578:	strb	r0, [r7, #-8]
   1657c:	cmp	r0, #0
   16580:	ldrne	r0, [fp, #-60]	; 0xffffffc4
   16584:	strne	r0, [r7, #-4]
   16588:	strb	r4, [fp, #-76]	; 0xffffffb4
   1658c:	ldr	r0, [fp, #-72]	; 0xffffffb8
   16590:	ldr	r1, [fp, #-68]	; 0xffffffbc
   16594:	add	r0, r0, r1
   16598:	str	r0, [fp, #-72]	; 0xffffffb8
   1659c:	mov	r0, r6
   165a0:	bl	169e4 <__assert_fail@plt+0x51e4>
   165a4:	ldrb	r1, [fp, #-64]	; 0xffffffc0
   165a8:	ldr	r0, [fp, #-60]	; 0xffffffc4
   165ac:	ldr	r3, [fp, #-148]	; 0xffffff6c
   165b0:	add	r7, r7, #40	; 0x28
   165b4:	cmp	r1, #0
   165b8:	beq	16548 <__assert_fail@plt+0x4d48>
   165bc:	cmp	r0, #0
   165c0:	bne	16548 <__assert_fail@plt+0x4d48>
   165c4:	mov	r0, #1
   165c8:	cmp	sl, #3
   165cc:	str	r8, [fp, #-156]	; 0xffffff64
   165d0:	str	sl, [fp, #-152]	; 0xffffff68
   165d4:	str	r0, [r3, #4]
   165d8:	bcc	166a4 <__assert_fail@plt+0x4ea4>
   165dc:	mov	r4, #2
   165e0:	mov	r5, #0
   165e4:	b	16604 <__assert_fail@plt+0x4e04>
   165e8:	mov	r5, #0
   165ec:	mov	r0, r4
   165f0:	str	r0, [r3, r4, lsl #2]
   165f4:	ldr	r0, [fp, #-152]	; 0xffffff68
   165f8:	add	r4, r4, #1
   165fc:	cmp	r4, r0
   16600:	beq	166a4 <__assert_fail@plt+0x4ea4>
   16604:	add	r0, r4, r4, lsl #2
   16608:	add	r0, r9, r0, lsl #3
   1660c:	ldrb	r8, [r0, #-32]	; 0xffffffe0
   16610:	sub	sl, r0, #40	; 0x28
   16614:	sub	r6, r0, #36	; 0x24
   16618:	sub	r7, r0, #28
   1661c:	cmp	r8, #0
   16620:	beq	1664c <__assert_fail@plt+0x4e4c>
   16624:	add	r0, r5, r5, lsl #2
   16628:	add	r0, r9, r0, lsl #3
   1662c:	ldrb	r1, [r0, #8]
   16630:	cmp	r1, #0
   16634:	beq	1664c <__assert_fail@plt+0x4e4c>
   16638:	ldr	r0, [r0, #12]
   1663c:	ldr	r1, [r7]
   16640:	cmp	r1, r0
   16644:	bne	1667c <__assert_fail@plt+0x4e7c>
   16648:	b	16698 <__assert_fail@plt+0x4e98>
   1664c:	add	r0, r5, r5, lsl #2
   16650:	ldr	r2, [r6]
   16654:	add	r1, r9, r0, lsl #3
   16658:	ldr	r1, [r1, #4]
   1665c:	cmp	r2, r1
   16660:	bne	1667c <__assert_fail@plt+0x4e7c>
   16664:	ldr	r1, [r9, r0, lsl #3]
   16668:	ldr	r0, [sl]
   1666c:	bl	11638 <bcmp@plt>
   16670:	ldr	r3, [fp, #-148]	; 0xffffff6c
   16674:	cmp	r0, #0
   16678:	beq	16698 <__assert_fail@plt+0x4e98>
   1667c:	cmp	r5, #0
   16680:	beq	165e8 <__assert_fail@plt+0x4de8>
   16684:	ldr	r0, [r3, r5, lsl #2]
   16688:	sub	r5, r5, r0
   1668c:	cmp	r8, #0
   16690:	bne	16624 <__assert_fail@plt+0x4e24>
   16694:	b	1664c <__assert_fail@plt+0x4e4c>
   16698:	add	r5, r5, #1
   1669c:	sub	r0, r4, r5
   166a0:	b	165f0 <__assert_fail@plt+0x4df0>
   166a4:	ldr	r8, [fp, #-156]	; 0xffffff64
   166a8:	ldr	r0, [fp, #-160]	; 0xffffff60
   166ac:	mov	r6, #0
   166b0:	str	r6, [r8]
   166b4:	str	r6, [fp, #-80]	; 0xffffffb0
   166b8:	str	r6, [fp, #-84]	; 0xffffffac
   166bc:	strb	r6, [fp, #-76]	; 0xffffffb4
   166c0:	strb	r6, [fp, #-88]	; 0xffffffa8
   166c4:	str	r6, [fp, #-136]	; 0xffffff78
   166c8:	str	r6, [fp, #-140]	; 0xffffff74
   166cc:	str	r0, [fp, #-128]	; 0xffffff80
   166d0:	str	r0, [fp, #-72]	; 0xffffffb8
   166d4:	sub	r0, fp, #144	; 0x90
   166d8:	strb	r6, [fp, #-132]	; 0xffffff7c
   166dc:	strb	r6, [fp, #-144]	; 0xffffff70
   166e0:	bl	169e4 <__assert_fail@plt+0x51e4>
   166e4:	ldr	r0, [fp, #-116]	; 0xffffff8c
   166e8:	ldrb	r1, [fp, #-120]	; 0xffffff88
   166ec:	cmp	r0, #0
   166f0:	bne	166fc <__assert_fail@plt+0x4efc>
   166f4:	cmp	r1, #0
   166f8:	bne	1686c <__assert_fail@plt+0x506c>
   166fc:	clz	r1, r1
   16700:	sub	r4, fp, #88	; 0x58
   16704:	mov	sl, #0
   16708:	lsr	r1, r1, #5
   1670c:	add	r2, sl, sl, lsl #2
   16710:	tst	r1, #1
   16714:	add	r3, r9, r2, lsl #3
   16718:	bne	16740 <__assert_fail@plt+0x4f40>
   1671c:	ldrb	r1, [r3, #8]
   16720:	cmp	r1, #0
   16724:	beq	16740 <__assert_fail@plt+0x4f40>
   16728:	ldr	r1, [r3, #12]
   1672c:	cmp	r1, r0
   16730:	bne	1676c <__assert_fail@plt+0x4f6c>
   16734:	ldr	r7, [fp, #-128]	; 0xffffff80
   16738:	ldr	r5, [fp, #-124]	; 0xffffff84
   1673c:	b	167cc <__assert_fail@plt+0x4fcc>
   16740:	ldr	r5, [r3, #4]
   16744:	ldr	r0, [fp, #-124]	; 0xffffff84
   16748:	cmp	r5, r0
   1674c:	bne	1676c <__assert_fail@plt+0x4f6c>
   16750:	ldr	r0, [r9, r2, lsl #3]
   16754:	ldr	r7, [fp, #-128]	; 0xffffff80
   16758:	mov	r2, r5
   1675c:	mov	r1, r7
   16760:	bl	11638 <bcmp@plt>
   16764:	cmp	r0, #0
   16768:	beq	167cc <__assert_fail@plt+0x4fcc>
   1676c:	cmp	sl, #0
   16770:	beq	167ec <__assert_fail@plt+0x4fec>
   16774:	ldr	r0, [fp, #-148]	; 0xffffff6c
   16778:	ldr	r5, [r0, sl, lsl #2]
   1677c:	sub	sl, sl, r5
   16780:	cmp	r5, #0
   16784:	bne	167a8 <__assert_fail@plt+0x4fa8>
   16788:	b	16838 <__assert_fail@plt+0x5038>
   1678c:	strb	r6, [fp, #-76]	; 0xffffffb4
   16790:	subs	r5, r5, #1
   16794:	ldr	r0, [fp, #-72]	; 0xffffffb8
   16798:	ldr	r1, [fp, #-68]	; 0xffffffbc
   1679c:	add	r0, r0, r1
   167a0:	str	r0, [fp, #-72]	; 0xffffffb8
   167a4:	beq	16838 <__assert_fail@plt+0x5038>
   167a8:	mov	r0, r4
   167ac:	bl	169e4 <__assert_fail@plt+0x51e4>
   167b0:	ldrb	r0, [fp, #-64]	; 0xffffffc0
   167b4:	cmp	r0, #0
   167b8:	beq	1678c <__assert_fail@plt+0x4f8c>
   167bc:	ldr	r0, [fp, #-60]	; 0xffffffc4
   167c0:	cmp	r0, #0
   167c4:	bne	1678c <__assert_fail@plt+0x4f8c>
   167c8:	b	16884 <__assert_fail@plt+0x5084>
   167cc:	add	r0, r7, r5
   167d0:	strb	r6, [fp, #-132]	; 0xffffff7c
   167d4:	add	sl, sl, #1
   167d8:	str	r0, [fp, #-128]	; 0xffffff80
   167dc:	ldr	r0, [fp, #-152]	; 0xffffff68
   167e0:	cmp	sl, r0
   167e4:	bne	16838 <__assert_fail@plt+0x5038>
   167e8:	b	16864 <__assert_fail@plt+0x5064>
   167ec:	mov	r0, r4
   167f0:	bl	169e4 <__assert_fail@plt+0x51e4>
   167f4:	ldrb	r0, [fp, #-64]	; 0xffffffc0
   167f8:	cmp	r0, #0
   167fc:	beq	1680c <__assert_fail@plt+0x500c>
   16800:	ldr	r0, [fp, #-60]	; 0xffffffc4
   16804:	cmp	r0, #0
   16808:	beq	16884 <__assert_fail@plt+0x5084>
   1680c:	mov	sl, #0
   16810:	strb	sl, [fp, #-76]	; 0xffffffb4
   16814:	strb	sl, [fp, #-132]	; 0xffffff7c
   16818:	ldr	r0, [fp, #-72]	; 0xffffffb8
   1681c:	ldr	r1, [fp, #-68]	; 0xffffffbc
   16820:	add	r0, r0, r1
   16824:	ldr	r1, [fp, #-124]	; 0xffffff84
   16828:	str	r0, [fp, #-72]	; 0xffffffb8
   1682c:	ldr	r0, [fp, #-128]	; 0xffffff80
   16830:	add	r0, r0, r1
   16834:	str	r0, [fp, #-128]	; 0xffffff80
   16838:	sub	r0, fp, #144	; 0x90
   1683c:	bl	169e4 <__assert_fail@plt+0x51e4>
   16840:	ldrb	r2, [fp, #-120]	; 0xffffff88
   16844:	clz	r0, r2
   16848:	lsr	r1, r0, #5
   1684c:	ldr	r0, [fp, #-116]	; 0xffffff8c
   16850:	cmp	r0, #0
   16854:	bne	1670c <__assert_fail@plt+0x4f0c>
   16858:	cmp	r2, #0
   1685c:	beq	1670c <__assert_fail@plt+0x4f0c>
   16860:	b	1686c <__assert_fail@plt+0x506c>
   16864:	ldr	r0, [fp, #-72]	; 0xffffffb8
   16868:	str	r0, [r8]
   1686c:	mov	r0, r9
   16870:	bl	1a590 <__assert_fail@plt+0x8d90>
   16874:	mov	r5, #1
   16878:	mov	r0, r5
   1687c:	sub	sp, fp, #28
   16880:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16884:	bl	117d0 <abort@plt>
   16888:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1688c:	add	fp, sp, #24
   16890:	mov	r4, #0
   16894:	cmn	r2, #-536870911	; 0xe0000001
   16898:	bhi	169d8 <__assert_fail@plt+0x51d8>
   1689c:	mov	r7, r0
   168a0:	lsl	r0, r2, #2
   168a4:	mov	r8, r3
   168a8:	mov	r5, r2
   168ac:	mov	r6, r1
   168b0:	cmp	r0, #4016	; 0xfb0
   168b4:	bhi	168dc <__assert_fail@plt+0x50dc>
   168b8:	add	r0, r0, #22
   168bc:	bic	r0, r0, #7
   168c0:	sub	r1, sp, r0
   168c4:	add	r0, r1, #15
   168c8:	bic	r0, r0, #15
   168cc:	mov	sp, r1
   168d0:	cmp	r0, #0
   168d4:	bne	168e8 <__assert_fail@plt+0x50e8>
   168d8:	b	169d8 <__assert_fail@plt+0x51d8>
   168dc:	bl	1a520 <__assert_fail@plt+0x8d20>
   168e0:	cmp	r0, #0
   168e4:	beq	169d8 <__assert_fail@plt+0x51d8>
   168e8:	mov	r1, #1
   168ec:	cmp	r5, #3
   168f0:	str	r1, [r0, #4]
   168f4:	bcc	1695c <__assert_fail@plt+0x515c>
   168f8:	mov	r1, #2
   168fc:	mov	r2, #0
   16900:	b	1691c <__assert_fail@plt+0x511c>
   16904:	add	r2, r2, #1
   16908:	sub	r3, r1, r2
   1690c:	str	r3, [r0, r1, lsl #2]
   16910:	add	r1, r1, #1
   16914:	cmp	r1, r5
   16918:	beq	1695c <__assert_fail@plt+0x515c>
   1691c:	add	r3, r1, r6
   16920:	ldrb	r4, [r6, r2]
   16924:	ldrb	r3, [r3, #-1]
   16928:	cmp	r3, r4
   1692c:	beq	16904 <__assert_fail@plt+0x5104>
   16930:	cmp	r2, #0
   16934:	beq	16950 <__assert_fail@plt+0x5150>
   16938:	ldr	r4, [r0, r2, lsl #2]
   1693c:	sub	r2, r2, r4
   16940:	ldrb	r4, [r6, r2]
   16944:	cmp	r3, r4
   16948:	bne	16930 <__assert_fail@plt+0x5130>
   1694c:	b	16904 <__assert_fail@plt+0x5104>
   16950:	mov	r2, #0
   16954:	mov	r3, r1
   16958:	b	1690c <__assert_fail@plt+0x510c>
   1695c:	mov	r1, #0
   16960:	str	r1, [r8]
   16964:	ldrb	r3, [r7]
   16968:	cmp	r3, #0
   1696c:	beq	169d0 <__assert_fail@plt+0x51d0>
   16970:	mov	r2, r7
   16974:	b	16990 <__assert_fail@plt+0x5190>
   16978:	add	r7, r7, #1
   1697c:	add	r2, r2, #1
   16980:	mov	r1, #0
   16984:	ldrb	r3, [r7]
   16988:	cmp	r3, #0
   1698c:	beq	169d0 <__assert_fail@plt+0x51d0>
   16990:	ldrb	r4, [r6, r1]
   16994:	uxtb	r3, r3
   16998:	cmp	r4, r3
   1699c:	bne	169b4 <__assert_fail@plt+0x51b4>
   169a0:	add	r1, r1, #1
   169a4:	cmp	r1, r5
   169a8:	beq	169cc <__assert_fail@plt+0x51cc>
   169ac:	add	r7, r7, #1
   169b0:	b	16984 <__assert_fail@plt+0x5184>
   169b4:	cmp	r1, #0
   169b8:	beq	16978 <__assert_fail@plt+0x5178>
   169bc:	ldr	r3, [r0, r1, lsl #2]
   169c0:	sub	r1, r1, r3
   169c4:	add	r2, r2, r3
   169c8:	b	16984 <__assert_fail@plt+0x5184>
   169cc:	str	r2, [r8]
   169d0:	bl	1a590 <__assert_fail@plt+0x8d90>
   169d4:	mov	r4, #1
   169d8:	mov	r0, r4
   169dc:	sub	sp, fp, #24
   169e0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   169e4:	push	{r4, r5, r6, r7, fp, lr}
   169e8:	add	fp, sp, #16
   169ec:	mov	r4, r0
   169f0:	ldrb	r0, [r0, #12]
   169f4:	cmp	r0, #0
   169f8:	popne	{r4, r5, r6, r7, fp, pc}
   169fc:	ldrb	r0, [r4]
   16a00:	ldr	r5, [r4, #16]
   16a04:	cmp	r0, #0
   16a08:	beq	16a64 <__assert_fail@plt+0x5264>
   16a0c:	bl	11578 <__ctype_get_mb_cur_max@plt>
   16a10:	mov	r1, r0
   16a14:	mov	r0, r5
   16a18:	bl	18a0c <__assert_fail@plt+0x720c>
   16a1c:	add	r6, r4, #4
   16a20:	add	r7, r4, #28
   16a24:	mov	r2, r0
   16a28:	mov	r1, r5
   16a2c:	mov	r0, r7
   16a30:	mov	r3, r6
   16a34:	bl	1a304 <__assert_fail@plt+0x8b04>
   16a38:	cmn	r0, #2
   16a3c:	str	r0, [r4, #20]
   16a40:	beq	16ae0 <__assert_fail@plt+0x52e0>
   16a44:	cmp	r0, #0
   16a48:	beq	16a9c <__assert_fail@plt+0x529c>
   16a4c:	cmn	r0, #1
   16a50:	bne	16ac0 <__assert_fail@plt+0x52c0>
   16a54:	mov	r0, #0
   16a58:	strb	r0, [r4, #24]
   16a5c:	mov	r0, #1
   16a60:	b	16af0 <__assert_fail@plt+0x52f0>
   16a64:	ldrb	r0, [r5]
   16a68:	movw	r2, #52420	; 0xccc4
   16a6c:	movt	r2, #1
   16a70:	ubfx	r1, r0, #5, #3
   16a74:	ldr	r1, [r2, r1, lsl #2]
   16a78:	and	r2, r0, #31
   16a7c:	mov	r0, #1
   16a80:	tst	r1, r0, lsl r2
   16a84:	beq	16b00 <__assert_fail@plt+0x5300>
   16a88:	str	r0, [r4, #20]
   16a8c:	ldrb	r1, [r5]
   16a90:	strb	r0, [r4, #24]
   16a94:	str	r1, [r4, #28]
   16a98:	b	16af4 <__assert_fail@plt+0x52f4>
   16a9c:	mov	r0, #1
   16aa0:	str	r0, [r4, #20]
   16aa4:	ldr	r0, [r4, #16]
   16aa8:	ldrb	r0, [r0]
   16aac:	cmp	r0, #0
   16ab0:	bne	16b1c <__assert_fail@plt+0x531c>
   16ab4:	ldr	r0, [r7]
   16ab8:	cmp	r0, #0
   16abc:	bne	16b34 <__assert_fail@plt+0x5334>
   16ac0:	mov	r0, #1
   16ac4:	strb	r0, [r4, #24]
   16ac8:	mov	r0, r6
   16acc:	bl	114c4 <mbsinit@plt>
   16ad0:	cmp	r0, #0
   16ad4:	movne	r0, #0
   16ad8:	strbne	r0, [r4]
   16adc:	b	16af4 <__assert_fail@plt+0x52f4>
   16ae0:	ldr	r0, [r4, #16]
   16ae4:	bl	11650 <strlen@plt>
   16ae8:	mov	r1, #0
   16aec:	strb	r1, [r4, #24]
   16af0:	str	r0, [r4, #20]
   16af4:	mov	r0, #1
   16af8:	strb	r0, [r4, #12]
   16afc:	pop	{r4, r5, r6, r7, fp, pc}
   16b00:	add	r0, r4, #4
   16b04:	bl	114c4 <mbsinit@plt>
   16b08:	cmp	r0, #0
   16b0c:	beq	16b4c <__assert_fail@plt+0x534c>
   16b10:	mov	r0, #1
   16b14:	strb	r0, [r4]
   16b18:	b	16a0c <__assert_fail@plt+0x520c>
   16b1c:	movw	r0, #51208	; 0xc808
   16b20:	movw	r1, #51148	; 0xc7cc
   16b24:	movw	r3, #51160	; 0xc7d8
   16b28:	mov	r2, #171	; 0xab
   16b2c:	movt	r0, #1
   16b30:	b	16b60 <__assert_fail@plt+0x5360>
   16b34:	movw	r0, #51231	; 0xc81f
   16b38:	movw	r1, #51148	; 0xc7cc
   16b3c:	movw	r3, #51160	; 0xc7d8
   16b40:	mov	r2, #172	; 0xac
   16b44:	movt	r0, #1
   16b48:	b	16b60 <__assert_fail@plt+0x5360>
   16b4c:	movw	r0, #51125	; 0xc7b5
   16b50:	movw	r1, #51148	; 0xc7cc
   16b54:	movw	r3, #51160	; 0xc7d8
   16b58:	mov	r2, #143	; 0x8f
   16b5c:	movt	r0, #1
   16b60:	movt	r1, #1
   16b64:	movt	r3, #1
   16b68:	bl	11800 <__assert_fail@plt>
   16b6c:	ldr	r2, [r0, #16]
   16b70:	add	r1, r2, r1
   16b74:	str	r1, [r0, #16]
   16b78:	bx	lr
   16b7c:	push	{r4, r5, r6, sl, fp, lr}
   16b80:	add	fp, sp, #16
   16b84:	mov	r5, r1
   16b88:	ldrb	r1, [r1]
   16b8c:	mov	r4, r0
   16b90:	strb	r1, [r0], #4
   16b94:	cmp	r1, #0
   16b98:	beq	16ba8 <__assert_fail@plt+0x53a8>
   16b9c:	ldmib	r5, {r1, r2}
   16ba0:	stm	r0, {r1, r2}
   16ba4:	b	16bb4 <__assert_fail@plt+0x53b4>
   16ba8:	mov	r1, #0
   16bac:	str	r1, [r0]
   16bb0:	str	r1, [r0, #4]
   16bb4:	ldrb	r0, [r5, #12]
   16bb8:	strb	r0, [r4, #12]
   16bbc:	add	r0, r5, #32
   16bc0:	ldr	r1, [r5, #16]
   16bc4:	cmp	r1, r0
   16bc8:	beq	16bd4 <__assert_fail@plt+0x53d4>
   16bcc:	mov	r6, r1
   16bd0:	b	16be4 <__assert_fail@plt+0x53e4>
   16bd4:	ldr	r2, [r5, #20]
   16bd8:	add	r6, r4, #32
   16bdc:	mov	r0, r6
   16be0:	bl	114ac <memcpy@plt>
   16be4:	str	r6, [r4, #16]
   16be8:	ldr	r0, [r5, #20]
   16bec:	str	r0, [r4, #20]
   16bf0:	ldrb	r0, [r5, #24]
   16bf4:	strb	r0, [r4, #24]
   16bf8:	cmp	r0, #0
   16bfc:	ldrne	r0, [r5, #28]
   16c00:	strne	r0, [r4, #28]
   16c04:	pop	{r4, r5, r6, sl, fp, pc}
   16c08:	push	{r4, r5, fp, lr}
   16c0c:	add	fp, sp, #8
   16c10:	cmp	r0, #0
   16c14:	beq	16ca8 <__assert_fail@plt+0x54a8>
   16c18:	mov	r1, #47	; 0x2f
   16c1c:	mov	r4, r0
   16c20:	bl	11740 <strrchr@plt>
   16c24:	cmp	r0, #0
   16c28:	mov	r5, r4
   16c2c:	addne	r5, r0, #1
   16c30:	sub	r0, r5, r4
   16c34:	cmp	r0, #7
   16c38:	blt	16c8c <__assert_fail@plt+0x548c>
   16c3c:	movw	r1, #51305	; 0xc869
   16c40:	sub	r0, r5, #7
   16c44:	mov	r2, #7
   16c48:	movt	r1, #1
   16c4c:	bl	117c4 <strncmp@plt>
   16c50:	cmp	r0, #0
   16c54:	bne	16c8c <__assert_fail@plt+0x548c>
   16c58:	movw	r1, #51313	; 0xc871
   16c5c:	mov	r0, r5
   16c60:	mov	r2, #3
   16c64:	movt	r1, #1
   16c68:	bl	117c4 <strncmp@plt>
   16c6c:	cmp	r0, #0
   16c70:	beq	16c7c <__assert_fail@plt+0x547c>
   16c74:	mov	r4, r5
   16c78:	b	16c8c <__assert_fail@plt+0x548c>
   16c7c:	movw	r0, #53688	; 0xd1b8
   16c80:	add	r4, r5, #3
   16c84:	movt	r0, #2
   16c88:	str	r4, [r0]
   16c8c:	movw	r0, #53696	; 0xd1c0
   16c90:	movt	r0, #2
   16c94:	str	r4, [r0]
   16c98:	movw	r0, #53936	; 0xd2b0
   16c9c:	movt	r0, #2
   16ca0:	str	r4, [r0]
   16ca4:	pop	{r4, r5, fp, pc}
   16ca8:	movw	r0, #53712	; 0xd1d0
   16cac:	mov	r1, #55	; 0x37
   16cb0:	mov	r2, #1
   16cb4:	movt	r0, #2
   16cb8:	ldr	r3, [r0]
   16cbc:	movw	r0, #51249	; 0xc831
   16cc0:	movt	r0, #1
   16cc4:	bl	11554 <fwrite@plt>
   16cc8:	bl	117d0 <abort@plt>
   16ccc:	push	{r4, r5, r6, sl, fp, lr}
   16cd0:	add	fp, sp, #16
   16cd4:	mov	r4, r0
   16cd8:	movw	r0, #53944	; 0xd2b8
   16cdc:	movt	r0, #2
   16ce0:	cmp	r4, #0
   16ce4:	moveq	r4, r0
   16ce8:	bl	11680 <__errno_location@plt>
   16cec:	ldr	r6, [r0]
   16cf0:	mov	r5, r0
   16cf4:	mov	r0, r4
   16cf8:	mov	r1, #48	; 0x30
   16cfc:	bl	195ec <__assert_fail@plt+0x7dec>
   16d00:	str	r6, [r5]
   16d04:	pop	{r4, r5, r6, sl, fp, pc}
   16d08:	movw	r1, #53944	; 0xd2b8
   16d0c:	cmp	r0, #0
   16d10:	movt	r1, #2
   16d14:	movne	r1, r0
   16d18:	ldr	r0, [r1]
   16d1c:	bx	lr
   16d20:	movw	r2, #53944	; 0xd2b8
   16d24:	cmp	r0, #0
   16d28:	movt	r2, #2
   16d2c:	movne	r2, r0
   16d30:	str	r1, [r2]
   16d34:	bx	lr
   16d38:	movw	r3, #53944	; 0xd2b8
   16d3c:	cmp	r0, #0
   16d40:	and	r2, r2, #1
   16d44:	movt	r3, #2
   16d48:	movne	r3, r0
   16d4c:	ubfx	r0, r1, #5, #3
   16d50:	and	r1, r1, #31
   16d54:	add	ip, r3, r0, lsl #2
   16d58:	mov	r0, #1
   16d5c:	ldr	r3, [ip, #8]
   16d60:	and	r0, r0, r3, lsr r1
   16d64:	eor	r2, r0, r2
   16d68:	eor	r1, r3, r2, lsl r1
   16d6c:	str	r1, [ip, #8]
   16d70:	bx	lr
   16d74:	movw	r2, #53944	; 0xd2b8
   16d78:	cmp	r0, #0
   16d7c:	movt	r2, #2
   16d80:	movne	r2, r0
   16d84:	ldr	r0, [r2, #4]
   16d88:	str	r1, [r2, #4]
   16d8c:	bx	lr
   16d90:	push	{fp, lr}
   16d94:	mov	fp, sp
   16d98:	movw	r3, #53944	; 0xd2b8
   16d9c:	cmp	r0, #0
   16da0:	movt	r3, #2
   16da4:	movne	r3, r0
   16da8:	cmp	r1, #0
   16dac:	mov	r0, #10
   16db0:	cmpne	r2, #0
   16db4:	str	r0, [r3]
   16db8:	bne	16dc0 <__assert_fail@plt+0x55c0>
   16dbc:	bl	117d0 <abort@plt>
   16dc0:	str	r1, [r3, #40]	; 0x28
   16dc4:	str	r2, [r3, #44]	; 0x2c
   16dc8:	pop	{fp, pc}
   16dcc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16dd0:	add	fp, sp, #28
   16dd4:	sub	sp, sp, #20
   16dd8:	mov	r7, r0
   16ddc:	ldr	r0, [fp, #8]
   16de0:	movw	r5, #53944	; 0xd2b8
   16de4:	mov	r8, r3
   16de8:	mov	r9, r2
   16dec:	mov	sl, r1
   16df0:	movt	r5, #2
   16df4:	cmp	r0, #0
   16df8:	movne	r5, r0
   16dfc:	bl	11680 <__errno_location@plt>
   16e00:	ldr	r2, [r5, #40]	; 0x28
   16e04:	ldr	r3, [r5, #44]	; 0x2c
   16e08:	mov	r4, r0
   16e0c:	ldm	r5, {r0, r1}
   16e10:	add	r5, r5, #8
   16e14:	ldr	r6, [r4]
   16e18:	stm	sp, {r0, r1, r5}
   16e1c:	mov	r0, r7
   16e20:	mov	r1, sl
   16e24:	str	r2, [sp, #12]
   16e28:	str	r3, [sp, #16]
   16e2c:	mov	r2, r9
   16e30:	mov	r3, r8
   16e34:	bl	16e44 <__assert_fail@plt+0x5644>
   16e38:	str	r6, [r4]
   16e3c:	sub	sp, fp, #28
   16e40:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16e44:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16e48:	add	fp, sp, #28
   16e4c:	sub	sp, sp, #156	; 0x9c
   16e50:	mov	r5, r0
   16e54:	add	r0, r2, #1
   16e58:	mov	r6, r1
   16e5c:	mov	sl, r3
   16e60:	str	r2, [fp, #-80]	; 0xffffffb0
   16e64:	str	r0, [sp, #72]	; 0x48
   16e68:	ldr	r0, [fp, #12]
   16e6c:	and	r1, r0, #1
   16e70:	str	r1, [sp, #36]	; 0x24
   16e74:	and	r1, r0, #4
   16e78:	str	r1, [sp, #32]
   16e7c:	ubfx	r9, r0, #1, #1
   16e80:	bl	11578 <__ctype_get_mb_cur_max@plt>
   16e84:	str	r0, [sp, #40]	; 0x28
   16e88:	ldr	r0, [fp, #24]
   16e8c:	ldr	r7, [fp, #8]
   16e90:	mov	r1, #0
   16e94:	str	r5, [fp, #-84]	; 0xffffffac
   16e98:	str	r1, [fp, #-56]	; 0xffffffc8
   16e9c:	mov	r1, #0
   16ea0:	str	r1, [sp, #60]	; 0x3c
   16ea4:	mov	r1, #1
   16ea8:	str	r1, [fp, #-48]	; 0xffffffd0
   16eac:	str	r0, [sp, #80]	; 0x50
   16eb0:	ldr	r0, [fp, #20]
   16eb4:	str	r0, [sp, #76]	; 0x4c
   16eb8:	mov	r0, #0
   16ebc:	str	r0, [sp, #56]	; 0x38
   16ec0:	mov	r0, #0
   16ec4:	str	r0, [fp, #-88]	; 0xffffffa8
   16ec8:	mov	r0, #0
   16ecc:	str	r0, [fp, #-72]	; 0xffffffb8
   16ed0:	mov	r0, #0
   16ed4:	cmp	r7, #10
   16ed8:	bhi	17e6c <__assert_fail@plt+0x666c>
   16edc:	add	r1, pc, #24
   16ee0:	ldr	ip, [fp, #-80]	; 0xffffffb0
   16ee4:	mov	r4, r6
   16ee8:	mov	r8, #0
   16eec:	mov	r2, #1
   16ef0:	mov	r3, #0
   16ef4:	mov	lr, sl
   16ef8:	ldr	pc, [r1, r7, lsl #2]
   16efc:	andeq	r6, r1, r0, asr #31
   16f00:	andeq	r7, r1, r4, lsl r0
   16f04:	ldrdeq	r6, [r1], -r4
   16f08:			; <UNDEFINED> instruction: 0x00016fb8
   16f0c:	andeq	r7, r1, r8
   16f10:	andeq	r7, r1, ip, lsr r0
   16f14:	andeq	r6, r1, r4, ror #31
   16f18:	andeq	r7, r1, r0, asr #1
   16f1c:	andeq	r6, r1, r8, lsr #30
   16f20:	andeq	r6, r1, r8, lsr #30
   16f24:	andeq	r6, r1, r0, asr pc
   16f28:	movw	r0, #51395	; 0xc8c3
   16f2c:	mov	r1, r7
   16f30:	movt	r0, #1
   16f34:	bl	18874 <__assert_fail@plt+0x7074>
   16f38:	str	r0, [sp, #76]	; 0x4c
   16f3c:	movw	r0, #51229	; 0xc81d
   16f40:	mov	r1, r7
   16f44:	movt	r0, #1
   16f48:	bl	18874 <__assert_fail@plt+0x7074>
   16f4c:	str	r0, [sp, #80]	; 0x50
   16f50:	mov	r8, #0
   16f54:	tst	r9, #1
   16f58:	bne	16f90 <__assert_fail@plt+0x5790>
   16f5c:	ldr	r0, [sp, #76]	; 0x4c
   16f60:	ldrb	r0, [r0]
   16f64:	cmp	r0, #0
   16f68:	beq	16f90 <__assert_fail@plt+0x5790>
   16f6c:	ldr	r1, [sp, #76]	; 0x4c
   16f70:	mov	r8, #0
   16f74:	add	r1, r1, #1
   16f78:	cmp	r8, r4
   16f7c:	strbcc	r0, [r5, r8]
   16f80:	ldrb	r0, [r1, r8]
   16f84:	add	r8, r8, #1
   16f88:	cmp	r0, #0
   16f8c:	bne	16f78 <__assert_fail@plt+0x5778>
   16f90:	ldr	r6, [sp, #80]	; 0x50
   16f94:	mov	r0, r6
   16f98:	bl	11650 <strlen@plt>
   16f9c:	ldr	ip, [fp, #-80]	; 0xffffffb0
   16fa0:	str	r0, [fp, #-72]	; 0xffffffb8
   16fa4:	str	r6, [fp, #-88]	; 0xffffffa8
   16fa8:	mov	r2, #1
   16fac:	mov	r3, r9
   16fb0:	mov	lr, sl
   16fb4:	b	170c0 <__assert_fail@plt+0x58c0>
   16fb8:	mov	r0, #1
   16fbc:	b	17014 <__assert_fail@plt+0x5814>
   16fc0:	mov	r7, #0
   16fc4:	mov	r8, #0
   16fc8:	mov	r2, r0
   16fcc:	mov	r3, #0
   16fd0:	b	170c0 <__assert_fail@plt+0x58c0>
   16fd4:	tst	r9, #1
   16fd8:	bne	17014 <__assert_fail@plt+0x5814>
   16fdc:	mov	r2, r0
   16fe0:	b	1706c <__assert_fail@plt+0x586c>
   16fe4:	mov	r0, #1
   16fe8:	mov	r8, #0
   16fec:	mov	r7, #5
   16ff0:	mov	r2, #1
   16ff4:	str	r0, [fp, #-72]	; 0xffffffb8
   16ff8:	movw	r0, #51393	; 0xc8c1
   16ffc:	movt	r0, #1
   17000:	str	r0, [fp, #-88]	; 0xffffffa8
   17004:	b	17034 <__assert_fail@plt+0x5834>
   17008:	mov	r2, #1
   1700c:	tst	r9, #1
   17010:	beq	1706c <__assert_fail@plt+0x586c>
   17014:	mov	r1, #1
   17018:	mov	r8, #0
   1701c:	mov	r7, #2
   17020:	mov	r2, r0
   17024:	str	r1, [fp, #-72]	; 0xffffffb8
   17028:	movw	r1, #51229	; 0xc81d
   1702c:	movt	r1, #1
   17030:	str	r1, [fp, #-88]	; 0xffffffa8
   17034:	mov	r3, #1
   17038:	b	170c0 <__assert_fail@plt+0x58c0>
   1703c:	tst	r9, #1
   17040:	beq	17090 <__assert_fail@plt+0x5890>
   17044:	mov	r0, #1
   17048:	mov	r8, #0
   1704c:	mov	r2, #1
   17050:	mov	r3, #1
   17054:	mov	r7, #5
   17058:	str	r0, [fp, #-72]	; 0xffffffb8
   1705c:	movw	r0, #51393	; 0xc8c1
   17060:	movt	r0, #1
   17064:	str	r0, [fp, #-88]	; 0xffffffa8
   17068:	b	170c0 <__assert_fail@plt+0x58c0>
   1706c:	cmp	r4, #0
   17070:	mov	r8, #1
   17074:	mov	r3, #0
   17078:	mov	r7, #2
   1707c:	movne	r0, #39	; 0x27
   17080:	strbne	r0, [r5]
   17084:	movw	r0, #51229	; 0xc81d
   17088:	movt	r0, #1
   1708c:	b	170b4 <__assert_fail@plt+0x58b4>
   17090:	cmp	r4, #0
   17094:	mov	r8, #1
   17098:	mov	r2, #1
   1709c:	mov	r7, #5
   170a0:	mov	r3, #0
   170a4:	movne	r0, #34	; 0x22
   170a8:	strbne	r0, [r5]
   170ac:	movw	r0, #51393	; 0xc8c1
   170b0:	movt	r0, #1
   170b4:	str	r0, [fp, #-88]	; 0xffffffa8
   170b8:	mov	r0, #1
   170bc:	str	r0, [fp, #-72]	; 0xffffffb8
   170c0:	ldr	r0, [fp, #-72]	; 0xffffffb8
   170c4:	eor	r6, r3, #1
   170c8:	str	r7, [fp, #-68]	; 0xffffffbc
   170cc:	str	r3, [fp, #-76]	; 0xffffffb4
   170d0:	str	r2, [sp, #84]	; 0x54
   170d4:	str	r6, [sp, #92]	; 0x5c
   170d8:	cmp	r0, #0
   170dc:	movwne	r0, #1
   170e0:	and	r1, r0, r3
   170e4:	and	r1, r2, r1
   170e8:	str	r1, [sp, #48]	; 0x30
   170ec:	sub	r1, r7, #2
   170f0:	clz	r1, r1
   170f4:	lsr	r1, r1, #5
   170f8:	and	r1, r1, r3
   170fc:	str	r1, [sp, #64]	; 0x40
   17100:	subs	r1, r7, #2
   17104:	mov	r7, #0
   17108:	movwne	r1, #1
   1710c:	orr	r6, r1, r6
   17110:	and	r1, r1, r2
   17114:	and	r0, r0, r1
   17118:	str	r6, [sp, #68]	; 0x44
   1711c:	str	r0, [fp, #-60]	; 0xffffffc4
   17120:	orr	r0, r1, r3
   17124:	ldr	r1, [fp, #16]
   17128:	eor	r0, r0, #1
   1712c:	clz	r1, r1
   17130:	lsr	r1, r1, #5
   17134:	orr	r0, r1, r0
   17138:	str	r0, [fp, #-64]	; 0xffffffc0
   1713c:	eor	r0, r2, #1
   17140:	str	r0, [sp, #52]	; 0x34
   17144:	cmn	lr, #1
   17148:	beq	17158 <__assert_fail@plt+0x5958>
   1714c:	cmp	r7, lr
   17150:	bne	17164 <__assert_fail@plt+0x5964>
   17154:	b	17cac <__assert_fail@plt+0x64ac>
   17158:	ldrb	r0, [ip, r7]
   1715c:	cmp	r0, #0
   17160:	beq	17cb4 <__assert_fail@plt+0x64b4>
   17164:	ldr	r0, [fp, #-60]	; 0xffffffc4
   17168:	mov	sl, #0
   1716c:	cmp	r0, #0
   17170:	beq	171a8 <__assert_fail@plt+0x59a8>
   17174:	ldr	r0, [fp, #-72]	; 0xffffffb8
   17178:	add	r5, r7, r0
   1717c:	cmp	r0, #2
   17180:	bcc	1719c <__assert_fail@plt+0x599c>
   17184:	cmn	lr, #1
   17188:	bne	1719c <__assert_fail@plt+0x599c>
   1718c:	mov	r0, ip
   17190:	bl	11650 <strlen@plt>
   17194:	ldr	ip, [fp, #-80]	; 0xffffffb0
   17198:	mov	lr, r0
   1719c:	cmp	r5, lr
   171a0:	bls	171b0 <__assert_fail@plt+0x59b0>
   171a4:	ldr	r5, [fp, #-84]	; 0xffffffac
   171a8:	mov	r0, #0
   171ac:	b	171fc <__assert_fail@plt+0x59fc>
   171b0:	ldr	r1, [fp, #-88]	; 0xffffffa8
   171b4:	ldr	r2, [fp, #-72]	; 0xffffffb8
   171b8:	add	r0, ip, r7
   171bc:	mov	r6, r4
   171c0:	mov	r4, lr
   171c4:	bl	11638 <bcmp@plt>
   171c8:	ldr	r2, [sp, #92]	; 0x5c
   171cc:	cmp	r0, #0
   171d0:	ldr	r5, [fp, #-84]	; 0xffffffac
   171d4:	mov	r1, r0
   171d8:	movwne	r1, #1
   171dc:	orr	r1, r1, r2
   171e0:	tst	r1, #1
   171e4:	beq	17d3c <__assert_fail@plt+0x653c>
   171e8:	ldr	ip, [fp, #-80]	; 0xffffffb0
   171ec:	clz	r0, r0
   171f0:	mov	lr, r4
   171f4:	mov	r4, r6
   171f8:	lsr	r0, r0, #5
   171fc:	str	r0, [fp, #-52]	; 0xffffffcc
   17200:	ldrb	r6, [ip, r7]
   17204:	cmp	r6, #126	; 0x7e
   17208:	bhi	17738 <__assert_fail@plt+0x5f38>
   1720c:	add	r3, pc, #16
   17210:	mov	r9, #1
   17214:	mov	r2, #110	; 0x6e
   17218:	mov	r0, #97	; 0x61
   1721c:	mov	r1, #0
   17220:	ldr	pc, [r3, r6, lsl #2]
   17224:	muleq	r1, r8, r5
   17228:	andeq	r7, r1, r8, lsr r7
   1722c:	andeq	r7, r1, r8, lsr r7
   17230:	andeq	r7, r1, r8, lsr r7
   17234:	andeq	r7, r1, r8, lsr r7
   17238:	andeq	r7, r1, r8, lsr r7
   1723c:	andeq	r7, r1, r8, lsr r7
   17240:	andeq	r7, r1, r4, lsl r8
   17244:	andeq	r7, r1, r8, ror r5
   17248:	andeq	r7, r1, r0, ror r5
   1724c:	andeq	r7, r1, r4, lsl #11
   17250:	andeq	r7, r1, r0, lsr #13
   17254:	andeq	r7, r1, r8, ror #10
   17258:	andeq	r7, r1, r0, lsl #11
   1725c:	andeq	r7, r1, r8, lsr r7
   17260:	andeq	r7, r1, r8, lsr r7
   17264:	andeq	r7, r1, r8, lsr r7
   17268:	andeq	r7, r1, r8, lsr r7
   1726c:	andeq	r7, r1, r8, lsr r7
   17270:	andeq	r7, r1, r8, lsr r7
   17274:	andeq	r7, r1, r8, lsr r7
   17278:	andeq	r7, r1, r8, lsr r7
   1727c:	andeq	r7, r1, r8, lsr r7
   17280:	andeq	r7, r1, r8, lsr r7
   17284:	andeq	r7, r1, r8, lsr r7
   17288:	andeq	r7, r1, r8, lsr r7
   1728c:	andeq	r7, r1, r8, lsr r7
   17290:	andeq	r7, r1, r8, lsr r7
   17294:	andeq	r7, r1, r8, lsr r7
   17298:	andeq	r7, r1, r8, lsr r7
   1729c:	andeq	r7, r1, r8, lsr r7
   172a0:	andeq	r7, r1, r8, lsr r7
   172a4:	andeq	r7, r1, ip, lsl r5
   172a8:	andeq	r7, r1, r0, lsr #10
   172ac:	andeq	r7, r1, r0, lsr #10
   172b0:	andeq	r7, r1, r8, lsl #10
   172b4:	andeq	r7, r1, r0, lsr #10
   172b8:	andeq	r7, r1, r0, lsr #8
   172bc:	andeq	r7, r1, r0, lsr #10
   172c0:	andeq	r7, r1, r8, lsr #13
   172c4:	andeq	r7, r1, r0, lsr #10
   172c8:	andeq	r7, r1, r0, lsr #10
   172cc:	andeq	r7, r1, r0, lsr #10
   172d0:	andeq	r7, r1, r0, lsr #8
   172d4:	andeq	r7, r1, r0, lsr #8
   172d8:	andeq	r7, r1, r0, lsr #8
   172dc:	andeq	r7, r1, r0, lsr #8
   172e0:	andeq	r7, r1, r0, lsr #8
   172e4:	andeq	r7, r1, r0, lsr #8
   172e8:	andeq	r7, r1, r0, lsr #8
   172ec:	andeq	r7, r1, r0, lsr #8
   172f0:	andeq	r7, r1, r0, lsr #8
   172f4:	andeq	r7, r1, r0, lsr #8
   172f8:	andeq	r7, r1, r0, lsr #8
   172fc:	andeq	r7, r1, r0, lsr #8
   17300:	andeq	r7, r1, r0, lsr #8
   17304:	andeq	r7, r1, r0, lsr #8
   17308:	andeq	r7, r1, r0, lsr #8
   1730c:	andeq	r7, r1, r0, lsr #8
   17310:	andeq	r7, r1, r0, lsr #10
   17314:	andeq	r7, r1, r0, lsr #10
   17318:	andeq	r7, r1, r0, lsr #10
   1731c:	andeq	r7, r1, r0, lsr #10
   17320:	andeq	r7, r1, r0, ror r6
   17324:	andeq	r7, r1, r8, lsr r7
   17328:	andeq	r7, r1, r0, lsr #8
   1732c:	andeq	r7, r1, r0, lsr #8
   17330:	andeq	r7, r1, r0, lsr #8
   17334:	andeq	r7, r1, r0, lsr #8
   17338:	andeq	r7, r1, r0, lsr #8
   1733c:	andeq	r7, r1, r0, lsr #8
   17340:	andeq	r7, r1, r0, lsr #8
   17344:	andeq	r7, r1, r0, lsr #8
   17348:	andeq	r7, r1, r0, lsr #8
   1734c:	andeq	r7, r1, r0, lsr #8
   17350:	andeq	r7, r1, r0, lsr #8
   17354:	andeq	r7, r1, r0, lsr #8
   17358:	andeq	r7, r1, r0, lsr #8
   1735c:	andeq	r7, r1, r0, lsr #8
   17360:	andeq	r7, r1, r0, lsr #8
   17364:	andeq	r7, r1, r0, lsr #8
   17368:	andeq	r7, r1, r0, lsr #8
   1736c:	andeq	r7, r1, r0, lsr #8
   17370:	andeq	r7, r1, r0, lsr #8
   17374:	andeq	r7, r1, r0, lsr #8
   17378:	andeq	r7, r1, r0, lsr #8
   1737c:	andeq	r7, r1, r0, lsr #8
   17380:	andeq	r7, r1, r0, lsr #8
   17384:	andeq	r7, r1, r0, lsr #8
   17388:	andeq	r7, r1, r0, lsr #8
   1738c:	andeq	r7, r1, r0, lsr #8
   17390:	andeq	r7, r1, r0, lsr #10
   17394:	andeq	r7, r1, r8, asr #10
   17398:	andeq	r7, r1, r0, lsr #8
   1739c:	andeq	r7, r1, r0, lsr #10
   173a0:	andeq	r7, r1, r0, lsr #8
   173a4:	andeq	r7, r1, r0, lsr #10
   173a8:	andeq	r7, r1, r0, lsr #8
   173ac:	andeq	r7, r1, r0, lsr #8
   173b0:	andeq	r7, r1, r0, lsr #8
   173b4:	andeq	r7, r1, r0, lsr #8
   173b8:	andeq	r7, r1, r0, lsr #8
   173bc:	andeq	r7, r1, r0, lsr #8
   173c0:	andeq	r7, r1, r0, lsr #8
   173c4:	andeq	r7, r1, r0, lsr #8
   173c8:	andeq	r7, r1, r0, lsr #8
   173cc:	andeq	r7, r1, r0, lsr #8
   173d0:	andeq	r7, r1, r0, lsr #8
   173d4:	andeq	r7, r1, r0, lsr #8
   173d8:	andeq	r7, r1, r0, lsr #8
   173dc:	andeq	r7, r1, r0, lsr #8
   173e0:	andeq	r7, r1, r0, lsr #8
   173e4:	andeq	r7, r1, r0, lsr #8
   173e8:	andeq	r7, r1, r0, lsr #8
   173ec:	andeq	r7, r1, r0, lsr #8
   173f0:	andeq	r7, r1, r0, lsr #8
   173f4:	andeq	r7, r1, r0, lsr #8
   173f8:	andeq	r7, r1, r0, lsr #8
   173fc:	andeq	r7, r1, r0, lsr #8
   17400:	andeq	r7, r1, r0, lsr #8
   17404:	andeq	r7, r1, r0, lsr #8
   17408:	andeq	r7, r1, r0, lsr #8
   1740c:	andeq	r7, r1, r0, lsr #8
   17410:	ldrdeq	r7, [r1], -ip
   17414:	andeq	r7, r1, r0, lsr #10
   17418:	ldrdeq	r7, [r1], -ip
   1741c:	andeq	r7, r1, r8, lsl #10
   17420:	ldr	r0, [fp, #-64]	; 0xffffffc0
   17424:	tst	r0, #1
   17428:	bne	17454 <__assert_fail@plt+0x5c54>
   1742c:	ldr	r1, [fp, #16]
   17430:	ubfx	r0, r6, #5, #3
   17434:	mov	r2, #1
   17438:	ldr	r0, [r1, r0, lsl #2]
   1743c:	and	r1, r6, #31
   17440:	tst	r0, r2, lsl r1
   17444:	beq	17454 <__assert_fail@plt+0x5c54>
   17448:	mov	r0, r6
   1744c:	mov	r1, r9
   17450:	b	17468 <__assert_fail@plt+0x5c68>
   17454:	ldr	r0, [fp, #-52]	; 0xffffffcc
   17458:	mov	r1, r9
   1745c:	cmp	r0, #0
   17460:	mov	r0, r6
   17464:	beq	177a8 <__assert_fail@plt+0x5fa8>
   17468:	ldr	r2, [fp, #-76]	; 0xffffffb4
   1746c:	tst	r2, #1
   17470:	bne	17d78 <__assert_fail@plt+0x6578>
   17474:	ldr	r2, [fp, #-68]	; 0xffffffbc
   17478:	ldr	r3, [fp, #-56]	; 0xffffffc8
   1747c:	subs	r2, r2, #2
   17480:	movwne	r2, #1
   17484:	orr	r2, r2, r3
   17488:	tst	r2, #1
   1748c:	bne	174c8 <__assert_fail@plt+0x5cc8>
   17490:	cmp	r8, r4
   17494:	movcc	r2, #39	; 0x27
   17498:	strbcc	r2, [r5, r8]
   1749c:	add	r2, r8, #1
   174a0:	cmp	r2, r4
   174a4:	movcc	r3, #36	; 0x24
   174a8:	strbcc	r3, [r5, r2]
   174ac:	add	r2, r8, #2
   174b0:	add	r8, r8, #3
   174b4:	cmp	r2, r4
   174b8:	movcc	r3, #39	; 0x27
   174bc:	strbcc	r3, [r5, r2]
   174c0:	mov	r2, #1
   174c4:	str	r2, [fp, #-56]	; 0xffffffc8
   174c8:	cmp	r8, r4
   174cc:	movcc	r2, #92	; 0x5c
   174d0:	strbcc	r2, [r5, r8]
   174d4:	add	r8, r8, #1
   174d8:	b	177ec <__assert_fail@plt+0x5fec>
   174dc:	cmp	lr, #1
   174e0:	beq	17508 <__assert_fail@plt+0x5d08>
   174e4:	mov	r9, #0
   174e8:	cmn	lr, #1
   174ec:	bne	17514 <__assert_fail@plt+0x5d14>
   174f0:	ldrb	r0, [ip, #1]
   174f4:	cmp	r0, #0
   174f8:	beq	17508 <__assert_fail@plt+0x5d08>
   174fc:	mvn	lr, #0
   17500:	mov	sl, #0
   17504:	b	17420 <__assert_fail@plt+0x5c20>
   17508:	mov	r9, #0
   1750c:	cmp	r7, #0
   17510:	beq	1751c <__assert_fail@plt+0x5d1c>
   17514:	mov	sl, #0
   17518:	b	17420 <__assert_fail@plt+0x5c20>
   1751c:	mov	r1, #1
   17520:	ldr	r0, [fp, #-68]	; 0xffffffbc
   17524:	cmp	r0, #2
   17528:	bne	17540 <__assert_fail@plt+0x5d40>
   1752c:	ldr	r0, [fp, #-76]	; 0xffffffb4
   17530:	mov	r9, r1
   17534:	tst	r0, #1
   17538:	beq	17420 <__assert_fail@plt+0x5c20>
   1753c:	b	17d78 <__assert_fail@plt+0x6578>
   17540:	mov	r9, r1
   17544:	b	17420 <__assert_fail@plt+0x5c20>
   17548:	ldr	r0, [fp, #-68]	; 0xffffffbc
   1754c:	cmp	r0, #2
   17550:	bne	1778c <__assert_fail@plt+0x5f8c>
   17554:	ldr	r0, [fp, #-76]	; 0xffffffb4
   17558:	tst	r0, #1
   1755c:	bne	17d78 <__assert_fail@plt+0x6578>
   17560:	mov	sl, #0
   17564:	b	177a0 <__assert_fail@plt+0x5fa0>
   17568:	mov	r0, #102	; 0x66
   1756c:	b	17814 <__assert_fail@plt+0x6014>
   17570:	mov	r2, #116	; 0x74
   17574:	b	17584 <__assert_fail@plt+0x5d84>
   17578:	mov	r0, #98	; 0x62
   1757c:	b	17814 <__assert_fail@plt+0x6014>
   17580:	mov	r2, #114	; 0x72
   17584:	ldr	r0, [sp, #68]	; 0x44
   17588:	tst	r0, #1
   1758c:	mov	r0, r2
   17590:	bne	17814 <__assert_fail@plt+0x6014>
   17594:	b	17d78 <__assert_fail@plt+0x6578>
   17598:	ldr	r0, [sp, #84]	; 0x54
   1759c:	tst	r0, #1
   175a0:	beq	17830 <__assert_fail@plt+0x6030>
   175a4:	ldr	r0, [fp, #-76]	; 0xffffffb4
   175a8:	tst	r0, #1
   175ac:	bne	17e64 <__assert_fail@plt+0x6664>
   175b0:	ldr	r0, [fp, #-68]	; 0xffffffbc
   175b4:	ldr	r1, [fp, #-56]	; 0xffffffc8
   175b8:	subs	r0, r0, #2
   175bc:	movwne	r0, #1
   175c0:	orr	r0, r0, r1
   175c4:	tst	r0, #1
   175c8:	bne	17604 <__assert_fail@plt+0x5e04>
   175cc:	cmp	r8, r4
   175d0:	movcc	r0, #39	; 0x27
   175d4:	strbcc	r0, [r5, r8]
   175d8:	add	r0, r8, #1
   175dc:	cmp	r0, r4
   175e0:	movcc	r1, #36	; 0x24
   175e4:	strbcc	r1, [r5, r0]
   175e8:	add	r0, r8, #2
   175ec:	add	r8, r8, #3
   175f0:	cmp	r0, r4
   175f4:	movcc	r1, #39	; 0x27
   175f8:	strbcc	r1, [r5, r0]
   175fc:	mov	r0, #1
   17600:	str	r0, [fp, #-56]	; 0xffffffc8
   17604:	ldr	r1, [fp, #-68]	; 0xffffffbc
   17608:	cmp	r8, r4
   1760c:	mov	r9, #0
   17610:	mov	sl, #1
   17614:	mov	r6, #48	; 0x30
   17618:	movcc	r0, #92	; 0x5c
   1761c:	strbcc	r0, [r5, r8]
   17620:	add	r0, r8, #1
   17624:	cmp	r1, #2
   17628:	beq	179f8 <__assert_fail@plt+0x61f8>
   1762c:	add	r1, r7, #1
   17630:	cmp	r1, lr
   17634:	bcs	179f8 <__assert_fail@plt+0x61f8>
   17638:	ldrb	r1, [ip, r1]
   1763c:	sub	r1, r1, #48	; 0x30
   17640:	uxtb	r1, r1
   17644:	cmp	r1, #9
   17648:	bhi	179f8 <__assert_fail@plt+0x61f8>
   1764c:	cmp	r0, r4
   17650:	movcc	r1, #48	; 0x30
   17654:	strbcc	r1, [r5, r0]
   17658:	add	r0, r8, #2
   1765c:	add	r8, r8, #3
   17660:	cmp	r0, r4
   17664:	movcc	r1, #48	; 0x30
   17668:	strbcc	r1, [r5, r0]
   1766c:	b	17420 <__assert_fail@plt+0x5c20>
   17670:	ldr	r0, [fp, #-68]	; 0xffffffbc
   17674:	mov	sl, #0
   17678:	mov	r6, #63	; 0x3f
   1767c:	cmp	r0, #5
   17680:	beq	17a00 <__assert_fail@plt+0x6200>
   17684:	cmp	r0, #2
   17688:	bne	17aa8 <__assert_fail@plt+0x62a8>
   1768c:	ldr	r0, [fp, #-76]	; 0xffffffb4
   17690:	mov	r9, #0
   17694:	tst	r0, #1
   17698:	beq	17420 <__assert_fail@plt+0x5c20>
   1769c:	b	17d78 <__assert_fail@plt+0x6578>
   176a0:	mov	r0, #118	; 0x76
   176a4:	b	17814 <__assert_fail@plt+0x6014>
   176a8:	mov	r0, #1
   176ac:	mov	r6, #39	; 0x27
   176b0:	str	r0, [sp, #60]	; 0x3c
   176b4:	ldr	r0, [fp, #-68]	; 0xffffffbc
   176b8:	cmp	r0, #2
   176bc:	bne	1784c <__assert_fail@plt+0x604c>
   176c0:	ldr	r0, [fp, #-76]	; 0xffffffb4
   176c4:	tst	r0, #1
   176c8:	bne	17d78 <__assert_fail@plt+0x6578>
   176cc:	ldr	r2, [sp, #56]	; 0x38
   176d0:	clz	r1, r4
   176d4:	mov	sl, #0
   176d8:	mov	r9, #1
   176dc:	lsr	r1, r1, #5
   176e0:	cmp	r2, #0
   176e4:	mov	r0, r2
   176e8:	movwne	r0, #1
   176ec:	orrs	r0, r0, r1
   176f0:	moveq	r2, r4
   176f4:	moveq	r4, r0
   176f8:	cmp	r8, r4
   176fc:	str	r2, [sp, #56]	; 0x38
   17700:	movcc	r0, #39	; 0x27
   17704:	strbcc	r0, [r5, r8]
   17708:	add	r0, r8, #1
   1770c:	cmp	r0, r4
   17710:	movcc	r1, #92	; 0x5c
   17714:	strbcc	r1, [r5, r0]
   17718:	add	r0, r8, #2
   1771c:	add	r8, r8, #3
   17720:	cmp	r0, r4
   17724:	movcc	r1, #39	; 0x27
   17728:	strbcc	r1, [r5, r0]
   1772c:	mov	r0, #0
   17730:	str	r0, [fp, #-56]	; 0xffffffc8
   17734:	b	17420 <__assert_fail@plt+0x5c20>
   17738:	ldr	r0, [sp, #40]	; 0x28
   1773c:	str	r4, [sp, #88]	; 0x58
   17740:	cmp	r0, #1
   17744:	bne	17854 <__assert_fail@plt+0x6054>
   17748:	str	lr, [sp, #28]
   1774c:	bl	11614 <__ctype_b_loc@plt>
   17750:	ldr	r0, [r0]
   17754:	ldr	ip, [fp, #-80]	; 0xffffffb0
   17758:	mov	r2, #1
   1775c:	add	r0, r0, r6, lsl #1
   17760:	ldrb	r0, [r0, #1]
   17764:	ubfx	r9, r0, #6, #1
   17768:	ldr	r0, [sp, #52]	; 0x34
   1776c:	cmp	r2, #1
   17770:	orr	r0, r9, r0
   17774:	bhi	17ab0 <__assert_fail@plt+0x62b0>
   17778:	tst	r0, #1
   1777c:	beq	17ab0 <__assert_fail@plt+0x62b0>
   17780:	ldr	lr, [sp, #28]
   17784:	ldr	r4, [sp, #88]	; 0x58
   17788:	b	17420 <__assert_fail@plt+0x5c20>
   1778c:	ldr	r1, [sp, #48]	; 0x30
   17790:	mov	sl, #0
   17794:	mov	r0, #92	; 0x5c
   17798:	cmp	r1, #0
   1779c:	beq	17814 <__assert_fail@plt+0x6014>
   177a0:	mov	r6, #92	; 0x5c
   177a4:	mov	r9, #0
   177a8:	cmp	sl, #0
   177ac:	bne	177e4 <__assert_fail@plt+0x5fe4>
   177b0:	ldr	r0, [fp, #-56]	; 0xffffffc8
   177b4:	tst	r0, #1
   177b8:	beq	177e4 <__assert_fail@plt+0x5fe4>
   177bc:	cmp	r8, r4
   177c0:	movcc	r0, #39	; 0x27
   177c4:	strbcc	r0, [r5, r8]
   177c8:	add	r0, r8, #1
   177cc:	add	r8, r8, #2
   177d0:	cmp	r0, r4
   177d4:	movcc	r1, #39	; 0x27
   177d8:	strbcc	r1, [r5, r0]
   177dc:	mov	r0, #0
   177e0:	str	r0, [fp, #-56]	; 0xffffffc8
   177e4:	mov	r1, r9
   177e8:	mov	r0, r6
   177ec:	cmp	r8, r4
   177f0:	strbcc	r0, [r5, r8]
   177f4:	ldr	r0, [fp, #-48]	; 0xffffffd0
   177f8:	add	r8, r8, #1
   177fc:	and	r0, r0, r1
   17800:	str	r0, [fp, #-48]	; 0xffffffd0
   17804:	add	r7, r7, #1
   17808:	cmn	lr, #1
   1780c:	bne	1714c <__assert_fail@plt+0x594c>
   17810:	b	17158 <__assert_fail@plt+0x5958>
   17814:	ldr	r1, [sp, #84]	; 0x54
   17818:	mov	sl, #0
   1781c:	mov	r9, #0
   17820:	tst	r1, #1
   17824:	mov	r1, #0
   17828:	beq	17420 <__assert_fail@plt+0x5c20>
   1782c:	b	17468 <__assert_fail@plt+0x5c68>
   17830:	ldr	r0, [sp, #36]	; 0x24
   17834:	mov	r6, #0
   17838:	mov	sl, #0
   1783c:	mov	r9, #0
   17840:	cmp	r0, #0
   17844:	beq	17420 <__assert_fail@plt+0x5c20>
   17848:	b	17804 <__assert_fail@plt+0x6004>
   1784c:	mov	r9, #1
   17850:	b	17420 <__assert_fail@plt+0x5c20>
   17854:	mov	r0, #0
   17858:	cmn	lr, #1
   1785c:	sub	r4, fp, #40	; 0x28
   17860:	str	r0, [fp, #-36]	; 0xffffffdc
   17864:	str	r0, [fp, #-40]	; 0xffffffd8
   17868:	bne	1787c <__assert_fail@plt+0x607c>
   1786c:	mov	r0, ip
   17870:	bl	11650 <strlen@plt>
   17874:	ldr	ip, [fp, #-80]	; 0xffffffb0
   17878:	mov	lr, r0
   1787c:	ldr	r0, [sp, #72]	; 0x48
   17880:	mov	r9, #1
   17884:	mov	r2, #0
   17888:	str	lr, [sp, #28]
   1788c:	add	r0, r0, r7
   17890:	str	r0, [sp, #20]
   17894:	b	178d8 <__assert_fail@plt+0x60d8>
   17898:	ldr	r5, [sp, #44]	; 0x2c
   1789c:	add	r5, r0, r5
   178a0:	ldr	r0, [fp, #-44]	; 0xffffffd4
   178a4:	bl	11530 <iswprint@plt>
   178a8:	cmp	r0, #0
   178ac:	sub	r4, fp, #40	; 0x28
   178b0:	movwne	r0, #1
   178b4:	and	r9, r9, r0
   178b8:	mov	r0, r4
   178bc:	bl	114c4 <mbsinit@plt>
   178c0:	mov	r2, r5
   178c4:	ldr	lr, [sp, #28]
   178c8:	ldr	r5, [fp, #-84]	; 0xffffffac
   178cc:	ldr	ip, [fp, #-80]	; 0xffffffb0
   178d0:	cmp	r0, #0
   178d4:	bne	17768 <__assert_fail@plt+0x5f68>
   178d8:	add	r0, r2, r7
   178dc:	str	r2, [sp, #44]	; 0x2c
   178e0:	mov	r3, r4
   178e4:	add	r1, ip, r0
   178e8:	str	r0, [sp, #24]
   178ec:	sub	r2, lr, r0
   178f0:	sub	r0, fp, #44	; 0x2c
   178f4:	bl	1a304 <__assert_fail@plt+0x8b04>
   178f8:	cmp	r0, #0
   178fc:	beq	17ca0 <__assert_fail@plt+0x64a0>
   17900:	cmn	r0, #1
   17904:	beq	17c5c <__assert_fail@plt+0x645c>
   17908:	ldr	lr, [sp, #28]
   1790c:	cmn	r0, #2
   17910:	beq	17c64 <__assert_fail@plt+0x6464>
   17914:	ldr	r2, [sp, #64]	; 0x40
   17918:	ldr	r4, [sp, #88]	; 0x58
   1791c:	ldr	ip, [sp, #84]	; 0x54
   17920:	cmp	r0, #2
   17924:	mov	r1, #0
   17928:	movwcc	r1, #1
   1792c:	eor	r2, r2, #1
   17930:	orrs	r1, r2, r1
   17934:	bne	17898 <__assert_fail@plt+0x6098>
   17938:	ldr	r1, [sp, #44]	; 0x2c
   1793c:	ldr	r2, [sp, #20]
   17940:	add	r1, r2, r1
   17944:	sub	r2, r0, #1
   17948:	b	17958 <__assert_fail@plt+0x6158>
   1794c:	add	r1, r1, #1
   17950:	subs	r2, r2, #1
   17954:	beq	17898 <__assert_fail@plt+0x6098>
   17958:	ldrb	r3, [r1]
   1795c:	sub	r3, r3, #91	; 0x5b
   17960:	cmp	r3, #33	; 0x21
   17964:	bhi	1794c <__assert_fail@plt+0x614c>
   17968:	add	r5, pc, #0
   1796c:	ldr	pc, [r5, r3, lsl #2]
   17970:	andeq	r7, r1, r4, asr sp
   17974:	andeq	r7, r1, r4, asr sp
   17978:	andeq	r7, r1, ip, asr #18
   1797c:	andeq	r7, r1, r4, asr sp
   17980:	andeq	r7, r1, ip, asr #18
   17984:	andeq	r7, r1, r4, asr sp
   17988:	andeq	r7, r1, ip, asr #18
   1798c:	andeq	r7, r1, ip, asr #18
   17990:	andeq	r7, r1, ip, asr #18
   17994:	andeq	r7, r1, ip, asr #18
   17998:	andeq	r7, r1, ip, asr #18
   1799c:	andeq	r7, r1, ip, asr #18
   179a0:	andeq	r7, r1, ip, asr #18
   179a4:	andeq	r7, r1, ip, asr #18
   179a8:	andeq	r7, r1, ip, asr #18
   179ac:	andeq	r7, r1, ip, asr #18
   179b0:	andeq	r7, r1, ip, asr #18
   179b4:	andeq	r7, r1, ip, asr #18
   179b8:	andeq	r7, r1, ip, asr #18
   179bc:	andeq	r7, r1, ip, asr #18
   179c0:	andeq	r7, r1, ip, asr #18
   179c4:	andeq	r7, r1, ip, asr #18
   179c8:	andeq	r7, r1, ip, asr #18
   179cc:	andeq	r7, r1, ip, asr #18
   179d0:	andeq	r7, r1, ip, asr #18
   179d4:	andeq	r7, r1, ip, asr #18
   179d8:	andeq	r7, r1, ip, asr #18
   179dc:	andeq	r7, r1, ip, asr #18
   179e0:	andeq	r7, r1, ip, asr #18
   179e4:	andeq	r7, r1, ip, asr #18
   179e8:	andeq	r7, r1, ip, asr #18
   179ec:	andeq	r7, r1, ip, asr #18
   179f0:	andeq	r7, r1, ip, asr #18
   179f4:	andeq	r7, r1, r4, asr sp
   179f8:	mov	r8, r0
   179fc:	b	17420 <__assert_fail@plt+0x5c20>
   17a00:	ldr	r0, [sp, #32]
   17a04:	cmp	r0, #0
   17a08:	beq	17aa8 <__assert_fail@plt+0x62a8>
   17a0c:	add	r0, r7, #2
   17a10:	cmp	r0, lr
   17a14:	bcs	17aa8 <__assert_fail@plt+0x62a8>
   17a18:	add	r1, r7, ip
   17a1c:	ldrb	r1, [r1, #1]
   17a20:	cmp	r1, #63	; 0x3f
   17a24:	bne	17aa8 <__assert_fail@plt+0x62a8>
   17a28:	ldrb	r9, [ip, r0]
   17a2c:	sub	r2, r9, #33	; 0x21
   17a30:	cmp	r2, #29
   17a34:	bhi	17aa8 <__assert_fail@plt+0x62a8>
   17a38:	movw	r1, #20929	; 0x51c1
   17a3c:	mov	r3, #1
   17a40:	movt	r1, #14336	; 0x3800
   17a44:	tst	r1, r3, lsl r2
   17a48:	beq	17aa8 <__assert_fail@plt+0x62a8>
   17a4c:	ldr	r1, [fp, #-76]	; 0xffffffb4
   17a50:	tst	r1, #1
   17a54:	bne	17d78 <__assert_fail@plt+0x6578>
   17a58:	cmp	r8, r4
   17a5c:	add	r2, r8, #1
   17a60:	mov	r6, r9
   17a64:	mov	r7, r0
   17a68:	mov	r9, #0
   17a6c:	movcc	r1, #63	; 0x3f
   17a70:	strbcc	r1, [r5, r8]
   17a74:	cmp	r2, r4
   17a78:	movcc	r1, #34	; 0x22
   17a7c:	strbcc	r1, [r5, r2]
   17a80:	add	r2, r8, #2
   17a84:	cmp	r2, r4
   17a88:	movcc	r1, #34	; 0x22
   17a8c:	strbcc	r1, [r5, r2]
   17a90:	add	r2, r8, #3
   17a94:	add	r8, r8, #4
   17a98:	cmp	r2, r4
   17a9c:	movcc	r1, #63	; 0x3f
   17aa0:	strbcc	r1, [r5, r2]
   17aa4:	b	17420 <__assert_fail@plt+0x5c20>
   17aa8:	mov	r9, #0
   17aac:	b	17420 <__assert_fail@plt+0x5c20>
   17ab0:	ldr	lr, [sp, #28]
   17ab4:	ldr	r4, [fp, #-56]	; 0xffffffc8
   17ab8:	add	r1, r2, r7
   17abc:	mov	r2, #0
   17ac0:	str	r1, [sp, #44]	; 0x2c
   17ac4:	tst	r0, #1
   17ac8:	bne	17be4 <__assert_fail@plt+0x63e4>
   17acc:	ldr	r1, [fp, #-76]	; 0xffffffb4
   17ad0:	tst	r1, #1
   17ad4:	bne	17d74 <__assert_fail@plt+0x6574>
   17ad8:	ldr	r1, [fp, #-68]	; 0xffffffbc
   17adc:	subs	r2, r1, #2
   17ae0:	movwne	r2, #1
   17ae4:	orr	r2, r2, r4
   17ae8:	tst	r2, #1
   17aec:	bne	17b30 <__assert_fail@plt+0x6330>
   17af0:	ldr	r1, [sp, #88]	; 0x58
   17af4:	add	r2, r8, #1
   17af8:	mov	r4, #1
   17afc:	cmp	r8, r1
   17b00:	movcc	r1, #39	; 0x27
   17b04:	strbcc	r1, [r5, r8]
   17b08:	ldr	r1, [sp, #88]	; 0x58
   17b0c:	cmp	r2, r1
   17b10:	movcc	r1, #36	; 0x24
   17b14:	strbcc	r1, [r5, r2]
   17b18:	ldr	r1, [sp, #88]	; 0x58
   17b1c:	add	r2, r8, #2
   17b20:	add	r8, r8, #3
   17b24:	cmp	r2, r1
   17b28:	movcc	r1, #39	; 0x27
   17b2c:	strbcc	r1, [r5, r2]
   17b30:	ldr	r1, [sp, #88]	; 0x58
   17b34:	add	r2, r8, #1
   17b38:	cmp	r8, r1
   17b3c:	movcc	r1, #92	; 0x5c
   17b40:	strbcc	r1, [r5, r8]
   17b44:	ldr	r1, [sp, #88]	; 0x58
   17b48:	cmp	r2, r1
   17b4c:	bcs	17b60 <__assert_fail@plt+0x6360>
   17b50:	uxtb	r3, r6
   17b54:	mov	r1, #48	; 0x30
   17b58:	orr	r3, r1, r3, lsr #6
   17b5c:	strb	r3, [r5, r2]
   17b60:	ldr	r1, [sp, #88]	; 0x58
   17b64:	add	r2, r8, #2
   17b68:	add	r8, r8, #3
   17b6c:	cmp	r2, r1
   17b70:	lsrcc	r3, r6, #3
   17b74:	movcc	r1, #6
   17b78:	bficc	r3, r1, #3, #29
   17b7c:	mov	r1, #6
   17b80:	bfi	r6, r1, #3, #29
   17b84:	strbcc	r3, [r5, r2]
   17b88:	mov	r2, #1
   17b8c:	b	17c0c <__assert_fail@plt+0x640c>
   17b90:	ldr	r1, [sp, #88]	; 0x58
   17b94:	ldr	r5, [fp, #-84]	; 0xffffffac
   17b98:	ldr	r4, [sp, #88]	; 0x58
   17b9c:	cmp	r8, r1
   17ba0:	movcc	r1, #39	; 0x27
   17ba4:	strbcc	r1, [r5, r8]
   17ba8:	add	r1, r8, #1
   17bac:	add	r8, r8, #2
   17bb0:	cmp	r1, r4
   17bb4:	movcc	r4, #39	; 0x27
   17bb8:	strbcc	r4, [r5, r1]
   17bbc:	mov	r4, #0
   17bc0:	ldr	r1, [sp, #88]	; 0x58
   17bc4:	cmp	r8, r1
   17bc8:	ldr	r1, [sp, #72]	; 0x48
   17bcc:	strbcc	r6, [r5, r8]
   17bd0:	add	r8, r8, #1
   17bd4:	ldrb	r6, [r1, r7]
   17bd8:	mov	r7, r3
   17bdc:	tst	r0, #1
   17be0:	beq	17acc <__assert_fail@plt+0x62cc>
   17be4:	ldr	r1, [fp, #-52]	; 0xffffffcc
   17be8:	tst	r1, #1
   17bec:	beq	17c04 <__assert_fail@plt+0x6404>
   17bf0:	ldr	r1, [sp, #88]	; 0x58
   17bf4:	cmp	r8, r1
   17bf8:	movcc	r1, #92	; 0x5c
   17bfc:	strbcc	r1, [r5, r8]
   17c00:	add	r8, r8, #1
   17c04:	mov	r1, #0
   17c08:	str	r1, [fp, #-52]	; 0xffffffcc
   17c0c:	ldr	r1, [sp, #44]	; 0x2c
   17c10:	add	r3, r7, #1
   17c14:	and	sl, r2, #1
   17c18:	cmp	r1, r3
   17c1c:	bls	17c40 <__assert_fail@plt+0x6440>
   17c20:	cmp	sl, #0
   17c24:	mvn	r5, r4
   17c28:	movwne	sl, #1
   17c2c:	orr	r5, r5, sl
   17c30:	tst	r5, #1
   17c34:	beq	17b90 <__assert_fail@plt+0x6390>
   17c38:	ldr	r5, [fp, #-84]	; 0xffffffac
   17c3c:	b	17bc0 <__assert_fail@plt+0x63c0>
   17c40:	str	r4, [fp, #-56]	; 0xffffffc8
   17c44:	ldr	r4, [sp, #88]	; 0x58
   17c48:	cmp	sl, #0
   17c4c:	movwne	sl, #1
   17c50:	cmp	sl, #0
   17c54:	beq	177b0 <__assert_fail@plt+0x5fb0>
   17c58:	b	177e4 <__assert_fail@plt+0x5fe4>
   17c5c:	mov	r9, #0
   17c60:	b	17ca0 <__assert_fail@plt+0x64a0>
   17c64:	ldr	r0, [sp, #24]
   17c68:	mov	r9, #0
   17c6c:	cmp	lr, r0
   17c70:	bls	17ca0 <__assert_fail@plt+0x64a0>
   17c74:	ldr	ip, [fp, #-80]	; 0xffffffb0
   17c78:	ldr	r2, [sp, #44]	; 0x2c
   17c7c:	add	r0, ip, r7
   17c80:	ldrb	r1, [r0, r2]
   17c84:	cmp	r1, #0
   17c88:	beq	17768 <__assert_fail@plt+0x5f68>
   17c8c:	add	r2, r2, #1
   17c90:	add	r1, r7, r2
   17c94:	cmp	r1, lr
   17c98:	bcc	17c80 <__assert_fail@plt+0x6480>
   17c9c:	b	17768 <__assert_fail@plt+0x5f68>
   17ca0:	ldr	ip, [fp, #-80]	; 0xffffffb0
   17ca4:	ldr	r2, [sp, #44]	; 0x2c
   17ca8:	b	17768 <__assert_fail@plt+0x5f68>
   17cac:	mov	lr, r7
   17cb0:	b	17cb8 <__assert_fail@plt+0x64b8>
   17cb4:	mvn	lr, #0
   17cb8:	ldr	r1, [fp, #-68]	; 0xffffffbc
   17cbc:	ldr	r2, [fp, #-76]	; 0xffffffb4
   17cc0:	eor	r0, r1, #2
   17cc4:	orr	r0, r0, r8
   17cc8:	clz	r0, r0
   17ccc:	lsr	r0, r0, #5
   17cd0:	tst	r2, r0
   17cd4:	bne	17d78 <__assert_fail@plt+0x6578>
   17cd8:	subs	r0, r1, #2
   17cdc:	movwne	r0, #1
   17ce0:	orr	r0, r2, r0
   17ce4:	tst	r0, #1
   17ce8:	ldreq	r0, [sp, #60]	; 0x3c
   17cec:	eoreq	r0, r0, #1
   17cf0:	tsteq	r0, #1
   17cf4:	bne	17e0c <__assert_fail@plt+0x660c>
   17cf8:	ldr	r0, [fp, #-48]	; 0xffffffd0
   17cfc:	mov	sl, lr
   17d00:	tst	r0, #1
   17d04:	bne	17dd8 <__assert_fail@plt+0x65d8>
   17d08:	ldr	r6, [sp, #56]	; 0x38
   17d0c:	mov	r9, #0
   17d10:	cmp	r6, #0
   17d14:	beq	17e04 <__assert_fail@plt+0x6604>
   17d18:	ldr	r0, [sp, #84]	; 0x54
   17d1c:	mov	r1, #0
   17d20:	mov	r7, #2
   17d24:	cmp	r4, #0
   17d28:	str	r1, [fp, #-48]	; 0xffffffd0
   17d2c:	mov	r1, #0
   17d30:	str	r1, [fp, #-76]	; 0xffffffb4
   17d34:	beq	16ed4 <__assert_fail@plt+0x56d4>
   17d38:	b	17e0c <__assert_fail@plt+0x660c>
   17d3c:	ldr	ip, [fp, #-80]	; 0xffffffb0
   17d40:	ldr	r1, [fp, #12]
   17d44:	ldr	r2, [fp, #-68]	; 0xffffffbc
   17d48:	mov	lr, r4
   17d4c:	mov	r4, r6
   17d50:	b	17d98 <__assert_fail@plt+0x6598>
   17d54:	tst	ip, #1
   17d58:	ldr	r5, [fp, #-84]	; 0xffffffac
   17d5c:	ldr	ip, [fp, #-80]	; 0xffffffb0
   17d60:	ldr	r1, [fp, #12]
   17d64:	mov	r0, #2
   17d68:	movwne	r0, #4
   17d6c:	mov	r2, r0
   17d70:	b	17d98 <__assert_fail@plt+0x6598>
   17d74:	ldr	r4, [sp, #88]	; 0x58
   17d78:	ldr	r1, [sp, #84]	; 0x54
   17d7c:	mov	r0, #2
   17d80:	tst	r1, #1
   17d84:	movwne	r0, #4
   17d88:	ldr	r2, [fp, #-68]	; 0xffffffbc
   17d8c:	ldr	r1, [fp, #12]
   17d90:	cmp	r2, #2
   17d94:	moveq	r2, r0
   17d98:	mov	r0, #0
   17d9c:	bic	r1, r1, #2
   17da0:	str	r2, [sp]
   17da4:	mov	r2, ip
   17da8:	mov	r3, lr
   17dac:	str	r0, [sp, #8]
   17db0:	ldr	r0, [sp, #76]	; 0x4c
   17db4:	str	r1, [sp, #4]
   17db8:	mov	r1, r4
   17dbc:	str	r0, [sp, #12]
   17dc0:	ldr	r0, [sp, #80]	; 0x50
   17dc4:	str	r0, [sp, #16]
   17dc8:	mov	r0, r5
   17dcc:	bl	16e44 <__assert_fail@plt+0x5644>
   17dd0:	mov	r8, r0
   17dd4:	b	17e58 <__assert_fail@plt+0x6658>
   17dd8:	mov	r0, #5
   17ddc:	ldr	r1, [sp, #56]	; 0x38
   17de0:	ldr	r2, [fp, #-80]	; 0xffffffb0
   17de4:	mov	r3, sl
   17de8:	str	r0, [sp]
   17dec:	ldr	r0, [fp, #12]
   17df0:	str	r0, [sp, #4]
   17df4:	ldr	r0, [fp, #16]
   17df8:	str	r0, [sp, #8]
   17dfc:	ldr	r0, [sp, #76]	; 0x4c
   17e00:	b	17dbc <__assert_fail@plt+0x65bc>
   17e04:	mov	r0, #0
   17e08:	str	r0, [fp, #-76]	; 0xffffffb4
   17e0c:	ldr	r1, [fp, #-88]	; 0xffffffa8
   17e10:	cmp	r1, #0
   17e14:	beq	17e4c <__assert_fail@plt+0x664c>
   17e18:	ldr	r0, [fp, #-76]	; 0xffffffb4
   17e1c:	tst	r0, #1
   17e20:	bne	17e4c <__assert_fail@plt+0x664c>
   17e24:	ldrb	r0, [r1]
   17e28:	cmp	r0, #0
   17e2c:	beq	17e4c <__assert_fail@plt+0x664c>
   17e30:	add	r1, r1, #1
   17e34:	cmp	r8, r4
   17e38:	strbcc	r0, [r5, r8]
   17e3c:	add	r8, r8, #1
   17e40:	ldrb	r0, [r1], #1
   17e44:	cmp	r0, #0
   17e48:	bne	17e34 <__assert_fail@plt+0x6634>
   17e4c:	cmp	r8, r4
   17e50:	movcc	r0, #0
   17e54:	strbcc	r0, [r5, r8]
   17e58:	mov	r0, r8
   17e5c:	sub	sp, fp, #28
   17e60:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17e64:	mov	r0, #4
   17e68:	b	17d88 <__assert_fail@plt+0x6588>
   17e6c:	bl	117d0 <abort@plt>
   17e70:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17e74:	add	fp, sp, #28
   17e78:	sub	sp, sp, #28
   17e7c:	movw	r5, #53944	; 0xd2b8
   17e80:	cmp	r2, #0
   17e84:	mov	r4, r1
   17e88:	mov	r7, r0
   17e8c:	str	r0, [sp, #20]
   17e90:	movt	r5, #2
   17e94:	movne	r5, r2
   17e98:	bl	11680 <__errno_location@plt>
   17e9c:	mov	sl, r0
   17ea0:	ldr	r2, [r5, #40]	; 0x28
   17ea4:	ldr	r3, [r5, #44]	; 0x2c
   17ea8:	ldm	r5, {r0, r1}
   17eac:	orr	r8, r1, #1
   17eb0:	add	r9, r5, #8
   17eb4:	mov	r1, #0
   17eb8:	ldr	r6, [sl]
   17ebc:	stm	sp, {r0, r8, r9}
   17ec0:	mov	r0, #0
   17ec4:	str	r2, [sp, #12]
   17ec8:	str	r3, [sp, #16]
   17ecc:	mov	r2, r7
   17ed0:	mov	r3, r4
   17ed4:	str	r6, [sp, #24]
   17ed8:	mov	r6, r4
   17edc:	bl	16e44 <__assert_fail@plt+0x5644>
   17ee0:	add	r7, r0, #1
   17ee4:	mov	r0, r7
   17ee8:	bl	191bc <__assert_fail@plt+0x79bc>
   17eec:	mov	r4, r0
   17ef0:	ldr	r0, [r5]
   17ef4:	ldr	r2, [r5, #44]	; 0x2c
   17ef8:	ldr	r1, [r5, #40]	; 0x28
   17efc:	mov	r3, r6
   17f00:	stm	sp, {r0, r8, r9}
   17f04:	str	r2, [sp, #16]
   17f08:	ldr	r2, [sp, #20]
   17f0c:	str	r1, [sp, #12]
   17f10:	mov	r0, r4
   17f14:	mov	r1, r7
   17f18:	bl	16e44 <__assert_fail@plt+0x5644>
   17f1c:	ldr	r0, [sp, #24]
   17f20:	str	r0, [sl]
   17f24:	mov	r0, r4
   17f28:	sub	sp, fp, #28
   17f2c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17f30:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17f34:	add	fp, sp, #28
   17f38:	sub	sp, sp, #36	; 0x24
   17f3c:	movw	r8, #53944	; 0xd2b8
   17f40:	cmp	r3, #0
   17f44:	mov	r4, r2
   17f48:	str	r2, [sp, #24]
   17f4c:	mov	r5, r1
   17f50:	mov	r6, r0
   17f54:	str	r0, [sp, #20]
   17f58:	movt	r8, #2
   17f5c:	movne	r8, r3
   17f60:	bl	11680 <__errno_location@plt>
   17f64:	str	r0, [sp, #28]
   17f68:	ldr	r1, [r8, #40]	; 0x28
   17f6c:	ldr	r2, [r8, #44]	; 0x2c
   17f70:	ldr	r7, [r0]
   17f74:	cmp	r4, #0
   17f78:	add	sl, r8, #8
   17f7c:	mov	r0, #0
   17f80:	ldm	r8, {r3, r9}
   17f84:	orreq	r9, r9, #1
   17f88:	stm	sp, {r3, r9, sl}
   17f8c:	str	r1, [sp, #12]
   17f90:	str	r2, [sp, #16]
   17f94:	mov	r1, #0
   17f98:	mov	r2, r6
   17f9c:	mov	r3, r5
   17fa0:	str	r7, [sp, #32]
   17fa4:	mov	r7, r5
   17fa8:	bl	16e44 <__assert_fail@plt+0x5644>
   17fac:	add	r4, r0, #1
   17fb0:	mov	r5, r0
   17fb4:	mov	r0, r4
   17fb8:	bl	191bc <__assert_fail@plt+0x79bc>
   17fbc:	mov	r6, r0
   17fc0:	ldr	r0, [r8]
   17fc4:	ldr	r2, [r8, #44]	; 0x2c
   17fc8:	ldr	r1, [r8, #40]	; 0x28
   17fcc:	mov	r3, r7
   17fd0:	stm	sp, {r0, r9, sl}
   17fd4:	str	r2, [sp, #16]
   17fd8:	ldr	r2, [sp, #20]
   17fdc:	str	r1, [sp, #12]
   17fe0:	mov	r0, r6
   17fe4:	mov	r1, r4
   17fe8:	bl	16e44 <__assert_fail@plt+0x5644>
   17fec:	ldr	r0, [sp, #24]
   17ff0:	ldr	r1, [sp, #32]
   17ff4:	ldr	r2, [sp, #28]
   17ff8:	cmp	r0, #0
   17ffc:	str	r1, [r2]
   18000:	strne	r5, [r0]
   18004:	mov	r0, r6
   18008:	sub	sp, fp, #28
   1800c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18010:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   18014:	add	fp, sp, #24
   18018:	movw	r5, #53628	; 0xd17c
   1801c:	movw	r8, #53624	; 0xd178
   18020:	movt	r5, #2
   18024:	movt	r8, #2
   18028:	ldr	r0, [r5]
   1802c:	ldr	r4, [r8]
   18030:	cmp	r0, #2
   18034:	blt	18060 <__assert_fail@plt+0x6860>
   18038:	add	r7, r4, #12
   1803c:	mov	r6, #0
   18040:	ldr	r0, [r7, r6, lsl #3]
   18044:	bl	1a204 <__assert_fail@plt+0x8a04>
   18048:	ldr	r1, [r5]
   1804c:	add	r2, r6, #2
   18050:	add	r0, r6, #1
   18054:	mov	r6, r0
   18058:	cmp	r2, r1
   1805c:	blt	18040 <__assert_fail@plt+0x6840>
   18060:	ldr	r0, [r4, #4]
   18064:	movw	r9, #53992	; 0xd2e8
   18068:	movw	r7, #53632	; 0xd180
   1806c:	movt	r9, #2
   18070:	movt	r7, #2
   18074:	cmp	r0, r9
   18078:	beq	18088 <__assert_fail@plt+0x6888>
   1807c:	bl	1a204 <__assert_fail@plt+0x8a04>
   18080:	mov	r0, #256	; 0x100
   18084:	stm	r7, {r0, r9}
   18088:	cmp	r4, r7
   1808c:	beq	1809c <__assert_fail@plt+0x689c>
   18090:	mov	r0, r4
   18094:	bl	1a204 <__assert_fail@plt+0x8a04>
   18098:	str	r7, [r8]
   1809c:	mov	r0, #1
   180a0:	str	r0, [r5]
   180a4:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   180a8:	movw	r3, #53944	; 0xd2b8
   180ac:	mvn	r2, #0
   180b0:	movt	r3, #2
   180b4:	b	180b8 <__assert_fail@plt+0x68b8>
   180b8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   180bc:	add	fp, sp, #28
   180c0:	sub	sp, sp, #44	; 0x2c
   180c4:	mov	r7, r3
   180c8:	str	r2, [sp, #36]	; 0x24
   180cc:	str	r1, [sp, #32]
   180d0:	mov	r5, r0
   180d4:	bl	11680 <__errno_location@plt>
   180d8:	cmp	r5, #0
   180dc:	bmi	1824c <__assert_fail@plt+0x6a4c>
   180e0:	cmn	r5, #-2147483647	; 0x80000001
   180e4:	beq	1824c <__assert_fail@plt+0x6a4c>
   180e8:	movw	r8, #53628	; 0xd17c
   180ec:	movw	r4, #53624	; 0xd178
   180f0:	str	r0, [sp, #28]
   180f4:	ldr	r0, [r0]
   180f8:	movt	r8, #2
   180fc:	movt	r4, #2
   18100:	ldr	r1, [r8]
   18104:	ldr	r6, [r4]
   18108:	str	r0, [sp, #24]
   1810c:	cmp	r1, r5
   18110:	ble	1811c <__assert_fail@plt+0x691c>
   18114:	mov	sl, r6
   18118:	b	18188 <__assert_fail@plt+0x6988>
   1811c:	movw	r9, #53632	; 0xd180
   18120:	mov	r0, #8
   18124:	str	r1, [fp, #-32]	; 0xffffffe0
   18128:	sub	r1, r5, r1
   1812c:	mvn	r3, #-2147483648	; 0x80000000
   18130:	movt	r9, #2
   18134:	str	r0, [sp]
   18138:	add	r2, r1, #1
   1813c:	sub	r1, fp, #32
   18140:	subs	r0, r6, r9
   18144:	movne	r0, r6
   18148:	bl	193bc <__assert_fail@plt+0x7bbc>
   1814c:	mov	sl, r0
   18150:	cmp	r6, r9
   18154:	str	r0, [r4]
   18158:	bne	18164 <__assert_fail@plt+0x6964>
   1815c:	ldrd	r0, [r9]
   18160:	stm	sl, {r0, r1}
   18164:	ldr	r1, [r8]
   18168:	ldr	r2, [fp, #-32]	; 0xffffffe0
   1816c:	add	r0, sl, r1, lsl #3
   18170:	sub	r1, r2, r1
   18174:	lsl	r2, r1, #3
   18178:	mov	r1, #0
   1817c:	bl	116a4 <memset@plt>
   18180:	ldr	r0, [fp, #-32]	; 0xffffffe0
   18184:	str	r0, [r8]
   18188:	mov	r9, sl
   1818c:	ldm	r7, {r0, r1}
   18190:	orr	r8, r1, #1
   18194:	add	r1, r7, #8
   18198:	ldr	r2, [r7, #40]	; 0x28
   1819c:	ldr	r3, [r7, #44]	; 0x2c
   181a0:	ldr	r6, [r9, r5, lsl #3]!
   181a4:	str	r1, [sp, #20]
   181a8:	ldr	r4, [r9, #4]!
   181ac:	stm	sp, {r0, r8}
   181b0:	add	r0, sp, #8
   181b4:	stm	r0, {r1, r2, r3}
   181b8:	ldr	r2, [sp, #32]
   181bc:	ldr	r3, [sp, #36]	; 0x24
   181c0:	mov	r1, r6
   181c4:	mov	r0, r4
   181c8:	bl	16e44 <__assert_fail@plt+0x5644>
   181cc:	cmp	r6, r0
   181d0:	bhi	18234 <__assert_fail@plt+0x6a34>
   181d4:	add	r6, r0, #1
   181d8:	movw	r0, #53992	; 0xd2e8
   181dc:	movt	r0, #2
   181e0:	str	r6, [sl, r5, lsl #3]
   181e4:	cmp	r4, r0
   181e8:	beq	181f4 <__assert_fail@plt+0x69f4>
   181ec:	mov	r0, r4
   181f0:	bl	1a204 <__assert_fail@plt+0x8a04>
   181f4:	mov	r0, r6
   181f8:	bl	191bc <__assert_fail@plt+0x79bc>
   181fc:	str	r0, [r9]
   18200:	mov	r4, r0
   18204:	add	r3, sp, #8
   18208:	ldr	r0, [r7]
   1820c:	ldr	r1, [r7, #40]	; 0x28
   18210:	ldr	r2, [r7, #44]	; 0x2c
   18214:	stm	sp, {r0, r8}
   18218:	ldr	r0, [sp, #20]
   1821c:	stm	r3, {r0, r1, r2}
   18220:	ldr	r2, [sp, #32]
   18224:	ldr	r3, [sp, #36]	; 0x24
   18228:	mov	r0, r4
   1822c:	mov	r1, r6
   18230:	bl	16e44 <__assert_fail@plt+0x5644>
   18234:	ldr	r0, [sp, #28]
   18238:	ldr	r1, [sp, #24]
   1823c:	str	r1, [r0]
   18240:	mov	r0, r4
   18244:	sub	sp, fp, #28
   18248:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1824c:	bl	117d0 <abort@plt>
   18250:	movw	r3, #53944	; 0xd2b8
   18254:	movt	r3, #2
   18258:	b	180b8 <__assert_fail@plt+0x68b8>
   1825c:	movw	r3, #53944	; 0xd2b8
   18260:	mov	r1, r0
   18264:	mov	r0, #0
   18268:	mvn	r2, #0
   1826c:	movt	r3, #2
   18270:	b	180b8 <__assert_fail@plt+0x68b8>
   18274:	movw	r3, #53944	; 0xd2b8
   18278:	mov	r2, r1
   1827c:	mov	r1, r0
   18280:	mov	r0, #0
   18284:	movt	r3, #2
   18288:	b	180b8 <__assert_fail@plt+0x68b8>
   1828c:	push	{fp, lr}
   18290:	mov	fp, sp
   18294:	sub	sp, sp, #48	; 0x30
   18298:	vmov.i32	q8, #0	; 0x00000000
   1829c:	mov	ip, #32
   182a0:	mov	r3, sp
   182a4:	mov	lr, r2
   182a8:	cmp	r1, #10
   182ac:	add	r2, r3, #16
   182b0:	vst1.64	{d16-d17}, [r3], ip
   182b4:	vst1.64	{d16-d17}, [r2]
   182b8:	vst1.64	{d16-d17}, [r3]
   182bc:	beq	182dc <__assert_fail@plt+0x6adc>
   182c0:	str	r1, [sp]
   182c4:	mov	r3, sp
   182c8:	mov	r1, lr
   182cc:	mvn	r2, #0
   182d0:	bl	180b8 <__assert_fail@plt+0x68b8>
   182d4:	mov	sp, fp
   182d8:	pop	{fp, pc}
   182dc:	bl	117d0 <abort@plt>
   182e0:	push	{r4, sl, fp, lr}
   182e4:	add	fp, sp, #8
   182e8:	sub	sp, sp, #48	; 0x30
   182ec:	vmov.i32	q8, #0	; 0x00000000
   182f0:	mov	ip, r3
   182f4:	mov	r3, sp
   182f8:	mov	lr, #32
   182fc:	cmp	r1, #10
   18300:	add	r4, r3, #16
   18304:	vst1.64	{d16-d17}, [r3], lr
   18308:	vst1.64	{d16-d17}, [r4]
   1830c:	vst1.64	{d16-d17}, [r3]
   18310:	beq	18330 <__assert_fail@plt+0x6b30>
   18314:	str	r1, [sp]
   18318:	mov	r1, r2
   1831c:	mov	r3, sp
   18320:	mov	r2, ip
   18324:	bl	180b8 <__assert_fail@plt+0x68b8>
   18328:	sub	sp, fp, #8
   1832c:	pop	{r4, sl, fp, pc}
   18330:	bl	117d0 <abort@plt>
   18334:	push	{fp, lr}
   18338:	mov	fp, sp
   1833c:	sub	sp, sp, #48	; 0x30
   18340:	vmov.i32	q8, #0	; 0x00000000
   18344:	mov	r3, sp
   18348:	mov	ip, #32
   1834c:	cmp	r0, #10
   18350:	add	r2, r3, #16
   18354:	vst1.64	{d16-d17}, [r3], ip
   18358:	vst1.64	{d16-d17}, [r2]
   1835c:	vst1.64	{d16-d17}, [r3]
   18360:	beq	18380 <__assert_fail@plt+0x6b80>
   18364:	str	r0, [sp]
   18368:	mov	r3, sp
   1836c:	mov	r0, #0
   18370:	mvn	r2, #0
   18374:	bl	180b8 <__assert_fail@plt+0x68b8>
   18378:	mov	sp, fp
   1837c:	pop	{fp, pc}
   18380:	bl	117d0 <abort@plt>
   18384:	push	{fp, lr}
   18388:	mov	fp, sp
   1838c:	sub	sp, sp, #48	; 0x30
   18390:	vmov.i32	q8, #0	; 0x00000000
   18394:	mov	r3, sp
   18398:	mov	ip, #32
   1839c:	cmp	r0, #10
   183a0:	add	lr, r3, #16
   183a4:	vst1.64	{d16-d17}, [r3], ip
   183a8:	vst1.64	{d16-d17}, [lr]
   183ac:	vst1.64	{d16-d17}, [r3]
   183b0:	beq	183cc <__assert_fail@plt+0x6bcc>
   183b4:	str	r0, [sp]
   183b8:	mov	r3, sp
   183bc:	mov	r0, #0
   183c0:	bl	180b8 <__assert_fail@plt+0x68b8>
   183c4:	mov	sp, fp
   183c8:	pop	{fp, pc}
   183cc:	bl	117d0 <abort@plt>
   183d0:	push	{r4, sl, fp, lr}
   183d4:	add	fp, sp, #8
   183d8:	sub	sp, sp, #48	; 0x30
   183dc:	mov	lr, r0
   183e0:	movw	r0, #53944	; 0xd2b8
   183e4:	mov	ip, r1
   183e8:	mov	r1, #32
   183ec:	mov	r4, #1
   183f0:	movt	r0, #2
   183f4:	add	r3, r0, #16
   183f8:	vld1.64	{d16-d17}, [r0], r1
   183fc:	vld1.64	{d20-d21}, [r0]
   18400:	vld1.64	{d18-d19}, [r3]
   18404:	mov	r3, sp
   18408:	add	r0, r3, #32
   1840c:	add	r1, r3, #16
   18410:	vst1.64	{d20-d21}, [r0]
   18414:	mov	r0, #28
   18418:	vst1.64	{d18-d19}, [r1]
   1841c:	mov	r1, r3
   18420:	and	r0, r0, r2, lsr #3
   18424:	and	r2, r2, #31
   18428:	vst1.64	{d16-d17}, [r1], r0
   1842c:	ldr	r0, [r1, #8]
   18430:	bic	r4, r4, r0, lsr r2
   18434:	eor	r0, r0, r4, lsl r2
   18438:	mov	r2, ip
   1843c:	str	r0, [r1, #8]
   18440:	mov	r0, #0
   18444:	mov	r1, lr
   18448:	bl	180b8 <__assert_fail@plt+0x68b8>
   1844c:	sub	sp, fp, #8
   18450:	pop	{r4, sl, fp, pc}
   18454:	push	{fp, lr}
   18458:	mov	fp, sp
   1845c:	sub	sp, sp, #48	; 0x30
   18460:	mov	ip, r0
   18464:	movw	r0, #53944	; 0xd2b8
   18468:	mov	r2, #32
   1846c:	movt	r0, #2
   18470:	add	r3, r0, #16
   18474:	vld1.64	{d16-d17}, [r0], r2
   18478:	vld1.64	{d20-d21}, [r0]
   1847c:	vld1.64	{d18-d19}, [r3]
   18480:	mov	r3, sp
   18484:	add	r0, r3, #32
   18488:	add	r2, r3, #16
   1848c:	vst1.64	{d20-d21}, [r0]
   18490:	mov	r0, #28
   18494:	vst1.64	{d18-d19}, [r2]
   18498:	mov	r2, r3
   1849c:	and	r0, r0, r1, lsr #3
   184a0:	and	r1, r1, #31
   184a4:	vst1.64	{d16-d17}, [r2], r0
   184a8:	mov	r0, #1
   184ac:	ldr	lr, [r2, #8]
   184b0:	bic	r0, r0, lr, lsr r1
   184b4:	eor	r0, lr, r0, lsl r1
   184b8:	mov	r1, ip
   184bc:	str	r0, [r2, #8]
   184c0:	mov	r0, #0
   184c4:	mvn	r2, #0
   184c8:	bl	180b8 <__assert_fail@plt+0x68b8>
   184cc:	mov	sp, fp
   184d0:	pop	{fp, pc}
   184d4:	push	{fp, lr}
   184d8:	mov	fp, sp
   184dc:	sub	sp, sp, #48	; 0x30
   184e0:	mov	r1, r0
   184e4:	movw	r0, #53944	; 0xd2b8
   184e8:	mov	r3, #32
   184ec:	movt	r0, #2
   184f0:	add	r2, r0, #16
   184f4:	vld1.64	{d16-d17}, [r0], r3
   184f8:	mov	r3, sp
   184fc:	vld1.64	{d18-d19}, [r2]
   18500:	vld1.64	{d20-d21}, [r0]
   18504:	add	r2, r3, #16
   18508:	add	r0, r3, #32
   1850c:	vst1.64	{d18-d19}, [r2]
   18510:	vst1.64	{d20-d21}, [r0]
   18514:	mov	r0, #12
   18518:	mov	r2, r3
   1851c:	vst1.64	{d16-d17}, [r2], r0
   18520:	ldr	r0, [r2]
   18524:	orr	r0, r0, #67108864	; 0x4000000
   18528:	str	r0, [r2]
   1852c:	mov	r0, #0
   18530:	mvn	r2, #0
   18534:	bl	180b8 <__assert_fail@plt+0x68b8>
   18538:	mov	sp, fp
   1853c:	pop	{fp, pc}
   18540:	push	{fp, lr}
   18544:	mov	fp, sp
   18548:	sub	sp, sp, #48	; 0x30
   1854c:	mov	ip, r1
   18550:	mov	r1, r0
   18554:	movw	r0, #53944	; 0xd2b8
   18558:	mov	r2, #32
   1855c:	movt	r0, #2
   18560:	add	r3, r0, #16
   18564:	vld1.64	{d16-d17}, [r0], r2
   18568:	vld1.64	{d18-d19}, [r3]
   1856c:	vld1.64	{d20-d21}, [r0]
   18570:	mov	r3, sp
   18574:	add	r2, r3, #16
   18578:	add	r0, r3, #32
   1857c:	vst1.64	{d18-d19}, [r2]
   18580:	vst1.64	{d20-d21}, [r0]
   18584:	mov	r0, #12
   18588:	mov	r2, r3
   1858c:	vst1.64	{d16-d17}, [r2], r0
   18590:	ldr	r0, [r2]
   18594:	orr	r0, r0, #67108864	; 0x4000000
   18598:	str	r0, [r2]
   1859c:	mov	r0, #0
   185a0:	mov	r2, ip
   185a4:	bl	180b8 <__assert_fail@plt+0x68b8>
   185a8:	mov	sp, fp
   185ac:	pop	{fp, pc}
   185b0:	push	{r4, sl, fp, lr}
   185b4:	add	fp, sp, #8
   185b8:	sub	sp, sp, #96	; 0x60
   185bc:	vmov.i32	q8, #0	; 0x00000000
   185c0:	mov	ip, r2
   185c4:	mov	r2, sp
   185c8:	mov	r4, #28
   185cc:	cmp	r1, #10
   185d0:	mov	r3, r2
   185d4:	add	lr, r2, #16
   185d8:	vst1.64	{d16-d17}, [r3], r4
   185dc:	vst1.64	{d16-d17}, [lr]
   185e0:	vst1.32	{d16-d17}, [r3]
   185e4:	beq	18634 <__assert_fail@plt+0x6e34>
   185e8:	vld1.64	{d16-d17}, [r2], r4
   185ec:	vld1.64	{d18-d19}, [lr]
   185f0:	add	r3, sp, #48	; 0x30
   185f4:	vld1.32	{d20-d21}, [r2]
   185f8:	add	r2, r3, #20
   185fc:	add	r4, r3, #4
   18600:	vst1.32	{d18-d19}, [r2]
   18604:	add	r2, r3, #32
   18608:	vst1.32	{d16-d17}, [r4]
   1860c:	vst1.32	{d20-d21}, [r2]
   18610:	str	r1, [sp, #48]	; 0x30
   18614:	mvn	r2, #0
   18618:	ldr	r1, [sp, #60]	; 0x3c
   1861c:	orr	r1, r1, #67108864	; 0x4000000
   18620:	str	r1, [sp, #60]	; 0x3c
   18624:	mov	r1, ip
   18628:	bl	180b8 <__assert_fail@plt+0x68b8>
   1862c:	sub	sp, fp, #8
   18630:	pop	{r4, sl, fp, pc}
   18634:	bl	117d0 <abort@plt>
   18638:	push	{r4, r5, r6, sl, fp, lr}
   1863c:	add	fp, sp, #16
   18640:	sub	sp, sp, #48	; 0x30
   18644:	mov	ip, r3
   18648:	movw	r3, #53944	; 0xd2b8
   1864c:	mov	r6, #32
   18650:	cmp	r1, #0
   18654:	mov	r4, sp
   18658:	movt	r3, #2
   1865c:	cmpne	r2, #0
   18660:	add	r5, r4, #16
   18664:	add	lr, r3, #16
   18668:	vld1.64	{d16-d17}, [r3], r6
   1866c:	vld1.64	{d18-d19}, [lr]
   18670:	vld1.64	{d20-d21}, [r3]
   18674:	mov	r3, #10
   18678:	vst1.64	{d16-d17}, [r4], r6
   1867c:	vst1.64	{d18-d19}, [r5]
   18680:	vst1.64	{d20-d21}, [r4]
   18684:	str	r3, [sp]
   18688:	bne	18690 <__assert_fail@plt+0x6e90>
   1868c:	bl	117d0 <abort@plt>
   18690:	str	r2, [sp, #44]	; 0x2c
   18694:	str	r1, [sp, #40]	; 0x28
   18698:	mov	r3, sp
   1869c:	mov	r1, ip
   186a0:	mvn	r2, #0
   186a4:	bl	180b8 <__assert_fail@plt+0x68b8>
   186a8:	sub	sp, fp, #16
   186ac:	pop	{r4, r5, r6, sl, fp, pc}
   186b0:	push	{r4, r5, r6, sl, fp, lr}
   186b4:	add	fp, sp, #16
   186b8:	sub	sp, sp, #48	; 0x30
   186bc:	mov	lr, r3
   186c0:	movw	r3, #53944	; 0xd2b8
   186c4:	mov	r6, #32
   186c8:	cmp	r1, #0
   186cc:	mov	r4, sp
   186d0:	movt	r3, #2
   186d4:	cmpne	r2, #0
   186d8:	add	r5, r4, #16
   186dc:	add	ip, r3, #16
   186e0:	vld1.64	{d16-d17}, [r3], r6
   186e4:	vld1.64	{d18-d19}, [ip]
   186e8:	vld1.64	{d20-d21}, [r3]
   186ec:	mov	r3, #10
   186f0:	vst1.64	{d16-d17}, [r4], r6
   186f4:	vst1.64	{d18-d19}, [r5]
   186f8:	vst1.64	{d20-d21}, [r4]
   186fc:	str	r3, [sp]
   18700:	bne	18708 <__assert_fail@plt+0x6f08>
   18704:	bl	117d0 <abort@plt>
   18708:	ldr	ip, [fp, #8]
   1870c:	str	r2, [sp, #44]	; 0x2c
   18710:	str	r1, [sp, #40]	; 0x28
   18714:	mov	r3, sp
   18718:	mov	r1, lr
   1871c:	mov	r2, ip
   18720:	bl	180b8 <__assert_fail@plt+0x68b8>
   18724:	sub	sp, fp, #16
   18728:	pop	{r4, r5, r6, sl, fp, pc}
   1872c:	push	{r4, sl, fp, lr}
   18730:	add	fp, sp, #8
   18734:	sub	sp, sp, #48	; 0x30
   18738:	movw	r3, #53944	; 0xd2b8
   1873c:	mov	lr, #32
   18740:	mov	ip, r2
   18744:	cmp	r0, #0
   18748:	movt	r3, #2
   1874c:	cmpne	r1, #0
   18750:	add	r2, r3, #16
   18754:	vld1.64	{d16-d17}, [r3], lr
   18758:	vld1.64	{d20-d21}, [r3]
   1875c:	vld1.64	{d18-d19}, [r2]
   18760:	mov	r2, sp
   18764:	add	r4, r2, #16
   18768:	vst1.64	{d16-d17}, [r2], lr
   1876c:	vst1.64	{d20-d21}, [r2]
   18770:	mov	r2, #10
   18774:	vst1.64	{d18-d19}, [r4]
   18778:	str	r2, [sp]
   1877c:	bne	18784 <__assert_fail@plt+0x6f84>
   18780:	bl	117d0 <abort@plt>
   18784:	str	r1, [sp, #44]	; 0x2c
   18788:	str	r0, [sp, #40]	; 0x28
   1878c:	mov	r3, sp
   18790:	mov	r0, #0
   18794:	mov	r1, ip
   18798:	mvn	r2, #0
   1879c:	bl	180b8 <__assert_fail@plt+0x68b8>
   187a0:	sub	sp, fp, #8
   187a4:	pop	{r4, sl, fp, pc}
   187a8:	push	{r4, r5, fp, lr}
   187ac:	add	fp, sp, #8
   187b0:	sub	sp, sp, #48	; 0x30
   187b4:	mov	ip, r3
   187b8:	movw	r3, #53944	; 0xd2b8
   187bc:	mov	r4, #32
   187c0:	mov	lr, r2
   187c4:	cmp	r0, #0
   187c8:	movt	r3, #2
   187cc:	cmpne	r1, #0
   187d0:	add	r2, r3, #16
   187d4:	vld1.64	{d16-d17}, [r3], r4
   187d8:	vld1.64	{d20-d21}, [r3]
   187dc:	vld1.64	{d18-d19}, [r2]
   187e0:	mov	r2, sp
   187e4:	add	r5, r2, #16
   187e8:	vst1.64	{d16-d17}, [r2], r4
   187ec:	vst1.64	{d20-d21}, [r2]
   187f0:	mov	r2, #10
   187f4:	vst1.64	{d18-d19}, [r5]
   187f8:	str	r2, [sp]
   187fc:	bne	18804 <__assert_fail@plt+0x7004>
   18800:	bl	117d0 <abort@plt>
   18804:	str	r1, [sp, #44]	; 0x2c
   18808:	str	r0, [sp, #40]	; 0x28
   1880c:	mov	r3, sp
   18810:	mov	r0, #0
   18814:	mov	r1, lr
   18818:	mov	r2, ip
   1881c:	bl	180b8 <__assert_fail@plt+0x68b8>
   18820:	sub	sp, fp, #8
   18824:	pop	{r4, r5, fp, pc}
   18828:	movw	r3, #53640	; 0xd188
   1882c:	movt	r3, #2
   18830:	b	180b8 <__assert_fail@plt+0x68b8>
   18834:	movw	r3, #53640	; 0xd188
   18838:	mov	r2, r1
   1883c:	mov	r1, r0
   18840:	mov	r0, #0
   18844:	movt	r3, #2
   18848:	b	180b8 <__assert_fail@plt+0x68b8>
   1884c:	movw	r3, #53640	; 0xd188
   18850:	mvn	r2, #0
   18854:	movt	r3, #2
   18858:	b	180b8 <__assert_fail@plt+0x68b8>
   1885c:	movw	r3, #53640	; 0xd188
   18860:	mov	r1, r0
   18864:	mov	r0, #0
   18868:	mvn	r2, #0
   1886c:	movt	r3, #2
   18870:	b	180b8 <__assert_fail@plt+0x68b8>
   18874:	push	{r4, r5, fp, lr}
   18878:	add	fp, sp, #8
   1887c:	mov	r5, r0
   18880:	mov	r4, r1
   18884:	mov	r0, #0
   18888:	mov	r2, #5
   1888c:	mov	r1, r5
   18890:	bl	114dc <dcgettext@plt>
   18894:	cmp	r0, r5
   18898:	popne	{r4, r5, fp, pc}
   1889c:	bl	1a4e8 <__assert_fail@plt+0x8ce8>
   188a0:	ldrb	r1, [r0]
   188a4:	and	r1, r1, #223	; 0xdf
   188a8:	cmp	r1, #71	; 0x47
   188ac:	beq	18914 <__assert_fail@plt+0x7114>
   188b0:	cmp	r1, #85	; 0x55
   188b4:	bne	1896c <__assert_fail@plt+0x716c>
   188b8:	ldrb	r1, [r0, #1]
   188bc:	and	r1, r1, #223	; 0xdf
   188c0:	cmp	r1, #84	; 0x54
   188c4:	bne	1896c <__assert_fail@plt+0x716c>
   188c8:	ldrb	r1, [r0, #2]
   188cc:	and	r1, r1, #223	; 0xdf
   188d0:	cmp	r1, #70	; 0x46
   188d4:	bne	1896c <__assert_fail@plt+0x716c>
   188d8:	ldrb	r1, [r0, #3]
   188dc:	cmp	r1, #45	; 0x2d
   188e0:	bne	1896c <__assert_fail@plt+0x716c>
   188e4:	ldrb	r1, [r0, #4]
   188e8:	cmp	r1, #56	; 0x38
   188ec:	bne	1896c <__assert_fail@plt+0x716c>
   188f0:	ldrb	r0, [r0, #5]
   188f4:	cmp	r0, #0
   188f8:	bne	1896c <__assert_fail@plt+0x716c>
   188fc:	ldrb	r1, [r5]
   18900:	movw	r2, #51397	; 0xc8c5
   18904:	movw	r0, #51401	; 0xc8c9
   18908:	movt	r2, #1
   1890c:	movt	r0, #1
   18910:	b	1899c <__assert_fail@plt+0x719c>
   18914:	ldrb	r1, [r0, #1]
   18918:	and	r1, r1, #223	; 0xdf
   1891c:	cmp	r1, #66	; 0x42
   18920:	bne	1896c <__assert_fail@plt+0x716c>
   18924:	ldrb	r1, [r0, #2]
   18928:	cmp	r1, #49	; 0x31
   1892c:	bne	1896c <__assert_fail@plt+0x716c>
   18930:	ldrb	r1, [r0, #3]
   18934:	cmp	r1, #56	; 0x38
   18938:	bne	1896c <__assert_fail@plt+0x716c>
   1893c:	ldrb	r1, [r0, #4]
   18940:	cmp	r1, #48	; 0x30
   18944:	bne	1896c <__assert_fail@plt+0x716c>
   18948:	ldrb	r1, [r0, #5]
   1894c:	cmp	r1, #51	; 0x33
   18950:	bne	1896c <__assert_fail@plt+0x716c>
   18954:	ldrb	r1, [r0, #6]
   18958:	cmp	r1, #48	; 0x30
   1895c:	bne	1896c <__assert_fail@plt+0x716c>
   18960:	ldrb	r0, [r0, #7]
   18964:	cmp	r0, #0
   18968:	beq	18988 <__assert_fail@plt+0x7188>
   1896c:	movw	r1, #51393	; 0xc8c1
   18970:	movw	r0, #51229	; 0xc81d
   18974:	cmp	r4, #9
   18978:	movt	r1, #1
   1897c:	movt	r0, #1
   18980:	moveq	r0, r1
   18984:	pop	{r4, r5, fp, pc}
   18988:	ldrb	r1, [r5]
   1898c:	movw	r2, #51405	; 0xc8cd
   18990:	movw	r0, #51409	; 0xc8d1
   18994:	movt	r2, #1
   18998:	movt	r0, #1
   1899c:	cmp	r1, #96	; 0x60
   189a0:	moveq	r0, r2
   189a4:	pop	{r4, r5, fp, pc}
   189a8:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   189ac:	add	fp, sp, #24
   189b0:	movw	r8, #0
   189b4:	mov	r6, r2
   189b8:	mov	r4, r1
   189bc:	mov	r5, r0
   189c0:	movt	r8, #32752	; 0x7ff0
   189c4:	mov	r0, r5
   189c8:	mov	r1, r4
   189cc:	mov	r2, r6
   189d0:	bl	11464 <read@plt>
   189d4:	mov	r7, r0
   189d8:	cmn	r0, #1
   189dc:	bgt	18a04 <__assert_fail@plt+0x7204>
   189e0:	bl	11680 <__errno_location@plt>
   189e4:	ldr	r0, [r0]
   189e8:	cmp	r0, #4
   189ec:	beq	189c4 <__assert_fail@plt+0x71c4>
   189f0:	cmp	r6, r8
   189f4:	bls	18a04 <__assert_fail@plt+0x7204>
   189f8:	cmp	r0, #22
   189fc:	mov	r6, r8
   18a00:	beq	189c4 <__assert_fail@plt+0x71c4>
   18a04:	mov	r0, r7
   18a08:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   18a0c:	push	{r4, r5, fp, lr}
   18a10:	add	fp, sp, #8
   18a14:	mov	r4, r1
   18a18:	mov	r1, #0
   18a1c:	mov	r5, r0
   18a20:	mov	r2, r4
   18a24:	bl	116d4 <memchr@plt>
   18a28:	sub	r1, r0, r5
   18a2c:	cmp	r0, #0
   18a30:	addne	r4, r1, #1
   18a34:	mov	r0, r4
   18a38:	pop	{r4, r5, fp, pc}
   18a3c:	push	{r4, r5, r6, r7, fp, lr}
   18a40:	add	fp, sp, #16
   18a44:	mov	r4, r0
   18a48:	cmp	r0, #2
   18a4c:	bhi	18a7c <__assert_fail@plt+0x727c>
   18a50:	mov	r0, r4
   18a54:	bl	1a7c0 <__assert_fail@plt+0x8fc0>
   18a58:	mov	r5, r0
   18a5c:	bl	11680 <__errno_location@plt>
   18a60:	ldr	r7, [r0]
   18a64:	mov	r6, r0
   18a68:	mov	r0, r4
   18a6c:	bl	117e8 <close@plt>
   18a70:	mov	r0, r5
   18a74:	str	r7, [r6]
   18a78:	pop	{r4, r5, r6, r7, fp, pc}
   18a7c:	mov	r0, r4
   18a80:	pop	{r4, r5, r6, r7, fp, pc}
   18a84:	push	{r4, r5, r6, sl, fp, lr}
   18a88:	add	fp, sp, #16
   18a8c:	mov	r4, r0
   18a90:	bl	116f8 <pipe@plt>
   18a94:	mvn	r5, #0
   18a98:	cmp	r0, #0
   18a9c:	beq	18aa8 <__assert_fail@plt+0x72a8>
   18aa0:	mov	r0, r5
   18aa4:	pop	{r4, r5, r6, sl, fp, pc}
   18aa8:	ldr	r0, [r4]
   18aac:	bl	18a3c <__assert_fail@plt+0x723c>
   18ab0:	cmn	r0, #1
   18ab4:	str	r0, [r4]
   18ab8:	ble	18ad8 <__assert_fail@plt+0x72d8>
   18abc:	ldr	r0, [r4, #4]
   18ac0:	bl	18a3c <__assert_fail@plt+0x723c>
   18ac4:	mov	r5, #0
   18ac8:	cmp	r0, #0
   18acc:	str	r0, [r4, #4]
   18ad0:	bpl	18aa0 <__assert_fail@plt+0x72a0>
   18ad4:	b	18adc <__assert_fail@plt+0x72dc>
   18ad8:	mov	r5, #1
   18adc:	bl	11680 <__errno_location@plt>
   18ae0:	mov	r6, r0
   18ae4:	ldr	r0, [r4, r5, lsl #2]
   18ae8:	ldr	r4, [r6]
   18aec:	bl	117e8 <close@plt>
   18af0:	mvn	r5, #0
   18af4:	str	r4, [r6]
   18af8:	mov	r0, r5
   18afc:	pop	{r4, r5, r6, sl, fp, pc}
   18b00:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   18b04:	add	fp, sp, #24
   18b08:	sub	sp, sp, #32
   18b0c:	ldr	r7, [fp, #12]
   18b10:	ldr	r6, [fp, #8]
   18b14:	mov	r4, r2
   18b18:	mov	r5, r0
   18b1c:	cmp	r1, #0
   18b20:	beq	18b40 <__assert_fail@plt+0x7340>
   18b24:	mov	r2, r1
   18b28:	movw	r1, #51496	; 0xc928
   18b2c:	str	r3, [sp]
   18b30:	mov	r0, r5
   18b34:	mov	r3, r4
   18b38:	movt	r1, #1
   18b3c:	b	18b50 <__assert_fail@plt+0x7350>
   18b40:	movw	r1, #51508	; 0xc934
   18b44:	mov	r0, r5
   18b48:	mov	r2, r4
   18b4c:	movt	r1, #1
   18b50:	bl	11674 <fprintf@plt>
   18b54:	movw	r1, #51515	; 0xc93b
   18b58:	mov	r0, #0
   18b5c:	mov	r2, #5
   18b60:	movt	r1, #1
   18b64:	bl	114dc <dcgettext@plt>
   18b68:	movw	r1, #52211	; 0xcbf3
   18b6c:	mov	r2, r0
   18b70:	mov	r0, r5
   18b74:	movw	r3, #2022	; 0x7e6
   18b78:	movt	r1, #1
   18b7c:	bl	11674 <fprintf@plt>
   18b80:	mov	r0, #10
   18b84:	mov	r1, r5
   18b88:	bl	11758 <fputc@plt>
   18b8c:	movw	r1, #51519	; 0xc93f
   18b90:	mov	r0, #0
   18b94:	mov	r2, #5
   18b98:	movt	r1, #1
   18b9c:	bl	114dc <dcgettext@plt>
   18ba0:	movw	r2, #51690	; 0xc9ea
   18ba4:	mov	r1, r0
   18ba8:	mov	r0, r5
   18bac:	movt	r2, #1
   18bb0:	bl	11674 <fprintf@plt>
   18bb4:	mov	r0, #10
   18bb8:	mov	r1, r5
   18bbc:	bl	11758 <fputc@plt>
   18bc0:	cmp	r7, #9
   18bc4:	bhi	18c00 <__assert_fail@plt+0x7400>
   18bc8:	add	r0, pc, #0
   18bcc:	ldr	pc, [r0, r7, lsl #2]
   18bd0:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18bd4:	andeq	r8, r1, ip, lsl #24
   18bd8:	andeq	r8, r1, r8, lsr ip
   18bdc:	andeq	r8, r1, r4, ror #24
   18be0:	andeq	r8, r1, ip, lsl #25
   18be4:			; <UNDEFINED> instruction: 0x00018cb8
   18be8:	andeq	r8, r1, ip, ror #25
   18bec:	andeq	r8, r1, ip, lsr #26
   18bf0:	andeq	r8, r1, r8, asr #27
   18bf4:	andeq	r8, r1, r0, ror sp
   18bf8:	sub	sp, fp, #24
   18bfc:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   18c00:	movw	r1, #52043	; 0xcb4b
   18c04:	movt	r1, #1
   18c08:	b	18d78 <__assert_fail@plt+0x7578>
   18c0c:	movw	r1, #51724	; 0xca0c
   18c10:	mov	r0, #0
   18c14:	mov	r2, #5
   18c18:	movt	r1, #1
   18c1c:	bl	114dc <dcgettext@plt>
   18c20:	ldr	r2, [r6]
   18c24:	mov	r1, r0
   18c28:	mov	r0, r5
   18c2c:	sub	sp, fp, #24
   18c30:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   18c34:	b	11674 <fprintf@plt>
   18c38:	movw	r1, #51740	; 0xca1c
   18c3c:	mov	r0, #0
   18c40:	mov	r2, #5
   18c44:	movt	r1, #1
   18c48:	bl	114dc <dcgettext@plt>
   18c4c:	ldm	r6, {r2, r3}
   18c50:	mov	r1, r0
   18c54:	mov	r0, r5
   18c58:	sub	sp, fp, #24
   18c5c:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   18c60:	b	11674 <fprintf@plt>
   18c64:	movw	r1, #51763	; 0xca33
   18c68:	mov	r0, #0
   18c6c:	mov	r2, #5
   18c70:	movt	r1, #1
   18c74:	bl	114dc <dcgettext@plt>
   18c78:	mov	r1, r0
   18c7c:	ldr	r0, [r6, #8]
   18c80:	ldm	r6, {r2, r3}
   18c84:	str	r0, [sp]
   18c88:	b	18d24 <__assert_fail@plt+0x7524>
   18c8c:	movw	r1, #51791	; 0xca4f
   18c90:	mov	r0, #0
   18c94:	mov	r2, #5
   18c98:	movt	r1, #1
   18c9c:	bl	114dc <dcgettext@plt>
   18ca0:	mov	r1, r0
   18ca4:	ldr	r0, [r6, #8]
   18ca8:	ldm	r6, {r2, r3}
   18cac:	ldr	r7, [r6, #12]
   18cb0:	stm	sp, {r0, r7}
   18cb4:	b	18d24 <__assert_fail@plt+0x7524>
   18cb8:	movw	r1, #51823	; 0xca6f
   18cbc:	mov	r0, #0
   18cc0:	mov	r2, #5
   18cc4:	movt	r1, #1
   18cc8:	bl	114dc <dcgettext@plt>
   18ccc:	mov	r1, r0
   18cd0:	ldm	r6, {r2, r3}
   18cd4:	ldr	r0, [r6, #8]
   18cd8:	ldr	r7, [r6, #12]
   18cdc:	ldr	r6, [r6, #16]
   18ce0:	stm	sp, {r0, r7}
   18ce4:	str	r6, [sp, #8]
   18ce8:	b	18d24 <__assert_fail@plt+0x7524>
   18cec:	movw	r1, #51859	; 0xca93
   18cf0:	mov	r0, #0
   18cf4:	mov	r2, #5
   18cf8:	movt	r1, #1
   18cfc:	bl	114dc <dcgettext@plt>
   18d00:	mov	r1, r0
   18d04:	ldm	r6, {r2, r3}
   18d08:	ldr	r0, [r6, #8]
   18d0c:	ldr	r7, [r6, #12]
   18d10:	ldr	r4, [r6, #16]
   18d14:	ldr	r6, [r6, #20]
   18d18:	stm	sp, {r0, r7}
   18d1c:	str	r4, [sp, #8]
   18d20:	str	r6, [sp, #12]
   18d24:	mov	r0, r5
   18d28:	b	18e18 <__assert_fail@plt+0x7618>
   18d2c:	movw	r1, #51899	; 0xcabb
   18d30:	mov	r0, #0
   18d34:	mov	r2, #5
   18d38:	movt	r1, #1
   18d3c:	bl	114dc <dcgettext@plt>
   18d40:	mov	ip, r0
   18d44:	ldm	r6, {r2, r3}
   18d48:	ldr	r0, [r6, #8]
   18d4c:	ldr	r7, [r6, #12]
   18d50:	ldr	r4, [r6, #16]
   18d54:	ldr	r1, [r6, #20]
   18d58:	ldr	r6, [r6, #24]
   18d5c:	stm	sp, {r0, r7}
   18d60:	str	r4, [sp, #8]
   18d64:	str	r1, [sp, #12]
   18d68:	str	r6, [sp, #16]
   18d6c:	b	18e10 <__assert_fail@plt+0x7610>
   18d70:	movw	r1, #51991	; 0xcb17
   18d74:	movt	r1, #1
   18d78:	mov	r0, #0
   18d7c:	mov	r2, #5
   18d80:	bl	114dc <dcgettext@plt>
   18d84:	mov	ip, r0
   18d88:	ldr	r2, [r6]
   18d8c:	ldr	r3, [r6, #4]
   18d90:	ldr	r0, [r6, #8]
   18d94:	ldr	r7, [r6, #12]
   18d98:	ldr	r4, [r6, #16]
   18d9c:	ldr	r1, [r6, #20]
   18da0:	ldr	lr, [r6, #24]
   18da4:	ldr	r8, [r6, #28]
   18da8:	ldr	r6, [r6, #32]
   18dac:	stm	sp, {r0, r7}
   18db0:	str	r4, [sp, #8]
   18db4:	str	r1, [sp, #12]
   18db8:	str	lr, [sp, #16]
   18dbc:	str	r8, [sp, #20]
   18dc0:	str	r6, [sp, #24]
   18dc4:	b	18e10 <__assert_fail@plt+0x7610>
   18dc8:	movw	r1, #51943	; 0xcae7
   18dcc:	mov	r0, #0
   18dd0:	mov	r2, #5
   18dd4:	movt	r1, #1
   18dd8:	bl	114dc <dcgettext@plt>
   18ddc:	mov	ip, r0
   18de0:	ldm	r6, {r2, r3}
   18de4:	ldr	r0, [r6, #8]
   18de8:	ldr	r7, [r6, #12]
   18dec:	ldr	r4, [r6, #16]
   18df0:	ldr	r1, [r6, #20]
   18df4:	ldr	lr, [r6, #24]
   18df8:	ldr	r6, [r6, #28]
   18dfc:	stm	sp, {r0, r7}
   18e00:	str	r4, [sp, #8]
   18e04:	str	r1, [sp, #12]
   18e08:	str	lr, [sp, #16]
   18e0c:	str	r6, [sp, #20]
   18e10:	mov	r0, r5
   18e14:	mov	r1, ip
   18e18:	bl	11674 <fprintf@plt>
   18e1c:	sub	sp, fp, #24
   18e20:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   18e24:	push	{r4, sl, fp, lr}
   18e28:	add	fp, sp, #8
   18e2c:	sub	sp, sp, #8
   18e30:	ldr	ip, [fp, #8]
   18e34:	mov	lr, #0
   18e38:	ldr	r4, [ip, lr, lsl #2]
   18e3c:	add	lr, lr, #1
   18e40:	cmp	r4, #0
   18e44:	bne	18e38 <__assert_fail@plt+0x7638>
   18e48:	sub	r4, lr, #1
   18e4c:	str	ip, [sp]
   18e50:	str	r4, [sp, #4]
   18e54:	bl	18b00 <__assert_fail@plt+0x7300>
   18e58:	sub	sp, fp, #8
   18e5c:	pop	{r4, sl, fp, pc}
   18e60:	push	{fp, lr}
   18e64:	mov	fp, sp
   18e68:	sub	sp, sp, #48	; 0x30
   18e6c:	ldr	ip, [fp, #8]
   18e70:	ldr	lr, [ip]
   18e74:	cmp	lr, #0
   18e78:	str	lr, [sp, #8]
   18e7c:	beq	18f18 <__assert_fail@plt+0x7718>
   18e80:	ldr	lr, [ip, #4]
   18e84:	cmp	lr, #0
   18e88:	str	lr, [sp, #12]
   18e8c:	beq	18f20 <__assert_fail@plt+0x7720>
   18e90:	ldr	lr, [ip, #8]
   18e94:	cmp	lr, #0
   18e98:	str	lr, [sp, #16]
   18e9c:	beq	18f28 <__assert_fail@plt+0x7728>
   18ea0:	ldr	lr, [ip, #12]
   18ea4:	cmp	lr, #0
   18ea8:	str	lr, [sp, #20]
   18eac:	beq	18f30 <__assert_fail@plt+0x7730>
   18eb0:	ldr	lr, [ip, #16]
   18eb4:	cmp	lr, #0
   18eb8:	str	lr, [sp, #24]
   18ebc:	beq	18f38 <__assert_fail@plt+0x7738>
   18ec0:	ldr	lr, [ip, #20]
   18ec4:	cmp	lr, #0
   18ec8:	str	lr, [sp, #28]
   18ecc:	beq	18f40 <__assert_fail@plt+0x7740>
   18ed0:	ldr	lr, [ip, #24]
   18ed4:	cmp	lr, #0
   18ed8:	str	lr, [sp, #32]
   18edc:	beq	18f48 <__assert_fail@plt+0x7748>
   18ee0:	ldr	lr, [ip, #28]
   18ee4:	cmp	lr, #0
   18ee8:	str	lr, [sp, #36]	; 0x24
   18eec:	beq	18f50 <__assert_fail@plt+0x7750>
   18ef0:	ldr	lr, [ip, #32]
   18ef4:	cmp	lr, #0
   18ef8:	str	lr, [sp, #40]	; 0x28
   18efc:	beq	18f58 <__assert_fail@plt+0x7758>
   18f00:	ldr	lr, [ip, #36]	; 0x24
   18f04:	mov	ip, #10
   18f08:	cmp	lr, #0
   18f0c:	str	lr, [sp, #44]	; 0x2c
   18f10:	movweq	ip, #9
   18f14:	b	18f5c <__assert_fail@plt+0x775c>
   18f18:	mov	ip, #0
   18f1c:	b	18f5c <__assert_fail@plt+0x775c>
   18f20:	mov	ip, #1
   18f24:	b	18f5c <__assert_fail@plt+0x775c>
   18f28:	mov	ip, #2
   18f2c:	b	18f5c <__assert_fail@plt+0x775c>
   18f30:	mov	ip, #3
   18f34:	b	18f5c <__assert_fail@plt+0x775c>
   18f38:	mov	ip, #4
   18f3c:	b	18f5c <__assert_fail@plt+0x775c>
   18f40:	mov	ip, #5
   18f44:	b	18f5c <__assert_fail@plt+0x775c>
   18f48:	mov	ip, #6
   18f4c:	b	18f5c <__assert_fail@plt+0x775c>
   18f50:	mov	ip, #7
   18f54:	b	18f5c <__assert_fail@plt+0x775c>
   18f58:	mov	ip, #8
   18f5c:	add	lr, sp, #8
   18f60:	str	ip, [sp, #4]
   18f64:	str	lr, [sp]
   18f68:	bl	18b00 <__assert_fail@plt+0x7300>
   18f6c:	mov	sp, fp
   18f70:	pop	{fp, pc}
   18f74:	push	{fp, lr}
   18f78:	mov	fp, sp
   18f7c:	sub	sp, sp, #56	; 0x38
   18f80:	add	ip, fp, #8
   18f84:	str	ip, [sp, #12]
   18f88:	ldr	lr, [fp, #8]
   18f8c:	cmp	lr, #0
   18f90:	str	lr, [sp, #16]
   18f94:	beq	19030 <__assert_fail@plt+0x7830>
   18f98:	ldr	lr, [ip, #4]
   18f9c:	cmp	lr, #0
   18fa0:	str	lr, [sp, #20]
   18fa4:	beq	19038 <__assert_fail@plt+0x7838>
   18fa8:	ldr	lr, [ip, #8]
   18fac:	cmp	lr, #0
   18fb0:	str	lr, [sp, #24]
   18fb4:	beq	19040 <__assert_fail@plt+0x7840>
   18fb8:	ldr	lr, [ip, #12]
   18fbc:	cmp	lr, #0
   18fc0:	str	lr, [sp, #28]
   18fc4:	beq	19048 <__assert_fail@plt+0x7848>
   18fc8:	ldr	lr, [ip, #16]
   18fcc:	cmp	lr, #0
   18fd0:	str	lr, [sp, #32]
   18fd4:	beq	19050 <__assert_fail@plt+0x7850>
   18fd8:	ldr	lr, [ip, #20]
   18fdc:	cmp	lr, #0
   18fe0:	str	lr, [sp, #36]	; 0x24
   18fe4:	beq	19058 <__assert_fail@plt+0x7858>
   18fe8:	ldr	lr, [ip, #24]
   18fec:	cmp	lr, #0
   18ff0:	str	lr, [sp, #40]	; 0x28
   18ff4:	beq	19060 <__assert_fail@plt+0x7860>
   18ff8:	ldr	lr, [ip, #28]
   18ffc:	cmp	lr, #0
   19000:	str	lr, [sp, #44]	; 0x2c
   19004:	beq	19068 <__assert_fail@plt+0x7868>
   19008:	ldr	lr, [ip, #32]
   1900c:	cmp	lr, #0
   19010:	str	lr, [sp, #48]	; 0x30
   19014:	beq	19070 <__assert_fail@plt+0x7870>
   19018:	ldr	lr, [ip, #36]	; 0x24
   1901c:	mov	ip, #10
   19020:	cmp	lr, #0
   19024:	str	lr, [sp, #52]	; 0x34
   19028:	movweq	ip, #9
   1902c:	b	19074 <__assert_fail@plt+0x7874>
   19030:	mov	ip, #0
   19034:	b	19074 <__assert_fail@plt+0x7874>
   19038:	mov	ip, #1
   1903c:	b	19074 <__assert_fail@plt+0x7874>
   19040:	mov	ip, #2
   19044:	b	19074 <__assert_fail@plt+0x7874>
   19048:	mov	ip, #3
   1904c:	b	19074 <__assert_fail@plt+0x7874>
   19050:	mov	ip, #4
   19054:	b	19074 <__assert_fail@plt+0x7874>
   19058:	mov	ip, #5
   1905c:	b	19074 <__assert_fail@plt+0x7874>
   19060:	mov	ip, #6
   19064:	b	19074 <__assert_fail@plt+0x7874>
   19068:	mov	ip, #7
   1906c:	b	19074 <__assert_fail@plt+0x7874>
   19070:	mov	ip, #8
   19074:	add	lr, sp, #16
   19078:	str	ip, [sp, #4]
   1907c:	str	lr, [sp]
   19080:	bl	18b00 <__assert_fail@plt+0x7300>
   19084:	mov	sp, fp
   19088:	pop	{fp, pc}
   1908c:	push	{fp, lr}
   19090:	mov	fp, sp
   19094:	movw	r0, #53724	; 0xd1dc
   19098:	movt	r0, #2
   1909c:	ldr	r1, [r0]
   190a0:	mov	r0, #10
   190a4:	bl	11758 <fputc@plt>
   190a8:	movw	r1, #52103	; 0xcb87
   190ac:	mov	r0, #0
   190b0:	mov	r2, #5
   190b4:	movt	r1, #1
   190b8:	bl	114dc <dcgettext@plt>
   190bc:	movw	r1, #50982	; 0xc726
   190c0:	movt	r1, #1
   190c4:	bl	11458 <printf@plt>
   190c8:	movw	r1, #52123	; 0xcb9b
   190cc:	mov	r0, #0
   190d0:	mov	r2, #5
   190d4:	movt	r1, #1
   190d8:	bl	114dc <dcgettext@plt>
   190dc:	movw	r1, #50582	; 0xc596
   190e0:	movw	r2, #50896	; 0xc6d0
   190e4:	movt	r1, #1
   190e8:	movt	r2, #1
   190ec:	bl	11458 <printf@plt>
   190f0:	movw	r1, #52143	; 0xcbaf
   190f4:	mov	r0, #0
   190f8:	mov	r2, #5
   190fc:	movt	r1, #1
   19100:	bl	114dc <dcgettext@plt>
   19104:	movw	r1, #52182	; 0xcbd6
   19108:	movt	r1, #1
   1910c:	pop	{fp, lr}
   19110:	b	11458 <printf@plt>
   19114:	push	{r4, r5, r6, sl, fp, lr}
   19118:	add	fp, sp, #16
   1911c:	mov	r4, r2
   19120:	mov	r5, r1
   19124:	mov	r6, r0
   19128:	bl	1a3bc <__assert_fail@plt+0x8bbc>
   1912c:	cmp	r0, #0
   19130:	popne	{r4, r5, r6, sl, fp, pc}
   19134:	cmp	r6, #0
   19138:	beq	1914c <__assert_fail@plt+0x794c>
   1913c:	cmp	r5, #0
   19140:	cmpne	r4, #0
   19144:	bne	1914c <__assert_fail@plt+0x794c>
   19148:	pop	{r4, r5, r6, sl, fp, pc}
   1914c:	bl	196c8 <__assert_fail@plt+0x7ec8>
   19150:	push	{r4, r5, r6, sl, fp, lr}
   19154:	add	fp, sp, #16
   19158:	mov	r4, r2
   1915c:	mov	r5, r1
   19160:	mov	r6, r0
   19164:	bl	1a3bc <__assert_fail@plt+0x8bbc>
   19168:	cmp	r0, #0
   1916c:	popne	{r4, r5, r6, sl, fp, pc}
   19170:	cmp	r6, #0
   19174:	beq	19188 <__assert_fail@plt+0x7988>
   19178:	cmp	r5, #0
   1917c:	cmpne	r4, #0
   19180:	bne	19188 <__assert_fail@plt+0x7988>
   19184:	pop	{r4, r5, r6, sl, fp, pc}
   19188:	bl	196c8 <__assert_fail@plt+0x7ec8>
   1918c:	push	{fp, lr}
   19190:	mov	fp, sp
   19194:	bl	1a2d4 <__assert_fail@plt+0x8ad4>
   19198:	cmp	r0, #0
   1919c:	popne	{fp, pc}
   191a0:	bl	196c8 <__assert_fail@plt+0x7ec8>
   191a4:	push	{fp, lr}
   191a8:	mov	fp, sp
   191ac:	bl	1a2d4 <__assert_fail@plt+0x8ad4>
   191b0:	cmp	r0, #0
   191b4:	popne	{fp, pc}
   191b8:	bl	196c8 <__assert_fail@plt+0x7ec8>
   191bc:	push	{fp, lr}
   191c0:	mov	fp, sp
   191c4:	bl	1a2d4 <__assert_fail@plt+0x8ad4>
   191c8:	cmp	r0, #0
   191cc:	popne	{fp, pc}
   191d0:	bl	196c8 <__assert_fail@plt+0x7ec8>
   191d4:	push	{r4, r5, fp, lr}
   191d8:	add	fp, sp, #8
   191dc:	mov	r4, r1
   191e0:	mov	r5, r0
   191e4:	bl	1a368 <__assert_fail@plt+0x8b68>
   191e8:	cmp	r0, #0
   191ec:	popne	{r4, r5, fp, pc}
   191f0:	cmp	r5, #0
   191f4:	beq	19204 <__assert_fail@plt+0x7a04>
   191f8:	cmp	r4, #0
   191fc:	bne	19204 <__assert_fail@plt+0x7a04>
   19200:	pop	{r4, r5, fp, pc}
   19204:	bl	196c8 <__assert_fail@plt+0x7ec8>
   19208:	push	{fp, lr}
   1920c:	mov	fp, sp
   19210:	cmp	r1, #0
   19214:	orreq	r1, r1, #1
   19218:	bl	1a368 <__assert_fail@plt+0x8b68>
   1921c:	cmp	r0, #0
   19220:	popne	{fp, pc}
   19224:	bl	196c8 <__assert_fail@plt+0x7ec8>
   19228:	push	{fp, lr}
   1922c:	mov	fp, sp
   19230:	clz	r3, r2
   19234:	lsr	ip, r3, #5
   19238:	clz	r3, r1
   1923c:	lsr	r3, r3, #5
   19240:	orrs	r3, r3, ip
   19244:	movwne	r1, #1
   19248:	movwne	r2, #1
   1924c:	bl	1a3bc <__assert_fail@plt+0x8bbc>
   19250:	cmp	r0, #0
   19254:	popne	{fp, pc}
   19258:	bl	196c8 <__assert_fail@plt+0x7ec8>
   1925c:	push	{fp, lr}
   19260:	mov	fp, sp
   19264:	mov	r2, r1
   19268:	mov	r1, r0
   1926c:	mov	r0, #0
   19270:	bl	1a3bc <__assert_fail@plt+0x8bbc>
   19274:	cmp	r0, #0
   19278:	popne	{fp, pc}
   1927c:	bl	196c8 <__assert_fail@plt+0x7ec8>
   19280:	push	{fp, lr}
   19284:	mov	fp, sp
   19288:	mov	r2, r1
   1928c:	mov	r1, r0
   19290:	clz	r0, r2
   19294:	clz	r3, r1
   19298:	lsr	r0, r0, #5
   1929c:	lsr	r3, r3, #5
   192a0:	orrs	r0, r3, r0
   192a4:	mov	r0, #0
   192a8:	movwne	r1, #1
   192ac:	movwne	r2, #1
   192b0:	bl	1a3bc <__assert_fail@plt+0x8bbc>
   192b4:	cmp	r0, #0
   192b8:	popne	{fp, pc}
   192bc:	bl	196c8 <__assert_fail@plt+0x7ec8>
   192c0:	push	{r4, r5, r6, sl, fp, lr}
   192c4:	add	fp, sp, #16
   192c8:	ldr	r5, [r1]
   192cc:	mov	r4, r1
   192d0:	mov	r6, r0
   192d4:	cmp	r0, #0
   192d8:	beq	192f0 <__assert_fail@plt+0x7af0>
   192dc:	mov	r0, #1
   192e0:	add	r0, r0, r5, lsr #1
   192e4:	adds	r5, r5, r0
   192e8:	bcc	192f8 <__assert_fail@plt+0x7af8>
   192ec:	b	19334 <__assert_fail@plt+0x7b34>
   192f0:	cmp	r5, #0
   192f4:	movweq	r5, #64	; 0x40
   192f8:	mov	r0, r6
   192fc:	mov	r1, r5
   19300:	mov	r2, #1
   19304:	bl	1a3bc <__assert_fail@plt+0x8bbc>
   19308:	cmp	r5, #0
   1930c:	mov	r1, r5
   19310:	movwne	r1, #1
   19314:	cmp	r0, #0
   19318:	bne	1932c <__assert_fail@plt+0x7b2c>
   1931c:	clz	r2, r6
   19320:	lsr	r2, r2, #5
   19324:	orrs	r1, r2, r1
   19328:	bne	19334 <__assert_fail@plt+0x7b34>
   1932c:	str	r5, [r4]
   19330:	pop	{r4, r5, r6, sl, fp, pc}
   19334:	bl	196c8 <__assert_fail@plt+0x7ec8>
   19338:	push	{r4, r5, r6, r7, fp, lr}
   1933c:	add	fp, sp, #16
   19340:	ldr	r5, [r1]
   19344:	mov	r6, r2
   19348:	mov	r4, r1
   1934c:	mov	r7, r0
   19350:	cmp	r0, #0
   19354:	beq	1936c <__assert_fail@plt+0x7b6c>
   19358:	mov	r0, #1
   1935c:	add	r0, r0, r5, lsr #1
   19360:	adds	r5, r5, r0
   19364:	bcc	19384 <__assert_fail@plt+0x7b84>
   19368:	b	193b8 <__assert_fail@plt+0x7bb8>
   1936c:	cmp	r5, #0
   19370:	bne	19384 <__assert_fail@plt+0x7b84>
   19374:	mov	r0, #64	; 0x40
   19378:	cmp	r6, #64	; 0x40
   1937c:	udiv	r5, r0, r6
   19380:	addhi	r5, r5, #1
   19384:	mov	r0, r7
   19388:	mov	r1, r5
   1938c:	mov	r2, r6
   19390:	bl	1a3bc <__assert_fail@plt+0x8bbc>
   19394:	cmp	r0, #0
   19398:	bne	193b0 <__assert_fail@plt+0x7bb0>
   1939c:	cmp	r7, #0
   193a0:	beq	193b8 <__assert_fail@plt+0x7bb8>
   193a4:	cmp	r6, #0
   193a8:	cmpne	r5, #0
   193ac:	bne	193b8 <__assert_fail@plt+0x7bb8>
   193b0:	str	r5, [r4]
   193b4:	pop	{r4, r5, r6, r7, fp, pc}
   193b8:	bl	196c8 <__assert_fail@plt+0x7ec8>
   193bc:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   193c0:	add	fp, sp, #24
   193c4:	mov	r8, r1
   193c8:	ldr	r1, [r1]
   193cc:	mov	r5, r0
   193d0:	add	r0, r1, r1, asr #1
   193d4:	cmp	r0, r1
   193d8:	mvnvs	r0, #-2147483648	; 0x80000000
   193dc:	cmp	r0, r3
   193e0:	mov	r7, r0
   193e4:	movgt	r7, r3
   193e8:	cmn	r3, #1
   193ec:	movle	r7, r0
   193f0:	ldr	r0, [fp, #8]
   193f4:	cmn	r0, #1
   193f8:	ble	19420 <__assert_fail@plt+0x7c20>
   193fc:	cmp	r0, #0
   19400:	beq	19474 <__assert_fail@plt+0x7c74>
   19404:	cmn	r7, #1
   19408:	ble	19448 <__assert_fail@plt+0x7c48>
   1940c:	mvn	r4, #-2147483648	; 0x80000000
   19410:	udiv	r6, r4, r0
   19414:	cmp	r6, r7
   19418:	bge	19474 <__assert_fail@plt+0x7c74>
   1941c:	b	19484 <__assert_fail@plt+0x7c84>
   19420:	cmn	r7, #1
   19424:	ble	19464 <__assert_fail@plt+0x7c64>
   19428:	cmn	r0, #1
   1942c:	beq	19474 <__assert_fail@plt+0x7c74>
   19430:	mov	r6, #-2147483648	; 0x80000000
   19434:	mvn	r4, #-2147483648	; 0x80000000
   19438:	sdiv	r6, r6, r0
   1943c:	cmp	r6, r7
   19440:	bge	19474 <__assert_fail@plt+0x7c74>
   19444:	b	19484 <__assert_fail@plt+0x7c84>
   19448:	beq	19474 <__assert_fail@plt+0x7c74>
   1944c:	mov	r6, #-2147483648	; 0x80000000
   19450:	mvn	r4, #-2147483648	; 0x80000000
   19454:	sdiv	r6, r6, r7
   19458:	cmp	r6, r0
   1945c:	bge	19474 <__assert_fail@plt+0x7c74>
   19460:	b	19484 <__assert_fail@plt+0x7c84>
   19464:	mvn	r4, #-2147483648	; 0x80000000
   19468:	sdiv	r6, r4, r0
   1946c:	cmp	r7, r6
   19470:	blt	19484 <__assert_fail@plt+0x7c84>
   19474:	mul	r6, r7, r0
   19478:	mov	r4, #64	; 0x40
   1947c:	cmp	r6, #63	; 0x3f
   19480:	bgt	1948c <__assert_fail@plt+0x7c8c>
   19484:	sdiv	r7, r4, r0
   19488:	mul	r6, r7, r0
   1948c:	cmp	r5, #0
   19490:	moveq	r4, #0
   19494:	streq	r4, [r8]
   19498:	sub	r4, r7, r1
   1949c:	cmp	r4, r2
   194a0:	bge	1954c <__assert_fail@plt+0x7d4c>
   194a4:	add	r7, r1, r2
   194a8:	mov	r6, #0
   194ac:	mov	r2, #0
   194b0:	cmp	r7, r3
   194b4:	movwgt	r6, #1
   194b8:	cmn	r3, #1
   194bc:	movwgt	r2, #1
   194c0:	cmp	r7, r1
   194c4:	bvs	19580 <__assert_fail@plt+0x7d80>
   194c8:	ands	r1, r2, r6
   194cc:	bne	19580 <__assert_fail@plt+0x7d80>
   194d0:	cmn	r0, #1
   194d4:	ble	194fc <__assert_fail@plt+0x7cfc>
   194d8:	cmp	r0, #0
   194dc:	beq	19548 <__assert_fail@plt+0x7d48>
   194e0:	cmn	r7, #1
   194e4:	ble	19520 <__assert_fail@plt+0x7d20>
   194e8:	mvn	r1, #-2147483648	; 0x80000000
   194ec:	udiv	r1, r1, r0
   194f0:	cmp	r1, r7
   194f4:	bge	19548 <__assert_fail@plt+0x7d48>
   194f8:	b	19580 <__assert_fail@plt+0x7d80>
   194fc:	cmn	r7, #1
   19500:	ble	19538 <__assert_fail@plt+0x7d38>
   19504:	cmn	r0, #1
   19508:	beq	19548 <__assert_fail@plt+0x7d48>
   1950c:	mov	r1, #-2147483648	; 0x80000000
   19510:	sdiv	r1, r1, r0
   19514:	cmp	r1, r7
   19518:	bge	19548 <__assert_fail@plt+0x7d48>
   1951c:	b	19580 <__assert_fail@plt+0x7d80>
   19520:	beq	19548 <__assert_fail@plt+0x7d48>
   19524:	mov	r1, #-2147483648	; 0x80000000
   19528:	sdiv	r1, r1, r7
   1952c:	cmp	r1, r0
   19530:	bge	19548 <__assert_fail@plt+0x7d48>
   19534:	b	19580 <__assert_fail@plt+0x7d80>
   19538:	mvn	r1, #-2147483648	; 0x80000000
   1953c:	sdiv	r1, r1, r0
   19540:	cmp	r7, r1
   19544:	blt	19580 <__assert_fail@plt+0x7d80>
   19548:	mul	r6, r7, r0
   1954c:	mov	r0, r5
   19550:	mov	r1, r6
   19554:	bl	1a368 <__assert_fail@plt+0x8b68>
   19558:	cmp	r6, #0
   1955c:	movwne	r6, #1
   19560:	cmp	r0, #0
   19564:	bne	19578 <__assert_fail@plt+0x7d78>
   19568:	clz	r1, r5
   1956c:	lsr	r1, r1, #5
   19570:	orrs	r1, r1, r6
   19574:	bne	19580 <__assert_fail@plt+0x7d80>
   19578:	str	r7, [r8]
   1957c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   19580:	bl	196c8 <__assert_fail@plt+0x7ec8>
   19584:	push	{fp, lr}
   19588:	mov	fp, sp
   1958c:	mov	r1, #1
   19590:	bl	19f34 <__assert_fail@plt+0x8734>
   19594:	cmp	r0, #0
   19598:	popne	{fp, pc}
   1959c:	bl	196c8 <__assert_fail@plt+0x7ec8>
   195a0:	push	{fp, lr}
   195a4:	mov	fp, sp
   195a8:	bl	19f34 <__assert_fail@plt+0x8734>
   195ac:	cmp	r0, #0
   195b0:	popne	{fp, pc}
   195b4:	bl	196c8 <__assert_fail@plt+0x7ec8>
   195b8:	push	{fp, lr}
   195bc:	mov	fp, sp
   195c0:	mov	r1, #1
   195c4:	bl	19f34 <__assert_fail@plt+0x8734>
   195c8:	cmp	r0, #0
   195cc:	popne	{fp, pc}
   195d0:	bl	196c8 <__assert_fail@plt+0x7ec8>
   195d4:	push	{fp, lr}
   195d8:	mov	fp, sp
   195dc:	bl	19f34 <__assert_fail@plt+0x8734>
   195e0:	cmp	r0, #0
   195e4:	popne	{fp, pc}
   195e8:	bl	196c8 <__assert_fail@plt+0x7ec8>
   195ec:	push	{r4, r5, fp, lr}
   195f0:	add	fp, sp, #8
   195f4:	mov	r5, r0
   195f8:	mov	r0, r1
   195fc:	mov	r4, r1
   19600:	bl	1a2d4 <__assert_fail@plt+0x8ad4>
   19604:	cmp	r0, #0
   19608:	beq	1961c <__assert_fail@plt+0x7e1c>
   1960c:	mov	r1, r5
   19610:	mov	r2, r4
   19614:	pop	{r4, r5, fp, lr}
   19618:	b	114ac <memcpy@plt>
   1961c:	bl	196c8 <__assert_fail@plt+0x7ec8>
   19620:	push	{r4, r5, fp, lr}
   19624:	add	fp, sp, #8
   19628:	mov	r5, r0
   1962c:	mov	r0, r1
   19630:	mov	r4, r1
   19634:	bl	1a2d4 <__assert_fail@plt+0x8ad4>
   19638:	cmp	r0, #0
   1963c:	beq	19650 <__assert_fail@plt+0x7e50>
   19640:	mov	r1, r5
   19644:	mov	r2, r4
   19648:	pop	{r4, r5, fp, lr}
   1964c:	b	114ac <memcpy@plt>
   19650:	bl	196c8 <__assert_fail@plt+0x7ec8>
   19654:	push	{r4, r5, fp, lr}
   19658:	add	fp, sp, #8
   1965c:	mov	r5, r0
   19660:	add	r0, r1, #1
   19664:	mov	r4, r1
   19668:	bl	1a2d4 <__assert_fail@plt+0x8ad4>
   1966c:	cmp	r0, #0
   19670:	beq	1968c <__assert_fail@plt+0x7e8c>
   19674:	mov	r1, #0
   19678:	mov	r2, r4
   1967c:	strb	r1, [r0, r4]
   19680:	mov	r1, r5
   19684:	pop	{r4, r5, fp, lr}
   19688:	b	114ac <memcpy@plt>
   1968c:	bl	196c8 <__assert_fail@plt+0x7ec8>
   19690:	push	{r4, r5, fp, lr}
   19694:	add	fp, sp, #8
   19698:	mov	r4, r0
   1969c:	bl	11650 <strlen@plt>
   196a0:	add	r5, r0, #1
   196a4:	mov	r0, r5
   196a8:	bl	1a2d4 <__assert_fail@plt+0x8ad4>
   196ac:	cmp	r0, #0
   196b0:	beq	196c4 <__assert_fail@plt+0x7ec4>
   196b4:	mov	r1, r4
   196b8:	mov	r2, r5
   196bc:	pop	{r4, r5, fp, lr}
   196c0:	b	114ac <memcpy@plt>
   196c4:	bl	196c8 <__assert_fail@plt+0x7ec8>
   196c8:	push	{fp, lr}
   196cc:	mov	fp, sp
   196d0:	movw	r0, #53616	; 0xd170
   196d4:	movw	r1, #52258	; 0xcc22
   196d8:	mov	r2, #5
   196dc:	movt	r0, #2
   196e0:	movt	r1, #1
   196e4:	ldr	r4, [r0]
   196e8:	mov	r0, #0
   196ec:	bl	114dc <dcgettext@plt>
   196f0:	movw	r2, #50687	; 0xc5ff
   196f4:	mov	r3, r0
   196f8:	mov	r0, r4
   196fc:	mov	r1, #0
   19700:	movt	r2, #1
   19704:	bl	115a8 <error@plt>
   19708:	bl	117d0 <abort@plt>
   1970c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19710:	add	fp, sp, #28
   19714:	sub	sp, sp, #20
   19718:	cmp	r2, #37	; 0x25
   1971c:	bcs	19f14 <__assert_fail@plt+0x8714>
   19720:	ldr	r9, [fp, #8]
   19724:	mov	r5, r2
   19728:	mov	r4, r1
   1972c:	mov	r7, r0
   19730:	str	r3, [sp, #12]
   19734:	bl	11680 <__errno_location@plt>
   19738:	mov	r8, r0
   1973c:	mov	r0, #0
   19740:	str	r0, [r8]
   19744:	bl	11614 <__ctype_b_loc@plt>
   19748:	ldr	r1, [r0]
   1974c:	mov	r2, r7
   19750:	ldrb	r0, [r2], #1
   19754:	add	r3, r1, r0, lsl #1
   19758:	ldrb	r3, [r3, #1]
   1975c:	tst	r3, #32
   19760:	bne	19750 <__assert_fail@plt+0x7f50>
   19764:	cmp	r4, #0
   19768:	add	r6, sp, #16
   1976c:	mov	sl, #4
   19770:	movne	r6, r4
   19774:	cmp	r0, #45	; 0x2d
   19778:	beq	19f08 <__assert_fail@plt+0x8708>
   1977c:	mov	r0, r7
   19780:	mov	r1, r6
   19784:	mov	r2, r5
   19788:	bl	11644 <strtoul@plt>
   1978c:	ldr	r5, [r6]
   19790:	cmp	r5, r7
   19794:	beq	197c0 <__assert_fail@plt+0x7fc0>
   19798:	mov	r4, r0
   1979c:	ldr	r0, [r8]
   197a0:	cmp	r0, #0
   197a4:	beq	197f0 <__assert_fail@plt+0x7ff0>
   197a8:	cmp	r0, #34	; 0x22
   197ac:	bne	19f08 <__assert_fail@plt+0x8708>
   197b0:	mov	sl, #1
   197b4:	cmp	r9, #0
   197b8:	bne	197fc <__assert_fail@plt+0x7ffc>
   197bc:	b	19f00 <__assert_fail@plt+0x8700>
   197c0:	cmp	r9, #0
   197c4:	beq	19f08 <__assert_fail@plt+0x8708>
   197c8:	ldrb	r1, [r7]
   197cc:	cmp	r1, #0
   197d0:	beq	19f08 <__assert_fail@plt+0x8708>
   197d4:	mov	r0, r9
   197d8:	bl	1165c <strchr@plt>
   197dc:	cmp	r0, #0
   197e0:	beq	19f08 <__assert_fail@plt+0x8708>
   197e4:	mov	r4, #1
   197e8:	mov	sl, #0
   197ec:	b	197fc <__assert_fail@plt+0x7ffc>
   197f0:	mov	sl, r0
   197f4:	cmp	r9, #0
   197f8:	beq	19f00 <__assert_fail@plt+0x8700>
   197fc:	ldrb	r7, [r5]
   19800:	cmp	r7, #0
   19804:	beq	19f00 <__assert_fail@plt+0x8700>
   19808:	mov	r0, r9
   1980c:	mov	r1, r7
   19810:	bl	1165c <strchr@plt>
   19814:	cmp	r0, #0
   19818:	beq	19a94 <__assert_fail@plt+0x8294>
   1981c:	sub	r0, r7, #69	; 0x45
   19820:	mov	lr, #1
   19824:	mov	r8, #1024	; 0x400
   19828:	cmp	r0, #47	; 0x2f
   1982c:	bhi	19948 <__assert_fail@plt+0x8148>
   19830:	add	r1, pc, #0
   19834:	ldr	pc, [r1, r0, lsl #2]
   19838:	strdeq	r9, [r1], -r8
   1983c:	andeq	r9, r1, r8, asr #18
   19840:	strdeq	r9, [r1], -r8
   19844:	andeq	r9, r1, r8, asr #18
   19848:	andeq	r9, r1, r8, asr #18
   1984c:	andeq	r9, r1, r8, asr #18
   19850:	strdeq	r9, [r1], -r8
   19854:	andeq	r9, r1, r8, asr #18
   19858:	strdeq	r9, [r1], -r8
   1985c:	andeq	r9, r1, r8, asr #18
   19860:	andeq	r9, r1, r8, asr #18
   19864:	strdeq	r9, [r1], -r8
   19868:	andeq	r9, r1, r8, asr #18
   1986c:	andeq	r9, r1, r8, asr #18
   19870:	andeq	r9, r1, r8, asr #18
   19874:	strdeq	r9, [r1], -r8
   19878:	andeq	r9, r1, r8, asr #18
   1987c:	andeq	r9, r1, r8, asr #18
   19880:	andeq	r9, r1, r8, asr #18
   19884:	andeq	r9, r1, r8, asr #18
   19888:	strdeq	r9, [r1], -r8
   1988c:	strdeq	r9, [r1], -r8
   19890:	andeq	r9, r1, r8, asr #18
   19894:	andeq	r9, r1, r8, asr #18
   19898:	andeq	r9, r1, r8, asr #18
   1989c:	andeq	r9, r1, r8, asr #18
   198a0:	andeq	r9, r1, r8, asr #18
   198a4:	andeq	r9, r1, r8, asr #18
   198a8:	andeq	r9, r1, r8, asr #18
   198ac:	andeq	r9, r1, r8, asr #18
   198b0:	andeq	r9, r1, r8, asr #18
   198b4:	andeq	r9, r1, r8, asr #18
   198b8:	andeq	r9, r1, r8, asr #18
   198bc:	andeq	r9, r1, r8, asr #18
   198c0:	strdeq	r9, [r1], -r8
   198c4:	andeq	r9, r1, r8, asr #18
   198c8:	andeq	r9, r1, r8, asr #18
   198cc:	andeq	r9, r1, r8, asr #18
   198d0:	strdeq	r9, [r1], -r8
   198d4:	andeq	r9, r1, r8, asr #18
   198d8:	strdeq	r9, [r1], -r8
   198dc:	andeq	r9, r1, r8, asr #18
   198e0:	andeq	r9, r1, r8, asr #18
   198e4:	andeq	r9, r1, r8, asr #18
   198e8:	andeq	r9, r1, r8, asr #18
   198ec:	andeq	r9, r1, r8, asr #18
   198f0:	andeq	r9, r1, r8, asr #18
   198f4:	strdeq	r9, [r1], -r8
   198f8:	mov	r0, r9
   198fc:	mov	r1, #48	; 0x30
   19900:	bl	1165c <strchr@plt>
   19904:	cmp	r0, #0
   19908:	beq	19944 <__assert_fail@plt+0x8144>
   1990c:	ldrb	r0, [r5, #1]
   19910:	cmp	r0, #66	; 0x42
   19914:	cmpne	r0, #68	; 0x44
   19918:	bne	19928 <__assert_fail@plt+0x8128>
   1991c:	mov	lr, #2
   19920:	mov	r8, #1000	; 0x3e8
   19924:	b	19948 <__assert_fail@plt+0x8148>
   19928:	cmp	r0, #105	; 0x69
   1992c:	bne	19944 <__assert_fail@plt+0x8144>
   19930:	ldrb	r0, [r5, #2]
   19934:	mov	lr, #1
   19938:	cmp	r0, #66	; 0x42
   1993c:	movweq	lr, #3
   19940:	b	19948 <__assert_fail@plt+0x8148>
   19944:	mov	lr, #1
   19948:	sub	r1, r7, #66	; 0x42
   1994c:	cmp	r1, #53	; 0x35
   19950:	bhi	19a94 <__assert_fail@plt+0x8294>
   19954:	add	r2, pc, #4
   19958:	mov	r0, #0
   1995c:	ldr	pc, [r2, r1, lsl #2]
   19960:	andeq	r9, r1, r8, asr #24
   19964:	muleq	r1, r4, sl
   19968:	muleq	r1, r4, sl
   1996c:	andeq	r9, r1, r4, ror #24
   19970:	muleq	r1, r4, sl
   19974:	andeq	r9, r1, r8, lsr sl
   19978:	muleq	r1, r4, sl
   1997c:	muleq	r1, r4, sl
   19980:	muleq	r1, r4, sl
   19984:	andeq	r9, r1, r0, lsr #21
   19988:	muleq	r1, r4, sl
   1998c:	andeq	r9, r1, r0, asr #21
   19990:	muleq	r1, r4, sl
   19994:	muleq	r1, r4, sl
   19998:	andeq	r9, r1, ip, lsl sp
   1999c:	muleq	r1, r4, sl
   199a0:	muleq	r1, r4, sl
   199a4:	muleq	r1, r4, sl
   199a8:	andeq	r9, r1, r0, lsl #22
   199ac:	muleq	r1, r4, sl
   199b0:	muleq	r1, r4, sl
   199b4:	muleq	r1, r4, sl
   199b8:	muleq	r1, r4, sl
   199bc:			; <UNDEFINED> instruction: 0x00019db8
   199c0:	andeq	r9, r1, r8, ror fp
   199c4:	muleq	r1, r4, sl
   199c8:	muleq	r1, r4, sl
   199cc:	muleq	r1, r4, sl
   199d0:	muleq	r1, r4, sl
   199d4:	muleq	r1, r4, sl
   199d8:	muleq	r1, r4, sl
   199dc:	muleq	r1, r4, sl
   199e0:			; <UNDEFINED> instruction: 0x00019eb0
   199e4:	andeq	r9, r1, r8, ror #29
   199e8:	muleq	r1, r4, sl
   199ec:	muleq	r1, r4, sl
   199f0:	muleq	r1, r4, sl
   199f4:	andeq	r9, r1, r8, lsr sl
   199f8:	muleq	r1, r4, sl
   199fc:	muleq	r1, r4, sl
   19a00:	muleq	r1, r4, sl
   19a04:	andeq	r9, r1, r0, lsr #21
   19a08:	muleq	r1, r4, sl
   19a0c:	andeq	r9, r1, r0, asr #21
   19a10:	muleq	r1, r4, sl
   19a14:	muleq	r1, r4, sl
   19a18:	muleq	r1, r4, sl
   19a1c:	muleq	r1, r4, sl
   19a20:	muleq	r1, r4, sl
   19a24:	muleq	r1, r4, sl
   19a28:	andeq	r9, r1, r0, lsl #22
   19a2c:	muleq	r1, r4, sl
   19a30:	muleq	r1, r4, sl
   19a34:	ldrdeq	r9, [r1], -r4
   19a38:	mvn	r0, #0
   19a3c:	mul	r1, r4, r8
   19a40:	mov	r7, #0
   19a44:	udiv	r0, r0, r8
   19a48:	cmp	r0, r4
   19a4c:	mvncc	r1, #0
   19a50:	cmp	r0, r1
   19a54:	mul	r2, r1, r8
   19a58:	mvncc	r2, #0
   19a5c:	cmp	r0, r2
   19a60:	mul	r3, r2, r8
   19a64:	mov	r2, #0
   19a68:	mvncc	r3, #0
   19a6c:	movwcc	r7, #1
   19a70:	cmp	r0, r1
   19a74:	mov	r1, #0
   19a78:	movwcc	r1, #1
   19a7c:	cmp	r0, r4
   19a80:	mov	r4, r3
   19a84:	movwcc	r2, #1
   19a88:	orr	r0, r2, r1
   19a8c:	orr	r0, r0, r7
   19a90:	b	19ee8 <__assert_fail@plt+0x86e8>
   19a94:	ldr	r0, [sp, #12]
   19a98:	orr	sl, sl, #2
   19a9c:	b	19f04 <__assert_fail@plt+0x8704>
   19aa0:	mvn	r0, #0
   19aa4:	mul	r1, r4, r8
   19aa8:	udiv	r0, r0, r8
   19aac:	cmp	r0, r4
   19ab0:	mov	r0, #0
   19ab4:	mvncc	r1, #0
   19ab8:	movwcc	r0, #1
   19abc:	b	19ee4 <__assert_fail@plt+0x86e4>
   19ac0:	mvn	r0, #0
   19ac4:	mul	r1, r4, r8
   19ac8:	mov	r3, #0
   19acc:	udiv	r0, r0, r8
   19ad0:	cmp	r0, r4
   19ad4:	mvncc	r1, #0
   19ad8:	cmp	r0, r1
   19adc:	mul	r2, r1, r8
   19ae0:	mov	r1, #0
   19ae4:	mvncc	r2, #0
   19ae8:	movwcc	r3, #1
   19aec:	cmp	r0, r4
   19af0:	movwcc	r1, #1
   19af4:	mov	r4, r2
   19af8:	orr	r0, r1, r3
   19afc:	b	19ee8 <__assert_fail@plt+0x86e8>
   19b00:	mvn	r0, #0
   19b04:	mul	r1, r4, r8
   19b08:	mov	r7, #0
   19b0c:	udiv	r0, r0, r8
   19b10:	cmp	r0, r4
   19b14:	mvncc	r1, #0
   19b18:	cmp	r0, r1
   19b1c:	mul	r2, r1, r8
   19b20:	mvncc	r2, #0
   19b24:	cmp	r0, r2
   19b28:	mul	r3, r2, r8
   19b2c:	mvncc	r3, #0
   19b30:	cmp	r0, r3
   19b34:	mul	ip, r3, r8
   19b38:	mov	r3, #0
   19b3c:	mvncc	ip, #0
   19b40:	movwcc	r7, #1
   19b44:	cmp	r0, r2
   19b48:	mov	r2, #0
   19b4c:	movwcc	r2, #1
   19b50:	cmp	r0, r1
   19b54:	mov	r1, #0
   19b58:	movwcc	r1, #1
   19b5c:	cmp	r0, r4
   19b60:	mov	r4, ip
   19b64:	movwcc	r3, #1
   19b68:	orr	r0, r3, r1
   19b6c:	orr	r0, r0, r2
   19b70:	orr	r0, r0, r7
   19b74:	b	19ee8 <__assert_fail@plt+0x86e8>
   19b78:	mvn	r0, #0
   19b7c:	str	lr, [sp, #8]
   19b80:	mul	lr, r4, r8
   19b84:	udiv	r0, r0, r8
   19b88:	cmp	r0, r4
   19b8c:	mvncc	lr, #0
   19b90:	cmp	r0, lr
   19b94:	mul	r9, lr, r8
   19b98:	mvncc	r9, #0
   19b9c:	cmp	r0, r9
   19ba0:	mul	r7, r9, r8
   19ba4:	mvncc	r7, #0
   19ba8:	cmp	r0, r7
   19bac:	mul	r3, r7, r8
   19bb0:	mvncc	r3, #0
   19bb4:	cmp	r0, r3
   19bb8:	mul	r1, r3, r8
   19bbc:	mvncc	r1, #0
   19bc0:	cmp	r0, r1
   19bc4:	mul	r2, r1, r8
   19bc8:	mvncc	r2, #0
   19bcc:	cmp	r0, r2
   19bd0:	mul	ip, r2, r8
   19bd4:	mov	r8, #0
   19bd8:	mov	r2, #0
   19bdc:	mvncc	ip, #0
   19be0:	movwcc	r8, #1
   19be4:	cmp	r0, r1
   19be8:	mov	r1, #0
   19bec:	movwcc	r1, #1
   19bf0:	cmp	r0, r3
   19bf4:	mov	r3, #0
   19bf8:	movwcc	r3, #1
   19bfc:	cmp	r0, r7
   19c00:	mov	r7, #0
   19c04:	movwcc	r7, #1
   19c08:	cmp	r0, r9
   19c0c:	mov	r9, #0
   19c10:	movwcc	r9, #1
   19c14:	cmp	r0, lr
   19c18:	mov	lr, #0
   19c1c:	movwcc	lr, #1
   19c20:	cmp	r0, r4
   19c24:	mov	r4, ip
   19c28:	movwcc	r2, #1
   19c2c:	orr	r0, r2, lr
   19c30:	ldr	lr, [sp, #8]
   19c34:	orr	r0, r0, r9
   19c38:	orr	r0, r0, r7
   19c3c:	orr	r0, r0, r3
   19c40:	orr	r0, r0, r1
   19c44:	b	19ea4 <__assert_fail@plt+0x86a4>
   19c48:	mov	r1, #0
   19c4c:	lsr	r0, r4, #22
   19c50:	cmp	r1, r4, lsr #22
   19c54:	lsl	r4, r4, #10
   19c58:	movwne	r0, #1
   19c5c:	mvnne	r4, #0
   19c60:	b	19ee8 <__assert_fail@plt+0x86e8>
   19c64:	mvn	r0, #0
   19c68:	mul	ip, r4, r8
   19c6c:	str	lr, [sp, #8]
   19c70:	mov	r9, #0
   19c74:	udiv	r0, r0, r8
   19c78:	cmp	r0, r4
   19c7c:	mvncc	ip, #0
   19c80:	cmp	r0, ip
   19c84:	mul	r2, ip, r8
   19c88:	mvncc	r2, #0
   19c8c:	cmp	r0, r2
   19c90:	mul	r3, r2, r8
   19c94:	mvncc	r3, #0
   19c98:	cmp	r0, r3
   19c9c:	mul	r7, r3, r8
   19ca0:	mvncc	r7, #0
   19ca4:	cmp	r0, r7
   19ca8:	mul	r1, r7, r8
   19cac:	mvncc	r1, #0
   19cb0:	cmp	r0, r1
   19cb4:	mul	lr, r1, r8
   19cb8:	mov	r8, #0
   19cbc:	mov	r1, #0
   19cc0:	mvncc	lr, #0
   19cc4:	movwcc	r8, #1
   19cc8:	cmp	r0, r7
   19ccc:	mov	r7, #0
   19cd0:	movwcc	r7, #1
   19cd4:	cmp	r0, r3
   19cd8:	mov	r3, #0
   19cdc:	movwcc	r3, #1
   19ce0:	cmp	r0, r2
   19ce4:	mov	r2, #0
   19ce8:	movwcc	r2, #1
   19cec:	cmp	r0, ip
   19cf0:	movwcc	r1, #1
   19cf4:	cmp	r0, r4
   19cf8:	mov	r4, lr
   19cfc:	ldr	lr, [sp, #8]
   19d00:	movwcc	r9, #1
   19d04:	orr	r0, r9, r1
   19d08:	orr	r0, r0, r2
   19d0c:	orr	r0, r0, r3
   19d10:	orr	r0, r0, r7
   19d14:	orr	r0, r0, r8
   19d18:	b	19ee8 <__assert_fail@plt+0x86e8>
   19d1c:	mvn	r0, #0
   19d20:	mul	r1, r4, r8
   19d24:	udiv	r0, r0, r8
   19d28:	cmp	r0, r4
   19d2c:	mvncc	r1, #0
   19d30:	cmp	r0, r1
   19d34:	mul	r2, r1, r8
   19d38:	mvncc	r2, #0
   19d3c:	cmp	r0, r2
   19d40:	mul	r3, r2, r8
   19d44:	mvncc	r3, #0
   19d48:	cmp	r0, r3
   19d4c:	mul	r7, r3, r8
   19d50:	mvncc	r7, #0
   19d54:	cmp	r0, r7
   19d58:	mul	ip, r7, r8
   19d5c:	mov	r8, lr
   19d60:	mov	lr, #0
   19d64:	mov	r7, #0
   19d68:	mvncc	ip, #0
   19d6c:	movwcc	lr, #1
   19d70:	cmp	r0, r3
   19d74:	mov	r3, #0
   19d78:	movwcc	r3, #1
   19d7c:	cmp	r0, r2
   19d80:	mov	r2, #0
   19d84:	movwcc	r2, #1
   19d88:	cmp	r0, r1
   19d8c:	mov	r1, #0
   19d90:	movwcc	r1, #1
   19d94:	cmp	r0, r4
   19d98:	mov	r4, ip
   19d9c:	movwcc	r7, #1
   19da0:	orr	r0, r7, r1
   19da4:	orr	r0, r0, r2
   19da8:	orr	r0, r0, r3
   19dac:	orr	r0, r0, lr
   19db0:	mov	lr, r8
   19db4:	b	19ee8 <__assert_fail@plt+0x86e8>
   19db8:	mvn	r0, #0
   19dbc:	str	lr, [sp, #8]
   19dc0:	mul	lr, r4, r8
   19dc4:	udiv	r0, r0, r8
   19dc8:	cmp	r0, r4
   19dcc:	mvncc	lr, #0
   19dd0:	cmp	r0, lr
   19dd4:	mul	r9, lr, r8
   19dd8:	mvncc	r9, #0
   19ddc:	cmp	r0, r9
   19de0:	mul	r7, r9, r8
   19de4:	mvncc	r7, #0
   19de8:	cmp	r0, r7
   19dec:	mul	r3, r7, r8
   19df0:	mvncc	r3, #0
   19df4:	cmp	r0, r3
   19df8:	mul	r1, r3, r8
   19dfc:	mvncc	r1, #0
   19e00:	cmp	r0, r1
   19e04:	mul	r2, r1, r8
   19e08:	mvncc	r2, #0
   19e0c:	cmp	r0, r2
   19e10:	mul	ip, r2, r8
   19e14:	mvncc	ip, #0
   19e18:	cmp	r0, ip
   19e1c:	mul	r8, ip, r8
   19e20:	mov	ip, #0
   19e24:	mvncc	r8, #0
   19e28:	str	r8, [sp, #4]
   19e2c:	mov	r8, #0
   19e30:	movwcc	r8, #1
   19e34:	cmp	r0, r2
   19e38:	mov	r2, #0
   19e3c:	movwcc	r2, #1
   19e40:	cmp	r0, r1
   19e44:	mov	r1, #0
   19e48:	movwcc	r1, #1
   19e4c:	cmp	r0, r3
   19e50:	mov	r3, #0
   19e54:	movwcc	r3, #1
   19e58:	cmp	r0, r7
   19e5c:	mov	r7, #0
   19e60:	movwcc	r7, #1
   19e64:	cmp	r0, r9
   19e68:	mov	r9, #0
   19e6c:	movwcc	r9, #1
   19e70:	cmp	r0, lr
   19e74:	mov	lr, #0
   19e78:	movwcc	lr, #1
   19e7c:	cmp	r0, r4
   19e80:	ldr	r4, [sp, #4]
   19e84:	movwcc	ip, #1
   19e88:	orr	r0, ip, lr
   19e8c:	ldr	lr, [sp, #8]
   19e90:	orr	r0, r0, r9
   19e94:	orr	r0, r0, r7
   19e98:	orr	r0, r0, r3
   19e9c:	orr	r0, r0, r1
   19ea0:	orr	r0, r0, r2
   19ea4:	orr	r0, r0, r8
   19ea8:	and	r0, r0, #1
   19eac:	b	19ee8 <__assert_fail@plt+0x86e8>
   19eb0:	movw	r0, #65535	; 0xffff
   19eb4:	movt	r0, #63	; 0x3f
   19eb8:	orr	r1, r0, #4194304	; 0x400000
   19ebc:	mov	r0, #0
   19ec0:	cmp	r4, r1
   19ec4:	lsl	r4, r4, #9
   19ec8:	movwhi	r0, #1
   19ecc:	mvnhi	r4, #0
   19ed0:	b	19ee8 <__assert_fail@plt+0x86e8>
   19ed4:	cmp	r4, #0
   19ed8:	lsl	r1, r4, #1
   19edc:	lsr	r0, r4, #31
   19ee0:	mvnmi	r1, #0
   19ee4:	mov	r4, r1
   19ee8:	add	r1, r5, lr
   19eec:	orr	sl, r0, sl
   19ef0:	str	r1, [r6]
   19ef4:	ldrb	r1, [r5, lr]
   19ef8:	cmp	r1, #0
   19efc:	orrne	sl, sl, #2
   19f00:	ldr	r0, [sp, #12]
   19f04:	str	r4, [r0]
   19f08:	mov	r0, sl
   19f0c:	sub	sp, fp, #28
   19f10:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19f14:	movw	r0, #52275	; 0xcc33
   19f18:	movw	r1, #52313	; 0xcc59
   19f1c:	movw	r3, #52325	; 0xcc65
   19f20:	mov	r2, #84	; 0x54
   19f24:	movt	r0, #1
   19f28:	movt	r1, #1
   19f2c:	movt	r3, #1
   19f30:	bl	11800 <__assert_fail@plt>
   19f34:	clz	r2, r1
   19f38:	clz	r3, r0
   19f3c:	lsr	r2, r2, #5
   19f40:	lsr	r3, r3, #5
   19f44:	orrs	r2, r3, r2
   19f48:	movwne	r1, #1
   19f4c:	movwne	r0, #1
   19f50:	cmp	r1, #0
   19f54:	beq	19f84 <__assert_fail@plt+0x8784>
   19f58:	mvn	r2, #-2147483648	; 0x80000000
   19f5c:	udiv	r2, r2, r1
   19f60:	cmp	r2, r0
   19f64:	bcs	19f84 <__assert_fail@plt+0x8784>
   19f68:	push	{fp, lr}
   19f6c:	mov	fp, sp
   19f70:	bl	11680 <__errno_location@plt>
   19f74:	mov	r1, #12
   19f78:	str	r1, [r0]
   19f7c:	mov	r0, #0
   19f80:	pop	{fp, pc}
   19f84:	b	11434 <calloc@plt>
   19f88:	sub	sp, sp, #8
   19f8c:	push	{r4, r5, r6, r7, fp, lr}
   19f90:	add	fp, sp, #16
   19f94:	sub	sp, sp, #8
   19f98:	mov	r5, r0
   19f9c:	add	r0, fp, #8
   19fa0:	cmp	r1, #11
   19fa4:	str	r2, [fp, #8]
   19fa8:	str	r3, [fp, #12]
   19fac:	str	r0, [sp, #4]
   19fb0:	bhi	19fec <__assert_fail@plt+0x87ec>
   19fb4:	mov	r0, #1
   19fb8:	movw	r2, #1300	; 0x514
   19fbc:	tst	r2, r0, lsl r1
   19fc0:	bne	1a0ac <__assert_fail@plt+0x88ac>
   19fc4:	movw	r2, #2570	; 0xa0a
   19fc8:	tst	r2, r0, lsl r1
   19fcc:	bne	1a014 <__assert_fail@plt+0x8814>
   19fd0:	cmp	r1, #0
   19fd4:	bne	19fec <__assert_fail@plt+0x87ec>
   19fd8:	ldr	r0, [sp, #4]
   19fdc:	add	r1, r0, #4
   19fe0:	str	r1, [sp, #4]
   19fe4:	mov	r1, #0
   19fe8:	b	1a0b8 <__assert_fail@plt+0x88b8>
   19fec:	sub	r0, r1, #1024	; 0x400
   19ff0:	cmp	r0, #10
   19ff4:	bhi	1a0ac <__assert_fail@plt+0x88ac>
   19ff8:	mov	r2, #1
   19ffc:	movw	r3, #645	; 0x285
   1a000:	tst	r3, r2, lsl r0
   1a004:	bne	1a0ac <__assert_fail@plt+0x88ac>
   1a008:	movw	r3, #1282	; 0x502
   1a00c:	tst	r3, r2, lsl r0
   1a010:	beq	1a020 <__assert_fail@plt+0x8820>
   1a014:	mov	r0, r5
   1a018:	bl	11710 <fcntl64@plt>
   1a01c:	b	1a0c4 <__assert_fail@plt+0x88c4>
   1a020:	cmp	r0, #6
   1a024:	bne	1a0ac <__assert_fail@plt+0x88ac>
   1a028:	ldr	r0, [sp, #4]
   1a02c:	movw	r7, #54248	; 0xd3e8
   1a030:	movt	r7, #2
   1a034:	add	r1, r0, #4
   1a038:	str	r1, [sp, #4]
   1a03c:	ldr	r6, [r0]
   1a040:	ldr	r0, [r7]
   1a044:	cmp	r0, #0
   1a048:	bmi	1a0e8 <__assert_fail@plt+0x88e8>
   1a04c:	mov	r0, r5
   1a050:	movw	r1, #1030	; 0x406
   1a054:	mov	r2, r6
   1a058:	bl	11710 <fcntl64@plt>
   1a05c:	mov	r4, r0
   1a060:	cmn	r0, #1
   1a064:	bgt	1a0dc <__assert_fail@plt+0x88dc>
   1a068:	bl	11680 <__errno_location@plt>
   1a06c:	ldr	r0, [r0]
   1a070:	cmp	r0, #22
   1a074:	bne	1a0dc <__assert_fail@plt+0x88dc>
   1a078:	mov	r0, r5
   1a07c:	mov	r1, #0
   1a080:	mov	r2, r6
   1a084:	bl	11710 <fcntl64@plt>
   1a088:	mov	r4, r0
   1a08c:	cmp	r0, #0
   1a090:	bmi	1a0c8 <__assert_fail@plt+0x88c8>
   1a094:	mvn	r0, #0
   1a098:	str	r0, [r7]
   1a09c:	mov	r0, #1
   1a0a0:	cmp	r0, #0
   1a0a4:	bne	1a114 <__assert_fail@plt+0x8914>
   1a0a8:	b	1a0c8 <__assert_fail@plt+0x88c8>
   1a0ac:	ldr	r0, [sp, #4]
   1a0b0:	add	r2, r0, #4
   1a0b4:	str	r2, [sp, #4]
   1a0b8:	ldr	r2, [r0]
   1a0bc:	mov	r0, r5
   1a0c0:	bl	11710 <fcntl64@plt>
   1a0c4:	mov	r4, r0
   1a0c8:	mov	r0, r4
   1a0cc:	sub	sp, fp, #16
   1a0d0:	pop	{r4, r5, r6, r7, fp, lr}
   1a0d4:	add	sp, sp, #8
   1a0d8:	bx	lr
   1a0dc:	mov	r0, #1
   1a0e0:	str	r0, [r7]
   1a0e4:	b	1a0c8 <__assert_fail@plt+0x88c8>
   1a0e8:	mov	r0, r5
   1a0ec:	mov	r1, #0
   1a0f0:	mov	r2, r6
   1a0f4:	bl	11710 <fcntl64@plt>
   1a0f8:	mov	r4, r0
   1a0fc:	ldr	r0, [r7]
   1a100:	add	r0, r0, #1
   1a104:	clz	r0, r0
   1a108:	lsr	r0, r0, #5
   1a10c:	cmp	r0, #0
   1a110:	beq	1a0c8 <__assert_fail@plt+0x88c8>
   1a114:	cmp	r4, #0
   1a118:	bmi	1a0c8 <__assert_fail@plt+0x88c8>
   1a11c:	mov	r0, r4
   1a120:	mov	r1, #1
   1a124:	bl	11710 <fcntl64@plt>
   1a128:	cmp	r0, #0
   1a12c:	bmi	1a148 <__assert_fail@plt+0x8948>
   1a130:	orr	r2, r0, #1
   1a134:	mov	r0, r4
   1a138:	mov	r1, #2
   1a13c:	bl	11710 <fcntl64@plt>
   1a140:	cmn	r0, #1
   1a144:	bne	1a0c8 <__assert_fail@plt+0x88c8>
   1a148:	bl	11680 <__errno_location@plt>
   1a14c:	ldr	r6, [r0]
   1a150:	mov	r5, r0
   1a154:	mov	r0, r4
   1a158:	bl	117e8 <close@plt>
   1a15c:	str	r6, [r5]
   1a160:	mvn	r4, #0
   1a164:	b	1a0c8 <__assert_fail@plt+0x88c8>
   1a168:	push	{r4, sl, fp, lr}
   1a16c:	add	fp, sp, #8
   1a170:	sub	sp, sp, #8
   1a174:	mov	r4, r0
   1a178:	cmp	r0, #0
   1a17c:	beq	1a1b4 <__assert_fail@plt+0x89b4>
   1a180:	mov	r0, r4
   1a184:	bl	115f0 <__freading@plt>
   1a188:	cmp	r0, #0
   1a18c:	beq	1a1b4 <__assert_fail@plt+0x89b4>
   1a190:	ldrb	r0, [r4, #1]
   1a194:	tst	r0, #1
   1a198:	beq	1a1b4 <__assert_fail@plt+0x89b4>
   1a19c:	mov	r0, #1
   1a1a0:	mov	r2, #0
   1a1a4:	mov	r3, #0
   1a1a8:	str	r0, [sp]
   1a1ac:	mov	r0, r4
   1a1b0:	bl	1a22c <__assert_fail@plt+0x8a2c>
   1a1b4:	mov	r0, r4
   1a1b8:	sub	sp, fp, #8
   1a1bc:	pop	{r4, sl, fp, lr}
   1a1c0:	b	11470 <fflush@plt>
   1a1c4:	ldrd	r2, [r0, #16]
   1a1c8:	mov	r1, #0
   1a1cc:	cmp	r3, r2
   1a1d0:	bhi	1a1fc <__assert_fail@plt+0x89fc>
   1a1d4:	ldrb	r3, [r0, #1]
   1a1d8:	ldmib	r0, {r1, r2}
   1a1dc:	sub	r1, r2, r1
   1a1e0:	mov	r2, #0
   1a1e4:	tst	r3, #1
   1a1e8:	beq	1a1f8 <__assert_fail@plt+0x89f8>
   1a1ec:	ldr	r2, [r0, #36]	; 0x24
   1a1f0:	ldr	r0, [r0, #44]	; 0x2c
   1a1f4:	sub	r2, r0, r2
   1a1f8:	add	r1, r1, r2
   1a1fc:	mov	r0, r1
   1a200:	bx	lr
   1a204:	push	{r4, r5, r6, sl, fp, lr}
   1a208:	add	fp, sp, #16
   1a20c:	mov	r4, r0
   1a210:	bl	11680 <__errno_location@plt>
   1a214:	ldr	r6, [r0]
   1a218:	mov	r5, r0
   1a21c:	mov	r0, r4
   1a220:	bl	11488 <free@plt>
   1a224:	str	r6, [r5]
   1a228:	pop	{r4, r5, r6, sl, fp, pc}
   1a22c:	push	{r4, r5, r6, r7, fp, lr}
   1a230:	add	fp, sp, #16
   1a234:	sub	sp, sp, #8
   1a238:	mov	r4, r0
   1a23c:	ldr	r0, [r0, #4]
   1a240:	mov	r5, r3
   1a244:	mov	r6, r2
   1a248:	ldr	r1, [r4, #8]
   1a24c:	cmp	r1, r0
   1a250:	bne	1a26c <__assert_fail@plt+0x8a6c>
   1a254:	ldrd	r0, [r4, #16]
   1a258:	cmp	r1, r0
   1a25c:	bne	1a26c <__assert_fail@plt+0x8a6c>
   1a260:	ldr	r0, [r4, #36]	; 0x24
   1a264:	cmp	r0, #0
   1a268:	beq	1a284 <__assert_fail@plt+0x8a84>
   1a26c:	mov	r0, r4
   1a270:	mov	r2, r6
   1a274:	mov	r3, r5
   1a278:	sub	sp, fp, #16
   1a27c:	pop	{r4, r5, r6, r7, fp, lr}
   1a280:	b	11704 <fseeko64@plt>
   1a284:	ldr	r7, [fp, #8]
   1a288:	mov	r0, r4
   1a28c:	bl	116c8 <fileno@plt>
   1a290:	mov	r2, r6
   1a294:	mov	r3, r5
   1a298:	str	r7, [sp]
   1a29c:	bl	11560 <lseek64@plt>
   1a2a0:	and	r2, r0, r1
   1a2a4:	cmn	r2, #1
   1a2a8:	beq	1a2c8 <__assert_fail@plt+0x8ac8>
   1a2ac:	strd	r0, [r4, #80]	; 0x50
   1a2b0:	ldr	r0, [r4]
   1a2b4:	bic	r0, r0, #16
   1a2b8:	str	r0, [r4]
   1a2bc:	mov	r0, #0
   1a2c0:	sub	sp, fp, #16
   1a2c4:	pop	{r4, r5, r6, r7, fp, pc}
   1a2c8:	mvn	r0, #0
   1a2cc:	sub	sp, fp, #16
   1a2d0:	pop	{r4, r5, r6, r7, fp, pc}
   1a2d4:	cmp	r0, #0
   1a2d8:	movweq	r0, #1
   1a2dc:	cmn	r0, #1
   1a2e0:	ble	1a2e8 <__assert_fail@plt+0x8ae8>
   1a2e4:	b	115d8 <malloc@plt>
   1a2e8:	push	{fp, lr}
   1a2ec:	mov	fp, sp
   1a2f0:	bl	11680 <__errno_location@plt>
   1a2f4:	mov	r1, #12
   1a2f8:	str	r1, [r0]
   1a2fc:	mov	r0, #0
   1a300:	pop	{fp, pc}
   1a304:	push	{r4, r5, r6, r7, fp, lr}
   1a308:	add	fp, sp, #16
   1a30c:	sub	sp, sp, #8
   1a310:	cmp	r0, #0
   1a314:	add	r5, sp, #4
   1a318:	mov	r7, r2
   1a31c:	mov	r4, r1
   1a320:	movne	r5, r0
   1a324:	mov	r0, r5
   1a328:	bl	1159c <mbrtowc@plt>
   1a32c:	mov	r6, r0
   1a330:	cmp	r7, #0
   1a334:	beq	1a35c <__assert_fail@plt+0x8b5c>
   1a338:	cmn	r6, #2
   1a33c:	bcc	1a35c <__assert_fail@plt+0x8b5c>
   1a340:	mov	r0, #0
   1a344:	bl	1a47c <__assert_fail@plt+0x8c7c>
   1a348:	cmp	r0, #0
   1a34c:	bne	1a35c <__assert_fail@plt+0x8b5c>
   1a350:	ldrb	r0, [r4]
   1a354:	mov	r6, #1
   1a358:	str	r0, [r5]
   1a35c:	mov	r0, r6
   1a360:	sub	sp, fp, #16
   1a364:	pop	{r4, r5, r6, r7, fp, pc}
   1a368:	push	{fp, lr}
   1a36c:	mov	fp, sp
   1a370:	cmp	r0, #0
   1a374:	beq	1a390 <__assert_fail@plt+0x8b90>
   1a378:	cmp	r1, #0
   1a37c:	beq	1a39c <__assert_fail@plt+0x8b9c>
   1a380:	cmn	r1, #1
   1a384:	ble	1a3a8 <__assert_fail@plt+0x8ba8>
   1a388:	pop	{fp, lr}
   1a38c:	b	1150c <realloc@plt>
   1a390:	mov	r0, r1
   1a394:	pop	{fp, lr}
   1a398:	b	1a2d4 <__assert_fail@plt+0x8ad4>
   1a39c:	bl	1a204 <__assert_fail@plt+0x8a04>
   1a3a0:	mov	r0, #0
   1a3a4:	pop	{fp, pc}
   1a3a8:	bl	11680 <__errno_location@plt>
   1a3ac:	mov	r1, #12
   1a3b0:	str	r1, [r0]
   1a3b4:	mov	r0, #0
   1a3b8:	pop	{fp, pc}
   1a3bc:	cmp	r2, #0
   1a3c0:	beq	1a3f0 <__assert_fail@plt+0x8bf0>
   1a3c4:	mvn	r3, #0
   1a3c8:	udiv	r3, r3, r2
   1a3cc:	cmp	r3, r1
   1a3d0:	bcs	1a3f0 <__assert_fail@plt+0x8bf0>
   1a3d4:	push	{fp, lr}
   1a3d8:	mov	fp, sp
   1a3dc:	bl	11680 <__errno_location@plt>
   1a3e0:	mov	r1, #12
   1a3e4:	str	r1, [r0]
   1a3e8:	mov	r0, #0
   1a3ec:	pop	{fp, pc}
   1a3f0:	mul	r1, r2, r1
   1a3f4:	b	1a368 <__assert_fail@plt+0x8b68>
   1a3f8:	push	{r4, r5, r6, sl, fp, lr}
   1a3fc:	add	fp, sp, #16
   1a400:	mov	r4, r0
   1a404:	bl	11590 <__fpending@plt>
   1a408:	mov	r5, r0
   1a40c:	mov	r0, r4
   1a410:	bl	11494 <ferror@plt>
   1a414:	mov	r6, r0
   1a418:	mov	r0, r4
   1a41c:	bl	116e0 <fclose@plt>
   1a420:	cmp	r6, #0
   1a424:	beq	1a448 <__assert_fail@plt+0x8c48>
   1a428:	mvn	r4, #0
   1a42c:	cmp	r0, #0
   1a430:	bne	1a474 <__assert_fail@plt+0x8c74>
   1a434:	bl	11680 <__errno_location@plt>
   1a438:	mov	r1, #0
   1a43c:	str	r1, [r0]
   1a440:	mov	r0, r4
   1a444:	pop	{r4, r5, r6, sl, fp, pc}
   1a448:	cmp	r0, #0
   1a44c:	mov	r4, r0
   1a450:	mvnne	r4, #0
   1a454:	cmp	r5, #0
   1a458:	bne	1a474 <__assert_fail@plt+0x8c74>
   1a45c:	cmp	r0, #0
   1a460:	beq	1a474 <__assert_fail@plt+0x8c74>
   1a464:	bl	11680 <__errno_location@plt>
   1a468:	ldr	r0, [r0]
   1a46c:	subs	r4, r0, #9
   1a470:	mvnne	r4, #0
   1a474:	mov	r0, r4
   1a478:	pop	{r4, r5, r6, sl, fp, pc}
   1a47c:	push	{r4, sl, fp, lr}
   1a480:	add	fp, sp, #8
   1a484:	sub	sp, sp, #264	; 0x108
   1a488:	add	r1, sp, #7
   1a48c:	movw	r2, #257	; 0x101
   1a490:	bl	1a720 <__assert_fail@plt+0x8f20>
   1a494:	mov	r4, #0
   1a498:	cmp	r0, #0
   1a49c:	bne	1a4dc <__assert_fail@plt+0x8cdc>
   1a4a0:	movw	r1, #52406	; 0xccb6
   1a4a4:	add	r0, sp, #7
   1a4a8:	mov	r2, #2
   1a4ac:	movt	r1, #1
   1a4b0:	bl	11638 <bcmp@plt>
   1a4b4:	cmp	r0, #0
   1a4b8:	beq	1a4dc <__assert_fail@plt+0x8cdc>
   1a4bc:	movw	r1, #52408	; 0xccb8
   1a4c0:	add	r0, sp, #7
   1a4c4:	mov	r2, #6
   1a4c8:	movt	r1, #1
   1a4cc:	bl	11638 <bcmp@plt>
   1a4d0:	cmp	r0, #0
   1a4d4:	mov	r4, r0
   1a4d8:	movwne	r4, #1
   1a4dc:	mov	r0, r4
   1a4e0:	sub	sp, fp, #8
   1a4e4:	pop	{r4, sl, fp, pc}
   1a4e8:	push	{fp, lr}
   1a4ec:	mov	fp, sp
   1a4f0:	mov	r0, #14
   1a4f4:	bl	1174c <nl_langinfo@plt>
   1a4f8:	movw	r1, #46407	; 0xb547
   1a4fc:	cmp	r0, #0
   1a500:	movt	r1, #1
   1a504:	movne	r1, r0
   1a508:	movw	r0, #52414	; 0xccbe
   1a50c:	ldrb	r2, [r1]
   1a510:	movt	r0, #1
   1a514:	cmp	r2, #0
   1a518:	movne	r0, r1
   1a51c:	pop	{fp, pc}
   1a520:	push	{r4, sl, fp, lr}
   1a524:	add	fp, sp, #8
   1a528:	mov	r4, #0
   1a52c:	adds	r0, r0, #16
   1a530:	adc	r1, r4, #0
   1a534:	rsb	r2, r1, #0
   1a538:	eors	r2, r2, r1
   1a53c:	movwne	r2, #1
   1a540:	cmp	r0, #0
   1a544:	bmi	1a564 <__assert_fail@plt+0x8d64>
   1a548:	cmp	r2, #0
   1a54c:	asreq	r2, r0, #31
   1a550:	eoreq	r3, r0, r0
   1a554:	andeq	r2, r2, #1
   1a558:	eoreq	r1, r1, r2
   1a55c:	orrseq	r1, r3, r1
   1a560:	beq	1a56c <__assert_fail@plt+0x8d6c>
   1a564:	mov	r0, r4
   1a568:	pop	{r4, sl, fp, pc}
   1a56c:	bl	115d8 <malloc@plt>
   1a570:	cmp	r0, #0
   1a574:	addne	r4, r0, #8
   1a578:	movne	r1, #8
   1a57c:	bfine	r4, r1, #0, #4
   1a580:	subne	r0, r4, r0
   1a584:	strbne	r0, [r4, #-1]
   1a588:	mov	r0, r4
   1a58c:	pop	{r4, sl, fp, pc}
   1a590:	push	{fp, lr}
   1a594:	mov	fp, sp
   1a598:	tst	r0, #7
   1a59c:	bne	1a5b8 <__assert_fail@plt+0x8db8>
   1a5a0:	tst	r0, #8
   1a5a4:	popeq	{fp, pc}
   1a5a8:	ldrb	r1, [r0, #-1]
   1a5ac:	sub	r0, r0, r1
   1a5b0:	pop	{fp, lr}
   1a5b4:	b	1a204 <__assert_fail@plt+0x8a04>
   1a5b8:	bl	117d0 <abort@plt>
   1a5bc:	push	{r4, sl, fp, lr}
   1a5c0:	add	fp, sp, #8
   1a5c4:	mov	r4, r0
   1a5c8:	bl	1147c <wcwidth@plt>
   1a5cc:	cmn	r0, #1
   1a5d0:	popgt	{r4, sl, fp, pc}
   1a5d4:	mov	r0, r4
   1a5d8:	bl	11524 <iswcntrl@plt>
   1a5dc:	clz	r0, r0
   1a5e0:	lsr	r0, r0, #5
   1a5e4:	pop	{r4, sl, fp, pc}
   1a5e8:	push	{r4, r5, r6, sl, fp, lr}
   1a5ec:	add	fp, sp, #16
   1a5f0:	mov	r4, r0
   1a5f4:	mov	r0, r1
   1a5f8:	mov	r5, r1
   1a5fc:	ldr	r1, [r0], #16
   1a600:	cmp	r1, r0
   1a604:	beq	1a610 <__assert_fail@plt+0x8e10>
   1a608:	mov	r6, r1
   1a60c:	b	1a620 <__assert_fail@plt+0x8e20>
   1a610:	ldr	r2, [r5, #4]
   1a614:	add	r6, r4, #16
   1a618:	mov	r0, r6
   1a61c:	bl	114ac <memcpy@plt>
   1a620:	str	r6, [r4]
   1a624:	ldr	r0, [r5, #4]
   1a628:	str	r0, [r4, #4]
   1a62c:	ldrb	r0, [r5, #8]
   1a630:	strb	r0, [r4, #8]
   1a634:	cmp	r0, #0
   1a638:	ldrne	r0, [r5, #12]
   1a63c:	strne	r0, [r4, #12]
   1a640:	pop	{r4, r5, r6, sl, fp, pc}
   1a644:	movw	r2, #52420	; 0xccc4
   1a648:	ubfx	r1, r0, #5, #3
   1a64c:	and	r0, r0, #31
   1a650:	movt	r2, #1
   1a654:	ldr	r1, [r2, r1, lsl #2]
   1a658:	mov	r2, #1
   1a65c:	and	r0, r1, r2, lsl r0
   1a660:	cmp	r0, #0
   1a664:	movwne	r0, #1
   1a668:	bx	lr
   1a66c:	push	{r4, r5, r6, sl, fp, lr}
   1a670:	add	fp, sp, #16
   1a674:	sub	sp, sp, #56	; 0x38
   1a678:	mov	r5, r0
   1a67c:	bl	11578 <__ctype_get_mb_cur_max@plt>
   1a680:	cmp	r0, #2
   1a684:	bcc	1a710 <__assert_fail@plt+0x8f10>
   1a688:	mov	r4, #0
   1a68c:	mov	r0, sp
   1a690:	str	r4, [sp, #8]
   1a694:	str	r4, [sp, #4]
   1a698:	strb	r4, [sp, #12]
   1a69c:	strb	r4, [sp]
   1a6a0:	str	r5, [sp, #16]
   1a6a4:	bl	169e4 <__assert_fail@plt+0x51e4>
   1a6a8:	ldrb	r0, [sp, #24]
   1a6ac:	cmp	r0, #0
   1a6b0:	beq	1a6c0 <__assert_fail@plt+0x8ec0>
   1a6b4:	ldr	r0, [sp, #28]
   1a6b8:	cmp	r0, #0
   1a6bc:	beq	1a704 <__assert_fail@plt+0x8f04>
   1a6c0:	mov	r6, #0
   1a6c4:	mov	r5, sp
   1a6c8:	mov	r4, #0
   1a6cc:	strb	r6, [sp, #12]
   1a6d0:	ldr	r0, [sp, #16]
   1a6d4:	ldr	r1, [sp, #20]
   1a6d8:	add	r0, r0, r1
   1a6dc:	str	r0, [sp, #16]
   1a6e0:	mov	r0, r5
   1a6e4:	bl	169e4 <__assert_fail@plt+0x51e4>
   1a6e8:	ldrb	r1, [sp, #24]
   1a6ec:	ldr	r0, [sp, #28]
   1a6f0:	add	r4, r4, #1
   1a6f4:	cmp	r1, #0
   1a6f8:	beq	1a6cc <__assert_fail@plt+0x8ecc>
   1a6fc:	cmp	r0, #0
   1a700:	bne	1a6cc <__assert_fail@plt+0x8ecc>
   1a704:	mov	r0, r4
   1a708:	sub	sp, fp, #16
   1a70c:	pop	{r4, r5, r6, sl, fp, pc}
   1a710:	mov	r0, r5
   1a714:	sub	sp, fp, #16
   1a718:	pop	{r4, r5, r6, sl, fp, lr}
   1a71c:	b	11650 <strlen@plt>
   1a720:	push	{r4, r5, r6, r7, fp, lr}
   1a724:	add	fp, sp, #16
   1a728:	mov	r4, r1
   1a72c:	mov	r1, #0
   1a730:	mov	r6, r2
   1a734:	bl	1171c <setlocale@plt>
   1a738:	cmp	r0, #0
   1a73c:	beq	1a76c <__assert_fail@plt+0x8f6c>
   1a740:	mov	r7, r0
   1a744:	bl	11650 <strlen@plt>
   1a748:	cmp	r0, r6
   1a74c:	bcs	1a788 <__assert_fail@plt+0x8f88>
   1a750:	add	r2, r0, #1
   1a754:	mov	r0, r4
   1a758:	mov	r1, r7
   1a75c:	bl	114ac <memcpy@plt>
   1a760:	mov	r5, #0
   1a764:	mov	r0, r5
   1a768:	pop	{r4, r5, r6, r7, fp, pc}
   1a76c:	mov	r5, #22
   1a770:	cmp	r6, #0
   1a774:	beq	1a7b0 <__assert_fail@plt+0x8fb0>
   1a778:	mov	r0, #0
   1a77c:	strb	r0, [r4]
   1a780:	mov	r0, r5
   1a784:	pop	{r4, r5, r6, r7, fp, pc}
   1a788:	mov	r5, #34	; 0x22
   1a78c:	cmp	r6, #0
   1a790:	beq	1a7b0 <__assert_fail@plt+0x8fb0>
   1a794:	sub	r6, r6, #1
   1a798:	mov	r0, r4
   1a79c:	mov	r1, r7
   1a7a0:	mov	r2, r6
   1a7a4:	bl	114ac <memcpy@plt>
   1a7a8:	mov	r0, #0
   1a7ac:	strb	r0, [r4, r6]
   1a7b0:	mov	r0, r5
   1a7b4:	pop	{r4, r5, r6, r7, fp, pc}
   1a7b8:	mov	r1, #0
   1a7bc:	b	1171c <setlocale@plt>
   1a7c0:	mov	r1, #0
   1a7c4:	mov	r2, #3
   1a7c8:	b	19f88 <__assert_fail@plt+0x8788>
   1a7cc:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1a7d0:	mov	r7, r0
   1a7d4:	ldr	r6, [pc, #72]	; 1a824 <__assert_fail@plt+0x9024>
   1a7d8:	ldr	r5, [pc, #72]	; 1a828 <__assert_fail@plt+0x9028>
   1a7dc:	add	r6, pc, r6
   1a7e0:	add	r5, pc, r5
   1a7e4:	sub	r6, r6, r5
   1a7e8:	mov	r8, r1
   1a7ec:	mov	r9, r2
   1a7f0:	bl	11408 <fdopen@plt-0x20>
   1a7f4:	asrs	r6, r6, #2
   1a7f8:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   1a7fc:	mov	r4, #0
   1a800:	add	r4, r4, #1
   1a804:	ldr	r3, [r5], #4
   1a808:	mov	r2, r9
   1a80c:	mov	r1, r8
   1a810:	mov	r0, r7
   1a814:	blx	r3
   1a818:	cmp	r6, r4
   1a81c:	bne	1a800 <__assert_fail@plt+0x9000>
   1a820:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1a824:	andeq	r2, r1, r8, lsr #14
   1a828:	andeq	r2, r1, r0, lsr #14
   1a82c:	bx	lr
   1a830:	ldr	r3, [pc, #12]	; 1a844 <__assert_fail@plt+0x9044>
   1a834:	mov	r1, #0
   1a838:	add	r3, pc, r3
   1a83c:	ldr	r2, [r3]
   1a840:	b	11698 <__cxa_atexit@plt>
   1a844:	andeq	r2, r1, r4, lsr #18

Disassembly of section .fini:

0001a848 <.fini>:
   1a848:	push	{r3, lr}
   1a84c:	pop	{r3, pc}
