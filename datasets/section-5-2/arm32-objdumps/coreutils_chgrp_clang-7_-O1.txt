
../repos/coreutils/src/chgrp:     file format elf32-littlearm


Disassembly of section .init:

000111a4 <.init>:
   111a4:	push	{r3, lr}
   111a8:	bl	1153c <__assert_fail@plt+0x48>
   111ac:	pop	{r3, pc}

Disassembly of section .plt:

000111b0 <fstatfs64@plt-0x14>:
   111b0:	push	{lr}		; (str lr, [sp, #-4]!)
   111b4:	ldr	lr, [pc, #4]	; 111c0 <fstatfs64@plt-0x4>
   111b8:	add	lr, pc, lr
   111bc:	ldr	pc, [lr, #8]!
   111c0:	andeq	sl, r1, r0, asr #28

000111c4 <fstatfs64@plt>:
   111c4:	add	ip, pc, #0, 12
   111c8:	add	ip, ip, #106496	; 0x1a000
   111cc:	ldr	pc, [ip, #3648]!	; 0xe40

000111d0 <calloc@plt>:
   111d0:	add	ip, pc, #0, 12
   111d4:	add	ip, ip, #106496	; 0x1a000
   111d8:	ldr	pc, [ip, #3640]!	; 0xe38

000111dc <endgrent@plt>:
   111dc:	add	ip, pc, #0, 12
   111e0:	add	ip, ip, #106496	; 0x1a000
   111e4:	ldr	pc, [ip, #3632]!	; 0xe30

000111e8 <fputs_unlocked@plt>:
   111e8:	add	ip, pc, #0, 12
   111ec:	add	ip, ip, #106496	; 0x1a000
   111f0:	ldr	pc, [ip, #3624]!	; 0xe28

000111f4 <raise@plt>:
   111f4:	add	ip, pc, #0, 12
   111f8:	add	ip, ip, #106496	; 0x1a000
   111fc:	ldr	pc, [ip, #3616]!	; 0xe20

00011200 <strcmp@plt>:
   11200:	add	ip, pc, #0, 12
   11204:	add	ip, ip, #106496	; 0x1a000
   11208:	ldr	pc, [ip, #3608]!	; 0xe18

0001120c <getpwuid@plt>:
   1120c:	add	ip, pc, #0, 12
   11210:	add	ip, ip, #106496	; 0x1a000
   11214:	ldr	pc, [ip, #3600]!	; 0xe10

00011218 <fflush@plt>:
   11218:	add	ip, pc, #0, 12
   1121c:	add	ip, ip, #106496	; 0x1a000
   11220:	ldr	pc, [ip, #3592]!	; 0xe08

00011224 <memmove@plt>:
   11224:	add	ip, pc, #0, 12
   11228:	add	ip, ip, #106496	; 0x1a000
   1122c:	ldr	pc, [ip, #3584]!	; 0xe00

00011230 <free@plt>:
   11230:	add	ip, pc, #0, 12
   11234:	add	ip, ip, #106496	; 0x1a000
   11238:	ldr	pc, [ip, #3576]!	; 0xdf8

0001123c <_exit@plt>:
   1123c:	add	ip, pc, #0, 12
   11240:	add	ip, ip, #106496	; 0x1a000
   11244:	ldr	pc, [ip, #3568]!	; 0xdf0

00011248 <memcpy@plt>:
   11248:	add	ip, pc, #0, 12
   1124c:	add	ip, ip, #106496	; 0x1a000
   11250:	ldr	pc, [ip, #3560]!	; 0xde8

00011254 <mbsinit@plt>:
   11254:	add	ip, pc, #0, 12
   11258:	add	ip, ip, #106496	; 0x1a000
   1125c:	ldr	pc, [ip, #3552]!	; 0xde0

00011260 <memcmp@plt>:
   11260:	add	ip, pc, #0, 12
   11264:	add	ip, ip, #106496	; 0x1a000
   11268:	ldr	pc, [ip, #3544]!	; 0xdd8

0001126c <stpcpy@plt>:
   1126c:	add	ip, pc, #0, 12
   11270:	add	ip, ip, #106496	; 0x1a000
   11274:	ldr	pc, [ip, #3536]!	; 0xdd0

00011278 <dcgettext@plt>:
   11278:	add	ip, pc, #0, 12
   1127c:	add	ip, ip, #106496	; 0x1a000
   11280:	ldr	pc, [ip, #3528]!	; 0xdc8

00011284 <realloc@plt>:
   11284:	add	ip, pc, #0, 12
   11288:	add	ip, ip, #106496	; 0x1a000
   1128c:	ldr	pc, [ip, #3520]!	; 0xdc0

00011290 <textdomain@plt>:
   11290:	add	ip, pc, #0, 12
   11294:	add	ip, ip, #106496	; 0x1a000
   11298:	ldr	pc, [ip, #3512]!	; 0xdb8

0001129c <__fxstatat64@plt>:
   1129c:	add	ip, pc, #0, 12
   112a0:	add	ip, ip, #106496	; 0x1a000
   112a4:	ldr	pc, [ip, #3504]!	; 0xdb0

000112a8 <iswprint@plt>:
   112a8:	add	ip, pc, #0, 12
   112ac:	add	ip, ip, #106496	; 0x1a000
   112b0:	ldr	pc, [ip, #3496]!	; 0xda8

000112b4 <__fxstat64@plt>:
   112b4:	add	ip, pc, #0, 12
   112b8:	add	ip, ip, #106496	; 0x1a000
   112bc:	ldr	pc, [ip, #3488]!	; 0xda0

000112c0 <fwrite@plt>:
   112c0:	add	ip, pc, #0, 12
   112c4:	add	ip, ip, #106496	; 0x1a000
   112c8:	ldr	pc, [ip, #3480]!	; 0xd98

000112cc <lseek64@plt>:
   112cc:	add	ip, pc, #0, 12
   112d0:	add	ip, ip, #106496	; 0x1a000
   112d4:	ldr	pc, [ip, #3472]!	; 0xd90

000112d8 <__ctype_get_mb_cur_max@plt>:
   112d8:	add	ip, pc, #0, 12
   112dc:	add	ip, ip, #106496	; 0x1a000
   112e0:	ldr	pc, [ip, #3464]!	; 0xd88

000112e4 <__fpending@plt>:
   112e4:	add	ip, pc, #0, 12
   112e8:	add	ip, ip, #106496	; 0x1a000
   112ec:	ldr	pc, [ip, #3456]!	; 0xd80

000112f0 <ferror_unlocked@plt>:
   112f0:	add	ip, pc, #0, 12
   112f4:	add	ip, ip, #106496	; 0x1a000
   112f8:	ldr	pc, [ip, #3448]!	; 0xd78

000112fc <mbrtowc@plt>:
   112fc:	add	ip, pc, #0, 12
   11300:	add	ip, ip, #106496	; 0x1a000
   11304:	ldr	pc, [ip, #3440]!	; 0xd70

00011308 <error@plt>:
   11308:	add	ip, pc, #0, 12
   1130c:	add	ip, ip, #106496	; 0x1a000
   11310:	ldr	pc, [ip, #3432]!	; 0xd68

00011314 <open64@plt>:
   11314:	add	ip, pc, #0, 12
   11318:	add	ip, ip, #106496	; 0x1a000
   1131c:	ldr	pc, [ip, #3424]!	; 0xd60

00011320 <malloc@plt>:
   11320:	add	ip, pc, #0, 12
   11324:	add	ip, ip, #106496	; 0x1a000
   11328:	ldr	pc, [ip, #3416]!	; 0xd58

0001132c <__libc_start_main@plt>:
   1132c:	add	ip, pc, #0, 12
   11330:	add	ip, ip, #106496	; 0x1a000
   11334:	ldr	pc, [ip, #3408]!	; 0xd50

00011338 <__freading@plt>:
   11338:	add	ip, pc, #0, 12
   1133c:	add	ip, ip, #106496	; 0x1a000
   11340:	ldr	pc, [ip, #3400]!	; 0xd48

00011344 <__gmon_start__@plt>:
   11344:	add	ip, pc, #0, 12
   11348:	add	ip, ip, #106496	; 0x1a000
   1134c:	ldr	pc, [ip, #3392]!	; 0xd40

00011350 <getopt_long@plt>:
   11350:	add	ip, pc, #0, 12
   11354:	add	ip, ip, #106496	; 0x1a000
   11358:	ldr	pc, [ip, #3384]!	; 0xd38

0001135c <__ctype_b_loc@plt>:
   1135c:	add	ip, pc, #0, 12
   11360:	add	ip, ip, #106496	; 0x1a000
   11364:	ldr	pc, [ip, #3376]!	; 0xd30

00011368 <exit@plt>:
   11368:	add	ip, pc, #0, 12
   1136c:	add	ip, ip, #106496	; 0x1a000
   11370:	ldr	pc, [ip, #3368]!	; 0xd28

00011374 <strlen@plt>:
   11374:	add	ip, pc, #0, 12
   11378:	add	ip, ip, #106496	; 0x1a000
   1137c:	ldr	pc, [ip, #3360]!	; 0xd20

00011380 <strchr@plt>:
   11380:	add	ip, pc, #0, 12
   11384:	add	ip, ip, #106496	; 0x1a000
   11388:	ldr	pc, [ip, #3352]!	; 0xd18

0001138c <openat64@plt>:
   1138c:	add	ip, pc, #0, 12
   11390:	add	ip, ip, #106496	; 0x1a000
   11394:	ldr	pc, [ip, #3344]!	; 0xd10

00011398 <fchown@plt>:
   11398:	add	ip, pc, #0, 12
   1139c:	add	ip, ip, #106496	; 0x1a000
   113a0:	ldr	pc, [ip, #3336]!	; 0xd08

000113a4 <__errno_location@plt>:
   113a4:	add	ip, pc, #0, 12
   113a8:	add	ip, ip, #106496	; 0x1a000
   113ac:	ldr	pc, [ip, #3328]!	; 0xd00

000113b0 <__cxa_atexit@plt>:
   113b0:	add	ip, pc, #0, 12
   113b4:	add	ip, ip, #106496	; 0x1a000
   113b8:	ldr	pc, [ip, #3320]!	; 0xcf8

000113bc <memset@plt>:
   113bc:	add	ip, pc, #0, 12
   113c0:	add	ip, ip, #106496	; 0x1a000
   113c4:	ldr	pc, [ip, #3312]!	; 0xcf0

000113c8 <__printf_chk@plt>:
   113c8:	add	ip, pc, #0, 12
   113cc:	add	ip, ip, #106496	; 0x1a000
   113d0:	ldr	pc, [ip, #3304]!	; 0xce8

000113d4 <fileno@plt>:
   113d4:	add	ip, pc, #0, 12
   113d8:	add	ip, ip, #106496	; 0x1a000
   113dc:	ldr	pc, [ip, #3296]!	; 0xce0

000113e0 <strtoumax@plt>:
   113e0:	add	ip, pc, #0, 12
   113e4:	add	ip, ip, #106496	; 0x1a000
   113e8:	ldr	pc, [ip, #3288]!	; 0xcd8

000113ec <__fprintf_chk@plt>:
   113ec:	add	ip, pc, #0, 12
   113f0:	add	ip, ip, #106496	; 0x1a000
   113f4:	ldr	pc, [ip, #3280]!	; 0xcd0

000113f8 <fclose@plt>:
   113f8:	add	ip, pc, #0, 12
   113fc:	add	ip, ip, #106496	; 0x1a000
   11400:	ldr	pc, [ip, #3272]!	; 0xcc8

00011404 <fseeko64@plt>:
   11404:	add	ip, pc, #0, 12
   11408:	add	ip, ip, #106496	; 0x1a000
   1140c:	ldr	pc, [ip, #3264]!	; 0xcc0

00011410 <fcntl64@plt>:
   11410:	add	ip, pc, #0, 12
   11414:	add	ip, ip, #106496	; 0x1a000
   11418:	ldr	pc, [ip, #3256]!	; 0xcb8

0001141c <setlocale@plt>:
   1141c:	add	ip, pc, #0, 12
   11420:	add	ip, ip, #106496	; 0x1a000
   11424:	ldr	pc, [ip, #3248]!	; 0xcb0

00011428 <strrchr@plt>:
   11428:	add	ip, pc, #0, 12
   1142c:	add	ip, ip, #106496	; 0x1a000
   11430:	ldr	pc, [ip, #3240]!	; 0xca8

00011434 <nl_langinfo@plt>:
   11434:	add	ip, pc, #0, 12
   11438:	add	ip, ip, #106496	; 0x1a000
   1143c:	ldr	pc, [ip, #3232]!	; 0xca0

00011440 <readdir64@plt>:
   11440:	add	ip, pc, #0, 12
   11444:	add	ip, ip, #106496	; 0x1a000
   11448:	ldr	pc, [ip, #3224]!	; 0xc98

0001144c <fdopendir@plt>:
   1144c:	add	ip, pc, #0, 12
   11450:	add	ip, ip, #106496	; 0x1a000
   11454:	ldr	pc, [ip, #3216]!	; 0xc90

00011458 <dirfd@plt>:
   11458:	add	ip, pc, #0, 12
   1145c:	add	ip, ip, #106496	; 0x1a000
   11460:	ldr	pc, [ip, #3208]!	; 0xc88

00011464 <fchdir@plt>:
   11464:	add	ip, pc, #0, 12
   11468:	add	ip, ip, #106496	; 0x1a000
   1146c:	ldr	pc, [ip, #3200]!	; 0xc80

00011470 <qsort@plt>:
   11470:	add	ip, pc, #0, 12
   11474:	add	ip, ip, #106496	; 0x1a000
   11478:	ldr	pc, [ip, #3192]!	; 0xc78

0001147c <fchownat@plt>:
   1147c:	add	ip, pc, #0, 12
   11480:	add	ip, ip, #106496	; 0x1a000
   11484:	ldr	pc, [ip, #3184]!	; 0xc70

00011488 <bindtextdomain@plt>:
   11488:	add	ip, pc, #0, 12
   1148c:	add	ip, ip, #106496	; 0x1a000
   11490:	ldr	pc, [ip, #3176]!	; 0xc68

00011494 <__xstat64@plt>:
   11494:	add	ip, pc, #0, 12
   11498:	add	ip, ip, #106496	; 0x1a000
   1149c:	ldr	pc, [ip, #3168]!	; 0xc60

000114a0 <strncmp@plt>:
   114a0:	add	ip, pc, #0, 12
   114a4:	add	ip, ip, #106496	; 0x1a000
   114a8:	ldr	pc, [ip, #3160]!	; 0xc58

000114ac <abort@plt>:
   114ac:	add	ip, pc, #0, 12
   114b0:	add	ip, ip, #106496	; 0x1a000
   114b4:	ldr	pc, [ip, #3152]!	; 0xc50

000114b8 <close@plt>:
   114b8:	add	ip, pc, #0, 12
   114bc:	add	ip, ip, #106496	; 0x1a000
   114c0:	ldr	pc, [ip, #3144]!	; 0xc48

000114c4 <__lxstat64@plt>:
   114c4:	add	ip, pc, #0, 12
   114c8:	add	ip, ip, #106496	; 0x1a000
   114cc:	ldr	pc, [ip, #3136]!	; 0xc40

000114d0 <closedir@plt>:
   114d0:	add	ip, pc, #0, 12
   114d4:	add	ip, ip, #106496	; 0x1a000
   114d8:	ldr	pc, [ip, #3128]!	; 0xc38

000114dc <getgrgid@plt>:
   114dc:	add	ip, pc, #0, 12
   114e0:	add	ip, ip, #106496	; 0x1a000
   114e4:	ldr	pc, [ip, #3120]!	; 0xc30

000114e8 <getgrnam@plt>:
   114e8:	add	ip, pc, #0, 12
   114ec:	add	ip, ip, #106496	; 0x1a000
   114f0:	ldr	pc, [ip, #3112]!	; 0xc28

000114f4 <__assert_fail@plt>:
   114f4:	add	ip, pc, #0, 12
   114f8:	add	ip, ip, #106496	; 0x1a000
   114fc:	ldr	pc, [ip, #3104]!	; 0xc20

Disassembly of section .text:

00011500 <.text>:
   11500:	mov	fp, #0
   11504:	mov	lr, #0
   11508:	pop	{r1}		; (ldr r1, [sp], #4)
   1150c:	mov	r2, sp
   11510:	push	{r2}		; (str r2, [sp, #-4]!)
   11514:	push	{r0}		; (str r0, [sp, #-4]!)
   11518:	ldr	ip, [pc, #16]	; 11530 <__assert_fail@plt+0x3c>
   1151c:	push	{ip}		; (str ip, [sp, #-4]!)
   11520:	ldr	r0, [pc, #12]	; 11534 <__assert_fail@plt+0x40>
   11524:	ldr	r3, [pc, #12]	; 11538 <__assert_fail@plt+0x44>
   11528:	bl	1132c <__libc_start_main@plt>
   1152c:	bl	114ac <abort@plt>
   11530:	andeq	r9, r1, r0, lsl #22
   11534:	andeq	r1, r1, r0, asr r9
   11538:	andeq	r9, r1, r0, lsr #21
   1153c:	ldr	r3, [pc, #20]	; 11558 <__assert_fail@plt+0x64>
   11540:	ldr	r2, [pc, #20]	; 1155c <__assert_fail@plt+0x68>
   11544:	add	r3, pc, r3
   11548:	ldr	r2, [r3, r2]
   1154c:	cmp	r2, #0
   11550:	bxeq	lr
   11554:	b	11344 <__gmon_start__@plt>
   11558:			; <UNDEFINED> instruction: 0x0001aab4
   1155c:	andeq	r0, r0, r0, lsr #2
   11560:	ldr	r0, [pc, #24]	; 11580 <__assert_fail@plt+0x8c>
   11564:	ldr	r3, [pc, #24]	; 11584 <__assert_fail@plt+0x90>
   11568:	cmp	r3, r0
   1156c:	bxeq	lr
   11570:	ldr	r3, [pc, #16]	; 11588 <__assert_fail@plt+0x94>
   11574:	cmp	r3, #0
   11578:	bxeq	lr
   1157c:	bx	r3
   11580:	andeq	ip, r2, r8, ror r1
   11584:	andeq	ip, r2, r8, ror r1
   11588:	andeq	r0, r0, r0
   1158c:	ldr	r0, [pc, #36]	; 115b8 <__assert_fail@plt+0xc4>
   11590:	ldr	r1, [pc, #36]	; 115bc <__assert_fail@plt+0xc8>
   11594:	sub	r1, r1, r0
   11598:	asr	r1, r1, #2
   1159c:	add	r1, r1, r1, lsr #31
   115a0:	asrs	r1, r1, #1
   115a4:	bxeq	lr
   115a8:	ldr	r3, [pc, #16]	; 115c0 <__assert_fail@plt+0xcc>
   115ac:	cmp	r3, #0
   115b0:	bxeq	lr
   115b4:	bx	r3
   115b8:	andeq	ip, r2, r8, ror r1
   115bc:	andeq	ip, r2, r8, ror r1
   115c0:	andeq	r0, r0, r0
   115c4:	push	{r4, lr}
   115c8:	ldr	r4, [pc, #24]	; 115e8 <__assert_fail@plt+0xf4>
   115cc:	ldrb	r3, [r4]
   115d0:	cmp	r3, #0
   115d4:	popne	{r4, pc}
   115d8:	bl	11560 <__assert_fail@plt+0x6c>
   115dc:	mov	r3, #1
   115e0:	strb	r3, [r4]
   115e4:	pop	{r4, pc}
   115e8:	muleq	r2, r4, r1
   115ec:	b	1158c <__assert_fail@plt+0x98>
   115f0:	push	{fp, lr}
   115f4:	mov	fp, sp
   115f8:	mov	r4, r0
   115fc:	cmp	r0, #0
   11600:	bne	11788 <__assert_fail@plt+0x294>
   11604:	movw	r1, #39851	; 0x9bab
   11608:	movt	r1, #1
   1160c:	mov	r0, #0
   11610:	mov	r2, #5
   11614:	bl	11278 <dcgettext@plt>
   11618:	mov	r1, r0
   1161c:	movw	r5, #49592	; 0xc1b8
   11620:	movt	r5, #2
   11624:	ldr	r2, [r5]
   11628:	mov	r0, #1
   1162c:	mov	r3, r2
   11630:	bl	113c8 <__printf_chk@plt>
   11634:	movw	r1, #39936	; 0x9c00
   11638:	movt	r1, #1
   1163c:	mov	r0, #0
   11640:	mov	r2, #5
   11644:	bl	11278 <dcgettext@plt>
   11648:	movw	r6, #49548	; 0xc18c
   1164c:	movt	r6, #2
   11650:	ldr	r1, [r6]
   11654:	bl	111e8 <fputs_unlocked@plt>
   11658:	movw	r1, #40044	; 0x9c6c
   1165c:	movt	r1, #1
   11660:	mov	r0, #0
   11664:	mov	r2, #5
   11668:	bl	11278 <dcgettext@plt>
   1166c:	ldr	r1, [r6]
   11670:	bl	111e8 <fputs_unlocked@plt>
   11674:	movw	r1, #40245	; 0x9d35
   11678:	movt	r1, #1
   1167c:	mov	r0, #0
   11680:	mov	r2, #5
   11684:	bl	11278 <dcgettext@plt>
   11688:	ldr	r1, [r6]
   1168c:	bl	111e8 <fputs_unlocked@plt>
   11690:	movw	r1, #40476	; 0x9e1c
   11694:	movt	r1, #1
   11698:	mov	r0, #0
   1169c:	mov	r2, #5
   116a0:	bl	11278 <dcgettext@plt>
   116a4:	ldr	r1, [r6]
   116a8:	bl	111e8 <fputs_unlocked@plt>
   116ac:	movw	r1, #40595	; 0x9e93
   116b0:	movt	r1, #1
   116b4:	mov	r0, #0
   116b8:	mov	r2, #5
   116bc:	bl	11278 <dcgettext@plt>
   116c0:	ldr	r1, [r6]
   116c4:	bl	111e8 <fputs_unlocked@plt>
   116c8:	movw	r1, #40723	; 0x9f13
   116cc:	movt	r1, #1
   116d0:	mov	r0, #0
   116d4:	mov	r2, #5
   116d8:	bl	11278 <dcgettext@plt>
   116dc:	ldr	r1, [r6]
   116e0:	bl	111e8 <fputs_unlocked@plt>
   116e4:	movw	r1, #40829	; 0x9f7d
   116e8:	movt	r1, #1
   116ec:	mov	r0, #0
   116f0:	mov	r2, #5
   116f4:	bl	11278 <dcgettext@plt>
   116f8:	ldr	r1, [r6]
   116fc:	bl	111e8 <fputs_unlocked@plt>
   11700:	movw	r1, #40900	; 0x9fc4
   11704:	movt	r1, #1
   11708:	mov	r0, #0
   1170c:	mov	r2, #5
   11710:	bl	11278 <dcgettext@plt>
   11714:	ldr	r1, [r6]
   11718:	bl	111e8 <fputs_unlocked@plt>
   1171c:	movw	r1, #41365	; 0xa195
   11720:	movt	r1, #1
   11724:	mov	r0, #0
   11728:	mov	r2, #5
   1172c:	bl	11278 <dcgettext@plt>
   11730:	ldr	r1, [r6]
   11734:	bl	111e8 <fputs_unlocked@plt>
   11738:	movw	r1, #41410	; 0xa1c2
   1173c:	movt	r1, #1
   11740:	mov	r0, #0
   11744:	mov	r2, #5
   11748:	bl	11278 <dcgettext@plt>
   1174c:	ldr	r1, [r6]
   11750:	bl	111e8 <fputs_unlocked@plt>
   11754:	movw	r1, #41464	; 0xa1f8
   11758:	movt	r1, #1
   1175c:	mov	r0, #0
   11760:	mov	r2, #5
   11764:	bl	11278 <dcgettext@plt>
   11768:	mov	r1, r0
   1176c:	ldr	r2, [r5]
   11770:	mov	r0, #1
   11774:	mov	r3, r2
   11778:	bl	113c8 <__printf_chk@plt>
   1177c:	bl	117cc <__assert_fail@plt+0x2d8>
   11780:	mov	r0, r4
   11784:	bl	11368 <exit@plt>
   11788:	movw	r0, #49544	; 0xc188
   1178c:	movt	r0, #2
   11790:	ldr	r5, [r0]
   11794:	movw	r1, #39812	; 0x9b84
   11798:	movt	r1, #1
   1179c:	mov	r0, #0
   117a0:	mov	r2, #5
   117a4:	bl	11278 <dcgettext@plt>
   117a8:	mov	r2, r0
   117ac:	movw	r0, #49592	; 0xc1b8
   117b0:	movt	r0, #2
   117b4:	ldr	r3, [r0]
   117b8:	mov	r0, r5
   117bc:	mov	r1, #1
   117c0:	bl	113ec <__fprintf_chk@plt>
   117c4:	mov	r0, r4
   117c8:	bl	11368 <exit@plt>
   117cc:	push	{r4, r5, fp, lr}
   117d0:	add	fp, sp, #8
   117d4:	sub	sp, sp, #56	; 0x38
   117d8:	movw	r0, #42416	; 0xa5b0
   117dc:	movt	r0, #1
   117e0:	add	r1, r0, #32
   117e4:	mov	r5, sp
   117e8:	mov	r2, #48	; 0x30
   117ec:	vld1.64	{d16-d17}, [r1]
   117f0:	add	r1, r5, #32
   117f4:	add	r3, r0, #16
   117f8:	vld1.64	{d18-d19}, [r0], r2
   117fc:	vld1.64	{d20-d21}, [r3]
   11800:	vldr	d22, [r0]
   11804:	vst1.64	{d16-d17}, [r1]
   11808:	add	r0, r5, #16
   1180c:	vst1.64	{d20-d21}, [r0]
   11810:	mov	r0, r5
   11814:	vst1.64	{d18-d19}, [r0], r2
   11818:	vstr	d22, [r0]
   1181c:	ldr	r1, [sp]
   11820:	cmp	r1, #0
   11824:	beq	1184c <__assert_fail@plt+0x358>
   11828:	mov	r5, sp
   1182c:	movw	r4, #41597	; 0xa27d
   11830:	movt	r4, #1
   11834:	mov	r0, r4
   11838:	bl	11200 <strcmp@plt>
   1183c:	cmp	r0, #0
   11840:	ldrne	r1, [r5, #8]!
   11844:	cmpne	r1, #0
   11848:	bne	11834 <__assert_fail@plt+0x340>
   1184c:	ldr	r4, [r5, #4]
   11850:	movw	r1, #41888	; 0xa3a0
   11854:	movt	r1, #1
   11858:	mov	r0, #0
   1185c:	mov	r2, #5
   11860:	bl	11278 <dcgettext@plt>
   11864:	mov	r1, r0
   11868:	movw	r2, #41636	; 0xa2a4
   1186c:	movt	r2, #1
   11870:	movw	r3, #41911	; 0xa3b7
   11874:	movt	r3, #1
   11878:	mov	r0, #1
   1187c:	bl	113c8 <__printf_chk@plt>
   11880:	movw	r5, #41597	; 0xa27d
   11884:	movt	r5, #1
   11888:	cmp	r4, #0
   1188c:	moveq	r4, r5
   11890:	mov	r0, #5
   11894:	mov	r1, #0
   11898:	bl	1141c <setlocale@plt>
   1189c:	cmp	r0, #0
   118a0:	beq	118e0 <__assert_fail@plt+0x3ec>
   118a4:	movw	r1, #41951	; 0xa3df
   118a8:	movt	r1, #1
   118ac:	mov	r2, #3
   118b0:	bl	114a0 <strncmp@plt>
   118b4:	cmp	r0, #0
   118b8:	beq	118e0 <__assert_fail@plt+0x3ec>
   118bc:	movw	r1, #41955	; 0xa3e3
   118c0:	movt	r1, #1
   118c4:	mov	r0, #0
   118c8:	mov	r2, #5
   118cc:	bl	11278 <dcgettext@plt>
   118d0:	movw	r1, #49548	; 0xc18c
   118d4:	movt	r1, #2
   118d8:	ldr	r1, [r1]
   118dc:	bl	111e8 <fputs_unlocked@plt>
   118e0:	movw	r1, #42026	; 0xa42a
   118e4:	movt	r1, #1
   118e8:	mov	r0, #0
   118ec:	mov	r2, #5
   118f0:	bl	11278 <dcgettext@plt>
   118f4:	mov	r1, r0
   118f8:	movw	r2, #41911	; 0xa3b7
   118fc:	movt	r2, #1
   11900:	mov	r0, #1
   11904:	mov	r3, r5
   11908:	bl	113c8 <__printf_chk@plt>
   1190c:	movw	r1, #42053	; 0xa445
   11910:	movt	r1, #1
   11914:	mov	r0, #0
   11918:	mov	r2, #5
   1191c:	bl	11278 <dcgettext@plt>
   11920:	mov	r1, r0
   11924:	movw	r0, #41821	; 0xa35d
   11928:	movt	r0, #1
   1192c:	movw	r3, #41364	; 0xa194
   11930:	movt	r3, #1
   11934:	cmp	r4, r5
   11938:	moveq	r3, r0
   1193c:	mov	r0, #1
   11940:	mov	r2, r4
   11944:	bl	113c8 <__printf_chk@plt>
   11948:	sub	sp, fp, #8
   1194c:	pop	{r4, r5, fp, pc}
   11950:	push	{fp, lr}
   11954:	mov	fp, sp
   11958:	sub	sp, sp, #144	; 0x90
   1195c:	mov	r4, r1
   11960:	mov	r6, r0
   11964:	ldr	r0, [r1]
   11968:	bl	160d8 <__assert_fail@plt+0x4be4>
   1196c:	movw	r1, #41364	; 0xa194
   11970:	movt	r1, #1
   11974:	mov	r0, #6
   11978:	bl	1141c <setlocale@plt>
   1197c:	movw	r5, #41640	; 0xa2a8
   11980:	movt	r5, #1
   11984:	movw	r1, #41603	; 0xa283
   11988:	movt	r1, #1
   1198c:	mov	r0, r5
   11990:	bl	11488 <bindtextdomain@plt>
   11994:	mov	r0, r5
   11998:	bl	11290 <textdomain@plt>
   1199c:	movw	r0, #11804	; 0x2e1c
   119a0:	movt	r0, #1
   119a4:	bl	19b04 <__assert_fail@plt+0x8610>
   119a8:	sub	r0, fp, #24
   119ac:	bl	11f00 <__assert_fail@plt+0xa0c>
   119b0:	mov	r8, #0
   119b4:	mov	r0, #16
   119b8:	mvn	sl, #0
   119bc:	movw	r9, #41627	; 0xa29b
   119c0:	movt	r9, #1
   119c4:	movw	r5, #42208	; 0xa4e0
   119c8:	movt	r5, #1
   119cc:	b	119d4 <__assert_fail@plt+0x4e0>
   119d0:	mov	r0, r7
   119d4:	mov	r1, #0
   119d8:	str	r1, [sp, #12]
   119dc:	b	119ec <__assert_fail@plt+0x4f8>
   119e0:	mov	r0, #1
   119e4:	str	r0, [fp, #-24]	; 0xffffffe8
   119e8:	mov	r0, r7
   119ec:	mov	r7, r0
   119f0:	str	r8, [sp]
   119f4:	mov	r0, r6
   119f8:	mov	r1, r4
   119fc:	mov	r2, r9
   11a00:	mov	r3, r5
   11a04:	bl	11350 <getopt_long@plt>
   11a08:	cmp	r0, #71	; 0x47
   11a0c:	ble	11b8c <__assert_fail@plt+0x698>
   11a10:	sub	r1, r0, #72	; 0x48
   11a14:	cmp	r1, #46	; 0x2e
   11a18:	bhi	11aec <__assert_fail@plt+0x5f8>
   11a1c:	mov	r0, #17
   11a20:	add	r2, pc, #0
   11a24:	ldr	pc, [r2, r1, lsl #2]
   11a28:	andeq	r1, r1, ip, ror #19
   11a2c:	andeq	r1, r1, r4, asr #28
   11a30:	andeq	r1, r1, r4, asr #28
   11a34:	andeq	r1, r1, r4, asr #28
   11a38:	andeq	r1, r1, r4, ror #21
   11a3c:	andeq	r1, r1, r4, asr #28
   11a40:	andeq	r1, r1, r4, asr #28
   11a44:	andeq	r1, r1, r4, asr #28
   11a48:	andeq	r1, r1, ip, asr #22
   11a4c:	andeq	r1, r1, r4, asr #28
   11a50:	andeq	r1, r1, r4, asr fp
   11a54:	andeq	r1, r1, r4, asr #28
   11a58:	andeq	r1, r1, r4, asr #28
   11a5c:	andeq	r1, r1, r4, asr #28
   11a60:	andeq	r1, r1, r4, asr #28
   11a64:	andeq	r1, r1, r4, asr #28
   11a68:	andeq	r1, r1, r4, asr #28
   11a6c:	andeq	r1, r1, r4, asr #28
   11a70:	andeq	r1, r1, r4, asr #28
   11a74:	andeq	r1, r1, r4, asr #28
   11a78:	andeq	r1, r1, r4, asr #28
   11a7c:	andeq	r1, r1, r4, asr #28
   11a80:	andeq	r1, r1, r4, asr #28
   11a84:	andeq	r1, r1, r4, asr #28
   11a88:	andeq	r1, r1, r4, asr #28
   11a8c:	andeq	r1, r1, r4, asr #28
   11a90:	andeq	r1, r1, r4, asr #28
   11a94:	andeq	r1, r1, r0, ror #19
   11a98:	andeq	r1, r1, r4, asr #28
   11a9c:	andeq	r1, r1, r4, asr #28
   11aa0:	andeq	r1, r1, r4, ror #22
   11aa4:	andeq	r1, r1, r4, asr #28
   11aa8:	andeq	r1, r1, r4, ror fp
   11aac:	andeq	r1, r1, r4, asr #28
   11ab0:	andeq	r1, r1, r4, asr #28
   11ab4:	andeq	r1, r1, r4, asr #28
   11ab8:	andeq	r1, r1, r4, asr #28
   11abc:	andeq	r1, r1, r4, asr #28
   11ac0:	andeq	r1, r1, r4, asr #28
   11ac4:	andeq	r1, r1, r4, asr #28
   11ac8:	andeq	r1, r1, r4, asr #28
   11acc:	andeq	r1, r1, r4, asr #28
   11ad0:	andeq	r1, r1, r4, asr #28
   11ad4:	andeq	r1, r1, r4, asr #28
   11ad8:	andeq	r1, r1, r4, asr #28
   11adc:	andeq	r1, r1, r4, asr #28
   11ae0:	andeq	r1, r1, r0, lsl #23
   11ae4:	mov	r0, #2
   11ae8:	b	119ec <__assert_fail@plt+0x4f8>
   11aec:	sub	r0, r0, #256	; 0x100
   11af0:	cmp	r0, #3
   11af4:	bhi	11e44 <__assert_fail@plt+0x950>
   11af8:	add	r1, pc, #0
   11afc:	ldr	pc, [r1, r0, lsl #2]
   11b00:	andeq	r1, r1, r0, lsl fp
   11b04:	ldrdeq	r1, [r1], -r0
   11b08:	andeq	r1, r1, ip, lsl fp
   11b0c:	andeq	r1, r1, ip, lsr #22
   11b10:	mov	sl, #1
   11b14:	mov	r0, r7
   11b18:	b	119ec <__assert_fail@plt+0x4f8>
   11b1c:	mov	r0, #1
   11b20:	str	r0, [sp, #12]
   11b24:	mov	r0, r7
   11b28:	b	119ec <__assert_fail@plt+0x4f8>
   11b2c:	movw	r0, #49552	; 0xc190
   11b30:	movt	r0, #2
   11b34:	ldr	r0, [r0]
   11b38:	movw	r1, #49560	; 0xc198
   11b3c:	movt	r1, #2
   11b40:	str	r0, [r1]
   11b44:	mov	r0, r7
   11b48:	b	119ec <__assert_fail@plt+0x4f8>
   11b4c:	mov	r0, #16
   11b50:	b	119ec <__assert_fail@plt+0x4f8>
   11b54:	mov	r0, #1
   11b58:	strb	r0, [fp, #-20]	; 0xffffffec
   11b5c:	mov	r0, r7
   11b60:	b	119ec <__assert_fail@plt+0x4f8>
   11b64:	mov	r0, #1
   11b68:	strb	r0, [fp, #-11]
   11b6c:	mov	r0, r7
   11b70:	b	119ec <__assert_fail@plt+0x4f8>
   11b74:	mov	sl, #0
   11b78:	mov	r0, r7
   11b7c:	b	119ec <__assert_fail@plt+0x4f8>
   11b80:	str	r8, [fp, #-24]	; 0xffffffe8
   11b84:	mov	r0, r7
   11b88:	b	119ec <__assert_fail@plt+0x4f8>
   11b8c:	cmn	r0, #3
   11b90:	beq	11ba4 <__assert_fail@plt+0x6b0>
   11b94:	cmn	r0, #2
   11b98:	bne	11bf8 <__assert_fail@plt+0x704>
   11b9c:	mov	r0, #0
   11ba0:	bl	115f0 <__assert_fail@plt+0xfc>
   11ba4:	movw	r0, #49456	; 0xc130
   11ba8:	movt	r0, #2
   11bac:	ldr	r3, [r0]
   11bb0:	movw	r0, #49548	; 0xc18c
   11bb4:	movt	r0, #2
   11bb8:	ldr	r0, [r0]
   11bbc:	mov	r1, #0
   11bc0:	movw	r2, #41666	; 0xa2c2
   11bc4:	movt	r2, #1
   11bc8:	movw	r7, #41650	; 0xa2b2
   11bcc:	movt	r7, #1
   11bd0:	str	r7, [sp]
   11bd4:	str	r2, [sp, #4]
   11bd8:	str	r1, [sp, #8]
   11bdc:	movw	r1, #41597	; 0xa27d
   11be0:	movt	r1, #1
   11be4:	movw	r2, #41636	; 0xa2a4
   11be8:	movt	r2, #1
   11bec:	bl	18178 <__assert_fail@plt+0x6c84>
   11bf0:	mov	r0, #0
   11bf4:	bl	11368 <exit@plt>
   11bf8:	cmn	r0, #1
   11bfc:	bne	11e44 <__assert_fail@plt+0x950>
   11c00:	mov	r8, #16
   11c04:	ldrb	r0, [fp, #-20]	; 0xffffffec
   11c08:	cmp	r0, #0
   11c0c:	bne	11c18 <__assert_fail@plt+0x724>
   11c10:	mov	r0, sl
   11c14:	b	11c58 <__assert_fail@plt+0x764>
   11c18:	cmp	r7, #16
   11c1c:	bne	11c50 <__assert_fail@plt+0x75c>
   11c20:	mov	r0, #0
   11c24:	cmp	sl, #1
   11c28:	bne	11c58 <__assert_fail@plt+0x764>
   11c2c:	movw	r1, #41679	; 0xa2cf
   11c30:	movt	r1, #1
   11c34:	mov	r0, #0
   11c38:	mov	r2, #5
   11c3c:	bl	11278 <dcgettext@plt>
   11c40:	mov	r2, r0
   11c44:	mov	r0, #1
   11c48:	mov	r1, #0
   11c4c:	bl	11308 <error@plt>
   11c50:	mov	r0, sl
   11c54:	mov	r8, r7
   11c58:	cmp	r0, #0
   11c5c:	movwne	r0, #1
   11c60:	strb	r0, [fp, #-12]
   11c64:	movw	r0, #49560	; 0xc198
   11c68:	movt	r0, #2
   11c6c:	ldr	r0, [r0]
   11c70:	mov	r2, #2
   11c74:	cmp	r0, #0
   11c78:	movwne	r2, #1
   11c7c:	movw	r7, #49536	; 0xc180
   11c80:	movt	r7, #2
   11c84:	ldr	r1, [r7]
   11c88:	sub	r3, r6, r1
   11c8c:	cmp	r3, r2
   11c90:	bge	11cdc <__assert_fail@plt+0x7e8>
   11c94:	cmp	r1, r6
   11c98:	bge	11d08 <__assert_fail@plt+0x814>
   11c9c:	movw	r1, #41737	; 0xa309
   11ca0:	movt	r1, #1
   11ca4:	mov	r0, #0
   11ca8:	mov	r2, #5
   11cac:	bl	11278 <dcgettext@plt>
   11cb0:	mov	r5, r0
   11cb4:	add	r0, r4, r6, lsl #2
   11cb8:	ldr	r0, [r0, #-4]
   11cbc:	bl	17910 <__assert_fail@plt+0x641c>
   11cc0:	mov	r3, r0
   11cc4:	mov	r0, #0
   11cc8:	mov	r1, #0
   11ccc:	mov	r2, r5
   11cd0:	bl	11308 <error@plt>
   11cd4:	mov	r0, #1
   11cd8:	bl	115f0 <__assert_fail@plt+0xfc>
   11cdc:	cmp	r0, #0
   11ce0:	beq	11d34 <__assert_fail@plt+0x840>
   11ce4:	add	r1, sp, #16
   11ce8:	bl	19b1c <__assert_fail@plt+0x8628>
   11cec:	cmp	r0, #0
   11cf0:	bne	11dfc <__assert_fail@plt+0x908>
   11cf4:	ldr	r5, [sp, #44]	; 0x2c
   11cf8:	mov	r0, r5
   11cfc:	bl	11f48 <__assert_fail@plt+0xa54>
   11d00:	str	r0, [fp, #-4]
   11d04:	b	11d68 <__assert_fail@plt+0x874>
   11d08:	movw	r1, #41721	; 0xa2f9
   11d0c:	movt	r1, #1
   11d10:	mov	r0, #0
   11d14:	mov	r2, #5
   11d18:	bl	11278 <dcgettext@plt>
   11d1c:	mov	r2, r0
   11d20:	mov	r0, #0
   11d24:	mov	r1, #0
   11d28:	bl	11308 <error@plt>
   11d2c:	mov	r0, #1
   11d30:	bl	115f0 <__assert_fail@plt+0xfc>
   11d34:	add	r0, r1, #1
   11d38:	str	r0, [r7]
   11d3c:	ldr	r5, [r4, r1, lsl #2]
   11d40:	ldrb	r1, [r5]
   11d44:	mov	r0, #0
   11d48:	cmp	r1, #0
   11d4c:	beq	11d58 <__assert_fail@plt+0x864>
   11d50:	mov	r0, r5
   11d54:	bl	18610 <__assert_fail@plt+0x711c>
   11d58:	str	r0, [fp, #-4]
   11d5c:	mov	r0, r5
   11d60:	bl	11e4c <__assert_fail@plt+0x958>
   11d64:	mov	r5, r0
   11d68:	ldrb	r0, [fp, #-20]	; 0xffffffec
   11d6c:	cmp	r0, #0
   11d70:	beq	11dc8 <__assert_fail@plt+0x8d4>
   11d74:	ldr	r0, [sp, #12]
   11d78:	eor	r0, r0, #1
   11d7c:	tst	r0, #1
   11d80:	bne	11dc8 <__assert_fail@plt+0x8d4>
   11d84:	movw	r0, #49568	; 0xc1a0
   11d88:	movt	r0, #2
   11d8c:	bl	17d24 <__assert_fail@plt+0x6830>
   11d90:	str	r0, [fp, #-16]
   11d94:	cmp	r0, #0
   11d98:	bne	11dc8 <__assert_fail@plt+0x8d4>
   11d9c:	bl	113a4 <__errno_location@plt>
   11da0:	ldr	r4, [r0]
   11da4:	movw	r1, #41762	; 0xa322
   11da8:	movt	r1, #1
   11dac:	mov	r0, #0
   11db0:	mov	r2, #5
   11db4:	bl	11278 <dcgettext@plt>
   11db8:	mov	r5, r0
   11dbc:	movw	r1, #44607	; 0xae3f
   11dc0:	movt	r1, #1
   11dc4:	b	11e28 <__assert_fail@plt+0x934>
   11dc8:	ldr	r0, [r7]
   11dcc:	mvn	r1, #0
   11dd0:	str	r1, [sp]
   11dd4:	str	r1, [sp, #4]
   11dd8:	sub	r1, fp, #24
   11ddc:	str	r1, [sp, #8]
   11de0:	add	r0, r4, r0, lsl #2
   11de4:	orr	r1, r8, #1024	; 0x400
   11de8:	mvn	r2, #0
   11dec:	mov	r3, r5
   11df0:	bl	11fc8 <__assert_fail@plt+0xad4>
   11df4:	eor	r0, r0, #1
   11df8:	bl	11368 <exit@plt>
   11dfc:	bl	113a4 <__errno_location@plt>
   11e00:	ldr	r4, [r0]
   11e04:	movw	r1, #41762	; 0xa322
   11e08:	movt	r1, #1
   11e0c:	mov	r0, #0
   11e10:	mov	r2, #5
   11e14:	bl	11278 <dcgettext@plt>
   11e18:	mov	r5, r0
   11e1c:	movw	r0, #49560	; 0xc198
   11e20:	movt	r0, #2
   11e24:	ldr	r1, [r0]
   11e28:	mov	r0, #4
   11e2c:	bl	1771c <__assert_fail@plt+0x6228>
   11e30:	mov	r3, r0
   11e34:	mov	r0, #1
   11e38:	mov	r1, r4
   11e3c:	mov	r2, r5
   11e40:	bl	11308 <error@plt>
   11e44:	mov	r0, #1
   11e48:	bl	115f0 <__assert_fail@plt+0xfc>
   11e4c:	push	{r4, r5, fp, lr}
   11e50:	add	fp, sp, #8
   11e54:	sub	sp, sp, #16
   11e58:	mov	r4, r0
   11e5c:	ldrb	r0, [r0]
   11e60:	cmp	r0, #0
   11e64:	beq	11e80 <__assert_fail@plt+0x98c>
   11e68:	mov	r0, r4
   11e6c:	bl	114e8 <getgrnam@plt>
   11e70:	cmp	r0, #0
   11e74:	beq	11e88 <__assert_fail@plt+0x994>
   11e78:	ldr	r4, [r0, #8]
   11e7c:	b	11ef0 <__assert_fail@plt+0x9fc>
   11e80:	mvn	r4, #0
   11e84:	b	11ef4 <__assert_fail@plt+0xa00>
   11e88:	movw	r0, #41364	; 0xa194
   11e8c:	movt	r0, #1
   11e90:	str	r0, [sp]
   11e94:	add	r3, sp, #8
   11e98:	mov	r0, r4
   11e9c:	mov	r1, #0
   11ea0:	mov	r2, #10
   11ea4:	bl	186f0 <__assert_fail@plt+0x71fc>
   11ea8:	cmp	r0, #0
   11eac:	ldreq	r0, [sp, #12]
   11eb0:	cmpeq	r0, #0
   11eb4:	beq	11eec <__assert_fail@plt+0x9f8>
   11eb8:	movw	r1, #42188	; 0xa4cc
   11ebc:	movt	r1, #1
   11ec0:	mov	r0, #0
   11ec4:	mov	r2, #5
   11ec8:	bl	11278 <dcgettext@plt>
   11ecc:	mov	r5, r0
   11ed0:	mov	r0, r4
   11ed4:	bl	17910 <__assert_fail@plt+0x641c>
   11ed8:	mov	r3, r0
   11edc:	mov	r0, #1
   11ee0:	mov	r1, #0
   11ee4:	mov	r2, r5
   11ee8:	bl	11308 <error@plt>
   11eec:	ldr	r4, [sp, #8]
   11ef0:	bl	111dc <endgrent@plt>
   11ef4:	mov	r0, r4
   11ef8:	sub	sp, fp, #8
   11efc:	pop	{r4, r5, fp, pc}
   11f00:	mov	r1, #0
   11f04:	str	r1, [r0, #8]
   11f08:	mov	r2, #2
   11f0c:	str	r2, [r0]
   11f10:	strb	r1, [r0, #4]
   11f14:	mov	r2, #1
   11f18:	strh	r2, [r0, #12]
   11f1c:	str	r1, [r0, #16]
   11f20:	str	r1, [r0, #20]
   11f24:	bx	lr
   11f28:	push	{r4, sl, fp, lr}
   11f2c:	add	fp, sp, #8
   11f30:	mov	r4, r0
   11f34:	ldr	r0, [r0, #16]
   11f38:	bl	12f04 <__assert_fail@plt+0x1a10>
   11f3c:	ldr	r0, [r4, #20]
   11f40:	pop	{r4, sl, fp, lr}
   11f44:	b	12f04 <__assert_fail@plt+0x1a10>
   11f48:	push	{r4, sl, fp, lr}
   11f4c:	add	fp, sp, #8
   11f50:	sub	sp, sp, #24
   11f54:	mov	r4, r0
   11f58:	bl	114dc <getgrgid@plt>
   11f5c:	cmp	r0, #0
   11f60:	beq	11f6c <__assert_fail@plt+0xa78>
   11f64:	ldr	r0, [r0]
   11f68:	b	11f7c <__assert_fail@plt+0xa88>
   11f6c:	add	r2, sp, #3
   11f70:	mov	r0, r4
   11f74:	mov	r1, #0
   11f78:	bl	15fdc <__assert_fail@plt+0x4ae8>
   11f7c:	bl	18610 <__assert_fail@plt+0x711c>
   11f80:	sub	sp, fp, #8
   11f84:	pop	{r4, sl, fp, pc}
   11f88:	push	{r4, sl, fp, lr}
   11f8c:	add	fp, sp, #8
   11f90:	sub	sp, sp, #24
   11f94:	mov	r4, r0
   11f98:	bl	1120c <getpwuid@plt>
   11f9c:	cmp	r0, #0
   11fa0:	beq	11fac <__assert_fail@plt+0xab8>
   11fa4:	ldr	r0, [r0]
   11fa8:	b	11fbc <__assert_fail@plt+0xac8>
   11fac:	add	r2, sp, #3
   11fb0:	mov	r0, r4
   11fb4:	mov	r1, #0
   11fb8:	bl	15fdc <__assert_fail@plt+0x4ae8>
   11fbc:	bl	18610 <__assert_fail@plt+0x711c>
   11fc0:	sub	sp, fp, #8
   11fc4:	pop	{r4, sl, fp, pc}
   11fc8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11fcc:	add	fp, sp, #28
   11fd0:	sub	sp, sp, #12
   11fd4:	mov	r6, r3
   11fd8:	mov	r7, r2
   11fdc:	ldr	r9, [fp, #8]
   11fe0:	ldr	sl, [fp, #12]
   11fe4:	and	r3, sl, r9
   11fe8:	mov	r2, #0
   11fec:	ldr	r8, [fp, #16]
   11ff0:	cmn	r3, #1
   11ff4:	bne	12018 <__assert_fail@plt+0xb24>
   11ff8:	ldrb	r3, [r8, #12]
   11ffc:	cmp	r3, #0
   12000:	bne	12018 <__assert_fail@plt+0xb24>
   12004:	ldr	r2, [r8]
   12008:	sub	r2, r2, #2
   1200c:	clz	r2, r2
   12010:	lsr	r2, r2, #5
   12014:	lsl	r2, r2, #3
   12018:	orr	r1, r2, r1
   1201c:	mov	r2, #0
   12020:	bl	18674 <__assert_fail@plt+0x7180>
   12024:	mov	r5, r0
   12028:	bl	13864 <__assert_fail@plt+0x2370>
   1202c:	cmp	r0, #0
   12030:	beq	12070 <__assert_fail@plt+0xb7c>
   12034:	mov	r1, r0
   12038:	mov	r4, #1
   1203c:	stm	sp, {r9, sl}
   12040:	str	r8, [sp, #8]
   12044:	mov	r0, r5
   12048:	mov	r2, r7
   1204c:	mov	r3, r6
   12050:	bl	12108 <__assert_fail@plt+0xc14>
   12054:	and	r4, r4, r0
   12058:	mov	r0, r5
   1205c:	bl	13864 <__assert_fail@plt+0x2370>
   12060:	mov	r1, r0
   12064:	cmp	r0, #0
   12068:	bne	1203c <__assert_fail@plt+0xb48>
   1206c:	b	12074 <__assert_fail@plt+0xb80>
   12070:	mov	r4, #1
   12074:	bl	113a4 <__errno_location@plt>
   12078:	ldr	r6, [r0]
   1207c:	cmp	r6, #0
   12080:	beq	120bc <__assert_fail@plt+0xbc8>
   12084:	ldrb	r0, [r8, #13]
   12088:	mov	r4, #0
   1208c:	cmp	r0, #0
   12090:	bne	120bc <__assert_fail@plt+0xbc8>
   12094:	mov	r4, #0
   12098:	movw	r1, #42472	; 0xa5e8
   1209c:	movt	r1, #1
   120a0:	mov	r0, #0
   120a4:	mov	r2, #5
   120a8:	bl	11278 <dcgettext@plt>
   120ac:	mov	r2, r0
   120b0:	mov	r0, #0
   120b4:	mov	r1, r6
   120b8:	bl	11308 <error@plt>
   120bc:	mov	r0, r5
   120c0:	bl	136d8 <__assert_fail@plt+0x21e4>
   120c4:	cmp	r0, #0
   120c8:	beq	120fc <__assert_fail@plt+0xc08>
   120cc:	bl	113a4 <__errno_location@plt>
   120d0:	ldr	r5, [r0]
   120d4:	mov	r4, #0
   120d8:	movw	r1, #42488	; 0xa5f8
   120dc:	movt	r1, #1
   120e0:	mov	r0, #0
   120e4:	mov	r2, #5
   120e8:	bl	11278 <dcgettext@plt>
   120ec:	mov	r2, r0
   120f0:	mov	r0, #0
   120f4:	mov	r1, r5
   120f8:	bl	11308 <error@plt>
   120fc:	mov	r0, r4
   12100:	sub	sp, fp, #28
   12104:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12108:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1210c:	add	fp, sp, #28
   12110:	sub	sp, sp, #148	; 0x94
   12114:	mov	ip, r3
   12118:	str	r2, [sp, #32]
   1211c:	mov	r8, r1
   12120:	mov	r9, r0
   12124:	ldr	r7, [r1, #24]
   12128:	ldr	r6, [r1, #28]
   1212c:	ldrh	r0, [r1, #56]	; 0x38
   12130:	sub	r0, r0, #1
   12134:	ldr	r4, [fp, #16]
   12138:	cmp	r0, #9
   1213c:	bhi	12358 <__assert_fail@plt+0xe64>
   12140:	add	r1, pc, #0
   12144:	ldr	pc, [r1, r0, lsl #2]
   12148:	andeq	r2, r1, r0, ror r1
   1214c:	andeq	r2, r1, ip, ror #5
   12150:	andeq	r2, r1, r8, asr r3
   12154:	andeq	r2, r1, ip, lsr #4
   12158:	andeq	r2, r1, r8, asr r3
   1215c:	andeq	r2, r1, ip, asr #6
   12160:	andeq	r2, r1, r8, ror r4
   12164:	andeq	r2, r1, r8, asr r3
   12168:	andeq	r2, r1, r8, asr r3
   1216c:	andeq	r2, r1, ip, asr r2
   12170:	ldrb	r0, [r4, #4]
   12174:	cmp	r0, #0
   12178:	beq	12358 <__assert_fail@plt+0xe64>
   1217c:	ldr	r0, [r4, #8]
   12180:	mov	sl, #1
   12184:	cmp	r0, #0
   12188:	beq	126d4 <__assert_fail@plt+0x11e0>
   1218c:	ldrd	r2, [r0]
   12190:	ldrd	r4, [r8, #160]	; 0xa0
   12194:	eor	r1, r5, r3
   12198:	eor	r2, r4, r2
   1219c:	orrs	r1, r2, r1
   121a0:	bne	126d4 <__assert_fail@plt+0x11e0>
   121a4:	ldrd	r0, [r0, #8]
   121a8:	ldrd	r2, [r8, #64]	; 0x40
   121ac:	eor	r1, r3, r1
   121b0:	eor	r0, r2, r0
   121b4:	orrs	r0, r0, r1
   121b8:	bne	126d4 <__assert_fail@plt+0x11e0>
   121bc:	movw	r1, #44607	; 0xae3f
   121c0:	movt	r1, #1
   121c4:	mov	r0, r6
   121c8:	bl	11200 <strcmp@plt>
   121cc:	cmp	r0, #0
   121d0:	beq	12910 <__assert_fail@plt+0x141c>
   121d4:	movw	r1, #42550	; 0xa636
   121d8:	movt	r1, #1
   121dc:	mov	r0, #0
   121e0:	mov	r2, #5
   121e4:	bl	11278 <dcgettext@plt>
   121e8:	mov	r4, r0
   121ec:	mov	r0, #0
   121f0:	mov	r1, #4
   121f4:	mov	r2, r6
   121f8:	bl	1766c <__assert_fail@plt+0x6178>
   121fc:	mov	r5, r0
   12200:	movw	r2, #44607	; 0xae3f
   12204:	movt	r2, #1
   12208:	mov	r0, #1
   1220c:	mov	r1, #4
   12210:	bl	1766c <__assert_fail@plt+0x6178>
   12214:	str	r0, [sp]
   12218:	mov	r0, #0
   1221c:	mov	r1, #0
   12220:	mov	r2, r4
   12224:	mov	r3, r5
   12228:	b	12944 <__assert_fail@plt+0x1450>
   1222c:	str	r6, [sp, #28]
   12230:	str	r9, [sp, #24]
   12234:	ldrb	r0, [r4, #13]
   12238:	mov	r1, #0
   1223c:	str	r1, [sp, #36]	; 0x24
   12240:	mov	r5, #1
   12244:	cmp	r0, #0
   12248:	bne	124d4 <__assert_fail@plt+0xfe0>
   1224c:	ldr	r6, [r8, #32]
   12250:	movw	r1, #42674	; 0xa6b2
   12254:	movt	r1, #1
   12258:	b	122a0 <__assert_fail@plt+0xdac>
   1225c:	ldr	r0, [r8, #48]	; 0x30
   12260:	cmp	r0, #0
   12264:	bne	12274 <__assert_fail@plt+0xd80>
   12268:	ldr	r0, [r8, #16]
   1226c:	cmp	r0, #0
   12270:	beq	127d0 <__assert_fail@plt+0x12dc>
   12274:	str	r6, [sp, #28]
   12278:	str	r9, [sp, #24]
   1227c:	ldrb	r0, [r4, #13]
   12280:	mov	r1, #0
   12284:	str	r1, [sp, #36]	; 0x24
   12288:	mov	r5, #1
   1228c:	cmp	r0, #0
   12290:	bne	124d4 <__assert_fail@plt+0xfe0>
   12294:	ldr	r6, [r8, #32]
   12298:	movw	r1, #42657	; 0xa6a1
   1229c:	movt	r1, #1
   122a0:	mov	r0, #0
   122a4:	mov	r2, #5
   122a8:	mov	sl, r4
   122ac:	mov	r7, ip
   122b0:	bl	11278 <dcgettext@plt>
   122b4:	mov	r4, r0
   122b8:	mov	r0, #4
   122bc:	ldr	r1, [sp, #28]
   122c0:	bl	1771c <__assert_fail@plt+0x6228>
   122c4:	mov	r3, r0
   122c8:	mov	r0, #0
   122cc:	mov	r1, r6
   122d0:	mov	r2, #0
   122d4:	str	r2, [sp, #36]	; 0x24
   122d8:	mov	r2, r4
   122dc:	bl	11308 <error@plt>
   122e0:	mov	ip, r7
   122e4:	mov	r4, sl
   122e8:	b	124d4 <__assert_fail@plt+0xfe0>
   122ec:	mov	r0, r9
   122f0:	mov	r1, r8
   122f4:	mov	r5, ip
   122f8:	bl	186c0 <__assert_fail@plt+0x71cc>
   122fc:	mov	ip, r5
   12300:	cmp	r0, #0
   12304:	beq	12358 <__assert_fail@plt+0xe64>
   12308:	mov	sl, #0
   1230c:	movw	r1, #42699	; 0xa6cb
   12310:	movt	r1, #1
   12314:	mov	r0, #0
   12318:	mov	r2, #5
   1231c:	bl	11278 <dcgettext@plt>
   12320:	mov	r4, r0
   12324:	mov	r0, #0
   12328:	mov	r1, #3
   1232c:	mov	r2, r6
   12330:	bl	177d0 <__assert_fail@plt+0x62dc>
   12334:	mov	r3, r0
   12338:	mov	r0, #0
   1233c:	mov	r1, #0
   12340:	mov	r2, r4
   12344:	bl	11308 <error@plt>
   12348:	b	126d4 <__assert_fail@plt+0x11e0>
   1234c:	ldrb	r0, [r4, #4]
   12350:	cmp	r0, #0
   12354:	beq	12500 <__assert_fail@plt+0x100c>
   12358:	str	r7, [sp, #20]
   1235c:	str	r6, [sp, #28]
   12360:	ldr	r5, [fp, #12]
   12364:	ldr	r6, [fp, #8]
   12368:	and	r0, r5, r6
   1236c:	cmn	r0, #1
   12370:	bne	12388 <__assert_fail@plt+0xe94>
   12374:	ldr	r0, [r4]
   12378:	cmp	r0, #2
   1237c:	ldreq	r0, [r4, #8]
   12380:	cmpeq	r0, #0
   12384:	beq	12508 <__assert_fail@plt+0x1014>
   12388:	ldrb	r0, [r4, #12]
   1238c:	add	r1, r8, #64	; 0x40
   12390:	str	r1, [sp, #36]	; 0x24
   12394:	cmp	r0, #0
   12398:	beq	12448 <__assert_fail@plt+0xf54>
   1239c:	ldr	r0, [r8, #80]	; 0x50
   123a0:	and	r0, r0, #61440	; 0xf000
   123a4:	cmp	r0, #40960	; 0xa000
   123a8:	bne	12448 <__assert_fail@plt+0xf54>
   123ac:	ldr	r0, [r9, #32]
   123b0:	add	r2, sp, #40	; 0x28
   123b4:	mov	sl, #0
   123b8:	ldr	r1, [sp, #20]
   123bc:	str	r2, [sp, #36]	; 0x24
   123c0:	mov	r3, #0
   123c4:	str	ip, [sp, #16]
   123c8:	bl	19b4c <__assert_fail@plt+0x8658>
   123cc:	ldr	ip, [sp, #16]
   123d0:	ldr	r4, [fp, #16]
   123d4:	cmp	r0, #0
   123d8:	beq	12448 <__assert_fail@plt+0xf54>
   123dc:	str	r9, [sp, #24]
   123e0:	ldrb	r0, [r4, #13]
   123e4:	mov	r5, #1
   123e8:	add	r1, sp, #40	; 0x28
   123ec:	str	r1, [sp, #36]	; 0x24
   123f0:	cmp	r0, #0
   123f4:	bne	125cc <__assert_fail@plt+0x10d8>
   123f8:	bl	113a4 <__errno_location@plt>
   123fc:	ldr	r6, [r0]
   12400:	mov	sl, #0
   12404:	movw	r1, #42885	; 0xa785
   12408:	movt	r1, #1
   1240c:	mov	r0, #0
   12410:	mov	r2, #5
   12414:	bl	11278 <dcgettext@plt>
   12418:	mov	r4, r0
   1241c:	mov	r0, #4
   12420:	ldr	r1, [sp, #28]
   12424:	bl	1771c <__assert_fail@plt+0x6228>
   12428:	mov	r3, r0
   1242c:	mov	r0, #0
   12430:	mov	r1, r6
   12434:	mov	r2, r4
   12438:	bl	11308 <error@plt>
   1243c:	ldr	ip, [sp, #16]
   12440:	ldr	r4, [fp, #16]
   12444:	b	125cc <__assert_fail@plt+0x10d8>
   12448:	cmn	r6, #1
   1244c:	beq	124e0 <__assert_fail@plt+0xfec>
   12450:	ldr	r0, [sp, #36]	; 0x24
   12454:	ldr	r1, [r0, #24]
   12458:	sub	r0, r1, r6
   1245c:	clz	r0, r0
   12460:	lsr	lr, r0, #5
   12464:	cmn	r5, #1
   12468:	beq	12520 <__assert_fail@plt+0x102c>
   1246c:	cmp	r1, r6
   12470:	beq	124e8 <__assert_fail@plt+0xff4>
   12474:	b	12520 <__assert_fail@plt+0x102c>
   12478:	str	r6, [sp, #28]
   1247c:	str	r9, [sp, #24]
   12480:	ldrb	r0, [r4, #13]
   12484:	mov	r1, #0
   12488:	str	r1, [sp, #36]	; 0x24
   1248c:	mov	r5, #1
   12490:	cmp	r0, #0
   12494:	bne	124d4 <__assert_fail@plt+0xfe0>
   12498:	ldr	r6, [r8, #32]
   1249c:	mov	r0, #0
   124a0:	mov	r1, #3
   124a4:	ldr	r2, [sp, #28]
   124a8:	mov	r7, ip
   124ac:	bl	177d0 <__assert_fail@plt+0x62dc>
   124b0:	mov	r3, r0
   124b4:	movw	r2, #42203	; 0xa4db
   124b8:	movt	r2, #1
   124bc:	mov	r0, #0
   124c0:	mov	r1, r6
   124c4:	mov	r6, #0
   124c8:	str	r6, [sp, #36]	; 0x24
   124cc:	bl	11308 <error@plt>
   124d0:	mov	ip, r7
   124d4:	mov	r7, #1
   124d8:	mov	sl, #0
   124dc:	b	125d0 <__assert_fail@plt+0x10dc>
   124e0:	cmn	r5, #1
   124e4:	beq	1251c <__assert_fail@plt+0x1028>
   124e8:	ldr	r0, [sp, #36]	; 0x24
   124ec:	ldr	r0, [r0, #28]
   124f0:	sub	r0, r0, r5
   124f4:	clz	r0, r0
   124f8:	lsr	lr, r0, #5
   124fc:	b	12520 <__assert_fail@plt+0x102c>
   12500:	mov	sl, #1
   12504:	b	126d4 <__assert_fail@plt+0x11e0>
   12508:	ldrb	r0, [r4, #12]
   1250c:	cmp	r0, #0
   12510:	bne	12388 <__assert_fail@plt+0xe94>
   12514:	add	r0, r8, #64	; 0x40
   12518:	str	r0, [sp, #36]	; 0x24
   1251c:	mov	lr, #1
   12520:	ldrh	r1, [r8, #56]	; 0x38
   12524:	cmp	r1, #6
   12528:	bhi	12544 <__assert_fail@plt+0x1050>
   1252c:	mov	r2, #1
   12530:	mov	r3, #86	; 0x56
   12534:	tst	r3, r2, lsl r1
   12538:	ldrne	r1, [r4, #8]
   1253c:	cmpne	r1, #0
   12540:	bne	126e0 <__assert_fail@plt+0x11ec>
   12544:	mov	sl, #1
   12548:	cmp	lr, #0
   1254c:	str	r9, [sp, #24]
   12550:	beq	125c8 <__assert_fail@plt+0x10d4>
   12554:	ldr	r0, [r9, #32]
   12558:	ldrb	r1, [r4, #12]
   1255c:	cmp	r1, #0
   12560:	beq	12790 <__assert_fail@plt+0x129c>
   12564:	str	ip, [sp, #16]
   12568:	str	ip, [sp]
   1256c:	ldr	r1, [fp, #8]
   12570:	str	r1, [sp, #4]
   12574:	ldr	r1, [fp, #12]
   12578:	str	r1, [sp, #8]
   1257c:	ldr	r1, [sp, #20]
   12580:	ldr	r2, [sp, #36]	; 0x24
   12584:	ldr	r3, [sp, #32]
   12588:	bl	12990 <__assert_fail@plt+0x149c>
   1258c:	sub	r0, r0, #2
   12590:	cmp	r0, #4
   12594:	bhi	1298c <__assert_fail@plt+0x1498>
   12598:	mov	r7, #0
   1259c:	add	r1, pc, #12
   125a0:	mov	r5, #1
   125a4:	ldr	r4, [fp, #16]
   125a8:	ldr	ip, [sp, #16]
   125ac:	ldr	pc, [r1, r0, lsl #2]
   125b0:	ldrdeq	r2, [r1], -r0
   125b4:	andeq	r2, r1, r4, asr #11
   125b8:	andeq	r2, r1, r4, asr #11
   125bc:	strdeq	r2, [r1], -ip
   125c0:	andeq	r2, r1, r4, lsr #16
   125c4:	mov	sl, #0
   125c8:	mov	r5, #1
   125cc:	mov	r7, #1
   125d0:	ldr	r0, [r4]
   125d4:	cmp	r0, #2
   125d8:	beq	126b8 <__assert_fail@plt+0x11c4>
   125dc:	eor	r1, sl, #1
   125e0:	orrs	r1, r7, r1
   125e4:	eorseq	r1, r5, #1
   125e8:	beq	12620 <__assert_fail@plt+0x112c>
   125ec:	cmp	r0, #0
   125f0:	bne	126b8 <__assert_fail@plt+0x11c4>
   125f4:	mov	r7, #1
   125f8:	cmp	r5, #0
   125fc:	movwne	r7, #4
   12600:	cmp	sl, #0
   12604:	moveq	r7, #3
   12608:	ldr	r0, [sp, #36]	; 0x24
   1260c:	cmp	r0, #0
   12610:	bne	1266c <__assert_fail@plt+0x1178>
   12614:	mov	r9, #0
   12618:	mov	r5, #0
   1261c:	b	12688 <__assert_fail@plt+0x1194>
   12620:	ldr	r1, [sp, #32]
   12624:	cmn	r1, #1
   12628:	beq	12640 <__assert_fail@plt+0x114c>
   1262c:	ldr	r1, [sp, #36]	; 0x24
   12630:	ldr	r1, [r1, #24]
   12634:	ldr	r2, [sp, #32]
   12638:	cmp	r1, r2
   1263c:	bne	12658 <__assert_fail@plt+0x1164>
   12640:	cmn	ip, #1
   12644:	beq	125ec <__assert_fail@plt+0x10f8>
   12648:	ldr	r1, [sp, #36]	; 0x24
   1264c:	ldr	r1, [r1, #28]
   12650:	cmp	r1, ip
   12654:	beq	125ec <__assert_fail@plt+0x10f8>
   12658:	mov	r7, #1
   1265c:	cmp	r5, #0
   12660:	movwne	r7, #2
   12664:	cmp	sl, #0
   12668:	moveq	r7, #3
   1266c:	ldr	r5, [sp, #36]	; 0x24
   12670:	ldr	r0, [r5, #24]
   12674:	bl	11f88 <__assert_fail@plt+0xa94>
   12678:	mov	r9, r0
   1267c:	ldr	r0, [r5, #28]
   12680:	bl	11f48 <__assert_fail@plt+0xa54>
   12684:	mov	r5, r0
   12688:	ldr	r0, [r4, #16]
   1268c:	ldr	r1, [r4, #20]
   12690:	stm	sp, {r0, r1}
   12694:	ldr	r0, [sp, #28]
   12698:	mov	r1, r7
   1269c:	mov	r2, r9
   126a0:	mov	r3, r5
   126a4:	bl	12b40 <__assert_fail@plt+0x164c>
   126a8:	mov	r0, r9
   126ac:	bl	12f04 <__assert_fail@plt+0x1a10>
   126b0:	mov	r0, r5
   126b4:	bl	12f04 <__assert_fail@plt+0x1a10>
   126b8:	ldrb	r0, [r4, #4]
   126bc:	cmp	r0, #0
   126c0:	bne	126d4 <__assert_fail@plt+0x11e0>
   126c4:	ldr	r0, [sp, #24]
   126c8:	mov	r1, r8
   126cc:	mov	r2, #4
   126d0:	bl	14b3c <__assert_fail@plt+0x3648>
   126d4:	mov	r0, sl
   126d8:	sub	sp, fp, #28
   126dc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   126e0:	ldrd	r2, [r1]
   126e4:	ldr	r6, [sp, #36]	; 0x24
   126e8:	ldr	r0, [r6, #96]	; 0x60
   126ec:	ldr	r7, [r6, #100]	; 0x64
   126f0:	eor	r3, r7, r3
   126f4:	eor	r2, r0, r2
   126f8:	orrs	r2, r2, r3
   126fc:	bne	12544 <__assert_fail@plt+0x1050>
   12700:	mov	r5, r9
   12704:	ldrd	r2, [r1, #8]
   12708:	ldm	r6, {r0, r7}
   1270c:	eor	r1, r7, r3
   12710:	eor	r2, r0, r2
   12714:	orrs	r1, r2, r1
   12718:	bne	12544 <__assert_fail@plt+0x1050>
   1271c:	movw	r1, #44607	; 0xae3f
   12720:	movt	r1, #1
   12724:	ldr	r5, [sp, #28]
   12728:	mov	r0, r5
   1272c:	bl	11200 <strcmp@plt>
   12730:	cmp	r0, #0
   12734:	beq	128a4 <__assert_fail@plt+0x13b0>
   12738:	movw	r1, #42550	; 0xa636
   1273c:	movt	r1, #1
   12740:	mov	r0, #0
   12744:	mov	r2, #5
   12748:	bl	11278 <dcgettext@plt>
   1274c:	mov	r4, r0
   12750:	mov	r0, #0
   12754:	mov	r1, #4
   12758:	mov	r2, r5
   1275c:	bl	1766c <__assert_fail@plt+0x6178>
   12760:	mov	r5, r0
   12764:	movw	r2, #44607	; 0xae3f
   12768:	movt	r2, #1
   1276c:	mov	r0, #1
   12770:	mov	r1, #4
   12774:	bl	1766c <__assert_fail@plt+0x6178>
   12778:	str	r0, [sp]
   1277c:	mov	r0, #0
   12780:	mov	r1, #0
   12784:	mov	r2, r4
   12788:	mov	r3, r5
   1278c:	b	128d8 <__assert_fail@plt+0x13e4>
   12790:	ldr	r1, [sp, #20]
   12794:	ldr	r2, [sp, #32]
   12798:	mov	r6, ip
   1279c:	mov	r3, ip
   127a0:	bl	12ddc <__assert_fail@plt+0x18e8>
   127a4:	cmp	r0, #0
   127a8:	beq	127e8 <__assert_fail@plt+0x12f4>
   127ac:	bl	113a4 <__errno_location@plt>
   127b0:	ldr	r0, [r0]
   127b4:	mov	r5, #0
   127b8:	cmp	r0, #95	; 0x5f
   127bc:	ldr	r4, [fp, #16]
   127c0:	mov	ip, r6
   127c4:	bne	12824 <__assert_fail@plt+0x1330>
   127c8:	mov	r7, #0
   127cc:	b	125d0 <__assert_fail@plt+0x10dc>
   127d0:	mov	sl, #1
   127d4:	str	sl, [r8, #16]
   127d8:	mov	r0, r9
   127dc:	mov	r1, r8
   127e0:	mov	r2, #1
   127e4:	b	126d0 <__assert_fail@plt+0x11dc>
   127e8:	mov	r7, #0
   127ec:	mov	r5, #1
   127f0:	ldr	r4, [fp, #16]
   127f4:	mov	ip, r6
   127f8:	b	125d0 <__assert_fail@plt+0x10dc>
   127fc:	ldr	r0, [sp, #24]
   12800:	ldr	r0, [r0, #32]
   12804:	ldr	r1, [sp, #20]
   12808:	ldr	r2, [sp, #32]
   1280c:	mov	r3, ip
   12810:	bl	12dbc <__assert_fail@plt+0x18c8>
   12814:	ldr	ip, [sp, #16]
   12818:	ldr	r4, [fp, #16]
   1281c:	cmp	r0, #0
   12820:	beq	12908 <__assert_fail@plt+0x1414>
   12824:	ldrb	r0, [r4, #13]
   12828:	mov	r7, #0
   1282c:	cmp	r0, #0
   12830:	bne	1289c <__assert_fail@plt+0x13a8>
   12834:	movw	r0, #42932	; 0xa7b4
   12838:	movt	r0, #1
   1283c:	movw	r4, #42907	; 0xa79b
   12840:	movt	r4, #1
   12844:	ldr	r1, [sp, #32]
   12848:	cmn	r1, #1
   1284c:	moveq	r4, r0
   12850:	mov	r6, ip
   12854:	bl	113a4 <__errno_location@plt>
   12858:	ldr	r5, [r0]
   1285c:	mov	r7, #0
   12860:	mov	r0, #0
   12864:	mov	r1, r4
   12868:	mov	r2, #5
   1286c:	bl	11278 <dcgettext@plt>
   12870:	mov	r4, r0
   12874:	mov	r0, #4
   12878:	ldr	r1, [sp, #28]
   1287c:	bl	1771c <__assert_fail@plt+0x6228>
   12880:	mov	r3, r0
   12884:	mov	r0, #0
   12888:	mov	r1, r5
   1288c:	mov	r2, r4
   12890:	bl	11308 <error@plt>
   12894:	mov	ip, r6
   12898:	ldr	r4, [fp, #16]
   1289c:	mov	r5, #1
   128a0:	b	124d8 <__assert_fail@plt+0xfe4>
   128a4:	movw	r1, #42505	; 0xa609
   128a8:	movt	r1, #1
   128ac:	mov	r0, #0
   128b0:	mov	r2, #5
   128b4:	bl	11278 <dcgettext@plt>
   128b8:	mov	r4, r0
   128bc:	mov	r0, #4
   128c0:	mov	r1, r5
   128c4:	bl	1771c <__assert_fail@plt+0x6228>
   128c8:	mov	r3, r0
   128cc:	mov	r0, #0
   128d0:	mov	r1, #0
   128d4:	mov	r2, r4
   128d8:	bl	11308 <error@plt>
   128dc:	mov	sl, #0
   128e0:	movw	r1, #42608	; 0xa670
   128e4:	movt	r1, #1
   128e8:	mov	r0, #0
   128ec:	mov	r2, #5
   128f0:	bl	11278 <dcgettext@plt>
   128f4:	mov	r2, r0
   128f8:	mov	r0, #0
   128fc:	mov	r1, #0
   12900:	bl	11308 <error@plt>
   12904:	b	126d4 <__assert_fail@plt+0x11e0>
   12908:	mov	r5, #1
   1290c:	b	125d0 <__assert_fail@plt+0x10dc>
   12910:	movw	r1, #42505	; 0xa609
   12914:	movt	r1, #1
   12918:	mov	r0, #0
   1291c:	mov	r2, #5
   12920:	bl	11278 <dcgettext@plt>
   12924:	mov	r4, r0
   12928:	mov	r0, #4
   1292c:	mov	r1, r6
   12930:	bl	1771c <__assert_fail@plt+0x6228>
   12934:	mov	r3, r0
   12938:	mov	r0, #0
   1293c:	mov	r1, #0
   12940:	mov	r2, r4
   12944:	bl	11308 <error@plt>
   12948:	mov	sl, #0
   1294c:	movw	r1, #42608	; 0xa670
   12950:	movt	r1, #1
   12954:	mov	r0, #0
   12958:	mov	r2, #5
   1295c:	bl	11278 <dcgettext@plt>
   12960:	mov	r2, r0
   12964:	mov	r0, #0
   12968:	mov	r1, #0
   1296c:	bl	11308 <error@plt>
   12970:	mov	r0, r9
   12974:	mov	r1, r8
   12978:	mov	r2, #4
   1297c:	bl	14b3c <__assert_fail@plt+0x3648>
   12980:	mov	r0, r9
   12984:	bl	13864 <__assert_fail@plt+0x2370>
   12988:	b	126d4 <__assert_fail@plt+0x11e0>
   1298c:	bl	114ac <abort@plt>
   12990:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12994:	add	fp, sp, #28
   12998:	sub	sp, sp, #116	; 0x74
   1299c:	mov	r5, r0
   129a0:	ldr	r8, [fp, #12]
   129a4:	ldr	r0, [fp, #16]
   129a8:	and	r0, r0, r8
   129ac:	mov	r7, #5
   129b0:	cmn	r0, #1
   129b4:	beq	12b1c <__assert_fail@plt+0x1628>
   129b8:	mov	r6, r2
   129bc:	mov	r4, r1
   129c0:	ldr	r0, [r2, #16]
   129c4:	and	r0, r0, #61440	; 0xf000
   129c8:	cmp	r0, #32768	; 0x8000
   129cc:	beq	129e4 <__assert_fail@plt+0x14f0>
   129d0:	cmp	r0, #16384	; 0x4000
   129d4:	bne	12b1c <__assert_fail@plt+0x1628>
   129d8:	str	r3, [sp, #4]
   129dc:	mov	r7, #18688	; 0x4900
   129e0:	b	129ec <__assert_fail@plt+0x14f8>
   129e4:	str	r3, [sp, #4]
   129e8:	mov	r7, #2304	; 0x900
   129ec:	mov	r0, r5
   129f0:	mov	r1, r4
   129f4:	mov	r2, r7
   129f8:	bl	1138c <openat64@plt>
   129fc:	mov	r9, r0
   12a00:	cmn	r0, #1
   12a04:	ble	12acc <__assert_fail@plt+0x15d8>
   12a08:	add	r1, sp, #8
   12a0c:	mov	r0, r9
   12a10:	bl	19b2c <__assert_fail@plt+0x8638>
   12a14:	mov	r7, #6
   12a18:	cmp	r0, #0
   12a1c:	bne	12ab0 <__assert_fail@plt+0x15bc>
   12a20:	ldrd	r0, [r6, #96]	; 0x60
   12a24:	ldr	r2, [sp, #104]	; 0x68
   12a28:	ldr	r3, [sp, #108]	; 0x6c
   12a2c:	eor	r1, r1, r3
   12a30:	eor	r0, r0, r2
   12a34:	orrs	r0, r0, r1
   12a38:	mov	r7, #4
   12a3c:	bne	12ab0 <__assert_fail@plt+0x15bc>
   12a40:	ldrd	r0, [r6]
   12a44:	ldr	r2, [sp, #8]
   12a48:	ldr	r3, [sp, #12]
   12a4c:	eor	r1, r1, r3
   12a50:	eor	r0, r0, r2
   12a54:	orrs	r0, r0, r1
   12a58:	bne	12ab0 <__assert_fail@plt+0x15bc>
   12a5c:	cmn	r8, #1
   12a60:	beq	12a74 <__assert_fail@plt+0x1580>
   12a64:	mov	r7, #2
   12a68:	ldr	r0, [sp, #32]
   12a6c:	cmp	r0, r8
   12a70:	bne	12ab0 <__assert_fail@plt+0x15bc>
   12a74:	ldr	r0, [fp, #16]
   12a78:	cmn	r0, #1
   12a7c:	beq	12a94 <__assert_fail@plt+0x15a0>
   12a80:	mov	r7, #2
   12a84:	ldr	r0, [sp, #36]	; 0x24
   12a88:	ldr	r1, [fp, #16]
   12a8c:	cmp	r0, r1
   12a90:	bne	12ab0 <__assert_fail@plt+0x15bc>
   12a94:	ldr	r2, [fp, #8]
   12a98:	mov	r0, r9
   12a9c:	ldr	r1, [sp, #4]
   12aa0:	bl	11398 <fchown@plt>
   12aa4:	cmp	r0, #0
   12aa8:	mov	r7, #6
   12aac:	beq	12b28 <__assert_fail@plt+0x1634>
   12ab0:	bl	113a4 <__errno_location@plt>
   12ab4:	mov	r4, r0
   12ab8:	ldr	r5, [r0]
   12abc:	mov	r0, r9
   12ac0:	bl	114b8 <close@plt>
   12ac4:	str	r5, [r4]
   12ac8:	b	12b1c <__assert_fail@plt+0x1628>
   12acc:	bl	113a4 <__errno_location@plt>
   12ad0:	mov	sl, r0
   12ad4:	ldr	r0, [r0]
   12ad8:	cmp	r0, #13
   12adc:	bne	12b0c <__assert_fail@plt+0x1618>
   12ae0:	ldr	r0, [r6, #16]
   12ae4:	and	r0, r0, #61440	; 0xf000
   12ae8:	cmp	r0, #32768	; 0x8000
   12aec:	bne	12b0c <__assert_fail@plt+0x1618>
   12af0:	orr	r2, r7, #1
   12af4:	mov	r0, r5
   12af8:	mov	r1, r4
   12afc:	bl	1138c <openat64@plt>
   12b00:	mov	r9, r0
   12b04:	cmn	r0, #1
   12b08:	bgt	12a08 <__assert_fail@plt+0x1514>
   12b0c:	ldr	r0, [sl]
   12b10:	mov	r7, #6
   12b14:	cmp	r0, #13
   12b18:	movweq	r7, #5
   12b1c:	mov	r0, r7
   12b20:	sub	sp, fp, #28
   12b24:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12b28:	mov	r0, r9
   12b2c:	bl	114b8 <close@plt>
   12b30:	mov	r7, #6
   12b34:	cmp	r0, #0
   12b38:	movweq	r7, #2
   12b3c:	b	12b1c <__assert_fail@plt+0x1628>
   12b40:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12b44:	add	fp, sp, #28
   12b48:	sub	sp, sp, #12
   12b4c:	mov	sl, r0
   12b50:	cmp	r1, #1
   12b54:	bne	12b94 <__assert_fail@plt+0x16a0>
   12b58:	movw	r1, #42953	; 0xa7c9
   12b5c:	movt	r1, #1
   12b60:	mov	r0, #0
   12b64:	mov	r2, #5
   12b68:	bl	11278 <dcgettext@plt>
   12b6c:	mov	r4, r0
   12b70:	mov	r0, #4
   12b74:	mov	r1, sl
   12b78:	bl	1771c <__assert_fail@plt+0x6228>
   12b7c:	mov	r2, r0
   12b80:	mov	r0, #1
   12b84:	mov	r1, r4
   12b88:	sub	sp, fp, #28
   12b8c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12b90:	b	113c8 <__printf_chk@plt>
   12b94:	mov	r4, r3
   12b98:	mov	r7, r2
   12b9c:	mov	r6, r1
   12ba0:	ldr	r8, [fp, #12]
   12ba4:	ldr	r5, [fp, #8]
   12ba8:	mov	r0, r5
   12bac:	mov	r1, r8
   12bb0:	bl	12d30 <__assert_fail@plt+0x183c>
   12bb4:	str	r0, [sp, #8]
   12bb8:	cmp	r5, #0
   12bbc:	moveq	r7, r5
   12bc0:	cmp	r8, #0
   12bc4:	moveq	r4, r8
   12bc8:	mov	r0, r7
   12bcc:	mov	r1, r4
   12bd0:	bl	12d30 <__assert_fail@plt+0x183c>
   12bd4:	mov	r9, r0
   12bd8:	cmp	r6, #4
   12bdc:	beq	12c20 <__assert_fail@plt+0x172c>
   12be0:	cmp	r6, #3
   12be4:	beq	12c04 <__assert_fail@plt+0x1710>
   12be8:	cmp	r6, #2
   12bec:	bne	12d2c <__assert_fail@plt+0x1838>
   12bf0:	cmp	r5, #0
   12bf4:	beq	12c34 <__assert_fail@plt+0x1740>
   12bf8:	movw	r1, #43009	; 0xa801
   12bfc:	movt	r1, #1
   12c00:	b	12cdc <__assert_fail@plt+0x17e8>
   12c04:	cmp	r9, #0
   12c08:	beq	12c48 <__assert_fail@plt+0x1754>
   12c0c:	cmp	r5, #0
   12c10:	beq	12ca8 <__assert_fail@plt+0x17b4>
   12c14:	movw	r1, #43113	; 0xa869
   12c18:	movt	r1, #1
   12c1c:	b	12cdc <__assert_fail@plt+0x17e8>
   12c20:	cmp	r5, #0
   12c24:	beq	12c94 <__assert_fail@plt+0x17a0>
   12c28:	movw	r1, #43315	; 0xa933
   12c2c:	movt	r1, #1
   12c30:	b	12cdc <__assert_fail@plt+0x17e8>
   12c34:	cmp	r8, #0
   12c38:	beq	12cbc <__assert_fail@plt+0x17c8>
   12c3c:	movw	r1, #43048	; 0xa828
   12c40:	movt	r1, #1
   12c44:	b	12cdc <__assert_fail@plt+0x17e8>
   12c48:	movw	r0, #43279	; 0xa90f
   12c4c:	movt	r0, #1
   12c50:	movw	r2, #43205	; 0xa8c5
   12c54:	movt	r2, #1
   12c58:	cmp	r8, #0
   12c5c:	movne	r2, r0
   12c60:	movw	r1, #43239	; 0xa8e7
   12c64:	movt	r1, #1
   12c68:	cmp	r5, #0
   12c6c:	moveq	r1, r2
   12c70:	mov	r0, #0
   12c74:	mov	r2, #5
   12c78:	bl	11278 <dcgettext@plt>
   12c7c:	mov	r7, r0
   12c80:	mov	r0, r9
   12c84:	bl	12f04 <__assert_fail@plt+0x1a10>
   12c88:	ldr	r9, [sp, #8]
   12c8c:	mov	r4, #0
   12c90:	b	12cf0 <__assert_fail@plt+0x17fc>
   12c94:	cmp	r8, #0
   12c98:	beq	12cc8 <__assert_fail@plt+0x17d4>
   12c9c:	movw	r1, #43347	; 0xa953
   12ca0:	movt	r1, #1
   12ca4:	b	12cdc <__assert_fail@plt+0x17e8>
   12ca8:	cmp	r8, #0
   12cac:	beq	12cd4 <__assert_fail@plt+0x17e0>
   12cb0:	movw	r1, #43161	; 0xa899
   12cb4:	movt	r1, #1
   12cb8:	b	12cdc <__assert_fail@plt+0x17e8>
   12cbc:	movw	r1, #43083	; 0xa84b
   12cc0:	movt	r1, #1
   12cc4:	b	12cdc <__assert_fail@plt+0x17e8>
   12cc8:	movw	r1, #43375	; 0xa96f
   12ccc:	movt	r1, #1
   12cd0:	b	12cdc <__assert_fail@plt+0x17e8>
   12cd4:	movw	r1, #43205	; 0xa8c5
   12cd8:	movt	r1, #1
   12cdc:	mov	r0, #0
   12ce0:	mov	r2, #5
   12ce4:	bl	11278 <dcgettext@plt>
   12ce8:	mov	r7, r0
   12cec:	ldr	r4, [sp, #8]
   12cf0:	mov	r0, #4
   12cf4:	mov	r1, sl
   12cf8:	bl	1771c <__assert_fail@plt+0x6228>
   12cfc:	mov	r2, r0
   12d00:	str	r4, [sp]
   12d04:	mov	r0, #1
   12d08:	mov	r1, r7
   12d0c:	mov	r3, r9
   12d10:	bl	113c8 <__printf_chk@plt>
   12d14:	mov	r0, r9
   12d18:	bl	12f04 <__assert_fail@plt+0x1a10>
   12d1c:	mov	r0, r4
   12d20:	sub	sp, fp, #28
   12d24:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12d28:	b	12f04 <__assert_fail@plt+0x1a10>
   12d2c:	bl	114ac <abort@plt>
   12d30:	push	{r4, r5, r6, sl, fp, lr}
   12d34:	add	fp, sp, #16
   12d38:	mov	r4, r1
   12d3c:	cmp	r0, #0
   12d40:	beq	12d94 <__assert_fail@plt+0x18a0>
   12d44:	mov	r5, r0
   12d48:	cmp	r4, #0
   12d4c:	beq	12db0 <__assert_fail@plt+0x18bc>
   12d50:	mov	r0, r5
   12d54:	bl	11374 <strlen@plt>
   12d58:	mov	r6, r0
   12d5c:	mov	r0, r4
   12d60:	bl	11374 <strlen@plt>
   12d64:	add	r0, r6, r0
   12d68:	add	r0, r0, #2
   12d6c:	bl	18280 <__assert_fail@plt+0x6d8c>
   12d70:	mov	r6, r0
   12d74:	mov	r1, r5
   12d78:	bl	1126c <stpcpy@plt>
   12d7c:	mov	r1, #58	; 0x3a
   12d80:	strh	r1, [r0], #1
   12d84:	mov	r1, r4
   12d88:	bl	1126c <stpcpy@plt>
   12d8c:	mov	r0, r6
   12d90:	pop	{r4, r5, r6, sl, fp, pc}
   12d94:	cmp	r4, #0
   12d98:	moveq	r6, #0
   12d9c:	moveq	r0, r6
   12da0:	popeq	{r4, r5, r6, sl, fp, pc}
   12da4:	mov	r0, r4
   12da8:	bl	18610 <__assert_fail@plt+0x711c>
   12dac:	pop	{r4, r5, r6, sl, fp, pc}
   12db0:	mov	r0, r5
   12db4:	bl	18610 <__assert_fail@plt+0x711c>
   12db8:	pop	{r4, r5, r6, sl, fp, pc}
   12dbc:	push	{fp, lr}
   12dc0:	mov	fp, sp
   12dc4:	sub	sp, sp, #8
   12dc8:	mov	ip, #0
   12dcc:	str	ip, [sp]
   12dd0:	bl	1147c <fchownat@plt>
   12dd4:	mov	sp, fp
   12dd8:	pop	{fp, pc}
   12ddc:	push	{fp, lr}
   12de0:	mov	fp, sp
   12de4:	sub	sp, sp, #8
   12de8:	mov	ip, #256	; 0x100
   12dec:	str	ip, [sp]
   12df0:	bl	1147c <fchownat@plt>
   12df4:	mov	sp, fp
   12df8:	pop	{fp, pc}
   12dfc:	movw	r1, #49584	; 0xc1b0
   12e00:	movt	r1, #2
   12e04:	str	r0, [r1]
   12e08:	bx	lr
   12e0c:	movw	r1, #49588	; 0xc1b4
   12e10:	movt	r1, #2
   12e14:	strb	r0, [r1]
   12e18:	bx	lr
   12e1c:	push	{r4, r5, r6, sl, fp, lr}
   12e20:	add	fp, sp, #16
   12e24:	sub	sp, sp, #8
   12e28:	movw	r0, #49548	; 0xc18c
   12e2c:	movt	r0, #2
   12e30:	ldr	r0, [r0]
   12e34:	bl	19174 <__assert_fail@plt+0x7c80>
   12e38:	cmp	r0, #0
   12e3c:	beq	12e64 <__assert_fail@plt+0x1970>
   12e40:	movw	r0, #49588	; 0xc1b4
   12e44:	movt	r0, #2
   12e48:	ldrb	r0, [r0]
   12e4c:	cmp	r0, #0
   12e50:	beq	12e84 <__assert_fail@plt+0x1990>
   12e54:	bl	113a4 <__errno_location@plt>
   12e58:	ldr	r0, [r0]
   12e5c:	cmp	r0, #32
   12e60:	bne	12e84 <__assert_fail@plt+0x1990>
   12e64:	movw	r0, #49544	; 0xc188
   12e68:	movt	r0, #2
   12e6c:	ldr	r0, [r0]
   12e70:	bl	19174 <__assert_fail@plt+0x7c80>
   12e74:	cmp	r0, #0
   12e78:	subeq	sp, fp, #16
   12e7c:	popeq	{r4, r5, r6, sl, fp, pc}
   12e80:	b	12ef4 <__assert_fail@plt+0x1a00>
   12e84:	movw	r1, #43416	; 0xa998
   12e88:	movt	r1, #1
   12e8c:	mov	r0, #0
   12e90:	mov	r2, #5
   12e94:	bl	11278 <dcgettext@plt>
   12e98:	mov	r4, r0
   12e9c:	movw	r0, #49584	; 0xc1b0
   12ea0:	movt	r0, #2
   12ea4:	ldr	r6, [r0]
   12ea8:	bl	113a4 <__errno_location@plt>
   12eac:	ldr	r5, [r0]
   12eb0:	cmp	r6, #0
   12eb4:	bne	12ed0 <__assert_fail@plt+0x19dc>
   12eb8:	movw	r2, #42203	; 0xa4db
   12ebc:	movt	r2, #1
   12ec0:	mov	r0, #0
   12ec4:	mov	r1, r5
   12ec8:	mov	r3, r4
   12ecc:	b	12ef0 <__assert_fail@plt+0x19fc>
   12ed0:	mov	r0, r6
   12ed4:	bl	177c0 <__assert_fail@plt+0x62cc>
   12ed8:	mov	r3, r0
   12edc:	str	r4, [sp]
   12ee0:	movw	r2, #43428	; 0xa9a4
   12ee4:	movt	r2, #1
   12ee8:	mov	r0, #0
   12eec:	mov	r1, r5
   12ef0:	bl	11308 <error@plt>
   12ef4:	movw	r0, #49460	; 0xc134
   12ef8:	movt	r0, #2
   12efc:	ldr	r0, [r0]
   12f00:	bl	1123c <_exit@plt>
   12f04:	push	{r4, r5, r6, sl, fp, lr}
   12f08:	add	fp, sp, #16
   12f0c:	mov	r4, r0
   12f10:	bl	113a4 <__errno_location@plt>
   12f14:	mov	r5, r0
   12f18:	ldr	r6, [r0]
   12f1c:	mov	r0, r4
   12f20:	bl	11230 <free@plt>
   12f24:	str	r6, [r5]
   12f28:	pop	{r4, r5, r6, sl, fp, pc}
   12f2c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12f30:	add	fp, sp, #28
   12f34:	sub	sp, sp, #12
   12f38:	cmp	r1, #4096	; 0x1000
   12f3c:	bcs	12f58 <__assert_fail@plt+0x1a64>
   12f40:	mov	r6, r1
   12f44:	mov	r7, r0
   12f48:	and	r0, r1, #516	; 0x204
   12f4c:	cmp	r0, #516	; 0x204
   12f50:	tstne	r6, #18
   12f54:	bne	12f74 <__assert_fail@plt+0x1a80>
   12f58:	bl	113a4 <__errno_location@plt>
   12f5c:	mov	r1, #22
   12f60:	str	r1, [r0]
   12f64:	mov	r4, #0
   12f68:	mov	r0, r4
   12f6c:	sub	sp, fp, #28
   12f70:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12f74:	mov	sl, r2
   12f78:	mov	r0, #1
   12f7c:	mov	r1, #96	; 0x60
   12f80:	bl	18c24 <__assert_fail@plt+0x7730>
   12f84:	cmp	r0, #0
   12f88:	beq	12f64 <__assert_fail@plt+0x1a70>
   12f8c:	mov	r4, r0
   12f90:	mvn	r0, #99	; 0x63
   12f94:	str	r0, [r4, #32]
   12f98:	bic	r0, r6, #516	; 0x204
   12f9c:	tst	r6, #2
   12fa0:	mov	r1, r6
   12fa4:	orrne	r1, r0, #4
   12fa8:	str	sl, [r4, #44]	; 0x2c
   12fac:	str	r1, [r4, #48]	; 0x30
   12fb0:	mov	r0, r7
   12fb4:	bl	13228 <__assert_fail@plt+0x1d34>
   12fb8:	mov	r1, r0
   12fbc:	cmp	r0, #4096	; 0x1000
   12fc0:	movls	r1, #4096	; 0x1000
   12fc4:	mov	r0, r4
   12fc8:	bl	1326c <__assert_fail@plt+0x1d78>
   12fcc:	cmp	r0, #0
   12fd0:	beq	1321c <__assert_fail@plt+0x1d28>
   12fd4:	ldr	r0, [r7]
   12fd8:	cmp	r0, #0
   12fdc:	beq	1300c <__assert_fail@plt+0x1b18>
   12fe0:	movw	r1, #41364	; 0xa194
   12fe4:	movt	r1, #1
   12fe8:	mov	r0, r4
   12fec:	mov	r2, #0
   12ff0:	bl	132e4 <__assert_fail@plt+0x1df0>
   12ff4:	cmp	r0, #0
   12ff8:	beq	13214 <__assert_fail@plt+0x1d20>
   12ffc:	mov	r8, r0
   13000:	mvn	r0, #0
   13004:	str	r0, [r8, #48]	; 0x30
   13008:	b	13010 <__assert_fail@plt+0x1b1c>
   1300c:	mov	r8, #0
   13010:	cmp	sl, #0
   13014:	ldrbne	r0, [r4, #49]	; 0x31
   13018:	ubfxne	r0, r0, #2, #1
   1301c:	moveq	r0, #1
   13020:	ldr	r5, [r7]
   13024:	cmp	r5, #0
   13028:	beq	13154 <__assert_fail@plt+0x1c60>
   1302c:	and	r1, r6, #2048	; 0x800
   13030:	str	r1, [sp, #8]
   13034:	eor	r0, r0, #1
   13038:	str	r0, [sp, #4]
   1303c:	mov	r9, #0
   13040:	mov	r0, #0
   13044:	str	r0, [sp]
   13048:	mov	r6, #0
   1304c:	mov	r0, r5
   13050:	bl	11374 <strlen@plt>
   13054:	mov	r2, r0
   13058:	ldr	r0, [sp, #8]
   1305c:	cmp	r0, #0
   13060:	bne	13098 <__assert_fail@plt+0x1ba4>
   13064:	cmp	r2, #3
   13068:	bcc	13098 <__assert_fail@plt+0x1ba4>
   1306c:	add	r0, r5, r2
   13070:	ldrb	r0, [r0, #-1]
   13074:	cmp	r0, #47	; 0x2f
   13078:	bne	13098 <__assert_fail@plt+0x1ba4>
   1307c:	sub	r0, r5, #2
   13080:	ldrb	r1, [r0, r2]
   13084:	cmp	r1, #47	; 0x2f
   13088:	bne	13098 <__assert_fail@plt+0x1ba4>
   1308c:	sub	r2, r2, #1
   13090:	cmp	r2, #1
   13094:	bhi	13080 <__assert_fail@plt+0x1b8c>
   13098:	mov	r0, r4
   1309c:	mov	r1, r5
   130a0:	bl	132e4 <__assert_fail@plt+0x1df0>
   130a4:	cmp	r0, #0
   130a8:	beq	13204 <__assert_fail@plt+0x1d10>
   130ac:	mov	r5, r0
   130b0:	str	r8, [r0, #4]
   130b4:	mov	r0, #0
   130b8:	str	r0, [r5, #48]	; 0x30
   130bc:	add	r0, r5, #168	; 0xa8
   130c0:	str	r0, [r5, #24]
   130c4:	clz	r0, r9
   130c8:	lsr	r0, r0, #5
   130cc:	ldr	r1, [sp, #4]
   130d0:	orrs	r0, r1, r0
   130d4:	bne	13100 <__assert_fail@plt+0x1c0c>
   130d8:	mov	r0, #11
   130dc:	strh	r0, [r5, #56]	; 0x38
   130e0:	mov	r0, r5
   130e4:	mov	r1, #1
   130e8:	bl	13364 <__assert_fail@plt+0x1e70>
   130ec:	cmp	sl, #0
   130f0:	beq	1311c <__assert_fail@plt+0x1c28>
   130f4:	str	r9, [r5, #8]
   130f8:	mov	r9, r5
   130fc:	b	13138 <__assert_fail@plt+0x1c44>
   13100:	mov	r0, r4
   13104:	mov	r1, r5
   13108:	mov	r2, #0
   1310c:	bl	13394 <__assert_fail@plt+0x1ea0>
   13110:	strh	r0, [r5, #56]	; 0x38
   13114:	cmp	sl, #0
   13118:	bne	130f4 <__assert_fail@plt+0x1c00>
   1311c:	mov	r0, #0
   13120:	str	r0, [r5, #8]
   13124:	cmp	r9, #0
   13128:	beq	1314c <__assert_fail@plt+0x1c58>
   1312c:	ldr	r0, [sp]
   13130:	str	r5, [r0, #8]
   13134:	str	r5, [sp]
   13138:	add	r6, r6, #1
   1313c:	ldr	r5, [r7, #4]!
   13140:	cmp	r5, #0
   13144:	bne	1304c <__assert_fail@plt+0x1b58>
   13148:	b	1315c <__assert_fail@plt+0x1c68>
   1314c:	str	r5, [sp]
   13150:	b	130f8 <__assert_fail@plt+0x1c04>
   13154:	mov	r9, #0
   13158:	b	13180 <__assert_fail@plt+0x1c8c>
   1315c:	cmp	sl, #0
   13160:	beq	13180 <__assert_fail@plt+0x1c8c>
   13164:	cmp	r6, #2
   13168:	bcc	13180 <__assert_fail@plt+0x1c8c>
   1316c:	mov	r0, r4
   13170:	mov	r1, r9
   13174:	mov	r2, r6
   13178:	bl	134fc <__assert_fail@plt+0x2008>
   1317c:	mov	r9, r0
   13180:	movw	r1, #41364	; 0xa194
   13184:	movt	r1, #1
   13188:	mov	r0, r4
   1318c:	mov	r2, #0
   13190:	bl	132e4 <__assert_fail@plt+0x1df0>
   13194:	str	r0, [r4]
   13198:	cmp	r0, #0
   1319c:	beq	13204 <__assert_fail@plt+0x1d10>
   131a0:	mov	r1, #9
   131a4:	strh	r1, [r0, #56]	; 0x38
   131a8:	str	r9, [r0, #8]
   131ac:	mov	r1, #1
   131b0:	str	r1, [r0, #48]	; 0x30
   131b4:	mov	r0, r4
   131b8:	bl	135dc <__assert_fail@plt+0x20e8>
   131bc:	cmp	r0, #0
   131c0:	beq	13204 <__assert_fail@plt+0x1d10>
   131c4:	ldrh	r0, [r4, #48]	; 0x30
   131c8:	tst	r0, #516	; 0x204
   131cc:	bne	131f4 <__assert_fail@plt+0x1d00>
   131d0:	movw	r1, #43436	; 0xa9ac
   131d4:	movt	r1, #1
   131d8:	mov	r0, r4
   131dc:	bl	13668 <__assert_fail@plt+0x2174>
   131e0:	str	r0, [r4, #28]
   131e4:	cmn	r0, #1
   131e8:	ldrle	r0, [r4, #48]	; 0x30
   131ec:	orrle	r0, r0, #4
   131f0:	strle	r0, [r4, #48]	; 0x30
   131f4:	add	r0, r4, #60	; 0x3c
   131f8:	mvn	r1, #0
   131fc:	bl	15f10 <__assert_fail@plt+0x4a1c>
   13200:	b	12f68 <__assert_fail@plt+0x1a74>
   13204:	mov	r0, r9
   13208:	bl	13698 <__assert_fail@plt+0x21a4>
   1320c:	mov	r0, r8
   13210:	bl	12f04 <__assert_fail@plt+0x1a10>
   13214:	ldr	r0, [r4, #24]
   13218:	bl	12f04 <__assert_fail@plt+0x1a10>
   1321c:	mov	r0, r4
   13220:	bl	12f04 <__assert_fail@plt+0x1a10>
   13224:	b	12f64 <__assert_fail@plt+0x1a70>
   13228:	mov	r1, r0
   1322c:	ldr	r0, [r0]
   13230:	cmp	r0, #0
   13234:	moveq	r0, #1
   13238:	bxeq	lr
   1323c:	push	{r4, r5, fp, lr}
   13240:	add	fp, sp, #8
   13244:	add	r5, r1, #4
   13248:	mov	r4, #0
   1324c:	bl	11374 <strlen@plt>
   13250:	cmp	r0, r4
   13254:	movhi	r4, r0
   13258:	ldr	r0, [r5], #4
   1325c:	cmp	r0, #0
   13260:	bne	1324c <__assert_fail@plt+0x1d58>
   13264:	add	r0, r4, #1
   13268:	pop	{r4, r5, fp, pc}
   1326c:	push	{r4, r5, fp, lr}
   13270:	add	fp, sp, #8
   13274:	mov	r4, r0
   13278:	ldr	r0, [r0, #36]	; 0x24
   1327c:	add	r1, r1, #256	; 0x100
   13280:	adds	r1, r1, r0
   13284:	bcc	132ac <__assert_fail@plt+0x1db8>
   13288:	ldr	r0, [r4, #24]
   1328c:	bl	12f04 <__assert_fail@plt+0x1a10>
   13290:	mov	r5, #0
   13294:	str	r5, [r4, #24]
   13298:	bl	113a4 <__errno_location@plt>
   1329c:	mov	r1, #36	; 0x24
   132a0:	str	r1, [r0]
   132a4:	mov	r0, r5
   132a8:	pop	{r4, r5, fp, pc}
   132ac:	str	r1, [r4, #36]	; 0x24
   132b0:	ldr	r0, [r4, #24]
   132b4:	bl	18ca8 <__assert_fail@plt+0x77b4>
   132b8:	cmp	r0, #0
   132bc:	strne	r0, [r4, #24]
   132c0:	movne	r5, #1
   132c4:	movne	r0, r5
   132c8:	popne	{r4, r5, fp, pc}
   132cc:	ldr	r0, [r4, #24]
   132d0:	bl	12f04 <__assert_fail@plt+0x1a10>
   132d4:	mov	r5, #0
   132d8:	str	r5, [r4, #24]
   132dc:	mov	r0, r5
   132e0:	pop	{r4, r5, fp, pc}
   132e4:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   132e8:	add	fp, sp, #24
   132ec:	mov	r6, r2
   132f0:	mov	r8, r1
   132f4:	mov	r5, r0
   132f8:	add	r0, r2, #176	; 0xb0
   132fc:	bic	r0, r0, #7
   13300:	bl	18c78 <__assert_fail@plt+0x7784>
   13304:	cmp	r0, #0
   13308:	moveq	r4, #0
   1330c:	moveq	r0, r4
   13310:	popeq	{r4, r5, r6, r7, r8, sl, fp, pc}
   13314:	mov	r4, r0
   13318:	add	r7, r0, #168	; 0xa8
   1331c:	mov	r0, r7
   13320:	mov	r1, r8
   13324:	mov	r2, r6
   13328:	bl	11248 <memcpy@plt>
   1332c:	mov	r0, #0
   13330:	strb	r0, [r7, r6]
   13334:	str	r6, [r4, #52]	; 0x34
   13338:	str	r5, [r4, #44]	; 0x2c
   1333c:	ldr	r1, [r5, #24]
   13340:	mov	r2, #196608	; 0x30000
   13344:	str	r2, [r4, #58]	; 0x3a
   13348:	str	r0, [r4, #12]
   1334c:	str	r0, [r4, #16]
   13350:	str	r0, [r4, #20]
   13354:	str	r1, [r4, #28]
   13358:	str	r0, [r4, #32]
   1335c:	mov	r0, r4
   13360:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   13364:	ldrh	r2, [r0, #56]	; 0x38
   13368:	cmp	r2, #11
   1336c:	bne	13388 <__assert_fail@plt+0x1e94>
   13370:	mov	r3, #0
   13374:	mov	r2, #1
   13378:	cmp	r1, #0
   1337c:	movwne	r2, #2
   13380:	strd	r2, [r0, #112]	; 0x70
   13384:	bx	lr
   13388:	push	{fp, lr}
   1338c:	mov	fp, sp
   13390:	bl	114ac <abort@plt>
   13394:	push	{r4, r5, r6, sl, fp, lr}
   13398:	add	fp, sp, #16
   1339c:	mov	r4, r1
   133a0:	ldr	r1, [r1, #48]	; 0x30
   133a4:	cmp	r1, #0
   133a8:	ldrbeq	r1, [r0, #48]	; 0x30
   133ac:	andeq	r1, r1, #1
   133b0:	orreq	r2, r1, r2
   133b4:	add	r5, r4, #64	; 0x40
   133b8:	cmp	r2, #0
   133bc:	ldreq	r1, [r0, #48]	; 0x30
   133c0:	andseq	r1, r1, #2
   133c4:	beq	13414 <__assert_fail@plt+0x1f20>
   133c8:	ldr	r0, [r4, #24]
   133cc:	mov	r1, r5
   133d0:	bl	19b1c <__assert_fail@plt+0x8628>
   133d4:	cmp	r0, #0
   133d8:	beq	13488 <__assert_fail@plt+0x1f94>
   133dc:	bl	113a4 <__errno_location@plt>
   133e0:	mov	r6, r0
   133e4:	ldr	r0, [r0]
   133e8:	cmp	r0, #2
   133ec:	bne	13438 <__assert_fail@plt+0x1f44>
   133f0:	ldr	r0, [r4, #24]
   133f4:	mov	r1, r5
   133f8:	bl	19b3c <__assert_fail@plt+0x8648>
   133fc:	cmp	r0, #0
   13400:	bne	13438 <__assert_fail@plt+0x1f44>
   13404:	mov	r0, #0
   13408:	str	r0, [r6]
   1340c:	mov	r0, #13
   13410:	pop	{r4, r5, r6, sl, fp, pc}
   13414:	ldr	r1, [r4, #24]
   13418:	ldr	r0, [r0, #32]
   1341c:	mov	r2, r5
   13420:	mov	r3, #256	; 0x100
   13424:	bl	19b4c <__assert_fail@plt+0x8658>
   13428:	cmp	r0, #0
   1342c:	beq	13488 <__assert_fail@plt+0x1f94>
   13430:	bl	113a4 <__errno_location@plt>
   13434:	mov	r6, r0
   13438:	ldr	r0, [r6]
   1343c:	str	r0, [r4, #32]
   13440:	mov	r0, #0
   13444:	vmov.i32	q8, #0	; 0x00000000
   13448:	str	r0, [r5, #96]	; 0x60
   1344c:	add	r1, r5, #80	; 0x50
   13450:	vst1.64	{d16-d17}, [r1]
   13454:	add	r1, r5, #64	; 0x40
   13458:	vst1.64	{d16-d17}, [r1]
   1345c:	add	r1, r5, #48	; 0x30
   13460:	vst1.64	{d16-d17}, [r1]
   13464:	add	r1, r5, #32
   13468:	vst1.64	{d16-d17}, [r1]
   1346c:	add	r1, r5, #16
   13470:	vst1.64	{d16-d17}, [r1]
   13474:	mov	r1, #100	; 0x64
   13478:	vst1.64	{d16-d17}, [r5], r1
   1347c:	str	r0, [r5]
   13480:	mov	r0, #10
   13484:	pop	{r4, r5, r6, sl, fp, pc}
   13488:	ldr	r0, [r4, #80]	; 0x50
   1348c:	and	r0, r0, #61440	; 0xf000
   13490:	cmp	r0, #40960	; 0xa000
   13494:	moveq	r0, #12
   13498:	popeq	{r4, r5, r6, sl, fp, pc}
   1349c:	cmp	r0, #32768	; 0x8000
   134a0:	moveq	r0, #8
   134a4:	popeq	{r4, r5, r6, sl, fp, pc}
   134a8:	cmp	r0, #16384	; 0x4000
   134ac:	bne	134e0 <__assert_fail@plt+0x1fec>
   134b0:	ldrb	r1, [r4, #168]	; 0xa8
   134b4:	mov	r0, #1
   134b8:	cmp	r1, #46	; 0x2e
   134bc:	popne	{r4, r5, r6, sl, fp, pc}
   134c0:	ldrb	r1, [r4, #169]	; 0xa9
   134c4:	cmp	r1, #0
   134c8:	beq	134e8 <__assert_fail@plt+0x1ff4>
   134cc:	cmp	r1, #46	; 0x2e
   134d0:	ldrbeq	r1, [r4, #170]	; 0xaa
   134d4:	cmpeq	r1, #0
   134d8:	beq	134e8 <__assert_fail@plt+0x1ff4>
   134dc:	pop	{r4, r5, r6, sl, fp, pc}
   134e0:	mov	r0, #3
   134e4:	pop	{r4, r5, r6, sl, fp, pc}
   134e8:	ldr	r1, [r4, #48]	; 0x30
   134ec:	mov	r0, #5
   134f0:	cmp	r1, #0
   134f4:	movweq	r0, #1
   134f8:	pop	{r4, r5, r6, sl, fp, pc}
   134fc:	push	{r4, r5, r6, r7, fp, lr}
   13500:	add	fp, sp, #16
   13504:	mov	r6, r2
   13508:	mov	r4, r1
   1350c:	mov	r5, r0
   13510:	ldr	r7, [r0, #44]	; 0x2c
   13514:	ldr	r0, [r0, #40]	; 0x28
   13518:	cmp	r0, r2
   1351c:	bcs	13548 <__assert_fail@plt+0x2054>
   13520:	add	r1, r6, #40	; 0x28
   13524:	str	r1, [r5, #40]	; 0x28
   13528:	cmn	r1, #-1073741823	; 0xc0000001
   1352c:	bhi	135c0 <__assert_fail@plt+0x20cc>
   13530:	ldr	r0, [r5, #8]
   13534:	lsl	r1, r1, #2
   13538:	bl	18ca8 <__assert_fail@plt+0x77b4>
   1353c:	cmp	r0, #0
   13540:	beq	135c0 <__assert_fail@plt+0x20cc>
   13544:	str	r0, [r5, #8]
   13548:	cmp	r4, #0
   1354c:	beq	13564 <__assert_fail@plt+0x2070>
   13550:	ldr	r0, [r5, #8]
   13554:	str	r4, [r0], #4
   13558:	ldr	r4, [r4, #8]
   1355c:	cmp	r4, #0
   13560:	bne	13554 <__assert_fail@plt+0x2060>
   13564:	ldr	r0, [r5, #8]
   13568:	mov	r1, r6
   1356c:	mov	r2, #4
   13570:	mov	r3, r7
   13574:	bl	11470 <qsort@plt>
   13578:	subs	r1, r6, #1
   1357c:	ldr	r0, [r5, #8]
   13580:	ldr	r4, [r0]
   13584:	beq	135ac <__assert_fail@plt+0x20b8>
   13588:	add	r2, r0, #4
   1358c:	rsb	r3, r6, #1
   13590:	ldr	r7, [r2, #-4]
   13594:	ldr	r6, [r2]
   13598:	str	r6, [r7, #8]
   1359c:	add	r2, r2, #4
   135a0:	adds	r3, r3, #1
   135a4:	bne	13590 <__assert_fail@plt+0x209c>
   135a8:	add	r0, r0, r1, lsl #2
   135ac:	ldr	r0, [r0]
   135b0:	mov	r1, #0
   135b4:	str	r1, [r0, #8]
   135b8:	mov	r0, r4
   135bc:	pop	{r4, r5, r6, r7, fp, pc}
   135c0:	ldr	r0, [r5, #8]
   135c4:	bl	12f04 <__assert_fail@plt+0x1a10>
   135c8:	mov	r0, #0
   135cc:	str	r0, [r5, #40]	; 0x28
   135d0:	str	r0, [r5, #8]
   135d4:	mov	r0, r4
   135d8:	pop	{r4, r5, r6, r7, fp, pc}
   135dc:	push	{r4, r5, fp, lr}
   135e0:	add	fp, sp, #8
   135e4:	sub	sp, sp, #8
   135e8:	mov	r4, r0
   135ec:	ldrh	r0, [r0, #48]	; 0x30
   135f0:	movw	r1, #258	; 0x102
   135f4:	tst	r0, r1
   135f8:	beq	13638 <__assert_fail@plt+0x2144>
   135fc:	movw	r0, #12036	; 0x2f04
   13600:	movt	r0, #1
   13604:	str	r0, [sp]
   13608:	mov	r5, #0
   1360c:	movw	r2, #19660	; 0x4ccc
   13610:	movt	r2, #1
   13614:	movw	r3, #19692	; 0x4cec
   13618:	movt	r3, #1
   1361c:	mov	r0, #31
   13620:	mov	r1, #0
   13624:	bl	15478 <__assert_fail@plt+0x3f84>
   13628:	str	r0, [r4, #56]	; 0x38
   1362c:	cmp	r0, #0
   13630:	movne	r5, #1
   13634:	b	1365c <__assert_fail@plt+0x2168>
   13638:	mov	r0, #32
   1363c:	bl	18c78 <__assert_fail@plt+0x7784>
   13640:	str	r0, [r4, #56]	; 0x38
   13644:	cmp	r0, #0
   13648:	beq	13658 <__assert_fail@plt+0x2164>
   1364c:	bl	191fc <__assert_fail@plt+0x7d08>
   13650:	mov	r5, #1
   13654:	b	1365c <__assert_fail@plt+0x2168>
   13658:	mov	r5, #0
   1365c:	mov	r0, r5
   13660:	sub	sp, fp, #8
   13664:	pop	{r4, r5, fp, pc}
   13668:	ldr	r3, [r0, #48]	; 0x30
   1366c:	mov	r2, #32768	; 0x8000
   13670:	and	r2, r2, r3, lsl #11
   13674:	orr	r2, r2, #18688	; 0x4900
   13678:	orr	r2, r2, #524288	; 0x80000
   1367c:	tst	r3, #512	; 0x200
   13680:	bne	13690 <__assert_fail@plt+0x219c>
   13684:	mov	r0, r1
   13688:	mov	r1, r2
   1368c:	b	1959c <__assert_fail@plt+0x80a8>
   13690:	ldr	r0, [r0, #32]
   13694:	b	16038 <__assert_fail@plt+0x4b44>
   13698:	push	{r4, r6, r7, sl, fp, lr}
   1369c:	add	fp, sp, #16
   136a0:	cmp	r0, #0
   136a4:	popeq	{r4, r6, r7, sl, fp, pc}
   136a8:	mov	r4, r0
   136ac:	ldrd	r6, [r4, #8]
   136b0:	cmp	r7, #0
   136b4:	beq	136c0 <__assert_fail@plt+0x21cc>
   136b8:	mov	r0, r7
   136bc:	bl	114d0 <closedir@plt>
   136c0:	mov	r0, r4
   136c4:	bl	12f04 <__assert_fail@plt+0x1a10>
   136c8:	cmp	r6, #0
   136cc:	mov	r4, r6
   136d0:	bne	136ac <__assert_fail@plt+0x21b8>
   136d4:	pop	{r4, r6, r7, sl, fp, pc}
   136d8:	push	{r4, r5, fp, lr}
   136dc:	add	fp, sp, #8
   136e0:	mov	r4, r0
   136e4:	ldr	r0, [r0]
   136e8:	cmp	r0, #0
   136ec:	beq	1372c <__assert_fail@plt+0x2238>
   136f0:	ldr	r1, [r0, #48]	; 0x30
   136f4:	cmp	r1, #0
   136f8:	blt	13720 <__assert_fail@plt+0x222c>
   136fc:	ldr	r5, [r0, #8]
   13700:	cmp	r5, #0
   13704:	ldreq	r5, [r0, #4]
   13708:	bl	12f04 <__assert_fail@plt+0x1a10>
   1370c:	ldr	r0, [r5, #48]	; 0x30
   13710:	cmn	r0, #1
   13714:	mov	r0, r5
   13718:	bgt	136fc <__assert_fail@plt+0x2208>
   1371c:	b	13724 <__assert_fail@plt+0x2230>
   13720:	mov	r5, r0
   13724:	mov	r0, r5
   13728:	bl	12f04 <__assert_fail@plt+0x1a10>
   1372c:	ldr	r0, [r4, #4]
   13730:	cmp	r0, #0
   13734:	blne	13698 <__assert_fail@plt+0x21a4>
   13738:	ldr	r0, [r4, #8]
   1373c:	bl	12f04 <__assert_fail@plt+0x1a10>
   13740:	ldr	r0, [r4, #24]
   13744:	bl	12f04 <__assert_fail@plt+0x1a10>
   13748:	ldr	r0, [r4, #48]	; 0x30
   1374c:	tst	r0, #512	; 0x200
   13750:	bne	1377c <__assert_fail@plt+0x2288>
   13754:	mov	r5, #0
   13758:	tst	r0, #4
   1375c:	bne	137c0 <__assert_fail@plt+0x22cc>
   13760:	ldr	r0, [r4, #28]
   13764:	bl	11464 <fchdir@plt>
   13768:	cmp	r0, #0
   1376c:	beq	1379c <__assert_fail@plt+0x22a8>
   13770:	bl	113a4 <__errno_location@plt>
   13774:	ldr	r5, [r0]
   13778:	b	137a0 <__assert_fail@plt+0x22ac>
   1377c:	ldr	r0, [r4, #32]
   13780:	mov	r5, #0
   13784:	cmp	r0, #0
   13788:	blt	137c0 <__assert_fail@plt+0x22cc>
   1378c:	bl	114b8 <close@plt>
   13790:	cmp	r0, #0
   13794:	bne	137b8 <__assert_fail@plt+0x22c4>
   13798:	b	137c0 <__assert_fail@plt+0x22cc>
   1379c:	mov	r5, #0
   137a0:	ldr	r0, [r4, #28]
   137a4:	bl	114b8 <close@plt>
   137a8:	cmp	r5, #0
   137ac:	bne	137c0 <__assert_fail@plt+0x22cc>
   137b0:	cmp	r0, #0
   137b4:	beq	137c0 <__assert_fail@plt+0x22cc>
   137b8:	bl	113a4 <__errno_location@plt>
   137bc:	ldr	r5, [r0]
   137c0:	add	r0, r4, #60	; 0x3c
   137c4:	bl	13804 <__assert_fail@plt+0x2310>
   137c8:	ldr	r0, [r4, #52]	; 0x34
   137cc:	cmp	r0, #0
   137d0:	beq	137d8 <__assert_fail@plt+0x22e4>
   137d4:	bl	1574c <__assert_fail@plt+0x4258>
   137d8:	mov	r0, r4
   137dc:	bl	1383c <__assert_fail@plt+0x2348>
   137e0:	mov	r0, r4
   137e4:	bl	12f04 <__assert_fail@plt+0x1a10>
   137e8:	cmp	r5, #0
   137ec:	moveq	r0, #0
   137f0:	popeq	{r4, r5, fp, pc}
   137f4:	bl	113a4 <__errno_location@plt>
   137f8:	str	r5, [r0]
   137fc:	mvn	r0, #0
   13800:	pop	{r4, r5, fp, pc}
   13804:	push	{r4, sl, fp, lr}
   13808:	add	fp, sp, #8
   1380c:	mov	r4, r0
   13810:	b	13818 <__assert_fail@plt+0x2324>
   13814:	mov	r0, r4
   13818:	bl	15f3c <__assert_fail@plt+0x4a48>
   1381c:	cmp	r0, #0
   13820:	popne	{r4, sl, fp, pc}
   13824:	mov	r0, r4
   13828:	bl	15f88 <__assert_fail@plt+0x4a94>
   1382c:	cmp	r0, #0
   13830:	blt	13814 <__assert_fail@plt+0x2320>
   13834:	bl	114b8 <close@plt>
   13838:	b	13814 <__assert_fail@plt+0x2320>
   1383c:	ldrh	r1, [r0, #48]	; 0x30
   13840:	movw	r2, #258	; 0x102
   13844:	tst	r1, r2
   13848:	beq	1385c <__assert_fail@plt+0x2368>
   1384c:	ldr	r0, [r0, #56]	; 0x38
   13850:	cmp	r0, #0
   13854:	bxeq	lr
   13858:	b	1574c <__assert_fail@plt+0x4258>
   1385c:	ldr	r0, [r0, #56]	; 0x38
   13860:	b	12f04 <__assert_fail@plt+0x1a10>
   13864:	push	{r4, r5, r6, r7, fp, lr}
   13868:	add	fp, sp, #16
   1386c:	ldr	r6, [r0]
   13870:	mov	r5, #0
   13874:	cmp	r6, #0
   13878:	beq	13e10 <__assert_fail@plt+0x291c>
   1387c:	mov	r4, r0
   13880:	ldr	r1, [r0, #48]	; 0x30
   13884:	tst	r1, #8192	; 0x2000
   13888:	bne	13e10 <__assert_fail@plt+0x291c>
   1388c:	ldrh	r0, [r6, #60]	; 0x3c
   13890:	mov	r2, #3
   13894:	strh	r2, [r6, #60]	; 0x3c
   13898:	cmp	r0, #2
   1389c:	beq	138c4 <__assert_fail@plt+0x23d0>
   138a0:	cmp	r0, #1
   138a4:	bne	13930 <__assert_fail@plt+0x243c>
   138a8:	mov	r0, r4
   138ac:	mov	r1, r6
   138b0:	mov	r2, #0
   138b4:	bl	13394 <__assert_fail@plt+0x1ea0>
   138b8:	strh	r0, [r6, #56]	; 0x38
   138bc:	mov	r0, r6
   138c0:	pop	{r4, r5, r6, r7, fp, pc}
   138c4:	ldrh	r2, [r6, #56]	; 0x38
   138c8:	movw	r3, #65534	; 0xfffe
   138cc:	and	r2, r2, r3
   138d0:	cmp	r2, #12
   138d4:	bne	13930 <__assert_fail@plt+0x243c>
   138d8:	mov	r0, r4
   138dc:	mov	r1, r6
   138e0:	mov	r2, #1
   138e4:	bl	13394 <__assert_fail@plt+0x1ea0>
   138e8:	strh	r0, [r6, #56]	; 0x38
   138ec:	cmp	r0, #1
   138f0:	bne	139f8 <__assert_fail@plt+0x2504>
   138f4:	ldrb	r0, [r4, #48]	; 0x30
   138f8:	tst	r0, #4
   138fc:	bne	139f8 <__assert_fail@plt+0x2504>
   13900:	movw	r1, #43436	; 0xa9ac
   13904:	movt	r1, #1
   13908:	mov	r0, r4
   1390c:	bl	13668 <__assert_fail@plt+0x2174>
   13910:	str	r0, [r6, #36]	; 0x24
   13914:	cmn	r0, #1
   13918:	ble	13cf0 <__assert_fail@plt+0x27fc>
   1391c:	ldrh	r0, [r6, #58]	; 0x3a
   13920:	orr	r0, r0, #2
   13924:	strh	r0, [r6, #58]	; 0x3a
   13928:	mov	r5, r6
   1392c:	b	13b98 <__assert_fail@plt+0x26a4>
   13930:	ldrh	r2, [r6, #56]	; 0x38
   13934:	cmp	r2, #1
   13938:	bne	1398c <__assert_fail@plt+0x2498>
   1393c:	cmp	r0, #4
   13940:	bne	13a00 <__assert_fail@plt+0x250c>
   13944:	ldrb	r0, [r6, #58]	; 0x3a
   13948:	tst	r0, #2
   1394c:	beq	13958 <__assert_fail@plt+0x2464>
   13950:	ldr	r0, [r6, #36]	; 0x24
   13954:	bl	114b8 <close@plt>
   13958:	ldr	r0, [r4, #4]
   1395c:	cmp	r0, #0
   13960:	beq	13970 <__assert_fail@plt+0x247c>
   13964:	bl	13698 <__assert_fail@plt+0x21a4>
   13968:	mov	r0, #0
   1396c:	str	r0, [r4, #4]
   13970:	mov	r0, #6
   13974:	strh	r0, [r6, #56]	; 0x38
   13978:	mov	r0, r4
   1397c:	mov	r1, r6
   13980:	bl	13e1c <__assert_fail@plt+0x2928>
   13984:	mov	r0, r6
   13988:	pop	{r4, r5, r6, r7, fp, pc}
   1398c:	ldr	r5, [r6, #8]
   13990:	cmp	r5, #0
   13994:	beq	13a98 <__assert_fail@plt+0x25a4>
   13998:	str	r5, [r4]
   1399c:	mov	r0, r6
   139a0:	bl	12f04 <__assert_fail@plt+0x1a10>
   139a4:	ldr	r0, [r5, #48]	; 0x30
   139a8:	cmp	r0, #0
   139ac:	beq	13ae4 <__assert_fail@plt+0x25f0>
   139b0:	ldrh	r0, [r5, #60]	; 0x3c
   139b4:	cmp	r0, #4
   139b8:	mov	r6, r5
   139bc:	beq	1398c <__assert_fail@plt+0x2498>
   139c0:	cmp	r0, #2
   139c4:	bne	13b5c <__assert_fail@plt+0x2668>
   139c8:	mov	r0, r4
   139cc:	mov	r1, r5
   139d0:	mov	r2, #1
   139d4:	bl	13394 <__assert_fail@plt+0x1ea0>
   139d8:	strh	r0, [r5, #56]	; 0x38
   139dc:	cmp	r0, #1
   139e0:	ldrbeq	r0, [r4, #48]	; 0x30
   139e4:	tsteq	r0, #4
   139e8:	beq	13d7c <__assert_fail@plt+0x2888>
   139ec:	mov	r0, #3
   139f0:	strh	r0, [r5, #60]	; 0x3c
   139f4:	b	13b5c <__assert_fail@plt+0x2668>
   139f8:	mov	r5, r6
   139fc:	b	13b98 <__assert_fail@plt+0x26a4>
   13a00:	tst	r1, #64	; 0x40
   13a04:	beq	13a28 <__assert_fail@plt+0x2534>
   13a08:	ldr	r0, [r4, #16]
   13a0c:	ldr	r3, [r4, #20]
   13a10:	ldr	r2, [r6, #64]	; 0x40
   13a14:	ldr	r5, [r6, #68]	; 0x44
   13a18:	eor	r3, r5, r3
   13a1c:	eor	r0, r2, r0
   13a20:	orrs	r0, r0, r3
   13a24:	bne	13944 <__assert_fail@plt+0x2450>
   13a28:	ldr	r0, [r4, #4]
   13a2c:	cmp	r0, #0
   13a30:	beq	13b38 <__assert_fail@plt+0x2644>
   13a34:	tst	r1, #4096	; 0x1000
   13a38:	bne	13b24 <__assert_fail@plt+0x2630>
   13a3c:	ldr	r3, [r6, #24]
   13a40:	mov	r0, r4
   13a44:	mov	r1, r6
   13a48:	mvn	r2, #0
   13a4c:	bl	13eec <__assert_fail@plt+0x29f8>
   13a50:	cmp	r0, #0
   13a54:	beq	13b50 <__assert_fail@plt+0x265c>
   13a58:	bl	113a4 <__errno_location@plt>
   13a5c:	ldr	r0, [r0]
   13a60:	str	r0, [r6, #32]
   13a64:	ldrh	r0, [r6, #58]	; 0x3a
   13a68:	orr	r0, r0, #1
   13a6c:	strh	r0, [r6, #58]	; 0x3a
   13a70:	ldr	r0, [r4, #4]
   13a74:	cmp	r0, #0
   13a78:	beq	13b50 <__assert_fail@plt+0x265c>
   13a7c:	ldmib	r0, {r1, r2}
   13a80:	ldr	r1, [r1, #24]
   13a84:	str	r1, [r0, #24]
   13a88:	cmp	r2, #0
   13a8c:	mov	r0, r2
   13a90:	bne	13a7c <__assert_fail@plt+0x2588>
   13a94:	b	13b50 <__assert_fail@plt+0x265c>
   13a98:	ldr	r0, [r6, #4]
   13a9c:	ldr	r1, [r0, #12]
   13aa0:	cmp	r1, #0
   13aa4:	beq	13c54 <__assert_fail@plt+0x2760>
   13aa8:	str	r0, [r4]
   13aac:	ldr	r1, [r4, #24]
   13ab0:	ldr	r0, [r0, #40]	; 0x28
   13ab4:	mov	r5, #0
   13ab8:	strb	r5, [r1, r0]
   13abc:	mov	r0, r4
   13ac0:	mov	r1, #3
   13ac4:	bl	140cc <__assert_fail@plt+0x2bd8>
   13ac8:	cmp	r0, #0
   13acc:	beq	13c48 <__assert_fail@plt+0x2754>
   13ad0:	mov	r7, r0
   13ad4:	mov	r0, r6
   13ad8:	bl	12f04 <__assert_fail@plt+0x1a10>
   13adc:	mov	r5, r7
   13ae0:	b	13b5c <__assert_fail@plt+0x2668>
   13ae4:	mov	r0, r4
   13ae8:	bl	14938 <__assert_fail@plt+0x3444>
   13aec:	cmp	r0, #0
   13af0:	beq	13b04 <__assert_fail@plt+0x2610>
   13af4:	ldr	r0, [r4, #48]	; 0x30
   13af8:	orr	r0, r0, #8192	; 0x2000
   13afc:	str	r0, [r4, #48]	; 0x30
   13b00:	b	13c10 <__assert_fail@plt+0x271c>
   13b04:	mov	r0, r4
   13b08:	bl	1383c <__assert_fail@plt+0x2348>
   13b0c:	mov	r0, r4
   13b10:	mov	r1, r5
   13b14:	bl	14994 <__assert_fail@plt+0x34a0>
   13b18:	mov	r0, r4
   13b1c:	bl	135dc <__assert_fail@plt+0x20e8>
   13b20:	b	13b98 <__assert_fail@plt+0x26a4>
   13b24:	bic	r1, r1, #4096	; 0x1000
   13b28:	str	r1, [r4, #48]	; 0x30
   13b2c:	bl	13698 <__assert_fail@plt+0x21a4>
   13b30:	mov	r0, #0
   13b34:	str	r0, [r4, #4]
   13b38:	mov	r0, r4
   13b3c:	mov	r1, #3
   13b40:	bl	140cc <__assert_fail@plt+0x2bd8>
   13b44:	str	r0, [r4, #4]
   13b48:	cmp	r0, #0
   13b4c:	beq	13c1c <__assert_fail@plt+0x2728>
   13b50:	ldr	r5, [r4, #4]
   13b54:	mov	r0, #0
   13b58:	str	r0, [r4, #4]
   13b5c:	ldr	r0, [r5, #4]
   13b60:	ldr	r1, [r0, #28]
   13b64:	ldr	r0, [r0, #40]	; 0x28
   13b68:	sub	r2, r0, #1
   13b6c:	ldrb	r1, [r1, r2]
   13b70:	cmp	r1, #47	; 0x2f
   13b74:	moveq	r0, r2
   13b78:	ldr	r1, [r4, #24]
   13b7c:	mov	r2, #47	; 0x2f
   13b80:	strb	r2, [r1, r0]!
   13b84:	add	r0, r1, #1
   13b88:	add	r1, r5, #168	; 0xa8
   13b8c:	ldr	r2, [r5, #52]	; 0x34
   13b90:	add	r2, r2, #1
   13b94:	bl	11224 <memmove@plt>
   13b98:	str	r5, [r4]
   13b9c:	ldrh	r0, [r5, #56]	; 0x38
   13ba0:	cmp	r0, #11
   13ba4:	bne	13bd8 <__assert_fail@plt+0x26e4>
   13ba8:	ldrd	r0, [r5, #112]	; 0x70
   13bac:	eor	r2, r0, #1
   13bb0:	orrs	r2, r2, r1
   13bb4:	beq	13e10 <__assert_fail@plt+0x291c>
   13bb8:	eor	r0, r0, #2
   13bbc:	orrs	r0, r0, r1
   13bc0:	bne	13e18 <__assert_fail@plt+0x2924>
   13bc4:	mov	r0, r4
   13bc8:	mov	r1, r5
   13bcc:	mov	r2, #0
   13bd0:	bl	13394 <__assert_fail@plt+0x1ea0>
   13bd4:	strh	r0, [r5, #56]	; 0x38
   13bd8:	cmp	r0, #1
   13bdc:	bne	13e10 <__assert_fail@plt+0x291c>
   13be0:	ldr	r0, [r5, #48]	; 0x30
   13be4:	cmp	r0, #0
   13be8:	ldrdeq	r0, [r5, #64]	; 0x40
   13bec:	strdeq	r0, [r4, #16]
   13bf0:	mov	r0, r4
   13bf4:	mov	r1, r5
   13bf8:	bl	14a1c <__assert_fail@plt+0x3528>
   13bfc:	cmp	r0, #0
   13c00:	bne	13e10 <__assert_fail@plt+0x291c>
   13c04:	bl	113a4 <__errno_location@plt>
   13c08:	mov	r1, #12
   13c0c:	str	r1, [r0]
   13c10:	mov	r5, #0
   13c14:	mov	r0, r5
   13c18:	pop	{r4, r5, r6, r7, fp, pc}
   13c1c:	ldrb	r0, [r4, #49]	; 0x31
   13c20:	tst	r0, #32
   13c24:	mov	r5, #0
   13c28:	bne	13e10 <__assert_fail@plt+0x291c>
   13c2c:	ldr	r0, [r6, #32]
   13c30:	cmp	r0, #0
   13c34:	ldrhne	r0, [r6, #56]	; 0x38
   13c38:	cmpne	r0, #4
   13c3c:	beq	13978 <__assert_fail@plt+0x2484>
   13c40:	mov	r0, #7
   13c44:	b	13974 <__assert_fail@plt+0x2480>
   13c48:	ldrb	r0, [r4, #49]	; 0x31
   13c4c:	tst	r0, #32
   13c50:	bne	13e10 <__assert_fail@plt+0x291c>
   13c54:	ldr	r5, [r6, #4]
   13c58:	str	r5, [r4]
   13c5c:	mov	r0, r6
   13c60:	bl	12f04 <__assert_fail@plt+0x1a10>
   13c64:	ldr	r0, [r5, #48]	; 0x30
   13c68:	cmn	r0, #1
   13c6c:	beq	13cd0 <__assert_fail@plt+0x27dc>
   13c70:	ldrh	r0, [r5, #56]	; 0x38
   13c74:	cmp	r0, #11
   13c78:	beq	13e18 <__assert_fail@plt+0x2924>
   13c7c:	ldr	r0, [r5, #40]	; 0x28
   13c80:	ldr	r1, [r4, #24]
   13c84:	mov	r2, #0
   13c88:	strb	r2, [r1, r0]
   13c8c:	ldr	r0, [r5, #48]	; 0x30
   13c90:	cmp	r0, #0
   13c94:	beq	13d0c <__assert_fail@plt+0x2818>
   13c98:	ldrh	r0, [r5, #58]	; 0x3a
   13c9c:	tst	r0, #2
   13ca0:	bne	13d38 <__assert_fail@plt+0x2844>
   13ca4:	tst	r0, #1
   13ca8:	bne	13dd4 <__assert_fail@plt+0x28e0>
   13cac:	ldr	r1, [r5, #4]
   13cb0:	movw	r3, #43435	; 0xa9ab
   13cb4:	movt	r3, #1
   13cb8:	mov	r0, r4
   13cbc:	mvn	r2, #0
   13cc0:	bl	13eec <__assert_fail@plt+0x29f8>
   13cc4:	cmp	r0, #0
   13cc8:	bne	13d1c <__assert_fail@plt+0x2828>
   13ccc:	b	13dd4 <__assert_fail@plt+0x28e0>
   13cd0:	mov	r0, r5
   13cd4:	bl	12f04 <__assert_fail@plt+0x1a10>
   13cd8:	bl	113a4 <__errno_location@plt>
   13cdc:	mov	r5, #0
   13ce0:	str	r5, [r0]
   13ce4:	str	r5, [r4]
   13ce8:	mov	r0, r5
   13cec:	pop	{r4, r5, r6, r7, fp, pc}
   13cf0:	bl	113a4 <__errno_location@plt>
   13cf4:	ldr	r0, [r0]
   13cf8:	mov	r1, #7
   13cfc:	strh	r1, [r6, #56]	; 0x38
   13d00:	str	r0, [r6, #32]
   13d04:	mov	r5, r6
   13d08:	b	13b98 <__assert_fail@plt+0x26a4>
   13d0c:	mov	r0, r4
   13d10:	bl	14938 <__assert_fail@plt+0x3444>
   13d14:	cmp	r0, #0
   13d18:	beq	13dd4 <__assert_fail@plt+0x28e0>
   13d1c:	bl	113a4 <__errno_location@plt>
   13d20:	ldr	r0, [r0]
   13d24:	str	r0, [r5, #32]
   13d28:	ldr	r0, [r4, #48]	; 0x30
   13d2c:	orr	r0, r0, #8192	; 0x2000
   13d30:	str	r0, [r4, #48]	; 0x30
   13d34:	b	13dd4 <__assert_fail@plt+0x28e0>
   13d38:	ldr	r0, [r4, #48]	; 0x30
   13d3c:	tst	r0, #4
   13d40:	bne	13dcc <__assert_fail@plt+0x28d8>
   13d44:	ldr	r1, [r5, #36]	; 0x24
   13d48:	tst	r0, #512	; 0x200
   13d4c:	bne	13dc0 <__assert_fail@plt+0x28cc>
   13d50:	mov	r0, r1
   13d54:	bl	11464 <fchdir@plt>
   13d58:	cmp	r0, #0
   13d5c:	beq	13dcc <__assert_fail@plt+0x28d8>
   13d60:	bl	113a4 <__errno_location@plt>
   13d64:	ldr	r0, [r0]
   13d68:	str	r0, [r5, #32]
   13d6c:	ldr	r0, [r4, #48]	; 0x30
   13d70:	orr	r0, r0, #8192	; 0x2000
   13d74:	str	r0, [r4, #48]	; 0x30
   13d78:	b	13dcc <__assert_fail@plt+0x28d8>
   13d7c:	movw	r1, #43436	; 0xa9ac
   13d80:	movt	r1, #1
   13d84:	mov	r0, r4
   13d88:	bl	13668 <__assert_fail@plt+0x2174>
   13d8c:	str	r0, [r5, #36]	; 0x24
   13d90:	cmn	r0, #1
   13d94:	ble	13da8 <__assert_fail@plt+0x28b4>
   13d98:	ldrh	r0, [r5, #58]	; 0x3a
   13d9c:	orr	r0, r0, #2
   13da0:	strh	r0, [r5, #58]	; 0x3a
   13da4:	b	139ec <__assert_fail@plt+0x24f8>
   13da8:	bl	113a4 <__errno_location@plt>
   13dac:	ldr	r0, [r0]
   13db0:	mov	r1, #7
   13db4:	strh	r1, [r5, #56]	; 0x38
   13db8:	str	r0, [r5, #32]
   13dbc:	b	139ec <__assert_fail@plt+0x24f8>
   13dc0:	mov	r0, r4
   13dc4:	mov	r2, #1
   13dc8:	bl	14ad4 <__assert_fail@plt+0x35e0>
   13dcc:	ldr	r0, [r5, #36]	; 0x24
   13dd0:	bl	114b8 <close@plt>
   13dd4:	ldrh	r0, [r5, #56]	; 0x38
   13dd8:	cmp	r0, #2
   13ddc:	beq	13e04 <__assert_fail@plt+0x2910>
   13de0:	ldr	r0, [r5, #32]
   13de4:	mov	r1, #7
   13de8:	cmp	r0, #0
   13dec:	movweq	r1, #6
   13df0:	strh	r1, [r5, #56]	; 0x38
   13df4:	bne	13e04 <__assert_fail@plt+0x2910>
   13df8:	mov	r0, r4
   13dfc:	mov	r1, r5
   13e00:	bl	13e1c <__assert_fail@plt+0x2928>
   13e04:	ldrb	r0, [r4, #49]	; 0x31
   13e08:	tst	r0, #32
   13e0c:	movne	r5, #0
   13e10:	mov	r0, r5
   13e14:	pop	{r4, r5, r6, r7, fp, pc}
   13e18:	bl	114ac <abort@plt>
   13e1c:	push	{r4, r5, r6, r7, fp, lr}
   13e20:	add	fp, sp, #16
   13e24:	sub	sp, sp, #24
   13e28:	add	lr, r1, #64	; 0x40
   13e2c:	ldrh	r2, [r0, #48]	; 0x30
   13e30:	movw	r3, #258	; 0x102
   13e34:	tst	r2, r3
   13e38:	beq	13e70 <__assert_fail@plt+0x297c>
   13e3c:	ldrd	r2, [lr]
   13e40:	stm	sp, {r2, r3}
   13e44:	ldrd	r2, [r1, #160]	; 0xa0
   13e48:	str	r3, [sp, #12]
   13e4c:	str	r2, [sp, #8]
   13e50:	ldr	r0, [r0, #56]	; 0x38
   13e54:	mov	r1, sp
   13e58:	bl	15d48 <__assert_fail@plt+0x4854>
   13e5c:	cmp	r0, #0
   13e60:	beq	13ee8 <__assert_fail@plt+0x29f4>
   13e64:	bl	12f04 <__assert_fail@plt+0x1a10>
   13e68:	sub	sp, fp, #16
   13e6c:	pop	{r4, r5, r6, r7, fp, pc}
   13e70:	ldr	r2, [r1, #4]
   13e74:	cmp	r2, #0
   13e78:	beq	13ee0 <__assert_fail@plt+0x29ec>
   13e7c:	ldr	r3, [r2, #48]	; 0x30
   13e80:	cmp	r3, #0
   13e84:	blt	13ee0 <__assert_fail@plt+0x29ec>
   13e88:	ldr	ip, [r0, #56]	; 0x38
   13e8c:	ldrd	r4, [ip, #16]
   13e90:	orrs	r3, r4, r5
   13e94:	beq	13ee8 <__assert_fail@plt+0x29f4>
   13e98:	ldrd	r4, [r1, #160]	; 0xa0
   13e9c:	ldrd	r6, [ip]
   13ea0:	eor	r1, r7, r5
   13ea4:	eor	r3, r6, r4
   13ea8:	orrs	r1, r3, r1
   13eac:	bne	13ee0 <__assert_fail@plt+0x29ec>
   13eb0:	ldrd	r4, [lr]
   13eb4:	ldr	r1, [ip, #8]!
   13eb8:	eor	r1, r1, r4
   13ebc:	ldr	r3, [ip, #4]
   13ec0:	eor	r3, r3, r5
   13ec4:	orrs	r1, r1, r3
   13ec8:	bne	13ee0 <__assert_fail@plt+0x29ec>
   13ecc:	ldrd	r4, [r2, #64]	; 0x40
   13ed0:	strd	r4, [ip]
   13ed4:	ldr	r0, [r0, #56]	; 0x38
   13ed8:	ldrd	r2, [r2, #160]	; 0xa0
   13edc:	strd	r2, [r0]
   13ee0:	sub	sp, fp, #16
   13ee4:	pop	{r4, r5, r6, r7, fp, pc}
   13ee8:	bl	114ac <abort@plt>
   13eec:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   13ef0:	add	fp, sp, #24
   13ef4:	sub	sp, sp, #104	; 0x68
   13ef8:	mov	r7, r3
   13efc:	mov	r4, r2
   13f00:	mov	r8, r1
   13f04:	mov	r5, r0
   13f08:	cmp	r3, #0
   13f0c:	beq	13f30 <__assert_fail@plt+0x2a3c>
   13f10:	movw	r1, #43435	; 0xa9ab
   13f14:	movt	r1, #1
   13f18:	mov	r0, r7
   13f1c:	bl	11200 <strcmp@plt>
   13f20:	mov	r6, r0
   13f24:	cmp	r0, #0
   13f28:	movwne	r6, #1
   13f2c:	b	13f34 <__assert_fail@plt+0x2a40>
   13f30:	mov	r6, #1
   13f34:	ldr	r0, [r5, #48]	; 0x30
   13f38:	tst	r0, #4
   13f3c:	bne	13f94 <__assert_fail@plt+0x2aa0>
   13f40:	mov	r9, #0
   13f44:	cmn	r4, #1
   13f48:	mov	r1, #0
   13f4c:	movwgt	r1, #1
   13f50:	orrs	r1, r1, r6
   13f54:	bne	13fb4 <__assert_fail@plt+0x2ac0>
   13f58:	ands	r0, r0, #512	; 0x200
   13f5c:	beq	13fb4 <__assert_fail@plt+0x2ac0>
   13f60:	add	r4, r5, #60	; 0x3c
   13f64:	mov	r0, r4
   13f68:	bl	15f3c <__assert_fail@plt+0x4a48>
   13f6c:	cmp	r0, #0
   13f70:	bne	13fbc <__assert_fail@plt+0x2ac8>
   13f74:	mov	r0, r4
   13f78:	bl	15f88 <__assert_fail@plt+0x4a94>
   13f7c:	cmn	r0, #1
   13f80:	ble	13fbc <__assert_fail@plt+0x2ac8>
   13f84:	mov	r4, r0
   13f88:	mov	r9, #0
   13f8c:	mov	r7, #0
   13f90:	b	13fd8 <__assert_fail@plt+0x2ae4>
   13f94:	mov	r5, #0
   13f98:	cmp	r4, #0
   13f9c:	blt	140c0 <__assert_fail@plt+0x2bcc>
   13fa0:	ands	r0, r0, #512	; 0x200
   13fa4:	beq	140c0 <__assert_fail@plt+0x2bcc>
   13fa8:	mov	r0, r4
   13fac:	bl	114b8 <close@plt>
   13fb0:	b	140c0 <__assert_fail@plt+0x2bcc>
   13fb4:	cmn	r4, #1
   13fb8:	bgt	13fd8 <__assert_fail@plt+0x2ae4>
   13fbc:	mov	r0, r5
   13fc0:	mov	r1, r7
   13fc4:	bl	13668 <__assert_fail@plt+0x2174>
   13fc8:	cmp	r0, #0
   13fcc:	blt	14070 <__assert_fail@plt+0x2b7c>
   13fd0:	mov	r4, r0
   13fd4:	mov	r9, #1
   13fd8:	ldrb	r0, [r5, #48]	; 0x30
   13fdc:	tst	r0, #2
   13fe0:	bne	14004 <__assert_fail@plt+0x2b10>
   13fe4:	cmp	r7, #0
   13fe8:	beq	1404c <__assert_fail@plt+0x2b58>
   13fec:	movw	r1, #43435	; 0xa9ab
   13ff0:	movt	r1, #1
   13ff4:	mov	r0, r7
   13ff8:	bl	11200 <strcmp@plt>
   13ffc:	cmp	r0, #0
   14000:	bne	1404c <__assert_fail@plt+0x2b58>
   14004:	mov	r1, sp
   14008:	mov	r0, r4
   1400c:	bl	19b2c <__assert_fail@plt+0x8638>
   14010:	cmp	r0, #0
   14014:	bne	1409c <__assert_fail@plt+0x2ba8>
   14018:	ldrd	r0, [r8, #64]	; 0x40
   1401c:	ldm	sp, {r2, r3}
   14020:	eor	r1, r1, r3
   14024:	eor	r0, r0, r2
   14028:	orrs	r0, r0, r1
   1402c:	bne	14090 <__assert_fail@plt+0x2b9c>
   14030:	ldrd	r0, [r8, #160]	; 0xa0
   14034:	ldr	r2, [sp, #96]	; 0x60
   14038:	ldr	r3, [sp, #100]	; 0x64
   1403c:	eor	r1, r1, r3
   14040:	eor	r0, r0, r2
   14044:	orrs	r0, r0, r1
   14048:	bne	14090 <__assert_fail@plt+0x2b9c>
   1404c:	ldrb	r0, [r5, #49]	; 0x31
   14050:	tst	r0, #2
   14054:	bne	14078 <__assert_fail@plt+0x2b84>
   14058:	mov	r0, r4
   1405c:	bl	11464 <fchdir@plt>
   14060:	mov	r5, r0
   14064:	cmp	r9, #0
   14068:	bne	140a8 <__assert_fail@plt+0x2bb4>
   1406c:	b	140c0 <__assert_fail@plt+0x2bcc>
   14070:	mvn	r5, #0
   14074:	b	140c0 <__assert_fail@plt+0x2bcc>
   14078:	mov	r0, r5
   1407c:	mov	r1, r4
   14080:	mov	r2, r6
   14084:	bl	14ad4 <__assert_fail@plt+0x35e0>
   14088:	mov	r5, #0
   1408c:	b	140c0 <__assert_fail@plt+0x2bcc>
   14090:	bl	113a4 <__errno_location@plt>
   14094:	mov	r1, #2
   14098:	str	r1, [r0]
   1409c:	mvn	r5, #0
   140a0:	cmp	r9, #0
   140a4:	beq	140c0 <__assert_fail@plt+0x2bcc>
   140a8:	bl	113a4 <__errno_location@plt>
   140ac:	mov	r6, r0
   140b0:	ldr	r7, [r0]
   140b4:	mov	r0, r4
   140b8:	bl	114b8 <close@plt>
   140bc:	str	r7, [r6]
   140c0:	mov	r0, r5
   140c4:	sub	sp, fp, #24
   140c8:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   140cc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   140d0:	add	fp, sp, #28
   140d4:	sub	sp, sp, #68	; 0x44
   140d8:	mov	r4, r1
   140dc:	ldr	sl, [r0]
   140e0:	ldr	r7, [sl, #12]
   140e4:	cmp	r7, #0
   140e8:	str	r0, [fp, #-36]	; 0xffffffdc
   140ec:	beq	14460 <__assert_fail@plt+0x2f6c>
   140f0:	mov	r0, r7
   140f4:	bl	11458 <dirfd@plt>
   140f8:	str	r0, [fp, #-32]	; 0xffffffe0
   140fc:	cmn	r0, #1
   14100:	ble	14498 <__assert_fail@plt+0x2fa4>
   14104:	ldr	ip, [fp, #-36]	; 0xffffffdc
   14108:	mov	r1, ip
   1410c:	ldr	r0, [r1, #44]!	; 0x2c
   14110:	str	r1, [fp, #-44]	; 0xffffffd4
   14114:	mvn	r1, #0
   14118:	cmp	r0, #0
   1411c:	movweq	r1, #34464	; 0x86a0
   14120:	movteq	r1, #1
   14124:	str	r1, [sp, #28]
   14128:	mov	r0, #1
   1412c:	str	r0, [sp, #4]
   14130:	str	r4, [sp, #8]
   14134:	ldr	r1, [sl, #28]
   14138:	ldr	r0, [sl, #40]	; 0x28
   1413c:	sub	r2, r0, #1
   14140:	ldrb	r1, [r1, r2]
   14144:	cmp	r1, #47	; 0x2f
   14148:	moveq	r0, r2
   1414c:	ldrb	r1, [ip, #48]	; 0x30
   14150:	mov	r9, #0
   14154:	tst	r1, #4
   14158:	mov	r1, #0
   1415c:	str	r1, [sp, #40]	; 0x28
   14160:	beq	14178 <__assert_fail@plt+0x2c84>
   14164:	ldr	r1, [ip, #24]
   14168:	mov	r2, #47	; 0x2f
   1416c:	strb	r2, [r1, r0]!
   14170:	add	r1, r1, #1
   14174:	str	r1, [sp, #40]	; 0x28
   14178:	str	r7, [sp, #12]
   1417c:	add	r1, r0, #1
   14180:	ldr	r4, [sl, #12]
   14184:	cmp	r4, #0
   14188:	str	r1, [fp, #-40]	; 0xffffffd8
   1418c:	beq	144b4 <__assert_fail@plt+0x2fc0>
   14190:	ldr	r0, [sl, #48]	; 0x30
   14194:	add	r0, r0, #1
   14198:	str	r0, [sp, #24]
   1419c:	ldr	r0, [ip, #36]	; 0x24
   141a0:	sub	r0, r0, r1
   141a4:	str	r0, [sp, #44]	; 0x2c
   141a8:	mov	r6, #0
   141ac:	bl	113a4 <__errno_location@plt>
   141b0:	str	r0, [sp, #36]	; 0x24
   141b4:	mov	r9, #0
   141b8:	mov	r7, #0
   141bc:	mov	r0, #0
   141c0:	str	r0, [sp, #48]	; 0x30
   141c4:	mov	r0, #0
   141c8:	str	r0, [sp, #20]
   141cc:	mov	r0, #0
   141d0:	str	r0, [sp, #16]
   141d4:	str	sl, [sp, #32]
   141d8:	ldr	r0, [sp, #36]	; 0x24
   141dc:	str	r6, [r0]
   141e0:	mov	r0, r4
   141e4:	bl	11440 <readdir64@plt>
   141e8:	cmp	r0, #0
   141ec:	beq	146ec <__assert_fail@plt+0x31f8>
   141f0:	mov	r8, r0
   141f4:	mov	r6, r9
   141f8:	ldr	r5, [fp, #-36]	; 0xffffffdc
   141fc:	ldrb	r0, [r5, #48]	; 0x30
   14200:	tst	r0, #32
   14204:	ldrbeq	r0, [r8, #19]
   14208:	cmpeq	r0, #46	; 0x2e
   1420c:	beq	142b4 <__assert_fail@plt+0x2dc0>
   14210:	add	r4, r8, #19
   14214:	mov	r0, r4
   14218:	bl	11374 <strlen@plt>
   1421c:	mov	sl, r0
   14220:	mov	r0, r5
   14224:	mov	r1, r4
   14228:	mov	r2, sl
   1422c:	bl	132e4 <__assert_fail@plt+0x1df0>
   14230:	mov	r9, r0
   14234:	cmp	r0, #0
   14238:	beq	144c8 <__assert_fail@plt+0x2fd4>
   1423c:	ldr	r0, [sp, #44]	; 0x2c
   14240:	cmp	sl, r0
   14244:	bcs	1425c <__assert_fail@plt+0x2d68>
   14248:	ldr	r2, [fp, #-36]	; 0xffffffdc
   1424c:	ldr	r3, [fp, #-40]	; 0xffffffd8
   14250:	adds	r0, sl, r3
   14254:	bcc	142f8 <__assert_fail@plt+0x2e04>
   14258:	b	1485c <__assert_fail@plt+0x3368>
   1425c:	ldr	r0, [fp, #-40]	; 0xffffffd8
   14260:	add	r0, sl, r0
   14264:	add	r1, r0, #1
   14268:	ldr	r5, [fp, #-36]	; 0xffffffdc
   1426c:	ldr	r4, [r5, #24]
   14270:	mov	r0, r5
   14274:	bl	1326c <__assert_fail@plt+0x1d78>
   14278:	cmp	r0, #0
   1427c:	beq	144c8 <__assert_fail@plt+0x2fd4>
   14280:	ldr	r0, [r5, #24]
   14284:	cmp	r4, r0
   14288:	mov	r2, r5
   1428c:	beq	142e0 <__assert_fail@plt+0x2dec>
   14290:	ldrb	r1, [r2, #48]	; 0x30
   14294:	tst	r1, #4
   14298:	ldr	r1, [sp, #40]	; 0x28
   1429c:	ldr	r3, [fp, #-40]	; 0xffffffd8
   142a0:	addne	r1, r0, r3
   142a4:	str	r1, [sp, #40]	; 0x28
   142a8:	mov	r0, #1
   142ac:	str	r0, [sp, #16]
   142b0:	b	142e4 <__assert_fail@plt+0x2df0>
   142b4:	ldrb	r0, [r8, #20]
   142b8:	cmp	r0, #0
   142bc:	beq	142d0 <__assert_fail@plt+0x2ddc>
   142c0:	cmp	r0, #46	; 0x2e
   142c4:	ldrbeq	r0, [r8, #21]
   142c8:	cmpeq	r0, #0
   142cc:	bne	14210 <__assert_fail@plt+0x2d1c>
   142d0:	ldr	sl, [sp, #32]
   142d4:	mov	r9, r6
   142d8:	mov	r6, #0
   142dc:	b	14444 <__assert_fail@plt+0x2f50>
   142e0:	ldr	r3, [fp, #-40]	; 0xffffffd8
   142e4:	ldr	r0, [r2, #36]	; 0x24
   142e8:	sub	r0, r0, r3
   142ec:	str	r0, [sp, #44]	; 0x2c
   142f0:	adds	r0, sl, r3
   142f4:	bcs	1485c <__assert_fail@plt+0x3368>
   142f8:	ldr	r1, [sp, #24]
   142fc:	str	r1, [r9, #48]	; 0x30
   14300:	ldr	r1, [r2]
   14304:	str	r0, [r9, #40]	; 0x28
   14308:	str	r1, [r9, #4]
   1430c:	ldrd	r0, [r8]
   14310:	strd	r0, [r9, #160]	; 0xa0
   14314:	ldrb	r0, [r2, #48]	; 0x30
   14318:	tst	r0, #4
   1431c:	ldr	sl, [sp, #32]
   14320:	mov	r5, r6
   14324:	bne	14334 <__assert_fail@plt+0x2e40>
   14328:	add	r0, r9, #168	; 0xa8
   1432c:	str	r0, [r9, #24]
   14330:	b	14354 <__assert_fail@plt+0x2e60>
   14334:	ldr	r0, [r9, #28]
   14338:	ldr	r2, [r9, #52]	; 0x34
   1433c:	str	r0, [r9, #24]
   14340:	add	r1, r9, #168	; 0xa8
   14344:	add	r2, r2, #1
   14348:	ldr	r0, [sp, #40]	; 0x28
   1434c:	bl	11224 <memmove@plt>
   14350:	ldr	r2, [fp, #-36]	; 0xffffffdc
   14354:	ldr	r0, [fp, #-44]	; 0xffffffd4
   14358:	ldr	r0, [r0]
   1435c:	cmp	r0, #0
   14360:	beq	14388 <__assert_fail@plt+0x2e94>
   14364:	ldrb	r0, [r2, #49]	; 0x31
   14368:	tst	r0, #4
   1436c:	bne	14388 <__assert_fail@plt+0x2e94>
   14370:	mov	r0, r2
   14374:	mov	r1, r9
   14378:	mov	r2, #0
   1437c:	bl	13394 <__assert_fail@plt+0x1ea0>
   14380:	strh	r0, [r9, #56]	; 0x38
   14384:	b	143d8 <__assert_fail@plt+0x2ee4>
   14388:	add	r0, r9, #64	; 0x40
   1438c:	ldr	r1, [r2, #48]	; 0x30
   14390:	mov	r4, #0
   14394:	tst	r1, #8
   14398:	beq	143bc <__assert_fail@plt+0x2ec8>
   1439c:	ldrb	r2, [r8, #18]
   143a0:	orr	r3, r2, #4
   143a4:	cmp	r3, #4
   143a8:	beq	143bc <__assert_fail@plt+0x2ec8>
   143ac:	eor	r2, r2, #10
   143b0:	and	r1, r1, #16
   143b4:	orrs	r4, r1, r2
   143b8:	movwne	r4, #1
   143bc:	mov	r1, #11
   143c0:	strh	r1, [r9, #56]	; 0x38
   143c4:	ldrb	r1, [r8, #18]
   143c8:	bl	14d9c <__assert_fail@plt+0x38a8>
   143cc:	eor	r1, r4, #1
   143d0:	mov	r0, r9
   143d4:	bl	13364 <__assert_fail@plt+0x1e70>
   143d8:	mov	r6, #0
   143dc:	str	r6, [r9, #8]
   143e0:	cmp	r5, #0
   143e4:	mov	r4, r9
   143e8:	ldrne	r0, [sp, #48]	; 0x30
   143ec:	strne	r9, [r0, #8]
   143f0:	movne	r4, r5
   143f4:	movw	r0, #10000	; 0x2710
   143f8:	cmp	r7, r0
   143fc:	bne	14420 <__assert_fail@plt+0x2f2c>
   14400:	ldr	r0, [fp, #-44]	; 0xffffffd4
   14404:	ldr	r0, [r0]
   14408:	cmp	r0, #0
   1440c:	bne	14420 <__assert_fail@plt+0x2f2c>
   14410:	ldr	r1, [fp, #-32]	; 0xffffffe0
   14414:	mov	r0, sl
   14418:	bl	14dbc <__assert_fail@plt+0x38c8>
   1441c:	str	r0, [sp, #20]
   14420:	add	r7, r7, #1
   14424:	ldr	r0, [sp, #28]
   14428:	cmp	r0, r7
   1442c:	mov	r0, #0
   14430:	movwls	r0, #15
   14434:	cmp	r0, #0
   14438:	bne	148a8 <__assert_fail@plt+0x33b4>
   1443c:	str	r9, [sp, #48]	; 0x30
   14440:	mov	r9, r4
   14444:	ldr	r4, [sl, #12]
   14448:	cmp	r4, #0
   1444c:	bne	141d8 <__assert_fail@plt+0x2ce4>
   14450:	ldr	r0, [sp, #16]
   14454:	tst	r0, #1
   14458:	ldr	r4, [sp, #8]
   1445c:	b	14738 <__assert_fail@plt+0x3244>
   14460:	mov	r2, r0
   14464:	ldr	r3, [r0, #48]	; 0x30
   14468:	and	r1, r3, #516	; 0x204
   1446c:	mvn	r0, #99	; 0x63
   14470:	cmp	r1, #512	; 0x200
   14474:	ldreq	r0, [r2, #32]
   14478:	ldr	r1, [sl, #24]
   1447c:	mov	r2, #0
   14480:	tst	r3, #16
   14484:	beq	1451c <__assert_fail@plt+0x3028>
   14488:	tst	r3, #1
   1448c:	bne	14510 <__assert_fail@plt+0x301c>
   14490:	mov	r2, #32768	; 0x8000
   14494:	b	1451c <__assert_fail@plt+0x3028>
   14498:	ldr	r0, [sl, #12]
   1449c:	bl	114d0 <closedir@plt>
   144a0:	mov	r9, #0
   144a4:	str	r9, [sl, #12]
   144a8:	cmp	r4, #3
   144ac:	beq	14568 <__assert_fail@plt+0x3074>
   144b0:	b	14910 <__assert_fail@plt+0x341c>
   144b4:	mov	r7, #0
   144b8:	mov	r0, #0
   144bc:	str	r0, [sp, #20]
   144c0:	ldr	r4, [sp, #8]
   144c4:	b	14750 <__assert_fail@plt+0x325c>
   144c8:	ldr	r4, [sp, #36]	; 0x24
   144cc:	ldr	r8, [r4]
   144d0:	mov	r0, r9
   144d4:	bl	12f04 <__assert_fail@plt+0x1a10>
   144d8:	mov	r0, r6
   144dc:	bl	13698 <__assert_fail@plt+0x21a4>
   144e0:	ldr	r7, [sp, #32]
   144e4:	ldr	r0, [r7, #12]
   144e8:	bl	114d0 <closedir@plt>
   144ec:	mov	r9, #0
   144f0:	str	r9, [r7, #12]
   144f4:	mov	r0, #7
   144f8:	strh	r0, [r7, #56]	; 0x38
   144fc:	ldr	r0, [r5, #48]	; 0x30
   14500:	orr	r0, r0, #8192	; 0x2000
   14504:	str	r0, [r5, #48]	; 0x30
   14508:	str	r8, [r4]
   1450c:	b	14910 <__assert_fail@plt+0x341c>
   14510:	ldr	r3, [sl, #48]	; 0x30
   14514:	cmp	r3, #0
   14518:	movne	r2, #32768	; 0x8000
   1451c:	sub	r3, fp, #32
   14520:	bl	1607c <__assert_fail@plt+0x4b88>
   14524:	str	r0, [sl, #12]
   14528:	cmp	r0, #0
   1452c:	beq	1455c <__assert_fail@plt+0x3068>
   14530:	ldrh	r0, [sl, #56]	; 0x38
   14534:	cmp	r0, #11
   14538:	bne	14580 <__assert_fail@plt+0x308c>
   1453c:	ldr	r6, [fp, #-36]	; 0xffffffdc
   14540:	mov	r0, r6
   14544:	mov	r1, sl
   14548:	mov	r2, #0
   1454c:	bl	13394 <__assert_fail@plt+0x1ea0>
   14550:	mov	ip, r6
   14554:	strh	r0, [sl, #56]	; 0x38
   14558:	b	145c8 <__assert_fail@plt+0x30d4>
   1455c:	mov	r9, #0
   14560:	cmp	r4, #3
   14564:	bne	14910 <__assert_fail@plt+0x341c>
   14568:	mov	r0, #4
   1456c:	strh	r0, [sl, #56]	; 0x38
   14570:	bl	113a4 <__errno_location@plt>
   14574:	ldr	r0, [r0]
   14578:	str	r0, [sl, #32]
   1457c:	b	14910 <__assert_fail@plt+0x341c>
   14580:	ldr	ip, [fp, #-36]	; 0xffffffdc
   14584:	ldrb	r0, [ip, #49]	; 0x31
   14588:	tst	r0, #1
   1458c:	beq	145c8 <__assert_fail@plt+0x30d4>
   14590:	mov	r0, ip
   14594:	mov	r1, sl
   14598:	bl	13e1c <__assert_fail@plt+0x2928>
   1459c:	mov	r9, #0
   145a0:	ldr	r0, [fp, #-36]	; 0xffffffdc
   145a4:	mov	r1, sl
   145a8:	mov	r2, #0
   145ac:	bl	13394 <__assert_fail@plt+0x1ea0>
   145b0:	ldr	r0, [fp, #-36]	; 0xffffffdc
   145b4:	mov	r1, sl
   145b8:	bl	14a1c <__assert_fail@plt+0x3528>
   145bc:	ldr	ip, [fp, #-36]	; 0xffffffdc
   145c0:	cmp	r0, #0
   145c4:	beq	148cc <__assert_fail@plt+0x33d8>
   145c8:	mov	r1, ip
   145cc:	ldr	r0, [r1, #44]!	; 0x2c
   145d0:	str	r1, [fp, #-44]	; 0xffffffd4
   145d4:	mvn	r1, #0
   145d8:	cmp	r0, #0
   145dc:	movweq	r1, #34464	; 0x86a0
   145e0:	movteq	r1, #1
   145e4:	str	r1, [sp, #28]
   145e8:	mov	r6, #0
   145ec:	cmp	r4, #2
   145f0:	beq	14614 <__assert_fail@plt+0x3120>
   145f4:	ldr	r0, [ip, #48]	; 0x30
   145f8:	and	r1, r0, #56	; 0x38
   145fc:	mov	r0, #0
   14600:	cmp	r1, #24
   14604:	ldreq	r1, [sl, #84]	; 0x54
   14608:	cmpeq	r1, #2
   1460c:	beq	1491c <__assert_fail@plt+0x3428>
   14610:	eor	r6, r0, #1
   14614:	cmp	r4, #3
   14618:	beq	1462c <__assert_fail@plt+0x3138>
   1461c:	cmp	r6, #0
   14620:	bne	1462c <__assert_fail@plt+0x3138>
   14624:	str	r6, [sp, #4]
   14628:	b	14130 <__assert_fail@plt+0x2c3c>
   1462c:	ldrb	r0, [ip, #49]	; 0x31
   14630:	ldr	r2, [fp, #-32]	; 0xffffffe0
   14634:	tst	r0, #2
   14638:	beq	14658 <__assert_fail@plt+0x3164>
   1463c:	mov	r0, r2
   14640:	movw	r1, #1030	; 0x406
   14644:	mov	r2, #3
   14648:	bl	193b8 <__assert_fail@plt+0x7ec4>
   1464c:	ldr	ip, [fp, #-36]	; 0xffffffdc
   14650:	mov	r2, r0
   14654:	str	r0, [fp, #-32]	; 0xffffffe0
   14658:	cmp	r2, #0
   1465c:	blt	1467c <__assert_fail@plt+0x3188>
   14660:	mov	r0, ip
   14664:	mov	r1, sl
   14668:	mov	r3, #0
   1466c:	bl	13eec <__assert_fail@plt+0x29f8>
   14670:	ldr	ip, [fp, #-36]	; 0xffffffdc
   14674:	cmp	r0, #0
   14678:	beq	14128 <__assert_fail@plt+0x2c34>
   1467c:	subs	r0, r4, #3
   14680:	movwne	r0, #1
   14684:	eor	r1, r6, #1
   14688:	orrs	r0, r0, r1
   1468c:	bne	1469c <__assert_fail@plt+0x31a8>
   14690:	bl	113a4 <__errno_location@plt>
   14694:	ldr	r0, [r0]
   14698:	str	r0, [sl, #32]
   1469c:	ldrh	r0, [sl, #58]	; 0x3a
   146a0:	orr	r0, r0, #1
   146a4:	strh	r0, [sl, #58]	; 0x3a
   146a8:	ldr	r0, [sl, #12]
   146ac:	bl	114d0 <closedir@plt>
   146b0:	mov	r6, #0
   146b4:	str	r6, [sl, #12]
   146b8:	ldr	ip, [fp, #-36]	; 0xffffffdc
   146bc:	ldr	r0, [ip, #48]	; 0x30
   146c0:	tst	r0, #512	; 0x200
   146c4:	beq	146dc <__assert_fail@plt+0x31e8>
   146c8:	ldr	r0, [fp, #-32]	; 0xffffffe0
   146cc:	cmp	r0, #0
   146d0:	blt	146dc <__assert_fail@plt+0x31e8>
   146d4:	bl	114b8 <close@plt>
   146d8:	ldr	ip, [fp, #-36]	; 0xffffffdc
   146dc:	mov	r0, #0
   146e0:	str	r0, [sp, #4]
   146e4:	str	r6, [sl, #12]
   146e8:	b	14130 <__assert_fail@plt+0x2c3c>
   146ec:	ldr	r0, [sp, #36]	; 0x24
   146f0:	ldr	r0, [r0]
   146f4:	cmp	r0, #0
   146f8:	beq	14714 <__assert_fail@plt+0x3220>
   146fc:	str	r0, [sl, #32]
   14700:	ldr	r0, [sp, #12]
   14704:	orrs	r0, r0, r7
   14708:	mov	r0, #4
   1470c:	movwne	r0, #7
   14710:	strh	r0, [sl, #56]	; 0x38
   14714:	ldr	r0, [sl, #12]
   14718:	cmp	r0, #0
   1471c:	ldr	r4, [sp, #8]
   14720:	beq	148b8 <__assert_fail@plt+0x33c4>
   14724:	bl	114d0 <closedir@plt>
   14728:	mov	r0, #0
   1472c:	str	r0, [sl, #12]
   14730:	ldr	r0, [sp, #16]
   14734:	tst	r0, #1
   14738:	ldr	ip, [fp, #-36]	; 0xffffffdc
   1473c:	beq	14750 <__assert_fail@plt+0x325c>
   14740:	mov	r0, ip
   14744:	mov	r1, r9
   14748:	bl	14e00 <__assert_fail@plt+0x390c>
   1474c:	ldr	ip, [fp, #-36]	; 0xffffffdc
   14750:	ldrb	r0, [ip, #48]	; 0x30
   14754:	tst	r0, #4
   14758:	beq	14784 <__assert_fail@plt+0x3290>
   1475c:	ldr	r0, [ip, #36]	; 0x24
   14760:	ldr	r2, [sp, #40]	; 0x28
   14764:	sub	r1, r2, #1
   14768:	ldr	r3, [fp, #-40]	; 0xffffffd8
   1476c:	cmp	r3, r0
   14770:	moveq	r2, r1
   14774:	cmp	r7, #0
   14778:	moveq	r2, r1
   1477c:	mov	r0, #0
   14780:	strb	r0, [r2]
   14784:	ldr	r0, [sp, #12]
   14788:	cmp	r0, #0
   1478c:	ldreq	r0, [sp, #4]
   14790:	eorseq	r0, r0, #1
   14794:	beq	147c0 <__assert_fail@plt+0x32cc>
   14798:	cmp	r7, #0
   1479c:	bne	147f4 <__assert_fail@plt+0x3300>
   147a0:	cmp	r4, #3
   147a4:	bne	14904 <__assert_fail@plt+0x3410>
   147a8:	ldrh	r0, [sl, #56]	; 0x38
   147ac:	cmp	r0, #4
   147b0:	cmpne	r0, #7
   147b4:	movne	r0, #6
   147b8:	strhne	r0, [sl, #56]	; 0x38
   147bc:	b	14904 <__assert_fail@plt+0x3410>
   147c0:	cmp	r4, #1
   147c4:	cmpne	r7, #0
   147c8:	bne	147f4 <__assert_fail@plt+0x3300>
   147cc:	ldr	r0, [sl, #48]	; 0x30
   147d0:	cmp	r0, #0
   147d4:	beq	148dc <__assert_fail@plt+0x33e8>
   147d8:	ldr	r1, [sl, #4]
   147dc:	movw	r3, #43435	; 0xa9ab
   147e0:	movt	r3, #1
   147e4:	mov	r0, ip
   147e8:	mvn	r2, #0
   147ec:	bl	13eec <__assert_fail@plt+0x29f8>
   147f0:	b	148e4 <__assert_fail@plt+0x33f0>
   147f4:	ldr	r0, [sp, #20]
   147f8:	tst	r0, #1
   147fc:	beq	1482c <__assert_fail@plt+0x3338>
   14800:	movw	r0, #20104	; 0x4e88
   14804:	movt	r0, #1
   14808:	str	r0, [ip, #44]	; 0x2c
   1480c:	mov	r0, ip
   14810:	mov	r1, r9
   14814:	mov	r2, r7
   14818:	bl	134fc <__assert_fail@plt+0x2008>
   1481c:	ldr	ip, [fp, #-36]	; 0xffffffdc
   14820:	mov	r9, r0
   14824:	mov	r0, #0
   14828:	str	r0, [ip, #44]	; 0x2c
   1482c:	cmp	r7, #2
   14830:	bcc	14910 <__assert_fail@plt+0x341c>
   14834:	ldr	r0, [fp, #-44]	; 0xffffffd4
   14838:	ldr	r0, [r0]
   1483c:	cmp	r0, #0
   14840:	beq	14910 <__assert_fail@plt+0x341c>
   14844:	mov	r0, ip
   14848:	mov	r1, r9
   1484c:	mov	r2, r7
   14850:	bl	134fc <__assert_fail@plt+0x2008>
   14854:	mov	r9, r0
   14858:	b	14910 <__assert_fail@plt+0x341c>
   1485c:	mov	r0, r9
   14860:	mov	r4, r2
   14864:	bl	12f04 <__assert_fail@plt+0x1a10>
   14868:	mov	r0, r6
   1486c:	bl	13698 <__assert_fail@plt+0x21a4>
   14870:	ldr	r5, [sp, #32]
   14874:	ldr	r0, [r5, #12]
   14878:	bl	114d0 <closedir@plt>
   1487c:	mov	r9, #0
   14880:	str	r9, [r5, #12]
   14884:	mov	r0, #7
   14888:	strh	r0, [r5, #56]	; 0x38
   1488c:	ldr	r0, [r4, #48]	; 0x30
   14890:	orr	r0, r0, #8192	; 0x2000
   14894:	str	r0, [r4, #48]	; 0x30
   14898:	mov	r0, #36	; 0x24
   1489c:	ldr	r1, [sp, #36]	; 0x24
   148a0:	str	r0, [r1]
   148a4:	b	14910 <__assert_fail@plt+0x341c>
   148a8:	cmp	r0, #15
   148ac:	bne	1490c <__assert_fail@plt+0x3418>
   148b0:	mov	r9, r4
   148b4:	ldr	r4, [sp, #8]
   148b8:	ldr	ip, [fp, #-36]	; 0xffffffdc
   148bc:	ldr	r0, [sp, #16]
   148c0:	tst	r0, #1
   148c4:	bne	14740 <__assert_fail@plt+0x324c>
   148c8:	b	14750 <__assert_fail@plt+0x325c>
   148cc:	bl	113a4 <__errno_location@plt>
   148d0:	mov	r1, #12
   148d4:	str	r1, [r0]
   148d8:	b	14910 <__assert_fail@plt+0x341c>
   148dc:	mov	r0, ip
   148e0:	bl	14938 <__assert_fail@plt+0x3444>
   148e4:	ldr	ip, [fp, #-36]	; 0xffffffdc
   148e8:	cmp	r0, #0
   148ec:	beq	14798 <__assert_fail@plt+0x32a4>
   148f0:	mov	r0, #7
   148f4:	strh	r0, [sl, #56]	; 0x38
   148f8:	ldr	r0, [ip, #48]	; 0x30
   148fc:	orr	r0, r0, #8192	; 0x2000
   14900:	str	r0, [ip, #48]	; 0x30
   14904:	mov	r0, r9
   14908:	bl	13698 <__assert_fail@plt+0x21a4>
   1490c:	mov	r9, #0
   14910:	mov	r0, r9
   14914:	sub	sp, fp, #28
   14918:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1491c:	ldr	r1, [fp, #-32]	; 0xffffffe0
   14920:	mov	r0, sl
   14924:	bl	14d34 <__assert_fail@plt+0x3840>
   14928:	ldr	ip, [fp, #-36]	; 0xffffffdc
   1492c:	cmp	r0, #0
   14930:	movwne	r0, #1
   14934:	b	14610 <__assert_fail@plt+0x311c>
   14938:	push	{r4, r5, fp, lr}
   1493c:	add	fp, sp, #8
   14940:	mov	r4, r0
   14944:	ldr	r0, [r0, #48]	; 0x30
   14948:	mov	r5, #0
   1494c:	tst	r0, #4
   14950:	bne	14984 <__assert_fail@plt+0x3490>
   14954:	tst	r0, #512	; 0x200
   14958:	bne	14974 <__assert_fail@plt+0x3480>
   1495c:	ldr	r0, [r4, #28]
   14960:	bl	11464 <fchdir@plt>
   14964:	mov	r5, r0
   14968:	cmp	r0, #0
   1496c:	movwne	r5, #1
   14970:	b	14984 <__assert_fail@plt+0x3490>
   14974:	mov	r0, r4
   14978:	mvn	r1, #99	; 0x63
   1497c:	mov	r2, #1
   14980:	bl	14ad4 <__assert_fail@plt+0x35e0>
   14984:	add	r0, r4, #60	; 0x3c
   14988:	bl	13804 <__assert_fail@plt+0x2310>
   1498c:	mov	r0, r5
   14990:	pop	{r4, r5, fp, pc}
   14994:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   14998:	add	fp, sp, #24
   1499c:	mov	r4, r1
   149a0:	mov	r8, r0
   149a4:	ldr	r1, [r1, #52]	; 0x34
   149a8:	str	r1, [r4, #40]	; 0x28
   149ac:	ldr	r0, [r0, #24]
   149b0:	add	r6, r4, #168	; 0xa8
   149b4:	add	r2, r1, #1
   149b8:	mov	r1, r6
   149bc:	bl	11224 <memmove@plt>
   149c0:	mov	r0, r6
   149c4:	mov	r1, #47	; 0x2f
   149c8:	bl	11428 <strrchr@plt>
   149cc:	cmp	r0, #0
   149d0:	beq	14a0c <__assert_fail@plt+0x3518>
   149d4:	cmp	r0, r6
   149d8:	bne	149e8 <__assert_fail@plt+0x34f4>
   149dc:	ldrb	r1, [r0, #1]
   149e0:	cmp	r1, #0
   149e4:	beq	14a0c <__assert_fail@plt+0x3518>
   149e8:	add	r7, r0, #1
   149ec:	mov	r0, r7
   149f0:	bl	11374 <strlen@plt>
   149f4:	mov	r5, r0
   149f8:	add	r2, r0, #1
   149fc:	mov	r0, r6
   14a00:	mov	r1, r7
   14a04:	bl	11224 <memmove@plt>
   14a08:	str	r5, [r4, #52]	; 0x34
   14a0c:	ldr	r0, [r8, #24]
   14a10:	str	r0, [r4, #24]
   14a14:	str	r0, [r4, #28]
   14a18:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14a1c:	push	{r4, r5, r6, r7, fp, lr}
   14a20:	add	fp, sp, #16
   14a24:	mov	r4, r1
   14a28:	mov	r6, r0
   14a2c:	ldrh	r0, [r0, #48]	; 0x30
   14a30:	movw	r1, #258	; 0x102
   14a34:	tst	r0, r1
   14a38:	beq	14aac <__assert_fail@plt+0x35b8>
   14a3c:	mov	r0, #24
   14a40:	bl	18c78 <__assert_fail@plt+0x7784>
   14a44:	mov	r5, #0
   14a48:	cmp	r0, #0
   14a4c:	beq	14acc <__assert_fail@plt+0x35d8>
   14a50:	mov	r7, r0
   14a54:	ldrd	r0, [r4, #64]	; 0x40
   14a58:	stm	r7, {r0, r1}
   14a5c:	ldrd	r0, [r4, #160]	; 0xa0
   14a60:	add	r2, r7, #8
   14a64:	stm	r2, {r0, r1, r4}
   14a68:	ldr	r0, [r6, #56]	; 0x38
   14a6c:	mov	r1, r7
   14a70:	bl	15d08 <__assert_fail@plt+0x4814>
   14a74:	cmp	r0, r7
   14a78:	beq	14aa0 <__assert_fail@plt+0x35ac>
   14a7c:	mov	r6, r0
   14a80:	mov	r0, r7
   14a84:	bl	12f04 <__assert_fail@plt+0x1a10>
   14a88:	cmp	r6, #0
   14a8c:	beq	14acc <__assert_fail@plt+0x35d8>
   14a90:	ldr	r0, [r6, #16]
   14a94:	mov	r1, #2
   14a98:	strh	r1, [r4, #56]	; 0x38
   14a9c:	str	r0, [r4]
   14aa0:	mov	r5, #1
   14aa4:	mov	r0, r5
   14aa8:	pop	{r4, r5, r6, r7, fp, pc}
   14aac:	ldr	r0, [r6, #56]	; 0x38
   14ab0:	add	r1, r4, #64	; 0x40
   14ab4:	bl	19218 <__assert_fail@plt+0x7d24>
   14ab8:	mov	r5, #1
   14abc:	cmp	r0, #0
   14ac0:	movne	r0, #2
   14ac4:	strhne	r0, [r4, #56]	; 0x38
   14ac8:	strne	r4, [r4]
   14acc:	mov	r0, r5
   14ad0:	pop	{r4, r5, r6, r7, fp, pc}
   14ad4:	push	{r4, r5, fp, lr}
   14ad8:	add	fp, sp, #8
   14adc:	mov	r4, r1
   14ae0:	mov	r5, r0
   14ae4:	ldr	r1, [r0, #32]
   14ae8:	cmp	r1, r4
   14aec:	bne	14af8 <__assert_fail@plt+0x3604>
   14af0:	cmn	r1, #100	; 0x64
   14af4:	bne	14b38 <__assert_fail@plt+0x3644>
   14af8:	cmp	r2, #0
   14afc:	beq	14b14 <__assert_fail@plt+0x3620>
   14b00:	add	r0, r5, #60	; 0x3c
   14b04:	bl	15f44 <__assert_fail@plt+0x4a50>
   14b08:	cmp	r0, #0
   14b0c:	bge	14b2c <__assert_fail@plt+0x3638>
   14b10:	b	14b30 <__assert_fail@plt+0x363c>
   14b14:	cmp	r1, #0
   14b18:	blt	14b30 <__assert_fail@plt+0x363c>
   14b1c:	ldr	r0, [r5, #48]	; 0x30
   14b20:	ands	r0, r0, #4
   14b24:	bne	14b30 <__assert_fail@plt+0x363c>
   14b28:	mov	r0, r1
   14b2c:	bl	114b8 <close@plt>
   14b30:	str	r4, [r5, #32]
   14b34:	pop	{r4, r5, fp, pc}
   14b38:	bl	114ac <abort@plt>
   14b3c:	cmp	r2, #5
   14b40:	strhcc	r2, [r1, #60]	; 0x3c
   14b44:	movcc	r0, #0
   14b48:	bxcc	lr
   14b4c:	push	{fp, lr}
   14b50:	mov	fp, sp
   14b54:	bl	113a4 <__errno_location@plt>
   14b58:	mov	r1, #22
   14b5c:	str	r1, [r0]
   14b60:	mov	r0, #1
   14b64:	pop	{fp, pc}
   14b68:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14b6c:	add	fp, sp, #28
   14b70:	sub	sp, sp, #4
   14b74:	mov	r5, r0
   14b78:	orr	r0, r1, #4096	; 0x1000
   14b7c:	cmp	r0, #4096	; 0x1000
   14b80:	bne	14bc0 <__assert_fail@plt+0x36cc>
   14b84:	mov	r7, r1
   14b88:	ldr	r6, [r5]
   14b8c:	bl	113a4 <__errno_location@plt>
   14b90:	mov	sl, r0
   14b94:	mov	r4, #0
   14b98:	str	r4, [r0]
   14b9c:	ldrb	r0, [r5, #49]	; 0x31
   14ba0:	tst	r0, #32
   14ba4:	bne	14bd0 <__assert_fail@plt+0x36dc>
   14ba8:	ldrh	r0, [r6, #56]	; 0x38
   14bac:	cmp	r0, #1
   14bb0:	beq	14bdc <__assert_fail@plt+0x36e8>
   14bb4:	cmp	r0, #9
   14bb8:	ldreq	r4, [r6, #8]
   14bbc:	b	14bd0 <__assert_fail@plt+0x36dc>
   14bc0:	bl	113a4 <__errno_location@plt>
   14bc4:	mov	r1, #22
   14bc8:	str	r1, [r0]
   14bcc:	mov	r4, #0
   14bd0:	mov	r0, r4
   14bd4:	sub	sp, fp, #28
   14bd8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14bdc:	ldr	r0, [r5, #4]
   14be0:	cmp	r0, #0
   14be4:	blne	13698 <__assert_fail@plt+0x21a4>
   14be8:	mov	r9, #1
   14bec:	cmp	r7, #4096	; 0x1000
   14bf0:	ldreq	r0, [r5, #48]	; 0x30
   14bf4:	orreq	r0, r0, #4096	; 0x1000
   14bf8:	streq	r0, [r5, #48]	; 0x30
   14bfc:	moveq	r9, #2
   14c00:	ldr	r0, [r6, #48]	; 0x30
   14c04:	cmp	r0, #0
   14c08:	bne	14c84 <__assert_fail@plt+0x3790>
   14c0c:	ldr	r0, [r6, #24]
   14c10:	ldrb	r0, [r0]
   14c14:	cmp	r0, #47	; 0x2f
   14c18:	beq	14c84 <__assert_fail@plt+0x3790>
   14c1c:	ldrb	r0, [r5, #48]	; 0x30
   14c20:	tst	r0, #4
   14c24:	bne	14c84 <__assert_fail@plt+0x3790>
   14c28:	movw	r1, #43436	; 0xa9ac
   14c2c:	movt	r1, #1
   14c30:	mov	r0, r5
   14c34:	bl	13668 <__assert_fail@plt+0x2174>
   14c38:	cmn	r0, #1
   14c3c:	ble	14c9c <__assert_fail@plt+0x37a8>
   14c40:	mov	r8, r0
   14c44:	mov	r0, r5
   14c48:	mov	r1, r9
   14c4c:	bl	140cc <__assert_fail@plt+0x2bd8>
   14c50:	str	r0, [r5, #4]
   14c54:	ldrb	r0, [r5, #49]	; 0x31
   14c58:	tst	r0, #2
   14c5c:	bne	14ca8 <__assert_fail@plt+0x37b4>
   14c60:	mov	r0, r8
   14c64:	bl	11464 <fchdir@plt>
   14c68:	cmp	r0, #0
   14c6c:	beq	14cbc <__assert_fail@plt+0x37c8>
   14c70:	ldr	r5, [sl]
   14c74:	mov	r0, r8
   14c78:	bl	114b8 <close@plt>
   14c7c:	str	r5, [sl]
   14c80:	b	14bd0 <__assert_fail@plt+0x36dc>
   14c84:	mov	r0, r5
   14c88:	mov	r1, r9
   14c8c:	bl	140cc <__assert_fail@plt+0x2bd8>
   14c90:	mov	r4, r0
   14c94:	str	r0, [r5, #4]
   14c98:	b	14bd0 <__assert_fail@plt+0x36dc>
   14c9c:	mov	r4, #0
   14ca0:	str	r4, [r5, #4]
   14ca4:	b	14bd0 <__assert_fail@plt+0x36dc>
   14ca8:	mov	r0, r5
   14cac:	mov	r1, r8
   14cb0:	mov	r2, #1
   14cb4:	bl	14ad4 <__assert_fail@plt+0x35e0>
   14cb8:	b	14cc4 <__assert_fail@plt+0x37d0>
   14cbc:	mov	r0, r8
   14cc0:	bl	114b8 <close@plt>
   14cc4:	ldr	r4, [r5, #4]
   14cc8:	b	14bd0 <__assert_fail@plt+0x36dc>
   14ccc:	push	{fp, lr}
   14cd0:	mov	fp, sp
   14cd4:	mov	r2, r1
   14cd8:	ldrd	r0, [r0, #8]
   14cdc:	mov	r3, #0
   14ce0:	bl	1992c <__assert_fail@plt+0x8438>
   14ce4:	mov	r0, r2
   14ce8:	pop	{fp, pc}
   14cec:	push	{r4, r5, fp, lr}
   14cf0:	add	fp, sp, #8
   14cf4:	ldrd	r2, [r1, #8]
   14cf8:	ldrd	r4, [r0, #8]
   14cfc:	eor	r3, r5, r3
   14d00:	eor	r2, r4, r2
   14d04:	orrs	r2, r2, r3
   14d08:	mov	r2, #0
   14d0c:	bne	14d2c <__assert_fail@plt+0x3838>
   14d10:	ldrd	r2, [r1]
   14d14:	ldrd	r0, [r0]
   14d18:	eor	r1, r1, r3
   14d1c:	eor	r0, r0, r2
   14d20:	orr	r0, r0, r1
   14d24:	clz	r0, r0
   14d28:	lsr	r2, r0, #5
   14d2c:	mov	r0, r2
   14d30:	pop	{r4, r5, fp, pc}
   14d34:	push	{fp, lr}
   14d38:	mov	fp, sp
   14d3c:	bl	14ec0 <__assert_fail@plt+0x39cc>
   14d40:	mov	r1, r0
   14d44:	mov	r0, #0
   14d48:	movw	r2, #26984	; 0x6968
   14d4c:	cmp	r1, r2
   14d50:	ble	14d80 <__assert_fail@plt+0x388c>
   14d54:	movw	r2, #26985	; 0x6969
   14d58:	cmp	r1, r2
   14d5c:	movwne	r2, #40864	; 0x9fa0
   14d60:	cmpne	r1, r2
   14d64:	beq	14d98 <__assert_fail@plt+0x38a4>
   14d68:	movw	r2, #16719	; 0x414f
   14d6c:	movt	r2, #21318	; 0x5346
   14d70:	cmp	r1, r2
   14d74:	popeq	{fp, pc}
   14d78:	mov	r0, #1
   14d7c:	pop	{fp, pc}
   14d80:	movw	r2, #19778	; 0x4d42
   14d84:	movt	r2, #65363	; 0xff53
   14d88:	cmp	r1, r2
   14d8c:	beq	14d98 <__assert_fail@plt+0x38a4>
   14d90:	cmp	r1, #0
   14d94:	movne	r0, #1
   14d98:	pop	{fp, pc}
   14d9c:	sub	r2, r1, #1
   14da0:	mov	r1, #0
   14da4:	cmp	r2, #11
   14da8:	movwls	r1, #43440	; 0xa9b0
   14dac:	movtls	r1, #1
   14db0:	ldrls	r1, [r1, r2, lsl #2]
   14db4:	str	r1, [r0, #16]
   14db8:	bx	lr
   14dbc:	push	{fp, lr}
   14dc0:	mov	fp, sp
   14dc4:	bl	14ec0 <__assert_fail@plt+0x39cc>
   14dc8:	mov	r1, r0
   14dcc:	mov	r0, #0
   14dd0:	movw	r2, #19778	; 0x4d42
   14dd4:	movt	r2, #65363	; 0xff53
   14dd8:	cmp	r1, r2
   14ddc:	movwne	r2, #26985	; 0x6969
   14de0:	cmpne	r1, r2
   14de4:	bne	14dec <__assert_fail@plt+0x38f8>
   14de8:	pop	{fp, pc}
   14dec:	movw	r2, #6548	; 0x1994
   14df0:	movt	r2, #258	; 0x102
   14df4:	cmp	r1, r2
   14df8:	movne	r0, #1
   14dfc:	pop	{fp, pc}
   14e00:	ldr	r2, [r0, #4]
   14e04:	ldr	ip, [r0, #24]
   14e08:	cmp	r2, #0
   14e0c:	beq	14e3c <__assert_fail@plt+0x3948>
   14e10:	ldr	r3, [r2, #24]
   14e14:	add	r0, r2, #168	; 0xa8
   14e18:	cmp	r3, r0
   14e1c:	ldrne	r0, [r2, #28]
   14e20:	subne	r0, r3, r0
   14e24:	addne	r0, ip, r0
   14e28:	strne	r0, [r2, #24]
   14e2c:	str	ip, [r2, #28]
   14e30:	ldr	r2, [r2, #8]
   14e34:	cmp	r2, #0
   14e38:	bne	14e10 <__assert_fail@plt+0x391c>
   14e3c:	ldr	r2, [r1, #48]	; 0x30
   14e40:	cmp	r2, #0
   14e44:	bxlt	lr
   14e48:	ldr	r2, [r1, #24]
   14e4c:	add	r0, r1, #168	; 0xa8
   14e50:	cmp	r2, r0
   14e54:	ldrne	r0, [r1, #28]
   14e58:	subne	r0, r2, r0
   14e5c:	addne	r0, ip, r0
   14e60:	strne	r0, [r1, #24]
   14e64:	str	ip, [r1, #28]
   14e68:	ldr	r2, [r1, #8]
   14e6c:	cmp	r2, #0
   14e70:	ldreq	r2, [r1, #4]
   14e74:	ldr	r0, [r2, #48]	; 0x30
   14e78:	cmn	r0, #1
   14e7c:	mov	r1, r2
   14e80:	bgt	14e48 <__assert_fail@plt+0x3954>
   14e84:	bx	lr
   14e88:	push	{r4, r5, fp, lr}
   14e8c:	add	fp, sp, #8
   14e90:	ldr	r0, [r0]
   14e94:	ldrd	r2, [r0, #160]	; 0xa0
   14e98:	ldr	r0, [r1]
   14e9c:	ldrd	r4, [r0, #160]	; 0xa0
   14ea0:	mov	r0, #0
   14ea4:	subs	r1, r4, r2
   14ea8:	sbcs	r1, r5, r3
   14eac:	movwcc	r0, #1
   14eb0:	subs	r1, r2, r4
   14eb4:	sbcs	r1, r3, r5
   14eb8:	subcc	r0, r0, #1
   14ebc:	pop	{r4, r5, fp, pc}
   14ec0:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   14ec4:	add	fp, sp, #24
   14ec8:	sub	sp, sp, #96	; 0x60
   14ecc:	mov	r4, r0
   14ed0:	ldr	r7, [r0, #44]	; 0x2c
   14ed4:	ldrb	r0, [r7, #49]	; 0x31
   14ed8:	mov	r5, #0
   14edc:	tst	r0, #2
   14ee0:	beq	14fdc <__assert_fail@plt+0x3ae8>
   14ee4:	mov	r9, r1
   14ee8:	ldr	r6, [r7, #52]	; 0x34
   14eec:	cmp	r6, #0
   14ef0:	bne	14f30 <__assert_fail@plt+0x3a3c>
   14ef4:	movw	r0, #12036	; 0x2f04
   14ef8:	movt	r0, #1
   14efc:	str	r0, [sp]
   14f00:	mov	r8, #0
   14f04:	movw	r2, #20456	; 0x4fe8
   14f08:	movt	r2, #1
   14f0c:	movw	r3, #20488	; 0x5008
   14f10:	movt	r3, #1
   14f14:	mov	r0, #13
   14f18:	mov	r1, #0
   14f1c:	bl	15478 <__assert_fail@plt+0x3f84>
   14f20:	mov	r6, r0
   14f24:	str	r0, [r7, #52]	; 0x34
   14f28:	cmp	r0, #0
   14f2c:	beq	14f68 <__assert_fail@plt+0x3a74>
   14f30:	ldrd	r0, [r4, #64]	; 0x40
   14f34:	str	r1, [sp, #12]
   14f38:	str	r0, [sp, #8]
   14f3c:	add	r1, sp, #8
   14f40:	mov	r0, r6
   14f44:	bl	151f0 <__assert_fail@plt+0x3cfc>
   14f48:	cmp	r0, #0
   14f4c:	beq	14f58 <__assert_fail@plt+0x3a64>
   14f50:	ldr	r5, [r0, #8]
   14f54:	b	14fdc <__assert_fail@plt+0x3ae8>
   14f58:	mov	r8, #1
   14f5c:	cmp	r9, #0
   14f60:	bge	14f74 <__assert_fail@plt+0x3a80>
   14f64:	b	14fdc <__assert_fail@plt+0x3ae8>
   14f68:	mov	r6, #0
   14f6c:	cmp	r9, #0
   14f70:	blt	14fdc <__assert_fail@plt+0x3ae8>
   14f74:	add	r1, sp, #8
   14f78:	mov	r0, r9
   14f7c:	bl	111c4 <fstatfs64@plt>
   14f80:	cmp	r0, #0
   14f84:	bne	14fdc <__assert_fail@plt+0x3ae8>
   14f88:	cmp	r8, #0
   14f8c:	beq	14fd8 <__assert_fail@plt+0x3ae4>
   14f90:	mov	r0, #16
   14f94:	bl	18c78 <__assert_fail@plt+0x7784>
   14f98:	cmp	r0, #0
   14f9c:	beq	14fd8 <__assert_fail@plt+0x3ae4>
   14fa0:	mov	r5, r0
   14fa4:	ldrd	r0, [r4, #64]	; 0x40
   14fa8:	ldr	r2, [sp, #8]
   14fac:	stm	r5, {r0, r1, r2}
   14fb0:	mov	r0, r6
   14fb4:	mov	r1, r5
   14fb8:	bl	15d08 <__assert_fail@plt+0x4814>
   14fbc:	cmp	r0, #0
   14fc0:	beq	14fd0 <__assert_fail@plt+0x3adc>
   14fc4:	cmp	r0, r5
   14fc8:	beq	14fd8 <__assert_fail@plt+0x3ae4>
   14fcc:	bl	114ac <abort@plt>
   14fd0:	mov	r0, r5
   14fd4:	bl	12f04 <__assert_fail@plt+0x1a10>
   14fd8:	ldr	r5, [sp, #8]
   14fdc:	mov	r0, r5
   14fe0:	sub	sp, fp, #24
   14fe4:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   14fe8:	push	{fp, lr}
   14fec:	mov	fp, sp
   14ff0:	mov	r2, r1
   14ff4:	ldrd	r0, [r0]
   14ff8:	mov	r3, #0
   14ffc:	bl	1992c <__assert_fail@plt+0x8438>
   15000:	mov	r0, r2
   15004:	pop	{fp, pc}
   15008:	ldrd	r2, [r1]
   1500c:	ldrd	r0, [r0]
   15010:	eor	r1, r1, r3
   15014:	eor	r0, r0, r2
   15018:	orr	r0, r0, r1
   1501c:	clz	r0, r0
   15020:	lsr	r0, r0, #5
   15024:	bx	lr
   15028:	ldr	r0, [r0, #8]
   1502c:	bx	lr
   15030:	ldr	r0, [r0, #12]
   15034:	bx	lr
   15038:	ldr	r0, [r0, #16]
   1503c:	bx	lr
   15040:	mov	r2, r0
   15044:	ldm	r0, {r1, r3}
   15048:	mov	r0, #0
   1504c:	cmp	r1, r3
   15050:	bxcs	lr
   15054:	ldr	ip, [r2, #4]
   15058:	mov	r0, #0
   1505c:	ldr	r2, [r1]
   15060:	cmp	r2, #0
   15064:	beq	15088 <__assert_fail@plt+0x3b94>
   15068:	mov	r3, #0
   1506c:	mov	r2, r1
   15070:	add	r3, r3, #1
   15074:	ldr	r2, [r2, #4]
   15078:	cmp	r2, #0
   1507c:	bne	15070 <__assert_fail@plt+0x3b7c>
   15080:	cmp	r3, r0
   15084:	movhi	r0, r3
   15088:	add	r1, r1, #8
   1508c:	cmp	r1, ip
   15090:	bcc	1505c <__assert_fail@plt+0x3b68>
   15094:	bx	lr
   15098:	push	{fp, lr}
   1509c:	mov	fp, sp
   150a0:	ldr	r3, [r0]
   150a4:	ldr	r1, [r0, #4]
   150a8:	mov	lr, #0
   150ac:	cmp	r3, r1
   150b0:	mov	r1, #0
   150b4:	bcs	150f4 <__assert_fail@plt+0x3c00>
   150b8:	ldr	ip, [r0, #4]
   150bc:	mov	r1, #0
   150c0:	mov	lr, #0
   150c4:	ldr	r2, [r3]
   150c8:	cmp	r2, #0
   150cc:	beq	150e8 <__assert_fail@plt+0x3bf4>
   150d0:	mov	r2, r3
   150d4:	add	r1, r1, #1
   150d8:	ldr	r2, [r2, #4]
   150dc:	cmp	r2, #0
   150e0:	bne	150d4 <__assert_fail@plt+0x3be0>
   150e4:	add	lr, lr, #1
   150e8:	add	r3, r3, #8
   150ec:	cmp	r3, ip
   150f0:	bcc	150c4 <__assert_fail@plt+0x3bd0>
   150f4:	ldr	r2, [r0, #12]
   150f8:	cmp	lr, r2
   150fc:	bne	15114 <__assert_fail@plt+0x3c20>
   15100:	ldr	r2, [r0, #16]
   15104:	mov	r0, #1
   15108:	cmp	r1, r2
   1510c:	movne	r0, #0
   15110:	pop	{fp, pc}
   15114:	mov	r0, #0
   15118:	pop	{fp, pc}
   1511c:	nop	{0}
   15120:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   15124:	add	fp, sp, #24
   15128:	sub	sp, sp, #8
   1512c:	mov	r4, r1
   15130:	mov	r5, r0
   15134:	bl	15038 <__assert_fail@plt+0x3b44>
   15138:	mov	r8, r0
   1513c:	mov	r0, r5
   15140:	bl	15028 <__assert_fail@plt+0x3b34>
   15144:	mov	r7, r0
   15148:	mov	r0, r5
   1514c:	bl	15030 <__assert_fail@plt+0x3b3c>
   15150:	mov	r6, r0
   15154:	mov	r0, r5
   15158:	bl	15040 <__assert_fail@plt+0x3b4c>
   1515c:	mov	r5, r0
   15160:	movw	r2, #43488	; 0xa9e0
   15164:	movt	r2, #1
   15168:	mov	r0, r4
   1516c:	mov	r1, #1
   15170:	mov	r3, r8
   15174:	bl	113ec <__fprintf_chk@plt>
   15178:	movw	r2, #43512	; 0xa9f8
   1517c:	movt	r2, #1
   15180:	mov	r0, r4
   15184:	mov	r1, #1
   15188:	mov	r3, r7
   1518c:	bl	113ec <__fprintf_chk@plt>
   15190:	vldr	d16, [pc, #80]	; 151e8 <__assert_fail@plt+0x3cf4>
   15194:	vmov	s0, r6
   15198:	vmov	s2, r7
   1519c:	vcvt.f64.u32	d17, s0
   151a0:	vcvt.f64.u32	d18, s2
   151a4:	vmul.f64	d16, d17, d16
   151a8:	vdiv.f64	d16, d16, d18
   151ac:	vstr	d16, [sp]
   151b0:	movw	r2, #43536	; 0xaa10
   151b4:	movt	r2, #1
   151b8:	mov	r0, r4
   151bc:	mov	r1, #1
   151c0:	mov	r3, r6
   151c4:	bl	113ec <__fprintf_chk@plt>
   151c8:	movw	r2, #43569	; 0xaa31
   151cc:	movt	r2, #1
   151d0:	mov	r0, r4
   151d4:	mov	r1, #1
   151d8:	mov	r3, r5
   151dc:	sub	sp, fp, #24
   151e0:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   151e4:	b	113ec <__fprintf_chk@plt>
   151e8:	andeq	r0, r0, r0
   151ec:	subsmi	r0, r9, r0
   151f0:	push	{r4, r5, r6, r7, fp, lr}
   151f4:	add	fp, sp, #16
   151f8:	mov	r5, r1
   151fc:	mov	r6, r0
   15200:	bl	15254 <__assert_fail@plt+0x3d60>
   15204:	mov	r7, r0
   15208:	ldr	r0, [r0]
   1520c:	mov	r4, #0
   15210:	cmp	r0, #0
   15214:	bne	15220 <__assert_fail@plt+0x3d2c>
   15218:	b	1524c <__assert_fail@plt+0x3d58>
   1521c:	ldr	r7, [r7, #4]
   15220:	cmp	r7, #0
   15224:	beq	1524c <__assert_fail@plt+0x3d58>
   15228:	ldr	r1, [r7]
   1522c:	cmp	r1, r5
   15230:	beq	15248 <__assert_fail@plt+0x3d54>
   15234:	ldr	r2, [r6, #28]
   15238:	mov	r0, r5
   1523c:	blx	r2
   15240:	cmp	r0, #0
   15244:	beq	1521c <__assert_fail@plt+0x3d28>
   15248:	ldr	r4, [r7]
   1524c:	mov	r0, r4
   15250:	pop	{r4, r5, r6, r7, fp, pc}
   15254:	push	{r4, sl, fp, lr}
   15258:	add	fp, sp, #8
   1525c:	mov	r2, r1
   15260:	mov	r4, r0
   15264:	ldr	r1, [r0, #8]
   15268:	ldr	r3, [r0, #24]
   1526c:	mov	r0, r2
   15270:	blx	r3
   15274:	ldr	r1, [r4, #8]
   15278:	cmp	r0, r1
   1527c:	ldrcc	r1, [r4]
   15280:	addcc	r0, r1, r0, lsl #3
   15284:	popcc	{r4, sl, fp, pc}
   15288:	bl	114ac <abort@plt>
   1528c:	ldr	r1, [r0, #16]
   15290:	cmp	r1, #0
   15294:	moveq	r1, #0
   15298:	moveq	r0, r1
   1529c:	bxeq	lr
   152a0:	ldr	r2, [r0]
   152a4:	b	152b8 <__assert_fail@plt+0x3dc4>
   152a8:	ldr	r1, [r2], #8
   152ac:	cmp	r1, #0
   152b0:	movne	r0, r1
   152b4:	bxne	lr
   152b8:	ldr	r1, [r0, #4]
   152bc:	cmp	r2, r1
   152c0:	bcc	152a8 <__assert_fail@plt+0x3db4>
   152c4:	push	{fp, lr}
   152c8:	mov	fp, sp
   152cc:	bl	114ac <abort@plt>
   152d0:	push	{r4, r5, fp, lr}
   152d4:	add	fp, sp, #8
   152d8:	mov	r5, r1
   152dc:	mov	r4, r0
   152e0:	bl	15254 <__assert_fail@plt+0x3d60>
   152e4:	mov	r1, r0
   152e8:	ldr	r2, [r1]
   152ec:	cmp	r2, r5
   152f0:	bne	15304 <__assert_fail@plt+0x3e10>
   152f4:	ldr	r2, [r1, #4]
   152f8:	cmp	r2, #0
   152fc:	ldrne	r0, [r2]
   15300:	popne	{r4, r5, fp, pc}
   15304:	ldr	r1, [r1, #4]
   15308:	cmp	r1, #0
   1530c:	bne	152e8 <__assert_fail@plt+0x3df4>
   15310:	add	r1, r0, #8
   15314:	ldr	r2, [r4, #4]
   15318:	cmp	r1, r2
   1531c:	movcs	r0, #0
   15320:	popcs	{r4, r5, fp, pc}
   15324:	ldr	r0, [r1], #8
   15328:	cmp	r0, #0
   1532c:	popne	{r4, r5, fp, pc}
   15330:	b	15318 <__assert_fail@plt+0x3e24>
   15334:	push	{r4, sl, fp, lr}
   15338:	add	fp, sp, #8
   1533c:	mov	ip, r0
   15340:	ldr	lr, [r0]
   15344:	ldr	r3, [r0, #4]
   15348:	mov	r0, #0
   1534c:	cmp	lr, r3
   15350:	bcs	1539c <__assert_fail@plt+0x3ea8>
   15354:	mov	r0, #0
   15358:	ldr	r3, [lr]
   1535c:	cmp	r3, #0
   15360:	cmpne	lr, #0
   15364:	beq	1538c <__assert_fail@plt+0x3e98>
   15368:	mov	r3, lr
   1536c:	cmp	r0, r2
   15370:	popcs	{r4, sl, fp, pc}
   15374:	ldr	r4, [r3]
   15378:	str	r4, [r1, r0, lsl #2]
   1537c:	add	r0, r0, #1
   15380:	ldr	r3, [r3, #4]
   15384:	cmp	r3, #0
   15388:	bne	1536c <__assert_fail@plt+0x3e78>
   1538c:	ldr	r3, [ip, #4]
   15390:	add	lr, lr, #8
   15394:	cmp	lr, r3
   15398:	bcc	15358 <__assert_fail@plt+0x3e64>
   1539c:	pop	{r4, sl, fp, pc}
   153a0:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   153a4:	add	fp, sp, #24
   153a8:	mov	r8, r0
   153ac:	ldr	r9, [r0]
   153b0:	ldr	r0, [r0, #4]
   153b4:	mov	r6, #0
   153b8:	cmp	r9, r0
   153bc:	bcs	1541c <__assert_fail@plt+0x3f28>
   153c0:	mov	r4, r2
   153c4:	mov	r5, r1
   153c8:	mov	r6, #0
   153cc:	b	153fc <__assert_fail@plt+0x3f08>
   153d0:	mov	r7, r9
   153d4:	ldr	r0, [r7]
   153d8:	mov	r1, r4
   153dc:	blx	r5
   153e0:	cmp	r0, #0
   153e4:	beq	1541c <__assert_fail@plt+0x3f28>
   153e8:	add	r6, r6, #1
   153ec:	ldr	r7, [r7, #4]
   153f0:	cmp	r7, #0
   153f4:	bne	153d4 <__assert_fail@plt+0x3ee0>
   153f8:	b	1540c <__assert_fail@plt+0x3f18>
   153fc:	ldr	r0, [r9]
   15400:	cmp	r0, #0
   15404:	cmpne	r9, #0
   15408:	bne	153d0 <__assert_fail@plt+0x3edc>
   1540c:	ldr	r0, [r8, #4]
   15410:	add	r9, r9, #8
   15414:	cmp	r9, r0
   15418:	bcc	153fc <__assert_fail@plt+0x3f08>
   1541c:	mov	r0, r6
   15420:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   15424:	ldrb	r2, [r0]
   15428:	cmp	r2, #0
   1542c:	moveq	r0, #0
   15430:	bxeq	lr
   15434:	add	r3, r0, #1
   15438:	mov	r0, #0
   1543c:	rsb	r0, r0, r0, lsl #5
   15440:	uxtab	r0, r0, r2
   15444:	udiv	r2, r0, r1
   15448:	mls	r0, r2, r1, r0
   1544c:	ldrb	r2, [r3], #1
   15450:	cmp	r2, #0
   15454:	bne	1543c <__assert_fail@plt+0x3f48>
   15458:	bx	lr
   1545c:	movw	r1, #43600	; 0xaa50
   15460:	movt	r1, #1
   15464:	vld1.32	{d16-d17}, [r1]!
   15468:	vst1.32	{d16-d17}, [r0]!
   1546c:	ldr	r1, [r1]
   15470:	str	r1, [r0]
   15474:	bx	lr
   15478:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1547c:	add	fp, sp, #28
   15480:	sub	sp, sp, #4
   15484:	mov	r7, r1
   15488:	mov	r8, r0
   1548c:	movw	sl, #21880	; 0x5578
   15490:	movt	sl, #1
   15494:	cmp	r3, #0
   15498:	movne	sl, r3
   1549c:	movw	r5, #21848	; 0x5558
   154a0:	movt	r5, #1
   154a4:	cmp	r2, #0
   154a8:	movne	r5, r2
   154ac:	mov	r0, #40	; 0x28
   154b0:	bl	18c78 <__assert_fail@plt+0x7784>
   154b4:	mov	r9, #0
   154b8:	cmp	r0, #0
   154bc:	beq	1554c <__assert_fail@plt+0x4058>
   154c0:	mov	r4, r0
   154c4:	movw	r6, #43600	; 0xaa50
   154c8:	movt	r6, #1
   154cc:	cmp	r7, #0
   154d0:	movne	r6, r7
   154d4:	str	r6, [r0, #20]
   154d8:	bl	15588 <__assert_fail@plt+0x4094>
   154dc:	cmp	r0, #0
   154e0:	beq	15544 <__assert_fail@plt+0x4050>
   154e4:	mov	r0, r8
   154e8:	mov	r1, r6
   154ec:	bl	15634 <__assert_fail@plt+0x4140>
   154f0:	str	r0, [r4, #8]
   154f4:	cmp	r0, #0
   154f8:	beq	15544 <__assert_fail@plt+0x4050>
   154fc:	mov	r1, #8
   15500:	bl	18c24 <__assert_fail@plt+0x7730>
   15504:	str	r0, [r4]
   15508:	cmp	r0, #0
   1550c:	beq	15544 <__assert_fail@plt+0x4050>
   15510:	ldr	r1, [fp, #8]
   15514:	mov	r2, #0
   15518:	str	r2, [r4, #12]
   1551c:	str	r2, [r4, #16]
   15520:	str	r5, [r4, #24]
   15524:	str	sl, [r4, #28]
   15528:	str	r1, [r4, #32]
   1552c:	str	r2, [r4, #36]	; 0x24
   15530:	ldr	r1, [r4, #8]
   15534:	add	r0, r0, r1, lsl #3
   15538:	str	r0, [r4, #4]
   1553c:	mov	r9, r4
   15540:	b	1554c <__assert_fail@plt+0x4058>
   15544:	mov	r0, r4
   15548:	bl	12f04 <__assert_fail@plt+0x1a10>
   1554c:	mov	r0, r9
   15550:	sub	sp, fp, #28
   15554:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15558:	push	{r4, sl, fp, lr}
   1555c:	add	fp, sp, #8
   15560:	mov	r4, r1
   15564:	mov	r1, #3
   15568:	bl	18dd8 <__assert_fail@plt+0x78e4>
   1556c:	udiv	r1, r0, r4
   15570:	mls	r0, r1, r4, r0
   15574:	pop	{r4, sl, fp, pc}
   15578:	sub	r0, r0, r1
   1557c:	clz	r0, r0
   15580:	lsr	r0, r0, #5
   15584:	bx	lr
   15588:	mov	r1, r0
   1558c:	ldr	r3, [r0, #20]
   15590:	mov	r0, #1
   15594:	movw	r2, #43600	; 0xaa50
   15598:	movt	r2, #1
   1559c:	cmp	r3, r2
   155a0:	beq	15624 <__assert_fail@plt+0x4130>
   155a4:	vldr	s2, [pc, #124]	; 15628 <__assert_fail@plt+0x4134>
   155a8:	vldr	s0, [r3, #8]
   155ac:	vcmpe.f32	s0, s2
   155b0:	vmrs	APSR_nzcv, fpscr
   155b4:	ble	1561c <__assert_fail@plt+0x4128>
   155b8:	vldr	s4, [pc, #108]	; 1562c <__assert_fail@plt+0x4138>
   155bc:	vcmpe.f32	s0, s4
   155c0:	vmrs	APSR_nzcv, fpscr
   155c4:	bpl	1561c <__assert_fail@plt+0x4128>
   155c8:	vldr	s4, [pc, #96]	; 15630 <__assert_fail@plt+0x413c>
   155cc:	vldr	s6, [r3, #12]
   155d0:	vcmpe.f32	s6, s4
   155d4:	vmrs	APSR_nzcv, fpscr
   155d8:	ble	1561c <__assert_fail@plt+0x4128>
   155dc:	vldr	s4, [r3]
   155e0:	vcmpe.f32	s4, #0.0
   155e4:	vmrs	APSR_nzcv, fpscr
   155e8:	blt	1561c <__assert_fail@plt+0x4128>
   155ec:	vadd.f32	s2, s4, s2
   155f0:	vcmpe.f32	s2, s0
   155f4:	vmrs	APSR_nzcv, fpscr
   155f8:	bpl	1561c <__assert_fail@plt+0x4128>
   155fc:	vldr	s0, [r3, #4]
   15600:	vmov.f32	s4, #112	; 0x3f800000  1.0
   15604:	vcmpe.f32	s0, s4
   15608:	vmrs	APSR_nzcv, fpscr
   1560c:	bhi	1561c <__assert_fail@plt+0x4128>
   15610:	vcmpe.f32	s2, s0
   15614:	vmrs	APSR_nzcv, fpscr
   15618:	bxmi	lr
   1561c:	str	r2, [r1, #20]
   15620:	mov	r0, #0
   15624:	bx	lr
   15628:	stclcc	12, cr12, [ip, #820]	; 0x334
   1562c:	svccc	0x00666666
   15630:	svccc	0x008ccccd
   15634:	ldrb	r2, [r1, #16]
   15638:	cmp	r2, #0
   1563c:	bne	1566c <__assert_fail@plt+0x4178>
   15640:	vldr	s0, [r1, #8]
   15644:	vmov	s2, r0
   15648:	vcvt.f32.u32	s2, s2
   1564c:	vdiv.f32	s2, s2, s0
   15650:	vcvt.u32.f32	s0, s2
   15654:	vldr	s4, [pc, #44]	; 15688 <__assert_fail@plt+0x4194>
   15658:	mov	r0, #0
   1565c:	vcmpe.f32	s2, s4
   15660:	vmrs	APSR_nzcv, fpscr
   15664:	bxge	lr
   15668:	vmov	r0, s0
   1566c:	push	{fp, lr}
   15670:	mov	fp, sp
   15674:	bl	15e58 <__assert_fail@plt+0x4964>
   15678:	cmn	r0, #-536870911	; 0xe0000001
   1567c:	movwhi	r0, #0
   15680:	pop	{fp, lr}
   15684:	bx	lr
   15688:	svcmi	0x00800000
   1568c:	push	{r4, r5, r6, r7, fp, lr}
   15690:	add	fp, sp, #16
   15694:	mov	r4, r0
   15698:	ldr	r5, [r0]
   1569c:	ldr	r0, [r0, #4]
   156a0:	cmp	r5, r0
   156a4:	bcs	1573c <__assert_fail@plt+0x4248>
   156a8:	mov	r6, #0
   156ac:	ldr	r0, [r5]
   156b0:	cmp	r0, #0
   156b4:	beq	1572c <__assert_fail@plt+0x4238>
   156b8:	ldr	r7, [r5, #4]
   156bc:	ldr	r1, [r4, #32]
   156c0:	cmp	r1, #0
   156c4:	mov	r0, r1
   156c8:	movwne	r0, #1
   156cc:	cmp	r7, #0
   156d0:	beq	15714 <__assert_fail@plt+0x4220>
   156d4:	tst	r0, #1
   156d8:	beq	156e4 <__assert_fail@plt+0x41f0>
   156dc:	ldr	r0, [r7]
   156e0:	blx	r1
   156e4:	str	r6, [r7]
   156e8:	ldr	r2, [r7, #4]
   156ec:	ldr	r0, [r4, #36]	; 0x24
   156f0:	str	r0, [r7, #4]
   156f4:	str	r7, [r4, #36]	; 0x24
   156f8:	ldr	r1, [r4, #32]
   156fc:	cmp	r1, #0
   15700:	mov	r0, r1
   15704:	movwne	r0, #1
   15708:	cmp	r2, #0
   1570c:	mov	r7, r2
   15710:	bne	156d4 <__assert_fail@plt+0x41e0>
   15714:	cmp	r0, #0
   15718:	beq	15724 <__assert_fail@plt+0x4230>
   1571c:	ldr	r0, [r5]
   15720:	blx	r1
   15724:	str	r6, [r5]
   15728:	str	r6, [r5, #4]
   1572c:	ldr	r0, [r4, #4]
   15730:	add	r5, r5, #8
   15734:	cmp	r5, r0
   15738:	bcc	156ac <__assert_fail@plt+0x41b8>
   1573c:	mov	r0, #0
   15740:	str	r0, [r4, #12]
   15744:	str	r0, [r4, #16]
   15748:	pop	{r4, r5, r6, r7, fp, pc}
   1574c:	push	{r4, r5, r6, sl, fp, lr}
   15750:	add	fp, sp, #16
   15754:	mov	r4, r0
   15758:	ldr	r0, [r0, #32]
   1575c:	cmp	r0, #0
   15760:	ldrne	r0, [r4, #16]
   15764:	cmpne	r0, #0
   15768:	beq	157c0 <__assert_fail@plt+0x42cc>
   1576c:	ldr	r5, [r4]
   15770:	ldr	r0, [r4, #4]
   15774:	cmp	r5, r0
   15778:	bcc	15790 <__assert_fail@plt+0x429c>
   1577c:	b	157c0 <__assert_fail@plt+0x42cc>
   15780:	ldr	r0, [r4, #4]
   15784:	add	r5, r5, #8
   15788:	cmp	r5, r0
   1578c:	bcs	157c0 <__assert_fail@plt+0x42cc>
   15790:	ldr	r0, [r5]
   15794:	cmp	r0, #0
   15798:	cmpne	r5, #0
   1579c:	beq	15780 <__assert_fail@plt+0x428c>
   157a0:	mov	r6, r5
   157a4:	ldr	r0, [r6]
   157a8:	ldr	r1, [r4, #32]
   157ac:	blx	r1
   157b0:	ldr	r6, [r6, #4]
   157b4:	cmp	r6, #0
   157b8:	bne	157a4 <__assert_fail@plt+0x42b0>
   157bc:	b	15780 <__assert_fail@plt+0x428c>
   157c0:	ldr	r5, [r4]
   157c4:	ldr	r0, [r4, #4]
   157c8:	cmp	r5, r0
   157cc:	bcc	157e4 <__assert_fail@plt+0x42f0>
   157d0:	b	15808 <__assert_fail@plt+0x4314>
   157d4:	ldr	r0, [r4, #4]
   157d8:	add	r5, r5, #8
   157dc:	cmp	r5, r0
   157e0:	bcs	15808 <__assert_fail@plt+0x4314>
   157e4:	ldr	r0, [r5, #4]
   157e8:	cmp	r0, #0
   157ec:	beq	157d4 <__assert_fail@plt+0x42e0>
   157f0:	ldr	r6, [r0, #4]
   157f4:	bl	12f04 <__assert_fail@plt+0x1a10>
   157f8:	cmp	r6, #0
   157fc:	mov	r0, r6
   15800:	bne	157f0 <__assert_fail@plt+0x42fc>
   15804:	b	157d4 <__assert_fail@plt+0x42e0>
   15808:	ldr	r0, [r4, #36]	; 0x24
   1580c:	cmp	r0, #0
   15810:	beq	15828 <__assert_fail@plt+0x4334>
   15814:	ldr	r5, [r0, #4]
   15818:	bl	12f04 <__assert_fail@plt+0x1a10>
   1581c:	cmp	r5, #0
   15820:	mov	r0, r5
   15824:	bne	15814 <__assert_fail@plt+0x4320>
   15828:	ldr	r0, [r4]
   1582c:	bl	12f04 <__assert_fail@plt+0x1a10>
   15830:	mov	r0, r4
   15834:	pop	{r4, r5, r6, sl, fp, lr}
   15838:	b	12f04 <__assert_fail@plt+0x1a10>
   1583c:	push	{r4, r5, r6, sl, fp, lr}
   15840:	add	fp, sp, #16
   15844:	sub	sp, sp, #40	; 0x28
   15848:	mov	r2, r1
   1584c:	mov	r4, r0
   15850:	ldr	r1, [r0, #20]
   15854:	mov	r0, r2
   15858:	bl	15634 <__assert_fail@plt+0x4140>
   1585c:	mov	r5, #0
   15860:	cmp	r0, #0
   15864:	beq	15940 <__assert_fail@plt+0x444c>
   15868:	mov	r6, r0
   1586c:	ldr	r0, [r4, #8]
   15870:	cmp	r6, r0
   15874:	bne	15880 <__assert_fail@plt+0x438c>
   15878:	mov	r5, #1
   1587c:	b	15940 <__assert_fail@plt+0x444c>
   15880:	mov	r0, r6
   15884:	mov	r1, #8
   15888:	bl	18c24 <__assert_fail@plt+0x7730>
   1588c:	str	r0, [sp]
   15890:	cmp	r0, #0
   15894:	beq	15940 <__assert_fail@plt+0x444c>
   15898:	str	r6, [sp, #8]
   1589c:	mov	r0, #0
   158a0:	str	r0, [sp, #12]
   158a4:	str	r0, [sp, #16]
   158a8:	ldr	r0, [sp]
   158ac:	add	r0, r0, r6, lsl #3
   158b0:	str	r0, [sp, #4]
   158b4:	add	r6, r4, #20
   158b8:	ldm	r6, {r0, r1, r2, r3, r6}
   158bc:	add	ip, sp, #20
   158c0:	stm	ip, {r0, r1, r2, r3, r6}
   158c4:	mov	r0, sp
   158c8:	mov	r1, r4
   158cc:	mov	r2, #0
   158d0:	bl	15950 <__assert_fail@plt+0x445c>
   158d4:	cmp	r0, #0
   158d8:	beq	158fc <__assert_fail@plt+0x4408>
   158dc:	ldr	r0, [r4]
   158e0:	bl	12f04 <__assert_fail@plt+0x1a10>
   158e4:	ldm	sp, {r0, r1, r2, r3}
   158e8:	stm	r4, {r0, r1, r2, r3}
   158ec:	ldr	r0, [sp, #36]	; 0x24
   158f0:	str	r0, [r4, #36]	; 0x24
   158f4:	mov	r5, #1
   158f8:	b	15940 <__assert_fail@plt+0x444c>
   158fc:	ldr	r0, [sp, #36]	; 0x24
   15900:	str	r0, [r4, #36]	; 0x24
   15904:	mov	r1, sp
   15908:	mov	r0, r4
   1590c:	mov	r2, #1
   15910:	bl	15950 <__assert_fail@plt+0x445c>
   15914:	cmp	r0, #0
   15918:	beq	1594c <__assert_fail@plt+0x4458>
   1591c:	mov	r1, sp
   15920:	mov	r5, #0
   15924:	mov	r0, r4
   15928:	mov	r2, #0
   1592c:	bl	15950 <__assert_fail@plt+0x445c>
   15930:	cmp	r0, #0
   15934:	beq	1594c <__assert_fail@plt+0x4458>
   15938:	ldr	r0, [sp]
   1593c:	bl	12f04 <__assert_fail@plt+0x1a10>
   15940:	mov	r0, r5
   15944:	sub	sp, fp, #16
   15948:	pop	{r4, r5, r6, sl, fp, pc}
   1594c:	bl	114ac <abort@plt>
   15950:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15954:	add	fp, sp, #28
   15958:	sub	sp, sp, #4
   1595c:	mov	r7, r0
   15960:	ldr	r6, [r1]
   15964:	ldr	r0, [r1, #4]
   15968:	cmp	r6, r0
   1596c:	bcs	15a70 <__assert_fail@plt+0x457c>
   15970:	mov	r9, r2
   15974:	mov	sl, r1
   15978:	ldr	r0, [r6]
   1597c:	cmp	r0, #0
   15980:	beq	15a60 <__assert_fail@plt+0x456c>
   15984:	ldr	r4, [r6, #4]
   15988:	cmp	r4, #0
   1598c:	beq	159e8 <__assert_fail@plt+0x44f4>
   15990:	ldr	r5, [r4]
   15994:	mov	r0, r7
   15998:	mov	r1, r5
   1599c:	bl	15254 <__assert_fail@plt+0x3d60>
   159a0:	ldr	r1, [r0]
   159a4:	ldr	r8, [r4, #4]
   159a8:	cmp	r1, #0
   159ac:	beq	159c0 <__assert_fail@plt+0x44cc>
   159b0:	ldr	r1, [r0, #4]
   159b4:	str	r1, [r4, #4]
   159b8:	str	r4, [r0, #4]
   159bc:	b	159dc <__assert_fail@plt+0x44e8>
   159c0:	str	r5, [r0]
   159c4:	ldr	r0, [r7, #12]
   159c8:	add	r0, r0, #1
   159cc:	str	r0, [r7, #12]
   159d0:	mov	r0, r7
   159d4:	mov	r1, r4
   159d8:	bl	15ef8 <__assert_fail@plt+0x4a04>
   159dc:	cmp	r8, #0
   159e0:	mov	r4, r8
   159e4:	bne	15990 <__assert_fail@plt+0x449c>
   159e8:	mov	r0, #0
   159ec:	str	r0, [r6, #4]
   159f0:	cmp	r9, #0
   159f4:	bne	15a60 <__assert_fail@plt+0x456c>
   159f8:	ldr	r4, [r6]
   159fc:	mov	r0, r7
   15a00:	mov	r1, r4
   15a04:	bl	15254 <__assert_fail@plt+0x3d60>
   15a08:	mov	r5, r0
   15a0c:	ldr	r0, [r0]
   15a10:	cmp	r0, #0
   15a14:	beq	15a3c <__assert_fail@plt+0x4548>
   15a18:	mov	r0, r7
   15a1c:	bl	15cdc <__assert_fail@plt+0x47e8>
   15a20:	cmp	r0, #0
   15a24:	beq	15a7c <__assert_fail@plt+0x4588>
   15a28:	str	r4, [r0]
   15a2c:	ldr	r1, [r5, #4]
   15a30:	str	r1, [r0, #4]
   15a34:	str	r0, [r5, #4]
   15a38:	b	15a4c <__assert_fail@plt+0x4558>
   15a3c:	str	r4, [r5]
   15a40:	ldr	r0, [r7, #12]
   15a44:	add	r0, r0, #1
   15a48:	str	r0, [r7, #12]
   15a4c:	mov	r0, #0
   15a50:	str	r0, [r6]
   15a54:	ldr	r0, [sl, #12]
   15a58:	sub	r0, r0, #1
   15a5c:	str	r0, [sl, #12]
   15a60:	add	r6, r6, #8
   15a64:	ldr	r0, [sl, #4]
   15a68:	cmp	r6, r0
   15a6c:	bcc	15978 <__assert_fail@plt+0x4484>
   15a70:	mov	r0, #1
   15a74:	sub	sp, fp, #28
   15a78:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15a7c:	mov	r0, #0
   15a80:	sub	sp, fp, #28
   15a84:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15a88:	push	{r4, r5, r6, r7, fp, lr}
   15a8c:	add	fp, sp, #16
   15a90:	sub	sp, sp, #8
   15a94:	cmp	r1, #0
   15a98:	beq	15bf8 <__assert_fail@plt+0x4704>
   15a9c:	mov	r7, r2
   15aa0:	mov	r5, r1
   15aa4:	mov	r4, r0
   15aa8:	add	r2, sp, #4
   15aac:	mov	r6, #0
   15ab0:	mov	r3, #0
   15ab4:	bl	15c00 <__assert_fail@plt+0x470c>
   15ab8:	cmp	r0, #0
   15abc:	beq	15acc <__assert_fail@plt+0x45d8>
   15ac0:	cmp	r7, #0
   15ac4:	strne	r0, [r7]
   15ac8:	b	15bec <__assert_fail@plt+0x46f8>
   15acc:	vldr	s0, [r4, #8]
   15ad0:	vldr	s2, [r4, #12]
   15ad4:	ldr	r0, [r4, #20]
   15ad8:	vldr	s4, [r0, #8]
   15adc:	vcvt.f32.u32	s0, s0
   15ae0:	vcvt.f32.u32	s2, s2
   15ae4:	vmul.f32	s0, s4, s0
   15ae8:	vcmpe.f32	s0, s2
   15aec:	vmrs	APSR_nzcv, fpscr
   15af0:	bpl	15b84 <__assert_fail@plt+0x4690>
   15af4:	mov	r0, r4
   15af8:	bl	15588 <__assert_fail@plt+0x4094>
   15afc:	vldr	s0, [r4, #8]
   15b00:	vldr	s4, [r4, #12]
   15b04:	ldr	r0, [r4, #20]
   15b08:	vcvt.f32.u32	s2, s0
   15b0c:	vldr	s0, [r0, #8]
   15b10:	vcvt.f32.u32	s4, s4
   15b14:	vmul.f32	s6, s0, s2
   15b18:	vcmpe.f32	s6, s4
   15b1c:	vmrs	APSR_nzcv, fpscr
   15b20:	bpl	15b84 <__assert_fail@plt+0x4690>
   15b24:	vldr	s4, [r0, #12]
   15b28:	vmul.f32	s2, s4, s2
   15b2c:	ldrb	r0, [r0, #16]
   15b30:	vmul.f32	s0, s0, s2
   15b34:	mvn	r6, #0
   15b38:	vldr	s4, [pc, #188]	; 15bfc <__assert_fail@plt+0x4708>
   15b3c:	cmp	r0, #0
   15b40:	vseleq.f32	s0, s0, s2
   15b44:	vcmpe.f32	s0, s4
   15b48:	vmrs	APSR_nzcv, fpscr
   15b4c:	bge	15bec <__assert_fail@plt+0x46f8>
   15b50:	vcvt.u32.f32	s0, s0
   15b54:	vmov	r1, s0
   15b58:	mov	r0, r4
   15b5c:	bl	1583c <__assert_fail@plt+0x4348>
   15b60:	cmp	r0, #0
   15b64:	beq	15bec <__assert_fail@plt+0x46f8>
   15b68:	add	r2, sp, #4
   15b6c:	mov	r0, r4
   15b70:	mov	r1, r5
   15b74:	mov	r3, #0
   15b78:	bl	15c00 <__assert_fail@plt+0x470c>
   15b7c:	cmp	r0, #0
   15b80:	bne	15bf8 <__assert_fail@plt+0x4704>
   15b84:	ldr	r6, [sp, #4]
   15b88:	ldr	r0, [r6]
   15b8c:	cmp	r0, #0
   15b90:	beq	15bc4 <__assert_fail@plt+0x46d0>
   15b94:	mov	r0, r4
   15b98:	bl	15cdc <__assert_fail@plt+0x47e8>
   15b9c:	cmp	r0, #0
   15ba0:	beq	15be8 <__assert_fail@plt+0x46f4>
   15ba4:	str	r5, [r0]
   15ba8:	ldr	r1, [r6, #4]
   15bac:	str	r1, [r0, #4]
   15bb0:	str	r0, [r6, #4]
   15bb4:	ldr	r0, [r4, #16]
   15bb8:	add	r0, r0, #1
   15bbc:	str	r0, [r4, #16]
   15bc0:	b	15be0 <__assert_fail@plt+0x46ec>
   15bc4:	str	r5, [r6]
   15bc8:	ldr	r0, [r4, #12]
   15bcc:	ldr	r1, [r4, #16]
   15bd0:	add	r1, r1, #1
   15bd4:	add	r0, r0, #1
   15bd8:	str	r0, [r4, #12]
   15bdc:	str	r1, [r4, #16]
   15be0:	mov	r6, #1
   15be4:	b	15bec <__assert_fail@plt+0x46f8>
   15be8:	mvn	r6, #0
   15bec:	mov	r0, r6
   15bf0:	sub	sp, fp, #16
   15bf4:	pop	{r4, r5, r6, r7, fp, pc}
   15bf8:	bl	114ac <abort@plt>
   15bfc:	svcmi	0x00800000
   15c00:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   15c04:	add	fp, sp, #24
   15c08:	mov	r8, r3
   15c0c:	mov	r4, r2
   15c10:	mov	r7, r1
   15c14:	mov	r5, r0
   15c18:	bl	15254 <__assert_fail@plt+0x3d60>
   15c1c:	str	r0, [r4]
   15c20:	ldr	r1, [r0]
   15c24:	mov	r4, #0
   15c28:	cmp	r1, #0
   15c2c:	beq	15cd4 <__assert_fail@plt+0x47e0>
   15c30:	mov	r6, r0
   15c34:	cmp	r1, r7
   15c38:	beq	15c50 <__assert_fail@plt+0x475c>
   15c3c:	ldr	r2, [r5, #28]
   15c40:	mov	r0, r7
   15c44:	blx	r2
   15c48:	cmp	r0, #0
   15c4c:	beq	15c78 <__assert_fail@plt+0x4784>
   15c50:	ldr	r4, [r6]
   15c54:	cmp	r8, #0
   15c58:	beq	15cd4 <__assert_fail@plt+0x47e0>
   15c5c:	ldr	r1, [r6, #4]
   15c60:	cmp	r1, #0
   15c64:	beq	15ccc <__assert_fail@plt+0x47d8>
   15c68:	ldm	r1, {r0, r2}
   15c6c:	stm	r6, {r0, r2}
   15c70:	b	15cbc <__assert_fail@plt+0x47c8>
   15c74:	ldr	r6, [r6]
   15c78:	ldr	r0, [r6, #4]!
   15c7c:	cmp	r0, #0
   15c80:	beq	15cd4 <__assert_fail@plt+0x47e0>
   15c84:	ldr	r1, [r0]
   15c88:	cmp	r1, r7
   15c8c:	beq	15ca4 <__assert_fail@plt+0x47b0>
   15c90:	ldr	r2, [r5, #28]
   15c94:	mov	r0, r7
   15c98:	blx	r2
   15c9c:	cmp	r0, #0
   15ca0:	beq	15c74 <__assert_fail@plt+0x4780>
   15ca4:	ldr	r1, [r6]
   15ca8:	ldr	r4, [r1]
   15cac:	cmp	r8, #0
   15cb0:	beq	15cd4 <__assert_fail@plt+0x47e0>
   15cb4:	ldr	r0, [r1, #4]
   15cb8:	str	r0, [r6]
   15cbc:	mov	r0, r5
   15cc0:	bl	15ef8 <__assert_fail@plt+0x4a04>
   15cc4:	mov	r0, r4
   15cc8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   15ccc:	mov	r0, #0
   15cd0:	str	r0, [r6]
   15cd4:	mov	r0, r4
   15cd8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   15cdc:	mov	r1, r0
   15ce0:	ldr	r0, [r0, #36]	; 0x24
   15ce4:	cmp	r0, #0
   15ce8:	ldrne	r2, [r0, #4]
   15cec:	strne	r2, [r1, #36]	; 0x24
   15cf0:	bxne	lr
   15cf4:	push	{fp, lr}
   15cf8:	mov	fp, sp
   15cfc:	mov	r0, #8
   15d00:	bl	18c78 <__assert_fail@plt+0x7784>
   15d04:	pop	{fp, pc}
   15d08:	push	{r4, sl, fp, lr}
   15d0c:	add	fp, sp, #8
   15d10:	sub	sp, sp, #8
   15d14:	mov	r4, r1
   15d18:	add	r2, sp, #4
   15d1c:	bl	15a88 <__assert_fail@plt+0x4594>
   15d20:	cmn	r0, #1
   15d24:	beq	15d38 <__assert_fail@plt+0x4844>
   15d28:	ldr	r1, [sp, #4]
   15d2c:	cmp	r0, #0
   15d30:	moveq	r4, r1
   15d34:	b	15d3c <__assert_fail@plt+0x4848>
   15d38:	mov	r4, #0
   15d3c:	mov	r0, r4
   15d40:	sub	sp, fp, #8
   15d44:	pop	{r4, sl, fp, pc}
   15d48:	push	{r4, r5, r6, sl, fp, lr}
   15d4c:	add	fp, sp, #16
   15d50:	sub	sp, sp, #8
   15d54:	mov	r4, r0
   15d58:	add	r2, sp, #4
   15d5c:	mov	r3, #1
   15d60:	bl	15c00 <__assert_fail@plt+0x470c>
   15d64:	mov	r5, r0
   15d68:	cmp	r0, #0
   15d6c:	beq	15e48 <__assert_fail@plt+0x4954>
   15d70:	ldr	r0, [r4, #16]
   15d74:	sub	r0, r0, #1
   15d78:	str	r0, [r4, #16]
   15d7c:	ldr	r0, [sp, #4]
   15d80:	ldr	r0, [r0]
   15d84:	cmp	r0, #0
   15d88:	bne	15e48 <__assert_fail@plt+0x4954>
   15d8c:	ldr	r0, [r4, #12]
   15d90:	sub	r0, r0, #1
   15d94:	vldr	s0, [r4, #8]
   15d98:	str	r0, [r4, #12]
   15d9c:	ldr	r1, [r4, #20]
   15da0:	vldr	s2, [r1]
   15da4:	vcvt.f32.u32	s0, s0
   15da8:	vmov	s4, r0
   15dac:	vcvt.f32.u32	s4, s4
   15db0:	vmul.f32	s0, s2, s0
   15db4:	vcmpe.f32	s0, s4
   15db8:	vmrs	APSR_nzcv, fpscr
   15dbc:	ble	15e48 <__assert_fail@plt+0x4954>
   15dc0:	mov	r0, r4
   15dc4:	bl	15588 <__assert_fail@plt+0x4094>
   15dc8:	vldr	s0, [r4, #8]
   15dcc:	vldr	s2, [r4, #12]
   15dd0:	ldr	r0, [r4, #20]
   15dd4:	vcvt.f32.u32	s0, s0
   15dd8:	vldr	s4, [r0]
   15ddc:	vcvt.f32.u32	s2, s2
   15de0:	vmul.f32	s4, s4, s0
   15de4:	vcmpe.f32	s4, s2
   15de8:	vmrs	APSR_nzcv, fpscr
   15dec:	ble	15e48 <__assert_fail@plt+0x4954>
   15df0:	vldr	s2, [r0, #4]
   15df4:	ldrb	r1, [r0, #16]
   15df8:	vmul.f32	s0, s2, s0
   15dfc:	cmp	r1, #0
   15e00:	vldreq	s2, [r0, #8]
   15e04:	vmuleq.f32	s0, s0, s2
   15e08:	vcvt.u32.f32	s0, s0
   15e0c:	vmov	r1, s0
   15e10:	mov	r0, r4
   15e14:	bl	1583c <__assert_fail@plt+0x4348>
   15e18:	cmp	r0, #0
   15e1c:	bne	15e48 <__assert_fail@plt+0x4954>
   15e20:	ldr	r0, [r4, #36]	; 0x24
   15e24:	cmp	r0, #0
   15e28:	beq	15e40 <__assert_fail@plt+0x494c>
   15e2c:	ldr	r6, [r0, #4]
   15e30:	bl	12f04 <__assert_fail@plt+0x1a10>
   15e34:	cmp	r6, #0
   15e38:	mov	r0, r6
   15e3c:	bne	15e2c <__assert_fail@plt+0x4938>
   15e40:	mov	r0, #0
   15e44:	str	r0, [r4, #36]	; 0x24
   15e48:	mov	r0, r5
   15e4c:	sub	sp, fp, #16
   15e50:	pop	{r4, r5, r6, sl, fp, pc}
   15e54:	b	15d48 <__assert_fail@plt+0x4854>
   15e58:	push	{r4, r5, fp, lr}
   15e5c:	add	fp, sp, #8
   15e60:	cmp	r0, #10
   15e64:	movls	r0, #10
   15e68:	orr	r5, r0, #1
   15e6c:	mvn	r4, #0
   15e70:	cmn	r5, #1
   15e74:	bne	15e8c <__assert_fail@plt+0x4998>
   15e78:	mov	r0, r4
   15e7c:	pop	{r4, r5, fp, pc}
   15e80:	add	r5, r5, #2
   15e84:	cmn	r5, #1
   15e88:	beq	15e78 <__assert_fail@plt+0x4984>
   15e8c:	mov	r0, r5
   15e90:	bl	15ea8 <__assert_fail@plt+0x49b4>
   15e94:	cmp	r0, #0
   15e98:	beq	15e80 <__assert_fail@plt+0x498c>
   15e9c:	mov	r4, r5
   15ea0:	mov	r0, r4
   15ea4:	pop	{r4, r5, fp, pc}
   15ea8:	mov	ip, #3
   15eac:	cmp	r0, #10
   15eb0:	bcc	15ee4 <__assert_fail@plt+0x49f0>
   15eb4:	mov	ip, #3
   15eb8:	mov	r2, #9
   15ebc:	mov	r3, #16
   15ec0:	udiv	r1, r0, ip
   15ec4:	mls	r1, r1, ip, r0
   15ec8:	cmp	r1, #0
   15ecc:	beq	15ee4 <__assert_fail@plt+0x49f0>
   15ed0:	add	r2, r3, r2
   15ed4:	add	r3, r3, #8
   15ed8:	add	ip, ip, #2
   15edc:	cmp	r2, r0
   15ee0:	bcc	15ec0 <__assert_fail@plt+0x49cc>
   15ee4:	udiv	r1, r0, ip
   15ee8:	mls	r0, r1, ip, r0
   15eec:	cmp	r0, #0
   15ef0:	movwne	r0, #1
   15ef4:	bx	lr
   15ef8:	mov	r2, #0
   15efc:	str	r2, [r1]
   15f00:	ldr	r2, [r0, #36]	; 0x24
   15f04:	str	r2, [r1, #4]
   15f08:	str	r1, [r0, #36]	; 0x24
   15f0c:	bx	lr
   15f10:	mov	r2, #0
   15f14:	mov	r3, #1
   15f18:	strb	r3, [r0, #28]
   15f1c:	str	r2, [r0, #20]
   15f20:	str	r2, [r0, #24]
   15f24:	str	r1, [r0, r2, lsl #2]
   15f28:	add	r2, r2, #1
   15f2c:	cmp	r2, #4
   15f30:	bne	15f24 <__assert_fail@plt+0x4a30>
   15f34:	str	r1, [r0, #16]
   15f38:	bx	lr
   15f3c:	ldrb	r0, [r0, #28]
   15f40:	bx	lr
   15f44:	ldr	r2, [r0, #20]
   15f48:	ldrb	r3, [r0, #28]
   15f4c:	eor	r3, r3, #1
   15f50:	add	r2, r2, r3
   15f54:	and	r2, r2, #3
   15f58:	ldr	ip, [r0, r2, lsl #2]
   15f5c:	str	r1, [r0, r2, lsl #2]
   15f60:	str	r2, [r0, #20]
   15f64:	ldr	r1, [r0, #24]
   15f68:	cmp	r2, r1
   15f6c:	addeq	r1, r1, r3
   15f70:	andeq	r1, r1, #3
   15f74:	streq	r1, [r0, #24]
   15f78:	mov	r1, #0
   15f7c:	strb	r1, [r0, #28]
   15f80:	mov	r0, ip
   15f84:	bx	lr
   15f88:	push	{r4, sl, fp, lr}
   15f8c:	add	fp, sp, #8
   15f90:	mov	r4, r0
   15f94:	bl	15f3c <__assert_fail@plt+0x4a48>
   15f98:	cmp	r0, #0
   15f9c:	bne	15fd8 <__assert_fail@plt+0x4ae4>
   15fa0:	ldr	r1, [r4, #16]
   15fa4:	ldr	r2, [r4, #20]
   15fa8:	ldr	r0, [r4, r2, lsl #2]
   15fac:	str	r1, [r4, r2, lsl #2]
   15fb0:	ldr	r1, [r4, #20]
   15fb4:	ldr	r2, [r4, #24]
   15fb8:	cmp	r1, r2
   15fbc:	moveq	r1, #1
   15fc0:	strbeq	r1, [r4, #28]
   15fc4:	popeq	{r4, sl, fp, pc}
   15fc8:	sub	r1, r1, #1
   15fcc:	and	r1, r1, #3
   15fd0:	str	r1, [r4, #20]
   15fd4:	pop	{r4, sl, fp, pc}
   15fd8:	bl	114ac <abort@plt>
   15fdc:	push	{r4, r5, r6, sl, fp, lr}
   15fe0:	add	fp, sp, #16
   15fe4:	mov	r4, r1
   15fe8:	mov	r5, r0
   15fec:	mov	r0, #0
   15ff0:	strb	r0, [r2, #20]
   15ff4:	add	r6, r2, #19
   15ff8:	mov	r0, r5
   15ffc:	mov	r1, r4
   16000:	mov	r2, #10
   16004:	mov	r3, #0
   16008:	bl	1992c <__assert_fail@plt+0x8438>
   1600c:	add	r2, r0, r0, lsl #2
   16010:	sub	r2, r5, r2, lsl #1
   16014:	orr	r2, r2, #48	; 0x30
   16018:	strb	r2, [r6], #-1
   1601c:	rsbs	r2, r5, #9
   16020:	rscs	r2, r4, #0
   16024:	mov	r5, r0
   16028:	mov	r4, r1
   1602c:	bcc	15ff8 <__assert_fail@plt+0x4b04>
   16030:	add	r0, r6, #1
   16034:	pop	{r4, r5, r6, sl, fp, pc}
   16038:	sub	sp, sp, #4
   1603c:	push	{fp, lr}
   16040:	mov	fp, sp
   16044:	sub	sp, sp, #4
   16048:	str	r3, [fp, #8]
   1604c:	mov	r3, #0
   16050:	tst	r2, #64	; 0x40
   16054:	addne	r3, fp, #8
   16058:	addne	r3, r3, #4
   1605c:	strne	r3, [sp]
   16060:	ldrne	r3, [fp, #8]
   16064:	bl	1138c <openat64@plt>
   16068:	bl	17d78 <__assert_fail@plt+0x6884>
   1606c:	mov	sp, fp
   16070:	pop	{fp, lr}
   16074:	add	sp, sp, #4
   16078:	bx	lr
   1607c:	push	{r4, r5, r6, sl, fp, lr}
   16080:	add	fp, sp, #16
   16084:	mov	r4, r3
   16088:	orr	r2, r2, #18688	; 0x4900
   1608c:	orr	r2, r2, #524288	; 0x80000
   16090:	bl	16038 <__assert_fail@plt+0x4b44>
   16094:	mov	r5, r0
   16098:	mov	r0, #0
   1609c:	cmp	r5, #0
   160a0:	poplt	{r4, r5, r6, sl, fp, pc}
   160a4:	mov	r0, r5
   160a8:	bl	1144c <fdopendir@plt>
   160ac:	cmp	r0, #0
   160b0:	strne	r5, [r4]
   160b4:	popne	{r4, r5, r6, sl, fp, pc}
   160b8:	bl	113a4 <__errno_location@plt>
   160bc:	mov	r4, r0
   160c0:	ldr	r6, [r0]
   160c4:	mov	r0, r5
   160c8:	bl	114b8 <close@plt>
   160cc:	str	r6, [r4]
   160d0:	mov	r0, #0
   160d4:	pop	{r4, r5, r6, sl, fp, pc}
   160d8:	push	{r4, r5, fp, lr}
   160dc:	add	fp, sp, #8
   160e0:	cmp	r0, #0
   160e4:	beq	16178 <__assert_fail@plt+0x4c84>
   160e8:	mov	r4, r0
   160ec:	mov	r1, #47	; 0x2f
   160f0:	bl	11428 <strrchr@plt>
   160f4:	cmp	r0, #0
   160f8:	mov	r5, r4
   160fc:	addne	r5, r0, #1
   16100:	sub	r0, r5, r4
   16104:	cmp	r0, #7
   16108:	blt	1615c <__assert_fail@plt+0x4c68>
   1610c:	sub	r0, r5, #7
   16110:	movw	r1, #43676	; 0xaa9c
   16114:	movt	r1, #1
   16118:	mov	r2, #7
   1611c:	bl	114a0 <strncmp@plt>
   16120:	cmp	r0, #0
   16124:	bne	1615c <__assert_fail@plt+0x4c68>
   16128:	movw	r1, #43684	; 0xaaa4
   1612c:	movt	r1, #1
   16130:	mov	r0, r5
   16134:	mov	r2, #3
   16138:	bl	114a0 <strncmp@plt>
   1613c:	cmp	r0, #0
   16140:	beq	1614c <__assert_fail@plt+0x4c58>
   16144:	mov	r4, r5
   16148:	b	1615c <__assert_fail@plt+0x4c68>
   1614c:	add	r4, r5, #3
   16150:	movw	r0, #49528	; 0xc178
   16154:	movt	r0, #2
   16158:	str	r4, [r0]
   1615c:	movw	r0, #49532	; 0xc17c
   16160:	movt	r0, #2
   16164:	str	r4, [r0]
   16168:	movw	r0, #49592	; 0xc1b8
   1616c:	movt	r0, #2
   16170:	str	r4, [r0]
   16174:	pop	{r4, r5, fp, pc}
   16178:	movw	r0, #49544	; 0xc188
   1617c:	movt	r0, #2
   16180:	ldr	r3, [r0]
   16184:	movw	r0, #43620	; 0xaa64
   16188:	movt	r0, #1
   1618c:	mov	r1, #55	; 0x37
   16190:	mov	r2, #1
   16194:	bl	112c0 <fwrite@plt>
   16198:	bl	114ac <abort@plt>
   1619c:	push	{r4, r5, r6, sl, fp, lr}
   161a0:	add	fp, sp, #16
   161a4:	mov	r4, r0
   161a8:	movw	r0, #49600	; 0xc1c0
   161ac:	movt	r0, #2
   161b0:	cmp	r4, #0
   161b4:	moveq	r4, r0
   161b8:	bl	113a4 <__errno_location@plt>
   161bc:	mov	r5, r0
   161c0:	ldr	r6, [r0]
   161c4:	mov	r0, r4
   161c8:	mov	r1, #48	; 0x30
   161cc:	bl	18574 <__assert_fail@plt+0x7080>
   161d0:	str	r6, [r5]
   161d4:	pop	{r4, r5, r6, sl, fp, pc}
   161d8:	movw	r1, #49600	; 0xc1c0
   161dc:	movt	r1, #2
   161e0:	cmp	r0, #0
   161e4:	movne	r1, r0
   161e8:	ldr	r0, [r1]
   161ec:	bx	lr
   161f0:	movw	r2, #49600	; 0xc1c0
   161f4:	movt	r2, #2
   161f8:	cmp	r0, #0
   161fc:	movne	r2, r0
   16200:	str	r1, [r2]
   16204:	bx	lr
   16208:	movw	r3, #49600	; 0xc1c0
   1620c:	movt	r3, #2
   16210:	cmp	r0, #0
   16214:	movne	r3, r0
   16218:	ubfx	r0, r1, #5, #3
   1621c:	add	r0, r3, r0, lsl #2
   16220:	ldr	r3, [r0, #8]
   16224:	and	r1, r1, #31
   16228:	eor	r2, r2, r3, lsr r1
   1622c:	and	r2, r2, #1
   16230:	eor	r2, r3, r2, lsl r1
   16234:	str	r2, [r0, #8]
   16238:	mov	r0, #1
   1623c:	and	r0, r0, r3, lsr r1
   16240:	bx	lr
   16244:	movw	r2, #49600	; 0xc1c0
   16248:	movt	r2, #2
   1624c:	cmp	r0, #0
   16250:	movne	r2, r0
   16254:	ldr	r0, [r2, #4]
   16258:	str	r1, [r2, #4]
   1625c:	bx	lr
   16260:	movw	r3, #49600	; 0xc1c0
   16264:	movt	r3, #2
   16268:	cmp	r0, #0
   1626c:	movne	r3, r0
   16270:	mov	r0, #10
   16274:	str	r0, [r3]
   16278:	cmp	r1, #0
   1627c:	cmpne	r2, #0
   16280:	bne	16290 <__assert_fail@plt+0x4d9c>
   16284:	push	{fp, lr}
   16288:	mov	fp, sp
   1628c:	bl	114ac <abort@plt>
   16290:	str	r1, [r3, #40]	; 0x28
   16294:	str	r2, [r3, #44]	; 0x2c
   16298:	bx	lr
   1629c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   162a0:	add	fp, sp, #28
   162a4:	sub	sp, sp, #20
   162a8:	mov	r8, r3
   162ac:	mov	r9, r2
   162b0:	mov	sl, r1
   162b4:	mov	r7, r0
   162b8:	ldr	r0, [fp, #8]
   162bc:	movw	r5, #49600	; 0xc1c0
   162c0:	movt	r5, #2
   162c4:	cmp	r0, #0
   162c8:	movne	r5, r0
   162cc:	bl	113a4 <__errno_location@plt>
   162d0:	mov	r4, r0
   162d4:	ldm	r5, {r0, r1}
   162d8:	ldr	r2, [r5, #40]	; 0x28
   162dc:	ldr	r3, [r5, #44]	; 0x2c
   162e0:	ldr	r6, [r4]
   162e4:	add	r5, r5, #8
   162e8:	stm	sp, {r0, r1, r5}
   162ec:	str	r2, [sp, #12]
   162f0:	str	r3, [sp, #16]
   162f4:	mov	r0, r7
   162f8:	mov	r1, sl
   162fc:	mov	r2, r9
   16300:	mov	r3, r8
   16304:	bl	16314 <__assert_fail@plt+0x4e20>
   16308:	str	r6, [r4]
   1630c:	sub	sp, fp, #28
   16310:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16314:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16318:	add	fp, sp, #28
   1631c:	sub	sp, sp, #156	; 0x9c
   16320:	mov	r9, r3
   16324:	str	r2, [fp, #-84]	; 0xffffffac
   16328:	mov	r6, r1
   1632c:	mov	r7, r0
   16330:	ldr	r0, [fp, #12]
   16334:	and	r1, r0, #4
   16338:	str	r1, [sp, #32]
   1633c:	and	r1, r0, #1
   16340:	str	r1, [sp, #36]	; 0x24
   16344:	ubfx	sl, r0, #1, #1
   16348:	bl	112d8 <__ctype_get_mb_cur_max@plt>
   1634c:	str	r0, [sp, #40]	; 0x28
   16350:	ldr	r0, [fp, #24]
   16354:	str	r0, [sp, #76]	; 0x4c
   16358:	ldr	r0, [fp, #20]
   1635c:	str	r0, [sp, #68]	; 0x44
   16360:	ldr	r0, [fp, #8]
   16364:	str	r0, [fp, #-60]	; 0xffffffc4
   16368:	mov	r0, #0
   1636c:	str	r0, [sp, #72]	; 0x48
   16370:	mov	r0, #0
   16374:	str	r0, [sp, #92]	; 0x5c
   16378:	mov	r0, #0
   1637c:	str	r0, [fp, #-72]	; 0xffffffb8
   16380:	mov	r0, #0
   16384:	mov	r1, #0
   16388:	str	r1, [fp, #-56]	; 0xffffffc8
   1638c:	mov	r1, #0
   16390:	str	r1, [sp, #56]	; 0x38
   16394:	mov	r5, #1
   16398:	str	r7, [sp, #80]	; 0x50
   1639c:	mov	r4, r6
   163a0:	ldr	r6, [fp, #-60]	; 0xffffffc4
   163a4:	cmp	r6, #10
   163a8:	bhi	17310 <__assert_fail@plt+0x5e1c>
   163ac:	add	r1, pc, #20
   163b0:	mov	r8, #0
   163b4:	mov	r2, #1
   163b8:	mov	r3, #0
   163bc:	ldr	ip, [fp, #-84]	; 0xffffffac
   163c0:	mov	lr, r9
   163c4:	ldr	pc, [r1, r6, lsl #2]
   163c8:	andeq	r6, r1, r0, lsr #9
   163cc:	ldrdeq	r6, [r1], -r0
   163d0:	muleq	r1, r0, r4
   163d4:	andeq	r6, r1, r8, lsl #9
   163d8:	andeq	r6, r1, r4, asr #9
   163dc:	andeq	r6, r1, r4, lsr #10
   163e0:			; <UNDEFINED> instruction: 0x000164b0
   163e4:	andeq	r6, r1, r0, lsl #11
   163e8:	strdeq	r6, [r1], -r4
   163ec:	strdeq	r6, [r1], -r4
   163f0:	andeq	r6, r1, ip, lsl r4
   163f4:	movw	r0, #43766	; 0xaaf6
   163f8:	movt	r0, #1
   163fc:	mov	r1, r6
   16400:	bl	1791c <__assert_fail@plt+0x6428>
   16404:	str	r0, [sp, #68]	; 0x44
   16408:	movw	r0, #43768	; 0xaaf8
   1640c:	movt	r0, #1
   16410:	mov	r1, r6
   16414:	bl	1791c <__assert_fail@plt+0x6428>
   16418:	str	r0, [sp, #76]	; 0x4c
   1641c:	mov	r8, #0
   16420:	tst	sl, #1
   16424:	bne	1645c <__assert_fail@plt+0x4f68>
   16428:	ldr	r0, [sp, #68]	; 0x44
   1642c:	ldrb	r0, [r0]
   16430:	cmp	r0, #0
   16434:	beq	1645c <__assert_fail@plt+0x4f68>
   16438:	ldr	r1, [sp, #68]	; 0x44
   1643c:	add	r1, r1, #1
   16440:	mov	r8, #0
   16444:	cmp	r8, r4
   16448:	strbcc	r0, [r7, r8]
   1644c:	ldrb	r0, [r1, r8]
   16450:	add	r8, r8, #1
   16454:	cmp	r0, #0
   16458:	bne	16444 <__assert_fail@plt+0x4f50>
   1645c:	ldr	r6, [sp, #76]	; 0x4c
   16460:	mov	r0, r6
   16464:	bl	11374 <strlen@plt>
   16468:	str	r0, [fp, #-72]	; 0xffffffb8
   1646c:	str	r6, [sp, #92]	; 0x5c
   16470:	mov	r2, #1
   16474:	mov	r3, sl
   16478:	ldr	ip, [fp, #-84]	; 0xffffffac
   1647c:	mov	lr, r9
   16480:	ldr	r6, [fp, #-60]	; 0xffffffc4
   16484:	b	16580 <__assert_fail@plt+0x508c>
   16488:	mov	r0, #1
   1648c:	b	164d0 <__assert_fail@plt+0x4fdc>
   16490:	tst	sl, #1
   16494:	bne	164d0 <__assert_fail@plt+0x4fdc>
   16498:	mov	r2, r0
   1649c:	b	164f8 <__assert_fail@plt+0x5004>
   164a0:	mov	r6, #0
   164a4:	mov	r8, #0
   164a8:	mov	r2, r0
   164ac:	b	1657c <__assert_fail@plt+0x5088>
   164b0:	mov	r0, #1
   164b4:	str	r0, [fp, #-72]	; 0xffffffb8
   164b8:	mov	r8, #0
   164bc:	mov	r6, #5
   164c0:	b	1653c <__assert_fail@plt+0x5048>
   164c4:	mov	r2, #1
   164c8:	tst	sl, #1
   164cc:	beq	164f8 <__assert_fail@plt+0x5004>
   164d0:	mov	r1, #1
   164d4:	str	r1, [fp, #-72]	; 0xffffffb8
   164d8:	mov	r8, #0
   164dc:	mov	r6, #2
   164e0:	movw	r1, #43768	; 0xaaf8
   164e4:	movt	r1, #1
   164e8:	str	r1, [sp, #92]	; 0x5c
   164ec:	mov	r2, r0
   164f0:	mov	r3, #1
   164f4:	b	16580 <__assert_fail@plt+0x508c>
   164f8:	mov	r8, #1
   164fc:	mov	r6, #2
   16500:	cmp	r4, #0
   16504:	movne	r0, #39	; 0x27
   16508:	strbne	r0, [r7]
   1650c:	movw	r0, #43768	; 0xaaf8
   16510:	movt	r0, #1
   16514:	str	r0, [sp, #92]	; 0x5c
   16518:	mov	r0, #1
   1651c:	str	r0, [fp, #-72]	; 0xffffffb8
   16520:	b	1657c <__assert_fail@plt+0x5088>
   16524:	mov	r6, #5
   16528:	tst	sl, #1
   1652c:	beq	16554 <__assert_fail@plt+0x5060>
   16530:	mov	r0, #1
   16534:	str	r0, [fp, #-72]	; 0xffffffb8
   16538:	mov	r8, #0
   1653c:	movw	r0, #43764	; 0xaaf4
   16540:	movt	r0, #1
   16544:	str	r0, [sp, #92]	; 0x5c
   16548:	mov	r2, #1
   1654c:	mov	r3, #1
   16550:	b	16580 <__assert_fail@plt+0x508c>
   16554:	cmp	r4, #0
   16558:	movne	r0, #34	; 0x22
   1655c:	strbne	r0, [r7]
   16560:	mov	r8, #1
   16564:	movw	r0, #43764	; 0xaaf4
   16568:	movt	r0, #1
   1656c:	str	r0, [sp, #92]	; 0x5c
   16570:	mov	r0, #1
   16574:	str	r0, [fp, #-72]	; 0xffffffb8
   16578:	mov	r2, #1
   1657c:	mov	r3, #0
   16580:	ldr	r0, [fp, #16]
   16584:	cmp	r0, #0
   16588:	movwne	r0, #1
   1658c:	and	r0, r0, r3
   16590:	str	r0, [fp, #-88]	; 0xffffffa8
   16594:	ldr	r0, [fp, #-72]	; 0xffffffb8
   16598:	cmp	r0, #0
   1659c:	movwne	r0, #1
   165a0:	and	r1, r0, r3
   165a4:	and	r1, r2, r1
   165a8:	str	r1, [sp, #48]	; 0x30
   165ac:	str	r6, [fp, #-60]	; 0xffffffc4
   165b0:	subs	r6, r6, #2
   165b4:	clz	r1, r6
   165b8:	lsr	r1, r1, #5
   165bc:	and	r1, r1, r3
   165c0:	str	r1, [sp, #60]	; 0x3c
   165c4:	str	r6, [fp, #-80]	; 0xffffffb0
   165c8:	mov	r1, r6
   165cc:	movwne	r1, #1
   165d0:	str	r3, [fp, #-76]	; 0xffffffb4
   165d4:	eor	r3, r3, #1
   165d8:	str	r3, [sp, #88]	; 0x58
   165dc:	orr	r3, r1, r3
   165e0:	str	r3, [sp, #64]	; 0x40
   165e4:	and	r1, r1, r2
   165e8:	str	r1, [fp, #-68]	; 0xffffffbc
   165ec:	and	r0, r0, r1
   165f0:	str	r0, [fp, #-64]	; 0xffffffc0
   165f4:	str	r2, [sp, #84]	; 0x54
   165f8:	eor	r0, r2, #1
   165fc:	str	r0, [sp, #52]	; 0x34
   16600:	mov	r6, #0
   16604:	cmn	lr, #1
   16608:	beq	16618 <__assert_fail@plt+0x5124>
   1660c:	cmp	r6, lr
   16610:	bne	16624 <__assert_fail@plt+0x5130>
   16614:	b	17190 <__assert_fail@plt+0x5c9c>
   16618:	ldrb	r0, [ip, r6]
   1661c:	cmp	r0, #0
   16620:	beq	17190 <__assert_fail@plt+0x5c9c>
   16624:	str	r5, [fp, #-48]	; 0xffffffd0
   16628:	mov	sl, #0
   1662c:	ldr	r0, [fp, #-64]	; 0xffffffc0
   16630:	cmp	r0, #0
   16634:	beq	16668 <__assert_fail@plt+0x5174>
   16638:	ldr	r0, [fp, #-72]	; 0xffffffb8
   1663c:	add	r5, r6, r0
   16640:	cmp	r0, #2
   16644:	bcc	16660 <__assert_fail@plt+0x516c>
   16648:	cmn	lr, #1
   1664c:	bne	16660 <__assert_fail@plt+0x516c>
   16650:	mov	r0, ip
   16654:	bl	11374 <strlen@plt>
   16658:	ldr	ip, [fp, #-84]	; 0xffffffac
   1665c:	mov	lr, r0
   16660:	cmp	r5, lr
   16664:	bls	16674 <__assert_fail@plt+0x5180>
   16668:	mov	r0, #0
   1666c:	str	r0, [fp, #-52]	; 0xffffffcc
   16670:	b	166c0 <__assert_fail@plt+0x51cc>
   16674:	mov	r5, r4
   16678:	mov	r4, lr
   1667c:	add	r0, ip, r6
   16680:	ldr	r1, [sp, #92]	; 0x5c
   16684:	ldr	r2, [fp, #-72]	; 0xffffffb8
   16688:	bl	11260 <memcmp@plt>
   1668c:	cmp	r0, #0
   16690:	mov	r1, r0
   16694:	movwne	r1, #1
   16698:	ldr	r2, [sp, #88]	; 0x58
   1669c:	orr	r1, r1, r2
   166a0:	tst	r1, #1
   166a4:	beq	17254 <__assert_fail@plt+0x5d60>
   166a8:	clz	r0, r0
   166ac:	lsr	r0, r0, #5
   166b0:	str	r0, [fp, #-52]	; 0xffffffcc
   166b4:	ldr	ip, [fp, #-84]	; 0xffffffac
   166b8:	mov	lr, r4
   166bc:	mov	r4, r5
   166c0:	ldrb	r5, [ip, r6]
   166c4:	cmp	r5, #126	; 0x7e
   166c8:	bhi	16a84 <__assert_fail@plt+0x5590>
   166cc:	mov	r9, #1
   166d0:	mov	r2, #110	; 0x6e
   166d4:	mov	r0, #97	; 0x61
   166d8:	add	r3, pc, #4
   166dc:	mov	r1, #0
   166e0:	ldr	pc, [r3, r5, lsl #2]
   166e4:	andeq	r6, r1, ip, ror r9
   166e8:	andeq	r6, r1, r4, lsl #21
   166ec:	andeq	r6, r1, r4, lsl #21
   166f0:	andeq	r6, r1, r4, lsl #21
   166f4:	andeq	r6, r1, r4, lsl #21
   166f8:	andeq	r6, r1, r4, lsl #21
   166fc:	andeq	r6, r1, r4, lsl #21
   16700:	andeq	r6, r1, r8, asr #22
   16704:	andeq	r6, r1, ip, asr r9
   16708:	andeq	r6, r1, r4, asr r9
   1670c:	andeq	r6, r1, r8, ror #18
   16710:	andeq	r6, r1, ip, ror #19
   16714:	andeq	r6, r1, ip, asr #18
   16718:	andeq	r6, r1, r4, ror #18
   1671c:	andeq	r6, r1, r4, lsl #21
   16720:	andeq	r6, r1, r4, lsl #21
   16724:	andeq	r6, r1, r4, lsl #21
   16728:	andeq	r6, r1, r4, lsl #21
   1672c:	andeq	r6, r1, r4, lsl #21
   16730:	andeq	r6, r1, r4, lsl #21
   16734:	andeq	r6, r1, r4, lsl #21
   16738:	andeq	r6, r1, r4, lsl #21
   1673c:	andeq	r6, r1, r4, lsl #21
   16740:	andeq	r6, r1, r4, lsl #21
   16744:	andeq	r6, r1, r4, lsl #21
   16748:	andeq	r6, r1, r4, lsl #21
   1674c:	andeq	r6, r1, r4, lsl #21
   16750:	andeq	r6, r1, r4, lsl #21
   16754:	andeq	r6, r1, r4, lsl #21
   16758:	andeq	r6, r1, r4, lsl #21
   1675c:	andeq	r6, r1, r4, lsl #21
   16760:	andeq	r6, r1, r4, lsl #21
   16764:	strdeq	r6, [r1], -r8
   16768:	strdeq	r6, [r1], -ip
   1676c:	strdeq	r6, [r1], -ip
   16770:	strdeq	r6, [r1], -r4
   16774:	strdeq	r6, [r1], -ip
   16778:	andeq	r6, r1, r0, ror #17
   1677c:	strdeq	r6, [r1], -ip
   16780:	strdeq	r6, [r1], -r4
   16784:	strdeq	r6, [r1], -ip
   16788:	strdeq	r6, [r1], -ip
   1678c:	strdeq	r6, [r1], -ip
   16790:	andeq	r6, r1, r0, ror #17
   16794:	andeq	r6, r1, r0, ror #17
   16798:	andeq	r6, r1, r0, ror #17
   1679c:	andeq	r6, r1, r0, ror #17
   167a0:	andeq	r6, r1, r0, ror #17
   167a4:	andeq	r6, r1, r0, ror #17
   167a8:	andeq	r6, r1, r0, ror #17
   167ac:	andeq	r6, r1, r0, ror #17
   167b0:	andeq	r6, r1, r0, ror #17
   167b4:	andeq	r6, r1, r0, ror #17
   167b8:	andeq	r6, r1, r0, ror #17
   167bc:	andeq	r6, r1, r0, ror #17
   167c0:	andeq	r6, r1, r0, ror #17
   167c4:	andeq	r6, r1, r0, ror #17
   167c8:	andeq	r6, r1, r0, ror #17
   167cc:	andeq	r6, r1, r0, ror #17
   167d0:	strdeq	r6, [r1], -ip
   167d4:	strdeq	r6, [r1], -ip
   167d8:	strdeq	r6, [r1], -ip
   167dc:	strdeq	r6, [r1], -ip
   167e0:			; <UNDEFINED> instruction: 0x000169bc
   167e4:	andeq	r6, r1, r4, lsl #21
   167e8:	andeq	r6, r1, r0, ror #17
   167ec:	andeq	r6, r1, r0, ror #17
   167f0:	andeq	r6, r1, r0, ror #17
   167f4:	andeq	r6, r1, r0, ror #17
   167f8:	andeq	r6, r1, r0, ror #17
   167fc:	andeq	r6, r1, r0, ror #17
   16800:	andeq	r6, r1, r0, ror #17
   16804:	andeq	r6, r1, r0, ror #17
   16808:	andeq	r6, r1, r0, ror #17
   1680c:	andeq	r6, r1, r0, ror #17
   16810:	andeq	r6, r1, r0, ror #17
   16814:	andeq	r6, r1, r0, ror #17
   16818:	andeq	r6, r1, r0, ror #17
   1681c:	andeq	r6, r1, r0, ror #17
   16820:	andeq	r6, r1, r0, ror #17
   16824:	andeq	r6, r1, r0, ror #17
   16828:	andeq	r6, r1, r0, ror #17
   1682c:	andeq	r6, r1, r0, ror #17
   16830:	andeq	r6, r1, r0, ror #17
   16834:	andeq	r6, r1, r0, ror #17
   16838:	andeq	r6, r1, r0, ror #17
   1683c:	andeq	r6, r1, r0, ror #17
   16840:	andeq	r6, r1, r0, ror #17
   16844:	andeq	r6, r1, r0, ror #17
   16848:	andeq	r6, r1, r0, ror #17
   1684c:	andeq	r6, r1, r0, ror #17
   16850:	strdeq	r6, [r1], -ip
   16854:	andeq	r6, r1, r8, lsr #18
   16858:	andeq	r6, r1, r0, ror #17
   1685c:	strdeq	r6, [r1], -ip
   16860:	andeq	r6, r1, r0, ror #17
   16864:	strdeq	r6, [r1], -ip
   16868:	andeq	r6, r1, r0, ror #17
   1686c:	andeq	r6, r1, r0, ror #17
   16870:	andeq	r6, r1, r0, ror #17
   16874:	andeq	r6, r1, r0, ror #17
   16878:	andeq	r6, r1, r0, ror #17
   1687c:	andeq	r6, r1, r0, ror #17
   16880:	andeq	r6, r1, r0, ror #17
   16884:	andeq	r6, r1, r0, ror #17
   16888:	andeq	r6, r1, r0, ror #17
   1688c:	andeq	r6, r1, r0, ror #17
   16890:	andeq	r6, r1, r0, ror #17
   16894:	andeq	r6, r1, r0, ror #17
   16898:	andeq	r6, r1, r0, ror #17
   1689c:	andeq	r6, r1, r0, ror #17
   168a0:	andeq	r6, r1, r0, ror #17
   168a4:	andeq	r6, r1, r0, ror #17
   168a8:	andeq	r6, r1, r0, ror #17
   168ac:	andeq	r6, r1, r0, ror #17
   168b0:	andeq	r6, r1, r0, ror #17
   168b4:	andeq	r6, r1, r0, ror #17
   168b8:	andeq	r6, r1, r0, ror #17
   168bc:	andeq	r6, r1, r0, ror #17
   168c0:	andeq	r6, r1, r0, ror #17
   168c4:	andeq	r6, r1, r0, ror #17
   168c8:	andeq	r6, r1, r0, ror #17
   168cc:	andeq	r6, r1, r0, ror #17
   168d0:	andeq	r6, r1, r8, lsl #18
   168d4:	strdeq	r6, [r1], -ip
   168d8:	andeq	r6, r1, r8, lsl #18
   168dc:	strdeq	r6, [r1], -r4
   168e0:	ldr	r0, [fp, #-68]	; 0xffffffbc
   168e4:	cmp	r0, #0
   168e8:	beq	16b5c <__assert_fail@plt+0x5668>
   168ec:	ldr	r0, [fp, #16]
   168f0:	b	16b60 <__assert_fail@plt+0x566c>
   168f4:	mov	r9, #0
   168f8:	cmp	r6, #0
   168fc:	beq	16af8 <__assert_fail@plt+0x5604>
   16900:	mov	sl, #0
   16904:	b	168e0 <__assert_fail@plt+0x53ec>
   16908:	mov	r9, #0
   1690c:	cmn	lr, #1
   16910:	beq	16adc <__assert_fail@plt+0x55e8>
   16914:	cmp	r6, #0
   16918:	bne	16900 <__assert_fail@plt+0x540c>
   1691c:	cmp	lr, #1
   16920:	beq	16af8 <__assert_fail@plt+0x5604>
   16924:	b	16900 <__assert_fail@plt+0x540c>
   16928:	ldr	r0, [fp, #-60]	; 0xffffffc4
   1692c:	cmp	r0, #2
   16930:	bne	16b24 <__assert_fail@plt+0x5630>
   16934:	ldr	r0, [fp, #-76]	; 0xffffffb4
   16938:	tst	r0, #1
   1693c:	bne	1726c <__assert_fail@plt+0x5d78>
   16940:	mov	sl, #0
   16944:	mov	r0, #92	; 0x5c
   16948:	b	16b38 <__assert_fail@plt+0x5644>
   1694c:	mov	r0, #102	; 0x66
   16950:	b	16b48 <__assert_fail@plt+0x5654>
   16954:	mov	r2, #116	; 0x74
   16958:	b	16968 <__assert_fail@plt+0x5474>
   1695c:	mov	r0, #98	; 0x62
   16960:	b	16b48 <__assert_fail@plt+0x5654>
   16964:	mov	r2, #114	; 0x72
   16968:	ldr	r0, [sp, #64]	; 0x40
   1696c:	tst	r0, #1
   16970:	mov	r0, r2
   16974:	bne	16b48 <__assert_fail@plt+0x5654>
   16978:	b	1726c <__assert_fail@plt+0x5d78>
   1697c:	ldr	r0, [sp, #84]	; 0x54
   16980:	tst	r0, #1
   16984:	beq	16c38 <__assert_fail@plt+0x5744>
   16988:	ldr	r0, [fp, #-76]	; 0xffffffb4
   1698c:	tst	r0, #1
   16990:	bne	1726c <__assert_fail@plt+0x5d78>
   16994:	ldr	r0, [fp, #-60]	; 0xffffffc4
   16998:	cmp	r0, #2
   1699c:	ldr	r0, [fp, #-80]	; 0xffffffb0
   169a0:	movwne	r0, #1
   169a4:	ldr	r2, [fp, #-56]	; 0xffffffc8
   169a8:	orr	r0, r0, r2
   169ac:	tst	r0, #1
   169b0:	beq	1702c <__assert_fail@plt+0x5b38>
   169b4:	mov	r0, r8
   169b8:	b	17060 <__assert_fail@plt+0x5b6c>
   169bc:	mov	sl, #0
   169c0:	mov	r5, #63	; 0x3f
   169c4:	ldr	r0, [fp, #-60]	; 0xffffffc4
   169c8:	cmp	r0, #5
   169cc:	beq	16dec <__assert_fail@plt+0x58f8>
   169d0:	cmp	r0, #2
   169d4:	bne	16e8c <__assert_fail@plt+0x5998>
   169d8:	ldr	r0, [fp, #-76]	; 0xffffffb4
   169dc:	tst	r0, #1
   169e0:	mov	r9, #0
   169e4:	beq	168e0 <__assert_fail@plt+0x53ec>
   169e8:	b	1726c <__assert_fail@plt+0x5d78>
   169ec:	mov	r0, #118	; 0x76
   169f0:	b	16b48 <__assert_fail@plt+0x5654>
   169f4:	mov	r5, #39	; 0x27
   169f8:	mov	r0, #1
   169fc:	str	r0, [sp, #56]	; 0x38
   16a00:	ldr	r0, [fp, #-60]	; 0xffffffc4
   16a04:	cmp	r0, #2
   16a08:	bne	16c58 <__assert_fail@plt+0x5764>
   16a0c:	ldr	r0, [fp, #-76]	; 0xffffffb4
   16a10:	tst	r0, #1
   16a14:	bne	1726c <__assert_fail@plt+0x5d78>
   16a18:	ldr	r2, [sp, #72]	; 0x48
   16a1c:	cmp	r2, #0
   16a20:	mov	r0, r2
   16a24:	movwne	r0, #1
   16a28:	clz	r1, r4
   16a2c:	lsr	r1, r1, #5
   16a30:	orrs	r0, r0, r1
   16a34:	moveq	r2, r4
   16a38:	str	r2, [sp, #72]	; 0x48
   16a3c:	moveq	r4, r0
   16a40:	cmp	r8, r4
   16a44:	movcc	r0, #39	; 0x27
   16a48:	strbcc	r0, [r7, r8]
   16a4c:	add	r0, r8, #1
   16a50:	cmp	r0, r4
   16a54:	movcc	r1, #92	; 0x5c
   16a58:	strbcc	r1, [r7, r0]
   16a5c:	add	r0, r8, #2
   16a60:	cmp	r0, r4
   16a64:	movcc	r1, #39	; 0x27
   16a68:	strbcc	r1, [r7, r0]
   16a6c:	add	r8, r8, #3
   16a70:	mov	r0, #0
   16a74:	str	r0, [fp, #-56]	; 0xffffffc8
   16a78:	mov	sl, #0
   16a7c:	mov	r9, #1
   16a80:	b	168e0 <__assert_fail@plt+0x53ec>
   16a84:	str	r4, [sp, #24]
   16a88:	ldr	r0, [sp, #40]	; 0x28
   16a8c:	cmp	r0, #1
   16a90:	bne	16c60 <__assert_fail@plt+0x576c>
   16a94:	str	lr, [sp, #28]
   16a98:	bl	1135c <__ctype_b_loc@plt>
   16a9c:	ldr	ip, [fp, #-84]	; 0xffffffac
   16aa0:	ldr	r0, [r0]
   16aa4:	add	r0, r0, r5, lsl #1
   16aa8:	ldrb	r0, [r0, #1]
   16aac:	ubfx	r9, r0, #6, #1
   16ab0:	mov	r1, #1
   16ab4:	ldr	r4, [sp, #24]
   16ab8:	ldr	r0, [sp, #52]	; 0x34
   16abc:	orr	r0, r9, r0
   16ac0:	mov	r2, r1
   16ac4:	cmp	r1, #1
   16ac8:	bhi	16e94 <__assert_fail@plt+0x59a0>
   16acc:	tst	r0, #1
   16ad0:	beq	16e94 <__assert_fail@plt+0x59a0>
   16ad4:	ldr	lr, [sp, #28]
   16ad8:	b	168e0 <__assert_fail@plt+0x53ec>
   16adc:	cmp	r6, #0
   16ae0:	ldrbeq	r0, [ip, #1]
   16ae4:	cmpeq	r0, #0
   16ae8:	beq	16af8 <__assert_fail@plt+0x5604>
   16aec:	mvn	lr, #0
   16af0:	mov	sl, #0
   16af4:	b	168e0 <__assert_fail@plt+0x53ec>
   16af8:	mov	r1, #1
   16afc:	ldr	r0, [fp, #-60]	; 0xffffffc4
   16b00:	cmp	r0, #2
   16b04:	bne	16b1c <__assert_fail@plt+0x5628>
   16b08:	ldr	r0, [fp, #-76]	; 0xffffffb4
   16b0c:	tst	r0, #1
   16b10:	mov	r9, r1
   16b14:	beq	168e0 <__assert_fail@plt+0x53ec>
   16b18:	b	1726c <__assert_fail@plt+0x5d78>
   16b1c:	mov	r9, r1
   16b20:	b	168e0 <__assert_fail@plt+0x53ec>
   16b24:	mov	sl, #0
   16b28:	mov	r0, #92	; 0x5c
   16b2c:	ldr	r1, [sp, #48]	; 0x30
   16b30:	cmp	r1, #0
   16b34:	beq	16b48 <__assert_fail@plt+0x5654>
   16b38:	mov	r9, #0
   16b3c:	cmp	sl, #0
   16b40:	beq	170f8 <__assert_fail@plt+0x5c04>
   16b44:	b	17134 <__assert_fail@plt+0x5c40>
   16b48:	mov	r9, #0
   16b4c:	ldr	r1, [sp, #84]	; 0x54
   16b50:	tst	r1, #1
   16b54:	mov	sl, #0
   16b58:	bne	16b98 <__assert_fail@plt+0x56a4>
   16b5c:	ldr	r0, [fp, #-88]	; 0xffffffa8
   16b60:	cmp	r0, #0
   16b64:	mov	r0, r5
   16b68:	beq	16b8c <__assert_fail@plt+0x5698>
   16b6c:	ubfx	r0, r5, #5, #3
   16b70:	ldr	r1, [fp, #16]
   16b74:	ldr	r0, [r1, r0, lsl #2]
   16b78:	and	r1, r5, #31
   16b7c:	mov	r2, #1
   16b80:	tst	r0, r2, lsl r1
   16b84:	mov	r0, r5
   16b88:	bne	16b98 <__assert_fail@plt+0x56a4>
   16b8c:	ldr	r1, [fp, #-52]	; 0xffffffcc
   16b90:	cmp	r1, #0
   16b94:	beq	170f0 <__assert_fail@plt+0x5bfc>
   16b98:	ldr	r1, [fp, #-76]	; 0xffffffb4
   16b9c:	tst	r1, #1
   16ba0:	bne	1726c <__assert_fail@plt+0x5d78>
   16ba4:	ldr	r1, [fp, #-60]	; 0xffffffc4
   16ba8:	cmp	r1, #2
   16bac:	ldr	r1, [fp, #-80]	; 0xffffffb0
   16bb0:	movwne	r1, #1
   16bb4:	ldr	r2, [fp, #-56]	; 0xffffffc8
   16bb8:	orr	r1, r1, r2
   16bbc:	tst	r1, #1
   16bc0:	beq	16bcc <__assert_fail@plt+0x56d8>
   16bc4:	ldr	r5, [fp, #-48]	; 0xffffffd0
   16bc8:	b	16c08 <__assert_fail@plt+0x5714>
   16bcc:	cmp	r8, r4
   16bd0:	movcc	r1, #39	; 0x27
   16bd4:	strbcc	r1, [r7, r8]
   16bd8:	add	r1, r8, #1
   16bdc:	cmp	r1, r4
   16be0:	ldr	r5, [fp, #-48]	; 0xffffffd0
   16be4:	movcc	r2, #36	; 0x24
   16be8:	strbcc	r2, [r7, r1]
   16bec:	add	r1, r8, #2
   16bf0:	cmp	r1, r4
   16bf4:	movcc	r2, #39	; 0x27
   16bf8:	strbcc	r2, [r7, r1]
   16bfc:	add	r8, r8, #3
   16c00:	mov	r1, #1
   16c04:	str	r1, [fp, #-56]	; 0xffffffc8
   16c08:	cmp	r8, r4
   16c0c:	movcc	r1, #92	; 0x5c
   16c10:	strbcc	r1, [r7, r8]
   16c14:	add	r8, r8, #1
   16c18:	cmp	r8, r4
   16c1c:	strbcc	r0, [r7, r8]
   16c20:	and	r5, r5, r9
   16c24:	add	r8, r8, #1
   16c28:	add	r6, r6, #1
   16c2c:	cmn	lr, #1
   16c30:	bne	1660c <__assert_fail@plt+0x5118>
   16c34:	b	16618 <__assert_fail@plt+0x5124>
   16c38:	mov	r9, #0
   16c3c:	ldr	r0, [sp, #36]	; 0x24
   16c40:	cmp	r0, #0
   16c44:	mov	sl, #0
   16c48:	mov	r5, #0
   16c4c:	beq	16b5c <__assert_fail@plt+0x5668>
   16c50:	ldr	r5, [fp, #-48]	; 0xffffffd0
   16c54:	b	16c28 <__assert_fail@plt+0x5734>
   16c58:	mov	r9, #1
   16c5c:	b	168e0 <__assert_fail@plt+0x53ec>
   16c60:	mov	r0, #0
   16c64:	str	r0, [fp, #-36]	; 0xffffffdc
   16c68:	str	r0, [fp, #-40]	; 0xffffffd8
   16c6c:	cmn	lr, #1
   16c70:	bne	16c84 <__assert_fail@plt+0x5790>
   16c74:	mov	r0, ip
   16c78:	bl	11374 <strlen@plt>
   16c7c:	ldr	ip, [fp, #-84]	; 0xffffffac
   16c80:	mov	lr, r0
   16c84:	add	r0, ip, r6
   16c88:	str	r0, [sp, #20]
   16c8c:	mov	r9, #1
   16c90:	mov	r7, #0
   16c94:	sub	r4, fp, #40	; 0x28
   16c98:	str	lr, [sp, #28]
   16c9c:	str	r7, [sp, #44]	; 0x2c
   16ca0:	add	r7, r7, r6
   16ca4:	add	r1, ip, r7
   16ca8:	sub	r2, lr, r7
   16cac:	sub	r0, fp, #44	; 0x2c
   16cb0:	mov	r3, r4
   16cb4:	bl	19778 <__assert_fail@plt+0x8284>
   16cb8:	cmp	r0, #0
   16cbc:	beq	1717c <__assert_fail@plt+0x5c88>
   16cc0:	cmn	r0, #1
   16cc4:	beq	1713c <__assert_fail@plt+0x5c48>
   16cc8:	cmn	r0, #2
   16ccc:	ldr	lr, [sp, #28]
   16cd0:	beq	17144 <__assert_fail@plt+0x5c50>
   16cd4:	cmp	r0, #2
   16cd8:	mov	r1, #0
   16cdc:	movwcc	r1, #1
   16ce0:	ldr	r2, [sp, #60]	; 0x3c
   16ce4:	eor	r2, r2, #1
   16ce8:	orrs	r1, r2, r1
   16cec:	ldr	r4, [sp, #24]
   16cf0:	bne	16db0 <__assert_fail@plt+0x58bc>
   16cf4:	ldr	r1, [sp, #44]	; 0x2c
   16cf8:	ldr	r2, [sp, #20]
   16cfc:	add	r1, r2, r1
   16d00:	mov	r2, #1
   16d04:	ldrb	r3, [r1, r2]
   16d08:	sub	r3, r3, #91	; 0x5b
   16d0c:	cmp	r3, #33	; 0x21
   16d10:	bhi	16da4 <__assert_fail@plt+0x58b0>
   16d14:	add	r7, pc, #0
   16d18:	ldr	pc, [r7, r3, lsl #2]
   16d1c:	andeq	r7, r1, r4, ror #4
   16d20:	andeq	r7, r1, r4, ror #4
   16d24:	andeq	r6, r1, r4, lsr #27
   16d28:	andeq	r7, r1, r4, ror #4
   16d2c:	andeq	r6, r1, r4, lsr #27
   16d30:	andeq	r7, r1, r4, ror #4
   16d34:	andeq	r6, r1, r4, lsr #27
   16d38:	andeq	r6, r1, r4, lsr #27
   16d3c:	andeq	r6, r1, r4, lsr #27
   16d40:	andeq	r6, r1, r4, lsr #27
   16d44:	andeq	r6, r1, r4, lsr #27
   16d48:	andeq	r6, r1, r4, lsr #27
   16d4c:	andeq	r6, r1, r4, lsr #27
   16d50:	andeq	r6, r1, r4, lsr #27
   16d54:	andeq	r6, r1, r4, lsr #27
   16d58:	andeq	r6, r1, r4, lsr #27
   16d5c:	andeq	r6, r1, r4, lsr #27
   16d60:	andeq	r6, r1, r4, lsr #27
   16d64:	andeq	r6, r1, r4, lsr #27
   16d68:	andeq	r6, r1, r4, lsr #27
   16d6c:	andeq	r6, r1, r4, lsr #27
   16d70:	andeq	r6, r1, r4, lsr #27
   16d74:	andeq	r6, r1, r4, lsr #27
   16d78:	andeq	r6, r1, r4, lsr #27
   16d7c:	andeq	r6, r1, r4, lsr #27
   16d80:	andeq	r6, r1, r4, lsr #27
   16d84:	andeq	r6, r1, r4, lsr #27
   16d88:	andeq	r6, r1, r4, lsr #27
   16d8c:	andeq	r6, r1, r4, lsr #27
   16d90:	andeq	r6, r1, r4, lsr #27
   16d94:	andeq	r6, r1, r4, lsr #27
   16d98:	andeq	r6, r1, r4, lsr #27
   16d9c:	andeq	r6, r1, r4, lsr #27
   16da0:	andeq	r7, r1, r4, ror #4
   16da4:	add	r2, r2, #1
   16da8:	cmp	r2, r0
   16dac:	bcc	16d04 <__assert_fail@plt+0x5810>
   16db0:	ldr	r7, [sp, #44]	; 0x2c
   16db4:	add	r7, r0, r7
   16db8:	ldr	r0, [fp, #-44]	; 0xffffffd4
   16dbc:	bl	112a8 <iswprint@plt>
   16dc0:	cmp	r0, #0
   16dc4:	movwne	r0, #1
   16dc8:	and	r9, r9, r0
   16dcc:	sub	r4, fp, #40	; 0x28
   16dd0:	mov	r0, r4
   16dd4:	bl	11254 <mbsinit@plt>
   16dd8:	ldr	lr, [sp, #28]
   16ddc:	cmp	r0, #0
   16de0:	ldr	ip, [fp, #-84]	; 0xffffffac
   16de4:	beq	16c9c <__assert_fail@plt+0x57a8>
   16de8:	b	17184 <__assert_fail@plt+0x5c90>
   16dec:	ldr	r0, [sp, #32]
   16df0:	cmp	r0, #0
   16df4:	beq	16e8c <__assert_fail@plt+0x5998>
   16df8:	add	r0, r6, #2
   16dfc:	cmp	r0, lr
   16e00:	bcs	16e8c <__assert_fail@plt+0x5998>
   16e04:	add	r1, ip, r6
   16e08:	ldrb	r1, [r1, #1]
   16e0c:	cmp	r1, #63	; 0x3f
   16e10:	bne	16e8c <__assert_fail@plt+0x5998>
   16e14:	ldrb	r9, [ip, r0]
   16e18:	sub	r2, r9, #33	; 0x21
   16e1c:	cmp	r2, #29
   16e20:	bhi	16e8c <__assert_fail@plt+0x5998>
   16e24:	mov	r3, #1
   16e28:	movw	r1, #20929	; 0x51c1
   16e2c:	movt	r1, #14336	; 0x3800
   16e30:	tst	r1, r3, lsl r2
   16e34:	beq	16e8c <__assert_fail@plt+0x5998>
   16e38:	ldr	r1, [fp, #-76]	; 0xffffffb4
   16e3c:	tst	r1, #1
   16e40:	bne	1726c <__assert_fail@plt+0x5d78>
   16e44:	cmp	r8, r4
   16e48:	movcc	r1, #63	; 0x3f
   16e4c:	strbcc	r1, [r7, r8]
   16e50:	add	r2, r8, #1
   16e54:	cmp	r2, r4
   16e58:	movcc	r1, #34	; 0x22
   16e5c:	strbcc	r1, [r7, r2]
   16e60:	add	r2, r8, #2
   16e64:	cmp	r2, r4
   16e68:	movcc	r1, #34	; 0x22
   16e6c:	strbcc	r1, [r7, r2]
   16e70:	add	r2, r8, #3
   16e74:	cmp	r2, r4
   16e78:	movcc	r1, #63	; 0x3f
   16e7c:	strbcc	r1, [r7, r2]
   16e80:	add	r8, r8, #4
   16e84:	mov	r6, r0
   16e88:	mov	r5, r9
   16e8c:	mov	r9, #0
   16e90:	b	168e0 <__assert_fail@plt+0x53ec>
   16e94:	add	r1, r2, r6
   16e98:	str	r1, [sp, #44]	; 0x2c
   16e9c:	add	r1, r6, #1
   16ea0:	mov	r3, #0
   16ea4:	ldr	lr, [sp, #28]
   16ea8:	ldr	r6, [fp, #-60]	; 0xffffffc4
   16eac:	tst	r0, #1
   16eb0:	bne	16fa4 <__assert_fail@plt+0x5ab0>
   16eb4:	ldr	r2, [fp, #-76]	; 0xffffffb4
   16eb8:	tst	r2, #1
   16ebc:	bne	1726c <__assert_fail@plt+0x5d78>
   16ec0:	cmp	r6, #2
   16ec4:	ldr	r3, [fp, #-80]	; 0xffffffb0
   16ec8:	movwne	r3, #1
   16ecc:	ldr	r2, [fp, #-56]	; 0xffffffc8
   16ed0:	orr	r3, r3, r2
   16ed4:	tst	r3, #1
   16ed8:	bne	16f14 <__assert_fail@plt+0x5a20>
   16edc:	cmp	r8, r4
   16ee0:	movcc	r2, #39	; 0x27
   16ee4:	strbcc	r2, [r7, r8]
   16ee8:	add	r3, r8, #1
   16eec:	cmp	r3, r4
   16ef0:	movcc	r2, #36	; 0x24
   16ef4:	strbcc	r2, [r7, r3]
   16ef8:	add	r3, r8, #2
   16efc:	cmp	r3, r4
   16f00:	movcc	r2, #39	; 0x27
   16f04:	strbcc	r2, [r7, r3]
   16f08:	add	r8, r8, #3
   16f0c:	mov	r2, #1
   16f10:	str	r2, [fp, #-56]	; 0xffffffc8
   16f14:	cmp	r8, r4
   16f18:	movcc	r2, #92	; 0x5c
   16f1c:	strbcc	r2, [r7, r8]
   16f20:	add	r3, r8, #1
   16f24:	cmp	r3, r4
   16f28:	bcs	16f48 <__assert_fail@plt+0x5a54>
   16f2c:	and	r7, r5, #192	; 0xc0
   16f30:	mov	r2, #48	; 0x30
   16f34:	orr	r7, r2, r7, lsr #6
   16f38:	ldr	r6, [sp, #80]	; 0x50
   16f3c:	strb	r7, [r6, r3]
   16f40:	ldr	r6, [fp, #-60]	; 0xffffffc4
   16f44:	ldr	r7, [sp, #80]	; 0x50
   16f48:	add	r3, r8, #2
   16f4c:	cmp	r3, r4
   16f50:	bcs	16f70 <__assert_fail@plt+0x5a7c>
   16f54:	lsr	r7, r5, #3
   16f58:	mov	r2, #6
   16f5c:	bfi	r7, r2, #3, #29
   16f60:	ldr	r6, [sp, #80]	; 0x50
   16f64:	strb	r7, [r6, r3]
   16f68:	ldr	r6, [fp, #-60]	; 0xffffffc4
   16f6c:	ldr	r7, [sp, #80]	; 0x50
   16f70:	mov	r2, #6
   16f74:	bfi	r5, r2, #3, #29
   16f78:	add	r8, r8, #3
   16f7c:	mov	r3, #1
   16f80:	b	16fc8 <__assert_fail@plt+0x5ad4>
   16f84:	ldr	r7, [sp, #80]	; 0x50
   16f88:	cmp	r8, r4
   16f8c:	strbcc	r5, [r7, r8]
   16f90:	ldrb	r5, [ip, r1]
   16f94:	add	r1, r1, #1
   16f98:	add	r8, r8, #1
   16f9c:	tst	r0, #1
   16fa0:	beq	16eb4 <__assert_fail@plt+0x59c0>
   16fa4:	ldr	r2, [fp, #-52]	; 0xffffffcc
   16fa8:	tst	r2, #1
   16fac:	beq	16fc0 <__assert_fail@plt+0x5acc>
   16fb0:	cmp	r8, r4
   16fb4:	movcc	r2, #92	; 0x5c
   16fb8:	strbcc	r2, [r7, r8]
   16fbc:	add	r8, r8, #1
   16fc0:	mov	r2, #0
   16fc4:	str	r2, [fp, #-52]	; 0xffffffcc
   16fc8:	and	sl, r3, #1
   16fcc:	ldr	r2, [sp, #44]	; 0x2c
   16fd0:	cmp	r2, r1
   16fd4:	bls	170e0 <__assert_fail@plt+0x5bec>
   16fd8:	cmp	sl, #0
   16fdc:	movwne	sl, #1
   16fe0:	ldr	r2, [fp, #-56]	; 0xffffffc8
   16fe4:	mvn	r7, r2
   16fe8:	orr	r7, r7, sl
   16fec:	tst	r7, #1
   16ff0:	bne	16f84 <__assert_fail@plt+0x5a90>
   16ff4:	cmp	r8, r4
   16ff8:	ldrcc	r7, [sp, #80]	; 0x50
   16ffc:	movcc	r2, #39	; 0x27
   17000:	strbcc	r2, [r7, r8]
   17004:	add	r7, r8, #1
   17008:	cmp	r7, r4
   1700c:	ldrcc	r6, [sp, #80]	; 0x50
   17010:	movcc	r2, #39	; 0x27
   17014:	strbcc	r2, [r6, r7]
   17018:	ldrcc	r6, [fp, #-60]	; 0xffffffc4
   1701c:	add	r8, r8, #2
   17020:	mov	r2, #0
   17024:	str	r2, [fp, #-56]	; 0xffffffc8
   17028:	b	16f84 <__assert_fail@plt+0x5a90>
   1702c:	cmp	r8, r4
   17030:	movcc	r0, #39	; 0x27
   17034:	strbcc	r0, [r7, r8]
   17038:	add	r0, r8, #1
   1703c:	cmp	r0, r4
   17040:	movcc	r1, #36	; 0x24
   17044:	strbcc	r1, [r7, r0]
   17048:	add	r0, r8, #2
   1704c:	cmp	r0, r4
   17050:	movcc	r1, #39	; 0x27
   17054:	strbcc	r1, [r7, r0]
   17058:	add	r0, r8, #3
   1705c:	mov	r2, #1
   17060:	cmp	r0, r4
   17064:	movcc	r1, #92	; 0x5c
   17068:	strbcc	r1, [r7, r0]
   1706c:	str	r2, [fp, #-56]	; 0xffffffc8
   17070:	add	r8, r0, #1
   17074:	ldr	r1, [fp, #-60]	; 0xffffffc4
   17078:	cmp	r1, #2
   1707c:	beq	170d0 <__assert_fail@plt+0x5bdc>
   17080:	add	r1, r6, #1
   17084:	mov	r9, #0
   17088:	mov	sl, #1
   1708c:	mov	r5, #48	; 0x30
   17090:	cmp	r1, lr
   17094:	bcs	168e0 <__assert_fail@plt+0x53ec>
   17098:	ldrb	r1, [ip, r1]
   1709c:	sub	r1, r1, #48	; 0x30
   170a0:	uxtb	r1, r1
   170a4:	cmp	r1, #9
   170a8:	bhi	168e0 <__assert_fail@plt+0x53ec>
   170ac:	cmp	r8, r4
   170b0:	movcc	r1, #48	; 0x30
   170b4:	strbcc	r1, [r7, r8]
   170b8:	add	r1, r0, #2
   170bc:	cmp	r1, r4
   170c0:	movcc	r2, #48	; 0x30
   170c4:	strbcc	r2, [r7, r1]
   170c8:	add	r8, r0, #3
   170cc:	b	168e0 <__assert_fail@plt+0x53ec>
   170d0:	mov	r0, #48	; 0x30
   170d4:	mov	sl, #1
   170d8:	mov	r9, #0
   170dc:	b	16b8c <__assert_fail@plt+0x5698>
   170e0:	sub	r6, r1, #1
   170e4:	cmp	sl, #0
   170e8:	movwne	sl, #1
   170ec:	mov	r0, r5
   170f0:	cmp	sl, #0
   170f4:	bne	17134 <__assert_fail@plt+0x5c40>
   170f8:	ldr	r1, [fp, #-56]	; 0xffffffc8
   170fc:	tst	r1, #1
   17100:	beq	17134 <__assert_fail@plt+0x5c40>
   17104:	cmp	r8, r4
   17108:	ldr	r5, [fp, #-48]	; 0xffffffd0
   1710c:	movcc	r1, #39	; 0x27
   17110:	strbcc	r1, [r7, r8]
   17114:	add	r1, r8, #1
   17118:	cmp	r1, r4
   1711c:	movcc	r2, #39	; 0x27
   17120:	strbcc	r2, [r7, r1]
   17124:	add	r8, r8, #2
   17128:	mov	r1, #0
   1712c:	str	r1, [fp, #-56]	; 0xffffffc8
   17130:	b	16c18 <__assert_fail@plt+0x5724>
   17134:	ldr	r5, [fp, #-48]	; 0xffffffd0
   17138:	b	16c18 <__assert_fail@plt+0x5724>
   1713c:	mov	r9, #0
   17140:	b	1717c <__assert_fail@plt+0x5c88>
   17144:	mov	r9, #0
   17148:	cmp	r7, lr
   1714c:	bcs	1717c <__assert_fail@plt+0x5c88>
   17150:	ldr	ip, [fp, #-84]	; 0xffffffac
   17154:	ldr	r7, [sp, #44]	; 0x2c
   17158:	ldr	r0, [sp, #20]
   1715c:	ldrb	r0, [r0, r7]
   17160:	cmp	r0, #0
   17164:	beq	17184 <__assert_fail@plt+0x5c90>
   17168:	add	r7, r7, #1
   1716c:	add	r0, r6, r7
   17170:	cmp	r0, lr
   17174:	bcc	17158 <__assert_fail@plt+0x5c64>
   17178:	b	17184 <__assert_fail@plt+0x5c90>
   1717c:	ldr	ip, [fp, #-84]	; 0xffffffac
   17180:	ldr	r7, [sp, #44]	; 0x2c
   17184:	mov	r1, r7
   17188:	ldr	r7, [sp, #80]	; 0x50
   1718c:	b	16ab4 <__assert_fail@plt+0x55c0>
   17190:	ldr	r1, [fp, #-60]	; 0xffffffc4
   17194:	eor	r0, r1, #2
   17198:	orr	r0, r0, r8
   1719c:	clz	r0, r0
   171a0:	lsr	r0, r0, #5
   171a4:	ldr	r2, [fp, #-76]	; 0xffffffb4
   171a8:	tst	r2, r0
   171ac:	bne	1726c <__assert_fail@plt+0x5d78>
   171b0:	cmp	r1, #2
   171b4:	ldr	r0, [fp, #-80]	; 0xffffffb0
   171b8:	movwne	r0, #1
   171bc:	orr	r0, r2, r0
   171c0:	tst	r0, #1
   171c4:	ldreq	r0, [sp, #56]	; 0x38
   171c8:	eoreq	r0, r0, #1
   171cc:	tsteq	r0, #1
   171d0:	bne	17204 <__assert_fail@plt+0x5d10>
   171d4:	mov	r9, lr
   171d8:	tst	r5, #1
   171dc:	bne	172d4 <__assert_fail@plt+0x5de0>
   171e0:	ldr	r0, [sp, #72]	; 0x48
   171e4:	cmp	r0, #0
   171e8:	beq	17204 <__assert_fail@plt+0x5d10>
   171ec:	mov	r5, #0
   171f0:	cmp	r4, #0
   171f4:	ldr	r0, [sp, #84]	; 0x54
   171f8:	mov	sl, r2
   171fc:	ldr	r6, [sp, #72]	; 0x48
   17200:	beq	1639c <__assert_fail@plt+0x4ea8>
   17204:	ldr	r1, [sp, #92]	; 0x5c
   17208:	clz	r0, r1
   1720c:	lsr	r0, r0, #5
   17210:	orr	r0, r0, r2
   17214:	tst	r0, #1
   17218:	bne	17244 <__assert_fail@plt+0x5d50>
   1721c:	ldrb	r0, [r1]
   17220:	cmp	r0, #0
   17224:	beq	17244 <__assert_fail@plt+0x5d50>
   17228:	add	r1, r1, #1
   1722c:	cmp	r8, r4
   17230:	strbcc	r0, [r7, r8]
   17234:	add	r8, r8, #1
   17238:	ldrb	r0, [r1], #1
   1723c:	cmp	r0, #0
   17240:	bne	1722c <__assert_fail@plt+0x5d38>
   17244:	cmp	r8, r4
   17248:	movcc	r0, #0
   1724c:	strbcc	r0, [r7, r8]
   17250:	b	172c8 <__assert_fail@plt+0x5dd4>
   17254:	ldr	ip, [fp, #-84]	; 0xffffffac
   17258:	mov	lr, r4
   1725c:	mov	r4, r5
   17260:	b	1726c <__assert_fail@plt+0x5d78>
   17264:	ldr	r7, [sp, #80]	; 0x50
   17268:	ldr	ip, [fp, #-84]	; 0xffffffac
   1726c:	mov	r0, #0
   17270:	ldr	r1, [fp, #12]
   17274:	bic	r1, r1, #2
   17278:	ldr	r2, [sp, #84]	; 0x54
   1727c:	tst	r2, #1
   17280:	ldr	r3, [fp, #-60]	; 0xffffffc4
   17284:	mov	r2, r3
   17288:	movwne	r2, #4
   1728c:	cmp	r3, #2
   17290:	movne	r2, r3
   17294:	str	r2, [sp]
   17298:	str	r1, [sp, #4]
   1729c:	str	r0, [sp, #8]
   172a0:	ldr	r0, [sp, #68]	; 0x44
   172a4:	str	r0, [sp, #12]
   172a8:	ldr	r0, [sp, #76]	; 0x4c
   172ac:	str	r0, [sp, #16]
   172b0:	mov	r0, r7
   172b4:	mov	r1, r4
   172b8:	mov	r2, ip
   172bc:	mov	r3, lr
   172c0:	bl	16314 <__assert_fail@plt+0x4e20>
   172c4:	mov	r8, r0
   172c8:	mov	r0, r8
   172cc:	sub	sp, fp, #28
   172d0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   172d4:	mov	r0, #5
   172d8:	str	r0, [sp]
   172dc:	ldr	r0, [fp, #12]
   172e0:	str	r0, [sp, #4]
   172e4:	ldr	r0, [fp, #16]
   172e8:	str	r0, [sp, #8]
   172ec:	ldr	r0, [sp, #68]	; 0x44
   172f0:	str	r0, [sp, #12]
   172f4:	ldr	r0, [sp, #76]	; 0x4c
   172f8:	str	r0, [sp, #16]
   172fc:	mov	r0, r7
   17300:	ldr	r1, [sp, #72]	; 0x48
   17304:	ldr	r2, [fp, #-84]	; 0xffffffac
   17308:	mov	r3, r9
   1730c:	b	172c0 <__assert_fail@plt+0x5dcc>
   17310:	bl	114ac <abort@plt>
   17314:	mov	r3, r2
   17318:	mov	r2, #0
   1731c:	b	17320 <__assert_fail@plt+0x5e2c>
   17320:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17324:	add	fp, sp, #28
   17328:	sub	sp, sp, #36	; 0x24
   1732c:	mov	r4, r2
   17330:	str	r2, [sp, #24]
   17334:	mov	r5, r1
   17338:	mov	r6, r0
   1733c:	str	r0, [sp, #20]
   17340:	movw	r8, #49600	; 0xc1c0
   17344:	movt	r8, #2
   17348:	cmp	r3, #0
   1734c:	movne	r8, r3
   17350:	bl	113a4 <__errno_location@plt>
   17354:	str	r0, [sp, #28]
   17358:	ldm	r8, {r3, r9}
   1735c:	ldr	r1, [r8, #40]	; 0x28
   17360:	ldr	r2, [r8, #44]	; 0x2c
   17364:	ldr	r7, [r0]
   17368:	str	r7, [sp, #32]
   1736c:	add	sl, r8, #8
   17370:	cmp	r4, #0
   17374:	orreq	r9, r9, #1
   17378:	stm	sp, {r3, r9, sl}
   1737c:	str	r1, [sp, #12]
   17380:	str	r2, [sp, #16]
   17384:	mov	r0, #0
   17388:	mov	r1, #0
   1738c:	mov	r2, r6
   17390:	mov	r3, r5
   17394:	mov	r7, r5
   17398:	bl	16314 <__assert_fail@plt+0x4e20>
   1739c:	mov	r5, r0
   173a0:	add	r4, r0, #1
   173a4:	mov	r0, r4
   173a8:	bl	182bc <__assert_fail@plt+0x6dc8>
   173ac:	mov	r6, r0
   173b0:	ldr	r0, [r8]
   173b4:	ldr	r1, [r8, #40]	; 0x28
   173b8:	ldr	r2, [r8, #44]	; 0x2c
   173bc:	stm	sp, {r0, r9, sl}
   173c0:	str	r1, [sp, #12]
   173c4:	str	r2, [sp, #16]
   173c8:	mov	r0, r6
   173cc:	mov	r1, r4
   173d0:	ldr	r2, [sp, #20]
   173d4:	mov	r3, r7
   173d8:	bl	16314 <__assert_fail@plt+0x4e20>
   173dc:	ldr	r0, [sp, #24]
   173e0:	ldr	r1, [sp, #32]
   173e4:	ldr	r2, [sp, #28]
   173e8:	str	r1, [r2]
   173ec:	cmp	r0, #0
   173f0:	strne	r5, [r0]
   173f4:	mov	r0, r6
   173f8:	sub	sp, fp, #28
   173fc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17400:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   17404:	add	fp, sp, #24
   17408:	movw	r8, #49464	; 0xc138
   1740c:	movt	r8, #2
   17410:	ldr	r4, [r8]
   17414:	movw	r5, #49468	; 0xc13c
   17418:	movt	r5, #2
   1741c:	ldr	r0, [r5]
   17420:	cmp	r0, #2
   17424:	blt	17450 <__assert_fail@plt+0x5f5c>
   17428:	add	r7, r4, #12
   1742c:	mov	r6, #0
   17430:	ldr	r0, [r7, r6, lsl #3]
   17434:	bl	12f04 <__assert_fail@plt+0x1a10>
   17438:	add	r0, r6, #1
   1743c:	ldr	r1, [r5]
   17440:	add	r2, r6, #2
   17444:	cmp	r2, r1
   17448:	mov	r6, r0
   1744c:	blt	17430 <__assert_fail@plt+0x5f3c>
   17450:	ldr	r0, [r4, #4]
   17454:	movw	r7, #49648	; 0xc1f0
   17458:	movt	r7, #2
   1745c:	cmp	r0, r7
   17460:	beq	17478 <__assert_fail@plt+0x5f84>
   17464:	bl	12f04 <__assert_fail@plt+0x1a10>
   17468:	movw	r0, #49472	; 0xc140
   1746c:	movt	r0, #2
   17470:	mov	r6, #256	; 0x100
   17474:	strd	r6, [r0]
   17478:	movw	r6, #49472	; 0xc140
   1747c:	movt	r6, #2
   17480:	cmp	r4, r6
   17484:	beq	17494 <__assert_fail@plt+0x5fa0>
   17488:	mov	r0, r4
   1748c:	bl	12f04 <__assert_fail@plt+0x1a10>
   17490:	str	r6, [r8]
   17494:	mov	r0, #1
   17498:	str	r0, [r5]
   1749c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   174a0:	movw	r3, #49600	; 0xc1c0
   174a4:	movt	r3, #2
   174a8:	mvn	r2, #0
   174ac:	b	174b0 <__assert_fail@plt+0x5fbc>
   174b0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   174b4:	add	fp, sp, #28
   174b8:	sub	sp, sp, #44	; 0x2c
   174bc:	mov	r7, r3
   174c0:	str	r2, [sp, #36]	; 0x24
   174c4:	str	r1, [sp, #32]
   174c8:	mov	r5, r0
   174cc:	bl	113a4 <__errno_location@plt>
   174d0:	cmp	r5, #0
   174d4:	blt	17640 <__assert_fail@plt+0x614c>
   174d8:	cmn	r5, #-2147483647	; 0x80000001
   174dc:	beq	17640 <__assert_fail@plt+0x614c>
   174e0:	movw	r4, #49464	; 0xc138
   174e4:	movt	r4, #2
   174e8:	ldr	r6, [r4]
   174ec:	str	r0, [sp, #28]
   174f0:	ldr	r0, [r0]
   174f4:	str	r0, [sp, #24]
   174f8:	movw	r8, #49468	; 0xc13c
   174fc:	movt	r8, #2
   17500:	ldr	r1, [r8]
   17504:	cmp	r1, r5
   17508:	ble	17514 <__assert_fail@plt+0x6020>
   1750c:	mov	sl, r6
   17510:	b	1757c <__assert_fail@plt+0x6088>
   17514:	str	r1, [fp, #-32]	; 0xffffffe0
   17518:	mov	r0, #8
   1751c:	str	r0, [sp]
   17520:	movw	r9, #49472	; 0xc140
   17524:	movt	r9, #2
   17528:	subs	r0, r6, r9
   1752c:	movne	r0, r6
   17530:	add	r2, r5, #1
   17534:	sub	r2, r2, r1
   17538:	sub	r1, fp, #32
   1753c:	mvn	r3, #-2147483648	; 0x80000000
   17540:	bl	183a4 <__assert_fail@plt+0x6eb0>
   17544:	mov	sl, r0
   17548:	str	r0, [r4]
   1754c:	cmp	r6, r9
   17550:	ldrdeq	r0, [r9]
   17554:	stmeq	sl, {r0, r1}
   17558:	ldr	r1, [r8]
   1755c:	add	r0, sl, r1, lsl #3
   17560:	ldr	r2, [fp, #-32]	; 0xffffffe0
   17564:	sub	r1, r2, r1
   17568:	lsl	r2, r1, #3
   1756c:	mov	r1, #0
   17570:	bl	113bc <memset@plt>
   17574:	ldr	r0, [fp, #-32]	; 0xffffffe0
   17578:	str	r0, [r8]
   1757c:	mov	r9, sl
   17580:	ldr	r6, [r9, r5, lsl #3]!
   17584:	ldr	r4, [r9, #4]!
   17588:	ldm	r7, {r0, r1}
   1758c:	ldr	r2, [r7, #40]	; 0x28
   17590:	ldr	r3, [r7, #44]	; 0x2c
   17594:	orr	r8, r1, #1
   17598:	add	r1, r7, #8
   1759c:	stm	sp, {r0, r8}
   175a0:	str	r1, [sp, #20]
   175a4:	add	r0, sp, #8
   175a8:	stm	r0, {r1, r2, r3}
   175ac:	mov	r0, r4
   175b0:	mov	r1, r6
   175b4:	ldr	r2, [sp, #32]
   175b8:	ldr	r3, [sp, #36]	; 0x24
   175bc:	bl	16314 <__assert_fail@plt+0x4e20>
   175c0:	cmp	r6, r0
   175c4:	bhi	17628 <__assert_fail@plt+0x6134>
   175c8:	add	r6, r0, #1
   175cc:	str	r6, [sl, r5, lsl #3]
   175d0:	movw	r0, #49648	; 0xc1f0
   175d4:	movt	r0, #2
   175d8:	cmp	r4, r0
   175dc:	beq	175e8 <__assert_fail@plt+0x60f4>
   175e0:	mov	r0, r4
   175e4:	bl	12f04 <__assert_fail@plt+0x1a10>
   175e8:	mov	r0, r6
   175ec:	bl	182bc <__assert_fail@plt+0x6dc8>
   175f0:	mov	r4, r0
   175f4:	str	r0, [r9]
   175f8:	ldr	r0, [r7]
   175fc:	ldr	r1, [r7, #40]	; 0x28
   17600:	ldr	r2, [r7, #44]	; 0x2c
   17604:	stm	sp, {r0, r8}
   17608:	ldr	r0, [sp, #20]
   1760c:	add	r3, sp, #8
   17610:	stm	r3, {r0, r1, r2}
   17614:	mov	r0, r4
   17618:	mov	r1, r6
   1761c:	ldr	r2, [sp, #32]
   17620:	ldr	r3, [sp, #36]	; 0x24
   17624:	bl	16314 <__assert_fail@plt+0x4e20>
   17628:	ldr	r0, [sp, #28]
   1762c:	ldr	r1, [sp, #24]
   17630:	str	r1, [r0]
   17634:	mov	r0, r4
   17638:	sub	sp, fp, #28
   1763c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17640:	bl	114ac <abort@plt>
   17644:	movw	r3, #49600	; 0xc1c0
   17648:	movt	r3, #2
   1764c:	b	174b0 <__assert_fail@plt+0x5fbc>
   17650:	mov	r1, r0
   17654:	mov	r0, #0
   17658:	b	174a0 <__assert_fail@plt+0x5fac>
   1765c:	mov	r2, r1
   17660:	mov	r1, r0
   17664:	mov	r0, #0
   17668:	b	17644 <__assert_fail@plt+0x6150>
   1766c:	push	{r4, r5, r6, sl, fp, lr}
   17670:	add	fp, sp, #16
   17674:	sub	sp, sp, #48	; 0x30
   17678:	mov	r4, r2
   1767c:	mov	r5, r0
   17680:	mov	r6, sp
   17684:	mov	r0, r6
   17688:	bl	176a8 <__assert_fail@plt+0x61b4>
   1768c:	mov	r0, r5
   17690:	mov	r1, r4
   17694:	mvn	r2, #0
   17698:	mov	r3, r6
   1769c:	bl	174b0 <__assert_fail@plt+0x5fbc>
   176a0:	sub	sp, fp, #16
   176a4:	pop	{r4, r5, r6, sl, fp, pc}
   176a8:	vmov.i32	q8, #0	; 0x00000000
   176ac:	mov	r2, #32
   176b0:	mov	r3, r0
   176b4:	vst1.32	{d16-d17}, [r3], r2
   176b8:	vst1.32	{d16-d17}, [r3]
   176bc:	add	r2, r0, #16
   176c0:	vst1.32	{d16-d17}, [r2]
   176c4:	cmp	r1, #10
   176c8:	strne	r1, [r0]
   176cc:	bxne	lr
   176d0:	push	{fp, lr}
   176d4:	mov	fp, sp
   176d8:	bl	114ac <abort@plt>
   176dc:	push	{r4, r5, r6, r7, fp, lr}
   176e0:	add	fp, sp, #16
   176e4:	sub	sp, sp, #48	; 0x30
   176e8:	mov	r4, r3
   176ec:	mov	r5, r2
   176f0:	mov	r6, r0
   176f4:	mov	r7, sp
   176f8:	mov	r0, r7
   176fc:	bl	176a8 <__assert_fail@plt+0x61b4>
   17700:	mov	r0, r6
   17704:	mov	r1, r5
   17708:	mov	r2, r4
   1770c:	mov	r3, r7
   17710:	bl	174b0 <__assert_fail@plt+0x5fbc>
   17714:	sub	sp, fp, #16
   17718:	pop	{r4, r5, r6, r7, fp, pc}
   1771c:	mov	r2, r1
   17720:	mov	r1, r0
   17724:	mov	r0, #0
   17728:	b	1766c <__assert_fail@plt+0x6178>
   1772c:	mov	r3, r2
   17730:	mov	r2, r1
   17734:	mov	r1, r0
   17738:	mov	r0, #0
   1773c:	b	176dc <__assert_fail@plt+0x61e8>
   17740:	push	{r4, r5, r6, sl, fp, lr}
   17744:	add	fp, sp, #16
   17748:	sub	sp, sp, #48	; 0x30
   1774c:	mov	r4, r1
   17750:	mov	r5, r0
   17754:	mov	r0, #32
   17758:	movw	r1, #49600	; 0xc1c0
   1775c:	movt	r1, #2
   17760:	add	r3, r1, #16
   17764:	vld1.64	{d16-d17}, [r1], r0
   17768:	mov	r6, sp
   1776c:	vld1.64	{d18-d19}, [r3]
   17770:	add	r3, r6, #16
   17774:	vld1.64	{d20-d21}, [r1]
   17778:	vst1.64	{d18-d19}, [r3]
   1777c:	mov	r1, r6
   17780:	vst1.64	{d16-d17}, [r1], r0
   17784:	vst1.64	{d20-d21}, [r1]
   17788:	mov	r0, r6
   1778c:	mov	r1, r2
   17790:	mov	r2, #1
   17794:	bl	16208 <__assert_fail@plt+0x4d14>
   17798:	mov	r0, #0
   1779c:	mov	r1, r5
   177a0:	mov	r2, r4
   177a4:	mov	r3, r6
   177a8:	bl	174b0 <__assert_fail@plt+0x5fbc>
   177ac:	sub	sp, fp, #16
   177b0:	pop	{r4, r5, r6, sl, fp, pc}
   177b4:	mov	r2, r1
   177b8:	mvn	r1, #0
   177bc:	b	17740 <__assert_fail@plt+0x624c>
   177c0:	mov	r1, #58	; 0x3a
   177c4:	b	177b4 <__assert_fail@plt+0x62c0>
   177c8:	mov	r2, #58	; 0x3a
   177cc:	b	17740 <__assert_fail@plt+0x624c>
   177d0:	push	{r4, r5, r6, sl, fp, lr}
   177d4:	add	fp, sp, #16
   177d8:	sub	sp, sp, #48	; 0x30
   177dc:	mov	r4, r2
   177e0:	mov	r5, r0
   177e4:	mov	r6, sp
   177e8:	mov	r0, r6
   177ec:	bl	176a8 <__assert_fail@plt+0x61b4>
   177f0:	mov	r0, r6
   177f4:	mov	r1, #58	; 0x3a
   177f8:	mov	r2, #1
   177fc:	bl	16208 <__assert_fail@plt+0x4d14>
   17800:	mov	r0, r5
   17804:	mov	r1, r4
   17808:	mvn	r2, #0
   1780c:	mov	r3, r6
   17810:	bl	174b0 <__assert_fail@plt+0x5fbc>
   17814:	sub	sp, fp, #16
   17818:	pop	{r4, r5, r6, sl, fp, pc}
   1781c:	push	{fp, lr}
   17820:	mov	fp, sp
   17824:	sub	sp, sp, #8
   17828:	mvn	ip, #0
   1782c:	str	ip, [sp]
   17830:	bl	1783c <__assert_fail@plt+0x6348>
   17834:	mov	sp, fp
   17838:	pop	{fp, pc}
   1783c:	push	{r4, r5, r6, r7, fp, lr}
   17840:	add	fp, sp, #16
   17844:	sub	sp, sp, #48	; 0x30
   17848:	mov	r7, r3
   1784c:	mov	r5, r0
   17850:	mov	r0, #32
   17854:	movw	r3, #49600	; 0xc1c0
   17858:	movt	r3, #2
   1785c:	add	r4, r3, #16
   17860:	vld1.64	{d16-d17}, [r3], r0
   17864:	mov	r6, sp
   17868:	vld1.64	{d18-d19}, [r4]
   1786c:	add	r4, r6, #16
   17870:	vld1.64	{d20-d21}, [r3]
   17874:	vst1.64	{d18-d19}, [r4]
   17878:	mov	r3, r6
   1787c:	vst1.64	{d16-d17}, [r3], r0
   17880:	vst1.64	{d20-d21}, [r3]
   17884:	mov	r0, r6
   17888:	bl	16260 <__assert_fail@plt+0x4d6c>
   1788c:	ldr	r2, [fp, #8]
   17890:	mov	r0, r5
   17894:	mov	r1, r7
   17898:	mov	r3, r6
   1789c:	bl	174b0 <__assert_fail@plt+0x5fbc>
   178a0:	sub	sp, fp, #16
   178a4:	pop	{r4, r5, r6, r7, fp, pc}
   178a8:	mov	r3, r2
   178ac:	mov	r2, r1
   178b0:	mov	r1, r0
   178b4:	mov	r0, #0
   178b8:	b	1781c <__assert_fail@plt+0x6328>
   178bc:	push	{fp, lr}
   178c0:	mov	fp, sp
   178c4:	sub	sp, sp, #8
   178c8:	mov	ip, r2
   178cc:	mov	r2, r1
   178d0:	mov	r1, r0
   178d4:	str	r3, [sp]
   178d8:	mov	r0, #0
   178dc:	mov	r3, ip
   178e0:	bl	1783c <__assert_fail@plt+0x6348>
   178e4:	mov	sp, fp
   178e8:	pop	{fp, pc}
   178ec:	movw	r3, #49480	; 0xc148
   178f0:	movt	r3, #2
   178f4:	b	174b0 <__assert_fail@plt+0x5fbc>
   178f8:	mov	r2, r1
   178fc:	mov	r1, r0
   17900:	mov	r0, #0
   17904:	b	178ec <__assert_fail@plt+0x63f8>
   17908:	mvn	r2, #0
   1790c:	b	178ec <__assert_fail@plt+0x63f8>
   17910:	mov	r1, r0
   17914:	mov	r0, #0
   17918:	b	17908 <__assert_fail@plt+0x6414>
   1791c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   17920:	add	fp, sp, #24
   17924:	sub	sp, sp, #16
   17928:	mov	r4, r1
   1792c:	mov	r5, r0
   17930:	mov	r7, #0
   17934:	mov	r0, #0
   17938:	mov	r1, r5
   1793c:	mov	r2, #5
   17940:	bl	11278 <dcgettext@plt>
   17944:	cmp	r0, r5
   17948:	beq	17954 <__assert_fail@plt+0x6460>
   1794c:	sub	sp, fp, #24
   17950:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   17954:	bl	19740 <__assert_fail@plt+0x824c>
   17958:	mov	r6, r0
   1795c:	mov	r8, #56	; 0x38
   17960:	mov	r0, #45	; 0x2d
   17964:	stm	sp, {r0, r8}
   17968:	str	r7, [sp, #8]
   1796c:	str	r7, [sp, #12]
   17970:	mov	r0, r6
   17974:	mov	r1, #85	; 0x55
   17978:	mov	r2, #84	; 0x54
   1797c:	mov	r3, #70	; 0x46
   17980:	bl	17a18 <__assert_fail@plt+0x6524>
   17984:	cmp	r0, #0
   17988:	beq	179a4 <__assert_fail@plt+0x64b0>
   1798c:	ldrb	r1, [r5]
   17990:	movw	r2, #43770	; 0xaafa
   17994:	movt	r2, #1
   17998:	movw	r0, #43774	; 0xaafe
   1799c:	movt	r0, #1
   179a0:	b	179e8 <__assert_fail@plt+0x64f4>
   179a4:	mov	r0, #48	; 0x30
   179a8:	mov	r1, #51	; 0x33
   179ac:	str	r8, [sp]
   179b0:	stmib	sp, {r0, r1}
   179b4:	str	r0, [sp, #12]
   179b8:	mov	r0, r6
   179bc:	mov	r1, #71	; 0x47
   179c0:	mov	r2, #66	; 0x42
   179c4:	mov	r3, #49	; 0x31
   179c8:	bl	17a18 <__assert_fail@plt+0x6524>
   179cc:	cmp	r0, #0
   179d0:	beq	179f8 <__assert_fail@plt+0x6504>
   179d4:	ldrb	r1, [r5]
   179d8:	movw	r2, #43778	; 0xab02
   179dc:	movt	r2, #1
   179e0:	movw	r0, #43782	; 0xab06
   179e4:	movt	r0, #1
   179e8:	cmp	r1, #96	; 0x60
   179ec:	moveq	r0, r2
   179f0:	sub	sp, fp, #24
   179f4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   179f8:	movw	r1, #43764	; 0xaaf4
   179fc:	movt	r1, #1
   17a00:	movw	r0, #43768	; 0xaaf8
   17a04:	movt	r0, #1
   17a08:	cmp	r4, #9
   17a0c:	moveq	r0, r1
   17a10:	sub	sp, fp, #24
   17a14:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   17a18:	push	{r4, r5, r6, r7, fp, lr}
   17a1c:	add	fp, sp, #16
   17a20:	sub	sp, sp, #16
   17a24:	mov	r4, r3
   17a28:	mov	r5, r2
   17a2c:	mov	r7, r1
   17a30:	mov	r6, r0
   17a34:	mov	r0, r1
   17a38:	bl	19104 <__assert_fail@plt+0x7c10>
   17a3c:	ldrb	r1, [r6]
   17a40:	cmp	r0, #0
   17a44:	andne	r1, r1, #223	; 0xdf
   17a48:	mov	r0, #0
   17a4c:	cmp	r1, r7
   17a50:	bne	17a90 <__assert_fail@plt+0x659c>
   17a54:	cmp	r7, #0
   17a58:	moveq	r0, #1
   17a5c:	subeq	sp, fp, #16
   17a60:	popeq	{r4, r5, r6, r7, fp, pc}
   17a64:	ldr	r0, [fp, #20]
   17a68:	ldr	r1, [fp, #16]
   17a6c:	ldr	r2, [fp, #12]
   17a70:	ldr	r3, [fp, #8]
   17a74:	str	r2, [sp]
   17a78:	str	r1, [sp, #4]
   17a7c:	str	r0, [sp, #8]
   17a80:	mov	r0, r6
   17a84:	mov	r1, r5
   17a88:	mov	r2, r4
   17a8c:	bl	17a98 <__assert_fail@plt+0x65a4>
   17a90:	sub	sp, fp, #16
   17a94:	pop	{r4, r5, r6, r7, fp, pc}
   17a98:	push	{r4, r5, r6, r7, fp, lr}
   17a9c:	add	fp, sp, #16
   17aa0:	sub	sp, sp, #8
   17aa4:	mov	r4, r3
   17aa8:	mov	r5, r2
   17aac:	mov	r7, r1
   17ab0:	mov	r6, r0
   17ab4:	mov	r0, r1
   17ab8:	bl	19104 <__assert_fail@plt+0x7c10>
   17abc:	ldrb	r1, [r6, #1]
   17ac0:	cmp	r0, #0
   17ac4:	andne	r1, r1, #223	; 0xdf
   17ac8:	mov	r0, #0
   17acc:	cmp	r1, r7
   17ad0:	bne	17b08 <__assert_fail@plt+0x6614>
   17ad4:	cmp	r7, #0
   17ad8:	moveq	r0, #1
   17adc:	subeq	sp, fp, #16
   17ae0:	popeq	{r4, r5, r6, r7, fp, pc}
   17ae4:	ldr	r0, [fp, #16]
   17ae8:	ldr	r1, [fp, #12]
   17aec:	ldr	r3, [fp, #8]
   17af0:	str	r1, [sp]
   17af4:	str	r0, [sp, #4]
   17af8:	mov	r0, r6
   17afc:	mov	r1, r5
   17b00:	mov	r2, r4
   17b04:	bl	17b10 <__assert_fail@plt+0x661c>
   17b08:	sub	sp, fp, #16
   17b0c:	pop	{r4, r5, r6, r7, fp, pc}
   17b10:	push	{r4, r5, r6, r7, fp, lr}
   17b14:	add	fp, sp, #16
   17b18:	sub	sp, sp, #8
   17b1c:	mov	r4, r3
   17b20:	mov	r5, r2
   17b24:	mov	r7, r1
   17b28:	mov	r6, r0
   17b2c:	mov	r0, r1
   17b30:	bl	19104 <__assert_fail@plt+0x7c10>
   17b34:	ldrb	r1, [r6, #2]
   17b38:	cmp	r0, #0
   17b3c:	andne	r1, r1, #223	; 0xdf
   17b40:	mov	r0, #0
   17b44:	cmp	r1, r7
   17b48:	bne	17b78 <__assert_fail@plt+0x6684>
   17b4c:	cmp	r7, #0
   17b50:	moveq	r0, #1
   17b54:	subeq	sp, fp, #16
   17b58:	popeq	{r4, r5, r6, r7, fp, pc}
   17b5c:	ldr	r0, [fp, #12]
   17b60:	ldr	r3, [fp, #8]
   17b64:	str	r0, [sp]
   17b68:	mov	r0, r6
   17b6c:	mov	r1, r5
   17b70:	mov	r2, r4
   17b74:	bl	17b80 <__assert_fail@plt+0x668c>
   17b78:	sub	sp, fp, #16
   17b7c:	pop	{r4, r5, r6, r7, fp, pc}
   17b80:	push	{r4, r5, r6, r7, fp, lr}
   17b84:	add	fp, sp, #16
   17b88:	mov	r4, r3
   17b8c:	mov	r5, r2
   17b90:	mov	r7, r1
   17b94:	mov	r6, r0
   17b98:	mov	r0, r1
   17b9c:	bl	19104 <__assert_fail@plt+0x7c10>
   17ba0:	ldrb	r1, [r6, #3]
   17ba4:	ldr	r3, [fp, #8]
   17ba8:	cmp	r0, #0
   17bac:	andne	r1, r1, #223	; 0xdf
   17bb0:	mov	r0, #0
   17bb4:	cmp	r1, r7
   17bb8:	popne	{r4, r5, r6, r7, fp, pc}
   17bbc:	cmp	r7, #0
   17bc0:	beq	17bd8 <__assert_fail@plt+0x66e4>
   17bc4:	mov	r0, r6
   17bc8:	mov	r1, r5
   17bcc:	mov	r2, r4
   17bd0:	pop	{r4, r5, r6, r7, fp, lr}
   17bd4:	b	17be0 <__assert_fail@plt+0x66ec>
   17bd8:	mov	r0, #1
   17bdc:	pop	{r4, r5, r6, r7, fp, pc}
   17be0:	push	{r4, r5, r6, r7, fp, lr}
   17be4:	add	fp, sp, #16
   17be8:	mov	r4, r3
   17bec:	mov	r5, r2
   17bf0:	mov	r7, r1
   17bf4:	mov	r6, r0
   17bf8:	mov	r0, r1
   17bfc:	bl	19104 <__assert_fail@plt+0x7c10>
   17c00:	ldrb	r1, [r6, #4]
   17c04:	cmp	r0, #0
   17c08:	andne	r1, r1, #223	; 0xdf
   17c0c:	mov	r0, #0
   17c10:	cmp	r1, r7
   17c14:	popne	{r4, r5, r6, r7, fp, pc}
   17c18:	cmp	r7, #0
   17c1c:	beq	17c34 <__assert_fail@plt+0x6740>
   17c20:	mov	r0, r6
   17c24:	mov	r1, r5
   17c28:	mov	r2, r4
   17c2c:	pop	{r4, r5, r6, r7, fp, lr}
   17c30:	b	17c3c <__assert_fail@plt+0x6748>
   17c34:	mov	r0, #1
   17c38:	pop	{r4, r5, r6, r7, fp, pc}
   17c3c:	push	{r4, r5, r6, sl, fp, lr}
   17c40:	add	fp, sp, #16
   17c44:	mov	r4, r2
   17c48:	mov	r6, r1
   17c4c:	mov	r5, r0
   17c50:	mov	r0, r1
   17c54:	bl	19104 <__assert_fail@plt+0x7c10>
   17c58:	ldrb	r1, [r5, #5]
   17c5c:	cmp	r0, #0
   17c60:	andne	r1, r1, #223	; 0xdf
   17c64:	mov	r0, #0
   17c68:	cmp	r1, r6
   17c6c:	popne	{r4, r5, r6, sl, fp, pc}
   17c70:	cmp	r6, #0
   17c74:	beq	17c88 <__assert_fail@plt+0x6794>
   17c78:	mov	r0, r5
   17c7c:	mov	r1, r4
   17c80:	pop	{r4, r5, r6, sl, fp, lr}
   17c84:	b	17c90 <__assert_fail@plt+0x679c>
   17c88:	mov	r0, #1
   17c8c:	pop	{r4, r5, r6, sl, fp, pc}
   17c90:	push	{r4, r5, fp, lr}
   17c94:	add	fp, sp, #8
   17c98:	mov	r5, r1
   17c9c:	mov	r4, r0
   17ca0:	mov	r0, r1
   17ca4:	bl	19104 <__assert_fail@plt+0x7c10>
   17ca8:	ldrb	r1, [r4, #6]
   17cac:	cmp	r0, #0
   17cb0:	andne	r1, r1, #223	; 0xdf
   17cb4:	mov	r0, #0
   17cb8:	cmp	r1, r5
   17cbc:	popne	{r4, r5, fp, pc}
   17cc0:	cmp	r5, #0
   17cc4:	beq	17cd4 <__assert_fail@plt+0x67e0>
   17cc8:	mov	r0, r4
   17ccc:	pop	{r4, r5, fp, lr}
   17cd0:	b	17cdc <__assert_fail@plt+0x67e8>
   17cd4:	mov	r0, #1
   17cd8:	pop	{r4, r5, fp, pc}
   17cdc:	push	{r4, sl, fp, lr}
   17ce0:	add	fp, sp, #8
   17ce4:	mov	r4, r0
   17ce8:	mov	r0, #0
   17cec:	bl	19104 <__assert_fail@plt+0x7c10>
   17cf0:	ldrb	r1, [r4, #7]
   17cf4:	cmp	r0, #0
   17cf8:	beq	17d10 <__assert_fail@plt+0x681c>
   17cfc:	tst	r1, #223	; 0xdf
   17d00:	moveq	r0, #1
   17d04:	popeq	{r4, sl, fp, pc}
   17d08:	mov	r0, #0
   17d0c:	pop	{r4, sl, fp, pc}
   17d10:	cmp	r1, #0
   17d14:	moveq	r0, #1
   17d18:	popeq	{r4, sl, fp, pc}
   17d1c:	mov	r0, #0
   17d20:	pop	{r4, sl, fp, pc}
   17d24:	push	{r4, sl, fp, lr}
   17d28:	add	fp, sp, #8
   17d2c:	sub	sp, sp, #104	; 0x68
   17d30:	mov	r4, r0
   17d34:	movw	r0, #44607	; 0xae3f
   17d38:	movt	r0, #1
   17d3c:	mov	r1, sp
   17d40:	bl	19b3c <__assert_fail@plt+0x8648>
   17d44:	mov	r1, r0
   17d48:	mov	r0, #0
   17d4c:	cmp	r1, #0
   17d50:	beq	17d5c <__assert_fail@plt+0x6868>
   17d54:	sub	sp, fp, #8
   17d58:	pop	{r4, sl, fp, pc}
   17d5c:	ldr	r0, [sp, #96]	; 0x60
   17d60:	ldr	r1, [sp, #100]	; 0x64
   17d64:	ldm	sp, {r2, r3}
   17d68:	stm	r4, {r0, r1, r2, r3}
   17d6c:	mov	r0, r4
   17d70:	sub	sp, fp, #8
   17d74:	pop	{r4, sl, fp, pc}
   17d78:	push	{r4, r5, r6, r7, fp, lr}
   17d7c:	add	fp, sp, #16
   17d80:	mov	r4, r0
   17d84:	cmp	r0, #2
   17d88:	movhi	r0, r4
   17d8c:	pophi	{r4, r5, r6, r7, fp, pc}
   17d90:	mov	r0, r4
   17d94:	bl	19814 <__assert_fail@plt+0x8320>
   17d98:	mov	r5, r0
   17d9c:	bl	113a4 <__errno_location@plt>
   17da0:	mov	r6, r0
   17da4:	ldr	r7, [r0]
   17da8:	mov	r0, r4
   17dac:	bl	114b8 <close@plt>
   17db0:	str	r7, [r6]
   17db4:	mov	r0, r5
   17db8:	pop	{r4, r5, r6, r7, fp, pc}
   17dbc:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   17dc0:	add	fp, sp, #24
   17dc4:	sub	sp, sp, #32
   17dc8:	mov	r4, r2
   17dcc:	mov	r8, r0
   17dd0:	ldr	r6, [fp, #12]
   17dd4:	ldr	r7, [fp, #8]
   17dd8:	cmp	r1, #0
   17ddc:	beq	17e04 <__assert_fail@plt+0x6910>
   17de0:	mov	r5, r1
   17de4:	str	r4, [sp]
   17de8:	str	r3, [sp, #4]
   17dec:	movw	r2, #43872	; 0xab60
   17df0:	movt	r2, #1
   17df4:	mov	r0, r8
   17df8:	mov	r1, #1
   17dfc:	mov	r3, r5
   17e00:	b	17e1c <__assert_fail@plt+0x6928>
   17e04:	str	r3, [sp]
   17e08:	movw	r2, #43884	; 0xab6c
   17e0c:	movt	r2, #1
   17e10:	mov	r0, r8
   17e14:	mov	r1, #1
   17e18:	mov	r3, r4
   17e1c:	bl	113ec <__fprintf_chk@plt>
   17e20:	movw	r1, #43891	; 0xab73
   17e24:	movt	r1, #1
   17e28:	mov	r0, #0
   17e2c:	mov	r2, #5
   17e30:	bl	11278 <dcgettext@plt>
   17e34:	mov	r3, r0
   17e38:	movw	r0, #2022	; 0x7e6
   17e3c:	str	r0, [sp]
   17e40:	movw	r2, #44609	; 0xae41
   17e44:	movt	r2, #1
   17e48:	mov	r0, r8
   17e4c:	mov	r1, #1
   17e50:	bl	113ec <__fprintf_chk@plt>
   17e54:	movw	r4, #41363	; 0xa193
   17e58:	movt	r4, #1
   17e5c:	mov	r0, r4
   17e60:	mov	r1, r8
   17e64:	bl	111e8 <fputs_unlocked@plt>
   17e68:	movw	r1, #43895	; 0xab77
   17e6c:	movt	r1, #1
   17e70:	mov	r0, #0
   17e74:	mov	r2, #5
   17e78:	bl	11278 <dcgettext@plt>
   17e7c:	mov	r2, r0
   17e80:	movw	r3, #44066	; 0xac22
   17e84:	movt	r3, #1
   17e88:	mov	r0, r8
   17e8c:	mov	r1, #1
   17e90:	bl	113ec <__fprintf_chk@plt>
   17e94:	mov	r0, r4
   17e98:	mov	r1, r8
   17e9c:	bl	111e8 <fputs_unlocked@plt>
   17ea0:	cmp	r6, #9
   17ea4:	bhi	17ee0 <__assert_fail@plt+0x69ec>
   17ea8:	add	r0, pc, #0
   17eac:	ldr	pc, [r0, r6, lsl #2]
   17eb0:	ldrdeq	r7, [r1], -r8
   17eb4:	andeq	r7, r1, ip, ror #29
   17eb8:	andeq	r7, r1, ip, lsl pc
   17ebc:	andeq	r7, r1, r4, asr #30
   17ec0:	andeq	r7, r1, ip, ror #30
   17ec4:	muleq	r1, r4, pc	; <UNPREDICTABLE>
   17ec8:			; <UNDEFINED> instruction: 0x00017fbc
   17ecc:	strdeq	r7, [r1], -r4
   17ed0:	muleq	r1, r4, r0
   17ed4:	andeq	r8, r1, ip, lsr r0
   17ed8:	sub	sp, fp, #24
   17edc:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   17ee0:	movw	r1, #44419	; 0xad83
   17ee4:	movt	r1, #1
   17ee8:	b	18044 <__assert_fail@plt+0x6b50>
   17eec:	movw	r1, #44100	; 0xac44
   17ef0:	movt	r1, #1
   17ef4:	mov	r0, #0
   17ef8:	mov	r2, #5
   17efc:	bl	11278 <dcgettext@plt>
   17f00:	mov	r2, r0
   17f04:	ldr	r3, [r7]
   17f08:	mov	r0, r8
   17f0c:	mov	r1, #1
   17f10:	sub	sp, fp, #24
   17f14:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   17f18:	b	113ec <__fprintf_chk@plt>
   17f1c:	movw	r1, #44116	; 0xac54
   17f20:	movt	r1, #1
   17f24:	mov	r0, #0
   17f28:	mov	r2, #5
   17f2c:	bl	11278 <dcgettext@plt>
   17f30:	mov	r2, r0
   17f34:	ldr	r3, [r7]
   17f38:	ldr	r0, [r7, #4]
   17f3c:	str	r0, [sp]
   17f40:	b	18030 <__assert_fail@plt+0x6b3c>
   17f44:	movw	r1, #44139	; 0xac6b
   17f48:	movt	r1, #1
   17f4c:	mov	r0, #0
   17f50:	mov	r2, #5
   17f54:	bl	11278 <dcgettext@plt>
   17f58:	mov	r2, r0
   17f5c:	ldr	r3, [r7]
   17f60:	ldmib	r7, {r0, r1}
   17f64:	stm	sp, {r0, r1}
   17f68:	b	18030 <__assert_fail@plt+0x6b3c>
   17f6c:	movw	r1, #44167	; 0xac87
   17f70:	movt	r1, #1
   17f74:	mov	r0, #0
   17f78:	mov	r2, #5
   17f7c:	bl	11278 <dcgettext@plt>
   17f80:	mov	r2, r0
   17f84:	ldr	r3, [r7]
   17f88:	ldmib	r7, {r0, r1, r7}
   17f8c:	stm	sp, {r0, r1, r7}
   17f90:	b	18030 <__assert_fail@plt+0x6b3c>
   17f94:	movw	r1, #44199	; 0xaca7
   17f98:	movt	r1, #1
   17f9c:	mov	r0, #0
   17fa0:	mov	r2, #5
   17fa4:	bl	11278 <dcgettext@plt>
   17fa8:	mov	r2, r0
   17fac:	ldr	r3, [r7]
   17fb0:	ldmib	r7, {r0, r1, r6, r7}
   17fb4:	stm	sp, {r0, r1, r6, r7}
   17fb8:	b	18030 <__assert_fail@plt+0x6b3c>
   17fbc:	movw	r1, #44235	; 0xaccb
   17fc0:	movt	r1, #1
   17fc4:	mov	r0, #0
   17fc8:	mov	r2, #5
   17fcc:	bl	11278 <dcgettext@plt>
   17fd0:	mov	r2, r0
   17fd4:	ldr	r3, [r7]
   17fd8:	ldmib	r7, {r0, r1, r6}
   17fdc:	ldr	r5, [r7, #16]
   17fe0:	ldr	r7, [r7, #20]
   17fe4:	stm	sp, {r0, r1, r6}
   17fe8:	str	r5, [sp, #12]
   17fec:	str	r7, [sp, #16]
   17ff0:	b	18030 <__assert_fail@plt+0x6b3c>
   17ff4:	movw	r1, #44275	; 0xacf3
   17ff8:	movt	r1, #1
   17ffc:	mov	r0, #0
   18000:	mov	r2, #5
   18004:	bl	11278 <dcgettext@plt>
   18008:	mov	r2, r0
   1800c:	ldr	r3, [r7]
   18010:	ldmib	r7, {r0, r1, r6}
   18014:	ldr	r5, [r7, #16]
   18018:	ldr	r4, [r7, #20]
   1801c:	ldr	r7, [r7, #24]
   18020:	stm	sp, {r0, r1, r6}
   18024:	str	r5, [sp, #12]
   18028:	str	r4, [sp, #16]
   1802c:	str	r7, [sp, #20]
   18030:	mov	r0, r8
   18034:	mov	r1, #1
   18038:	b	180e4 <__assert_fail@plt+0x6bf0>
   1803c:	movw	r1, #44367	; 0xad4f
   18040:	movt	r1, #1
   18044:	mov	r0, #0
   18048:	mov	r2, #5
   1804c:	bl	11278 <dcgettext@plt>
   18050:	mov	ip, r0
   18054:	ldr	r3, [r7]
   18058:	ldr	r0, [r7, #4]
   1805c:	ldr	r1, [r7, #8]
   18060:	ldr	r6, [r7, #12]
   18064:	ldr	r5, [r7, #16]
   18068:	ldr	r4, [r7, #20]
   1806c:	ldr	r2, [r7, #24]
   18070:	ldr	lr, [r7, #28]
   18074:	ldr	r7, [r7, #32]
   18078:	stm	sp, {r0, r1, r6}
   1807c:	str	r5, [sp, #12]
   18080:	str	r4, [sp, #16]
   18084:	str	r2, [sp, #20]
   18088:	str	lr, [sp, #24]
   1808c:	str	r7, [sp, #28]
   18090:	b	180d8 <__assert_fail@plt+0x6be4>
   18094:	movw	r1, #44319	; 0xad1f
   18098:	movt	r1, #1
   1809c:	mov	r0, #0
   180a0:	mov	r2, #5
   180a4:	bl	11278 <dcgettext@plt>
   180a8:	mov	ip, r0
   180ac:	ldr	r3, [r7]
   180b0:	ldmib	r7, {r0, r1, r6}
   180b4:	ldr	r5, [r7, #16]
   180b8:	ldr	r4, [r7, #20]
   180bc:	ldr	r2, [r7, #24]
   180c0:	ldr	r7, [r7, #28]
   180c4:	stm	sp, {r0, r1, r6}
   180c8:	str	r5, [sp, #12]
   180cc:	str	r4, [sp, #16]
   180d0:	str	r2, [sp, #20]
   180d4:	str	r7, [sp, #24]
   180d8:	mov	r0, r8
   180dc:	mov	r1, #1
   180e0:	mov	r2, ip
   180e4:	bl	113ec <__fprintf_chk@plt>
   180e8:	sub	sp, fp, #24
   180ec:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   180f0:	push	{r4, sl, fp, lr}
   180f4:	add	fp, sp, #8
   180f8:	sub	sp, sp, #8
   180fc:	mov	lr, #0
   18100:	ldr	ip, [fp, #8]
   18104:	ldr	r4, [ip, lr, lsl #2]
   18108:	add	lr, lr, #1
   1810c:	cmp	r4, #0
   18110:	bne	18104 <__assert_fail@plt+0x6c10>
   18114:	sub	r4, lr, #1
   18118:	str	ip, [sp]
   1811c:	str	r4, [sp, #4]
   18120:	bl	17dbc <__assert_fail@plt+0x68c8>
   18124:	sub	sp, fp, #8
   18128:	pop	{r4, sl, fp, pc}
   1812c:	push	{r4, r5, fp, lr}
   18130:	add	fp, sp, #8
   18134:	sub	sp, sp, #48	; 0x30
   18138:	mov	ip, #0
   1813c:	ldr	r4, [fp, #8]
   18140:	add	lr, sp, #8
   18144:	ldr	r5, [r4]
   18148:	str	r5, [lr, ip, lsl #2]
   1814c:	cmp	r5, #0
   18150:	beq	18164 <__assert_fail@plt+0x6c70>
   18154:	add	ip, ip, #1
   18158:	add	r4, r4, #4
   1815c:	cmp	ip, #10
   18160:	bcc	18144 <__assert_fail@plt+0x6c50>
   18164:	str	lr, [sp]
   18168:	str	ip, [sp, #4]
   1816c:	bl	17dbc <__assert_fail@plt+0x68c8>
   18170:	sub	sp, fp, #8
   18174:	pop	{r4, r5, fp, pc}
   18178:	push	{fp, lr}
   1817c:	mov	fp, sp
   18180:	sub	sp, sp, #8
   18184:	add	ip, fp, #8
   18188:	str	ip, [sp, #4]
   1818c:	str	ip, [sp]
   18190:	bl	1812c <__assert_fail@plt+0x6c38>
   18194:	mov	sp, fp
   18198:	pop	{fp, pc}
   1819c:	push	{fp, lr}
   181a0:	mov	fp, sp
   181a4:	movw	r0, #49548	; 0xc18c
   181a8:	movt	r0, #2
   181ac:	ldr	r1, [r0]
   181b0:	movw	r0, #41363	; 0xa193
   181b4:	movt	r0, #1
   181b8:	bl	111e8 <fputs_unlocked@plt>
   181bc:	movw	r1, #44479	; 0xadbf
   181c0:	movt	r1, #1
   181c4:	mov	r0, #0
   181c8:	mov	r2, #5
   181cc:	bl	11278 <dcgettext@plt>
   181d0:	mov	r1, r0
   181d4:	movw	r2, #44499	; 0xadd3
   181d8:	movt	r2, #1
   181dc:	mov	r0, #1
   181e0:	bl	113c8 <__printf_chk@plt>
   181e4:	movw	r1, #44521	; 0xade9
   181e8:	movt	r1, #1
   181ec:	mov	r0, #0
   181f0:	mov	r2, #5
   181f4:	bl	11278 <dcgettext@plt>
   181f8:	mov	r1, r0
   181fc:	movw	r2, #41636	; 0xa2a4
   18200:	movt	r2, #1
   18204:	movw	r3, #41911	; 0xa3b7
   18208:	movt	r3, #1
   1820c:	mov	r0, #1
   18210:	bl	113c8 <__printf_chk@plt>
   18214:	movw	r1, #44541	; 0xadfd
   18218:	movt	r1, #1
   1821c:	mov	r0, #0
   18220:	mov	r2, #5
   18224:	bl	11278 <dcgettext@plt>
   18228:	mov	r1, r0
   1822c:	movw	r2, #44580	; 0xae24
   18230:	movt	r2, #1
   18234:	mov	r0, #1
   18238:	pop	{fp, lr}
   1823c:	b	113c8 <__printf_chk@plt>
   18240:	b	18244 <__assert_fail@plt+0x6d50>
   18244:	push	{r4, r5, r6, sl, fp, lr}
   18248:	add	fp, sp, #16
   1824c:	mov	r4, r2
   18250:	mov	r5, r1
   18254:	mov	r6, r0
   18258:	bl	197d8 <__assert_fail@plt+0x82e4>
   1825c:	cmp	r0, #0
   18260:	popne	{r4, r5, r6, sl, fp, pc}
   18264:	cmp	r6, #0
   18268:	beq	1827c <__assert_fail@plt+0x6d88>
   1826c:	cmp	r5, #0
   18270:	cmpne	r4, #0
   18274:	bne	1827c <__assert_fail@plt+0x6d88>
   18278:	pop	{r4, r5, r6, sl, fp, pc}
   1827c:	bl	18630 <__assert_fail@plt+0x713c>
   18280:	push	{fp, lr}
   18284:	mov	fp, sp
   18288:	bl	18c78 <__assert_fail@plt+0x7784>
   1828c:	bl	18294 <__assert_fail@plt+0x6da0>
   18290:	pop	{fp, pc}
   18294:	cmp	r0, #0
   18298:	bxne	lr
   1829c:	push	{fp, lr}
   182a0:	mov	fp, sp
   182a4:	bl	18630 <__assert_fail@plt+0x713c>
   182a8:	push	{fp, lr}
   182ac:	mov	fp, sp
   182b0:	bl	1970c <__assert_fail@plt+0x8218>
   182b4:	bl	18294 <__assert_fail@plt+0x6da0>
   182b8:	pop	{fp, pc}
   182bc:	b	18280 <__assert_fail@plt+0x6d8c>
   182c0:	push	{r4, r5, fp, lr}
   182c4:	add	fp, sp, #8
   182c8:	mov	r4, r1
   182cc:	mov	r5, r0
   182d0:	bl	18ca8 <__assert_fail@plt+0x77b4>
   182d4:	cmp	r0, #0
   182d8:	popne	{r4, r5, fp, pc}
   182dc:	cmp	r5, #0
   182e0:	beq	182f0 <__assert_fail@plt+0x6dfc>
   182e4:	cmp	r4, #0
   182e8:	bne	182f0 <__assert_fail@plt+0x6dfc>
   182ec:	pop	{r4, r5, fp, pc}
   182f0:	bl	18630 <__assert_fail@plt+0x713c>
   182f4:	push	{fp, lr}
   182f8:	mov	fp, sp
   182fc:	bl	19710 <__assert_fail@plt+0x821c>
   18300:	bl	18294 <__assert_fail@plt+0x6da0>
   18304:	pop	{fp, pc}
   18308:	push	{fp, lr}
   1830c:	mov	fp, sp
   18310:	bl	19720 <__assert_fail@plt+0x822c>
   18314:	bl	18294 <__assert_fail@plt+0x6da0>
   18318:	pop	{fp, pc}
   1831c:	push	{fp, lr}
   18320:	mov	fp, sp
   18324:	mov	r2, r1
   18328:	mov	r1, r0
   1832c:	mov	r0, #0
   18330:	bl	18244 <__assert_fail@plt+0x6d50>
   18334:	pop	{fp, pc}
   18338:	mov	r2, r1
   1833c:	mov	r1, r0
   18340:	mov	r0, #0
   18344:	b	18308 <__assert_fail@plt+0x6e14>
   18348:	mov	r2, #1
   1834c:	b	18350 <__assert_fail@plt+0x6e5c>
   18350:	push	{r4, r5, fp, lr}
   18354:	add	fp, sp, #8
   18358:	mov	r4, r1
   1835c:	ldr	r5, [r1]
   18360:	cmp	r0, #0
   18364:	beq	1837c <__assert_fail@plt+0x6e88>
   18368:	mov	r1, #1
   1836c:	add	r1, r1, r5, lsr #1
   18370:	adds	r5, r5, r1
   18374:	bcc	18394 <__assert_fail@plt+0x6ea0>
   18378:	bl	18630 <__assert_fail@plt+0x713c>
   1837c:	cmp	r5, #0
   18380:	bne	18394 <__assert_fail@plt+0x6ea0>
   18384:	mov	r1, #64	; 0x40
   18388:	udiv	r5, r1, r2
   1838c:	cmp	r2, #64	; 0x40
   18390:	addhi	r5, r5, #1
   18394:	mov	r1, r5
   18398:	bl	18244 <__assert_fail@plt+0x6d50>
   1839c:	str	r5, [r4]
   183a0:	pop	{r4, r5, fp, pc}
   183a4:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   183a8:	add	fp, sp, #24
   183ac:	mov	r8, r1
   183b0:	ldr	r6, [r1]
   183b4:	add	r1, r6, r6, asr #1
   183b8:	cmp	r1, r6
   183bc:	mvnvs	r1, #-2147483648	; 0x80000000
   183c0:	cmp	r1, r3
   183c4:	mov	r5, r1
   183c8:	movgt	r5, r3
   183cc:	cmn	r3, #1
   183d0:	movle	r5, r1
   183d4:	ldr	r4, [fp, #8]
   183d8:	cmn	r4, #1
   183dc:	ble	18404 <__assert_fail@plt+0x6f10>
   183e0:	cmp	r4, #0
   183e4:	beq	18458 <__assert_fail@plt+0x6f64>
   183e8:	cmn	r5, #1
   183ec:	ble	1842c <__assert_fail@plt+0x6f38>
   183f0:	mvn	r7, #-2147483648	; 0x80000000
   183f4:	udiv	r1, r7, r4
   183f8:	cmp	r1, r5
   183fc:	bge	18458 <__assert_fail@plt+0x6f64>
   18400:	b	18468 <__assert_fail@plt+0x6f74>
   18404:	cmn	r5, #1
   18408:	ble	18448 <__assert_fail@plt+0x6f54>
   1840c:	cmn	r4, #1
   18410:	beq	18458 <__assert_fail@plt+0x6f64>
   18414:	mov	r1, #-2147483648	; 0x80000000
   18418:	sdiv	r1, r1, r4
   1841c:	mvn	r7, #-2147483648	; 0x80000000
   18420:	cmp	r1, r5
   18424:	bge	18458 <__assert_fail@plt+0x6f64>
   18428:	b	18468 <__assert_fail@plt+0x6f74>
   1842c:	beq	18458 <__assert_fail@plt+0x6f64>
   18430:	mov	r1, #-2147483648	; 0x80000000
   18434:	sdiv	r1, r1, r5
   18438:	mvn	r7, #-2147483648	; 0x80000000
   1843c:	cmp	r1, r4
   18440:	bge	18458 <__assert_fail@plt+0x6f64>
   18444:	b	18468 <__assert_fail@plt+0x6f74>
   18448:	mvn	r7, #-2147483648	; 0x80000000
   1844c:	sdiv	r1, r7, r4
   18450:	cmp	r5, r1
   18454:	blt	18468 <__assert_fail@plt+0x6f74>
   18458:	mul	r1, r5, r4
   1845c:	mov	r7, #64	; 0x40
   18460:	cmp	r1, #63	; 0x3f
   18464:	bgt	18470 <__assert_fail@plt+0x6f7c>
   18468:	sdiv	r5, r7, r4
   1846c:	mul	r1, r5, r4
   18470:	cmp	r0, #0
   18474:	moveq	r7, #0
   18478:	streq	r7, [r8]
   1847c:	sub	r7, r5, r6
   18480:	cmp	r7, r2
   18484:	bge	18530 <__assert_fail@plt+0x703c>
   18488:	add	r5, r6, r2
   1848c:	mov	r1, #0
   18490:	cmp	r5, r3
   18494:	mov	r2, #0
   18498:	movwgt	r2, #1
   1849c:	cmn	r3, #1
   184a0:	movwgt	r1, #1
   184a4:	cmp	r5, r6
   184a8:	bvs	18518 <__assert_fail@plt+0x7024>
   184ac:	ands	r1, r1, r2
   184b0:	bne	18518 <__assert_fail@plt+0x7024>
   184b4:	cmn	r4, #1
   184b8:	ble	184e0 <__assert_fail@plt+0x6fec>
   184bc:	cmp	r4, #0
   184c0:	beq	1852c <__assert_fail@plt+0x7038>
   184c4:	cmn	r5, #1
   184c8:	ble	18504 <__assert_fail@plt+0x7010>
   184cc:	mvn	r1, #-2147483648	; 0x80000000
   184d0:	udiv	r1, r1, r4
   184d4:	cmp	r1, r5
   184d8:	bge	1852c <__assert_fail@plt+0x7038>
   184dc:	b	18518 <__assert_fail@plt+0x7024>
   184e0:	cmn	r5, #1
   184e4:	ble	1851c <__assert_fail@plt+0x7028>
   184e8:	cmn	r4, #1
   184ec:	beq	1852c <__assert_fail@plt+0x7038>
   184f0:	mov	r1, #-2147483648	; 0x80000000
   184f4:	sdiv	r1, r1, r4
   184f8:	cmp	r1, r5
   184fc:	bge	1852c <__assert_fail@plt+0x7038>
   18500:	b	18518 <__assert_fail@plt+0x7024>
   18504:	beq	1852c <__assert_fail@plt+0x7038>
   18508:	mov	r1, #-2147483648	; 0x80000000
   1850c:	sdiv	r1, r1, r5
   18510:	cmp	r1, r4
   18514:	bge	1852c <__assert_fail@plt+0x7038>
   18518:	bl	18630 <__assert_fail@plt+0x713c>
   1851c:	mvn	r1, #-2147483648	; 0x80000000
   18520:	sdiv	r1, r1, r4
   18524:	cmp	r5, r1
   18528:	blt	18518 <__assert_fail@plt+0x7024>
   1852c:	mul	r1, r5, r4
   18530:	bl	182c0 <__assert_fail@plt+0x6dcc>
   18534:	str	r5, [r8]
   18538:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1853c:	mov	r1, #1
   18540:	b	18544 <__assert_fail@plt+0x7050>
   18544:	push	{fp, lr}
   18548:	mov	fp, sp
   1854c:	bl	18c24 <__assert_fail@plt+0x7730>
   18550:	bl	18294 <__assert_fail@plt+0x6da0>
   18554:	pop	{fp, pc}
   18558:	mov	r1, #1
   1855c:	b	18560 <__assert_fail@plt+0x706c>
   18560:	push	{fp, lr}
   18564:	mov	fp, sp
   18568:	bl	1971c <__assert_fail@plt+0x8228>
   1856c:	bl	18294 <__assert_fail@plt+0x6da0>
   18570:	pop	{fp, pc}
   18574:	push	{r4, r5, r6, sl, fp, lr}
   18578:	add	fp, sp, #16
   1857c:	mov	r4, r1
   18580:	mov	r5, r0
   18584:	mov	r0, r1
   18588:	bl	18280 <__assert_fail@plt+0x6d8c>
   1858c:	mov	r6, r0
   18590:	mov	r1, r5
   18594:	mov	r2, r4
   18598:	bl	11248 <memcpy@plt>
   1859c:	mov	r0, r6
   185a0:	pop	{r4, r5, r6, sl, fp, pc}
   185a4:	push	{r4, r5, r6, sl, fp, lr}
   185a8:	add	fp, sp, #16
   185ac:	mov	r4, r1
   185b0:	mov	r5, r0
   185b4:	mov	r0, r1
   185b8:	bl	182a8 <__assert_fail@plt+0x6db4>
   185bc:	mov	r6, r0
   185c0:	mov	r1, r5
   185c4:	mov	r2, r4
   185c8:	bl	11248 <memcpy@plt>
   185cc:	mov	r0, r6
   185d0:	pop	{r4, r5, r6, sl, fp, pc}
   185d4:	push	{r4, r5, r6, sl, fp, lr}
   185d8:	add	fp, sp, #16
   185dc:	mov	r4, r1
   185e0:	mov	r5, r0
   185e4:	add	r0, r1, #1
   185e8:	bl	182a8 <__assert_fail@plt+0x6db4>
   185ec:	mov	r6, r0
   185f0:	mov	r0, #0
   185f4:	strb	r0, [r6, r4]
   185f8:	mov	r0, r6
   185fc:	mov	r1, r5
   18600:	mov	r2, r4
   18604:	bl	11248 <memcpy@plt>
   18608:	mov	r0, r6
   1860c:	pop	{r4, r5, r6, sl, fp, pc}
   18610:	push	{r4, sl, fp, lr}
   18614:	add	fp, sp, #8
   18618:	mov	r4, r0
   1861c:	bl	11374 <strlen@plt>
   18620:	add	r1, r0, #1
   18624:	mov	r0, r4
   18628:	pop	{r4, sl, fp, lr}
   1862c:	b	18574 <__assert_fail@plt+0x7080>
   18630:	push	{fp, lr}
   18634:	mov	fp, sp
   18638:	movw	r0, #49460	; 0xc134
   1863c:	movt	r0, #2
   18640:	ldr	r4, [r0]
   18644:	movw	r1, #44656	; 0xae70
   18648:	movt	r1, #1
   1864c:	mov	r0, #0
   18650:	mov	r2, #5
   18654:	bl	11278 <dcgettext@plt>
   18658:	mov	r3, r0
   1865c:	movw	r2, #42203	; 0xa4db
   18660:	movt	r2, #1
   18664:	mov	r0, r4
   18668:	mov	r1, #0
   1866c:	bl	11308 <error@plt>
   18670:	bl	114ac <abort@plt>
   18674:	push	{fp, lr}
   18678:	mov	fp, sp
   1867c:	orr	r1, r1, #512	; 0x200
   18680:	bl	12f2c <__assert_fail@plt+0x1a38>
   18684:	cmp	r0, #0
   18688:	popne	{fp, pc}
   1868c:	bl	113a4 <__errno_location@plt>
   18690:	ldr	r0, [r0]
   18694:	cmp	r0, #22
   18698:	bne	186bc <__assert_fail@plt+0x71c8>
   1869c:	movw	r0, #44673	; 0xae81
   186a0:	movt	r0, #1
   186a4:	movw	r1, #44689	; 0xae91
   186a8:	movt	r1, #1
   186ac:	movw	r3, #44700	; 0xae9c
   186b0:	movt	r3, #1
   186b4:	mov	r2, #41	; 0x29
   186b8:	bl	114f4 <__assert_fail@plt>
   186bc:	bl	18630 <__assert_fail@plt+0x713c>
   186c0:	ldr	r0, [r0, #48]	; 0x30
   186c4:	and	r2, r0, #17
   186c8:	mov	r0, #1
   186cc:	cmp	r2, #16
   186d0:	beq	186ec <__assert_fail@plt+0x71f8>
   186d4:	mov	r0, #0
   186d8:	cmp	r2, #17
   186dc:	bxne	lr
   186e0:	ldr	r0, [r1, #48]	; 0x30
   186e4:	cmp	r0, #0
   186e8:	movwne	r0, #1
   186ec:	bx	lr
   186f0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   186f4:	add	fp, sp, #28
   186f8:	sub	sp, sp, #20
   186fc:	cmp	r2, #37	; 0x25
   18700:	bcs	18b30 <__assert_fail@plt+0x763c>
   18704:	mov	r5, r2
   18708:	mov	r6, r1
   1870c:	mov	r4, r0
   18710:	str	r3, [sp, #4]
   18714:	ldr	sl, [fp, #8]
   18718:	bl	113a4 <__errno_location@plt>
   1871c:	mov	r7, r0
   18720:	mov	r0, #0
   18724:	str	r0, [r7]
   18728:	bl	1135c <__ctype_b_loc@plt>
   1872c:	ldr	r1, [r0]
   18730:	mov	r2, r4
   18734:	ldrb	r0, [r2], #1
   18738:	add	r3, r1, r0, lsl #1
   1873c:	ldrb	r3, [r3, #1]
   18740:	tst	r3, #32
   18744:	bne	18734 <__assert_fail@plt+0x7240>
   18748:	add	r9, sp, #16
   1874c:	cmp	r6, #0
   18750:	movne	r9, r6
   18754:	mov	r8, #4
   18758:	cmp	r0, #45	; 0x2d
   1875c:	beq	18b24 <__assert_fail@plt+0x7630>
   18760:	mov	r0, r4
   18764:	mov	r1, r9
   18768:	mov	r2, r5
   1876c:	bl	113e0 <strtoumax@plt>
   18770:	str	r1, [sp, #12]
   18774:	str	r0, [sp, #8]
   18778:	ldr	r6, [r9]
   1877c:	cmp	r6, r4
   18780:	beq	187a8 <__assert_fail@plt+0x72b4>
   18784:	ldr	r0, [r7]
   18788:	cmp	r0, #0
   1878c:	beq	187dc <__assert_fail@plt+0x72e8>
   18790:	cmp	r0, #34	; 0x22
   18794:	bne	18b24 <__assert_fail@plt+0x7630>
   18798:	mov	r8, #1
   1879c:	cmp	sl, #0
   187a0:	bne	187e8 <__assert_fail@plt+0x72f4>
   187a4:	b	18b14 <__assert_fail@plt+0x7620>
   187a8:	cmp	sl, #0
   187ac:	ldrbne	r1, [r6]
   187b0:	cmpne	r1, #0
   187b4:	beq	18b24 <__assert_fail@plt+0x7630>
   187b8:	mov	r0, sl
   187bc:	bl	11380 <strchr@plt>
   187c0:	cmp	r0, #0
   187c4:	beq	18b24 <__assert_fail@plt+0x7630>
   187c8:	mov	r8, #0
   187cc:	str	r8, [sp, #12]
   187d0:	mov	r0, #1
   187d4:	str	r0, [sp, #8]
   187d8:	b	187e8 <__assert_fail@plt+0x72f4>
   187dc:	mov	r8, r0
   187e0:	cmp	sl, #0
   187e4:	beq	18b14 <__assert_fail@plt+0x7620>
   187e8:	ldrb	r4, [r6]
   187ec:	cmp	r4, #0
   187f0:	beq	18b14 <__assert_fail@plt+0x7620>
   187f4:	mov	r0, sl
   187f8:	mov	r1, r4
   187fc:	bl	11380 <strchr@plt>
   18800:	cmp	r0, #0
   18804:	beq	18a14 <__assert_fail@plt+0x7520>
   18808:	sub	r0, r4, #69	; 0x45
   1880c:	mov	r7, #1
   18810:	mov	r5, #1024	; 0x400
   18814:	cmp	r0, #47	; 0x2f
   18818:	bhi	18910 <__assert_fail@plt+0x741c>
   1881c:	add	r1, pc, #0
   18820:	ldr	pc, [r1, r0, lsl #2]
   18824:	andeq	r8, r1, r4, ror #17
   18828:	andeq	r8, r1, r0, lsl r9
   1882c:	andeq	r8, r1, r4, ror #17
   18830:	andeq	r8, r1, r0, lsl r9
   18834:	andeq	r8, r1, r0, lsl r9
   18838:	andeq	r8, r1, r0, lsl r9
   1883c:	andeq	r8, r1, r4, ror #17
   18840:	andeq	r8, r1, r0, lsl r9
   18844:	andeq	r8, r1, r4, ror #17
   18848:	andeq	r8, r1, r0, lsl r9
   1884c:	andeq	r8, r1, r0, lsl r9
   18850:	andeq	r8, r1, r4, ror #17
   18854:	andeq	r8, r1, r0, lsl r9
   18858:	andeq	r8, r1, r0, lsl r9
   1885c:	andeq	r8, r1, r0, lsl r9
   18860:	andeq	r8, r1, r4, ror #17
   18864:	andeq	r8, r1, r0, lsl r9
   18868:	andeq	r8, r1, r0, lsl r9
   1886c:	andeq	r8, r1, r0, lsl r9
   18870:	andeq	r8, r1, r0, lsl r9
   18874:	andeq	r8, r1, r4, ror #17
   18878:	andeq	r8, r1, r4, ror #17
   1887c:	andeq	r8, r1, r0, lsl r9
   18880:	andeq	r8, r1, r0, lsl r9
   18884:	andeq	r8, r1, r0, lsl r9
   18888:	andeq	r8, r1, r0, lsl r9
   1888c:	andeq	r8, r1, r0, lsl r9
   18890:	andeq	r8, r1, r0, lsl r9
   18894:	andeq	r8, r1, r0, lsl r9
   18898:	andeq	r8, r1, r0, lsl r9
   1889c:	andeq	r8, r1, r0, lsl r9
   188a0:	andeq	r8, r1, r0, lsl r9
   188a4:	andeq	r8, r1, r0, lsl r9
   188a8:	andeq	r8, r1, r0, lsl r9
   188ac:	andeq	r8, r1, r4, ror #17
   188b0:	andeq	r8, r1, r0, lsl r9
   188b4:	andeq	r8, r1, r0, lsl r9
   188b8:	andeq	r8, r1, r0, lsl r9
   188bc:	andeq	r8, r1, r4, ror #17
   188c0:	andeq	r8, r1, r0, lsl r9
   188c4:	andeq	r8, r1, r4, ror #17
   188c8:	andeq	r8, r1, r0, lsl r9
   188cc:	andeq	r8, r1, r0, lsl r9
   188d0:	andeq	r8, r1, r0, lsl r9
   188d4:	andeq	r8, r1, r0, lsl r9
   188d8:	andeq	r8, r1, r0, lsl r9
   188dc:	andeq	r8, r1, r0, lsl r9
   188e0:	andeq	r8, r1, r4, ror #17
   188e4:	mov	r0, sl
   188e8:	mov	r1, #48	; 0x30
   188ec:	bl	11380 <strchr@plt>
   188f0:	cmp	r0, #0
   188f4:	beq	18910 <__assert_fail@plt+0x741c>
   188f8:	ldrb	r0, [r6, #1]
   188fc:	cmp	r0, #66	; 0x42
   18900:	cmpne	r0, #68	; 0x44
   18904:	bne	18a2c <__assert_fail@plt+0x7538>
   18908:	mov	r7, #2
   1890c:	mov	r5, #1000	; 0x3e8
   18910:	sub	r1, r4, #66	; 0x42
   18914:	cmp	r1, #53	; 0x35
   18918:	bhi	18a14 <__assert_fail@plt+0x7520>
   1891c:	mov	r0, #0
   18920:	add	r2, pc, #0
   18924:	ldr	pc, [r2, r1, lsl #2]
   18928:	muleq	r1, r8, sl
   1892c:	andeq	r8, r1, r4, lsl sl
   18930:	andeq	r8, r1, r4, lsl sl
   18934:	andeq	r8, r1, r4, lsr #21
   18938:	andeq	r8, r1, r4, lsl sl
   1893c:	andeq	r8, r1, r0, lsl #20
   18940:	andeq	r8, r1, r4, lsl sl
   18944:	andeq	r8, r1, r4, lsl sl
   18948:	andeq	r8, r1, r4, lsl sl
   1894c:	andeq	r8, r1, r8, asr #20
   18950:	andeq	r8, r1, r4, lsl sl
   18954:	andeq	r8, r1, ip, asr sl
   18958:	andeq	r8, r1, r4, lsl sl
   1895c:	andeq	r8, r1, r4, lsl sl
   18960:			; <UNDEFINED> instruction: 0x00018ab8
   18964:	andeq	r8, r1, r4, lsl sl
   18968:	andeq	r8, r1, r4, lsl sl
   1896c:	andeq	r8, r1, r4, lsl sl
   18970:	andeq	r8, r1, r0, ror sl
   18974:	andeq	r8, r1, r4, lsl sl
   18978:	andeq	r8, r1, r4, lsl sl
   1897c:	andeq	r8, r1, r4, lsl sl
   18980:	andeq	r8, r1, r4, lsl sl
   18984:	andeq	r8, r1, ip, asr #21
   18988:	andeq	r8, r1, r4, lsl #21
   1898c:	andeq	r8, r1, r4, lsl sl
   18990:	andeq	r8, r1, r4, lsl sl
   18994:	andeq	r8, r1, r4, lsl sl
   18998:	andeq	r8, r1, r4, lsl sl
   1899c:	andeq	r8, r1, r4, lsl sl
   189a0:	andeq	r8, r1, r4, lsl sl
   189a4:	andeq	r8, r1, r4, lsl sl
   189a8:	andeq	r8, r1, r0, ror #21
   189ac:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   189b0:	andeq	r8, r1, r4, lsl sl
   189b4:	andeq	r8, r1, r4, lsl sl
   189b8:	andeq	r8, r1, r4, lsl sl
   189bc:	andeq	r8, r1, r0, lsl #20
   189c0:	andeq	r8, r1, r4, lsl sl
   189c4:	andeq	r8, r1, r4, lsl sl
   189c8:	andeq	r8, r1, r4, lsl sl
   189cc:	andeq	r8, r1, r8, asr #20
   189d0:	andeq	r8, r1, r4, lsl sl
   189d4:	andeq	r8, r1, ip, asr sl
   189d8:	andeq	r8, r1, r4, lsl sl
   189dc:	andeq	r8, r1, r4, lsl sl
   189e0:	andeq	r8, r1, r4, lsl sl
   189e4:	andeq	r8, r1, r4, lsl sl
   189e8:	andeq	r8, r1, r4, lsl sl
   189ec:	andeq	r8, r1, r4, lsl sl
   189f0:	andeq	r8, r1, r0, ror sl
   189f4:	andeq	r8, r1, r4, lsl sl
   189f8:	andeq	r8, r1, r4, lsl sl
   189fc:	andeq	r8, r1, ip, ror #21
   18a00:	add	r0, sp, #8
   18a04:	mov	r1, r5
   18a08:	mov	r2, #3
   18a0c:	bl	18bdc <__assert_fail@plt+0x76e8>
   18a10:	b	18af8 <__assert_fail@plt+0x7604>
   18a14:	ldr	r0, [sp, #8]
   18a18:	ldr	r1, [sp, #12]
   18a1c:	ldr	r2, [sp, #4]
   18a20:	strd	r0, [r2]
   18a24:	orr	r8, r8, #2
   18a28:	b	18b24 <__assert_fail@plt+0x7630>
   18a2c:	cmp	r0, #105	; 0x69
   18a30:	bne	18910 <__assert_fail@plt+0x741c>
   18a34:	ldrb	r0, [r6, #2]
   18a38:	mov	r7, #1
   18a3c:	cmp	r0, #66	; 0x42
   18a40:	movweq	r7, #3
   18a44:	b	18910 <__assert_fail@plt+0x741c>
   18a48:	add	r0, sp, #8
   18a4c:	mov	r1, r5
   18a50:	mov	r2, #1
   18a54:	bl	18bdc <__assert_fail@plt+0x76e8>
   18a58:	b	18af8 <__assert_fail@plt+0x7604>
   18a5c:	add	r0, sp, #8
   18a60:	mov	r1, r5
   18a64:	mov	r2, #2
   18a68:	bl	18bdc <__assert_fail@plt+0x76e8>
   18a6c:	b	18af8 <__assert_fail@plt+0x7604>
   18a70:	add	r0, sp, #8
   18a74:	mov	r1, r5
   18a78:	mov	r2, #4
   18a7c:	bl	18bdc <__assert_fail@plt+0x76e8>
   18a80:	b	18af8 <__assert_fail@plt+0x7604>
   18a84:	add	r0, sp, #8
   18a88:	mov	r1, r5
   18a8c:	mov	r2, #7
   18a90:	bl	18bdc <__assert_fail@plt+0x76e8>
   18a94:	b	18af8 <__assert_fail@plt+0x7604>
   18a98:	add	r0, sp, #8
   18a9c:	mov	r1, #1024	; 0x400
   18aa0:	b	18af4 <__assert_fail@plt+0x7600>
   18aa4:	add	r0, sp, #8
   18aa8:	mov	r1, r5
   18aac:	mov	r2, #6
   18ab0:	bl	18bdc <__assert_fail@plt+0x76e8>
   18ab4:	b	18af8 <__assert_fail@plt+0x7604>
   18ab8:	add	r0, sp, #8
   18abc:	mov	r1, r5
   18ac0:	mov	r2, #5
   18ac4:	bl	18bdc <__assert_fail@plt+0x76e8>
   18ac8:	b	18af8 <__assert_fail@plt+0x7604>
   18acc:	add	r0, sp, #8
   18ad0:	mov	r1, r5
   18ad4:	mov	r2, #8
   18ad8:	bl	18bdc <__assert_fail@plt+0x76e8>
   18adc:	b	18af8 <__assert_fail@plt+0x7604>
   18ae0:	add	r0, sp, #8
   18ae4:	mov	r1, #512	; 0x200
   18ae8:	b	18af4 <__assert_fail@plt+0x7600>
   18aec:	add	r0, sp, #8
   18af0:	mov	r1, #2
   18af4:	bl	18b50 <__assert_fail@plt+0x765c>
   18af8:	ldr	r1, [r9]
   18afc:	add	r2, r1, r7
   18b00:	str	r2, [r9]
   18b04:	ldrb	r1, [r1, r7]
   18b08:	orr	r8, r0, r8
   18b0c:	cmp	r1, #0
   18b10:	orrne	r8, r8, #2
   18b14:	ldr	r0, [sp, #8]
   18b18:	ldr	r1, [sp, #12]
   18b1c:	ldr	r2, [sp, #4]
   18b20:	strd	r0, [r2]
   18b24:	mov	r0, r8
   18b28:	sub	sp, fp, #28
   18b2c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18b30:	movw	r0, #44778	; 0xaeea
   18b34:	movt	r0, #1
   18b38:	movw	r1, #44816	; 0xaf10
   18b3c:	movt	r1, #1
   18b40:	movw	r3, #44832	; 0xaf20
   18b44:	movt	r3, #1
   18b48:	mov	r2, #85	; 0x55
   18b4c:	bl	114f4 <__assert_fail@plt>
   18b50:	push	{r4, r5, r6, r7, fp, lr}
   18b54:	add	fp, sp, #16
   18b58:	mov	r5, r1
   18b5c:	mov	r4, r0
   18b60:	cmn	r1, #1
   18b64:	ble	18b9c <__assert_fail@plt+0x76a8>
   18b68:	cmp	r5, #0
   18b6c:	beq	18bbc <__assert_fail@plt+0x76c8>
   18b70:	asr	r3, r5, #31
   18b74:	mvn	r6, #0
   18b78:	mvn	r0, #0
   18b7c:	mvn	r1, #0
   18b80:	mov	r2, r5
   18b84:	bl	1992c <__assert_fail@plt+0x8438>
   18b88:	ldrd	r2, [r4]
   18b8c:	subs	r0, r0, r2
   18b90:	sbcs	r0, r1, r3
   18b94:	bcc	18bac <__assert_fail@plt+0x76b8>
   18b98:	b	18bbc <__assert_fail@plt+0x76c8>
   18b9c:	ldrd	r0, [r4]
   18ba0:	orrs	r0, r0, r1
   18ba4:	beq	18bbc <__assert_fail@plt+0x76c8>
   18ba8:	mvn	r6, #0
   18bac:	mov	r0, #1
   18bb0:	mvn	r7, #0
   18bb4:	strd	r6, [r4]
   18bb8:	pop	{r4, r5, r6, r7, fp, pc}
   18bbc:	ldrd	r0, [r4]
   18bc0:	umull	r6, r2, r0, r5
   18bc4:	asr	r3, r5, #31
   18bc8:	mla	r0, r0, r3, r2
   18bcc:	mla	r7, r1, r5, r0
   18bd0:	mov	r0, #0
   18bd4:	strd	r6, [r4]
   18bd8:	pop	{r4, r5, r6, r7, fp, pc}
   18bdc:	push	{r4, r5, r6, r7, fp, lr}
   18be0:	add	fp, sp, #16
   18be4:	cmp	r2, #0
   18be8:	moveq	r6, #0
   18bec:	moveq	r0, r6
   18bf0:	popeq	{r4, r5, r6, r7, fp, pc}
   18bf4:	mov	r4, r2
   18bf8:	mov	r5, r1
   18bfc:	mov	r7, r0
   18c00:	mov	r6, #0
   18c04:	mov	r0, r7
   18c08:	mov	r1, r5
   18c0c:	bl	18b50 <__assert_fail@plt+0x765c>
   18c10:	orr	r6, r0, r6
   18c14:	subs	r4, r4, #1
   18c18:	bne	18c04 <__assert_fail@plt+0x7710>
   18c1c:	mov	r0, r6
   18c20:	pop	{r4, r5, r6, r7, fp, pc}
   18c24:	clz	r2, r1
   18c28:	lsr	r2, r2, #5
   18c2c:	clz	r3, r0
   18c30:	lsr	r3, r3, #5
   18c34:	orrs	r2, r3, r2
   18c38:	movwne	r1, #1
   18c3c:	movwne	r0, #1
   18c40:	cmp	r1, #0
   18c44:	beq	18c74 <__assert_fail@plt+0x7780>
   18c48:	mvn	r2, #-2147483648	; 0x80000000
   18c4c:	udiv	r2, r2, r1
   18c50:	cmp	r2, r0
   18c54:	bcs	18c74 <__assert_fail@plt+0x7780>
   18c58:	push	{fp, lr}
   18c5c:	mov	fp, sp
   18c60:	bl	113a4 <__errno_location@plt>
   18c64:	mov	r1, #12
   18c68:	str	r1, [r0]
   18c6c:	mov	r0, #0
   18c70:	pop	{fp, pc}
   18c74:	b	111d0 <calloc@plt>
   18c78:	cmp	r0, #0
   18c7c:	movweq	r0, #1
   18c80:	cmn	r0, #1
   18c84:	ble	18c8c <__assert_fail@plt+0x7798>
   18c88:	b	11320 <malloc@plt>
   18c8c:	push	{fp, lr}
   18c90:	mov	fp, sp
   18c94:	bl	113a4 <__errno_location@plt>
   18c98:	mov	r1, #12
   18c9c:	str	r1, [r0]
   18ca0:	mov	r0, #0
   18ca4:	pop	{fp, pc}
   18ca8:	push	{fp, lr}
   18cac:	mov	fp, sp
   18cb0:	cmp	r0, #0
   18cb4:	beq	18cd0 <__assert_fail@plt+0x77dc>
   18cb8:	cmp	r1, #0
   18cbc:	beq	18cdc <__assert_fail@plt+0x77e8>
   18cc0:	cmn	r1, #1
   18cc4:	ble	18ce8 <__assert_fail@plt+0x77f4>
   18cc8:	pop	{fp, lr}
   18ccc:	b	11284 <realloc@plt>
   18cd0:	mov	r0, r1
   18cd4:	pop	{fp, lr}
   18cd8:	b	18c78 <__assert_fail@plt+0x7784>
   18cdc:	bl	12f04 <__assert_fail@plt+0x1a10>
   18ce0:	mov	r0, #0
   18ce4:	pop	{fp, pc}
   18ce8:	bl	113a4 <__errno_location@plt>
   18cec:	mov	r1, #12
   18cf0:	str	r1, [r0]
   18cf4:	mov	r0, #0
   18cf8:	pop	{fp, pc}
   18cfc:	push	{r4, r5, fp, lr}
   18d00:	add	fp, sp, #8
   18d04:	rsb	lr, r2, #64	; 0x40
   18d08:	lsr	ip, r0, lr
   18d0c:	rsb	r3, lr, #32
   18d10:	orr	ip, ip, r1, lsl r3
   18d14:	rsb	r4, r2, #32
   18d18:	cmp	r4, #0
   18d1c:	lsrge	ip, r1, r4
   18d20:	lsl	r3, r0, r2
   18d24:	sub	r5, r2, #32
   18d28:	cmp	r5, #0
   18d2c:	movwge	r3, #0
   18d30:	orr	ip, ip, r3
   18d34:	lsr	r3, r0, r4
   18d38:	orr	r2, r3, r1, lsl r2
   18d3c:	lslge	r2, r0, r5
   18d40:	lsr	r0, r1, lr
   18d44:	cmp	r4, #0
   18d48:	movwge	r0, #0
   18d4c:	orr	r1, r0, r2
   18d50:	mov	r0, ip
   18d54:	pop	{r4, r5, fp, pc}
   18d58:	push	{r4, r5, fp, lr}
   18d5c:	add	fp, sp, #8
   18d60:	lsr	ip, r0, r2
   18d64:	rsb	r3, r2, #32
   18d68:	orr	ip, ip, r1, lsl r3
   18d6c:	sub	lr, r2, #32
   18d70:	cmp	lr, #0
   18d74:	lsrge	ip, r1, lr
   18d78:	rsb	r4, r2, #64	; 0x40
   18d7c:	lsl	r5, r0, r4
   18d80:	cmp	r3, #0
   18d84:	movwge	r5, #0
   18d88:	orr	ip, r5, ip
   18d8c:	rsb	r5, r4, #32
   18d90:	lsr	r5, r0, r5
   18d94:	orr	r4, r5, r1, lsl r4
   18d98:	cmp	r3, #0
   18d9c:	lslge	r4, r0, r3
   18da0:	lsr	r0, r1, r2
   18da4:	cmp	lr, #0
   18da8:	movwge	r0, #0
   18dac:	orr	r1, r4, r0
   18db0:	mov	r0, ip
   18db4:	pop	{r4, r5, fp, pc}
   18db8:	rsb	r1, r1, #32
   18dbc:	ror	r0, r0, r1
   18dc0:	bx	lr
   18dc4:	ror	r0, r0, r1
   18dc8:	bx	lr
   18dcc:	rsb	r1, r1, #32
   18dd0:	ror	r0, r0, r1
   18dd4:	bx	lr
   18dd8:	ror	r0, r0, r1
   18ddc:	bx	lr
   18de0:	and	r2, r1, #15
   18de4:	lsl	r2, r0, r2
   18de8:	rsb	r1, r1, #0
   18dec:	and	r1, r1, #15
   18df0:	orr	r0, r2, r0, lsr r1
   18df4:	uxth	r0, r0
   18df8:	bx	lr
   18dfc:	and	r2, r1, #15
   18e00:	lsr	r2, r0, r2
   18e04:	rsb	r1, r1, #0
   18e08:	and	r1, r1, #15
   18e0c:	orr	r0, r2, r0, lsl r1
   18e10:	uxth	r0, r0
   18e14:	bx	lr
   18e18:	and	r2, r1, #7
   18e1c:	lsl	r2, r0, r2
   18e20:	rsb	r1, r1, #0
   18e24:	and	r1, r1, #7
   18e28:	orr	r0, r2, r0, lsr r1
   18e2c:	uxtb	r0, r0
   18e30:	bx	lr
   18e34:	and	r2, r1, #7
   18e38:	lsr	r2, r0, r2
   18e3c:	rsb	r1, r1, #0
   18e40:	and	r1, r1, #7
   18e44:	orr	r0, r2, r0, lsl r1
   18e48:	uxtb	r0, r0
   18e4c:	bx	lr
   18e50:	mov	r1, r0
   18e54:	sub	r2, r0, #65	; 0x41
   18e58:	mov	r0, #1
   18e5c:	cmp	r2, #26
   18e60:	subcs	r2, r1, #97	; 0x61
   18e64:	cmpcs	r2, #26
   18e68:	bcs	18e70 <__assert_fail@plt+0x797c>
   18e6c:	bx	lr
   18e70:	sub	r1, r1, #48	; 0x30
   18e74:	cmp	r1, #10
   18e78:	movcs	r0, #0
   18e7c:	bx	lr
   18e80:	mov	r1, r0
   18e84:	sub	r2, r0, #65	; 0x41
   18e88:	mov	r0, #1
   18e8c:	cmp	r2, #26
   18e90:	subcs	r1, r1, #97	; 0x61
   18e94:	cmpcs	r1, #26
   18e98:	movcs	r0, #0
   18e9c:	bx	lr
   18ea0:	mov	r1, #0
   18ea4:	cmp	r0, #128	; 0x80
   18ea8:	movwcc	r1, #1
   18eac:	mov	r0, r1
   18eb0:	bx	lr
   18eb4:	sub	r1, r0, #9
   18eb8:	clz	r1, r1
   18ebc:	lsr	r1, r1, #5
   18ec0:	sub	r0, r0, #32
   18ec4:	clz	r0, r0
   18ec8:	lsr	r0, r0, #5
   18ecc:	orr	r0, r0, r1
   18ed0:	bx	lr
   18ed4:	mov	r1, r0
   18ed8:	mov	r0, #1
   18edc:	cmp	r1, #32
   18ee0:	bxcc	lr
   18ee4:	cmp	r1, #127	; 0x7f
   18ee8:	movne	r0, #0
   18eec:	bx	lr
   18ef0:	sub	r1, r0, #48	; 0x30
   18ef4:	mov	r0, #0
   18ef8:	cmp	r1, #10
   18efc:	movwcc	r0, #1
   18f00:	bx	lr
   18f04:	sub	r1, r0, #33	; 0x21
   18f08:	mov	r0, #0
   18f0c:	cmp	r1, #94	; 0x5e
   18f10:	movwcc	r0, #1
   18f14:	bx	lr
   18f18:	sub	r1, r0, #97	; 0x61
   18f1c:	mov	r0, #0
   18f20:	cmp	r1, #26
   18f24:	movwcc	r0, #1
   18f28:	bx	lr
   18f2c:	sub	r1, r0, #32
   18f30:	mov	r0, #0
   18f34:	cmp	r1, #95	; 0x5f
   18f38:	movwcc	r0, #1
   18f3c:	bx	lr
   18f40:	sub	r1, r0, #33	; 0x21
   18f44:	cmp	r1, #93	; 0x5d
   18f48:	bhi	190d4 <__assert_fail@plt+0x7be0>
   18f4c:	mov	r0, #1
   18f50:	add	r2, pc, #0
   18f54:	ldr	pc, [r2, r1, lsl #2]
   18f58:	ldrdeq	r9, [r1], -r0
   18f5c:	ldrdeq	r9, [r1], -r0
   18f60:	ldrdeq	r9, [r1], -r0
   18f64:	ldrdeq	r9, [r1], -r0
   18f68:	ldrdeq	r9, [r1], -r0
   18f6c:	ldrdeq	r9, [r1], -r0
   18f70:	ldrdeq	r9, [r1], -r0
   18f74:	ldrdeq	r9, [r1], -r0
   18f78:	ldrdeq	r9, [r1], -r0
   18f7c:	ldrdeq	r9, [r1], -r0
   18f80:	ldrdeq	r9, [r1], -r0
   18f84:	ldrdeq	r9, [r1], -r0
   18f88:	ldrdeq	r9, [r1], -r0
   18f8c:	ldrdeq	r9, [r1], -r0
   18f90:	ldrdeq	r9, [r1], -r0
   18f94:	ldrdeq	r9, [r1], -r4
   18f98:	ldrdeq	r9, [r1], -r4
   18f9c:	ldrdeq	r9, [r1], -r4
   18fa0:	ldrdeq	r9, [r1], -r4
   18fa4:	ldrdeq	r9, [r1], -r4
   18fa8:	ldrdeq	r9, [r1], -r4
   18fac:	ldrdeq	r9, [r1], -r4
   18fb0:	ldrdeq	r9, [r1], -r4
   18fb4:	ldrdeq	r9, [r1], -r4
   18fb8:	ldrdeq	r9, [r1], -r4
   18fbc:	ldrdeq	r9, [r1], -r0
   18fc0:	ldrdeq	r9, [r1], -r0
   18fc4:	ldrdeq	r9, [r1], -r0
   18fc8:	ldrdeq	r9, [r1], -r0
   18fcc:	ldrdeq	r9, [r1], -r0
   18fd0:	ldrdeq	r9, [r1], -r0
   18fd4:	ldrdeq	r9, [r1], -r0
   18fd8:	ldrdeq	r9, [r1], -r4
   18fdc:	ldrdeq	r9, [r1], -r4
   18fe0:	ldrdeq	r9, [r1], -r4
   18fe4:	ldrdeq	r9, [r1], -r4
   18fe8:	ldrdeq	r9, [r1], -r4
   18fec:	ldrdeq	r9, [r1], -r4
   18ff0:	ldrdeq	r9, [r1], -r4
   18ff4:	ldrdeq	r9, [r1], -r4
   18ff8:	ldrdeq	r9, [r1], -r4
   18ffc:	ldrdeq	r9, [r1], -r4
   19000:	ldrdeq	r9, [r1], -r4
   19004:	ldrdeq	r9, [r1], -r4
   19008:	ldrdeq	r9, [r1], -r4
   1900c:	ldrdeq	r9, [r1], -r4
   19010:	ldrdeq	r9, [r1], -r4
   19014:	ldrdeq	r9, [r1], -r4
   19018:	ldrdeq	r9, [r1], -r4
   1901c:	ldrdeq	r9, [r1], -r4
   19020:	ldrdeq	r9, [r1], -r4
   19024:	ldrdeq	r9, [r1], -r4
   19028:	ldrdeq	r9, [r1], -r4
   1902c:	ldrdeq	r9, [r1], -r4
   19030:	ldrdeq	r9, [r1], -r4
   19034:	ldrdeq	r9, [r1], -r4
   19038:	ldrdeq	r9, [r1], -r4
   1903c:	ldrdeq	r9, [r1], -r4
   19040:	ldrdeq	r9, [r1], -r0
   19044:	ldrdeq	r9, [r1], -r0
   19048:	ldrdeq	r9, [r1], -r0
   1904c:	ldrdeq	r9, [r1], -r0
   19050:	ldrdeq	r9, [r1], -r0
   19054:	ldrdeq	r9, [r1], -r0
   19058:	ldrdeq	r9, [r1], -r4
   1905c:	ldrdeq	r9, [r1], -r4
   19060:	ldrdeq	r9, [r1], -r4
   19064:	ldrdeq	r9, [r1], -r4
   19068:	ldrdeq	r9, [r1], -r4
   1906c:	ldrdeq	r9, [r1], -r4
   19070:	ldrdeq	r9, [r1], -r4
   19074:	ldrdeq	r9, [r1], -r4
   19078:	ldrdeq	r9, [r1], -r4
   1907c:	ldrdeq	r9, [r1], -r4
   19080:	ldrdeq	r9, [r1], -r4
   19084:	ldrdeq	r9, [r1], -r4
   19088:	ldrdeq	r9, [r1], -r4
   1908c:	ldrdeq	r9, [r1], -r4
   19090:	ldrdeq	r9, [r1], -r4
   19094:	ldrdeq	r9, [r1], -r4
   19098:	ldrdeq	r9, [r1], -r4
   1909c:	ldrdeq	r9, [r1], -r4
   190a0:	ldrdeq	r9, [r1], -r4
   190a4:	ldrdeq	r9, [r1], -r4
   190a8:	ldrdeq	r9, [r1], -r4
   190ac:	ldrdeq	r9, [r1], -r4
   190b0:	ldrdeq	r9, [r1], -r4
   190b4:	ldrdeq	r9, [r1], -r4
   190b8:	ldrdeq	r9, [r1], -r4
   190bc:	ldrdeq	r9, [r1], -r4
   190c0:	ldrdeq	r9, [r1], -r0
   190c4:	ldrdeq	r9, [r1], -r0
   190c8:	ldrdeq	r9, [r1], -r0
   190cc:	ldrdeq	r9, [r1], -r0
   190d0:	bx	lr
   190d4:	mov	r0, #0
   190d8:	bx	lr
   190dc:	sub	r0, r0, #9
   190e0:	cmp	r0, #23
   190e4:	movhi	r0, #0
   190e8:	bxhi	lr
   190ec:	bic	r0, r0, #-16777216	; 0xff000000
   190f0:	movw	r1, #31
   190f4:	movt	r1, #128	; 0x80
   190f8:	mov	r2, #1
   190fc:	and	r0, r2, r1, lsr r0
   19100:	bx	lr
   19104:	sub	r1, r0, #65	; 0x41
   19108:	mov	r0, #0
   1910c:	cmp	r1, #26
   19110:	movwcc	r0, #1
   19114:	bx	lr
   19118:	mov	r1, r0
   1911c:	sub	r2, r0, #48	; 0x30
   19120:	mov	r0, #1
   19124:	cmp	r2, #22
   19128:	bhi	19140 <__assert_fail@plt+0x7c4c>
   1912c:	mov	ip, #1
   19130:	movw	r3, #1023	; 0x3ff
   19134:	movt	r3, #126	; 0x7e
   19138:	tst	r3, ip, lsl r2
   1913c:	bxne	lr
   19140:	sub	r1, r1, #97	; 0x61
   19144:	cmp	r1, #6
   19148:	movcs	r0, #0
   1914c:	bxcs	lr
   19150:	bx	lr
   19154:	sub	r1, r0, #65	; 0x41
   19158:	cmp	r1, #26
   1915c:	addcc	r0, r0, #32
   19160:	bx	lr
   19164:	sub	r1, r0, #97	; 0x61
   19168:	cmp	r1, #26
   1916c:	subcc	r0, r0, #32
   19170:	bx	lr
   19174:	push	{r4, r5, r6, sl, fp, lr}
   19178:	add	fp, sp, #16
   1917c:	mov	r4, r0
   19180:	bl	112e4 <__fpending@plt>
   19184:	mov	r5, r0
   19188:	mov	r0, r4
   1918c:	bl	112f0 <ferror_unlocked@plt>
   19190:	mov	r6, r0
   19194:	mov	r0, r4
   19198:	bl	19318 <__assert_fail@plt+0x7e24>
   1919c:	cmp	r6, #0
   191a0:	beq	191c0 <__assert_fail@plt+0x7ccc>
   191a4:	mvn	r4, #0
   191a8:	cmp	r0, #0
   191ac:	bne	191f4 <__assert_fail@plt+0x7d00>
   191b0:	bl	113a4 <__errno_location@plt>
   191b4:	mov	r1, #0
   191b8:	str	r1, [r0]
   191bc:	b	191f4 <__assert_fail@plt+0x7d00>
   191c0:	cmp	r0, #0
   191c4:	mov	r4, r0
   191c8:	mvnne	r4, #0
   191cc:	cmp	r5, #0
   191d0:	bne	191f4 <__assert_fail@plt+0x7d00>
   191d4:	cmp	r0, #0
   191d8:	beq	191f4 <__assert_fail@plt+0x7d00>
   191dc:	bl	113a4 <__errno_location@plt>
   191e0:	ldr	r0, [r0]
   191e4:	subs	r4, r0, #9
   191e8:	mvnne	r4, #0
   191ec:	mov	r0, r4
   191f0:	pop	{r4, r5, r6, sl, fp, pc}
   191f4:	mov	r0, r4
   191f8:	pop	{r4, r5, r6, sl, fp, pc}
   191fc:	mov	r1, #0
   19200:	movw	r2, #62998	; 0xf616
   19204:	movt	r2, #149	; 0x95
   19208:	str	r1, [r0, #16]
   1920c:	str	r1, [r0, #20]
   19210:	str	r2, [r0, #24]
   19214:	bx	lr
   19218:	push	{r4, r5, r6, r7, r9, sl, fp, lr}
   1921c:	add	fp, sp, #24
   19220:	mov	r5, r1
   19224:	mov	r4, r0
   19228:	ldr	r0, [r0, #24]
   1922c:	movw	r1, #62998	; 0xf616
   19230:	movt	r1, #149	; 0x95
   19234:	cmp	r0, r1
   19238:	bne	192d8 <__assert_fail@plt+0x7de4>
   1923c:	mov	r1, r4
   19240:	ldr	r2, [r1, #16]!
   19244:	ldr	r3, [r1, #4]
   19248:	orrs	r0, r2, r3
   1924c:	beq	1928c <__assert_fail@plt+0x7d98>
   19250:	ldm	r4, {r0, r7}
   19254:	ldr	r6, [r5, #96]	; 0x60
   19258:	ldr	r9, [r5, #100]	; 0x64
   1925c:	eor	r7, r9, r7
   19260:	eor	r0, r6, r0
   19264:	orrs	r0, r0, r7
   19268:	bne	1928c <__assert_fail@plt+0x7d98>
   1926c:	ldr	r0, [r4, #8]
   19270:	ldr	r7, [r4, #12]
   19274:	ldm	r5, {r6, r9}
   19278:	eor	r7, r9, r7
   1927c:	eor	r0, r6, r0
   19280:	orrs	r0, r0, r7
   19284:	mov	r0, #1
   19288:	popeq	{r4, r5, r6, r7, r9, sl, fp, pc}
   1928c:	adds	r6, r2, #1
   19290:	adc	r7, r3, #0
   19294:	strd	r6, [r1]
   19298:	mov	r0, r6
   1929c:	mov	r1, r7
   192a0:	bl	192f8 <__assert_fail@plt+0x7e04>
   192a4:	mov	r1, r0
   192a8:	mov	r0, #0
   192ac:	cmp	r1, #0
   192b0:	beq	192d4 <__assert_fail@plt+0x7de0>
   192b4:	orrs	r1, r6, r7
   192b8:	moveq	r0, #1
   192bc:	popeq	{r4, r5, r6, r7, r9, sl, fp, pc}
   192c0:	ldrd	r2, [r5]
   192c4:	str	r3, [r4, #12]
   192c8:	str	r2, [r4, #8]
   192cc:	ldrd	r2, [r5, #96]	; 0x60
   192d0:	stm	r4, {r2, r3}
   192d4:	pop	{r4, r5, r6, r7, r9, sl, fp, pc}
   192d8:	movw	r0, #44911	; 0xaf6f
   192dc:	movt	r0, #1
   192e0:	movw	r1, #44935	; 0xaf87
   192e4:	movt	r1, #1
   192e8:	movw	r3, #44953	; 0xaf99
   192ec:	movt	r3, #1
   192f0:	mov	r2, #60	; 0x3c
   192f4:	bl	114f4 <__assert_fail@plt>
   192f8:	subs	r2, r0, #1
   192fc:	and	r0, r2, r0
   19300:	sbc	r2, r1, #0
   19304:	and	r1, r2, r1
   19308:	orr	r0, r0, r1
   1930c:	clz	r0, r0
   19310:	lsr	r0, r0, #5
   19314:	bx	lr
   19318:	push	{r4, r5, fp, lr}
   1931c:	add	fp, sp, #8
   19320:	sub	sp, sp, #8
   19324:	mov	r4, r0
   19328:	bl	113d4 <fileno@plt>
   1932c:	cmn	r0, #1
   19330:	ble	193a8 <__assert_fail@plt+0x7eb4>
   19334:	mov	r0, r4
   19338:	bl	11338 <__freading@plt>
   1933c:	cmp	r0, #0
   19340:	beq	1936c <__assert_fail@plt+0x7e78>
   19344:	mov	r0, r4
   19348:	bl	113d4 <fileno@plt>
   1934c:	mov	r1, #1
   19350:	str	r1, [sp]
   19354:	mov	r2, #0
   19358:	mov	r3, #0
   1935c:	bl	112cc <lseek64@plt>
   19360:	and	r0, r0, r1
   19364:	cmn	r0, #1
   19368:	beq	193a8 <__assert_fail@plt+0x7eb4>
   1936c:	mov	r0, r4
   19370:	bl	195e4 <__assert_fail@plt+0x80f0>
   19374:	cmp	r0, #0
   19378:	beq	193a8 <__assert_fail@plt+0x7eb4>
   1937c:	bl	113a4 <__errno_location@plt>
   19380:	ldr	r5, [r0]
   19384:	mov	r0, r4
   19388:	bl	113f8 <fclose@plt>
   1938c:	cmp	r5, #0
   19390:	beq	193a0 <__assert_fail@plt+0x7eac>
   19394:	bl	113a4 <__errno_location@plt>
   19398:	str	r5, [r0]
   1939c:	mvn	r0, #0
   193a0:	sub	sp, fp, #8
   193a4:	pop	{r4, r5, fp, pc}
   193a8:	mov	r0, r4
   193ac:	sub	sp, fp, #8
   193b0:	pop	{r4, r5, fp, lr}
   193b4:	b	113f8 <fclose@plt>
   193b8:	sub	sp, sp, #8
   193bc:	push	{fp, lr}
   193c0:	mov	fp, sp
   193c4:	sub	sp, sp, #8
   193c8:	str	r3, [fp, #12]
   193cc:	str	r2, [fp, #8]
   193d0:	add	r2, fp, #8
   193d4:	str	r2, [sp, #4]
   193d8:	cmp	r1, #11
   193dc:	bhi	1941c <__assert_fail@plt+0x7f28>
   193e0:	mov	r2, #1
   193e4:	movw	r3, #1300	; 0x514
   193e8:	tst	r3, r2, lsl r1
   193ec:	bne	1946c <__assert_fail@plt+0x7f78>
   193f0:	movw	r3, #2570	; 0xa0a
   193f4:	tst	r3, r2, lsl r1
   193f8:	bne	19444 <__assert_fail@plt+0x7f50>
   193fc:	cmp	r1, #0
   19400:	bne	1941c <__assert_fail@plt+0x7f28>
   19404:	ldr	r1, [sp, #4]
   19408:	add	r2, r1, #4
   1940c:	str	r2, [sp, #4]
   19410:	ldr	r1, [r1]
   19414:	bl	19490 <__assert_fail@plt+0x7f9c>
   19418:	b	19480 <__assert_fail@plt+0x7f8c>
   1941c:	sub	r2, r1, #1024	; 0x400
   19420:	cmp	r2, #10
   19424:	bhi	1946c <__assert_fail@plt+0x7f78>
   19428:	mov	ip, #1
   1942c:	movw	r3, #645	; 0x285
   19430:	tst	r3, ip, lsl r2
   19434:	bne	1946c <__assert_fail@plt+0x7f78>
   19438:	movw	r3, #1282	; 0x502
   1943c:	tst	r3, ip, lsl r2
   19440:	beq	1944c <__assert_fail@plt+0x7f58>
   19444:	bl	11410 <fcntl64@plt>
   19448:	b	19480 <__assert_fail@plt+0x7f8c>
   1944c:	cmp	r2, #6
   19450:	bne	1946c <__assert_fail@plt+0x7f78>
   19454:	ldr	r1, [sp, #4]
   19458:	add	r2, r1, #4
   1945c:	str	r2, [sp, #4]
   19460:	ldr	r1, [r1]
   19464:	bl	1949c <__assert_fail@plt+0x7fa8>
   19468:	b	19480 <__assert_fail@plt+0x7f8c>
   1946c:	ldr	r2, [sp, #4]
   19470:	add	r3, r2, #4
   19474:	str	r3, [sp, #4]
   19478:	ldr	r2, [r2]
   1947c:	bl	11410 <fcntl64@plt>
   19480:	mov	sp, fp
   19484:	pop	{fp, lr}
   19488:	add	sp, sp, #8
   1948c:	bx	lr
   19490:	mov	r2, r1
   19494:	mov	r1, #0
   19498:	b	11410 <fcntl64@plt>
   1949c:	push	{r4, r5, r6, r7, fp, lr}
   194a0:	add	fp, sp, #16
   194a4:	mov	r5, r1
   194a8:	mov	r6, r0
   194ac:	movw	r7, #49904	; 0xc2f0
   194b0:	movt	r7, #2
   194b4:	ldr	r0, [r7]
   194b8:	cmp	r0, #0
   194bc:	blt	19520 <__assert_fail@plt+0x802c>
   194c0:	mov	r0, r6
   194c4:	movw	r1, #1030	; 0x406
   194c8:	mov	r2, r5
   194cc:	bl	11410 <fcntl64@plt>
   194d0:	mov	r4, r0
   194d4:	cmn	r0, #1
   194d8:	bgt	1950c <__assert_fail@plt+0x8018>
   194dc:	bl	113a4 <__errno_location@plt>
   194e0:	ldr	r0, [r0]
   194e4:	cmp	r0, #22
   194e8:	bne	1950c <__assert_fail@plt+0x8018>
   194ec:	mov	r0, r6
   194f0:	mov	r1, r5
   194f4:	bl	19490 <__assert_fail@plt+0x7f9c>
   194f8:	mov	r4, r0
   194fc:	cmp	r0, #0
   19500:	blt	19570 <__assert_fail@plt+0x807c>
   19504:	mvn	r0, #0
   19508:	b	19510 <__assert_fail@plt+0x801c>
   1950c:	mov	r0, #1
   19510:	str	r0, [r7]
   19514:	cmp	r4, #0
   19518:	bge	19538 <__assert_fail@plt+0x8044>
   1951c:	b	19570 <__assert_fail@plt+0x807c>
   19520:	mov	r0, r6
   19524:	mov	r1, r5
   19528:	bl	19490 <__assert_fail@plt+0x7f9c>
   1952c:	mov	r4, r0
   19530:	cmp	r4, #0
   19534:	blt	19570 <__assert_fail@plt+0x807c>
   19538:	ldr	r0, [r7]
   1953c:	cmn	r0, #1
   19540:	bne	19570 <__assert_fail@plt+0x807c>
   19544:	mov	r0, r4
   19548:	mov	r1, #1
   1954c:	bl	11410 <fcntl64@plt>
   19550:	cmp	r0, #0
   19554:	blt	19578 <__assert_fail@plt+0x8084>
   19558:	orr	r2, r0, #1
   1955c:	mov	r0, r4
   19560:	mov	r1, #2
   19564:	bl	11410 <fcntl64@plt>
   19568:	cmn	r0, #1
   1956c:	beq	19578 <__assert_fail@plt+0x8084>
   19570:	mov	r0, r4
   19574:	pop	{r4, r5, r6, r7, fp, pc}
   19578:	bl	113a4 <__errno_location@plt>
   1957c:	mov	r5, r0
   19580:	ldr	r6, [r0]
   19584:	mov	r0, r4
   19588:	bl	114b8 <close@plt>
   1958c:	str	r6, [r5]
   19590:	mvn	r4, #0
   19594:	mov	r0, r4
   19598:	pop	{r4, r5, r6, r7, fp, pc}
   1959c:	sub	sp, sp, #8
   195a0:	push	{fp, lr}
   195a4:	mov	fp, sp
   195a8:	sub	sp, sp, #8
   195ac:	str	r3, [fp, #12]
   195b0:	str	r2, [fp, #8]
   195b4:	mov	r2, #0
   195b8:	tst	r1, #64	; 0x40
   195bc:	addne	r2, fp, #8
   195c0:	orrne	r2, r2, #4
   195c4:	strne	r2, [sp, #4]
   195c8:	ldrne	r2, [fp, #8]
   195cc:	bl	11314 <open64@plt>
   195d0:	bl	17d78 <__assert_fail@plt+0x6884>
   195d4:	mov	sp, fp
   195d8:	pop	{fp, lr}
   195dc:	add	sp, sp, #8
   195e0:	bx	lr
   195e4:	push	{r4, sl, fp, lr}
   195e8:	add	fp, sp, #8
   195ec:	mov	r4, r0
   195f0:	cmp	r0, #0
   195f4:	beq	1960c <__assert_fail@plt+0x8118>
   195f8:	mov	r0, r4
   195fc:	bl	11338 <__freading@plt>
   19600:	cmp	r0, #0
   19604:	movne	r0, r4
   19608:	blne	19618 <__assert_fail@plt+0x8124>
   1960c:	mov	r0, r4
   19610:	pop	{r4, sl, fp, lr}
   19614:	b	11218 <fflush@plt>
   19618:	ldrb	r1, [r0, #1]
   1961c:	tst	r1, #1
   19620:	bxeq	lr
   19624:	push	{fp, lr}
   19628:	mov	fp, sp
   1962c:	sub	sp, sp, #8
   19630:	mov	r1, #1
   19634:	str	r1, [sp]
   19638:	mov	r2, #0
   1963c:	mov	r3, #0
   19640:	bl	1964c <__assert_fail@plt+0x8158>
   19644:	mov	sp, fp
   19648:	pop	{fp, pc}
   1964c:	push	{r4, r5, r6, r7, fp, lr}
   19650:	add	fp, sp, #16
   19654:	sub	sp, sp, #8
   19658:	mov	r5, r3
   1965c:	mov	r6, r2
   19660:	mov	r4, r0
   19664:	ldr	r0, [r0, #4]
   19668:	ldr	r1, [r4, #8]
   1966c:	cmp	r1, r0
   19670:	bne	1968c <__assert_fail@plt+0x8198>
   19674:	ldrd	r0, [r4, #16]
   19678:	cmp	r1, r0
   1967c:	bne	1968c <__assert_fail@plt+0x8198>
   19680:	ldr	r0, [r4, #36]	; 0x24
   19684:	cmp	r0, #0
   19688:	beq	196a4 <__assert_fail@plt+0x81b0>
   1968c:	mov	r0, r4
   19690:	mov	r2, r6
   19694:	mov	r3, r5
   19698:	sub	sp, fp, #16
   1969c:	pop	{r4, r5, r6, r7, fp, lr}
   196a0:	b	11404 <fseeko64@plt>
   196a4:	ldr	r7, [fp, #8]
   196a8:	mov	r0, r4
   196ac:	bl	113d4 <fileno@plt>
   196b0:	str	r7, [sp]
   196b4:	mov	r2, r6
   196b8:	mov	r3, r5
   196bc:	bl	112cc <lseek64@plt>
   196c0:	and	r2, r0, r1
   196c4:	cmn	r2, #1
   196c8:	mvneq	r0, #0
   196cc:	subeq	sp, fp, #16
   196d0:	popeq	{r4, r5, r6, r7, fp, pc}
   196d4:	strd	r0, [r4, #80]	; 0x50
   196d8:	ldr	r0, [r4]
   196dc:	bic	r0, r0, #16
   196e0:	str	r0, [r4]
   196e4:	mov	r0, #0
   196e8:	sub	sp, fp, #16
   196ec:	pop	{r4, r5, r6, r7, fp, pc}
   196f0:	push	{fp, lr}
   196f4:	mov	fp, sp
   196f8:	bl	113a4 <__errno_location@plt>
   196fc:	mov	r1, #12
   19700:	str	r1, [r0]
   19704:	mov	r0, #0
   19708:	pop	{fp, pc}
   1970c:	b	18c78 <__assert_fail@plt+0x7784>
   19710:	cmp	r1, #0
   19714:	orreq	r1, r1, #1
   19718:	b	18ca8 <__assert_fail@plt+0x77b4>
   1971c:	b	18c24 <__assert_fail@plt+0x7730>
   19720:	clz	r3, r2
   19724:	lsr	ip, r3, #5
   19728:	clz	r3, r1
   1972c:	lsr	r3, r3, #5
   19730:	orrs	r3, r3, ip
   19734:	movwne	r1, #1
   19738:	movwne	r2, #1
   1973c:	b	197d8 <__assert_fail@plt+0x82e4>
   19740:	push	{fp, lr}
   19744:	mov	fp, sp
   19748:	mov	r0, #14
   1974c:	bl	11434 <nl_langinfo@plt>
   19750:	movw	r1, #41364	; 0xa194
   19754:	movt	r1, #1
   19758:	cmp	r0, #0
   1975c:	movne	r1, r0
   19760:	ldrb	r2, [r1]
   19764:	movw	r0, #45020	; 0xafdc
   19768:	movt	r0, #1
   1976c:	cmp	r2, #0
   19770:	movne	r0, r1
   19774:	pop	{fp, pc}
   19778:	push	{r4, r5, r6, r7, fp, lr}
   1977c:	add	fp, sp, #16
   19780:	sub	sp, sp, #8
   19784:	mov	r7, r2
   19788:	mov	r4, r1
   1978c:	add	r5, sp, #4
   19790:	cmp	r0, #0
   19794:	movne	r5, r0
   19798:	mov	r0, r5
   1979c:	bl	112fc <mbrtowc@plt>
   197a0:	mov	r6, r0
   197a4:	cmp	r7, #0
   197a8:	beq	197cc <__assert_fail@plt+0x82d8>
   197ac:	cmn	r6, #2
   197b0:	bcc	197cc <__assert_fail@plt+0x82d8>
   197b4:	mov	r0, #0
   197b8:	bl	19820 <__assert_fail@plt+0x832c>
   197bc:	cmp	r0, #0
   197c0:	ldrbeq	r0, [r4]
   197c4:	streq	r0, [r5]
   197c8:	moveq	r6, #1
   197cc:	mov	r0, r6
   197d0:	sub	sp, fp, #16
   197d4:	pop	{r4, r5, r6, r7, fp, pc}
   197d8:	cmp	r2, #0
   197dc:	beq	1980c <__assert_fail@plt+0x8318>
   197e0:	mvn	r3, #0
   197e4:	udiv	r3, r3, r2
   197e8:	cmp	r3, r1
   197ec:	bcs	1980c <__assert_fail@plt+0x8318>
   197f0:	push	{fp, lr}
   197f4:	mov	fp, sp
   197f8:	bl	113a4 <__errno_location@plt>
   197fc:	mov	r1, #12
   19800:	str	r1, [r0]
   19804:	mov	r0, #0
   19808:	pop	{fp, pc}
   1980c:	mul	r1, r2, r1
   19810:	b	18ca8 <__assert_fail@plt+0x77b4>
   19814:	mov	r1, #0
   19818:	mov	r2, #3
   1981c:	b	193b8 <__assert_fail@plt+0x7ec4>
   19820:	push	{r4, sl, fp, lr}
   19824:	add	fp, sp, #8
   19828:	sub	sp, sp, #264	; 0x108
   1982c:	add	r1, sp, #7
   19830:	movw	r2, #257	; 0x101
   19834:	bl	19884 <__assert_fail@plt+0x8390>
   19838:	mov	r4, #0
   1983c:	cmp	r0, #0
   19840:	bne	19878 <__assert_fail@plt+0x8384>
   19844:	add	r0, sp, #7
   19848:	movw	r1, #45026	; 0xafe2
   1984c:	movt	r1, #1
   19850:	bl	11200 <strcmp@plt>
   19854:	cmp	r0, #0
   19858:	beq	19878 <__assert_fail@plt+0x8384>
   1985c:	add	r0, sp, #7
   19860:	movw	r1, #45028	; 0xafe4
   19864:	movt	r1, #1
   19868:	bl	11200 <strcmp@plt>
   1986c:	mov	r4, r0
   19870:	cmp	r0, #0
   19874:	movwne	r4, #1
   19878:	mov	r0, r4
   1987c:	sub	sp, fp, #8
   19880:	pop	{r4, sl, fp, pc}
   19884:	b	19888 <__assert_fail@plt+0x8394>
   19888:	push	{r4, r5, r6, r7, fp, lr}
   1988c:	add	fp, sp, #16
   19890:	mov	r6, r2
   19894:	mov	r4, r1
   19898:	bl	19924 <__assert_fail@plt+0x8430>
   1989c:	cmp	r0, #0
   198a0:	beq	198d0 <__assert_fail@plt+0x83dc>
   198a4:	mov	r7, r0
   198a8:	bl	11374 <strlen@plt>
   198ac:	cmp	r0, r6
   198b0:	bcs	198f0 <__assert_fail@plt+0x83fc>
   198b4:	add	r2, r0, #1
   198b8:	mov	r0, r4
   198bc:	mov	r1, r7
   198c0:	bl	11248 <memcpy@plt>
   198c4:	mov	r5, #0
   198c8:	mov	r0, r5
   198cc:	pop	{r4, r5, r6, r7, fp, pc}
   198d0:	mov	r5, #22
   198d4:	cmp	r6, #0
   198d8:	movne	r0, #0
   198dc:	strbne	r0, [r4]
   198e0:	movne	r0, r5
   198e4:	popne	{r4, r5, r6, r7, fp, pc}
   198e8:	mov	r0, r5
   198ec:	pop	{r4, r5, r6, r7, fp, pc}
   198f0:	mov	r5, #34	; 0x22
   198f4:	cmp	r6, #0
   198f8:	beq	19918 <__assert_fail@plt+0x8424>
   198fc:	sub	r6, r6, #1
   19900:	mov	r0, r4
   19904:	mov	r1, r7
   19908:	mov	r2, r6
   1990c:	bl	11248 <memcpy@plt>
   19910:	mov	r0, #0
   19914:	strb	r0, [r4, r6]
   19918:	mov	r0, r5
   1991c:	pop	{r4, r5, r6, r7, fp, pc}
   19920:	b	19924 <__assert_fail@plt+0x8430>
   19924:	mov	r1, #0
   19928:	b	1141c <setlocale@plt>
   1992c:	cmp	r3, #0
   19930:	cmpeq	r2, #0
   19934:	bne	1994c <__assert_fail@plt+0x8458>
   19938:	cmp	r1, #0
   1993c:	cmpeq	r0, #0
   19940:	mvnne	r1, #0
   19944:	mvnne	r0, #0
   19948:	b	19968 <__assert_fail@plt+0x8474>
   1994c:	sub	sp, sp, #8
   19950:	push	{sp, lr}
   19954:	bl	19978 <__assert_fail@plt+0x8484>
   19958:	ldr	lr, [sp, #4]
   1995c:	add	sp, sp, #8
   19960:	pop	{r2, r3}
   19964:	bx	lr
   19968:	push	{r1, lr}
   1996c:	mov	r0, #8
   19970:	bl	111f4 <raise@plt>
   19974:	pop	{r1, pc}
   19978:	cmp	r1, r3
   1997c:	cmpeq	r0, r2
   19980:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19984:	mov	r4, r0
   19988:	movcc	r0, #0
   1998c:	mov	r5, r1
   19990:	ldr	lr, [sp, #36]	; 0x24
   19994:	movcc	r1, r0
   19998:	bcc	19a94 <__assert_fail@plt+0x85a0>
   1999c:	cmp	r3, #0
   199a0:	clzeq	ip, r2
   199a4:	clzne	ip, r3
   199a8:	addeq	ip, ip, #32
   199ac:	cmp	r5, #0
   199b0:	clzeq	r1, r4
   199b4:	addeq	r1, r1, #32
   199b8:	clzne	r1, r5
   199bc:	sub	ip, ip, r1
   199c0:	sub	sl, ip, #32
   199c4:	lsl	r9, r3, ip
   199c8:	rsb	fp, ip, #32
   199cc:	orr	r9, r9, r2, lsl sl
   199d0:	orr	r9, r9, r2, lsr fp
   199d4:	lsl	r8, r2, ip
   199d8:	cmp	r5, r9
   199dc:	cmpeq	r4, r8
   199e0:	movcc	r0, #0
   199e4:	movcc	r1, r0
   199e8:	bcc	19a04 <__assert_fail@plt+0x8510>
   199ec:	mov	r0, #1
   199f0:	subs	r4, r4, r8
   199f4:	lsl	r1, r0, sl
   199f8:	orr	r1, r1, r0, lsr fp
   199fc:	lsl	r0, r0, ip
   19a00:	sbc	r5, r5, r9
   19a04:	cmp	ip, #0
   19a08:	beq	19a94 <__assert_fail@plt+0x85a0>
   19a0c:	lsr	r6, r8, #1
   19a10:	orr	r6, r6, r9, lsl #31
   19a14:	lsr	r7, r9, #1
   19a18:	mov	r2, ip
   19a1c:	b	19a40 <__assert_fail@plt+0x854c>
   19a20:	subs	r3, r4, r6
   19a24:	sbc	r8, r5, r7
   19a28:	adds	r3, r3, r3
   19a2c:	adc	r8, r8, r8
   19a30:	adds	r4, r3, #1
   19a34:	adc	r5, r8, #0
   19a38:	subs	r2, r2, #1
   19a3c:	beq	19a5c <__assert_fail@plt+0x8568>
   19a40:	cmp	r5, r7
   19a44:	cmpeq	r4, r6
   19a48:	bcs	19a20 <__assert_fail@plt+0x852c>
   19a4c:	adds	r4, r4, r4
   19a50:	adc	r5, r5, r5
   19a54:	subs	r2, r2, #1
   19a58:	bne	19a40 <__assert_fail@plt+0x854c>
   19a5c:	lsr	r3, r4, ip
   19a60:	orr	r3, r3, r5, lsl fp
   19a64:	lsr	r2, r5, ip
   19a68:	orr	r3, r3, r5, lsr sl
   19a6c:	adds	r0, r0, r4
   19a70:	mov	r4, r3
   19a74:	lsl	r3, r2, ip
   19a78:	orr	r3, r3, r4, lsl sl
   19a7c:	lsl	ip, r4, ip
   19a80:	orr	r3, r3, r4, lsr fp
   19a84:	adc	r1, r1, r5
   19a88:	subs	r0, r0, ip
   19a8c:	mov	r5, r2
   19a90:	sbc	r1, r1, r3
   19a94:	cmp	lr, #0
   19a98:	strdne	r4, [lr]
   19a9c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19aa0:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   19aa4:	mov	r7, r0
   19aa8:	ldr	r6, [pc, #72]	; 19af8 <__assert_fail@plt+0x8604>
   19aac:	ldr	r5, [pc, #72]	; 19afc <__assert_fail@plt+0x8608>
   19ab0:	add	r6, pc, r6
   19ab4:	add	r5, pc, r5
   19ab8:	sub	r6, r6, r5
   19abc:	mov	r8, r1
   19ac0:	mov	r9, r2
   19ac4:	bl	111a4 <fstatfs64@plt-0x20>
   19ac8:	asrs	r6, r6, #2
   19acc:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   19ad0:	mov	r4, #0
   19ad4:	add	r4, r4, #1
   19ad8:	ldr	r3, [r5], #4
   19adc:	mov	r2, r9
   19ae0:	mov	r1, r8
   19ae4:	mov	r0, r7
   19ae8:	blx	r3
   19aec:	cmp	r6, r4
   19af0:	bne	19ad4 <__assert_fail@plt+0x85e0>
   19af4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   19af8:	andeq	r2, r1, r4, asr r4
   19afc:	andeq	r2, r1, ip, asr #8
   19b00:	bx	lr
   19b04:	ldr	r3, [pc, #12]	; 19b18 <__assert_fail@plt+0x8624>
   19b08:	mov	r1, #0
   19b0c:	add	r3, pc, r3
   19b10:	ldr	r2, [r3]
   19b14:	b	113b0 <__cxa_atexit@plt>
   19b18:	andeq	r2, r1, r8, lsl r6
   19b1c:	mov	r2, r1
   19b20:	mov	r1, r0
   19b24:	mov	r0, #3
   19b28:	b	11494 <__xstat64@plt>
   19b2c:	mov	r2, r1
   19b30:	mov	r1, r0
   19b34:	mov	r0, #3
   19b38:	b	112b4 <__fxstat64@plt>
   19b3c:	mov	r2, r1
   19b40:	mov	r1, r0
   19b44:	mov	r0, #3
   19b48:	b	114c4 <__lxstat64@plt>
   19b4c:	push	{lr}		; (str lr, [sp, #-4]!)
   19b50:	sub	sp, sp, #12
   19b54:	str	r3, [sp]
   19b58:	mov	r3, r2
   19b5c:	mov	r2, r1
   19b60:	mov	r1, r0
   19b64:	mov	r0, #3
   19b68:	bl	1129c <__fxstatat64@plt>
   19b6c:	add	sp, sp, #12
   19b70:	pop	{pc}		; (ldr pc, [sp], #4)

Disassembly of section .fini:

00019b74 <.fini>:
   19b74:	push	{r3, lr}
   19b78:	pop	{r3, pc}
