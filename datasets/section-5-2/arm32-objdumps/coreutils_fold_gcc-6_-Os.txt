
../repos/coreutils/src/fold:     file format elf32-littlearm


Disassembly of section .init:

00010cd4 <.init>:
   10cd4:	push	{r3, lr}
   10cd8:	bl	111f8 <__assert_fail@plt+0x288>
   10cdc:	pop	{r3, pc}

Disassembly of section .plt:

00010ce0 <calloc@plt-0x14>:
   10ce0:	push	{lr}		; (str lr, [sp, #-4]!)
   10ce4:	ldr	lr, [pc, #4]	; 10cf0 <calloc@plt-0x4>
   10ce8:	add	lr, pc, lr
   10cec:	ldr	pc, [lr, #8]!
   10cf0:	andeq	r5, r1, r0, lsl r3

00010cf4 <calloc@plt>:
   10cf4:	add	ip, pc, #0, 12
   10cf8:	add	ip, ip, #86016	; 0x15000
   10cfc:	ldr	pc, [ip, #784]!	; 0x310

00010d00 <fputs_unlocked@plt>:
   10d00:	add	ip, pc, #0, 12
   10d04:	add	ip, ip, #86016	; 0x15000
   10d08:	ldr	pc, [ip, #776]!	; 0x308

00010d0c <raise@plt>:
   10d0c:	add	ip, pc, #0, 12
   10d10:	add	ip, ip, #86016	; 0x15000
   10d14:	ldr	pc, [ip, #768]!	; 0x300

00010d18 <strcmp@plt>:
   10d18:	add	ip, pc, #0, 12
   10d1c:	add	ip, ip, #86016	; 0x15000
   10d20:	ldr	pc, [ip, #760]!	; 0x2f8

00010d24 <posix_fadvise64@plt>:
   10d24:	add	ip, pc, #0, 12
   10d28:	add	ip, ip, #86016	; 0x15000
   10d2c:	ldr	pc, [ip, #752]!	; 0x2f0

00010d30 <fflush@plt>:
   10d30:	add	ip, pc, #0, 12
   10d34:	add	ip, ip, #86016	; 0x15000
   10d38:	ldr	pc, [ip, #744]!	; 0x2e8

00010d3c <memmove@plt>:
   10d3c:	add	ip, pc, #0, 12
   10d40:	add	ip, ip, #86016	; 0x15000
   10d44:	ldr	pc, [ip, #736]!	; 0x2e0

00010d48 <free@plt>:
   10d48:	add	ip, pc, #0, 12
   10d4c:	add	ip, ip, #86016	; 0x15000
   10d50:	ldr	pc, [ip, #728]!	; 0x2d8

00010d54 <_exit@plt>:
   10d54:	add	ip, pc, #0, 12
   10d58:	add	ip, ip, #86016	; 0x15000
   10d5c:	ldr	pc, [ip, #720]!	; 0x2d0

00010d60 <memcpy@plt>:
   10d60:	add	ip, pc, #0, 12
   10d64:	add	ip, ip, #86016	; 0x15000
   10d68:	ldr	pc, [ip, #712]!	; 0x2c8

00010d6c <mbsinit@plt>:
   10d6c:	add	ip, pc, #0, 12
   10d70:	add	ip, ip, #86016	; 0x15000
   10d74:	ldr	pc, [ip, #704]!	; 0x2c0

00010d78 <fwrite_unlocked@plt>:
   10d78:	add	ip, pc, #0, 12
   10d7c:	add	ip, ip, #86016	; 0x15000
   10d80:	ldr	pc, [ip, #696]!	; 0x2b8

00010d84 <memcmp@plt>:
   10d84:	add	ip, pc, #0, 12
   10d88:	add	ip, ip, #86016	; 0x15000
   10d8c:	ldr	pc, [ip, #688]!	; 0x2b0

00010d90 <fputc_unlocked@plt>:
   10d90:	add	ip, pc, #0, 12
   10d94:	add	ip, ip, #86016	; 0x15000
   10d98:	ldr	pc, [ip, #680]!	; 0x2a8

00010d9c <getc_unlocked@plt>:
   10d9c:	add	ip, pc, #0, 12
   10da0:	add	ip, ip, #86016	; 0x15000
   10da4:	ldr	pc, [ip, #672]!	; 0x2a0

00010da8 <dcgettext@plt>:
   10da8:	add	ip, pc, #0, 12
   10dac:	add	ip, ip, #86016	; 0x15000
   10db0:	ldr	pc, [ip, #664]!	; 0x298

00010db4 <realloc@plt>:
   10db4:	add	ip, pc, #0, 12
   10db8:	add	ip, ip, #86016	; 0x15000
   10dbc:	ldr	pc, [ip, #656]!	; 0x290

00010dc0 <textdomain@plt>:
   10dc0:	add	ip, pc, #0, 12
   10dc4:	add	ip, ip, #86016	; 0x15000
   10dc8:	ldr	pc, [ip, #648]!	; 0x288

00010dcc <iswprint@plt>:
   10dcc:	add	ip, pc, #0, 12
   10dd0:	add	ip, ip, #86016	; 0x15000
   10dd4:	ldr	pc, [ip, #640]!	; 0x280

00010dd8 <lseek64@plt>:
   10dd8:	add	ip, pc, #0, 12
   10ddc:	add	ip, ip, #86016	; 0x15000
   10de0:	ldr	pc, [ip, #632]!	; 0x278

00010de4 <__ctype_get_mb_cur_max@plt>:
   10de4:	add	ip, pc, #0, 12
   10de8:	add	ip, ip, #86016	; 0x15000
   10dec:	ldr	pc, [ip, #624]!	; 0x270

00010df0 <__fpending@plt>:
   10df0:	add	ip, pc, #0, 12
   10df4:	add	ip, ip, #86016	; 0x15000
   10df8:	ldr	pc, [ip, #616]!	; 0x268

00010dfc <ferror_unlocked@plt>:
   10dfc:	add	ip, pc, #0, 12
   10e00:	add	ip, ip, #86016	; 0x15000
   10e04:	ldr	pc, [ip, #608]!	; 0x260

00010e08 <mbrtowc@plt>:
   10e08:	add	ip, pc, #0, 12
   10e0c:	add	ip, ip, #86016	; 0x15000
   10e10:	ldr	pc, [ip, #600]!	; 0x258

00010e14 <error@plt>:
   10e14:	add	ip, pc, #0, 12
   10e18:	add	ip, ip, #86016	; 0x15000
   10e1c:	ldr	pc, [ip, #592]!	; 0x250

00010e20 <malloc@plt>:
   10e20:	add	ip, pc, #0, 12
   10e24:	add	ip, ip, #86016	; 0x15000
   10e28:	ldr	pc, [ip, #584]!	; 0x248

00010e2c <__libc_start_main@plt>:
   10e2c:	add	ip, pc, #0, 12
   10e30:	add	ip, ip, #86016	; 0x15000
   10e34:	ldr	pc, [ip, #576]!	; 0x240

00010e38 <__freading@plt>:
   10e38:	add	ip, pc, #0, 12
   10e3c:	add	ip, ip, #86016	; 0x15000
   10e40:	ldr	pc, [ip, #568]!	; 0x238

00010e44 <__gmon_start__@plt>:
   10e44:	add	ip, pc, #0, 12
   10e48:	add	ip, ip, #86016	; 0x15000
   10e4c:	ldr	pc, [ip, #560]!	; 0x230

00010e50 <getopt_long@plt>:
   10e50:	add	ip, pc, #0, 12
   10e54:	add	ip, ip, #86016	; 0x15000
   10e58:	ldr	pc, [ip, #552]!	; 0x228

00010e5c <__ctype_b_loc@plt>:
   10e5c:	add	ip, pc, #0, 12
   10e60:	add	ip, ip, #86016	; 0x15000
   10e64:	ldr	pc, [ip, #544]!	; 0x220

00010e68 <exit@plt>:
   10e68:	add	ip, pc, #0, 12
   10e6c:	add	ip, ip, #86016	; 0x15000
   10e70:	ldr	pc, [ip, #536]!	; 0x218

00010e74 <strlen@plt>:
   10e74:	add	ip, pc, #0, 12
   10e78:	add	ip, ip, #86016	; 0x15000
   10e7c:	ldr	pc, [ip, #528]!	; 0x210

00010e80 <strchr@plt>:
   10e80:	add	ip, pc, #0, 12
   10e84:	add	ip, ip, #86016	; 0x15000
   10e88:	ldr	pc, [ip, #520]!	; 0x208

00010e8c <__errno_location@plt>:
   10e8c:	add	ip, pc, #0, 12
   10e90:	add	ip, ip, #86016	; 0x15000
   10e94:	ldr	pc, [ip, #512]!	; 0x200

00010e98 <__cxa_atexit@plt>:
   10e98:	add	ip, pc, #0, 12
   10e9c:	add	ip, ip, #86016	; 0x15000
   10ea0:	ldr	pc, [ip, #504]!	; 0x1f8

00010ea4 <memset@plt>:
   10ea4:	add	ip, pc, #0, 12
   10ea8:	add	ip, ip, #86016	; 0x15000
   10eac:	ldr	pc, [ip, #496]!	; 0x1f0

00010eb0 <__printf_chk@plt>:
   10eb0:	add	ip, pc, #0, 12
   10eb4:	add	ip, ip, #86016	; 0x15000
   10eb8:	ldr	pc, [ip, #488]!	; 0x1e8

00010ebc <fileno@plt>:
   10ebc:	add	ip, pc, #0, 12
   10ec0:	add	ip, ip, #86016	; 0x15000
   10ec4:	ldr	pc, [ip, #480]!	; 0x1e0

00010ec8 <strtoumax@plt>:
   10ec8:	add	ip, pc, #0, 12
   10ecc:	add	ip, ip, #86016	; 0x15000
   10ed0:	ldr	pc, [ip, #472]!	; 0x1d8

00010ed4 <__fprintf_chk@plt>:
   10ed4:	add	ip, pc, #0, 12
   10ed8:	add	ip, ip, #86016	; 0x15000
   10edc:	ldr	pc, [ip, #464]!	; 0x1d0

00010ee0 <fclose@plt>:
   10ee0:	add	ip, pc, #0, 12
   10ee4:	add	ip, ip, #86016	; 0x15000
   10ee8:	ldr	pc, [ip, #456]!	; 0x1c8

00010eec <fseeko64@plt>:
   10eec:	add	ip, pc, #0, 12
   10ef0:	add	ip, ip, #86016	; 0x15000
   10ef4:	ldr	pc, [ip, #448]!	; 0x1c0

00010ef8 <setlocale@plt>:
   10ef8:	add	ip, pc, #0, 12
   10efc:	add	ip, ip, #86016	; 0x15000
   10f00:	ldr	pc, [ip, #440]!	; 0x1b8

00010f04 <strrchr@plt>:
   10f04:	add	ip, pc, #0, 12
   10f08:	add	ip, ip, #86016	; 0x15000
   10f0c:	ldr	pc, [ip, #432]!	; 0x1b0

00010f10 <nl_langinfo@plt>:
   10f10:	add	ip, pc, #0, 12
   10f14:	add	ip, ip, #86016	; 0x15000
   10f18:	ldr	pc, [ip, #424]!	; 0x1a8

00010f1c <clearerr_unlocked@plt>:
   10f1c:	add	ip, pc, #0, 12
   10f20:	add	ip, ip, #86016	; 0x15000
   10f24:	ldr	pc, [ip, #416]!	; 0x1a0

00010f28 <fopen64@plt>:
   10f28:	add	ip, pc, #0, 12
   10f2c:	add	ip, ip, #86016	; 0x15000
   10f30:	ldr	pc, [ip, #408]!	; 0x198

00010f34 <bindtextdomain@plt>:
   10f34:	add	ip, pc, #0, 12
   10f38:	add	ip, ip, #86016	; 0x15000
   10f3c:	ldr	pc, [ip, #400]!	; 0x190

00010f40 <fputs@plt>:
   10f40:	add	ip, pc, #0, 12
   10f44:	add	ip, ip, #86016	; 0x15000
   10f48:	ldr	pc, [ip, #392]!	; 0x188

00010f4c <strncmp@plt>:
   10f4c:	add	ip, pc, #0, 12
   10f50:	add	ip, ip, #86016	; 0x15000
   10f54:	ldr	pc, [ip, #384]!	; 0x180

00010f58 <abort@plt>:
   10f58:	add	ip, pc, #0, 12
   10f5c:	add	ip, ip, #86016	; 0x15000
   10f60:	ldr	pc, [ip, #376]!	; 0x178

00010f64 <putchar_unlocked@plt>:
   10f64:	add	ip, pc, #0, 12
   10f68:	add	ip, ip, #86016	; 0x15000
   10f6c:	ldr	pc, [ip, #368]!	; 0x170

00010f70 <__assert_fail@plt>:
   10f70:	add	ip, pc, #0, 12
   10f74:	add	ip, ip, #86016	; 0x15000
   10f78:	ldr	pc, [ip, #360]!	; 0x168

Disassembly of section .text:

00010f7c <.text>:
   10f7c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   10f80:	mov	r7, r0
   10f84:	sub	sp, sp, #32
   10f88:	ldr	r0, [r1]
   10f8c:	mov	r9, r1
   10f90:	bl	11b44 <__assert_fail@plt+0xbd4>
   10f94:	ldr	r1, [pc, #480]	; 1117c <__assert_fail@plt+0x20c>
   10f98:	mov	r0, #6
   10f9c:	bl	10ef8 <setlocale@plt>
   10fa0:	ldr	r1, [pc, #472]	; 11180 <__assert_fail@plt+0x210>
   10fa4:	ldr	r0, [pc, #472]	; 11184 <__assert_fail@plt+0x214>
   10fa8:	bl	10f34 <bindtextdomain@plt>
   10fac:	ldr	r4, [pc, #468]	; 11188 <__assert_fail@plt+0x218>
   10fb0:	ldr	r0, [pc, #460]	; 11184 <__assert_fail@plt+0x214>
   10fb4:	ldr	r6, [pc, #464]	; 1118c <__assert_fail@plt+0x21c>
   10fb8:	ldr	sl, [pc, #444]	; 1117c <__assert_fail@plt+0x20c>
   10fbc:	bl	10dc0 <textdomain@plt>
   10fc0:	mov	r8, #80	; 0x50
   10fc4:	ldr	r0, [pc, #452]	; 11190 <__assert_fail@plt+0x220>
   10fc8:	bl	14a14 <__assert_fail@plt+0x3aa4>
   10fcc:	mov	r3, #0
   10fd0:	strb	r3, [r4, #1]
   10fd4:	strb	r3, [r4]
   10fd8:	strb	r3, [r4, #12]
   10fdc:	ldr	r3, [pc, #432]	; 11194 <__assert_fail@plt+0x224>
   10fe0:	mov	r5, #0
   10fe4:	str	r5, [sp]
   10fe8:	add	r2, r3, #96	; 0x60
   10fec:	mov	r1, r9
   10ff0:	mov	r0, r7
   10ff4:	bl	10e50 <getopt_long@plt>
   10ff8:	cmn	r0, #1
   10ffc:	bne	11058 <__assert_fail@plt+0xe8>
   11000:	ldr	r3, [pc, #400]	; 11198 <__assert_fail@plt+0x228>
   11004:	ldr	r6, [r3]
   11008:	cmp	r7, r6
   1100c:	movne	r5, #1
   11010:	bne	11160 <__assert_fail@plt+0x1f0>
   11014:	mov	r1, r8
   11018:	ldr	r0, [pc, #380]	; 1119c <__assert_fail@plt+0x22c>
   1101c:	bl	11338 <__assert_fail@plt+0x3c8>
   11020:	mov	r5, r0
   11024:	ldrb	r3, [r4, #1]
   11028:	cmp	r3, #0
   1102c:	beq	1116c <__assert_fail@plt+0x1fc>
   11030:	ldr	r3, [pc, #360]	; 111a0 <__assert_fail@plt+0x230>
   11034:	ldr	r0, [r3]
   11038:	bl	119b8 <__assert_fail@plt+0xa48>
   1103c:	cmn	r0, #1
   11040:	bne	1116c <__assert_fail@plt+0x1fc>
   11044:	bl	10e8c <__errno_location@plt>
   11048:	ldr	r2, [pc, #332]	; 1119c <__assert_fail@plt+0x22c>
   1104c:	ldr	r1, [r0]
   11050:	mov	r0, #1
   11054:	bl	10e14 <error@plt>
   11058:	cmp	r0, #57	; 0x39
   1105c:	bgt	11084 <__assert_fail@plt+0x114>
   11060:	cmp	r0, #48	; 0x30
   11064:	bge	110b4 <__assert_fail@plt+0x144>
   11068:	cmn	r0, #3
   1106c:	beq	11118 <__assert_fail@plt+0x1a8>
   11070:	cmn	r0, #2
   11074:	moveq	r0, r5
   11078:	beq	11080 <__assert_fail@plt+0x110>
   1107c:	mov	r0, #1
   11080:	bl	11600 <__assert_fail@plt+0x690>
   11084:	cmp	r0, #115	; 0x73
   11088:	beq	110a8 <__assert_fail@plt+0x138>
   1108c:	cmp	r0, #119	; 0x77
   11090:	beq	110d0 <__assert_fail@plt+0x160>
   11094:	cmp	r0, #98	; 0x62
   11098:	bne	1107c <__assert_fail@plt+0x10c>
   1109c:	mov	r3, #1
   110a0:	strb	r3, [r4]
   110a4:	b	10fdc <__assert_fail@plt+0x6c>
   110a8:	mov	r3, #1
   110ac:	strb	r3, [r4, #12]
   110b0:	b	10fdc <__assert_fail@plt+0x6c>
   110b4:	ldr	r3, [r6]
   110b8:	cmp	r3, #0
   110bc:	subne	r3, r3, #1
   110c0:	strbeq	r3, [sp, #29]
   110c4:	addeq	r3, sp, #28
   110c8:	strbeq	r0, [sp, #28]
   110cc:	str	r3, [r6]
   110d0:	mov	r2, #5
   110d4:	ldr	r1, [pc, #200]	; 111a4 <__assert_fail@plt+0x234>
   110d8:	mov	r0, #0
   110dc:	ldr	r5, [r6]
   110e0:	bl	10da8 <dcgettext@plt>
   110e4:	mov	r3, #0
   110e8:	str	r3, [sp, #16]
   110ec:	mvn	r2, #9
   110f0:	mov	r3, #0
   110f4:	str	sl, [sp, #8]
   110f8:	strd	r2, [sp]
   110fc:	mov	r2, #1
   11100:	mov	r3, #0
   11104:	str	r0, [sp, #12]
   11108:	mov	r0, r5
   1110c:	bl	13c8c <__assert_fail@plt+0x2d1c>
   11110:	mov	r8, r0
   11114:	b	10fdc <__assert_fail@plt+0x6c>
   11118:	ldr	r3, [pc, #136]	; 111a8 <__assert_fail@plt+0x238>
   1111c:	ldr	r0, [pc, #136]	; 111ac <__assert_fail@plt+0x23c>
   11120:	str	r3, [sp]
   11124:	ldr	r3, [pc, #132]	; 111b0 <__assert_fail@plt+0x240>
   11128:	str	r5, [sp, #4]
   1112c:	ldr	r2, [pc, #128]	; 111b4 <__assert_fail@plt+0x244>
   11130:	ldr	r0, [r0]
   11134:	ldr	r3, [r3]
   11138:	ldr	r1, [pc, #120]	; 111b8 <__assert_fail@plt+0x248>
   1113c:	bl	135c4 <__assert_fail@plt+0x2654>
   11140:	mov	r0, r5
   11144:	bl	10e68 <exit@plt>
   11148:	ldr	r0, [r9, r6, lsl #2]
   1114c:	mov	r1, r8
   11150:	bl	11338 <__assert_fail@plt+0x3c8>
   11154:	add	r6, r6, #1
   11158:	and	r5, r5, r0
   1115c:	uxtb	r5, r5
   11160:	cmp	r6, r7
   11164:	blt	11148 <__assert_fail@plt+0x1d8>
   11168:	b	11024 <__assert_fail@plt+0xb4>
   1116c:	eor	r0, r5, #1
   11170:	uxtb	r0, r0
   11174:	add	sp, sp, #32
   11178:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1117c:	ldrdeq	r4, [r1], -sl
   11180:	ldrdeq	r4, [r1], -fp
   11184:	andeq	r4, r1, r8, lsr sp
   11188:	andeq	r6, r2, r0, ror #2
   1118c:	andeq	r6, r2, r8, asr r1
   11190:	muleq	r1, r8, r8
   11194:	andeq	r4, r1, r0, ror sl
   11198:	andeq	r6, r2, r0, asr #2
   1119c:	andeq	r4, r1, r0, lsl #30
   111a0:	andeq	r6, r2, r0, asr r1
   111a4:	strdeq	r4, [r1], -r3
   111a8:	andeq	r4, r1, sp, lsl #28
   111ac:	andeq	r6, r2, r4, asr r1
   111b0:	strdeq	r6, [r2], -r0
   111b4:	andeq	r4, r1, r4, lsr sp
   111b8:	strdeq	r4, [r1], -r3
   111bc:	mov	fp, #0
   111c0:	mov	lr, #0
   111c4:	pop	{r1}		; (ldr r1, [sp], #4)
   111c8:	mov	r2, sp
   111cc:	push	{r2}		; (str r2, [sp, #-4]!)
   111d0:	push	{r0}		; (str r0, [sp, #-4]!)
   111d4:	ldr	ip, [pc, #16]	; 111ec <__assert_fail@plt+0x27c>
   111d8:	push	{ip}		; (str ip, [sp, #-4]!)
   111dc:	ldr	r0, [pc, #12]	; 111f0 <__assert_fail@plt+0x280>
   111e0:	ldr	r3, [pc, #12]	; 111f4 <__assert_fail@plt+0x284>
   111e4:	bl	10e2c <__libc_start_main@plt>
   111e8:	bl	10f58 <abort@plt>
   111ec:	andeq	r4, r1, r0, lsl sl
   111f0:	andeq	r0, r1, ip, ror pc
   111f4:			; <UNDEFINED> instruction: 0x000149b0
   111f8:	ldr	r3, [pc, #20]	; 11214 <__assert_fail@plt+0x2a4>
   111fc:	ldr	r2, [pc, #20]	; 11218 <__assert_fail@plt+0x2a8>
   11200:	add	r3, pc, r3
   11204:	ldr	r2, [r3, r2]
   11208:	cmp	r2, #0
   1120c:	bxeq	lr
   11210:	b	10e44 <__gmon_start__@plt>
   11214:	strdeq	r4, [r1], -r8
   11218:	andeq	r0, r0, r4, ror #1
   1121c:	ldr	r3, [pc, #28]	; 11240 <__assert_fail@plt+0x2d0>
   11220:	ldr	r0, [pc, #28]	; 11244 <__assert_fail@plt+0x2d4>
   11224:	sub	r3, r3, r0
   11228:	cmp	r3, #6
   1122c:	bxls	lr
   11230:	ldr	r3, [pc, #16]	; 11248 <__assert_fail@plt+0x2d8>
   11234:	cmp	r3, #0
   11238:	bxeq	lr
   1123c:	bx	r3
   11240:	andeq	r6, r2, fp, lsr r1
   11244:	andeq	r6, r2, r8, lsr r1
   11248:	andeq	r0, r0, r0
   1124c:	ldr	r1, [pc, #36]	; 11278 <__assert_fail@plt+0x308>
   11250:	ldr	r0, [pc, #36]	; 1127c <__assert_fail@plt+0x30c>
   11254:	sub	r1, r1, r0
   11258:	asr	r1, r1, #2
   1125c:	add	r1, r1, r1, lsr #31
   11260:	asrs	r1, r1, #1
   11264:	bxeq	lr
   11268:	ldr	r3, [pc, #16]	; 11280 <__assert_fail@plt+0x310>
   1126c:	cmp	r3, #0
   11270:	bxeq	lr
   11274:	bx	r3
   11278:	andeq	r6, r2, r8, lsr r1
   1127c:	andeq	r6, r2, r8, lsr r1
   11280:	andeq	r0, r0, r0
   11284:	push	{r4, lr}
   11288:	ldr	r4, [pc, #24]	; 112a8 <__assert_fail@plt+0x338>
   1128c:	ldrb	r3, [r4]
   11290:	cmp	r3, #0
   11294:	popne	{r4, pc}
   11298:	bl	1121c <__assert_fail@plt+0x2ac>
   1129c:	mov	r3, #1
   112a0:	strb	r3, [r4]
   112a4:	pop	{r4, pc}
   112a8:	andeq	r6, r2, ip, asr r1
   112ac:	ldr	r0, [pc, #40]	; 112dc <__assert_fail@plt+0x36c>
   112b0:	ldr	r3, [r0]
   112b4:	cmp	r3, #0
   112b8:	bne	112c0 <__assert_fail@plt+0x350>
   112bc:	b	1124c <__assert_fail@plt+0x2dc>
   112c0:	ldr	r3, [pc, #24]	; 112e0 <__assert_fail@plt+0x370>
   112c4:	cmp	r3, #0
   112c8:	beq	112bc <__assert_fail@plt+0x34c>
   112cc:	push	{r4, lr}
   112d0:	blx	r3
   112d4:	pop	{r4, lr}
   112d8:	b	1124c <__assert_fail@plt+0x2dc>
   112dc:	andeq	r5, r2, r4, lsl pc
   112e0:	andeq	r0, r0, r0
   112e4:	ldr	r3, [pc, #72]	; 11334 <__assert_fail@plt+0x3c4>
   112e8:	ldrb	r3, [r3]
   112ec:	cmp	r3, #0
   112f0:	bne	11324 <__assert_fail@plt+0x3b4>
   112f4:	cmp	r1, #8
   112f8:	bne	11308 <__assert_fail@plt+0x398>
   112fc:	cmp	r0, #0
   11300:	subne	r0, r0, #1
   11304:	bx	lr
   11308:	cmp	r1, #13
   1130c:	beq	1132c <__assert_fail@plt+0x3bc>
   11310:	cmp	r1, #9
   11314:	bne	11324 <__assert_fail@plt+0x3b4>
   11318:	bic	r0, r0, #7
   1131c:	add	r0, r0, #8
   11320:	bx	lr
   11324:	add	r0, r0, #1
   11328:	bx	lr
   1132c:	mov	r0, r3
   11330:	bx	lr
   11334:	andeq	r6, r2, r0, ror #2
   11338:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1133c:	sub	sp, sp, #20
   11340:	mov	r9, r0
   11344:	str	r1, [sp, #8]
   11348:	ldr	r1, [pc, #660]	; 115e4 <__assert_fail@plt+0x674>
   1134c:	bl	10d18 <strcmp@plt>
   11350:	cmp	r0, #0
   11354:	bne	113a8 <__assert_fail@plt+0x438>
   11358:	ldr	r3, [pc, #648]	; 115e8 <__assert_fail@plt+0x678>
   1135c:	mov	r2, #1
   11360:	ldr	r4, [r3]
   11364:	ldr	r3, [pc, #640]	; 115ec <__assert_fail@plt+0x67c>
   11368:	strb	r2, [r3, #1]
   1136c:	cmp	r4, #0
   11370:	bne	113bc <__assert_fail@plt+0x44c>
   11374:	bl	10e8c <__errno_location@plt>
   11378:	ldr	r5, [r0]
   1137c:	mov	r2, r9
   11380:	mov	r1, #3
   11384:	mov	r0, #0
   11388:	bl	13034 <__assert_fail@plt+0x20c4>
   1138c:	ldr	r2, [pc, #604]	; 115f0 <__assert_fail@plt+0x680>
   11390:	mov	r1, r5
   11394:	mov	r3, r0
   11398:	mov	r0, #0
   1139c:	bl	10e14 <error@plt>
   113a0:	mov	r0, #0
   113a4:	b	11454 <__assert_fail@plt+0x4e4>
   113a8:	ldr	r1, [pc, #580]	; 115f4 <__assert_fail@plt+0x684>
   113ac:	mov	r0, r9
   113b0:	bl	10f28 <fopen64@plt>
   113b4:	mov	r4, r0
   113b8:	b	1136c <__assert_fail@plt+0x3fc>
   113bc:	mov	r1, #2
   113c0:	mov	r0, r4
   113c4:	bl	11988 <__assert_fail@plt+0xa18>
   113c8:	mov	r8, #0
   113cc:	ldr	r6, [pc, #536]	; 115ec <__assert_fail@plt+0x67c>
   113d0:	ldr	fp, [pc, #544]	; 115f8 <__assert_fail@plt+0x688>
   113d4:	mov	sl, r8
   113d8:	mov	r0, r4
   113dc:	bl	10d9c <getc_unlocked@plt>
   113e0:	cmn	r0, #1
   113e4:	mov	r7, r0
   113e8:	bne	1145c <__assert_fail@plt+0x4ec>
   113ec:	bl	10e8c <__errno_location@plt>
   113f0:	ldr	r5, [r0]
   113f4:	mov	r6, r0
   113f8:	mov	r0, r4
   113fc:	bl	10dfc <ferror_unlocked@plt>
   11400:	cmp	r0, #0
   11404:	moveq	r5, #0
   11408:	cmp	r8, #0
   1140c:	beq	1142c <__assert_fail@plt+0x4bc>
   11410:	ldr	r3, [pc, #480]	; 115f8 <__assert_fail@plt+0x688>
   11414:	ldr	r0, [pc, #464]	; 115ec <__assert_fail@plt+0x67c>
   11418:	mov	r2, r8
   1141c:	ldr	r3, [r3]
   11420:	mov	r1, #1
   11424:	ldr	r0, [r0, #8]
   11428:	bl	10d78 <fwrite_unlocked@plt>
   1142c:	ldr	r1, [pc, #432]	; 115e4 <__assert_fail@plt+0x674>
   11430:	mov	r0, r9
   11434:	bl	10d18 <strcmp@plt>
   11438:	cmp	r0, #0
   1143c:	mov	r0, r4
   11440:	bne	1157c <__assert_fail@plt+0x60c>
   11444:	bl	10f1c <clearerr_unlocked@plt>
   11448:	cmp	r5, #0
   1144c:	moveq	r0, #1
   11450:	bne	1137c <__assert_fail@plt+0x40c>
   11454:	add	sp, sp, #20
   11458:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1145c:	ldr	r2, [r6, #4]
   11460:	add	r5, r8, #1
   11464:	cmp	r5, r2
   11468:	bcc	1147c <__assert_fail@plt+0x50c>
   1146c:	ldr	r1, [pc, #392]	; 115fc <__assert_fail@plt+0x68c>
   11470:	ldr	r0, [r6, #8]
   11474:	bl	137f4 <__assert_fail@plt+0x2884>
   11478:	str	r0, [r6, #8]
   1147c:	cmp	r7, #10
   11480:	movne	r5, r8
   11484:	uxtbne	r7, r7
   11488:	bne	11500 <__assert_fail@plt+0x590>
   1148c:	ldr	r0, [r6, #8]
   11490:	mov	r2, r5
   11494:	mov	r1, #1
   11498:	strb	r7, [r0, r8]
   1149c:	ldr	r3, [fp]
   114a0:	mov	r8, #0
   114a4:	bl	10d78 <fwrite_unlocked@plt>
   114a8:	mov	sl, r8
   114ac:	b	113d8 <__assert_fail@plt+0x468>
   114b0:	str	r2, [sp, #12]
   114b4:	bl	10e5c <__ctype_b_loc@plt>
   114b8:	ldr	r2, [sp, #12]
   114bc:	ldrb	r1, [r2, #-1]!
   114c0:	lsl	r1, r1, #1
   114c4:	ldr	r0, [r0]
   114c8:	ldrh	r1, [r0, r1]
   114cc:	tst	r1, #1
   114d0:	bne	11598 <__assert_fail@plt+0x628>
   114d4:	sub	r3, r2, r8
   114d8:	cmp	r2, r8
   114dc:	str	r3, [sp, #4]
   114e0:	bne	114b0 <__assert_fail@plt+0x540>
   114e4:	b	11530 <__assert_fail@plt+0x5c0>
   114e8:	mov	r0, sl
   114ec:	ldrb	r1, [r2], #1
   114f0:	bl	112e4 <__assert_fail@plt+0x374>
   114f4:	mov	sl, r0
   114f8:	cmp	r2, r8
   114fc:	bne	114e8 <__assert_fail@plt+0x578>
   11500:	mov	r0, sl
   11504:	mov	r1, r7
   11508:	bl	112e4 <__assert_fail@plt+0x374>
   1150c:	ldr	r3, [sp, #8]
   11510:	cmp	r0, r3
   11514:	mov	sl, r0
   11518:	bls	1156c <__assert_fail@plt+0x5fc>
   1151c:	ldrb	r2, [r6, #12]
   11520:	cmp	r2, #0
   11524:	ldrne	r8, [r6, #8]
   11528:	addne	r2, r8, r5
   1152c:	bne	114d4 <__assert_fail@plt+0x564>
   11530:	cmp	r5, #0
   11534:	ldreq	r2, [r6, #8]
   11538:	moveq	r8, #1
   1153c:	strbeq	r7, [r2]
   11540:	beq	113d8 <__assert_fail@plt+0x468>
   11544:	ldr	r0, [r6, #8]
   11548:	mov	r3, #10
   1154c:	add	r2, r5, #1
   11550:	strb	r3, [r0, r5]
   11554:	ldr	r3, [fp]
   11558:	mov	r1, #1
   1155c:	mov	r5, #0
   11560:	bl	10d78 <fwrite_unlocked@plt>
   11564:	mov	sl, r5
   11568:	b	11500 <__assert_fail@plt+0x590>
   1156c:	ldr	r2, [r6, #8]
   11570:	add	r8, r5, #1
   11574:	strb	r7, [r2, r5]
   11578:	b	113d8 <__assert_fail@plt+0x468>
   1157c:	bl	119b8 <__assert_fail@plt+0xa48>
   11580:	cmp	r0, #0
   11584:	beq	11448 <__assert_fail@plt+0x4d8>
   11588:	cmp	r5, #0
   1158c:	bne	1137c <__assert_fail@plt+0x40c>
   11590:	ldr	r5, [r6]
   11594:	b	11448 <__assert_fail@plt+0x4d8>
   11598:	ldr	r3, [fp]
   1159c:	ldr	r2, [sp, #4]
   115a0:	mov	r1, #1
   115a4:	mov	r0, r8
   115a8:	bl	10d78 <fwrite_unlocked@plt>
   115ac:	mov	r0, #10
   115b0:	bl	10f64 <putchar_unlocked@plt>
   115b4:	ldr	r2, [sp, #4]
   115b8:	ldr	r3, [r6, #8]
   115bc:	ldr	r1, [sp, #4]
   115c0:	sub	r5, r5, r2
   115c4:	mov	r2, r5
   115c8:	add	r1, r3, r1
   115cc:	mov	r0, r3
   115d0:	bl	10d3c <memmove@plt>
   115d4:	mov	sl, #0
   115d8:	mov	r2, r0
   115dc:	add	r8, r0, r5
   115e0:	b	114f8 <__assert_fail@plt+0x588>
   115e4:	andeq	r4, r1, r0, lsl #30
   115e8:	andeq	r6, r2, r0, asr r1
   115ec:	andeq	r6, r2, r0, ror #2
   115f0:			; <UNDEFINED> instruction: 0x00014ebb
   115f4:			; <UNDEFINED> instruction: 0x00014eb5
   115f8:	andeq	r6, r2, r4, asr r1
   115fc:	andeq	r6, r2, r4, ror #2
   11600:	subs	r5, r0, #0
   11604:	push	{r7, lr}
   11608:	sub	sp, sp, #56	; 0x38
   1160c:	ldr	r4, [pc, #524]	; 11820 <__assert_fail@plt+0x8b0>
   11610:	beq	11648 <__assert_fail@plt+0x6d8>
   11614:	ldr	r3, [pc, #520]	; 11824 <__assert_fail@plt+0x8b4>
   11618:	mov	r2, #5
   1161c:	ldr	r1, [pc, #516]	; 11828 <__assert_fail@plt+0x8b8>
   11620:	mov	r0, #0
   11624:	ldr	r6, [r3]
   11628:	bl	10da8 <dcgettext@plt>
   1162c:	ldr	r3, [r4]
   11630:	mov	r1, #1
   11634:	mov	r2, r0
   11638:	mov	r0, r6
   1163c:	bl	10ed4 <__fprintf_chk@plt>
   11640:	mov	r0, r5
   11644:	bl	10e68 <exit@plt>
   11648:	mov	r2, #5
   1164c:	ldr	r1, [pc, #472]	; 1182c <__assert_fail@plt+0x8bc>
   11650:	bl	10da8 <dcgettext@plt>
   11654:	ldr	r2, [r4]
   11658:	ldr	r4, [pc, #464]	; 11830 <__assert_fail@plt+0x8c0>
   1165c:	ldr	r8, [pc, #464]	; 11834 <__assert_fail@plt+0x8c4>
   11660:	mov	r6, r5
   11664:	mov	r1, r0
   11668:	mov	r0, #1
   1166c:	bl	10eb0 <__printf_chk@plt>
   11670:	mov	r2, #5
   11674:	ldr	r1, [pc, #444]	; 11838 <__assert_fail@plt+0x8c8>
   11678:	mov	r0, r5
   1167c:	bl	10da8 <dcgettext@plt>
   11680:	ldr	r1, [r4]
   11684:	bl	10d00 <fputs_unlocked@plt>
   11688:	mov	r2, #5
   1168c:	ldr	r1, [pc, #424]	; 1183c <__assert_fail@plt+0x8cc>
   11690:	mov	r0, r5
   11694:	bl	10da8 <dcgettext@plt>
   11698:	ldr	r1, [r4]
   1169c:	bl	10d00 <fputs_unlocked@plt>
   116a0:	mov	r2, #5
   116a4:	ldr	r1, [pc, #404]	; 11840 <__assert_fail@plt+0x8d0>
   116a8:	mov	r0, r5
   116ac:	bl	10da8 <dcgettext@plt>
   116b0:	ldr	r1, [r4]
   116b4:	bl	10d00 <fputs_unlocked@plt>
   116b8:	mov	r2, #5
   116bc:	ldr	r1, [pc, #384]	; 11844 <__assert_fail@plt+0x8d4>
   116c0:	mov	r0, r5
   116c4:	bl	10da8 <dcgettext@plt>
   116c8:	ldr	r1, [r4]
   116cc:	bl	10d00 <fputs_unlocked@plt>
   116d0:	mov	r2, #5
   116d4:	ldr	r1, [pc, #364]	; 11848 <__assert_fail@plt+0x8d8>
   116d8:	mov	r0, r5
   116dc:	bl	10da8 <dcgettext@plt>
   116e0:	ldr	r1, [r4]
   116e4:	bl	10d00 <fputs_unlocked@plt>
   116e8:	mov	r2, #5
   116ec:	ldr	r1, [pc, #344]	; 1184c <__assert_fail@plt+0x8dc>
   116f0:	mov	r0, r5
   116f4:	bl	10da8 <dcgettext@plt>
   116f8:	ldr	r1, [r4]
   116fc:	bl	10d00 <fputs_unlocked@plt>
   11700:	ldr	lr, [pc, #328]	; 11850 <__assert_fail@plt+0x8e0>
   11704:	mov	ip, sp
   11708:	ldm	lr!, {r0, r1, r2, r3}
   1170c:	stmia	ip!, {r0, r1, r2, r3}
   11710:	ldm	lr!, {r0, r1, r2, r3}
   11714:	stmia	ip!, {r0, r1, r2, r3}
   11718:	ldm	lr!, {r0, r1, r2, r3}
   1171c:	stmia	ip!, {r0, r1, r2, r3}
   11720:	ldm	lr, {r0, r1}
   11724:	stm	ip, {r0, r1}
   11728:	ldr	r1, [sp, r6]
   1172c:	add	r7, sp, r6
   11730:	cmp	r1, #0
   11734:	bne	117d8 <__assert_fail@plt+0x868>
   11738:	ldr	r6, [r7, #4]
   1173c:	ldr	r7, [pc, #240]	; 11834 <__assert_fail@plt+0x8c4>
   11740:	cmp	r6, #0
   11744:	mov	r2, #5
   11748:	ldr	r1, [pc, #260]	; 11854 <__assert_fail@plt+0x8e4>
   1174c:	mov	r0, #0
   11750:	moveq	r6, r7
   11754:	bl	10da8 <dcgettext@plt>
   11758:	ldr	r3, [pc, #248]	; 11858 <__assert_fail@plt+0x8e8>
   1175c:	ldr	r2, [pc, #248]	; 1185c <__assert_fail@plt+0x8ec>
   11760:	mov	r1, r0
   11764:	mov	r0, #1
   11768:	bl	10eb0 <__printf_chk@plt>
   1176c:	mov	r1, #0
   11770:	mov	r0, #5
   11774:	bl	10ef8 <setlocale@plt>
   11778:	cmp	r0, #0
   1177c:	bne	117f0 <__assert_fail@plt+0x880>
   11780:	mov	r2, #5
   11784:	ldr	r1, [pc, #212]	; 11860 <__assert_fail@plt+0x8f0>
   11788:	mov	r0, #0
   1178c:	bl	10da8 <dcgettext@plt>
   11790:	ldr	r3, [pc, #156]	; 11834 <__assert_fail@plt+0x8c4>
   11794:	ldr	r2, [pc, #188]	; 11858 <__assert_fail@plt+0x8e8>
   11798:	mov	r1, r0
   1179c:	mov	r0, #1
   117a0:	bl	10eb0 <__printf_chk@plt>
   117a4:	mov	r2, #5
   117a8:	ldr	r1, [pc, #180]	; 11864 <__assert_fail@plt+0x8f4>
   117ac:	mov	r0, #0
   117b0:	bl	10da8 <dcgettext@plt>
   117b4:	ldr	r2, [pc, #172]	; 11868 <__assert_fail@plt+0x8f8>
   117b8:	cmp	r6, r7
   117bc:	ldr	r3, [pc, #168]	; 1186c <__assert_fail@plt+0x8fc>
   117c0:	moveq	r3, r2
   117c4:	mov	r2, r6
   117c8:	mov	r1, r0
   117cc:	mov	r0, #1
   117d0:	bl	10eb0 <__printf_chk@plt>
   117d4:	b	11640 <__assert_fail@plt+0x6d0>
   117d8:	mov	r0, r8
   117dc:	bl	10d18 <strcmp@plt>
   117e0:	add	r6, r6, #8
   117e4:	cmp	r0, #0
   117e8:	bne	11728 <__assert_fail@plt+0x7b8>
   117ec:	b	11738 <__assert_fail@plt+0x7c8>
   117f0:	mov	r2, #3
   117f4:	ldr	r1, [pc, #116]	; 11870 <__assert_fail@plt+0x900>
   117f8:	bl	10f4c <strncmp@plt>
   117fc:	cmp	r0, #0
   11800:	beq	11780 <__assert_fail@plt+0x810>
   11804:	mov	r2, #5
   11808:	ldr	r1, [pc, #100]	; 11874 <__assert_fail@plt+0x904>
   1180c:	mov	r0, #0
   11810:	bl	10da8 <dcgettext@plt>
   11814:	ldr	r1, [r4]
   11818:	bl	10d00 <fputs_unlocked@plt>
   1181c:	b	11780 <__assert_fail@plt+0x810>
   11820:	andeq	r6, r2, r8, ror r1
   11824:	andeq	r6, r2, r8, asr #2
   11828:	strdeq	r4, [r1], -r8
   1182c:	andeq	r4, r1, pc, lsl fp
   11830:	andeq	r6, r2, r4, asr r1
   11834:	strdeq	r4, [r1], -r3
   11838:	andeq	r4, r1, r0, asr #22
   1183c:	andeq	r4, r1, ip, ror fp
   11840:			; <UNDEFINED> instruction: 0x00014bb4
   11844:	strdeq	r4, [r1], -pc	; <UNPREDICTABLE>
   11848:	muleq	r1, r2, ip
   1184c:			; <UNDEFINED> instruction: 0x00014cbf
   11850:	andeq	r4, r1, r8, lsr sl
   11854:	strdeq	r4, [r1], -r5
   11858:	andeq	r4, r1, ip, lsl #26
   1185c:	andeq	r4, r1, r4, lsr sp
   11860:	andeq	r4, r1, sp, lsl #27
   11864:	andeq	r4, r1, r8, lsr #27
   11868:	andeq	r4, r1, r9, lsr lr
   1186c:	ldrdeq	r4, [r1], -sl
   11870:	andeq	r4, r1, r2, asr #26
   11874:	andeq	r4, r1, r6, asr #26
   11878:	ldr	r3, [pc, #4]	; 11884 <__assert_fail@plt+0x914>
   1187c:	str	r0, [r3]
   11880:	bx	lr
   11884:	andeq	r6, r2, r0, ror r1
   11888:	ldr	r3, [pc, #4]	; 11894 <__assert_fail@plt+0x924>
   1188c:	strb	r0, [r3, #4]
   11890:	bx	lr
   11894:	andeq	r6, r2, r0, ror r1
   11898:	ldr	r3, [pc, #192]	; 11960 <__assert_fail@plt+0x9f0>
   1189c:	push	{r0, r1, r4, r5, r6, lr}
   118a0:	ldr	r0, [r3]
   118a4:	bl	1417c <__assert_fail@plt+0x320c>
   118a8:	cmp	r0, #0
   118ac:	beq	11944 <__assert_fail@plt+0x9d4>
   118b0:	ldr	r3, [pc, #172]	; 11964 <__assert_fail@plt+0x9f4>
   118b4:	mov	r4, r3
   118b8:	ldrb	r2, [r3, #4]
   118bc:	cmp	r2, #0
   118c0:	beq	118d4 <__assert_fail@plt+0x964>
   118c4:	bl	10e8c <__errno_location@plt>
   118c8:	ldr	r3, [r0]
   118cc:	cmp	r3, #32
   118d0:	beq	11944 <__assert_fail@plt+0x9d4>
   118d4:	mov	r2, #5
   118d8:	ldr	r1, [pc, #136]	; 11968 <__assert_fail@plt+0x9f8>
   118dc:	mov	r0, #0
   118e0:	bl	10da8 <dcgettext@plt>
   118e4:	ldr	r4, [r4]
   118e8:	cmp	r4, #0
   118ec:	mov	r5, r0
   118f0:	beq	11928 <__assert_fail@plt+0x9b8>
   118f4:	bl	10e8c <__errno_location@plt>
   118f8:	ldr	r6, [r0]
   118fc:	mov	r0, r4
   11900:	bl	13024 <__assert_fail@plt+0x20b4>
   11904:	str	r5, [sp]
   11908:	ldr	r2, [pc, #92]	; 1196c <__assert_fail@plt+0x9fc>
   1190c:	mov	r1, r6
   11910:	mov	r3, r0
   11914:	mov	r0, #0
   11918:	bl	10e14 <error@plt>
   1191c:	ldr	r3, [pc, #76]	; 11970 <__assert_fail@plt+0xa00>
   11920:	ldr	r0, [r3]
   11924:	bl	10d54 <_exit@plt>
   11928:	bl	10e8c <__errno_location@plt>
   1192c:	mov	r3, r5
   11930:	ldr	r2, [pc, #60]	; 11974 <__assert_fail@plt+0xa04>
   11934:	ldr	r1, [r0]
   11938:	mov	r0, r4
   1193c:	bl	10e14 <error@plt>
   11940:	b	1191c <__assert_fail@plt+0x9ac>
   11944:	ldr	r3, [pc, #44]	; 11978 <__assert_fail@plt+0xa08>
   11948:	ldr	r0, [r3]
   1194c:	bl	1417c <__assert_fail@plt+0x320c>
   11950:	cmp	r0, #0
   11954:	bne	1191c <__assert_fail@plt+0x9ac>
   11958:	add	sp, sp, #8
   1195c:	pop	{r4, r5, r6, pc}
   11960:	andeq	r6, r2, r4, asr r1
   11964:	andeq	r6, r2, r0, ror r1
   11968:	andeq	r4, r1, fp, lsr #29
   1196c:			; <UNDEFINED> instruction: 0x00014eb7
   11970:	strdeq	r6, [r2], -r4
   11974:			; <UNDEFINED> instruction: 0x00014ebb
   11978:	andeq	r6, r2, r8, asr #2
   1197c:	push	{r4, r5}
   11980:	pop	{r4, r5}
   11984:	b	10d24 <posix_fadvise64@plt>
   11988:	cmp	r0, #0
   1198c:	bxeq	lr
   11990:	push	{r0, r1, r2, r3, r4, lr}
   11994:	mov	r4, r1
   11998:	bl	10ebc <fileno@plt>
   1199c:	mov	r2, #0
   119a0:	mov	r3, #0
   119a4:	str	r4, [sp, #8]
   119a8:	strd	r2, [sp]
   119ac:	bl	10d24 <posix_fadvise64@plt>
   119b0:	add	sp, sp, #16
   119b4:	pop	{r4, pc}
   119b8:	push	{r0, r1, r2, r4, r5, lr}
   119bc:	mov	r4, r0
   119c0:	bl	10ebc <fileno@plt>
   119c4:	cmp	r0, #0
   119c8:	mov	r0, r4
   119cc:	bge	119dc <__assert_fail@plt+0xa6c>
   119d0:	add	sp, sp, #12
   119d4:	pop	{r4, r5, lr}
   119d8:	b	10ee0 <fclose@plt>
   119dc:	bl	10e38 <__freading@plt>
   119e0:	cmp	r0, #0
   119e4:	bne	11a20 <__assert_fail@plt+0xab0>
   119e8:	mov	r0, r4
   119ec:	bl	11a60 <__assert_fail@plt+0xaf0>
   119f0:	cmp	r0, #0
   119f4:	bne	11a54 <__assert_fail@plt+0xae4>
   119f8:	mov	r5, #0
   119fc:	mov	r0, r4
   11a00:	bl	10ee0 <fclose@plt>
   11a04:	cmp	r5, #0
   11a08:	beq	11a18 <__assert_fail@plt+0xaa8>
   11a0c:	bl	10e8c <__errno_location@plt>
   11a10:	str	r5, [r0]
   11a14:	mvn	r0, #0
   11a18:	add	sp, sp, #12
   11a1c:	pop	{r4, r5, pc}
   11a20:	mov	r0, r4
   11a24:	bl	10ebc <fileno@plt>
   11a28:	mov	r3, #1
   11a2c:	str	r3, [sp]
   11a30:	mov	r2, #0
   11a34:	mov	r3, #0
   11a38:	bl	10dd8 <lseek64@plt>
   11a3c:	mvn	r3, #0
   11a40:	mvn	r2, #0
   11a44:	cmp	r1, r3
   11a48:	cmpeq	r0, r2
   11a4c:	bne	119e8 <__assert_fail@plt+0xa78>
   11a50:	b	119f8 <__assert_fail@plt+0xa88>
   11a54:	bl	10e8c <__errno_location@plt>
   11a58:	ldr	r5, [r0]
   11a5c:	b	119fc <__assert_fail@plt+0xa8c>
   11a60:	push	{r0, r1, r4, lr}
   11a64:	subs	r4, r0, #0
   11a68:	bne	11a7c <__assert_fail@plt+0xb0c>
   11a6c:	mov	r0, r4
   11a70:	add	sp, sp, #8
   11a74:	pop	{r4, lr}
   11a78:	b	10d30 <fflush@plt>
   11a7c:	bl	10e38 <__freading@plt>
   11a80:	cmp	r0, #0
   11a84:	beq	11a6c <__assert_fail@plt+0xafc>
   11a88:	ldr	r3, [r4]
   11a8c:	tst	r3, #256	; 0x100
   11a90:	beq	11a6c <__assert_fail@plt+0xafc>
   11a94:	mov	r3, #1
   11a98:	str	r3, [sp]
   11a9c:	mov	r2, #0
   11aa0:	mov	r3, #0
   11aa4:	mov	r0, r4
   11aa8:	bl	11ab0 <__assert_fail@plt+0xb40>
   11aac:	b	11a6c <__assert_fail@plt+0xafc>
   11ab0:	push	{r0, r1, r4, r5, r6, r7, r8, lr}
   11ab4:	mov	r4, r0
   11ab8:	ldmib	r0, {ip, lr}
   11abc:	ldr	r8, [sp, #32]
   11ac0:	cmp	lr, ip
   11ac4:	bne	11b30 <__assert_fail@plt+0xbc0>
   11ac8:	ldr	lr, [r0, #20]
   11acc:	ldr	ip, [r0, #16]
   11ad0:	cmp	lr, ip
   11ad4:	bne	11b30 <__assert_fail@plt+0xbc0>
   11ad8:	ldr	r5, [r0, #36]	; 0x24
   11adc:	cmp	r5, #0
   11ae0:	bne	11b30 <__assert_fail@plt+0xbc0>
   11ae4:	mov	r6, r2
   11ae8:	mov	r7, r3
   11aec:	bl	10ebc <fileno@plt>
   11af0:	mov	r2, r6
   11af4:	mov	r3, r7
   11af8:	str	r8, [sp]
   11afc:	bl	10dd8 <lseek64@plt>
   11b00:	mvn	r3, #0
   11b04:	mvn	r2, #0
   11b08:	cmp	r1, r3
   11b0c:	cmpeq	r0, r2
   11b10:	mvneq	r0, #0
   11b14:	ldrne	r3, [r4]
   11b18:	strdne	r0, [r4, #80]	; 0x50
   11b1c:	movne	r0, r5
   11b20:	bicne	r3, r3, #16
   11b24:	strne	r3, [r4]
   11b28:	add	sp, sp, #8
   11b2c:	pop	{r4, r5, r6, r7, r8, pc}
   11b30:	str	r8, [sp, #32]
   11b34:	mov	r0, r4
   11b38:	add	sp, sp, #8
   11b3c:	pop	{r4, r5, r6, r7, r8, lr}
   11b40:	b	10eec <fseeko64@plt>
   11b44:	push	{r4, r5, r6, lr}
   11b48:	subs	r5, r0, #0
   11b4c:	bne	11b64 <__assert_fail@plt+0xbf4>
   11b50:	ldr	r3, [pc, #124]	; 11bd4 <__assert_fail@plt+0xc64>
   11b54:	ldr	r0, [pc, #124]	; 11bd8 <__assert_fail@plt+0xc68>
   11b58:	ldr	r1, [r3]
   11b5c:	bl	10f40 <fputs@plt>
   11b60:	bl	10f58 <abort@plt>
   11b64:	mov	r1, #47	; 0x2f
   11b68:	bl	10f04 <strrchr@plt>
   11b6c:	cmp	r0, #0
   11b70:	addne	r4, r0, #1
   11b74:	moveq	r4, r5
   11b78:	sub	r3, r4, r5
   11b7c:	cmp	r3, #6
   11b80:	ble	11bc0 <__assert_fail@plt+0xc50>
   11b84:	mov	r2, #7
   11b88:	ldr	r1, [pc, #76]	; 11bdc <__assert_fail@plt+0xc6c>
   11b8c:	sub	r0, r4, #7
   11b90:	bl	10f4c <strncmp@plt>
   11b94:	cmp	r0, #0
   11b98:	bne	11bc0 <__assert_fail@plt+0xc50>
   11b9c:	mov	r2, #3
   11ba0:	ldr	r1, [pc, #56]	; 11be0 <__assert_fail@plt+0xc70>
   11ba4:	mov	r0, r4
   11ba8:	bl	10f4c <strncmp@plt>
   11bac:	cmp	r0, #0
   11bb0:	movne	r5, r4
   11bb4:	ldreq	r3, [pc, #40]	; 11be4 <__assert_fail@plt+0xc74>
   11bb8:	addeq	r5, r4, #3
   11bbc:	streq	r5, [r3]
   11bc0:	ldr	r3, [pc, #32]	; 11be8 <__assert_fail@plt+0xc78>
   11bc4:	str	r5, [r3]
   11bc8:	ldr	r3, [pc, #28]	; 11bec <__assert_fail@plt+0xc7c>
   11bcc:	str	r5, [r3]
   11bd0:	pop	{r4, r5, r6, pc}
   11bd4:	andeq	r6, r2, r8, asr #2
   11bd8:			; <UNDEFINED> instruction: 0x00014ebe
   11bdc:	strdeq	r4, [r1], -r6
   11be0:	strdeq	r4, [r1], -lr
   11be4:	andeq	r6, r2, r8, lsr r1
   11be8:	andeq	r6, r2, r8, ror r1
   11bec:	andeq	r6, r2, ip, lsr r1
   11bf0:	push	{r4, r5, r6, lr}
   11bf4:	mov	r2, #48	; 0x30
   11bf8:	mov	r5, r1
   11bfc:	mov	r1, #0
   11c00:	mov	r4, r0
   11c04:	bl	10ea4 <memset@plt>
   11c08:	cmp	r5, #10
   11c0c:	bne	11c14 <__assert_fail@plt+0xca4>
   11c10:	bl	10f58 <abort@plt>
   11c14:	str	r5, [r4]
   11c18:	mov	r0, r4
   11c1c:	pop	{r4, r5, r6, pc}
   11c20:	push	{r4, r5, r6, lr}
   11c24:	mov	r4, r0
   11c28:	mov	r5, r1
   11c2c:	bl	14240 <__assert_fail@plt+0x32d0>
   11c30:	ldrb	r3, [r0]
   11c34:	bic	r3, r3, #32
   11c38:	cmp	r3, #85	; 0x55
   11c3c:	bne	11cac <__assert_fail@plt+0xd3c>
   11c40:	ldrb	r3, [r0, #1]
   11c44:	bic	r3, r3, #32
   11c48:	cmp	r3, #84	; 0x54
   11c4c:	bne	11c84 <__assert_fail@plt+0xd14>
   11c50:	ldrb	r3, [r0, #2]
   11c54:	bic	r3, r3, #32
   11c58:	cmp	r3, #70	; 0x46
   11c5c:	bne	11c84 <__assert_fail@plt+0xd14>
   11c60:	ldrb	r3, [r0, #3]
   11c64:	cmp	r3, #45	; 0x2d
   11c68:	bne	11c84 <__assert_fail@plt+0xd14>
   11c6c:	ldrb	r3, [r0, #4]
   11c70:	cmp	r3, #56	; 0x38
   11c74:	bne	11c84 <__assert_fail@plt+0xd14>
   11c78:	ldrb	r3, [r0, #5]
   11c7c:	cmp	r3, #0
   11c80:	beq	11c98 <__assert_fail@plt+0xd28>
   11c84:	ldr	r1, [pc, #144]	; 11d1c <__assert_fail@plt+0xdac>
   11c88:	ldr	r0, [pc, #144]	; 11d20 <__assert_fail@plt+0xdb0>
   11c8c:	cmp	r5, #9
   11c90:	movne	r0, r1
   11c94:	pop	{r4, r5, r6, pc}
   11c98:	ldrb	r3, [r4]
   11c9c:	ldr	r1, [pc, #128]	; 11d24 <__assert_fail@plt+0xdb4>
   11ca0:	ldr	r0, [pc, #128]	; 11d28 <__assert_fail@plt+0xdb8>
   11ca4:	cmp	r3, #96	; 0x60
   11ca8:	b	11c90 <__assert_fail@plt+0xd20>
   11cac:	cmp	r3, #71	; 0x47
   11cb0:	bne	11c84 <__assert_fail@plt+0xd14>
   11cb4:	ldrb	r3, [r0, #1]
   11cb8:	bic	r3, r3, #32
   11cbc:	cmp	r3, #66	; 0x42
   11cc0:	bne	11c84 <__assert_fail@plt+0xd14>
   11cc4:	ldrb	r3, [r0, #2]
   11cc8:	cmp	r3, #49	; 0x31
   11ccc:	bne	11c84 <__assert_fail@plt+0xd14>
   11cd0:	ldrb	r3, [r0, #3]
   11cd4:	cmp	r3, #56	; 0x38
   11cd8:	bne	11c84 <__assert_fail@plt+0xd14>
   11cdc:	ldrb	r3, [r0, #4]
   11ce0:	cmp	r3, #48	; 0x30
   11ce4:	bne	11c84 <__assert_fail@plt+0xd14>
   11ce8:	ldrb	r3, [r0, #5]
   11cec:	cmp	r3, #51	; 0x33
   11cf0:	bne	11c84 <__assert_fail@plt+0xd14>
   11cf4:	ldrb	r3, [r0, #6]
   11cf8:	cmp	r3, #48	; 0x30
   11cfc:	bne	11c84 <__assert_fail@plt+0xd14>
   11d00:	ldrb	r3, [r0, #7]
   11d04:	cmp	r3, #0
   11d08:	bne	11c84 <__assert_fail@plt+0xd14>
   11d0c:	ldrb	r3, [r4]
   11d10:	ldr	r1, [pc, #20]	; 11d2c <__assert_fail@plt+0xdbc>
   11d14:	ldr	r0, [pc, #20]	; 11d30 <__assert_fail@plt+0xdc0>
   11d18:	b	11ca4 <__assert_fail@plt+0xd34>
   11d1c:	andeq	r4, r1, r9, ror #30
   11d20:	andeq	r4, r1, r7, ror #30
   11d24:	andeq	r4, r1, ip, asr pc
   11d28:	andeq	r4, r1, r8, asr pc
   11d2c:	andeq	r4, r1, r4, ror #30
   11d30:	andeq	r4, r1, r0, ror #30
   11d34:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11d38:	sub	sp, sp, #108	; 0x6c
   11d3c:	mov	r8, r0
   11d40:	str	r3, [sp, #36]	; 0x24
   11d44:	mov	r5, r1
   11d48:	str	r2, [sp, #44]	; 0x2c
   11d4c:	ldr	sl, [sp, #144]	; 0x90
   11d50:	bl	10de4 <__ctype_get_mb_cur_max@plt>
   11d54:	ldr	r3, [sp, #148]	; 0x94
   11d58:	mov	r7, #0
   11d5c:	str	r7, [sp, #48]	; 0x30
   11d60:	lsr	r6, r3, #1
   11d64:	and	r6, r6, #1
   11d68:	mov	r3, #1
   11d6c:	str	r3, [sp, #72]	; 0x48
   11d70:	str	r7, [sp, #24]
   11d74:	str	r7, [sp, #32]
   11d78:	str	r7, [sp, #40]	; 0x28
   11d7c:	str	r7, [sp, #60]	; 0x3c
   11d80:	str	r0, [sp, #76]	; 0x4c
   11d84:	cmp	sl, #10
   11d88:	ldrls	pc, [pc, sl, lsl #2]
   11d8c:	b	11fc8 <__assert_fail@plt+0x1058>
   11d90:			; <UNDEFINED> instruction: 0x00011dbc
   11d94:	andeq	r2, r1, r0, asr sl
   11d98:	muleq	r1, r4, pc	; <UNPREDICTABLE>
   11d9c:	andeq	r1, r1, r0, ror #31
   11da0:	andeq	r1, r1, r0, ror pc
   11da4:	andeq	r1, r1, r8, asr #27
   11da8:	andeq	r2, r1, r0, lsr sl
   11dac:	andeq	r1, r1, ip, asr #31
   11db0:	andeq	r1, r1, r0, asr #29
   11db4:	andeq	r1, r1, r0, asr #29
   11db8:	andeq	r1, r1, r0, asr #29
   11dbc:	mov	r6, #0
   11dc0:	mov	r4, #0
   11dc4:	b	11df4 <__assert_fail@plt+0xe84>
   11dc8:	cmp	r6, #0
   11dcc:	bne	11ff0 <__assert_fail@plt+0x1080>
   11dd0:	cmp	r5, #0
   11dd4:	movne	r3, #34	; 0x22
   11dd8:	strbne	r3, [r8]
   11ddc:	mov	r3, #1
   11de0:	str	r3, [sp, #24]
   11de4:	str	r3, [sp, #32]
   11de8:	mov	r4, #1
   11dec:	ldr	r3, [pc, #3172]	; 12a58 <__assert_fail@plt+0x1ae8>
   11df0:	str	r3, [sp, #40]	; 0x28
   11df4:	mov	r9, r5
   11df8:	mov	r3, #0
   11dfc:	str	r7, [sp, #68]	; 0x44
   11e00:	str	r3, [sp, #28]
   11e04:	ldr	r3, [sp, #36]	; 0x24
   11e08:	cmn	r3, #1
   11e0c:	bne	1299c <__assert_fail@plt+0x1a2c>
   11e10:	ldr	r3, [sp, #44]	; 0x2c
   11e14:	ldr	r2, [sp, #28]
   11e18:	ldrb	r3, [r3, r2]
   11e1c:	adds	r3, r3, #0
   11e20:	movne	r3, #1
   11e24:	str	r3, [sp, #52]	; 0x34
   11e28:	ldr	r3, [sp, #52]	; 0x34
   11e2c:	cmp	r3, #0
   11e30:	bne	12018 <__assert_fail@plt+0x10a8>
   11e34:	sub	r2, sl, #2
   11e38:	clz	r2, r2
   11e3c:	lsr	r2, r2, #5
   11e40:	and	r3, r6, r2
   11e44:	cmp	r4, #0
   11e48:	movne	r3, #0
   11e4c:	andeq	r3, r3, #1
   11e50:	cmp	r3, #0
   11e54:	bne	121e0 <__assert_fail@plt+0x1270>
   11e58:	eor	r3, r6, #1
   11e5c:	ands	r2, r2, r3
   11e60:	beq	129d4 <__assert_fail@plt+0x1a64>
   11e64:	ldr	r3, [sp, #68]	; 0x44
   11e68:	cmp	r3, #0
   11e6c:	beq	12a0c <__assert_fail@plt+0x1a9c>
   11e70:	ldr	r3, [sp, #72]	; 0x48
   11e74:	cmp	r3, #0
   11e78:	beq	129b0 <__assert_fail@plt+0x1a40>
   11e7c:	ldr	r3, [sp, #160]	; 0xa0
   11e80:	ldr	r2, [sp, #44]	; 0x2c
   11e84:	str	r3, [sp, #16]
   11e88:	ldr	r3, [sp, #156]	; 0x9c
   11e8c:	ldr	r1, [sp, #60]	; 0x3c
   11e90:	str	r3, [sp, #12]
   11e94:	ldr	r3, [sp, #152]	; 0x98
   11e98:	str	r3, [sp, #8]
   11e9c:	ldr	r3, [sp, #148]	; 0x94
   11ea0:	str	r3, [sp, #4]
   11ea4:	mov	r3, #5
   11ea8:	str	r3, [sp]
   11eac:	ldr	r3, [sp, #36]	; 0x24
   11eb0:	mov	r0, r8
   11eb4:	bl	11d34 <__assert_fail@plt+0xdc4>
   11eb8:	mov	r4, r0
   11ebc:	b	12a00 <__assert_fail@plt+0x1a90>
   11ec0:	cmp	sl, #10
   11ec4:	beq	11f20 <__assert_fail@plt+0xfb0>
   11ec8:	ldr	r4, [pc, #2956]	; 12a5c <__assert_fail@plt+0x1aec>
   11ecc:	mov	r2, #5
   11ed0:	mov	r1, r4
   11ed4:	mov	r0, #0
   11ed8:	bl	10da8 <dcgettext@plt>
   11edc:	cmp	r0, r4
   11ee0:	str	r0, [sp, #156]	; 0x9c
   11ee4:	bne	11ef4 <__assert_fail@plt+0xf84>
   11ee8:	mov	r1, sl
   11eec:	bl	11c20 <__assert_fail@plt+0xcb0>
   11ef0:	str	r0, [sp, #156]	; 0x9c
   11ef4:	ldr	r4, [pc, #2916]	; 12a60 <__assert_fail@plt+0x1af0>
   11ef8:	mov	r2, #5
   11efc:	mov	r1, r4
   11f00:	mov	r0, #0
   11f04:	bl	10da8 <dcgettext@plt>
   11f08:	cmp	r0, r4
   11f0c:	str	r0, [sp, #160]	; 0xa0
   11f10:	bne	11f20 <__assert_fail@plt+0xfb0>
   11f14:	mov	r1, sl
   11f18:	bl	11c20 <__assert_fail@plt+0xcb0>
   11f1c:	str	r0, [sp, #160]	; 0xa0
   11f20:	cmp	r6, #0
   11f24:	moveq	r4, r6
   11f28:	beq	11f40 <__assert_fail@plt+0xfd0>
   11f2c:	mov	r4, #0
   11f30:	b	11f50 <__assert_fail@plt+0xfe0>
   11f34:	cmp	r5, r4
   11f38:	strbhi	r3, [r8, r4]
   11f3c:	add	r4, r4, #1
   11f40:	ldr	r3, [sp, #156]	; 0x9c
   11f44:	ldrb	r3, [r3, r4]
   11f48:	cmp	r3, #0
   11f4c:	bne	11f34 <__assert_fail@plt+0xfc4>
   11f50:	ldr	r0, [sp, #160]	; 0xa0
   11f54:	bl	10e74 <strlen@plt>
   11f58:	ldr	r3, [sp, #160]	; 0xa0
   11f5c:	str	r3, [sp, #40]	; 0x28
   11f60:	mov	r3, #1
   11f64:	str	r3, [sp, #24]
   11f68:	str	r0, [sp, #32]
   11f6c:	b	11df4 <__assert_fail@plt+0xe84>
   11f70:	mov	r3, #1
   11f74:	cmp	r6, #0
   11f78:	streq	r3, [sp, #24]
   11f7c:	beq	11f9c <__assert_fail@plt+0x102c>
   11f80:	str	r3, [sp, #32]
   11f84:	ldr	r3, [pc, #2772]	; 12a60 <__assert_fail@plt+0x1af0>
   11f88:	mov	r4, #0
   11f8c:	str	r3, [sp, #40]	; 0x28
   11f90:	b	11fc0 <__assert_fail@plt+0x1050>
   11f94:	cmp	r6, #0
   11f98:	bne	12008 <__assert_fail@plt+0x1098>
   11f9c:	cmp	r5, #0
   11fa0:	movne	r3, #39	; 0x27
   11fa4:	strbne	r3, [r8]
   11fa8:	mov	r3, #1
   11fac:	str	r3, [sp, #32]
   11fb0:	mov	r6, #0
   11fb4:	ldr	r3, [pc, #2724]	; 12a60 <__assert_fail@plt+0x1af0>
   11fb8:	mov	r4, #1
   11fbc:	str	r3, [sp, #40]	; 0x28
   11fc0:	mov	sl, #2
   11fc4:	b	11df4 <__assert_fail@plt+0xe84>
   11fc8:	bl	10f58 <abort@plt>
   11fcc:	mov	r6, #0
   11fd0:	mov	r3, #1
   11fd4:	str	r3, [sp, #24]
   11fd8:	mov	r4, r6
   11fdc:	b	11df4 <__assert_fail@plt+0xe84>
   11fe0:	mov	r6, #1
   11fe4:	str	r6, [sp, #24]
   11fe8:	str	r6, [sp, #32]
   11fec:	b	11f84 <__assert_fail@plt+0x1014>
   11ff0:	mov	r3, #1
   11ff4:	str	r3, [sp, #32]
   11ff8:	ldr	r3, [pc, #2648]	; 12a58 <__assert_fail@plt+0x1ae8>
   11ffc:	str	r6, [sp, #24]
   12000:	str	r3, [sp, #40]	; 0x28
   12004:	b	11dc0 <__assert_fail@plt+0xe50>
   12008:	mov	r3, #1
   1200c:	str	r3, [sp, #32]
   12010:	ldr	r3, [pc, #2632]	; 12a60 <__assert_fail@plt+0x1af0>
   12014:	b	12000 <__assert_fail@plt+0x1090>
   12018:	ldr	r3, [sp, #32]
   1201c:	ldr	fp, [sp, #24]
   12020:	cmp	sl, #2
   12024:	moveq	fp, #0
   12028:	andne	fp, fp, #1
   1202c:	adds	r5, r3, #0
   12030:	movne	r5, #1
   12034:	ands	r3, r5, fp
   12038:	str	r3, [sp, #64]	; 0x40
   1203c:	beq	1210c <__assert_fail@plt+0x119c>
   12040:	ldr	r2, [sp, #32]
   12044:	ldr	r3, [sp, #28]
   12048:	add	r7, r3, r2
   1204c:	mov	r3, r2
   12050:	ldr	r2, [sp, #36]	; 0x24
   12054:	cmp	r3, #1
   12058:	movls	r3, #0
   1205c:	movhi	r3, #1
   12060:	cmn	r2, #1
   12064:	movne	r3, #0
   12068:	cmp	r3, #0
   1206c:	beq	1207c <__assert_fail@plt+0x110c>
   12070:	ldr	r0, [sp, #44]	; 0x2c
   12074:	bl	10e74 <strlen@plt>
   12078:	str	r0, [sp, #36]	; 0x24
   1207c:	ldr	r3, [sp, #36]	; 0x24
   12080:	cmp	r3, r7
   12084:	bcc	12104 <__assert_fail@plt+0x1194>
   12088:	ldr	r3, [sp, #44]	; 0x2c
   1208c:	ldr	r0, [sp, #28]
   12090:	ldr	r2, [sp, #32]
   12094:	ldr	r1, [sp, #40]	; 0x28
   12098:	add	r0, r3, r0
   1209c:	bl	10d84 <memcmp@plt>
   120a0:	cmp	r0, #0
   120a4:	bne	12104 <__assert_fail@plt+0x1194>
   120a8:	cmp	r6, #0
   120ac:	beq	1210c <__assert_fail@plt+0x119c>
   120b0:	str	r6, [sp, #24]
   120b4:	ldr	r3, [sp, #24]
   120b8:	ldr	r2, [sp, #44]	; 0x2c
   120bc:	cmp	sl, #2
   120c0:	movne	r3, #0
   120c4:	andeq	r3, r3, #1
   120c8:	cmp	r3, #0
   120cc:	ldr	r3, [sp, #160]	; 0xa0
   120d0:	movne	sl, #4
   120d4:	str	r3, [sp, #16]
   120d8:	ldr	r3, [sp, #156]	; 0x9c
   120dc:	str	sl, [sp]
   120e0:	str	r3, [sp, #12]
   120e4:	mov	r3, #0
   120e8:	str	r3, [sp, #8]
   120ec:	ldr	r3, [sp, #148]	; 0x94
   120f0:	mov	r1, r9
   120f4:	bic	r3, r3, #2
   120f8:	str	r3, [sp, #4]
   120fc:	ldr	r3, [sp, #36]	; 0x24
   12100:	b	11eb0 <__assert_fail@plt+0xf40>
   12104:	mov	r3, #0
   12108:	str	r3, [sp, #64]	; 0x40
   1210c:	ldr	r2, [sp, #28]
   12110:	ldr	r3, [sp, #44]	; 0x2c
   12114:	add	r3, r3, r2
   12118:	str	r3, [sp, #80]	; 0x50
   1211c:	ldr	r3, [sp, #44]	; 0x2c
   12120:	ldrb	r7, [r3, r2]
   12124:	cmp	r7, #58	; 0x3a
   12128:	bhi	12290 <__assert_fail@plt+0x1320>
   1212c:	cmp	r7, #43	; 0x2b
   12130:	bcs	122e4 <__assert_fail@plt+0x1374>
   12134:	cmp	r7, #32
   12138:	beq	1233c <__assert_fail@plt+0x13cc>
   1213c:	bhi	121e8 <__assert_fail@plt+0x1278>
   12140:	cmp	r7, #9
   12144:	beq	125f0 <__assert_fail@plt+0x1680>
   12148:	bhi	121ac <__assert_fail@plt+0x123c>
   1214c:	cmp	r7, #7
   12150:	beq	1269c <__assert_fail@plt+0x172c>
   12154:	bhi	12358 <__assert_fail@plt+0x13e8>
   12158:	cmp	r7, #0
   1215c:	beq	12374 <__assert_fail@plt+0x1404>
   12160:	ldr	r3, [sp, #76]	; 0x4c
   12164:	cmp	r3, #1
   12168:	bne	126e0 <__assert_fail@plt+0x1770>
   1216c:	bl	10e5c <__ctype_b_loc@plt>
   12170:	sxth	r3, r7
   12174:	lsl	r3, r3, #1
   12178:	ldr	r2, [r0]
   1217c:	ldrh	r5, [r2, r3]
   12180:	ldr	r3, [sp, #76]	; 0x4c
   12184:	str	r3, [sp, #56]	; 0x38
   12188:	lsr	r5, r5, #14
   1218c:	and	r5, r5, #1
   12190:	ldr	r3, [sp, #24]
   12194:	eor	fp, r5, #1
   12198:	and	fp, fp, r3
   1219c:	ands	fp, fp, #255	; 0xff
   121a0:	beq	12528 <__assert_fail@plt+0x15b8>
   121a4:	mov	r5, #0
   121a8:	b	1278c <__assert_fail@plt+0x181c>
   121ac:	cmp	r7, #11
   121b0:	beq	125f8 <__assert_fail@plt+0x1688>
   121b4:	bcc	12694 <__assert_fail@plt+0x1724>
   121b8:	cmp	r7, #12
   121bc:	beq	126a4 <__assert_fail@plt+0x1734>
   121c0:	cmp	r7, #13
   121c4:	moveq	r3, #114	; 0x72
   121c8:	bne	12160 <__assert_fail@plt+0x11f0>
   121cc:	cmp	sl, #2
   121d0:	movne	r2, #0
   121d4:	andeq	r2, r6, #1
   121d8:	cmp	r2, #0
   121dc:	beq	1235c <__assert_fail@plt+0x13ec>
   121e0:	mov	sl, #2
   121e4:	b	120b4 <__assert_fail@plt+0x1144>
   121e8:	cmp	r7, #37	; 0x25
   121ec:	beq	122e4 <__assert_fail@plt+0x1374>
   121f0:	bhi	12204 <__assert_fail@plt+0x1294>
   121f4:	cmp	r7, #35	; 0x23
   121f8:	beq	12330 <__assert_fail@plt+0x13c0>
   121fc:	mov	r5, #0
   12200:	b	12340 <__assert_fail@plt+0x13d0>
   12204:	cmp	r7, #39	; 0x27
   12208:	bne	121fc <__assert_fail@plt+0x128c>
   1220c:	cmp	sl, #2
   12210:	ldrne	r5, [sp, #52]	; 0x34
   12214:	movne	r3, r5
   12218:	strne	r3, [sp, #68]	; 0x44
   1221c:	bne	122e8 <__assert_fail@plt+0x1378>
   12220:	cmp	r6, #0
   12224:	bne	120b4 <__assert_fail@plt+0x1144>
   12228:	ldr	r2, [sp, #60]	; 0x3c
   1222c:	adds	r3, r9, #0
   12230:	movne	r3, #1
   12234:	cmp	r2, #0
   12238:	movne	r3, #0
   1223c:	cmp	r3, #0
   12240:	strne	r9, [sp, #60]	; 0x3c
   12244:	movne	r9, #0
   12248:	bne	12258 <__assert_fail@plt+0x12e8>
   1224c:	cmp	r9, r4
   12250:	movhi	r3, #39	; 0x27
   12254:	strbhi	r3, [r8, r4]
   12258:	add	r3, r4, #1
   1225c:	cmp	r3, r9
   12260:	movcc	r2, #92	; 0x5c
   12264:	strbcc	r2, [r8, r3]
   12268:	add	r3, r4, #2
   1226c:	cmp	r3, r9
   12270:	ldr	r5, [sp, #52]	; 0x34
   12274:	movcc	r2, #39	; 0x27
   12278:	strbcc	r2, [r8, r3]
   1227c:	add	r4, r4, #3
   12280:	mov	fp, r6
   12284:	str	r5, [sp, #68]	; 0x44
   12288:	str	r6, [sp, #48]	; 0x30
   1228c:	b	12528 <__assert_fail@plt+0x15b8>
   12290:	cmp	r7, #94	; 0x5e
   12294:	beq	121fc <__assert_fail@plt+0x128c>
   12298:	bhi	122f0 <__assert_fail@plt+0x1380>
   1229c:	cmp	r7, #90	; 0x5a
   122a0:	bhi	122d8 <__assert_fail@plt+0x1368>
   122a4:	cmp	r7, #65	; 0x41
   122a8:	bcs	122e4 <__assert_fail@plt+0x1374>
   122ac:	cmp	r7, #62	; 0x3e
   122b0:	bls	121fc <__assert_fail@plt+0x128c>
   122b4:	cmp	r7, #63	; 0x3f
   122b8:	bne	12160 <__assert_fail@plt+0x11f0>
   122bc:	cmp	sl, #2
   122c0:	beq	12464 <__assert_fail@plt+0x14f4>
   122c4:	cmp	sl, #5
   122c8:	beq	12474 <__assert_fail@plt+0x1504>
   122cc:	mov	fp, #0
   122d0:	mov	r5, fp
   122d4:	b	12528 <__assert_fail@plt+0x15b8>
   122d8:	cmp	r7, #92	; 0x5c
   122dc:	beq	12600 <__assert_fail@plt+0x1690>
   122e0:	bls	121fc <__assert_fail@plt+0x128c>
   122e4:	ldr	r5, [sp, #52]	; 0x34
   122e8:	mov	fp, #0
   122ec:	b	12528 <__assert_fail@plt+0x15b8>
   122f0:	cmp	r7, #122	; 0x7a
   122f4:	bhi	12314 <__assert_fail@plt+0x13a4>
   122f8:	cmp	r7, #97	; 0x61
   122fc:	bcs	122e4 <__assert_fail@plt+0x1374>
   12300:	cmp	r7, #95	; 0x5f
   12304:	beq	122e4 <__assert_fail@plt+0x1374>
   12308:	cmp	r7, #96	; 0x60
   1230c:	bne	12160 <__assert_fail@plt+0x11f0>
   12310:	b	121fc <__assert_fail@plt+0x128c>
   12314:	cmp	r7, #124	; 0x7c
   12318:	beq	121fc <__assert_fail@plt+0x128c>
   1231c:	bcc	126ac <__assert_fail@plt+0x173c>
   12320:	cmp	r7, #125	; 0x7d
   12324:	beq	126ac <__assert_fail@plt+0x173c>
   12328:	cmp	r7, #126	; 0x7e
   1232c:	bne	12160 <__assert_fail@plt+0x11f0>
   12330:	ldr	r3, [sp, #28]
   12334:	cmp	r3, #0
   12338:	bne	1246c <__assert_fail@plt+0x14fc>
   1233c:	ldr	r5, [sp, #52]	; 0x34
   12340:	cmp	sl, #2
   12344:	movne	fp, #0
   12348:	andeq	fp, r6, #1
   1234c:	cmp	fp, #0
   12350:	beq	12528 <__assert_fail@plt+0x15b8>
   12354:	b	121e0 <__assert_fail@plt+0x1270>
   12358:	mov	r3, #98	; 0x62
   1235c:	ldr	r2, [sp, #24]
   12360:	cmp	r2, #0
   12364:	beq	1246c <__assert_fail@plt+0x14fc>
   12368:	mov	r7, r3
   1236c:	mov	r5, #0
   12370:	b	12580 <__assert_fail@plt+0x1610>
   12374:	ldr	r3, [sp, #24]
   12378:	cmp	r3, #0
   1237c:	beq	12448 <__assert_fail@plt+0x14d8>
   12380:	cmp	r6, #0
   12384:	bne	120b0 <__assert_fail@plt+0x1140>
   12388:	ldr	r3, [sp, #48]	; 0x30
   1238c:	eor	r2, r3, #1
   12390:	cmp	sl, #2
   12394:	movne	r2, #0
   12398:	andeq	r2, r2, #1
   1239c:	cmp	r2, #0
   123a0:	moveq	r3, r4
   123a4:	beq	123dc <__assert_fail@plt+0x146c>
   123a8:	cmp	r9, r4
   123ac:	movhi	r3, #39	; 0x27
   123b0:	strbhi	r3, [r8, r4]
   123b4:	add	r3, r4, #1
   123b8:	cmp	r9, r3
   123bc:	movhi	r1, #36	; 0x24
   123c0:	strbhi	r1, [r8, r3]
   123c4:	add	r3, r4, #2
   123c8:	cmp	r9, r3
   123cc:	movhi	r1, #39	; 0x27
   123d0:	strbhi	r1, [r8, r3]
   123d4:	add	r3, r4, #3
   123d8:	str	r2, [sp, #48]	; 0x30
   123dc:	cmp	r9, r3
   123e0:	movhi	r2, #92	; 0x5c
   123e4:	strbhi	r2, [r8, r3]
   123e8:	cmp	fp, #0
   123ec:	add	r4, r3, #1
   123f0:	beq	12980 <__assert_fail@plt+0x1a10>
   123f4:	ldr	r2, [sp, #28]
   123f8:	ldr	r1, [sp, #36]	; 0x24
   123fc:	add	r2, r2, #1
   12400:	cmp	r1, r2
   12404:	bls	12440 <__assert_fail@plt+0x14d0>
   12408:	ldr	r1, [sp, #44]	; 0x2c
   1240c:	mov	r7, #48	; 0x30
   12410:	ldrb	r2, [r1, r2]
   12414:	sub	r2, r2, #48	; 0x30
   12418:	cmp	r2, #9
   1241c:	movhi	r5, r6
   12420:	bhi	12528 <__assert_fail@plt+0x15b8>
   12424:	cmp	r9, r4
   12428:	add	r2, r3, #2
   1242c:	strbhi	r7, [r8, r4]
   12430:	cmp	r9, r2
   12434:	add	r4, r3, #3
   12438:	movhi	r1, #48	; 0x30
   1243c:	strbhi	r1, [r8, r2]
   12440:	mov	r5, r6
   12444:	b	12988 <__assert_fail@plt+0x1a18>
   12448:	ldr	r3, [sp, #148]	; 0x94
   1244c:	tst	r3, #1
   12450:	ldreq	r5, [sp, #24]
   12454:	beq	12994 <__assert_fail@plt+0x1a24>
   12458:	ldr	r3, [sp, #28]
   1245c:	add	r3, r3, #1
   12460:	b	11e00 <__assert_fail@plt+0xe90>
   12464:	cmp	r6, #0
   12468:	bne	120b4 <__assert_fail@plt+0x1144>
   1246c:	mov	r5, #0
   12470:	b	122e8 <__assert_fail@plt+0x1378>
   12474:	ldr	r3, [sp, #148]	; 0x94
   12478:	tst	r3, #4
   1247c:	beq	1246c <__assert_fail@plt+0x14fc>
   12480:	ldr	r3, [sp, #28]
   12484:	add	r2, r3, #2
   12488:	ldr	r3, [sp, #36]	; 0x24
   1248c:	cmp	r3, r2
   12490:	bls	1246c <__assert_fail@plt+0x14fc>
   12494:	ldr	r3, [sp, #44]	; 0x2c
   12498:	ldr	r1, [sp, #28]
   1249c:	add	r3, r3, r1
   124a0:	ldrb	r0, [r3, #1]
   124a4:	cmp	r0, #63	; 0x3f
   124a8:	bne	1246c <__assert_fail@plt+0x14fc>
   124ac:	ldr	r3, [sp, #44]	; 0x2c
   124b0:	ldrb	r1, [r3, r2]
   124b4:	sub	r3, r1, #33	; 0x21
   124b8:	uxtb	r3, r3
   124bc:	cmp	r3, #29
   124c0:	bhi	12990 <__assert_fail@plt+0x1a20>
   124c4:	mov	ip, #1
   124c8:	ldr	r5, [pc, #1428]	; 12a64 <__assert_fail@plt+0x1af4>
   124cc:	ands	r5, r5, ip, lsl r3
   124d0:	beq	122e8 <__assert_fail@plt+0x1378>
   124d4:	cmp	r6, #0
   124d8:	bne	120b4 <__assert_fail@plt+0x1144>
   124dc:	add	r3, r4, #1
   124e0:	cmp	r9, r4
   124e4:	strbhi	r0, [r8, r4]
   124e8:	cmp	r9, r3
   124ec:	movhi	r0, #34	; 0x22
   124f0:	strbhi	r0, [r8, r3]
   124f4:	add	r3, r4, #2
   124f8:	cmp	r9, r3
   124fc:	movhi	r0, #34	; 0x22
   12500:	strbhi	r0, [r8, r3]
   12504:	add	r3, r4, #3
   12508:	cmp	r9, r3
   1250c:	add	r4, r4, #4
   12510:	mov	r5, r6
   12514:	mov	fp, r6
   12518:	mov	r7, r1
   1251c:	movhi	r0, #63	; 0x3f
   12520:	strbhi	r0, [r8, r3]
   12524:	str	r2, [sp, #28]
   12528:	ldr	r3, [sp, #24]
   1252c:	eor	r3, r3, #1
   12530:	cmp	sl, #2
   12534:	orreq	r3, r3, #1
   12538:	eor	r3, r3, #1
   1253c:	orr	r3, r6, r3
   12540:	tst	r3, #255	; 0xff
   12544:	beq	12574 <__assert_fail@plt+0x1604>
   12548:	ldr	r3, [sp, #152]	; 0x98
   1254c:	cmp	r3, #0
   12550:	beq	12574 <__assert_fail@plt+0x1604>
   12554:	lsr	r2, r7, #5
   12558:	ldr	r1, [sp, #152]	; 0x98
   1255c:	uxtb	r2, r2
   12560:	and	r3, r7, #31
   12564:	ldr	r2, [r1, r2, lsl #2]
   12568:	lsr	r3, r2, r3
   1256c:	tst	r3, #1
   12570:	bne	12580 <__assert_fail@plt+0x1610>
   12574:	ldr	r3, [sp, #64]	; 0x40
   12578:	cmp	r3, #0
   1257c:	beq	12618 <__assert_fail@plt+0x16a8>
   12580:	cmp	r6, #0
   12584:	bne	120b4 <__assert_fail@plt+0x1144>
   12588:	ldr	r3, [sp, #48]	; 0x30
   1258c:	eor	r3, r3, #1
   12590:	cmp	sl, #2
   12594:	movne	r3, #0
   12598:	andeq	r3, r3, #1
   1259c:	cmp	r3, #0
   125a0:	beq	125d8 <__assert_fail@plt+0x1668>
   125a4:	cmp	r9, r4
   125a8:	movhi	r2, #39	; 0x27
   125ac:	strbhi	r2, [r8, r4]
   125b0:	add	r2, r4, #1
   125b4:	cmp	r9, r2
   125b8:	movhi	r1, #36	; 0x24
   125bc:	strbhi	r1, [r8, r2]
   125c0:	add	r2, r4, #2
   125c4:	cmp	r9, r2
   125c8:	add	r4, r4, #3
   125cc:	movhi	r1, #39	; 0x27
   125d0:	strbhi	r1, [r8, r2]
   125d4:	str	r3, [sp, #48]	; 0x30
   125d8:	cmp	r9, r4
   125dc:	movhi	r3, #92	; 0x5c
   125e0:	strbhi	r3, [r8, r4]
   125e4:	ldr	fp, [sp, #52]	; 0x34
   125e8:	add	r4, r4, #1
   125ec:	b	12618 <__assert_fail@plt+0x16a8>
   125f0:	mov	r3, #116	; 0x74
   125f4:	b	121cc <__assert_fail@plt+0x125c>
   125f8:	mov	r3, #118	; 0x76
   125fc:	b	1235c <__assert_fail@plt+0x13ec>
   12600:	cmp	sl, #2
   12604:	bne	12674 <__assert_fail@plt+0x1704>
   12608:	cmp	r6, #0
   1260c:	bne	120b4 <__assert_fail@plt+0x1144>
   12610:	mov	r5, r6
   12614:	mov	fp, r6
   12618:	ldr	r3, [sp, #48]	; 0x30
   1261c:	eor	fp, fp, #1
   12620:	and	fp, fp, r3
   12624:	tst	fp, #255	; 0xff
   12628:	beq	12654 <__assert_fail@plt+0x16e4>
   1262c:	cmp	r9, r4
   12630:	movhi	r3, #39	; 0x27
   12634:	strbhi	r3, [r8, r4]
   12638:	add	r3, r4, #1
   1263c:	cmp	r9, r3
   12640:	movhi	r2, #39	; 0x27
   12644:	add	r4, r4, #2
   12648:	strbhi	r2, [r8, r3]
   1264c:	mov	r3, #0
   12650:	str	r3, [sp, #48]	; 0x30
   12654:	cmp	r9, r4
   12658:	strbhi	r7, [r8, r4]
   1265c:	ldr	r3, [sp, #72]	; 0x48
   12660:	cmp	r5, #0
   12664:	moveq	r3, #0
   12668:	add	r4, r4, #1
   1266c:	str	r3, [sp, #72]	; 0x48
   12670:	b	12458 <__assert_fail@plt+0x14e8>
   12674:	ldr	r3, [sp, #24]
   12678:	and	r3, r3, r6
   1267c:	tst	r5, r3
   12680:	moveq	r3, r7
   12684:	beq	121cc <__assert_fail@plt+0x125c>
   12688:	mov	fp, #0
   1268c:	mov	r5, fp
   12690:	b	12618 <__assert_fail@plt+0x16a8>
   12694:	mov	r3, #110	; 0x6e
   12698:	b	121cc <__assert_fail@plt+0x125c>
   1269c:	mov	r3, #97	; 0x61
   126a0:	b	1235c <__assert_fail@plt+0x13ec>
   126a4:	mov	r3, #102	; 0x66
   126a8:	b	1235c <__assert_fail@plt+0x13ec>
   126ac:	ldr	r3, [sp, #36]	; 0x24
   126b0:	cmn	r3, #1
   126b4:	bne	126d4 <__assert_fail@plt+0x1764>
   126b8:	ldr	r3, [sp, #44]	; 0x2c
   126bc:	ldrb	r3, [r3, #1]
   126c0:	adds	r3, r3, #0
   126c4:	movne	r3, #1
   126c8:	cmp	r3, #0
   126cc:	bne	1246c <__assert_fail@plt+0x14fc>
   126d0:	b	12330 <__assert_fail@plt+0x13c0>
   126d4:	ldr	r3, [sp, #36]	; 0x24
   126d8:	subs	r3, r3, #1
   126dc:	b	126c4 <__assert_fail@plt+0x1754>
   126e0:	mov	r3, #0
   126e4:	str	r3, [sp, #96]	; 0x60
   126e8:	str	r3, [sp, #100]	; 0x64
   126ec:	ldr	r3, [sp, #36]	; 0x24
   126f0:	cmn	r3, #1
   126f4:	bne	12704 <__assert_fail@plt+0x1794>
   126f8:	ldr	r0, [sp, #44]	; 0x2c
   126fc:	bl	10e74 <strlen@plt>
   12700:	str	r0, [sp, #36]	; 0x24
   12704:	ldr	r5, [sp, #52]	; 0x34
   12708:	mov	r3, #0
   1270c:	str	r3, [sp, #56]	; 0x38
   12710:	ldr	r3, [sp, #28]
   12714:	ldr	r2, [sp, #56]	; 0x38
   12718:	ldr	r1, [sp, #36]	; 0x24
   1271c:	add	r2, r3, r2
   12720:	ldr	r3, [sp, #44]	; 0x2c
   12724:	add	r0, sp, #92	; 0x5c
   12728:	add	fp, r3, r2
   1272c:	sub	r2, r1, r2
   12730:	add	r3, sp, #96	; 0x60
   12734:	mov	r1, fp
   12738:	bl	14274 <__assert_fail@plt+0x3304>
   1273c:	subs	r2, r0, #0
   12740:	beq	12780 <__assert_fail@plt+0x1810>
   12744:	cmn	r2, #1
   12748:	beq	12958 <__assert_fail@plt+0x19e8>
   1274c:	cmn	r2, #2
   12750:	bne	128c8 <__assert_fail@plt+0x1958>
   12754:	ldr	r2, [sp, #56]	; 0x38
   12758:	ldr	r3, [sp, #28]
   1275c:	add	r3, r3, r2
   12760:	ldr	r2, [sp, #36]	; 0x24
   12764:	cmp	r2, r3
   12768:	bls	12958 <__assert_fail@plt+0x19e8>
   1276c:	ldr	r3, [sp, #80]	; 0x50
   12770:	ldr	r2, [sp, #56]	; 0x38
   12774:	ldrb	r5, [r3, r2]
   12778:	cmp	r5, #0
   1277c:	bne	128b8 <__assert_fail@plt+0x1948>
   12780:	ldr	r3, [sp, #56]	; 0x38
   12784:	cmp	r3, #1
   12788:	bls	12190 <__assert_fail@plt+0x1220>
   1278c:	ldr	r2, [sp, #56]	; 0x38
   12790:	ldr	r3, [sp, #28]
   12794:	mov	fp, #0
   12798:	add	r3, r3, r2
   1279c:	ldr	r2, [sp, #24]
   127a0:	str	r3, [sp, #52]	; 0x34
   127a4:	eor	r3, r5, #1
   127a8:	and	r3, r3, r2
   127ac:	mov	ip, #92	; 0x5c
   127b0:	uxtb	r3, r3
   127b4:	mov	r2, #39	; 0x27
   127b8:	cmp	r3, #0
   127bc:	beq	12960 <__assert_fail@plt+0x19f0>
   127c0:	cmp	r6, #0
   127c4:	bne	120b0 <__assert_fail@plt+0x1140>
   127c8:	ldr	r1, [sp, #48]	; 0x30
   127cc:	eor	r1, r1, #1
   127d0:	cmp	sl, #2
   127d4:	movne	r1, #0
   127d8:	andeq	r1, r1, #1
   127dc:	cmp	r1, #0
   127e0:	beq	12810 <__assert_fail@plt+0x18a0>
   127e4:	add	r0, r4, #1
   127e8:	cmp	r9, r4
   127ec:	strbhi	r2, [r8, r4]
   127f0:	cmp	r9, r0
   127f4:	movhi	lr, #36	; 0x24
   127f8:	strbhi	lr, [r8, r0]
   127fc:	add	r0, r4, #2
   12800:	add	r4, r4, #3
   12804:	cmp	r9, r0
   12808:	strbhi	r2, [r8, r0]
   1280c:	str	r1, [sp, #48]	; 0x30
   12810:	add	r0, r4, #1
   12814:	cmp	r9, r4
   12818:	strbhi	ip, [r8, r4]
   1281c:	cmp	r9, r0
   12820:	lsrhi	r1, r7, #6
   12824:	addhi	r1, r1, #48	; 0x30
   12828:	strbhi	r1, [r8, r0]
   1282c:	add	r0, r4, #2
   12830:	cmp	r9, r0
   12834:	lsrhi	r1, r7, #3
   12838:	and	r7, r7, #7
   1283c:	andhi	r1, r1, #7
   12840:	add	r4, r4, #3
   12844:	add	r7, r7, #48	; 0x30
   12848:	mov	fp, r3
   1284c:	addhi	r1, r1, #48	; 0x30
   12850:	strbhi	r1, [r8, r0]
   12854:	ldr	r1, [sp, #28]
   12858:	ldr	r0, [sp, #52]	; 0x34
   1285c:	add	r1, r1, #1
   12860:	cmp	r0, r1
   12864:	bls	12618 <__assert_fail@plt+0x16a8>
   12868:	ldr	lr, [sp, #48]	; 0x30
   1286c:	eor	r0, fp, #1
   12870:	and	r0, r0, lr
   12874:	tst	r0, #255	; 0xff
   12878:	beq	1289c <__assert_fail@plt+0x192c>
   1287c:	add	r0, r4, #1
   12880:	cmp	r9, r4
   12884:	strbhi	r2, [r8, r4]
   12888:	cmp	r9, r0
   1288c:	add	r4, r4, #2
   12890:	strbhi	r2, [r8, r0]
   12894:	mov	r0, #0
   12898:	str	r0, [sp, #48]	; 0x30
   1289c:	ldr	r0, [sp, #44]	; 0x2c
   128a0:	cmp	r9, r4
   128a4:	strbhi	r7, [r8, r4]
   128a8:	str	r1, [sp, #28]
   128ac:	add	r4, r4, #1
   128b0:	ldrb	r7, [r0, r1]
   128b4:	b	127b8 <__assert_fail@plt+0x1848>
   128b8:	ldr	r3, [sp, #56]	; 0x38
   128bc:	add	r3, r3, #1
   128c0:	str	r3, [sp, #56]	; 0x38
   128c4:	b	12754 <__assert_fail@plt+0x17e4>
   128c8:	cmp	sl, #2
   128cc:	movne	r3, #0
   128d0:	andeq	r3, r6, #1
   128d4:	cmp	r3, #0
   128d8:	movne	r1, #1
   128dc:	bne	12938 <__assert_fail@plt+0x19c8>
   128e0:	ldr	r0, [sp, #92]	; 0x5c
   128e4:	str	r2, [sp, #84]	; 0x54
   128e8:	bl	10dcc <iswprint@plt>
   128ec:	ldr	r3, [sp, #56]	; 0x38
   128f0:	ldr	r2, [sp, #84]	; 0x54
   128f4:	add	r3, r3, r2
   128f8:	str	r3, [sp, #56]	; 0x38
   128fc:	cmp	r0, #0
   12900:	add	r0, sp, #96	; 0x60
   12904:	moveq	r5, #0
   12908:	bl	10d6c <mbsinit@plt>
   1290c:	cmp	r0, #0
   12910:	beq	12710 <__assert_fail@plt+0x17a0>
   12914:	b	12780 <__assert_fail@plt+0x1810>
   12918:	ldrb	r3, [fp, r1]
   1291c:	cmp	r3, #94	; 0x5e
   12920:	beq	121e0 <__assert_fail@plt+0x1270>
   12924:	bhi	12944 <__assert_fail@plt+0x19d4>
   12928:	sub	r3, r3, #91	; 0x5b
   1292c:	cmp	r3, #1
   12930:	bls	121e0 <__assert_fail@plt+0x1270>
   12934:	add	r1, r1, #1
   12938:	cmp	r1, r2
   1293c:	bne	12918 <__assert_fail@plt+0x19a8>
   12940:	b	128e0 <__assert_fail@plt+0x1970>
   12944:	cmp	r3, #96	; 0x60
   12948:	beq	121e0 <__assert_fail@plt+0x1270>
   1294c:	cmp	r3, #124	; 0x7c
   12950:	bne	12934 <__assert_fail@plt+0x19c4>
   12954:	b	121e0 <__assert_fail@plt+0x1270>
   12958:	mov	r5, #0
   1295c:	b	12780 <__assert_fail@plt+0x1810>
   12960:	ldr	r1, [sp, #64]	; 0x40
   12964:	cmp	r1, #0
   12968:	beq	12854 <__assert_fail@plt+0x18e4>
   1296c:	cmp	r9, r4
   12970:	strbhi	ip, [r8, r4]
   12974:	str	r3, [sp, #64]	; 0x40
   12978:	add	r4, r4, #1
   1297c:	b	12854 <__assert_fail@plt+0x18e4>
   12980:	mov	r5, fp
   12984:	ldr	fp, [sp, #24]
   12988:	mov	r7, #48	; 0x30
   1298c:	b	12528 <__assert_fail@plt+0x15b8>
   12990:	mov	r5, #0
   12994:	mov	fp, r5
   12998:	b	12528 <__assert_fail@plt+0x15b8>
   1299c:	ldr	r3, [sp, #36]	; 0x24
   129a0:	ldr	r2, [sp, #28]
   129a4:	subs	r3, r3, r2
   129a8:	movne	r3, #1
   129ac:	b	11e24 <__assert_fail@plt+0xeb4>
   129b0:	ldr	r3, [sp, #60]	; 0x3c
   129b4:	clz	r7, r9
   129b8:	cmp	r3, #0
   129bc:	lsr	r7, r7, #5
   129c0:	moveq	r7, #0
   129c4:	cmp	r7, #0
   129c8:	mov	r5, r3
   129cc:	bne	11d84 <__assert_fail@plt+0xe14>
   129d0:	ldr	r3, [sp, #68]	; 0x44
   129d4:	ldr	r2, [sp, #40]	; 0x28
   129d8:	cmp	r2, #0
   129dc:	moveq	r3, #0
   129e0:	andne	r3, r3, #1
   129e4:	cmp	r3, #0
   129e8:	movne	r3, r2
   129ec:	subne	r2, r3, #1
   129f0:	bne	12a20 <__assert_fail@plt+0x1ab0>
   129f4:	cmp	r9, r4
   129f8:	movhi	r3, #0
   129fc:	strbhi	r3, [r8, r4]
   12a00:	mov	r0, r4
   12a04:	add	sp, sp, #108	; 0x6c
   12a08:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12a0c:	mov	r3, r2
   12a10:	b	129d4 <__assert_fail@plt+0x1a64>
   12a14:	cmp	r9, r4
   12a18:	strbhi	r3, [r8, r4]
   12a1c:	add	r4, r4, #1
   12a20:	ldrb	r3, [r2, #1]!
   12a24:	cmp	r3, #0
   12a28:	bne	12a14 <__assert_fail@plt+0x1aa4>
   12a2c:	b	129f4 <__assert_fail@plt+0x1a84>
   12a30:	ldr	r3, [pc, #32]	; 12a58 <__assert_fail@plt+0x1ae8>
   12a34:	mov	r6, #1
   12a38:	str	r6, [sp, #24]
   12a3c:	str	r6, [sp, #32]
   12a40:	str	r3, [sp, #40]	; 0x28
   12a44:	mov	r4, #0
   12a48:	mov	sl, #5
   12a4c:	b	11df4 <__assert_fail@plt+0xe84>
   12a50:	mov	r6, #1
   12a54:	b	11fe8 <__assert_fail@plt+0x1078>
   12a58:	andeq	r4, r1, r7, ror #30
   12a5c:	andeq	r4, r1, fp, ror #30
   12a60:	andeq	r4, r1, r9, ror #30
   12a64:	stmdacc	r0, {r0, r6, r7, r8, ip, lr}
   12a68:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12a6c:	sub	sp, sp, #52	; 0x34
   12a70:	mov	r6, r0
   12a74:	mov	r5, r3
   12a78:	mov	r8, r1
   12a7c:	mov	r9, r2
   12a80:	bl	10e8c <__errno_location@plt>
   12a84:	ldr	r7, [pc, #380]	; 12c08 <__assert_fail@plt+0x1c98>
   12a88:	cmn	r6, #-2147483647	; 0x80000001
   12a8c:	ldr	r4, [r7]
   12a90:	ldr	r3, [r0]
   12a94:	str	r0, [sp, #24]
   12a98:	str	r3, [sp, #32]
   12a9c:	movne	r3, #0
   12aa0:	moveq	r3, #1
   12aa4:	orrs	r3, r3, r6, lsr #31
   12aa8:	beq	12ab0 <__assert_fail@plt+0x1b40>
   12aac:	bl	10f58 <abort@plt>
   12ab0:	ldr	r2, [r7, #4]
   12ab4:	cmp	r6, r2
   12ab8:	blt	12b28 <__assert_fail@plt+0x1bb8>
   12abc:	add	r1, sp, #48	; 0x30
   12ac0:	add	sl, r7, #8
   12ac4:	str	r2, [r1, #-4]!
   12ac8:	cmp	r4, sl
   12acc:	mov	r3, #8
   12ad0:	sub	r2, r6, r2
   12ad4:	movne	r0, r4
   12ad8:	str	r3, [sp]
   12adc:	add	r2, r2, #1
   12ae0:	mvn	r3, #-2147483648	; 0x80000000
   12ae4:	moveq	r0, #0
   12ae8:	bl	137fc <__assert_fail@plt+0x288c>
   12aec:	cmp	r4, sl
   12af0:	ldr	r2, [sp, #44]	; 0x2c
   12af4:	mov	fp, r0
   12af8:	str	r0, [r7]
   12afc:	ldmeq	r4, {r0, r1}
   12b00:	mov	r4, fp
   12b04:	stmeq	fp, {r0, r1}
   12b08:	ldr	r0, [r7, #4]
   12b0c:	mov	r1, #0
   12b10:	sub	r2, r2, r0
   12b14:	add	r0, fp, r0, lsl #3
   12b18:	lsl	r2, r2, #3
   12b1c:	bl	10ea4 <memset@plt>
   12b20:	ldr	r3, [sp, #44]	; 0x2c
   12b24:	str	r3, [r7, #4]
   12b28:	ldr	r3, [r5, #4]
   12b2c:	add	sl, r4, r6, lsl #3
   12b30:	orr	r3, r3, #1
   12b34:	str	r3, [sp, #28]
   12b38:	add	r3, r5, #8
   12b3c:	str	r3, [sp, #36]	; 0x24
   12b40:	ldr	r3, [r5, #44]	; 0x2c
   12b44:	ldr	fp, [r4, r6, lsl #3]
   12b48:	ldr	r7, [sl, #4]
   12b4c:	str	r3, [sp, #16]
   12b50:	ldr	r3, [r5, #40]	; 0x28
   12b54:	mov	r2, r8
   12b58:	str	r3, [sp, #12]
   12b5c:	add	r3, r5, #8
   12b60:	str	r3, [sp, #8]
   12b64:	ldr	r3, [sp, #28]
   12b68:	mov	r1, fp
   12b6c:	str	r3, [sp, #4]
   12b70:	ldr	r3, [r5]
   12b74:	mov	r0, r7
   12b78:	str	r3, [sp]
   12b7c:	mov	r3, r9
   12b80:	bl	11d34 <__assert_fail@plt+0xdc4>
   12b84:	cmp	fp, r0
   12b88:	bhi	12bf0 <__assert_fail@plt+0x1c80>
   12b8c:	ldr	r3, [pc, #120]	; 12c0c <__assert_fail@plt+0x1c9c>
   12b90:	add	fp, r0, #1
   12b94:	cmp	r7, r3
   12b98:	str	fp, [r4, r6, lsl #3]
   12b9c:	beq	12ba8 <__assert_fail@plt+0x1c38>
   12ba0:	mov	r0, r7
   12ba4:	bl	141ec <__assert_fail@plt+0x327c>
   12ba8:	mov	r0, fp
   12bac:	bl	136b4 <__assert_fail@plt+0x2744>
   12bb0:	ldr	r3, [r5, #44]	; 0x2c
   12bb4:	mov	r2, r8
   12bb8:	mov	r1, fp
   12bbc:	str	r0, [sl, #4]
   12bc0:	str	r3, [sp, #16]
   12bc4:	ldr	r3, [r5, #40]	; 0x28
   12bc8:	mov	r7, r0
   12bcc:	str	r3, [sp, #12]
   12bd0:	add	r3, r5, #8
   12bd4:	str	r3, [sp, #8]
   12bd8:	ldr	r3, [sp, #28]
   12bdc:	str	r3, [sp, #4]
   12be0:	ldr	r3, [r5]
   12be4:	str	r3, [sp]
   12be8:	mov	r3, r9
   12bec:	bl	11d34 <__assert_fail@plt+0xdc4>
   12bf0:	ldr	r3, [sp, #24]
   12bf4:	ldr	r2, [sp, #32]
   12bf8:	mov	r0, r7
   12bfc:	str	r2, [r3]
   12c00:	add	sp, sp, #52	; 0x34
   12c04:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12c08:	strdeq	r6, [r2], -r8
   12c0c:	andeq	r6, r2, ip, ror r1
   12c10:	push	{r4, r5, r6, lr}
   12c14:	mov	r5, r0
   12c18:	bl	10e8c <__errno_location@plt>
   12c1c:	cmp	r5, #0
   12c20:	mov	r1, #48	; 0x30
   12c24:	ldr	r6, [r0]
   12c28:	mov	r4, r0
   12c2c:	ldr	r0, [pc, #12]	; 12c40 <__assert_fail@plt+0x1cd0>
   12c30:	movne	r0, r5
   12c34:	bl	13a90 <__assert_fail@plt+0x2b20>
   12c38:	str	r6, [r4]
   12c3c:	pop	{r4, r5, r6, pc}
   12c40:	andeq	r6, r2, ip, ror r2
   12c44:	ldr	r3, [pc, #12]	; 12c58 <__assert_fail@plt+0x1ce8>
   12c48:	cmp	r0, #0
   12c4c:	moveq	r0, r3
   12c50:	ldr	r0, [r0]
   12c54:	bx	lr
   12c58:	andeq	r6, r2, ip, ror r2
   12c5c:	ldr	r3, [pc, #12]	; 12c70 <__assert_fail@plt+0x1d00>
   12c60:	cmp	r0, #0
   12c64:	moveq	r0, r3
   12c68:	str	r1, [r0]
   12c6c:	bx	lr
   12c70:	andeq	r6, r2, ip, ror r2
   12c74:	ldr	r3, [pc, #52]	; 12cb0 <__assert_fail@plt+0x1d40>
   12c78:	cmp	r0, #0
   12c7c:	moveq	r0, r3
   12c80:	add	r3, r0, #8
   12c84:	push	{lr}		; (str lr, [sp, #-4]!)
   12c88:	lsr	lr, r1, #5
   12c8c:	and	r1, r1, #31
   12c90:	ldr	ip, [r3, lr, lsl #2]
   12c94:	lsr	r0, ip, r1
   12c98:	eor	r2, r2, r0
   12c9c:	and	r2, r2, #1
   12ca0:	and	r0, r0, #1
   12ca4:	eor	r1, ip, r2, lsl r1
   12ca8:	str	r1, [r3, lr, lsl #2]
   12cac:	pop	{pc}		; (ldr pc, [sp], #4)
   12cb0:	andeq	r6, r2, ip, ror r2
   12cb4:	ldr	r3, [pc, #16]	; 12ccc <__assert_fail@plt+0x1d5c>
   12cb8:	cmp	r0, #0
   12cbc:	movne	r3, r0
   12cc0:	ldr	r0, [r3, #4]
   12cc4:	str	r1, [r3, #4]
   12cc8:	bx	lr
   12ccc:	andeq	r6, r2, ip, ror r2
   12cd0:	ldr	r3, [pc, #44]	; 12d04 <__assert_fail@plt+0x1d94>
   12cd4:	cmp	r0, #0
   12cd8:	moveq	r0, r3
   12cdc:	mov	r3, #10
   12ce0:	cmp	r2, #0
   12ce4:	cmpne	r1, #0
   12ce8:	str	r3, [r0]
   12cec:	bne	12cf8 <__assert_fail@plt+0x1d88>
   12cf0:	push	{r4, lr}
   12cf4:	bl	10f58 <abort@plt>
   12cf8:	str	r1, [r0, #40]	; 0x28
   12cfc:	str	r2, [r0, #44]	; 0x2c
   12d00:	bx	lr
   12d04:	andeq	r6, r2, ip, ror r2
   12d08:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   12d0c:	sub	sp, sp, #24
   12d10:	mov	sl, r3
   12d14:	ldr	r4, [sp, #56]	; 0x38
   12d18:	ldr	r3, [pc, #100]	; 12d84 <__assert_fail@plt+0x1e14>
   12d1c:	cmp	r4, #0
   12d20:	moveq	r4, r3
   12d24:	mov	r7, r0
   12d28:	mov	r8, r1
   12d2c:	mov	r9, r2
   12d30:	bl	10e8c <__errno_location@plt>
   12d34:	ldr	r3, [r4, #44]	; 0x2c
   12d38:	mov	r2, r9
   12d3c:	mov	r1, r8
   12d40:	ldr	r6, [r0]
   12d44:	str	r3, [sp, #16]
   12d48:	ldr	r3, [r4, #40]	; 0x28
   12d4c:	mov	r5, r0
   12d50:	str	r3, [sp, #12]
   12d54:	add	r3, r4, #8
   12d58:	str	r3, [sp, #8]
   12d5c:	ldr	r3, [r4, #4]
   12d60:	mov	r0, r7
   12d64:	str	r3, [sp, #4]
   12d68:	ldr	r3, [r4]
   12d6c:	str	r3, [sp]
   12d70:	mov	r3, sl
   12d74:	bl	11d34 <__assert_fail@plt+0xdc4>
   12d78:	str	r6, [r5]
   12d7c:	add	sp, sp, #24
   12d80:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   12d84:	andeq	r6, r2, ip, ror r2
   12d88:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12d8c:	cmp	r3, #0
   12d90:	sub	sp, sp, #44	; 0x2c
   12d94:	ldr	r4, [pc, #188]	; 12e58 <__assert_fail@plt+0x1ee8>
   12d98:	mov	r6, r2
   12d9c:	movne	r4, r3
   12da0:	mov	sl, r1
   12da4:	mov	r9, r0
   12da8:	bl	10e8c <__errno_location@plt>
   12dac:	ldr	r5, [r4, #4]
   12db0:	add	fp, r4, #8
   12db4:	cmp	r6, #0
   12db8:	orreq	r5, r5, #1
   12dbc:	mov	r1, #0
   12dc0:	mov	r2, r9
   12dc4:	ldr	r3, [r0]
   12dc8:	mov	r8, r0
   12dcc:	str	r3, [sp, #28]
   12dd0:	ldr	r3, [r4, #44]	; 0x2c
   12dd4:	mov	r0, r1
   12dd8:	str	r3, [sp, #16]
   12ddc:	ldr	r3, [r4, #40]	; 0x28
   12de0:	stmib	sp, {r5, fp}
   12de4:	str	r3, [sp, #12]
   12de8:	ldr	r3, [r4]
   12dec:	str	r3, [sp]
   12df0:	mov	r3, sl
   12df4:	bl	11d34 <__assert_fail@plt+0xdc4>
   12df8:	add	r1, r0, #1
   12dfc:	mov	r7, r0
   12e00:	mov	r0, r1
   12e04:	str	r1, [sp, #36]	; 0x24
   12e08:	bl	136b4 <__assert_fail@plt+0x2744>
   12e0c:	ldr	r3, [r4, #44]	; 0x2c
   12e10:	mov	r2, r9
   12e14:	str	r3, [sp, #16]
   12e18:	ldr	r3, [r4, #40]	; 0x28
   12e1c:	stmib	sp, {r5, fp}
   12e20:	str	r3, [sp, #12]
   12e24:	ldr	r3, [r4]
   12e28:	ldr	r1, [sp, #36]	; 0x24
   12e2c:	str	r3, [sp]
   12e30:	mov	r3, sl
   12e34:	str	r0, [sp, #32]
   12e38:	bl	11d34 <__assert_fail@plt+0xdc4>
   12e3c:	ldr	r3, [sp, #28]
   12e40:	cmp	r6, #0
   12e44:	str	r3, [r8]
   12e48:	ldr	r0, [sp, #32]
   12e4c:	strne	r7, [r6]
   12e50:	add	sp, sp, #44	; 0x2c
   12e54:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12e58:	andeq	r6, r2, ip, ror r2
   12e5c:	mov	r3, r2
   12e60:	mov	r2, #0
   12e64:	b	12d88 <__assert_fail@plt+0x1e18>
   12e68:	push	{r4, r5, r6, r7, r8, lr}
   12e6c:	mov	r6, #1
   12e70:	ldr	r4, [pc, #104]	; 12ee0 <__assert_fail@plt+0x1f70>
   12e74:	ldr	r5, [r4]
   12e78:	add	r7, r5, #12
   12e7c:	ldr	r3, [r4, #4]
   12e80:	add	r7, r7, #8
   12e84:	cmp	r6, r3
   12e88:	blt	12ed0 <__assert_fail@plt+0x1f60>
   12e8c:	ldr	r0, [r5, #4]
   12e90:	ldr	r6, [pc, #76]	; 12ee4 <__assert_fail@plt+0x1f74>
   12e94:	cmp	r0, r6
   12e98:	beq	12eac <__assert_fail@plt+0x1f3c>
   12e9c:	bl	141ec <__assert_fail@plt+0x327c>
   12ea0:	mov	r3, #256	; 0x100
   12ea4:	str	r3, [r4, #8]
   12ea8:	str	r6, [r4, #12]
   12eac:	ldr	r6, [pc, #52]	; 12ee8 <__assert_fail@plt+0x1f78>
   12eb0:	cmp	r5, r6
   12eb4:	beq	12ec4 <__assert_fail@plt+0x1f54>
   12eb8:	mov	r0, r5
   12ebc:	bl	141ec <__assert_fail@plt+0x327c>
   12ec0:	str	r6, [r4]
   12ec4:	mov	r3, #1
   12ec8:	str	r3, [r4, #4]
   12ecc:	pop	{r4, r5, r6, r7, r8, pc}
   12ed0:	ldr	r0, [r7, #-8]
   12ed4:	bl	141ec <__assert_fail@plt+0x327c>
   12ed8:	add	r6, r6, #1
   12edc:	b	12e7c <__assert_fail@plt+0x1f0c>
   12ee0:	strdeq	r6, [r2], -r8
   12ee4:	andeq	r6, r2, ip, ror r1
   12ee8:	andeq	r6, r2, r0, lsl #2
   12eec:	ldr	r3, [pc, #4]	; 12ef8 <__assert_fail@plt+0x1f88>
   12ef0:	mvn	r2, #0
   12ef4:	b	12a68 <__assert_fail@plt+0x1af8>
   12ef8:	andeq	r6, r2, ip, ror r2
   12efc:	ldr	r3, [pc]	; 12f04 <__assert_fail@plt+0x1f94>
   12f00:	b	12a68 <__assert_fail@plt+0x1af8>
   12f04:	andeq	r6, r2, ip, ror r2
   12f08:	mov	r1, r0
   12f0c:	mov	r0, #0
   12f10:	b	12eec <__assert_fail@plt+0x1f7c>
   12f14:	mov	r2, r1
   12f18:	mov	r1, r0
   12f1c:	mov	r0, #0
   12f20:	b	12efc <__assert_fail@plt+0x1f8c>
   12f24:	push	{r4, r5, lr}
   12f28:	sub	sp, sp, #52	; 0x34
   12f2c:	mov	r5, r2
   12f30:	mov	r4, r0
   12f34:	mov	r0, sp
   12f38:	bl	11bf0 <__assert_fail@plt+0xc80>
   12f3c:	mov	r3, sp
   12f40:	mvn	r2, #0
   12f44:	mov	r1, r5
   12f48:	mov	r0, r4
   12f4c:	bl	12a68 <__assert_fail@plt+0x1af8>
   12f50:	add	sp, sp, #52	; 0x34
   12f54:	pop	{r4, r5, pc}
   12f58:	push	{r4, r5, r6, lr}
   12f5c:	sub	sp, sp, #48	; 0x30
   12f60:	mov	r5, r2
   12f64:	mov	r6, r3
   12f68:	mov	r4, r0
   12f6c:	mov	r0, sp
   12f70:	bl	11bf0 <__assert_fail@plt+0xc80>
   12f74:	mov	r3, sp
   12f78:	mov	r2, r6
   12f7c:	mov	r1, r5
   12f80:	mov	r0, r4
   12f84:	bl	12a68 <__assert_fail@plt+0x1af8>
   12f88:	add	sp, sp, #48	; 0x30
   12f8c:	pop	{r4, r5, r6, pc}
   12f90:	mov	r2, r1
   12f94:	mov	r1, r0
   12f98:	mov	r0, #0
   12f9c:	b	12f24 <__assert_fail@plt+0x1fb4>
   12fa0:	mov	r3, r2
   12fa4:	mov	r2, r1
   12fa8:	mov	r1, r0
   12fac:	mov	r0, #0
   12fb0:	b	12f58 <__assert_fail@plt+0x1fe8>
   12fb4:	push	{r4, r5, r6, lr}
   12fb8:	mov	r4, r0
   12fbc:	ldr	lr, [pc, #80]	; 13014 <__assert_fail@plt+0x20a4>
   12fc0:	mov	r5, r1
   12fc4:	mov	r6, r2
   12fc8:	ldm	lr!, {r0, r1, r2, r3}
   12fcc:	sub	sp, sp, #48	; 0x30
   12fd0:	mov	ip, sp
   12fd4:	stmia	ip!, {r0, r1, r2, r3}
   12fd8:	ldm	lr!, {r0, r1, r2, r3}
   12fdc:	stmia	ip!, {r0, r1, r2, r3}
   12fe0:	ldm	lr, {r0, r1, r2, r3}
   12fe4:	stm	ip, {r0, r1, r2, r3}
   12fe8:	mov	r1, r6
   12fec:	mov	r2, #1
   12ff0:	mov	r0, sp
   12ff4:	bl	12c74 <__assert_fail@plt+0x1d04>
   12ff8:	mov	r3, sp
   12ffc:	mov	r2, r5
   13000:	mov	r1, r4
   13004:	mov	r0, #0
   13008:	bl	12a68 <__assert_fail@plt+0x1af8>
   1300c:	add	sp, sp, #48	; 0x30
   13010:	pop	{r4, r5, r6, pc}
   13014:	andeq	r6, r2, ip, ror r2
   13018:	mov	r2, r1
   1301c:	mvn	r1, #0
   13020:	b	12fb4 <__assert_fail@plt+0x2044>
   13024:	mov	r1, #58	; 0x3a
   13028:	b	13018 <__assert_fail@plt+0x20a8>
   1302c:	mov	r2, #58	; 0x3a
   13030:	b	12fb4 <__assert_fail@plt+0x2044>
   13034:	push	{r4, r5, lr}
   13038:	sub	sp, sp, #100	; 0x64
   1303c:	mov	r4, r0
   13040:	mov	r0, sp
   13044:	mov	r5, r2
   13048:	bl	11bf0 <__assert_fail@plt+0xc80>
   1304c:	mov	ip, sp
   13050:	add	lr, sp, #48	; 0x30
   13054:	ldm	ip!, {r0, r1, r2, r3}
   13058:	stmia	lr!, {r0, r1, r2, r3}
   1305c:	ldm	ip!, {r0, r1, r2, r3}
   13060:	stmia	lr!, {r0, r1, r2, r3}
   13064:	ldm	ip, {r0, r1, r2, r3}
   13068:	stm	lr, {r0, r1, r2, r3}
   1306c:	mov	r2, #1
   13070:	mov	r1, #58	; 0x3a
   13074:	add	r0, sp, #48	; 0x30
   13078:	bl	12c74 <__assert_fail@plt+0x1d04>
   1307c:	add	r3, sp, #48	; 0x30
   13080:	mvn	r2, #0
   13084:	mov	r1, r5
   13088:	mov	r0, r4
   1308c:	bl	12a68 <__assert_fail@plt+0x1af8>
   13090:	add	sp, sp, #100	; 0x64
   13094:	pop	{r4, r5, pc}
   13098:	push	{r4, r5, r6, r7, lr}
   1309c:	mov	r4, r0
   130a0:	ldr	lr, [pc, #84]	; 130fc <__assert_fail@plt+0x218c>
   130a4:	mov	r6, r1
   130a8:	mov	r7, r2
   130ac:	mov	r5, r3
   130b0:	ldm	lr!, {r0, r1, r2, r3}
   130b4:	sub	sp, sp, #52	; 0x34
   130b8:	mov	ip, sp
   130bc:	stmia	ip!, {r0, r1, r2, r3}
   130c0:	ldm	lr!, {r0, r1, r2, r3}
   130c4:	stmia	ip!, {r0, r1, r2, r3}
   130c8:	ldm	lr, {r0, r1, r2, r3}
   130cc:	stm	ip, {r0, r1, r2, r3}
   130d0:	mov	r2, r7
   130d4:	mov	r1, r6
   130d8:	mov	r0, sp
   130dc:	bl	12cd0 <__assert_fail@plt+0x1d60>
   130e0:	mov	r3, sp
   130e4:	ldr	r2, [sp, #72]	; 0x48
   130e8:	mov	r1, r5
   130ec:	mov	r0, r4
   130f0:	bl	12a68 <__assert_fail@plt+0x1af8>
   130f4:	add	sp, sp, #52	; 0x34
   130f8:	pop	{r4, r5, r6, r7, pc}
   130fc:	andeq	r6, r2, ip, ror r2
   13100:	mvn	ip, #0
   13104:	push	{r0, r1, r2, lr}
   13108:	str	ip, [sp]
   1310c:	bl	13098 <__assert_fail@plt+0x2128>
   13110:	add	sp, sp, #12
   13114:	pop	{pc}		; (ldr pc, [sp], #4)
   13118:	mov	r3, r2
   1311c:	mov	r2, r1
   13120:	mov	r1, r0
   13124:	mov	r0, #0
   13128:	b	13100 <__assert_fail@plt+0x2190>
   1312c:	push	{r0, r1, r2, lr}
   13130:	str	r3, [sp]
   13134:	mov	r3, r2
   13138:	mov	r2, r1
   1313c:	mov	r1, r0
   13140:	mov	r0, #0
   13144:	bl	13098 <__assert_fail@plt+0x2128>
   13148:	add	sp, sp, #12
   1314c:	pop	{pc}		; (ldr pc, [sp], #4)
   13150:	ldr	r3, [pc]	; 13158 <__assert_fail@plt+0x21e8>
   13154:	b	12a68 <__assert_fail@plt+0x1af8>
   13158:	andeq	r6, r2, r8, lsl #2
   1315c:	mov	r2, r1
   13160:	mov	r1, r0
   13164:	mov	r0, #0
   13168:	b	13150 <__assert_fail@plt+0x21e0>
   1316c:	mvn	r2, #0
   13170:	b	13150 <__assert_fail@plt+0x21e0>
   13174:	mov	r1, r0
   13178:	mov	r0, #0
   1317c:	b	1316c <__assert_fail@plt+0x21fc>
   13180:	push	{r4, r5, r6, lr}
   13184:	sub	sp, sp, #32
   13188:	cmp	r1, #0
   1318c:	mov	r5, r0
   13190:	ldr	r4, [sp, #48]	; 0x30
   13194:	ldr	r6, [sp, #52]	; 0x34
   13198:	beq	1324c <__assert_fail@plt+0x22dc>
   1319c:	stm	sp, {r2, r3}
   131a0:	mov	r3, r1
   131a4:	ldr	r2, [pc, #860]	; 13508 <__assert_fail@plt+0x2598>
   131a8:	mov	r1, #1
   131ac:	bl	10ed4 <__fprintf_chk@plt>
   131b0:	mov	r2, #5
   131b4:	ldr	r1, [pc, #848]	; 1350c <__assert_fail@plt+0x259c>
   131b8:	mov	r0, #0
   131bc:	bl	10da8 <dcgettext@plt>
   131c0:	ldr	r3, [pc, #840]	; 13510 <__assert_fail@plt+0x25a0>
   131c4:	ldr	r2, [pc, #840]	; 13514 <__assert_fail@plt+0x25a4>
   131c8:	str	r3, [sp]
   131cc:	mov	r1, #1
   131d0:	mov	r3, r0
   131d4:	mov	r0, r5
   131d8:	bl	10ed4 <__fprintf_chk@plt>
   131dc:	mov	r1, r5
   131e0:	mov	r0, #10
   131e4:	bl	10d90 <fputc_unlocked@plt>
   131e8:	mov	r2, #5
   131ec:	ldr	r1, [pc, #804]	; 13518 <__assert_fail@plt+0x25a8>
   131f0:	mov	r0, #0
   131f4:	bl	10da8 <dcgettext@plt>
   131f8:	mov	r1, #1
   131fc:	ldr	r3, [pc, #792]	; 1351c <__assert_fail@plt+0x25ac>
   13200:	mov	r2, r0
   13204:	mov	r0, r5
   13208:	bl	10ed4 <__fprintf_chk@plt>
   1320c:	mov	r1, r5
   13210:	mov	r0, #10
   13214:	bl	10d90 <fputc_unlocked@plt>
   13218:	cmp	r6, #9
   1321c:	ldrls	pc, [pc, r6, lsl #2]
   13220:	b	134fc <__assert_fail@plt+0x258c>
   13224:	andeq	r3, r1, ip, lsr r3
   13228:	andeq	r3, r1, r4, ror #4
   1322c:	muleq	r1, r0, r2
   13230:	andeq	r3, r1, r4, asr #5
   13234:	andeq	r3, r1, r0, lsl #6
   13238:	andeq	r3, r1, r4, asr #6
   1323c:	andeq	r3, r1, ip, lsl #7
   13240:	ldrdeq	r3, [r1], -ip
   13244:	andeq	r3, r1, r4, lsr r4
   13248:	muleq	r1, r4, r4
   1324c:	str	r3, [sp]
   13250:	mov	r1, #1
   13254:	mov	r3, r2
   13258:	ldr	r2, [pc, #704]	; 13520 <__assert_fail@plt+0x25b0>
   1325c:	bl	10ed4 <__fprintf_chk@plt>
   13260:	b	131b0 <__assert_fail@plt+0x2240>
   13264:	mov	r2, #5
   13268:	ldr	r1, [pc, #692]	; 13524 <__assert_fail@plt+0x25b4>
   1326c:	mov	r0, #0
   13270:	bl	10da8 <dcgettext@plt>
   13274:	ldr	r3, [r4]
   13278:	mov	r1, #1
   1327c:	mov	r2, r0
   13280:	mov	r0, r5
   13284:	add	sp, sp, #32
   13288:	pop	{r4, r5, r6, lr}
   1328c:	b	10ed4 <__fprintf_chk@plt>
   13290:	mov	r2, #5
   13294:	ldr	r1, [pc, #652]	; 13528 <__assert_fail@plt+0x25b8>
   13298:	mov	r0, #0
   1329c:	bl	10da8 <dcgettext@plt>
   132a0:	ldr	r3, [r4, #4]
   132a4:	mov	r1, #1
   132a8:	str	r3, [sp, #48]	; 0x30
   132ac:	ldr	r3, [r4]
   132b0:	mov	r2, r0
   132b4:	mov	r0, r5
   132b8:	add	sp, sp, #32
   132bc:	pop	{r4, r5, r6, lr}
   132c0:	b	10ed4 <__fprintf_chk@plt>
   132c4:	mov	r2, #5
   132c8:	ldr	r1, [pc, #604]	; 1352c <__assert_fail@plt+0x25bc>
   132cc:	mov	r0, #0
   132d0:	bl	10da8 <dcgettext@plt>
   132d4:	ldr	r3, [r4, #8]
   132d8:	mov	r1, #1
   132dc:	str	r3, [sp, #52]	; 0x34
   132e0:	ldr	r3, [r4, #4]
   132e4:	str	r3, [sp, #48]	; 0x30
   132e8:	ldr	r3, [r4]
   132ec:	mov	r2, r0
   132f0:	mov	r0, r5
   132f4:	add	sp, sp, #32
   132f8:	pop	{r4, r5, r6, lr}
   132fc:	b	10ed4 <__fprintf_chk@plt>
   13300:	mov	r2, #5
   13304:	ldr	r1, [pc, #548]	; 13530 <__assert_fail@plt+0x25c0>
   13308:	mov	r0, #0
   1330c:	bl	10da8 <dcgettext@plt>
   13310:	ldr	r3, [r4, #12]
   13314:	mov	r1, #1
   13318:	str	r3, [sp, #8]
   1331c:	ldr	r3, [r4, #8]
   13320:	str	r3, [sp, #4]
   13324:	ldr	r3, [r4, #4]
   13328:	str	r3, [sp]
   1332c:	ldr	r3, [r4]
   13330:	mov	r2, r0
   13334:	mov	r0, r5
   13338:	bl	10ed4 <__fprintf_chk@plt>
   1333c:	add	sp, sp, #32
   13340:	pop	{r4, r5, r6, pc}
   13344:	mov	r2, #5
   13348:	ldr	r1, [pc, #484]	; 13534 <__assert_fail@plt+0x25c4>
   1334c:	mov	r0, #0
   13350:	bl	10da8 <dcgettext@plt>
   13354:	ldr	r3, [r4, #16]
   13358:	mov	r1, #1
   1335c:	str	r3, [sp, #12]
   13360:	ldr	r3, [r4, #12]
   13364:	str	r3, [sp, #8]
   13368:	ldr	r3, [r4, #8]
   1336c:	str	r3, [sp, #4]
   13370:	ldr	r3, [r4, #4]
   13374:	str	r3, [sp]
   13378:	ldr	r3, [r4]
   1337c:	mov	r2, r0
   13380:	mov	r0, r5
   13384:	bl	10ed4 <__fprintf_chk@plt>
   13388:	b	1333c <__assert_fail@plt+0x23cc>
   1338c:	mov	r2, #5
   13390:	ldr	r1, [pc, #416]	; 13538 <__assert_fail@plt+0x25c8>
   13394:	mov	r0, #0
   13398:	bl	10da8 <dcgettext@plt>
   1339c:	ldr	r3, [r4, #20]
   133a0:	mov	r1, #1
   133a4:	str	r3, [sp, #16]
   133a8:	ldr	r3, [r4, #16]
   133ac:	str	r3, [sp, #12]
   133b0:	ldr	r3, [r4, #12]
   133b4:	str	r3, [sp, #8]
   133b8:	ldr	r3, [r4, #8]
   133bc:	str	r3, [sp, #4]
   133c0:	ldr	r3, [r4, #4]
   133c4:	str	r3, [sp]
   133c8:	ldr	r3, [r4]
   133cc:	mov	r2, r0
   133d0:	mov	r0, r5
   133d4:	bl	10ed4 <__fprintf_chk@plt>
   133d8:	b	1333c <__assert_fail@plt+0x23cc>
   133dc:	mov	r2, #5
   133e0:	ldr	r1, [pc, #340]	; 1353c <__assert_fail@plt+0x25cc>
   133e4:	mov	r0, #0
   133e8:	bl	10da8 <dcgettext@plt>
   133ec:	ldr	r3, [r4, #24]
   133f0:	mov	r1, #1
   133f4:	str	r3, [sp, #20]
   133f8:	ldr	r3, [r4, #20]
   133fc:	str	r3, [sp, #16]
   13400:	ldr	r3, [r4, #16]
   13404:	str	r3, [sp, #12]
   13408:	ldr	r3, [r4, #12]
   1340c:	str	r3, [sp, #8]
   13410:	ldr	r3, [r4, #8]
   13414:	str	r3, [sp, #4]
   13418:	ldr	r3, [r4, #4]
   1341c:	str	r3, [sp]
   13420:	ldr	r3, [r4]
   13424:	mov	r2, r0
   13428:	mov	r0, r5
   1342c:	bl	10ed4 <__fprintf_chk@plt>
   13430:	b	1333c <__assert_fail@plt+0x23cc>
   13434:	mov	r2, #5
   13438:	ldr	r1, [pc, #256]	; 13540 <__assert_fail@plt+0x25d0>
   1343c:	mov	r0, #0
   13440:	bl	10da8 <dcgettext@plt>
   13444:	ldr	r3, [r4, #28]
   13448:	mov	r1, #1
   1344c:	str	r3, [sp, #24]
   13450:	ldr	r3, [r4, #24]
   13454:	str	r3, [sp, #20]
   13458:	ldr	r3, [r4, #20]
   1345c:	str	r3, [sp, #16]
   13460:	ldr	r3, [r4, #16]
   13464:	str	r3, [sp, #12]
   13468:	ldr	r3, [r4, #12]
   1346c:	str	r3, [sp, #8]
   13470:	ldr	r3, [r4, #8]
   13474:	str	r3, [sp, #4]
   13478:	ldr	r3, [r4, #4]
   1347c:	str	r3, [sp]
   13480:	ldr	r3, [r4]
   13484:	mov	r2, r0
   13488:	mov	r0, r5
   1348c:	bl	10ed4 <__fprintf_chk@plt>
   13490:	b	1333c <__assert_fail@plt+0x23cc>
   13494:	ldr	r1, [pc, #168]	; 13544 <__assert_fail@plt+0x25d4>
   13498:	mov	r2, #5
   1349c:	mov	r0, #0
   134a0:	bl	10da8 <dcgettext@plt>
   134a4:	ldr	r3, [r4, #32]
   134a8:	mov	r1, #1
   134ac:	str	r3, [sp, #28]
   134b0:	ldr	r3, [r4, #28]
   134b4:	str	r3, [sp, #24]
   134b8:	ldr	r3, [r4, #24]
   134bc:	str	r3, [sp, #20]
   134c0:	ldr	r3, [r4, #20]
   134c4:	str	r3, [sp, #16]
   134c8:	ldr	r3, [r4, #16]
   134cc:	str	r3, [sp, #12]
   134d0:	ldr	r3, [r4, #12]
   134d4:	str	r3, [sp, #8]
   134d8:	ldr	r3, [r4, #8]
   134dc:	str	r3, [sp, #4]
   134e0:	ldr	r3, [r4, #4]
   134e4:	str	r3, [sp]
   134e8:	ldr	r3, [r4]
   134ec:	mov	r2, r0
   134f0:	mov	r0, r5
   134f4:	bl	10ed4 <__fprintf_chk@plt>
   134f8:	b	1333c <__assert_fail@plt+0x23cc>
   134fc:	mov	r2, #5
   13500:	ldr	r1, [pc, #64]	; 13548 <__assert_fail@plt+0x25d8>
   13504:	b	1349c <__assert_fail@plt+0x252c>
   13508:			; <UNDEFINED> instruction: 0x00014fb9
   1350c:	andeq	r4, r1, ip, asr #31
   13510:	andeq	r0, r0, r6, ror #15
   13514:	muleq	r1, sl, r2
   13518:	ldrdeq	r4, [r1], -r0
   1351c:	andeq	r5, r1, fp, ror r0
   13520:	andeq	r4, r1, r5, asr #31
   13524:	muleq	r1, sp, r0
   13528:	andeq	r5, r1, sp, lsr #1
   1352c:	andeq	r5, r1, r4, asr #1
   13530:	andeq	r5, r1, r0, ror #1
   13534:	andeq	r5, r1, r0, lsl #2
   13538:	andeq	r5, r1, r4, lsr #2
   1353c:	andeq	r5, r1, ip, asr #2
   13540:	andeq	r5, r1, r8, ror r1
   13544:	andeq	r5, r1, r8, lsr #3
   13548:	ldrdeq	r5, [r1], -ip
   1354c:	push	{r0, r1, r4, lr}
   13550:	mov	ip, #0
   13554:	ldr	lr, [sp, #16]
   13558:	ldr	r4, [lr, ip, lsl #2]
   1355c:	cmp	r4, #0
   13560:	bne	13578 <__assert_fail@plt+0x2608>
   13564:	str	ip, [sp, #4]
   13568:	str	lr, [sp]
   1356c:	bl	13180 <__assert_fail@plt+0x2210>
   13570:	add	sp, sp, #8
   13574:	pop	{r4, pc}
   13578:	add	ip, ip, #1
   1357c:	b	13558 <__assert_fail@plt+0x25e8>
   13580:	push	{r4, r5, lr}
   13584:	sub	sp, sp, #52	; 0x34
   13588:	mov	ip, #0
   1358c:	ldr	r5, [sp, #64]	; 0x40
   13590:	add	lr, sp, #8
   13594:	ldr	r4, [r5, ip, lsl #2]
   13598:	cmp	r4, #0
   1359c:	str	r4, [lr, ip, lsl #2]
   135a0:	beq	135b0 <__assert_fail@plt+0x2640>
   135a4:	add	ip, ip, #1
   135a8:	cmp	ip, #10
   135ac:	bne	13594 <__assert_fail@plt+0x2624>
   135b0:	str	ip, [sp, #4]
   135b4:	str	lr, [sp]
   135b8:	bl	13180 <__assert_fail@plt+0x2210>
   135bc:	add	sp, sp, #52	; 0x34
   135c0:	pop	{r4, r5, pc}
   135c4:	push	{r3}		; (str r3, [sp, #-4]!)
   135c8:	push	{r0, r1, r2, r3, lr}
   135cc:	add	r3, sp, #24
   135d0:	str	r3, [sp, #12]
   135d4:	str	r3, [sp]
   135d8:	ldr	r3, [sp, #20]
   135dc:	bl	13580 <__assert_fail@plt+0x2610>
   135e0:	add	sp, sp, #16
   135e4:	pop	{lr}		; (ldr lr, [sp], #4)
   135e8:	add	sp, sp, #4
   135ec:	bx	lr
   135f0:	ldr	r3, [pc, #116]	; 1366c <__assert_fail@plt+0x26fc>
   135f4:	push	{r4, lr}
   135f8:	mov	r0, #10
   135fc:	ldr	r1, [r3]
   13600:	bl	10d90 <fputc_unlocked@plt>
   13604:	mov	r2, #5
   13608:	ldr	r1, [pc, #96]	; 13670 <__assert_fail@plt+0x2700>
   1360c:	mov	r0, #0
   13610:	bl	10da8 <dcgettext@plt>
   13614:	ldr	r2, [pc, #88]	; 13674 <__assert_fail@plt+0x2704>
   13618:	mov	r1, r0
   1361c:	mov	r0, #1
   13620:	bl	10eb0 <__printf_chk@plt>
   13624:	mov	r2, #5
   13628:	ldr	r1, [pc, #72]	; 13678 <__assert_fail@plt+0x2708>
   1362c:	mov	r0, #0
   13630:	bl	10da8 <dcgettext@plt>
   13634:	ldr	r3, [pc, #64]	; 1367c <__assert_fail@plt+0x270c>
   13638:	ldr	r2, [pc, #64]	; 13680 <__assert_fail@plt+0x2710>
   1363c:	mov	r1, r0
   13640:	mov	r0, #1
   13644:	bl	10eb0 <__printf_chk@plt>
   13648:	mov	r2, #5
   1364c:	ldr	r1, [pc, #48]	; 13684 <__assert_fail@plt+0x2714>
   13650:	mov	r0, #0
   13654:	bl	10da8 <dcgettext@plt>
   13658:	ldr	r2, [pc, #40]	; 13688 <__assert_fail@plt+0x2718>
   1365c:	pop	{r4, lr}
   13660:	mov	r1, r0
   13664:	mov	r0, #1
   13668:	b	10eb0 <__printf_chk@plt>
   1366c:	andeq	r6, r2, r4, asr r1
   13670:	andeq	r5, r1, r8, lsl r2
   13674:	andeq	r5, r1, ip, lsr #4
   13678:	andeq	r5, r1, r2, asr #4
   1367c:	andeq	r4, r1, ip, lsl #26
   13680:	andeq	r4, r1, r4, lsr sp
   13684:	andeq	r5, r1, r6, asr r2
   13688:	andeq	r5, r1, sp, ror r2
   1368c:	push	{r4, lr}
   13690:	bl	140e0 <__assert_fail@plt+0x3170>
   13694:	cmp	r0, #0
   13698:	popne	{r4, pc}
   1369c:	bl	13b20 <__assert_fail@plt+0x2bb0>
   136a0:	push	{r4, lr}
   136a4:	bl	140e0 <__assert_fail@plt+0x3170>
   136a8:	cmp	r0, #0
   136ac:	popne	{r4, pc}
   136b0:	bl	13b20 <__assert_fail@plt+0x2bb0>
   136b4:	b	1368c <__assert_fail@plt+0x271c>
   136b8:	push	{r4, r5, r6, lr}
   136bc:	mov	r5, r0
   136c0:	mov	r4, r1
   136c4:	bl	14120 <__assert_fail@plt+0x31b0>
   136c8:	cmp	r0, #0
   136cc:	popne	{r4, r5, r6, pc}
   136d0:	adds	r4, r4, #0
   136d4:	movne	r4, #1
   136d8:	cmp	r5, #0
   136dc:	orreq	r4, r4, #1
   136e0:	cmp	r4, #0
   136e4:	popeq	{r4, r5, r6, pc}
   136e8:	bl	13b20 <__assert_fail@plt+0x2bb0>
   136ec:	push	{r4, lr}
   136f0:	cmp	r1, #0
   136f4:	orreq	r1, r1, #1
   136f8:	bl	14120 <__assert_fail@plt+0x31b0>
   136fc:	cmp	r0, #0
   13700:	popne	{r4, pc}
   13704:	bl	13b20 <__assert_fail@plt+0x2bb0>
   13708:	push	{r4, r5, r6, lr}
   1370c:	mov	r6, r0
   13710:	mov	r5, r1
   13714:	mov	r4, r2
   13718:	bl	142c4 <__assert_fail@plt+0x3354>
   1371c:	cmp	r0, #0
   13720:	popne	{r4, r5, r6, pc}
   13724:	cmp	r6, #0
   13728:	beq	13738 <__assert_fail@plt+0x27c8>
   1372c:	cmp	r5, #0
   13730:	cmpne	r4, #0
   13734:	popeq	{r4, r5, r6, pc}
   13738:	bl	13b20 <__assert_fail@plt+0x2bb0>
   1373c:	b	13708 <__assert_fail@plt+0x2798>
   13740:	cmp	r2, #0
   13744:	cmpne	r1, #0
   13748:	moveq	r2, #1
   1374c:	moveq	r1, r2
   13750:	push	{r4, lr}
   13754:	bl	142c4 <__assert_fail@plt+0x3354>
   13758:	cmp	r0, #0
   1375c:	popne	{r4, pc}
   13760:	bl	13b20 <__assert_fail@plt+0x2bb0>
   13764:	mov	r2, r1
   13768:	mov	r1, r0
   1376c:	mov	r0, #0
   13770:	b	13708 <__assert_fail@plt+0x2798>
   13774:	mov	r2, r1
   13778:	mov	r1, r0
   1377c:	mov	r0, #0
   13780:	b	13740 <__assert_fail@plt+0x27d0>
   13784:	push	{r4, r5, r6, r7, r8, lr}
   13788:	subs	r7, r0, #0
   1378c:	mov	r5, r1
   13790:	mov	r6, r2
   13794:	ldr	r4, [r1]
   13798:	bne	137d4 <__assert_fail@plt+0x2864>
   1379c:	cmp	r4, #0
   137a0:	bne	137bc <__assert_fail@plt+0x284c>
   137a4:	mov	r1, r2
   137a8:	mov	r0, #64	; 0x40
   137ac:	bl	143f0 <__assert_fail@plt+0x3480>
   137b0:	cmp	r0, #0
   137b4:	movne	r4, r0
   137b8:	addeq	r4, r0, #1
   137bc:	mov	r2, r6
   137c0:	mov	r1, r4
   137c4:	mov	r0, r7
   137c8:	bl	13708 <__assert_fail@plt+0x2798>
   137cc:	str	r4, [r5]
   137d0:	pop	{r4, r5, r6, r7, r8, pc}
   137d4:	lsr	r2, r4, #1
   137d8:	add	r3, r2, #1
   137dc:	mvn	r3, r3
   137e0:	cmp	r4, r3
   137e4:	addls	r4, r4, #1
   137e8:	addls	r4, r4, r2
   137ec:	bls	137bc <__assert_fail@plt+0x284c>
   137f0:	bl	13b20 <__assert_fail@plt+0x2bb0>
   137f4:	mov	r2, #1
   137f8:	b	13784 <__assert_fail@plt+0x2814>
   137fc:	push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13800:	mov	sl, r0
   13804:	ldr	r8, [r1]
   13808:	mov	fp, r1
   1380c:	mov	r5, r2
   13810:	asrs	r4, r8, #1
   13814:	mov	r9, r3
   13818:	ldr	r7, [sp, #48]	; 0x30
   1381c:	bpl	138b8 <__assert_fail@plt+0x2948>
   13820:	rsb	r2, r4, #-2147483648	; 0x80000000
   13824:	cmp	r8, r2
   13828:	movge	r2, #0
   1382c:	movlt	r2, #1
   13830:	mvn	r3, r9
   13834:	cmp	r2, #0
   13838:	lsr	r3, r3, #31
   1383c:	addeq	r4, r4, r8
   13840:	mvnne	r4, #-2147483648	; 0x80000000
   13844:	mov	r0, r3
   13848:	cmp	r9, r4
   1384c:	movge	r0, #0
   13850:	andlt	r0, r0, #1
   13854:	cmp	r0, #0
   13858:	str	r3, [sp, #4]
   1385c:	bne	13a2c <__assert_fail@plt+0x2abc>
   13860:	cmp	r7, #0
   13864:	bge	13978 <__assert_fail@plt+0x2a08>
   13868:	cmp	r4, #0
   1386c:	bge	138d0 <__assert_fail@plt+0x2960>
   13870:	mov	r1, r7
   13874:	mvn	r0, #-2147483648	; 0x80000000
   13878:	bl	145fc <__assert_fail@plt+0x368c>
   1387c:	cmp	r0, r4
   13880:	movle	r0, #0
   13884:	movgt	r0, #1
   13888:	cmp	r0, #0
   1388c:	mvnne	r6, #-2147483648	; 0x80000000
   13890:	beq	138e0 <__assert_fail@plt+0x2970>
   13894:	mov	r1, r7
   13898:	mov	r0, r6
   1389c:	bl	145fc <__assert_fail@plt+0x368c>
   138a0:	mov	r1, r7
   138a4:	mov	r4, r0
   138a8:	mov	r0, r6
   138ac:	bl	1481c <__assert_fail@plt+0x38ac>
   138b0:	sub	r1, r6, r1
   138b4:	b	138f0 <__assert_fail@plt+0x2980>
   138b8:	mvn	r2, #-2147483648	; 0x80000000
   138bc:	sub	r2, r2, r4
   138c0:	cmp	r8, r2
   138c4:	movle	r2, #0
   138c8:	movgt	r2, #1
   138cc:	b	13830 <__assert_fail@plt+0x28c0>
   138d0:	cmn	r7, #1
   138d4:	movne	r1, r7
   138d8:	movne	r0, #-2147483648	; 0x80000000
   138dc:	bne	13a44 <__assert_fail@plt+0x2ad4>
   138e0:	mul	r1, r7, r4
   138e4:	cmp	r1, #63	; 0x3f
   138e8:	movle	r6, #64	; 0x40
   138ec:	ble	13894 <__assert_fail@plt+0x2924>
   138f0:	cmp	sl, #0
   138f4:	sub	r2, r4, r8
   138f8:	streq	sl, [fp]
   138fc:	cmp	r2, r5
   13900:	bge	139d4 <__assert_fail@plt+0x2a64>
   13904:	cmp	r5, #0
   13908:	bge	139a0 <__assert_fail@plt+0x2a30>
   1390c:	rsb	r2, r5, #-2147483648	; 0x80000000
   13910:	cmp	r8, r2
   13914:	movge	r2, #0
   13918:	movlt	r2, #1
   1391c:	cmp	r2, #0
   13920:	bne	13974 <__assert_fail@plt+0x2a04>
   13924:	ldr	r0, [sp, #4]
   13928:	add	r5, r8, r5
   1392c:	cmp	r9, r5
   13930:	movge	r0, #0
   13934:	andlt	r0, r0, #1
   13938:	cmp	r0, #0
   1393c:	mov	r4, r5
   13940:	bne	13974 <__assert_fail@plt+0x2a04>
   13944:	cmp	r7, #0
   13948:	bge	139e8 <__assert_fail@plt+0x2a78>
   1394c:	cmp	r5, #0
   13950:	bge	139c0 <__assert_fail@plt+0x2a50>
   13954:	mov	r1, r7
   13958:	mvn	r0, #-2147483648	; 0x80000000
   1395c:	bl	145fc <__assert_fail@plt+0x368c>
   13960:	cmp	r5, r0
   13964:	movge	r0, #0
   13968:	movlt	r0, #1
   1396c:	cmp	r0, #0
   13970:	beq	139d0 <__assert_fail@plt+0x2a60>
   13974:	bl	13b20 <__assert_fail@plt+0x2bb0>
   13978:	beq	138e0 <__assert_fail@plt+0x2970>
   1397c:	cmp	r4, #0
   13980:	bge	13a3c <__assert_fail@plt+0x2acc>
   13984:	cmn	r4, #1
   13988:	beq	138e0 <__assert_fail@plt+0x2970>
   1398c:	mov	r1, r4
   13990:	mov	r0, #-2147483648	; 0x80000000
   13994:	bl	145fc <__assert_fail@plt+0x368c>
   13998:	cmp	r7, r0
   1399c:	b	13880 <__assert_fail@plt+0x2910>
   139a0:	cmp	r8, #0
   139a4:	blt	13924 <__assert_fail@plt+0x29b4>
   139a8:	mvn	r2, #-2147483648	; 0x80000000
   139ac:	sub	r2, r2, r5
   139b0:	cmp	r8, r2
   139b4:	movle	r2, #0
   139b8:	movgt	r2, #1
   139bc:	b	1391c <__assert_fail@plt+0x29ac>
   139c0:	cmn	r7, #1
   139c4:	movne	r1, r7
   139c8:	movne	r0, #-2147483648	; 0x80000000
   139cc:	bne	13a20 <__assert_fail@plt+0x2ab0>
   139d0:	mul	r1, r5, r7
   139d4:	mov	r0, sl
   139d8:	bl	136b8 <__assert_fail@plt+0x2748>
   139dc:	str	r4, [fp]
   139e0:	add	sp, sp, #12
   139e4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   139e8:	beq	139d0 <__assert_fail@plt+0x2a60>
   139ec:	cmp	r5, #0
   139f0:	movge	r1, r7
   139f4:	mvnge	r0, #-2147483648	; 0x80000000
   139f8:	bge	13a20 <__assert_fail@plt+0x2ab0>
   139fc:	cmn	r5, #1
   13a00:	beq	139d0 <__assert_fail@plt+0x2a60>
   13a04:	mov	r1, r5
   13a08:	mov	r0, #-2147483648	; 0x80000000
   13a0c:	bl	145fc <__assert_fail@plt+0x368c>
   13a10:	cmp	r7, r0
   13a14:	movle	r0, #0
   13a18:	movgt	r0, #1
   13a1c:	b	1396c <__assert_fail@plt+0x29fc>
   13a20:	bl	145fc <__assert_fail@plt+0x368c>
   13a24:	cmp	r5, r0
   13a28:	b	13a14 <__assert_fail@plt+0x2aa4>
   13a2c:	cmp	r7, #0
   13a30:	mov	r4, r9
   13a34:	blt	138d0 <__assert_fail@plt+0x2960>
   13a38:	beq	138e0 <__assert_fail@plt+0x2970>
   13a3c:	mov	r1, r7
   13a40:	mvn	r0, #-2147483648	; 0x80000000
   13a44:	bl	145fc <__assert_fail@plt+0x368c>
   13a48:	cmp	r0, r4
   13a4c:	movge	r0, #0
   13a50:	movlt	r0, #1
   13a54:	b	13888 <__assert_fail@plt+0x2918>
   13a58:	push	{r4, lr}
   13a5c:	bl	14098 <__assert_fail@plt+0x3128>
   13a60:	cmp	r0, #0
   13a64:	popne	{r4, pc}
   13a68:	bl	13b20 <__assert_fail@plt+0x2bb0>
   13a6c:	mov	r1, #1
   13a70:	b	13a58 <__assert_fail@plt+0x2ae8>
   13a74:	push	{r4, lr}
   13a78:	bl	14098 <__assert_fail@plt+0x3128>
   13a7c:	cmp	r0, #0
   13a80:	popne	{r4, pc}
   13a84:	bl	13b20 <__assert_fail@plt+0x2bb0>
   13a88:	mov	r1, #1
   13a8c:	b	13a74 <__assert_fail@plt+0x2b04>
   13a90:	push	{r4, r5, r6, lr}
   13a94:	mov	r4, r1
   13a98:	mov	r5, r0
   13a9c:	mov	r0, r1
   13aa0:	bl	1368c <__assert_fail@plt+0x271c>
   13aa4:	mov	r2, r4
   13aa8:	mov	r1, r5
   13aac:	pop	{r4, r5, r6, lr}
   13ab0:	b	10d60 <memcpy@plt>
   13ab4:	push	{r4, r5, r6, lr}
   13ab8:	mov	r4, r1
   13abc:	mov	r5, r0
   13ac0:	mov	r0, r1
   13ac4:	bl	136a0 <__assert_fail@plt+0x2730>
   13ac8:	mov	r2, r4
   13acc:	mov	r1, r5
   13ad0:	pop	{r4, r5, r6, lr}
   13ad4:	b	10d60 <memcpy@plt>
   13ad8:	push	{r4, r5, r6, lr}
   13adc:	mov	r5, r0
   13ae0:	add	r0, r1, #1
   13ae4:	mov	r4, r1
   13ae8:	bl	136a0 <__assert_fail@plt+0x2730>
   13aec:	mov	r2, #0
   13af0:	mov	r1, r5
   13af4:	strb	r2, [r0, r4]
   13af8:	mov	r2, r4
   13afc:	pop	{r4, r5, r6, lr}
   13b00:	b	10d60 <memcpy@plt>
   13b04:	push	{r4, lr}
   13b08:	mov	r4, r0
   13b0c:	bl	10e74 <strlen@plt>
   13b10:	add	r1, r0, #1
   13b14:	mov	r0, r4
   13b18:	pop	{r4, lr}
   13b1c:	b	13a90 <__assert_fail@plt+0x2b20>
   13b20:	ldr	r3, [pc, #44]	; 13b54 <__assert_fail@plt+0x2be4>
   13b24:	push	{r4, lr}
   13b28:	mov	r2, #5
   13b2c:	ldr	r1, [pc, #36]	; 13b58 <__assert_fail@plt+0x2be8>
   13b30:	mov	r0, #0
   13b34:	ldr	r4, [r3]
   13b38:	bl	10da8 <dcgettext@plt>
   13b3c:	ldr	r2, [pc, #24]	; 13b5c <__assert_fail@plt+0x2bec>
   13b40:	mov	r1, #0
   13b44:	mov	r3, r0
   13b48:	mov	r0, r4
   13b4c:	bl	10e14 <error@plt>
   13b50:	bl	10f58 <abort@plt>
   13b54:	strdeq	r6, [r2], -r4
   13b58:	andeq	r5, r1, r9, asr #5
   13b5c:			; <UNDEFINED> instruction: 0x00014ebb
   13b60:	push	{r0, r1, r2, r3, r4, r5, r6, r8, r9, lr}
   13b64:	mov	r9, r3
   13b68:	ldr	r3, [sp, #48]	; 0x30
   13b6c:	mov	r8, r2
   13b70:	str	r3, [sp]
   13b74:	mov	r2, r1
   13b78:	add	r3, sp, #8
   13b7c:	mov	r1, #0
   13b80:	mov	r6, r0
   13b84:	ldr	r4, [sp, #56]	; 0x38
   13b88:	bl	13d6c <__assert_fail@plt+0x2dfc>
   13b8c:	cmp	r0, #0
   13b90:	bne	13c04 <__assert_fail@plt+0x2c94>
   13b94:	ldrd	r0, [sp, #8]
   13b98:	ldrd	r2, [sp, #40]	; 0x28
   13b9c:	cmp	r1, r9
   13ba0:	cmpeq	r0, r8
   13ba4:	movcc	ip, #1
   13ba8:	movcs	ip, #0
   13bac:	cmp	r1, r3
   13bb0:	cmpeq	r0, r2
   13bb4:	movls	r3, ip
   13bb8:	orrhi	r3, ip, #1
   13bbc:	cmp	r3, #0
   13bc0:	beq	13c80 <__assert_fail@plt+0x2d10>
   13bc4:	mov	r3, #0
   13bc8:	mvn	r2, #-1073741824	; 0xc0000000
   13bcc:	cmp	r1, r3
   13bd0:	cmpeq	r0, r2
   13bd4:	bls	13bf8 <__assert_fail@plt+0x2c88>
   13bd8:	bl	10e8c <__errno_location@plt>
   13bdc:	mov	r3, #75	; 0x4b
   13be0:	cmp	r4, #0
   13be4:	str	r3, [r0]
   13be8:	beq	13c4c <__assert_fail@plt+0x2cdc>
   13bec:	bl	10e8c <__errno_location@plt>
   13bf0:	ldr	r5, [r0]
   13bf4:	b	13c60 <__assert_fail@plt+0x2cf0>
   13bf8:	bl	10e8c <__errno_location@plt>
   13bfc:	mov	r3, #34	; 0x22
   13c00:	b	13be0 <__assert_fail@plt+0x2c70>
   13c04:	cmp	r0, #1
   13c08:	bne	13c30 <__assert_fail@plt+0x2cc0>
   13c0c:	bl	10e8c <__errno_location@plt>
   13c10:	mov	r3, #75	; 0x4b
   13c14:	cmp	r4, #0
   13c18:	str	r3, [r0]
   13c1c:	bne	13c50 <__assert_fail@plt+0x2ce0>
   13c20:	bl	10e8c <__errno_location@plt>
   13c24:	mov	r4, #1
   13c28:	ldr	r5, [r0]
   13c2c:	b	13c60 <__assert_fail@plt+0x2cf0>
   13c30:	cmp	r0, #3
   13c34:	bne	13c44 <__assert_fail@plt+0x2cd4>
   13c38:	bl	10e8c <__errno_location@plt>
   13c3c:	mov	r3, #0
   13c40:	b	13c14 <__assert_fail@plt+0x2ca4>
   13c44:	cmp	r4, #0
   13c48:	bne	13c50 <__assert_fail@plt+0x2ce0>
   13c4c:	mov	r4, #1
   13c50:	bl	10e8c <__errno_location@plt>
   13c54:	ldr	r5, [r0]
   13c58:	cmp	r5, #22
   13c5c:	moveq	r5, #0
   13c60:	mov	r0, r6
   13c64:	bl	13174 <__assert_fail@plt+0x2204>
   13c68:	ldr	r3, [sp, #52]	; 0x34
   13c6c:	ldr	r2, [pc, #20]	; 13c88 <__assert_fail@plt+0x2d18>
   13c70:	mov	r1, r5
   13c74:	str	r0, [sp]
   13c78:	mov	r0, r4
   13c7c:	bl	10e14 <error@plt>
   13c80:	add	sp, sp, #16
   13c84:	pop	{r4, r5, r6, r8, r9, pc}
   13c88:			; <UNDEFINED> instruction: 0x00014eb7
   13c8c:	push	{r4, r5}
   13c90:	mov	r1, #10
   13c94:	pop	{r4, r5}
   13c98:	b	13b60 <__assert_fail@plt+0x2bf0>
   13c9c:	push	{r4, r5, r6, lr}
   13ca0:	subs	r5, r1, #0
   13ca4:	mov	r4, r0
   13ca8:	bge	13ce8 <__assert_fail@plt+0x2d78>
   13cac:	ldm	r0, {r0, r3}
   13cb0:	orr	r0, r0, r3
   13cb4:	adds	r0, r0, #0
   13cb8:	movne	r0, #1
   13cbc:	cmp	r0, #0
   13cc0:	bne	13d1c <__assert_fail@plt+0x2dac>
   13cc4:	ldr	r2, [r4]
   13cc8:	asr	r3, r5, #31
   13ccc:	ldr	r1, [r4, #4]
   13cd0:	mul	r3, r3, r2
   13cd4:	mla	r1, r5, r1, r3
   13cd8:	umull	r2, r3, r2, r5
   13cdc:	add	r3, r1, r3
   13ce0:	strd	r2, [r4]
   13ce4:	pop	{r4, r5, r6, pc}
   13ce8:	moveq	r0, r5
   13cec:	beq	13cbc <__assert_fail@plt+0x2d4c>
   13cf0:	mov	r2, r5
   13cf4:	asr	r3, r5, #31
   13cf8:	mvn	r0, #0
   13cfc:	mvn	r1, #0
   13d00:	bl	1483c <__assert_fail@plt+0x38cc>
   13d04:	ldrd	r2, [r4]
   13d08:	cmp	r1, r3
   13d0c:	cmpeq	r0, r2
   13d10:	movcc	r0, #1
   13d14:	movcs	r0, #0
   13d18:	b	13cbc <__assert_fail@plt+0x2d4c>
   13d1c:	mvn	r2, #0
   13d20:	mvn	r3, #0
   13d24:	mov	r0, #1
   13d28:	strd	r2, [r4]
   13d2c:	pop	{r4, r5, r6, pc}
   13d30:	push	{r4, r5, r6, r7, r8, lr}
   13d34:	mov	r6, r0
   13d38:	mov	r7, r1
   13d3c:	mov	r5, r2
   13d40:	mov	r4, #0
   13d44:	cmp	r5, #0
   13d48:	bne	13d54 <__assert_fail@plt+0x2de4>
   13d4c:	mov	r0, r4
   13d50:	pop	{r4, r5, r6, r7, r8, pc}
   13d54:	mov	r1, r7
   13d58:	mov	r0, r6
   13d5c:	bl	13c9c <__assert_fail@plt+0x2d2c>
   13d60:	sub	r5, r5, #1
   13d64:	orr	r4, r4, r0
   13d68:	b	13d44 <__assert_fail@plt+0x2dd4>
   13d6c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13d70:	sub	sp, sp, #20
   13d74:	cmp	r2, #36	; 0x24
   13d78:	ldr	r9, [sp, #56]	; 0x38
   13d7c:	bls	13d94 <__assert_fail@plt+0x2e24>
   13d80:	ldr	r3, [pc, #772]	; 1408c <__assert_fail@plt+0x311c>
   13d84:	mov	r2, #85	; 0x55
   13d88:	ldr	r1, [pc, #768]	; 14090 <__assert_fail@plt+0x3120>
   13d8c:	ldr	r0, [pc, #768]	; 14094 <__assert_fail@plt+0x3124>
   13d90:	bl	10f70 <__assert_fail@plt>
   13d94:	cmp	r1, #0
   13d98:	mov	r7, r1
   13d9c:	mov	r4, r0
   13da0:	mov	fp, r2
   13da4:	mov	r8, r3
   13da8:	addeq	r7, sp, #4
   13dac:	bl	10e8c <__errno_location@plt>
   13db0:	mov	r3, #0
   13db4:	str	r3, [r0]
   13db8:	mov	sl, r0
   13dbc:	bl	10e5c <__ctype_b_loc@plt>
   13dc0:	ldrb	r6, [r4]
   13dc4:	mov	r3, r4
   13dc8:	ldr	r1, [r0]
   13dcc:	lsl	r2, r6, #1
   13dd0:	ldrh	r5, [r1, r2]
   13dd4:	ands	r5, r5, #8192	; 0x2000
   13dd8:	bne	13df4 <__assert_fail@plt+0x2e84>
   13ddc:	cmp	r6, #45	; 0x2d
   13de0:	bne	13dfc <__assert_fail@plt+0x2e8c>
   13de4:	mov	r5, #4
   13de8:	mov	r0, r5
   13dec:	add	sp, sp, #20
   13df0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13df4:	ldrb	r6, [r3, #1]!
   13df8:	b	13dcc <__assert_fail@plt+0x2e5c>
   13dfc:	mov	r2, fp
   13e00:	mov	r1, r7
   13e04:	mov	r0, r4
   13e08:	bl	10ec8 <strtoumax@plt>
   13e0c:	ldr	r6, [r7]
   13e10:	cmp	r4, r6
   13e14:	strd	r0, [sp, #8]
   13e18:	bne	13e7c <__assert_fail@plt+0x2f0c>
   13e1c:	cmp	r9, #0
   13e20:	beq	13de4 <__assert_fail@plt+0x2e74>
   13e24:	ldrb	r1, [r6]
   13e28:	cmp	r1, #0
   13e2c:	beq	13de4 <__assert_fail@plt+0x2e74>
   13e30:	mov	r0, r9
   13e34:	bl	10e80 <strchr@plt>
   13e38:	cmp	r0, #0
   13e3c:	beq	13de4 <__assert_fail@plt+0x2e74>
   13e40:	mov	r2, #1
   13e44:	mov	r3, #0
   13e48:	strd	r2, [sp, #8]
   13e4c:	ldrb	r4, [r6]
   13e50:	cmp	r4, #0
   13e54:	beq	13f8c <__assert_fail@plt+0x301c>
   13e58:	mov	r1, r4
   13e5c:	mov	r0, r9
   13e60:	bl	10e80 <strchr@plt>
   13e64:	cmp	r0, #0
   13e68:	bne	13ea4 <__assert_fail@plt+0x2f34>
   13e6c:	ldrd	r2, [sp, #8]
   13e70:	orr	r5, r5, #2
   13e74:	strd	r2, [r8]
   13e78:	b	13de8 <__assert_fail@plt+0x2e78>
   13e7c:	ldr	r5, [sl]
   13e80:	cmp	r5, #0
   13e84:	beq	13e94 <__assert_fail@plt+0x2f24>
   13e88:	cmp	r5, #34	; 0x22
   13e8c:	bne	13de4 <__assert_fail@plt+0x2e74>
   13e90:	mov	r5, #1
   13e94:	cmp	r9, #0
   13e98:	bne	13e4c <__assert_fail@plt+0x2edc>
   13e9c:	strd	r0, [r8]
   13ea0:	b	13de8 <__assert_fail@plt+0x2e78>
   13ea4:	cmp	r4, #84	; 0x54
   13ea8:	beq	13efc <__assert_fail@plt+0x2f8c>
   13eac:	bhi	13ee4 <__assert_fail@plt+0x2f74>
   13eb0:	cmp	r4, #75	; 0x4b
   13eb4:	beq	13efc <__assert_fail@plt+0x2f8c>
   13eb8:	bhi	13ed4 <__assert_fail@plt+0x2f64>
   13ebc:	cmp	r4, #69	; 0x45
   13ec0:	beq	13efc <__assert_fail@plt+0x2f8c>
   13ec4:	cmp	r4, #71	; 0x47
   13ec8:	beq	13efc <__assert_fail@plt+0x2f8c>
   13ecc:	mov	r6, #1
   13ed0:	b	13fc0 <__assert_fail@plt+0x3050>
   13ed4:	cmp	r4, #77	; 0x4d
   13ed8:	beq	13efc <__assert_fail@plt+0x2f8c>
   13edc:	cmp	r4, #80	; 0x50
   13ee0:	b	13ec8 <__assert_fail@plt+0x2f58>
   13ee4:	cmp	r4, #103	; 0x67
   13ee8:	beq	13efc <__assert_fail@plt+0x2f8c>
   13eec:	bhi	13f98 <__assert_fail@plt+0x3028>
   13ef0:	sub	r3, r4, #89	; 0x59
   13ef4:	cmp	r3, #1
   13ef8:	bhi	13ecc <__assert_fail@plt+0x2f5c>
   13efc:	mov	r1, #48	; 0x30
   13f00:	mov	r0, r9
   13f04:	bl	10e80 <strchr@plt>
   13f08:	cmp	r0, #0
   13f0c:	beq	13ecc <__assert_fail@plt+0x2f5c>
   13f10:	ldrb	r3, [r6, #1]
   13f14:	cmp	r3, #68	; 0x44
   13f18:	beq	13f2c <__assert_fail@plt+0x2fbc>
   13f1c:	cmp	r3, #105	; 0x69
   13f20:	beq	13fb0 <__assert_fail@plt+0x3040>
   13f24:	cmp	r3, #66	; 0x42
   13f28:	bne	13ecc <__assert_fail@plt+0x2f5c>
   13f2c:	mov	r6, #2
   13f30:	mov	r1, #1000	; 0x3e8
   13f34:	cmp	r4, #89	; 0x59
   13f38:	beq	14074 <__assert_fail@plt+0x3104>
   13f3c:	bhi	13fe8 <__assert_fail@plt+0x3078>
   13f40:	cmp	r4, #75	; 0x4b
   13f44:	beq	14028 <__assert_fail@plt+0x30b8>
   13f48:	bhi	13fc8 <__assert_fail@plt+0x3058>
   13f4c:	cmp	r4, #69	; 0x45
   13f50:	beq	14050 <__assert_fail@plt+0x30e0>
   13f54:	cmp	r4, #71	; 0x47
   13f58:	beq	1405c <__assert_fail@plt+0x30ec>
   13f5c:	cmp	r4, #66	; 0x42
   13f60:	moveq	r1, #1024	; 0x400
   13f64:	bne	13e6c <__assert_fail@plt+0x2efc>
   13f68:	add	r0, sp, #8
   13f6c:	bl	13c9c <__assert_fail@plt+0x2d2c>
   13f70:	ldr	r3, [r7]
   13f74:	orr	r5, r5, r0
   13f78:	add	r2, r3, r6
   13f7c:	str	r2, [r7]
   13f80:	ldrb	r3, [r3, r6]
   13f84:	cmp	r3, #0
   13f88:	orrne	r5, r5, #2
   13f8c:	ldrd	r2, [sp, #8]
   13f90:	strd	r2, [r8]
   13f94:	b	13de8 <__assert_fail@plt+0x2e78>
   13f98:	cmp	r4, #109	; 0x6d
   13f9c:	beq	13efc <__assert_fail@plt+0x2f8c>
   13fa0:	cmp	r4, #116	; 0x74
   13fa4:	beq	13efc <__assert_fail@plt+0x2f8c>
   13fa8:	cmp	r4, #107	; 0x6b
   13fac:	b	13ec8 <__assert_fail@plt+0x2f58>
   13fb0:	ldrb	r6, [r6, #2]
   13fb4:	cmp	r6, #66	; 0x42
   13fb8:	movne	r6, #1
   13fbc:	moveq	r6, #3
   13fc0:	mov	r1, #1024	; 0x400
   13fc4:	b	13f34 <__assert_fail@plt+0x2fc4>
   13fc8:	cmp	r4, #80	; 0x50
   13fcc:	beq	14064 <__assert_fail@plt+0x30f4>
   13fd0:	cmp	r4, #84	; 0x54
   13fd4:	beq	1406c <__assert_fail@plt+0x30fc>
   13fd8:	cmp	r4, #77	; 0x4d
   13fdc:	bne	13e6c <__assert_fail@plt+0x2efc>
   13fe0:	mov	r2, #2
   13fe4:	b	14054 <__assert_fail@plt+0x30e4>
   13fe8:	cmp	r4, #103	; 0x67
   13fec:	beq	1405c <__assert_fail@plt+0x30ec>
   13ff0:	bhi	14014 <__assert_fail@plt+0x30a4>
   13ff4:	cmp	r4, #98	; 0x62
   13ff8:	beq	14048 <__assert_fail@plt+0x30d8>
   13ffc:	cmp	r4, #99	; 0x63
   14000:	beq	14084 <__assert_fail@plt+0x3114>
   14004:	cmp	r4, #90	; 0x5a
   14008:	bne	13e6c <__assert_fail@plt+0x2efc>
   1400c:	mov	r2, #7
   14010:	b	14054 <__assert_fail@plt+0x30e4>
   14014:	cmp	r4, #109	; 0x6d
   14018:	beq	13fe0 <__assert_fail@plt+0x3070>
   1401c:	bhi	14030 <__assert_fail@plt+0x30c0>
   14020:	cmp	r4, #107	; 0x6b
   14024:	bne	13e6c <__assert_fail@plt+0x2efc>
   14028:	mov	r2, #1
   1402c:	b	14054 <__assert_fail@plt+0x30e4>
   14030:	cmp	r4, #116	; 0x74
   14034:	beq	1406c <__assert_fail@plt+0x30fc>
   14038:	cmp	r4, #119	; 0x77
   1403c:	moveq	r1, #2
   14040:	beq	13f68 <__assert_fail@plt+0x2ff8>
   14044:	b	13e6c <__assert_fail@plt+0x2efc>
   14048:	mov	r1, #512	; 0x200
   1404c:	b	13f68 <__assert_fail@plt+0x2ff8>
   14050:	mov	r2, #6
   14054:	add	r0, sp, #8
   14058:	b	1407c <__assert_fail@plt+0x310c>
   1405c:	mov	r2, #3
   14060:	b	14054 <__assert_fail@plt+0x30e4>
   14064:	mov	r2, #5
   14068:	b	14054 <__assert_fail@plt+0x30e4>
   1406c:	mov	r2, #4
   14070:	b	14054 <__assert_fail@plt+0x30e4>
   14074:	mov	r2, #8
   14078:	add	r0, sp, r2
   1407c:	bl	13d30 <__assert_fail@plt+0x2dc0>
   14080:	b	13f70 <__assert_fail@plt+0x3000>
   14084:	mov	r0, #0
   14088:	b	13f70 <__assert_fail@plt+0x3000>
   1408c:	ldrdeq	r5, [r1], -sl
   14090:	andeq	r5, r1, r5, ror #5
   14094:	strdeq	r5, [r1], -r3
   14098:	cmp	r1, #0
   1409c:	cmpne	r0, #0
   140a0:	moveq	r1, #1
   140a4:	moveq	r0, r1
   140a8:	umull	r2, r3, r0, r1
   140ac:	adds	r3, r3, #0
   140b0:	movne	r3, #1
   140b4:	cmp	r2, #0
   140b8:	blt	140c8 <__assert_fail@plt+0x3158>
   140bc:	cmp	r3, #0
   140c0:	bne	140c8 <__assert_fail@plt+0x3158>
   140c4:	b	10cf4 <calloc@plt>
   140c8:	push	{r4, lr}
   140cc:	bl	10e8c <__errno_location@plt>
   140d0:	mov	r3, #12
   140d4:	str	r3, [r0]
   140d8:	mov	r0, #0
   140dc:	pop	{r4, pc}
   140e0:	cmp	r0, #0
   140e4:	mov	r3, #0
   140e8:	moveq	r0, #1
   140ec:	adds	r3, r3, #0
   140f0:	movne	r3, #1
   140f4:	cmp	r0, #0
   140f8:	blt	14108 <__assert_fail@plt+0x3198>
   140fc:	cmp	r3, #0
   14100:	bne	14108 <__assert_fail@plt+0x3198>
   14104:	b	10e20 <malloc@plt>
   14108:	push	{r4, lr}
   1410c:	bl	10e8c <__errno_location@plt>
   14110:	mov	r3, #12
   14114:	str	r3, [r0]
   14118:	mov	r0, #0
   1411c:	pop	{r4, pc}
   14120:	cmp	r0, #0
   14124:	push	{r4, lr}
   14128:	mov	r4, r1
   1412c:	bne	1413c <__assert_fail@plt+0x31cc>
   14130:	mov	r0, r1
   14134:	pop	{r4, lr}
   14138:	b	140e0 <__assert_fail@plt+0x3170>
   1413c:	cmp	r1, #0
   14140:	bne	14150 <__assert_fail@plt+0x31e0>
   14144:	bl	141ec <__assert_fail@plt+0x327c>
   14148:	mov	r0, #0
   1414c:	pop	{r4, pc}
   14150:	cmp	r1, #0
   14154:	blt	14164 <__assert_fail@plt+0x31f4>
   14158:	mov	r3, #0
   1415c:	cmp	r3, r3
   14160:	beq	14174 <__assert_fail@plt+0x3204>
   14164:	bl	10e8c <__errno_location@plt>
   14168:	mov	r3, #12
   1416c:	str	r3, [r0]
   14170:	b	14148 <__assert_fail@plt+0x31d8>
   14174:	pop	{r4, lr}
   14178:	b	10db4 <realloc@plt>
   1417c:	push	{r4, r5, r6, lr}
   14180:	mov	r4, r0
   14184:	bl	10df0 <__fpending@plt>
   14188:	mov	r5, r0
   1418c:	mov	r0, r4
   14190:	bl	10dfc <ferror_unlocked@plt>
   14194:	mov	r6, r0
   14198:	mov	r0, r4
   1419c:	bl	119b8 <__assert_fail@plt+0xa48>
   141a0:	cmp	r6, #0
   141a4:	mov	r4, r0
   141a8:	bne	141d4 <__assert_fail@plt+0x3264>
   141ac:	cmp	r0, #0
   141b0:	beq	141cc <__assert_fail@plt+0x325c>
   141b4:	cmp	r5, #0
   141b8:	bne	141e4 <__assert_fail@plt+0x3274>
   141bc:	bl	10e8c <__errno_location@plt>
   141c0:	ldr	r4, [r0]
   141c4:	subs	r4, r4, #9
   141c8:	mvnne	r4, #0
   141cc:	mov	r0, r4
   141d0:	pop	{r4, r5, r6, pc}
   141d4:	cmp	r0, #0
   141d8:	bne	141e4 <__assert_fail@plt+0x3274>
   141dc:	bl	10e8c <__errno_location@plt>
   141e0:	str	r4, [r0]
   141e4:	mvn	r4, #0
   141e8:	b	141cc <__assert_fail@plt+0x325c>
   141ec:	push	{r0, r1, r2, r4, r5, lr}
   141f0:	mov	r5, r0
   141f4:	bl	10e8c <__errno_location@plt>
   141f8:	ldr	r3, [r0]
   141fc:	mov	r4, r0
   14200:	str	r3, [sp]
   14204:	str	r3, [sp, #4]
   14208:	mov	r3, #0
   1420c:	str	r3, [r0]
   14210:	mov	r0, r5
   14214:	bl	10d48 <free@plt>
   14218:	ldr	r3, [r4]
   1421c:	add	r2, sp, #8
   14220:	cmp	r3, #0
   14224:	moveq	r3, #4
   14228:	movne	r3, #0
   1422c:	add	r3, r2, r3
   14230:	ldr	r3, [r3, #-8]
   14234:	str	r3, [r4]
   14238:	add	sp, sp, #12
   1423c:	pop	{r4, r5, pc}
   14240:	push	{r4, lr}
   14244:	mov	r0, #14
   14248:	bl	10f10 <nl_langinfo@plt>
   1424c:	ldr	r3, [pc, #24]	; 1426c <__assert_fail@plt+0x32fc>
   14250:	cmp	r0, #0
   14254:	moveq	r0, r3
   14258:	ldr	r3, [pc, #16]	; 14270 <__assert_fail@plt+0x3300>
   1425c:	ldrb	r2, [r0]
   14260:	cmp	r2, #0
   14264:	moveq	r0, r3
   14268:	pop	{r4, pc}
   1426c:	ldrdeq	r4, [r1], -sl
   14270:	andeq	r5, r1, r9, lsl r3
   14274:	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   14278:	subs	r5, r0, #0
   1427c:	addeq	r5, sp, #4
   14280:	mov	r0, r5
   14284:	mov	r7, r2
   14288:	mov	r6, r1
   1428c:	bl	10e08 <mbrtowc@plt>
   14290:	cmp	r7, #0
   14294:	cmnne	r0, #3
   14298:	mov	r4, r0
   1429c:	bls	142b8 <__assert_fail@plt+0x3348>
   142a0:	mov	r0, #0
   142a4:	bl	14310 <__assert_fail@plt+0x33a0>
   142a8:	cmp	r0, #0
   142ac:	moveq	r4, #1
   142b0:	ldrbeq	r3, [r6]
   142b4:	streq	r3, [r5]
   142b8:	mov	r0, r4
   142bc:	add	sp, sp, #12
   142c0:	pop	{r4, r5, r6, r7, pc}
   142c4:	push	{r4, r5, r6, lr}
   142c8:	subs	r4, r2, #0
   142cc:	mov	r6, r0
   142d0:	mov	r5, r1
   142d4:	beq	142ec <__assert_fail@plt+0x337c>
   142d8:	mov	r1, r4
   142dc:	mvn	r0, #0
   142e0:	bl	143f0 <__assert_fail@plt+0x3480>
   142e4:	cmp	r0, r5
   142e8:	bcc	142fc <__assert_fail@plt+0x338c>
   142ec:	mul	r1, r5, r4
   142f0:	mov	r0, r6
   142f4:	pop	{r4, r5, r6, lr}
   142f8:	b	14120 <__assert_fail@plt+0x31b0>
   142fc:	bl	10e8c <__errno_location@plt>
   14300:	mov	r3, #12
   14304:	str	r3, [r0]
   14308:	mov	r0, #0
   1430c:	pop	{r4, r5, r6, pc}
   14310:	push	{lr}		; (str lr, [sp, #-4]!)
   14314:	sub	sp, sp, #268	; 0x10c
   14318:	ldr	r2, [pc, #64]	; 14360 <__assert_fail@plt+0x33f0>
   1431c:	add	r1, sp, #4
   14320:	bl	1436c <__assert_fail@plt+0x33fc>
   14324:	cmp	r0, #0
   14328:	movne	r0, #0
   1432c:	bne	14358 <__assert_fail@plt+0x33e8>
   14330:	ldr	r1, [pc, #44]	; 14364 <__assert_fail@plt+0x33f4>
   14334:	add	r0, sp, #4
   14338:	bl	10d18 <strcmp@plt>
   1433c:	cmp	r0, #0
   14340:	beq	14358 <__assert_fail@plt+0x33e8>
   14344:	ldr	r1, [pc, #28]	; 14368 <__assert_fail@plt+0x33f8>
   14348:	add	r0, sp, #4
   1434c:	bl	10d18 <strcmp@plt>
   14350:	adds	r0, r0, #0
   14354:	movne	r0, #1
   14358:	add	sp, sp, #268	; 0x10c
   1435c:	pop	{pc}		; (ldr pc, [sp], #4)
   14360:	andeq	r0, r0, r1, lsl #2
   14364:	andeq	r5, r1, pc, lsl r3
   14368:	andeq	r5, r1, r1, lsr #6
   1436c:	push	{r4, r5, r6, lr}
   14370:	mov	r5, r1
   14374:	mov	r1, #0
   14378:	mov	r4, r2
   1437c:	bl	10ef8 <setlocale@plt>
   14380:	subs	r6, r0, #0
   14384:	bne	14398 <__assert_fail@plt+0x3428>
   14388:	cmp	r4, #0
   1438c:	strbne	r6, [r5]
   14390:	mov	r0, #22
   14394:	pop	{r4, r5, r6, pc}
   14398:	bl	10e74 <strlen@plt>
   1439c:	cmp	r4, r0
   143a0:	bls	143bc <__assert_fail@plt+0x344c>
   143a4:	add	r2, r0, #1
   143a8:	mov	r1, r6
   143ac:	mov	r0, r5
   143b0:	bl	10d60 <memcpy@plt>
   143b4:	mov	r0, #0
   143b8:	pop	{r4, r5, r6, pc}
   143bc:	cmp	r4, #0
   143c0:	beq	143e0 <__assert_fail@plt+0x3470>
   143c4:	sub	r4, r4, #1
   143c8:	mov	r2, r4
   143cc:	mov	r1, r6
   143d0:	mov	r0, r5
   143d4:	bl	10d60 <memcpy@plt>
   143d8:	mov	r3, #0
   143dc:	strb	r3, [r5, r4]
   143e0:	mov	r0, #34	; 0x22
   143e4:	pop	{r4, r5, r6, pc}
   143e8:	mov	r1, #0
   143ec:	b	10ef8 <setlocale@plt>
   143f0:	subs	r2, r1, #1
   143f4:	bxeq	lr
   143f8:	bcc	145d0 <__assert_fail@plt+0x3660>
   143fc:	cmp	r0, r1
   14400:	bls	145b4 <__assert_fail@plt+0x3644>
   14404:	tst	r1, r2
   14408:	beq	145c0 <__assert_fail@plt+0x3650>
   1440c:	clz	r3, r0
   14410:	clz	r2, r1
   14414:	sub	r3, r2, r3
   14418:	rsbs	r3, r3, #31
   1441c:	addne	r3, r3, r3, lsl #1
   14420:	mov	r2, #0
   14424:	addne	pc, pc, r3, lsl #2
   14428:	nop			; (mov r0, r0)
   1442c:	cmp	r0, r1, lsl #31
   14430:	adc	r2, r2, r2
   14434:	subcs	r0, r0, r1, lsl #31
   14438:	cmp	r0, r1, lsl #30
   1443c:	adc	r2, r2, r2
   14440:	subcs	r0, r0, r1, lsl #30
   14444:	cmp	r0, r1, lsl #29
   14448:	adc	r2, r2, r2
   1444c:	subcs	r0, r0, r1, lsl #29
   14450:	cmp	r0, r1, lsl #28
   14454:	adc	r2, r2, r2
   14458:	subcs	r0, r0, r1, lsl #28
   1445c:	cmp	r0, r1, lsl #27
   14460:	adc	r2, r2, r2
   14464:	subcs	r0, r0, r1, lsl #27
   14468:	cmp	r0, r1, lsl #26
   1446c:	adc	r2, r2, r2
   14470:	subcs	r0, r0, r1, lsl #26
   14474:	cmp	r0, r1, lsl #25
   14478:	adc	r2, r2, r2
   1447c:	subcs	r0, r0, r1, lsl #25
   14480:	cmp	r0, r1, lsl #24
   14484:	adc	r2, r2, r2
   14488:	subcs	r0, r0, r1, lsl #24
   1448c:	cmp	r0, r1, lsl #23
   14490:	adc	r2, r2, r2
   14494:	subcs	r0, r0, r1, lsl #23
   14498:	cmp	r0, r1, lsl #22
   1449c:	adc	r2, r2, r2
   144a0:	subcs	r0, r0, r1, lsl #22
   144a4:	cmp	r0, r1, lsl #21
   144a8:	adc	r2, r2, r2
   144ac:	subcs	r0, r0, r1, lsl #21
   144b0:	cmp	r0, r1, lsl #20
   144b4:	adc	r2, r2, r2
   144b8:	subcs	r0, r0, r1, lsl #20
   144bc:	cmp	r0, r1, lsl #19
   144c0:	adc	r2, r2, r2
   144c4:	subcs	r0, r0, r1, lsl #19
   144c8:	cmp	r0, r1, lsl #18
   144cc:	adc	r2, r2, r2
   144d0:	subcs	r0, r0, r1, lsl #18
   144d4:	cmp	r0, r1, lsl #17
   144d8:	adc	r2, r2, r2
   144dc:	subcs	r0, r0, r1, lsl #17
   144e0:	cmp	r0, r1, lsl #16
   144e4:	adc	r2, r2, r2
   144e8:	subcs	r0, r0, r1, lsl #16
   144ec:	cmp	r0, r1, lsl #15
   144f0:	adc	r2, r2, r2
   144f4:	subcs	r0, r0, r1, lsl #15
   144f8:	cmp	r0, r1, lsl #14
   144fc:	adc	r2, r2, r2
   14500:	subcs	r0, r0, r1, lsl #14
   14504:	cmp	r0, r1, lsl #13
   14508:	adc	r2, r2, r2
   1450c:	subcs	r0, r0, r1, lsl #13
   14510:	cmp	r0, r1, lsl #12
   14514:	adc	r2, r2, r2
   14518:	subcs	r0, r0, r1, lsl #12
   1451c:	cmp	r0, r1, lsl #11
   14520:	adc	r2, r2, r2
   14524:	subcs	r0, r0, r1, lsl #11
   14528:	cmp	r0, r1, lsl #10
   1452c:	adc	r2, r2, r2
   14530:	subcs	r0, r0, r1, lsl #10
   14534:	cmp	r0, r1, lsl #9
   14538:	adc	r2, r2, r2
   1453c:	subcs	r0, r0, r1, lsl #9
   14540:	cmp	r0, r1, lsl #8
   14544:	adc	r2, r2, r2
   14548:	subcs	r0, r0, r1, lsl #8
   1454c:	cmp	r0, r1, lsl #7
   14550:	adc	r2, r2, r2
   14554:	subcs	r0, r0, r1, lsl #7
   14558:	cmp	r0, r1, lsl #6
   1455c:	adc	r2, r2, r2
   14560:	subcs	r0, r0, r1, lsl #6
   14564:	cmp	r0, r1, lsl #5
   14568:	adc	r2, r2, r2
   1456c:	subcs	r0, r0, r1, lsl #5
   14570:	cmp	r0, r1, lsl #4
   14574:	adc	r2, r2, r2
   14578:	subcs	r0, r0, r1, lsl #4
   1457c:	cmp	r0, r1, lsl #3
   14580:	adc	r2, r2, r2
   14584:	subcs	r0, r0, r1, lsl #3
   14588:	cmp	r0, r1, lsl #2
   1458c:	adc	r2, r2, r2
   14590:	subcs	r0, r0, r1, lsl #2
   14594:	cmp	r0, r1, lsl #1
   14598:	adc	r2, r2, r2
   1459c:	subcs	r0, r0, r1, lsl #1
   145a0:	cmp	r0, r1
   145a4:	adc	r2, r2, r2
   145a8:	subcs	r0, r0, r1
   145ac:	mov	r0, r2
   145b0:	bx	lr
   145b4:	moveq	r0, #1
   145b8:	movne	r0, #0
   145bc:	bx	lr
   145c0:	clz	r2, r1
   145c4:	rsb	r2, r2, #31
   145c8:	lsr	r0, r0, r2
   145cc:	bx	lr
   145d0:	cmp	r0, #0
   145d4:	mvnne	r0, #0
   145d8:	b	14878 <__assert_fail@plt+0x3908>
   145dc:	cmp	r1, #0
   145e0:	beq	145d0 <__assert_fail@plt+0x3660>
   145e4:	push	{r0, r1, lr}
   145e8:	bl	143f0 <__assert_fail@plt+0x3480>
   145ec:	pop	{r1, r2, lr}
   145f0:	mul	r3, r2, r0
   145f4:	sub	r1, r1, r3
   145f8:	bx	lr
   145fc:	cmp	r1, #0
   14600:	beq	1480c <__assert_fail@plt+0x389c>
   14604:	eor	ip, r0, r1
   14608:	rsbmi	r1, r1, #0
   1460c:	subs	r2, r1, #1
   14610:	beq	147d8 <__assert_fail@plt+0x3868>
   14614:	movs	r3, r0
   14618:	rsbmi	r3, r0, #0
   1461c:	cmp	r3, r1
   14620:	bls	147e4 <__assert_fail@plt+0x3874>
   14624:	tst	r1, r2
   14628:	beq	147f4 <__assert_fail@plt+0x3884>
   1462c:	clz	r2, r3
   14630:	clz	r0, r1
   14634:	sub	r2, r0, r2
   14638:	rsbs	r2, r2, #31
   1463c:	addne	r2, r2, r2, lsl #1
   14640:	mov	r0, #0
   14644:	addne	pc, pc, r2, lsl #2
   14648:	nop			; (mov r0, r0)
   1464c:	cmp	r3, r1, lsl #31
   14650:	adc	r0, r0, r0
   14654:	subcs	r3, r3, r1, lsl #31
   14658:	cmp	r3, r1, lsl #30
   1465c:	adc	r0, r0, r0
   14660:	subcs	r3, r3, r1, lsl #30
   14664:	cmp	r3, r1, lsl #29
   14668:	adc	r0, r0, r0
   1466c:	subcs	r3, r3, r1, lsl #29
   14670:	cmp	r3, r1, lsl #28
   14674:	adc	r0, r0, r0
   14678:	subcs	r3, r3, r1, lsl #28
   1467c:	cmp	r3, r1, lsl #27
   14680:	adc	r0, r0, r0
   14684:	subcs	r3, r3, r1, lsl #27
   14688:	cmp	r3, r1, lsl #26
   1468c:	adc	r0, r0, r0
   14690:	subcs	r3, r3, r1, lsl #26
   14694:	cmp	r3, r1, lsl #25
   14698:	adc	r0, r0, r0
   1469c:	subcs	r3, r3, r1, lsl #25
   146a0:	cmp	r3, r1, lsl #24
   146a4:	adc	r0, r0, r0
   146a8:	subcs	r3, r3, r1, lsl #24
   146ac:	cmp	r3, r1, lsl #23
   146b0:	adc	r0, r0, r0
   146b4:	subcs	r3, r3, r1, lsl #23
   146b8:	cmp	r3, r1, lsl #22
   146bc:	adc	r0, r0, r0
   146c0:	subcs	r3, r3, r1, lsl #22
   146c4:	cmp	r3, r1, lsl #21
   146c8:	adc	r0, r0, r0
   146cc:	subcs	r3, r3, r1, lsl #21
   146d0:	cmp	r3, r1, lsl #20
   146d4:	adc	r0, r0, r0
   146d8:	subcs	r3, r3, r1, lsl #20
   146dc:	cmp	r3, r1, lsl #19
   146e0:	adc	r0, r0, r0
   146e4:	subcs	r3, r3, r1, lsl #19
   146e8:	cmp	r3, r1, lsl #18
   146ec:	adc	r0, r0, r0
   146f0:	subcs	r3, r3, r1, lsl #18
   146f4:	cmp	r3, r1, lsl #17
   146f8:	adc	r0, r0, r0
   146fc:	subcs	r3, r3, r1, lsl #17
   14700:	cmp	r3, r1, lsl #16
   14704:	adc	r0, r0, r0
   14708:	subcs	r3, r3, r1, lsl #16
   1470c:	cmp	r3, r1, lsl #15
   14710:	adc	r0, r0, r0
   14714:	subcs	r3, r3, r1, lsl #15
   14718:	cmp	r3, r1, lsl #14
   1471c:	adc	r0, r0, r0
   14720:	subcs	r3, r3, r1, lsl #14
   14724:	cmp	r3, r1, lsl #13
   14728:	adc	r0, r0, r0
   1472c:	subcs	r3, r3, r1, lsl #13
   14730:	cmp	r3, r1, lsl #12
   14734:	adc	r0, r0, r0
   14738:	subcs	r3, r3, r1, lsl #12
   1473c:	cmp	r3, r1, lsl #11
   14740:	adc	r0, r0, r0
   14744:	subcs	r3, r3, r1, lsl #11
   14748:	cmp	r3, r1, lsl #10
   1474c:	adc	r0, r0, r0
   14750:	subcs	r3, r3, r1, lsl #10
   14754:	cmp	r3, r1, lsl #9
   14758:	adc	r0, r0, r0
   1475c:	subcs	r3, r3, r1, lsl #9
   14760:	cmp	r3, r1, lsl #8
   14764:	adc	r0, r0, r0
   14768:	subcs	r3, r3, r1, lsl #8
   1476c:	cmp	r3, r1, lsl #7
   14770:	adc	r0, r0, r0
   14774:	subcs	r3, r3, r1, lsl #7
   14778:	cmp	r3, r1, lsl #6
   1477c:	adc	r0, r0, r0
   14780:	subcs	r3, r3, r1, lsl #6
   14784:	cmp	r3, r1, lsl #5
   14788:	adc	r0, r0, r0
   1478c:	subcs	r3, r3, r1, lsl #5
   14790:	cmp	r3, r1, lsl #4
   14794:	adc	r0, r0, r0
   14798:	subcs	r3, r3, r1, lsl #4
   1479c:	cmp	r3, r1, lsl #3
   147a0:	adc	r0, r0, r0
   147a4:	subcs	r3, r3, r1, lsl #3
   147a8:	cmp	r3, r1, lsl #2
   147ac:	adc	r0, r0, r0
   147b0:	subcs	r3, r3, r1, lsl #2
   147b4:	cmp	r3, r1, lsl #1
   147b8:	adc	r0, r0, r0
   147bc:	subcs	r3, r3, r1, lsl #1
   147c0:	cmp	r3, r1
   147c4:	adc	r0, r0, r0
   147c8:	subcs	r3, r3, r1
   147cc:	cmp	ip, #0
   147d0:	rsbmi	r0, r0, #0
   147d4:	bx	lr
   147d8:	teq	ip, r0
   147dc:	rsbmi	r0, r0, #0
   147e0:	bx	lr
   147e4:	movcc	r0, #0
   147e8:	asreq	r0, ip, #31
   147ec:	orreq	r0, r0, #1
   147f0:	bx	lr
   147f4:	clz	r2, r1
   147f8:	rsb	r2, r2, #31
   147fc:	cmp	ip, #0
   14800:	lsr	r0, r3, r2
   14804:	rsbmi	r0, r0, #0
   14808:	bx	lr
   1480c:	cmp	r0, #0
   14810:	mvngt	r0, #-2147483648	; 0x80000000
   14814:	movlt	r0, #-2147483648	; 0x80000000
   14818:	b	14878 <__assert_fail@plt+0x3908>
   1481c:	cmp	r1, #0
   14820:	beq	1480c <__assert_fail@plt+0x389c>
   14824:	push	{r0, r1, lr}
   14828:	bl	14604 <__assert_fail@plt+0x3694>
   1482c:	pop	{r1, r2, lr}
   14830:	mul	r3, r2, r0
   14834:	sub	r1, r1, r3
   14838:	bx	lr
   1483c:	cmp	r3, #0
   14840:	cmpeq	r2, #0
   14844:	bne	1485c <__assert_fail@plt+0x38ec>
   14848:	cmp	r1, #0
   1484c:	cmpeq	r0, #0
   14850:	mvnne	r1, #0
   14854:	mvnne	r0, #0
   14858:	b	14878 <__assert_fail@plt+0x3908>
   1485c:	sub	sp, sp, #8
   14860:	push	{sp, lr}
   14864:	bl	14888 <__assert_fail@plt+0x3918>
   14868:	ldr	lr, [sp, #4]
   1486c:	add	sp, sp, #8
   14870:	pop	{r2, r3}
   14874:	bx	lr
   14878:	push	{r1, lr}
   1487c:	mov	r0, #8
   14880:	bl	10d0c <raise@plt>
   14884:	pop	{r1, pc}
   14888:	cmp	r1, r3
   1488c:	push	{r4, r5, r6, r7, r8, r9, lr}
   14890:	cmpeq	r0, r2
   14894:	mov	r4, r0
   14898:	mov	r5, r1
   1489c:	ldr	r9, [sp, #28]
   148a0:	movcc	r0, #0
   148a4:	movcc	r1, #0
   148a8:	bcc	149a0 <__assert_fail@plt+0x3a30>
   148ac:	cmp	r3, #0
   148b0:	clzeq	ip, r2
   148b4:	clzne	ip, r3
   148b8:	addeq	ip, ip, #32
   148bc:	cmp	r5, #0
   148c0:	clzeq	r1, r4
   148c4:	addeq	r1, r1, #32
   148c8:	clzne	r1, r5
   148cc:	sub	ip, ip, r1
   148d0:	sub	lr, ip, #32
   148d4:	lsl	r7, r3, ip
   148d8:	rsb	r8, ip, #32
   148dc:	orr	r7, r7, r2, lsl lr
   148e0:	orr	r7, r7, r2, lsr r8
   148e4:	lsl	r6, r2, ip
   148e8:	cmp	r5, r7
   148ec:	cmpeq	r4, r6
   148f0:	movcc	r0, #0
   148f4:	movcc	r1, #0
   148f8:	bcc	14914 <__assert_fail@plt+0x39a4>
   148fc:	mov	r3, #1
   14900:	subs	r4, r4, r6
   14904:	lsl	r1, r3, lr
   14908:	lsl	r0, r3, ip
   1490c:	orr	r1, r1, r3, lsr r8
   14910:	sbc	r5, r5, r7
   14914:	cmp	ip, #0
   14918:	beq	149a0 <__assert_fail@plt+0x3a30>
   1491c:	lsrs	r3, r7, #1
   14920:	rrx	r2, r6
   14924:	mov	r6, ip
   14928:	b	1494c <__assert_fail@plt+0x39dc>
   1492c:	subs	r4, r4, r2
   14930:	sbc	r5, r5, r3
   14934:	adds	r4, r4, r4
   14938:	adc	r5, r5, r5
   1493c:	adds	r4, r4, #1
   14940:	adc	r5, r5, #0
   14944:	subs	r6, r6, #1
   14948:	beq	14968 <__assert_fail@plt+0x39f8>
   1494c:	cmp	r5, r3
   14950:	cmpeq	r4, r2
   14954:	bcs	1492c <__assert_fail@plt+0x39bc>
   14958:	adds	r4, r4, r4
   1495c:	adc	r5, r5, r5
   14960:	subs	r6, r6, #1
   14964:	bne	1494c <__assert_fail@plt+0x39dc>
   14968:	lsr	r6, r4, ip
   1496c:	lsr	r7, r5, ip
   14970:	orr	r6, r6, r5, lsl r8
   14974:	adds	r2, r0, r4
   14978:	orr	r6, r6, r5, lsr lr
   1497c:	adc	r3, r1, r5
   14980:	lsl	r1, r7, ip
   14984:	orr	r1, r1, r6, lsl lr
   14988:	lsl	r0, r6, ip
   1498c:	orr	r1, r1, r6, lsr r8
   14990:	subs	r0, r2, r0
   14994:	mov	r4, r6
   14998:	mov	r5, r7
   1499c:	sbc	r1, r3, r1
   149a0:	cmp	r9, #0
   149a4:	popeq	{r4, r5, r6, r7, r8, r9, pc}
   149a8:	strd	r4, [r9]
   149ac:	pop	{r4, r5, r6, r7, r8, r9, pc}
   149b0:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   149b4:	mov	r7, r0
   149b8:	ldr	r6, [pc, #72]	; 14a08 <__assert_fail@plt+0x3a98>
   149bc:	ldr	r5, [pc, #72]	; 14a0c <__assert_fail@plt+0x3a9c>
   149c0:	add	r6, pc, r6
   149c4:	add	r5, pc, r5
   149c8:	sub	r6, r6, r5
   149cc:	mov	r8, r1
   149d0:	mov	r9, r2
   149d4:	bl	10cd4 <calloc@plt-0x20>
   149d8:	asrs	r6, r6, #2
   149dc:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   149e0:	mov	r4, #0
   149e4:	add	r4, r4, #1
   149e8:	ldr	r3, [r5], #4
   149ec:	mov	r2, r9
   149f0:	mov	r1, r8
   149f4:	mov	r0, r7
   149f8:	blx	r3
   149fc:	cmp	r6, r4
   14a00:	bne	149e4 <__assert_fail@plt+0x3a74>
   14a04:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   14a08:	andeq	r1, r1, r8, asr #10
   14a0c:	andeq	r1, r1, r0, asr #10
   14a10:	bx	lr
   14a14:	ldr	r3, [pc, #12]	; 14a28 <__assert_fail@plt+0x3ab8>
   14a18:	mov	r1, #0
   14a1c:	add	r3, pc, r3
   14a20:	ldr	r2, [r3]
   14a24:	b	10e98 <__cxa_atexit@plt>
   14a28:	andeq	r1, r1, r8, asr #13

Disassembly of section .fini:

00014a2c <.fini>:
   14a2c:	push	{r3, lr}
   14a30:	pop	{r3, pc}
