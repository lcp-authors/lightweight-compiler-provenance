
../repos/coreutils/src/fold:     file format elf32-littlearm


Disassembly of section .init:

00010ca4 <.init>:
   10ca4:	push	{r3, lr}
   10ca8:	bl	111cc <__assert_fail@plt+0x298>
   10cac:	pop	{r3, pc}

Disassembly of section .plt:

00010cb0 <calloc@plt-0x14>:
   10cb0:	push	{lr}		; (str lr, [sp, #-4]!)
   10cb4:	ldr	lr, [pc, #4]	; 10cc0 <calloc@plt-0x4>
   10cb8:	add	lr, pc, lr
   10cbc:	ldr	pc, [lr, #8]!
   10cc0:	andeq	r6, r1, r0, asr #6

00010cc4 <calloc@plt>:
   10cc4:	add	ip, pc, #0, 12
   10cc8:	add	ip, ip, #90112	; 0x16000
   10ccc:	ldr	pc, [ip, #832]!	; 0x340

00010cd0 <fputs_unlocked@plt>:
   10cd0:	add	ip, pc, #0, 12
   10cd4:	add	ip, ip, #90112	; 0x16000
   10cd8:	ldr	pc, [ip, #824]!	; 0x338

00010cdc <raise@plt>:
   10cdc:	add	ip, pc, #0, 12
   10ce0:	add	ip, ip, #90112	; 0x16000
   10ce4:	ldr	pc, [ip, #816]!	; 0x330

00010ce8 <strcmp@plt>:
   10ce8:	add	ip, pc, #0, 12
   10cec:	add	ip, ip, #90112	; 0x16000
   10cf0:	ldr	pc, [ip, #808]!	; 0x328

00010cf4 <posix_fadvise64@plt>:
   10cf4:	add	ip, pc, #0, 12
   10cf8:	add	ip, ip, #90112	; 0x16000
   10cfc:	ldr	pc, [ip, #800]!	; 0x320

00010d00 <fflush@plt>:
   10d00:	add	ip, pc, #0, 12
   10d04:	add	ip, ip, #90112	; 0x16000
   10d08:	ldr	pc, [ip, #792]!	; 0x318

00010d0c <memmove@plt>:
   10d0c:	add	ip, pc, #0, 12
   10d10:	add	ip, ip, #90112	; 0x16000
   10d14:	ldr	pc, [ip, #784]!	; 0x310

00010d18 <free@plt>:
   10d18:	add	ip, pc, #0, 12
   10d1c:	add	ip, ip, #90112	; 0x16000
   10d20:	ldr	pc, [ip, #776]!	; 0x308

00010d24 <_exit@plt>:
   10d24:	add	ip, pc, #0, 12
   10d28:	add	ip, ip, #90112	; 0x16000
   10d2c:	ldr	pc, [ip, #768]!	; 0x300

00010d30 <memcpy@plt>:
   10d30:	add	ip, pc, #0, 12
   10d34:	add	ip, ip, #90112	; 0x16000
   10d38:	ldr	pc, [ip, #760]!	; 0x2f8

00010d3c <__strtoull_internal@plt>:
   10d3c:	add	ip, pc, #0, 12
   10d40:	add	ip, ip, #90112	; 0x16000
   10d44:	ldr	pc, [ip, #752]!	; 0x2f0

00010d48 <mbsinit@plt>:
   10d48:	add	ip, pc, #0, 12
   10d4c:	add	ip, ip, #90112	; 0x16000
   10d50:	ldr	pc, [ip, #744]!	; 0x2e8

00010d54 <fwrite_unlocked@plt>:
   10d54:	add	ip, pc, #0, 12
   10d58:	add	ip, ip, #90112	; 0x16000
   10d5c:	ldr	pc, [ip, #736]!	; 0x2e0

00010d60 <memcmp@plt>:
   10d60:	add	ip, pc, #0, 12
   10d64:	add	ip, ip, #90112	; 0x16000
   10d68:	ldr	pc, [ip, #728]!	; 0x2d8

00010d6c <fputc_unlocked@plt>:
   10d6c:	add	ip, pc, #0, 12
   10d70:	add	ip, ip, #90112	; 0x16000
   10d74:	ldr	pc, [ip, #720]!	; 0x2d0

00010d78 <dcgettext@plt>:
   10d78:	add	ip, pc, #0, 12
   10d7c:	add	ip, ip, #90112	; 0x16000
   10d80:	ldr	pc, [ip, #712]!	; 0x2c8

00010d84 <realloc@plt>:
   10d84:	add	ip, pc, #0, 12
   10d88:	add	ip, ip, #90112	; 0x16000
   10d8c:	ldr	pc, [ip, #704]!	; 0x2c0

00010d90 <textdomain@plt>:
   10d90:	add	ip, pc, #0, 12
   10d94:	add	ip, ip, #90112	; 0x16000
   10d98:	ldr	pc, [ip, #696]!	; 0x2b8

00010d9c <iswprint@plt>:
   10d9c:	add	ip, pc, #0, 12
   10da0:	add	ip, ip, #90112	; 0x16000
   10da4:	ldr	pc, [ip, #688]!	; 0x2b0

00010da8 <fwrite@plt>:
   10da8:	add	ip, pc, #0, 12
   10dac:	add	ip, ip, #90112	; 0x16000
   10db0:	ldr	pc, [ip, #680]!	; 0x2a8

00010db4 <lseek64@plt>:
   10db4:	add	ip, pc, #0, 12
   10db8:	add	ip, ip, #90112	; 0x16000
   10dbc:	ldr	pc, [ip, #672]!	; 0x2a0

00010dc0 <__ctype_get_mb_cur_max@plt>:
   10dc0:	add	ip, pc, #0, 12
   10dc4:	add	ip, ip, #90112	; 0x16000
   10dc8:	ldr	pc, [ip, #664]!	; 0x298

00010dcc <__fpending@plt>:
   10dcc:	add	ip, pc, #0, 12
   10dd0:	add	ip, ip, #90112	; 0x16000
   10dd4:	ldr	pc, [ip, #656]!	; 0x290

00010dd8 <mbrtowc@plt>:
   10dd8:	add	ip, pc, #0, 12
   10ddc:	add	ip, ip, #90112	; 0x16000
   10de0:	ldr	pc, [ip, #648]!	; 0x288

00010de4 <error@plt>:
   10de4:	add	ip, pc, #0, 12
   10de8:	add	ip, ip, #90112	; 0x16000
   10dec:	ldr	pc, [ip, #640]!	; 0x280

00010df0 <malloc@plt>:
   10df0:	add	ip, pc, #0, 12
   10df4:	add	ip, ip, #90112	; 0x16000
   10df8:	ldr	pc, [ip, #632]!	; 0x278

00010dfc <__libc_start_main@plt>:
   10dfc:	add	ip, pc, #0, 12
   10e00:	add	ip, ip, #90112	; 0x16000
   10e04:	ldr	pc, [ip, #624]!	; 0x270

00010e08 <__freading@plt>:
   10e08:	add	ip, pc, #0, 12
   10e0c:	add	ip, ip, #90112	; 0x16000
   10e10:	ldr	pc, [ip, #616]!	; 0x268

00010e14 <__gmon_start__@plt>:
   10e14:	add	ip, pc, #0, 12
   10e18:	add	ip, ip, #90112	; 0x16000
   10e1c:	ldr	pc, [ip, #608]!	; 0x260

00010e20 <getopt_long@plt>:
   10e20:	add	ip, pc, #0, 12
   10e24:	add	ip, ip, #90112	; 0x16000
   10e28:	ldr	pc, [ip, #600]!	; 0x258

00010e2c <__ctype_b_loc@plt>:
   10e2c:	add	ip, pc, #0, 12
   10e30:	add	ip, ip, #90112	; 0x16000
   10e34:	ldr	pc, [ip, #592]!	; 0x250

00010e38 <exit@plt>:
   10e38:	add	ip, pc, #0, 12
   10e3c:	add	ip, ip, #90112	; 0x16000
   10e40:	ldr	pc, [ip, #584]!	; 0x248

00010e44 <strlen@plt>:
   10e44:	add	ip, pc, #0, 12
   10e48:	add	ip, ip, #90112	; 0x16000
   10e4c:	ldr	pc, [ip, #576]!	; 0x240

00010e50 <strchr@plt>:
   10e50:	add	ip, pc, #0, 12
   10e54:	add	ip, ip, #90112	; 0x16000
   10e58:	ldr	pc, [ip, #568]!	; 0x238

00010e5c <__errno_location@plt>:
   10e5c:	add	ip, pc, #0, 12
   10e60:	add	ip, ip, #90112	; 0x16000
   10e64:	ldr	pc, [ip, #560]!	; 0x230

00010e68 <__cxa_atexit@plt>:
   10e68:	add	ip, pc, #0, 12
   10e6c:	add	ip, ip, #90112	; 0x16000
   10e70:	ldr	pc, [ip, #552]!	; 0x228

00010e74 <memset@plt>:
   10e74:	add	ip, pc, #0, 12
   10e78:	add	ip, ip, #90112	; 0x16000
   10e7c:	ldr	pc, [ip, #544]!	; 0x220

00010e80 <__printf_chk@plt>:
   10e80:	add	ip, pc, #0, 12
   10e84:	add	ip, ip, #90112	; 0x16000
   10e88:	ldr	pc, [ip, #536]!	; 0x218

00010e8c <fileno@plt>:
   10e8c:	add	ip, pc, #0, 12
   10e90:	add	ip, ip, #90112	; 0x16000
   10e94:	ldr	pc, [ip, #528]!	; 0x210

00010e98 <__fprintf_chk@plt>:
   10e98:	add	ip, pc, #0, 12
   10e9c:	add	ip, ip, #90112	; 0x16000
   10ea0:	ldr	pc, [ip, #520]!	; 0x208

00010ea4 <fclose@plt>:
   10ea4:	add	ip, pc, #0, 12
   10ea8:	add	ip, ip, #90112	; 0x16000
   10eac:	ldr	pc, [ip, #512]!	; 0x200

00010eb0 <fseeko64@plt>:
   10eb0:	add	ip, pc, #0, 12
   10eb4:	add	ip, ip, #90112	; 0x16000
   10eb8:	ldr	pc, [ip, #504]!	; 0x1f8

00010ebc <__uflow@plt>:
   10ebc:	add	ip, pc, #0, 12
   10ec0:	add	ip, ip, #90112	; 0x16000
   10ec4:	ldr	pc, [ip, #496]!	; 0x1f0

00010ec8 <__overflow@plt>:
   10ec8:	add	ip, pc, #0, 12
   10ecc:	add	ip, ip, #90112	; 0x16000
   10ed0:	ldr	pc, [ip, #488]!	; 0x1e8

00010ed4 <setlocale@plt>:
   10ed4:	add	ip, pc, #0, 12
   10ed8:	add	ip, ip, #90112	; 0x16000
   10edc:	ldr	pc, [ip, #480]!	; 0x1e0

00010ee0 <strrchr@plt>:
   10ee0:	add	ip, pc, #0, 12
   10ee4:	add	ip, ip, #90112	; 0x16000
   10ee8:	ldr	pc, [ip, #472]!	; 0x1d8

00010eec <nl_langinfo@plt>:
   10eec:	add	ip, pc, #0, 12
   10ef0:	add	ip, ip, #90112	; 0x16000
   10ef4:	ldr	pc, [ip, #464]!	; 0x1d0

00010ef8 <clearerr_unlocked@plt>:
   10ef8:	add	ip, pc, #0, 12
   10efc:	add	ip, ip, #90112	; 0x16000
   10f00:	ldr	pc, [ip, #456]!	; 0x1c8

00010f04 <fopen64@plt>:
   10f04:	add	ip, pc, #0, 12
   10f08:	add	ip, ip, #90112	; 0x16000
   10f0c:	ldr	pc, [ip, #448]!	; 0x1c0

00010f10 <bindtextdomain@plt>:
   10f10:	add	ip, pc, #0, 12
   10f14:	add	ip, ip, #90112	; 0x16000
   10f18:	ldr	pc, [ip, #440]!	; 0x1b8

00010f1c <strncmp@plt>:
   10f1c:	add	ip, pc, #0, 12
   10f20:	add	ip, ip, #90112	; 0x16000
   10f24:	ldr	pc, [ip, #432]!	; 0x1b0

00010f28 <abort@plt>:
   10f28:	add	ip, pc, #0, 12
   10f2c:	add	ip, ip, #90112	; 0x16000
   10f30:	ldr	pc, [ip, #424]!	; 0x1a8

00010f34 <__assert_fail@plt>:
   10f34:	add	ip, pc, #0, 12
   10f38:	add	ip, ip, #90112	; 0x16000
   10f3c:	ldr	pc, [ip, #416]!	; 0x1a0

Disassembly of section .text:

00010f40 <.text>:
   10f40:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10f44:	mov	r7, r0
   10f48:	sub	sp, sp, #36	; 0x24
   10f4c:	ldr	r0, [r1]
   10f50:	mov	r5, r1
   10f54:	bl	11c78 <__assert_fail@plt+0xd44>
   10f58:	ldr	r1, [pc, #492]	; 1114c <__assert_fail@plt+0x218>
   10f5c:	mov	r0, #6
   10f60:	bl	10ed4 <setlocale@plt>
   10f64:	ldr	r1, [pc, #484]	; 11150 <__assert_fail@plt+0x21c>
   10f68:	ldr	r0, [pc, #484]	; 11154 <__assert_fail@plt+0x220>
   10f6c:	bl	10f10 <bindtextdomain@plt>
   10f70:	ldr	r6, [pc, #480]	; 11158 <__assert_fail@plt+0x224>
   10f74:	ldr	r0, [pc, #472]	; 11154 <__assert_fail@plt+0x220>
   10f78:	ldr	r8, [pc, #476]	; 1115c <__assert_fail@plt+0x228>
   10f7c:	ldr	fp, [pc, #476]	; 11160 <__assert_fail@plt+0x22c>
   10f80:	ldr	r9, [pc, #476]	; 11164 <__assert_fail@plt+0x230>
   10f84:	bl	10d90 <textdomain@plt>
   10f88:	mov	sl, #80	; 0x50
   10f8c:	ldr	r0, [pc, #468]	; 11168 <__assert_fail@plt+0x234>
   10f90:	bl	15714 <__assert_fail@plt+0x47e0>
   10f94:	mov	r3, #0
   10f98:	strb	r3, [r6, #1]
   10f9c:	strb	r3, [r6]
   10fa0:	strb	r3, [r6, #12]
   10fa4:	mov	r4, #0
   10fa8:	str	r4, [sp]
   10fac:	mov	r3, r8
   10fb0:	ldr	r2, [pc, #436]	; 1116c <__assert_fail@plt+0x238>
   10fb4:	mov	r1, r5
   10fb8:	mov	r0, r7
   10fbc:	bl	10e20 <getopt_long@plt>
   10fc0:	cmn	r0, #1
   10fc4:	beq	110c0 <__assert_fail@plt+0x18c>
   10fc8:	cmp	r0, #57	; 0x39
   10fcc:	bgt	10ff0 <__assert_fail@plt+0xbc>
   10fd0:	cmp	r0, #48	; 0x30
   10fd4:	bge	11010 <__assert_fail@plt+0xdc>
   10fd8:	cmn	r0, #3
   10fdc:	beq	11078 <__assert_fail@plt+0x144>
   10fe0:	cmn	r0, #2
   10fe4:	bne	11008 <__assert_fail@plt+0xd4>
   10fe8:	mov	r0, r4
   10fec:	bl	11678 <__assert_fail@plt+0x744>
   10ff0:	cmp	r0, #115	; 0x73
   10ff4:	beq	110a8 <__assert_fail@plt+0x174>
   10ff8:	cmp	r0, #119	; 0x77
   10ffc:	beq	1102c <__assert_fail@plt+0xf8>
   11000:	cmp	r0, #98	; 0x62
   11004:	beq	110b4 <__assert_fail@plt+0x180>
   11008:	mov	r0, #1
   1100c:	bl	11678 <__assert_fail@plt+0x744>
   11010:	ldr	r3, [r9]
   11014:	cmp	r3, #0
   11018:	subne	r3, r3, #1
   1101c:	strbeq	r3, [sp, #29]
   11020:	addeq	r3, sp, #28
   11024:	strbeq	r0, [sp, #28]
   11028:	str	r3, [r9]
   1102c:	mov	r2, #5
   11030:	mov	r1, fp
   11034:	mov	r0, #0
   11038:	ldr	r4, [r9]
   1103c:	bl	10d78 <dcgettext@plt>
   11040:	ldr	r3, [pc, #260]	; 1114c <__assert_fail@plt+0x218>
   11044:	mvn	r2, #9
   11048:	str	r3, [sp, #8]
   1104c:	mov	r3, #0
   11050:	mov	r1, #0
   11054:	strd	r2, [sp]
   11058:	str	r1, [sp, #16]
   1105c:	mov	r2, #1
   11060:	mov	r3, #0
   11064:	str	r0, [sp, #12]
   11068:	mov	r0, r4
   1106c:	bl	14734 <__assert_fail@plt+0x3800>
   11070:	mov	sl, r0
   11074:	b	10fa4 <__assert_fail@plt+0x70>
   11078:	ldr	r1, [pc, #240]	; 11170 <__assert_fail@plt+0x23c>
   1107c:	ldr	r3, [pc, #240]	; 11174 <__assert_fail@plt+0x240>
   11080:	ldr	r2, [pc, #240]	; 11178 <__assert_fail@plt+0x244>
   11084:	str	r4, [sp, #4]
   11088:	ldr	r0, [r1]
   1108c:	ldr	r3, [r3]
   11090:	ldr	r1, [pc, #228]	; 1117c <__assert_fail@plt+0x248>
   11094:	str	r2, [sp]
   11098:	ldr	r2, [pc, #224]	; 11180 <__assert_fail@plt+0x24c>
   1109c:	bl	13f74 <__assert_fail@plt+0x3040>
   110a0:	mov	r0, r4
   110a4:	bl	10e38 <exit@plt>
   110a8:	mov	r3, #1
   110ac:	strb	r3, [r6, #12]
   110b0:	b	10fa4 <__assert_fail@plt+0x70>
   110b4:	mov	r3, #1
   110b8:	strb	r3, [r6]
   110bc:	b	10fa4 <__assert_fail@plt+0x70>
   110c0:	ldr	r3, [pc, #188]	; 11184 <__assert_fail@plt+0x250>
   110c4:	ldr	r8, [r3]
   110c8:	cmp	r7, r8
   110cc:	movne	r4, #1
   110d0:	bne	11118 <__assert_fail@plt+0x1e4>
   110d4:	mov	r1, sl
   110d8:	ldr	r0, [pc, #168]	; 11188 <__assert_fail@plt+0x254>
   110dc:	bl	1130c <__assert_fail@plt+0x3d8>
   110e0:	mov	r4, r0
   110e4:	ldrb	r3, [r6, #1]
   110e8:	cmp	r3, #0
   110ec:	bne	11124 <__assert_fail@plt+0x1f0>
   110f0:	eor	r0, r4, #1
   110f4:	uxtb	r0, r0
   110f8:	add	sp, sp, #36	; 0x24
   110fc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11100:	ldr	r0, [r5, r8, lsl #2]
   11104:	mov	r1, sl
   11108:	bl	1130c <__assert_fail@plt+0x3d8>
   1110c:	add	r8, r8, #1
   11110:	and	r4, r4, r0
   11114:	uxtb	r4, r4
   11118:	cmp	r8, r7
   1111c:	blt	11100 <__assert_fail@plt+0x1cc>
   11120:	b	110e4 <__assert_fail@plt+0x1b0>
   11124:	ldr	r3, [pc, #96]	; 1118c <__assert_fail@plt+0x258>
   11128:	ldr	r0, [r3]
   1112c:	bl	11ad8 <__assert_fail@plt+0xba4>
   11130:	cmn	r0, #1
   11134:	bne	110f0 <__assert_fail@plt+0x1bc>
   11138:	bl	10e5c <__errno_location@plt>
   1113c:	ldr	r2, [pc, #68]	; 11188 <__assert_fail@plt+0x254>
   11140:	ldr	r1, [r0]
   11144:	mov	r0, #1
   11148:	bl	10de4 <error@plt>
   1114c:	andeq	r5, r1, ip, asr #16
   11150:	strdeq	r5, [r1], -r8
   11154:	andeq	r5, r1, r0, asr sl
   11158:	andeq	r7, r2, r0, ror #2
   1115c:	andeq	r5, r1, r0, ror r7
   11160:	andeq	r5, r1, r0, lsl fp
   11164:	andeq	r7, r2, r8, asr r1
   11168:			; <UNDEFINED> instruction: 0x000119b4
   1116c:	ldrdeq	r5, [r1], -r0
   11170:	andeq	r7, r2, r4, asr r1
   11174:	andeq	r7, r2, ip, ror #1
   11178:	andeq	r5, r1, ip, lsr #22
   1117c:	strdeq	r5, [r1], -ip
   11180:	andeq	r5, r1, ip, asr #20
   11184:	andeq	r7, r2, r0, asr #2
   11188:	strdeq	r5, [r1], -r4
   1118c:	andeq	r7, r2, r0, asr r1
   11190:	mov	fp, #0
   11194:	mov	lr, #0
   11198:	pop	{r1}		; (ldr r1, [sp], #4)
   1119c:	mov	r2, sp
   111a0:	push	{r2}		; (str r2, [sp, #-4]!)
   111a4:	push	{r0}		; (str r0, [sp, #-4]!)
   111a8:	ldr	ip, [pc, #16]	; 111c0 <__assert_fail@plt+0x28c>
   111ac:	push	{ip}		; (str ip, [sp, #-4]!)
   111b0:	ldr	r0, [pc, #12]	; 111c4 <__assert_fail@plt+0x290>
   111b4:	ldr	r3, [pc, #12]	; 111c8 <__assert_fail@plt+0x294>
   111b8:	bl	10dfc <__libc_start_main@plt>
   111bc:	bl	10f28 <abort@plt>
   111c0:	andeq	r5, r1, r0, lsl r7
   111c4:	andeq	r0, r1, r0, asr #30
   111c8:			; <UNDEFINED> instruction: 0x000156b0
   111cc:	ldr	r3, [pc, #20]	; 111e8 <__assert_fail@plt+0x2b4>
   111d0:	ldr	r2, [pc, #20]	; 111ec <__assert_fail@plt+0x2b8>
   111d4:	add	r3, pc, r3
   111d8:	ldr	r2, [r3, r2]
   111dc:	cmp	r2, #0
   111e0:	bxeq	lr
   111e4:	b	10e14 <__gmon_start__@plt>
   111e8:	andeq	r5, r1, r4, lsr #28
   111ec:	andeq	r0, r0, r0, ror #1
   111f0:	ldr	r3, [pc, #28]	; 11214 <__assert_fail@plt+0x2e0>
   111f4:	ldr	r0, [pc, #28]	; 11218 <__assert_fail@plt+0x2e4>
   111f8:	sub	r3, r3, r0
   111fc:	cmp	r3, #6
   11200:	bxls	lr
   11204:	ldr	r3, [pc, #16]	; 1121c <__assert_fail@plt+0x2e8>
   11208:	cmp	r3, #0
   1120c:	bxeq	lr
   11210:	bx	r3
   11214:	andeq	r7, r2, r7, lsr r1
   11218:	andeq	r7, r2, r4, lsr r1
   1121c:	andeq	r0, r0, r0
   11220:	ldr	r1, [pc, #36]	; 1124c <__assert_fail@plt+0x318>
   11224:	ldr	r0, [pc, #36]	; 11250 <__assert_fail@plt+0x31c>
   11228:	sub	r1, r1, r0
   1122c:	asr	r1, r1, #2
   11230:	add	r1, r1, r1, lsr #31
   11234:	asrs	r1, r1, #1
   11238:	bxeq	lr
   1123c:	ldr	r3, [pc, #16]	; 11254 <__assert_fail@plt+0x320>
   11240:	cmp	r3, #0
   11244:	bxeq	lr
   11248:	bx	r3
   1124c:	andeq	r7, r2, r4, lsr r1
   11250:	andeq	r7, r2, r4, lsr r1
   11254:	andeq	r0, r0, r0
   11258:	push	{r4, lr}
   1125c:	ldr	r4, [pc, #24]	; 1127c <__assert_fail@plt+0x348>
   11260:	ldrb	r3, [r4]
   11264:	cmp	r3, #0
   11268:	popne	{r4, pc}
   1126c:	bl	111f0 <__assert_fail@plt+0x2bc>
   11270:	mov	r3, #1
   11274:	strb	r3, [r4]
   11278:	pop	{r4, pc}
   1127c:	andeq	r7, r2, ip, asr r1
   11280:	ldr	r0, [pc, #40]	; 112b0 <__assert_fail@plt+0x37c>
   11284:	ldr	r3, [r0]
   11288:	cmp	r3, #0
   1128c:	bne	11294 <__assert_fail@plt+0x360>
   11290:	b	11220 <__assert_fail@plt+0x2ec>
   11294:	ldr	r3, [pc, #24]	; 112b4 <__assert_fail@plt+0x380>
   11298:	cmp	r3, #0
   1129c:	beq	11290 <__assert_fail@plt+0x35c>
   112a0:	push	{r4, lr}
   112a4:	blx	r3
   112a8:	pop	{r4, lr}
   112ac:	b	11220 <__assert_fail@plt+0x2ec>
   112b0:	andeq	r6, r2, r4, lsl pc
   112b4:	andeq	r0, r0, r0
   112b8:	ldr	r3, [pc, #72]	; 11308 <__assert_fail@plt+0x3d4>
   112bc:	ldrb	r3, [r3]
   112c0:	cmp	r3, #0
   112c4:	bne	112e0 <__assert_fail@plt+0x3ac>
   112c8:	cmp	r1, #8
   112cc:	beq	112e8 <__assert_fail@plt+0x3b4>
   112d0:	cmp	r1, #13
   112d4:	beq	11300 <__assert_fail@plt+0x3cc>
   112d8:	cmp	r1, #9
   112dc:	beq	112f4 <__assert_fail@plt+0x3c0>
   112e0:	add	r0, r0, #1
   112e4:	bx	lr
   112e8:	cmp	r0, #0
   112ec:	subne	r0, r0, #1
   112f0:	bx	lr
   112f4:	bic	r0, r0, #7
   112f8:	add	r0, r0, #8
   112fc:	bx	lr
   11300:	mov	r0, r3
   11304:	bx	lr
   11308:	andeq	r7, r2, r0, ror #2
   1130c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11310:	sub	sp, sp, #12
   11314:	mov	fp, r1
   11318:	ldr	r1, [pc, #828]	; 1165c <__assert_fail@plt+0x728>
   1131c:	str	r0, [sp, #4]
   11320:	bl	10ce8 <strcmp@plt>
   11324:	cmp	r0, #0
   11328:	bne	11620 <__assert_fail@plt+0x6ec>
   1132c:	ldr	r1, [pc, #812]	; 11660 <__assert_fail@plt+0x72c>
   11330:	ldr	r3, [pc, #812]	; 11664 <__assert_fail@plt+0x730>
   11334:	mov	r2, #1
   11338:	ldr	r9, [r1]
   1133c:	strb	r2, [r3, #1]
   11340:	cmp	r9, #0
   11344:	beq	11638 <__assert_fail@plt+0x704>
   11348:	mov	r1, #2
   1134c:	mov	r0, r9
   11350:	bl	11aa4 <__assert_fail@plt+0xb70>
   11354:	mov	r5, #0
   11358:	ldr	r8, [pc, #772]	; 11664 <__assert_fail@plt+0x730>
   1135c:	ldr	sl, [pc, #772]	; 11668 <__assert_fail@plt+0x734>
   11360:	mov	r4, r5
   11364:	ldr	r3, [r9, #4]
   11368:	ldr	r2, [r9, #8]
   1136c:	cmp	r3, r2
   11370:	bcs	113e4 <__assert_fail@plt+0x4b0>
   11374:	add	r2, r3, #1
   11378:	str	r2, [r9, #4]
   1137c:	ldrb	r7, [r3]
   11380:	ldr	r3, [r8, #4]
   11384:	add	r2, r5, #1
   11388:	cmp	r2, r3
   1138c:	bcs	11584 <__assert_fail@plt+0x650>
   11390:	cmp	r7, #10
   11394:	ldr	r6, [r8, #8]
   11398:	beq	115a8 <__assert_fail@plt+0x674>
   1139c:	uxtb	r7, r7
   113a0:	mov	r0, r4
   113a4:	mov	r1, r7
   113a8:	bl	112b8 <__assert_fail@plt+0x384>
   113ac:	cmp	r0, fp
   113b0:	bls	11570 <__assert_fail@plt+0x63c>
   113b4:	ldrb	r3, [r8, #12]
   113b8:	cmp	r3, #0
   113bc:	bne	114b0 <__assert_fail@plt+0x57c>
   113c0:	cmp	r5, #0
   113c4:	mov	r4, r0
   113c8:	bne	11464 <__assert_fail@plt+0x530>
   113cc:	strb	r7, [r6]
   113d0:	ldr	r3, [r9, #4]
   113d4:	ldr	r2, [r9, #8]
   113d8:	mov	r5, #1
   113dc:	cmp	r3, r2
   113e0:	bcc	11374 <__assert_fail@plt+0x440>
   113e4:	mov	r0, r9
   113e8:	bl	10ebc <__uflow@plt>
   113ec:	cmn	r0, #1
   113f0:	mov	r7, r0
   113f4:	bne	11380 <__assert_fail@plt+0x44c>
   113f8:	bl	10e5c <__errno_location@plt>
   113fc:	ldr	r4, [r9]
   11400:	ands	r4, r4, #32
   11404:	ldr	r3, [r0]
   11408:	mov	r6, r0
   1140c:	movne	r4, r3
   11410:	cmp	r5, #0
   11414:	beq	11434 <__assert_fail@plt+0x500>
   11418:	ldr	r1, [pc, #580]	; 11664 <__assert_fail@plt+0x730>
   1141c:	ldr	r3, [pc, #580]	; 11668 <__assert_fail@plt+0x734>
   11420:	mov	r2, r5
   11424:	ldr	r0, [r1, #8]
   11428:	ldr	r3, [r3]
   1142c:	mov	r1, #1
   11430:	bl	10d54 <fwrite_unlocked@plt>
   11434:	ldr	r1, [pc, #544]	; 1165c <__assert_fail@plt+0x728>
   11438:	ldr	r0, [sp, #4]
   1143c:	bl	10ce8 <strcmp@plt>
   11440:	cmp	r0, #0
   11444:	mov	r0, r9
   11448:	bne	115c8 <__assert_fail@plt+0x694>
   1144c:	bl	10ef8 <clearerr_unlocked@plt>
   11450:	cmp	r4, #0
   11454:	moveq	r0, #1
   11458:	bne	115dc <__assert_fail@plt+0x6a8>
   1145c:	add	sp, sp, #12
   11460:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11464:	mov	r3, #10
   11468:	strb	r3, [r6, r5]
   1146c:	add	r2, r5, #1
   11470:	ldr	r3, [sl]
   11474:	mov	r0, r6
   11478:	mov	r1, #1
   1147c:	bl	10d54 <fwrite_unlocked@plt>
   11480:	mov	r1, r7
   11484:	mov	r0, #0
   11488:	bl	112b8 <__assert_fail@plt+0x384>
   1148c:	mov	r3, fp
   11490:	ldr	r6, [r8, #8]
   11494:	cmp	fp, r0
   11498:	mov	r4, r0
   1149c:	movcs	r5, #1
   114a0:	movcs	r3, #0
   114a4:	bcc	113cc <__assert_fail@plt+0x498>
   114a8:	strb	r7, [r6, r3]
   114ac:	b	11364 <__assert_fail@plt+0x430>
   114b0:	cmp	r5, #0
   114b4:	beq	1164c <__assert_fail@plt+0x718>
   114b8:	bl	10e2c <__ctype_b_loc@plt>
   114bc:	mov	r4, r5
   114c0:	add	r1, r6, r5
   114c4:	ldr	r0, [r0]
   114c8:	b	114d4 <__assert_fail@plt+0x5a0>
   114cc:	subs	r4, r2, #0
   114d0:	beq	11464 <__assert_fail@plt+0x530>
   114d4:	ldrb	r3, [r1, #-1]!
   114d8:	sub	r2, r4, #1
   114dc:	lsl	r3, r3, #1
   114e0:	ldrh	r3, [r0, r3]
   114e4:	tst	r3, #1
   114e8:	beq	114cc <__assert_fail@plt+0x598>
   114ec:	ldr	r3, [sl]
   114f0:	mov	r2, r4
   114f4:	mov	r0, r6
   114f8:	mov	r1, #1
   114fc:	bl	10d54 <fwrite_unlocked@plt>
   11500:	ldr	r0, [sl]
   11504:	ldr	r2, [r0, #24]
   11508:	ldr	r3, [r0, #20]
   1150c:	cmp	r3, r2
   11510:	addcc	r2, r3, #1
   11514:	strcc	r2, [r0, #20]
   11518:	movcc	r2, #10
   1151c:	strbcc	r2, [r3]
   11520:	bcs	1160c <__assert_fail@plt+0x6d8>
   11524:	ldr	r6, [r8, #8]
   11528:	sub	r5, r5, r4
   1152c:	mov	r2, r5
   11530:	add	r1, r6, r4
   11534:	mov	r0, r6
   11538:	bl	10d0c <memmove@plt>
   1153c:	cmp	r5, #0
   11540:	beq	11618 <__assert_fail@plt+0x6e4>
   11544:	mov	r2, r6
   11548:	add	r4, r6, r5
   1154c:	mov	r0, #0
   11550:	ldrb	r1, [r2], #1
   11554:	bl	112b8 <__assert_fail@plt+0x384>
   11558:	cmp	r4, r2
   1155c:	bne	11550 <__assert_fail@plt+0x61c>
   11560:	mov	r1, r7
   11564:	bl	112b8 <__assert_fail@plt+0x384>
   11568:	cmp	r0, fp
   1156c:	bhi	113b4 <__assert_fail@plt+0x480>
   11570:	mov	r3, r5
   11574:	mov	r4, r0
   11578:	add	r5, r5, #1
   1157c:	strb	r7, [r6, r3]
   11580:	b	11364 <__assert_fail@plt+0x430>
   11584:	ldr	r1, [pc, #224]	; 1166c <__assert_fail@plt+0x738>
   11588:	ldr	r0, [r8, #8]
   1158c:	str	r2, [sp]
   11590:	bl	141f4 <__assert_fail@plt+0x32c0>
   11594:	cmp	r7, #10
   11598:	ldr	r2, [sp]
   1159c:	mov	r6, r0
   115a0:	str	r0, [r8, #8]
   115a4:	bne	1139c <__assert_fail@plt+0x468>
   115a8:	strb	r7, [r6, r5]
   115ac:	mov	r0, r6
   115b0:	ldr	r3, [sl]
   115b4:	mov	r1, #1
   115b8:	mov	r5, #0
   115bc:	bl	10d54 <fwrite_unlocked@plt>
   115c0:	mov	r4, r5
   115c4:	b	11364 <__assert_fail@plt+0x430>
   115c8:	bl	11ad8 <__assert_fail@plt+0xba4>
   115cc:	cmp	r0, #0
   115d0:	beq	11450 <__assert_fail@plt+0x51c>
   115d4:	cmp	r4, #0
   115d8:	beq	11654 <__assert_fail@plt+0x720>
   115dc:	ldr	r2, [sp, #4]
   115e0:	mov	r1, #3
   115e4:	mov	r0, #0
   115e8:	bl	139b4 <__assert_fail@plt+0x2a80>
   115ec:	mov	r1, r4
   115f0:	ldr	r2, [pc, #120]	; 11670 <__assert_fail@plt+0x73c>
   115f4:	mov	r3, r0
   115f8:	mov	r0, #0
   115fc:	bl	10de4 <error@plt>
   11600:	mov	r0, #0
   11604:	add	sp, sp, #12
   11608:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1160c:	mov	r1, #10
   11610:	bl	10ec8 <__overflow@plt>
   11614:	b	11524 <__assert_fail@plt+0x5f0>
   11618:	mov	r0, #0
   1161c:	b	113a4 <__assert_fail@plt+0x470>
   11620:	ldr	r1, [pc, #76]	; 11674 <__assert_fail@plt+0x740>
   11624:	ldr	r0, [sp, #4]
   11628:	bl	10f04 <fopen64@plt>
   1162c:	mov	r9, r0
   11630:	cmp	r9, #0
   11634:	bne	11348 <__assert_fail@plt+0x414>
   11638:	bl	10e5c <__errno_location@plt>
   1163c:	ldr	r2, [sp, #4]
   11640:	mov	r1, #3
   11644:	ldr	r4, [r0]
   11648:	b	115e4 <__assert_fail@plt+0x6b0>
   1164c:	mov	r4, r0
   11650:	b	113cc <__assert_fail@plt+0x498>
   11654:	ldr	r4, [r6]
   11658:	b	11450 <__assert_fail@plt+0x51c>
   1165c:	strdeq	r5, [r1], -r4
   11660:	andeq	r7, r2, r0, asr r1
   11664:	andeq	r7, r2, r0, ror #2
   11668:	andeq	r7, r2, r4, asr r1
   1166c:	andeq	r7, r2, r4, ror #2
   11670:	strdeq	r5, [r1], -r0
   11674:	strdeq	r5, [r1], -r8
   11678:	subs	r6, r0, #0
   1167c:	push	{r7, lr}
   11680:	sub	sp, sp, #56	; 0x38
   11684:	beq	116c0 <__assert_fail@plt+0x78c>
   11688:	ldr	r3, [pc, #684]	; 1193c <__assert_fail@plt+0xa08>
   1168c:	mov	r2, #5
   11690:	ldr	r1, [pc, #680]	; 11940 <__assert_fail@plt+0xa0c>
   11694:	mov	r0, #0
   11698:	ldr	r4, [r3]
   1169c:	bl	10d78 <dcgettext@plt>
   116a0:	ldr	r3, [pc, #668]	; 11944 <__assert_fail@plt+0xa10>
   116a4:	mov	r1, #1
   116a8:	ldr	r3, [r3]
   116ac:	mov	r2, r0
   116b0:	mov	r0, r4
   116b4:	bl	10e98 <__fprintf_chk@plt>
   116b8:	mov	r0, r6
   116bc:	bl	10e38 <exit@plt>
   116c0:	mov	r2, #5
   116c4:	ldr	r1, [pc, #636]	; 11948 <__assert_fail@plt+0xa14>
   116c8:	bl	10d78 <dcgettext@plt>
   116cc:	ldr	r3, [pc, #624]	; 11944 <__assert_fail@plt+0xa10>
   116d0:	ldr	r7, [pc, #628]	; 1194c <__assert_fail@plt+0xa18>
   116d4:	ldr	r4, [pc, #628]	; 11950 <__assert_fail@plt+0xa1c>
   116d8:	ldr	r2, [r3]
   116dc:	mov	r1, r0
   116e0:	mov	r0, #1
   116e4:	bl	10e80 <__printf_chk@plt>
   116e8:	mov	r2, #5
   116ec:	ldr	r1, [pc, #608]	; 11954 <__assert_fail@plt+0xa20>
   116f0:	mov	r0, r6
   116f4:	bl	10d78 <dcgettext@plt>
   116f8:	ldr	r1, [r7]
   116fc:	bl	10cd0 <fputs_unlocked@plt>
   11700:	mov	r2, #5
   11704:	ldr	r1, [pc, #588]	; 11958 <__assert_fail@plt+0xa24>
   11708:	mov	r0, r6
   1170c:	bl	10d78 <dcgettext@plt>
   11710:	ldr	r1, [r7]
   11714:	bl	10cd0 <fputs_unlocked@plt>
   11718:	mov	r2, #5
   1171c:	ldr	r1, [pc, #568]	; 1195c <__assert_fail@plt+0xa28>
   11720:	mov	r0, r6
   11724:	bl	10d78 <dcgettext@plt>
   11728:	ldr	r1, [r7]
   1172c:	bl	10cd0 <fputs_unlocked@plt>
   11730:	mov	r2, #5
   11734:	ldr	r1, [pc, #548]	; 11960 <__assert_fail@plt+0xa2c>
   11738:	mov	r0, r6
   1173c:	bl	10d78 <dcgettext@plt>
   11740:	ldr	r1, [r7]
   11744:	bl	10cd0 <fputs_unlocked@plt>
   11748:	mov	r2, #5
   1174c:	ldr	r1, [pc, #528]	; 11964 <__assert_fail@plt+0xa30>
   11750:	mov	r0, r6
   11754:	bl	10d78 <dcgettext@plt>
   11758:	ldr	r1, [r7]
   1175c:	bl	10cd0 <fputs_unlocked@plt>
   11760:	mov	r2, #5
   11764:	ldr	r1, [pc, #508]	; 11968 <__assert_fail@plt+0xa34>
   11768:	mov	r0, r6
   1176c:	bl	10d78 <dcgettext@plt>
   11770:	ldr	r1, [r7]
   11774:	bl	10cd0 <fputs_unlocked@plt>
   11778:	ldm	r4!, {r0, r1, r2, r3}
   1177c:	mov	lr, sp
   11780:	stmia	lr!, {r0, r1, r2, r3}
   11784:	ldm	r4!, {r0, r1, r2, r3}
   11788:	ldr	ip, [sp]
   1178c:	stmia	lr!, {r0, r1, r2, r3}
   11790:	cmp	ip, #0
   11794:	ldm	r4!, {r0, r1, r2, r3}
   11798:	stmia	lr!, {r0, r1, r2, r3}
   1179c:	ldm	r4, {r0, r1}
   117a0:	moveq	r4, sp
   117a4:	stm	lr, {r0, r1}
   117a8:	beq	117d8 <__assert_fail@plt+0x8a4>
   117ac:	ldr	r5, [pc, #440]	; 1196c <__assert_fail@plt+0xa38>
   117b0:	mov	r4, sp
   117b4:	b	117c4 <__assert_fail@plt+0x890>
   117b8:	ldr	ip, [r4, #8]!
   117bc:	cmp	ip, #0
   117c0:	beq	117d8 <__assert_fail@plt+0x8a4>
   117c4:	mov	r1, ip
   117c8:	mov	r0, r5
   117cc:	bl	10ce8 <strcmp@plt>
   117d0:	cmp	r0, #0
   117d4:	bne	117b8 <__assert_fail@plt+0x884>
   117d8:	ldr	r4, [r4, #4]
   117dc:	mov	r2, #5
   117e0:	cmp	r4, #0
   117e4:	ldr	r1, [pc, #388]	; 11970 <__assert_fail@plt+0xa3c>
   117e8:	beq	11890 <__assert_fail@plt+0x95c>
   117ec:	mov	r0, #0
   117f0:	bl	10d78 <dcgettext@plt>
   117f4:	ldr	r3, [pc, #376]	; 11974 <__assert_fail@plt+0xa40>
   117f8:	ldr	r2, [pc, #376]	; 11978 <__assert_fail@plt+0xa44>
   117fc:	mov	r1, r0
   11800:	mov	r0, #1
   11804:	bl	10e80 <__printf_chk@plt>
   11808:	mov	r1, #0
   1180c:	mov	r0, #5
   11810:	bl	10ed4 <setlocale@plt>
   11814:	cmp	r0, #0
   11818:	ldreq	r5, [pc, #332]	; 1196c <__assert_fail@plt+0xa38>
   1181c:	beq	11838 <__assert_fail@plt+0x904>
   11820:	mov	r2, #3
   11824:	ldr	r1, [pc, #336]	; 1197c <__assert_fail@plt+0xa48>
   11828:	bl	10f1c <strncmp@plt>
   1182c:	ldr	r5, [pc, #312]	; 1196c <__assert_fail@plt+0xa38>
   11830:	cmp	r0, #0
   11834:	bne	11920 <__assert_fail@plt+0x9ec>
   11838:	mov	r2, #5
   1183c:	ldr	r1, [pc, #316]	; 11980 <__assert_fail@plt+0xa4c>
   11840:	mov	r0, #0
   11844:	bl	10d78 <dcgettext@plt>
   11848:	ldr	r3, [pc, #284]	; 1196c <__assert_fail@plt+0xa38>
   1184c:	ldr	r2, [pc, #288]	; 11974 <__assert_fail@plt+0xa40>
   11850:	mov	r1, r0
   11854:	mov	r0, #1
   11858:	bl	10e80 <__printf_chk@plt>
   1185c:	mov	r2, #5
   11860:	ldr	r1, [pc, #284]	; 11984 <__assert_fail@plt+0xa50>
   11864:	mov	r0, #0
   11868:	bl	10d78 <dcgettext@plt>
   1186c:	ldr	r2, [pc, #276]	; 11988 <__assert_fail@plt+0xa54>
   11870:	cmp	r4, r5
   11874:	ldr	r3, [pc, #272]	; 1198c <__assert_fail@plt+0xa58>
   11878:	movne	r3, r2
   1187c:	mov	r1, r0
   11880:	mov	r2, r4
   11884:	mov	r0, #1
   11888:	bl	10e80 <__printf_chk@plt>
   1188c:	b	116b8 <__assert_fail@plt+0x784>
   11890:	mov	r0, r4
   11894:	bl	10d78 <dcgettext@plt>
   11898:	ldr	r3, [pc, #212]	; 11974 <__assert_fail@plt+0xa40>
   1189c:	ldr	r2, [pc, #212]	; 11978 <__assert_fail@plt+0xa44>
   118a0:	mov	r1, r0
   118a4:	mov	r0, #1
   118a8:	bl	10e80 <__printf_chk@plt>
   118ac:	mov	r1, r4
   118b0:	mov	r0, #5
   118b4:	bl	10ed4 <setlocale@plt>
   118b8:	cmp	r0, #0
   118bc:	beq	118d4 <__assert_fail@plt+0x9a0>
   118c0:	mov	r2, #3
   118c4:	ldr	r1, [pc, #176]	; 1197c <__assert_fail@plt+0xa48>
   118c8:	bl	10f1c <strncmp@plt>
   118cc:	cmp	r0, #0
   118d0:	bne	11918 <__assert_fail@plt+0x9e4>
   118d4:	mov	r2, #5
   118d8:	ldr	r1, [pc, #160]	; 11980 <__assert_fail@plt+0xa4c>
   118dc:	mov	r0, #0
   118e0:	bl	10d78 <dcgettext@plt>
   118e4:	ldr	r3, [pc, #128]	; 1196c <__assert_fail@plt+0xa38>
   118e8:	ldr	r2, [pc, #132]	; 11974 <__assert_fail@plt+0xa40>
   118ec:	mov	r4, r3
   118f0:	mov	r1, r0
   118f4:	mov	r0, #1
   118f8:	bl	10e80 <__printf_chk@plt>
   118fc:	ldr	r1, [pc, #128]	; 11984 <__assert_fail@plt+0xa50>
   11900:	mov	r2, #5
   11904:	mov	r0, #0
   11908:	bl	10d78 <dcgettext@plt>
   1190c:	ldr	r3, [pc, #120]	; 1198c <__assert_fail@plt+0xa58>
   11910:	mov	r1, r0
   11914:	b	11880 <__assert_fail@plt+0x94c>
   11918:	ldr	r5, [pc, #76]	; 1196c <__assert_fail@plt+0xa38>
   1191c:	mov	r4, r5
   11920:	mov	r2, #5
   11924:	ldr	r1, [pc, #100]	; 11990 <__assert_fail@plt+0xa5c>
   11928:	mov	r0, #0
   1192c:	bl	10d78 <dcgettext@plt>
   11930:	ldr	r1, [r7]
   11934:	bl	10cd0 <fputs_unlocked@plt>
   11938:	b	11838 <__assert_fail@plt+0x904>
   1193c:	andeq	r7, r2, r8, asr #2
   11940:	andeq	r5, r1, r4, lsl #16
   11944:	andeq	r7, r2, r8, ror r1
   11948:	andeq	r5, r1, ip, lsr #16
   1194c:	andeq	r7, r2, r4, asr r1
   11950:	andeq	r5, r1, r8, lsr r7
   11954:	andeq	r5, r1, r0, asr r8
   11958:	andeq	r5, r1, ip, lsl #17
   1195c:	andeq	r5, r1, r4, asr #17
   11960:	andeq	r5, r1, r0, lsl r9
   11964:	andeq	r5, r1, r4, lsr #19
   11968:	ldrdeq	r5, [r1], -r4
   1196c:	strdeq	r5, [r1], -ip
   11970:	andeq	r5, r1, ip, lsl #20
   11974:	andeq	r5, r1, r4, lsr #20
   11978:	andeq	r5, r1, ip, asr #20
   1197c:	andeq	r5, r1, ip, asr sl
   11980:	andeq	r5, r1, r8, lsr #21
   11984:	andeq	r5, r1, r4, asr #21
   11988:	andeq	r5, r1, ip, asr #16
   1198c:	andeq	r5, r1, r4, asr #22
   11990:	andeq	r5, r1, r0, ror #20
   11994:	ldr	r3, [pc, #4]	; 119a0 <__assert_fail@plt+0xa6c>
   11998:	str	r0, [r3]
   1199c:	bx	lr
   119a0:	andeq	r7, r2, r0, ror r1
   119a4:	ldr	r3, [pc, #4]	; 119b0 <__assert_fail@plt+0xa7c>
   119a8:	strb	r0, [r3, #4]
   119ac:	bx	lr
   119b0:	andeq	r7, r2, r0, ror r1
   119b4:	ldr	r3, [pc, #192]	; 11a7c <__assert_fail@plt+0xb48>
   119b8:	push	{r4, r5, r6, lr}
   119bc:	sub	sp, sp, #8
   119c0:	ldr	r0, [r3]
   119c4:	bl	14e54 <__assert_fail@plt+0x3f20>
   119c8:	cmp	r0, #0
   119cc:	beq	119f0 <__assert_fail@plt+0xabc>
   119d0:	ldr	r4, [pc, #168]	; 11a80 <__assert_fail@plt+0xb4c>
   119d4:	ldrb	r3, [r4, #4]
   119d8:	cmp	r3, #0
   119dc:	beq	11a0c <__assert_fail@plt+0xad8>
   119e0:	bl	10e5c <__errno_location@plt>
   119e4:	ldr	r3, [r0]
   119e8:	cmp	r3, #32
   119ec:	bne	11a0c <__assert_fail@plt+0xad8>
   119f0:	ldr	r3, [pc, #140]	; 11a84 <__assert_fail@plt+0xb50>
   119f4:	ldr	r0, [r3]
   119f8:	bl	14e54 <__assert_fail@plt+0x3f20>
   119fc:	cmp	r0, #0
   11a00:	bne	11a54 <__assert_fail@plt+0xb20>
   11a04:	add	sp, sp, #8
   11a08:	pop	{r4, r5, r6, pc}
   11a0c:	mov	r2, #5
   11a10:	ldr	r1, [pc, #112]	; 11a88 <__assert_fail@plt+0xb54>
   11a14:	mov	r0, #0
   11a18:	bl	10d78 <dcgettext@plt>
   11a1c:	ldr	r4, [r4]
   11a20:	cmp	r4, #0
   11a24:	mov	r5, r0
   11a28:	beq	11a60 <__assert_fail@plt+0xb2c>
   11a2c:	bl	10e5c <__errno_location@plt>
   11a30:	ldr	r6, [r0]
   11a34:	mov	r0, r4
   11a38:	bl	139a0 <__assert_fail@plt+0x2a6c>
   11a3c:	mov	r1, r6
   11a40:	str	r5, [sp]
   11a44:	ldr	r2, [pc, #64]	; 11a8c <__assert_fail@plt+0xb58>
   11a48:	mov	r3, r0
   11a4c:	mov	r0, #0
   11a50:	bl	10de4 <error@plt>
   11a54:	ldr	r3, [pc, #52]	; 11a90 <__assert_fail@plt+0xb5c>
   11a58:	ldr	r0, [r3]
   11a5c:	bl	10d24 <_exit@plt>
   11a60:	bl	10e5c <__errno_location@plt>
   11a64:	mov	r3, r5
   11a68:	ldr	r2, [pc, #36]	; 11a94 <__assert_fail@plt+0xb60>
   11a6c:	ldr	r1, [r0]
   11a70:	mov	r0, r4
   11a74:	bl	10de4 <error@plt>
   11a78:	b	11a54 <__assert_fail@plt+0xb20>
   11a7c:	andeq	r7, r2, r4, asr r1
   11a80:	andeq	r7, r2, r0, ror r1
   11a84:	andeq	r7, r2, r8, asr #2
   11a88:	andeq	r5, r1, r0, ror #23
   11a8c:	andeq	r5, r1, ip, ror #23
   11a90:	strdeq	r7, [r2], -r0
   11a94:	strdeq	r5, [r1], -r0
   11a98:	push	{r4, r5}
   11a9c:	pop	{r4, r5}
   11aa0:	b	10cf4 <posix_fadvise64@plt>
   11aa4:	cmp	r0, #0
   11aa8:	bxeq	lr
   11aac:	push	{r4, lr}
   11ab0:	sub	sp, sp, #16
   11ab4:	mov	r4, r1
   11ab8:	bl	10e8c <fileno@plt>
   11abc:	mov	r2, #0
   11ac0:	mov	r3, #0
   11ac4:	str	r4, [sp, #8]
   11ac8:	strd	r2, [sp]
   11acc:	bl	10cf4 <posix_fadvise64@plt>
   11ad0:	add	sp, sp, #16
   11ad4:	pop	{r4, pc}
   11ad8:	push	{r4, r5, lr}
   11adc:	sub	sp, sp, #12
   11ae0:	mov	r4, r0
   11ae4:	bl	10e8c <fileno@plt>
   11ae8:	cmp	r0, #0
   11aec:	mov	r0, r4
   11af0:	blt	11b6c <__assert_fail@plt+0xc38>
   11af4:	bl	10e08 <__freading@plt>
   11af8:	cmp	r0, #0
   11afc:	bne	11b38 <__assert_fail@plt+0xc04>
   11b00:	mov	r0, r4
   11b04:	bl	11b78 <__assert_fail@plt+0xc44>
   11b08:	cmp	r0, #0
   11b0c:	beq	11b68 <__assert_fail@plt+0xc34>
   11b10:	bl	10e5c <__errno_location@plt>
   11b14:	mov	r5, r0
   11b18:	mov	r0, r4
   11b1c:	ldr	r4, [r5]
   11b20:	bl	10ea4 <fclose@plt>
   11b24:	cmp	r4, #0
   11b28:	mvnne	r0, #0
   11b2c:	strne	r4, [r5]
   11b30:	add	sp, sp, #12
   11b34:	pop	{r4, r5, pc}
   11b38:	mov	r0, r4
   11b3c:	bl	10e8c <fileno@plt>
   11b40:	mov	r3, #1
   11b44:	str	r3, [sp]
   11b48:	mov	r2, #0
   11b4c:	mov	r3, #0
   11b50:	bl	10db4 <lseek64@plt>
   11b54:	mvn	r3, #0
   11b58:	mvn	r2, #0
   11b5c:	cmp	r1, r3
   11b60:	cmpeq	r0, r2
   11b64:	bne	11b00 <__assert_fail@plt+0xbcc>
   11b68:	mov	r0, r4
   11b6c:	add	sp, sp, #12
   11b70:	pop	{r4, r5, lr}
   11b74:	b	10ea4 <fclose@plt>
   11b78:	push	{r4, lr}
   11b7c:	subs	r4, r0, #0
   11b80:	sub	sp, sp, #8
   11b84:	beq	11ba0 <__assert_fail@plt+0xc6c>
   11b88:	bl	10e08 <__freading@plt>
   11b8c:	cmp	r0, #0
   11b90:	beq	11ba0 <__assert_fail@plt+0xc6c>
   11b94:	ldr	r3, [r4]
   11b98:	tst	r3, #256	; 0x100
   11b9c:	bne	11bb0 <__assert_fail@plt+0xc7c>
   11ba0:	mov	r0, r4
   11ba4:	add	sp, sp, #8
   11ba8:	pop	{r4, lr}
   11bac:	b	10d00 <fflush@plt>
   11bb0:	mov	r3, #1
   11bb4:	str	r3, [sp]
   11bb8:	mov	r2, #0
   11bbc:	mov	r3, #0
   11bc0:	mov	r0, r4
   11bc4:	bl	11bd8 <__assert_fail@plt+0xca4>
   11bc8:	mov	r0, r4
   11bcc:	add	sp, sp, #8
   11bd0:	pop	{r4, lr}
   11bd4:	b	10d00 <fflush@plt>
   11bd8:	push	{r4, r5, r6, r7, r8, lr}
   11bdc:	sub	sp, sp, #8
   11be0:	ldmib	r0, {ip, lr}
   11be4:	mov	r4, r0
   11be8:	ldr	r5, [sp, #32]
   11bec:	cmp	lr, ip
   11bf0:	beq	11c08 <__assert_fail@plt+0xcd4>
   11bf4:	str	r5, [sp, #32]
   11bf8:	mov	r0, r4
   11bfc:	add	sp, sp, #8
   11c00:	pop	{r4, r5, r6, r7, r8, lr}
   11c04:	b	10eb0 <fseeko64@plt>
   11c08:	ldr	lr, [r0, #20]
   11c0c:	ldr	ip, [r0, #16]
   11c10:	cmp	lr, ip
   11c14:	bne	11bf4 <__assert_fail@plt+0xcc0>
   11c18:	ldr	r8, [r0, #36]	; 0x24
   11c1c:	cmp	r8, #0
   11c20:	bne	11bf4 <__assert_fail@plt+0xcc0>
   11c24:	mov	r6, r2
   11c28:	mov	r7, r3
   11c2c:	bl	10e8c <fileno@plt>
   11c30:	mov	r2, r6
   11c34:	mov	r3, r7
   11c38:	str	r5, [sp]
   11c3c:	bl	10db4 <lseek64@plt>
   11c40:	mvn	r3, #0
   11c44:	mvn	r2, #0
   11c48:	cmp	r1, r3
   11c4c:	cmpeq	r0, r2
   11c50:	beq	11c70 <__assert_fail@plt+0xd3c>
   11c54:	ldr	r3, [r4]
   11c58:	strd	r0, [r4, #80]	; 0x50
   11c5c:	mov	r0, r8
   11c60:	bic	r3, r3, #16
   11c64:	str	r3, [r4]
   11c68:	add	sp, sp, #8
   11c6c:	pop	{r4, r5, r6, r7, r8, pc}
   11c70:	mvn	r0, #0
   11c74:	b	11c68 <__assert_fail@plt+0xd34>
   11c78:	push	{r4, r5, r6, lr}
   11c7c:	subs	r4, r0, #0
   11c80:	beq	11cf4 <__assert_fail@plt+0xdc0>
   11c84:	mov	r1, #47	; 0x2f
   11c88:	bl	10ee0 <strrchr@plt>
   11c8c:	subs	r5, r0, #0
   11c90:	beq	11ce0 <__assert_fail@plt+0xdac>
   11c94:	add	r6, r5, #1
   11c98:	sub	r3, r6, r4
   11c9c:	cmp	r3, #6
   11ca0:	ble	11ce0 <__assert_fail@plt+0xdac>
   11ca4:	mov	r2, #7
   11ca8:	ldr	r1, [pc, #96]	; 11d10 <__assert_fail@plt+0xddc>
   11cac:	sub	r0, r5, #6
   11cb0:	bl	10f1c <strncmp@plt>
   11cb4:	cmp	r0, #0
   11cb8:	bne	11ce0 <__assert_fail@plt+0xdac>
   11cbc:	mov	r2, #3
   11cc0:	ldr	r1, [pc, #76]	; 11d14 <__assert_fail@plt+0xde0>
   11cc4:	mov	r0, r6
   11cc8:	bl	10f1c <strncmp@plt>
   11ccc:	cmp	r0, #0
   11cd0:	movne	r4, r6
   11cd4:	ldreq	r3, [pc, #60]	; 11d18 <__assert_fail@plt+0xde4>
   11cd8:	addeq	r4, r5, #4
   11cdc:	streq	r4, [r3]
   11ce0:	ldr	r2, [pc, #52]	; 11d1c <__assert_fail@plt+0xde8>
   11ce4:	ldr	r3, [pc, #52]	; 11d20 <__assert_fail@plt+0xdec>
   11ce8:	str	r4, [r2]
   11cec:	str	r4, [r3]
   11cf0:	pop	{r4, r5, r6, pc}
   11cf4:	ldr	r3, [pc, #40]	; 11d24 <__assert_fail@plt+0xdf0>
   11cf8:	mov	r2, #55	; 0x37
   11cfc:	mov	r1, #1
   11d00:	ldr	r3, [r3]
   11d04:	ldr	r0, [pc, #28]	; 11d28 <__assert_fail@plt+0xdf4>
   11d08:	bl	10da8 <fwrite@plt>
   11d0c:	bl	10f28 <abort@plt>
   11d10:	andeq	r5, r1, ip, lsr #24
   11d14:	andeq	r5, r1, r4, lsr ip
   11d18:	andeq	r7, r2, r8, lsr r1
   11d1c:	andeq	r7, r2, r8, ror r1
   11d20:	andeq	r7, r2, ip, lsr r1
   11d24:	andeq	r7, r2, r8, asr #2
   11d28:	strdeq	r5, [r1], -r4
   11d2c:	push	{r4, r5, r6, lr}
   11d30:	mov	r2, #48	; 0x30
   11d34:	mov	r4, r1
   11d38:	mov	r1, #0
   11d3c:	mov	r5, r0
   11d40:	bl	10e74 <memset@plt>
   11d44:	cmp	r4, #10
   11d48:	beq	11d58 <__assert_fail@plt+0xe24>
   11d4c:	str	r4, [r5]
   11d50:	mov	r0, r5
   11d54:	pop	{r4, r5, r6, pc}
   11d58:	bl	10f28 <abort@plt>
   11d5c:	push	{r4, r5, r6, lr}
   11d60:	mov	r4, r0
   11d64:	mov	r5, r1
   11d68:	bl	14f28 <__assert_fail@plt+0x3ff4>
   11d6c:	ldrb	r3, [r0]
   11d70:	bic	r3, r3, #32
   11d74:	cmp	r3, #85	; 0x55
   11d78:	bne	11dd8 <__assert_fail@plt+0xea4>
   11d7c:	ldrb	r3, [r0, #1]
   11d80:	bic	r3, r3, #32
   11d84:	cmp	r3, #84	; 0x54
   11d88:	bne	11e14 <__assert_fail@plt+0xee0>
   11d8c:	ldrb	r3, [r0, #2]
   11d90:	bic	r3, r3, #32
   11d94:	cmp	r3, #70	; 0x46
   11d98:	bne	11e14 <__assert_fail@plt+0xee0>
   11d9c:	ldrb	r3, [r0, #3]
   11da0:	cmp	r3, #45	; 0x2d
   11da4:	bne	11e14 <__assert_fail@plt+0xee0>
   11da8:	ldrb	r3, [r0, #4]
   11dac:	cmp	r3, #56	; 0x38
   11db0:	bne	11e14 <__assert_fail@plt+0xee0>
   11db4:	ldrb	r3, [r0, #5]
   11db8:	cmp	r3, #0
   11dbc:	bne	11e14 <__assert_fail@plt+0xee0>
   11dc0:	ldrb	r2, [r4]
   11dc4:	ldr	r3, [pc, #152]	; 11e64 <__assert_fail@plt+0xf30>
   11dc8:	ldr	r0, [pc, #152]	; 11e68 <__assert_fail@plt+0xf34>
   11dcc:	cmp	r2, #96	; 0x60
   11dd0:	movne	r0, r3
   11dd4:	pop	{r4, r5, r6, pc}
   11dd8:	cmp	r3, #71	; 0x47
   11ddc:	bne	11e14 <__assert_fail@plt+0xee0>
   11de0:	ldrb	r3, [r0, #1]
   11de4:	bic	r3, r3, #32
   11de8:	cmp	r3, #66	; 0x42
   11dec:	bne	11e14 <__assert_fail@plt+0xee0>
   11df0:	ldrb	r3, [r0, #2]
   11df4:	cmp	r3, #49	; 0x31
   11df8:	bne	11e14 <__assert_fail@plt+0xee0>
   11dfc:	ldrb	r3, [r0, #3]
   11e00:	cmp	r3, #56	; 0x38
   11e04:	bne	11e14 <__assert_fail@plt+0xee0>
   11e08:	ldrb	r3, [r0, #4]
   11e0c:	cmp	r3, #48	; 0x30
   11e10:	beq	11e28 <__assert_fail@plt+0xef4>
   11e14:	ldr	r3, [pc, #80]	; 11e6c <__assert_fail@plt+0xf38>
   11e18:	cmp	r5, #9
   11e1c:	ldr	r0, [pc, #76]	; 11e70 <__assert_fail@plt+0xf3c>
   11e20:	movne	r0, r3
   11e24:	pop	{r4, r5, r6, pc}
   11e28:	ldrb	r3, [r0, #5]
   11e2c:	cmp	r3, #51	; 0x33
   11e30:	bne	11e14 <__assert_fail@plt+0xee0>
   11e34:	ldrb	r3, [r0, #6]
   11e38:	cmp	r3, #48	; 0x30
   11e3c:	bne	11e14 <__assert_fail@plt+0xee0>
   11e40:	ldrb	r3, [r0, #7]
   11e44:	cmp	r3, #0
   11e48:	bne	11e14 <__assert_fail@plt+0xee0>
   11e4c:	ldrb	r2, [r4]
   11e50:	ldr	r3, [pc, #28]	; 11e74 <__assert_fail@plt+0xf40>
   11e54:	ldr	r0, [pc, #28]	; 11e78 <__assert_fail@plt+0xf44>
   11e58:	cmp	r2, #96	; 0x60
   11e5c:	movne	r0, r3
   11e60:	pop	{r4, r5, r6, pc}
   11e64:	muleq	r1, r0, ip
   11e68:	andeq	r5, r1, ip, lsl #25
   11e6c:	andeq	r5, r1, r0, lsr #25
   11e70:	muleq	r1, ip, ip
   11e74:	muleq	r1, r8, ip
   11e78:	muleq	r1, r4, ip
   11e7c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11e80:	sub	sp, sp, #116	; 0x74
   11e84:	mov	sl, r0
   11e88:	str	r3, [sp, #24]
   11e8c:	mov	r3, #1
   11e90:	mov	r8, r1
   11e94:	str	r2, [sp, #56]	; 0x38
   11e98:	str	r3, [sp, #36]	; 0x24
   11e9c:	bl	10dc0 <__ctype_get_mb_cur_max@plt>
   11ea0:	ldr	r3, [sp, #156]	; 0x9c
   11ea4:	mov	fp, r8
   11ea8:	mov	r2, #0
   11eac:	lsr	r3, r3, #1
   11eb0:	and	r3, r3, #1
   11eb4:	str	r2, [sp, #68]	; 0x44
   11eb8:	str	r3, [sp, #28]
   11ebc:	str	r2, [sp, #40]	; 0x28
   11ec0:	str	r2, [sp, #44]	; 0x2c
   11ec4:	str	r2, [sp, #52]	; 0x34
   11ec8:	str	r2, [sp, #64]	; 0x40
   11ecc:	str	r2, [sp, #72]	; 0x48
   11ed0:	str	sl, [sp, #32]
   11ed4:	str	r0, [sp, #76]	; 0x4c
   11ed8:	ldr	r3, [sp, #152]	; 0x98
   11edc:	cmp	r3, #10
   11ee0:	ldrls	pc, [pc, r3, lsl #2]
   11ee4:	b	130a4 <__assert_fail@plt+0x2170>
   11ee8:	andeq	r1, r1, r4, lsl pc
   11eec:	strdeq	r2, [r1], -ip
   11ef0:	andeq	r2, r1, r0, lsr #4
   11ef4:	andeq	r2, r1, r4, asr #4
   11ef8:	andeq	r2, r1, r0, ror r3
   11efc:	andeq	r2, r1, r4, asr #6
   11f00:	andeq	r2, r1, ip, lsl r3
   11f04:	andeq	r2, r1, r8, asr r2
   11f08:	andeq	r2, r1, r0, ror r2
   11f0c:	andeq	r2, r1, r0, ror r2
   11f10:	andeq	r2, r1, r0, ror r2
   11f14:	mov	r3, #0
   11f18:	mov	r7, r3
   11f1c:	str	r3, [sp, #28]
   11f20:	ldr	r3, [sp, #44]	; 0x2c
   11f24:	mov	sl, #0
   11f28:	eor	r3, r3, #1
   11f2c:	str	r3, [sp, #60]	; 0x3c
   11f30:	ldr	r3, [sp, #24]
   11f34:	cmn	r3, #1
   11f38:	beq	1249c <__assert_fail@plt+0x1568>
   11f3c:	ldr	r3, [sp, #24]
   11f40:	subs	r5, r3, sl
   11f44:	movne	r5, #1
   11f48:	cmp	r5, #0
   11f4c:	beq	124b4 <__assert_fail@plt+0x1580>
   11f50:	ldr	r3, [sp, #152]	; 0x98
   11f54:	ldr	r8, [sp, #44]	; 0x2c
   11f58:	cmp	r3, #2
   11f5c:	moveq	r8, #0
   11f60:	andne	r8, r8, #1
   11f64:	ldr	r3, [sp, #52]	; 0x34
   11f68:	adds	r9, r3, #0
   11f6c:	movne	r9, #1
   11f70:	ands	r6, r9, r8
   11f74:	beq	1291c <__assert_fail@plt+0x19e8>
   11f78:	ldr	r2, [sp, #52]	; 0x34
   11f7c:	ldr	r1, [sp, #24]
   11f80:	cmp	r2, #1
   11f84:	mov	r3, r2
   11f88:	movls	r3, #0
   11f8c:	movhi	r3, #1
   11f90:	cmn	r1, #1
   11f94:	movne	r3, #0
   11f98:	cmp	r3, #0
   11f9c:	add	r4, sl, r2
   11fa0:	beq	11fb0 <__assert_fail@plt+0x107c>
   11fa4:	ldr	r0, [sp, #56]	; 0x38
   11fa8:	bl	10e44 <strlen@plt>
   11fac:	str	r0, [sp, #24]
   11fb0:	ldr	r3, [sp, #24]
   11fb4:	cmp	r3, r4
   11fb8:	ldr	r3, [sp, #56]	; 0x38
   11fbc:	add	r3, r3, sl
   11fc0:	str	r3, [sp, #48]	; 0x30
   11fc4:	bcc	12928 <__assert_fail@plt+0x19f4>
   11fc8:	mov	r0, r3
   11fcc:	ldr	r2, [sp, #52]	; 0x34
   11fd0:	ldr	r1, [sp, #64]	; 0x40
   11fd4:	bl	10d60 <memcmp@plt>
   11fd8:	cmp	r0, #0
   11fdc:	bne	12928 <__assert_fail@plt+0x19f4>
   11fe0:	ldr	r3, [sp, #28]
   11fe4:	cmp	r3, #0
   11fe8:	bne	131a4 <__assert_fail@plt+0x2270>
   11fec:	ldr	r3, [sp, #48]	; 0x30
   11ff0:	ldrb	r4, [r3]
   11ff4:	cmp	r4, #126	; 0x7e
   11ff8:	ldrls	pc, [pc, r4, lsl #2]
   11ffc:	b	128bc <__assert_fail@plt+0x1988>
   12000:	andeq	r2, r1, r0, ror #13
   12004:			; <UNDEFINED> instruction: 0x000128bc
   12008:			; <UNDEFINED> instruction: 0x000128bc
   1200c:			; <UNDEFINED> instruction: 0x000128bc
   12010:			; <UNDEFINED> instruction: 0x000128bc
   12014:			; <UNDEFINED> instruction: 0x000128bc
   12018:			; <UNDEFINED> instruction: 0x000128bc
   1201c:	andeq	r2, r1, r4, asr #13
   12020:	andeq	r2, r1, r8, lsr #13
   12024:	andeq	r2, r1, r4, lsr #17
   12028:	andeq	r2, r1, r8, lsl #12
   1202c:	andeq	r2, r1, ip, ror #11
   12030:	andeq	r2, r1, r0, lsl #17
   12034:	andeq	r2, r1, ip, asr r8
   12038:			; <UNDEFINED> instruction: 0x000128bc
   1203c:			; <UNDEFINED> instruction: 0x000128bc
   12040:			; <UNDEFINED> instruction: 0x000128bc
   12044:			; <UNDEFINED> instruction: 0x000128bc
   12048:			; <UNDEFINED> instruction: 0x000128bc
   1204c:			; <UNDEFINED> instruction: 0x000128bc
   12050:			; <UNDEFINED> instruction: 0x000128bc
   12054:			; <UNDEFINED> instruction: 0x000128bc
   12058:			; <UNDEFINED> instruction: 0x000128bc
   1205c:			; <UNDEFINED> instruction: 0x000128bc
   12060:			; <UNDEFINED> instruction: 0x000128bc
   12064:			; <UNDEFINED> instruction: 0x000128bc
   12068:			; <UNDEFINED> instruction: 0x000128bc
   1206c:			; <UNDEFINED> instruction: 0x000128bc
   12070:			; <UNDEFINED> instruction: 0x000128bc
   12074:			; <UNDEFINED> instruction: 0x000128bc
   12078:			; <UNDEFINED> instruction: 0x000128bc
   1207c:			; <UNDEFINED> instruction: 0x000128bc
   12080:	muleq	r1, ip, r8
   12084:	ldrdeq	r2, [r1], -r0
   12088:	ldrdeq	r2, [r1], -r0
   1208c:	andeq	r2, r1, r0, ror #7
   12090:	ldrdeq	r2, [r1], -r0
   12094:	andeq	r2, r1, r8, ror #16
   12098:	ldrdeq	r2, [r1], -r0
   1209c:	andeq	r2, r1, ip, lsr r8
   120a0:	ldrdeq	r2, [r1], -r0
   120a4:	ldrdeq	r2, [r1], -r0
   120a8:	ldrdeq	r2, [r1], -r0
   120ac:	andeq	r2, r1, r8, ror #16
   120b0:	andeq	r2, r1, r8, ror #16
   120b4:	andeq	r2, r1, r8, ror #16
   120b8:	andeq	r2, r1, r8, ror #16
   120bc:	andeq	r2, r1, r8, ror #16
   120c0:	andeq	r2, r1, r8, ror #16
   120c4:	andeq	r2, r1, r8, ror #16
   120c8:	andeq	r2, r1, r8, ror #16
   120cc:	andeq	r2, r1, r8, ror #16
   120d0:	andeq	r2, r1, r8, ror #16
   120d4:	andeq	r2, r1, r8, ror #16
   120d8:	andeq	r2, r1, r8, ror #16
   120dc:	andeq	r2, r1, r8, ror #16
   120e0:	andeq	r2, r1, r8, ror #16
   120e4:	andeq	r2, r1, r8, ror #16
   120e8:	andeq	r2, r1, r8, ror #16
   120ec:	ldrdeq	r2, [r1], -r0
   120f0:	ldrdeq	r2, [r1], -r0
   120f4:	ldrdeq	r2, [r1], -r0
   120f8:	ldrdeq	r2, [r1], -r0
   120fc:	andeq	r2, r1, ip, lsl #16
   12100:			; <UNDEFINED> instruction: 0x000128bc
   12104:	andeq	r2, r1, r8, ror #16
   12108:	andeq	r2, r1, r8, ror #16
   1210c:	andeq	r2, r1, r8, ror #16
   12110:	andeq	r2, r1, r8, ror #16
   12114:	andeq	r2, r1, r8, ror #16
   12118:	andeq	r2, r1, r8, ror #16
   1211c:	andeq	r2, r1, r8, ror #16
   12120:	andeq	r2, r1, r8, ror #16
   12124:	andeq	r2, r1, r8, ror #16
   12128:	andeq	r2, r1, r8, ror #16
   1212c:	andeq	r2, r1, r8, ror #16
   12130:	andeq	r2, r1, r8, ror #16
   12134:	andeq	r2, r1, r8, ror #16
   12138:	andeq	r2, r1, r8, ror #16
   1213c:	andeq	r2, r1, r8, ror #16
   12140:	andeq	r2, r1, r8, ror #16
   12144:	andeq	r2, r1, r8, ror #16
   12148:	andeq	r2, r1, r8, ror #16
   1214c:	andeq	r2, r1, r8, ror #16
   12150:	andeq	r2, r1, r8, ror #16
   12154:	andeq	r2, r1, r8, ror #16
   12158:	andeq	r2, r1, r8, ror #16
   1215c:	andeq	r2, r1, r8, ror #16
   12160:	andeq	r2, r1, r8, ror #16
   12164:	andeq	r2, r1, r8, ror #16
   12168:	andeq	r2, r1, r8, ror #16
   1216c:	ldrdeq	r2, [r1], -r0
   12170:	andeq	r2, r1, ip, lsr #10
   12174:	andeq	r2, r1, r8, ror #16
   12178:	ldrdeq	r2, [r1], -r0
   1217c:	andeq	r2, r1, r8, ror #16
   12180:	ldrdeq	r2, [r1], -r0
   12184:	andeq	r2, r1, r8, ror #16
   12188:	andeq	r2, r1, r8, ror #16
   1218c:	andeq	r2, r1, r8, ror #16
   12190:	andeq	r2, r1, r8, ror #16
   12194:	andeq	r2, r1, r8, ror #16
   12198:	andeq	r2, r1, r8, ror #16
   1219c:	andeq	r2, r1, r8, ror #16
   121a0:	andeq	r2, r1, r8, ror #16
   121a4:	andeq	r2, r1, r8, ror #16
   121a8:	andeq	r2, r1, r8, ror #16
   121ac:	andeq	r2, r1, r8, ror #16
   121b0:	andeq	r2, r1, r8, ror #16
   121b4:	andeq	r2, r1, r8, ror #16
   121b8:	andeq	r2, r1, r8, ror #16
   121bc:	andeq	r2, r1, r8, ror #16
   121c0:	andeq	r2, r1, r8, ror #16
   121c4:	andeq	r2, r1, r8, ror #16
   121c8:	andeq	r2, r1, r8, ror #16
   121cc:	andeq	r2, r1, r8, ror #16
   121d0:	andeq	r2, r1, r8, ror #16
   121d4:	andeq	r2, r1, r8, ror #16
   121d8:	andeq	r2, r1, r8, ror #16
   121dc:	andeq	r2, r1, r8, ror #16
   121e0:	andeq	r2, r1, r8, ror #16
   121e4:	andeq	r2, r1, r8, ror #16
   121e8:	andeq	r2, r1, r8, ror #16
   121ec:	andeq	r2, r1, r0, asr #7
   121f0:	ldrdeq	r2, [r1], -r0
   121f4:	andeq	r2, r1, r0, asr #7
   121f8:	andeq	r2, r1, r0, ror #7
   121fc:	mov	r3, #1
   12200:	str	r3, [sp, #28]
   12204:	str	r3, [sp, #52]	; 0x34
   12208:	ldr	r3, [pc, #4000]	; 131b0 <__assert_fail@plt+0x227c>
   1220c:	mov	r7, #0
   12210:	str	r3, [sp, #64]	; 0x40
   12214:	mov	r3, #2
   12218:	str	r3, [sp, #152]	; 0x98
   1221c:	b	11f20 <__assert_fail@plt+0xfec>
   12220:	ldr	r3, [sp, #28]
   12224:	cmp	r3, #0
   12228:	beq	12384 <__assert_fail@plt+0x1450>
   1222c:	mov	r3, #1
   12230:	str	r3, [sp, #52]	; 0x34
   12234:	ldr	r3, [pc, #3956]	; 131b0 <__assert_fail@plt+0x227c>
   12238:	mov	r7, #0
   1223c:	str	r3, [sp, #64]	; 0x40
   12240:	b	11f20 <__assert_fail@plt+0xfec>
   12244:	mov	r3, #1
   12248:	str	r3, [sp, #44]	; 0x2c
   1224c:	str	r3, [sp, #52]	; 0x34
   12250:	str	r3, [sp, #28]
   12254:	b	12208 <__assert_fail@plt+0x12d4>
   12258:	mov	r3, #0
   1225c:	str	r3, [sp, #28]
   12260:	mov	r3, #1
   12264:	str	r3, [sp, #44]	; 0x2c
   12268:	mov	r7, #0
   1226c:	b	11f20 <__assert_fail@plt+0xfec>
   12270:	ldr	r3, [sp, #152]	; 0x98
   12274:	cmp	r3, #10
   12278:	beq	122bc <__assert_fail@plt+0x1388>
   1227c:	mov	r2, #5
   12280:	ldr	r1, [pc, #3884]	; 131b4 <__assert_fail@plt+0x2280>
   12284:	mov	r0, #0
   12288:	bl	10d78 <dcgettext@plt>
   1228c:	ldr	r2, [pc, #3872]	; 131b4 <__assert_fail@plt+0x2280>
   12290:	cmp	r0, r2
   12294:	str	r0, [sp, #164]	; 0xa4
   12298:	beq	132a0 <__assert_fail@plt+0x236c>
   1229c:	mov	r2, #5
   122a0:	ldr	r1, [pc, #3848]	; 131b0 <__assert_fail@plt+0x227c>
   122a4:	mov	r0, #0
   122a8:	bl	10d78 <dcgettext@plt>
   122ac:	ldr	r2, [pc, #3836]	; 131b0 <__assert_fail@plt+0x227c>
   122b0:	cmp	r0, r2
   122b4:	str	r0, [sp, #168]	; 0xa8
   122b8:	beq	13290 <__assert_fail@plt+0x235c>
   122bc:	ldr	r7, [sp, #28]
   122c0:	cmp	r7, #0
   122c4:	movne	r7, #0
   122c8:	bne	122fc <__assert_fail@plt+0x13c8>
   122cc:	ldr	r3, [sp, #164]	; 0xa4
   122d0:	ldrb	r3, [r3]
   122d4:	cmp	r3, #0
   122d8:	beq	132b0 <__assert_fail@plt+0x237c>
   122dc:	ldr	r2, [sp, #164]	; 0xa4
   122e0:	ldr	r1, [sp, #32]
   122e4:	cmp	fp, r7
   122e8:	strbhi	r3, [r1, r7]
   122ec:	ldrb	r3, [r2, #1]!
   122f0:	add	r7, r7, #1
   122f4:	cmp	r3, #0
   122f8:	bne	122e4 <__assert_fail@plt+0x13b0>
   122fc:	ldr	r0, [sp, #168]	; 0xa8
   12300:	bl	10e44 <strlen@plt>
   12304:	ldr	r3, [sp, #168]	; 0xa8
   12308:	str	r3, [sp, #64]	; 0x40
   1230c:	mov	r3, #1
   12310:	str	r3, [sp, #44]	; 0x2c
   12314:	str	r0, [sp, #52]	; 0x34
   12318:	b	11f20 <__assert_fail@plt+0xfec>
   1231c:	mov	r3, #1
   12320:	str	r3, [sp, #44]	; 0x2c
   12324:	str	r3, [sp, #52]	; 0x34
   12328:	str	r3, [sp, #28]
   1232c:	ldr	r3, [pc, #3716]	; 131b8 <__assert_fail@plt+0x2284>
   12330:	mov	r7, #0
   12334:	str	r3, [sp, #64]	; 0x40
   12338:	mov	r3, #5
   1233c:	str	r3, [sp, #152]	; 0x98
   12340:	b	11f20 <__assert_fail@plt+0xfec>
   12344:	ldr	r3, [sp, #28]
   12348:	cmp	r3, #0
   1234c:	beq	1304c <__assert_fail@plt+0x2118>
   12350:	ldr	r3, [sp, #28]
   12354:	mov	r7, #0
   12358:	str	r3, [sp, #44]	; 0x2c
   1235c:	mov	r3, #1
   12360:	str	r3, [sp, #52]	; 0x34
   12364:	ldr	r3, [pc, #3660]	; 131b8 <__assert_fail@plt+0x2284>
   12368:	str	r3, [sp, #64]	; 0x40
   1236c:	b	11f20 <__assert_fail@plt+0xfec>
   12370:	ldr	r3, [sp, #28]
   12374:	cmp	r3, #0
   12378:	mov	r3, #1
   1237c:	streq	r3, [sp, #44]	; 0x2c
   12380:	bne	12204 <__assert_fail@plt+0x12d0>
   12384:	cmp	fp, #0
   12388:	beq	1307c <__assert_fail@plt+0x2148>
   1238c:	ldr	r3, [sp, #32]
   12390:	mov	r2, #39	; 0x27
   12394:	mov	r7, #1
   12398:	strb	r2, [r3]
   1239c:	mov	r3, #0
   123a0:	str	r3, [sp, #28]
   123a4:	mov	r3, #1
   123a8:	str	r3, [sp, #52]	; 0x34
   123ac:	ldr	r3, [pc, #3580]	; 131b0 <__assert_fail@plt+0x227c>
   123b0:	str	r3, [sp, #64]	; 0x40
   123b4:	mov	r3, #2
   123b8:	str	r3, [sp, #152]	; 0x98
   123bc:	b	11f20 <__assert_fail@plt+0xfec>
   123c0:	ldr	r3, [sp, #24]
   123c4:	cmn	r3, #1
   123c8:	beq	12fe0 <__assert_fail@plt+0x20ac>
   123cc:	ldr	r3, [sp, #24]
   123d0:	subs	r3, r3, #1
   123d4:	movne	r3, #1
   123d8:	cmp	r3, #0
   123dc:	bne	123e8 <__assert_fail@plt+0x14b4>
   123e0:	cmp	sl, #0
   123e4:	beq	127d4 <__assert_fail@plt+0x18a0>
   123e8:	ldr	r3, [sp, #152]	; 0x98
   123ec:	mov	r5, #0
   123f0:	sub	r2, r3, #2
   123f4:	mov	r8, r5
   123f8:	clz	r2, r2
   123fc:	lsr	r2, r2, #5
   12400:	ldr	r3, [sp, #60]	; 0x3c
   12404:	ldr	r1, [sp, #28]
   12408:	orr	r3, r2, r3
   1240c:	eor	r3, r3, #1
   12410:	orr	r3, r1, r3
   12414:	tst	r3, #255	; 0xff
   12418:	bne	12b44 <__assert_fail@plt+0x1c10>
   1241c:	cmp	r6, #0
   12420:	bne	12570 <__assert_fail@plt+0x163c>
   12424:	ldr	r3, [sp, #40]	; 0x28
   12428:	eor	r8, r8, #1
   1242c:	and	r8, r8, r3
   12430:	add	sl, sl, #1
   12434:	uxtb	r6, r8
   12438:	cmp	r6, #0
   1243c:	beq	12470 <__assert_fail@plt+0x153c>
   12440:	cmp	fp, r7
   12444:	movhi	r2, #39	; 0x27
   12448:	ldrhi	r3, [sp, #32]
   1244c:	strbhi	r2, [r3, r7]
   12450:	add	r3, r7, #1
   12454:	cmp	fp, r3
   12458:	movhi	r1, #39	; 0x27
   1245c:	ldrhi	r2, [sp, #32]
   12460:	add	r7, r7, #2
   12464:	strbhi	r1, [r2, r3]
   12468:	mov	r3, #0
   1246c:	str	r3, [sp, #40]	; 0x28
   12470:	cmp	r7, fp
   12474:	ldrcc	r3, [sp, #32]
   12478:	strbcc	r4, [r3, r7]
   1247c:	ldr	r3, [sp, #36]	; 0x24
   12480:	cmp	r5, #0
   12484:	moveq	r3, #0
   12488:	str	r3, [sp, #36]	; 0x24
   1248c:	ldr	r3, [sp, #24]
   12490:	add	r7, r7, #1
   12494:	cmn	r3, #1
   12498:	bne	11f3c <__assert_fail@plt+0x1008>
   1249c:	ldr	r3, [sp, #56]	; 0x38
   124a0:	ldrb	r5, [r3, sl]
   124a4:	adds	r5, r5, #0
   124a8:	movne	r5, #1
   124ac:	cmp	r5, #0
   124b0:	bne	11f50 <__assert_fail@plt+0x101c>
   124b4:	ldr	r3, [sp, #152]	; 0x98
   124b8:	ldr	r1, [sp, #28]
   124bc:	sub	r3, r3, #2
   124c0:	clz	r3, r3
   124c4:	lsr	r3, r3, #5
   124c8:	and	r9, r1, r3
   124cc:	cmp	r7, #0
   124d0:	movne	r2, #0
   124d4:	andeq	r2, r9, #1
   124d8:	cmp	r2, #0
   124dc:	bne	12eb8 <__assert_fail@plt+0x1f84>
   124e0:	eor	r2, r1, #1
   124e4:	ands	r3, r3, r2
   124e8:	beq	13374 <__assert_fail@plt+0x2440>
   124ec:	ldr	r2, [sp, #68]	; 0x44
   124f0:	cmp	r2, #0
   124f4:	beq	13360 <__assert_fail@plt+0x242c>
   124f8:	ldr	r3, [sp, #36]	; 0x24
   124fc:	cmp	r3, #0
   12500:	bne	13318 <__assert_fail@plt+0x23e4>
   12504:	ldr	r2, [sp, #72]	; 0x48
   12508:	clz	r3, fp
   1250c:	cmp	r2, #0
   12510:	lsr	r3, r3, #5
   12514:	moveq	r3, #0
   12518:	cmp	r3, #0
   1251c:	beq	132b8 <__assert_fail@plt+0x2384>
   12520:	str	r3, [sp, #68]	; 0x44
   12524:	ldr	fp, [sp, #72]	; 0x48
   12528:	b	11ed8 <__assert_fail@plt+0xfa4>
   1252c:	ldr	r3, [sp, #152]	; 0x98
   12530:	cmp	r3, #2
   12534:	beq	12b88 <__assert_fail@plt+0x1c54>
   12538:	ldr	r3, [sp, #44]	; 0x2c
   1253c:	ldr	r2, [sp, #28]
   12540:	and	r2, r3, r2
   12544:	ands	r2, r9, r2
   12548:	bne	12b94 <__assert_fail@plt+0x1c60>
   1254c:	mov	r4, #92	; 0x5c
   12550:	mov	r3, r4
   12554:	ldr	r1, [sp, #44]	; 0x2c
   12558:	cmp	r1, #0
   1255c:	moveq	r5, #0
   12560:	moveq	r8, r1
   12564:	beq	12400 <__assert_fail@plt+0x14cc>
   12568:	mov	r4, r3
   1256c:	mov	r5, #0
   12570:	ldr	r3, [sp, #28]
   12574:	cmp	r3, #0
   12578:	bne	12b7c <__assert_fail@plt+0x1c48>
   1257c:	ldr	r3, [sp, #40]	; 0x28
   12580:	eor	r9, r3, #1
   12584:	and	r9, r9, r2
   12588:	ands	r9, r9, #255	; 0xff
   1258c:	beq	125d0 <__assert_fail@plt+0x169c>
   12590:	cmp	fp, r7
   12594:	movhi	r2, #39	; 0x27
   12598:	ldrhi	r3, [sp, #32]
   1259c:	str	r9, [sp, #40]	; 0x28
   125a0:	strbhi	r2, [r3, r7]
   125a4:	add	r3, r7, #1
   125a8:	cmp	fp, r3
   125ac:	movhi	r1, #36	; 0x24
   125b0:	ldrhi	r2, [sp, #32]
   125b4:	strbhi	r1, [r2, r3]
   125b8:	add	r3, r7, #2
   125bc:	cmp	fp, r3
   125c0:	add	r7, r7, #3
   125c4:	ldrhi	r2, [sp, #32]
   125c8:	movhi	r1, #39	; 0x27
   125cc:	strbhi	r1, [r2, r3]
   125d0:	cmp	fp, r7
   125d4:	movhi	r2, #92	; 0x5c
   125d8:	ldrhi	r3, [sp, #32]
   125dc:	add	sl, sl, #1
   125e0:	strbhi	r2, [r3, r7]
   125e4:	add	r7, r7, #1
   125e8:	b	12470 <__assert_fail@plt+0x153c>
   125ec:	ldr	r3, [sp, #152]	; 0x98
   125f0:	mov	r4, #11
   125f4:	sub	r2, r3, #2
   125f8:	mov	r3, #118	; 0x76
   125fc:	clz	r2, r2
   12600:	lsr	r2, r2, #5
   12604:	b	12554 <__assert_fail@plt+0x1620>
   12608:	mov	r4, #10
   1260c:	mov	r3, #110	; 0x6e
   12610:	ldr	r2, [sp, #152]	; 0x98
   12614:	ldr	r1, [sp, #28]
   12618:	sub	r2, r2, #2
   1261c:	clz	r2, r2
   12620:	lsr	r2, r2, #5
   12624:	ands	r1, r1, r2
   12628:	beq	12554 <__assert_fail@plt+0x1620>
   1262c:	ldr	sl, [sp, #32]
   12630:	mov	r8, fp
   12634:	mov	r2, r1
   12638:	mov	r3, #2
   1263c:	str	r3, [sp, #152]	; 0x98
   12640:	ldr	r9, [sp, #44]	; 0x2c
   12644:	ldr	r3, [sp, #152]	; 0x98
   12648:	and	r9, r9, r2
   1264c:	tst	r9, #255	; 0xff
   12650:	movne	r3, #4
   12654:	str	r3, [sp, #152]	; 0x98
   12658:	ldr	r3, [sp, #156]	; 0x9c
   1265c:	mov	ip, #0
   12660:	bic	r3, r3, #2
   12664:	str	r3, [sp, #4]
   12668:	ldr	r3, [sp, #168]	; 0xa8
   1266c:	ldr	r2, [sp, #56]	; 0x38
   12670:	str	r3, [sp, #16]
   12674:	ldr	r3, [sp, #164]	; 0xa4
   12678:	mov	r1, r8
   1267c:	str	r3, [sp, #12]
   12680:	ldr	r3, [sp, #152]	; 0x98
   12684:	mov	r0, sl
   12688:	str	r3, [sp]
   1268c:	str	ip, [sp, #8]
   12690:	ldr	r3, [sp, #24]
   12694:	bl	11e7c <__assert_fail@plt+0xf48>
   12698:	mov	fp, r0
   1269c:	mov	r0, fp
   126a0:	add	sp, sp, #116	; 0x74
   126a4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   126a8:	ldr	r3, [sp, #152]	; 0x98
   126ac:	mov	r4, #8
   126b0:	sub	r2, r3, #2
   126b4:	mov	r3, #98	; 0x62
   126b8:	clz	r2, r2
   126bc:	lsr	r2, r2, #5
   126c0:	b	12554 <__assert_fail@plt+0x1620>
   126c4:	ldr	r3, [sp, #152]	; 0x98
   126c8:	mov	r4, #7
   126cc:	sub	r2, r3, #2
   126d0:	mov	r3, #97	; 0x61
   126d4:	clz	r2, r2
   126d8:	lsr	r2, r2, #5
   126dc:	b	12554 <__assert_fail@plt+0x1620>
   126e0:	ldr	r3, [sp, #44]	; 0x2c
   126e4:	cmp	r3, #0
   126e8:	beq	12ecc <__assert_fail@plt+0x1f98>
   126ec:	ldr	r3, [sp, #28]
   126f0:	cmp	r3, #0
   126f4:	bne	131a4 <__assert_fail@plt+0x2270>
   126f8:	ldr	r3, [sp, #152]	; 0x98
   126fc:	sub	r2, r3, #2
   12700:	ldr	r3, [sp, #40]	; 0x28
   12704:	clz	r2, r2
   12708:	eor	r3, r3, #1
   1270c:	lsr	r2, r2, #5
   12710:	ands	r3, r2, r3
   12714:	moveq	r1, r7
   12718:	beq	1275c <__assert_fail@plt+0x1828>
   1271c:	cmp	fp, r7
   12720:	movhi	r0, #39	; 0x27
   12724:	ldrhi	r1, [sp, #32]
   12728:	str	r3, [sp, #40]	; 0x28
   1272c:	strbhi	r0, [r1, r7]
   12730:	add	r1, r7, #1
   12734:	cmp	fp, r1
   12738:	movhi	ip, #36	; 0x24
   1273c:	ldrhi	r0, [sp, #32]
   12740:	strbhi	ip, [r0, r1]
   12744:	add	r1, r7, #2
   12748:	cmp	fp, r1
   1274c:	movhi	ip, #39	; 0x27
   12750:	ldrhi	r0, [sp, #32]
   12754:	strbhi	ip, [r0, r1]
   12758:	add	r1, r7, #3
   1275c:	cmp	fp, r1
   12760:	movhi	r0, #92	; 0x5c
   12764:	ldrhi	r3, [sp, #32]
   12768:	add	r7, r1, #1
   1276c:	strbhi	r0, [r3, r1]
   12770:	cmp	r8, #0
   12774:	beq	130b8 <__assert_fail@plt+0x2184>
   12778:	ldr	r0, [sp, #24]
   1277c:	add	r3, sl, #1
   12780:	cmp	r3, r0
   12784:	bcs	12ff4 <__assert_fail@plt+0x20c0>
   12788:	ldr	r0, [sp, #56]	; 0x38
   1278c:	ldrb	r3, [r0, r3]
   12790:	sub	r3, r3, #48	; 0x30
   12794:	cmp	r3, #9
   12798:	bhi	12ff4 <__assert_fail@plt+0x20c0>
   1279c:	cmp	fp, r7
   127a0:	movhi	r3, #48	; 0x30
   127a4:	ldrhi	r0, [sp, #32]
   127a8:	ldr	r5, [sp, #28]
   127ac:	mov	r4, #48	; 0x30
   127b0:	strbhi	r3, [r0, r7]
   127b4:	add	r3, r1, #2
   127b8:	cmp	fp, r3
   127bc:	movhi	r0, #48	; 0x30
   127c0:	ldrhi	ip, [sp, #32]
   127c4:	add	r7, r1, #3
   127c8:	strbhi	r0, [ip, r3]
   127cc:	b	12400 <__assert_fail@plt+0x14cc>
   127d0:	mov	r5, #0
   127d4:	ldr	r3, [sp, #152]	; 0x98
   127d8:	sub	r2, r3, #2
   127dc:	ldr	r3, [sp, #28]
   127e0:	clz	r2, r2
   127e4:	lsr	r2, r2, #5
   127e8:	ands	r8, r3, r2
   127ec:	beq	12400 <__assert_fail@plt+0x14cc>
   127f0:	mov	r3, r8
   127f4:	mov	r2, r3
   127f8:	mov	r3, #2
   127fc:	ldr	sl, [sp, #32]
   12800:	mov	r8, fp
   12804:	str	r3, [sp, #152]	; 0x98
   12808:	b	12640 <__assert_fail@plt+0x170c>
   1280c:	ldr	r3, [sp, #152]	; 0x98
   12810:	cmp	r3, #2
   12814:	beq	12f38 <__assert_fail@plt+0x2004>
   12818:	cmp	r3, #5
   1281c:	beq	12ef8 <__assert_fail@plt+0x1fc4>
   12820:	mov	r5, #0
   12824:	sub	r2, r3, #2
   12828:	mov	r8, r5
   1282c:	clz	r2, r2
   12830:	mov	r4, #63	; 0x3f
   12834:	lsr	r2, r2, #5
   12838:	b	12400 <__assert_fail@plt+0x14cc>
   1283c:	ldr	r3, [sp, #152]	; 0x98
   12840:	cmp	r3, #2
   12844:	beq	12f58 <__assert_fail@plt+0x2024>
   12848:	mov	r2, #0
   1284c:	str	r5, [sp, #68]	; 0x44
   12850:	mov	r8, r2
   12854:	mov	r4, #39	; 0x27
   12858:	b	12400 <__assert_fail@plt+0x14cc>
   1285c:	mov	r4, #13
   12860:	mov	r3, #114	; 0x72
   12864:	b	12610 <__assert_fail@plt+0x16dc>
   12868:	ldr	r3, [sp, #152]	; 0x98
   1286c:	mov	r8, #0
   12870:	sub	r2, r3, #2
   12874:	clz	r2, r2
   12878:	lsr	r2, r2, #5
   1287c:	b	12400 <__assert_fail@plt+0x14cc>
   12880:	ldr	r3, [sp, #152]	; 0x98
   12884:	mov	r4, #12
   12888:	sub	r2, r3, #2
   1288c:	mov	r3, #102	; 0x66
   12890:	clz	r2, r2
   12894:	lsr	r2, r2, #5
   12898:	b	12554 <__assert_fail@plt+0x1620>
   1289c:	mov	r5, r6
   128a0:	b	127d4 <__assert_fail@plt+0x18a0>
   128a4:	ldr	r3, [sp, #152]	; 0x98
   128a8:	sub	r2, r3, #2
   128ac:	mov	r3, #116	; 0x74
   128b0:	clz	r2, r2
   128b4:	lsr	r2, r2, #5
   128b8:	b	12554 <__assert_fail@plt+0x1620>
   128bc:	ldr	r8, [sp, #76]	; 0x4c
   128c0:	cmp	r8, #1
   128c4:	bne	12d74 <__assert_fail@plt+0x1e40>
   128c8:	bl	10e2c <__ctype_b_loc@plt>
   128cc:	sxth	r3, r4
   128d0:	mov	ip, r8
   128d4:	lsl	r3, r3, #1
   128d8:	ldr	r2, [r0]
   128dc:	ldrh	r3, [r2, r3]
   128e0:	and	r3, r3, #16384	; 0x4000
   128e4:	cmp	r3, #0
   128e8:	movne	r5, #1
   128ec:	moveq	r5, #0
   128f0:	moveq	r3, #1
   128f4:	movne	r3, #0
   128f8:	ldr	r2, [sp, #44]	; 0x2c
   128fc:	and	r3, r3, r2
   12900:	ands	r8, r3, #255	; 0xff
   12904:	bne	12c08 <__assert_fail@plt+0x1cd4>
   12908:	ldr	r3, [sp, #152]	; 0x98
   1290c:	sub	r2, r3, #2
   12910:	clz	r2, r2
   12914:	lsr	r2, r2, #5
   12918:	b	12400 <__assert_fail@plt+0x14cc>
   1291c:	ldr	r3, [sp, #56]	; 0x38
   12920:	add	r3, r3, sl
   12924:	str	r3, [sp, #48]	; 0x30
   12928:	ldr	r3, [sp, #48]	; 0x30
   1292c:	mov	r6, #0
   12930:	ldrb	r4, [r3]
   12934:	cmp	r4, #126	; 0x7e
   12938:	ldrls	pc, [pc, r4, lsl #2]
   1293c:	b	128bc <__assert_fail@plt+0x1988>
   12940:	andeq	r2, r1, r0, ror #13
   12944:			; <UNDEFINED> instruction: 0x000128bc
   12948:			; <UNDEFINED> instruction: 0x000128bc
   1294c:			; <UNDEFINED> instruction: 0x000128bc
   12950:			; <UNDEFINED> instruction: 0x000128bc
   12954:			; <UNDEFINED> instruction: 0x000128bc
   12958:			; <UNDEFINED> instruction: 0x000128bc
   1295c:	andeq	r2, r1, r4, asr #13
   12960:	andeq	r2, r1, r8, lsr #13
   12964:	andeq	r2, r1, ip, lsr fp
   12968:	andeq	r2, r1, r8, lsl #12
   1296c:	andeq	r2, r1, ip, ror #11
   12970:	andeq	r2, r1, r0, lsl #17
   12974:	andeq	r2, r1, ip, asr r8
   12978:			; <UNDEFINED> instruction: 0x000128bc
   1297c:			; <UNDEFINED> instruction: 0x000128bc
   12980:			; <UNDEFINED> instruction: 0x000128bc
   12984:			; <UNDEFINED> instruction: 0x000128bc
   12988:			; <UNDEFINED> instruction: 0x000128bc
   1298c:			; <UNDEFINED> instruction: 0x000128bc
   12990:			; <UNDEFINED> instruction: 0x000128bc
   12994:			; <UNDEFINED> instruction: 0x000128bc
   12998:			; <UNDEFINED> instruction: 0x000128bc
   1299c:			; <UNDEFINED> instruction: 0x000128bc
   129a0:			; <UNDEFINED> instruction: 0x000128bc
   129a4:			; <UNDEFINED> instruction: 0x000128bc
   129a8:			; <UNDEFINED> instruction: 0x000128bc
   129ac:			; <UNDEFINED> instruction: 0x000128bc
   129b0:			; <UNDEFINED> instruction: 0x000128bc
   129b4:			; <UNDEFINED> instruction: 0x000128bc
   129b8:			; <UNDEFINED> instruction: 0x000128bc
   129bc:			; <UNDEFINED> instruction: 0x000128bc
   129c0:	ldrdeq	r2, [r1], -r4
   129c4:	ldrdeq	r2, [r1], -r0
   129c8:	ldrdeq	r2, [r1], -r0
   129cc:	andeq	r2, r1, r0, ror #7
   129d0:	ldrdeq	r2, [r1], -r0
   129d4:	andeq	r2, r1, r8, ror #16
   129d8:	ldrdeq	r2, [r1], -r0
   129dc:	andeq	r2, r1, ip, lsr r8
   129e0:	ldrdeq	r2, [r1], -r0
   129e4:	ldrdeq	r2, [r1], -r0
   129e8:	ldrdeq	r2, [r1], -r0
   129ec:	andeq	r2, r1, r8, ror #16
   129f0:	andeq	r2, r1, r8, ror #16
   129f4:	andeq	r2, r1, r8, ror #16
   129f8:	andeq	r2, r1, r8, ror #16
   129fc:	andeq	r2, r1, r8, ror #16
   12a00:	andeq	r2, r1, r8, ror #16
   12a04:	andeq	r2, r1, r8, ror #16
   12a08:	andeq	r2, r1, r8, ror #16
   12a0c:	andeq	r2, r1, r8, ror #16
   12a10:	andeq	r2, r1, r8, ror #16
   12a14:	andeq	r2, r1, r8, ror #16
   12a18:	andeq	r2, r1, r8, ror #16
   12a1c:	andeq	r2, r1, r8, ror #16
   12a20:	andeq	r2, r1, r8, ror #16
   12a24:	andeq	r2, r1, r8, ror #16
   12a28:	andeq	r2, r1, r8, ror #16
   12a2c:	ldrdeq	r2, [r1], -r0
   12a30:	ldrdeq	r2, [r1], -r0
   12a34:	ldrdeq	r2, [r1], -r0
   12a38:	ldrdeq	r2, [r1], -r0
   12a3c:	andeq	r2, r1, ip, lsl #16
   12a40:			; <UNDEFINED> instruction: 0x000128bc
   12a44:	andeq	r2, r1, r8, ror #16
   12a48:	andeq	r2, r1, r8, ror #16
   12a4c:	andeq	r2, r1, r8, ror #16
   12a50:	andeq	r2, r1, r8, ror #16
   12a54:	andeq	r2, r1, r8, ror #16
   12a58:	andeq	r2, r1, r8, ror #16
   12a5c:	andeq	r2, r1, r8, ror #16
   12a60:	andeq	r2, r1, r8, ror #16
   12a64:	andeq	r2, r1, r8, ror #16
   12a68:	andeq	r2, r1, r8, ror #16
   12a6c:	andeq	r2, r1, r8, ror #16
   12a70:	andeq	r2, r1, r8, ror #16
   12a74:	andeq	r2, r1, r8, ror #16
   12a78:	andeq	r2, r1, r8, ror #16
   12a7c:	andeq	r2, r1, r8, ror #16
   12a80:	andeq	r2, r1, r8, ror #16
   12a84:	andeq	r2, r1, r8, ror #16
   12a88:	andeq	r2, r1, r8, ror #16
   12a8c:	andeq	r2, r1, r8, ror #16
   12a90:	andeq	r2, r1, r8, ror #16
   12a94:	andeq	r2, r1, r8, ror #16
   12a98:	andeq	r2, r1, r8, ror #16
   12a9c:	andeq	r2, r1, r8, ror #16
   12aa0:	andeq	r2, r1, r8, ror #16
   12aa4:	andeq	r2, r1, r8, ror #16
   12aa8:	andeq	r2, r1, r8, ror #16
   12aac:	ldrdeq	r2, [r1], -r0
   12ab0:	andeq	r2, r1, ip, lsr #10
   12ab4:	andeq	r2, r1, r8, ror #16
   12ab8:	ldrdeq	r2, [r1], -r0
   12abc:	andeq	r2, r1, r8, ror #16
   12ac0:	ldrdeq	r2, [r1], -r0
   12ac4:	andeq	r2, r1, r8, ror #16
   12ac8:	andeq	r2, r1, r8, ror #16
   12acc:	andeq	r2, r1, r8, ror #16
   12ad0:	andeq	r2, r1, r8, ror #16
   12ad4:	andeq	r2, r1, r8, ror #16
   12ad8:	andeq	r2, r1, r8, ror #16
   12adc:	andeq	r2, r1, r8, ror #16
   12ae0:	andeq	r2, r1, r8, ror #16
   12ae4:	andeq	r2, r1, r8, ror #16
   12ae8:	andeq	r2, r1, r8, ror #16
   12aec:	andeq	r2, r1, r8, ror #16
   12af0:	andeq	r2, r1, r8, ror #16
   12af4:	andeq	r2, r1, r8, ror #16
   12af8:	andeq	r2, r1, r8, ror #16
   12afc:	andeq	r2, r1, r8, ror #16
   12b00:	andeq	r2, r1, r8, ror #16
   12b04:	andeq	r2, r1, r8, ror #16
   12b08:	andeq	r2, r1, r8, ror #16
   12b0c:	andeq	r2, r1, r8, ror #16
   12b10:	andeq	r2, r1, r8, ror #16
   12b14:	andeq	r2, r1, r8, ror #16
   12b18:	andeq	r2, r1, r8, ror #16
   12b1c:	andeq	r2, r1, r8, ror #16
   12b20:	andeq	r2, r1, r8, ror #16
   12b24:	andeq	r2, r1, r8, ror #16
   12b28:	andeq	r2, r1, r8, ror #16
   12b2c:	andeq	r2, r1, r0, asr #7
   12b30:	ldrdeq	r2, [r1], -r0
   12b34:	andeq	r2, r1, r0, asr #7
   12b38:	andeq	r2, r1, r0, ror #7
   12b3c:	mov	r3, #116	; 0x74
   12b40:	b	12610 <__assert_fail@plt+0x16dc>
   12b44:	ldr	r3, [sp, #160]	; 0xa0
   12b48:	cmp	r3, #0
   12b4c:	beq	1241c <__assert_fail@plt+0x14e8>
   12b50:	lsr	r3, r4, #5
   12b54:	ldr	r0, [sp, #160]	; 0xa0
   12b58:	uxtb	r3, r3
   12b5c:	and	r1, r4, #31
   12b60:	ldr	r0, [r0, r3, lsl #2]
   12b64:	lsr	r3, r0, r1
   12b68:	tst	r3, #1
   12b6c:	beq	1241c <__assert_fail@plt+0x14e8>
   12b70:	ldr	r3, [sp, #28]
   12b74:	cmp	r3, #0
   12b78:	beq	1257c <__assert_fail@plt+0x1648>
   12b7c:	ldr	sl, [sp, #32]
   12b80:	mov	r8, fp
   12b84:	b	12640 <__assert_fail@plt+0x170c>
   12b88:	ldr	r3, [sp, #28]
   12b8c:	cmp	r3, #0
   12b90:	bne	130e4 <__assert_fail@plt+0x21b0>
   12b94:	add	sl, sl, #1
   12b98:	ldr	r6, [sp, #40]	; 0x28
   12b9c:	mov	r5, #0
   12ba0:	mov	r4, #92	; 0x5c
   12ba4:	b	12438 <__assert_fail@plt+0x1504>
   12ba8:	cmp	r9, r8
   12bac:	bne	12e1c <__assert_fail@plt+0x1ee8>
   12bb0:	ldr	r0, [sp, #100]	; 0x64
   12bb4:	bl	10d9c <iswprint@plt>
   12bb8:	add	r5, r5, r4
   12bbc:	cmp	r0, #0
   12bc0:	add	r0, sp, #104	; 0x68
   12bc4:	moveq	r6, #0
   12bc8:	bl	10d48 <mbsinit@plt>
   12bcc:	cmp	r0, #0
   12bd0:	beq	12db0 <__assert_fail@plt+0x1e7c>
   12bd4:	mov	r2, r6
   12bd8:	mov	ip, r5
   12bdc:	eor	r5, r2, #1
   12be0:	ldr	r4, [sp, #80]	; 0x50
   12be4:	ldr	r6, [sp, #84]	; 0x54
   12be8:	ldr	r7, [sp, #88]	; 0x58
   12bec:	uxtb	r5, r5
   12bf0:	cmp	ip, #1
   12bf4:	bls	130f4 <__assert_fail@plt+0x21c0>
   12bf8:	ldr	r3, [sp, #44]	; 0x2c
   12bfc:	and	r8, r3, r5
   12c00:	mov	r5, r2
   12c04:	uxtb	r8, r8
   12c08:	add	r2, sl, ip
   12c0c:	ldr	r0, [sp, #48]	; 0x30
   12c10:	mov	r1, #0
   12c14:	str	r5, [sp, #48]	; 0x30
   12c18:	ldr	r9, [sp, #28]
   12c1c:	ldr	ip, [sp, #40]	; 0x28
   12c20:	ldr	r3, [sp, #32]
   12c24:	ldr	r5, [sp, #152]	; 0x98
   12c28:	b	12ce4 <__assert_fail@plt+0x1db0>
   12c2c:	cmp	r9, #0
   12c30:	bne	13008 <__assert_fail@plt+0x20d4>
   12c34:	eor	r1, ip, #1
   12c38:	cmp	r5, #2
   12c3c:	movne	r1, #0
   12c40:	andeq	r1, r1, #1
   12c44:	cmp	r1, #0
   12c48:	beq	12c80 <__assert_fail@plt+0x1d4c>
   12c4c:	cmp	fp, r7
   12c50:	movhi	ip, #39	; 0x27
   12c54:	strbhi	ip, [r3, r7]
   12c58:	add	ip, r7, #1
   12c5c:	cmp	fp, ip
   12c60:	movhi	lr, #36	; 0x24
   12c64:	strbhi	lr, [r3, ip]
   12c68:	add	ip, r7, #2
   12c6c:	cmp	fp, ip
   12c70:	movhi	lr, #39	; 0x27
   12c74:	strbhi	lr, [r3, ip]
   12c78:	add	r7, r7, #3
   12c7c:	mov	ip, r1
   12c80:	cmp	fp, r7
   12c84:	movhi	r1, #92	; 0x5c
   12c88:	strbhi	r1, [r3, r7]
   12c8c:	add	r1, r7, #1
   12c90:	cmp	fp, r1
   12c94:	lsrhi	lr, r4, #6
   12c98:	addhi	lr, lr, #48	; 0x30
   12c9c:	strbhi	lr, [r3, r1]
   12ca0:	add	lr, r7, #2
   12ca4:	cmp	fp, lr
   12ca8:	lsrhi	r1, r4, #3
   12cac:	andhi	r1, r1, #7
   12cb0:	addhi	r1, r1, #48	; 0x30
   12cb4:	add	sl, sl, #1
   12cb8:	strbhi	r1, [r3, lr]
   12cbc:	and	r4, r4, #7
   12cc0:	cmp	r2, sl
   12cc4:	add	r4, r4, #48	; 0x30
   12cc8:	add	r7, r7, #3
   12ccc:	bls	1302c <__assert_fail@plt+0x20f8>
   12cd0:	mov	r1, r8
   12cd4:	cmp	fp, r7
   12cd8:	strbhi	r4, [r3, r7]
   12cdc:	ldrb	r4, [r0, #1]!
   12ce0:	add	r7, r7, #1
   12ce4:	cmp	r8, #0
   12ce8:	bne	12c2c <__assert_fail@plt+0x1cf8>
   12cec:	cmp	r6, #0
   12cf0:	bne	12d40 <__assert_fail@plt+0x1e0c>
   12cf4:	eor	r6, r1, #1
   12cf8:	and	r6, r6, ip
   12cfc:	add	sl, sl, #1
   12d00:	cmp	r2, sl
   12d04:	uxtb	r6, r6
   12d08:	bls	12d68 <__assert_fail@plt+0x1e34>
   12d0c:	cmp	r6, #0
   12d10:	beq	12cd4 <__assert_fail@plt+0x1da0>
   12d14:	cmp	fp, r7
   12d18:	movhi	ip, #39	; 0x27
   12d1c:	strbhi	ip, [r3, r7]
   12d20:	add	ip, r7, #1
   12d24:	cmp	fp, ip
   12d28:	movhi	lr, #39	; 0x27
   12d2c:	strbhi	lr, [r3, ip]
   12d30:	add	r7, r7, #2
   12d34:	mov	r6, r8
   12d38:	mov	ip, r8
   12d3c:	b	12cd4 <__assert_fail@plt+0x1da0>
   12d40:	cmp	fp, r7
   12d44:	eor	r6, r1, #1
   12d48:	movhi	lr, #92	; 0x5c
   12d4c:	and	r6, r6, ip
   12d50:	add	sl, sl, #1
   12d54:	strbhi	lr, [r3, r7]
   12d58:	cmp	r2, sl
   12d5c:	add	r7, r7, #1
   12d60:	uxtb	r6, r6
   12d64:	bhi	12d0c <__assert_fail@plt+0x1dd8>
   12d68:	str	ip, [sp, #40]	; 0x28
   12d6c:	ldr	r5, [sp, #48]	; 0x30
   12d70:	b	12438 <__assert_fail@plt+0x1504>
   12d74:	ldr	r3, [sp, #24]
   12d78:	cmn	r3, #1
   12d7c:	mov	r3, #0
   12d80:	str	r3, [sp, #104]	; 0x68
   12d84:	str	r3, [sp, #108]	; 0x6c
   12d88:	beq	130a8 <__assert_fail@plt+0x2174>
   12d8c:	mov	r2, r5
   12d90:	mov	r3, #0
   12d94:	str	r7, [sp, #88]	; 0x58
   12d98:	ldr	r7, [sp, #152]	; 0x98
   12d9c:	str	r5, [sp, #92]	; 0x5c
   12da0:	str	r6, [sp, #84]	; 0x54
   12da4:	mov	r5, r3
   12da8:	mov	r6, r2
   12dac:	str	r4, [sp, #80]	; 0x50
   12db0:	ldr	r3, [sp, #56]	; 0x38
   12db4:	add	r9, sl, r5
   12db8:	add	r8, r3, r9
   12dbc:	ldr	r3, [sp, #24]
   12dc0:	mov	r1, r8
   12dc4:	sub	r2, r3, r9
   12dc8:	add	r0, sp, #100	; 0x64
   12dcc:	add	r3, sp, #104	; 0x68
   12dd0:	bl	14f5c <__assert_fail@plt+0x4028>
   12dd4:	subs	r4, r0, #0
   12dd8:	beq	13180 <__assert_fail@plt+0x224c>
   12ddc:	cmn	r4, #1
   12de0:	beq	13160 <__assert_fail@plt+0x222c>
   12de4:	cmn	r4, #2
   12de8:	beq	13100 <__assert_fail@plt+0x21cc>
   12dec:	ldr	r2, [sp, #28]
   12df0:	cmp	r7, #2
   12df4:	movne	r2, #0
   12df8:	andeq	r2, r2, #1
   12dfc:	cmp	r2, #0
   12e00:	beq	12bb0 <__assert_fail@plt+0x1c7c>
   12e04:	cmp	r4, #1
   12e08:	beq	12bb0 <__assert_fail@plt+0x1c7c>
   12e0c:	sub	r3, r4, #1
   12e10:	add	r9, r3, r9
   12e14:	ldr	r3, [sp, #56]	; 0x38
   12e18:	add	r9, r3, r9
   12e1c:	ldrb	r3, [r8, #1]!
   12e20:	sub	r3, r3, #91	; 0x5b
   12e24:	cmp	r3, #33	; 0x21
   12e28:	ldrls	pc, [pc, r3, lsl #2]
   12e2c:	b	12ba8 <__assert_fail@plt+0x1c74>
   12e30:			; <UNDEFINED> instruction: 0x00012eb8
   12e34:			; <UNDEFINED> instruction: 0x00012eb8
   12e38:	andeq	r2, r1, r8, lsr #23
   12e3c:			; <UNDEFINED> instruction: 0x00012eb8
   12e40:	andeq	r2, r1, r8, lsr #23
   12e44:			; <UNDEFINED> instruction: 0x00012eb8
   12e48:	andeq	r2, r1, r8, lsr #23
   12e4c:	andeq	r2, r1, r8, lsr #23
   12e50:	andeq	r2, r1, r8, lsr #23
   12e54:	andeq	r2, r1, r8, lsr #23
   12e58:	andeq	r2, r1, r8, lsr #23
   12e5c:	andeq	r2, r1, r8, lsr #23
   12e60:	andeq	r2, r1, r8, lsr #23
   12e64:	andeq	r2, r1, r8, lsr #23
   12e68:	andeq	r2, r1, r8, lsr #23
   12e6c:	andeq	r2, r1, r8, lsr #23
   12e70:	andeq	r2, r1, r8, lsr #23
   12e74:	andeq	r2, r1, r8, lsr #23
   12e78:	andeq	r2, r1, r8, lsr #23
   12e7c:	andeq	r2, r1, r8, lsr #23
   12e80:	andeq	r2, r1, r8, lsr #23
   12e84:	andeq	r2, r1, r8, lsr #23
   12e88:	andeq	r2, r1, r8, lsr #23
   12e8c:	andeq	r2, r1, r8, lsr #23
   12e90:	andeq	r2, r1, r8, lsr #23
   12e94:	andeq	r2, r1, r8, lsr #23
   12e98:	andeq	r2, r1, r8, lsr #23
   12e9c:	andeq	r2, r1, r8, lsr #23
   12ea0:	andeq	r2, r1, r8, lsr #23
   12ea4:	andeq	r2, r1, r8, lsr #23
   12ea8:	andeq	r2, r1, r8, lsr #23
   12eac:	andeq	r2, r1, r8, lsr #23
   12eb0:	andeq	r2, r1, r8, lsr #23
   12eb4:			; <UNDEFINED> instruction: 0x00012eb8
   12eb8:	mov	r3, #2
   12ebc:	ldr	sl, [sp, #32]
   12ec0:	mov	r8, fp
   12ec4:	str	r3, [sp, #152]	; 0x98
   12ec8:	b	12640 <__assert_fail@plt+0x170c>
   12ecc:	ldr	r3, [sp, #156]	; 0x9c
   12ed0:	tst	r3, #1
   12ed4:	bne	13000 <__assert_fail@plt+0x20cc>
   12ed8:	ldr	r3, [sp, #152]	; 0x98
   12edc:	ldr	r4, [sp, #44]	; 0x2c
   12ee0:	sub	r2, r3, #2
   12ee4:	mov	r5, #0
   12ee8:	clz	r2, r2
   12eec:	mov	r8, r4
   12ef0:	lsr	r2, r2, #5
   12ef4:	b	12400 <__assert_fail@plt+0x14cc>
   12ef8:	ldr	r3, [sp, #156]	; 0x9c
   12efc:	ands	r9, r3, #4
   12f00:	beq	13038 <__assert_fail@plt+0x2104>
   12f04:	ldr	r2, [sp, #24]
   12f08:	add	r3, sl, #2
   12f0c:	cmp	r3, r2
   12f10:	bcs	12f24 <__assert_fail@plt+0x1ff0>
   12f14:	ldr	r2, [sp, #48]	; 0x30
   12f18:	ldrb	r4, [r2, #1]
   12f1c:	cmp	r4, #63	; 0x3f
   12f20:	beq	131c0 <__assert_fail@plt+0x228c>
   12f24:	mov	r2, #0
   12f28:	mov	r8, r2
   12f2c:	mov	r5, r2
   12f30:	mov	r4, #63	; 0x3f
   12f34:	b	12400 <__assert_fail@plt+0x14cc>
   12f38:	ldr	r3, [sp, #28]
   12f3c:	cmp	r3, #0
   12f40:	bne	13264 <__assert_fail@plt+0x2330>
   12f44:	mov	r2, r5
   12f48:	mov	r8, r3
   12f4c:	mov	r5, #0
   12f50:	mov	r4, #63	; 0x3f
   12f54:	b	12400 <__assert_fail@plt+0x14cc>
   12f58:	ldr	r3, [sp, #28]
   12f5c:	cmp	r3, #0
   12f60:	bne	13264 <__assert_fail@plt+0x2330>
   12f64:	ldr	r2, [sp, #72]	; 0x48
   12f68:	adds	r3, fp, #0
   12f6c:	movne	r3, #1
   12f70:	cmp	r2, #0
   12f74:	movne	r3, #0
   12f78:	cmp	r3, #0
   12f7c:	strne	fp, [sp, #72]	; 0x48
   12f80:	movne	fp, #0
   12f84:	bne	12fc0 <__assert_fail@plt+0x208c>
   12f88:	cmp	fp, r7
   12f8c:	movhi	r2, #39	; 0x27
   12f90:	ldrhi	r3, [sp, #32]
   12f94:	strbhi	r2, [r3, r7]
   12f98:	add	r3, r7, #1
   12f9c:	cmp	fp, r3
   12fa0:	movhi	r1, #92	; 0x5c
   12fa4:	ldrhi	r2, [sp, #32]
   12fa8:	strbhi	r1, [r2, r3]
   12fac:	add	r3, r7, #2
   12fb0:	cmp	fp, r3
   12fb4:	movhi	r1, #39	; 0x27
   12fb8:	ldrhi	r2, [sp, #32]
   12fbc:	strbhi	r1, [r2, r3]
   12fc0:	ldr	r3, [sp, #28]
   12fc4:	add	r7, r7, #3
   12fc8:	mov	r2, r5
   12fcc:	mov	r8, r3
   12fd0:	str	r5, [sp, #68]	; 0x44
   12fd4:	str	r3, [sp, #40]	; 0x28
   12fd8:	mov	r4, #39	; 0x27
   12fdc:	b	12400 <__assert_fail@plt+0x14cc>
   12fe0:	ldr	r3, [sp, #56]	; 0x38
   12fe4:	ldrb	r3, [r3, #1]
   12fe8:	adds	r3, r3, #0
   12fec:	movne	r3, #1
   12ff0:	b	123d8 <__assert_fail@plt+0x14a4>
   12ff4:	ldr	r5, [sp, #28]
   12ff8:	mov	r4, #48	; 0x30
   12ffc:	b	12400 <__assert_fail@plt+0x14cc>
   13000:	add	sl, sl, #1
   13004:	b	11f30 <__assert_fail@plt+0xffc>
   13008:	mov	sl, r3
   1300c:	ldr	r3, [sp, #28]
   13010:	mov	r8, fp
   13014:	str	r3, [sp, #44]	; 0x2c
   13018:	ldr	r3, [sp, #152]	; 0x98
   1301c:	sub	r2, r3, #2
   13020:	clz	r2, r2
   13024:	lsr	r2, r2, #5
   13028:	b	12640 <__assert_fail@plt+0x170c>
   1302c:	str	ip, [sp, #40]	; 0x28
   13030:	ldr	r5, [sp, #48]	; 0x30
   13034:	b	12470 <__assert_fail@plt+0x153c>
   13038:	mov	r2, r9
   1303c:	mov	r8, r9
   13040:	mov	r5, #0
   13044:	mov	r4, #63	; 0x3f
   13048:	b	12400 <__assert_fail@plt+0x14cc>
   1304c:	cmp	fp, #0
   13050:	beq	130c8 <__assert_fail@plt+0x2194>
   13054:	ldr	r1, [sp, #32]
   13058:	mov	r3, #34	; 0x22
   1305c:	mov	r2, #1
   13060:	strb	r3, [r1]
   13064:	ldr	r3, [pc, #332]	; 131b8 <__assert_fail@plt+0x2284>
   13068:	str	r2, [sp, #52]	; 0x34
   1306c:	mov	r7, r2
   13070:	str	r2, [sp, #44]	; 0x2c
   13074:	str	r3, [sp, #64]	; 0x40
   13078:	b	11f20 <__assert_fail@plt+0xfec>
   1307c:	ldr	r3, [pc, #300]	; 131b0 <__assert_fail@plt+0x227c>
   13080:	str	r3, [sp, #64]	; 0x40
   13084:	mov	r3, #0
   13088:	str	r3, [sp, #28]
   1308c:	mov	r3, #1
   13090:	str	r3, [sp, #52]	; 0x34
   13094:	mov	r7, r3
   13098:	mov	r3, #2
   1309c:	str	r3, [sp, #152]	; 0x98
   130a0:	b	11f20 <__assert_fail@plt+0xfec>
   130a4:	bl	10f28 <abort@plt>
   130a8:	ldr	r0, [sp, #56]	; 0x38
   130ac:	bl	10e44 <strlen@plt>
   130b0:	str	r0, [sp, #24]
   130b4:	b	12d8c <__assert_fail@plt+0x1e58>
   130b8:	mov	r5, r8
   130bc:	mov	r4, #48	; 0x30
   130c0:	ldr	r8, [sp, #44]	; 0x2c
   130c4:	b	12400 <__assert_fail@plt+0x14cc>
   130c8:	mov	r3, #1
   130cc:	str	r3, [sp, #52]	; 0x34
   130d0:	mov	r7, r3
   130d4:	str	r3, [sp, #44]	; 0x2c
   130d8:	ldr	r3, [pc, #216]	; 131b8 <__assert_fail@plt+0x2284>
   130dc:	str	r3, [sp, #64]	; 0x40
   130e0:	b	11f20 <__assert_fail@plt+0xfec>
   130e4:	ldr	sl, [sp, #32]
   130e8:	mov	r8, fp
   130ec:	mov	r2, r3
   130f0:	b	12640 <__assert_fail@plt+0x170c>
   130f4:	mov	r3, r5
   130f8:	mov	r5, r2
   130fc:	b	128f8 <__assert_fail@plt+0x19c4>
   13100:	ldr	r1, [sp, #24]
   13104:	mov	r2, r5
   13108:	cmp	r1, r9
   1310c:	mov	ip, r5
   13110:	ldr	r4, [sp, #80]	; 0x50
   13114:	ldr	r5, [sp, #92]	; 0x5c
   13118:	ldr	r6, [sp, #84]	; 0x54
   1311c:	ldr	r7, [sp, #88]	; 0x58
   13120:	bls	13154 <__assert_fail@plt+0x2220>
   13124:	ldrb	r3, [r8]
   13128:	cmp	r3, #0
   1312c:	bne	13140 <__assert_fail@plt+0x220c>
   13130:	b	13158 <__assert_fail@plt+0x2224>
   13134:	ldrb	r3, [r8, #1]!
   13138:	cmp	r3, #0
   1313c:	beq	13258 <__assert_fail@plt+0x2324>
   13140:	add	r2, r2, #1
   13144:	add	r3, sl, r2
   13148:	cmp	r1, r3
   1314c:	bhi	13134 <__assert_fail@plt+0x2200>
   13150:	mov	ip, r2
   13154:	mov	r3, #0
   13158:	mov	r2, r3
   1315c:	b	12bf0 <__assert_fail@plt+0x1cbc>
   13160:	mov	r3, #0
   13164:	mov	ip, r5
   13168:	ldr	r4, [sp, #80]	; 0x50
   1316c:	ldr	r5, [sp, #92]	; 0x5c
   13170:	ldr	r6, [sp, #84]	; 0x54
   13174:	ldr	r7, [sp, #88]	; 0x58
   13178:	mov	r2, r3
   1317c:	b	12bf0 <__assert_fail@plt+0x1cbc>
   13180:	mov	r3, r6
   13184:	mov	ip, r5
   13188:	eor	r5, r3, #1
   1318c:	mov	r2, r6
   13190:	ldr	r4, [sp, #80]	; 0x50
   13194:	ldr	r6, [sp, #84]	; 0x54
   13198:	ldr	r7, [sp, #88]	; 0x58
   1319c:	uxtb	r5, r5
   131a0:	b	12bf0 <__assert_fail@plt+0x1cbc>
   131a4:	ldr	sl, [sp, #32]
   131a8:	mov	r8, fp
   131ac:	b	13014 <__assert_fail@plt+0x20e0>
   131b0:	andeq	r5, r1, r0, lsr #25
   131b4:	andeq	r5, r1, r4, lsr #25
   131b8:	muleq	r1, ip, ip
   131bc:	stmdacc	r0, {r0, r6, r7, r8, ip, lr}
   131c0:	ldr	r2, [sp, #56]	; 0x38
   131c4:	ldrb	r1, [r2, r3]
   131c8:	sub	r2, r1, #33	; 0x21
   131cc:	uxtb	r2, r2
   131d0:	cmp	r2, #29
   131d4:	bhi	13274 <__assert_fail@plt+0x2340>
   131d8:	ldr	r0, [pc, #-36]	; 131bc <__assert_fail@plt+0x2288>
   131dc:	mov	ip, #1
   131e0:	ands	r2, r0, ip, lsl r2
   131e4:	beq	13284 <__assert_fail@plt+0x2350>
   131e8:	ldr	r2, [sp, #28]
   131ec:	cmp	r2, #0
   131f0:	bne	13384 <__assert_fail@plt+0x2450>
   131f4:	cmp	fp, r7
   131f8:	ldr	r8, [sp, #28]
   131fc:	ldrhi	r2, [sp, #32]
   13200:	mov	sl, r3
   13204:	mov	r5, r8
   13208:	strbhi	r4, [r2, r7]
   1320c:	add	r2, r7, #1
   13210:	cmp	fp, r2
   13214:	movhi	r0, #34	; 0x22
   13218:	ldrhi	ip, [sp, #32]
   1321c:	mov	r4, r1
   13220:	strbhi	r0, [ip, r2]
   13224:	add	r2, r7, #2
   13228:	cmp	fp, r2
   1322c:	movhi	r0, #34	; 0x22
   13230:	ldrhi	ip, [sp, #32]
   13234:	strbhi	r0, [ip, r2]
   13238:	add	r2, r7, #3
   1323c:	cmp	fp, r2
   13240:	movhi	r0, #63	; 0x3f
   13244:	ldrhi	ip, [sp, #32]
   13248:	add	r7, r7, #4
   1324c:	strbhi	r0, [ip, r2]
   13250:	mov	r2, r8
   13254:	b	12400 <__assert_fail@plt+0x14cc>
   13258:	mov	ip, r2
   1325c:	mov	r2, r3
   13260:	b	12bf0 <__assert_fail@plt+0x1cbc>
   13264:	ldr	sl, [sp, #32]
   13268:	mov	r8, fp
   1326c:	ldr	r2, [sp, #28]
   13270:	b	12640 <__assert_fail@plt+0x170c>
   13274:	mov	r2, #0
   13278:	mov	r8, r2
   1327c:	mov	r5, r2
   13280:	b	12400 <__assert_fail@plt+0x14cc>
   13284:	mov	r8, r2
   13288:	mov	r5, #0
   1328c:	b	12400 <__assert_fail@plt+0x14cc>
   13290:	ldr	r1, [sp, #152]	; 0x98
   13294:	bl	11d5c <__assert_fail@plt+0xe28>
   13298:	str	r0, [sp, #168]	; 0xa8
   1329c:	b	122bc <__assert_fail@plt+0x1388>
   132a0:	ldr	r1, [sp, #152]	; 0x98
   132a4:	bl	11d5c <__assert_fail@plt+0xe28>
   132a8:	str	r0, [sp, #164]	; 0xa4
   132ac:	b	1229c <__assert_fail@plt+0x1368>
   132b0:	ldr	r7, [sp, #28]
   132b4:	b	122fc <__assert_fail@plt+0x13c8>
   132b8:	ldr	sl, [sp, #32]
   132bc:	ldr	r2, [sp, #68]	; 0x44
   132c0:	mov	r8, fp
   132c4:	mov	fp, r7
   132c8:	ldr	r3, [sp, #64]	; 0x40
   132cc:	cmp	r3, #0
   132d0:	moveq	r2, #0
   132d4:	andne	r2, r2, #1
   132d8:	cmp	r2, #0
   132dc:	beq	13308 <__assert_fail@plt+0x23d4>
   132e0:	mov	r2, r3
   132e4:	ldrb	r3, [r3]
   132e8:	cmp	r3, #0
   132ec:	beq	13308 <__assert_fail@plt+0x23d4>
   132f0:	cmp	r8, fp
   132f4:	strbhi	r3, [sl, fp]
   132f8:	ldrb	r3, [r2, #1]!
   132fc:	add	fp, fp, #1
   13300:	cmp	r3, #0
   13304:	bne	132f0 <__assert_fail@plt+0x23bc>
   13308:	cmp	r8, fp
   1330c:	movhi	r3, #0
   13310:	strbhi	r3, [sl, fp]
   13314:	b	1269c <__assert_fail@plt+0x1768>
   13318:	ldr	r3, [sp, #168]	; 0xa8
   1331c:	ldr	sl, [sp, #32]
   13320:	str	r3, [sp, #16]
   13324:	ldr	r3, [sp, #164]	; 0xa4
   13328:	mov	ip, #5
   1332c:	str	r3, [sp, #12]
   13330:	ldr	r3, [sp, #160]	; 0xa0
   13334:	ldr	r2, [sp, #56]	; 0x38
   13338:	str	r3, [sp, #8]
   1333c:	ldr	r3, [sp, #156]	; 0x9c
   13340:	ldr	r1, [sp, #72]	; 0x48
   13344:	str	r3, [sp, #4]
   13348:	mov	r0, sl
   1334c:	ldr	r3, [sp, #24]
   13350:	str	ip, [sp]
   13354:	bl	11e7c <__assert_fail@plt+0xf48>
   13358:	mov	fp, r0
   1335c:	b	1269c <__assert_fail@plt+0x1768>
   13360:	mov	r8, fp
   13364:	ldr	sl, [sp, #32]
   13368:	mov	fp, r7
   1336c:	mov	r2, r3
   13370:	b	132c8 <__assert_fail@plt+0x2394>
   13374:	mov	r8, fp
   13378:	ldr	sl, [sp, #32]
   1337c:	mov	fp, r7
   13380:	b	132c8 <__assert_fail@plt+0x2394>
   13384:	ldr	sl, [sp, #32]
   13388:	mov	r8, fp
   1338c:	b	12658 <__assert_fail@plt+0x1724>
   13390:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13394:	sub	sp, sp, #52	; 0x34
   13398:	mov	r4, r0
   1339c:	mov	r5, r3
   133a0:	mov	sl, r1
   133a4:	mov	fp, r2
   133a8:	bl	10e5c <__errno_location@plt>
   133ac:	ldr	r7, [pc, #412]	; 13550 <__assert_fail@plt+0x261c>
   133b0:	cmn	r4, #-2147483647	; 0x80000001
   133b4:	ldr	r6, [r7]
   133b8:	mov	r8, r0
   133bc:	movne	r0, #0
   133c0:	moveq	r0, #1
   133c4:	ldr	r3, [r8]
   133c8:	orrs	r0, r0, r4, lsr #31
   133cc:	str	r3, [sp, #24]
   133d0:	bne	1354c <__assert_fail@plt+0x2618>
   133d4:	ldr	r2, [r7, #4]
   133d8:	cmp	r4, r2
   133dc:	blt	1343c <__assert_fail@plt+0x2508>
   133e0:	add	r9, r7, #8
   133e4:	cmp	r6, r9
   133e8:	str	r2, [sp, #44]	; 0x2c
   133ec:	beq	1351c <__assert_fail@plt+0x25e8>
   133f0:	mov	r3, #8
   133f4:	sub	r2, r4, r2
   133f8:	mov	r0, r6
   133fc:	str	r3, [sp]
   13400:	add	r2, r2, #1
   13404:	mvn	r3, #-2147483648	; 0x80000000
   13408:	add	r1, sp, #44	; 0x2c
   1340c:	bl	141fc <__assert_fail@plt+0x32c8>
   13410:	mov	r6, r0
   13414:	str	r0, [r7]
   13418:	ldr	r0, [r7, #4]
   1341c:	ldr	r2, [sp, #44]	; 0x2c
   13420:	mov	r1, #0
   13424:	sub	r2, r2, r0
   13428:	add	r0, r6, r0, lsl #3
   1342c:	lsl	r2, r2, #3
   13430:	bl	10e74 <memset@plt>
   13434:	ldr	r3, [sp, #44]	; 0x2c
   13438:	str	r3, [r7, #4]
   1343c:	add	r3, r6, r4, lsl #3
   13440:	ldr	r1, [r5, #4]
   13444:	ldr	r7, [r3, #4]
   13448:	ldr	r9, [r6, r4, lsl #3]
   1344c:	ldr	r2, [r5, #40]	; 0x28
   13450:	ldr	ip, [r5, #44]	; 0x2c
   13454:	add	r0, r5, #8
   13458:	str	r3, [sp, #28]
   1345c:	ldr	r3, [r5]
   13460:	orr	r1, r1, #1
   13464:	mov	lr, r0
   13468:	str	r1, [sp, #32]
   1346c:	str	r0, [sp, #36]	; 0x24
   13470:	str	r1, [sp, #4]
   13474:	str	r2, [sp, #12]
   13478:	str	r3, [sp]
   1347c:	mov	r0, r7
   13480:	mov	r1, r9
   13484:	str	ip, [sp, #16]
   13488:	str	lr, [sp, #8]
   1348c:	mov	r3, fp
   13490:	mov	r2, sl
   13494:	bl	11e7c <__assert_fail@plt+0xf48>
   13498:	cmp	r9, r0
   1349c:	bhi	13508 <__assert_fail@plt+0x25d4>
   134a0:	ldr	r3, [pc, #172]	; 13554 <__assert_fail@plt+0x2620>
   134a4:	add	r9, r0, #1
   134a8:	cmp	r7, r3
   134ac:	str	r9, [r6, r4, lsl #3]
   134b0:	beq	134bc <__assert_fail@plt+0x2588>
   134b4:	mov	r0, r7
   134b8:	bl	14ed0 <__assert_fail@plt+0x3f9c>
   134bc:	mov	r0, r9
   134c0:	bl	14098 <__assert_fail@plt+0x3164>
   134c4:	ldr	lr, [sp, #28]
   134c8:	ldr	ip, [r5, #44]	; 0x2c
   134cc:	ldr	r4, [r5, #40]	; 0x28
   134d0:	mov	r3, fp
   134d4:	mov	r2, sl
   134d8:	mov	r1, r9
   134dc:	str	r0, [lr, #4]
   134e0:	ldr	lr, [r5]
   134e4:	ldr	r5, [sp, #36]	; 0x24
   134e8:	str	ip, [sp, #16]
   134ec:	str	r5, [sp, #8]
   134f0:	ldr	r5, [sp, #32]
   134f4:	str	r4, [sp, #12]
   134f8:	str	r5, [sp, #4]
   134fc:	str	lr, [sp]
   13500:	mov	r7, r0
   13504:	bl	11e7c <__assert_fail@plt+0xf48>
   13508:	ldr	r3, [sp, #24]
   1350c:	mov	r0, r7
   13510:	str	r3, [r8]
   13514:	add	sp, sp, #52	; 0x34
   13518:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1351c:	mov	r3, #8
   13520:	sub	r2, r4, r2
   13524:	str	r3, [sp]
   13528:	add	r1, sp, #44	; 0x2c
   1352c:	add	r2, r2, #1
   13530:	mvn	r3, #-2147483648	; 0x80000000
   13534:	bl	141fc <__assert_fail@plt+0x32c8>
   13538:	mov	r6, r0
   1353c:	ldm	r9, {r0, r1}
   13540:	str	r6, [r7]
   13544:	stm	r6, {r0, r1}
   13548:	b	13418 <__assert_fail@plt+0x24e4>
   1354c:	bl	10f28 <abort@plt>
   13550:	strdeq	r7, [r2], -r4
   13554:	andeq	r7, r2, ip, ror r1
   13558:	push	{r4, r5, r6, lr}
   1355c:	mov	r5, r0
   13560:	bl	10e5c <__errno_location@plt>
   13564:	cmp	r5, #0
   13568:	mov	r1, #48	; 0x30
   1356c:	mov	r4, r0
   13570:	ldr	r0, [pc, #16]	; 13588 <__assert_fail@plt+0x2654>
   13574:	ldr	r6, [r4]
   13578:	movne	r0, r5
   1357c:	bl	144f8 <__assert_fail@plt+0x35c4>
   13580:	str	r6, [r4]
   13584:	pop	{r4, r5, r6, pc}
   13588:	andeq	r7, r2, ip, ror r2
   1358c:	ldr	r3, [pc, #12]	; 135a0 <__assert_fail@plt+0x266c>
   13590:	cmp	r0, #0
   13594:	moveq	r0, r3
   13598:	ldr	r0, [r0]
   1359c:	bx	lr
   135a0:	andeq	r7, r2, ip, ror r2
   135a4:	ldr	r3, [pc, #12]	; 135b8 <__assert_fail@plt+0x2684>
   135a8:	cmp	r0, #0
   135ac:	moveq	r0, r3
   135b0:	str	r1, [r0]
   135b4:	bx	lr
   135b8:	andeq	r7, r2, ip, ror r2
   135bc:	ldr	r3, [pc, #52]	; 135f8 <__assert_fail@plt+0x26c4>
   135c0:	cmp	r0, #0
   135c4:	moveq	r0, r3
   135c8:	add	r3, r0, #8
   135cc:	push	{lr}		; (str lr, [sp, #-4]!)
   135d0:	lsr	lr, r1, #5
   135d4:	and	r1, r1, #31
   135d8:	ldr	ip, [r3, lr, lsl #2]
   135dc:	lsr	r0, ip, r1
   135e0:	eor	r2, r2, r0
   135e4:	and	r2, r2, #1
   135e8:	and	r0, r0, #1
   135ec:	eor	r1, ip, r2, lsl r1
   135f0:	str	r1, [r3, lr, lsl #2]
   135f4:	pop	{pc}		; (ldr pc, [sp], #4)
   135f8:	andeq	r7, r2, ip, ror r2
   135fc:	ldr	r3, [pc, #16]	; 13614 <__assert_fail@plt+0x26e0>
   13600:	cmp	r0, #0
   13604:	movne	r3, r0
   13608:	ldr	r0, [r3, #4]
   1360c:	str	r1, [r3, #4]
   13610:	bx	lr
   13614:	andeq	r7, r2, ip, ror r2
   13618:	ldr	r3, [pc, #44]	; 1364c <__assert_fail@plt+0x2718>
   1361c:	cmp	r0, #0
   13620:	moveq	r0, r3
   13624:	mov	ip, #10
   13628:	cmp	r2, #0
   1362c:	cmpne	r1, #0
   13630:	str	ip, [r0]
   13634:	beq	13644 <__assert_fail@plt+0x2710>
   13638:	str	r1, [r0, #40]	; 0x28
   1363c:	str	r2, [r0, #44]	; 0x2c
   13640:	bx	lr
   13644:	push	{r4, lr}
   13648:	bl	10f28 <abort@plt>
   1364c:	andeq	r7, r2, ip, ror r2
   13650:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   13654:	sub	sp, sp, #24
   13658:	ldr	ip, [pc, #108]	; 136cc <__assert_fail@plt+0x2798>
   1365c:	ldr	r4, [sp, #56]	; 0x38
   13660:	mov	r9, r2
   13664:	cmp	r4, #0
   13668:	moveq	r4, ip
   1366c:	mov	sl, r3
   13670:	mov	r7, r0
   13674:	mov	r8, r1
   13678:	bl	10e5c <__errno_location@plt>
   1367c:	ldr	r3, [r4, #44]	; 0x2c
   13680:	mov	r1, r8
   13684:	ldr	r6, [r0]
   13688:	str	r3, [sp, #16]
   1368c:	ldr	r2, [r4, #40]	; 0x28
   13690:	add	r3, r4, #8
   13694:	str	r3, [sp, #8]
   13698:	str	r2, [sp, #12]
   1369c:	ldr	r2, [r4, #4]
   136a0:	mov	r5, r0
   136a4:	str	r2, [sp, #4]
   136a8:	ldr	ip, [r4]
   136ac:	mov	r3, sl
   136b0:	mov	r2, r9
   136b4:	mov	r0, r7
   136b8:	str	ip, [sp]
   136bc:	bl	11e7c <__assert_fail@plt+0xf48>
   136c0:	str	r6, [r5]
   136c4:	add	sp, sp, #24
   136c8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   136cc:	andeq	r7, r2, ip, ror r2
   136d0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   136d4:	cmp	r3, #0
   136d8:	sub	sp, sp, #44	; 0x2c
   136dc:	ldr	r4, [pc, #192]	; 137a4 <__assert_fail@plt+0x2870>
   136e0:	mov	r6, r2
   136e4:	movne	r4, r3
   136e8:	mov	r9, r1
   136ec:	mov	r8, r0
   136f0:	bl	10e5c <__errno_location@plt>
   136f4:	ldr	r3, [r4, #44]	; 0x2c
   136f8:	ldr	r5, [r4, #4]
   136fc:	add	sl, r4, #8
   13700:	cmp	r6, #0
   13704:	orreq	r5, r5, #1
   13708:	mov	r1, #0
   1370c:	ldr	r2, [r0]
   13710:	str	r3, [sp, #16]
   13714:	ldr	r3, [r4, #40]	; 0x28
   13718:	stmib	sp, {r5, sl}
   1371c:	str	r3, [sp, #12]
   13720:	ldr	r3, [r4]
   13724:	mov	r7, r0
   13728:	str	r2, [sp, #28]
   1372c:	str	r3, [sp]
   13730:	mov	r2, r8
   13734:	mov	r3, r9
   13738:	mov	r0, r1
   1373c:	bl	11e7c <__assert_fail@plt+0xf48>
   13740:	add	r1, r0, #1
   13744:	mov	fp, r0
   13748:	mov	r0, r1
   1374c:	str	r1, [sp, #36]	; 0x24
   13750:	bl	14098 <__assert_fail@plt+0x3164>
   13754:	ldr	r3, [r4, #44]	; 0x2c
   13758:	mov	r2, r8
   1375c:	str	r3, [sp, #16]
   13760:	ldr	r3, [r4, #40]	; 0x28
   13764:	str	r5, [sp, #4]
   13768:	str	r3, [sp, #12]
   1376c:	str	sl, [sp, #8]
   13770:	ldr	ip, [r4]
   13774:	ldr	r1, [sp, #36]	; 0x24
   13778:	mov	r3, r9
   1377c:	str	ip, [sp]
   13780:	str	r0, [sp, #32]
   13784:	bl	11e7c <__assert_fail@plt+0xf48>
   13788:	ldr	r2, [sp, #28]
   1378c:	cmp	r6, #0
   13790:	str	r2, [r7]
   13794:	ldr	r0, [sp, #32]
   13798:	strne	fp, [r6]
   1379c:	add	sp, sp, #44	; 0x2c
   137a0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   137a4:	andeq	r7, r2, ip, ror r2
   137a8:	mov	r3, r2
   137ac:	mov	r2, #0
   137b0:	b	136d0 <__assert_fail@plt+0x279c>
   137b4:	push	{r4, r5, r6, r7, r8, lr}
   137b8:	ldr	r6, [pc, #116]	; 13834 <__assert_fail@plt+0x2900>
   137bc:	ldr	r3, [r6, #4]
   137c0:	ldr	r7, [r6]
   137c4:	cmp	r3, #1
   137c8:	movgt	r5, r7
   137cc:	movgt	r4, #1
   137d0:	ble	137f0 <__assert_fail@plt+0x28bc>
   137d4:	ldr	r0, [r5, #12]
   137d8:	bl	14ed0 <__assert_fail@plt+0x3f9c>
   137dc:	ldr	r3, [r6, #4]
   137e0:	add	r4, r4, #1
   137e4:	cmp	r3, r4
   137e8:	add	r5, r5, #8
   137ec:	bgt	137d4 <__assert_fail@plt+0x28a0>
   137f0:	ldr	r0, [r7, #4]
   137f4:	ldr	r4, [pc, #60]	; 13838 <__assert_fail@plt+0x2904>
   137f8:	cmp	r0, r4
   137fc:	beq	13810 <__assert_fail@plt+0x28dc>
   13800:	bl	14ed0 <__assert_fail@plt+0x3f9c>
   13804:	mov	r3, #256	; 0x100
   13808:	str	r4, [r6, #12]
   1380c:	str	r3, [r6, #8]
   13810:	ldr	r4, [pc, #36]	; 1383c <__assert_fail@plt+0x2908>
   13814:	cmp	r7, r4
   13818:	beq	13828 <__assert_fail@plt+0x28f4>
   1381c:	mov	r0, r7
   13820:	bl	14ed0 <__assert_fail@plt+0x3f9c>
   13824:	str	r4, [r6]
   13828:	mov	r3, #1
   1382c:	str	r3, [r6, #4]
   13830:	pop	{r4, r5, r6, r7, r8, pc}
   13834:	strdeq	r7, [r2], -r4
   13838:	andeq	r7, r2, ip, ror r1
   1383c:	strdeq	r7, [r2], -ip
   13840:	ldr	r3, [pc, #4]	; 1384c <__assert_fail@plt+0x2918>
   13844:	mvn	r2, #0
   13848:	b	13390 <__assert_fail@plt+0x245c>
   1384c:	andeq	r7, r2, ip, ror r2
   13850:	ldr	r3, [pc]	; 13858 <__assert_fail@plt+0x2924>
   13854:	b	13390 <__assert_fail@plt+0x245c>
   13858:	andeq	r7, r2, ip, ror r2
   1385c:	mov	r1, r0
   13860:	ldr	r3, [pc, #8]	; 13870 <__assert_fail@plt+0x293c>
   13864:	mvn	r2, #0
   13868:	mov	r0, #0
   1386c:	b	13390 <__assert_fail@plt+0x245c>
   13870:	andeq	r7, r2, ip, ror r2
   13874:	mov	r2, r1
   13878:	ldr	r3, [pc, #8]	; 13888 <__assert_fail@plt+0x2954>
   1387c:	mov	r1, r0
   13880:	mov	r0, #0
   13884:	b	13390 <__assert_fail@plt+0x245c>
   13888:	andeq	r7, r2, ip, ror r2
   1388c:	push	{r4, r5, lr}
   13890:	sub	sp, sp, #52	; 0x34
   13894:	mov	r5, r2
   13898:	mov	r4, r0
   1389c:	mov	r0, sp
   138a0:	bl	11d2c <__assert_fail@plt+0xdf8>
   138a4:	mov	r3, sp
   138a8:	mov	r1, r5
   138ac:	mov	r0, r4
   138b0:	mvn	r2, #0
   138b4:	bl	13390 <__assert_fail@plt+0x245c>
   138b8:	add	sp, sp, #52	; 0x34
   138bc:	pop	{r4, r5, pc}
   138c0:	push	{r4, r5, r6, lr}
   138c4:	sub	sp, sp, #48	; 0x30
   138c8:	mov	r5, r2
   138cc:	mov	r6, r3
   138d0:	mov	r4, r0
   138d4:	mov	r0, sp
   138d8:	bl	11d2c <__assert_fail@plt+0xdf8>
   138dc:	mov	r3, sp
   138e0:	mov	r2, r6
   138e4:	mov	r1, r5
   138e8:	mov	r0, r4
   138ec:	bl	13390 <__assert_fail@plt+0x245c>
   138f0:	add	sp, sp, #48	; 0x30
   138f4:	pop	{r4, r5, r6, pc}
   138f8:	mov	r2, r1
   138fc:	mov	r1, r0
   13900:	mov	r0, #0
   13904:	b	1388c <__assert_fail@plt+0x2958>
   13908:	mov	r3, r2
   1390c:	mov	r2, r1
   13910:	mov	r1, r0
   13914:	mov	r0, #0
   13918:	b	138c0 <__assert_fail@plt+0x298c>
   1391c:	push	{r4, r5, r6, r7, r8, lr}
   13920:	mov	r7, r0
   13924:	ldr	lr, [pc, #100]	; 13990 <__assert_fail@plt+0x2a5c>
   13928:	mov	r8, r1
   1392c:	mov	r4, r2
   13930:	ldm	lr!, {r0, r1, r2, r3}
   13934:	sub	sp, sp, #48	; 0x30
   13938:	mov	ip, sp
   1393c:	lsr	r5, r4, #5
   13940:	stmia	ip!, {r0, r1, r2, r3}
   13944:	add	r6, sp, #8
   13948:	ldm	lr!, {r0, r1, r2, r3}
   1394c:	and	r4, r4, #31
   13950:	stmia	ip!, {r0, r1, r2, r3}
   13954:	ldm	lr, {r0, r1, r2, r3}
   13958:	stm	ip, {r0, r1, r2, r3}
   1395c:	mov	r2, r8
   13960:	ldr	lr, [r6, r5, lsl #2]
   13964:	mov	r1, r7
   13968:	mov	r3, sp
   1396c:	lsr	ip, lr, r4
   13970:	eor	ip, ip, #1
   13974:	and	ip, ip, #1
   13978:	mov	r0, #0
   1397c:	eor	r4, lr, ip, lsl r4
   13980:	str	r4, [r6, r5, lsl #2]
   13984:	bl	13390 <__assert_fail@plt+0x245c>
   13988:	add	sp, sp, #48	; 0x30
   1398c:	pop	{r4, r5, r6, r7, r8, pc}
   13990:	andeq	r7, r2, ip, ror r2
   13994:	mov	r2, r1
   13998:	mvn	r1, #0
   1399c:	b	1391c <__assert_fail@plt+0x29e8>
   139a0:	mov	r2, #58	; 0x3a
   139a4:	mvn	r1, #0
   139a8:	b	1391c <__assert_fail@plt+0x29e8>
   139ac:	mov	r2, #58	; 0x3a
   139b0:	b	1391c <__assert_fail@plt+0x29e8>
   139b4:	push	{r4, r5, r6, r7, lr}
   139b8:	sub	sp, sp, #100	; 0x64
   139bc:	mov	r6, r0
   139c0:	mov	r0, sp
   139c4:	mov	r7, r2
   139c8:	bl	11d2c <__assert_fail@plt+0xdf8>
   139cc:	mov	ip, sp
   139d0:	add	lr, sp, #48	; 0x30
   139d4:	ldm	ip!, {r0, r1, r2, r3}
   139d8:	stmia	lr!, {r0, r1, r2, r3}
   139dc:	ldm	ip!, {r0, r1, r2, r3}
   139e0:	ldr	r5, [sp, #60]	; 0x3c
   139e4:	stmia	lr!, {r0, r1, r2, r3}
   139e8:	mvn	r4, r5
   139ec:	ldm	ip, {r0, r1, r2, r3}
   139f0:	and	ip, r4, #67108864	; 0x4000000
   139f4:	eor	ip, ip, r5
   139f8:	str	ip, [sp, #60]	; 0x3c
   139fc:	stm	lr, {r0, r1, r2, r3}
   13a00:	mov	r1, r7
   13a04:	mov	r0, r6
   13a08:	add	r3, sp, #48	; 0x30
   13a0c:	mvn	r2, #0
   13a10:	bl	13390 <__assert_fail@plt+0x245c>
   13a14:	add	sp, sp, #100	; 0x64
   13a18:	pop	{r4, r5, r6, r7, pc}
   13a1c:	push	{r4, r5, r6, r7, r8, lr}
   13a20:	mov	r5, r1
   13a24:	ldr	lr, [pc, #100]	; 13a90 <__assert_fail@plt+0x2b5c>
   13a28:	mov	r4, r2
   13a2c:	mov	r7, r0
   13a30:	mov	r8, r3
   13a34:	ldm	lr!, {r0, r1, r2, r3}
   13a38:	sub	sp, sp, #48	; 0x30
   13a3c:	mov	ip, sp
   13a40:	mov	r6, #10
   13a44:	stmia	ip!, {r0, r1, r2, r3}
   13a48:	cmp	r4, #0
   13a4c:	cmpne	r5, #0
   13a50:	ldm	lr!, {r0, r1, r2, r3}
   13a54:	str	r6, [sp]
   13a58:	stmia	ip!, {r0, r1, r2, r3}
   13a5c:	ldm	lr, {r0, r1, r2, r3}
   13a60:	stm	ip, {r0, r1, r2, r3}
   13a64:	beq	13a8c <__assert_fail@plt+0x2b58>
   13a68:	mov	r3, sp
   13a6c:	mov	r1, r8
   13a70:	mov	r0, r7
   13a74:	ldr	r2, [sp, #72]	; 0x48
   13a78:	str	r5, [sp, #40]	; 0x28
   13a7c:	str	r4, [sp, #44]	; 0x2c
   13a80:	bl	13390 <__assert_fail@plt+0x245c>
   13a84:	add	sp, sp, #48	; 0x30
   13a88:	pop	{r4, r5, r6, r7, r8, pc}
   13a8c:	bl	10f28 <abort@plt>
   13a90:	andeq	r7, r2, ip, ror r2
   13a94:	push	{lr}		; (str lr, [sp, #-4]!)
   13a98:	sub	sp, sp, #12
   13a9c:	mvn	ip, #0
   13aa0:	str	ip, [sp]
   13aa4:	bl	13a1c <__assert_fail@plt+0x2ae8>
   13aa8:	add	sp, sp, #12
   13aac:	pop	{pc}		; (ldr pc, [sp], #4)
   13ab0:	push	{lr}		; (str lr, [sp, #-4]!)
   13ab4:	sub	sp, sp, #12
   13ab8:	mvn	ip, #0
   13abc:	mov	r3, r2
   13ac0:	str	ip, [sp]
   13ac4:	mov	r2, r1
   13ac8:	mov	r1, r0
   13acc:	mov	r0, #0
   13ad0:	bl	13a1c <__assert_fail@plt+0x2ae8>
   13ad4:	add	sp, sp, #12
   13ad8:	pop	{pc}		; (ldr pc, [sp], #4)
   13adc:	push	{lr}		; (str lr, [sp, #-4]!)
   13ae0:	sub	sp, sp, #12
   13ae4:	str	r3, [sp]
   13ae8:	mov	r3, r2
   13aec:	mov	r2, r1
   13af0:	mov	r1, r0
   13af4:	mov	r0, #0
   13af8:	bl	13a1c <__assert_fail@plt+0x2ae8>
   13afc:	add	sp, sp, #12
   13b00:	pop	{pc}		; (ldr pc, [sp], #4)
   13b04:	ldr	r3, [pc]	; 13b0c <__assert_fail@plt+0x2bd8>
   13b08:	b	13390 <__assert_fail@plt+0x245c>
   13b0c:	andeq	r7, r2, r4, lsl #2
   13b10:	mov	r2, r1
   13b14:	ldr	r3, [pc, #8]	; 13b24 <__assert_fail@plt+0x2bf0>
   13b18:	mov	r1, r0
   13b1c:	mov	r0, #0
   13b20:	b	13390 <__assert_fail@plt+0x245c>
   13b24:	andeq	r7, r2, r4, lsl #2
   13b28:	ldr	r3, [pc, #4]	; 13b34 <__assert_fail@plt+0x2c00>
   13b2c:	mvn	r2, #0
   13b30:	b	13390 <__assert_fail@plt+0x245c>
   13b34:	andeq	r7, r2, r4, lsl #2
   13b38:	mov	r1, r0
   13b3c:	ldr	r3, [pc, #8]	; 13b4c <__assert_fail@plt+0x2c18>
   13b40:	mvn	r2, #0
   13b44:	mov	r0, #0
   13b48:	b	13390 <__assert_fail@plt+0x245c>
   13b4c:	andeq	r7, r2, r4, lsl #2
   13b50:	push	{r4, r5, r6, lr}
   13b54:	sub	sp, sp, #32
   13b58:	cmp	r1, #0
   13b5c:	mov	r4, r0
   13b60:	ldr	r5, [sp, #48]	; 0x30
   13b64:	ldr	r6, [sp, #52]	; 0x34
   13b68:	beq	13e80 <__assert_fail@plt+0x2f4c>
   13b6c:	stm	sp, {r2, r3}
   13b70:	mov	r3, r1
   13b74:	ldr	r2, [pc, #808]	; 13ea4 <__assert_fail@plt+0x2f70>
   13b78:	mov	r1, #1
   13b7c:	bl	10e98 <__fprintf_chk@plt>
   13b80:	mov	r2, #5
   13b84:	ldr	r1, [pc, #796]	; 13ea8 <__assert_fail@plt+0x2f74>
   13b88:	mov	r0, #0
   13b8c:	bl	10d78 <dcgettext@plt>
   13b90:	ldr	r3, [pc, #788]	; 13eac <__assert_fail@plt+0x2f78>
   13b94:	ldr	r2, [pc, #788]	; 13eb0 <__assert_fail@plt+0x2f7c>
   13b98:	str	r3, [sp]
   13b9c:	mov	r1, #1
   13ba0:	mov	r3, r0
   13ba4:	mov	r0, r4
   13ba8:	bl	10e98 <__fprintf_chk@plt>
   13bac:	mov	r1, r4
   13bb0:	mov	r0, #10
   13bb4:	bl	10d6c <fputc_unlocked@plt>
   13bb8:	mov	r2, #5
   13bbc:	ldr	r1, [pc, #752]	; 13eb4 <__assert_fail@plt+0x2f80>
   13bc0:	mov	r0, #0
   13bc4:	bl	10d78 <dcgettext@plt>
   13bc8:	mov	r1, #1
   13bcc:	ldr	r3, [pc, #740]	; 13eb8 <__assert_fail@plt+0x2f84>
   13bd0:	mov	r2, r0
   13bd4:	mov	r0, r4
   13bd8:	bl	10e98 <__fprintf_chk@plt>
   13bdc:	mov	r1, r4
   13be0:	mov	r0, #10
   13be4:	bl	10d6c <fputc_unlocked@plt>
   13be8:	cmp	r6, #9
   13bec:	ldrls	pc, [pc, r6, lsl #2]
   13bf0:	b	13e98 <__assert_fail@plt+0x2f64>
   13bf4:	andeq	r3, r1, r8, ror ip
   13bf8:	andeq	r3, r1, r0, lsl #25
   13bfc:	andeq	r3, r1, ip, lsr #25
   13c00:	andeq	r3, r1, r0, ror #25
   13c04:	andeq	r3, r1, ip, lsl sp
   13c08:	andeq	r3, r1, r8, asr sp
   13c0c:	muleq	r1, r4, sp
   13c10:	ldrdeq	r3, [r1], -r8
   13c14:	andeq	r3, r1, r8, lsr #28
   13c18:	andeq	r3, r1, ip, lsl ip
   13c1c:	ldr	r1, [pc, #664]	; 13ebc <__assert_fail@plt+0x2f88>
   13c20:	mov	r2, #5
   13c24:	mov	r0, #0
   13c28:	bl	10d78 <dcgettext@plt>
   13c2c:	ldr	ip, [r5, #32]
   13c30:	ldr	r1, [r5, #28]
   13c34:	ldr	r2, [r5, #24]
   13c38:	ldr	r3, [r5]
   13c3c:	ldr	r6, [r5, #20]
   13c40:	str	ip, [sp, #28]
   13c44:	ldr	lr, [r5, #16]
   13c48:	str	r1, [sp, #24]
   13c4c:	ldr	ip, [r5, #12]
   13c50:	str	r2, [sp, #20]
   13c54:	ldr	r1, [r5, #8]
   13c58:	ldr	r2, [r5, #4]
   13c5c:	str	r6, [sp, #16]
   13c60:	stmib	sp, {r1, ip, lr}
   13c64:	mov	r1, #1
   13c68:	str	r2, [sp]
   13c6c:	mov	r2, r0
   13c70:	mov	r0, r4
   13c74:	bl	10e98 <__fprintf_chk@plt>
   13c78:	add	sp, sp, #32
   13c7c:	pop	{r4, r5, r6, pc}
   13c80:	mov	r2, #5
   13c84:	ldr	r1, [pc, #564]	; 13ec0 <__assert_fail@plt+0x2f8c>
   13c88:	mov	r0, #0
   13c8c:	bl	10d78 <dcgettext@plt>
   13c90:	ldr	r3, [r5]
   13c94:	mov	r1, #1
   13c98:	mov	r2, r0
   13c9c:	mov	r0, r4
   13ca0:	add	sp, sp, #32
   13ca4:	pop	{r4, r5, r6, lr}
   13ca8:	b	10e98 <__fprintf_chk@plt>
   13cac:	mov	r2, #5
   13cb0:	ldr	r1, [pc, #524]	; 13ec4 <__assert_fail@plt+0x2f90>
   13cb4:	mov	r0, #0
   13cb8:	bl	10d78 <dcgettext@plt>
   13cbc:	ldr	r2, [r5, #4]
   13cc0:	ldr	r3, [r5]
   13cc4:	mov	r1, #1
   13cc8:	str	r2, [sp, #48]	; 0x30
   13ccc:	mov	r2, r0
   13cd0:	mov	r0, r4
   13cd4:	add	sp, sp, #32
   13cd8:	pop	{r4, r5, r6, lr}
   13cdc:	b	10e98 <__fprintf_chk@plt>
   13ce0:	mov	r2, #5
   13ce4:	ldr	r1, [pc, #476]	; 13ec8 <__assert_fail@plt+0x2f94>
   13ce8:	mov	r0, #0
   13cec:	bl	10d78 <dcgettext@plt>
   13cf0:	ldr	r1, [r5, #8]
   13cf4:	ldr	r2, [r5, #4]
   13cf8:	ldr	r3, [r5]
   13cfc:	str	r1, [sp, #52]	; 0x34
   13d00:	str	r2, [sp, #48]	; 0x30
   13d04:	mov	r1, #1
   13d08:	mov	r2, r0
   13d0c:	mov	r0, r4
   13d10:	add	sp, sp, #32
   13d14:	pop	{r4, r5, r6, lr}
   13d18:	b	10e98 <__fprintf_chk@plt>
   13d1c:	mov	r2, #5
   13d20:	ldr	r1, [pc, #420]	; 13ecc <__assert_fail@plt+0x2f98>
   13d24:	mov	r0, #0
   13d28:	bl	10d78 <dcgettext@plt>
   13d2c:	ldr	r1, [r5, #8]
   13d30:	ldr	ip, [r5, #12]
   13d34:	ldr	r2, [r5, #4]
   13d38:	ldr	r3, [r5]
   13d3c:	stmib	sp, {r1, ip}
   13d40:	str	r2, [sp]
   13d44:	mov	r1, #1
   13d48:	mov	r2, r0
   13d4c:	mov	r0, r4
   13d50:	bl	10e98 <__fprintf_chk@plt>
   13d54:	b	13c78 <__assert_fail@plt+0x2d44>
   13d58:	mov	r2, #5
   13d5c:	ldr	r1, [pc, #364]	; 13ed0 <__assert_fail@plt+0x2f9c>
   13d60:	mov	r0, #0
   13d64:	bl	10d78 <dcgettext@plt>
   13d68:	add	r1, r5, #8
   13d6c:	ldr	r2, [r5, #4]
   13d70:	ldm	r1, {r1, ip, lr}
   13d74:	ldr	r3, [r5]
   13d78:	str	r2, [sp]
   13d7c:	stmib	sp, {r1, ip, lr}
   13d80:	mov	r1, #1
   13d84:	mov	r2, r0
   13d88:	mov	r0, r4
   13d8c:	bl	10e98 <__fprintf_chk@plt>
   13d90:	b	13c78 <__assert_fail@plt+0x2d44>
   13d94:	mov	r2, #5
   13d98:	ldr	r1, [pc, #308]	; 13ed4 <__assert_fail@plt+0x2fa0>
   13d9c:	mov	r0, #0
   13da0:	bl	10d78 <dcgettext@plt>
   13da4:	add	r1, r5, #8
   13da8:	ldr	r2, [r5, #4]
   13dac:	ldm	r1, {r1, ip, lr}
   13db0:	ldr	r6, [r5, #20]
   13db4:	ldr	r3, [r5]
   13db8:	stmib	sp, {r1, ip, lr}
   13dbc:	mov	r1, #1
   13dc0:	str	r2, [sp]
   13dc4:	str	r6, [sp, #16]
   13dc8:	mov	r2, r0
   13dcc:	mov	r0, r4
   13dd0:	bl	10e98 <__fprintf_chk@plt>
   13dd4:	b	13c78 <__assert_fail@plt+0x2d44>
   13dd8:	mov	r2, #5
   13ddc:	ldr	r1, [pc, #244]	; 13ed8 <__assert_fail@plt+0x2fa4>
   13de0:	mov	r0, #0
   13de4:	bl	10d78 <dcgettext@plt>
   13de8:	ldr	r2, [r5, #24]
   13dec:	ldr	r3, [r5]
   13df0:	ldr	r6, [r5, #20]
   13df4:	ldr	lr, [r5, #16]
   13df8:	ldr	ip, [r5, #12]
   13dfc:	str	r2, [sp, #20]
   13e00:	ldr	r1, [r5, #8]
   13e04:	ldr	r2, [r5, #4]
   13e08:	str	r6, [sp, #16]
   13e0c:	stmib	sp, {r1, ip, lr}
   13e10:	mov	r1, #1
   13e14:	str	r2, [sp]
   13e18:	mov	r2, r0
   13e1c:	mov	r0, r4
   13e20:	bl	10e98 <__fprintf_chk@plt>
   13e24:	b	13c78 <__assert_fail@plt+0x2d44>
   13e28:	mov	r2, #5
   13e2c:	ldr	r1, [pc, #168]	; 13edc <__assert_fail@plt+0x2fa8>
   13e30:	mov	r0, #0
   13e34:	bl	10d78 <dcgettext@plt>
   13e38:	ldr	r1, [r5, #28]
   13e3c:	ldr	r2, [r5, #24]
   13e40:	ldr	r3, [r5]
   13e44:	ldr	r6, [r5, #20]
   13e48:	ldr	lr, [r5, #16]
   13e4c:	str	r1, [sp, #24]
   13e50:	ldr	ip, [r5, #12]
   13e54:	str	r2, [sp, #20]
   13e58:	ldr	r1, [r5, #8]
   13e5c:	ldr	r2, [r5, #4]
   13e60:	str	r6, [sp, #16]
   13e64:	stmib	sp, {r1, ip, lr}
   13e68:	mov	r1, #1
   13e6c:	str	r2, [sp]
   13e70:	mov	r2, r0
   13e74:	mov	r0, r4
   13e78:	bl	10e98 <__fprintf_chk@plt>
   13e7c:	b	13c78 <__assert_fail@plt+0x2d44>
   13e80:	str	r3, [sp]
   13e84:	mov	r1, #1
   13e88:	mov	r3, r2
   13e8c:	ldr	r2, [pc, #76]	; 13ee0 <__assert_fail@plt+0x2fac>
   13e90:	bl	10e98 <__fprintf_chk@plt>
   13e94:	b	13b80 <__assert_fail@plt+0x2c4c>
   13e98:	mov	r2, #5
   13e9c:	ldr	r1, [pc, #64]	; 13ee4 <__assert_fail@plt+0x2fb0>
   13ea0:	b	13c24 <__assert_fail@plt+0x2cf0>
   13ea4:	andeq	r5, r1, ip, lsl #26
   13ea8:	andeq	r5, r1, r0, lsr #26
   13eac:	andeq	r0, r0, r6, ror #15
   13eb0:	strdeq	r5, [r1], -r8
   13eb4:	andeq	r5, r1, r4, lsr #26
   13eb8:	ldrdeq	r5, [r1], -r0
   13ebc:	andeq	r5, r1, r0, lsl #30
   13ec0:	strdeq	r5, [r1], -r4
   13ec4:	andeq	r5, r1, r4, lsl #28
   13ec8:	andeq	r5, r1, ip, lsl lr
   13ecc:	andeq	r5, r1, r8, lsr lr
   13ed0:	andeq	r5, r1, r8, asr lr
   13ed4:	andeq	r5, r1, ip, ror lr
   13ed8:	andeq	r5, r1, r4, lsr #29
   13edc:	ldrdeq	r5, [r1], -r0
   13ee0:	andeq	r5, r1, r8, lsl sp
   13ee4:	andeq	r5, r1, r4, lsr pc
   13ee8:	push	{r4, r5, lr}
   13eec:	sub	sp, sp, #12
   13ef0:	ldr	r5, [sp, #24]
   13ef4:	ldr	ip, [r5]
   13ef8:	cmp	ip, #0
   13efc:	beq	13f18 <__assert_fail@plt+0x2fe4>
   13f00:	mov	lr, r5
   13f04:	mov	ip, #0
   13f08:	ldr	r4, [lr, #4]!
   13f0c:	add	ip, ip, #1
   13f10:	cmp	r4, #0
   13f14:	bne	13f08 <__assert_fail@plt+0x2fd4>
   13f18:	stm	sp, {r5, ip}
   13f1c:	bl	13b50 <__assert_fail@plt+0x2c1c>
   13f20:	add	sp, sp, #12
   13f24:	pop	{r4, r5, pc}
   13f28:	push	{r4, r5, lr}
   13f2c:	sub	sp, sp, #52	; 0x34
   13f30:	add	r5, sp, #4
   13f34:	ldr	r4, [sp, #64]	; 0x40
   13f38:	mov	ip, #0
   13f3c:	sub	r4, r4, #4
   13f40:	ldr	lr, [r4, #4]!
   13f44:	cmp	lr, #0
   13f48:	str	lr, [r5, #4]!
   13f4c:	beq	13f5c <__assert_fail@plt+0x3028>
   13f50:	add	ip, ip, #1
   13f54:	cmp	ip, #10
   13f58:	bne	13f40 <__assert_fail@plt+0x300c>
   13f5c:	add	lr, sp, #8
   13f60:	str	ip, [sp, #4]
   13f64:	str	lr, [sp]
   13f68:	bl	13b50 <__assert_fail@plt+0x2c1c>
   13f6c:	add	sp, sp, #52	; 0x34
   13f70:	pop	{r4, r5, pc}
   13f74:	push	{r3}		; (str r3, [sp, #-4]!)
   13f78:	push	{r4, lr}
   13f7c:	sub	sp, sp, #60	; 0x3c
   13f80:	add	lr, sp, #56	; 0x38
   13f84:	add	r3, sp, #72	; 0x48
   13f88:	str	r3, [lr, #-44]!	; 0xffffffd4
   13f8c:	add	r4, sp, #68	; 0x44
   13f90:	mov	r3, #0
   13f94:	ldr	ip, [r4, #4]!
   13f98:	cmp	ip, #0
   13f9c:	str	ip, [lr, #4]!
   13fa0:	beq	13fb0 <__assert_fail@plt+0x307c>
   13fa4:	add	r3, r3, #1
   13fa8:	cmp	r3, #10
   13fac:	bne	13f94 <__assert_fail@plt+0x3060>
   13fb0:	add	ip, sp, #16
   13fb4:	str	r3, [sp, #4]
   13fb8:	str	ip, [sp]
   13fbc:	ldr	r3, [sp, #68]	; 0x44
   13fc0:	bl	13b50 <__assert_fail@plt+0x2c1c>
   13fc4:	add	sp, sp, #60	; 0x3c
   13fc8:	pop	{r4, lr}
   13fcc:	add	sp, sp, #4
   13fd0:	bx	lr
   13fd4:	ldr	r3, [pc, #116]	; 14050 <__assert_fail@plt+0x311c>
   13fd8:	push	{r4, lr}
   13fdc:	mov	r0, #10
   13fe0:	ldr	r1, [r3]
   13fe4:	bl	10d6c <fputc_unlocked@plt>
   13fe8:	mov	r2, #5
   13fec:	ldr	r1, [pc, #96]	; 14054 <__assert_fail@plt+0x3120>
   13ff0:	mov	r0, #0
   13ff4:	bl	10d78 <dcgettext@plt>
   13ff8:	ldr	r2, [pc, #88]	; 14058 <__assert_fail@plt+0x3124>
   13ffc:	mov	r1, r0
   14000:	mov	r0, #1
   14004:	bl	10e80 <__printf_chk@plt>
   14008:	mov	r2, #5
   1400c:	ldr	r1, [pc, #72]	; 1405c <__assert_fail@plt+0x3128>
   14010:	mov	r0, #0
   14014:	bl	10d78 <dcgettext@plt>
   14018:	ldr	r3, [pc, #64]	; 14060 <__assert_fail@plt+0x312c>
   1401c:	ldr	r2, [pc, #64]	; 14064 <__assert_fail@plt+0x3130>
   14020:	mov	r1, r0
   14024:	mov	r0, #1
   14028:	bl	10e80 <__printf_chk@plt>
   1402c:	mov	r2, #5
   14030:	ldr	r1, [pc, #48]	; 14068 <__assert_fail@plt+0x3134>
   14034:	mov	r0, #0
   14038:	bl	10d78 <dcgettext@plt>
   1403c:	ldr	r2, [pc, #40]	; 1406c <__assert_fail@plt+0x3138>
   14040:	pop	{r4, lr}
   14044:	mov	r1, r0
   14048:	mov	r0, #1
   1404c:	b	10e80 <__printf_chk@plt>
   14050:	andeq	r7, r2, r4, asr r1
   14054:	andeq	r5, r1, r0, ror pc
   14058:	andeq	r5, r1, r4, lsl #31
   1405c:	muleq	r1, ip, pc	; <UNPREDICTABLE>
   14060:	andeq	r5, r1, r4, lsr #20
   14064:	andeq	r5, r1, ip, asr #20
   14068:			; <UNDEFINED> instruction: 0x00015fb0
   1406c:	ldrdeq	r5, [r1], -r8
   14070:	push	{r4, lr}
   14074:	bl	14dcc <__assert_fail@plt+0x3e98>
   14078:	cmp	r0, #0
   1407c:	popne	{r4, pc}
   14080:	bl	145b8 <__assert_fail@plt+0x3684>
   14084:	push	{r4, lr}
   14088:	bl	14dcc <__assert_fail@plt+0x3e98>
   1408c:	cmp	r0, #0
   14090:	popne	{r4, pc}
   14094:	bl	145b8 <__assert_fail@plt+0x3684>
   14098:	push	{r4, lr}
   1409c:	bl	14dcc <__assert_fail@plt+0x3e98>
   140a0:	cmp	r0, #0
   140a4:	popne	{r4, pc}
   140a8:	bl	145b8 <__assert_fail@plt+0x3684>
   140ac:	push	{r4, r5, r6, lr}
   140b0:	mov	r5, r0
   140b4:	mov	r4, r1
   140b8:	bl	14df8 <__assert_fail@plt+0x3ec4>
   140bc:	cmp	r0, #0
   140c0:	popne	{r4, r5, r6, pc}
   140c4:	adds	r4, r4, #0
   140c8:	movne	r4, #1
   140cc:	cmp	r5, #0
   140d0:	orreq	r4, r4, #1
   140d4:	cmp	r4, #0
   140d8:	popeq	{r4, r5, r6, pc}
   140dc:	bl	145b8 <__assert_fail@plt+0x3684>
   140e0:	push	{r4, lr}
   140e4:	cmp	r1, #0
   140e8:	orreq	r1, r1, #1
   140ec:	bl	14df8 <__assert_fail@plt+0x3ec4>
   140f0:	cmp	r0, #0
   140f4:	popne	{r4, pc}
   140f8:	bl	145b8 <__assert_fail@plt+0x3684>
   140fc:	push	{r4, r5, r6, lr}
   14100:	mov	r6, r0
   14104:	mov	r5, r1
   14108:	mov	r4, r2
   1410c:	bl	14fb0 <__assert_fail@plt+0x407c>
   14110:	cmp	r0, #0
   14114:	popne	{r4, r5, r6, pc}
   14118:	cmp	r6, #0
   1411c:	beq	1412c <__assert_fail@plt+0x31f8>
   14120:	cmp	r5, #0
   14124:	cmpne	r4, #0
   14128:	popeq	{r4, r5, r6, pc}
   1412c:	bl	145b8 <__assert_fail@plt+0x3684>
   14130:	b	140fc <__assert_fail@plt+0x31c8>
   14134:	cmp	r2, #0
   14138:	cmpne	r1, #0
   1413c:	moveq	r2, #1
   14140:	moveq	r1, r2
   14144:	push	{r4, lr}
   14148:	bl	14fb0 <__assert_fail@plt+0x407c>
   1414c:	cmp	r0, #0
   14150:	popne	{r4, pc}
   14154:	bl	145b8 <__assert_fail@plt+0x3684>
   14158:	mov	r2, r1
   1415c:	mov	r1, r0
   14160:	mov	r0, #0
   14164:	b	140fc <__assert_fail@plt+0x31c8>
   14168:	mov	r2, r1
   1416c:	mov	r1, r0
   14170:	mov	r0, #0
   14174:	b	14134 <__assert_fail@plt+0x3200>
   14178:	push	{r4, r5, r6, lr}
   1417c:	subs	r6, r0, #0
   14180:	sub	sp, sp, #8
   14184:	mov	r5, r1
   14188:	ldr	r4, [r1]
   1418c:	beq	141c8 <__assert_fail@plt+0x3294>
   14190:	lsr	r1, r4, #1
   14194:	add	r3, r1, #1
   14198:	mvn	r3, r3
   1419c:	cmp	r4, r3
   141a0:	bhi	141c4 <__assert_fail@plt+0x3290>
   141a4:	add	r4, r4, #1
   141a8:	add	r4, r4, r1
   141ac:	mov	r0, r6
   141b0:	mov	r1, r4
   141b4:	bl	140fc <__assert_fail@plt+0x31c8>
   141b8:	str	r4, [r5]
   141bc:	add	sp, sp, #8
   141c0:	pop	{r4, r5, r6, pc}
   141c4:	bl	145b8 <__assert_fail@plt+0x3684>
   141c8:	cmp	r4, #0
   141cc:	bne	141ac <__assert_fail@plt+0x3278>
   141d0:	mov	r1, r2
   141d4:	mov	r0, #64	; 0x40
   141d8:	str	r2, [sp, #4]
   141dc:	bl	150f0 <__assert_fail@plt+0x41bc>
   141e0:	ldr	r2, [sp, #4]
   141e4:	cmp	r0, #0
   141e8:	movne	r4, r0
   141ec:	addeq	r4, r0, #1
   141f0:	b	141ac <__assert_fail@plt+0x3278>
   141f4:	mov	r2, #1
   141f8:	b	14178 <__assert_fail@plt+0x3244>
   141fc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14200:	sub	sp, sp, #12
   14204:	ldr	r6, [r1]
   14208:	mov	sl, r1
   1420c:	mov	r9, r0
   14210:	asrs	r4, r6, #1
   14214:	mov	r5, r2
   14218:	mov	fp, r3
   1421c:	ldr	r7, [sp, #48]	; 0x30
   14220:	bmi	1438c <__assert_fail@plt+0x3458>
   14224:	mvn	r3, #-2147483648	; 0x80000000
   14228:	sub	r3, r3, r4
   1422c:	cmp	r6, r3
   14230:	movle	r3, #0
   14234:	movgt	r3, #1
   14238:	mvn	r8, fp
   1423c:	cmp	r3, #0
   14240:	addeq	r4, r4, r6
   14244:	mvnne	r4, #-2147483648	; 0x80000000
   14248:	lsr	r8, r8, #31
   1424c:	cmp	fp, r4
   14250:	movge	r3, #0
   14254:	andlt	r3, r8, #1
   14258:	cmp	r3, #0
   1425c:	beq	14344 <__assert_fail@plt+0x3410>
   14260:	cmp	r7, #0
   14264:	blt	14414 <__assert_fail@plt+0x34e0>
   14268:	bne	1440c <__assert_fail@plt+0x34d8>
   1426c:	mov	r2, #64	; 0x40
   14270:	mov	r1, r7
   14274:	mov	r0, r2
   14278:	str	r2, [sp, #4]
   1427c:	bl	152fc <__assert_fail@plt+0x43c8>
   14280:	ldr	r2, [sp, #4]
   14284:	mov	r1, r7
   14288:	mov	r4, r0
   1428c:	mov	r0, r2
   14290:	bl	1551c <__assert_fail@plt+0x45e8>
   14294:	ldr	r2, [sp, #4]
   14298:	sub	r1, r2, r1
   1429c:	cmp	r9, #0
   142a0:	sub	r3, r4, r6
   142a4:	streq	r9, [sl]
   142a8:	cmp	r3, r5
   142ac:	bge	14330 <__assert_fail@plt+0x33fc>
   142b0:	cmp	r5, #0
   142b4:	blt	143a0 <__assert_fail@plt+0x346c>
   142b8:	cmp	r6, #0
   142bc:	blt	142dc <__assert_fail@plt+0x33a8>
   142c0:	mvn	r3, #-2147483648	; 0x80000000
   142c4:	sub	r3, r3, r5
   142c8:	cmp	r6, r3
   142cc:	movle	r3, #0
   142d0:	movgt	r3, #1
   142d4:	cmp	r3, #0
   142d8:	bne	1449c <__assert_fail@plt+0x3568>
   142dc:	add	r5, r6, r5
   142e0:	cmp	fp, r5
   142e4:	movge	r8, #0
   142e8:	andlt	r8, r8, #1
   142ec:	cmp	r8, #0
   142f0:	mov	r4, r5
   142f4:	bne	1449c <__assert_fail@plt+0x3568>
   142f8:	cmp	r7, #0
   142fc:	blt	143b4 <__assert_fail@plt+0x3480>
   14300:	beq	1432c <__assert_fail@plt+0x33f8>
   14304:	cmp	r5, #0
   14308:	blt	1445c <__assert_fail@plt+0x3528>
   1430c:	mov	r1, r7
   14310:	mvn	r0, #-2147483648	; 0x80000000
   14314:	bl	152fc <__assert_fail@plt+0x43c8>
   14318:	cmp	r5, r0
   1431c:	movle	r0, #0
   14320:	movgt	r0, #1
   14324:	cmp	r0, #0
   14328:	bne	1449c <__assert_fail@plt+0x3568>
   1432c:	mul	r1, r5, r7
   14330:	mov	r0, r9
   14334:	bl	140ac <__assert_fail@plt+0x3178>
   14338:	str	r4, [sl]
   1433c:	add	sp, sp, #12
   14340:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14344:	cmp	r7, #0
   14348:	blt	143e0 <__assert_fail@plt+0x34ac>
   1434c:	beq	1426c <__assert_fail@plt+0x3338>
   14350:	cmp	r4, #0
   14354:	blt	1441c <__assert_fail@plt+0x34e8>
   14358:	mov	r1, r7
   1435c:	mvn	r0, #-2147483648	; 0x80000000
   14360:	bl	152fc <__assert_fail@plt+0x43c8>
   14364:	cmp	r0, r4
   14368:	movge	r0, #0
   1436c:	movlt	r0, #1
   14370:	cmp	r0, #0
   14374:	mvnne	r2, #-2147483648	; 0x80000000
   14378:	bne	14270 <__assert_fail@plt+0x333c>
   1437c:	mul	r1, r7, r4
   14380:	cmp	r1, #63	; 0x3f
   14384:	bgt	1429c <__assert_fail@plt+0x3368>
   14388:	b	1426c <__assert_fail@plt+0x3338>
   1438c:	rsb	r3, r4, #-2147483648	; 0x80000000
   14390:	cmp	r6, r3
   14394:	movge	r3, #0
   14398:	movlt	r3, #1
   1439c:	b	14238 <__assert_fail@plt+0x3304>
   143a0:	rsb	r3, r5, #-2147483648	; 0x80000000
   143a4:	cmp	r6, r3
   143a8:	movge	r3, #0
   143ac:	movlt	r3, #1
   143b0:	b	142d4 <__assert_fail@plt+0x33a0>
   143b4:	cmp	r5, #0
   143b8:	blt	14440 <__assert_fail@plt+0x350c>
   143bc:	cmn	r7, #1
   143c0:	beq	1432c <__assert_fail@plt+0x33f8>
   143c4:	mov	r1, r7
   143c8:	mov	r0, #-2147483648	; 0x80000000
   143cc:	bl	152fc <__assert_fail@plt+0x43c8>
   143d0:	cmp	r5, r0
   143d4:	movle	r0, #0
   143d8:	movgt	r0, #1
   143dc:	b	14324 <__assert_fail@plt+0x33f0>
   143e0:	cmp	r4, #0
   143e4:	blt	14480 <__assert_fail@plt+0x354c>
   143e8:	cmn	r7, #1
   143ec:	beq	1437c <__assert_fail@plt+0x3448>
   143f0:	mov	r1, r7
   143f4:	mov	r0, #-2147483648	; 0x80000000
   143f8:	bl	152fc <__assert_fail@plt+0x43c8>
   143fc:	cmp	r0, r4
   14400:	movge	r0, #0
   14404:	movlt	r0, #1
   14408:	b	14370 <__assert_fail@plt+0x343c>
   1440c:	mov	r4, fp
   14410:	b	14358 <__assert_fail@plt+0x3424>
   14414:	mov	r4, fp
   14418:	b	143e8 <__assert_fail@plt+0x34b4>
   1441c:	cmn	r4, #1
   14420:	beq	1437c <__assert_fail@plt+0x3448>
   14424:	mov	r1, r4
   14428:	mov	r0, #-2147483648	; 0x80000000
   1442c:	bl	152fc <__assert_fail@plt+0x43c8>
   14430:	cmp	r7, r0
   14434:	movle	r0, #0
   14438:	movgt	r0, #1
   1443c:	b	14370 <__assert_fail@plt+0x343c>
   14440:	mov	r1, r7
   14444:	mvn	r0, #-2147483648	; 0x80000000
   14448:	bl	152fc <__assert_fail@plt+0x43c8>
   1444c:	cmp	r5, r0
   14450:	movge	r0, #0
   14454:	movlt	r0, #1
   14458:	b	14324 <__assert_fail@plt+0x33f0>
   1445c:	cmn	r5, #1
   14460:	beq	1432c <__assert_fail@plt+0x33f8>
   14464:	mov	r1, r5
   14468:	mov	r0, #-2147483648	; 0x80000000
   1446c:	bl	152fc <__assert_fail@plt+0x43c8>
   14470:	cmp	r7, r0
   14474:	movle	r0, #0
   14478:	movgt	r0, #1
   1447c:	b	14324 <__assert_fail@plt+0x33f0>
   14480:	mov	r1, r7
   14484:	mvn	r0, #-2147483648	; 0x80000000
   14488:	bl	152fc <__assert_fail@plt+0x43c8>
   1448c:	cmp	r0, r4
   14490:	movle	r0, #0
   14494:	movgt	r0, #1
   14498:	b	14370 <__assert_fail@plt+0x343c>
   1449c:	bl	145b8 <__assert_fail@plt+0x3684>
   144a0:	push	{r4, lr}
   144a4:	mov	r1, #1
   144a8:	bl	14d84 <__assert_fail@plt+0x3e50>
   144ac:	cmp	r0, #0
   144b0:	popne	{r4, pc}
   144b4:	bl	145b8 <__assert_fail@plt+0x3684>
   144b8:	push	{r4, lr}
   144bc:	mov	r1, #1
   144c0:	bl	14d84 <__assert_fail@plt+0x3e50>
   144c4:	cmp	r0, #0
   144c8:	popne	{r4, pc}
   144cc:	bl	145b8 <__assert_fail@plt+0x3684>
   144d0:	push	{r4, lr}
   144d4:	bl	14d84 <__assert_fail@plt+0x3e50>
   144d8:	cmp	r0, #0
   144dc:	popne	{r4, pc}
   144e0:	bl	145b8 <__assert_fail@plt+0x3684>
   144e4:	push	{r4, lr}
   144e8:	bl	14d84 <__assert_fail@plt+0x3e50>
   144ec:	cmp	r0, #0
   144f0:	popne	{r4, pc}
   144f4:	bl	145b8 <__assert_fail@plt+0x3684>
   144f8:	push	{r4, r5, r6, lr}
   144fc:	mov	r6, r0
   14500:	mov	r0, r1
   14504:	mov	r4, r1
   14508:	bl	14dcc <__assert_fail@plt+0x3e98>
   1450c:	subs	r5, r0, #0
   14510:	beq	14528 <__assert_fail@plt+0x35f4>
   14514:	mov	r2, r4
   14518:	mov	r1, r6
   1451c:	bl	10d30 <memcpy@plt>
   14520:	mov	r0, r5
   14524:	pop	{r4, r5, r6, pc}
   14528:	bl	145b8 <__assert_fail@plt+0x3684>
   1452c:	push	{r4, r5, r6, lr}
   14530:	mov	r6, r0
   14534:	mov	r0, r1
   14538:	mov	r4, r1
   1453c:	bl	14dcc <__assert_fail@plt+0x3e98>
   14540:	subs	r5, r0, #0
   14544:	beq	1455c <__assert_fail@plt+0x3628>
   14548:	mov	r2, r4
   1454c:	mov	r1, r6
   14550:	bl	10d30 <memcpy@plt>
   14554:	mov	r0, r5
   14558:	pop	{r4, r5, r6, pc}
   1455c:	bl	145b8 <__assert_fail@plt+0x3684>
   14560:	push	{r4, r5, r6, lr}
   14564:	mov	r6, r0
   14568:	add	r0, r1, #1
   1456c:	mov	r4, r1
   14570:	bl	14dcc <__assert_fail@plt+0x3e98>
   14574:	subs	r5, r0, #0
   14578:	beq	14598 <__assert_fail@plt+0x3664>
   1457c:	mov	r3, #0
   14580:	mov	r1, r6
   14584:	strb	r3, [r5, r4]
   14588:	mov	r2, r4
   1458c:	bl	10d30 <memcpy@plt>
   14590:	mov	r0, r5
   14594:	pop	{r4, r5, r6, pc}
   14598:	bl	145b8 <__assert_fail@plt+0x3684>
   1459c:	push	{r4, lr}
   145a0:	mov	r4, r0
   145a4:	bl	10e44 <strlen@plt>
   145a8:	add	r1, r0, #1
   145ac:	mov	r0, r4
   145b0:	pop	{r4, lr}
   145b4:	b	144f8 <__assert_fail@plt+0x35c4>
   145b8:	ldr	r3, [pc, #44]	; 145ec <__assert_fail@plt+0x36b8>
   145bc:	push	{r4, lr}
   145c0:	mov	r2, #5
   145c4:	ldr	r1, [pc, #36]	; 145f0 <__assert_fail@plt+0x36bc>
   145c8:	mov	r0, #0
   145cc:	ldr	r4, [r3]
   145d0:	bl	10d78 <dcgettext@plt>
   145d4:	ldr	r2, [pc, #24]	; 145f4 <__assert_fail@plt+0x36c0>
   145d8:	mov	r1, #0
   145dc:	mov	r3, r0
   145e0:	mov	r0, r4
   145e4:	bl	10de4 <error@plt>
   145e8:	bl	10f28 <abort@plt>
   145ec:	strdeq	r7, [r2], -r0
   145f0:	andeq	r6, r1, r8, lsr #32
   145f4:	strdeq	r5, [r1], -r0
   145f8:	push	{r4, r5, r6, r7, lr}
   145fc:	sub	sp, sp, #20
   14600:	mov	r6, r2
   14604:	ldr	ip, [sp, #48]	; 0x30
   14608:	mov	r2, r1
   1460c:	mov	r7, r3
   14610:	str	ip, [sp]
   14614:	add	r3, sp, #8
   14618:	mov	r1, #0
   1461c:	mov	r5, r0
   14620:	ldr	r4, [sp, #56]	; 0x38
   14624:	bl	147dc <__assert_fail@plt+0x38a8>
   14628:	cmp	r0, #0
   1462c:	bne	146b0 <__assert_fail@plt+0x377c>
   14630:	ldrd	r0, [sp, #8]
   14634:	cmp	r1, r7
   14638:	cmpeq	r0, r6
   1463c:	ldrd	r6, [sp, #40]	; 0x28
   14640:	movcc	r3, #1
   14644:	movcs	r3, #0
   14648:	cmp	r1, r7
   1464c:	cmpeq	r0, r6
   14650:	orrhi	r3, r3, #1
   14654:	cmp	r3, #0
   14658:	beq	146a8 <__assert_fail@plt+0x3774>
   1465c:	mov	r3, #0
   14660:	mvn	r2, #-1073741824	; 0xc0000000
   14664:	cmp	r1, r3
   14668:	cmpeq	r0, r2
   1466c:	bhi	146dc <__assert_fail@plt+0x37a8>
   14670:	bl	10e5c <__errno_location@plt>
   14674:	mov	r3, #34	; 0x22
   14678:	mov	r6, r3
   1467c:	str	r3, [r0]
   14680:	cmp	r4, #0
   14684:	moveq	r4, #1
   14688:	mov	r0, r5
   1468c:	bl	13b38 <__assert_fail@plt+0x2c04>
   14690:	mov	r1, r6
   14694:	ldr	r3, [sp, #52]	; 0x34
   14698:	ldr	r2, [pc, #144]	; 14730 <__assert_fail@plt+0x37fc>
   1469c:	str	r0, [sp]
   146a0:	mov	r0, r4
   146a4:	bl	10de4 <error@plt>
   146a8:	add	sp, sp, #20
   146ac:	pop	{r4, r5, r6, r7, pc}
   146b0:	cmp	r0, #1
   146b4:	beq	146f0 <__assert_fail@plt+0x37bc>
   146b8:	cmp	r0, #3
   146bc:	beq	14720 <__assert_fail@plt+0x37ec>
   146c0:	cmp	r4, #0
   146c4:	beq	14710 <__assert_fail@plt+0x37dc>
   146c8:	bl	10e5c <__errno_location@plt>
   146cc:	ldr	r6, [r0]
   146d0:	cmp	r6, #22
   146d4:	moveq	r6, #0
   146d8:	b	14688 <__assert_fail@plt+0x3754>
   146dc:	bl	10e5c <__errno_location@plt>
   146e0:	mov	r3, #75	; 0x4b
   146e4:	mov	r6, r3
   146e8:	str	r3, [r0]
   146ec:	b	14680 <__assert_fail@plt+0x374c>
   146f0:	bl	10e5c <__errno_location@plt>
   146f4:	mov	r3, #75	; 0x4b
   146f8:	mov	r6, r3
   146fc:	str	r3, [r0]
   14700:	cmp	r4, #0
   14704:	moveq	r4, #1
   14708:	bne	146d0 <__assert_fail@plt+0x379c>
   1470c:	b	14688 <__assert_fail@plt+0x3754>
   14710:	bl	10e5c <__errno_location@plt>
   14714:	mov	r4, #1
   14718:	ldr	r6, [r0]
   1471c:	b	146d0 <__assert_fail@plt+0x379c>
   14720:	bl	10e5c <__errno_location@plt>
   14724:	mov	r6, #0
   14728:	str	r6, [r0]
   1472c:	b	14700 <__assert_fail@plt+0x37cc>
   14730:	andeq	r5, r1, ip, ror #23
   14734:	push	{r4, r5}
   14738:	mov	r1, #10
   1473c:	pop	{r4, r5}
   14740:	b	145f8 <__assert_fail@plt+0x36c4>
   14744:	push	{r4, r5, r6, r7, r8, lr}
   14748:	subs	r5, r1, #0
   1474c:	mov	r4, r0
   14750:	blt	147c4 <__assert_fail@plt+0x3890>
   14754:	moveq	r6, #0
   14758:	moveq	r7, #0
   1475c:	bne	14784 <__assert_fail@plt+0x3850>
   14760:	ldr	r2, [r4]
   14764:	ldr	r1, [r4, #4]
   14768:	mov	r0, #0
   1476c:	mul	ip, r2, r7
   14770:	umull	r2, r3, r2, r5
   14774:	mla	r5, r5, r1, ip
   14778:	add	r3, r5, r3
   1477c:	strd	r2, [r4]
   14780:	pop	{r4, r5, r6, r7, r8, pc}
   14784:	asr	r7, r5, #31
   14788:	mov	r2, r5
   1478c:	mov	r3, r7
   14790:	mvn	r0, #0
   14794:	mvn	r1, #0
   14798:	bl	1553c <__assert_fail@plt+0x4608>
   1479c:	ldrd	r2, [r4]
   147a0:	mov	r6, r5
   147a4:	cmp	r1, r3
   147a8:	cmpeq	r0, r2
   147ac:	bcs	14760 <__assert_fail@plt+0x382c>
   147b0:	mvn	r2, #0
   147b4:	mvn	r3, #0
   147b8:	mov	r0, #1
   147bc:	strd	r2, [r4]
   147c0:	pop	{r4, r5, r6, r7, r8, pc}
   147c4:	ldrd	r2, [r0]
   147c8:	orrs	r3, r2, r3
   147cc:	moveq	r6, r5
   147d0:	asreq	r7, r6, #31
   147d4:	bne	147b0 <__assert_fail@plt+0x387c>
   147d8:	b	14760 <__assert_fail@plt+0x382c>
   147dc:	cmp	r2, #36	; 0x24
   147e0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   147e4:	sub	sp, sp, #20
   147e8:	bhi	14d5c <__assert_fail@plt+0x3e28>
   147ec:	cmp	r1, #0
   147f0:	mov	r8, r2
   147f4:	mov	r7, r0
   147f8:	mov	r5, r1
   147fc:	mov	r6, r3
   14800:	addeq	r5, sp, #4
   14804:	bl	10e5c <__errno_location@plt>
   14808:	mov	r3, #0
   1480c:	str	r3, [r0]
   14810:	mov	r9, r0
   14814:	bl	10e2c <__ctype_b_loc@plt>
   14818:	ldrb	r3, [r7]
   1481c:	mov	r2, r7
   14820:	ldr	r0, [r0]
   14824:	b	1482c <__assert_fail@plt+0x38f8>
   14828:	ldrb	r3, [r2, #1]!
   1482c:	lsl	r1, r3, #1
   14830:	ldrh	r4, [r0, r1]
   14834:	ands	r4, r4, #8192	; 0x2000
   14838:	bne	14828 <__assert_fail@plt+0x38f4>
   1483c:	cmp	r3, #45	; 0x2d
   14840:	bne	14854 <__assert_fail@plt+0x3920>
   14844:	mov	r4, #4
   14848:	mov	r0, r4
   1484c:	add	sp, sp, #20
   14850:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14854:	mov	r2, r8
   14858:	mov	r3, r4
   1485c:	mov	r1, r5
   14860:	mov	r0, r7
   14864:	bl	10d3c <__strtoull_internal@plt>
   14868:	ldr	r8, [r5]
   1486c:	cmp	r7, r8
   14870:	mov	r2, r0
   14874:	str	r0, [sp, #8]
   14878:	str	r1, [sp, #12]
   1487c:	beq	148c8 <__assert_fail@plt+0x3994>
   14880:	ldr	r4, [r9]
   14884:	cmp	r4, #0
   14888:	bne	148b8 <__assert_fail@plt+0x3984>
   1488c:	ldr	r3, [sp, #56]	; 0x38
   14890:	cmp	r3, #0
   14894:	beq	148a4 <__assert_fail@plt+0x3970>
   14898:	ldrb	r9, [r8]
   1489c:	cmp	r9, #0
   148a0:	bne	14900 <__assert_fail@plt+0x39cc>
   148a4:	mov	r0, r4
   148a8:	str	r2, [r6]
   148ac:	str	r1, [r6, #4]
   148b0:	add	sp, sp, #20
   148b4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   148b8:	cmp	r4, #34	; 0x22
   148bc:	bne	14844 <__assert_fail@plt+0x3910>
   148c0:	mov	r4, #1
   148c4:	b	1488c <__assert_fail@plt+0x3958>
   148c8:	ldr	r3, [sp, #56]	; 0x38
   148cc:	cmp	r3, #0
   148d0:	beq	14844 <__assert_fail@plt+0x3910>
   148d4:	ldrb	r1, [r8]
   148d8:	cmp	r1, #0
   148dc:	beq	14844 <__assert_fail@plt+0x3910>
   148e0:	mov	r0, r3
   148e4:	bl	10e50 <strchr@plt>
   148e8:	cmp	r0, #0
   148ec:	beq	14844 <__assert_fail@plt+0x3910>
   148f0:	ldrb	r9, [r8]
   148f4:	mov	r2, #1
   148f8:	mov	r3, #0
   148fc:	strd	r2, [sp, #8]
   14900:	mov	r1, r9
   14904:	ldr	r0, [sp, #56]	; 0x38
   14908:	bl	10e50 <strchr@plt>
   1490c:	cmp	r0, #0
   14910:	beq	14d18 <__assert_fail@plt+0x3de4>
   14914:	sub	r3, r9, #69	; 0x45
   14918:	cmp	r3, #47	; 0x2f
   1491c:	ldrls	pc, [pc, r3, lsl #2]
   14920:	b	149e4 <__assert_fail@plt+0x3ab0>
   14924:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14928:	andeq	r4, r1, r4, ror #19
   1492c:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14930:	andeq	r4, r1, r4, ror #19
   14934:	andeq	r4, r1, r4, ror #19
   14938:	andeq	r4, r1, r4, ror #19
   1493c:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14940:	andeq	r4, r1, r4, ror #19
   14944:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14948:	andeq	r4, r1, r4, ror #19
   1494c:	andeq	r4, r1, r4, ror #19
   14950:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14954:	andeq	r4, r1, r4, ror #19
   14958:	andeq	r4, r1, r4, ror #19
   1495c:	andeq	r4, r1, r4, ror #19
   14960:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14964:	andeq	r4, r1, r4, ror #19
   14968:	andeq	r4, r1, r4, ror #19
   1496c:	andeq	r4, r1, r4, ror #19
   14970:	andeq	r4, r1, r4, ror #19
   14974:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14978:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   1497c:	andeq	r4, r1, r4, ror #19
   14980:	andeq	r4, r1, r4, ror #19
   14984:	andeq	r4, r1, r4, ror #19
   14988:	andeq	r4, r1, r4, ror #19
   1498c:	andeq	r4, r1, r4, ror #19
   14990:	andeq	r4, r1, r4, ror #19
   14994:	andeq	r4, r1, r4, ror #19
   14998:	andeq	r4, r1, r4, ror #19
   1499c:	andeq	r4, r1, r4, ror #19
   149a0:	andeq	r4, r1, r4, ror #19
   149a4:	andeq	r4, r1, r4, ror #19
   149a8:	andeq	r4, r1, r4, ror #19
   149ac:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   149b0:	andeq	r4, r1, r4, ror #19
   149b4:	andeq	r4, r1, r4, ror #19
   149b8:	andeq	r4, r1, r4, ror #19
   149bc:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   149c0:	andeq	r4, r1, r4, ror #19
   149c4:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   149c8:	andeq	r4, r1, r4, ror #19
   149cc:	andeq	r4, r1, r4, ror #19
   149d0:	andeq	r4, r1, r4, ror #19
   149d4:	andeq	r4, r1, r4, ror #19
   149d8:	andeq	r4, r1, r4, ror #19
   149dc:	andeq	r4, r1, r4, ror #19
   149e0:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   149e4:	mov	r7, #1
   149e8:	mov	sl, #1024	; 0x400
   149ec:	sub	r9, r9, #66	; 0x42
   149f0:	cmp	r9, #53	; 0x35
   149f4:	ldrls	pc, [pc, r9, lsl #2]
   149f8:	b	14d18 <__assert_fail@plt+0x3de4>
   149fc:	andeq	r4, r1, r4, ror #24
   14a00:	andeq	r4, r1, r8, lsl sp
   14a04:	andeq	r4, r1, r8, lsl sp
   14a08:	andeq	r4, r1, ip, lsr ip
   14a0c:	andeq	r4, r1, r8, lsl sp
   14a10:	andeq	r4, r1, r4, lsl ip
   14a14:	andeq	r4, r1, r8, lsl sp
   14a18:	andeq	r4, r1, r8, lsl sp
   14a1c:	andeq	r4, r1, r8, lsl sp
   14a20:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14a24:	andeq	r4, r1, r8, lsl sp
   14a28:	andeq	r4, r1, r0, asr #25
   14a2c:	andeq	r4, r1, r8, lsl sp
   14a30:	andeq	r4, r1, r8, lsl sp
   14a34:	muleq	r1, r8, ip
   14a38:	andeq	r4, r1, r8, lsl sp
   14a3c:	andeq	r4, r1, r8, lsl sp
   14a40:	andeq	r4, r1, r8, lsl sp
   14a44:	strdeq	r4, [r1], -r0
   14a48:	andeq	r4, r1, r8, lsl sp
   14a4c:	andeq	r4, r1, r8, lsl sp
   14a50:	andeq	r4, r1, r8, lsl sp
   14a54:	andeq	r4, r1, r8, lsl sp
   14a58:	andeq	r4, r1, ip, asr #23
   14a5c:	muleq	r1, r8, fp
   14a60:	andeq	r4, r1, r8, lsl sp
   14a64:	andeq	r4, r1, r8, lsl sp
   14a68:	andeq	r4, r1, r8, lsl sp
   14a6c:	andeq	r4, r1, r8, lsl sp
   14a70:	andeq	r4, r1, r8, lsl sp
   14a74:	andeq	r4, r1, r8, lsl sp
   14a78:	andeq	r4, r1, r8, lsl sp
   14a7c:	andeq	r4, r1, r4, ror #22
   14a80:	andeq	r4, r1, r4, asr fp
   14a84:	andeq	r4, r1, r8, lsl sp
   14a88:	andeq	r4, r1, r8, lsl sp
   14a8c:	andeq	r4, r1, r8, lsl sp
   14a90:	andeq	r4, r1, r4, lsl ip
   14a94:	andeq	r4, r1, r8, lsl sp
   14a98:	andeq	r4, r1, r8, lsl sp
   14a9c:	andeq	r4, r1, r8, lsl sp
   14aa0:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14aa4:	andeq	r4, r1, r8, lsl sp
   14aa8:	andeq	r4, r1, r0, asr #25
   14aac:	andeq	r4, r1, r8, lsl sp
   14ab0:	andeq	r4, r1, r8, lsl sp
   14ab4:	andeq	r4, r1, r8, lsl sp
   14ab8:	andeq	r4, r1, r8, lsl sp
   14abc:	andeq	r4, r1, r8, lsl sp
   14ac0:	andeq	r4, r1, r8, lsl sp
   14ac4:	strdeq	r4, [r1], -r0
   14ac8:	andeq	r4, r1, r8, lsl sp
   14acc:	andeq	r4, r1, r8, lsl sp
   14ad0:	andeq	r4, r1, r0, lsl fp
   14ad4:	mov	r1, #48	; 0x30
   14ad8:	ldr	r0, [sp, #56]	; 0x38
   14adc:	bl	10e50 <strchr@plt>
   14ae0:	cmp	r0, #0
   14ae4:	beq	149e4 <__assert_fail@plt+0x3ab0>
   14ae8:	ldrb	r3, [r8, #1]
   14aec:	cmp	r3, #68	; 0x44
   14af0:	beq	14b04 <__assert_fail@plt+0x3bd0>
   14af4:	cmp	r3, #105	; 0x69
   14af8:	beq	14d28 <__assert_fail@plt+0x3df4>
   14afc:	cmp	r3, #66	; 0x42
   14b00:	bne	149e4 <__assert_fail@plt+0x3ab0>
   14b04:	mov	r7, #2
   14b08:	mov	sl, #1000	; 0x3e8
   14b0c:	b	149ec <__assert_fail@plt+0x3ab8>
   14b10:	ldrd	r2, [sp, #8]
   14b14:	cmp	r2, #0
   14b18:	sbcs	r1, r3, #0
   14b1c:	blt	14d40 <__assert_fail@plt+0x3e0c>
   14b20:	adds	r2, r2, r2
   14b24:	adc	r3, r3, r3
   14b28:	mov	r1, r3
   14b2c:	mov	r9, #0
   14b30:	str	r2, [sp, #8]
   14b34:	str	r3, [sp, #12]
   14b38:	add	r3, r8, r7
   14b3c:	str	r3, [r5]
   14b40:	ldrb	r3, [r8, r7]
   14b44:	orr	r4, r4, r9
   14b48:	cmp	r3, #0
   14b4c:	orrne	r4, r4, #2
   14b50:	b	148a4 <__assert_fail@plt+0x3970>
   14b54:	ldr	r2, [sp, #8]
   14b58:	ldr	r1, [sp, #12]
   14b5c:	mov	r9, #0
   14b60:	b	14b38 <__assert_fail@plt+0x3c04>
   14b64:	ldrd	r2, [sp, #8]
   14b68:	ldr	r1, [pc, #512]	; 14d70 <__assert_fail@plt+0x3e3c>
   14b6c:	mvn	r0, #0
   14b70:	cmp	r3, r1
   14b74:	cmpeq	r2, r0
   14b78:	bhi	14d40 <__assert_fail@plt+0x3e0c>
   14b7c:	lsl	r1, r3, #9
   14b80:	orr	r1, r1, r2, lsr #23
   14b84:	lsl	r2, r2, #9
   14b88:	str	r1, [sp, #12]
   14b8c:	str	r2, [sp, #8]
   14b90:	mov	r9, #0
   14b94:	b	14b38 <__assert_fail@plt+0x3c04>
   14b98:	mov	fp, #7
   14b9c:	mov	r9, #0
   14ba0:	add	r8, sp, #8
   14ba4:	mov	r1, sl
   14ba8:	mov	r0, r8
   14bac:	bl	14744 <__assert_fail@plt+0x3810>
   14bb0:	subs	fp, fp, #1
   14bb4:	orr	r9, r9, r0
   14bb8:	bne	14ba4 <__assert_fail@plt+0x3c70>
   14bbc:	ldr	r8, [r5]
   14bc0:	ldr	r2, [sp, #8]
   14bc4:	ldr	r1, [sp, #12]
   14bc8:	b	14b38 <__assert_fail@plt+0x3c04>
   14bcc:	mov	fp, #8
   14bd0:	mov	r9, #0
   14bd4:	add	r8, sp, fp
   14bd8:	mov	r1, sl
   14bdc:	mov	r0, r8
   14be0:	bl	14744 <__assert_fail@plt+0x3810>
   14be4:	subs	fp, fp, #1
   14be8:	orr	r9, r9, r0
   14bec:	bne	14bd8 <__assert_fail@plt+0x3ca4>
   14bf0:	b	14bbc <__assert_fail@plt+0x3c88>
   14bf4:	mov	r1, sl
   14bf8:	add	r0, sp, #8
   14bfc:	bl	14744 <__assert_fail@plt+0x3810>
   14c00:	ldr	r8, [r5]
   14c04:	ldr	r2, [sp, #8]
   14c08:	ldr	r1, [sp, #12]
   14c0c:	mov	r9, r0
   14c10:	b	14b38 <__assert_fail@plt+0x3c04>
   14c14:	mov	fp, #3
   14c18:	mov	r9, #0
   14c1c:	add	r8, sp, #8
   14c20:	mov	r1, sl
   14c24:	mov	r0, r8
   14c28:	bl	14744 <__assert_fail@plt+0x3810>
   14c2c:	subs	fp, fp, #1
   14c30:	orr	r9, r9, r0
   14c34:	bne	14c20 <__assert_fail@plt+0x3cec>
   14c38:	b	14bbc <__assert_fail@plt+0x3c88>
   14c3c:	mov	fp, #6
   14c40:	mov	r9, #0
   14c44:	add	r8, sp, #8
   14c48:	mov	r1, sl
   14c4c:	mov	r0, r8
   14c50:	bl	14744 <__assert_fail@plt+0x3810>
   14c54:	subs	fp, fp, #1
   14c58:	orr	r9, r9, r0
   14c5c:	bne	14c48 <__assert_fail@plt+0x3d14>
   14c60:	b	14bbc <__assert_fail@plt+0x3c88>
   14c64:	ldrd	r0, [sp, #8]
   14c68:	ldr	r3, [pc, #260]	; 14d74 <__assert_fail@plt+0x3e40>
   14c6c:	mvn	r2, #0
   14c70:	cmp	r1, r3
   14c74:	cmpeq	r0, r2
   14c78:	bhi	14d40 <__assert_fail@plt+0x3e0c>
   14c7c:	lsl	r1, r1, #10
   14c80:	orr	r1, r1, r0, lsr #22
   14c84:	lsl	r2, r0, #10
   14c88:	str	r1, [sp, #12]
   14c8c:	str	r2, [sp, #8]
   14c90:	mov	r9, #0
   14c94:	b	14b38 <__assert_fail@plt+0x3c04>
   14c98:	mov	fp, #5
   14c9c:	mov	r9, #0
   14ca0:	add	r8, sp, #8
   14ca4:	mov	r1, sl
   14ca8:	mov	r0, r8
   14cac:	bl	14744 <__assert_fail@plt+0x3810>
   14cb0:	subs	fp, fp, #1
   14cb4:	orr	r9, r9, r0
   14cb8:	bne	14ca4 <__assert_fail@plt+0x3d70>
   14cbc:	b	14bbc <__assert_fail@plt+0x3c88>
   14cc0:	mov	r1, sl
   14cc4:	add	r0, sp, #8
   14cc8:	bl	14744 <__assert_fail@plt+0x3810>
   14ccc:	mov	r1, sl
   14cd0:	mov	r9, r0
   14cd4:	add	r0, sp, #8
   14cd8:	bl	14744 <__assert_fail@plt+0x3810>
   14cdc:	ldr	r8, [r5]
   14ce0:	ldr	r2, [sp, #8]
   14ce4:	ldr	r1, [sp, #12]
   14ce8:	orr	r9, r9, r0
   14cec:	b	14b38 <__assert_fail@plt+0x3c04>
   14cf0:	mov	fp, #4
   14cf4:	mov	r9, #0
   14cf8:	add	r8, sp, #8
   14cfc:	mov	r1, sl
   14d00:	mov	r0, r8
   14d04:	bl	14744 <__assert_fail@plt+0x3810>
   14d08:	subs	fp, fp, #1
   14d0c:	orr	r9, r9, r0
   14d10:	bne	14cfc <__assert_fail@plt+0x3dc8>
   14d14:	b	14bbc <__assert_fail@plt+0x3c88>
   14d18:	ldrd	r2, [sp, #8]
   14d1c:	orr	r4, r4, #2
   14d20:	strd	r2, [r6]
   14d24:	b	14848 <__assert_fail@plt+0x3914>
   14d28:	ldrb	r7, [r8, #2]
   14d2c:	mov	sl, #1024	; 0x400
   14d30:	cmp	r7, #66	; 0x42
   14d34:	movne	r7, #1
   14d38:	moveq	r7, #3
   14d3c:	b	149ec <__assert_fail@plt+0x3ab8>
   14d40:	mvn	r1, #0
   14d44:	mvn	r0, #0
   14d48:	mvn	r2, #0
   14d4c:	strd	r0, [sp, #8]
   14d50:	mov	r9, #1
   14d54:	mov	r1, r2
   14d58:	b	14b38 <__assert_fail@plt+0x3c04>
   14d5c:	ldr	r3, [pc, #20]	; 14d78 <__assert_fail@plt+0x3e44>
   14d60:	mov	r2, #85	; 0x55
   14d64:	ldr	r1, [pc, #16]	; 14d7c <__assert_fail@plt+0x3e48>
   14d68:	ldr	r0, [pc, #16]	; 14d80 <__assert_fail@plt+0x3e4c>
   14d6c:	bl	10f34 <__assert_fail@plt>
   14d70:	ldrshteq	pc, [pc], #-255	; <UNPREDICTABLE>
   14d74:	ldrshteq	pc, [pc], -pc	; <UNPREDICTABLE>
   14d78:	andeq	r6, r1, ip, lsr r0
   14d7c:	andeq	r6, r1, r8, asr #32
   14d80:	andeq	r6, r1, r8, asr r0
   14d84:	cmp	r1, #0
   14d88:	cmpne	r0, #0
   14d8c:	moveq	r1, #1
   14d90:	moveq	r0, r1
   14d94:	umull	r2, r3, r0, r1
   14d98:	adds	r3, r3, #0
   14d9c:	movne	r3, #1
   14da0:	cmp	r2, #0
   14da4:	blt	14db4 <__assert_fail@plt+0x3e80>
   14da8:	cmp	r3, #0
   14dac:	bne	14db4 <__assert_fail@plt+0x3e80>
   14db0:	b	10cc4 <calloc@plt>
   14db4:	push	{r4, lr}
   14db8:	bl	10e5c <__errno_location@plt>
   14dbc:	mov	r3, #12
   14dc0:	str	r3, [r0]
   14dc4:	mov	r0, #0
   14dc8:	pop	{r4, pc}
   14dcc:	cmp	r0, #0
   14dd0:	moveq	r0, #1
   14dd4:	cmp	r0, #0
   14dd8:	blt	14de0 <__assert_fail@plt+0x3eac>
   14ddc:	b	10df0 <malloc@plt>
   14de0:	push	{r4, lr}
   14de4:	bl	10e5c <__errno_location@plt>
   14de8:	mov	r3, #12
   14dec:	str	r3, [r0]
   14df0:	mov	r0, #0
   14df4:	pop	{r4, pc}
   14df8:	cmp	r0, #0
   14dfc:	beq	14e20 <__assert_fail@plt+0x3eec>
   14e00:	cmp	r1, #0
   14e04:	push	{lr}		; (str lr, [sp, #-4]!)
   14e08:	sub	sp, sp, #12
   14e0c:	beq	14e28 <__assert_fail@plt+0x3ef4>
   14e10:	blt	14e40 <__assert_fail@plt+0x3f0c>
   14e14:	add	sp, sp, #12
   14e18:	pop	{lr}		; (ldr lr, [sp], #4)
   14e1c:	b	10d84 <realloc@plt>
   14e20:	mov	r0, r1
   14e24:	b	14dcc <__assert_fail@plt+0x3e98>
   14e28:	str	r1, [sp, #4]
   14e2c:	bl	14ed0 <__assert_fail@plt+0x3f9c>
   14e30:	ldr	r3, [sp, #4]
   14e34:	mov	r0, r3
   14e38:	add	sp, sp, #12
   14e3c:	pop	{pc}		; (ldr pc, [sp], #4)
   14e40:	bl	10e5c <__errno_location@plt>
   14e44:	mov	r2, #12
   14e48:	mov	r3, #0
   14e4c:	str	r2, [r0]
   14e50:	b	14e34 <__assert_fail@plt+0x3f00>
   14e54:	push	{r4, r5, r6, lr}
   14e58:	mov	r4, r0
   14e5c:	bl	10dcc <__fpending@plt>
   14e60:	ldr	r5, [r4]
   14e64:	and	r5, r5, #32
   14e68:	mov	r6, r0
   14e6c:	mov	r0, r4
   14e70:	bl	11ad8 <__assert_fail@plt+0xba4>
   14e74:	cmp	r5, #0
   14e78:	mov	r4, r0
   14e7c:	bne	14e9c <__assert_fail@plt+0x3f68>
   14e80:	cmp	r0, #0
   14e84:	beq	14e94 <__assert_fail@plt+0x3f60>
   14e88:	cmp	r6, #0
   14e8c:	beq	14eb8 <__assert_fail@plt+0x3f84>
   14e90:	mvn	r4, #0
   14e94:	mov	r0, r4
   14e98:	pop	{r4, r5, r6, pc}
   14e9c:	cmp	r0, #0
   14ea0:	bne	14e90 <__assert_fail@plt+0x3f5c>
   14ea4:	bl	10e5c <__errno_location@plt>
   14ea8:	str	r4, [r0]
   14eac:	mvn	r4, #0
   14eb0:	mov	r0, r4
   14eb4:	pop	{r4, r5, r6, pc}
   14eb8:	bl	10e5c <__errno_location@plt>
   14ebc:	ldr	r4, [r0]
   14ec0:	subs	r4, r4, #9
   14ec4:	mvnne	r4, #0
   14ec8:	mov	r0, r4
   14ecc:	pop	{r4, r5, r6, pc}
   14ed0:	push	{r4, r5, lr}
   14ed4:	sub	sp, sp, #12
   14ed8:	mov	r5, r0
   14edc:	bl	10e5c <__errno_location@plt>
   14ee0:	mov	r2, #0
   14ee4:	mov	r4, r0
   14ee8:	ldr	r3, [r0]
   14eec:	str	r2, [r4]
   14ef0:	mov	r0, r5
   14ef4:	str	r3, [sp]
   14ef8:	str	r3, [sp, #4]
   14efc:	bl	10d18 <free@plt>
   14f00:	ldr	r3, [r4]
   14f04:	add	r2, sp, #8
   14f08:	cmp	r3, #0
   14f0c:	moveq	r3, #4
   14f10:	movne	r3, #0
   14f14:	add	r3, r2, r3
   14f18:	ldr	r3, [r3, #-8]
   14f1c:	str	r3, [r4]
   14f20:	add	sp, sp, #12
   14f24:	pop	{r4, r5, pc}
   14f28:	push	{r4, lr}
   14f2c:	mov	r0, #14
   14f30:	bl	10eec <nl_langinfo@plt>
   14f34:	cmp	r0, #0
   14f38:	beq	14f50 <__assert_fail@plt+0x401c>
   14f3c:	ldrb	r2, [r0]
   14f40:	ldr	r3, [pc, #16]	; 14f58 <__assert_fail@plt+0x4024>
   14f44:	cmp	r2, #0
   14f48:	moveq	r0, r3
   14f4c:	pop	{r4, pc}
   14f50:	ldr	r0, [pc]	; 14f58 <__assert_fail@plt+0x4024>
   14f54:	pop	{r4, pc}
   14f58:	andeq	r6, r1, r0, lsl #1
   14f5c:	push	{r4, r5, r6, r7, lr}
   14f60:	subs	r6, r0, #0
   14f64:	sub	sp, sp, #12
   14f68:	addeq	r6, sp, #4
   14f6c:	mov	r0, r6
   14f70:	mov	r5, r2
   14f74:	mov	r7, r1
   14f78:	bl	10dd8 <mbrtowc@plt>
   14f7c:	cmp	r5, #0
   14f80:	cmnne	r0, #3
   14f84:	mov	r4, r0
   14f88:	bls	14fa4 <__assert_fail@plt+0x4070>
   14f8c:	mov	r0, #0
   14f90:	bl	14ffc <__assert_fail@plt+0x40c8>
   14f94:	cmp	r0, #0
   14f98:	moveq	r4, #1
   14f9c:	ldrbeq	r3, [r7]
   14fa0:	streq	r3, [r6]
   14fa4:	mov	r0, r4
   14fa8:	add	sp, sp, #12
   14fac:	pop	{r4, r5, r6, r7, pc}
   14fb0:	push	{r4, r5, r6, lr}
   14fb4:	subs	r4, r2, #0
   14fb8:	mov	r6, r0
   14fbc:	mov	r5, r1
   14fc0:	beq	14fec <__assert_fail@plt+0x40b8>
   14fc4:	mov	r1, r4
   14fc8:	mvn	r0, #0
   14fcc:	bl	150f0 <__assert_fail@plt+0x41bc>
   14fd0:	cmp	r0, r5
   14fd4:	bcs	14fec <__assert_fail@plt+0x40b8>
   14fd8:	bl	10e5c <__errno_location@plt>
   14fdc:	mov	r3, #12
   14fe0:	str	r3, [r0]
   14fe4:	mov	r0, #0
   14fe8:	pop	{r4, r5, r6, pc}
   14fec:	mul	r1, r5, r4
   14ff0:	mov	r0, r6
   14ff4:	pop	{r4, r5, r6, lr}
   14ff8:	b	14df8 <__assert_fail@plt+0x3ec4>
   14ffc:	push	{lr}		; (str lr, [sp, #-4]!)
   15000:	sub	sp, sp, #268	; 0x10c
   15004:	add	r1, sp, #4
   15008:	ldr	r2, [pc, #60]	; 1504c <__assert_fail@plt+0x4118>
   1500c:	bl	15058 <__assert_fail@plt+0x4124>
   15010:	cmp	r0, #0
   15014:	movne	r0, #0
   15018:	bne	15044 <__assert_fail@plt+0x4110>
   1501c:	ldr	r1, [pc, #44]	; 15050 <__assert_fail@plt+0x411c>
   15020:	add	r0, sp, #4
   15024:	bl	10ce8 <strcmp@plt>
   15028:	cmp	r0, #0
   1502c:	beq	15044 <__assert_fail@plt+0x4110>
   15030:	add	r0, sp, #4
   15034:	ldr	r1, [pc, #24]	; 15054 <__assert_fail@plt+0x4120>
   15038:	bl	10ce8 <strcmp@plt>
   1503c:	adds	r0, r0, #0
   15040:	movne	r0, #1
   15044:	add	sp, sp, #268	; 0x10c
   15048:	pop	{pc}		; (ldr pc, [sp], #4)
   1504c:	andeq	r0, r0, r1, lsl #2
   15050:	andeq	r6, r1, r8, lsl #1
   15054:	andeq	r6, r1, ip, lsl #1
   15058:	push	{r4, r5, r6, lr}
   1505c:	mov	r5, r1
   15060:	mov	r1, #0
   15064:	mov	r4, r2
   15068:	bl	10ed4 <setlocale@plt>
   1506c:	subs	r6, r0, #0
   15070:	beq	150cc <__assert_fail@plt+0x4198>
   15074:	bl	10e44 <strlen@plt>
   15078:	cmp	r4, r0
   1507c:	bhi	150b4 <__assert_fail@plt+0x4180>
   15080:	cmp	r4, #0
   15084:	bne	15090 <__assert_fail@plt+0x415c>
   15088:	mov	r0, #34	; 0x22
   1508c:	pop	{r4, r5, r6, pc}
   15090:	sub	r4, r4, #1
   15094:	mov	r1, r6
   15098:	mov	r2, r4
   1509c:	mov	r0, r5
   150a0:	bl	10d30 <memcpy@plt>
   150a4:	mov	r3, #0
   150a8:	strb	r3, [r5, r4]
   150ac:	mov	r0, #34	; 0x22
   150b0:	pop	{r4, r5, r6, pc}
   150b4:	add	r2, r0, #1
   150b8:	mov	r1, r6
   150bc:	mov	r0, r5
   150c0:	bl	10d30 <memcpy@plt>
   150c4:	mov	r0, #0
   150c8:	pop	{r4, r5, r6, pc}
   150cc:	cmp	r4, #0
   150d0:	beq	150e0 <__assert_fail@plt+0x41ac>
   150d4:	strb	r6, [r5]
   150d8:	mov	r0, #22
   150dc:	pop	{r4, r5, r6, pc}
   150e0:	mov	r0, #22
   150e4:	pop	{r4, r5, r6, pc}
   150e8:	mov	r1, #0
   150ec:	b	10ed4 <setlocale@plt>
   150f0:	subs	r2, r1, #1
   150f4:	bxeq	lr
   150f8:	bcc	152d0 <__assert_fail@plt+0x439c>
   150fc:	cmp	r0, r1
   15100:	bls	152b4 <__assert_fail@plt+0x4380>
   15104:	tst	r1, r2
   15108:	beq	152c0 <__assert_fail@plt+0x438c>
   1510c:	clz	r3, r0
   15110:	clz	r2, r1
   15114:	sub	r3, r2, r3
   15118:	rsbs	r3, r3, #31
   1511c:	addne	r3, r3, r3, lsl #1
   15120:	mov	r2, #0
   15124:	addne	pc, pc, r3, lsl #2
   15128:	nop			; (mov r0, r0)
   1512c:	cmp	r0, r1, lsl #31
   15130:	adc	r2, r2, r2
   15134:	subcs	r0, r0, r1, lsl #31
   15138:	cmp	r0, r1, lsl #30
   1513c:	adc	r2, r2, r2
   15140:	subcs	r0, r0, r1, lsl #30
   15144:	cmp	r0, r1, lsl #29
   15148:	adc	r2, r2, r2
   1514c:	subcs	r0, r0, r1, lsl #29
   15150:	cmp	r0, r1, lsl #28
   15154:	adc	r2, r2, r2
   15158:	subcs	r0, r0, r1, lsl #28
   1515c:	cmp	r0, r1, lsl #27
   15160:	adc	r2, r2, r2
   15164:	subcs	r0, r0, r1, lsl #27
   15168:	cmp	r0, r1, lsl #26
   1516c:	adc	r2, r2, r2
   15170:	subcs	r0, r0, r1, lsl #26
   15174:	cmp	r0, r1, lsl #25
   15178:	adc	r2, r2, r2
   1517c:	subcs	r0, r0, r1, lsl #25
   15180:	cmp	r0, r1, lsl #24
   15184:	adc	r2, r2, r2
   15188:	subcs	r0, r0, r1, lsl #24
   1518c:	cmp	r0, r1, lsl #23
   15190:	adc	r2, r2, r2
   15194:	subcs	r0, r0, r1, lsl #23
   15198:	cmp	r0, r1, lsl #22
   1519c:	adc	r2, r2, r2
   151a0:	subcs	r0, r0, r1, lsl #22
   151a4:	cmp	r0, r1, lsl #21
   151a8:	adc	r2, r2, r2
   151ac:	subcs	r0, r0, r1, lsl #21
   151b0:	cmp	r0, r1, lsl #20
   151b4:	adc	r2, r2, r2
   151b8:	subcs	r0, r0, r1, lsl #20
   151bc:	cmp	r0, r1, lsl #19
   151c0:	adc	r2, r2, r2
   151c4:	subcs	r0, r0, r1, lsl #19
   151c8:	cmp	r0, r1, lsl #18
   151cc:	adc	r2, r2, r2
   151d0:	subcs	r0, r0, r1, lsl #18
   151d4:	cmp	r0, r1, lsl #17
   151d8:	adc	r2, r2, r2
   151dc:	subcs	r0, r0, r1, lsl #17
   151e0:	cmp	r0, r1, lsl #16
   151e4:	adc	r2, r2, r2
   151e8:	subcs	r0, r0, r1, lsl #16
   151ec:	cmp	r0, r1, lsl #15
   151f0:	adc	r2, r2, r2
   151f4:	subcs	r0, r0, r1, lsl #15
   151f8:	cmp	r0, r1, lsl #14
   151fc:	adc	r2, r2, r2
   15200:	subcs	r0, r0, r1, lsl #14
   15204:	cmp	r0, r1, lsl #13
   15208:	adc	r2, r2, r2
   1520c:	subcs	r0, r0, r1, lsl #13
   15210:	cmp	r0, r1, lsl #12
   15214:	adc	r2, r2, r2
   15218:	subcs	r0, r0, r1, lsl #12
   1521c:	cmp	r0, r1, lsl #11
   15220:	adc	r2, r2, r2
   15224:	subcs	r0, r0, r1, lsl #11
   15228:	cmp	r0, r1, lsl #10
   1522c:	adc	r2, r2, r2
   15230:	subcs	r0, r0, r1, lsl #10
   15234:	cmp	r0, r1, lsl #9
   15238:	adc	r2, r2, r2
   1523c:	subcs	r0, r0, r1, lsl #9
   15240:	cmp	r0, r1, lsl #8
   15244:	adc	r2, r2, r2
   15248:	subcs	r0, r0, r1, lsl #8
   1524c:	cmp	r0, r1, lsl #7
   15250:	adc	r2, r2, r2
   15254:	subcs	r0, r0, r1, lsl #7
   15258:	cmp	r0, r1, lsl #6
   1525c:	adc	r2, r2, r2
   15260:	subcs	r0, r0, r1, lsl #6
   15264:	cmp	r0, r1, lsl #5
   15268:	adc	r2, r2, r2
   1526c:	subcs	r0, r0, r1, lsl #5
   15270:	cmp	r0, r1, lsl #4
   15274:	adc	r2, r2, r2
   15278:	subcs	r0, r0, r1, lsl #4
   1527c:	cmp	r0, r1, lsl #3
   15280:	adc	r2, r2, r2
   15284:	subcs	r0, r0, r1, lsl #3
   15288:	cmp	r0, r1, lsl #2
   1528c:	adc	r2, r2, r2
   15290:	subcs	r0, r0, r1, lsl #2
   15294:	cmp	r0, r1, lsl #1
   15298:	adc	r2, r2, r2
   1529c:	subcs	r0, r0, r1, lsl #1
   152a0:	cmp	r0, r1
   152a4:	adc	r2, r2, r2
   152a8:	subcs	r0, r0, r1
   152ac:	mov	r0, r2
   152b0:	bx	lr
   152b4:	moveq	r0, #1
   152b8:	movne	r0, #0
   152bc:	bx	lr
   152c0:	clz	r2, r1
   152c4:	rsb	r2, r2, #31
   152c8:	lsr	r0, r0, r2
   152cc:	bx	lr
   152d0:	cmp	r0, #0
   152d4:	mvnne	r0, #0
   152d8:	b	15578 <__assert_fail@plt+0x4644>
   152dc:	cmp	r1, #0
   152e0:	beq	152d0 <__assert_fail@plt+0x439c>
   152e4:	push	{r0, r1, lr}
   152e8:	bl	150f0 <__assert_fail@plt+0x41bc>
   152ec:	pop	{r1, r2, lr}
   152f0:	mul	r3, r2, r0
   152f4:	sub	r1, r1, r3
   152f8:	bx	lr
   152fc:	cmp	r1, #0
   15300:	beq	1550c <__assert_fail@plt+0x45d8>
   15304:	eor	ip, r0, r1
   15308:	rsbmi	r1, r1, #0
   1530c:	subs	r2, r1, #1
   15310:	beq	154d8 <__assert_fail@plt+0x45a4>
   15314:	movs	r3, r0
   15318:	rsbmi	r3, r0, #0
   1531c:	cmp	r3, r1
   15320:	bls	154e4 <__assert_fail@plt+0x45b0>
   15324:	tst	r1, r2
   15328:	beq	154f4 <__assert_fail@plt+0x45c0>
   1532c:	clz	r2, r3
   15330:	clz	r0, r1
   15334:	sub	r2, r0, r2
   15338:	rsbs	r2, r2, #31
   1533c:	addne	r2, r2, r2, lsl #1
   15340:	mov	r0, #0
   15344:	addne	pc, pc, r2, lsl #2
   15348:	nop			; (mov r0, r0)
   1534c:	cmp	r3, r1, lsl #31
   15350:	adc	r0, r0, r0
   15354:	subcs	r3, r3, r1, lsl #31
   15358:	cmp	r3, r1, lsl #30
   1535c:	adc	r0, r0, r0
   15360:	subcs	r3, r3, r1, lsl #30
   15364:	cmp	r3, r1, lsl #29
   15368:	adc	r0, r0, r0
   1536c:	subcs	r3, r3, r1, lsl #29
   15370:	cmp	r3, r1, lsl #28
   15374:	adc	r0, r0, r0
   15378:	subcs	r3, r3, r1, lsl #28
   1537c:	cmp	r3, r1, lsl #27
   15380:	adc	r0, r0, r0
   15384:	subcs	r3, r3, r1, lsl #27
   15388:	cmp	r3, r1, lsl #26
   1538c:	adc	r0, r0, r0
   15390:	subcs	r3, r3, r1, lsl #26
   15394:	cmp	r3, r1, lsl #25
   15398:	adc	r0, r0, r0
   1539c:	subcs	r3, r3, r1, lsl #25
   153a0:	cmp	r3, r1, lsl #24
   153a4:	adc	r0, r0, r0
   153a8:	subcs	r3, r3, r1, lsl #24
   153ac:	cmp	r3, r1, lsl #23
   153b0:	adc	r0, r0, r0
   153b4:	subcs	r3, r3, r1, lsl #23
   153b8:	cmp	r3, r1, lsl #22
   153bc:	adc	r0, r0, r0
   153c0:	subcs	r3, r3, r1, lsl #22
   153c4:	cmp	r3, r1, lsl #21
   153c8:	adc	r0, r0, r0
   153cc:	subcs	r3, r3, r1, lsl #21
   153d0:	cmp	r3, r1, lsl #20
   153d4:	adc	r0, r0, r0
   153d8:	subcs	r3, r3, r1, lsl #20
   153dc:	cmp	r3, r1, lsl #19
   153e0:	adc	r0, r0, r0
   153e4:	subcs	r3, r3, r1, lsl #19
   153e8:	cmp	r3, r1, lsl #18
   153ec:	adc	r0, r0, r0
   153f0:	subcs	r3, r3, r1, lsl #18
   153f4:	cmp	r3, r1, lsl #17
   153f8:	adc	r0, r0, r0
   153fc:	subcs	r3, r3, r1, lsl #17
   15400:	cmp	r3, r1, lsl #16
   15404:	adc	r0, r0, r0
   15408:	subcs	r3, r3, r1, lsl #16
   1540c:	cmp	r3, r1, lsl #15
   15410:	adc	r0, r0, r0
   15414:	subcs	r3, r3, r1, lsl #15
   15418:	cmp	r3, r1, lsl #14
   1541c:	adc	r0, r0, r0
   15420:	subcs	r3, r3, r1, lsl #14
   15424:	cmp	r3, r1, lsl #13
   15428:	adc	r0, r0, r0
   1542c:	subcs	r3, r3, r1, lsl #13
   15430:	cmp	r3, r1, lsl #12
   15434:	adc	r0, r0, r0
   15438:	subcs	r3, r3, r1, lsl #12
   1543c:	cmp	r3, r1, lsl #11
   15440:	adc	r0, r0, r0
   15444:	subcs	r3, r3, r1, lsl #11
   15448:	cmp	r3, r1, lsl #10
   1544c:	adc	r0, r0, r0
   15450:	subcs	r3, r3, r1, lsl #10
   15454:	cmp	r3, r1, lsl #9
   15458:	adc	r0, r0, r0
   1545c:	subcs	r3, r3, r1, lsl #9
   15460:	cmp	r3, r1, lsl #8
   15464:	adc	r0, r0, r0
   15468:	subcs	r3, r3, r1, lsl #8
   1546c:	cmp	r3, r1, lsl #7
   15470:	adc	r0, r0, r0
   15474:	subcs	r3, r3, r1, lsl #7
   15478:	cmp	r3, r1, lsl #6
   1547c:	adc	r0, r0, r0
   15480:	subcs	r3, r3, r1, lsl #6
   15484:	cmp	r3, r1, lsl #5
   15488:	adc	r0, r0, r0
   1548c:	subcs	r3, r3, r1, lsl #5
   15490:	cmp	r3, r1, lsl #4
   15494:	adc	r0, r0, r0
   15498:	subcs	r3, r3, r1, lsl #4
   1549c:	cmp	r3, r1, lsl #3
   154a0:	adc	r0, r0, r0
   154a4:	subcs	r3, r3, r1, lsl #3
   154a8:	cmp	r3, r1, lsl #2
   154ac:	adc	r0, r0, r0
   154b0:	subcs	r3, r3, r1, lsl #2
   154b4:	cmp	r3, r1, lsl #1
   154b8:	adc	r0, r0, r0
   154bc:	subcs	r3, r3, r1, lsl #1
   154c0:	cmp	r3, r1
   154c4:	adc	r0, r0, r0
   154c8:	subcs	r3, r3, r1
   154cc:	cmp	ip, #0
   154d0:	rsbmi	r0, r0, #0
   154d4:	bx	lr
   154d8:	teq	ip, r0
   154dc:	rsbmi	r0, r0, #0
   154e0:	bx	lr
   154e4:	movcc	r0, #0
   154e8:	asreq	r0, ip, #31
   154ec:	orreq	r0, r0, #1
   154f0:	bx	lr
   154f4:	clz	r2, r1
   154f8:	rsb	r2, r2, #31
   154fc:	cmp	ip, #0
   15500:	lsr	r0, r3, r2
   15504:	rsbmi	r0, r0, #0
   15508:	bx	lr
   1550c:	cmp	r0, #0
   15510:	mvngt	r0, #-2147483648	; 0x80000000
   15514:	movlt	r0, #-2147483648	; 0x80000000
   15518:	b	15578 <__assert_fail@plt+0x4644>
   1551c:	cmp	r1, #0
   15520:	beq	1550c <__assert_fail@plt+0x45d8>
   15524:	push	{r0, r1, lr}
   15528:	bl	15304 <__assert_fail@plt+0x43d0>
   1552c:	pop	{r1, r2, lr}
   15530:	mul	r3, r2, r0
   15534:	sub	r1, r1, r3
   15538:	bx	lr
   1553c:	cmp	r3, #0
   15540:	cmpeq	r2, #0
   15544:	bne	1555c <__assert_fail@plt+0x4628>
   15548:	cmp	r1, #0
   1554c:	cmpeq	r0, #0
   15550:	mvnne	r1, #0
   15554:	mvnne	r0, #0
   15558:	b	15578 <__assert_fail@plt+0x4644>
   1555c:	sub	sp, sp, #8
   15560:	push	{sp, lr}
   15564:	bl	15588 <__assert_fail@plt+0x4654>
   15568:	ldr	lr, [sp, #4]
   1556c:	add	sp, sp, #8
   15570:	pop	{r2, r3}
   15574:	bx	lr
   15578:	push	{r1, lr}
   1557c:	mov	r0, #8
   15580:	bl	10cdc <raise@plt>
   15584:	pop	{r1, pc}
   15588:	cmp	r1, r3
   1558c:	push	{r4, r5, r6, r7, r8, r9, lr}
   15590:	cmpeq	r0, r2
   15594:	mov	r4, r0
   15598:	mov	r5, r1
   1559c:	ldr	r9, [sp, #28]
   155a0:	movcc	r0, #0
   155a4:	movcc	r1, #0
   155a8:	bcc	156a0 <__assert_fail@plt+0x476c>
   155ac:	cmp	r3, #0
   155b0:	clzeq	ip, r2
   155b4:	clzne	ip, r3
   155b8:	addeq	ip, ip, #32
   155bc:	cmp	r5, #0
   155c0:	clzeq	r1, r4
   155c4:	addeq	r1, r1, #32
   155c8:	clzne	r1, r5
   155cc:	sub	ip, ip, r1
   155d0:	sub	lr, ip, #32
   155d4:	lsl	r7, r3, ip
   155d8:	rsb	r8, ip, #32
   155dc:	orr	r7, r7, r2, lsl lr
   155e0:	orr	r7, r7, r2, lsr r8
   155e4:	lsl	r6, r2, ip
   155e8:	cmp	r5, r7
   155ec:	cmpeq	r4, r6
   155f0:	movcc	r0, #0
   155f4:	movcc	r1, #0
   155f8:	bcc	15614 <__assert_fail@plt+0x46e0>
   155fc:	mov	r3, #1
   15600:	subs	r4, r4, r6
   15604:	lsl	r1, r3, lr
   15608:	lsl	r0, r3, ip
   1560c:	orr	r1, r1, r3, lsr r8
   15610:	sbc	r5, r5, r7
   15614:	cmp	ip, #0
   15618:	beq	156a0 <__assert_fail@plt+0x476c>
   1561c:	lsrs	r3, r7, #1
   15620:	rrx	r2, r6
   15624:	mov	r6, ip
   15628:	b	1564c <__assert_fail@plt+0x4718>
   1562c:	subs	r4, r4, r2
   15630:	sbc	r5, r5, r3
   15634:	adds	r4, r4, r4
   15638:	adc	r5, r5, r5
   1563c:	adds	r4, r4, #1
   15640:	adc	r5, r5, #0
   15644:	subs	r6, r6, #1
   15648:	beq	15668 <__assert_fail@plt+0x4734>
   1564c:	cmp	r5, r3
   15650:	cmpeq	r4, r2
   15654:	bcs	1562c <__assert_fail@plt+0x46f8>
   15658:	adds	r4, r4, r4
   1565c:	adc	r5, r5, r5
   15660:	subs	r6, r6, #1
   15664:	bne	1564c <__assert_fail@plt+0x4718>
   15668:	lsr	r6, r4, ip
   1566c:	lsr	r7, r5, ip
   15670:	orr	r6, r6, r5, lsl r8
   15674:	adds	r2, r0, r4
   15678:	orr	r6, r6, r5, lsr lr
   1567c:	adc	r3, r1, r5
   15680:	lsl	r1, r7, ip
   15684:	orr	r1, r1, r6, lsl lr
   15688:	lsl	r0, r6, ip
   1568c:	orr	r1, r1, r6, lsr r8
   15690:	subs	r0, r2, r0
   15694:	mov	r4, r6
   15698:	mov	r5, r7
   1569c:	sbc	r1, r3, r1
   156a0:	cmp	r9, #0
   156a4:	popeq	{r4, r5, r6, r7, r8, r9, pc}
   156a8:	strd	r4, [r9]
   156ac:	pop	{r4, r5, r6, r7, r8, r9, pc}
   156b0:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   156b4:	mov	r7, r0
   156b8:	ldr	r6, [pc, #72]	; 15708 <__assert_fail@plt+0x47d4>
   156bc:	ldr	r5, [pc, #72]	; 1570c <__assert_fail@plt+0x47d8>
   156c0:	add	r6, pc, r6
   156c4:	add	r5, pc, r5
   156c8:	sub	r6, r6, r5
   156cc:	mov	r8, r1
   156d0:	mov	r9, r2
   156d4:	bl	10ca4 <calloc@plt-0x20>
   156d8:	asrs	r6, r6, #2
   156dc:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   156e0:	mov	r4, #0
   156e4:	add	r4, r4, #1
   156e8:	ldr	r3, [r5], #4
   156ec:	mov	r2, r9
   156f0:	mov	r1, r8
   156f4:	mov	r0, r7
   156f8:	blx	r3
   156fc:	cmp	r6, r4
   15700:	bne	156e4 <__assert_fail@plt+0x47b0>
   15704:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   15708:	andeq	r1, r1, r8, asr #16
   1570c:	andeq	r1, r1, r0, asr #16
   15710:	bx	lr
   15714:	ldr	r3, [pc, #12]	; 15728 <__assert_fail@plt+0x47f4>
   15718:	mov	r1, #0
   1571c:	add	r3, pc, r3
   15720:	ldr	r2, [r3]
   15724:	b	10e68 <__cxa_atexit@plt>
   15728:	andeq	r1, r1, r4, asr #19

Disassembly of section .fini:

0001572c <.fini>:
   1572c:	push	{r3, lr}
   15730:	pop	{r3, pc}
