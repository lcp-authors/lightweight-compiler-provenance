
../repos/coreutils/src/factor:     file format elf32-littlearm


Disassembly of section .init:

000113a0 <.init>:
   113a0:	push	{r3, lr}
   113a4:	bl	11a3c <__assert_fail@plt+0x25c>
   113a8:	pop	{r3, pc}

Disassembly of section .plt:

000113ac <calloc@plt-0x14>:
   113ac:	push	{lr}		; (str lr, [sp, #-4]!)
   113b0:	ldr	lr, [pc, #4]	; 113bc <calloc@plt-0x4>
   113b4:	add	lr, pc, lr
   113b8:	ldr	pc, [lr, #8]!
   113bc:	andeq	sp, r1, r4, asr #24

000113c0 <calloc@plt>:
   113c0:	add	ip, pc, #0, 12
   113c4:	add	ip, ip, #118784	; 0x1d000
   113c8:	ldr	pc, [ip, #3140]!	; 0xc44

000113cc <fputs_unlocked@plt>:
   113cc:	add	ip, pc, #0, 12
   113d0:	add	ip, ip, #118784	; 0x1d000
   113d4:	ldr	pc, [ip, #3132]!	; 0xc3c

000113d8 <raise@plt>:
   113d8:	add	ip, pc, #0, 12
   113dc:	add	ip, ip, #118784	; 0x1d000
   113e0:	ldr	pc, [ip, #3124]!	; 0xc34

000113e4 <__gmpz_scan1@plt>:
   113e4:	add	ip, pc, #0, 12
   113e8:	add	ip, ip, #118784	; 0x1d000
   113ec:	ldr	pc, [ip, #3116]!	; 0xc2c

000113f0 <iconv_close@plt>:
   113f0:	add	ip, pc, #0, 12
   113f4:	add	ip, ip, #118784	; 0x1d000
   113f8:	ldr	pc, [ip, #3108]!	; 0xc24

000113fc <iconv@plt>:
   113fc:	add	ip, pc, #0, 12
   11400:	add	ip, ip, #118784	; 0x1d000
   11404:	ldr	pc, [ip, #3100]!	; 0xc1c

00011408 <strcmp@plt>:
   11408:	add	ip, pc, #0, 12
   1140c:	add	ip, ip, #118784	; 0x1d000
   11410:	ldr	pc, [ip, #3092]!	; 0xc14

00011414 <fflush@plt>:
   11414:	add	ip, pc, #0, 12
   11418:	add	ip, ip, #118784	; 0x1d000
   1141c:	ldr	pc, [ip, #3084]!	; 0xc0c

00011420 <__gmpz_sub_ui@plt>:
   11420:	add	ip, pc, #0, 12
   11424:	add	ip, ip, #118784	; 0x1d000
   11428:	ldr	pc, [ip, #3076]!	; 0xc04

0001142c <__gmpz_clears@plt>:
   1142c:	add	ip, pc, #0, 12
   11430:	add	ip, ip, #118784	; 0x1d000
   11434:	ldr	pc, [ip, #3068]!	; 0xbfc

00011438 <wcwidth@plt>:
   11438:	add	ip, pc, #0, 12
   1143c:	add	ip, ip, #118784	; 0x1d000
   11440:	ldr	pc, [ip, #3060]!	; 0xbf4

00011444 <memmove@plt>:
   11444:	add	ip, pc, #0, 12
   11448:	add	ip, ip, #118784	; 0x1d000
   1144c:	ldr	pc, [ip, #3052]!	; 0xbec

00011450 <__gmpz_set_ui@plt>:
   11450:	add	ip, pc, #0, 12
   11454:	add	ip, ip, #118784	; 0x1d000
   11458:	ldr	pc, [ip, #3044]!	; 0xbe4

0001145c <free@plt>:
   1145c:	add	ip, pc, #0, 12
   11460:	add	ip, ip, #118784	; 0x1d000
   11464:	ldr	pc, [ip, #3036]!	; 0xbdc

00011468 <_exit@plt>:
   11468:	add	ip, pc, #0, 12
   1146c:	add	ip, ip, #118784	; 0x1d000
   11470:	ldr	pc, [ip, #3028]!	; 0xbd4

00011474 <memcpy@plt>:
   11474:	add	ip, pc, #0, 12
   11478:	add	ip, ip, #118784	; 0x1d000
   1147c:	ldr	pc, [ip, #3020]!	; 0xbcc

00011480 <__gmpz_sub@plt>:
   11480:	add	ip, pc, #0, 12
   11484:	add	ip, ip, #118784	; 0x1d000
   11488:	ldr	pc, [ip, #3012]!	; 0xbc4

0001148c <mbsinit@plt>:
   1148c:	add	ip, pc, #0, 12
   11490:	add	ip, ip, #118784	; 0x1d000
   11494:	ldr	pc, [ip, #3004]!	; 0xbbc

00011498 <memcmp@plt>:
   11498:	add	ip, pc, #0, 12
   1149c:	add	ip, ip, #118784	; 0x1d000
   114a0:	ldr	pc, [ip, #2996]!	; 0xbb4

000114a4 <fputc_unlocked@plt>:
   114a4:	add	ip, pc, #0, 12
   114a8:	add	ip, ip, #118784	; 0x1d000
   114ac:	ldr	pc, [ip, #2988]!	; 0xbac

000114b0 <getc_unlocked@plt>:
   114b0:	add	ip, pc, #0, 12
   114b4:	add	ip, ip, #118784	; 0x1d000
   114b8:	ldr	pc, [ip, #2980]!	; 0xba4

000114bc <dcgettext@plt>:
   114bc:	add	ip, pc, #0, 12
   114c0:	add	ip, ip, #118784	; 0x1d000
   114c4:	ldr	pc, [ip, #2972]!	; 0xb9c

000114c8 <__gmpz_powm@plt>:
   114c8:	add	ip, pc, #0, 12
   114cc:	add	ip, ip, #118784	; 0x1d000
   114d0:	ldr	pc, [ip, #2964]!	; 0xb94

000114d4 <strdup@plt>:
   114d4:	add	ip, pc, #0, 12
   114d8:	add	ip, ip, #118784	; 0x1d000
   114dc:	ldr	pc, [ip, #2956]!	; 0xb8c

000114e0 <__gmpz_divexact@plt>:
   114e0:	add	ip, pc, #0, 12
   114e4:	add	ip, ip, #118784	; 0x1d000
   114e8:	ldr	pc, [ip, #2948]!	; 0xb84

000114ec <__gmpz_inits@plt>:
   114ec:	add	ip, pc, #0, 12
   114f0:	add	ip, ip, #118784	; 0x1d000
   114f4:	ldr	pc, [ip, #2940]!	; 0xb7c

000114f8 <__gmpz_set@plt>:
   114f8:	add	ip, pc, #0, 12
   114fc:	add	ip, ip, #118784	; 0x1d000
   11500:	ldr	pc, [ip, #2932]!	; 0xb74

00011504 <realloc@plt>:
   11504:	add	ip, pc, #0, 12
   11508:	add	ip, ip, #118784	; 0x1d000
   1150c:	ldr	pc, [ip, #2924]!	; 0xb6c

00011510 <__gmpz_mul@plt>:
   11510:	add	ip, pc, #0, 12
   11514:	add	ip, ip, #118784	; 0x1d000
   11518:	ldr	pc, [ip, #2916]!	; 0xb64

0001151c <__gmpz_tdiv_q_ui@plt>:
   1151c:	add	ip, pc, #0, 12
   11520:	add	ip, ip, #118784	; 0x1d000
   11524:	ldr	pc, [ip, #2908]!	; 0xb5c

00011528 <textdomain@plt>:
   11528:	add	ip, pc, #0, 12
   1152c:	add	ip, ip, #118784	; 0x1d000
   11530:	ldr	pc, [ip, #2900]!	; 0xb54

00011534 <iswcntrl@plt>:
   11534:	add	ip, pc, #0, 12
   11538:	add	ip, ip, #118784	; 0x1d000
   1153c:	ldr	pc, [ip, #2892]!	; 0xb4c

00011540 <__gmpz_out_str@plt>:
   11540:	add	ip, pc, #0, 12
   11544:	add	ip, ip, #118784	; 0x1d000
   11548:	ldr	pc, [ip, #2884]!	; 0xb44

0001154c <fflush_unlocked@plt>:
   1154c:	add	ip, pc, #0, 12
   11550:	add	ip, ip, #118784	; 0x1d000
   11554:	ldr	pc, [ip, #2876]!	; 0xb3c

00011558 <iswprint@plt>:
   11558:	add	ip, pc, #0, 12
   1155c:	add	ip, ip, #118784	; 0x1d000
   11560:	ldr	pc, [ip, #2868]!	; 0xb34

00011564 <lseek64@plt>:
   11564:	add	ip, pc, #0, 12
   11568:	add	ip, ip, #118784	; 0x1d000
   1156c:	ldr	pc, [ip, #2860]!	; 0xb2c

00011570 <__gmpz_fdiv_q_2exp@plt>:
   11570:	add	ip, pc, #0, 12
   11574:	add	ip, ip, #118784	; 0x1d000
   11578:	ldr	pc, [ip, #2852]!	; 0xb24

0001157c <__ctype_get_mb_cur_max@plt>:
   1157c:	add	ip, pc, #0, 12
   11580:	add	ip, ip, #118784	; 0x1d000
   11584:	ldr	pc, [ip, #2844]!	; 0xb1c

00011588 <__fpending@plt>:
   11588:	add	ip, pc, #0, 12
   1158c:	add	ip, ip, #118784	; 0x1d000
   11590:	ldr	pc, [ip, #2836]!	; 0xb14

00011594 <ferror_unlocked@plt>:
   11594:	add	ip, pc, #0, 12
   11598:	add	ip, ip, #118784	; 0x1d000
   1159c:	ldr	pc, [ip, #2828]!	; 0xb0c

000115a0 <mbrtowc@plt>:
   115a0:	add	ip, pc, #0, 12
   115a4:	add	ip, ip, #118784	; 0x1d000
   115a8:	ldr	pc, [ip, #2820]!	; 0xb04

000115ac <error@plt>:
   115ac:	add	ip, pc, #0, 12
   115b0:	add	ip, ip, #118784	; 0x1d000
   115b4:	ldr	pc, [ip, #2812]!	; 0xafc

000115b8 <malloc@plt>:
   115b8:	add	ip, pc, #0, 12
   115bc:	add	ip, ip, #118784	; 0x1d000
   115c0:	ldr	pc, [ip, #2804]!	; 0xaf4

000115c4 <iconv_open@plt>:
   115c4:	add	ip, pc, #0, 12
   115c8:	add	ip, ip, #118784	; 0x1d000
   115cc:	ldr	pc, [ip, #2796]!	; 0xaec

000115d0 <__libc_start_main@plt>:
   115d0:	add	ip, pc, #0, 12
   115d4:	add	ip, ip, #118784	; 0x1d000
   115d8:	ldr	pc, [ip, #2788]!	; 0xae4

000115dc <__freading@plt>:
   115dc:	add	ip, pc, #0, 12
   115e0:	add	ip, ip, #118784	; 0x1d000
   115e4:	ldr	pc, [ip, #2780]!	; 0xadc

000115e8 <__gmpz_init_set_si@plt>:
   115e8:	add	ip, pc, #0, 12
   115ec:	add	ip, ip, #118784	; 0x1d000
   115f0:	ldr	pc, [ip, #2772]!	; 0xad4

000115f4 <__gmpz_add_ui@plt>:
   115f4:	add	ip, pc, #0, 12
   115f8:	add	ip, ip, #118784	; 0x1d000
   115fc:	ldr	pc, [ip, #2764]!	; 0xacc

00011600 <__gmon_start__@plt>:
   11600:	add	ip, pc, #0, 12
   11604:	add	ip, ip, #118784	; 0x1d000
   11608:	ldr	pc, [ip, #2756]!	; 0xac4

0001160c <getopt_long@plt>:
   1160c:	add	ip, pc, #0, 12
   11610:	add	ip, ip, #118784	; 0x1d000
   11614:	ldr	pc, [ip, #2748]!	; 0xabc

00011618 <__ctype_b_loc@plt>:
   11618:	add	ip, pc, #0, 12
   1161c:	add	ip, ip, #118784	; 0x1d000
   11620:	ldr	pc, [ip, #2740]!	; 0xab4

00011624 <exit@plt>:
   11624:	add	ip, pc, #0, 12
   11628:	add	ip, ip, #118784	; 0x1d000
   1162c:	ldr	pc, [ip, #2732]!	; 0xaac

00011630 <iswspace@plt>:
   11630:	add	ip, pc, #0, 12
   11634:	add	ip, ip, #118784	; 0x1d000
   11638:	ldr	pc, [ip, #2724]!	; 0xaa4

0001163c <strlen@plt>:
   1163c:	add	ip, pc, #0, 12
   11640:	add	ip, ip, #118784	; 0x1d000
   11644:	ldr	pc, [ip, #2716]!	; 0xa9c

00011648 <strchr@plt>:
   11648:	add	ip, pc, #0, 12
   1164c:	add	ip, ip, #118784	; 0x1d000
   11650:	ldr	pc, [ip, #2708]!	; 0xa94

00011654 <__gmpz_divisible_ui_p@plt>:
   11654:	add	ip, pc, #0, 12
   11658:	add	ip, ip, #118784	; 0x1d000
   1165c:	ldr	pc, [ip, #2700]!	; 0xa8c

00011660 <__gmpz_clear@plt>:
   11660:	add	ip, pc, #0, 12
   11664:	add	ip, ip, #118784	; 0x1d000
   11668:	ldr	pc, [ip, #2692]!	; 0xa84

0001166c <__errno_location@plt>:
   1166c:	add	ip, pc, #0, 12
   11670:	add	ip, ip, #118784	; 0x1d000
   11674:	ldr	pc, [ip, #2684]!	; 0xa7c

00011678 <iswalnum@plt>:
   11678:	add	ip, pc, #0, 12
   1167c:	add	ip, ip, #118784	; 0x1d000
   11680:	ldr	pc, [ip, #2676]!	; 0xa74

00011684 <__sprintf_chk@plt>:
   11684:	add	ip, pc, #0, 12
   11688:	add	ip, ip, #118784	; 0x1d000
   1168c:	ldr	pc, [ip, #2668]!	; 0xa6c

00011690 <__cxa_atexit@plt>:
   11690:	add	ip, pc, #0, 12
   11694:	add	ip, ip, #118784	; 0x1d000
   11698:	ldr	pc, [ip, #2660]!	; 0xa64

0001169c <memset@plt>:
   1169c:	add	ip, pc, #0, 12
   116a0:	add	ip, ip, #118784	; 0x1d000
   116a4:	ldr	pc, [ip, #2652]!	; 0xa5c

000116a8 <__gmpz_tdiv_q_2exp@plt>:
   116a8:	add	ip, pc, #0, 12
   116ac:	add	ip, ip, #118784	; 0x1d000
   116b0:	ldr	pc, [ip, #2644]!	; 0xa54

000116b4 <__printf_chk@plt>:
   116b4:	add	ip, pc, #0, 12
   116b8:	add	ip, ip, #118784	; 0x1d000
   116bc:	ldr	pc, [ip, #2636]!	; 0xa4c

000116c0 <write@plt>:
   116c0:	add	ip, pc, #0, 12
   116c4:	add	ip, ip, #118784	; 0x1d000
   116c8:	ldr	pc, [ip, #2628]!	; 0xa44

000116cc <fileno@plt>:
   116cc:	add	ip, pc, #0, 12
   116d0:	add	ip, ip, #118784	; 0x1d000
   116d4:	ldr	pc, [ip, #2620]!	; 0xa3c

000116d8 <__fprintf_chk@plt>:
   116d8:	add	ip, pc, #0, 12
   116dc:	add	ip, ip, #118784	; 0x1d000
   116e0:	ldr	pc, [ip, #2612]!	; 0xa34

000116e4 <memchr@plt>:
   116e4:	add	ip, pc, #0, 12
   116e8:	add	ip, ip, #118784	; 0x1d000
   116ec:	ldr	pc, [ip, #2604]!	; 0xa2c

000116f0 <fclose@plt>:
   116f0:	add	ip, pc, #0, 12
   116f4:	add	ip, ip, #118784	; 0x1d000
   116f8:	ldr	pc, [ip, #2596]!	; 0xa24

000116fc <strnlen@plt>:
   116fc:	add	ip, pc, #0, 12
   11700:	add	ip, ip, #118784	; 0x1d000
   11704:	ldr	pc, [ip, #2588]!	; 0xa1c

00011708 <fseeko64@plt>:
   11708:	add	ip, pc, #0, 12
   1170c:	add	ip, ip, #118784	; 0x1d000
   11710:	ldr	pc, [ip, #2580]!	; 0xa14

00011714 <__gmpz_mod@plt>:
   11714:	add	ip, pc, #0, 12
   11718:	add	ip, ip, #118784	; 0x1d000
   1171c:	ldr	pc, [ip, #2572]!	; 0xa0c

00011720 <__gmpz_init_set_ui@plt>:
   11720:	add	ip, pc, #0, 12
   11724:	add	ip, ip, #118784	; 0x1d000
   11728:	ldr	pc, [ip, #2564]!	; 0xa04

0001172c <__gmpz_cmp@plt>:
   1172c:	add	ip, pc, #0, 12
   11730:	add	ip, ip, #118784	; 0x1d000
   11734:	ldr	pc, [ip, #2556]!	; 0x9fc

00011738 <setlocale@plt>:
   11738:	add	ip, pc, #0, 12
   1173c:	add	ip, ip, #118784	; 0x1d000
   11740:	ldr	pc, [ip, #2548]!	; 0x9f4

00011744 <strrchr@plt>:
   11744:	add	ip, pc, #0, 12
   11748:	add	ip, ip, #118784	; 0x1d000
   1174c:	ldr	pc, [ip, #2540]!	; 0x9ec

00011750 <nl_langinfo@plt>:
   11750:	add	ip, pc, #0, 12
   11754:	add	ip, ip, #118784	; 0x1d000
   11758:	ldr	pc, [ip, #2532]!	; 0x9e4

0001175c <__gmpz_gcd@plt>:
   1175c:	add	ip, pc, #0, 12
   11760:	add	ip, ip, #118784	; 0x1d000
   11764:	ldr	pc, [ip, #2524]!	; 0x9dc

00011768 <__gmpz_init_set_str@plt>:
   11768:	add	ip, pc, #0, 12
   1176c:	add	ip, ip, #118784	; 0x1d000
   11770:	ldr	pc, [ip, #2516]!	; 0x9d4

00011774 <bindtextdomain@plt>:
   11774:	add	ip, pc, #0, 12
   11778:	add	ip, ip, #118784	; 0x1d000
   1177c:	ldr	pc, [ip, #2508]!	; 0x9cc

00011780 <__gmpz_cmp_ui@plt>:
   11780:	add	ip, pc, #0, 12
   11784:	add	ip, ip, #118784	; 0x1d000
   11788:	ldr	pc, [ip, #2500]!	; 0x9c4

0001178c <__gmpz_init@plt>:
   1178c:	add	ip, pc, #0, 12
   11790:	add	ip, ip, #118784	; 0x1d000
   11794:	ldr	pc, [ip, #2492]!	; 0x9bc

00011798 <__gmpz_powm_ui@plt>:
   11798:	add	ip, pc, #0, 12
   1179c:	add	ip, ip, #118784	; 0x1d000
   117a0:	ldr	pc, [ip, #2484]!	; 0x9b4

000117a4 <isatty@plt>:
   117a4:	add	ip, pc, #0, 12
   117a8:	add	ip, ip, #118784	; 0x1d000
   117ac:	ldr	pc, [ip, #2476]!	; 0x9ac

000117b0 <fputs@plt>:
   117b0:	add	ip, pc, #0, 12
   117b4:	add	ip, ip, #118784	; 0x1d000
   117b8:	ldr	pc, [ip, #2468]!	; 0x9a4

000117bc <strncmp@plt>:
   117bc:	add	ip, pc, #0, 12
   117c0:	add	ip, ip, #118784	; 0x1d000
   117c4:	ldr	pc, [ip, #2460]!	; 0x99c

000117c8 <abort@plt>:
   117c8:	add	ip, pc, #0, 12
   117cc:	add	ip, ip, #118784	; 0x1d000
   117d0:	ldr	pc, [ip, #2452]!	; 0x994

000117d4 <putchar_unlocked@plt>:
   117d4:	add	ip, pc, #0, 12
   117d8:	add	ip, ip, #118784	; 0x1d000
   117dc:	ldr	pc, [ip, #2444]!	; 0x98c

000117e0 <__assert_fail@plt>:
   117e0:	add	ip, pc, #0, 12
   117e4:	add	ip, ip, #118784	; 0x1d000
   117e8:	ldr	pc, [ip, #2436]!	; 0x984

Disassembly of section .text:

000117f0 <.text>:
   117f0:	push	{r4, lr}
   117f4:	bl	1166c <__errno_location@plt>
   117f8:	mov	r3, #12
   117fc:	str	r3, [r0]
   11800:	mov	r0, #0
   11804:	pop	{r4, pc}
   11808:	push	{r4, r5, r6, r7, r8, r9, lr}
   1180c:	mov	r5, r0
   11810:	sub	sp, sp, #28
   11814:	mov	r4, r1
   11818:	ldr	r6, [pc, #404]	; 119b4 <__assert_fail@plt+0x1d4>
   1181c:	ldr	r0, [r1]
   11820:	bl	16a4c <__assert_fail@plt+0x526c>
   11824:	ldr	r1, [pc, #396]	; 119b8 <__assert_fail@plt+0x1d8>
   11828:	mov	r0, #6
   1182c:	bl	11738 <setlocale@plt>
   11830:	ldr	r1, [pc, #388]	; 119bc <__assert_fail@plt+0x1dc>
   11834:	ldr	r0, [pc, #388]	; 119c0 <__assert_fail@plt+0x1e0>
   11838:	bl	11774 <bindtextdomain@plt>
   1183c:	ldr	r0, [pc, #380]	; 119c0 <__assert_fail@plt+0x1e0>
   11840:	bl	11528 <textdomain@plt>
   11844:	ldr	r3, [r6]
   11848:	cmp	r3, #0
   1184c:	bne	11860 <__assert_fail@plt+0x80>
   11850:	mov	r0, #1024	; 0x400
   11854:	bl	19008 <__assert_fail@plt+0x7828>
   11858:	str	r0, [r6]
   1185c:	str	r0, [r6, #4]
   11860:	ldr	r9, [pc, #348]	; 119c4 <__assert_fail@plt+0x1e4>
   11864:	mov	r7, #0
   11868:	ldr	r8, [pc, #328]	; 119b8 <__assert_fail@plt+0x1d8>
   1186c:	ldr	r0, [pc, #340]	; 119c8 <__assert_fail@plt+0x1e8>
   11870:	bl	1aeb0 <__assert_fail@plt+0x96d0>
   11874:	ldr	r0, [pc, #336]	; 119cc <__assert_fail@plt+0x1ec>
   11878:	bl	1aeb0 <__assert_fail@plt+0x96d0>
   1187c:	mov	r3, r9
   11880:	mov	r2, r8
   11884:	str	r7, [sp]
   11888:	mov	r1, r4
   1188c:	mov	r0, r5
   11890:	bl	1160c <getopt_long@plt>
   11894:	cmn	r0, #1
   11898:	bne	118fc <__assert_fail@plt+0x11c>
   1189c:	ldr	r3, [pc, #300]	; 119d0 <__assert_fail@plt+0x1f0>
   118a0:	ldr	r6, [r3]
   118a4:	cmp	r6, r5
   118a8:	addlt	r6, r4, r6, lsl #2
   118ac:	addlt	r5, r4, r5, lsl #2
   118b0:	movlt	r4, #1
   118b4:	blt	11998 <__assert_fail@plt+0x1b8>
   118b8:	ldr	r5, [pc, #276]	; 119d4 <__assert_fail@plt+0x1f4>
   118bc:	add	r0, sp, #16
   118c0:	mov	r4, #1
   118c4:	bl	185b0 <__assert_fail@plt+0x6dd0>
   118c8:	ldr	r6, [pc, #264]	; 119d8 <__assert_fail@plt+0x1f8>
   118cc:	add	r3, sp, #16
   118d0:	mov	r2, #3
   118d4:	mov	r1, r6
   118d8:	ldr	r0, [r5]
   118dc:	bl	185c0 <__assert_fail@plt+0x6de0>
   118e0:	cmn	r0, #1
   118e4:	ldr	r0, [sp, #20]
   118e8:	beq	11984 <__assert_fail@plt+0x1a4>
   118ec:	bl	1620c <__assert_fail@plt+0x4a2c>
   118f0:	and	r4, r4, r0
   118f4:	uxtb	r4, r4
   118f8:	b	118cc <__assert_fail@plt+0xec>
   118fc:	cmn	r0, #2
   11900:	beq	1197c <__assert_fail@plt+0x19c>
   11904:	cmp	r0, #256	; 0x100
   11908:	beq	11970 <__assert_fail@plt+0x190>
   1190c:	cmn	r0, #3
   11910:	movne	r0, #1
   11914:	bne	11980 <__assert_fail@plt+0x1a0>
   11918:	ldr	r3, [pc, #188]	; 119dc <__assert_fail@plt+0x1fc>
   1191c:	ldr	r1, [pc, #188]	; 119e0 <__assert_fail@plt+0x200>
   11920:	ldr	r0, [pc, #188]	; 119e4 <__assert_fail@plt+0x204>
   11924:	ldr	r4, [r3]
   11928:	ldr	r3, [pc, #184]	; 119e8 <__assert_fail@plt+0x208>
   1192c:	ldr	r5, [r3]
   11930:	bl	16de4 <__assert_fail@plt+0x5604>
   11934:	mov	r6, r0
   11938:	ldr	r1, [pc, #172]	; 119ec <__assert_fail@plt+0x20c>
   1193c:	ldr	r0, [pc, #172]	; 119f0 <__assert_fail@plt+0x210>
   11940:	bl	16de4 <__assert_fail@plt+0x5604>
   11944:	ldr	r3, [pc, #168]	; 119f4 <__assert_fail@plt+0x214>
   11948:	ldr	r2, [pc, #168]	; 119f8 <__assert_fail@plt+0x218>
   1194c:	ldr	r1, [pc, #168]	; 119fc <__assert_fail@plt+0x21c>
   11950:	stm	sp, {r3, r6}
   11954:	mov	r3, r5
   11958:	str	r0, [sp, #8]
   1195c:	mov	r0, r4
   11960:	str	r7, [sp, #12]
   11964:	bl	18f40 <__assert_fail@plt+0x7760>
   11968:	mov	r0, #0
   1196c:	bl	11624 <exit@plt>
   11970:	mov	r3, #1
   11974:	strb	r3, [r6, #8]
   11978:	b	1187c <__assert_fail@plt+0x9c>
   1197c:	mov	r0, #0
   11980:	bl	1661c <__assert_fail@plt+0x4e3c>
   11984:	bl	16934 <__assert_fail@plt+0x5154>
   11988:	eor	r0, r4, #1
   1198c:	uxtb	r0, r0
   11990:	add	sp, sp, #28
   11994:	pop	{r4, r5, r6, r7, r8, r9, pc}
   11998:	ldr	r0, [r6], #4
   1199c:	bl	1620c <__assert_fail@plt+0x4a2c>
   119a0:	cmp	r0, #0
   119a4:	moveq	r4, #0
   119a8:	cmp	r6, r5
   119ac:	bne	11998 <__assert_fail@plt+0x1b8>
   119b0:	b	11988 <__assert_fail@plt+0x1a8>
   119b4:	andeq	pc, r2, ip, ror #3
   119b8:	andeq	lr, r1, r5, lsr r2
   119bc:	andeq	lr, r1, pc, ror r3
   119c0:	ldrdeq	lr, [r1], -ip
   119c4:	andeq	fp, r1, r4, lsr #10
   119c8:	andeq	r6, r1, r0, ror #16
   119cc:	andeq	r2, r1, r0, ror #25
   119d0:	ldrdeq	pc, [r2], -r0
   119d4:	andeq	pc, r2, r0, ror #3
   119d8:	andeq	lr, r1, r2, ror #7
   119dc:	andeq	pc, r2, r4, ror #3
   119e0:	muleq	r1, r7, r3
   119e4:	andeq	lr, r1, sl, lsr #7
   119e8:	andeq	pc, r2, r0, lsl #3
   119ec:			; <UNDEFINED> instruction: 0x0001e3bc
   119f0:	andeq	lr, r1, sl, asr #7
   119f4:	ldrdeq	lr, [r1], -r7
   119f8:	ldrdeq	lr, [r1], -r8
   119fc:	andeq	lr, r1, r9, asr r1
   11a00:	mov	fp, #0
   11a04:	mov	lr, #0
   11a08:	pop	{r1}		; (ldr r1, [sp], #4)
   11a0c:	mov	r2, sp
   11a10:	push	{r2}		; (str r2, [sp, #-4]!)
   11a14:	push	{r0}		; (str r0, [sp, #-4]!)
   11a18:	ldr	ip, [pc, #16]	; 11a30 <__assert_fail@plt+0x250>
   11a1c:	push	{ip}		; (str ip, [sp, #-4]!)
   11a20:	ldr	r0, [pc, #12]	; 11a34 <__assert_fail@plt+0x254>
   11a24:	ldr	r3, [pc, #12]	; 11a38 <__assert_fail@plt+0x258>
   11a28:	bl	115d0 <__libc_start_main@plt>
   11a2c:	bl	117c8 <abort@plt>
   11a30:	andeq	sl, r1, ip, lsr #29
   11a34:	andeq	r1, r1, r8, lsl #16
   11a38:	andeq	sl, r1, ip, asr #28
   11a3c:	ldr	r3, [pc, #20]	; 11a58 <__assert_fail@plt+0x278>
   11a40:	ldr	r2, [pc, #20]	; 11a5c <__assert_fail@plt+0x27c>
   11a44:	add	r3, pc, r3
   11a48:	ldr	r2, [r3, r2]
   11a4c:	cmp	r2, #0
   11a50:	bxeq	lr
   11a54:	b	11600 <__gmon_start__@plt>
   11a58:			; <UNDEFINED> instruction: 0x0001d5b4
   11a5c:	andeq	r0, r0, r0, ror r1
   11a60:	ldr	r0, [pc, #24]	; 11a80 <__assert_fail@plt+0x2a0>
   11a64:	ldr	r3, [pc, #24]	; 11a84 <__assert_fail@plt+0x2a4>
   11a68:	cmp	r3, r0
   11a6c:	bxeq	lr
   11a70:	ldr	r3, [pc, #16]	; 11a88 <__assert_fail@plt+0x2a8>
   11a74:	cmp	r3, #0
   11a78:	bxeq	lr
   11a7c:	bx	r3
   11a80:	andeq	pc, r2, r8, asr #3
   11a84:	andeq	pc, r2, r8, asr #3
   11a88:	andeq	r0, r0, r0
   11a8c:	ldr	r0, [pc, #36]	; 11ab8 <__assert_fail@plt+0x2d8>
   11a90:	ldr	r1, [pc, #36]	; 11abc <__assert_fail@plt+0x2dc>
   11a94:	sub	r1, r1, r0
   11a98:	asr	r1, r1, #2
   11a9c:	add	r1, r1, r1, lsr #31
   11aa0:	asrs	r1, r1, #1
   11aa4:	bxeq	lr
   11aa8:	ldr	r3, [pc, #16]	; 11ac0 <__assert_fail@plt+0x2e0>
   11aac:	cmp	r3, #0
   11ab0:	bxeq	lr
   11ab4:	bx	r3
   11ab8:	andeq	pc, r2, r8, asr #3
   11abc:	andeq	pc, r2, r8, asr #3
   11ac0:	andeq	r0, r0, r0
   11ac4:	push	{r4, lr}
   11ac8:	ldr	r4, [pc, #24]	; 11ae8 <__assert_fail@plt+0x308>
   11acc:	ldrb	r3, [r4]
   11ad0:	cmp	r3, #0
   11ad4:	popne	{r4, pc}
   11ad8:	bl	11a60 <__assert_fail@plt+0x280>
   11adc:	mov	r3, #1
   11ae0:	strb	r3, [r4]
   11ae4:	pop	{r4, pc}
   11ae8:	andeq	pc, r2, r8, ror #3
   11aec:	b	11a8c <__assert_fail@plt+0x2ac>
   11af0:	push	{r4, r5, r6, r7, r8, r9, lr}
   11af4:	mov	r4, r0
   11af8:	mov	r5, r1
   11afc:	and	r0, r2, #1
   11b00:	mov	r1, #0
   11b04:	orrs	r1, r0, r1
   11b08:	bne	11b24 <__assert_fail@plt+0x344>
   11b0c:	mov	r0, r4
   11b10:	mov	r1, r5
   11b14:	mov	r4, r2
   11b18:	mov	r5, r3
   11b1c:	mov	r2, r0
   11b20:	mov	r3, r1
   11b24:	orrs	r1, r4, r5
   11b28:	beq	11b74 <__assert_fail@plt+0x394>
   11b2c:	lsr	r1, r2, #1
   11b30:	mov	lr, #0
   11b34:	lsr	r0, r3, #1
   11b38:	orr	r1, r1, r3, lsl #31
   11b3c:	lsr	r3, r4, #1
   11b40:	and	r8, r4, #1
   11b44:	mov	r9, lr
   11b48:	orrs	ip, r8, r9
   11b4c:	lsr	r2, r5, #1
   11b50:	orr	r3, r3, r5, lsl #31
   11b54:	beq	11ba4 <__assert_fail@plt+0x3c4>
   11b58:	subs	r6, r3, r1
   11b5c:	sbc	r7, r2, r0
   11b60:	orrs	r3, r6, r7
   11b64:	bne	11b80 <__assert_fail@plt+0x3a0>
   11b68:	bic	r2, r4, #1
   11b6c:	adds	r2, r2, #1
   11b70:	adc	r3, r5, #0
   11b74:	mov	r0, r2
   11b78:	mov	r1, r3
   11b7c:	pop	{r4, r5, r6, r7, r8, r9, pc}
   11b80:	asr	ip, r7, #31
   11b84:	and	r3, r6, ip
   11b88:	and	r2, r7, ip
   11b8c:	adds	r1, r1, r3
   11b90:	eor	r3, r6, ip
   11b94:	adc	r0, r0, r2
   11b98:	eor	r2, r7, ip
   11b9c:	subs	r3, r3, ip
   11ba0:	sbc	r2, r2, ip
   11ba4:	mov	r4, r3
   11ba8:	mov	r5, r2
   11bac:	b	11b3c <__assert_fail@plt+0x35c>
   11bb0:	ldrb	r1, [r0, #250]	; 0xfa
   11bb4:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   11bb8:	mov	r5, r3
   11bbc:	mov	r4, r2
   11bc0:	add	r9, r0, #16
   11bc4:	add	lr, r0, #224	; 0xe0
   11bc8:	ldr	r8, [sp, #32]
   11bcc:	sub	r3, r1, #1
   11bd0:	cmn	r3, #1
   11bd4:	bne	11c18 <__assert_fail@plt+0x438>
   11bd8:	add	r2, r1, #2
   11bdc:	add	ip, r1, #224	; 0xe0
   11be0:	mvn	sl, #224	; 0xe0
   11be4:	add	r2, r0, r2, lsl #3
   11be8:	add	ip, r0, ip
   11bec:	sub	sl, sl, r0
   11bf0:	add	r6, sl, ip
   11bf4:	cmp	r6, r3
   11bf8:	bgt	11c34 <__assert_fail@plt+0x454>
   11bfc:	add	r3, r3, #1
   11c00:	add	r1, r1, #1
   11c04:	lsl	r2, r3, #3
   11c08:	strd	r4, [r9, r2]
   11c0c:	strb	r8, [lr, r3]
   11c10:	strb	r1, [r0, #250]	; 0xfa
   11c14:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   11c18:	lsl	r2, r3, #3
   11c1c:	ldrd	r6, [r9, r2]
   11c20:	cmp	r7, r5
   11c24:	cmpeq	r6, r4
   11c28:	bls	11c48 <__assert_fail@plt+0x468>
   11c2c:	sub	r3, r3, #1
   11c30:	b	11bd0 <__assert_fail@plt+0x3f0>
   11c34:	ldrd	r6, [r2, #-8]!
   11c38:	strd	r6, [r2, #8]
   11c3c:	ldrb	r6, [ip, #-1]!
   11c40:	strb	r6, [ip, #1]
   11c44:	b	11bf0 <__assert_fail@plt+0x410>
   11c48:	bne	11bd8 <__assert_fail@plt+0x3f8>
   11c4c:	ldrb	r2, [lr, r3]
   11c50:	add	r2, r2, r8
   11c54:	strb	r2, [lr, r3]
   11c58:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   11c5c:	push	{r4, r5, lr}
   11c60:	ldr	r1, [pc, #60]	; 11ca4 <__assert_fail@plt+0x4c4>
   11c64:	ldr	ip, [sp, #12]
   11c68:	ldr	lr, [sp, #16]
   11c6c:	add	r1, r1, ip
   11c70:	mov	ip, #0
   11c74:	cmp	ip, lr
   11c78:	bne	11c8c <__assert_fail@plt+0x4ac>
   11c7c:	mov	r1, #1
   11c80:	str	r1, [sp, #12]
   11c84:	pop	{r4, r5, lr}
   11c88:	b	11bb0 <__assert_fail@plt+0x3d0>
   11c8c:	ldrb	r4, [r1], #1
   11c90:	mov	r5, #0
   11c94:	add	ip, ip, #1
   11c98:	adds	r2, r2, r4
   11c9c:	adc	r3, r3, r5
   11ca0:	b	11c74 <__assert_fail@plt+0x494>
   11ca4:	ldrdeq	sl, [r1], -r8
   11ca8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11cac:	sub	sp, sp, #44	; 0x2c
   11cb0:	mov	r6, r3
   11cb4:	umull	r4, r5, r0, r2
   11cb8:	mov	ip, r0
   11cbc:	ldr	lr, [sp, #80]	; 0x50
   11cc0:	strd	r4, [sp, #24]
   11cc4:	umull	r4, r5, r1, r6
   11cc8:	ldr	r3, [sp, #88]	; 0x58
   11ccc:	ldr	r8, [sp, #84]	; 0x54
   11cd0:	ldr	r9, [sp, #92]	; 0x5c
   11cd4:	str	r3, [sp, #36]	; 0x24
   11cd8:	umull	r2, r3, r1, r2
   11cdc:	mov	r0, r2
   11ce0:	mov	r1, r3
   11ce4:	umlal	r0, r1, ip, r6
   11ce8:	mov	ip, #0
   11cec:	mov	r7, r1
   11cf0:	ldr	r1, [sp, #28]
   11cf4:	mov	r6, r0
   11cf8:	adds	sl, r1, r6
   11cfc:	adc	fp, ip, r7
   11d00:	cmp	r3, fp
   11d04:	cmpeq	r2, sl
   11d08:	bls	11d14 <__assert_fail@plt+0x534>
   11d0c:	adds	r4, r4, ip
   11d10:	adc	r5, r5, #1
   11d14:	adds	r3, fp, r4
   11d18:	mov	ip, #0
   11d1c:	ldr	r1, [sp, #36]	; 0x24
   11d20:	str	r3, [sp]
   11d24:	adc	r3, ip, r5
   11d28:	str	r3, [sp, #4]
   11d2c:	ldr	r3, [sp, #24]
   11d30:	adds	r3, ip, r3
   11d34:	adc	r2, sl, ip
   11d38:	mul	r9, r3, r9
   11d3c:	mla	r2, r1, r2, r9
   11d40:	umull	r0, r1, r3, r1
   11d44:	add	r2, r2, r1
   11d48:	umull	r6, r7, r2, lr
   11d4c:	umull	r2, r3, r2, r8
   11d50:	mov	r4, r6
   11d54:	mov	r5, r7
   11d58:	umlal	r4, r5, r0, r8
   11d5c:	umull	r0, r1, r0, lr
   11d60:	adds	r1, r1, r4
   11d64:	str	r1, [sp, #16]
   11d68:	adc	r1, ip, r5
   11d6c:	str	r1, [sp, #20]
   11d70:	ldrd	r0, [sp, #16]
   11d74:	cmp	r7, r1
   11d78:	cmpeq	r6, r0
   11d7c:	bls	11d88 <__assert_fail@plt+0x5a8>
   11d80:	adds	r2, r2, ip
   11d84:	adc	r3, r3, #1
   11d88:	ldr	r1, [sp, #20]
   11d8c:	mov	r0, #0
   11d90:	adds	r1, r1, r2
   11d94:	adc	r3, r0, r3
   11d98:	str	r1, [sp, #8]
   11d9c:	str	r3, [sp, #12]
   11da0:	ldr	r3, [sp]
   11da4:	ldrd	r4, [sp, #8]
   11da8:	ldr	r2, [sp, #12]
   11dac:	subs	r0, r3, r1
   11db0:	ldr	r3, [sp, #4]
   11db4:	sbc	r1, r3, r2
   11db8:	ldrd	r2, [sp]
   11dbc:	cmp	r3, r5
   11dc0:	cmpeq	r2, r4
   11dc4:	bcs	11dd0 <__assert_fail@plt+0x5f0>
   11dc8:	adds	r0, r0, lr
   11dcc:	adc	r1, r1, r8
   11dd0:	add	sp, sp, #44	; 0x2c
   11dd4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11dd8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11ddc:	mov	r4, r2
   11de0:	mov	r5, r3
   11de4:	and	r2, r2, #1
   11de8:	mov	r3, #0
   11dec:	sub	sp, sp, #20
   11df0:	orrs	r3, r2, r3
   11df4:	mov	r8, r0
   11df8:	mov	r9, r1
   11dfc:	ldr	r7, [sp, #72]	; 0x48
   11e00:	movne	r7, r0
   11e04:	ldr	r6, [sp, #76]	; 0x4c
   11e08:	movne	r6, r1
   11e0c:	orrs	r3, r4, r5
   11e10:	bne	11e24 <__assert_fail@plt+0x644>
   11e14:	mov	r0, r7
   11e18:	mov	r1, r6
   11e1c:	add	sp, sp, #20
   11e20:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11e24:	ldrd	r2, [sp, #64]	; 0x40
   11e28:	mov	r0, r8
   11e2c:	mov	r1, r9
   11e30:	mov	fp, #0
   11e34:	strd	r2, [sp, #8]
   11e38:	ldrd	r2, [sp, #56]	; 0x38
   11e3c:	strd	r2, [sp]
   11e40:	mov	r2, r8
   11e44:	mov	r3, r9
   11e48:	bl	11ca8 <__assert_fail@plt+0x4c8>
   11e4c:	lsr	r3, r4, #1
   11e50:	mov	r8, r0
   11e54:	mov	r9, r1
   11e58:	lsr	r2, r5, #1
   11e5c:	orr	r3, r3, r5, lsl #31
   11e60:	mov	r5, r2
   11e64:	and	sl, r3, #1
   11e68:	mov	r4, r3
   11e6c:	orrs	r3, sl, fp
   11e70:	beq	11e0c <__assert_fail@plt+0x62c>
   11e74:	ldrd	r2, [sp, #64]	; 0x40
   11e78:	mov	r0, r7
   11e7c:	mov	r1, r6
   11e80:	strd	r2, [sp, #8]
   11e84:	ldrd	r2, [sp, #56]	; 0x38
   11e88:	strd	r2, [sp]
   11e8c:	mov	r2, r8
   11e90:	mov	r3, r9
   11e94:	bl	11ca8 <__assert_fail@plt+0x4c8>
   11e98:	mov	r7, r0
   11e9c:	mov	r6, r1
   11ea0:	b	11e0c <__assert_fail@plt+0x62c>
   11ea4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11ea8:	sub	sp, sp, #36	; 0x24
   11eac:	mov	r7, r0
   11eb0:	mov	fp, r1
   11eb4:	ldrd	r4, [sp, #96]	; 0x60
   11eb8:	strd	r0, [sp]
   11ebc:	strd	r2, [sp, #8]
   11ec0:	ldrd	r0, [sp, #72]	; 0x48
   11ec4:	strd	r4, [sp, #16]
   11ec8:	strd	r2, [sp, #24]
   11ecc:	ldrd	r2, [sp, #80]	; 0x50
   11ed0:	bl	11dd8 <__assert_fail@plt+0x5f8>
   11ed4:	subs	r8, r7, r4
   11ed8:	sbc	r9, fp, r5
   11edc:	cmp	r5, r1
   11ee0:	cmpeq	r4, r0
   11ee4:	moveq	r6, #1
   11ee8:	movne	r6, #0
   11eec:	cmp	r1, r9
   11ef0:	cmpeq	r0, r8
   11ef4:	moveq	r6, #1
   11ef8:	cmp	r6, #0
   11efc:	moveq	sl, #1
   11f00:	beq	11f44 <__assert_fail@plt+0x764>
   11f04:	mov	r0, r6
   11f08:	add	sp, sp, #36	; 0x24
   11f0c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11f10:	ldrd	r2, [sp, #24]
   11f14:	stm	sp, {r7, fp}
   11f18:	strd	r2, [sp, #8]
   11f1c:	mov	r2, r0
   11f20:	mov	r3, r1
   11f24:	bl	11ca8 <__assert_fail@plt+0x4c8>
   11f28:	cmp	r9, r1
   11f2c:	cmpeq	r8, r0
   11f30:	beq	11f54 <__assert_fail@plt+0x774>
   11f34:	cmp	r5, r1
   11f38:	cmpeq	r4, r0
   11f3c:	beq	11f04 <__assert_fail@plt+0x724>
   11f40:	add	sl, sl, #1
   11f44:	ldr	r3, [sp, #88]	; 0x58
   11f48:	cmp	sl, r3
   11f4c:	bcc	11f10 <__assert_fail@plt+0x730>
   11f50:	b	11f04 <__assert_fail@plt+0x724>
   11f54:	mov	r6, #1
   11f58:	b	11f04 <__assert_fail@plt+0x724>
   11f5c:	push	{r4, r5, r6, lr}
   11f60:	mov	r5, r0
   11f64:	mov	r4, #0
   11f68:	mov	r6, #12
   11f6c:	ldr	r0, [r5]
   11f70:	ldr	r3, [r5, #8]
   11f74:	cmp	r3, r4
   11f78:	bhi	11f8c <__assert_fail@plt+0x7ac>
   11f7c:	bl	16934 <__assert_fail@plt+0x5154>
   11f80:	ldr	r0, [r5, #4]
   11f84:	pop	{r4, r5, r6, lr}
   11f88:	b	16934 <__assert_fail@plt+0x5154>
   11f8c:	mla	r0, r6, r4, r0
   11f90:	add	r4, r4, #1
   11f94:	bl	11660 <__gmpz_clear@plt>
   11f98:	b	11f6c <__assert_fail@plt+0x78c>
   11f9c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11fa0:	sub	sp, sp, #204	; 0xcc
   11fa4:	strd	r2, [sp]
   11fa8:	str	r0, [sp, #192]	; 0xc0
   11fac:	ldr	r3, [sp, #256]	; 0x100
   11fb0:	ldr	r1, [sp, #240]	; 0xf0
   11fb4:	ldr	r0, [sp, #244]	; 0xf4
   11fb8:	str	r3, [sp, #88]	; 0x58
   11fbc:	ldr	r3, [sp, #260]	; 0x104
   11fc0:	str	r3, [sp, #92]	; 0x5c
   11fc4:	add	r3, sp, #280	; 0x118
   11fc8:	ldrd	r2, [r3]
   11fcc:	rsbs	r2, r2, #0
   11fd0:	rsc	r3, r3, #0
   11fd4:	strd	r2, [sp, #48]	; 0x30
   11fd8:	ldrd	r2, [sp]
   11fdc:	cmp	r2, #0
   11fe0:	sbcs	r3, r3, #0
   11fe4:	bge	11ffc <__assert_fail@plt+0x81c>
   11fe8:	ldr	r3, [pc, #2040]	; 127e8 <__assert_fail@plt+0x1008>
   11fec:	movw	r2, #993	; 0x3e1
   11ff0:	ldr	r1, [pc, #2036]	; 127ec <__assert_fail@plt+0x100c>
   11ff4:	ldr	r0, [pc, #2036]	; 127f0 <__assert_fail@plt+0x1010>
   11ff8:	bl	117e0 <__assert_fail@plt>
   11ffc:	ldrd	r2, [sp, #248]	; 0xf8
   12000:	cmp	r2, #0
   12004:	sbcs	r3, r3, #0
   12008:	bge	12020 <__assert_fail@plt+0x840>
   1200c:	ldr	r3, [pc, #2004]	; 127e8 <__assert_fail@plt+0x1008>
   12010:	movw	r2, #994	; 0x3e2
   12014:	ldr	r1, [pc, #2000]	; 127ec <__assert_fail@plt+0x100c>
   12018:	ldr	r0, [pc, #2004]	; 127f4 <__assert_fail@plt+0x1014>
   1201c:	b	11ff8 <__assert_fail@plt+0x818>
   12020:	add	r3, sp, #264	; 0x108
   12024:	ldrd	r2, [r3]
   12028:	cmp	r2, #0
   1202c:	sbcs	r3, r3, #0
   12030:	bge	12048 <__assert_fail@plt+0x868>
   12034:	ldr	r3, [pc, #1964]	; 127e8 <__assert_fail@plt+0x1008>
   12038:	movw	r2, #995	; 0x3e3
   1203c:	ldr	r1, [pc, #1960]	; 127ec <__assert_fail@plt+0x100c>
   12040:	ldr	r0, [pc, #1968]	; 127f8 <__assert_fail@plt+0x1018>
   12044:	b	11ff8 <__assert_fail@plt+0x818>
   12048:	ldr	r3, [sp, #88]	; 0x58
   1204c:	mov	lr, #0
   12050:	ldr	ip, [sp, #92]	; 0x5c
   12054:	umull	r2, r3, r1, r3
   12058:	strd	r2, [sp, #16]
   1205c:	ldr	r3, [sp, #88]	; 0x58
   12060:	umull	r4, r5, r0, r3
   12064:	ldr	r3, [sp, #92]	; 0x5c
   12068:	mov	r6, r4
   1206c:	mov	r7, r5
   12070:	umlal	r6, r7, r1, ip
   12074:	ldr	ip, [sp, #20]
   12078:	umull	r2, r3, r0, r3
   1207c:	adds	sl, ip, r6
   12080:	adc	fp, lr, r7
   12084:	cmp	r5, fp
   12088:	cmpeq	r4, sl
   1208c:	bls	12098 <__assert_fail@plt+0x8b8>
   12090:	adds	r2, r2, lr
   12094:	adc	r3, r3, #1
   12098:	adds	lr, fp, r2
   1209c:	ldr	r2, [sp, #16]
   120a0:	mov	ip, #0
   120a4:	adc	r3, ip, r3
   120a8:	str	lr, [sp, #136]	; 0x88
   120ac:	ldr	lr, [sp, #248]	; 0xf8
   120b0:	str	r3, [sp, #140]	; 0x8c
   120b4:	mov	r3, sl
   120b8:	adds	r9, ip, r2
   120bc:	adc	sl, r3, ip
   120c0:	ldr	r3, [sp, #248]	; 0xf8
   120c4:	umull	r4, r5, r0, lr
   120c8:	ldr	lr, [sp, #252]	; 0xfc
   120cc:	umull	r2, r3, r1, r3
   120d0:	umull	r6, r7, r0, lr
   120d4:	mov	r0, lr
   120d8:	strd	r6, [sp, #40]	; 0x28
   120dc:	mov	r6, r4
   120e0:	mov	r7, r5
   120e4:	umlal	r6, r7, r1, r0
   120e8:	mov	r0, r6
   120ec:	mov	r6, ip
   120f0:	adds	ip, r3, r0
   120f4:	adc	r1, r6, r7
   120f8:	str	ip, [sp, #8]
   120fc:	str	r1, [sp, #12]
   12100:	ldrd	r0, [sp, #8]
   12104:	cmp	r5, r1
   12108:	cmpeq	r4, r0
   1210c:	bls	12128 <__assert_fail@plt+0x948>
   12110:	ldr	r1, [sp, #40]	; 0x28
   12114:	adds	r1, r1, r6
   12118:	str	r1, [sp, #40]	; 0x28
   1211c:	ldr	r1, [sp, #44]	; 0x2c
   12120:	adc	r1, r1, #1
   12124:	str	r1, [sp, #44]	; 0x2c
   12128:	ldr	lr, [sp, #8]
   1212c:	mov	r8, #0
   12130:	ldr	r1, [sp, #12]
   12134:	str	r1, [sp, #196]	; 0xc4
   12138:	mov	r1, #0
   1213c:	adds	r3, r1, r2
   12140:	str	r3, [sp, #144]	; 0x90
   12144:	adc	r3, lr, r1
   12148:	mov	lr, r8
   1214c:	str	r3, [sp, #148]	; 0x94
   12150:	ldr	r3, [sp, #48]	; 0x30
   12154:	mul	ip, r3, sl
   12158:	ldr	r3, [sp, #52]	; 0x34
   1215c:	mla	ip, r9, r3, ip
   12160:	ldr	r3, [sp, #48]	; 0x30
   12164:	umull	r0, r1, r3, r9
   12168:	ldr	r3, [sp, #272]	; 0x110
   1216c:	add	ip, ip, r1
   12170:	mov	r2, r0
   12174:	umull	r6, r7, ip, r3
   12178:	ldr	r3, [sp, #276]	; 0x114
   1217c:	umull	r4, r5, ip, r3
   12180:	strd	r4, [sp, #16]
   12184:	mov	r4, r6
   12188:	mov	r5, r7
   1218c:	umlal	r4, r5, r0, r3
   12190:	ldr	r3, [sp, #272]	; 0x110
   12194:	umull	r0, r1, r0, r3
   12198:	adds	r3, r1, r4
   1219c:	str	r3, [sp, #96]	; 0x60
   121a0:	adc	r3, r8, r5
   121a4:	str	r3, [sp, #100]	; 0x64
   121a8:	ldrd	r0, [sp, #96]	; 0x60
   121ac:	cmp	r7, r1
   121b0:	cmpeq	r6, r0
   121b4:	bls	121d0 <__assert_fail@plt+0x9f0>
   121b8:	ldr	r3, [sp, #16]
   121bc:	adds	r3, r3, r8
   121c0:	str	r3, [sp, #16]
   121c4:	ldr	r3, [sp, #20]
   121c8:	adc	r3, r3, #1
   121cc:	str	r3, [sp, #20]
   121d0:	ldr	r6, [sp, #100]	; 0x64
   121d4:	mov	r7, #0
   121d8:	ldr	r3, [sp, #264]	; 0x108
   121dc:	umull	r0, r1, r2, r3
   121e0:	strd	r0, [sp, #96]	; 0x60
   121e4:	ldr	r1, [sp, #100]	; 0x64
   121e8:	mla	fp, lr, r3, r1
   121ec:	umull	r0, r1, ip, r3
   121f0:	mla	r1, r8, r3, r1
   121f4:	ldr	r3, [sp, #268]	; 0x10c
   121f8:	umull	r4, r5, ip, r3
   121fc:	strd	r4, [sp, #8]
   12200:	ldr	ip, [sp, #12]
   12204:	mla	r3, r8, r3, ip
   12208:	str	r3, [sp, #12]
   1220c:	ldr	r3, [sp, #268]	; 0x10c
   12210:	umull	r4, r5, r3, r2
   12214:	mla	r5, lr, r3, r5
   12218:	adds	lr, r4, r0
   1221c:	adc	r4, r5, r1
   12220:	adds	r3, fp, lr
   12224:	str	r3, [sp, #32]
   12228:	adc	r3, r7, r4
   1222c:	str	r3, [sp, #36]	; 0x24
   12230:	ldrd	r2, [sp, #32]
   12234:	cmp	r1, r3
   12238:	cmpeq	r0, r2
   1223c:	bls	12258 <__assert_fail@plt+0xa78>
   12240:	ldr	r3, [sp, #8]
   12244:	adds	r3, r3, r7
   12248:	str	r3, [sp, #8]
   1224c:	ldr	r3, [sp, #12]
   12250:	adc	r3, r3, #1
   12254:	str	r3, [sp, #12]
   12258:	ldr	lr, [sp, #32]
   1225c:	mov	r2, #0
   12260:	mov	ip, r2
   12264:	ldr	r0, [sp, #96]	; 0x60
   12268:	ldr	fp, [sp, #36]	; 0x24
   1226c:	adds	r3, r2, r0
   12270:	ldrd	r0, [sp, #144]	; 0x90
   12274:	str	r2, [sp, #144]	; 0x90
   12278:	str	r3, [sp, #152]	; 0x98
   1227c:	adc	r3, lr, r2
   12280:	mov	lr, #0
   12284:	str	r3, [sp, #156]	; 0x9c
   12288:	orrs	r3, r9, sl
   1228c:	mov	r9, #0
   12290:	ldr	r3, [sp, #16]
   12294:	movne	ip, #1
   12298:	moveq	ip, r2
   1229c:	adds	r0, r0, ip
   122a0:	mov	ip, r2
   122a4:	adc	r1, r1, #0
   122a8:	adds	r6, r6, r0
   122ac:	adc	r7, r7, r1
   122b0:	adds	r3, r6, r3
   122b4:	str	r3, [sp, #104]	; 0x68
   122b8:	ldr	r3, [sp, #20]
   122bc:	adc	r3, r7, r3
   122c0:	str	r3, [sp, #108]	; 0x6c
   122c4:	ldrd	r4, [sp, #104]	; 0x68
   122c8:	ldrd	r6, [sp, #104]	; 0x68
   122cc:	cmp	r1, r5
   122d0:	cmpeq	r0, r4
   122d4:	ldrd	r4, [sp, #136]	; 0x88
   122d8:	movhi	r3, #1
   122dc:	movls	r3, r2
   122e0:	str	r3, [sp, #96]	; 0x60
   122e4:	ldr	r3, [sp, #88]	; 0x58
   122e8:	adds	r0, r4, r6
   122ec:	adcs	r1, r5, r7
   122f0:	ldrd	r6, [sp, #152]	; 0x98
   122f4:	movcs	ip, #1
   122f8:	str	ip, [sp, #104]	; 0x68
   122fc:	mov	ip, r9
   12300:	adds	r4, r6, r0
   12304:	adcs	r5, r7, r1
   12308:	ldr	r1, [sp]
   1230c:	movcs	ip, #1
   12310:	strd	r4, [sp, #152]	; 0x98
   12314:	str	ip, [sp, #136]	; 0x88
   12318:	umull	r0, r1, r3, r1
   1231c:	ldr	ip, [sp]
   12320:	ldr	r3, [sp, #4]
   12324:	strd	r0, [sp, #16]
   12328:	ldr	r1, [sp, #88]	; 0x58
   1232c:	umull	r0, r1, r3, r1
   12330:	ldr	r3, [sp, #92]	; 0x5c
   12334:	mov	r5, r1
   12338:	ldr	r1, [sp, #4]
   1233c:	mov	r4, r0
   12340:	umull	r6, r7, r3, r1
   12344:	mov	r1, r5
   12348:	umlal	r0, r1, ip, r3
   1234c:	ldr	ip, [sp, #20]
   12350:	adds	r3, ip, r0
   12354:	mov	r0, r4
   12358:	str	r3, [sp, #56]	; 0x38
   1235c:	adc	r3, lr, r1
   12360:	mov	r1, r5
   12364:	str	r3, [sp, #60]	; 0x3c
   12368:	ldrd	r4, [sp, #56]	; 0x38
   1236c:	cmp	r1, r5
   12370:	cmpeq	r0, r4
   12374:	bls	12380 <__assert_fail@plt+0xba0>
   12378:	adds	r6, r6, lr
   1237c:	adc	r7, r7, #1
   12380:	ldr	ip, [sp, #4]
   12384:	ldr	r3, [sp, #60]	; 0x3c
   12388:	ldr	r0, [sp, #16]
   1238c:	ldr	r5, [sp, #56]	; 0x38
   12390:	str	r3, [sp, #32]
   12394:	mov	r3, #0
   12398:	ldr	r4, [sp, #4]
   1239c:	adds	r1, r3, r0
   123a0:	str	r3, [sp, #36]	; 0x24
   123a4:	ldr	r0, [sp]
   123a8:	str	r1, [sp, #160]	; 0xa0
   123ac:	adc	r1, r5, r3
   123b0:	str	r1, [sp, #164]	; 0xa4
   123b4:	ldr	r1, [sp, #248]	; 0xf8
   123b8:	umull	r0, r1, r1, r0
   123bc:	strd	r0, [sp, #56]	; 0x38
   123c0:	ldr	r1, [sp]
   123c4:	ldr	r0, [sp, #60]	; 0x3c
   123c8:	mla	r8, r3, r1, r0
   123cc:	ldr	r1, [sp, #4]
   123d0:	ldr	r0, [sp, #248]	; 0xf8
   123d4:	umull	r0, r1, r1, r0
   123d8:	mla	r1, r3, ip, r1
   123dc:	ldr	ip, [sp, #252]	; 0xfc
   123e0:	umull	r4, r5, ip, r4
   123e4:	ldr	ip, [sp, #4]
   123e8:	strd	r4, [sp, #16]
   123ec:	ldr	r4, [sp, #20]
   123f0:	mla	ip, r3, ip, r4
   123f4:	ldr	r4, [sp]
   123f8:	str	ip, [sp, #20]
   123fc:	ldr	ip, [sp, #252]	; 0xfc
   12400:	umull	r4, r5, ip, r4
   12404:	ldr	ip, [sp]
   12408:	adds	sl, r4, r0
   1240c:	mov	r4, r3
   12410:	mla	r5, r3, ip, r5
   12414:	adc	r5, r5, r1
   12418:	adds	r3, r8, sl
   1241c:	str	r3, [sp, #64]	; 0x40
   12420:	adc	r3, r4, r5
   12424:	str	r3, [sp, #68]	; 0x44
   12428:	ldrd	r4, [sp, #64]	; 0x40
   1242c:	cmp	r1, r5
   12430:	cmpeq	r0, r4
   12434:	bls	12450 <__assert_fail@plt+0xc70>
   12438:	ldr	r3, [sp, #16]
   1243c:	adds	r3, r3, #0
   12440:	str	r3, [sp, #16]
   12444:	ldr	r3, [sp, #20]
   12448:	adc	r3, r3, #1
   1244c:	str	r3, [sp, #20]
   12450:	ldr	r0, [sp, #56]	; 0x38
   12454:	mov	ip, #0
   12458:	ldr	r5, [sp, #64]	; 0x40
   1245c:	ldr	r8, [sp, #68]	; 0x44
   12460:	adds	r3, ip, r0
   12464:	mov	r0, ip
   12468:	str	r3, [sp, #72]	; 0x48
   1246c:	adc	r3, r5, ip
   12470:	ldr	r1, [sp, #72]	; 0x48
   12474:	str	r3, [sp, #76]	; 0x4c
   12478:	ldrd	r4, [sp, #152]	; 0x98
   1247c:	ldr	r3, [sp, #196]	; 0xc4
   12480:	adds	r1, r3, r1
   12484:	ldr	r3, [sp, #76]	; 0x4c
   12488:	adc	r3, ip, r3
   1248c:	adds	fp, r1, fp
   12490:	adc	r3, r3, r2
   12494:	ldr	r2, [sp, #40]	; 0x28
   12498:	adds	fp, fp, r2
   1249c:	ldr	r2, [sp, #44]	; 0x2c
   124a0:	adc	r3, r3, r2
   124a4:	ldr	r2, [sp, #96]	; 0x60
   124a8:	adds	fp, fp, r2
   124ac:	ldr	r2, [sp, #144]	; 0x90
   124b0:	adc	r3, r3, r2
   124b4:	ldr	r2, [sp, #104]	; 0x68
   124b8:	adds	fp, fp, r2
   124bc:	ldr	r2, [sp, #136]	; 0x88
   124c0:	adc	r3, r3, r9
   124c4:	adds	r1, fp, r2
   124c8:	ldrd	sl, [sp, #160]	; 0xa0
   124cc:	adc	lr, r3, lr
   124d0:	adds	r2, r4, sl
   124d4:	ldr	r4, [sp, #8]
   124d8:	adcs	r3, r5, fp
   124dc:	movcs	r0, #1
   124e0:	strd	r2, [sp, #40]	; 0x28
   124e4:	ldrd	r2, [sp, #32]
   124e8:	adds	r2, r2, r0
   124ec:	adc	r3, r3, #0
   124f0:	adds	r0, r2, r6
   124f4:	ldr	r2, [sp, #44]	; 0x2c
   124f8:	adc	r3, r3, r7
   124fc:	adds	r1, r4, r1
   12500:	ldrd	r4, [sp, #72]	; 0x48
   12504:	str	r1, [sp, #112]	; 0x70
   12508:	str	r3, [sp, #172]	; 0xac
   1250c:	ldr	r1, [sp, #12]
   12510:	str	r0, [sp, #168]	; 0xa8
   12514:	ldr	r3, [sp, #48]	; 0x30
   12518:	adc	r1, r1, lr
   1251c:	mov	lr, #0
   12520:	mul	r0, r3, r2
   12524:	ldr	r2, [sp, #40]	; 0x28
   12528:	str	r1, [sp, #116]	; 0x74
   1252c:	ldr	r3, [sp, #52]	; 0x34
   12530:	ldrd	r6, [sp, #112]	; 0x70
   12534:	mla	r0, r2, r3, r0
   12538:	ldr	r3, [sp, #48]	; 0x30
   1253c:	cmp	r5, r7
   12540:	cmpeq	r4, r6
   12544:	ldr	r4, [sp, #272]	; 0x110
   12548:	movhi	r1, #1
   1254c:	movls	r1, #0
   12550:	umull	r2, r3, r3, r2
   12554:	ldr	r6, [sp, #276]	; 0x114
   12558:	str	r1, [sp, #32]
   1255c:	add	r0, r0, r3
   12560:	mov	r1, r2
   12564:	umull	r6, r7, r6, r0
   12568:	umull	r4, r5, r0, r4
   1256c:	strd	r6, [sp]
   12570:	ldr	r6, [sp, #4]
   12574:	mla	r5, lr, r0, r5
   12578:	mla	r6, lr, r0, r6
   1257c:	str	r6, [sp, #4]
   12580:	ldr	r6, [sp, #276]	; 0x114
   12584:	umull	r6, r7, r6, r2
   12588:	adds	r9, r6, r4
   1258c:	ldr	r6, [sp, #272]	; 0x110
   12590:	mla	r7, lr, r2, r7
   12594:	adc	sl, r7, r5
   12598:	umull	r6, r7, r6, r2
   1259c:	mla	r3, lr, r2, r7
   125a0:	adds	r3, r3, r9
   125a4:	str	r3, [sp, #120]	; 0x78
   125a8:	adc	r3, lr, sl
   125ac:	str	r3, [sp, #124]	; 0x7c
   125b0:	ldrd	r2, [sp, #120]	; 0x78
   125b4:	cmp	r5, r3
   125b8:	cmpeq	r4, r2
   125bc:	bls	125d8 <__assert_fail@plt+0xdf8>
   125c0:	ldr	r3, [sp]
   125c4:	adds	r3, r3, lr
   125c8:	str	r3, [sp]
   125cc:	ldr	r3, [sp, #4]
   125d0:	adc	r3, r3, #1
   125d4:	str	r3, [sp, #4]
   125d8:	mov	r5, #0
   125dc:	ldr	r4, [sp, #124]	; 0x7c
   125e0:	ldr	r3, [sp, #264]	; 0x108
   125e4:	ldr	r7, [sp, #268]	; 0x10c
   125e8:	umull	r2, r3, r3, r1
   125ec:	umull	sl, fp, r7, r0
   125f0:	strd	r2, [sp, #8]
   125f4:	ldr	r3, [sp, #12]
   125f8:	mla	r6, r1, r5, r3
   125fc:	ldr	r3, [sp, #264]	; 0x108
   12600:	umull	r2, r3, r0, r3
   12604:	mla	r3, r0, r5, r3
   12608:	umull	r0, r1, r7, r1
   1260c:	adds	r7, r0, r2
   12610:	adc	r9, r1, r3
   12614:	adds	r1, r6, r7
   12618:	str	r1, [sp, #80]	; 0x50
   1261c:	adc	r1, r5, r9
   12620:	str	r1, [sp, #84]	; 0x54
   12624:	ldrd	r0, [sp, #80]	; 0x50
   12628:	cmp	r3, r1
   1262c:	cmpeq	r2, r0
   12630:	bls	1263c <__assert_fail@plt+0xe5c>
   12634:	adds	sl, sl, r5
   12638:	adc	fp, fp, #1
   1263c:	ldr	r2, [sp, #8]
   12640:	mov	r6, #0
   12644:	mov	r1, r6
   12648:	ldr	r3, [sp, #84]	; 0x54
   1264c:	ldr	r0, [sp, #80]	; 0x50
   12650:	adds	r3, r3, r8
   12654:	adc	ip, r6, ip
   12658:	str	r3, [sp, #48]	; 0x30
   1265c:	adds	r3, r6, r2
   12660:	ldr	r2, [sp, #40]	; 0x28
   12664:	str	r3, [sp, #176]	; 0xb0
   12668:	adc	r3, r0, r6
   1266c:	str	r3, [sp, #180]	; 0xb4
   12670:	ldr	r3, [sp, #44]	; 0x2c
   12674:	orrs	r3, r3, r2
   12678:	ldrd	r2, [sp, #112]	; 0x70
   1267c:	movne	r1, #1
   12680:	adds	r2, r2, r1
   12684:	ldr	r1, [sp]
   12688:	adc	r3, r3, #0
   1268c:	adds	r4, r4, r2
   12690:	adc	r5, r5, r3
   12694:	adds	r1, r4, r1
   12698:	str	r1, [sp, #128]	; 0x80
   1269c:	ldr	r1, [sp, #4]
   126a0:	adc	r1, r5, r1
   126a4:	ldrd	r4, [sp, #168]	; 0xa8
   126a8:	str	r1, [sp, #132]	; 0x84
   126ac:	ldrd	r8, [sp, #128]	; 0x80
   126b0:	adds	r0, r4, r8
   126b4:	adcs	r1, r5, r9
   126b8:	ldrd	r8, [sp, #176]	; 0xb0
   126bc:	movcs	r6, #1
   126c0:	adds	r4, r8, r0
   126c4:	ldr	r8, [sp, #32]
   126c8:	adcs	r5, r9, r1
   126cc:	mov	r0, r4
   126d0:	ldr	r9, [sp, #48]	; 0x30
   126d4:	movcs	r7, #1
   126d8:	movcc	r7, #0
   126dc:	mov	r1, r5
   126e0:	adds	r8, r8, r9
   126e4:	adc	ip, lr, ip
   126e8:	ldr	lr, [sp, #16]
   126ec:	adds	lr, r8, lr
   126f0:	ldrd	r8, [sp, #128]	; 0x80
   126f4:	str	lr, [sp, #184]	; 0xb8
   126f8:	ldr	lr, [sp, #20]
   126fc:	adc	ip, ip, lr
   12700:	cmp	r3, r9
   12704:	cmpeq	r2, r8
   12708:	str	ip, [sp, #188]	; 0xbc
   1270c:	movhi	ip, #1
   12710:	movls	ip, #0
   12714:	ldrd	r2, [sp, #184]	; 0xb8
   12718:	adds	r2, r2, ip
   1271c:	adc	r3, r3, #0
   12720:	adds	r2, r2, r6
   12724:	adc	r3, r3, #0
   12728:	adds	r8, r2, r7
   1272c:	adc	r9, r3, #0
   12730:	adds	r3, r8, sl
   12734:	str	r3, [sp, #24]
   12738:	adc	r3, r9, fp
   1273c:	str	r3, [sp, #28]
   12740:	add	r3, sp, #264	; 0x108
   12744:	ldrd	r2, [r3]
   12748:	ldrd	r6, [sp, #24]
   1274c:	cmp	r3, r7
   12750:	cmpeq	r2, r6
   12754:	bcc	12780 <__assert_fail@plt+0xfa0>
   12758:	add	r2, sp, #272	; 0x110
   1275c:	moveq	r3, #1
   12760:	ldrd	r6, [r2]
   12764:	movne	r3, #0
   12768:	cmp	r7, r5
   1276c:	cmpeq	r6, r4
   12770:	movhi	r3, #0
   12774:	andls	r3, r3, #1
   12778:	cmp	r3, #0
   1277c:	beq	127d4 <__assert_fail@plt+0xff4>
   12780:	add	r3, sp, #272	; 0x110
   12784:	ldr	ip, [sp, #264]	; 0x108
   12788:	ldrd	r2, [r3]
   1278c:	ldr	r1, [sp, #272]	; 0x110
   12790:	cmp	r3, r5
   12794:	cmpeq	r2, r4
   12798:	movhi	r3, #1
   1279c:	movls	r3, #0
   127a0:	subs	r0, r4, r1
   127a4:	ldr	r1, [sp, #276]	; 0x114
   127a8:	mov	r2, #0
   127ac:	sbc	r1, r5, r1
   127b0:	adds	r3, ip, r3
   127b4:	ldr	ip, [sp, #268]	; 0x10c
   127b8:	adc	r2, ip, r2
   127bc:	ldr	ip, [sp, #24]
   127c0:	subs	r3, ip, r3
   127c4:	str	r3, [sp, #24]
   127c8:	ldr	r3, [sp, #28]
   127cc:	sbc	r3, r3, r2
   127d0:	str	r3, [sp, #28]
   127d4:	ldrd	r2, [sp, #24]
   127d8:	ldr	ip, [sp, #192]	; 0xc0
   127dc:	strd	r2, [ip]
   127e0:	add	sp, sp, #204	; 0xcc
   127e4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   127e8:	andeq	fp, r1, fp, ror r1
   127ec:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   127f0:	andeq	sp, r1, r5, lsr #31
   127f4:	andeq	sp, r1, r4, asr #31
   127f8:	andeq	sp, r1, r3, ror #31
   127fc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12800:	mov	r4, r0
   12804:	sub	sp, sp, #108	; 0x6c
   12808:	mov	r7, r2
   1280c:	mov	r5, #64	; 0x40
   12810:	ldrd	sl, [r1]
   12814:	ldrd	r8, [r1, #8]
   12818:	ldrd	r0, [r3]
   1281c:	ldr	r6, [r2]
   12820:	ldr	r2, [sp, #152]	; 0x98
   12824:	strd	r0, [sp, #64]	; 0x40
   12828:	ldrd	r0, [r3, #8]
   1282c:	strd	r0, [sp, #72]	; 0x48
   12830:	ldrd	r0, [r2]
   12834:	ldrd	r2, [r2, #8]
   12838:	strd	r2, [sp, #48]	; 0x30
   1283c:	ldr	r3, [r7, #4]
   12840:	strd	r0, [sp, #56]	; 0x38
   12844:	str	r3, [sp, #84]	; 0x54
   12848:	and	r3, r6, #1
   1284c:	str	r3, [sp, #88]	; 0x58
   12850:	mov	r3, #0
   12854:	str	r3, [sp, #92]	; 0x5c
   12858:	ldrd	r2, [sp, #88]	; 0x58
   1285c:	orrs	r3, r2, r3
   12860:	beq	128a4 <__assert_fail@plt+0x10c4>
   12864:	ldrd	r2, [sp, #144]	; 0x90
   12868:	mov	r0, r4
   1286c:	strd	r8, [sp, #8]
   12870:	strd	sl, [sp, #16]
   12874:	strd	r2, [sp, #40]	; 0x28
   12878:	ldrd	r2, [sp, #64]	; 0x40
   1287c:	strd	r2, [sp, #32]
   12880:	ldrd	r2, [sp, #72]	; 0x48
   12884:	strd	r2, [sp, #24]
   12888:	ldrd	r2, [sp, #56]	; 0x38
   1288c:	strd	r2, [sp]
   12890:	ldrd	r2, [sp, #48]	; 0x30
   12894:	bl	11f9c <__assert_fail@plt+0x7bc>
   12898:	ldrd	r2, [r4]
   1289c:	strd	r2, [sp, #48]	; 0x30
   128a0:	strd	r0, [sp, #56]	; 0x38
   128a4:	ldrd	r2, [sp, #144]	; 0x90
   128a8:	mov	r0, r4
   128ac:	lsr	r6, r6, #1
   128b0:	strd	sl, [sp]
   128b4:	strd	r8, [sp, #8]
   128b8:	strd	sl, [sp, #16]
   128bc:	strd	r2, [sp, #40]	; 0x28
   128c0:	ldrd	r2, [sp, #64]	; 0x40
   128c4:	strd	r2, [sp, #32]
   128c8:	ldrd	r2, [sp, #72]	; 0x48
   128cc:	strd	r2, [sp, #24]
   128d0:	mov	r3, r9
   128d4:	mov	r2, r8
   128d8:	bl	11f9c <__assert_fail@plt+0x7bc>
   128dc:	ldr	r3, [sp, #84]	; 0x54
   128e0:	subs	r5, r5, #1
   128e4:	mov	sl, r0
   128e8:	mov	fp, r1
   128ec:	ldrd	r8, [r4]
   128f0:	orr	r6, r6, r3, lsl #31
   128f4:	lsr	r3, r3, #1
   128f8:	str	r3, [sp, #84]	; 0x54
   128fc:	bne	12848 <__assert_fail@plt+0x1068>
   12900:	ldrd	r6, [r7, #8]
   12904:	orrs	r3, r6, r7
   12908:	bne	12920 <__assert_fail@plt+0x1140>
   1290c:	ldrd	r2, [sp, #48]	; 0x30
   12910:	ldrd	r0, [sp, #56]	; 0x38
   12914:	strd	r2, [r4]
   12918:	add	sp, sp, #108	; 0x6c
   1291c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12920:	and	r3, r6, #1
   12924:	str	r3, [sp, #96]	; 0x60
   12928:	str	r5, [sp, #100]	; 0x64
   1292c:	ldrd	r2, [sp, #96]	; 0x60
   12930:	orrs	r3, r2, r3
   12934:	beq	12978 <__assert_fail@plt+0x1198>
   12938:	ldrd	r2, [sp, #144]	; 0x90
   1293c:	mov	r0, r4
   12940:	strd	r8, [sp, #8]
   12944:	strd	sl, [sp, #16]
   12948:	strd	r2, [sp, #40]	; 0x28
   1294c:	ldrd	r2, [sp, #64]	; 0x40
   12950:	strd	r2, [sp, #32]
   12954:	ldrd	r2, [sp, #72]	; 0x48
   12958:	strd	r2, [sp, #24]
   1295c:	ldrd	r2, [sp, #56]	; 0x38
   12960:	strd	r2, [sp]
   12964:	ldrd	r2, [sp, #48]	; 0x30
   12968:	bl	11f9c <__assert_fail@plt+0x7bc>
   1296c:	ldrd	r2, [r4]
   12970:	strd	r2, [sp, #48]	; 0x30
   12974:	strd	r0, [sp, #56]	; 0x38
   12978:	ldrd	r2, [sp, #144]	; 0x90
   1297c:	mov	r0, r4
   12980:	strd	sl, [sp]
   12984:	strd	r8, [sp, #8]
   12988:	strd	sl, [sp, #16]
   1298c:	strd	r2, [sp, #40]	; 0x28
   12990:	ldrd	r2, [sp, #64]	; 0x40
   12994:	strd	r2, [sp, #32]
   12998:	ldrd	r2, [sp, #72]	; 0x48
   1299c:	strd	r2, [sp, #24]
   129a0:	mov	r2, r8
   129a4:	mov	r3, r9
   129a8:	bl	11f9c <__assert_fail@plt+0x7bc>
   129ac:	lsr	r3, r6, #1
   129b0:	mov	sl, r0
   129b4:	mov	fp, r1
   129b8:	lsr	r2, r7, #1
   129bc:	ldrd	r8, [r4]
   129c0:	orr	r3, r3, r7, lsl #31
   129c4:	mov	r7, r2
   129c8:	mov	r6, r3
   129cc:	b	12904 <__assert_fail@plt+0x1124>
   129d0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   129d4:	sub	sp, sp, #84	; 0x54
   129d8:	mov	r4, r0
   129dc:	strd	r2, [sp]
   129e0:	ldr	r6, [sp, #132]	; 0x84
   129e4:	ldr	r1, [sp, #120]	; 0x78
   129e8:	str	r6, [sp, #8]
   129ec:	strd	r2, [sp, #56]	; 0x38
   129f0:	mov	r3, r0
   129f4:	add	r0, sp, #72	; 0x48
   129f8:	ldr	r2, [sp, #124]	; 0x7c
   129fc:	bl	127fc <__assert_fail@plt+0x101c>
   12a00:	ldrd	r2, [r6]
   12a04:	mov	fp, r1
   12a08:	mov	sl, r0
   12a0c:	ldrd	r8, [r6, #8]
   12a10:	ldrd	r0, [sp, #72]	; 0x48
   12a14:	cmp	r3, fp
   12a18:	cmpeq	r2, sl
   12a1c:	bne	12a3c <__assert_fail@plt+0x125c>
   12a20:	cmp	r9, r1
   12a24:	cmpeq	r8, r0
   12a28:	bne	12a3c <__assert_fail@plt+0x125c>
   12a2c:	mov	r5, #1
   12a30:	mov	r0, r5
   12a34:	add	sp, sp, #84	; 0x54
   12a38:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12a3c:	ldr	ip, [r4]
   12a40:	ldr	lr, [r4, #12]
   12a44:	subs	ip, ip, r2
   12a48:	str	ip, [sp, #48]	; 0x30
   12a4c:	ldr	ip, [r4, #4]
   12a50:	sbc	ip, ip, r3
   12a54:	str	ip, [sp, #52]	; 0x34
   12a58:	ldr	ip, [r4, #8]
   12a5c:	subs	ip, ip, r8
   12a60:	str	ip, [sp, #64]	; 0x40
   12a64:	sbc	ip, lr, r9
   12a68:	ldrd	r8, [r4]
   12a6c:	str	ip, [sp, #68]	; 0x44
   12a70:	cmp	r3, r9
   12a74:	cmpeq	r2, r8
   12a78:	ldrd	r8, [sp, #64]	; 0x40
   12a7c:	movhi	r3, #1
   12a80:	movls	r3, #0
   12a84:	subs	r8, r8, r3
   12a88:	ldrd	r2, [sp, #48]	; 0x30
   12a8c:	sbc	r9, r9, #0
   12a90:	cmp	fp, r3
   12a94:	cmpeq	sl, r2
   12a98:	movne	r5, #0
   12a9c:	moveq	r5, #1
   12aa0:	cmp	r1, r9
   12aa4:	cmpeq	r0, r8
   12aa8:	movne	r5, #0
   12aac:	cmp	r5, #0
   12ab0:	moveq	r7, #1
   12ab4:	bne	12a2c <__assert_fail@plt+0x124c>
   12ab8:	ldr	r3, [sp, #128]	; 0x80
   12abc:	cmp	r7, r3
   12ac0:	bcs	12a30 <__assert_fail@plt+0x1250>
   12ac4:	ldrd	r2, [sp, #56]	; 0x38
   12ac8:	strd	sl, [sp]
   12acc:	strd	r0, [sp, #8]
   12ad0:	strd	sl, [sp, #16]
   12ad4:	strd	r2, [sp, #40]	; 0x28
   12ad8:	ldrd	r2, [r4]
   12adc:	strd	r2, [sp, #32]
   12ae0:	ldrd	r2, [r4, #8]
   12ae4:	strd	r2, [sp, #24]
   12ae8:	mov	r2, r0
   12aec:	mov	r3, r1
   12af0:	add	r0, sp, #72	; 0x48
   12af4:	bl	11f9c <__assert_fail@plt+0x7bc>
   12af8:	ldrd	r2, [sp, #48]	; 0x30
   12afc:	mov	sl, r0
   12b00:	mov	fp, r1
   12b04:	ldrd	r0, [sp, #72]	; 0x48
   12b08:	cmp	r3, fp
   12b0c:	cmpeq	r2, sl
   12b10:	movne	r3, #0
   12b14:	moveq	r3, #1
   12b18:	cmp	r9, r1
   12b1c:	cmpeq	r8, r0
   12b20:	movne	r3, #0
   12b24:	cmp	r3, #0
   12b28:	bne	12a2c <__assert_fail@plt+0x124c>
   12b2c:	ldrd	r2, [r6]
   12b30:	cmp	r3, fp
   12b34:	cmpeq	r2, sl
   12b38:	bne	12b4c <__assert_fail@plt+0x136c>
   12b3c:	ldrd	r2, [r6, #8]
   12b40:	cmp	r3, r1
   12b44:	cmpeq	r2, r0
   12b48:	beq	12a30 <__assert_fail@plt+0x1250>
   12b4c:	add	r7, r7, #1
   12b50:	b	12ab8 <__assert_fail@plt+0x12d8>
   12b54:	push	{r4, r5, r6, lr}
   12b58:	sub	sp, sp, #24
   12b5c:	mov	r6, r2
   12b60:	mov	r4, sp
   12b64:	mov	r2, r4
   12b68:	ldr	r5, [pc, #92]	; 12bcc <__assert_fail@plt+0x13ec>
   12b6c:	bl	169e4 <__assert_fail@plt+0x5204>
   12b70:	sub	r4, r0, r4
   12b74:	mov	r1, r0
   12b78:	rsb	r4, r4, #20
   12b7c:	mov	r2, #0
   12b80:	mov	lr, #48	; 0x30
   12b84:	ldr	r3, [r5, #4]
   12b88:	sub	ip, r4, r3
   12b8c:	add	r0, r3, ip
   12b90:	cmp	r6, r0
   12b94:	bhi	12bc0 <__assert_fail@plt+0x13e0>
   12b98:	cmp	r2, #0
   12b9c:	mov	r2, r4
   12ba0:	strne	r3, [r5, #4]
   12ba4:	ldr	r3, [r5, #4]
   12ba8:	mov	r0, r3
   12bac:	bl	11474 <memcpy@plt>
   12bb0:	add	r4, r0, r4
   12bb4:	str	r4, [r5, #4]
   12bb8:	add	sp, sp, #24
   12bbc:	pop	{r4, r5, r6, pc}
   12bc0:	mov	r2, #1
   12bc4:	strb	lr, [r3], #1
   12bc8:	b	12b8c <__assert_fail@plt+0x13ac>
   12bcc:	andeq	pc, r2, ip, ror #3
   12bd0:	push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12bd4:	mov	r6, r0
   12bd8:	mov	sl, r1
   12bdc:	mov	r4, #12
   12be0:	ldr	r9, [r0]
   12be4:	ldr	r5, [r0, #8]
   12be8:	ldr	r8, [r0, #4]
   12bec:	sub	r7, r5, #1
   12bf0:	mov	fp, r7
   12bf4:	cmp	fp, #0
   12bf8:	bge	12c8c <__assert_fail@plt+0x14ac>
   12bfc:	add	r5, r5, #1
   12c00:	mov	r4, #12
   12c04:	mov	r0, r9
   12c08:	mul	r4, r4, r5
   12c0c:	mov	r1, r4
   12c10:	sub	r4, r4, #12
   12c14:	bl	19034 <__assert_fail@plt+0x7854>
   12c18:	lsl	r3, r5, #2
   12c1c:	mov	r9, r0
   12c20:	mov	r0, r8
   12c24:	add	r4, r9, r4
   12c28:	mov	r1, r3
   12c2c:	str	r3, [sp, #4]
   12c30:	bl	19034 <__assert_fail@plt+0x7854>
   12c34:	mov	r8, r0
   12c38:	mov	r0, r4
   12c3c:	bl	1178c <__gmpz_init@plt>
   12c40:	ldr	r3, [sp, #4]
   12c44:	mov	r0, r4
   12c48:	sub	r3, r3, #4
   12c4c:	add	r4, r8, r3
   12c50:	cmp	fp, r7
   12c54:	sub	r3, r0, #12
   12c58:	blt	12ca8 <__assert_fail@plt+0x14c8>
   12c5c:	add	fp, fp, #1
   12c60:	mov	r0, #12
   12c64:	mov	r1, sl
   12c68:	mla	r0, r0, fp, r9
   12c6c:	bl	114f8 <__gmpz_set@plt>
   12c70:	mov	r3, #1
   12c74:	str	r3, [r8, fp, lsl #2]
   12c78:	str	r9, [r6]
   12c7c:	str	r8, [r6, #4]
   12c80:	str	r5, [r6, #8]
   12c84:	add	sp, sp, #12
   12c88:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12c8c:	mov	r1, sl
   12c90:	mla	r0, r4, fp, r9
   12c94:	bl	1172c <__gmpz_cmp@plt>
   12c98:	cmp	r0, #0
   12c9c:	ble	12ccc <__assert_fail@plt+0x14ec>
   12ca0:	sub	fp, fp, #1
   12ca4:	b	12bf4 <__assert_fail@plt+0x1414>
   12ca8:	mov	r1, r3
   12cac:	str	r3, [sp, #4]
   12cb0:	sub	r7, r7, #1
   12cb4:	bl	114f8 <__gmpz_set@plt>
   12cb8:	ldr	r2, [r4, #-4]
   12cbc:	ldr	r3, [sp, #4]
   12cc0:	str	r2, [r4], #-4
   12cc4:	mov	r0, r3
   12cc8:	b	12c50 <__assert_fail@plt+0x1470>
   12ccc:	bne	12bfc <__assert_fail@plt+0x141c>
   12cd0:	ldr	r3, [r8, fp, lsl #2]
   12cd4:	add	r3, r3, #1
   12cd8:	str	r3, [r8, fp, lsl #2]
   12cdc:	b	12c84 <__assert_fail@plt+0x14a4>
   12ce0:	push	{r4, r5, r6, lr}
   12ce4:	mov	r0, #1
   12ce8:	ldr	r4, [pc, #76]	; 12d3c <__assert_fail@plt+0x155c>
   12cec:	ldm	r4, {r1, r5}
   12cf0:	sub	r5, r5, r1
   12cf4:	mov	r2, r5
   12cf8:	bl	16984 <__assert_fail@plt+0x51a4>
   12cfc:	cmp	r0, r5
   12d00:	beq	12d30 <__assert_fail@plt+0x1550>
   12d04:	bl	1166c <__errno_location@plt>
   12d08:	ldr	r4, [r0]
   12d0c:	mov	r2, #5
   12d10:	mov	r0, #0
   12d14:	ldr	r1, [pc, #36]	; 12d40 <__assert_fail@plt+0x1560>
   12d18:	bl	114bc <dcgettext@plt>
   12d1c:	mov	r3, r0
   12d20:	ldr	r2, [pc, #28]	; 12d44 <__assert_fail@plt+0x1564>
   12d24:	mov	r0, #1
   12d28:	mov	r1, r4
   12d2c:	bl	115ac <error@plt>
   12d30:	ldr	r3, [r4]
   12d34:	str	r3, [r4, #4]
   12d38:	pop	{r4, r5, r6, pc}
   12d3c:	andeq	pc, r2, ip, ror #3
   12d40:	andeq	lr, r1, r2
   12d44:	andeq	lr, r1, ip, ror #8
   12d48:	push	{r4, r5, r6, r7, r8, lr}
   12d4c:	mov	r6, r2
   12d50:	mov	r7, r3
   12d54:	orrs	ip, r6, r7
   12d58:	ldrd	r2, [sp, #24]
   12d5c:	beq	12d90 <__assert_fail@plt+0x15b0>
   12d60:	mov	r1, r0
   12d64:	ldrd	r4, [r0, #8]
   12d68:	orrs	r0, r4, r5
   12d6c:	beq	12d84 <__assert_fail@plt+0x15a4>
   12d70:	ldr	r3, [pc, #40]	; 12da0 <__assert_fail@plt+0x15c0>
   12d74:	movw	r2, #558	; 0x22e
   12d78:	ldr	r1, [pc, #36]	; 12da4 <__assert_fail@plt+0x15c4>
   12d7c:	ldr	r0, [pc, #36]	; 12da8 <__assert_fail@plt+0x15c8>
   12d80:	bl	117e0 <__assert_fail@plt>
   12d84:	strd	r2, [r1]
   12d88:	strd	r6, [r1, #8]
   12d8c:	pop	{r4, r5, r6, r7, r8, pc}
   12d90:	mov	r1, #1
   12d94:	str	r1, [sp, #24]
   12d98:	pop	{r4, r5, r6, r7, r8, lr}
   12d9c:	b	11bb0 <__assert_fail@plt+0x3d0>
   12da0:	andeq	fp, r1, r4, lsl #3
   12da4:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   12da8:	andeq	lr, r1, lr
   12dac:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12db0:	sub	sp, sp, #36	; 0x24
   12db4:	mov	lr, r0
   12db8:	mov	sl, #0
   12dbc:	ldrd	r4, [sp, #72]	; 0x48
   12dc0:	ldrd	r6, [sp, #80]	; 0x50
   12dc4:	ldrd	r0, [sp, #88]	; 0x58
   12dc8:	and	r8, r4, #1
   12dcc:	mov	r9, sl
   12dd0:	orrs	ip, r8, r9
   12dd4:	beq	12e14 <__assert_fail@plt+0x1634>
   12dd8:	mov	ip, #0
   12ddc:	orr	r8, r2, r6
   12de0:	str	r8, [sp]
   12de4:	orr	r8, r3, r7
   12de8:	str	r8, [sp, #4]
   12dec:	ldrd	r8, [sp]
   12df0:	orrs	r8, r8, r9
   12df4:	bne	12e3c <__assert_fail@plt+0x165c>
   12df8:	ldrd	r2, [sp]
   12dfc:	strd	r2, [lr]
   12e00:	mov	r2, r4
   12e04:	mov	r3, r5
   12e08:	add	sp, sp, #36	; 0x24
   12e0c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12e10:	b	11af0 <__assert_fail@plt+0x310>
   12e14:	lsr	fp, r4, #1
   12e18:	lsr	ip, r5, #1
   12e1c:	orr	r4, fp, r5, lsl #31
   12e20:	orr	r5, ip, r2, lsl #31
   12e24:	lsr	ip, r2, #1
   12e28:	lsr	fp, r3, #1
   12e2c:	orr	ip, ip, r3, lsl #31
   12e30:	mov	r3, fp
   12e34:	mov	r2, ip
   12e38:	b	12dc8 <__assert_fail@plt+0x15e8>
   12e3c:	cmp	r3, r7
   12e40:	cmpeq	r2, r6
   12e44:	bhi	12e68 <__assert_fail@plt+0x1688>
   12e48:	moveq	r8, #1
   12e4c:	movne	r8, #0
   12e50:	cmp	r5, r1
   12e54:	cmpeq	r4, r0
   12e58:	movhi	r9, #1
   12e5c:	movls	r9, #0
   12e60:	tst	r8, r9
   12e64:	beq	12ed0 <__assert_fail@plt+0x16f0>
   12e68:	cmp	r5, r1
   12e6c:	cmpeq	r4, r0
   12e70:	movcc	r8, #1
   12e74:	movcs	r8, #0
   12e78:	subs	r4, r4, r0
   12e7c:	sbc	r5, r5, r1
   12e80:	subs	sl, r2, r6
   12e84:	sbc	fp, r3, r7
   12e88:	subs	r2, sl, r8
   12e8c:	sbc	r3, fp, ip
   12e90:	lsr	r9, r4, #1
   12e94:	str	ip, [sp, #20]
   12e98:	lsr	r8, r5, #1
   12e9c:	orr	r4, r9, r5, lsl #31
   12ea0:	orr	r5, r8, r2, lsl #31
   12ea4:	lsr	r8, r2, #1
   12ea8:	lsr	r9, r3, #1
   12eac:	orr	r8, r8, r3, lsl #31
   12eb0:	mov	r3, r9
   12eb4:	mov	r2, r8
   12eb8:	and	r8, r4, #1
   12ebc:	str	r8, [sp, #16]
   12ec0:	ldrd	r8, [sp, #16]
   12ec4:	orrs	r8, r8, r9
   12ec8:	beq	12e90 <__assert_fail@plt+0x16b0>
   12ecc:	b	12ddc <__assert_fail@plt+0x15fc>
   12ed0:	cmp	r3, r7
   12ed4:	cmpeq	r2, r6
   12ed8:	bcc	12ef4 <__assert_fail@plt+0x1714>
   12edc:	cmp	r5, r1
   12ee0:	cmpeq	r4, r0
   12ee4:	movcs	r8, #0
   12ee8:	andcc	r8, r8, #1
   12eec:	cmp	r8, #0
   12ef0:	beq	12f58 <__assert_fail@plt+0x1778>
   12ef4:	subs	r0, r0, r4
   12ef8:	sbc	r1, r1, r5
   12efc:	subs	r8, r6, r2
   12f00:	sbc	r6, r7, r3
   12f04:	str	r8, [sp, #8]
   12f08:	str	r6, [sp, #12]
   12f0c:	ldrd	r6, [sp, #8]
   12f10:	subs	r6, r6, r9
   12f14:	sbc	r7, r7, #0
   12f18:	lsr	r9, r0, #1
   12f1c:	str	ip, [sp, #28]
   12f20:	lsr	r8, r1, #1
   12f24:	orr	r0, r9, r1, lsl #31
   12f28:	orr	r1, r8, r6, lsl #31
   12f2c:	lsr	r8, r6, #1
   12f30:	lsr	r9, r7, #1
   12f34:	orr	r8, r8, r7, lsl #31
   12f38:	mov	r7, r9
   12f3c:	mov	r6, r8
   12f40:	and	r8, r0, #1
   12f44:	str	r8, [sp, #24]
   12f48:	ldrd	r8, [sp, #24]
   12f4c:	orrs	r8, r8, r9
   12f50:	beq	12f18 <__assert_fail@plt+0x1738>
   12f54:	b	12ddc <__assert_fail@plt+0x15fc>
   12f58:	mov	r0, r4
   12f5c:	mov	r1, r5
   12f60:	strd	r2, [lr]
   12f64:	add	sp, sp, #36	; 0x24
   12f68:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12f6c:	push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12f70:	mov	r7, r3
   12f74:	mov	r6, r2
   12f78:	ldrd	r4, [sp, #56]	; 0x38
   12f7c:	ldr	r2, [sp, #64]	; 0x40
   12f80:	ldr	r1, [sp, #68]	; 0x44
   12f84:	orrs	r3, r4, r5
   12f88:	bne	12fa0 <__assert_fail@plt+0x17c0>
   12f8c:	ldr	r3, [pc, #456]	; 1315c <__assert_fail@plt+0x197c>
   12f90:	movw	r2, #411	; 0x19b
   12f94:	ldr	r1, [pc, #452]	; 13160 <__assert_fail@plt+0x1980>
   12f98:	ldr	r0, [pc, #452]	; 13164 <__assert_fail@plt+0x1984>
   12f9c:	bl	117e0 <__assert_fail@plt>
   12fa0:	orrs	r3, r6, r7
   12fa4:	movne	ip, #0
   12fa8:	ldrdne	r4, [sp, #56]	; 0x38
   12fac:	movne	lr, ip
   12fb0:	bne	12fdc <__assert_fail@plt+0x17fc>
   12fb4:	strd	r6, [r0]
   12fb8:	ldrd	r0, [sp, #48]	; 0x30
   12fbc:	add	sp, sp, #12
   12fc0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12fc4:	lsl	r3, r5, #8
   12fc8:	add	ip, ip, #8
   12fcc:	lsl	r8, r4, #8
   12fd0:	orr	r3, r3, r4, lsr #24
   12fd4:	mov	r4, r8
   12fd8:	mov	r5, r3
   12fdc:	mov	sl, lr
   12fe0:	and	fp, r5, #-16777216	; 0xff000000
   12fe4:	orrs	r3, sl, fp
   12fe8:	beq	12fc4 <__assert_fail@plt+0x17e4>
   12fec:	cmp	r4, #0
   12ff0:	sbcs	r3, r5, #0
   12ff4:	bge	13120 <__assert_fail@plt+0x1940>
   12ff8:	mov	r3, #0
   12ffc:	mov	r4, r6
   13000:	mov	r5, r7
   13004:	mov	r8, r3
   13008:	and	lr, r5, #-16777216	; 0xff000000
   1300c:	stm	sp, {r8, lr}
   13010:	ldrd	sl, [sp]
   13014:	orrs	lr, sl, fp
   13018:	beq	13130 <__assert_fail@plt+0x1950>
   1301c:	cmp	r4, #0
   13020:	sbcs	lr, r5, #0
   13024:	bge	1314c <__assert_fail@plt+0x196c>
   13028:	sub	r3, ip, r3
   1302c:	rsb	r4, r3, #64	; 0x40
   13030:	sub	fp, r3, #32
   13034:	lsr	lr, r2, r4
   13038:	rsb	r5, r4, #32
   1303c:	sub	ip, r4, #32
   13040:	rsb	sl, r3, #32
   13044:	orr	lr, lr, r1, lsl r5
   13048:	ldr	r5, [sp, #56]	; 0x38
   1304c:	orr	lr, lr, r1, lsr ip
   13050:	ldr	ip, [sp, #60]	; 0x3c
   13054:	orr	r8, lr, r5, lsl r3
   13058:	lsl	ip, ip, r3
   1305c:	orr	ip, ip, r5, lsl fp
   13060:	orr	ip, ip, r5, lsr sl
   13064:	lsl	r5, r1, r3
   13068:	orr	r9, ip, r1, lsr r4
   1306c:	orr	r5, r5, r2, lsl fp
   13070:	lsl	r4, r2, r3
   13074:	orr	r5, r5, r2, lsr sl
   13078:	mov	r2, #0
   1307c:	cmp	r3, r2
   13080:	ble	12fb4 <__assert_fail@plt+0x17d4>
   13084:	cmp	r7, r9
   13088:	cmpeq	r6, r8
   1308c:	bhi	130b4 <__assert_fail@plt+0x18d4>
   13090:	ldrd	sl, [sp, #48]	; 0x30
   13094:	moveq	r1, #1
   13098:	movne	r1, #0
   1309c:	cmp	fp, r5
   130a0:	cmpeq	sl, r4
   130a4:	movcc	r1, #0
   130a8:	andcs	r1, r1, #1
   130ac:	cmp	r1, #0
   130b0:	beq	130f4 <__assert_fail@plt+0x1914>
   130b4:	ldrd	sl, [sp, #48]	; 0x30
   130b8:	mov	ip, #0
   130bc:	ldr	lr, [sp, #48]	; 0x30
   130c0:	cmp	fp, r5
   130c4:	cmpeq	sl, r4
   130c8:	movcc	r1, #1
   130cc:	movcs	r1, #0
   130d0:	subs	lr, lr, r4
   130d4:	str	lr, [sp, #48]	; 0x30
   130d8:	ldr	lr, [sp, #52]	; 0x34
   130dc:	sbc	lr, lr, r5
   130e0:	str	lr, [sp, #52]	; 0x34
   130e4:	subs	lr, r6, r8
   130e8:	sbc	fp, r7, r9
   130ec:	subs	r6, lr, r1
   130f0:	sbc	r7, fp, ip
   130f4:	lsr	ip, r4, #1
   130f8:	add	r2, r2, #1
   130fc:	lsr	r1, r5, #1
   13100:	orr	r4, ip, r5, lsl #31
   13104:	orr	r5, r1, r8, lsl #31
   13108:	lsr	r1, r8, #1
   1310c:	lsr	ip, r9, #1
   13110:	orr	r1, r1, r9, lsl #31
   13114:	mov	r9, ip
   13118:	mov	r8, r1
   1311c:	b	1307c <__assert_fail@plt+0x189c>
   13120:	adds	r4, r4, r4
   13124:	add	ip, ip, #1
   13128:	adc	r5, r5, r5
   1312c:	b	12fec <__assert_fail@plt+0x180c>
   13130:	lsl	lr, r5, #8
   13134:	add	r3, r3, #8
   13138:	lsl	r9, r4, #8
   1313c:	orr	lr, lr, r4, lsr #24
   13140:	mov	r4, r9
   13144:	mov	r5, lr
   13148:	b	13008 <__assert_fail@plt+0x1828>
   1314c:	adds	r4, r4, r4
   13150:	add	r3, r3, #1
   13154:	adc	r5, r5, r5
   13158:	b	1301c <__assert_fail@plt+0x183c>
   1315c:	muleq	r1, r8, r1
   13160:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   13164:	andeq	lr, r1, r6, lsr #32
   13168:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1316c:	mov	r4, r0
   13170:	mov	r5, r1
   13174:	mov	r7, r3
   13178:	orrs	r3, r4, r5
   1317c:	mov	r6, r2
   13180:	sub	sp, sp, #20
   13184:	moveq	r2, #0
   13188:	beq	1328c <__assert_fail@plt+0x1aac>
   1318c:	add	r3, pc, #268	; 0x10c
   13190:	ldrd	r2, [r3]
   13194:	bl	1acd8 <__assert_fail@plt+0x94f8>
   13198:	add	r3, pc, #256	; 0x100
   1319c:	ldrd	r2, [r3]
   131a0:	strd	r0, [sp, #8]
   131a4:	mov	r0, r4
   131a8:	mov	r1, r5
   131ac:	add	r5, pc, #236	; 0xec
   131b0:	ldrd	r4, [r5]
   131b4:	bl	1acd8 <__assert_fail@plt+0x94f8>
   131b8:	strd	r2, [sp]
   131bc:	mov	r2, #0
   131c0:	mov	lr, #64	; 0x40
   131c4:	mov	r3, r2
   131c8:	mov	r0, r2
   131cc:	mov	r1, r2
   131d0:	lsr	r8, r0, #1
   131d4:	lsr	ip, r1, #1
   131d8:	orr	r0, r8, r1, lsl #31
   131dc:	orr	r1, ip, r4, lsl #31
   131e0:	lsr	r8, r5, #1
   131e4:	lsr	ip, r4, #1
   131e8:	orr	ip, ip, r5, lsl #31
   131ec:	mov	r5, r8
   131f0:	ldrd	r8, [sp]
   131f4:	mov	r4, ip
   131f8:	adds	ip, r2, r2
   131fc:	adc	sl, r3, r3
   13200:	mov	r2, ip
   13204:	mov	r3, sl
   13208:	cmp	r5, r9
   1320c:	cmpeq	r4, r8
   13210:	bcc	13234 <__assert_fail@plt+0x1a54>
   13214:	moveq	r8, #1
   13218:	movne	r8, #0
   1321c:	cmp	r1, r7
   13220:	cmpeq	r0, r6
   13224:	movhi	r8, #0
   13228:	andls	r8, r8, #1
   1322c:	cmp	r8, #0
   13230:	beq	13278 <__assert_fail@plt+0x1a98>
   13234:	ldr	r9, [sp]
   13238:	adds	r2, ip, #1
   1323c:	mov	r8, #0
   13240:	adc	r3, sl, #0
   13244:	cmp	r1, r7
   13248:	cmpeq	r0, r6
   1324c:	movhi	ip, #1
   13250:	movls	ip, #0
   13254:	subs	r6, r6, r0
   13258:	sbc	r7, r7, r1
   1325c:	subs	sl, r9, r4
   13260:	ldr	r9, [sp, #4]
   13264:	sbc	fp, r9, r5
   13268:	subs	ip, sl, ip
   1326c:	str	ip, [sp]
   13270:	sbc	ip, fp, r8
   13274:	str	ip, [sp, #4]
   13278:	subs	lr, lr, #1
   1327c:	bne	131d0 <__assert_fail@plt+0x19f0>
   13280:	ldrd	r0, [sp, #8]
   13284:	bl	13168 <__assert_fail@plt+0x1988>
   13288:	mov	r2, #9
   1328c:	mov	r0, r6
   13290:	mov	r1, r7
   13294:	add	sp, sp, #20
   13298:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1329c:	b	12b54 <__assert_fail@plt+0x1374>
   132a0:	blcc	fe6c5aa8 <stdout@@GLIBC_2.4+0xfe6968c4>
   132a4:	andeq	r0, r0, r0
   132a8:	push	{r4, r5, r6, r7, r8, lr}
   132ac:	mov	r4, r3
   132b0:	mov	r6, r0
   132b4:	mov	r3, r0
   132b8:	mov	r7, r1
   132bc:	mov	r0, r4
   132c0:	mov	r1, r2
   132c4:	ldr	r2, [sp, #24]
   132c8:	ldr	r8, [sp, #28]
   132cc:	bl	114c8 <__gmpz_powm@plt>
   132d0:	mov	r1, #1
   132d4:	mov	r0, r4
   132d8:	bl	11780 <__gmpz_cmp_ui@plt>
   132dc:	cmp	r0, #0
   132e0:	bne	132ec <__assert_fail@plt+0x1b0c>
   132e4:	mov	r0, #1
   132e8:	pop	{r4, r5, r6, r7, r8, pc}
   132ec:	mov	r1, r7
   132f0:	mov	r0, r4
   132f4:	bl	1172c <__gmpz_cmp@plt>
   132f8:	cmp	r0, #0
   132fc:	movne	r5, #1
   13300:	beq	132e4 <__assert_fail@plt+0x1b04>
   13304:	cmp	r8, r5
   13308:	bls	13348 <__assert_fail@plt+0x1b68>
   1330c:	mov	r3, r6
   13310:	mov	r2, #2
   13314:	mov	r1, r4
   13318:	mov	r0, r4
   1331c:	bl	11798 <__gmpz_powm_ui@plt>
   13320:	mov	r1, r7
   13324:	mov	r0, r4
   13328:	bl	1172c <__gmpz_cmp@plt>
   1332c:	cmp	r0, #0
   13330:	beq	132e4 <__assert_fail@plt+0x1b04>
   13334:	mov	r1, #1
   13338:	mov	r0, r4
   1333c:	bl	11780 <__gmpz_cmp_ui@plt>
   13340:	cmp	r0, #0
   13344:	bne	13350 <__assert_fail@plt+0x1b70>
   13348:	mov	r0, #0
   1334c:	pop	{r4, r5, r6, r7, r8, pc}
   13350:	add	r5, r5, #1
   13354:	b	13304 <__assert_fail@plt+0x1b24>
   13358:	cmp	r1, #0
   1335c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13360:	mov	r6, r0
   13364:	cmpeq	r0, #1
   13368:	sub	sp, sp, #228	; 0xe4
   1336c:	mov	r7, r1
   13370:	mov	r8, r2
   13374:	mov	r9, r3
   13378:	bhi	137f0 <__assert_fail@plt+0x2010>
   1337c:	mov	r3, #128	; 0x80
   13380:	mov	r2, #1
   13384:	str	r3, [sp, #48]	; 0x30
   13388:	mov	r3, #0
   1338c:	strd	r2, [sp, #72]	; 0x48
   13390:	mov	r2, #0
   13394:	mov	r3, #0
   13398:	strd	r2, [sp, #64]	; 0x40
   1339c:	mov	r3, #0
   133a0:	mov	lr, r3
   133a4:	ldr	r2, [sp, #64]	; 0x40
   133a8:	ldr	r1, [sp, #76]	; 0x4c
   133ac:	adds	r0, r2, r2
   133b0:	ldr	r2, [sp, #68]	; 0x44
   133b4:	orr	r1, r0, r1, lsr #31
   133b8:	adc	r2, r2, r2
   133bc:	str	r1, [sp, #64]	; 0x40
   133c0:	str	r2, [sp, #68]	; 0x44
   133c4:	ldrd	r0, [sp, #64]	; 0x40
   133c8:	ldr	r2, [sp, #72]	; 0x48
   133cc:	adds	r4, r2, r2
   133d0:	ldr	r2, [sp, #76]	; 0x4c
   133d4:	adc	r5, r2, r2
   133d8:	cmp	r7, r1
   133dc:	cmpeq	r6, r0
   133e0:	strd	r4, [sp, #72]	; 0x48
   133e4:	bcc	13408 <__assert_fail@plt+0x1c28>
   133e8:	moveq	r2, #1
   133ec:	movne	r2, #0
   133f0:	cmp	r5, r9
   133f4:	cmpeq	r4, r8
   133f8:	movcc	r2, #0
   133fc:	andcs	r2, r2, #1
   13400:	cmp	r2, #0
   13404:	beq	13448 <__assert_fail@plt+0x1c68>
   13408:	cmp	r5, r9
   1340c:	cmpeq	r4, r8
   13410:	movcc	r2, #1
   13414:	movcs	r2, #0
   13418:	subs	r1, r4, r8
   1341c:	str	r1, [sp, #72]	; 0x48
   13420:	sbc	r1, r5, r9
   13424:	str	r1, [sp, #76]	; 0x4c
   13428:	ldr	r1, [sp, #64]	; 0x40
   1342c:	subs	ip, r1, r6
   13430:	ldr	r1, [sp, #68]	; 0x44
   13434:	sbc	r1, r1, r7
   13438:	subs	r2, ip, r2
   1343c:	str	r2, [sp, #64]	; 0x40
   13440:	sbc	r2, r1, lr
   13444:	str	r2, [sp, #68]	; 0x44
   13448:	ldr	r2, [sp, #48]	; 0x30
   1344c:	add	r3, r3, #1
   13450:	cmp	r2, r3
   13454:	bne	133a4 <__assert_fail@plt+0x1bc4>
   13458:	ldr	r3, [sp, #72]	; 0x48
   1345c:	adds	r3, r3, r3
   13460:	str	r3, [sp, #56]	; 0x38
   13464:	ldr	r3, [sp, #76]	; 0x4c
   13468:	adc	r3, r3, r3
   1346c:	str	r3, [sp, #60]	; 0x3c
   13470:	ldrd	r2, [sp, #56]	; 0x38
   13474:	strd	r2, [sp, #48]	; 0x30
   13478:	ldrd	r0, [sp, #48]	; 0x30
   1347c:	ldr	r3, [sp, #64]	; 0x40
   13480:	adds	sl, r3, r3
   13484:	ldr	r3, [sp, #68]	; 0x44
   13488:	adc	fp, r3, r3
   1348c:	ldrd	r2, [sp, #72]	; 0x48
   13490:	cmp	r3, r1
   13494:	cmpeq	r2, r0
   13498:	movhi	r3, #1
   1349c:	movls	r3, #0
   134a0:	adds	r4, sl, r3
   134a4:	adc	r5, fp, #0
   134a8:	cmp	r5, r7
   134ac:	cmpeq	r4, r6
   134b0:	bhi	134d8 <__assert_fail@plt+0x1cf8>
   134b4:	moveq	r3, #1
   134b8:	movne	r3, #0
   134bc:	cmp	r9, r1
   134c0:	cmpeq	r8, r0
   134c4:	movhi	r3, #0
   134c8:	andls	r3, r3, #1
   134cc:	cmp	r3, #0
   134d0:	strdeq	r4, [sp, #184]	; 0xb8
   134d4:	beq	13520 <__assert_fail@plt+0x1d40>
   134d8:	ldrd	r2, [sp, #56]	; 0x38
   134dc:	ldr	r1, [sp, #56]	; 0x38
   134e0:	cmp	r9, r3
   134e4:	cmpeq	r8, r2
   134e8:	movhi	r3, #1
   134ec:	movls	r3, #0
   134f0:	subs	r1, r1, r8
   134f4:	mov	r2, #0
   134f8:	str	r1, [sp, #48]	; 0x30
   134fc:	ldr	r1, [sp, #60]	; 0x3c
   13500:	sbc	r1, r1, r9
   13504:	subs	r3, r4, r3
   13508:	sbc	r2, r5, r2
   1350c:	subs	r3, r3, r6
   13510:	sbc	r2, r2, r7
   13514:	str	r1, [sp, #52]	; 0x34
   13518:	str	r3, [sp, #184]	; 0xb8
   1351c:	str	r2, [sp, #188]	; 0xbc
   13520:	ldrd	r2, [sp, #184]	; 0xb8
   13524:	strd	r2, [sp, #192]	; 0xc0
   13528:	strd	r2, [sp, #200]	; 0xc8
   1352c:	ldrd	r2, [sp, #48]	; 0x30
   13530:	strd	r2, [sp, #56]	; 0x38
   13534:	strd	r2, [sp, #80]	; 0x50
   13538:	mov	r3, #1
   1353c:	ldr	r2, [sp, #264]	; 0x108
   13540:	str	r3, [sp, #92]	; 0x5c
   13544:	str	r3, [sp, #128]	; 0x80
   13548:	mov	r3, #0
   1354c:	strd	r2, [sp, #144]	; 0x90
   13550:	orrs	r3, r6, r7
   13554:	movne	r3, #1
   13558:	moveq	r3, #0
   1355c:	cmp	r9, #0
   13560:	cmpeq	r8, #1
   13564:	movne	r3, #1
   13568:	cmp	r3, #0
   1356c:	beq	13d9c <__assert_fail@plt+0x25bc>
   13570:	ldr	r2, [pc, #2516]	; 13f4c <__assert_fail@plt+0x276c>
   13574:	ubfx	r3, r8, #1, #7
   13578:	add	r3, r2, r3
   1357c:	movw	r2, #709	; 0x2c5
   13580:	ldrb	r0, [r3, r2]
   13584:	mov	r2, #0
   13588:	adds	r3, r0, r0
   1358c:	umull	r0, r1, r0, r0
   13590:	adc	r2, r2, r2
   13594:	mul	ip, r0, r9
   13598:	mla	ip, r8, r1, ip
   1359c:	umull	r0, r1, r0, r8
   135a0:	subs	r4, r3, r0
   135a4:	add	r1, ip, r1
   135a8:	sbc	r3, r2, r1
   135ac:	adds	r2, r4, r4
   135b0:	adc	r1, r3, r3
   135b4:	mul	r3, r4, r3
   135b8:	umull	r4, r5, r4, r4
   135bc:	add	r5, r5, r3, lsl #1
   135c0:	mul	r3, r4, r9
   135c4:	mla	r3, r8, r5, r3
   135c8:	umull	r4, r5, r4, r8
   135cc:	subs	r2, r2, r4
   135d0:	add	r5, r3, r5
   135d4:	sbc	r1, r1, r5
   135d8:	adds	ip, r2, r2
   135dc:	adc	r0, r1, r1
   135e0:	mov	r4, #0
   135e4:	mul	r1, r2, r1
   135e8:	umull	r2, r3, r2, r2
   135ec:	add	r3, r3, r1, lsl #1
   135f0:	mul	r1, r2, r9
   135f4:	mla	r1, r8, r3, r1
   135f8:	umull	r2, r3, r2, r8
   135fc:	add	r3, r1, r3
   13600:	subs	r1, ip, r2
   13604:	sbc	r3, r0, r3
   13608:	str	r1, [sp, #120]	; 0x78
   1360c:	str	r3, [sp, #132]	; 0x84
   13610:	ldr	r1, [sp, #120]	; 0x78
   13614:	strd	r6, [sp, #24]
   13618:	ldrd	r2, [sp, #184]	; 0xb8
   1361c:	str	r1, [sp, #40]	; 0x28
   13620:	ldr	r1, [sp, #132]	; 0x84
   13624:	strd	r2, [sp, #8]
   13628:	strd	r8, [sp, #32]
   1362c:	str	r1, [sp, #44]	; 0x2c
   13630:	ldrd	r0, [sp, #48]	; 0x30
   13634:	strd	r0, [sp]
   13638:	strd	r0, [sp, #16]
   1363c:	add	r0, sp, #216	; 0xd8
   13640:	bl	11f9c <__assert_fail@plt+0x7bc>
   13644:	ldrd	sl, [sp, #144]	; 0x90
   13648:	adds	r2, sl, r0
   1364c:	adcs	r3, fp, r1
   13650:	mov	r0, r2
   13654:	mov	r1, r3
   13658:	ldrd	r2, [sp, #216]	; 0xd8
   1365c:	movcs	ip, #1
   13660:	movcc	ip, #0
   13664:	strd	r0, [sp, #48]	; 0x30
   13668:	adds	sl, r2, ip
   1366c:	adc	fp, r3, #0
   13670:	cmp	fp, r7
   13674:	cmpeq	sl, r6
   13678:	bhi	136a0 <__assert_fail@plt+0x1ec0>
   1367c:	moveq	ip, #1
   13680:	movne	ip, #0
   13684:	cmp	r9, r1
   13688:	cmpeq	r8, r0
   1368c:	movhi	ip, #0
   13690:	andls	ip, ip, #1
   13694:	cmp	ip, #0
   13698:	strdeq	sl, [sp, #184]	; 0xb8
   1369c:	beq	136d8 <__assert_fail@plt+0x1ef8>
   136a0:	cmp	r9, r1
   136a4:	cmpeq	r8, r0
   136a8:	movhi	ip, #1
   136ac:	movls	ip, #0
   136b0:	subs	r3, r0, r8
   136b4:	str	r3, [sp, #48]	; 0x30
   136b8:	sbc	r3, r1, r9
   136bc:	subs	ip, sl, ip
   136c0:	sbc	lr, fp, r4
   136c4:	subs	ip, ip, r6
   136c8:	sbc	lr, lr, r7
   136cc:	str	r3, [sp, #52]	; 0x34
   136d0:	str	ip, [sp, #184]	; 0xb8
   136d4:	str	lr, [sp, #188]	; 0xbc
   136d8:	ldr	r2, [sp, #48]	; 0x30
   136dc:	ldr	r3, [sp, #80]	; 0x50
   136e0:	ldrd	r0, [sp, #80]	; 0x50
   136e4:	subs	r3, r3, r2
   136e8:	ldr	r2, [sp, #52]	; 0x34
   136ec:	str	r3, [sp, #104]	; 0x68
   136f0:	ldr	r3, [sp, #84]	; 0x54
   136f4:	sbc	r3, r3, r2
   136f8:	ldr	r2, [sp, #192]	; 0xc0
   136fc:	str	r3, [sp, #108]	; 0x6c
   13700:	ldr	r3, [sp, #184]	; 0xb8
   13704:	subs	r3, r2, r3
   13708:	ldr	r2, [sp, #196]	; 0xc4
   1370c:	str	r3, [sp, #152]	; 0x98
   13710:	ldr	r3, [sp, #188]	; 0xbc
   13714:	sbc	r3, r2, r3
   13718:	str	r3, [sp, #156]	; 0x9c
   1371c:	ldrd	r2, [sp, #48]	; 0x30
   13720:	cmp	r3, r1
   13724:	cmpeq	r2, r0
   13728:	ldrd	r2, [sp, #152]	; 0x98
   1372c:	movhi	r1, #1
   13730:	movls	r1, #0
   13734:	subs	r2, r2, r1
   13738:	sbc	r3, r3, #0
   1373c:	cmp	r2, #0
   13740:	sbcs	r1, r3, #0
   13744:	bge	13770 <__assert_fail@plt+0x1f90>
   13748:	ldrd	sl, [sp, #104]	; 0x68
   1374c:	adds	r0, r8, sl
   13750:	adcs	r1, r9, fp
   13754:	movcs	ip, #1
   13758:	movcc	ip, #0
   1375c:	strd	r0, [sp, #104]	; 0x68
   13760:	adds	r0, r2, ip
   13764:	adc	r1, r3, #0
   13768:	adds	r2, r0, r6
   1376c:	adc	r3, r1, r7
   13770:	ldr	r1, [sp, #120]	; 0x78
   13774:	strd	r2, [sp, #8]
   13778:	ldrd	r2, [sp, #72]	; 0x48
   1377c:	str	r1, [sp, #40]	; 0x28
   13780:	ldr	r1, [sp, #132]	; 0x84
   13784:	strd	r2, [sp]
   13788:	strd	r6, [sp, #24]
   1378c:	strd	r8, [sp, #32]
   13790:	ldrd	r2, [sp, #64]	; 0x40
   13794:	str	r1, [sp, #44]	; 0x2c
   13798:	ldrd	r0, [sp, #104]	; 0x68
   1379c:	strd	r0, [sp, #16]
   137a0:	add	r0, sp, #216	; 0xd8
   137a4:	bl	11f9c <__assert_fail@plt+0x7bc>
   137a8:	ldrd	r2, [sp, #216]	; 0xd8
   137ac:	strd	r2, [sp, #64]	; 0x40
   137b0:	ldr	r3, [sp, #92]	; 0x5c
   137b4:	strd	r0, [sp, #72]	; 0x48
   137b8:	and	r3, r3, #31
   137bc:	cmp	r3, #1
   137c0:	bne	13c04 <__assert_fail@plt+0x2424>
   137c4:	and	r3, r8, #1
   137c8:	str	r3, [sp, #160]	; 0xa0
   137cc:	str	r4, [sp, #164]	; 0xa4
   137d0:	ldrd	r2, [sp, #160]	; 0xa0
   137d4:	orrs	r3, r2, r3
   137d8:	bne	1380c <__assert_fail@plt+0x202c>
   137dc:	ldr	r3, [pc, #1900]	; 13f50 <__assert_fail@plt+0x2770>
   137e0:	mov	r2, #476	; 0x1dc
   137e4:	ldr	r1, [pc, #1896]	; 13f54 <__assert_fail@plt+0x2774>
   137e8:	ldr	r0, [pc, #1896]	; 13f58 <__assert_fail@plt+0x2778>
   137ec:	bl	117e0 <__assert_fail@plt>
   137f0:	mov	r3, #64	; 0x40
   137f4:	mov	r2, #0
   137f8:	str	r3, [sp, #48]	; 0x30
   137fc:	mov	r3, #0
   13800:	strd	r2, [sp, #72]	; 0x48
   13804:	mov	r2, #1
   13808:	b	13394 <__assert_fail@plt+0x1bb4>
   1380c:	ldr	r2, [sp, #64]	; 0x40
   13810:	ldr	r3, [sp, #72]	; 0x48
   13814:	orr	r3, r3, r2
   13818:	ldr	r2, [sp, #68]	; 0x44
   1381c:	str	r3, [sp, #112]	; 0x70
   13820:	ldr	r3, [sp, #76]	; 0x4c
   13824:	orr	r3, r3, r2
   13828:	str	r3, [sp, #116]	; 0x74
   1382c:	ldrd	r2, [sp, #112]	; 0x70
   13830:	orrs	r3, r2, r3
   13834:	bne	13bb4 <__assert_fail@plt+0x23d4>
   13838:	ldrd	r2, [sp, #112]	; 0x70
   1383c:	strd	r2, [sp, #64]	; 0x40
   13840:	strd	r2, [sp, #72]	; 0x48
   13844:	strd	r6, [sp, #208]	; 0xd0
   13848:	ldr	r1, [sp, #120]	; 0x78
   1384c:	strd	r6, [sp, #24]
   13850:	ldrd	r2, [sp, #200]	; 0xc8
   13854:	str	r1, [sp, #40]	; 0x28
   13858:	ldr	r1, [sp, #132]	; 0x84
   1385c:	strd	r2, [sp, #8]
   13860:	strd	r8, [sp, #32]
   13864:	str	r1, [sp, #44]	; 0x2c
   13868:	ldrd	r0, [sp, #56]	; 0x38
   1386c:	strd	r0, [sp]
   13870:	strd	r0, [sp, #16]
   13874:	add	r0, sp, #216	; 0xd8
   13878:	bl	11f9c <__assert_fail@plt+0x7bc>
   1387c:	ldrd	r4, [sp, #144]	; 0x90
   13880:	adds	r2, r4, r0
   13884:	adcs	r3, r5, r1
   13888:	mov	r0, r2
   1388c:	mov	r1, r3
   13890:	ldrd	r2, [sp, #216]	; 0xd8
   13894:	movcs	ip, #1
   13898:	movcc	ip, #0
   1389c:	strd	r0, [sp, #56]	; 0x38
   138a0:	adds	r4, r2, ip
   138a4:	adc	r5, r3, #0
   138a8:	cmp	r5, r7
   138ac:	cmpeq	r4, r6
   138b0:	bhi	138d8 <__assert_fail@plt+0x20f8>
   138b4:	moveq	ip, #1
   138b8:	movne	ip, #0
   138bc:	cmp	r9, r1
   138c0:	cmpeq	r8, r0
   138c4:	movhi	ip, #0
   138c8:	andls	ip, ip, #1
   138cc:	cmp	ip, #0
   138d0:	strdeq	r4, [sp, #200]	; 0xc8
   138d4:	beq	13914 <__assert_fail@plt+0x2134>
   138d8:	cmp	r9, r1
   138dc:	mov	lr, #0
   138e0:	cmpeq	r8, r0
   138e4:	movhi	ip, #1
   138e8:	movls	ip, #0
   138ec:	subs	r3, r0, r8
   138f0:	str	r3, [sp, #56]	; 0x38
   138f4:	sbc	r3, r1, r9
   138f8:	subs	ip, r4, ip
   138fc:	sbc	lr, r5, lr
   13900:	subs	ip, ip, r6
   13904:	sbc	lr, lr, r7
   13908:	str	r3, [sp, #60]	; 0x3c
   1390c:	str	ip, [sp, #200]	; 0xc8
   13910:	str	lr, [sp, #204]	; 0xcc
   13914:	ldr	r2, [sp, #56]	; 0x38
   13918:	ldrd	r0, [sp, #56]	; 0x38
   1391c:	ldr	r3, [sp, #80]	; 0x50
   13920:	subs	r3, r3, r2
   13924:	ldr	r2, [sp, #60]	; 0x3c
   13928:	str	r3, [sp, #96]	; 0x60
   1392c:	ldr	r3, [sp, #84]	; 0x54
   13930:	sbc	r3, r3, r2
   13934:	ldr	r2, [sp, #192]	; 0xc0
   13938:	str	r3, [sp, #100]	; 0x64
   1393c:	ldr	r3, [sp, #200]	; 0xc8
   13940:	subs	r3, r2, r3
   13944:	ldr	r2, [sp, #196]	; 0xc4
   13948:	str	r3, [sp, #168]	; 0xa8
   1394c:	ldr	r3, [sp, #204]	; 0xcc
   13950:	sbc	r3, r2, r3
   13954:	str	r3, [sp, #172]	; 0xac
   13958:	ldrd	r2, [sp, #80]	; 0x50
   1395c:	cmp	r3, r1
   13960:	cmpeq	r2, r0
   13964:	ldrd	r2, [sp, #168]	; 0xa8
   13968:	movcc	r1, #1
   1396c:	movcs	r1, #0
   13970:	subs	r2, r2, r1
   13974:	sbc	r3, r3, #0
   13978:	cmp	r2, #0
   1397c:	sbcs	r1, r3, #0
   13980:	bge	139ac <__assert_fail@plt+0x21cc>
   13984:	ldrd	r4, [sp, #96]	; 0x60
   13988:	adds	r0, r8, r4
   1398c:	adcs	r1, r9, r5
   13990:	movcs	ip, #1
   13994:	movcc	ip, #0
   13998:	strd	r0, [sp, #96]	; 0x60
   1399c:	adds	r0, r2, ip
   139a0:	adc	r1, r3, #0
   139a4:	adds	r2, r6, r0
   139a8:	adc	r3, r7, r1
   139ac:	ldr	r1, [sp, #96]	; 0x60
   139b0:	orr	r1, r2, r1
   139b4:	str	r1, [sp, #176]	; 0xb0
   139b8:	ldr	r1, [sp, #100]	; 0x64
   139bc:	orr	r1, r3, r1
   139c0:	str	r1, [sp, #180]	; 0xb4
   139c4:	ldrd	r0, [sp, #176]	; 0xb0
   139c8:	orrs	r1, r0, r1
   139cc:	moveq	r4, r8
   139d0:	moveq	r5, r9
   139d4:	strdeq	r6, [sp, #208]	; 0xd0
   139d8:	beq	139fc <__assert_fail@plt+0x221c>
   139dc:	ldrd	r0, [sp, #96]	; 0x60
   139e0:	strd	r0, [sp]
   139e4:	add	r0, sp, #208	; 0xd0
   139e8:	strd	r6, [sp, #8]
   139ec:	strd	r8, [sp, #16]
   139f0:	bl	12dac <__assert_fail@plt+0x15cc>
   139f4:	mov	r4, r0
   139f8:	mov	r5, r1
   139fc:	ldrd	sl, [sp, #208]	; 0xd0
   13a00:	orrs	r3, sl, fp
   13a04:	bne	13d50 <__assert_fail@plt+0x2570>
   13a08:	cmp	r5, #0
   13a0c:	cmpeq	r4, #1
   13a10:	beq	13848 <__assert_fail@plt+0x2068>
   13a14:	ldr	r2, [pc, #1328]	; 13f4c <__assert_fail@plt+0x276c>
   13a18:	ubfx	r3, r4, #1, #7
   13a1c:	add	r3, r2, r3
   13a20:	movw	r2, #709	; 0x2c5
   13a24:	ldrb	r0, [r3, r2]
   13a28:	mov	r2, #0
   13a2c:	adds	r3, r0, r0
   13a30:	umull	r0, r1, r0, r0
   13a34:	adc	r2, r2, r2
   13a38:	mul	ip, r0, r5
   13a3c:	mla	ip, r4, r1, ip
   13a40:	umull	r0, r1, r0, r4
   13a44:	strd	r0, [sp, #120]	; 0x78
   13a48:	ldr	r1, [sp, #124]	; 0x7c
   13a4c:	add	r1, ip, r1
   13a50:	str	r1, [sp, #124]	; 0x7c
   13a54:	ldr	r1, [sp, #120]	; 0x78
   13a58:	subs	r0, r3, r1
   13a5c:	ldr	r3, [sp, #124]	; 0x7c
   13a60:	sbc	r3, r2, r3
   13a64:	adds	r2, r0, r0
   13a68:	adc	ip, r3, r3
   13a6c:	mul	r3, r0, r3
   13a70:	umull	r0, r1, r0, r0
   13a74:	add	r1, r1, r3, lsl #1
   13a78:	mul	r3, r0, r5
   13a7c:	mla	r3, r4, r1, r3
   13a80:	umull	r0, r1, r0, r4
   13a84:	subs	r2, r2, r0
   13a88:	add	r1, r3, r1
   13a8c:	sbc	r1, ip, r1
   13a90:	adds	ip, r2, r2
   13a94:	adc	lr, r1, r1
   13a98:	mul	r1, r2, r1
   13a9c:	umull	r2, r3, r2, r2
   13aa0:	add	r3, r3, r1, lsl #1
   13aa4:	mul	r1, r2, r5
   13aa8:	mla	r1, r4, r3, r1
   13aac:	umull	r2, r3, r2, r4
   13ab0:	subs	ip, ip, r2
   13ab4:	add	r3, r1, r3
   13ab8:	sbc	lr, lr, r3
   13abc:	cmp	r7, r5
   13ac0:	cmpeq	r6, r4
   13ac4:	mul	r2, r8, lr
   13ac8:	mla	r2, ip, r9, r2
   13acc:	umull	r8, r9, r8, ip
   13ad0:	add	r2, r2, r9
   13ad4:	mov	r9, r2
   13ad8:	bcc	13b4c <__assert_fail@plt+0x236c>
   13adc:	umull	r0, r1, r2, r4
   13ae0:	umull	sl, fp, r8, r4
   13ae4:	umull	r2, r3, r2, r5
   13ae8:	strd	r0, [sp, #120]	; 0x78
   13aec:	umlal	r0, r1, r8, r5
   13af0:	mov	sl, fp
   13af4:	mov	fp, #0
   13af8:	adds	sl, sl, r0
   13afc:	adc	r1, fp, r1
   13b00:	str	sl, [sp, #136]	; 0x88
   13b04:	str	r1, [sp, #140]	; 0x8c
   13b08:	ldrd	r0, [sp, #120]	; 0x78
   13b0c:	ldrd	sl, [sp, #136]	; 0x88
   13b10:	cmp	r1, fp
   13b14:	cmpeq	r0, sl
   13b18:	bls	13b24 <__assert_fail@plt+0x2344>
   13b1c:	adds	r2, r2, #0
   13b20:	adc	r3, r3, #1
   13b24:	ldr	sl, [sp, #140]	; 0x8c
   13b28:	mov	r1, #0
   13b2c:	subs	sl, r6, sl
   13b30:	sbc	r1, r7, r1
   13b34:	subs	sl, sl, r2
   13b38:	sbc	r1, r1, r3
   13b3c:	mul	lr, sl, lr
   13b40:	umull	sl, fp, sl, ip
   13b44:	mla	r1, ip, r1, lr
   13b48:	add	fp, r1, fp
   13b4c:	mov	r0, r4
   13b50:	mov	r1, r5
   13b54:	bl	14618 <__assert_fail@plt+0x2e38>
   13b58:	cmp	r0, #0
   13b5c:	bne	13d34 <__assert_fail@plt+0x2554>
   13b60:	ldr	r2, [sp, #264]	; 0x108
   13b64:	mov	r0, r4
   13b68:	mov	r1, r5
   13b6c:	ldr	r3, [sp, #268]	; 0x10c
   13b70:	add	r2, r2, #1
   13b74:	bl	14be0 <__assert_fail@plt+0x3400>
   13b78:	orrs	r3, sl, fp
   13b7c:	beq	13e84 <__assert_fail@plt+0x26a4>
   13b80:	mov	r2, r8
   13b84:	mov	r3, r9
   13b88:	mov	r0, sl
   13b8c:	mov	r1, fp
   13b90:	bl	151d0 <__assert_fail@plt+0x39f0>
   13b94:	cmp	r0, #0
   13b98:	beq	13ee0 <__assert_fail@plt+0x2700>
   13b9c:	mov	r2, sl
   13ba0:	mov	r3, fp
   13ba4:	strd	r8, [sp]
   13ba8:	ldr	r0, [sp, #268]	; 0x10c
   13bac:	bl	12d48 <__assert_fail@plt+0x1568>
   13bb0:	b	13d9c <__assert_fail@plt+0x25bc>
   13bb4:	ldrd	r2, [sp, #72]	; 0x48
   13bb8:	add	r0, sp, #208	; 0xd0
   13bbc:	strd	r2, [sp]
   13bc0:	strd	r6, [sp, #8]
   13bc4:	strd	r8, [sp, #16]
   13bc8:	ldrd	r2, [sp, #64]	; 0x40
   13bcc:	bl	12dac <__assert_fail@plt+0x15cc>
   13bd0:	ldrd	r2, [sp, #208]	; 0xd0
   13bd4:	orrs	r3, r2, r3
   13bd8:	movne	r3, #1
   13bdc:	moveq	r3, #0
   13be0:	cmp	r1, #0
   13be4:	cmpeq	r0, #1
   13be8:	movne	r3, #1
   13bec:	cmp	r3, #0
   13bf0:	bne	13848 <__assert_fail@plt+0x2068>
   13bf4:	ldrd	r2, [sp, #184]	; 0xb8
   13bf8:	strd	r2, [sp, #200]	; 0xc8
   13bfc:	ldrd	r2, [sp, #48]	; 0x30
   13c00:	strd	r2, [sp, #56]	; 0x38
   13c04:	ldr	r3, [sp, #92]	; 0x5c
   13c08:	subs	r3, r3, #1
   13c0c:	str	r3, [sp, #92]	; 0x5c
   13c10:	bne	13610 <__assert_fail@plt+0x1e30>
   13c14:	ldrd	r2, [sp, #184]	; 0xb8
   13c18:	strd	r2, [sp, #192]	; 0xc0
   13c1c:	ldr	r3, [sp, #128]	; 0x80
   13c20:	lsl	r5, r3, #1
   13c24:	ldrd	r2, [sp, #48]	; 0x30
   13c28:	strd	r2, [sp, #56]	; 0x38
   13c2c:	ldr	r0, [sp, #92]	; 0x5c
   13c30:	ldr	r1, [sp, #128]	; 0x80
   13c34:	ldrd	r2, [sp, #184]	; 0xb8
   13c38:	cmp	r1, r0
   13c3c:	bne	13c60 <__assert_fail@plt+0x2480>
   13c40:	str	r1, [sp, #92]	; 0x5c
   13c44:	strd	r2, [sp, #200]	; 0xc8
   13c48:	ldrd	r2, [sp, #48]	; 0x30
   13c4c:	strd	r2, [sp, #80]	; 0x50
   13c50:	ldrd	r2, [sp, #56]	; 0x38
   13c54:	str	r5, [sp, #128]	; 0x80
   13c58:	strd	r2, [sp, #48]	; 0x30
   13c5c:	b	13610 <__assert_fail@plt+0x1e30>
   13c60:	ldr	r1, [sp, #120]	; 0x78
   13c64:	strd	r2, [sp, #8]
   13c68:	strd	r6, [sp, #24]
   13c6c:	strd	r8, [sp, #32]
   13c70:	str	r1, [sp, #40]	; 0x28
   13c74:	ldr	r1, [sp, #132]	; 0x84
   13c78:	str	r1, [sp, #44]	; 0x2c
   13c7c:	ldrd	r0, [sp, #56]	; 0x38
   13c80:	strd	r0, [sp]
   13c84:	strd	r0, [sp, #16]
   13c88:	add	r0, sp, #216	; 0xd8
   13c8c:	bl	11f9c <__assert_fail@plt+0x7bc>
   13c90:	ldrd	sl, [sp, #144]	; 0x90
   13c94:	adds	r2, sl, r0
   13c98:	adcs	r3, fp, r1
   13c9c:	mov	r0, r2
   13ca0:	mov	r1, r3
   13ca4:	ldrd	r2, [sp, #216]	; 0xd8
   13ca8:	movcs	ip, #1
   13cac:	movcc	ip, #0
   13cb0:	strd	r0, [sp, #56]	; 0x38
   13cb4:	adds	sl, r2, ip
   13cb8:	adc	fp, r3, #0
   13cbc:	cmp	fp, r7
   13cc0:	cmpeq	sl, r6
   13cc4:	bhi	13cec <__assert_fail@plt+0x250c>
   13cc8:	moveq	ip, #1
   13ccc:	movne	ip, #0
   13cd0:	cmp	r9, r1
   13cd4:	cmpeq	r8, r0
   13cd8:	movhi	ip, #0
   13cdc:	andls	ip, ip, #1
   13ce0:	cmp	ip, #0
   13ce4:	strdeq	sl, [sp, #184]	; 0xb8
   13ce8:	beq	13d24 <__assert_fail@plt+0x2544>
   13cec:	cmp	r9, r1
   13cf0:	cmpeq	r8, r0
   13cf4:	movhi	ip, #1
   13cf8:	movls	ip, #0
   13cfc:	subs	r3, r0, r8
   13d00:	str	r3, [sp, #56]	; 0x38
   13d04:	sbc	r3, r1, r9
   13d08:	subs	ip, sl, ip
   13d0c:	sbc	lr, fp, r4
   13d10:	subs	ip, ip, r6
   13d14:	sbc	lr, lr, r7
   13d18:	str	r3, [sp, #60]	; 0x3c
   13d1c:	str	ip, [sp, #184]	; 0xb8
   13d20:	str	lr, [sp, #188]	; 0xbc
   13d24:	ldr	r3, [sp, #92]	; 0x5c
   13d28:	add	r3, r3, #1
   13d2c:	str	r3, [sp, #92]	; 0x5c
   13d30:	b	13c2c <__assert_fail@plt+0x244c>
   13d34:	mov	r3, #1
   13d38:	mov	r2, r4
   13d3c:	ldr	r0, [sp, #268]	; 0x10c
   13d40:	str	r3, [sp]
   13d44:	mov	r3, r5
   13d48:	bl	11bb0 <__assert_fail@plt+0x3d0>
   13d4c:	b	13b78 <__assert_fail@plt+0x2398>
   13d50:	cmp	r9, r5
   13d54:	cmpeq	r8, r4
   13d58:	movne	r3, #0
   13d5c:	moveq	r3, #1
   13d60:	cmp	fp, r7
   13d64:	cmpeq	sl, r6
   13d68:	movne	r3, #0
   13d6c:	cmp	r3, #0
   13d70:	beq	13da4 <__assert_fail@plt+0x25c4>
   13d74:	ldr	r3, [sp, #268]	; 0x10c
   13d78:	mov	r2, r8
   13d7c:	mov	r0, r6
   13d80:	mov	r1, r7
   13d84:	str	r3, [sp, #4]
   13d88:	ldr	r3, [sp, #264]	; 0x108
   13d8c:	add	r3, r3, #1
   13d90:	str	r3, [sp]
   13d94:	mov	r3, r9
   13d98:	bl	13358 <__assert_fail@plt+0x1b78>
   13d9c:	add	sp, sp, #228	; 0xe4
   13da0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13da4:	ldr	r3, [pc, #416]	; 13f4c <__assert_fail@plt+0x276c>
   13da8:	ubfx	r2, r4, #1, #7
   13dac:	add	r3, r3, r2
   13db0:	mov	r2, #0
   13db4:	ldrb	r0, [r3, #709]	; 0x2c5
   13db8:	adds	r3, r0, r0
   13dbc:	umull	r0, r1, r0, r0
   13dc0:	adc	r2, r2, r2
   13dc4:	mul	ip, r0, r5
   13dc8:	mla	ip, r4, r1, ip
   13dcc:	umull	r0, r1, r0, r4
   13dd0:	subs	r3, r3, r0
   13dd4:	add	r1, ip, r1
   13dd8:	sbc	r2, r2, r1
   13ddc:	adds	r0, r3, r3
   13de0:	adc	r1, r2, r2
   13de4:	mul	ip, r3, r2
   13de8:	umull	r2, r3, r3, r3
   13dec:	add	r3, r3, ip, lsl #1
   13df0:	mul	ip, r2, r5
   13df4:	mla	ip, r4, r3, ip
   13df8:	umull	r2, r3, r2, r4
   13dfc:	subs	r0, r0, r2
   13e00:	add	r3, ip, r3
   13e04:	sbc	r1, r1, r3
   13e08:	adds	r2, r0, r0
   13e0c:	adc	r3, r1, r1
   13e10:	mul	ip, r0, r1
   13e14:	umull	r0, r1, r0, r0
   13e18:	add	r1, r1, ip, lsl #1
   13e1c:	mul	ip, r0, r5
   13e20:	mla	ip, r4, r1, ip
   13e24:	umull	r0, r1, r0, r4
   13e28:	subs	r2, r2, r0
   13e2c:	add	r1, ip, r1
   13e30:	sbc	r3, r3, r1
   13e34:	mov	r0, sl
   13e38:	mov	r1, fp
   13e3c:	mul	r3, r8, r3
   13e40:	mla	r3, r2, r9, r3
   13e44:	umull	r8, r9, r8, r2
   13e48:	mov	r2, r4
   13e4c:	add	r9, r3, r9
   13e50:	mov	r3, r5
   13e54:	bl	151d0 <__assert_fail@plt+0x39f0>
   13e58:	cmp	r0, #0
   13e5c:	bne	13eb4 <__assert_fail@plt+0x26d4>
   13e60:	mov	r2, r4
   13e64:	ldrd	r0, [sp, #208]	; 0xd0
   13e68:	ldr	r3, [sp, #268]	; 0x10c
   13e6c:	str	r3, [sp, #4]
   13e70:	ldr	r3, [sp, #264]	; 0x108
   13e74:	add	r3, r3, #1
   13e78:	str	r3, [sp]
   13e7c:	mov	r3, r5
   13e80:	bl	13358 <__assert_fail@plt+0x1b78>
   13e84:	mov	r0, r8
   13e88:	mov	r1, r9
   13e8c:	bl	14618 <__assert_fail@plt+0x2e38>
   13e90:	cmp	r0, #0
   13e94:	beq	13ec8 <__assert_fail@plt+0x26e8>
   13e98:	mov	r3, #1
   13e9c:	mov	r2, r8
   13ea0:	ldr	r0, [sp, #268]	; 0x10c
   13ea4:	str	r3, [sp]
   13ea8:	mov	r3, r9
   13eac:	bl	11bb0 <__assert_fail@plt+0x3d0>
   13eb0:	b	13d9c <__assert_fail@plt+0x25bc>
   13eb4:	strd	r4, [sp]
   13eb8:	ldrd	r2, [sp, #208]	; 0xd0
   13ebc:	ldr	r0, [sp, #268]	; 0x10c
   13ec0:	bl	12d48 <__assert_fail@plt+0x1568>
   13ec4:	b	13e84 <__assert_fail@plt+0x26a4>
   13ec8:	mov	r0, r8
   13ecc:	mov	r1, r9
   13ed0:	ldr	r2, [sp, #264]	; 0x108
   13ed4:	ldr	r3, [sp, #268]	; 0x10c
   13ed8:	bl	14be0 <__assert_fail@plt+0x3400>
   13edc:	b	13d9c <__assert_fail@plt+0x25bc>
   13ee0:	ldrd	r2, [sp, #48]	; 0x30
   13ee4:	add	r0, sp, #184	; 0xb8
   13ee8:	mov	r6, sl
   13eec:	mov	r7, fp
   13ef0:	strd	r2, [sp]
   13ef4:	strd	sl, [sp, #8]
   13ef8:	strd	r8, [sp, #16]
   13efc:	ldrd	r2, [sp, #184]	; 0xb8
   13f00:	bl	12f6c <__assert_fail@plt+0x178c>
   13f04:	ldrd	r2, [sp, #80]	; 0x50
   13f08:	strd	r2, [sp]
   13f0c:	strd	sl, [sp, #8]
   13f10:	strd	r8, [sp, #16]
   13f14:	strd	r0, [sp, #48]	; 0x30
   13f18:	add	r0, sp, #192	; 0xc0
   13f1c:	ldrd	r2, [sp, #192]	; 0xc0
   13f20:	bl	12f6c <__assert_fail@plt+0x178c>
   13f24:	ldrd	r2, [sp, #56]	; 0x38
   13f28:	strd	r2, [sp]
   13f2c:	strd	sl, [sp, #8]
   13f30:	strd	r8, [sp, #16]
   13f34:	strd	r0, [sp, #80]	; 0x50
   13f38:	add	r0, sp, #200	; 0xc8
   13f3c:	ldrd	r2, [sp, #200]	; 0xc8
   13f40:	bl	12f6c <__assert_fail@plt+0x178c>
   13f44:	strd	r0, [sp, #56]	; 0x38
   13f48:	b	13550 <__assert_fail@plt+0x1d70>
   13f4c:	ldrdeq	sl, [r1], -r8
   13f50:	andeq	fp, r1, sp, lsl r2
   13f54:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   13f58:	andeq	lr, r1, lr, lsr #32
   13f5c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13f60:	sub	sp, sp, #68	; 0x44
   13f64:	mov	r7, r3
   13f68:	mov	r6, r2
   13f6c:	ldr	r3, [sp, #104]	; 0x68
   13f70:	strd	r0, [sp, #8]
   13f74:	str	r3, [sp, #20]
   13f78:	mov	r3, #0
   13f7c:	ldr	r2, [sp, #20]
   13f80:	ldr	r1, [sp, #20]
   13f84:	strb	r3, [r2, #250]	; 0xfa
   13f88:	mov	r2, #0
   13f8c:	mov	r3, #0
   13f90:	strd	r2, [r1, #8]
   13f94:	ldr	r3, [sp, #8]
   13f98:	ldr	r2, [sp, #12]
   13f9c:	orrs	r3, r3, r2
   13fa0:	moveq	r3, #1
   13fa4:	movne	r3, #0
   13fa8:	cmp	r7, #0
   13fac:	cmpeq	r6, #1
   13fb0:	movhi	r1, #0
   13fb4:	andls	r1, r3, #1
   13fb8:	cmp	r1, #0
   13fbc:	bne	145bc <__assert_fail@plt+0x2ddc>
   13fc0:	and	r2, r6, #1
   13fc4:	mov	r3, r1
   13fc8:	orrs	r3, r2, r3
   13fcc:	bne	14058 <__assert_fail@plt+0x2878>
   13fd0:	orrs	r3, r6, r7
   13fd4:	movne	r2, r6
   13fd8:	movne	r0, r7
   13fdc:	movne	r3, r1
   13fe0:	bne	141c0 <__assert_fail@plt+0x29e0>
   13fe4:	mov	r3, r1
   13fe8:	ldr	r2, [sp, #8]
   13fec:	ldr	r0, [sp, #12]
   13ff0:	b	14004 <__assert_fail@plt+0x2824>
   13ff4:	lsr	r2, r2, #1
   13ff8:	add	r3, r3, #1
   13ffc:	orr	r2, r2, r0, lsl #31
   14000:	lsr	r0, r0, #1
   14004:	and	r8, r2, #1
   14008:	mov	r9, r1
   1400c:	orrs	ip, r8, r9
   14010:	beq	13ff4 <__assert_fail@plt+0x2814>
   14014:	ldr	r0, [sp, #8]
   14018:	rsb	r1, r3, #32
   1401c:	sub	r2, r3, #32
   14020:	lsr	r4, r0, r3
   14024:	ldr	r0, [sp, #12]
   14028:	orr	r4, r4, r0, lsl r1
   1402c:	lsr	r5, r0, r3
   14030:	add	r3, r3, #64	; 0x40
   14034:	orr	r4, r4, r0, lsr r2
   14038:	mov	r2, #2
   1403c:	str	r3, [sp]
   14040:	mov	r3, #0
   14044:	ldr	r0, [sp, #20]
   14048:	bl	11bb0 <__assert_fail@plt+0x3d0>
   1404c:	strd	r6, [sp, #8]
   14050:	mov	r6, r4
   14054:	mov	r7, r5
   14058:	ldr	r4, [pc, #1452]	; 1460c <__assert_fail@plt+0x2e2c>
   1405c:	mov	r3, #0
   14060:	mov	r5, #3
   14064:	str	r3, [sp, #16]
   14068:	str	r3, [sp, #56]	; 0x38
   1406c:	ldr	r3, [sp, #8]
   14070:	ldr	r2, [sp, #12]
   14074:	orrs	r3, r3, r2
   14078:	ldr	r2, [sp, #16]
   1407c:	str	r3, [sp, #24]
   14080:	movne	r3, #1
   14084:	moveq	r3, #0
   14088:	cmp	r2, #668	; 0x29c
   1408c:	movcs	r3, #0
   14090:	andcc	r3, r3, #1
   14094:	cmp	r3, #0
   14098:	beq	14268 <__assert_fail@plt+0x2a88>
   1409c:	ldr	r3, [sp, #56]	; 0x38
   140a0:	str	r3, [sp, #60]	; 0x3c
   140a4:	ldrd	r8, [r4]
   140a8:	mov	r1, #0
   140ac:	mov	lr, #0
   140b0:	umull	sl, fp, r8, r6
   140b4:	mul	r3, r8, r7
   140b8:	strd	sl, [sp, #24]
   140bc:	mla	r3, r9, r6, r3
   140c0:	ldr	r0, [sp, #24]
   140c4:	ldr	r2, [sp, #28]
   140c8:	add	r3, r3, r2
   140cc:	ldr	r2, [sp, #60]	; 0x3c
   140d0:	umull	sl, fp, r3, r5
   140d4:	str	r3, [sp, #28]
   140d8:	strd	sl, [sp, #40]	; 0x28
   140dc:	umull	sl, fp, r3, r2
   140e0:	mla	fp, r3, r1, fp
   140e4:	mov	r3, r2
   140e8:	ldr	r2, [sp, #24]
   140ec:	umull	r2, r3, r3, r2
   140f0:	mla	r3, r1, r0, r3
   140f4:	ldr	r1, [sp, #40]	; 0x28
   140f8:	adds	r0, r2, r1
   140fc:	ldr	r1, [sp, #44]	; 0x2c
   14100:	adc	ip, r3, r1
   14104:	ldr	r3, [sp, #24]
   14108:	umull	r2, r3, r3, r5
   1410c:	adds	r3, r3, r0
   14110:	str	r3, [sp, #48]	; 0x30
   14114:	adc	r3, lr, ip
   14118:	str	r3, [sp, #52]	; 0x34
   1411c:	ldrd	r2, [sp, #40]	; 0x28
   14120:	ldrd	r0, [sp, #48]	; 0x30
   14124:	cmp	r3, r1
   14128:	cmpeq	r2, r0
   1412c:	bls	14138 <__assert_fail@plt+0x2958>
   14130:	adds	sl, sl, lr
   14134:	adc	fp, fp, #1
   14138:	mov	r2, #0
   1413c:	ldrd	r0, [sp, #8]
   14140:	ldr	r3, [sp, #52]	; 0x34
   14144:	adds	r3, r3, sl
   14148:	str	r3, [sp, #32]
   1414c:	adc	r3, r2, fp
   14150:	str	r3, [sp, #36]	; 0x24
   14154:	ldrd	r2, [sp, #32]
   14158:	cmp	r3, r1
   1415c:	cmpeq	r2, r0
   14160:	bhi	14234 <__assert_fail@plt+0x2a54>
   14164:	ldr	r3, [sp, #8]
   14168:	ldr	r2, [sp, #32]
   1416c:	ldr	r1, [sp, #36]	; 0x24
   14170:	subs	r3, r3, r2
   14174:	ldr	r2, [sp, #12]
   14178:	sbc	r2, r2, r1
   1417c:	mul	r1, r3, r9
   14180:	mla	r1, r8, r2, r1
   14184:	umull	r8, r9, r3, r8
   14188:	ldrd	r2, [r4, #8]
   1418c:	add	r9, r1, r9
   14190:	cmp	r9, r3
   14194:	cmpeq	r8, r2
   14198:	bhi	14234 <__assert_fail@plt+0x2a54>
   1419c:	mov	r3, #1
   141a0:	mov	r2, r5
   141a4:	ldr	r0, [sp, #20]
   141a8:	str	r3, [sp]
   141ac:	ldr	r3, [sp, #56]	; 0x38
   141b0:	bl	11bb0 <__assert_fail@plt+0x3d0>
   141b4:	strd	r8, [sp, #8]
   141b8:	ldrd	r6, [sp, #24]
   141bc:	b	140a4 <__assert_fail@plt+0x28c4>
   141c0:	lsr	r2, r2, #1
   141c4:	mov	r5, r1
   141c8:	add	r3, r3, #1
   141cc:	orr	r2, r2, r0, lsl #31
   141d0:	lsr	r0, r0, #1
   141d4:	and	r4, r2, #1
   141d8:	orrs	ip, r4, r5
   141dc:	beq	141c0 <__assert_fail@plt+0x29e0>
   141e0:	ldr	ip, [sp, #12]
   141e4:	rsb	r0, r3, #64	; 0x40
   141e8:	lsr	r4, r6, r3
   141ec:	sub	r1, r0, #32
   141f0:	rsb	r2, r0, #32
   141f4:	lsl	r5, ip, r0
   141f8:	ldr	ip, [sp, #8]
   141fc:	orr	r5, r5, ip, lsl r1
   14200:	rsb	r1, r3, #32
   14204:	orr	r4, r4, r7, lsl r1
   14208:	orr	r5, r5, ip, lsr r2
   1420c:	sub	r2, r3, #32
   14210:	orr	r4, r4, r7, lsr r2
   14214:	lsr	r6, ip, r3
   14218:	orr	r4, r4, ip, lsl r0
   1421c:	ldr	r0, [sp, #12]
   14220:	orr	r5, r5, r7, lsr r3
   14224:	orr	r6, r6, r0, lsl r1
   14228:	lsr	r7, r0, r3
   1422c:	orr	r6, r6, r0, lsr r2
   14230:	b	14038 <__assert_fail@plt+0x2858>
   14234:	ldr	r3, [sp, #16]
   14238:	add	r4, r4, #16
   1423c:	ldr	r1, [sp, #56]	; 0x38
   14240:	add	r3, r3, #1
   14244:	str	r3, [sp, #16]
   14248:	ldr	r3, [pc, #960]	; 14610 <__assert_fail@plt+0x2e30>
   1424c:	ldr	r2, [sp, #16]
   14250:	ldrb	r2, [r2, r3]
   14254:	mov	r3, #0
   14258:	adds	r5, r5, r2
   1425c:	adc	r3, r1, r3
   14260:	str	r3, [sp, #56]	; 0x38
   14264:	b	1406c <__assert_fail@plt+0x288c>
   14268:	ldr	r4, [pc, #924]	; 1460c <__assert_fail@plt+0x2e2c>
   1426c:	str	r3, [sp, #32]
   14270:	ldr	r2, [sp, #16]
   14274:	add	r4, r4, r2, lsl #4
   14278:	ldr	r3, [sp, #16]
   1427c:	cmp	r3, #668	; 0x29c
   14280:	bcs	14570 <__assert_fail@plt+0x2d90>
   14284:	add	sl, r3, #1
   14288:	b	142b0 <__assert_fail@plt+0x2ad0>
   1428c:	mov	r2, r5
   14290:	str	sl, [sp]
   14294:	mov	r6, r8
   14298:	ldr	r3, [sp, #32]
   1429c:	mov	r7, r9
   142a0:	ldr	r0, [sp, #20]
   142a4:	str	r3, [sp, #4]
   142a8:	ldr	r3, [sp, #56]	; 0x38
   142ac:	bl	11c5c <__assert_fail@plt+0x47c>
   142b0:	ldr	r8, [r4]
   142b4:	ldr	r3, [r4, #4]
   142b8:	mul	r3, r6, r3
   142bc:	mla	r3, r8, r7, r3
   142c0:	umull	r8, r9, r8, r6
   142c4:	add	r9, r3, r9
   142c8:	ldrd	r2, [r4, #8]
   142cc:	cmp	r9, r3
   142d0:	cmpeq	r8, r2
   142d4:	bls	1428c <__assert_fail@plt+0x2aac>
   142d8:	ldr	r3, [sp, #16]
   142dc:	mov	fp, #1
   142e0:	add	sl, r3, fp
   142e4:	ldr	r8, [r4, #16]
   142e8:	ldr	r3, [r4, #20]
   142ec:	mul	r3, r6, r3
   142f0:	mla	r3, r8, r7, r3
   142f4:	umull	r8, r9, r8, r6
   142f8:	add	r9, r3, r9
   142fc:	ldrd	r2, [r4, #24]
   14300:	cmp	r9, r3
   14304:	cmpeq	r8, r2
   14308:	bls	14464 <__assert_fail@plt+0x2c84>
   1430c:	ldr	r3, [sp, #16]
   14310:	mov	fp, #2
   14314:	add	sl, r3, #1
   14318:	ldr	r8, [r4, #32]
   1431c:	ldr	r3, [r4, #36]	; 0x24
   14320:	mul	r3, r6, r3
   14324:	mla	r3, r8, r7, r3
   14328:	umull	r8, r9, r8, r6
   1432c:	add	r9, r3, r9
   14330:	ldrd	r2, [r4, #40]	; 0x28
   14334:	cmp	r9, r3
   14338:	cmpeq	r8, r2
   1433c:	bls	14484 <__assert_fail@plt+0x2ca4>
   14340:	ldr	r3, [sp, #16]
   14344:	mov	fp, #3
   14348:	add	sl, r3, #1
   1434c:	ldr	r8, [r4, #48]	; 0x30
   14350:	ldr	r3, [r4, #52]	; 0x34
   14354:	mul	r3, r6, r3
   14358:	mla	r3, r8, r7, r3
   1435c:	umull	r8, r9, r8, r6
   14360:	add	r9, r3, r9
   14364:	ldrd	r2, [r4, #56]	; 0x38
   14368:	cmp	r9, r3
   1436c:	cmpeq	r8, r2
   14370:	bls	144a4 <__assert_fail@plt+0x2cc4>
   14374:	ldr	r3, [sp, #16]
   14378:	mov	fp, #4
   1437c:	add	sl, r3, #1
   14380:	ldr	r8, [r4, #64]	; 0x40
   14384:	ldr	r3, [r4, #68]	; 0x44
   14388:	mul	r3, r6, r3
   1438c:	mla	r3, r8, r7, r3
   14390:	umull	r8, r9, r8, r6
   14394:	add	r9, r3, r9
   14398:	ldrd	r2, [r4, #72]	; 0x48
   1439c:	cmp	r9, r3
   143a0:	cmpeq	r8, r2
   143a4:	bls	144c4 <__assert_fail@plt+0x2ce4>
   143a8:	ldr	r3, [sp, #16]
   143ac:	mov	fp, #5
   143b0:	add	sl, r3, #1
   143b4:	ldr	r8, [r4, #80]	; 0x50
   143b8:	ldr	r3, [r4, #84]	; 0x54
   143bc:	mul	r3, r6, r3
   143c0:	mla	r3, r8, r7, r3
   143c4:	umull	r8, r9, r8, r6
   143c8:	add	r9, r3, r9
   143cc:	ldrd	r2, [r4, #88]	; 0x58
   143d0:	cmp	r9, r3
   143d4:	cmpeq	r8, r2
   143d8:	bls	144e4 <__assert_fail@plt+0x2d04>
   143dc:	ldr	r3, [sp, #16]
   143e0:	mov	fp, #6
   143e4:	add	sl, r3, #1
   143e8:	ldr	r8, [r4, #96]	; 0x60
   143ec:	ldr	r3, [r4, #100]	; 0x64
   143f0:	mul	r3, r6, r3
   143f4:	mla	r3, r8, r7, r3
   143f8:	umull	r8, r9, r8, r6
   143fc:	add	r9, r3, r9
   14400:	ldrd	r2, [r4, #104]	; 0x68
   14404:	cmp	r9, r3
   14408:	cmpeq	r8, r2
   1440c:	bls	14504 <__assert_fail@plt+0x2d24>
   14410:	ldr	r3, [sp, #16]
   14414:	mov	fp, #7
   14418:	add	sl, r3, #1
   1441c:	ldr	r8, [r4, #112]	; 0x70
   14420:	ldr	r3, [r4, #116]	; 0x74
   14424:	mul	r3, r6, r3
   14428:	mla	r3, r8, r7, r3
   1442c:	umull	r8, r9, r8, r6
   14430:	add	r9, r3, r9
   14434:	ldrd	r2, [r4, #120]	; 0x78
   14438:	cmp	r9, r3
   1443c:	cmpeq	r8, r2
   14440:	bhi	14524 <__assert_fail@plt+0x2d44>
   14444:	mov	r2, r5
   14448:	strd	sl, [sp]
   1444c:	mov	r6, r8
   14450:	ldr	r0, [sp, #20]
   14454:	mov	r7, r9
   14458:	ldr	r3, [sp, #56]	; 0x38
   1445c:	bl	11c5c <__assert_fail@plt+0x47c>
   14460:	b	1441c <__assert_fail@plt+0x2c3c>
   14464:	mov	r2, r5
   14468:	strd	sl, [sp]
   1446c:	mov	r6, r8
   14470:	ldr	r0, [sp, #20]
   14474:	mov	r7, r9
   14478:	ldr	r3, [sp, #56]	; 0x38
   1447c:	bl	11c5c <__assert_fail@plt+0x47c>
   14480:	b	142e4 <__assert_fail@plt+0x2b04>
   14484:	mov	r2, r5
   14488:	strd	sl, [sp]
   1448c:	mov	r6, r8
   14490:	ldr	r0, [sp, #20]
   14494:	mov	r7, r9
   14498:	ldr	r3, [sp, #56]	; 0x38
   1449c:	bl	11c5c <__assert_fail@plt+0x47c>
   144a0:	b	14318 <__assert_fail@plt+0x2b38>
   144a4:	mov	r2, r5
   144a8:	strd	sl, [sp]
   144ac:	mov	r6, r8
   144b0:	ldr	r0, [sp, #20]
   144b4:	mov	r7, r9
   144b8:	ldr	r3, [sp, #56]	; 0x38
   144bc:	bl	11c5c <__assert_fail@plt+0x47c>
   144c0:	b	1434c <__assert_fail@plt+0x2b6c>
   144c4:	mov	r2, r5
   144c8:	strd	sl, [sp]
   144cc:	mov	r6, r8
   144d0:	ldr	r0, [sp, #20]
   144d4:	mov	r7, r9
   144d8:	ldr	r3, [sp, #56]	; 0x38
   144dc:	bl	11c5c <__assert_fail@plt+0x47c>
   144e0:	b	14380 <__assert_fail@plt+0x2ba0>
   144e4:	mov	r2, r5
   144e8:	strd	sl, [sp]
   144ec:	mov	r6, r8
   144f0:	ldr	r0, [sp, #20]
   144f4:	mov	r7, r9
   144f8:	ldr	r3, [sp, #56]	; 0x38
   144fc:	bl	11c5c <__assert_fail@plt+0x47c>
   14500:	b	143b4 <__assert_fail@plt+0x2bd4>
   14504:	mov	r2, r5
   14508:	strd	sl, [sp]
   1450c:	mov	r6, r8
   14510:	ldr	r0, [sp, #20]
   14514:	mov	r7, r9
   14518:	ldr	r3, [sp, #56]	; 0x38
   1451c:	bl	11c5c <__assert_fail@plt+0x47c>
   14520:	b	143e8 <__assert_fail@plt+0x2c08>
   14524:	ldr	r3, [pc, #232]	; 14614 <__assert_fail@plt+0x2e34>
   14528:	add	r4, r4, #128	; 0x80
   1452c:	ldr	r2, [sp, #16]
   14530:	ldr	r1, [sp, #56]	; 0x38
   14534:	ldrb	r2, [r2, r3]
   14538:	mov	r3, #0
   1453c:	adds	r5, r5, r2
   14540:	adc	r3, r1, r3
   14544:	mul	r1, r5, r3
   14548:	str	r3, [sp, #56]	; 0x38
   1454c:	umull	r2, r3, r5, r5
   14550:	add	r3, r3, r1, lsl #1
   14554:	cmp	r7, r3
   14558:	cmpeq	r6, r2
   1455c:	bcc	14570 <__assert_fail@plt+0x2d90>
   14560:	ldr	r3, [sp, #16]
   14564:	add	r3, r3, #8
   14568:	str	r3, [sp, #16]
   1456c:	b	14278 <__assert_fail@plt+0x2a98>
   14570:	ldr	r2, [sp, #24]
   14574:	cmp	r7, #0
   14578:	cmpeq	r6, #1
   1457c:	movls	r3, #1
   14580:	movhi	r3, #0
   14584:	cmp	r2, #0
   14588:	movne	r3, #0
   1458c:	cmp	r3, #0
   14590:	bne	145bc <__assert_fail@plt+0x2ddc>
   14594:	mov	r2, r6
   14598:	mov	r3, r7
   1459c:	ldrd	r0, [sp, #8]
   145a0:	bl	151d0 <__assert_fail@plt+0x39f0>
   145a4:	cmp	r0, #0
   145a8:	beq	145c4 <__assert_fail@plt+0x2de4>
   145ac:	strd	r6, [sp]
   145b0:	ldrd	r2, [sp, #8]
   145b4:	ldr	r0, [sp, #20]
   145b8:	bl	12d48 <__assert_fail@plt+0x1568>
   145bc:	add	sp, sp, #68	; 0x44
   145c0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   145c4:	ldrd	r2, [sp, #8]
   145c8:	orrs	r3, r2, r3
   145cc:	ldr	r3, [sp, #20]
   145d0:	bne	145ec <__assert_fail@plt+0x2e0c>
   145d4:	mov	r2, #1
   145d8:	mov	r0, r6
   145dc:	mov	r1, r7
   145e0:	add	sp, sp, #68	; 0x44
   145e4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   145e8:	b	14be0 <__assert_fail@plt+0x3400>
   145ec:	str	r3, [sp, #4]
   145f0:	mov	r3, #1
   145f4:	mov	r2, r6
   145f8:	ldrd	r0, [sp, #8]
   145fc:	str	r3, [sp]
   14600:	mov	r3, r7
   14604:	bl	13358 <__assert_fail@plt+0x1b78>
   14608:	b	145bc <__assert_fail@plt+0x2ddc>
   1460c:	andeq	fp, r1, r8, ror #10
   14610:	ldrdeq	sl, [r1], -r8
   14614:	andeq	fp, r1, r6, lsr #4
   14618:	cmp	r1, #0
   1461c:	cmpeq	r0, #1
   14620:	bls	14bd0 <__assert_fail@plt+0x33f0>
   14624:	add	r3, pc, #692	; 0x2b4
   14628:	ldrd	r2, [r3]
   1462c:	cmp	r1, r3
   14630:	cmpeq	r0, r2
   14634:	bls	14bd8 <__assert_fail@plt+0x33f8>
   14638:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1463c:	subs	r3, r0, #1
   14640:	sub	sp, sp, #388	; 0x184
   14644:	str	r3, [sp, #84]	; 0x54
   14648:	sbc	r3, r1, #0
   1464c:	str	r3, [sp, #88]	; 0x58
   14650:	ldr	r3, [sp, #84]	; 0x54
   14654:	str	r3, [sp, #44]	; 0x2c
   14658:	ldr	r3, [sp, #88]	; 0x58
   1465c:	str	r3, [sp, #56]	; 0x38
   14660:	mov	r3, #0
   14664:	str	r3, [sp, #72]	; 0x48
   14668:	ldr	r2, [sp, #44]	; 0x2c
   1466c:	mov	r7, r3
   14670:	and	r6, r2, #1
   14674:	orrs	r2, r6, r7
   14678:	beq	148b4 <__assert_fail@plt+0x30d4>
   1467c:	ldr	r3, [pc, #612]	; 148e8 <__assert_fail@plt+0x3108>
   14680:	ubfx	r2, r0, #1, #7
   14684:	mov	ip, #0
   14688:	mov	sl, #0
   1468c:	mov	fp, #0
   14690:	add	r3, r3, r2
   14694:	ldrb	r2, [r3, #709]	; 0x2c5
   14698:	adds	r4, r2, r2
   1469c:	umull	r2, r3, r2, r2
   146a0:	adc	ip, ip, ip
   146a4:	mul	lr, r2, r1
   146a8:	mla	lr, r0, r3, lr
   146ac:	umull	r2, r3, r2, r0
   146b0:	subs	r4, r4, r2
   146b4:	add	r3, lr, r3
   146b8:	sbc	ip, ip, r3
   146bc:	adds	r2, r4, r4
   146c0:	adc	r3, ip, ip
   146c4:	mul	ip, r4, ip
   146c8:	umull	r4, r5, r4, r4
   146cc:	add	r5, r5, ip, lsl #1
   146d0:	mul	ip, r4, r1
   146d4:	mla	ip, r0, r5, ip
   146d8:	umull	r4, r5, r4, r0
   146dc:	subs	r2, r2, r4
   146e0:	add	r5, ip, r5
   146e4:	sbc	r3, r3, r5
   146e8:	adds	lr, r2, r2
   146ec:	adc	ip, r3, r3
   146f0:	mov	r5, fp
   146f4:	mul	r4, r2, r3
   146f8:	umull	r2, r3, r2, r2
   146fc:	add	r3, r3, r4, lsl #1
   14700:	mul	r4, r2, r1
   14704:	mla	r4, r0, r3, r4
   14708:	umull	r2, r3, r2, r0
   1470c:	subs	lr, lr, r2
   14710:	add	r3, r4, r3
   14714:	sbc	r3, ip, r3
   14718:	mov	r2, r0
   1471c:	mov	ip, #64	; 0x40
   14720:	mov	r4, sl
   14724:	str	r3, [sp, #104]	; 0x68
   14728:	mov	r3, r1
   1472c:	str	ip, [sp, #76]	; 0x4c
   14730:	str	lr, [sp, #92]	; 0x5c
   14734:	lsr	lr, r4, #1
   14738:	lsr	ip, r5, #1
   1473c:	orr	r4, lr, r5, lsl #31
   14740:	orr	r5, ip, r2, lsl #31
   14744:	lsr	ip, r2, #1
   14748:	lsr	lr, r3, #1
   1474c:	orr	ip, ip, r3, lsl #31
   14750:	cmp	lr, r7
   14754:	mov	r3, lr
   14758:	cmpeq	ip, r6
   1475c:	mov	r2, ip
   14760:	bcc	14784 <__assert_fail@plt+0x2fa4>
   14764:	moveq	ip, #1
   14768:	movne	ip, #0
   1476c:	cmp	r5, fp
   14770:	cmpeq	r4, sl
   14774:	movhi	ip, #0
   14778:	andls	ip, ip, #1
   1477c:	cmp	ip, #0
   14780:	beq	147c4 <__assert_fail@plt+0x2fe4>
   14784:	cmp	r5, fp
   14788:	cmpeq	r4, sl
   1478c:	movhi	ip, #1
   14790:	movls	ip, #0
   14794:	subs	sl, sl, r4
   14798:	mov	lr, ip
   1479c:	sbc	fp, fp, r5
   147a0:	subs	ip, r6, r2
   147a4:	str	ip, [sp, #60]	; 0x3c
   147a8:	sbc	ip, r7, r3
   147ac:	str	ip, [sp, #80]	; 0x50
   147b0:	ldr	ip, [sp, #60]	; 0x3c
   147b4:	subs	r6, ip, lr
   147b8:	ldr	ip, [sp, #80]	; 0x50
   147bc:	mov	lr, #0
   147c0:	sbc	r7, ip, lr
   147c4:	ldr	ip, [sp, #76]	; 0x4c
   147c8:	subs	ip, ip, #1
   147cc:	str	ip, [sp, #76]	; 0x4c
   147d0:	bne	14734 <__assert_fail@plt+0x2f54>
   147d4:	subs	r3, r0, sl
   147d8:	mov	r4, r0
   147dc:	strd	sl, [sp, #24]
   147e0:	mov	r5, r1
   147e4:	str	r3, [sp, #48]	; 0x30
   147e8:	sbc	r3, r1, fp
   147ec:	str	r3, [sp, #52]	; 0x34
   147f0:	ldrd	r2, [sp, #48]	; 0x30
   147f4:	cmp	r3, fp
   147f8:	cmpeq	r2, sl
   147fc:	movhi	r0, #1
   14800:	movls	r0, #0
   14804:	rsbs	r0, r0, #0
   14808:	sbc	r1, r1, r1
   1480c:	adds	r3, sl, sl
   14810:	and	r2, r0, r4
   14814:	and	ip, r1, r5
   14818:	adc	r1, fp, fp
   1481c:	subs	r3, r3, r4
   14820:	sbc	r1, r1, r5
   14824:	adds	r8, r2, r3
   14828:	ldr	r3, [sp, #72]	; 0x48
   1482c:	adc	r9, ip, r1
   14830:	mov	r0, r4
   14834:	mov	r1, r5
   14838:	ldr	r2, [sp, #92]	; 0x5c
   1483c:	strd	r8, [sp]
   14840:	str	r3, [sp, #16]
   14844:	ldr	r3, [sp, #44]	; 0x2c
   14848:	str	r3, [sp, #8]
   1484c:	ldr	r3, [sp, #56]	; 0x38
   14850:	str	r3, [sp, #12]
   14854:	ldr	r3, [sp, #104]	; 0x68
   14858:	bl	11ea4 <__assert_fail@plt+0x6c4>
   1485c:	subs	r3, r0, #0
   14860:	str	r3, [sp, #112]	; 0x70
   14864:	beq	14bc8 <__assert_fail@plt+0x33e8>
   14868:	add	r6, sp, #128	; 0x80
   1486c:	mov	r0, #0
   14870:	ldrd	r2, [sp, #84]	; 0x54
   14874:	mov	r1, #0
   14878:	str	r6, [sp]
   1487c:	bl	13f5c <__assert_fail@plt+0x277c>
   14880:	ldrb	r3, [sp, #378]	; 0x17a
   14884:	str	fp, [sp, #108]	; 0x6c
   14888:	str	r3, [sp, #116]	; 0x74
   1488c:	ldr	r3, [pc, #84]	; 148e8 <__assert_fail@plt+0x3108>
   14890:	str	r6, [sp, #120]	; 0x78
   14894:	str	r3, [sp, #80]	; 0x50
   14898:	mov	r3, #2
   1489c:	str	r3, [sp, #48]	; 0x30
   148a0:	mov	r3, #0
   148a4:	str	r3, [sp, #60]	; 0x3c
   148a8:	mov	r6, #1
   148ac:	ldr	r0, [sp, #112]	; 0x70
   148b0:	b	14954 <__assert_fail@plt+0x3174>
   148b4:	ldr	r2, [sp, #44]	; 0x2c
   148b8:	ldr	ip, [sp, #56]	; 0x38
   148bc:	lsr	r2, r2, #1
   148c0:	orr	r2, r2, ip, lsl #31
   148c4:	str	r2, [sp, #44]	; 0x2c
   148c8:	lsr	r2, ip, #1
   148cc:	str	r2, [sp, #56]	; 0x38
   148d0:	ldr	r2, [sp, #72]	; 0x48
   148d4:	add	r2, r2, #1
   148d8:	str	r2, [sp, #72]	; 0x48
   148dc:	b	14668 <__assert_fail@plt+0x2e88>
   148e0:	cmneq	sp, r8, ror sp
   148e4:	andeq	r0, r0, r0
   148e8:	ldrdeq	sl, [r1], -r8
   148ec:	andeq	fp, r1, r4, ror r1
   148f0:	andeq	lr, r1, r0, asr #32
   148f4:	andeq	fp, r1, r9, asr #9
   148f8:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   148fc:	andeq	lr, r1, r5, lsr r0
   14900:	lsl	r3, r6, #3
   14904:	ldrd	r0, [sp, #84]	; 0x54
   14908:	ldr	r2, [sp, #120]	; 0x78
   1490c:	add	r2, r3, r2
   14910:	ldrd	r2, [r2]
   14914:	bl	1acd8 <__assert_fail@plt+0x94f8>
   14918:	ldr	r3, [sp, #92]	; 0x5c
   1491c:	mov	r2, r0
   14920:	mov	r0, r8
   14924:	strd	r4, [sp]
   14928:	str	r3, [sp, #8]
   1492c:	ldr	r3, [sp, #104]	; 0x68
   14930:	strd	sl, [sp, #16]
   14934:	str	r3, [sp, #12]
   14938:	mov	r3, r1
   1493c:	mov	r1, r9
   14940:	bl	11dd8 <__assert_fail@plt+0x5f8>
   14944:	cmp	r1, fp
   14948:	cmpeq	r0, sl
   1494c:	movne	r0, #1
   14950:	moveq	r0, #0
   14954:	ldr	r2, [sp, #116]	; 0x74
   14958:	sub	r3, r6, #1
   1495c:	cmp	r2, r3
   14960:	bls	14ad0 <__assert_fail@plt+0x32f0>
   14964:	cmp	r0, #0
   14968:	add	r6, r6, #1
   1496c:	bne	14900 <__assert_fail@plt+0x3120>
   14970:	mov	r3, #0
   14974:	ldr	lr, [sp, #76]	; 0x4c
   14978:	ldr	r1, [sp, #80]	; 0x50
   1497c:	ldrb	r2, [r1], #1
   14980:	str	r1, [sp, #80]	; 0x50
   14984:	ldr	r1, [sp, #48]	; 0x30
   14988:	adds	r1, r1, r2
   1498c:	str	r1, [sp, #48]	; 0x30
   14990:	ldr	r1, [sp, #60]	; 0x3c
   14994:	adc	r3, r1, r3
   14998:	str	r3, [sp, #60]	; 0x3c
   1499c:	ldr	r3, [sp, #48]	; 0x30
   149a0:	ldr	ip, [sp, #60]	; 0x3c
   149a4:	umull	r2, r3, sl, r3
   149a8:	strd	r2, [sp, #96]	; 0x60
   149ac:	ldr	r2, [sp, #48]	; 0x30
   149b0:	ldr	r3, [sp, #108]	; 0x6c
   149b4:	umull	r0, r1, r3, r2
   149b8:	mov	r3, r2
   149bc:	ldr	r2, [sp, #76]	; 0x4c
   149c0:	mov	r6, r0
   149c4:	mla	r1, r2, r3, r1
   149c8:	ldr	r2, [sp, #60]	; 0x3c
   149cc:	ldr	r3, [sp, #108]	; 0x6c
   149d0:	mov	r7, r1
   149d4:	umlal	r6, r7, sl, ip
   149d8:	umull	r2, r3, r3, r2
   149dc:	mla	r3, lr, ip, r3
   149e0:	ldr	ip, [sp, #100]	; 0x64
   149e4:	mov	lr, #0
   149e8:	adds	ip, ip, r6
   149ec:	str	ip, [sp, #64]	; 0x40
   149f0:	adc	ip, lr, r7
   149f4:	str	ip, [sp, #68]	; 0x44
   149f8:	ldrd	r6, [sp, #64]	; 0x40
   149fc:	cmp	r1, r7
   14a00:	cmpeq	r0, r6
   14a04:	bls	14a10 <__assert_fail@plt+0x3230>
   14a08:	adds	r2, r2, lr
   14a0c:	adc	r3, r3, #1
   14a10:	ldr	r0, [sp, #68]	; 0x44
   14a14:	mov	r1, #0
   14a18:	adds	r0, r0, r2
   14a1c:	ldr	r2, [sp, #64]	; 0x40
   14a20:	adc	r3, r1, r3
   14a24:	str	r0, [sp, #32]
   14a28:	ldr	r0, [sp, #96]	; 0x60
   14a2c:	str	r3, [sp, #36]	; 0x24
   14a30:	adds	r8, r1, r0
   14a34:	adc	r9, r2, r1
   14a38:	ldrd	r2, [sp, #32]
   14a3c:	orrs	r3, r2, r3
   14a40:	bne	14ae0 <__assert_fail@plt+0x3300>
   14a44:	mov	r0, r8
   14a48:	mov	r1, r9
   14a4c:	mov	r2, r4
   14a50:	mov	r3, r5
   14a54:	bl	1acd8 <__assert_fail@plt+0x94f8>
   14a58:	mov	r8, r2
   14a5c:	mov	r9, r3
   14a60:	ldr	r3, [sp, #72]	; 0x48
   14a64:	mov	r0, r4
   14a68:	mov	r1, r5
   14a6c:	strd	r8, [sp]
   14a70:	ldr	r2, [sp, #92]	; 0x5c
   14a74:	str	r3, [sp, #16]
   14a78:	ldr	r3, [sp, #44]	; 0x2c
   14a7c:	strd	sl, [sp, #24]
   14a80:	str	r3, [sp, #8]
   14a84:	ldr	r3, [sp, #56]	; 0x38
   14a88:	str	r3, [sp, #12]
   14a8c:	ldr	r3, [sp, #104]	; 0x68
   14a90:	bl	11ea4 <__assert_fail@plt+0x6c4>
   14a94:	cmp	r0, #0
   14a98:	beq	14bc8 <__assert_fail@plt+0x33e8>
   14a9c:	ldr	r3, [pc, #-440]	; 148ec <__assert_fail@plt+0x310c>
   14aa0:	ldr	r2, [sp, #80]	; 0x50
   14aa4:	cmp	r3, r2
   14aa8:	bne	148a8 <__assert_fail@plt+0x30c8>
   14aac:	mov	r2, #5
   14ab0:	ldr	r1, [pc, #-456]	; 148f0 <__assert_fail@plt+0x3110>
   14ab4:	mov	r0, #0
   14ab8:	bl	114bc <dcgettext@plt>
   14abc:	mov	r1, #0
   14ac0:	mov	r2, r0
   14ac4:	mov	r0, r1
   14ac8:	bl	115ac <error@plt>
   14acc:	bl	117c8 <abort@plt>
   14ad0:	cmp	r0, #0
   14ad4:	beq	14970 <__assert_fail@plt+0x3190>
   14ad8:	add	sp, sp, #388	; 0x184
   14adc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14ae0:	ldrd	r2, [sp, #32]
   14ae4:	cmp	r5, r3
   14ae8:	cmpeq	r4, r2
   14aec:	bhi	14b04 <__assert_fail@plt+0x3324>
   14af0:	ldr	r3, [pc, #-516]	; 148f4 <__assert_fail@plt+0x3114>
   14af4:	movw	r2, #1262	; 0x4ee
   14af8:	ldr	r1, [pc, #-520]	; 148f8 <__assert_fail@plt+0x3118>
   14afc:	ldr	r0, [pc, #-520]	; 148fc <__assert_fail@plt+0x311c>
   14b00:	bl	117e0 <__assert_fail@plt>
   14b04:	mov	r1, #64	; 0x40
   14b08:	mov	r2, r4
   14b0c:	mov	r3, r5
   14b10:	mov	r0, #0
   14b14:	str	r1, [sp, #96]	; 0x60
   14b18:	mov	r1, #0
   14b1c:	lsr	r6, r0, #1
   14b20:	lsr	lr, r1, #1
   14b24:	orr	r0, r6, r1, lsl #31
   14b28:	orr	r1, lr, r2, lsl #31
   14b2c:	lsr	r6, r3, #1
   14b30:	lsr	lr, r2, #1
   14b34:	orr	lr, lr, r3, lsl #31
   14b38:	mov	r3, r6
   14b3c:	ldrd	r6, [sp, #32]
   14b40:	mov	r2, lr
   14b44:	cmp	r3, r7
   14b48:	cmpeq	lr, r6
   14b4c:	bcc	14b70 <__assert_fail@plt+0x3390>
   14b50:	moveq	lr, #1
   14b54:	movne	lr, #0
   14b58:	cmp	r1, r9
   14b5c:	cmpeq	r0, r8
   14b60:	movhi	lr, #0
   14b64:	andls	lr, lr, #1
   14b68:	cmp	lr, #0
   14b6c:	beq	14bb4 <__assert_fail@plt+0x33d4>
   14b70:	ldr	r7, [sp, #32]
   14b74:	cmp	r1, r9
   14b78:	mov	r6, #0
   14b7c:	cmpeq	r0, r8
   14b80:	movhi	lr, #1
   14b84:	ldr	ip, [sp, #36]	; 0x24
   14b88:	movls	lr, #0
   14b8c:	subs	r8, r8, r0
   14b90:	sbc	r9, r9, r1
   14b94:	subs	r7, r7, r2
   14b98:	sbc	ip, ip, r3
   14b9c:	str	ip, [sp, #124]	; 0x7c
   14ba0:	subs	ip, r7, lr
   14ba4:	str	ip, [sp, #32]
   14ba8:	ldr	ip, [sp, #124]	; 0x7c
   14bac:	sbc	ip, ip, r6
   14bb0:	str	ip, [sp, #36]	; 0x24
   14bb4:	ldr	ip, [sp, #96]	; 0x60
   14bb8:	subs	ip, ip, #1
   14bbc:	str	ip, [sp, #96]	; 0x60
   14bc0:	bne	14b1c <__assert_fail@plt+0x333c>
   14bc4:	b	14a60 <__assert_fail@plt+0x3280>
   14bc8:	mov	r0, #0
   14bcc:	b	14ad8 <__assert_fail@plt+0x32f8>
   14bd0:	mov	r0, #0
   14bd4:	bx	lr
   14bd8:	mov	r0, #1
   14bdc:	bx	lr
   14be0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14be4:	sub	sp, sp, #100	; 0x64
   14be8:	mov	r4, r0
   14bec:	mov	r5, r1
   14bf0:	str	r3, [sp, #80]	; 0x50
   14bf4:	add	r3, r2, #1
   14bf8:	str	r3, [sp, #76]	; 0x4c
   14bfc:	cmp	r5, #0
   14c00:	ldr	r3, [sp, #76]	; 0x4c
   14c04:	cmpeq	r4, #1
   14c08:	sub	r3, r3, #1
   14c0c:	str	r3, [sp, #56]	; 0x38
   14c10:	bhi	14c28 <__assert_fail@plt+0x3448>
   14c14:	ldr	r3, [pc, #1440]	; 151bc <__assert_fail@plt+0x39dc>
   14c18:	movw	r2, #1466	; 0x5ba
   14c1c:	ldr	r1, [pc, #1436]	; 151c0 <__assert_fail@plt+0x39e0>
   14c20:	ldr	r0, [pc, #1436]	; 151c4 <__assert_fail@plt+0x39e4>
   14c24:	bl	117e0 <__assert_fail@plt>
   14c28:	mov	r0, #0
   14c2c:	mov	r1, #0
   14c30:	mov	r2, r4
   14c34:	mov	r3, r5
   14c38:	mov	ip, #64	; 0x40
   14c3c:	mov	r6, #1
   14c40:	strd	r0, [sp, #24]
   14c44:	mov	r7, #0
   14c48:	mov	sl, #0
   14c4c:	lsr	r8, r0, #1
   14c50:	lsr	lr, r1, #1
   14c54:	orr	r0, r8, r1, lsl #31
   14c58:	orr	r1, lr, r2, lsl #31
   14c5c:	lsr	lr, r2, #1
   14c60:	lsr	r8, r3, #1
   14c64:	orr	lr, lr, r3, lsl #31
   14c68:	cmp	r8, r7
   14c6c:	mov	r3, r8
   14c70:	cmpeq	lr, r6
   14c74:	mov	r2, lr
   14c78:	bcc	14ca0 <__assert_fail@plt+0x34c0>
   14c7c:	ldrd	r8, [sp, #24]
   14c80:	moveq	lr, #1
   14c84:	movne	lr, #0
   14c88:	cmp	r1, r9
   14c8c:	cmpeq	r0, r8
   14c90:	movhi	lr, #0
   14c94:	andls	lr, lr, #1
   14c98:	cmp	lr, #0
   14c9c:	beq	14cdc <__assert_fail@plt+0x34fc>
   14ca0:	ldrd	r8, [sp, #24]
   14ca4:	cmp	r1, r9
   14ca8:	ldr	r9, [sp, #24]
   14cac:	cmpeq	r0, r8
   14cb0:	movhi	lr, #1
   14cb4:	movls	lr, #0
   14cb8:	subs	r9, r9, r0
   14cbc:	str	r9, [sp, #24]
   14cc0:	ldr	r9, [sp, #28]
   14cc4:	sbc	r9, r9, r1
   14cc8:	str	r9, [sp, #28]
   14ccc:	subs	r9, r6, r2
   14cd0:	sbc	fp, r7, r3
   14cd4:	subs	r6, r9, lr
   14cd8:	sbc	r7, fp, sl
   14cdc:	subs	ip, ip, #1
   14ce0:	bne	14c4c <__assert_fail@plt+0x346c>
   14ce4:	ldr	r3, [sp, #24]
   14ce8:	ldrd	r0, [sp, #24]
   14cec:	subs	r3, r4, r3
   14cf0:	str	r3, [sp, #88]	; 0x58
   14cf4:	ldr	r3, [sp, #28]
   14cf8:	sbc	r3, r5, r3
   14cfc:	str	r3, [sp, #92]	; 0x5c
   14d00:	ldrd	r2, [sp, #88]	; 0x58
   14d04:	cmp	r3, r1
   14d08:	cmpeq	r2, r0
   14d0c:	movhi	r2, #1
   14d10:	movls	r2, #0
   14d14:	rsbs	r2, r2, #0
   14d18:	sbc	r3, r3, r3
   14d1c:	and	r6, r2, r4
   14d20:	ldr	r2, [sp, #28]
   14d24:	and	r1, r3, r5
   14d28:	ldr	r3, [sp, #24]
   14d2c:	adds	r3, r3, r3
   14d30:	adc	r8, r2, r2
   14d34:	subs	r3, r3, r4
   14d38:	sbc	r2, r8, r5
   14d3c:	adds	r6, r6, r3
   14d40:	adc	r8, r1, r2
   14d44:	ldr	r2, [sp, #56]	; 0x38
   14d48:	mov	r3, #1
   14d4c:	str	r6, [sp, #16]
   14d50:	str	r8, [sp, #20]
   14d54:	str	r3, [sp, #52]	; 0x34
   14d58:	str	r3, [sp, #72]	; 0x48
   14d5c:	mov	r3, #0
   14d60:	str	r6, [sp, #32]
   14d64:	str	r8, [sp, #36]	; 0x24
   14d68:	strd	r2, [sp, #56]	; 0x38
   14d6c:	ldrd	r2, [sp, #56]	; 0x38
   14d70:	cmp	r3, r5
   14d74:	cmpeq	r2, r4
   14d78:	bcc	14d90 <__assert_fail@plt+0x35b0>
   14d7c:	ldr	r3, [pc, #1080]	; 151bc <__assert_fail@plt+0x39dc>
   14d80:	mov	r2, #1472	; 0x5c0
   14d84:	ldr	r1, [pc, #1076]	; 151c0 <__assert_fail@plt+0x39e0>
   14d88:	ldr	r0, [pc, #1080]	; 151c8 <__assert_fail@plt+0x39e8>
   14d8c:	b	14c24 <__assert_fail@plt+0x3444>
   14d90:	ldr	r2, [pc, #1076]	; 151cc <__assert_fail@plt+0x39ec>
   14d94:	ubfx	r3, r4, #1, #7
   14d98:	add	r3, r2, r3
   14d9c:	movw	r2, #709	; 0x2c5
   14da0:	ldrb	r0, [r3, r2]
   14da4:	mov	r2, #0
   14da8:	adds	r3, r0, r0
   14dac:	umull	r0, r1, r0, r0
   14db0:	adc	r2, r2, r2
   14db4:	mul	ip, r0, r5
   14db8:	mla	ip, r4, r1, ip
   14dbc:	umull	r0, r1, r0, r4
   14dc0:	subs	sl, r3, r0
   14dc4:	add	r1, ip, r1
   14dc8:	sbc	r3, r2, r1
   14dcc:	adds	r2, sl, sl
   14dd0:	adc	r1, r3, r3
   14dd4:	mul	r3, sl, r3
   14dd8:	umull	sl, fp, sl, sl
   14ddc:	add	fp, fp, r3, lsl #1
   14de0:	mul	r3, sl, r5
   14de4:	mla	r3, r4, fp, r3
   14de8:	umull	sl, fp, sl, r4
   14dec:	subs	r2, r2, sl
   14df0:	add	fp, r3, fp
   14df4:	sbc	r1, r1, fp
   14df8:	adds	r7, r2, r2
   14dfc:	adc	sl, r1, r1
   14e00:	mul	r1, r2, r1
   14e04:	umull	r2, r3, r2, r2
   14e08:	add	r3, r3, r1, lsl #1
   14e0c:	mul	r1, r2, r5
   14e10:	mla	r1, r4, r3, r1
   14e14:	umull	r2, r3, r2, r4
   14e18:	add	r3, r1, r3
   14e1c:	subs	r7, r7, r2
   14e20:	sbc	sl, sl, r3
   14e24:	ldr	r3, [sp, #56]	; 0x38
   14e28:	subs	r3, r4, r3
   14e2c:	str	r3, [sp, #64]	; 0x40
   14e30:	ldr	r3, [sp, #60]	; 0x3c
   14e34:	sbc	r3, r5, r3
   14e38:	str	r3, [sp, #68]	; 0x44
   14e3c:	ldr	r3, [sp, #56]	; 0x38
   14e40:	subs	r3, r3, r4
   14e44:	str	r3, [sp, #84]	; 0x54
   14e48:	ldr	r3, [sp, #60]	; 0x3c
   14e4c:	sbc	fp, r3, r5
   14e50:	mov	r3, r8
   14e54:	mov	r2, r6
   14e58:	strd	r4, [sp]
   14e5c:	mov	r1, r8
   14e60:	mov	r0, r6
   14e64:	str	r7, [sp, #8]
   14e68:	str	sl, [sp, #12]
   14e6c:	bl	11ca8 <__assert_fail@plt+0x4c8>
   14e70:	ldrd	r2, [sp, #64]	; 0x40
   14e74:	strd	r4, [sp]
   14e78:	str	r7, [sp, #8]
   14e7c:	str	sl, [sp, #12]
   14e80:	cmp	r3, r1
   14e84:	ldr	r3, [sp, #84]	; 0x54
   14e88:	cmpeq	r2, r0
   14e8c:	movhi	r2, #1
   14e90:	movls	r2, #0
   14e94:	rsbs	r8, r2, #0
   14e98:	sbc	r9, r9, r9
   14e9c:	and	r2, r8, r4
   14ea0:	adds	r3, r3, r0
   14ea4:	and	ip, r9, r5
   14ea8:	adc	r1, fp, r1
   14eac:	adds	r3, r2, r3
   14eb0:	str	r3, [sp, #40]	; 0x28
   14eb4:	adc	r3, ip, r1
   14eb8:	str	r3, [sp, #44]	; 0x2c
   14ebc:	ldrd	r2, [sp, #32]
   14ec0:	ldrd	r0, [sp, #40]	; 0x28
   14ec4:	ldr	ip, [sp, #44]	; 0x2c
   14ec8:	cmp	r3, r1
   14ecc:	ldr	r3, [sp, #32]
   14ed0:	cmpeq	r2, r0
   14ed4:	movcc	r0, #1
   14ed8:	movcs	r0, #0
   14edc:	rsbs	r0, r0, #0
   14ee0:	sbc	r1, r1, r1
   14ee4:	and	r2, r0, r4
   14ee8:	and	r0, r1, r5
   14eec:	ldr	r1, [sp, #40]	; 0x28
   14ef0:	subs	r1, r3, r1
   14ef4:	ldr	r3, [sp, #36]	; 0x24
   14ef8:	sbc	r3, r3, ip
   14efc:	adds	r2, r2, r1
   14f00:	adc	r3, r0, r3
   14f04:	ldrd	r0, [sp, #24]
   14f08:	bl	11ca8 <__assert_fail@plt+0x4c8>
   14f0c:	ldr	r3, [sp, #52]	; 0x34
   14f10:	strd	r0, [sp, #24]
   14f14:	and	r3, r3, #31
   14f18:	cmp	r3, #1
   14f1c:	bne	14f40 <__assert_fail@plt+0x3760>
   14f20:	mov	r2, r4
   14f24:	mov	r3, r5
   14f28:	bl	11af0 <__assert_fail@plt+0x310>
   14f2c:	cmp	r1, #0
   14f30:	cmpeq	r0, #1
   14f34:	bne	15004 <__assert_fail@plt+0x3824>
   14f38:	ldrd	r2, [sp, #40]	; 0x28
   14f3c:	strd	r2, [sp, #16]
   14f40:	ldr	r3, [sp, #52]	; 0x34
   14f44:	subs	r3, r3, #1
   14f48:	ldrne	r6, [sp, #40]	; 0x28
   14f4c:	str	r3, [sp, #52]	; 0x34
   14f50:	ldrne	r8, [sp, #44]	; 0x2c
   14f54:	ldrne	r9, [sp, #72]	; 0x48
   14f58:	bne	14fe4 <__assert_fail@plt+0x3804>
   14f5c:	ldr	r6, [sp, #40]	; 0x28
   14f60:	ldr	r3, [sp, #72]	; 0x48
   14f64:	ldr	r8, [sp, #44]	; 0x2c
   14f68:	lsl	r9, r3, #1
   14f6c:	mov	r2, r6
   14f70:	mov	r3, r8
   14f74:	strd	r4, [sp]
   14f78:	mov	r0, r6
   14f7c:	mov	r1, r8
   14f80:	str	r7, [sp, #8]
   14f84:	str	sl, [sp, #12]
   14f88:	bl	11ca8 <__assert_fail@plt+0x4c8>
   14f8c:	ldrd	r2, [sp, #64]	; 0x40
   14f90:	cmp	r3, r1
   14f94:	cmpeq	r2, r0
   14f98:	movhi	r2, #1
   14f9c:	movls	r2, #0
   14fa0:	rsbs	r2, r2, #0
   14fa4:	sbc	r3, r3, r3
   14fa8:	and	ip, r2, r4
   14fac:	and	r2, r3, r5
   14fb0:	ldr	r3, [sp, #84]	; 0x54
   14fb4:	adds	r3, r3, r0
   14fb8:	ldr	r0, [sp, #52]	; 0x34
   14fbc:	adc	r1, fp, r1
   14fc0:	adds	r3, ip, r3
   14fc4:	adc	r2, r2, r1
   14fc8:	ldr	r1, [sp, #72]	; 0x48
   14fcc:	cmp	r1, r0
   14fd0:	bne	14fec <__assert_fail@plt+0x380c>
   14fd4:	ldrd	r2, [sp, #40]	; 0x28
   14fd8:	str	r6, [sp, #16]
   14fdc:	str	r8, [sp, #20]
   14fe0:	strd	r2, [sp, #32]
   14fe4:	str	r9, [sp, #72]	; 0x48
   14fe8:	b	14e50 <__assert_fail@plt+0x3670>
   14fec:	ldr	r1, [sp, #52]	; 0x34
   14ff0:	mov	r6, r3
   14ff4:	mov	r8, r2
   14ff8:	add	r1, r1, #1
   14ffc:	str	r1, [sp, #52]	; 0x34
   15000:	b	14f6c <__assert_fail@plt+0x378c>
   15004:	ldrd	r2, [sp, #16]
   15008:	strd	r4, [sp]
   1500c:	str	r7, [sp, #8]
   15010:	str	sl, [sp, #12]
   15014:	mov	r0, r2
   15018:	mov	r1, r3
   1501c:	bl	11ca8 <__assert_fail@plt+0x4c8>
   15020:	ldrd	r2, [sp, #64]	; 0x40
   15024:	cmp	r3, r1
   15028:	ldr	r3, [sp, #84]	; 0x54
   1502c:	cmpeq	r2, r0
   15030:	movhi	r2, #1
   15034:	movls	r2, #0
   15038:	rsbs	r8, r2, #0
   1503c:	sbc	r9, r9, r9
   15040:	and	r2, r8, r4
   15044:	adds	r3, r3, r0
   15048:	and	ip, r9, r5
   1504c:	adc	r1, fp, r1
   15050:	adds	r3, r2, r3
   15054:	str	r3, [sp, #16]
   15058:	adc	r3, ip, r1
   1505c:	str	r3, [sp, #20]
   15060:	ldrd	r0, [sp, #16]
   15064:	ldrd	r2, [sp, #32]
   15068:	cmp	r3, r1
   1506c:	cmpeq	r2, r0
   15070:	movcc	r2, #1
   15074:	movcs	r2, #0
   15078:	rsbs	r2, r2, #0
   1507c:	sbc	r3, r3, r3
   15080:	and	r0, r2, r4
   15084:	ldr	r2, [sp, #16]
   15088:	and	ip, r3, r5
   1508c:	ldr	r3, [sp, #32]
   15090:	subs	lr, r3, r2
   15094:	ldr	r2, [sp, #20]
   15098:	ldr	r3, [sp, #36]	; 0x24
   1509c:	sbc	r1, r3, r2
   150a0:	adds	r0, r0, lr
   150a4:	adc	r1, ip, r1
   150a8:	mov	r2, r4
   150ac:	mov	r3, r5
   150b0:	bl	11af0 <__assert_fail@plt+0x310>
   150b4:	cmp	r1, #0
   150b8:	mov	r8, r0
   150bc:	cmpeq	r0, #1
   150c0:	mov	r9, r1
   150c4:	beq	15004 <__assert_fail@plt+0x3824>
   150c8:	cmp	r1, r5
   150cc:	cmpeq	r0, r4
   150d0:	ldreq	r3, [sp, #76]	; 0x4c
   150d4:	addeq	r3, r3, #1
   150d8:	beq	14bf8 <__assert_fail@plt+0x3418>
   150dc:	mov	r2, r0
   150e0:	mov	r3, r1
   150e4:	mov	r0, r4
   150e8:	mov	r1, r5
   150ec:	bl	1acd8 <__assert_fail@plt+0x94f8>
   150f0:	mov	r4, r0
   150f4:	mov	r5, r1
   150f8:	mov	r0, r8
   150fc:	mov	r1, r9
   15100:	bl	14618 <__assert_fail@plt+0x2e38>
   15104:	cmp	r0, #0
   15108:	bne	15150 <__assert_fail@plt+0x3970>
   1510c:	mov	r0, r8
   15110:	mov	r1, r9
   15114:	ldrd	r2, [sp, #76]	; 0x4c
   15118:	bl	14be0 <__assert_fail@plt+0x3400>
   1511c:	mov	r0, r4
   15120:	mov	r1, r5
   15124:	bl	14618 <__assert_fail@plt+0x2e38>
   15128:	cmp	r0, #0
   1512c:	beq	1516c <__assert_fail@plt+0x398c>
   15130:	mov	r3, #1
   15134:	mov	r2, r4
   15138:	ldr	r0, [sp, #80]	; 0x50
   1513c:	str	r3, [sp]
   15140:	mov	r3, r5
   15144:	bl	11bb0 <__assert_fail@plt+0x3d0>
   15148:	add	sp, sp, #100	; 0x64
   1514c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15150:	mov	r3, #1
   15154:	mov	r2, r8
   15158:	ldr	r0, [sp, #80]	; 0x50
   1515c:	str	r3, [sp]
   15160:	mov	r3, r9
   15164:	bl	11bb0 <__assert_fail@plt+0x3d0>
   15168:	b	1511c <__assert_fail@plt+0x393c>
   1516c:	mov	r2, r4
   15170:	mov	r3, r5
   15174:	ldrd	r0, [sp, #40]	; 0x28
   15178:	bl	1acd8 <__assert_fail@plt+0x94f8>
   1517c:	mov	r6, r2
   15180:	mov	r8, r3
   15184:	ldrd	r0, [sp, #32]
   15188:	mov	r2, r4
   1518c:	mov	r3, r5
   15190:	bl	1acd8 <__assert_fail@plt+0x94f8>
   15194:	strd	r2, [sp, #32]
   15198:	mov	r2, r4
   1519c:	mov	r3, r5
   151a0:	ldrd	r0, [sp, #16]
   151a4:	bl	1acd8 <__assert_fail@plt+0x94f8>
   151a8:	cmp	r5, #0
   151ac:	strd	r2, [sp, #16]
   151b0:	cmpeq	r4, #1
   151b4:	bne	14d6c <__assert_fail@plt+0x358c>
   151b8:	b	15148 <__assert_fail@plt+0x3968>
   151bc:	ldrdeq	fp, [r1], -r1
   151c0:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   151c4:	andeq	lr, r1, r2, ror r0
   151c8:	andeq	lr, r1, ip, ror r0
   151cc:	ldrdeq	sl, [r1], -r8
   151d0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   151d4:	mov	r6, r2
   151d8:	sub	sp, sp, #484	; 0x1e4
   151dc:	mov	r7, r3
   151e0:	mov	r2, r0
   151e4:	mov	r3, r1
   151e8:	orrs	r3, r2, r3
   151ec:	strd	r0, [sp, #24]
   151f0:	bne	15210 <__assert_fail@plt+0x3a30>
   151f4:	mov	r0, r6
   151f8:	mov	r1, r7
   151fc:	bl	14618 <__assert_fail@plt+0x2e38>
   15200:	str	r0, [sp, #48]	; 0x30
   15204:	ldr	r0, [sp, #48]	; 0x30
   15208:	add	sp, sp, #484	; 0x1e4
   1520c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15210:	ldrd	r8, [sp, #24]
   15214:	orrs	r3, r6, r7
   15218:	moveq	r3, #1
   1521c:	movne	r3, #0
   15220:	subs	r8, r8, r3
   15224:	sbc	r9, r9, #0
   15228:	subs	r3, r6, #1
   1522c:	str	r3, [sp, #16]
   15230:	sbc	r3, r7, #0
   15234:	str	r3, [sp, #20]
   15238:	ldrd	r2, [sp, #16]
   1523c:	orrs	r3, r2, r3
   15240:	beq	15748 <__assert_fail@plt+0x3f68>
   15244:	ldr	r3, [sp, #16]
   15248:	mov	r1, #0
   1524c:	ldr	r2, [sp, #20]
   15250:	str	r1, [sp, #36]	; 0x24
   15254:	and	r4, r3, #1
   15258:	mov	r5, r1
   1525c:	orrs	r0, r4, r5
   15260:	beq	1575c <__assert_fail@plt+0x3f7c>
   15264:	ldr	r3, [sp, #36]	; 0x24
   15268:	ldr	lr, [sp, #36]	; 0x24
   1526c:	rsb	ip, r3, #64	; 0x40
   15270:	lsl	r3, r9, ip
   15274:	sub	r1, ip, #32
   15278:	rsb	r2, ip, #32
   1527c:	orr	r3, r3, r8, lsl r1
   15280:	orr	r3, r3, r8, lsr r2
   15284:	ldr	r2, [sp, #36]	; 0x24
   15288:	rsb	r0, r2, #32
   1528c:	sub	r1, r2, #32
   15290:	ldr	r2, [sp, #16]
   15294:	lsr	r2, r2, lr
   15298:	ldr	lr, [sp, #20]
   1529c:	orr	r2, r2, lr, lsl r0
   152a0:	orr	r2, r2, lr, lsr r1
   152a4:	orr	r2, r2, r8, lsl ip
   152a8:	mov	ip, lr
   152ac:	ldr	lr, [sp, #36]	; 0x24
   152b0:	orr	r3, r3, ip, lsr lr
   152b4:	strd	r2, [sp, #128]	; 0x80
   152b8:	lsr	r3, r8, lr
   152bc:	lsr	r2, r9, lr
   152c0:	orr	r3, r3, r9, lsl r0
   152c4:	orr	r3, r3, r9, lsr r1
   152c8:	str	r3, [sp, #136]	; 0x88
   152cc:	str	r2, [sp, #140]	; 0x8c
   152d0:	b	15328 <__assert_fail@plt+0x3b48>
   152d4:	lsr	r2, r2, #1
   152d8:	add	r3, r3, #1
   152dc:	orr	r2, r2, r1, lsl #31
   152e0:	lsr	r1, r1, #1
   152e4:	and	sl, r2, #1
   152e8:	mov	fp, r0
   152ec:	orrs	ip, sl, fp
   152f0:	beq	152d4 <__assert_fail@plt+0x3af4>
   152f4:	lsr	r2, r8, r3
   152f8:	rsb	r0, r3, #32
   152fc:	sub	r1, r3, #32
   15300:	orr	r2, r2, r9, lsl r0
   15304:	mov	r0, #0
   15308:	orr	r2, r2, r9, lsr r1
   1530c:	lsr	r1, r9, r3
   15310:	add	r3, r3, #64	; 0x40
   15314:	str	r3, [sp, #36]	; 0x24
   15318:	str	r2, [sp, #128]	; 0x80
   1531c:	str	r1, [sp, #132]	; 0x84
   15320:	mov	r1, #0
   15324:	strd	r0, [sp, #136]	; 0x88
   15328:	ldr	r3, [pc, #2048]	; 15b30 <__assert_fail@plt+0x4350>
   1532c:	ubfx	r2, r6, #1, #7
   15330:	mov	ip, #0
   15334:	add	r3, r3, r2
   15338:	ldrb	r2, [r3, #709]	; 0x2c5
   1533c:	adds	r0, r2, r2
   15340:	umull	r2, r3, r2, r2
   15344:	adc	ip, ip, ip
   15348:	mul	r1, r2, r7
   1534c:	mla	r1, r6, r3, r1
   15350:	umull	r2, r3, r2, r6
   15354:	subs	r0, r0, r2
   15358:	add	r3, r1, r3
   1535c:	sbc	ip, ip, r3
   15360:	adds	r3, r0, r0
   15364:	adc	r2, ip, ip
   15368:	mul	ip, r0, ip
   1536c:	umull	r0, r1, r0, r0
   15370:	add	r1, r1, ip, lsl #1
   15374:	mul	ip, r0, r7
   15378:	mla	ip, r6, r1, ip
   1537c:	umull	r0, r1, r0, r6
   15380:	subs	r3, r3, r0
   15384:	add	r1, ip, r1
   15388:	sbc	r2, r2, r1
   1538c:	adds	r0, r3, r3
   15390:	adc	r1, r2, r2
   15394:	mul	ip, r3, r2
   15398:	umull	r2, r3, r3, r3
   1539c:	add	r3, r3, ip, lsl #1
   153a0:	mul	ip, r2, r7
   153a4:	mla	ip, r6, r3, ip
   153a8:	umull	r2, r3, r2, r6
   153ac:	subs	r0, r0, r2
   153b0:	add	r3, ip, r3
   153b4:	sbc	r3, r1, r3
   153b8:	str	r0, [sp, #64]	; 0x40
   153bc:	str	r3, [sp, #68]	; 0x44
   153c0:	ldrd	r2, [sp, #24]
   153c4:	cmp	r3, #0
   153c8:	cmpeq	r2, #1
   153cc:	bhi	15778 <__assert_fail@plt+0x3f98>
   153d0:	mov	r4, #128	; 0x80
   153d4:	mov	r0, #1
   153d8:	mov	r1, #0
   153dc:	mov	r2, #0
   153e0:	mov	r3, #0
   153e4:	mov	ip, #0
   153e8:	ldrd	sl, [sp, #24]
   153ec:	adds	r5, r2, r2
   153f0:	adc	lr, r3, r3
   153f4:	orr	r2, r5, r1, lsr #31
   153f8:	mov	r3, lr
   153fc:	adds	lr, r0, r0
   15400:	adc	r1, r1, r1
   15404:	str	lr, [sp, #48]	; 0x30
   15408:	cmp	fp, r3
   1540c:	str	r1, [sp, #52]	; 0x34
   15410:	cmpeq	sl, r2
   15414:	ldrd	r0, [sp, #48]	; 0x30
   15418:	bcc	1543c <__assert_fail@plt+0x3c5c>
   1541c:	moveq	lr, #1
   15420:	movne	lr, #0
   15424:	cmp	r7, r1
   15428:	cmpeq	r6, r0
   1542c:	movhi	lr, #0
   15430:	andls	lr, lr, #1
   15434:	cmp	lr, #0
   15438:	beq	15488 <__assert_fail@plt+0x3ca8>
   1543c:	ldrd	sl, [sp, #48]	; 0x30
   15440:	mov	r5, #0
   15444:	cmp	r7, fp
   15448:	cmpeq	r6, sl
   1544c:	ldr	sl, [sp, #48]	; 0x30
   15450:	movhi	lr, #1
   15454:	movls	lr, #0
   15458:	subs	r0, sl, r6
   1545c:	ldr	sl, [sp, #52]	; 0x34
   15460:	sbc	r1, sl, r7
   15464:	ldr	sl, [sp, #24]
   15468:	subs	sl, r2, sl
   1546c:	mov	fp, sl
   15470:	ldr	sl, [sp, #28]
   15474:	sbc	sl, r3, sl
   15478:	subs	r2, fp, lr
   1547c:	str	sl, [sp, #88]	; 0x58
   15480:	ldr	lr, [sp, #88]	; 0x58
   15484:	sbc	r3, lr, r5
   15488:	add	ip, ip, #1
   1548c:	cmp	r4, ip
   15490:	bne	153e8 <__assert_fail@plt+0x3c08>
   15494:	adds	ip, r0, r0
   15498:	strd	r2, [sp, #168]	; 0xa8
   1549c:	str	ip, [sp, #40]	; 0x28
   154a0:	adc	ip, r1, r1
   154a4:	strd	r0, [sp, #160]	; 0xa0
   154a8:	str	ip, [sp, #44]	; 0x2c
   154ac:	adds	ip, r2, r2
   154b0:	adc	r3, r3, r3
   154b4:	str	ip, [sp, #72]	; 0x48
   154b8:	str	r3, [sp, #76]	; 0x4c
   154bc:	ldrd	r2, [sp, #40]	; 0x28
   154c0:	cmp	r1, r3
   154c4:	cmpeq	r0, r2
   154c8:	ldrd	r2, [sp, #72]	; 0x48
   154cc:	movhi	r1, #1
   154d0:	movls	r1, #0
   154d4:	adds	r2, r2, r1
   154d8:	ldrd	r0, [sp, #24]
   154dc:	adc	r3, r3, #0
   154e0:	strd	r2, [sp, #152]	; 0x98
   154e4:	cmp	r3, r1
   154e8:	cmpeq	r2, r0
   154ec:	bhi	15524 <__assert_fail@plt+0x3d44>
   154f0:	ldrd	r4, [sp, #24]
   154f4:	ldrd	r0, [sp, #40]	; 0x28
   154f8:	cmp	r7, r1
   154fc:	cmpeq	r6, r0
   15500:	movls	r1, #1
   15504:	movhi	r1, #0
   15508:	cmp	r3, r5
   1550c:	cmpeq	r2, r4
   15510:	movne	r1, #0
   15514:	cmp	r1, #0
   15518:	ldrdeq	r2, [sp, #40]	; 0x28
   1551c:	strdeq	r2, [sp, #144]	; 0x90
   15520:	beq	15568 <__assert_fail@plt+0x3d88>
   15524:	ldr	r1, [sp, #40]	; 0x28
   15528:	subs	r0, r1, r6
   1552c:	ldr	r1, [sp, #44]	; 0x2c
   15530:	sbc	r1, r1, r7
   15534:	strd	r0, [sp, #144]	; 0x90
   15538:	ldrd	r0, [sp, #40]	; 0x28
   1553c:	cmp	r7, r1
   15540:	cmpeq	r6, r0
   15544:	movhi	r1, #1
   15548:	movls	r1, #0
   1554c:	subs	r4, r2, r1
   15550:	sbc	r5, r3, #0
   15554:	ldr	r3, [sp, #24]
   15558:	subs	r2, r4, r3
   1555c:	ldr	r3, [sp, #28]
   15560:	sbc	r3, r5, r3
   15564:	strd	r2, [sp, #152]	; 0x98
   15568:	ldrd	r2, [sp, #24]
   1556c:	add	r0, sp, #176	; 0xb0
   15570:	strd	r6, [sp, #176]	; 0xb0
   15574:	strd	r2, [sp, #184]	; 0xb8
   15578:	add	r3, sp, #160	; 0xa0
   1557c:	ldr	r2, [sp, #64]	; 0x40
   15580:	str	r3, [sp, #12]
   15584:	ldr	r3, [sp, #36]	; 0x24
   15588:	str	r3, [sp, #8]
   1558c:	add	r3, sp, #128	; 0x80
   15590:	str	r3, [sp, #4]
   15594:	add	r3, sp, #144	; 0x90
   15598:	str	r3, [sp]
   1559c:	ldr	r3, [sp, #68]	; 0x44
   155a0:	bl	129d0 <__assert_fail@plt+0x11f0>
   155a4:	subs	r3, r0, #0
   155a8:	str	r3, [sp, #48]	; 0x30
   155ac:	beq	15204 <__assert_fail@plt+0x3a24>
   155b0:	add	r3, sp, #224	; 0xe0
   155b4:	mov	r0, r8
   155b8:	mov	r1, r9
   155bc:	str	r3, [sp]
   155c0:	ldrd	r2, [sp, #16]
   155c4:	bl	13f5c <__assert_fail@plt+0x277c>
   155c8:	ldr	r3, [sp, #16]
   155cc:	ldr	r2, [sp, #20]
   155d0:	lsr	r3, r3, #1
   155d4:	orr	r3, r3, r2, lsl #31
   155d8:	str	r3, [sp, #104]	; 0x68
   155dc:	lsr	r3, r2, #1
   155e0:	mov	r2, #2
   155e4:	orr	r3, r3, r8, lsl #31
   155e8:	str	r3, [sp, #120]	; 0x78
   155ec:	lsr	r3, r8, #1
   155f0:	orr	r3, r3, r9, lsl #31
   155f4:	str	r3, [sp, #92]	; 0x5c
   155f8:	lsr	r3, r9, #1
   155fc:	str	r3, [sp, #124]	; 0x7c
   15600:	ldr	r3, [pc, #1320]	; 15b30 <__assert_fail@plt+0x4350>
   15604:	str	r3, [sp, #88]	; 0x58
   15608:	mov	r3, #0
   1560c:	strd	r2, [sp, #40]	; 0x28
   15610:	ldrd	r2, [sp, #232]	; 0xe8
   15614:	orrs	r3, r2, r3
   15618:	ldreq	r0, [sp, #48]	; 0x30
   1561c:	beq	15738 <__assert_fail@plt+0x3f58>
   15620:	ldr	lr, [sp, #224]	; 0xe0
   15624:	ldr	r2, [pc, #1284]	; 15b30 <__assert_fail@plt+0x4350>
   15628:	ldr	ip, [sp, #228]	; 0xe4
   1562c:	ubfx	r3, lr, #1, #7
   15630:	add	r3, r2, r3
   15634:	ldrb	r4, [r3, #709]	; 0x2c5
   15638:	mov	r3, #0
   1563c:	adds	r0, r4, r4
   15640:	umull	r4, r5, r4, r4
   15644:	adc	r3, r3, r3
   15648:	mul	r2, r4, ip
   1564c:	mla	r2, lr, r5, r2
   15650:	umull	r4, r5, r4, lr
   15654:	subs	r0, r0, r4
   15658:	add	r5, r2, r5
   1565c:	sbc	r4, r3, r5
   15660:	adds	r2, r0, r0
   15664:	adc	r3, r4, r4
   15668:	mul	r4, r0, r4
   1566c:	umull	r0, r1, r0, r0
   15670:	add	r1, r1, r4, lsl #1
   15674:	mul	r4, r0, ip
   15678:	mla	r4, lr, r1, r4
   1567c:	umull	r0, r1, r0, lr
   15680:	subs	r2, r2, r0
   15684:	add	r1, r4, r1
   15688:	sbc	r3, r3, r1
   1568c:	adds	r1, r2, r2
   15690:	adc	r0, r3, r3
   15694:	mul	r4, r2, r3
   15698:	umull	r2, r3, r2, r2
   1569c:	add	r3, r3, r4, lsl #1
   156a0:	add	r4, sp, #160	; 0xa0
   156a4:	mul	ip, r2, ip
   156a8:	str	r4, [sp, #8]
   156ac:	mla	ip, lr, r3, ip
   156b0:	umull	r2, r3, r2, lr
   156b4:	subs	r1, r1, r2
   156b8:	add	r3, ip, r3
   156bc:	sbc	r0, r0, r3
   156c0:	ldrd	r2, [sp, #16]
   156c4:	mul	r3, r1, r3
   156c8:	mla	r0, r2, r0, r3
   156cc:	umull	r2, r3, r1, r2
   156d0:	add	r1, sp, #144	; 0x90
   156d4:	add	r3, r0, r3
   156d8:	add	r0, sp, #216	; 0xd8
   156dc:	strd	r2, [sp, #192]	; 0xc0
   156e0:	mov	r2, #0
   156e4:	mov	r3, #0
   156e8:	strd	r2, [sp, #200]	; 0xc8
   156ec:	add	r2, sp, #192	; 0xc0
   156f0:	ldr	r3, [sp, #64]	; 0x40
   156f4:	str	r3, [sp]
   156f8:	ldr	r3, [sp, #68]	; 0x44
   156fc:	str	r3, [sp, #4]
   15700:	add	r3, sp, #176	; 0xb0
   15704:	bl	127fc <__assert_fail@plt+0x101c>
   15708:	ldrd	r2, [r4]
   1570c:	strd	r0, [sp, #208]	; 0xd0
   15710:	cmp	r1, r3
   15714:	cmpeq	r0, r2
   15718:	movne	r0, #1
   1571c:	bne	15738 <__assert_fail@plt+0x3f58>
   15720:	ldrd	r2, [r4, #8]
   15724:	ldrd	r0, [sp, #216]	; 0xd8
   15728:	cmp	r1, r3
   1572c:	cmpeq	r0, r2
   15730:	movne	r0, #1
   15734:	moveq	r0, #0
   15738:	add	r3, sp, #240	; 0xf0
   1573c:	str	r3, [sp, #108]	; 0x6c
   15740:	mov	r3, #0
   15744:	b	15828 <__assert_fail@plt+0x4048>
   15748:	mov	r3, #0
   1574c:	mov	r2, r8
   15750:	mov	r1, r9
   15754:	mov	r0, r3
   15758:	b	152e4 <__assert_fail@plt+0x3b04>
   1575c:	ldr	r0, [sp, #36]	; 0x24
   15760:	lsr	r3, r3, #1
   15764:	orr	r3, r3, r2, lsl #31
   15768:	lsr	r2, r2, #1
   1576c:	add	r0, r0, #1
   15770:	str	r0, [sp, #36]	; 0x24
   15774:	b	15254 <__assert_fail@plt+0x3a74>
   15778:	mov	r4, #64	; 0x40
   1577c:	mov	r0, #0
   15780:	mov	r1, #0
   15784:	mov	r2, #1
   15788:	b	153e0 <__assert_fail@plt+0x3c00>
   1578c:	ldr	r1, [sp, #108]	; 0x6c
   15790:	ldrd	r2, [r1], #8
   15794:	cmp	r3, #0
   15798:	str	r1, [sp, #108]	; 0x6c
   1579c:	cmpeq	r2, #2
   157a0:	bne	159b4 <__assert_fail@plt+0x41d4>
   157a4:	ldr	r3, [sp, #104]	; 0x68
   157a8:	str	r3, [sp, #192]	; 0xc0
   157ac:	ldr	r3, [sp, #120]	; 0x78
   157b0:	str	r3, [sp, #196]	; 0xc4
   157b4:	ldr	r3, [sp, #92]	; 0x5c
   157b8:	str	r3, [sp, #200]	; 0xc8
   157bc:	ldr	r3, [sp, #124]	; 0x7c
   157c0:	str	r3, [sp, #204]	; 0xcc
   157c4:	ldr	r3, [sp, #64]	; 0x40
   157c8:	add	r4, sp, #160	; 0xa0
   157cc:	add	r2, sp, #192	; 0xc0
   157d0:	add	r1, sp, #144	; 0x90
   157d4:	add	r0, sp, #216	; 0xd8
   157d8:	str	r3, [sp]
   157dc:	ldr	r3, [sp, #68]	; 0x44
   157e0:	str	r4, [sp, #8]
   157e4:	str	r3, [sp, #4]
   157e8:	add	r3, sp, #176	; 0xb0
   157ec:	bl	127fc <__assert_fail@plt+0x101c>
   157f0:	ldrd	r2, [r4]
   157f4:	strd	r0, [sp, #208]	; 0xd0
   157f8:	cmp	r1, r3
   157fc:	cmpeq	r0, r2
   15800:	movne	r0, #1
   15804:	bne	15820 <__assert_fail@plt+0x4040>
   15808:	ldrd	r2, [r4, #8]
   1580c:	ldrd	r0, [sp, #216]	; 0xd8
   15810:	cmp	r1, r3
   15814:	cmpeq	r0, r2
   15818:	movne	r0, #1
   1581c:	moveq	r0, #0
   15820:	ldr	r3, [sp, #72]	; 0x48
   15824:	add	r3, r3, #1
   15828:	str	r3, [sp, #72]	; 0x48
   1582c:	ldrb	r3, [sp, #474]	; 0x1da
   15830:	ldr	r2, [sp, #72]	; 0x48
   15834:	cmp	r3, r2
   15838:	bls	15b10 <__assert_fail@plt+0x4330>
   1583c:	cmp	r0, #0
   15840:	bne	1578c <__assert_fail@plt+0x3fac>
   15844:	ldr	r1, [sp, #88]	; 0x58
   15848:	mov	r3, #0
   1584c:	ldrb	r2, [r1], #1
   15850:	str	r1, [sp, #88]	; 0x58
   15854:	ldr	r1, [sp, #40]	; 0x28
   15858:	adds	r1, r1, r2
   1585c:	str	r1, [sp, #40]	; 0x28
   15860:	ldr	r1, [sp, #44]	; 0x2c
   15864:	adc	r3, r1, r3
   15868:	str	r3, [sp, #44]	; 0x2c
   1586c:	ldrd	r2, [sp, #24]
   15870:	ldrd	r0, [sp, #40]	; 0x28
   15874:	cmp	r3, r1
   15878:	cmpeq	r2, r0
   1587c:	bhi	15b1c <__assert_fail@plt+0x433c>
   15880:	ldrd	r0, [sp, #40]	; 0x28
   15884:	mov	r4, #128	; 0x80
   15888:	mov	r2, #0
   1588c:	mov	r3, #0
   15890:	mov	ip, #0
   15894:	ldrd	sl, [sp, #24]
   15898:	adds	r5, r2, r2
   1589c:	adc	lr, r3, r3
   158a0:	orr	r2, r5, r1, lsr #31
   158a4:	mov	r3, lr
   158a8:	adds	lr, r0, r0
   158ac:	adc	r1, r1, r1
   158b0:	str	lr, [sp, #56]	; 0x38
   158b4:	cmp	fp, r3
   158b8:	str	r1, [sp, #60]	; 0x3c
   158bc:	cmpeq	sl, r2
   158c0:	ldrd	r0, [sp, #56]	; 0x38
   158c4:	bcc	158e8 <__assert_fail@plt+0x4108>
   158c8:	moveq	lr, #1
   158cc:	movne	lr, #0
   158d0:	cmp	r7, r1
   158d4:	cmpeq	r6, r0
   158d8:	movhi	lr, #0
   158dc:	andls	lr, lr, #1
   158e0:	cmp	lr, #0
   158e4:	beq	15934 <__assert_fail@plt+0x4154>
   158e8:	ldrd	sl, [sp, #56]	; 0x38
   158ec:	mov	r5, #0
   158f0:	cmp	r7, fp
   158f4:	cmpeq	r6, sl
   158f8:	ldr	sl, [sp, #56]	; 0x38
   158fc:	movhi	lr, #1
   15900:	movls	lr, #0
   15904:	subs	r0, sl, r6
   15908:	ldr	sl, [sp, #60]	; 0x3c
   1590c:	sbc	r1, sl, r7
   15910:	ldr	sl, [sp, #24]
   15914:	subs	sl, r2, sl
   15918:	mov	fp, sl
   1591c:	ldr	sl, [sp, #28]
   15920:	sbc	sl, r3, sl
   15924:	subs	r2, fp, lr
   15928:	str	sl, [sp, #72]	; 0x48
   1592c:	ldr	lr, [sp, #72]	; 0x48
   15930:	sbc	r3, lr, r5
   15934:	add	ip, ip, #1
   15938:	cmp	r4, ip
   1593c:	bne	15894 <__assert_fail@plt+0x40b4>
   15940:	add	ip, sp, #144	; 0x90
   15944:	strd	r2, [sp, #152]	; 0x98
   15948:	add	r3, sp, #160	; 0xa0
   1594c:	str	ip, [sp]
   15950:	str	r3, [sp, #12]
   15954:	ldr	r3, [sp, #36]	; 0x24
   15958:	strd	r0, [sp, #144]	; 0x90
   1595c:	add	r0, sp, #176	; 0xb0
   15960:	ldr	r2, [sp, #64]	; 0x40
   15964:	str	r3, [sp, #8]
   15968:	add	r3, sp, #128	; 0x80
   1596c:	str	r3, [sp, #4]
   15970:	ldr	r3, [sp, #68]	; 0x44
   15974:	bl	129d0 <__assert_fail@plt+0x11f0>
   15978:	cmp	r0, #0
   1597c:	beq	15200 <__assert_fail@plt+0x3a20>
   15980:	ldr	r3, [pc, #428]	; 15b34 <__assert_fail@plt+0x4354>
   15984:	ldr	r2, [sp, #88]	; 0x58
   15988:	cmp	r3, r2
   1598c:	bne	15610 <__assert_fail@plt+0x3e30>
   15990:	mov	r2, #5
   15994:	ldr	r1, [pc, #412]	; 15b38 <__assert_fail@plt+0x4358>
   15998:	mov	r0, #0
   1599c:	bl	114bc <dcgettext@plt>
   159a0:	mov	r1, #0
   159a4:	mov	r2, r0
   159a8:	mov	r0, r1
   159ac:	bl	115ac <error@plt>
   159b0:	bl	117c8 <abort@plt>
   159b4:	ldr	r0, [pc, #372]	; 15b30 <__assert_fail@plt+0x4350>
   159b8:	ubfx	r1, r2, #1, #7
   159bc:	mov	ip, #0
   159c0:	add	r1, r0, r1
   159c4:	movw	r0, #709	; 0x2c5
   159c8:	ldrb	r0, [r1, r0]
   159cc:	adds	r4, r0, r0
   159d0:	umull	r0, r1, r0, r0
   159d4:	adc	ip, ip, ip
   159d8:	mul	lr, r0, r3
   159dc:	mla	lr, r2, r1, lr
   159e0:	umull	r0, r1, r0, r2
   159e4:	subs	r4, r4, r0
   159e8:	add	r1, lr, r1
   159ec:	sbc	ip, ip, r1
   159f0:	adds	r0, r4, r4
   159f4:	adc	r1, ip, ip
   159f8:	mul	ip, r4, ip
   159fc:	umull	r4, r5, r4, r4
   15a00:	add	r5, r5, ip, lsl #1
   15a04:	mul	ip, r4, r3
   15a08:	mla	ip, r2, r5, ip
   15a0c:	umull	r4, r5, r4, r2
   15a10:	subs	r0, r0, r4
   15a14:	add	r5, ip, r5
   15a18:	sbc	r1, r1, r5
   15a1c:	adds	ip, r0, r0
   15a20:	adc	lr, r1, r1
   15a24:	mul	r4, r0, r1
   15a28:	umull	r0, r1, r0, r0
   15a2c:	add	r1, r1, r4, lsl #1
   15a30:	mul	r4, r0, r3
   15a34:	mla	r4, r2, r1, r4
   15a38:	umull	r0, r1, r0, r2
   15a3c:	subs	ip, ip, r0
   15a40:	add	r1, r4, r1
   15a44:	sbc	lr, lr, r1
   15a48:	ldr	r1, [sp, #16]
   15a4c:	cmp	r9, r3
   15a50:	cmpeq	r8, r2
   15a54:	mul	r0, r1, lr
   15a58:	ldr	r1, [sp, #20]
   15a5c:	mla	r0, ip, r1, r0
   15a60:	ldr	r1, [sp, #16]
   15a64:	umull	r4, r5, r1, ip
   15a68:	add	r0, r0, r5
   15a6c:	mov	r5, r0
   15a70:	bcc	15afc <__assert_fail@plt+0x431c>
   15a74:	umull	sl, fp, r0, r2
   15a78:	umull	r0, r1, r0, r3
   15a7c:	strd	sl, [sp, #96]	; 0x60
   15a80:	umlal	sl, fp, r4, r3
   15a84:	umull	r2, r3, r2, r4
   15a88:	strd	sl, [sp, #112]	; 0x70
   15a8c:	ldr	sl, [sp, #112]	; 0x70
   15a90:	mov	r2, r3
   15a94:	mov	r3, #0
   15a98:	adds	r2, r2, sl
   15a9c:	str	r2, [sp, #80]	; 0x50
   15aa0:	ldr	r2, [sp, #116]	; 0x74
   15aa4:	adc	r3, r3, r2
   15aa8:	str	r3, [sp, #84]	; 0x54
   15aac:	ldrd	sl, [sp, #80]	; 0x50
   15ab0:	ldrd	r2, [sp, #96]	; 0x60
   15ab4:	cmp	r3, fp
   15ab8:	cmpeq	r2, sl
   15abc:	bls	15ac8 <__assert_fail@plt+0x42e8>
   15ac0:	adds	r0, r0, #0
   15ac4:	adc	r1, r1, #1
   15ac8:	ldr	r2, [sp, #84]	; 0x54
   15acc:	mov	r3, #0
   15ad0:	strd	r4, [sp, #192]	; 0xc0
   15ad4:	subs	r2, r8, r2
   15ad8:	sbc	r3, r9, r3
   15adc:	subs	r2, r2, r0
   15ae0:	sbc	r3, r3, r1
   15ae4:	mul	lr, r2, lr
   15ae8:	mla	lr, ip, r3, lr
   15aec:	umull	r2, r3, r2, ip
   15af0:	add	r3, lr, r3
   15af4:	strd	r2, [sp, #200]	; 0xc8
   15af8:	b	157c4 <__assert_fail@plt+0x3fe4>
   15afc:	mov	r2, #0
   15b00:	mov	r3, #0
   15b04:	strd	r4, [sp, #192]	; 0xc0
   15b08:	strd	r2, [sp, #200]	; 0xc8
   15b0c:	b	157c4 <__assert_fail@plt+0x3fe4>
   15b10:	cmp	r0, #0
   15b14:	beq	15844 <__assert_fail@plt+0x4064>
   15b18:	b	15200 <__assert_fail@plt+0x3a20>
   15b1c:	mov	r4, #64	; 0x40
   15b20:	mov	r0, #0
   15b24:	ldrd	r2, [sp, #40]	; 0x28
   15b28:	mov	r1, #0
   15b2c:	b	15890 <__assert_fail@plt+0x40b0>
   15b30:	ldrdeq	sl, [r1], -r8
   15b34:	andeq	fp, r1, r4, ror r1
   15b38:	andeq	lr, r1, r0, asr #32
   15b3c:	mov	r3, #0
   15b40:	str	r3, [r1]
   15b44:	str	r3, [r1, #4]
   15b48:	str	r3, [r1, #8]
   15b4c:	ldr	r3, [r0, #4]
   15b50:	cmp	r3, #0
   15b54:	bxeq	lr
   15b58:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15b5c:	mov	r8, r1
   15b60:	sub	sp, sp, #28
   15b64:	mov	r4, r0
   15b68:	ldr	r3, [pc, #360]	; 15cd8 <__assert_fail@plt+0x44f8>
   15b6c:	ldrb	r2, [r3, #8]
   15b70:	mov	r7, r3
   15b74:	cmp	r2, #0
   15b78:	beq	15b8c <__assert_fail@plt+0x43ac>
   15b7c:	ldr	r3, [pc, #344]	; 15cdc <__assert_fail@plt+0x44fc>
   15b80:	ldr	r0, [pc, #344]	; 15ce0 <__assert_fail@plt+0x4500>
   15b84:	ldr	r1, [r3]
   15b88:	bl	117b0 <fputs@plt>
   15b8c:	mov	r0, sp
   15b90:	bl	1178c <__gmpz_init@plt>
   15b94:	mov	r1, #0
   15b98:	mov	r0, r4
   15b9c:	bl	113e4 <__gmpz_scan1@plt>
   15ba0:	mov	r5, r0
   15ba4:	mov	r2, r0
   15ba8:	mov	r1, r4
   15bac:	mov	r0, r4
   15bb0:	bl	11570 <__gmpz_fdiv_q_2exp@plt>
   15bb4:	cmp	r5, #0
   15bb8:	bne	15c68 <__assert_fail@plt+0x4488>
   15bbc:	ldr	sl, [pc, #288]	; 15ce4 <__assert_fail@plt+0x4504>
   15bc0:	mov	r6, #1
   15bc4:	mov	r5, #3
   15bc8:	movw	r9, #669	; 0x29d
   15bcc:	mov	r1, r5
   15bd0:	mov	r0, r4
   15bd4:	bl	11654 <__gmpz_divisible_ui_p@plt>
   15bd8:	cmp	r0, #0
   15bdc:	bne	15c90 <__assert_fail@plt+0x44b0>
   15be0:	ldrb	r3, [sl, r6]
   15be4:	mov	r0, r4
   15be8:	add	fp, r6, #1
   15bec:	add	r5, r5, r3
   15bf0:	mul	r1, r5, r5
   15bf4:	bl	11780 <__gmpz_cmp_ui@plt>
   15bf8:	cmp	r0, #0
   15bfc:	blt	15c0c <__assert_fail@plt+0x442c>
   15c00:	mov	r6, fp
   15c04:	cmp	r6, r9
   15c08:	bne	15bcc <__assert_fail@plt+0x43ec>
   15c0c:	mov	r0, sp
   15c10:	bl	11660 <__gmpz_clear@plt>
   15c14:	mov	r1, #1
   15c18:	mov	r0, r4
   15c1c:	bl	11780 <__gmpz_cmp_ui@plt>
   15c20:	cmp	r0, #0
   15c24:	beq	15c60 <__assert_fail@plt+0x4480>
   15c28:	ldrb	r3, [r7, #8]
   15c2c:	cmp	r3, #0
   15c30:	beq	15c44 <__assert_fail@plt+0x4464>
   15c34:	ldr	r3, [pc, #160]	; 15cdc <__assert_fail@plt+0x44fc>
   15c38:	ldr	r0, [pc, #168]	; 15ce8 <__assert_fail@plt+0x4508>
   15c3c:	ldr	r1, [r3]
   15c40:	bl	117b0 <fputs@plt>
   15c44:	mov	r0, r4
   15c48:	bl	15cec <__assert_fail@plt+0x450c>
   15c4c:	cmp	r0, #0
   15c50:	beq	15cc4 <__assert_fail@plt+0x44e4>
   15c54:	mov	r1, r4
   15c58:	mov	r0, r8
   15c5c:	bl	12bd0 <__assert_fail@plt+0x13f0>
   15c60:	add	sp, sp, #28
   15c64:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15c68:	mov	r1, #2
   15c6c:	add	r0, sp, #12
   15c70:	bl	11720 <__gmpz_init_set_ui@plt>
   15c74:	add	r1, sp, #12
   15c78:	mov	r0, r8
   15c7c:	bl	12bd0 <__assert_fail@plt+0x13f0>
   15c80:	add	r0, sp, #12
   15c84:	sub	r5, r5, #1
   15c88:	bl	11660 <__gmpz_clear@plt>
   15c8c:	b	15bb4 <__assert_fail@plt+0x43d4>
   15c90:	mov	r2, r5
   15c94:	mov	r1, r4
   15c98:	mov	r0, r4
   15c9c:	bl	1151c <__gmpz_tdiv_q_ui@plt>
   15ca0:	mov	r1, r5
   15ca4:	add	r0, sp, #12
   15ca8:	bl	11720 <__gmpz_init_set_ui@plt>
   15cac:	mov	r0, r8
   15cb0:	add	r1, sp, #12
   15cb4:	bl	12bd0 <__assert_fail@plt+0x13f0>
   15cb8:	add	r0, sp, #12
   15cbc:	bl	11660 <__gmpz_clear@plt>
   15cc0:	b	15c04 <__assert_fail@plt+0x4424>
   15cc4:	mov	r2, r8
   15cc8:	mov	r1, #1
   15ccc:	mov	r0, r4
   15cd0:	bl	15ed4 <__assert_fail@plt+0x46f4>
   15cd4:	b	15c60 <__assert_fail@plt+0x4480>
   15cd8:	andeq	pc, r2, ip, ror #3
   15cdc:	ldrdeq	pc, [r2], -r8
   15ce0:	andeq	lr, r1, r2, lsl #1
   15ce4:	ldrdeq	sl, [r1], -r8
   15ce8:	muleq	r1, r4, r0
   15cec:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15cf0:	mov	r1, #1
   15cf4:	sub	sp, sp, #76	; 0x4c
   15cf8:	mov	r8, r0
   15cfc:	bl	11780 <__gmpz_cmp_ui@plt>
   15d00:	cmp	r0, #0
   15d04:	ble	15eb8 <__assert_fail@plt+0x46d8>
   15d08:	ldr	r1, [pc, #440]	; 15ec8 <__assert_fail@plt+0x46e8>
   15d0c:	mov	r0, r8
   15d10:	bl	11780 <__gmpz_cmp_ui@plt>
   15d14:	cmp	r0, #0
   15d18:	blt	15ec0 <__assert_fail@plt+0x46e0>
   15d1c:	mov	r4, #0
   15d20:	add	r5, sp, #12
   15d24:	add	r3, sp, #48	; 0x30
   15d28:	add	r2, sp, #36	; 0x24
   15d2c:	add	r1, sp, #24
   15d30:	mov	r0, r5
   15d34:	str	r4, [sp]
   15d38:	bl	114ec <__gmpz_inits@plt>
   15d3c:	mov	r2, #1
   15d40:	mov	r1, r8
   15d44:	add	r0, sp, #36	; 0x24
   15d48:	bl	11420 <__gmpz_sub_ui@plt>
   15d4c:	mov	r1, r4
   15d50:	add	r0, sp, #36	; 0x24
   15d54:	bl	113e4 <__gmpz_scan1@plt>
   15d58:	mov	r2, r0
   15d5c:	mov	r9, r0
   15d60:	add	r1, sp, #36	; 0x24
   15d64:	mov	r0, r5
   15d68:	bl	116a8 <__gmpz_tdiv_q_2exp@plt>
   15d6c:	mov	r1, #2
   15d70:	add	r0, sp, #24
   15d74:	bl	11450 <__gmpz_set_ui@plt>
   15d78:	add	r3, sp, #48	; 0x30
   15d7c:	add	r2, sp, #24
   15d80:	stm	sp, {r5, r9}
   15d84:	add	r1, sp, #36	; 0x24
   15d88:	mov	r0, r8
   15d8c:	bl	132a8 <__assert_fail@plt+0x1ac8>
   15d90:	subs	r7, r0, #0
   15d94:	beq	15e90 <__assert_fail@plt+0x46b0>
   15d98:	ldr	sl, [pc, #300]	; 15ecc <__assert_fail@plt+0x46ec>
   15d9c:	add	r1, sp, #36	; 0x24
   15da0:	add	r0, sp, #48	; 0x30
   15da4:	bl	114f8 <__gmpz_set@plt>
   15da8:	mov	fp, #12
   15dac:	add	r1, sp, #60	; 0x3c
   15db0:	add	r0, sp, #48	; 0x30
   15db4:	bl	15b3c <__assert_fail@plt+0x435c>
   15db8:	mov	r5, r7
   15dbc:	mov	r6, #0
   15dc0:	b	15e04 <__assert_fail@plt+0x4624>
   15dc4:	ldr	r2, [sp, #60]	; 0x3c
   15dc8:	add	r1, sp, #36	; 0x24
   15dcc:	add	r0, sp, #48	; 0x30
   15dd0:	mla	r2, fp, r6, r2
   15dd4:	add	r6, r6, #1
   15dd8:	bl	114e0 <__gmpz_divexact@plt>
   15ddc:	add	r2, sp, #48	; 0x30
   15de0:	mov	r3, r8
   15de4:	mov	r0, r2
   15de8:	add	r1, sp, #24
   15dec:	bl	114c8 <__gmpz_powm@plt>
   15df0:	mov	r1, #1
   15df4:	add	r0, sp, #48	; 0x30
   15df8:	bl	11780 <__gmpz_cmp_ui@plt>
   15dfc:	adds	r5, r0, #0
   15e00:	movne	r5, #1
   15e04:	ldr	r3, [sp, #68]	; 0x44
   15e08:	cmp	r6, r3
   15e0c:	bcs	15e7c <__assert_fail@plt+0x469c>
   15e10:	cmp	r5, #0
   15e14:	bne	15dc4 <__assert_fail@plt+0x45e4>
   15e18:	add	r1, sp, #24
   15e1c:	ldrb	r2, [sl], #1
   15e20:	mov	r0, r1
   15e24:	bl	115f4 <__gmpz_add_ui@plt>
   15e28:	add	r3, sp, #12
   15e2c:	add	r2, sp, #24
   15e30:	add	r1, sp, #36	; 0x24
   15e34:	mov	r0, r8
   15e38:	stm	sp, {r3, r9}
   15e3c:	add	r3, sp, #48	; 0x30
   15e40:	bl	132a8 <__assert_fail@plt+0x1ac8>
   15e44:	subs	r5, r0, #0
   15e48:	beq	15e84 <__assert_fail@plt+0x46a4>
   15e4c:	add	r4, r4, #1
   15e50:	cmp	r4, #668	; 0x29c
   15e54:	bne	15db8 <__assert_fail@plt+0x45d8>
   15e58:	mov	r2, #5
   15e5c:	ldr	r1, [pc, #108]	; 15ed0 <__assert_fail@plt+0x46f0>
   15e60:	mov	r0, #0
   15e64:	bl	114bc <dcgettext@plt>
   15e68:	mov	r1, #0
   15e6c:	mov	r2, r0
   15e70:	mov	r0, r1
   15e74:	bl	115ac <error@plt>
   15e78:	bl	117c8 <abort@plt>
   15e7c:	cmp	r5, #0
   15e80:	beq	15e18 <__assert_fail@plt+0x4638>
   15e84:	add	r0, sp, #60	; 0x3c
   15e88:	mov	r7, r5
   15e8c:	bl	11f5c <__assert_fail@plt+0x77c>
   15e90:	mov	r3, #0
   15e94:	add	r2, sp, #36	; 0x24
   15e98:	add	r1, sp, #24
   15e9c:	add	r0, sp, #12
   15ea0:	str	r3, [sp]
   15ea4:	add	r3, sp, #48	; 0x30
   15ea8:	bl	1142c <__gmpz_clears@plt>
   15eac:	mov	r0, r7
   15eb0:	add	sp, sp, #76	; 0x4c
   15eb4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15eb8:	mov	r7, #0
   15ebc:	b	15eac <__assert_fail@plt+0x46cc>
   15ec0:	mov	r7, #1
   15ec4:	b	15eac <__assert_fail@plt+0x46cc>
   15ec8:	cmneq	sp, r9, ror sp
   15ecc:	ldrdeq	sl, [r1], -r8
   15ed0:	andeq	lr, r1, r0, asr #32
   15ed4:	ldr	r3, [pc, #800]	; 161fc <__assert_fail@plt+0x4a1c>
   15ed8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15edc:	sub	sp, sp, #116	; 0x74
   15ee0:	mov	r5, r0
   15ee4:	mov	r7, r1
   15ee8:	str	r2, [sp, #20]
   15eec:	ldrb	r3, [r3, #8]
   15ef0:	cmp	r3, #0
   15ef4:	beq	15f10 <__assert_fail@plt+0x4730>
   15ef8:	ldr	r0, [pc, #768]	; 16200 <__assert_fail@plt+0x4a20>
   15efc:	mov	r3, r1
   15f00:	mov	r1, #1
   15f04:	ldr	r2, [pc, #760]	; 16204 <__assert_fail@plt+0x4a24>
   15f08:	ldr	r0, [r0]
   15f0c:	bl	116d8 <__fprintf_chk@plt>
   15f10:	mov	r2, #0
   15f14:	add	r1, sp, #100	; 0x64
   15f18:	add	r0, sp, #88	; 0x58
   15f1c:	mov	r8, #1
   15f20:	bl	114ec <__gmpz_inits@plt>
   15f24:	mov	r1, #2
   15f28:	add	r0, sp, #64	; 0x40
   15f2c:	bl	115e8 <__gmpz_init_set_si@plt>
   15f30:	mov	r1, #2
   15f34:	add	r0, sp, #40	; 0x28
   15f38:	bl	115e8 <__gmpz_init_set_si@plt>
   15f3c:	mov	r9, #0
   15f40:	mov	r1, #2
   15f44:	add	r0, sp, #52	; 0x34
   15f48:	mov	sl, r8
   15f4c:	bl	115e8 <__gmpz_init_set_si@plt>
   15f50:	mov	fp, r9
   15f54:	mov	r1, #1
   15f58:	add	r0, sp, #76	; 0x4c
   15f5c:	bl	11720 <__gmpz_init_set_ui@plt>
   15f60:	mov	r1, #1
   15f64:	mov	r0, r5
   15f68:	bl	11780 <__gmpz_cmp_ui@plt>
   15f6c:	cmp	r0, #0
   15f70:	beq	16184 <__assert_fail@plt+0x49a4>
   15f74:	add	r4, sp, #88	; 0x58
   15f78:	add	r6, sp, #52	; 0x34
   15f7c:	add	r2, sp, #40	; 0x28
   15f80:	mov	r0, r4
   15f84:	mov	r1, r2
   15f88:	bl	11510 <__gmpz_mul@plt>
   15f8c:	mov	r2, r5
   15f90:	mov	r1, r4
   15f94:	add	r0, sp, #40	; 0x28
   15f98:	bl	11714 <__gmpz_mod@plt>
   15f9c:	add	r1, sp, #40	; 0x28
   15fa0:	mov	r2, r7
   15fa4:	mov	r0, r1
   15fa8:	bl	115f4 <__gmpz_add_ui@plt>
   15fac:	add	r2, sp, #40	; 0x28
   15fb0:	mov	r1, r6
   15fb4:	mov	r0, r4
   15fb8:	bl	11480 <__gmpz_sub@plt>
   15fbc:	mov	r2, r4
   15fc0:	add	r1, sp, #76	; 0x4c
   15fc4:	add	r0, sp, #100	; 0x64
   15fc8:	bl	11510 <__gmpz_mul@plt>
   15fcc:	mov	r2, r5
   15fd0:	add	r1, sp, #100	; 0x64
   15fd4:	add	r0, sp, #76	; 0x4c
   15fd8:	bl	11714 <__gmpz_mod@plt>
   15fdc:	and	r3, sl, #31
   15fe0:	str	r3, [sp, #24]
   15fe4:	mov	r3, #0
   15fe8:	str	r3, [sp, #28]
   15fec:	ldrd	r2, [sp, #24]
   15ff0:	cmp	r3, #0
   15ff4:	cmpeq	r2, #1
   15ff8:	bne	1602c <__assert_fail@plt+0x484c>
   15ffc:	mov	r2, r5
   16000:	add	r1, sp, #76	; 0x4c
   16004:	mov	r0, r4
   16008:	bl	1175c <__gmpz_gcd@plt>
   1600c:	mov	r1, #1
   16010:	mov	r0, r4
   16014:	bl	11780 <__gmpz_cmp_ui@plt>
   16018:	cmp	r0, #0
   1601c:	bne	160b4 <__assert_fail@plt+0x48d4>
   16020:	add	r1, sp, #40	; 0x28
   16024:	add	r0, sp, #64	; 0x40
   16028:	bl	114f8 <__gmpz_set@plt>
   1602c:	subs	sl, sl, #1
   16030:	sbc	fp, fp, #0
   16034:	orrs	r3, sl, fp
   16038:	bne	15f7c <__assert_fail@plt+0x479c>
   1603c:	add	r1, sp, #40	; 0x28
   16040:	mov	r0, r6
   16044:	bl	114f8 <__gmpz_set@plt>
   16048:	adds	r3, r8, r8
   1604c:	str	r3, [sp, #32]
   16050:	adc	r3, r9, r9
   16054:	str	r3, [sp, #36]	; 0x24
   16058:	cmp	fp, r9
   1605c:	cmpeq	sl, r8
   16060:	bne	16078 <__assert_fail@plt+0x4898>
   16064:	add	r1, sp, #40	; 0x28
   16068:	add	r0, sp, #64	; 0x40
   1606c:	bl	114f8 <__gmpz_set@plt>
   16070:	ldrd	r8, [sp, #32]
   16074:	b	15f7c <__assert_fail@plt+0x479c>
   16078:	add	r2, sp, #40	; 0x28
   1607c:	mov	r0, r4
   16080:	mov	r1, r2
   16084:	bl	11510 <__gmpz_mul@plt>
   16088:	mov	r2, r5
   1608c:	mov	r1, r4
   16090:	add	r0, sp, #40	; 0x28
   16094:	bl	11714 <__gmpz_mod@plt>
   16098:	add	r1, sp, #40	; 0x28
   1609c:	mov	r2, r7
   160a0:	mov	r0, r1
   160a4:	bl	115f4 <__gmpz_add_ui@plt>
   160a8:	adds	sl, sl, #1
   160ac:	adc	fp, fp, #0
   160b0:	b	16058 <__assert_fail@plt+0x4878>
   160b4:	add	r2, sp, #64	; 0x40
   160b8:	mov	r0, r4
   160bc:	mov	r1, r2
   160c0:	bl	11510 <__gmpz_mul@plt>
   160c4:	mov	r2, r5
   160c8:	mov	r1, r4
   160cc:	add	r0, sp, #64	; 0x40
   160d0:	bl	11714 <__gmpz_mod@plt>
   160d4:	add	r1, sp, #64	; 0x40
   160d8:	mov	r2, r7
   160dc:	mov	r0, r1
   160e0:	bl	115f4 <__gmpz_add_ui@plt>
   160e4:	add	r2, sp, #64	; 0x40
   160e8:	mov	r1, r6
   160ec:	mov	r0, r4
   160f0:	bl	11480 <__gmpz_sub@plt>
   160f4:	mov	r2, r5
   160f8:	mov	r1, r4
   160fc:	mov	r0, r4
   16100:	bl	1175c <__gmpz_gcd@plt>
   16104:	mov	r1, #1
   16108:	mov	r0, r4
   1610c:	bl	11780 <__gmpz_cmp_ui@plt>
   16110:	cmp	r0, #0
   16114:	beq	160b4 <__assert_fail@plt+0x48d4>
   16118:	mov	r2, r4
   1611c:	mov	r1, r5
   16120:	mov	r0, r5
   16124:	bl	114e0 <__gmpz_divexact@plt>
   16128:	mov	r0, r4
   1612c:	bl	15cec <__assert_fail@plt+0x450c>
   16130:	cmp	r0, #0
   16134:	bne	161b8 <__assert_fail@plt+0x49d8>
   16138:	ldr	r3, [pc, #188]	; 161fc <__assert_fail@plt+0x4a1c>
   1613c:	ldrb	r3, [r3, #8]
   16140:	cmp	r3, #0
   16144:	beq	16158 <__assert_fail@plt+0x4978>
   16148:	ldr	r3, [pc, #176]	; 16200 <__assert_fail@plt+0x4a20>
   1614c:	ldr	r0, [pc, #180]	; 16208 <__assert_fail@plt+0x4a28>
   16150:	ldr	r1, [r3]
   16154:	bl	117b0 <fputs@plt>
   16158:	add	r1, r7, #1
   1615c:	mov	r0, r4
   16160:	ldr	r2, [sp, #20]
   16164:	bl	15ed4 <__assert_fail@plt+0x46f4>
   16168:	mov	r0, r5
   1616c:	bl	15cec <__assert_fail@plt+0x450c>
   16170:	cmp	r0, #0
   16174:	beq	161c8 <__assert_fail@plt+0x49e8>
   16178:	mov	r1, r5
   1617c:	ldr	r0, [sp, #20]
   16180:	bl	12bd0 <__assert_fail@plt+0x13f0>
   16184:	mov	r3, #0
   16188:	add	r2, sp, #88	; 0x58
   1618c:	add	r1, sp, #100	; 0x64
   16190:	add	r0, sp, #76	; 0x4c
   16194:	str	r3, [sp, #8]
   16198:	add	r3, sp, #64	; 0x40
   1619c:	str	r3, [sp, #4]
   161a0:	add	r3, sp, #40	; 0x28
   161a4:	str	r3, [sp]
   161a8:	add	r3, sp, #52	; 0x34
   161ac:	bl	1142c <__gmpz_clears@plt>
   161b0:	add	sp, sp, #116	; 0x74
   161b4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   161b8:	mov	r1, r4
   161bc:	ldr	r0, [sp, #20]
   161c0:	bl	12bd0 <__assert_fail@plt+0x13f0>
   161c4:	b	16168 <__assert_fail@plt+0x4988>
   161c8:	add	r1, sp, #40	; 0x28
   161cc:	mov	r2, r5
   161d0:	mov	r0, r1
   161d4:	bl	11714 <__gmpz_mod@plt>
   161d8:	mov	r2, r5
   161dc:	mov	r1, r6
   161e0:	mov	r0, r6
   161e4:	bl	11714 <__gmpz_mod@plt>
   161e8:	add	r1, sp, #64	; 0x40
   161ec:	mov	r2, r5
   161f0:	mov	r0, r1
   161f4:	bl	11714 <__gmpz_mod@plt>
   161f8:	b	15f60 <__assert_fail@plt+0x4780>
   161fc:	andeq	pc, r2, ip, ror #3
   16200:	ldrdeq	pc, [r2], -r8
   16204:	andeq	lr, r1, r8, lsr #1
   16208:	strheq	lr, [r1], -sp
   1620c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16210:	mov	r3, r0
   16214:	sub	sp, sp, #300	; 0x12c
   16218:	mov	sl, r0
   1621c:	mov	r8, r3
   16220:	ldrb	r2, [r3], #1
   16224:	cmp	r2, #32
   16228:	beq	1621c <__assert_fail@plt+0x4a3c>
   1622c:	cmp	r2, #43	; 0x2b
   16230:	addeq	r8, r8, #1
   16234:	mov	r3, #4
   16238:	mov	r1, r8
   1623c:	ldrb	r2, [r1], #1
   16240:	cmp	r2, #0
   16244:	beq	163ac <__assert_fail@plt+0x4bcc>
   16248:	sub	r2, r2, #48	; 0x30
   1624c:	mov	r3, #0
   16250:	cmp	r2, #9
   16254:	bls	1623c <__assert_fail@plt+0x4a5c>
   16258:	mov	r2, #5
   1625c:	ldr	r1, [pc, #924]	; 16600 <__assert_fail@plt+0x4e20>
   16260:	mov	r0, #0
   16264:	bl	114bc <dcgettext@plt>
   16268:	mov	r4, r0
   1626c:	mov	r0, sl
   16270:	bl	185a4 <__assert_fail@plt+0x6dc4>
   16274:	mov	r1, #0
   16278:	mov	r3, r0
   1627c:	mov	r2, r4
   16280:	mov	r0, r1
   16284:	bl	115ac <error@plt>
   16288:	mov	r0, #0
   1628c:	add	sp, sp, #300	; 0x12c
   16290:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16294:	add	r3, pc, #860	; 0x35c
   16298:	ldrd	r2, [r3]
   1629c:	sub	r0, r0, #48	; 0x30
   162a0:	cmp	r7, r3
   162a4:	cmpeq	r6, r2
   162a8:	bhi	16330 <__assert_fail@plt+0x4b50>
   162ac:	ldr	r2, [sp, #12]
   162b0:	lsr	r3, r5, #31
   162b4:	mov	r1, #0
   162b8:	add	r3, r3, r5, lsr #29
   162bc:	umull	sl, fp, r2, ip
   162c0:	adds	r2, r2, r2
   162c4:	str	r2, [sp, #16]
   162c8:	adc	r2, r5, r5
   162cc:	mla	fp, ip, r5, fp
   162d0:	str	r2, [sp, #20]
   162d4:	ldrd	r4, [sp, #16]
   162d8:	cmp	fp, r5
   162dc:	cmpeq	sl, r4
   162e0:	movcc	r2, #1
   162e4:	movcs	r2, #0
   162e8:	adds	r4, sl, r0
   162ec:	add	r3, r2, r3
   162f0:	adcs	r5, fp, r1
   162f4:	umull	r0, r1, r6, r9
   162f8:	mov	sl, #0
   162fc:	movcs	r2, #1
   16300:	movcc	r2, #0
   16304:	str	r4, [sp, #12]
   16308:	add	r2, r2, r3
   1630c:	mov	r3, #0
   16310:	mla	r1, r9, r7, r1
   16314:	adds	r6, r0, r2
   16318:	mov	fp, #0
   1631c:	adcs	r7, r1, r3
   16320:	movcs	sl, #1
   16324:	movcs	fp, #0
   16328:	orrs	r3, sl, fp
   1632c:	beq	163d4 <__assert_fail@plt+0x4bf4>
   16330:	ldr	r3, [pc, #716]	; 16604 <__assert_fail@plt+0x4e24>
   16334:	ldrb	r3, [r3, #8]
   16338:	cmp	r3, #0
   1633c:	beq	16350 <__assert_fail@plt+0x4b70>
   16340:	ldr	r3, [pc, #704]	; 16608 <__assert_fail@plt+0x4e28>
   16344:	ldr	r0, [pc, #704]	; 1660c <__assert_fail@plt+0x4e2c>
   16348:	ldr	r1, [r3]
   1634c:	bl	117b0 <fputs@plt>
   16350:	ldr	r4, [pc, #696]	; 16610 <__assert_fail@plt+0x4e30>
   16354:	mov	r1, r8
   16358:	mov	r2, #10
   1635c:	add	r0, sp, #28
   16360:	mov	r6, #0
   16364:	bl	11768 <__gmpz_init_set_str@plt>
   16368:	mov	r1, #10
   1636c:	add	r2, sp, #28
   16370:	mov	r8, #12
   16374:	ldr	r0, [r4]
   16378:	bl	11540 <__gmpz_out_str@plt>
   1637c:	mov	r0, #58	; 0x3a
   16380:	bl	117d4 <putchar_unlocked@plt>
   16384:	add	r1, sp, #40	; 0x28
   16388:	add	r0, sp, #28
   1638c:	bl	15b3c <__assert_fail@plt+0x435c>
   16390:	ldr	r3, [sp, #48]	; 0x30
   16394:	cmp	r3, r6
   16398:	bls	165d0 <__assert_fail@plt+0x4df0>
   1639c:	lsl	r9, r6, #2
   163a0:	mov	r5, #0
   163a4:	mul	r7, r8, r6
   163a8:	b	165b8 <__assert_fail@plt+0x4dd8>
   163ac:	mov	r2, #0
   163b0:	mov	ip, #10
   163b4:	cmp	r3, r2
   163b8:	mov	lr, r8
   163bc:	mov	r5, r2
   163c0:	mov	r6, r2
   163c4:	str	r2, [sp, #12]
   163c8:	mov	r7, r2
   163cc:	mov	r9, ip
   163d0:	bne	16258 <__assert_fail@plt+0x4a78>
   163d4:	ldrb	r0, [lr], #1
   163d8:	cmp	r0, #0
   163dc:	bne	16294 <__assert_fail@plt+0x4ab4>
   163e0:	bic	r3, r7, #-2147483648	; 0x80000000
   163e4:	cmp	r3, r7
   163e8:	cmpeq	r6, r6
   163ec:	bne	16330 <__assert_fail@plt+0x4b50>
   163f0:	ldr	r8, [pc, #524]	; 16604 <__assert_fail@plt+0x4e24>
   163f4:	ldrb	r3, [r8, #8]
   163f8:	cmp	r3, #0
   163fc:	beq	16410 <__assert_fail@plt+0x4c30>
   16400:	ldr	r3, [pc, #512]	; 16608 <__assert_fail@plt+0x4e28>
   16404:	ldr	r0, [pc, #520]	; 16614 <__assert_fail@plt+0x4e34>
   16408:	ldr	r1, [r3]
   1640c:	bl	117b0 <fputs@plt>
   16410:	mov	r3, r5
   16414:	mov	r0, r6
   16418:	ldr	r2, [sp, #12]
   1641c:	mov	r1, r7
   16420:	add	r9, sp, #40	; 0x28
   16424:	bl	13168 <__assert_fail@plt+0x1988>
   16428:	ldr	r3, [r8, #4]
   1642c:	mov	r0, r6
   16430:	mov	r1, r7
   16434:	mov	r4, #0
   16438:	mov	sl, #32
   1643c:	add	r6, sp, #264	; 0x108
   16440:	add	r2, r3, #1
   16444:	str	r2, [r8, #4]
   16448:	mov	r2, #58	; 0x3a
   1644c:	strb	r2, [r3]
   16450:	mov	r3, r5
   16454:	add	r5, sp, #56	; 0x38
   16458:	str	r9, [sp]
   1645c:	ldr	r2, [sp, #12]
   16460:	bl	13f5c <__assert_fail@plt+0x277c>
   16464:	ldrb	r3, [sp, #290]	; 0x122
   16468:	cmp	r4, r3
   1646c:	bcc	1653c <__assert_fail@plt+0x4d5c>
   16470:	ldrd	r2, [r9, #8]
   16474:	orrs	r3, r2, r3
   16478:	beq	1649c <__assert_fail@plt+0x4cbc>
   1647c:	ldr	r3, [r8, #4]
   16480:	add	r2, r3, #1
   16484:	str	r2, [r8, #4]
   16488:	mov	r2, #32
   1648c:	strb	r2, [r3]
   16490:	ldrd	r2, [r9]
   16494:	ldrd	r0, [r9, #8]
   16498:	bl	13168 <__assert_fail@plt+0x1988>
   1649c:	ldr	r6, [pc, #372]	; 16618 <__assert_fail@plt+0x4e38>
   164a0:	mov	r2, #10
   164a4:	ldr	r4, [r8]
   164a8:	ldr	r3, [r8, #4]
   164ac:	add	r5, r3, #1
   164b0:	strb	r2, [r3]
   164b4:	ldr	r3, [r6]
   164b8:	str	r5, [r8, #4]
   164bc:	cmn	r3, #1
   164c0:	bne	164e8 <__assert_fail@plt+0x4d08>
   164c4:	mov	r0, #0
   164c8:	bl	117a4 <isatty@plt>
   164cc:	cmp	r0, #0
   164d0:	mov	r0, #1
   164d4:	bne	164e4 <__assert_fail@plt+0x4d04>
   164d8:	bl	117a4 <isatty@plt>
   164dc:	adds	r0, r0, #0
   164e0:	movne	r0, #1
   164e4:	str	r0, [r6]
   164e8:	ldr	r3, [r6]
   164ec:	cmp	r3, #0
   164f0:	beq	16544 <__assert_fail@plt+0x4d64>
   164f4:	bl	12ce0 <__assert_fail@plt+0x1500>
   164f8:	mov	r0, #1
   164fc:	b	1628c <__assert_fail@plt+0x4aac>
   16500:	mov	r2, #0
   16504:	strb	sl, [r3]
   16508:	add	r7, r7, #1
   1650c:	str	r1, [r8, #4]
   16510:	ldrd	r0, [r5]
   16514:	bl	12b54 <__assert_fail@plt+0x1374>
   16518:	ldrb	r2, [r6]
   1651c:	ldr	r3, [r8, #4]
   16520:	cmp	r7, r2
   16524:	add	r1, r3, #1
   16528:	bcc	16500 <__assert_fail@plt+0x4d20>
   1652c:	add	r4, r4, #1
   16530:	add	r6, r6, #1
   16534:	add	r5, r5, #8
   16538:	b	16464 <__assert_fail@plt+0x4c84>
   1653c:	mov	r7, #0
   16540:	b	16518 <__assert_fail@plt+0x4d38>
   16544:	sub	r3, r5, r4
   16548:	cmp	r3, #512	; 0x200
   1654c:	addcs	r4, r4, #512	; 0x200
   16550:	bcc	164f8 <__assert_fail@plt+0x4d18>
   16554:	ldrb	r3, [r4, #-1]
   16558:	sub	r2, r4, #1
   1655c:	cmp	r3, #10
   16560:	bne	16590 <__assert_fail@plt+0x4db0>
   16564:	str	r4, [r8, #4]
   16568:	sub	r5, r5, r4
   1656c:	bl	12ce0 <__assert_fail@plt+0x1500>
   16570:	ldr	r3, [r8]
   16574:	mov	r2, r5
   16578:	mov	r1, r4
   1657c:	mov	r0, r3
   16580:	bl	11474 <memcpy@plt>
   16584:	add	r5, r0, r5
   16588:	str	r5, [r8, #4]
   1658c:	b	164f8 <__assert_fail@plt+0x4d18>
   16590:	mov	r4, r2
   16594:	b	16554 <__assert_fail@plt+0x4d74>
   16598:	mov	r0, #32
   1659c:	add	r5, r5, #1
   165a0:	bl	117d4 <putchar_unlocked@plt>
   165a4:	ldr	r2, [sp, #40]	; 0x28
   165a8:	mov	r1, #10
   165ac:	ldr	r0, [r4]
   165b0:	add	r2, r2, r7
   165b4:	bl	11540 <__gmpz_out_str@plt>
   165b8:	ldr	r3, [sp, #44]	; 0x2c
   165bc:	ldr	r3, [r3, r9]
   165c0:	cmp	r3, r5
   165c4:	bhi	16598 <__assert_fail@plt+0x4db8>
   165c8:	add	r6, r6, #1
   165cc:	b	16390 <__assert_fail@plt+0x4bb0>
   165d0:	add	r0, sp, #40	; 0x28
   165d4:	bl	11f5c <__assert_fail@plt+0x77c>
   165d8:	add	r0, sp, #28
   165dc:	bl	11660 <__gmpz_clear@plt>
   165e0:	mov	r0, #10
   165e4:	bl	117d4 <putchar_unlocked@plt>
   165e8:	ldr	r0, [r4]
   165ec:	bl	1154c <fflush_unlocked@plt>
   165f0:	b	164f8 <__assert_fail@plt+0x4d18>
   165f4:	nop	{0}
   165f8:	ldmibls	r9, {r0, r3, r4, r7, r8, fp, ip, pc}
   165fc:	ldmibne	r9, {r0, r3, r4, r7, r8, fp, ip, pc}
   16600:	andeq	lr, r1, lr, lsl #2
   16604:	andeq	pc, r2, ip, ror #3
   16608:	ldrdeq	pc, [r2], -r8
   1660c:	andeq	lr, r1, r1, lsr r1
   16610:	andeq	pc, r2, r4, ror #3
   16614:	andeq	lr, r1, r9, ror #1
   16618:	andeq	pc, r2, ip, ror r1	; <UNPREDICTABLE>
   1661c:	subs	r6, r0, #0
   16620:	push	{r7, lr}
   16624:	sub	sp, sp, #56	; 0x38
   16628:	ldr	r4, [pc, #452]	; 167f4 <__assert_fail@plt+0x5014>
   1662c:	beq	16664 <__assert_fail@plt+0x4e84>
   16630:	mov	r2, #5
   16634:	mov	r0, #0
   16638:	ldr	r3, [pc, #440]	; 167f8 <__assert_fail@plt+0x5018>
   1663c:	ldr	r1, [pc, #440]	; 167fc <__assert_fail@plt+0x501c>
   16640:	ldr	r5, [r3]
   16644:	bl	114bc <dcgettext@plt>
   16648:	mov	r2, r0
   1664c:	mov	r1, #1
   16650:	ldr	r3, [r4]
   16654:	mov	r0, r5
   16658:	bl	116d8 <__fprintf_chk@plt>
   1665c:	mov	r0, r6
   16660:	bl	11624 <exit@plt>
   16664:	mov	r2, #5
   16668:	ldr	r1, [pc, #400]	; 16800 <__assert_fail@plt+0x5020>
   1666c:	mov	r5, sp
   16670:	bl	114bc <dcgettext@plt>
   16674:	ldr	r3, [r4]
   16678:	mov	r1, r0
   1667c:	mov	r0, #1
   16680:	ldr	r4, [pc, #380]	; 16804 <__assert_fail@plt+0x5024>
   16684:	ldr	r7, [pc, #380]	; 16808 <__assert_fail@plt+0x5028>
   16688:	mov	r2, r3
   1668c:	bl	116b4 <__printf_chk@plt>
   16690:	mov	r2, #5
   16694:	ldr	r1, [pc, #368]	; 1680c <__assert_fail@plt+0x502c>
   16698:	mov	r0, r6
   1669c:	bl	114bc <dcgettext@plt>
   166a0:	ldr	r1, [r4]
   166a4:	bl	113cc <fputs_unlocked@plt>
   166a8:	mov	r2, #5
   166ac:	ldr	r1, [pc, #348]	; 16810 <__assert_fail@plt+0x5030>
   166b0:	mov	r0, r6
   166b4:	bl	114bc <dcgettext@plt>
   166b8:	ldr	r1, [r4]
   166bc:	bl	113cc <fputs_unlocked@plt>
   166c0:	mov	r2, #5
   166c4:	ldr	r1, [pc, #328]	; 16814 <__assert_fail@plt+0x5034>
   166c8:	mov	r0, r6
   166cc:	bl	114bc <dcgettext@plt>
   166d0:	ldr	r1, [r4]
   166d4:	bl	113cc <fputs_unlocked@plt>
   166d8:	ldr	lr, [pc, #312]	; 16818 <__assert_fail@plt+0x5038>
   166dc:	mov	ip, sp
   166e0:	ldm	lr!, {r0, r1, r2, r3}
   166e4:	stmia	ip!, {r0, r1, r2, r3}
   166e8:	ldm	lr!, {r0, r1, r2, r3}
   166ec:	stmia	ip!, {r0, r1, r2, r3}
   166f0:	ldm	lr!, {r0, r1, r2, r3}
   166f4:	stmia	ip!, {r0, r1, r2, r3}
   166f8:	ldm	lr, {r0, r1}
   166fc:	stm	ip, {r0, r1}
   16700:	ldr	r1, [r5]
   16704:	cmp	r1, #0
   16708:	bne	167ac <__assert_fail@plt+0x4fcc>
   1670c:	ldr	r5, [r5, #4]
   16710:	mov	r2, #5
   16714:	mov	r0, #0
   16718:	ldr	r7, [pc, #232]	; 16808 <__assert_fail@plt+0x5028>
   1671c:	ldr	r1, [pc, #248]	; 1681c <__assert_fail@plt+0x503c>
   16720:	cmp	r5, #0
   16724:	moveq	r5, r7
   16728:	bl	114bc <dcgettext@plt>
   1672c:	mov	r1, r0
   16730:	ldr	r3, [pc, #232]	; 16820 <__assert_fail@plt+0x5040>
   16734:	mov	r0, #1
   16738:	ldr	r2, [pc, #228]	; 16824 <__assert_fail@plt+0x5044>
   1673c:	bl	116b4 <__printf_chk@plt>
   16740:	mov	r1, #0
   16744:	mov	r0, #5
   16748:	bl	11738 <setlocale@plt>
   1674c:	cmp	r0, #0
   16750:	bne	167c4 <__assert_fail@plt+0x4fe4>
   16754:	mov	r2, #5
   16758:	ldr	r1, [pc, #200]	; 16828 <__assert_fail@plt+0x5048>
   1675c:	mov	r0, #0
   16760:	bl	114bc <dcgettext@plt>
   16764:	mov	r1, r0
   16768:	ldr	r3, [pc, #152]	; 16808 <__assert_fail@plt+0x5028>
   1676c:	mov	r0, #1
   16770:	ldr	r2, [pc, #168]	; 16820 <__assert_fail@plt+0x5040>
   16774:	bl	116b4 <__printf_chk@plt>
   16778:	mov	r2, #5
   1677c:	ldr	r1, [pc, #168]	; 1682c <__assert_fail@plt+0x504c>
   16780:	mov	r0, #0
   16784:	bl	114bc <dcgettext@plt>
   16788:	ldr	r2, [pc, #160]	; 16830 <__assert_fail@plt+0x5050>
   1678c:	cmp	r5, r7
   16790:	mov	r1, r0
   16794:	mov	r0, #1
   16798:	ldr	r3, [pc, #148]	; 16834 <__assert_fail@plt+0x5054>
   1679c:	moveq	r3, r2
   167a0:	mov	r2, r5
   167a4:	bl	116b4 <__printf_chk@plt>
   167a8:	b	1665c <__assert_fail@plt+0x4e7c>
   167ac:	mov	r0, r7
   167b0:	bl	11408 <strcmp@plt>
   167b4:	cmp	r0, #0
   167b8:	beq	1670c <__assert_fail@plt+0x4f2c>
   167bc:	add	r5, r5, #8
   167c0:	b	16700 <__assert_fail@plt+0x4f20>
   167c4:	mov	r2, #3
   167c8:	ldr	r1, [pc, #104]	; 16838 <__assert_fail@plt+0x5058>
   167cc:	bl	117bc <strncmp@plt>
   167d0:	cmp	r0, #0
   167d4:	beq	16754 <__assert_fail@plt+0x4f74>
   167d8:	mov	r2, #5
   167dc:	ldr	r1, [pc, #88]	; 1683c <__assert_fail@plt+0x505c>
   167e0:	mov	r0, #0
   167e4:	bl	114bc <dcgettext@plt>
   167e8:	ldr	r1, [r4]
   167ec:	bl	113cc <fputs_unlocked@plt>
   167f0:	b	16754 <__assert_fail@plt+0x4f74>
   167f4:	andeq	pc, r2, r0, lsl #4
   167f8:	ldrdeq	pc, [r2], -r8
   167fc:	andeq	lr, r1, r0, ror #2
   16800:	andeq	lr, r1, r7, lsl #3
   16804:	andeq	pc, r2, r4, ror #3
   16808:	andeq	lr, r1, r9, asr r1
   1680c:	andeq	lr, r1, pc, lsr #3
   16810:	andeq	lr, r1, r6, lsr r2
   16814:	andeq	lr, r1, r3, ror #4
   16818:	andeq	fp, r1, ip, ror #9
   1681c:	muleq	r1, r9, r2
   16820:			; <UNDEFINED> instruction: 0x0001e2b0
   16824:	ldrdeq	lr, [r1], -r8
   16828:	andeq	lr, r1, r1, lsr r3
   1682c:	andeq	lr, r1, ip, asr #6
   16830:	andeq	lr, r1, r2, lsl #8
   16834:	andeq	lr, r1, r5, lsr r2
   16838:	andeq	lr, r1, r6, ror #5
   1683c:	andeq	lr, r1, sl, ror #5
   16840:	ldr	r3, [pc, #4]	; 1684c <__assert_fail@plt+0x506c>
   16844:	str	r0, [r3]
   16848:	bx	lr
   1684c:	strdeq	pc, [r2], -r8
   16850:	ldr	r3, [pc, #4]	; 1685c <__assert_fail@plt+0x507c>
   16854:	strb	r0, [r3, #4]
   16858:	bx	lr
   1685c:	strdeq	pc, [r2], -r8
   16860:	ldr	r3, [pc, #176]	; 16918 <__assert_fail@plt+0x5138>
   16864:	push	{r0, r1, r4, r5, r6, lr}
   16868:	ldr	r0, [r3]
   1686c:	bl	194a0 <__assert_fail@plt+0x7cc0>
   16870:	cmp	r0, #0
   16874:	beq	168fc <__assert_fail@plt+0x511c>
   16878:	ldr	r4, [pc, #156]	; 1691c <__assert_fail@plt+0x513c>
   1687c:	bl	1166c <__errno_location@plt>
   16880:	mov	r5, r0
   16884:	ldrb	r6, [r4, #4]
   16888:	cmp	r6, #0
   1688c:	beq	1689c <__assert_fail@plt+0x50bc>
   16890:	ldr	r3, [r0]
   16894:	cmp	r3, #32
   16898:	beq	168fc <__assert_fail@plt+0x511c>
   1689c:	mov	r2, #5
   168a0:	ldr	r1, [pc, #120]	; 16920 <__assert_fail@plt+0x5140>
   168a4:	mov	r0, #0
   168a8:	bl	114bc <dcgettext@plt>
   168ac:	mov	r6, r0
   168b0:	ldr	r0, [r4]
   168b4:	cmp	r0, #0
   168b8:	beq	168e8 <__assert_fail@plt+0x5108>
   168bc:	ldr	r4, [r5]
   168c0:	bl	18454 <__assert_fail@plt+0x6c74>
   168c4:	mov	r3, r0
   168c8:	ldr	r2, [pc, #84]	; 16924 <__assert_fail@plt+0x5144>
   168cc:	mov	r0, #0
   168d0:	str	r6, [sp]
   168d4:	mov	r1, r4
   168d8:	bl	115ac <error@plt>
   168dc:	ldr	r3, [pc, #68]	; 16928 <__assert_fail@plt+0x5148>
   168e0:	ldr	r0, [r3]
   168e4:	bl	11468 <_exit@plt>
   168e8:	mov	r3, r6
   168ec:	ldr	r2, [pc, #56]	; 1692c <__assert_fail@plt+0x514c>
   168f0:	ldr	r1, [r5]
   168f4:	bl	115ac <error@plt>
   168f8:	b	168dc <__assert_fail@plt+0x50fc>
   168fc:	ldr	r3, [pc, #44]	; 16930 <__assert_fail@plt+0x5150>
   16900:	ldr	r0, [r3]
   16904:	bl	194a0 <__assert_fail@plt+0x7cc0>
   16908:	cmp	r0, #0
   1690c:	bne	168dc <__assert_fail@plt+0x50fc>
   16910:	add	sp, sp, #8
   16914:	pop	{r4, r5, r6, pc}
   16918:	andeq	pc, r2, r4, ror #3
   1691c:	strdeq	pc, [r2], -r8
   16920:	andeq	lr, r1, r2
   16924:	andeq	lr, r1, r8, ror #8
   16928:	andeq	pc, r2, r4, lsl #3
   1692c:	andeq	lr, r1, ip, ror #8
   16930:	ldrdeq	pc, [r2], -r8
   16934:	push	{r0, r1, r2, r4, r5, lr}
   16938:	mov	r5, r0
   1693c:	bl	1166c <__errno_location@plt>
   16940:	mov	r4, r0
   16944:	mov	r0, r5
   16948:	ldr	r3, [r4]
   1694c:	str	r3, [sp]
   16950:	str	r3, [sp, #4]
   16954:	mov	r3, #0
   16958:	str	r3, [r4]
   1695c:	bl	1145c <free@plt>
   16960:	ldr	r3, [r4]
   16964:	add	r2, sp, #8
   16968:	clz	r3, r3
   1696c:	lsr	r3, r3, #5
   16970:	add	r3, r2, r3, lsl #2
   16974:	ldr	r3, [r3, #-8]
   16978:	str	r3, [r4]
   1697c:	add	sp, sp, #12
   16980:	pop	{r4, r5, pc}
   16984:	push	{r4, r5, r6, r7, r8, lr}
   16988:	mov	r7, r0
   1698c:	mov	r6, r1
   16990:	mov	r4, r2
   16994:	mov	r5, #0
   16998:	cmp	r4, #0
   1699c:	beq	169cc <__assert_fail@plt+0x51ec>
   169a0:	mov	r2, r4
   169a4:	mov	r1, r6
   169a8:	mov	r0, r7
   169ac:	bl	1882c <__assert_fail@plt+0x704c>
   169b0:	cmn	r0, #1
   169b4:	beq	169cc <__assert_fail@plt+0x51ec>
   169b8:	cmp	r0, #0
   169bc:	bne	169d4 <__assert_fail@plt+0x51f4>
   169c0:	bl	1166c <__errno_location@plt>
   169c4:	mov	r3, #28
   169c8:	str	r3, [r0]
   169cc:	mov	r0, r5
   169d0:	pop	{r4, r5, r6, r7, r8, pc}
   169d4:	add	r5, r5, r0
   169d8:	add	r6, r6, r0
   169dc:	sub	r4, r4, r0
   169e0:	b	16998 <__assert_fail@plt+0x51b8>
   169e4:	push	{r4, r5, r6, lr}
   169e8:	mov	r3, #0
   169ec:	mov	r4, r0
   169f0:	mov	r5, r1
   169f4:	add	r6, r2, #20
   169f8:	strb	r3, [r2, #20]
   169fc:	mov	r2, #10
   16a00:	mov	r3, #0
   16a04:	mov	r0, r4
   16a08:	mov	r1, r5
   16a0c:	bl	1acd8 <__assert_fail@plt+0x94f8>
   16a10:	add	r2, r2, #48	; 0x30
   16a14:	mov	r3, #0
   16a18:	mov	r0, r4
   16a1c:	mov	r1, r5
   16a20:	strb	r2, [r6, #-1]!
   16a24:	mov	r2, #10
   16a28:	bl	1acd8 <__assert_fail@plt+0x94f8>
   16a2c:	cmp	r5, #0
   16a30:	cmpeq	r4, #9
   16a34:	bhi	16a40 <__assert_fail@plt+0x5260>
   16a38:	mov	r0, r6
   16a3c:	pop	{r4, r5, r6, pc}
   16a40:	mov	r4, r0
   16a44:	mov	r5, r1
   16a48:	b	169fc <__assert_fail@plt+0x521c>
   16a4c:	push	{r4, r5, r6, lr}
   16a50:	subs	r4, r0, #0
   16a54:	bne	16a6c <__assert_fail@plt+0x528c>
   16a58:	ldr	r3, [pc, #124]	; 16adc <__assert_fail@plt+0x52fc>
   16a5c:	ldr	r0, [pc, #124]	; 16ae0 <__assert_fail@plt+0x5300>
   16a60:	ldr	r1, [r3]
   16a64:	bl	117b0 <fputs@plt>
   16a68:	bl	117c8 <abort@plt>
   16a6c:	mov	r1, #47	; 0x2f
   16a70:	bl	11744 <strrchr@plt>
   16a74:	subs	r6, r0, #0
   16a78:	beq	16ac8 <__assert_fail@plt+0x52e8>
   16a7c:	add	r5, r6, #1
   16a80:	sub	r3, r5, r4
   16a84:	cmp	r3, #6
   16a88:	ble	16ac8 <__assert_fail@plt+0x52e8>
   16a8c:	mov	r2, #7
   16a90:	ldr	r1, [pc, #76]	; 16ae4 <__assert_fail@plt+0x5304>
   16a94:	sub	r0, r6, #6
   16a98:	bl	117bc <strncmp@plt>
   16a9c:	cmp	r0, #0
   16aa0:	bne	16ac8 <__assert_fail@plt+0x52e8>
   16aa4:	mov	r2, #3
   16aa8:	ldr	r1, [pc, #56]	; 16ae8 <__assert_fail@plt+0x5308>
   16aac:	mov	r0, r5
   16ab0:	bl	117bc <strncmp@plt>
   16ab4:	cmp	r0, #0
   16ab8:	ldreq	r3, [pc, #44]	; 16aec <__assert_fail@plt+0x530c>
   16abc:	addeq	r4, r6, #4
   16ac0:	movne	r4, r5
   16ac4:	streq	r4, [r3]
   16ac8:	ldr	r3, [pc, #32]	; 16af0 <__assert_fail@plt+0x5310>
   16acc:	str	r4, [r3]
   16ad0:	ldr	r3, [pc, #28]	; 16af4 <__assert_fail@plt+0x5314>
   16ad4:	str	r4, [r3]
   16ad8:	pop	{r4, r5, r6, pc}
   16adc:	ldrdeq	pc, [r2], -r8
   16ae0:	andeq	lr, r1, pc, ror #8
   16ae4:	andeq	lr, r1, r7, lsr #9
   16ae8:	andeq	lr, r1, pc, lsr #9
   16aec:	andeq	pc, r2, r8, asr #3
   16af0:	andeq	pc, r2, r0, lsl #4
   16af4:	andeq	pc, r2, ip, asr #3
   16af8:	push	{r4, r5, r6, r7, r8, r9, lr}
   16afc:	mov	r4, r0
   16b00:	sub	sp, sp, #116	; 0x74
   16b04:	mov	r0, r1
   16b08:	mov	r1, #2
   16b0c:	mov	r6, #0
   16b10:	mov	r7, #0
   16b14:	bl	18898 <__assert_fail@plt+0x70b8>
   16b18:	mov	r8, r0
   16b1c:	ldrb	r3, [r4]
   16b20:	cmp	r3, #0
   16b24:	beq	16b3c <__assert_fail@plt+0x535c>
   16b28:	mov	r1, r8
   16b2c:	mov	r0, r4
   16b30:	bl	19d6c <__assert_fail@plt+0x858c>
   16b34:	subs	r5, r0, #0
   16b38:	bne	16b54 <__assert_fail@plt+0x5374>
   16b3c:	mov	r4, #0
   16b40:	mov	r0, r8
   16b44:	bl	16934 <__assert_fail@plt+0x5154>
   16b48:	mov	r0, r4
   16b4c:	add	sp, sp, #116	; 0x74
   16b50:	pop	{r4, r5, r6, r7, r8, r9, pc}
   16b54:	bl	1157c <__ctype_get_mb_cur_max@plt>
   16b58:	cmp	r0, #1
   16b5c:	bls	16cf4 <__assert_fail@plt+0x5514>
   16b60:	mov	r3, #0
   16b64:	cmp	r4, r5
   16b68:	strb	r3, [sp]
   16b6c:	strd	r6, [sp, #4]
   16b70:	strb	r3, [sp, #12]
   16b74:	str	r4, [sp, #16]
   16b78:	movcc	r4, r3
   16b7c:	bcc	16c50 <__assert_fail@plt+0x5470>
   16b80:	mov	r4, #1
   16b84:	mov	r3, #0
   16b88:	mov	r9, r3
   16b8c:	strb	r3, [sp]
   16b90:	strd	r6, [sp, #4]
   16b94:	strb	r3, [sp, #12]
   16b98:	str	r5, [sp, #16]
   16b9c:	strb	r3, [sp, #56]	; 0x38
   16ba0:	strd	r6, [sp, #60]	; 0x3c
   16ba4:	strb	r3, [sp, #68]	; 0x44
   16ba8:	str	r8, [sp, #72]	; 0x48
   16bac:	add	r0, sp, #56	; 0x38
   16bb0:	bl	1a1d8 <__assert_fail@plt+0x89f8>
   16bb4:	ldrb	r3, [sp, #80]	; 0x50
   16bb8:	mov	r0, sp
   16bbc:	cmp	r3, #0
   16bc0:	beq	16cb0 <__assert_fail@plt+0x54d0>
   16bc4:	ldr	r3, [sp, #84]	; 0x54
   16bc8:	cmp	r3, #0
   16bcc:	bne	16cb0 <__assert_fail@plt+0x54d0>
   16bd0:	bl	1a1d8 <__assert_fail@plt+0x89f8>
   16bd4:	ldrb	r3, [sp, #24]
   16bd8:	cmp	r3, #0
   16bdc:	beq	16bec <__assert_fail@plt+0x540c>
   16be0:	ldr	r3, [sp, #28]
   16be4:	cmp	r3, #0
   16be8:	beq	16c08 <__assert_fail@plt+0x5428>
   16bec:	ldrb	r3, [sp, #24]
   16bf0:	cmp	r3, #0
   16bf4:	beq	16c08 <__assert_fail@plt+0x5428>
   16bf8:	ldr	r0, [sp, #28]
   16bfc:	bl	11678 <iswalnum@plt>
   16c00:	cmp	r0, #0
   16c04:	bne	16c10 <__assert_fail@plt+0x5430>
   16c08:	cmp	r4, #0
   16c0c:	bne	16b40 <__assert_fail@plt+0x5360>
   16c10:	mov	r3, #0
   16c14:	mov	r0, sp
   16c18:	strb	r3, [sp]
   16c1c:	strd	r6, [sp, #4]
   16c20:	strb	r3, [sp, #12]
   16c24:	str	r5, [sp, #16]
   16c28:	bl	1a1d8 <__assert_fail@plt+0x89f8>
   16c2c:	ldrb	r3, [sp, #24]
   16c30:	cmp	r3, #0
   16c34:	beq	16c44 <__assert_fail@plt+0x5464>
   16c38:	ldr	r4, [sp, #28]
   16c3c:	cmp	r4, #0
   16c40:	beq	16b40 <__assert_fail@plt+0x5360>
   16c44:	ldr	r4, [sp, #20]
   16c48:	add	r4, r5, r4
   16c4c:	b	16b1c <__assert_fail@plt+0x533c>
   16c50:	mov	r0, sp
   16c54:	bl	1a1d8 <__assert_fail@plt+0x89f8>
   16c58:	ldrb	r3, [sp, #24]
   16c5c:	cmp	r3, #0
   16c60:	beq	16c74 <__assert_fail@plt+0x5494>
   16c64:	ldr	r3, [sp, #28]
   16c68:	cmp	r3, #0
   16c6c:	bne	16c74 <__assert_fail@plt+0x5494>
   16c70:	bl	117c8 <abort@plt>
   16c74:	ldr	r3, [sp, #16]
   16c78:	strb	r4, [sp, #12]
   16c7c:	ldr	r1, [sp, #20]
   16c80:	ldrb	r2, [sp, #24]
   16c84:	ldr	r0, [sp, #28]
   16c88:	add	r3, r3, r1
   16c8c:	cmp	r3, r5
   16c90:	str	r3, [sp, #16]
   16c94:	bcc	16c50 <__assert_fail@plt+0x5470>
   16c98:	cmp	r2, #0
   16c9c:	beq	16b80 <__assert_fail@plt+0x53a0>
   16ca0:	bl	11678 <iswalnum@plt>
   16ca4:	clz	r4, r0
   16ca8:	lsr	r4, r4, #5
   16cac:	b	16b84 <__assert_fail@plt+0x53a4>
   16cb0:	bl	1a1d8 <__assert_fail@plt+0x89f8>
   16cb4:	ldrb	r3, [sp, #24]
   16cb8:	cmp	r3, #0
   16cbc:	beq	16ccc <__assert_fail@plt+0x54ec>
   16cc0:	ldr	r3, [sp, #28]
   16cc4:	cmp	r3, #0
   16cc8:	beq	16c70 <__assert_fail@plt+0x5490>
   16ccc:	ldrd	r2, [sp, #16]
   16cd0:	strb	r9, [sp, #12]
   16cd4:	strb	r9, [sp, #68]	; 0x44
   16cd8:	add	r3, r3, r2
   16cdc:	ldr	r2, [sp, #76]	; 0x4c
   16ce0:	str	r3, [sp, #16]
   16ce4:	ldr	r3, [sp, #72]	; 0x48
   16ce8:	add	r3, r3, r2
   16cec:	str	r3, [sp, #72]	; 0x48
   16cf0:	b	16bac <__assert_fail@plt+0x53cc>
   16cf4:	cmp	r4, r5
   16cf8:	movcs	r4, #1
   16cfc:	bcs	16d1c <__assert_fail@plt+0x553c>
   16d00:	bl	11618 <__ctype_b_loc@plt>
   16d04:	ldrb	r3, [r5, #-1]
   16d08:	ldr	r2, [r0]
   16d0c:	lsl	r3, r3, #1
   16d10:	ldrh	r4, [r2, r3]
   16d14:	eor	r4, r4, #8
   16d18:	ubfx	r4, r4, #3, #1
   16d1c:	mov	r0, r8
   16d20:	bl	1163c <strlen@plt>
   16d24:	ldrb	r9, [r5, r0]
   16d28:	cmp	r9, #0
   16d2c:	beq	16d48 <__assert_fail@plt+0x5568>
   16d30:	bl	11618 <__ctype_b_loc@plt>
   16d34:	ldr	r3, [r0]
   16d38:	lsl	r9, r9, #1
   16d3c:	ldrh	r3, [r3, r9]
   16d40:	tst	r3, #8
   16d44:	bne	16d50 <__assert_fail@plt+0x5570>
   16d48:	cmp	r4, #0
   16d4c:	bne	16b40 <__assert_fail@plt+0x5360>
   16d50:	ldrb	r3, [r5]
   16d54:	cmp	r3, #0
   16d58:	beq	16b3c <__assert_fail@plt+0x535c>
   16d5c:	add	r4, r5, #1
   16d60:	b	16b1c <__assert_fail@plt+0x533c>
   16d64:	push	{r0, r1, r4, r5, r6, lr}
   16d68:	mov	r2, #5
   16d6c:	mov	r5, r0
   16d70:	mov	r1, r0
   16d74:	mov	r0, #0
   16d78:	bl	114bc <dcgettext@plt>
   16d7c:	cmp	r5, r0
   16d80:	mov	r4, r0
   16d84:	beq	16dd4 <__assert_fail@plt+0x55f4>
   16d88:	mov	r1, r5
   16d8c:	bl	16af8 <__assert_fail@plt+0x5318>
   16d90:	cmp	r0, #0
   16d94:	bne	16dd4 <__assert_fail@plt+0x55f4>
   16d98:	mov	r0, r4
   16d9c:	bl	1163c <strlen@plt>
   16da0:	mov	r6, r0
   16da4:	mov	r0, r5
   16da8:	bl	1163c <strlen@plt>
   16dac:	add	r0, r6, r0
   16db0:	add	r0, r0, #4
   16db4:	bl	19008 <__assert_fail@plt+0x7828>
   16db8:	mov	r6, r0
   16dbc:	ldr	r3, [pc, #28]	; 16de0 <__assert_fail@plt+0x5600>
   16dc0:	mvn	r2, #0
   16dc4:	mov	r1, #1
   16dc8:	strd	r4, [sp]
   16dcc:	mov	r4, r6
   16dd0:	bl	11684 <__sprintf_chk@plt>
   16dd4:	mov	r0, r4
   16dd8:	add	sp, sp, #8
   16ddc:	pop	{r4, r5, r6, pc}
   16de0:			; <UNDEFINED> instruction: 0x0001e4b3
   16de4:	push	{r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   16de8:	mov	r2, #5
   16dec:	mov	sl, r0
   16df0:	mov	r4, r1
   16df4:	mov	r1, r0
   16df8:	mov	r0, #0
   16dfc:	bl	114bc <dcgettext@plt>
   16e00:	mov	r9, r0
   16e04:	bl	196c8 <__assert_fail@plt+0x7ee8>
   16e08:	ldr	r1, [pc, #564]	; 17044 <__assert_fail@plt+0x5864>
   16e0c:	mov	r8, r0
   16e10:	bl	19454 <__assert_fail@plt+0x7c74>
   16e14:	subs	r5, r0, #0
   16e18:	beq	16ed8 <__assert_fail@plt+0x56f8>
   16e1c:	mov	r2, r8
   16e20:	ldr	r1, [pc, #540]	; 17044 <__assert_fail@plt+0x5864>
   16e24:	mov	r0, r4
   16e28:	bl	19364 <__assert_fail@plt+0x7b84>
   16e2c:	mov	r6, r0
   16e30:	mov	r0, r8
   16e34:	bl	1163c <strlen@plt>
   16e38:	mov	r7, r0
   16e3c:	add	r0, r0, #11
   16e40:	bl	19008 <__assert_fail@plt+0x7828>
   16e44:	mov	r2, r7
   16e48:	mov	r1, r8
   16e4c:	mov	r5, r0
   16e50:	bl	11474 <memcpy@plt>
   16e54:	ldr	r3, [pc, #492]	; 17048 <__assert_fail@plt+0x5868>
   16e58:	add	r2, r5, r7
   16e5c:	mov	r0, r4
   16e60:	ldr	r1, [r3]
   16e64:	str	r1, [r5, r7]
   16e68:	ldr	r1, [r3, #4]
   16e6c:	str	r1, [r2, #4]
   16e70:	ldrh	r1, [r3, #8]
   16e74:	ldrb	r3, [r3, #10]
   16e78:	strh	r1, [r2, #8]
   16e7c:	ldr	r1, [pc, #448]	; 17044 <__assert_fail@plt+0x5864>
   16e80:	strb	r3, [r2, #10]
   16e84:	mov	r2, r5
   16e88:	bl	19364 <__assert_fail@plt+0x7b84>
   16e8c:	mov	r4, r0
   16e90:	mov	r0, r5
   16e94:	bl	16934 <__assert_fail@plt+0x5154>
   16e98:	cmp	r4, #0
   16e9c:	beq	16ebc <__assert_fail@plt+0x56dc>
   16ea0:	mov	r1, #63	; 0x3f
   16ea4:	mov	r0, r4
   16ea8:	bl	11648 <strchr@plt>
   16eac:	cmp	r0, #0
   16eb0:	beq	17030 <__assert_fail@plt+0x5850>
   16eb4:	mov	r0, r4
   16eb8:	bl	16934 <__assert_fail@plt+0x5154>
   16ebc:	cmp	r6, #0
   16ec0:	bne	16f38 <__assert_fail@plt+0x5758>
   16ec4:	mov	r4, r6
   16ec8:	mov	r5, r6
   16ecc:	mov	r7, r6
   16ed0:	mov	r8, sl
   16ed4:	b	16ef0 <__assert_fail@plt+0x5710>
   16ed8:	subs	r6, r4, #0
   16edc:	movne	r8, r4
   16ee0:	movne	r7, r5
   16ee4:	moveq	r5, r4
   16ee8:	moveq	r7, r4
   16eec:	beq	16ed0 <__assert_fail@plt+0x56f0>
   16ef0:	mov	r1, sl
   16ef4:	mov	r0, r9
   16ef8:	bl	11408 <strcmp@plt>
   16efc:	cmp	r0, #0
   16f00:	beq	17000 <__assert_fail@plt+0x5820>
   16f04:	mov	r1, sl
   16f08:	mov	r0, r9
   16f0c:	bl	16af8 <__assert_fail@plt+0x5318>
   16f10:	cmp	r0, #0
   16f14:	beq	16f4c <__assert_fail@plt+0x576c>
   16f18:	cmp	r7, #0
   16f1c:	bne	16ff4 <__assert_fail@plt+0x5814>
   16f20:	cmp	r5, #0
   16f24:	beq	16f30 <__assert_fail@plt+0x5750>
   16f28:	mov	r0, r5
   16f2c:	bl	16934 <__assert_fail@plt+0x5154>
   16f30:	mov	r4, r9
   16f34:	b	16fb8 <__assert_fail@plt+0x57d8>
   16f38:	mov	r4, #0
   16f3c:	mov	r7, r6
   16f40:	mov	r8, r6
   16f44:	mov	r5, r4
   16f48:	b	16ef0 <__assert_fail@plt+0x5710>
   16f4c:	cmp	r6, #0
   16f50:	bne	16fc4 <__assert_fail@plt+0x57e4>
   16f54:	cmp	r4, #0
   16f58:	bne	16fdc <__assert_fail@plt+0x57fc>
   16f5c:	mov	r0, r9
   16f60:	bl	1163c <strlen@plt>
   16f64:	mov	r4, r0
   16f68:	mov	r0, r8
   16f6c:	bl	1163c <strlen@plt>
   16f70:	add	r0, r4, r0
   16f74:	add	r0, r0, #4
   16f78:	bl	19008 <__assert_fail@plt+0x7828>
   16f7c:	ldr	r3, [pc, #200]	; 1704c <__assert_fail@plt+0x586c>
   16f80:	mvn	r2, #0
   16f84:	mov	r1, #1
   16f88:	str	r9, [sp]
   16f8c:	mov	r4, r0
   16f90:	str	r8, [sp, #4]
   16f94:	bl	11684 <__sprintf_chk@plt>
   16f98:	cmp	r7, #0
   16f9c:	beq	16fa8 <__assert_fail@plt+0x57c8>
   16fa0:	mov	r0, r7
   16fa4:	bl	16934 <__assert_fail@plt+0x5154>
   16fa8:	cmp	r5, #0
   16fac:	beq	16fb8 <__assert_fail@plt+0x57d8>
   16fb0:	mov	r0, r5
   16fb4:	bl	16934 <__assert_fail@plt+0x5154>
   16fb8:	mov	r0, r4
   16fbc:	add	sp, sp, #8
   16fc0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   16fc4:	mov	r1, r6
   16fc8:	mov	r0, r9
   16fcc:	bl	16af8 <__assert_fail@plt+0x5318>
   16fd0:	cmp	r0, #0
   16fd4:	beq	16f54 <__assert_fail@plt+0x5774>
   16fd8:	b	16f18 <__assert_fail@plt+0x5738>
   16fdc:	mov	r1, r4
   16fe0:	mov	r0, r9
   16fe4:	bl	16af8 <__assert_fail@plt+0x5318>
   16fe8:	cmp	r0, #0
   16fec:	bne	16f18 <__assert_fail@plt+0x5738>
   16ff0:	b	16f5c <__assert_fail@plt+0x577c>
   16ff4:	mov	r0, r7
   16ff8:	bl	16934 <__assert_fail@plt+0x5154>
   16ffc:	b	16f20 <__assert_fail@plt+0x5740>
   17000:	cmp	r7, #0
   17004:	cmpne	r8, r7
   17008:	beq	17014 <__assert_fail@plt+0x5834>
   1700c:	mov	r0, r7
   17010:	bl	16934 <__assert_fail@plt+0x5154>
   17014:	cmp	r5, #0
   17018:	cmpne	r8, r5
   1701c:	beq	17028 <__assert_fail@plt+0x5848>
   17020:	mov	r0, r5
   17024:	bl	16934 <__assert_fail@plt+0x5154>
   17028:	mov	r4, r8
   1702c:	b	16fb8 <__assert_fail@plt+0x57d8>
   17030:	subs	r7, r6, #0
   17034:	mov	r5, r4
   17038:	moveq	r8, r4
   1703c:	movne	r8, r6
   17040:	b	16ef0 <__assert_fail@plt+0x5710>
   17044:			; <UNDEFINED> instruction: 0x0001e4bb
   17048:	andeq	lr, r1, r1, asr #9
   1704c:			; <UNDEFINED> instruction: 0x0001e4b3
   17050:	push	{r4, lr}
   17054:	mov	r2, #48	; 0x30
   17058:	mov	r4, r1
   1705c:	mov	r1, #0
   17060:	bl	1169c <memset@plt>
   17064:	cmp	r4, #10
   17068:	bne	17070 <__assert_fail@plt+0x5890>
   1706c:	bl	117c8 <abort@plt>
   17070:	str	r4, [r0]
   17074:	pop	{r4, pc}
   17078:	push	{r4, r5, r6, lr}
   1707c:	mov	r2, #5
   17080:	mov	r6, r0
   17084:	mov	r5, r1
   17088:	mov	r1, r0
   1708c:	mov	r0, #0
   17090:	bl	114bc <dcgettext@plt>
   17094:	cmp	r6, r0
   17098:	mov	r4, r0
   1709c:	bne	1710c <__assert_fail@plt+0x592c>
   170a0:	bl	196c8 <__assert_fail@plt+0x7ee8>
   170a4:	ldrb	r3, [r0]
   170a8:	bic	r3, r3, #32
   170ac:	cmp	r3, #85	; 0x55
   170b0:	bne	17114 <__assert_fail@plt+0x5934>
   170b4:	ldrb	r3, [r0, #1]
   170b8:	bic	r3, r3, #32
   170bc:	cmp	r3, #84	; 0x54
   170c0:	bne	17184 <__assert_fail@plt+0x59a4>
   170c4:	ldrb	r3, [r0, #2]
   170c8:	bic	r3, r3, #32
   170cc:	cmp	r3, #70	; 0x46
   170d0:	bne	17184 <__assert_fail@plt+0x59a4>
   170d4:	ldrb	r3, [r0, #3]
   170d8:	cmp	r3, #45	; 0x2d
   170dc:	bne	17184 <__assert_fail@plt+0x59a4>
   170e0:	ldrb	r3, [r0, #4]
   170e4:	cmp	r3, #56	; 0x38
   170e8:	bne	17184 <__assert_fail@plt+0x59a4>
   170ec:	ldrb	r3, [r0, #5]
   170f0:	cmp	r3, #0
   170f4:	bne	17184 <__assert_fail@plt+0x59a4>
   170f8:	ldrb	r2, [r4]
   170fc:	ldr	r3, [pc, #144]	; 17194 <__assert_fail@plt+0x59b4>
   17100:	ldr	r4, [pc, #144]	; 17198 <__assert_fail@plt+0x59b8>
   17104:	cmp	r2, #96	; 0x60
   17108:	movne	r4, r3
   1710c:	mov	r0, r4
   17110:	pop	{r4, r5, r6, pc}
   17114:	cmp	r3, #71	; 0x47
   17118:	bne	17184 <__assert_fail@plt+0x59a4>
   1711c:	ldrb	r3, [r0, #1]
   17120:	bic	r3, r3, #32
   17124:	cmp	r3, #66	; 0x42
   17128:	bne	17184 <__assert_fail@plt+0x59a4>
   1712c:	ldrb	r3, [r0, #2]
   17130:	cmp	r3, #49	; 0x31
   17134:	bne	17184 <__assert_fail@plt+0x59a4>
   17138:	ldrb	r3, [r0, #3]
   1713c:	cmp	r3, #56	; 0x38
   17140:	bne	17184 <__assert_fail@plt+0x59a4>
   17144:	ldrb	r3, [r0, #4]
   17148:	cmp	r3, #48	; 0x30
   1714c:	bne	17184 <__assert_fail@plt+0x59a4>
   17150:	ldrb	r3, [r0, #5]
   17154:	cmp	r3, #51	; 0x33
   17158:	bne	17184 <__assert_fail@plt+0x59a4>
   1715c:	ldrb	r3, [r0, #6]
   17160:	cmp	r3, #48	; 0x30
   17164:	bne	17184 <__assert_fail@plt+0x59a4>
   17168:	ldrb	r3, [r0, #7]
   1716c:	cmp	r3, #0
   17170:	bne	17184 <__assert_fail@plt+0x59a4>
   17174:	ldrb	r2, [r4]
   17178:	ldr	r3, [pc, #28]	; 1719c <__assert_fail@plt+0x59bc>
   1717c:	ldr	r4, [pc, #28]	; 171a0 <__assert_fail@plt+0x59c0>
   17180:	b	17104 <__assert_fail@plt+0x5924>
   17184:	ldr	r4, [pc, #24]	; 171a4 <__assert_fail@plt+0x59c4>
   17188:	cmp	r5, #9
   1718c:	ldr	r3, [pc, #20]	; 171a8 <__assert_fail@plt+0x59c8>
   17190:	b	17108 <__assert_fail@plt+0x5928>
   17194:	andeq	lr, r1, r2, lsr #10
   17198:	andeq	lr, r1, sp, lsr #10
   1719c:	andeq	lr, r1, r6, lsr #10
   171a0:	andeq	lr, r1, r9, lsr #10
   171a4:	andeq	lr, r1, r0, lsr #10
   171a8:	strdeq	lr, [r1], -r1
   171ac:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   171b0:	sub	sp, sp, #108	; 0x6c
   171b4:	mov	r8, r0
   171b8:	mov	r5, r1
   171bc:	mov	r6, #0
   171c0:	str	r3, [sp, #40]	; 0x28
   171c4:	str	r2, [sp, #48]	; 0x30
   171c8:	ldr	sl, [sp, #144]	; 0x90
   171cc:	bl	1157c <__ctype_get_mb_cur_max@plt>
   171d0:	ldr	r3, [sp, #148]	; 0x94
   171d4:	str	r6, [sp, #24]
   171d8:	str	r6, [sp, #32]
   171dc:	str	r6, [sp, #44]	; 0x2c
   171e0:	str	r6, [sp, #52]	; 0x34
   171e4:	ubfx	r7, r3, #1, #1
   171e8:	mov	r3, #1
   171ec:	str	r6, [sp, #60]	; 0x3c
   171f0:	str	r3, [sp, #72]	; 0x48
   171f4:	str	r0, [sp, #76]	; 0x4c
   171f8:	cmp	sl, #10
   171fc:	ldrls	pc, [pc, sl, lsl #2]
   17200:	b	17444 <__assert_fail@plt+0x5c64>
   17204:	andeq	r7, r1, r0, lsr r2
   17208:	andeq	r7, r1, ip, asr r4
   1720c:	andeq	r7, r1, r0, ror #7
   17210:	strdeq	r7, [r1], -r8
   17214:	andeq	r7, r1, r8, asr #7
   17218:	andeq	r7, r1, r0, lsr #6
   1721c:	andeq	r7, r1, r0, lsl #6
   17220:	andeq	r7, r1, r8, asr #8
   17224:	andeq	r7, r1, r0, asr r3
   17228:	andeq	r7, r1, r0, asr r3
   1722c:	andeq	r7, r1, r0, asr r3
   17230:	mov	r4, sl
   17234:	mov	r7, #0
   17238:	mov	r9, r5
   1723c:	mov	r3, #0
   17240:	str	r6, [sp, #68]	; 0x44
   17244:	str	r3, [sp, #28]
   17248:	ldr	r3, [sp, #40]	; 0x28
   1724c:	cmn	r3, #1
   17250:	bne	17df0 <__assert_fail@plt+0x6610>
   17254:	ldr	r2, [sp, #28]
   17258:	ldr	r3, [sp, #48]	; 0x30
   1725c:	ldrb	r3, [r3, r2]
   17260:	adds	r3, r3, #0
   17264:	movne	r3, #1
   17268:	str	r3, [sp, #36]	; 0x24
   1726c:	ldr	r3, [sp, #36]	; 0x24
   17270:	cmp	r3, #0
   17274:	bne	17480 <__assert_fail@plt+0x5ca0>
   17278:	sub	r3, sl, #2
   1727c:	cmp	r4, #0
   17280:	clz	r3, r3
   17284:	movne	r2, #0
   17288:	lsr	r3, r3, #5
   1728c:	andeq	r2, r3, r7
   17290:	cmp	r2, #0
   17294:	bne	17644 <__assert_fail@plt+0x5e64>
   17298:	eor	r7, r7, #1
   1729c:	ands	r3, r3, r7
   172a0:	beq	17e68 <__assert_fail@plt+0x6688>
   172a4:	ldr	r2, [sp, #68]	; 0x44
   172a8:	cmp	r2, #0
   172ac:	beq	17e30 <__assert_fail@plt+0x6650>
   172b0:	ldr	r3, [sp, #72]	; 0x48
   172b4:	cmp	r3, #0
   172b8:	beq	17e04 <__assert_fail@plt+0x6624>
   172bc:	ldr	r2, [sp, #48]	; 0x30
   172c0:	ldr	r3, [sp, #160]	; 0xa0
   172c4:	ldr	r1, [sp, #60]	; 0x3c
   172c8:	str	r3, [sp, #16]
   172cc:	ldr	r3, [sp, #156]	; 0x9c
   172d0:	str	r3, [sp, #12]
   172d4:	ldr	r3, [sp, #152]	; 0x98
   172d8:	str	r3, [sp, #8]
   172dc:	ldr	r3, [sp, #148]	; 0x94
   172e0:	str	r3, [sp, #4]
   172e4:	mov	r3, #5
   172e8:	str	r3, [sp]
   172ec:	ldr	r3, [sp, #40]	; 0x28
   172f0:	mov	r0, r8
   172f4:	bl	171ac <__assert_fail@plt+0x59cc>
   172f8:	mov	r4, r0
   172fc:	b	17e5c <__assert_fail@plt+0x667c>
   17300:	ldr	r3, [pc, #2948]	; 17e8c <__assert_fail@plt+0x66ac>
   17304:	mov	r7, #1
   17308:	mov	r4, #0
   1730c:	mov	sl, #5
   17310:	str	r7, [sp, #24]
   17314:	str	r7, [sp, #32]
   17318:	str	r3, [sp, #44]	; 0x2c
   1731c:	b	17238 <__assert_fail@plt+0x5a58>
   17320:	cmp	r7, #0
   17324:	bne	17468 <__assert_fail@plt+0x5c88>
   17328:	cmp	r5, #0
   1732c:	mov	r4, #1
   17330:	movne	r3, #34	; 0x22
   17334:	strbne	r3, [r8]
   17338:	mov	r3, #1
   1733c:	str	r3, [sp, #24]
   17340:	str	r3, [sp, #32]
   17344:	ldr	r3, [pc, #2880]	; 17e8c <__assert_fail@plt+0x66ac>
   17348:	str	r3, [sp, #44]	; 0x2c
   1734c:	b	17238 <__assert_fail@plt+0x5a58>
   17350:	cmp	sl, #10
   17354:	beq	17378 <__assert_fail@plt+0x5b98>
   17358:	mov	r1, sl
   1735c:	ldr	r0, [pc, #2860]	; 17e90 <__assert_fail@plt+0x66b0>
   17360:	bl	17078 <__assert_fail@plt+0x5898>
   17364:	mov	r1, sl
   17368:	str	r0, [sp, #156]	; 0x9c
   1736c:	ldr	r0, [pc, #2848]	; 17e94 <__assert_fail@plt+0x66b4>
   17370:	bl	17078 <__assert_fail@plt+0x5898>
   17374:	str	r0, [sp, #160]	; 0xa0
   17378:	cmp	r7, #0
   1737c:	moveq	r4, r7
   17380:	beq	17398 <__assert_fail@plt+0x5bb8>
   17384:	mov	r4, #0
   17388:	b	173a8 <__assert_fail@plt+0x5bc8>
   1738c:	cmp	r5, r4
   17390:	strbhi	r3, [r8, r4]
   17394:	add	r4, r4, #1
   17398:	ldr	r3, [sp, #156]	; 0x9c
   1739c:	ldrb	r3, [r3, r4]
   173a0:	cmp	r3, #0
   173a4:	bne	1738c <__assert_fail@plt+0x5bac>
   173a8:	ldr	r0, [sp, #160]	; 0xa0
   173ac:	bl	1163c <strlen@plt>
   173b0:	ldr	r3, [sp, #160]	; 0xa0
   173b4:	str	r0, [sp, #32]
   173b8:	str	r3, [sp, #44]	; 0x2c
   173bc:	mov	r3, #1
   173c0:	str	r3, [sp, #24]
   173c4:	b	17238 <__assert_fail@plt+0x5a58>
   173c8:	mov	r3, #1
   173cc:	cmp	r7, #0
   173d0:	streq	r3, [sp, #24]
   173d4:	beq	17418 <__assert_fail@plt+0x5c38>
   173d8:	str	r3, [sp, #32]
   173dc:	b	17404 <__assert_fail@plt+0x5c24>
   173e0:	cmp	r7, #0
   173e4:	beq	17418 <__assert_fail@plt+0x5c38>
   173e8:	mov	r3, #1
   173ec:	str	r3, [sp, #32]
   173f0:	ldr	r3, [pc, #2716]	; 17e94 <__assert_fail@plt+0x66b4>
   173f4:	b	17478 <__assert_fail@plt+0x5c98>
   173f8:	mov	r7, #1
   173fc:	str	r7, [sp, #24]
   17400:	str	r7, [sp, #32]
   17404:	ldr	r3, [pc, #2696]	; 17e94 <__assert_fail@plt+0x66b4>
   17408:	mov	r4, #0
   1740c:	str	r3, [sp, #44]	; 0x2c
   17410:	mov	sl, #2
   17414:	b	17238 <__assert_fail@plt+0x5a58>
   17418:	cmp	r5, #0
   1741c:	movne	r3, #39	; 0x27
   17420:	movne	r7, #0
   17424:	strbne	r3, [r8]
   17428:	moveq	r7, r5
   1742c:	mov	r3, #1
   17430:	mov	r4, #1
   17434:	str	r3, [sp, #32]
   17438:	ldr	r3, [pc, #2644]	; 17e94 <__assert_fail@plt+0x66b4>
   1743c:	str	r3, [sp, #44]	; 0x2c
   17440:	b	17410 <__assert_fail@plt+0x5c30>
   17444:	bl	117c8 <abort@plt>
   17448:	mov	r3, #1
   1744c:	mov	r7, #0
   17450:	str	r3, [sp, #24]
   17454:	mov	r4, #0
   17458:	b	17238 <__assert_fail@plt+0x5a58>
   1745c:	mov	r7, #1
   17460:	str	sl, [sp, #32]
   17464:	b	17404 <__assert_fail@plt+0x5c24>
   17468:	mov	r3, #1
   1746c:	str	r7, [sp, #24]
   17470:	str	r3, [sp, #32]
   17474:	ldr	r3, [pc, #2576]	; 17e8c <__assert_fail@plt+0x66ac>
   17478:	str	r3, [sp, #44]	; 0x2c
   1747c:	b	17454 <__assert_fail@plt+0x5c74>
   17480:	ldr	fp, [sp, #24]
   17484:	ldr	r3, [sp, #32]
   17488:	cmp	sl, #2
   1748c:	moveq	fp, #0
   17490:	andne	fp, fp, #1
   17494:	adds	r5, r3, #0
   17498:	movne	r5, #1
   1749c:	ands	r3, fp, r5
   174a0:	str	r3, [sp, #64]	; 0x40
   174a4:	beq	17574 <__assert_fail@plt+0x5d94>
   174a8:	ldr	r3, [sp, #28]
   174ac:	ldr	r2, [sp, #32]
   174b0:	cmp	r2, #1
   174b4:	add	r6, r3, r2
   174b8:	mov	r3, r2
   174bc:	ldr	r2, [sp, #40]	; 0x28
   174c0:	movls	r3, #0
   174c4:	movhi	r3, #1
   174c8:	cmn	r2, #1
   174cc:	movne	r3, #0
   174d0:	cmp	r3, #0
   174d4:	beq	174e4 <__assert_fail@plt+0x5d04>
   174d8:	ldr	r0, [sp, #48]	; 0x30
   174dc:	bl	1163c <strlen@plt>
   174e0:	str	r0, [sp, #40]	; 0x28
   174e4:	ldr	r3, [sp, #40]	; 0x28
   174e8:	cmp	r6, r3
   174ec:	bhi	1756c <__assert_fail@plt+0x5d8c>
   174f0:	ldr	r0, [sp, #28]
   174f4:	ldr	r2, [sp, #32]
   174f8:	ldr	r3, [sp, #48]	; 0x30
   174fc:	ldr	r1, [sp, #44]	; 0x2c
   17500:	add	r0, r3, r0
   17504:	bl	11498 <memcmp@plt>
   17508:	cmp	r0, #0
   1750c:	bne	1756c <__assert_fail@plt+0x5d8c>
   17510:	cmp	r7, #0
   17514:	beq	17574 <__assert_fail@plt+0x5d94>
   17518:	str	r7, [sp, #24]
   1751c:	ldr	r3, [sp, #24]
   17520:	mov	r1, r9
   17524:	ldr	r2, [sp, #48]	; 0x30
   17528:	cmp	sl, #2
   1752c:	movne	r3, #0
   17530:	andeq	r3, r3, #1
   17534:	cmp	r3, #0
   17538:	ldr	r3, [sp, #160]	; 0xa0
   1753c:	movne	sl, #4
   17540:	str	sl, [sp]
   17544:	str	r3, [sp, #16]
   17548:	ldr	r3, [sp, #156]	; 0x9c
   1754c:	str	r3, [sp, #12]
   17550:	mov	r3, #0
   17554:	str	r3, [sp, #8]
   17558:	ldr	r3, [sp, #148]	; 0x94
   1755c:	bic	r3, r3, #2
   17560:	str	r3, [sp, #4]
   17564:	ldr	r3, [sp, #40]	; 0x28
   17568:	b	172f0 <__assert_fail@plt+0x5b10>
   1756c:	mov	r3, #0
   17570:	str	r3, [sp, #64]	; 0x40
   17574:	ldr	r2, [sp, #28]
   17578:	ldr	r3, [sp, #48]	; 0x30
   1757c:	add	r3, r3, r2
   17580:	str	r3, [sp, #80]	; 0x50
   17584:	ldr	r3, [sp, #48]	; 0x30
   17588:	ldrb	r6, [r3, r2]
   1758c:	cmp	r6, #58	; 0x3a
   17590:	bhi	176f4 <__assert_fail@plt+0x5f14>
   17594:	cmp	r6, #43	; 0x2b
   17598:	bcs	178b4 <__assert_fail@plt+0x60d4>
   1759c:	cmp	r6, #32
   175a0:	beq	17908 <__assert_fail@plt+0x6128>
   175a4:	bhi	1764c <__assert_fail@plt+0x5e6c>
   175a8:	cmp	r6, #9
   175ac:	beq	17ab0 <__assert_fail@plt+0x62d0>
   175b0:	bhi	17610 <__assert_fail@plt+0x5e30>
   175b4:	cmp	r6, #7
   175b8:	beq	17ac0 <__assert_fail@plt+0x62e0>
   175bc:	bhi	17adc <__assert_fail@plt+0x62fc>
   175c0:	cmp	r6, #0
   175c4:	beq	17924 <__assert_fail@plt+0x6144>
   175c8:	ldr	r3, [sp, #76]	; 0x4c
   175cc:	cmp	r3, #1
   175d0:	bne	17b28 <__assert_fail@plt+0x6348>
   175d4:	bl	11618 <__ctype_b_loc@plt>
   175d8:	ldr	r2, [r0]
   175dc:	sxth	r3, r6
   175e0:	lsl	r3, r3, #1
   175e4:	ldrh	r5, [r2, r3]
   175e8:	ldr	r3, [sp, #76]	; 0x4c
   175ec:	ubfx	r5, r5, #14, #1
   175f0:	str	r3, [sp, #56]	; 0x38
   175f4:	ldr	r3, [sp, #24]
   175f8:	eor	fp, r5, #1
   175fc:	and	fp, fp, r3
   17600:	ands	fp, fp, #255	; 0xff
   17604:	beq	177e4 <__assert_fail@plt+0x6004>
   17608:	mov	r5, #0
   1760c:	b	17bd4 <__assert_fail@plt+0x63f4>
   17610:	cmp	r6, #11
   17614:	beq	17ae4 <__assert_fail@plt+0x6304>
   17618:	bcc	17ab8 <__assert_fail@plt+0x62d8>
   1761c:	cmp	r6, #12
   17620:	beq	17aec <__assert_fail@plt+0x630c>
   17624:	cmp	r6, #13
   17628:	moveq	r3, #114	; 0x72
   1762c:	bne	175c8 <__assert_fail@plt+0x5de8>
   17630:	cmp	sl, #2
   17634:	movne	r2, #0
   17638:	andeq	r2, r7, #1
   1763c:	cmp	r2, #0
   17640:	beq	17ac4 <__assert_fail@plt+0x62e4>
   17644:	mov	sl, #2
   17648:	b	1751c <__assert_fail@plt+0x5d3c>
   1764c:	cmp	r6, #37	; 0x25
   17650:	beq	178b4 <__assert_fail@plt+0x60d4>
   17654:	bhi	17668 <__assert_fail@plt+0x5e88>
   17658:	cmp	r6, #35	; 0x23
   1765c:	beq	178fc <__assert_fail@plt+0x611c>
   17660:	mov	r5, #0
   17664:	b	1790c <__assert_fail@plt+0x612c>
   17668:	cmp	r6, #39	; 0x27
   1766c:	bne	17660 <__assert_fail@plt+0x5e80>
   17670:	cmp	sl, #2
   17674:	ldrne	r5, [sp, #36]	; 0x24
   17678:	movne	r3, r5
   1767c:	strne	r3, [sp, #68]	; 0x44
   17680:	bne	17a00 <__assert_fail@plt+0x6220>
   17684:	cmp	r7, #0
   17688:	bne	1751c <__assert_fail@plt+0x5d3c>
   1768c:	ldr	r3, [sp, #60]	; 0x3c
   17690:	cmp	r9, #0
   17694:	clz	r3, r3
   17698:	lsr	r3, r3, #5
   1769c:	moveq	r3, #0
   176a0:	cmp	r3, #0
   176a4:	strne	r9, [sp, #60]	; 0x3c
   176a8:	movne	r9, #0
   176ac:	bne	176bc <__assert_fail@plt+0x5edc>
   176b0:	cmp	r9, r4
   176b4:	movhi	r3, #39	; 0x27
   176b8:	strbhi	r3, [r8, r4]
   176bc:	add	r3, r4, #1
   176c0:	ldr	r5, [sp, #36]	; 0x24
   176c4:	mov	fp, #0
   176c8:	cmp	r3, r9
   176cc:	movcc	r2, #92	; 0x5c
   176d0:	str	fp, [sp, #52]	; 0x34
   176d4:	strbcc	r2, [r8, r3]
   176d8:	add	r3, r4, #2
   176dc:	add	r4, r4, #3
   176e0:	cmp	r3, r9
   176e4:	str	r5, [sp, #68]	; 0x44
   176e8:	movcc	r2, #39	; 0x27
   176ec:	strbcc	r2, [r8, r3]
   176f0:	b	177e4 <__assert_fail@plt+0x6004>
   176f4:	cmp	r6, #94	; 0x5e
   176f8:	beq	17660 <__assert_fail@plt+0x5e80>
   176fc:	bhi	178bc <__assert_fail@plt+0x60dc>
   17700:	cmp	r6, #90	; 0x5a
   17704:	bhi	178a8 <__assert_fail@plt+0x60c8>
   17708:	cmp	r6, #65	; 0x41
   1770c:	bcs	178b4 <__assert_fail@plt+0x60d4>
   17710:	cmp	r6, #62	; 0x3e
   17714:	bls	17660 <__assert_fail@plt+0x5e80>
   17718:	cmp	r6, #63	; 0x3f
   1771c:	bne	175c8 <__assert_fail@plt+0x5de8>
   17720:	cmp	sl, #2
   17724:	beq	17a08 <__assert_fail@plt+0x6228>
   17728:	cmp	sl, #5
   1772c:	movne	fp, #0
   17730:	bne	17dd8 <__assert_fail@plt+0x65f8>
   17734:	ldr	r3, [sp, #148]	; 0x94
   17738:	tst	r3, #4
   1773c:	beq	17a10 <__assert_fail@plt+0x6230>
   17740:	ldr	r3, [sp, #28]
   17744:	add	r2, r3, #2
   17748:	ldr	r3, [sp, #40]	; 0x28
   1774c:	cmp	r2, r3
   17750:	bcs	17a10 <__assert_fail@plt+0x6230>
   17754:	ldr	r1, [sp, #28]
   17758:	ldr	r3, [sp, #48]	; 0x30
   1775c:	add	r3, r3, r1
   17760:	ldrb	r1, [r3, #1]
   17764:	cmp	r1, #63	; 0x3f
   17768:	bne	17a10 <__assert_fail@plt+0x6230>
   1776c:	ldr	r3, [sp, #48]	; 0x30
   17770:	ldrb	r6, [r3, r2]
   17774:	sub	r3, r6, #33	; 0x21
   17778:	uxtb	r3, r3
   1777c:	cmp	r3, #29
   17780:	bhi	17de0 <__assert_fail@plt+0x6600>
   17784:	ldr	r0, [pc, #1804]	; 17e98 <__assert_fail@plt+0x66b8>
   17788:	mov	r5, #1
   1778c:	ands	r5, r0, r5, lsl r3
   17790:	beq	17de8 <__assert_fail@plt+0x6608>
   17794:	cmp	r7, #0
   17798:	bne	1751c <__assert_fail@plt+0x5d3c>
   1779c:	cmp	r9, r4
   177a0:	add	r3, r4, #1
   177a4:	str	r2, [sp, #28]
   177a8:	mov	r5, #0
   177ac:	strbhi	r1, [r8, r4]
   177b0:	cmp	r9, r3
   177b4:	mov	fp, r5
   177b8:	movhi	r1, #34	; 0x22
   177bc:	strbhi	r1, [r8, r3]
   177c0:	add	r3, r4, #2
   177c4:	cmp	r9, r3
   177c8:	movhi	r1, #34	; 0x22
   177cc:	strbhi	r1, [r8, r3]
   177d0:	add	r3, r4, #3
   177d4:	add	r4, r4, #4
   177d8:	cmp	r9, r3
   177dc:	movhi	r1, #63	; 0x3f
   177e0:	strbhi	r1, [r8, r3]
   177e4:	ldr	r3, [sp, #24]
   177e8:	eor	r3, r3, #1
   177ec:	cmp	sl, #2
   177f0:	orreq	r3, r3, #1
   177f4:	eor	r3, r3, #1
   177f8:	orr	r3, r7, r3
   177fc:	tst	r3, #255	; 0xff
   17800:	beq	1782c <__assert_fail@plt+0x604c>
   17804:	ldr	r3, [sp, #152]	; 0x98
   17808:	cmp	r3, #0
   1780c:	beq	1782c <__assert_fail@plt+0x604c>
   17810:	ldr	r1, [sp, #152]	; 0x98
   17814:	ubfx	r2, r6, #5, #8
   17818:	and	r3, r6, #31
   1781c:	ldr	r2, [r1, r2, lsl #2]
   17820:	lsr	r3, r2, r3
   17824:	tst	r3, #1
   17828:	bne	17838 <__assert_fail@plt+0x6058>
   1782c:	ldr	r3, [sp, #64]	; 0x40
   17830:	cmp	r3, #0
   17834:	beq	17a30 <__assert_fail@plt+0x6250>
   17838:	sub	r3, sl, #2
   1783c:	cmp	r7, #0
   17840:	clz	r3, r3
   17844:	lsr	r3, r3, #5
   17848:	bne	1751c <__assert_fail@plt+0x5d3c>
   1784c:	ldr	r2, [sp, #52]	; 0x34
   17850:	eor	r2, r2, #1
   17854:	ands	r3, r3, r2
   17858:	beq	17890 <__assert_fail@plt+0x60b0>
   1785c:	cmp	r9, r4
   17860:	str	r3, [sp, #52]	; 0x34
   17864:	movhi	r2, #39	; 0x27
   17868:	strbhi	r2, [r8, r4]
   1786c:	add	r2, r4, #1
   17870:	cmp	r9, r2
   17874:	movhi	r1, #36	; 0x24
   17878:	strbhi	r1, [r8, r2]
   1787c:	add	r2, r4, #2
   17880:	add	r4, r4, #3
   17884:	cmp	r9, r2
   17888:	movhi	r1, #39	; 0x27
   1788c:	strbhi	r1, [r8, r2]
   17890:	cmp	r9, r4
   17894:	ldr	fp, [sp, #36]	; 0x24
   17898:	movhi	r3, #92	; 0x5c
   1789c:	strbhi	r3, [r8, r4]
   178a0:	add	r4, r4, #1
   178a4:	b	17a30 <__assert_fail@plt+0x6250>
   178a8:	cmp	r6, #92	; 0x5c
   178ac:	beq	17a18 <__assert_fail@plt+0x6238>
   178b0:	bls	17660 <__assert_fail@plt+0x5e80>
   178b4:	ldr	r5, [sp, #36]	; 0x24
   178b8:	b	17a00 <__assert_fail@plt+0x6220>
   178bc:	cmp	r6, #122	; 0x7a
   178c0:	bhi	178e0 <__assert_fail@plt+0x6100>
   178c4:	cmp	r6, #97	; 0x61
   178c8:	bcs	178b4 <__assert_fail@plt+0x60d4>
   178cc:	cmp	r6, #95	; 0x5f
   178d0:	beq	178b4 <__assert_fail@plt+0x60d4>
   178d4:	cmp	r6, #96	; 0x60
   178d8:	bne	175c8 <__assert_fail@plt+0x5de8>
   178dc:	b	17660 <__assert_fail@plt+0x5e80>
   178e0:	cmp	r6, #124	; 0x7c
   178e4:	beq	17660 <__assert_fail@plt+0x5e80>
   178e8:	bcc	17af4 <__assert_fail@plt+0x6314>
   178ec:	cmp	r6, #125	; 0x7d
   178f0:	beq	17af4 <__assert_fail@plt+0x6314>
   178f4:	cmp	r6, #126	; 0x7e
   178f8:	bne	175c8 <__assert_fail@plt+0x5de8>
   178fc:	ldr	r3, [sp, #28]
   17900:	cmp	r3, #0
   17904:	bne	17a10 <__assert_fail@plt+0x6230>
   17908:	ldr	r5, [sp, #36]	; 0x24
   1790c:	cmp	sl, #2
   17910:	movne	fp, #0
   17914:	andeq	fp, r7, #1
   17918:	cmp	fp, #0
   1791c:	beq	177e4 <__assert_fail@plt+0x6004>
   17920:	b	17644 <__assert_fail@plt+0x5e64>
   17924:	ldr	r3, [sp, #24]
   17928:	cmp	r3, #0
   1792c:	beq	179f4 <__assert_fail@plt+0x6214>
   17930:	sub	r2, sl, #2
   17934:	cmp	r7, #0
   17938:	clz	r2, r2
   1793c:	lsr	r2, r2, #5
   17940:	bne	17518 <__assert_fail@plt+0x5d38>
   17944:	ldr	r3, [sp, #52]	; 0x34
   17948:	eor	r3, r3, #1
   1794c:	ands	r2, r2, r3
   17950:	moveq	r3, r4
   17954:	beq	1798c <__assert_fail@plt+0x61ac>
   17958:	cmp	r9, r4
   1795c:	str	r2, [sp, #52]	; 0x34
   17960:	movhi	r3, #39	; 0x27
   17964:	strbhi	r3, [r8, r4]
   17968:	add	r3, r4, #1
   1796c:	cmp	r9, r3
   17970:	movhi	r1, #36	; 0x24
   17974:	strbhi	r1, [r8, r3]
   17978:	add	r3, r4, #2
   1797c:	cmp	r9, r3
   17980:	movhi	r1, #39	; 0x27
   17984:	strbhi	r1, [r8, r3]
   17988:	add	r3, r4, #3
   1798c:	cmp	r9, r3
   17990:	add	r4, r3, #1
   17994:	movhi	r2, #92	; 0x5c
   17998:	strbhi	r2, [r8, r3]
   1799c:	cmp	fp, #0
   179a0:	beq	17dc8 <__assert_fail@plt+0x65e8>
   179a4:	ldr	r2, [sp, #28]
   179a8:	ldr	r1, [sp, #40]	; 0x28
   179ac:	add	r2, r2, #1
   179b0:	cmp	r2, r1
   179b4:	bcs	179ec <__assert_fail@plt+0x620c>
   179b8:	ldr	r1, [sp, #48]	; 0x30
   179bc:	mov	r6, #48	; 0x30
   179c0:	ldrb	r2, [r1, r2]
   179c4:	sub	r2, r2, #48	; 0x30
   179c8:	cmp	r2, #9
   179cc:	bhi	17dd8 <__assert_fail@plt+0x65f8>
   179d0:	cmp	r9, r4
   179d4:	add	r2, r3, #2
   179d8:	strbhi	r6, [r8, r4]
   179dc:	cmp	r9, r2
   179e0:	add	r4, r3, #3
   179e4:	movhi	r1, #48	; 0x30
   179e8:	strbhi	r1, [r8, r2]
   179ec:	mov	r5, #0
   179f0:	b	17dd0 <__assert_fail@plt+0x65f0>
   179f4:	ldr	r3, [sp, #148]	; 0x94
   179f8:	ands	r5, r3, #1
   179fc:	bne	17a84 <__assert_fail@plt+0x62a4>
   17a00:	mov	fp, #0
   17a04:	b	177e4 <__assert_fail@plt+0x6004>
   17a08:	cmp	r7, #0
   17a0c:	bne	1751c <__assert_fail@plt+0x5d3c>
   17a10:	mov	r5, #0
   17a14:	b	17a00 <__assert_fail@plt+0x6220>
   17a18:	cmp	sl, #2
   17a1c:	bne	17a90 <__assert_fail@plt+0x62b0>
   17a20:	cmp	r7, #0
   17a24:	bne	1751c <__assert_fail@plt+0x5d3c>
   17a28:	mov	r5, r7
   17a2c:	mov	fp, r7
   17a30:	ldr	r3, [sp, #52]	; 0x34
   17a34:	eor	fp, fp, #1
   17a38:	tst	r3, fp
   17a3c:	beq	17a68 <__assert_fail@plt+0x6288>
   17a40:	cmp	r9, r4
   17a44:	movhi	r3, #39	; 0x27
   17a48:	strbhi	r3, [r8, r4]
   17a4c:	add	r3, r4, #1
   17a50:	add	r4, r4, #2
   17a54:	cmp	r9, r3
   17a58:	movhi	r2, #39	; 0x27
   17a5c:	strbhi	r2, [r8, r3]
   17a60:	mov	r3, #0
   17a64:	str	r3, [sp, #52]	; 0x34
   17a68:	cmp	r9, r4
   17a6c:	ldr	r3, [sp, #72]	; 0x48
   17a70:	strbhi	r6, [r8, r4]
   17a74:	cmp	r5, #0
   17a78:	add	r4, r4, #1
   17a7c:	moveq	r3, #0
   17a80:	str	r3, [sp, #72]	; 0x48
   17a84:	ldr	r3, [sp, #28]
   17a88:	add	r3, r3, #1
   17a8c:	b	17244 <__assert_fail@plt+0x5a64>
   17a90:	ldr	r3, [sp, #24]
   17a94:	and	r3, r3, r7
   17a98:	tst	r5, r3
   17a9c:	moveq	r3, r6
   17aa0:	beq	17630 <__assert_fail@plt+0x5e50>
   17aa4:	mov	fp, #0
   17aa8:	mov	r5, fp
   17aac:	b	17a30 <__assert_fail@plt+0x6250>
   17ab0:	mov	r3, #116	; 0x74
   17ab4:	b	17630 <__assert_fail@plt+0x5e50>
   17ab8:	mov	r3, #110	; 0x6e
   17abc:	b	17630 <__assert_fail@plt+0x5e50>
   17ac0:	mov	r3, #97	; 0x61
   17ac4:	ldr	r2, [sp, #24]
   17ac8:	cmp	r2, #0
   17acc:	beq	17a10 <__assert_fail@plt+0x6230>
   17ad0:	mov	r6, r3
   17ad4:	mov	r5, #0
   17ad8:	b	17838 <__assert_fail@plt+0x6058>
   17adc:	mov	r3, #98	; 0x62
   17ae0:	b	17ac4 <__assert_fail@plt+0x62e4>
   17ae4:	mov	r3, #118	; 0x76
   17ae8:	b	17ac4 <__assert_fail@plt+0x62e4>
   17aec:	mov	r3, #102	; 0x66
   17af0:	b	17ac4 <__assert_fail@plt+0x62e4>
   17af4:	ldr	r3, [sp, #40]	; 0x28
   17af8:	cmn	r3, #1
   17afc:	bne	17b1c <__assert_fail@plt+0x633c>
   17b00:	ldr	r3, [sp, #48]	; 0x30
   17b04:	ldrb	r3, [r3, #1]
   17b08:	adds	r3, r3, #0
   17b0c:	movne	r3, #1
   17b10:	cmp	r3, #0
   17b14:	bne	17a10 <__assert_fail@plt+0x6230>
   17b18:	b	178fc <__assert_fail@plt+0x611c>
   17b1c:	ldr	r3, [sp, #40]	; 0x28
   17b20:	subs	r3, r3, #1
   17b24:	b	17b0c <__assert_fail@plt+0x632c>
   17b28:	mov	r3, #0
   17b2c:	mov	r2, #0
   17b30:	strd	r2, [sp, #96]	; 0x60
   17b34:	ldr	r3, [sp, #40]	; 0x28
   17b38:	cmn	r3, #1
   17b3c:	bne	17b4c <__assert_fail@plt+0x636c>
   17b40:	ldr	r0, [sp, #48]	; 0x30
   17b44:	bl	1163c <strlen@plt>
   17b48:	str	r0, [sp, #40]	; 0x28
   17b4c:	ldr	r5, [sp, #36]	; 0x24
   17b50:	mov	r3, #0
   17b54:	str	r3, [sp, #56]	; 0x38
   17b58:	ldr	r3, [sp, #28]
   17b5c:	add	r0, sp, #92	; 0x5c
   17b60:	ldr	r1, [sp, #40]	; 0x28
   17b64:	ldr	r2, [sp, #56]	; 0x38
   17b68:	add	r2, r3, r2
   17b6c:	ldr	r3, [sp, #48]	; 0x30
   17b70:	add	fp, r3, r2
   17b74:	sub	r2, r1, r2
   17b78:	add	r3, sp, #96	; 0x60
   17b7c:	mov	r1, fp
   17b80:	bl	198b0 <__assert_fail@plt+0x80d0>
   17b84:	subs	r2, r0, #0
   17b88:	beq	17bc8 <__assert_fail@plt+0x63e8>
   17b8c:	cmn	r2, #1
   17b90:	beq	17d9c <__assert_fail@plt+0x65bc>
   17b94:	cmn	r2, #2
   17b98:	bne	17d0c <__assert_fail@plt+0x652c>
   17b9c:	ldr	r3, [sp, #28]
   17ba0:	ldr	r2, [sp, #56]	; 0x38
   17ba4:	add	r3, r3, r2
   17ba8:	ldr	r2, [sp, #40]	; 0x28
   17bac:	cmp	r2, r3
   17bb0:	bls	17d9c <__assert_fail@plt+0x65bc>
   17bb4:	ldr	r2, [sp, #56]	; 0x38
   17bb8:	ldr	r3, [sp, #80]	; 0x50
   17bbc:	ldrb	r5, [r3, r2]
   17bc0:	cmp	r5, #0
   17bc4:	bne	17cfc <__assert_fail@plt+0x651c>
   17bc8:	ldr	r3, [sp, #56]	; 0x38
   17bcc:	cmp	r3, #1
   17bd0:	bls	175f4 <__assert_fail@plt+0x5e14>
   17bd4:	ldr	r3, [sp, #28]
   17bd8:	mov	fp, #0
   17bdc:	mov	ip, #92	; 0x5c
   17be0:	ldr	r2, [sp, #56]	; 0x38
   17be4:	add	r3, r3, r2
   17be8:	ldr	r2, [sp, #24]
   17bec:	str	r3, [sp, #36]	; 0x24
   17bf0:	eor	r3, r5, #1
   17bf4:	and	r3, r3, r2
   17bf8:	mov	r2, #39	; 0x27
   17bfc:	uxtb	r3, r3
   17c00:	cmp	r3, #0
   17c04:	beq	17da4 <__assert_fail@plt+0x65c4>
   17c08:	sub	r0, sl, #2
   17c0c:	cmp	r7, #0
   17c10:	clz	r0, r0
   17c14:	lsr	r0, r0, #5
   17c18:	bne	17518 <__assert_fail@plt+0x5d38>
   17c1c:	ldr	r1, [sp, #52]	; 0x34
   17c20:	eor	r1, r1, #1
   17c24:	ands	r1, r0, r1
   17c28:	beq	17c58 <__assert_fail@plt+0x6478>
   17c2c:	cmp	r9, r4
   17c30:	add	r0, r4, #1
   17c34:	str	r1, [sp, #52]	; 0x34
   17c38:	strbhi	r2, [r8, r4]
   17c3c:	cmp	r9, r0
   17c40:	movhi	lr, #36	; 0x24
   17c44:	strbhi	lr, [r8, r0]
   17c48:	add	r0, r4, #2
   17c4c:	add	r4, r4, #3
   17c50:	cmp	r9, r0
   17c54:	strbhi	r2, [r8, r0]
   17c58:	cmp	r9, r4
   17c5c:	add	r0, r4, #1
   17c60:	mov	fp, r3
   17c64:	strbhi	ip, [r8, r4]
   17c68:	cmp	r9, r0
   17c6c:	lsrhi	r1, r6, #6
   17c70:	addhi	r1, r1, #48	; 0x30
   17c74:	strbhi	r1, [r8, r0]
   17c78:	add	r0, r4, #2
   17c7c:	add	r4, r4, #3
   17c80:	cmp	r9, r0
   17c84:	ubfxhi	r1, r6, #3, #3
   17c88:	and	r6, r6, #7
   17c8c:	add	r6, r6, #48	; 0x30
   17c90:	addhi	r1, r1, #48	; 0x30
   17c94:	strbhi	r1, [r8, r0]
   17c98:	eor	r0, fp, #1
   17c9c:	ldr	r1, [sp, #28]
   17ca0:	ldr	lr, [sp, #52]	; 0x34
   17ca4:	add	r1, r1, #1
   17ca8:	and	r0, r0, lr
   17cac:	ldr	lr, [sp, #36]	; 0x24
   17cb0:	cmp	r1, lr
   17cb4:	bcs	17a30 <__assert_fail@plt+0x6250>
   17cb8:	cmp	r0, #0
   17cbc:	beq	17ce0 <__assert_fail@plt+0x6500>
   17cc0:	cmp	r9, r4
   17cc4:	add	r0, r4, #1
   17cc8:	strbhi	r2, [r8, r4]
   17ccc:	cmp	r9, r0
   17cd0:	add	r4, r4, #2
   17cd4:	strbhi	r2, [r8, r0]
   17cd8:	mov	r0, #0
   17cdc:	str	r0, [sp, #52]	; 0x34
   17ce0:	ldr	r0, [sp, #48]	; 0x30
   17ce4:	cmp	r9, r4
   17ce8:	str	r1, [sp, #28]
   17cec:	strbhi	r6, [r8, r4]
   17cf0:	add	r4, r4, #1
   17cf4:	ldrb	r6, [r0, r1]
   17cf8:	b	17c00 <__assert_fail@plt+0x6420>
   17cfc:	ldr	r3, [sp, #56]	; 0x38
   17d00:	add	r3, r3, #1
   17d04:	str	r3, [sp, #56]	; 0x38
   17d08:	b	17b9c <__assert_fail@plt+0x63bc>
   17d0c:	cmp	sl, #2
   17d10:	movne	r3, #0
   17d14:	andeq	r3, r7, #1
   17d18:	cmp	r3, #0
   17d1c:	movne	r1, #1
   17d20:	bne	17d7c <__assert_fail@plt+0x659c>
   17d24:	ldr	r0, [sp, #92]	; 0x5c
   17d28:	str	r2, [sp, #84]	; 0x54
   17d2c:	bl	11558 <iswprint@plt>
   17d30:	ldr	r3, [sp, #56]	; 0x38
   17d34:	cmp	r0, #0
   17d38:	add	r0, sp, #96	; 0x60
   17d3c:	moveq	r5, #0
   17d40:	ldr	r2, [sp, #84]	; 0x54
   17d44:	add	r3, r3, r2
   17d48:	str	r3, [sp, #56]	; 0x38
   17d4c:	bl	1148c <mbsinit@plt>
   17d50:	cmp	r0, #0
   17d54:	beq	17b58 <__assert_fail@plt+0x6378>
   17d58:	b	17bc8 <__assert_fail@plt+0x63e8>
   17d5c:	ldrb	r3, [fp, #1]!
   17d60:	cmp	r3, #94	; 0x5e
   17d64:	beq	17644 <__assert_fail@plt+0x5e64>
   17d68:	bhi	17d88 <__assert_fail@plt+0x65a8>
   17d6c:	sub	r3, r3, #91	; 0x5b
   17d70:	cmp	r3, #1
   17d74:	bls	17644 <__assert_fail@plt+0x5e64>
   17d78:	add	r1, r1, #1
   17d7c:	cmp	r1, r2
   17d80:	bne	17d5c <__assert_fail@plt+0x657c>
   17d84:	b	17d24 <__assert_fail@plt+0x6544>
   17d88:	cmp	r3, #96	; 0x60
   17d8c:	beq	17644 <__assert_fail@plt+0x5e64>
   17d90:	cmp	r3, #124	; 0x7c
   17d94:	bne	17d78 <__assert_fail@plt+0x6598>
   17d98:	b	17644 <__assert_fail@plt+0x5e64>
   17d9c:	mov	r5, #0
   17da0:	b	17bc8 <__assert_fail@plt+0x63e8>
   17da4:	ldr	r1, [sp, #64]	; 0x40
   17da8:	cmp	r1, #0
   17dac:	beq	17c98 <__assert_fail@plt+0x64b8>
   17db0:	cmp	r9, r4
   17db4:	mov	r1, #0
   17db8:	strbhi	ip, [r8, r4]
   17dbc:	add	r4, r4, #1
   17dc0:	str	r1, [sp, #64]	; 0x40
   17dc4:	b	17c98 <__assert_fail@plt+0x64b8>
   17dc8:	mov	r5, fp
   17dcc:	ldr	fp, [sp, #24]
   17dd0:	mov	r6, #48	; 0x30
   17dd4:	b	177e4 <__assert_fail@plt+0x6004>
   17dd8:	mov	r5, #0
   17ddc:	b	177e4 <__assert_fail@plt+0x6004>
   17de0:	mov	r6, r1
   17de4:	b	17a10 <__assert_fail@plt+0x6230>
   17de8:	mov	r6, r1
   17dec:	b	17a00 <__assert_fail@plt+0x6220>
   17df0:	ldr	r2, [sp, #28]
   17df4:	ldr	r3, [sp, #40]	; 0x28
   17df8:	subs	r3, r3, r2
   17dfc:	movne	r3, #1
   17e00:	b	17268 <__assert_fail@plt+0x5a88>
   17e04:	ldr	r3, [sp, #60]	; 0x3c
   17e08:	mov	sl, #2
   17e0c:	ldr	r7, [sp, #72]	; 0x48
   17e10:	adds	r6, r3, #0
   17e14:	mov	r5, r3
   17e18:	movne	r6, #1
   17e1c:	cmp	r9, #0
   17e20:	movne	r6, #0
   17e24:	cmp	r6, #0
   17e28:	bne	171f8 <__assert_fail@plt+0x5a18>
   17e2c:	ldr	r3, [sp, #68]	; 0x44
   17e30:	ldr	r2, [sp, #44]	; 0x2c
   17e34:	cmp	r2, #0
   17e38:	moveq	r3, #0
   17e3c:	andne	r3, r3, #1
   17e40:	cmp	r3, #0
   17e44:	movne	r3, r2
   17e48:	subne	r3, r3, #1
   17e4c:	bne	17e7c <__assert_fail@plt+0x669c>
   17e50:	cmp	r9, r4
   17e54:	movhi	r3, #0
   17e58:	strbhi	r3, [r8, r4]
   17e5c:	mov	r0, r4
   17e60:	add	sp, sp, #108	; 0x6c
   17e64:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17e68:	mov	r3, r7
   17e6c:	b	17e30 <__assert_fail@plt+0x6650>
   17e70:	cmp	r9, r4
   17e74:	strbhi	r2, [r8, r4]
   17e78:	add	r4, r4, #1
   17e7c:	ldrb	r2, [r3, #1]!
   17e80:	cmp	r2, #0
   17e84:	bne	17e70 <__assert_fail@plt+0x6690>
   17e88:	b	17e50 <__assert_fail@plt+0x6670>
   17e8c:	andeq	lr, r1, r0, lsr #10
   17e90:	andeq	lr, r1, r1, lsr r5
   17e94:	strdeq	lr, [r1], -r1
   17e98:	stmdacc	r0, {r0, r6, r7, r8, ip, lr}
   17e9c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17ea0:	sub	sp, sp, #52	; 0x34
   17ea4:	mov	r6, r0
   17ea8:	mov	r5, r3
   17eac:	mov	r8, r1
   17eb0:	mov	r9, r2
   17eb4:	bl	1166c <__errno_location@plt>
   17eb8:	ldr	r3, [r0]
   17ebc:	cmn	r6, #-2147483647	; 0x80000001
   17ec0:	str	r0, [sp, #24]
   17ec4:	ldr	r7, [pc, #368]	; 1803c <__assert_fail@plt+0x685c>
   17ec8:	str	r3, [sp, #32]
   17ecc:	movne	r3, #0
   17ed0:	moveq	r3, #1
   17ed4:	orrs	r3, r3, r6, lsr #31
   17ed8:	ldr	r4, [r7]
   17edc:	beq	17ee4 <__assert_fail@plt+0x6704>
   17ee0:	bl	117c8 <abort@plt>
   17ee4:	ldr	r2, [r7, #4]
   17ee8:	cmp	r2, r6
   17eec:	bgt	17f5c <__assert_fail@plt+0x677c>
   17ef0:	add	sl, r7, #8
   17ef4:	mov	r3, #8
   17ef8:	cmp	r4, sl
   17efc:	add	r1, sp, #44	; 0x2c
   17f00:	str	r2, [sp, #44]	; 0x2c
   17f04:	sub	r2, r6, r2
   17f08:	movne	r0, r4
   17f0c:	moveq	r0, #0
   17f10:	add	r2, r2, #1
   17f14:	str	r3, [sp]
   17f18:	mvn	r3, #-2147483648	; 0x80000000
   17f1c:	bl	19140 <__assert_fail@plt+0x7960>
   17f20:	cmp	r4, sl
   17f24:	mov	fp, r0
   17f28:	str	r0, [r7]
   17f2c:	ldmeq	r4, {r0, r1}
   17f30:	mov	r4, fp
   17f34:	ldr	r2, [sp, #44]	; 0x2c
   17f38:	stmeq	fp, {r0, r1}
   17f3c:	mov	r1, #0
   17f40:	ldr	r0, [r7, #4]
   17f44:	sub	r2, r2, r0
   17f48:	add	r0, fp, r0, lsl #3
   17f4c:	lsl	r2, r2, #3
   17f50:	bl	1169c <memset@plt>
   17f54:	ldr	r3, [sp, #44]	; 0x2c
   17f58:	str	r3, [r7, #4]
   17f5c:	ldr	r3, [r5, #4]
   17f60:	add	sl, r4, r6, lsl #3
   17f64:	mov	r2, r8
   17f68:	ldr	fp, [r4, r6, lsl #3]
   17f6c:	ldr	r7, [sl, #4]
   17f70:	orr	r3, r3, #1
   17f74:	str	r3, [sp, #28]
   17f78:	add	r3, r5, #8
   17f7c:	mov	r1, fp
   17f80:	str	r3, [sp, #36]	; 0x24
   17f84:	mov	r0, r7
   17f88:	ldr	r3, [r5, #44]	; 0x2c
   17f8c:	str	r3, [sp, #16]
   17f90:	ldr	r3, [r5, #40]	; 0x28
   17f94:	str	r3, [sp, #12]
   17f98:	add	r3, r5, #8
   17f9c:	str	r3, [sp, #8]
   17fa0:	ldr	r3, [sp, #28]
   17fa4:	str	r3, [sp, #4]
   17fa8:	ldr	r3, [r5]
   17fac:	str	r3, [sp]
   17fb0:	mov	r3, r9
   17fb4:	bl	171ac <__assert_fail@plt+0x59cc>
   17fb8:	cmp	fp, r0
   17fbc:	bhi	18024 <__assert_fail@plt+0x6844>
   17fc0:	ldr	r3, [pc, #120]	; 18040 <__assert_fail@plt+0x6860>
   17fc4:	add	fp, r0, #1
   17fc8:	str	fp, [r4, r6, lsl #3]
   17fcc:	cmp	r7, r3
   17fd0:	beq	17fdc <__assert_fail@plt+0x67fc>
   17fd4:	mov	r0, r7
   17fd8:	bl	16934 <__assert_fail@plt+0x5154>
   17fdc:	mov	r0, fp
   17fe0:	bl	19030 <__assert_fail@plt+0x7850>
   17fe4:	ldr	r3, [r5, #44]	; 0x2c
   17fe8:	mov	r2, r8
   17fec:	mov	r1, fp
   17ff0:	str	r0, [sl, #4]
   17ff4:	mov	r7, r0
   17ff8:	str	r3, [sp, #16]
   17ffc:	ldr	r3, [r5, #40]	; 0x28
   18000:	str	r3, [sp, #12]
   18004:	add	r3, r5, #8
   18008:	str	r3, [sp, #8]
   1800c:	ldr	r3, [sp, #28]
   18010:	str	r3, [sp, #4]
   18014:	ldr	r3, [r5]
   18018:	str	r3, [sp]
   1801c:	mov	r3, r9
   18020:	bl	171ac <__assert_fail@plt+0x59cc>
   18024:	ldr	r3, [sp, #24]
   18028:	mov	r0, r7
   1802c:	ldr	r2, [sp, #32]
   18030:	str	r2, [r3]
   18034:	add	sp, sp, #52	; 0x34
   18038:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1803c:	andeq	pc, r2, r8, lsl #3
   18040:	andeq	pc, r2, r4, lsl #4
   18044:	push	{r4, r5, r6, lr}
   18048:	mov	r5, r0
   1804c:	bl	1166c <__errno_location@plt>
   18050:	mov	r4, r0
   18054:	cmp	r5, #0
   18058:	ldr	r0, [pc, #20]	; 18074 <__assert_fail@plt+0x6894>
   1805c:	mov	r1, #48	; 0x30
   18060:	movne	r0, r5
   18064:	ldr	r6, [r4]
   18068:	bl	19230 <__assert_fail@plt+0x7a50>
   1806c:	str	r6, [r4]
   18070:	pop	{r4, r5, r6, pc}
   18074:	andeq	pc, r2, r4, lsl #6
   18078:	ldr	r3, [pc, #12]	; 1808c <__assert_fail@plt+0x68ac>
   1807c:	cmp	r0, #0
   18080:	moveq	r0, r3
   18084:	ldr	r0, [r0]
   18088:	bx	lr
   1808c:	andeq	pc, r2, r4, lsl #6
   18090:	ldr	r3, [pc, #12]	; 180a4 <__assert_fail@plt+0x68c4>
   18094:	cmp	r0, #0
   18098:	moveq	r0, r3
   1809c:	str	r1, [r0]
   180a0:	bx	lr
   180a4:	andeq	pc, r2, r4, lsl #6
   180a8:	ldr	r3, [pc, #52]	; 180e4 <__assert_fail@plt+0x6904>
   180ac:	cmp	r0, #0
   180b0:	push	{lr}		; (str lr, [sp, #-4]!)
   180b4:	lsr	lr, r1, #5
   180b8:	and	r1, r1, #31
   180bc:	moveq	r0, r3
   180c0:	add	r3, r0, #8
   180c4:	ldr	ip, [r3, lr, lsl #2]
   180c8:	lsr	r0, ip, r1
   180cc:	eor	r2, r2, r0
   180d0:	and	r0, r0, #1
   180d4:	and	r2, r2, #1
   180d8:	eor	r1, ip, r2, lsl r1
   180dc:	str	r1, [r3, lr, lsl #2]
   180e0:	pop	{pc}		; (ldr pc, [sp], #4)
   180e4:	andeq	pc, r2, r4, lsl #6
   180e8:	ldr	r3, [pc, #16]	; 18100 <__assert_fail@plt+0x6920>
   180ec:	cmp	r0, #0
   180f0:	movne	r3, r0
   180f4:	ldr	r0, [r3, #4]
   180f8:	str	r1, [r3, #4]
   180fc:	bx	lr
   18100:	andeq	pc, r2, r4, lsl #6
   18104:	ldr	r3, [pc, #44]	; 18138 <__assert_fail@plt+0x6958>
   18108:	cmp	r0, #0
   1810c:	moveq	r0, r3
   18110:	mov	r3, #10
   18114:	cmp	r2, #0
   18118:	cmpne	r1, #0
   1811c:	str	r3, [r0]
   18120:	bne	1812c <__assert_fail@plt+0x694c>
   18124:	push	{r4, lr}
   18128:	bl	117c8 <abort@plt>
   1812c:	str	r1, [r0, #40]	; 0x28
   18130:	str	r2, [r0, #44]	; 0x2c
   18134:	bx	lr
   18138:	andeq	pc, r2, r4, lsl #6
   1813c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   18140:	sub	sp, sp, #24
   18144:	mov	sl, r3
   18148:	mov	r7, r0
   1814c:	mov	r8, r1
   18150:	mov	r9, r2
   18154:	ldr	r4, [sp, #56]	; 0x38
   18158:	ldr	r3, [pc, #88]	; 181b8 <__assert_fail@plt+0x69d8>
   1815c:	cmp	r4, #0
   18160:	moveq	r4, r3
   18164:	bl	1166c <__errno_location@plt>
   18168:	ldr	r3, [r4, #44]	; 0x2c
   1816c:	mov	r5, r0
   18170:	mov	r2, r9
   18174:	mov	r1, r8
   18178:	mov	r0, r7
   1817c:	ldr	r6, [r5]
   18180:	str	r3, [sp, #16]
   18184:	ldr	r3, [r4, #40]	; 0x28
   18188:	str	r3, [sp, #12]
   1818c:	add	r3, r4, #8
   18190:	str	r3, [sp, #8]
   18194:	ldr	r3, [r4, #4]
   18198:	str	r3, [sp, #4]
   1819c:	ldr	r3, [r4]
   181a0:	str	r3, [sp]
   181a4:	mov	r3, sl
   181a8:	bl	171ac <__assert_fail@plt+0x59cc>
   181ac:	str	r6, [r5]
   181b0:	add	sp, sp, #24
   181b4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   181b8:	andeq	pc, r2, r4, lsl #6
   181bc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   181c0:	cmp	r3, #0
   181c4:	sub	sp, sp, #44	; 0x2c
   181c8:	mov	r6, r2
   181cc:	mov	sl, r1
   181d0:	mov	r9, r0
   181d4:	ldr	r4, [pc, #176]	; 1828c <__assert_fail@plt+0x6aac>
   181d8:	movne	r4, r3
   181dc:	bl	1166c <__errno_location@plt>
   181e0:	ldr	r3, [r0]
   181e4:	mov	r1, #0
   181e8:	mov	r2, r9
   181ec:	mov	r8, r0
   181f0:	mov	r0, r1
   181f4:	ldr	r5, [r4, #4]
   181f8:	add	fp, r4, #8
   181fc:	str	r3, [sp, #28]
   18200:	ldr	r3, [r4, #44]	; 0x2c
   18204:	cmp	r6, #0
   18208:	orreq	r5, r5, #1
   1820c:	str	r3, [sp, #16]
   18210:	ldr	r3, [r4, #40]	; 0x28
   18214:	stmib	sp, {r5, fp}
   18218:	str	r3, [sp, #12]
   1821c:	ldr	r3, [r4]
   18220:	str	r3, [sp]
   18224:	mov	r3, sl
   18228:	bl	171ac <__assert_fail@plt+0x59cc>
   1822c:	add	r1, r0, #1
   18230:	mov	r7, r0
   18234:	mov	r0, r1
   18238:	str	r1, [sp, #36]	; 0x24
   1823c:	bl	19030 <__assert_fail@plt+0x7850>
   18240:	ldr	r3, [r4, #44]	; 0x2c
   18244:	mov	r2, r9
   18248:	ldr	r1, [sp, #36]	; 0x24
   1824c:	str	r3, [sp, #16]
   18250:	ldr	r3, [r4, #40]	; 0x28
   18254:	stmib	sp, {r5, fp}
   18258:	str	r0, [sp, #32]
   1825c:	str	r3, [sp, #12]
   18260:	ldr	r3, [r4]
   18264:	str	r3, [sp]
   18268:	mov	r3, sl
   1826c:	bl	171ac <__assert_fail@plt+0x59cc>
   18270:	ldr	r3, [sp, #28]
   18274:	cmp	r6, #0
   18278:	ldr	r0, [sp, #32]
   1827c:	str	r3, [r8]
   18280:	strne	r7, [r6]
   18284:	add	sp, sp, #44	; 0x2c
   18288:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1828c:	andeq	pc, r2, r4, lsl #6
   18290:	mov	r3, r2
   18294:	mov	r2, #0
   18298:	b	181bc <__assert_fail@plt+0x69dc>
   1829c:	push	{r4, r5, r6, r7, r8, lr}
   182a0:	mov	r6, #1
   182a4:	ldr	r4, [pc, #100]	; 18310 <__assert_fail@plt+0x6b30>
   182a8:	ldr	r5, [r4]
   182ac:	add	r7, r5, #4
   182b0:	ldr	r3, [r4, #4]
   182b4:	cmp	r3, r6
   182b8:	bgt	18300 <__assert_fail@plt+0x6b20>
   182bc:	ldr	r6, [pc, #80]	; 18314 <__assert_fail@plt+0x6b34>
   182c0:	ldr	r0, [r5, #4]
   182c4:	cmp	r0, r6
   182c8:	beq	182dc <__assert_fail@plt+0x6afc>
   182cc:	bl	16934 <__assert_fail@plt+0x5154>
   182d0:	mov	r3, #256	; 0x100
   182d4:	str	r3, [r4, #8]
   182d8:	str	r6, [r4, #12]
   182dc:	ldr	r6, [pc, #52]	; 18318 <__assert_fail@plt+0x6b38>
   182e0:	cmp	r5, r6
   182e4:	beq	182f4 <__assert_fail@plt+0x6b14>
   182e8:	mov	r0, r5
   182ec:	bl	16934 <__assert_fail@plt+0x5154>
   182f0:	str	r6, [r4]
   182f4:	mov	r3, #1
   182f8:	str	r3, [r4, #4]
   182fc:	pop	{r4, r5, r6, r7, r8, pc}
   18300:	ldr	r0, [r7, r6, lsl #3]
   18304:	add	r6, r6, #1
   18308:	bl	16934 <__assert_fail@plt+0x5154>
   1830c:	b	182b0 <__assert_fail@plt+0x6ad0>
   18310:	andeq	pc, r2, r8, lsl #3
   18314:	andeq	pc, r2, r4, lsl #4
   18318:	muleq	r2, r0, r1
   1831c:	ldr	r3, [pc, #4]	; 18328 <__assert_fail@plt+0x6b48>
   18320:	mvn	r2, #0
   18324:	b	17e9c <__assert_fail@plt+0x66bc>
   18328:	andeq	pc, r2, r4, lsl #6
   1832c:	ldr	r3, [pc]	; 18334 <__assert_fail@plt+0x6b54>
   18330:	b	17e9c <__assert_fail@plt+0x66bc>
   18334:	andeq	pc, r2, r4, lsl #6
   18338:	mov	r1, r0
   1833c:	mov	r0, #0
   18340:	b	1831c <__assert_fail@plt+0x6b3c>
   18344:	mov	r2, r1
   18348:	mov	r1, r0
   1834c:	mov	r0, #0
   18350:	b	1832c <__assert_fail@plt+0x6b4c>
   18354:	push	{r4, r5, lr}
   18358:	sub	sp, sp, #52	; 0x34
   1835c:	mov	r5, r2
   18360:	mov	r4, r0
   18364:	mov	r0, sp
   18368:	bl	17050 <__assert_fail@plt+0x5870>
   1836c:	mov	r3, sp
   18370:	mvn	r2, #0
   18374:	mov	r1, r5
   18378:	mov	r0, r4
   1837c:	bl	17e9c <__assert_fail@plt+0x66bc>
   18380:	add	sp, sp, #52	; 0x34
   18384:	pop	{r4, r5, pc}
   18388:	push	{r4, r5, r6, lr}
   1838c:	sub	sp, sp, #48	; 0x30
   18390:	mov	r5, r2
   18394:	mov	r6, r3
   18398:	mov	r4, r0
   1839c:	mov	r0, sp
   183a0:	bl	17050 <__assert_fail@plt+0x5870>
   183a4:	mov	r3, sp
   183a8:	mov	r2, r6
   183ac:	mov	r1, r5
   183b0:	mov	r0, r4
   183b4:	bl	17e9c <__assert_fail@plt+0x66bc>
   183b8:	add	sp, sp, #48	; 0x30
   183bc:	pop	{r4, r5, r6, pc}
   183c0:	mov	r2, r1
   183c4:	mov	r1, r0
   183c8:	mov	r0, #0
   183cc:	b	18354 <__assert_fail@plt+0x6b74>
   183d0:	mov	r3, r2
   183d4:	mov	r2, r1
   183d8:	mov	r1, r0
   183dc:	mov	r0, #0
   183e0:	b	18388 <__assert_fail@plt+0x6ba8>
   183e4:	push	{r4, r5, r6, lr}
   183e8:	mov	r4, r0
   183ec:	mov	r5, r1
   183f0:	mov	r6, r2
   183f4:	sub	sp, sp, #48	; 0x30
   183f8:	mov	ip, sp
   183fc:	ldr	lr, [pc, #64]	; 18444 <__assert_fail@plt+0x6c64>
   18400:	ldm	lr!, {r0, r1, r2, r3}
   18404:	stmia	ip!, {r0, r1, r2, r3}
   18408:	ldm	lr!, {r0, r1, r2, r3}
   1840c:	stmia	ip!, {r0, r1, r2, r3}
   18410:	ldm	lr, {r0, r1, r2, r3}
   18414:	stm	ip, {r0, r1, r2, r3}
   18418:	mov	r1, r6
   1841c:	mov	r2, #1
   18420:	mov	r0, sp
   18424:	bl	180a8 <__assert_fail@plt+0x68c8>
   18428:	mov	r3, sp
   1842c:	mov	r2, r5
   18430:	mov	r1, r4
   18434:	mov	r0, #0
   18438:	bl	17e9c <__assert_fail@plt+0x66bc>
   1843c:	add	sp, sp, #48	; 0x30
   18440:	pop	{r4, r5, r6, pc}
   18444:	andeq	pc, r2, r4, lsl #6
   18448:	mov	r2, r1
   1844c:	mvn	r1, #0
   18450:	b	183e4 <__assert_fail@plt+0x6c04>
   18454:	mov	r1, #58	; 0x3a
   18458:	b	18448 <__assert_fail@plt+0x6c68>
   1845c:	mov	r2, #58	; 0x3a
   18460:	b	183e4 <__assert_fail@plt+0x6c04>
   18464:	push	{r4, r5, lr}
   18468:	sub	sp, sp, #100	; 0x64
   1846c:	mov	r4, r0
   18470:	mov	r0, sp
   18474:	mov	r5, r2
   18478:	bl	17050 <__assert_fail@plt+0x5870>
   1847c:	mov	ip, sp
   18480:	add	lr, sp, #48	; 0x30
   18484:	ldm	ip!, {r0, r1, r2, r3}
   18488:	stmia	lr!, {r0, r1, r2, r3}
   1848c:	ldm	ip!, {r0, r1, r2, r3}
   18490:	stmia	lr!, {r0, r1, r2, r3}
   18494:	ldm	ip, {r0, r1, r2, r3}
   18498:	stm	lr, {r0, r1, r2, r3}
   1849c:	mov	r2, #1
   184a0:	mov	r1, #58	; 0x3a
   184a4:	add	r0, sp, #48	; 0x30
   184a8:	bl	180a8 <__assert_fail@plt+0x68c8>
   184ac:	add	r3, sp, #48	; 0x30
   184b0:	mvn	r2, #0
   184b4:	mov	r1, r5
   184b8:	mov	r0, r4
   184bc:	bl	17e9c <__assert_fail@plt+0x66bc>
   184c0:	add	sp, sp, #100	; 0x64
   184c4:	pop	{r4, r5, pc}
   184c8:	push	{r4, r5, r6, r7, lr}
   184cc:	mov	r4, r0
   184d0:	mov	r6, r1
   184d4:	mov	r7, r2
   184d8:	mov	r5, r3
   184dc:	sub	sp, sp, #52	; 0x34
   184e0:	ldr	lr, [pc, #68]	; 1852c <__assert_fail@plt+0x6d4c>
   184e4:	mov	ip, sp
   184e8:	ldm	lr!, {r0, r1, r2, r3}
   184ec:	stmia	ip!, {r0, r1, r2, r3}
   184f0:	ldm	lr!, {r0, r1, r2, r3}
   184f4:	stmia	ip!, {r0, r1, r2, r3}
   184f8:	ldm	lr, {r0, r1, r2, r3}
   184fc:	stm	ip, {r0, r1, r2, r3}
   18500:	mov	r2, r7
   18504:	mov	r1, r6
   18508:	mov	r0, sp
   1850c:	bl	18104 <__assert_fail@plt+0x6924>
   18510:	ldr	r2, [sp, #72]	; 0x48
   18514:	mov	r3, sp
   18518:	mov	r1, r5
   1851c:	mov	r0, r4
   18520:	bl	17e9c <__assert_fail@plt+0x66bc>
   18524:	add	sp, sp, #52	; 0x34
   18528:	pop	{r4, r5, r6, r7, pc}
   1852c:	andeq	pc, r2, r4, lsl #6
   18530:	mvn	ip, #0
   18534:	push	{r0, r1, r2, lr}
   18538:	str	ip, [sp]
   1853c:	bl	184c8 <__assert_fail@plt+0x6ce8>
   18540:	add	sp, sp, #12
   18544:	pop	{pc}		; (ldr pc, [sp], #4)
   18548:	mov	r3, r2
   1854c:	mov	r2, r1
   18550:	mov	r1, r0
   18554:	mov	r0, #0
   18558:	b	18530 <__assert_fail@plt+0x6d50>
   1855c:	push	{r0, r1, r2, lr}
   18560:	str	r3, [sp]
   18564:	mov	r3, r2
   18568:	mov	r2, r1
   1856c:	mov	r1, r0
   18570:	mov	r0, #0
   18574:	bl	184c8 <__assert_fail@plt+0x6ce8>
   18578:	add	sp, sp, #12
   1857c:	pop	{pc}		; (ldr pc, [sp], #4)
   18580:	ldr	r3, [pc]	; 18588 <__assert_fail@plt+0x6da8>
   18584:	b	17e9c <__assert_fail@plt+0x66bc>
   18588:	muleq	r2, r8, r1
   1858c:	mov	r2, r1
   18590:	mov	r1, r0
   18594:	mov	r0, #0
   18598:	b	18580 <__assert_fail@plt+0x6da0>
   1859c:	mvn	r2, #0
   185a0:	b	18580 <__assert_fail@plt+0x6da0>
   185a4:	mov	r1, r0
   185a8:	mov	r0, #0
   185ac:	b	1859c <__assert_fail@plt+0x6dbc>
   185b0:	mov	r3, #0
   185b4:	str	r3, [r0]
   185b8:	str	r3, [r0, #4]
   185bc:	bx	lr
   185c0:	push	{r4, r5, r6, r7, r8, r9, lr}
   185c4:	sub	sp, sp, #52	; 0x34
   185c8:	mov	r4, r1
   185cc:	add	r7, sp, #16
   185d0:	mov	r5, r2
   185d4:	mov	r1, #0
   185d8:	mov	r8, r0
   185dc:	mov	r2, #32
   185e0:	mov	r0, r7
   185e4:	mov	r6, r3
   185e8:	add	r5, r4, r5
   185ec:	bl	1169c <memset@plt>
   185f0:	mov	r1, r4
   185f4:	mov	ip, #1
   185f8:	cmp	r5, r1
   185fc:	bne	186a4 <__assert_fail@plt+0x6ec4>
   18600:	mov	r0, r8
   18604:	bl	114b0 <getc_unlocked@plt>
   18608:	cmp	r0, #0
   1860c:	mov	r4, r0
   18610:	blt	18634 <__assert_fail@plt+0x6e54>
   18614:	lsr	r2, r0, #5
   18618:	add	r3, sp, #48	; 0x30
   1861c:	add	r2, r3, r2, lsl #2
   18620:	and	r3, r0, #31
   18624:	ldr	r2, [r2, #-32]	; 0xffffffe0
   18628:	lsr	r3, r2, r3
   1862c:	tst	r3, #1
   18630:	bne	18600 <__assert_fail@plt+0x6e20>
   18634:	ldm	r6, {r3, r7}
   18638:	mov	r5, #0
   1863c:	mov	r9, #1
   18640:	str	r3, [sp, #12]
   18644:	clz	r3, r5
   18648:	lsr	r3, r3, #5
   1864c:	ands	r3, r3, r4, lsr #31
   18650:	bne	186f8 <__assert_fail@plt+0x6f18>
   18654:	ldr	r3, [sp, #12]
   18658:	cmp	r3, r5
   1865c:	bne	1867c <__assert_fail@plt+0x6e9c>
   18660:	mov	r0, r7
   18664:	mvn	r3, #0
   18668:	str	r9, [sp]
   1866c:	mov	r2, #1
   18670:	add	r1, sp, #12
   18674:	bl	19140 <__assert_fail@plt+0x7960>
   18678:	mov	r7, r0
   1867c:	cmp	r4, #0
   18680:	mov	r0, r5
   18684:	add	r3, r7, r5
   18688:	bge	186c0 <__assert_fail@plt+0x6ee0>
   1868c:	mov	r2, #0
   18690:	strb	r2, [r3]
   18694:	ldr	r3, [sp, #12]
   18698:	stm	r6, {r3, r7}
   1869c:	add	sp, sp, #52	; 0x34
   186a0:	pop	{r4, r5, r6, r7, r8, r9, pc}
   186a4:	ldrb	r3, [r1], #1
   186a8:	lsr	r0, r3, #5
   186ac:	and	r3, r3, #31
   186b0:	ldr	r2, [r7, r0, lsl #2]
   186b4:	orr	r3, r2, ip, lsl r3
   186b8:	str	r3, [r7, r0, lsl #2]
   186bc:	b	185f8 <__assert_fail@plt+0x6e18>
   186c0:	lsr	r1, r4, #5
   186c4:	add	r2, sp, #48	; 0x30
   186c8:	add	r1, r2, r1, lsl #2
   186cc:	and	r2, r4, #31
   186d0:	ldr	r1, [r1, #-32]	; 0xffffffe0
   186d4:	lsr	r2, r1, r2
   186d8:	tst	r2, #1
   186dc:	bne	1868c <__assert_fail@plt+0x6eac>
   186e0:	mov	r0, r8
   186e4:	strb	r4, [r3]
   186e8:	add	r5, r5, #1
   186ec:	bl	114b0 <getc_unlocked@plt>
   186f0:	mov	r4, r0
   186f4:	b	18644 <__assert_fail@plt+0x6e64>
   186f8:	mvn	r0, #0
   186fc:	b	1869c <__assert_fail@plt+0x6ebc>
   18700:	cmp	r1, #0
   18704:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18708:	mov	r8, r0
   1870c:	sub	sp, sp, #36	; 0x24
   18710:	addne	r0, r1, #1
   18714:	moveq	r0, #64	; 0x40
   18718:	mov	r1, #4
   1871c:	mov	r9, r2
   18720:	mov	sl, r3
   18724:	str	r0, [sp, #20]
   18728:	mov	r4, #0
   1872c:	mov	fp, #4
   18730:	bl	190c8 <__assert_fail@plt+0x78e8>
   18734:	mov	r6, r0
   18738:	mov	r1, #4
   1873c:	ldr	r0, [sp, #20]
   18740:	bl	190c8 <__assert_fail@plt+0x78e8>
   18744:	mov	r5, r0
   18748:	str	r4, [sp, #24]
   1874c:	str	r4, [sp, #28]
   18750:	add	r3, sp, #24
   18754:	mov	r2, sl
   18758:	mov	r1, r9
   1875c:	mov	r0, r8
   18760:	bl	185c0 <__assert_fail@plt+0x6de0>
   18764:	ldr	r3, [sp, #20]
   18768:	mov	r7, r0
   1876c:	cmp	r3, r4
   18770:	bgt	187a4 <__assert_fail@plt+0x6fc4>
   18774:	mvn	r3, #0
   18778:	mov	r2, #1
   1877c:	str	fp, [sp]
   18780:	add	r1, sp, #20
   18784:	mov	r0, r6
   18788:	bl	19140 <__assert_fail@plt+0x7960>
   1878c:	mov	r6, r0
   18790:	mov	r2, #4
   18794:	ldr	r1, [sp, #20]
   18798:	mov	r0, r5
   1879c:	bl	1907c <__assert_fail@plt+0x789c>
   187a0:	mov	r5, r0
   187a4:	lsl	r3, r4, #2
   187a8:	cmn	r7, #1
   187ac:	add	r1, r5, r3
   187b0:	add	r3, r6, r3
   187b4:	bne	187fc <__assert_fail@plt+0x701c>
   187b8:	mov	r2, #0
   187bc:	str	r2, [r3]
   187c0:	str	r2, [r1]
   187c4:	ldr	r0, [sp, #28]
   187c8:	bl	16934 <__assert_fail@plt+0x5154>
   187cc:	ldr	r3, [sp, #72]	; 0x48
   187d0:	str	r6, [r3]
   187d4:	ldr	r3, [sp, #76]	; 0x4c
   187d8:	cmp	r3, #0
   187dc:	ldrne	r3, [sp, #76]	; 0x4c
   187e0:	strne	r5, [r3]
   187e4:	bne	187f0 <__assert_fail@plt+0x7010>
   187e8:	mov	r0, r5
   187ec:	bl	16934 <__assert_fail@plt+0x5154>
   187f0:	mov	r0, r4
   187f4:	add	sp, sp, #36	; 0x24
   187f8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   187fc:	add	r2, r7, #1
   18800:	mov	r1, #1
   18804:	mov	r0, r2
   18808:	str	r2, [sp, #12]
   1880c:	bl	190c8 <__assert_fail@plt+0x78e8>
   18810:	str	r7, [r5, r4, lsl #2]
   18814:	ldr	r2, [sp, #12]
   18818:	ldr	r1, [sp, #28]
   1881c:	bl	11474 <memcpy@plt>
   18820:	str	r0, [r6, r4, lsl #2]
   18824:	add	r4, r4, #1
   18828:	b	18750 <__assert_fail@plt+0x6f70>
   1882c:	push	{r4, r5, r6, r7, r8, lr}
   18830:	mov	r7, r0
   18834:	mov	r8, r1
   18838:	mov	r4, r2
   1883c:	ldr	r5, [pc, #80]	; 18894 <__assert_fail@plt+0x70b4>
   18840:	mov	r2, r4
   18844:	mov	r1, r8
   18848:	mov	r0, r7
   1884c:	bl	116c0 <write@plt>
   18850:	subs	r6, r0, #0
   18854:	bge	18884 <__assert_fail@plt+0x70a4>
   18858:	bl	1166c <__errno_location@plt>
   1885c:	ldr	r2, [r0]
   18860:	cmp	r2, #4
   18864:	beq	18840 <__assert_fail@plt+0x7060>
   18868:	sub	r3, r2, #22
   1886c:	cmp	r4, r5
   18870:	clz	r3, r3
   18874:	lsr	r3, r3, #5
   18878:	movls	r3, #0
   1887c:	cmp	r3, #0
   18880:	bne	1888c <__assert_fail@plt+0x70ac>
   18884:	mov	r0, r6
   18888:	pop	{r4, r5, r6, r7, r8, pc}
   1888c:	mov	r4, r5
   18890:	b	18840 <__assert_fail@plt+0x7060>
   18894:	svcvc	0x00f00000	; IMB
   18898:	push	{r4, r5, r6, r7, r8, lr}
   1889c:	sub	sp, sp, #64	; 0x40
   188a0:	mov	r7, r1
   188a4:	bl	114d4 <strdup@plt>
   188a8:	subs	r5, r0, #0
   188ac:	bne	188b4 <__assert_fail@plt+0x70d4>
   188b0:	bl	192c0 <__assert_fail@plt+0x7ae0>
   188b4:	bl	1157c <__ctype_get_mb_cur_max@plt>
   188b8:	cmp	r0, #1
   188bc:	bls	18a68 <__assert_fail@plt+0x7288>
   188c0:	cmp	r7, #0
   188c4:	bne	1894c <__assert_fail@plt+0x716c>
   188c8:	mov	r0, r5
   188cc:	mov	r6, #0
   188d0:	str	r5, [sp, #24]
   188d4:	bl	1163c <strlen@plt>
   188d8:	add	r0, r5, r0
   188dc:	mov	r2, #0
   188e0:	mov	r3, #0
   188e4:	mov	r4, r6
   188e8:	mov	r8, r6
   188ec:	str	r0, [sp, #4]
   188f0:	strb	r6, [sp, #8]
   188f4:	strd	r2, [sp, #12]
   188f8:	strb	r6, [sp, #20]
   188fc:	ldr	r3, [sp, #4]
   18900:	ldr	r2, [sp, #24]
   18904:	cmp	r2, r3
   18908:	bcs	18a58 <__assert_fail@plt+0x7278>
   1890c:	add	r0, sp, #4
   18910:	bl	196fc <__assert_fail@plt+0x7f1c>
   18914:	cmp	r4, #0
   18918:	ldr	r7, [sp, #24]
   1891c:	beq	189f8 <__assert_fail@plt+0x7218>
   18920:	cmp	r4, #1
   18924:	bne	18a28 <__assert_fail@plt+0x7248>
   18928:	ldrb	r3, [sp, #32]
   1892c:	cmp	r3, #0
   18930:	beq	18a14 <__assert_fail@plt+0x7234>
   18934:	ldr	r0, [sp, #36]	; 0x24
   18938:	bl	11630 <iswspace@plt>
   1893c:	cmp	r0, #0
   18940:	movne	r6, r7
   18944:	movne	r4, #2
   18948:	b	18a14 <__assert_fail@plt+0x7234>
   1894c:	mov	r0, r5
   18950:	str	r5, [sp, #24]
   18954:	bl	1163c <strlen@plt>
   18958:	add	r0, r5, r0
   1895c:	mov	r3, #0
   18960:	mov	r1, #0
   18964:	mov	r4, r3
   18968:	str	r0, [sp, #4]
   1896c:	mov	r0, #0
   18970:	strb	r3, [sp, #8]
   18974:	strd	r0, [sp, #12]
   18978:	strb	r3, [sp, #20]
   1897c:	ldr	r3, [sp, #4]
   18980:	ldr	r2, [sp, #24]
   18984:	cmp	r2, r3
   18988:	bcc	189bc <__assert_fail@plt+0x71dc>
   1898c:	ldr	r4, [sp, #24]
   18990:	mov	r0, r4
   18994:	bl	1163c <strlen@plt>
   18998:	add	r2, r0, #1
   1899c:	mov	r1, r4
   189a0:	mov	r0, r5
   189a4:	bl	11444 <memmove@plt>
   189a8:	cmp	r7, #1
   189ac:	bne	188c8 <__assert_fail@plt+0x70e8>
   189b0:	mov	r0, r5
   189b4:	add	sp, sp, #64	; 0x40
   189b8:	pop	{r4, r5, r6, r7, r8, pc}
   189bc:	add	r0, sp, #4
   189c0:	bl	196fc <__assert_fail@plt+0x7f1c>
   189c4:	ldrb	r3, [sp, #32]
   189c8:	cmp	r3, #0
   189cc:	beq	1898c <__assert_fail@plt+0x71ac>
   189d0:	ldr	r0, [sp, #36]	; 0x24
   189d4:	bl	11630 <iswspace@plt>
   189d8:	cmp	r0, #0
   189dc:	ldr	r3, [sp, #24]
   189e0:	beq	1898c <__assert_fail@plt+0x71ac>
   189e4:	ldr	r2, [sp, #28]
   189e8:	strb	r4, [sp, #20]
   189ec:	add	r3, r3, r2
   189f0:	str	r3, [sp, #24]
   189f4:	b	1897c <__assert_fail@plt+0x719c>
   189f8:	ldrb	r3, [sp, #32]
   189fc:	cmp	r3, #0
   18a00:	beq	18a50 <__assert_fail@plt+0x7270>
   18a04:	ldr	r0, [sp, #36]	; 0x24
   18a08:	bl	11630 <iswspace@plt>
   18a0c:	clz	r4, r0
   18a10:	lsr	r4, r4, #5
   18a14:	ldr	r3, [sp, #28]
   18a18:	strb	r8, [sp, #20]
   18a1c:	add	r3, r7, r3
   18a20:	str	r3, [sp, #24]
   18a24:	b	188fc <__assert_fail@plt+0x711c>
   18a28:	cmp	r4, #2
   18a2c:	bne	18a50 <__assert_fail@plt+0x7270>
   18a30:	ldrb	r3, [sp, #32]
   18a34:	cmp	r3, #0
   18a38:	beq	18a50 <__assert_fail@plt+0x7270>
   18a3c:	ldr	r0, [sp, #36]	; 0x24
   18a40:	bl	11630 <iswspace@plt>
   18a44:	cmp	r0, #0
   18a48:	moveq	r4, #1
   18a4c:	b	18a14 <__assert_fail@plt+0x7234>
   18a50:	mov	r4, #1
   18a54:	b	18a14 <__assert_fail@plt+0x7234>
   18a58:	cmp	r4, #2
   18a5c:	moveq	r3, #0
   18a60:	strbeq	r3, [r6]
   18a64:	b	189b0 <__assert_fail@plt+0x71d0>
   18a68:	cmp	r7, #0
   18a6c:	movne	r6, r5
   18a70:	bne	18ab4 <__assert_fail@plt+0x72d4>
   18a74:	mov	r0, r5
   18a78:	mov	r6, #0
   18a7c:	bl	1163c <strlen@plt>
   18a80:	sub	r0, r0, #1
   18a84:	add	r4, r5, r0
   18a88:	cmp	r4, r5
   18a8c:	bcc	189b0 <__assert_fail@plt+0x71d0>
   18a90:	bl	11618 <__ctype_b_loc@plt>
   18a94:	ldrb	r3, [r4]
   18a98:	ldr	r2, [r0]
   18a9c:	lsl	r3, r3, #1
   18aa0:	ldrh	r3, [r2, r3]
   18aa4:	tst	r3, #8192	; 0x2000
   18aa8:	beq	189b0 <__assert_fail@plt+0x71d0>
   18aac:	strb	r6, [r4], #-1
   18ab0:	b	18a88 <__assert_fail@plt+0x72a8>
   18ab4:	mov	r8, r6
   18ab8:	ldrb	r4, [r6], #1
   18abc:	cmp	r4, #0
   18ac0:	beq	18adc <__assert_fail@plt+0x72fc>
   18ac4:	bl	11618 <__ctype_b_loc@plt>
   18ac8:	ldr	r3, [r0]
   18acc:	lsl	r4, r4, #1
   18ad0:	ldrh	r3, [r3, r4]
   18ad4:	tst	r3, #8192	; 0x2000
   18ad8:	bne	18ab4 <__assert_fail@plt+0x72d4>
   18adc:	mov	r0, r8
   18ae0:	bl	1163c <strlen@plt>
   18ae4:	add	r2, r0, #1
   18ae8:	mov	r1, r8
   18aec:	mov	r0, r5
   18af0:	bl	11444 <memmove@plt>
   18af4:	cmp	r7, #1
   18af8:	beq	189b0 <__assert_fail@plt+0x71d0>
   18afc:	b	18a74 <__assert_fail@plt+0x7294>
   18b00:	push	{r4, r5, r6, lr}
   18b04:	cmp	r1, #0
   18b08:	sub	sp, sp, #32
   18b0c:	mov	r5, r0
   18b10:	ldr	r4, [sp, #48]	; 0x30
   18b14:	ldr	r6, [sp, #52]	; 0x34
   18b18:	beq	18bcc <__assert_fail@plt+0x73ec>
   18b1c:	strd	r2, [sp]
   18b20:	mov	r3, r1
   18b24:	mov	r1, #1
   18b28:	ldr	r2, [pc, #856]	; 18e88 <__assert_fail@plt+0x76a8>
   18b2c:	bl	116d8 <__fprintf_chk@plt>
   18b30:	mov	r2, #5
   18b34:	ldr	r1, [pc, #848]	; 18e8c <__assert_fail@plt+0x76ac>
   18b38:	mov	r0, #0
   18b3c:	bl	114bc <dcgettext@plt>
   18b40:	movw	r3, #2022	; 0x7e6
   18b44:	ldr	r2, [pc, #836]	; 18e90 <__assert_fail@plt+0x76b0>
   18b48:	mov	r1, #1
   18b4c:	str	r3, [sp]
   18b50:	mov	r3, r0
   18b54:	mov	r0, r5
   18b58:	bl	116d8 <__fprintf_chk@plt>
   18b5c:	mov	r1, r5
   18b60:	mov	r0, #10
   18b64:	bl	114a4 <fputc_unlocked@plt>
   18b68:	mov	r2, #5
   18b6c:	ldr	r1, [pc, #800]	; 18e94 <__assert_fail@plt+0x76b4>
   18b70:	mov	r0, #0
   18b74:	bl	114bc <dcgettext@plt>
   18b78:	mov	r2, r0
   18b7c:	mov	r1, #1
   18b80:	ldr	r3, [pc, #784]	; 18e98 <__assert_fail@plt+0x76b8>
   18b84:	mov	r0, r5
   18b88:	bl	116d8 <__fprintf_chk@plt>
   18b8c:	mov	r1, r5
   18b90:	mov	r0, #10
   18b94:	bl	114a4 <fputc_unlocked@plt>
   18b98:	cmp	r6, #9
   18b9c:	ldrls	pc, [pc, r6, lsl #2]
   18ba0:	b	18e7c <__assert_fail@plt+0x769c>
   18ba4:			; <UNDEFINED> instruction: 0x00018cbc
   18ba8:	andeq	r8, r1, r4, ror #23
   18bac:	andeq	r8, r1, r0, lsl ip
   18bb0:	andeq	r8, r1, r4, asr #24
   18bb4:	andeq	r8, r1, r0, lsl #25
   18bb8:	andeq	r8, r1, r4, asr #25
   18bbc:	andeq	r8, r1, ip, lsl #26
   18bc0:	andeq	r8, r1, ip, asr sp
   18bc4:			; <UNDEFINED> instruction: 0x00018db4
   18bc8:	andeq	r8, r1, r4, lsl lr
   18bcc:	mov	r1, #1
   18bd0:	str	r3, [sp]
   18bd4:	mov	r3, r2
   18bd8:	ldr	r2, [pc, #700]	; 18e9c <__assert_fail@plt+0x76bc>
   18bdc:	bl	116d8 <__fprintf_chk@plt>
   18be0:	b	18b30 <__assert_fail@plt+0x7350>
   18be4:	mov	r2, #5
   18be8:	ldr	r1, [pc, #688]	; 18ea0 <__assert_fail@plt+0x76c0>
   18bec:	mov	r0, #0
   18bf0:	bl	114bc <dcgettext@plt>
   18bf4:	ldr	r3, [r4]
   18bf8:	mov	r2, r0
   18bfc:	mov	r1, #1
   18c00:	mov	r0, r5
   18c04:	add	sp, sp, #32
   18c08:	pop	{r4, r5, r6, lr}
   18c0c:	b	116d8 <__fprintf_chk@plt>
   18c10:	mov	r2, #5
   18c14:	ldr	r1, [pc, #648]	; 18ea4 <__assert_fail@plt+0x76c4>
   18c18:	mov	r0, #0
   18c1c:	bl	114bc <dcgettext@plt>
   18c20:	ldr	r3, [r4, #4]
   18c24:	mov	r2, r0
   18c28:	mov	r1, #1
   18c2c:	mov	r0, r5
   18c30:	str	r3, [sp, #48]	; 0x30
   18c34:	ldr	r3, [r4]
   18c38:	add	sp, sp, #32
   18c3c:	pop	{r4, r5, r6, lr}
   18c40:	b	116d8 <__fprintf_chk@plt>
   18c44:	mov	r2, #5
   18c48:	ldr	r1, [pc, #600]	; 18ea8 <__assert_fail@plt+0x76c8>
   18c4c:	mov	r0, #0
   18c50:	bl	114bc <dcgettext@plt>
   18c54:	ldr	r3, [r4, #8]
   18c58:	mov	r2, r0
   18c5c:	mov	r1, #1
   18c60:	mov	r0, r5
   18c64:	str	r3, [sp, #52]	; 0x34
   18c68:	ldr	r3, [r4, #4]
   18c6c:	str	r3, [sp, #48]	; 0x30
   18c70:	ldr	r3, [r4]
   18c74:	add	sp, sp, #32
   18c78:	pop	{r4, r5, r6, lr}
   18c7c:	b	116d8 <__fprintf_chk@plt>
   18c80:	mov	r2, #5
   18c84:	ldr	r1, [pc, #544]	; 18eac <__assert_fail@plt+0x76cc>
   18c88:	mov	r0, #0
   18c8c:	bl	114bc <dcgettext@plt>
   18c90:	ldr	r3, [r4, #12]
   18c94:	mov	r2, r0
   18c98:	mov	r1, #1
   18c9c:	mov	r0, r5
   18ca0:	str	r3, [sp, #8]
   18ca4:	ldr	r3, [r4, #8]
   18ca8:	str	r3, [sp, #4]
   18cac:	ldr	r3, [r4, #4]
   18cb0:	str	r3, [sp]
   18cb4:	ldr	r3, [r4]
   18cb8:	bl	116d8 <__fprintf_chk@plt>
   18cbc:	add	sp, sp, #32
   18cc0:	pop	{r4, r5, r6, pc}
   18cc4:	mov	r2, #5
   18cc8:	ldr	r1, [pc, #480]	; 18eb0 <__assert_fail@plt+0x76d0>
   18ccc:	mov	r0, #0
   18cd0:	bl	114bc <dcgettext@plt>
   18cd4:	ldr	r3, [r4, #16]
   18cd8:	mov	r2, r0
   18cdc:	mov	r1, #1
   18ce0:	mov	r0, r5
   18ce4:	str	r3, [sp, #12]
   18ce8:	ldr	r3, [r4, #12]
   18cec:	str	r3, [sp, #8]
   18cf0:	ldr	r3, [r4, #8]
   18cf4:	str	r3, [sp, #4]
   18cf8:	ldr	r3, [r4, #4]
   18cfc:	str	r3, [sp]
   18d00:	ldr	r3, [r4]
   18d04:	bl	116d8 <__fprintf_chk@plt>
   18d08:	b	18cbc <__assert_fail@plt+0x74dc>
   18d0c:	mov	r2, #5
   18d10:	ldr	r1, [pc, #412]	; 18eb4 <__assert_fail@plt+0x76d4>
   18d14:	mov	r0, #0
   18d18:	bl	114bc <dcgettext@plt>
   18d1c:	ldr	r3, [r4, #20]
   18d20:	mov	r2, r0
   18d24:	mov	r1, #1
   18d28:	mov	r0, r5
   18d2c:	str	r3, [sp, #16]
   18d30:	ldr	r3, [r4, #16]
   18d34:	str	r3, [sp, #12]
   18d38:	ldr	r3, [r4, #12]
   18d3c:	str	r3, [sp, #8]
   18d40:	ldr	r3, [r4, #8]
   18d44:	str	r3, [sp, #4]
   18d48:	ldr	r3, [r4, #4]
   18d4c:	str	r3, [sp]
   18d50:	ldr	r3, [r4]
   18d54:	bl	116d8 <__fprintf_chk@plt>
   18d58:	b	18cbc <__assert_fail@plt+0x74dc>
   18d5c:	mov	r2, #5
   18d60:	ldr	r1, [pc, #336]	; 18eb8 <__assert_fail@plt+0x76d8>
   18d64:	mov	r0, #0
   18d68:	bl	114bc <dcgettext@plt>
   18d6c:	ldr	r3, [r4, #24]
   18d70:	mov	r2, r0
   18d74:	mov	r1, #1
   18d78:	mov	r0, r5
   18d7c:	str	r3, [sp, #20]
   18d80:	ldr	r3, [r4, #20]
   18d84:	str	r3, [sp, #16]
   18d88:	ldr	r3, [r4, #16]
   18d8c:	str	r3, [sp, #12]
   18d90:	ldr	r3, [r4, #12]
   18d94:	str	r3, [sp, #8]
   18d98:	ldr	r3, [r4, #8]
   18d9c:	str	r3, [sp, #4]
   18da0:	ldr	r3, [r4, #4]
   18da4:	str	r3, [sp]
   18da8:	ldr	r3, [r4]
   18dac:	bl	116d8 <__fprintf_chk@plt>
   18db0:	b	18cbc <__assert_fail@plt+0x74dc>
   18db4:	mov	r2, #5
   18db8:	ldr	r1, [pc, #252]	; 18ebc <__assert_fail@plt+0x76dc>
   18dbc:	mov	r0, #0
   18dc0:	bl	114bc <dcgettext@plt>
   18dc4:	ldr	r3, [r4, #28]
   18dc8:	mov	r2, r0
   18dcc:	mov	r1, #1
   18dd0:	mov	r0, r5
   18dd4:	str	r3, [sp, #24]
   18dd8:	ldr	r3, [r4, #24]
   18ddc:	str	r3, [sp, #20]
   18de0:	ldr	r3, [r4, #20]
   18de4:	str	r3, [sp, #16]
   18de8:	ldr	r3, [r4, #16]
   18dec:	str	r3, [sp, #12]
   18df0:	ldr	r3, [r4, #12]
   18df4:	str	r3, [sp, #8]
   18df8:	ldr	r3, [r4, #8]
   18dfc:	str	r3, [sp, #4]
   18e00:	ldr	r3, [r4, #4]
   18e04:	str	r3, [sp]
   18e08:	ldr	r3, [r4]
   18e0c:	bl	116d8 <__fprintf_chk@plt>
   18e10:	b	18cbc <__assert_fail@plt+0x74dc>
   18e14:	ldr	r1, [pc, #164]	; 18ec0 <__assert_fail@plt+0x76e0>
   18e18:	mov	r2, #5
   18e1c:	mov	r0, #0
   18e20:	bl	114bc <dcgettext@plt>
   18e24:	ldr	r3, [r4, #32]
   18e28:	mov	r2, r0
   18e2c:	mov	r1, #1
   18e30:	mov	r0, r5
   18e34:	str	r3, [sp, #28]
   18e38:	ldr	r3, [r4, #28]
   18e3c:	str	r3, [sp, #24]
   18e40:	ldr	r3, [r4, #24]
   18e44:	str	r3, [sp, #20]
   18e48:	ldr	r3, [r4, #20]
   18e4c:	str	r3, [sp, #16]
   18e50:	ldr	r3, [r4, #16]
   18e54:	str	r3, [sp, #12]
   18e58:	ldr	r3, [r4, #12]
   18e5c:	str	r3, [sp, #8]
   18e60:	ldr	r3, [r4, #8]
   18e64:	str	r3, [sp, #4]
   18e68:	ldr	r3, [r4, #4]
   18e6c:	str	r3, [sp]
   18e70:	ldr	r3, [r4]
   18e74:	bl	116d8 <__fprintf_chk@plt>
   18e78:	b	18cbc <__assert_fail@plt+0x74dc>
   18e7c:	mov	r2, #5
   18e80:	ldr	r1, [pc, #60]	; 18ec4 <__assert_fail@plt+0x76e4>
   18e84:	b	18e1c <__assert_fail@plt+0x763c>
   18e88:	andeq	lr, r1, pc, ror r5
   18e8c:	muleq	r1, r2, r5
   18e90:	andeq	lr, r1, r0, ror #16
   18e94:	muleq	r1, r6, r5
   18e98:	andeq	lr, r1, r1, asr #12
   18e9c:	andeq	lr, r1, fp, lsl #11
   18ea0:	andeq	lr, r1, r3, ror #12
   18ea4:	andeq	lr, r1, r3, ror r6
   18ea8:	andeq	lr, r1, sl, lsl #13
   18eac:	andeq	lr, r1, r6, lsr #13
   18eb0:	andeq	lr, r1, r6, asr #13
   18eb4:	andeq	lr, r1, sl, ror #13
   18eb8:	andeq	lr, r1, r2, lsl r7
   18ebc:	andeq	lr, r1, lr, lsr r7
   18ec0:	andeq	lr, r1, lr, ror #14
   18ec4:	andeq	lr, r1, r2, lsr #15
   18ec8:	push	{r0, r1, r4, lr}
   18ecc:	mov	ip, #0
   18ed0:	ldr	lr, [sp, #16]
   18ed4:	ldr	r4, [lr, ip, lsl #2]
   18ed8:	cmp	r4, #0
   18edc:	bne	18ef4 <__assert_fail@plt+0x7714>
   18ee0:	str	lr, [sp]
   18ee4:	str	ip, [sp, #4]
   18ee8:	bl	18b00 <__assert_fail@plt+0x7320>
   18eec:	add	sp, sp, #8
   18ef0:	pop	{r4, pc}
   18ef4:	add	ip, ip, #1
   18ef8:	b	18ed4 <__assert_fail@plt+0x76f4>
   18efc:	push	{r4, r5, r6, lr}
   18f00:	sub	sp, sp, #48	; 0x30
   18f04:	mov	ip, #0
   18f08:	add	lr, sp, #8
   18f0c:	mov	r5, lr
   18f10:	ldr	r6, [sp, #64]	; 0x40
   18f14:	ldr	r4, [r6, ip, lsl #2]
   18f18:	cmp	r4, #0
   18f1c:	str	r4, [lr], #4
   18f20:	beq	18f30 <__assert_fail@plt+0x7750>
   18f24:	add	ip, ip, #1
   18f28:	cmp	ip, #10
   18f2c:	bne	18f14 <__assert_fail@plt+0x7734>
   18f30:	stm	sp, {r5, ip}
   18f34:	bl	18b00 <__assert_fail@plt+0x7320>
   18f38:	add	sp, sp, #48	; 0x30
   18f3c:	pop	{r4, r5, r6, pc}
   18f40:	push	{r3}		; (str r3, [sp, #-4]!)
   18f44:	push	{r0, r1, r2, r3, lr}
   18f48:	add	r3, sp, #24
   18f4c:	str	r3, [sp]
   18f50:	str	r3, [sp, #12]
   18f54:	ldr	r3, [sp, #20]
   18f58:	bl	18efc <__assert_fail@plt+0x771c>
   18f5c:	add	sp, sp, #16
   18f60:	pop	{lr}		; (ldr lr, [sp], #4)
   18f64:	add	sp, sp, #4
   18f68:	bx	lr
   18f6c:	ldr	r3, [pc, #116]	; 18fe8 <__assert_fail@plt+0x7808>
   18f70:	mov	r0, #10
   18f74:	push	{r4, lr}
   18f78:	ldr	r1, [r3]
   18f7c:	bl	114a4 <fputc_unlocked@plt>
   18f80:	mov	r2, #5
   18f84:	ldr	r1, [pc, #96]	; 18fec <__assert_fail@plt+0x780c>
   18f88:	mov	r0, #0
   18f8c:	bl	114bc <dcgettext@plt>
   18f90:	mov	r1, r0
   18f94:	ldr	r2, [pc, #84]	; 18ff0 <__assert_fail@plt+0x7810>
   18f98:	mov	r0, #1
   18f9c:	bl	116b4 <__printf_chk@plt>
   18fa0:	mov	r2, #5
   18fa4:	ldr	r1, [pc, #72]	; 18ff4 <__assert_fail@plt+0x7814>
   18fa8:	mov	r0, #0
   18fac:	bl	114bc <dcgettext@plt>
   18fb0:	mov	r1, r0
   18fb4:	ldr	r3, [pc, #60]	; 18ff8 <__assert_fail@plt+0x7818>
   18fb8:	mov	r0, #1
   18fbc:	ldr	r2, [pc, #56]	; 18ffc <__assert_fail@plt+0x781c>
   18fc0:	bl	116b4 <__printf_chk@plt>
   18fc4:	mov	r2, #5
   18fc8:	ldr	r1, [pc, #48]	; 19000 <__assert_fail@plt+0x7820>
   18fcc:	mov	r0, #0
   18fd0:	bl	114bc <dcgettext@plt>
   18fd4:	mov	r1, r0
   18fd8:	ldr	r2, [pc, #36]	; 19004 <__assert_fail@plt+0x7824>
   18fdc:	mov	r0, #1
   18fe0:	pop	{r4, lr}
   18fe4:	b	116b4 <__printf_chk@plt>
   18fe8:	andeq	pc, r2, r4, ror #3
   18fec:	ldrdeq	lr, [r1], -lr	; <UNPREDICTABLE>
   18ff0:	strdeq	lr, [r1], -r2
   18ff4:	andeq	lr, r1, r8, lsl #16
   18ff8:			; <UNDEFINED> instruction: 0x0001e2b0
   18ffc:	ldrdeq	lr, [r1], -r8
   19000:	andeq	lr, r1, ip, lsl r8
   19004:	andeq	lr, r1, r3, asr #16
   19008:	push	{r4, lr}
   1900c:	bl	193e4 <__assert_fail@plt+0x7c04>
   19010:	cmp	r0, #0
   19014:	popne	{r4, pc}
   19018:	bl	192c0 <__assert_fail@plt+0x7ae0>
   1901c:	push	{r4, lr}
   19020:	bl	193e4 <__assert_fail@plt+0x7c04>
   19024:	cmp	r0, #0
   19028:	popne	{r4, pc}
   1902c:	bl	192c0 <__assert_fail@plt+0x7ae0>
   19030:	b	19008 <__assert_fail@plt+0x7828>
   19034:	push	{r4, r5, r6, lr}
   19038:	mov	r5, r0
   1903c:	mov	r4, r1
   19040:	bl	19410 <__assert_fail@plt+0x7c30>
   19044:	cmp	r0, #0
   19048:	popne	{r4, r5, r6, pc}
   1904c:	adds	r4, r4, #0
   19050:	movne	r4, #1
   19054:	cmp	r5, #0
   19058:	moveq	r4, #1
   1905c:	cmp	r4, #0
   19060:	popeq	{r4, r5, r6, pc}
   19064:	bl	192c0 <__assert_fail@plt+0x7ae0>
   19068:	push	{r4, lr}
   1906c:	bl	196a4 <__assert_fail@plt+0x7ec4>
   19070:	cmp	r0, #0
   19074:	popne	{r4, pc}
   19078:	bl	192c0 <__assert_fail@plt+0x7ae0>
   1907c:	push	{r4, r5, r6, lr}
   19080:	mov	r6, r0
   19084:	mov	r5, r1
   19088:	mov	r4, r2
   1908c:	bl	1a388 <__assert_fail@plt+0x8ba8>
   19090:	cmp	r0, #0
   19094:	popne	{r4, r5, r6, pc}
   19098:	cmp	r6, #0
   1909c:	beq	190ac <__assert_fail@plt+0x78cc>
   190a0:	cmp	r5, #0
   190a4:	cmpne	r4, #0
   190a8:	popeq	{r4, r5, r6, pc}
   190ac:	bl	192c0 <__assert_fail@plt+0x7ae0>
   190b0:	b	1907c <__assert_fail@plt+0x789c>
   190b4:	push	{r4, lr}
   190b8:	bl	196b4 <__assert_fail@plt+0x7ed4>
   190bc:	cmp	r0, #0
   190c0:	popne	{r4, pc}
   190c4:	bl	192c0 <__assert_fail@plt+0x7ae0>
   190c8:	mov	r2, r1
   190cc:	mov	r1, r0
   190d0:	mov	r0, #0
   190d4:	b	1907c <__assert_fail@plt+0x789c>
   190d8:	mov	r2, r1
   190dc:	mov	r1, r0
   190e0:	mov	r0, #0
   190e4:	b	190b4 <__assert_fail@plt+0x78d4>
   190e8:	cmp	r0, #0
   190ec:	push	{r4, r5, r6, lr}
   190f0:	mov	r5, r1
   190f4:	ldr	r4, [r1]
   190f8:	bne	19124 <__assert_fail@plt+0x7944>
   190fc:	cmp	r4, #0
   19100:	bne	19114 <__assert_fail@plt+0x7934>
   19104:	mov	r4, #64	; 0x40
   19108:	udiv	r4, r4, r2
   1910c:	cmp	r2, #64	; 0x40
   19110:	addhi	r4, r4, #1
   19114:	mov	r1, r4
   19118:	bl	1907c <__assert_fail@plt+0x789c>
   1911c:	str	r4, [r5]
   19120:	pop	{r4, r5, r6, pc}
   19124:	lsr	r3, r4, #1
   19128:	add	r3, r3, #1
   1912c:	adds	r4, r4, r3
   19130:	bcc	19114 <__assert_fail@plt+0x7934>
   19134:	bl	192c0 <__assert_fail@plt+0x7ae0>
   19138:	mov	r2, #1
   1913c:	b	190e8 <__assert_fail@plt+0x7908>
   19140:	ldr	ip, [r1]
   19144:	push	{r4, r5, r6, r7, r8, lr}
   19148:	mov	r5, r1
   1914c:	mvn	r8, r3
   19150:	lsr	r8, r8, #31
   19154:	ldr	lr, [sp, #24]
   19158:	asr	r1, ip, #1
   1915c:	adds	r4, ip, r1
   19160:	mvnvs	r4, #-2147483648	; 0x80000000
   19164:	cmp	r3, r4
   19168:	movge	r1, #0
   1916c:	andlt	r1, r8, #1
   19170:	cmp	r1, #0
   19174:	movne	r4, r3
   19178:	smull	r6, r7, r4, lr
   1917c:	cmp	r7, r6, asr #31
   19180:	bne	19198 <__assert_fail@plt+0x79b8>
   19184:	cmp	r6, #63	; 0x3f
   19188:	mov	r1, r6
   1918c:	bgt	191a8 <__assert_fail@plt+0x79c8>
   19190:	mov	r1, #64	; 0x40
   19194:	b	1919c <__assert_fail@plt+0x79bc>
   19198:	mvn	r1, #-2147483648	; 0x80000000
   1919c:	sdiv	r4, r1, lr
   191a0:	mls	r6, lr, r4, r1
   191a4:	sub	r1, r1, r6
   191a8:	cmp	r0, #0
   191ac:	sub	r6, r4, ip
   191b0:	streq	r0, [r5]
   191b4:	cmp	r6, r2
   191b8:	bge	191ec <__assert_fail@plt+0x7a0c>
   191bc:	adds	r4, ip, r2
   191c0:	bvs	191e8 <__assert_fail@plt+0x7a08>
   191c4:	cmp	r4, r3
   191c8:	movle	r3, #0
   191cc:	andgt	r3, r8, #1
   191d0:	cmp	r3, #0
   191d4:	bne	191e8 <__assert_fail@plt+0x7a08>
   191d8:	smull	r2, r3, r4, lr
   191dc:	cmp	r3, r2, asr #31
   191e0:	mov	r1, r2
   191e4:	beq	191ec <__assert_fail@plt+0x7a0c>
   191e8:	bl	192c0 <__assert_fail@plt+0x7ae0>
   191ec:	bl	19034 <__assert_fail@plt+0x7854>
   191f0:	str	r4, [r5]
   191f4:	pop	{r4, r5, r6, r7, r8, pc}
   191f8:	push	{r4, lr}
   191fc:	bl	19390 <__assert_fail@plt+0x7bb0>
   19200:	cmp	r0, #0
   19204:	popne	{r4, pc}
   19208:	bl	192c0 <__assert_fail@plt+0x7ae0>
   1920c:	mov	r1, #1
   19210:	b	191f8 <__assert_fail@plt+0x7a18>
   19214:	push	{r4, lr}
   19218:	bl	19390 <__assert_fail@plt+0x7bb0>
   1921c:	cmp	r0, #0
   19220:	popne	{r4, pc}
   19224:	bl	192c0 <__assert_fail@plt+0x7ae0>
   19228:	mov	r1, #1
   1922c:	b	19214 <__assert_fail@plt+0x7a34>
   19230:	push	{r4, r5, r6, lr}
   19234:	mov	r4, r1
   19238:	mov	r5, r0
   1923c:	mov	r0, r1
   19240:	bl	19008 <__assert_fail@plt+0x7828>
   19244:	mov	r2, r4
   19248:	mov	r1, r5
   1924c:	pop	{r4, r5, r6, lr}
   19250:	b	11474 <memcpy@plt>
   19254:	push	{r4, r5, r6, lr}
   19258:	mov	r4, r1
   1925c:	mov	r5, r0
   19260:	mov	r0, r1
   19264:	bl	1901c <__assert_fail@plt+0x783c>
   19268:	mov	r2, r4
   1926c:	mov	r1, r5
   19270:	pop	{r4, r5, r6, lr}
   19274:	b	11474 <memcpy@plt>
   19278:	push	{r4, r5, r6, lr}
   1927c:	mov	r5, r0
   19280:	add	r0, r1, #1
   19284:	mov	r4, r1
   19288:	bl	1901c <__assert_fail@plt+0x783c>
   1928c:	mov	r2, #0
   19290:	mov	r1, r5
   19294:	strb	r2, [r0, r4]
   19298:	mov	r2, r4
   1929c:	pop	{r4, r5, r6, lr}
   192a0:	b	11474 <memcpy@plt>
   192a4:	push	{r4, lr}
   192a8:	mov	r4, r0
   192ac:	bl	1163c <strlen@plt>
   192b0:	add	r1, r0, #1
   192b4:	mov	r0, r4
   192b8:	pop	{r4, lr}
   192bc:	b	19230 <__assert_fail@plt+0x7a50>
   192c0:	ldr	r3, [pc, #44]	; 192f4 <__assert_fail@plt+0x7b14>
   192c4:	mov	r2, #5
   192c8:	mov	r0, #0
   192cc:	push	{r4, lr}
   192d0:	ldr	r1, [pc, #32]	; 192f8 <__assert_fail@plt+0x7b18>
   192d4:	ldr	r4, [r3]
   192d8:	bl	114bc <dcgettext@plt>
   192dc:	mov	r3, r0
   192e0:	ldr	r2, [pc, #20]	; 192fc <__assert_fail@plt+0x7b1c>
   192e4:	mov	r1, #0
   192e8:	mov	r0, r4
   192ec:	bl	115ac <error@plt>
   192f0:	bl	117c8 <abort@plt>
   192f4:	andeq	pc, r2, r4, lsl #3
   192f8:	andeq	lr, r1, pc, lsl #17
   192fc:	andeq	lr, r1, ip, ror #8
   19300:	push	{r0, r1, r4, lr}
   19304:	ldr	ip, [sp, #16]
   19308:	str	ip, [sp]
   1930c:	bl	1a3b4 <__assert_fail@plt+0x8bd4>
   19310:	subs	r4, r0, #0
   19314:	bge	1932c <__assert_fail@plt+0x7b4c>
   19318:	bl	1166c <__errno_location@plt>
   1931c:	ldr	r3, [r0]
   19320:	cmp	r3, #12
   19324:	bne	1932c <__assert_fail@plt+0x7b4c>
   19328:	bl	192c0 <__assert_fail@plt+0x7ae0>
   1932c:	mov	r0, r4
   19330:	add	sp, sp, #8
   19334:	pop	{r4, pc}
   19338:	push	{r4, lr}
   1933c:	bl	1a5bc <__assert_fail@plt+0x8ddc>
   19340:	subs	r4, r0, #0
   19344:	bne	1935c <__assert_fail@plt+0x7b7c>
   19348:	bl	1166c <__errno_location@plt>
   1934c:	ldr	r3, [r0]
   19350:	cmp	r3, #12
   19354:	bne	1935c <__assert_fail@plt+0x7b7c>
   19358:	bl	192c0 <__assert_fail@plt+0x7ae0>
   1935c:	mov	r0, r4
   19360:	pop	{r4, pc}
   19364:	push	{r4, lr}
   19368:	bl	1a780 <__assert_fail@plt+0x8fa0>
   1936c:	subs	r4, r0, #0
   19370:	bne	19388 <__assert_fail@plt+0x7ba8>
   19374:	bl	1166c <__errno_location@plt>
   19378:	ldr	r3, [r0]
   1937c:	cmp	r3, #12
   19380:	bne	19388 <__assert_fail@plt+0x7ba8>
   19384:	bl	192c0 <__assert_fail@plt+0x7ae0>
   19388:	mov	r0, r4
   1938c:	pop	{r4, pc}
   19390:	cmp	r1, #0
   19394:	cmpne	r0, #0
   19398:	beq	193d0 <__assert_fail@plt+0x7bf0>
   1939c:	push	{r4, r5, r6, lr}
   193a0:	umull	r4, r5, r0, r1
   193a4:	adds	r3, r5, #0
   193a8:	movne	r3, #1
   193ac:	cmp	r4, #0
   193b0:	blt	193bc <__assert_fail@plt+0x7bdc>
   193b4:	cmp	r3, #0
   193b8:	beq	193dc <__assert_fail@plt+0x7bfc>
   193bc:	bl	1166c <__errno_location@plt>
   193c0:	mov	r3, #12
   193c4:	str	r3, [r0]
   193c8:	mov	r0, #0
   193cc:	pop	{r4, r5, r6, pc}
   193d0:	mov	r1, #1
   193d4:	mov	r0, r1
   193d8:	b	113c0 <calloc@plt>
   193dc:	pop	{r4, r5, r6, lr}
   193e0:	b	193d8 <__assert_fail@plt+0x7bf8>
   193e4:	cmp	r0, #0
   193e8:	beq	19408 <__assert_fail@plt+0x7c28>
   193ec:	bge	1940c <__assert_fail@plt+0x7c2c>
   193f0:	push	{r4, lr}
   193f4:	bl	1166c <__errno_location@plt>
   193f8:	mov	r3, #12
   193fc:	str	r3, [r0]
   19400:	mov	r0, #0
   19404:	pop	{r4, pc}
   19408:	mov	r0, #1
   1940c:	b	115b8 <malloc@plt>
   19410:	cmp	r0, #0
   19414:	bne	19420 <__assert_fail@plt+0x7c40>
   19418:	mov	r0, r1
   1941c:	b	193e4 <__assert_fail@plt+0x7c04>
   19420:	cmp	r1, #0
   19424:	push	{r4, lr}
   19428:	bne	19438 <__assert_fail@plt+0x7c58>
   1942c:	bl	16934 <__assert_fail@plt+0x5154>
   19430:	mov	r0, #0
   19434:	pop	{r4, pc}
   19438:	blt	19444 <__assert_fail@plt+0x7c64>
   1943c:	pop	{r4, lr}
   19440:	b	11504 <realloc@plt>
   19444:	bl	1166c <__errno_location@plt>
   19448:	mov	r3, #12
   1944c:	str	r3, [r0]
   19450:	b	19430 <__assert_fail@plt+0x7c50>
   19454:	cmp	r0, r1
   19458:	beq	19498 <__assert_fail@plt+0x7cb8>
   1945c:	push	{r4, r5, r6, lr}
   19460:	sub	r5, r0, #1
   19464:	sub	r4, r1, #1
   19468:	ldrb	r0, [r5, #1]!
   1946c:	bl	1aa44 <__assert_fail@plt+0x9264>
   19470:	uxtb	r6, r0
   19474:	ldrb	r0, [r4, #1]!
   19478:	bl	1aa44 <__assert_fail@plt+0x9264>
   1947c:	cmp	r6, #0
   19480:	uxtb	r0, r0
   19484:	beq	19490 <__assert_fail@plt+0x7cb0>
   19488:	cmp	r6, r0
   1948c:	beq	19468 <__assert_fail@plt+0x7c88>
   19490:	sub	r0, r6, r0
   19494:	pop	{r4, r5, r6, pc}
   19498:	mov	r0, #0
   1949c:	bx	lr
   194a0:	push	{r4, r5, r6, lr}
   194a4:	mov	r4, r0
   194a8:	bl	11588 <__fpending@plt>
   194ac:	mov	r5, r0
   194b0:	mov	r0, r4
   194b4:	bl	11594 <ferror_unlocked@plt>
   194b8:	mov	r6, r0
   194bc:	mov	r0, r4
   194c0:	bl	19510 <__assert_fail@plt+0x7d30>
   194c4:	cmp	r6, #0
   194c8:	mov	r4, r0
   194cc:	bne	194f8 <__assert_fail@plt+0x7d18>
   194d0:	cmp	r0, #0
   194d4:	beq	194f0 <__assert_fail@plt+0x7d10>
   194d8:	cmp	r5, #0
   194dc:	bne	19508 <__assert_fail@plt+0x7d28>
   194e0:	bl	1166c <__errno_location@plt>
   194e4:	ldr	r4, [r0]
   194e8:	subs	r4, r4, #9
   194ec:	mvnne	r4, #0
   194f0:	mov	r0, r4
   194f4:	pop	{r4, r5, r6, pc}
   194f8:	cmp	r0, #0
   194fc:	bne	19508 <__assert_fail@plt+0x7d28>
   19500:	bl	1166c <__errno_location@plt>
   19504:	str	r4, [r0]
   19508:	mvn	r4, #0
   1950c:	b	194f0 <__assert_fail@plt+0x7d10>
   19510:	push	{r0, r1, r2, r4, r5, lr}
   19514:	mov	r4, r0
   19518:	bl	116cc <fileno@plt>
   1951c:	cmp	r0, #0
   19520:	mov	r0, r4
   19524:	bge	19534 <__assert_fail@plt+0x7d54>
   19528:	add	sp, sp, #12
   1952c:	pop	{r4, r5, lr}
   19530:	b	116f0 <fclose@plt>
   19534:	bl	115dc <__freading@plt>
   19538:	cmp	r0, #0
   1953c:	bne	19578 <__assert_fail@plt+0x7d98>
   19540:	mov	r0, r4
   19544:	bl	195b8 <__assert_fail@plt+0x7dd8>
   19548:	cmp	r0, #0
   1954c:	bne	195ac <__assert_fail@plt+0x7dcc>
   19550:	mov	r5, #0
   19554:	mov	r0, r4
   19558:	bl	116f0 <fclose@plt>
   1955c:	cmp	r5, #0
   19560:	beq	19570 <__assert_fail@plt+0x7d90>
   19564:	bl	1166c <__errno_location@plt>
   19568:	str	r5, [r0]
   1956c:	mvn	r0, #0
   19570:	add	sp, sp, #12
   19574:	pop	{r4, r5, pc}
   19578:	mov	r0, r4
   1957c:	bl	116cc <fileno@plt>
   19580:	mov	r3, #1
   19584:	mov	r2, #0
   19588:	str	r3, [sp]
   1958c:	mov	r3, #0
   19590:	bl	11564 <lseek64@plt>
   19594:	mvn	r3, #0
   19598:	mvn	r2, #0
   1959c:	cmp	r1, r3
   195a0:	cmpeq	r0, r2
   195a4:	bne	19540 <__assert_fail@plt+0x7d60>
   195a8:	b	19550 <__assert_fail@plt+0x7d70>
   195ac:	bl	1166c <__errno_location@plt>
   195b0:	ldr	r5, [r0]
   195b4:	b	19554 <__assert_fail@plt+0x7d74>
   195b8:	push	{r0, r1, r4, lr}
   195bc:	subs	r4, r0, #0
   195c0:	bne	195d4 <__assert_fail@plt+0x7df4>
   195c4:	mov	r0, r4
   195c8:	add	sp, sp, #8
   195cc:	pop	{r4, lr}
   195d0:	b	11414 <fflush@plt>
   195d4:	bl	115dc <__freading@plt>
   195d8:	cmp	r0, #0
   195dc:	beq	195c4 <__assert_fail@plt+0x7de4>
   195e0:	ldr	r3, [r4]
   195e4:	tst	r3, #256	; 0x100
   195e8:	beq	195c4 <__assert_fail@plt+0x7de4>
   195ec:	mov	r3, #1
   195f0:	mov	r2, #0
   195f4:	mov	r0, r4
   195f8:	str	r3, [sp]
   195fc:	mov	r3, #0
   19600:	bl	19608 <__assert_fail@plt+0x7e28>
   19604:	b	195c4 <__assert_fail@plt+0x7de4>
   19608:	push	{r0, r1, r4, r5, r6, r7, r8, lr}
   1960c:	mov	r4, r0
   19610:	ldmib	r0, {ip, lr}
   19614:	ldr	r8, [sp, #32]
   19618:	cmp	lr, ip
   1961c:	bne	1968c <__assert_fail@plt+0x7eac>
   19620:	ldr	ip, [r0, #16]
   19624:	ldr	lr, [r0, #20]
   19628:	cmp	lr, ip
   1962c:	bne	1968c <__assert_fail@plt+0x7eac>
   19630:	ldr	r5, [r0, #36]	; 0x24
   19634:	cmp	r5, #0
   19638:	bne	1968c <__assert_fail@plt+0x7eac>
   1963c:	mov	r6, r2
   19640:	mov	r7, r3
   19644:	bl	116cc <fileno@plt>
   19648:	mov	r2, r6
   1964c:	mov	r3, r7
   19650:	str	r8, [sp]
   19654:	bl	11564 <lseek64@plt>
   19658:	mvn	r3, #0
   1965c:	mvn	r2, #0
   19660:	cmp	r1, r3
   19664:	cmpeq	r0, r2
   19668:	mvneq	r0, #0
   1966c:	beq	19684 <__assert_fail@plt+0x7ea4>
   19670:	ldr	r3, [r4]
   19674:	strd	r0, [r4, #80]	; 0x50
   19678:	mov	r0, r5
   1967c:	bic	r3, r3, #16
   19680:	str	r3, [r4]
   19684:	add	sp, sp, #8
   19688:	pop	{r4, r5, r6, r7, r8, pc}
   1968c:	mov	r0, r4
   19690:	str	r8, [sp, #32]
   19694:	add	sp, sp, #8
   19698:	pop	{r4, r5, r6, r7, r8, lr}
   1969c:	b	11708 <fseeko64@plt>
   196a0:	b	193e4 <__assert_fail@plt+0x7c04>
   196a4:	cmp	r1, #0
   196a8:	orreq	r1, r1, #1
   196ac:	b	19410 <__assert_fail@plt+0x7c30>
   196b0:	b	19390 <__assert_fail@plt+0x7bb0>
   196b4:	cmp	r2, #0
   196b8:	cmpne	r1, #0
   196bc:	moveq	r2, #1
   196c0:	moveq	r1, r2
   196c4:	b	1a388 <__assert_fail@plt+0x8ba8>
   196c8:	push	{r4, lr}
   196cc:	mov	r0, #14
   196d0:	bl	11750 <nl_langinfo@plt>
   196d4:	cmp	r0, #0
   196d8:	beq	196f0 <__assert_fail@plt+0x7f10>
   196dc:	ldrb	r2, [r0]
   196e0:	ldr	r3, [pc, #16]	; 196f8 <__assert_fail@plt+0x7f18>
   196e4:	cmp	r2, #0
   196e8:	moveq	r0, r3
   196ec:	pop	{r4, pc}
   196f0:	ldr	r0, [pc]	; 196f8 <__assert_fail@plt+0x7f18>
   196f4:	pop	{r4, pc}
   196f8:	andeq	lr, r1, r0, lsr #17
   196fc:	ldrb	r3, [r0, #16]
   19700:	cmp	r3, #0
   19704:	bxne	lr
   19708:	push	{r4, r5, r6, lr}
   1970c:	mov	r4, r0
   19710:	ldrb	r3, [r0, #4]
   19714:	ldr	r5, [r0, #20]
   19718:	cmp	r3, #0
   1971c:	bne	1977c <__assert_fail@plt+0x7f9c>
   19720:	ldrb	r0, [r5]
   19724:	bl	1aba8 <__assert_fail@plt+0x93c8>
   19728:	cmp	r0, #0
   1972c:	beq	19750 <__assert_fail@plt+0x7f70>
   19730:	mov	r3, #1
   19734:	str	r3, [r4, #24]
   19738:	ldrb	r2, [r5]
   1973c:	str	r2, [r4, #32]
   19740:	strb	r3, [r4, #28]
   19744:	mov	r3, #1
   19748:	strb	r3, [r4, #16]
   1974c:	pop	{r4, r5, r6, pc}
   19750:	add	r0, r4, #8
   19754:	bl	1148c <mbsinit@plt>
   19758:	cmp	r0, #0
   1975c:	movne	r3, #1
   19760:	strbne	r3, [r4, #4]
   19764:	bne	1977c <__assert_fail@plt+0x7f9c>
   19768:	ldr	r3, [pc, #204]	; 1983c <__assert_fail@plt+0x805c>
   1976c:	mov	r2, #135	; 0x87
   19770:	ldr	r1, [pc, #200]	; 19840 <__assert_fail@plt+0x8060>
   19774:	ldr	r0, [pc, #200]	; 19844 <__assert_fail@plt+0x8064>
   19778:	bl	117e0 <__assert_fail@plt>
   1977c:	mov	r0, r4
   19780:	add	r6, r4, #8
   19784:	ldr	r2, [r0], #32
   19788:	mov	r3, r6
   1978c:	mov	r1, r5
   19790:	sub	r2, r2, r5
   19794:	bl	198b0 <__assert_fail@plt+0x80d0>
   19798:	cmn	r0, #1
   1979c:	str	r0, [r4, #24]
   197a0:	bne	197b4 <__assert_fail@plt+0x7fd4>
   197a4:	mov	r3, #1
   197a8:	str	r3, [r4, #24]
   197ac:	mov	r3, #0
   197b0:	b	19740 <__assert_fail@plt+0x7f60>
   197b4:	cmn	r0, #2
   197b8:	ldreq	r3, [r4]
   197bc:	ldreq	r2, [r4, #20]
   197c0:	subeq	r3, r3, r2
   197c4:	beq	197a8 <__assert_fail@plt+0x7fc8>
   197c8:	cmp	r0, #0
   197cc:	bne	1981c <__assert_fail@plt+0x803c>
   197d0:	mov	r3, #1
   197d4:	str	r3, [r4, #24]
   197d8:	ldr	r3, [r4, #20]
   197dc:	ldrb	r3, [r3]
   197e0:	cmp	r3, #0
   197e4:	beq	197fc <__assert_fail@plt+0x801c>
   197e8:	ldr	r3, [pc, #76]	; 1983c <__assert_fail@plt+0x805c>
   197ec:	mov	r2, #162	; 0xa2
   197f0:	ldr	r1, [pc, #72]	; 19840 <__assert_fail@plt+0x8060>
   197f4:	ldr	r0, [pc, #76]	; 19848 <__assert_fail@plt+0x8068>
   197f8:	bl	117e0 <__assert_fail@plt>
   197fc:	ldr	r3, [r4, #32]
   19800:	cmp	r3, #0
   19804:	beq	1981c <__assert_fail@plt+0x803c>
   19808:	ldr	r3, [pc, #44]	; 1983c <__assert_fail@plt+0x805c>
   1980c:	mov	r2, #163	; 0xa3
   19810:	ldr	r1, [pc, #40]	; 19840 <__assert_fail@plt+0x8060>
   19814:	ldr	r0, [pc, #48]	; 1984c <__assert_fail@plt+0x806c>
   19818:	bl	117e0 <__assert_fail@plt>
   1981c:	mov	r3, #1
   19820:	mov	r0, r6
   19824:	strb	r3, [r4, #28]
   19828:	bl	1148c <mbsinit@plt>
   1982c:	cmp	r0, #0
   19830:	movne	r3, #0
   19834:	strbne	r3, [r4, #4]
   19838:	b	19744 <__assert_fail@plt+0x7f64>
   1983c:	andeq	lr, r1, r6, lsr #17
   19840:			; <UNDEFINED> instruction: 0x0001e8b8
   19844:	andeq	lr, r1, r5, asr #17
   19848:	ldrdeq	lr, [r1], -ip
   1984c:	strdeq	lr, [r1], -r3
   19850:	ldr	r3, [r0]
   19854:	ldr	r2, [r0, #20]
   19858:	add	r3, r3, r1
   1985c:	add	r2, r2, r1
   19860:	str	r3, [r0]
   19864:	str	r2, [r0, #20]
   19868:	bx	lr
   1986c:	ldr	r3, [r1]
   19870:	add	ip, r0, #8
   19874:	add	r0, r0, #20
   19878:	str	r3, [r0, #-20]	; 0xffffffec
   1987c:	ldrb	r3, [r1, #4]
   19880:	cmp	r3, #0
   19884:	strb	r3, [r0, #-16]
   19888:	movne	r2, r1
   1988c:	add	r1, r1, #20
   19890:	ldrne	r3, [r2, #8]!
   19894:	streq	r3, [r0, #-12]
   19898:	strne	r3, [r0, #-12]
   1989c:	ldrne	r3, [r2, #4]
   198a0:	str	r3, [ip, #4]
   198a4:	ldrb	r3, [r1, #-4]
   198a8:	strb	r3, [r0, #-4]
   198ac:	b	1ab54 <__assert_fail@plt+0x9374>
   198b0:	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   198b4:	subs	r5, r0, #0
   198b8:	mov	r7, r2
   198bc:	addeq	r5, sp, #4
   198c0:	mov	r6, r1
   198c4:	mov	r0, r5
   198c8:	bl	115a0 <mbrtowc@plt>
   198cc:	cmp	r7, #0
   198d0:	cmnne	r0, #3
   198d4:	mov	r4, r0
   198d8:	bls	198f4 <__assert_fail@plt+0x8114>
   198dc:	mov	r0, #0
   198e0:	bl	1aa64 <__assert_fail@plt+0x9284>
   198e4:	cmp	r0, #0
   198e8:	ldrbeq	r3, [r6]
   198ec:	moveq	r4, #1
   198f0:	streq	r3, [r5]
   198f4:	mov	r0, r4
   198f8:	add	sp, sp, #12
   198fc:	pop	{r4, r5, r6, r7, pc}
   19900:	push	{r4, r5, r6, r7, fp, lr}
   19904:	mov	r7, r3
   19908:	lsrs	r3, r2, #30
   1990c:	mov	r4, r0
   19910:	movne	r3, #1
   19914:	moveq	r3, #0
   19918:	lsls	r0, r2, #2
   1991c:	add	fp, sp, #20
   19920:	bmi	1992c <__assert_fail@plt+0x814c>
   19924:	cmp	r3, #0
   19928:	beq	19938 <__assert_fail@plt+0x8158>
   1992c:	mov	r0, #0
   19930:	sub	sp, fp, #20
   19934:	pop	{r4, r5, r6, r7, fp, pc}
   19938:	cmp	r0, #4016	; 0xfb0
   1993c:	mov	r5, r1
   19940:	mov	r6, r2
   19944:	bhi	199c4 <__assert_fail@plt+0x81e4>
   19948:	add	r0, r0, #22
   1994c:	bic	r0, r0, #7
   19950:	sub	sp, sp, r0
   19954:	add	r0, sp, #15
   19958:	bic	r0, r0, #15
   1995c:	cmp	r0, #0
   19960:	beq	1992c <__assert_fail@plt+0x814c>
   19964:	mov	r3, #1
   19968:	mov	ip, #0
   1996c:	mov	lr, #2
   19970:	str	r3, [r0, #4]
   19974:	mov	r3, r5
   19978:	cmp	lr, r6
   1997c:	bcc	199cc <__assert_fail@plt+0x81ec>
   19980:	mov	ip, #0
   19984:	mov	r3, r4
   19988:	str	ip, [r7]
   1998c:	ldrb	r2, [r3]
   19990:	cmp	r2, #0
   19994:	beq	199b8 <__assert_fail@plt+0x81d8>
   19998:	ldrb	r1, [r5, ip]
   1999c:	cmp	r1, r2
   199a0:	bne	19a08 <__assert_fail@plt+0x8228>
   199a4:	add	ip, ip, #1
   199a8:	add	r3, r3, #1
   199ac:	cmp	r6, ip
   199b0:	bne	1998c <__assert_fail@plt+0x81ac>
   199b4:	str	r4, [r7]
   199b8:	bl	1ab08 <__assert_fail@plt+0x9328>
   199bc:	mov	r0, #1
   199c0:	b	19930 <__assert_fail@plt+0x8150>
   199c4:	bl	1aac0 <__assert_fail@plt+0x92e0>
   199c8:	b	1995c <__assert_fail@plt+0x817c>
   199cc:	ldrb	r1, [r3, #1]!
   199d0:	ldrb	r2, [r5, ip]
   199d4:	cmp	r2, r1
   199d8:	bne	199f0 <__assert_fail@plt+0x8210>
   199dc:	add	ip, ip, #1
   199e0:	sub	r2, lr, ip
   199e4:	str	r2, [r0, lr, lsl #2]
   199e8:	add	lr, lr, #1
   199ec:	b	19978 <__assert_fail@plt+0x8198>
   199f0:	cmp	ip, #0
   199f4:	streq	lr, [r0, lr, lsl #2]
   199f8:	beq	199e8 <__assert_fail@plt+0x8208>
   199fc:	ldr	r2, [r0, ip, lsl #2]
   19a00:	sub	ip, ip, r2
   19a04:	b	199d0 <__assert_fail@plt+0x81f0>
   19a08:	cmp	ip, #0
   19a0c:	ldrne	r2, [r0, ip, lsl #2]
   19a10:	addeq	r4, r4, #1
   19a14:	addeq	r3, r3, #1
   19a18:	addne	r4, r4, r2
   19a1c:	subne	ip, ip, r2
   19a20:	b	1998c <__assert_fail@plt+0x81ac>
   19a24:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19a28:	add	fp, sp, #32
   19a2c:	sub	sp, sp, #132	; 0x84
   19a30:	mov	r5, r1
   19a34:	str	r2, [fp, #-160]	; 0xffffff60
   19a38:	str	r0, [fp, #-156]	; 0xffffff64
   19a3c:	mov	r0, r1
   19a40:	bl	1abc8 <__assert_fail@plt+0x93e8>
   19a44:	mov	r9, r0
   19a48:	mov	r0, #44	; 0x2c
   19a4c:	umull	r6, r7, r9, r0
   19a50:	adds	r3, r7, #0
   19a54:	movne	r3, #1
   19a58:	cmp	r6, #0
   19a5c:	blt	19a68 <__assert_fail@plt+0x8288>
   19a60:	cmp	r3, #0
   19a64:	beq	19a7c <__assert_fail@plt+0x829c>
   19a68:	mov	r3, #0
   19a6c:	str	r3, [fp, #-152]	; 0xffffff68
   19a70:	ldr	r0, [fp, #-152]	; 0xffffff68
   19a74:	sub	sp, fp, #32
   19a78:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19a7c:	mul	r0, r0, r9
   19a80:	cmp	r0, #4016	; 0xfb0
   19a84:	bhi	19bcc <__assert_fail@plt+0x83ec>
   19a88:	add	r0, r0, #22
   19a8c:	bic	r0, r0, #7
   19a90:	sub	sp, sp, r0
   19a94:	add	r4, sp, #15
   19a98:	bic	r4, r4, #15
   19a9c:	cmp	r4, #0
   19aa0:	beq	19a68 <__assert_fail@plt+0x8288>
   19aa4:	mov	r7, #40	; 0x28
   19aa8:	mov	r6, #0
   19aac:	mov	r2, #0
   19ab0:	mov	r3, #0
   19ab4:	mla	r7, r7, r9, r4
   19ab8:	mov	sl, r4
   19abc:	mov	r8, r4
   19ac0:	strb	r6, [fp, #-92]	; 0xffffffa4
   19ac4:	strd	r2, [fp, #-88]	; 0xffffffa8
   19ac8:	strb	r6, [fp, #-80]	; 0xffffffb0
   19acc:	str	r5, [fp, #-76]	; 0xffffffb4
   19ad0:	sub	r0, fp, #92	; 0x5c
   19ad4:	bl	1a1d8 <__assert_fail@plt+0x89f8>
   19ad8:	ldrb	r3, [fp, #-68]	; 0xffffffbc
   19adc:	cmp	r3, #0
   19ae0:	str	r3, [fp, #-152]	; 0xffffff68
   19ae4:	beq	19bd8 <__assert_fail@plt+0x83f8>
   19ae8:	ldr	r5, [fp, #-64]	; 0xffffffc0
   19aec:	cmp	r5, #0
   19af0:	bne	19bd8 <__assert_fail@plt+0x83f8>
   19af4:	mov	r2, #1
   19af8:	mov	r6, r5
   19afc:	mov	r8, #2
   19b00:	str	r2, [r7, #4]
   19b04:	cmp	r8, r9
   19b08:	bcc	19c00 <__assert_fail@plt+0x8420>
   19b0c:	ldr	r3, [fp, #-160]	; 0xffffff60
   19b10:	mov	r6, #0
   19b14:	mov	r2, #0
   19b18:	mov	r8, #40	; 0x28
   19b1c:	ldr	r1, [fp, #-156]	; 0xffffff64
   19b20:	strb	r6, [fp, #-148]	; 0xffffff6c
   19b24:	strb	r6, [fp, #-136]	; 0xffffff78
   19b28:	str	r6, [r3]
   19b2c:	ldr	r3, [fp, #-156]	; 0xffffff64
   19b30:	str	r3, [fp, #-132]	; 0xffffff7c
   19b34:	mov	r3, #0
   19b38:	strb	r6, [fp, #-92]	; 0xffffffa4
   19b3c:	strd	r2, [fp, #-144]	; 0xffffff70
   19b40:	strd	r2, [fp, #-88]	; 0xffffffa8
   19b44:	strb	r6, [fp, #-80]	; 0xffffffb0
   19b48:	str	r1, [fp, #-76]	; 0xffffffb4
   19b4c:	sub	r0, fp, #92	; 0x5c
   19b50:	bl	1a1d8 <__assert_fail@plt+0x89f8>
   19b54:	ldrb	r0, [fp, #-68]	; 0xffffffbc
   19b58:	cmp	r0, #0
   19b5c:	beq	19b6c <__assert_fail@plt+0x838c>
   19b60:	ldr	r3, [fp, #-64]	; 0xffffffc0
   19b64:	cmp	r3, #0
   19b68:	beq	19bc0 <__assert_fail@plt+0x83e0>
   19b6c:	mla	r3, r8, r5, r4
   19b70:	ldrb	r2, [r3, #8]
   19b74:	ands	r0, r0, r2
   19b78:	beq	19ca0 <__assert_fail@plt+0x84c0>
   19b7c:	ldr	r0, [r3, #12]
   19b80:	ldr	r3, [fp, #-64]	; 0xffffffc0
   19b84:	sub	r0, r0, r3
   19b88:	clz	r0, r0
   19b8c:	lsr	r0, r0, #5
   19b90:	cmp	r0, #0
   19b94:	beq	19cc8 <__assert_fail@plt+0x84e8>
   19b98:	ldrd	r2, [fp, #-76]	; 0xffffffb4
   19b9c:	add	r5, r5, #1
   19ba0:	cmp	r9, r5
   19ba4:	strb	r6, [fp, #-80]	; 0xffffffb0
   19ba8:	add	r3, r3, r2
   19bac:	str	r3, [fp, #-76]	; 0xffffffb4
   19bb0:	bne	19b4c <__assert_fail@plt+0x836c>
   19bb4:	ldr	r2, [fp, #-160]	; 0xffffff60
   19bb8:	ldr	r3, [fp, #-132]	; 0xffffff7c
   19bbc:	str	r3, [r2]
   19bc0:	mov	r0, r4
   19bc4:	bl	1ab08 <__assert_fail@plt+0x9328>
   19bc8:	b	19a70 <__assert_fail@plt+0x8290>
   19bcc:	bl	1aac0 <__assert_fail@plt+0x92e0>
   19bd0:	mov	r4, r0
   19bd4:	b	19a9c <__assert_fail@plt+0x82bc>
   19bd8:	sub	r1, fp, #76	; 0x4c
   19bdc:	mov	r0, r8
   19be0:	bl	1ab54 <__assert_fail@plt+0x9374>
   19be4:	ldr	r2, [fp, #-76]	; 0xffffffb4
   19be8:	add	r8, r8, #40	; 0x28
   19bec:	strb	r6, [fp, #-80]	; 0xffffffb0
   19bf0:	ldr	r1, [fp, #-72]	; 0xffffffb8
   19bf4:	add	r2, r2, r1
   19bf8:	str	r2, [fp, #-76]	; 0xffffffb4
   19bfc:	b	19ad0 <__assert_fail@plt+0x82f0>
   19c00:	ldrb	r3, [sl, #48]	; 0x30
   19c04:	str	r3, [fp, #-164]	; 0xffffff5c
   19c08:	mov	r3, #40	; 0x28
   19c0c:	mla	r1, r3, r6, r4
   19c10:	ldr	r3, [fp, #-164]	; 0xffffff5c
   19c14:	cmp	r3, #0
   19c18:	beq	19c5c <__assert_fail@plt+0x847c>
   19c1c:	ldrb	r2, [r1, #8]
   19c20:	cmp	r2, #0
   19c24:	beq	19c5c <__assert_fail@plt+0x847c>
   19c28:	ldr	r2, [r1, #12]
   19c2c:	ldr	r0, [sl, #52]	; 0x34
   19c30:	sub	r0, r0, r2
   19c34:	clz	r0, r0
   19c38:	lsr	r0, r0, #5
   19c3c:	cmp	r0, #0
   19c40:	beq	19c88 <__assert_fail@plt+0x84a8>
   19c44:	add	r6, r6, #1
   19c48:	sub	r2, r8, r6
   19c4c:	str	r2, [r7, r8, lsl #2]
   19c50:	add	r8, r8, #1
   19c54:	add	sl, sl, #40	; 0x28
   19c58:	b	19b04 <__assert_fail@plt+0x8324>
   19c5c:	ldr	r0, [r1, #4]
   19c60:	ldr	r2, [sl, #44]	; 0x2c
   19c64:	cmp	r2, r0
   19c68:	movne	r0, #0
   19c6c:	bne	19c3c <__assert_fail@plt+0x845c>
   19c70:	ldr	r1, [r1]
   19c74:	ldr	r0, [sl, #40]	; 0x28
   19c78:	bl	11498 <memcmp@plt>
   19c7c:	clz	r0, r0
   19c80:	lsr	r0, r0, #5
   19c84:	b	19c3c <__assert_fail@plt+0x845c>
   19c88:	cmp	r6, #0
   19c8c:	streq	r8, [r7, r8, lsl #2]
   19c90:	beq	19c50 <__assert_fail@plt+0x8470>
   19c94:	ldr	r2, [r7, r6, lsl #2]
   19c98:	sub	r6, r6, r2
   19c9c:	b	19c08 <__assert_fail@plt+0x8428>
   19ca0:	ldr	r1, [fp, #-72]	; 0xffffffb8
   19ca4:	ldr	r2, [r3, #4]
   19ca8:	cmp	r2, r1
   19cac:	bne	19b90 <__assert_fail@plt+0x83b0>
   19cb0:	ldr	r1, [fp, #-76]	; 0xffffffb4
   19cb4:	ldr	r0, [r3]
   19cb8:	bl	11498 <memcmp@plt>
   19cbc:	clz	r0, r0
   19cc0:	lsr	r0, r0, #5
   19cc4:	b	19b90 <__assert_fail@plt+0x83b0>
   19cc8:	cmp	r5, #0
   19ccc:	ldrne	r3, [r7, r5, lsl #2]
   19cd0:	subne	r5, r5, r3
   19cd4:	bne	19d38 <__assert_fail@plt+0x8558>
   19cd8:	sub	r0, fp, #148	; 0x94
   19cdc:	bl	1a1d8 <__assert_fail@plt+0x89f8>
   19ce0:	ldrb	r3, [fp, #-124]	; 0xffffff84
   19ce4:	cmp	r3, #0
   19ce8:	beq	19cf8 <__assert_fail@plt+0x8518>
   19cec:	ldr	r3, [fp, #-120]	; 0xffffff88
   19cf0:	cmp	r3, #0
   19cf4:	beq	19d68 <__assert_fail@plt+0x8588>
   19cf8:	ldrd	r2, [fp, #-132]	; 0xffffff7c
   19cfc:	strb	r6, [fp, #-136]	; 0xffffff78
   19d00:	strb	r6, [fp, #-80]	; 0xffffffb0
   19d04:	add	r3, r3, r2
   19d08:	ldr	r2, [fp, #-72]	; 0xffffffb8
   19d0c:	str	r3, [fp, #-132]	; 0xffffff7c
   19d10:	ldr	r3, [fp, #-76]	; 0xffffffb4
   19d14:	add	r3, r3, r2
   19d18:	str	r3, [fp, #-76]	; 0xffffffb4
   19d1c:	b	19b4c <__assert_fail@plt+0x836c>
   19d20:	ldr	r2, [fp, #-132]	; 0xffffff7c
   19d24:	sub	r3, r3, #1
   19d28:	strb	r6, [fp, #-136]	; 0xffffff78
   19d2c:	ldr	r1, [fp, #-128]	; 0xffffff80
   19d30:	add	r2, r2, r1
   19d34:	str	r2, [fp, #-132]	; 0xffffff7c
   19d38:	cmp	r3, #0
   19d3c:	beq	19b4c <__assert_fail@plt+0x836c>
   19d40:	sub	r0, fp, #148	; 0x94
   19d44:	str	r3, [fp, #-156]	; 0xffffff64
   19d48:	bl	1a1d8 <__assert_fail@plt+0x89f8>
   19d4c:	ldrb	r2, [fp, #-124]	; 0xffffff84
   19d50:	ldr	r3, [fp, #-156]	; 0xffffff64
   19d54:	cmp	r2, #0
   19d58:	beq	19d20 <__assert_fail@plt+0x8540>
   19d5c:	ldr	r2, [fp, #-120]	; 0xffffff88
   19d60:	cmp	r2, #0
   19d64:	bne	19d20 <__assert_fail@plt+0x8540>
   19d68:	bl	117c8 <abort@plt>
   19d6c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19d70:	sub	sp, sp, #300	; 0x12c
   19d74:	mov	r4, r0
   19d78:	mov	r5, r1
   19d7c:	bl	1157c <__ctype_get_mb_cur_max@plt>
   19d80:	cmp	r0, #1
   19d84:	bls	1a0c0 <__assert_fail@plt+0x88e0>
   19d88:	mov	r0, #0
   19d8c:	mov	r1, #0
   19d90:	mov	r3, #0
   19d94:	str	r5, [sp, #32]
   19d98:	strd	r0, [sp, #20]
   19d9c:	add	r0, sp, #16
   19da0:	strb	r3, [sp, #16]
   19da4:	strb	r3, [sp, #28]
   19da8:	bl	1a1d8 <__assert_fail@plt+0x89f8>
   19dac:	ldrb	r3, [sp, #40]	; 0x28
   19db0:	cmp	r3, #0
   19db4:	beq	19dc4 <__assert_fail@plt+0x85e4>
   19db8:	ldr	r3, [sp, #44]	; 0x2c
   19dbc:	cmp	r3, #0
   19dc0:	beq	19ff8 <__assert_fail@plt+0x8818>
   19dc4:	mov	r6, #0
   19dc8:	mov	r3, #1
   19dcc:	mov	fp, r6
   19dd0:	mov	r7, r6
   19dd4:	mov	sl, r6
   19dd8:	mov	r8, r6
   19ddc:	str	r6, [sp, #4]
   19de0:	strb	r6, [sp, #72]	; 0x48
   19de4:	str	r6, [sp, #76]	; 0x4c
   19de8:	str	r6, [sp, #80]	; 0x50
   19dec:	strb	r6, [sp, #84]	; 0x54
   19df0:	str	r5, [sp, #88]	; 0x58
   19df4:	strb	r6, [sp, #128]	; 0x80
   19df8:	str	r6, [sp, #132]	; 0x84
   19dfc:	str	r6, [sp, #136]	; 0x88
   19e00:	strb	r6, [sp, #140]	; 0x8c
   19e04:	str	r4, [sp, #144]	; 0x90
   19e08:	add	r0, sp, #128	; 0x80
   19e0c:	str	r3, [sp, #8]
   19e10:	bl	1a1d8 <__assert_fail@plt+0x89f8>
   19e14:	ldrb	r2, [sp, #152]	; 0x98
   19e18:	ldr	r3, [sp, #8]
   19e1c:	cmp	r2, #0
   19e20:	beq	19e30 <__assert_fail@plt+0x8650>
   19e24:	ldr	r2, [sp, #156]	; 0x9c
   19e28:	cmp	r2, #0
   19e2c:	beq	1a100 <__assert_fail@plt+0x8920>
   19e30:	cmp	sl, #9
   19e34:	movls	r9, #0
   19e38:	andhi	r9, r3, #1
   19e3c:	cmp	r9, #0
   19e40:	beq	19f8c <__assert_fail@plt+0x87ac>
   19e44:	add	r3, sl, sl, lsl #2
   19e48:	cmp	r7, r3
   19e4c:	subcs	r6, r7, r6
   19e50:	bcs	19f38 <__assert_fail@plt+0x8758>
   19e54:	ldrb	r3, [sp, #152]	; 0x98
   19e58:	add	sl, sl, #1
   19e5c:	add	r7, r7, #1
   19e60:	cmp	r3, #0
   19e64:	beq	19f94 <__assert_fail@plt+0x87b4>
   19e68:	ldrb	r3, [sp, #40]	; 0x28
   19e6c:	cmp	r3, #0
   19e70:	beq	19f94 <__assert_fail@plt+0x87b4>
   19e74:	ldr	r3, [sp, #44]	; 0x2c
   19e78:	ldr	r0, [sp, #156]	; 0x9c
   19e7c:	sub	r0, r0, r3
   19e80:	clz	r0, r0
   19e84:	lsr	r0, r0, #5
   19e88:	cmp	r0, #0
   19e8c:	beq	1a0a8 <__assert_fail@plt+0x88c8>
   19e90:	add	ip, sp, #128	; 0x80
   19e94:	add	lr, sp, #184	; 0xb8
   19e98:	str	r5, [sp, #256]	; 0x100
   19e9c:	ldm	ip!, {r0, r1, r2, r3}
   19ea0:	stmia	lr!, {r0, r1, r2, r3}
   19ea4:	ldm	ip!, {r0, r1, r2, r3}
   19ea8:	strb	r8, [sp, #196]	; 0xc4
   19eac:	stmia	lr!, {r0, r1, r2, r3}
   19eb0:	ldm	ip!, {r0, r1, r2, r3}
   19eb4:	stmia	lr!, {r0, r1, r2, r3}
   19eb8:	ldrd	r2, [sp, #200]	; 0xc8
   19ebc:	ldm	ip, {r0, r1}
   19ec0:	add	r3, r3, r2
   19ec4:	stm	lr, {r0, r1}
   19ec8:	add	r0, sp, #240	; 0xf0
   19ecc:	str	r3, [sp, #200]	; 0xc8
   19ed0:	strb	r8, [sp, #252]	; 0xfc
   19ed4:	ldr	r3, [sp, #4]
   19ed8:	strb	r8, [sp, #240]	; 0xf0
   19edc:	str	r3, [sp, #244]	; 0xf4
   19ee0:	str	fp, [sp, #248]	; 0xf8
   19ee4:	bl	1a1d8 <__assert_fail@plt+0x89f8>
   19ee8:	ldrb	r3, [sp, #264]	; 0x108
   19eec:	cmp	r3, #0
   19ef0:	beq	19fc0 <__assert_fail@plt+0x87e0>
   19ef4:	ldr	r3, [sp, #268]	; 0x10c
   19ef8:	cmp	r3, #0
   19efc:	bne	19fc0 <__assert_fail@plt+0x87e0>
   19f00:	bl	117c8 <abort@plt>
   19f04:	add	r0, sp, #72	; 0x48
   19f08:	bl	1a1d8 <__assert_fail@plt+0x89f8>
   19f0c:	ldrb	r3, [sp, #96]	; 0x60
   19f10:	cmp	r3, #0
   19f14:	beq	19f24 <__assert_fail@plt+0x8744>
   19f18:	ldr	r3, [sp, #100]	; 0x64
   19f1c:	cmp	r3, #0
   19f20:	beq	19f40 <__assert_fail@plt+0x8760>
   19f24:	ldrd	r2, [sp, #88]	; 0x58
   19f28:	sub	r6, r6, #1
   19f2c:	strb	r8, [sp, #84]	; 0x54
   19f30:	add	r3, r3, r2
   19f34:	str	r3, [sp, #88]	; 0x58
   19f38:	cmp	r6, #0
   19f3c:	bne	19f04 <__assert_fail@plt+0x8724>
   19f40:	add	r0, sp, #72	; 0x48
   19f44:	bl	1a1d8 <__assert_fail@plt+0x89f8>
   19f48:	ldrb	r3, [sp, #96]	; 0x60
   19f4c:	cmp	r3, #0
   19f50:	bne	19f5c <__assert_fail@plt+0x877c>
   19f54:	mov	r6, r7
   19f58:	b	19e54 <__assert_fail@plt+0x8674>
   19f5c:	ldr	r2, [sp, #100]	; 0x64
   19f60:	cmp	r2, #0
   19f64:	movne	r6, r7
   19f68:	bne	19f8c <__assert_fail@plt+0x87ac>
   19f6c:	add	r2, sp, #240	; 0xf0
   19f70:	mov	r1, r5
   19f74:	mov	r0, r4
   19f78:	bl	19a24 <__assert_fail@plt+0x8244>
   19f7c:	subs	r9, r0, #0
   19f80:	beq	19f54 <__assert_fail@plt+0x8774>
   19f84:	ldr	r4, [sp, #240]	; 0xf0
   19f88:	b	19ff8 <__assert_fail@plt+0x8818>
   19f8c:	mov	r9, r3
   19f90:	b	19e54 <__assert_fail@plt+0x8674>
   19f94:	ldr	r3, [sp, #36]	; 0x24
   19f98:	ldr	r2, [sp, #148]	; 0x94
   19f9c:	cmp	r2, r3
   19fa0:	movne	r0, #0
   19fa4:	bne	19e88 <__assert_fail@plt+0x86a8>
   19fa8:	ldr	r1, [sp, #32]
   19fac:	ldr	r0, [sp, #144]	; 0x90
   19fb0:	bl	11498 <memcmp@plt>
   19fb4:	clz	r0, r0
   19fb8:	lsr	r0, r0, #5
   19fbc:	b	19e88 <__assert_fail@plt+0x86a8>
   19fc0:	ldr	r3, [sp, #256]	; 0x100
   19fc4:	strb	r8, [sp, #252]	; 0xfc
   19fc8:	ldr	r2, [sp, #260]	; 0x104
   19fcc:	add	r3, r3, r2
   19fd0:	str	r3, [sp, #256]	; 0x100
   19fd4:	add	r0, sp, #240	; 0xf0
   19fd8:	bl	1a1d8 <__assert_fail@plt+0x89f8>
   19fdc:	ldrb	r3, [sp, #264]	; 0x108
   19fe0:	cmp	r3, #0
   19fe4:	beq	1a004 <__assert_fail@plt+0x8824>
   19fe8:	ldr	r3, [sp, #268]	; 0x10c
   19fec:	cmp	r3, #0
   19ff0:	bne	1a004 <__assert_fail@plt+0x8824>
   19ff4:	ldr	r4, [sp, #144]	; 0x90
   19ff8:	mov	r0, r4
   19ffc:	add	sp, sp, #300	; 0x12c
   1a000:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a004:	add	r0, sp, #184	; 0xb8
   1a008:	bl	1a1d8 <__assert_fail@plt+0x89f8>
   1a00c:	ldrb	r2, [sp, #208]	; 0xd0
   1a010:	cmp	r2, #0
   1a014:	beq	1a024 <__assert_fail@plt+0x8844>
   1a018:	ldr	r3, [sp, #212]	; 0xd4
   1a01c:	cmp	r3, #0
   1a020:	beq	1a100 <__assert_fail@plt+0x8920>
   1a024:	cmp	r2, #0
   1a028:	add	r7, r7, #1
   1a02c:	beq	1a07c <__assert_fail@plt+0x889c>
   1a030:	ldrb	r3, [sp, #264]	; 0x108
   1a034:	cmp	r3, #0
   1a038:	beq	1a07c <__assert_fail@plt+0x889c>
   1a03c:	ldr	r3, [sp, #212]	; 0xd4
   1a040:	ldr	r0, [sp, #268]	; 0x10c
   1a044:	subs	r0, r3, r0
   1a048:	movne	r0, #1
   1a04c:	cmp	r0, #0
   1a050:	bne	1a0a8 <__assert_fail@plt+0x88c8>
   1a054:	ldrd	r2, [sp, #200]	; 0xc8
   1a058:	strb	r0, [sp, #196]	; 0xc4
   1a05c:	strb	r0, [sp, #252]	; 0xfc
   1a060:	add	r3, r3, r2
   1a064:	ldr	r2, [sp, #260]	; 0x104
   1a068:	str	r3, [sp, #200]	; 0xc8
   1a06c:	ldr	r3, [sp, #256]	; 0x100
   1a070:	add	r3, r3, r2
   1a074:	str	r3, [sp, #256]	; 0x100
   1a078:	b	19fd4 <__assert_fail@plt+0x87f4>
   1a07c:	ldr	r2, [sp, #204]	; 0xcc
   1a080:	ldr	r3, [sp, #260]	; 0x104
   1a084:	cmp	r2, r3
   1a088:	movne	r0, #1
   1a08c:	bne	1a04c <__assert_fail@plt+0x886c>
   1a090:	ldr	r0, [sp, #200]	; 0xc8
   1a094:	ldr	r1, [sp, #256]	; 0x100
   1a098:	bl	11498 <memcmp@plt>
   1a09c:	adds	r0, r0, #0
   1a0a0:	movne	r0, #1
   1a0a4:	b	1a04c <__assert_fail@plt+0x886c>
   1a0a8:	ldrd	r2, [sp, #144]	; 0x90
   1a0ac:	strb	r8, [sp, #140]	; 0x8c
   1a0b0:	add	r3, r3, r2
   1a0b4:	str	r3, [sp, #144]	; 0x90
   1a0b8:	mov	r3, r9
   1a0bc:	b	19e08 <__assert_fail@plt+0x8628>
   1a0c0:	ldrb	fp, [r5]
   1a0c4:	cmp	fp, #0
   1a0c8:	beq	19ff8 <__assert_fail@plt+0x8818>
   1a0cc:	mov	r9, #0
   1a0d0:	add	r3, r5, #1
   1a0d4:	mov	r7, r4
   1a0d8:	mov	r2, r5
   1a0dc:	mov	r6, r9
   1a0e0:	mov	r8, r9
   1a0e4:	str	r3, [sp, #4]
   1a0e8:	mov	r1, #1
   1a0ec:	mov	sl, r7
   1a0f0:	mov	r4, r7
   1a0f4:	ldrb	r3, [sl], #1
   1a0f8:	cmp	r3, #0
   1a0fc:	bne	1a108 <__assert_fail@plt+0x8928>
   1a100:	mov	r4, #0
   1a104:	b	19ff8 <__assert_fail@plt+0x8818>
   1a108:	cmp	r8, #9
   1a10c:	movls	r3, #0
   1a110:	andhi	r3, r1, #1
   1a114:	cmp	r3, #0
   1a118:	beq	1a1d0 <__assert_fail@plt+0x89f0>
   1a11c:	add	r1, r8, r8, lsl #2
   1a120:	cmp	r6, r1
   1a124:	bcc	1a180 <__assert_fail@plt+0x89a0>
   1a128:	cmp	r2, #0
   1a12c:	str	r3, [sp, #12]
   1a130:	beq	1a158 <__assert_fail@plt+0x8978>
   1a134:	sub	r1, r6, r9
   1a138:	mov	r0, r2
   1a13c:	str	r2, [sp, #8]
   1a140:	bl	116fc <strnlen@plt>
   1a144:	ldrd	r2, [sp, #8]
   1a148:	mov	r9, r6
   1a14c:	ldrb	r1, [r2, r0]!
   1a150:	cmp	r1, #0
   1a154:	bne	1a180 <__assert_fail@plt+0x89a0>
   1a158:	mov	r0, r5
   1a15c:	bl	1163c <strlen@plt>
   1a160:	mov	r2, r0
   1a164:	add	r3, sp, #240	; 0xf0
   1a168:	mov	r1, r5
   1a16c:	mov	r0, r7
   1a170:	bl	19900 <__assert_fail@plt+0x8120>
   1a174:	subs	r3, r0, #0
   1a178:	bne	19f84 <__assert_fail@plt+0x87a4>
   1a17c:	mov	r2, r3
   1a180:	ldrb	r1, [sl, #-1]
   1a184:	add	r8, r8, #1
   1a188:	add	r0, r6, #1
   1a18c:	cmp	r1, fp
   1a190:	bne	1a1c0 <__assert_fail@plt+0x89e0>
   1a194:	ldr	r1, [sp, #4]
   1a198:	sub	r6, r6, r5
   1a19c:	ldrb	lr, [r1], #1
   1a1a0:	cmp	lr, #0
   1a1a4:	beq	19ff8 <__assert_fail@plt+0x8818>
   1a1a8:	ldrb	ip, [r7, #1]!
   1a1ac:	cmp	ip, #0
   1a1b0:	beq	1a100 <__assert_fail@plt+0x8920>
   1a1b4:	cmp	lr, ip
   1a1b8:	add	r0, r6, r1
   1a1bc:	beq	1a19c <__assert_fail@plt+0x89bc>
   1a1c0:	mov	r7, sl
   1a1c4:	mov	r6, r0
   1a1c8:	mov	r1, r3
   1a1cc:	b	1a0ec <__assert_fail@plt+0x890c>
   1a1d0:	mov	r3, r1
   1a1d4:	b	1a180 <__assert_fail@plt+0x89a0>
   1a1d8:	ldrb	r3, [r0, #12]
   1a1dc:	cmp	r3, #0
   1a1e0:	bxne	lr
   1a1e4:	push	{r4, r5, r6, lr}
   1a1e8:	mov	r4, r0
   1a1ec:	ldrb	r3, [r0]
   1a1f0:	ldr	r5, [r0, #16]
   1a1f4:	cmp	r3, #0
   1a1f8:	bne	1a258 <__assert_fail@plt+0x8a78>
   1a1fc:	ldrb	r0, [r5]
   1a200:	bl	1aba8 <__assert_fail@plt+0x93c8>
   1a204:	cmp	r0, #0
   1a208:	beq	1a22c <__assert_fail@plt+0x8a4c>
   1a20c:	mov	r3, #1
   1a210:	str	r3, [r4, #20]
   1a214:	ldrb	r2, [r5]
   1a218:	str	r2, [r4, #28]
   1a21c:	strb	r3, [r4, #24]
   1a220:	mov	r3, #1
   1a224:	strb	r3, [r4, #12]
   1a228:	pop	{r4, r5, r6, pc}
   1a22c:	add	r0, r4, #4
   1a230:	bl	1148c <mbsinit@plt>
   1a234:	cmp	r0, #0
   1a238:	movne	r3, #1
   1a23c:	strbne	r3, [r4]
   1a240:	bne	1a258 <__assert_fail@plt+0x8a78>
   1a244:	ldr	r3, [pc, #220]	; 1a328 <__assert_fail@plt+0x8b48>
   1a248:	mov	r2, #143	; 0x8f
   1a24c:	ldr	r1, [pc, #216]	; 1a32c <__assert_fail@plt+0x8b4c>
   1a250:	ldr	r0, [pc, #216]	; 1a330 <__assert_fail@plt+0x8b50>
   1a254:	bl	117e0 <__assert_fail@plt>
   1a258:	bl	1157c <__ctype_get_mb_cur_max@plt>
   1a25c:	mov	r1, r0
   1a260:	mov	r0, r5
   1a264:	bl	1a83c <__assert_fail@plt+0x905c>
   1a268:	add	r6, r4, #4
   1a26c:	mov	r2, r0
   1a270:	mov	r3, r6
   1a274:	mov	r1, r5
   1a278:	add	r0, r4, #28
   1a27c:	bl	198b0 <__assert_fail@plt+0x80d0>
   1a280:	cmn	r0, #1
   1a284:	str	r0, [r4, #20]
   1a288:	bne	1a29c <__assert_fail@plt+0x8abc>
   1a28c:	mov	r3, #1
   1a290:	str	r3, [r4, #20]
   1a294:	mov	r3, #0
   1a298:	b	1a21c <__assert_fail@plt+0x8a3c>
   1a29c:	cmn	r0, #2
   1a2a0:	bne	1a2b4 <__assert_fail@plt+0x8ad4>
   1a2a4:	ldr	r0, [r4, #16]
   1a2a8:	bl	1163c <strlen@plt>
   1a2ac:	str	r0, [r4, #20]
   1a2b0:	b	1a294 <__assert_fail@plt+0x8ab4>
   1a2b4:	cmp	r0, #0
   1a2b8:	bne	1a308 <__assert_fail@plt+0x8b28>
   1a2bc:	mov	r3, #1
   1a2c0:	str	r3, [r4, #20]
   1a2c4:	ldr	r3, [r4, #16]
   1a2c8:	ldrb	r3, [r3]
   1a2cc:	cmp	r3, #0
   1a2d0:	beq	1a2e8 <__assert_fail@plt+0x8b08>
   1a2d4:	ldr	r3, [pc, #76]	; 1a328 <__assert_fail@plt+0x8b48>
   1a2d8:	mov	r2, #171	; 0xab
   1a2dc:	ldr	r1, [pc, #72]	; 1a32c <__assert_fail@plt+0x8b4c>
   1a2e0:	ldr	r0, [pc, #76]	; 1a334 <__assert_fail@plt+0x8b54>
   1a2e4:	bl	117e0 <__assert_fail@plt>
   1a2e8:	ldr	r3, [r4, #28]
   1a2ec:	cmp	r3, #0
   1a2f0:	beq	1a308 <__assert_fail@plt+0x8b28>
   1a2f4:	ldr	r3, [pc, #44]	; 1a328 <__assert_fail@plt+0x8b48>
   1a2f8:	mov	r2, #172	; 0xac
   1a2fc:	ldr	r1, [pc, #40]	; 1a32c <__assert_fail@plt+0x8b4c>
   1a300:	ldr	r0, [pc, #48]	; 1a338 <__assert_fail@plt+0x8b58>
   1a304:	bl	117e0 <__assert_fail@plt>
   1a308:	mov	r3, #1
   1a30c:	mov	r0, r6
   1a310:	strb	r3, [r4, #24]
   1a314:	bl	1148c <mbsinit@plt>
   1a318:	cmp	r0, #0
   1a31c:	movne	r3, #0
   1a320:	strbne	r3, [r4]
   1a324:	b	1a220 <__assert_fail@plt+0x8a40>
   1a328:	andeq	lr, r1, r5, lsl #18
   1a32c:	andeq	lr, r1, r8, lsl r9
   1a330:	andeq	lr, r1, r5, asr #17
   1a334:	ldrdeq	lr, [r1], -ip
   1a338:	strdeq	lr, [r1], -r3
   1a33c:	ldr	r3, [r0, #16]
   1a340:	add	r1, r3, r1
   1a344:	str	r1, [r0, #16]
   1a348:	bx	lr
   1a34c:	ldrb	r2, [r1]
   1a350:	mov	r3, r0
   1a354:	add	r0, r0, #16
   1a358:	cmp	r2, #0
   1a35c:	strb	r2, [r3], #4
   1a360:	movne	ip, r1
   1a364:	add	r1, r1, #16
   1a368:	ldrne	r2, [ip, #4]!
   1a36c:	streq	r2, [r0, #-12]
   1a370:	strne	r2, [r0, #-12]
   1a374:	ldrne	r2, [ip, #4]
   1a378:	str	r2, [r3, #4]
   1a37c:	ldrb	r3, [r1, #-4]
   1a380:	strb	r3, [r0, #-4]
   1a384:	b	1ab54 <__assert_fail@plt+0x9374>
   1a388:	umull	r2, r3, r1, r2
   1a38c:	cmp	r3, #0
   1a390:	bne	1a39c <__assert_fail@plt+0x8bbc>
   1a394:	mov	r1, r2
   1a398:	b	19410 <__assert_fail@plt+0x7c30>
   1a39c:	push	{r4, lr}
   1a3a0:	bl	1166c <__errno_location@plt>
   1a3a4:	mov	r3, #12
   1a3a8:	str	r3, [r0]
   1a3ac:	mov	r0, #0
   1a3b0:	pop	{r4, pc}
   1a3b4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a3b8:	sub	sp, sp, #4096	; 0x1000
   1a3bc:	mov	r6, #0
   1a3c0:	sub	sp, sp, #28
   1a3c4:	mov	fp, r0
   1a3c8:	mov	sl, r1
   1a3cc:	mov	r7, r2
   1a3d0:	add	r4, sp, #24
   1a3d4:	add	r8, sp, #20
   1a3d8:	str	r6, [sp]
   1a3dc:	mov	r5, #4096	; 0x1000
   1a3e0:	mov	r9, r3
   1a3e4:	mov	r2, r6
   1a3e8:	mov	r3, r6
   1a3ec:	mov	r1, r6
   1a3f0:	mov	r0, r7
   1a3f4:	bl	113fc <iconv@plt>
   1a3f8:	str	fp, [r4, #-16]
   1a3fc:	str	sl, [r4, #-12]
   1a400:	ldr	r3, [r4, #-12]
   1a404:	cmp	r3, #0
   1a408:	bne	1a464 <__assert_fail@plt+0x8c84>
   1a40c:	mov	r3, #4096	; 0x1000
   1a410:	mov	r2, #0
   1a414:	str	r4, [r4, #-8]
   1a418:	mov	r1, r2
   1a41c:	mov	r0, r7
   1a420:	str	r3, [r4, #-4]
   1a424:	add	r3, sp, #16
   1a428:	str	r8, [sp]
   1a42c:	bl	113fc <iconv@plt>
   1a430:	cmn	r0, #1
   1a434:	beq	1a4a0 <__assert_fail@plt+0x8cc0>
   1a438:	ldr	r5, [r4, #-8]
   1a43c:	sub	r5, r5, r4
   1a440:	adds	r5, r5, r6
   1a444:	bne	1a4b8 <__assert_fail@plt+0x8cd8>
   1a448:	add	r3, sp, #4160	; 0x1040
   1a44c:	mov	r0, r5
   1a450:	ldr	r3, [r3]
   1a454:	str	r5, [r3]
   1a458:	add	sp, sp, #4096	; 0x1000
   1a45c:	add	sp, sp, #28
   1a460:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a464:	add	r3, sp, #16
   1a468:	sub	r2, r4, #12
   1a46c:	strd	r4, [r4, #-8]
   1a470:	sub	r1, r4, #16
   1a474:	mov	r0, r7
   1a478:	str	r8, [sp]
   1a47c:	bl	113fc <iconv@plt>
   1a480:	cmn	r0, #1
   1a484:	bne	1a4a8 <__assert_fail@plt+0x8cc8>
   1a488:	bl	1166c <__errno_location@plt>
   1a48c:	ldr	r3, [r0]
   1a490:	cmp	r3, #7
   1a494:	beq	1a4a8 <__assert_fail@plt+0x8cc8>
   1a498:	cmp	r3, #22
   1a49c:	beq	1a40c <__assert_fail@plt+0x8c2c>
   1a4a0:	mvn	r0, #0
   1a4a4:	b	1a458 <__assert_fail@plt+0x8c78>
   1a4a8:	ldr	r3, [r4, #-8]
   1a4ac:	sub	r3, r3, r4
   1a4b0:	add	r6, r6, r3
   1a4b4:	b	1a400 <__assert_fail@plt+0x8c20>
   1a4b8:	ldr	r6, [r9]
   1a4bc:	cmp	r6, #0
   1a4c0:	beq	1a4d8 <__assert_fail@plt+0x8cf8>
   1a4c4:	add	r3, sp, #4160	; 0x1040
   1a4c8:	ldr	r3, [r3]
   1a4cc:	ldr	r3, [r3]
   1a4d0:	cmp	r3, r5
   1a4d4:	bcs	1a4f8 <__assert_fail@plt+0x8d18>
   1a4d8:	mov	r0, r5
   1a4dc:	bl	193e4 <__assert_fail@plt+0x7c04>
   1a4e0:	subs	r6, r0, #0
   1a4e4:	bne	1a4f8 <__assert_fail@plt+0x8d18>
   1a4e8:	bl	1166c <__errno_location@plt>
   1a4ec:	mov	r3, #12
   1a4f0:	str	r3, [r0]
   1a4f4:	b	1a4a0 <__assert_fail@plt+0x8cc0>
   1a4f8:	mov	r3, #0
   1a4fc:	mov	r0, r7
   1a500:	mov	r2, r3
   1a504:	mov	r1, r3
   1a508:	str	r3, [sp]
   1a50c:	bl	113fc <iconv@plt>
   1a510:	str	fp, [r4, #-12]
   1a514:	str	sl, [r4, #-8]
   1a518:	mov	sl, r4
   1a51c:	str	r6, [r4, #-4]
   1a520:	str	r5, [sl], #-12
   1a524:	ldr	r3, [r4, #-8]
   1a528:	cmp	r3, #0
   1a52c:	beq	1a560 <__assert_fail@plt+0x8d80>
   1a530:	mov	r3, r8
   1a534:	add	r2, sp, #16
   1a538:	str	r4, [sp]
   1a53c:	mov	r1, sl
   1a540:	mov	r0, r7
   1a544:	bl	113fc <iconv@plt>
   1a548:	cmn	r0, #1
   1a54c:	bne	1a524 <__assert_fail@plt+0x8d44>
   1a550:	bl	1166c <__errno_location@plt>
   1a554:	ldr	r3, [r0]
   1a558:	cmp	r3, #22
   1a55c:	bne	1a580 <__assert_fail@plt+0x8da0>
   1a560:	mov	r2, #0
   1a564:	mov	r3, r8
   1a568:	str	r4, [sp]
   1a56c:	mov	r1, r2
   1a570:	mov	r0, r7
   1a574:	bl	113fc <iconv@plt>
   1a578:	cmn	r0, #1
   1a57c:	bne	1a598 <__assert_fail@plt+0x8db8>
   1a580:	ldr	r3, [r9]
   1a584:	cmp	r3, r6
   1a588:	beq	1a4a0 <__assert_fail@plt+0x8cc0>
   1a58c:	mov	r0, r6
   1a590:	bl	16934 <__assert_fail@plt+0x5154>
   1a594:	b	1a4a0 <__assert_fail@plt+0x8cc0>
   1a598:	ldr	r0, [r4]
   1a59c:	cmp	r0, #0
   1a5a0:	beq	1a5a8 <__assert_fail@plt+0x8dc8>
   1a5a4:	bl	117c8 <abort@plt>
   1a5a8:	add	r3, sp, #4160	; 0x1040
   1a5ac:	str	r6, [r9]
   1a5b0:	ldr	r3, [r3]
   1a5b4:	str	r5, [r3]
   1a5b8:	b	1a458 <__assert_fail@plt+0x8c78>
   1a5bc:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1a5c0:	sub	sp, sp, #24
   1a5c4:	mov	r8, r1
   1a5c8:	str	r0, [sp, #8]
   1a5cc:	bl	1163c <strlen@plt>
   1a5d0:	cmp	r0, #4096	; 0x1000
   1a5d4:	mov	r6, r0
   1a5d8:	str	r0, [sp, #12]
   1a5dc:	lslcc	r6, r0, #4
   1a5e0:	add	r5, r6, #1
   1a5e4:	mov	r0, r5
   1a5e8:	bl	193e4 <__assert_fail@plt+0x7c04>
   1a5ec:	subs	r4, r0, #0
   1a5f0:	bne	1a60c <__assert_fail@plt+0x8e2c>
   1a5f4:	bl	1166c <__errno_location@plt>
   1a5f8:	mov	r3, #12
   1a5fc:	str	r3, [r0]
   1a600:	mov	r0, r4
   1a604:	add	sp, sp, #24
   1a608:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1a60c:	mov	r3, #0
   1a610:	mov	r0, r8
   1a614:	mov	r2, r3
   1a618:	mov	r1, r3
   1a61c:	str	r3, [sp]
   1a620:	bl	113fc <iconv@plt>
   1a624:	str	r4, [sp, #16]
   1a628:	str	r6, [sp, #20]
   1a62c:	add	r9, sp, #20
   1a630:	add	r3, sp, #16
   1a634:	add	r2, sp, #12
   1a638:	add	r1, sp, #8
   1a63c:	mov	r0, r8
   1a640:	str	r9, [sp]
   1a644:	bl	113fc <iconv@plt>
   1a648:	cmn	r0, #1
   1a64c:	bne	1a6cc <__assert_fail@plt+0x8eec>
   1a650:	bl	1166c <__errno_location@plt>
   1a654:	ldr	r3, [r0]
   1a658:	mov	sl, r0
   1a65c:	cmp	r3, #22
   1a660:	beq	1a6cc <__assert_fail@plt+0x8eec>
   1a664:	cmp	r3, #7
   1a668:	bne	1a688 <__assert_fail@plt+0x8ea8>
   1a66c:	ldr	r7, [sp, #16]
   1a670:	lsl	r6, r5, #1
   1a674:	cmp	r5, r6
   1a678:	sub	r7, r7, r4
   1a67c:	bcc	1a698 <__assert_fail@plt+0x8eb8>
   1a680:	mov	r3, #12
   1a684:	str	r3, [sl]
   1a688:	mov	r0, r4
   1a68c:	mov	r4, #0
   1a690:	bl	16934 <__assert_fail@plt+0x5154>
   1a694:	b	1a600 <__assert_fail@plt+0x8e20>
   1a698:	mov	r1, r6
   1a69c:	mov	r0, r4
   1a6a0:	bl	19410 <__assert_fail@plt+0x7c30>
   1a6a4:	cmp	r0, #0
   1a6a8:	beq	1a680 <__assert_fail@plt+0x8ea0>
   1a6ac:	add	r3, r0, r7
   1a6b0:	mov	r5, r6
   1a6b4:	mov	r4, r0
   1a6b8:	str	r3, [sp, #16]
   1a6bc:	sub	r3, r6, #1
   1a6c0:	sub	r7, r3, r7
   1a6c4:	str	r7, [sp, #20]
   1a6c8:	b	1a62c <__assert_fail@plt+0x8e4c>
   1a6cc:	mov	r2, #0
   1a6d0:	add	r3, sp, #16
   1a6d4:	str	r9, [sp]
   1a6d8:	mov	r1, r2
   1a6dc:	mov	r0, r8
   1a6e0:	bl	113fc <iconv@plt>
   1a6e4:	cmn	r0, #1
   1a6e8:	bne	1a748 <__assert_fail@plt+0x8f68>
   1a6ec:	bl	1166c <__errno_location@plt>
   1a6f0:	ldr	r3, [r0]
   1a6f4:	mov	sl, r0
   1a6f8:	cmp	r3, #7
   1a6fc:	bne	1a688 <__assert_fail@plt+0x8ea8>
   1a700:	ldr	r7, [sp, #16]
   1a704:	lsl	r6, r5, #1
   1a708:	cmp	r5, r6
   1a70c:	sub	r7, r7, r4
   1a710:	bcs	1a680 <__assert_fail@plt+0x8ea0>
   1a714:	mov	r1, r6
   1a718:	mov	r0, r4
   1a71c:	bl	19410 <__assert_fail@plt+0x7c30>
   1a720:	cmp	r0, #0
   1a724:	beq	1a680 <__assert_fail@plt+0x8ea0>
   1a728:	add	r3, r0, r7
   1a72c:	mov	r5, r6
   1a730:	mov	r4, r0
   1a734:	str	r3, [sp, #16]
   1a738:	sub	r3, r6, #1
   1a73c:	sub	r7, r3, r7
   1a740:	str	r7, [sp, #20]
   1a744:	b	1a6cc <__assert_fail@plt+0x8eec>
   1a748:	ldr	r3, [sp, #16]
   1a74c:	add	r2, r3, #1
   1a750:	str	r2, [sp, #16]
   1a754:	mov	r2, #0
   1a758:	strb	r2, [r3]
   1a75c:	ldr	r1, [sp, #16]
   1a760:	sub	r1, r1, r4
   1a764:	cmp	r5, r1
   1a768:	bls	1a600 <__assert_fail@plt+0x8e20>
   1a76c:	mov	r0, r4
   1a770:	bl	19410 <__assert_fail@plt+0x7c30>
   1a774:	cmp	r0, #0
   1a778:	movne	r4, r0
   1a77c:	b	1a600 <__assert_fail@plt+0x8e20>
   1a780:	push	{r4, r5, r6, r7, r8, lr}
   1a784:	mov	r4, r0
   1a788:	ldrb	r3, [r0]
   1a78c:	cmp	r3, #0
   1a790:	beq	1a7b0 <__assert_fail@plt+0x8fd0>
   1a794:	mov	r6, r1
   1a798:	mov	r1, r2
   1a79c:	mov	r0, r6
   1a7a0:	mov	r5, r2
   1a7a4:	bl	19454 <__assert_fail@plt+0x7c74>
   1a7a8:	cmp	r0, #0
   1a7ac:	bne	1a7d4 <__assert_fail@plt+0x8ff4>
   1a7b0:	mov	r0, r4
   1a7b4:	bl	114d4 <strdup@plt>
   1a7b8:	subs	r4, r0, #0
   1a7bc:	bne	1a7cc <__assert_fail@plt+0x8fec>
   1a7c0:	bl	1166c <__errno_location@plt>
   1a7c4:	mov	r3, #12
   1a7c8:	str	r3, [r0]
   1a7cc:	mov	r0, r4
   1a7d0:	pop	{r4, r5, r6, r7, r8, pc}
   1a7d4:	mov	r0, r5
   1a7d8:	mov	r1, r6
   1a7dc:	bl	115c4 <iconv_open@plt>
   1a7e0:	cmn	r0, #1
   1a7e4:	mov	r5, r0
   1a7e8:	beq	1a834 <__assert_fail@plt+0x9054>
   1a7ec:	mov	r1, r0
   1a7f0:	mov	r0, r4
   1a7f4:	bl	1a5bc <__assert_fail@plt+0x8ddc>
   1a7f8:	subs	r4, r0, #0
   1a7fc:	bne	1a81c <__assert_fail@plt+0x903c>
   1a800:	bl	1166c <__errno_location@plt>
   1a804:	mov	r6, r0
   1a808:	mov	r0, r5
   1a80c:	ldr	r7, [r6]
   1a810:	bl	113f0 <iconv_close@plt>
   1a814:	str	r7, [r6]
   1a818:	b	1a7cc <__assert_fail@plt+0x8fec>
   1a81c:	mov	r0, r5
   1a820:	bl	113f0 <iconv_close@plt>
   1a824:	cmp	r0, #0
   1a828:	bge	1a7cc <__assert_fail@plt+0x8fec>
   1a82c:	mov	r0, r4
   1a830:	bl	16934 <__assert_fail@plt+0x5154>
   1a834:	mov	r4, #0
   1a838:	b	1a7cc <__assert_fail@plt+0x8fec>
   1a83c:	push	{r4, r5, r6, lr}
   1a840:	mov	r2, r1
   1a844:	mov	r4, r1
   1a848:	mov	r1, #0
   1a84c:	mov	r5, r0
   1a850:	bl	116e4 <memchr@plt>
   1a854:	cmp	r0, #0
   1a858:	subne	r4, r0, r5
   1a85c:	addne	r4, r4, #1
   1a860:	mov	r0, r4
   1a864:	pop	{r4, r5, r6, pc}
   1a868:	cmp	r0, #90	; 0x5a
   1a86c:	bgt	1a88c <__assert_fail@plt+0x90ac>
   1a870:	cmp	r0, #65	; 0x41
   1a874:	bge	1a898 <__assert_fail@plt+0x90b8>
   1a878:	sub	r0, r0, #48	; 0x30
   1a87c:	cmp	r0, #9
   1a880:	movhi	r0, #0
   1a884:	movls	r0, #1
   1a888:	bx	lr
   1a88c:	sub	r0, r0, #97	; 0x61
   1a890:	cmp	r0, #25
   1a894:	b	1a880 <__assert_fail@plt+0x90a0>
   1a898:	mov	r0, #1
   1a89c:	bx	lr
   1a8a0:	cmp	r0, #65	; 0x41
   1a8a4:	blt	1a8c4 <__assert_fail@plt+0x90e4>
   1a8a8:	cmp	r0, #90	; 0x5a
   1a8ac:	ble	1a8cc <__assert_fail@plt+0x90ec>
   1a8b0:	sub	r0, r0, #97	; 0x61
   1a8b4:	cmp	r0, #25
   1a8b8:	movhi	r0, #0
   1a8bc:	movls	r0, #1
   1a8c0:	bx	lr
   1a8c4:	mov	r0, #0
   1a8c8:	bx	lr
   1a8cc:	mov	r0, #1
   1a8d0:	bx	lr
   1a8d4:	cmp	r0, #127	; 0x7f
   1a8d8:	movhi	r0, #0
   1a8dc:	movls	r0, #1
   1a8e0:	bx	lr
   1a8e4:	cmp	r0, #9
   1a8e8:	cmpne	r0, #32
   1a8ec:	moveq	r0, #1
   1a8f0:	movne	r0, #0
   1a8f4:	bx	lr
   1a8f8:	cmp	r0, #0
   1a8fc:	blt	1a918 <__assert_fail@plt+0x9138>
   1a900:	cmp	r0, #31
   1a904:	ble	1a920 <__assert_fail@plt+0x9140>
   1a908:	sub	r0, r0, #127	; 0x7f
   1a90c:	clz	r0, r0
   1a910:	lsr	r0, r0, #5
   1a914:	bx	lr
   1a918:	mov	r0, #0
   1a91c:	bx	lr
   1a920:	mov	r0, #1
   1a924:	bx	lr
   1a928:	sub	r0, r0, #48	; 0x30
   1a92c:	cmp	r0, #9
   1a930:	movhi	r0, #0
   1a934:	movls	r0, #1
   1a938:	bx	lr
   1a93c:	sub	r0, r0, #33	; 0x21
   1a940:	cmp	r0, #93	; 0x5d
   1a944:	movhi	r0, #0
   1a948:	movls	r0, #1
   1a94c:	bx	lr
   1a950:	sub	r0, r0, #97	; 0x61
   1a954:	cmp	r0, #25
   1a958:	movhi	r0, #0
   1a95c:	movls	r0, #1
   1a960:	bx	lr
   1a964:	sub	r0, r0, #32
   1a968:	cmp	r0, #94	; 0x5e
   1a96c:	movhi	r0, #0
   1a970:	movls	r0, #1
   1a974:	bx	lr
   1a978:	cmp	r0, #64	; 0x40
   1a97c:	bgt	1a99c <__assert_fail@plt+0x91bc>
   1a980:	cmp	r0, #58	; 0x3a
   1a984:	bge	1a9c0 <__assert_fail@plt+0x91e0>
   1a988:	sub	r0, r0, #33	; 0x21
   1a98c:	cmp	r0, #14
   1a990:	movhi	r0, #0
   1a994:	movls	r0, #1
   1a998:	bx	lr
   1a99c:	cmp	r0, #91	; 0x5b
   1a9a0:	blt	1a9b8 <__assert_fail@plt+0x91d8>
   1a9a4:	cmp	r0, #96	; 0x60
   1a9a8:	ble	1a9c0 <__assert_fail@plt+0x91e0>
   1a9ac:	sub	r0, r0, #123	; 0x7b
   1a9b0:	cmp	r0, #3
   1a9b4:	b	1a990 <__assert_fail@plt+0x91b0>
   1a9b8:	mov	r0, #0
   1a9bc:	bx	lr
   1a9c0:	mov	r0, #1
   1a9c4:	bx	lr
   1a9c8:	sub	r0, r0, #9
   1a9cc:	cmp	r0, #23
   1a9d0:	bhi	1a9ec <__assert_fail@plt+0x920c>
   1a9d4:	ldr	r3, [pc, #24]	; 1a9f4 <__assert_fail@plt+0x9214>
   1a9d8:	mov	r2, #1
   1a9dc:	ands	r3, r3, r2, lsl r0
   1a9e0:	movne	r0, r2
   1a9e4:	moveq	r0, #0
   1a9e8:	bx	lr
   1a9ec:	mov	r0, #0
   1a9f0:	bx	lr
   1a9f4:	addeq	r0, r0, pc, lsl r0
   1a9f8:	sub	r0, r0, #65	; 0x41
   1a9fc:	cmp	r0, #25
   1aa00:	movhi	r0, #0
   1aa04:	movls	r0, #1
   1aa08:	bx	lr
   1aa0c:	cmp	r0, #70	; 0x46
   1aa10:	bgt	1aa30 <__assert_fail@plt+0x9250>
   1aa14:	cmp	r0, #65	; 0x41
   1aa18:	bge	1aa3c <__assert_fail@plt+0x925c>
   1aa1c:	sub	r0, r0, #48	; 0x30
   1aa20:	cmp	r0, #9
   1aa24:	movhi	r0, #0
   1aa28:	movls	r0, #1
   1aa2c:	bx	lr
   1aa30:	sub	r0, r0, #97	; 0x61
   1aa34:	cmp	r0, #5
   1aa38:	b	1aa24 <__assert_fail@plt+0x9244>
   1aa3c:	mov	r0, #1
   1aa40:	bx	lr
   1aa44:	sub	r3, r0, #65	; 0x41
   1aa48:	cmp	r3, #25
   1aa4c:	addls	r0, r0, #32
   1aa50:	bx	lr
   1aa54:	sub	r3, r0, #97	; 0x61
   1aa58:	cmp	r3, #25
   1aa5c:	subls	r0, r0, #32
   1aa60:	bx	lr
   1aa64:	push	{lr}		; (str lr, [sp, #-4]!)
   1aa68:	sub	sp, sp, #268	; 0x10c
   1aa6c:	movw	r2, #257	; 0x101
   1aa70:	add	r1, sp, #4
   1aa74:	bl	1ac54 <__assert_fail@plt+0x9474>
   1aa78:	cmp	r0, #0
   1aa7c:	movne	r0, #0
   1aa80:	bne	1aab0 <__assert_fail@plt+0x92d0>
   1aa84:	ldr	r1, [pc, #44]	; 1aab8 <__assert_fail@plt+0x92d8>
   1aa88:	add	r0, sp, #4
   1aa8c:	bl	11408 <strcmp@plt>
   1aa90:	cmp	r0, #0
   1aa94:	beq	1aaac <__assert_fail@plt+0x92cc>
   1aa98:	ldr	r1, [pc, #28]	; 1aabc <__assert_fail@plt+0x92dc>
   1aa9c:	add	r0, sp, #4
   1aaa0:	bl	11408 <strcmp@plt>
   1aaa4:	adds	r0, r0, #0
   1aaa8:	movne	r0, #1
   1aaac:	and	r0, r0, #1
   1aab0:	add	sp, sp, #268	; 0x10c
   1aab4:	pop	{pc}		; (ldr pc, [sp], #4)
   1aab8:	andeq	lr, r1, r6, lsr #18
   1aabc:	andeq	lr, r1, r8, lsr #18
   1aac0:	mov	r3, r0
   1aac4:	adds	r0, r0, #16
   1aac8:	bmi	1ab00 <__assert_fail@plt+0x9320>
   1aacc:	cmp	r0, r3
   1aad0:	bcc	1ab00 <__assert_fail@plt+0x9320>
   1aad4:	push	{r4, lr}
   1aad8:	bl	115b8 <malloc@plt>
   1aadc:	cmp	r0, #0
   1aae0:	addne	r3, r0, #8
   1aae4:	rsbne	r2, r0, #8
   1aae8:	bicne	r3, r3, #15
   1aaec:	moveq	r0, #0
   1aaf0:	addne	r3, r3, r2
   1aaf4:	addne	r0, r0, r3
   1aaf8:	strbne	r3, [r0, #-1]
   1aafc:	pop	{r4, pc}
   1ab00:	mov	r0, #0
   1ab04:	bx	lr
   1ab08:	tst	r0, #7
   1ab0c:	beq	1ab18 <__assert_fail@plt+0x9338>
   1ab10:	push	{r4, lr}
   1ab14:	bl	117c8 <abort@plt>
   1ab18:	tst	r0, #8
   1ab1c:	bxeq	lr
   1ab20:	ldrb	r3, [r0, #-1]
   1ab24:	sub	r0, r0, r3
   1ab28:	b	16934 <__assert_fail@plt+0x5154>
   1ab2c:	push	{r4, lr}
   1ab30:	mov	r4, r0
   1ab34:	bl	11438 <wcwidth@plt>
   1ab38:	cmp	r0, #0
   1ab3c:	popge	{r4, pc}
   1ab40:	mov	r0, r4
   1ab44:	bl	11534 <iswcntrl@plt>
   1ab48:	clz	r0, r0
   1ab4c:	lsr	r0, r0, #5
   1ab50:	pop	{r4, pc}
   1ab54:	mov	r3, r1
   1ab58:	push	{r4, r5, r6, lr}
   1ab5c:	mov	r5, r1
   1ab60:	mov	r4, r0
   1ab64:	ldr	r1, [r3], #16
   1ab68:	cmp	r1, r3
   1ab6c:	strne	r1, [r0]
   1ab70:	bne	1ab88 <__assert_fail@plt+0x93a8>
   1ab74:	add	r3, r0, #16
   1ab78:	ldr	r2, [r5, #4]
   1ab7c:	mov	r0, r3
   1ab80:	bl	11474 <memcpy@plt>
   1ab84:	str	r0, [r4]
   1ab88:	ldr	r3, [r5, #4]
   1ab8c:	str	r3, [r4, #4]
   1ab90:	ldrb	r3, [r5, #8]
   1ab94:	cmp	r3, #0
   1ab98:	strb	r3, [r4, #8]
   1ab9c:	ldrne	r3, [r5, #12]
   1aba0:	strne	r3, [r4, #12]
   1aba4:	pop	{r4, r5, r6, pc}
   1aba8:	ldr	r3, [pc, #20]	; 1abc4 <__assert_fail@plt+0x93e4>
   1abac:	lsr	r2, r0, #5
   1abb0:	and	r0, r0, #31
   1abb4:	ldr	r3, [r3, r2, lsl #2]
   1abb8:	lsr	r0, r3, r0
   1abbc:	and	r0, r0, #1
   1abc0:	bx	lr
   1abc4:	andeq	lr, r1, r0, lsr r9
   1abc8:	push	{r4, r5, lr}
   1abcc:	sub	sp, sp, #60	; 0x3c
   1abd0:	mov	r4, r0
   1abd4:	bl	1157c <__ctype_get_mb_cur_max@plt>
   1abd8:	cmp	r0, #1
   1abdc:	bls	1ac44 <__assert_fail@plt+0x9464>
   1abe0:	str	r4, [sp, #16]
   1abe4:	mov	r4, #0
   1abe8:	mov	r2, #0
   1abec:	mov	r3, #0
   1abf0:	mov	r5, r4
   1abf4:	strb	r4, [sp]
   1abf8:	strd	r2, [sp, #4]
   1abfc:	strb	r4, [sp, #12]
   1ac00:	mov	r0, sp
   1ac04:	bl	1a1d8 <__assert_fail@plt+0x89f8>
   1ac08:	ldrb	r3, [sp, #24]
   1ac0c:	cmp	r3, #0
   1ac10:	beq	1ac2c <__assert_fail@plt+0x944c>
   1ac14:	ldr	r3, [sp, #28]
   1ac18:	cmp	r3, #0
   1ac1c:	bne	1ac2c <__assert_fail@plt+0x944c>
   1ac20:	mov	r0, r4
   1ac24:	add	sp, sp, #60	; 0x3c
   1ac28:	pop	{r4, r5, pc}
   1ac2c:	ldrd	r2, [sp, #16]
   1ac30:	add	r4, r4, #1
   1ac34:	strb	r5, [sp, #12]
   1ac38:	add	r3, r3, r2
   1ac3c:	str	r3, [sp, #16]
   1ac40:	b	1ac00 <__assert_fail@plt+0x9420>
   1ac44:	mov	r0, r4
   1ac48:	bl	1163c <strlen@plt>
   1ac4c:	mov	r4, r0
   1ac50:	b	1ac20 <__assert_fail@plt+0x9440>
   1ac54:	push	{r4, r5, r6, lr}
   1ac58:	mov	r5, r1
   1ac5c:	mov	r1, #0
   1ac60:	mov	r4, r2
   1ac64:	bl	11738 <setlocale@plt>
   1ac68:	subs	r6, r0, #0
   1ac6c:	bne	1ac80 <__assert_fail@plt+0x94a0>
   1ac70:	cmp	r4, #0
   1ac74:	mov	r0, #22
   1ac78:	strbne	r6, [r5]
   1ac7c:	pop	{r4, r5, r6, pc}
   1ac80:	bl	1163c <strlen@plt>
   1ac84:	cmp	r4, r0
   1ac88:	bls	1aca4 <__assert_fail@plt+0x94c4>
   1ac8c:	add	r2, r0, #1
   1ac90:	mov	r1, r6
   1ac94:	mov	r0, r5
   1ac98:	bl	11474 <memcpy@plt>
   1ac9c:	mov	r0, #0
   1aca0:	pop	{r4, r5, r6, pc}
   1aca4:	cmp	r4, #0
   1aca8:	beq	1acc8 <__assert_fail@plt+0x94e8>
   1acac:	sub	r4, r4, #1
   1acb0:	mov	r1, r6
   1acb4:	mov	r2, r4
   1acb8:	mov	r0, r5
   1acbc:	bl	11474 <memcpy@plt>
   1acc0:	mov	r3, #0
   1acc4:	strb	r3, [r5, r4]
   1acc8:	mov	r0, #34	; 0x22
   1accc:	pop	{r4, r5, r6, pc}
   1acd0:	mov	r1, #0
   1acd4:	b	11738 <setlocale@plt>
   1acd8:	cmp	r3, #0
   1acdc:	cmpeq	r2, #0
   1ace0:	bne	1acf8 <__assert_fail@plt+0x9518>
   1ace4:	cmp	r1, #0
   1ace8:	cmpeq	r0, #0
   1acec:	mvnne	r1, #0
   1acf0:	mvnne	r0, #0
   1acf4:	b	1ad14 <__assert_fail@plt+0x9534>
   1acf8:	sub	sp, sp, #8
   1acfc:	push	{sp, lr}
   1ad00:	bl	1ad24 <__assert_fail@plt+0x9544>
   1ad04:	ldr	lr, [sp, #4]
   1ad08:	add	sp, sp, #8
   1ad0c:	pop	{r2, r3}
   1ad10:	bx	lr
   1ad14:	push	{r1, lr}
   1ad18:	mov	r0, #8
   1ad1c:	bl	113d8 <raise@plt>
   1ad20:	pop	{r1, pc}
   1ad24:	cmp	r1, r3
   1ad28:	cmpeq	r0, r2
   1ad2c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ad30:	mov	r4, r0
   1ad34:	movcc	r0, #0
   1ad38:	mov	r5, r1
   1ad3c:	ldr	lr, [sp, #36]	; 0x24
   1ad40:	movcc	r1, r0
   1ad44:	bcc	1ae40 <__assert_fail@plt+0x9660>
   1ad48:	cmp	r3, #0
   1ad4c:	clzeq	ip, r2
   1ad50:	clzne	ip, r3
   1ad54:	addeq	ip, ip, #32
   1ad58:	cmp	r5, #0
   1ad5c:	clzeq	r1, r4
   1ad60:	addeq	r1, r1, #32
   1ad64:	clzne	r1, r5
   1ad68:	sub	ip, ip, r1
   1ad6c:	sub	sl, ip, #32
   1ad70:	lsl	r9, r3, ip
   1ad74:	rsb	fp, ip, #32
   1ad78:	orr	r9, r9, r2, lsl sl
   1ad7c:	orr	r9, r9, r2, lsr fp
   1ad80:	lsl	r8, r2, ip
   1ad84:	cmp	r5, r9
   1ad88:	cmpeq	r4, r8
   1ad8c:	movcc	r0, #0
   1ad90:	movcc	r1, r0
   1ad94:	bcc	1adb0 <__assert_fail@plt+0x95d0>
   1ad98:	mov	r0, #1
   1ad9c:	subs	r4, r4, r8
   1ada0:	lsl	r1, r0, sl
   1ada4:	orr	r1, r1, r0, lsr fp
   1ada8:	lsl	r0, r0, ip
   1adac:	sbc	r5, r5, r9
   1adb0:	cmp	ip, #0
   1adb4:	beq	1ae40 <__assert_fail@plt+0x9660>
   1adb8:	lsr	r6, r8, #1
   1adbc:	orr	r6, r6, r9, lsl #31
   1adc0:	lsr	r7, r9, #1
   1adc4:	mov	r2, ip
   1adc8:	b	1adec <__assert_fail@plt+0x960c>
   1adcc:	subs	r3, r4, r6
   1add0:	sbc	r8, r5, r7
   1add4:	adds	r3, r3, r3
   1add8:	adc	r8, r8, r8
   1addc:	adds	r4, r3, #1
   1ade0:	adc	r5, r8, #0
   1ade4:	subs	r2, r2, #1
   1ade8:	beq	1ae08 <__assert_fail@plt+0x9628>
   1adec:	cmp	r5, r7
   1adf0:	cmpeq	r4, r6
   1adf4:	bcs	1adcc <__assert_fail@plt+0x95ec>
   1adf8:	adds	r4, r4, r4
   1adfc:	adc	r5, r5, r5
   1ae00:	subs	r2, r2, #1
   1ae04:	bne	1adec <__assert_fail@plt+0x960c>
   1ae08:	lsr	r3, r4, ip
   1ae0c:	orr	r3, r3, r5, lsl fp
   1ae10:	lsr	r2, r5, ip
   1ae14:	orr	r3, r3, r5, lsr sl
   1ae18:	adds	r0, r0, r4
   1ae1c:	mov	r4, r3
   1ae20:	lsl	r3, r2, ip
   1ae24:	orr	r3, r3, r4, lsl sl
   1ae28:	lsl	ip, r4, ip
   1ae2c:	orr	r3, r3, r4, lsr fp
   1ae30:	adc	r1, r1, r5
   1ae34:	subs	r0, r0, ip
   1ae38:	mov	r5, r2
   1ae3c:	sbc	r1, r1, r3
   1ae40:	cmp	lr, #0
   1ae44:	strdne	r4, [lr]
   1ae48:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ae4c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1ae50:	mov	r7, r0
   1ae54:	ldr	r6, [pc, #72]	; 1aea4 <__assert_fail@plt+0x96c4>
   1ae58:	ldr	r5, [pc, #72]	; 1aea8 <__assert_fail@plt+0x96c8>
   1ae5c:	add	r6, pc, r6
   1ae60:	add	r5, pc, r5
   1ae64:	sub	r6, r6, r5
   1ae68:	mov	r8, r1
   1ae6c:	mov	r9, r2
   1ae70:	bl	113a0 <calloc@plt-0x20>
   1ae74:	asrs	r6, r6, #2
   1ae78:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   1ae7c:	mov	r4, #0
   1ae80:	add	r4, r4, #1
   1ae84:	ldr	r3, [r5], #4
   1ae88:	mov	r2, r9
   1ae8c:	mov	r1, r8
   1ae90:	mov	r0, r7
   1ae94:	blx	r3
   1ae98:	cmp	r6, r4
   1ae9c:	bne	1ae80 <__assert_fail@plt+0x96a0>
   1aea0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1aea4:	andeq	r4, r1, r8, lsr #1
   1aea8:	andeq	r4, r1, r0, lsr #1
   1aeac:	bx	lr
   1aeb0:	ldr	r3, [pc, #12]	; 1aec4 <__assert_fail@plt+0x96e4>
   1aeb4:	mov	r1, #0
   1aeb8:	add	r3, pc, r3
   1aebc:	ldr	r2, [r3]
   1aec0:	b	11690 <__cxa_atexit@plt>
   1aec4:			; <UNDEFINED> instruction: 0x000142b8

Disassembly of section .fini:

0001aec8 <.fini>:
   1aec8:	push	{r3, lr}
   1aecc:	pop	{r3, pc}
