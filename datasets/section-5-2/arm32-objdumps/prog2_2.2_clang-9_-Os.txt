
../repos/prog2/2.2:     file format elf32-littlearm


Disassembly of section .init:

00010778 <.init>:
   10778:	push	{r3, lr}
   1077c:	bl	10870 <_start@@Base+0x3c>
   10780:	pop	{r3, pc}

Disassembly of section .plt:

00010784 <printf@plt-0x14>:
   10784:	push	{lr}		; (str lr, [sp, #-4]!)
   10788:	ldr	lr, [pc, #4]	; 10794 <printf@plt-0x4>
   1078c:	add	lr, pc, lr
   10790:	ldr	pc, [lr, #8]!
   10794:	andeq	r0, r1, ip, ror #16

00010798 <printf@plt>:
   10798:	add	ip, pc, #0, 12
   1079c:	add	ip, ip, #16, 20	; 0x10000
   107a0:	ldr	pc, [ip, #2156]!	; 0x86c

000107a4 <free@plt>:
   107a4:	add	ip, pc, #0, 12
   107a8:	add	ip, ip, #16, 20	; 0x10000
   107ac:	ldr	pc, [ip, #2148]!	; 0x864

000107b0 <fgets@plt>:
   107b0:	add	ip, pc, #0, 12
   107b4:	add	ip, ip, #16, 20	; 0x10000
   107b8:	ldr	pc, [ip, #2140]!	; 0x85c

000107bc <getchar@plt>:
   107bc:	add	ip, pc, #0, 12
   107c0:	add	ip, ip, #16, 20	; 0x10000
   107c4:	ldr	pc, [ip, #2132]!	; 0x854

000107c8 <realloc@plt>:
   107c8:	add	ip, pc, #0, 12
   107cc:	add	ip, ip, #16, 20	; 0x10000
   107d0:	ldr	pc, [ip, #2124]!	; 0x84c

000107d4 <strcpy@plt>:
   107d4:	add	ip, pc, #0, 12
   107d8:	add	ip, ip, #16, 20	; 0x10000
   107dc:	ldr	pc, [ip, #2116]!	; 0x844

000107e0 <puts@plt>:
   107e0:	add	ip, pc, #0, 12
   107e4:	add	ip, ip, #16, 20	; 0x10000
   107e8:	ldr	pc, [ip, #2108]!	; 0x83c

000107ec <malloc@plt>:
   107ec:	add	ip, pc, #0, 12
   107f0:	add	ip, ip, #16, 20	; 0x10000
   107f4:	ldr	pc, [ip, #2100]!	; 0x834

000107f8 <__libc_start_main@plt>:
   107f8:	add	ip, pc, #0, 12
   107fc:	add	ip, ip, #16, 20	; 0x10000
   10800:	ldr	pc, [ip, #2092]!	; 0x82c

00010804 <__gmon_start__@plt>:
   10804:	add	ip, pc, #0, 12
   10808:	add	ip, ip, #16, 20	; 0x10000
   1080c:	ldr	pc, [ip, #2084]!	; 0x824

00010810 <strlen@plt>:
   10810:	add	ip, pc, #0, 12
   10814:	add	ip, ip, #16, 20	; 0x10000
   10818:	ldr	pc, [ip, #2076]!	; 0x81c

0001081c <__isoc99_scanf@plt>:
   1081c:	add	ip, pc, #0, 12
   10820:	add	ip, ip, #16, 20	; 0x10000
   10824:	ldr	pc, [ip, #2068]!	; 0x814

00010828 <abort@plt>:
   10828:	add	ip, pc, #0, 12
   1082c:	add	ip, ip, #16, 20	; 0x10000
   10830:	ldr	pc, [ip, #2060]!	; 0x80c

Disassembly of section .text:

00010834 <_start@@Base>:
   10834:	mov	fp, #0
   10838:	mov	lr, #0
   1083c:	pop	{r1}		; (ldr r1, [sp], #4)
   10840:	mov	r2, sp
   10844:	push	{r2}		; (str r2, [sp, #-4]!)
   10848:	push	{r0}		; (str r0, [sp, #-4]!)
   1084c:	ldr	ip, [pc, #16]	; 10864 <_start@@Base+0x30>
   10850:	push	{ip}		; (str ip, [sp, #-4]!)
   10854:	ldr	r0, [pc, #12]	; 10868 <_start@@Base+0x34>
   10858:	ldr	r3, [pc, #12]	; 1086c <_start@@Base+0x38>
   1085c:	bl	107f8 <__libc_start_main@plt>
   10860:	bl	10828 <abort@plt>
   10864:	ldrdeq	r0, [r1], -r8
   10868:	andeq	r0, r1, r4, lsr #18
   1086c:	andeq	r0, r1, r8, ror sl
   10870:	ldr	r3, [pc, #20]	; 1088c <_start@@Base+0x58>
   10874:	ldr	r2, [pc, #20]	; 10890 <_start@@Base+0x5c>
   10878:	add	r3, pc, r3
   1087c:	ldr	r2, [r3, r2]
   10880:	cmp	r2, #0
   10884:	bxeq	lr
   10888:	b	10804 <__gmon_start__@plt>
   1088c:	andeq	r0, r1, r0, lsl #15
   10890:	andeq	r0, r0, r0, asr #32
   10894:	ldr	r0, [pc, #24]	; 108b4 <_start@@Base+0x80>
   10898:	ldr	r3, [pc, #24]	; 108b8 <_start@@Base+0x84>
   1089c:	cmp	r3, r0
   108a0:	bxeq	lr
   108a4:	ldr	r3, [pc, #16]	; 108bc <_start@@Base+0x88>
   108a8:	cmp	r3, #0
   108ac:	bxeq	lr
   108b0:	bx	r3
   108b4:	andeq	r1, r2, ip, asr #32
   108b8:	andeq	r1, r2, ip, asr #32
   108bc:	andeq	r0, r0, r0
   108c0:	ldr	r0, [pc, #36]	; 108ec <_start@@Base+0xb8>
   108c4:	ldr	r1, [pc, #36]	; 108f0 <_start@@Base+0xbc>
   108c8:	sub	r1, r1, r0
   108cc:	asr	r1, r1, #2
   108d0:	add	r1, r1, r1, lsr #31
   108d4:	asrs	r1, r1, #1
   108d8:	bxeq	lr
   108dc:	ldr	r3, [pc, #16]	; 108f4 <_start@@Base+0xc0>
   108e0:	cmp	r3, #0
   108e4:	bxeq	lr
   108e8:	bx	r3
   108ec:	andeq	r1, r2, ip, asr #32
   108f0:	andeq	r1, r2, ip, asr #32
   108f4:	andeq	r0, r0, r0
   108f8:	push	{r4, lr}
   108fc:	ldr	r4, [pc, #24]	; 1091c <_start@@Base+0xe8>
   10900:	ldrb	r3, [r4]
   10904:	cmp	r3, #0
   10908:	popne	{r4, pc}
   1090c:	bl	10894 <_start@@Base+0x60>
   10910:	mov	r3, #1
   10914:	strb	r3, [r4]
   10918:	pop	{r4, pc}
   1091c:	andeq	r1, r2, r4, asr r0
   10920:	b	108c0 <_start@@Base+0x8c>

00010924 <main@@Base>:
   10924:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10928:	add	fp, sp, #28
   1092c:	sub	sp, sp, #84	; 0x54
   10930:	mov	r0, #12
   10934:	bl	107ec <malloc@plt>
   10938:	movw	r4, #2792	; 0xae8
   1093c:	movw	r7, #2798	; 0xaee
   10940:	movw	r6, #2834	; 0xb12
   10944:	mov	r8, #0
   10948:	mov	r9, r0
   1094c:	mov	r5, sp
   10950:	movt	r4, #1
   10954:	movt	r7, #1
   10958:	movt	r6, #1
   1095c:	str	r8, [r0]
   10960:	str	r8, [r0, #4]
   10964:	str	r8, [r0, #8]
   10968:	add	sl, r8, #1
   1096c:	mov	r0, r4
   10970:	mov	r1, sl
   10974:	bl	10798 <printf@plt>
   10978:	ldr	r0, [r9, r8, lsl #2]
   1097c:	cmp	r0, #0
   10980:	movweq	r0, #2851	; 0xb23
   10984:	movteq	r0, #1
   10988:	bl	107e0 <puts@plt>
   1098c:	cmp	sl, #3
   10990:	mov	r8, sl
   10994:	bne	10968 <main@@Base+0x44>
   10998:	mov	r0, r7
   1099c:	mov	r1, #3
   109a0:	bl	10798 <printf@plt>
   109a4:	mov	r0, r6
   109a8:	mov	r1, r5
   109ac:	bl	1081c <__isoc99_scanf@plt>
   109b0:	bl	107bc <getchar@plt>
   109b4:	ldr	r0, [sp]
   109b8:	cmp	r0, #3
   109bc:	bhi	10998 <main@@Base+0x74>
   109c0:	cmp	r0, #0
   109c4:	beq	10a4c <main@@Base+0x128>
   109c8:	movw	r0, #2837	; 0xb15
   109cc:	movt	r0, #1
   109d0:	bl	10798 <printf@plt>
   109d4:	movw	r0, #4176	; 0x1050
   109d8:	mov	sl, r9
   109dc:	add	r9, sp, #4
   109e0:	mov	r1, #80	; 0x50
   109e4:	movt	r0, #2
   109e8:	ldr	r2, [r0]
   109ec:	mov	r0, r9
   109f0:	bl	107b0 <fgets@plt>
   109f4:	mov	r0, r9
   109f8:	bl	10810 <strlen@plt>
   109fc:	add	r1, r0, r9
   10a00:	mov	r8, #0
   10a04:	mov	r0, r9
   10a08:	mov	r9, r4
   10a0c:	strb	r8, [r1, #-1]
   10a10:	ldr	r1, [sp]
   10a14:	add	r1, sl, r1, lsl #2
   10a18:	ldr	r4, [r1, #-4]
   10a1c:	bl	10810 <strlen@plt>
   10a20:	add	r1, r0, #1
   10a24:	mov	r0, r4
   10a28:	mov	r4, r9
   10a2c:	bl	107c8 <realloc@plt>
   10a30:	ldr	r1, [sp]
   10a34:	mov	r9, sl
   10a38:	add	r1, sl, r1, lsl #2
   10a3c:	str	r0, [r1, #-4]
   10a40:	add	r1, sp, #4
   10a44:	bl	107d4 <strcpy@plt>
   10a48:	b	10968 <main@@Base+0x44>
   10a4c:	mov	r4, #0
   10a50:	ldr	r0, [r9, -r4, lsl #2]
   10a54:	bl	107a4 <free@plt>
   10a58:	sub	r4, r4, #1
   10a5c:	cmn	r4, #3
   10a60:	bne	10a50 <main@@Base+0x12c>
   10a64:	mov	r0, r9
   10a68:	bl	107a4 <free@plt>
   10a6c:	mov	r0, #0
   10a70:	sub	sp, fp, #28
   10a74:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

00010a78 <__libc_csu_init@@Base>:
   10a78:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   10a7c:	mov	r7, r0
   10a80:	ldr	r6, [pc, #72]	; 10ad0 <__libc_csu_init@@Base+0x58>
   10a84:	ldr	r5, [pc, #72]	; 10ad4 <__libc_csu_init@@Base+0x5c>
   10a88:	add	r6, pc, r6
   10a8c:	add	r5, pc, r5
   10a90:	sub	r6, r6, r5
   10a94:	mov	r8, r1
   10a98:	mov	r9, r2
   10a9c:	bl	10778 <printf@plt-0x20>
   10aa0:	asrs	r6, r6, #2
   10aa4:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   10aa8:	mov	r4, #0
   10aac:	add	r4, r4, #1
   10ab0:	ldr	r3, [r5], #4
   10ab4:	mov	r2, r9
   10ab8:	mov	r1, r8
   10abc:	mov	r0, r7
   10ac0:	blx	r3
   10ac4:	cmp	r6, r4
   10ac8:	bne	10aac <__libc_csu_init@@Base+0x34>
   10acc:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   10ad0:	andeq	r0, r1, ip, ror r4
   10ad4:	andeq	r0, r1, r4, ror r4

00010ad8 <__libc_csu_fini@@Base>:
   10ad8:	bx	lr

Disassembly of section .fini:

00010adc <.fini>:
   10adc:	push	{r3, lr}
   10ae0:	pop	{r3, pc}
