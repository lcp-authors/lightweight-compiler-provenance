
../repos/coreutils/src/df:     file format elf32-littlearm


Disassembly of section .init:

000114c4 <.init>:
   114c4:	push	{r3, lr}
   114c8:	bl	1193c <__assert_fail@plt+0x50>
   114cc:	pop	{r3, pc}

Disassembly of section .plt:

000114d0 <calloc@plt-0x14>:
   114d0:	push	{lr}		; (str lr, [sp, #-4]!)
   114d4:	ldr	lr, [pc, #4]	; 114e0 <calloc@plt-0x4>
   114d8:	add	lr, pc, lr
   114dc:	ldr	pc, [lr, #8]!
   114e0:	andeq	pc, r1, r0, lsr #22

000114e4 <calloc@plt>:
   114e4:	add	ip, pc, #0, 12
   114e8:	add	ip, ip, #126976	; 0x1f000
   114ec:	ldr	pc, [ip, #2848]!	; 0xb20

000114f0 <fputs_unlocked@plt>:
   114f0:	add	ip, pc, #0, 12
   114f4:	add	ip, ip, #126976	; 0x1f000
   114f8:	ldr	pc, [ip, #2840]!	; 0xb18

000114fc <raise@plt>:
   114fc:	add	ip, pc, #0, 12
   11500:	add	ip, ip, #126976	; 0x1f000
   11504:	ldr	pc, [ip, #2832]!	; 0xb10

00011508 <strverscmp@plt>:
   11508:	add	ip, pc, #0, 12
   1150c:	add	ip, ip, #126976	; 0x1f000
   11510:	ldr	pc, [ip, #2824]!	; 0xb08

00011514 <__getdelim@plt>:
   11514:	add	ip, pc, #0, 12
   11518:	add	ip, ip, #126976	; 0x1f000
   1151c:	ldr	pc, [ip, #2816]!	; 0xb00

00011520 <strcmp@plt>:
   11520:	add	ip, pc, #0, 12
   11524:	add	ip, ip, #126976	; 0x1f000
   11528:	ldr	pc, [ip, #2808]!	; 0xaf8

0001152c <fflush@plt>:
   1152c:	add	ip, pc, #0, 12
   11530:	add	ip, ip, #126976	; 0x1f000
   11534:	ldr	pc, [ip, #2800]!	; 0xaf0

00011538 <wcwidth@plt>:
   11538:	add	ip, pc, #0, 12
   1153c:	add	ip, ip, #126976	; 0x1f000
   11540:	ldr	pc, [ip, #2792]!	; 0xae8

00011544 <memmove@plt>:
   11544:	add	ip, pc, #0, 12
   11548:	add	ip, ip, #126976	; 0x1f000
   1154c:	ldr	pc, [ip, #2784]!	; 0xae0

00011550 <free@plt>:
   11550:	add	ip, pc, #0, 12
   11554:	add	ip, ip, #126976	; 0x1f000
   11558:	ldr	pc, [ip, #2776]!	; 0xad8

0001155c <faccessat@plt>:
   1155c:	add	ip, pc, #0, 12
   11560:	add	ip, ip, #126976	; 0x1f000
   11564:	ldr	pc, [ip, #2768]!	; 0xad0

00011568 <_exit@plt>:
   11568:	add	ip, pc, #0, 12
   1156c:	add	ip, ip, #126976	; 0x1f000
   11570:	ldr	pc, [ip, #2760]!	; 0xac8

00011574 <memcpy@plt>:
   11574:	add	ip, pc, #0, 12
   11578:	add	ip, ip, #126976	; 0x1f000
   1157c:	ldr	pc, [ip, #2752]!	; 0xac0

00011580 <__strtoull_internal@plt>:
   11580:	add	ip, pc, #0, 12
   11584:	add	ip, ip, #126976	; 0x1f000
   11588:	ldr	pc, [ip, #2744]!	; 0xab8

0001158c <mbsinit@plt>:
   1158c:	add	ip, pc, #0, 12
   11590:	add	ip, ip, #126976	; 0x1f000
   11594:	ldr	pc, [ip, #2736]!	; 0xab0

00011598 <memcmp@plt>:
   11598:	add	ip, pc, #0, 12
   1159c:	add	ip, ip, #126976	; 0x1f000
   115a0:	ldr	pc, [ip, #2728]!	; 0xaa8

000115a4 <uname@plt>:
   115a4:	add	ip, pc, #0, 12
   115a8:	add	ip, ip, #126976	; 0x1f000
   115ac:	ldr	pc, [ip, #2720]!	; 0xaa0

000115b0 <dcgettext@plt>:
   115b0:	add	ip, pc, #0, 12
   115b4:	add	ip, ip, #126976	; 0x1f000
   115b8:	ldr	pc, [ip, #2712]!	; 0xa98

000115bc <strdup@plt>:
   115bc:	add	ip, pc, #0, 12
   115c0:	add	ip, ip, #126976	; 0x1f000
   115c4:	ldr	pc, [ip, #2704]!	; 0xa90

000115c8 <realloc@plt>:
   115c8:	add	ip, pc, #0, 12
   115cc:	add	ip, ip, #126976	; 0x1f000
   115d0:	ldr	pc, [ip, #2696]!	; 0xa88

000115d4 <textdomain@plt>:
   115d4:	add	ip, pc, #0, 12
   115d8:	add	ip, ip, #126976	; 0x1f000
   115dc:	ldr	pc, [ip, #2688]!	; 0xa80

000115e0 <iswcntrl@plt>:
   115e0:	add	ip, pc, #0, 12
   115e4:	add	ip, ip, #126976	; 0x1f000
   115e8:	ldr	pc, [ip, #2680]!	; 0xa78

000115ec <rawmemchr@plt>:
   115ec:	add	ip, pc, #0, 12
   115f0:	add	ip, ip, #126976	; 0x1f000
   115f4:	ldr	pc, [ip, #2672]!	; 0xa70

000115f8 <chdir@plt>:
   115f8:	add	ip, pc, #0, 12
   115fc:	add	ip, ip, #126976	; 0x1f000
   11600:	ldr	pc, [ip, #2664]!	; 0xa68

00011604 <iswprint@plt>:
   11604:	add	ip, pc, #0, 12
   11608:	add	ip, ip, #126976	; 0x1f000
   1160c:	ldr	pc, [ip, #2656]!	; 0xa60

00011610 <__fxstat64@plt>:
   11610:	add	ip, pc, #0, 12
   11614:	add	ip, ip, #126976	; 0x1f000
   11618:	ldr	pc, [ip, #2648]!	; 0xa58

0001161c <readlink@plt>:
   1161c:	add	ip, pc, #0, 12
   11620:	add	ip, ip, #126976	; 0x1f000
   11624:	ldr	pc, [ip, #2640]!	; 0xa50

00011628 <fwrite@plt>:
   11628:	add	ip, pc, #0, 12
   1162c:	add	ip, ip, #126976	; 0x1f000
   11630:	ldr	pc, [ip, #2632]!	; 0xa48

00011634 <lseek64@plt>:
   11634:	add	ip, pc, #0, 12
   11638:	add	ip, ip, #126976	; 0x1f000
   1163c:	ldr	pc, [ip, #2624]!	; 0xa40

00011640 <__ctype_get_mb_cur_max@plt>:
   11640:	add	ip, pc, #0, 12
   11644:	add	ip, ip, #126976	; 0x1f000
   11648:	ldr	pc, [ip, #2616]!	; 0xa38

0001164c <hasmntopt@plt>:
   1164c:	add	ip, pc, #0, 12
   11650:	add	ip, ip, #126976	; 0x1f000
   11654:	ldr	pc, [ip, #2608]!	; 0xa30

00011658 <__fpending@plt>:
   11658:	add	ip, pc, #0, 12
   1165c:	add	ip, ip, #126976	; 0x1f000
   11660:	ldr	pc, [ip, #2600]!	; 0xa28

00011664 <mbrtowc@plt>:
   11664:	add	ip, pc, #0, 12
   11668:	add	ip, ip, #126976	; 0x1f000
   1166c:	ldr	pc, [ip, #2592]!	; 0xa20

00011670 <wcstombs@plt>:
   11670:	add	ip, pc, #0, 12
   11674:	add	ip, ip, #126976	; 0x1f000
   11678:	ldr	pc, [ip, #2584]!	; 0xa18

0001167c <error@plt>:
   1167c:	add	ip, pc, #0, 12
   11680:	add	ip, ip, #126976	; 0x1f000
   11684:	ldr	pc, [ip, #2576]!	; 0xa10

00011688 <getmntent@plt>:
   11688:	add	ip, pc, #0, 12
   1168c:	add	ip, ip, #126976	; 0x1f000
   11690:	ldr	pc, [ip, #2568]!	; 0xa08

00011694 <open64@plt>:
   11694:	add	ip, pc, #0, 12
   11698:	add	ip, ip, #126976	; 0x1f000
   1169c:	ldr	pc, [ip, #2560]!	; 0xa00

000116a0 <__asprintf_chk@plt>:
   116a0:	add	ip, pc, #0, 12
   116a4:	add	ip, ip, #126976	; 0x1f000
   116a8:	ldr	pc, [ip, #2552]!	; 0x9f8

000116ac <getenv@plt>:
   116ac:	add	ip, pc, #0, 12
   116b0:	add	ip, ip, #126976	; 0x1f000
   116b4:	ldr	pc, [ip, #2544]!	; 0x9f0

000116b8 <malloc@plt>:
   116b8:	add	ip, pc, #0, 12
   116bc:	add	ip, ip, #126976	; 0x1f000
   116c0:	ldr	pc, [ip, #2536]!	; 0x9e8

000116c4 <__libc_start_main@plt>:
   116c4:	add	ip, pc, #0, 12
   116c8:	add	ip, ip, #126976	; 0x1f000
   116cc:	ldr	pc, [ip, #2528]!	; 0x9e0

000116d0 <__freading@plt>:
   116d0:	add	ip, pc, #0, 12
   116d4:	add	ip, ip, #126976	; 0x1f000
   116d8:	ldr	pc, [ip, #2520]!	; 0x9d8

000116dc <__gmon_start__@plt>:
   116dc:	add	ip, pc, #0, 12
   116e0:	add	ip, ip, #126976	; 0x1f000
   116e4:	ldr	pc, [ip, #2512]!	; 0x9d0

000116e8 <getopt_long@plt>:
   116e8:	add	ip, pc, #0, 12
   116ec:	add	ip, ip, #126976	; 0x1f000
   116f0:	ldr	pc, [ip, #2504]!	; 0x9c8

000116f4 <__ctype_b_loc@plt>:
   116f4:	add	ip, pc, #0, 12
   116f8:	add	ip, ip, #126976	; 0x1f000
   116fc:	ldr	pc, [ip, #2496]!	; 0x9c0

00011700 <getcwd@plt>:
   11700:	add	ip, pc, #0, 12
   11704:	add	ip, ip, #126976	; 0x1f000
   11708:	ldr	pc, [ip, #2488]!	; 0x9b8

0001170c <exit@plt>:
   1170c:	add	ip, pc, #0, 12
   11710:	add	ip, ip, #126976	; 0x1f000
   11714:	ldr	pc, [ip, #2480]!	; 0x9b0

00011718 <strlen@plt>:
   11718:	add	ip, pc, #0, 12
   1171c:	add	ip, ip, #126976	; 0x1f000
   11720:	ldr	pc, [ip, #2472]!	; 0x9a8

00011724 <strchr@plt>:
   11724:	add	ip, pc, #0, 12
   11728:	add	ip, ip, #126976	; 0x1f000
   1172c:	ldr	pc, [ip, #2464]!	; 0x9a0

00011730 <openat64@plt>:
   11730:	add	ip, pc, #0, 12
   11734:	add	ip, ip, #126976	; 0x1f000
   11738:	ldr	pc, [ip, #2456]!	; 0x998

0001173c <memrchr@plt>:
   1173c:	add	ip, pc, #0, 12
   11740:	add	ip, ip, #126976	; 0x1f000
   11744:	ldr	pc, [ip, #2448]!	; 0x990

00011748 <__errno_location@plt>:
   11748:	add	ip, pc, #0, 12
   1174c:	add	ip, ip, #126976	; 0x1f000
   11750:	ldr	pc, [ip, #2440]!	; 0x988

00011754 <__sprintf_chk@plt>:
   11754:	add	ip, pc, #0, 12
   11758:	add	ip, ip, #126976	; 0x1f000
   1175c:	ldr	pc, [ip, #2432]!	; 0x980

00011760 <__cxa_atexit@plt>:
   11760:	add	ip, pc, #0, 12
   11764:	add	ip, ip, #126976	; 0x1f000
   11768:	ldr	pc, [ip, #2424]!	; 0x978

0001176c <memset@plt>:
   1176c:	add	ip, pc, #0, 12
   11770:	add	ip, ip, #126976	; 0x1f000
   11774:	ldr	pc, [ip, #2416]!	; 0x970

00011778 <__printf_chk@plt>:
   11778:	add	ip, pc, #0, 12
   1177c:	add	ip, ip, #126976	; 0x1f000
   11780:	ldr	pc, [ip, #2408]!	; 0x968

00011784 <statvfs64@plt>:
   11784:	add	ip, pc, #0, 12
   11788:	add	ip, ip, #126976	; 0x1f000
   1178c:	ldr	pc, [ip, #2400]!	; 0x960

00011790 <fileno@plt>:
   11790:	add	ip, pc, #0, 12
   11794:	add	ip, ip, #126976	; 0x1f000
   11798:	ldr	pc, [ip, #2392]!	; 0x958

0001179c <__fprintf_chk@plt>:
   1179c:	add	ip, pc, #0, 12
   117a0:	add	ip, ip, #126976	; 0x1f000
   117a4:	ldr	pc, [ip, #2384]!	; 0x950

000117a8 <memchr@plt>:
   117a8:	add	ip, pc, #0, 12
   117ac:	add	ip, ip, #126976	; 0x1f000
   117b0:	ldr	pc, [ip, #2376]!	; 0x948

000117b4 <fclose@plt>:
   117b4:	add	ip, pc, #0, 12
   117b8:	add	ip, ip, #126976	; 0x1f000
   117bc:	ldr	pc, [ip, #2368]!	; 0x940

000117c0 <fseeko64@plt>:
   117c0:	add	ip, pc, #0, 12
   117c4:	add	ip, ip, #126976	; 0x1f000
   117c8:	ldr	pc, [ip, #2360]!	; 0x938

000117cc <endmntent@plt>:
   117cc:	add	ip, pc, #0, 12
   117d0:	add	ip, ip, #126976	; 0x1f000
   117d4:	ldr	pc, [ip, #2352]!	; 0x930

000117d8 <fcntl64@plt>:
   117d8:	add	ip, pc, #0, 12
   117dc:	add	ip, ip, #126976	; 0x1f000
   117e0:	ldr	pc, [ip, #2344]!	; 0x928

000117e4 <__overflow@plt>:
   117e4:	add	ip, pc, #0, 12
   117e8:	add	ip, ip, #126976	; 0x1f000
   117ec:	ldr	pc, [ip, #2336]!	; 0x920

000117f0 <setlocale@plt>:
   117f0:	add	ip, pc, #0, 12
   117f4:	add	ip, ip, #126976	; 0x1f000
   117f8:	ldr	pc, [ip, #2328]!	; 0x918

000117fc <wcswidth@plt>:
   117fc:	add	ip, pc, #0, 12
   11800:	add	ip, ip, #126976	; 0x1f000
   11804:	ldr	pc, [ip, #2320]!	; 0x910

00011808 <strrchr@plt>:
   11808:	add	ip, pc, #0, 12
   1180c:	add	ip, ip, #126976	; 0x1f000
   11810:	ldr	pc, [ip, #2312]!	; 0x908

00011814 <statfs64@plt>:
   11814:	add	ip, pc, #0, 12
   11818:	add	ip, ip, #126976	; 0x1f000
   1181c:	ldr	pc, [ip, #2304]!	; 0x900

00011820 <nl_langinfo@plt>:
   11820:	add	ip, pc, #0, 12
   11824:	add	ip, ip, #126976	; 0x1f000
   11828:	ldr	pc, [ip, #2296]!	; 0x8f8

0001182c <sscanf@plt>:
   1182c:	add	ip, pc, #0, 12
   11830:	add	ip, ip, #126976	; 0x1f000
   11834:	ldr	pc, [ip, #2288]!	; 0x8f0

00011838 <localeconv@plt>:
   11838:	add	ip, pc, #0, 12
   1183c:	add	ip, ip, #126976	; 0x1f000
   11840:	ldr	pc, [ip, #2280]!	; 0x8e8

00011844 <mbstowcs@plt>:
   11844:	add	ip, pc, #0, 12
   11848:	add	ip, ip, #126976	; 0x1f000
   1184c:	ldr	pc, [ip, #2272]!	; 0x8e0

00011850 <fchdir@plt>:
   11850:	add	ip, pc, #0, 12
   11854:	add	ip, ip, #126976	; 0x1f000
   11858:	ldr	pc, [ip, #2264]!	; 0x8d8

0001185c <canonicalize_file_name@plt>:
   1185c:	add	ip, pc, #0, 12
   11860:	add	ip, ip, #126976	; 0x1f000
   11864:	ldr	pc, [ip, #2256]!	; 0x8d0

00011868 <fopen64@plt>:
   11868:	add	ip, pc, #0, 12
   1186c:	add	ip, ip, #126976	; 0x1f000
   11870:	ldr	pc, [ip, #2248]!	; 0x8c8

00011874 <setmntent@plt>:
   11874:	add	ip, pc, #0, 12
   11878:	add	ip, ip, #126976	; 0x1f000
   1187c:	ldr	pc, [ip, #2240]!	; 0x8c0

00011880 <bindtextdomain@plt>:
   11880:	add	ip, pc, #0, 12
   11884:	add	ip, ip, #126976	; 0x1f000
   11888:	ldr	pc, [ip, #2232]!	; 0x8b8

0001188c <sync@plt>:
   1188c:	add	ip, pc, #0, 12
   11890:	add	ip, ip, #126976	; 0x1f000
   11894:	ldr	pc, [ip, #2224]!	; 0x8b0

00011898 <__xstat64@plt>:
   11898:	add	ip, pc, #0, 12
   1189c:	add	ip, ip, #126976	; 0x1f000
   118a0:	ldr	pc, [ip, #2216]!	; 0x8a8

000118a4 <isatty@plt>:
   118a4:	add	ip, pc, #0, 12
   118a8:	add	ip, ip, #126976	; 0x1f000
   118ac:	ldr	pc, [ip, #2208]!	; 0x8a0

000118b0 <strncmp@plt>:
   118b0:	add	ip, pc, #0, 12
   118b4:	add	ip, ip, #126976	; 0x1f000
   118b8:	ldr	pc, [ip, #2200]!	; 0x898

000118bc <abort@plt>:
   118bc:	add	ip, pc, #0, 12
   118c0:	add	ip, ip, #126976	; 0x1f000
   118c4:	ldr	pc, [ip, #2192]!	; 0x890

000118c8 <close@plt>:
   118c8:	add	ip, pc, #0, 12
   118cc:	add	ip, ip, #126976	; 0x1f000
   118d0:	ldr	pc, [ip, #2184]!	; 0x888

000118d4 <strspn@plt>:
   118d4:	add	ip, pc, #0, 12
   118d8:	add	ip, ip, #126976	; 0x1f000
   118dc:	ldr	pc, [ip, #2176]!	; 0x880

000118e0 <__mempcpy_chk@plt>:
   118e0:	add	ip, pc, #0, 12
   118e4:	add	ip, ip, #126976	; 0x1f000
   118e8:	ldr	pc, [ip, #2168]!	; 0x878

000118ec <__assert_fail@plt>:
   118ec:	add	ip, pc, #0, 12
   118f0:	add	ip, ip, #126976	; 0x1f000
   118f4:	ldr	pc, [ip, #2160]!	; 0x870

Disassembly of section .text:

00011900 <.text>:
   11900:	mov	fp, #0
   11904:	mov	lr, #0
   11908:	pop	{r1}		; (ldr r1, [sp], #4)
   1190c:	mov	r2, sp
   11910:	push	{r2}		; (str r2, [sp, #-4]!)
   11914:	push	{r0}		; (str r0, [sp, #-4]!)
   11918:	ldr	ip, [pc, #16]	; 11930 <__assert_fail@plt+0x44>
   1191c:	push	{ip}		; (str ip, [sp, #-4]!)
   11920:	ldr	r0, [pc, #12]	; 11934 <__assert_fail@plt+0x48>
   11924:	ldr	r3, [pc, #12]	; 11938 <__assert_fail@plt+0x4c>
   11928:	bl	116c4 <__libc_start_main@plt>
   1192c:	bl	118bc <abort@plt>
   11930:	andeq	lr, r1, r8, asr #30
   11934:	andeq	r1, r1, ip, lsr sp
   11938:	andeq	lr, r1, r8, ror #29
   1193c:	ldr	r3, [pc, #20]	; 11958 <__assert_fail@plt+0x6c>
   11940:	ldr	r2, [pc, #20]	; 1195c <__assert_fail@plt+0x70>
   11944:	add	r3, pc, r3
   11948:	ldr	r2, [r3, r2]
   1194c:	cmp	r2, #0
   11950:	bxeq	lr
   11954:	b	116dc <__gmon_start__@plt>
   11958:			; <UNDEFINED> instruction: 0x0001f6b4
   1195c:	andeq	r0, r0, r8, ror #2
   11960:	ldr	r0, [pc, #24]	; 11980 <__assert_fail@plt+0x94>
   11964:	ldr	r3, [pc, #24]	; 11984 <__assert_fail@plt+0x98>
   11968:	cmp	r3, r0
   1196c:	bxeq	lr
   11970:	ldr	r3, [pc, #16]	; 11988 <__assert_fail@plt+0x9c>
   11974:	cmp	r3, #0
   11978:	bxeq	lr
   1197c:	bx	r3
   11980:	andeq	r1, r3, ip, lsl r3
   11984:	andeq	r1, r3, ip, lsl r3
   11988:	andeq	r0, r0, r0
   1198c:	ldr	r0, [pc, #36]	; 119b8 <__assert_fail@plt+0xcc>
   11990:	ldr	r1, [pc, #36]	; 119bc <__assert_fail@plt+0xd0>
   11994:	sub	r1, r1, r0
   11998:	asr	r1, r1, #2
   1199c:	add	r1, r1, r1, lsr #31
   119a0:	asrs	r1, r1, #1
   119a4:	bxeq	lr
   119a8:	ldr	r3, [pc, #16]	; 119c0 <__assert_fail@plt+0xd4>
   119ac:	cmp	r3, #0
   119b0:	bxeq	lr
   119b4:	bx	r3
   119b8:	andeq	r1, r3, ip, lsl r3
   119bc:	andeq	r1, r3, ip, lsl r3
   119c0:	andeq	r0, r0, r0
   119c4:	push	{r4, lr}
   119c8:	ldr	r4, [pc, #24]	; 119e8 <__assert_fail@plt+0xfc>
   119cc:	ldrb	r3, [r4]
   119d0:	cmp	r3, #0
   119d4:	popne	{r4, pc}
   119d8:	bl	11960 <__assert_fail@plt+0x74>
   119dc:	mov	r3, #1
   119e0:	strb	r3, [r4]
   119e4:	pop	{r4, pc}
   119e8:	andeq	r1, r3, ip, lsr r3
   119ec:	b	1198c <__assert_fail@plt+0xa0>
   119f0:	push	{fp, lr}
   119f4:	mov	fp, sp
   119f8:	sub	sp, sp, #56	; 0x38
   119fc:	mov	r4, r0
   11a00:	cmp	r0, #0
   11a04:	bne	11cf8 <__assert_fail@plt+0x40c>
   11a08:	movw	r1, #61339	; 0xef9b
   11a0c:	mov	r0, #0
   11a10:	mov	r2, #5
   11a14:	movt	r1, #1
   11a18:	bl	115b0 <dcgettext@plt>
   11a1c:	mov	r1, r0
   11a20:	movw	r0, #5056	; 0x13c0
   11a24:	movt	r0, #3
   11a28:	ldr	r2, [r0]
   11a2c:	mov	r0, #1
   11a30:	bl	11778 <__printf_chk@plt>
   11a34:	movw	r1, #61372	; 0xefbc
   11a38:	mov	r0, #0
   11a3c:	mov	r2, #5
   11a40:	movt	r1, #1
   11a44:	bl	115b0 <dcgettext@plt>
   11a48:	movw	r7, #4916	; 0x1334
   11a4c:	movt	r7, #3
   11a50:	ldr	r1, [r7]
   11a54:	bl	114f0 <fputs_unlocked@plt>
   11a58:	movw	r1, #63403	; 0xf7ab
   11a5c:	mov	r0, #0
   11a60:	mov	r2, #5
   11a64:	movt	r1, #1
   11a68:	bl	115b0 <dcgettext@plt>
   11a6c:	ldr	r1, [r7]
   11a70:	bl	114f0 <fputs_unlocked@plt>
   11a74:	movw	r1, #61472	; 0xf020
   11a78:	mov	r0, #0
   11a7c:	mov	r2, #5
   11a80:	movt	r1, #1
   11a84:	bl	115b0 <dcgettext@plt>
   11a88:	ldr	r1, [r7]
   11a8c:	bl	114f0 <fputs_unlocked@plt>
   11a90:	movw	r1, #61882	; 0xf1ba
   11a94:	mov	r0, #0
   11a98:	mov	r2, #5
   11a9c:	movt	r1, #1
   11aa0:	bl	115b0 <dcgettext@plt>
   11aa4:	ldr	r1, [r7]
   11aa8:	bl	114f0 <fputs_unlocked@plt>
   11aac:	movw	r1, #62137	; 0xf2b9
   11ab0:	mov	r0, #0
   11ab4:	mov	r2, #5
   11ab8:	movt	r1, #1
   11abc:	bl	115b0 <dcgettext@plt>
   11ac0:	ldr	r1, [r7]
   11ac4:	bl	114f0 <fputs_unlocked@plt>
   11ac8:	movw	r1, #62403	; 0xf3c3
   11acc:	mov	r0, #0
   11ad0:	mov	r2, #5
   11ad4:	movt	r1, #1
   11ad8:	bl	115b0 <dcgettext@plt>
   11adc:	ldr	r1, [r7]
   11ae0:	bl	114f0 <fputs_unlocked@plt>
   11ae4:	movw	r1, #62532	; 0xf444
   11ae8:	mov	r0, #0
   11aec:	mov	r2, #5
   11af0:	movt	r1, #1
   11af4:	bl	115b0 <dcgettext@plt>
   11af8:	ldr	r1, [r7]
   11afc:	bl	114f0 <fputs_unlocked@plt>
   11b00:	movw	r1, #62756	; 0xf524
   11b04:	mov	r0, #0
   11b08:	mov	r2, #5
   11b0c:	movt	r1, #1
   11b10:	bl	115b0 <dcgettext@plt>
   11b14:	ldr	r1, [r7]
   11b18:	bl	114f0 <fputs_unlocked@plt>
   11b1c:	movw	r1, #62801	; 0xf551
   11b20:	mov	r0, #0
   11b24:	mov	r2, #5
   11b28:	movt	r1, #1
   11b2c:	bl	115b0 <dcgettext@plt>
   11b30:	ldr	r1, [r7]
   11b34:	bl	114f0 <fputs_unlocked@plt>
   11b38:	movw	r1, #63478	; 0xf7f6
   11b3c:	mov	r0, #0
   11b40:	mov	r2, #5
   11b44:	movt	r1, #1
   11b48:	bl	115b0 <dcgettext@plt>
   11b4c:	movw	r2, #62855	; 0xf587
   11b50:	mov	r1, r0
   11b54:	mov	r0, #1
   11b58:	movt	r2, #1
   11b5c:	bl	11778 <__printf_chk@plt>
   11b60:	movw	r1, #63701	; 0xf8d5
   11b64:	mov	r0, #0
   11b68:	mov	r2, #5
   11b6c:	movt	r1, #1
   11b70:	bl	115b0 <dcgettext@plt>
   11b74:	ldr	r1, [r7]
   11b78:	bl	114f0 <fputs_unlocked@plt>
   11b7c:	movw	r1, #62858	; 0xf58a
   11b80:	mov	r0, #0
   11b84:	mov	r2, #5
   11b88:	movt	r1, #1
   11b8c:	bl	115b0 <dcgettext@plt>
   11b90:	ldr	r1, [r7]
   11b94:	bl	114f0 <fputs_unlocked@plt>
   11b98:	movw	r0, #65320	; 0xff28
   11b9c:	mov	r2, #48	; 0x30
   11ba0:	mov	r6, sp
   11ba4:	movw	r5, #63078	; 0xf666
   11ba8:	movt	r0, #1
   11bac:	movt	r5, #1
   11bb0:	add	r1, r0, #32
   11bb4:	add	r3, r0, #16
   11bb8:	vld1.64	{d18-d19}, [r0], r2
   11bbc:	vld1.64	{d16-d17}, [r1]
   11bc0:	vld1.64	{d20-d21}, [r3]
   11bc4:	add	r1, r6, #32
   11bc8:	vldr	d22, [r0]
   11bcc:	add	r0, r6, #16
   11bd0:	vst1.64	{d16-d17}, [r1]
   11bd4:	movw	r1, #63913	; 0xf9a9
   11bd8:	vst1.64	{d20-d21}, [r0]
   11bdc:	mov	r0, r6
   11be0:	vst1.64	{d18-d19}, [r0], r2
   11be4:	movt	r1, #1
   11be8:	vstr	d22, [r0]
   11bec:	mov	r0, r5
   11bf0:	bl	11520 <strcmp@plt>
   11bf4:	cmp	r0, #0
   11bf8:	ldrne	r1, [r6, #8]!
   11bfc:	cmpne	r1, #0
   11c00:	bne	11bec <__assert_fail@plt+0x300>
   11c04:	ldr	r6, [r6, #4]
   11c08:	movw	r1, #64008	; 0xfa08
   11c0c:	mov	r0, #0
   11c10:	mov	r2, #5
   11c14:	movt	r1, #1
   11c18:	bl	115b0 <dcgettext@plt>
   11c1c:	movw	r2, #63183	; 0xf6cf
   11c20:	movw	r3, #64031	; 0xfa1f
   11c24:	mov	r1, r0
   11c28:	mov	r0, #1
   11c2c:	movt	r2, #1
   11c30:	movt	r3, #1
   11c34:	bl	11778 <__printf_chk@plt>
   11c38:	cmp	r6, #0
   11c3c:	mov	r0, #5
   11c40:	mov	r1, #0
   11c44:	moveq	r6, r5
   11c48:	bl	117f0 <setlocale@plt>
   11c4c:	cmp	r0, #0
   11c50:	beq	11c88 <__assert_fail@plt+0x39c>
   11c54:	movw	r1, #64071	; 0xfa47
   11c58:	mov	r2, #3
   11c5c:	movt	r1, #1
   11c60:	bl	118b0 <strncmp@plt>
   11c64:	cmp	r0, #0
   11c68:	beq	11c88 <__assert_fail@plt+0x39c>
   11c6c:	movw	r1, #64075	; 0xfa4b
   11c70:	mov	r0, #0
   11c74:	mov	r2, #5
   11c78:	movt	r1, #1
   11c7c:	bl	115b0 <dcgettext@plt>
   11c80:	ldr	r1, [r7]
   11c84:	bl	114f0 <fputs_unlocked@plt>
   11c88:	movw	r1, #64146	; 0xfa92
   11c8c:	mov	r0, #0
   11c90:	mov	r2, #5
   11c94:	movt	r1, #1
   11c98:	bl	115b0 <dcgettext@plt>
   11c9c:	movw	r2, #64031	; 0xfa1f
   11ca0:	mov	r1, r0
   11ca4:	mov	r0, #1
   11ca8:	mov	r3, r5
   11cac:	movt	r2, #1
   11cb0:	bl	11778 <__printf_chk@plt>
   11cb4:	movw	r1, #64173	; 0xfaad
   11cb8:	mov	r0, #0
   11cbc:	mov	r2, #5
   11cc0:	movt	r1, #1
   11cc4:	bl	115b0 <dcgettext@plt>
   11cc8:	movw	r3, #64223	; 0xfadf
   11ccc:	mov	r1, r0
   11cd0:	movw	r0, #63941	; 0xf9c5
   11cd4:	cmp	r6, r5
   11cd8:	mov	r2, r6
   11cdc:	movt	r0, #1
   11ce0:	movt	r3, #1
   11ce4:	moveq	r3, r0
   11ce8:	mov	r0, #1
   11cec:	bl	11778 <__printf_chk@plt>
   11cf0:	mov	r0, r4
   11cf4:	bl	1170c <exit@plt>
   11cf8:	movw	r0, #4912	; 0x1330
   11cfc:	movw	r1, #61300	; 0xef74
   11d00:	mov	r2, #5
   11d04:	movt	r0, #3
   11d08:	movt	r1, #1
   11d0c:	ldr	r5, [r0]
   11d10:	mov	r0, #0
   11d14:	bl	115b0 <dcgettext@plt>
   11d18:	mov	r2, r0
   11d1c:	movw	r0, #5056	; 0x13c0
   11d20:	mov	r1, #1
   11d24:	movt	r0, #3
   11d28:	ldr	r3, [r0]
   11d2c:	mov	r0, r5
   11d30:	bl	1179c <__fprintf_chk@plt>
   11d34:	mov	r0, r4
   11d38:	bl	1170c <exit@plt>
   11d3c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11d40:	add	fp, sp, #28
   11d44:	sub	sp, sp, #748	; 0x2ec
   11d48:	mov	r5, r0
   11d4c:	ldr	r0, [r1]
   11d50:	mov	r4, r1
   11d54:	bl	19528 <__assert_fail@plt+0x7c3c>
   11d58:	movw	r1, #64223	; 0xfadf
   11d5c:	mov	r0, #6
   11d60:	movt	r1, #1
   11d64:	str	r1, [sp, #56]	; 0x38
   11d68:	bl	117f0 <setlocale@plt>
   11d6c:	movw	r6, #63187	; 0xf6d3
   11d70:	movw	r1, #63081	; 0xf669
   11d74:	movt	r6, #1
   11d78:	movt	r1, #1
   11d7c:	mov	r0, r6
   11d80:	bl	11880 <bindtextdomain@plt>
   11d84:	mov	r0, r6
   11d88:	bl	115d4 <textdomain@plt>
   11d8c:	movw	r0, #23908	; 0x5d64
   11d90:	movt	r0, #1
   11d94:	bl	1ef4c <__assert_fail@plt+0xd660>
   11d98:	movw	r0, #4952	; 0x1358
   11d9c:	mov	r6, #0
   11da0:	mov	r1, #1
   11da4:	movw	r8, #4940	; 0x134c
   11da8:	mov	r2, #5
   11dac:	movt	r0, #3
   11db0:	movt	r8, #3
   11db4:	stm	r0, {r1, r6}
   11db8:	movw	r0, #4928	; 0x1340
   11dbc:	movw	r1, #63105	; 0xf681
   11dc0:	movt	r0, #3
   11dc4:	movt	r1, #1
   11dc8:	str	r6, [r0]
   11dcc:	movw	r0, #4932	; 0x1344
   11dd0:	movt	r0, #3
   11dd4:	str	r6, [r0]
   11dd8:	movw	r0, #4936	; 0x1348
   11ddc:	movt	r0, #3
   11de0:	strb	r6, [r0]
   11de4:	movw	r0, #4937	; 0x1349
   11de8:	movt	r0, #3
   11dec:	strb	r6, [r0]
   11df0:	mvn	r0, #0
   11df4:	str	r0, [r8]
   11df8:	movw	r0, #4944	; 0x1350
   11dfc:	movt	r0, #3
   11e00:	strb	r6, [r0]
   11e04:	movw	r0, #4945	; 0x1351
   11e08:	movt	r0, #3
   11e0c:	strb	r6, [r0]
   11e10:	movw	r0, #4948	; 0x1354
   11e14:	movt	r0, #3
   11e18:	strb	r6, [r0]
   11e1c:	movw	r0, #4949	; 0x1355
   11e20:	movt	r0, #3
   11e24:	strb	r6, [r0]
   11e28:	mov	r0, #0
   11e2c:	bl	115b0 <dcgettext@plt>
   11e30:	movw	r9, #63146	; 0xf6aa
   11e34:	movw	sl, #65048	; 0xfe18
   11e38:	movw	r7, #5016	; 0x1398
   11e3c:	str	r0, [sp, #52]	; 0x34
   11e40:	mov	r0, #0
   11e44:	str	r4, [sp, #36]	; 0x24
   11e48:	str	r5, [sp, #40]	; 0x28
   11e4c:	movt	r9, #1
   11e50:	movt	sl, #1
   11e54:	movt	r7, #3
   11e58:	str	r0, [sp, #60]	; 0x3c
   11e5c:	b	11e78 <__assert_fail@plt+0x58c>
   11e60:	mov	r1, #1
   11e64:	strb	r1, [r0]
   11e68:	b	11e78 <__assert_fail@plt+0x58c>
   11e6c:	movw	r0, #4949	; 0x1355
   11e70:	movt	r0, #3
   11e74:	b	11e60 <__assert_fail@plt+0x574>
   11e78:	mvn	r0, #0
   11e7c:	mov	r1, r4
   11e80:	mov	r2, r9
   11e84:	mov	r3, sl
   11e88:	str	r0, [sp, #64]	; 0x40
   11e8c:	add	r0, sp, #64	; 0x40
   11e90:	str	r0, [sp]
   11e94:	mov	r0, r5
   11e98:	bl	116e8 <getopt_long@plt>
   11e9c:	add	r1, r0, #3
   11ea0:	cmp	r1, #123	; 0x7b
   11ea4:	bhi	120d8 <__assert_fail@plt+0x7ec>
   11ea8:	add	r0, pc, #0
   11eac:	ldr	pc, [r0, r1, lsl #2]
   11eb0:	andeq	r3, r1, r0, lsr #27
   11eb4:	strdeq	r3, [r1], -ip
   11eb8:	muleq	r1, r8, r2
   11ebc:	muleq	r1, r4, sp
   11ec0:	muleq	r1, r4, sp
   11ec4:	muleq	r1, r4, sp
   11ec8:	muleq	r1, r4, sp
   11ecc:	muleq	r1, r4, sp
   11ed0:	muleq	r1, r4, sp
   11ed4:	muleq	r1, r4, sp
   11ed8:	muleq	r1, r4, sp
   11edc:	muleq	r1, r4, sp
   11ee0:	muleq	r1, r4, sp
   11ee4:	muleq	r1, r4, sp
   11ee8:	muleq	r1, r4, sp
   11eec:	muleq	r1, r4, sp
   11ef0:	muleq	r1, r4, sp
   11ef4:	muleq	r1, r4, sp
   11ef8:	muleq	r1, r4, sp
   11efc:	muleq	r1, r4, sp
   11f00:	muleq	r1, r4, sp
   11f04:	muleq	r1, r4, sp
   11f08:	muleq	r1, r4, sp
   11f0c:	muleq	r1, r4, sp
   11f10:	muleq	r1, r4, sp
   11f14:	muleq	r1, r4, sp
   11f18:	muleq	r1, r4, sp
   11f1c:	muleq	r1, r4, sp
   11f20:	muleq	r1, r4, sp
   11f24:	muleq	r1, r4, sp
   11f28:	muleq	r1, r4, sp
   11f2c:	muleq	r1, r4, sp
   11f30:	muleq	r1, r4, sp
   11f34:	muleq	r1, r4, sp
   11f38:	muleq	r1, r4, sp
   11f3c:	muleq	r1, r4, sp
   11f40:	muleq	r1, r4, sp
   11f44:	muleq	r1, r4, sp
   11f48:	muleq	r1, r4, sp
   11f4c:	muleq	r1, r4, sp
   11f50:	muleq	r1, r4, sp
   11f54:	muleq	r1, r4, sp
   11f58:	muleq	r1, r4, sp
   11f5c:	muleq	r1, r4, sp
   11f60:	muleq	r1, r4, sp
   11f64:	muleq	r1, r4, sp
   11f68:	muleq	r1, r4, sp
   11f6c:	muleq	r1, r4, sp
   11f70:	muleq	r1, r4, sp
   11f74:	muleq	r1, r4, sp
   11f78:	muleq	r1, r4, sp
   11f7c:	muleq	r1, r4, sp
   11f80:	muleq	r1, r4, sp
   11f84:	muleq	r1, r4, sp
   11f88:	muleq	r1, r4, sp
   11f8c:	muleq	r1, r4, sp
   11f90:	muleq	r1, r4, sp
   11f94:	muleq	r1, r4, sp
   11f98:	muleq	r1, r4, sp
   11f9c:	muleq	r1, r4, sp
   11fa0:	muleq	r1, r4, sp
   11fa4:	muleq	r1, r4, sp
   11fa8:	muleq	r1, r4, sp
   11fac:	muleq	r1, r4, sp
   11fb0:	muleq	r1, r4, sp
   11fb4:	muleq	r1, r4, sp
   11fb8:	muleq	r1, r4, sp
   11fbc:	muleq	r1, r4, sp
   11fc0:	muleq	r1, r4, sp
   11fc4:	andeq	r2, r1, r0, lsl #4
   11fc8:	muleq	r1, r4, sp
   11fcc:	muleq	r1, r4, sp
   11fd0:	muleq	r1, r4, sp
   11fd4:	andeq	r2, r1, r0, lsr #1
   11fd8:	muleq	r1, r4, sp
   11fdc:	andeq	r2, r1, r4, asr r1
   11fe0:	muleq	r1, r4, sp
   11fe4:	muleq	r1, r4, sp
   11fe8:	muleq	r1, r4, sp
   11fec:	muleq	r1, r4, sp
   11ff0:	muleq	r1, r4, sp
   11ff4:	muleq	r1, r4, sp
   11ff8:	muleq	r1, r4, sp
   11ffc:	andeq	r2, r1, ip, asr #4
   12000:	muleq	r1, r4, sp
   12004:	muleq	r1, r4, sp
   12008:	muleq	r1, r4, sp
   1200c:	ldrdeq	r2, [r1], -r0
   12010:	muleq	r1, r4, sp
   12014:	muleq	r1, r4, sp
   12018:	muleq	r1, r4, sp
   1201c:	muleq	r1, r4, sp
   12020:	muleq	r1, r4, sp
   12024:	muleq	r1, r4, sp
   12028:	muleq	r1, r4, sp
   1202c:	muleq	r1, r4, sp
   12030:	muleq	r1, r4, sp
   12034:	muleq	r1, r4, sp
   12038:	muleq	r1, r4, sp
   1203c:	muleq	r1, r4, sp
   12040:	andeq	r2, r1, r8, ror #3
   12044:	muleq	r1, r4, sp
   12048:	muleq	r1, r4, sp
   1204c:	muleq	r1, r4, sp
   12050:	muleq	r1, r4, sp
   12054:	muleq	r1, r4, sp
   12058:	muleq	r1, r4, sp
   1205c:	andeq	r2, r1, r4, ror #4
   12060:	andeq	r2, r1, r8, lsr #4
   12064:	muleq	r1, r4, sp
   12068:	andeq	r2, r1, ip, lsl #2
   1206c:	andeq	r2, r1, r0, asr #4
   12070:	andeq	r2, r1, r0, lsl #5
   12074:	muleq	r1, r4, sp
   12078:	muleq	r1, r4, sp
   1207c:	muleq	r1, r4, sp
   12080:	muleq	r1, r4, sp
   12084:	muleq	r1, r4, sp
   12088:	muleq	r1, r4, sp
   1208c:	andeq	r2, r1, r0, lsr #1
   12090:	muleq	r1, r4, sp
   12094:	andeq	r1, r1, r8, ror lr
   12098:	muleq	r1, r4, sp
   1209c:	andeq	r2, r1, r8, lsl r1
   120a0:	movw	r0, #4920	; 0x1338
   120a4:	mov	r4, r8
   120a8:	movt	r0, #3
   120ac:	ldr	r8, [r0]
   120b0:	mov	r0, #8
   120b4:	bl	1bb68 <__assert_fail@plt+0xa27c>
   120b8:	movw	r1, #4928	; 0x1340
   120bc:	str	r8, [r0]
   120c0:	mov	r8, r4
   120c4:	ldr	r5, [sp, #40]	; 0x28
   120c8:	ldr	r4, [sp, #36]	; 0x24
   120cc:	mov	r6, #0
   120d0:	movt	r1, #3
   120d4:	b	12140 <__assert_fail@plt+0x854>
   120d8:	sub	r0, r0, #256	; 0x100
   120dc:	cmp	r0, #3
   120e0:	bhi	13d94 <__assert_fail@plt+0x24a8>
   120e4:	add	r1, pc, #0
   120e8:	ldr	pc, [r1, r0, lsl #2]
   120ec:	strdeq	r2, [r1], -ip
   120f0:	strdeq	r2, [r1], -r4
   120f4:	andeq	r1, r1, ip, ror #28
   120f8:	andeq	r2, r1, r0, ror r1
   120fc:	movw	r0, #5021	; 0x139d
   12100:	movt	r0, #3
   12104:	strb	r6, [r0]
   12108:	b	11e78 <__assert_fail@plt+0x58c>
   1210c:	movw	r0, #5008	; 0x1390
   12110:	mov	r1, #1024	; 0x400
   12114:	b	12288 <__assert_fail@plt+0x99c>
   12118:	movw	r0, #4920	; 0x1338
   1211c:	movt	r0, #3
   12120:	ldr	r7, [r0]
   12124:	mov	r0, #8
   12128:	bl	1bb68 <__assert_fail@plt+0xa27c>
   1212c:	movw	r1, #4932	; 0x1344
   12130:	str	r7, [r0]
   12134:	movw	r7, #5016	; 0x1398
   12138:	movt	r1, #3
   1213c:	movt	r7, #3
   12140:	mov	r2, r1
   12144:	ldr	r1, [r1]
   12148:	str	r1, [r0, #4]
   1214c:	str	r0, [r2]
   12150:	b	11e78 <__assert_fail@plt+0x58c>
   12154:	movw	r0, #5008	; 0x1390
   12158:	mov	r1, #1
   1215c:	movt	r0, #3
   12160:	stm	r0, {r1, r6}
   12164:	mov	r0, #144	; 0x90
   12168:	str	r0, [r8]
   1216c:	b	11e78 <__assert_fail@plt+0x58c>
   12170:	ldr	r0, [r7]
   12174:	cmp	r0, #1
   12178:	beq	13e38 <__assert_fail@plt+0x254c>
   1217c:	ldr	r1, [sp, #60]	; 0x3c
   12180:	cmp	r0, #0
   12184:	movwne	r0, #1
   12188:	mvn	r1, r1
   1218c:	orr	r0, r1, r0
   12190:	tst	r0, #1
   12194:	beq	13e4c <__assert_fail@plt+0x2560>
   12198:	movw	r0, #4944	; 0x1350
   1219c:	movt	r0, #3
   121a0:	ldrb	r0, [r0]
   121a4:	cmp	r0, #1
   121a8:	beq	13e24 <__assert_fail@plt+0x2538>
   121ac:	mov	r0, #4
   121b0:	str	r0, [r7]
   121b4:	movw	r0, #4920	; 0x1338
   121b8:	movt	r0, #3
   121bc:	ldr	r0, [r0]
   121c0:	cmp	r0, #0
   121c4:	beq	11e78 <__assert_fail@plt+0x58c>
   121c8:	bl	13ebc <__assert_fail@plt+0x25d0>
   121cc:	b	11e78 <__assert_fail@plt+0x58c>
   121d0:	ldr	r0, [r7]
   121d4:	cmp	r0, #4
   121d8:	beq	13e24 <__assert_fail@plt+0x2538>
   121dc:	movw	r0, #4944	; 0x1350
   121e0:	movt	r0, #3
   121e4:	b	11e60 <__assert_fail@plt+0x574>
   121e8:	movw	r0, #4936	; 0x1348
   121ec:	movt	r0, #3
   121f0:	b	11e60 <__assert_fail@plt+0x574>
   121f4:	movw	r0, #5021	; 0x139d
   121f8:	movt	r0, #3
   121fc:	b	11e60 <__assert_fail@plt+0x574>
   12200:	movw	r0, #4920	; 0x1338
   12204:	movw	r2, #5008	; 0x1390
   12208:	mov	r1, r8
   1220c:	movt	r0, #3
   12210:	movt	r2, #3
   12214:	ldr	r0, [r0]
   12218:	bl	17e00 <__assert_fail@plt+0x6514>
   1221c:	cmp	r0, #0
   12220:	beq	11e78 <__assert_fail@plt+0x58c>
   12224:	b	13e78 <__assert_fail@plt+0x258c>
   12228:	ldr	r0, [r7]
   1222c:	cmp	r0, #4
   12230:	beq	13e38 <__assert_fail@plt+0x254c>
   12234:	mov	r0, #1
   12238:	str	r0, [r7]
   1223c:	b	11e78 <__assert_fail@plt+0x58c>
   12240:	movw	r0, #5020	; 0x139c
   12244:	movt	r0, #3
   12248:	b	11e60 <__assert_fail@plt+0x574>
   1224c:	ldr	r0, [r7]
   12250:	mov	r1, #1
   12254:	str	r1, [sp, #60]	; 0x3c
   12258:	cmp	r0, #4
   1225c:	bne	11e78 <__assert_fail@plt+0x58c>
   12260:	b	13e4c <__assert_fail@plt+0x2560>
   12264:	movw	r0, #5008	; 0x1390
   12268:	mov	r1, #1
   1226c:	movt	r0, #3
   12270:	stm	r0, {r1, r6}
   12274:	mov	r0, #176	; 0xb0
   12278:	str	r0, [r8]
   1227c:	b	11e78 <__assert_fail@plt+0x58c>
   12280:	movw	r0, #5008	; 0x1390
   12284:	mov	r1, #1048576	; 0x100000
   12288:	movt	r0, #3
   1228c:	stm	r0, {r1, r6}
   12290:	str	r6, [r8]
   12294:	b	11e78 <__assert_fail@plt+0x58c>
   12298:	ldr	r0, [r8]
   1229c:	movw	sl, #4932	; 0x1344
   122a0:	movt	sl, #3
   122a4:	cmn	r0, #1
   122a8:	bne	12310 <__assert_fail@plt+0xa24>
   122ac:	ldr	r0, [sp, #60]	; 0x3c
   122b0:	tst	r0, #1
   122b4:	beq	122f0 <__assert_fail@plt+0xa04>
   122b8:	movw	r0, #63243	; 0xf70b
   122bc:	mov	r7, #0
   122c0:	movt	r0, #1
   122c4:	str	r7, [r8]
   122c8:	bl	116ac <getenv@plt>
   122cc:	cmp	r0, #0
   122d0:	mov	r4, #512	; 0x200
   122d4:	movw	r0, #5008	; 0x1390
   122d8:	movweq	r4, #1024	; 0x400
   122dc:	movt	r0, #3
   122e0:	stm	r0, {r4, r7}
   122e4:	movw	r7, #5016	; 0x1398
   122e8:	movt	r7, #3
   122ec:	b	12310 <__assert_fail@plt+0xa24>
   122f0:	movw	r0, #63259	; 0xf71b
   122f4:	movt	r0, #1
   122f8:	bl	116ac <getenv@plt>
   122fc:	movw	r1, #4940	; 0x134c
   12300:	movw	r2, #5008	; 0x1390
   12304:	movt	r1, #3
   12308:	movt	r2, #3
   1230c:	bl	17e00 <__assert_fail@plt+0x6514>
   12310:	ldr	r0, [r7]
   12314:	cmp	r0, #1
   12318:	cmpne	r0, #4
   1231c:	bne	127d4 <__assert_fail@plt+0xee8>
   12320:	movw	r0, #4928	; 0x1340
   12324:	movt	r0, #3
   12328:	ldr	r6, [r0]
   1232c:	cmp	r6, #0
   12330:	beq	123cc <__assert_fail@plt+0xae0>
   12334:	movw	r8, #63273	; 0xf729
   12338:	mov	r7, #0
   1233c:	movt	r8, #1
   12340:	ldr	r4, [sl]
   12344:	cmp	r4, #0
   12348:	beq	123a8 <__assert_fail@plt+0xabc>
   1234c:	ldr	r5, [r6]
   12350:	ldr	r1, [r4]
   12354:	mov	r0, r5
   12358:	bl	11520 <strcmp@plt>
   1235c:	cmp	r0, #0
   12360:	beq	12374 <__assert_fail@plt+0xa88>
   12364:	ldr	r4, [r4, #4]
   12368:	cmp	r4, #0
   1236c:	bne	12350 <__assert_fail@plt+0xa64>
   12370:	b	123a8 <__assert_fail@plt+0xabc>
   12374:	mov	r0, #0
   12378:	mov	r1, r8
   1237c:	mov	r2, #5
   12380:	bl	115b0 <dcgettext@plt>
   12384:	mov	r5, r0
   12388:	ldr	r0, [r6]
   1238c:	bl	1b15c <__assert_fail@plt+0x9870>
   12390:	mov	r3, r0
   12394:	mov	r0, #0
   12398:	mov	r1, #0
   1239c:	mov	r2, r5
   123a0:	bl	1167c <error@plt>
   123a4:	mov	r7, #1
   123a8:	ldr	r6, [r6, #4]
   123ac:	cmp	r6, #0
   123b0:	bne	12340 <__assert_fail@plt+0xa54>
   123b4:	ldr	r5, [sp, #40]	; 0x28
   123b8:	tst	r7, #1
   123bc:	movw	r7, #5016	; 0x1398
   123c0:	mov	r0, #1
   123c4:	movt	r7, #3
   123c8:	bne	13d8c <__assert_fail@plt+0x24a0>
   123cc:	movw	r0, #4904	; 0x1328
   123d0:	mov	r1, #0
   123d4:	movt	r0, #3
   123d8:	str	r1, [sp, #28]
   123dc:	ldr	r0, [r0]
   123e0:	cmp	r0, r5
   123e4:	bge	12540 <__assert_fail@plt+0xc54>
   123e8:	ldr	r5, [sp, #40]	; 0x28
   123ec:	mov	r1, #104	; 0x68
   123f0:	mov	r4, #104	; 0x68
   123f4:	sub	r0, r5, r0
   123f8:	bl	1bc38 <__assert_fail@plt+0xa34c>
   123fc:	str	r0, [sp, #28]
   12400:	movw	r0, #4904	; 0x1328
   12404:	movt	r0, #3
   12408:	ldr	r8, [r0]
   1240c:	cmp	r8, r5
   12410:	bge	12540 <__assert_fail@plt+0xc54>
   12414:	ldr	r0, [sp, #28]
   12418:	mla	r9, r8, r4, r0
   1241c:	ldr	r0, [sp, #36]	; 0x24
   12420:	add	r4, r0, r8, lsl #2
   12424:	ldr	r0, [sp, #40]	; 0x28
   12428:	sub	r0, r0, #1
   1242c:	sub	sl, r0, r8
   12430:	b	1244c <__assert_fail@plt+0xb60>
   12434:	movw	r0, #4904	; 0x1328
   12438:	sub	sl, sl, #1
   1243c:	add	r9, r9, #104	; 0x68
   12440:	add	r4, r4, #4
   12444:	movt	r0, #3
   12448:	ldr	r8, [r0]
   1244c:	ldr	r6, [r4]
   12450:	mov	r1, #2304	; 0x900
   12454:	mov	r0, r6
   12458:	bl	11694 <open64@plt>
   1245c:	cmn	r0, #1
   12460:	ble	12490 <__assert_fail@plt+0xba4>
   12464:	mov	r7, r0
   12468:	mvn	r0, #103	; 0x67
   1246c:	mla	r2, r8, r0, r9
   12470:	mov	r0, #3
   12474:	mov	r1, r7
   12478:	bl	11610 <__fxstat64@plt>
   1247c:	cmp	r0, #0
   12480:	beq	124d4 <__assert_fail@plt+0xbe8>
   12484:	bl	11748 <__errno_location@plt>
   12488:	ldr	r5, [r0]
   1248c:	b	124d8 <__assert_fail@plt+0xbec>
   12490:	bl	11748 <__errno_location@plt>
   12494:	ldr	r5, [r0]
   12498:	cmp	r5, #2
   1249c:	cmpne	r5, #20
   124a0:	beq	124e8 <__assert_fail@plt+0xbfc>
   124a4:	mov	r7, r0
   124a8:	mvn	r0, #103	; 0x67
   124ac:	mov	r1, r6
   124b0:	mla	r2, r8, r0, r9
   124b4:	mov	r0, #3
   124b8:	bl	11898 <__xstat64@plt>
   124bc:	cmp	r0, #0
   124c0:	beq	12528 <__assert_fail@plt+0xc3c>
   124c4:	ldr	r5, [r7]
   124c8:	cmp	r5, #0
   124cc:	bne	124e8 <__assert_fail@plt+0xbfc>
   124d0:	b	12528 <__assert_fail@plt+0xc3c>
   124d4:	mov	r5, #0
   124d8:	mov	r0, r7
   124dc:	bl	118c8 <close@plt>
   124e0:	cmp	r5, #0
   124e4:	beq	12528 <__assert_fail@plt+0xc3c>
   124e8:	ldr	r2, [r4]
   124ec:	mov	r0, #0
   124f0:	mov	r1, #3
   124f4:	bl	1aeb0 <__assert_fail@plt+0x95c4>
   124f8:	movw	r2, #1860	; 0x744
   124fc:	mov	r3, r0
   12500:	mov	r0, #0
   12504:	mov	r1, r5
   12508:	movt	r2, #2
   1250c:	bl	1167c <error@plt>
   12510:	movw	r0, #4948	; 0x1354
   12514:	mov	r1, #1
   12518:	movt	r0, #3
   1251c:	strb	r1, [r0]
   12520:	mov	r0, #0
   12524:	str	r0, [r4]
   12528:	cmp	sl, #0
   1252c:	bne	12434 <__assert_fail@plt+0xb48>
   12530:	movw	sl, #4932	; 0x1344
   12534:	movw	r7, #5016	; 0x1398
   12538:	movt	sl, #3
   1253c:	movt	r7, #3
   12540:	movw	r1, #4928	; 0x1340
   12544:	ldr	r0, [sl]
   12548:	movt	r1, #3
   1254c:	ldr	r1, [r1]
   12550:	orrs	r0, r1, r0
   12554:	mov	r0, #1
   12558:	bne	12590 <__assert_fail@plt+0xca4>
   1255c:	movw	r1, #4472	; 0x1178
   12560:	movw	r0, #4944	; 0x1350
   12564:	movt	r1, #3
   12568:	movt	r0, #3
   1256c:	ldrb	r1, [r1, #52]	; 0x34
   12570:	ldrb	r0, [r0]
   12574:	cmp	r1, #0
   12578:	movwne	r1, #1
   1257c:	orr	r0, r0, r1
   12580:	movw	r1, #5020	; 0x139c
   12584:	movt	r1, #3
   12588:	ldrb	r1, [r1]
   1258c:	orr	r0, r1, r0
   12590:	and	r0, r0, #1
   12594:	bl	188b4 <__assert_fail@plt+0x6fc8>
   12598:	movw	r1, #5024	; 0x13a0
   1259c:	cmp	r0, #0
   125a0:	movt	r1, #3
   125a4:	str	r0, [r1]
   125a8:	ldr	r1, [sp, #40]	; 0x28
   125ac:	bne	12660 <__assert_fail@plt+0xd74>
   125b0:	movw	r0, #4904	; 0x1328
   125b4:	mov	r4, #1
   125b8:	movt	r0, #3
   125bc:	ldr	r0, [r0]
   125c0:	cmp	r0, r1
   125c4:	bge	12628 <__assert_fail@plt+0xd3c>
   125c8:	movw	r0, #4936	; 0x1348
   125cc:	movt	r0, #3
   125d0:	ldrb	r0, [r0]
   125d4:	cmp	r0, #0
   125d8:	bne	12628 <__assert_fail@plt+0xd3c>
   125dc:	movw	r0, #5020	; 0x139c
   125e0:	movt	r0, #3
   125e4:	ldrb	r0, [r0]
   125e8:	cmp	r0, #0
   125ec:	bne	12628 <__assert_fail@plt+0xd3c>
   125f0:	movw	r0, #4928	; 0x1340
   125f4:	movt	r0, #3
   125f8:	ldr	r0, [r0]
   125fc:	cmp	r0, #0
   12600:	ldreq	r0, [sl]
   12604:	cmpeq	r0, #0
   12608:	bne	12628 <__assert_fail@plt+0xd3c>
   1260c:	movw	r1, #63320	; 0xf758
   12610:	mov	r0, #0
   12614:	mov	r2, #5
   12618:	mov	r4, #0
   1261c:	movt	r1, #1
   12620:	bl	115b0 <dcgettext@plt>
   12624:	str	r0, [sp, #56]	; 0x38
   12628:	bl	11748 <__errno_location@plt>
   1262c:	ldr	r5, [r0]
   12630:	movw	r1, #63335	; 0xf767
   12634:	mov	r0, #0
   12638:	mov	r2, #5
   1263c:	movt	r1, #1
   12640:	bl	115b0 <dcgettext@plt>
   12644:	ldr	r3, [sp, #56]	; 0x38
   12648:	movw	r2, #63330	; 0xf762
   1264c:	str	r0, [sp]
   12650:	mov	r0, r4
   12654:	mov	r1, r5
   12658:	movt	r2, #1
   1265c:	bl	1167c <error@plt>
   12660:	movw	r0, #5021	; 0x139d
   12664:	movt	r0, #3
   12668:	ldrb	r0, [r0]
   1266c:	cmp	r0, #1
   12670:	bne	12678 <__assert_fail@plt+0xd8c>
   12674:	bl	1188c <sync@plt>
   12678:	ldr	r0, [r7]
   1267c:	cmp	r0, #4
   12680:	bhi	13e9c <__assert_fail@plt+0x25b0>
   12684:	add	r1, pc, #0
   12688:	ldr	pc, [r1, r0, lsl #2]
   1268c:	andeq	r2, r1, r0, lsr #13
   12690:	andeq	r2, r1, r4, lsr #22
   12694:	andeq	r2, r1, r8, lsl r8
   12698:	muleq	r1, ip, r9
   1269c:	strdeq	r2, [r1], -r4
   126a0:	movw	r4, #5028	; 0x13a4
   126a4:	movw	r5, #5032	; 0x13a8
   126a8:	mov	r2, #4
   126ac:	movt	r4, #3
   126b0:	movt	r5, #3
   126b4:	ldr	r0, [r4]
   126b8:	add	r1, r0, #1
   126bc:	ldr	r0, [r5]
   126c0:	str	r1, [r4]
   126c4:	bl	1bb2c <__assert_fail@plt+0xa240>
   126c8:	ldr	r1, [r4]
   126cc:	movw	r6, #4472	; 0x1178
   126d0:	str	r0, [r5]
   126d4:	movt	r6, #3
   126d8:	add	r2, r0, r1, lsl #2
   126dc:	str	r6, [r2, #-4]
   126e0:	ldrb	r2, [r6, #24]
   126e4:	cmp	r2, #0
   126e8:	bne	13e04 <__assert_fail@plt+0x2518>
   126ec:	mov	r2, #1
   126f0:	strb	r2, [r6, #24]
   126f4:	movw	r2, #4944	; 0x1350
   126f8:	movt	r2, #3
   126fc:	ldrb	r2, [r2]
   12700:	cmp	r2, #1
   12704:	bne	12740 <__assert_fail@plt+0xe54>
   12708:	add	r1, r1, #1
   1270c:	mov	r2, #4
   12710:	str	r1, [r4]
   12714:	bl	1bb2c <__assert_fail@plt+0xa240>
   12718:	ldr	r1, [r4]
   1271c:	add	r3, r6, #28
   12720:	str	r0, [r5]
   12724:	add	r2, r0, r1, lsl #2
   12728:	str	r3, [r2, #-4]
   1272c:	ldrb	r2, [r6, #52]	; 0x34
   12730:	cmp	r2, #0
   12734:	bne	13e04 <__assert_fail@plt+0x2518>
   12738:	mov	r2, #1
   1273c:	strb	r2, [r6, #52]	; 0x34
   12740:	add	r1, r1, #1
   12744:	mov	r2, #4
   12748:	str	r1, [r4]
   1274c:	bl	1bb2c <__assert_fail@plt+0xa240>
   12750:	ldr	r1, [r4]
   12754:	add	r3, r6, #56	; 0x38
   12758:	str	r0, [r5]
   1275c:	add	r2, r0, r1, lsl #2
   12760:	str	r3, [r2, #-4]
   12764:	ldrb	r2, [r6, #80]	; 0x50
   12768:	cmp	r2, #0
   1276c:	bne	13e04 <__assert_fail@plt+0x2518>
   12770:	mov	r7, #1
   12774:	add	r1, r1, #1
   12778:	mov	r2, #4
   1277c:	strb	r7, [r6, #80]	; 0x50
   12780:	str	r1, [r4]
   12784:	bl	1bb2c <__assert_fail@plt+0xa240>
   12788:	ldr	r1, [r4]
   1278c:	add	r3, r6, #84	; 0x54
   12790:	str	r0, [r5]
   12794:	add	r2, r0, r1, lsl #2
   12798:	str	r3, [r2, #-4]
   1279c:	ldrb	r2, [r6, #108]	; 0x6c
   127a0:	cmp	r2, #0
   127a4:	bne	13e04 <__assert_fail@plt+0x2518>
   127a8:	add	r1, r1, #1
   127ac:	mov	r2, #4
   127b0:	strb	r7, [r6, #108]	; 0x6c
   127b4:	str	r1, [r4]
   127b8:	bl	1bb2c <__assert_fail@plt+0xa240>
   127bc:	ldr	r1, [r4]
   127c0:	add	r3, r6, #112	; 0x70
   127c4:	str	r0, [r5]
   127c8:	add	r2, r0, r1, lsl #2
   127cc:	str	r3, [r2, #-4]
   127d0:	b	12960 <__assert_fail@plt+0x1074>
   127d4:	ldrb	r0, [r8]
   127d8:	tst	r0, #16
   127dc:	bne	137b0 <__assert_fail@plt+0x1ec4>
   127e0:	ldr	r0, [sp, #60]	; 0x3c
   127e4:	tst	r0, #1
   127e8:	beq	12320 <__assert_fail@plt+0xa34>
   127ec:	mov	r0, #3
   127f0:	b	137b4 <__assert_fail@plt+0x1ec8>
   127f4:	movw	r0, #5028	; 0x13a4
   127f8:	movt	r0, #3
   127fc:	ldr	r0, [r0]
   12800:	cmp	r0, #0
   12804:	bne	12cd4 <__assert_fail@plt+0x13e8>
   12808:	movw	r0, #64709	; 0xfcc5
   1280c:	movt	r0, #1
   12810:	bl	13ebc <__assert_fail@plt+0x25d0>
   12814:	b	12cd4 <__assert_fail@plt+0x13e8>
   12818:	movw	r4, #5028	; 0x13a4
   1281c:	movw	r5, #5032	; 0x13a8
   12820:	mov	r2, #4
   12824:	movt	r4, #3
   12828:	movt	r5, #3
   1282c:	ldr	r0, [r4]
   12830:	add	r1, r0, #1
   12834:	ldr	r0, [r5]
   12838:	str	r1, [r4]
   1283c:	bl	1bb2c <__assert_fail@plt+0xa240>
   12840:	ldr	r1, [r4]
   12844:	movw	r6, #4472	; 0x1178
   12848:	str	r0, [r5]
   1284c:	movt	r6, #3
   12850:	add	r2, r0, r1, lsl #2
   12854:	str	r6, [r2, #-4]
   12858:	ldrb	r2, [r6, #24]
   1285c:	cmp	r2, #0
   12860:	bne	13e04 <__assert_fail@plt+0x2518>
   12864:	mov	r2, #1
   12868:	strb	r2, [r6, #24]
   1286c:	movw	r2, #4944	; 0x1350
   12870:	movt	r2, #3
   12874:	ldrb	r2, [r2]
   12878:	cmp	r2, #1
   1287c:	bne	128b8 <__assert_fail@plt+0xfcc>
   12880:	add	r1, r1, #1
   12884:	mov	r2, #4
   12888:	str	r1, [r4]
   1288c:	bl	1bb2c <__assert_fail@plt+0xa240>
   12890:	ldr	r1, [r4]
   12894:	add	r3, r6, #28
   12898:	str	r0, [r5]
   1289c:	add	r2, r0, r1, lsl #2
   128a0:	str	r3, [r2, #-4]
   128a4:	ldrb	r2, [r6, #52]	; 0x34
   128a8:	cmp	r2, #0
   128ac:	bne	13e04 <__assert_fail@plt+0x2518>
   128b0:	mov	r2, #1
   128b4:	strb	r2, [r6, #52]	; 0x34
   128b8:	add	r1, r1, #1
   128bc:	mov	r2, #4
   128c0:	str	r1, [r4]
   128c4:	bl	1bb2c <__assert_fail@plt+0xa240>
   128c8:	ldr	r1, [r4]
   128cc:	add	r3, r6, #56	; 0x38
   128d0:	str	r0, [r5]
   128d4:	add	r2, r0, r1, lsl #2
   128d8:	str	r3, [r2, #-4]
   128dc:	movw	r2, #64407	; 0xfb97
   128e0:	movt	r2, #1
   128e4:	str	r2, [r6, #68]	; 0x44
   128e8:	ldrb	r2, [r6, #80]	; 0x50
   128ec:	cmp	r2, #0
   128f0:	bne	13e04 <__assert_fail@plt+0x2518>
   128f4:	mov	r7, #1
   128f8:	add	r1, r1, #1
   128fc:	mov	r2, #4
   12900:	strb	r7, [r6, #80]	; 0x50
   12904:	str	r1, [r4]
   12908:	bl	1bb2c <__assert_fail@plt+0xa240>
   1290c:	ldr	r1, [r4]
   12910:	add	r3, r6, #84	; 0x54
   12914:	str	r0, [r5]
   12918:	add	r2, r0, r1, lsl #2
   1291c:	str	r3, [r2, #-4]
   12920:	ldrb	r2, [r6, #108]	; 0x6c
   12924:	cmp	r2, #0
   12928:	bne	13e04 <__assert_fail@plt+0x2518>
   1292c:	add	r1, r1, #1
   12930:	mov	r2, #4
   12934:	strb	r7, [r6, #108]	; 0x6c
   12938:	str	r1, [r4]
   1293c:	bl	1bb2c <__assert_fail@plt+0xa240>
   12940:	ldr	r1, [r4]
   12944:	add	r3, r6, #112	; 0x70
   12948:	str	r0, [r5]
   1294c:	add	r2, r0, r1, lsl #2
   12950:	str	r3, [r2, #-4]
   12954:	movw	r2, #64412	; 0xfb9c
   12958:	movt	r2, #1
   1295c:	str	r2, [r6, #124]	; 0x7c
   12960:	ldrb	r2, [r6, #136]	; 0x88
   12964:	cmp	r2, #0
   12968:	bne	13e04 <__assert_fail@plt+0x2518>
   1296c:	mov	r7, #1
   12970:	add	r1, r1, #1
   12974:	mov	r2, #4
   12978:	strb	r7, [r6, #136]	; 0x88
   1297c:	str	r1, [r4]
   12980:	bl	1bb2c <__assert_fail@plt+0xa240>
   12984:	ldr	r1, [r4]
   12988:	add	r3, r6, #140	; 0x8c
   1298c:	str	r0, [r5]
   12990:	add	r2, r0, r1, lsl #2
   12994:	str	r3, [r2, #-4]
   12998:	b	12b10 <__assert_fail@plt+0x1224>
   1299c:	movw	r4, #5028	; 0x13a4
   129a0:	movw	r5, #5032	; 0x13a8
   129a4:	mov	r2, #4
   129a8:	movt	r4, #3
   129ac:	movt	r5, #3
   129b0:	ldr	r0, [r4]
   129b4:	add	r1, r0, #1
   129b8:	ldr	r0, [r5]
   129bc:	str	r1, [r4]
   129c0:	bl	1bb2c <__assert_fail@plt+0xa240>
   129c4:	ldr	r1, [r4]
   129c8:	movw	r6, #4472	; 0x1178
   129cc:	str	r0, [r5]
   129d0:	movt	r6, #3
   129d4:	add	r2, r0, r1, lsl #2
   129d8:	str	r6, [r2, #-4]
   129dc:	ldrb	r2, [r6, #24]
   129e0:	cmp	r2, #0
   129e4:	bne	13e04 <__assert_fail@plt+0x2518>
   129e8:	mov	r2, #1
   129ec:	strb	r2, [r6, #24]
   129f0:	movw	r2, #4944	; 0x1350
   129f4:	movt	r2, #3
   129f8:	ldrb	r2, [r2]
   129fc:	cmp	r2, #1
   12a00:	bne	12a3c <__assert_fail@plt+0x1150>
   12a04:	add	r1, r1, #1
   12a08:	mov	r2, #4
   12a0c:	str	r1, [r4]
   12a10:	bl	1bb2c <__assert_fail@plt+0xa240>
   12a14:	ldr	r1, [r4]
   12a18:	add	r3, r6, #28
   12a1c:	str	r0, [r5]
   12a20:	add	r2, r0, r1, lsl #2
   12a24:	str	r3, [r2, #-4]
   12a28:	ldrb	r2, [r6, #52]	; 0x34
   12a2c:	cmp	r2, #0
   12a30:	bne	13e04 <__assert_fail@plt+0x2518>
   12a34:	mov	r2, #1
   12a38:	strb	r2, [r6, #52]	; 0x34
   12a3c:	add	r1, r1, #1
   12a40:	mov	r2, #4
   12a44:	str	r1, [r4]
   12a48:	bl	1bb2c <__assert_fail@plt+0xa240>
   12a4c:	ldr	r1, [r4]
   12a50:	add	r3, r6, #56	; 0x38
   12a54:	str	r0, [r5]
   12a58:	add	r2, r0, r1, lsl #2
   12a5c:	str	r3, [r2, #-4]
   12a60:	ldrb	r2, [r6, #80]	; 0x50
   12a64:	cmp	r2, #0
   12a68:	bne	13e04 <__assert_fail@plt+0x2518>
   12a6c:	mov	r7, #1
   12a70:	add	r1, r1, #1
   12a74:	mov	r2, #4
   12a78:	strb	r7, [r6, #80]	; 0x50
   12a7c:	str	r1, [r4]
   12a80:	bl	1bb2c <__assert_fail@plt+0xa240>
   12a84:	ldr	r1, [r4]
   12a88:	add	r3, r6, #84	; 0x54
   12a8c:	str	r0, [r5]
   12a90:	add	r2, r0, r1, lsl #2
   12a94:	str	r3, [r2, #-4]
   12a98:	ldrb	r2, [r6, #108]	; 0x6c
   12a9c:	cmp	r2, #0
   12aa0:	bne	13e04 <__assert_fail@plt+0x2518>
   12aa4:	add	r1, r1, #1
   12aa8:	mov	r2, #4
   12aac:	strb	r7, [r6, #108]	; 0x6c
   12ab0:	str	r1, [r4]
   12ab4:	bl	1bb2c <__assert_fail@plt+0xa240>
   12ab8:	ldr	r1, [r4]
   12abc:	add	r3, r6, #112	; 0x70
   12ac0:	str	r0, [r5]
   12ac4:	add	r2, r0, r1, lsl #2
   12ac8:	str	r3, [r2, #-4]
   12acc:	ldrb	r2, [r6, #136]	; 0x88
   12ad0:	cmp	r2, #0
   12ad4:	bne	13e04 <__assert_fail@plt+0x2518>
   12ad8:	mov	r7, #1
   12adc:	add	r1, r1, #1
   12ae0:	mov	r2, #4
   12ae4:	strb	r7, [r6, #136]	; 0x88
   12ae8:	str	r1, [r4]
   12aec:	bl	1bb2c <__assert_fail@plt+0xa240>
   12af0:	ldr	r1, [r4]
   12af4:	add	r3, r6, #140	; 0x8c
   12af8:	str	r0, [r5]
   12afc:	add	r2, r0, r1, lsl #2
   12b00:	str	r3, [r2, #-4]
   12b04:	movw	r2, #64651	; 0xfc8b
   12b08:	movt	r2, #1
   12b0c:	str	r2, [r6, #152]	; 0x98
   12b10:	ldrb	r2, [r6, #164]	; 0xa4
   12b14:	cmp	r2, #0
   12b18:	bne	13e04 <__assert_fail@plt+0x2518>
   12b1c:	strb	r7, [r6, #164]	; 0xa4
   12b20:	b	12c9c <__assert_fail@plt+0x13b0>
   12b24:	movw	r4, #5028	; 0x13a4
   12b28:	movw	r5, #5032	; 0x13a8
   12b2c:	mov	r2, #4
   12b30:	movt	r4, #3
   12b34:	movt	r5, #3
   12b38:	ldr	r0, [r4]
   12b3c:	add	r1, r0, #1
   12b40:	ldr	r0, [r5]
   12b44:	str	r1, [r4]
   12b48:	bl	1bb2c <__assert_fail@plt+0xa240>
   12b4c:	ldr	r1, [r4]
   12b50:	movw	r6, #4472	; 0x1178
   12b54:	str	r0, [r5]
   12b58:	movt	r6, #3
   12b5c:	add	r2, r0, r1, lsl #2
   12b60:	str	r6, [r2, #-4]
   12b64:	ldrb	r2, [r6, #24]
   12b68:	cmp	r2, #0
   12b6c:	bne	13e04 <__assert_fail@plt+0x2518>
   12b70:	mov	r2, #1
   12b74:	strb	r2, [r6, #24]
   12b78:	movw	r2, #4944	; 0x1350
   12b7c:	movt	r2, #3
   12b80:	ldrb	r2, [r2]
   12b84:	cmp	r2, #1
   12b88:	bne	12bc4 <__assert_fail@plt+0x12d8>
   12b8c:	add	r1, r1, #1
   12b90:	mov	r2, #4
   12b94:	str	r1, [r4]
   12b98:	bl	1bb2c <__assert_fail@plt+0xa240>
   12b9c:	ldr	r1, [r4]
   12ba0:	add	r3, r6, #28
   12ba4:	str	r0, [r5]
   12ba8:	add	r2, r0, r1, lsl #2
   12bac:	str	r3, [r2, #-4]
   12bb0:	ldrb	r2, [r6, #52]	; 0x34
   12bb4:	cmp	r2, #0
   12bb8:	bne	13e04 <__assert_fail@plt+0x2518>
   12bbc:	mov	r2, #1
   12bc0:	strb	r2, [r6, #52]	; 0x34
   12bc4:	add	r1, r1, #1
   12bc8:	mov	r2, #4
   12bcc:	str	r1, [r4]
   12bd0:	bl	1bb2c <__assert_fail@plt+0xa240>
   12bd4:	ldr	r1, [r4]
   12bd8:	add	r3, r6, #168	; 0xa8
   12bdc:	str	r0, [r5]
   12be0:	add	r2, r0, r1, lsl #2
   12be4:	str	r3, [r2, #-4]
   12be8:	ldrb	r2, [r6, #192]	; 0xc0
   12bec:	cmp	r2, #0
   12bf0:	bne	13e04 <__assert_fail@plt+0x2518>
   12bf4:	mov	r7, #1
   12bf8:	add	r1, r1, #1
   12bfc:	mov	r2, #4
   12c00:	strb	r7, [r6, #192]	; 0xc0
   12c04:	str	r1, [r4]
   12c08:	bl	1bb2c <__assert_fail@plt+0xa240>
   12c0c:	ldr	r1, [r4]
   12c10:	add	r3, r6, #196	; 0xc4
   12c14:	str	r0, [r5]
   12c18:	add	r2, r0, r1, lsl #2
   12c1c:	str	r3, [r2, #-4]
   12c20:	ldrb	r2, [r6, #220]	; 0xdc
   12c24:	cmp	r2, #0
   12c28:	bne	13e04 <__assert_fail@plt+0x2518>
   12c2c:	add	r1, r1, #1
   12c30:	mov	r2, #4
   12c34:	strb	r7, [r6, #220]	; 0xdc
   12c38:	str	r1, [r4]
   12c3c:	bl	1bb2c <__assert_fail@plt+0xa240>
   12c40:	ldr	r1, [r4]
   12c44:	add	r3, r6, #224	; 0xe0
   12c48:	str	r0, [r5]
   12c4c:	add	r2, r0, r1, lsl #2
   12c50:	str	r3, [r2, #-4]
   12c54:	ldrb	r2, [r6, #248]	; 0xf8
   12c58:	cmp	r2, #0
   12c5c:	bne	13e04 <__assert_fail@plt+0x2518>
   12c60:	mov	r7, #1
   12c64:	add	r1, r1, #1
   12c68:	mov	r2, #4
   12c6c:	strb	r7, [r6, #248]	; 0xf8
   12c70:	str	r1, [r4]
   12c74:	bl	1bb2c <__assert_fail@plt+0xa240>
   12c78:	ldr	r1, [r4]
   12c7c:	add	r3, r6, #252	; 0xfc
   12c80:	str	r0, [r5]
   12c84:	add	r2, r0, r1, lsl #2
   12c88:	str	r3, [r2, #-4]
   12c8c:	ldrb	r2, [r6, #276]	; 0x114
   12c90:	cmp	r2, #0
   12c94:	bne	13e04 <__assert_fail@plt+0x2518>
   12c98:	strb	r7, [r6, #276]	; 0x114
   12c9c:	add	r1, r1, #1
   12ca0:	mov	r2, #4
   12ca4:	str	r1, [r4]
   12ca8:	bl	1bb2c <__assert_fail@plt+0xa240>
   12cac:	ldr	r1, [r4]
   12cb0:	str	r0, [r5]
   12cb4:	add	r0, r0, r1, lsl #2
   12cb8:	add	r1, r6, #280	; 0x118
   12cbc:	str	r1, [r0, #-4]
   12cc0:	ldrb	r0, [r6, #304]	; 0x130
   12cc4:	cmp	r0, #0
   12cc8:	bne	13e04 <__assert_fail@plt+0x2518>
   12ccc:	mov	r0, #1
   12cd0:	strb	r0, [r6, #304]	; 0x130
   12cd4:	movw	r7, #5040	; 0x13b0
   12cd8:	movw	r4, #5036	; 0x13ac
   12cdc:	mov	r2, #4
   12ce0:	movt	r7, #3
   12ce4:	movt	r4, #3
   12ce8:	ldr	r0, [r7]
   12cec:	add	r1, r0, #1
   12cf0:	ldr	r0, [r4]
   12cf4:	str	r1, [r7]
   12cf8:	bl	1bb2c <__assert_fail@plt+0xa240>
   12cfc:	movw	r5, #5028	; 0x13a4
   12d00:	str	r0, [r4]
   12d04:	mov	r1, #4
   12d08:	movt	r5, #3
   12d0c:	ldr	r0, [r5]
   12d10:	bl	1bc38 <__assert_fail@plt+0xa34c>
   12d14:	ldr	r1, [r7]
   12d18:	ldr	r2, [r4]
   12d1c:	add	r1, r2, r1, lsl #2
   12d20:	str	r0, [r1, #-4]
   12d24:	ldr	r0, [r5]
   12d28:	cmp	r0, #0
   12d2c:	beq	13018 <__assert_fail@plt+0x172c>
   12d30:	movw	r4, #5032	; 0x13a8
   12d34:	mov	r9, #0
   12d38:	mov	r8, #1000	; 0x3e8
   12d3c:	mov	r6, #0
   12d40:	movt	r4, #3
   12d44:	ldr	r1, [r4]
   12d48:	str	r9, [fp, #-56]	; 0xffffffc8
   12d4c:	mov	r2, #5
   12d50:	ldr	r0, [r1, r6, lsl #2]
   12d54:	ldr	r1, [r0, #12]
   12d58:	mov	r0, #0
   12d5c:	bl	115b0 <dcgettext@plt>
   12d60:	mov	r5, r0
   12d64:	ldr	r0, [r4]
   12d68:	ldr	r0, [r0, r6, lsl #2]
   12d6c:	ldr	r0, [r0]
   12d70:	cmp	r0, #2
   12d74:	bne	12f5c <__assert_fail@plt+0x1670>
   12d78:	movw	r0, #5016	; 0x1398
   12d7c:	movt	r0, #3
   12d80:	ldr	r0, [r0]
   12d84:	cmp	r0, #4
   12d88:	beq	12e00 <__assert_fail@plt+0x1514>
   12d8c:	cmp	r0, #3
   12d90:	beq	12dac <__assert_fail@plt+0x14c0>
   12d94:	cmp	r0, #0
   12d98:	bne	12f5c <__assert_fail@plt+0x1670>
   12d9c:	movw	r0, #4940	; 0x134c
   12da0:	movt	r0, #3
   12da4:	ldr	r0, [r0]
   12da8:	b	12e14 <__assert_fail@plt+0x1528>
   12dac:	movw	r0, #5008	; 0x1390
   12db0:	add	r2, sp, #64	; 0x40
   12db4:	movt	r0, #3
   12db8:	ldrd	r0, [r0]
   12dbc:	bl	17fc0 <__assert_fail@plt+0x66d4>
   12dc0:	movw	r1, #64784	; 0xfd10
   12dc4:	mov	r9, r0
   12dc8:	mov	r0, #0
   12dcc:	mov	r2, #5
   12dd0:	movt	r1, #1
   12dd4:	bl	115b0 <dcgettext@plt>
   12dd8:	mov	r2, r0
   12ddc:	mov	r3, r9
   12de0:	sub	r0, fp, #56	; 0x38
   12de4:	mov	r1, #1
   12de8:	str	r5, [sp]
   12dec:	mov	r9, #0
   12df0:	bl	116a0 <__asprintf_chk@plt>
   12df4:	cmn	r0, #1
   12df8:	streq	r9, [fp, #-56]	; 0xffffffc8
   12dfc:	b	12f4c <__assert_fail@plt+0x1660>
   12e00:	movw	r0, #4940	; 0x134c
   12e04:	movt	r0, #3
   12e08:	ldr	r0, [r0]
   12e0c:	tst	r0, #16
   12e10:	bne	12f5c <__assert_fail@plt+0x1670>
   12e14:	str	r0, [sp, #56]	; 0x38
   12e18:	movw	r0, #5008	; 0x1390
   12e1c:	movt	r0, #3
   12e20:	ldm	r0, {r5, r9}
   12e24:	mov	r4, r5
   12e28:	mov	sl, r9
   12e2c:	str	r5, [sp, #52]	; 0x34
   12e30:	str	r9, [sp, #60]	; 0x3c
   12e34:	mov	r0, r5
   12e38:	mov	r1, r9
   12e3c:	mov	r2, #1000	; 0x3e8
   12e40:	mov	r3, #0
   12e44:	bl	1ed30 <__assert_fail@plt+0xd444>
   12e48:	umull	r2, r3, r0, r8
   12e4c:	subs	r2, r5, r2
   12e50:	mla	r3, r1, r8, r3
   12e54:	lsr	r5, r4, #10
   12e58:	sbc	r7, r9, r3
   12e5c:	mov	r3, r4
   12e60:	mov	r9, r1
   12e64:	bfc	r3, #10, #22
   12e68:	orr	r4, r2, r3
   12e6c:	orrs	r4, r4, r7
   12e70:	orr	r4, r5, sl, lsl #22
   12e74:	lsr	sl, sl, #10
   12e78:	mov	r5, r0
   12e7c:	beq	12e34 <__assert_fail@plt+0x1548>
   12e80:	mov	r0, #1
   12e84:	mov	r1, #184	; 0xb8
   12e88:	mov	r9, #0
   12e8c:	str	r0, [sp]
   12e90:	str	r0, [sp, #8]
   12e94:	orrs	r0, r2, r7
   12e98:	ldr	r2, [sp, #56]	; 0x38
   12e9c:	str	r9, [sp, #4]
   12ea0:	str	r9, [sp, #12]
   12ea4:	movweq	r1, #152	; 0x98
   12ea8:	cmp	r3, #0
   12eac:	movne	r1, #152	; 0x98
   12eb0:	and	r2, r2, #292	; 0x124
   12eb4:	orr	r1, r1, r2
   12eb8:	mov	r2, r1
   12ebc:	andne	r2, r2, #412	; 0x19c
   12ec0:	cmp	r0, #0
   12ec4:	mov	r0, #256	; 0x100
   12ec8:	movne	r2, r1
   12ecc:	ldr	r1, [sp, #60]	; 0x3c
   12ed0:	bic	r0, r0, r2, lsl #3
   12ed4:	orr	r3, r0, r2
   12ed8:	ldr	r0, [sp, #52]	; 0x34
   12edc:	add	r2, sp, #64	; 0x40
   12ee0:	bl	17498 <__assert_fail@plt+0x5bac>
   12ee4:	movw	r1, #64561	; 0xfc31
   12ee8:	mov	r5, r0
   12eec:	mov	r0, #0
   12ef0:	mov	r2, #5
   12ef4:	movt	r1, #1
   12ef8:	bl	115b0 <dcgettext@plt>
   12efc:	movw	r1, #64784	; 0xfd10
   12f00:	mov	r4, r0
   12f04:	mov	r0, #0
   12f08:	mov	r2, #5
   12f0c:	movt	r1, #1
   12f10:	bl	115b0 <dcgettext@plt>
   12f14:	mov	r2, r0
   12f18:	sub	r0, fp, #56	; 0x38
   12f1c:	mov	r1, #1
   12f20:	mov	r3, r5
   12f24:	str	r4, [sp]
   12f28:	bl	116a0 <__asprintf_chk@plt>
   12f2c:	movw	sl, #4932	; 0x1344
   12f30:	movw	r7, #5040	; 0x13b0
   12f34:	movw	r4, #5032	; 0x13a8
   12f38:	cmn	r0, #1
   12f3c:	streq	r9, [fp, #-56]	; 0xffffffc8
   12f40:	movt	sl, #3
   12f44:	movt	r7, #3
   12f48:	movt	r4, #3
   12f4c:	ldr	r5, [fp, #-56]	; 0xffffffc8
   12f50:	cmp	r5, #0
   12f54:	bne	12f74 <__assert_fail@plt+0x1688>
   12f58:	b	13d9c <__assert_fail@plt+0x24b0>
   12f5c:	mov	r0, r5
   12f60:	bl	115bc <strdup@plt>
   12f64:	mov	r5, r0
   12f68:	str	r0, [fp, #-56]	; 0xffffffc8
   12f6c:	cmp	r5, #0
   12f70:	beq	13d9c <__assert_fail@plt+0x24b0>
   12f74:	movw	r0, #4808	; 0x12c8
   12f78:	movt	r0, #3
   12f7c:	ldr	r0, [r0]
   12f80:	cmn	r0, #1
   12f84:	bgt	12f9c <__assert_fail@plt+0x16b0>
   12f88:	mov	r0, #1
   12f8c:	bl	118a4 <isatty@plt>
   12f90:	movw	r1, #4808	; 0x12c8
   12f94:	movt	r1, #3
   12f98:	str	r0, [r1]
   12f9c:	movw	r1, #20256	; 0x4f20
   12fa0:	cmp	r0, #0
   12fa4:	movw	r0, #20440	; 0x4fd8
   12fa8:	movt	r1, #1
   12fac:	movt	r0, #1
   12fb0:	moveq	r1, r0
   12fb4:	mov	r0, r5
   12fb8:	blx	r1
   12fbc:	movw	r1, #5036	; 0x13ac
   12fc0:	ldr	r0, [r7]
   12fc4:	movt	r1, #3
   12fc8:	ldr	r1, [r1]
   12fcc:	add	r0, r1, r0, lsl #2
   12fd0:	ldr	r1, [fp, #-56]	; 0xffffffc8
   12fd4:	ldr	r0, [r0, #-4]
   12fd8:	str	r1, [r0, r6, lsl #2]
   12fdc:	mov	r1, #0
   12fe0:	ldr	r0, [fp, #-56]	; 0xffffffc8
   12fe4:	bl	184f8 <__assert_fail@plt+0x6c0c>
   12fe8:	ldr	r1, [r4]
   12fec:	ldr	r2, [r1, r6, lsl #2]
   12ff0:	add	r6, r6, #1
   12ff4:	ldr	r3, [r2, #16]
   12ff8:	cmp	r3, r0
   12ffc:	movhi	r0, r3
   13000:	str	r0, [r2, #16]
   13004:	movw	r0, #5028	; 0x13a4
   13008:	movt	r0, #3
   1300c:	ldr	r0, [r0]
   13010:	cmp	r6, r0
   13014:	bcc	12d48 <__assert_fail@plt+0x145c>
   13018:	ldr	r0, [sp, #28]
   1301c:	cmp	r0, #0
   13020:	beq	13720 <__assert_fail@plt+0x1e34>
   13024:	movw	r0, #4937	; 0x1349
   13028:	mov	r1, #1
   1302c:	ldr	r7, [sp, #40]	; 0x28
   13030:	ldr	r8, [sp, #36]	; 0x24
   13034:	movt	r0, #3
   13038:	strb	r1, [r0]
   1303c:	movw	r0, #4904	; 0x1328
   13040:	movt	r0, #3
   13044:	ldr	r5, [r0]
   13048:	cmp	r5, r7
   1304c:	bge	13b68 <__assert_fail@plt+0x227c>
   13050:	b	1308c <__assert_fail@plt+0x17a0>
   13054:	mov	r0, sl
   13058:	bl	16008 <__assert_fail@plt+0x471c>
   1305c:	ldr	r8, [sp, #36]	; 0x24
   13060:	ldr	r7, [sp, #40]	; 0x28
   13064:	b	134fc <__assert_fail@plt+0x1c10>
   13068:	mov	r0, r7
   1306c:	bl	16008 <__assert_fail@plt+0x471c>
   13070:	mov	r0, r5
   13074:	bl	16008 <__assert_fail@plt+0x471c>
   13078:	ldr	r0, [sp, #20]
   1307c:	bl	16008 <__assert_fail@plt+0x471c>
   13080:	ldr	r5, [sp, #24]
   13084:	ldr	r6, [sp, #44]	; 0x2c
   13088:	b	132e8 <__assert_fail@plt+0x19fc>
   1308c:	ldr	r6, [r8, r5, lsl #2]
   13090:	cmp	r6, #0
   13094:	beq	13710 <__assert_fail@plt+0x1e24>
   13098:	movw	r0, #4904	; 0x1328
   1309c:	ldr	r1, [sp, #28]
   130a0:	mov	r2, #104	; 0x68
   130a4:	str	r6, [sp, #44]	; 0x2c
   130a8:	movt	r0, #3
   130ac:	ldr	r0, [r0]
   130b0:	sub	r0, r5, r0
   130b4:	mla	r0, r0, r2, r1
   130b8:	str	r0, [sp, #60]	; 0x3c
   130bc:	ldr	r0, [r0, #16]
   130c0:	and	r0, r0, #45056	; 0xb000
   130c4:	orr	r0, r0, #16384	; 0x4000
   130c8:	cmp	r0, #24576	; 0x6000
   130cc:	bne	133b0 <__assert_fail@plt+0x1ac4>
   130d0:	mov	r0, r6
   130d4:	bl	1185c <canonicalize_file_name@plt>
   130d8:	mov	r1, r0
   130dc:	cmp	r0, #0
   130e0:	mov	r9, r6
   130e4:	beq	130f8 <__assert_fail@plt+0x180c>
   130e8:	ldrb	r0, [r1]
   130ec:	mov	r9, r1
   130f0:	cmp	r0, #47	; 0x2f
   130f4:	movne	r9, r6
   130f8:	movw	r0, #5024	; 0x13a0
   130fc:	movt	r0, #3
   13100:	ldr	r8, [r0]
   13104:	cmp	r8, #0
   13108:	beq	13334 <__assert_fail@plt+0x1a48>
   1310c:	mov	r0, #0
   13110:	str	r1, [sp, #20]
   13114:	str	r5, [sp, #24]
   13118:	str	r0, [sp, #32]
   1311c:	mvn	r0, #0
   13120:	str	r0, [sp, #52]	; 0x34
   13124:	mov	r0, #0
   13128:	str	r0, [sp, #56]	; 0x38
   1312c:	mov	r0, #0
   13130:	str	r0, [sp, #48]	; 0x30
   13134:	b	13140 <__assert_fail@plt+0x1854>
   13138:	mov	r6, r0
   1313c:	b	13230 <__assert_fail@plt+0x1944>
   13140:	ldr	r6, [r8]
   13144:	mov	r0, r6
   13148:	bl	1185c <canonicalize_file_name@plt>
   1314c:	mov	r5, r0
   13150:	cmp	r0, #0
   13154:	beq	13164 <__assert_fail@plt+0x1878>
   13158:	ldrb	r0, [r5]
   1315c:	cmp	r0, #47	; 0x2f
   13160:	moveq	r6, r5
   13164:	mov	r0, r9
   13168:	mov	r1, r6
   1316c:	bl	11520 <strcmp@plt>
   13170:	cmp	r0, #0
   13174:	bne	132b8 <__assert_fail@plt+0x19cc>
   13178:	movw	r0, #5024	; 0x13a0
   1317c:	ldr	sl, [r8, #4]
   13180:	movt	r0, #3
   13184:	ldr	r7, [r0]
   13188:	cmp	r7, #0
   1318c:	beq	13220 <__assert_fail@plt+0x1934>
   13190:	mov	r4, #0
   13194:	ldr	r0, [r7, #4]
   13198:	mov	r1, sl
   1319c:	bl	11520 <strcmp@plt>
   131a0:	cmp	r0, #0
   131a4:	moveq	r4, r7
   131a8:	ldr	r7, [r7, #28]
   131ac:	cmp	r7, #0
   131b0:	bne	13194 <__assert_fail@plt+0x18a8>
   131b4:	cmp	r4, #0
   131b8:	beq	13220 <__assert_fail@plt+0x1934>
   131bc:	ldr	r0, [r4]
   131c0:	bl	1185c <canonicalize_file_name@plt>
   131c4:	mov	r7, r0
   131c8:	cmp	r0, #0
   131cc:	beq	131dc <__assert_fail@plt+0x18f0>
   131d0:	ldrb	r0, [r7]
   131d4:	cmp	r0, #47	; 0x2f
   131d8:	beq	131f0 <__assert_fail@plt+0x1904>
   131dc:	mov	r0, r7
   131e0:	bl	16008 <__assert_fail@plt+0x471c>
   131e4:	ldr	r0, [r4]
   131e8:	bl	1c088 <__assert_fail@plt+0xa79c>
   131ec:	mov	r7, r0
   131f0:	mov	r0, r7
   131f4:	mov	r1, r6
   131f8:	bl	11520 <strcmp@plt>
   131fc:	ldr	sl, [r8, #4]
   13200:	mov	r4, r0
   13204:	mov	r0, sl
   13208:	bl	11718 <strlen@plt>
   1320c:	cmp	r4, #0
   13210:	beq	13138 <__assert_fail@plt+0x184c>
   13214:	mov	r0, #1
   13218:	str	r0, [sp, #48]	; 0x30
   1321c:	b	132b0 <__assert_fail@plt+0x19c4>
   13220:	mov	r0, sl
   13224:	bl	11718 <strlen@plt>
   13228:	mov	r6, r0
   1322c:	mov	r7, #0
   13230:	mov	r0, #0
   13234:	str	r0, [sp, #48]	; 0x30
   13238:	ldr	r0, [sp, #52]	; 0x34
   1323c:	cmp	r6, r0
   13240:	bcc	13254 <__assert_fail@plt+0x1968>
   13244:	ldr	r0, [sp, #56]	; 0x38
   13248:	eor	r0, r0, #1
   1324c:	tst	r0, #1
   13250:	beq	132b0 <__assert_fail@plt+0x19c4>
   13254:	ldr	r0, [sp, #52]	; 0x34
   13258:	mov	r4, #0
   1325c:	mov	r1, sl
   13260:	add	r2, sp, #64	; 0x40
   13264:	cmp	r6, r0
   13268:	mov	r0, #3
   1326c:	movwcc	r4, #1
   13270:	bl	11898 <__xstat64@plt>
   13274:	ldr	r2, [sp, #56]	; 0x38
   13278:	clz	r1, r0
   1327c:	cmp	r0, #0
   13280:	lsr	r1, r1, #5
   13284:	orr	r2, r2, r1
   13288:	str	r2, [sp, #56]	; 0x38
   1328c:	beq	132a0 <__assert_fail@plt+0x19b4>
   13290:	ldr	r0, [sp, #56]	; 0x38
   13294:	eor	r0, r0, #1
   13298:	ands	r0, r4, r0
   1329c:	beq	132b0 <__assert_fail@plt+0x19c4>
   132a0:	cmp	r6, #1
   132a4:	str	r8, [sp, #32]
   132a8:	str	r6, [sp, #52]	; 0x34
   132ac:	beq	13068 <__assert_fail@plt+0x177c>
   132b0:	mov	r0, r7
   132b4:	bl	16008 <__assert_fail@plt+0x471c>
   132b8:	mov	r0, r5
   132bc:	bl	16008 <__assert_fail@plt+0x471c>
   132c0:	ldr	r8, [r8, #28]
   132c4:	cmp	r8, #0
   132c8:	bne	13140 <__assert_fail@plt+0x1854>
   132cc:	ldr	r0, [sp, #20]
   132d0:	bl	16008 <__assert_fail@plt+0x471c>
   132d4:	ldr	r8, [sp, #32]
   132d8:	ldr	r6, [sp, #44]	; 0x2c
   132dc:	cmp	r8, #0
   132e0:	beq	1334c <__assert_fail@plt+0x1a60>
   132e4:	ldr	r5, [sp, #24]
   132e8:	ldrb	r0, [r8, #24]
   132ec:	ldr	r1, [r8, #12]
   132f0:	ldrd	r2, [r8]
   132f4:	mov	r7, #0
   132f8:	str	r7, [sp, #16]
   132fc:	str	r7, [sp, #12]
   13300:	str	r1, [sp]
   13304:	ubfx	r1, r0, #1, #1
   13308:	and	r0, r0, #1
   1330c:	str	r1, [sp, #8]
   13310:	str	r0, [sp, #4]
   13314:	mov	r0, r2
   13318:	mov	r1, r3
   1331c:	mov	r2, r6
   13320:	mov	r3, #0
   13324:	bl	14200 <__assert_fail@plt+0x2914>
   13328:	ldr	r8, [sp, #36]	; 0x24
   1332c:	ldr	r7, [sp, #40]	; 0x28
   13330:	b	13710 <__assert_fail@plt+0x1e24>
   13334:	mov	r0, r1
   13338:	bl	16008 <__assert_fail@plt+0x471c>
   1333c:	ldr	r8, [sp, #36]	; 0x24
   13340:	ldr	r7, [sp, #40]	; 0x28
   13344:	ldr	r6, [sp, #44]	; 0x2c
   13348:	b	133b0 <__assert_fail@plt+0x1ac4>
   1334c:	ldr	r0, [sp, #48]	; 0x30
   13350:	ldr	r8, [sp, #36]	; 0x24
   13354:	ldr	r7, [sp, #40]	; 0x28
   13358:	ldr	r5, [sp, #24]
   1335c:	tst	r0, #1
   13360:	beq	133b0 <__assert_fail@plt+0x1ac4>
   13364:	movw	r1, #64790	; 0xfd16
   13368:	mov	r0, #0
   1336c:	mov	r2, #5
   13370:	movt	r1, #1
   13374:	bl	115b0 <dcgettext@plt>
   13378:	mov	r4, r0
   1337c:	mov	r0, #4
   13380:	mov	r1, r6
   13384:	bl	1ac34 <__assert_fail@plt+0x9348>
   13388:	mov	r3, r0
   1338c:	mov	r0, #0
   13390:	mov	r1, #0
   13394:	mov	r2, r4
   13398:	bl	1167c <error@plt>
   1339c:	movw	r0, #4948	; 0x1354
   133a0:	mov	r1, #1
   133a4:	movt	r0, #3
   133a8:	strb	r1, [r0]
   133ac:	b	13710 <__assert_fail@plt+0x1e24>
   133b0:	mov	r0, r6
   133b4:	bl	1185c <canonicalize_file_name@plt>
   133b8:	mov	sl, r0
   133bc:	cmp	r0, #0
   133c0:	beq	134f4 <__assert_fail@plt+0x1c08>
   133c4:	ldrb	r0, [sl]
   133c8:	cmp	r0, #47	; 0x2f
   133cc:	bne	134f4 <__assert_fail@plt+0x1c08>
   133d0:	mov	r0, sl
   133d4:	bl	11718 <strlen@plt>
   133d8:	mov	r8, r0
   133dc:	movw	r0, #5024	; 0x13a0
   133e0:	movt	r0, #3
   133e4:	ldr	r7, [r0]
   133e8:	cmp	r7, #0
   133ec:	beq	13054 <__assert_fail@plt+0x1768>
   133f0:	str	r5, [sp, #24]
   133f4:	mov	r9, #0
   133f8:	mov	r5, #0
   133fc:	b	1343c <__assert_fail@plt+0x1b50>
   13400:	cmp	r6, #1
   13404:	beq	13430 <__assert_fail@plt+0x1b44>
   13408:	cmp	r6, r8
   1340c:	ldrbne	r0, [sl, r6]
   13410:	cmpne	r0, #47	; 0x2f
   13414:	bne	13490 <__assert_fail@plt+0x1ba4>
   13418:	mov	r0, r4
   1341c:	mov	r1, sl
   13420:	mov	r2, r6
   13424:	bl	118b0 <strncmp@plt>
   13428:	cmp	r0, #0
   1342c:	bne	13490 <__assert_fail@plt+0x1ba4>
   13430:	mov	r5, r6
   13434:	mov	r9, r7
   13438:	b	13490 <__assert_fail@plt+0x1ba4>
   1343c:	ldr	r0, [r7, #12]
   13440:	movw	r1, #64839	; 0xfd47
   13444:	movt	r1, #1
   13448:	bl	11520 <strcmp@plt>
   1344c:	cmp	r0, #0
   13450:	beq	13490 <__assert_fail@plt+0x1ba4>
   13454:	cmp	r9, #0
   13458:	beq	13474 <__assert_fail@plt+0x1b88>
   1345c:	ldrb	r0, [r9, #24]
   13460:	tst	r0, #1
   13464:	bne	13474 <__assert_fail@plt+0x1b88>
   13468:	ldrb	r0, [r7, #24]
   1346c:	tst	r0, #1
   13470:	bne	13490 <__assert_fail@plt+0x1ba4>
   13474:	ldr	r4, [r7, #4]
   13478:	mov	r0, r4
   1347c:	bl	11718 <strlen@plt>
   13480:	cmp	r5, r0
   13484:	movls	r6, r0
   13488:	cmpls	r0, r8
   1348c:	bls	13400 <__assert_fail@plt+0x1b14>
   13490:	ldr	r7, [r7, #28]
   13494:	cmp	r7, #0
   13498:	bne	1343c <__assert_fail@plt+0x1b50>
   1349c:	mov	r0, sl
   134a0:	bl	16008 <__assert_fail@plt+0x471c>
   134a4:	ldr	r8, [sp, #36]	; 0x24
   134a8:	ldr	r7, [sp, #40]	; 0x28
   134ac:	ldr	r5, [sp, #24]
   134b0:	cmp	r9, #0
   134b4:	beq	134fc <__assert_fail@plt+0x1c10>
   134b8:	ldr	r1, [r9, #4]
   134bc:	mov	r0, #3
   134c0:	add	r2, sp, #64	; 0x40
   134c4:	bl	11898 <__xstat64@plt>
   134c8:	cmp	r0, #0
   134cc:	bne	134fc <__assert_fail@plt+0x1c10>
   134d0:	ldr	r0, [sp, #60]	; 0x3c
   134d4:	ldr	r2, [sp, #64]	; 0x40
   134d8:	ldr	r3, [sp, #68]	; 0x44
   134dc:	ldrd	r0, [r0]
   134e0:	eor	r1, r3, r1
   134e4:	eor	r0, r2, r0
   134e8:	orrs	r0, r0, r1
   134ec:	bne	134fc <__assert_fail@plt+0x1c10>
   134f0:	b	1367c <__assert_fail@plt+0x1d90>
   134f4:	mov	r0, sl
   134f8:	bl	16008 <__assert_fail@plt+0x471c>
   134fc:	movw	r0, #5024	; 0x13a0
   13500:	movt	r0, #3
   13504:	ldr	r4, [r0]
   13508:	cmp	r4, #0
   1350c:	beq	136c0 <__assert_fail@plt+0x1dd4>
   13510:	mov	sl, r5
   13514:	mov	r9, #0
   13518:	mov	r6, r4
   1351c:	mvn	r1, #1
   13520:	mov	r5, r9
   13524:	ldr	r0, [r6, #16]!
   13528:	adds	r1, r1, #1
   1352c:	eor	r2, r0, r1
   13530:	mvn	r1, #0
   13534:	adc	r3, r1, #0
   13538:	ldr	r1, [r6, #4]
   1353c:	eor	r3, r1, r3
   13540:	orrs	r2, r2, r3
   13544:	bne	135c8 <__assert_fail@plt+0x1cdc>
   13548:	ldr	r1, [r4, #4]
   1354c:	mov	r0, #3
   13550:	add	r2, sp, #64	; 0x40
   13554:	bl	11898 <__xstat64@plt>
   13558:	cmp	r0, #0
   1355c:	beq	135bc <__assert_fail@plt+0x1cd0>
   13560:	bl	11748 <__errno_location@plt>
   13564:	ldr	r0, [r0]
   13568:	mvn	r1, #0
   1356c:	cmp	r0, #5
   13570:	mvn	r0, #1
   13574:	bne	135c4 <__assert_fail@plt+0x1cd8>
   13578:	ldr	r2, [r4, #4]
   1357c:	mov	r0, #0
   13580:	mov	r1, #3
   13584:	bl	1aeb0 <__assert_fail@plt+0x95c4>
   13588:	movw	r2, #1860	; 0x744
   1358c:	mov	r3, r0
   13590:	mov	r0, #0
   13594:	mov	r1, #5
   13598:	movt	r2, #2
   1359c:	bl	1167c <error@plt>
   135a0:	movw	r0, #4948	; 0x1354
   135a4:	mov	r1, #1
   135a8:	movt	r0, #3
   135ac:	strb	r1, [r0]
   135b0:	mvn	r0, #1
   135b4:	mvn	r1, #0
   135b8:	b	135c4 <__assert_fail@plt+0x1cd8>
   135bc:	ldr	r0, [sp, #64]	; 0x40
   135c0:	ldr	r1, [sp, #68]	; 0x44
   135c4:	strd	r0, [r6]
   135c8:	ldr	r2, [sp, #60]	; 0x3c
   135cc:	ldrd	r2, [r2]
   135d0:	eor	r1, r3, r1
   135d4:	eor	r0, r2, r0
   135d8:	orrs	r0, r0, r1
   135dc:	bne	13660 <__assert_fail@plt+0x1d74>
   135e0:	ldr	r0, [r4, #12]
   135e4:	movw	r1, #64839	; 0xfd47
   135e8:	movt	r1, #1
   135ec:	bl	11520 <strcmp@plt>
   135f0:	cmp	r0, #0
   135f4:	beq	13660 <__assert_fail@plt+0x1d74>
   135f8:	cmp	r5, #0
   135fc:	beq	13618 <__assert_fail@plt+0x1d2c>
   13600:	ldrb	r0, [r5, #24]
   13604:	tst	r0, #1
   13608:	bne	13618 <__assert_fail@plt+0x1d2c>
   1360c:	ldrb	r0, [r4, #24]
   13610:	tst	r0, #1
   13614:	bne	13660 <__assert_fail@plt+0x1d74>
   13618:	ldr	r1, [r4, #4]
   1361c:	mov	r0, #3
   13620:	add	r2, sp, #64	; 0x40
   13624:	bl	11898 <__xstat64@plt>
   13628:	cmp	r0, #0
   1362c:	bne	13650 <__assert_fail@plt+0x1d64>
   13630:	ldrd	r0, [r6]
   13634:	ldr	r2, [sp, #64]	; 0x40
   13638:	ldr	r3, [sp, #68]	; 0x44
   1363c:	mov	r9, r4
   13640:	eor	r1, r3, r1
   13644:	eor	r0, r2, r0
   13648:	orrs	r0, r0, r1
   1364c:	beq	13664 <__assert_fail@plt+0x1d78>
   13650:	mvn	r1, #1
   13654:	mvn	r0, #0
   13658:	str	r1, [r6]
   1365c:	str	r0, [r6, #4]
   13660:	mov	r9, r5
   13664:	ldr	r4, [r4, #28]
   13668:	cmp	r4, #0
   1366c:	bne	13518 <__assert_fail@plt+0x1c2c>
   13670:	cmp	r9, #0
   13674:	mov	r5, sl
   13678:	beq	136c0 <__assert_fail@plt+0x1dd4>
   1367c:	ldrb	r0, [r9, #24]
   13680:	ldr	r1, [r9, #12]
   13684:	ldrd	r2, [r9]
   13688:	mov	r6, #0
   1368c:	str	r6, [sp, #16]
   13690:	str	r6, [sp, #12]
   13694:	str	r1, [sp]
   13698:	ubfx	r1, r0, #1, #1
   1369c:	and	r0, r0, #1
   136a0:	str	r0, [sp, #4]
   136a4:	mov	r0, r2
   136a8:	ldr	r2, [sp, #44]	; 0x2c
   136ac:	str	r1, [sp, #8]
   136b0:	mov	r1, r3
   136b4:	mov	r3, r2
   136b8:	bl	14200 <__assert_fail@plt+0x2914>
   136bc:	b	13710 <__assert_fail@plt+0x1e24>
   136c0:	ldr	r6, [sp, #44]	; 0x2c
   136c4:	ldr	r1, [sp, #60]	; 0x3c
   136c8:	mov	r0, r6
   136cc:	bl	15058 <__assert_fail@plt+0x376c>
   136d0:	cmp	r0, #0
   136d4:	beq	13710 <__assert_fail@plt+0x1e24>
   136d8:	mov	r4, r0
   136dc:	mov	r0, #0
   136e0:	mov	r2, r6
   136e4:	mov	r3, #0
   136e8:	str	r0, [sp]
   136ec:	str	r0, [sp, #4]
   136f0:	str	r0, [sp, #8]
   136f4:	str	r0, [sp, #12]
   136f8:	str	r0, [sp, #16]
   136fc:	mov	r0, #0
   13700:	mov	r1, r4
   13704:	bl	14200 <__assert_fail@plt+0x2914>
   13708:	mov	r0, r4
   1370c:	bl	16008 <__assert_fail@plt+0x471c>
   13710:	add	r5, r5, #1
   13714:	cmp	r5, r7
   13718:	bne	1308c <__assert_fail@plt+0x17a0>
   1371c:	b	13b68 <__assert_fail@plt+0x227c>
   13720:	movw	r0, #5024	; 0x13a0
   13724:	movt	r0, #3
   13728:	ldr	r1, [r0]
   1372c:	movw	r0, #4936	; 0x1348
   13730:	movt	r0, #3
   13734:	ldrb	r0, [r0]
   13738:	str	r0, [sp, #56]	; 0x38
   1373c:	mov	r0, #0
   13740:	cmp	r1, #0
   13744:	beq	13758 <__assert_fail@plt+0x1e6c>
   13748:	ldr	r1, [r1, #28]
   1374c:	add	r0, r0, #1
   13750:	cmp	r1, #0
   13754:	bne	13748 <__assert_fail@plt+0x1e5c>
   13758:	movw	r1, #20564	; 0x5054
   1375c:	movw	r2, #20500	; 0x5014
   13760:	movw	r3, #20532	; 0x5034
   13764:	mov	r7, #0
   13768:	movt	r1, #1
   1376c:	movt	r2, #1
   13770:	movt	r3, #1
   13774:	str	r1, [sp]
   13778:	mov	r1, #0
   1377c:	bl	165c0 <__assert_fail@plt+0x4cd4>
   13780:	movw	r9, #5044	; 0x13b4
   13784:	cmp	r0, #0
   13788:	movt	r9, #3
   1378c:	str	r0, [r9]
   13790:	beq	13d9c <__assert_fail@plt+0x24b0>
   13794:	movw	r0, #5024	; 0x13a0
   13798:	movt	r0, #3
   1379c:	ldr	r5, [r0]
   137a0:	cmp	r5, #0
   137a4:	beq	13aac <__assert_fail@plt+0x21c0>
   137a8:	mov	r7, #0
   137ac:	b	1386c <__assert_fail@plt+0x1f80>
   137b0:	mov	r0, #2
   137b4:	str	r0, [r7]
   137b8:	b	12320 <__assert_fail@plt+0xa34>
   137bc:	ldr	r0, [sp, #52]	; 0x34
   137c0:	ldr	r1, [sp, #48]	; 0x30
   137c4:	cmp	r0, r1
   137c8:	mov	r0, #0
   137cc:	movwls	r0, #1
   137d0:	orr	r0, r4, r0
   137d4:	cmp	r0, #1
   137d8:	bne	13820 <__assert_fail@plt+0x1f34>
   137dc:	ldr	r4, [r8]
   137e0:	mov	r0, r4
   137e4:	mov	r1, r6
   137e8:	bl	11520 <strcmp@plt>
   137ec:	cmp	r0, #0
   137f0:	mov	r0, r5
   137f4:	beq	13834 <__assert_fail@plt+0x1f48>
   137f8:	ldr	r0, [sp, #40]	; 0x28
   137fc:	ldr	r1, [sp, #44]	; 0x2c
   13800:	bl	11520 <strcmp@plt>
   13804:	cmp	r0, #0
   13808:	mov	r0, r5
   1380c:	bne	13834 <__assert_fail@plt+0x1f48>
   13810:	ldr	r0, [sp, #60]	; 0x3c
   13814:	str	r5, [r0, #8]
   13818:	mov	r0, r8
   1381c:	b	13834 <__assert_fail@plt+0x1f48>
   13820:	ldr	r0, [sp, #60]	; 0x3c
   13824:	cmp	r8, #0
   13828:	str	r5, [r0, #8]
   1382c:	mov	r0, r8
   13830:	beq	13a6c <__assert_fail@plt+0x2180>
   13834:	ldr	r1, [sp, #56]	; 0x38
   13838:	ldr	r5, [r5, #28]
   1383c:	cmp	r1, #0
   13840:	bne	13aa4 <__assert_fail@plt+0x21b8>
   13844:	bl	194e4 <__assert_fail@plt+0x7bf8>
   13848:	cmp	r5, #0
   1384c:	bne	1386c <__assert_fail@plt+0x1f80>
   13850:	b	13aac <__assert_fail@plt+0x21c0>
   13854:	ldr	r1, [r5]
   13858:	ldr	r0, [r8]
   1385c:	bl	11520 <strcmp@plt>
   13860:	cmp	r0, #0
   13864:	bne	13a6c <__assert_fail@plt+0x2180>
   13868:	b	139e4 <__assert_fail@plt+0x20f8>
   1386c:	ldrb	r0, [r5, #24]
   13870:	tst	r0, #2
   13874:	beq	1388c <__assert_fail@plt+0x1fa0>
   13878:	movw	r1, #5020	; 0x139c
   1387c:	movt	r1, #3
   13880:	ldrb	r1, [r1]
   13884:	cmp	r1, #0
   13888:	bne	13a60 <__assert_fail@plt+0x2174>
   1388c:	tst	r0, #1
   13890:	beq	138bc <__assert_fail@plt+0x1fd0>
   13894:	movw	r0, #4936	; 0x1348
   13898:	movt	r0, #3
   1389c:	ldrb	r0, [r0]
   138a0:	cmp	r0, #0
   138a4:	bne	138bc <__assert_fail@plt+0x1fd0>
   138a8:	movw	r0, #4937	; 0x1349
   138ac:	movt	r0, #3
   138b0:	ldrb	r0, [r0]
   138b4:	cmp	r0, #1
   138b8:	bne	13a60 <__assert_fail@plt+0x2174>
   138bc:	ldr	r4, [r5, #12]
   138c0:	cmp	r4, #0
   138c4:	movwne	r0, #4928	; 0x1340
   138c8:	movtne	r0, #3
   138cc:	ldrne	r6, [r0]
   138d0:	cmpne	r6, #0
   138d4:	bne	13a40 <__assert_fail@plt+0x2154>
   138d8:	cmp	r4, #0
   138dc:	beq	1390c <__assert_fail@plt+0x2020>
   138e0:	ldr	r6, [sl]
   138e4:	cmp	r6, #0
   138e8:	beq	1390c <__assert_fail@plt+0x2020>
   138ec:	ldr	r1, [r6]
   138f0:	mov	r0, r4
   138f4:	bl	11520 <strcmp@plt>
   138f8:	cmp	r0, #0
   138fc:	beq	13a60 <__assert_fail@plt+0x2174>
   13900:	ldr	r6, [r6, #4]
   13904:	cmp	r6, #0
   13908:	bne	138ec <__assert_fail@plt+0x2000>
   1390c:	ldr	r1, [r5, #4]
   13910:	mov	r0, #3
   13914:	add	r2, sp, #64	; 0x40
   13918:	bl	11898 <__xstat64@plt>
   1391c:	cmn	r0, #1
   13920:	beq	13a60 <__assert_fail@plt+0x2174>
   13924:	ldr	r0, [r9]
   13928:	cmp	r0, #0
   1392c:	beq	13a6c <__assert_fail@plt+0x2180>
   13930:	ldr	r1, [sp, #64]	; 0x40
   13934:	ldr	r2, [sp, #68]	; 0x44
   13938:	str	r1, [fp, #-56]	; 0xffffffc8
   1393c:	sub	r1, fp, #56	; 0x38
   13940:	str	r2, [fp, #-52]	; 0xffffffcc
   13944:	bl	16310 <__assert_fail@plt+0x4a24>
   13948:	cmp	r0, #0
   1394c:	beq	13a6c <__assert_fail@plt+0x2180>
   13950:	ldr	r0, [r0, #16]
   13954:	cmp	r0, #0
   13958:	str	r0, [sp, #60]	; 0x3c
   1395c:	beq	13a6c <__assert_fail@plt+0x2180>
   13960:	ldr	r0, [sp, #60]	; 0x3c
   13964:	ldr	r8, [r0, #8]
   13968:	ldr	r0, [r8, #4]
   1396c:	str	r0, [sp, #44]	; 0x2c
   13970:	bl	11718 <strlen@plt>
   13974:	str	r0, [sp, #52]	; 0x34
   13978:	ldr	r0, [r5, #4]
   1397c:	str	r0, [sp, #40]	; 0x28
   13980:	bl	11718 <strlen@plt>
   13984:	str	r0, [sp, #48]	; 0x30
   13988:	ldr	r0, [r8, #8]
   1398c:	mov	r4, #0
   13990:	cmp	r0, #0
   13994:	ldrne	r6, [r5, #8]
   13998:	cmpne	r6, #0
   1399c:	beq	139bc <__assert_fail@plt+0x20d0>
   139a0:	bl	11718 <strlen@plt>
   139a4:	mov	r4, r0
   139a8:	mov	r0, r6
   139ac:	bl	11718 <strlen@plt>
   139b0:	cmp	r4, r0
   139b4:	mov	r4, #0
   139b8:	movwcc	r4, #1
   139bc:	movw	r0, #4949	; 0x1355
   139c0:	movt	r0, #3
   139c4:	ldrb	r0, [r0]
   139c8:	cmp	r0, #0
   139cc:	bne	139e4 <__assert_fail@plt+0x20f8>
   139d0:	ldrb	r0, [r5, #24]
   139d4:	tst	r0, #2
   139d8:	ldrbne	r0, [r8, #24]
   139dc:	tstne	r0, #2
   139e0:	bne	13854 <__assert_fail@plt+0x1f68>
   139e4:	ldr	r6, [r5]
   139e8:	mov	r1, #47	; 0x2f
   139ec:	mov	r0, r6
   139f0:	bl	11724 <strchr@plt>
   139f4:	cmp	r0, #0
   139f8:	beq	137bc <__assert_fail@plt+0x1ed0>
   139fc:	ldr	r0, [sp, #52]	; 0x34
   13a00:	ldr	r1, [sp, #48]	; 0x30
   13a04:	cmp	r0, r1
   13a08:	mov	r0, #0
   13a0c:	mov	r1, #47	; 0x2f
   13a10:	movwls	r0, #1
   13a14:	orr	sl, r4, r0
   13a18:	ldr	r4, [r8]
   13a1c:	mov	r0, r4
   13a20:	bl	11724 <strchr@plt>
   13a24:	cmp	sl, #1
   13a28:	movw	sl, #4932	; 0x1344
   13a2c:	movt	sl, #3
   13a30:	bne	13810 <__assert_fail@plt+0x1f24>
   13a34:	cmp	r0, #0
   13a38:	bne	137e0 <__assert_fail@plt+0x1ef4>
   13a3c:	b	13810 <__assert_fail@plt+0x1f24>
   13a40:	ldr	r1, [r6]
   13a44:	mov	r0, r4
   13a48:	bl	11520 <strcmp@plt>
   13a4c:	cmp	r0, #0
   13a50:	beq	138d8 <__assert_fail@plt+0x1fec>
   13a54:	ldr	r6, [r6, #4]
   13a58:	cmp	r6, #0
   13a5c:	bne	13a40 <__assert_fail@plt+0x2154>
   13a60:	ldrd	r0, [r5, #16]
   13a64:	str	r1, [sp, #68]	; 0x44
   13a68:	str	r0, [sp, #64]	; 0x40
   13a6c:	mov	r0, #24
   13a70:	bl	1bb68 <__assert_fail@plt+0xa27c>
   13a74:	mov	r4, r0
   13a78:	ldr	r0, [sp, #64]	; 0x40
   13a7c:	ldr	r1, [sp, #68]	; 0x44
   13a80:	stm	r4, {r0, r1, r5, r7}
   13a84:	mov	r1, r4
   13a88:	ldr	r0, [r9]
   13a8c:	bl	17104 <__assert_fail@plt+0x5818>
   13a90:	cmp	r0, #0
   13a94:	beq	13d9c <__assert_fail@plt+0x24b0>
   13a98:	str	r4, [r0, #16]
   13a9c:	mov	r7, r4
   13aa0:	ldr	r5, [r5, #28]
   13aa4:	cmp	r5, #0
   13aa8:	bne	1386c <__assert_fail@plt+0x1f80>
   13aac:	ldr	r0, [sp, #56]	; 0x38
   13ab0:	cmp	r0, #0
   13ab4:	bne	13b04 <__assert_fail@plt+0x2218>
   13ab8:	movw	r1, #5024	; 0x13a0
   13abc:	mov	r0, #0
   13ac0:	cmp	r7, #0
   13ac4:	movt	r1, #3
   13ac8:	str	r0, [r1]
   13acc:	beq	13af4 <__assert_fail@plt+0x2208>
   13ad0:	ldr	r1, [r7, #8]
   13ad4:	str	r0, [r1, #28]
   13ad8:	mov	r0, r1
   13adc:	ldr	r7, [r7, #12]
   13ae0:	cmp	r7, #0
   13ae4:	bne	13ad0 <__assert_fail@plt+0x21e4>
   13ae8:	movw	r0, #5024	; 0x13a0
   13aec:	movt	r0, #3
   13af0:	str	r1, [r0]
   13af4:	ldr	r0, [r9]
   13af8:	bl	168b8 <__assert_fail@plt+0x4fcc>
   13afc:	mov	r0, #0
   13b00:	str	r0, [r9]
   13b04:	movw	r0, #5024	; 0x13a0
   13b08:	movt	r0, #3
   13b0c:	ldr	r4, [r0]
   13b10:	cmp	r4, #0
   13b14:	beq	13b68 <__assert_fail@plt+0x227c>
   13b18:	mov	r5, #1
   13b1c:	mov	r6, #0
   13b20:	ldrb	r0, [r4, #24]
   13b24:	ldr	r1, [r4, #12]
   13b28:	ldrd	r2, [r4]
   13b2c:	str	r5, [sp, #16]
   13b30:	str	r6, [sp, #12]
   13b34:	str	r1, [sp]
   13b38:	ubfx	r1, r0, #1, #1
   13b3c:	and	r0, r0, #1
   13b40:	str	r1, [sp, #8]
   13b44:	str	r0, [sp, #4]
   13b48:	mov	r0, r2
   13b4c:	mov	r1, r3
   13b50:	mov	r2, #0
   13b54:	mov	r3, #0
   13b58:	bl	14200 <__assert_fail@plt+0x2914>
   13b5c:	ldr	r4, [r4, #28]
   13b60:	cmp	r4, #0
   13b64:	bne	13b20 <__assert_fail@plt+0x2234>
   13b68:	movw	r0, #4945	; 0x1351
   13b6c:	movw	r4, #5040	; 0x13b0
   13b70:	movt	r0, #3
   13b74:	movt	r4, #3
   13b78:	ldrb	r0, [r0]
   13b7c:	cmp	r0, #1
   13b80:	bne	13c14 <__assert_fail@plt+0x2328>
   13b84:	movw	r0, #4949	; 0x1355
   13b88:	movt	r0, #3
   13b8c:	ldrb	r0, [r0]
   13b90:	cmp	r0, #1
   13b94:	bne	13be8 <__assert_fail@plt+0x22fc>
   13b98:	movw	r0, #4472	; 0x1178
   13b9c:	movw	r1, #4952	; 0x1358
   13ba0:	mov	r3, #0
   13ba4:	movt	r0, #3
   13ba8:	movt	r1, #3
   13bac:	ldrb	r2, [r0, #24]
   13bb0:	mov	r0, #0
   13bb4:	str	r1, [sp, #12]
   13bb8:	movw	r1, #1526	; 0x5f6
   13bbc:	str	r0, [sp]
   13bc0:	str	r0, [sp, #4]
   13bc4:	str	r0, [sp, #8]
   13bc8:	str	r0, [sp, #16]
   13bcc:	movw	r0, #64579	; 0xfc43
   13bd0:	movt	r1, #2
   13bd4:	movt	r0, #1
   13bd8:	cmp	r2, #0
   13bdc:	mov	r2, #0
   13be0:	moveq	r1, r0
   13be4:	bl	14200 <__assert_fail@plt+0x2914>
   13be8:	ldr	r0, [r4]
   13bec:	cmp	r0, #0
   13bf0:	beq	13d80 <__assert_fail@plt+0x2494>
   13bf4:	movw	r7, #4916	; 0x1334
   13bf8:	movw	r9, #5032	; 0x13a8
   13bfc:	mov	r6, #0
   13c00:	add	r4, sp, #64	; 0x40
   13c04:	mov	sl, #32
   13c08:	movt	r7, #3
   13c0c:	movt	r9, #3
   13c10:	b	13c58 <__assert_fail@plt+0x236c>
   13c14:	movw	r0, #4948	; 0x1354
   13c18:	movt	r0, #3
   13c1c:	ldrb	r0, [r0]
   13c20:	cmp	r0, #0
   13c24:	bne	13d80 <__assert_fail@plt+0x2494>
   13c28:	movw	r1, #63377	; 0xf791
   13c2c:	mov	r0, #0
   13c30:	mov	r2, #5
   13c34:	movt	r1, #1
   13c38:	bl	115b0 <dcgettext@plt>
   13c3c:	mov	r2, r0
   13c40:	mov	r0, #1
   13c44:	mov	r1, #0
   13c48:	bl	1167c <error@plt>
   13c4c:	mov	r1, #10
   13c50:	bl	117e4 <__overflow@plt>
   13c54:	b	13d68 <__assert_fail@plt+0x247c>
   13c58:	movw	r0, #5028	; 0x13a4
   13c5c:	movt	r0, #3
   13c60:	ldr	r1, [r0]
   13c64:	cmp	r1, #0
   13c68:	beq	13d44 <__assert_fail@plt+0x2458>
   13c6c:	mov	r8, #0
   13c70:	b	13c8c <__assert_fail@plt+0x23a0>
   13c74:	mov	r1, #32
   13c78:	bl	117e4 <__overflow@plt>
   13c7c:	movw	r0, #5028	; 0x13a4
   13c80:	movt	r0, #3
   13c84:	ldr	r1, [r0]
   13c88:	b	13cc8 <__assert_fail@plt+0x23dc>
   13c8c:	movw	r0, #5036	; 0x13ac
   13c90:	cmp	r8, #0
   13c94:	movt	r0, #3
   13c98:	ldr	r0, [r0]
   13c9c:	ldr	r0, [r0, r6, lsl #2]
   13ca0:	ldr	r5, [r0, r8, lsl #2]
   13ca4:	beq	13cc8 <__assert_fail@plt+0x23dc>
   13ca8:	ldr	r0, [r7]
   13cac:	ldr	r2, [r0, #20]
   13cb0:	ldr	r3, [r0, #24]
   13cb4:	cmp	r2, r3
   13cb8:	bcs	13c74 <__assert_fail@plt+0x2388>
   13cbc:	add	r3, r2, #1
   13cc0:	str	r3, [r0, #20]
   13cc4:	strb	sl, [r2]
   13cc8:	ldr	r0, [r9]
   13ccc:	ldr	r0, [r0, r8, lsl #2]
   13cd0:	ldr	r3, [r0, #16]
   13cd4:	ldr	r2, [r0, #20]
   13cd8:	sub	r0, r1, #1
   13cdc:	mov	r1, r4
   13ce0:	sub	r0, r8, r0
   13ce4:	clz	r0, r0
   13ce8:	lsr	r0, r0, #5
   13cec:	str	r3, [sp, #64]	; 0x40
   13cf0:	lsl	r3, r0, #3
   13cf4:	mov	r0, r5
   13cf8:	bl	18458 <__assert_fail@plt+0x6b6c>
   13cfc:	mov	r5, r0
   13d00:	cmp	r0, #0
   13d04:	bne	13d1c <__assert_fail@plt+0x2430>
   13d08:	movw	r0, #5036	; 0x13ac
   13d0c:	movt	r0, #3
   13d10:	ldr	r0, [r0]
   13d14:	ldr	r0, [r0, r6, lsl #2]
   13d18:	ldr	r0, [r0, r8, lsl #2]
   13d1c:	ldr	r1, [r7]
   13d20:	bl	114f0 <fputs_unlocked@plt>
   13d24:	mov	r0, r5
   13d28:	bl	16008 <__assert_fail@plt+0x471c>
   13d2c:	movw	r0, #5028	; 0x13a4
   13d30:	add	r8, r8, #1
   13d34:	movt	r0, #3
   13d38:	ldr	r1, [r0]
   13d3c:	cmp	r8, r1
   13d40:	bcc	13c8c <__assert_fail@plt+0x23a0>
   13d44:	ldr	r0, [r7]
   13d48:	ldr	r1, [r0, #20]
   13d4c:	ldr	r2, [r0, #24]
   13d50:	cmp	r1, r2
   13d54:	bcs	13c4c <__assert_fail@plt+0x2360>
   13d58:	add	r2, r1, #1
   13d5c:	str	r2, [r0, #20]
   13d60:	mov	r0, #10
   13d64:	strb	r0, [r1]
   13d68:	movw	r0, #5040	; 0x13b0
   13d6c:	add	r6, r6, #1
   13d70:	movt	r0, #3
   13d74:	ldr	r0, [r0]
   13d78:	cmp	r6, r0
   13d7c:	bcc	13c58 <__assert_fail@plt+0x236c>
   13d80:	movw	r0, #4948	; 0x1354
   13d84:	movt	r0, #3
   13d88:	ldrb	r0, [r0]
   13d8c:	sub	sp, fp, #28
   13d90:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13d94:	mov	r0, #1
   13d98:	bl	119f0 <__assert_fail@plt+0x104>
   13d9c:	bl	1c0c8 <__assert_fail@plt+0xa7dc>
   13da0:	movw	r0, #4812	; 0x12cc
   13da4:	movw	r2, #63231	; 0xf6ff
   13da8:	movw	r7, #63215	; 0xf6ef
   13dac:	movw	r6, #63197	; 0xf6dd
   13db0:	mov	r1, #0
   13db4:	movt	r0, #3
   13db8:	movt	r2, #1
   13dbc:	movt	r7, #1
   13dc0:	movt	r6, #1
   13dc4:	ldr	r3, [r0]
   13dc8:	movw	r0, #4916	; 0x1334
   13dcc:	movt	r0, #3
   13dd0:	ldr	r0, [r0]
   13dd4:	stm	sp, {r6, r7}
   13dd8:	str	r2, [sp, #8]
   13ddc:	movw	r2, #63183	; 0xf6cf
   13de0:	str	r1, [sp, #12]
   13de4:	movw	r1, #63078	; 0xf666
   13de8:	movt	r1, #1
   13dec:	movt	r2, #1
   13df0:	bl	1b934 <__assert_fail@plt+0xa048>
   13df4:	mov	r0, #0
   13df8:	bl	1170c <exit@plt>
   13dfc:	mov	r0, #0
   13e00:	bl	119f0 <__assert_fail@plt+0x104>
   13e04:	movw	r0, #64481	; 0xfbe1
   13e08:	movw	r1, #64435	; 0xfbb3
   13e0c:	movw	r3, #64495	; 0xfbef
   13e10:	movw	r2, #425	; 0x1a9
   13e14:	movt	r0, #1
   13e18:	movt	r1, #1
   13e1c:	movt	r3, #1
   13e20:	bl	118ec <__assert_fail@plt>
   13e24:	movw	r0, #63168	; 0xf6c0
   13e28:	movw	r3, #63177	; 0xf6c9
   13e2c:	movt	r0, #1
   13e30:	movt	r3, #1
   13e34:	b	13e5c <__assert_fail@plt+0x2570>
   13e38:	movw	r0, #63168	; 0xf6c0
   13e3c:	movw	r3, #63165	; 0xf6bd
   13e40:	movt	r0, #1
   13e44:	movt	r3, #1
   13e48:	b	13e5c <__assert_fail@plt+0x2570>
   13e4c:	movw	r0, #63168	; 0xf6c0
   13e50:	movw	r3, #63180	; 0xf6cc
   13e54:	movt	r0, #1
   13e58:	movt	r3, #1
   13e5c:	str	r0, [sp]
   13e60:	ldr	r2, [sp, #52]	; 0x34
   13e64:	mov	r0, #0
   13e68:	mov	r1, #0
   13e6c:	bl	1167c <error@plt>
   13e70:	mov	r0, #1
   13e74:	bl	119f0 <__assert_fail@plt+0x104>
   13e78:	movw	r1, #4920	; 0x1338
   13e7c:	movw	r3, #65048	; 0xfe18
   13e80:	movt	r1, #3
   13e84:	movt	r3, #1
   13e88:	ldr	r2, [r1]
   13e8c:	ldr	r1, [sp, #64]	; 0x40
   13e90:	str	r2, [sp]
   13e94:	mov	r2, #66	; 0x42
   13e98:	bl	1c148 <__assert_fail@plt+0xa85c>
   13e9c:	movw	r0, #64660	; 0xfc94
   13ea0:	movw	r1, #64435	; 0xfbb3
   13ea4:	movw	r3, #64683	; 0xfcab
   13ea8:	movw	r2, #565	; 0x235
   13eac:	movt	r0, #1
   13eb0:	movt	r1, #1
   13eb4:	movt	r3, #1
   13eb8:	bl	118ec <__assert_fail@plt>
   13ebc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13ec0:	add	fp, sp, #28
   13ec4:	sub	sp, sp, #12
   13ec8:	bl	1c088 <__assert_fail@plt+0xa79c>
   13ecc:	movw	r6, #4472	; 0x1178
   13ed0:	movw	r4, #5028	; 0x13a4
   13ed4:	movw	r7, #5032	; 0x13a8
   13ed8:	mov	r8, r0
   13edc:	mov	sl, #1
   13ee0:	movt	r6, #3
   13ee4:	movt	r4, #3
   13ee8:	movt	r7, #3
   13eec:	add	r1, r6, #56	; 0x38
   13ef0:	stmib	sp, {r0, r1}
   13ef4:	b	13f78 <__assert_fail@plt+0x268c>
   13ef8:	cmp	r1, #2
   13efc:	bne	13f3c <__assert_fail@plt+0x2650>
   13f00:	ldr	r0, [r4]
   13f04:	mov	r2, #4
   13f08:	add	r1, r0, #1
   13f0c:	ldr	r0, [r7]
   13f10:	str	r1, [r4]
   13f14:	bl	1bb2c <__assert_fail@plt+0xa240>
   13f18:	ldr	r1, [r4]
   13f1c:	str	r0, [r7]
   13f20:	add	r0, r0, r1, lsl #2
   13f24:	ldr	r1, [sp, #8]
   13f28:	str	r1, [r0, #-4]
   13f2c:	movw	r0, #64407	; 0xfb97
   13f30:	movt	r0, #1
   13f34:	str	r0, [r6, #68]	; 0x44
   13f38:	b	1413c <__assert_fail@plt+0x2850>
   13f3c:	ldr	r0, [r4]
   13f40:	mov	r2, #4
   13f44:	add	r1, r0, #1
   13f48:	ldr	r0, [r7]
   13f4c:	str	r1, [r4]
   13f50:	bl	1bb2c <__assert_fail@plt+0xa240>
   13f54:	ldr	r1, [r4]
   13f58:	str	r0, [r7]
   13f5c:	add	r0, r0, r1, lsl #2
   13f60:	add	r1, r6, #112	; 0x70
   13f64:	str	r1, [r0, #-4]
   13f68:	movw	r0, #64412	; 0xfb9c
   13f6c:	movt	r0, #1
   13f70:	str	r0, [r6, #124]	; 0x7c
   13f74:	b	1413c <__assert_fail@plt+0x2850>
   13f78:	mov	r0, r8
   13f7c:	mov	r1, #44	; 0x2c
   13f80:	mov	r5, r8
   13f84:	bl	11724 <strchr@plt>
   13f88:	cmp	r0, #0
   13f8c:	mov	r8, #0
   13f90:	movne	r1, #0
   13f94:	strbne	r1, [r0], #1
   13f98:	mov	r1, r5
   13f9c:	movne	r8, r0
   13fa0:	ldr	r0, [r6, #4]
   13fa4:	bl	11520 <strcmp@plt>
   13fa8:	cmp	r0, #0
   13fac:	beq	14094 <__assert_fail@plt+0x27a8>
   13fb0:	ldr	r0, [r6, #32]
   13fb4:	mov	r1, r5
   13fb8:	bl	11520 <strcmp@plt>
   13fbc:	cmp	r0, #0
   13fc0:	beq	1409c <__assert_fail@plt+0x27b0>
   13fc4:	ldr	r0, [r6, #60]	; 0x3c
   13fc8:	mov	r1, r5
   13fcc:	bl	11520 <strcmp@plt>
   13fd0:	cmp	r0, #0
   13fd4:	beq	140a4 <__assert_fail@plt+0x27b8>
   13fd8:	ldr	r0, [r6, #88]	; 0x58
   13fdc:	mov	r1, r5
   13fe0:	bl	11520 <strcmp@plt>
   13fe4:	cmp	r0, #0
   13fe8:	beq	140ac <__assert_fail@plt+0x27c0>
   13fec:	ldr	r0, [r6, #116]	; 0x74
   13ff0:	mov	r1, r5
   13ff4:	bl	11520 <strcmp@plt>
   13ff8:	cmp	r0, #0
   13ffc:	beq	140b4 <__assert_fail@plt+0x27c8>
   14000:	ldr	r0, [r6, #144]	; 0x90
   14004:	mov	r1, r5
   14008:	bl	11520 <strcmp@plt>
   1400c:	cmp	r0, #0
   14010:	beq	140bc <__assert_fail@plt+0x27d0>
   14014:	ldr	r0, [r6, #172]	; 0xac
   14018:	mov	r1, r5
   1401c:	bl	11520 <strcmp@plt>
   14020:	cmp	r0, #0
   14024:	beq	140c4 <__assert_fail@plt+0x27d8>
   14028:	ldr	r0, [r6, #200]	; 0xc8
   1402c:	mov	r1, r5
   14030:	bl	11520 <strcmp@plt>
   14034:	cmp	r0, #0
   14038:	beq	140cc <__assert_fail@plt+0x27e0>
   1403c:	ldr	r0, [r6, #228]	; 0xe4
   14040:	mov	r1, r5
   14044:	bl	11520 <strcmp@plt>
   14048:	cmp	r0, #0
   1404c:	beq	140d4 <__assert_fail@plt+0x27e8>
   14050:	ldr	r0, [r6, #256]	; 0x100
   14054:	mov	r1, r5
   14058:	bl	11520 <strcmp@plt>
   1405c:	cmp	r0, #0
   14060:	beq	140dc <__assert_fail@plt+0x27f0>
   14064:	ldr	r0, [r6, #284]	; 0x11c
   14068:	mov	r1, r5
   1406c:	bl	11520 <strcmp@plt>
   14070:	cmp	r0, #0
   14074:	beq	140e4 <__assert_fail@plt+0x27f8>
   14078:	ldr	r0, [r6, #312]	; 0x138
   1407c:	mov	r1, r5
   14080:	bl	11520 <strcmp@plt>
   14084:	mov	r1, #11
   14088:	cmp	r0, #0
   1408c:	beq	140e8 <__assert_fail@plt+0x27fc>
   14090:	b	141e0 <__assert_fail@plt+0x28f4>
   14094:	mov	r1, #0
   14098:	b	140e8 <__assert_fail@plt+0x27fc>
   1409c:	mov	r1, #1
   140a0:	b	140e8 <__assert_fail@plt+0x27fc>
   140a4:	mov	r1, #2
   140a8:	b	140e8 <__assert_fail@plt+0x27fc>
   140ac:	mov	r1, #3
   140b0:	b	140e8 <__assert_fail@plt+0x27fc>
   140b4:	mov	r1, #4
   140b8:	b	140e8 <__assert_fail@plt+0x27fc>
   140bc:	mov	r1, #5
   140c0:	b	140e8 <__assert_fail@plt+0x27fc>
   140c4:	mov	r1, #6
   140c8:	b	140e8 <__assert_fail@plt+0x27fc>
   140cc:	mov	r1, #7
   140d0:	b	140e8 <__assert_fail@plt+0x27fc>
   140d4:	mov	r1, #8
   140d8:	b	140e8 <__assert_fail@plt+0x27fc>
   140dc:	mov	r1, #9
   140e0:	b	140e8 <__assert_fail@plt+0x27fc>
   140e4:	mov	r1, #10
   140e8:	rsb	r0, r1, r1, lsl #3
   140ec:	add	r9, r6, r0, lsl #2
   140f0:	mov	r5, r9
   140f4:	ldrb	r0, [r5, #24]!
   140f8:	cmp	r0, #0
   140fc:	bne	14164 <__assert_fail@plt+0x2878>
   14100:	cmp	r1, #11
   14104:	bhi	141a0 <__assert_fail@plt+0x28b4>
   14108:	movw	r0, #4075	; 0xfeb
   1410c:	tst	r0, sl, lsl r1
   14110:	beq	13ef8 <__assert_fail@plt+0x260c>
   14114:	ldr	r0, [r4]
   14118:	mov	r2, #4
   1411c:	add	r1, r0, #1
   14120:	ldr	r0, [r7]
   14124:	str	r1, [r4]
   14128:	bl	1bb2c <__assert_fail@plt+0xa240>
   1412c:	ldr	r1, [r4]
   14130:	str	r0, [r7]
   14134:	add	r0, r0, r1, lsl #2
   14138:	str	r9, [r0, #-4]
   1413c:	ldrb	r0, [r5]
   14140:	cmp	r0, #0
   14144:	bne	141c0 <__assert_fail@plt+0x28d4>
   14148:	cmp	r8, #0
   1414c:	strb	sl, [r5]
   14150:	bne	13f78 <__assert_fail@plt+0x268c>
   14154:	ldr	r0, [sp, #4]
   14158:	sub	sp, fp, #28
   1415c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14160:	b	16008 <__assert_fail@plt+0x471c>
   14164:	movw	r1, #64361	; 0xfb69
   14168:	mov	r0, #0
   1416c:	mov	r2, #5
   14170:	movt	r1, #1
   14174:	bl	115b0 <dcgettext@plt>
   14178:	mov	r4, r0
   1417c:	ldr	r0, [r9, #4]
   14180:	bl	1b15c <__assert_fail@plt+0x9870>
   14184:	mov	r3, r0
   14188:	mov	r0, #0
   1418c:	mov	r1, #0
   14190:	mov	r2, r4
   14194:	bl	1167c <error@plt>
   14198:	mov	r0, #1
   1419c:	bl	119f0 <__assert_fail@plt+0x104>
   141a0:	movw	r0, #64418	; 0xfba2
   141a4:	movw	r1, #64435	; 0xfbb3
   141a8:	movw	r3, #64444	; 0xfbbc
   141ac:	mov	r2, #496	; 0x1f0
   141b0:	movt	r0, #1
   141b4:	movt	r1, #1
   141b8:	movt	r3, #1
   141bc:	bl	118ec <__assert_fail@plt>
   141c0:	movw	r0, #64481	; 0xfbe1
   141c4:	movw	r1, #64435	; 0xfbb3
   141c8:	movw	r3, #64495	; 0xfbef
   141cc:	movw	r2, #425	; 0x1a9
   141d0:	movt	r0, #1
   141d4:	movt	r1, #1
   141d8:	movt	r3, #1
   141dc:	bl	118ec <__assert_fail@plt>
   141e0:	movw	r1, #64327	; 0xfb47
   141e4:	mov	r0, #0
   141e8:	mov	r2, #5
   141ec:	movt	r1, #1
   141f0:	bl	115b0 <dcgettext@plt>
   141f4:	mov	r4, r0
   141f8:	mov	r0, r5
   141fc:	b	14180 <__assert_fail@plt+0x2894>
   14200:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14204:	add	fp, sp, #28
   14208:	sub	sp, sp, #4
   1420c:	vpush	{d8-d12}
   14210:	sub	sp, sp, #920	; 0x398
   14214:	ldr	r6, [fp, #16]
   14218:	mov	r7, r3
   1421c:	mov	sl, r2
   14220:	mov	r5, r0
   14224:	str	r1, [sp, #64]	; 0x40
   14228:	cmp	r6, #0
   1422c:	beq	14244 <__assert_fail@plt+0x2958>
   14230:	movw	r0, #5020	; 0x139c
   14234:	movt	r0, #3
   14238:	ldrb	r0, [r0]
   1423c:	cmp	r0, #0
   14240:	bne	14e24 <__assert_fail@plt+0x3538>
   14244:	ldr	r0, [fp, #12]
   14248:	cmp	r0, #0
   1424c:	beq	14278 <__assert_fail@plt+0x298c>
   14250:	movw	r0, #4936	; 0x1348
   14254:	movt	r0, #3
   14258:	ldrb	r0, [r0]
   1425c:	cmp	r0, #0
   14260:	bne	14278 <__assert_fail@plt+0x298c>
   14264:	movw	r0, #4937	; 0x1349
   14268:	movt	r0, #3
   1426c:	ldrb	r0, [r0]
   14270:	cmp	r0, #1
   14274:	bne	14e24 <__assert_fail@plt+0x3538>
   14278:	ldr	r9, [fp, #8]
   1427c:	cmp	r9, #0
   14280:	movwne	r0, #4928	; 0x1340
   14284:	movtne	r0, #3
   14288:	ldrne	r4, [r0]
   1428c:	cmpne	r4, #0
   14290:	bne	14310 <__assert_fail@plt+0x2a24>
   14294:	cmp	r9, #0
   14298:	beq	142d0 <__assert_fail@plt+0x29e4>
   1429c:	movw	r0, #4932	; 0x1344
   142a0:	movt	r0, #3
   142a4:	ldr	r4, [r0]
   142a8:	cmp	r4, #0
   142ac:	beq	142d0 <__assert_fail@plt+0x29e4>
   142b0:	ldr	r1, [r4]
   142b4:	mov	r0, r9
   142b8:	bl	11520 <strcmp@plt>
   142bc:	cmp	r0, #0
   142c0:	beq	14e24 <__assert_fail@plt+0x3538>
   142c4:	ldr	r4, [r4, #4]
   142c8:	cmp	r4, #0
   142cc:	bne	142b0 <__assert_fail@plt+0x29c4>
   142d0:	ldr	r1, [sp, #64]	; 0x40
   142d4:	ldr	r8, [fp, #24]
   142d8:	ldr	r0, [fp, #20]
   142dc:	cmp	r1, #0
   142e0:	beq	14334 <__assert_fail@plt+0x2a48>
   142e4:	cmp	r0, #0
   142e8:	bne	14334 <__assert_fail@plt+0x2a48>
   142ec:	ldr	r0, [sp, #64]	; 0x40
   142f0:	ldrb	r0, [r0]
   142f4:	cmp	r0, #47	; 0x2f
   142f8:	bne	14e24 <__assert_fail@plt+0x3538>
   142fc:	ldr	r0, [sp, #64]	; 0x40
   14300:	cmp	r7, #0
   14304:	moveq	r7, r0
   14308:	mov	r4, r7
   1430c:	b	14394 <__assert_fail@plt+0x2aa8>
   14310:	ldr	r1, [r4]
   14314:	mov	r0, r9
   14318:	bl	11520 <strcmp@plt>
   1431c:	cmp	r0, #0
   14320:	beq	14294 <__assert_fail@plt+0x29a8>
   14324:	ldr	r4, [r4, #4]
   14328:	cmp	r4, #0
   1432c:	bne	14310 <__assert_fail@plt+0x2a24>
   14330:	b	14e24 <__assert_fail@plt+0x3538>
   14334:	ldr	r1, [sp, #64]	; 0x40
   14338:	mov	r4, r5
   1433c:	cmp	r1, #0
   14340:	movne	r4, r1
   14344:	cmp	r7, #0
   14348:	movne	r4, r7
   1434c:	cmp	r0, #0
   14350:	beq	14394 <__assert_fail@plt+0x2aa8>
   14354:	mov	r3, #48	; 0x30
   14358:	add	r1, r0, #32
   1435c:	add	r7, r0, #16
   14360:	sub	r2, fp, #136	; 0x88
   14364:	vld1.64	{d16-d17}, [r0], r3
   14368:	vld1.64	{d18-d19}, [r1]
   1436c:	vld1.64	{d20-d21}, [r7]
   14370:	add	r1, r2, #32
   14374:	mov	r7, #1
   14378:	vldr	d22, [r0]
   1437c:	add	r0, r2, #16
   14380:	vst1.64	{d16-d17}, [r2], r3
   14384:	vst1.64	{d18-d19}, [r1]
   14388:	vst1.64	{d20-d21}, [r0]
   1438c:	vstr	d22, [r2]
   14390:	b	1449c <__assert_fail@plt+0x2bb0>
   14394:	sub	r2, fp, #136	; 0x88
   14398:	mov	r0, r4
   1439c:	mov	r1, r5
   143a0:	bl	16030 <__assert_fail@plt+0x4744>
   143a4:	cmp	r0, #0
   143a8:	beq	14464 <__assert_fail@plt+0x2b78>
   143ac:	bl	11748 <__errno_location@plt>
   143b0:	cmp	r8, #0
   143b4:	beq	14424 <__assert_fail@plt+0x2b38>
   143b8:	ldr	r1, [r0]
   143bc:	cmp	r1, #13
   143c0:	cmpne	r1, #2
   143c4:	bne	14424 <__assert_fail@plt+0x2b38>
   143c8:	movw	r0, #4936	; 0x1348
   143cc:	movt	r0, #3
   143d0:	ldrb	r0, [r0]
   143d4:	cmp	r0, #1
   143d8:	bne	14e24 <__assert_fail@plt+0x3538>
   143dc:	mvn	r0, #0
   143e0:	mov	r7, #0
   143e4:	str	r0, [fp, #-108]	; 0xffffff94
   143e8:	str	r0, [fp, #-112]	; 0xffffff90
   143ec:	str	r0, [fp, #-116]	; 0xffffff8c
   143f0:	str	r0, [fp, #-120]	; 0xffffff88
   143f4:	str	r0, [fp, #-124]	; 0xffffff84
   143f8:	str	r0, [fp, #-128]	; 0xffffff80
   143fc:	str	r0, [fp, #-132]	; 0xffffff7c
   14400:	str	r0, [fp, #-136]	; 0xffffff78
   14404:	strb	r7, [fp, #-104]	; 0xffffff98
   14408:	movw	r9, #1526	; 0x5f6
   1440c:	str	r0, [fp, #-84]	; 0xffffffac
   14410:	str	r0, [fp, #-88]	; 0xffffffa8
   14414:	str	r0, [fp, #-92]	; 0xffffffa4
   14418:	str	r0, [fp, #-96]	; 0xffffffa0
   1441c:	movt	r9, #2
   14420:	b	1449c <__assert_fail@plt+0x2bb0>
   14424:	ldr	r5, [r0]
   14428:	mov	r0, #0
   1442c:	mov	r1, #3
   14430:	mov	r2, r4
   14434:	bl	1aeb0 <__assert_fail@plt+0x95c4>
   14438:	movw	r2, #1860	; 0x744
   1443c:	mov	r3, r0
   14440:	mov	r0, #0
   14444:	mov	r1, r5
   14448:	movt	r2, #2
   1444c:	bl	1167c <error@plt>
   14450:	movw	r0, #4948	; 0x1354
   14454:	mov	r1, #1
   14458:	movt	r0, #3
   1445c:	strb	r1, [r0]
   14460:	b	14e24 <__assert_fail@plt+0x3538>
   14464:	mov	r7, #0
   14468:	cmp	r8, #0
   1446c:	beq	1449c <__assert_fail@plt+0x2bb0>
   14470:	movw	r0, #4936	; 0x1348
   14474:	movt	r0, #3
   14478:	ldrb	r0, [r0]
   1447c:	cmp	r0, #1
   14480:	bne	1449c <__assert_fail@plt+0x2bb0>
   14484:	add	r2, sp, #72	; 0x48
   14488:	mov	r0, #3
   1448c:	mov	r1, r4
   14490:	bl	11898 <__xstat64@plt>
   14494:	cmp	r0, #0
   14498:	beq	14e34 <__assert_fail@plt+0x3548>
   1449c:	ldr	r0, [fp, #-128]	; 0xffffff80
   144a0:	ldr	r1, [fp, #-124]	; 0xffffff84
   144a4:	orrs	r0, r0, r1
   144a8:	bne	144d4 <__assert_fail@plt+0x2be8>
   144ac:	movw	r0, #4936	; 0x1348
   144b0:	movt	r0, #3
   144b4:	ldrb	r0, [r0]
   144b8:	cmp	r0, #0
   144bc:	bne	144d4 <__assert_fail@plt+0x2be8>
   144c0:	movw	r0, #4937	; 0x1349
   144c4:	movt	r0, #3
   144c8:	ldrb	r0, [r0]
   144cc:	cmp	r0, #1
   144d0:	bne	14e24 <__assert_fail@plt+0x3538>
   144d4:	cmp	r7, #0
   144d8:	movw	r4, #5040	; 0x13b0
   144dc:	str	r7, [sp, #52]	; 0x34
   144e0:	movw	r7, #5036	; 0x13ac
   144e4:	mov	r2, #4
   144e8:	sub	r6, fp, #136	; 0x88
   144ec:	movweq	r0, #4945	; 0x1351
   144f0:	moveq	r1, #1
   144f4:	movt	r4, #3
   144f8:	movt	r7, #3
   144fc:	movteq	r0, #3
   14500:	strbeq	r1, [r0]
   14504:	ldr	r0, [r4]
   14508:	add	r1, r0, #1
   1450c:	ldr	r0, [r7]
   14510:	str	r1, [r4]
   14514:	bl	1bb2c <__assert_fail@plt+0xa240>
   14518:	str	r0, [r7]
   1451c:	movw	r0, #5028	; 0x13a4
   14520:	mov	r1, #4
   14524:	movt	r0, #3
   14528:	ldr	r0, [r0]
   1452c:	bl	1bc38 <__assert_fail@plt+0xa34c>
   14530:	ldr	r1, [r4]
   14534:	ldr	r2, [r7]
   14538:	cmp	sl, #0
   1453c:	add	r1, r2, r1, lsl #2
   14540:	str	r0, [r1, #-4]
   14544:	movw	r0, #1526	; 0x5f6
   14548:	movt	r0, #2
   1454c:	moveq	sl, r0
   14550:	cmp	r5, #0
   14554:	moveq	r5, r0
   14558:	mov	r0, r5
   1455c:	bl	1c088 <__assert_fail@plt+0xa79c>
   14560:	mov	r4, r0
   14564:	cmp	r8, #0
   14568:	str	sl, [sp, #56]	; 0x38
   1456c:	beq	145c0 <__assert_fail@plt+0x2cd4>
   14570:	mov	r0, r4
   14574:	bl	11718 <strlen@plt>
   14578:	cmp	r0, #37	; 0x25
   1457c:	bcc	145c0 <__assert_fail@plt+0x2cd4>
   14580:	add	r0, r4, r0
   14584:	movw	r1, #65017	; 0xfdf9
   14588:	sub	r0, r0, #36	; 0x24
   1458c:	movt	r1, #1
   14590:	bl	118d4 <strspn@plt>
   14594:	cmp	r0, #36	; 0x24
   14598:	bne	145c0 <__assert_fail@plt+0x2cd4>
   1459c:	mov	r0, r4
   145a0:	mov	r1, #0
   145a4:	bl	15664 <__assert_fail@plt+0x3d78>
   145a8:	cmp	r0, #0
   145ac:	str	r0, [sp, #60]	; 0x3c
   145b0:	beq	145c0 <__assert_fail@plt+0x2cd4>
   145b4:	mov	r0, r4
   145b8:	bl	16008 <__assert_fail@plt+0x471c>
   145bc:	b	145c4 <__assert_fail@plt+0x2cd8>
   145c0:	str	r4, [sp, #60]	; 0x3c
   145c4:	add	r1, pc, #1012	; 0x3f4
   145c8:	sub	r2, fp, #264	; 0x108
   145cc:	mvn	r7, #1
   145d0:	mov	lr, #0
   145d4:	mvn	sl, #0
   145d8:	sub	ip, fp, #96	; 0x60
   145dc:	cmp	r9, #0
   145e0:	add	r0, r6, #8
   145e4:	vld1.64	{d16-d17}, [r1 :128]
   145e8:	mov	r1, #56	; 0x38
   145ec:	vst1.64	{d16-d17}, [r2], r1
   145f0:	add	r1, r7, #1
   145f4:	strb	lr, [r2]
   145f8:	str	r1, [fp, #-216]	; 0xffffff28
   145fc:	str	sl, [fp, #-212]	; 0xffffff2c
   14600:	strb	lr, [fp, #-232]	; 0xffffff18
   14604:	movw	r1, #1526	; 0x5f6
   14608:	ldm	ip, {r3, r4, r8, ip}
   1460c:	movt	r1, #2
   14610:	moveq	r9, r1
   14614:	sub	r1, fp, #248	; 0xf8
   14618:	str	ip, [fp, #-220]	; 0xffffff24
   1461c:	str	r8, [fp, #-224]	; 0xffffff20
   14620:	stm	r1, {r3, r4, r8, ip}
   14624:	mvn	r1, #2
   14628:	subs	r1, r1, r3
   1462c:	sbcs	r1, sl, r4
   14630:	bcc	14664 <__assert_fail@plt+0x2d78>
   14634:	subs	r1, r8, r7
   14638:	sbcs	r1, ip, sl
   1463c:	bcs	14664 <__assert_fail@plt+0x2d78>
   14640:	sub	r1, fp, #264	; 0x108
   14644:	subs	r2, r3, r8
   14648:	add	r1, r1, #48	; 0x30
   1464c:	sbcs	r7, r4, ip
   14650:	stm	r1, {r2, r7}
   14654:	mov	r1, #0
   14658:	mvn	r7, #1
   1465c:	movwcc	r1, #1
   14660:	strb	r1, [fp, #-208]	; 0xffffff30
   14664:	ldr	r1, [fp, #-136]	; 0xffffff78
   14668:	ldr	r6, [fp, #-132]	; 0xffffff7c
   1466c:	str	r4, [sp, #28]
   14670:	str	r3, [sp, #32]
   14674:	ldr	r5, [fp, #-120]	; 0xffffff88
   14678:	ldr	r4, [fp, #-116]	; 0xffffff8c
   1467c:	str	r1, [sp, #48]	; 0x30
   14680:	str	r1, [fp, #-200]	; 0xffffff38
   14684:	movw	r1, #5008	; 0x1390
   14688:	mov	r2, r6
   1468c:	str	r6, [sp, #44]	; 0x2c
   14690:	str	r6, [fp, #-196]	; 0xffffff3c
   14694:	mvn	r6, #1
   14698:	movt	r1, #3
   1469c:	ldr	r2, [r1]
   146a0:	ldr	r1, [r1, #4]
   146a4:	ldr	r3, [fp, #-108]	; 0xffffff94
   146a8:	str	r2, [fp, #-192]	; 0xffffff40
   146ac:	adds	r2, r7, #1
   146b0:	str	r1, [fp, #-188]	; 0xffffff44
   146b4:	ldrd	r0, [r0]
   146b8:	str	r3, [sp, #40]	; 0x28
   146bc:	adc	r7, sl, #0
   146c0:	ldr	sl, [fp, #-112]	; 0xffffff90
   146c4:	str	r2, [fp, #-152]	; 0xffffff68
   146c8:	mvn	r2, #0
   146cc:	str	r7, [fp, #-148]	; 0xffffff6c
   146d0:	strb	lr, [fp, #-144]	; 0xffffff70
   146d4:	str	r4, [fp, #-156]	; 0xffffff64
   146d8:	str	r5, [fp, #-160]	; 0xffffff60
   146dc:	str	r3, [fp, #-172]	; 0xffffff54
   146e0:	subs	r7, sl, r6
   146e4:	str	sl, [sp, #36]	; 0x24
   146e8:	str	sl, [fp, #-176]	; 0xffffff50
   146ec:	sbcs	r7, r3, r2
   146f0:	mov	r2, r3
   146f4:	ldrb	r7, [fp, #-104]	; 0xffffff98
   146f8:	movwcc	lr, #1
   146fc:	mvn	r2, #1
   14700:	cmp	r7, #0
   14704:	movwne	r7, #1
   14708:	and	r6, lr, r7
   1470c:	subs	r7, r0, r2
   14710:	mvn	r2, #0
   14714:	sbcs	r7, r1, r2
   14718:	strb	r6, [fp, #-168]	; 0xffffff58
   1471c:	str	r1, [fp, #-180]	; 0xffffff4c
   14720:	str	r0, [fp, #-184]	; 0xffffff48
   14724:	bcs	1475c <__assert_fail@plt+0x2e70>
   14728:	mvn	r2, #1
   1472c:	subs	r7, r5, r2
   14730:	mvn	r2, #0
   14734:	sbcs	r7, r4, r2
   14738:	bcs	1475c <__assert_fail@plt+0x2e70>
   1473c:	sub	r2, fp, #200	; 0xc8
   14740:	add	r7, r2, #48	; 0x30
   14744:	subs	r2, r0, r5
   14748:	sbcs	r3, r1, r4
   1474c:	strd	r2, [r7]
   14750:	mov	r2, #0
   14754:	movwcc	r2, #1
   14758:	strb	r2, [fp, #-144]	; 0xffffff70
   1475c:	movw	r2, #4949	; 0x1355
   14760:	ldr	r3, [sp, #52]	; 0x34
   14764:	movw	r7, #5040	; 0x13b0
   14768:	movt	r2, #3
   1476c:	movt	r7, #3
   14770:	ldrb	r2, [r2]
   14774:	mvn	r2, r2
   14778:	orr	r2, r3, r2
   1477c:	tst	r2, #1
   14780:	bne	14974 <__assert_fail@plt+0x3088>
   14784:	str	r6, [sp, #52]	; 0x34
   14788:	ldr	r6, [sp, #32]
   1478c:	str	r5, [sp, #20]
   14790:	ldr	r5, [sp, #28]
   14794:	mvn	r2, #1
   14798:	str	r4, [sp, #24]
   1479c:	subs	r2, r6, r2
   147a0:	mvn	r2, #0
   147a4:	sbcs	r2, r5, r2
   147a8:	bcs	147d4 <__assert_fail@plt+0x2ee8>
   147ac:	movw	r2, #4952	; 0x1358
   147b0:	movt	r2, #3
   147b4:	ldr	r3, [r2, #40]	; 0x28
   147b8:	ldr	r7, [r2, #44]	; 0x2c
   147bc:	adds	r3, r3, r6
   147c0:	adc	r7, r7, r5
   147c4:	str	r3, [r2, #40]	; 0x28
   147c8:	str	r7, [r2, #44]	; 0x2c
   147cc:	movw	r7, #5040	; 0x13b0
   147d0:	movt	r7, #3
   147d4:	mvn	lr, #1
   147d8:	mvn	sl, #0
   147dc:	subs	r2, r8, lr
   147e0:	sbcs	r2, ip, sl
   147e4:	bcs	14810 <__assert_fail@plt+0x2f24>
   147e8:	movw	r2, #4952	; 0x1358
   147ec:	movt	r2, #3
   147f0:	ldr	r3, [r2, #48]	; 0x30
   147f4:	ldr	r7, [r2, #52]	; 0x34
   147f8:	adds	r8, r3, r8
   147fc:	adc	r3, r7, ip
   14800:	movw	r7, #5040	; 0x13b0
   14804:	str	r8, [r2, #48]	; 0x30
   14808:	movt	r7, #3
   1480c:	str	r3, [r2, #52]	; 0x34
   14810:	subs	r2, r0, lr
   14814:	sbcs	r2, r1, sl
   14818:	bcs	14854 <__assert_fail@plt+0x2f68>
   1481c:	movw	r4, #4952	; 0x1358
   14820:	ldr	r6, [sp, #48]	; 0x30
   14824:	movt	r4, #3
   14828:	ldr	r8, [r4, #8]
   1482c:	ldr	r5, [r4, #12]
   14830:	ldr	r7, [sp, #44]	; 0x2c
   14834:	umull	r2, r3, r0, r6
   14838:	mla	r0, r0, r7, r3
   1483c:	movw	r7, #5040	; 0x13b0
   14840:	adds	r2, r8, r2
   14844:	mla	r0, r1, r6, r0
   14848:	movt	r7, #3
   1484c:	adc	r3, r5, r0
   14850:	strd	r2, [r4, #8]
   14854:	ldr	r2, [sp, #20]
   14858:	ldr	r4, [sp, #24]
   1485c:	subs	r0, r2, lr
   14860:	sbcs	r0, r4, sl
   14864:	bcs	14898 <__assert_fail@plt+0x2fac>
   14868:	movw	ip, #4952	; 0x1358
   1486c:	ldr	r5, [sp, #48]	; 0x30
   14870:	movt	ip, #3
   14874:	ldr	r8, [ip, #16]
   14878:	ldr	r3, [ip, #20]
   1487c:	ldr	r6, [sp, #44]	; 0x2c
   14880:	umull	r0, r1, r2, r5
   14884:	mla	r1, r2, r6, r1
   14888:	adds	r0, r8, r0
   1488c:	mla	r1, r4, r5, r1
   14890:	adc	r1, r3, r1
   14894:	strd	r0, [ip, #16]
   14898:	ldr	r0, [sp, #36]	; 0x24
   1489c:	ldr	r1, [sp, #52]	; 0x34
   148a0:	subs	r0, r0, lr
   148a4:	ldr	r0, [sp, #40]	; 0x28
   148a8:	sbcs	r0, r0, sl
   148ac:	bcs	14974 <__assert_fail@plt+0x3088>
   148b0:	ldr	r2, [sp, #48]	; 0x30
   148b4:	ldr	r6, [sp, #36]	; 0x24
   148b8:	ldr	r3, [sp, #44]	; 0x2c
   148bc:	movw	ip, #4952	; 0x1358
   148c0:	movt	ip, #3
   148c4:	umull	r7, r0, r6, r2
   148c8:	mla	r0, r6, r3, r0
   148cc:	ldr	r3, [sp, #40]	; 0x28
   148d0:	ldrb	r6, [ip, #32]
   148d4:	mla	r2, r3, r2, r0
   148d8:	cmp	r6, r1
   148dc:	bne	148f8 <__assert_fail@plt+0x300c>
   148e0:	ldrd	r0, [ip, #24]
   148e4:	adds	r0, r0, r7
   148e8:	movw	r7, #5040	; 0x13b0
   148ec:	adc	r1, r1, r2
   148f0:	movt	r7, #3
   148f4:	b	14970 <__assert_fail@plt+0x3084>
   148f8:	ldr	r4, [ip, #24]
   148fc:	ldr	r3, [ip, #28]
   14900:	cmp	r6, #0
   14904:	beq	14918 <__assert_fail@plt+0x302c>
   14908:	rsbs	r4, r4, #0
   1490c:	rsc	r3, r3, #0
   14910:	str	r4, [ip, #24]
   14914:	str	r3, [ip, #28]
   14918:	rsbs	r0, r7, #0
   1491c:	rsc	r5, r2, #0
   14920:	cmp	r1, #0
   14924:	moveq	r0, r7
   14928:	moveq	r5, r2
   1492c:	subs	r2, r0, r4
   14930:	sbcs	r2, r5, r3
   14934:	bcs	14944 <__assert_fail@plt+0x3058>
   14938:	subs	r2, r4, r0
   1493c:	sbc	r3, r3, r5
   14940:	b	14954 <__assert_fail@plt+0x3068>
   14944:	subs	r2, r0, r4
   14948:	mov	r6, r1
   1494c:	strb	r1, [ip, #32]
   14950:	sbc	r3, r5, r3
   14954:	strd	r2, [ip, #24]
   14958:	movw	r7, #5040	; 0x13b0
   1495c:	cmp	r6, #0
   14960:	movt	r7, #3
   14964:	beq	14974 <__assert_fail@plt+0x3088>
   14968:	rsbs	r0, r2, #0
   1496c:	rsc	r1, r3, #0
   14970:	strd	r0, [ip, #24]
   14974:	movw	r6, #5028	; 0x13a4
   14978:	movt	r6, #3
   1497c:	ldr	r0, [r6]
   14980:	cmp	r0, #0
   14984:	beq	14e1c <__assert_fail@plt+0x3530>
   14988:	movw	r5, #5032	; 0x13a8
   1498c:	vldr	d8, [pc, #100]	; 149f8 <__assert_fail@plt+0x310c>
   14990:	mov	r8, r6
   14994:	movw	r6, #4808	; 0x12c8
   14998:	mov	sl, #0
   1499c:	vmov.i32	d9, #0	; 0x00000000
   149a0:	vmov.f64	d10, #112	; 0x3f800000  1.0
   149a4:	vmov.f64	d11, #240	; 0xbf800000 -1.0
   149a8:	movt	r5, #3
   149ac:	movt	r6, #3
   149b0:	ldr	r1, [r5]
   149b4:	b	14a00 <__assert_fail@plt+0x3114>
   149b8:	nop	{0}
   149bc:	nop	{0}
   149c0:	andeq	r0, r0, r1
   149c4:	andeq	r0, r0, r0
   149c8:	andeq	r0, r0, r1
   149cc:	andeq	r0, r0, r0
   149d0:	movw	r2, #64991	; 0xfddf
   149d4:	add	r0, sp, #68	; 0x44
   149d8:	mov	r1, #1
   149dc:	vstr	d16, [sp]
   149e0:	movt	r2, #1
   149e4:	bl	116a0 <__asprintf_chk@plt>
   149e8:	cmn	r0, #1
   149ec:	beq	14f14 <__assert_fail@plt+0x3628>
   149f0:	ldr	r4, [sp, #68]	; 0x44
   149f4:	b	14d6c <__assert_fail@plt+0x3480>
   149f8:	andeq	r0, r0, r0
   149fc:	subsmi	r0, r9, r0
   14a00:	ldr	r0, [r1, sl, lsl #2]
   14a04:	sub	r4, fp, #200	; 0xc8
   14a08:	ldr	r1, [r0, #8]
   14a0c:	cmp	r1, #0
   14a10:	beq	14a30 <__assert_fail@plt+0x3144>
   14a14:	cmp	r1, #2
   14a18:	beq	14a2c <__assert_fail@plt+0x3140>
   14a1c:	cmp	r1, #1
   14a20:	bne	14ed0 <__assert_fail@plt+0x35e4>
   14a24:	sub	r4, fp, #264	; 0x108
   14a28:	b	14a30 <__assert_fail@plt+0x3144>
   14a2c:	mov	r4, #0
   14a30:	ldr	r0, [r0]
   14a34:	cmp	r0, #11
   14a38:	bhi	14ef0 <__assert_fail@plt+0x3604>
   14a3c:	add	r1, pc, #0
   14a40:	ldr	pc, [r1, r0, lsl #2]
   14a44:	andeq	r4, r1, r4, lsl #24
   14a48:	andeq	r4, r1, ip, lsl #24
   14a4c:	andeq	r4, r1, r4, ror sl
   14a50:	andeq	r4, r1, ip, ror #21
   14a54:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14a58:	andeq	r4, r1, r0, lsr #23
   14a5c:	andeq	r4, r1, r4, ror sl
   14a60:	andeq	r4, r1, ip, ror #21
   14a64:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14a68:	andeq	r4, r1, r0, lsr #23
   14a6c:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14a70:	strdeq	r4, [r1], -ip
   14a74:	ldr	r2, [r4, #16]
   14a78:	ldr	r1, [r4, #20]
   14a7c:	mvn	r0, #1
   14a80:	subs	r0, r2, r0
   14a84:	mvn	r0, #0
   14a88:	sbcs	r0, r1, r0
   14a8c:	movw	r0, #1526	; 0x5f6
   14a90:	movt	r0, #2
   14a94:	bcs	14c10 <__assert_fail@plt+0x3324>
   14a98:	movw	r0, #4940	; 0x134c
   14a9c:	movt	r0, #3
   14aa0:	ldr	r3, [r0]
   14aa4:	ldm	r4, {r0, ip}
   14aa8:	ldr	r7, [r4, #8]
   14aac:	ldr	r4, [r4, #12]
   14ab0:	stm	sp, {r0, ip}
   14ab4:	str	r7, [sp, #8]
   14ab8:	movw	r7, #5040	; 0x13b0
   14abc:	mov	r0, r2
   14ac0:	add	r2, sp, #72	; 0x48
   14ac4:	str	r4, [sp, #12]
   14ac8:	movt	r7, #3
   14acc:	bl	17498 <__assert_fail@plt+0x5bac>
   14ad0:	b	14c10 <__assert_fail@plt+0x3324>
   14ad4:	ldr	r8, [r4, #24]
   14ad8:	ldr	r2, [r4, #28]
   14adc:	ldrb	r5, [r4, #32]
   14ae0:	cmp	r5, #0
   14ae4:	beq	14b00 <__assert_fail@plt+0x3214>
   14ae8:	b	14b1c <__assert_fail@plt+0x3230>
   14aec:	ldr	r8, [r4, #48]	; 0x30
   14af0:	ldr	r2, [r4, #52]	; 0x34
   14af4:	ldrb	r5, [r4, #56]	; 0x38
   14af8:	cmp	r5, #0
   14afc:	bne	14b1c <__assert_fail@plt+0x3230>
   14b00:	mvn	r0, #1
   14b04:	subs	r0, r8, r0
   14b08:	mvn	r0, #0
   14b0c:	sbcs	r0, r2, r0
   14b10:	movw	r0, #1526	; 0x5f6
   14b14:	movt	r0, #2
   14b18:	bcs	14b74 <__assert_fail@plt+0x3288>
   14b1c:	movw	r0, #4940	; 0x134c
   14b20:	ldr	r1, [r4, #4]
   14b24:	ldr	r7, [r4, #8]
   14b28:	movt	r0, #3
   14b2c:	ldr	r3, [r0]
   14b30:	ldr	r0, [r4]
   14b34:	ldr	r4, [r4, #12]
   14b38:	stm	sp, {r0, r1, r7}
   14b3c:	rsbs	r0, r8, #0
   14b40:	str	r4, [sp, #12]
   14b44:	rsc	r1, r2, #0
   14b48:	cmp	r5, #0
   14b4c:	moveq	r1, r2
   14b50:	add	r2, sp, #72	; 0x48
   14b54:	moveq	r0, r8
   14b58:	add	r2, r2, r5
   14b5c:	bl	17498 <__assert_fail@plt+0x5bac>
   14b60:	cmp	r5, #0
   14b64:	movw	r7, #5040	; 0x13b0
   14b68:	movne	r1, #45	; 0x2d
   14b6c:	movt	r7, #3
   14b70:	strbne	r1, [r0, #-1]!
   14b74:	bl	1c088 <__assert_fail@plt+0xa79c>
   14b78:	movw	r6, #5028	; 0x13a4
   14b7c:	movw	r5, #5032	; 0x13a8
   14b80:	mov	r4, r0
   14b84:	str	r0, [sp, #68]	; 0x44
   14b88:	movt	r6, #3
   14b8c:	movt	r5, #3
   14b90:	mov	r8, r6
   14b94:	movw	r6, #4808	; 0x12c8
   14b98:	movt	r6, #3
   14b9c:	b	14d90 <__assert_fail@plt+0x34a4>
   14ba0:	ldrd	r0, [r4, #48]	; 0x30
   14ba4:	mvn	r2, #1
   14ba8:	subs	r2, r0, r2
   14bac:	mvn	r2, #0
   14bb0:	sbcs	r2, r1, r2
   14bb4:	bcs	14d58 <__assert_fail@plt+0x346c>
   14bb8:	ldr	r8, [r4, #24]
   14bbc:	ldr	r5, [r4, #28]
   14bc0:	mvn	r2, #1
   14bc4:	subs	r2, r8, r2
   14bc8:	mvn	r2, #0
   14bcc:	sbcs	r2, r5, r2
   14bd0:	bcs	14d58 <__assert_fail@plt+0x346c>
   14bd4:	ldrb	r2, [r4, #56]	; 0x38
   14bd8:	cmp	r2, #0
   14bdc:	beq	14c20 <__assert_fail@plt+0x3334>
   14be0:	rsbs	r0, r0, #0
   14be4:	rsc	r1, r1, #0
   14be8:	bl	1ecbc <__assert_fail@plt+0xd3d0>
   14bec:	eor	r1, r1, #-2147483648	; 0x80000000
   14bf0:	b	14cc8 <__assert_fail@plt+0x33dc>
   14bf4:	ldr	r0, [sp, #64]	; 0x40
   14bf8:	b	14c10 <__assert_fail@plt+0x3324>
   14bfc:	ldr	r0, [sp, #56]	; 0x38
   14c00:	b	14c10 <__assert_fail@plt+0x3324>
   14c04:	ldr	r0, [sp, #60]	; 0x3c
   14c08:	b	14c10 <__assert_fail@plt+0x3324>
   14c0c:	mov	r0, r9
   14c10:	bl	1c088 <__assert_fail@plt+0xa79c>
   14c14:	mov	r4, r0
   14c18:	str	r0, [sp, #68]	; 0x44
   14c1c:	b	14d90 <__assert_fail@plt+0x34a4>
   14c20:	movw	r2, #36700	; 0x8f5c
   14c24:	movt	r2, #62914	; 0xf5c2
   14c28:	subs	r2, r2, r0
   14c2c:	movw	r2, #23592	; 0x5c28
   14c30:	movt	r2, #655	; 0x28f
   14c34:	sbcs	r2, r2, r1
   14c38:	bcc	14cc4 <__assert_fail@plt+0x33d8>
   14c3c:	adds	r2, r8, r0
   14c40:	adc	r3, r5, r1
   14c44:	orrs	r6, r2, r3
   14c48:	beq	14cc4 <__assert_fail@plt+0x33d8>
   14c4c:	subs	r6, r2, r0
   14c50:	mov	ip, #0
   14c54:	sbcs	r6, r3, r1
   14c58:	ldrb	r6, [r4, #32]
   14c5c:	movwcc	ip, #1
   14c60:	cmp	ip, r6
   14c64:	bne	14cc4 <__assert_fail@plt+0x33d8>
   14c68:	mov	r6, #100	; 0x64
   14c6c:	mov	r4, r3
   14c70:	umull	r7, r0, r0, r6
   14c74:	mla	r5, r1, r6, r0
   14c78:	mov	r0, r7
   14c7c:	mov	r6, r2
   14c80:	mov	r1, r5
   14c84:	bl	1ed30 <__assert_fail@plt+0xd444>
   14c88:	umull	r2, r3, r0, r6
   14c8c:	adds	ip, r0, #1
   14c90:	mla	r3, r0, r4, r3
   14c94:	adc	r4, r1, #0
   14c98:	subs	r2, r7, r2
   14c9c:	movw	r7, #5040	; 0x13b0
   14ca0:	mla	r3, r1, r6, r3
   14ca4:	movt	r7, #3
   14ca8:	sbc	r3, r5, r3
   14cac:	orrs	r2, r2, r3
   14cb0:	movne	r1, r4
   14cb4:	movne	r0, ip
   14cb8:	bl	1ecbc <__assert_fail@plt+0xd3d0>
   14cbc:	vmov	d16, r0, r1
   14cc0:	b	14d4c <__assert_fail@plt+0x3460>
   14cc4:	bl	1ecbc <__assert_fail@plt+0xd3d0>
   14cc8:	vmov	d12, r0, r1
   14ccc:	ldrb	r0, [r4, #32]
   14cd0:	cmp	r0, #0
   14cd4:	beq	14cec <__assert_fail@plt+0x3400>
   14cd8:	rsbs	r0, r8, #0
   14cdc:	rsc	r1, r5, #0
   14ce0:	bl	1ecbc <__assert_fail@plt+0xd3d0>
   14ce4:	eor	r1, r1, #-2147483648	; 0x80000000
   14ce8:	b	14cf8 <__assert_fail@plt+0x340c>
   14cec:	mov	r0, r8
   14cf0:	mov	r1, r5
   14cf4:	bl	1ecbc <__assert_fail@plt+0xd3d0>
   14cf8:	vmov	d16, r0, r1
   14cfc:	vadd.f64	d16, d12, d16
   14d00:	vcmp.f64	d16, #0.0
   14d04:	vmrs	APSR_nzcv, fpscr
   14d08:	beq	14d58 <__assert_fail@plt+0x346c>
   14d0c:	vmul.f64	d17, d12, d8
   14d10:	vdiv.f64	d16, d17, d16
   14d14:	vcvt.s32.f64	s0, d16
   14d18:	vcvt.f64.s32	d17, s0
   14d1c:	vcmpe.f64	d16, d17
   14d20:	vadd.f64	d19, d17, d10
   14d24:	vmrs	APSR_nzcv, fpscr
   14d28:	vcmpe.f64	d19, d16
   14d2c:	vselgt.f64	d18, d10, d9
   14d30:	vmrs	APSR_nzcv, fpscr
   14d34:	vadd.f64	d18, d17, d18
   14d38:	vadd.f64	d17, d17, d11
   14d3c:	vcmpe.f64	d16, d17
   14d40:	vselge.f64	d18, d18, d16
   14d44:	vmrs	APSR_nzcv, fpscr
   14d48:	vselgt.f64	d16, d18, d16
   14d4c:	vcmpe.f64	d16, #0.0
   14d50:	vmrs	APSR_nzcv, fpscr
   14d54:	bge	149d0 <__assert_fail@plt+0x30e4>
   14d58:	movw	r0, #1526	; 0x5f6
   14d5c:	movt	r0, #2
   14d60:	bl	115bc <strdup@plt>
   14d64:	mov	r4, r0
   14d68:	str	r0, [sp, #68]	; 0x44
   14d6c:	movw	r6, #5028	; 0x13a4
   14d70:	movw	r5, #5032	; 0x13a8
   14d74:	cmp	r4, #0
   14d78:	movt	r6, #3
   14d7c:	movt	r5, #3
   14d80:	mov	r8, r6
   14d84:	movw	r6, #4808	; 0x12c8
   14d88:	movt	r6, #3
   14d8c:	beq	14f10 <__assert_fail@plt+0x3624>
   14d90:	ldr	r0, [r6]
   14d94:	cmn	r0, #1
   14d98:	bgt	14da8 <__assert_fail@plt+0x34bc>
   14d9c:	mov	r0, #1
   14da0:	bl	118a4 <isatty@plt>
   14da4:	str	r0, [r6]
   14da8:	movw	r1, #20256	; 0x4f20
   14dac:	cmp	r0, #0
   14db0:	movw	r0, #20440	; 0x4fd8
   14db4:	movt	r1, #1
   14db8:	movt	r0, #1
   14dbc:	moveq	r1, r0
   14dc0:	mov	r0, r4
   14dc4:	blx	r1
   14dc8:	ldr	r0, [sp, #68]	; 0x44
   14dcc:	mov	r1, #0
   14dd0:	bl	184f8 <__assert_fail@plt+0x6c0c>
   14dd4:	ldr	r1, [r5]
   14dd8:	ldr	r2, [r1, sl, lsl #2]
   14ddc:	ldr	r3, [r2, #16]
   14de0:	cmp	r3, r0
   14de4:	movhi	r0, r3
   14de8:	str	r0, [r2, #16]
   14dec:	movw	r2, #5036	; 0x13ac
   14df0:	movt	r2, #3
   14df4:	ldr	r0, [r7]
   14df8:	ldr	r2, [r2]
   14dfc:	add	r0, r2, r0, lsl #2
   14e00:	ldr	r2, [sp, #68]	; 0x44
   14e04:	ldr	r0, [r0, #-4]
   14e08:	str	r2, [r0, sl, lsl #2]
   14e0c:	add	sl, sl, #1
   14e10:	ldr	r0, [r8]
   14e14:	cmp	sl, r0
   14e18:	bcc	14a00 <__assert_fail@plt+0x3114>
   14e1c:	ldr	r0, [sp, #60]	; 0x3c
   14e20:	bl	16008 <__assert_fail@plt+0x471c>
   14e24:	sub	sp, fp, #72	; 0x48
   14e28:	vpop	{d8-d12}
   14e2c:	add	sp, sp, #4
   14e30:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14e34:	movw	r0, #5044	; 0x13b4
   14e38:	movt	r0, #3
   14e3c:	ldr	r0, [r0]
   14e40:	cmp	r0, #0
   14e44:	beq	1449c <__assert_fail@plt+0x2bb0>
   14e48:	ldr	r1, [sp, #72]	; 0x48
   14e4c:	ldr	r2, [sp, #76]	; 0x4c
   14e50:	str	r1, [fp, #-200]	; 0xffffff38
   14e54:	sub	r1, fp, #200	; 0xc8
   14e58:	str	r2, [fp, #-196]	; 0xffffff3c
   14e5c:	bl	16310 <__assert_fail@plt+0x4a24>
   14e60:	cmp	r0, #0
   14e64:	beq	1449c <__assert_fail@plt+0x2bb0>
   14e68:	ldr	r0, [r0, #16]
   14e6c:	cmp	r0, #0
   14e70:	ldrne	r4, [r0, #8]
   14e74:	cmpne	r4, #0
   14e78:	beq	1449c <__assert_fail@plt+0x2bb0>
   14e7c:	ldr	r0, [r4]
   14e80:	mov	r1, r5
   14e84:	bl	11520 <strcmp@plt>
   14e88:	cmp	r0, #0
   14e8c:	beq	1449c <__assert_fail@plt+0x2bb0>
   14e90:	ldrb	r0, [r4, #24]
   14e94:	tst	r0, #2
   14e98:	cmpne	r6, #0
   14e9c:	bne	1449c <__assert_fail@plt+0x2bb0>
   14ea0:	mvn	r0, #0
   14ea4:	mov	r1, #0
   14ea8:	str	r0, [fp, #-108]	; 0xffffff94
   14eac:	str	r0, [fp, #-112]	; 0xffffff90
   14eb0:	str	r0, [fp, #-116]	; 0xffffff8c
   14eb4:	str	r0, [fp, #-120]	; 0xffffff88
   14eb8:	str	r0, [fp, #-124]	; 0xffffff84
   14ebc:	str	r0, [fp, #-128]	; 0xffffff80
   14ec0:	str	r0, [fp, #-132]	; 0xffffff7c
   14ec4:	str	r0, [fp, #-136]	; 0xffffff78
   14ec8:	strb	r1, [fp, #-104]	; 0xffffff98
   14ecc:	b	14408 <__assert_fail@plt+0x2b1c>
   14ed0:	movw	r0, #64844	; 0xfd4c
   14ed4:	movw	r1, #64435	; 0xfbb3
   14ed8:	movw	r3, #64862	; 0xfd5e
   14edc:	movw	r2, #1158	; 0x486
   14ee0:	movt	r0, #1
   14ee4:	movt	r1, #1
   14ee8:	movt	r3, #1
   14eec:	bl	118ec <__assert_fail@plt>
   14ef0:	movw	r0, #64998	; 0xfde6
   14ef4:	movw	r1, #64435	; 0xfbb3
   14ef8:	movw	r3, #64862	; 0xfd5e
   14efc:	movw	r2, #1260	; 0x4ec
   14f00:	movt	r0, #1
   14f04:	movt	r1, #1
   14f08:	movt	r3, #1
   14f0c:	bl	118ec <__assert_fail@plt>
   14f10:	bl	1c0c8 <__assert_fail@plt+0xa7dc>
   14f14:	mov	r0, #0
   14f18:	str	r0, [sp, #68]	; 0x44
   14f1c:	bl	1c0c8 <__assert_fail@plt+0xa7dc>
   14f20:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14f24:	add	fp, sp, #28
   14f28:	sub	sp, sp, #20
   14f2c:	mov	r4, r0
   14f30:	bl	11718 <strlen@plt>
   14f34:	mov	sl, #0
   14f38:	cmp	r0, #0
   14f3c:	str	sl, [sp, #12]
   14f40:	str	sl, [sp, #8]
   14f44:	beq	14fcc <__assert_fail@plt+0x36e0>
   14f48:	add	r8, r4, r0
   14f4c:	add	r9, sp, #8
   14f50:	mov	r7, r4
   14f54:	b	14f74 <__assert_fail@plt+0x3688>
   14f58:	mov	r0, r4
   14f5c:	mov	r1, r7
   14f60:	mov	r2, r5
   14f64:	bl	11544 <memmove@plt>
   14f68:	add	r4, r4, r5
   14f6c:	mov	r0, r5
   14f70:	b	14fc0 <__assert_fail@plt+0x36d4>
   14f74:	sub	r6, r8, r7
   14f78:	add	r0, sp, #4
   14f7c:	mov	r1, r7
   14f80:	mov	r3, r9
   14f84:	mov	r2, r6
   14f88:	bl	1801c <__assert_fail@plt+0x6730>
   14f8c:	mov	r5, r0
   14f90:	mov	r0, #1
   14f94:	cmp	r5, r6
   14f98:	bhi	14fb0 <__assert_fail@plt+0x36c4>
   14f9c:	ldr	r0, [sp, #4]
   14fa0:	bl	115e0 <iswcntrl@plt>
   14fa4:	cmp	r0, #0
   14fa8:	beq	14f58 <__assert_fail@plt+0x366c>
   14fac:	mov	r0, r5
   14fb0:	mov	r1, #63	; 0x3f
   14fb4:	strb	r1, [r4], #1
   14fb8:	str	sl, [sp, #12]
   14fbc:	str	sl, [sp, #8]
   14fc0:	add	r7, r7, r0
   14fc4:	cmp	r7, r8
   14fc8:	bne	14f74 <__assert_fail@plt+0x3688>
   14fcc:	strb	sl, [r4]
   14fd0:	sub	sp, fp, #28
   14fd4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14fd8:	push	{r4, r5, fp, lr}
   14fdc:	add	fp, sp, #8
   14fe0:	ldrb	r1, [r0]
   14fe4:	cmp	r1, #0
   14fe8:	popeq	{r4, r5, fp, pc}
   14fec:	add	r4, r0, #1
   14ff0:	mov	r5, #63	; 0x3f
   14ff4:	uxtb	r0, r1
   14ff8:	bl	153c4 <__assert_fail@plt+0x3ad8>
   14ffc:	cmp	r0, #0
   15000:	strbne	r5, [r4, #-1]
   15004:	ldrb	r1, [r4], #1
   15008:	cmp	r1, #0
   1500c:	bne	14ff4 <__assert_fail@plt+0x3708>
   15010:	pop	{r4, r5, fp, pc}
   15014:	push	{fp, lr}
   15018:	mov	fp, sp
   1501c:	mov	r2, r1
   15020:	ldrd	r0, [r0]
   15024:	mov	r3, #0
   15028:	bl	1ed30 <__assert_fail@plt+0xd444>
   1502c:	mov	r0, r2
   15030:	pop	{fp, pc}
   15034:	ldrd	r2, [r1]
   15038:	ldrd	r0, [r0]
   1503c:	eor	r1, r1, r3
   15040:	eor	r0, r0, r2
   15044:	orr	r0, r0, r1
   15048:	clz	r0, r0
   1504c:	lsr	r0, r0, #5
   15050:	bx	lr
   15054:	b	16008 <__assert_fail@plt+0x471c>
   15058:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1505c:	add	fp, sp, #24
   15060:	sub	sp, sp, #216	; 0xd8
   15064:	mov	r5, r0
   15068:	sub	r0, fp, #32
   1506c:	mov	r4, r1
   15070:	bl	1b294 <__assert_fail@plt+0x99a8>
   15074:	cmp	r0, #0
   15078:	beq	150b0 <__assert_fail@plt+0x37c4>
   1507c:	bl	11748 <__errno_location@plt>
   15080:	ldr	r5, [r0]
   15084:	movw	r1, #65376	; 0xff60
   15088:	mov	r0, #0
   1508c:	mov	r2, #5
   15090:	mov	r4, #0
   15094:	movt	r1, #1
   15098:	bl	115b0 <dcgettext@plt>
   1509c:	mov	r2, r0
   150a0:	mov	r0, #0
   150a4:	mov	r1, r5
   150a8:	bl	1167c <error@plt>
   150ac:	b	1530c <__assert_fail@plt+0x3a20>
   150b0:	ldr	r0, [r4, #16]
   150b4:	and	r0, r0, #61440	; 0xf000
   150b8:	cmp	r0, #16384	; 0x4000
   150bc:	bne	150e4 <__assert_fail@plt+0x37f8>
   150c0:	sub	r0, fp, #136	; 0x88
   150c4:	mov	r1, r4
   150c8:	mov	r2, #104	; 0x68
   150cc:	bl	11574 <memcpy@plt>
   150d0:	mov	r0, r5
   150d4:	bl	115f8 <chdir@plt>
   150d8:	cmn	r0, #1
   150dc:	bgt	15148 <__assert_fail@plt+0x385c>
   150e0:	b	15204 <__assert_fail@plt+0x3918>
   150e4:	mov	r0, r5
   150e8:	bl	15e4c <__assert_fail@plt+0x4560>
   150ec:	mov	r4, r0
   150f0:	bl	11718 <strlen@plt>
   150f4:	add	r1, r0, #8
   150f8:	bic	r1, r1, #7
   150fc:	sub	r5, sp, r1
   15100:	mov	sp, r5
   15104:	add	r2, r0, #1
   15108:	mov	r0, r5
   1510c:	mov	r1, r4
   15110:	bl	11574 <memcpy@plt>
   15114:	mov	r0, r4
   15118:	bl	16008 <__assert_fail@plt+0x471c>
   1511c:	mov	r0, r5
   15120:	bl	115f8 <chdir@plt>
   15124:	cmn	r0, #1
   15128:	ble	15204 <__assert_fail@plt+0x3918>
   1512c:	movw	r1, #65475	; 0xffc3
   15130:	sub	r2, fp, #136	; 0x88
   15134:	mov	r0, #3
   15138:	movt	r1, #1
   1513c:	bl	11898 <__xstat64@plt>
   15140:	cmn	r0, #1
   15144:	ble	15258 <__assert_fail@plt+0x396c>
   15148:	movw	r1, #65474	; 0xffc2
   1514c:	sub	r4, fp, #240	; 0xf0
   15150:	mov	r0, #3
   15154:	movt	r1, #1
   15158:	mov	r2, r4
   1515c:	bl	11898 <__xstat64@plt>
   15160:	cmp	r0, #0
   15164:	blt	151ec <__assert_fail@plt+0x3900>
   15168:	movw	r6, #65474	; 0xffc2
   1516c:	sub	r8, fp, #136	; 0x88
   15170:	add	r5, r4, #96	; 0x60
   15174:	add	r7, r8, #96	; 0x60
   15178:	movt	r6, #1
   1517c:	ldr	r0, [fp, #-136]	; 0xffffff78
   15180:	ldr	r2, [fp, #-240]	; 0xffffff10
   15184:	ldr	r1, [fp, #-132]	; 0xffffff7c
   15188:	ldr	r3, [fp, #-236]	; 0xffffff14
   1518c:	eor	r1, r3, r1
   15190:	eor	r0, r2, r0
   15194:	orrs	r0, r0, r1
   15198:	bne	1524c <__assert_fail@plt+0x3960>
   1519c:	ldrd	r0, [r7]
   151a0:	ldrd	r2, [r5]
   151a4:	eor	r1, r3, r1
   151a8:	eor	r0, r2, r0
   151ac:	orrs	r0, r0, r1
   151b0:	beq	1524c <__assert_fail@plt+0x3960>
   151b4:	mov	r0, r6
   151b8:	bl	115f8 <chdir@plt>
   151bc:	cmn	r0, #1
   151c0:	ble	1529c <__assert_fail@plt+0x39b0>
   151c4:	mov	r0, r8
   151c8:	mov	r1, r4
   151cc:	mov	r2, #104	; 0x68
   151d0:	bl	11574 <memcpy@plt>
   151d4:	mov	r0, #3
   151d8:	mov	r1, r6
   151dc:	mov	r2, r4
   151e0:	bl	11898 <__xstat64@plt>
   151e4:	cmp	r0, #0
   151e8:	bge	1517c <__assert_fail@plt+0x3890>
   151ec:	bl	11748 <__errno_location@plt>
   151f0:	ldr	r5, [r0]
   151f4:	movw	r1, #65477	; 0xffc5
   151f8:	mov	r4, #0
   151fc:	movt	r1, #1
   15200:	b	152b0 <__assert_fail@plt+0x39c4>
   15204:	bl	11748 <__errno_location@plt>
   15208:	ldr	r6, [r0]
   1520c:	movw	r1, #65405	; 0xff7d
   15210:	mov	r0, #0
   15214:	mov	r2, #5
   15218:	mov	r4, #0
   1521c:	movt	r1, #1
   15220:	bl	115b0 <dcgettext@plt>
   15224:	mov	r7, r0
   15228:	mov	r0, #4
   1522c:	mov	r1, r5
   15230:	bl	1ac34 <__assert_fail@plt+0x9348>
   15234:	mov	r3, r0
   15238:	mov	r0, #0
   1523c:	mov	r1, r6
   15240:	mov	r2, r7
   15244:	bl	1167c <error@plt>
   15248:	b	1530c <__assert_fail@plt+0x3a20>
   1524c:	bl	1c10c <__assert_fail@plt+0xa820>
   15250:	mov	r4, r0
   15254:	b	152e4 <__assert_fail@plt+0x39f8>
   15258:	bl	11748 <__errno_location@plt>
   1525c:	ldr	r6, [r0]
   15260:	movw	r1, #65435	; 0xff9b
   15264:	mov	r0, #0
   15268:	mov	r2, #5
   1526c:	mov	r4, #0
   15270:	movt	r1, #1
   15274:	bl	115b0 <dcgettext@plt>
   15278:	mov	r7, r0
   1527c:	mov	r0, #4
   15280:	mov	r1, r5
   15284:	bl	1ac34 <__assert_fail@plt+0x9348>
   15288:	mov	r3, r0
   1528c:	mov	r0, #0
   15290:	mov	r1, r6
   15294:	mov	r2, r7
   15298:	b	152e0 <__assert_fail@plt+0x39f4>
   1529c:	bl	11748 <__errno_location@plt>
   152a0:	ldr	r5, [r0]
   152a4:	movw	r1, #65405	; 0xff7d
   152a8:	mov	r4, #0
   152ac:	movt	r1, #1
   152b0:	mov	r0, #0
   152b4:	mov	r2, #5
   152b8:	bl	115b0 <dcgettext@plt>
   152bc:	movw	r1, #65474	; 0xffc2
   152c0:	mov	r6, r0
   152c4:	mov	r0, #4
   152c8:	movt	r1, #1
   152cc:	bl	1ac34 <__assert_fail@plt+0x9348>
   152d0:	mov	r3, r0
   152d4:	mov	r0, #0
   152d8:	mov	r1, r5
   152dc:	mov	r2, r6
   152e0:	bl	1167c <error@plt>
   152e4:	bl	11748 <__errno_location@plt>
   152e8:	ldr	r6, [r0]
   152ec:	mov	r5, r0
   152f0:	sub	r0, fp, #32
   152f4:	bl	1b2f0 <__assert_fail@plt+0x9a04>
   152f8:	cmp	r0, #0
   152fc:	bne	15318 <__assert_fail@plt+0x3a2c>
   15300:	sub	r0, fp, #32
   15304:	bl	1b30c <__assert_fail@plt+0x9a20>
   15308:	str	r6, [r5]
   1530c:	mov	r0, r4
   15310:	sub	sp, fp, #24
   15314:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   15318:	ldr	r4, [r5]
   1531c:	movw	r1, #65492	; 0xffd4
   15320:	mov	r0, #0
   15324:	mov	r2, #5
   15328:	movt	r1, #1
   1532c:	bl	115b0 <dcgettext@plt>
   15330:	mov	r2, r0
   15334:	mov	r0, #1
   15338:	mov	r1, r4
   1533c:	bl	1167c <error@plt>
   15340:	sub	r2, r0, #65	; 0x41
   15344:	mov	r1, r0
   15348:	mov	r0, #1
   1534c:	cmp	r2, #26
   15350:	subcs	r2, r1, #97	; 0x61
   15354:	cmpcs	r2, #26
   15358:	bcs	15360 <__assert_fail@plt+0x3a74>
   1535c:	bx	lr
   15360:	sub	r1, r1, #48	; 0x30
   15364:	cmp	r1, #10
   15368:	movcs	r0, #0
   1536c:	bx	lr
   15370:	sub	r2, r0, #65	; 0x41
   15374:	mov	r1, r0
   15378:	mov	r0, #1
   1537c:	cmp	r2, #26
   15380:	subcs	r1, r1, #97	; 0x61
   15384:	cmpcs	r1, #26
   15388:	movcs	r0, #0
   1538c:	bx	lr
   15390:	mov	r1, #0
   15394:	cmp	r0, #128	; 0x80
   15398:	movwcc	r1, #1
   1539c:	mov	r0, r1
   153a0:	bx	lr
   153a4:	sub	r1, r0, #9
   153a8:	sub	r0, r0, #32
   153ac:	clz	r1, r1
   153b0:	clz	r0, r0
   153b4:	lsr	r1, r1, #5
   153b8:	lsr	r0, r0, #5
   153bc:	orr	r0, r0, r1
   153c0:	bx	lr
   153c4:	mov	r1, r0
   153c8:	mov	r0, #1
   153cc:	cmp	r1, #32
   153d0:	bxcc	lr
   153d4:	cmp	r1, #127	; 0x7f
   153d8:	movne	r0, #0
   153dc:	bx	lr
   153e0:	sub	r1, r0, #48	; 0x30
   153e4:	mov	r0, #0
   153e8:	cmp	r1, #10
   153ec:	movwcc	r0, #1
   153f0:	bx	lr
   153f4:	sub	r1, r0, #33	; 0x21
   153f8:	mov	r0, #0
   153fc:	cmp	r1, #94	; 0x5e
   15400:	movwcc	r0, #1
   15404:	bx	lr
   15408:	sub	r1, r0, #97	; 0x61
   1540c:	mov	r0, #0
   15410:	cmp	r1, #26
   15414:	movwcc	r0, #1
   15418:	bx	lr
   1541c:	sub	r1, r0, #32
   15420:	mov	r0, #0
   15424:	cmp	r1, #95	; 0x5f
   15428:	movwcc	r0, #1
   1542c:	bx	lr
   15430:	sub	r1, r0, #33	; 0x21
   15434:	cmp	r1, #93	; 0x5d
   15438:	bhi	155c4 <__assert_fail@plt+0x3cd8>
   1543c:	add	r2, pc, #4
   15440:	mov	r0, #1
   15444:	ldr	pc, [r2, r1, lsl #2]
   15448:	andeq	r5, r1, r0, asr #11
   1544c:	andeq	r5, r1, r0, asr #11
   15450:	andeq	r5, r1, r0, asr #11
   15454:	andeq	r5, r1, r0, asr #11
   15458:	andeq	r5, r1, r0, asr #11
   1545c:	andeq	r5, r1, r0, asr #11
   15460:	andeq	r5, r1, r0, asr #11
   15464:	andeq	r5, r1, r0, asr #11
   15468:	andeq	r5, r1, r0, asr #11
   1546c:	andeq	r5, r1, r0, asr #11
   15470:	andeq	r5, r1, r0, asr #11
   15474:	andeq	r5, r1, r0, asr #11
   15478:	andeq	r5, r1, r0, asr #11
   1547c:	andeq	r5, r1, r0, asr #11
   15480:	andeq	r5, r1, r0, asr #11
   15484:	andeq	r5, r1, r4, asr #11
   15488:	andeq	r5, r1, r4, asr #11
   1548c:	andeq	r5, r1, r4, asr #11
   15490:	andeq	r5, r1, r4, asr #11
   15494:	andeq	r5, r1, r4, asr #11
   15498:	andeq	r5, r1, r4, asr #11
   1549c:	andeq	r5, r1, r4, asr #11
   154a0:	andeq	r5, r1, r4, asr #11
   154a4:	andeq	r5, r1, r4, asr #11
   154a8:	andeq	r5, r1, r4, asr #11
   154ac:	andeq	r5, r1, r0, asr #11
   154b0:	andeq	r5, r1, r0, asr #11
   154b4:	andeq	r5, r1, r0, asr #11
   154b8:	andeq	r5, r1, r0, asr #11
   154bc:	andeq	r5, r1, r0, asr #11
   154c0:	andeq	r5, r1, r0, asr #11
   154c4:	andeq	r5, r1, r0, asr #11
   154c8:	andeq	r5, r1, r4, asr #11
   154cc:	andeq	r5, r1, r4, asr #11
   154d0:	andeq	r5, r1, r4, asr #11
   154d4:	andeq	r5, r1, r4, asr #11
   154d8:	andeq	r5, r1, r4, asr #11
   154dc:	andeq	r5, r1, r4, asr #11
   154e0:	andeq	r5, r1, r4, asr #11
   154e4:	andeq	r5, r1, r4, asr #11
   154e8:	andeq	r5, r1, r4, asr #11
   154ec:	andeq	r5, r1, r4, asr #11
   154f0:	andeq	r5, r1, r4, asr #11
   154f4:	andeq	r5, r1, r4, asr #11
   154f8:	andeq	r5, r1, r4, asr #11
   154fc:	andeq	r5, r1, r4, asr #11
   15500:	andeq	r5, r1, r4, asr #11
   15504:	andeq	r5, r1, r4, asr #11
   15508:	andeq	r5, r1, r4, asr #11
   1550c:	andeq	r5, r1, r4, asr #11
   15510:	andeq	r5, r1, r4, asr #11
   15514:	andeq	r5, r1, r4, asr #11
   15518:	andeq	r5, r1, r4, asr #11
   1551c:	andeq	r5, r1, r4, asr #11
   15520:	andeq	r5, r1, r4, asr #11
   15524:	andeq	r5, r1, r4, asr #11
   15528:	andeq	r5, r1, r4, asr #11
   1552c:	andeq	r5, r1, r4, asr #11
   15530:	andeq	r5, r1, r0, asr #11
   15534:	andeq	r5, r1, r0, asr #11
   15538:	andeq	r5, r1, r0, asr #11
   1553c:	andeq	r5, r1, r0, asr #11
   15540:	andeq	r5, r1, r0, asr #11
   15544:	andeq	r5, r1, r0, asr #11
   15548:	andeq	r5, r1, r4, asr #11
   1554c:	andeq	r5, r1, r4, asr #11
   15550:	andeq	r5, r1, r4, asr #11
   15554:	andeq	r5, r1, r4, asr #11
   15558:	andeq	r5, r1, r4, asr #11
   1555c:	andeq	r5, r1, r4, asr #11
   15560:	andeq	r5, r1, r4, asr #11
   15564:	andeq	r5, r1, r4, asr #11
   15568:	andeq	r5, r1, r4, asr #11
   1556c:	andeq	r5, r1, r4, asr #11
   15570:	andeq	r5, r1, r4, asr #11
   15574:	andeq	r5, r1, r4, asr #11
   15578:	andeq	r5, r1, r4, asr #11
   1557c:	andeq	r5, r1, r4, asr #11
   15580:	andeq	r5, r1, r4, asr #11
   15584:	andeq	r5, r1, r4, asr #11
   15588:	andeq	r5, r1, r4, asr #11
   1558c:	andeq	r5, r1, r4, asr #11
   15590:	andeq	r5, r1, r4, asr #11
   15594:	andeq	r5, r1, r4, asr #11
   15598:	andeq	r5, r1, r4, asr #11
   1559c:	andeq	r5, r1, r4, asr #11
   155a0:	andeq	r5, r1, r4, asr #11
   155a4:	andeq	r5, r1, r4, asr #11
   155a8:	andeq	r5, r1, r4, asr #11
   155ac:	andeq	r5, r1, r4, asr #11
   155b0:	andeq	r5, r1, r0, asr #11
   155b4:	andeq	r5, r1, r0, asr #11
   155b8:	andeq	r5, r1, r0, asr #11
   155bc:	andeq	r5, r1, r0, asr #11
   155c0:	bx	lr
   155c4:	mov	r0, #0
   155c8:	bx	lr
   155cc:	sub	r0, r0, #9
   155d0:	cmp	r0, #23
   155d4:	movhi	r0, #0
   155d8:	bxhi	lr
   155dc:	movw	r1, #31
   155e0:	bic	r0, r0, #-16777216	; 0xff000000
   155e4:	mov	r2, #1
   155e8:	movt	r1, #128	; 0x80
   155ec:	and	r0, r2, r1, lsr r0
   155f0:	bx	lr
   155f4:	sub	r1, r0, #65	; 0x41
   155f8:	mov	r0, #0
   155fc:	cmp	r1, #26
   15600:	movwcc	r0, #1
   15604:	bx	lr
   15608:	sub	r2, r0, #48	; 0x30
   1560c:	mov	r1, r0
   15610:	mov	r0, #1
   15614:	cmp	r2, #22
   15618:	bhi	15630 <__assert_fail@plt+0x3d44>
   1561c:	movw	r3, #1023	; 0x3ff
   15620:	mov	ip, #1
   15624:	movt	r3, #126	; 0x7e
   15628:	tst	r3, ip, lsl r2
   1562c:	bxne	lr
   15630:	sub	r1, r1, #97	; 0x61
   15634:	cmp	r1, #6
   15638:	movcs	r0, #0
   1563c:	bxcs	lr
   15640:	bx	lr
   15644:	sub	r1, r0, #65	; 0x41
   15648:	cmp	r1, #26
   1564c:	addcc	r0, r0, #32
   15650:	bx	lr
   15654:	sub	r1, r0, #97	; 0x61
   15658:	cmp	r1, #26
   1565c:	subcc	r0, r0, #32
   15660:	bx	lr
   15664:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15668:	add	fp, sp, #28
   1566c:	sub	sp, sp, #180	; 0xb4
   15670:	sub	sp, sp, #3072	; 0xc00
   15674:	mov	r8, r0
   15678:	and	r7, r1, #3
   1567c:	sub	r0, r1, #1
   15680:	tst	r0, r7
   15684:	beq	156a4 <__assert_fail@plt+0x3db8>
   15688:	bl	11748 <__errno_location@plt>
   1568c:	mov	r1, #22
   15690:	mov	r4, #0
   15694:	str	r1, [r0]
   15698:	mov	r0, r4
   1569c:	sub	sp, fp, #28
   156a0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   156a4:	cmp	r8, #0
   156a8:	beq	15688 <__assert_fail@plt+0x3d9c>
   156ac:	ldrb	r0, [r8]
   156b0:	cmp	r0, #0
   156b4:	beq	1572c <__assert_fail@plt+0x3e40>
   156b8:	sub	lr, fp, #1024	; 0x400
   156bc:	mov	r4, r1
   156c0:	mov	r1, #1024	; 0x400
   156c4:	cmp	r0, #47	; 0x2f
   156c8:	sub	r2, lr, #40	; 0x28
   156cc:	str	r1, [fp, #-1060]	; 0xfffffbdc
   156d0:	add	r2, r2, #8
   156d4:	str	r2, [sp, #12]
   156d8:	str	r2, [fp, #-1064]	; 0xfffffbd8
   156dc:	add	r2, sp, #1184	; 0x4a0
   156e0:	add	r2, r2, #8
   156e4:	str	r2, [sp, #1184]	; 0x4a0
   156e8:	str	r2, [sp, #16]
   156ec:	add	r2, sp, #48	; 0x30
   156f0:	str	r1, [sp, #1188]	; 0x4a4
   156f4:	add	r5, r2, #8
   156f8:	mov	r0, r5
   156fc:	str	r5, [sp, #48]	; 0x30
   15700:	str	r1, [sp, #52]	; 0x34
   15704:	str	r5, [sp, #8]
   15708:	bne	15738 <__assert_fail@plt+0x3e4c>
   1570c:	mov	r1, r8
   15710:	mov	r2, #0
   15714:	mov	r3, #1024	; 0x400
   15718:	bl	118e0 <__mempcpy_chk@plt>
   1571c:	mov	r6, r0
   15720:	mov	r0, #47	; 0x2f
   15724:	strb	r0, [r6], #1
   15728:	b	15758 <__assert_fail@plt+0x3e6c>
   1572c:	bl	11748 <__errno_location@plt>
   15730:	mov	r1, #2
   15734:	b	15690 <__assert_fail@plt+0x3da4>
   15738:	mov	r1, #1024	; 0x400
   1573c:	bl	11700 <getcwd@plt>
   15740:	cmp	r0, #0
   15744:	beq	15c68 <__assert_fail@plt+0x437c>
   15748:	mov	r0, r5
   1574c:	mov	r1, #0
   15750:	bl	115ec <rawmemchr@plt>
   15754:	mov	r6, r0
   15758:	ldrb	r0, [r8]
   1575c:	cmp	r0, #0
   15760:	beq	15c2c <__assert_fail@plt+0x4340>
   15764:	and	r1, r4, #4
   15768:	add	r9, sp, #48	; 0x30
   1576c:	str	r7, [sp, #32]
   15770:	str	r1, [sp, #40]	; 0x28
   15774:	mov	r1, #0
   15778:	str	r1, [sp, #24]
   1577c:	mov	r1, #0
   15780:	str	r1, [sp, #36]	; 0x24
   15784:	mov	r1, #0
   15788:	str	r1, [sp, #20]
   1578c:	b	15bd4 <__assert_fail@plt+0x42e8>
   15790:	uxtb	r0, r0
   15794:	cmp	r0, #46	; 0x2e
   15798:	ldrbeq	r0, [r8, #1]
   1579c:	cmpeq	r0, #46	; 0x2e
   157a0:	bne	157e0 <__assert_fail@plt+0x3ef4>
   157a4:	add	r0, r5, #1
   157a8:	cmp	r6, r0
   157ac:	bls	158d4 <__assert_fail@plt+0x3fe8>
   157b0:	sub	r0, r6, #1
   157b4:	mov	r6, r0
   157b8:	cmp	r0, r5
   157bc:	bls	158d4 <__assert_fail@plt+0x3fe8>
   157c0:	mov	r0, r6
   157c4:	ldrb	r1, [r0, #-1]!
   157c8:	cmp	r1, #47	; 0x2f
   157cc:	bne	157b4 <__assert_fail@plt+0x3ec8>
   157d0:	b	158d4 <__assert_fail@plt+0x3fe8>
   157d4:	uxtb	r0, r0
   157d8:	cmp	r0, #46	; 0x2e
   157dc:	beq	158d4 <__assert_fail@plt+0x3fe8>
   157e0:	ldrb	r0, [r6, #-1]
   157e4:	add	r4, r2, #2
   157e8:	str	r2, [sp, #44]	; 0x2c
   157ec:	cmp	r0, #47	; 0x2f
   157f0:	movne	r0, #47	; 0x2f
   157f4:	strbne	r0, [r6], #1
   157f8:	ldr	r0, [sp, #52]	; 0x34
   157fc:	add	r0, r5, r0
   15800:	sub	r0, r0, r6
   15804:	cmp	r0, r4
   15808:	bcs	15840 <__assert_fail@plt+0x3f54>
   1580c:	mov	r0, r9
   15810:	bl	1b40c <__assert_fail@plt+0x9b20>
   15814:	cmp	r0, #0
   15818:	beq	15d2c <__assert_fail@plt+0x4440>
   1581c:	sub	r0, r6, r5
   15820:	ldr	r5, [sp, #48]	; 0x30
   15824:	ldr	r1, [sp, #52]	; 0x34
   15828:	add	r6, r5, r0
   1582c:	add	r0, r5, r1
   15830:	sub	r0, r0, r6
   15834:	cmp	r0, r4
   15838:	bcc	1580c <__assert_fail@plt+0x3f20>
   1583c:	ldr	r2, [sp, #44]	; 0x2c
   15840:	mov	r0, r6
   15844:	mov	r1, r8
   15848:	mvn	r3, #0
   1584c:	bl	118e0 <__mempcpy_chk@plt>
   15850:	mov	r6, r0
   15854:	mov	r0, #0
   15858:	strb	r0, [r6]
   1585c:	ldr	r0, [sp, #40]	; 0x28
   15860:	cmp	r0, #0
   15864:	bne	158c8 <__assert_fail@plt+0x3fdc>
   15868:	ldr	r0, [sp, #1188]	; 0x4a4
   1586c:	ldr	r7, [sp, #1184]	; 0x4a0
   15870:	sub	r9, r0, #1
   15874:	mov	r0, r5
   15878:	mov	r1, r7
   1587c:	mov	r2, r9
   15880:	bl	1161c <readlink@plt>
   15884:	cmp	r0, r9
   15888:	blt	158a0 <__assert_fail@plt+0x3fb4>
   1588c:	add	r0, sp, #1184	; 0x4a0
   15890:	bl	1b39c <__assert_fail@plt+0x9ab0>
   15894:	cmp	r0, #0
   15898:	bne	15868 <__assert_fail@plt+0x3f7c>
   1589c:	b	15d2c <__assert_fail@plt+0x4440>
   158a0:	mov	r4, r0
   158a4:	cmp	r0, #0
   158a8:	add	r9, sp, #48	; 0x30
   158ac:	blt	158c8 <__assert_fail@plt+0x3fdc>
   158b0:	ldr	r0, [sp, #24]
   158b4:	cmp	r0, #19
   158b8:	bgt	1595c <__assert_fail@plt+0x4070>
   158bc:	add	r0, r0, #1
   158c0:	str	r0, [sp, #24]
   158c4:	b	15ac4 <__assert_fail@plt+0x41d8>
   158c8:	ldr	r7, [sp, #32]
   158cc:	cmp	r7, #2
   158d0:	bne	158e8 <__assert_fail@plt+0x3ffc>
   158d4:	mov	r8, sl
   158d8:	ldrb	r0, [r8]
   158dc:	cmp	r0, #0
   158e0:	bne	15bd4 <__assert_fail@plt+0x42e8>
   158e4:	b	15c34 <__assert_fail@plt+0x4348>
   158e8:	ldrb	r0, [sl]
   158ec:	cmp	r0, #47	; 0x2f
   158f0:	bne	15a2c <__assert_fail@plt+0x4140>
   158f4:	mov	r2, sl
   158f8:	mov	r1, r2
   158fc:	ldrb	r3, [r2, #1]!
   15900:	cmp	r3, #47	; 0x2f
   15904:	beq	158f8 <__assert_fail@plt+0x400c>
   15908:	cmp	r3, #46	; 0x2e
   1590c:	bne	15a24 <__assert_fail@plt+0x4138>
   15910:	add	r2, r1, #2
   15914:	ldrb	r3, [r2]
   15918:	cmp	r3, #47	; 0x2f
   1591c:	beq	158f8 <__assert_fail@plt+0x400c>
   15920:	cmp	r3, #0
   15924:	beq	15940 <__assert_fail@plt+0x4054>
   15928:	cmp	r3, #46	; 0x2e
   1592c:	bne	15a2c <__assert_fail@plt+0x4140>
   15930:	ldrb	r1, [r1, #3]
   15934:	cmp	r1, #47	; 0x2f
   15938:	cmpne	r1, #0
   1593c:	bne	15a2c <__assert_fail@plt+0x4140>
   15940:	mov	r0, #47	; 0x2f
   15944:	mov	r1, r5
   15948:	mov	r2, #0
   1594c:	mov	r3, #512	; 0x200
   15950:	strh	r0, [r6]
   15954:	mvn	r0, #99	; 0x63
   15958:	b	15a50 <__assert_fail@plt+0x4164>
   1595c:	ldrb	r0, [r8]
   15960:	cmp	r0, #0
   15964:	beq	15ac4 <__assert_fail@plt+0x41d8>
   15968:	ldr	r9, [sp, #44]	; 0x2c
   1596c:	mov	r0, #0
   15970:	add	lr, sp, #1024	; 0x400
   15974:	mov	r1, r5
   15978:	add	r2, lr, #56	; 0x38
   1597c:	strb	r0, [r6, -r9]
   15980:	ldrb	r0, [r5]
   15984:	cmp	r0, #0
   15988:	movw	r0, #65475	; 0xffc3
   1598c:	movt	r0, #1
   15990:	moveq	r1, r0
   15994:	mov	r0, #3
   15998:	bl	11898 <__xstat64@plt>
   1599c:	cmp	r0, #0
   159a0:	bne	15d3c <__assert_fail@plt+0x4450>
   159a4:	rsb	r0, r9, #0
   159a8:	ldr	r9, [sp, #20]
   159ac:	ldrb	r1, [r8]
   159b0:	cmp	r9, #0
   159b4:	strb	r1, [r6, r0]
   159b8:	bne	159f0 <__assert_fail@plt+0x4104>
   159bc:	movw	r0, #29816	; 0x7478
   159c0:	movw	r2, #29672	; 0x73e8
   159c4:	movw	r3, #29728	; 0x7420
   159c8:	mov	r1, #0
   159cc:	movt	r0, #1
   159d0:	movt	r2, #1
   159d4:	movt	r3, #1
   159d8:	str	r0, [sp]
   159dc:	mov	r0, #7
   159e0:	bl	165c0 <__assert_fail@plt+0x4cd4>
   159e4:	mov	r9, r0
   159e8:	cmp	r0, #0
   159ec:	beq	15d2c <__assert_fail@plt+0x4440>
   159f0:	add	lr, sp, #1024	; 0x400
   159f4:	mov	r0, r9
   159f8:	mov	r1, r8
   159fc:	add	r2, lr, #56	; 0x38
   15a00:	bl	15fbc <__assert_fail@plt+0x46d0>
   15a04:	cmp	r0, #0
   15a08:	str	r9, [sp, #20]
   15a0c:	beq	15ab0 <__assert_fail@plt+0x41c4>
   15a10:	ldr	r7, [sp, #32]
   15a14:	cmp	r7, #2
   15a18:	bne	15d30 <__assert_fail@plt+0x4444>
   15a1c:	mov	r8, sl
   15a20:	b	15b90 <__assert_fail@plt+0x42a4>
   15a24:	cmp	r3, #0
   15a28:	beq	15940 <__assert_fail@plt+0x4054>
   15a2c:	ldr	r1, [sp, #40]	; 0x28
   15a30:	cmp	r1, #0
   15a34:	beq	15a60 <__assert_fail@plt+0x4174>
   15a38:	cmp	r0, #0
   15a3c:	bne	158d4 <__assert_fail@plt+0x3fe8>
   15a40:	mvn	r0, #99	; 0x63
   15a44:	mov	r1, r5
   15a48:	mov	r2, #0
   15a4c:	mov	r3, #512	; 0x200
   15a50:	bl	1155c <faccessat@plt>
   15a54:	cmp	r0, #0
   15a58:	bne	15a70 <__assert_fail@plt+0x4184>
   15a5c:	b	158d4 <__assert_fail@plt+0x3fe8>
   15a60:	bl	11748 <__errno_location@plt>
   15a64:	ldr	r0, [r0]
   15a68:	cmp	r0, #22
   15a6c:	beq	158d4 <__assert_fail@plt+0x3fe8>
   15a70:	mov	r4, #1
   15a74:	cmp	r7, #1
   15a78:	bne	15c54 <__assert_fail@plt+0x4368>
   15a7c:	bl	11748 <__errno_location@plt>
   15a80:	ldr	r0, [r0]
   15a84:	cmp	r0, #2
   15a88:	bne	15c54 <__assert_fail@plt+0x4368>
   15a8c:	movw	r1, #1459	; 0x5b3
   15a90:	mov	r0, sl
   15a94:	movt	r1, #2
   15a98:	bl	118d4 <strspn@plt>
   15a9c:	ldrb	r0, [sl, r0]
   15aa0:	mov	r8, sl
   15aa4:	cmp	r0, #0
   15aa8:	beq	158d8 <__assert_fail@plt+0x3fec>
   15aac:	b	15c54 <__assert_fail@plt+0x4368>
   15ab0:	add	lr, sp, #1024	; 0x400
   15ab4:	mov	r0, r9
   15ab8:	mov	r1, r8
   15abc:	add	r2, lr, #56	; 0x38
   15ac0:	bl	15f40 <__assert_fail@plt+0x4654>
   15ac4:	mov	r0, #0
   15ac8:	strb	r0, [r7, r4]
   15acc:	ldr	r0, [sp, #36]	; 0x24
   15ad0:	ldr	r8, [fp, #-1064]	; 0xfffffbd8
   15ad4:	tst	r0, #1
   15ad8:	ldr	r0, [sp, #28]
   15adc:	subne	r0, sl, r8
   15ae0:	str	r0, [sp, #28]
   15ae4:	mov	r0, sl
   15ae8:	bl	11718 <strlen@plt>
   15aec:	adds	r9, r0, r4
   15af0:	str	r0, [sp, #44]	; 0x2c
   15af4:	bcs	15d2c <__assert_fail@plt+0x4440>
   15af8:	ldr	r0, [fp, #-1060]	; 0xfffffbdc
   15afc:	cmp	r0, r9
   15b00:	bhi	15b28 <__assert_fail@plt+0x423c>
   15b04:	sub	lr, fp, #1024	; 0x400
   15b08:	sub	r0, lr, #40	; 0x28
   15b0c:	bl	1b40c <__assert_fail@plt+0x9b20>
   15b10:	cmp	r0, #0
   15b14:	beq	15d2c <__assert_fail@plt+0x4440>
   15b18:	ldr	r0, [fp, #-1060]	; 0xfffffbdc
   15b1c:	cmp	r0, r9
   15b20:	bls	15b04 <__assert_fail@plt+0x4218>
   15b24:	ldr	r8, [fp, #-1064]	; 0xfffffbd8
   15b28:	ldr	r0, [sp, #36]	; 0x24
   15b2c:	ldr	r1, [sp, #44]	; 0x2c
   15b30:	tst	r0, #1
   15b34:	ldr	r0, [sp, #28]
   15b38:	add	r2, r1, #1
   15b3c:	addne	sl, r8, r0
   15b40:	add	r0, r8, r4
   15b44:	mov	r1, sl
   15b48:	bl	11544 <memmove@plt>
   15b4c:	mov	r0, r8
   15b50:	mov	r1, r7
   15b54:	mov	r2, r4
   15b58:	bl	11574 <memcpy@plt>
   15b5c:	ldrb	r0, [r7]
   15b60:	cmp	r0, #47	; 0x2f
   15b64:	bne	15b98 <__assert_fail@plt+0x42ac>
   15b68:	mov	r0, r5
   15b6c:	mov	r1, r7
   15b70:	mov	r2, #0
   15b74:	mvn	r3, #0
   15b78:	bl	118e0 <__mempcpy_chk@plt>
   15b7c:	mov	r6, r0
   15b80:	mov	r0, #47	; 0x2f
   15b84:	strb	r0, [r6], #1
   15b88:	mov	r0, #1
   15b8c:	str	r0, [sp, #36]	; 0x24
   15b90:	add	r9, sp, #48	; 0x30
   15b94:	b	158d8 <__assert_fail@plt+0x3fec>
   15b98:	add	r0, r5, #1
   15b9c:	mov	r1, #1
   15ba0:	add	r9, sp, #48	; 0x30
   15ba4:	cmp	r6, r0
   15ba8:	str	r1, [sp, #36]	; 0x24
   15bac:	bls	158d8 <__assert_fail@plt+0x3fec>
   15bb0:	sub	r0, r6, #1
   15bb4:	mov	r6, r0
   15bb8:	cmp	r0, r5
   15bbc:	bls	158d8 <__assert_fail@plt+0x3fec>
   15bc0:	mov	r0, r6
   15bc4:	ldrb	r1, [r0, #-1]!
   15bc8:	cmp	r1, #47	; 0x2f
   15bcc:	bne	15bb4 <__assert_fail@plt+0x42c8>
   15bd0:	b	158d8 <__assert_fail@plt+0x3fec>
   15bd4:	uxtb	r1, r0
   15bd8:	cmp	r1, #47	; 0x2f
   15bdc:	bne	15bec <__assert_fail@plt+0x4300>
   15be0:	ldrb	r0, [r8, #1]!
   15be4:	cmp	r0, #47	; 0x2f
   15be8:	beq	15be0 <__assert_fail@plt+0x42f4>
   15bec:	mov	r1, r0
   15bf0:	mov	sl, r8
   15bf4:	b	15bfc <__assert_fail@plt+0x4310>
   15bf8:	ldrb	r1, [sl, #1]!
   15bfc:	uxtb	r1, r1
   15c00:	cmp	r1, #0
   15c04:	cmpne	r1, #47	; 0x2f
   15c08:	bne	15bf8 <__assert_fail@plt+0x430c>
   15c0c:	sub	r2, sl, r8
   15c10:	cmp	r2, #1
   15c14:	beq	157d4 <__assert_fail@plt+0x3ee8>
   15c18:	cmp	r2, #2
   15c1c:	beq	15790 <__assert_fail@plt+0x3ea4>
   15c20:	cmp	r2, #0
   15c24:	bne	157e0 <__assert_fail@plt+0x3ef4>
   15c28:	b	15c34 <__assert_fail@plt+0x4348>
   15c2c:	mov	r0, #0
   15c30:	str	r0, [sp, #20]
   15c34:	add	r0, r5, #1
   15c38:	cmp	r6, r0
   15c3c:	bls	15c50 <__assert_fail@plt+0x4364>
   15c40:	mov	r0, r6
   15c44:	ldrb	r1, [r0, #-1]!
   15c48:	cmp	r1, #47	; 0x2f
   15c4c:	moveq	r6, r0
   15c50:	mov	r4, #0
   15c54:	ldr	r0, [sp, #20]
   15c58:	cmp	r0, #0
   15c5c:	beq	15cc0 <__assert_fail@plt+0x43d4>
   15c60:	bl	168b8 <__assert_fail@plt+0x4fcc>
   15c64:	b	15cc0 <__assert_fail@plt+0x43d4>
   15c68:	bl	11748 <__errno_location@plt>
   15c6c:	ldr	r5, [sp, #8]
   15c70:	mov	r6, r0
   15c74:	add	r9, sp, #48	; 0x30
   15c78:	ldr	r0, [r6]
   15c7c:	cmp	r0, #34	; 0x22
   15c80:	bne	15cb0 <__assert_fail@plt+0x43c4>
   15c84:	mov	r0, r9
   15c88:	bl	1b39c <__assert_fail@plt+0x9ab0>
   15c8c:	cmp	r0, #0
   15c90:	beq	15d2c <__assert_fail@plt+0x4440>
   15c94:	ldr	r5, [sp, #48]	; 0x30
   15c98:	ldr	r1, [sp, #52]	; 0x34
   15c9c:	mov	r0, r5
   15ca0:	bl	11700 <getcwd@plt>
   15ca4:	cmp	r0, #0
   15ca8:	beq	15c78 <__assert_fail@plt+0x438c>
   15cac:	b	15748 <__assert_fail@plt+0x3e5c>
   15cb0:	cmp	r0, #12
   15cb4:	beq	15d2c <__assert_fail@plt+0x4440>
   15cb8:	mov	r4, #1
   15cbc:	mov	r6, r5
   15cc0:	ldr	r0, [fp, #-1064]	; 0xfffffbd8
   15cc4:	ldr	r1, [sp, #12]
   15cc8:	cmp	r0, r1
   15ccc:	beq	15cd4 <__assert_fail@plt+0x43e8>
   15cd0:	bl	16008 <__assert_fail@plt+0x471c>
   15cd4:	ldr	r0, [sp, #1184]	; 0x4a0
   15cd8:	ldr	r1, [sp, #16]
   15cdc:	cmp	r0, r1
   15ce0:	beq	15ce8 <__assert_fail@plt+0x43fc>
   15ce4:	bl	16008 <__assert_fail@plt+0x471c>
   15ce8:	cmp	r4, #0
   15cec:	beq	15d0c <__assert_fail@plt+0x4420>
   15cf0:	ldr	r0, [sp, #48]	; 0x30
   15cf4:	ldr	r1, [sp, #8]
   15cf8:	mov	r4, #0
   15cfc:	cmp	r0, r1
   15d00:	beq	15698 <__assert_fail@plt+0x3dac>
   15d04:	bl	16008 <__assert_fail@plt+0x471c>
   15d08:	b	15698 <__assert_fail@plt+0x3dac>
   15d0c:	mov	r0, #0
   15d10:	strb	r0, [r6], #1
   15d14:	add	r0, sp, #48	; 0x30
   15d18:	sub	r1, r6, r5
   15d1c:	bl	1b334 <__assert_fail@plt+0x9a48>
   15d20:	mov	r4, r0
   15d24:	cmp	r0, #0
   15d28:	bne	15698 <__assert_fail@plt+0x3dac>
   15d2c:	bl	1c0c8 <__assert_fail@plt+0xa7dc>
   15d30:	bl	11748 <__errno_location@plt>
   15d34:	mov	r1, #40	; 0x28
   15d38:	str	r1, [r0]
   15d3c:	mov	r4, #1
   15d40:	b	15c54 <__assert_fail@plt+0x4368>
   15d44:	movw	r1, #5048	; 0x13b8
   15d48:	movt	r1, #3
   15d4c:	str	r0, [r1]
   15d50:	bx	lr
   15d54:	movw	r1, #5052	; 0x13bc
   15d58:	movt	r1, #3
   15d5c:	strb	r0, [r1]
   15d60:	bx	lr
   15d64:	push	{r4, r5, r6, sl, fp, lr}
   15d68:	add	fp, sp, #16
   15d6c:	sub	sp, sp, #8
   15d70:	movw	r0, #4916	; 0x1334
   15d74:	movt	r0, #3
   15d78:	ldr	r0, [r0]
   15d7c:	bl	1e320 <__assert_fail@plt+0xca34>
   15d80:	cmp	r0, #0
   15d84:	beq	15dac <__assert_fail@plt+0x44c0>
   15d88:	movw	r0, #5052	; 0x13bc
   15d8c:	movt	r0, #3
   15d90:	ldrb	r0, [r0]
   15d94:	cmp	r0, #0
   15d98:	beq	15dcc <__assert_fail@plt+0x44e0>
   15d9c:	bl	11748 <__errno_location@plt>
   15da0:	ldr	r0, [r0]
   15da4:	cmp	r0, #32
   15da8:	bne	15dcc <__assert_fail@plt+0x44e0>
   15dac:	movw	r0, #4912	; 0x1330
   15db0:	movt	r0, #3
   15db4:	ldr	r0, [r0]
   15db8:	bl	1e320 <__assert_fail@plt+0xca34>
   15dbc:	cmp	r0, #0
   15dc0:	subeq	sp, fp, #16
   15dc4:	popeq	{r4, r5, r6, sl, fp, pc}
   15dc8:	b	15e3c <__assert_fail@plt+0x4550>
   15dcc:	movw	r1, #17
   15dd0:	mov	r0, #0
   15dd4:	mov	r2, #5
   15dd8:	movt	r1, #2
   15ddc:	bl	115b0 <dcgettext@plt>
   15de0:	mov	r4, r0
   15de4:	movw	r0, #5048	; 0x13b8
   15de8:	movt	r0, #3
   15dec:	ldr	r6, [r0]
   15df0:	bl	11748 <__errno_location@plt>
   15df4:	ldr	r5, [r0]
   15df8:	cmp	r6, #0
   15dfc:	bne	15e18 <__assert_fail@plt+0x452c>
   15e00:	movw	r2, #1860	; 0x744
   15e04:	mov	r0, #0
   15e08:	mov	r1, r5
   15e0c:	mov	r3, r4
   15e10:	movt	r2, #2
   15e14:	b	15e38 <__assert_fail@plt+0x454c>
   15e18:	mov	r0, r6
   15e1c:	bl	1add4 <__assert_fail@plt+0x94e8>
   15e20:	movw	r2, #29
   15e24:	mov	r3, r0
   15e28:	str	r4, [sp]
   15e2c:	mov	r0, #0
   15e30:	mov	r1, r5
   15e34:	movt	r2, #2
   15e38:	bl	1167c <error@plt>
   15e3c:	movw	r0, #4816	; 0x12d0
   15e40:	movt	r0, #3
   15e44:	ldr	r0, [r0]
   15e48:	bl	11568 <_exit@plt>
   15e4c:	push	{fp, lr}
   15e50:	mov	fp, sp
   15e54:	bl	15eac <__assert_fail@plt+0x45c0>
   15e58:	cmp	r0, #0
   15e5c:	popne	{fp, pc}
   15e60:	bl	1c0c8 <__assert_fail@plt+0xa7dc>
   15e64:	push	{r4, r5, r6, sl, fp, lr}
   15e68:	add	fp, sp, #16
   15e6c:	mov	r5, r0
   15e70:	mov	r4, r0
   15e74:	ldrb	r6, [r5], #-1
   15e78:	bl	1df20 <__assert_fail@plt+0xc634>
   15e7c:	sub	r2, r0, r4
   15e80:	sub	r0, r6, #47	; 0x2f
   15e84:	clz	r0, r0
   15e88:	lsr	r1, r0, #5
   15e8c:	mov	r0, r2
   15e90:	cmp	r2, r1
   15e94:	popls	{r4, r5, r6, sl, fp, pc}
   15e98:	ldrb	r3, [r5, r0]
   15e9c:	sub	r2, r0, #1
   15ea0:	cmp	r3, #47	; 0x2f
   15ea4:	beq	15e8c <__assert_fail@plt+0x45a0>
   15ea8:	pop	{r4, r5, r6, sl, fp, pc}
   15eac:	push	{r4, r5, r6, sl, fp, lr}
   15eb0:	add	fp, sp, #16
   15eb4:	mov	r6, r0
   15eb8:	mov	r4, r0
   15ebc:	ldrb	r5, [r6], #-1
   15ec0:	bl	1df20 <__assert_fail@plt+0xc634>
   15ec4:	sub	r1, r0, r4
   15ec8:	sub	r0, r5, #47	; 0x2f
   15ecc:	clz	r0, r0
   15ed0:	lsr	r0, r0, #5
   15ed4:	mov	r5, r1
   15ed8:	cmp	r1, r0
   15edc:	bls	15ef0 <__assert_fail@plt+0x4604>
   15ee0:	ldrb	r2, [r6, r5]
   15ee4:	sub	r1, r5, #1
   15ee8:	cmp	r2, #47	; 0x2f
   15eec:	beq	15ed4 <__assert_fail@plt+0x45e8>
   15ef0:	cmp	r5, #0
   15ef4:	mov	r0, r5
   15ef8:	addeq	r0, r0, #1
   15efc:	add	r0, r0, #1
   15f00:	bl	1cf00 <__assert_fail@plt+0xb614>
   15f04:	mov	r6, r0
   15f08:	cmp	r0, #0
   15f0c:	beq	15f38 <__assert_fail@plt+0x464c>
   15f10:	mov	r0, r6
   15f14:	mov	r1, r4
   15f18:	mov	r2, r5
   15f1c:	bl	11574 <memcpy@plt>
   15f20:	cmp	r5, #0
   15f24:	moveq	r0, #46	; 0x2e
   15f28:	moveq	r5, #1
   15f2c:	strbeq	r0, [r6]
   15f30:	mov	r0, #0
   15f34:	strb	r0, [r6, r5]
   15f38:	mov	r0, r6
   15f3c:	pop	{r4, r5, r6, sl, fp, pc}
   15f40:	push	{r4, r5, r6, r7, fp, lr}
   15f44:	add	fp, sp, #16
   15f48:	cmp	r0, #0
   15f4c:	popeq	{r4, r5, r6, r7, fp, pc}
   15f50:	mov	r5, r0
   15f54:	mov	r0, #24
   15f58:	mov	r6, r2
   15f5c:	mov	r7, r1
   15f60:	bl	1bb68 <__assert_fail@plt+0xa27c>
   15f64:	mov	r4, r0
   15f68:	mov	r0, r7
   15f6c:	bl	1c088 <__assert_fail@plt+0xa79c>
   15f70:	str	r0, [r4]
   15f74:	ldrd	r0, [r6, #96]	; 0x60
   15f78:	str	r1, [r4, #12]
   15f7c:	str	r0, [r4, #8]
   15f80:	ldrd	r0, [r6]
   15f84:	str	r1, [r4, #20]
   15f88:	str	r0, [r4, #16]
   15f8c:	mov	r0, r5
   15f90:	mov	r1, r4
   15f94:	bl	17104 <__assert_fail@plt+0x5818>
   15f98:	cmp	r0, #0
   15f9c:	beq	15fb8 <__assert_fail@plt+0x46cc>
   15fa0:	cmp	r0, r4
   15fa4:	beq	15fb4 <__assert_fail@plt+0x46c8>
   15fa8:	mov	r0, r4
   15fac:	pop	{r4, r5, r6, r7, fp, lr}
   15fb0:	b	17478 <__assert_fail@plt+0x5b8c>
   15fb4:	pop	{r4, r5, r6, r7, fp, pc}
   15fb8:	bl	1c0c8 <__assert_fail@plt+0xa7dc>
   15fbc:	cmp	r0, #0
   15fc0:	moveq	r0, #0
   15fc4:	bxeq	lr
   15fc8:	push	{r4, r5, fp, lr}
   15fcc:	add	fp, sp, #8
   15fd0:	sub	sp, sp, #24
   15fd4:	str	r1, [sp]
   15fd8:	mov	r1, sp
   15fdc:	ldrd	r4, [r2, #96]	; 0x60
   15fe0:	str	r5, [sp, #12]
   15fe4:	str	r4, [sp, #8]
   15fe8:	ldrd	r2, [r2]
   15fec:	str	r3, [sp, #20]
   15ff0:	str	r2, [sp, #16]
   15ff4:	bl	16310 <__assert_fail@plt+0x4a24>
   15ff8:	cmp	r0, #0
   15ffc:	movwne	r0, #1
   16000:	sub	sp, fp, #8
   16004:	pop	{r4, r5, fp, pc}
   16008:	push	{r4, r5, r6, sl, fp, lr}
   1600c:	add	fp, sp, #16
   16010:	mov	r4, r0
   16014:	bl	11748 <__errno_location@plt>
   16018:	ldr	r6, [r0]
   1601c:	mov	r5, r0
   16020:	mov	r0, r4
   16024:	bl	11550 <free@plt>
   16028:	str	r6, [r5]
   1602c:	pop	{r4, r5, r6, sl, fp, pc}
   16030:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   16034:	add	fp, sp, #24
   16038:	sub	sp, sp, #392	; 0x188
   1603c:	movw	r7, #4820	; 0x12d4
   16040:	mov	r4, r2
   16044:	mov	r5, r0
   16048:	movt	r7, #3
   1604c:	ldr	r1, [r7]
   16050:	cmn	r1, #1
   16054:	bgt	1608c <__assert_fail@plt+0x47a0>
   16058:	mov	r6, sp
   1605c:	mov	r0, r6
   16060:	bl	115a4 <uname@plt>
   16064:	mov	r1, #0
   16068:	cmp	r0, #0
   1606c:	bne	16088 <__assert_fail@plt+0x479c>
   16070:	movw	r1, #36	; 0x24
   16074:	add	r0, r6, #130	; 0x82
   16078:	movt	r1, #2
   1607c:	bl	11508 <strverscmp@plt>
   16080:	mov	r1, #1
   16084:	eor	r1, r1, r0, lsr #31
   16088:	str	r1, [r7]
   1608c:	mov	r6, sp
   16090:	mov	r0, r5
   16094:	cmp	r1, #0
   16098:	beq	160cc <__assert_fail@plt+0x47e0>
   1609c:	mov	r1, r6
   160a0:	bl	11784 <statvfs64@plt>
   160a4:	cmp	r0, #0
   160a8:	blt	16128 <__assert_fail@plt+0x483c>
   160ac:	ldm	sp, {r0, r1}
   160b0:	cmp	r1, #0
   160b4:	movne	r0, r1
   160b8:	cmn	r0, #1
   160bc:	mov	r1, r0
   160c0:	movwne	r1, #0
   160c4:	movne	r0, r0
   160c8:	b	160e4 <__assert_fail@plt+0x47f8>
   160cc:	mov	r1, r6
   160d0:	bl	11814 <statfs64@plt>
   160d4:	cmp	r0, #0
   160d8:	blt	16128 <__assert_fail@plt+0x483c>
   160dc:	ldr	r0, [sp, #60]	; 0x3c
   160e0:	asr	r1, r0, #31
   160e4:	strd	r0, [r4]
   160e8:	add	r0, r6, #8
   160ec:	vld1.64	{d16-d17}, [r0]
   160f0:	add	r0, r4, #8
   160f4:	vst1.64	{d16-d17}, [r0]
   160f8:	ldr	r0, [sp, #24]
   160fc:	ldr	r1, [sp, #28]
   16100:	strd	r0, [r4, #24]
   16104:	lsr	r0, r1, #31
   16108:	strb	r0, [r4, #32]
   1610c:	add	r0, r6, #32
   16110:	vld1.64	{d16-d17}, [r0]
   16114:	add	r0, r4, #40	; 0x28
   16118:	vst1.64	{d16-d17}, [r0]
   1611c:	mov	r0, #0
   16120:	sub	sp, fp, #24
   16124:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   16128:	mvn	r0, #0
   1612c:	sub	sp, fp, #24
   16130:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   16134:	andeq	r0, r0, r0
   16138:	ldr	r0, [r0, #8]
   1613c:	bx	lr
   16140:	ldr	r0, [r0, #12]
   16144:	bx	lr
   16148:	ldr	r0, [r0, #16]
   1614c:	bx	lr
   16150:	ldm	r0, {r2, ip}
   16154:	mov	r0, #0
   16158:	cmp	r2, ip
   1615c:	bxcs	lr
   16160:	mov	r0, #0
   16164:	ldr	r1, [r2]
   16168:	cmp	r1, #0
   1616c:	beq	16190 <__assert_fail@plt+0x48a4>
   16170:	mov	r3, #0
   16174:	mov	r1, r2
   16178:	ldr	r1, [r1, #4]
   1617c:	add	r3, r3, #1
   16180:	cmp	r1, #0
   16184:	bne	16178 <__assert_fail@plt+0x488c>
   16188:	cmp	r3, r0
   1618c:	movhi	r0, r3
   16190:	add	r2, r2, #8
   16194:	cmp	r2, ip
   16198:	bcc	16164 <__assert_fail@plt+0x4878>
   1619c:	bx	lr
   161a0:	push	{fp, lr}
   161a4:	mov	fp, sp
   161a8:	ldm	r0, {r3, ip}
   161ac:	mov	lr, #0
   161b0:	mov	r1, #0
   161b4:	cmp	r3, ip
   161b8:	bcs	161f4 <__assert_fail@plt+0x4908>
   161bc:	mov	r1, #0
   161c0:	mov	lr, #0
   161c4:	ldr	r2, [r3]
   161c8:	cmp	r2, #0
   161cc:	beq	161e8 <__assert_fail@plt+0x48fc>
   161d0:	mov	r2, r3
   161d4:	ldr	r2, [r2, #4]
   161d8:	add	r1, r1, #1
   161dc:	cmp	r2, #0
   161e0:	bne	161d4 <__assert_fail@plt+0x48e8>
   161e4:	add	lr, lr, #1
   161e8:	add	r3, r3, #8
   161ec:	cmp	r3, ip
   161f0:	bcc	161c4 <__assert_fail@plt+0x48d8>
   161f4:	ldr	r2, [r0, #12]
   161f8:	cmp	lr, r2
   161fc:	bne	16214 <__assert_fail@plt+0x4928>
   16200:	ldr	r2, [r0, #16]
   16204:	mov	r0, #1
   16208:	cmp	r1, r2
   1620c:	movne	r0, #0
   16210:	pop	{fp, pc}
   16214:	mov	r0, #0
   16218:	pop	{fp, pc}
   1621c:	nop	{0}
   16220:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   16224:	add	fp, sp, #24
   16228:	sub	sp, sp, #8
   1622c:	ldr	r6, [r0]
   16230:	ldmib	r0, {r2, r7, r8}
   16234:	ldr	r3, [r0, #16]
   16238:	mov	r4, r1
   1623c:	mov	r5, #0
   16240:	cmp	r6, r2
   16244:	bcs	16284 <__assert_fail@plt+0x4998>
   16248:	mov	r5, #0
   1624c:	ldr	r0, [r6]
   16250:	cmp	r0, #0
   16254:	beq	16278 <__assert_fail@plt+0x498c>
   16258:	mov	r0, #0
   1625c:	mov	r1, r6
   16260:	ldr	r1, [r1, #4]
   16264:	add	r0, r0, #1
   16268:	cmp	r1, #0
   1626c:	bne	16260 <__assert_fail@plt+0x4974>
   16270:	cmp	r0, r5
   16274:	movhi	r5, r0
   16278:	add	r6, r6, #8
   1627c:	cmp	r6, r2
   16280:	bcc	1624c <__assert_fail@plt+0x4960>
   16284:	movw	r2, #43	; 0x2b
   16288:	mov	r0, r4
   1628c:	mov	r1, #1
   16290:	movt	r2, #2
   16294:	bl	1179c <__fprintf_chk@plt>
   16298:	movw	r2, #67	; 0x43
   1629c:	mov	r0, r4
   162a0:	mov	r1, #1
   162a4:	mov	r3, r7
   162a8:	movt	r2, #2
   162ac:	bl	1179c <__fprintf_chk@plt>
   162b0:	vldr	d16, [pc, #80]	; 16308 <__assert_fail@plt+0x4a1c>
   162b4:	vmov	s0, r8
   162b8:	movw	r2, #91	; 0x5b
   162bc:	mov	r0, r4
   162c0:	mov	r1, #1
   162c4:	mov	r3, r8
   162c8:	vcvt.f64.u32	d17, s0
   162cc:	vmov	s0, r7
   162d0:	movt	r2, #2
   162d4:	vcvt.f64.u32	d18, s0
   162d8:	vmul.f64	d16, d17, d16
   162dc:	vdiv.f64	d16, d16, d18
   162e0:	vstr	d16, [sp]
   162e4:	bl	1179c <__fprintf_chk@plt>
   162e8:	movw	r2, #124	; 0x7c
   162ec:	mov	r0, r4
   162f0:	mov	r1, #1
   162f4:	mov	r3, r5
   162f8:	movt	r2, #2
   162fc:	sub	sp, fp, #24
   16300:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   16304:	b	1179c <__fprintf_chk@plt>
   16308:	andeq	r0, r0, r0
   1630c:	subsmi	r0, r9, r0
   16310:	push	{r4, r5, r6, r7, fp, lr}
   16314:	add	fp, sp, #16
   16318:	mov	r4, r1
   1631c:	ldr	r1, [r0, #8]
   16320:	ldr	r2, [r0, #24]
   16324:	mov	r5, r0
   16328:	mov	r0, r4
   1632c:	blx	r2
   16330:	ldr	r1, [r5, #8]
   16334:	cmp	r0, r1
   16338:	bcs	163a4 <__assert_fail@plt+0x4ab8>
   1633c:	ldr	r7, [r5]
   16340:	mov	r6, #0
   16344:	ldr	r1, [r7, r0, lsl #3]!
   16348:	cmp	r1, #0
   1634c:	cmpne	r7, #0
   16350:	bne	16360 <__assert_fail@plt+0x4a74>
   16354:	mov	r0, r6
   16358:	pop	{r4, r5, r6, r7, fp, pc}
   1635c:	ldr	r1, [r7]
   16360:	cmp	r1, r4
   16364:	beq	1638c <__assert_fail@plt+0x4aa0>
   16368:	ldr	r2, [r5, #28]
   1636c:	mov	r0, r4
   16370:	blx	r2
   16374:	cmp	r0, #0
   16378:	bne	16398 <__assert_fail@plt+0x4aac>
   1637c:	ldr	r7, [r7, #4]
   16380:	cmp	r7, #0
   16384:	bne	1635c <__assert_fail@plt+0x4a70>
   16388:	b	16354 <__assert_fail@plt+0x4a68>
   1638c:	mov	r6, r4
   16390:	mov	r0, r6
   16394:	pop	{r4, r5, r6, r7, fp, pc}
   16398:	ldr	r6, [r7]
   1639c:	mov	r0, r6
   163a0:	pop	{r4, r5, r6, r7, fp, pc}
   163a4:	bl	118bc <abort@plt>
   163a8:	ldr	r1, [r0, #16]
   163ac:	cmp	r1, #0
   163b0:	moveq	r0, #0
   163b4:	bxeq	lr
   163b8:	ldm	r0, {r1, r2}
   163bc:	cmp	r1, r2
   163c0:	bcs	163d8 <__assert_fail@plt+0x4aec>
   163c4:	ldr	r0, [r1], #8
   163c8:	cmp	r0, #0
   163cc:	bxne	lr
   163d0:	cmp	r1, r2
   163d4:	bcc	163c4 <__assert_fail@plt+0x4ad8>
   163d8:	push	{fp, lr}
   163dc:	mov	fp, sp
   163e0:	bl	118bc <abort@plt>
   163e4:	push	{r4, r5, fp, lr}
   163e8:	add	fp, sp, #8
   163ec:	mov	r5, r1
   163f0:	ldr	r1, [r0, #8]
   163f4:	ldr	r2, [r0, #24]
   163f8:	mov	r4, r0
   163fc:	mov	r0, r5
   16400:	blx	r2
   16404:	ldr	r1, [r4, #8]
   16408:	cmp	r0, r1
   1640c:	bcs	16468 <__assert_fail@plt+0x4b7c>
   16410:	ldr	r1, [r4]
   16414:	add	r2, r1, r0, lsl #3
   16418:	ldr	r3, [r2]
   1641c:	ldr	r2, [r2, #4]
   16420:	cmp	r3, r5
   16424:	beq	16434 <__assert_fail@plt+0x4b48>
   16428:	cmp	r2, #0
   1642c:	bne	16418 <__assert_fail@plt+0x4b2c>
   16430:	b	16440 <__assert_fail@plt+0x4b54>
   16434:	cmp	r2, #0
   16438:	ldrne	r0, [r2]
   1643c:	popne	{r4, r5, fp, pc}
   16440:	ldr	r2, [r4, #4]
   16444:	add	r0, r1, r0, lsl #3
   16448:	add	r1, r0, #8
   1644c:	cmp	r1, r2
   16450:	movcs	r0, #0
   16454:	popcs	{r4, r5, fp, pc}
   16458:	ldr	r0, [r1], #8
   1645c:	cmp	r0, #0
   16460:	popne	{r4, r5, fp, pc}
   16464:	b	1644c <__assert_fail@plt+0x4b60>
   16468:	bl	118bc <abort@plt>
   1646c:	push	{r4, r5, fp, lr}
   16470:	add	fp, sp, #8
   16474:	ldm	r0, {r5, lr}
   16478:	mov	ip, r0
   1647c:	mov	r0, #0
   16480:	cmp	r5, lr
   16484:	bcs	164d0 <__assert_fail@plt+0x4be4>
   16488:	mov	r0, #0
   1648c:	ldr	r3, [r5]
   16490:	cmp	r3, #0
   16494:	cmpne	r5, #0
   16498:	beq	164c4 <__assert_fail@plt+0x4bd8>
   1649c:	mov	r3, r5
   164a0:	cmp	r0, r2
   164a4:	popcs	{r4, r5, fp, pc}
   164a8:	ldr	r4, [r3]
   164ac:	str	r4, [r1, r0, lsl #2]
   164b0:	add	r0, r0, #1
   164b4:	ldr	r3, [r3, #4]
   164b8:	cmp	r3, #0
   164bc:	bne	164a0 <__assert_fail@plt+0x4bb4>
   164c0:	ldr	lr, [ip, #4]
   164c4:	add	r5, r5, #8
   164c8:	cmp	r5, lr
   164cc:	bcc	1648c <__assert_fail@plt+0x4ba0>
   164d0:	pop	{r4, r5, fp, pc}
   164d4:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   164d8:	add	fp, sp, #24
   164dc:	mov	r5, r1
   164e0:	ldr	r4, [r0]
   164e4:	ldr	r1, [r0, #4]
   164e8:	mov	r6, #0
   164ec:	cmp	r4, r1
   164f0:	bcs	16564 <__assert_fail@plt+0x4c78>
   164f4:	mov	r9, r2
   164f8:	mov	r8, r0
   164fc:	mov	r6, #0
   16500:	b	16548 <__assert_fail@plt+0x4c5c>
   16504:	mov	r1, r9
   16508:	blx	r5
   1650c:	cmp	r0, #0
   16510:	beq	16564 <__assert_fail@plt+0x4c78>
   16514:	mov	r7, r4
   16518:	ldr	r7, [r7, #4]
   1651c:	add	r6, r6, #1
   16520:	cmp	r7, #0
   16524:	beq	16540 <__assert_fail@plt+0x4c54>
   16528:	ldr	r0, [r7]
   1652c:	mov	r1, r9
   16530:	blx	r5
   16534:	cmp	r0, #0
   16538:	bne	16518 <__assert_fail@plt+0x4c2c>
   1653c:	b	16564 <__assert_fail@plt+0x4c78>
   16540:	ldr	r1, [r8, #4]
   16544:	b	16558 <__assert_fail@plt+0x4c6c>
   16548:	ldr	r0, [r4]
   1654c:	cmp	r0, #0
   16550:	cmpne	r4, #0
   16554:	bne	16504 <__assert_fail@plt+0x4c18>
   16558:	add	r4, r4, #8
   1655c:	cmp	r4, r1
   16560:	bcc	16548 <__assert_fail@plt+0x4c5c>
   16564:	mov	r0, r6
   16568:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1656c:	ldrb	r2, [r0]
   16570:	cmp	r2, #0
   16574:	moveq	r0, #0
   16578:	bxeq	lr
   1657c:	add	r3, r0, #1
   16580:	mov	r0, #0
   16584:	rsb	r0, r0, r0, lsl #5
   16588:	uxtab	r0, r0, r2
   1658c:	udiv	r2, r0, r1
   16590:	mls	r0, r2, r1, r0
   16594:	ldrb	r2, [r3], #1
   16598:	cmp	r2, #0
   1659c:	bne	16584 <__assert_fail@plt+0x4c98>
   165a0:	bx	lr
   165a4:	movw	r1, #152	; 0x98
   165a8:	movt	r1, #2
   165ac:	vld1.32	{d16-d17}, [r1]!
   165b0:	ldr	r1, [r1]
   165b4:	vst1.32	{d16-d17}, [r0]!
   165b8:	str	r1, [r0]
   165bc:	bx	lr
   165c0:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   165c4:	add	fp, sp, #24
   165c8:	movw	r9, #26600	; 0x67e8
   165cc:	movw	r5, #26580	; 0x67d4
   165d0:	cmp	r3, #0
   165d4:	mov	r6, r0
   165d8:	mov	r0, #40	; 0x28
   165dc:	mov	r7, r1
   165e0:	movt	r9, #1
   165e4:	movt	r5, #1
   165e8:	movne	r9, r3
   165ec:	cmp	r2, #0
   165f0:	movne	r5, r2
   165f4:	bl	1cf00 <__assert_fail@plt+0xb614>
   165f8:	mov	r8, #0
   165fc:	cmp	r0, #0
   16600:	beq	167bc <__assert_fail@plt+0x4ed0>
   16604:	mov	r4, r0
   16608:	movw	r0, #152	; 0x98
   1660c:	cmp	r7, #0
   16610:	movt	r0, #2
   16614:	moveq	r7, r0
   16618:	cmp	r7, r0
   1661c:	str	r7, [r4, #20]
   16620:	beq	1669c <__assert_fail@plt+0x4db0>
   16624:	vldr	s2, [pc, #408]	; 167c4 <__assert_fail@plt+0x4ed8>
   16628:	vldr	s0, [r7, #8]
   1662c:	vcmpe.f32	s0, s2
   16630:	vmrs	APSR_nzcv, fpscr
   16634:	ble	16748 <__assert_fail@plt+0x4e5c>
   16638:	vldr	s4, [pc, #392]	; 167c8 <__assert_fail@plt+0x4edc>
   1663c:	vcmpe.f32	s0, s4
   16640:	vmrs	APSR_nzcv, fpscr
   16644:	bpl	16748 <__assert_fail@plt+0x4e5c>
   16648:	vldr	s4, [pc, #380]	; 167cc <__assert_fail@plt+0x4ee0>
   1664c:	vldr	s6, [r7, #12]
   16650:	vcmpe.f32	s6, s4
   16654:	vmrs	APSR_nzcv, fpscr
   16658:	ble	16748 <__assert_fail@plt+0x4e5c>
   1665c:	vldr	s4, [r7]
   16660:	vcmpe.f32	s4, #0.0
   16664:	vmrs	APSR_nzcv, fpscr
   16668:	blt	16748 <__assert_fail@plt+0x4e5c>
   1666c:	vadd.f32	s2, s4, s2
   16670:	vcmpe.f32	s2, s0
   16674:	vmrs	APSR_nzcv, fpscr
   16678:	bpl	16748 <__assert_fail@plt+0x4e5c>
   1667c:	vldr	s0, [r7, #4]
   16680:	vmov.f32	s4, #112	; 0x3f800000  1.0
   16684:	vcmpe.f32	s0, s4
   16688:	vmrs	APSR_nzcv, fpscr
   1668c:	bhi	16748 <__assert_fail@plt+0x4e5c>
   16690:	vcmpe.f32	s2, s0
   16694:	vmrs	APSR_nzcv, fpscr
   16698:	bpl	16748 <__assert_fail@plt+0x4e5c>
   1669c:	ldrb	r0, [r7, #16]
   166a0:	cmp	r0, #0
   166a4:	bne	166d0 <__assert_fail@plt+0x4de4>
   166a8:	vldr	s0, [r7, #8]
   166ac:	vldr	s4, [pc, #284]	; 167d0 <__assert_fail@plt+0x4ee4>
   166b0:	vmov	s2, r6
   166b4:	vcvt.f32.u32	s2, s2
   166b8:	vdiv.f32	s2, s2, s0
   166bc:	vcmpe.f32	s2, s4
   166c0:	vcvt.u32.f32	s0, s2
   166c4:	vmrs	APSR_nzcv, fpscr
   166c8:	bge	16758 <__assert_fail@plt+0x4e6c>
   166cc:	vmov	r6, s0
   166d0:	cmp	r6, #10
   166d4:	movls	r6, #10
   166d8:	orr	r0, r6, #1
   166dc:	cmn	r0, #1
   166e0:	beq	16758 <__assert_fail@plt+0x4e6c>
   166e4:	ldr	r6, [fp, #8]
   166e8:	mov	r1, #3
   166ec:	cmp	r0, #10
   166f0:	bcc	16728 <__assert_fail@plt+0x4e3c>
   166f4:	mov	r1, #3
   166f8:	mov	r3, #9
   166fc:	mov	r2, #12
   16700:	udiv	r7, r0, r1
   16704:	mls	r7, r7, r1, r0
   16708:	cmp	r7, #0
   1670c:	beq	16728 <__assert_fail@plt+0x4e3c>
   16710:	add	r3, r3, r2
   16714:	add	r2, r2, #8
   16718:	add	r1, r1, #2
   1671c:	add	r3, r3, #4
   16720:	cmp	r3, r0
   16724:	bcc	16700 <__assert_fail@plt+0x4e14>
   16728:	udiv	r2, r0, r1
   1672c:	mls	r1, r2, r1, r0
   16730:	cmp	r1, #0
   16734:	bne	16750 <__assert_fail@plt+0x4e64>
   16738:	add	r0, r0, #2
   1673c:	cmn	r0, #1
   16740:	bne	166e8 <__assert_fail@plt+0x4dfc>
   16744:	b	16758 <__assert_fail@plt+0x4e6c>
   16748:	str	r0, [r4, #20]
   1674c:	b	16760 <__assert_fail@plt+0x4e74>
   16750:	cmp	r0, #536870912	; 0x20000000
   16754:	bcc	16770 <__assert_fail@plt+0x4e84>
   16758:	mov	r0, #0
   1675c:	str	r0, [r4, #8]
   16760:	mov	r0, r4
   16764:	bl	16008 <__assert_fail@plt+0x471c>
   16768:	mov	r0, r8
   1676c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   16770:	cmp	r0, #0
   16774:	str	r0, [r4, #8]
   16778:	beq	16760 <__assert_fail@plt+0x4e74>
   1677c:	mov	r1, #8
   16780:	bl	1ceac <__assert_fail@plt+0xb5c0>
   16784:	cmp	r0, #0
   16788:	str	r0, [r4]
   1678c:	beq	16760 <__assert_fail@plt+0x4e74>
   16790:	mov	r1, #0
   16794:	mov	r8, r4
   16798:	str	r1, [r4, #12]
   1679c:	str	r1, [r4, #16]
   167a0:	str	r5, [r4, #24]
   167a4:	str	r9, [r4, #28]
   167a8:	str	r6, [r4, #32]
   167ac:	str	r1, [r4, #36]	; 0x24
   167b0:	ldr	r1, [r4, #8]
   167b4:	add	r0, r0, r1, lsl #3
   167b8:	str	r0, [r4, #4]
   167bc:	mov	r0, r8
   167c0:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   167c4:	stclcc	12, cr12, [ip, #820]	; 0x334
   167c8:	svccc	0x00666666
   167cc:	svccc	0x008ccccd
   167d0:	svcmi	0x00800000
   167d4:	ror	r2, r0, #3
   167d8:	udiv	r2, r2, r1
   167dc:	mul	r1, r2, r1
   167e0:	rsb	r0, r1, r0, ror #3
   167e4:	bx	lr
   167e8:	sub	r0, r0, r1
   167ec:	clz	r0, r0
   167f0:	lsr	r0, r0, #5
   167f4:	bx	lr
   167f8:	push	{r4, r5, r6, r7, fp, lr}
   167fc:	add	fp, sp, #16
   16800:	mov	r4, r0
   16804:	ldr	r5, [r0]
   16808:	ldr	r0, [r0, #4]
   1680c:	cmp	r5, r0
   16810:	bcs	168a8 <__assert_fail@plt+0x4fbc>
   16814:	mov	r6, #0
   16818:	ldr	r1, [r5]
   1681c:	cmp	r1, #0
   16820:	beq	1689c <__assert_fail@plt+0x4fb0>
   16824:	ldr	r1, [r4, #32]
   16828:	ldr	r7, [r5, #4]
   1682c:	cmp	r1, #0
   16830:	mov	r0, r1
   16834:	movwne	r0, #1
   16838:	cmp	r7, #0
   1683c:	beq	16880 <__assert_fail@plt+0x4f94>
   16840:	tst	r0, #1
   16844:	beq	16854 <__assert_fail@plt+0x4f68>
   16848:	ldr	r0, [r7]
   1684c:	blx	r1
   16850:	ldr	r1, [r4, #32]
   16854:	str	r6, [r7]
   16858:	cmp	r1, #0
   1685c:	ldr	r0, [r4, #36]	; 0x24
   16860:	ldr	r2, [r7, #4]
   16864:	str	r0, [r7, #4]
   16868:	mov	r0, r1
   1686c:	str	r7, [r4, #36]	; 0x24
   16870:	mov	r7, r2
   16874:	movwne	r0, #1
   16878:	cmp	r2, #0
   1687c:	bne	16840 <__assert_fail@plt+0x4f54>
   16880:	cmp	r0, #0
   16884:	beq	16890 <__assert_fail@plt+0x4fa4>
   16888:	ldr	r0, [r5]
   1688c:	blx	r1
   16890:	str	r6, [r5]
   16894:	str	r6, [r5, #4]
   16898:	ldr	r0, [r4, #4]
   1689c:	add	r5, r5, #8
   168a0:	cmp	r5, r0
   168a4:	bcc	16818 <__assert_fail@plt+0x4f2c>
   168a8:	mov	r0, #0
   168ac:	str	r0, [r4, #12]
   168b0:	str	r0, [r4, #16]
   168b4:	pop	{r4, r5, r6, r7, fp, pc}
   168b8:	push	{r4, r5, r6, sl, fp, lr}
   168bc:	add	fp, sp, #16
   168c0:	mov	r4, r0
   168c4:	ldr	r0, [r0, #32]
   168c8:	cmp	r0, #0
   168cc:	ldrne	r0, [r4, #16]
   168d0:	cmpne	r0, #0
   168d4:	beq	1693c <__assert_fail@plt+0x5050>
   168d8:	ldr	r5, [r4]
   168dc:	ldr	r1, [r4, #4]
   168e0:	cmp	r5, r1
   168e4:	bcc	168f8 <__assert_fail@plt+0x500c>
   168e8:	b	1693c <__assert_fail@plt+0x5050>
   168ec:	add	r5, r5, #8
   168f0:	cmp	r5, r1
   168f4:	bcs	1693c <__assert_fail@plt+0x5050>
   168f8:	ldr	r0, [r5]
   168fc:	cmp	r0, #0
   16900:	cmpne	r5, #0
   16904:	beq	168ec <__assert_fail@plt+0x5000>
   16908:	ldr	r1, [r4, #32]
   1690c:	blx	r1
   16910:	ldr	r6, [r5, #4]
   16914:	cmp	r6, #0
   16918:	beq	16934 <__assert_fail@plt+0x5048>
   1691c:	ldr	r1, [r4, #32]
   16920:	ldr	r0, [r6]
   16924:	blx	r1
   16928:	ldr	r6, [r6, #4]
   1692c:	cmp	r6, #0
   16930:	bne	1691c <__assert_fail@plt+0x5030>
   16934:	ldr	r1, [r4, #4]
   16938:	b	168ec <__assert_fail@plt+0x5000>
   1693c:	ldr	r5, [r4]
   16940:	ldr	r1, [r4, #4]
   16944:	cmp	r5, r1
   16948:	bcc	1695c <__assert_fail@plt+0x5070>
   1694c:	b	16984 <__assert_fail@plt+0x5098>
   16950:	add	r5, r5, #8
   16954:	cmp	r5, r1
   16958:	bcs	16984 <__assert_fail@plt+0x5098>
   1695c:	ldr	r0, [r5, #4]
   16960:	cmp	r0, #0
   16964:	beq	16950 <__assert_fail@plt+0x5064>
   16968:	ldr	r6, [r0, #4]
   1696c:	bl	16008 <__assert_fail@plt+0x471c>
   16970:	cmp	r6, #0
   16974:	mov	r0, r6
   16978:	bne	16968 <__assert_fail@plt+0x507c>
   1697c:	ldr	r1, [r4, #4]
   16980:	b	16950 <__assert_fail@plt+0x5064>
   16984:	ldr	r0, [r4, #36]	; 0x24
   16988:	cmp	r0, #0
   1698c:	beq	169a4 <__assert_fail@plt+0x50b8>
   16990:	ldr	r5, [r0, #4]
   16994:	bl	16008 <__assert_fail@plt+0x471c>
   16998:	cmp	r5, #0
   1699c:	mov	r0, r5
   169a0:	bne	16990 <__assert_fail@plt+0x50a4>
   169a4:	ldr	r0, [r4]
   169a8:	bl	16008 <__assert_fail@plt+0x471c>
   169ac:	mov	r0, r4
   169b0:	pop	{r4, r5, r6, sl, fp, lr}
   169b4:	b	16008 <__assert_fail@plt+0x471c>
   169b8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   169bc:	add	fp, sp, #28
   169c0:	sub	sp, sp, #44	; 0x2c
   169c4:	mov	r7, r0
   169c8:	mov	r4, r0
   169cc:	ldr	r0, [r7, #20]!
   169d0:	ldrb	r2, [r0, #16]
   169d4:	cmp	r2, #0
   169d8:	bne	16a08 <__assert_fail@plt+0x511c>
   169dc:	vldr	s0, [r0, #8]
   169e0:	vldr	s4, [pc, #560]	; 16c18 <__assert_fail@plt+0x532c>
   169e4:	vmov	s2, r1
   169e8:	mov	r5, #0
   169ec:	vcvt.f32.u32	s2, s2
   169f0:	vdiv.f32	s2, s2, s0
   169f4:	vcmpe.f32	s2, s4
   169f8:	vcvt.u32.f32	s0, s2
   169fc:	vmrs	APSR_nzcv, fpscr
   16a00:	bge	16c08 <__assert_fail@plt+0x531c>
   16a04:	vmov	r1, s0
   16a08:	cmp	r1, #10
   16a0c:	mov	r5, #0
   16a10:	movls	r1, #10
   16a14:	orr	r6, r1, #1
   16a18:	cmn	r6, #1
   16a1c:	bne	16a30 <__assert_fail@plt+0x5144>
   16a20:	b	16c08 <__assert_fail@plt+0x531c>
   16a24:	add	r6, r6, #2
   16a28:	cmn	r6, #1
   16a2c:	beq	16c08 <__assert_fail@plt+0x531c>
   16a30:	mov	r0, #3
   16a34:	cmp	r6, #10
   16a38:	bcc	16a70 <__assert_fail@plt+0x5184>
   16a3c:	mov	r0, #3
   16a40:	mov	r2, #9
   16a44:	mov	r1, #12
   16a48:	udiv	r3, r6, r0
   16a4c:	mls	r3, r3, r0, r6
   16a50:	cmp	r3, #0
   16a54:	beq	16a70 <__assert_fail@plt+0x5184>
   16a58:	add	r2, r2, r1
   16a5c:	add	r1, r1, #8
   16a60:	add	r0, r0, #2
   16a64:	add	r2, r2, #4
   16a68:	cmp	r2, r6
   16a6c:	bcc	16a48 <__assert_fail@plt+0x515c>
   16a70:	udiv	r1, r6, r0
   16a74:	mls	r0, r1, r0, r6
   16a78:	cmp	r0, #0
   16a7c:	beq	16a24 <__assert_fail@plt+0x5138>
   16a80:	sub	r0, r6, #1
   16a84:	cmn	r0, #-536870910	; 0xe0000002
   16a88:	bhi	16c08 <__assert_fail@plt+0x531c>
   16a8c:	ldr	r0, [r4, #8]
   16a90:	cmp	r6, r0
   16a94:	bne	16aa0 <__assert_fail@plt+0x51b4>
   16a98:	mov	r5, #1
   16a9c:	b	16c08 <__assert_fail@plt+0x531c>
   16aa0:	mov	r0, r6
   16aa4:	mov	r1, #8
   16aa8:	bl	1ceac <__assert_fail@plt+0xb5c0>
   16aac:	cmp	r0, #0
   16ab0:	str	r0, [sp, #4]
   16ab4:	beq	16c08 <__assert_fail@plt+0x531c>
   16ab8:	mov	r1, #0
   16abc:	add	r0, r0, r6, lsl #3
   16ac0:	str	r6, [sp, #12]
   16ac4:	add	r5, sp, #4
   16ac8:	mov	sl, r4
   16acc:	mov	r2, #0
   16ad0:	str	r1, [sp, #16]
   16ad4:	str	r1, [sp, #20]
   16ad8:	str	r0, [sp, #8]
   16adc:	add	r0, r5, #20
   16ae0:	mov	r1, r4
   16ae4:	vld1.32	{d16-d17}, [r7]
   16ae8:	vst1.32	{d16-d17}, [r0]
   16aec:	ldr	r0, [sl, #36]!	; 0x24
   16af0:	str	r0, [sp, #40]	; 0x28
   16af4:	mov	r0, r5
   16af8:	bl	16c1c <__assert_fail@plt+0x5330>
   16afc:	cmp	r0, #0
   16b00:	beq	16b28 <__assert_fail@plt+0x523c>
   16b04:	ldr	r0, [r4]
   16b08:	bl	16008 <__assert_fail@plt+0x471c>
   16b0c:	mov	r0, #36	; 0x24
   16b10:	vld1.32	{d16-d17}, [r5], r0
   16b14:	vst1.32	{d16-d17}, [r4], r0
   16b18:	ldr	r0, [r5]
   16b1c:	mov	r5, #1
   16b20:	str	r0, [r4]
   16b24:	b	16c08 <__assert_fail@plt+0x531c>
   16b28:	ldr	r0, [sp, #40]	; 0x28
   16b2c:	str	r0, [sl]
   16b30:	ldr	r0, [sp, #8]
   16b34:	ldr	r8, [sp, #4]
   16b38:	cmp	r8, r0
   16b3c:	str	r0, [sp]
   16b40:	bcs	16be4 <__assert_fail@plt+0x52f8>
   16b44:	mov	r9, #0
   16b48:	ldr	r0, [r8]
   16b4c:	cmp	r0, #0
   16b50:	beq	16bd4 <__assert_fail@plt+0x52e8>
   16b54:	ldr	r6, [r8, #4]
   16b58:	cmp	r6, #0
   16b5c:	beq	16bd0 <__assert_fail@plt+0x52e4>
   16b60:	ldr	r1, [r4, #8]
   16b64:	ldr	r5, [r6]
   16b68:	ldr	r2, [r4, #24]
   16b6c:	mov	r0, r5
   16b70:	blx	r2
   16b74:	ldr	r1, [r4, #8]
   16b78:	cmp	r0, r1
   16b7c:	bcs	16c14 <__assert_fail@plt+0x5328>
   16b80:	ldr	r3, [r4]
   16b84:	ldr	r2, [r6, #4]
   16b88:	ldr	r7, [r3, r0, lsl #3]
   16b8c:	cmp	r7, #0
   16b90:	beq	16ba0 <__assert_fail@plt+0x52b4>
   16b94:	add	r0, r3, r0, lsl #3
   16b98:	add	r0, r0, #4
   16b9c:	b	16bb8 <__assert_fail@plt+0x52cc>
   16ba0:	str	r5, [r3, r0, lsl #3]
   16ba4:	ldr	r0, [r4, #12]
   16ba8:	add	r0, r0, #1
   16bac:	str	r0, [r4, #12]
   16bb0:	mov	r0, sl
   16bb4:	str	r9, [r6]
   16bb8:	ldr	r3, [r0]
   16bbc:	cmp	r2, #0
   16bc0:	str	r3, [r6, #4]
   16bc4:	str	r6, [r0]
   16bc8:	mov	r6, r2
   16bcc:	bne	16b64 <__assert_fail@plt+0x5278>
   16bd0:	str	r9, [r8, #4]
   16bd4:	ldr	r0, [sp]
   16bd8:	add	r8, r8, #8
   16bdc:	cmp	r8, r0
   16be0:	bcc	16b48 <__assert_fail@plt+0x525c>
   16be4:	add	r1, sp, #4
   16be8:	mov	r0, r4
   16bec:	mov	r2, #0
   16bf0:	mov	r5, #0
   16bf4:	bl	16c1c <__assert_fail@plt+0x5330>
   16bf8:	cmp	r0, #0
   16bfc:	beq	16c14 <__assert_fail@plt+0x5328>
   16c00:	ldr	r0, [sp, #4]
   16c04:	bl	16008 <__assert_fail@plt+0x471c>
   16c08:	mov	r0, r5
   16c0c:	sub	sp, fp, #28
   16c10:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16c14:	bl	118bc <abort@plt>
   16c18:	svcmi	0x00800000
   16c1c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16c20:	add	fp, sp, #28
   16c24:	sub	sp, sp, #12
   16c28:	ldr	sl, [r1]
   16c2c:	str	r1, [sp, #8]
   16c30:	ldr	r1, [r1, #4]
   16c34:	mov	r7, r0
   16c38:	mov	r0, #1
   16c3c:	str	r2, [sp, #4]
   16c40:	cmp	sl, r1
   16c44:	bcs	16da0 <__assert_fail@plt+0x54b4>
   16c48:	add	r8, r7, #36	; 0x24
   16c4c:	mov	r9, #0
   16c50:	ldr	r4, [sl]
   16c54:	cmp	r4, #0
   16c58:	beq	16d88 <__assert_fail@plt+0x549c>
   16c5c:	ldr	r5, [sl, #4]
   16c60:	cmp	r5, #0
   16c64:	beq	16cdc <__assert_fail@plt+0x53f0>
   16c68:	ldr	r1, [r7, #8]
   16c6c:	ldr	r4, [r5]
   16c70:	ldr	r2, [r7, #24]
   16c74:	mov	r0, r4
   16c78:	blx	r2
   16c7c:	ldr	r1, [r7, #8]
   16c80:	cmp	r0, r1
   16c84:	bcs	16db4 <__assert_fail@plt+0x54c8>
   16c88:	ldr	r3, [r7]
   16c8c:	ldr	r2, [r5, #4]
   16c90:	ldr	r6, [r3, r0, lsl #3]
   16c94:	cmp	r6, #0
   16c98:	beq	16ca8 <__assert_fail@plt+0x53bc>
   16c9c:	add	r0, r3, r0, lsl #3
   16ca0:	add	r0, r0, #4
   16ca4:	b	16cc0 <__assert_fail@plt+0x53d4>
   16ca8:	str	r4, [r3, r0, lsl #3]
   16cac:	ldr	r0, [r7, #12]
   16cb0:	add	r0, r0, #1
   16cb4:	str	r0, [r7, #12]
   16cb8:	mov	r0, r8
   16cbc:	str	r9, [r5]
   16cc0:	ldr	r3, [r0]
   16cc4:	cmp	r2, #0
   16cc8:	str	r3, [r5, #4]
   16ccc:	str	r5, [r0]
   16cd0:	mov	r5, r2
   16cd4:	bne	16c6c <__assert_fail@plt+0x5380>
   16cd8:	ldr	r4, [sl]
   16cdc:	ldr	r0, [sp, #4]
   16ce0:	str	r9, [sl, #4]
   16ce4:	cmp	r0, #0
   16ce8:	bne	16d88 <__assert_fail@plt+0x549c>
   16cec:	ldr	r1, [r7, #8]
   16cf0:	ldr	r2, [r7, #24]
   16cf4:	mov	r0, r4
   16cf8:	blx	r2
   16cfc:	mov	r5, r0
   16d00:	ldr	r0, [r7, #8]
   16d04:	cmp	r5, r0
   16d08:	bcs	16db4 <__assert_fail@plt+0x54c8>
   16d0c:	ldr	r6, [r7]
   16d10:	ldr	r0, [r6, r5, lsl #3]
   16d14:	cmp	r0, #0
   16d18:	beq	16d38 <__assert_fail@plt+0x544c>
   16d1c:	ldr	r0, [r8]
   16d20:	cmp	r0, #0
   16d24:	beq	16d4c <__assert_fail@plt+0x5460>
   16d28:	mov	r1, r0
   16d2c:	ldr	r2, [r1, #4]!
   16d30:	str	r2, [r8]
   16d34:	b	16d60 <__assert_fail@plt+0x5474>
   16d38:	str	r4, [r6, r5, lsl #3]
   16d3c:	ldr	r0, [r7, #12]
   16d40:	add	r0, r0, #1
   16d44:	str	r0, [r7, #12]
   16d48:	b	16d74 <__assert_fail@plt+0x5488>
   16d4c:	mov	r0, #8
   16d50:	bl	1cf00 <__assert_fail@plt+0xb614>
   16d54:	cmp	r0, #0
   16d58:	beq	16da8 <__assert_fail@plt+0x54bc>
   16d5c:	add	r1, r0, #4
   16d60:	str	r4, [r0]
   16d64:	add	r2, r6, r5, lsl #3
   16d68:	ldr	r3, [r2, #4]
   16d6c:	str	r3, [r1]
   16d70:	str	r0, [r2, #4]
   16d74:	ldr	r1, [sp, #8]
   16d78:	str	r9, [sl]
   16d7c:	ldr	r0, [r1, #12]
   16d80:	sub	r0, r0, #1
   16d84:	str	r0, [r1, #12]
   16d88:	ldr	r0, [sp, #8]
   16d8c:	add	sl, sl, #8
   16d90:	ldr	r0, [r0, #4]
   16d94:	cmp	sl, r0
   16d98:	bcc	16c50 <__assert_fail@plt+0x5364>
   16d9c:	mov	r0, #1
   16da0:	sub	sp, fp, #28
   16da4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16da8:	mov	r0, #0
   16dac:	sub	sp, fp, #28
   16db0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16db4:	bl	118bc <abort@plt>
   16db8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16dbc:	add	fp, sp, #28
   16dc0:	sub	sp, sp, #4
   16dc4:	cmp	r1, #0
   16dc8:	beq	170ec <__assert_fail@plt+0x5800>
   16dcc:	mov	r8, r2
   16dd0:	mov	sl, r1
   16dd4:	ldr	r1, [r0, #8]
   16dd8:	ldr	r2, [r0, #24]
   16ddc:	mov	r4, r0
   16de0:	mov	r0, sl
   16de4:	blx	r2
   16de8:	mov	r7, r0
   16dec:	ldr	r0, [r4, #8]
   16df0:	cmp	r7, r0
   16df4:	bcs	170ec <__assert_fail@plt+0x5800>
   16df8:	ldr	r5, [r4]
   16dfc:	mov	r9, r5
   16e00:	ldr	r1, [r9, r7, lsl #3]!
   16e04:	cmp	r1, #0
   16e08:	beq	16e94 <__assert_fail@plt+0x55a8>
   16e0c:	cmp	r1, sl
   16e10:	beq	16e3c <__assert_fail@plt+0x5550>
   16e14:	ldr	r2, [r4, #28]
   16e18:	mov	r0, sl
   16e1c:	blx	r2
   16e20:	cmp	r0, #0
   16e24:	mov	r6, r9
   16e28:	beq	16e50 <__assert_fail@plt+0x5564>
   16e2c:	ldr	r0, [r6]
   16e30:	cmp	r0, #0
   16e34:	bne	16e40 <__assert_fail@plt+0x5554>
   16e38:	b	16e94 <__assert_fail@plt+0x55a8>
   16e3c:	mov	r0, sl
   16e40:	cmp	r8, #0
   16e44:	mov	r7, #0
   16e48:	strne	r0, [r8]
   16e4c:	b	17088 <__assert_fail@plt+0x579c>
   16e50:	add	r6, r5, r7, lsl #3
   16e54:	ldr	r0, [r6, #4]!
   16e58:	cmp	r0, #0
   16e5c:	beq	16e94 <__assert_fail@plt+0x55a8>
   16e60:	ldr	r1, [r0]
   16e64:	cmp	r1, sl
   16e68:	beq	16e88 <__assert_fail@plt+0x559c>
   16e6c:	ldr	r2, [r4, #28]
   16e70:	mov	r0, sl
   16e74:	blx	r2
   16e78:	ldr	r6, [r6]
   16e7c:	cmp	r0, #0
   16e80:	beq	16e54 <__assert_fail@plt+0x5568>
   16e84:	b	16e2c <__assert_fail@plt+0x5540>
   16e88:	mov	r0, sl
   16e8c:	cmp	r0, #0
   16e90:	bne	16e40 <__assert_fail@plt+0x5554>
   16e94:	vldr	s0, [r4, #8]
   16e98:	vldr	s2, [r4, #12]
   16e9c:	ldr	r0, [r4, #20]
   16ea0:	vcvt.f32.u32	s0, s0
   16ea4:	vcvt.f32.u32	s4, s2
   16ea8:	vldr	s2, [r0, #8]
   16eac:	vmul.f32	s6, s2, s0
   16eb0:	vcmpe.f32	s6, s4
   16eb4:	vmrs	APSR_nzcv, fpscr
   16eb8:	bpl	1700c <__assert_fail@plt+0x5720>
   16ebc:	movw	r1, #152	; 0x98
   16ec0:	movt	r1, #2
   16ec4:	cmp	r0, r1
   16ec8:	beq	16f54 <__assert_fail@plt+0x5668>
   16ecc:	vldr	s6, [pc, #540]	; 170f0 <__assert_fail@plt+0x5804>
   16ed0:	vcmpe.f32	s2, s6
   16ed4:	vmrs	APSR_nzcv, fpscr
   16ed8:	ble	16f40 <__assert_fail@plt+0x5654>
   16edc:	vldr	s8, [pc, #528]	; 170f4 <__assert_fail@plt+0x5808>
   16ee0:	vcmpe.f32	s2, s8
   16ee4:	vmrs	APSR_nzcv, fpscr
   16ee8:	bpl	16f40 <__assert_fail@plt+0x5654>
   16eec:	vldr	s8, [pc, #516]	; 170f8 <__assert_fail@plt+0x580c>
   16ef0:	vldr	s10, [r0, #12]
   16ef4:	vcmpe.f32	s10, s8
   16ef8:	vmrs	APSR_nzcv, fpscr
   16efc:	ble	16f40 <__assert_fail@plt+0x5654>
   16f00:	vldr	s8, [r0]
   16f04:	vcmpe.f32	s8, #0.0
   16f08:	vmrs	APSR_nzcv, fpscr
   16f0c:	blt	16f40 <__assert_fail@plt+0x5654>
   16f10:	vadd.f32	s6, s8, s6
   16f14:	vcmpe.f32	s6, s2
   16f18:	vmrs	APSR_nzcv, fpscr
   16f1c:	bpl	16f40 <__assert_fail@plt+0x5654>
   16f20:	vldr	s8, [r0, #4]
   16f24:	vmov.f32	s10, #112	; 0x3f800000  1.0
   16f28:	vcmpe.f32	s8, s10
   16f2c:	vmrs	APSR_nzcv, fpscr
   16f30:	bhi	16f40 <__assert_fail@plt+0x5654>
   16f34:	vcmpe.f32	s6, s8
   16f38:	vmrs	APSR_nzcv, fpscr
   16f3c:	bmi	16f58 <__assert_fail@plt+0x566c>
   16f40:	vldr	s2, [pc, #436]	; 170fc <__assert_fail@plt+0x5810>
   16f44:	movw	r0, #152	; 0x98
   16f48:	movt	r0, #2
   16f4c:	str	r0, [r4, #20]
   16f50:	b	16f58 <__assert_fail@plt+0x566c>
   16f54:	mov	r0, r1
   16f58:	vmul.f32	s6, s2, s0
   16f5c:	vcmpe.f32	s6, s4
   16f60:	vmrs	APSR_nzcv, fpscr
   16f64:	bpl	1700c <__assert_fail@plt+0x5720>
   16f68:	vldr	s4, [r0, #12]
   16f6c:	ldrb	r0, [r0, #16]
   16f70:	mvn	r7, #0
   16f74:	vmul.f32	s0, s4, s0
   16f78:	vldr	s4, [pc, #384]	; 17100 <__assert_fail@plt+0x5814>
   16f7c:	cmp	r0, #0
   16f80:	vmul.f32	s2, s2, s0
   16f84:	vseleq.f32	s0, s2, s0
   16f88:	vcmpe.f32	s0, s4
   16f8c:	vmrs	APSR_nzcv, fpscr
   16f90:	bge	17088 <__assert_fail@plt+0x579c>
   16f94:	vcvt.u32.f32	s0, s0
   16f98:	mov	r0, r4
   16f9c:	vmov	r1, s0
   16fa0:	bl	169b8 <__assert_fail@plt+0x50cc>
   16fa4:	cmp	r0, #0
   16fa8:	beq	17088 <__assert_fail@plt+0x579c>
   16fac:	ldr	r1, [r4, #8]
   16fb0:	ldr	r2, [r4, #24]
   16fb4:	mov	r0, sl
   16fb8:	blx	r2
   16fbc:	mov	r7, r0
   16fc0:	ldr	r0, [r4, #8]
   16fc4:	cmp	r7, r0
   16fc8:	bcs	170ec <__assert_fail@plt+0x5800>
   16fcc:	ldr	r5, [r4]
   16fd0:	mov	r9, r5
   16fd4:	ldr	r1, [r9, r7, lsl #3]!
   16fd8:	cmp	r1, #0
   16fdc:	beq	17034 <__assert_fail@plt+0x5748>
   16fe0:	cmp	r1, sl
   16fe4:	mov	r0, sl
   16fe8:	beq	17004 <__assert_fail@plt+0x5718>
   16fec:	ldr	r2, [r4, #28]
   16ff0:	mov	r0, sl
   16ff4:	blx	r2
   16ff8:	cmp	r0, #0
   16ffc:	beq	1709c <__assert_fail@plt+0x57b0>
   17000:	ldr	r0, [r9]
   17004:	cmp	r0, #0
   17008:	bne	170ec <__assert_fail@plt+0x5800>
   1700c:	ldr	r0, [r9]
   17010:	cmp	r0, #0
   17014:	beq	17034 <__assert_fail@plt+0x5748>
   17018:	ldr	r0, [r4, #36]	; 0x24
   1701c:	cmp	r0, #0
   17020:	beq	17054 <__assert_fail@plt+0x5768>
   17024:	mov	r1, r0
   17028:	ldr	r2, [r1, #4]!
   1702c:	str	r2, [r4, #36]	; 0x24
   17030:	b	17068 <__assert_fail@plt+0x577c>
   17034:	str	sl, [r9]
   17038:	ldr	r0, [r4, #12]
   1703c:	ldr	r1, [r4, #16]
   17040:	add	r0, r0, #1
   17044:	add	r1, r1, #1
   17048:	str	r0, [r4, #12]
   1704c:	str	r1, [r4, #16]
   17050:	b	17084 <__assert_fail@plt+0x5798>
   17054:	mov	r0, #8
   17058:	bl	1cf00 <__assert_fail@plt+0xb614>
   1705c:	cmp	r0, #0
   17060:	beq	17094 <__assert_fail@plt+0x57a8>
   17064:	add	r1, r0, #4
   17068:	str	sl, [r0]
   1706c:	ldr	r2, [r9, #4]
   17070:	str	r2, [r1]
   17074:	str	r0, [r9, #4]
   17078:	ldr	r0, [r4, #16]
   1707c:	add	r0, r0, #1
   17080:	str	r0, [r4, #16]
   17084:	mov	r7, #1
   17088:	mov	r0, r7
   1708c:	sub	sp, fp, #28
   17090:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17094:	mvn	r7, #0
   17098:	b	17088 <__assert_fail@plt+0x579c>
   1709c:	add	r6, r5, r7, lsl #3
   170a0:	ldr	r0, [r6, #4]!
   170a4:	cmp	r0, #0
   170a8:	beq	1700c <__assert_fail@plt+0x5720>
   170ac:	ldr	r1, [r0]
   170b0:	cmp	r1, sl
   170b4:	beq	170e0 <__assert_fail@plt+0x57f4>
   170b8:	ldr	r2, [r4, #28]
   170bc:	mov	r0, sl
   170c0:	blx	r2
   170c4:	ldr	r6, [r6]
   170c8:	cmp	r0, #0
   170cc:	beq	170a0 <__assert_fail@plt+0x57b4>
   170d0:	ldr	r0, [r6]
   170d4:	cmp	r0, #0
   170d8:	beq	1700c <__assert_fail@plt+0x5720>
   170dc:	b	170ec <__assert_fail@plt+0x5800>
   170e0:	mov	r0, sl
   170e4:	cmp	r0, #0
   170e8:	beq	1700c <__assert_fail@plt+0x5720>
   170ec:	bl	118bc <abort@plt>
   170f0:	stclcc	12, cr12, [ip, #820]	; 0x334
   170f4:	svccc	0x00666666
   170f8:	svccc	0x008ccccd
   170fc:	svccc	0x004ccccd
   17100:	svcmi	0x00800000
   17104:	push	{r4, sl, fp, lr}
   17108:	add	fp, sp, #8
   1710c:	sub	sp, sp, #8
   17110:	add	r2, sp, #4
   17114:	mov	r4, r1
   17118:	bl	16db8 <__assert_fail@plt+0x54cc>
   1711c:	cmn	r0, #1
   17120:	beq	17134 <__assert_fail@plt+0x5848>
   17124:	ldr	r1, [sp, #4]
   17128:	cmp	r0, #0
   1712c:	moveq	r4, r1
   17130:	b	17138 <__assert_fail@plt+0x584c>
   17134:	mov	r4, #0
   17138:	mov	r0, r4
   1713c:	sub	sp, fp, #8
   17140:	pop	{r4, sl, fp, pc}
   17144:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   17148:	add	fp, sp, #24
   1714c:	mov	r9, r1
   17150:	ldr	r1, [r0, #8]
   17154:	ldr	r2, [r0, #24]
   17158:	mov	r5, r0
   1715c:	mov	r0, r9
   17160:	blx	r2
   17164:	mov	r7, r0
   17168:	ldr	r0, [r5, #8]
   1716c:	cmp	r7, r0
   17170:	bcs	173d0 <__assert_fail@plt+0x5ae4>
   17174:	ldr	r6, [r5]
   17178:	mov	r8, #0
   1717c:	mov	r4, r6
   17180:	ldr	r1, [r4, r7, lsl #3]!
   17184:	cmp	r1, #0
   17188:	beq	1723c <__assert_fail@plt+0x5950>
   1718c:	cmp	r1, r9
   17190:	beq	171ac <__assert_fail@plt+0x58c0>
   17194:	ldr	r2, [r5, #28]
   17198:	mov	r0, r9
   1719c:	blx	r2
   171a0:	cmp	r0, #0
   171a4:	beq	171e4 <__assert_fail@plt+0x58f8>
   171a8:	ldr	r9, [r4]
   171ac:	add	r0, r6, r7, lsl #3
   171b0:	ldr	r0, [r0, #4]
   171b4:	cmp	r0, #0
   171b8:	beq	1722c <__assert_fail@plt+0x5940>
   171bc:	ldm	r0, {r1, r2}
   171c0:	stm	r4, {r1, r2}
   171c4:	mov	r1, #0
   171c8:	str	r1, [r0]
   171cc:	ldr	r1, [r5, #36]	; 0x24
   171d0:	str	r1, [r0, #4]
   171d4:	str	r0, [r5, #36]	; 0x24
   171d8:	cmp	r9, #0
   171dc:	bne	17274 <__assert_fail@plt+0x5988>
   171e0:	b	1723c <__assert_fail@plt+0x5950>
   171e4:	add	r7, r6, r7, lsl #3
   171e8:	ldr	r0, [r7, #4]!
   171ec:	cmp	r0, #0
   171f0:	beq	1723c <__assert_fail@plt+0x5950>
   171f4:	ldr	r1, [r0]
   171f8:	cmp	r1, r9
   171fc:	beq	17244 <__assert_fail@plt+0x5958>
   17200:	ldr	r2, [r5, #28]
   17204:	mov	r0, r9
   17208:	blx	r2
   1720c:	ldr	r1, [r7]
   17210:	cmp	r0, #0
   17214:	bne	1724c <__assert_fail@plt+0x5960>
   17218:	ldr	r0, [r1, #4]!
   1721c:	cmp	r0, #0
   17220:	mov	r7, r1
   17224:	bne	171f4 <__assert_fail@plt+0x5908>
   17228:	b	1723c <__assert_fail@plt+0x5950>
   1722c:	mov	r0, #0
   17230:	str	r0, [r4]
   17234:	cmp	r9, #0
   17238:	bne	17274 <__assert_fail@plt+0x5988>
   1723c:	mov	r0, r8
   17240:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   17244:	mov	r1, r0
   17248:	b	17250 <__assert_fail@plt+0x5964>
   1724c:	ldr	r9, [r1]
   17250:	ldr	r0, [r1, #4]
   17254:	str	r0, [r7]
   17258:	mov	r0, #0
   1725c:	str	r0, [r1]
   17260:	ldr	r0, [r5, #36]	; 0x24
   17264:	str	r0, [r1, #4]
   17268:	str	r1, [r5, #36]	; 0x24
   1726c:	cmp	r9, #0
   17270:	beq	1723c <__assert_fail@plt+0x5950>
   17274:	ldr	r0, [r5, #16]
   17278:	sub	r0, r0, #1
   1727c:	str	r0, [r5, #16]
   17280:	ldr	r0, [r4]
   17284:	cmp	r0, #0
   17288:	bne	17390 <__assert_fail@plt+0x5aa4>
   1728c:	ldr	r0, [r5, #12]
   17290:	vldr	s0, [r5, #8]
   17294:	sub	r1, r0, #1
   17298:	str	r1, [r5, #12]
   1729c:	vmov	s2, r1
   172a0:	ldr	r0, [r5, #20]
   172a4:	vcvt.f32.u32	s0, s0
   172a8:	vcvt.f32.u32	s2, s2
   172ac:	vldr	s4, [r0]
   172b0:	vmul.f32	s6, s4, s0
   172b4:	vcmpe.f32	s6, s2
   172b8:	vmrs	APSR_nzcv, fpscr
   172bc:	ble	17390 <__assert_fail@plt+0x5aa4>
   172c0:	movw	r1, #152	; 0x98
   172c4:	movt	r1, #2
   172c8:	cmp	r0, r1
   172cc:	beq	17324 <__assert_fail@plt+0x5a38>
   172d0:	vldr	s8, [pc, #252]	; 173d4 <__assert_fail@plt+0x5ae8>
   172d4:	vldr	s6, [r0, #8]
   172d8:	vcmpe.f32	s6, s8
   172dc:	vmrs	APSR_nzcv, fpscr
   172e0:	ble	17310 <__assert_fail@plt+0x5a24>
   172e4:	vldr	s10, [pc, #236]	; 173d8 <__assert_fail@plt+0x5aec>
   172e8:	vcmpe.f32	s6, s10
   172ec:	vmrs	APSR_nzcv, fpscr
   172f0:	bpl	17310 <__assert_fail@plt+0x5a24>
   172f4:	vcmpe.f32	s4, #0.0
   172f8:	vmrs	APSR_nzcv, fpscr
   172fc:	vldrge	s10, [r0, #12]
   17300:	vldrge	s12, [pc, #212]	; 173dc <__assert_fail@plt+0x5af0>
   17304:	vcmpege.f32	s10, s12
   17308:	vmrsge	APSR_nzcv, fpscr
   1730c:	bgt	1739c <__assert_fail@plt+0x5ab0>
   17310:	vldr	s4, [pc, #200]	; 173e0 <__assert_fail@plt+0x5af4>
   17314:	movw	r0, #152	; 0x98
   17318:	movt	r0, #2
   1731c:	str	r0, [r5, #20]
   17320:	b	17328 <__assert_fail@plt+0x5a3c>
   17324:	mov	r0, r1
   17328:	vmul.f32	s4, s4, s0
   1732c:	vcmpe.f32	s4, s2
   17330:	vmrs	APSR_nzcv, fpscr
   17334:	ble	17390 <__assert_fail@plt+0x5aa4>
   17338:	ldrb	r1, [r0, #16]
   1733c:	vldr	s2, [r0, #4]
   17340:	cmp	r1, #0
   17344:	vmul.f32	s0, s2, s0
   17348:	vldreq	s2, [r0, #8]
   1734c:	mov	r0, r5
   17350:	vmuleq.f32	s0, s0, s2
   17354:	vcvt.u32.f32	s0, s0
   17358:	vmov	r1, s0
   1735c:	bl	169b8 <__assert_fail@plt+0x50cc>
   17360:	cmp	r0, #0
   17364:	bne	17390 <__assert_fail@plt+0x5aa4>
   17368:	ldr	r0, [r5, #36]	; 0x24
   1736c:	cmp	r0, #0
   17370:	beq	17388 <__assert_fail@plt+0x5a9c>
   17374:	ldr	r4, [r0, #4]
   17378:	bl	16008 <__assert_fail@plt+0x471c>
   1737c:	cmp	r4, #0
   17380:	mov	r0, r4
   17384:	bne	17374 <__assert_fail@plt+0x5a88>
   17388:	mov	r0, #0
   1738c:	str	r0, [r5, #36]	; 0x24
   17390:	mov	r8, r9
   17394:	mov	r0, r8
   17398:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1739c:	vadd.f32	s8, s4, s8
   173a0:	vcmpe.f32	s8, s6
   173a4:	vmrs	APSR_nzcv, fpscr
   173a8:	bpl	17310 <__assert_fail@plt+0x5a24>
   173ac:	vldr	s6, [r0, #4]
   173b0:	vmov.f32	s10, #112	; 0x3f800000  1.0
   173b4:	vcmpe.f32	s6, s10
   173b8:	vmrs	APSR_nzcv, fpscr
   173bc:	bhi	17310 <__assert_fail@plt+0x5a24>
   173c0:	vcmpe.f32	s8, s6
   173c4:	vmrs	APSR_nzcv, fpscr
   173c8:	bmi	17328 <__assert_fail@plt+0x5a3c>
   173cc:	b	17310 <__assert_fail@plt+0x5a24>
   173d0:	bl	118bc <abort@plt>
   173d4:	stclcc	12, cr12, [ip, #820]	; 0x334
   173d8:	svccc	0x00666666
   173dc:	svccc	0x008ccccd
   173e0:	andeq	r0, r0, r0
   173e4:	b	17144 <__assert_fail@plt+0x5858>
   173e8:	push	{r4, r5, fp, lr}
   173ec:	add	fp, sp, #8
   173f0:	mov	r5, r0
   173f4:	ldr	r0, [r0]
   173f8:	mov	r4, r1
   173fc:	bl	1e5ec <__assert_fail@plt+0xcd00>
   17400:	ldrd	r2, [r5, #8]
   17404:	eor	r0, r2, r0
   17408:	mov	r1, r3
   1740c:	mov	r2, r4
   17410:	mov	r3, #0
   17414:	bl	1ed30 <__assert_fail@plt+0xd444>
   17418:	mov	r0, r2
   1741c:	pop	{r4, r5, fp, pc}
   17420:	push	{r4, r5, r6, r7, fp, lr}
   17424:	add	fp, sp, #16
   17428:	ldrd	r2, [r1, #8]
   1742c:	ldrd	r4, [r0, #8]
   17430:	eor	r3, r5, r3
   17434:	eor	r2, r4, r2
   17438:	orrs	r2, r2, r3
   1743c:	mov	r2, #0
   17440:	bne	17470 <__assert_fail@plt+0x5b84>
   17444:	ldrd	r4, [r1, #16]
   17448:	ldrd	r6, [r0, #16]
   1744c:	eor	r3, r7, r5
   17450:	eor	r7, r6, r4
   17454:	orrs	r3, r7, r3
   17458:	bne	17470 <__assert_fail@plt+0x5b84>
   1745c:	ldr	r1, [r1]
   17460:	ldr	r0, [r0]
   17464:	bl	11520 <strcmp@plt>
   17468:	clz	r0, r0
   1746c:	lsr	r2, r0, #5
   17470:	mov	r0, r2
   17474:	pop	{r4, r5, r6, r7, fp, pc}
   17478:	push	{r4, sl, fp, lr}
   1747c:	add	fp, sp, #8
   17480:	mov	r4, r0
   17484:	ldr	r0, [r0]
   17488:	bl	16008 <__assert_fail@plt+0x471c>
   1748c:	mov	r0, r4
   17490:	pop	{r4, sl, fp, lr}
   17494:	b	16008 <__assert_fail@plt+0x471c>
   17498:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1749c:	add	fp, sp, #28
   174a0:	sub	sp, sp, #4
   174a4:	vpush	{d8-d9}
   174a8:	sub	sp, sp, #104	; 0x68
   174ac:	mov	r7, r3
   174b0:	mov	r6, r2
   174b4:	mov	r9, r1
   174b8:	str	r0, [sp, #44]	; 0x2c
   174bc:	bl	11838 <localeconv@plt>
   174c0:	ldr	r5, [r0]
   174c4:	mov	r4, r0
   174c8:	mov	r0, r5
   174cc:	bl	11718 <strlen@plt>
   174d0:	movw	r2, #65475	; 0xffc3
   174d4:	sub	r1, r0, #1
   174d8:	cmp	r1, #16
   174dc:	movt	r2, #1
   174e0:	movcc	r2, r5
   174e4:	ldr	r5, [r4, #4]
   174e8:	ldr	r4, [r4, #8]
   174ec:	movcs	r0, #1
   174f0:	str	r0, [sp, #16]
   174f4:	str	r2, [sp, #12]
   174f8:	mov	r0, r5
   174fc:	bl	11718 <strlen@plt>
   17500:	movw	r3, #64223	; 0xfadf
   17504:	cmp	r0, #17
   17508:	movw	r0, #647	; 0x287
   1750c:	ldr	r2, [fp, #16]
   17510:	ldr	sl, [fp, #8]
   17514:	ldr	r8, [fp, #12]
   17518:	str	r6, [sp, #28]
   1751c:	str	r7, [sp, #36]	; 0x24
   17520:	str	r4, [sp, #20]
   17524:	movt	r3, #1
   17528:	add	r1, r6, r0
   1752c:	movcc	r3, r5
   17530:	ands	r0, r7, #32
   17534:	ldr	r5, [fp, #20]
   17538:	str	r1, [sp, #32]
   1753c:	str	r0, [sp, #24]
   17540:	mov	r0, #1000	; 0x3e8
   17544:	str	r3, [sp, #52]	; 0x34
   17548:	movwne	r0, #1024	; 0x400
   1754c:	str	r0, [sp, #40]	; 0x28
   17550:	and	r0, r7, #3
   17554:	str	r0, [sp, #48]	; 0x30
   17558:	subs	r0, sl, r2
   1755c:	sbcs	r0, r8, r5
   17560:	bcs	17654 <__assert_fail@plt+0x5d68>
   17564:	orrs	r0, sl, r8
   17568:	mov	r4, r9
   1756c:	beq	1773c <__assert_fail@plt+0x5e50>
   17570:	ldr	r5, [fp, #20]
   17574:	mov	r0, r2
   17578:	mov	r2, sl
   1757c:	mov	r3, r8
   17580:	mov	r1, r5
   17584:	bl	1ed30 <__assert_fail@plt+0xd444>
   17588:	ldr	r2, [fp, #16]
   1758c:	mov	r6, r0
   17590:	mov	r3, r1
   17594:	umull	r0, r1, r0, sl
   17598:	mla	r1, r6, r8, r1
   1759c:	mla	r1, r3, sl, r1
   175a0:	subs	r0, r2, r0
   175a4:	sbc	r1, r5, r1
   175a8:	orrs	r0, r0, r1
   175ac:	bne	1773c <__assert_fail@plt+0x5e50>
   175b0:	ldr	r5, [sp, #44]	; 0x2c
   175b4:	mov	r1, r4
   175b8:	mov	r2, r6
   175bc:	mov	r8, r3
   175c0:	mov	r0, r5
   175c4:	bl	1ed30 <__assert_fail@plt+0xd444>
   175c8:	mov	r7, r0
   175cc:	mov	r9, r1
   175d0:	umull	r0, r1, r0, r6
   175d4:	mov	r2, #10
   175d8:	mov	r3, r8
   175dc:	mla	r1, r7, r8, r1
   175e0:	subs	r0, r5, r0
   175e4:	mla	r1, r9, r6, r1
   175e8:	umull	sl, r0, r0, r2
   175ec:	mov	r2, r6
   175f0:	sbc	r1, r4, r1
   175f4:	add	r1, r1, r1, lsl #2
   175f8:	add	r5, r0, r1, lsl #1
   175fc:	mov	r0, sl
   17600:	mov	r1, r5
   17604:	bl	1ed30 <__assert_fail@plt+0xd444>
   17608:	mov	r4, r0
   1760c:	umull	r0, r2, r0, r6
   17610:	mla	r2, r4, r8, r2
   17614:	subs	r0, sl, r0
   17618:	mla	r1, r1, r6, r2
   1761c:	mov	r2, #2
   17620:	sbc	r1, r5, r1
   17624:	subs	r3, r6, r0, lsl #1
   17628:	lsl	r1, r1, #1
   1762c:	orr	r1, r1, r0, lsr #31
   17630:	sbcs	r3, r8, r1
   17634:	orr	r5, r1, r0, lsl #1
   17638:	movwcc	r2, #3
   1763c:	cmp	r5, #0
   17640:	movwne	r5, #1
   17644:	rsbs	r0, r6, r0, lsl #1
   17648:	sbcs	r0, r1, r8
   1764c:	movcs	r5, r2
   17650:	b	176cc <__assert_fail@plt+0x5de0>
   17654:	mov	r0, sl
   17658:	mov	r1, r8
   1765c:	mov	r3, r5
   17660:	bl	1ed30 <__assert_fail@plt+0xd444>
   17664:	ldr	r2, [fp, #16]
   17668:	mov	r6, r0
   1766c:	mov	r3, r1
   17670:	mov	r4, r9
   17674:	umull	r0, r1, r0, r2
   17678:	mla	r1, r6, r5, r1
   1767c:	subs	r0, sl, r0
   17680:	mla	r1, r3, r2, r1
   17684:	sbc	r1, r8, r1
   17688:	orrs	r0, r0, r1
   1768c:	bne	1773c <__assert_fail@plt+0x5e50>
   17690:	ldr	r5, [sp, #44]	; 0x2c
   17694:	mov	r2, r6
   17698:	umull	r7, r0, r6, r5
   1769c:	mla	r0, r6, r4, r0
   176a0:	mla	r9, r3, r5, r0
   176a4:	mov	r0, r7
   176a8:	mov	r1, r9
   176ac:	bl	1ed30 <__assert_fail@plt+0xd444>
   176b0:	ldr	r2, [fp, #16]
   176b4:	eor	r1, r1, r4
   176b8:	eor	r0, r0, r5
   176bc:	orrs	r0, r0, r1
   176c0:	bne	1773c <__assert_fail@plt+0x5e50>
   176c4:	mov	r5, #0
   176c8:	mov	r4, #0
   176cc:	ldr	r0, [sp, #36]	; 0x24
   176d0:	ldr	r2, [sp, #40]	; 0x28
   176d4:	mvn	r6, #0
   176d8:	ands	r8, r0, #16
   176dc:	beq	176f0 <__assert_fail@plt+0x5e04>
   176e0:	subs	r0, r7, r2
   176e4:	mov	r6, #0
   176e8:	sbcs	r0, r9, #0
   176ec:	bcs	17c18 <__assert_fail@plt+0x632c>
   176f0:	ldr	r0, [sp, #32]
   176f4:	mov	sl, r7
   176f8:	str	r0, [sp, #44]	; 0x2c
   176fc:	ldr	r0, [sp, #48]	; 0x30
   17700:	cmp	r0, #0
   17704:	beq	17a2c <__assert_fail@plt+0x6140>
   17708:	cmp	r0, #1
   1770c:	bne	17aa0 <__assert_fail@plt+0x61b4>
   17710:	rsbs	r1, r5, #0
   17714:	mov	r0, #0
   17718:	and	r3, sl, #1
   1771c:	ldr	r5, [sp, #44]	; 0x2c
   17720:	sbc	r0, r0, #0
   17724:	eor	r1, r3, r1
   17728:	orrs	r0, r1, r0
   1772c:	addne	r4, r4, #1
   17730:	cmp	r4, #5
   17734:	bgt	17a3c <__assert_fail@plt+0x6150>
   17738:	b	17a90 <__assert_fail@plt+0x61a4>
   1773c:	ldr	r9, [fp, #20]
   17740:	mov	r0, r2
   17744:	mov	r1, r9
   17748:	bl	1ecbc <__assert_fail@plt+0xd3d0>
   1774c:	vmov	d8, r0, r1
   17750:	ldr	r0, [sp, #44]	; 0x2c
   17754:	mov	r1, r4
   17758:	bl	1ecbc <__assert_fail@plt+0xd3d0>
   1775c:	mov	r6, r0
   17760:	mov	r7, r1
   17764:	mov	r0, sl
   17768:	mov	r1, r8
   1776c:	bl	1ecbc <__assert_fail@plt+0xd3d0>
   17770:	vmov	d17, r6, r7
   17774:	ldr	r7, [sp, #36]	; 0x24
   17778:	vmov	d16, r0, r1
   1777c:	vdiv.f64	d16, d16, d8
   17780:	vmul.f64	d8, d16, d17
   17784:	tst	r7, #16
   17788:	bne	177fc <__assert_fail@plt+0x5f10>
   1778c:	ldr	r0, [sp, #48]	; 0x30
   17790:	ldr	sl, [sp, #28]
   17794:	cmp	r0, #1
   17798:	beq	17984 <__assert_fail@plt+0x6098>
   1779c:	vldr	d16, [pc, #756]	; 17a98 <__assert_fail@plt+0x61ac>
   177a0:	ldr	r8, [sp, #32]
   177a4:	vcmpe.f64	d8, d16
   177a8:	vmrs	APSR_nzcv, fpscr
   177ac:	bpl	17988 <__assert_fail@plt+0x609c>
   177b0:	mov	r6, r0
   177b4:	vmov	r0, r1, d8
   177b8:	bl	1ed80 <__assert_fail@plt+0xd494>
   177bc:	mov	r4, r0
   177c0:	mov	r5, r1
   177c4:	bl	1ecbc <__assert_fail@plt+0xd3d0>
   177c8:	vmov	d16, r0, r1
   177cc:	clz	r0, r6
   177d0:	mov	r2, #0
   177d4:	vcmp.f64	d8, d16
   177d8:	lsr	r0, r0, #5
   177dc:	vmrs	APSR_nzcv, fpscr
   177e0:	movwne	r2, #1
   177e4:	and	r0, r0, r2
   177e8:	adds	r0, r0, r4
   177ec:	adc	r1, r5, #0
   177f0:	bl	1ecbc <__assert_fail@plt+0xd3d0>
   177f4:	vmov	d8, r0, r1
   177f8:	b	17988 <__assert_fail@plt+0x609c>
   177fc:	ldr	r0, [sp, #40]	; 0x28
   17800:	vmov.f64	d16, #112	; 0x3f800000  1.0
   17804:	mov	r6, #0
   17808:	vmov	s0, r0
   1780c:	vcvt.f64.u32	d17, s0
   17810:	ldr	sl, [sp, #28]
   17814:	add	r6, r6, #1
   17818:	vmul.f64	d16, d16, d17
   1781c:	cmp	r6, #7
   17820:	vmulls.f64	d18, d16, d17
   17824:	vcmpels.f64	d18, d8
   17828:	vmrsls	APSR_nzcv, fpscr
   1782c:	bls	17814 <__assert_fail@plt+0x5f28>
   17830:	ldr	r0, [sp, #48]	; 0x30
   17834:	ldr	r8, [sp, #32]
   17838:	ldr	r5, [sp, #16]
   1783c:	vdiv.f64	d8, d8, d16
   17840:	vmov.f64	d16, d8
   17844:	cmp	r0, #1
   17848:	beq	178ac <__assert_fail@plt+0x5fc0>
   1784c:	vldr	d16, [pc, #580]	; 17a98 <__assert_fail@plt+0x61ac>
   17850:	vcmpe.f64	d8, d16
   17854:	vmov.f64	d16, d8
   17858:	vmrs	APSR_nzcv, fpscr
   1785c:	bpl	178ac <__assert_fail@plt+0x5fc0>
   17860:	vmov	r0, r1, d8
   17864:	bl	1ed80 <__assert_fail@plt+0xd494>
   17868:	mov	r4, r0
   1786c:	mov	r5, r1
   17870:	bl	1ecbc <__assert_fail@plt+0xd3d0>
   17874:	vmov	d16, r0, r1
   17878:	ldr	r0, [sp, #48]	; 0x30
   1787c:	mov	r2, #0
   17880:	vcmp.f64	d8, d16
   17884:	vmrs	APSR_nzcv, fpscr
   17888:	movwne	r2, #1
   1788c:	clz	r0, r0
   17890:	lsr	r0, r0, #5
   17894:	and	r0, r0, r2
   17898:	adds	r0, r0, r4
   1789c:	adc	r1, r5, #0
   178a0:	ldr	r5, [sp, #16]
   178a4:	bl	1ecbc <__assert_fail@plt+0xd3d0>
   178a8:	vmov	d16, r0, r1
   178ac:	movw	r3, #178	; 0xb2
   178b0:	mov	r0, sl
   178b4:	mov	r1, #1
   178b8:	mvn	r2, #0
   178bc:	vstr	d16, [sp]
   178c0:	movt	r3, #2
   178c4:	bl	11754 <__sprintf_chk@plt>
   178c8:	ldr	r1, [sp, #24]
   178cc:	mov	r0, #3
   178d0:	cmp	r1, #0
   178d4:	movwne	r0, #2
   178d8:	add	r4, r0, r5
   178dc:	mov	r0, sl
   178e0:	bl	11718 <strlen@plt>
   178e4:	cmp	r4, r0
   178e8:	bcc	1790c <__assert_fail@plt+0x6020>
   178ec:	mov	r2, r0
   178f0:	add	r5, r5, #1
   178f4:	tst	r7, #8
   178f8:	beq	179b8 <__assert_fail@plt+0x60cc>
   178fc:	add	r0, sl, r2
   17900:	ldrb	r0, [r0, #-1]
   17904:	cmp	r0, #48	; 0x30
   17908:	bne	179b8 <__assert_fail@plt+0x60cc>
   1790c:	ldr	r0, [sp, #48]	; 0x30
   17910:	vmov.f64	d9, #36	; 0x41200000  10.0
   17914:	vmul.f64	d8, d8, d9
   17918:	cmp	r0, #1
   1791c:	beq	17978 <__assert_fail@plt+0x608c>
   17920:	vldr	d16, [pc, #368]	; 17a98 <__assert_fail@plt+0x61ac>
   17924:	vcmpe.f64	d8, d16
   17928:	vmrs	APSR_nzcv, fpscr
   1792c:	bpl	17978 <__assert_fail@plt+0x608c>
   17930:	vmov	r0, r1, d8
   17934:	bl	1ed80 <__assert_fail@plt+0xd494>
   17938:	mov	r4, r0
   1793c:	mov	r5, r1
   17940:	bl	1ecbc <__assert_fail@plt+0xd3d0>
   17944:	vmov	d16, r0, r1
   17948:	ldr	r0, [sp, #48]	; 0x30
   1794c:	mov	r2, #0
   17950:	vcmp.f64	d8, d16
   17954:	vmrs	APSR_nzcv, fpscr
   17958:	movwne	r2, #1
   1795c:	clz	r0, r0
   17960:	lsr	r0, r0, #5
   17964:	and	r0, r0, r2
   17968:	adds	r0, r0, r4
   1796c:	adc	r1, r5, #0
   17970:	bl	1ecbc <__assert_fail@plt+0xd3d0>
   17974:	vmov	d8, r0, r1
   17978:	vdiv.f64	d16, d8, d9
   1797c:	vstr	d16, [sp]
   17980:	b	17990 <__assert_fail@plt+0x60a4>
   17984:	ldr	r8, [sp, #32]
   17988:	mvn	r6, #0
   1798c:	vstr	d8, [sp]
   17990:	movw	r3, #172	; 0xac
   17994:	mov	r0, sl
   17998:	mov	r1, #1
   1799c:	mvn	r2, #0
   179a0:	movt	r3, #2
   179a4:	bl	11754 <__sprintf_chk@plt>
   179a8:	mov	r0, sl
   179ac:	bl	11718 <strlen@plt>
   179b0:	mov	r2, r0
   179b4:	mov	r5, #0
   179b8:	sub	r4, r8, r2
   179bc:	mov	r1, sl
   179c0:	mov	r0, r4
   179c4:	bl	11544 <memmove@plt>
   179c8:	sub	r5, r8, r5
   179cc:	tst	r7, #4
   179d0:	bne	17af8 <__assert_fail@plt+0x620c>
   179d4:	ldr	r3, [sp, #40]	; 0x28
   179d8:	ldr	r5, [fp, #16]
   179dc:	tst	r7, #128	; 0x80
   179e0:	beq	17d34 <__assert_fail@plt+0x6448>
   179e4:	cmn	r6, #1
   179e8:	bgt	17ccc <__assert_fail@plt+0x63e0>
   179ec:	subs	r0, r5, #2
   179f0:	mov	r6, #0
   179f4:	sbcs	r0, r9, #0
   179f8:	bcc	17ccc <__assert_fail@plt+0x63e0>
   179fc:	mov	r0, #0
   17a00:	mov	r1, #1
   17a04:	mov	r6, #0
   17a08:	cmp	r6, #7
   17a0c:	beq	17cc8 <__assert_fail@plt+0x63dc>
   17a10:	umull	r1, r2, r1, r3
   17a14:	add	r6, r6, #1
   17a18:	mla	r0, r0, r3, r2
   17a1c:	subs	r2, r1, r5
   17a20:	sbcs	r2, r0, r9
   17a24:	bcc	17a08 <__assert_fail@plt+0x611c>
   17a28:	b	17ccc <__assert_fail@plt+0x63e0>
   17a2c:	add	r0, r4, r5
   17a30:	ldr	r5, [sp, #44]	; 0x2c
   17a34:	cmp	r0, #1
   17a38:	blt	17a90 <__assert_fail@plt+0x61a4>
   17a3c:	adds	sl, sl, #1
   17a40:	adc	r9, r9, #0
   17a44:	cmp	r6, #7
   17a48:	bgt	17a90 <__assert_fail@plt+0x61a4>
   17a4c:	cmp	r8, #0
   17a50:	beq	17a90 <__assert_fail@plt+0x61a4>
   17a54:	eor	r0, sl, r2
   17a58:	orrs	r0, r0, r9
   17a5c:	ldreq	r0, [sp, #36]	; 0x24
   17a60:	addeq	r6, r6, #1
   17a64:	moveq	r9, #0
   17a68:	moveq	sl, #1
   17a6c:	tsteq	r0, #8
   17a70:	bne	17a90 <__assert_fail@plt+0x61a4>
   17a74:	ldr	r2, [sp, #16]
   17a78:	mov	r0, #48	; 0x30
   17a7c:	ldr	r1, [sp, #12]
   17a80:	strb	r0, [r5, #-1]!
   17a84:	sub	r5, r5, r2
   17a88:	mov	r0, r5
   17a8c:	bl	11574 <memcpy@plt>
   17a90:	ldr	r8, [sp, #32]
   17a94:	b	17aa8 <__assert_fail@plt+0x61bc>
   17a98:	andeq	r0, r0, r0
   17a9c:	mvnsmi	r0, #0
   17aa0:	ldr	r8, [sp, #32]
   17aa4:	ldr	r5, [sp, #44]	; 0x2c
   17aa8:	mov	r4, r5
   17aac:	mov	r0, sl
   17ab0:	mov	r1, r9
   17ab4:	mov	r2, #10
   17ab8:	mov	r3, #0
   17abc:	bl	1ed30 <__assert_fail@plt+0xd444>
   17ac0:	add	r2, r0, r0, lsl #2
   17ac4:	sub	r2, sl, r2, lsl #1
   17ac8:	orr	r2, r2, #48	; 0x30
   17acc:	strb	r2, [r4, #-1]!
   17ad0:	rsbs	r2, sl, #9
   17ad4:	mov	sl, r0
   17ad8:	rscs	r2, r9, #0
   17adc:	mov	r9, r1
   17ae0:	bcc	17aac <__assert_fail@plt+0x61c0>
   17ae4:	ldr	r7, [sp, #36]	; 0x24
   17ae8:	ldr	r9, [fp, #20]
   17aec:	ldr	sl, [sp, #28]
   17af0:	tst	r7, #4
   17af4:	beq	179d4 <__assert_fail@plt+0x60e8>
   17af8:	ldr	r0, [sp, #52]	; 0x34
   17afc:	mov	r7, r5
   17b00:	str	r6, [sp, #16]
   17b04:	sub	r5, r5, r4
   17b08:	bl	11718 <strlen@plt>
   17b0c:	add	r8, sp, #56	; 0x38
   17b10:	str	r0, [sp, #48]	; 0x30
   17b14:	mov	r1, r4
   17b18:	mov	r2, r5
   17b1c:	mov	r0, r8
   17b20:	bl	11574 <memcpy@plt>
   17b24:	ldr	r0, [sp, #20]
   17b28:	ldrb	r6, [r0]
   17b2c:	cmp	r6, #255	; 0xff
   17b30:	mov	r9, r6
   17b34:	moveq	r9, r5
   17b38:	cmp	r6, #0
   17b3c:	mvneq	r9, #0
   17b40:	cmp	r9, r5
   17b44:	movhi	r9, r5
   17b48:	sub	r4, r7, r9
   17b4c:	sub	r7, r5, r9
   17b50:	mov	r2, r9
   17b54:	add	r1, r8, r7
   17b58:	mov	r0, r4
   17b5c:	bl	11574 <memcpy@plt>
   17b60:	cmp	r7, #0
   17b64:	beq	17bf0 <__assert_fail@plt+0x6304>
   17b68:	clz	r0, r6
   17b6c:	ldr	r8, [sp, #20]
   17b70:	lsr	sl, r0, #5
   17b74:	ldr	r0, [sp, #48]	; 0x30
   17b78:	rsb	r0, r0, #0
   17b7c:	str	r0, [sp, #44]	; 0x2c
   17b80:	ldr	r0, [sp, #44]	; 0x2c
   17b84:	ldr	r1, [sp, #52]	; 0x34
   17b88:	ldr	r2, [sp, #48]	; 0x30
   17b8c:	add	r4, r4, r0
   17b90:	mov	r0, r4
   17b94:	bl	11574 <memcpy@plt>
   17b98:	tst	sl, #1
   17b9c:	add	r0, sp, #56	; 0x38
   17ba0:	addeq	r8, r8, #1
   17ba4:	ldrb	r6, [r8]
   17ba8:	cmp	r6, #255	; 0xff
   17bac:	mov	r5, r6
   17bb0:	moveq	r5, r7
   17bb4:	cmp	r6, #0
   17bb8:	moveq	r5, r9
   17bbc:	cmp	r7, r5
   17bc0:	movcc	r5, r7
   17bc4:	sub	r7, r7, r5
   17bc8:	sub	r4, r4, r5
   17bcc:	mov	r2, r5
   17bd0:	add	r1, r0, r7
   17bd4:	mov	r0, r4
   17bd8:	bl	11574 <memcpy@plt>
   17bdc:	clz	r0, r6
   17be0:	cmp	r7, #0
   17be4:	mov	r9, r5
   17be8:	lsr	sl, r0, #5
   17bec:	bne	17b80 <__assert_fail@plt+0x6294>
   17bf0:	ldr	r8, [sp, #32]
   17bf4:	ldr	sl, [sp, #28]
   17bf8:	ldr	r7, [sp, #36]	; 0x24
   17bfc:	ldr	r3, [sp, #40]	; 0x28
   17c00:	ldr	r9, [fp, #20]
   17c04:	ldr	r5, [fp, #16]
   17c08:	ldr	r6, [sp, #16]
   17c0c:	tst	r7, #128	; 0x80
   17c10:	bne	179e4 <__assert_fail@plt+0x60f8>
   17c14:	b	17d34 <__assert_fail@plt+0x6448>
   17c18:	mov	r6, #0
   17c1c:	mov	r0, r7
   17c20:	mov	r1, r9
   17c24:	mov	r3, #0
   17c28:	bl	1ed30 <__assert_fail@plt+0xd444>
   17c2c:	ldr	r2, [sp, #40]	; 0x28
   17c30:	mov	sl, r0
   17c34:	mov	r9, r1
   17c38:	mls	r0, r0, r2, r7
   17c3c:	add	r0, r0, r0, lsl #2
   17c40:	add	r0, r4, r0, lsl #1
   17c44:	udiv	r4, r0, r2
   17c48:	mls	r0, r4, r2, r0
   17c4c:	lsl	r0, r0, #1
   17c50:	add	r0, r0, r5, lsr #1
   17c54:	cmp	r0, r2
   17c58:	bcs	17c70 <__assert_fail@plt+0x6384>
   17c5c:	add	r1, r0, r5
   17c60:	cmn	r0, r5
   17c64:	movwne	r1, #1
   17c68:	mov	r5, r1
   17c6c:	b	17c80 <__assert_fail@plt+0x6394>
   17c70:	add	r0, r0, r5
   17c74:	mov	r5, #2
   17c78:	cmp	r2, r0
   17c7c:	movwcc	r5, #3
   17c80:	add	r6, r6, #1
   17c84:	cmp	r6, #7
   17c88:	bhi	17c9c <__assert_fail@plt+0x63b0>
   17c8c:	subs	r0, sl, r2
   17c90:	mov	r7, sl
   17c94:	sbcs	r0, r9, #0
   17c98:	bcs	17c1c <__assert_fail@plt+0x6330>
   17c9c:	rsbs	r0, sl, #9
   17ca0:	rscs	r0, r9, #0
   17ca4:	bcc	17d50 <__assert_fail@plt+0x6464>
   17ca8:	ldr	r0, [sp, #48]	; 0x30
   17cac:	cmp	r0, #1
   17cb0:	bne	17d58 <__assert_fail@plt+0x646c>
   17cb4:	and	r0, r4, #1
   17cb8:	add	r0, r5, r0
   17cbc:	cmp	r0, #2
   17cc0:	bhi	17d68 <__assert_fail@plt+0x647c>
   17cc4:	b	17d9c <__assert_fail@plt+0x64b0>
   17cc8:	mov	r6, #8
   17ccc:	and	r0, r7, #256	; 0x100
   17cd0:	tst	r7, #64	; 0x40
   17cd4:	orrsne	r1, r6, r0
   17cd8:	movne	r1, #32
   17cdc:	addne	r8, sl, #648	; 0x288
   17ce0:	strbne	r1, [sl, #647]	; 0x287
   17ce4:	cmp	r6, #0
   17ce8:	beq	17d10 <__assert_fail@plt+0x6424>
   17cec:	ldr	r1, [sp, #24]
   17cf0:	cmp	r1, #0
   17cf4:	moveq	r1, #107	; 0x6b
   17cf8:	cmpeq	r6, #1
   17cfc:	beq	17d0c <__assert_fail@plt+0x6420>
   17d00:	movw	r1, #212	; 0xd4
   17d04:	movt	r1, #2
   17d08:	ldrb	r1, [r1, r6]
   17d0c:	strb	r1, [r8], #1
   17d10:	cmp	r0, #0
   17d14:	beq	17d34 <__assert_fail@plt+0x6448>
   17d18:	ldr	r0, [sp, #24]
   17d1c:	cmp	r0, #0
   17d20:	cmpne	r6, #0
   17d24:	movne	r0, #105	; 0x69
   17d28:	strbne	r0, [r8], #1
   17d2c:	mov	r0, #66	; 0x42
   17d30:	strb	r0, [r8], #1
   17d34:	mov	r0, #0
   17d38:	strb	r0, [r8]
   17d3c:	mov	r0, r4
   17d40:	sub	sp, fp, #48	; 0x30
   17d44:	vpop	{d8-d9}
   17d48:	add	sp, sp, #4
   17d4c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17d50:	ldr	r0, [sp, #32]
   17d54:	b	176f8 <__assert_fail@plt+0x5e0c>
   17d58:	cmp	r0, #0
   17d5c:	bne	17d9c <__assert_fail@plt+0x64b0>
   17d60:	cmp	r5, #0
   17d64:	beq	17d9c <__assert_fail@plt+0x64b0>
   17d68:	adds	r0, sl, #1
   17d6c:	add	r4, r4, #1
   17d70:	mov	r5, #0
   17d74:	adc	r1, r9, #0
   17d78:	cmp	r4, #10
   17d7c:	bne	17d9c <__assert_fail@plt+0x64b0>
   17d80:	rsbs	r3, r0, #9
   17d84:	mov	r4, #0
   17d88:	mov	sl, r0
   17d8c:	mov	r9, r1
   17d90:	mov	r5, #0
   17d94:	rscs	r3, r1, #0
   17d98:	bcc	17dec <__assert_fail@plt+0x6500>
   17d9c:	ldr	r0, [sp, #36]	; 0x24
   17da0:	tst	r0, #8
   17da4:	beq	17dbc <__assert_fail@plt+0x64d0>
   17da8:	cmp	r4, #0
   17dac:	bne	17dbc <__assert_fail@plt+0x64d0>
   17db0:	ldr	r0, [sp, #32]
   17db4:	str	r0, [sp, #44]	; 0x2c
   17db8:	b	17de4 <__assert_fail@plt+0x64f8>
   17dbc:	ldr	r1, [sp, #28]
   17dc0:	ldr	r2, [sp, #16]
   17dc4:	add	r0, r4, #48	; 0x30
   17dc8:	strb	r0, [r1, #646]!	; 0x286
   17dcc:	sub	r0, r1, r2
   17dd0:	ldr	r1, [sp, #12]
   17dd4:	str	r0, [sp, #44]	; 0x2c
   17dd8:	bl	11574 <memcpy@plt>
   17ddc:	ldr	r2, [sp, #40]	; 0x28
   17de0:	mov	r5, #0
   17de4:	mov	r4, #0
   17de8:	b	176fc <__assert_fail@plt+0x5e10>
   17dec:	ldr	r0, [sp, #32]
   17df0:	mov	r5, #0
   17df4:	mov	sl, #10
   17df8:	mov	r9, #0
   17dfc:	b	176f8 <__assert_fail@plt+0x5e0c>
   17e00:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   17e04:	add	fp, sp, #24
   17e08:	sub	sp, sp, #8
   17e0c:	mov	r4, r2
   17e10:	mov	r8, r1
   17e14:	cmp	r0, #0
   17e18:	bne	17e44 <__assert_fail@plt+0x6558>
   17e1c:	movw	r0, #63262	; 0xf71e
   17e20:	movt	r0, #1
   17e24:	bl	116ac <getenv@plt>
   17e28:	cmp	r0, #0
   17e2c:	bne	17e44 <__assert_fail@plt+0x6558>
   17e30:	movw	r0, #184	; 0xb8
   17e34:	movt	r0, #2
   17e38:	bl	116ac <getenv@plt>
   17e3c:	cmp	r0, #0
   17e40:	beq	17f68 <__assert_fail@plt+0x667c>
   17e44:	mov	r6, r0
   17e48:	movw	r7, #236	; 0xec
   17e4c:	movw	r1, #224	; 0xe0
   17e50:	mov	r3, #4
   17e54:	ldrb	r5, [r6], #1
   17e58:	movt	r7, #2
   17e5c:	movt	r1, #2
   17e60:	mov	r2, r7
   17e64:	cmp	r5, #39	; 0x27
   17e68:	movne	r6, r0
   17e6c:	mov	r0, r6
   17e70:	bl	1d9d4 <__assert_fail@plt+0xc0e8>
   17e74:	sub	r1, r5, #39	; 0x27
   17e78:	cmp	r0, #0
   17e7c:	clz	r1, r1
   17e80:	lsr	r1, r1, #5
   17e84:	lsl	r5, r1, #2
   17e88:	blt	17eb0 <__assert_fail@plt+0x65c4>
   17e8c:	ldr	r0, [r7, r0, lsl #2]
   17e90:	mov	r2, #1
   17e94:	mov	r1, #0
   17e98:	str	r2, [r4]
   17e9c:	str	r1, [r4, #4]
   17ea0:	orr	r1, r0, r5
   17ea4:	mov	r0, #0
   17ea8:	str	r1, [r8]
   17eac:	b	17ee0 <__assert_fail@plt+0x65f4>
   17eb0:	movw	r0, #194	; 0xc2
   17eb4:	add	r1, sp, #4
   17eb8:	mov	r2, #0
   17ebc:	mov	r3, r4
   17ec0:	mov	r7, #0
   17ec4:	movt	r0, #2
   17ec8:	str	r0, [sp]
   17ecc:	mov	r0, r6
   17ed0:	bl	1c20c <__assert_fail@plt+0xa920>
   17ed4:	cmp	r0, #0
   17ed8:	beq	17f24 <__assert_fail@plt+0x6638>
   17edc:	str	r7, [r8]
   17ee0:	ldrd	r2, [r4]
   17ee4:	orrs	r1, r2, r3
   17ee8:	beq	17ef4 <__assert_fail@plt+0x6608>
   17eec:	sub	sp, fp, #24
   17ef0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   17ef4:	movw	r0, #63243	; 0xf70b
   17ef8:	movt	r0, #1
   17efc:	bl	116ac <getenv@plt>
   17f00:	cmp	r0, #0
   17f04:	mov	r2, #512	; 0x200
   17f08:	mov	r0, #4
   17f0c:	mov	r1, #0
   17f10:	movweq	r2, #1024	; 0x400
   17f14:	str	r2, [r4]
   17f18:	str	r1, [r4, #4]
   17f1c:	sub	sp, fp, #24
   17f20:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   17f24:	ldrb	r0, [r6]
   17f28:	sub	r0, r0, #48	; 0x30
   17f2c:	uxtb	r0, r0
   17f30:	cmp	r0, #10
   17f34:	bcc	17f60 <__assert_fail@plt+0x6674>
   17f38:	ldr	r0, [sp, #4]
   17f3c:	cmp	r0, r6
   17f40:	beq	17f90 <__assert_fail@plt+0x66a4>
   17f44:	ldrb	r2, [r6, #1]
   17f48:	add	r1, r6, #1
   17f4c:	mov	r6, r1
   17f50:	sub	r2, r2, #48	; 0x30
   17f54:	uxtb	r2, r2
   17f58:	cmp	r2, #10
   17f5c:	bcs	17f3c <__assert_fail@plt+0x6650>
   17f60:	mov	r1, r5
   17f64:	b	17ea4 <__assert_fail@plt+0x65b8>
   17f68:	movw	r0, #63243	; 0xf70b
   17f6c:	movt	r0, #1
   17f70:	bl	116ac <getenv@plt>
   17f74:	mov	r2, #512	; 0x200
   17f78:	cmp	r0, #0
   17f7c:	mov	r1, #0
   17f80:	movweq	r2, #1024	; 0x400
   17f84:	str	r2, [r4]
   17f88:	str	r1, [r4, #4]
   17f8c:	b	17ea4 <__assert_fail@plt+0x65b8>
   17f90:	ldrb	r2, [r0, #-1]
   17f94:	orr	r1, r5, #384	; 0x180
   17f98:	cmp	r2, #66	; 0x42
   17f9c:	mov	r2, r1
   17fa0:	orrne	r2, r5, #128	; 0x80
   17fa4:	bne	17fb8 <__assert_fail@plt+0x66cc>
   17fa8:	ldrb	r0, [r0, #-2]
   17fac:	cmp	r0, #105	; 0x69
   17fb0:	orreq	r1, r2, #32
   17fb4:	b	17ea4 <__assert_fail@plt+0x65b8>
   17fb8:	orr	r1, r2, #32
   17fbc:	b	17ea4 <__assert_fail@plt+0x65b8>
   17fc0:	push	{r4, r5, r6, sl, fp, lr}
   17fc4:	add	fp, sp, #16
   17fc8:	mov	r5, r0
   17fcc:	mov	r0, #0
   17fd0:	mov	r4, r1
   17fd4:	add	r6, r2, #19
   17fd8:	strb	r0, [r2, #20]
   17fdc:	mov	r0, r5
   17fe0:	mov	r1, r4
   17fe4:	mov	r2, #10
   17fe8:	mov	r3, #0
   17fec:	bl	1ed30 <__assert_fail@plt+0xd444>
   17ff0:	add	r2, r0, r0, lsl #2
   17ff4:	sub	r2, r5, r2, lsl #1
   17ff8:	orr	r2, r2, #48	; 0x30
   17ffc:	strb	r2, [r6], #-1
   18000:	rsbs	r2, r5, #9
   18004:	mov	r5, r0
   18008:	rscs	r2, r4, #0
   1800c:	mov	r4, r1
   18010:	bcc	17fdc <__assert_fail@plt+0x66f0>
   18014:	add	r0, r6, #1
   18018:	pop	{r4, r5, r6, sl, fp, pc}
   1801c:	push	{r4, r5, r6, r7, fp, lr}
   18020:	add	fp, sp, #16
   18024:	sub	sp, sp, #8
   18028:	add	r5, sp, #4
   1802c:	cmp	r0, #0
   18030:	mov	r7, r2
   18034:	mov	r4, r1
   18038:	movne	r5, r0
   1803c:	mov	r0, r5
   18040:	bl	11664 <mbrtowc@plt>
   18044:	mov	r6, r0
   18048:	cmp	r7, #0
   1804c:	beq	18070 <__assert_fail@plt+0x6784>
   18050:	cmn	r6, #2
   18054:	bcc	18070 <__assert_fail@plt+0x6784>
   18058:	mov	r0, #0
   1805c:	bl	1e588 <__assert_fail@plt+0xcc9c>
   18060:	cmp	r0, #0
   18064:	ldrbeq	r0, [r4]
   18068:	moveq	r6, #1
   1806c:	streq	r0, [r5]
   18070:	mov	r0, r6
   18074:	sub	sp, fp, #16
   18078:	pop	{r4, r5, r6, r7, fp, pc}
   1807c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18080:	add	fp, sp, #28
   18084:	sub	sp, sp, #20
   18088:	mov	r5, r3
   1808c:	str	r2, [sp, #12]
   18090:	str	r1, [sp, #16]
   18094:	mov	r4, r0
   18098:	bl	11718 <strlen@plt>
   1809c:	ldr	r3, [fp, #12]
   180a0:	mov	r8, r0
   180a4:	mov	sl, #0
   180a8:	tst	r3, #2
   180ac:	bne	18180 <__assert_fail@plt+0x6894>
   180b0:	bl	11640 <__ctype_get_mb_cur_max@plt>
   180b4:	mov	r6, #0
   180b8:	cmp	r0, #2
   180bc:	bcc	18190 <__assert_fail@plt+0x68a4>
   180c0:	mov	r0, #0
   180c4:	mov	r1, r4
   180c8:	mov	r2, #0
   180cc:	bl	11844 <mbstowcs@plt>
   180d0:	cmn	r0, #1
   180d4:	beq	1832c <__assert_fail@plt+0x6a40>
   180d8:	add	r9, r0, #1
   180dc:	mov	r7, r0
   180e0:	lsl	r0, r9, #2
   180e4:	bl	1cf00 <__assert_fail@plt+0xb614>
   180e8:	cmp	r0, #0
   180ec:	beq	18328 <__assert_fail@plt+0x6a3c>
   180f0:	mov	r1, r4
   180f4:	mov	r2, r9
   180f8:	mov	r6, r0
   180fc:	bl	11844 <mbstowcs@plt>
   18100:	cmp	r0, #0
   18104:	beq	1834c <__assert_fail@plt+0x6a60>
   18108:	str	r4, [sp, #4]
   1810c:	mov	r4, #0
   18110:	mov	r1, r6
   18114:	str	r6, [sp]
   18118:	str	r4, [r6, r7, lsl #2]
   1811c:	ldr	r0, [r6]
   18120:	cmp	r0, #0
   18124:	beq	1835c <__assert_fail@plt+0x6a70>
   18128:	add	r6, r1, #4
   1812c:	movw	r7, #65533	; 0xfffd
   18130:	bl	11604 <iswprint@plt>
   18134:	cmp	r0, #0
   18138:	streq	r7, [r6, #-4]
   1813c:	moveq	r4, #1
   18140:	ldr	r0, [r6], #4
   18144:	cmp	r0, #0
   18148:	bne	18130 <__assert_fail@plt+0x6844>
   1814c:	ldr	r6, [sp]
   18150:	mov	r1, r9
   18154:	mov	r0, r6
   18158:	bl	117fc <wcswidth@plt>
   1815c:	mov	r7, r0
   18160:	tst	r4, #1
   18164:	beq	1836c <__assert_fail@plt+0x6a80>
   18168:	mov	r0, #0
   1816c:	mov	r1, r6
   18170:	mov	r2, #0
   18174:	bl	11670 <wcstombs@plt>
   18178:	ldr	r4, [sp, #4]
   1817c:	b	18384 <__assert_fail@plt+0x6a98>
   18180:	mov	r6, #0
   18184:	mov	r2, #0
   18188:	mov	r7, r8
   1818c:	b	1819c <__assert_fail@plt+0x68b0>
   18190:	mov	r2, #0
   18194:	mov	r7, r8
   18198:	ldr	r3, [fp, #12]
   1819c:	ldr	r0, [r5]
   181a0:	str	r4, [sp, #4]
   181a4:	ldr	r4, [fp, #8]
   181a8:	mov	r1, r7
   181ac:	str	r6, [sp, #8]
   181b0:	cmp	r7, r0
   181b4:	movhi	r1, r0
   181b8:	movhi	r8, r0
   181bc:	cmp	r0, r7
   181c0:	subhi	sl, r0, r1
   181c4:	cmp	r4, #0
   181c8:	str	r1, [r5]
   181cc:	beq	181e4 <__assert_fail@plt+0x68f8>
   181d0:	cmp	r4, #1
   181d4:	bne	181ec <__assert_fail@plt+0x6900>
   181d8:	mov	r9, #0
   181dc:	mov	r4, sl
   181e0:	b	181f8 <__assert_fail@plt+0x690c>
   181e4:	mov	r9, sl
   181e8:	b	181f8 <__assert_fail@plt+0x690c>
   181ec:	and	r0, sl, #1
   181f0:	lsr	r9, sl, #1
   181f4:	add	r4, r0, sl, lsr #1
   181f8:	ldr	r5, [sp, #12]
   181fc:	ldr	r1, [sp, #16]
   18200:	tst	r3, #8
   18204:	mov	r6, #0
   18208:	mov	r7, #0
   1820c:	moveq	r6, r9
   18210:	tst	r3, #4
   18214:	moveq	r7, r4
   18218:	cmp	r5, #0
   1821c:	beq	18300 <__assert_fail@plt+0x6a14>
   18220:	add	r0, r1, r5
   18224:	str	r2, [sp]
   18228:	sub	sl, r0, #1
   1822c:	cmp	sl, r1
   18230:	bls	1827c <__assert_fail@plt+0x6990>
   18234:	cmp	r7, #0
   18238:	mov	r0, r1
   1823c:	beq	18280 <__assert_fail@plt+0x6994>
   18240:	sub	r0, r1, sl
   18244:	rsb	r1, r7, #0
   18248:	cmp	r0, r1
   1824c:	movcc	r0, r1
   18250:	mov	r1, #32
   18254:	rsb	r2, r0, #0
   18258:	ldr	r0, [sp, #16]
   1825c:	bl	1176c <memset@plt>
   18260:	rsb	r0, r4, #0
   18264:	rsb	r1, r5, #1
   18268:	cmp	r1, r0
   1826c:	movcc	r1, r0
   18270:	ldr	r0, [sp, #16]
   18274:	sub	r0, r0, r1
   18278:	b	18280 <__assert_fail@plt+0x6994>
   1827c:	mov	r0, r1
   18280:	ldr	r1, [sp, #4]
   18284:	sub	r2, sl, r0
   18288:	mov	r5, #0
   1828c:	mvn	r3, #0
   18290:	cmp	r8, r2
   18294:	strb	r5, [r0]
   18298:	movcc	r2, r8
   1829c:	bl	118e0 <__mempcpy_chk@plt>
   182a0:	mov	r4, r0
   182a4:	cmp	r6, #0
   182a8:	beq	182f8 <__assert_fail@plt+0x6a0c>
   182ac:	cmp	r4, sl
   182b0:	bcs	182f8 <__assert_fail@plt+0x6a0c>
   182b4:	sub	r0, r4, sl
   182b8:	rsb	r1, r6, #0
   182bc:	cmp	r0, r1
   182c0:	movcc	r0, r1
   182c4:	mov	r1, #32
   182c8:	rsb	r2, r0, #0
   182cc:	mov	r0, r4
   182d0:	bl	1176c <memset@plt>
   182d4:	ldr	r0, [sp, #16]
   182d8:	ldr	r1, [sp, #12]
   182dc:	rsb	r0, r0, #1
   182e0:	sub	r0, r0, r1
   182e4:	rsb	r1, r9, #0
   182e8:	add	r0, r4, r0
   182ec:	cmp	r1, r0
   182f0:	movhi	r0, r1
   182f4:	sub	r4, r4, r0
   182f8:	ldr	r2, [sp]
   182fc:	strb	r5, [r4]
   18300:	add	r0, r7, r8
   18304:	add	r9, r0, r6
   18308:	ldr	r6, [sp, #8]
   1830c:	mov	r0, r2
   18310:	bl	16008 <__assert_fail@plt+0x471c>
   18314:	mov	r0, r6
   18318:	bl	16008 <__assert_fail@plt+0x471c>
   1831c:	mov	r0, r9
   18320:	sub	sp, fp, #28
   18324:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18328:	mov	r6, #0
   1832c:	ldr	r3, [fp, #12]
   18330:	mvn	r9, #0
   18334:	mov	r2, #0
   18338:	mov	r7, r8
   1833c:	mov	r0, #0
   18340:	tst	r3, #1
   18344:	bne	1819c <__assert_fail@plt+0x68b0>
   18348:	b	18310 <__assert_fail@plt+0x6a24>
   1834c:	mov	r2, r6
   18350:	mov	r7, r8
   18354:	mov	r6, #0
   18358:	b	18198 <__assert_fail@plt+0x68ac>
   1835c:	mov	r0, r1
   18360:	mov	r1, r9
   18364:	bl	117fc <wcswidth@plt>
   18368:	mov	r7, r0
   1836c:	ldr	r0, [r5]
   18370:	ldr	r4, [sp, #4]
   18374:	mov	r6, #0
   18378:	cmp	r7, r0
   1837c:	mov	r0, r8
   18380:	bls	183f0 <__assert_fail@plt+0x6b04>
   18384:	add	r6, r0, #1
   18388:	mov	r0, r6
   1838c:	bl	1cf00 <__assert_fail@plt+0xb614>
   18390:	cmp	r0, #0
   18394:	beq	183f8 <__assert_fail@plt+0x6b0c>
   18398:	ldr	r1, [sp]
   1839c:	str	r0, [sp, #8]
   183a0:	str	r6, [sp, #4]
   183a4:	ldr	r0, [r1]
   183a8:	cmp	r0, #0
   183ac:	beq	18418 <__assert_fail@plt+0x6b2c>
   183b0:	ldr	r4, [r5]
   183b4:	mov	r8, #0
   183b8:	movw	r9, #65533	; 0xfffd
   183bc:	mov	r6, r1
   183c0:	bl	11538 <wcwidth@plt>
   183c4:	cmn	r0, #1
   183c8:	moveq	r0, #1
   183cc:	streq	r9, [r6]
   183d0:	add	r7, r0, r8
   183d4:	cmp	r7, r4
   183d8:	bhi	18424 <__assert_fail@plt+0x6b38>
   183dc:	ldr	r0, [r6, #4]!
   183e0:	mov	r8, r7
   183e4:	cmp	r0, #0
   183e8:	bne	183c0 <__assert_fail@plt+0x6ad4>
   183ec:	b	18428 <__assert_fail@plt+0x6b3c>
   183f0:	ldr	r2, [sp]
   183f4:	b	18198 <__assert_fail@plt+0x68ac>
   183f8:	ldr	r3, [fp, #12]
   183fc:	ldr	r2, [sp]
   18400:	mov	r6, #0
   18404:	mvn	r9, #0
   18408:	tst	r3, #1
   1840c:	mov	r0, r2
   18410:	bne	1819c <__assert_fail@plt+0x68b0>
   18414:	b	18310 <__assert_fail@plt+0x6a24>
   18418:	mov	r6, r1
   1841c:	mov	r7, #0
   18420:	b	18428 <__assert_fail@plt+0x6b3c>
   18424:	mov	r7, r8
   18428:	mov	r0, #0
   1842c:	ldr	r4, [sp]
   18430:	ldr	r2, [sp, #4]
   18434:	str	r0, [r6]
   18438:	ldr	r6, [sp, #8]
   1843c:	mov	r1, r4
   18440:	mov	r0, r6
   18444:	bl	11670 <wcstombs@plt>
   18448:	mov	r2, r4
   1844c:	mov	r8, r0
   18450:	mov	r4, r6
   18454:	b	18198 <__assert_fail@plt+0x68ac>
   18458:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1845c:	add	fp, sp, #28
   18460:	sub	sp, sp, #12
   18464:	ldr	r8, [r1]
   18468:	mov	sl, r0
   1846c:	mov	r9, r2
   18470:	mov	r6, r1
   18474:	mov	r7, #0
   18478:	str	r3, [sp, #8]
   1847c:	mov	r0, r8
   18480:	mov	r5, r8
   18484:	cmp	r0, r5
   18488:	bcc	184ec <__assert_fail@plt+0x6c00>
   1848c:	add	r5, r0, #1
   18490:	mov	r0, r7
   18494:	mov	r1, r5
   18498:	bl	1cf30 <__assert_fail@plt+0xb644>
   1849c:	cmp	r0, #0
   184a0:	beq	184e0 <__assert_fail@plt+0x6bf4>
   184a4:	mov	r4, r0
   184a8:	ldr	r0, [sp, #8]
   184ac:	str	r8, [r6]
   184b0:	mov	r2, r5
   184b4:	mov	r3, r6
   184b8:	str	r9, [sp]
   184bc:	mov	r1, r4
   184c0:	str	r0, [sp, #4]
   184c4:	mov	r0, sl
   184c8:	bl	1807c <__assert_fail@plt+0x6790>
   184cc:	cmn	r0, #1
   184d0:	mov	r7, r4
   184d4:	bne	18484 <__assert_fail@plt+0x6b98>
   184d8:	mov	r0, r4
   184dc:	b	184e4 <__assert_fail@plt+0x6bf8>
   184e0:	mov	r0, r7
   184e4:	bl	16008 <__assert_fail@plt+0x471c>
   184e8:	mov	r7, #0
   184ec:	mov	r0, r7
   184f0:	sub	sp, fp, #28
   184f4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   184f8:	push	{r4, r5, fp, lr}
   184fc:	add	fp, sp, #8
   18500:	mov	r4, r1
   18504:	mov	r5, r0
   18508:	bl	11718 <strlen@plt>
   1850c:	mov	r1, r0
   18510:	mov	r0, r5
   18514:	mov	r2, r4
   18518:	pop	{r4, r5, fp, lr}
   1851c:	b	18520 <__assert_fail@plt+0x6c34>
   18520:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18524:	add	fp, sp, #28
   18528:	sub	sp, sp, #28
   1852c:	mov	r4, r2
   18530:	mov	r5, r1
   18534:	mov	r7, r0
   18538:	add	r6, r0, r1
   1853c:	bl	11640 <__ctype_get_mb_cur_max@plt>
   18540:	cmp	r0, #1
   18544:	bls	18834 <__assert_fail@plt+0x6f48>
   18548:	cmp	r5, #1
   1854c:	blt	1889c <__assert_fail@plt+0x6fb0>
   18550:	and	r2, r4, #1
   18554:	and	sl, r4, #2
   18558:	mov	r5, #0
   1855c:	add	r8, sp, #12
   18560:	add	r9, sp, #16
   18564:	mov	r4, #0
   18568:	eor	r3, r2, #1
   1856c:	ldrb	r0, [r7]
   18570:	sub	r0, r0, #32
   18574:	cmp	r0, #94	; 0x5e
   18578:	bhi	18714 <__assert_fail@plt+0x6e28>
   1857c:	add	r1, pc, #0
   18580:	ldr	pc, [r1, r0, lsl #2]
   18584:	andeq	r8, r1, r0, lsl #14
   18588:	andeq	r8, r1, r0, lsl #14
   1858c:	andeq	r8, r1, r0, lsl #14
   18590:	andeq	r8, r1, r0, lsl #14
   18594:	andeq	r8, r1, r4, lsl r7
   18598:	andeq	r8, r1, r0, lsl #14
   1859c:	andeq	r8, r1, r0, lsl #14
   185a0:	andeq	r8, r1, r0, lsl #14
   185a4:	andeq	r8, r1, r0, lsl #14
   185a8:	andeq	r8, r1, r0, lsl #14
   185ac:	andeq	r8, r1, r0, lsl #14
   185b0:	andeq	r8, r1, r0, lsl #14
   185b4:	andeq	r8, r1, r0, lsl #14
   185b8:	andeq	r8, r1, r0, lsl #14
   185bc:	andeq	r8, r1, r0, lsl #14
   185c0:	andeq	r8, r1, r0, lsl #14
   185c4:	andeq	r8, r1, r0, lsl #14
   185c8:	andeq	r8, r1, r0, lsl #14
   185cc:	andeq	r8, r1, r0, lsl #14
   185d0:	andeq	r8, r1, r0, lsl #14
   185d4:	andeq	r8, r1, r0, lsl #14
   185d8:	andeq	r8, r1, r0, lsl #14
   185dc:	andeq	r8, r1, r0, lsl #14
   185e0:	andeq	r8, r1, r0, lsl #14
   185e4:	andeq	r8, r1, r0, lsl #14
   185e8:	andeq	r8, r1, r0, lsl #14
   185ec:	andeq	r8, r1, r0, lsl #14
   185f0:	andeq	r8, r1, r0, lsl #14
   185f4:	andeq	r8, r1, r0, lsl #14
   185f8:	andeq	r8, r1, r0, lsl #14
   185fc:	andeq	r8, r1, r0, lsl #14
   18600:	andeq	r8, r1, r0, lsl #14
   18604:	andeq	r8, r1, r4, lsl r7
   18608:	andeq	r8, r1, r0, lsl #14
   1860c:	andeq	r8, r1, r0, lsl #14
   18610:	andeq	r8, r1, r0, lsl #14
   18614:	andeq	r8, r1, r0, lsl #14
   18618:	andeq	r8, r1, r0, lsl #14
   1861c:	andeq	r8, r1, r0, lsl #14
   18620:	andeq	r8, r1, r0, lsl #14
   18624:	andeq	r8, r1, r0, lsl #14
   18628:	andeq	r8, r1, r0, lsl #14
   1862c:	andeq	r8, r1, r0, lsl #14
   18630:	andeq	r8, r1, r0, lsl #14
   18634:	andeq	r8, r1, r0, lsl #14
   18638:	andeq	r8, r1, r0, lsl #14
   1863c:	andeq	r8, r1, r0, lsl #14
   18640:	andeq	r8, r1, r0, lsl #14
   18644:	andeq	r8, r1, r0, lsl #14
   18648:	andeq	r8, r1, r0, lsl #14
   1864c:	andeq	r8, r1, r0, lsl #14
   18650:	andeq	r8, r1, r0, lsl #14
   18654:	andeq	r8, r1, r0, lsl #14
   18658:	andeq	r8, r1, r0, lsl #14
   1865c:	andeq	r8, r1, r0, lsl #14
   18660:	andeq	r8, r1, r0, lsl #14
   18664:	andeq	r8, r1, r0, lsl #14
   18668:	andeq	r8, r1, r0, lsl #14
   1866c:	andeq	r8, r1, r0, lsl #14
   18670:	andeq	r8, r1, r0, lsl #14
   18674:	andeq	r8, r1, r0, lsl #14
   18678:	andeq	r8, r1, r0, lsl #14
   1867c:	andeq	r8, r1, r0, lsl #14
   18680:	andeq	r8, r1, r0, lsl #14
   18684:	andeq	r8, r1, r4, lsl r7
   18688:	andeq	r8, r1, r0, lsl #14
   1868c:	andeq	r8, r1, r0, lsl #14
   18690:	andeq	r8, r1, r0, lsl #14
   18694:	andeq	r8, r1, r0, lsl #14
   18698:	andeq	r8, r1, r0, lsl #14
   1869c:	andeq	r8, r1, r0, lsl #14
   186a0:	andeq	r8, r1, r0, lsl #14
   186a4:	andeq	r8, r1, r0, lsl #14
   186a8:	andeq	r8, r1, r0, lsl #14
   186ac:	andeq	r8, r1, r0, lsl #14
   186b0:	andeq	r8, r1, r0, lsl #14
   186b4:	andeq	r8, r1, r0, lsl #14
   186b8:	andeq	r8, r1, r0, lsl #14
   186bc:	andeq	r8, r1, r0, lsl #14
   186c0:	andeq	r8, r1, r0, lsl #14
   186c4:	andeq	r8, r1, r0, lsl #14
   186c8:	andeq	r8, r1, r0, lsl #14
   186cc:	andeq	r8, r1, r0, lsl #14
   186d0:	andeq	r8, r1, r0, lsl #14
   186d4:	andeq	r8, r1, r0, lsl #14
   186d8:	andeq	r8, r1, r0, lsl #14
   186dc:	andeq	r8, r1, r0, lsl #14
   186e0:	andeq	r8, r1, r0, lsl #14
   186e4:	andeq	r8, r1, r0, lsl #14
   186e8:	andeq	r8, r1, r0, lsl #14
   186ec:	andeq	r8, r1, r0, lsl #14
   186f0:	andeq	r8, r1, r0, lsl #14
   186f4:	andeq	r8, r1, r0, lsl #14
   186f8:	andeq	r8, r1, r0, lsl #14
   186fc:	andeq	r8, r1, r0, lsl #14
   18700:	add	r4, r4, #1
   18704:	add	r7, r7, #1
   18708:	cmp	r7, r6
   1870c:	bcc	1856c <__assert_fail@plt+0x6c80>
   18710:	b	188a8 <__assert_fail@plt+0x6fbc>
   18714:	str	r3, [sp, #4]
   18718:	str	r2, [sp, #8]
   1871c:	str	r5, [sp, #20]
   18720:	str	r5, [sp, #16]
   18724:	sub	r2, r6, r7
   18728:	mov	r0, r8
   1872c:	mov	r1, r7
   18730:	mov	r3, r9
   18734:	mov	r5, r7
   18738:	bl	1801c <__assert_fail@plt+0x6730>
   1873c:	cmp	r0, #0
   18740:	beq	1875c <__assert_fail@plt+0x6e70>
   18744:	mov	r7, r0
   18748:	cmn	r0, #2
   1874c:	beq	187cc <__assert_fail@plt+0x6ee0>
   18750:	cmn	r7, #1
   18754:	bne	18760 <__assert_fail@plt+0x6e74>
   18758:	b	187ec <__assert_fail@plt+0x6f00>
   1875c:	mov	r7, #1
   18760:	ldr	r0, [sp, #12]
   18764:	bl	11538 <wcwidth@plt>
   18768:	cmp	r0, #0
   1876c:	blt	18788 <__assert_fail@plt+0x6e9c>
   18770:	mvn	r1, #-2147483648	; 0x80000000
   18774:	sub	r1, r1, r4
   18778:	cmp	r0, r1
   1877c:	bgt	187c4 <__assert_fail@plt+0x6ed8>
   18780:	add	r4, r0, r4
   18784:	b	187ac <__assert_fail@plt+0x6ec0>
   18788:	cmp	sl, #0
   1878c:	bne	18814 <__assert_fail@plt+0x6f28>
   18790:	ldr	r0, [sp, #12]
   18794:	bl	115e0 <iswcntrl@plt>
   18798:	cmp	r0, #0
   1879c:	bne	187ac <__assert_fail@plt+0x6ec0>
   187a0:	cmn	r4, #-2147483647	; 0x80000001
   187a4:	beq	187c4 <__assert_fail@plt+0x6ed8>
   187a8:	add	r4, r4, #1
   187ac:	mov	r0, r9
   187b0:	add	r7, r5, r7
   187b4:	bl	1158c <mbsinit@plt>
   187b8:	cmp	r0, #0
   187bc:	beq	18724 <__assert_fail@plt+0x6e38>
   187c0:	b	18804 <__assert_fail@plt+0x6f18>
   187c4:	mov	r0, #7
   187c8:	b	18818 <__assert_fail@plt+0x6f2c>
   187cc:	ldr	r0, [sp, #4]
   187d0:	ldr	r1, [sp, #8]
   187d4:	mov	r7, r6
   187d8:	add	r4, r4, r0
   187dc:	mov	r0, #1
   187e0:	cmp	r1, #0
   187e4:	beq	18804 <__assert_fail@plt+0x6f18>
   187e8:	b	18818 <__assert_fail@plt+0x6f2c>
   187ec:	ldr	r1, [sp, #8]
   187f0:	mov	r0, #1
   187f4:	cmp	r1, #0
   187f8:	bne	18818 <__assert_fail@plt+0x6f2c>
   187fc:	add	r4, r4, #1
   18800:	add	r7, r5, #1
   18804:	ldr	r2, [sp, #8]
   18808:	ldr	r3, [sp, #4]
   1880c:	mov	r5, #0
   18810:	b	18708 <__assert_fail@plt+0x6e1c>
   18814:	mov	r0, #1
   18818:	ldr	r2, [sp, #8]
   1881c:	ldr	r3, [sp, #4]
   18820:	mov	r7, r5
   18824:	cmp	r0, #0
   18828:	mov	r5, #0
   1882c:	beq	18708 <__assert_fail@plt+0x6e1c>
   18830:	b	1888c <__assert_fail@plt+0x6fa0>
   18834:	and	r8, r4, #2
   18838:	mov	r4, #0
   1883c:	cmp	r7, r6
   18840:	bcs	188a8 <__assert_fail@plt+0x6fbc>
   18844:	ldrb	r5, [r7], #1
   18848:	bl	116f4 <__ctype_b_loc@plt>
   1884c:	ldr	r0, [r0]
   18850:	add	r0, r0, r5, lsl #1
   18854:	ldrh	r1, [r0]
   18858:	tst	r1, #16384	; 0x4000
   1885c:	bne	18874 <__assert_fail@plt+0x6f88>
   18860:	cmp	r8, #0
   18864:	bne	188a4 <__assert_fail@plt+0x6fb8>
   18868:	mov	r0, #0
   1886c:	tst	r1, #2
   18870:	bne	18884 <__assert_fail@plt+0x6f98>
   18874:	cmn	r4, #-2147483647	; 0x80000001
   18878:	mov	r0, #0
   1887c:	mvneq	r0, #0
   18880:	addne	r4, r4, #1
   18884:	ands	r0, r0, #7
   18888:	beq	1883c <__assert_fail@plt+0x6f50>
   1888c:	mvn	r4, #0
   18890:	cmp	r0, #7
   18894:	mvneq	r4, #-2147483648	; 0x80000000
   18898:	b	188a8 <__assert_fail@plt+0x6fbc>
   1889c:	mov	r4, #0
   188a0:	b	188a8 <__assert_fail@plt+0x6fbc>
   188a4:	mvn	r4, #0
   188a8:	mov	r0, r4
   188ac:	sub	sp, fp, #28
   188b0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   188b4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   188b8:	add	fp, sp, #28
   188bc:	sub	sp, sp, #36	; 0x24
   188c0:	movw	r0, #244	; 0xf4
   188c4:	movw	r1, #380	; 0x17c
   188c8:	movt	r0, #2
   188cc:	movt	r1, #2
   188d0:	bl	11868 <fopen64@plt>
   188d4:	cmp	r0, #0
   188d8:	beq	19018 <__assert_fail@plt+0x772c>
   188dc:	mov	sl, r0
   188e0:	mov	r0, #0
   188e4:	add	r1, sp, #24
   188e8:	mov	r2, #10
   188ec:	str	r0, [sp, #28]
   188f0:	str	r0, [sp, #24]
   188f4:	add	r0, sp, #28
   188f8:	mov	r3, sl
   188fc:	bl	11514 <__getdelim@plt>
   18900:	cmn	r0, #1
   18904:	beq	193ec <__assert_fail@plt+0x7b00>
   18908:	movw	r8, #265	; 0x109
   1890c:	add	r0, sp, #32
   18910:	add	r9, sp, #12
   18914:	add	r6, sp, #20
   18918:	add	r7, sp, #16
   1891c:	add	r5, sp, #28
   18920:	add	r4, sp, #24
   18924:	str	sl, [sp, #4]
   18928:	movt	r8, #2
   1892c:	str	r0, [sp, #8]
   18930:	b	18aa4 <__assert_fail@plt+0x71b8>
   18934:	ldr	sl, [sp, #4]
   18938:	movw	r8, #265	; 0x109
   1893c:	add	r9, sp, #12
   18940:	add	r6, sp, #20
   18944:	movt	r8, #2
   18948:	b	18fec <__assert_fail@plt+0x7700>
   1894c:	ldrb	r0, [r4]
   18950:	cmp	r0, #47	; 0x2f
   18954:	ldrbeq	r0, [r4, #1]
   18958:	cmpeq	r0, #47	; 0x2f
   1895c:	beq	18a58 <__assert_fail@plt+0x716c>
   18960:	movw	r1, #404	; 0x194
   18964:	mov	r0, r6
   18968:	movt	r1, #2
   1896c:	bl	11520 <strcmp@plt>
   18970:	cmp	r0, #0
   18974:	beq	18fb8 <__assert_fail@plt+0x76cc>
   18978:	movw	r1, #409	; 0x199
   1897c:	mov	r0, r6
   18980:	movt	r1, #2
   18984:	bl	11520 <strcmp@plt>
   18988:	cmp	r0, #0
   1898c:	beq	18fb8 <__assert_fail@plt+0x76cc>
   18990:	movw	r1, #413	; 0x19d
   18994:	mov	r0, r6
   18998:	movt	r1, #2
   1899c:	bl	11520 <strcmp@plt>
   189a0:	cmp	r0, #0
   189a4:	beq	18fb8 <__assert_fail@plt+0x76cc>
   189a8:	movw	r1, #418	; 0x1a2
   189ac:	mov	r0, r6
   189b0:	movt	r1, #2
   189b4:	bl	11520 <strcmp@plt>
   189b8:	cmp	r0, #0
   189bc:	beq	18fb8 <__assert_fail@plt+0x76cc>
   189c0:	movw	r1, #429	; 0x1ad
   189c4:	mov	r0, r6
   189c8:	movt	r1, #2
   189cc:	bl	11520 <strcmp@plt>
   189d0:	cmp	r0, #0
   189d4:	beq	18fb8 <__assert_fail@plt+0x76cc>
   189d8:	movw	r1, #435	; 0x1b3
   189dc:	mov	r0, r6
   189e0:	movt	r1, #2
   189e4:	bl	11520 <strcmp@plt>
   189e8:	cmp	r0, #0
   189ec:	beq	18fb8 <__assert_fail@plt+0x76cc>
   189f0:	movw	r1, #440	; 0x1b8
   189f4:	mov	r0, r6
   189f8:	movt	r1, #2
   189fc:	bl	11520 <strcmp@plt>
   18a00:	cmp	r0, #0
   18a04:	beq	18fb8 <__assert_fail@plt+0x76cc>
   18a08:	movw	r1, #446	; 0x1be
   18a0c:	mov	r0, r6
   18a10:	movt	r1, #2
   18a14:	bl	11520 <strcmp@plt>
   18a18:	cmp	r0, #0
   18a1c:	beq	18fb8 <__assert_fail@plt+0x76cc>
   18a20:	movw	r1, #452	; 0x1c4
   18a24:	mov	r0, r6
   18a28:	movt	r1, #2
   18a2c:	bl	11520 <strcmp@plt>
   18a30:	cmp	r0, #0
   18a34:	add	r6, sp, #20
   18a38:	beq	18fbc <__assert_fail@plt+0x76d0>
   18a3c:	movw	r0, #457	; 0x1c9
   18a40:	mov	r1, r4
   18a44:	movt	r0, #2
   18a48:	bl	11520 <strcmp@plt>
   18a4c:	clz	r0, r0
   18a50:	lsr	r8, r0, #5
   18a54:	b	18fbc <__assert_fail@plt+0x76d0>
   18a58:	movw	r1, #388	; 0x184
   18a5c:	mov	r0, r6
   18a60:	movt	r1, #2
   18a64:	bl	11520 <strcmp@plt>
   18a68:	cmp	r0, #0
   18a6c:	beq	18fb8 <__assert_fail@plt+0x76cc>
   18a70:	movw	r1, #394	; 0x18a
   18a74:	mov	r0, r6
   18a78:	movt	r1, #2
   18a7c:	bl	11520 <strcmp@plt>
   18a80:	cmp	r0, #0
   18a84:	beq	18fb8 <__assert_fail@plt+0x76cc>
   18a88:	movw	r1, #399	; 0x18f
   18a8c:	mov	r0, r6
   18a90:	movt	r1, #2
   18a94:	bl	11520 <strcmp@plt>
   18a98:	cmp	r0, #0
   18a9c:	bne	18960 <__assert_fail@plt+0x7074>
   18aa0:	b	18fb8 <__assert_fail@plt+0x76cc>
   18aa4:	ldr	r0, [sp, #28]
   18aa8:	mov	r1, r8
   18aac:	mov	r2, r6
   18ab0:	mov	r3, r7
   18ab4:	str	r9, [sp]
   18ab8:	bl	1182c <sscanf@plt>
   18abc:	orr	r0, r0, #1
   18ac0:	cmp	r0, #3
   18ac4:	bne	18ff8 <__assert_fail@plt+0x770c>
   18ac8:	ldr	r0, [sp, #12]
   18acc:	ldr	r1, [sp, #28]
   18ad0:	add	r0, r1, r0
   18ad4:	mov	r1, #32
   18ad8:	mov	r5, r0
   18adc:	bl	11724 <strchr@plt>
   18ae0:	cmp	r0, #0
   18ae4:	beq	18fe8 <__assert_fail@plt+0x76fc>
   18ae8:	mov	r6, r0
   18aec:	mov	r4, #0
   18af0:	mov	r1, #32
   18af4:	strb	r4, [r6], #1
   18af8:	mov	r0, r6
   18afc:	bl	11724 <strchr@plt>
   18b00:	cmp	r0, #0
   18b04:	beq	18fe8 <__assert_fail@plt+0x76fc>
   18b08:	movw	r1, #282	; 0x11a
   18b0c:	strb	r4, [r0], #1
   18b10:	movt	r1, #2
   18b14:	bl	1cf84 <__assert_fail@plt+0xb698>
   18b18:	cmp	r0, #0
   18b1c:	beq	18fe8 <__assert_fail@plt+0x76fc>
   18b20:	add	sl, r0, #3
   18b24:	mov	r1, #32
   18b28:	mov	r0, sl
   18b2c:	bl	11724 <strchr@plt>
   18b30:	cmp	r0, #0
   18b34:	beq	18934 <__assert_fail@plt+0x7048>
   18b38:	mov	r9, r0
   18b3c:	mov	r4, #0
   18b40:	mov	r1, #32
   18b44:	strb	r4, [r9], #1
   18b48:	mov	r0, r9
   18b4c:	bl	11724 <strchr@plt>
   18b50:	cmp	r0, #0
   18b54:	beq	18934 <__assert_fail@plt+0x7048>
   18b58:	strb	r4, [r0]
   18b5c:	mov	r0, r9
   18b60:	bl	11718 <strlen@plt>
   18b64:	adds	r0, r0, #1
   18b68:	mov	r8, r5
   18b6c:	beq	18bec <__assert_fail@plt+0x7300>
   18b70:	mov	r2, #0
   18b74:	mov	r1, r9
   18b78:	ldrb	r3, [r9, r2]
   18b7c:	add	r7, r2, #4
   18b80:	cmp	r7, r0
   18b84:	bcs	18bdc <__assert_fail@plt+0x72f0>
   18b88:	cmp	r3, #92	; 0x5c
   18b8c:	bne	18bdc <__assert_fail@plt+0x72f0>
   18b90:	add	r7, r9, r2
   18b94:	ldrb	r5, [r7, #1]
   18b98:	and	r4, r5, #252	; 0xfc
   18b9c:	cmp	r4, #48	; 0x30
   18ba0:	bne	18bdc <__assert_fail@plt+0x72f0>
   18ba4:	ldrb	r4, [r7, #2]
   18ba8:	and	r7, r4, #248	; 0xf8
   18bac:	cmp	r7, #48	; 0x30
   18bb0:	bne	18bdc <__assert_fail@plt+0x72f0>
   18bb4:	add	ip, r2, #3
   18bb8:	ldrb	lr, [r9, ip]
   18bbc:	and	r7, lr, #248	; 0xf8
   18bc0:	cmp	r7, #48	; 0x30
   18bc4:	bne	18bdc <__assert_fail@plt+0x72f0>
   18bc8:	lsl	r2, r5, #6
   18bcc:	add	r2, r2, r4, lsl #3
   18bd0:	add	r2, r2, lr
   18bd4:	add	r3, r2, #80	; 0x50
   18bd8:	mov	r2, ip
   18bdc:	add	r2, r2, #1
   18be0:	strb	r3, [r1], #1
   18be4:	cmp	r2, r0
   18be8:	bcc	18b78 <__assert_fail@plt+0x728c>
   18bec:	mov	r0, r6
   18bf0:	bl	11718 <strlen@plt>
   18bf4:	adds	r0, r0, #1
   18bf8:	beq	18c78 <__assert_fail@plt+0x738c>
   18bfc:	mov	r2, #0
   18c00:	mov	r1, r6
   18c04:	ldrb	r3, [r6, r2]
   18c08:	add	r7, r2, #4
   18c0c:	cmp	r7, r0
   18c10:	bcs	18c68 <__assert_fail@plt+0x737c>
   18c14:	cmp	r3, #92	; 0x5c
   18c18:	bne	18c68 <__assert_fail@plt+0x737c>
   18c1c:	add	r7, r6, r2
   18c20:	ldrb	r5, [r7, #1]
   18c24:	and	r4, r5, #252	; 0xfc
   18c28:	cmp	r4, #48	; 0x30
   18c2c:	bne	18c68 <__assert_fail@plt+0x737c>
   18c30:	ldrb	r4, [r7, #2]
   18c34:	and	r7, r4, #248	; 0xf8
   18c38:	cmp	r7, #48	; 0x30
   18c3c:	bne	18c68 <__assert_fail@plt+0x737c>
   18c40:	add	ip, r2, #3
   18c44:	ldrb	lr, [r6, ip]
   18c48:	and	r7, lr, #248	; 0xf8
   18c4c:	cmp	r7, #48	; 0x30
   18c50:	bne	18c68 <__assert_fail@plt+0x737c>
   18c54:	lsl	r2, r5, #6
   18c58:	add	r2, r2, r4, lsl #3
   18c5c:	add	r2, r2, lr
   18c60:	add	r3, r2, #80	; 0x50
   18c64:	mov	r2, ip
   18c68:	add	r2, r2, #1
   18c6c:	strb	r3, [r1], #1
   18c70:	cmp	r2, r0
   18c74:	bcc	18c04 <__assert_fail@plt+0x7318>
   18c78:	mov	r0, r8
   18c7c:	bl	11718 <strlen@plt>
   18c80:	adds	r0, r0, #1
   18c84:	beq	18d04 <__assert_fail@plt+0x7418>
   18c88:	mov	r2, #0
   18c8c:	mov	r1, r8
   18c90:	ldrb	r3, [r8, r2]
   18c94:	add	r7, r2, #4
   18c98:	cmp	r7, r0
   18c9c:	bcs	18cf4 <__assert_fail@plt+0x7408>
   18ca0:	cmp	r3, #92	; 0x5c
   18ca4:	bne	18cf4 <__assert_fail@plt+0x7408>
   18ca8:	add	r7, r8, r2
   18cac:	ldrb	r5, [r7, #1]
   18cb0:	and	r4, r5, #252	; 0xfc
   18cb4:	cmp	r4, #48	; 0x30
   18cb8:	bne	18cf4 <__assert_fail@plt+0x7408>
   18cbc:	ldrb	r4, [r7, #2]
   18cc0:	and	r7, r4, #248	; 0xf8
   18cc4:	cmp	r7, #48	; 0x30
   18cc8:	bne	18cf4 <__assert_fail@plt+0x7408>
   18ccc:	add	ip, r2, #3
   18cd0:	ldrb	lr, [r8, ip]
   18cd4:	and	r7, lr, #248	; 0xf8
   18cd8:	cmp	r7, #48	; 0x30
   18cdc:	bne	18cf4 <__assert_fail@plt+0x7408>
   18ce0:	lsl	r2, r5, #6
   18ce4:	add	r2, r2, r4, lsl #3
   18ce8:	add	r2, r2, lr
   18cec:	add	r3, r2, #80	; 0x50
   18cf0:	mov	r2, ip
   18cf4:	add	r2, r2, #1
   18cf8:	strb	r3, [r1], #1
   18cfc:	cmp	r2, r0
   18d00:	bcc	18c90 <__assert_fail@plt+0x73a4>
   18d04:	mov	r0, sl
   18d08:	bl	11718 <strlen@plt>
   18d0c:	adds	r0, r0, #1
   18d10:	beq	18d90 <__assert_fail@plt+0x74a4>
   18d14:	mov	r2, #0
   18d18:	mov	r1, sl
   18d1c:	ldrb	r3, [sl, r2]
   18d20:	add	r7, r2, #4
   18d24:	cmp	r7, r0
   18d28:	bcs	18d80 <__assert_fail@plt+0x7494>
   18d2c:	cmp	r3, #92	; 0x5c
   18d30:	bne	18d80 <__assert_fail@plt+0x7494>
   18d34:	add	r7, sl, r2
   18d38:	ldrb	r5, [r7, #1]
   18d3c:	and	r4, r5, #252	; 0xfc
   18d40:	cmp	r4, #48	; 0x30
   18d44:	bne	18d80 <__assert_fail@plt+0x7494>
   18d48:	ldrb	r4, [r7, #2]
   18d4c:	and	r7, r4, #248	; 0xf8
   18d50:	cmp	r7, #48	; 0x30
   18d54:	bne	18d80 <__assert_fail@plt+0x7494>
   18d58:	add	ip, r2, #3
   18d5c:	ldrb	lr, [sl, ip]
   18d60:	and	r7, lr, #248	; 0xf8
   18d64:	cmp	r7, #48	; 0x30
   18d68:	bne	18d80 <__assert_fail@plt+0x7494>
   18d6c:	lsl	r2, r5, #6
   18d70:	add	r2, r2, r4, lsl #3
   18d74:	add	r2, r2, lr
   18d78:	add	r3, r2, #80	; 0x50
   18d7c:	mov	r2, ip
   18d80:	add	r2, r2, #1
   18d84:	strb	r3, [r1], #1
   18d88:	cmp	r2, r0
   18d8c:	bcc	18d1c <__assert_fail@plt+0x7430>
   18d90:	mov	r0, #32
   18d94:	bl	1bb68 <__assert_fail@plt+0xa27c>
   18d98:	mov	r7, r0
   18d9c:	mov	r0, r9
   18da0:	bl	1c088 <__assert_fail@plt+0xa79c>
   18da4:	str	r0, [r7]
   18da8:	mov	r0, r6
   18dac:	bl	1c088 <__assert_fail@plt+0xa79c>
   18db0:	str	r0, [r7, #4]
   18db4:	mov	r0, r8
   18db8:	bl	1c088 <__assert_fail@plt+0xa79c>
   18dbc:	str	r0, [r7, #8]
   18dc0:	mov	r0, sl
   18dc4:	bl	1c088 <__assert_fail@plt+0xa79c>
   18dc8:	str	r0, [r7, #12]
   18dcc:	mov	r6, r0
   18dd0:	ldr	r2, [sp, #20]
   18dd4:	ldrb	r0, [r7, #24]
   18dd8:	mov	r3, r2
   18ddc:	orr	r4, r0, #4
   18de0:	ldr	r0, [sp, #16]
   18de4:	bfc	r3, #0, #12
   18de8:	strb	r4, [r7, #24]
   18dec:	bic	r1, r0, #255	; 0xff
   18df0:	uxtb	r0, r0
   18df4:	bfi	r0, r2, #8, #12
   18df8:	orr	r3, r3, r1, lsr #20
   18dfc:	orr	r0, r0, r1, lsl #12
   18e00:	movw	r1, #286	; 0x11e
   18e04:	str	r3, [r7, #20]
   18e08:	str	r0, [r7, #16]
   18e0c:	mov	r0, r6
   18e10:	movt	r1, #2
   18e14:	bl	11520 <strcmp@plt>
   18e18:	cmp	r0, #0
   18e1c:	mov	r8, #1
   18e20:	mov	r0, #1
   18e24:	beq	18f90 <__assert_fail@plt+0x76a4>
   18e28:	movw	r1, #293	; 0x125
   18e2c:	mov	r0, r6
   18e30:	movt	r1, #2
   18e34:	bl	11520 <strcmp@plt>
   18e38:	cmp	r0, #0
   18e3c:	mov	r0, #1
   18e40:	beq	18f90 <__assert_fail@plt+0x76a4>
   18e44:	movw	r1, #298	; 0x12a
   18e48:	mov	r0, r6
   18e4c:	movt	r1, #2
   18e50:	bl	11520 <strcmp@plt>
   18e54:	cmp	r0, #0
   18e58:	mov	r0, #1
   18e5c:	beq	18f90 <__assert_fail@plt+0x76a4>
   18e60:	movw	r1, #304	; 0x130
   18e64:	mov	r0, r6
   18e68:	movt	r1, #2
   18e6c:	bl	11520 <strcmp@plt>
   18e70:	cmp	r0, #0
   18e74:	mov	r0, #1
   18e78:	beq	18f90 <__assert_fail@plt+0x76a4>
   18e7c:	movw	r1, #312	; 0x138
   18e80:	mov	r0, r6
   18e84:	movt	r1, #2
   18e88:	bl	11520 <strcmp@plt>
   18e8c:	cmp	r0, #0
   18e90:	mov	r0, #1
   18e94:	beq	18f90 <__assert_fail@plt+0x76a4>
   18e98:	movw	r1, #319	; 0x13f
   18e9c:	mov	r0, r6
   18ea0:	movt	r1, #2
   18ea4:	bl	11520 <strcmp@plt>
   18ea8:	cmp	r0, #0
   18eac:	mov	r0, #1
   18eb0:	beq	18f90 <__assert_fail@plt+0x76a4>
   18eb4:	movw	r1, #327	; 0x147
   18eb8:	mov	r0, r6
   18ebc:	movt	r1, #2
   18ec0:	bl	11520 <strcmp@plt>
   18ec4:	cmp	r0, #0
   18ec8:	mov	r0, #1
   18ecc:	beq	18f90 <__assert_fail@plt+0x76a4>
   18ed0:	movw	r1, #339	; 0x153
   18ed4:	mov	r0, r6
   18ed8:	movt	r1, #2
   18edc:	bl	11520 <strcmp@plt>
   18ee0:	cmp	r0, #0
   18ee4:	mov	r0, #1
   18ee8:	beq	18f90 <__assert_fail@plt+0x76a4>
   18eec:	movw	r1, #346	; 0x15a
   18ef0:	mov	r0, r6
   18ef4:	movt	r1, #2
   18ef8:	bl	11520 <strcmp@plt>
   18efc:	cmp	r0, #0
   18f00:	mov	r0, #1
   18f04:	beq	18f90 <__assert_fail@plt+0x76a4>
   18f08:	movw	r1, #357	; 0x165
   18f0c:	mov	r0, r6
   18f10:	movt	r1, #2
   18f14:	bl	11520 <strcmp@plt>
   18f18:	cmp	r0, #0
   18f1c:	mov	r0, #1
   18f20:	beq	18f90 <__assert_fail@plt+0x76a4>
   18f24:	movw	r1, #363	; 0x16b
   18f28:	mov	r0, r6
   18f2c:	movt	r1, #2
   18f30:	bl	11520 <strcmp@plt>
   18f34:	cmp	r0, #0
   18f38:	mov	r0, #1
   18f3c:	beq	18f90 <__assert_fail@plt+0x76a4>
   18f40:	movw	r1, #369	; 0x171
   18f44:	mov	r0, r6
   18f48:	movt	r1, #2
   18f4c:	bl	11520 <strcmp@plt>
   18f50:	cmp	r0, #0
   18f54:	mov	r0, #1
   18f58:	beq	18f90 <__assert_fail@plt+0x76a4>
   18f5c:	movw	r1, #376	; 0x178
   18f60:	mov	r0, r6
   18f64:	movt	r1, #2
   18f68:	bl	11520 <strcmp@plt>
   18f6c:	cmp	r0, #0
   18f70:	mov	r0, #1
   18f74:	beq	18f90 <__assert_fail@plt+0x76a4>
   18f78:	movw	r1, #383	; 0x17f
   18f7c:	mov	r0, r6
   18f80:	movt	r1, #2
   18f84:	bl	11520 <strcmp@plt>
   18f88:	clz	r0, r0
   18f8c:	lsr	r0, r0, #5
   18f90:	bic	r1, r4, #1
   18f94:	orr	r5, r1, r0
   18f98:	mov	r1, #58	; 0x3a
   18f9c:	strb	r5, [r7, #24]
   18fa0:	ldr	r4, [r7]
   18fa4:	mov	r0, r4
   18fa8:	bl	11724 <strchr@plt>
   18fac:	ldr	sl, [sp, #4]
   18fb0:	cmp	r0, #0
   18fb4:	beq	1894c <__assert_fail@plt+0x7060>
   18fb8:	add	r6, sp, #20
   18fbc:	and	r0, r5, #253	; 0xfd
   18fc0:	add	r9, sp, #12
   18fc4:	orr	r0, r0, r8, lsl #1
   18fc8:	movw	r8, #265	; 0x109
   18fcc:	strb	r0, [r7, #24]
   18fd0:	ldr	r0, [sp, #8]
   18fd4:	movt	r8, #2
   18fd8:	str	r7, [r0]
   18fdc:	add	r0, r7, #28
   18fe0:	str	r0, [sp, #8]
   18fe4:	b	18fec <__assert_fail@plt+0x7700>
   18fe8:	add	r6, sp, #20
   18fec:	add	r7, sp, #16
   18ff0:	add	r5, sp, #28
   18ff4:	add	r4, sp, #24
   18ff8:	mov	r0, r5
   18ffc:	mov	r1, r4
   19000:	mov	r2, #10
   19004:	mov	r3, sl
   19008:	bl	11514 <__getdelim@plt>
   1900c:	cmn	r0, #1
   19010:	bne	18aa4 <__assert_fail@plt+0x71b8>
   19014:	b	193f4 <__assert_fail@plt+0x7b08>
   19018:	movw	r0, #464	; 0x1d0
   1901c:	movw	r1, #27
   19020:	movt	r0, #2
   19024:	movt	r1, #2
   19028:	bl	11874 <setmntent@plt>
   1902c:	cmp	r0, #0
   19030:	beq	19440 <__assert_fail@plt+0x7b54>
   19034:	mov	r8, r0
   19038:	bl	11688 <getmntent@plt>
   1903c:	cmp	r0, #0
   19040:	beq	19448 <__assert_fail@plt+0x7b5c>
   19044:	mov	r5, r0
   19048:	add	sl, sp, #32
   1904c:	b	191a4 <__assert_fail@plt+0x78b8>
   19050:	ldrb	r0, [r5]
   19054:	cmp	r0, #47	; 0x2f
   19058:	ldrbeq	r0, [r5, #1]
   1905c:	cmpeq	r0, #47	; 0x2f
   19060:	beq	19158 <__assert_fail@plt+0x786c>
   19064:	movw	r1, #404	; 0x194
   19068:	mov	r0, r7
   1906c:	movt	r1, #2
   19070:	bl	11520 <strcmp@plt>
   19074:	cmp	r0, #0
   19078:	beq	193b4 <__assert_fail@plt+0x7ac8>
   1907c:	movw	r1, #409	; 0x199
   19080:	mov	r0, r7
   19084:	movt	r1, #2
   19088:	bl	11520 <strcmp@plt>
   1908c:	cmp	r0, #0
   19090:	beq	193b4 <__assert_fail@plt+0x7ac8>
   19094:	movw	r1, #413	; 0x19d
   19098:	mov	r0, r7
   1909c:	movt	r1, #2
   190a0:	bl	11520 <strcmp@plt>
   190a4:	cmp	r0, #0
   190a8:	beq	193b4 <__assert_fail@plt+0x7ac8>
   190ac:	movw	r1, #418	; 0x1a2
   190b0:	mov	r0, r7
   190b4:	movt	r1, #2
   190b8:	bl	11520 <strcmp@plt>
   190bc:	cmp	r0, #0
   190c0:	beq	193b4 <__assert_fail@plt+0x7ac8>
   190c4:	movw	r1, #429	; 0x1ad
   190c8:	mov	r0, r7
   190cc:	movt	r1, #2
   190d0:	bl	11520 <strcmp@plt>
   190d4:	cmp	r0, #0
   190d8:	beq	193b4 <__assert_fail@plt+0x7ac8>
   190dc:	movw	r1, #435	; 0x1b3
   190e0:	mov	r0, r7
   190e4:	movt	r1, #2
   190e8:	bl	11520 <strcmp@plt>
   190ec:	cmp	r0, #0
   190f0:	beq	193b4 <__assert_fail@plt+0x7ac8>
   190f4:	movw	r1, #440	; 0x1b8
   190f8:	mov	r0, r7
   190fc:	movt	r1, #2
   19100:	bl	11520 <strcmp@plt>
   19104:	cmp	r0, #0
   19108:	beq	193b4 <__assert_fail@plt+0x7ac8>
   1910c:	movw	r1, #446	; 0x1be
   19110:	mov	r0, r7
   19114:	movt	r1, #2
   19118:	bl	11520 <strcmp@plt>
   1911c:	cmp	r0, #0
   19120:	beq	193b4 <__assert_fail@plt+0x7ac8>
   19124:	movw	r1, #452	; 0x1c4
   19128:	mov	r0, r7
   1912c:	movt	r1, #2
   19130:	bl	11520 <strcmp@plt>
   19134:	cmp	r0, #0
   19138:	beq	193b4 <__assert_fail@plt+0x7ac8>
   1913c:	movw	r0, #457	; 0x1c9
   19140:	mov	r1, r5
   19144:	movt	r0, #2
   19148:	bl	11520 <strcmp@plt>
   1914c:	clz	r0, r0
   19150:	lsr	r6, r0, #5
   19154:	b	193b4 <__assert_fail@plt+0x7ac8>
   19158:	movw	r1, #388	; 0x184
   1915c:	mov	r0, r7
   19160:	movt	r1, #2
   19164:	bl	11520 <strcmp@plt>
   19168:	cmp	r0, #0
   1916c:	beq	193b4 <__assert_fail@plt+0x7ac8>
   19170:	movw	r1, #394	; 0x18a
   19174:	mov	r0, r7
   19178:	movt	r1, #2
   1917c:	bl	11520 <strcmp@plt>
   19180:	cmp	r0, #0
   19184:	beq	193b4 <__assert_fail@plt+0x7ac8>
   19188:	movw	r1, #399	; 0x18f
   1918c:	mov	r0, r7
   19190:	movt	r1, #2
   19194:	bl	11520 <strcmp@plt>
   19198:	cmp	r0, #0
   1919c:	bne	19064 <__assert_fail@plt+0x7778>
   191a0:	b	193b4 <__assert_fail@plt+0x7ac8>
   191a4:	movw	r1, #474	; 0x1da
   191a8:	mov	r0, r5
   191ac:	movt	r1, #2
   191b0:	bl	1164c <hasmntopt@plt>
   191b4:	str	r0, [sp, #8]
   191b8:	mov	r0, #32
   191bc:	bl	1bb68 <__assert_fail@plt+0xa27c>
   191c0:	mov	r9, r0
   191c4:	ldr	r0, [r5]
   191c8:	bl	1c088 <__assert_fail@plt+0xa79c>
   191cc:	str	r0, [r9]
   191d0:	ldr	r0, [r5, #4]
   191d4:	bl	1c088 <__assert_fail@plt+0xa79c>
   191d8:	str	r0, [r9, #4]
   191dc:	mov	r0, #0
   191e0:	str	r0, [r9, #8]
   191e4:	ldr	r0, [r5, #8]
   191e8:	bl	1c088 <__assert_fail@plt+0xa79c>
   191ec:	str	r0, [r9, #12]
   191f0:	mov	r7, r0
   191f4:	movw	r1, #286	; 0x11e
   191f8:	ldrb	r0, [r9, #24]
   191fc:	movt	r1, #2
   19200:	orr	r4, r0, #4
   19204:	mov	r0, r7
   19208:	strb	r4, [r9, #24]
   1920c:	bl	11520 <strcmp@plt>
   19210:	cmp	r0, #0
   19214:	mov	r6, #1
   19218:	mov	r0, #1
   1921c:	beq	19390 <__assert_fail@plt+0x7aa4>
   19220:	movw	r1, #293	; 0x125
   19224:	mov	r0, r7
   19228:	movt	r1, #2
   1922c:	bl	11520 <strcmp@plt>
   19230:	cmp	r0, #0
   19234:	mov	r0, #1
   19238:	beq	19390 <__assert_fail@plt+0x7aa4>
   1923c:	movw	r1, #298	; 0x12a
   19240:	mov	r0, r7
   19244:	movt	r1, #2
   19248:	bl	11520 <strcmp@plt>
   1924c:	cmp	r0, #0
   19250:	mov	r0, #1
   19254:	beq	19390 <__assert_fail@plt+0x7aa4>
   19258:	movw	r1, #304	; 0x130
   1925c:	mov	r0, r7
   19260:	movt	r1, #2
   19264:	bl	11520 <strcmp@plt>
   19268:	cmp	r0, #0
   1926c:	mov	r0, #1
   19270:	beq	19390 <__assert_fail@plt+0x7aa4>
   19274:	movw	r1, #312	; 0x138
   19278:	mov	r0, r7
   1927c:	movt	r1, #2
   19280:	bl	11520 <strcmp@plt>
   19284:	cmp	r0, #0
   19288:	mov	r0, #1
   1928c:	beq	19390 <__assert_fail@plt+0x7aa4>
   19290:	movw	r1, #319	; 0x13f
   19294:	mov	r0, r7
   19298:	movt	r1, #2
   1929c:	bl	11520 <strcmp@plt>
   192a0:	cmp	r0, #0
   192a4:	mov	r0, #1
   192a8:	beq	19390 <__assert_fail@plt+0x7aa4>
   192ac:	movw	r1, #327	; 0x147
   192b0:	mov	r0, r7
   192b4:	movt	r1, #2
   192b8:	bl	11520 <strcmp@plt>
   192bc:	cmp	r0, #0
   192c0:	mov	r0, #1
   192c4:	beq	19390 <__assert_fail@plt+0x7aa4>
   192c8:	movw	r1, #339	; 0x153
   192cc:	mov	r0, r7
   192d0:	movt	r1, #2
   192d4:	bl	11520 <strcmp@plt>
   192d8:	cmp	r0, #0
   192dc:	mov	r0, #1
   192e0:	beq	19390 <__assert_fail@plt+0x7aa4>
   192e4:	movw	r1, #346	; 0x15a
   192e8:	mov	r0, r7
   192ec:	movt	r1, #2
   192f0:	bl	11520 <strcmp@plt>
   192f4:	cmp	r0, #0
   192f8:	mov	r0, #1
   192fc:	beq	19390 <__assert_fail@plt+0x7aa4>
   19300:	movw	r1, #357	; 0x165
   19304:	mov	r0, r7
   19308:	movt	r1, #2
   1930c:	bl	11520 <strcmp@plt>
   19310:	cmp	r0, #0
   19314:	mov	r0, #1
   19318:	beq	19390 <__assert_fail@plt+0x7aa4>
   1931c:	movw	r1, #363	; 0x16b
   19320:	mov	r0, r7
   19324:	movt	r1, #2
   19328:	bl	11520 <strcmp@plt>
   1932c:	cmp	r0, #0
   19330:	mov	r0, #1
   19334:	beq	19390 <__assert_fail@plt+0x7aa4>
   19338:	movw	r1, #369	; 0x171
   1933c:	mov	r0, r7
   19340:	movt	r1, #2
   19344:	bl	11520 <strcmp@plt>
   19348:	cmp	r0, #0
   1934c:	mov	r0, #1
   19350:	beq	19390 <__assert_fail@plt+0x7aa4>
   19354:	movw	r1, #376	; 0x178
   19358:	mov	r0, r7
   1935c:	movt	r1, #2
   19360:	bl	11520 <strcmp@plt>
   19364:	cmp	r0, #0
   19368:	mov	r0, #1
   1936c:	beq	19390 <__assert_fail@plt+0x7aa4>
   19370:	movw	r1, #383	; 0x17f
   19374:	mov	r0, r7
   19378:	movt	r1, #2
   1937c:	bl	11520 <strcmp@plt>
   19380:	ldr	r1, [sp, #8]
   19384:	orr	r0, r1, r0
   19388:	clz	r0, r0
   1938c:	lsr	r0, r0, #5
   19390:	bic	r1, r4, #1
   19394:	orr	r4, r1, r0
   19398:	mov	r1, #58	; 0x3a
   1939c:	strb	r4, [r9, #24]
   193a0:	ldr	r5, [r9]
   193a4:	mov	r0, r5
   193a8:	bl	11724 <strchr@plt>
   193ac:	cmp	r0, #0
   193b0:	beq	19050 <__assert_fail@plt+0x7764>
   193b4:	mvn	r0, #0
   193b8:	str	r0, [r9, #16]
   193bc:	str	r0, [r9, #20]
   193c0:	and	r0, r4, #253	; 0xfd
   193c4:	orr	r0, r0, r6, lsl #1
   193c8:	strb	r0, [r9, #24]
   193cc:	mov	r0, r8
   193d0:	str	r9, [sl]
   193d4:	add	sl, r9, #28
   193d8:	bl	11688 <getmntent@plt>
   193dc:	mov	r5, r0
   193e0:	cmp	r0, #0
   193e4:	bne	191a4 <__assert_fail@plt+0x78b8>
   193e8:	b	1944c <__assert_fail@plt+0x7b60>
   193ec:	add	r0, sp, #32
   193f0:	str	r0, [sp, #8]
   193f4:	ldr	r0, [sp, #28]
   193f8:	bl	16008 <__assert_fail@plt+0x471c>
   193fc:	ldrb	r0, [sl]
   19400:	tst	r0, #32
   19404:	bne	19420 <__assert_fail@plt+0x7b34>
   19408:	mov	r0, sl
   1940c:	bl	1e3a4 <__assert_fail@plt+0xcab8>
   19410:	ldr	sl, [sp, #8]
   19414:	cmn	r0, #1
   19418:	bne	1945c <__assert_fail@plt+0x7b70>
   1941c:	b	1946c <__assert_fail@plt+0x7b80>
   19420:	bl	11748 <__errno_location@plt>
   19424:	ldr	r6, [r0]
   19428:	mov	r5, r0
   1942c:	mov	r0, sl
   19430:	bl	1e3a4 <__assert_fail@plt+0xcab8>
   19434:	ldr	sl, [sp, #8]
   19438:	str	r6, [r5]
   1943c:	b	1946c <__assert_fail@plt+0x7b80>
   19440:	mov	r4, #0
   19444:	b	194d8 <__assert_fail@plt+0x7bec>
   19448:	add	sl, sp, #32
   1944c:	mov	r0, r8
   19450:	bl	117cc <endmntent@plt>
   19454:	cmp	r0, #0
   19458:	beq	1946c <__assert_fail@plt+0x7b80>
   1945c:	mov	r0, #0
   19460:	str	r0, [sl]
   19464:	ldr	r4, [sp, #32]
   19468:	b	194d8 <__assert_fail@plt+0x7bec>
   1946c:	bl	11748 <__errno_location@plt>
   19470:	mov	r4, #0
   19474:	ldr	r8, [r0]
   19478:	mov	r5, r0
   1947c:	str	r4, [sl]
   19480:	ldr	r6, [sp, #32]
   19484:	cmp	r6, #0
   19488:	beq	194d4 <__assert_fail@plt+0x7be8>
   1948c:	ldr	r0, [r6]
   19490:	ldr	r7, [r6, #28]
   19494:	bl	16008 <__assert_fail@plt+0x471c>
   19498:	ldr	r0, [r6, #4]
   1949c:	bl	16008 <__assert_fail@plt+0x471c>
   194a0:	ldr	r0, [r6, #8]
   194a4:	bl	16008 <__assert_fail@plt+0x471c>
   194a8:	ldrb	r0, [r6, #24]
   194ac:	tst	r0, #4
   194b0:	beq	194bc <__assert_fail@plt+0x7bd0>
   194b4:	ldr	r0, [r6, #12]
   194b8:	bl	16008 <__assert_fail@plt+0x471c>
   194bc:	mov	r0, r6
   194c0:	bl	16008 <__assert_fail@plt+0x471c>
   194c4:	cmp	r7, #0
   194c8:	mov	r6, r7
   194cc:	str	r7, [sp, #32]
   194d0:	bne	1948c <__assert_fail@plt+0x7ba0>
   194d4:	str	r8, [r5]
   194d8:	mov	r0, r4
   194dc:	sub	sp, fp, #28
   194e0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   194e4:	push	{r4, sl, fp, lr}
   194e8:	add	fp, sp, #8
   194ec:	mov	r4, r0
   194f0:	ldr	r0, [r0]
   194f4:	bl	16008 <__assert_fail@plt+0x471c>
   194f8:	ldr	r0, [r4, #4]
   194fc:	bl	16008 <__assert_fail@plt+0x471c>
   19500:	ldr	r0, [r4, #8]
   19504:	bl	16008 <__assert_fail@plt+0x471c>
   19508:	ldrb	r0, [r4, #24]
   1950c:	tst	r0, #4
   19510:	beq	1951c <__assert_fail@plt+0x7c30>
   19514:	ldr	r0, [r4, #12]
   19518:	bl	16008 <__assert_fail@plt+0x471c>
   1951c:	mov	r0, r4
   19520:	pop	{r4, sl, fp, lr}
   19524:	b	16008 <__assert_fail@plt+0x471c>
   19528:	push	{r4, r5, fp, lr}
   1952c:	add	fp, sp, #8
   19530:	cmp	r0, #0
   19534:	beq	195c8 <__assert_fail@plt+0x7cdc>
   19538:	mov	r1, #47	; 0x2f
   1953c:	mov	r4, r0
   19540:	bl	11808 <strrchr@plt>
   19544:	cmp	r0, #0
   19548:	mov	r5, r4
   1954c:	addne	r5, r0, #1
   19550:	sub	r0, r5, r4
   19554:	cmp	r0, #7
   19558:	blt	195ac <__assert_fail@plt+0x7cc0>
   1955c:	movw	r1, #535	; 0x217
   19560:	sub	r0, r5, #7
   19564:	mov	r2, #7
   19568:	movt	r1, #2
   1956c:	bl	118b0 <strncmp@plt>
   19570:	cmp	r0, #0
   19574:	bne	195ac <__assert_fail@plt+0x7cc0>
   19578:	movw	r1, #543	; 0x21f
   1957c:	mov	r0, r5
   19580:	mov	r2, #3
   19584:	movt	r1, #2
   19588:	bl	118b0 <strncmp@plt>
   1958c:	cmp	r0, #0
   19590:	beq	1959c <__assert_fail@plt+0x7cb0>
   19594:	mov	r4, r5
   19598:	b	195ac <__assert_fail@plt+0x7cc0>
   1959c:	movw	r0, #4896	; 0x1320
   195a0:	add	r4, r5, #3
   195a4:	movt	r0, #3
   195a8:	str	r4, [r0]
   195ac:	movw	r0, #4900	; 0x1324
   195b0:	movt	r0, #3
   195b4:	str	r4, [r0]
   195b8:	movw	r0, #5056	; 0x13c0
   195bc:	movt	r0, #3
   195c0:	str	r4, [r0]
   195c4:	pop	{r4, r5, fp, pc}
   195c8:	movw	r0, #4912	; 0x1330
   195cc:	mov	r1, #55	; 0x37
   195d0:	mov	r2, #1
   195d4:	movt	r0, #3
   195d8:	ldr	r3, [r0]
   195dc:	movw	r0, #479	; 0x1df
   195e0:	movt	r0, #2
   195e4:	bl	11628 <fwrite@plt>
   195e8:	bl	118bc <abort@plt>
   195ec:	push	{r4, r5, r6, sl, fp, lr}
   195f0:	add	fp, sp, #16
   195f4:	mov	r4, r0
   195f8:	movw	r0, #5064	; 0x13c8
   195fc:	movt	r0, #3
   19600:	cmp	r4, #0
   19604:	moveq	r4, r0
   19608:	bl	11748 <__errno_location@plt>
   1960c:	ldr	r6, [r0]
   19610:	mov	r5, r0
   19614:	mov	r0, r4
   19618:	mov	r1, #48	; 0x30
   1961c:	bl	1bfc8 <__assert_fail@plt+0xa6dc>
   19620:	str	r6, [r5]
   19624:	pop	{r4, r5, r6, sl, fp, pc}
   19628:	movw	r1, #5064	; 0x13c8
   1962c:	cmp	r0, #0
   19630:	movt	r1, #3
   19634:	movne	r1, r0
   19638:	ldr	r0, [r1]
   1963c:	bx	lr
   19640:	movw	r2, #5064	; 0x13c8
   19644:	cmp	r0, #0
   19648:	movt	r2, #3
   1964c:	movne	r2, r0
   19650:	str	r1, [r2]
   19654:	bx	lr
   19658:	movw	r3, #5064	; 0x13c8
   1965c:	cmp	r0, #0
   19660:	movt	r3, #3
   19664:	movne	r3, r0
   19668:	ubfx	r0, r1, #5, #3
   1966c:	and	r1, r1, #31
   19670:	add	r0, r3, r0, lsl #2
   19674:	ldr	r3, [r0, #8]
   19678:	eor	r2, r2, r3, lsr r1
   1967c:	and	r2, r2, #1
   19680:	eor	r2, r3, r2, lsl r1
   19684:	str	r2, [r0, #8]
   19688:	mov	r0, #1
   1968c:	and	r0, r0, r3, lsr r1
   19690:	bx	lr
   19694:	movw	r2, #5064	; 0x13c8
   19698:	cmp	r0, #0
   1969c:	movt	r2, #3
   196a0:	movne	r2, r0
   196a4:	ldr	r0, [r2, #4]
   196a8:	str	r1, [r2, #4]
   196ac:	bx	lr
   196b0:	movw	r3, #5064	; 0x13c8
   196b4:	cmp	r0, #0
   196b8:	movt	r3, #3
   196bc:	movne	r3, r0
   196c0:	cmp	r1, #0
   196c4:	mov	r0, #10
   196c8:	cmpne	r2, #0
   196cc:	str	r0, [r3]
   196d0:	bne	196e0 <__assert_fail@plt+0x7df4>
   196d4:	push	{fp, lr}
   196d8:	mov	fp, sp
   196dc:	bl	118bc <abort@plt>
   196e0:	str	r1, [r3, #40]	; 0x28
   196e4:	str	r2, [r3, #44]	; 0x2c
   196e8:	bx	lr
   196ec:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   196f0:	add	fp, sp, #28
   196f4:	sub	sp, sp, #20
   196f8:	mov	r7, r0
   196fc:	ldr	r0, [fp, #8]
   19700:	movw	r5, #5064	; 0x13c8
   19704:	mov	r8, r3
   19708:	mov	r9, r2
   1970c:	mov	sl, r1
   19710:	movt	r5, #3
   19714:	cmp	r0, #0
   19718:	movne	r5, r0
   1971c:	bl	11748 <__errno_location@plt>
   19720:	mov	r4, r0
   19724:	ldm	r5, {r0, r1}
   19728:	ldr	r2, [r5, #40]	; 0x28
   1972c:	ldr	r3, [r5, #44]	; 0x2c
   19730:	add	r5, r5, #8
   19734:	ldr	r6, [r4]
   19738:	stm	sp, {r0, r1, r5}
   1973c:	str	r2, [sp, #12]
   19740:	str	r3, [sp, #16]
   19744:	mov	r0, r7
   19748:	mov	r1, sl
   1974c:	mov	r2, r9
   19750:	mov	r3, r8
   19754:	bl	19764 <__assert_fail@plt+0x7e78>
   19758:	str	r6, [r4]
   1975c:	sub	sp, fp, #28
   19760:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19764:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19768:	add	fp, sp, #28
   1976c:	sub	sp, sp, #156	; 0x9c
   19770:	str	r0, [sp, #80]	; 0x50
   19774:	ldr	r0, [fp, #12]
   19778:	mov	r6, r1
   1977c:	mov	r9, r3
   19780:	str	r2, [fp, #-84]	; 0xffffffac
   19784:	and	r1, r0, #4
   19788:	str	r1, [sp, #32]
   1978c:	and	r1, r0, #1
   19790:	str	r1, [sp, #36]	; 0x24
   19794:	ubfx	r4, r0, #1, #1
   19798:	bl	11640 <__ctype_get_mb_cur_max@plt>
   1979c:	str	r0, [sp, #40]	; 0x28
   197a0:	ldr	r0, [fp, #24]
   197a4:	ldr	r7, [fp, #8]
   197a8:	mov	r1, #0
   197ac:	mov	r5, #1
   197b0:	str	r1, [fp, #-56]	; 0xffffffc8
   197b4:	mov	r1, #0
   197b8:	str	r1, [sp, #60]	; 0x3c
   197bc:	str	r0, [sp, #76]	; 0x4c
   197c0:	ldr	r0, [fp, #20]
   197c4:	str	r0, [sp, #72]	; 0x48
   197c8:	mov	r0, #0
   197cc:	str	r0, [sp, #56]	; 0x38
   197d0:	mov	r0, #0
   197d4:	str	r0, [sp, #92]	; 0x5c
   197d8:	mov	r0, #0
   197dc:	str	r0, [fp, #-76]	; 0xffffffb4
   197e0:	mov	r0, #0
   197e4:	cmp	r7, #10
   197e8:	bhi	1a768 <__assert_fail@plt+0x8e7c>
   197ec:	add	r1, pc, #28
   197f0:	mov	sl, r6
   197f4:	ldr	r6, [sp, #80]	; 0x50
   197f8:	ldr	ip, [fp, #-84]	; 0xffffffac
   197fc:	mov	r8, #0
   19800:	mov	r2, #1
   19804:	mov	r3, #0
   19808:	mov	lr, r9
   1980c:	ldr	pc, [r1, r7, lsl #2]
   19810:	strdeq	r9, [r1], -r4
   19814:	andeq	r9, r1, r0, lsr #18
   19818:	andeq	r9, r1, r4, ror #17
   1981c:	ldrdeq	r9, [r1], -ip
   19820:	andeq	r9, r1, r4, lsl r9
   19824:	andeq	r9, r1, r8, ror #18
   19828:	andeq	r9, r1, r4, lsl #18
   1982c:	andeq	r9, r1, r4, asr #19
   19830:	andeq	r9, r1, ip, lsr r8
   19834:	andeq	r9, r1, ip, lsr r8
   19838:	andeq	r9, r1, r4, ror #16
   1983c:	movw	r0, #623	; 0x26f
   19840:	mov	r1, r7
   19844:	movt	r0, #2
   19848:	bl	1b174 <__assert_fail@plt+0x9888>
   1984c:	str	r0, [sp, #72]	; 0x48
   19850:	movw	r0, #1933	; 0x78d
   19854:	mov	r1, r7
   19858:	movt	r0, #2
   1985c:	bl	1b174 <__assert_fail@plt+0x9888>
   19860:	str	r0, [sp, #76]	; 0x4c
   19864:	str	r5, [fp, #-48]	; 0xffffffd0
   19868:	mov	r8, #0
   1986c:	mov	r5, r7
   19870:	tst	r4, #1
   19874:	bne	198ac <__assert_fail@plt+0x7fc0>
   19878:	ldr	r0, [sp, #72]	; 0x48
   1987c:	ldrb	r0, [r0]
   19880:	cmp	r0, #0
   19884:	beq	198ac <__assert_fail@plt+0x7fc0>
   19888:	ldr	r1, [sp, #72]	; 0x48
   1988c:	mov	r8, #0
   19890:	add	r1, r1, #1
   19894:	cmp	r8, sl
   19898:	strbcc	r0, [r6, r8]
   1989c:	ldrb	r0, [r1, r8]
   198a0:	add	r8, r8, #1
   198a4:	cmp	r0, #0
   198a8:	bne	19894 <__assert_fail@plt+0x7fa8>
   198ac:	ldr	r7, [sp, #76]	; 0x4c
   198b0:	mov	r0, r7
   198b4:	bl	11718 <strlen@plt>
   198b8:	str	r7, [sp, #92]	; 0x5c
   198bc:	mov	r7, r5
   198c0:	ldr	ip, [fp, #-84]	; 0xffffffac
   198c4:	ldr	r5, [fp, #-48]	; 0xffffffd0
   198c8:	str	r0, [fp, #-76]	; 0xffffffb4
   198cc:	mov	r2, #1
   198d0:	mov	r3, r4
   198d4:	mov	lr, r9
   198d8:	b	199c4 <__assert_fail@plt+0x80d8>
   198dc:	mov	r0, #1
   198e0:	b	19920 <__assert_fail@plt+0x8034>
   198e4:	tst	r4, #1
   198e8:	bne	19920 <__assert_fail@plt+0x8034>
   198ec:	mov	r2, r0
   198f0:	b	19948 <__assert_fail@plt+0x805c>
   198f4:	mov	r7, #0
   198f8:	mov	r8, #0
   198fc:	mov	r2, r0
   19900:	b	199c0 <__assert_fail@plt+0x80d4>
   19904:	mov	r0, #1
   19908:	mov	r8, #0
   1990c:	mov	r7, #5
   19910:	b	1997c <__assert_fail@plt+0x8090>
   19914:	mov	r2, #1
   19918:	tst	r4, #1
   1991c:	beq	19948 <__assert_fail@plt+0x805c>
   19920:	mov	r1, #1
   19924:	mov	r8, #0
   19928:	mov	r7, #2
   1992c:	mov	r2, r0
   19930:	mov	r3, #1
   19934:	str	r1, [fp, #-76]	; 0xffffffb4
   19938:	movw	r1, #1933	; 0x78d
   1993c:	movt	r1, #2
   19940:	str	r1, [sp, #92]	; 0x5c
   19944:	b	199c4 <__assert_fail@plt+0x80d8>
   19948:	cmp	sl, #0
   1994c:	mov	r8, #1
   19950:	mov	r7, #2
   19954:	movne	r0, #39	; 0x27
   19958:	strbne	r0, [r6]
   1995c:	movw	r0, #1933	; 0x78d
   19960:	movt	r0, #2
   19964:	b	199b4 <__assert_fail@plt+0x80c8>
   19968:	mov	r7, #5
   1996c:	tst	r4, #1
   19970:	beq	19998 <__assert_fail@plt+0x80ac>
   19974:	mov	r0, #1
   19978:	mov	r8, #0
   1997c:	str	r0, [fp, #-76]	; 0xffffffb4
   19980:	movw	r0, #64493	; 0xfbed
   19984:	mov	r2, #1
   19988:	mov	r3, #1
   1998c:	movt	r0, #1
   19990:	str	r0, [sp, #92]	; 0x5c
   19994:	b	199c4 <__assert_fail@plt+0x80d8>
   19998:	cmp	sl, #0
   1999c:	mov	r8, #1
   199a0:	mov	r2, #1
   199a4:	movne	r0, #34	; 0x22
   199a8:	strbne	r0, [r6]
   199ac:	movw	r0, #64493	; 0xfbed
   199b0:	movt	r0, #1
   199b4:	str	r0, [sp, #92]	; 0x5c
   199b8:	mov	r0, #1
   199bc:	str	r0, [fp, #-76]	; 0xffffffb4
   199c0:	mov	r3, #0
   199c4:	ldr	r0, [fp, #16]
   199c8:	str	r3, [fp, #-72]	; 0xffffffb8
   199cc:	str	r7, [fp, #-64]	; 0xffffffc0
   199d0:	str	r2, [sp, #84]	; 0x54
   199d4:	cmp	r0, #0
   199d8:	movwne	r0, #1
   199dc:	and	r0, r0, r3
   199e0:	str	r0, [fp, #-88]	; 0xffffffa8
   199e4:	ldr	r0, [fp, #-76]	; 0xffffffb4
   199e8:	cmp	r0, #0
   199ec:	movwne	r0, #1
   199f0:	subs	r4, r7, #2
   199f4:	mov	r7, #0
   199f8:	and	r1, r0, r3
   199fc:	str	r4, [fp, #-80]	; 0xffffffb0
   19a00:	and	r1, r2, r1
   19a04:	str	r1, [sp, #48]	; 0x30
   19a08:	clz	r1, r4
   19a0c:	lsr	r1, r1, #5
   19a10:	and	r1, r1, r3
   19a14:	eor	r3, r3, #1
   19a18:	str	r1, [sp, #64]	; 0x40
   19a1c:	mov	r1, r4
   19a20:	str	r3, [sp, #88]	; 0x58
   19a24:	movwne	r1, #1
   19a28:	orr	r3, r1, r3
   19a2c:	and	r1, r1, r2
   19a30:	and	r0, r0, r1
   19a34:	str	r3, [sp, #68]	; 0x44
   19a38:	str	r1, [fp, #-68]	; 0xffffffbc
   19a3c:	str	r0, [fp, #-60]	; 0xffffffc4
   19a40:	eor	r0, r2, #1
   19a44:	str	r0, [sp, #52]	; 0x34
   19a48:	cmn	lr, #1
   19a4c:	beq	19a5c <__assert_fail@plt+0x8170>
   19a50:	cmp	r7, lr
   19a54:	bne	19a68 <__assert_fail@plt+0x817c>
   19a58:	b	1a590 <__assert_fail@plt+0x8ca4>
   19a5c:	ldrb	r0, [ip, r7]
   19a60:	cmp	r0, #0
   19a64:	beq	1a598 <__assert_fail@plt+0x8cac>
   19a68:	ldr	r0, [fp, #-60]	; 0xffffffc4
   19a6c:	mov	r9, #0
   19a70:	str	r5, [fp, #-48]	; 0xffffffd0
   19a74:	cmp	r0, #0
   19a78:	beq	19aac <__assert_fail@plt+0x81c0>
   19a7c:	ldr	r0, [fp, #-76]	; 0xffffffb4
   19a80:	add	r4, r7, r0
   19a84:	cmp	r0, #2
   19a88:	bcc	19aa4 <__assert_fail@plt+0x81b8>
   19a8c:	cmn	lr, #1
   19a90:	bne	19aa4 <__assert_fail@plt+0x81b8>
   19a94:	mov	r0, ip
   19a98:	bl	11718 <strlen@plt>
   19a9c:	ldr	ip, [fp, #-84]	; 0xffffffac
   19aa0:	mov	lr, r0
   19aa4:	cmp	r4, lr
   19aa8:	bls	19ab4 <__assert_fail@plt+0x81c8>
   19aac:	mov	r0, #0
   19ab0:	b	19af4 <__assert_fail@plt+0x8208>
   19ab4:	ldr	r1, [sp, #92]	; 0x5c
   19ab8:	ldr	r2, [fp, #-76]	; 0xffffffb4
   19abc:	add	r0, ip, r7
   19ac0:	mov	r4, lr
   19ac4:	bl	11598 <memcmp@plt>
   19ac8:	ldr	r2, [sp, #88]	; 0x58
   19acc:	cmp	r0, #0
   19ad0:	mov	r1, r0
   19ad4:	movwne	r1, #1
   19ad8:	orr	r1, r1, r2
   19adc:	tst	r1, #1
   19ae0:	beq	1a628 <__assert_fail@plt+0x8d3c>
   19ae4:	ldr	ip, [fp, #-84]	; 0xffffffac
   19ae8:	clz	r0, r0
   19aec:	mov	lr, r4
   19af0:	lsr	r0, r0, #5
   19af4:	str	r0, [fp, #-52]	; 0xffffffcc
   19af8:	ldrb	r5, [ip, r7]
   19afc:	cmp	r5, #126	; 0x7e
   19b00:	bhi	19eb8 <__assert_fail@plt+0x85cc>
   19b04:	add	r3, pc, #16
   19b08:	mov	r4, #1
   19b0c:	mov	r2, #110	; 0x6e
   19b10:	mov	r0, #97	; 0x61
   19b14:	mov	r1, #0
   19b18:	ldr	pc, [r3, r5, lsl #2]
   19b1c:			; <UNDEFINED> instruction: 0x00019db4
   19b20:			; <UNDEFINED> instruction: 0x00019eb8
   19b24:			; <UNDEFINED> instruction: 0x00019eb8
   19b28:			; <UNDEFINED> instruction: 0x00019eb8
   19b2c:			; <UNDEFINED> instruction: 0x00019eb8
   19b30:			; <UNDEFINED> instruction: 0x00019eb8
   19b34:			; <UNDEFINED> instruction: 0x00019eb8
   19b38:	andeq	r9, r1, ip, ror #30
   19b3c:	muleq	r1, r4, sp
   19b40:	andeq	r9, r1, ip, lsl #27
   19b44:	andeq	r9, r1, r0, lsr #27
   19b48:	andeq	r9, r1, r0, lsr #28
   19b4c:	andeq	r9, r1, r4, lsl #27
   19b50:	muleq	r1, ip, sp
   19b54:			; <UNDEFINED> instruction: 0x00019eb8
   19b58:			; <UNDEFINED> instruction: 0x00019eb8
   19b5c:			; <UNDEFINED> instruction: 0x00019eb8
   19b60:			; <UNDEFINED> instruction: 0x00019eb8
   19b64:			; <UNDEFINED> instruction: 0x00019eb8
   19b68:			; <UNDEFINED> instruction: 0x00019eb8
   19b6c:			; <UNDEFINED> instruction: 0x00019eb8
   19b70:			; <UNDEFINED> instruction: 0x00019eb8
   19b74:			; <UNDEFINED> instruction: 0x00019eb8
   19b78:			; <UNDEFINED> instruction: 0x00019eb8
   19b7c:			; <UNDEFINED> instruction: 0x00019eb8
   19b80:			; <UNDEFINED> instruction: 0x00019eb8
   19b84:			; <UNDEFINED> instruction: 0x00019eb8
   19b88:			; <UNDEFINED> instruction: 0x00019eb8
   19b8c:			; <UNDEFINED> instruction: 0x00019eb8
   19b90:			; <UNDEFINED> instruction: 0x00019eb8
   19b94:			; <UNDEFINED> instruction: 0x00019eb8
   19b98:			; <UNDEFINED> instruction: 0x00019eb8
   19b9c:	andeq	r9, r1, r4, lsr #30
   19ba0:	andeq	r9, r1, r8, lsr #30
   19ba4:	andeq	r9, r1, r8, lsr #30
   19ba8:	andeq	r9, r1, ip, lsr #26
   19bac:	andeq	r9, r1, r8, lsr #30
   19bb0:	andeq	r9, r1, r8, lsl sp
   19bb4:	andeq	r9, r1, r8, lsr #30
   19bb8:	andeq	r9, r1, r8, lsr #28
   19bbc:	andeq	r9, r1, r8, lsr #30
   19bc0:	andeq	r9, r1, r8, lsr #30
   19bc4:	andeq	r9, r1, r8, lsr #30
   19bc8:	andeq	r9, r1, r8, lsl sp
   19bcc:	andeq	r9, r1, r8, lsl sp
   19bd0:	andeq	r9, r1, r8, lsl sp
   19bd4:	andeq	r9, r1, r8, lsl sp
   19bd8:	andeq	r9, r1, r8, lsl sp
   19bdc:	andeq	r9, r1, r8, lsl sp
   19be0:	andeq	r9, r1, r8, lsl sp
   19be4:	andeq	r9, r1, r8, lsl sp
   19be8:	andeq	r9, r1, r8, lsl sp
   19bec:	andeq	r9, r1, r8, lsl sp
   19bf0:	andeq	r9, r1, r8, lsl sp
   19bf4:	andeq	r9, r1, r8, lsl sp
   19bf8:	andeq	r9, r1, r8, lsl sp
   19bfc:	andeq	r9, r1, r8, lsl sp
   19c00:	andeq	r9, r1, r8, lsl sp
   19c04:	andeq	r9, r1, r8, lsl sp
   19c08:	andeq	r9, r1, r8, lsr #30
   19c0c:	andeq	r9, r1, r8, lsr #30
   19c10:	andeq	r9, r1, r8, lsr #30
   19c14:	andeq	r9, r1, r8, lsr #30
   19c18:	strdeq	r9, [r1], -r4
   19c1c:			; <UNDEFINED> instruction: 0x00019eb8
   19c20:	andeq	r9, r1, r8, lsl sp
   19c24:	andeq	r9, r1, r8, lsl sp
   19c28:	andeq	r9, r1, r8, lsl sp
   19c2c:	andeq	r9, r1, r8, lsl sp
   19c30:	andeq	r9, r1, r8, lsl sp
   19c34:	andeq	r9, r1, r8, lsl sp
   19c38:	andeq	r9, r1, r8, lsl sp
   19c3c:	andeq	r9, r1, r8, lsl sp
   19c40:	andeq	r9, r1, r8, lsl sp
   19c44:	andeq	r9, r1, r8, lsl sp
   19c48:	andeq	r9, r1, r8, lsl sp
   19c4c:	andeq	r9, r1, r8, lsl sp
   19c50:	andeq	r9, r1, r8, lsl sp
   19c54:	andeq	r9, r1, r8, lsl sp
   19c58:	andeq	r9, r1, r8, lsl sp
   19c5c:	andeq	r9, r1, r8, lsl sp
   19c60:	andeq	r9, r1, r8, lsl sp
   19c64:	andeq	r9, r1, r8, lsl sp
   19c68:	andeq	r9, r1, r8, lsl sp
   19c6c:	andeq	r9, r1, r8, lsl sp
   19c70:	andeq	r9, r1, r8, lsl sp
   19c74:	andeq	r9, r1, r8, lsl sp
   19c78:	andeq	r9, r1, r8, lsl sp
   19c7c:	andeq	r9, r1, r8, lsl sp
   19c80:	andeq	r9, r1, r8, lsl sp
   19c84:	andeq	r9, r1, r8, lsl sp
   19c88:	andeq	r9, r1, r8, lsr #30
   19c8c:	andeq	r9, r1, r0, ror #26
   19c90:	andeq	r9, r1, r8, lsl sp
   19c94:	andeq	r9, r1, r8, lsr #30
   19c98:	andeq	r9, r1, r8, lsl sp
   19c9c:	andeq	r9, r1, r8, lsr #30
   19ca0:	andeq	r9, r1, r8, lsl sp
   19ca4:	andeq	r9, r1, r8, lsl sp
   19ca8:	andeq	r9, r1, r8, lsl sp
   19cac:	andeq	r9, r1, r8, lsl sp
   19cb0:	andeq	r9, r1, r8, lsl sp
   19cb4:	andeq	r9, r1, r8, lsl sp
   19cb8:	andeq	r9, r1, r8, lsl sp
   19cbc:	andeq	r9, r1, r8, lsl sp
   19cc0:	andeq	r9, r1, r8, lsl sp
   19cc4:	andeq	r9, r1, r8, lsl sp
   19cc8:	andeq	r9, r1, r8, lsl sp
   19ccc:	andeq	r9, r1, r8, lsl sp
   19cd0:	andeq	r9, r1, r8, lsl sp
   19cd4:	andeq	r9, r1, r8, lsl sp
   19cd8:	andeq	r9, r1, r8, lsl sp
   19cdc:	andeq	r9, r1, r8, lsl sp
   19ce0:	andeq	r9, r1, r8, lsl sp
   19ce4:	andeq	r9, r1, r8, lsl sp
   19ce8:	andeq	r9, r1, r8, lsl sp
   19cec:	andeq	r9, r1, r8, lsl sp
   19cf0:	andeq	r9, r1, r8, lsl sp
   19cf4:	andeq	r9, r1, r8, lsl sp
   19cf8:	andeq	r9, r1, r8, lsl sp
   19cfc:	andeq	r9, r1, r8, lsl sp
   19d00:	andeq	r9, r1, r8, lsl sp
   19d04:	andeq	r9, r1, r8, lsl sp
   19d08:	andeq	r9, r1, r0, asr #26
   19d0c:	andeq	r9, r1, r8, lsr #30
   19d10:	andeq	r9, r1, r0, asr #26
   19d14:	andeq	r9, r1, ip, lsr #26
   19d18:	ldr	r0, [fp, #-68]	; 0xffffffbc
   19d1c:	cmp	r0, #0
   19d20:	beq	19f80 <__assert_fail@plt+0x8694>
   19d24:	ldr	r0, [fp, #16]
   19d28:	b	19f84 <__assert_fail@plt+0x8698>
   19d2c:	mov	r4, #0
   19d30:	cmp	r7, #0
   19d34:	beq	19f24 <__assert_fail@plt+0x8638>
   19d38:	mov	r9, #0
   19d3c:	b	19d18 <__assert_fail@plt+0x842c>
   19d40:	mov	r4, #0
   19d44:	cmn	lr, #1
   19d48:	beq	19f08 <__assert_fail@plt+0x861c>
   19d4c:	cmp	r7, #0
   19d50:	bne	19d38 <__assert_fail@plt+0x844c>
   19d54:	cmp	lr, #1
   19d58:	beq	19f24 <__assert_fail@plt+0x8638>
   19d5c:	b	19d38 <__assert_fail@plt+0x844c>
   19d60:	ldr	r0, [fp, #-64]	; 0xffffffc0
   19d64:	cmp	r0, #2
   19d68:	bne	19f48 <__assert_fail@plt+0x865c>
   19d6c:	ldr	r0, [fp, #-72]	; 0xffffffb8
   19d70:	tst	r0, #1
   19d74:	bne	1a644 <__assert_fail@plt+0x8d58>
   19d78:	mov	r9, #0
   19d7c:	mov	r0, #92	; 0x5c
   19d80:	b	19f5c <__assert_fail@plt+0x8670>
   19d84:	mov	r0, #102	; 0x66
   19d88:	b	19f6c <__assert_fail@plt+0x8680>
   19d8c:	mov	r2, #116	; 0x74
   19d90:	b	19da0 <__assert_fail@plt+0x84b4>
   19d94:	mov	r0, #98	; 0x62
   19d98:	b	19f6c <__assert_fail@plt+0x8680>
   19d9c:	mov	r2, #114	; 0x72
   19da0:	ldr	r0, [sp, #68]	; 0x44
   19da4:	tst	r0, #1
   19da8:	mov	r0, r2
   19dac:	bne	19f6c <__assert_fail@plt+0x8680>
   19db0:	b	1a644 <__assert_fail@plt+0x8d58>
   19db4:	ldr	r0, [sp, #84]	; 0x54
   19db8:	tst	r0, #1
   19dbc:	beq	1a05c <__assert_fail@plt+0x8770>
   19dc0:	ldr	r0, [fp, #-72]	; 0xffffffb8
   19dc4:	tst	r0, #1
   19dc8:	bne	1a754 <__assert_fail@plt+0x8e68>
   19dcc:	ldr	r0, [fp, #-64]	; 0xffffffc0
   19dd0:	ldr	r2, [fp, #-56]	; 0xffffffc8
   19dd4:	cmp	r0, #2
   19dd8:	ldr	r0, [fp, #-80]	; 0xffffffb0
   19ddc:	movwne	r0, #1
   19de0:	orr	r0, r0, r2
   19de4:	tst	r0, #1
   19de8:	beq	1a42c <__assert_fail@plt+0x8b40>
   19dec:	mov	r0, r8
   19df0:	b	1a460 <__assert_fail@plt+0x8b74>
   19df4:	ldr	r0, [fp, #-64]	; 0xffffffc0
   19df8:	mov	r9, #0
   19dfc:	mov	r5, #63	; 0x3f
   19e00:	cmp	r0, #5
   19e04:	beq	1a210 <__assert_fail@plt+0x8924>
   19e08:	cmp	r0, #2
   19e0c:	bne	1a2b4 <__assert_fail@plt+0x89c8>
   19e10:	ldr	r0, [fp, #-72]	; 0xffffffb8
   19e14:	tst	r0, #1
   19e18:	beq	1a2b8 <__assert_fail@plt+0x89cc>
   19e1c:	b	1a644 <__assert_fail@plt+0x8d58>
   19e20:	mov	r0, #118	; 0x76
   19e24:	b	19f6c <__assert_fail@plt+0x8680>
   19e28:	mov	r0, #1
   19e2c:	mov	r5, #39	; 0x27
   19e30:	str	r0, [sp, #60]	; 0x3c
   19e34:	ldr	r0, [fp, #-64]	; 0xffffffc0
   19e38:	cmp	r0, #2
   19e3c:	bne	19eb0 <__assert_fail@plt+0x85c4>
   19e40:	ldr	r0, [fp, #-72]	; 0xffffffb8
   19e44:	tst	r0, #1
   19e48:	bne	1a644 <__assert_fail@plt+0x8d58>
   19e4c:	ldr	r2, [sp, #56]	; 0x38
   19e50:	clz	r1, sl
   19e54:	mov	r9, #0
   19e58:	lsr	r1, r1, #5
   19e5c:	cmp	r2, #0
   19e60:	mov	r0, r2
   19e64:	movwne	r0, #1
   19e68:	orrs	r0, r0, r1
   19e6c:	moveq	r2, sl
   19e70:	moveq	sl, r0
   19e74:	cmp	r8, sl
   19e78:	str	r2, [sp, #56]	; 0x38
   19e7c:	movcc	r0, #39	; 0x27
   19e80:	strbcc	r0, [r6, r8]
   19e84:	add	r0, r8, #1
   19e88:	cmp	r0, sl
   19e8c:	movcc	r1, #92	; 0x5c
   19e90:	strbcc	r1, [r6, r0]
   19e94:	add	r0, r8, #2
   19e98:	add	r8, r8, #3
   19e9c:	cmp	r0, sl
   19ea0:	movcc	r1, #39	; 0x27
   19ea4:	strbcc	r1, [r6, r0]
   19ea8:	mov	r0, #0
   19eac:	str	r0, [fp, #-56]	; 0xffffffc8
   19eb0:	mov	r4, #1
   19eb4:	b	19d18 <__assert_fail@plt+0x842c>
   19eb8:	ldr	r0, [sp, #40]	; 0x28
   19ebc:	cmp	r0, #1
   19ec0:	bne	1a088 <__assert_fail@plt+0x879c>
   19ec4:	str	lr, [sp, #28]
   19ec8:	bl	116f4 <__ctype_b_loc@plt>
   19ecc:	ldr	r0, [r0]
   19ed0:	ldr	ip, [fp, #-84]	; 0xffffffac
   19ed4:	mov	r1, #1
   19ed8:	add	r0, r0, r5, lsl #1
   19edc:	ldrb	r0, [r0, #1]
   19ee0:	ubfx	r4, r0, #6, #1
   19ee4:	ldr	r0, [sp, #52]	; 0x34
   19ee8:	mov	r2, r1
   19eec:	cmp	r1, #1
   19ef0:	orr	r0, r4, r0
   19ef4:	bhi	1a2c0 <__assert_fail@plt+0x89d4>
   19ef8:	tst	r0, #1
   19efc:	beq	1a2c0 <__assert_fail@plt+0x89d4>
   19f00:	ldr	lr, [sp, #28]
   19f04:	b	19d18 <__assert_fail@plt+0x842c>
   19f08:	cmp	r7, #0
   19f0c:	ldrbeq	r0, [ip, #1]
   19f10:	cmpeq	r0, #0
   19f14:	beq	19f24 <__assert_fail@plt+0x8638>
   19f18:	mvn	lr, #0
   19f1c:	mov	r9, #0
   19f20:	b	19d18 <__assert_fail@plt+0x842c>
   19f24:	mov	r1, #1
   19f28:	ldr	r0, [fp, #-64]	; 0xffffffc0
   19f2c:	cmp	r0, #2
   19f30:	bne	19f40 <__assert_fail@plt+0x8654>
   19f34:	ldr	r0, [fp, #-72]	; 0xffffffb8
   19f38:	tst	r0, #1
   19f3c:	bne	1a644 <__assert_fail@plt+0x8d58>
   19f40:	mov	r4, r1
   19f44:	b	19d18 <__assert_fail@plt+0x842c>
   19f48:	ldr	r1, [sp, #48]	; 0x30
   19f4c:	mov	r9, #0
   19f50:	mov	r0, #92	; 0x5c
   19f54:	cmp	r1, #0
   19f58:	beq	19f6c <__assert_fail@plt+0x8680>
   19f5c:	mov	r4, #0
   19f60:	cmp	r9, #0
   19f64:	beq	1a4f8 <__assert_fail@plt+0x8c0c>
   19f68:	b	1a534 <__assert_fail@plt+0x8c48>
   19f6c:	ldr	r1, [sp, #84]	; 0x54
   19f70:	mov	r4, #0
   19f74:	mov	r9, #0
   19f78:	tst	r1, #1
   19f7c:	bne	19fbc <__assert_fail@plt+0x86d0>
   19f80:	ldr	r0, [fp, #-88]	; 0xffffffa8
   19f84:	cmp	r0, #0
   19f88:	mov	r0, r5
   19f8c:	beq	19fb0 <__assert_fail@plt+0x86c4>
   19f90:	ldr	r1, [fp, #16]
   19f94:	ubfx	r0, r5, #5, #3
   19f98:	mov	r2, #1
   19f9c:	ldr	r0, [r1, r0, lsl #2]
   19fa0:	and	r1, r5, #31
   19fa4:	tst	r0, r2, lsl r1
   19fa8:	mov	r0, r5
   19fac:	bne	19fbc <__assert_fail@plt+0x86d0>
   19fb0:	ldr	r1, [fp, #-52]	; 0xffffffcc
   19fb4:	cmp	r1, #0
   19fb8:	beq	1a4f0 <__assert_fail@plt+0x8c04>
   19fbc:	ldr	r1, [fp, #-72]	; 0xffffffb8
   19fc0:	tst	r1, #1
   19fc4:	bne	1a61c <__assert_fail@plt+0x8d30>
   19fc8:	ldr	r1, [fp, #-64]	; 0xffffffc0
   19fcc:	ldr	r2, [fp, #-56]	; 0xffffffc8
   19fd0:	cmp	r1, #2
   19fd4:	ldr	r1, [fp, #-80]	; 0xffffffb0
   19fd8:	movwne	r1, #1
   19fdc:	orr	r1, r1, r2
   19fe0:	tst	r1, #1
   19fe4:	beq	19ff0 <__assert_fail@plt+0x8704>
   19fe8:	ldr	r5, [fp, #-48]	; 0xffffffd0
   19fec:	b	1a02c <__assert_fail@plt+0x8740>
   19ff0:	cmp	r8, sl
   19ff4:	ldr	r5, [fp, #-48]	; 0xffffffd0
   19ff8:	movcc	r1, #39	; 0x27
   19ffc:	strbcc	r1, [r6, r8]
   1a000:	add	r1, r8, #1
   1a004:	cmp	r1, sl
   1a008:	movcc	r2, #36	; 0x24
   1a00c:	strbcc	r2, [r6, r1]
   1a010:	add	r1, r8, #2
   1a014:	add	r8, r8, #3
   1a018:	cmp	r1, sl
   1a01c:	movcc	r2, #39	; 0x27
   1a020:	strbcc	r2, [r6, r1]
   1a024:	mov	r1, #1
   1a028:	str	r1, [fp, #-56]	; 0xffffffc8
   1a02c:	cmp	r8, sl
   1a030:	movcc	r1, #92	; 0x5c
   1a034:	strbcc	r1, [r6, r8]
   1a038:	add	r8, r8, #1
   1a03c:	cmp	r8, sl
   1a040:	and	r5, r5, r4
   1a044:	add	r7, r7, #1
   1a048:	strbcc	r0, [r6, r8]
   1a04c:	add	r8, r8, #1
   1a050:	cmn	lr, #1
   1a054:	bne	19a50 <__assert_fail@plt+0x8164>
   1a058:	b	19a5c <__assert_fail@plt+0x8170>
   1a05c:	ldr	r0, [sp, #36]	; 0x24
   1a060:	mov	r4, #0
   1a064:	mov	r9, #0
   1a068:	mov	r5, #0
   1a06c:	cmp	r0, #0
   1a070:	beq	19f80 <__assert_fail@plt+0x8694>
   1a074:	ldr	r5, [fp, #-48]	; 0xffffffd0
   1a078:	add	r7, r7, #1
   1a07c:	cmn	lr, #1
   1a080:	bne	19a50 <__assert_fail@plt+0x8164>
   1a084:	b	19a5c <__assert_fail@plt+0x8170>
   1a088:	mov	r0, #0
   1a08c:	cmn	lr, #1
   1a090:	str	r0, [fp, #-36]	; 0xffffffdc
   1a094:	str	r0, [fp, #-40]	; 0xffffffd8
   1a098:	bne	1a0ac <__assert_fail@plt+0x87c0>
   1a09c:	mov	r0, ip
   1a0a0:	bl	11718 <strlen@plt>
   1a0a4:	ldr	ip, [fp, #-84]	; 0xffffffac
   1a0a8:	mov	lr, r0
   1a0ac:	add	r0, ip, r7
   1a0b0:	mov	r4, #1
   1a0b4:	mov	r6, #0
   1a0b8:	str	lr, [sp, #28]
   1a0bc:	str	r0, [sp, #24]
   1a0c0:	sub	r0, fp, #40	; 0x28
   1a0c4:	mov	r3, r0
   1a0c8:	str	r6, [sp, #44]	; 0x2c
   1a0cc:	add	r6, r6, r7
   1a0d0:	sub	r0, fp, #44	; 0x2c
   1a0d4:	add	r1, ip, r6
   1a0d8:	sub	r2, lr, r6
   1a0dc:	bl	1801c <__assert_fail@plt+0x6730>
   1a0e0:	cmp	r0, #0
   1a0e4:	beq	1a57c <__assert_fail@plt+0x8c90>
   1a0e8:	cmn	r0, #1
   1a0ec:	beq	1a53c <__assert_fail@plt+0x8c50>
   1a0f0:	ldr	lr, [sp, #28]
   1a0f4:	cmn	r0, #2
   1a0f8:	beq	1a544 <__assert_fail@plt+0x8c58>
   1a0fc:	ldr	r2, [sp, #64]	; 0x40
   1a100:	cmp	r0, #2
   1a104:	mov	r1, #0
   1a108:	movwcc	r1, #1
   1a10c:	eor	r2, r2, #1
   1a110:	orrs	r1, r2, r1
   1a114:	bne	1a1d4 <__assert_fail@plt+0x88e8>
   1a118:	ldr	r1, [sp, #44]	; 0x2c
   1a11c:	ldr	r2, [sp, #24]
   1a120:	add	r1, r2, r1
   1a124:	mov	r2, #1
   1a128:	ldrb	r3, [r1, r2]
   1a12c:	sub	r3, r3, #91	; 0x5b
   1a130:	cmp	r3, #33	; 0x21
   1a134:	bhi	1a1c8 <__assert_fail@plt+0x88dc>
   1a138:	add	r6, pc, #0
   1a13c:	ldr	pc, [r6, r3, lsl #2]
   1a140:	andeq	sl, r1, ip, lsr r6
   1a144:	andeq	sl, r1, ip, lsr r6
   1a148:	andeq	sl, r1, r8, asr #3
   1a14c:	andeq	sl, r1, ip, lsr r6
   1a150:	andeq	sl, r1, r8, asr #3
   1a154:	andeq	sl, r1, ip, lsr r6
   1a158:	andeq	sl, r1, r8, asr #3
   1a15c:	andeq	sl, r1, r8, asr #3
   1a160:	andeq	sl, r1, r8, asr #3
   1a164:	andeq	sl, r1, r8, asr #3
   1a168:	andeq	sl, r1, r8, asr #3
   1a16c:	andeq	sl, r1, r8, asr #3
   1a170:	andeq	sl, r1, r8, asr #3
   1a174:	andeq	sl, r1, r8, asr #3
   1a178:	andeq	sl, r1, r8, asr #3
   1a17c:	andeq	sl, r1, r8, asr #3
   1a180:	andeq	sl, r1, r8, asr #3
   1a184:	andeq	sl, r1, r8, asr #3
   1a188:	andeq	sl, r1, r8, asr #3
   1a18c:	andeq	sl, r1, r8, asr #3
   1a190:	andeq	sl, r1, r8, asr #3
   1a194:	andeq	sl, r1, r8, asr #3
   1a198:	andeq	sl, r1, r8, asr #3
   1a19c:	andeq	sl, r1, r8, asr #3
   1a1a0:	andeq	sl, r1, r8, asr #3
   1a1a4:	andeq	sl, r1, r8, asr #3
   1a1a8:	andeq	sl, r1, r8, asr #3
   1a1ac:	andeq	sl, r1, r8, asr #3
   1a1b0:	andeq	sl, r1, r8, asr #3
   1a1b4:	andeq	sl, r1, r8, asr #3
   1a1b8:	andeq	sl, r1, r8, asr #3
   1a1bc:	andeq	sl, r1, r8, asr #3
   1a1c0:	andeq	sl, r1, r8, asr #3
   1a1c4:	andeq	sl, r1, ip, lsr r6
   1a1c8:	add	r2, r2, #1
   1a1cc:	cmp	r2, r0
   1a1d0:	bcc	1a128 <__assert_fail@plt+0x883c>
   1a1d4:	ldr	r6, [sp, #44]	; 0x2c
   1a1d8:	add	r6, r0, r6
   1a1dc:	ldr	r0, [fp, #-44]	; 0xffffffd4
   1a1e0:	bl	11604 <iswprint@plt>
   1a1e4:	cmp	r0, #0
   1a1e8:	movwne	r0, #1
   1a1ec:	and	r4, r4, r0
   1a1f0:	sub	r0, fp, #40	; 0x28
   1a1f4:	bl	1158c <mbsinit@plt>
   1a1f8:	ldr	lr, [sp, #28]
   1a1fc:	ldr	ip, [fp, #-84]	; 0xffffffac
   1a200:	sub	r3, fp, #40	; 0x28
   1a204:	cmp	r0, #0
   1a208:	beq	1a0c8 <__assert_fail@plt+0x87dc>
   1a20c:	b	1a584 <__assert_fail@plt+0x8c98>
   1a210:	ldr	r0, [sp, #32]
   1a214:	cmp	r0, #0
   1a218:	beq	1a2b4 <__assert_fail@plt+0x89c8>
   1a21c:	add	r0, r7, #2
   1a220:	cmp	r0, lr
   1a224:	bcs	1a2b4 <__assert_fail@plt+0x89c8>
   1a228:	add	r1, ip, r7
   1a22c:	ldrb	r1, [r1, #1]
   1a230:	cmp	r1, #63	; 0x3f
   1a234:	bne	1a2b4 <__assert_fail@plt+0x89c8>
   1a238:	ldrb	r5, [ip, r0]
   1a23c:	sub	r1, r5, #33	; 0x21
   1a240:	cmp	r1, #29
   1a244:	bhi	1a2b4 <__assert_fail@plt+0x89c8>
   1a248:	movw	r3, #20929	; 0x51c1
   1a24c:	mov	r2, #1
   1a250:	movt	r3, #14336	; 0x3800
   1a254:	tst	r3, r2, lsl r1
   1a258:	beq	1a2b4 <__assert_fail@plt+0x89c8>
   1a25c:	ldr	r1, [fp, #-72]	; 0xffffffb8
   1a260:	tst	r1, #1
   1a264:	bne	1a75c <__assert_fail@plt+0x8e70>
   1a268:	cmp	r8, sl
   1a26c:	mov	r7, r0
   1a270:	mov	r4, #0
   1a274:	movcc	r1, #63	; 0x3f
   1a278:	strbcc	r1, [r6, r8]
   1a27c:	add	r1, r8, #1
   1a280:	cmp	r1, sl
   1a284:	movcc	r2, #34	; 0x22
   1a288:	strbcc	r2, [r6, r1]
   1a28c:	add	r1, r8, #2
   1a290:	cmp	r1, sl
   1a294:	movcc	r2, #34	; 0x22
   1a298:	strbcc	r2, [r6, r1]
   1a29c:	add	r1, r8, #3
   1a2a0:	add	r8, r8, #4
   1a2a4:	cmp	r1, sl
   1a2a8:	movcc	r2, #63	; 0x3f
   1a2ac:	strbcc	r2, [r6, r1]
   1a2b0:	b	19d18 <__assert_fail@plt+0x842c>
   1a2b4:	mov	r5, #63	; 0x3f
   1a2b8:	mov	r4, #0
   1a2bc:	b	19d18 <__assert_fail@plt+0x842c>
   1a2c0:	add	r1, r2, r7
   1a2c4:	ldr	lr, [sp, #28]
   1a2c8:	mov	r3, #0
   1a2cc:	str	r1, [sp, #44]	; 0x2c
   1a2d0:	add	r1, r7, #1
   1a2d4:	ldr	r7, [fp, #-64]	; 0xffffffc0
   1a2d8:	tst	r0, #1
   1a2dc:	bne	1a3b0 <__assert_fail@plt+0x8ac4>
   1a2e0:	ldr	r2, [fp, #-72]	; 0xffffffb8
   1a2e4:	tst	r2, #1
   1a2e8:	bne	1a6a4 <__assert_fail@plt+0x8db8>
   1a2ec:	ldr	r3, [fp, #-80]	; 0xffffffb0
   1a2f0:	ldr	r2, [fp, #-56]	; 0xffffffc8
   1a2f4:	cmp	r7, #2
   1a2f8:	movwne	r3, #1
   1a2fc:	orr	r3, r3, r2
   1a300:	tst	r3, #1
   1a304:	bne	1a340 <__assert_fail@plt+0x8a54>
   1a308:	cmp	r8, sl
   1a30c:	add	r3, r8, #1
   1a310:	movcc	r2, #39	; 0x27
   1a314:	strbcc	r2, [r6, r8]
   1a318:	cmp	r3, sl
   1a31c:	movcc	r2, #36	; 0x24
   1a320:	strbcc	r2, [r6, r3]
   1a324:	add	r3, r8, #2
   1a328:	add	r8, r8, #3
   1a32c:	cmp	r3, sl
   1a330:	movcc	r2, #39	; 0x27
   1a334:	strbcc	r2, [r6, r3]
   1a338:	mov	r2, #1
   1a33c:	str	r2, [fp, #-56]	; 0xffffffc8
   1a340:	cmp	r8, sl
   1a344:	movcc	r3, #92	; 0x5c
   1a348:	strbcc	r3, [r6, r8]
   1a34c:	add	r3, r8, #1
   1a350:	cmp	r3, sl
   1a354:	andcc	r7, r5, #192	; 0xc0
   1a358:	movcc	r2, #48	; 0x30
   1a35c:	orrcc	r7, r2, r7, lsr #6
   1a360:	strbcc	r7, [r6, r3]
   1a364:	add	r3, r8, #2
   1a368:	add	r8, r8, #3
   1a36c:	cmp	r3, sl
   1a370:	lsrcc	r7, r5, #3
   1a374:	movcc	r2, #6
   1a378:	bficc	r7, r2, #3, #29
   1a37c:	mov	r2, #6
   1a380:	strbcc	r7, [r6, r3]
   1a384:	bfi	r5, r2, #3, #29
   1a388:	mov	r3, #1
   1a38c:	b	1a3d4 <__assert_fail@plt+0x8ae8>
   1a390:	cmp	r8, sl
   1a394:	ldr	r7, [fp, #-64]	; 0xffffffc0
   1a398:	strbcc	r5, [r6, r8]
   1a39c:	add	r8, r8, #1
   1a3a0:	ldrb	r5, [ip, r1]
   1a3a4:	add	r1, r1, #1
   1a3a8:	tst	r0, #1
   1a3ac:	beq	1a2e0 <__assert_fail@plt+0x89f4>
   1a3b0:	ldr	r2, [fp, #-52]	; 0xffffffcc
   1a3b4:	tst	r2, #1
   1a3b8:	beq	1a3cc <__assert_fail@plt+0x8ae0>
   1a3bc:	cmp	r8, sl
   1a3c0:	movcc	r7, #92	; 0x5c
   1a3c4:	strbcc	r7, [r6, r8]
   1a3c8:	add	r8, r8, #1
   1a3cc:	mov	r2, #0
   1a3d0:	str	r2, [fp, #-52]	; 0xffffffcc
   1a3d4:	ldr	r2, [sp, #44]	; 0x2c
   1a3d8:	and	r9, r3, #1
   1a3dc:	cmp	r2, r1
   1a3e0:	bls	1a4e0 <__assert_fail@plt+0x8bf4>
   1a3e4:	ldr	r2, [fp, #-56]	; 0xffffffc8
   1a3e8:	cmp	r9, #0
   1a3ec:	movwne	r9, #1
   1a3f0:	mvn	r7, r2
   1a3f4:	orr	r7, r7, r9
   1a3f8:	tst	r7, #1
   1a3fc:	bne	1a390 <__assert_fail@plt+0x8aa4>
   1a400:	cmp	r8, sl
   1a404:	movcc	r7, #39	; 0x27
   1a408:	strbcc	r7, [r6, r8]
   1a40c:	add	r7, r8, #1
   1a410:	add	r8, r8, #2
   1a414:	cmp	r7, sl
   1a418:	movcc	r2, #39	; 0x27
   1a41c:	strbcc	r2, [r6, r7]
   1a420:	mov	r2, #0
   1a424:	str	r2, [fp, #-56]	; 0xffffffc8
   1a428:	b	1a390 <__assert_fail@plt+0x8aa4>
   1a42c:	cmp	r8, sl
   1a430:	mov	r2, #1
   1a434:	movcc	r0, #39	; 0x27
   1a438:	strbcc	r0, [r6, r8]
   1a43c:	add	r0, r8, #1
   1a440:	cmp	r0, sl
   1a444:	movcc	r1, #36	; 0x24
   1a448:	strbcc	r1, [r6, r0]
   1a44c:	add	r0, r8, #2
   1a450:	cmp	r0, sl
   1a454:	movcc	r1, #39	; 0x27
   1a458:	strbcc	r1, [r6, r0]
   1a45c:	add	r0, r8, #3
   1a460:	cmp	r0, sl
   1a464:	add	r8, r0, #1
   1a468:	str	r2, [fp, #-56]	; 0xffffffc8
   1a46c:	movcc	r1, #92	; 0x5c
   1a470:	strbcc	r1, [r6, r0]
   1a474:	ldr	r1, [fp, #-64]	; 0xffffffc0
   1a478:	cmp	r1, #2
   1a47c:	beq	1a4d0 <__assert_fail@plt+0x8be4>
   1a480:	add	r1, r7, #1
   1a484:	mov	r4, #0
   1a488:	mov	r9, #1
   1a48c:	mov	r5, #48	; 0x30
   1a490:	cmp	r1, lr
   1a494:	bcs	19d18 <__assert_fail@plt+0x842c>
   1a498:	ldrb	r1, [ip, r1]
   1a49c:	sub	r1, r1, #48	; 0x30
   1a4a0:	uxtb	r1, r1
   1a4a4:	cmp	r1, #9
   1a4a8:	bhi	19d18 <__assert_fail@plt+0x842c>
   1a4ac:	cmp	r8, sl
   1a4b0:	movcc	r1, #48	; 0x30
   1a4b4:	strbcc	r1, [r6, r8]
   1a4b8:	add	r1, r0, #2
   1a4bc:	add	r8, r0, #3
   1a4c0:	cmp	r1, sl
   1a4c4:	movcc	r2, #48	; 0x30
   1a4c8:	strbcc	r2, [r6, r1]
   1a4cc:	b	19d18 <__assert_fail@plt+0x842c>
   1a4d0:	mov	r0, #48	; 0x30
   1a4d4:	mov	r9, #1
   1a4d8:	mov	r4, #0
   1a4dc:	b	19fb0 <__assert_fail@plt+0x86c4>
   1a4e0:	cmp	r9, #0
   1a4e4:	sub	r7, r1, #1
   1a4e8:	mov	r0, r5
   1a4ec:	movwne	r9, #1
   1a4f0:	cmp	r9, #0
   1a4f4:	bne	1a534 <__assert_fail@plt+0x8c48>
   1a4f8:	ldr	r1, [fp, #-56]	; 0xffffffc8
   1a4fc:	tst	r1, #1
   1a500:	beq	1a534 <__assert_fail@plt+0x8c48>
   1a504:	cmp	r8, sl
   1a508:	ldr	r5, [fp, #-48]	; 0xffffffd0
   1a50c:	movcc	r1, #39	; 0x27
   1a510:	strbcc	r1, [r6, r8]
   1a514:	add	r1, r8, #1
   1a518:	add	r8, r8, #2
   1a51c:	cmp	r1, sl
   1a520:	movcc	r2, #39	; 0x27
   1a524:	strbcc	r2, [r6, r1]
   1a528:	mov	r1, #0
   1a52c:	str	r1, [fp, #-56]	; 0xffffffc8
   1a530:	b	1a03c <__assert_fail@plt+0x8750>
   1a534:	ldr	r5, [fp, #-48]	; 0xffffffd0
   1a538:	b	1a03c <__assert_fail@plt+0x8750>
   1a53c:	mov	r4, #0
   1a540:	b	1a57c <__assert_fail@plt+0x8c90>
   1a544:	mov	r4, #0
   1a548:	cmp	lr, r6
   1a54c:	bls	1a57c <__assert_fail@plt+0x8c90>
   1a550:	ldr	ip, [fp, #-84]	; 0xffffffac
   1a554:	ldr	r6, [sp, #44]	; 0x2c
   1a558:	ldr	r0, [sp, #24]
   1a55c:	ldrb	r0, [r0, r6]
   1a560:	cmp	r0, #0
   1a564:	beq	1a584 <__assert_fail@plt+0x8c98>
   1a568:	add	r6, r6, #1
   1a56c:	add	r0, r7, r6
   1a570:	cmp	r0, lr
   1a574:	bcc	1a558 <__assert_fail@plt+0x8c6c>
   1a578:	b	1a584 <__assert_fail@plt+0x8c98>
   1a57c:	ldr	ip, [fp, #-84]	; 0xffffffac
   1a580:	ldr	r6, [sp, #44]	; 0x2c
   1a584:	mov	r1, r6
   1a588:	ldr	r6, [sp, #80]	; 0x50
   1a58c:	b	19ee4 <__assert_fail@plt+0x85f8>
   1a590:	mov	lr, r7
   1a594:	b	1a59c <__assert_fail@plt+0x8cb0>
   1a598:	mvn	lr, #0
   1a59c:	ldr	r7, [fp, #-64]	; 0xffffffc0
   1a5a0:	ldr	r1, [fp, #-72]	; 0xffffffb8
   1a5a4:	eor	r0, r7, #2
   1a5a8:	orr	r0, r0, r8
   1a5ac:	clz	r0, r0
   1a5b0:	lsr	r0, r0, #5
   1a5b4:	tst	r1, r0
   1a5b8:	bne	1a644 <__assert_fail@plt+0x8d58>
   1a5bc:	mov	r0, r1
   1a5c0:	ldr	r1, [fp, #-80]	; 0xffffffb0
   1a5c4:	cmp	r7, #2
   1a5c8:	movwne	r1, #1
   1a5cc:	orr	r0, r0, r1
   1a5d0:	tst	r0, #1
   1a5d4:	ldreq	r0, [sp, #60]	; 0x3c
   1a5d8:	eoreq	r0, r0, #1
   1a5dc:	tsteq	r0, #1
   1a5e0:	bne	1a6f0 <__assert_fail@plt+0x8e04>
   1a5e4:	mov	r9, lr
   1a5e8:	tst	r5, #1
   1a5ec:	bne	1a6ac <__assert_fail@plt+0x8dc0>
   1a5f0:	ldr	r6, [sp, #56]	; 0x38
   1a5f4:	mov	r4, #0
   1a5f8:	cmp	r6, #0
   1a5fc:	beq	1a6e8 <__assert_fail@plt+0x8dfc>
   1a600:	ldr	r0, [sp, #84]	; 0x54
   1a604:	mov	r1, #0
   1a608:	cmp	sl, #0
   1a60c:	mov	r5, #0
   1a610:	str	r1, [fp, #-72]	; 0xffffffb8
   1a614:	beq	197e4 <__assert_fail@plt+0x7ef8>
   1a618:	b	1a6f0 <__assert_fail@plt+0x8e04>
   1a61c:	ldr	r7, [fp, #-64]	; 0xffffffc0
   1a620:	ldr	r2, [sp, #84]	; 0x54
   1a624:	b	1a64c <__assert_fail@plt+0x8d60>
   1a628:	ldr	ip, [fp, #-84]	; 0xffffffac
   1a62c:	mov	r2, #1
   1a630:	mov	lr, r4
   1a634:	ldr	r7, [fp, #-64]	; 0xffffffc0
   1a638:	b	1a64c <__assert_fail@plt+0x8d60>
   1a63c:	ldr	r6, [sp, #80]	; 0x50
   1a640:	ldr	ip, [fp, #-84]	; 0xffffffac
   1a644:	ldr	r2, [sp, #84]	; 0x54
   1a648:	mov	r7, #2
   1a64c:	mov	r0, #0
   1a650:	ldr	r1, [fp, #12]
   1a654:	tst	r2, #1
   1a658:	mov	r2, r7
   1a65c:	mov	r3, lr
   1a660:	str	r0, [sp, #8]
   1a664:	ldr	r0, [sp, #72]	; 0x48
   1a668:	movwne	r2, #4
   1a66c:	cmp	r7, #2
   1a670:	movne	r2, r7
   1a674:	str	r2, [sp]
   1a678:	mov	r2, ip
   1a67c:	bic	r1, r1, #2
   1a680:	str	r0, [sp, #12]
   1a684:	ldr	r0, [sp, #76]	; 0x4c
   1a688:	str	r1, [sp, #4]
   1a68c:	mov	r1, sl
   1a690:	str	r0, [sp, #16]
   1a694:	mov	r0, r6
   1a698:	bl	19764 <__assert_fail@plt+0x7e78>
   1a69c:	mov	r8, r0
   1a6a0:	b	1a748 <__assert_fail@plt+0x8e5c>
   1a6a4:	ldr	r2, [sp, #84]	; 0x54
   1a6a8:	b	1a64c <__assert_fail@plt+0x8d60>
   1a6ac:	mov	r0, #5
   1a6b0:	ldr	r1, [sp, #56]	; 0x38
   1a6b4:	ldr	r2, [fp, #-84]	; 0xffffffac
   1a6b8:	mov	r3, r9
   1a6bc:	str	r0, [sp]
   1a6c0:	ldr	r0, [fp, #12]
   1a6c4:	str	r0, [sp, #4]
   1a6c8:	ldr	r0, [fp, #16]
   1a6cc:	str	r0, [sp, #8]
   1a6d0:	ldr	r0, [sp, #72]	; 0x48
   1a6d4:	str	r0, [sp, #12]
   1a6d8:	ldr	r0, [sp, #76]	; 0x4c
   1a6dc:	str	r0, [sp, #16]
   1a6e0:	ldr	r0, [sp, #80]	; 0x50
   1a6e4:	b	1a698 <__assert_fail@plt+0x8dac>
   1a6e8:	mov	r0, #0
   1a6ec:	str	r0, [fp, #-72]	; 0xffffffb8
   1a6f0:	ldr	r1, [sp, #92]	; 0x5c
   1a6f4:	cmp	r1, #0
   1a6f8:	beq	1a738 <__assert_fail@plt+0x8e4c>
   1a6fc:	ldr	r0, [fp, #-72]	; 0xffffffb8
   1a700:	ldr	r2, [sp, #80]	; 0x50
   1a704:	tst	r0, #1
   1a708:	bne	1a73c <__assert_fail@plt+0x8e50>
   1a70c:	ldrb	r0, [r1]
   1a710:	cmp	r0, #0
   1a714:	beq	1a73c <__assert_fail@plt+0x8e50>
   1a718:	add	r1, r1, #1
   1a71c:	cmp	r8, sl
   1a720:	strbcc	r0, [r2, r8]
   1a724:	add	r8, r8, #1
   1a728:	ldrb	r0, [r1], #1
   1a72c:	cmp	r0, #0
   1a730:	bne	1a71c <__assert_fail@plt+0x8e30>
   1a734:	b	1a73c <__assert_fail@plt+0x8e50>
   1a738:	ldr	r2, [sp, #80]	; 0x50
   1a73c:	cmp	r8, sl
   1a740:	movcc	r0, #0
   1a744:	strbcc	r0, [r2, r8]
   1a748:	mov	r0, r8
   1a74c:	sub	sp, fp, #28
   1a750:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a754:	mov	r2, #1
   1a758:	b	1a634 <__assert_fail@plt+0x8d48>
   1a75c:	ldr	r2, [sp, #84]	; 0x54
   1a760:	mov	r7, #5
   1a764:	b	1a64c <__assert_fail@plt+0x8d60>
   1a768:	bl	118bc <abort@plt>
   1a76c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a770:	add	fp, sp, #28
   1a774:	sub	sp, sp, #28
   1a778:	movw	r5, #5064	; 0x13c8
   1a77c:	cmp	r2, #0
   1a780:	mov	r4, r1
   1a784:	mov	r7, r0
   1a788:	str	r0, [sp, #20]
   1a78c:	movt	r5, #3
   1a790:	movne	r5, r2
   1a794:	bl	11748 <__errno_location@plt>
   1a798:	mov	sl, r0
   1a79c:	ldm	r5, {r0, r1}
   1a7a0:	ldr	r2, [r5, #40]	; 0x28
   1a7a4:	ldr	r3, [r5, #44]	; 0x2c
   1a7a8:	add	r9, r5, #8
   1a7ac:	ldr	r6, [sl]
   1a7b0:	orr	r8, r1, #1
   1a7b4:	mov	r1, #0
   1a7b8:	str	r6, [sp, #24]
   1a7bc:	stm	sp, {r0, r8, r9}
   1a7c0:	str	r2, [sp, #12]
   1a7c4:	str	r3, [sp, #16]
   1a7c8:	mov	r0, #0
   1a7cc:	mov	r2, r7
   1a7d0:	mov	r3, r4
   1a7d4:	mov	r6, r4
   1a7d8:	bl	19764 <__assert_fail@plt+0x7e78>
   1a7dc:	add	r7, r0, #1
   1a7e0:	mov	r0, r7
   1a7e4:	bl	1bb98 <__assert_fail@plt+0xa2ac>
   1a7e8:	mov	r4, r0
   1a7ec:	ldr	r0, [r5]
   1a7f0:	ldr	r2, [r5, #44]	; 0x2c
   1a7f4:	ldr	r1, [r5, #40]	; 0x28
   1a7f8:	mov	r3, r6
   1a7fc:	stm	sp, {r0, r8, r9}
   1a800:	str	r2, [sp, #16]
   1a804:	str	r1, [sp, #12]
   1a808:	mov	r0, r4
   1a80c:	mov	r1, r7
   1a810:	ldr	r2, [sp, #20]
   1a814:	bl	19764 <__assert_fail@plt+0x7e78>
   1a818:	ldr	r0, [sp, #24]
   1a81c:	str	r0, [sl]
   1a820:	mov	r0, r4
   1a824:	sub	sp, fp, #28
   1a828:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a82c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a830:	add	fp, sp, #28
   1a834:	sub	sp, sp, #36	; 0x24
   1a838:	movw	r8, #5064	; 0x13c8
   1a83c:	cmp	r3, #0
   1a840:	mov	r4, r2
   1a844:	str	r2, [sp, #24]
   1a848:	mov	r5, r1
   1a84c:	mov	r6, r0
   1a850:	str	r0, [sp, #20]
   1a854:	movt	r8, #3
   1a858:	movne	r8, r3
   1a85c:	bl	11748 <__errno_location@plt>
   1a860:	str	r0, [sp, #28]
   1a864:	cmp	r4, #0
   1a868:	add	sl, r8, #8
   1a86c:	ldm	r8, {r3, r9}
   1a870:	ldr	r7, [r0]
   1a874:	ldr	r1, [r8, #40]	; 0x28
   1a878:	ldr	r2, [r8, #44]	; 0x2c
   1a87c:	mov	r0, #0
   1a880:	orreq	r9, r9, #1
   1a884:	str	r7, [sp, #32]
   1a888:	mov	r7, r5
   1a88c:	stm	sp, {r3, r9, sl}
   1a890:	str	r1, [sp, #12]
   1a894:	str	r2, [sp, #16]
   1a898:	mov	r1, #0
   1a89c:	mov	r2, r6
   1a8a0:	mov	r3, r5
   1a8a4:	bl	19764 <__assert_fail@plt+0x7e78>
   1a8a8:	add	r4, r0, #1
   1a8ac:	mov	r5, r0
   1a8b0:	mov	r0, r4
   1a8b4:	bl	1bb98 <__assert_fail@plt+0xa2ac>
   1a8b8:	mov	r6, r0
   1a8bc:	ldr	r0, [r8]
   1a8c0:	ldr	r2, [r8, #44]	; 0x2c
   1a8c4:	ldr	r1, [r8, #40]	; 0x28
   1a8c8:	mov	r3, r7
   1a8cc:	stm	sp, {r0, r9, sl}
   1a8d0:	str	r2, [sp, #16]
   1a8d4:	str	r1, [sp, #12]
   1a8d8:	mov	r0, r6
   1a8dc:	mov	r1, r4
   1a8e0:	ldr	r2, [sp, #20]
   1a8e4:	bl	19764 <__assert_fail@plt+0x7e78>
   1a8e8:	ldr	r0, [sp, #24]
   1a8ec:	ldr	r1, [sp, #32]
   1a8f0:	ldr	r2, [sp, #28]
   1a8f4:	cmp	r0, #0
   1a8f8:	str	r1, [r2]
   1a8fc:	strne	r5, [r0]
   1a900:	mov	r0, r6
   1a904:	sub	sp, fp, #28
   1a908:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a90c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1a910:	add	fp, sp, #24
   1a914:	movw	r5, #4828	; 0x12dc
   1a918:	movw	r8, #4824	; 0x12d8
   1a91c:	movt	r5, #3
   1a920:	movt	r8, #3
   1a924:	ldr	r0, [r5]
   1a928:	ldr	r4, [r8]
   1a92c:	cmp	r0, #2
   1a930:	blt	1a95c <__assert_fail@plt+0x9070>
   1a934:	add	r7, r4, #12
   1a938:	mov	r6, #0
   1a93c:	ldr	r0, [r7, r6, lsl #3]
   1a940:	bl	16008 <__assert_fail@plt+0x471c>
   1a944:	ldr	r1, [r5]
   1a948:	add	r2, r6, #2
   1a94c:	add	r0, r6, #1
   1a950:	mov	r6, r0
   1a954:	cmp	r2, r1
   1a958:	blt	1a93c <__assert_fail@plt+0x9050>
   1a95c:	ldr	r0, [r4, #4]
   1a960:	movw	r7, #5112	; 0x13f8
   1a964:	movt	r7, #3
   1a968:	cmp	r0, r7
   1a96c:	beq	1a984 <__assert_fail@plt+0x9098>
   1a970:	bl	16008 <__assert_fail@plt+0x471c>
   1a974:	movw	r0, #4832	; 0x12e0
   1a978:	mov	r6, #256	; 0x100
   1a97c:	movt	r0, #3
   1a980:	strd	r6, [r0]
   1a984:	movw	r6, #4832	; 0x12e0
   1a988:	movt	r6, #3
   1a98c:	cmp	r4, r6
   1a990:	beq	1a9a0 <__assert_fail@plt+0x90b4>
   1a994:	mov	r0, r4
   1a998:	bl	16008 <__assert_fail@plt+0x471c>
   1a99c:	str	r6, [r8]
   1a9a0:	mov	r0, #1
   1a9a4:	str	r0, [r5]
   1a9a8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1a9ac:	movw	r3, #5064	; 0x13c8
   1a9b0:	mvn	r2, #0
   1a9b4:	movt	r3, #3
   1a9b8:	b	1a9bc <__assert_fail@plt+0x90d0>
   1a9bc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a9c0:	add	fp, sp, #28
   1a9c4:	sub	sp, sp, #44	; 0x2c
   1a9c8:	mov	r7, r3
   1a9cc:	str	r2, [sp, #36]	; 0x24
   1a9d0:	str	r1, [sp, #32]
   1a9d4:	mov	r5, r0
   1a9d8:	bl	11748 <__errno_location@plt>
   1a9dc:	cmp	r5, #0
   1a9e0:	blt	1ab4c <__assert_fail@plt+0x9260>
   1a9e4:	cmn	r5, #-2147483647	; 0x80000001
   1a9e8:	beq	1ab4c <__assert_fail@plt+0x9260>
   1a9ec:	movw	r8, #4828	; 0x12dc
   1a9f0:	movw	r4, #4824	; 0x12d8
   1a9f4:	str	r0, [sp, #28]
   1a9f8:	ldr	r0, [r0]
   1a9fc:	movt	r8, #3
   1aa00:	movt	r4, #3
   1aa04:	ldr	r1, [r8]
   1aa08:	ldr	r6, [r4]
   1aa0c:	str	r0, [sp, #24]
   1aa10:	cmp	r1, r5
   1aa14:	ble	1aa20 <__assert_fail@plt+0x9134>
   1aa18:	mov	sl, r6
   1aa1c:	b	1aa88 <__assert_fail@plt+0x919c>
   1aa20:	movw	r9, #4832	; 0x12e0
   1aa24:	mov	r0, #8
   1aa28:	add	r2, r5, #1
   1aa2c:	str	r1, [fp, #-32]	; 0xffffffe0
   1aa30:	mvn	r3, #-2147483648	; 0x80000000
   1aa34:	movt	r9, #3
   1aa38:	str	r0, [sp]
   1aa3c:	sub	r2, r2, r1
   1aa40:	sub	r1, fp, #32
   1aa44:	subs	r0, r6, r9
   1aa48:	movne	r0, r6
   1aa4c:	bl	1bd98 <__assert_fail@plt+0xa4ac>
   1aa50:	cmp	r6, r9
   1aa54:	mov	sl, r0
   1aa58:	str	r0, [r4]
   1aa5c:	ldrdeq	r0, [r9]
   1aa60:	stmeq	sl, {r0, r1}
   1aa64:	ldr	r1, [r8]
   1aa68:	ldr	r2, [fp, #-32]	; 0xffffffe0
   1aa6c:	add	r0, sl, r1, lsl #3
   1aa70:	sub	r1, r2, r1
   1aa74:	lsl	r2, r1, #3
   1aa78:	mov	r1, #0
   1aa7c:	bl	1176c <memset@plt>
   1aa80:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1aa84:	str	r0, [r8]
   1aa88:	mov	r9, sl
   1aa8c:	ldr	r6, [r9, r5, lsl #3]!
   1aa90:	ldr	r4, [r9, #4]!
   1aa94:	ldm	r7, {r0, r1}
   1aa98:	ldr	r2, [r7, #40]	; 0x28
   1aa9c:	ldr	r3, [r7, #44]	; 0x2c
   1aaa0:	orr	r8, r1, #1
   1aaa4:	add	r1, r7, #8
   1aaa8:	stm	sp, {r0, r8}
   1aaac:	add	r0, sp, #8
   1aab0:	str	r1, [sp, #20]
   1aab4:	stm	r0, {r1, r2, r3}
   1aab8:	mov	r0, r4
   1aabc:	mov	r1, r6
   1aac0:	ldr	r2, [sp, #32]
   1aac4:	ldr	r3, [sp, #36]	; 0x24
   1aac8:	bl	19764 <__assert_fail@plt+0x7e78>
   1aacc:	cmp	r6, r0
   1aad0:	bhi	1ab34 <__assert_fail@plt+0x9248>
   1aad4:	add	r6, r0, #1
   1aad8:	movw	r0, #5112	; 0x13f8
   1aadc:	movt	r0, #3
   1aae0:	str	r6, [sl, r5, lsl #3]
   1aae4:	cmp	r4, r0
   1aae8:	beq	1aaf4 <__assert_fail@plt+0x9208>
   1aaec:	mov	r0, r4
   1aaf0:	bl	16008 <__assert_fail@plt+0x471c>
   1aaf4:	mov	r0, r6
   1aaf8:	bl	1bb98 <__assert_fail@plt+0xa2ac>
   1aafc:	str	r0, [r9]
   1ab00:	mov	r4, r0
   1ab04:	add	r3, sp, #8
   1ab08:	ldr	r0, [r7]
   1ab0c:	ldr	r1, [r7, #40]	; 0x28
   1ab10:	ldr	r2, [r7, #44]	; 0x2c
   1ab14:	stm	sp, {r0, r8}
   1ab18:	ldr	r0, [sp, #20]
   1ab1c:	stm	r3, {r0, r1, r2}
   1ab20:	mov	r0, r4
   1ab24:	mov	r1, r6
   1ab28:	ldr	r2, [sp, #32]
   1ab2c:	ldr	r3, [sp, #36]	; 0x24
   1ab30:	bl	19764 <__assert_fail@plt+0x7e78>
   1ab34:	ldr	r0, [sp, #28]
   1ab38:	ldr	r1, [sp, #24]
   1ab3c:	str	r1, [r0]
   1ab40:	mov	r0, r4
   1ab44:	sub	sp, fp, #28
   1ab48:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ab4c:	bl	118bc <abort@plt>
   1ab50:	movw	r3, #5064	; 0x13c8
   1ab54:	movt	r3, #3
   1ab58:	b	1a9bc <__assert_fail@plt+0x90d0>
   1ab5c:	movw	r3, #5064	; 0x13c8
   1ab60:	mov	r1, r0
   1ab64:	mov	r0, #0
   1ab68:	mvn	r2, #0
   1ab6c:	movt	r3, #3
   1ab70:	b	1a9bc <__assert_fail@plt+0x90d0>
   1ab74:	movw	r3, #5064	; 0x13c8
   1ab78:	mov	r2, r1
   1ab7c:	mov	r1, r0
   1ab80:	mov	r0, #0
   1ab84:	movt	r3, #3
   1ab88:	b	1a9bc <__assert_fail@plt+0x90d0>
   1ab8c:	push	{fp, lr}
   1ab90:	mov	fp, sp
   1ab94:	sub	sp, sp, #48	; 0x30
   1ab98:	vmov.i32	q8, #0	; 0x00000000
   1ab9c:	mov	ip, #32
   1aba0:	mov	r3, sp
   1aba4:	mov	lr, r2
   1aba8:	cmp	r1, #10
   1abac:	add	r2, r3, #16
   1abb0:	vst1.64	{d16-d17}, [r3], ip
   1abb4:	vst1.64	{d16-d17}, [r3]
   1abb8:	vst1.64	{d16-d17}, [r2]
   1abbc:	beq	1abdc <__assert_fail@plt+0x92f0>
   1abc0:	str	r1, [sp]
   1abc4:	mov	r3, sp
   1abc8:	mov	r1, lr
   1abcc:	mvn	r2, #0
   1abd0:	bl	1a9bc <__assert_fail@plt+0x90d0>
   1abd4:	mov	sp, fp
   1abd8:	pop	{fp, pc}
   1abdc:	bl	118bc <abort@plt>
   1abe0:	push	{r4, sl, fp, lr}
   1abe4:	add	fp, sp, #8
   1abe8:	sub	sp, sp, #48	; 0x30
   1abec:	mov	ip, r3
   1abf0:	mov	r3, sp
   1abf4:	vmov.i32	q8, #0	; 0x00000000
   1abf8:	mov	lr, #32
   1abfc:	cmp	r1, #10
   1ac00:	add	r4, r3, #16
   1ac04:	vst1.64	{d16-d17}, [r3], lr
   1ac08:	vst1.64	{d16-d17}, [r3]
   1ac0c:	vst1.64	{d16-d17}, [r4]
   1ac10:	beq	1ac30 <__assert_fail@plt+0x9344>
   1ac14:	str	r1, [sp]
   1ac18:	mov	r1, r2
   1ac1c:	mov	r3, sp
   1ac20:	mov	r2, ip
   1ac24:	bl	1a9bc <__assert_fail@plt+0x90d0>
   1ac28:	sub	sp, fp, #8
   1ac2c:	pop	{r4, sl, fp, pc}
   1ac30:	bl	118bc <abort@plt>
   1ac34:	push	{fp, lr}
   1ac38:	mov	fp, sp
   1ac3c:	sub	sp, sp, #48	; 0x30
   1ac40:	mov	r3, sp
   1ac44:	vmov.i32	q8, #0	; 0x00000000
   1ac48:	mov	ip, #32
   1ac4c:	cmp	r0, #10
   1ac50:	add	r2, r3, #16
   1ac54:	vst1.64	{d16-d17}, [r3], ip
   1ac58:	vst1.64	{d16-d17}, [r3]
   1ac5c:	vst1.64	{d16-d17}, [r2]
   1ac60:	beq	1ac80 <__assert_fail@plt+0x9394>
   1ac64:	str	r0, [sp]
   1ac68:	mov	r3, sp
   1ac6c:	mov	r0, #0
   1ac70:	mvn	r2, #0
   1ac74:	bl	1a9bc <__assert_fail@plt+0x90d0>
   1ac78:	mov	sp, fp
   1ac7c:	pop	{fp, pc}
   1ac80:	bl	118bc <abort@plt>
   1ac84:	push	{fp, lr}
   1ac88:	mov	fp, sp
   1ac8c:	sub	sp, sp, #48	; 0x30
   1ac90:	mov	r3, sp
   1ac94:	vmov.i32	q8, #0	; 0x00000000
   1ac98:	mov	ip, #32
   1ac9c:	cmp	r0, #10
   1aca0:	add	lr, r3, #16
   1aca4:	vst1.64	{d16-d17}, [r3], ip
   1aca8:	vst1.64	{d16-d17}, [r3]
   1acac:	vst1.64	{d16-d17}, [lr]
   1acb0:	beq	1accc <__assert_fail@plt+0x93e0>
   1acb4:	str	r0, [sp]
   1acb8:	mov	r3, sp
   1acbc:	mov	r0, #0
   1acc0:	bl	1a9bc <__assert_fail@plt+0x90d0>
   1acc4:	mov	sp, fp
   1acc8:	pop	{fp, pc}
   1accc:	bl	118bc <abort@plt>
   1acd0:	push	{r4, sl, fp, lr}
   1acd4:	add	fp, sp, #8
   1acd8:	sub	sp, sp, #48	; 0x30
   1acdc:	mov	lr, r0
   1ace0:	movw	r0, #5064	; 0x13c8
   1ace4:	mov	r3, #32
   1ace8:	mov	ip, r1
   1acec:	mov	r4, #1
   1acf0:	movt	r0, #3
   1acf4:	add	r1, r0, #16
   1acf8:	vld1.64	{d16-d17}, [r0], r3
   1acfc:	mov	r3, sp
   1ad00:	vld1.64	{d18-d19}, [r1]
   1ad04:	add	r1, r3, #16
   1ad08:	vld1.64	{d20-d21}, [r0]
   1ad0c:	add	r0, r3, #32
   1ad10:	vst1.64	{d18-d19}, [r1]
   1ad14:	mov	r1, r3
   1ad18:	vst1.64	{d20-d21}, [r0]
   1ad1c:	mov	r0, #28
   1ad20:	and	r0, r0, r2, lsr #3
   1ad24:	and	r2, r2, #31
   1ad28:	vst1.64	{d16-d17}, [r1], r0
   1ad2c:	ldr	r0, [r1, #8]
   1ad30:	bic	r4, r4, r0, lsr r2
   1ad34:	eor	r0, r0, r4, lsl r2
   1ad38:	mov	r2, ip
   1ad3c:	str	r0, [r1, #8]
   1ad40:	mov	r0, #0
   1ad44:	mov	r1, lr
   1ad48:	bl	1a9bc <__assert_fail@plt+0x90d0>
   1ad4c:	sub	sp, fp, #8
   1ad50:	pop	{r4, sl, fp, pc}
   1ad54:	push	{fp, lr}
   1ad58:	mov	fp, sp
   1ad5c:	sub	sp, sp, #48	; 0x30
   1ad60:	mov	ip, r0
   1ad64:	movw	r0, #5064	; 0x13c8
   1ad68:	mov	r3, #32
   1ad6c:	movt	r0, #3
   1ad70:	add	r2, r0, #16
   1ad74:	vld1.64	{d16-d17}, [r0], r3
   1ad78:	mov	r3, sp
   1ad7c:	vld1.64	{d18-d19}, [r2]
   1ad80:	add	r2, r3, #16
   1ad84:	vld1.64	{d20-d21}, [r0]
   1ad88:	add	r0, r3, #32
   1ad8c:	vst1.64	{d18-d19}, [r2]
   1ad90:	mov	r2, r3
   1ad94:	vst1.64	{d20-d21}, [r0]
   1ad98:	mov	r0, #28
   1ad9c:	and	r0, r0, r1, lsr #3
   1ada0:	and	r1, r1, #31
   1ada4:	vst1.64	{d16-d17}, [r2], r0
   1ada8:	mov	r0, #1
   1adac:	ldr	lr, [r2, #8]
   1adb0:	bic	r0, r0, lr, lsr r1
   1adb4:	eor	r0, lr, r0, lsl r1
   1adb8:	mov	r1, ip
   1adbc:	str	r0, [r2, #8]
   1adc0:	mov	r0, #0
   1adc4:	mvn	r2, #0
   1adc8:	bl	1a9bc <__assert_fail@plt+0x90d0>
   1adcc:	mov	sp, fp
   1add0:	pop	{fp, pc}
   1add4:	push	{fp, lr}
   1add8:	mov	fp, sp
   1addc:	sub	sp, sp, #48	; 0x30
   1ade0:	movw	r2, #5064	; 0x13c8
   1ade4:	mov	r3, #32
   1ade8:	mov	r1, r0
   1adec:	movt	r2, #3
   1adf0:	add	r0, r2, #16
   1adf4:	vld1.64	{d16-d17}, [r2], r3
   1adf8:	mov	r3, sp
   1adfc:	vld1.64	{d18-d19}, [r0]
   1ae00:	add	r0, r3, #16
   1ae04:	vld1.64	{d20-d21}, [r2]
   1ae08:	mov	r2, r3
   1ae0c:	vst1.64	{d18-d19}, [r0]
   1ae10:	add	r0, r3, #32
   1ae14:	vst1.64	{d20-d21}, [r0]
   1ae18:	mov	r0, #12
   1ae1c:	vst1.64	{d16-d17}, [r2], r0
   1ae20:	ldr	r0, [r2]
   1ae24:	orr	r0, r0, #67108864	; 0x4000000
   1ae28:	str	r0, [r2]
   1ae2c:	mov	r0, #0
   1ae30:	mvn	r2, #0
   1ae34:	bl	1a9bc <__assert_fail@plt+0x90d0>
   1ae38:	mov	sp, fp
   1ae3c:	pop	{fp, pc}
   1ae40:	push	{fp, lr}
   1ae44:	mov	fp, sp
   1ae48:	sub	sp, sp, #48	; 0x30
   1ae4c:	mov	ip, r1
   1ae50:	mov	r1, r0
   1ae54:	movw	r0, #5064	; 0x13c8
   1ae58:	mov	r3, #32
   1ae5c:	movt	r0, #3
   1ae60:	add	r2, r0, #16
   1ae64:	vld1.64	{d16-d17}, [r0], r3
   1ae68:	mov	r3, sp
   1ae6c:	vld1.64	{d18-d19}, [r2]
   1ae70:	add	r2, r3, #16
   1ae74:	vld1.64	{d20-d21}, [r0]
   1ae78:	add	r0, r3, #32
   1ae7c:	vst1.64	{d18-d19}, [r2]
   1ae80:	mov	r2, r3
   1ae84:	vst1.64	{d20-d21}, [r0]
   1ae88:	mov	r0, #12
   1ae8c:	vst1.64	{d16-d17}, [r2], r0
   1ae90:	ldr	r0, [r2]
   1ae94:	orr	r0, r0, #67108864	; 0x4000000
   1ae98:	str	r0, [r2]
   1ae9c:	mov	r0, #0
   1aea0:	mov	r2, ip
   1aea4:	bl	1a9bc <__assert_fail@plt+0x90d0>
   1aea8:	mov	sp, fp
   1aeac:	pop	{fp, pc}
   1aeb0:	push	{r4, sl, fp, lr}
   1aeb4:	add	fp, sp, #8
   1aeb8:	sub	sp, sp, #96	; 0x60
   1aebc:	mov	ip, r2
   1aec0:	mov	r2, sp
   1aec4:	vmov.i32	q8, #0	; 0x00000000
   1aec8:	mov	r4, #28
   1aecc:	cmp	r1, #10
   1aed0:	mov	r3, r2
   1aed4:	add	lr, r2, #16
   1aed8:	vst1.64	{d16-d17}, [r3], r4
   1aedc:	vst1.64	{d16-d17}, [lr]
   1aee0:	vst1.32	{d16-d17}, [r3]
   1aee4:	beq	1af34 <__assert_fail@plt+0x9648>
   1aee8:	vld1.64	{d16-d17}, [r2], r4
   1aeec:	vld1.64	{d18-d19}, [lr]
   1aef0:	add	r3, sp, #48	; 0x30
   1aef4:	add	r4, r3, #4
   1aef8:	vld1.32	{d20-d21}, [r2]
   1aefc:	add	r2, r3, #20
   1af00:	vst1.32	{d16-d17}, [r4]
   1af04:	vst1.32	{d18-d19}, [r2]
   1af08:	add	r2, r3, #32
   1af0c:	vst1.32	{d20-d21}, [r2]
   1af10:	str	r1, [sp, #48]	; 0x30
   1af14:	mvn	r2, #0
   1af18:	ldr	r1, [sp, #60]	; 0x3c
   1af1c:	orr	r1, r1, #67108864	; 0x4000000
   1af20:	str	r1, [sp, #60]	; 0x3c
   1af24:	mov	r1, ip
   1af28:	bl	1a9bc <__assert_fail@plt+0x90d0>
   1af2c:	sub	sp, fp, #8
   1af30:	pop	{r4, sl, fp, pc}
   1af34:	bl	118bc <abort@plt>
   1af38:	push	{r4, r5, fp, lr}
   1af3c:	add	fp, sp, #8
   1af40:	sub	sp, sp, #48	; 0x30
   1af44:	mov	ip, r3
   1af48:	movw	r3, #5064	; 0x13c8
   1af4c:	mov	lr, #32
   1af50:	cmp	r1, #0
   1af54:	mov	r5, sp
   1af58:	movt	r3, #3
   1af5c:	cmpne	r2, #0
   1af60:	add	r4, r3, #16
   1af64:	vld1.64	{d16-d17}, [r3], lr
   1af68:	vld1.64	{d18-d19}, [r4]
   1af6c:	add	r4, r5, #16
   1af70:	vld1.64	{d20-d21}, [r3]
   1af74:	vst1.64	{d16-d17}, [r5], lr
   1af78:	mov	r3, #10
   1af7c:	vst1.64	{d18-d19}, [r4]
   1af80:	vst1.64	{d20-d21}, [r5]
   1af84:	str	r3, [sp]
   1af88:	bne	1af90 <__assert_fail@plt+0x96a4>
   1af8c:	bl	118bc <abort@plt>
   1af90:	str	r2, [sp, #44]	; 0x2c
   1af94:	str	r1, [sp, #40]	; 0x28
   1af98:	mov	r3, sp
   1af9c:	mov	r1, ip
   1afa0:	mvn	r2, #0
   1afa4:	bl	1a9bc <__assert_fail@plt+0x90d0>
   1afa8:	sub	sp, fp, #8
   1afac:	pop	{r4, r5, fp, pc}
   1afb0:	push	{r4, r5, fp, lr}
   1afb4:	add	fp, sp, #8
   1afb8:	sub	sp, sp, #48	; 0x30
   1afbc:	mov	lr, r3
   1afc0:	movw	r3, #5064	; 0x13c8
   1afc4:	mov	ip, #32
   1afc8:	cmp	r1, #0
   1afcc:	mov	r5, sp
   1afd0:	movt	r3, #3
   1afd4:	cmpne	r2, #0
   1afd8:	add	r4, r3, #16
   1afdc:	vld1.64	{d16-d17}, [r3], ip
   1afe0:	vld1.64	{d18-d19}, [r4]
   1afe4:	add	r4, r5, #16
   1afe8:	vld1.64	{d20-d21}, [r3]
   1afec:	vst1.64	{d16-d17}, [r5], ip
   1aff0:	mov	r3, #10
   1aff4:	vst1.64	{d18-d19}, [r4]
   1aff8:	vst1.64	{d20-d21}, [r5]
   1affc:	str	r3, [sp]
   1b000:	bne	1b008 <__assert_fail@plt+0x971c>
   1b004:	bl	118bc <abort@plt>
   1b008:	ldr	ip, [fp, #8]
   1b00c:	str	r2, [sp, #44]	; 0x2c
   1b010:	str	r1, [sp, #40]	; 0x28
   1b014:	mov	r3, sp
   1b018:	mov	r1, lr
   1b01c:	mov	r2, ip
   1b020:	bl	1a9bc <__assert_fail@plt+0x90d0>
   1b024:	sub	sp, fp, #8
   1b028:	pop	{r4, r5, fp, pc}
   1b02c:	push	{r4, sl, fp, lr}
   1b030:	add	fp, sp, #8
   1b034:	sub	sp, sp, #48	; 0x30
   1b038:	mov	ip, r2
   1b03c:	movw	r2, #5064	; 0x13c8
   1b040:	mov	lr, #32
   1b044:	cmp	r0, #0
   1b048:	mov	r4, sp
   1b04c:	movt	r2, #3
   1b050:	cmpne	r1, #0
   1b054:	add	r3, r2, #16
   1b058:	vld1.64	{d16-d17}, [r2], lr
   1b05c:	vld1.64	{d18-d19}, [r3]
   1b060:	add	r3, r4, #16
   1b064:	vld1.64	{d20-d21}, [r2]
   1b068:	vst1.64	{d16-d17}, [r4], lr
   1b06c:	mov	r2, #10
   1b070:	vst1.64	{d18-d19}, [r3]
   1b074:	vst1.64	{d20-d21}, [r4]
   1b078:	str	r2, [sp]
   1b07c:	bne	1b084 <__assert_fail@plt+0x9798>
   1b080:	bl	118bc <abort@plt>
   1b084:	str	r1, [sp, #44]	; 0x2c
   1b088:	str	r0, [sp, #40]	; 0x28
   1b08c:	mov	r3, sp
   1b090:	mov	r0, #0
   1b094:	mov	r1, ip
   1b098:	mvn	r2, #0
   1b09c:	bl	1a9bc <__assert_fail@plt+0x90d0>
   1b0a0:	sub	sp, fp, #8
   1b0a4:	pop	{r4, sl, fp, pc}
   1b0a8:	push	{r4, r5, fp, lr}
   1b0ac:	add	fp, sp, #8
   1b0b0:	sub	sp, sp, #48	; 0x30
   1b0b4:	mov	lr, r2
   1b0b8:	movw	r2, #5064	; 0x13c8
   1b0bc:	mov	ip, r3
   1b0c0:	mov	r3, #32
   1b0c4:	cmp	r0, #0
   1b0c8:	mov	r5, sp
   1b0cc:	movt	r2, #3
   1b0d0:	cmpne	r1, #0
   1b0d4:	add	r4, r2, #16
   1b0d8:	vld1.64	{d16-d17}, [r2], r3
   1b0dc:	vld1.64	{d18-d19}, [r4]
   1b0e0:	add	r4, r5, #16
   1b0e4:	vld1.64	{d20-d21}, [r2]
   1b0e8:	vst1.64	{d16-d17}, [r5], r3
   1b0ec:	mov	r2, #10
   1b0f0:	vst1.64	{d18-d19}, [r4]
   1b0f4:	vst1.64	{d20-d21}, [r5]
   1b0f8:	str	r2, [sp]
   1b0fc:	bne	1b104 <__assert_fail@plt+0x9818>
   1b100:	bl	118bc <abort@plt>
   1b104:	str	r1, [sp, #44]	; 0x2c
   1b108:	str	r0, [sp, #40]	; 0x28
   1b10c:	mov	r3, sp
   1b110:	mov	r0, #0
   1b114:	mov	r1, lr
   1b118:	mov	r2, ip
   1b11c:	bl	1a9bc <__assert_fail@plt+0x90d0>
   1b120:	sub	sp, fp, #8
   1b124:	pop	{r4, r5, fp, pc}
   1b128:	movw	r3, #4840	; 0x12e8
   1b12c:	movt	r3, #3
   1b130:	b	1a9bc <__assert_fail@plt+0x90d0>
   1b134:	movw	r3, #4840	; 0x12e8
   1b138:	mov	r2, r1
   1b13c:	mov	r1, r0
   1b140:	mov	r0, #0
   1b144:	movt	r3, #3
   1b148:	b	1a9bc <__assert_fail@plt+0x90d0>
   1b14c:	movw	r3, #4840	; 0x12e8
   1b150:	mvn	r2, #0
   1b154:	movt	r3, #3
   1b158:	b	1a9bc <__assert_fail@plt+0x90d0>
   1b15c:	movw	r3, #4840	; 0x12e8
   1b160:	mov	r1, r0
   1b164:	mov	r0, #0
   1b168:	mvn	r2, #0
   1b16c:	movt	r3, #3
   1b170:	b	1a9bc <__assert_fail@plt+0x90d0>
   1b174:	push	{r4, r5, fp, lr}
   1b178:	add	fp, sp, #8
   1b17c:	mov	r5, r0
   1b180:	mov	r4, r1
   1b184:	mov	r0, #0
   1b188:	mov	r2, #5
   1b18c:	mov	r1, r5
   1b190:	bl	115b0 <dcgettext@plt>
   1b194:	cmp	r0, r5
   1b198:	popne	{r4, r5, fp, pc}
   1b19c:	bl	1e628 <__assert_fail@plt+0xcd3c>
   1b1a0:	ldrb	r1, [r0]
   1b1a4:	and	r1, r1, #223	; 0xdf
   1b1a8:	cmp	r1, #71	; 0x47
   1b1ac:	beq	1b214 <__assert_fail@plt+0x9928>
   1b1b0:	cmp	r1, #85	; 0x55
   1b1b4:	bne	1b238 <__assert_fail@plt+0x994c>
   1b1b8:	ldrb	r1, [r0, #1]
   1b1bc:	and	r1, r1, #223	; 0xdf
   1b1c0:	cmp	r1, #84	; 0x54
   1b1c4:	bne	1b238 <__assert_fail@plt+0x994c>
   1b1c8:	ldrb	r1, [r0, #2]
   1b1cc:	and	r1, r1, #223	; 0xdf
   1b1d0:	cmp	r1, #70	; 0x46
   1b1d4:	ldrbeq	r1, [r0, #3]
   1b1d8:	cmpeq	r1, #45	; 0x2d
   1b1dc:	bne	1b238 <__assert_fail@plt+0x994c>
   1b1e0:	ldrb	r1, [r0, #4]
   1b1e4:	cmp	r1, #56	; 0x38
   1b1e8:	ldrbeq	r0, [r0, #5]
   1b1ec:	cmpeq	r0, #0
   1b1f0:	bne	1b238 <__assert_fail@plt+0x994c>
   1b1f4:	ldrb	r1, [r5]
   1b1f8:	movw	r2, #625	; 0x271
   1b1fc:	movw	r0, #629	; 0x275
   1b200:	movt	r2, #2
   1b204:	movt	r0, #2
   1b208:	cmp	r1, #96	; 0x60
   1b20c:	moveq	r0, r2
   1b210:	pop	{r4, r5, fp, pc}
   1b214:	ldrb	r1, [r0, #1]
   1b218:	and	r1, r1, #223	; 0xdf
   1b21c:	cmp	r1, #66	; 0x42
   1b220:	bne	1b238 <__assert_fail@plt+0x994c>
   1b224:	ldrb	r1, [r0, #2]
   1b228:	cmp	r1, #49	; 0x31
   1b22c:	ldrbeq	r1, [r0, #3]
   1b230:	cmpeq	r1, #56	; 0x38
   1b234:	beq	1b254 <__assert_fail@plt+0x9968>
   1b238:	movw	r1, #64493	; 0xfbed
   1b23c:	movw	r0, #1933	; 0x78d
   1b240:	cmp	r4, #9
   1b244:	movt	r1, #1
   1b248:	movt	r0, #2
   1b24c:	moveq	r0, r1
   1b250:	pop	{r4, r5, fp, pc}
   1b254:	ldrb	r1, [r0, #4]
   1b258:	cmp	r1, #48	; 0x30
   1b25c:	ldrbeq	r1, [r0, #5]
   1b260:	cmpeq	r1, #51	; 0x33
   1b264:	bne	1b238 <__assert_fail@plt+0x994c>
   1b268:	ldrb	r1, [r0, #6]
   1b26c:	cmp	r1, #48	; 0x30
   1b270:	ldrbeq	r0, [r0, #7]
   1b274:	cmpeq	r0, #0
   1b278:	bne	1b238 <__assert_fail@plt+0x994c>
   1b27c:	ldrb	r1, [r5]
   1b280:	movw	r2, #633	; 0x279
   1b284:	movw	r0, #637	; 0x27d
   1b288:	movt	r2, #2
   1b28c:	movt	r0, #2
   1b290:	b	1b208 <__assert_fail@plt+0x991c>
   1b294:	push	{r4, r5, fp, lr}
   1b298:	add	fp, sp, #8
   1b29c:	mov	r4, #0
   1b2a0:	mov	r5, r0
   1b2a4:	mov	r1, #524288	; 0x80000
   1b2a8:	str	r4, [r0, #4]
   1b2ac:	movw	r0, #65475	; 0xffc3
   1b2b0:	movt	r0, #1
   1b2b4:	bl	1e440 <__assert_fail@plt+0xcb54>
   1b2b8:	cmn	r0, #1
   1b2bc:	str	r0, [r5]
   1b2c0:	ble	1b2cc <__assert_fail@plt+0x99e0>
   1b2c4:	mov	r0, r4
   1b2c8:	pop	{r4, r5, fp, pc}
   1b2cc:	mov	r0, #0
   1b2d0:	mov	r1, #0
   1b2d4:	mov	r4, #0
   1b2d8:	bl	11700 <getcwd@plt>
   1b2dc:	cmp	r0, #0
   1b2e0:	str	r0, [r5, #4]
   1b2e4:	mvneq	r4, #0
   1b2e8:	mov	r0, r4
   1b2ec:	pop	{r4, r5, fp, pc}
   1b2f0:	ldr	r1, [r0]
   1b2f4:	cmp	r1, #0
   1b2f8:	blt	1b304 <__assert_fail@plt+0x9a18>
   1b2fc:	mov	r0, r1
   1b300:	b	11850 <fchdir@plt>
   1b304:	ldr	r0, [r0, #4]
   1b308:	b	1dfa4 <__assert_fail@plt+0xc6b8>
   1b30c:	push	{r4, sl, fp, lr}
   1b310:	add	fp, sp, #8
   1b314:	mov	r4, r0
   1b318:	ldr	r0, [r0]
   1b31c:	cmp	r0, #0
   1b320:	blt	1b328 <__assert_fail@plt+0x9a3c>
   1b324:	bl	118c8 <close@plt>
   1b328:	ldr	r0, [r4, #4]
   1b32c:	pop	{r4, sl, fp, lr}
   1b330:	b	16008 <__assert_fail@plt+0x471c>
   1b334:	push	{r4, r5, r6, sl, fp, lr}
   1b338:	add	fp, sp, #16
   1b33c:	ldr	r4, [r0], #8
   1b340:	mov	r5, r1
   1b344:	cmp	r4, r0
   1b348:	beq	1b36c <__assert_fail@plt+0x9a80>
   1b34c:	mov	r0, r4
   1b350:	mov	r1, r5
   1b354:	bl	1cf30 <__assert_fail@plt+0xb644>
   1b358:	mov	r6, r0
   1b35c:	cmp	r0, #0
   1b360:	moveq	r6, r4
   1b364:	mov	r0, r6
   1b368:	pop	{r4, r5, r6, sl, fp, pc}
   1b36c:	mov	r0, r5
   1b370:	bl	1cf00 <__assert_fail@plt+0xb614>
   1b374:	cmp	r0, #0
   1b378:	moveq	r6, #0
   1b37c:	moveq	r0, r6
   1b380:	popeq	{r4, r5, r6, sl, fp, pc}
   1b384:	mov	r1, r4
   1b388:	mov	r2, r5
   1b38c:	mov	r6, r0
   1b390:	bl	11574 <memcpy@plt>
   1b394:	mov	r0, r6
   1b398:	pop	{r4, r5, r6, sl, fp, pc}
   1b39c:	push	{r4, r5, r6, sl, fp, lr}
   1b3a0:	add	fp, sp, #16
   1b3a4:	mov	r4, r0
   1b3a8:	add	r6, r0, #8
   1b3ac:	ldrd	r0, [r0]
   1b3b0:	lsl	r5, r1, #1
   1b3b4:	cmp	r0, r6
   1b3b8:	beq	1b3c4 <__assert_fail@plt+0x9ad8>
   1b3bc:	bl	16008 <__assert_fail@plt+0x471c>
   1b3c0:	ldr	r1, [r4, #4]
   1b3c4:	cmp	r5, r1
   1b3c8:	bcc	1b3ec <__assert_fail@plt+0x9b00>
   1b3cc:	mov	r0, r5
   1b3d0:	bl	1cf00 <__assert_fail@plt+0xb614>
   1b3d4:	cmp	r0, #0
   1b3d8:	strne	r0, [r4]
   1b3dc:	movne	r0, #1
   1b3e0:	strne	r5, [r4, #4]
   1b3e4:	popne	{r4, r5, r6, sl, fp, pc}
   1b3e8:	b	1b3f8 <__assert_fail@plt+0x9b0c>
   1b3ec:	bl	11748 <__errno_location@plt>
   1b3f0:	mov	r1, #12
   1b3f4:	str	r1, [r0]
   1b3f8:	mov	r0, #0
   1b3fc:	mov	r5, #1024	; 0x400
   1b400:	str	r6, [r4]
   1b404:	str	r5, [r4, #4]
   1b408:	pop	{r4, r5, r6, sl, fp, pc}
   1b40c:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1b410:	add	fp, sp, #24
   1b414:	ldrd	r8, [r0]
   1b418:	add	r7, r0, #8
   1b41c:	mov	r4, r0
   1b420:	lsl	r5, r9, #1
   1b424:	cmp	r8, r7
   1b428:	beq	1b454 <__assert_fail@plt+0x9b68>
   1b42c:	cmp	r5, r9
   1b430:	bcc	1b488 <__assert_fail@plt+0x9b9c>
   1b434:	mov	r0, r8
   1b438:	mov	r1, r5
   1b43c:	bl	1cf30 <__assert_fail@plt+0xb644>
   1b440:	mov	r6, r0
   1b444:	cmp	r0, #0
   1b448:	bne	1b478 <__assert_fail@plt+0x9b8c>
   1b44c:	ldr	r8, [r4]
   1b450:	b	1b494 <__assert_fail@plt+0x9ba8>
   1b454:	mov	r0, r5
   1b458:	bl	1cf00 <__assert_fail@plt+0xb614>
   1b45c:	cmp	r0, #0
   1b460:	moveq	r0, #0
   1b464:	popeq	{r4, r5, r6, r7, r8, r9, fp, pc}
   1b468:	ldr	r2, [r4, #4]
   1b46c:	mov	r1, r8
   1b470:	mov	r6, r0
   1b474:	bl	11574 <memcpy@plt>
   1b478:	mov	r0, #1
   1b47c:	str	r6, [r4]
   1b480:	str	r5, [r4, #4]
   1b484:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1b488:	bl	11748 <__errno_location@plt>
   1b48c:	mov	r1, #12
   1b490:	str	r1, [r0]
   1b494:	mov	r0, r8
   1b498:	bl	16008 <__assert_fail@plt+0x471c>
   1b49c:	mov	r0, #0
   1b4a0:	mov	r5, #1024	; 0x400
   1b4a4:	str	r7, [r4]
   1b4a8:	str	r5, [r4, #4]
   1b4ac:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1b4b0:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1b4b4:	add	fp, sp, #24
   1b4b8:	sub	sp, sp, #32
   1b4bc:	ldr	r6, [fp, #12]
   1b4c0:	ldr	r7, [fp, #8]
   1b4c4:	mov	r4, r2
   1b4c8:	mov	r8, r0
   1b4cc:	cmp	r1, #0
   1b4d0:	beq	1b4f8 <__assert_fail@plt+0x9c0c>
   1b4d4:	movw	r2, #724	; 0x2d4
   1b4d8:	mov	r5, r1
   1b4dc:	str	r3, [sp, #4]
   1b4e0:	str	r4, [sp]
   1b4e4:	mov	r0, r8
   1b4e8:	mov	r1, #1
   1b4ec:	movt	r2, #2
   1b4f0:	mov	r3, r5
   1b4f4:	b	1b510 <__assert_fail@plt+0x9c24>
   1b4f8:	movw	r2, #736	; 0x2e0
   1b4fc:	str	r3, [sp]
   1b500:	mov	r0, r8
   1b504:	mov	r1, #1
   1b508:	mov	r3, r4
   1b50c:	movt	r2, #2
   1b510:	bl	1179c <__fprintf_chk@plt>
   1b514:	movw	r1, #743	; 0x2e7
   1b518:	mov	r0, #0
   1b51c:	mov	r2, #5
   1b520:	movt	r1, #2
   1b524:	bl	115b0 <dcgettext@plt>
   1b528:	movw	r2, #1461	; 0x5b5
   1b52c:	mov	r3, r0
   1b530:	movw	r0, #2022	; 0x7e6
   1b534:	mov	r1, #1
   1b538:	str	r0, [sp]
   1b53c:	movt	r2, #2
   1b540:	mov	r0, r8
   1b544:	bl	1179c <__fprintf_chk@plt>
   1b548:	movw	r4, #64222	; 0xfade
   1b54c:	mov	r1, r8
   1b550:	movt	r4, #1
   1b554:	mov	r0, r4
   1b558:	bl	114f0 <fputs_unlocked@plt>
   1b55c:	movw	r1, #747	; 0x2eb
   1b560:	mov	r0, #0
   1b564:	mov	r2, #5
   1b568:	movt	r1, #2
   1b56c:	bl	115b0 <dcgettext@plt>
   1b570:	movw	r3, #918	; 0x396
   1b574:	mov	r2, r0
   1b578:	mov	r0, r8
   1b57c:	mov	r1, #1
   1b580:	movt	r3, #2
   1b584:	bl	1179c <__fprintf_chk@plt>
   1b588:	mov	r0, r4
   1b58c:	mov	r1, r8
   1b590:	bl	114f0 <fputs_unlocked@plt>
   1b594:	cmp	r6, #9
   1b598:	bhi	1b5d4 <__assert_fail@plt+0x9ce8>
   1b59c:	add	r0, pc, #0
   1b5a0:	ldr	pc, [r0, r6, lsl #2]
   1b5a4:	andeq	fp, r1, ip, asr #11
   1b5a8:	andeq	fp, r1, r0, ror #11
   1b5ac:	andeq	fp, r1, r0, lsl r6
   1b5b0:	andeq	fp, r1, r8, lsr r6
   1b5b4:	andeq	fp, r1, r0, ror #12
   1b5b8:	andeq	fp, r1, r8, lsl #13
   1b5bc:			; <UNDEFINED> instruction: 0x0001b6b0
   1b5c0:	andeq	fp, r1, r8, ror #13
   1b5c4:	andeq	fp, r1, r8, lsl #15
   1b5c8:	andeq	fp, r1, r0, lsr r7
   1b5cc:	sub	sp, fp, #24
   1b5d0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1b5d4:	movw	r1, #1271	; 0x4f7
   1b5d8:	movt	r1, #2
   1b5dc:	b	1b738 <__assert_fail@plt+0x9e4c>
   1b5e0:	movw	r1, #952	; 0x3b8
   1b5e4:	mov	r0, #0
   1b5e8:	mov	r2, #5
   1b5ec:	movt	r1, #2
   1b5f0:	bl	115b0 <dcgettext@plt>
   1b5f4:	ldr	r3, [r7]
   1b5f8:	mov	r2, r0
   1b5fc:	mov	r0, r8
   1b600:	mov	r1, #1
   1b604:	sub	sp, fp, #24
   1b608:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   1b60c:	b	1179c <__fprintf_chk@plt>
   1b610:	movw	r1, #968	; 0x3c8
   1b614:	mov	r0, #0
   1b618:	mov	r2, #5
   1b61c:	movt	r1, #2
   1b620:	bl	115b0 <dcgettext@plt>
   1b624:	mov	r2, r0
   1b628:	ldr	r3, [r7]
   1b62c:	ldr	r0, [r7, #4]
   1b630:	str	r0, [sp]
   1b634:	b	1b724 <__assert_fail@plt+0x9e38>
   1b638:	movw	r1, #991	; 0x3df
   1b63c:	mov	r0, #0
   1b640:	mov	r2, #5
   1b644:	movt	r1, #2
   1b648:	bl	115b0 <dcgettext@plt>
   1b64c:	ldr	r3, [r7]
   1b650:	mov	r2, r0
   1b654:	ldmib	r7, {r0, r1}
   1b658:	stm	sp, {r0, r1}
   1b65c:	b	1b724 <__assert_fail@plt+0x9e38>
   1b660:	movw	r1, #1019	; 0x3fb
   1b664:	mov	r0, #0
   1b668:	mov	r2, #5
   1b66c:	movt	r1, #2
   1b670:	bl	115b0 <dcgettext@plt>
   1b674:	ldr	r3, [r7]
   1b678:	mov	r2, r0
   1b67c:	ldmib	r7, {r0, r1, r7}
   1b680:	stm	sp, {r0, r1, r7}
   1b684:	b	1b724 <__assert_fail@plt+0x9e38>
   1b688:	movw	r1, #1051	; 0x41b
   1b68c:	mov	r0, #0
   1b690:	mov	r2, #5
   1b694:	movt	r1, #2
   1b698:	bl	115b0 <dcgettext@plt>
   1b69c:	ldr	r3, [r7]
   1b6a0:	mov	r2, r0
   1b6a4:	ldmib	r7, {r0, r1, r6, r7}
   1b6a8:	stm	sp, {r0, r1, r6, r7}
   1b6ac:	b	1b724 <__assert_fail@plt+0x9e38>
   1b6b0:	movw	r1, #1087	; 0x43f
   1b6b4:	mov	r0, #0
   1b6b8:	mov	r2, #5
   1b6bc:	movt	r1, #2
   1b6c0:	bl	115b0 <dcgettext@plt>
   1b6c4:	ldr	r3, [r7]
   1b6c8:	mov	r2, r0
   1b6cc:	ldmib	r7, {r0, r1, r6}
   1b6d0:	ldr	r5, [r7, #16]
   1b6d4:	ldr	r7, [r7, #20]
   1b6d8:	stm	sp, {r0, r1, r6}
   1b6dc:	str	r5, [sp, #12]
   1b6e0:	str	r7, [sp, #16]
   1b6e4:	b	1b724 <__assert_fail@plt+0x9e38>
   1b6e8:	movw	r1, #1127	; 0x467
   1b6ec:	mov	r0, #0
   1b6f0:	mov	r2, #5
   1b6f4:	movt	r1, #2
   1b6f8:	bl	115b0 <dcgettext@plt>
   1b6fc:	ldr	r3, [r7]
   1b700:	mov	r2, r0
   1b704:	ldmib	r7, {r0, r1, r6}
   1b708:	ldr	r5, [r7, #16]
   1b70c:	ldr	r4, [r7, #20]
   1b710:	ldr	r7, [r7, #24]
   1b714:	stm	sp, {r0, r1, r6}
   1b718:	str	r5, [sp, #12]
   1b71c:	str	r4, [sp, #16]
   1b720:	str	r7, [sp, #20]
   1b724:	mov	r0, r8
   1b728:	mov	r1, #1
   1b72c:	b	1b7d8 <__assert_fail@plt+0x9eec>
   1b730:	movw	r1, #1219	; 0x4c3
   1b734:	movt	r1, #2
   1b738:	mov	r0, #0
   1b73c:	mov	r2, #5
   1b740:	bl	115b0 <dcgettext@plt>
   1b744:	mov	ip, r0
   1b748:	ldr	r3, [r7]
   1b74c:	ldr	r0, [r7, #4]
   1b750:	ldr	r1, [r7, #8]
   1b754:	ldr	r6, [r7, #12]
   1b758:	ldr	r5, [r7, #16]
   1b75c:	ldr	r4, [r7, #20]
   1b760:	ldr	r2, [r7, #24]
   1b764:	ldr	lr, [r7, #28]
   1b768:	ldr	r7, [r7, #32]
   1b76c:	stm	sp, {r0, r1, r6}
   1b770:	str	r5, [sp, #12]
   1b774:	str	r4, [sp, #16]
   1b778:	str	r2, [sp, #20]
   1b77c:	str	lr, [sp, #24]
   1b780:	str	r7, [sp, #28]
   1b784:	b	1b7cc <__assert_fail@plt+0x9ee0>
   1b788:	movw	r1, #1171	; 0x493
   1b78c:	mov	r0, #0
   1b790:	mov	r2, #5
   1b794:	movt	r1, #2
   1b798:	bl	115b0 <dcgettext@plt>
   1b79c:	mov	ip, r0
   1b7a0:	ldr	r3, [r7]
   1b7a4:	ldmib	r7, {r0, r1, r6}
   1b7a8:	ldr	r5, [r7, #16]
   1b7ac:	ldr	r4, [r7, #20]
   1b7b0:	ldr	r2, [r7, #24]
   1b7b4:	ldr	r7, [r7, #28]
   1b7b8:	stm	sp, {r0, r1, r6}
   1b7bc:	str	r5, [sp, #12]
   1b7c0:	str	r4, [sp, #16]
   1b7c4:	str	r2, [sp, #20]
   1b7c8:	str	r7, [sp, #24]
   1b7cc:	mov	r0, r8
   1b7d0:	mov	r1, #1
   1b7d4:	mov	r2, ip
   1b7d8:	bl	1179c <__fprintf_chk@plt>
   1b7dc:	sub	sp, fp, #24
   1b7e0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1b7e4:	push	{r4, sl, fp, lr}
   1b7e8:	add	fp, sp, #8
   1b7ec:	sub	sp, sp, #8
   1b7f0:	ldr	ip, [fp, #8]
   1b7f4:	mov	lr, #0
   1b7f8:	ldr	r4, [ip, lr, lsl #2]
   1b7fc:	add	lr, lr, #1
   1b800:	cmp	r4, #0
   1b804:	bne	1b7f8 <__assert_fail@plt+0x9f0c>
   1b808:	sub	r4, lr, #1
   1b80c:	str	ip, [sp]
   1b810:	str	r4, [sp, #4]
   1b814:	bl	1b4b0 <__assert_fail@plt+0x9bc4>
   1b818:	sub	sp, fp, #8
   1b81c:	pop	{r4, sl, fp, pc}
   1b820:	push	{fp, lr}
   1b824:	mov	fp, sp
   1b828:	sub	sp, sp, #48	; 0x30
   1b82c:	ldr	ip, [fp, #8]
   1b830:	ldr	lr, [ip]
   1b834:	cmp	lr, #0
   1b838:	str	lr, [sp, #8]
   1b83c:	beq	1b8d8 <__assert_fail@plt+0x9fec>
   1b840:	ldr	lr, [ip, #4]
   1b844:	cmp	lr, #0
   1b848:	str	lr, [sp, #12]
   1b84c:	beq	1b8e0 <__assert_fail@plt+0x9ff4>
   1b850:	ldr	lr, [ip, #8]
   1b854:	cmp	lr, #0
   1b858:	str	lr, [sp, #16]
   1b85c:	beq	1b8e8 <__assert_fail@plt+0x9ffc>
   1b860:	ldr	lr, [ip, #12]
   1b864:	cmp	lr, #0
   1b868:	str	lr, [sp, #20]
   1b86c:	beq	1b8f0 <__assert_fail@plt+0xa004>
   1b870:	ldr	lr, [ip, #16]
   1b874:	cmp	lr, #0
   1b878:	str	lr, [sp, #24]
   1b87c:	beq	1b8f8 <__assert_fail@plt+0xa00c>
   1b880:	ldr	lr, [ip, #20]
   1b884:	cmp	lr, #0
   1b888:	str	lr, [sp, #28]
   1b88c:	beq	1b900 <__assert_fail@plt+0xa014>
   1b890:	ldr	lr, [ip, #24]
   1b894:	cmp	lr, #0
   1b898:	str	lr, [sp, #32]
   1b89c:	beq	1b908 <__assert_fail@plt+0xa01c>
   1b8a0:	ldr	lr, [ip, #28]
   1b8a4:	cmp	lr, #0
   1b8a8:	str	lr, [sp, #36]	; 0x24
   1b8ac:	beq	1b910 <__assert_fail@plt+0xa024>
   1b8b0:	ldr	lr, [ip, #32]
   1b8b4:	cmp	lr, #0
   1b8b8:	str	lr, [sp, #40]	; 0x28
   1b8bc:	beq	1b918 <__assert_fail@plt+0xa02c>
   1b8c0:	ldr	lr, [ip, #36]	; 0x24
   1b8c4:	mov	ip, #10
   1b8c8:	cmp	lr, #0
   1b8cc:	str	lr, [sp, #44]	; 0x2c
   1b8d0:	movweq	ip, #9
   1b8d4:	b	1b91c <__assert_fail@plt+0xa030>
   1b8d8:	mov	ip, #0
   1b8dc:	b	1b91c <__assert_fail@plt+0xa030>
   1b8e0:	mov	ip, #1
   1b8e4:	b	1b91c <__assert_fail@plt+0xa030>
   1b8e8:	mov	ip, #2
   1b8ec:	b	1b91c <__assert_fail@plt+0xa030>
   1b8f0:	mov	ip, #3
   1b8f4:	b	1b91c <__assert_fail@plt+0xa030>
   1b8f8:	mov	ip, #4
   1b8fc:	b	1b91c <__assert_fail@plt+0xa030>
   1b900:	mov	ip, #5
   1b904:	b	1b91c <__assert_fail@plt+0xa030>
   1b908:	mov	ip, #6
   1b90c:	b	1b91c <__assert_fail@plt+0xa030>
   1b910:	mov	ip, #7
   1b914:	b	1b91c <__assert_fail@plt+0xa030>
   1b918:	mov	ip, #8
   1b91c:	add	lr, sp, #8
   1b920:	str	ip, [sp, #4]
   1b924:	str	lr, [sp]
   1b928:	bl	1b4b0 <__assert_fail@plt+0x9bc4>
   1b92c:	mov	sp, fp
   1b930:	pop	{fp, pc}
   1b934:	push	{fp, lr}
   1b938:	mov	fp, sp
   1b93c:	sub	sp, sp, #56	; 0x38
   1b940:	add	ip, fp, #8
   1b944:	str	ip, [sp, #12]
   1b948:	ldr	lr, [fp, #8]
   1b94c:	cmp	lr, #0
   1b950:	str	lr, [sp, #16]
   1b954:	beq	1b9f0 <__assert_fail@plt+0xa104>
   1b958:	ldr	lr, [ip, #4]
   1b95c:	cmp	lr, #0
   1b960:	str	lr, [sp, #20]
   1b964:	beq	1b9f8 <__assert_fail@plt+0xa10c>
   1b968:	ldr	lr, [ip, #8]
   1b96c:	cmp	lr, #0
   1b970:	str	lr, [sp, #24]
   1b974:	beq	1ba00 <__assert_fail@plt+0xa114>
   1b978:	ldr	lr, [ip, #12]
   1b97c:	cmp	lr, #0
   1b980:	str	lr, [sp, #28]
   1b984:	beq	1ba08 <__assert_fail@plt+0xa11c>
   1b988:	ldr	lr, [ip, #16]
   1b98c:	cmp	lr, #0
   1b990:	str	lr, [sp, #32]
   1b994:	beq	1ba10 <__assert_fail@plt+0xa124>
   1b998:	ldr	lr, [ip, #20]
   1b99c:	cmp	lr, #0
   1b9a0:	str	lr, [sp, #36]	; 0x24
   1b9a4:	beq	1ba18 <__assert_fail@plt+0xa12c>
   1b9a8:	ldr	lr, [ip, #24]
   1b9ac:	cmp	lr, #0
   1b9b0:	str	lr, [sp, #40]	; 0x28
   1b9b4:	beq	1ba20 <__assert_fail@plt+0xa134>
   1b9b8:	ldr	lr, [ip, #28]
   1b9bc:	cmp	lr, #0
   1b9c0:	str	lr, [sp, #44]	; 0x2c
   1b9c4:	beq	1ba28 <__assert_fail@plt+0xa13c>
   1b9c8:	ldr	lr, [ip, #32]
   1b9cc:	cmp	lr, #0
   1b9d0:	str	lr, [sp, #48]	; 0x30
   1b9d4:	beq	1ba30 <__assert_fail@plt+0xa144>
   1b9d8:	ldr	lr, [ip, #36]	; 0x24
   1b9dc:	mov	ip, #10
   1b9e0:	cmp	lr, #0
   1b9e4:	str	lr, [sp, #52]	; 0x34
   1b9e8:	movweq	ip, #9
   1b9ec:	b	1ba34 <__assert_fail@plt+0xa148>
   1b9f0:	mov	ip, #0
   1b9f4:	b	1ba34 <__assert_fail@plt+0xa148>
   1b9f8:	mov	ip, #1
   1b9fc:	b	1ba34 <__assert_fail@plt+0xa148>
   1ba00:	mov	ip, #2
   1ba04:	b	1ba34 <__assert_fail@plt+0xa148>
   1ba08:	mov	ip, #3
   1ba0c:	b	1ba34 <__assert_fail@plt+0xa148>
   1ba10:	mov	ip, #4
   1ba14:	b	1ba34 <__assert_fail@plt+0xa148>
   1ba18:	mov	ip, #5
   1ba1c:	b	1ba34 <__assert_fail@plt+0xa148>
   1ba20:	mov	ip, #6
   1ba24:	b	1ba34 <__assert_fail@plt+0xa148>
   1ba28:	mov	ip, #7
   1ba2c:	b	1ba34 <__assert_fail@plt+0xa148>
   1ba30:	mov	ip, #8
   1ba34:	add	lr, sp, #16
   1ba38:	str	ip, [sp, #4]
   1ba3c:	str	lr, [sp]
   1ba40:	bl	1b4b0 <__assert_fail@plt+0x9bc4>
   1ba44:	mov	sp, fp
   1ba48:	pop	{fp, pc}
   1ba4c:	push	{fp, lr}
   1ba50:	mov	fp, sp
   1ba54:	movw	r0, #4916	; 0x1334
   1ba58:	movt	r0, #3
   1ba5c:	ldr	r1, [r0]
   1ba60:	movw	r0, #64222	; 0xfade
   1ba64:	movt	r0, #1
   1ba68:	bl	114f0 <fputs_unlocked@plt>
   1ba6c:	movw	r1, #1331	; 0x533
   1ba70:	mov	r0, #0
   1ba74:	mov	r2, #5
   1ba78:	movt	r1, #2
   1ba7c:	bl	115b0 <dcgettext@plt>
   1ba80:	movw	r2, #1351	; 0x547
   1ba84:	mov	r1, r0
   1ba88:	mov	r0, #1
   1ba8c:	movt	r2, #2
   1ba90:	bl	11778 <__printf_chk@plt>
   1ba94:	movw	r1, #1373	; 0x55d
   1ba98:	mov	r0, #0
   1ba9c:	mov	r2, #5
   1baa0:	movt	r1, #2
   1baa4:	bl	115b0 <dcgettext@plt>
   1baa8:	movw	r2, #63183	; 0xf6cf
   1baac:	movw	r3, #64031	; 0xfa1f
   1bab0:	mov	r1, r0
   1bab4:	mov	r0, #1
   1bab8:	movt	r2, #1
   1babc:	movt	r3, #1
   1bac0:	bl	11778 <__printf_chk@plt>
   1bac4:	movw	r1, #1393	; 0x571
   1bac8:	mov	r0, #0
   1bacc:	mov	r2, #5
   1bad0:	movt	r1, #2
   1bad4:	bl	115b0 <dcgettext@plt>
   1bad8:	movw	r2, #1432	; 0x598
   1badc:	mov	r1, r0
   1bae0:	mov	r0, #1
   1bae4:	movt	r2, #2
   1bae8:	pop	{fp, lr}
   1baec:	b	11778 <__printf_chk@plt>
   1baf0:	push	{r4, r5, r6, sl, fp, lr}
   1baf4:	add	fp, sp, #16
   1baf8:	mov	r4, r2
   1bafc:	mov	r5, r1
   1bb00:	mov	r6, r0
   1bb04:	bl	1e660 <__assert_fail@plt+0xcd74>
   1bb08:	cmp	r0, #0
   1bb0c:	popne	{r4, r5, r6, sl, fp, pc}
   1bb10:	cmp	r6, #0
   1bb14:	beq	1bb28 <__assert_fail@plt+0xa23c>
   1bb18:	cmp	r5, #0
   1bb1c:	cmpne	r4, #0
   1bb20:	bne	1bb28 <__assert_fail@plt+0xa23c>
   1bb24:	pop	{r4, r5, r6, sl, fp, pc}
   1bb28:	bl	1c0c8 <__assert_fail@plt+0xa7dc>
   1bb2c:	push	{r4, r5, r6, sl, fp, lr}
   1bb30:	add	fp, sp, #16
   1bb34:	mov	r4, r2
   1bb38:	mov	r5, r1
   1bb3c:	mov	r6, r0
   1bb40:	bl	1e660 <__assert_fail@plt+0xcd74>
   1bb44:	cmp	r0, #0
   1bb48:	popne	{r4, r5, r6, sl, fp, pc}
   1bb4c:	cmp	r6, #0
   1bb50:	beq	1bb64 <__assert_fail@plt+0xa278>
   1bb54:	cmp	r5, #0
   1bb58:	cmpne	r4, #0
   1bb5c:	bne	1bb64 <__assert_fail@plt+0xa278>
   1bb60:	pop	{r4, r5, r6, sl, fp, pc}
   1bb64:	bl	1c0c8 <__assert_fail@plt+0xa7dc>
   1bb68:	push	{fp, lr}
   1bb6c:	mov	fp, sp
   1bb70:	bl	1cf00 <__assert_fail@plt+0xb614>
   1bb74:	cmp	r0, #0
   1bb78:	popne	{fp, pc}
   1bb7c:	bl	1c0c8 <__assert_fail@plt+0xa7dc>
   1bb80:	push	{fp, lr}
   1bb84:	mov	fp, sp
   1bb88:	bl	1cf00 <__assert_fail@plt+0xb614>
   1bb8c:	cmp	r0, #0
   1bb90:	popne	{fp, pc}
   1bb94:	bl	1c0c8 <__assert_fail@plt+0xa7dc>
   1bb98:	push	{fp, lr}
   1bb9c:	mov	fp, sp
   1bba0:	bl	1cf00 <__assert_fail@plt+0xb614>
   1bba4:	cmp	r0, #0
   1bba8:	popne	{fp, pc}
   1bbac:	bl	1c0c8 <__assert_fail@plt+0xa7dc>
   1bbb0:	push	{r4, r5, fp, lr}
   1bbb4:	add	fp, sp, #8
   1bbb8:	mov	r4, r1
   1bbbc:	mov	r5, r0
   1bbc0:	bl	1cf30 <__assert_fail@plt+0xb644>
   1bbc4:	cmp	r0, #0
   1bbc8:	popne	{r4, r5, fp, pc}
   1bbcc:	cmp	r5, #0
   1bbd0:	beq	1bbe0 <__assert_fail@plt+0xa2f4>
   1bbd4:	cmp	r4, #0
   1bbd8:	bne	1bbe0 <__assert_fail@plt+0xa2f4>
   1bbdc:	pop	{r4, r5, fp, pc}
   1bbe0:	bl	1c0c8 <__assert_fail@plt+0xa7dc>
   1bbe4:	push	{fp, lr}
   1bbe8:	mov	fp, sp
   1bbec:	cmp	r1, #0
   1bbf0:	orreq	r1, r1, #1
   1bbf4:	bl	1cf30 <__assert_fail@plt+0xb644>
   1bbf8:	cmp	r0, #0
   1bbfc:	popne	{fp, pc}
   1bc00:	bl	1c0c8 <__assert_fail@plt+0xa7dc>
   1bc04:	push	{fp, lr}
   1bc08:	mov	fp, sp
   1bc0c:	clz	r3, r2
   1bc10:	lsr	ip, r3, #5
   1bc14:	clz	r3, r1
   1bc18:	lsr	r3, r3, #5
   1bc1c:	orrs	r3, r3, ip
   1bc20:	movwne	r1, #1
   1bc24:	movwne	r2, #1
   1bc28:	bl	1e660 <__assert_fail@plt+0xcd74>
   1bc2c:	cmp	r0, #0
   1bc30:	popne	{fp, pc}
   1bc34:	bl	1c0c8 <__assert_fail@plt+0xa7dc>
   1bc38:	push	{fp, lr}
   1bc3c:	mov	fp, sp
   1bc40:	mov	r2, r1
   1bc44:	mov	r1, r0
   1bc48:	mov	r0, #0
   1bc4c:	bl	1e660 <__assert_fail@plt+0xcd74>
   1bc50:	cmp	r0, #0
   1bc54:	popne	{fp, pc}
   1bc58:	bl	1c0c8 <__assert_fail@plt+0xa7dc>
   1bc5c:	push	{fp, lr}
   1bc60:	mov	fp, sp
   1bc64:	mov	r2, r1
   1bc68:	mov	r1, r0
   1bc6c:	clz	r0, r2
   1bc70:	clz	r3, r1
   1bc74:	lsr	r0, r0, #5
   1bc78:	lsr	r3, r3, #5
   1bc7c:	orrs	r0, r3, r0
   1bc80:	movwne	r1, #1
   1bc84:	movwne	r2, #1
   1bc88:	mov	r0, #0
   1bc8c:	bl	1e660 <__assert_fail@plt+0xcd74>
   1bc90:	cmp	r0, #0
   1bc94:	popne	{fp, pc}
   1bc98:	bl	1c0c8 <__assert_fail@plt+0xa7dc>
   1bc9c:	push	{r4, r5, r6, sl, fp, lr}
   1bca0:	add	fp, sp, #16
   1bca4:	ldr	r5, [r1]
   1bca8:	mov	r4, r1
   1bcac:	mov	r6, r0
   1bcb0:	cmp	r0, #0
   1bcb4:	beq	1bccc <__assert_fail@plt+0xa3e0>
   1bcb8:	mov	r0, #1
   1bcbc:	add	r0, r0, r5, lsr #1
   1bcc0:	adds	r5, r5, r0
   1bcc4:	bcc	1bcd4 <__assert_fail@plt+0xa3e8>
   1bcc8:	b	1bd10 <__assert_fail@plt+0xa424>
   1bccc:	cmp	r5, #0
   1bcd0:	movweq	r5, #64	; 0x40
   1bcd4:	mov	r0, r6
   1bcd8:	mov	r1, r5
   1bcdc:	mov	r2, #1
   1bce0:	bl	1e660 <__assert_fail@plt+0xcd74>
   1bce4:	cmp	r5, #0
   1bce8:	mov	r1, r5
   1bcec:	movwne	r1, #1
   1bcf0:	cmp	r0, #0
   1bcf4:	bne	1bd08 <__assert_fail@plt+0xa41c>
   1bcf8:	clz	r2, r6
   1bcfc:	lsr	r2, r2, #5
   1bd00:	orrs	r1, r2, r1
   1bd04:	bne	1bd10 <__assert_fail@plt+0xa424>
   1bd08:	str	r5, [r4]
   1bd0c:	pop	{r4, r5, r6, sl, fp, pc}
   1bd10:	bl	1c0c8 <__assert_fail@plt+0xa7dc>
   1bd14:	push	{r4, r5, r6, r7, fp, lr}
   1bd18:	add	fp, sp, #16
   1bd1c:	ldr	r5, [r1]
   1bd20:	mov	r6, r2
   1bd24:	mov	r4, r1
   1bd28:	mov	r7, r0
   1bd2c:	cmp	r0, #0
   1bd30:	beq	1bd48 <__assert_fail@plt+0xa45c>
   1bd34:	mov	r0, #1
   1bd38:	add	r0, r0, r5, lsr #1
   1bd3c:	adds	r5, r5, r0
   1bd40:	bcc	1bd60 <__assert_fail@plt+0xa474>
   1bd44:	b	1bd94 <__assert_fail@plt+0xa4a8>
   1bd48:	cmp	r5, #0
   1bd4c:	bne	1bd60 <__assert_fail@plt+0xa474>
   1bd50:	mov	r0, #64	; 0x40
   1bd54:	cmp	r6, #64	; 0x40
   1bd58:	udiv	r5, r0, r6
   1bd5c:	addhi	r5, r5, #1
   1bd60:	mov	r0, r7
   1bd64:	mov	r1, r5
   1bd68:	mov	r2, r6
   1bd6c:	bl	1e660 <__assert_fail@plt+0xcd74>
   1bd70:	cmp	r0, #0
   1bd74:	bne	1bd8c <__assert_fail@plt+0xa4a0>
   1bd78:	cmp	r7, #0
   1bd7c:	beq	1bd94 <__assert_fail@plt+0xa4a8>
   1bd80:	cmp	r6, #0
   1bd84:	cmpne	r5, #0
   1bd88:	bne	1bd94 <__assert_fail@plt+0xa4a8>
   1bd8c:	str	r5, [r4]
   1bd90:	pop	{r4, r5, r6, r7, fp, pc}
   1bd94:	bl	1c0c8 <__assert_fail@plt+0xa7dc>
   1bd98:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1bd9c:	add	fp, sp, #24
   1bda0:	mov	r8, r1
   1bda4:	ldr	r1, [r1]
   1bda8:	mov	r5, r0
   1bdac:	add	r0, r1, r1, asr #1
   1bdb0:	cmp	r0, r1
   1bdb4:	mvnvs	r0, #-2147483648	; 0x80000000
   1bdb8:	cmp	r0, r3
   1bdbc:	mov	r7, r0
   1bdc0:	movgt	r7, r3
   1bdc4:	cmn	r3, #1
   1bdc8:	movle	r7, r0
   1bdcc:	ldr	r0, [fp, #8]
   1bdd0:	cmn	r0, #1
   1bdd4:	ble	1bdfc <__assert_fail@plt+0xa510>
   1bdd8:	cmp	r0, #0
   1bddc:	beq	1be50 <__assert_fail@plt+0xa564>
   1bde0:	cmn	r7, #1
   1bde4:	ble	1be24 <__assert_fail@plt+0xa538>
   1bde8:	mvn	r4, #-2147483648	; 0x80000000
   1bdec:	udiv	r6, r4, r0
   1bdf0:	cmp	r6, r7
   1bdf4:	bge	1be50 <__assert_fail@plt+0xa564>
   1bdf8:	b	1be60 <__assert_fail@plt+0xa574>
   1bdfc:	cmn	r7, #1
   1be00:	ble	1be40 <__assert_fail@plt+0xa554>
   1be04:	cmn	r0, #1
   1be08:	beq	1be50 <__assert_fail@plt+0xa564>
   1be0c:	mov	r6, #-2147483648	; 0x80000000
   1be10:	mvn	r4, #-2147483648	; 0x80000000
   1be14:	sdiv	r6, r6, r0
   1be18:	cmp	r6, r7
   1be1c:	bge	1be50 <__assert_fail@plt+0xa564>
   1be20:	b	1be60 <__assert_fail@plt+0xa574>
   1be24:	beq	1be50 <__assert_fail@plt+0xa564>
   1be28:	mov	r6, #-2147483648	; 0x80000000
   1be2c:	mvn	r4, #-2147483648	; 0x80000000
   1be30:	sdiv	r6, r6, r7
   1be34:	cmp	r6, r0
   1be38:	bge	1be50 <__assert_fail@plt+0xa564>
   1be3c:	b	1be60 <__assert_fail@plt+0xa574>
   1be40:	mvn	r4, #-2147483648	; 0x80000000
   1be44:	sdiv	r6, r4, r0
   1be48:	cmp	r7, r6
   1be4c:	blt	1be60 <__assert_fail@plt+0xa574>
   1be50:	mul	r6, r7, r0
   1be54:	mov	r4, #64	; 0x40
   1be58:	cmp	r6, #63	; 0x3f
   1be5c:	bgt	1be68 <__assert_fail@plt+0xa57c>
   1be60:	sdiv	r7, r4, r0
   1be64:	mul	r6, r7, r0
   1be68:	cmp	r5, #0
   1be6c:	moveq	r4, #0
   1be70:	streq	r4, [r8]
   1be74:	sub	r4, r7, r1
   1be78:	cmp	r4, r2
   1be7c:	bge	1bf28 <__assert_fail@plt+0xa63c>
   1be80:	add	r7, r1, r2
   1be84:	mov	r6, #0
   1be88:	mov	r2, #0
   1be8c:	cmp	r7, r3
   1be90:	movwgt	r6, #1
   1be94:	cmn	r3, #1
   1be98:	movwgt	r2, #1
   1be9c:	cmp	r7, r1
   1bea0:	bvs	1bf5c <__assert_fail@plt+0xa670>
   1bea4:	ands	r1, r2, r6
   1bea8:	bne	1bf5c <__assert_fail@plt+0xa670>
   1beac:	cmn	r0, #1
   1beb0:	ble	1bed8 <__assert_fail@plt+0xa5ec>
   1beb4:	cmp	r0, #0
   1beb8:	beq	1bf24 <__assert_fail@plt+0xa638>
   1bebc:	cmn	r7, #1
   1bec0:	ble	1befc <__assert_fail@plt+0xa610>
   1bec4:	mvn	r1, #-2147483648	; 0x80000000
   1bec8:	udiv	r1, r1, r0
   1becc:	cmp	r1, r7
   1bed0:	bge	1bf24 <__assert_fail@plt+0xa638>
   1bed4:	b	1bf5c <__assert_fail@plt+0xa670>
   1bed8:	cmn	r7, #1
   1bedc:	ble	1bf14 <__assert_fail@plt+0xa628>
   1bee0:	cmn	r0, #1
   1bee4:	beq	1bf24 <__assert_fail@plt+0xa638>
   1bee8:	mov	r1, #-2147483648	; 0x80000000
   1beec:	sdiv	r1, r1, r0
   1bef0:	cmp	r1, r7
   1bef4:	bge	1bf24 <__assert_fail@plt+0xa638>
   1bef8:	b	1bf5c <__assert_fail@plt+0xa670>
   1befc:	beq	1bf24 <__assert_fail@plt+0xa638>
   1bf00:	mov	r1, #-2147483648	; 0x80000000
   1bf04:	sdiv	r1, r1, r7
   1bf08:	cmp	r1, r0
   1bf0c:	bge	1bf24 <__assert_fail@plt+0xa638>
   1bf10:	b	1bf5c <__assert_fail@plt+0xa670>
   1bf14:	mvn	r1, #-2147483648	; 0x80000000
   1bf18:	sdiv	r1, r1, r0
   1bf1c:	cmp	r7, r1
   1bf20:	blt	1bf5c <__assert_fail@plt+0xa670>
   1bf24:	mul	r6, r7, r0
   1bf28:	mov	r0, r5
   1bf2c:	mov	r1, r6
   1bf30:	bl	1cf30 <__assert_fail@plt+0xb644>
   1bf34:	cmp	r6, #0
   1bf38:	movwne	r6, #1
   1bf3c:	cmp	r0, #0
   1bf40:	bne	1bf54 <__assert_fail@plt+0xa668>
   1bf44:	clz	r1, r5
   1bf48:	lsr	r1, r1, #5
   1bf4c:	orrs	r1, r1, r6
   1bf50:	bne	1bf5c <__assert_fail@plt+0xa670>
   1bf54:	str	r7, [r8]
   1bf58:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1bf5c:	bl	1c0c8 <__assert_fail@plt+0xa7dc>
   1bf60:	push	{fp, lr}
   1bf64:	mov	fp, sp
   1bf68:	mov	r1, #1
   1bf6c:	bl	1ceac <__assert_fail@plt+0xb5c0>
   1bf70:	cmp	r0, #0
   1bf74:	popne	{fp, pc}
   1bf78:	bl	1c0c8 <__assert_fail@plt+0xa7dc>
   1bf7c:	push	{fp, lr}
   1bf80:	mov	fp, sp
   1bf84:	bl	1ceac <__assert_fail@plt+0xb5c0>
   1bf88:	cmp	r0, #0
   1bf8c:	popne	{fp, pc}
   1bf90:	bl	1c0c8 <__assert_fail@plt+0xa7dc>
   1bf94:	push	{fp, lr}
   1bf98:	mov	fp, sp
   1bf9c:	mov	r1, #1
   1bfa0:	bl	1ceac <__assert_fail@plt+0xb5c0>
   1bfa4:	cmp	r0, #0
   1bfa8:	popne	{fp, pc}
   1bfac:	bl	1c0c8 <__assert_fail@plt+0xa7dc>
   1bfb0:	push	{fp, lr}
   1bfb4:	mov	fp, sp
   1bfb8:	bl	1ceac <__assert_fail@plt+0xb5c0>
   1bfbc:	cmp	r0, #0
   1bfc0:	popne	{fp, pc}
   1bfc4:	bl	1c0c8 <__assert_fail@plt+0xa7dc>
   1bfc8:	push	{r4, r5, r6, sl, fp, lr}
   1bfcc:	add	fp, sp, #16
   1bfd0:	mov	r5, r0
   1bfd4:	mov	r0, r1
   1bfd8:	mov	r4, r1
   1bfdc:	bl	1cf00 <__assert_fail@plt+0xb614>
   1bfe0:	cmp	r0, #0
   1bfe4:	beq	1c000 <__assert_fail@plt+0xa714>
   1bfe8:	mov	r1, r5
   1bfec:	mov	r2, r4
   1bff0:	mov	r6, r0
   1bff4:	bl	11574 <memcpy@plt>
   1bff8:	mov	r0, r6
   1bffc:	pop	{r4, r5, r6, sl, fp, pc}
   1c000:	bl	1c0c8 <__assert_fail@plt+0xa7dc>
   1c004:	push	{r4, r5, r6, sl, fp, lr}
   1c008:	add	fp, sp, #16
   1c00c:	mov	r5, r0
   1c010:	mov	r0, r1
   1c014:	mov	r4, r1
   1c018:	bl	1cf00 <__assert_fail@plt+0xb614>
   1c01c:	cmp	r0, #0
   1c020:	beq	1c03c <__assert_fail@plt+0xa750>
   1c024:	mov	r1, r5
   1c028:	mov	r2, r4
   1c02c:	mov	r6, r0
   1c030:	bl	11574 <memcpy@plt>
   1c034:	mov	r0, r6
   1c038:	pop	{r4, r5, r6, sl, fp, pc}
   1c03c:	bl	1c0c8 <__assert_fail@plt+0xa7dc>
   1c040:	push	{r4, r5, r6, sl, fp, lr}
   1c044:	add	fp, sp, #16
   1c048:	mov	r5, r0
   1c04c:	add	r0, r1, #1
   1c050:	mov	r4, r1
   1c054:	bl	1cf00 <__assert_fail@plt+0xb614>
   1c058:	cmp	r0, #0
   1c05c:	beq	1c084 <__assert_fail@plt+0xa798>
   1c060:	mov	r6, r0
   1c064:	mov	r0, #0
   1c068:	mov	r1, r5
   1c06c:	mov	r2, r4
   1c070:	strb	r0, [r6, r4]
   1c074:	mov	r0, r6
   1c078:	bl	11574 <memcpy@plt>
   1c07c:	mov	r0, r6
   1c080:	pop	{r4, r5, r6, sl, fp, pc}
   1c084:	bl	1c0c8 <__assert_fail@plt+0xa7dc>
   1c088:	push	{r4, r5, r6, sl, fp, lr}
   1c08c:	add	fp, sp, #16
   1c090:	mov	r4, r0
   1c094:	bl	11718 <strlen@plt>
   1c098:	add	r5, r0, #1
   1c09c:	mov	r0, r5
   1c0a0:	bl	1cf00 <__assert_fail@plt+0xb614>
   1c0a4:	cmp	r0, #0
   1c0a8:	beq	1c0c4 <__assert_fail@plt+0xa7d8>
   1c0ac:	mov	r1, r4
   1c0b0:	mov	r2, r5
   1c0b4:	mov	r6, r0
   1c0b8:	bl	11574 <memcpy@plt>
   1c0bc:	mov	r0, r6
   1c0c0:	pop	{r4, r5, r6, sl, fp, pc}
   1c0c4:	bl	1c0c8 <__assert_fail@plt+0xa7dc>
   1c0c8:	push	{fp, lr}
   1c0cc:	mov	fp, sp
   1c0d0:	movw	r0, #4816	; 0x12d0
   1c0d4:	movw	r1, #1508	; 0x5e4
   1c0d8:	mov	r2, #5
   1c0dc:	movt	r0, #3
   1c0e0:	movt	r1, #2
   1c0e4:	ldr	r4, [r0]
   1c0e8:	mov	r0, #0
   1c0ec:	bl	115b0 <dcgettext@plt>
   1c0f0:	movw	r2, #1860	; 0x744
   1c0f4:	mov	r3, r0
   1c0f8:	mov	r0, r4
   1c0fc:	mov	r1, #0
   1c100:	movt	r2, #2
   1c104:	bl	1167c <error@plt>
   1c108:	bl	118bc <abort@plt>
   1c10c:	push	{r4, sl, fp, lr}
   1c110:	add	fp, sp, #8
   1c114:	mov	r0, #0
   1c118:	mov	r1, #0
   1c11c:	bl	11700 <getcwd@plt>
   1c120:	mov	r4, r0
   1c124:	cmp	r0, #0
   1c128:	bne	1c13c <__assert_fail@plt+0xa850>
   1c12c:	bl	11748 <__errno_location@plt>
   1c130:	ldr	r0, [r0]
   1c134:	cmp	r0, #12
   1c138:	beq	1c144 <__assert_fail@plt+0xa858>
   1c13c:	mov	r0, r4
   1c140:	pop	{r4, sl, fp, pc}
   1c144:	bl	1c0c8 <__assert_fail@plt+0xa7dc>
   1c148:	push	{fp, lr}
   1c14c:	mov	fp, sp
   1c150:	sub	sp, sp, #8
   1c154:	movw	ip, #4816	; 0x12d0
   1c158:	movt	ip, #3
   1c15c:	ldr	ip, [ip]
   1c160:	str	ip, [sp, #4]
   1c164:	ldr	ip, [fp, #8]
   1c168:	str	ip, [sp]
   1c16c:	bl	1c174 <__assert_fail@plt+0xa888>
   1c170:	bl	118bc <abort@plt>
   1c174:	push	{r4, r5, r6, r7, fp, lr}
   1c178:	add	fp, sp, #16
   1c17c:	sub	sp, sp, #16
   1c180:	sub	r0, r0, #1
   1c184:	cmp	r0, #4
   1c188:	bcs	1c208 <__assert_fail@plt+0xa91c>
   1c18c:	mov	r5, r1
   1c190:	movw	r1, #1624	; 0x658
   1c194:	ldr	r4, [fp, #12]
   1c198:	ldr	r6, [fp, #8]
   1c19c:	movt	r1, #2
   1c1a0:	cmn	r5, #1
   1c1a4:	ldr	r1, [r1, r0, lsl #2]
   1c1a8:	ble	1c1bc <__assert_fail@plt+0xa8d0>
   1c1ac:	ldr	r7, [r3, r5, lsl #4]
   1c1b0:	movw	r5, #1525	; 0x5f5
   1c1b4:	movt	r5, #2
   1c1b8:	b	1c1d8 <__assert_fail@plt+0xa8ec>
   1c1bc:	mov	r0, #0
   1c1c0:	add	r7, sp, #14
   1c1c4:	strb	r0, [sp, #15]
   1c1c8:	movw	r0, #1525	; 0x5f5
   1c1cc:	strb	r2, [sp, #14]
   1c1d0:	movt	r0, #2
   1c1d4:	sub	r5, r0, r5
   1c1d8:	mov	r0, #0
   1c1dc:	mov	r2, #5
   1c1e0:	bl	115b0 <dcgettext@plt>
   1c1e4:	mov	r2, r0
   1c1e8:	mov	r0, r4
   1c1ec:	mov	r1, #0
   1c1f0:	mov	r3, r5
   1c1f4:	str	r7, [sp]
   1c1f8:	str	r6, [sp, #4]
   1c1fc:	bl	1167c <error@plt>
   1c200:	sub	sp, fp, #16
   1c204:	pop	{r4, r5, r6, r7, fp, pc}
   1c208:	bl	118bc <abort@plt>
   1c20c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c210:	add	fp, sp, #28
   1c214:	sub	sp, sp, #44	; 0x2c
   1c218:	cmp	r2, #37	; 0x25
   1c21c:	bcs	1ce8c <__assert_fail@plt+0xb5a0>
   1c220:	ldr	sl, [fp, #8]
   1c224:	mov	r6, r2
   1c228:	mov	r7, r1
   1c22c:	mov	r4, r0
   1c230:	str	r3, [sp, #36]	; 0x24
   1c234:	bl	11748 <__errno_location@plt>
   1c238:	mov	r5, r0
   1c23c:	mov	r0, #0
   1c240:	str	r0, [r5]
   1c244:	bl	116f4 <__ctype_b_loc@plt>
   1c248:	ldr	r1, [r0]
   1c24c:	mov	r2, r4
   1c250:	ldrb	r0, [r2], #1
   1c254:	add	r3, r1, r0, lsl #1
   1c258:	ldrb	r3, [r3, #1]
   1c25c:	tst	r3, #32
   1c260:	bne	1c250 <__assert_fail@plt+0xa964>
   1c264:	sub	r9, fp, #32
   1c268:	cmp	r7, #0
   1c26c:	mov	r8, #4
   1c270:	movne	r9, r7
   1c274:	cmp	r0, #45	; 0x2d
   1c278:	beq	1ce80 <__assert_fail@plt+0xb594>
   1c27c:	mov	r0, r4
   1c280:	mov	r1, r9
   1c284:	mov	r2, r6
   1c288:	mov	r3, #0
   1c28c:	bl	11580 <__strtoull_internal@plt>
   1c290:	mov	r7, r1
   1c294:	ldr	r1, [r9]
   1c298:	cmp	r1, r4
   1c29c:	beq	1c2c8 <__assert_fail@plt+0xa9dc>
   1c2a0:	mov	r6, r0
   1c2a4:	ldr	r0, [r5]
   1c2a8:	cmp	r0, #0
   1c2ac:	beq	1c304 <__assert_fail@plt+0xaa18>
   1c2b0:	cmp	r0, #34	; 0x22
   1c2b4:	bne	1ce80 <__assert_fail@plt+0xb594>
   1c2b8:	mov	r8, #1
   1c2bc:	cmp	sl, #0
   1c2c0:	bne	1c310 <__assert_fail@plt+0xaa24>
   1c2c4:	b	1ce78 <__assert_fail@plt+0xb58c>
   1c2c8:	cmp	sl, #0
   1c2cc:	beq	1ce80 <__assert_fail@plt+0xb594>
   1c2d0:	mov	r5, r1
   1c2d4:	ldrb	r1, [r4]
   1c2d8:	cmp	r1, #0
   1c2dc:	beq	1ce80 <__assert_fail@plt+0xb594>
   1c2e0:	mov	r0, sl
   1c2e4:	bl	11724 <strchr@plt>
   1c2e8:	cmp	r0, #0
   1c2ec:	beq	1ce80 <__assert_fail@plt+0xb594>
   1c2f0:	mov	r1, r5
   1c2f4:	mov	r8, #0
   1c2f8:	mov	r6, #1
   1c2fc:	mov	r7, #0
   1c300:	b	1c310 <__assert_fail@plt+0xaa24>
   1c304:	mov	r8, r0
   1c308:	cmp	sl, #0
   1c30c:	beq	1ce78 <__assert_fail@plt+0xb58c>
   1c310:	ldrb	r4, [r1]
   1c314:	cmp	r4, #0
   1c318:	beq	1ce78 <__assert_fail@plt+0xb58c>
   1c31c:	str	r1, [sp, #32]
   1c320:	mov	r0, sl
   1c324:	mov	r1, r4
   1c328:	bl	11724 <strchr@plt>
   1c32c:	cmp	r0, #0
   1c330:	beq	1c5f8 <__assert_fail@plt+0xad0c>
   1c334:	sub	r0, r4, #69	; 0x45
   1c338:	mov	r1, #1
   1c33c:	mov	r3, #0
   1c340:	mov	r5, #1024	; 0x400
   1c344:	cmp	r0, #47	; 0x2f
   1c348:	str	r1, [sp, #28]
   1c34c:	bhi	1c450 <__assert_fail@plt+0xab64>
   1c350:	add	r1, pc, #0
   1c354:	ldr	pc, [r1, r0, lsl #2]
   1c358:	andeq	ip, r1, r8, lsl r4
   1c35c:	andeq	ip, r1, r0, asr r4
   1c360:	andeq	ip, r1, r8, lsl r4
   1c364:	andeq	ip, r1, r0, asr r4
   1c368:	andeq	ip, r1, r0, asr r4
   1c36c:	andeq	ip, r1, r0, asr r4
   1c370:	andeq	ip, r1, r8, lsl r4
   1c374:	andeq	ip, r1, r0, asr r4
   1c378:	andeq	ip, r1, r8, lsl r4
   1c37c:	andeq	ip, r1, r0, asr r4
   1c380:	andeq	ip, r1, r0, asr r4
   1c384:	andeq	ip, r1, r8, lsl r4
   1c388:	andeq	ip, r1, r0, asr r4
   1c38c:	andeq	ip, r1, r0, asr r4
   1c390:	andeq	ip, r1, r0, asr r4
   1c394:	andeq	ip, r1, r8, lsl r4
   1c398:	andeq	ip, r1, r0, asr r4
   1c39c:	andeq	ip, r1, r0, asr r4
   1c3a0:	andeq	ip, r1, r0, asr r4
   1c3a4:	andeq	ip, r1, r0, asr r4
   1c3a8:	andeq	ip, r1, r8, lsl r4
   1c3ac:	andeq	ip, r1, r8, lsl r4
   1c3b0:	andeq	ip, r1, r0, asr r4
   1c3b4:	andeq	ip, r1, r0, asr r4
   1c3b8:	andeq	ip, r1, r0, asr r4
   1c3bc:	andeq	ip, r1, r0, asr r4
   1c3c0:	andeq	ip, r1, r0, asr r4
   1c3c4:	andeq	ip, r1, r0, asr r4
   1c3c8:	andeq	ip, r1, r0, asr r4
   1c3cc:	andeq	ip, r1, r0, asr r4
   1c3d0:	andeq	ip, r1, r0, asr r4
   1c3d4:	andeq	ip, r1, r0, asr r4
   1c3d8:	andeq	ip, r1, r0, asr r4
   1c3dc:	andeq	ip, r1, r0, asr r4
   1c3e0:	andeq	ip, r1, r8, lsl r4
   1c3e4:	andeq	ip, r1, r0, asr r4
   1c3e8:	andeq	ip, r1, r0, asr r4
   1c3ec:	andeq	ip, r1, r0, asr r4
   1c3f0:	andeq	ip, r1, r8, lsl r4
   1c3f4:	andeq	ip, r1, r0, asr r4
   1c3f8:	andeq	ip, r1, r8, lsl r4
   1c3fc:	andeq	ip, r1, r0, asr r4
   1c400:	andeq	ip, r1, r0, asr r4
   1c404:	andeq	ip, r1, r0, asr r4
   1c408:	andeq	ip, r1, r0, asr r4
   1c40c:	andeq	ip, r1, r0, asr r4
   1c410:	andeq	ip, r1, r0, asr r4
   1c414:	andeq	ip, r1, r8, lsl r4
   1c418:	mov	r0, sl
   1c41c:	mov	r1, #48	; 0x30
   1c420:	bl	11724 <strchr@plt>
   1c424:	cmp	r0, #0
   1c428:	beq	1c44c <__assert_fail@plt+0xab60>
   1c42c:	ldr	r1, [sp, #32]
   1c430:	ldrb	r0, [r1, #1]
   1c434:	cmp	r0, #66	; 0x42
   1c438:	cmpne	r0, #68	; 0x44
   1c43c:	bne	1c604 <__assert_fail@plt+0xad18>
   1c440:	mov	r5, #1000	; 0x3e8
   1c444:	mov	r0, #2
   1c448:	str	r0, [sp, #28]
   1c44c:	mov	r3, #0
   1c450:	sub	r0, r4, #66	; 0x42
   1c454:	cmp	r0, #53	; 0x35
   1c458:	bhi	1c5f8 <__assert_fail@plt+0xad0c>
   1c45c:	add	r1, pc, #0
   1c460:	ldr	pc, [r1, r0, lsl #2]
   1c464:	andeq	ip, r1, r0, lsl #19
   1c468:	strdeq	ip, [r1], -r8
   1c46c:	strdeq	ip, [r1], -r8
   1c470:	andeq	ip, r1, r8, lsr #19
   1c474:	strdeq	ip, [r1], -r8
   1c478:	andeq	ip, r1, ip, lsr r5
   1c47c:	strdeq	ip, [r1], -r8
   1c480:	strdeq	ip, [r1], -r8
   1c484:	strdeq	ip, [r1], -r8
   1c488:	andeq	ip, r1, r8, lsr #12
   1c48c:	strdeq	ip, [r1], -r8
   1c490:	andeq	ip, r1, r0, ror r6
   1c494:	strdeq	ip, [r1], -r8
   1c498:	strdeq	ip, [r1], -r8
   1c49c:	andeq	ip, r1, r0, lsl #22
   1c4a0:	strdeq	ip, [r1], -r8
   1c4a4:	strdeq	ip, [r1], -r8
   1c4a8:	strdeq	ip, [r1], -r8
   1c4ac:	strdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1c4b0:	strdeq	ip, [r1], -r8
   1c4b4:	strdeq	ip, [r1], -r8
   1c4b8:	strdeq	ip, [r1], -r8
   1c4bc:	strdeq	ip, [r1], -r8
   1c4c0:	andeq	ip, r1, r8, lsr #24
   1c4c4:	andeq	ip, r1, r4, ror #15
   1c4c8:	strdeq	ip, [r1], -r8
   1c4cc:	strdeq	ip, [r1], -r8
   1c4d0:	strdeq	ip, [r1], -r8
   1c4d4:	strdeq	ip, [r1], -r8
   1c4d8:	strdeq	ip, [r1], -r8
   1c4dc:	strdeq	ip, [r1], -r8
   1c4e0:	strdeq	ip, [r1], -r8
   1c4e4:	andeq	ip, r1, r0, lsl #28
   1c4e8:	andeq	ip, r1, r8, asr lr
   1c4ec:	strdeq	ip, [r1], -r8
   1c4f0:	strdeq	ip, [r1], -r8
   1c4f4:	strdeq	ip, [r1], -r8
   1c4f8:	andeq	ip, r1, ip, lsr r5
   1c4fc:	strdeq	ip, [r1], -r8
   1c500:	strdeq	ip, [r1], -r8
   1c504:	strdeq	ip, [r1], -r8
   1c508:	andeq	ip, r1, r8, lsr #12
   1c50c:	strdeq	ip, [r1], -r8
   1c510:	andeq	ip, r1, r0, ror r6
   1c514:	strdeq	ip, [r1], -r8
   1c518:	strdeq	ip, [r1], -r8
   1c51c:	strdeq	ip, [r1], -r8
   1c520:	strdeq	ip, [r1], -r8
   1c524:	strdeq	ip, [r1], -r8
   1c528:	strdeq	ip, [r1], -r8
   1c52c:	strdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1c530:	strdeq	ip, [r1], -r8
   1c534:	strdeq	ip, [r1], -r8
   1c538:	andeq	ip, r1, r4, lsr lr
   1c53c:	mvn	r0, #0
   1c540:	mvn	r1, #0
   1c544:	mov	r2, r5
   1c548:	mov	sl, r3
   1c54c:	bl	1ed30 <__assert_fail@plt+0xd444>
   1c550:	subs	r3, r0, r6
   1c554:	mov	lr, #0
   1c558:	umull	r4, r2, r6, r5
   1c55c:	str	r1, [sp, #20]
   1c560:	sbcs	r3, r1, r7
   1c564:	mla	ip, r6, sl, r2
   1c568:	mov	r2, r1
   1c56c:	movwcc	lr, #1
   1c570:	mla	r7, r7, r5, ip
   1c574:	mov	r2, #0
   1c578:	cmp	lr, #0
   1c57c:	mvnne	r4, #0
   1c580:	mvnne	r7, #0
   1c584:	subs	r6, r0, r4
   1c588:	sbcs	r6, r1, r7
   1c58c:	movwcc	r2, #1
   1c590:	umull	r3, r6, r4, r5
   1c594:	cmp	r2, #0
   1c598:	str	r6, [sp, #16]
   1c59c:	mvnne	r3, #0
   1c5a0:	cmp	r2, #0
   1c5a4:	umull	r6, ip, r3, r5
   1c5a8:	mla	r1, r3, sl, ip
   1c5ac:	ldr	ip, [sp, #16]
   1c5b0:	str	r1, [sp, #12]
   1c5b4:	mla	r4, r4, sl, ip
   1c5b8:	mla	r4, r7, r5, r4
   1c5bc:	ldr	r7, [sp, #12]
   1c5c0:	mvnne	r4, #0
   1c5c4:	subs	r0, r0, r3
   1c5c8:	ldr	r0, [sp, #20]
   1c5cc:	mla	r7, r4, r5, r7
   1c5d0:	sbcs	r0, r0, r4
   1c5d4:	mov	r0, #0
   1c5d8:	movwcc	r0, #1
   1c5dc:	cmp	r0, #0
   1c5e0:	mov	r1, r0
   1c5e4:	orr	r0, lr, r2
   1c5e8:	mvnne	r7, #0
   1c5ec:	mvnne	r6, #0
   1c5f0:	orr	r3, r0, r1
   1c5f4:	b	1ce58 <__assert_fail@plt+0xb56c>
   1c5f8:	ldr	r0, [sp, #36]	; 0x24
   1c5fc:	orr	r8, r8, #2
   1c600:	b	1ce7c <__assert_fail@plt+0xb590>
   1c604:	cmp	r0, #105	; 0x69
   1c608:	mov	r3, #0
   1c60c:	bne	1c450 <__assert_fail@plt+0xab64>
   1c610:	ldrb	r0, [r1, #2]
   1c614:	mov	r1, #1
   1c618:	cmp	r0, #66	; 0x42
   1c61c:	movweq	r1, #3
   1c620:	str	r1, [sp, #28]
   1c624:	b	1c450 <__assert_fail@plt+0xab64>
   1c628:	mvn	r0, #0
   1c62c:	mvn	r1, #0
   1c630:	mov	r2, r5
   1c634:	mov	r4, r3
   1c638:	bl	1ed30 <__assert_fail@plt+0xd444>
   1c63c:	subs	r0, r0, r6
   1c640:	mov	r2, #0
   1c644:	sbcs	r0, r1, r7
   1c648:	movwcc	r2, #1
   1c64c:	umull	r0, r1, r6, r5
   1c650:	mla	r1, r6, r4, r1
   1c654:	cmp	r2, #0
   1c658:	mov	r3, r2
   1c65c:	mla	r7, r7, r5, r1
   1c660:	mvnne	r0, #0
   1c664:	mvnne	r7, #0
   1c668:	mov	r6, r0
   1c66c:	b	1ce58 <__assert_fail@plt+0xb56c>
   1c670:	mvn	r0, #0
   1c674:	mvn	r1, #0
   1c678:	mov	r2, r5
   1c67c:	str	r3, [sp, #24]
   1c680:	bl	1ed30 <__assert_fail@plt+0xd444>
   1c684:	subs	r3, r0, r6
   1c688:	mov	ip, r0
   1c68c:	umull	r4, r0, r6, r5
   1c690:	mov	sl, #0
   1c694:	sbcs	r3, r1, r7
   1c698:	str	r0, [sp, #20]
   1c69c:	ldr	r0, [sp, #24]
   1c6a0:	mov	r3, #0
   1c6a4:	movwcc	r3, #1
   1c6a8:	cmp	r3, #0
   1c6ac:	mvnne	r4, #0
   1c6b0:	cmp	r3, #0
   1c6b4:	umull	lr, r2, r4, r5
   1c6b8:	mla	r2, r4, r0, r2
   1c6bc:	str	r2, [sp, #16]
   1c6c0:	ldr	r2, [sp, #20]
   1c6c4:	mla	r6, r6, r0, r2
   1c6c8:	ldr	r0, [sp, #16]
   1c6cc:	mla	r6, r7, r5, r6
   1c6d0:	mvnne	r6, #0
   1c6d4:	mla	r7, r6, r5, r0
   1c6d8:	subs	r0, ip, r4
   1c6dc:	sbcs	r0, r1, r6
   1c6e0:	movwcc	sl, #1
   1c6e4:	cmp	sl, #0
   1c6e8:	orr	r3, r3, sl
   1c6ec:	mvnne	lr, #0
   1c6f0:	mvnne	r7, #0
   1c6f4:	mov	r6, lr
   1c6f8:	b	1ce58 <__assert_fail@plt+0xb56c>
   1c6fc:	mvn	r0, #0
   1c700:	mvn	r1, #0
   1c704:	mov	r2, r5
   1c708:	mov	sl, r3
   1c70c:	bl	1ed30 <__assert_fail@plt+0xd444>
   1c710:	subs	r3, r0, r6
   1c714:	mov	ip, r1
   1c718:	umull	r2, lr, r6, r5
   1c71c:	str	r0, [sp, #20]
   1c720:	sbcs	r3, r1, r7
   1c724:	mov	r1, #0
   1c728:	mla	r6, r6, sl, lr
   1c72c:	mov	lr, #0
   1c730:	str	ip, [sp, #16]
   1c734:	movwcc	r1, #1
   1c738:	mla	r7, r7, r5, r6
   1c73c:	cmp	r1, #0
   1c740:	mvnne	r2, #0
   1c744:	cmp	r1, #0
   1c748:	umull	r3, r4, r2, r5
   1c74c:	mvnne	r7, #0
   1c750:	mla	r4, r2, sl, r4
   1c754:	subs	r2, r0, r2
   1c758:	sbcs	r2, ip, r7
   1c75c:	mla	r4, r7, r5, r4
   1c760:	movwcc	lr, #1
   1c764:	mov	r2, #0
   1c768:	cmp	lr, #0
   1c76c:	mvnne	r3, #0
   1c770:	mvnne	r4, #0
   1c774:	subs	r7, r0, r3
   1c778:	mov	r0, r5
   1c77c:	sbcs	r7, ip, r4
   1c780:	movwcc	r2, #1
   1c784:	umull	r5, r7, r3, r5
   1c788:	cmp	r2, #0
   1c78c:	mla	r3, r3, sl, r7
   1c790:	mvnne	r5, #0
   1c794:	mla	r3, r4, r0, r3
   1c798:	cmp	r2, #0
   1c79c:	umull	r6, ip, r5, r0
   1c7a0:	mvnne	r3, #0
   1c7a4:	mla	ip, r5, sl, ip
   1c7a8:	mla	r7, r3, r0, ip
   1c7ac:	ldr	r0, [sp, #20]
   1c7b0:	subs	r0, r0, r5
   1c7b4:	ldr	r0, [sp, #16]
   1c7b8:	sbcs	r0, r0, r3
   1c7bc:	mov	r0, #0
   1c7c0:	movwcc	r0, #1
   1c7c4:	cmp	r0, #0
   1c7c8:	mov	r3, r0
   1c7cc:	orr	r0, r1, lr
   1c7d0:	orr	r0, r0, r2
   1c7d4:	mvnne	r7, #0
   1c7d8:	mvnne	r6, #0
   1c7dc:	orr	r3, r0, r3
   1c7e0:	b	1ce58 <__assert_fail@plt+0xb56c>
   1c7e4:	mvn	r0, #0
   1c7e8:	mvn	r1, #0
   1c7ec:	mov	r2, r5
   1c7f0:	mov	r4, r3
   1c7f4:	str	r3, [sp, #24]
   1c7f8:	bl	1ed30 <__assert_fail@plt+0xd444>
   1c7fc:	umull	r3, r2, r6, r5
   1c800:	mla	r2, r6, r4, r2
   1c804:	subs	r6, r0, r6
   1c808:	sbcs	r6, r1, r7
   1c80c:	mla	ip, r7, r5, r2
   1c810:	ldr	r2, [sp, #24]
   1c814:	mov	r6, #0
   1c818:	movwcc	r6, #1
   1c81c:	cmp	r6, #0
   1c820:	str	r6, [sp, #20]
   1c824:	mov	r6, #0
   1c828:	mvnne	r3, #0
   1c82c:	mvnne	ip, #0
   1c830:	subs	r4, r0, r3
   1c834:	umull	r7, lr, r3, r5
   1c838:	sbcs	r4, r1, ip
   1c83c:	mla	r3, r3, r2, lr
   1c840:	movwcc	r6, #1
   1c844:	cmp	r6, #0
   1c848:	str	r6, [sp, #16]
   1c84c:	mvnne	r7, #0
   1c850:	cmp	r6, #0
   1c854:	umull	sl, r4, r7, r5
   1c858:	mla	r4, r7, r2, r4
   1c85c:	mla	r2, ip, r5, r3
   1c860:	mov	ip, #0
   1c864:	mvnne	r2, #0
   1c868:	subs	r3, r0, r7
   1c86c:	mla	r6, r2, r5, r4
   1c870:	mov	r4, r0
   1c874:	sbcs	r2, r1, r2
   1c878:	mov	r0, #0
   1c87c:	movwcc	r0, #1
   1c880:	mov	r3, r4
   1c884:	cmp	r0, #0
   1c888:	str	r0, [sp, #12]
   1c88c:	mov	r0, r1
   1c890:	str	r3, [sp, #4]
   1c894:	mvnne	sl, #0
   1c898:	mvnne	r6, #0
   1c89c:	str	r0, [sp, #8]
   1c8a0:	subs	r2, r4, sl
   1c8a4:	ldr	r4, [sp, #24]
   1c8a8:	sbcs	r2, r1, r6
   1c8ac:	movwcc	ip, #1
   1c8b0:	umull	r7, r2, sl, r5
   1c8b4:	cmp	ip, #0
   1c8b8:	mla	r2, sl, r4, r2
   1c8bc:	mvnne	r7, #0
   1c8c0:	cmp	ip, #0
   1c8c4:	mov	sl, #0
   1c8c8:	umull	r1, lr, r7, r5
   1c8cc:	mla	r2, r6, r5, r2
   1c8d0:	mvnne	r2, #0
   1c8d4:	mla	lr, r7, r4, lr
   1c8d8:	subs	r6, r3, r7
   1c8dc:	mla	lr, r2, r5, lr
   1c8e0:	sbcs	r2, r0, r2
   1c8e4:	movwcc	sl, #1
   1c8e8:	mov	r2, #0
   1c8ec:	cmp	sl, #0
   1c8f0:	mvnne	r1, #0
   1c8f4:	mvnne	lr, #0
   1c8f8:	subs	r6, r3, r1
   1c8fc:	ldr	r3, [sp, #24]
   1c900:	sbcs	r6, r0, lr
   1c904:	umull	r0, r7, r1, r5
   1c908:	movwcc	r2, #1
   1c90c:	cmp	r2, #0
   1c910:	mvnne	r0, #0
   1c914:	mla	r1, r1, r3, r7
   1c918:	cmp	r2, #0
   1c91c:	umull	r6, r4, r0, r5
   1c920:	mla	r1, lr, r5, r1
   1c924:	mla	r4, r0, r3, r4
   1c928:	ldr	r3, [sp, #4]
   1c92c:	mvnne	r1, #0
   1c930:	mla	r7, r1, r5, r4
   1c934:	ldr	r5, [sp, #16]
   1c938:	subs	r0, r3, r0
   1c93c:	ldr	r0, [sp, #8]
   1c940:	sbcs	r0, r0, r1
   1c944:	mov	r0, #0
   1c948:	movwcc	r0, #1
   1c94c:	cmp	r0, #0
   1c950:	mov	r1, r0
   1c954:	ldr	r0, [sp, #20]
   1c958:	mvnne	r7, #0
   1c95c:	mvnne	r6, #0
   1c960:	orr	r0, r0, r5
   1c964:	ldr	r5, [sp, #12]
   1c968:	orr	r0, r0, r5
   1c96c:	orr	r0, r0, ip
   1c970:	orr	r0, r0, sl
   1c974:	orr	r0, r0, r2
   1c978:	orr	r0, r0, r1
   1c97c:	b	1cdf8 <__assert_fail@plt+0xb50c>
   1c980:	mov	r1, #0
   1c984:	lsl	r2, r7, #10
   1c988:	lsl	r0, r6, #10
   1c98c:	lsr	r3, r7, #22
   1c990:	cmp	r1, r7, lsr #22
   1c994:	orr	r2, r2, r6, lsr #22
   1c998:	mvnne	r0, #0
   1c99c:	movwne	r3, #1
   1c9a0:	cmp	r1, r7, lsr #22
   1c9a4:	b	1ce24 <__assert_fail@plt+0xb538>
   1c9a8:	mvn	r0, #0
   1c9ac:	mvn	r1, #0
   1c9b0:	mov	r2, r5
   1c9b4:	mov	sl, r3
   1c9b8:	bl	1ed30 <__assert_fail@plt+0xd444>
   1c9bc:	subs	r2, r0, r6
   1c9c0:	mov	ip, r0
   1c9c4:	mov	r0, #0
   1c9c8:	sbcs	r2, r1, r7
   1c9cc:	movwcc	r0, #1
   1c9d0:	umull	r4, r2, r6, r5
   1c9d4:	cmp	r0, #0
   1c9d8:	mla	r2, r6, sl, r2
   1c9dc:	str	r0, [sp, #20]
   1c9e0:	mvnne	r4, #0
   1c9e4:	cmp	r0, #0
   1c9e8:	mla	r2, r7, r5, r2
   1c9ec:	mov	r0, #0
   1c9f0:	umull	lr, r3, r4, r5
   1c9f4:	mvnne	r2, #0
   1c9f8:	mla	r3, r4, sl, r3
   1c9fc:	mla	r6, r2, r5, r3
   1ca00:	subs	r3, ip, r4
   1ca04:	sbcs	r2, r1, r2
   1ca08:	mov	r3, r1
   1ca0c:	movwcc	r0, #1
   1ca10:	str	r3, [sp, #8]
   1ca14:	cmp	r0, #0
   1ca18:	str	r0, [sp, #16]
   1ca1c:	mov	r0, ip
   1ca20:	mvnne	lr, #0
   1ca24:	mvnne	r6, #0
   1ca28:	str	r0, [sp, #12]
   1ca2c:	subs	r2, ip, lr
   1ca30:	umull	r7, r4, lr, r5
   1ca34:	sbcs	r2, r1, r6
   1ca38:	mla	r4, lr, sl, r4
   1ca3c:	mov	r2, #0
   1ca40:	mla	r6, r6, r5, r4
   1ca44:	mov	r4, #0
   1ca48:	movwcc	r2, #1
   1ca4c:	cmp	r2, #0
   1ca50:	mvnne	r7, #0
   1ca54:	cmp	r2, #0
   1ca58:	umull	r1, ip, r7, r5
   1ca5c:	mvnne	r6, #0
   1ca60:	mla	ip, r7, sl, ip
   1ca64:	subs	r7, r0, r7
   1ca68:	mla	lr, r6, r5, ip
   1ca6c:	sbcs	r7, r3, r6
   1ca70:	mov	ip, #0
   1ca74:	movwcc	ip, #1
   1ca78:	cmp	ip, #0
   1ca7c:	mvnne	r1, #0
   1ca80:	mvnne	lr, #0
   1ca84:	subs	r7, r0, r1
   1ca88:	sbcs	r7, r3, lr
   1ca8c:	movwcc	r4, #1
   1ca90:	umull	r0, r7, r1, r5
   1ca94:	cmp	r4, #0
   1ca98:	mla	r1, r1, sl, r7
   1ca9c:	mvnne	r0, #0
   1caa0:	mla	r1, lr, r5, r1
   1caa4:	cmp	r4, #0
   1caa8:	umull	r6, r3, r0, r5
   1caac:	mvnne	r1, #0
   1cab0:	mla	r3, r0, sl, r3
   1cab4:	mla	r7, r1, r5, r3
   1cab8:	ldr	r3, [sp, #12]
   1cabc:	subs	r0, r3, r0
   1cac0:	ldr	r3, [sp, #16]
   1cac4:	ldr	r0, [sp, #8]
   1cac8:	sbcs	r0, r0, r1
   1cacc:	mov	r0, #0
   1cad0:	movwcc	r0, #1
   1cad4:	cmp	r0, #0
   1cad8:	mov	r1, r0
   1cadc:	ldr	r0, [sp, #20]
   1cae0:	mvnne	r7, #0
   1cae4:	mvnne	r6, #0
   1cae8:	orr	r0, r0, r3
   1caec:	orr	r0, r0, r2
   1caf0:	orr	r0, r0, ip
   1caf4:	orr	r0, r0, r4
   1caf8:	orr	r3, r0, r1
   1cafc:	b	1ce58 <__assert_fail@plt+0xb56c>
   1cb00:	mvn	r0, #0
   1cb04:	mvn	r1, #0
   1cb08:	mov	r2, r5
   1cb0c:	mov	sl, r3
   1cb10:	bl	1ed30 <__assert_fail@plt+0xd444>
   1cb14:	umull	r3, r2, r6, r5
   1cb18:	mov	lr, r1
   1cb1c:	mov	r1, r0
   1cb20:	mla	r2, r6, sl, r2
   1cb24:	subs	r6, r0, r6
   1cb28:	mov	r0, #0
   1cb2c:	sbcs	r6, lr, r7
   1cb30:	mla	r2, r7, r5, r2
   1cb34:	movwcc	r0, #1
   1cb38:	cmp	r0, #0
   1cb3c:	str	r0, [sp, #20]
   1cb40:	mov	r0, r1
   1cb44:	mvnne	r3, #0
   1cb48:	mvnne	r2, #0
   1cb4c:	str	r0, [sp, #16]
   1cb50:	subs	r4, r1, r3
   1cb54:	umull	r7, ip, r3, r5
   1cb58:	sbcs	r4, lr, r2
   1cb5c:	mla	r3, r3, sl, ip
   1cb60:	mov	ip, #0
   1cb64:	mov	r4, #0
   1cb68:	mla	r2, r2, r5, r3
   1cb6c:	movwcc	r4, #1
   1cb70:	cmp	r4, #0
   1cb74:	mvnne	r7, #0
   1cb78:	cmp	r4, #0
   1cb7c:	umull	r1, r6, r7, r5
   1cb80:	mvnne	r2, #0
   1cb84:	mla	r6, r7, sl, r6
   1cb88:	mla	r3, r2, r5, r6
   1cb8c:	subs	r6, r0, r7
   1cb90:	sbcs	r2, lr, r2
   1cb94:	movwcc	ip, #1
   1cb98:	mov	r2, #0
   1cb9c:	cmp	ip, #0
   1cba0:	mvnne	r1, #0
   1cba4:	mvnne	r3, #0
   1cba8:	subs	r6, r0, r1
   1cbac:	sbcs	r6, lr, r3
   1cbb0:	movwcc	r2, #1
   1cbb4:	umull	r0, r6, r1, r5
   1cbb8:	cmp	r2, #0
   1cbbc:	str	r6, [sp, #12]
   1cbc0:	mvnne	r0, #0
   1cbc4:	cmp	r2, #0
   1cbc8:	umull	r6, r7, r0, r5
   1cbcc:	mla	r7, r0, sl, r7
   1cbd0:	str	r7, [sp, #8]
   1cbd4:	ldr	r7, [sp, #12]
   1cbd8:	mla	r1, r1, sl, r7
   1cbdc:	mla	r1, r3, r5, r1
   1cbe0:	ldr	r3, [sp, #8]
   1cbe4:	mvnne	r1, #0
   1cbe8:	mla	r7, r1, r5, r3
   1cbec:	ldr	r3, [sp, #16]
   1cbf0:	subs	r0, r3, r0
   1cbf4:	sbcs	r0, lr, r1
   1cbf8:	mov	r0, #0
   1cbfc:	movwcc	r0, #1
   1cc00:	cmp	r0, #0
   1cc04:	mov	r1, r0
   1cc08:	ldr	r0, [sp, #20]
   1cc0c:	mvnne	r7, #0
   1cc10:	mvnne	r6, #0
   1cc14:	orr	r0, r0, r4
   1cc18:	orr	r0, r0, ip
   1cc1c:	orr	r0, r0, r2
   1cc20:	orr	r3, r0, r1
   1cc24:	b	1ce58 <__assert_fail@plt+0xb56c>
   1cc28:	mvn	r0, #0
   1cc2c:	mvn	r1, #0
   1cc30:	mov	r2, r5
   1cc34:	mov	sl, r3
   1cc38:	bl	1ed30 <__assert_fail@plt+0xd444>
   1cc3c:	mov	lr, r0
   1cc40:	subs	r0, r0, r6
   1cc44:	mov	r2, #0
   1cc48:	mov	ip, r1
   1cc4c:	str	sl, [sp, #24]
   1cc50:	sbcs	r0, r1, r7
   1cc54:	umull	r3, r1, r6, r5
   1cc58:	str	lr, [sp, #4]
   1cc5c:	movwcc	r2, #1
   1cc60:	mla	r6, r6, sl, r1
   1cc64:	mov	r1, #0
   1cc68:	cmp	r2, #0
   1cc6c:	mla	r7, r7, r5, r6
   1cc70:	str	r2, [sp, #20]
   1cc74:	mvnne	r3, #0
   1cc78:	cmp	r2, #0
   1cc7c:	mov	r2, #0
   1cc80:	umull	r0, r4, r3, r5
   1cc84:	mvnne	r7, #0
   1cc88:	mla	r4, r3, sl, r4
   1cc8c:	subs	r3, lr, r3
   1cc90:	sbcs	r3, ip, r7
   1cc94:	mla	r4, r7, r5, r4
   1cc98:	movwcc	r1, #1
   1cc9c:	cmp	r1, #0
   1cca0:	str	r1, [sp, #16]
   1cca4:	mvnne	r0, #0
   1cca8:	mvnne	r4, #0
   1ccac:	subs	r3, lr, r0
   1ccb0:	sbcs	r3, ip, r4
   1ccb4:	movwcc	r2, #1
   1ccb8:	umull	r6, r3, r0, r5
   1ccbc:	cmp	r2, #0
   1ccc0:	mla	r0, r0, sl, r3
   1ccc4:	str	r2, [sp, #12]
   1ccc8:	mvnne	r6, #0
   1cccc:	mla	r0, r4, r5, r0
   1ccd0:	cmp	r2, #0
   1ccd4:	ldr	r4, [sp, #24]
   1ccd8:	umull	r1, r7, r6, r5
   1ccdc:	mvnne	r0, #0
   1cce0:	subs	r3, lr, r6
   1cce4:	mla	r7, r6, sl, r7
   1cce8:	mov	r3, ip
   1ccec:	mla	r7, r0, r5, r7
   1ccf0:	sbcs	r0, ip, r0
   1ccf4:	str	r3, [sp]
   1ccf8:	mov	r0, #0
   1ccfc:	movwcc	r0, #1
   1cd00:	cmp	r0, #0
   1cd04:	str	r0, [sp, #8]
   1cd08:	mvnne	r1, #0
   1cd0c:	mvnne	r7, #0
   1cd10:	subs	r0, lr, r1
   1cd14:	sbcs	r0, ip, r7
   1cd18:	mov	ip, #0
   1cd1c:	movwcc	ip, #1
   1cd20:	umull	r6, r0, r1, r5
   1cd24:	cmp	ip, #0
   1cd28:	mla	r1, r1, r4, r0
   1cd2c:	mov	r0, lr
   1cd30:	mvnne	r6, #0
   1cd34:	mla	r1, r7, r5, r1
   1cd38:	cmp	ip, #0
   1cd3c:	umull	r2, sl, r6, r5
   1cd40:	mvnne	r1, #0
   1cd44:	mla	sl, r6, r4, sl
   1cd48:	subs	r6, lr, r6
   1cd4c:	mov	lr, #0
   1cd50:	mla	r7, r1, r5, sl
   1cd54:	sbcs	r1, r3, r1
   1cd58:	movwcc	lr, #1
   1cd5c:	ldr	r1, [sp, #24]
   1cd60:	cmp	lr, #0
   1cd64:	mvnne	r2, #0
   1cd68:	mvnne	r7, #0
   1cd6c:	subs	r6, r0, r2
   1cd70:	umull	r0, sl, r2, r5
   1cd74:	sbcs	r6, r3, r7
   1cd78:	mov	r3, #0
   1cd7c:	mla	r2, r2, r1, sl
   1cd80:	movwcc	r3, #1
   1cd84:	mla	r2, r7, r5, r2
   1cd88:	cmp	r3, #0
   1cd8c:	mvnne	r0, #0
   1cd90:	cmp	r3, #0
   1cd94:	umull	r6, r4, r0, r5
   1cd98:	mvnne	r2, #0
   1cd9c:	mla	r4, r0, r1, r4
   1cda0:	ldr	r1, [sp, #4]
   1cda4:	mla	r7, r2, r5, r4
   1cda8:	ldr	r5, [sp, #16]
   1cdac:	subs	r0, r1, r0
   1cdb0:	ldr	r0, [sp]
   1cdb4:	sbcs	r0, r0, r2
   1cdb8:	mov	r0, #0
   1cdbc:	movwcc	r0, #1
   1cdc0:	cmp	r0, #0
   1cdc4:	mov	r2, r0
   1cdc8:	ldr	r0, [sp, #20]
   1cdcc:	mvnne	r7, #0
   1cdd0:	mvnne	r6, #0
   1cdd4:	orr	r0, r0, r5
   1cdd8:	ldr	r5, [sp, #12]
   1cddc:	orr	r0, r0, r5
   1cde0:	ldr	r5, [sp, #8]
   1cde4:	orr	r0, r0, r5
   1cde8:	orr	r0, r0, ip
   1cdec:	orr	r0, r0, lr
   1cdf0:	orr	r0, r0, r3
   1cdf4:	orr	r0, r0, r2
   1cdf8:	and	r3, r0, #1
   1cdfc:	b	1ce58 <__assert_fail@plt+0xb56c>
   1ce00:	mov	r1, #0
   1ce04:	lsl	r2, r7, #9
   1ce08:	lsl	r0, r6, #9
   1ce0c:	lsr	r3, r7, #23
   1ce10:	cmp	r1, r7, lsr #23
   1ce14:	orr	r2, r2, r6, lsr #23
   1ce18:	mvnne	r0, #0
   1ce1c:	movwne	r3, #1
   1ce20:	cmp	r1, r7, lsr #23
   1ce24:	mvnne	r2, #0
   1ce28:	mov	r6, r0
   1ce2c:	mov	r7, r2
   1ce30:	b	1ce58 <__assert_fail@plt+0xb56c>
   1ce34:	lsl	r1, r7, #1
   1ce38:	lsl	r0, r6, #1
   1ce3c:	cmp	r7, #0
   1ce40:	lsr	r3, r7, #31
   1ce44:	orr	r1, r1, r6, lsr #31
   1ce48:	mvnlt	r0, #0
   1ce4c:	mvnlt	r1, #0
   1ce50:	mov	r6, r0
   1ce54:	mov	r7, r1
   1ce58:	ldr	r1, [sp, #32]
   1ce5c:	ldr	r2, [sp, #28]
   1ce60:	orr	r8, r3, r8
   1ce64:	add	r0, r1, r2
   1ce68:	str	r0, [r9]
   1ce6c:	ldrb	r0, [r1, r2]
   1ce70:	cmp	r0, #0
   1ce74:	orrne	r8, r8, #2
   1ce78:	ldr	r0, [sp, #36]	; 0x24
   1ce7c:	strd	r6, [r0]
   1ce80:	mov	r0, r8
   1ce84:	sub	sp, fp, #28
   1ce88:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ce8c:	movw	r0, #1640	; 0x668
   1ce90:	movw	r1, #1678	; 0x68e
   1ce94:	movw	r3, #1694	; 0x69e
   1ce98:	mov	r2, #85	; 0x55
   1ce9c:	movt	r0, #2
   1cea0:	movt	r1, #2
   1cea4:	movt	r3, #2
   1cea8:	bl	118ec <__assert_fail@plt>
   1ceac:	clz	r2, r1
   1ceb0:	clz	r3, r0
   1ceb4:	lsr	r2, r2, #5
   1ceb8:	lsr	r3, r3, #5
   1cebc:	orrs	r2, r3, r2
   1cec0:	movwne	r1, #1
   1cec4:	movwne	r0, #1
   1cec8:	cmp	r1, #0
   1cecc:	beq	1cefc <__assert_fail@plt+0xb610>
   1ced0:	mvn	r2, #-2147483648	; 0x80000000
   1ced4:	udiv	r2, r2, r1
   1ced8:	cmp	r2, r0
   1cedc:	bcs	1cefc <__assert_fail@plt+0xb610>
   1cee0:	push	{fp, lr}
   1cee4:	mov	fp, sp
   1cee8:	bl	11748 <__errno_location@plt>
   1ceec:	mov	r1, #12
   1cef0:	str	r1, [r0]
   1cef4:	mov	r0, #0
   1cef8:	pop	{fp, pc}
   1cefc:	b	114e4 <calloc@plt>
   1cf00:	cmp	r0, #0
   1cf04:	movweq	r0, #1
   1cf08:	cmn	r0, #1
   1cf0c:	ble	1cf14 <__assert_fail@plt+0xb628>
   1cf10:	b	116b8 <malloc@plt>
   1cf14:	push	{fp, lr}
   1cf18:	mov	fp, sp
   1cf1c:	bl	11748 <__errno_location@plt>
   1cf20:	mov	r1, #12
   1cf24:	str	r1, [r0]
   1cf28:	mov	r0, #0
   1cf2c:	pop	{fp, pc}
   1cf30:	push	{fp, lr}
   1cf34:	mov	fp, sp
   1cf38:	cmp	r0, #0
   1cf3c:	beq	1cf58 <__assert_fail@plt+0xb66c>
   1cf40:	cmp	r1, #0
   1cf44:	beq	1cf64 <__assert_fail@plt+0xb678>
   1cf48:	cmn	r1, #1
   1cf4c:	ble	1cf70 <__assert_fail@plt+0xb684>
   1cf50:	pop	{fp, lr}
   1cf54:	b	115c8 <realloc@plt>
   1cf58:	mov	r0, r1
   1cf5c:	pop	{fp, lr}
   1cf60:	b	1cf00 <__assert_fail@plt+0xb614>
   1cf64:	bl	16008 <__assert_fail@plt+0x471c>
   1cf68:	mov	r0, #0
   1cf6c:	pop	{fp, pc}
   1cf70:	bl	11748 <__errno_location@plt>
   1cf74:	mov	r1, #12
   1cf78:	str	r1, [r0]
   1cf7c:	mov	r0, #0
   1cf80:	pop	{fp, pc}
   1cf84:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1cf88:	add	fp, sp, #28
   1cf8c:	sub	sp, sp, #36	; 0x24
   1cf90:	sub	sp, sp, #1024	; 0x400
   1cf94:	ldrb	r3, [r0]
   1cf98:	mov	r5, r0
   1cf9c:	cmp	r3, #0
   1cfa0:	beq	1d054 <__assert_fail@plt+0xb768>
   1cfa4:	mov	r0, #1
   1cfa8:	mov	r2, #0
   1cfac:	ldrb	r7, [r1, r2]
   1cfb0:	cmp	r7, #0
   1cfb4:	uxtbne	r3, r3
   1cfb8:	subne	r3, r3, r7
   1cfbc:	clzne	r3, r3
   1cfc0:	lsrne	r3, r3, #5
   1cfc4:	andne	r0, r0, r3
   1cfc8:	addne	r3, r5, r2
   1cfcc:	addne	r2, r2, #1
   1cfd0:	ldrbne	r3, [r3, #1]
   1cfd4:	cmpne	r3, #0
   1cfd8:	bne	1cfac <__assert_fail@plt+0xb6c0>
   1cfdc:	add	r8, r1, r2
   1cfe0:	mov	r7, r5
   1cfe4:	ldrb	r2, [r8]
   1cfe8:	cmp	r2, #0
   1cfec:	movwne	r7, #0
   1cff0:	tst	r0, #1
   1cff4:	cmpeq	r2, #0
   1cff8:	bne	1d064 <__assert_fail@plt+0xb778>
   1cffc:	sub	r4, r8, r1
   1d000:	ldrb	r1, [r1]
   1d004:	add	r0, r5, #1
   1d008:	bl	11724 <strchr@plt>
   1d00c:	cmp	r4, #1
   1d010:	beq	1d070 <__assert_fail@plt+0xb784>
   1d014:	cmp	r0, #0
   1d018:	mov	r7, r0
   1d01c:	beq	1d064 <__assert_fail@plt+0xb778>
   1d020:	add	r1, r5, r4
   1d024:	sub	r5, r8, r4
   1d028:	str	r0, [sp, #24]
   1d02c:	str	r4, [sp, #28]
   1d030:	subs	r9, r1, r0
   1d034:	movwcc	r9, #1
   1d038:	cmp	r4, #31
   1d03c:	bhi	1d078 <__assert_fail@plt+0xb78c>
   1d040:	cmp	r4, #3
   1d044:	bcs	1d17c <__assert_fail@plt+0xb890>
   1d048:	sub	r6, r4, #1
   1d04c:	mov	r4, #1
   1d050:	b	1d790 <__assert_fail@plt+0xbea4>
   1d054:	ldrb	r0, [r1]
   1d058:	cmp	r0, #0
   1d05c:	movne	r5, #0
   1d060:	mov	r7, r5
   1d064:	mov	r0, r7
   1d068:	sub	sp, fp, #28
   1d06c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d070:	mov	r7, r0
   1d074:	b	1d064 <__assert_fail@plt+0xb778>
   1d078:	mvn	r1, #0
   1d07c:	mov	r0, #0
   1d080:	mov	r2, #1
   1d084:	mov	ip, #1
   1d088:	mov	r3, #1
   1d08c:	add	r6, r1, r3
   1d090:	ldrb	r7, [r5, r2]
   1d094:	ldrb	r6, [r5, r6]
   1d098:	cmp	r7, r6
   1d09c:	bcs	1d0b0 <__assert_fail@plt+0xb7c4>
   1d0a0:	sub	ip, r2, r1
   1d0a4:	mov	r3, #1
   1d0a8:	mov	r0, r2
   1d0ac:	b	1d0e4 <__assert_fail@plt+0xb7f8>
   1d0b0:	bne	1d0c8 <__assert_fail@plt+0xb7dc>
   1d0b4:	cmp	r3, ip
   1d0b8:	bne	1d0e0 <__assert_fail@plt+0xb7f4>
   1d0bc:	add	r0, r0, ip
   1d0c0:	mov	r3, #1
   1d0c4:	b	1d0e4 <__assert_fail@plt+0xb7f8>
   1d0c8:	add	r2, r0, #1
   1d0cc:	mov	r1, r0
   1d0d0:	mov	r3, #1
   1d0d4:	mov	ip, #1
   1d0d8:	mov	r0, r2
   1d0dc:	b	1d0e4 <__assert_fail@plt+0xb7f8>
   1d0e0:	add	r3, r3, #1
   1d0e4:	add	r2, r3, r0
   1d0e8:	cmp	r2, r4
   1d0ec:	bcc	1d08c <__assert_fail@plt+0xb7a0>
   1d0f0:	cmp	r4, #2
   1d0f4:	bcc	1d280 <__assert_fail@plt+0xb994>
   1d0f8:	mvn	lr, #0
   1d0fc:	mov	r2, #0
   1d100:	mov	r3, #1
   1d104:	mov	sl, #1
   1d108:	mov	r6, #1
   1d10c:	add	r7, lr, r6
   1d110:	ldrb	r0, [r5, r3]
   1d114:	ldrb	r7, [r5, r7]
   1d118:	cmp	r7, r0
   1d11c:	bcs	1d130 <__assert_fail@plt+0xb844>
   1d120:	sub	sl, r3, lr
   1d124:	mov	r6, #1
   1d128:	mov	r2, r3
   1d12c:	b	1d168 <__assert_fail@plt+0xb87c>
   1d130:	cmp	r0, r7
   1d134:	bne	1d14c <__assert_fail@plt+0xb860>
   1d138:	cmp	r6, sl
   1d13c:	bne	1d164 <__assert_fail@plt+0xb878>
   1d140:	add	r2, r2, sl
   1d144:	mov	r6, #1
   1d148:	b	1d168 <__assert_fail@plt+0xb87c>
   1d14c:	add	r0, r2, #1
   1d150:	mov	lr, r2
   1d154:	mov	r6, #1
   1d158:	mov	sl, #1
   1d15c:	mov	r2, r0
   1d160:	b	1d168 <__assert_fail@plt+0xb87c>
   1d164:	add	r6, r6, #1
   1d168:	ldr	r0, [sp, #28]
   1d16c:	add	r3, r6, r2
   1d170:	cmp	r3, r0
   1d174:	bcc	1d10c <__assert_fail@plt+0xb820>
   1d178:	b	1d288 <__assert_fail@plt+0xb99c>
   1d17c:	mvn	r1, #0
   1d180:	mov	r0, #0
   1d184:	mov	r2, #1
   1d188:	mov	ip, #1
   1d18c:	mov	r3, #1
   1d190:	add	r6, r1, r3
   1d194:	ldrb	r7, [r5, r2]
   1d198:	ldrb	r6, [r5, r6]
   1d19c:	cmp	r7, r6
   1d1a0:	bcs	1d1b4 <__assert_fail@plt+0xb8c8>
   1d1a4:	sub	ip, r2, r1
   1d1a8:	mov	r3, #1
   1d1ac:	mov	r0, r2
   1d1b0:	b	1d1e8 <__assert_fail@plt+0xb8fc>
   1d1b4:	bne	1d1cc <__assert_fail@plt+0xb8e0>
   1d1b8:	cmp	r3, ip
   1d1bc:	bne	1d1e4 <__assert_fail@plt+0xb8f8>
   1d1c0:	add	r0, r0, ip
   1d1c4:	mov	r3, #1
   1d1c8:	b	1d1e8 <__assert_fail@plt+0xb8fc>
   1d1cc:	add	r2, r0, #1
   1d1d0:	mov	r1, r0
   1d1d4:	mov	r3, #1
   1d1d8:	mov	ip, #1
   1d1dc:	mov	r0, r2
   1d1e0:	b	1d1e8 <__assert_fail@plt+0xb8fc>
   1d1e4:	add	r3, r3, #1
   1d1e8:	add	r2, r3, r0
   1d1ec:	cmp	r2, r4
   1d1f0:	bcc	1d190 <__assert_fail@plt+0xb8a4>
   1d1f4:	cmp	r4, #2
   1d1f8:	bcc	1d774 <__assert_fail@plt+0xbe88>
   1d1fc:	mvn	lr, #0
   1d200:	mov	r2, #0
   1d204:	mov	r3, #1
   1d208:	mov	r4, #1
   1d20c:	mov	r6, #1
   1d210:	add	r7, lr, r6
   1d214:	ldrb	r0, [r5, r3]
   1d218:	ldrb	r7, [r5, r7]
   1d21c:	cmp	r7, r0
   1d220:	bcs	1d234 <__assert_fail@plt+0xb948>
   1d224:	sub	r4, r3, lr
   1d228:	mov	r6, #1
   1d22c:	mov	r2, r3
   1d230:	b	1d26c <__assert_fail@plt+0xb980>
   1d234:	cmp	r0, r7
   1d238:	bne	1d250 <__assert_fail@plt+0xb964>
   1d23c:	cmp	r6, r4
   1d240:	bne	1d268 <__assert_fail@plt+0xb97c>
   1d244:	add	r2, r2, r4
   1d248:	mov	r6, #1
   1d24c:	b	1d26c <__assert_fail@plt+0xb980>
   1d250:	add	r0, r2, #1
   1d254:	mov	lr, r2
   1d258:	mov	r6, #1
   1d25c:	mov	r4, #1
   1d260:	mov	r2, r0
   1d264:	b	1d26c <__assert_fail@plt+0xb980>
   1d268:	add	r6, r6, #1
   1d26c:	ldr	r0, [sp, #28]
   1d270:	add	r3, r6, r2
   1d274:	cmp	r3, r0
   1d278:	bcc	1d210 <__assert_fail@plt+0xb924>
   1d27c:	b	1d77c <__assert_fail@plt+0xbe90>
   1d280:	mov	sl, #1
   1d284:	mvn	lr, #0
   1d288:	ldr	r2, [sp, #28]
   1d28c:	add	r6, sp, #32
   1d290:	add	r0, r6, #16
   1d294:	mov	r3, r6
   1d298:	vdup.32	q8, r2
   1d29c:	vst1.32	{d16-d17}, [r0]
   1d2a0:	add	r0, r6, #32
   1d2a4:	vst1.32	{d16-d17}, [r0]
   1d2a8:	add	r0, r6, #48	; 0x30
   1d2ac:	vst1.32	{d16-d17}, [r0]
   1d2b0:	add	r0, r6, #64	; 0x40
   1d2b4:	vst1.32	{d16-d17}, [r0]
   1d2b8:	add	r0, r6, #80	; 0x50
   1d2bc:	vst1.32	{d16-d17}, [r0]
   1d2c0:	add	r0, r6, #96	; 0x60
   1d2c4:	vst1.32	{d16-d17}, [r0]
   1d2c8:	add	r0, r6, #112	; 0x70
   1d2cc:	vst1.32	{d16-d17}, [r0]
   1d2d0:	add	r0, r6, #128	; 0x80
   1d2d4:	vst1.32	{d16-d17}, [r0]
   1d2d8:	add	r0, r6, #144	; 0x90
   1d2dc:	vst1.32	{d16-d17}, [r0]
   1d2e0:	add	r0, r6, #160	; 0xa0
   1d2e4:	vst1.32	{d16-d17}, [r0]
   1d2e8:	add	r0, r6, #176	; 0xb0
   1d2ec:	vst1.32	{d16-d17}, [r0]
   1d2f0:	add	r0, r6, #192	; 0xc0
   1d2f4:	vst1.32	{d16-d17}, [r0]
   1d2f8:	add	r0, r6, #208	; 0xd0
   1d2fc:	vst1.32	{d16-d17}, [r0]
   1d300:	add	r0, r6, #224	; 0xe0
   1d304:	vst1.32	{d16-d17}, [r0]
   1d308:	add	r0, r6, #240	; 0xf0
   1d30c:	vst1.32	{d16-d17}, [r0]
   1d310:	add	r0, r6, #256	; 0x100
   1d314:	vst1.32	{d16-d17}, [r0]
   1d318:	add	r0, r6, #272	; 0x110
   1d31c:	vst1.32	{d16-d17}, [r0]
   1d320:	add	r0, r6, #288	; 0x120
   1d324:	vst1.32	{d16-d17}, [r0]
   1d328:	mov	r0, #1008	; 0x3f0
   1d32c:	vst1.32	{d16-d17}, [r3], r0
   1d330:	add	r0, r6, #320	; 0x140
   1d334:	vst1.32	{d16-d17}, [r0]
   1d338:	add	r0, r6, #304	; 0x130
   1d33c:	vst1.32	{d16-d17}, [r0]
   1d340:	add	r0, r6, #336	; 0x150
   1d344:	vst1.32	{d16-d17}, [r0]
   1d348:	add	r0, r6, #352	; 0x160
   1d34c:	vst1.32	{d16-d17}, [r0]
   1d350:	add	r0, r6, #368	; 0x170
   1d354:	vst1.32	{d16-d17}, [r0]
   1d358:	add	r0, r6, #384	; 0x180
   1d35c:	vst1.32	{d16-d17}, [r0]
   1d360:	add	r0, r6, #400	; 0x190
   1d364:	vst1.32	{d16-d17}, [r0]
   1d368:	add	r0, r6, #416	; 0x1a0
   1d36c:	vst1.32	{d16-d17}, [r0]
   1d370:	add	r0, r6, #432	; 0x1b0
   1d374:	vst1.32	{d16-d17}, [r0]
   1d378:	add	r0, r6, #448	; 0x1c0
   1d37c:	vst1.32	{d16-d17}, [r0]
   1d380:	add	r0, r6, #464	; 0x1d0
   1d384:	vst1.32	{d16-d17}, [r0]
   1d388:	add	r0, r6, #480	; 0x1e0
   1d38c:	vst1.32	{d16-d17}, [r0]
   1d390:	add	r0, r6, #496	; 0x1f0
   1d394:	vst1.32	{d16-d17}, [r0]
   1d398:	add	r0, r6, #512	; 0x200
   1d39c:	vst1.32	{d16-d17}, [r0]
   1d3a0:	add	r0, r6, #528	; 0x210
   1d3a4:	vst1.32	{d16-d17}, [r0]
   1d3a8:	add	r0, r6, #544	; 0x220
   1d3ac:	vst1.32	{d16-d17}, [r0]
   1d3b0:	add	r0, r6, #560	; 0x230
   1d3b4:	vst1.32	{d16-d17}, [r0]
   1d3b8:	add	r0, r6, #576	; 0x240
   1d3bc:	vst1.32	{d16-d17}, [r0]
   1d3c0:	add	r0, r6, #592	; 0x250
   1d3c4:	vst1.32	{d16-d17}, [r0]
   1d3c8:	add	r0, r6, #624	; 0x270
   1d3cc:	vst1.32	{d16-d17}, [r0]
   1d3d0:	add	r0, r6, #608	; 0x260
   1d3d4:	vst1.32	{d16-d17}, [r0]
   1d3d8:	add	r0, r6, #640	; 0x280
   1d3dc:	vst1.32	{d16-d17}, [r0]
   1d3e0:	add	r0, r6, #656	; 0x290
   1d3e4:	vst1.32	{d16-d17}, [r0]
   1d3e8:	add	r0, r6, #672	; 0x2a0
   1d3ec:	vst1.32	{d16-d17}, [r0]
   1d3f0:	add	r0, r6, #688	; 0x2b0
   1d3f4:	vst1.32	{d16-d17}, [r0]
   1d3f8:	add	r0, r6, #704	; 0x2c0
   1d3fc:	vst1.32	{d16-d17}, [r0]
   1d400:	add	r0, r6, #720	; 0x2d0
   1d404:	vst1.32	{d16-d17}, [r0]
   1d408:	add	r0, r6, #736	; 0x2e0
   1d40c:	vst1.32	{d16-d17}, [r0]
   1d410:	add	r0, r6, #752	; 0x2f0
   1d414:	vst1.32	{d16-d17}, [r0]
   1d418:	add	r0, r6, #768	; 0x300
   1d41c:	vst1.32	{d16-d17}, [r0]
   1d420:	add	r0, r6, #784	; 0x310
   1d424:	vst1.32	{d16-d17}, [r0]
   1d428:	add	r0, r6, #800	; 0x320
   1d42c:	vst1.32	{d16-d17}, [r0]
   1d430:	add	r0, r6, #816	; 0x330
   1d434:	vst1.32	{d16-d17}, [r0]
   1d438:	add	r0, r6, #832	; 0x340
   1d43c:	vst1.32	{d16-d17}, [r0]
   1d440:	add	r0, r6, #848	; 0x350
   1d444:	vst1.32	{d16-d17}, [r0]
   1d448:	add	r0, r6, #864	; 0x360
   1d44c:	vst1.32	{d16-d17}, [r0]
   1d450:	add	r0, r6, #880	; 0x370
   1d454:	vst1.32	{d16-d17}, [r0]
   1d458:	add	r0, r6, #896	; 0x380
   1d45c:	vst1.32	{d16-d17}, [r0]
   1d460:	add	r0, r6, #928	; 0x3a0
   1d464:	vst1.32	{d16-d17}, [r0]
   1d468:	add	r0, r6, #912	; 0x390
   1d46c:	vst1.32	{d16-d17}, [r0]
   1d470:	add	r0, r6, #944	; 0x3b0
   1d474:	vst1.32	{d16-d17}, [r0]
   1d478:	add	r0, r6, #960	; 0x3c0
   1d47c:	vst1.32	{d16-d17}, [r0]
   1d480:	add	r0, r6, #976	; 0x3d0
   1d484:	vst1.32	{d16-d17}, [r0]
   1d488:	add	r0, r6, #992	; 0x3e0
   1d48c:	vst1.32	{d16-d17}, [r0]
   1d490:	vst1.32	{d16-d17}, [r3]
   1d494:	add	r0, r1, #1
   1d498:	add	r3, lr, #1
   1d49c:	cmp	r3, r0
   1d4a0:	movcc	sl, ip
   1d4a4:	movcc	r3, r0
   1d4a8:	cmp	r2, #0
   1d4ac:	beq	1d4c4 <__assert_fail@plt+0xbbd8>
   1d4b0:	mov	r0, r2
   1d4b4:	ldrb	r1, [r8, -r0]
   1d4b8:	subs	r0, r0, #1
   1d4bc:	str	r0, [r6, r1, lsl #2]
   1d4c0:	bne	1d4b4 <__assert_fail@plt+0xbbc8>
   1d4c4:	add	r1, r5, sl
   1d4c8:	mov	r0, r5
   1d4cc:	mov	r2, r3
   1d4d0:	mov	r4, r3
   1d4d4:	bl	11598 <memcmp@plt>
   1d4d8:	cmp	r0, #0
   1d4dc:	str	r4, [sp, #20]
   1d4e0:	beq	1d608 <__assert_fail@plt+0xbd1c>
   1d4e4:	ldr	r0, [sp, #24]
   1d4e8:	ldr	r8, [sp, #28]
   1d4ec:	mov	r1, #0
   1d4f0:	mov	r7, #0
   1d4f4:	add	r0, r0, r9
   1d4f8:	sub	r2, r8, r9
   1d4fc:	bl	117a8 <memchr@plt>
   1d500:	sub	r1, r8, r4
   1d504:	cmp	r4, r1
   1d508:	movcs	r1, r4
   1d50c:	cmp	r8, #0
   1d510:	str	r1, [sp, #16]
   1d514:	beq	1d064 <__assert_fail@plt+0xb778>
   1d518:	mov	r1, r4
   1d51c:	ldr	r4, [sp, #24]
   1d520:	cmp	r0, #0
   1d524:	bne	1d064 <__assert_fail@plt+0xb778>
   1d528:	mov	ip, r8
   1d52c:	add	r0, r4, r1
   1d530:	sub	sl, r8, #1
   1d534:	add	r9, r5, r1
   1d538:	mov	r8, #0
   1d53c:	str	r0, [sp, #8]
   1d540:	rsb	r0, r1, #1
   1d544:	mov	lr, ip
   1d548:	str	r0, [sp, #12]
   1d54c:	add	r0, r4, lr
   1d550:	ldrb	r2, [r0, #-1]
   1d554:	ldr	r2, [r6, r2, lsl #2]
   1d558:	cmp	r2, #0
   1d55c:	beq	1d568 <__assert_fail@plt+0xbc7c>
   1d560:	add	r8, r2, r8
   1d564:	b	1d5cc <__assert_fail@plt+0xbce0>
   1d568:	cmp	r1, sl
   1d56c:	bcs	1d59c <__assert_fail@plt+0xbcb0>
   1d570:	ldr	r2, [sp, #8]
   1d574:	add	r3, r2, r8
   1d578:	mov	r2, #0
   1d57c:	ldrb	r7, [r3, r2]
   1d580:	ldrb	r6, [r9, r2]
   1d584:	cmp	r6, r7
   1d588:	bne	1d5c4 <__assert_fail@plt+0xbcd8>
   1d58c:	add	r2, r2, #1
   1d590:	add	r7, r1, r2
   1d594:	cmp	r7, sl
   1d598:	bcc	1d57c <__assert_fail@plt+0xbc90>
   1d59c:	ldr	r2, [sp, #12]
   1d5a0:	add	r7, r4, r8
   1d5a4:	cmp	r2, #1
   1d5a8:	beq	1d064 <__assert_fail@plt+0xb778>
   1d5ac:	ldrb	r3, [r7, -r2]
   1d5b0:	ldrb	r6, [r5, -r2]
   1d5b4:	add	r2, r2, #1
   1d5b8:	cmp	r6, r3
   1d5bc:	beq	1d5a4 <__assert_fail@plt+0xbcb8>
   1d5c0:	ldr	r2, [sp, #16]
   1d5c4:	add	r2, r8, r2
   1d5c8:	add	r8, r2, #1
   1d5cc:	add	r6, r8, ip
   1d5d0:	mov	r1, #0
   1d5d4:	mov	r7, #0
   1d5d8:	sub	r2, r6, lr
   1d5dc:	bl	117a8 <memchr@plt>
   1d5e0:	cmp	r6, #0
   1d5e4:	beq	1d064 <__assert_fail@plt+0xb778>
   1d5e8:	ldr	r4, [sp, #24]
   1d5ec:	ldr	ip, [sp, #28]
   1d5f0:	ldr	r1, [sp, #20]
   1d5f4:	mov	lr, r6
   1d5f8:	cmp	r0, #0
   1d5fc:	add	r6, sp, #32
   1d600:	beq	1d54c <__assert_fail@plt+0xbc60>
   1d604:	b	1d064 <__assert_fail@plt+0xb778>
   1d608:	ldr	r0, [sp, #24]
   1d60c:	ldr	r8, [sp, #28]
   1d610:	mov	r1, #0
   1d614:	mov	r7, #0
   1d618:	add	r0, r0, r9
   1d61c:	sub	r2, r8, r9
   1d620:	bl	117a8 <memchr@plt>
   1d624:	cmp	r8, #0
   1d628:	beq	1d064 <__assert_fail@plt+0xb778>
   1d62c:	ldr	r4, [sp, #24]
   1d630:	ldr	r1, [sp, #20]
   1d634:	cmp	r0, #0
   1d638:	str	sl, [sp, #16]
   1d63c:	bne	1d064 <__assert_fail@plt+0xb778>
   1d640:	ldr	r0, [sp, #16]
   1d644:	mov	ip, r8
   1d648:	mov	sl, #0
   1d64c:	mov	lr, r8
   1d650:	mov	r9, #0
   1d654:	sub	r0, r8, r0
   1d658:	str	r0, [sp, #12]
   1d65c:	sub	r0, r1, #1
   1d660:	str	r0, [sp, #4]
   1d664:	rsb	r0, r1, #0
   1d668:	str	r0, [sp]
   1d66c:	sub	r0, r8, #1
   1d670:	str	r0, [sp, #8]
   1d674:	add	r0, r4, lr
   1d678:	ldrb	r2, [r0, #-1]
   1d67c:	ldr	r3, [r6, r2, lsl #2]
   1d680:	cmp	r3, #0
   1d684:	beq	1d6ac <__assert_fail@plt+0xbdc0>
   1d688:	ldr	r2, [sp, #16]
   1d68c:	ldr	r1, [sp, #12]
   1d690:	cmp	r3, r2
   1d694:	mov	r2, r3
   1d698:	movcc	r2, r1
   1d69c:	cmp	sl, #0
   1d6a0:	moveq	r2, r3
   1d6a4:	mov	sl, #0
   1d6a8:	b	1d720 <__assert_fail@plt+0xbe34>
   1d6ac:	cmp	r1, sl
   1d6b0:	mov	r2, r1
   1d6b4:	ldr	r1, [sp, #8]
   1d6b8:	movcc	r2, sl
   1d6bc:	cmp	r2, r1
   1d6c0:	bcs	1d6e4 <__assert_fail@plt+0xbdf8>
   1d6c4:	add	r3, r4, r9
   1d6c8:	ldrb	r7, [r3, r2]
   1d6cc:	ldrb	r6, [r5, r2]
   1d6d0:	cmp	r6, r7
   1d6d4:	bne	1d764 <__assert_fail@plt+0xbe78>
   1d6d8:	add	r2, r2, #1
   1d6dc:	cmp	r2, r1
   1d6e0:	bcc	1d6c8 <__assert_fail@plt+0xbddc>
   1d6e4:	ldr	r2, [sp, #4]
   1d6e8:	add	r7, r4, r9
   1d6ec:	add	r3, r2, #1
   1d6f0:	cmp	sl, r3
   1d6f4:	bcs	1d70c <__assert_fail@plt+0xbe20>
   1d6f8:	ldrb	r6, [r7, r2]
   1d6fc:	ldrb	r4, [r5, r2]
   1d700:	sub	r2, r2, #1
   1d704:	cmp	r4, r6
   1d708:	beq	1d6ec <__assert_fail@plt+0xbe00>
   1d70c:	add	r2, sl, #1
   1d710:	ldr	sl, [sp, #12]
   1d714:	cmp	r3, r2
   1d718:	ldr	r2, [sp, #16]
   1d71c:	bcc	1d064 <__assert_fail@plt+0xb778>
   1d720:	add	r9, r2, r9
   1d724:	mov	r1, #0
   1d728:	mov	r8, ip
   1d72c:	mov	r7, #0
   1d730:	add	r6, r9, ip
   1d734:	sub	r2, r6, lr
   1d738:	bl	117a8 <memchr@plt>
   1d73c:	cmp	r6, #0
   1d740:	beq	1d064 <__assert_fail@plt+0xb778>
   1d744:	ldr	r4, [sp, #24]
   1d748:	ldr	r1, [sp, #20]
   1d74c:	mov	lr, r6
   1d750:	cmp	r0, #0
   1d754:	mov	ip, r8
   1d758:	add	r6, sp, #32
   1d75c:	beq	1d674 <__assert_fail@plt+0xbd88>
   1d760:	b	1d064 <__assert_fail@plt+0xb778>
   1d764:	ldr	r1, [sp]
   1d768:	add	r2, r1, r2
   1d76c:	add	r2, r2, #1
   1d770:	b	1d6a4 <__assert_fail@plt+0xbdb8>
   1d774:	mov	r4, #1
   1d778:	mvn	lr, #0
   1d77c:	add	r0, r1, #1
   1d780:	add	r6, lr, #1
   1d784:	cmp	r6, r0
   1d788:	movcc	r4, ip
   1d78c:	movcc	r6, r0
   1d790:	add	r1, r5, r4
   1d794:	mov	r0, r5
   1d798:	mov	r2, r6
   1d79c:	bl	11598 <memcmp@plt>
   1d7a0:	cmp	r0, #0
   1d7a4:	str	r6, [sp, #20]
   1d7a8:	beq	1d8ac <__assert_fail@plt+0xbfc0>
   1d7ac:	ldr	r0, [sp, #24]
   1d7b0:	ldr	r4, [sp, #28]
   1d7b4:	mov	r1, #0
   1d7b8:	mov	r7, #0
   1d7bc:	add	r0, r0, r9
   1d7c0:	sub	r2, r4, r9
   1d7c4:	bl	117a8 <memchr@plt>
   1d7c8:	sub	r2, r4, r6
   1d7cc:	cmp	r6, r2
   1d7d0:	movcs	r2, r6
   1d7d4:	cmp	r4, #0
   1d7d8:	str	r2, [sp, #16]
   1d7dc:	beq	1d064 <__assert_fail@plt+0xb778>
   1d7e0:	mov	r1, r4
   1d7e4:	ldr	r4, [sp, #24]
   1d7e8:	cmp	r0, #0
   1d7ec:	bne	1d064 <__assert_fail@plt+0xb778>
   1d7f0:	add	r0, r4, r6
   1d7f4:	add	r9, r5, r6
   1d7f8:	mov	sl, #0
   1d7fc:	mov	ip, r1
   1d800:	str	r0, [sp, #8]
   1d804:	rsb	r0, r6, #1
   1d808:	str	r0, [sp, #12]
   1d80c:	cmp	r1, r6
   1d810:	bls	1d840 <__assert_fail@plt+0xbf54>
   1d814:	ldr	r0, [sp, #8]
   1d818:	mov	r2, #0
   1d81c:	add	r0, r0, sl
   1d820:	ldrb	r3, [r0, r2]
   1d824:	ldrb	r7, [r9, r2]
   1d828:	cmp	r7, r3
   1d82c:	bne	1d868 <__assert_fail@plt+0xbf7c>
   1d830:	add	r2, r2, #1
   1d834:	add	r3, r6, r2
   1d838:	cmp	r3, r1
   1d83c:	bcc	1d820 <__assert_fail@plt+0xbf34>
   1d840:	ldr	r0, [sp, #12]
   1d844:	add	r7, r4, sl
   1d848:	cmp	r0, #1
   1d84c:	beq	1d064 <__assert_fail@plt+0xb778>
   1d850:	ldrb	r2, [r7, -r0]
   1d854:	ldrb	r3, [r5, -r0]
   1d858:	add	r0, r0, #1
   1d85c:	cmp	r3, r2
   1d860:	beq	1d848 <__assert_fail@plt+0xbf5c>
   1d864:	ldr	r2, [sp, #16]
   1d868:	add	r2, sl, r2
   1d86c:	add	r0, r4, ip
   1d870:	mov	r7, #0
   1d874:	add	sl, r2, #1
   1d878:	add	r8, sl, r1
   1d87c:	mov	r1, #0
   1d880:	sub	r2, r8, ip
   1d884:	bl	117a8 <memchr@plt>
   1d888:	cmp	r0, #0
   1d88c:	bne	1d064 <__assert_fail@plt+0xb778>
   1d890:	ldr	r4, [sp, #24]
   1d894:	ldr	r1, [sp, #28]
   1d898:	ldr	r6, [sp, #20]
   1d89c:	cmp	r8, #0
   1d8a0:	mov	ip, r8
   1d8a4:	bne	1d80c <__assert_fail@plt+0xbf20>
   1d8a8:	b	1d064 <__assert_fail@plt+0xb778>
   1d8ac:	ldr	r0, [sp, #24]
   1d8b0:	ldr	r8, [sp, #28]
   1d8b4:	mov	r1, #0
   1d8b8:	mov	r7, #0
   1d8bc:	add	r0, r0, r9
   1d8c0:	sub	r2, r8, r9
   1d8c4:	bl	117a8 <memchr@plt>
   1d8c8:	cmp	r8, #0
   1d8cc:	beq	1d064 <__assert_fail@plt+0xb778>
   1d8d0:	str	r4, [sp, #16]
   1d8d4:	ldr	r4, [sp, #24]
   1d8d8:	cmp	r0, #0
   1d8dc:	bne	1d064 <__assert_fail@plt+0xb778>
   1d8e0:	ldr	r0, [sp, #16]
   1d8e4:	mov	r1, r8
   1d8e8:	mov	sl, #0
   1d8ec:	mov	ip, r8
   1d8f0:	mov	r9, #0
   1d8f4:	sub	r0, r8, r0
   1d8f8:	str	r0, [sp, #12]
   1d8fc:	sub	r0, r6, #1
   1d900:	str	r0, [sp, #8]
   1d904:	rsb	r0, r6, #0
   1d908:	str	r0, [sp, #4]
   1d90c:	cmp	r6, sl
   1d910:	movcc	r6, sl
   1d914:	cmp	r6, r1
   1d918:	bcs	1d93c <__assert_fail@plt+0xc050>
   1d91c:	add	r2, r4, r9
   1d920:	ldrb	r3, [r2, r6]
   1d924:	ldrb	r7, [r5, r6]
   1d928:	cmp	r7, r3
   1d92c:	bne	1d97c <__assert_fail@plt+0xc090>
   1d930:	add	r6, r6, #1
   1d934:	cmp	r6, r1
   1d938:	bcc	1d920 <__assert_fail@plt+0xc034>
   1d93c:	ldr	r0, [sp, #8]
   1d940:	add	r7, r4, r9
   1d944:	add	r2, r0, #1
   1d948:	cmp	sl, r2
   1d94c:	bcs	1d964 <__assert_fail@plt+0xc078>
   1d950:	ldrb	r3, [r7, r0]
   1d954:	ldrb	r6, [r5, r0]
   1d958:	sub	r0, r0, #1
   1d95c:	cmp	r6, r3
   1d960:	beq	1d944 <__assert_fail@plt+0xc058>
   1d964:	add	r0, sl, #1
   1d968:	ldr	sl, [sp, #12]
   1d96c:	cmp	r2, r0
   1d970:	ldr	r2, [sp, #16]
   1d974:	bcs	1d98c <__assert_fail@plt+0xc0a0>
   1d978:	b	1d064 <__assert_fail@plt+0xb778>
   1d97c:	ldr	r2, [sp, #4]
   1d980:	mov	sl, #0
   1d984:	add	r0, r2, r6
   1d988:	add	r2, r0, #1
   1d98c:	add	r9, r2, r9
   1d990:	add	r0, r4, ip
   1d994:	mov	r7, #0
   1d998:	add	r8, r9, r1
   1d99c:	mov	r1, #0
   1d9a0:	sub	r2, r8, ip
   1d9a4:	bl	117a8 <memchr@plt>
   1d9a8:	cmp	r8, #0
   1d9ac:	beq	1d064 <__assert_fail@plt+0xb778>
   1d9b0:	ldr	r4, [sp, #24]
   1d9b4:	ldr	r1, [sp, #28]
   1d9b8:	ldr	r6, [sp, #20]
   1d9bc:	cmp	r0, #0
   1d9c0:	mov	ip, r8
   1d9c4:	beq	1d90c <__assert_fail@plt+0xc020>
   1d9c8:	b	1d064 <__assert_fail@plt+0xb778>
   1d9cc:	mov	r0, #1
   1d9d0:	b	119f0 <__assert_fail@plt+0x104>
   1d9d4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d9d8:	add	fp, sp, #28
   1d9dc:	sub	sp, sp, #12
   1d9e0:	mov	r4, r3
   1d9e4:	mov	r6, r2
   1d9e8:	mov	r5, r1
   1d9ec:	mov	sl, r0
   1d9f0:	bl	11718 <strlen@plt>
   1d9f4:	ldr	r8, [r5]
   1d9f8:	cmp	r8, #0
   1d9fc:	beq	1dab8 <__assert_fail@plt+0xc1cc>
   1da00:	mov	r7, r0
   1da04:	mov	r0, #0
   1da08:	add	r9, r5, #4
   1da0c:	mov	r5, #0
   1da10:	str	r6, [sp, #4]
   1da14:	str	r0, [sp]
   1da18:	mvn	r0, #0
   1da1c:	str	r0, [sp, #8]
   1da20:	mov	r0, r8
   1da24:	mov	r1, sl
   1da28:	mov	r2, r7
   1da2c:	bl	118b0 <strncmp@plt>
   1da30:	cmp	r0, #0
   1da34:	bne	1da8c <__assert_fail@plt+0xc1a0>
   1da38:	mov	r0, r8
   1da3c:	bl	11718 <strlen@plt>
   1da40:	cmp	r0, r7
   1da44:	beq	1dabc <__assert_fail@plt+0xc1d0>
   1da48:	ldr	r0, [sp, #8]
   1da4c:	cmn	r0, #1
   1da50:	beq	1da88 <__assert_fail@plt+0xc19c>
   1da54:	ldr	r0, [sp, #4]
   1da58:	cmp	r0, #0
   1da5c:	beq	1da7c <__assert_fail@plt+0xc190>
   1da60:	ldr	r1, [sp, #8]
   1da64:	mov	r2, r4
   1da68:	mla	r0, r1, r4, r0
   1da6c:	mov	r1, r6
   1da70:	bl	11598 <memcmp@plt>
   1da74:	cmp	r0, #0
   1da78:	beq	1da8c <__assert_fail@plt+0xc1a0>
   1da7c:	mov	r0, #1
   1da80:	str	r0, [sp]
   1da84:	b	1da8c <__assert_fail@plt+0xc1a0>
   1da88:	str	r5, [sp, #8]
   1da8c:	ldr	r8, [r9, r5, lsl #2]
   1da90:	add	r6, r6, r4
   1da94:	add	r5, r5, #1
   1da98:	cmp	r8, #0
   1da9c:	bne	1da20 <__assert_fail@plt+0xc134>
   1daa0:	ldr	r0, [sp]
   1daa4:	tst	r0, #1
   1daa8:	ldr	r0, [sp, #8]
   1daac:	mvnne	r0, #1
   1dab0:	sub	sp, fp, #28
   1dab4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1dab8:	mvn	r5, #0
   1dabc:	mov	r0, r5
   1dac0:	sub	sp, fp, #28
   1dac4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1dac8:	push	{r4, r5, r6, r7, fp, lr}
   1dacc:	add	fp, sp, #16
   1dad0:	mov	r5, r0
   1dad4:	ldr	r0, [r1]
   1dad8:	mvn	r4, #0
   1dadc:	cmp	r0, #0
   1dae0:	beq	1db10 <__assert_fail@plt+0xc224>
   1dae4:	add	r7, r1, #4
   1dae8:	mov	r6, #0
   1daec:	mov	r1, r5
   1daf0:	bl	11520 <strcmp@plt>
   1daf4:	cmp	r0, #0
   1daf8:	moveq	r0, r6
   1dafc:	popeq	{r4, r5, r6, r7, fp, pc}
   1db00:	ldr	r0, [r7, r6, lsl #2]
   1db04:	add	r6, r6, #1
   1db08:	cmp	r0, #0
   1db0c:	bne	1daec <__assert_fail@plt+0xc200>
   1db10:	mov	r0, r4
   1db14:	pop	{r4, r5, r6, r7, fp, pc}
   1db18:	push	{r4, r5, r6, sl, fp, lr}
   1db1c:	add	fp, sp, #16
   1db20:	sub	sp, sp, #8
   1db24:	mov	r4, r1
   1db28:	movw	r1, #1800	; 0x708
   1db2c:	mov	r5, r0
   1db30:	movw	r0, #1773	; 0x6ed
   1db34:	cmn	r2, #1
   1db38:	mov	r2, #5
   1db3c:	movt	r0, #2
   1db40:	movt	r1, #2
   1db44:	moveq	r1, r0
   1db48:	mov	r0, #0
   1db4c:	bl	115b0 <dcgettext@plt>
   1db50:	mov	r6, r0
   1db54:	mov	r0, #0
   1db58:	mov	r1, #8
   1db5c:	mov	r2, r4
   1db60:	bl	1ab8c <__assert_fail@plt+0x92a0>
   1db64:	mov	r4, r0
   1db68:	mov	r0, #1
   1db6c:	mov	r1, r5
   1db70:	bl	1b14c <__assert_fail@plt+0x9860>
   1db74:	str	r0, [sp]
   1db78:	mov	r0, #0
   1db7c:	mov	r1, #0
   1db80:	mov	r2, r6
   1db84:	mov	r3, r4
   1db88:	bl	1167c <error@plt>
   1db8c:	sub	sp, fp, #16
   1db90:	pop	{r4, r5, r6, sl, fp, pc}
   1db94:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1db98:	add	fp, sp, #28
   1db9c:	sub	sp, sp, #4
   1dba0:	mov	r5, r1
   1dba4:	movw	r1, #1829	; 0x725
   1dba8:	mov	sl, r2
   1dbac:	mov	r7, r0
   1dbb0:	mov	r0, #0
   1dbb4:	mov	r2, #5
   1dbb8:	mov	r8, #0
   1dbbc:	movt	r1, #2
   1dbc0:	bl	115b0 <dcgettext@plt>
   1dbc4:	movw	r4, #4912	; 0x1330
   1dbc8:	movt	r4, #3
   1dbcc:	ldr	r1, [r4]
   1dbd0:	bl	114f0 <fputs_unlocked@plt>
   1dbd4:	ldr	r6, [r7]
   1dbd8:	cmp	r6, #0
   1dbdc:	beq	1dc7c <__assert_fail@plt+0xc390>
   1dbe0:	add	r9, r7, #4
   1dbe4:	mov	r7, #0
   1dbe8:	str	sl, [sp]
   1dbec:	cmp	r8, #0
   1dbf0:	beq	1dc0c <__assert_fail@plt+0xc320>
   1dbf4:	mov	r0, r7
   1dbf8:	mov	r1, r5
   1dbfc:	mov	r2, sl
   1dc00:	bl	11598 <memcmp@plt>
   1dc04:	cmp	r0, #0
   1dc08:	beq	1dc38 <__assert_fail@plt+0xc34c>
   1dc0c:	ldr	r7, [r4]
   1dc10:	mov	r0, r6
   1dc14:	bl	1b15c <__assert_fail@plt+0x9870>
   1dc18:	movw	r2, #1850	; 0x73a
   1dc1c:	mov	r3, r0
   1dc20:	mov	r0, r7
   1dc24:	mov	r1, #1
   1dc28:	movt	r2, #2
   1dc2c:	bl	1179c <__fprintf_chk@plt>
   1dc30:	mov	r7, r5
   1dc34:	b	1dc68 <__assert_fail@plt+0xc37c>
   1dc38:	mov	sl, r9
   1dc3c:	ldr	r9, [r4]
   1dc40:	mov	r0, r6
   1dc44:	bl	1b15c <__assert_fail@plt+0x9870>
   1dc48:	mov	r3, r0
   1dc4c:	mov	r0, r9
   1dc50:	mov	r9, sl
   1dc54:	ldr	sl, [sp]
   1dc58:	movw	r2, #1858	; 0x742
   1dc5c:	mov	r1, #1
   1dc60:	movt	r2, #2
   1dc64:	bl	1179c <__fprintf_chk@plt>
   1dc68:	ldr	r6, [r9, -r8, lsl #2]
   1dc6c:	add	r5, r5, sl
   1dc70:	sub	r8, r8, #1
   1dc74:	cmp	r6, #0
   1dc78:	bne	1dbec <__assert_fail@plt+0xc300>
   1dc7c:	ldr	r0, [r4]
   1dc80:	ldr	r1, [r0, #20]
   1dc84:	ldr	r2, [r0, #24]
   1dc88:	cmp	r1, r2
   1dc8c:	addcc	r2, r1, #1
   1dc90:	strcc	r2, [r0, #20]
   1dc94:	movcc	r0, #10
   1dc98:	strbcc	r0, [r1]
   1dc9c:	subcc	sp, fp, #28
   1dca0:	popcc	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1dca4:	mov	r1, #10
   1dca8:	sub	sp, fp, #28
   1dcac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1dcb0:	b	117e4 <__overflow@plt>
   1dcb4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1dcb8:	add	fp, sp, #28
   1dcbc:	sub	sp, sp, #20
   1dcc0:	mov	r9, r0
   1dcc4:	ldr	r0, [fp, #16]
   1dcc8:	mov	r8, r3
   1dccc:	mov	sl, r2
   1dcd0:	mov	r7, r1
   1dcd4:	cmp	r0, #0
   1dcd8:	beq	1ddb0 <__assert_fail@plt+0xc4c4>
   1dcdc:	mov	r0, r7
   1dce0:	str	r9, [sp, #8]
   1dce4:	str	r8, [sp, #16]
   1dce8:	bl	11718 <strlen@plt>
   1dcec:	ldr	r9, [sl]
   1dcf0:	cmp	r9, #0
   1dcf4:	beq	1ddf0 <__assert_fail@plt+0xc504>
   1dcf8:	str	sl, [sp, #4]
   1dcfc:	add	r8, sl, #4
   1dd00:	ldr	sl, [sp, #16]
   1dd04:	mov	r4, r0
   1dd08:	mov	r0, #0
   1dd0c:	mvn	r6, #0
   1dd10:	mov	r5, #0
   1dd14:	str	r0, [sp, #12]
   1dd18:	mov	r0, r9
   1dd1c:	mov	r1, r7
   1dd20:	mov	r2, r4
   1dd24:	bl	118b0 <strncmp@plt>
   1dd28:	cmp	r0, #0
   1dd2c:	bne	1dd7c <__assert_fail@plt+0xc490>
   1dd30:	mov	r0, r9
   1dd34:	bl	11718 <strlen@plt>
   1dd38:	cmp	r0, r4
   1dd3c:	beq	1ddfc <__assert_fail@plt+0xc510>
   1dd40:	cmn	r6, #1
   1dd44:	beq	1dd78 <__assert_fail@plt+0xc48c>
   1dd48:	ldr	r0, [sp, #16]
   1dd4c:	cmp	r0, #0
   1dd50:	beq	1dd6c <__assert_fail@plt+0xc480>
   1dd54:	ldr	r2, [fp, #8]
   1dd58:	mov	r1, sl
   1dd5c:	mla	r0, r6, r2, r0
   1dd60:	bl	11598 <memcmp@plt>
   1dd64:	cmp	r0, #0
   1dd68:	beq	1dd7c <__assert_fail@plt+0xc490>
   1dd6c:	mov	r0, #1
   1dd70:	str	r0, [sp, #12]
   1dd74:	b	1dd7c <__assert_fail@plt+0xc490>
   1dd78:	mov	r6, r5
   1dd7c:	ldr	r9, [r8, r5, lsl #2]
   1dd80:	ldr	r0, [fp, #8]
   1dd84:	add	r5, r5, #1
   1dd88:	add	sl, sl, r0
   1dd8c:	cmp	r9, #0
   1dd90:	bne	1dd18 <__assert_fail@plt+0xc42c>
   1dd94:	ldr	r0, [sp, #12]
   1dd98:	ldr	r8, [sp, #16]
   1dd9c:	ldr	sl, [sp, #4]
   1dda0:	ldr	r9, [sp, #8]
   1dda4:	tst	r0, #1
   1dda8:	beq	1de0c <__assert_fail@plt+0xc520>
   1ddac:	b	1de18 <__assert_fail@plt+0xc52c>
   1ddb0:	ldr	r0, [sl]
   1ddb4:	movw	r4, #1773	; 0x6ed
   1ddb8:	movt	r4, #2
   1ddbc:	cmp	r0, #0
   1ddc0:	beq	1de2c <__assert_fail@plt+0xc540>
   1ddc4:	add	r5, sl, #4
   1ddc8:	mov	r6, #0
   1ddcc:	mov	r1, r7
   1ddd0:	bl	11520 <strcmp@plt>
   1ddd4:	cmp	r0, #0
   1ddd8:	beq	1de0c <__assert_fail@plt+0xc520>
   1dddc:	ldr	r0, [r5, r6, lsl #2]
   1dde0:	add	r6, r6, #1
   1dde4:	cmp	r0, #0
   1dde8:	bne	1ddcc <__assert_fail@plt+0xc4e0>
   1ddec:	b	1de2c <__assert_fail@plt+0xc540>
   1ddf0:	ldr	r8, [sp, #16]
   1ddf4:	ldr	r9, [sp, #8]
   1ddf8:	b	1de24 <__assert_fail@plt+0xc538>
   1ddfc:	ldr	r8, [sp, #16]
   1de00:	ldr	sl, [sp, #4]
   1de04:	ldr	r9, [sp, #8]
   1de08:	mov	r6, r5
   1de0c:	cmn	r6, #1
   1de10:	bgt	1de94 <__assert_fail@plt+0xc5a8>
   1de14:	beq	1de24 <__assert_fail@plt+0xc538>
   1de18:	movw	r4, #1800	; 0x708
   1de1c:	movt	r4, #2
   1de20:	b	1de2c <__assert_fail@plt+0xc540>
   1de24:	movw	r4, #1773	; 0x6ed
   1de28:	movt	r4, #2
   1de2c:	ldr	r6, [fp, #12]
   1de30:	mov	r0, #0
   1de34:	mov	r1, r4
   1de38:	mov	r2, #5
   1de3c:	bl	115b0 <dcgettext@plt>
   1de40:	mov	r4, r0
   1de44:	mov	r0, #0
   1de48:	mov	r1, #8
   1de4c:	mov	r2, r7
   1de50:	bl	1ab8c <__assert_fail@plt+0x92a0>
   1de54:	mov	r5, r0
   1de58:	mov	r0, #1
   1de5c:	mov	r1, r9
   1de60:	bl	1b14c <__assert_fail@plt+0x9860>
   1de64:	str	r0, [sp]
   1de68:	mov	r0, #0
   1de6c:	mov	r1, #0
   1de70:	mov	r2, r4
   1de74:	mov	r3, r5
   1de78:	bl	1167c <error@plt>
   1de7c:	ldr	r2, [fp, #8]
   1de80:	mov	r0, sl
   1de84:	mov	r1, r8
   1de88:	bl	1db94 <__assert_fail@plt+0xc2a8>
   1de8c:	blx	r6
   1de90:	mvn	r6, #0
   1de94:	mov	r0, r6
   1de98:	sub	sp, fp, #28
   1de9c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1dea0:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1dea4:	add	fp, sp, #24
   1dea8:	ldr	r6, [r1]
   1deac:	cmp	r6, #0
   1deb0:	beq	1df14 <__assert_fail@plt+0xc628>
   1deb4:	mov	r8, r1
   1deb8:	mov	r7, r2
   1debc:	mov	r1, r2
   1dec0:	mov	r2, r3
   1dec4:	mov	r4, r3
   1dec8:	mov	r9, r0
   1decc:	bl	11598 <memcmp@plt>
   1ded0:	cmp	r0, #0
   1ded4:	beq	1df0c <__assert_fail@plt+0xc620>
   1ded8:	add	r7, r7, r4
   1dedc:	add	r5, r8, #4
   1dee0:	ldr	r6, [r5]
   1dee4:	cmp	r6, #0
   1dee8:	beq	1df14 <__assert_fail@plt+0xc628>
   1deec:	mov	r0, r9
   1def0:	mov	r1, r7
   1def4:	mov	r2, r4
   1def8:	bl	11598 <memcmp@plt>
   1defc:	add	r7, r7, r4
   1df00:	add	r5, r5, #4
   1df04:	cmp	r0, #0
   1df08:	bne	1dee0 <__assert_fail@plt+0xc5f4>
   1df0c:	mov	r0, r6
   1df10:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1df14:	mov	r6, #0
   1df18:	mov	r0, r6
   1df1c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1df20:	sub	r0, r0, #1
   1df24:	ldrb	r3, [r0, #1]!
   1df28:	cmp	r3, #47	; 0x2f
   1df2c:	beq	1df24 <__assert_fail@plt+0xc638>
   1df30:	mov	r2, #0
   1df34:	mov	r1, r0
   1df38:	b	1df54 <__assert_fail@plt+0xc668>
   1df3c:	cmp	r3, #0
   1df40:	bxeq	lr
   1df44:	tst	r2, #1
   1df48:	mov	r2, #0
   1df4c:	movne	r0, r1
   1df50:	ldrb	r3, [r1, #1]!
   1df54:	uxtb	r3, r3
   1df58:	cmp	r3, #47	; 0x2f
   1df5c:	bne	1df3c <__assert_fail@plt+0xc650>
   1df60:	ldrb	r3, [r1, #1]!
   1df64:	mov	r2, #1
   1df68:	b	1df54 <__assert_fail@plt+0xc668>
   1df6c:	push	{r4, sl, fp, lr}
   1df70:	add	fp, sp, #8
   1df74:	mov	r4, r0
   1df78:	bl	11718 <strlen@plt>
   1df7c:	mov	r1, r0
   1df80:	sub	r2, r4, #1
   1df84:	mov	r0, r1
   1df88:	cmp	r1, #2
   1df8c:	popcc	{r4, sl, fp, pc}
   1df90:	ldrb	r3, [r2, r0]
   1df94:	sub	r1, r0, #1
   1df98:	cmp	r3, #47	; 0x2f
   1df9c:	beq	1df84 <__assert_fail@plt+0xc698>
   1dfa0:	pop	{r4, sl, fp, pc}
   1dfa4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1dfa8:	add	fp, sp, #28
   1dfac:	sub	sp, sp, #4
   1dfb0:	mov	r4, r0
   1dfb4:	bl	115f8 <chdir@plt>
   1dfb8:	cmp	r0, #0
   1dfbc:	beq	1e080 <__assert_fail@plt+0xc794>
   1dfc0:	mov	r6, r0
   1dfc4:	bl	11748 <__errno_location@plt>
   1dfc8:	mov	r9, r0
   1dfcc:	ldr	r0, [r0]
   1dfd0:	cmp	r0, #36	; 0x24
   1dfd4:	bne	1e254 <__assert_fail@plt+0xc968>
   1dfd8:	mov	r0, r4
   1dfdc:	bl	11718 <strlen@plt>
   1dfe0:	cmp	r0, #0
   1dfe4:	beq	1e2a0 <__assert_fail@plt+0xc9b4>
   1dfe8:	mov	r7, r0
   1dfec:	mov	r0, #0
   1dff0:	cmp	r0, r7, lsr #12
   1dff4:	beq	1e2c0 <__assert_fail@plt+0xc9d4>
   1dff8:	movw	r1, #1459	; 0x5b3
   1dffc:	mov	r0, r4
   1e000:	movt	r1, #2
   1e004:	bl	118d4 <strspn@plt>
   1e008:	cmp	r0, #0
   1e00c:	beq	1e088 <__assert_fail@plt+0xc79c>
   1e010:	mov	r6, r0
   1e014:	cmp	r0, #2
   1e018:	bne	1e094 <__assert_fail@plt+0xc7a8>
   1e01c:	add	r0, r4, #3
   1e020:	sub	r2, r7, #3
   1e024:	mov	r1, #47	; 0x2f
   1e028:	mov	r8, #47	; 0x2f
   1e02c:	bl	117a8 <memchr@plt>
   1e030:	cmp	r0, #0
   1e034:	beq	1e200 <__assert_fail@plt+0xc914>
   1e038:	mov	r6, r0
   1e03c:	mov	r0, #0
   1e040:	mov	r1, r4
   1e044:	mov	r2, #18688	; 0x4900
   1e048:	strb	r0, [r6]
   1e04c:	mvn	r0, #99	; 0x63
   1e050:	bl	11730 <openat64@plt>
   1e054:	cmp	r0, #0
   1e058:	strb	r8, [r6]
   1e05c:	blt	1e1f8 <__assert_fail@plt+0xc90c>
   1e060:	movw	r1, #1459	; 0x5b3
   1e064:	add	r6, r6, #1
   1e068:	mov	r5, r0
   1e06c:	movt	r1, #2
   1e070:	mov	r0, r6
   1e074:	bl	118d4 <strspn@plt>
   1e078:	add	r6, r6, r0
   1e07c:	b	1e0b8 <__assert_fail@plt+0xc7cc>
   1e080:	mov	r6, #0
   1e084:	b	1e254 <__assert_fail@plt+0xc968>
   1e088:	mvn	r5, #99	; 0x63
   1e08c:	mov	r6, r4
   1e090:	b	1e0b8 <__assert_fail@plt+0xc7cc>
   1e094:	movw	r1, #1459	; 0x5b3
   1e098:	mvn	r0, #99	; 0x63
   1e09c:	mov	r2, #18688	; 0x4900
   1e0a0:	movt	r1, #2
   1e0a4:	bl	11730 <openat64@plt>
   1e0a8:	cmp	r0, #0
   1e0ac:	blt	1e1f8 <__assert_fail@plt+0xc90c>
   1e0b0:	mov	r5, r0
   1e0b4:	add	r6, r4, r6
   1e0b8:	ldrb	r0, [r6]
   1e0bc:	cmp	r0, #47	; 0x2f
   1e0c0:	beq	1e2e0 <__assert_fail@plt+0xc9f4>
   1e0c4:	add	sl, r4, r7
   1e0c8:	cmp	r6, sl
   1e0cc:	bhi	1e300 <__assert_fail@plt+0xca14>
   1e0d0:	sub	r0, sl, r6
   1e0d4:	str	r9, [sp]
   1e0d8:	cmp	r0, #4096	; 0x1000
   1e0dc:	blt	1e1b4 <__assert_fail@plt+0xc8c8>
   1e0e0:	movw	r9, #1459	; 0x5b3
   1e0e4:	mov	r8, #0
   1e0e8:	movt	r9, #2
   1e0ec:	mov	r0, r6
   1e0f0:	mov	r1, #47	; 0x2f
   1e0f4:	mov	r2, #4096	; 0x1000
   1e0f8:	bl	1173c <memrchr@plt>
   1e0fc:	cmp	r0, #0
   1e100:	beq	1e20c <__assert_fail@plt+0xc920>
   1e104:	mov	r4, r0
   1e108:	strb	r8, [r0], -r6
   1e10c:	cmp	r0, #4096	; 0x1000
   1e110:	bge	1e260 <__assert_fail@plt+0xc974>
   1e114:	mov	r0, r5
   1e118:	mov	r1, r6
   1e11c:	mov	r2, #18688	; 0x4900
   1e120:	bl	11730 <openat64@plt>
   1e124:	cmp	r0, #0
   1e128:	blt	1e21c <__assert_fail@plt+0xc930>
   1e12c:	mov	r7, r0
   1e130:	cmp	r5, #0
   1e134:	blt	1e148 <__assert_fail@plt+0xc85c>
   1e138:	mov	r0, r5
   1e13c:	bl	118c8 <close@plt>
   1e140:	cmp	r0, #0
   1e144:	bne	1e280 <__assert_fail@plt+0xc994>
   1e148:	mov	r0, #47	; 0x2f
   1e14c:	mov	r1, r9
   1e150:	strb	r0, [r4], #1
   1e154:	mov	r0, r4
   1e158:	bl	118d4 <strspn@plt>
   1e15c:	add	r6, r4, r0
   1e160:	mov	r5, r7
   1e164:	sub	r0, sl, r6
   1e168:	cmp	r0, #4096	; 0x1000
   1e16c:	bge	1e0ec <__assert_fail@plt+0xc800>
   1e170:	cmp	r6, sl
   1e174:	bcs	1e1c0 <__assert_fail@plt+0xc8d4>
   1e178:	mov	r0, r7
   1e17c:	mov	r1, r6
   1e180:	mov	r2, #18688	; 0x4900
   1e184:	bl	11730 <openat64@plt>
   1e188:	ldr	r9, [sp]
   1e18c:	cmp	r0, #0
   1e190:	blt	1e22c <__assert_fail@plt+0xc940>
   1e194:	mov	r5, r0
   1e198:	cmp	r7, #0
   1e19c:	blt	1e1c8 <__assert_fail@plt+0xc8dc>
   1e1a0:	mov	r0, r7
   1e1a4:	bl	118c8 <close@plt>
   1e1a8:	cmp	r0, #0
   1e1ac:	beq	1e1c8 <__assert_fail@plt+0xc8dc>
   1e1b0:	b	1e280 <__assert_fail@plt+0xc994>
   1e1b4:	mov	r7, r5
   1e1b8:	cmp	r6, sl
   1e1bc:	bcc	1e178 <__assert_fail@plt+0xc88c>
   1e1c0:	ldr	r9, [sp]
   1e1c4:	mov	r5, r7
   1e1c8:	mov	r0, r5
   1e1cc:	bl	11850 <fchdir@plt>
   1e1d0:	cmp	r0, #0
   1e1d4:	bne	1e230 <__assert_fail@plt+0xc944>
   1e1d8:	mov	r6, #0
   1e1dc:	cmp	r5, #0
   1e1e0:	blt	1e254 <__assert_fail@plt+0xc968>
   1e1e4:	mov	r0, r5
   1e1e8:	bl	118c8 <close@plt>
   1e1ec:	cmp	r0, #0
   1e1f0:	beq	1e254 <__assert_fail@plt+0xc968>
   1e1f4:	b	1e280 <__assert_fail@plt+0xc994>
   1e1f8:	ldr	r4, [r9]
   1e1fc:	b	1e24c <__assert_fail@plt+0xc960>
   1e200:	mov	r0, #36	; 0x24
   1e204:	str	r0, [r9]
   1e208:	b	1e250 <__assert_fail@plt+0xc964>
   1e20c:	ldr	r1, [sp]
   1e210:	mov	r0, #36	; 0x24
   1e214:	str	r0, [r1]
   1e218:	b	1e250 <__assert_fail@plt+0xc964>
   1e21c:	ldr	r9, [sp]
   1e220:	mov	r0, #47	; 0x2f
   1e224:	strb	r0, [r4]
   1e228:	b	1e230 <__assert_fail@plt+0xc944>
   1e22c:	mov	r5, r7
   1e230:	ldr	r4, [r9]
   1e234:	cmp	r5, #0
   1e238:	blt	1e24c <__assert_fail@plt+0xc960>
   1e23c:	mov	r0, r5
   1e240:	bl	118c8 <close@plt>
   1e244:	cmp	r0, #0
   1e248:	bne	1e280 <__assert_fail@plt+0xc994>
   1e24c:	str	r4, [r9]
   1e250:	mvn	r6, #0
   1e254:	mov	r0, r6
   1e258:	sub	sp, fp, #28
   1e25c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e260:	movw	r0, #1950	; 0x79e
   1e264:	movw	r1, #1871	; 0x74f
   1e268:	movw	r3, #1888	; 0x760
   1e26c:	mov	r2, #179	; 0xb3
   1e270:	movt	r0, #2
   1e274:	movt	r1, #2
   1e278:	movt	r3, #2
   1e27c:	bl	118ec <__assert_fail@plt>
   1e280:	movw	r0, #1969	; 0x7b1
   1e284:	movw	r1, #1871	; 0x74f
   1e288:	movw	r3, #1982	; 0x7be
   1e28c:	mov	r2, #64	; 0x40
   1e290:	movt	r0, #2
   1e294:	movt	r1, #2
   1e298:	movt	r3, #2
   1e29c:	bl	118ec <__assert_fail@plt>
   1e2a0:	movw	r0, #1863	; 0x747
   1e2a4:	movw	r1, #1871	; 0x74f
   1e2a8:	movw	r3, #1888	; 0x760
   1e2ac:	mov	r2, #126	; 0x7e
   1e2b0:	movt	r0, #2
   1e2b4:	movt	r1, #2
   1e2b8:	movt	r3, #2
   1e2bc:	bl	118ec <__assert_fail@plt>
   1e2c0:	movw	r0, #1911	; 0x777
   1e2c4:	movw	r1, #1871	; 0x74f
   1e2c8:	movw	r3, #1888	; 0x760
   1e2cc:	mov	r2, #127	; 0x7f
   1e2d0:	movt	r0, #2
   1e2d4:	movt	r1, #2
   1e2d8:	movt	r3, #2
   1e2dc:	bl	118ec <__assert_fail@plt>
   1e2e0:	movw	r0, #1923	; 0x783
   1e2e4:	movw	r1, #1871	; 0x74f
   1e2e8:	movw	r3, #1888	; 0x760
   1e2ec:	mov	r2, #162	; 0xa2
   1e2f0:	movt	r0, #2
   1e2f4:	movt	r1, #2
   1e2f8:	movt	r3, #2
   1e2fc:	bl	118ec <__assert_fail@plt>
   1e300:	movw	r0, #1935	; 0x78f
   1e304:	movw	r1, #1871	; 0x74f
   1e308:	movw	r3, #1888	; 0x760
   1e30c:	mov	r2, #163	; 0xa3
   1e310:	movt	r0, #2
   1e314:	movt	r1, #2
   1e318:	movt	r3, #2
   1e31c:	bl	118ec <__assert_fail@plt>
   1e320:	push	{r4, r5, r6, sl, fp, lr}
   1e324:	add	fp, sp, #16
   1e328:	mov	r4, r0
   1e32c:	bl	11658 <__fpending@plt>
   1e330:	ldr	r6, [r4]
   1e334:	mov	r5, r0
   1e338:	mov	r0, r4
   1e33c:	bl	1e3a4 <__assert_fail@plt+0xcab8>
   1e340:	tst	r6, #32
   1e344:	bne	1e37c <__assert_fail@plt+0xca90>
   1e348:	cmp	r0, #0
   1e34c:	mov	r4, r0
   1e350:	mvnne	r4, #0
   1e354:	cmp	r5, #0
   1e358:	bne	1e388 <__assert_fail@plt+0xca9c>
   1e35c:	cmp	r0, #0
   1e360:	beq	1e388 <__assert_fail@plt+0xca9c>
   1e364:	bl	11748 <__errno_location@plt>
   1e368:	ldr	r0, [r0]
   1e36c:	subs	r4, r0, #9
   1e370:	mvnne	r4, #0
   1e374:	mov	r0, r4
   1e378:	pop	{r4, r5, r6, sl, fp, pc}
   1e37c:	mvn	r4, #0
   1e380:	cmp	r0, #0
   1e384:	beq	1e390 <__assert_fail@plt+0xcaa4>
   1e388:	mov	r0, r4
   1e38c:	pop	{r4, r5, r6, sl, fp, pc}
   1e390:	bl	11748 <__errno_location@plt>
   1e394:	mov	r1, #0
   1e398:	str	r1, [r0]
   1e39c:	mov	r0, r4
   1e3a0:	pop	{r4, r5, r6, sl, fp, pc}
   1e3a4:	push	{r4, r5, r6, sl, fp, lr}
   1e3a8:	add	fp, sp, #16
   1e3ac:	sub	sp, sp, #8
   1e3b0:	mov	r4, r0
   1e3b4:	bl	11790 <fileno@plt>
   1e3b8:	cmn	r0, #1
   1e3bc:	ble	1e430 <__assert_fail@plt+0xcb44>
   1e3c0:	mov	r0, r4
   1e3c4:	bl	116d0 <__freading@plt>
   1e3c8:	cmp	r0, #0
   1e3cc:	beq	1e3f8 <__assert_fail@plt+0xcb0c>
   1e3d0:	mov	r0, r4
   1e3d4:	bl	11790 <fileno@plt>
   1e3d8:	mov	r1, #1
   1e3dc:	mov	r2, #0
   1e3e0:	mov	r3, #0
   1e3e4:	str	r1, [sp]
   1e3e8:	bl	11634 <lseek64@plt>
   1e3ec:	and	r0, r0, r1
   1e3f0:	cmn	r0, #1
   1e3f4:	beq	1e430 <__assert_fail@plt+0xcb44>
   1e3f8:	mov	r0, r4
   1e3fc:	bl	1e488 <__assert_fail@plt+0xcb9c>
   1e400:	cmp	r0, #0
   1e404:	beq	1e430 <__assert_fail@plt+0xcb44>
   1e408:	bl	11748 <__errno_location@plt>
   1e40c:	ldr	r6, [r0]
   1e410:	mov	r5, r0
   1e414:	mov	r0, r4
   1e418:	bl	117b4 <fclose@plt>
   1e41c:	cmp	r6, #0
   1e420:	strne	r6, [r5]
   1e424:	mvnne	r0, #0
   1e428:	sub	sp, fp, #16
   1e42c:	pop	{r4, r5, r6, sl, fp, pc}
   1e430:	mov	r0, r4
   1e434:	sub	sp, fp, #16
   1e438:	pop	{r4, r5, r6, sl, fp, lr}
   1e43c:	b	117b4 <fclose@plt>
   1e440:	sub	sp, sp, #8
   1e444:	push	{fp, lr}
   1e448:	mov	fp, sp
   1e44c:	sub	sp, sp, #8
   1e450:	str	r2, [fp, #8]
   1e454:	mov	r2, #0
   1e458:	tst	r1, #64	; 0x40
   1e45c:	str	r3, [fp, #12]
   1e460:	addne	r2, fp, #8
   1e464:	orrne	r2, r2, #4
   1e468:	strne	r2, [sp, #4]
   1e46c:	ldrne	r2, [fp, #8]
   1e470:	bl	11694 <open64@plt>
   1e474:	bl	1e740 <__assert_fail@plt+0xce54>
   1e478:	mov	sp, fp
   1e47c:	pop	{fp, lr}
   1e480:	add	sp, sp, #8
   1e484:	bx	lr
   1e488:	push	{r4, sl, fp, lr}
   1e48c:	add	fp, sp, #8
   1e490:	sub	sp, sp, #8
   1e494:	mov	r4, r0
   1e498:	cmp	r0, #0
   1e49c:	beq	1e4b8 <__assert_fail@plt+0xcbcc>
   1e4a0:	mov	r0, r4
   1e4a4:	bl	116d0 <__freading@plt>
   1e4a8:	cmp	r0, #0
   1e4ac:	ldrbne	r0, [r4, #1]
   1e4b0:	tstne	r0, #1
   1e4b4:	bne	1e4c8 <__assert_fail@plt+0xcbdc>
   1e4b8:	mov	r0, r4
   1e4bc:	sub	sp, fp, #8
   1e4c0:	pop	{r4, sl, fp, lr}
   1e4c4:	b	1152c <fflush@plt>
   1e4c8:	mov	r0, #1
   1e4cc:	mov	r2, #0
   1e4d0:	mov	r3, #0
   1e4d4:	str	r0, [sp]
   1e4d8:	mov	r0, r4
   1e4dc:	bl	1e4e4 <__assert_fail@plt+0xcbf8>
   1e4e0:	b	1e4b8 <__assert_fail@plt+0xcbcc>
   1e4e4:	push	{r4, r5, r6, r7, fp, lr}
   1e4e8:	add	fp, sp, #16
   1e4ec:	sub	sp, sp, #8
   1e4f0:	mov	r4, r0
   1e4f4:	ldr	r0, [r0, #4]
   1e4f8:	mov	r5, r3
   1e4fc:	mov	r6, r2
   1e500:	ldr	r1, [r4, #8]
   1e504:	cmp	r1, r0
   1e508:	bne	1e524 <__assert_fail@plt+0xcc38>
   1e50c:	ldrd	r0, [r4, #16]
   1e510:	cmp	r1, r0
   1e514:	bne	1e524 <__assert_fail@plt+0xcc38>
   1e518:	ldr	r0, [r4, #36]	; 0x24
   1e51c:	cmp	r0, #0
   1e520:	beq	1e53c <__assert_fail@plt+0xcc50>
   1e524:	mov	r0, r4
   1e528:	mov	r2, r6
   1e52c:	mov	r3, r5
   1e530:	sub	sp, fp, #16
   1e534:	pop	{r4, r5, r6, r7, fp, lr}
   1e538:	b	117c0 <fseeko64@plt>
   1e53c:	ldr	r7, [fp, #8]
   1e540:	mov	r0, r4
   1e544:	bl	11790 <fileno@plt>
   1e548:	mov	r2, r6
   1e54c:	mov	r3, r5
   1e550:	str	r7, [sp]
   1e554:	bl	11634 <lseek64@plt>
   1e558:	and	r2, r0, r1
   1e55c:	cmn	r2, #1
   1e560:	mvneq	r0, #0
   1e564:	subeq	sp, fp, #16
   1e568:	popeq	{r4, r5, r6, r7, fp, pc}
   1e56c:	strd	r0, [r4, #80]	; 0x50
   1e570:	ldr	r0, [r4]
   1e574:	bic	r0, r0, #16
   1e578:	str	r0, [r4]
   1e57c:	mov	r0, #0
   1e580:	sub	sp, fp, #16
   1e584:	pop	{r4, r5, r6, r7, fp, pc}
   1e588:	push	{r4, sl, fp, lr}
   1e58c:	add	fp, sp, #8
   1e590:	sub	sp, sp, #264	; 0x108
   1e594:	add	r1, sp, #7
   1e598:	movw	r2, #257	; 0x101
   1e59c:	bl	1e69c <__assert_fail@plt+0xcdb0>
   1e5a0:	mov	r4, #0
   1e5a4:	cmp	r0, #0
   1e5a8:	bne	1e5e0 <__assert_fail@plt+0xccf4>
   1e5ac:	movw	r1, #2019	; 0x7e3
   1e5b0:	add	r0, sp, #7
   1e5b4:	movt	r1, #2
   1e5b8:	bl	11520 <strcmp@plt>
   1e5bc:	cmp	r0, #0
   1e5c0:	beq	1e5e0 <__assert_fail@plt+0xccf4>
   1e5c4:	movw	r1, #2021	; 0x7e5
   1e5c8:	add	r0, sp, #7
   1e5cc:	movt	r1, #2
   1e5d0:	bl	11520 <strcmp@plt>
   1e5d4:	mov	r4, r0
   1e5d8:	cmp	r0, #0
   1e5dc:	movwne	r4, #1
   1e5e0:	mov	r0, r4
   1e5e4:	sub	sp, fp, #8
   1e5e8:	pop	{r4, sl, fp, pc}
   1e5ec:	ldrb	r2, [r0]
   1e5f0:	cmp	r2, #0
   1e5f4:	beq	1e618 <__assert_fail@plt+0xcd2c>
   1e5f8:	add	r3, r0, #1
   1e5fc:	mov	r0, #0
   1e600:	ror	r0, r0, #23
   1e604:	uxtab	r0, r0, r2
   1e608:	ldrb	r2, [r3], #1
   1e60c:	cmp	r2, #0
   1e610:	bne	1e600 <__assert_fail@plt+0xcd14>
   1e614:	b	1e61c <__assert_fail@plt+0xcd30>
   1e618:	mov	r0, #0
   1e61c:	udiv	r2, r0, r1
   1e620:	mls	r0, r2, r1, r0
   1e624:	bx	lr
   1e628:	push	{fp, lr}
   1e62c:	mov	fp, sp
   1e630:	mov	r0, #14
   1e634:	bl	11820 <nl_langinfo@plt>
   1e638:	movw	r1, #64223	; 0xfadf
   1e63c:	cmp	r0, #0
   1e640:	movt	r1, #1
   1e644:	movne	r1, r0
   1e648:	movw	r0, #2027	; 0x7eb
   1e64c:	ldrb	r2, [r1]
   1e650:	movt	r0, #2
   1e654:	cmp	r2, #0
   1e658:	movne	r0, r1
   1e65c:	pop	{fp, pc}
   1e660:	cmp	r2, #0
   1e664:	beq	1e694 <__assert_fail@plt+0xcda8>
   1e668:	mvn	r3, #0
   1e66c:	udiv	r3, r3, r2
   1e670:	cmp	r3, r1
   1e674:	bcs	1e694 <__assert_fail@plt+0xcda8>
   1e678:	push	{fp, lr}
   1e67c:	mov	fp, sp
   1e680:	bl	11748 <__errno_location@plt>
   1e684:	mov	r1, #12
   1e688:	str	r1, [r0]
   1e68c:	mov	r0, #0
   1e690:	pop	{fp, pc}
   1e694:	mul	r1, r2, r1
   1e698:	b	1cf30 <__assert_fail@plt+0xb644>
   1e69c:	push	{r4, r5, r6, r7, fp, lr}
   1e6a0:	add	fp, sp, #16
   1e6a4:	mov	r4, r1
   1e6a8:	mov	r1, #0
   1e6ac:	mov	r6, r2
   1e6b0:	bl	117f0 <setlocale@plt>
   1e6b4:	cmp	r0, #0
   1e6b8:	beq	1e6e8 <__assert_fail@plt+0xcdfc>
   1e6bc:	mov	r7, r0
   1e6c0:	bl	11718 <strlen@plt>
   1e6c4:	cmp	r0, r6
   1e6c8:	bcs	1e708 <__assert_fail@plt+0xce1c>
   1e6cc:	add	r2, r0, #1
   1e6d0:	mov	r0, r4
   1e6d4:	mov	r1, r7
   1e6d8:	bl	11574 <memcpy@plt>
   1e6dc:	mov	r5, #0
   1e6e0:	mov	r0, r5
   1e6e4:	pop	{r4, r5, r6, r7, fp, pc}
   1e6e8:	cmp	r6, #0
   1e6ec:	mov	r5, #22
   1e6f0:	movne	r0, #0
   1e6f4:	strbne	r0, [r4]
   1e6f8:	movne	r0, r5
   1e6fc:	popne	{r4, r5, r6, r7, fp, pc}
   1e700:	mov	r0, r5
   1e704:	pop	{r4, r5, r6, r7, fp, pc}
   1e708:	mov	r5, #34	; 0x22
   1e70c:	cmp	r6, #0
   1e710:	beq	1e730 <__assert_fail@plt+0xce44>
   1e714:	sub	r6, r6, #1
   1e718:	mov	r0, r4
   1e71c:	mov	r1, r7
   1e720:	mov	r2, r6
   1e724:	bl	11574 <memcpy@plt>
   1e728:	mov	r0, #0
   1e72c:	strb	r0, [r4, r6]
   1e730:	mov	r0, r5
   1e734:	pop	{r4, r5, r6, r7, fp, pc}
   1e738:	mov	r1, #0
   1e73c:	b	117f0 <setlocale@plt>
   1e740:	push	{r4, r5, r6, r7, fp, lr}
   1e744:	add	fp, sp, #16
   1e748:	mov	r4, r0
   1e74c:	cmp	r0, #2
   1e750:	movhi	r0, r4
   1e754:	pophi	{r4, r5, r6, r7, fp, pc}
   1e758:	mov	r0, r4
   1e75c:	bl	1e784 <__assert_fail@plt+0xce98>
   1e760:	mov	r5, r0
   1e764:	bl	11748 <__errno_location@plt>
   1e768:	ldr	r7, [r0]
   1e76c:	mov	r6, r0
   1e770:	mov	r0, r4
   1e774:	bl	118c8 <close@plt>
   1e778:	mov	r0, r5
   1e77c:	str	r7, [r6]
   1e780:	pop	{r4, r5, r6, r7, fp, pc}
   1e784:	mov	r1, #0
   1e788:	mov	r2, #3
   1e78c:	b	1e790 <__assert_fail@plt+0xcea4>
   1e790:	sub	sp, sp, #8
   1e794:	push	{r4, r5, r6, r7, fp, lr}
   1e798:	add	fp, sp, #16
   1e79c:	sub	sp, sp, #8
   1e7a0:	mov	r5, r0
   1e7a4:	add	r0, fp, #8
   1e7a8:	cmp	r1, #11
   1e7ac:	str	r3, [fp, #12]
   1e7b0:	str	r2, [fp, #8]
   1e7b4:	str	r0, [sp, #4]
   1e7b8:	bhi	1e7f4 <__assert_fail@plt+0xcf08>
   1e7bc:	mov	r0, #1
   1e7c0:	movw	r2, #1300	; 0x514
   1e7c4:	tst	r2, r0, lsl r1
   1e7c8:	bne	1e8b4 <__assert_fail@plt+0xcfc8>
   1e7cc:	movw	r2, #2570	; 0xa0a
   1e7d0:	tst	r2, r0, lsl r1
   1e7d4:	bne	1e81c <__assert_fail@plt+0xcf30>
   1e7d8:	cmp	r1, #0
   1e7dc:	bne	1e7f4 <__assert_fail@plt+0xcf08>
   1e7e0:	ldr	r0, [sp, #4]
   1e7e4:	add	r1, r0, #4
   1e7e8:	str	r1, [sp, #4]
   1e7ec:	mov	r1, #0
   1e7f0:	b	1e8c0 <__assert_fail@plt+0xcfd4>
   1e7f4:	sub	r0, r1, #1024	; 0x400
   1e7f8:	cmp	r0, #10
   1e7fc:	bhi	1e8b4 <__assert_fail@plt+0xcfc8>
   1e800:	mov	r2, #1
   1e804:	movw	r3, #645	; 0x285
   1e808:	tst	r3, r2, lsl r0
   1e80c:	bne	1e8b4 <__assert_fail@plt+0xcfc8>
   1e810:	movw	r3, #1282	; 0x502
   1e814:	tst	r3, r2, lsl r0
   1e818:	beq	1e828 <__assert_fail@plt+0xcf3c>
   1e81c:	mov	r0, r5
   1e820:	bl	117d8 <fcntl64@plt>
   1e824:	b	1e8cc <__assert_fail@plt+0xcfe0>
   1e828:	cmp	r0, #6
   1e82c:	bne	1e8b4 <__assert_fail@plt+0xcfc8>
   1e830:	ldr	r0, [sp, #4]
   1e834:	movw	r7, #5368	; 0x14f8
   1e838:	movt	r7, #3
   1e83c:	add	r1, r0, #4
   1e840:	str	r1, [sp, #4]
   1e844:	ldr	r6, [r0]
   1e848:	ldr	r0, [r7]
   1e84c:	cmp	r0, #0
   1e850:	blt	1e8f0 <__assert_fail@plt+0xd004>
   1e854:	mov	r0, r5
   1e858:	movw	r1, #1030	; 0x406
   1e85c:	mov	r2, r6
   1e860:	bl	117d8 <fcntl64@plt>
   1e864:	mov	r4, r0
   1e868:	cmn	r0, #1
   1e86c:	bgt	1e8e4 <__assert_fail@plt+0xcff8>
   1e870:	bl	11748 <__errno_location@plt>
   1e874:	ldr	r0, [r0]
   1e878:	cmp	r0, #22
   1e87c:	bne	1e8e4 <__assert_fail@plt+0xcff8>
   1e880:	mov	r0, r5
   1e884:	mov	r1, #0
   1e888:	mov	r2, r6
   1e88c:	bl	117d8 <fcntl64@plt>
   1e890:	mov	r4, r0
   1e894:	cmp	r0, #0
   1e898:	blt	1e8d0 <__assert_fail@plt+0xcfe4>
   1e89c:	mvn	r0, #0
   1e8a0:	str	r0, [r7]
   1e8a4:	mov	r0, #1
   1e8a8:	cmp	r0, #0
   1e8ac:	bne	1e91c <__assert_fail@plt+0xd030>
   1e8b0:	b	1e8d0 <__assert_fail@plt+0xcfe4>
   1e8b4:	ldr	r0, [sp, #4]
   1e8b8:	add	r2, r0, #4
   1e8bc:	str	r2, [sp, #4]
   1e8c0:	ldr	r2, [r0]
   1e8c4:	mov	r0, r5
   1e8c8:	bl	117d8 <fcntl64@plt>
   1e8cc:	mov	r4, r0
   1e8d0:	mov	r0, r4
   1e8d4:	sub	sp, fp, #16
   1e8d8:	pop	{r4, r5, r6, r7, fp, lr}
   1e8dc:	add	sp, sp, #8
   1e8e0:	bx	lr
   1e8e4:	mov	r0, #1
   1e8e8:	str	r0, [r7]
   1e8ec:	b	1e8d0 <__assert_fail@plt+0xcfe4>
   1e8f0:	mov	r0, r5
   1e8f4:	mov	r1, #0
   1e8f8:	mov	r2, r6
   1e8fc:	bl	117d8 <fcntl64@plt>
   1e900:	mov	r4, r0
   1e904:	ldr	r0, [r7]
   1e908:	add	r0, r0, #1
   1e90c:	clz	r0, r0
   1e910:	lsr	r0, r0, #5
   1e914:	cmp	r0, #0
   1e918:	beq	1e8d0 <__assert_fail@plt+0xcfe4>
   1e91c:	cmp	r4, #0
   1e920:	blt	1e8d0 <__assert_fail@plt+0xcfe4>
   1e924:	mov	r0, r4
   1e928:	mov	r1, #1
   1e92c:	bl	117d8 <fcntl64@plt>
   1e930:	cmp	r0, #0
   1e934:	blt	1e950 <__assert_fail@plt+0xd064>
   1e938:	orr	r2, r0, #1
   1e93c:	mov	r0, r4
   1e940:	mov	r1, #2
   1e944:	bl	117d8 <fcntl64@plt>
   1e948:	cmn	r0, #1
   1e94c:	bne	1e8d0 <__assert_fail@plt+0xcfe4>
   1e950:	bl	11748 <__errno_location@plt>
   1e954:	ldr	r6, [r0]
   1e958:	mov	r5, r0
   1e95c:	mov	r0, r4
   1e960:	bl	118c8 <close@plt>
   1e964:	str	r6, [r5]
   1e968:	mvn	r4, #0
   1e96c:	b	1e8d0 <__assert_fail@plt+0xcfe4>
   1e970:	eor	r1, r1, #-2147483648	; 0x80000000
   1e974:	b	1e97c <__assert_fail@plt+0xd090>
   1e978:	eor	r3, r3, #-2147483648	; 0x80000000
   1e97c:	push	{r4, r5, lr}
   1e980:	lsl	r4, r1, #1
   1e984:	lsl	r5, r3, #1
   1e988:	teq	r4, r5
   1e98c:	teqeq	r0, r2
   1e990:	orrsne	ip, r4, r0
   1e994:	orrsne	ip, r5, r2
   1e998:	mvnsne	ip, r4, asr #21
   1e99c:	mvnsne	ip, r5, asr #21
   1e9a0:	beq	1eb8c <__assert_fail@plt+0xd2a0>
   1e9a4:	lsr	r4, r4, #21
   1e9a8:	rsbs	r5, r4, r5, lsr #21
   1e9ac:	rsblt	r5, r5, #0
   1e9b0:	ble	1e9d0 <__assert_fail@plt+0xd0e4>
   1e9b4:	add	r4, r4, r5
   1e9b8:	eor	r2, r0, r2
   1e9bc:	eor	r3, r1, r3
   1e9c0:	eor	r0, r2, r0
   1e9c4:	eor	r1, r3, r1
   1e9c8:	eor	r2, r0, r2
   1e9cc:	eor	r3, r1, r3
   1e9d0:	cmp	r5, #54	; 0x36
   1e9d4:	pophi	{r4, r5, pc}
   1e9d8:	tst	r1, #-2147483648	; 0x80000000
   1e9dc:	lsl	r1, r1, #12
   1e9e0:	mov	ip, #1048576	; 0x100000
   1e9e4:	orr	r1, ip, r1, lsr #12
   1e9e8:	beq	1e9f4 <__assert_fail@plt+0xd108>
   1e9ec:	rsbs	r0, r0, #0
   1e9f0:	rsc	r1, r1, #0
   1e9f4:	tst	r3, #-2147483648	; 0x80000000
   1e9f8:	lsl	r3, r3, #12
   1e9fc:	orr	r3, ip, r3, lsr #12
   1ea00:	beq	1ea0c <__assert_fail@plt+0xd120>
   1ea04:	rsbs	r2, r2, #0
   1ea08:	rsc	r3, r3, #0
   1ea0c:	teq	r4, r5
   1ea10:	beq	1eb74 <__assert_fail@plt+0xd288>
   1ea14:	sub	r4, r4, #1
   1ea18:	rsbs	lr, r5, #32
   1ea1c:	blt	1ea38 <__assert_fail@plt+0xd14c>
   1ea20:	lsl	ip, r2, lr
   1ea24:	adds	r0, r0, r2, lsr r5
   1ea28:	adc	r1, r1, #0
   1ea2c:	adds	r0, r0, r3, lsl lr
   1ea30:	adcs	r1, r1, r3, asr r5
   1ea34:	b	1ea54 <__assert_fail@plt+0xd168>
   1ea38:	sub	r5, r5, #32
   1ea3c:	add	lr, lr, #32
   1ea40:	cmp	r2, #1
   1ea44:	lsl	ip, r3, lr
   1ea48:	orrcs	ip, ip, #2
   1ea4c:	adds	r0, r0, r3, asr r5
   1ea50:	adcs	r1, r1, r3, asr #31
   1ea54:	and	r5, r1, #-2147483648	; 0x80000000
   1ea58:	bpl	1ea68 <__assert_fail@plt+0xd17c>
   1ea5c:	rsbs	ip, ip, #0
   1ea60:	rscs	r0, r0, #0
   1ea64:	rsc	r1, r1, #0
   1ea68:	cmp	r1, #1048576	; 0x100000
   1ea6c:	bcc	1eaac <__assert_fail@plt+0xd1c0>
   1ea70:	cmp	r1, #2097152	; 0x200000
   1ea74:	bcc	1ea94 <__assert_fail@plt+0xd1a8>
   1ea78:	lsrs	r1, r1, #1
   1ea7c:	rrxs	r0, r0
   1ea80:	rrx	ip, ip
   1ea84:	add	r4, r4, #1
   1ea88:	lsl	r2, r4, #21
   1ea8c:	cmn	r2, #4194304	; 0x400000
   1ea90:	bcs	1ebec <__assert_fail@plt+0xd300>
   1ea94:	cmp	ip, #-2147483648	; 0x80000000
   1ea98:	lsrseq	ip, r0, #1
   1ea9c:	adcs	r0, r0, #0
   1eaa0:	adc	r1, r1, r4, lsl #20
   1eaa4:	orr	r1, r1, r5
   1eaa8:	pop	{r4, r5, pc}
   1eaac:	lsls	ip, ip, #1
   1eab0:	adcs	r0, r0, r0
   1eab4:	adc	r1, r1, r1
   1eab8:	tst	r1, #1048576	; 0x100000
   1eabc:	sub	r4, r4, #1
   1eac0:	bne	1ea94 <__assert_fail@plt+0xd1a8>
   1eac4:	teq	r1, #0
   1eac8:	moveq	r1, r0
   1eacc:	moveq	r0, #0
   1ead0:	clz	r3, r1
   1ead4:	addeq	r3, r3, #32
   1ead8:	sub	r3, r3, #11
   1eadc:	subs	r2, r3, #32
   1eae0:	bge	1eb04 <__assert_fail@plt+0xd218>
   1eae4:	adds	r2, r2, #12
   1eae8:	ble	1eb00 <__assert_fail@plt+0xd214>
   1eaec:	add	ip, r2, #20
   1eaf0:	rsb	r2, r2, #12
   1eaf4:	lsl	r0, r1, ip
   1eaf8:	lsr	r1, r1, r2
   1eafc:	b	1eb14 <__assert_fail@plt+0xd228>
   1eb00:	add	r2, r2, #20
   1eb04:	rsble	ip, r2, #32
   1eb08:	lsl	r1, r1, r2
   1eb0c:	orrle	r1, r1, r0, lsr ip
   1eb10:	lslle	r0, r0, r2
   1eb14:	subs	r4, r4, r3
   1eb18:	addge	r1, r1, r4, lsl #20
   1eb1c:	orrge	r1, r1, r5
   1eb20:	popge	{r4, r5, pc}
   1eb24:	mvn	r4, r4
   1eb28:	subs	r4, r4, #31
   1eb2c:	bge	1eb68 <__assert_fail@plt+0xd27c>
   1eb30:	adds	r4, r4, #12
   1eb34:	bgt	1eb50 <__assert_fail@plt+0xd264>
   1eb38:	add	r4, r4, #20
   1eb3c:	rsb	r2, r4, #32
   1eb40:	lsr	r0, r0, r4
   1eb44:	orr	r0, r0, r1, lsl r2
   1eb48:	orr	r1, r5, r1, lsr r4
   1eb4c:	pop	{r4, r5, pc}
   1eb50:	rsb	r4, r4, #12
   1eb54:	rsb	r2, r4, #32
   1eb58:	lsr	r0, r0, r2
   1eb5c:	orr	r0, r0, r1, lsl r4
   1eb60:	mov	r1, r5
   1eb64:	pop	{r4, r5, pc}
   1eb68:	lsr	r0, r1, r4
   1eb6c:	mov	r1, r5
   1eb70:	pop	{r4, r5, pc}
   1eb74:	teq	r4, #0
   1eb78:	eor	r3, r3, #1048576	; 0x100000
   1eb7c:	eoreq	r1, r1, #1048576	; 0x100000
   1eb80:	addeq	r4, r4, #1
   1eb84:	subne	r5, r5, #1
   1eb88:	b	1ea14 <__assert_fail@plt+0xd128>
   1eb8c:	mvns	ip, r4, asr #21
   1eb90:	mvnsne	ip, r5, asr #21
   1eb94:	beq	1ebfc <__assert_fail@plt+0xd310>
   1eb98:	teq	r4, r5
   1eb9c:	teqeq	r0, r2
   1eba0:	beq	1ebb4 <__assert_fail@plt+0xd2c8>
   1eba4:	orrs	ip, r4, r0
   1eba8:	moveq	r1, r3
   1ebac:	moveq	r0, r2
   1ebb0:	pop	{r4, r5, pc}
   1ebb4:	teq	r1, r3
   1ebb8:	movne	r1, #0
   1ebbc:	movne	r0, #0
   1ebc0:	popne	{r4, r5, pc}
   1ebc4:	lsrs	ip, r4, #21
   1ebc8:	bne	1ebdc <__assert_fail@plt+0xd2f0>
   1ebcc:	lsls	r0, r0, #1
   1ebd0:	adcs	r1, r1, r1
   1ebd4:	orrcs	r1, r1, #-2147483648	; 0x80000000
   1ebd8:	pop	{r4, r5, pc}
   1ebdc:	adds	r4, r4, #4194304	; 0x400000
   1ebe0:	addcc	r1, r1, #1048576	; 0x100000
   1ebe4:	popcc	{r4, r5, pc}
   1ebe8:	and	r5, r1, #-2147483648	; 0x80000000
   1ebec:	orr	r1, r5, #2130706432	; 0x7f000000
   1ebf0:	orr	r1, r1, #15728640	; 0xf00000
   1ebf4:	mov	r0, #0
   1ebf8:	pop	{r4, r5, pc}
   1ebfc:	mvns	ip, r4, asr #21
   1ec00:	movne	r1, r3
   1ec04:	movne	r0, r2
   1ec08:	mvnseq	ip, r5, asr #21
   1ec0c:	movne	r3, r1
   1ec10:	movne	r2, r0
   1ec14:	orrs	r4, r0, r1, lsl #12
   1ec18:	orrseq	r5, r2, r3, lsl #12
   1ec1c:	teqeq	r1, r3
   1ec20:	orrne	r1, r1, #524288	; 0x80000
   1ec24:	pop	{r4, r5, pc}
   1ec28:	teq	r0, #0
   1ec2c:	moveq	r1, #0
   1ec30:	bxeq	lr
   1ec34:	push	{r4, r5, lr}
   1ec38:	mov	r4, #1024	; 0x400
   1ec3c:	add	r4, r4, #50	; 0x32
   1ec40:	mov	r5, #0
   1ec44:	mov	r1, #0
   1ec48:	b	1eac4 <__assert_fail@plt+0xd1d8>
   1ec4c:	teq	r0, #0
   1ec50:	moveq	r1, #0
   1ec54:	bxeq	lr
   1ec58:	push	{r4, r5, lr}
   1ec5c:	mov	r4, #1024	; 0x400
   1ec60:	add	r4, r4, #50	; 0x32
   1ec64:	ands	r5, r0, #-2147483648	; 0x80000000
   1ec68:	rsbmi	r0, r0, #0
   1ec6c:	mov	r1, #0
   1ec70:	b	1eac4 <__assert_fail@plt+0xd1d8>
   1ec74:	lsls	r2, r0, #1
   1ec78:	asr	r1, r2, #3
   1ec7c:	rrx	r1, r1
   1ec80:	lsl	r0, r2, #28
   1ec84:	andsne	r3, r2, #-16777216	; 0xff000000
   1ec88:	teqne	r3, #-16777216	; 0xff000000
   1ec8c:	eorne	r1, r1, #939524096	; 0x38000000
   1ec90:	bxne	lr
   1ec94:	bics	r2, r2, #-16777216	; 0xff000000
   1ec98:	bxeq	lr
   1ec9c:	teq	r3, #-16777216	; 0xff000000
   1eca0:	orreq	r1, r1, #524288	; 0x80000
   1eca4:	bxeq	lr
   1eca8:	push	{r4, r5, lr}
   1ecac:	mov	r4, #896	; 0x380
   1ecb0:	and	r5, r1, #-2147483648	; 0x80000000
   1ecb4:	bic	r1, r1, #-2147483648	; 0x80000000
   1ecb8:	b	1eac4 <__assert_fail@plt+0xd1d8>
   1ecbc:	orrs	r2, r0, r1
   1ecc0:	bxeq	lr
   1ecc4:	push	{r4, r5, lr}
   1ecc8:	mov	r5, #0
   1eccc:	b	1ecec <__assert_fail@plt+0xd400>
   1ecd0:	orrs	r2, r0, r1
   1ecd4:	bxeq	lr
   1ecd8:	push	{r4, r5, lr}
   1ecdc:	ands	r5, r1, #-2147483648	; 0x80000000
   1ece0:	bpl	1ecec <__assert_fail@plt+0xd400>
   1ece4:	rsbs	r0, r0, #0
   1ece8:	rsc	r1, r1, #0
   1ecec:	mov	r4, #1024	; 0x400
   1ecf0:	add	r4, r4, #50	; 0x32
   1ecf4:	lsrs	ip, r1, #22
   1ecf8:	beq	1ea68 <__assert_fail@plt+0xd17c>
   1ecfc:	mov	r2, #3
   1ed00:	lsrs	ip, ip, #3
   1ed04:	addne	r2, r2, #3
   1ed08:	lsrs	ip, ip, #3
   1ed0c:	addne	r2, r2, #3
   1ed10:	add	r2, r2, ip, lsr #3
   1ed14:	rsb	r3, r2, #32
   1ed18:	lsl	ip, r0, r3
   1ed1c:	lsr	r0, r0, r2
   1ed20:	orr	r0, r0, r1, lsl r3
   1ed24:	lsr	r1, r1, r2
   1ed28:	add	r4, r4, r2
   1ed2c:	b	1ea68 <__assert_fail@plt+0xd17c>
   1ed30:	cmp	r3, #0
   1ed34:	cmpeq	r2, #0
   1ed38:	bne	1ed50 <__assert_fail@plt+0xd464>
   1ed3c:	cmp	r1, #0
   1ed40:	cmpeq	r0, #0
   1ed44:	mvnne	r1, #0
   1ed48:	mvnne	r0, #0
   1ed4c:	b	1ed6c <__assert_fail@plt+0xd480>
   1ed50:	sub	sp, sp, #8
   1ed54:	push	{sp, lr}
   1ed58:	bl	1edc0 <__assert_fail@plt+0xd4d4>
   1ed5c:	ldr	lr, [sp, #4]
   1ed60:	add	sp, sp, #8
   1ed64:	pop	{r2, r3}
   1ed68:	bx	lr
   1ed6c:	push	{r1, lr}
   1ed70:	mov	r0, #8
   1ed74:	bl	114fc <raise@plt>
   1ed78:	pop	{r1, pc}
   1ed7c:	andeq	r0, r0, r0
   1ed80:	vmov	d6, r0, r1
   1ed84:	vldr	d7, [pc, #36]	; 1edb0 <__assert_fail@plt+0xd4c4>
   1ed88:	vldr	d5, [pc, #40]	; 1edb8 <__assert_fail@plt+0xd4cc>
   1ed8c:	vmul.f64	d7, d6, d7
   1ed90:	vcvt.u32.f64	s14, d7
   1ed94:	vcvt.f64.u32	d4, s14
   1ed98:	vmov	r1, s14
   1ed9c:	vmls.f64	d6, d4, d5
   1eda0:	vcvt.u32.f64	s15, d6
   1eda4:	vmov	r0, s15
   1eda8:	bx	lr
   1edac:	nop			; (mov r0, r0)
   1edb0:	andeq	r0, r0, r0
   1edb4:	ldclcc	0, cr0, [r0]
   1edb8:	andeq	r0, r0, r0
   1edbc:	mvnsmi	r0, r0
   1edc0:	cmp	r1, r3
   1edc4:	cmpeq	r0, r2
   1edc8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1edcc:	mov	r4, r0
   1edd0:	movcc	r0, #0
   1edd4:	mov	r5, r1
   1edd8:	ldr	lr, [sp, #36]	; 0x24
   1eddc:	movcc	r1, r0
   1ede0:	bcc	1eedc <__assert_fail@plt+0xd5f0>
   1ede4:	cmp	r3, #0
   1ede8:	clzeq	ip, r2
   1edec:	clzne	ip, r3
   1edf0:	addeq	ip, ip, #32
   1edf4:	cmp	r5, #0
   1edf8:	clzeq	r1, r4
   1edfc:	addeq	r1, r1, #32
   1ee00:	clzne	r1, r5
   1ee04:	sub	ip, ip, r1
   1ee08:	sub	sl, ip, #32
   1ee0c:	lsl	r9, r3, ip
   1ee10:	rsb	fp, ip, #32
   1ee14:	orr	r9, r9, r2, lsl sl
   1ee18:	orr	r9, r9, r2, lsr fp
   1ee1c:	lsl	r8, r2, ip
   1ee20:	cmp	r5, r9
   1ee24:	cmpeq	r4, r8
   1ee28:	movcc	r0, #0
   1ee2c:	movcc	r1, r0
   1ee30:	bcc	1ee4c <__assert_fail@plt+0xd560>
   1ee34:	mov	r0, #1
   1ee38:	subs	r4, r4, r8
   1ee3c:	lsl	r1, r0, sl
   1ee40:	orr	r1, r1, r0, lsr fp
   1ee44:	lsl	r0, r0, ip
   1ee48:	sbc	r5, r5, r9
   1ee4c:	cmp	ip, #0
   1ee50:	beq	1eedc <__assert_fail@plt+0xd5f0>
   1ee54:	lsr	r6, r8, #1
   1ee58:	orr	r6, r6, r9, lsl #31
   1ee5c:	lsr	r7, r9, #1
   1ee60:	mov	r2, ip
   1ee64:	b	1ee88 <__assert_fail@plt+0xd59c>
   1ee68:	subs	r3, r4, r6
   1ee6c:	sbc	r8, r5, r7
   1ee70:	adds	r3, r3, r3
   1ee74:	adc	r8, r8, r8
   1ee78:	adds	r4, r3, #1
   1ee7c:	adc	r5, r8, #0
   1ee80:	subs	r2, r2, #1
   1ee84:	beq	1eea4 <__assert_fail@plt+0xd5b8>
   1ee88:	cmp	r5, r7
   1ee8c:	cmpeq	r4, r6
   1ee90:	bcs	1ee68 <__assert_fail@plt+0xd57c>
   1ee94:	adds	r4, r4, r4
   1ee98:	adc	r5, r5, r5
   1ee9c:	subs	r2, r2, #1
   1eea0:	bne	1ee88 <__assert_fail@plt+0xd59c>
   1eea4:	lsr	r3, r4, ip
   1eea8:	orr	r3, r3, r5, lsl fp
   1eeac:	lsr	r2, r5, ip
   1eeb0:	orr	r3, r3, r5, lsr sl
   1eeb4:	adds	r0, r0, r4
   1eeb8:	mov	r4, r3
   1eebc:	lsl	r3, r2, ip
   1eec0:	orr	r3, r3, r4, lsl sl
   1eec4:	lsl	ip, r4, ip
   1eec8:	orr	r3, r3, r4, lsr fp
   1eecc:	adc	r1, r1, r5
   1eed0:	subs	r0, r0, ip
   1eed4:	mov	r5, r2
   1eed8:	sbc	r1, r1, r3
   1eedc:	cmp	lr, #0
   1eee0:	strdne	r4, [lr]
   1eee4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1eee8:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1eeec:	mov	r7, r0
   1eef0:	ldr	r6, [pc, #72]	; 1ef40 <__assert_fail@plt+0xd654>
   1eef4:	ldr	r5, [pc, #72]	; 1ef44 <__assert_fail@plt+0xd658>
   1eef8:	add	r6, pc, r6
   1eefc:	add	r5, pc, r5
   1ef00:	sub	r6, r6, r5
   1ef04:	mov	r8, r1
   1ef08:	mov	r9, r2
   1ef0c:	bl	114c4 <calloc@plt-0x20>
   1ef10:	asrs	r6, r6, #2
   1ef14:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   1ef18:	mov	r4, #0
   1ef1c:	add	r4, r4, #1
   1ef20:	ldr	r3, [r5], #4
   1ef24:	mov	r2, r9
   1ef28:	mov	r1, r8
   1ef2c:	mov	r0, r7
   1ef30:	blx	r3
   1ef34:	cmp	r6, r4
   1ef38:	bne	1ef1c <__assert_fail@plt+0xd630>
   1ef3c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1ef40:	andeq	r2, r1, ip
   1ef44:	andeq	r2, r1, r4
   1ef48:	bx	lr
   1ef4c:	ldr	r3, [pc, #12]	; 1ef60 <__assert_fail@plt+0xd674>
   1ef50:	mov	r1, #0
   1ef54:	add	r3, pc, r3
   1ef58:	ldr	r2, [r3]
   1ef5c:	b	11760 <__cxa_atexit@plt>
   1ef60:	andeq	r2, r1, r8, lsl r2

Disassembly of section .fini:

0001ef64 <.fini>:
   1ef64:	push	{r3, lr}
   1ef68:	pop	{r3, pc}
