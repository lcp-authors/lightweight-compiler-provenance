
../repos/dvidelabs-flatcc-3b39ef7/test/emit_test/emit_test:     file format elf32-littlearm


Disassembly of section .init:

00011f74 <.init>:
   11f74:	push	{r3, lr}
   11f78:	bl	120cc <_start@@Base+0x3c>
   11f7c:	pop	{r3, pc}

Disassembly of section .plt:

00011f80 <printf@plt-0x14>:
   11f80:	push	{lr}		; (str lr, [sp, #-4]!)
   11f84:	ldr	lr, [pc, #4]	; 11f90 <printf@plt-0x4>
   11f88:	add	lr, pc, lr
   11f8c:	ldr	pc, [lr, #8]!
   11f90:	andeq	r8, r1, r0, ror r0

00011f94 <printf@plt>:
   11f94:	add	ip, pc, #0, 12
   11f98:	add	ip, ip, #24, 20	; 0x18000
   11f9c:	ldr	pc, [ip, #112]!	; 0x70

00011fa0 <free@plt>:
   11fa0:	add	ip, pc, #0, 12
   11fa4:	add	ip, ip, #24, 20	; 0x18000
   11fa8:	ldr	pc, [ip, #104]!	; 0x68

00011fac <memcpy@plt>:
   11fac:	add	ip, pc, #0, 12
   11fb0:	add	ip, ip, #24, 20	; 0x18000
   11fb4:	ldr	pc, [ip, #96]!	; 0x60

00011fb8 <memcmp@plt>:
   11fb8:	add	ip, pc, #0, 12
   11fbc:	add	ip, ip, #24, 20	; 0x18000
   11fc0:	ldr	pc, [ip, #88]!	; 0x58

00011fc4 <realloc@plt>:
   11fc4:	add	ip, pc, #0, 12
   11fc8:	add	ip, ip, #24, 20	; 0x18000
   11fcc:	ldr	pc, [ip, #80]!	; 0x50

00011fd0 <fwrite@plt>:
   11fd0:	add	ip, pc, #0, 12
   11fd4:	add	ip, ip, #24, 20	; 0x18000
   11fd8:	ldr	pc, [ip, #72]!	; 0x48

00011fdc <puts@plt>:
   11fdc:	add	ip, pc, #0, 12
   11fe0:	add	ip, ip, #24, 20	; 0x18000
   11fe4:	ldr	pc, [ip, #64]!	; 0x40

00011fe8 <malloc@plt>:
   11fe8:	add	ip, pc, #0, 12
   11fec:	add	ip, ip, #24, 20	; 0x18000
   11ff0:	ldr	pc, [ip, #56]!	; 0x38

00011ff4 <__libc_start_main@plt>:
   11ff4:	add	ip, pc, #0, 12
   11ff8:	add	ip, ip, #24, 20	; 0x18000
   11ffc:	ldr	pc, [ip, #48]!	; 0x30

00012000 <__gmon_start__@plt>:
   12000:	add	ip, pc, #0, 12
   12004:	add	ip, ip, #24, 20	; 0x18000
   12008:	ldr	pc, [ip, #40]!	; 0x28

0001200c <strlen@plt>:
   1200c:	add	ip, pc, #0, 12
   12010:	add	ip, ip, #24, 20	; 0x18000
   12014:	ldr	pc, [ip, #32]!

00012018 <fprintf@plt>:
   12018:	add	ip, pc, #0, 12
   1201c:	add	ip, ip, #24, 20	; 0x18000
   12020:	ldr	pc, [ip, #24]!

00012024 <posix_memalign@plt>:
   12024:	add	ip, pc, #0, 12
   12028:	add	ip, ip, #24, 20	; 0x18000
   1202c:	ldr	pc, [ip, #16]!

00012030 <memset@plt>:
   12030:	add	ip, pc, #0, 12
   12034:	add	ip, ip, #24, 20	; 0x18000
   12038:	ldr	pc, [ip, #8]!

0001203c <memchr@plt>:
   1203c:	add	ip, pc, #0, 12
   12040:	add	ip, ip, #24, 20	; 0x18000
   12044:	ldr	pc, [ip, #0]!

00012048 <fputc@plt>:
   12048:	add	ip, pc, #0, 12
   1204c:	add	ip, ip, #94208	; 0x17000
   12050:	ldr	pc, [ip, #4088]!	; 0xff8

00012054 <abort@plt>:
   12054:	add	ip, pc, #0, 12
   12058:	add	ip, ip, #94208	; 0x17000
   1205c:	ldr	pc, [ip, #4080]!	; 0xff0

00012060 <__assert_fail@plt>:
   12060:	add	ip, pc, #0, 12
   12064:	add	ip, ip, #94208	; 0x17000
   12068:	ldr	pc, [ip, #4072]!	; 0xfe8

Disassembly of section .text:

0001206c <main@@Base>:
   1206c:	str	r4, [sp, #-8]!
   12070:	str	lr, [sp, #4]
   12074:	bl	12268 <debug_test@@Base>
   12078:	mov	r4, r0
   1207c:	bl	123f8 <emit_test@@Base>
   12080:	orr	r0, r4, r0
   12084:	ldr	r4, [sp]
   12088:	add	sp, sp, #4
   1208c:	pop	{pc}		; (ldr pc, [sp], #4)

00012090 <_start@@Base>:
   12090:	mov	fp, #0
   12094:	mov	lr, #0
   12098:	pop	{r1}		; (ldr r1, [sp], #4)
   1209c:	mov	r2, sp
   120a0:	push	{r2}		; (str r2, [sp, #-4]!)
   120a4:	push	{r0}		; (str r0, [sp, #-4]!)
   120a8:	ldr	ip, [pc, #16]	; 120c0 <_start@@Base+0x30>
   120ac:	push	{ip}		; (str ip, [sp, #-4]!)
   120b0:	ldr	r0, [pc, #12]	; 120c4 <_start@@Base+0x34>
   120b4:	ldr	r3, [pc, #12]	; 120c8 <_start@@Base+0x38>
   120b8:	bl	11ff4 <__libc_start_main@plt>
   120bc:	bl	12054 <abort@plt>
   120c0:	andeq	r8, r1, r8, lsl fp
   120c4:	andeq	r2, r1, ip, rrx
   120c8:			; <UNDEFINED> instruction: 0x00018ab8
   120cc:	ldr	r3, [pc, #20]	; 120e8 <_start@@Base+0x58>
   120d0:	ldr	r2, [pc, #20]	; 120ec <_start@@Base+0x5c>
   120d4:	add	r3, pc, r3
   120d8:	ldr	r2, [r3, r2]
   120dc:	cmp	r2, #0
   120e0:	bxeq	lr
   120e4:	b	12000 <__gmon_start__@plt>
   120e8:	andeq	r7, r1, r4, lsr #30
   120ec:	andeq	r0, r0, r4, asr r0
   120f0:	ldr	r0, [pc, #24]	; 12110 <_start@@Base+0x80>
   120f4:	ldr	r3, [pc, #24]	; 12114 <_start@@Base+0x84>
   120f8:	cmp	r3, r0
   120fc:	bxeq	lr
   12100:	ldr	r3, [pc, #16]	; 12118 <_start@@Base+0x88>
   12104:	cmp	r3, #0
   12108:	bxeq	lr
   1210c:	bx	r3
   12110:	andeq	sl, r2, r0, rrx
   12114:	andeq	sl, r2, r0, rrx
   12118:	andeq	r0, r0, r0
   1211c:	ldr	r0, [pc, #36]	; 12148 <_start@@Base+0xb8>
   12120:	ldr	r1, [pc, #36]	; 1214c <_start@@Base+0xbc>
   12124:	sub	r1, r1, r0
   12128:	asr	r1, r1, #2
   1212c:	add	r1, r1, r1, lsr #31
   12130:	asrs	r1, r1, #1
   12134:	bxeq	lr
   12138:	ldr	r3, [pc, #16]	; 12150 <_start@@Base+0xc0>
   1213c:	cmp	r3, #0
   12140:	bxeq	lr
   12144:	bx	r3
   12148:	andeq	sl, r2, r0, rrx
   1214c:	andeq	sl, r2, r0, rrx
   12150:	andeq	r0, r0, r0
   12154:	push	{r4, lr}
   12158:	ldr	r4, [pc, #24]	; 12178 <_start@@Base+0xe8>
   1215c:	ldrb	r3, [r4]
   12160:	cmp	r3, #0
   12164:	popne	{r4, pc}
   12168:	bl	120f0 <_start@@Base+0x60>
   1216c:	mov	r3, #1
   12170:	strb	r3, [r4]
   12174:	pop	{r4, pc}
   12178:	andeq	sl, r2, r4, rrx
   1217c:	b	1211c <_start@@Base+0x8c>

00012180 <dbg_emitter@@Base>:
   12180:	strd	r4, [sp, #-32]!	; 0xffffffe0
   12184:	mov	r5, r3
   12188:	mov	r4, r1
   1218c:	strd	r6, [sp, #8]
   12190:	mov	r6, r2
   12194:	movw	r0, #35740	; 0x8b9c
   12198:	movt	r0, #1
   1219c:	mov	r2, r5
   121a0:	ldr	r3, [sp, #32]
   121a4:	mov	r1, r6
   121a8:	strd	r8, [sp, #16]
   121ac:	str	sl, [sp, #24]
   121b0:	str	lr, [sp, #28]
   121b4:	bl	11f94 <printf@plt>
   121b8:	cmp	r6, #0
   121bc:	ble	12204 <dbg_emitter@@Base+0x84>
   121c0:	add	r6, r4, r6, lsl #3
   121c4:	movw	r7, #36608	; 0x8f00
   121c8:	movt	r7, #1
   121cc:	movw	r9, #35792	; 0x8bd0
   121d0:	movt	r9, #1
   121d4:	movw	r8, #35828	; 0x8bf4
   121d8:	movt	r8, #1
   121dc:	ldr	r3, [r4]
   121e0:	ldr	r2, [r4, #4]
   121e4:	cmp	r3, r7
   121e8:	beq	12250 <dbg_emitter@@Base+0xd0>
   121ec:	cmp	r3, #0
   121f0:	beq	12220 <dbg_emitter@@Base+0xa0>
   121f4:	add	r4, r4, #8
   121f8:	add	r5, r5, r2
   121fc:	cmp	r6, r4
   12200:	bne	121dc <dbg_emitter@@Base+0x5c>
   12204:	ldrd	r4, [sp]
   12208:	mov	r0, #0
   1220c:	ldrd	r6, [sp, #8]
   12210:	ldrd	r8, [sp, #16]
   12214:	ldr	sl, [sp, #24]
   12218:	add	sp, sp, #28
   1221c:	pop	{pc}		; (ldr pc, [sp], #4)
   12220:	mov	r1, r5
   12224:	mov	r0, r8
   12228:	bl	11f94 <printf@plt>
   1222c:	ldr	r3, [r4, #4]
   12230:	add	r4, r4, #8
   12234:	cmp	r4, r6
   12238:	add	r5, r5, r3
   1223c:	beq	12204 <dbg_emitter@@Base+0x84>
   12240:	ldr	r3, [r4]
   12244:	ldr	r2, [r4, #4]
   12248:	cmp	r3, r7
   1224c:	bne	121ec <dbg_emitter@@Base+0x6c>
   12250:	mov	r1, r5
   12254:	mov	r0, r9
   12258:	bl	11f94 <printf@plt>
   1225c:	ldr	r3, [r4]
   12260:	ldr	r2, [r4, #4]
   12264:	b	121ec <dbg_emitter@@Base+0x6c>

00012268 <debug_test@@Base>:
   12268:	mov	r2, #0
   1226c:	mov	r3, #0
   12270:	strd	r4, [sp, #-16]!
   12274:	mov	r4, #0
   12278:	str	r6, [sp, #8]
   1227c:	movw	r0, #35876	; 0x8c24
   12280:	movt	r0, #1
   12284:	str	lr, [sp, #12]
   12288:	sub	sp, sp, #280	; 0x118
   1228c:	strd	r2, [sp, #8]
   12290:	strd	r2, [sp, #16]
   12294:	strd	r2, [sp, #24]
   12298:	strd	r2, [sp, #32]
   1229c:	strd	r2, [sp, #40]	; 0x28
   122a0:	bl	11fdc <puts@plt>
   122a4:	mov	r3, r4
   122a8:	mov	r2, r4
   122ac:	str	r4, [sp]
   122b0:	add	r0, sp, #48	; 0x30
   122b4:	movw	r1, #8576	; 0x2180
   122b8:	movt	r1, #1
   122bc:	bl	12eec <flatcc_builder_custom_init@@Base>
   122c0:	mvn	ip, #-1073741824	; 0xc0000000
   122c4:	mov	r2, #4
   122c8:	mov	r3, r2
   122cc:	add	r1, sp, #8
   122d0:	add	r0, sp, #48	; 0x30
   122d4:	stm	sp, {r2, ip}
   122d8:	mov	r2, #10
   122dc:	bl	16038 <flatcc_builder_create_vector@@Base>
   122e0:	mov	r5, r0
   122e4:	mov	r3, r4
   122e8:	mov	r2, r4
   122ec:	mov	r1, r4
   122f0:	add	r0, sp, #48	; 0x30
   122f4:	bl	13a0c <flatcc_builder_start_buffer@@Base>
   122f8:	subs	r4, r0, #0
   122fc:	beq	12320 <debug_test@@Base+0xb8>
   12300:	add	r0, sp, #48	; 0x30
   12304:	bl	1313c <flatcc_builder_clear@@Base>
   12308:	mov	r0, #0
   1230c:	add	sp, sp, #280	; 0x118
   12310:	ldrd	r4, [sp]
   12314:	ldr	r6, [sp, #8]
   12318:	add	sp, sp, #12
   1231c:	pop	{pc}		; (ldr pc, [sp], #4)
   12320:	mov	r1, #3
   12324:	add	r0, sp, #48	; 0x30
   12328:	bl	154f8 <flatcc_builder_start_table@@Base>
   1232c:	subs	r6, r0, #0
   12330:	bne	123c8 <debug_test@@Base+0x160>
   12334:	mov	r3, #8
   12338:	mov	r1, r6
   1233c:	mov	r2, r3
   12340:	add	r0, sp, #48	; 0x30
   12344:	bl	17870 <flatcc_builder_table_add@@Base>
   12348:	cmp	r0, #0
   1234c:	beq	123c8 <debug_test@@Base+0x160>
   12350:	mov	r2, #42	; 0x2a
   12354:	mov	r3, #0
   12358:	cmp	r5, #0
   1235c:	strd	r2, [r0]
   12360:	beq	123c8 <debug_test@@Base+0x160>
   12364:	mov	r1, #2
   12368:	add	r0, sp, #48	; 0x30
   1236c:	bl	17c3c <flatcc_builder_table_add_offset@@Base>
   12370:	subs	r2, r0, #0
   12374:	beq	123c8 <debug_test@@Base+0x160>
   12378:	mov	r3, #1
   1237c:	add	r0, sp, #48	; 0x30
   12380:	str	r5, [r2]
   12384:	mov	r1, r3
   12388:	mov	r2, r3
   1238c:	bl	17870 <flatcc_builder_table_add@@Base>
   12390:	cmp	r0, #0
   12394:	beq	123c8 <debug_test@@Base+0x160>
   12398:	mov	r3, #1
   1239c:	mov	r2, r6
   123a0:	movw	r1, #35624	; 0x8b28
   123a4:	movt	r1, #1
   123a8:	strb	r3, [r0]
   123ac:	add	r0, sp, #48	; 0x30
   123b0:	bl	15ddc <flatcc_builder_check_required@@Base>
   123b4:	cmp	r0, #0
   123b8:	beq	123d8 <debug_test@@Base+0x170>
   123bc:	add	r0, sp, #48	; 0x30
   123c0:	bl	15e78 <flatcc_builder_end_table@@Base>
   123c4:	mov	r4, r0
   123c8:	mov	r1, r4
   123cc:	add	r0, sp, #48	; 0x30
   123d0:	bl	13bb8 <flatcc_builder_end_buffer@@Base>
   123d4:	b	12300 <debug_test@@Base+0x98>
   123d8:	movw	r1, #35960	; 0x8c78
   123dc:	movt	r1, #1
   123e0:	ldr	r3, [pc, #12]	; 123f4 <debug_test@@Base+0x18c>
   123e4:	movw	r0, #36056	; 0x8cd8
   123e8:	movt	r0, #1
   123ec:	mov	r2, #21
   123f0:	bl	12060 <__assert_fail@plt>
   123f4:	andeq	r8, r1, ip, lsr #22

000123f8 <emit_test@@Base>:
   123f8:	strd	r4, [sp, #-36]!	; 0xffffffdc
   123fc:	strd	r6, [sp, #8]
   12400:	movw	r6, #35624	; 0x8b28
   12404:	movt	r6, #1
   12408:	strd	r8, [sp, #16]
   1240c:	ldrd	r2, [r6, #24]
   12410:	strd	sl, [sp, #24]
   12414:	str	lr, [sp, #32]
   12418:	sub	sp, sp, #348	; 0x15c
   1241c:	ldrd	r4, [r6, #16]
   12420:	add	r0, sp, #112	; 0x70
   12424:	ldrd	r8, [r6, #48]	; 0x30
   12428:	ldrh	lr, [r6, #72]	; 0x48
   1242c:	strd	r2, [sp, #60]	; 0x3c
   12430:	ldrd	r2, [r6, #32]
   12434:	strd	r4, [sp, #52]	; 0x34
   12438:	ldrd	r4, [r6, #40]	; 0x28
   1243c:	ldrb	ip, [r6, #74]	; 0x4a
   12440:	strd	r2, [sp, #68]	; 0x44
   12444:	ldrd	r2, [r6, #56]	; 0x38
   12448:	strd	r4, [sp, #76]	; 0x4c
   1244c:	strd	r8, [sp, #84]	; 0x54
   12450:	ldrd	r4, [r6, #64]	; 0x40
   12454:	strd	r2, [sp, #92]	; 0x5c
   12458:	ldrd	r8, [r6, #76]	; 0x4c
   1245c:	ldrd	r2, [r6, #84]	; 0x54
   12460:	strd	r8, [sp, #16]
   12464:	strh	lr, [sp, #108]	; 0x6c
   12468:	strd	r2, [sp, #24]
   1246c:	strd	r4, [sp, #100]	; 0x64
   12470:	strb	ip, [sp, #110]	; 0x6e
   12474:	bl	12f74 <flatcc_builder_init@@Base>
   12478:	add	r0, sp, #112	; 0x70
   1247c:	bl	184ac <flatcc_builder_get_emit_context@@Base>
   12480:	mov	ip, #4
   12484:	mvn	r2, #-1073741824	; 0xc0000000
   12488:	mov	r3, ip
   1248c:	add	r1, sp, #16
   12490:	mov	r4, r0
   12494:	add	r0, sp, #112	; 0x70
   12498:	str	ip, [sp]
   1249c:	str	r2, [sp, #4]
   124a0:	mov	r2, ip
   124a4:	bl	16038 <flatcc_builder_create_vector@@Base>
   124a8:	mov	r3, #0
   124ac:	mov	r7, r0
   124b0:	mov	r2, r3
   124b4:	add	r0, sp, #112	; 0x70
   124b8:	mov	r1, r3
   124bc:	bl	13a0c <flatcc_builder_start_buffer@@Base>
   124c0:	subs	r5, r0, #0
   124c4:	beq	124fc <emit_test@@Base+0x104>
   124c8:	ldr	r3, [r4]
   124cc:	ldr	r2, [r4, #4]
   124d0:	cmp	r2, r3
   124d4:	beq	125bc <emit_test@@Base+0x1c4>
   124d8:	mvn	r4, #0
   124dc:	mov	r0, r4
   124e0:	add	sp, sp, #348	; 0x15c
   124e4:	ldrd	r4, [sp]
   124e8:	ldrd	r6, [sp, #8]
   124ec:	ldrd	r8, [sp, #16]
   124f0:	ldrd	sl, [sp, #24]
   124f4:	add	sp, sp, #32
   124f8:	pop	{pc}		; (ldr pc, [sp], #4)
   124fc:	mov	r1, #3
   12500:	add	r0, sp, #112	; 0x70
   12504:	bl	154f8 <flatcc_builder_start_table@@Base>
   12508:	subs	r8, r0, #0
   1250c:	bne	125a0 <emit_test@@Base+0x1a8>
   12510:	mov	r3, #8
   12514:	mov	r1, r8
   12518:	mov	r2, r3
   1251c:	add	r0, sp, #112	; 0x70
   12520:	bl	17870 <flatcc_builder_table_add@@Base>
   12524:	cmp	r0, #0
   12528:	beq	125a0 <emit_test@@Base+0x1a8>
   1252c:	mov	r2, #42	; 0x2a
   12530:	mov	r3, #0
   12534:	cmp	r7, #0
   12538:	strd	r2, [r0]
   1253c:	beq	125a0 <emit_test@@Base+0x1a8>
   12540:	mov	r1, #2
   12544:	add	r0, sp, #112	; 0x70
   12548:	bl	17c3c <flatcc_builder_table_add_offset@@Base>
   1254c:	subs	r2, r0, #0
   12550:	beq	125a0 <emit_test@@Base+0x1a8>
   12554:	mov	r3, #1
   12558:	add	r0, sp, #112	; 0x70
   1255c:	str	r7, [r2]
   12560:	mov	r1, r3
   12564:	mov	r2, r3
   12568:	bl	17870 <flatcc_builder_table_add@@Base>
   1256c:	cmp	r0, #0
   12570:	beq	125a0 <emit_test@@Base+0x1a8>
   12574:	mov	r3, #1
   12578:	mov	r2, r8
   1257c:	mov	r1, r6
   12580:	strb	r3, [r0]
   12584:	add	r0, sp, #112	; 0x70
   12588:	bl	15ddc <flatcc_builder_check_required@@Base>
   1258c:	cmp	r0, #0
   12590:	beq	128dc <emit_test@@Base+0x4e4>
   12594:	add	r0, sp, #112	; 0x70
   12598:	bl	15e78 <flatcc_builder_end_table@@Base>
   1259c:	mov	r5, r0
   125a0:	mov	r1, r5
   125a4:	add	r0, sp, #112	; 0x70
   125a8:	bl	13bb8 <flatcc_builder_end_buffer@@Base>
   125ac:	ldr	r3, [r4]
   125b0:	ldr	r2, [r4, #4]
   125b4:	cmp	r2, r3
   125b8:	bne	124d8 <emit_test@@Base+0xe0>
   125bc:	ldr	r9, [r4, #8]
   125c0:	ldr	r7, [r4, #24]
   125c4:	cmp	r9, #0
   125c8:	beq	124d8 <emit_test@@Base+0xe0>
   125cc:	add	r0, sp, #112	; 0x70
   125d0:	bl	181c4 <flatcc_builder_get_buffer_size@@Base>
   125d4:	cmp	r0, r7
   125d8:	mov	r6, r0
   125dc:	bne	128c0 <emit_test@@Base+0x4c8>
   125e0:	movw	r4, #41056	; 0xa060
   125e4:	movt	r4, #2
   125e8:	mov	r2, r0
   125ec:	movw	r1, #36240	; 0x8d90
   125f0:	movt	r1, #1
   125f4:	ldr	r0, [r4]
   125f8:	bl	12018 <fprintf@plt>
   125fc:	ldr	r5, [r4]
   12600:	movw	r2, #36260	; 0x8da4
   12604:	movt	r2, #1
   12608:	movw	r1, #36272	; 0x8db0
   1260c:	movt	r1, #1
   12610:	mov	r0, r5
   12614:	bl	12018 <fprintf@plt>
   12618:	cmp	r6, #0
   1261c:	beq	12890 <emit_test@@Base+0x498>
   12620:	movw	sl, #36288	; 0x8dc0
   12624:	movt	sl, #1
   12628:	movw	r3, #36280	; 0x8db8
   1262c:	movt	r3, #1
   12630:	movw	r8, #36296	; 0x8dc8
   12634:	movt	r8, #1
   12638:	sub	r6, r9, #1
   1263c:	mov	fp, #0
   12640:	str	r3, [sp, #12]
   12644:	ands	r4, fp, #15
   12648:	bne	12778 <emit_test@@Base+0x380>
   1264c:	cmp	fp, #0
   12650:	beq	12664 <emit_test@@Base+0x26c>
   12654:	add	r2, sp, #32
   12658:	mov	r0, r5
   1265c:	ldr	r1, [sp, #12]
   12660:	bl	12018 <fprintf@plt>
   12664:	mov	r2, fp
   12668:	mov	r1, sl
   1266c:	mov	r0, r5
   12670:	bl	12018 <fprintf@plt>
   12674:	ldrb	r2, [r6, #1]!
   12678:	mov	r1, r8
   1267c:	mov	r0, r5
   12680:	bl	12018 <fprintf@plt>
   12684:	add	r3, sp, #344	; 0x158
   12688:	add	fp, fp, #1
   1268c:	add	r4, r3, r4
   12690:	ldrb	r2, [r6]
   12694:	sub	r1, r2, #32
   12698:	cmp	r1, #94	; 0x5e
   1269c:	bls	1275c <emit_test@@Base+0x364>
   126a0:	mov	r1, #46	; 0x2e
   126a4:	mov	r2, #0
   126a8:	cmp	fp, r7
   126ac:	strb	r1, [r4, #-312]	; 0xfffffec8
   126b0:	strb	r2, [r4, #-311]	; 0xfffffec9
   126b4:	bne	12644 <emit_test@@Base+0x24c>
   126b8:	tst	r7, #15
   126bc:	beq	126ec <emit_test@@Base+0x2f4>
   126c0:	movw	r6, #36304	; 0x8dd0
   126c4:	movt	r6, #1
   126c8:	mov	r4, r7
   126cc:	add	r4, r4, #1
   126d0:	mov	r3, r5
   126d4:	mov	r2, #3
   126d8:	mov	r1, #1
   126dc:	mov	r0, r6
   126e0:	bl	11fd0 <fwrite@plt>
   126e4:	tst	r4, #15
   126e8:	bne	126cc <emit_test@@Base+0x2d4>
   126ec:	add	r2, sp, #32
   126f0:	mov	r0, r5
   126f4:	movw	r1, #36280	; 0x8db8
   126f8:	movt	r1, #1
   126fc:	bl	12018 <fprintf@plt>
   12700:	cmp	r7, #58	; 0x3a
   12704:	bne	128a4 <emit_test@@Base+0x4ac>
   12708:	mov	r2, r7
   1270c:	add	r1, sp, #52	; 0x34
   12710:	mov	r0, r9
   12714:	bl	11fb8 <memcmp@plt>
   12718:	subs	r4, r0, #0
   1271c:	bne	12874 <emit_test@@Base+0x47c>
   12720:	ldr	r2, [r9]
   12724:	adds	r3, r9, r2
   12728:	beq	12858 <emit_test@@Base+0x460>
   1272c:	ldr	r2, [r9, r2]
   12730:	sub	r2, r3, r2
   12734:	ldrh	r1, [r2]
   12738:	cmp	r1, #5
   1273c:	bhi	12790 <emit_test@@Base+0x398>
   12740:	movw	r1, #36164	; 0x8d44
   12744:	movt	r1, #1
   12748:	ldr	r3, [pc, #456]	; 12918 <emit_test@@Base+0x520>
   1274c:	movw	r0, #38504	; 0x9668
   12750:	movt	r0, #1
   12754:	mov	r2, #112	; 0x70
   12758:	bl	12060 <__assert_fail@plt>
   1275c:	mov	r1, #0
   12760:	cmp	r7, fp
   12764:	strb	r2, [r4, #-312]	; 0xfffffec8
   12768:	strb	r1, [r4, #-311]	; 0xfffffec9
   1276c:	beq	126b8 <emit_test@@Base+0x2c0>
   12770:	ands	r4, fp, #15
   12774:	beq	1264c <emit_test@@Base+0x254>
   12778:	tst	fp, #7
   1277c:	bne	12674 <emit_test@@Base+0x27c>
   12780:	mov	r1, r5
   12784:	mov	r0, #32
   12788:	bl	12048 <fputc@plt>
   1278c:	b	12674 <emit_test@@Base+0x27c>
   12790:	ldrh	r0, [r2, #4]
   12794:	cmp	r0, #0
   12798:	beq	12740 <emit_test@@Base+0x348>
   1279c:	ldrd	r6, [r3, r0]
   127a0:	cmp	r7, #0
   127a4:	cmpeq	r6, #42	; 0x2a
   127a8:	bne	12740 <emit_test@@Base+0x348>
   127ac:	cmp	r1, #7
   127b0:	bhi	127d0 <emit_test@@Base+0x3d8>
   127b4:	movw	r1, #36164	; 0x8d44
   127b8:	movt	r1, #1
   127bc:	ldr	r3, [pc, #340]	; 12918 <emit_test@@Base+0x520>
   127c0:	movw	r0, #38504	; 0x9668
   127c4:	movt	r0, #1
   127c8:	mov	r2, #113	; 0x71
   127cc:	bl	12060 <__assert_fail@plt>
   127d0:	ldrh	r0, [r2, #6]
   127d4:	cmp	r0, #0
   127d8:	beq	127b4 <emit_test@@Base+0x3bc>
   127dc:	ldrb	r0, [r3, r0]
   127e0:	cmp	r0, #1
   127e4:	bne	127b4 <emit_test@@Base+0x3bc>
   127e8:	cmp	r1, #9
   127ec:	bls	1283c <emit_test@@Base+0x444>
   127f0:	ldrh	r2, [r2, #8]
   127f4:	cmp	r2, #0
   127f8:	beq	1283c <emit_test@@Base+0x444>
   127fc:	ldr	r1, [r3, r2]
   12800:	add	r3, r3, r2
   12804:	add	r2, r1, #4
   12808:	adds	r3, r3, r2
   1280c:	beq	1283c <emit_test@@Base+0x444>
   12810:	ldr	r2, [r3, #-4]
   12814:	cmp	r2, #4
   12818:	bne	1283c <emit_test@@Base+0x444>
   1281c:	vldr	s15, [pc, #240]	; 12914 <emit_test@@Base+0x51c>
   12820:	vldr	s14, [r3, #8]
   12824:	vcmp.f32	s14, s15
   12828:	vmrs	APSR_nzcv, fpscr
   1282c:	bne	128f8 <emit_test@@Base+0x500>
   12830:	add	r0, sp, #112	; 0x70
   12834:	bl	1313c <flatcc_builder_clear@@Base>
   12838:	b	124dc <emit_test@@Base+0xe4>
   1283c:	movw	r1, #36164	; 0x8d44
   12840:	movt	r1, #1
   12844:	ldr	r3, [pc, #204]	; 12918 <emit_test@@Base+0x520>
   12848:	movw	r0, #38504	; 0x9668
   1284c:	movt	r0, #1
   12850:	mov	r2, #114	; 0x72
   12854:	bl	12060 <__assert_fail@plt>
   12858:	movw	r1, #36308	; 0x8dd4
   1285c:	movt	r1, #1
   12860:	ldr	r3, [pc, #180]	; 1291c <emit_test@@Base+0x524>
   12864:	movw	r0, #36400	; 0x8e30
   12868:	movt	r0, #1
   1286c:	mov	r2, #41	; 0x29
   12870:	bl	12060 <__assert_fail@plt>
   12874:	movw	r1, #36164	; 0x8d44
   12878:	movt	r1, #1
   1287c:	ldr	r3, [pc, #148]	; 12918 <emit_test@@Base+0x520>
   12880:	movw	r0, #38504	; 0x9668
   12884:	movt	r0, #1
   12888:	mov	r2, #108	; 0x6c
   1288c:	bl	12060 <__assert_fail@plt>
   12890:	movw	r1, #36280	; 0x8db8
   12894:	movt	r1, #1
   12898:	mov	r0, r5
   1289c:	add	r2, sp, #32
   128a0:	bl	12018 <fprintf@plt>
   128a4:	movw	r1, #36164	; 0x8d44
   128a8:	movt	r1, #1
   128ac:	ldr	r3, [pc, #100]	; 12918 <emit_test@@Base+0x520>
   128b0:	movw	r0, #38504	; 0x9668
   128b4:	movt	r0, #1
   128b8:	mov	r2, #106	; 0x6a
   128bc:	bl	12060 <__assert_fail@plt>
   128c0:	movw	r1, #36164	; 0x8d44
   128c4:	movt	r1, #1
   128c8:	ldr	r3, [pc, #72]	; 12918 <emit_test@@Base+0x520>
   128cc:	movw	r0, #38504	; 0x9668
   128d0:	movt	r0, #1
   128d4:	mov	r2, #101	; 0x65
   128d8:	bl	12060 <__assert_fail@plt>
   128dc:	movw	r1, #35960	; 0x8c78
   128e0:	movt	r1, #1
   128e4:	movw	r0, #36056	; 0x8cd8
   128e8:	movt	r0, #1
   128ec:	add	r3, r6, #4
   128f0:	mov	r2, #21
   128f4:	bl	12060 <__assert_fail@plt>
   128f8:	movw	r1, #36164	; 0x8d44
   128fc:	movt	r1, #1
   12900:	ldr	r3, [pc, #16]	; 12918 <emit_test@@Base+0x520>
   12904:	movw	r0, #38504	; 0x9668
   12908:	movt	r0, #1
   1290c:	mov	r2, #115	; 0x73
   12910:	bl	12060 <__assert_fail@plt>
   12914:	svccc	0x0099999a
   12918:	andeq	r8, r1, r4, lsl #23
   1291c:	muleq	r1, r0, fp

00012920 <flatcc_builder_default_alloc@@Base>:
   12920:	strd	r4, [sp, #-24]!	; 0xffffffe8
   12924:	subs	r5, r2, #0
   12928:	strd	r6, [sp, #8]
   1292c:	mov	r6, r1
   12930:	str	r8, [sp, #16]
   12934:	str	lr, [sp, #20]
   12938:	beq	12970 <flatcc_builder_default_alloc@@Base+0x50>
   1293c:	mov	r7, r3
   12940:	ldr	r3, [sp, #24]
   12944:	sub	r2, r3, #1
   12948:	cmp	r2, #6
   1294c:	ldrls	pc, [pc, r2, lsl #2]
   12950:	b	12a20 <flatcc_builder_default_alloc@@Base+0x100>
   12954:	andeq	r2, r1, r0, lsr #19
   12958:	andeq	r2, r1, r0, lsr #20
   1295c:	andeq	r2, r1, r0, lsr #20
   12960:	andeq	r2, r1, r8, lsl sl
   12964:	andeq	r2, r1, r8, lsl #20
   12968:	andeq	r2, r1, r0, lsr #20
   1296c:	andeq	r2, r1, r0, lsl sl
   12970:	ldr	r0, [r1]
   12974:	cmp	r0, #0
   12978:	beq	1298c <flatcc_builder_default_alloc@@Base+0x6c>
   1297c:	bl	11fa0 <free@plt>
   12980:	mov	r0, r5
   12984:	str	r5, [r6]
   12988:	str	r5, [r6, #4]
   1298c:	ldrd	r4, [sp]
   12990:	ldrd	r6, [sp, #8]
   12994:	ldr	r8, [sp, #16]
   12998:	add	sp, sp, #20
   1299c:	pop	{pc}		; (ldr pc, [sp], #4)
   129a0:	mov	r4, #256	; 0x100
   129a4:	cmp	r4, r5
   129a8:	bcs	129b8 <flatcc_builder_default_alloc@@Base+0x98>
   129ac:	lsl	r4, r4, #1
   129b0:	cmp	r5, r4
   129b4:	bhi	129ac <flatcc_builder_default_alloc@@Base+0x8c>
   129b8:	ldr	r2, [r6, #4]
   129bc:	cmp	r5, r2
   129c0:	bhi	129d0 <flatcc_builder_default_alloc@@Base+0xb0>
   129c4:	cmp	r4, r2, lsr #1
   129c8:	movls	r0, #0
   129cc:	bls	1298c <flatcc_builder_default_alloc@@Base+0x6c>
   129d0:	mov	r1, r4
   129d4:	ldr	r0, [r6]
   129d8:	bl	11fc4 <realloc@plt>
   129dc:	subs	r5, r0, #0
   129e0:	beq	12a3c <flatcc_builder_default_alloc@@Base+0x11c>
   129e4:	cmp	r7, #0
   129e8:	beq	129f8 <flatcc_builder_default_alloc@@Base+0xd8>
   129ec:	ldr	r0, [r6, #4]
   129f0:	cmp	r0, r4
   129f4:	bcc	12a28 <flatcc_builder_default_alloc@@Base+0x108>
   129f8:	mov	r0, #0
   129fc:	str	r5, [r6]
   12a00:	str	r4, [r6, #4]
   12a04:	b	1298c <flatcc_builder_default_alloc@@Base+0x6c>
   12a08:	mov	r4, r5
   12a0c:	b	129b8 <flatcc_builder_default_alloc@@Base+0x98>
   12a10:	mov	r4, #64	; 0x40
   12a14:	b	129a4 <flatcc_builder_default_alloc@@Base+0x84>
   12a18:	mov	r4, #288	; 0x120
   12a1c:	b	129a4 <flatcc_builder_default_alloc@@Base+0x84>
   12a20:	mov	r4, #32
   12a24:	b	129a4 <flatcc_builder_default_alloc@@Base+0x84>
   12a28:	sub	r2, r4, r0
   12a2c:	mov	r1, #0
   12a30:	add	r0, r5, r0
   12a34:	bl	12030 <memset@plt>
   12a38:	b	129f8 <flatcc_builder_default_alloc@@Base+0xd8>
   12a3c:	mvn	r0, #0
   12a40:	b	1298c <flatcc_builder_default_alloc@@Base+0x6c>
   12a44:	movw	r3, #36440	; 0x8e58
   12a48:	movt	r3, #1
   12a4c:	str	r4, [sp, #-8]!
   12a50:	movw	r1, #38312	; 0x95a8
   12a54:	movt	r1, #1
   12a58:	str	lr, [sp, #4]
   12a5c:	movw	r0, #38504	; 0x9668
   12a60:	movt	r0, #1
   12a64:	mov	r2, #308	; 0x134
   12a68:	bl	12060 <__assert_fail@plt>
   12a6c:	movw	r1, #38312	; 0x95a8
   12a70:	movt	r1, #1
   12a74:	ldr	r3, [pc, #20]	; 12a90 <flatcc_builder_default_alloc@@Base+0x170>
   12a78:	movw	r0, #38504	; 0x9668
   12a7c:	movt	r0, #1
   12a80:	str	r4, [sp, #-8]!
   12a84:	movw	r2, #677	; 0x2a5
   12a88:	str	lr, [sp, #4]
   12a8c:	bl	12060 <__assert_fail@plt>
   12a90:	andeq	r8, r1, r8, ror #28
   12a94:	movw	r1, #38312	; 0x95a8
   12a98:	movt	r1, #1
   12a9c:	ldr	r3, [pc, #20]	; 12ab8 <flatcc_builder_default_alloc@@Base+0x198>
   12aa0:	movw	r0, #38504	; 0x9668
   12aa4:	movt	r0, #1
   12aa8:	str	r4, [sp, #-8]!
   12aac:	movw	r2, #702	; 0x2be
   12ab0:	str	lr, [sp, #4]
   12ab4:	bl	12060 <__assert_fail@plt>
   12ab8:	andeq	r8, r1, r4, ror lr
   12abc:	movw	r1, #38312	; 0x95a8
   12ac0:	movt	r1, #1
   12ac4:	ldr	r3, [pc, #20]	; 12ae0 <flatcc_builder_default_alloc@@Base+0x1c0>
   12ac8:	movw	r0, #38504	; 0x9668
   12acc:	movt	r0, #1
   12ad0:	str	r4, [sp, #-8]!
   12ad4:	movw	r2, #651	; 0x28b
   12ad8:	str	lr, [sp, #4]
   12adc:	bl	12060 <__assert_fail@plt>
   12ae0:	andeq	r8, r1, r4, lsl #29
   12ae4:	movw	r1, #38312	; 0x95a8
   12ae8:	movt	r1, #1
   12aec:	ldr	r3, [pc, #20]	; 12b08 <flatcc_builder_default_alloc@@Base+0x1e8>
   12af0:	movw	r0, #38384	; 0x95f0
   12af4:	movt	r0, #1
   12af8:	str	r4, [sp, #-8]!
   12afc:	mov	r2, #892	; 0x37c
   12b00:	str	lr, [sp, #4]
   12b04:	bl	12060 <__assert_fail@plt>
   12b08:	muleq	r1, r0, lr
   12b0c:	movw	r1, #38312	; 0x95a8
   12b10:	movt	r1, #1
   12b14:	ldr	r3, [pc, #20]	; 12b30 <flatcc_builder_default_alloc@@Base+0x210>
   12b18:	movw	r0, #38412	; 0x960c
   12b1c:	movt	r0, #1
   12b20:	str	r4, [sp, #-8]!
   12b24:	movw	r2, #542	; 0x21e
   12b28:	str	lr, [sp, #4]
   12b2c:	bl	12060 <__assert_fail@plt>
   12b30:	andeq	r8, r1, r4, lsr #29
   12b34:	movw	r1, #38312	; 0x95a8
   12b38:	movt	r1, #1
   12b3c:	ldr	r3, [pc, #20]	; 12b58 <flatcc_builder_default_alloc@@Base+0x238>
   12b40:	movw	r0, #38440	; 0x9628
   12b44:	movt	r0, #1
   12b48:	str	r4, [sp, #-8]!
   12b4c:	movw	r2, #966	; 0x3c6
   12b50:	str	lr, [sp, #4]
   12b54:	bl	12060 <__assert_fail@plt>
   12b58:	andeq	r8, r1, r4, asr #29
   12b5c:	movw	r1, #38312	; 0x95a8
   12b60:	movt	r1, #1
   12b64:	ldr	r3, [pc, #20]	; 12b80 <flatcc_builder_default_alloc@@Base+0x260>
   12b68:	movw	r0, #38484	; 0x9654
   12b6c:	movt	r0, #1
   12b70:	str	r4, [sp, #-8]!
   12b74:	movw	r2, #1926	; 0x786
   12b78:	str	lr, [sp, #4]
   12b7c:	bl	12060 <__assert_fail@plt>
   12b80:	andeq	r8, r1, r4, ror #29
   12b84:	ldrd	r2, [r0, #156]	; 0x9c
   12b88:	strd	r4, [sp, #-20]!	; 0xffffffec
   12b8c:	mov	r5, r1
   12b90:	mov	r4, r0
   12b94:	strd	r6, [sp, #8]
   12b98:	str	lr, [sp, #16]
   12b9c:	sub	sp, sp, #12
   12ba0:	add	r1, r2, #1
   12ba4:	cmp	r1, r3
   12ba8:	str	r1, [r0, #156]	; 0x9c
   12bac:	ble	12c8c <flatcc_builder_default_alloc@@Base+0x36c>
   12bb0:	ldr	r3, [r0, #176]	; 0xb0
   12bb4:	cmp	r1, r3
   12bb8:	cmpgt	r3, #0
   12bbc:	movgt	r3, #1
   12bc0:	movle	r3, #0
   12bc4:	bgt	12c9c <flatcc_builder_default_alloc@@Base+0x37c>
   12bc8:	add	r2, r2, r2, lsl #3
   12bcc:	ldr	r1, [r0, #88]	; 0x58
   12bd0:	lsl	r6, r2, #2
   12bd4:	add	r2, r6, #36	; 0x24
   12bd8:	cmp	r2, r1
   12bdc:	bls	12c00 <flatcc_builder_default_alloc@@Base+0x2e0>
   12be0:	mov	ip, #4
   12be4:	add	r1, r0, #84	; 0x54
   12be8:	ldr	r0, [r0, #40]	; 0x28
   12bec:	str	ip, [sp]
   12bf0:	ldr	r7, [r4, #48]	; 0x30
   12bf4:	blx	r7
   12bf8:	cmp	r0, #0
   12bfc:	bne	12ca4 <flatcc_builder_default_alloc@@Base+0x384>
   12c00:	ldr	r2, [r4, #84]	; 0x54
   12c04:	add	r2, r2, r6
   12c08:	cmp	r2, #0
   12c0c:	str	r2, [r4, #32]
   12c10:	beq	12c9c <flatcc_builder_default_alloc@@Base+0x37c>
   12c14:	ldr	r3, [r4, #88]	; 0x58
   12c18:	movw	r0, #36409	; 0x8e39
   12c1c:	movt	r0, #14563	; 0x38e3
   12c20:	ldr	r1, [r4, #176]	; 0xb0
   12c24:	umull	r0, r3, r0, r3
   12c28:	lsr	r3, r3, #3
   12c2c:	cmp	r3, r1
   12c30:	cmpgt	r1, #0
   12c34:	movgt	r3, r1
   12c38:	str	r3, [r4, #160]	; 0xa0
   12c3c:	ldr	r3, [r4, #20]
   12c40:	mov	r1, #0
   12c44:	mvn	lr, #3
   12c48:	mov	r0, r1
   12c4c:	ldr	ip, [r4, #28]
   12c50:	ldrh	r6, [r4, #130]	; 0x82
   12c54:	str	r3, [r2, #8]
   12c58:	add	r3, r3, ip
   12c5c:	add	r3, r3, #7
   12c60:	bic	r3, r3, #7
   12c64:	strh	r6, [r2, #12]
   12c68:	strh	r5, [r4, #130]	; 0x82
   12c6c:	stm	r2, {ip, lr}
   12c70:	str	r1, [r4, #20]
   12c74:	str	r3, [r4, #28]
   12c78:	add	sp, sp, #12
   12c7c:	ldrd	r4, [sp]
   12c80:	ldrd	r6, [sp, #8]
   12c84:	add	sp, sp, #16
   12c88:	pop	{pc}		; (ldr pc, [sp], #4)
   12c8c:	ldr	r2, [r0, #32]
   12c90:	add	r2, r2, #36	; 0x24
   12c94:	str	r2, [r0, #32]
   12c98:	b	12c3c <flatcc_builder_default_alloc@@Base+0x31c>
   12c9c:	mvn	r0, #0
   12ca0:	b	12c78 <flatcc_builder_default_alloc@@Base+0x358>
   12ca4:	bl	12a44 <flatcc_builder_default_alloc@@Base+0x124>
   12ca8:	strd	r4, [sp, #-24]!	; 0xffffffe8
   12cac:	mov	r4, r0
   12cb0:	ldrh	r0, [r0, #128]	; 0x80
   12cb4:	strd	r6, [sp, #8]
   12cb8:	mov	r6, #4
   12cbc:	ldr	r5, [r4, #136]	; 0x88
   12cc0:	str	lr, [sp, #20]
   12cc4:	mov	lr, r2
   12cc8:	str	r8, [sp, #16]
   12ccc:	sub	sp, sp, #88	; 0x58
   12cd0:	cmp	r0, #3
   12cd4:	add	r0, sp, #12
   12cd8:	movls	r2, #4
   12cdc:	str	lr, [sp, #12]
   12ce0:	str	r6, [sp, #16]
   12ce4:	strhls	r2, [r4, #128]	; 0x80
   12ce8:	mov	r2, #1
   12cec:	lsls	ip, lr, #2
   12cf0:	moveq	r7, #2
   12cf4:	str	r2, [sp, #20]
   12cf8:	str	r0, [sp, #24]
   12cfc:	and	r0, r5, #3
   12d00:	str	r6, [sp, #28]
   12d04:	beq	12d28 <flatcc_builder_default_alloc@@Base+0x408>
   12d08:	mov	r8, #2
   12d0c:	add	r6, ip, r6
   12d10:	mov	r2, r8
   12d14:	mov	r7, #3
   12d18:	str	r6, [sp, #16]
   12d1c:	str	r8, [sp, #20]
   12d20:	str	r1, [sp, #32]
   12d24:	str	ip, [sp, #36]	; 0x24
   12d28:	cmp	r0, #0
   12d2c:	beq	12d54 <flatcc_builder_default_alloc@@Base+0x434>
   12d30:	ldr	r8, [pc, #360]	; 12ea0 <flatcc_builder_default_alloc@@Base+0x580>
   12d34:	add	r2, r2, #1
   12d38:	add	ip, sp, #88	; 0x58
   12d3c:	add	ip, ip, r2, lsl #3
   12d40:	add	r6, r6, r0
   12d44:	mov	r2, r7
   12d48:	strd	r6, [sp, #16]
   12d4c:	str	r8, [ip, #-72]	; 0xffffffb8
   12d50:	str	r0, [ip, #-68]	; 0xffffffbc
   12d54:	cmp	lr, #0
   12d58:	beq	12de8 <flatcc_builder_default_alloc@@Base+0x4c8>
   12d5c:	cmp	r3, #0
   12d60:	subne	r5, r1, r5
   12d64:	addne	lr, r3, lr
   12d68:	addne	r5, r5, r6
   12d6c:	bne	12d98 <flatcc_builder_default_alloc@@Base+0x478>
   12d70:	b	12e50 <flatcc_builder_default_alloc@@Base+0x530>
   12d74:	sub	ip, r5, r1
   12d78:	add	r0, ip, r0
   12d7c:	str	r0, [r1, #-4]
   12d80:	ldrb	r0, [r3]
   12d84:	cmp	r0, #0
   12d88:	beq	12e34 <flatcc_builder_default_alloc@@Base+0x514>
   12d8c:	add	r3, r3, #1
   12d90:	cmp	r3, lr
   12d94:	beq	12de4 <flatcc_builder_default_alloc@@Base+0x4c4>
   12d98:	ldr	r0, [r1], #4
   12d9c:	cmp	r0, #0
   12da0:	bne	12d74 <flatcc_builder_default_alloc@@Base+0x454>
   12da4:	ldrb	r0, [r3]
   12da8:	cmp	r0, #0
   12dac:	beq	12d8c <flatcc_builder_default_alloc@@Base+0x46c>
   12db0:	movw	r1, #38312	; 0x95a8
   12db4:	movt	r1, #1
   12db8:	ldr	r3, [pc, #228]	; 12ea4 <flatcc_builder_default_alloc@@Base+0x584>
   12dbc:	movw	r0, #38508	; 0x966c
   12dc0:	movt	r0, #1
   12dc4:	movw	r2, #1461	; 0x5b5
   12dc8:	bl	12060 <__assert_fail@plt>
   12dcc:	sub	r0, ip, r1
   12dd0:	add	r3, r3, #1
   12dd4:	add	r0, r0, r5
   12dd8:	cmp	lr, r3
   12ddc:	str	r0, [r1, #-4]
   12de0:	bne	12e58 <flatcc_builder_default_alloc@@Base+0x538>
   12de4:	ldr	r5, [r4, #136]	; 0x88
   12de8:	sub	r7, r5, r6
   12dec:	cmp	r7, r5
   12df0:	bge	12e84 <flatcc_builder_default_alloc@@Base+0x564>
   12df4:	mov	r3, r7
   12df8:	add	r1, sp, #24
   12dfc:	str	r6, [sp]
   12e00:	ldr	r0, [r4, #36]	; 0x24
   12e04:	ldr	r5, [r4, #44]	; 0x2c
   12e08:	blx	r5
   12e0c:	cmp	r0, #0
   12e10:	bne	12e80 <flatcc_builder_default_alloc@@Base+0x560>
   12e14:	mov	r0, r7
   12e18:	str	r7, [r4, #136]	; 0x88
   12e1c:	add	sp, sp, #88	; 0x58
   12e20:	ldrd	r4, [sp]
   12e24:	ldrd	r6, [sp, #8]
   12e28:	ldr	r8, [sp, #16]
   12e2c:	add	sp, sp, #20
   12e30:	pop	{pc}		; (ldr pc, [sp], #4)
   12e34:	movw	r1, #38312	; 0x95a8
   12e38:	movt	r1, #1
   12e3c:	ldr	r3, [pc, #96]	; 12ea4 <flatcc_builder_default_alloc@@Base+0x584>
   12e40:	movw	r0, #38492	; 0x965c
   12e44:	movt	r0, #1
   12e48:	movw	r2, #1457	; 0x5b1
   12e4c:	bl	12060 <__assert_fail@plt>
   12e50:	sub	ip, r1, r5
   12e54:	add	ip, ip, r6
   12e58:	ldr	r5, [r1], #4
   12e5c:	cmp	r5, #0
   12e60:	bne	12dcc <flatcc_builder_default_alloc@@Base+0x4ac>
   12e64:	movw	r1, #38312	; 0x95a8
   12e68:	movt	r1, #1
   12e6c:	ldr	r3, [pc, #48]	; 12ea4 <flatcc_builder_default_alloc@@Base+0x584>
   12e70:	movw	r0, #38504	; 0x9668
   12e74:	movt	r0, #1
   12e78:	movw	r2, #1463	; 0x5b7
   12e7c:	bl	12060 <__assert_fail@plt>
   12e80:	bl	12abc <flatcc_builder_default_alloc@@Base+0x19c>
   12e84:	movw	r1, #38312	; 0x95a8
   12e88:	movt	r1, #1
   12e8c:	ldr	r3, [pc, #20]	; 12ea8 <flatcc_builder_default_alloc@@Base+0x588>
   12e90:	movw	r0, #38504	; 0x9668
   12e94:	movt	r0, #1
   12e98:	movw	r2, #647	; 0x287
   12e9c:	bl	12060 <__assert_fail@plt>
   12ea0:	andeq	r8, r1, r0, lsl #30
   12ea4:	andeq	r9, r1, r0, lsl #2
   12ea8:	andeq	r8, r1, r4, lsl #29

00012eac <flatcc_builder_flush_vtable_cache@@Base>:
   12eac:	ldr	r3, [r0, #116]	; 0x74
   12eb0:	cmp	r3, #0
   12eb4:	bxeq	lr
   12eb8:	str	r4, [sp, #-8]!
   12ebc:	mov	r4, r0
   12ec0:	mov	r1, #0
   12ec4:	ldr	r0, [r0, #92]	; 0x5c
   12ec8:	ldr	r2, [r4, #96]	; 0x60
   12ecc:	str	lr, [sp, #4]
   12ed0:	bl	12030 <memset@plt>
   12ed4:	mov	r3, #16
   12ed8:	mov	r2, #0
   12edc:	strd	r2, [r4, #120]	; 0x78
   12ee0:	ldr	r4, [sp]
   12ee4:	add	sp, sp, #4
   12ee8:	pop	{pc}		; (ldr pc, [sp], #4)

00012eec <flatcc_builder_custom_init@@Base>:
   12eec:	strd	r4, [sp, #-24]!	; 0xffffffe8
   12ef0:	mov	r5, r3
   12ef4:	mov	r4, r0
   12ef8:	strd	r6, [sp, #8]
   12efc:	mov	r6, r1
   12f00:	mov	r7, r2
   12f04:	mov	r1, #0
   12f08:	mov	r2, #232	; 0xe8
   12f0c:	str	r8, [sp, #16]
   12f10:	str	lr, [sp, #20]
   12f14:	ldr	r8, [sp, #24]
   12f18:	bl	12030 <memset@plt>
   12f1c:	cmp	r6, #0
   12f20:	beq	12f5c <flatcc_builder_custom_init@@Base+0x70>
   12f24:	cmp	r5, #0
   12f28:	movw	r3, #10528	; 0x2920
   12f2c:	movt	r3, #1
   12f30:	str	r7, [r4, #36]	; 0x24
   12f34:	mov	r0, #0
   12f38:	moveq	r5, r3
   12f3c:	str	r8, [r4, #40]	; 0x28
   12f40:	str	r6, [r4, #44]	; 0x2c
   12f44:	str	r5, [r4, #48]	; 0x30
   12f48:	ldrd	r4, [sp]
   12f4c:	ldrd	r6, [sp, #8]
   12f50:	ldr	r8, [sp, #16]
   12f54:	add	sp, sp, #20
   12f58:	pop	{pc}		; (ldr pc, [sp], #4)
   12f5c:	mov	r3, #1
   12f60:	movw	r6, #34396	; 0x865c
   12f64:	movt	r6, #1
   12f68:	add	r7, r4, #188	; 0xbc
   12f6c:	str	r3, [r4, #184]	; 0xb8
   12f70:	b	12f24 <flatcc_builder_custom_init@@Base+0x38>

00012f74 <flatcc_builder_init@@Base>:
   12f74:	mov	r2, #232	; 0xe8
   12f78:	mov	r1, #0
   12f7c:	str	r4, [sp, #-8]!
   12f80:	str	lr, [sp, #4]
   12f84:	bl	12030 <memset@plt>
   12f88:	mov	r3, r0
   12f8c:	movw	r2, #10528	; 0x2920
   12f90:	movt	r2, #1
   12f94:	mov	r0, #1
   12f98:	ldr	r4, [sp]
   12f9c:	add	ip, r3, #188	; 0xbc
   12fa0:	movw	r1, #34396	; 0x865c
   12fa4:	movt	r1, #1
   12fa8:	add	sp, sp, #4
   12fac:	str	ip, [r3, #36]	; 0x24
   12fb0:	str	r1, [r3, #44]	; 0x2c
   12fb4:	str	r2, [r3, #48]	; 0x30
   12fb8:	str	r0, [r3, #184]	; 0xb8
   12fbc:	mov	r0, #0
   12fc0:	pop	{pc}		; (ldr pc, [sp], #4)

00012fc4 <flatcc_builder_custom_reset@@Base>:
   12fc4:	strd	r4, [sp, #-28]!	; 0xffffffe4
   12fc8:	mov	r5, #0
   12fcc:	mov	r4, r0
   12fd0:	strd	r6, [sp, #8]
   12fd4:	mov	r6, r0
   12fd8:	strd	r8, [sp, #16]
   12fdc:	mov	r8, r1
   12fe0:	mov	r9, r2
   12fe4:	str	lr, [sp, #24]
   12fe8:	sub	sp, sp, #12
   12fec:	b	1303c <flatcc_builder_custom_reset@@Base+0x78>
   12ff0:	cmp	r5, #5
   12ff4:	cmpne	r9, #0
   12ff8:	beq	13020 <flatcc_builder_custom_reset@@Base+0x5c>
   12ffc:	mov	r3, #1
   13000:	str	r5, [sp]
   13004:	mov	r2, r3
   13008:	ldr	r0, [r6, #40]	; 0x28
   1300c:	ldr	r7, [r6, #48]	; 0x30
   13010:	blx	r7
   13014:	cmp	r0, #0
   13018:	bne	13124 <flatcc_builder_custom_reset@@Base+0x160>
   1301c:	ldr	r0, [r4, #52]	; 0x34
   13020:	mov	r1, #0
   13024:	ldr	r2, [r4, #56]	; 0x38
   13028:	bl	12030 <memset@plt>
   1302c:	add	r5, r5, #1
   13030:	add	r4, r4, #8
   13034:	cmp	r5, #8
   13038:	beq	13074 <flatcc_builder_custom_reset@@Base+0xb0>
   1303c:	ldr	r0, [r4, #52]	; 0x34
   13040:	add	r1, r4, #52	; 0x34
   13044:	cmp	r0, #0
   13048:	bne	12ff0 <flatcc_builder_custom_reset@@Base+0x2c>
   1304c:	ldr	r3, [r4, #56]	; 0x38
   13050:	cmp	r3, #0
   13054:	beq	1302c <flatcc_builder_custom_reset@@Base+0x68>
   13058:	movw	r1, #38312	; 0x95a8
   1305c:	movt	r1, #1
   13060:	ldr	r3, [pc, #196]	; 1312c <flatcc_builder_custom_reset@@Base+0x168>
   13064:	movw	r0, #38524	; 0x967c
   13068:	movt	r0, #1
   1306c:	movw	r2, #434	; 0x1b2
   13070:	bl	12060 <__assert_fail@plt>
   13074:	mov	r2, #0
   13078:	ldr	r0, [r6, #52]	; 0x34
   1307c:	ldr	r3, [r6, #124]	; 0x7c
   13080:	ldr	r1, [r6, #60]	; 0x3c
   13084:	str	r0, [r6, #4]
   13088:	str	r2, [r6, #120]	; 0x78
   1308c:	cmp	r3, r2
   13090:	ldr	r2, [r6, #76]	; 0x4c
   13094:	movne	r3, #16
   13098:	strne	r3, [r6, #124]	; 0x7c
   1309c:	mov	r3, #0
   130a0:	cmp	r8, r3
   130a4:	str	r2, [r6]
   130a8:	str	r1, [r6, #16]
   130ac:	str	r3, [r6, #20]
   130b0:	str	r3, [r6, #24]
   130b4:	str	r3, [r6, #32]
   130b8:	strh	r3, [r6, #128]	; 0x80
   130bc:	str	r3, [r6, #136]	; 0x88
   130c0:	str	r3, [r6, #140]	; 0x8c
   130c4:	str	r3, [r6, #148]	; 0x94
   130c8:	str	r3, [r6, #152]	; 0x98
   130cc:	str	r3, [r6, #156]	; 0x9c
   130d0:	str	r3, [r6, #160]	; 0xa0
   130d4:	bne	130fc <flatcc_builder_custom_reset@@Base+0x138>
   130d8:	ldr	r0, [r6, #184]	; 0xb8
   130dc:	cmp	r0, #0
   130e0:	bne	13114 <flatcc_builder_custom_reset@@Base+0x150>
   130e4:	add	sp, sp, #12
   130e8:	ldrd	r4, [sp]
   130ec:	ldrd	r6, [sp, #8]
   130f0:	ldrd	r8, [sp, #16]
   130f4:	add	sp, sp, #24
   130f8:	pop	{pc}		; (ldr pc, [sp], #4)
   130fc:	ldr	r0, [r6, #184]	; 0xb8
   13100:	str	r3, [r6, #172]	; 0xac
   13104:	str	r3, [r6, #176]	; 0xb0
   13108:	str	r3, [r6, #180]	; 0xb4
   1310c:	cmp	r0, #0
   13110:	beq	130e4 <flatcc_builder_custom_reset@@Base+0x120>
   13114:	add	r0, r6, #188	; 0xbc
   13118:	bl	18508 <flatcc_emitter_reset@@Base>
   1311c:	mov	r0, #0
   13120:	b	130e4 <flatcc_builder_custom_reset@@Base+0x120>
   13124:	mvn	r0, #0
   13128:	b	130e4 <flatcc_builder_custom_reset@@Base+0x120>
   1312c:	andeq	r9, r1, r0, lsr #2

00013130 <flatcc_builder_reset@@Base>:
   13130:	mov	r2, #0
   13134:	mov	r1, r2
   13138:	b	12fc4 <flatcc_builder_custom_reset@@Base>

0001313c <flatcc_builder_clear@@Base>:
   1313c:	strd	r4, [sp, #-20]!	; 0xffffffec
   13140:	mov	r4, #0
   13144:	add	r5, r0, #52	; 0x34
   13148:	strd	r6, [sp, #8]
   1314c:	mov	r6, r0
   13150:	str	lr, [sp, #16]
   13154:	sub	sp, sp, #12
   13158:	mov	r3, #0
   1315c:	mov	r1, r5
   13160:	str	r4, [sp]
   13164:	mov	r2, r3
   13168:	add	r4, r4, #1
   1316c:	ldr	r0, [r6, #40]	; 0x28
   13170:	add	r5, r5, #8
   13174:	ldr	r7, [r6, #48]	; 0x30
   13178:	blx	r7
   1317c:	cmp	r4, #8
   13180:	bne	13158 <flatcc_builder_clear@@Base+0x1c>
   13184:	ldr	r3, [r6, #184]	; 0xb8
   13188:	cmp	r3, #0
   1318c:	bne	131b4 <flatcc_builder_clear@@Base+0x78>
   13190:	mov	r0, r6
   13194:	mov	r2, #232	; 0xe8
   13198:	mov	r1, #0
   1319c:	add	sp, sp, #12
   131a0:	ldrd	r4, [sp]
   131a4:	ldrd	r6, [sp, #8]
   131a8:	ldr	lr, [sp, #16]
   131ac:	add	sp, sp, #20
   131b0:	b	12030 <memset@plt>
   131b4:	add	r0, r6, #188	; 0xbc
   131b8:	bl	185dc <flatcc_emitter_clear@@Base>
   131bc:	b	13190 <flatcc_builder_clear@@Base+0x54>

000131c0 <flatcc_builder_enter_user_frame_ptr@@Base>:
   131c0:	strd	r4, [sp, #-20]!	; 0xffffffec
   131c4:	add	r4, r1, #3
   131c8:	mov	r5, r0
   131cc:	ldr	r3, [r0, #112]	; 0x70
   131d0:	bic	r4, r4, #3
   131d4:	strd	r6, [sp, #8]
   131d8:	add	r4, r4, #4
   131dc:	ldr	r6, [r0, #228]	; 0xe4
   131e0:	str	lr, [sp, #16]
   131e4:	sub	sp, sp, #12
   131e8:	add	r2, r6, r4
   131ec:	cmp	r2, r3
   131f0:	bls	13218 <flatcc_builder_enter_user_frame_ptr@@Base+0x58>
   131f4:	mov	ip, #7
   131f8:	add	r1, r0, #108	; 0x6c
   131fc:	ldr	r0, [r0, #40]	; 0x28
   13200:	mov	r3, #0
   13204:	str	ip, [sp]
   13208:	ldr	r7, [r5, #48]	; 0x30
   1320c:	blx	r7
   13210:	cmp	r0, #0
   13214:	bne	1326c <flatcc_builder_enter_user_frame_ptr@@Base+0xac>
   13218:	ldr	r7, [r5, #108]	; 0x6c
   1321c:	adds	r3, r7, r6
   13220:	moveq	r0, r3
   13224:	beq	13258 <flatcc_builder_enter_user_frame_ptr@@Base+0x98>
   13228:	mov	r2, r4
   1322c:	mov	r0, r3
   13230:	mov	r1, #0
   13234:	bl	12030 <memset@plt>
   13238:	ldr	r2, [r5, #224]	; 0xe0
   1323c:	add	r0, r0, #4
   13240:	str	r2, [r7, r6]
   13244:	ldr	r3, [r5, #228]	; 0xe4
   13248:	add	r4, r3, r4
   1324c:	add	r3, r3, #4
   13250:	str	r3, [r5, #224]	; 0xe0
   13254:	str	r4, [r5, #228]	; 0xe4
   13258:	add	sp, sp, #12
   1325c:	ldrd	r4, [sp]
   13260:	ldrd	r6, [sp, #8]
   13264:	add	sp, sp, #16
   13268:	pop	{pc}		; (ldr pc, [sp], #4)
   1326c:	bl	12a44 <flatcc_builder_default_alloc@@Base+0x124>

00013270 <flatcc_builder_enter_user_frame@@Base>:
   13270:	strd	r4, [sp, #-20]!	; 0xffffffec
   13274:	add	r4, r1, #3
   13278:	mov	r5, r0
   1327c:	ldr	r3, [r0, #112]	; 0x70
   13280:	bic	r4, r4, #3
   13284:	strd	r6, [sp, #8]
   13288:	add	r4, r4, #4
   1328c:	ldr	r6, [r0, #228]	; 0xe4
   13290:	str	lr, [sp, #16]
   13294:	sub	sp, sp, #12
   13298:	add	r2, r6, r4
   1329c:	cmp	r2, r3
   132a0:	bls	132c8 <flatcc_builder_enter_user_frame@@Base+0x58>
   132a4:	mov	ip, #7
   132a8:	add	r1, r0, #108	; 0x6c
   132ac:	ldr	r0, [r0, #40]	; 0x28
   132b0:	mov	r3, #0
   132b4:	str	ip, [sp]
   132b8:	ldr	r7, [r5, #48]	; 0x30
   132bc:	blx	r7
   132c0:	cmp	r0, #0
   132c4:	bne	13310 <flatcc_builder_enter_user_frame@@Base+0xa0>
   132c8:	ldr	r7, [r5, #108]	; 0x6c
   132cc:	adds	r0, r7, r6
   132d0:	beq	132fc <flatcc_builder_enter_user_frame@@Base+0x8c>
   132d4:	mov	r2, r4
   132d8:	mov	r1, #0
   132dc:	bl	12030 <memset@plt>
   132e0:	ldr	r3, [r5, #224]	; 0xe0
   132e4:	str	r3, [r7, r6]
   132e8:	ldr	r0, [r5, #228]	; 0xe4
   132ec:	add	r4, r0, r4
   132f0:	add	r0, r0, #4
   132f4:	str	r0, [r5, #224]	; 0xe0
   132f8:	str	r4, [r5, #228]	; 0xe4
   132fc:	add	sp, sp, #12
   13300:	ldrd	r4, [sp]
   13304:	ldrd	r6, [sp, #8]
   13308:	add	sp, sp, #16
   1330c:	pop	{pc}		; (ldr pc, [sp], #4)
   13310:	bl	12a44 <flatcc_builder_default_alloc@@Base+0x124>

00013314 <flatcc_builder_exit_user_frame@@Base>:
   13314:	ldr	r2, [r0, #224]	; 0xe0
   13318:	cmp	r2, #0
   1331c:	beq	13344 <flatcc_builder_exit_user_frame@@Base+0x30>
   13320:	mov	r3, r0
   13324:	sub	r0, r2, #4
   13328:	ldr	r1, [r3, #108]	; 0x6c
   1332c:	str	r0, [r3, #228]	; 0xe4
   13330:	add	r2, r1, r2
   13334:	ldr	r2, [r2, #-4]
   13338:	mov	r0, r2
   1333c:	str	r2, [r3, #224]	; 0xe0
   13340:	bx	lr
   13344:	str	r4, [sp, #-8]!
   13348:	str	lr, [sp, #4]
   1334c:	bl	12b0c <flatcc_builder_default_alloc@@Base+0x1ec>

00013350 <flatcc_builder_exit_user_frame_at@@Base>:
   13350:	ldr	r2, [r0, #224]	; 0xe0
   13354:	str	r4, [sp, #-8]!
   13358:	str	lr, [sp, #4]
   1335c:	cmp	r2, r1
   13360:	bcc	1339c <flatcc_builder_exit_user_frame_at@@Base+0x4c>
   13364:	cmp	r1, #0
   13368:	mov	r3, r0
   1336c:	str	r1, [r0, #224]	; 0xe0
   13370:	beq	133b8 <flatcc_builder_exit_user_frame_at@@Base+0x68>
   13374:	ldr	r2, [r3, #108]	; 0x6c
   13378:	sub	r0, r1, #4
   1337c:	ldr	r4, [sp]
   13380:	add	sp, sp, #4
   13384:	str	r0, [r3, #228]	; 0xe4
   13388:	add	r1, r2, r1
   1338c:	ldr	r2, [r1, #-4]
   13390:	mov	r0, r2
   13394:	str	r2, [r3, #224]	; 0xe0
   13398:	pop	{pc}		; (ldr pc, [sp], #4)
   1339c:	movw	r1, #38312	; 0x95a8
   133a0:	movt	r1, #1
   133a4:	ldr	r3, [pc, #16]	; 133bc <flatcc_builder_exit_user_frame_at@@Base+0x6c>
   133a8:	movw	r0, #38544	; 0x9690
   133ac:	movt	r0, #1
   133b0:	movw	r2, #551	; 0x227
   133b4:	bl	12060 <__assert_fail@plt>
   133b8:	bl	12b0c <flatcc_builder_default_alloc@@Base+0x1ec>
   133bc:	andeq	r9, r1, ip, lsr r1

000133c0 <flatcc_builder_get_current_user_frame@@Base>:
   133c0:	ldr	r0, [r0, #224]	; 0xe0
   133c4:	bx	lr

000133c8 <flatcc_builder_get_user_frame_ptr@@Base>:
   133c8:	ldr	r0, [r0, #108]	; 0x6c
   133cc:	add	r0, r0, r1
   133d0:	bx	lr

000133d4 <flatcc_builder_embed_buffer@@Base>:
   133d4:	strd	r4, [sp, #-32]!	; 0xffffffe0
   133d8:	mov	r5, r0
   133dc:	ldr	r0, [r0, #152]	; 0x98
   133e0:	strd	r6, [sp, #8]
   133e4:	mov	r7, r2
   133e8:	mov	r6, r3
   133ec:	strd	r8, [sp, #16]
   133f0:	str	sl, [sp, #24]
   133f4:	str	lr, [sp, #28]
   133f8:	sub	sp, sp, #88	; 0x58
   133fc:	ldrh	r4, [sp, #120]	; 0x78
   13400:	ldr	r8, [sp, #124]	; 0x7c
   13404:	cmp	r4, #4
   13408:	movcc	r4, #4
   1340c:	cmp	r1, #0
   13410:	and	r8, r8, #2
   13414:	bne	13424 <flatcc_builder_embed_buffer@@Base+0x50>
   13418:	ldrh	r1, [r5, #132]	; 0x84
   1341c:	cmp	r1, #0
   13420:	beq	13444 <flatcc_builder_embed_buffer@@Base+0x70>
   13424:	cmp	r1, r4
   13428:	movcs	r4, r1
   1342c:	cmp	r0, #0
   13430:	bne	13444 <flatcc_builder_embed_buffer@@Base+0x70>
   13434:	ldr	r9, [r5, #140]	; 0x8c
   13438:	sub	r1, r1, #1
   1343c:	ands	r1, r1, r9
   13440:	bne	1356c <flatcc_builder_embed_buffer@@Base+0x198>
   13444:	ldr	r1, [r5, #136]	; 0x88
   13448:	cmp	r8, #0
   1344c:	sub	r4, r4, #1
   13450:	movne	ip, #4
   13454:	moveq	ip, #0
   13458:	mov	r2, #0
   1345c:	cmp	r0, r2
   13460:	str	r2, [sp, #16]
   13464:	sub	r3, r1, r6
   13468:	str	r2, [sp, #20]
   1346c:	sub	r3, r3, ip
   13470:	and	r4, r4, r3
   13474:	add	r3, r6, r4
   13478:	str	r3, [sp, #12]
   1347c:	bne	1353c <flatcc_builder_embed_buffer@@Base+0x168>
   13480:	mov	lr, #2
   13484:	mov	r3, #1
   13488:	mov	r2, r0
   1348c:	cmp	r6, #0
   13490:	beq	134bc <flatcc_builder_embed_buffer@@Base+0xe8>
   13494:	add	r2, r2, #1
   13498:	add	ip, sp, #88	; 0x58
   1349c:	add	ip, ip, r2, lsl #3
   134a0:	add	r0, r0, r6
   134a4:	mov	r2, r3
   134a8:	str	r0, [sp, #16]
   134ac:	str	r7, [ip, #-72]	; 0xffffffb8
   134b0:	str	r6, [ip, #-68]	; 0xffffffbc
   134b4:	str	r3, [sp, #20]
   134b8:	mov	r3, lr
   134bc:	cmp	r4, #0
   134c0:	beq	134ec <flatcc_builder_embed_buffer@@Base+0x118>
   134c4:	ldr	lr, [pc, #312]	; 13604 <flatcc_builder_embed_buffer@@Base+0x230>
   134c8:	add	r2, r2, #1
   134cc:	add	ip, sp, #88	; 0x58
   134d0:	add	ip, ip, r2, lsl #3
   134d4:	add	r0, r0, r4
   134d8:	mov	r2, r3
   134dc:	str	r0, [sp, #16]
   134e0:	str	lr, [ip, #-72]	; 0xffffffb8
   134e4:	str	r4, [ip, #-68]	; 0xffffffbc
   134e8:	str	r3, [sp, #20]
   134ec:	sub	r4, r1, r0
   134f0:	cmp	r1, r4
   134f4:	ble	135c4 <flatcc_builder_embed_buffer@@Base+0x1f0>
   134f8:	mov	r3, r4
   134fc:	add	r1, sp, #24
   13500:	str	r0, [sp]
   13504:	ldr	r0, [r5, #36]	; 0x24
   13508:	ldr	r6, [r5, #44]	; 0x2c
   1350c:	blx	r6
   13510:	cmp	r0, #0
   13514:	bne	135c0 <flatcc_builder_embed_buffer@@Base+0x1ec>
   13518:	mov	r0, r4
   1351c:	str	r4, [r5, #136]	; 0x88
   13520:	add	sp, sp, #88	; 0x58
   13524:	ldrd	r4, [sp]
   13528:	ldrd	r6, [sp, #8]
   1352c:	ldrd	r8, [sp, #16]
   13530:	ldr	sl, [sp, #24]
   13534:	add	sp, sp, #28
   13538:	pop	{pc}		; (ldr pc, [sp], #4)
   1353c:	mov	ip, #4
   13540:	mov	r3, #1
   13544:	add	r8, sp, #12
   13548:	mov	r2, r3
   1354c:	mov	r0, ip
   13550:	mov	lr, #3
   13554:	str	ip, [sp, #16]
   13558:	str	r3, [sp, #20]
   1355c:	mov	r3, #2
   13560:	str	r8, [sp, #24]
   13564:	str	ip, [sp, #28]
   13568:	b	1348c <flatcc_builder_embed_buffer@@Base+0xb8>
   1356c:	ldr	r3, [pc, #144]	; 13604 <flatcc_builder_embed_buffer@@Base+0x230>
   13570:	add	r0, r9, r1
   13574:	mov	r2, #1
   13578:	cmp	r9, r0
   1357c:	str	r1, [sp, #16]
   13580:	str	r0, [r5, #140]	; 0x8c
   13584:	strd	r2, [sp, #20]
   13588:	str	r1, [sp, #28]
   1358c:	bgt	135e0 <flatcc_builder_embed_buffer@@Base+0x20c>
   13590:	mov	r3, r9
   13594:	str	r1, [sp]
   13598:	add	r1, sp, #24
   1359c:	ldr	r0, [r5, #36]	; 0x24
   135a0:	ldr	sl, [r5, #44]	; 0x2c
   135a4:	blx	sl
   135a8:	cmp	r0, #0
   135ac:	bne	13600 <flatcc_builder_embed_buffer@@Base+0x22c>
   135b0:	cmn	r9, #1
   135b4:	beq	135fc <flatcc_builder_embed_buffer@@Base+0x228>
   135b8:	ldr	r0, [r5, #152]	; 0x98
   135bc:	b	13444 <flatcc_builder_embed_buffer@@Base+0x70>
   135c0:	bl	12abc <flatcc_builder_default_alloc@@Base+0x19c>
   135c4:	movw	r1, #38312	; 0x95a8
   135c8:	movt	r1, #1
   135cc:	ldr	r3, [pc, #52]	; 13608 <flatcc_builder_embed_buffer@@Base+0x234>
   135d0:	movw	r0, #38504	; 0x9668
   135d4:	movt	r0, #1
   135d8:	movw	r2, #647	; 0x287
   135dc:	bl	12060 <__assert_fail@plt>
   135e0:	movw	r1, #38312	; 0x95a8
   135e4:	movt	r1, #1
   135e8:	movw	r0, #38504	; 0x9668
   135ec:	movt	r0, #1
   135f0:	sub	r3, r3, #152	; 0x98
   135f4:	movw	r2, #673	; 0x2a1
   135f8:	bl	12060 <__assert_fail@plt>
   135fc:	bl	12a94 <flatcc_builder_default_alloc@@Base+0x174>
   13600:	bl	12a6c <flatcc_builder_default_alloc@@Base+0x14c>
   13604:	andeq	r8, r1, r0, lsl #30
   13608:	andeq	r8, r1, r4, lsl #29

0001360c <flatcc_builder_create_buffer@@Base>:
   1360c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   13610:	mov	ip, #0
   13614:	mov	r5, r0
   13618:	strd	r6, [sp, #8]
   1361c:	mov	r7, r3
   13620:	strd	r8, [sp, #16]
   13624:	mov	r9, r1
   13628:	strd	sl, [sp, #24]
   1362c:	str	lr, [sp, #32]
   13630:	sub	sp, sp, #100	; 0x64
   13634:	ldrh	r4, [sp, #136]	; 0x88
   13638:	str	ip, [sp, #20]
   1363c:	ldr	r6, [sp, #140]	; 0x8c
   13640:	cmp	r4, #4
   13644:	movcc	r4, #4
   13648:	cmp	r2, #0
   1364c:	and	r8, r6, #1
   13650:	bne	13660 <flatcc_builder_create_buffer@@Base+0x54>
   13654:	ldrh	r2, [r0, #132]	; 0x84
   13658:	cmp	r2, ip
   1365c:	beq	13680 <flatcc_builder_create_buffer@@Base+0x74>
   13660:	cmp	r2, r4
   13664:	movcs	r4, r2
   13668:	cmp	r8, #0
   1366c:	bne	13680 <flatcc_builder_create_buffer@@Base+0x74>
   13670:	ldr	sl, [r5, #140]	; 0x8c
   13674:	sub	r2, r2, #1
   13678:	ands	r1, r2, sl
   1367c:	bne	13814 <flatcc_builder_create_buffer@@Base+0x208>
   13680:	ldrh	r3, [r5, #128]	; 0x80
   13684:	ldr	r0, [r5, #136]	; 0x88
   13688:	cmp	r3, r4
   1368c:	strhcc	r4, [r5, #128]	; 0x80
   13690:	cmp	r9, #0
   13694:	sub	r4, r4, #1
   13698:	ldrne	r3, [r9]
   1369c:	ldreq	r1, [sp, #20]
   136a0:	movne	r1, r3
   136a4:	strne	r3, [sp, #20]
   136a8:	sub	r3, r0, #4
   136ac:	cmp	r1, #0
   136b0:	movne	r1, #4
   136b4:	tst	r6, #2
   136b8:	movne	r2, #4
   136bc:	moveq	r2, #0
   136c0:	sub	r3, r3, r1
   136c4:	ands	r6, r6, #3
   136c8:	sub	r3, r3, r2
   136cc:	and	r4, r4, r3
   136d0:	bne	137ec <flatcc_builder_create_buffer@@Base+0x1e0>
   136d4:	mov	r3, r6
   136d8:	mov	r9, #3
   136dc:	mov	lr, #2
   136e0:	mov	r2, #1
   136e4:	mov	ip, #4
   136e8:	add	fp, sp, #96	; 0x60
   136ec:	add	r3, r3, #1
   136f0:	str	ip, [sp, #24]
   136f4:	add	r3, fp, r3, lsl #3
   136f8:	add	sl, sp, #12
   136fc:	mov	fp, #4
   13700:	cmp	r1, #0
   13704:	strd	sl, [r3, #-72]	; 0xffffffb8
   13708:	str	r2, [sp, #28]
   1370c:	beq	1373c <flatcc_builder_create_buffer@@Base+0x130>
   13710:	add	r2, r2, #1
   13714:	add	r3, sp, #96	; 0x60
   13718:	add	r3, r3, r2, lsl #3
   1371c:	add	ip, ip, r1
   13720:	add	sl, sp, #20
   13724:	mov	r2, lr
   13728:	str	ip, [sp, #24]
   1372c:	str	sl, [r3, #-72]	; 0xffffffb8
   13730:	str	r1, [r3, #-68]	; 0xffffffbc
   13734:	str	lr, [sp, #28]
   13738:	mov	lr, r9
   1373c:	cmp	r4, #0
   13740:	beq	1376c <flatcc_builder_create_buffer@@Base+0x160>
   13744:	ldr	r1, [pc, #372]	; 138c0 <flatcc_builder_create_buffer@@Base+0x2b4>
   13748:	add	r2, r2, #1
   1374c:	add	r3, sp, #96	; 0x60
   13750:	add	r3, r3, r2, lsl #3
   13754:	add	ip, ip, r4
   13758:	mov	r2, lr
   1375c:	str	ip, [sp, #24]
   13760:	str	r1, [r3, #-72]	; 0xffffffb8
   13764:	str	r4, [r3, #-68]	; 0xffffffbc
   13768:	str	lr, [sp, #28]
   1376c:	sub	r4, r0, ip
   13770:	cmp	r6, #0
   13774:	mov	r1, r4
   13778:	addne	r1, r4, #4
   1377c:	cmp	r8, #0
   13780:	sub	r7, r7, r1
   13784:	ldrne	r3, [r5, #144]	; 0x90
   13788:	str	r7, [sp, #12]
   1378c:	ldreq	r3, [r5, #140]	; 0x8c
   13790:	cmp	r0, r4
   13794:	sub	r3, r3, r1
   13798:	str	r3, [sp, #16]
   1379c:	ble	13864 <flatcc_builder_create_buffer@@Base+0x258>
   137a0:	mov	r3, r4
   137a4:	add	r1, sp, #32
   137a8:	str	ip, [sp]
   137ac:	ldr	r0, [r5, #36]	; 0x24
   137b0:	ldr	r6, [r5, #44]	; 0x2c
   137b4:	blx	r6
   137b8:	cmp	r0, #0
   137bc:	bne	13880 <flatcc_builder_create_buffer@@Base+0x274>
   137c0:	cmp	r4, #0
   137c4:	str	r4, [r5, #136]	; 0x88
   137c8:	beq	13884 <flatcc_builder_create_buffer@@Base+0x278>
   137cc:	mov	r0, r4
   137d0:	add	sp, sp, #100	; 0x64
   137d4:	ldrd	r4, [sp]
   137d8:	ldrd	r6, [sp, #8]
   137dc:	ldrd	r8, [sp, #16]
   137e0:	ldrd	sl, [sp, #24]
   137e4:	add	sp, sp, #32
   137e8:	pop	{pc}		; (ldr pc, [sp], #4)
   137ec:	mov	ip, #4
   137f0:	add	r3, sp, #16
   137f4:	mov	r9, ip
   137f8:	mov	lr, #3
   137fc:	mov	r2, #2
   13800:	str	r3, [sp, #32]
   13804:	mov	r3, #1
   13808:	str	ip, [sp, #36]	; 0x24
   1380c:	mov	ip, #8
   13810:	b	136e8 <flatcc_builder_create_buffer@@Base+0xdc>
   13814:	ldr	r3, [pc, #164]	; 138c0 <flatcc_builder_create_buffer@@Base+0x2b4>
   13818:	add	r0, sl, r1
   1381c:	mov	r2, #1
   13820:	cmp	sl, r0
   13824:	str	r1, [sp, #24]
   13828:	str	r0, [r5, #140]	; 0x8c
   1382c:	strd	r2, [sp, #28]
   13830:	str	r1, [sp, #36]	; 0x24
   13834:	bgt	138a4 <flatcc_builder_create_buffer@@Base+0x298>
   13838:	mov	r3, sl
   1383c:	str	r1, [sp]
   13840:	add	r1, sp, #32
   13844:	ldr	r0, [r5, #36]	; 0x24
   13848:	ldr	fp, [r5, #44]	; 0x2c
   1384c:	blx	fp
   13850:	cmp	r0, #0
   13854:	bne	138a0 <flatcc_builder_create_buffer@@Base+0x294>
   13858:	cmn	sl, #1
   1385c:	bne	13680 <flatcc_builder_create_buffer@@Base+0x74>
   13860:	bl	12a94 <flatcc_builder_default_alloc@@Base+0x174>
   13864:	movw	r1, #38312	; 0x95a8
   13868:	movt	r1, #1
   1386c:	ldr	r3, [pc, #80]	; 138c4 <flatcc_builder_create_buffer@@Base+0x2b8>
   13870:	movw	r0, #38504	; 0x9668
   13874:	movt	r0, #1
   13878:	movw	r2, #647	; 0x287
   1387c:	bl	12060 <__assert_fail@plt>
   13880:	bl	12abc <flatcc_builder_default_alloc@@Base+0x19c>
   13884:	movw	r1, #38312	; 0x95a8
   13888:	movt	r1, #1
   1388c:	ldr	r3, [pc, #52]	; 138c8 <flatcc_builder_create_buffer@@Base+0x2bc>
   13890:	movw	r0, #38504	; 0x9668
   13894:	movt	r0, #1
   13898:	mov	r2, #772	; 0x304
   1389c:	bl	12060 <__assert_fail@plt>
   138a0:	bl	12a6c <flatcc_builder_default_alloc@@Base+0x14c>
   138a4:	movw	r1, #38312	; 0x95a8
   138a8:	movt	r1, #1
   138ac:	movw	r0, #38504	; 0x9668
   138b0:	movt	r0, #1
   138b4:	sub	r3, r3, #152	; 0x98
   138b8:	movw	r2, #673	; 0x2a1
   138bc:	bl	12060 <__assert_fail@plt>
   138c0:	andeq	r8, r1, r0, lsl #30
   138c4:	andeq	r8, r1, r4, lsl #29
   138c8:	andeq	r9, r1, r0, ror #2

000138cc <flatcc_builder_create_struct@@Base>:
   138cc:	cmp	r3, #0
   138d0:	strd	r4, [sp, #-16]!
   138d4:	str	r6, [sp, #8]
   138d8:	str	lr, [sp, #12]
   138dc:	sub	sp, sp, #80	; 0x50
   138e0:	beq	139e4 <flatcc_builder_create_struct@@Base+0x118>
   138e4:	mov	r4, r0
   138e8:	mov	r0, r2
   138ec:	ldrh	r2, [r4, #128]	; 0x80
   138f0:	ldr	ip, [r4, #136]	; 0x88
   138f4:	cmp	r2, r3
   138f8:	mov	r2, #0
   138fc:	strhcc	r3, [r4, #128]	; 0x80
   13900:	sub	r5, ip, r0
   13904:	sub	r3, r3, #1
   13908:	cmp	r0, r2
   1390c:	and	r3, r3, r5
   13910:	str	r2, [sp, #8]
   13914:	str	r2, [sp, #12]
   13918:	bne	13998 <flatcc_builder_create_struct@@Base+0xcc>
   1391c:	cmp	r3, #0
   13920:	movne	r1, r2
   13924:	movne	r0, r3
   13928:	movne	r2, #1
   1392c:	beq	139c4 <flatcc_builder_create_struct@@Base+0xf8>
   13930:	ldr	lr, [pc, #200]	; 13a00 <flatcc_builder_create_struct@@Base+0x134>
   13934:	add	r5, sp, #80	; 0x50
   13938:	add	r1, r1, #1
   1393c:	add	r1, r5, r1, lsl #3
   13940:	sub	r5, ip, r0
   13944:	str	r0, [sp, #8]
   13948:	str	r2, [sp, #12]
   1394c:	str	lr, [r1, #-72]	; 0xffffffb8
   13950:	str	r3, [r1, #-68]	; 0xffffffbc
   13954:	cmp	ip, r5
   13958:	ble	139c4 <flatcc_builder_create_struct@@Base+0xf8>
   1395c:	mov	r3, r5
   13960:	add	r1, sp, #16
   13964:	str	r0, [sp]
   13968:	ldr	r0, [r4, #36]	; 0x24
   1396c:	ldr	r6, [r4, #44]	; 0x2c
   13970:	blx	r6
   13974:	cmp	r0, #0
   13978:	bne	139e0 <flatcc_builder_create_struct@@Base+0x114>
   1397c:	mov	r0, r5
   13980:	str	r5, [r4, #136]	; 0x88
   13984:	add	sp, sp, #80	; 0x50
   13988:	ldrd	r4, [sp]
   1398c:	ldr	r6, [sp, #8]
   13990:	add	sp, sp, #12
   13994:	pop	{pc}		; (ldr pc, [sp], #4)
   13998:	mov	r2, #1
   1399c:	cmp	r3, #0
   139a0:	str	r0, [sp, #8]
   139a4:	str	r2, [sp, #12]
   139a8:	str	r1, [sp, #16]
   139ac:	movne	r1, r2
   139b0:	movne	r2, #2
   139b4:	str	r0, [sp, #20]
   139b8:	addne	r0, r0, r3
   139bc:	beq	13954 <flatcc_builder_create_struct@@Base+0x88>
   139c0:	b	13930 <flatcc_builder_create_struct@@Base+0x64>
   139c4:	movw	r1, #38312	; 0x95a8
   139c8:	movt	r1, #1
   139cc:	ldr	r3, [pc, #48]	; 13a04 <flatcc_builder_create_struct@@Base+0x138>
   139d0:	movw	r0, #38504	; 0x9668
   139d4:	movt	r0, #1
   139d8:	movw	r2, #647	; 0x287
   139dc:	bl	12060 <__assert_fail@plt>
   139e0:	bl	12abc <flatcc_builder_default_alloc@@Base+0x19c>
   139e4:	movw	r1, #38312	; 0x95a8
   139e8:	movt	r1, #1
   139ec:	ldr	r3, [pc, #20]	; 13a08 <flatcc_builder_create_struct@@Base+0x13c>
   139f0:	movw	r0, #38576	; 0x96b0
   139f4:	movt	r0, #1
   139f8:	movw	r2, #783	; 0x30f
   139fc:	bl	12060 <__assert_fail@plt>
   13a00:	andeq	r8, r1, r0, lsl #30
   13a04:	andeq	r8, r1, r4, lsl #29
   13a08:	andeq	r9, r1, r0, lsl #3

00013a0c <flatcc_builder_start_buffer@@Base>:
   13a0c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   13a10:	mov	r5, r1
   13a14:	mov	r4, r0
   13a18:	ldr	r1, [r0, #156]	; 0x9c
   13a1c:	strd	r6, [sp, #8]
   13a20:	mov	r6, r3
   13a24:	mov	r7, r2
   13a28:	ldr	r3, [r0, #160]	; 0xa0
   13a2c:	strd	r8, [sp, #16]
   13a30:	ldrh	r8, [r0, #128]	; 0x80
   13a34:	add	r2, r1, #1
   13a38:	strd	sl, [sp, #24]
   13a3c:	str	lr, [sp, #32]
   13a40:	sub	sp, sp, #12
   13a44:	cmp	r2, r3
   13a48:	str	r2, [r0, #156]	; 0x9c
   13a4c:	ble	13b98 <flatcc_builder_start_buffer@@Base+0x18c>
   13a50:	ldr	r3, [r0, #176]	; 0xb0
   13a54:	cmp	r3, #0
   13a58:	cmpgt	r2, r3
   13a5c:	movgt	r3, #1
   13a60:	movle	r3, #0
   13a64:	bgt	13ba8 <flatcc_builder_start_buffer@@Base+0x19c>
   13a68:	add	r1, r1, r1, lsl #3
   13a6c:	ldr	r0, [r0, #88]	; 0x58
   13a70:	lsl	r9, r1, #2
   13a74:	add	r2, r9, #36	; 0x24
   13a78:	cmp	r2, r0
   13a7c:	bls	13aa0 <flatcc_builder_start_buffer@@Base+0x94>
   13a80:	mov	ip, #4
   13a84:	add	r1, r4, #84	; 0x54
   13a88:	ldr	r0, [r4, #40]	; 0x28
   13a8c:	str	ip, [sp]
   13a90:	ldr	sl, [r4, #48]	; 0x30
   13a94:	blx	sl
   13a98:	cmp	r0, #0
   13a9c:	bne	13bb0 <flatcc_builder_start_buffer@@Base+0x1a4>
   13aa0:	ldr	r3, [r4, #84]	; 0x54
   13aa4:	add	r3, r3, r9
   13aa8:	cmp	r3, #0
   13aac:	str	r3, [r4, #32]
   13ab0:	beq	13ba8 <flatcc_builder_start_buffer@@Base+0x19c>
   13ab4:	ldr	r2, [r4, #88]	; 0x58
   13ab8:	movw	r0, #36409	; 0x8e39
   13abc:	movt	r0, #14563	; 0x38e3
   13ac0:	ldr	r1, [r4, #176]	; 0xb0
   13ac4:	umull	r0, r2, r0, r2
   13ac8:	lsr	r2, r2, #3
   13acc:	cmp	r1, #0
   13ad0:	cmpgt	r2, r1
   13ad4:	movgt	r2, r1
   13ad8:	str	r2, [r4, #160]	; 0xa0
   13adc:	ldr	sl, [pc, #208]	; 13bb4 <flatcc_builder_start_buffer@@Base+0x1a8>
   13ae0:	mov	r0, #0
   13ae4:	mvn	lr, #3
   13ae8:	cmp	r5, r0
   13aec:	ldr	r2, [r4, #20]
   13af0:	ldr	ip, [r4, #28]
   13af4:	moveq	r5, sl
   13af8:	ldrh	r9, [r4, #130]	; 0x82
   13afc:	ldrh	fp, [r4, #132]	; 0x84
   13b00:	ldr	r1, [r4, #148]	; 0x94
   13b04:	ldr	sl, [r4, #152]	; 0x98
   13b08:	str	r2, [r3, #8]
   13b0c:	add	r2, r2, ip
   13b10:	add	r2, r2, #7
   13b14:	strh	r9, [r3, #12]
   13b18:	bic	r2, r2, #7
   13b1c:	strh	r8, [r4, #130]	; 0x82
   13b20:	ldrh	r8, [r4, #164]	; 0xa4
   13b24:	ldr	r9, [r4, #136]	; 0x88
   13b28:	stm	r3, {ip, lr}
   13b2c:	mov	ip, #1
   13b30:	str	r0, [r4, #20]
   13b34:	str	r2, [r4, #28]
   13b38:	add	r2, r1, ip
   13b3c:	strh	ip, [r4, #128]	; 0x80
   13b40:	ldr	lr, [r4, #144]	; 0x90
   13b44:	strh	fp, [r3, #34]	; 0x22
   13b48:	strh	r7, [r4, #132]	; 0x84
   13b4c:	ldr	r7, [r4, #168]	; 0xa8
   13b50:	strh	r8, [r3, #32]
   13b54:	strh	r6, [r4, #164]	; 0xa4
   13b58:	str	lr, [r3, #20]
   13b5c:	str	sl, [r3, #28]
   13b60:	str	r9, [r4, #144]	; 0x90
   13b64:	str	r2, [r4, #148]	; 0x94
   13b68:	str	r1, [r4, #152]	; 0x98
   13b6c:	str	r7, [r3, #16]
   13b70:	ldr	r2, [r5]
   13b74:	str	r2, [r4, #168]	; 0xa8
   13b78:	strh	ip, [r3, #14]
   13b7c:	add	sp, sp, #12
   13b80:	ldrd	r4, [sp]
   13b84:	ldrd	r6, [sp, #8]
   13b88:	ldrd	r8, [sp, #16]
   13b8c:	ldrd	sl, [sp, #24]
   13b90:	add	sp, sp, #32
   13b94:	pop	{pc}		; (ldr pc, [sp], #4)
   13b98:	ldr	r3, [r0, #32]
   13b9c:	add	r3, r3, #36	; 0x24
   13ba0:	str	r3, [r0, #32]
   13ba4:	b	13adc <flatcc_builder_start_buffer@@Base+0xd0>
   13ba8:	mvn	r0, #0
   13bac:	b	13b7c <flatcc_builder_start_buffer@@Base+0x170>
   13bb0:	bl	12a44 <flatcc_builder_default_alloc@@Base+0x124>
   13bb4:	andeq	r8, r1, r0, lsl #30

00013bb8 <flatcc_builder_end_buffer@@Base>:
   13bb8:	ldr	ip, [r0, #32]
   13bbc:	strd	r4, [sp, #-16]!
   13bc0:	mov	r4, r0
   13bc4:	ldrh	r2, [r0, #164]	; 0xa4
   13bc8:	ldr	r0, [r0, #152]	; 0x98
   13bcc:	ldrh	ip, [ip, #14]
   13bd0:	and	r2, r2, #2
   13bd4:	str	r6, [sp, #8]
   13bd8:	str	lr, [sp, #12]
   13bdc:	sub	sp, sp, #8
   13be0:	cmp	r0, #0
   13be4:	moveq	r0, r2
   13be8:	orrne	r0, r2, #1
   13bec:	cmp	ip, #1
   13bf0:	bne	13cd8 <flatcc_builder_end_buffer@@Base+0x120>
   13bf4:	ldrh	r2, [r4, #132]	; 0x84
   13bf8:	mov	r3, r1
   13bfc:	add	r1, r4, #168	; 0xa8
   13c00:	ldrh	ip, [r4, #128]	; 0x80
   13c04:	cmp	r2, ip
   13c08:	movhi	ip, r2
   13c0c:	strhhi	r2, [r4, #128]	; 0x80
   13c10:	str	ip, [sp]
   13c14:	str	r0, [sp, #4]
   13c18:	mov	r0, r4
   13c1c:	bl	1360c <flatcc_builder_create_buffer@@Base>
   13c20:	subs	r5, r0, #0
   13c24:	beq	13cc0 <flatcc_builder_end_buffer@@Base+0x108>
   13c28:	mov	r1, #0
   13c2c:	ldr	r0, [r4, #16]
   13c30:	ldr	r3, [r4, #32]
   13c34:	ldr	r2, [r4, #20]
   13c38:	ldrh	lr, [r3, #32]
   13c3c:	ldr	ip, [r3, #16]
   13c40:	ldr	r6, [r3, #20]
   13c44:	ldr	r3, [r3, #28]
   13c48:	str	r6, [r4, #144]	; 0x90
   13c4c:	strh	lr, [r4, #164]	; 0xa4
   13c50:	str	r3, [r4, #152]	; 0x98
   13c54:	str	ip, [r4, #168]	; 0xa8
   13c58:	bl	12030 <memset@plt>
   13c5c:	ldr	r3, [r4, #32]
   13c60:	ldr	r0, [r4, #60]	; 0x3c
   13c64:	ldr	r2, [r4, #64]	; 0x40
   13c68:	ldr	ip, [r3]
   13c6c:	ldmib	r3, {r1, lr}
   13c70:	add	r0, r0, ip
   13c74:	sub	r2, r2, ip
   13c78:	str	r0, [r4, #16]
   13c7c:	cmp	r2, r1
   13c80:	ldrh	r0, [r4, #128]	; 0x80
   13c84:	movcs	r2, r1
   13c88:	str	lr, [r4, #20]
   13c8c:	str	ip, [r4, #28]
   13c90:	ldrh	ip, [r4, #130]	; 0x82
   13c94:	str	r2, [r4, #24]
   13c98:	ldr	r2, [r4, #156]	; 0x9c
   13c9c:	str	r1, [r3, #4]
   13ca0:	cmp	r0, ip
   13ca4:	sub	r0, r3, #36	; 0x24
   13ca8:	strhcc	ip, [r4, #128]	; 0x80
   13cac:	ldrh	r1, [r3, #12]
   13cb0:	sub	r3, r2, #1
   13cb4:	str	r0, [r4, #32]
   13cb8:	strh	r1, [r4, #130]	; 0x82
   13cbc:	str	r3, [r4, #156]	; 0x9c
   13cc0:	mov	r0, r5
   13cc4:	add	sp, sp, #8
   13cc8:	ldrd	r4, [sp]
   13ccc:	ldr	r6, [sp, #8]
   13cd0:	add	sp, sp, #12
   13cd4:	pop	{pc}		; (ldr pc, [sp], #4)
   13cd8:	movw	r1, #38312	; 0x95a8
   13cdc:	movt	r1, #1
   13ce0:	ldr	r3, [pc, #12]	; 13cf4 <flatcc_builder_end_buffer@@Base+0x13c>
   13ce4:	movw	r0, #38588	; 0x96bc
   13ce8:	movt	r0, #1
   13cec:	movw	r2, #838	; 0x346
   13cf0:	bl	12060 <__assert_fail@plt>
   13cf4:	andeq	r9, r1, r0, lsr #3

00013cf8 <flatcc_builder_start_struct@@Base>:
   13cf8:	strd	r4, [sp, #-24]!	; 0xffffffe8
   13cfc:	mov	r5, r1
   13d00:	mov	r4, r0
   13d04:	ldr	r1, [r0, #156]	; 0x9c
   13d08:	ldr	r3, [r0, #160]	; 0xa0
   13d0c:	strd	r6, [sp, #8]
   13d10:	mov	r6, r2
   13d14:	str	r8, [sp, #16]
   13d18:	add	r2, r1, #1
   13d1c:	str	lr, [sp, #20]
   13d20:	sub	sp, sp, #8
   13d24:	cmp	r2, r3
   13d28:	str	r2, [r0, #156]	; 0x9c
   13d2c:	ble	13e4c <flatcc_builder_start_struct@@Base+0x154>
   13d30:	ldr	r3, [r0, #176]	; 0xb0
   13d34:	cmp	r3, #0
   13d38:	cmpgt	r2, r3
   13d3c:	movgt	r3, #1
   13d40:	movle	r3, #0
   13d44:	bgt	13eb8 <flatcc_builder_start_struct@@Base+0x1c0>
   13d48:	add	r1, r1, r1, lsl #3
   13d4c:	ldr	r0, [r0, #88]	; 0x58
   13d50:	lsl	r7, r1, #2
   13d54:	add	r2, r7, #36	; 0x24
   13d58:	cmp	r2, r0
   13d5c:	bls	13d80 <flatcc_builder_start_struct@@Base+0x88>
   13d60:	mov	ip, #4
   13d64:	add	r1, r4, #84	; 0x54
   13d68:	ldr	r0, [r4, #40]	; 0x28
   13d6c:	str	ip, [sp]
   13d70:	ldr	r8, [r4, #48]	; 0x30
   13d74:	blx	r8
   13d78:	cmp	r0, #0
   13d7c:	bne	13ec0 <flatcc_builder_start_struct@@Base+0x1c8>
   13d80:	ldr	r1, [r4, #84]	; 0x54
   13d84:	add	r1, r1, r7
   13d88:	cmp	r1, #0
   13d8c:	str	r1, [r4, #32]
   13d90:	beq	13eb8 <flatcc_builder_start_struct@@Base+0x1c0>
   13d94:	ldr	r3, [r4, #88]	; 0x58
   13d98:	movw	r0, #36409	; 0x8e39
   13d9c:	movt	r0, #14563	; 0x38e3
   13da0:	ldr	r2, [r4, #176]	; 0xb0
   13da4:	umull	r0, r3, r0, r3
   13da8:	lsr	r3, r3, #3
   13dac:	cmp	r2, #0
   13db0:	cmpgt	r3, r2
   13db4:	movgt	r3, r2
   13db8:	str	r3, [r4, #160]	; 0xa0
   13dbc:	ldr	r3, [r4, #20]
   13dc0:	mvn	lr, #3
   13dc4:	ldr	ip, [r4, #28]
   13dc8:	ldrh	r7, [r4, #130]	; 0x82
   13dcc:	ldr	r2, [r4, #64]	; 0x40
   13dd0:	ldr	r0, [r4, #60]	; 0x3c
   13dd4:	str	r3, [r1, #8]
   13dd8:	add	r3, r3, ip
   13ddc:	add	r3, r3, #7
   13de0:	strh	r7, [r1, #12]
   13de4:	mov	r7, #0
   13de8:	bic	r3, r3, #7
   13dec:	strh	r6, [r4, #130]	; 0x82
   13df0:	mvn	r6, #3
   13df4:	sub	r2, r2, r3
   13df8:	stm	r1, {ip, lr}
   13dfc:	mov	ip, #2
   13e00:	cmp	r2, lr
   13e04:	add	r0, r0, r3
   13e08:	str	r7, [r4, #20]
   13e0c:	movhi	r2, lr
   13e10:	str	r3, [r4, #28]
   13e14:	strh	ip, [r1, #14]
   13e18:	strls	r2, [r4, #24]
   13e1c:	strhi	lr, [r4, #24]
   13e20:	cmp	r5, r2
   13e24:	str	r0, [r4, #16]
   13e28:	str	r6, [r1, #4]
   13e2c:	str	r5, [r4, #20]
   13e30:	bcs	13e5c <flatcc_builder_start_struct@@Base+0x164>
   13e34:	add	sp, sp, #8
   13e38:	ldrd	r4, [sp]
   13e3c:	ldrd	r6, [sp, #8]
   13e40:	ldr	r8, [sp, #16]
   13e44:	add	sp, sp, #20
   13e48:	pop	{pc}		; (ldr pc, [sp], #4)
   13e4c:	ldr	r1, [r0, #32]
   13e50:	add	r1, r1, #36	; 0x24
   13e54:	str	r1, [r0, #32]
   13e58:	b	13dbc <flatcc_builder_start_struct@@Base+0xc4>
   13e5c:	mov	ip, #1
   13e60:	add	r1, r4, #60	; 0x3c
   13e64:	ldr	r0, [r4, #40]	; 0x28
   13e68:	add	r2, r5, ip
   13e6c:	add	r2, r2, r3
   13e70:	mov	r3, ip
   13e74:	str	ip, [sp]
   13e78:	ldr	r5, [r4, #48]	; 0x30
   13e7c:	blx	r5
   13e80:	cmp	r0, #0
   13e84:	bne	13eb8 <flatcc_builder_start_struct@@Base+0x1c0>
   13e88:	ldr	r0, [r4, #28]
   13e8c:	ldr	r2, [r4, #32]
   13e90:	ldr	r3, [r4, #64]	; 0x40
   13e94:	ldr	r1, [r4, #60]	; 0x3c
   13e98:	sub	r3, r3, r0
   13e9c:	cmp	r3, r6
   13ea0:	movhi	r3, r6
   13ea4:	add	r0, r1, r0
   13ea8:	str	r0, [r4, #16]
   13eac:	str	r3, [r4, #24]
   13eb0:	str	r6, [r2, #4]
   13eb4:	b	13e34 <flatcc_builder_start_struct@@Base+0x13c>
   13eb8:	mov	r0, #0
   13ebc:	b	13e34 <flatcc_builder_start_struct@@Base+0x13c>
   13ec0:	bl	12a44 <flatcc_builder_default_alloc@@Base+0x124>

00013ec4 <flatcc_builder_struct_edit@@Base>:
   13ec4:	ldr	r0, [r0, #16]
   13ec8:	bx	lr

00013ecc <flatcc_builder_end_struct@@Base>:
   13ecc:	ldr	r3, [r0, #32]
   13ed0:	strd	r4, [sp, #-16]!
   13ed4:	ldrh	r3, [r3, #14]
   13ed8:	str	r6, [sp, #8]
   13edc:	str	lr, [sp, #12]
   13ee0:	sub	sp, sp, #80	; 0x50
   13ee4:	cmp	r3, #2
   13ee8:	bne	14090 <flatcc_builder_end_struct@@Base+0x1c4>
   13eec:	ldrh	r3, [r0, #130]	; 0x82
   13ef0:	mov	r4, r0
   13ef4:	ldr	r1, [r0, #16]
   13ef8:	ldr	r0, [r0, #20]
   13efc:	cmp	r3, #0
   13f00:	beq	14074 <flatcc_builder_end_struct@@Base+0x1a8>
   13f04:	ldrh	r2, [r4, #128]	; 0x80
   13f08:	ldr	ip, [r4, #136]	; 0x88
   13f0c:	cmp	r2, r3
   13f10:	mov	r2, #0
   13f14:	strhcc	r3, [r4, #128]	; 0x80
   13f18:	sub	r5, ip, r0
   13f1c:	sub	r3, r3, #1
   13f20:	cmp	r0, r2
   13f24:	and	r3, r3, r5
   13f28:	str	r2, [sp, #8]
   13f2c:	str	r2, [sp, #12]
   13f30:	bne	14028 <flatcc_builder_end_struct@@Base+0x15c>
   13f34:	cmp	r3, #0
   13f38:	movne	r1, r2
   13f3c:	movne	r0, r3
   13f40:	movne	r2, #1
   13f44:	beq	14054 <flatcc_builder_end_struct@@Base+0x188>
   13f48:	ldr	lr, [pc, #348]	; 140ac <flatcc_builder_end_struct@@Base+0x1e0>
   13f4c:	add	r5, sp, #80	; 0x50
   13f50:	add	r1, r1, #1
   13f54:	add	r1, r5, r1, lsl #3
   13f58:	sub	r5, ip, r0
   13f5c:	str	r0, [sp, #8]
   13f60:	str	r2, [sp, #12]
   13f64:	str	lr, [r1, #-72]	; 0xffffffb8
   13f68:	str	r3, [r1, #-68]	; 0xffffffbc
   13f6c:	cmp	ip, r5
   13f70:	ble	14054 <flatcc_builder_end_struct@@Base+0x188>
   13f74:	add	r1, sp, #16
   13f78:	mov	r3, r5
   13f7c:	str	r0, [sp]
   13f80:	ldr	r0, [r4, #36]	; 0x24
   13f84:	ldr	r6, [r4, #44]	; 0x2c
   13f88:	blx	r6
   13f8c:	subs	r1, r0, #0
   13f90:	bne	14070 <flatcc_builder_end_struct@@Base+0x1a4>
   13f94:	cmp	r5, #0
   13f98:	str	r5, [r4, #136]	; 0x88
   13f9c:	beq	14010 <flatcc_builder_end_struct@@Base+0x144>
   13fa0:	ldr	r0, [r4, #16]
   13fa4:	ldr	r2, [r4, #20]
   13fa8:	bl	12030 <memset@plt>
   13fac:	ldr	r3, [r4, #32]
   13fb0:	ldr	r0, [r4, #60]	; 0x3c
   13fb4:	ldr	r2, [r4, #64]	; 0x40
   13fb8:	ldr	ip, [r3]
   13fbc:	ldmib	r3, {r1, lr}
   13fc0:	add	r0, r0, ip
   13fc4:	sub	r2, r2, ip
   13fc8:	str	r0, [r4, #16]
   13fcc:	cmp	r2, r1
   13fd0:	ldrh	r0, [r4, #128]	; 0x80
   13fd4:	movcs	r2, r1
   13fd8:	str	lr, [r4, #20]
   13fdc:	str	ip, [r4, #28]
   13fe0:	ldrh	ip, [r4, #130]	; 0x82
   13fe4:	str	r2, [r4, #24]
   13fe8:	ldr	r2, [r4, #156]	; 0x9c
   13fec:	str	r1, [r3, #4]
   13ff0:	cmp	r0, ip
   13ff4:	sub	r0, r3, #36	; 0x24
   13ff8:	strhcc	ip, [r4, #128]	; 0x80
   13ffc:	ldrh	r1, [r3, #12]
   14000:	sub	r3, r2, #1
   14004:	str	r0, [r4, #32]
   14008:	strh	r1, [r4, #130]	; 0x82
   1400c:	str	r3, [r4, #156]	; 0x9c
   14010:	mov	r0, r5
   14014:	add	sp, sp, #80	; 0x50
   14018:	ldrd	r4, [sp]
   1401c:	ldr	r6, [sp, #8]
   14020:	add	sp, sp, #12
   14024:	pop	{pc}		; (ldr pc, [sp], #4)
   14028:	mov	r2, #1
   1402c:	cmp	r3, #0
   14030:	str	r0, [sp, #8]
   14034:	str	r2, [sp, #12]
   14038:	str	r1, [sp, #16]
   1403c:	movne	r1, r2
   14040:	movne	r2, #2
   14044:	str	r0, [sp, #20]
   14048:	addne	r0, r0, r3
   1404c:	beq	13f6c <flatcc_builder_end_struct@@Base+0xa0>
   14050:	b	13f48 <flatcc_builder_end_struct@@Base+0x7c>
   14054:	movw	r1, #38312	; 0x95a8
   14058:	movt	r1, #1
   1405c:	ldr	r3, [pc, #76]	; 140b0 <flatcc_builder_end_struct@@Base+0x1e4>
   14060:	movw	r0, #38504	; 0x9668
   14064:	movt	r0, #1
   14068:	movw	r2, #647	; 0x287
   1406c:	bl	12060 <__assert_fail@plt>
   14070:	bl	12abc <flatcc_builder_default_alloc@@Base+0x19c>
   14074:	movw	r1, #38312	; 0x95a8
   14078:	movt	r1, #1
   1407c:	ldr	r3, [pc, #48]	; 140b4 <flatcc_builder_end_struct@@Base+0x1e8>
   14080:	movw	r0, #38576	; 0x96b0
   14084:	movt	r0, #1
   14088:	movw	r2, #783	; 0x30f
   1408c:	bl	12060 <__assert_fail@plt>
   14090:	movw	r1, #38312	; 0x95a8
   14094:	movt	r1, #1
   14098:	ldr	r3, [pc, #24]	; 140b8 <flatcc_builder_end_struct@@Base+0x1ec>
   1409c:	movw	r0, #38632	; 0x96e8
   140a0:	movt	r0, #1
   140a4:	mov	r2, #872	; 0x368
   140a8:	bl	12060 <__assert_fail@plt>
   140ac:	andeq	r8, r1, r0, lsl #30
   140b0:	andeq	r8, r1, r4, lsl #29
   140b4:	andeq	r9, r1, r0, lsl #3
   140b8:			; <UNDEFINED> instruction: 0x000191bc

000140bc <flatcc_builder_extend_vector@@Base>:
   140bc:	ldr	ip, [r0, #32]
   140c0:	strd	r4, [sp, #-20]!	; 0xffffffec
   140c4:	mov	r4, r0
   140c8:	ldr	r3, [ip, #20]
   140cc:	ldr	r0, [ip, #24]
   140d0:	strd	r6, [sp, #8]
   140d4:	str	lr, [sp, #16]
   140d8:	sub	sp, sp, #12
   140dc:	adds	r3, r1, r3
   140e0:	movcs	r5, #1
   140e4:	movcc	r5, #0
   140e8:	cmp	r0, r3
   140ec:	orrcc	r5, r5, #1
   140f0:	cmp	r5, #0
   140f4:	bne	141a0 <flatcc_builder_extend_vector@@Base+0xe4>
   140f8:	ldr	r2, [ip, #16]
   140fc:	ldr	r6, [r4, #20]
   14100:	str	r3, [ip, #20]
   14104:	ldr	r3, [r4, #24]
   14108:	mla	r2, r2, r1, r6
   1410c:	cmp	r2, r3
   14110:	str	r2, [r4, #20]
   14114:	bcs	14134 <flatcc_builder_extend_vector@@Base+0x78>
   14118:	ldr	r0, [r4, #16]
   1411c:	add	r0, r0, r6
   14120:	add	sp, sp, #12
   14124:	ldrd	r4, [sp]
   14128:	ldrd	r6, [sp, #8]
   1412c:	add	sp, sp, #16
   14130:	pop	{pc}		; (ldr pc, [sp], #4)
   14134:	ldr	ip, [r4, #28]
   14138:	mov	r0, #1
   1413c:	add	r1, r4, #60	; 0x3c
   14140:	mov	r3, r0
   14144:	str	r0, [sp]
   14148:	ldr	r7, [r4, #48]	; 0x30
   1414c:	add	ip, ip, r0
   14150:	ldr	r0, [r4, #40]	; 0x28
   14154:	add	r2, ip, r2
   14158:	blx	r7
   1415c:	cmp	r0, #0
   14160:	bne	14198 <flatcc_builder_extend_vector@@Base+0xdc>
   14164:	ldr	r2, [r4, #28]
   14168:	ldr	r0, [r4, #60]	; 0x3c
   1416c:	ldr	r3, [r4, #64]	; 0x40
   14170:	add	r0, r0, r2
   14174:	sub	r3, r3, r2
   14178:	mvn	r2, #3
   1417c:	str	r0, [r4, #16]
   14180:	cmn	r3, #4
   14184:	mvnhi	r3, #3
   14188:	str	r3, [r4, #24]
   1418c:	ldr	r3, [r4, #32]
   14190:	str	r2, [r3, #4]
   14194:	b	1411c <flatcc_builder_extend_vector@@Base+0x60>
   14198:	mov	r0, r5
   1419c:	b	14120 <flatcc_builder_extend_vector@@Base+0x64>
   141a0:	bl	12ae4 <flatcc_builder_default_alloc@@Base+0x1c4>

000141a4 <flatcc_builder_vector_push@@Base>:
   141a4:	ldr	r3, [r0, #32]
   141a8:	strd	r4, [sp, #-24]!	; 0xffffffe8
   141ac:	ldrh	r2, [r3, #14]
   141b0:	strd	r6, [sp, #8]
   141b4:	str	r8, [sp, #16]
   141b8:	str	lr, [sp, #20]
   141bc:	sub	sp, sp, #8
   141c0:	cmp	r2, #4
   141c4:	bne	142c8 <flatcc_builder_vector_push@@Base+0x124>
   141c8:	mov	r6, r1
   141cc:	ldr	r2, [r3, #20]
   141d0:	ldr	r1, [r3, #24]
   141d4:	cmp	r2, r1
   141d8:	bhi	142ac <flatcc_builder_vector_push@@Base+0x108>
   141dc:	add	r2, r2, #1
   141e0:	ldr	r5, [r3, #16]
   141e4:	mov	r4, r0
   141e8:	ldr	r7, [r0, #20]
   141ec:	str	r2, [r3, #20]
   141f0:	ldr	r3, [r0, #24]
   141f4:	add	ip, r5, r7
   141f8:	cmp	ip, r3
   141fc:	str	ip, [r0, #20]
   14200:	bcs	14240 <flatcc_builder_vector_push@@Base+0x9c>
   14204:	ldr	r3, [r0, #16]
   14208:	adds	r3, r3, r7
   1420c:	beq	14224 <flatcc_builder_vector_push@@Base+0x80>
   14210:	mov	r0, r3
   14214:	mov	r2, r5
   14218:	mov	r1, r6
   1421c:	bl	11fac <memcpy@plt>
   14220:	mov	r3, r0
   14224:	mov	r0, r3
   14228:	add	sp, sp, #8
   1422c:	ldrd	r4, [sp]
   14230:	ldrd	r6, [sp, #8]
   14234:	ldr	r8, [sp, #16]
   14238:	add	sp, sp, #20
   1423c:	pop	{pc}		; (ldr pc, [sp], #4)
   14240:	ldr	r2, [r4, #28]
   14244:	mov	r0, #1
   14248:	add	r1, r4, #60	; 0x3c
   1424c:	mov	r3, r0
   14250:	str	r0, [sp]
   14254:	ldr	r8, [r4, #48]	; 0x30
   14258:	add	r2, r2, r0
   1425c:	ldr	r0, [r4, #40]	; 0x28
   14260:	add	r2, r2, ip
   14264:	blx	r8
   14268:	cmp	r0, #0
   1426c:	bne	142a4 <flatcc_builder_vector_push@@Base+0x100>
   14270:	ldr	r1, [r4, #28]
   14274:	ldr	r3, [r4, #60]	; 0x3c
   14278:	ldr	r2, [r4, #64]	; 0x40
   1427c:	add	r3, r3, r1
   14280:	sub	r2, r2, r1
   14284:	mvn	r1, #3
   14288:	str	r3, [r4, #16]
   1428c:	cmn	r2, #4
   14290:	mvnhi	r2, #3
   14294:	str	r2, [r4, #24]
   14298:	ldr	r2, [r4, #32]
   1429c:	str	r1, [r2, #4]
   142a0:	b	14208 <flatcc_builder_vector_push@@Base+0x64>
   142a4:	mov	r3, #0
   142a8:	b	14224 <flatcc_builder_vector_push@@Base+0x80>
   142ac:	movw	r1, #38312	; 0x95a8
   142b0:	movt	r1, #1
   142b4:	ldr	r3, [pc, #40]	; 142e4 <flatcc_builder_vector_push@@Base+0x140>
   142b8:	movw	r0, #38720	; 0x9740
   142bc:	movt	r0, #1
   142c0:	mov	r2, #908	; 0x38c
   142c4:	bl	12060 <__assert_fail@plt>
   142c8:	movw	r1, #38312	; 0x95a8
   142cc:	movt	r1, #1
   142d0:	ldr	r3, [pc, #12]	; 142e4 <flatcc_builder_vector_push@@Base+0x140>
   142d4:	movw	r0, #38676	; 0x9714
   142d8:	movt	r0, #1
   142dc:	movw	r2, #907	; 0x38b
   142e0:	bl	12060 <__assert_fail@plt>
   142e4:	ldrdeq	r9, [r1], -r8

000142e8 <flatcc_builder_append_vector@@Base>:
   142e8:	strd	r4, [sp, #-28]!	; 0xffffffe4
   142ec:	mov	r5, r0
   142f0:	ldr	r0, [r0, #32]
   142f4:	ldrh	r3, [r0, #14]
   142f8:	strd	r6, [sp, #8]
   142fc:	strd	r8, [sp, #16]
   14300:	str	lr, [sp, #24]
   14304:	sub	sp, sp, #12
   14308:	cmp	r3, #4
   1430c:	bne	1440c <flatcc_builder_append_vector@@Base+0x124>
   14310:	mov	r6, r1
   14314:	ldr	r1, [r0, #20]
   14318:	ldr	r4, [r0, #24]
   1431c:	adds	r1, r2, r1
   14320:	movcs	r3, #1
   14324:	movcc	r3, #0
   14328:	cmp	r4, r1
   1432c:	movcs	r4, r3
   14330:	orrcc	r4, r3, #1
   14334:	cmp	r4, #0
   14338:	bne	14408 <flatcc_builder_append_vector@@Base+0x120>
   1433c:	ldr	r7, [r0, #16]
   14340:	ldr	r8, [r5, #20]
   14344:	ldr	r3, [r5, #24]
   14348:	mul	r7, r7, r2
   1434c:	str	r1, [r0, #20]
   14350:	add	ip, r7, r8
   14354:	cmp	ip, r3
   14358:	str	ip, [r5, #20]
   1435c:	bcs	1439c <flatcc_builder_append_vector@@Base+0xb4>
   14360:	ldr	r3, [r5, #16]
   14364:	adds	r3, r3, r8
   14368:	beq	14380 <flatcc_builder_append_vector@@Base+0x98>
   1436c:	mov	r0, r3
   14370:	mov	r2, r7
   14374:	mov	r1, r6
   14378:	bl	11fac <memcpy@plt>
   1437c:	mov	r3, r0
   14380:	mov	r0, r3
   14384:	add	sp, sp, #12
   14388:	ldrd	r4, [sp]
   1438c:	ldrd	r6, [sp, #8]
   14390:	ldrd	r8, [sp, #16]
   14394:	add	sp, sp, #24
   14398:	pop	{pc}		; (ldr pc, [sp], #4)
   1439c:	ldr	r2, [r5, #28]
   143a0:	mov	r0, #1
   143a4:	add	r1, r5, #60	; 0x3c
   143a8:	mov	r3, r0
   143ac:	str	r0, [sp]
   143b0:	ldr	r9, [r5, #48]	; 0x30
   143b4:	add	r2, r2, r0
   143b8:	ldr	r0, [r5, #40]	; 0x28
   143bc:	add	r2, r2, ip
   143c0:	blx	r9
   143c4:	cmp	r0, #0
   143c8:	bne	14400 <flatcc_builder_append_vector@@Base+0x118>
   143cc:	ldr	r1, [r5, #28]
   143d0:	ldr	r3, [r5, #60]	; 0x3c
   143d4:	ldr	r2, [r5, #64]	; 0x40
   143d8:	add	r3, r3, r1
   143dc:	sub	r2, r2, r1
   143e0:	mvn	r1, #3
   143e4:	str	r3, [r5, #16]
   143e8:	cmn	r2, #4
   143ec:	mvnhi	r2, #3
   143f0:	str	r2, [r5, #24]
   143f4:	ldr	r2, [r5, #32]
   143f8:	str	r1, [r2, #4]
   143fc:	b	14364 <flatcc_builder_append_vector@@Base+0x7c>
   14400:	mov	r3, r4
   14404:	b	14380 <flatcc_builder_append_vector@@Base+0x98>
   14408:	bl	12ae4 <flatcc_builder_default_alloc@@Base+0x1c4>
   1440c:	movw	r1, #38312	; 0x95a8
   14410:	movt	r1, #1
   14414:	ldr	r3, [pc, #12]	; 14428 <flatcc_builder_append_vector@@Base+0x140>
   14418:	movw	r0, #38676	; 0x9714
   1441c:	movt	r0, #1
   14420:	movw	r2, #915	; 0x393
   14424:	bl	12060 <__assert_fail@plt>
   14428:	strdeq	r9, [r1], -r4

0001442c <flatcc_builder_extend_offset_vector@@Base>:
   1442c:	ldr	ip, [r0, #32]
   14430:	strd	r4, [sp, #-20]!	; 0xffffffec
   14434:	mov	r4, r0
   14438:	ldr	r3, [ip, #20]
   1443c:	strd	r6, [sp, #8]
   14440:	str	lr, [sp, #16]
   14444:	sub	sp, sp, #12
   14448:	adds	r3, r1, r3
   1444c:	movcs	r2, #1
   14450:	movcc	r2, #0
   14454:	cmn	r3, #-1073741823	; 0xc0000001
   14458:	movls	r0, #0
   1445c:	movhi	r0, #1
   14460:	orrs	r5, r2, r0
   14464:	bne	1450c <flatcc_builder_extend_offset_vector@@Base+0xe0>
   14468:	ldr	r6, [r4, #20]
   1446c:	str	r3, [ip, #20]
   14470:	ldr	r3, [r4, #24]
   14474:	add	r2, r6, r1, lsl #2
   14478:	cmp	r2, r3
   1447c:	str	r2, [r4, #20]
   14480:	bcs	144a0 <flatcc_builder_extend_offset_vector@@Base+0x74>
   14484:	ldr	r0, [r4, #16]
   14488:	add	r0, r0, r6
   1448c:	add	sp, sp, #12
   14490:	ldrd	r4, [sp]
   14494:	ldrd	r6, [sp, #8]
   14498:	add	sp, sp, #16
   1449c:	pop	{pc}		; (ldr pc, [sp], #4)
   144a0:	ldr	ip, [r4, #28]
   144a4:	mov	r0, #1
   144a8:	add	r1, r4, #60	; 0x3c
   144ac:	mov	r3, r0
   144b0:	str	r0, [sp]
   144b4:	ldr	r7, [r4, #48]	; 0x30
   144b8:	add	ip, ip, r0
   144bc:	ldr	r0, [r4, #40]	; 0x28
   144c0:	add	r2, ip, r2
   144c4:	blx	r7
   144c8:	cmp	r0, #0
   144cc:	bne	14504 <flatcc_builder_extend_offset_vector@@Base+0xd8>
   144d0:	ldr	r2, [r4, #28]
   144d4:	ldr	r0, [r4, #60]	; 0x3c
   144d8:	ldr	r3, [r4, #64]	; 0x40
   144dc:	add	r0, r0, r2
   144e0:	sub	r3, r3, r2
   144e4:	mvn	r2, #3
   144e8:	str	r0, [r4, #16]
   144ec:	cmn	r3, #4
   144f0:	mvnhi	r3, #3
   144f4:	str	r3, [r4, #24]
   144f8:	ldr	r3, [r4, #32]
   144fc:	str	r2, [r3, #4]
   14500:	b	14488 <flatcc_builder_extend_offset_vector@@Base+0x5c>
   14504:	mov	r0, r5
   14508:	b	1448c <flatcc_builder_extend_offset_vector@@Base+0x60>
   1450c:	bl	12ae4 <flatcc_builder_default_alloc@@Base+0x1c4>

00014510 <flatcc_builder_offset_vector_push@@Base>:
   14510:	ldr	r2, [r0, #32]
   14514:	strd	r4, [sp, #-20]!	; 0xffffffec
   14518:	ldrh	r3, [r2, #14]
   1451c:	strd	r6, [sp, #8]
   14520:	str	lr, [sp, #16]
   14524:	sub	sp, sp, #12
   14528:	cmp	r3, #5
   1452c:	bne	145f0 <flatcc_builder_offset_vector_push@@Base+0xe0>
   14530:	ldr	r3, [r2, #20]
   14534:	cmn	r3, #-1073741823	; 0xc0000001
   14538:	beq	145e8 <flatcc_builder_offset_vector_push@@Base+0xd8>
   1453c:	ldr	r5, [r0, #20]
   14540:	mov	r6, r1
   14544:	add	r3, r3, #1
   14548:	mov	r4, r0
   1454c:	ldr	r1, [r0, #24]
   14550:	str	r3, [r2, #20]
   14554:	add	r3, r5, #4
   14558:	cmp	r3, r1
   1455c:	str	r3, [r0, #20]
   14560:	bcs	14584 <flatcc_builder_offset_vector_push@@Base+0x74>
   14564:	ldr	r3, [r0, #16]
   14568:	adds	r0, r3, r5
   1456c:	strne	r6, [r3, r5]
   14570:	add	sp, sp, #12
   14574:	ldrd	r4, [sp]
   14578:	ldrd	r6, [sp, #8]
   1457c:	add	sp, sp, #16
   14580:	pop	{pc}		; (ldr pc, [sp], #4)
   14584:	ldr	r2, [r4, #28]
   14588:	mov	r0, #1
   1458c:	add	r1, r4, #60	; 0x3c
   14590:	mov	r3, r0
   14594:	str	r0, [sp]
   14598:	ldr	r0, [r4, #40]	; 0x28
   1459c:	add	r2, r5, r2
   145a0:	ldr	r7, [r4, #48]	; 0x30
   145a4:	add	r2, r2, #5
   145a8:	blx	r7
   145ac:	cmp	r0, #0
   145b0:	bne	145e8 <flatcc_builder_offset_vector_push@@Base+0xd8>
   145b4:	ldr	r1, [r4, #28]
   145b8:	ldr	r3, [r4, #60]	; 0x3c
   145bc:	ldr	r2, [r4, #64]	; 0x40
   145c0:	add	r3, r3, r1
   145c4:	sub	r2, r2, r1
   145c8:	mvn	r1, #3
   145cc:	str	r3, [r4, #16]
   145d0:	cmn	r2, #4
   145d4:	mvnhi	r2, #3
   145d8:	str	r2, [r4, #24]
   145dc:	ldr	r2, [r4, #32]
   145e0:	str	r1, [r2, #4]
   145e4:	b	14568 <flatcc_builder_offset_vector_push@@Base+0x58>
   145e8:	mov	r0, #0
   145ec:	b	14570 <flatcc_builder_offset_vector_push@@Base+0x60>
   145f0:	movw	r1, #38312	; 0x95a8
   145f4:	movt	r1, #1
   145f8:	ldr	r3, [pc, #12]	; 1460c <flatcc_builder_offset_vector_push@@Base+0xfc>
   145fc:	movw	r0, #38784	; 0x9780
   14600:	movt	r0, #1
   14604:	movw	r2, #934	; 0x3a6
   14608:	bl	12060 <__assert_fail@plt>
   1460c:	andeq	r9, r1, r4, lsl r2

00014610 <flatcc_builder_append_offset_vector@@Base>:
   14610:	strd	r4, [sp, #-28]!	; 0xffffffe4
   14614:	mov	r5, r0
   14618:	ldr	r0, [r0, #32]
   1461c:	ldrh	r3, [r0, #14]
   14620:	strd	r6, [sp, #8]
   14624:	strd	r8, [sp, #16]
   14628:	str	lr, [sp, #24]
   1462c:	sub	sp, sp, #12
   14630:	cmp	r3, #5
   14634:	bne	1472c <flatcc_builder_append_offset_vector@@Base+0x11c>
   14638:	ldr	r3, [r0, #20]
   1463c:	mov	r7, r1
   14640:	adds	r1, r2, r3
   14644:	movcs	r4, #1
   14648:	movcc	r4, #0
   1464c:	cmn	r1, #-1073741823	; 0xc0000001
   14650:	movls	r3, #0
   14654:	movhi	r3, #1
   14658:	orrs	r4, r4, r3
   1465c:	bne	14728 <flatcc_builder_append_offset_vector@@Base+0x118>
   14660:	ldr	r8, [r5, #20]
   14664:	lsl	r6, r2, #2
   14668:	ldr	r3, [r5, #24]
   1466c:	str	r1, [r0, #20]
   14670:	add	ip, r6, r8
   14674:	cmp	ip, r3
   14678:	str	ip, [r5, #20]
   1467c:	bcs	146bc <flatcc_builder_append_offset_vector@@Base+0xac>
   14680:	ldr	r3, [r5, #16]
   14684:	adds	r3, r3, r8
   14688:	beq	146a0 <flatcc_builder_append_offset_vector@@Base+0x90>
   1468c:	mov	r0, r3
   14690:	mov	r2, r6
   14694:	mov	r1, r7
   14698:	bl	11fac <memcpy@plt>
   1469c:	mov	r3, r0
   146a0:	mov	r0, r3
   146a4:	add	sp, sp, #12
   146a8:	ldrd	r4, [sp]
   146ac:	ldrd	r6, [sp, #8]
   146b0:	ldrd	r8, [sp, #16]
   146b4:	add	sp, sp, #24
   146b8:	pop	{pc}		; (ldr pc, [sp], #4)
   146bc:	ldr	r2, [r5, #28]
   146c0:	mov	r0, #1
   146c4:	add	r1, r5, #60	; 0x3c
   146c8:	mov	r3, r0
   146cc:	str	r0, [sp]
   146d0:	ldr	r9, [r5, #48]	; 0x30
   146d4:	add	r2, r2, r0
   146d8:	ldr	r0, [r5, #40]	; 0x28
   146dc:	add	r2, r2, ip
   146e0:	blx	r9
   146e4:	cmp	r0, #0
   146e8:	bne	14720 <flatcc_builder_append_offset_vector@@Base+0x110>
   146ec:	ldr	r1, [r5, #28]
   146f0:	ldr	r3, [r5, #60]	; 0x3c
   146f4:	ldr	r2, [r5, #64]	; 0x40
   146f8:	add	r3, r3, r1
   146fc:	sub	r2, r2, r1
   14700:	mvn	r1, #3
   14704:	str	r3, [r5, #16]
   14708:	cmn	r2, #4
   1470c:	mvnhi	r2, #3
   14710:	str	r2, [r5, #24]
   14714:	ldr	r2, [r5, #32]
   14718:	str	r1, [r2, #4]
   1471c:	b	14684 <flatcc_builder_append_offset_vector@@Base+0x74>
   14720:	mov	r3, r4
   14724:	b	146a0 <flatcc_builder_append_offset_vector@@Base+0x90>
   14728:	bl	12ae4 <flatcc_builder_default_alloc@@Base+0x1c4>
   1472c:	movw	r1, #38312	; 0x95a8
   14730:	movt	r1, #1
   14734:	ldr	r3, [pc, #12]	; 14748 <flatcc_builder_append_offset_vector@@Base+0x138>
   14738:	movw	r0, #38784	; 0x9780
   1473c:	movt	r0, #1
   14740:	mov	r2, #948	; 0x3b4
   14744:	bl	12060 <__assert_fail@plt>
   14748:	andeq	r9, r1, r8, lsr r2

0001474c <flatcc_builder_extend_string@@Base>:
   1474c:	ldr	r2, [r0, #32]
   14750:	strd	r4, [sp, #-16]!
   14754:	ldrh	r3, [r2, #14]
   14758:	str	r6, [sp, #8]
   1475c:	str	lr, [sp, #12]
   14760:	sub	sp, sp, #8
   14764:	cmp	r3, #6
   14768:	bne	14824 <flatcc_builder_extend_string@@Base+0xd8>
   1476c:	ldr	r3, [r2, #20]
   14770:	adds	r3, r1, r3
   14774:	bcs	14820 <flatcc_builder_extend_string@@Base+0xd4>
   14778:	ldr	r5, [r0, #20]
   1477c:	mov	r4, r0
   14780:	str	r3, [r2, #20]
   14784:	ldr	r3, [r0, #24]
   14788:	add	r2, r1, r5
   1478c:	cmp	r2, r3
   14790:	str	r2, [r0, #20]
   14794:	bcs	147b4 <flatcc_builder_extend_string@@Base+0x68>
   14798:	ldr	r0, [r0, #16]
   1479c:	add	r0, r0, r5
   147a0:	add	sp, sp, #8
   147a4:	ldrd	r4, [sp]
   147a8:	ldr	r6, [sp, #8]
   147ac:	add	sp, sp, #12
   147b0:	pop	{pc}		; (ldr pc, [sp], #4)
   147b4:	ldr	ip, [r4, #28]
   147b8:	mov	r0, #1
   147bc:	add	r1, r4, #60	; 0x3c
   147c0:	mov	r3, r0
   147c4:	str	r0, [sp]
   147c8:	ldr	r6, [r4, #48]	; 0x30
   147cc:	add	ip, ip, r0
   147d0:	ldr	r0, [r4, #40]	; 0x28
   147d4:	add	r2, ip, r2
   147d8:	blx	r6
   147dc:	cmp	r0, #0
   147e0:	bne	14818 <flatcc_builder_extend_string@@Base+0xcc>
   147e4:	ldr	r2, [r4, #28]
   147e8:	ldr	r0, [r4, #60]	; 0x3c
   147ec:	ldr	r3, [r4, #64]	; 0x40
   147f0:	add	r0, r0, r2
   147f4:	sub	r3, r3, r2
   147f8:	mvn	r2, #3
   147fc:	str	r0, [r4, #16]
   14800:	cmn	r3, #4
   14804:	mvnhi	r3, #3
   14808:	str	r3, [r4, #24]
   1480c:	ldr	r3, [r4, #32]
   14810:	str	r2, [r3, #4]
   14814:	b	1479c <flatcc_builder_extend_string@@Base+0x50>
   14818:	mov	r0, #0
   1481c:	b	147a0 <flatcc_builder_extend_string@@Base+0x54>
   14820:	bl	12ae4 <flatcc_builder_default_alloc@@Base+0x1c4>
   14824:	movw	r1, #38312	; 0x95a8
   14828:	movt	r1, #1
   1482c:	ldr	r3, [pc, #12]	; 14840 <flatcc_builder_extend_string@@Base+0xf4>
   14830:	movw	r0, #38440	; 0x9628
   14834:	movt	r0, #1
   14838:	movw	r2, #957	; 0x3bd
   1483c:	bl	12060 <__assert_fail@plt>
   14840:	andeq	r9, r1, ip, asr r2

00014844 <flatcc_builder_append_string@@Base>:
   14844:	strd	r4, [sp, #-24]!	; 0xffffffe8
   14848:	strd	r6, [sp, #8]
   1484c:	mov	r6, r1
   14850:	ldr	r1, [r0, #32]
   14854:	str	r8, [sp, #16]
   14858:	str	lr, [sp, #20]
   1485c:	sub	sp, sp, #8
   14860:	ldrh	r3, [r1, #14]
   14864:	cmp	r3, #6
   14868:	bne	14948 <flatcc_builder_append_string@@Base+0x104>
   1486c:	ldr	r3, [r1, #20]
   14870:	mov	r5, r2
   14874:	adds	r3, r2, r3
   14878:	bcs	14944 <flatcc_builder_append_string@@Base+0x100>
   1487c:	ldr	r7, [r0, #20]
   14880:	mov	r4, r0
   14884:	str	r3, [r1, #20]
   14888:	ldr	r3, [r0, #24]
   1488c:	add	ip, r2, r7
   14890:	cmp	ip, r3
   14894:	str	ip, [r0, #20]
   14898:	bcs	148d8 <flatcc_builder_append_string@@Base+0x94>
   1489c:	ldr	r3, [r0, #16]
   148a0:	adds	r3, r3, r7
   148a4:	beq	148bc <flatcc_builder_append_string@@Base+0x78>
   148a8:	mov	r0, r3
   148ac:	mov	r2, r5
   148b0:	mov	r1, r6
   148b4:	bl	11fac <memcpy@plt>
   148b8:	mov	r3, r0
   148bc:	mov	r0, r3
   148c0:	add	sp, sp, #8
   148c4:	ldrd	r4, [sp]
   148c8:	ldrd	r6, [sp, #8]
   148cc:	ldr	r8, [sp, #16]
   148d0:	add	sp, sp, #20
   148d4:	pop	{pc}		; (ldr pc, [sp], #4)
   148d8:	ldr	r2, [r4, #28]
   148dc:	mov	r0, #1
   148e0:	add	r1, r4, #60	; 0x3c
   148e4:	mov	r3, r0
   148e8:	str	r0, [sp]
   148ec:	ldr	r8, [r4, #48]	; 0x30
   148f0:	add	r2, r2, r0
   148f4:	ldr	r0, [r4, #40]	; 0x28
   148f8:	add	r2, r2, ip
   148fc:	blx	r8
   14900:	cmp	r0, #0
   14904:	bne	1493c <flatcc_builder_append_string@@Base+0xf8>
   14908:	ldr	r1, [r4, #28]
   1490c:	ldr	r3, [r4, #60]	; 0x3c
   14910:	ldr	r2, [r4, #64]	; 0x40
   14914:	add	r3, r3, r1
   14918:	sub	r2, r2, r1
   1491c:	mvn	r1, #3
   14920:	str	r3, [r4, #16]
   14924:	cmn	r2, #4
   14928:	mvnhi	r2, #3
   1492c:	str	r2, [r4, #24]
   14930:	ldr	r2, [r4, #32]
   14934:	str	r1, [r2, #4]
   14938:	b	148a0 <flatcc_builder_append_string@@Base+0x5c>
   1493c:	mov	r3, #0
   14940:	b	148bc <flatcc_builder_append_string@@Base+0x78>
   14944:	bl	12ae4 <flatcc_builder_default_alloc@@Base+0x1c4>
   14948:	bl	12b34 <flatcc_builder_default_alloc@@Base+0x214>

0001494c <flatcc_builder_append_string_str@@Base>:
   1494c:	strd	r4, [sp, #-24]!	; 0xffffffe8
   14950:	mov	r4, r0
   14954:	mov	r0, r1
   14958:	strd	r6, [sp, #8]
   1495c:	mov	r6, r1
   14960:	str	r8, [sp, #16]
   14964:	str	lr, [sp, #20]
   14968:	sub	sp, sp, #8
   1496c:	bl	1200c <strlen@plt>
   14970:	ldr	r2, [r4, #32]
   14974:	ldrh	r3, [r2, #14]
   14978:	cmp	r3, #6
   1497c:	bne	14a58 <flatcc_builder_append_string_str@@Base+0x10c>
   14980:	ldr	r3, [r2, #20]
   14984:	mov	r5, r0
   14988:	adds	r3, r0, r3
   1498c:	bcs	14a54 <flatcc_builder_append_string_str@@Base+0x108>
   14990:	ldr	r7, [r4, #20]
   14994:	str	r3, [r2, #20]
   14998:	ldr	r3, [r4, #24]
   1499c:	add	ip, r0, r7
   149a0:	cmp	ip, r3
   149a4:	str	ip, [r4, #20]
   149a8:	bcs	149e8 <flatcc_builder_append_string_str@@Base+0x9c>
   149ac:	ldr	r3, [r4, #16]
   149b0:	adds	r3, r3, r7
   149b4:	beq	149cc <flatcc_builder_append_string_str@@Base+0x80>
   149b8:	mov	r0, r3
   149bc:	mov	r2, r5
   149c0:	mov	r1, r6
   149c4:	bl	11fac <memcpy@plt>
   149c8:	mov	r3, r0
   149cc:	mov	r0, r3
   149d0:	add	sp, sp, #8
   149d4:	ldrd	r4, [sp]
   149d8:	ldrd	r6, [sp, #8]
   149dc:	ldr	r8, [sp, #16]
   149e0:	add	sp, sp, #20
   149e4:	pop	{pc}		; (ldr pc, [sp], #4)
   149e8:	ldr	r2, [r4, #28]
   149ec:	mov	r0, #1
   149f0:	add	r1, r4, #60	; 0x3c
   149f4:	mov	r3, r0
   149f8:	str	r0, [sp]
   149fc:	ldr	r8, [r4, #48]	; 0x30
   14a00:	add	r2, r2, r0
   14a04:	ldr	r0, [r4, #40]	; 0x28
   14a08:	add	r2, r2, ip
   14a0c:	blx	r8
   14a10:	cmp	r0, #0
   14a14:	bne	14a4c <flatcc_builder_append_string_str@@Base+0x100>
   14a18:	ldr	r1, [r4, #28]
   14a1c:	ldr	r3, [r4, #60]	; 0x3c
   14a20:	ldr	r2, [r4, #64]	; 0x40
   14a24:	add	r3, r3, r1
   14a28:	sub	r2, r2, r1
   14a2c:	mvn	r1, #3
   14a30:	str	r3, [r4, #16]
   14a34:	cmn	r2, #4
   14a38:	mvnhi	r2, #3
   14a3c:	str	r2, [r4, #24]
   14a40:	ldr	r2, [r4, #32]
   14a44:	str	r1, [r2, #4]
   14a48:	b	149b0 <flatcc_builder_append_string_str@@Base+0x64>
   14a4c:	mov	r3, #0
   14a50:	b	149cc <flatcc_builder_append_string_str@@Base+0x80>
   14a54:	bl	12ae4 <flatcc_builder_default_alloc@@Base+0x1c4>
   14a58:	bl	12b34 <flatcc_builder_default_alloc@@Base+0x214>

00014a5c <flatcc_builder_append_string_strn@@Base>:
   14a5c:	strd	r4, [sp, #-24]!	; 0xffffffe8
   14a60:	mov	r4, r0
   14a64:	mov	r5, r2
   14a68:	strd	r6, [sp, #8]
   14a6c:	mov	r6, r1
   14a70:	mov	r1, #0
   14a74:	mov	r0, r6
   14a78:	str	r8, [sp, #16]
   14a7c:	str	lr, [sp, #20]
   14a80:	sub	sp, sp, #8
   14a84:	bl	1203c <memchr@plt>
   14a88:	ldr	r2, [r4, #32]
   14a8c:	cmp	r0, #0
   14a90:	subne	r5, r0, r6
   14a94:	ldrh	r3, [r2, #14]
   14a98:	cmp	r3, #6
   14a9c:	bne	14b74 <flatcc_builder_append_string_strn@@Base+0x118>
   14aa0:	ldr	r3, [r2, #20]
   14aa4:	adds	r3, r5, r3
   14aa8:	bcs	14b70 <flatcc_builder_append_string_strn@@Base+0x114>
   14aac:	ldr	r7, [r4, #20]
   14ab0:	str	r3, [r2, #20]
   14ab4:	ldr	r3, [r4, #24]
   14ab8:	add	ip, r5, r7
   14abc:	cmp	ip, r3
   14ac0:	str	ip, [r4, #20]
   14ac4:	bcs	14b04 <flatcc_builder_append_string_strn@@Base+0xa8>
   14ac8:	ldr	r3, [r4, #16]
   14acc:	adds	r3, r3, r7
   14ad0:	beq	14ae8 <flatcc_builder_append_string_strn@@Base+0x8c>
   14ad4:	mov	r0, r3
   14ad8:	mov	r2, r5
   14adc:	mov	r1, r6
   14ae0:	bl	11fac <memcpy@plt>
   14ae4:	mov	r3, r0
   14ae8:	mov	r0, r3
   14aec:	add	sp, sp, #8
   14af0:	ldrd	r4, [sp]
   14af4:	ldrd	r6, [sp, #8]
   14af8:	ldr	r8, [sp, #16]
   14afc:	add	sp, sp, #20
   14b00:	pop	{pc}		; (ldr pc, [sp], #4)
   14b04:	ldr	r2, [r4, #28]
   14b08:	mov	r0, #1
   14b0c:	add	r1, r4, #60	; 0x3c
   14b10:	mov	r3, r0
   14b14:	str	r0, [sp]
   14b18:	ldr	r8, [r4, #48]	; 0x30
   14b1c:	add	r2, r2, r0
   14b20:	ldr	r0, [r4, #40]	; 0x28
   14b24:	add	r2, r2, ip
   14b28:	blx	r8
   14b2c:	cmp	r0, #0
   14b30:	bne	14b68 <flatcc_builder_append_string_strn@@Base+0x10c>
   14b34:	ldr	r1, [r4, #28]
   14b38:	ldr	r3, [r4, #60]	; 0x3c
   14b3c:	ldr	r2, [r4, #64]	; 0x40
   14b40:	add	r3, r3, r1
   14b44:	sub	r2, r2, r1
   14b48:	mvn	r1, #3
   14b4c:	str	r3, [r4, #16]
   14b50:	cmn	r2, #4
   14b54:	mvnhi	r2, #3
   14b58:	str	r2, [r4, #24]
   14b5c:	ldr	r2, [r4, #32]
   14b60:	str	r1, [r2, #4]
   14b64:	b	14acc <flatcc_builder_append_string_strn@@Base+0x70>
   14b68:	mov	r3, #0
   14b6c:	b	14ae8 <flatcc_builder_append_string_strn@@Base+0x8c>
   14b70:	bl	12ae4 <flatcc_builder_default_alloc@@Base+0x1c4>
   14b74:	bl	12b34 <flatcc_builder_default_alloc@@Base+0x214>

00014b78 <flatcc_builder_truncate_vector@@Base>:
   14b78:	mov	r3, r0
   14b7c:	ldr	r0, [r0, #32]
   14b80:	str	r4, [sp, #-8]!
   14b84:	ldrh	r2, [r0, #14]
   14b88:	str	lr, [sp, #4]
   14b8c:	cmp	r2, #4
   14b90:	bne	14be0 <flatcc_builder_truncate_vector@@Base+0x68>
   14b94:	mov	lr, r1
   14b98:	ldr	r1, [r0, #20]
   14b9c:	cmp	r1, lr
   14ba0:	bcc	14bfc <flatcc_builder_truncate_vector@@Base+0x84>
   14ba4:	ldr	r2, [r0, #16]
   14ba8:	sub	ip, r1, lr
   14bac:	mov	r1, #0
   14bb0:	str	ip, [r0, #20]
   14bb4:	ldr	r0, [r3, #16]
   14bb8:	ldr	ip, [r3, #20]
   14bbc:	mul	r2, r2, lr
   14bc0:	sub	ip, ip, r2
   14bc4:	add	r0, r0, ip
   14bc8:	str	ip, [r3, #20]
   14bcc:	bl	12030 <memset@plt>
   14bd0:	ldr	r4, [sp]
   14bd4:	add	sp, sp, #4
   14bd8:	mov	r0, #0
   14bdc:	pop	{pc}		; (ldr pc, [sp], #4)
   14be0:	movw	r1, #38312	; 0x95a8
   14be4:	movt	r1, #1
   14be8:	ldr	r3, [pc, #40]	; 14c18 <flatcc_builder_truncate_vector@@Base+0xa0>
   14bec:	movw	r0, #38676	; 0x9714
   14bf0:	movt	r0, #1
   14bf4:	movw	r2, #985	; 0x3d9
   14bf8:	bl	12060 <__assert_fail@plt>
   14bfc:	movw	r1, #38312	; 0x95a8
   14c00:	movt	r1, #1
   14c04:	ldr	r3, [pc, #12]	; 14c18 <flatcc_builder_truncate_vector@@Base+0xa0>
   14c08:	movw	r0, #38836	; 0x97b4
   14c0c:	movt	r0, #1
   14c10:	movw	r2, #986	; 0x3da
   14c14:	bl	12060 <__assert_fail@plt>
   14c18:	andeq	r9, r1, ip, ror r2

00014c1c <flatcc_builder_truncate_offset_vector@@Base>:
   14c1c:	mov	r3, r0
   14c20:	ldr	r0, [r0, #32]
   14c24:	str	r4, [sp, #-8]!
   14c28:	ldrh	r2, [r0, #14]
   14c2c:	str	lr, [sp, #4]
   14c30:	cmp	r2, #5
   14c34:	bne	14c84 <flatcc_builder_truncate_offset_vector@@Base+0x68>
   14c38:	mov	lr, r1
   14c3c:	ldr	r1, [r0, #20]
   14c40:	cmp	r1, lr
   14c44:	bcc	14ca0 <flatcc_builder_truncate_offset_vector@@Base+0x84>
   14c48:	ldr	r2, [r0, #16]
   14c4c:	sub	ip, r1, lr
   14c50:	mov	r1, #0
   14c54:	str	ip, [r0, #20]
   14c58:	ldr	r0, [r3, #16]
   14c5c:	ldr	ip, [r3, #20]
   14c60:	mul	r2, r2, lr
   14c64:	sub	ip, ip, r2
   14c68:	add	r0, r0, ip
   14c6c:	str	ip, [r3, #20]
   14c70:	bl	12030 <memset@plt>
   14c74:	ldr	r4, [sp]
   14c78:	add	sp, sp, #4
   14c7c:	mov	r0, #0
   14c80:	pop	{pc}		; (ldr pc, [sp], #4)
   14c84:	movw	r1, #38312	; 0x95a8
   14c88:	movt	r1, #1
   14c8c:	ldr	r3, [pc, #40]	; 14cbc <flatcc_builder_truncate_offset_vector@@Base+0xa0>
   14c90:	movw	r0, #38784	; 0x9780
   14c94:	movt	r0, #1
   14c98:	movw	r2, #994	; 0x3e2
   14c9c:	bl	12060 <__assert_fail@plt>
   14ca0:	movw	r1, #38312	; 0x95a8
   14ca4:	movt	r1, #1
   14ca8:	ldr	r3, [pc, #12]	; 14cbc <flatcc_builder_truncate_offset_vector@@Base+0xa0>
   14cac:	movw	r0, #38872	; 0x97d8
   14cb0:	movt	r0, #1
   14cb4:	movw	r2, #995	; 0x3e3
   14cb8:	bl	12060 <__assert_fail@plt>
   14cbc:	muleq	r1, ip, r2

00014cc0 <flatcc_builder_truncate_string@@Base>:
   14cc0:	str	r4, [sp, #-8]!
   14cc4:	str	lr, [sp, #4]
   14cc8:	ldr	lr, [r0, #32]
   14ccc:	ldrh	r2, [lr, #14]
   14cd0:	cmp	r2, #6
   14cd4:	bne	14d24 <flatcc_builder_truncate_string@@Base+0x64>
   14cd8:	ldr	r2, [lr, #20]
   14cdc:	mov	ip, r1
   14ce0:	cmp	r2, r1
   14ce4:	bcc	14d40 <flatcc_builder_truncate_string@@Base+0x80>
   14ce8:	sub	r1, r2, r1
   14cec:	mov	r3, r0
   14cf0:	ldr	r0, [r0, #16]
   14cf4:	mov	r2, ip
   14cf8:	str	r1, [lr, #20]
   14cfc:	mov	r1, #0
   14d00:	ldr	lr, [r3, #20]
   14d04:	sub	ip, lr, ip
   14d08:	add	r0, r0, ip
   14d0c:	str	ip, [r3, #20]
   14d10:	bl	12030 <memset@plt>
   14d14:	ldr	r4, [sp]
   14d18:	add	sp, sp, #4
   14d1c:	mov	r0, #0
   14d20:	pop	{pc}		; (ldr pc, [sp], #4)
   14d24:	movw	r1, #38312	; 0x95a8
   14d28:	movt	r1, #1
   14d2c:	ldr	r3, [pc, #40]	; 14d5c <flatcc_builder_truncate_string@@Base+0x9c>
   14d30:	movw	r0, #38440	; 0x9628
   14d34:	movt	r0, #1
   14d38:	movw	r2, #1003	; 0x3eb
   14d3c:	bl	12060 <__assert_fail@plt>
   14d40:	movw	r1, #38312	; 0x95a8
   14d44:	movt	r1, #1
   14d48:	ldr	r3, [pc, #12]	; 14d5c <flatcc_builder_truncate_string@@Base+0x9c>
   14d4c:	movw	r0, #38932	; 0x9814
   14d50:	movt	r0, #1
   14d54:	mov	r2, #1004	; 0x3ec
   14d58:	bl	12060 <__assert_fail@plt>
   14d5c:	andeq	r9, r1, r4, asr #5

00014d60 <flatcc_builder_start_vector@@Base>:
   14d60:	strd	r4, [sp, #-28]!	; 0xffffffe4
   14d64:	mov	r4, r0
   14d68:	mov	r5, r3
   14d6c:	ldr	r0, [r0, #156]	; 0x9c
   14d70:	cmp	r2, #4
   14d74:	ldr	r3, [r4, #160]	; 0xa0
   14d78:	strd	r6, [sp, #8]
   14d7c:	movcs	r7, r2
   14d80:	movcc	r7, #4
   14d84:	mov	r6, r1
   14d88:	strd	r8, [sp, #16]
   14d8c:	add	r2, r0, #1
   14d90:	str	lr, [sp, #24]
   14d94:	sub	sp, sp, #12
   14d98:	cmp	r2, r3
   14d9c:	str	r2, [r4, #156]	; 0x9c
   14da0:	ble	14ebc <flatcc_builder_start_vector@@Base+0x15c>
   14da4:	ldr	r3, [r4, #176]	; 0xb0
   14da8:	cmp	r3, #0
   14dac:	cmpgt	r2, r3
   14db0:	movgt	r3, #1
   14db4:	movle	r3, #0
   14db8:	bgt	14ecc <flatcc_builder_start_vector@@Base+0x16c>
   14dbc:	add	r0, r0, r0, lsl #3
   14dc0:	ldr	r1, [r4, #88]	; 0x58
   14dc4:	lsl	r8, r0, #2
   14dc8:	add	r2, r8, #36	; 0x24
   14dcc:	cmp	r2, r1
   14dd0:	bls	14df4 <flatcc_builder_start_vector@@Base+0x94>
   14dd4:	mov	ip, #4
   14dd8:	add	r1, r4, #84	; 0x54
   14ddc:	ldr	r0, [r4, #40]	; 0x28
   14de0:	str	ip, [sp]
   14de4:	ldr	r9, [r4, #48]	; 0x30
   14de8:	blx	r9
   14dec:	cmp	r0, #0
   14df0:	bne	14ed4 <flatcc_builder_start_vector@@Base+0x174>
   14df4:	ldr	r3, [r4, #84]	; 0x54
   14df8:	add	r3, r3, r8
   14dfc:	cmp	r3, #0
   14e00:	str	r3, [r4, #32]
   14e04:	beq	14ecc <flatcc_builder_start_vector@@Base+0x16c>
   14e08:	ldr	r2, [r4, #88]	; 0x58
   14e0c:	movw	r0, #36409	; 0x8e39
   14e10:	movt	r0, #14563	; 0x38e3
   14e14:	ldr	r1, [r4, #176]	; 0xb0
   14e18:	umull	r0, r2, r0, r2
   14e1c:	lsr	r2, r2, #3
   14e20:	cmp	r1, #0
   14e24:	cmpgt	r2, r1
   14e28:	movgt	r2, r1
   14e2c:	str	r2, [r4, #160]	; 0xa0
   14e30:	ldr	r2, [r4, #20]
   14e34:	mvn	r9, #3
   14e38:	mov	ip, #0
   14e3c:	ldr	r0, [r4, #28]
   14e40:	ldrh	lr, [r4, #130]	; 0x82
   14e44:	ldr	r1, [r4, #64]	; 0x40
   14e48:	ldr	r8, [r4, #60]	; 0x3c
   14e4c:	str	r2, [r3, #8]
   14e50:	add	r2, r2, r0
   14e54:	add	r2, r2, #7
   14e58:	strh	lr, [r3, #12]
   14e5c:	bic	r2, r2, #7
   14e60:	strh	r7, [r4, #130]	; 0x82
   14e64:	mov	r7, #4
   14e68:	sub	r1, r1, r2
   14e6c:	str	r0, [r3]
   14e70:	mov	r0, ip
   14e74:	cmp	r1, r9
   14e78:	add	lr, r8, r2
   14e7c:	str	ip, [r4, #20]
   14e80:	movhi	r1, r9
   14e84:	str	r2, [r4, #28]
   14e88:	strh	r7, [r3, #14]
   14e8c:	str	r6, [r3, #16]
   14e90:	str	ip, [r3, #20]
   14e94:	str	r5, [r3, #24]
   14e98:	str	lr, [r4, #16]
   14e9c:	str	r1, [r4, #24]
   14ea0:	str	r9, [r3, #4]
   14ea4:	add	sp, sp, #12
   14ea8:	ldrd	r4, [sp]
   14eac:	ldrd	r6, [sp, #8]
   14eb0:	ldrd	r8, [sp, #16]
   14eb4:	add	sp, sp, #24
   14eb8:	pop	{pc}		; (ldr pc, [sp], #4)
   14ebc:	ldr	r3, [r4, #32]
   14ec0:	add	r3, r3, #36	; 0x24
   14ec4:	str	r3, [r4, #32]
   14ec8:	b	14e30 <flatcc_builder_start_vector@@Base+0xd0>
   14ecc:	mvn	r0, #0
   14ed0:	b	14ea4 <flatcc_builder_start_vector@@Base+0x144>
   14ed4:	bl	12a44 <flatcc_builder_default_alloc@@Base+0x124>

00014ed8 <flatcc_builder_start_offset_vector@@Base>:
   14ed8:	ldrd	r2, [r0, #156]	; 0x9c
   14edc:	strd	r4, [sp, #-16]!
   14ee0:	mov	r4, r0
   14ee4:	str	r6, [sp, #8]
   14ee8:	str	lr, [sp, #12]
   14eec:	sub	sp, sp, #8
   14ef0:	add	r1, r2, #1
   14ef4:	cmp	r1, r3
   14ef8:	str	r1, [r0, #156]	; 0x9c
   14efc:	ble	15014 <flatcc_builder_start_offset_vector@@Base+0x13c>
   14f00:	ldr	r3, [r0, #176]	; 0xb0
   14f04:	cmp	r3, #0
   14f08:	cmpgt	r1, r3
   14f0c:	movgt	r3, #1
   14f10:	movle	r3, #0
   14f14:	bgt	15024 <flatcc_builder_start_offset_vector@@Base+0x14c>
   14f18:	add	r2, r2, r2, lsl #3
   14f1c:	ldr	r1, [r0, #88]	; 0x58
   14f20:	lsl	r5, r2, #2
   14f24:	add	r2, r5, #36	; 0x24
   14f28:	cmp	r2, r1
   14f2c:	bls	14f50 <flatcc_builder_start_offset_vector@@Base+0x78>
   14f30:	mov	ip, #4
   14f34:	add	r1, r0, #84	; 0x54
   14f38:	ldr	r0, [r0, #40]	; 0x28
   14f3c:	str	ip, [sp]
   14f40:	ldr	r6, [r4, #48]	; 0x30
   14f44:	blx	r6
   14f48:	cmp	r0, #0
   14f4c:	bne	1502c <flatcc_builder_start_offset_vector@@Base+0x154>
   14f50:	ldr	r3, [r4, #84]	; 0x54
   14f54:	add	r3, r3, r5
   14f58:	cmp	r3, #0
   14f5c:	str	r3, [r4, #32]
   14f60:	beq	15024 <flatcc_builder_start_offset_vector@@Base+0x14c>
   14f64:	ldr	r2, [r4, #88]	; 0x58
   14f68:	movw	r0, #36409	; 0x8e39
   14f6c:	movt	r0, #14563	; 0x38e3
   14f70:	ldr	r1, [r4, #176]	; 0xb0
   14f74:	umull	r0, r2, r0, r2
   14f78:	lsr	r2, r2, #3
   14f7c:	cmp	r1, #0
   14f80:	cmpgt	r2, r1
   14f84:	movgt	r2, r1
   14f88:	str	r2, [r4, #160]	; 0xa0
   14f8c:	ldr	r2, [r4, #20]
   14f90:	mvn	r5, #3
   14f94:	mov	lr, #0
   14f98:	ldr	r0, [r4, #28]
   14f9c:	ldrh	r6, [r4, #130]	; 0x82
   14fa0:	ldr	ip, [r4, #60]	; 0x3c
   14fa4:	ldr	r1, [r4, #64]	; 0x40
   14fa8:	str	r2, [r3, #8]
   14fac:	add	r2, r2, r0
   14fb0:	add	r2, r2, #7
   14fb4:	strh	r6, [r3, #12]
   14fb8:	mov	r6, #4
   14fbc:	bic	r2, r2, #7
   14fc0:	add	ip, ip, r2
   14fc4:	strh	r6, [r4, #130]	; 0x82
   14fc8:	sub	r1, r1, r2
   14fcc:	str	r0, [r3]
   14fd0:	mov	r0, lr
   14fd4:	cmp	r1, r5
   14fd8:	str	lr, [r4, #20]
   14fdc:	movhi	r1, r5
   14fe0:	str	r2, [r4, #28]
   14fe4:	mov	r2, #5
   14fe8:	strh	r2, [r3, #14]
   14fec:	str	r6, [r3, #16]
   14ff0:	str	lr, [r3, #20]
   14ff4:	str	ip, [r4, #16]
   14ff8:	str	r1, [r4, #24]
   14ffc:	str	r5, [r3, #4]
   15000:	add	sp, sp, #8
   15004:	ldrd	r4, [sp]
   15008:	ldr	r6, [sp, #8]
   1500c:	add	sp, sp, #12
   15010:	pop	{pc}		; (ldr pc, [sp], #4)
   15014:	ldr	r3, [r0, #32]
   15018:	add	r3, r3, #36	; 0x24
   1501c:	str	r3, [r0, #32]
   15020:	b	14f8c <flatcc_builder_start_offset_vector@@Base+0xb4>
   15024:	mvn	r0, #0
   15028:	b	15000 <flatcc_builder_start_offset_vector@@Base+0x128>
   1502c:	bl	12a44 <flatcc_builder_default_alloc@@Base+0x124>

00015030 <flatcc_builder_create_offset_vector@@Base>:
   15030:	strd	r4, [sp, #-28]!	; 0xffffffe4
   15034:	mov	r5, r2
   15038:	mov	r4, r0
   1503c:	ldr	r3, [r0, #160]	; 0xa0
   15040:	strd	r6, [sp, #8]
   15044:	mov	r6, r1
   15048:	ldr	r1, [r0, #156]	; 0x9c
   1504c:	strd	r8, [sp, #16]
   15050:	str	lr, [sp, #24]
   15054:	sub	sp, sp, #12
   15058:	add	r2, r1, #1
   1505c:	cmp	r2, r3
   15060:	str	r2, [r0, #156]	; 0x9c
   15064:	ble	151dc <flatcc_builder_create_offset_vector@@Base+0x1ac>
   15068:	ldr	r3, [r0, #176]	; 0xb0
   1506c:	cmp	r2, r3
   15070:	cmpgt	r3, #0
   15074:	movgt	r3, #1
   15078:	movle	r3, #0
   1507c:	bgt	151bc <flatcc_builder_create_offset_vector@@Base+0x18c>
   15080:	add	r1, r1, r1, lsl #3
   15084:	ldr	r0, [r0, #88]	; 0x58
   15088:	lsl	r7, r1, #2
   1508c:	add	r2, r7, #36	; 0x24
   15090:	cmp	r2, r0
   15094:	bls	150b8 <flatcc_builder_create_offset_vector@@Base+0x88>
   15098:	mov	ip, #4
   1509c:	add	r1, r4, #84	; 0x54
   150a0:	ldr	r0, [r4, #40]	; 0x28
   150a4:	str	ip, [sp]
   150a8:	ldr	r8, [r4, #48]	; 0x30
   150ac:	blx	r8
   150b0:	cmp	r0, #0
   150b4:	bne	15280 <flatcc_builder_create_offset_vector@@Base+0x250>
   150b8:	ldr	r3, [r4, #84]	; 0x54
   150bc:	add	r3, r3, r7
   150c0:	cmp	r3, #0
   150c4:	str	r3, [r4, #32]
   150c8:	beq	151bc <flatcc_builder_create_offset_vector@@Base+0x18c>
   150cc:	ldr	r2, [r4, #88]	; 0x58
   150d0:	movw	r0, #36409	; 0x8e39
   150d4:	movt	r0, #14563	; 0x38e3
   150d8:	ldr	r1, [r4, #176]	; 0xb0
   150dc:	umull	r0, r2, r0, r2
   150e0:	lsr	r2, r2, #3
   150e4:	cmp	r2, r1
   150e8:	cmpgt	r1, #0
   150ec:	movgt	r2, r1
   150f0:	str	r2, [r4, #160]	; 0xa0
   150f4:	ldr	r2, [r4, #20]
   150f8:	mvn	lr, #3
   150fc:	mov	r0, #4
   15100:	ldr	r8, [r4, #28]
   15104:	ldrh	r7, [r4, #130]	; 0x82
   15108:	ldr	r1, [r4, #64]	; 0x40
   1510c:	ldr	r9, [r4, #60]	; 0x3c
   15110:	str	r2, [r3, #8]
   15114:	add	r2, r2, r8
   15118:	add	r2, r2, #7
   1511c:	strh	r7, [r3, #12]
   15120:	mov	r7, #0
   15124:	bic	r2, r2, #7
   15128:	strh	r0, [r4, #130]	; 0x82
   1512c:	sub	r1, r1, r2
   15130:	str	r8, [r3]
   15134:	cmp	r1, lr
   15138:	add	r9, r9, r2
   1513c:	str	r7, [r4, #20]
   15140:	movls	ip, r1
   15144:	movhi	ip, lr
   15148:	str	r2, [r4, #28]
   1514c:	mov	r1, #5
   15150:	strh	r1, [r3, #14]
   15154:	mov	r1, r5
   15158:	str	r0, [r3, #16]
   1515c:	mov	r0, r4
   15160:	str	r7, [r3, #20]
   15164:	str	r9, [r4, #16]
   15168:	str	ip, [r4, #24]
   1516c:	str	lr, [r3, #4]
   15170:	bl	1442c <flatcc_builder_extend_offset_vector@@Base>
   15174:	cmp	r0, r7
   15178:	beq	151bc <flatcc_builder_create_offset_vector@@Base+0x18c>
   1517c:	lsl	r2, r5, #2
   15180:	mov	r1, r6
   15184:	bl	11fac <memcpy@plt>
   15188:	ldr	r3, [r4, #32]
   1518c:	ldrh	r2, [r3, #14]
   15190:	cmp	r2, #5
   15194:	bne	15264 <flatcc_builder_create_offset_vector@@Base+0x234>
   15198:	ldr	r2, [r3, #20]
   1519c:	cmn	r2, #-1073741823	; 0xc0000001
   151a0:	bhi	151bc <flatcc_builder_create_offset_vector@@Base+0x18c>
   151a4:	mov	r3, r7
   151a8:	mov	r0, r4
   151ac:	ldr	r1, [r4, #16]
   151b0:	bl	12ca8 <flatcc_builder_default_alloc@@Base+0x388>
   151b4:	subs	r5, r0, #0
   151b8:	bne	151ec <flatcc_builder_create_offset_vector@@Base+0x1bc>
   151bc:	mov	r5, #0
   151c0:	mov	r0, r5
   151c4:	add	sp, sp, #12
   151c8:	ldrd	r4, [sp]
   151cc:	ldrd	r6, [sp, #8]
   151d0:	ldrd	r8, [sp, #16]
   151d4:	add	sp, sp, #24
   151d8:	pop	{pc}		; (ldr pc, [sp], #4)
   151dc:	ldr	r3, [r0, #32]
   151e0:	add	r3, r3, #36	; 0x24
   151e4:	str	r3, [r0, #32]
   151e8:	b	150f4 <flatcc_builder_create_offset_vector@@Base+0xc4>
   151ec:	mov	r1, r7
   151f0:	ldr	r0, [r4, #16]
   151f4:	ldr	r2, [r4, #20]
   151f8:	bl	12030 <memset@plt>
   151fc:	ldr	r3, [r4, #32]
   15200:	ldr	r0, [r4, #60]	; 0x3c
   15204:	ldr	r2, [r4, #64]	; 0x40
   15208:	ldr	ip, [r3]
   1520c:	ldmib	r3, {r1, lr}
   15210:	add	r0, r0, ip
   15214:	sub	r2, r2, ip
   15218:	str	r0, [r4, #16]
   1521c:	cmp	r2, r1
   15220:	ldrh	r0, [r4, #128]	; 0x80
   15224:	movcs	r2, r1
   15228:	str	lr, [r4, #20]
   1522c:	str	ip, [r4, #28]
   15230:	ldrh	ip, [r4, #130]	; 0x82
   15234:	str	r2, [r4, #24]
   15238:	ldr	r2, [r4, #156]	; 0x9c
   1523c:	str	r1, [r3, #4]
   15240:	cmp	r0, ip
   15244:	sub	r0, r3, #36	; 0x24
   15248:	strhcc	ip, [r4, #128]	; 0x80
   1524c:	ldrh	r1, [r3, #12]
   15250:	sub	r3, r2, #1
   15254:	str	r0, [r4, #32]
   15258:	strh	r1, [r4, #130]	; 0x82
   1525c:	str	r3, [r4, #156]	; 0x9c
   15260:	b	151c0 <flatcc_builder_create_offset_vector@@Base+0x190>
   15264:	movw	r1, #38312	; 0x95a8
   15268:	movt	r1, #1
   1526c:	ldr	r3, [pc, #16]	; 15284 <flatcc_builder_create_offset_vector@@Base+0x254>
   15270:	movw	r0, #38784	; 0x9780
   15274:	movt	r0, #1
   15278:	movw	r2, #1480	; 0x5c8
   1527c:	bl	12060 <__assert_fail@plt>
   15280:	bl	12a44 <flatcc_builder_default_alloc@@Base+0x124>
   15284:	andeq	r9, r1, r4, ror #5

00015288 <flatcc_builder_start_string@@Base>:
   15288:	ldrd	r2, [r0, #156]	; 0x9c
   1528c:	strd	r4, [sp, #-16]!
   15290:	mov	r4, r0
   15294:	str	r6, [sp, #8]
   15298:	str	lr, [sp, #12]
   1529c:	sub	sp, sp, #8
   152a0:	add	r1, r2, #1
   152a4:	cmp	r1, r3
   152a8:	str	r1, [r0, #156]	; 0x9c
   152ac:	ble	153c4 <flatcc_builder_start_string@@Base+0x13c>
   152b0:	ldr	r3, [r0, #176]	; 0xb0
   152b4:	cmp	r3, #0
   152b8:	cmpgt	r1, r3
   152bc:	movgt	r3, #1
   152c0:	movle	r3, #0
   152c4:	bgt	153d4 <flatcc_builder_start_string@@Base+0x14c>
   152c8:	add	r2, r2, r2, lsl #3
   152cc:	ldr	r1, [r0, #88]	; 0x58
   152d0:	lsl	r5, r2, #2
   152d4:	add	r2, r5, #36	; 0x24
   152d8:	cmp	r2, r1
   152dc:	bls	15300 <flatcc_builder_start_string@@Base+0x78>
   152e0:	mov	ip, #4
   152e4:	add	r1, r0, #84	; 0x54
   152e8:	ldr	r0, [r0, #40]	; 0x28
   152ec:	str	ip, [sp]
   152f0:	ldr	r6, [r4, #48]	; 0x30
   152f4:	blx	r6
   152f8:	cmp	r0, #0
   152fc:	bne	153dc <flatcc_builder_start_string@@Base+0x154>
   15300:	ldr	r3, [r4, #84]	; 0x54
   15304:	add	r3, r3, r5
   15308:	cmp	r3, #0
   1530c:	str	r3, [r4, #32]
   15310:	beq	153d4 <flatcc_builder_start_string@@Base+0x14c>
   15314:	ldr	r2, [r4, #88]	; 0x58
   15318:	movw	r0, #36409	; 0x8e39
   1531c:	movt	r0, #14563	; 0x38e3
   15320:	ldr	r1, [r4, #176]	; 0xb0
   15324:	umull	r0, r2, r0, r2
   15328:	lsr	r2, r2, #3
   1532c:	cmp	r1, #0
   15330:	cmpgt	r2, r1
   15334:	movgt	r2, r1
   15338:	str	r2, [r4, #160]	; 0xa0
   1533c:	ldr	r2, [r4, #20]
   15340:	mvn	r5, #3
   15344:	mov	lr, #0
   15348:	ldr	r0, [r4, #28]
   1534c:	ldrh	r6, [r4, #130]	; 0x82
   15350:	ldr	ip, [r4, #60]	; 0x3c
   15354:	ldr	r1, [r4, #64]	; 0x40
   15358:	str	r2, [r3, #8]
   1535c:	add	r2, r2, r0
   15360:	add	r2, r2, #7
   15364:	strh	r6, [r3, #12]
   15368:	mov	r6, #1
   1536c:	bic	r2, r2, #7
   15370:	add	ip, ip, r2
   15374:	strh	r6, [r4, #130]	; 0x82
   15378:	sub	r1, r1, r2
   1537c:	str	r0, [r3]
   15380:	mov	r0, lr
   15384:	cmp	r1, r5
   15388:	str	lr, [r4, #20]
   1538c:	movhi	r1, r5
   15390:	str	r2, [r4, #28]
   15394:	mov	r2, #6
   15398:	strh	r2, [r3, #14]
   1539c:	str	r6, [r3, #16]
   153a0:	str	lr, [r3, #20]
   153a4:	str	ip, [r4, #16]
   153a8:	str	r1, [r4, #24]
   153ac:	str	r5, [r3, #4]
   153b0:	add	sp, sp, #8
   153b4:	ldrd	r4, [sp]
   153b8:	ldr	r6, [sp, #8]
   153bc:	add	sp, sp, #12
   153c0:	pop	{pc}		; (ldr pc, [sp], #4)
   153c4:	ldr	r3, [r0, #32]
   153c8:	add	r3, r3, #36	; 0x24
   153cc:	str	r3, [r0, #32]
   153d0:	b	1533c <flatcc_builder_start_string@@Base+0xb4>
   153d4:	mvn	r0, #0
   153d8:	b	153b0 <flatcc_builder_start_string@@Base+0x128>
   153dc:	bl	12a44 <flatcc_builder_default_alloc@@Base+0x124>

000153e0 <flatcc_builder_reserve_table@@Base>:
   153e0:	cmp	r1, #0
   153e4:	strd	r4, [sp, #-20]!	; 0xffffffec
   153e8:	strd	r6, [sp, #8]
   153ec:	str	lr, [sp, #16]
   153f0:	sub	sp, sp, #12
   153f4:	blt	154d8 <flatcc_builder_reserve_table@@Base+0xf8>
   153f8:	ldr	r2, [r0, #32]
   153fc:	add	r1, r1, #2
   15400:	mov	r4, r0
   15404:	lsl	r5, r1, #1
   15408:	ldr	r1, [r0, #56]	; 0x38
   1540c:	ldrh	r6, [r2, #28]
   15410:	ldr	r3, [r2, #16]
   15414:	add	r6, r3, r6, lsl #1
   15418:	add	r2, r6, r5
   1541c:	cmp	r2, r1
   15420:	bhi	15488 <flatcc_builder_reserve_table@@Base+0xa8>
   15424:	ldr	r3, [r4, #52]	; 0x34
   15428:	adds	r3, r3, r6
   1542c:	mvneq	r0, #0
   15430:	streq	r3, [r4, #4]
   15434:	beq	15474 <flatcc_builder_reserve_table@@Base+0x94>
   15438:	ldr	r2, [r4, #32]
   1543c:	add	r3, r3, #4
   15440:	ldr	r1, [r4, #80]	; 0x50
   15444:	ldr	r6, [r2, #20]
   15448:	str	r3, [r4, #4]
   1544c:	add	r2, r5, r6
   15450:	sub	r2, r2, #3
   15454:	cmp	r2, r1
   15458:	bhi	154b0 <flatcc_builder_reserve_table@@Base+0xd0>
   1545c:	ldr	r3, [r4, #76]	; 0x4c
   15460:	add	r3, r3, r6
   15464:	clz	r0, r3
   15468:	lsr	r0, r0, #5
   1546c:	str	r3, [r4]
   15470:	rsb	r0, r0, #0
   15474:	add	sp, sp, #12
   15478:	ldrd	r4, [sp]
   1547c:	ldrd	r6, [sp, #8]
   15480:	add	sp, sp, #16
   15484:	pop	{pc}		; (ldr pc, [sp], #4)
   15488:	mov	ip, #0
   1548c:	add	r1, r0, #52	; 0x34
   15490:	ldr	r0, [r0, #40]	; 0x28
   15494:	mov	r3, #1
   15498:	str	ip, [sp]
   1549c:	ldr	r7, [r4, #48]	; 0x30
   154a0:	blx	r7
   154a4:	cmp	r0, #0
   154a8:	beq	15424 <flatcc_builder_reserve_table@@Base+0x44>
   154ac:	bl	12a44 <flatcc_builder_default_alloc@@Base+0x124>
   154b0:	mov	ip, #3
   154b4:	mov	r3, #0
   154b8:	ldr	r0, [r4, #40]	; 0x28
   154bc:	add	r1, r4, #76	; 0x4c
   154c0:	str	ip, [sp]
   154c4:	ldr	r5, [r4, #48]	; 0x30
   154c8:	blx	r5
   154cc:	cmp	r0, #0
   154d0:	beq	1545c <flatcc_builder_reserve_table@@Base+0x7c>
   154d4:	b	154ac <flatcc_builder_reserve_table@@Base+0xcc>
   154d8:	movw	r1, #38312	; 0x95a8
   154dc:	movt	r1, #1
   154e0:	ldr	r3, [pc, #12]	; 154f4 <flatcc_builder_reserve_table@@Base+0x114>
   154e4:	movw	r0, #38968	; 0x9838
   154e8:	movt	r0, #1
   154ec:	movw	r2, #1065	; 0x429
   154f0:	bl	12060 <__assert_fail@plt>
   154f4:	andeq	r9, r1, r8, lsl #6

000154f8 <flatcc_builder_start_table@@Base>:
   154f8:	strd	r4, [sp, #-32]!	; 0xffffffe0
   154fc:	mov	r5, r1
   15500:	mov	r1, #4
   15504:	strd	r6, [sp, #8]
   15508:	mov	r4, r0
   1550c:	strd	r8, [sp, #16]
   15510:	str	sl, [sp, #24]
   15514:	str	lr, [sp, #28]
   15518:	sub	sp, sp, #8
   1551c:	bl	12b84 <flatcc_builder_default_alloc@@Base+0x264>
   15520:	subs	r7, r0, #0
   15524:	bne	1566c <flatcc_builder_start_table@@Base+0x174>
   15528:	ldm	r4, {r0, r2}
   1552c:	add	r5, r5, #2
   15530:	movw	ip, #15186	; 0x3b52
   15534:	movt	ip, #12137	; 0x2f69
   15538:	lsl	r5, r5, #1
   1553c:	mov	r8, #3
   15540:	ldrh	lr, [r4, #8]
   15544:	ldr	r1, [r4, #52]	; 0x34
   15548:	ldr	sl, [r4, #76]	; 0x4c
   1554c:	ldr	r3, [r4, #32]
   15550:	sub	r2, r2, r1
   15554:	ldr	r9, [r4, #56]	; 0x38
   15558:	add	r6, r2, lr, lsl #1
   1555c:	sub	r0, r0, sl
   15560:	ldr	sl, [r4, #12]
   15564:	str	r2, [r3, #16]
   15568:	add	r2, r6, r5
   1556c:	str	r0, [r3, #20]
   15570:	cmp	r2, r9
   15574:	str	sl, [r3, #24]
   15578:	strh	lr, [r3, #28]
   1557c:	strh	r7, [r4, #8]
   15580:	str	ip, [r4, #12]
   15584:	strh	r8, [r3, #14]
   15588:	bls	155b0 <flatcc_builder_start_table@@Base+0xb8>
   1558c:	mov	r3, #1
   15590:	add	r1, r4, #52	; 0x34
   15594:	str	r7, [sp]
   15598:	ldr	r0, [r4, #40]	; 0x28
   1559c:	ldr	r8, [r4, #48]	; 0x30
   155a0:	blx	r8
   155a4:	cmp	r0, #0
   155a8:	bne	15668 <flatcc_builder_start_table@@Base+0x170>
   155ac:	ldr	r1, [r4, #52]	; 0x34
   155b0:	adds	r6, r6, r1
   155b4:	streq	r6, [r4, #4]
   155b8:	beq	1566c <flatcc_builder_start_table@@Base+0x174>
   155bc:	ldr	r1, [r4, #32]
   155c0:	sub	r2, r5, #3
   155c4:	add	r6, r6, #4
   155c8:	ldr	r3, [r4, #80]	; 0x50
   155cc:	ldr	r5, [r1, #20]
   155d0:	str	r6, [r4, #4]
   155d4:	add	r2, r2, r5
   155d8:	cmp	r2, r3
   155dc:	bhi	15644 <flatcc_builder_start_table@@Base+0x14c>
   155e0:	ldr	r3, [r4, #76]	; 0x4c
   155e4:	add	r3, r3, r5
   155e8:	cmp	r3, #0
   155ec:	str	r3, [r4]
   155f0:	beq	1566c <flatcc_builder_start_table@@Base+0x174>
   155f4:	ldr	r0, [r4, #28]
   155f8:	movw	r2, #65532	; 0xfffc
   155fc:	ldr	ip, [r4, #32]
   15600:	ldr	r3, [r4, #64]	; 0x40
   15604:	ldr	r1, [r4, #60]	; 0x3c
   15608:	sub	r3, r3, r0
   1560c:	cmp	r3, r2
   15610:	add	r1, r1, r0
   15614:	movcs	r3, r2
   15618:	str	r1, [r4, #16]
   1561c:	str	r3, [r4, #24]
   15620:	str	r2, [ip, #4]
   15624:	mov	r0, r7
   15628:	add	sp, sp, #8
   1562c:	ldrd	r4, [sp]
   15630:	ldrd	r6, [sp, #8]
   15634:	ldrd	r8, [sp, #16]
   15638:	ldr	sl, [sp, #24]
   1563c:	add	sp, sp, #28
   15640:	pop	{pc}		; (ldr pc, [sp], #4)
   15644:	mov	ip, #3
   15648:	mov	r3, #0
   1564c:	ldr	r0, [r4, #40]	; 0x28
   15650:	add	r1, r4, #76	; 0x4c
   15654:	str	ip, [sp]
   15658:	ldr	r6, [r4, #48]	; 0x30
   1565c:	blx	r6
   15660:	cmp	r0, #0
   15664:	beq	155e0 <flatcc_builder_start_table@@Base+0xe8>
   15668:	bl	12a44 <flatcc_builder_default_alloc@@Base+0x124>
   1566c:	mvn	r7, #0
   15670:	b	15624 <flatcc_builder_start_table@@Base+0x12c>

00015674 <flatcc_builder_create_vtable@@Base>:
   15674:	strd	r4, [sp, #-16]!
   15678:	mov	r5, r0
   1567c:	mov	r3, #0
   15680:	ldr	ip, [r5, #152]	; 0x98
   15684:	subs	r0, r2, #0
   15688:	str	r6, [sp, #8]
   1568c:	str	lr, [sp, #12]
   15690:	sub	sp, sp, #80	; 0x50
   15694:	str	r3, [sp, #8]
   15698:	str	r3, [sp, #12]
   1569c:	beq	15718 <flatcc_builder_create_vtable@@Base+0xa4>
   156a0:	mov	r2, #1
   156a4:	cmp	ip, r3
   156a8:	str	r0, [sp, #8]
   156ac:	str	r2, [sp, #12]
   156b0:	str	r1, [sp, #16]
   156b4:	str	r0, [sp, #20]
   156b8:	beq	15748 <flatcc_builder_create_vtable@@Base+0xd4>
   156bc:	ldr	r3, [r5, #136]	; 0x88
   156c0:	sub	r4, r3, r0
   156c4:	cmp	r3, r4
   156c8:	ble	1572c <flatcc_builder_create_vtable@@Base+0xb8>
   156cc:	mov	r3, r4
   156d0:	mov	r2, #1
   156d4:	str	r0, [sp]
   156d8:	add	r1, sp, #16
   156dc:	ldr	r0, [r5, #36]	; 0x24
   156e0:	ldr	r6, [r5, #44]	; 0x2c
   156e4:	blx	r6
   156e8:	cmp	r0, #0
   156ec:	bne	15790 <flatcc_builder_create_vtable@@Base+0x11c>
   156f0:	cmp	r4, #0
   156f4:	str	r4, [r5, #136]	; 0x88
   156f8:	beq	15700 <flatcc_builder_create_vtable@@Base+0x8c>
   156fc:	add	r4, r4, #1
   15700:	mov	r0, r4
   15704:	add	sp, sp, #80	; 0x50
   15708:	ldrd	r4, [sp]
   1570c:	ldr	r6, [sp, #8]
   15710:	add	sp, sp, #12
   15714:	pop	{pc}		; (ldr pc, [sp], #4)
   15718:	cmp	ip, #0
   1571c:	bne	1572c <flatcc_builder_create_vtable@@Base+0xb8>
   15720:	ldr	r2, [r5, #180]	; 0xb4
   15724:	cmp	r2, #0
   15728:	beq	15788 <flatcc_builder_create_vtable@@Base+0x114>
   1572c:	movw	r1, #38312	; 0x95a8
   15730:	movt	r1, #1
   15734:	ldr	r3, [pc, #88]	; 15794 <flatcc_builder_create_vtable@@Base+0x120>
   15738:	movw	r0, #38504	; 0x9668
   1573c:	movt	r0, #1
   15740:	movw	r2, #647	; 0x287
   15744:	bl	12060 <__assert_fail@plt>
   15748:	ldr	r3, [r5, #180]	; 0xb4
   1574c:	cmp	r3, #0
   15750:	bne	156bc <flatcc_builder_create_vtable@@Base+0x48>
   15754:	ldr	r4, [r5, #140]	; 0x8c
   15758:	mov	ip, r0
   1575c:	add	r0, r4, r0
   15760:	str	r0, [r5, #140]	; 0x8c
   15764:	mov	r3, r4
   15768:	add	r1, sp, #16
   1576c:	str	ip, [sp]
   15770:	ldr	r0, [r5, #36]	; 0x24
   15774:	ldr	r5, [r5, #44]	; 0x2c
   15778:	blx	r5
   1577c:	cmp	r0, #0
   15780:	beq	156fc <flatcc_builder_create_vtable@@Base+0x88>
   15784:	bl	12a6c <flatcc_builder_default_alloc@@Base+0x14c>
   15788:	ldr	r4, [r5, #140]	; 0x8c
   1578c:	b	15764 <flatcc_builder_create_vtable@@Base+0xf0>
   15790:	bl	12abc <flatcc_builder_default_alloc@@Base+0x19c>
   15794:	andeq	r8, r1, r4, lsl #29

00015798 <flatcc_builder_create_cached_vtable@@Base>:
   15798:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1579c:	strd	r6, [sp, #8]
   157a0:	mov	r6, r0
   157a4:	strd	r8, [sp, #16]
   157a8:	mov	r9, r2
   157ac:	mov	r8, r3
   157b0:	strd	sl, [sp, #24]
   157b4:	str	lr, [sp, #32]
   157b8:	sub	sp, sp, #28
   157bc:	str	r1, [sp, #8]
   157c0:	ldr	r1, [r0, #116]	; 0x74
   157c4:	cmp	r1, #0
   157c8:	rsbne	r1, r1, #32
   157cc:	beq	15954 <flatcc_builder_create_cached_vtable@@Base+0x1bc>
   157d0:	ldr	sl, [r6, #92]	; 0x5c
   157d4:	lsr	r8, r8, r1
   157d8:	adds	fp, sl, r8, lsl #2
   157dc:	str	fp, [sp, #12]
   157e0:	beq	159f0 <flatcc_builder_create_cached_vtable@@Base+0x258>
   157e4:	ldr	r5, [sl, r8, lsl #2]
   157e8:	cmp	r5, #0
   157ec:	beq	15a24 <flatcc_builder_create_cached_vtable@@Base+0x28c>
   157f0:	mov	r3, #0
   157f4:	str	r8, [sp, #16]
   157f8:	mov	r8, fp
   157fc:	mov	fp, r6
   15800:	ldr	r7, [r6, #68]	; 0x44
   15804:	str	r3, [sp, #20]
   15808:	ldr	r3, [r6, #100]	; 0x64
   1580c:	mov	r6, r3
   15810:	add	r4, r6, r5
   15814:	ldr	r1, [r4, #8]
   15818:	ldrh	r2, [r7, r1]
   1581c:	add	r1, r7, r1
   15820:	cmp	r2, r9
   15824:	bne	15900 <flatcc_builder_create_cached_vtable@@Base+0x168>
   15828:	mov	r2, r9
   1582c:	ldr	r0, [sp, #8]
   15830:	bl	11fb8 <memcmp@plt>
   15834:	cmp	r0, #0
   15838:	bne	15900 <flatcc_builder_create_cached_vtable@@Base+0x168>
   1583c:	ldr	r1, [r4, #4]
   15840:	ldr	r2, [fp, #152]	; 0x98
   15844:	cmp	r1, r2
   15848:	beq	1590c <flatcc_builder_create_cached_vtable@@Base+0x174>
   1584c:	ldr	r5, [r4, #12]
   15850:	add	r8, r4, #12
   15854:	str	r4, [sp, #20]
   15858:	cmp	r5, #0
   1585c:	bne	15810 <flatcc_builder_create_cached_vtable@@Base+0x78>
   15860:	ldr	r8, [sp, #16]
   15864:	mov	r6, fp
   15868:	ldr	r3, [r6, #104]	; 0x68
   1586c:	ldr	r4, [r6, #124]	; 0x7c
   15870:	add	r2, r4, #16
   15874:	cmp	r2, r3
   15878:	bls	158a0 <flatcc_builder_create_cached_vtable@@Base+0x108>
   1587c:	mov	ip, #6
   15880:	mov	r3, #0
   15884:	ldr	r0, [r6, #40]	; 0x28
   15888:	add	r1, r6, #100	; 0x64
   1588c:	str	ip, [sp]
   15890:	ldr	r5, [r6, #48]	; 0x30
   15894:	blx	r5
   15898:	cmp	r0, #0
   1589c:	bne	15a20 <flatcc_builder_create_cached_vtable@@Base+0x288>
   158a0:	ldr	r5, [r6, #100]	; 0x64
   158a4:	adds	r7, r5, r4
   158a8:	beq	159f0 <flatcc_builder_create_cached_vtable@@Base+0x258>
   158ac:	ldr	r3, [r6, #124]	; 0x7c
   158b0:	mov	r2, r9
   158b4:	ldr	r0, [r6, #152]	; 0x98
   158b8:	ldr	r1, [sp, #8]
   158bc:	add	ip, r3, #16
   158c0:	str	ip, [r6, #124]	; 0x7c
   158c4:	str	r0, [r7, #4]
   158c8:	mov	r0, r6
   158cc:	ldr	ip, [sl, r8, lsl #2]
   158d0:	str	ip, [r7, #12]
   158d4:	str	r3, [sl, r8, lsl #2]
   158d8:	bl	15674 <flatcc_builder_create_vtable@@Base>
   158dc:	cmp	r0, #0
   158e0:	str	r0, [r5, r4]
   158e4:	beq	159f0 <flatcc_builder_create_cached_vtable@@Base+0x258>
   158e8:	ldr	r3, [sp, #20]
   158ec:	cmp	r3, #0
   158f0:	beq	15a34 <flatcc_builder_create_cached_vtable@@Base+0x29c>
   158f4:	ldr	r3, [r3, #8]
   158f8:	str	r3, [r7, #8]
   158fc:	b	15938 <flatcc_builder_create_cached_vtable@@Base+0x1a0>
   15900:	add	r8, r4, #12
   15904:	ldr	r5, [r4, #12]
   15908:	b	15858 <flatcc_builder_create_cached_vtable@@Base+0xc0>
   1590c:	ldr	r3, [sp, #12]
   15910:	mov	fp, r8
   15914:	ldr	r8, [sp, #16]
   15918:	cmp	r3, fp
   1591c:	beq	15934 <flatcc_builder_create_cached_vtable@@Base+0x19c>
   15920:	ldr	r3, [r4, #12]
   15924:	str	r3, [fp]
   15928:	ldr	r3, [sl, r8, lsl #2]
   1592c:	str	r3, [r4, #12]
   15930:	str	r5, [sl, r8, lsl #2]
   15934:	ldr	r0, [r4]
   15938:	add	sp, sp, #28
   1593c:	ldrd	r4, [sp]
   15940:	ldrd	r6, [sp, #8]
   15944:	ldrd	r8, [sp, #16]
   15948:	ldrd	sl, [sp, #24]
   1594c:	add	sp, sp, #32
   15950:	pop	{pc}		; (ldr pc, [sp], #4)
   15954:	ldr	r4, [r0, #124]	; 0x7c
   15958:	add	r5, r0, #92	; 0x5c
   1595c:	cmp	r4, #0
   15960:	bne	15ae4 <flatcc_builder_create_cached_vtable@@Base+0x34c>
   15964:	ldr	r3, [r0, #104]	; 0x68
   15968:	cmp	r3, #15
   1596c:	bls	159f8 <flatcc_builder_create_cached_vtable@@Base+0x260>
   15970:	ldr	r3, [r6, #100]	; 0x64
   15974:	cmp	r3, #0
   15978:	beq	159f0 <flatcc_builder_create_cached_vtable@@Base+0x258>
   1597c:	mov	ip, #16
   15980:	mov	r2, #5
   15984:	ldr	r0, [r6, #40]	; 0x28
   15988:	mov	r1, r5
   1598c:	mov	r3, #1
   15990:	str	r2, [sp]
   15994:	mov	r2, #256	; 0x100
   15998:	str	ip, [r6, #124]	; 0x7c
   1599c:	ldr	r5, [r6, #48]	; 0x30
   159a0:	blx	r5
   159a4:	cmp	r0, #0
   159a8:	bne	159f0 <flatcc_builder_create_cached_vtable@@Base+0x258>
   159ac:	mov	r3, #256	; 0x100
   159b0:	ldr	r1, [r6, #96]	; 0x60
   159b4:	b	159bc <flatcc_builder_create_cached_vtable@@Base+0x224>
   159b8:	mov	r3, r2
   159bc:	lsl	r2, r3, #1
   159c0:	cmp	r2, r1
   159c4:	bls	159b8 <flatcc_builder_create_cached_vtable@@Base+0x220>
   159c8:	lsr	r3, r3, #2
   159cc:	cmp	r3, #1
   159d0:	bls	15a2c <flatcc_builder_create_cached_vtable@@Base+0x294>
   159d4:	mov	r2, #1
   159d8:	add	r4, r4, #1
   159dc:	cmp	r3, r2, lsl r4
   159e0:	bhi	159d8 <flatcc_builder_create_cached_vtable@@Base+0x240>
   159e4:	rsb	r1, r4, #32
   159e8:	str	r4, [r6, #116]	; 0x74
   159ec:	b	157d0 <flatcc_builder_create_cached_vtable@@Base+0x38>
   159f0:	mov	r0, #0
   159f4:	b	15938 <flatcc_builder_create_cached_vtable@@Base+0x1a0>
   159f8:	mov	ip, #6
   159fc:	add	r1, r0, #100	; 0x64
   15a00:	ldr	r0, [r0, #40]	; 0x28
   15a04:	mov	r3, r4
   15a08:	mov	r2, #16
   15a0c:	str	ip, [sp]
   15a10:	ldr	r7, [r6, #48]	; 0x30
   15a14:	blx	r7
   15a18:	cmp	r0, #0
   15a1c:	beq	15970 <flatcc_builder_create_cached_vtable@@Base+0x1d8>
   15a20:	bl	12a44 <flatcc_builder_default_alloc@@Base+0x124>
   15a24:	str	r5, [sp, #20]
   15a28:	b	15868 <flatcc_builder_create_cached_vtable@@Base+0xd0>
   15a2c:	mov	r1, #32
   15a30:	b	159e8 <flatcc_builder_create_cached_vtable@@Base+0x250>
   15a34:	ldr	r8, [r6, #120]	; 0x78
   15a38:	ldr	r3, [r6, #172]	; 0xac
   15a3c:	add	r2, r9, r8
   15a40:	cmp	r3, #0
   15a44:	beq	15a84 <flatcc_builder_create_cached_vtable@@Base+0x2ec>
   15a48:	cmp	r3, r2
   15a4c:	bcs	15a84 <flatcc_builder_create_cached_vtable@@Base+0x2ec>
   15a50:	ldr	r3, [r6, #116]	; 0x74
   15a54:	cmp	r3, #0
   15a58:	beq	15938 <flatcc_builder_create_cached_vtable@@Base+0x1a0>
   15a5c:	ldr	r7, [sp, #20]
   15a60:	ldr	r0, [r6, #92]	; 0x5c
   15a64:	ldr	r2, [r6, #96]	; 0x60
   15a68:	mov	r1, r7
   15a6c:	bl	12030 <memset@plt>
   15a70:	mov	r3, #16
   15a74:	mov	r2, r7
   15a78:	ldr	r0, [r5, r4]
   15a7c:	strd	r2, [r6, #120]	; 0x78
   15a80:	b	15938 <flatcc_builder_create_cached_vtable@@Base+0x1a0>
   15a84:	ldr	r3, [r6, #72]	; 0x48
   15a88:	cmp	r3, r2
   15a8c:	bcs	15ab4 <flatcc_builder_create_cached_vtable@@Base+0x31c>
   15a90:	mov	ip, #2
   15a94:	mov	r3, #0
   15a98:	ldr	r0, [r6, #40]	; 0x28
   15a9c:	add	r1, r6, #68	; 0x44
   15aa0:	str	ip, [sp]
   15aa4:	ldr	sl, [r6, #48]	; 0x30
   15aa8:	blx	sl
   15aac:	cmp	r0, #0
   15ab0:	bne	15a20 <flatcc_builder_create_cached_vtable@@Base+0x288>
   15ab4:	ldr	r3, [r6, #68]	; 0x44
   15ab8:	adds	r0, r3, r8
   15abc:	beq	15b00 <flatcc_builder_create_cached_vtable@@Base+0x368>
   15ac0:	ldr	r3, [r6, #120]	; 0x78
   15ac4:	mov	r2, r9
   15ac8:	ldr	r1, [sp, #8]
   15acc:	add	r9, r3, r9
   15ad0:	str	r3, [r7, #8]
   15ad4:	str	r9, [r6, #120]	; 0x78
   15ad8:	bl	11fac <memcpy@plt>
   15adc:	ldr	r0, [r5, r4]
   15ae0:	b	15938 <flatcc_builder_create_cached_vtable@@Base+0x1a0>
   15ae4:	movw	r1, #38312	; 0x95a8
   15ae8:	movt	r1, #1
   15aec:	ldr	r3, [pc, #20]	; 15b08 <flatcc_builder_create_cached_vtable@@Base+0x370>
   15af0:	movw	r0, #38980	; 0x9844
   15af4:	movt	r0, #1
   15af8:	movw	r2, #342	; 0x156
   15afc:	bl	12060 <__assert_fail@plt>
   15b00:	mvn	r0, #0
   15b04:	b	15938 <flatcc_builder_create_cached_vtable@@Base+0x1a0>
   15b08:	andeq	r9, r1, r8, lsr #6

00015b0c <flatcc_builder_create_table@@Base>:
   15b0c:	strd	r4, [sp, #-24]!	; 0xffffffe8
   15b10:	mov	r5, r0
   15b14:	strd	r6, [sp, #8]
   15b18:	str	r8, [sp, #16]
   15b1c:	str	lr, [sp, #20]
   15b20:	sub	sp, sp, #88	; 0x58
   15b24:	ldr	r6, [sp, #116]	; 0x74
   15b28:	ldr	r0, [sp, #120]	; 0x78
   15b2c:	cmp	r6, #0
   15b30:	blt	15c98 <flatcc_builder_create_table@@Base+0x18c>
   15b34:	ands	r7, r0, #1
   15b38:	beq	15c7c <flatcc_builder_create_table@@Base+0x170>
   15b3c:	ldrh	ip, [r5, #128]	; 0x80
   15b40:	cmp	r3, #4
   15b44:	sub	r0, r0, #1
   15b48:	movcc	r3, #4
   15b4c:	cmp	ip, r3
   15b50:	ldr	ip, [r5, #136]	; 0x88
   15b54:	strhcc	r3, [r5, #128]	; 0x80
   15b58:	sub	r3, r3, #1
   15b5c:	cmp	r6, #0
   15b60:	sub	r4, ip, r2
   15b64:	mov	r8, r4
   15b68:	sub	r4, r4, #4
   15b6c:	and	r8, r8, r3
   15b70:	sub	r0, r4, r0
   15b74:	sub	r0, r0, r8
   15b78:	str	r0, [sp, #12]
   15b7c:	beq	15bb0 <flatcc_builder_create_table@@Base+0xa4>
   15b80:	ldr	ip, [sp, #112]	; 0x70
   15b84:	sub	r4, r8, r4
   15b88:	sub	r4, r4, #4
   15b8c:	add	r6, ip, r6, lsl #1
   15b90:	ldrh	r3, [ip], #2
   15b94:	ldr	r0, [r1, r3]
   15b98:	sub	lr, r4, r3
   15b9c:	cmp	r6, ip
   15ba0:	add	r0, r0, lr
   15ba4:	str	r0, [r1, r3]
   15ba8:	bne	15b90 <flatcc_builder_create_table@@Base+0x84>
   15bac:	ldr	ip, [r5, #136]	; 0x88
   15bb0:	mov	r0, #4
   15bb4:	add	r3, sp, #12
   15bb8:	mov	lr, #1
   15bbc:	cmp	r2, #0
   15bc0:	moveq	r2, #2
   15bc4:	str	r0, [sp, #16]
   15bc8:	str	lr, [sp, #20]
   15bcc:	str	r3, [sp, #24]
   15bd0:	str	r0, [sp, #28]
   15bd4:	beq	15bf8 <flatcc_builder_create_table@@Base+0xec>
   15bd8:	mov	r3, #2
   15bdc:	add	r0, r2, r0
   15be0:	mov	r7, r3
   15be4:	str	r0, [sp, #16]
   15be8:	str	r2, [sp, #36]	; 0x24
   15bec:	mov	r2, #3
   15bf0:	str	r3, [sp, #20]
   15bf4:	str	r1, [sp, #32]
   15bf8:	cmp	r8, #0
   15bfc:	bne	15c50 <flatcc_builder_create_table@@Base+0x144>
   15c00:	sub	r4, ip, r0
   15c04:	cmp	r4, ip
   15c08:	bge	15cb8 <flatcc_builder_create_table@@Base+0x1ac>
   15c0c:	mov	r2, r7
   15c10:	mov	r3, r4
   15c14:	str	r0, [sp]
   15c18:	add	r1, sp, #24
   15c1c:	ldr	r0, [r5, #36]	; 0x24
   15c20:	ldr	r6, [r5, #44]	; 0x2c
   15c24:	blx	r6
   15c28:	cmp	r0, #0
   15c2c:	bne	15cb4 <flatcc_builder_create_table@@Base+0x1a8>
   15c30:	mov	r0, r4
   15c34:	str	r4, [r5, #136]	; 0x88
   15c38:	add	sp, sp, #88	; 0x58
   15c3c:	ldrd	r4, [sp]
   15c40:	ldrd	r6, [sp, #8]
   15c44:	ldr	r8, [sp, #16]
   15c48:	add	sp, sp, #20
   15c4c:	pop	{pc}		; (ldr pc, [sp], #4)
   15c50:	ldr	r1, [pc, #124]	; 15cd4 <flatcc_builder_create_table@@Base+0x1c8>
   15c54:	add	r7, r7, #1
   15c58:	add	r3, sp, #88	; 0x58
   15c5c:	add	r3, r3, r7, lsl #3
   15c60:	add	r0, r0, r8
   15c64:	mov	r7, r2
   15c68:	str	r0, [sp, #16]
   15c6c:	str	r2, [sp, #20]
   15c70:	str	r1, [r3, #-72]	; 0xffffffb8
   15c74:	str	r8, [r3, #-68]	; 0xffffffbc
   15c78:	b	15c00 <flatcc_builder_create_table@@Base+0xf4>
   15c7c:	movw	r1, #38312	; 0x95a8
   15c80:	movt	r1, #1
   15c84:	ldr	r3, [pc, #76]	; 15cd8 <flatcc_builder_create_table@@Base+0x1cc>
   15c88:	movw	r0, #39016	; 0x9868
   15c8c:	movt	r0, #1
   15c90:	movw	r2, #1243	; 0x4db
   15c94:	bl	12060 <__assert_fail@plt>
   15c98:	movw	r1, #38312	; 0x95a8
   15c9c:	movt	r1, #1
   15ca0:	ldr	r3, [pc, #48]	; 15cd8 <flatcc_builder_create_table@@Base+0x1cc>
   15ca4:	movw	r0, #38996	; 0x9854
   15ca8:	movt	r0, #1
   15cac:	movw	r2, #1237	; 0x4d5
   15cb0:	bl	12060 <__assert_fail@plt>
   15cb4:	bl	12abc <flatcc_builder_default_alloc@@Base+0x19c>
   15cb8:	movw	r1, #38312	; 0x95a8
   15cbc:	movt	r1, #1
   15cc0:	ldr	r3, [pc, #20]	; 15cdc <flatcc_builder_create_table@@Base+0x1d0>
   15cc4:	movw	r0, #38504	; 0x9668
   15cc8:	movt	r0, #1
   15ccc:	movw	r2, #647	; 0x287
   15cd0:	bl	12060 <__assert_fail@plt>
   15cd4:	andeq	r8, r1, r0, lsl #30
   15cd8:	andeq	r9, r1, r4, lsr r3
   15cdc:	andeq	r8, r1, r4, lsl #29

00015ce0 <flatcc_builder_check_required_field@@Base>:
   15ce0:	ldr	r3, [r0, #32]
   15ce4:	ldrh	r3, [r3, #14]
   15ce8:	cmp	r3, #3
   15cec:	bne	15d1c <flatcc_builder_check_required_field@@Base+0x3c>
   15cf0:	ldrh	r3, [r0, #8]
   15cf4:	cmp	r3, r1
   15cf8:	bls	15d14 <flatcc_builder_check_required_field@@Base+0x34>
   15cfc:	ldr	r3, [r0, #4]
   15d00:	lsl	r1, r1, #1
   15d04:	ldrh	r0, [r3, r1]
   15d08:	adds	r0, r0, #0
   15d0c:	movne	r0, #1
   15d10:	bx	lr
   15d14:	mov	r0, #0
   15d18:	bx	lr
   15d1c:	movw	r1, #38312	; 0x95a8
   15d20:	movt	r1, #1
   15d24:	ldr	r3, [pc, #20]	; 15d40 <flatcc_builder_check_required_field@@Base+0x60>
   15d28:	movw	r0, #39028	; 0x9874
   15d2c:	movt	r0, #1
   15d30:	str	r4, [sp, #-8]!
   15d34:	movw	r2, #1272	; 0x4f8
   15d38:	str	lr, [sp, #4]
   15d3c:	bl	12060 <__assert_fail@plt>
   15d40:	andeq	r9, r1, r0, asr r3

00015d44 <flatcc_builder_check_union_field@@Base>:
   15d44:	ldr	r3, [r0, #32]
   15d48:	ldrh	r3, [r3, #14]
   15d4c:	cmp	r3, #3
   15d50:	bne	15db4 <flatcc_builder_check_union_field@@Base+0x70>
   15d54:	cmp	r1, #0
   15d58:	beq	15da0 <flatcc_builder_check_union_field@@Base+0x5c>
   15d5c:	ldrh	r3, [r0, #8]
   15d60:	cmp	r3, r1
   15d64:	bls	15da0 <flatcc_builder_check_union_field@@Base+0x5c>
   15d68:	ldr	r3, [r0, #4]
   15d6c:	sub	r1, r1, #-2147483647	; 0x80000001
   15d70:	lsl	r1, r1, #1
   15d74:	ldrh	r2, [r3, r1]!
   15d78:	cmp	r2, #0
   15d7c:	ldrh	r1, [r3, #2]
   15d80:	beq	15d94 <flatcc_builder_check_union_field@@Base+0x50>
   15d84:	ldr	r3, [r0, #16]
   15d88:	ldrb	r3, [r3, r2]
   15d8c:	cmp	r3, #0
   15d90:	bne	15da8 <flatcc_builder_check_union_field@@Base+0x64>
   15d94:	clz	r0, r1
   15d98:	lsr	r0, r0, #5
   15d9c:	bx	lr
   15da0:	mov	r0, #0
   15da4:	bx	lr
   15da8:	adds	r0, r1, #0
   15dac:	movne	r0, #1
   15db0:	bx	lr
   15db4:	movw	r1, #38312	; 0x95a8
   15db8:	movt	r1, #1
   15dbc:	ldr	r3, [pc, #20]	; 15dd8 <flatcc_builder_check_union_field@@Base+0x94>
   15dc0:	movw	r0, #39028	; 0x9874
   15dc4:	movt	r0, #1
   15dc8:	str	r4, [sp, #-8]!
   15dcc:	movw	r2, #1279	; 0x4ff
   15dd0:	str	lr, [sp, #4]
   15dd4:	bl	12060 <__assert_fail@plt>
   15dd8:	andeq	r9, r1, r4, ror r3

00015ddc <flatcc_builder_check_required@@Base>:
   15ddc:	ldr	r3, [r0, #32]
   15de0:	ldrh	r3, [r3, #14]
   15de4:	cmp	r3, #3
   15de8:	bne	15e50 <flatcc_builder_check_required@@Base+0x74>
   15dec:	ldrh	r3, [r0, #8]
   15df0:	cmp	r3, r2
   15df4:	blt	15e48 <flatcc_builder_check_required@@Base+0x6c>
   15df8:	cmp	r2, #0
   15dfc:	ble	15e40 <flatcc_builder_check_required@@Base+0x64>
   15e00:	ldrh	r3, [r1]
   15e04:	ldr	ip, [r0, #4]
   15e08:	lsl	r3, r3, #1
   15e0c:	ldrh	r0, [ip, r3]
   15e10:	cmp	r0, #0
   15e14:	bxeq	lr
   15e18:	add	r2, r1, r2, lsl #1
   15e1c:	add	r1, r1, #2
   15e20:	b	15e38 <flatcc_builder_check_required@@Base+0x5c>
   15e24:	ldrh	r3, [r1], #2
   15e28:	lsl	r3, r3, #1
   15e2c:	ldrh	r0, [ip, r3]
   15e30:	cmp	r0, #0
   15e34:	bxeq	lr
   15e38:	cmp	r1, r2
   15e3c:	bne	15e24 <flatcc_builder_check_required@@Base+0x48>
   15e40:	mov	r0, #1
   15e44:	bx	lr
   15e48:	mov	r0, #0
   15e4c:	bx	lr
   15e50:	movw	r1, #38312	; 0x95a8
   15e54:	movt	r1, #1
   15e58:	ldr	r3, [pc, #20]	; 15e74 <flatcc_builder_check_required@@Base+0x98>
   15e5c:	movw	r0, #39028	; 0x9874
   15e60:	movt	r0, #1
   15e64:	str	r4, [sp, #-8]!
   15e68:	movw	r2, #1297	; 0x511
   15e6c:	str	lr, [sp, #4]
   15e70:	bl	12060 <__assert_fail@plt>
   15e74:	muleq	r1, r8, r3

00015e78 <flatcc_builder_end_table@@Base>:
   15e78:	ldr	r3, [r0, #32]
   15e7c:	strd	r4, [sp, #-20]!	; 0xffffffec
   15e80:	ldrh	r3, [r3, #14]
   15e84:	strd	r6, [sp, #8]
   15e88:	str	lr, [sp, #16]
   15e8c:	sub	sp, sp, #20
   15e90:	cmp	r3, #3
   15e94:	bne	16018 <flatcc_builder_end_table@@Base+0x1a0>
   15e98:	ldrh	r5, [r0, #8]
   15e9c:	movw	ip, #31153	; 0x79b1
   15ea0:	movt	ip, #40503	; 0x9e37
   15ea4:	mov	r4, r0
   15ea8:	ldr	r1, [r0, #4]
   15eac:	ldr	r3, [r0, #12]
   15eb0:	add	r5, r5, #2
   15eb4:	lsl	r5, r5, #1
   15eb8:	ldr	lr, [r0, #20]
   15ebc:	sub	r6, r1, #4
   15ec0:	uxth	r5, r5
   15ec4:	eor	r3, r3, r5
   15ec8:	mov	r2, r5
   15ecc:	strh	r5, [r1, #-4]
   15ed0:	mul	r3, ip, r3
   15ed4:	add	lr, lr, #4
   15ed8:	uxth	lr, lr
   15edc:	eor	r3, r3, lr
   15ee0:	strh	lr, [r1, #-2]
   15ee4:	mov	r1, r6
   15ee8:	mul	r3, ip, r3
   15eec:	str	r3, [r0, #12]
   15ef0:	bl	15798 <flatcc_builder_create_cached_vtable@@Base>
   15ef4:	subs	r7, r0, #0
   15ef8:	bne	15f18 <flatcc_builder_end_table@@Base+0xa0>
   15efc:	mov	r5, #0
   15f00:	mov	r0, r5
   15f04:	add	sp, sp, #20
   15f08:	ldrd	r4, [sp]
   15f0c:	ldrd	r6, [sp, #8]
   15f10:	add	sp, sp, #16
   15f14:	pop	{pc}		; (ldr pc, [sp], #4)
   15f18:	mov	r2, r5
   15f1c:	mov	r1, #0
   15f20:	mov	r0, r6
   15f24:	bl	12030 <memset@plt>
   15f28:	ldr	ip, [r4]
   15f2c:	mov	r0, r4
   15f30:	ldr	r3, [r4, #32]
   15f34:	ldr	r2, [r4, #76]	; 0x4c
   15f38:	ldr	r1, [r3, #20]
   15f3c:	str	r7, [sp, #8]
   15f40:	ldrh	r3, [r4, #130]	; 0x82
   15f44:	add	r2, r2, r1
   15f48:	ldr	r1, [r4, #16]
   15f4c:	sub	ip, ip, r2
   15f50:	asr	ip, ip, #1
   15f54:	str	r2, [sp]
   15f58:	ldr	r2, [r4, #20]
   15f5c:	str	ip, [sp, #4]
   15f60:	bl	15b0c <flatcc_builder_create_table@@Base>
   15f64:	subs	r5, r0, #0
   15f68:	beq	15efc <flatcc_builder_end_table@@Base+0x84>
   15f6c:	ldr	r3, [r4, #32]
   15f70:	mov	r1, #0
   15f74:	ldr	r0, [r4, #52]	; 0x34
   15f78:	ldr	r2, [r4, #76]	; 0x4c
   15f7c:	ldr	ip, [r3, #16]
   15f80:	ldr	r6, [r3, #20]
   15f84:	ldrh	lr, [r3, #28]
   15f88:	add	r0, r0, ip
   15f8c:	ldr	ip, [r3, #24]
   15f90:	add	r3, r2, r6
   15f94:	ldr	r2, [r4, #20]
   15f98:	str	r3, [r4]
   15f9c:	str	r0, [r4, #4]
   15fa0:	strh	lr, [r4, #8]
   15fa4:	str	ip, [r4, #12]
   15fa8:	ldr	r0, [r4, #16]
   15fac:	bl	12030 <memset@plt>
   15fb0:	ldr	r3, [r4, #32]
   15fb4:	ldr	r0, [r4, #60]	; 0x3c
   15fb8:	ldr	r2, [r4, #64]	; 0x40
   15fbc:	ldr	ip, [r3]
   15fc0:	ldmib	r3, {r1, lr}
   15fc4:	add	r0, r0, ip
   15fc8:	sub	r2, r2, ip
   15fcc:	str	r0, [r4, #16]
   15fd0:	cmp	r2, r1
   15fd4:	ldrh	r0, [r4, #128]	; 0x80
   15fd8:	movcs	r2, r1
   15fdc:	str	lr, [r4, #20]
   15fe0:	str	ip, [r4, #28]
   15fe4:	ldrh	ip, [r4, #130]	; 0x82
   15fe8:	str	r2, [r4, #24]
   15fec:	ldr	r2, [r4, #156]	; 0x9c
   15ff0:	str	r1, [r3, #4]
   15ff4:	cmp	r0, ip
   15ff8:	sub	r0, r3, #36	; 0x24
   15ffc:	strhcc	ip, [r4, #128]	; 0x80
   16000:	ldrh	r1, [r3, #12]
   16004:	sub	r3, r2, #1
   16008:	str	r0, [r4, #32]
   1600c:	strh	r1, [r4, #130]	; 0x82
   16010:	str	r3, [r4, #156]	; 0x9c
   16014:	b	15f00 <flatcc_builder_end_table@@Base+0x88>
   16018:	movw	r1, #38312	; 0x95a8
   1601c:	movt	r1, #1
   16020:	ldr	r3, [pc, #12]	; 16034 <flatcc_builder_end_table@@Base+0x1bc>
   16024:	movw	r0, #39028	; 0x9874
   16028:	movt	r0, #1
   1602c:	movw	r2, #1317	; 0x525
   16030:	bl	12060 <__assert_fail@plt>
   16034:			; <UNDEFINED> instruction: 0x000193b8

00016038 <flatcc_builder_create_vector@@Base>:
   16038:	strd	r4, [sp, #-16]!
   1603c:	mov	r4, r0
   16040:	str	r6, [sp, #8]
   16044:	str	lr, [sp, #12]
   16048:	sub	sp, sp, #88	; 0x58
   1604c:	ldr	ip, [sp, #108]	; 0x6c
   16050:	ldrh	r0, [sp, #104]	; 0x68
   16054:	cmp	r2, ip
   16058:	bhi	1614c <flatcc_builder_create_vector@@Base+0x114>
   1605c:	ldrh	ip, [r4, #128]	; 0x80
   16060:	cmp	r0, #4
   16064:	mul	r3, r3, r2
   16068:	movcc	r0, #4
   1606c:	add	lr, sp, #12
   16070:	str	r2, [sp, #12]
   16074:	ldr	r6, [r4, #136]	; 0x88
   16078:	mov	r2, #1
   1607c:	str	lr, [sp, #24]
   16080:	cmp	ip, r0
   16084:	mov	ip, #4
   16088:	strhcc	r0, [r4, #128]	; 0x80
   1608c:	sub	lr, r6, r3
   16090:	sub	r0, r0, #1
   16094:	cmp	r3, #0
   16098:	and	r0, r0, lr
   1609c:	str	ip, [sp, #16]
   160a0:	moveq	r3, #2
   160a4:	str	r2, [sp, #20]
   160a8:	str	ip, [sp, #28]
   160ac:	beq	160d0 <flatcc_builder_create_vector@@Base+0x98>
   160b0:	mov	lr, #2
   160b4:	add	ip, r3, ip
   160b8:	mov	r2, lr
   160bc:	str	ip, [sp, #16]
   160c0:	str	r3, [sp, #36]	; 0x24
   160c4:	mov	r3, #3
   160c8:	str	lr, [sp, #20]
   160cc:	str	r1, [sp, #32]
   160d0:	cmp	r0, #0
   160d4:	bne	16120 <flatcc_builder_create_vector@@Base+0xe8>
   160d8:	sub	r5, r6, ip
   160dc:	cmp	r6, r5
   160e0:	ble	1616c <flatcc_builder_create_vector@@Base+0x134>
   160e4:	mov	r3, r5
   160e8:	add	r1, sp, #24
   160ec:	str	ip, [sp]
   160f0:	ldr	r0, [r4, #36]	; 0x24
   160f4:	ldr	r6, [r4, #44]	; 0x2c
   160f8:	blx	r6
   160fc:	cmp	r0, #0
   16100:	bne	16168 <flatcc_builder_create_vector@@Base+0x130>
   16104:	mov	r0, r5
   16108:	str	r5, [r4, #136]	; 0x88
   1610c:	add	sp, sp, #88	; 0x58
   16110:	ldrd	r4, [sp]
   16114:	ldr	r6, [sp, #8]
   16118:	add	sp, sp, #12
   1611c:	pop	{pc}		; (ldr pc, [sp], #4)
   16120:	ldr	lr, [pc, #96]	; 16188 <flatcc_builder_create_vector@@Base+0x150>
   16124:	add	r2, r2, #1
   16128:	add	r1, sp, #88	; 0x58
   1612c:	add	r1, r1, r2, lsl #3
   16130:	add	ip, ip, r0
   16134:	mov	r2, r3
   16138:	str	ip, [sp, #16]
   1613c:	str	r3, [sp, #20]
   16140:	str	lr, [r1, #-72]	; 0xffffffb8
   16144:	str	r0, [r1, #-68]	; 0xffffffbc
   16148:	b	160d8 <flatcc_builder_create_vector@@Base+0xa0>
   1614c:	movw	r1, #38312	; 0x95a8
   16150:	movt	r1, #1
   16154:	ldr	r3, [pc, #48]	; 1618c <flatcc_builder_create_vector@@Base+0x154>
   16158:	movw	r0, #39072	; 0x98a0
   1615c:	movt	r0, #1
   16160:	movw	r2, #1365	; 0x555
   16164:	bl	12060 <__assert_fail@plt>
   16168:	bl	12abc <flatcc_builder_default_alloc@@Base+0x19c>
   1616c:	movw	r1, #38312	; 0x95a8
   16170:	movt	r1, #1
   16174:	ldr	r3, [pc, #20]	; 16190 <flatcc_builder_create_vector@@Base+0x158>
   16178:	movw	r0, #38504	; 0x9668
   1617c:	movt	r0, #1
   16180:	movw	r2, #647	; 0x287
   16184:	bl	12060 <__assert_fail@plt>
   16188:	andeq	r8, r1, r0, lsl #30
   1618c:	ldrdeq	r9, [r1], -r4
   16190:	andeq	r8, r1, r4, lsl #29

00016194 <flatcc_builder_end_vector@@Base>:
   16194:	ldr	r2, [r0, #32]
   16198:	strd	r4, [sp, #-16]!
   1619c:	ldrh	r3, [r2, #14]
   161a0:	str	r6, [sp, #8]
   161a4:	str	lr, [sp, #12]
   161a8:	sub	sp, sp, #88	; 0x58
   161ac:	cmp	r3, #4
   161b0:	bne	16378 <flatcc_builder_end_vector@@Base+0x1e4>
   161b4:	ldr	ip, [r2, #20]
   161b8:	mov	r4, r0
   161bc:	ldr	r1, [r2, #24]
   161c0:	ldrh	r3, [r0, #130]	; 0x82
   161c4:	ldr	r5, [r4, #16]
   161c8:	cmp	ip, r1
   161cc:	ldr	r0, [r2, #16]
   161d0:	bhi	1635c <flatcc_builder_end_vector@@Base+0x1c8>
   161d4:	cmp	r3, #4
   161d8:	mul	r0, r0, ip
   161dc:	mov	r1, #4
   161e0:	ldrh	r2, [r4, #128]	; 0x80
   161e4:	movcc	r3, #4
   161e8:	add	r6, sp, #12
   161ec:	str	ip, [sp, #12]
   161f0:	ldr	lr, [r4, #136]	; 0x88
   161f4:	str	r1, [sp, #16]
   161f8:	str	r6, [sp, #24]
   161fc:	cmp	r2, r3
   16200:	mov	r2, #1
   16204:	strhcc	r3, [r4, #128]	; 0x80
   16208:	sub	ip, lr, r0
   1620c:	sub	r3, r3, #1
   16210:	cmp	r0, #0
   16214:	and	r3, r3, ip
   16218:	str	r2, [sp, #20]
   1621c:	moveq	r0, #2
   16220:	str	r1, [sp, #28]
   16224:	beq	16248 <flatcc_builder_end_vector@@Base+0xb4>
   16228:	mov	ip, #2
   1622c:	add	r1, r0, r1
   16230:	mov	r2, ip
   16234:	str	r1, [sp, #16]
   16238:	str	r0, [sp, #36]	; 0x24
   1623c:	mov	r0, #3
   16240:	str	ip, [sp, #20]
   16244:	str	r5, [sp, #32]
   16248:	cmp	r3, #0
   1624c:	bne	16310 <flatcc_builder_end_vector@@Base+0x17c>
   16250:	sub	r5, lr, r1
   16254:	cmp	lr, r5
   16258:	ble	16340 <flatcc_builder_end_vector@@Base+0x1ac>
   1625c:	mov	r3, r5
   16260:	str	r1, [sp]
   16264:	add	r1, sp, #24
   16268:	ldr	r0, [r4, #36]	; 0x24
   1626c:	ldr	r6, [r4, #44]	; 0x2c
   16270:	blx	r6
   16274:	subs	r1, r0, #0
   16278:	bne	1633c <flatcc_builder_end_vector@@Base+0x1a8>
   1627c:	cmp	r5, #0
   16280:	str	r5, [r4, #136]	; 0x88
   16284:	beq	162f8 <flatcc_builder_end_vector@@Base+0x164>
   16288:	ldr	r0, [r4, #16]
   1628c:	ldr	r2, [r4, #20]
   16290:	bl	12030 <memset@plt>
   16294:	ldr	r3, [r4, #32]
   16298:	ldr	r0, [r4, #60]	; 0x3c
   1629c:	ldr	r2, [r4, #64]	; 0x40
   162a0:	ldr	ip, [r3]
   162a4:	ldmib	r3, {r1, lr}
   162a8:	add	r0, r0, ip
   162ac:	sub	r2, r2, ip
   162b0:	str	r0, [r4, #16]
   162b4:	cmp	r2, r1
   162b8:	ldrh	r0, [r4, #128]	; 0x80
   162bc:	movcs	r2, r1
   162c0:	str	lr, [r4, #20]
   162c4:	str	ip, [r4, #28]
   162c8:	ldrh	ip, [r4, #130]	; 0x82
   162cc:	str	r2, [r4, #24]
   162d0:	ldr	r2, [r4, #156]	; 0x9c
   162d4:	str	r1, [r3, #4]
   162d8:	cmp	r0, ip
   162dc:	sub	r0, r3, #36	; 0x24
   162e0:	strhcc	ip, [r4, #128]	; 0x80
   162e4:	ldrh	r1, [r3, #12]
   162e8:	sub	r3, r2, #1
   162ec:	str	r0, [r4, #32]
   162f0:	strh	r1, [r4, #130]	; 0x82
   162f4:	str	r3, [r4, #156]	; 0x9c
   162f8:	mov	r0, r5
   162fc:	add	sp, sp, #88	; 0x58
   16300:	ldrd	r4, [sp]
   16304:	ldr	r6, [sp, #8]
   16308:	add	sp, sp, #12
   1630c:	pop	{pc}		; (ldr pc, [sp], #4)
   16310:	ldr	r5, [pc, #124]	; 16394 <flatcc_builder_end_vector@@Base+0x200>
   16314:	add	r2, r2, #1
   16318:	add	ip, sp, #88	; 0x58
   1631c:	add	ip, ip, r2, lsl #3
   16320:	add	r1, r1, r3
   16324:	mov	r2, r0
   16328:	str	r1, [sp, #16]
   1632c:	str	r0, [sp, #20]
   16330:	str	r5, [ip, #-72]	; 0xffffffb8
   16334:	str	r3, [ip, #-68]	; 0xffffffbc
   16338:	b	16250 <flatcc_builder_end_vector@@Base+0xbc>
   1633c:	bl	12abc <flatcc_builder_default_alloc@@Base+0x19c>
   16340:	movw	r1, #38312	; 0x95a8
   16344:	movt	r1, #1
   16348:	ldr	r3, [pc, #72]	; 16398 <flatcc_builder_end_vector@@Base+0x204>
   1634c:	movw	r0, #38504	; 0x9668
   16350:	movt	r0, #1
   16354:	movw	r2, #647	; 0x287
   16358:	bl	12060 <__assert_fail@plt>
   1635c:	movw	r1, #38312	; 0x95a8
   16360:	movt	r1, #1
   16364:	ldr	r3, [pc, #48]	; 1639c <flatcc_builder_end_vector@@Base+0x208>
   16368:	movw	r0, #39072	; 0x98a0
   1636c:	movt	r0, #1
   16370:	movw	r2, #1365	; 0x555
   16374:	bl	12060 <__assert_fail@plt>
   16378:	movw	r1, #38312	; 0x95a8
   1637c:	movt	r1, #1
   16380:	ldr	r3, [pc, #24]	; 163a0 <flatcc_builder_end_vector@@Base+0x20c>
   16384:	movw	r0, #38676	; 0x9714
   16388:	movt	r0, #1
   1638c:	movw	r2, #1400	; 0x578
   16390:	bl	12060 <__assert_fail@plt>
   16394:	andeq	r8, r1, r0, lsl #30
   16398:	andeq	r8, r1, r4, lsl #29
   1639c:	ldrdeq	r9, [r1], -r4
   163a0:	strdeq	r9, [r1], -r4

000163a4 <flatcc_builder_vector_count@@Base>:
   163a4:	ldr	r3, [r0, #32]
   163a8:	ldr	r0, [r3, #20]
   163ac:	bx	lr

000163b0 <flatcc_builder_vector_edit@@Base>:
   163b0:	ldr	r0, [r0, #16]
   163b4:	bx	lr

000163b8 <flatcc_builder_create_offset_vector_direct@@Base>:
   163b8:	cmn	r2, #-1073741823	; 0xc0000001
   163bc:	strd	r4, [sp, #-24]!	; 0xffffffe8
   163c0:	strd	r6, [sp, #8]
   163c4:	str	r8, [sp, #16]
   163c8:	str	lr, [sp, #20]
   163cc:	sub	sp, sp, #88	; 0x58
   163d0:	bhi	164d4 <flatcc_builder_create_offset_vector_direct@@Base+0x11c>
   163d4:	ldrh	r3, [r0, #128]	; 0x80
   163d8:	mov	r4, r0
   163dc:	mov	ip, #1
   163e0:	str	r2, [sp, #12]
   163e4:	ldr	r5, [r4, #136]	; 0x88
   163e8:	str	ip, [sp, #20]
   163ec:	cmp	r3, #3
   163f0:	movls	r3, #4
   163f4:	strhls	r3, [r0, #128]	; 0x80
   163f8:	mov	r0, #4
   163fc:	add	r3, sp, #12
   16400:	lsls	lr, r2, #2
   16404:	str	r0, [sp, #16]
   16408:	moveq	r7, #2
   1640c:	str	r3, [sp, #24]
   16410:	and	r3, r5, #3
   16414:	str	r0, [sp, #28]
   16418:	beq	1643c <flatcc_builder_create_offset_vector_direct@@Base+0x84>
   1641c:	mov	r6, #2
   16420:	add	r0, lr, r0
   16424:	mov	ip, r6
   16428:	mov	r7, #3
   1642c:	str	r0, [sp, #16]
   16430:	str	r6, [sp, #20]
   16434:	str	r1, [sp, #32]
   16438:	str	lr, [sp, #36]	; 0x24
   1643c:	cmp	r3, #0
   16440:	bne	164a8 <flatcc_builder_create_offset_vector_direct@@Base+0xf0>
   16444:	cmp	r2, #0
   16448:	beq	164f8 <flatcc_builder_create_offset_vector_direct@@Base+0x140>
   1644c:	ldr	r3, [r1]
   16450:	cmp	r3, #0
   16454:	subne	lr, lr, #4
   16458:	movne	r2, #0
   1645c:	beq	1648c <flatcc_builder_create_offset_vector_direct@@Base+0xd4>
   16460:	sub	r3, r3, #4
   16464:	cmp	r2, lr
   16468:	sub	r3, r3, r5
   1646c:	add	r3, r3, r0
   16470:	sub	r3, r3, r2
   16474:	str	r3, [r1]
   16478:	beq	164f4 <flatcc_builder_create_offset_vector_direct@@Base+0x13c>
   1647c:	ldr	r3, [r1, #4]!
   16480:	add	r2, r2, #4
   16484:	cmp	r3, #0
   16488:	bne	16460 <flatcc_builder_create_offset_vector_direct@@Base+0xa8>
   1648c:	movw	r1, #38312	; 0x95a8
   16490:	movt	r1, #1
   16494:	ldr	r3, [pc, #176]	; 1654c <flatcc_builder_create_offset_vector_direct@@Base+0x194>
   16498:	movw	r0, #38504	; 0x9668
   1649c:	movt	r0, #1
   164a0:	movw	r2, #1463	; 0x5b7
   164a4:	bl	12060 <__assert_fail@plt>
   164a8:	ldr	r8, [pc, #160]	; 16550 <flatcc_builder_create_offset_vector_direct@@Base+0x198>
   164ac:	add	ip, ip, #1
   164b0:	add	r6, sp, #88	; 0x58
   164b4:	add	r6, r6, ip, lsl #3
   164b8:	add	r0, r0, r3
   164bc:	mov	ip, r7
   164c0:	str	r0, [sp, #16]
   164c4:	str	r7, [sp, #20]
   164c8:	str	r8, [r6, #-72]	; 0xffffffb8
   164cc:	str	r3, [r6, #-68]	; 0xffffffbc
   164d0:	b	16444 <flatcc_builder_create_offset_vector_direct@@Base+0x8c>
   164d4:	mov	r6, #0
   164d8:	mov	r0, r6
   164dc:	add	sp, sp, #88	; 0x58
   164e0:	ldrd	r4, [sp]
   164e4:	ldrd	r6, [sp, #8]
   164e8:	ldr	r8, [sp, #16]
   164ec:	add	sp, sp, #20
   164f0:	pop	{pc}		; (ldr pc, [sp], #4)
   164f4:	ldr	r5, [r4, #136]	; 0x88
   164f8:	sub	r6, r5, r0
   164fc:	cmp	r6, r5
   16500:	bge	16530 <flatcc_builder_create_offset_vector_direct@@Base+0x178>
   16504:	mov	r2, ip
   16508:	mov	r3, r6
   1650c:	str	r0, [sp]
   16510:	add	r1, sp, #24
   16514:	ldr	r0, [r4, #36]	; 0x24
   16518:	ldr	r5, [r4, #44]	; 0x2c
   1651c:	blx	r5
   16520:	cmp	r0, #0
   16524:	streq	r6, [r4, #136]	; 0x88
   16528:	beq	164d8 <flatcc_builder_create_offset_vector_direct@@Base+0x120>
   1652c:	bl	12abc <flatcc_builder_default_alloc@@Base+0x19c>
   16530:	movw	r1, #38312	; 0x95a8
   16534:	movt	r1, #1
   16538:	ldr	r3, [pc, #20]	; 16554 <flatcc_builder_create_offset_vector_direct@@Base+0x19c>
   1653c:	movw	r0, #38504	; 0x9668
   16540:	movt	r0, #1
   16544:	movw	r2, #647	; 0x287
   16548:	bl	12060 <__assert_fail@plt>
   1654c:	andeq	r9, r1, r0, lsl #2
   16550:	andeq	r8, r1, r0, lsl #30
   16554:	andeq	r8, r1, r4, lsl #29

00016558 <flatcc_builder_end_offset_vector@@Base>:
   16558:	ldr	r3, [r0, #32]
   1655c:	strd	r4, [sp, #-24]!	; 0xffffffe8
   16560:	ldrh	r2, [r3, #14]
   16564:	strd	r6, [sp, #8]
   16568:	str	r8, [sp, #16]
   1656c:	str	lr, [sp, #20]
   16570:	sub	sp, sp, #88	; 0x58
   16574:	cmp	r2, #5
   16578:	bne	16760 <flatcc_builder_end_offset_vector@@Base+0x208>
   1657c:	ldr	r3, [r3, #20]
   16580:	cmn	r3, #-1073741823	; 0xc0000001
   16584:	bhi	16688 <flatcc_builder_end_offset_vector@@Base+0x130>
   16588:	ldrh	r2, [r0, #128]	; 0x80
   1658c:	mov	r4, r0
   16590:	add	r5, sp, #12
   16594:	mov	r1, #1
   16598:	str	r3, [sp, #12]
   1659c:	ldr	ip, [r4, #136]	; 0x88
   165a0:	str	r1, [sp, #20]
   165a4:	ldr	r0, [r0, #16]
   165a8:	cmp	r2, #3
   165ac:	str	r5, [sp, #24]
   165b0:	movls	r2, #4
   165b4:	and	r5, ip, #3
   165b8:	strhls	r2, [r4, #128]	; 0x80
   165bc:	mov	r2, #4
   165c0:	lsls	lr, r3, #2
   165c4:	moveq	r6, #2
   165c8:	str	r2, [sp, #16]
   165cc:	str	r2, [sp, #28]
   165d0:	beq	165f4 <flatcc_builder_end_offset_vector@@Base+0x9c>
   165d4:	mov	r7, #2
   165d8:	add	r2, lr, r2
   165dc:	mov	r1, r7
   165e0:	mov	r6, #3
   165e4:	str	r2, [sp, #16]
   165e8:	str	r7, [sp, #20]
   165ec:	str	r0, [sp, #32]
   165f0:	str	lr, [sp, #36]	; 0x24
   165f4:	cmp	r5, #0
   165f8:	bne	16660 <flatcc_builder_end_offset_vector@@Base+0x108>
   165fc:	cmp	r3, #0
   16600:	beq	166b0 <flatcc_builder_end_offset_vector@@Base+0x158>
   16604:	ldr	r3, [r0]
   16608:	cmp	r3, #0
   1660c:	subne	lr, lr, #4
   16610:	movne	r1, #0
   16614:	beq	16644 <flatcc_builder_end_offset_vector@@Base+0xec>
   16618:	sub	r3, r3, #4
   1661c:	cmp	r1, lr
   16620:	sub	r3, r3, ip
   16624:	add	r3, r3, r2
   16628:	sub	r3, r3, r1
   1662c:	str	r3, [r0]
   16630:	beq	166a8 <flatcc_builder_end_offset_vector@@Base+0x150>
   16634:	ldr	r3, [r0, #4]!
   16638:	add	r1, r1, #4
   1663c:	cmp	r3, #0
   16640:	bne	16618 <flatcc_builder_end_offset_vector@@Base+0xc0>
   16644:	movw	r1, #38312	; 0x95a8
   16648:	movt	r1, #1
   1664c:	ldr	r3, [pc, #328]	; 1679c <flatcc_builder_end_offset_vector@@Base+0x244>
   16650:	movw	r0, #38504	; 0x9668
   16654:	movt	r0, #1
   16658:	movw	r2, #1463	; 0x5b7
   1665c:	bl	12060 <__assert_fail@plt>
   16660:	ldr	r7, [pc, #312]	; 167a0 <flatcc_builder_end_offset_vector@@Base+0x248>
   16664:	add	r1, r1, #1
   16668:	add	r8, sp, #88	; 0x58
   1666c:	add	r1, r8, r1, lsl #3
   16670:	add	r2, r2, r5
   16674:	str	r2, [sp, #16]
   16678:	str	r6, [sp, #20]
   1667c:	str	r7, [r1, #-72]	; 0xffffffb8
   16680:	str	r5, [r1, #-68]	; 0xffffffbc
   16684:	b	165fc <flatcc_builder_end_offset_vector@@Base+0xa4>
   16688:	mov	r5, #0
   1668c:	mov	r0, r5
   16690:	add	sp, sp, #88	; 0x58
   16694:	ldrd	r4, [sp]
   16698:	ldrd	r6, [sp, #8]
   1669c:	ldr	r8, [sp, #16]
   166a0:	add	sp, sp, #20
   166a4:	pop	{pc}		; (ldr pc, [sp], #4)
   166a8:	ldr	r2, [sp, #16]
   166ac:	ldr	ip, [r4, #136]	; 0x88
   166b0:	sub	r5, ip, r2
   166b4:	cmp	r5, ip
   166b8:	bge	16780 <flatcc_builder_end_offset_vector@@Base+0x228>
   166bc:	add	r1, sp, #24
   166c0:	mov	r3, r5
   166c4:	str	r2, [sp]
   166c8:	ldr	r2, [sp, #20]
   166cc:	ldr	r0, [r4, #36]	; 0x24
   166d0:	ldr	r6, [r4, #44]	; 0x2c
   166d4:	blx	r6
   166d8:	subs	r1, r0, #0
   166dc:	bne	1677c <flatcc_builder_end_offset_vector@@Base+0x224>
   166e0:	cmp	r5, #0
   166e4:	str	r5, [r4, #136]	; 0x88
   166e8:	beq	16688 <flatcc_builder_end_offset_vector@@Base+0x130>
   166ec:	ldr	r0, [r4, #16]
   166f0:	ldr	r2, [r4, #20]
   166f4:	bl	12030 <memset@plt>
   166f8:	ldr	r3, [r4, #32]
   166fc:	ldr	r0, [r4, #60]	; 0x3c
   16700:	ldr	r2, [r4, #64]	; 0x40
   16704:	ldr	ip, [r3]
   16708:	ldmib	r3, {r1, lr}
   1670c:	add	r0, r0, ip
   16710:	sub	r2, r2, ip
   16714:	str	r0, [r4, #16]
   16718:	cmp	r2, r1
   1671c:	ldrh	r0, [r4, #128]	; 0x80
   16720:	movcs	r2, r1
   16724:	str	lr, [r4, #20]
   16728:	str	ip, [r4, #28]
   1672c:	ldrh	ip, [r4, #130]	; 0x82
   16730:	str	r2, [r4, #24]
   16734:	ldr	r2, [r4, #156]	; 0x9c
   16738:	str	r1, [r3, #4]
   1673c:	cmp	r0, ip
   16740:	sub	r0, r3, #36	; 0x24
   16744:	strhcc	ip, [r4, #128]	; 0x80
   16748:	ldrh	r1, [r3, #12]
   1674c:	sub	r3, r2, #1
   16750:	str	r0, [r4, #32]
   16754:	strh	r1, [r4, #130]	; 0x82
   16758:	str	r3, [r4, #156]	; 0x9c
   1675c:	b	1668c <flatcc_builder_end_offset_vector@@Base+0x134>
   16760:	movw	r1, #38312	; 0x95a8
   16764:	movt	r1, #1
   16768:	ldr	r3, [pc, #52]	; 167a4 <flatcc_builder_end_offset_vector@@Base+0x24c>
   1676c:	movw	r0, #38784	; 0x9780
   16770:	movt	r0, #1
   16774:	movw	r2, #1480	; 0x5c8
   16778:	bl	12060 <__assert_fail@plt>
   1677c:	bl	12abc <flatcc_builder_default_alloc@@Base+0x19c>
   16780:	movw	r1, #38312	; 0x95a8
   16784:	movt	r1, #1
   16788:	ldr	r3, [pc, #24]	; 167a8 <flatcc_builder_end_offset_vector@@Base+0x250>
   1678c:	movw	r0, #38504	; 0x9668
   16790:	movt	r0, #1
   16794:	movw	r2, #647	; 0x287
   16798:	bl	12060 <__assert_fail@plt>
   1679c:	andeq	r9, r1, r0, lsl #2
   167a0:	andeq	r8, r1, r0, lsl #30
   167a4:	andeq	r9, r1, r4, ror #5
   167a8:	andeq	r8, r1, r4, lsl #29

000167ac <flatcc_builder_end_offset_vector_for_unions@@Base>:
   167ac:	ldr	r2, [r0, #32]
   167b0:	strd	r4, [sp, #-16]!
   167b4:	ldrh	ip, [r2, #14]
   167b8:	str	r6, [sp, #8]
   167bc:	str	lr, [sp, #12]
   167c0:	cmp	ip, #5
   167c4:	bne	1687c <flatcc_builder_end_offset_vector_for_unions@@Base+0xd0>
   167c8:	ldr	r2, [r2, #20]
   167cc:	cmn	r2, #-1073741823	; 0xc0000001
   167d0:	bhi	167ec <flatcc_builder_end_offset_vector_for_unions@@Base+0x40>
   167d4:	mov	r3, r1
   167d8:	ldr	r1, [r0, #16]
   167dc:	mov	r4, r0
   167e0:	bl	12ca8 <flatcc_builder_default_alloc@@Base+0x388>
   167e4:	subs	r5, r0, #0
   167e8:	bne	16804 <flatcc_builder_end_offset_vector_for_unions@@Base+0x58>
   167ec:	mov	r5, #0
   167f0:	mov	r0, r5
   167f4:	ldrd	r4, [sp]
   167f8:	ldr	r6, [sp, #8]
   167fc:	add	sp, sp, #12
   16800:	pop	{pc}		; (ldr pc, [sp], #4)
   16804:	mov	r1, #0
   16808:	ldr	r0, [r4, #16]
   1680c:	ldr	r2, [r4, #20]
   16810:	bl	12030 <memset@plt>
   16814:	ldr	r3, [r4, #32]
   16818:	ldr	r0, [r4, #60]	; 0x3c
   1681c:	ldr	r2, [r4, #64]	; 0x40
   16820:	ldr	ip, [r3]
   16824:	ldmib	r3, {r1, lr}
   16828:	add	r0, r0, ip
   1682c:	sub	r2, r2, ip
   16830:	str	r0, [r4, #16]
   16834:	cmp	r2, r1
   16838:	ldrh	r0, [r4, #128]	; 0x80
   1683c:	movcs	r2, r1
   16840:	str	lr, [r4, #20]
   16844:	str	ip, [r4, #28]
   16848:	ldrh	ip, [r4, #130]	; 0x82
   1684c:	str	r2, [r4, #24]
   16850:	ldr	r2, [r4, #156]	; 0x9c
   16854:	str	r1, [r3, #4]
   16858:	cmp	r0, ip
   1685c:	sub	r0, r3, #36	; 0x24
   16860:	strhcc	ip, [r4, #128]	; 0x80
   16864:	ldrh	r1, [r3, #12]
   16868:	sub	r3, r2, #1
   1686c:	str	r0, [r4, #32]
   16870:	strh	r1, [r4, #130]	; 0x82
   16874:	str	r3, [r4, #156]	; 0x9c
   16878:	b	167f0 <flatcc_builder_end_offset_vector_for_unions@@Base+0x44>
   1687c:	movw	r1, #38312	; 0x95a8
   16880:	movt	r1, #1
   16884:	ldr	r3, [pc, #12]	; 16898 <flatcc_builder_end_offset_vector_for_unions@@Base+0xec>
   16888:	movw	r0, #38784	; 0x9780
   1688c:	movt	r0, #1
   16890:	movw	r2, #1493	; 0x5d5
   16894:	bl	12060 <__assert_fail@plt>
   16898:	andeq	r9, r1, r0, lsl r4

0001689c <flatcc_builder_offset_vector_edit@@Base>:
   1689c:	ldr	r0, [r0, #16]
   168a0:	bx	lr

000168a4 <flatcc_builder_offset_vector_count@@Base>:
   168a4:	ldr	r3, [r0, #32]
   168a8:	ldr	r0, [r3, #20]
   168ac:	bx	lr

000168b0 <flatcc_builder_create_union_vector@@Base>:
   168b0:	strd	r4, [sp, #-32]!	; 0xffffffe0
   168b4:	mov	r4, r1
   168b8:	mov	r1, #4
   168bc:	strd	r6, [sp, #8]
   168c0:	mov	r6, r0
   168c4:	mov	r0, r4
   168c8:	strd	r8, [sp, #16]
   168cc:	mov	r5, r2
   168d0:	mov	r7, r3
   168d4:	str	sl, [sp, #24]
   168d8:	str	lr, [sp, #28]
   168dc:	sub	sp, sp, #8
   168e0:	bl	12b84 <flatcc_builder_default_alloc@@Base+0x264>
   168e4:	cmp	r0, #0
   168e8:	bne	16a54 <flatcc_builder_create_union_vector@@Base+0x1a4>
   168ec:	ldr	ip, [r4, #28]
   168f0:	mov	lr, #4
   168f4:	mov	r8, #5
   168f8:	mvn	r9, #3
   168fc:	ldr	r3, [r4, #32]
   16900:	ldr	r2, [r4, #64]	; 0x40
   16904:	ldr	r1, [r4, #60]	; 0x3c
   16908:	strh	r8, [r3, #14]
   1690c:	str	lr, [r3, #16]
   16910:	sub	r2, r2, ip
   16914:	str	r0, [r3, #20]
   16918:	mov	r0, r4
   1691c:	cmn	r2, #4
   16920:	add	r1, r1, ip
   16924:	mvnhi	r2, #3
   16928:	str	r1, [r4, #16]
   1692c:	mov	r1, r7
   16930:	str	r2, [r4, #24]
   16934:	str	r9, [r3, #4]
   16938:	bl	1442c <flatcc_builder_extend_offset_vector@@Base>
   1693c:	cmp	r0, #0
   16940:	beq	16a54 <flatcc_builder_create_union_vector@@Base+0x1a4>
   16944:	ldr	r8, [r4, #20]
   16948:	ldr	r3, [r4, #24]
   1694c:	add	r2, r7, r8
   16950:	cmp	r2, r3
   16954:	str	r2, [r4, #20]
   16958:	bcs	16a80 <flatcc_builder_create_union_vector@@Base+0x1d0>
   1695c:	ldr	r1, [r4, #16]
   16960:	adds	r8, r1, r8
   16964:	beq	16a54 <flatcc_builder_create_union_vector@@Base+0x1a4>
   16968:	cmp	r7, #0
   1696c:	beq	1699c <flatcc_builder_create_union_vector@@Base+0xec>
   16970:	add	lr, r5, r7, lsl #3
   16974:	mov	r2, r5
   16978:	sub	r0, r8, #1
   1697c:	sub	r3, r1, #4
   16980:	ldrb	ip, [r2]
   16984:	add	r2, r2, #8
   16988:	strb	ip, [r0, #1]!
   1698c:	ldr	ip, [r2, #-4]
   16990:	cmp	lr, r2
   16994:	str	ip, [r3, #4]!
   16998:	bne	16980 <flatcc_builder_create_union_vector@@Base+0xd0>
   1699c:	mov	r3, r8
   169a0:	mov	r2, r7
   169a4:	mov	r0, r4
   169a8:	bl	12ca8 <flatcc_builder_default_alloc@@Base+0x388>
   169ac:	subs	r5, r0, #0
   169b0:	beq	16ae0 <flatcc_builder_create_union_vector@@Base+0x230>
   169b4:	mvn	ip, #0
   169b8:	mov	r3, #1
   169bc:	mov	r2, r7
   169c0:	mov	r1, r8
   169c4:	mov	r0, r4
   169c8:	stm	sp, {r3, ip}
   169cc:	bl	16038 <flatcc_builder_create_vector@@Base>
   169d0:	mov	r7, r0
   169d4:	mov	r1, #0
   169d8:	ldr	r0, [r4, #16]
   169dc:	ldr	r2, [r4, #20]
   169e0:	bl	12030 <memset@plt>
   169e4:	ldr	r3, [r4, #32]
   169e8:	str	r7, [r6]
   169ec:	ldr	r0, [r4, #60]	; 0x3c
   169f0:	str	r5, [r6, #4]
   169f4:	ldr	r2, [r4, #64]	; 0x40
   169f8:	ldr	ip, [r3]
   169fc:	ldmib	r3, {r1, lr}
   16a00:	add	r0, r0, ip
   16a04:	sub	r2, r2, ip
   16a08:	str	r0, [r4, #16]
   16a0c:	cmp	r2, r1
   16a10:	ldrh	r0, [r4, #128]	; 0x80
   16a14:	movcs	r2, r1
   16a18:	str	lr, [r4, #20]
   16a1c:	str	ip, [r4, #28]
   16a20:	ldrh	ip, [r4, #130]	; 0x82
   16a24:	str	r2, [r4, #24]
   16a28:	ldr	r2, [r4, #156]	; 0x9c
   16a2c:	str	r1, [r3, #4]
   16a30:	cmp	r0, ip
   16a34:	sub	r0, r3, #36	; 0x24
   16a38:	strhcc	ip, [r4, #128]	; 0x80
   16a3c:	ldrh	r1, [r3, #12]
   16a40:	sub	r3, r2, #1
   16a44:	str	r0, [r4, #32]
   16a48:	strh	r1, [r4, #130]	; 0x82
   16a4c:	str	r3, [r4, #156]	; 0x9c
   16a50:	b	16a60 <flatcc_builder_create_union_vector@@Base+0x1b0>
   16a54:	mov	r3, #0
   16a58:	str	r3, [r6]
   16a5c:	str	r3, [r6, #4]
   16a60:	mov	r0, r6
   16a64:	add	sp, sp, #8
   16a68:	ldrd	r4, [sp]
   16a6c:	ldrd	r6, [sp, #8]
   16a70:	ldrd	r8, [sp, #16]
   16a74:	ldr	sl, [sp, #24]
   16a78:	add	sp, sp, #28
   16a7c:	pop	{pc}		; (ldr pc, [sp], #4)
   16a80:	ldr	ip, [r4, #28]
   16a84:	mov	r0, #1
   16a88:	add	r1, r4, #60	; 0x3c
   16a8c:	mov	r3, r0
   16a90:	str	r0, [sp]
   16a94:	ldr	sl, [r4, #48]	; 0x30
   16a98:	add	ip, ip, r0
   16a9c:	ldr	r0, [r4, #40]	; 0x28
   16aa0:	add	r2, ip, r2
   16aa4:	blx	sl
   16aa8:	cmp	r0, #0
   16aac:	bne	16a54 <flatcc_builder_create_union_vector@@Base+0x1a4>
   16ab0:	ldr	r1, [r4, #28]
   16ab4:	ldr	r2, [r4, #32]
   16ab8:	ldr	r3, [r4, #64]	; 0x40
   16abc:	ldr	r0, [r4, #60]	; 0x3c
   16ac0:	sub	r3, r3, r1
   16ac4:	cmn	r3, #4
   16ac8:	movhi	r3, r9
   16acc:	add	r1, r0, r1
   16ad0:	str	r1, [r4, #16]
   16ad4:	str	r3, [r4, #24]
   16ad8:	str	r9, [r2, #4]
   16adc:	b	16960 <flatcc_builder_create_union_vector@@Base+0xb0>
   16ae0:	mov	r7, r5
   16ae4:	b	169d4 <flatcc_builder_create_union_vector@@Base+0x124>

00016ae8 <flatcc_builder_create_union_vector_direct@@Base>:
   16ae8:	strd	r4, [sp, #-24]!	; 0xffffffe8
   16aec:	strd	r6, [sp, #8]
   16af0:	mov	r6, r0
   16af4:	str	r8, [sp, #16]
   16af8:	str	lr, [sp, #20]
   16afc:	sub	sp, sp, #88	; 0x58
   16b00:	ldr	r4, [sp, #112]	; 0x70
   16b04:	cmn	r4, #-1073741823	; 0xc0000001
   16b08:	bhi	16bdc <flatcc_builder_create_union_vector_direct@@Base+0xf4>
   16b0c:	mov	r5, r1
   16b10:	mov	r8, r2
   16b14:	mov	r1, r3
   16b18:	mov	r0, r5
   16b1c:	mov	r3, r2
   16b20:	mov	r2, r4
   16b24:	bl	12ca8 <flatcc_builder_default_alloc@@Base+0x388>
   16b28:	subs	r7, r0, #0
   16b2c:	beq	16bdc <flatcc_builder_create_union_vector_direct@@Base+0xf4>
   16b30:	ldrh	r3, [r5, #128]	; 0x80
   16b34:	mov	r2, #1
   16b38:	mov	r1, #4
   16b3c:	str	r4, [sp, #12]
   16b40:	ldr	r0, [r5, #136]	; 0x88
   16b44:	str	r1, [sp, #16]
   16b48:	str	r1, [sp, #28]
   16b4c:	cmp	r3, #3
   16b50:	movls	r3, #4
   16b54:	strhls	r3, [r5, #128]	; 0x80
   16b58:	add	r3, sp, #12
   16b5c:	cmp	r4, #0
   16b60:	moveq	ip, #2
   16b64:	strd	r2, [sp, #20]
   16b68:	sub	r3, r0, r4
   16b6c:	and	r3, r3, #3
   16b70:	bne	16c04 <flatcc_builder_create_union_vector_direct@@Base+0x11c>
   16b74:	cmp	r3, #0
   16b78:	beq	16ba4 <flatcc_builder_create_union_vector_direct@@Base+0xbc>
   16b7c:	ldr	r4, [pc, #196]	; 16c48 <flatcc_builder_create_union_vector_direct@@Base+0x160>
   16b80:	add	r2, r2, #1
   16b84:	add	lr, sp, #88	; 0x58
   16b88:	add	lr, lr, r2, lsl #3
   16b8c:	add	r1, r1, r3
   16b90:	mov	r2, ip
   16b94:	str	r1, [sp, #16]
   16b98:	str	ip, [sp, #20]
   16b9c:	str	r4, [lr, #-72]	; 0xffffffb8
   16ba0:	str	r3, [lr, #-68]	; 0xffffffbc
   16ba4:	sub	r4, r0, r1
   16ba8:	cmp	r0, r4
   16bac:	ble	16c28 <flatcc_builder_create_union_vector_direct@@Base+0x140>
   16bb0:	mov	r3, r4
   16bb4:	str	r1, [sp]
   16bb8:	add	r1, sp, #24
   16bbc:	ldr	r0, [r5, #36]	; 0x24
   16bc0:	ldr	r8, [r5, #44]	; 0x2c
   16bc4:	blx	r8
   16bc8:	cmp	r0, #0
   16bcc:	bne	16c44 <flatcc_builder_create_union_vector_direct@@Base+0x15c>
   16bd0:	stm	r6, {r4, r7}
   16bd4:	str	r4, [r5, #136]	; 0x88
   16bd8:	b	16be8 <flatcc_builder_create_union_vector_direct@@Base+0x100>
   16bdc:	mov	r3, #0
   16be0:	str	r3, [r6]
   16be4:	str	r3, [r6, #4]
   16be8:	mov	r0, r6
   16bec:	add	sp, sp, #88	; 0x58
   16bf0:	ldrd	r4, [sp]
   16bf4:	ldrd	r6, [sp, #8]
   16bf8:	ldr	r8, [sp, #16]
   16bfc:	add	sp, sp, #20
   16c00:	pop	{pc}		; (ldr pc, [sp], #4)
   16c04:	mov	lr, #2
   16c08:	add	r1, r4, r1
   16c0c:	mov	r2, lr
   16c10:	mov	ip, #3
   16c14:	str	r1, [sp, #16]
   16c18:	str	lr, [sp, #20]
   16c1c:	str	r8, [sp, #32]
   16c20:	str	r4, [sp, #36]	; 0x24
   16c24:	b	16b74 <flatcc_builder_create_union_vector_direct@@Base+0x8c>
   16c28:	movw	r1, #38312	; 0x95a8
   16c2c:	movt	r1, #1
   16c30:	ldr	r3, [pc, #20]	; 16c4c <flatcc_builder_create_union_vector_direct@@Base+0x164>
   16c34:	movw	r0, #38504	; 0x9668
   16c38:	movt	r0, #1
   16c3c:	movw	r2, #647	; 0x287
   16c40:	bl	12060 <__assert_fail@plt>
   16c44:	bl	12abc <flatcc_builder_default_alloc@@Base+0x19c>
   16c48:	andeq	r8, r1, r0, lsl #30
   16c4c:	andeq	r8, r1, r4, lsl #29

00016c50 <flatcc_builder_start_union_vector@@Base>:
   16c50:	ldrd	r2, [r0, #156]	; 0x9c
   16c54:	strd	r4, [sp, #-16]!
   16c58:	mov	r4, r0
   16c5c:	str	r6, [sp, #8]
   16c60:	str	lr, [sp, #12]
   16c64:	sub	sp, sp, #8
   16c68:	add	r1, r2, #1
   16c6c:	cmp	r1, r3
   16c70:	str	r1, [r0, #156]	; 0x9c
   16c74:	ble	16d90 <flatcc_builder_start_union_vector@@Base+0x140>
   16c78:	ldr	r3, [r0, #176]	; 0xb0
   16c7c:	cmp	r3, #0
   16c80:	cmpgt	r1, r3
   16c84:	movgt	r3, #1
   16c88:	movle	r3, #0
   16c8c:	bgt	16da0 <flatcc_builder_start_union_vector@@Base+0x150>
   16c90:	add	r2, r2, r2, lsl #3
   16c94:	ldr	r1, [r0, #88]	; 0x58
   16c98:	lsl	r5, r2, #2
   16c9c:	add	r2, r5, #36	; 0x24
   16ca0:	cmp	r2, r1
   16ca4:	bls	16cc8 <flatcc_builder_start_union_vector@@Base+0x78>
   16ca8:	mov	ip, #4
   16cac:	add	r1, r0, #84	; 0x54
   16cb0:	ldr	r0, [r0, #40]	; 0x28
   16cb4:	str	ip, [sp]
   16cb8:	ldr	r6, [r4, #48]	; 0x30
   16cbc:	blx	r6
   16cc0:	cmp	r0, #0
   16cc4:	bne	16da8 <flatcc_builder_start_union_vector@@Base+0x158>
   16cc8:	ldr	r3, [r4, #84]	; 0x54
   16ccc:	add	r3, r3, r5
   16cd0:	cmp	r3, #0
   16cd4:	str	r3, [r4, #32]
   16cd8:	beq	16da0 <flatcc_builder_start_union_vector@@Base+0x150>
   16cdc:	ldr	r2, [r4, #88]	; 0x58
   16ce0:	movw	r0, #36409	; 0x8e39
   16ce4:	movt	r0, #14563	; 0x38e3
   16ce8:	ldr	r1, [r4, #176]	; 0xb0
   16cec:	umull	r0, r2, r0, r2
   16cf0:	lsr	r2, r2, #3
   16cf4:	cmp	r1, #0
   16cf8:	cmpgt	r2, r1
   16cfc:	movgt	r2, r1
   16d00:	str	r2, [r4, #160]	; 0xa0
   16d04:	ldr	r2, [r4, #20]
   16d08:	mvn	r5, #3
   16d0c:	mov	lr, #0
   16d10:	ldr	r6, [r4, #28]
   16d14:	ldrh	r0, [r4, #130]	; 0x82
   16d18:	ldr	ip, [r4, #60]	; 0x3c
   16d1c:	ldr	r1, [r4, #64]	; 0x40
   16d20:	str	r2, [r3, #8]
   16d24:	add	r2, r2, r6
   16d28:	add	r2, r2, #7
   16d2c:	strh	r0, [r3, #12]
   16d30:	mov	r0, #4
   16d34:	bic	r2, r2, #7
   16d38:	add	ip, ip, r2
   16d3c:	strh	r0, [r4, #130]	; 0x82
   16d40:	mov	r0, lr
   16d44:	sub	r1, r1, r2
   16d48:	str	r6, [r3]
   16d4c:	mov	r6, #8
   16d50:	cmp	r1, r5
   16d54:	str	lr, [r4, #20]
   16d58:	movhi	r1, r5
   16d5c:	str	r2, [r4, #28]
   16d60:	mov	r2, #7
   16d64:	strh	r2, [r3, #14]
   16d68:	str	r6, [r3, #16]
   16d6c:	str	lr, [r3, #20]
   16d70:	str	ip, [r4, #16]
   16d74:	str	r1, [r4, #24]
   16d78:	str	r5, [r3, #4]
   16d7c:	add	sp, sp, #8
   16d80:	ldrd	r4, [sp]
   16d84:	ldr	r6, [sp, #8]
   16d88:	add	sp, sp, #12
   16d8c:	pop	{pc}		; (ldr pc, [sp], #4)
   16d90:	ldr	r3, [r0, #32]
   16d94:	add	r3, r3, #36	; 0x24
   16d98:	str	r3, [r0, #32]
   16d9c:	b	16d04 <flatcc_builder_start_union_vector@@Base+0xb4>
   16da0:	mvn	r0, #0
   16da4:	b	16d7c <flatcc_builder_start_union_vector@@Base+0x12c>
   16da8:	bl	12a44 <flatcc_builder_default_alloc@@Base+0x124>

00016dac <flatcc_builder_end_union_vector@@Base>:
   16dac:	ldr	r3, [r1, #32]
   16db0:	strd	r4, [sp, #-28]!	; 0xffffffe4
   16db4:	ldrh	r2, [r3, #14]
   16db8:	strd	r6, [sp, #8]
   16dbc:	strd	r8, [sp, #16]
   16dc0:	str	lr, [sp, #24]
   16dc4:	sub	sp, sp, #12
   16dc8:	cmp	r2, #7
   16dcc:	bne	16f88 <flatcc_builder_end_union_vector@@Base+0x1dc>
   16dd0:	ldr	r5, [r3, #20]
   16dd4:	mov	r4, r1
   16dd8:	mov	r6, r0
   16ddc:	ldr	r8, [r1, #20]
   16de0:	ldr	r3, [r1, #24]
   16de4:	lsl	r7, r5, #2
   16de8:	add	r2, r7, r5
   16dec:	add	r2, r2, r8
   16df0:	cmp	r2, r3
   16df4:	str	r2, [r1, #20]
   16df8:	bcs	16f08 <flatcc_builder_end_union_vector@@Base+0x15c>
   16dfc:	ldr	r3, [r1, #16]
   16e00:	adds	r1, r3, r8
   16e04:	beq	16f70 <flatcc_builder_end_union_vector@@Base+0x1c4>
   16e08:	cmp	r5, #0
   16e0c:	add	r7, r1, r7
   16e10:	subne	r0, r7, #1
   16e14:	addne	lr, r3, r5, lsl #3
   16e18:	subne	r2, r1, #4
   16e1c:	beq	16e3c <flatcc_builder_end_union_vector@@Base+0x90>
   16e20:	ldrb	ip, [r3]
   16e24:	add	r3, r3, #8
   16e28:	strb	ip, [r0, #1]!
   16e2c:	ldr	ip, [r3, #-4]
   16e30:	cmp	lr, r3
   16e34:	str	ip, [r2, #4]!
   16e38:	bne	16e20 <flatcc_builder_end_union_vector@@Base+0x74>
   16e3c:	mov	r3, r7
   16e40:	mov	r2, r5
   16e44:	mov	r0, r4
   16e48:	bl	12ca8 <flatcc_builder_default_alloc@@Base+0x388>
   16e4c:	subs	r8, r0, #0
   16e50:	beq	16f80 <flatcc_builder_end_union_vector@@Base+0x1d4>
   16e54:	mvn	ip, #0
   16e58:	mov	r3, #1
   16e5c:	mov	r2, r5
   16e60:	mov	r1, r7
   16e64:	mov	r0, r4
   16e68:	stm	sp, {r3, ip}
   16e6c:	bl	16038 <flatcc_builder_create_vector@@Base>
   16e70:	mov	r5, r0
   16e74:	mov	r1, #0
   16e78:	ldr	r0, [r4, #16]
   16e7c:	ldr	r2, [r4, #20]
   16e80:	bl	12030 <memset@plt>
   16e84:	ldr	r3, [r4, #32]
   16e88:	stm	r6, {r5, r8}
   16e8c:	ldr	r0, [r4, #60]	; 0x3c
   16e90:	ldr	r2, [r4, #64]	; 0x40
   16e94:	ldr	ip, [r3]
   16e98:	ldmib	r3, {r1, lr}
   16e9c:	add	r0, r0, ip
   16ea0:	sub	r2, r2, ip
   16ea4:	str	r0, [r4, #16]
   16ea8:	cmp	r2, r1
   16eac:	ldrh	r0, [r4, #128]	; 0x80
   16eb0:	movcs	r2, r1
   16eb4:	str	lr, [r4, #20]
   16eb8:	str	ip, [r4, #28]
   16ebc:	ldrh	ip, [r4, #130]	; 0x82
   16ec0:	str	r2, [r4, #24]
   16ec4:	ldr	r2, [r4, #156]	; 0x9c
   16ec8:	str	r1, [r3, #4]
   16ecc:	cmp	r0, ip
   16ed0:	sub	r0, r3, #36	; 0x24
   16ed4:	strhcc	ip, [r4, #128]	; 0x80
   16ed8:	ldrh	r1, [r3, #12]
   16edc:	sub	r3, r2, #1
   16ee0:	str	r0, [r4, #32]
   16ee4:	strh	r1, [r4, #130]	; 0x82
   16ee8:	str	r3, [r4, #156]	; 0x9c
   16eec:	mov	r0, r6
   16ef0:	add	sp, sp, #12
   16ef4:	ldrd	r4, [sp]
   16ef8:	ldrd	r6, [sp, #8]
   16efc:	ldrd	r8, [sp, #16]
   16f00:	add	sp, sp, #24
   16f04:	pop	{pc}		; (ldr pc, [sp], #4)
   16f08:	ldr	ip, [r4, #28]
   16f0c:	mov	r0, #1
   16f10:	add	r1, r1, #60	; 0x3c
   16f14:	mov	r3, r0
   16f18:	str	r0, [sp]
   16f1c:	ldr	r9, [r4, #48]	; 0x30
   16f20:	add	ip, ip, r0
   16f24:	ldr	r0, [r4, #40]	; 0x28
   16f28:	add	r2, ip, r2
   16f2c:	blx	r9
   16f30:	cmp	r0, #0
   16f34:	bne	16f70 <flatcc_builder_end_union_vector@@Base+0x1c4>
   16f38:	ldr	r1, [r4, #28]
   16f3c:	ldr	r3, [r4, #60]	; 0x3c
   16f40:	ldr	r2, [r4, #64]	; 0x40
   16f44:	add	r3, r3, r1
   16f48:	sub	r2, r2, r1
   16f4c:	mvn	r1, #3
   16f50:	str	r3, [r4, #16]
   16f54:	cmn	r2, #4
   16f58:	mvnhi	r2, #3
   16f5c:	str	r2, [r4, #24]
   16f60:	ldr	r2, [r4, #32]
   16f64:	str	r1, [r2, #4]
   16f68:	adds	r1, r3, r8
   16f6c:	bne	16e08 <flatcc_builder_end_union_vector@@Base+0x5c>
   16f70:	mov	r3, #0
   16f74:	str	r3, [r6]
   16f78:	str	r3, [r6, #4]
   16f7c:	b	16eec <flatcc_builder_end_union_vector@@Base+0x140>
   16f80:	mov	r5, r8
   16f84:	b	16e74 <flatcc_builder_end_union_vector@@Base+0xc8>
   16f88:	movw	r1, #38312	; 0x95a8
   16f8c:	movt	r1, #1
   16f90:	ldr	r3, [pc, #12]	; 16fa4 <flatcc_builder_end_union_vector@@Base+0x1f8>
   16f94:	movw	r0, #39092	; 0x98b4
   16f98:	movt	r0, #1
   16f9c:	movw	r2, #1617	; 0x651
   16fa0:	bl	12060 <__assert_fail@plt>
   16fa4:	andeq	r9, r1, ip, lsr r4

00016fa8 <flatcc_builder_union_vector_edit@@Base>:
   16fa8:	ldr	r0, [r0, #16]
   16fac:	bx	lr

00016fb0 <flatcc_builder_union_vector_count@@Base>:
   16fb0:	ldr	r3, [r0, #32]
   16fb4:	ldr	r0, [r3, #20]
   16fb8:	bx	lr

00016fbc <flatcc_builder_extend_union_vector@@Base>:
   16fbc:	ldr	ip, [r0, #32]
   16fc0:	strd	r4, [sp, #-20]!	; 0xffffffec
   16fc4:	mov	r4, r0
   16fc8:	ldr	r3, [ip, #20]
   16fcc:	strd	r6, [sp, #8]
   16fd0:	str	lr, [sp, #16]
   16fd4:	sub	sp, sp, #12
   16fd8:	adds	r3, r1, r3
   16fdc:	movcs	r2, #1
   16fe0:	movcc	r2, #0
   16fe4:	cmn	r3, #-536870911	; 0xe0000001
   16fe8:	movls	r0, #0
   16fec:	movhi	r0, #1
   16ff0:	orrs	r5, r2, r0
   16ff4:	bne	1709c <flatcc_builder_extend_union_vector@@Base+0xe0>
   16ff8:	ldr	r6, [r4, #20]
   16ffc:	str	r3, [ip, #20]
   17000:	ldr	r3, [r4, #24]
   17004:	add	r2, r6, r1, lsl #3
   17008:	cmp	r2, r3
   1700c:	str	r2, [r4, #20]
   17010:	bcs	17030 <flatcc_builder_extend_union_vector@@Base+0x74>
   17014:	ldr	r0, [r4, #16]
   17018:	add	r0, r0, r6
   1701c:	add	sp, sp, #12
   17020:	ldrd	r4, [sp]
   17024:	ldrd	r6, [sp, #8]
   17028:	add	sp, sp, #16
   1702c:	pop	{pc}		; (ldr pc, [sp], #4)
   17030:	ldr	ip, [r4, #28]
   17034:	mov	r0, #1
   17038:	add	r1, r4, #60	; 0x3c
   1703c:	mov	r3, r0
   17040:	str	r0, [sp]
   17044:	ldr	r7, [r4, #48]	; 0x30
   17048:	add	ip, ip, r0
   1704c:	ldr	r0, [r4, #40]	; 0x28
   17050:	add	r2, ip, r2
   17054:	blx	r7
   17058:	cmp	r0, #0
   1705c:	bne	17094 <flatcc_builder_extend_union_vector@@Base+0xd8>
   17060:	ldr	r2, [r4, #28]
   17064:	ldr	r0, [r4, #60]	; 0x3c
   17068:	ldr	r3, [r4, #64]	; 0x40
   1706c:	add	r0, r0, r2
   17070:	sub	r3, r3, r2
   17074:	mvn	r2, #3
   17078:	str	r0, [r4, #16]
   1707c:	cmn	r3, #4
   17080:	mvnhi	r3, #3
   17084:	str	r3, [r4, #24]
   17088:	ldr	r3, [r4, #32]
   1708c:	str	r2, [r3, #4]
   17090:	b	17018 <flatcc_builder_extend_union_vector@@Base+0x5c>
   17094:	mov	r0, r5
   17098:	b	1701c <flatcc_builder_extend_union_vector@@Base+0x60>
   1709c:	bl	12ae4 <flatcc_builder_default_alloc@@Base+0x1c4>

000170a0 <flatcc_builder_truncate_union_vector@@Base>:
   170a0:	mov	r3, r0
   170a4:	ldr	r0, [r0, #32]
   170a8:	str	r4, [sp, #-8]!
   170ac:	ldrh	r2, [r0, #14]
   170b0:	str	lr, [sp, #4]
   170b4:	cmp	r2, #7
   170b8:	bne	17108 <flatcc_builder_truncate_union_vector@@Base+0x68>
   170bc:	mov	lr, r1
   170c0:	ldr	r1, [r0, #20]
   170c4:	cmp	r1, lr
   170c8:	bcc	17124 <flatcc_builder_truncate_union_vector@@Base+0x84>
   170cc:	ldr	r2, [r0, #16]
   170d0:	sub	ip, r1, lr
   170d4:	mov	r1, #0
   170d8:	str	ip, [r0, #20]
   170dc:	ldr	r0, [r3, #16]
   170e0:	ldr	ip, [r3, #20]
   170e4:	mul	r2, r2, lr
   170e8:	sub	ip, ip, r2
   170ec:	add	r0, r0, ip
   170f0:	str	ip, [r3, #20]
   170f4:	bl	12030 <memset@plt>
   170f8:	ldr	r4, [sp]
   170fc:	add	sp, sp, #4
   17100:	mov	r0, #0
   17104:	pop	{pc}		; (ldr pc, [sp], #4)
   17108:	movw	r1, #38312	; 0x95a8
   1710c:	movt	r1, #1
   17110:	ldr	r3, [pc, #40]	; 17140 <flatcc_builder_truncate_union_vector@@Base+0xa0>
   17114:	movw	r0, #39092	; 0x98b4
   17118:	movt	r0, #1
   1711c:	movw	r2, #1665	; 0x681
   17120:	bl	12060 <__assert_fail@plt>
   17124:	movw	r1, #38312	; 0x95a8
   17128:	movt	r1, #1
   1712c:	ldr	r3, [pc, #12]	; 17140 <flatcc_builder_truncate_union_vector@@Base+0xa0>
   17130:	movw	r0, #38872	; 0x97d8
   17134:	movt	r0, #1
   17138:	movw	r2, #1666	; 0x682
   1713c:	bl	12060 <__assert_fail@plt>
   17140:	andeq	r9, r1, ip, asr r4

00017144 <flatcc_builder_union_vector_push@@Base>:
   17144:	strd	r4, [sp, #-20]!	; 0xffffffec
   17148:	strd	r6, [sp, #8]
   1714c:	str	lr, [sp, #16]
   17150:	sub	sp, sp, #20
   17154:	add	r3, sp, #16
   17158:	stmdb	r3, {r1, r2}
   1715c:	ldr	r2, [r0, #32]
   17160:	ldrh	r3, [r2, #14]
   17164:	cmp	r3, #7
   17168:	bne	1722c <flatcc_builder_union_vector_push@@Base+0xe8>
   1716c:	ldr	r3, [r2, #20]
   17170:	cmn	r3, #-536870911	; 0xe0000001
   17174:	beq	17224 <flatcc_builder_union_vector_push@@Base+0xe0>
   17178:	ldr	r5, [r0, #20]
   1717c:	add	r3, r3, #1
   17180:	mov	r4, r0
   17184:	ldr	r1, [r0, #24]
   17188:	str	r3, [r2, #20]
   1718c:	add	r3, r5, #8
   17190:	cmp	r3, r1
   17194:	str	r3, [r0, #20]
   17198:	bcs	171c0 <flatcc_builder_union_vector_push@@Base+0x7c>
   1719c:	ldr	r3, [r0, #16]
   171a0:	adds	r0, r3, r5
   171a4:	ldrdne	r6, [sp, #8]
   171a8:	strdne	r6, [r3, r5]
   171ac:	add	sp, sp, #20
   171b0:	ldrd	r4, [sp]
   171b4:	ldrd	r6, [sp, #8]
   171b8:	add	sp, sp, #16
   171bc:	pop	{pc}		; (ldr pc, [sp], #4)
   171c0:	ldr	r2, [r4, #28]
   171c4:	mov	r0, #1
   171c8:	add	r1, r4, #60	; 0x3c
   171cc:	mov	r3, r0
   171d0:	str	r0, [sp]
   171d4:	ldr	r0, [r4, #40]	; 0x28
   171d8:	add	r2, r5, r2
   171dc:	ldr	r6, [r4, #48]	; 0x30
   171e0:	add	r2, r2, #9
   171e4:	blx	r6
   171e8:	cmp	r0, #0
   171ec:	bne	17224 <flatcc_builder_union_vector_push@@Base+0xe0>
   171f0:	ldr	r1, [r4, #28]
   171f4:	ldr	r3, [r4, #60]	; 0x3c
   171f8:	ldr	r2, [r4, #64]	; 0x40
   171fc:	add	r3, r3, r1
   17200:	sub	r2, r2, r1
   17204:	mvn	r1, #3
   17208:	str	r3, [r4, #16]
   1720c:	cmn	r2, #4
   17210:	mvnhi	r2, #3
   17214:	str	r2, [r4, #24]
   17218:	ldr	r2, [r4, #32]
   1721c:	str	r1, [r2, #4]
   17220:	b	171a0 <flatcc_builder_union_vector_push@@Base+0x5c>
   17224:	mov	r0, #0
   17228:	b	171ac <flatcc_builder_union_vector_push@@Base+0x68>
   1722c:	movw	r1, #38312	; 0x95a8
   17230:	movt	r1, #1
   17234:	ldr	r3, [pc, #12]	; 17248 <flatcc_builder_union_vector_push@@Base+0x104>
   17238:	movw	r0, #39092	; 0x98b4
   1723c:	movt	r0, #1
   17240:	movw	r2, #1677	; 0x68d
   17244:	bl	12060 <__assert_fail@plt>
   17248:	andeq	r9, r1, r4, lsl #9

0001724c <flatcc_builder_append_union_vector@@Base>:
   1724c:	strd	r4, [sp, #-28]!	; 0xffffffe4
   17250:	mov	r5, r0
   17254:	ldr	r0, [r0, #32]
   17258:	ldrh	r3, [r0, #14]
   1725c:	strd	r6, [sp, #8]
   17260:	strd	r8, [sp, #16]
   17264:	str	lr, [sp, #24]
   17268:	sub	sp, sp, #12
   1726c:	cmp	r3, #7
   17270:	bne	17368 <flatcc_builder_append_union_vector@@Base+0x11c>
   17274:	ldr	r3, [r0, #20]
   17278:	mov	r7, r1
   1727c:	adds	r1, r2, r3
   17280:	movcs	r4, #1
   17284:	movcc	r4, #0
   17288:	cmn	r1, #-536870911	; 0xe0000001
   1728c:	movls	r3, #0
   17290:	movhi	r3, #1
   17294:	orrs	r4, r4, r3
   17298:	bne	17364 <flatcc_builder_append_union_vector@@Base+0x118>
   1729c:	ldr	r8, [r5, #20]
   172a0:	lsl	r6, r2, #3
   172a4:	ldr	r3, [r5, #24]
   172a8:	str	r1, [r0, #20]
   172ac:	add	ip, r6, r8
   172b0:	cmp	ip, r3
   172b4:	str	ip, [r5, #20]
   172b8:	bcs	172f8 <flatcc_builder_append_union_vector@@Base+0xac>
   172bc:	ldr	r3, [r5, #16]
   172c0:	adds	r3, r3, r8
   172c4:	beq	172dc <flatcc_builder_append_union_vector@@Base+0x90>
   172c8:	mov	r0, r3
   172cc:	mov	r2, r6
   172d0:	mov	r1, r7
   172d4:	bl	11fac <memcpy@plt>
   172d8:	mov	r3, r0
   172dc:	mov	r0, r3
   172e0:	add	sp, sp, #12
   172e4:	ldrd	r4, [sp]
   172e8:	ldrd	r6, [sp, #8]
   172ec:	ldrd	r8, [sp, #16]
   172f0:	add	sp, sp, #24
   172f4:	pop	{pc}		; (ldr pc, [sp], #4)
   172f8:	ldr	r2, [r5, #28]
   172fc:	mov	r0, #1
   17300:	add	r1, r5, #60	; 0x3c
   17304:	mov	r3, r0
   17308:	str	r0, [sp]
   1730c:	ldr	r9, [r5, #48]	; 0x30
   17310:	add	r2, r2, r0
   17314:	ldr	r0, [r5, #40]	; 0x28
   17318:	add	r2, r2, ip
   1731c:	blx	r9
   17320:	cmp	r0, #0
   17324:	bne	1735c <flatcc_builder_append_union_vector@@Base+0x110>
   17328:	ldr	r1, [r5, #28]
   1732c:	ldr	r3, [r5, #60]	; 0x3c
   17330:	ldr	r2, [r5, #64]	; 0x40
   17334:	add	r3, r3, r1
   17338:	sub	r2, r2, r1
   1733c:	mvn	r1, #3
   17340:	str	r3, [r5, #16]
   17344:	cmn	r2, #4
   17348:	mvnhi	r2, #3
   1734c:	str	r2, [r5, #24]
   17350:	ldr	r2, [r5, #32]
   17354:	str	r1, [r2, #4]
   17358:	b	172c0 <flatcc_builder_append_union_vector@@Base+0x74>
   1735c:	mov	r3, r4
   17360:	b	172dc <flatcc_builder_append_union_vector@@Base+0x90>
   17364:	bl	12ae4 <flatcc_builder_default_alloc@@Base+0x1c4>
   17368:	movw	r1, #38312	; 0x95a8
   1736c:	movt	r1, #1
   17370:	ldr	r3, [pc, #12]	; 17384 <flatcc_builder_append_union_vector@@Base+0x138>
   17374:	movw	r0, #39092	; 0x98b4
   17378:	movt	r0, #1
   1737c:	movw	r2, #1692	; 0x69c
   17380:	bl	12060 <__assert_fail@plt>
   17384:	andeq	r9, r1, r8, lsr #9

00017388 <flatcc_builder_create_string@@Base>:
   17388:	strd	r4, [sp, #-16]!
   1738c:	mov	r4, r0
   17390:	mov	ip, #4
   17394:	str	r6, [sp, #8]
   17398:	cmp	r2, #0
   1739c:	str	lr, [sp, #12]
   173a0:	sub	sp, sp, #88	; 0x58
   173a4:	moveq	r6, #2
   173a8:	ldr	lr, [r0, #136]	; 0x88
   173ac:	add	r3, sp, #12
   173b0:	str	r2, [sp, #12]
   173b4:	str	r3, [sp, #24]
   173b8:	mov	r3, #1
   173bc:	moveq	r1, r3
   173c0:	str	ip, [sp, #28]
   173c4:	sub	r0, lr, r2
   173c8:	sub	r0, r0, #1
   173cc:	and	r0, r0, #3
   173d0:	add	r0, r0, r3
   173d4:	beq	173ec <flatcc_builder_create_string@@Base+0x64>
   173d8:	add	ip, r2, ip
   173dc:	mov	r6, #3
   173e0:	str	r1, [sp, #32]
   173e4:	mov	r1, #2
   173e8:	str	r2, [sp, #36]	; 0x24
   173ec:	ldr	r3, [pc, #136]	; 1747c <flatcc_builder_create_string@@Base+0xf4>
   173f0:	add	r1, r1, #1
   173f4:	add	r2, sp, #88	; 0x58
   173f8:	add	ip, r0, ip
   173fc:	add	r1, r2, r1, lsl #3
   17400:	sub	r5, lr, ip
   17404:	cmp	lr, r5
   17408:	str	ip, [sp, #16]
   1740c:	str	r6, [sp, #20]
   17410:	str	r3, [r1, #-72]	; 0xffffffb8
   17414:	str	r0, [r1, #-68]	; 0xffffffbc
   17418:	ble	1745c <flatcc_builder_create_string@@Base+0xd4>
   1741c:	mov	r2, r6
   17420:	mov	r3, r5
   17424:	str	ip, [sp]
   17428:	add	r1, sp, #24
   1742c:	ldr	r0, [r4, #36]	; 0x24
   17430:	ldr	r6, [r4, #44]	; 0x2c
   17434:	blx	r6
   17438:	cmp	r0, #0
   1743c:	bne	17478 <flatcc_builder_create_string@@Base+0xf0>
   17440:	mov	r0, r5
   17444:	str	r5, [r4, #136]	; 0x88
   17448:	add	sp, sp, #88	; 0x58
   1744c:	ldrd	r4, [sp]
   17450:	ldr	r6, [sp, #8]
   17454:	add	sp, sp, #12
   17458:	pop	{pc}		; (ldr pc, [sp], #4)
   1745c:	movw	r1, #38312	; 0x95a8
   17460:	movt	r1, #1
   17464:	movw	r0, #38504	; 0x9668
   17468:	movt	r0, #1
   1746c:	sub	r3, r3, #124	; 0x7c
   17470:	movw	r2, #647	; 0x287
   17474:	bl	12060 <__assert_fail@plt>
   17478:	bl	12abc <flatcc_builder_default_alloc@@Base+0x19c>
   1747c:	andeq	r8, r1, r0, lsl #30

00017480 <flatcc_builder_create_string_str@@Base>:
   17480:	strd	r4, [sp, #-16]!
   17484:	mov	r4, r0
   17488:	mov	r0, r1
   1748c:	str	r6, [sp, #8]
   17490:	mov	r6, r1
   17494:	str	lr, [sp, #12]
   17498:	sub	sp, sp, #88	; 0x58
   1749c:	bl	1200c <strlen@plt>
   174a0:	ldr	r5, [r4, #136]	; 0x88
   174a4:	mov	r2, #4
   174a8:	add	r1, sp, #12
   174ac:	mov	r3, #1
   174b0:	cmp	r0, #0
   174b4:	str	r0, [sp, #12]
   174b8:	str	r1, [sp, #24]
   174bc:	str	r2, [sp, #28]
   174c0:	sub	ip, r5, #1
   174c4:	sub	ip, ip, r0
   174c8:	and	ip, ip, #3
   174cc:	add	ip, ip, r3
   174d0:	beq	17554 <flatcc_builder_create_string_str@@Base+0xd4>
   174d4:	add	lr, r0, r2
   174d8:	mov	r1, #2
   174dc:	str	r6, [sp, #32]
   174e0:	mov	r2, #3
   174e4:	str	r0, [sp, #36]	; 0x24
   174e8:	ldr	r3, [pc, #148]	; 17584 <flatcc_builder_create_string_str@@Base+0x104>
   174ec:	add	r0, ip, lr
   174f0:	add	r1, r1, #1
   174f4:	add	lr, sp, #88	; 0x58
   174f8:	sub	r6, r5, r0
   174fc:	add	r1, lr, r1, lsl #3
   17500:	cmp	r5, r6
   17504:	str	r0, [sp, #16]
   17508:	str	r2, [sp, #20]
   1750c:	str	r3, [r1, #-72]	; 0xffffffb8
   17510:	str	ip, [r1, #-68]	; 0xffffffbc
   17514:	ble	17564 <flatcc_builder_create_string_str@@Base+0xe4>
   17518:	mov	r3, r6
   1751c:	add	r1, sp, #24
   17520:	str	r0, [sp]
   17524:	ldr	r0, [r4, #36]	; 0x24
   17528:	ldr	r5, [r4, #44]	; 0x2c
   1752c:	blx	r5
   17530:	cmp	r0, #0
   17534:	bne	17580 <flatcc_builder_create_string_str@@Base+0x100>
   17538:	mov	r0, r6
   1753c:	str	r6, [r4, #136]	; 0x88
   17540:	add	sp, sp, #88	; 0x58
   17544:	ldrd	r4, [sp]
   17548:	ldr	r6, [sp, #8]
   1754c:	add	sp, sp, #12
   17550:	pop	{pc}		; (ldr pc, [sp], #4)
   17554:	mov	lr, r2
   17558:	mov	r1, r3
   1755c:	mov	r2, #2
   17560:	b	174e8 <flatcc_builder_create_string_str@@Base+0x68>
   17564:	movw	r1, #38312	; 0x95a8
   17568:	movt	r1, #1
   1756c:	movw	r0, #38504	; 0x9668
   17570:	movt	r0, #1
   17574:	sub	r3, r3, #124	; 0x7c
   17578:	movw	r2, #647	; 0x287
   1757c:	bl	12060 <__assert_fail@plt>
   17580:	bl	12abc <flatcc_builder_default_alloc@@Base+0x19c>
   17584:	andeq	r8, r1, r0, lsl #30

00017588 <flatcc_builder_create_string_strn@@Base>:
   17588:	strd	r4, [sp, #-16]!
   1758c:	mov	r4, r0
   17590:	mov	r5, r2
   17594:	str	r6, [sp, #8]
   17598:	mov	r6, r1
   1759c:	mov	r1, #0
   175a0:	mov	r0, r6
   175a4:	str	lr, [sp, #12]
   175a8:	sub	sp, sp, #88	; 0x58
   175ac:	bl	1203c <memchr@plt>
   175b0:	ldr	lr, [r4, #136]	; 0x88
   175b4:	cmp	r0, #0
   175b8:	mov	ip, #4
   175bc:	subne	r5, r0, r6
   175c0:	add	r3, sp, #12
   175c4:	cmp	r5, #0
   175c8:	mov	r0, #1
   175cc:	moveq	r2, #2
   175d0:	str	r5, [sp, #12]
   175d4:	str	r3, [sp, #24]
   175d8:	sub	r1, lr, #1
   175dc:	str	ip, [sp, #28]
   175e0:	sub	r1, r1, r5
   175e4:	and	r1, r1, #3
   175e8:	add	r1, r1, r0
   175ec:	beq	17604 <flatcc_builder_create_string_strn@@Base+0x7c>
   175f0:	add	ip, r5, ip
   175f4:	mov	r2, #3
   175f8:	str	r6, [sp, #32]
   175fc:	mov	r0, #2
   17600:	str	r5, [sp, #36]	; 0x24
   17604:	ldr	r3, [pc, #132]	; 17690 <flatcc_builder_create_string_strn@@Base+0x108>
   17608:	add	r5, sp, #88	; 0x58
   1760c:	add	r0, r0, #1
   17610:	add	r0, r5, r0, lsl #3
   17614:	add	ip, r1, ip
   17618:	sub	r5, lr, ip
   1761c:	cmp	lr, r5
   17620:	str	ip, [sp, #16]
   17624:	str	r2, [sp, #20]
   17628:	str	r3, [r0, #-72]	; 0xffffffb8
   1762c:	str	r1, [r0, #-68]	; 0xffffffbc
   17630:	ble	17670 <flatcc_builder_create_string_strn@@Base+0xe8>
   17634:	mov	r3, r5
   17638:	add	r1, sp, #24
   1763c:	str	ip, [sp]
   17640:	ldr	r0, [r4, #36]	; 0x24
   17644:	ldr	r6, [r4, #44]	; 0x2c
   17648:	blx	r6
   1764c:	cmp	r0, #0
   17650:	bne	1768c <flatcc_builder_create_string_strn@@Base+0x104>
   17654:	mov	r0, r5
   17658:	str	r5, [r4, #136]	; 0x88
   1765c:	add	sp, sp, #88	; 0x58
   17660:	ldrd	r4, [sp]
   17664:	ldr	r6, [sp, #8]
   17668:	add	sp, sp, #12
   1766c:	pop	{pc}		; (ldr pc, [sp], #4)
   17670:	movw	r1, #38312	; 0x95a8
   17674:	movt	r1, #1
   17678:	movw	r0, #38504	; 0x9668
   1767c:	movt	r0, #1
   17680:	sub	r3, r3, #124	; 0x7c
   17684:	movw	r2, #647	; 0x287
   17688:	bl	12060 <__assert_fail@plt>
   1768c:	bl	12abc <flatcc_builder_default_alloc@@Base+0x19c>
   17690:	andeq	r8, r1, r0, lsl #30

00017694 <flatcc_builder_end_string@@Base>:
   17694:	ldr	r3, [r0, #32]
   17698:	strd	r4, [sp, #-16]!
   1769c:	ldrh	r2, [r3, #14]
   176a0:	str	r6, [sp, #8]
   176a4:	str	lr, [sp, #12]
   176a8:	sub	sp, sp, #88	; 0x58
   176ac:	cmp	r2, #6
   176b0:	bne	17838 <flatcc_builder_end_string@@Base+0x1a4>
   176b4:	ldr	r3, [r3, #20]
   176b8:	mov	r4, r0
   176bc:	ldr	r2, [r0, #20]
   176c0:	cmp	r3, r2
   176c4:	bne	1781c <flatcc_builder_end_string@@Base+0x188>
   176c8:	ldr	lr, [r4, #136]	; 0x88
   176cc:	add	r2, sp, #12
   176d0:	mov	ip, #4
   176d4:	cmp	r3, #0
   176d8:	mov	r0, #1
   176dc:	str	r3, [sp, #12]
   176e0:	str	r2, [sp, #24]
   176e4:	str	ip, [sp, #28]
   176e8:	ldr	r2, [r4, #16]
   176ec:	moveq	r2, #2
   176f0:	sub	r1, lr, r3
   176f4:	sub	r1, r1, #1
   176f8:	and	r1, r1, #3
   176fc:	add	r1, r1, r0
   17700:	bne	177e8 <flatcc_builder_end_string@@Base+0x154>
   17704:	ldr	r3, [pc, #328]	; 17854 <flatcc_builder_end_string@@Base+0x1c0>
   17708:	add	r5, sp, #88	; 0x58
   1770c:	add	r0, r0, #1
   17710:	add	r0, r5, r0, lsl #3
   17714:	add	ip, r1, ip
   17718:	sub	r5, lr, ip
   1771c:	cmp	lr, r5
   17720:	str	ip, [sp, #16]
   17724:	str	r2, [sp, #20]
   17728:	str	r3, [r0, #-72]	; 0xffffffb8
   1772c:	str	r1, [r0, #-68]	; 0xffffffbc
   17730:	ble	17800 <flatcc_builder_end_string@@Base+0x16c>
   17734:	add	r1, sp, #24
   17738:	mov	r3, r5
   1773c:	str	ip, [sp]
   17740:	ldr	r0, [r4, #36]	; 0x24
   17744:	ldr	r6, [r4, #44]	; 0x2c
   17748:	blx	r6
   1774c:	subs	r1, r0, #0
   17750:	bne	177fc <flatcc_builder_end_string@@Base+0x168>
   17754:	cmp	r5, #0
   17758:	str	r5, [r4, #136]	; 0x88
   1775c:	beq	177d0 <flatcc_builder_end_string@@Base+0x13c>
   17760:	ldr	r0, [r4, #16]
   17764:	ldr	r2, [r4, #20]
   17768:	bl	12030 <memset@plt>
   1776c:	ldr	r3, [r4, #32]
   17770:	ldr	r0, [r4, #60]	; 0x3c
   17774:	ldr	r2, [r4, #64]	; 0x40
   17778:	ldr	ip, [r3]
   1777c:	ldmib	r3, {r1, lr}
   17780:	add	r0, r0, ip
   17784:	sub	r2, r2, ip
   17788:	str	r0, [r4, #16]
   1778c:	cmp	r2, r1
   17790:	ldrh	r0, [r4, #128]	; 0x80
   17794:	movcs	r2, r1
   17798:	str	lr, [r4, #20]
   1779c:	str	ip, [r4, #28]
   177a0:	ldrh	ip, [r4, #130]	; 0x82
   177a4:	str	r2, [r4, #24]
   177a8:	ldr	r2, [r4, #156]	; 0x9c
   177ac:	str	r1, [r3, #4]
   177b0:	cmp	r0, ip
   177b4:	sub	r0, r3, #36	; 0x24
   177b8:	strhcc	ip, [r4, #128]	; 0x80
   177bc:	ldrh	r1, [r3, #12]
   177c0:	sub	r3, r2, #1
   177c4:	str	r0, [r4, #32]
   177c8:	strh	r1, [r4, #130]	; 0x82
   177cc:	str	r3, [r4, #156]	; 0x9c
   177d0:	mov	r0, r5
   177d4:	add	sp, sp, #88	; 0x58
   177d8:	ldrd	r4, [sp]
   177dc:	ldr	r6, [sp, #8]
   177e0:	add	sp, sp, #12
   177e4:	pop	{pc}		; (ldr pc, [sp], #4)
   177e8:	add	ip, r3, ip
   177ec:	mov	r0, #2
   177f0:	strd	r2, [sp, #32]
   177f4:	mov	r2, #3
   177f8:	b	17704 <flatcc_builder_end_string@@Base+0x70>
   177fc:	bl	12abc <flatcc_builder_default_alloc@@Base+0x19c>
   17800:	movw	r1, #38312	; 0x95a8
   17804:	movt	r1, #1
   17808:	movw	r0, #38504	; 0x9668
   1780c:	movt	r0, #1
   17810:	sub	r3, r3, #124	; 0x7c
   17814:	movw	r2, #647	; 0x287
   17818:	bl	12060 <__assert_fail@plt>
   1781c:	movw	r1, #38312	; 0x95a8
   17820:	movt	r1, #1
   17824:	ldr	r3, [pc, #44]	; 17858 <flatcc_builder_end_string@@Base+0x1c4>
   17828:	movw	r0, #39144	; 0x98e8
   1782c:	movt	r0, #1
   17830:	movw	r2, #1733	; 0x6c5
   17834:	bl	12060 <__assert_fail@plt>
   17838:	movw	r1, #38312	; 0x95a8
   1783c:	movt	r1, #1
   17840:	ldr	r3, [pc, #16]	; 17858 <flatcc_builder_end_string@@Base+0x1c4>
   17844:	movw	r0, #38440	; 0x9628
   17848:	movt	r0, #1
   1784c:	movw	r2, #1732	; 0x6c4
   17850:	bl	12060 <__assert_fail@plt>
   17854:	andeq	r8, r1, r0, lsl #30
   17858:	andeq	r9, r1, ip, asr #9

0001785c <flatcc_builder_string_edit@@Base>:
   1785c:	ldr	r0, [r0, #16]
   17860:	bx	lr

00017864 <flatcc_builder_string_len@@Base>:
   17864:	ldr	r3, [r0, #32]
   17868:	ldr	r0, [r3, #20]
   1786c:	bx	lr

00017870 <flatcc_builder_table_add@@Base>:
   17870:	strd	r4, [sp, #-28]!	; 0xffffffe4
   17874:	mov	r4, r0
   17878:	ldr	r0, [r0, #32]
   1787c:	ldrh	r0, [r0, #14]
   17880:	strd	r6, [sp, #8]
   17884:	strd	r8, [sp, #16]
   17888:	str	lr, [sp, #24]
   1788c:	sub	sp, sp, #12
   17890:	cmp	r0, #3
   17894:	bne	179f8 <flatcc_builder_table_add@@Base+0x188>
   17898:	movw	r0, #32764	; 0x7ffc
   1789c:	cmp	r1, r0
   178a0:	bhi	179dc <flatcc_builder_table_add@@Base+0x16c>
   178a4:	ldrh	r0, [r4, #130]	; 0x82
   178a8:	lsl	r7, r1, #1
   178ac:	ldr	ip, [r4, #4]
   178b0:	cmp	r0, r3
   178b4:	strhcc	r3, [r4, #130]	; 0x82
   178b8:	ldrh	r5, [ip, r7]
   178bc:	add	ip, ip, r7
   178c0:	cmp	r5, #0
   178c4:	bne	179c0 <flatcc_builder_table_add@@Base+0x150>
   178c8:	ldr	r9, [r4, #12]
   178cc:	movw	lr, #31153	; 0x79b1
   178d0:	movt	lr, #40503	; 0x9e37
   178d4:	uxth	r6, r1
   178d8:	sub	r8, r3, #1
   178dc:	ldr	r0, [r4, #20]
   178e0:	rsb	r3, r3, #0
   178e4:	eor	r1, r1, r9
   178e8:	mul	r1, lr, r1
   178ec:	add	r8, r8, r0
   178f0:	ldr	r0, [r4, #24]
   178f4:	and	r8, r8, r3
   178f8:	eor	r1, r1, r2
   178fc:	add	r2, r2, r8
   17900:	mul	r1, lr, r1
   17904:	cmp	r2, r0
   17908:	str	r1, [r4, #12]
   1790c:	str	r2, [r4, #20]
   17910:	bcs	1794c <flatcc_builder_table_add@@Base+0xdc>
   17914:	ldr	r0, [r4, #16]
   17918:	add	r3, r8, #4
   1791c:	add	r0, r0, r8
   17920:	strh	r3, [ip]
   17924:	ldrh	r3, [r4, #8]
   17928:	cmp	r3, r6
   1792c:	addls	r6, r6, #1
   17930:	strhls	r6, [r4, #8]
   17934:	add	sp, sp, #12
   17938:	ldrd	r4, [sp]
   1793c:	ldrd	r6, [sp, #8]
   17940:	ldrd	r8, [sp, #16]
   17944:	add	sp, sp, #24
   17948:	pop	{pc}		; (ldr pc, [sp], #4)
   1794c:	ldr	ip, [r4, #28]
   17950:	mov	r0, #1
   17954:	add	r1, r4, #60	; 0x3c
   17958:	mov	r3, r0
   1795c:	str	r0, [sp]
   17960:	ldr	r9, [r4, #48]	; 0x30
   17964:	add	ip, ip, r0
   17968:	ldr	r0, [r4, #40]	; 0x28
   1796c:	add	r2, ip, r2
   17970:	blx	r9
   17974:	cmp	r0, #0
   17978:	bne	179b8 <flatcc_builder_table_add@@Base+0x148>
   1797c:	ldr	ip, [r4, #4]
   17980:	movw	r2, #65532	; 0xfffc
   17984:	ldr	r5, [r4, #28]
   17988:	ldr	r3, [r4, #64]	; 0x40
   1798c:	add	ip, ip, r7
   17990:	ldr	r0, [r4, #60]	; 0x3c
   17994:	ldr	r1, [r4, #32]
   17998:	sub	r3, r3, r5
   1799c:	cmp	r3, r2
   179a0:	add	r0, r0, r5
   179a4:	movcs	r3, r2
   179a8:	str	r0, [r4, #16]
   179ac:	str	r3, [r4, #24]
   179b0:	str	r2, [r1, #4]
   179b4:	b	17918 <flatcc_builder_table_add@@Base+0xa8>
   179b8:	mov	r0, r5
   179bc:	b	17934 <flatcc_builder_table_add@@Base+0xc4>
   179c0:	movw	r1, #38312	; 0x95a8
   179c4:	movt	r1, #1
   179c8:	ldr	r3, [pc, #68]	; 17a14 <flatcc_builder_table_add@@Base+0x1a4>
   179cc:	movw	r0, #38504	; 0x9668
   179d0:	movt	r0, #1
   179d4:	movw	r2, #1784	; 0x6f8
   179d8:	bl	12060 <__assert_fail@plt>
   179dc:	movw	r1, #38312	; 0x95a8
   179e0:	movt	r1, #1
   179e4:	ldr	r3, [pc, #40]	; 17a14 <flatcc_builder_table_add@@Base+0x1a4>
   179e8:	movw	r0, #39180	; 0x990c
   179ec:	movt	r0, #1
   179f0:	movw	r2, #1774	; 0x6ee
   179f4:	bl	12060 <__assert_fail@plt>
   179f8:	movw	r1, #38312	; 0x95a8
   179fc:	movt	r1, #1
   17a00:	ldr	r3, [pc, #12]	; 17a14 <flatcc_builder_table_add@@Base+0x1a4>
   17a04:	movw	r0, #39028	; 0x9874
   17a08:	movt	r0, #1
   17a0c:	movw	r2, #1773	; 0x6ed
   17a10:	bl	12060 <__assert_fail@plt>
   17a14:	andeq	r9, r1, r8, ror #9

00017a18 <flatcc_builder_table_edit@@Base>:
   17a18:	ldr	r2, [r0, #32]
   17a1c:	ldrh	r2, [r2, #14]
   17a20:	cmp	r2, #3
   17a24:	bne	17a3c <flatcc_builder_table_edit@@Base+0x24>
   17a28:	ldr	r3, [r0, #20]
   17a2c:	ldr	r0, [r0, #16]
   17a30:	sub	r3, r3, r1
   17a34:	add	r0, r0, r3
   17a38:	bx	lr
   17a3c:	movw	r1, #38312	; 0x95a8
   17a40:	movt	r1, #1
   17a44:	ldr	r3, [pc, #20]	; 17a60 <flatcc_builder_table_edit@@Base+0x48>
   17a48:	movw	r0, #39028	; 0x9874
   17a4c:	movt	r0, #1
   17a50:	str	r4, [sp, #-8]!
   17a54:	movw	r2, #1794	; 0x702
   17a58:	str	lr, [sp, #4]
   17a5c:	bl	12060 <__assert_fail@plt>
   17a60:	andeq	r9, r1, r4, lsl #10

00017a64 <flatcc_builder_table_add_copy@@Base>:
   17a64:	strd	r4, [sp, #-36]!	; 0xffffffdc
   17a68:	mov	r5, r3
   17a6c:	ldr	r3, [r0, #32]
   17a70:	ldrh	r3, [r3, #14]
   17a74:	strd	r6, [sp, #8]
   17a78:	strd	r8, [sp, #16]
   17a7c:	strd	sl, [sp, #24]
   17a80:	str	lr, [sp, #32]
   17a84:	sub	sp, sp, #12
   17a88:	cmp	r3, #3
   17a8c:	ldrh	ip, [sp, #48]	; 0x30
   17a90:	bne	17c1c <flatcc_builder_table_add_copy@@Base+0x1b8>
   17a94:	movw	r3, #32764	; 0x7ffc
   17a98:	cmp	r1, r3
   17a9c:	bhi	17c00 <flatcc_builder_table_add_copy@@Base+0x19c>
   17aa0:	ldrh	r3, [r0, #130]	; 0x82
   17aa4:	mov	r7, r2
   17aa8:	lsl	r8, r1, #1
   17aac:	mov	r4, r0
   17ab0:	ldr	r2, [r0, #4]
   17ab4:	cmp	r3, ip
   17ab8:	strhcc	ip, [r0, #130]	; 0x82
   17abc:	ldrh	r9, [r2, r8]
   17ac0:	add	r2, r2, r8
   17ac4:	cmp	r9, #0
   17ac8:	bne	17be4 <flatcc_builder_table_add_copy@@Base+0x180>
   17acc:	ldr	lr, [r4, #12]
   17ad0:	movw	r0, #31153	; 0x79b1
   17ad4:	movt	r0, #40503	; 0x9e37
   17ad8:	uxth	r6, r1
   17adc:	sub	r3, ip, #1
   17ae0:	ldr	sl, [r4, #20]
   17ae4:	rsb	ip, ip, #0
   17ae8:	eor	r1, r1, lr
   17aec:	ldr	lr, [r4, #24]
   17af0:	mul	r1, r0, r1
   17af4:	add	r3, r3, sl
   17af8:	and	sl, r3, ip
   17afc:	add	ip, r5, sl
   17b00:	eor	r1, r1, r5
   17b04:	cmp	ip, lr
   17b08:	str	ip, [r4, #20]
   17b0c:	mul	r1, r0, r1
   17b10:	str	r1, [r4, #12]
   17b14:	bcs	17b70 <flatcc_builder_table_add_copy@@Base+0x10c>
   17b18:	ldr	r3, [r4, #16]
   17b1c:	add	r1, sl, #4
   17b20:	strh	r1, [r2]
   17b24:	ldrh	r2, [r4, #8]
   17b28:	cmp	r2, r6
   17b2c:	addls	r6, r6, #1
   17b30:	strhls	r6, [r4, #8]
   17b34:	adds	r3, r3, sl
   17b38:	beq	17b50 <flatcc_builder_table_add_copy@@Base+0xec>
   17b3c:	mov	r0, r3
   17b40:	mov	r2, r5
   17b44:	mov	r1, r7
   17b48:	bl	11fac <memcpy@plt>
   17b4c:	mov	r3, r0
   17b50:	mov	r0, r3
   17b54:	add	sp, sp, #12
   17b58:	ldrd	r4, [sp]
   17b5c:	ldrd	r6, [sp, #8]
   17b60:	ldrd	r8, [sp, #16]
   17b64:	ldrd	sl, [sp, #24]
   17b68:	add	sp, sp, #32
   17b6c:	pop	{pc}		; (ldr pc, [sp], #4)
   17b70:	ldr	r2, [r4, #28]
   17b74:	mov	r0, #1
   17b78:	add	r1, r4, #60	; 0x3c
   17b7c:	mov	r3, r0
   17b80:	str	r0, [sp]
   17b84:	ldr	fp, [r4, #48]	; 0x30
   17b88:	add	r2, r2, r0
   17b8c:	ldr	r0, [r4, #40]	; 0x28
   17b90:	add	r2, r2, ip
   17b94:	blx	fp
   17b98:	cmp	r0, #0
   17b9c:	bne	17bdc <flatcc_builder_table_add_copy@@Base+0x178>
   17ba0:	ldr	r2, [r4, #4]
   17ba4:	movw	r0, #65532	; 0xfffc
   17ba8:	ldr	r3, [r4, #28]
   17bac:	ldr	r1, [r4, #64]	; 0x40
   17bb0:	add	r2, r2, r8
   17bb4:	ldr	lr, [r4, #60]	; 0x3c
   17bb8:	ldr	ip, [r4, #32]
   17bbc:	sub	r1, r1, r3
   17bc0:	cmp	r1, r0
   17bc4:	add	r3, lr, r3
   17bc8:	movcs	r1, r0
   17bcc:	str	r3, [r4, #16]
   17bd0:	str	r1, [r4, #24]
   17bd4:	str	r0, [ip, #4]
   17bd8:	b	17b1c <flatcc_builder_table_add_copy@@Base+0xb8>
   17bdc:	mov	r3, r9
   17be0:	b	17b50 <flatcc_builder_table_add_copy@@Base+0xec>
   17be4:	movw	r1, #38312	; 0x95a8
   17be8:	movt	r1, #1
   17bec:	ldr	r3, [pc, #68]	; 17c38 <flatcc_builder_table_add_copy@@Base+0x1d4>
   17bf0:	movw	r0, #38504	; 0x9668
   17bf4:	movt	r0, #1
   17bf8:	movw	r2, #1784	; 0x6f8
   17bfc:	bl	12060 <__assert_fail@plt>
   17c00:	movw	r1, #38312	; 0x95a8
   17c04:	movt	r1, #1
   17c08:	ldr	r3, [pc, #40]	; 17c38 <flatcc_builder_table_add_copy@@Base+0x1d4>
   17c0c:	movw	r0, #39180	; 0x990c
   17c10:	movt	r0, #1
   17c14:	movw	r2, #1774	; 0x6ee
   17c18:	bl	12060 <__assert_fail@plt>
   17c1c:	movw	r1, #38312	; 0x95a8
   17c20:	movt	r1, #1
   17c24:	ldr	r3, [pc, #12]	; 17c38 <flatcc_builder_table_add_copy@@Base+0x1d4>
   17c28:	movw	r0, #39028	; 0x9874
   17c2c:	movt	r0, #1
   17c30:	movw	r2, #1773	; 0x6ed
   17c34:	bl	12060 <__assert_fail@plt>
   17c38:	andeq	r9, r1, r8, ror #9

00017c3c <flatcc_builder_table_add_offset@@Base>:
   17c3c:	ldr	r3, [r0, #32]
   17c40:	strd	r4, [sp, #-28]!	; 0xffffffe4
   17c44:	ldrh	r3, [r3, #14]
   17c48:	strd	r6, [sp, #8]
   17c4c:	strd	r8, [sp, #16]
   17c50:	str	lr, [sp, #24]
   17c54:	sub	sp, sp, #12
   17c58:	cmp	r3, #3
   17c5c:	bne	17dbc <flatcc_builder_table_add_offset@@Base+0x180>
   17c60:	movw	r3, #32764	; 0x7ffc
   17c64:	cmp	r1, r3
   17c68:	bhi	17da0 <flatcc_builder_table_add_offset@@Base+0x164>
   17c6c:	ldr	ip, [r0, #4]
   17c70:	lsl	r7, r1, #1
   17c74:	mov	r4, r0
   17c78:	ldrh	r5, [ip, r7]
   17c7c:	add	ip, ip, r7
   17c80:	cmp	r5, #0
   17c84:	bne	17d84 <flatcc_builder_table_add_offset@@Base+0x148>
   17c88:	ldr	r2, [r0, #12]
   17c8c:	movw	r3, #31153	; 0x79b1
   17c90:	movt	r3, #40503	; 0x9e37
   17c94:	uxth	r6, r1
   17c98:	ldr	r8, [r0, #20]
   17c9c:	ldr	r0, [r0, #24]
   17ca0:	eor	r1, r1, r2
   17ca4:	mul	r1, r3, r1
   17ca8:	add	r8, r8, #3
   17cac:	bic	r8, r8, #3
   17cb0:	add	r2, r8, #4
   17cb4:	eor	r1, r1, #4
   17cb8:	cmp	r2, r0
   17cbc:	str	r2, [r4, #20]
   17cc0:	mul	r1, r3, r1
   17cc4:	str	r1, [r4, #12]
   17cc8:	bhi	17d18 <flatcc_builder_table_add_offset@@Base+0xdc>
   17ccc:	ldr	r0, [r4, #16]
   17cd0:	uxth	r2, r8
   17cd4:	add	r0, r0, r8
   17cd8:	add	r3, r2, #4
   17cdc:	strh	r3, [ip]
   17ce0:	ldrh	r3, [r4, #8]
   17ce4:	cmp	r3, r6
   17ce8:	ldr	r3, [r4]
   17cec:	addls	r6, r6, #1
   17cf0:	strhls	r6, [r4, #8]
   17cf4:	add	r1, r3, #2
   17cf8:	str	r1, [r4]
   17cfc:	strh	r2, [r3]
   17d00:	add	sp, sp, #12
   17d04:	ldrd	r4, [sp]
   17d08:	ldrd	r6, [sp, #8]
   17d0c:	ldrd	r8, [sp, #16]
   17d10:	add	sp, sp, #24
   17d14:	pop	{pc}		; (ldr pc, [sp], #4)
   17d18:	ldr	ip, [r4, #28]
   17d1c:	mov	r0, #1
   17d20:	add	r1, r4, #60	; 0x3c
   17d24:	mov	r3, r0
   17d28:	str	r0, [sp]
   17d2c:	ldr	r0, [r4, #40]	; 0x28
   17d30:	add	r2, r2, ip
   17d34:	ldr	r9, [r4, #48]	; 0x30
   17d38:	blx	r9
   17d3c:	cmp	r0, #0
   17d40:	bne	17d7c <flatcc_builder_table_add_offset@@Base+0x140>
   17d44:	ldr	ip, [r4, #4]
   17d48:	movw	r2, #65532	; 0xfffc
   17d4c:	ldrd	r0, [r4, #28]
   17d50:	ldr	r3, [r4, #64]	; 0x40
   17d54:	add	ip, ip, r7
   17d58:	ldr	r5, [r4, #60]	; 0x3c
   17d5c:	sub	r3, r3, r0
   17d60:	cmp	r3, r2
   17d64:	add	r0, r5, r0
   17d68:	movcs	r3, r2
   17d6c:	str	r0, [r4, #16]
   17d70:	str	r3, [r4, #24]
   17d74:	str	r2, [r1, #4]
   17d78:	b	17cd0 <flatcc_builder_table_add_offset@@Base+0x94>
   17d7c:	mov	r0, r5
   17d80:	b	17d00 <flatcc_builder_table_add_offset@@Base+0xc4>
   17d84:	movw	r1, #38312	; 0x95a8
   17d88:	movt	r1, #1
   17d8c:	ldr	r3, [pc, #68]	; 17dd8 <flatcc_builder_table_add_offset@@Base+0x19c>
   17d90:	movw	r0, #38504	; 0x9668
   17d94:	movt	r0, #1
   17d98:	movw	r2, #1819	; 0x71b
   17d9c:	bl	12060 <__assert_fail@plt>
   17da0:	movw	r1, #38312	; 0x95a8
   17da4:	movt	r1, #1
   17da8:	ldr	r3, [pc, #40]	; 17dd8 <flatcc_builder_table_add_offset@@Base+0x19c>
   17dac:	movw	r0, #39180	; 0x990c
   17db0:	movt	r0, #1
   17db4:	movw	r2, #1812	; 0x714
   17db8:	bl	12060 <__assert_fail@plt>
   17dbc:	movw	r1, #38312	; 0x95a8
   17dc0:	movt	r1, #1
   17dc4:	ldr	r3, [pc, #12]	; 17dd8 <flatcc_builder_table_add_offset@@Base+0x19c>
   17dc8:	movw	r0, #39028	; 0x9874
   17dcc:	movt	r0, #1
   17dd0:	movw	r2, #1811	; 0x713
   17dd4:	bl	12060 <__assert_fail@plt>
   17dd8:	andeq	r9, r1, r0, lsr #10

00017ddc <flatcc_builder_table_add_union@@Base>:
   17ddc:	strd	r4, [sp, #-28]!	; 0xffffffe4
   17de0:	strd	r6, [sp, #8]
   17de4:	strd	r8, [sp, #16]
   17de8:	str	lr, [sp, #24]
   17dec:	sub	sp, sp, #20
   17df0:	add	ip, sp, #16
   17df4:	stmdb	ip, {r2, r3}
   17df8:	ldr	r3, [r0, #32]
   17dfc:	ldrb	r7, [sp, #8]
   17e00:	ldr	r6, [sp, #12]
   17e04:	ldrh	r3, [r3, #14]
   17e08:	cmp	r3, #3
   17e0c:	bne	17fc8 <flatcc_builder_table_add_union@@Base+0x1ec>
   17e10:	cmp	r7, #0
   17e14:	mov	r4, r0
   17e18:	mov	r5, r1
   17e1c:	beq	17f00 <flatcc_builder_table_add_union@@Base+0x124>
   17e20:	cmp	r6, #0
   17e24:	beq	17e48 <flatcc_builder_table_add_union@@Base+0x6c>
   17e28:	bl	17c3c <flatcc_builder_table_add_offset@@Base>
   17e2c:	cmp	r0, #0
   17e30:	beq	1801c <flatcc_builder_table_add_union@@Base+0x240>
   17e34:	ldr	r3, [r4, #32]
   17e38:	ldrh	r3, [r3, #14]
   17e3c:	str	r6, [r0]
   17e40:	cmp	r3, #3
   17e44:	bne	17fe4 <flatcc_builder_table_add_union@@Base+0x208>
   17e48:	sub	r1, r5, #1
   17e4c:	movw	r3, #32764	; 0x7ffc
   17e50:	cmp	r1, r3
   17e54:	bhi	18000 <flatcc_builder_table_add_union@@Base+0x224>
   17e58:	ldrh	r3, [r4, #130]	; 0x82
   17e5c:	lsl	r8, r1, #1
   17e60:	cmp	r3, #0
   17e64:	moveq	r3, #1
   17e68:	strheq	r3, [r4, #130]	; 0x82
   17e6c:	ldr	r3, [r4, #4]
   17e70:	ldrh	r2, [r3, r8]
   17e74:	add	r0, r3, r8
   17e78:	cmp	r2, #0
   17e7c:	bne	17fac <flatcc_builder_table_add_union@@Base+0x1d0>
   17e80:	ldr	r2, [r4, #12]
   17e84:	movw	r3, #31153	; 0x79b1
   17e88:	movt	r3, #40503	; 0x9e37
   17e8c:	uxth	r6, r1
   17e90:	ldr	r5, [r4, #20]
   17e94:	ldr	ip, [r4, #24]
   17e98:	eor	r1, r1, r2
   17e9c:	mul	r1, r3, r1
   17ea0:	add	r2, r5, #1
   17ea4:	cmp	r2, ip
   17ea8:	str	r2, [r4, #20]
   17eac:	eor	r1, r1, #1
   17eb0:	mul	r1, r3, r1
   17eb4:	str	r1, [r4, #12]
   17eb8:	bcs	17f24 <flatcc_builder_table_add_union@@Base+0x148>
   17ebc:	ldr	r3, [r4, #16]
   17ec0:	add	r2, r5, #4
   17ec4:	strh	r2, [r0]
   17ec8:	ldrh	r2, [r4, #8]
   17ecc:	cmp	r2, r6
   17ed0:	addls	r6, r6, #1
   17ed4:	strhls	r6, [r4, #8]
   17ed8:	cmn	r3, r5
   17edc:	beq	17f90 <flatcc_builder_table_add_union@@Base+0x1b4>
   17ee0:	mov	r0, #0
   17ee4:	strb	r7, [r3, r5]
   17ee8:	add	sp, sp, #20
   17eec:	ldrd	r4, [sp]
   17ef0:	ldrd	r6, [sp, #8]
   17ef4:	ldrd	r8, [sp, #16]
   17ef8:	add	sp, sp, #24
   17efc:	pop	{pc}		; (ldr pc, [sp], #4)
   17f00:	cmp	r6, #0
   17f04:	beq	17e48 <flatcc_builder_table_add_union@@Base+0x6c>
   17f08:	movw	r1, #38312	; 0x95a8
   17f0c:	movt	r1, #1
   17f10:	ldr	r3, [pc, #288]	; 18038 <flatcc_builder_table_add_union@@Base+0x25c>
   17f14:	movw	r0, #39248	; 0x9950
   17f18:	movt	r0, #1
   17f1c:	movw	r2, #1519	; 0x5ef
   17f20:	bl	12060 <__assert_fail@plt>
   17f24:	ldr	r2, [r4, #28]
   17f28:	mov	r0, #1
   17f2c:	add	r1, r4, #60	; 0x3c
   17f30:	mov	r3, r0
   17f34:	str	r0, [sp]
   17f38:	ldr	r0, [r4, #40]	; 0x28
   17f3c:	add	r2, r5, r2
   17f40:	ldr	r9, [r4, #48]	; 0x30
   17f44:	add	r2, r2, #2
   17f48:	blx	r9
   17f4c:	cmp	r0, #0
   17f50:	bne	17f90 <flatcc_builder_table_add_union@@Base+0x1b4>
   17f54:	ldr	r0, [r4, #4]
   17f58:	movw	r1, #65532	; 0xfffc
   17f5c:	ldr	ip, [r4, #28]
   17f60:	ldr	r2, [r4, #64]	; 0x40
   17f64:	add	r0, r0, r8
   17f68:	ldr	r3, [r4, #60]	; 0x3c
   17f6c:	ldr	lr, [r4, #32]
   17f70:	sub	r2, r2, ip
   17f74:	cmp	r2, r1
   17f78:	add	r3, r3, ip
   17f7c:	movcs	r2, r1
   17f80:	str	r3, [r4, #16]
   17f84:	str	r2, [r4, #24]
   17f88:	str	r1, [lr, #4]
   17f8c:	b	17ec0 <flatcc_builder_table_add_union@@Base+0xe4>
   17f90:	movw	r1, #38312	; 0x95a8
   17f94:	movt	r1, #1
   17f98:	ldr	r3, [pc, #152]	; 18038 <flatcc_builder_table_add_union@@Base+0x25c>
   17f9c:	movw	r0, #39296	; 0x9980
   17fa0:	movt	r0, #1
   17fa4:	movw	r2, #1526	; 0x5f6
   17fa8:	bl	12060 <__assert_fail@plt>
   17fac:	movw	r1, #38312	; 0x95a8
   17fb0:	movt	r1, #1
   17fb4:	ldr	r3, [pc, #128]	; 1803c <flatcc_builder_table_add_union@@Base+0x260>
   17fb8:	movw	r0, #38504	; 0x9668
   17fbc:	movt	r0, #1
   17fc0:	movw	r2, #1784	; 0x6f8
   17fc4:	bl	12060 <__assert_fail@plt>
   17fc8:	movw	r1, #38312	; 0x95a8
   17fcc:	movt	r1, #1
   17fd0:	ldr	r3, [pc, #96]	; 18038 <flatcc_builder_table_add_union@@Base+0x25c>
   17fd4:	movw	r0, #39028	; 0x9874
   17fd8:	movt	r0, #1
   17fdc:	movw	r2, #1518	; 0x5ee
   17fe0:	bl	12060 <__assert_fail@plt>
   17fe4:	movw	r1, #38312	; 0x95a8
   17fe8:	movt	r1, #1
   17fec:	ldr	r3, [pc, #72]	; 1803c <flatcc_builder_table_add_union@@Base+0x260>
   17ff0:	movw	r0, #39028	; 0x9874
   17ff4:	movt	r0, #1
   17ff8:	movw	r2, #1773	; 0x6ed
   17ffc:	bl	12060 <__assert_fail@plt>
   18000:	movw	r1, #38312	; 0x95a8
   18004:	movt	r1, #1
   18008:	ldr	r3, [pc, #44]	; 1803c <flatcc_builder_table_add_union@@Base+0x260>
   1800c:	movw	r0, #39180	; 0x990c
   18010:	movt	r0, #1
   18014:	movw	r2, #1774	; 0x6ee
   18018:	bl	12060 <__assert_fail@plt>
   1801c:	movw	r1, #38312	; 0x95a8
   18020:	movt	r1, #1
   18024:	ldr	r3, [pc, #12]	; 18038 <flatcc_builder_table_add_union@@Base+0x25c>
   18028:	movw	r0, #39284	; 0x9974
   1802c:	movt	r0, #1
   18030:	movw	r2, #1522	; 0x5f2
   18034:	bl	12060 <__assert_fail@plt>
   18038:	andeq	r9, r1, r0, asr #10
   1803c:	andeq	r9, r1, r8, ror #9

00018040 <flatcc_builder_table_add_union_vector@@Base>:
   18040:	strd	r4, [sp, #-20]!	; 0xffffffec
   18044:	strd	r6, [sp, #8]
   18048:	mov	r7, r1
   1804c:	str	lr, [sp, #16]
   18050:	sub	sp, sp, #12
   18054:	add	r1, sp, #8
   18058:	stmdb	r1, {r2, r3}
   1805c:	ldr	r3, [r0, #32]
   18060:	ldm	sp, {r4, r6}
   18064:	ldrh	r3, [r3, #14]
   18068:	cmp	r3, #3
   1806c:	bne	1810c <flatcc_builder_table_add_union_vector@@Base+0xcc>
   18070:	clz	r3, r6
   18074:	clz	r2, r4
   18078:	lsr	r3, r3, #5
   1807c:	lsr	r2, r2, #5
   18080:	cmp	r2, r3
   18084:	beq	180b4 <flatcc_builder_table_add_union_vector@@Base+0x74>
   18088:	adds	r4, r4, #0
   1808c:	movne	r4, #1
   18090:	cmp	r4, r3
   18094:	mvnne	r4, #0
   18098:	beq	18128 <flatcc_builder_table_add_union_vector@@Base+0xe8>
   1809c:	mov	r0, r4
   180a0:	add	sp, sp, #12
   180a4:	ldrd	r4, [sp]
   180a8:	ldrd	r6, [sp, #8]
   180ac:	add	sp, sp, #16
   180b0:	pop	{pc}		; (ldr pc, [sp], #4)
   180b4:	cmp	r4, #0
   180b8:	beq	1809c <flatcc_builder_table_add_union_vector@@Base+0x5c>
   180bc:	sub	r1, r7, #1
   180c0:	mov	r5, r0
   180c4:	bl	17c3c <flatcc_builder_table_add_offset@@Base>
   180c8:	subs	r3, r0, #0
   180cc:	beq	18144 <flatcc_builder_table_add_union_vector@@Base+0x104>
   180d0:	mov	r1, r7
   180d4:	mov	r0, r5
   180d8:	str	r4, [r3]
   180dc:	bl	17c3c <flatcc_builder_table_add_offset@@Base>
   180e0:	cmp	r0, #0
   180e4:	movne	r4, #0
   180e8:	strne	r6, [r0]
   180ec:	bne	1809c <flatcc_builder_table_add_union_vector@@Base+0x5c>
   180f0:	movw	r1, #38312	; 0x95a8
   180f4:	movt	r1, #1
   180f8:	ldr	r3, [pc, #96]	; 18160 <flatcc_builder_table_add_union_vector@@Base+0x120>
   180fc:	movw	r0, #39284	; 0x9974
   18100:	movt	r0, #1
   18104:	movw	r2, #1544	; 0x608
   18108:	bl	12060 <__assert_fail@plt>
   1810c:	movw	r1, #38312	; 0x95a8
   18110:	movt	r1, #1
   18114:	ldr	r3, [pc, #68]	; 18160 <flatcc_builder_table_add_union_vector@@Base+0x120>
   18118:	movw	r0, #39028	; 0x9874
   1811c:	movt	r0, #1
   18120:	mov	r2, #1536	; 0x600
   18124:	bl	12060 <__assert_fail@plt>
   18128:	movw	r1, #38312	; 0x95a8
   1812c:	movt	r1, #1
   18130:	ldr	r3, [pc, #40]	; 18160 <flatcc_builder_table_add_union_vector@@Base+0x120>
   18134:	movw	r0, #39308	; 0x998c
   18138:	movt	r0, #1
   1813c:	movw	r2, #1537	; 0x601
   18140:	bl	12060 <__assert_fail@plt>
   18144:	movw	r1, #38312	; 0x95a8
   18148:	movt	r1, #1
   1814c:	ldr	r3, [pc, #12]	; 18160 <flatcc_builder_table_add_union_vector@@Base+0x120>
   18150:	movw	r0, #39284	; 0x9974
   18154:	movt	r0, #1
   18158:	movw	r2, #1540	; 0x604
   1815c:	bl	12060 <__assert_fail@plt>
   18160:	andeq	r9, r1, r0, ror #10

00018164 <flatcc_builder_push_buffer_alignment@@Base>:
   18164:	mov	r3, r0
   18168:	mov	r2, #4
   1816c:	ldrh	r0, [r0, #128]	; 0x80
   18170:	strh	r2, [r3, #128]	; 0x80
   18174:	bx	lr

00018178 <flatcc_builder_pop_buffer_alignment@@Base>:
   18178:	ldrh	r3, [r0, #128]	; 0x80
   1817c:	cmp	r3, r1
   18180:	strhcc	r1, [r0, #128]	; 0x80
   18184:	bx	lr

00018188 <flatcc_builder_get_buffer_alignment@@Base>:
   18188:	ldrh	r0, [r0, #128]	; 0x80
   1818c:	bx	lr

00018190 <flatcc_builder_set_vtable_clustering@@Base>:
   18190:	clz	r1, r1
   18194:	lsr	r1, r1, #5
   18198:	str	r1, [r0, #180]	; 0xb4
   1819c:	bx	lr

000181a0 <flatcc_builder_set_block_align@@Base>:
   181a0:	strh	r1, [r0, #132]	; 0x84
   181a4:	bx	lr

000181a8 <flatcc_builder_get_level@@Base>:
   181a8:	ldr	r0, [r0, #156]	; 0x9c
   181ac:	bx	lr

000181b0 <flatcc_builder_set_max_level@@Base>:
   181b0:	ldr	r3, [r0, #160]	; 0xa0
   181b4:	str	r1, [r0, #176]	; 0xb0
   181b8:	cmp	r3, r1
   181bc:	strlt	r1, [r0, #160]	; 0xa0
   181c0:	bx	lr

000181c4 <flatcc_builder_get_buffer_size@@Base>:
   181c4:	ldr	r3, [r0, #136]	; 0x88
   181c8:	ldr	r0, [r0, #140]	; 0x8c
   181cc:	sub	r0, r0, r3
   181d0:	bx	lr

000181d4 <flatcc_builder_get_buffer_start@@Base>:
   181d4:	ldr	r0, [r0, #136]	; 0x88
   181d8:	bx	lr

000181dc <flatcc_builder_get_buffer_end@@Base>:
   181dc:	ldr	r0, [r0, #140]	; 0x8c
   181e0:	bx	lr

000181e4 <flatcc_builder_set_vtable_cache_limit@@Base>:
   181e4:	str	r1, [r0, #172]	; 0xac
   181e8:	bx	lr

000181ec <flatcc_builder_set_identifier@@Base>:
   181ec:	ldr	r3, [pc, #16]	; 18204 <flatcc_builder_set_identifier@@Base+0x18>
   181f0:	cmp	r1, #0
   181f4:	moveq	r1, r3
   181f8:	ldr	r3, [r1]
   181fc:	str	r3, [r0, #168]	; 0xa8
   18200:	bx	lr
   18204:	andeq	r8, r1, r0, lsl #30

00018208 <flatcc_builder_get_type@@Base>:
   18208:	ldr	r0, [r0, #32]
   1820c:	cmp	r0, #0
   18210:	ldrhne	r0, [r0, #14]
   18214:	bx	lr

00018218 <flatcc_builder_get_type_at@@Base>:
   18218:	cmp	r1, #0
   1821c:	ble	18244 <flatcc_builder_get_type_at@@Base+0x2c>
   18220:	ldr	r3, [r0, #156]	; 0x9c
   18224:	cmp	r3, r1
   18228:	blt	18244 <flatcc_builder_get_type_at@@Base+0x2c>
   1822c:	ldr	r2, [r0, #32]
   18230:	sub	r1, r1, r3
   18234:	add	r1, r1, r1, lsl #3
   18238:	add	r1, r2, r1, lsl #2
   1823c:	ldrh	r0, [r1, #14]
   18240:	bx	lr
   18244:	mov	r0, #0
   18248:	bx	lr

0001824c <flatcc_builder_get_direct_buffer@@Base>:
   1824c:	ldr	r3, [r0, #184]	; 0xb8
   18250:	cmp	r3, #0
   18254:	bne	18270 <flatcc_builder_get_direct_buffer@@Base+0x24>
   18258:	cmp	r1, #0
   1825c:	movne	r3, #0
   18260:	movne	r0, r3
   18264:	moveq	r0, r1
   18268:	strne	r3, [r1]
   1826c:	bx	lr
   18270:	ldrd	r2, [r0, #188]	; 0xbc
   18274:	cmp	r2, r3
   18278:	bne	18258 <flatcc_builder_get_direct_buffer@@Base+0xc>
   1827c:	cmp	r1, #0
   18280:	ldrne	r3, [r0, #212]	; 0xd4
   18284:	ldr	r0, [r0, #196]	; 0xc4
   18288:	strne	r3, [r1]
   1828c:	bx	lr

00018290 <flatcc_builder_copy_buffer@@Base>:
   18290:	ldr	r3, [r0, #184]	; 0xb8
   18294:	cmp	r3, #0
   18298:	beq	182c0 <flatcc_builder_copy_buffer@@Base+0x30>
   1829c:	add	r0, r0, #188	; 0xbc
   182a0:	str	r4, [sp, #-8]!
   182a4:	str	lr, [sp, #4]
   182a8:	bl	189fc <flatcc_emitter_copy_buffer@@Base>
   182ac:	cmp	r0, #0
   182b0:	beq	182c8 <flatcc_builder_copy_buffer@@Base+0x38>
   182b4:	ldr	r4, [sp]
   182b8:	add	sp, sp, #4
   182bc:	pop	{pc}		; (ldr pc, [sp], #4)
   182c0:	mov	r0, r3
   182c4:	bx	lr
   182c8:	bl	12b5c <flatcc_builder_default_alloc@@Base+0x23c>

000182cc <flatcc_builder_finalize_buffer@@Base>:
   182cc:	strd	r4, [sp, #-16]!
   182d0:	cmp	r1, #0
   182d4:	mov	r5, r0
   182d8:	ldr	r2, [r0, #136]	; 0x88
   182dc:	ldr	r4, [r0, #140]	; 0x8c
   182e0:	str	r6, [sp, #8]
   182e4:	str	lr, [sp, #12]
   182e8:	sub	r4, r4, r2
   182ec:	mov	r0, r4
   182f0:	strne	r4, [r1]
   182f4:	bl	11fe8 <malloc@plt>
   182f8:	subs	r6, r0, #0
   182fc:	beq	18354 <flatcc_builder_finalize_buffer@@Base+0x88>
   18300:	ldr	r3, [r5, #184]	; 0xb8
   18304:	cmp	r3, #0
   18308:	beq	18338 <flatcc_builder_finalize_buffer@@Base+0x6c>
   1830c:	mov	r2, r4
   18310:	add	r0, r5, #188	; 0xbc
   18314:	mov	r1, r6
   18318:	bl	189fc <flatcc_emitter_copy_buffer@@Base>
   1831c:	cmp	r0, #0
   18320:	beq	18370 <flatcc_builder_finalize_buffer@@Base+0xa4>
   18324:	mov	r0, r6
   18328:	ldrd	r4, [sp]
   1832c:	ldr	r6, [sp, #8]
   18330:	add	sp, sp, #12
   18334:	pop	{pc}		; (ldr pc, [sp], #4)
   18338:	movw	r1, #38312	; 0x95a8
   1833c:	movt	r1, #1
   18340:	ldr	r3, [pc, #44]	; 18374 <flatcc_builder_finalize_buffer@@Base+0xa8>
   18344:	movw	r0, #38504	; 0x9668
   18348:	movt	r0, #1
   1834c:	movw	r2, #1948	; 0x79c
   18350:	bl	12060 <__assert_fail@plt>
   18354:	movw	r1, #38312	; 0x95a8
   18358:	movt	r1, #1
   1835c:	ldr	r3, [pc, #16]	; 18374 <flatcc_builder_finalize_buffer@@Base+0xa8>
   18360:	movw	r0, #38504	; 0x9668
   18364:	movt	r0, #1
   18368:	movw	r2, #1944	; 0x798
   1836c:	bl	12060 <__assert_fail@plt>
   18370:	bl	12b5c <flatcc_builder_default_alloc@@Base+0x23c>
   18374:	andeq	r9, r1, r8, lsl #11

00018378 <flatcc_builder_finalize_aligned_buffer@@Base>:
   18378:	strd	r4, [sp, #-20]!	; 0xffffffec
   1837c:	mov	r2, #0
   18380:	mov	r5, r0
   18384:	ldr	r3, [r0, #136]	; 0x88
   18388:	ldr	r4, [r0, #140]	; 0x8c
   1838c:	strd	r6, [sp, #8]
   18390:	subs	r6, r1, #0
   18394:	ldrh	r1, [r0, #128]	; 0x80
   18398:	str	lr, [sp, #16]
   1839c:	sub	sp, sp, #12
   183a0:	add	r0, sp, #4
   183a4:	sub	r3, r4, r3
   183a8:	str	r2, [sp, #4]
   183ac:	sub	r4, r1, #1
   183b0:	rsb	r2, r1, #0
   183b4:	strne	r3, [r6]
   183b8:	add	r4, r4, r3
   183bc:	cmp	r1, #4
   183c0:	and	r4, r4, r2
   183c4:	movcc	r1, #4
   183c8:	mov	r2, r4
   183cc:	bl	12024 <posix_memalign@plt>
   183d0:	cmp	r0, #0
   183d4:	beq	18414 <flatcc_builder_finalize_aligned_buffer@@Base+0x9c>
   183d8:	ldr	r0, [sp, #4]
   183dc:	cmp	r0, #0
   183e0:	beq	183e8 <flatcc_builder_finalize_aligned_buffer@@Base+0x70>
   183e4:	bl	11fa0 <free@plt>
   183e8:	cmp	r6, #0
   183ec:	movne	r3, #0
   183f0:	moveq	r7, r6
   183f4:	movne	r7, r3
   183f8:	strne	r3, [r6]
   183fc:	mov	r0, r7
   18400:	add	sp, sp, #12
   18404:	ldrd	r4, [sp]
   18408:	ldrd	r6, [sp, #8]
   1840c:	add	sp, sp, #16
   18410:	pop	{pc}		; (ldr pc, [sp], #4)
   18414:	ldr	r7, [sp, #4]
   18418:	cmp	r7, #0
   1841c:	beq	183e8 <flatcc_builder_finalize_aligned_buffer@@Base+0x70>
   18420:	ldr	r3, [r5, #184]	; 0xb8
   18424:	cmp	r3, #0
   18428:	beq	18448 <flatcc_builder_finalize_aligned_buffer@@Base+0xd0>
   1842c:	mov	r2, r4
   18430:	add	r0, r5, #188	; 0xbc
   18434:	mov	r1, r7
   18438:	bl	189fc <flatcc_emitter_copy_buffer@@Base>
   1843c:	cmp	r0, #0
   18440:	bne	183fc <flatcc_builder_finalize_aligned_buffer@@Base+0x84>
   18444:	bl	12b5c <flatcc_builder_default_alloc@@Base+0x23c>
   18448:	mov	r0, r7
   1844c:	b	183e4 <flatcc_builder_finalize_aligned_buffer@@Base+0x6c>

00018450 <flatcc_builder_aligned_alloc@@Base>:
   18450:	cmp	r0, #4
   18454:	str	r4, [sp, #-8]!
   18458:	mov	r4, #0
   1845c:	str	lr, [sp, #4]
   18460:	sub	sp, sp, #8
   18464:	mov	r2, r1
   18468:	movcs	r1, r0
   1846c:	movcc	r1, #4
   18470:	add	r0, sp, #4
   18474:	str	r4, [sp, #4]
   18478:	bl	12024 <posix_memalign@plt>
   1847c:	cmp	r0, r4
   18480:	ldr	r0, [sp, #4]
   18484:	beq	18498 <flatcc_builder_aligned_alloc@@Base+0x48>
   18488:	cmp	r0, #0
   1848c:	beq	18498 <flatcc_builder_aligned_alloc@@Base+0x48>
   18490:	bl	11fa0 <free@plt>
   18494:	mov	r0, r4
   18498:	add	sp, sp, #8
   1849c:	ldr	r4, [sp]
   184a0:	add	sp, sp, #4
   184a4:	pop	{pc}		; (ldr pc, [sp], #4)

000184a8 <flatcc_builder_aligned_free@@Base>:
   184a8:	b	11fa0 <free@plt>

000184ac <flatcc_builder_get_emit_context@@Base>:
   184ac:	ldr	r0, [r0, #36]	; 0x24
   184b0:	bx	lr

000184b4 <flatcc_emitter_recycle_page@@Base>:
   184b4:	ldr	r3, [r0]
   184b8:	cmp	r3, r1
   184bc:	beq	18500 <flatcc_emitter_recycle_page@@Base+0x4c>
   184c0:	ldr	r2, [r0, #4]
   184c4:	cmp	r2, r1
   184c8:	beq	18500 <flatcc_emitter_recycle_page@@Base+0x4c>
   184cc:	push	{lr}		; (str lr, [sp, #-4]!)
   184d0:	mov	r0, #0
   184d4:	ldr	lr, [r1, #2944]	; 0xb80
   184d8:	ldr	ip, [r1, #2948]	; 0xb84
   184dc:	str	ip, [lr, #2948]	; 0xb84
   184e0:	ldr	r2, [r3, #2948]	; 0xb84
   184e4:	str	lr, [ip, #2944]	; 0xb80
   184e8:	str	r3, [r1, #2944]	; 0xb80
   184ec:	str	r2, [r1, #2948]	; 0xb84
   184f0:	str	r1, [r2, #2944]	; 0xb80
   184f4:	ldr	r3, [r1, #2944]	; 0xb80
   184f8:	str	r1, [r3, #2948]	; 0xb84
   184fc:	pop	{pc}		; (ldr pc, [sp], #4)
   18500:	mvn	r0, #0
   18504:	bx	lr

00018508 <flatcc_emitter_reset@@Base>:
   18508:	ldr	r2, [r0]
   1850c:	cmp	r2, #0
   18510:	bxeq	lr
   18514:	strd	r4, [sp, #-16]!
   18518:	movw	ip, #64064	; 0xfa40
   1851c:	movt	ip, #65535	; 0xffff
   18520:	ldr	r1, [r0, #24]
   18524:	add	r4, r2, #1472	; 0x5c0
   18528:	ldr	r3, [r0, #32]
   1852c:	ldr	r5, [r0, #28]
   18530:	str	r6, [sp, #8]
   18534:	str	lr, [sp, #12]
   18538:	mov	lr, #1472	; 0x5c0
   1853c:	cmp	r3, #0
   18540:	stmib	r0, {r2, r4}
   18544:	moveq	r3, r1
   18548:	lsr	r1, r1, #2
   1854c:	str	lr, [r0, #12]
   18550:	add	r3, r3, r3, lsl #1
   18554:	str	r4, [r0, #16]
   18558:	str	lr, [r0, #20]
   1855c:	add	r3, r1, r3, lsr #2
   18560:	str	ip, [r2, #2952]	; 0xb88
   18564:	mov	ip, #0
   18568:	cmp	r5, r3, lsl #1
   1856c:	str	ip, [r0, #24]
   18570:	str	r3, [r0, #32]
   18574:	bls	185cc <flatcc_emitter_reset@@Base+0xc4>
   18578:	ldr	r3, [r2, #2944]	; 0xb80
   1857c:	mov	r4, r0
   18580:	cmp	r2, r3
   18584:	bne	1859c <flatcc_emitter_reset@@Base+0x94>
   18588:	b	185cc <flatcc_emitter_reset@@Base+0xc4>
   1858c:	ldm	r4, {r1, r2}
   18590:	ldr	r3, [r2, #2944]	; 0xb80
   18594:	cmp	r3, r1
   18598:	beq	185cc <flatcc_emitter_reset@@Base+0xc4>
   1859c:	ldr	r1, [r3, #2944]	; 0xb80
   185a0:	mov	r0, r3
   185a4:	str	r1, [r2, #2944]	; 0xb80
   185a8:	ldr	r3, [r3, #2944]	; 0xb80
   185ac:	str	r2, [r3, #2948]	; 0xb84
   185b0:	bl	11fa0 <free@plt>
   185b4:	ldr	r3, [r4, #28]
   185b8:	ldr	r2, [r4, #32]
   185bc:	sub	r3, r3, #2944	; 0xb80
   185c0:	cmp	r3, r2, lsl #1
   185c4:	str	r3, [r4, #28]
   185c8:	bhi	1858c <flatcc_emitter_reset@@Base+0x84>
   185cc:	ldrd	r4, [sp]
   185d0:	ldr	r6, [sp, #8]
   185d4:	add	sp, sp, #12
   185d8:	pop	{pc}		; (ldr pc, [sp], #4)

000185dc <flatcc_emitter_clear@@Base>:
   185dc:	ldr	r3, [r0]
   185e0:	cmp	r3, #0
   185e4:	bxeq	lr
   185e8:	mov	r1, #0
   185ec:	strd	r4, [sp, #-16]!
   185f0:	mov	r5, r0
   185f4:	ldr	r2, [r3, #2948]	; 0xb84
   185f8:	str	r6, [sp, #8]
   185fc:	str	lr, [sp, #12]
   18600:	str	r1, [r2, #2944]	; 0xb80
   18604:	ldr	r4, [r3, #2944]	; 0xb80
   18608:	cmp	r4, r1
   1860c:	bne	18618 <flatcc_emitter_clear@@Base+0x3c>
   18610:	b	18654 <flatcc_emitter_clear@@Base+0x78>
   18614:	mov	r4, r3
   18618:	ldr	r0, [r4, #2948]	; 0xb84
   1861c:	bl	11fa0 <free@plt>
   18620:	ldr	r3, [r4, #2944]	; 0xb80
   18624:	cmp	r3, #0
   18628:	bne	18614 <flatcc_emitter_clear@@Base+0x38>
   1862c:	mov	r0, r4
   18630:	bl	11fa0 <free@plt>
   18634:	mov	r0, r5
   18638:	mov	r2, #36	; 0x24
   1863c:	ldrd	r4, [sp]
   18640:	mov	r1, #0
   18644:	ldr	r6, [sp, #8]
   18648:	ldr	lr, [sp, #12]
   1864c:	add	sp, sp, #16
   18650:	b	12030 <memset@plt>
   18654:	mov	r4, r3
   18658:	b	1862c <flatcc_emitter_clear@@Base+0x50>

0001865c <flatcc_emitter@@Base>:
   1865c:	cmp	r3, #0
   18660:	strd	r4, [sp, #-36]!	; 0xffffffdc
   18664:	mov	r4, r0
   18668:	ldr	r3, [r0, #24]
   1866c:	strd	r6, [sp, #8]
   18670:	strd	r8, [sp, #16]
   18674:	sub	r8, r2, #1
   18678:	strd	sl, [sp, #24]
   1867c:	str	lr, [sp, #32]
   18680:	sub	sp, sp, #12
   18684:	ldr	ip, [sp, #48]	; 0x30
   18688:	add	r3, r3, ip
   1868c:	str	r3, [r0, #24]
   18690:	blt	18874 <flatcc_emitter@@Base+0x218>
   18694:	ldr	r0, [r0, #20]
   18698:	cmp	r0, ip
   1869c:	bcs	18734 <flatcc_emitter@@Base+0xd8>
   186a0:	cmp	r2, #0
   186a4:	beq	18778 <flatcc_emitter@@Base+0x11c>
   186a8:	movw	r3, #64064	; 0xfa40
   186ac:	movt	r3, #65535	; 0xffff
   186b0:	add	r5, r1, #8
   186b4:	mov	r8, r2
   186b8:	mov	r9, #1472	; 0x5c0
   186bc:	str	r3, [sp, #4]
   186c0:	ldr	r7, [r5, #-8]
   186c4:	ldr	r6, [r5, #-4]
   186c8:	cmp	r6, #0
   186cc:	beq	18810 <flatcc_emitter@@Base+0x1b4>
   186d0:	mov	r3, r0
   186d4:	cmp	r6, r3
   186d8:	bls	1872c <flatcc_emitter@@Base+0xd0>
   186dc:	cmp	r3, #0
   186e0:	beq	18798 <flatcc_emitter@@Base+0x13c>
   186e4:	sub	fp, r6, r3
   186e8:	mov	r6, r3
   186ec:	mov	r2, r6
   186f0:	mov	r1, r7
   186f4:	ldr	r0, [r4, #16]
   186f8:	bl	11fac <memcpy@plt>
   186fc:	ldr	r2, [r4, #16]
   18700:	cmp	fp, #0
   18704:	add	r7, r7, r6
   18708:	ldr	r0, [r4, #20]
   1870c:	add	r2, r2, r6
   18710:	sub	r3, r0, r6
   18714:	mov	r0, r3
   18718:	strd	r2, [r4, #16]
   1871c:	beq	18810 <flatcc_emitter@@Base+0x1b4>
   18720:	mov	r6, fp
   18724:	cmp	r6, r3
   18728:	bhi	186dc <flatcc_emitter@@Base+0x80>
   1872c:	mov	fp, #0
   18730:	b	186ec <flatcc_emitter@@Base+0x90>
   18734:	ldr	r3, [r4, #16]
   18738:	sub	r0, r0, ip
   1873c:	str	r0, [r4, #20]
   18740:	add	ip, r3, ip
   18744:	str	ip, [r4, #16]
   18748:	cmp	r2, #0
   1874c:	addne	r4, r1, #8
   18750:	beq	18778 <flatcc_emitter@@Base+0x11c>
   18754:	mov	r0, r3
   18758:	ldmdb	r4, {r1, r2}
   1875c:	sub	r8, r8, #1
   18760:	bl	11fac <memcpy@plt>
   18764:	ldr	r2, [r4, #-4]
   18768:	cmn	r8, #1
   1876c:	add	r4, r4, #8
   18770:	add	r3, r0, r2
   18774:	bne	18754 <flatcc_emitter@@Base+0xf8>
   18778:	mov	r0, #0
   1877c:	add	sp, sp, #12
   18780:	ldrd	r4, [sp]
   18784:	ldrd	r6, [sp, #8]
   18788:	ldrd	r8, [sp, #16]
   1878c:	ldrd	sl, [sp, #24]
   18790:	add	sp, sp, #32
   18794:	pop	{pc}		; (ldr pc, [sp], #4)
   18798:	ldr	fp, [r4, #4]
   1879c:	cmp	fp, #0
   187a0:	beq	18820 <flatcc_emitter@@Base+0x1c4>
   187a4:	ldr	sl, [r4]
   187a8:	ldr	r0, [fp, #2944]	; 0xb80
   187ac:	cmp	r0, sl
   187b0:	beq	187dc <flatcc_emitter@@Base+0x180>
   187b4:	str	r0, [r4, #4]
   187b8:	ldr	r1, [r0, #2948]	; 0xb84
   187bc:	mov	r2, #2944	; 0xb80
   187c0:	mov	r3, r2
   187c4:	str	r0, [r4, #16]
   187c8:	str	r2, [r4, #20]
   187cc:	ldr	r2, [r1, #2952]	; 0xb88
   187d0:	add	r2, r2, r3
   187d4:	str	r2, [r0, #2952]	; 0xb88
   187d8:	b	186d4 <flatcc_emitter@@Base+0x78>
   187dc:	movw	r0, #2956	; 0xb8c
   187e0:	bl	11fe8 <malloc@plt>
   187e4:	cmp	r0, #0
   187e8:	beq	1886c <flatcc_emitter@@Base+0x210>
   187ec:	ldr	r2, [r4, #28]
   187f0:	str	sl, [r0, #2944]	; 0xb80
   187f4:	str	fp, [r0, #2948]	; 0xb84
   187f8:	add	r2, r2, #2944	; 0xb80
   187fc:	str	r2, [r4, #28]
   18800:	str	r0, [sl, #2948]	; 0xb84
   18804:	str	r0, [fp, #2944]	; 0xb80
   18808:	str	r0, [r4, #4]
   1880c:	b	187b8 <flatcc_emitter@@Base+0x15c>
   18810:	subs	r8, r8, #1
   18814:	add	r5, r5, #8
   18818:	bne	186c0 <flatcc_emitter@@Base+0x64>
   1881c:	b	18778 <flatcc_emitter@@Base+0x11c>
   18820:	movw	r0, #2956	; 0xb8c
   18824:	bl	11fe8 <malloc@plt>
   18828:	cmp	r0, #0
   1882c:	beq	1886c <flatcc_emitter@@Base+0x210>
   18830:	ldr	r2, [r4, #28]
   18834:	add	r1, r0, #1472	; 0x5c0
   18838:	mov	r3, #1472	; 0x5c0
   1883c:	str	r0, [r4]
   18840:	strd	r0, [r4, #4]
   18844:	str	r9, [r4, #12]
   18848:	str	r1, [r4, #16]
   1884c:	add	r2, r2, #2944	; 0xb80
   18850:	str	r9, [r4, #20]
   18854:	str	r0, [r0, #2944]	; 0xb80
   18858:	str	r2, [r4, #28]
   1885c:	ldr	r2, [sp, #4]
   18860:	str	r0, [r0, #2948]	; 0xb84
   18864:	str	r2, [r0, #2952]	; 0xb88
   18868:	b	186d4 <flatcc_emitter@@Base+0x78>
   1886c:	mvn	r0, #0
   18870:	b	1877c <flatcc_emitter@@Base+0x120>
   18874:	ldr	r0, [r0, #12]
   18878:	cmp	r0, ip
   1887c:	bcs	189e4 <flatcc_emitter@@Base+0x388>
   18880:	add	r5, r1, r2, lsl #3
   18884:	movw	r3, #64064	; 0xfa40
   18888:	movt	r3, #65535	; 0xffff
   1888c:	str	r3, [sp, #4]
   18890:	cmn	r8, #1
   18894:	beq	18778 <flatcc_emitter@@Base+0x11c>
   18898:	ldr	r7, [r5, #-8]
   1889c:	ldr	r6, [r5, #-4]
   188a0:	cmp	r6, #0
   188a4:	add	r7, r7, r6
   188a8:	beq	188f8 <flatcc_emitter@@Base+0x29c>
   188ac:	mov	r9, #1472	; 0x5c0
   188b0:	ldr	r2, [r4, #12]
   188b4:	cmp	r2, r6
   188b8:	bcs	1895c <flatcc_emitter@@Base+0x300>
   188bc:	cmp	r2, #0
   188c0:	beq	18904 <flatcc_emitter@@Base+0x2a8>
   188c4:	sub	r6, r6, r2
   188c8:	mov	r1, #0
   188cc:	ldr	r3, [r4, #8]
   188d0:	rsb	r0, r2, #0
   188d4:	add	r7, r7, r0
   188d8:	str	r1, [r4, #12]
   188dc:	mov	r1, r7
   188e0:	add	r3, r3, r0
   188e4:	mov	r0, r3
   188e8:	str	r3, [r4, #8]
   188ec:	bl	11fac <memcpy@plt>
   188f0:	cmp	r6, #0
   188f4:	bne	188b0 <flatcc_emitter@@Base+0x254>
   188f8:	sub	r5, r5, #8
   188fc:	sub	r8, r8, #1
   18900:	b	18890 <flatcc_emitter@@Base+0x234>
   18904:	ldr	fp, [r4]
   18908:	cmp	fp, #0
   1890c:	beq	189a0 <flatcc_emitter@@Base+0x344>
   18910:	ldr	sl, [r4, #4]
   18914:	ldr	r0, [fp, #2948]	; 0xb84
   18918:	cmp	r0, sl
   1891c:	beq	1896c <flatcc_emitter@@Base+0x310>
   18920:	ldr	r3, [fp, #2952]	; 0xb88
   18924:	sub	r3, r3, #2944	; 0xb80
   18928:	str	r3, [r0, #2952]	; 0xb88
   1892c:	str	r0, [r4]
   18930:	ldr	r3, [r0, #2944]	; 0xb80
   18934:	mov	r2, #2944	; 0xb80
   18938:	add	r1, r0, #2944	; 0xb80
   1893c:	ldr	r3, [r3, #2952]	; 0xb88
   18940:	str	r1, [r4, #8]
   18944:	str	r2, [r4, #12]
   18948:	sub	r3, r3, #2944	; 0xb80
   1894c:	str	r3, [r0, #2952]	; 0xb88
   18950:	ldr	r2, [r4, #12]
   18954:	cmp	r2, r6
   18958:	bcc	188bc <flatcc_emitter@@Base+0x260>
   1895c:	sub	r1, r2, r6
   18960:	mov	r2, r6
   18964:	mov	r6, #0
   18968:	b	188cc <flatcc_emitter@@Base+0x270>
   1896c:	movw	r0, #2956	; 0xb8c
   18970:	bl	11fe8 <malloc@plt>
   18974:	cmp	r0, #0
   18978:	beq	1886c <flatcc_emitter@@Base+0x210>
   1897c:	ldr	r2, [r4, #28]
   18980:	str	fp, [r0, #2944]	; 0xb80
   18984:	str	sl, [r0, #2948]	; 0xb84
   18988:	add	r2, r2, #2944	; 0xb80
   1898c:	str	r2, [r4, #28]
   18990:	str	r0, [fp, #2948]	; 0xb84
   18994:	str	r0, [sl, #2944]	; 0xb80
   18998:	str	r0, [r4]
   1899c:	b	18930 <flatcc_emitter@@Base+0x2d4>
   189a0:	movw	r0, #2956	; 0xb8c
   189a4:	bl	11fe8 <malloc@plt>
   189a8:	cmp	r0, #0
   189ac:	beq	1886c <flatcc_emitter@@Base+0x210>
   189b0:	ldr	r3, [r4, #28]
   189b4:	add	r2, r0, #1472	; 0x5c0
   189b8:	str	r0, [r4]
   189bc:	stmib	r4, {r0, r2, r9}
   189c0:	add	r3, r3, #2944	; 0xb80
   189c4:	str	r2, [r4, #16]
   189c8:	str	r9, [r4, #20]
   189cc:	str	r3, [r4, #28]
   189d0:	ldr	r3, [sp, #4]
   189d4:	str	r0, [r0, #2944]	; 0xb80
   189d8:	str	r0, [r0, #2948]	; 0xb84
   189dc:	str	r3, [r0, #2952]	; 0xb88
   189e0:	b	188b0 <flatcc_emitter@@Base+0x254>
   189e4:	ldr	r3, [r4, #8]
   189e8:	sub	r0, r0, ip
   189ec:	str	r0, [r4, #12]
   189f0:	sub	r3, r3, ip
   189f4:	str	r3, [r4, #8]
   189f8:	b	18748 <flatcc_emitter@@Base+0xec>

000189fc <flatcc_emitter_copy_buffer@@Base>:
   189fc:	ldr	r3, [r0, #24]
   18a00:	strd	r4, [sp, #-16]!
   18a04:	str	r6, [sp, #8]
   18a08:	str	lr, [sp, #12]
   18a0c:	cmp	r3, r2
   18a10:	movhi	r5, #0
   18a14:	bhi	18a94 <flatcc_emitter_copy_buffer@@Base+0x98>
   18a18:	ldr	r5, [r0]
   18a1c:	mov	r6, r0
   18a20:	cmp	r5, #0
   18a24:	beq	18a94 <flatcc_emitter_copy_buffer@@Base+0x98>
   18a28:	ldr	r2, [r6, #4]
   18a2c:	mov	r0, r1
   18a30:	ldr	r1, [r6, #8]
   18a34:	cmp	r5, r2
   18a38:	beq	18aa8 <flatcc_emitter_copy_buffer@@Base+0xac>
   18a3c:	ldr	r2, [r6, #12]
   18a40:	rsb	r2, r2, #2944	; 0xb80
   18a44:	add	r5, r0, r2
   18a48:	bl	11fac <memcpy@plt>
   18a4c:	ldrd	r2, [r6]
   18a50:	ldr	r4, [r2, #2944]	; 0xb80
   18a54:	cmp	r4, r3
   18a58:	beq	18a80 <flatcc_emitter_copy_buffer@@Base+0x84>
   18a5c:	mov	r2, #2944	; 0xb80
   18a60:	mov	r1, r4
   18a64:	mov	r0, r5
   18a68:	add	r5, r5, r2
   18a6c:	bl	11fac <memcpy@plt>
   18a70:	ldr	r3, [r6, #4]
   18a74:	ldr	r4, [r4, #2944]	; 0xb80
   18a78:	cmp	r3, r4
   18a7c:	bne	18a5c <flatcc_emitter_copy_buffer@@Base+0x60>
   18a80:	ldr	r2, [r6, #20]
   18a84:	mov	r1, r4
   18a88:	mov	r0, r5
   18a8c:	rsb	r2, r2, #2944	; 0xb80
   18a90:	bl	11fac <memcpy@plt>
   18a94:	mov	r0, r5
   18a98:	ldrd	r4, [sp]
   18a9c:	ldr	r6, [sp, #8]
   18aa0:	add	sp, sp, #12
   18aa4:	pop	{pc}		; (ldr pc, [sp], #4)
   18aa8:	mov	r2, r3
   18aac:	mov	r5, r0
   18ab0:	bl	11fac <memcpy@plt>
   18ab4:	b	18a94 <flatcc_emitter_copy_buffer@@Base+0x98>

00018ab8 <__libc_csu_init@@Base>:
   18ab8:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   18abc:	mov	r7, r0
   18ac0:	ldr	r6, [pc, #72]	; 18b10 <__libc_csu_init@@Base+0x58>
   18ac4:	ldr	r5, [pc, #72]	; 18b14 <__libc_csu_init@@Base+0x5c>
   18ac8:	add	r6, pc, r6
   18acc:	add	r5, pc, r5
   18ad0:	sub	r6, r6, r5
   18ad4:	mov	r8, r1
   18ad8:	mov	r9, r2
   18adc:	bl	11f74 <printf@plt-0x20>
   18ae0:	asrs	r6, r6, #2
   18ae4:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   18ae8:	mov	r4, #0
   18aec:	add	r4, r4, #1
   18af0:	ldr	r3, [r5], #4
   18af4:	mov	r2, r9
   18af8:	mov	r1, r8
   18afc:	mov	r0, r7
   18b00:	blx	r3
   18b04:	cmp	r6, r4
   18b08:	bne	18aec <__libc_csu_init@@Base+0x34>
   18b0c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   18b10:	andeq	r1, r1, r4, asr #8
   18b14:	andeq	r1, r1, ip, lsr r4

00018b18 <__libc_csu_fini@@Base>:
   18b18:	bx	lr

Disassembly of section .fini:

00018b1c <.fini>:
   18b1c:	push	{r3, lr}
   18b20:	pop	{r3, pc}
