
../repos/coreutils/src/chcon:     file format elf32-littlearm


Disassembly of section .init:

0001120c <.init>:
   1120c:	push	{r3, lr}
   11210:	bl	1164c <__assert_fail@plt+0x48>
   11214:	pop	{r3, pc}

Disassembly of section .plt:

00011218 <fstatfs64@plt-0x14>:
   11218:	push	{lr}		; (str lr, [sp, #-4]!)
   1121c:	ldr	lr, [pc, #4]	; 11228 <fstatfs64@plt-0x4>
   11220:	add	lr, pc, lr
   11224:	ldr	pc, [lr, #8]!
   11228:	ldrdeq	sl, [r1], -r8

0001122c <fstatfs64@plt>:
   1122c:	add	ip, pc, #0, 12
   11230:	add	ip, ip, #106496	; 0x1a000
   11234:	ldr	pc, [ip, #3544]!	; 0xdd8

00011238 <calloc@plt>:
   11238:	add	ip, pc, #0, 12
   1123c:	add	ip, ip, #106496	; 0x1a000
   11240:	ldr	pc, [ip, #3536]!	; 0xdd0

00011244 <fputs_unlocked@plt>:
   11244:	add	ip, pc, #0, 12
   11248:	add	ip, ip, #106496	; 0x1a000
   1124c:	ldr	pc, [ip, #3528]!	; 0xdc8

00011250 <raise@plt>:
   11250:	add	ip, pc, #0, 12
   11254:	add	ip, ip, #106496	; 0x1a000
   11258:	ldr	pc, [ip, #3520]!	; 0xdc0

0001125c <is_selinux_enabled@plt>:
   1125c:	add	ip, pc, #0, 12
   11260:	add	ip, ip, #106496	; 0x1a000
   11264:	ldr	pc, [ip, #3512]!	; 0xdb8

00011268 <strcmp@plt>:
   11268:	add	ip, pc, #0, 12
   1126c:	add	ip, ip, #106496	; 0x1a000
   11270:	ldr	pc, [ip, #3504]!	; 0xdb0

00011274 <fflush@plt>:
   11274:	add	ip, pc, #0, 12
   11278:	add	ip, ip, #106496	; 0x1a000
   1127c:	ldr	pc, [ip, #3496]!	; 0xda8

00011280 <lsetfilecon@plt>:
   11280:	add	ip, pc, #0, 12
   11284:	add	ip, ip, #106496	; 0x1a000
   11288:	ldr	pc, [ip, #3488]!	; 0xda0

0001128c <memmove@plt>:
   1128c:	add	ip, pc, #0, 12
   11290:	add	ip, ip, #106496	; 0x1a000
   11294:	ldr	pc, [ip, #3480]!	; 0xd98

00011298 <free@plt>:
   11298:	add	ip, pc, #0, 12
   1129c:	add	ip, ip, #106496	; 0x1a000
   112a0:	ldr	pc, [ip, #3472]!	; 0xd90

000112a4 <_exit@plt>:
   112a4:	add	ip, pc, #0, 12
   112a8:	add	ip, ip, #106496	; 0x1a000
   112ac:	ldr	pc, [ip, #3464]!	; 0xd88

000112b0 <memcpy@plt>:
   112b0:	add	ip, pc, #0, 12
   112b4:	add	ip, ip, #106496	; 0x1a000
   112b8:	ldr	pc, [ip, #3456]!	; 0xd80

000112bc <mbsinit@plt>:
   112bc:	add	ip, pc, #0, 12
   112c0:	add	ip, ip, #106496	; 0x1a000
   112c4:	ldr	pc, [ip, #3448]!	; 0xd78

000112c8 <context_new@plt>:
   112c8:	add	ip, pc, #0, 12
   112cc:	add	ip, ip, #106496	; 0x1a000
   112d0:	ldr	pc, [ip, #3440]!	; 0xd70

000112d4 <memcmp@plt>:
   112d4:	add	ip, pc, #0, 12
   112d8:	add	ip, ip, #106496	; 0x1a000
   112dc:	ldr	pc, [ip, #3432]!	; 0xd68

000112e0 <fputc_unlocked@plt>:
   112e0:	add	ip, pc, #0, 12
   112e4:	add	ip, ip, #106496	; 0x1a000
   112e8:	ldr	pc, [ip, #3424]!	; 0xd60

000112ec <context_role_set@plt>:
   112ec:	add	ip, pc, #0, 12
   112f0:	add	ip, ip, #106496	; 0x1a000
   112f4:	ldr	pc, [ip, #3416]!	; 0xd58

000112f8 <dcgettext@plt>:
   112f8:	add	ip, pc, #0, 12
   112fc:	add	ip, ip, #106496	; 0x1a000
   11300:	ldr	pc, [ip, #3408]!	; 0xd50

00011304 <context_type_set@plt>:
   11304:	add	ip, pc, #0, 12
   11308:	add	ip, ip, #106496	; 0x1a000
   1130c:	ldr	pc, [ip, #3400]!	; 0xd48

00011310 <realloc@plt>:
   11310:	add	ip, pc, #0, 12
   11314:	add	ip, ip, #106496	; 0x1a000
   11318:	ldr	pc, [ip, #3392]!	; 0xd40

0001131c <fgetfilecon@plt>:
   1131c:	add	ip, pc, #0, 12
   11320:	add	ip, ip, #106496	; 0x1a000
   11324:	ldr	pc, [ip, #3384]!	; 0xd38

00011328 <textdomain@plt>:
   11328:	add	ip, pc, #0, 12
   1132c:	add	ip, ip, #106496	; 0x1a000
   11330:	ldr	pc, [ip, #3376]!	; 0xd30

00011334 <chdir@plt>:
   11334:	add	ip, pc, #0, 12
   11338:	add	ip, ip, #106496	; 0x1a000
   1133c:	ldr	pc, [ip, #3368]!	; 0xd28

00011340 <__fxstatat64@plt>:
   11340:	add	ip, pc, #0, 12
   11344:	add	ip, ip, #106496	; 0x1a000
   11348:	ldr	pc, [ip, #3360]!	; 0xd20

0001134c <iswprint@plt>:
   1134c:	add	ip, pc, #0, 12
   11350:	add	ip, ip, #106496	; 0x1a000
   11354:	ldr	pc, [ip, #3352]!	; 0xd18

00011358 <__fxstat64@plt>:
   11358:	add	ip, pc, #0, 12
   1135c:	add	ip, ip, #106496	; 0x1a000
   11360:	ldr	pc, [ip, #3344]!	; 0xd10

00011364 <fwrite@plt>:
   11364:	add	ip, pc, #0, 12
   11368:	add	ip, ip, #106496	; 0x1a000
   1136c:	ldr	pc, [ip, #3336]!	; 0xd08

00011370 <lseek64@plt>:
   11370:	add	ip, pc, #0, 12
   11374:	add	ip, ip, #106496	; 0x1a000
   11378:	ldr	pc, [ip, #3328]!	; 0xd00

0001137c <__ctype_get_mb_cur_max@plt>:
   1137c:	add	ip, pc, #0, 12
   11380:	add	ip, ip, #106496	; 0x1a000
   11384:	ldr	pc, [ip, #3320]!	; 0xcf8

00011388 <strcpy@plt>:
   11388:	add	ip, pc, #0, 12
   1138c:	add	ip, ip, #106496	; 0x1a000
   11390:	ldr	pc, [ip, #3312]!	; 0xcf0

00011394 <__fpending@plt>:
   11394:	add	ip, pc, #0, 12
   11398:	add	ip, ip, #106496	; 0x1a000
   1139c:	ldr	pc, [ip, #3304]!	; 0xce8

000113a0 <mbrtowc@plt>:
   113a0:	add	ip, pc, #0, 12
   113a4:	add	ip, ip, #106496	; 0x1a000
   113a8:	ldr	pc, [ip, #3296]!	; 0xce0

000113ac <error@plt>:
   113ac:	add	ip, pc, #0, 12
   113b0:	add	ip, ip, #106496	; 0x1a000
   113b4:	ldr	pc, [ip, #3288]!	; 0xcd8

000113b8 <security_check_context@plt>:
   113b8:	add	ip, pc, #0, 12
   113bc:	add	ip, ip, #106496	; 0x1a000
   113c0:	ldr	pc, [ip, #3280]!	; 0xcd0

000113c4 <open64@plt>:
   113c4:	add	ip, pc, #0, 12
   113c8:	add	ip, ip, #106496	; 0x1a000
   113cc:	ldr	pc, [ip, #3272]!	; 0xcc8

000113d0 <lgetfilecon@plt>:
   113d0:	add	ip, pc, #0, 12
   113d4:	add	ip, ip, #106496	; 0x1a000
   113d8:	ldr	pc, [ip, #3264]!	; 0xcc0

000113dc <malloc@plt>:
   113dc:	add	ip, pc, #0, 12
   113e0:	add	ip, ip, #106496	; 0x1a000
   113e4:	ldr	pc, [ip, #3256]!	; 0xcb8

000113e8 <__libc_start_main@plt>:
   113e8:	add	ip, pc, #0, 12
   113ec:	add	ip, ip, #106496	; 0x1a000
   113f0:	ldr	pc, [ip, #3248]!	; 0xcb0

000113f4 <__freading@plt>:
   113f4:	add	ip, pc, #0, 12
   113f8:	add	ip, ip, #106496	; 0x1a000
   113fc:	ldr	pc, [ip, #3240]!	; 0xca8

00011400 <__gmon_start__@plt>:
   11400:	add	ip, pc, #0, 12
   11404:	add	ip, ip, #106496	; 0x1a000
   11408:	ldr	pc, [ip, #3232]!	; 0xca0

0001140c <context_free@plt>:
   1140c:	add	ip, pc, #0, 12
   11410:	add	ip, ip, #106496	; 0x1a000
   11414:	ldr	pc, [ip, #3224]!	; 0xc98

00011418 <getopt_long@plt>:
   11418:	add	ip, pc, #0, 12
   1141c:	add	ip, ip, #106496	; 0x1a000
   11420:	ldr	pc, [ip, #3216]!	; 0xc90

00011424 <__ctype_b_loc@plt>:
   11424:	add	ip, pc, #0, 12
   11428:	add	ip, ip, #106496	; 0x1a000
   1142c:	ldr	pc, [ip, #3208]!	; 0xc88

00011430 <getcwd@plt>:
   11430:	add	ip, pc, #0, 12
   11434:	add	ip, ip, #106496	; 0x1a000
   11438:	ldr	pc, [ip, #3200]!	; 0xc80

0001143c <exit@plt>:
   1143c:	add	ip, pc, #0, 12
   11440:	add	ip, ip, #106496	; 0x1a000
   11444:	ldr	pc, [ip, #3192]!	; 0xc78

00011448 <context_user_set@plt>:
   11448:	add	ip, pc, #0, 12
   1144c:	add	ip, ip, #106496	; 0x1a000
   11450:	ldr	pc, [ip, #3184]!	; 0xc70

00011454 <getfilecon@plt>:
   11454:	add	ip, pc, #0, 12
   11458:	add	ip, ip, #106496	; 0x1a000
   1145c:	ldr	pc, [ip, #3176]!	; 0xc68

00011460 <strlen@plt>:
   11460:	add	ip, pc, #0, 12
   11464:	add	ip, ip, #106496	; 0x1a000
   11468:	ldr	pc, [ip, #3168]!	; 0xc60

0001146c <openat64@plt>:
   1146c:	add	ip, pc, #0, 12
   11470:	add	ip, ip, #106496	; 0x1a000
   11474:	ldr	pc, [ip, #3160]!	; 0xc58

00011478 <memrchr@plt>:
   11478:	add	ip, pc, #0, 12
   1147c:	add	ip, ip, #106496	; 0x1a000
   11480:	ldr	pc, [ip, #3152]!	; 0xc50

00011484 <__errno_location@plt>:
   11484:	add	ip, pc, #0, 12
   11488:	add	ip, ip, #106496	; 0x1a000
   1148c:	ldr	pc, [ip, #3144]!	; 0xc48

00011490 <__sprintf_chk@plt>:
   11490:	add	ip, pc, #0, 12
   11494:	add	ip, ip, #106496	; 0x1a000
   11498:	ldr	pc, [ip, #3136]!	; 0xc40

0001149c <__cxa_atexit@plt>:
   1149c:	add	ip, pc, #0, 12
   114a0:	add	ip, ip, #106496	; 0x1a000
   114a4:	ldr	pc, [ip, #3128]!	; 0xc38

000114a8 <memset@plt>:
   114a8:	add	ip, pc, #0, 12
   114ac:	add	ip, ip, #106496	; 0x1a000
   114b0:	ldr	pc, [ip, #3120]!	; 0xc30

000114b4 <__printf_chk@plt>:
   114b4:	add	ip, pc, #0, 12
   114b8:	add	ip, ip, #106496	; 0x1a000
   114bc:	ldr	pc, [ip, #3112]!	; 0xc28

000114c0 <fileno@plt>:
   114c0:	add	ip, pc, #0, 12
   114c4:	add	ip, ip, #106496	; 0x1a000
   114c8:	ldr	pc, [ip, #3104]!	; 0xc20

000114cc <__fprintf_chk@plt>:
   114cc:	add	ip, pc, #0, 12
   114d0:	add	ip, ip, #106496	; 0x1a000
   114d4:	ldr	pc, [ip, #3096]!	; 0xc18

000114d8 <memchr@plt>:
   114d8:	add	ip, pc, #0, 12
   114dc:	add	ip, ip, #106496	; 0x1a000
   114e0:	ldr	pc, [ip, #3088]!	; 0xc10

000114e4 <setfilecon@plt>:
   114e4:	add	ip, pc, #0, 12
   114e8:	add	ip, ip, #106496	; 0x1a000
   114ec:	ldr	pc, [ip, #3080]!	; 0xc08

000114f0 <access@plt>:
   114f0:	add	ip, pc, #0, 12
   114f4:	add	ip, ip, #106496	; 0x1a000
   114f8:	ldr	pc, [ip, #3072]!	; 0xc00

000114fc <fclose@plt>:
   114fc:	add	ip, pc, #0, 12
   11500:	add	ip, ip, #106496	; 0x1a000
   11504:	ldr	pc, [ip, #3064]!	; 0xbf8

00011508 <fseeko64@plt>:
   11508:	add	ip, pc, #0, 12
   1150c:	add	ip, ip, #106496	; 0x1a000
   11510:	ldr	pc, [ip, #3056]!	; 0xbf0

00011514 <fcntl64@plt>:
   11514:	add	ip, pc, #0, 12
   11518:	add	ip, ip, #106496	; 0x1a000
   1151c:	ldr	pc, [ip, #3048]!	; 0xbe8

00011520 <setlocale@plt>:
   11520:	add	ip, pc, #0, 12
   11524:	add	ip, ip, #106496	; 0x1a000
   11528:	ldr	pc, [ip, #3040]!	; 0xbe0

0001152c <strrchr@plt>:
   1152c:	add	ip, pc, #0, 12
   11530:	add	ip, ip, #106496	; 0x1a000
   11534:	ldr	pc, [ip, #3032]!	; 0xbd8

00011538 <nl_langinfo@plt>:
   11538:	add	ip, pc, #0, 12
   1153c:	add	ip, ip, #106496	; 0x1a000
   11540:	ldr	pc, [ip, #3024]!	; 0xbd0

00011544 <readdir64@plt>:
   11544:	add	ip, pc, #0, 12
   11548:	add	ip, ip, #106496	; 0x1a000
   1154c:	ldr	pc, [ip, #3016]!	; 0xbc8

00011550 <fdopendir@plt>:
   11550:	add	ip, pc, #0, 12
   11554:	add	ip, ip, #106496	; 0x1a000
   11558:	ldr	pc, [ip, #3008]!	; 0xbc0

0001155c <dirfd@plt>:
   1155c:	add	ip, pc, #0, 12
   11560:	add	ip, ip, #106496	; 0x1a000
   11564:	ldr	pc, [ip, #3000]!	; 0xbb8

00011568 <fchdir@plt>:
   11568:	add	ip, pc, #0, 12
   1156c:	add	ip, ip, #106496	; 0x1a000
   11570:	ldr	pc, [ip, #2992]!	; 0xbb0

00011574 <qsort@plt>:
   11574:	add	ip, pc, #0, 12
   11578:	add	ip, ip, #106496	; 0x1a000
   1157c:	ldr	pc, [ip, #2984]!	; 0xba8

00011580 <freecon@plt>:
   11580:	add	ip, pc, #0, 12
   11584:	add	ip, ip, #106496	; 0x1a000
   11588:	ldr	pc, [ip, #2976]!	; 0xba0

0001158c <bindtextdomain@plt>:
   1158c:	add	ip, pc, #0, 12
   11590:	add	ip, ip, #106496	; 0x1a000
   11594:	ldr	pc, [ip, #2968]!	; 0xb98

00011598 <context_range_set@plt>:
   11598:	add	ip, pc, #0, 12
   1159c:	add	ip, ip, #106496	; 0x1a000
   115a0:	ldr	pc, [ip, #2960]!	; 0xb90

000115a4 <context_str@plt>:
   115a4:	add	ip, pc, #0, 12
   115a8:	add	ip, ip, #106496	; 0x1a000
   115ac:	ldr	pc, [ip, #2952]!	; 0xb88

000115b0 <__xstat64@plt>:
   115b0:	add	ip, pc, #0, 12
   115b4:	add	ip, ip, #106496	; 0x1a000
   115b8:	ldr	pc, [ip, #2944]!	; 0xb80

000115bc <strncmp@plt>:
   115bc:	add	ip, pc, #0, 12
   115c0:	add	ip, ip, #106496	; 0x1a000
   115c4:	ldr	pc, [ip, #2936]!	; 0xb78

000115c8 <abort@plt>:
   115c8:	add	ip, pc, #0, 12
   115cc:	add	ip, ip, #106496	; 0x1a000
   115d0:	ldr	pc, [ip, #2928]!	; 0xb70

000115d4 <close@plt>:
   115d4:	add	ip, pc, #0, 12
   115d8:	add	ip, ip, #106496	; 0x1a000
   115dc:	ldr	pc, [ip, #2920]!	; 0xb68

000115e0 <__lxstat64@plt>:
   115e0:	add	ip, pc, #0, 12
   115e4:	add	ip, ip, #106496	; 0x1a000
   115e8:	ldr	pc, [ip, #2912]!	; 0xb60

000115ec <closedir@plt>:
   115ec:	add	ip, pc, #0, 12
   115f0:	add	ip, ip, #106496	; 0x1a000
   115f4:	ldr	pc, [ip, #2904]!	; 0xb58

000115f8 <strspn@plt>:
   115f8:	add	ip, pc, #0, 12
   115fc:	add	ip, ip, #106496	; 0x1a000
   11600:	ldr	pc, [ip, #2896]!	; 0xb50

00011604 <__assert_fail@plt>:
   11604:	add	ip, pc, #0, 12
   11608:	add	ip, ip, #106496	; 0x1a000
   1160c:	ldr	pc, [ip, #2888]!	; 0xb48

Disassembly of section .text:

00011610 <.text>:
   11610:	mov	fp, #0
   11614:	mov	lr, #0
   11618:	pop	{r1}		; (ldr r1, [sp], #4)
   1161c:	mov	r2, sp
   11620:	push	{r2}		; (str r2, [sp, #-4]!)
   11624:	push	{r0}		; (str r0, [sp, #-4]!)
   11628:	ldr	ip, [pc, #16]	; 11640 <__assert_fail@plt+0x3c>
   1162c:	push	{ip}		; (str ip, [sp, #-4]!)
   11630:	ldr	r0, [pc, #12]	; 11644 <__assert_fail@plt+0x40>
   11634:	ldr	r3, [pc, #12]	; 11648 <__assert_fail@plt+0x44>
   11638:	bl	113e8 <__libc_start_main@plt>
   1163c:	bl	115c8 <abort@plt>
   11640:	andeq	sl, r1, r0, ror #1
   11644:	andeq	r1, r1, ip, lsr #22
   11648:	andeq	sl, r1, r0, lsl #1
   1164c:	ldr	r3, [pc, #20]	; 11668 <__assert_fail@plt+0x64>
   11650:	ldr	r2, [pc, #20]	; 1166c <__assert_fail@plt+0x68>
   11654:	add	r3, pc, r3
   11658:	ldr	r2, [r3, r2]
   1165c:	cmp	r2, #0
   11660:	bxeq	lr
   11664:	b	11400 <__gmon_start__@plt>
   11668:	andeq	sl, r1, r4, lsr #19
   1166c:	andeq	r0, r0, r8, asr r1
   11670:	ldr	r3, [pc, #28]	; 11694 <__assert_fail@plt+0x90>
   11674:	ldr	r0, [pc, #28]	; 11698 <__assert_fail@plt+0x94>
   11678:	sub	r3, r3, r0
   1167c:	cmp	r3, #6
   11680:	bxls	lr
   11684:	ldr	r3, [pc, #16]	; 1169c <__assert_fail@plt+0x98>
   11688:	cmp	r3, #0
   1168c:	bxeq	lr
   11690:	bx	r3
   11694:	andeq	ip, r2, pc, lsr #3
   11698:	andeq	ip, r2, ip, lsr #3
   1169c:	andeq	r0, r0, r0
   116a0:	ldr	r1, [pc, #36]	; 116cc <__assert_fail@plt+0xc8>
   116a4:	ldr	r0, [pc, #36]	; 116d0 <__assert_fail@plt+0xcc>
   116a8:	sub	r1, r1, r0
   116ac:	asr	r1, r1, #2
   116b0:	add	r1, r1, r1, lsr #31
   116b4:	asrs	r1, r1, #1
   116b8:	bxeq	lr
   116bc:	ldr	r3, [pc, #16]	; 116d4 <__assert_fail@plt+0xd0>
   116c0:	cmp	r3, #0
   116c4:	bxeq	lr
   116c8:	bx	r3
   116cc:	andeq	ip, r2, ip, lsr #3
   116d0:	andeq	ip, r2, ip, lsr #3
   116d4:	andeq	r0, r0, r0
   116d8:	push	{r4, lr}
   116dc:	ldr	r4, [pc, #24]	; 116fc <__assert_fail@plt+0xf8>
   116e0:	ldrb	r3, [r4]
   116e4:	cmp	r3, #0
   116e8:	popne	{r4, pc}
   116ec:	bl	11670 <__assert_fail@plt+0x6c>
   116f0:	mov	r3, #1
   116f4:	strb	r3, [r4]
   116f8:	pop	{r4, pc}
   116fc:	andeq	ip, r2, ip, asr #3
   11700:	ldr	r0, [pc, #40]	; 11730 <__assert_fail@plt+0x12c>
   11704:	ldr	r3, [r0]
   11708:	cmp	r3, #0
   1170c:	bne	11714 <__assert_fail@plt+0x110>
   11710:	b	116a0 <__assert_fail@plt+0x9c>
   11714:	ldr	r3, [pc, #24]	; 11734 <__assert_fail@plt+0x130>
   11718:	cmp	r3, #0
   1171c:	beq	11710 <__assert_fail@plt+0x10c>
   11720:	push	{r4, lr}
   11724:	blx	r3
   11728:	pop	{r4, lr}
   1172c:	b	116a0 <__assert_fail@plt+0x9c>
   11730:	andeq	fp, r2, ip, lsl #30
   11734:	andeq	r0, r0, r0
   11738:	push	{lr}		; (str lr, [sp, #-4]!)
   1173c:	sub	sp, sp, #68	; 0x44
   11740:	subs	r6, r0, #0
   11744:	beq	11780 <__assert_fail@plt+0x17c>
   11748:	ldr	r3, [pc, #880]	; 11ac0 <__assert_fail@plt+0x4bc>
   1174c:	ldr	r4, [r3]
   11750:	mov	r2, #5
   11754:	ldr	r1, [pc, #872]	; 11ac4 <__assert_fail@plt+0x4c0>
   11758:	mov	r0, #0
   1175c:	bl	112f8 <dcgettext@plt>
   11760:	ldr	r3, [pc, #864]	; 11ac8 <__assert_fail@plt+0x4c4>
   11764:	ldr	r3, [r3]
   11768:	mov	r2, r0
   1176c:	mov	r1, #1
   11770:	mov	r0, r4
   11774:	bl	114cc <__fprintf_chk@plt>
   11778:	mov	r0, r6
   1177c:	bl	1143c <exit@plt>
   11780:	mov	r2, #5
   11784:	ldr	r1, [pc, #832]	; 11acc <__assert_fail@plt+0x4c8>
   11788:	mov	r0, #0
   1178c:	bl	112f8 <dcgettext@plt>
   11790:	ldr	r3, [pc, #816]	; 11ac8 <__assert_fail@plt+0x4c4>
   11794:	ldr	r2, [r3]
   11798:	str	r2, [sp]
   1179c:	mov	r3, r2
   117a0:	mov	r1, r0
   117a4:	mov	r0, #1
   117a8:	bl	114b4 <__printf_chk@plt>
   117ac:	mov	r2, #5
   117b0:	ldr	r1, [pc, #792]	; 11ad0 <__assert_fail@plt+0x4cc>
   117b4:	mov	r0, #0
   117b8:	bl	112f8 <dcgettext@plt>
   117bc:	ldr	r4, [pc, #784]	; 11ad4 <__assert_fail@plt+0x4d0>
   117c0:	ldr	r1, [r4]
   117c4:	bl	11244 <fputs_unlocked@plt>
   117c8:	mov	r2, #5
   117cc:	ldr	r1, [pc, #772]	; 11ad8 <__assert_fail@plt+0x4d4>
   117d0:	mov	r0, #0
   117d4:	bl	112f8 <dcgettext@plt>
   117d8:	ldr	r1, [r4]
   117dc:	bl	11244 <fputs_unlocked@plt>
   117e0:	mov	r2, #5
   117e4:	ldr	r1, [pc, #752]	; 11adc <__assert_fail@plt+0x4d8>
   117e8:	mov	r0, #0
   117ec:	bl	112f8 <dcgettext@plt>
   117f0:	ldr	r1, [r4]
   117f4:	bl	11244 <fputs_unlocked@plt>
   117f8:	mov	r2, #5
   117fc:	ldr	r1, [pc, #732]	; 11ae0 <__assert_fail@plt+0x4dc>
   11800:	mov	r0, #0
   11804:	bl	112f8 <dcgettext@plt>
   11808:	ldr	r1, [r4]
   1180c:	bl	11244 <fputs_unlocked@plt>
   11810:	mov	r2, #5
   11814:	ldr	r1, [pc, #712]	; 11ae4 <__assert_fail@plt+0x4e0>
   11818:	mov	r0, #0
   1181c:	bl	112f8 <dcgettext@plt>
   11820:	ldr	r1, [r4]
   11824:	bl	11244 <fputs_unlocked@plt>
   11828:	mov	r2, #5
   1182c:	ldr	r1, [pc, #692]	; 11ae8 <__assert_fail@plt+0x4e4>
   11830:	mov	r0, #0
   11834:	bl	112f8 <dcgettext@plt>
   11838:	ldr	r1, [r4]
   1183c:	bl	11244 <fputs_unlocked@plt>
   11840:	mov	r2, #5
   11844:	ldr	r1, [pc, #672]	; 11aec <__assert_fail@plt+0x4e8>
   11848:	mov	r0, #0
   1184c:	bl	112f8 <dcgettext@plt>
   11850:	ldr	r1, [r4]
   11854:	bl	11244 <fputs_unlocked@plt>
   11858:	mov	r2, #5
   1185c:	ldr	r1, [pc, #652]	; 11af0 <__assert_fail@plt+0x4ec>
   11860:	mov	r0, #0
   11864:	bl	112f8 <dcgettext@plt>
   11868:	ldr	r1, [r4]
   1186c:	bl	11244 <fputs_unlocked@plt>
   11870:	mov	r2, #5
   11874:	ldr	r1, [pc, #632]	; 11af4 <__assert_fail@plt+0x4f0>
   11878:	mov	r0, #0
   1187c:	bl	112f8 <dcgettext@plt>
   11880:	ldr	r1, [r4]
   11884:	bl	11244 <fputs_unlocked@plt>
   11888:	mov	r2, #5
   1188c:	ldr	r1, [pc, #612]	; 11af8 <__assert_fail@plt+0x4f4>
   11890:	mov	r0, #0
   11894:	bl	112f8 <dcgettext@plt>
   11898:	ldr	r1, [r4]
   1189c:	bl	11244 <fputs_unlocked@plt>
   118a0:	mov	r2, #5
   118a4:	ldr	r1, [pc, #592]	; 11afc <__assert_fail@plt+0x4f8>
   118a8:	mov	r0, #0
   118ac:	bl	112f8 <dcgettext@plt>
   118b0:	ldr	r1, [r4]
   118b4:	bl	11244 <fputs_unlocked@plt>
   118b8:	add	ip, sp, #8
   118bc:	ldr	lr, [pc, #572]	; 11b00 <__assert_fail@plt+0x4fc>
   118c0:	ldm	lr!, {r0, r1, r2, r3}
   118c4:	stmia	ip!, {r0, r1, r2, r3}
   118c8:	ldm	lr!, {r0, r1, r2, r3}
   118cc:	stmia	ip!, {r0, r1, r2, r3}
   118d0:	ldm	lr!, {r0, r1, r2, r3}
   118d4:	stmia	ip!, {r0, r1, r2, r3}
   118d8:	ldm	lr, {r0, r1}
   118dc:	stm	ip, {r0, r1}
   118e0:	ldr	r1, [sp, #8]
   118e4:	cmp	r1, #0
   118e8:	addeq	r4, sp, #8
   118ec:	beq	11914 <__assert_fail@plt+0x310>
   118f0:	add	r4, sp, #8
   118f4:	ldr	r5, [pc, #520]	; 11b04 <__assert_fail@plt+0x500>
   118f8:	mov	r0, r5
   118fc:	bl	11268 <strcmp@plt>
   11900:	cmp	r0, #0
   11904:	beq	11914 <__assert_fail@plt+0x310>
   11908:	ldr	r1, [r4, #8]!
   1190c:	cmp	r1, #0
   11910:	bne	118f8 <__assert_fail@plt+0x2f4>
   11914:	ldr	r4, [r4, #4]
   11918:	cmp	r4, #0
   1191c:	beq	11a30 <__assert_fail@plt+0x42c>
   11920:	mov	r2, #5
   11924:	ldr	r1, [pc, #476]	; 11b08 <__assert_fail@plt+0x504>
   11928:	mov	r0, #0
   1192c:	bl	112f8 <dcgettext@plt>
   11930:	ldr	r3, [pc, #468]	; 11b0c <__assert_fail@plt+0x508>
   11934:	ldr	r2, [pc, #468]	; 11b10 <__assert_fail@plt+0x50c>
   11938:	mov	r1, r0
   1193c:	mov	r0, #1
   11940:	bl	114b4 <__printf_chk@plt>
   11944:	mov	r1, #0
   11948:	mov	r0, #5
   1194c:	bl	11520 <setlocale@plt>
   11950:	cmp	r0, #0
   11954:	beq	1196c <__assert_fail@plt+0x368>
   11958:	mov	r2, #3
   1195c:	ldr	r1, [pc, #432]	; 11b14 <__assert_fail@plt+0x510>
   11960:	bl	115bc <strncmp@plt>
   11964:	cmp	r0, #0
   11968:	bne	119cc <__assert_fail@plt+0x3c8>
   1196c:	mov	r2, #5
   11970:	ldr	r1, [pc, #416]	; 11b18 <__assert_fail@plt+0x514>
   11974:	mov	r0, #0
   11978:	bl	112f8 <dcgettext@plt>
   1197c:	ldr	r5, [pc, #384]	; 11b04 <__assert_fail@plt+0x500>
   11980:	mov	r3, r5
   11984:	ldr	r2, [pc, #384]	; 11b0c <__assert_fail@plt+0x508>
   11988:	mov	r1, r0
   1198c:	mov	r0, #1
   11990:	bl	114b4 <__printf_chk@plt>
   11994:	mov	r2, #5
   11998:	ldr	r1, [pc, #380]	; 11b1c <__assert_fail@plt+0x518>
   1199c:	mov	r0, #0
   119a0:	bl	112f8 <dcgettext@plt>
   119a4:	mov	r1, r0
   119a8:	ldr	r2, [pc, #368]	; 11b20 <__assert_fail@plt+0x51c>
   119ac:	ldr	r3, [pc, #368]	; 11b24 <__assert_fail@plt+0x520>
   119b0:	cmp	r4, r5
   119b4:	movne	r3, r2
   119b8:	mov	r2, r4
   119bc:	mov	r0, #1
   119c0:	bl	114b4 <__printf_chk@plt>
   119c4:	b	11778 <__assert_fail@plt+0x174>
   119c8:	ldr	r4, [pc, #308]	; 11b04 <__assert_fail@plt+0x500>
   119cc:	mov	r2, #5
   119d0:	ldr	r1, [pc, #336]	; 11b28 <__assert_fail@plt+0x524>
   119d4:	mov	r0, #0
   119d8:	bl	112f8 <dcgettext@plt>
   119dc:	ldr	r3, [pc, #240]	; 11ad4 <__assert_fail@plt+0x4d0>
   119e0:	ldr	r1, [r3]
   119e4:	bl	11244 <fputs_unlocked@plt>
   119e8:	b	1196c <__assert_fail@plt+0x368>
   119ec:	mov	r2, #5
   119f0:	ldr	r1, [pc, #288]	; 11b18 <__assert_fail@plt+0x514>
   119f4:	mov	r0, #0
   119f8:	bl	112f8 <dcgettext@plt>
   119fc:	ldr	r4, [pc, #256]	; 11b04 <__assert_fail@plt+0x500>
   11a00:	mov	r3, r4
   11a04:	ldr	r2, [pc, #256]	; 11b0c <__assert_fail@plt+0x508>
   11a08:	mov	r1, r0
   11a0c:	mov	r0, #1
   11a10:	bl	114b4 <__printf_chk@plt>
   11a14:	mov	r2, #5
   11a18:	ldr	r1, [pc, #252]	; 11b1c <__assert_fail@plt+0x518>
   11a1c:	mov	r0, #0
   11a20:	bl	112f8 <dcgettext@plt>
   11a24:	mov	r1, r0
   11a28:	ldr	r3, [pc, #244]	; 11b24 <__assert_fail@plt+0x520>
   11a2c:	b	119b8 <__assert_fail@plt+0x3b4>
   11a30:	mov	r2, #5
   11a34:	ldr	r1, [pc, #204]	; 11b08 <__assert_fail@plt+0x504>
   11a38:	mov	r0, #0
   11a3c:	bl	112f8 <dcgettext@plt>
   11a40:	ldr	r3, [pc, #196]	; 11b0c <__assert_fail@plt+0x508>
   11a44:	ldr	r2, [pc, #196]	; 11b10 <__assert_fail@plt+0x50c>
   11a48:	mov	r1, r0
   11a4c:	mov	r0, #1
   11a50:	bl	114b4 <__printf_chk@plt>
   11a54:	mov	r1, #0
   11a58:	mov	r0, #5
   11a5c:	bl	11520 <setlocale@plt>
   11a60:	cmp	r0, #0
   11a64:	beq	119ec <__assert_fail@plt+0x3e8>
   11a68:	mov	r2, #3
   11a6c:	ldr	r1, [pc, #160]	; 11b14 <__assert_fail@plt+0x510>
   11a70:	bl	115bc <strncmp@plt>
   11a74:	cmp	r0, #0
   11a78:	bne	119c8 <__assert_fail@plt+0x3c4>
   11a7c:	mov	r2, #5
   11a80:	ldr	r1, [pc, #144]	; 11b18 <__assert_fail@plt+0x514>
   11a84:	mov	r0, #0
   11a88:	bl	112f8 <dcgettext@plt>
   11a8c:	ldr	r4, [pc, #112]	; 11b04 <__assert_fail@plt+0x500>
   11a90:	mov	r3, r4
   11a94:	ldr	r2, [pc, #112]	; 11b0c <__assert_fail@plt+0x508>
   11a98:	mov	r1, r0
   11a9c:	mov	r0, #1
   11aa0:	bl	114b4 <__printf_chk@plt>
   11aa4:	mov	r2, #5
   11aa8:	ldr	r1, [pc, #108]	; 11b1c <__assert_fail@plt+0x518>
   11aac:	mov	r0, #0
   11ab0:	bl	112f8 <dcgettext@plt>
   11ab4:	mov	r1, r0
   11ab8:	ldr	r3, [pc, #100]	; 11b24 <__assert_fail@plt+0x520>
   11abc:	b	119b8 <__assert_fail@plt+0x3b4>
   11ac0:	andeq	ip, r2, r0, asr #3
   11ac4:	andeq	sl, r1, r8, lsr #4
   11ac8:	andeq	ip, r2, ip, lsl #4
   11acc:	andeq	sl, r1, r0, asr r2
   11ad0:	strdeq	sl, [r1], -r0
   11ad4:	andeq	ip, r2, r4, asr #3
   11ad8:	andeq	sl, r1, ip, ror r3
   11adc:	andeq	sl, r1, r8, asr #7
   11ae0:			; <UNDEFINED> instruction: 0x0001a4b0
   11ae4:	andeq	sl, r1, ip, asr #11
   11ae8:	andeq	sl, r1, ip, asr #12
   11aec:	andeq	sl, r1, r4, asr #13
   11af0:	andeq	sl, r1, ip, lsl #14
   11af4:	andeq	sl, r1, r4, asr r7
   11af8:	andeq	sl, r1, r8, lsr #18
   11afc:	andeq	sl, r1, r8, asr r9
   11b00:	andeq	sl, r1, r8, lsl #2
   11b04:	andeq	sl, r1, r0, lsr #4
   11b08:	muleq	r1, r0, r9
   11b0c:	andeq	sl, r1, r8, lsr #19
   11b10:	ldrdeq	sl, [r1], -r0
   11b14:	andeq	sl, r1, r0, ror #19
   11b18:	andeq	sl, r1, ip, lsr #20
   11b1c:	andeq	sl, r1, r8, asr #20
   11b20:	andeq	sl, r1, r4, lsr #18
   11b24:	andeq	sl, r1, r0, ror lr
   11b28:	andeq	sl, r1, r4, ror #19
   11b2c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11b30:	sub	sp, sp, #44	; 0x2c
   11b34:	str	r0, [sp, #16]
   11b38:	mov	r4, r1
   11b3c:	ldr	r0, [r1]
   11b40:	bl	15d68 <__assert_fail@plt+0x4764>
   11b44:	ldr	r1, [pc, #3468]	; 128d8 <__assert_fail@plt+0x12d4>
   11b48:	mov	r0, #6
   11b4c:	bl	11520 <setlocale@plt>
   11b50:	ldr	r6, [pc, #3460]	; 128dc <__assert_fail@plt+0x12d8>
   11b54:	ldr	r1, [pc, #3460]	; 128e0 <__assert_fail@plt+0x12dc>
   11b58:	mov	r0, r6
   11b5c:	bl	1158c <bindtextdomain@plt>
   11b60:	mov	r0, r6
   11b64:	bl	11328 <textdomain@plt>
   11b68:	ldr	r0, [pc, #3444]	; 128e4 <__assert_fail@plt+0x12e0>
   11b6c:	bl	1a0e4 <__assert_fail@plt+0x8ae0>
   11b70:	mov	r7, #0
   11b74:	str	r7, [sp, #20]
   11b78:	str	r7, [sp, #28]
   11b7c:	mvn	r3, #0
   11b80:	str	r3, [sp, #24]
   11b84:	mov	sl, #16
   11b88:	ldr	r6, [pc, #3416]	; 128e8 <__assert_fail@plt+0x12e4>
   11b8c:	ldr	r5, [pc, #3416]	; 128ec <__assert_fail@plt+0x12e8>
   11b90:	ldr	r8, [pc, #3416]	; 128f0 <__assert_fail@plt+0x12ec>
   11b94:	ldr	r9, [pc, #3416]	; 128f4 <__assert_fail@plt+0x12f0>
   11b98:	ldr	fp, [pc, #3416]	; 128f8 <__assert_fail@plt+0x12f4>
   11b9c:	mov	r3, #0
   11ba0:	str	r3, [sp]
   11ba4:	mov	r3, r6
   11ba8:	mov	r2, r5
   11bac:	mov	r1, r4
   11bb0:	ldr	r0, [sp, #16]
   11bb4:	bl	11418 <getopt_long@plt>
   11bb8:	cmn	r0, #1
   11bbc:	beq	11d64 <__assert_fail@plt+0x760>
   11bc0:	cmp	r0, #108	; 0x6c
   11bc4:	beq	11d04 <__assert_fail@plt+0x700>
   11bc8:	bgt	11c30 <__assert_fail@plt+0x62c>
   11bcc:	cmp	r0, #76	; 0x4c
   11bd0:	beq	11d5c <__assert_fail@plt+0x758>
   11bd4:	ble	11c00 <__assert_fail@plt+0x5fc>
   11bd8:	cmp	r0, #82	; 0x52
   11bdc:	beq	11cc4 <__assert_fail@plt+0x6c0>
   11be0:	ble	11c20 <__assert_fail@plt+0x61c>
   11be4:	cmp	r0, #102	; 0x66
   11be8:	beq	11b9c <__assert_fail@plt+0x598>
   11bec:	cmp	r0, #104	; 0x68
   11bf0:	bne	11c18 <__assert_fail@plt+0x614>
   11bf4:	mov	r3, #0
   11bf8:	str	r3, [sp, #24]
   11bfc:	b	11b9c <__assert_fail@plt+0x598>
   11c00:	cmn	r0, #2
   11c04:	beq	11d18 <__assert_fail@plt+0x714>
   11c08:	cmp	r0, #72	; 0x48
   11c0c:	beq	11ca4 <__assert_fail@plt+0x6a0>
   11c10:	cmn	r0, #3
   11c14:	beq	11d20 <__assert_fail@plt+0x71c>
   11c18:	mov	r0, #1
   11c1c:	bl	11738 <__assert_fail@plt+0x134>
   11c20:	cmp	r0, #80	; 0x50
   11c24:	bne	11c18 <__assert_fail@plt+0x614>
   11c28:	mov	sl, #16
   11c2c:	b	11b9c <__assert_fail@plt+0x598>
   11c30:	cmp	r0, #118	; 0x76
   11c34:	beq	11cd0 <__assert_fail@plt+0x6cc>
   11c38:	ble	11c68 <__assert_fail@plt+0x664>
   11c3c:	ldr	r3, [pc, #3256]	; 128fc <__assert_fail@plt+0x12f8>
   11c40:	cmp	r0, r3
   11c44:	beq	11cac <__assert_fail@plt+0x6a8>
   11c48:	ble	11c90 <__assert_fail@plt+0x68c>
   11c4c:	cmp	r0, fp
   11c50:	beq	11cb8 <__assert_fail@plt+0x6b4>
   11c54:	ldr	r3, [pc, #3236]	; 12900 <__assert_fail@plt+0x12fc>
   11c58:	cmp	r0, r3
   11c5c:	bne	11c18 <__assert_fail@plt+0x614>
   11c60:	ldr	r7, [r9]
   11c64:	b	11b9c <__assert_fail@plt+0x598>
   11c68:	cmp	r0, #116	; 0x74
   11c6c:	beq	11cf0 <__assert_fail@plt+0x6ec>
   11c70:	bgt	11cdc <__assert_fail@plt+0x6d8>
   11c74:	cmp	r0, #114	; 0x72
   11c78:	bne	11c18 <__assert_fail@plt+0x614>
   11c7c:	ldr	r3, [r9]
   11c80:	str	r3, [r8, #8]
   11c84:	mov	r3, #1
   11c88:	str	r3, [sp, #20]
   11c8c:	b	11b9c <__assert_fail@plt+0x598>
   11c90:	cmp	r0, #256	; 0x100
   11c94:	bne	11c18 <__assert_fail@plt+0x614>
   11c98:	mov	r3, #1
   11c9c:	str	r3, [sp, #24]
   11ca0:	b	11b9c <__assert_fail@plt+0x598>
   11ca4:	mov	sl, #17
   11ca8:	b	11b9c <__assert_fail@plt+0x598>
   11cac:	mov	r3, #0
   11cb0:	str	r3, [sp, #28]
   11cb4:	b	11b9c <__assert_fail@plt+0x598>
   11cb8:	mov	r3, #1
   11cbc:	str	r3, [sp, #28]
   11cc0:	b	11b9c <__assert_fail@plt+0x598>
   11cc4:	mov	r3, #1
   11cc8:	strb	r3, [r8]
   11ccc:	b	11b9c <__assert_fail@plt+0x598>
   11cd0:	mov	r3, #1
   11cd4:	strb	r3, [r8, #1]
   11cd8:	b	11b9c <__assert_fail@plt+0x598>
   11cdc:	ldr	r3, [r9]
   11ce0:	str	r3, [r8, #4]
   11ce4:	mov	r3, #1
   11ce8:	str	r3, [sp, #20]
   11cec:	b	11b9c <__assert_fail@plt+0x598>
   11cf0:	ldr	r3, [r9]
   11cf4:	str	r3, [r8, #12]
   11cf8:	mov	r3, #1
   11cfc:	str	r3, [sp, #20]
   11d00:	b	11b9c <__assert_fail@plt+0x598>
   11d04:	ldr	r3, [r9]
   11d08:	str	r3, [r8, #16]
   11d0c:	mov	r3, #1
   11d10:	str	r3, [sp, #20]
   11d14:	b	11b9c <__assert_fail@plt+0x598>
   11d18:	mov	r0, #0
   11d1c:	bl	11738 <__assert_fail@plt+0x134>
   11d20:	mov	r4, #0
   11d24:	str	r4, [sp, #8]
   11d28:	ldr	r3, [pc, #3028]	; 12904 <__assert_fail@plt+0x1300>
   11d2c:	str	r3, [sp, #4]
   11d30:	ldr	r3, [pc, #3024]	; 12908 <__assert_fail@plt+0x1304>
   11d34:	str	r3, [sp]
   11d38:	ldr	r3, [pc, #3020]	; 1290c <__assert_fail@plt+0x1308>
   11d3c:	ldr	r3, [r3]
   11d40:	ldr	r2, [pc, #3016]	; 12910 <__assert_fail@plt+0x130c>
   11d44:	ldr	r1, [pc, #3016]	; 12914 <__assert_fail@plt+0x1310>
   11d48:	ldr	r0, [pc, #3016]	; 12918 <__assert_fail@plt+0x1314>
   11d4c:	ldr	r0, [r0]
   11d50:	bl	1859c <__assert_fail@plt+0x6f98>
   11d54:	mov	r0, r4
   11d58:	bl	1143c <exit@plt>
   11d5c:	mov	sl, #2
   11d60:	b	11b9c <__assert_fail@plt+0x598>
   11d64:	ldr	r3, [pc, #2948]	; 128f0 <__assert_fail@plt+0x12ec>
   11d68:	ldrb	r3, [r3]
   11d6c:	cmp	r3, #0
   11d70:	beq	11dec <__assert_fail@plt+0x7e8>
   11d74:	cmp	sl, #16
   11d78:	beq	11db4 <__assert_fail@plt+0x7b0>
   11d7c:	ldr	r3, [sp, #24]
   11d80:	cmp	r3, #0
   11d84:	movne	r2, #1
   11d88:	ldrne	r3, [pc, #2912]	; 128f0 <__assert_fail@plt+0x12ec>
   11d8c:	strbne	r2, [r3, #20]
   11d90:	bne	11e04 <__assert_fail@plt+0x800>
   11d94:	mov	r2, #5
   11d98:	ldr	r1, [pc, #2940]	; 1291c <__assert_fail@plt+0x1318>
   11d9c:	mov	r0, #0
   11da0:	bl	112f8 <dcgettext@plt>
   11da4:	mov	r2, r0
   11da8:	mov	r1, #0
   11dac:	mov	r0, #1
   11db0:	bl	113ac <error@plt>
   11db4:	ldr	r3, [sp, #24]
   11db8:	cmp	r3, #1
   11dbc:	movne	r2, #0
   11dc0:	ldrne	r3, [pc, #2856]	; 128f0 <__assert_fail@plt+0x12ec>
   11dc4:	strbne	r2, [r3, #20]
   11dc8:	bne	11e04 <__assert_fail@plt+0x800>
   11dcc:	mov	r2, #5
   11dd0:	ldr	r1, [pc, #2888]	; 12920 <__assert_fail@plt+0x131c>
   11dd4:	mov	r0, #0
   11dd8:	bl	112f8 <dcgettext@plt>
   11ddc:	mov	r2, r0
   11de0:	mov	r1, #0
   11de4:	mov	r0, #1
   11de8:	bl	113ac <error@plt>
   11dec:	ldr	r3, [sp, #24]
   11df0:	adds	r3, r3, #0
   11df4:	movne	r3, #1
   11df8:	ldr	r2, [pc, #2800]	; 128f0 <__assert_fail@plt+0x12ec>
   11dfc:	strb	r3, [r2, #20]
   11e00:	mov	sl, #16
   11e04:	ldr	r3, [pc, #2840]	; 12924 <__assert_fail@plt+0x1320>
   11e08:	ldr	r2, [r3]
   11e0c:	ldr	r3, [sp, #16]
   11e10:	sub	r1, r3, r2
   11e14:	ldr	r3, [sp, #20]
   11e18:	cmp	r7, #0
   11e1c:	orrne	r3, r3, #1
   11e20:	cmp	r3, #0
   11e24:	movne	r3, #1
   11e28:	moveq	r3, #2
   11e2c:	cmp	r3, r1
   11e30:	bgt	11eb8 <__assert_fail@plt+0x8b4>
   11e34:	cmp	r7, #0
   11e38:	beq	11f64 <__assert_fail@plt+0x960>
   11e3c:	add	r1, sp, #40	; 0x28
   11e40:	mov	r3, #0
   11e44:	str	r3, [r1, #-4]!
   11e48:	mov	r0, r7
   11e4c:	bl	1805c <__assert_fail@plt+0x6a58>
   11e50:	cmp	r0, #0
   11e54:	blt	11f28 <__assert_fail@plt+0x924>
   11e58:	ldr	r2, [sp, #36]	; 0x24
   11e5c:	ldr	r3, [pc, #2700]	; 128f0 <__assert_fail@plt+0x12ec>
   11e60:	str	r2, [r3, #24]
   11e64:	ldr	r3, [sp, #20]
   11e68:	cmp	r3, #0
   11e6c:	bne	11ff0 <__assert_fail@plt+0x9ec>
   11e70:	ldr	r3, [pc, #2680]	; 128f0 <__assert_fail@plt+0x12ec>
   11e74:	ldrb	r3, [r3]
   11e78:	ldr	r2, [sp, #28]
   11e7c:	tst	r2, r3
   11e80:	bne	12018 <__assert_fail@plt+0xa14>
   11e84:	mov	r2, #0
   11e88:	ldr	r3, [pc, #2656]	; 128f0 <__assert_fail@plt+0x12ec>
   11e8c:	str	r2, [r3, #48]	; 0x30
   11e90:	ldr	r3, [pc, #2700]	; 12924 <__assert_fail@plt+0x1320>
   11e94:	ldr	r0, [r3]
   11e98:	mov	r2, #0
   11e9c:	orr	r1, sl, #8
   11ea0:	add	r0, r4, r0, lsl #2
   11ea4:	bl	18c4c <__assert_fail@plt+0x7648>
   11ea8:	mov	fp, r0
   11eac:	mov	r9, #1
   11eb0:	ldr	r8, [pc, #2616]	; 128f0 <__assert_fail@plt+0x12ec>
   11eb4:	b	1229c <__assert_fail@plt+0xc98>
   11eb8:	ldr	r3, [sp, #16]
   11ebc:	cmp	r3, r2
   11ec0:	bgt	11eec <__assert_fail@plt+0x8e8>
   11ec4:	mov	r2, #5
   11ec8:	ldr	r1, [pc, #2648]	; 12928 <__assert_fail@plt+0x1324>
   11ecc:	mov	r0, #0
   11ed0:	bl	112f8 <dcgettext@plt>
   11ed4:	mov	r2, r0
   11ed8:	mov	r1, #0
   11edc:	mov	r0, r1
   11ee0:	bl	113ac <error@plt>
   11ee4:	mov	r0, #1
   11ee8:	bl	11738 <__assert_fail@plt+0x134>
   11eec:	mov	r2, #5
   11ef0:	ldr	r1, [pc, #2612]	; 1292c <__assert_fail@plt+0x1328>
   11ef4:	mov	r0, #0
   11ef8:	bl	112f8 <dcgettext@plt>
   11efc:	mov	r6, r0
   11f00:	ldr	r3, [sp, #16]
   11f04:	sub	r5, r3, #-1073741823	; 0xc0000001
   11f08:	ldr	r0, [r4, r5, lsl #2]
   11f0c:	bl	178b8 <__assert_fail@plt+0x62b4>
   11f10:	mov	r3, r0
   11f14:	mov	r2, r6
   11f18:	mov	r1, #0
   11f1c:	mov	r0, r1
   11f20:	bl	113ac <error@plt>
   11f24:	b	11ee4 <__assert_fail@plt+0x8e0>
   11f28:	bl	11484 <__errno_location@plt>
   11f2c:	ldr	r4, [r0]
   11f30:	mov	r2, #5
   11f34:	ldr	r1, [pc, #2548]	; 12930 <__assert_fail@plt+0x132c>
   11f38:	mov	r0, #0
   11f3c:	bl	112f8 <dcgettext@plt>
   11f40:	mov	r5, r0
   11f44:	mov	r1, r7
   11f48:	mov	r0, #4
   11f4c:	bl	17684 <__assert_fail@plt+0x6080>
   11f50:	mov	r3, r0
   11f54:	mov	r2, r5
   11f58:	mov	r1, r4
   11f5c:	mov	r0, #1
   11f60:	bl	113ac <error@plt>
   11f64:	ldr	r3, [sp, #20]
   11f68:	cmp	r3, #0
   11f6c:	movne	r2, #0
   11f70:	ldrne	r3, [pc, #2424]	; 128f0 <__assert_fail@plt+0x12ec>
   11f74:	strne	r2, [r3, #24]
   11f78:	bne	11e70 <__assert_fail@plt+0x86c>
   11f7c:	add	r1, r2, #1
   11f80:	ldr	r3, [pc, #2460]	; 12924 <__assert_fail@plt+0x1320>
   11f84:	str	r1, [r3]
   11f88:	ldr	r2, [r4, r2, lsl #2]
   11f8c:	ldr	r3, [pc, #2396]	; 128f0 <__assert_fail@plt+0x12ec>
   11f90:	str	r2, [r3, #24]
   11f94:	bl	1125c <is_selinux_enabled@plt>
   11f98:	cmp	r0, #0
   11f9c:	ble	11e70 <__assert_fail@plt+0x86c>
   11fa0:	ldr	r3, [pc, #2376]	; 128f0 <__assert_fail@plt+0x12ec>
   11fa4:	ldr	r0, [r3, #24]
   11fa8:	bl	113b8 <security_check_context@plt>
   11fac:	cmp	r0, #0
   11fb0:	bge	11e70 <__assert_fail@plt+0x86c>
   11fb4:	bl	11484 <__errno_location@plt>
   11fb8:	ldr	r4, [r0]
   11fbc:	mov	r2, #5
   11fc0:	ldr	r1, [pc, #2412]	; 12934 <__assert_fail@plt+0x1330>
   11fc4:	mov	r0, #0
   11fc8:	bl	112f8 <dcgettext@plt>
   11fcc:	mov	r5, r0
   11fd0:	ldr	r3, [pc, #2328]	; 128f0 <__assert_fail@plt+0x12ec>
   11fd4:	ldr	r0, [r3, #24]
   11fd8:	bl	178b8 <__assert_fail@plt+0x62b4>
   11fdc:	mov	r3, r0
   11fe0:	mov	r2, r5
   11fe4:	mov	r1, r4
   11fe8:	mov	r0, #1
   11fec:	bl	113ac <error@plt>
   11ff0:	mov	r2, #5
   11ff4:	ldr	r1, [pc, #2364]	; 12938 <__assert_fail@plt+0x1334>
   11ff8:	mov	r0, #0
   11ffc:	bl	112f8 <dcgettext@plt>
   12000:	mov	r2, r0
   12004:	mov	r1, #0
   12008:	mov	r0, r1
   1200c:	bl	113ac <error@plt>
   12010:	mov	r0, #1
   12014:	bl	11738 <__assert_fail@plt+0x134>
   12018:	ldr	r5, [pc, #2256]	; 128f0 <__assert_fail@plt+0x12ec>
   1201c:	add	r0, r5, #32
   12020:	bl	178cc <__assert_fail@plt+0x62c8>
   12024:	str	r0, [r5, #48]	; 0x30
   12028:	cmp	r0, #0
   1202c:	bne	11e90 <__assert_fail@plt+0x88c>
   12030:	bl	11484 <__errno_location@plt>
   12034:	ldr	r4, [r0]
   12038:	mov	r2, #5
   1203c:	ldr	r1, [pc, #2296]	; 1293c <__assert_fail@plt+0x1338>
   12040:	mov	r0, #0
   12044:	bl	112f8 <dcgettext@plt>
   12048:	mov	r5, r0
   1204c:	ldr	r1, [pc, #2284]	; 12940 <__assert_fail@plt+0x133c>
   12050:	mov	r0, #4
   12054:	bl	17684 <__assert_fail@plt+0x6080>
   12058:	mov	r3, r0
   1205c:	mov	r2, r5
   12060:	mov	r1, r4
   12064:	mov	r0, #1
   12068:	bl	113ac <error@plt>
   1206c:	bl	11484 <__errno_location@plt>
   12070:	mov	r4, r0
   12074:	ldr	r5, [r0]
   12078:	cmp	r5, #0
   1207c:	bne	1209c <__assert_fail@plt+0xa98>
   12080:	mov	r0, fp
   12084:	bl	14320 <__assert_fail@plt+0x2d1c>
   12088:	cmp	r0, #0
   1208c:	bne	128ac <__assert_fail@plt+0x12a8>
   12090:	eor	r0, r9, #1
   12094:	add	sp, sp, #44	; 0x2c
   12098:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1209c:	mov	r2, #5
   120a0:	ldr	r1, [pc, #2204]	; 12944 <__assert_fail@plt+0x1340>
   120a4:	mov	r0, #0
   120a8:	bl	112f8 <dcgettext@plt>
   120ac:	mov	r2, r0
   120b0:	mov	r1, r5
   120b4:	mov	r0, #0
   120b8:	bl	113ac <error@plt>
   120bc:	mov	r9, #0
   120c0:	b	12080 <__assert_fail@plt+0xa7c>
   120c4:	ldrb	r6, [r8]
   120c8:	cmp	r6, #0
   120cc:	beq	12340 <__assert_fail@plt+0xd3c>
   120d0:	ldr	ip, [r8, #48]	; 0x30
   120d4:	cmp	ip, #0
   120d8:	beq	12298 <__assert_fail@plt+0xc94>
   120dc:	ldrd	r0, [r5, #160]	; 0xa0
   120e0:	ldrd	r2, [ip]
   120e4:	cmp	r1, r3
   120e8:	cmpeq	r0, r2
   120ec:	bne	12298 <__assert_fail@plt+0xc94>
   120f0:	ldrd	r2, [r5, #64]	; 0x40
   120f4:	ldrd	r0, [ip, #8]
   120f8:	cmp	r3, r1
   120fc:	cmpeq	r2, r0
   12100:	bne	12298 <__assert_fail@plt+0xc94>
   12104:	ldr	r1, [pc, #2100]	; 12940 <__assert_fail@plt+0x133c>
   12108:	mov	r0, r4
   1210c:	bl	11268 <strcmp@plt>
   12110:	cmp	r0, #0
   12114:	bne	12188 <__assert_fail@plt+0xb84>
   12118:	mov	r2, #5
   1211c:	ldr	r1, [pc, #2084]	; 12948 <__assert_fail@plt+0x1344>
   12120:	bl	112f8 <dcgettext@plt>
   12124:	mov	r6, r0
   12128:	mov	r1, r4
   1212c:	mov	r0, #4
   12130:	bl	17684 <__assert_fail@plt+0x6080>
   12134:	mov	r3, r0
   12138:	mov	r2, r6
   1213c:	mov	r1, #0
   12140:	mov	r0, r1
   12144:	bl	113ac <error@plt>
   12148:	mov	r2, #5
   1214c:	ldr	r1, [pc, #2040]	; 1294c <__assert_fail@plt+0x1348>
   12150:	mov	r0, #0
   12154:	bl	112f8 <dcgettext@plt>
   12158:	mov	r2, r0
   1215c:	mov	r1, #0
   12160:	mov	r0, r1
   12164:	bl	113ac <error@plt>
   12168:	mov	r2, #4
   1216c:	mov	r1, r5
   12170:	mov	r0, fp
   12174:	bl	14af4 <__assert_fail@plt+0x34f0>
   12178:	mov	r0, fp
   1217c:	bl	14484 <__assert_fail@plt+0x2e80>
   12180:	mov	r6, #0
   12184:	b	12298 <__assert_fail@plt+0xc94>
   12188:	mov	r2, #5
   1218c:	ldr	r1, [pc, #1980]	; 12950 <__assert_fail@plt+0x134c>
   12190:	mov	r0, #0
   12194:	bl	112f8 <dcgettext@plt>
   12198:	mov	r6, r0
   1219c:	mov	r2, r4
   121a0:	mov	r1, #4
   121a4:	mov	r0, #0
   121a8:	bl	17618 <__assert_fail@plt+0x6014>
   121ac:	mov	r4, r0
   121b0:	ldr	r2, [pc, #1928]	; 12940 <__assert_fail@plt+0x133c>
   121b4:	mov	r1, #4
   121b8:	mov	r0, #1
   121bc:	bl	17618 <__assert_fail@plt+0x6014>
   121c0:	str	r0, [sp]
   121c4:	mov	r3, r4
   121c8:	mov	r2, r6
   121cc:	mov	r1, #0
   121d0:	mov	r0, r1
   121d4:	bl	113ac <error@plt>
   121d8:	b	12148 <__assert_fail@plt+0xb44>
   121dc:	ldrb	r3, [r8]
   121e0:	cmp	r3, #0
   121e4:	moveq	r6, #1
   121e8:	bne	12440 <__assert_fail@plt+0xe3c>
   121ec:	b	12298 <__assert_fail@plt+0xc94>
   121f0:	ldr	r3, [r5, #48]	; 0x30
   121f4:	cmp	r3, #0
   121f8:	bne	12208 <__assert_fail@plt+0xc04>
   121fc:	ldr	r3, [r5, #16]
   12200:	cmp	r3, #0
   12204:	beq	12244 <__assert_fail@plt+0xc40>
   12208:	ldr	r6, [r5, #32]
   1220c:	mov	r2, #5
   12210:	ldr	r1, [pc, #1852]	; 12954 <__assert_fail@plt+0x1350>
   12214:	mov	r0, #0
   12218:	bl	112f8 <dcgettext@plt>
   1221c:	mov	r7, r0
   12220:	mov	r1, r4
   12224:	mov	r0, #4
   12228:	bl	17684 <__assert_fail@plt+0x6080>
   1222c:	mov	r3, r0
   12230:	mov	r2, r7
   12234:	mov	r1, r6
   12238:	mov	r0, #0
   1223c:	bl	113ac <error@plt>
   12240:	b	12288 <__assert_fail@plt+0xc84>
   12244:	mov	r6, #1
   12248:	str	r6, [r5, #16]
   1224c:	mov	r2, r6
   12250:	mov	r1, r5
   12254:	mov	r0, fp
   12258:	bl	14af4 <__assert_fail@plt+0x34f0>
   1225c:	b	12298 <__assert_fail@plt+0xc94>
   12260:	ldr	r6, [r5, #32]
   12264:	mov	r2, r4
   12268:	mov	r1, #3
   1226c:	mov	r0, #0
   12270:	bl	17750 <__assert_fail@plt+0x614c>
   12274:	mov	r3, r0
   12278:	ldr	r2, [pc, #1752]	; 12958 <__assert_fail@plt+0x1354>
   1227c:	mov	r1, r6
   12280:	mov	r0, #0
   12284:	bl	113ac <error@plt>
   12288:	mov	r6, #0
   1228c:	ldrb	r3, [r8]
   12290:	cmp	r3, #0
   12294:	beq	12898 <__assert_fail@plt+0x1294>
   12298:	and	r9, r9, r6
   1229c:	mov	r0, fp
   122a0:	bl	14484 <__assert_fail@plt+0x2e80>
   122a4:	subs	r5, r0, #0
   122a8:	beq	1206c <__assert_fail@plt+0xa68>
   122ac:	ldr	r4, [r5, #28]
   122b0:	ldr	r7, [r5, #24]
   122b4:	ldrh	r2, [r5, #56]	; 0x38
   122b8:	sub	r3, r2, #1
   122bc:	cmp	r3, #9
   122c0:	ldrls	pc, [pc, r3, lsl #2]
   122c4:	b	12438 <__assert_fail@plt+0xe34>
   122c8:	andeq	r2, r1, r4, asr #1
   122cc:	andeq	r2, r1, ip, lsr #6
   122d0:	andeq	r2, r1, r8, lsr r4
   122d4:	strdeq	r2, [r1], -r0
   122d8:	andeq	r2, r1, r8, lsr r4
   122dc:	ldrdeq	r2, [r1], -ip
   122e0:	andeq	r2, r1, r0, ror #4
   122e4:	andeq	r2, r1, r8, lsr r4
   122e8:	andeq	r2, r1, r8, lsr r4
   122ec:	strdeq	r2, [r1], -r0
   122f0:	ldr	r6, [r5, #32]
   122f4:	mov	r2, #5
   122f8:	ldr	r1, [pc, #1628]	; 1295c <__assert_fail@plt+0x1358>
   122fc:	mov	r0, #0
   12300:	bl	112f8 <dcgettext@plt>
   12304:	mov	r7, r0
   12308:	mov	r1, r4
   1230c:	mov	r0, #4
   12310:	bl	17684 <__assert_fail@plt+0x6080>
   12314:	mov	r3, r0
   12318:	mov	r2, r7
   1231c:	mov	r1, r6
   12320:	mov	r0, #0
   12324:	bl	113ac <error@plt>
   12328:	b	12288 <__assert_fail@plt+0xc84>
   1232c:	mov	r1, r5
   12330:	mov	r0, fp
   12334:	bl	18c94 <__assert_fail@plt+0x7690>
   12338:	cmp	r0, #0
   1233c:	bne	123f8 <__assert_fail@plt+0xdf4>
   12340:	ldrb	r3, [r8, #1]
   12344:	cmp	r3, #0
   12348:	bne	12534 <__assert_fail@plt+0xf30>
   1234c:	ldr	r6, [fp, #32]
   12350:	mov	r3, #0
   12354:	str	r3, [sp, #36]	; 0x24
   12358:	ldr	r4, [r8, #24]
   1235c:	cmp	r4, r3
   12360:	movne	sl, #0
   12364:	beq	12568 <__assert_fail@plt+0xf64>
   12368:	ldrb	r3, [r8, #20]
   1236c:	cmp	r3, #0
   12370:	beq	12884 <__assert_fail@plt+0x1280>
   12374:	mov	r2, r4
   12378:	mov	r1, r7
   1237c:	mov	r0, r6
   12380:	bl	17c80 <__assert_fail@plt+0x667c>
   12384:	cmp	r0, #0
   12388:	beq	12650 <__assert_fail@plt+0x104c>
   1238c:	bl	11484 <__errno_location@plt>
   12390:	ldr	r6, [r0]
   12394:	mov	r2, #5
   12398:	ldr	r1, [pc, #1472]	; 12960 <__assert_fail@plt+0x135c>
   1239c:	mov	r0, #0
   123a0:	bl	112f8 <dcgettext@plt>
   123a4:	str	r0, [sp, #16]
   123a8:	mov	r2, r7
   123ac:	mov	r1, #4
   123b0:	mov	r0, #0
   123b4:	bl	17618 <__assert_fail@plt+0x6014>
   123b8:	mov	r7, r0
   123bc:	mov	r1, r4
   123c0:	mov	r0, #1
   123c4:	bl	178a8 <__assert_fail@plt+0x62a4>
   123c8:	str	r0, [sp]
   123cc:	mov	r3, r7
   123d0:	ldr	r2, [sp, #16]
   123d4:	mov	r1, r6
   123d8:	mov	r0, #0
   123dc:	bl	113ac <error@plt>
   123e0:	ldr	r3, [r8, #24]
   123e4:	cmp	r3, #0
   123e8:	moveq	r6, #1
   123ec:	beq	12664 <__assert_fail@plt+0x1060>
   123f0:	mov	r6, #0
   123f4:	b	1228c <__assert_fail@plt+0xc88>
   123f8:	mov	r2, #5
   123fc:	ldr	r1, [pc, #1376]	; 12964 <__assert_fail@plt+0x1360>
   12400:	mov	r0, #0
   12404:	bl	112f8 <dcgettext@plt>
   12408:	mov	r5, r0
   1240c:	mov	r2, r4
   12410:	mov	r1, #3
   12414:	mov	r0, #0
   12418:	bl	17750 <__assert_fail@plt+0x614c>
   1241c:	mov	r3, r0
   12420:	mov	r2, r5
   12424:	mov	r1, #0
   12428:	mov	r0, r1
   1242c:	bl	113ac <error@plt>
   12430:	mov	r6, #0
   12434:	b	12298 <__assert_fail@plt+0xc94>
   12438:	cmp	r2, #6
   1243c:	bne	12340 <__assert_fail@plt+0xd3c>
   12440:	ldr	ip, [r8, #48]	; 0x30
   12444:	cmp	ip, #0
   12448:	beq	12340 <__assert_fail@plt+0xd3c>
   1244c:	ldrd	r0, [r5, #160]	; 0xa0
   12450:	ldrd	r2, [ip]
   12454:	cmp	r1, r3
   12458:	cmpeq	r0, r2
   1245c:	bne	12340 <__assert_fail@plt+0xd3c>
   12460:	ldrd	r2, [r5, #64]	; 0x40
   12464:	ldrd	r0, [ip, #8]
   12468:	cmp	r3, r1
   1246c:	cmpeq	r2, r0
   12470:	bne	12340 <__assert_fail@plt+0xd3c>
   12474:	ldr	r1, [pc, #1220]	; 12940 <__assert_fail@plt+0x133c>
   12478:	mov	r0, r4
   1247c:	bl	11268 <strcmp@plt>
   12480:	cmp	r0, #0
   12484:	bne	124e0 <__assert_fail@plt+0xedc>
   12488:	mov	r2, #5
   1248c:	ldr	r1, [pc, #1204]	; 12948 <__assert_fail@plt+0x1344>
   12490:	bl	112f8 <dcgettext@plt>
   12494:	mov	r6, r0
   12498:	mov	r1, r4
   1249c:	mov	r0, #4
   124a0:	bl	17684 <__assert_fail@plt+0x6080>
   124a4:	mov	r3, r0
   124a8:	mov	r2, r6
   124ac:	mov	r1, #0
   124b0:	mov	r0, r1
   124b4:	bl	113ac <error@plt>
   124b8:	mov	r2, #5
   124bc:	ldr	r1, [pc, #1160]	; 1294c <__assert_fail@plt+0x1348>
   124c0:	mov	r0, #0
   124c4:	bl	112f8 <dcgettext@plt>
   124c8:	mov	r2, r0
   124cc:	mov	r1, #0
   124d0:	mov	r0, r1
   124d4:	bl	113ac <error@plt>
   124d8:	mov	r6, #0
   124dc:	b	1228c <__assert_fail@plt+0xc88>
   124e0:	mov	r2, #5
   124e4:	ldr	r1, [pc, #1124]	; 12950 <__assert_fail@plt+0x134c>
   124e8:	mov	r0, #0
   124ec:	bl	112f8 <dcgettext@plt>
   124f0:	mov	r6, r0
   124f4:	mov	r2, r4
   124f8:	mov	r1, #4
   124fc:	mov	r0, #0
   12500:	bl	17618 <__assert_fail@plt+0x6014>
   12504:	mov	r4, r0
   12508:	ldr	r2, [pc, #1072]	; 12940 <__assert_fail@plt+0x133c>
   1250c:	mov	r1, #4
   12510:	mov	r0, #1
   12514:	bl	17618 <__assert_fail@plt+0x6014>
   12518:	str	r0, [sp]
   1251c:	mov	r3, r4
   12520:	mov	r2, r6
   12524:	mov	r1, #0
   12528:	mov	r0, r1
   1252c:	bl	113ac <error@plt>
   12530:	b	124b8 <__assert_fail@plt+0xeb4>
   12534:	mov	r2, #5
   12538:	ldr	r1, [pc, #1064]	; 12968 <__assert_fail@plt+0x1364>
   1253c:	mov	r0, #0
   12540:	bl	112f8 <dcgettext@plt>
   12544:	mov	r6, r0
   12548:	mov	r1, r4
   1254c:	mov	r0, #4
   12550:	bl	17684 <__assert_fail@plt+0x6080>
   12554:	mov	r2, r0
   12558:	mov	r1, r6
   1255c:	mov	r0, #1
   12560:	bl	114b4 <__printf_chk@plt>
   12564:	b	1234c <__assert_fail@plt+0xd48>
   12568:	ldrb	r3, [r8, #20]
   1256c:	cmp	r3, #0
   12570:	beq	1267c <__assert_fail@plt+0x1078>
   12574:	add	r2, sp, #36	; 0x24
   12578:	mov	r1, r7
   1257c:	mov	r0, r6
   12580:	bl	17918 <__assert_fail@plt+0x6314>
   12584:	cmp	r0, #0
   12588:	blt	12690 <__assert_fail@plt+0x108c>
   1258c:	ldr	r4, [sp, #36]	; 0x24
   12590:	cmp	r4, #0
   12594:	beq	126dc <__assert_fail@plt+0x10d8>
   12598:	mov	r0, r4
   1259c:	bl	112c8 <context_new@plt>
   125a0:	subs	sl, r0, #0
   125a4:	beq	12714 <__assert_fail@plt+0x1110>
   125a8:	ldr	r1, [r8, #4]
   125ac:	cmp	r1, #0
   125b0:	moveq	r4, #1
   125b4:	beq	125cc <__assert_fail@plt+0xfc8>
   125b8:	mov	r0, sl
   125bc:	bl	11448 <context_user_set@plt>
   125c0:	cmp	r0, #0
   125c4:	moveq	r4, #1
   125c8:	bne	12750 <__assert_fail@plt+0x114c>
   125cc:	ldr	r1, [r8, #16]
   125d0:	cmp	r1, #0
   125d4:	beq	125e8 <__assert_fail@plt+0xfe4>
   125d8:	mov	r0, sl
   125dc:	bl	11598 <context_range_set@plt>
   125e0:	cmp	r0, #0
   125e4:	bne	12794 <__assert_fail@plt+0x1190>
   125e8:	ldr	r1, [r8, #8]
   125ec:	cmp	r1, #0
   125f0:	beq	12604 <__assert_fail@plt+0x1000>
   125f4:	mov	r0, sl
   125f8:	bl	112ec <context_role_set@plt>
   125fc:	cmp	r0, #0
   12600:	bne	127d8 <__assert_fail@plt+0x11d4>
   12604:	ldr	r1, [r8, #12]
   12608:	cmp	r1, #0
   1260c:	beq	12620 <__assert_fail@plt+0x101c>
   12610:	mov	r0, sl
   12614:	bl	11304 <context_type_set@plt>
   12618:	cmp	r0, #0
   1261c:	bne	12828 <__assert_fail@plt+0x1224>
   12620:	cmp	r4, #0
   12624:	beq	12864 <__assert_fail@plt+0x1260>
   12628:	mov	r0, sl
   1262c:	bl	115a4 <context_str@plt>
   12630:	mov	r4, r0
   12634:	ldr	r1, [sp, #36]	; 0x24
   12638:	cmp	r1, #0
   1263c:	beq	12368 <__assert_fail@plt+0xd64>
   12640:	mov	r0, r4
   12644:	bl	11268 <strcmp@plt>
   12648:	cmp	r0, #0
   1264c:	bne	12368 <__assert_fail@plt+0xd64>
   12650:	ldr	r3, [r8, #24]
   12654:	cmp	r3, #0
   12658:	movne	r6, #1
   1265c:	bne	1228c <__assert_fail@plt+0xc88>
   12660:	mov	r6, #0
   12664:	mov	r0, sl
   12668:	bl	1140c <context_free@plt>
   1266c:	ldr	r0, [sp, #36]	; 0x24
   12670:	bl	11580 <freecon@plt>
   12674:	eor	r6, r6, #1
   12678:	b	1228c <__assert_fail@plt+0xc88>
   1267c:	add	r2, sp, #36	; 0x24
   12680:	mov	r1, r7
   12684:	mov	r0, r6
   12688:	bl	17acc <__assert_fail@plt+0x64c8>
   1268c:	b	12584 <__assert_fail@plt+0xf80>
   12690:	bl	11484 <__errno_location@plt>
   12694:	ldr	r4, [r0]
   12698:	cmp	r4, #61	; 0x3d
   1269c:	beq	1258c <__assert_fail@plt+0xf88>
   126a0:	mov	r2, #5
   126a4:	ldr	r1, [pc, #644]	; 12930 <__assert_fail@plt+0x132c>
   126a8:	mov	r0, #0
   126ac:	bl	112f8 <dcgettext@plt>
   126b0:	mov	r6, r0
   126b4:	mov	r1, r7
   126b8:	mov	r0, #4
   126bc:	bl	17684 <__assert_fail@plt+0x6080>
   126c0:	mov	r3, r0
   126c4:	mov	r2, r6
   126c8:	mov	r1, r4
   126cc:	mov	r0, #0
   126d0:	bl	113ac <error@plt>
   126d4:	mov	r6, #0
   126d8:	b	1228c <__assert_fail@plt+0xc88>
   126dc:	mov	r2, #5
   126e0:	ldr	r1, [pc, #644]	; 1296c <__assert_fail@plt+0x1368>
   126e4:	mov	r0, #0
   126e8:	bl	112f8 <dcgettext@plt>
   126ec:	mov	r4, r0
   126f0:	mov	r1, r7
   126f4:	mov	r0, #4
   126f8:	bl	17684 <__assert_fail@plt+0x6080>
   126fc:	mov	r3, r0
   12700:	mov	r2, r4
   12704:	mov	r1, #0
   12708:	mov	r0, r1
   1270c:	bl	113ac <error@plt>
   12710:	b	126d4 <__assert_fail@plt+0x10d0>
   12714:	bl	11484 <__errno_location@plt>
   12718:	ldr	r6, [r0]
   1271c:	mov	r2, #5
   12720:	ldr	r1, [pc, #584]	; 12970 <__assert_fail@plt+0x136c>
   12724:	mov	r0, #0
   12728:	bl	112f8 <dcgettext@plt>
   1272c:	mov	r7, r0
   12730:	mov	r0, r4
   12734:	bl	178b8 <__assert_fail@plt+0x62b4>
   12738:	mov	r3, r0
   1273c:	mov	r2, r7
   12740:	mov	r1, r6
   12744:	mov	r0, #0
   12748:	bl	113ac <error@plt>
   1274c:	b	1287c <__assert_fail@plt+0x1278>
   12750:	bl	11484 <__errno_location@plt>
   12754:	ldr	r4, [r0]
   12758:	mov	r2, #5
   1275c:	ldr	r1, [pc, #528]	; 12974 <__assert_fail@plt+0x1370>
   12760:	mov	r0, #0
   12764:	bl	112f8 <dcgettext@plt>
   12768:	str	r0, [sp, #16]
   1276c:	ldr	r0, [r8, #4]
   12770:	bl	178b8 <__assert_fail@plt+0x62b4>
   12774:	str	r0, [sp]
   12778:	ldr	r3, [pc, #504]	; 12978 <__assert_fail@plt+0x1374>
   1277c:	ldr	r2, [sp, #16]
   12780:	mov	r1, r4
   12784:	mov	r0, #0
   12788:	bl	113ac <error@plt>
   1278c:	mov	r4, #0
   12790:	b	125cc <__assert_fail@plt+0xfc8>
   12794:	bl	11484 <__errno_location@plt>
   12798:	ldr	r4, [r0]
   1279c:	mov	r2, #5
   127a0:	ldr	r1, [pc, #460]	; 12974 <__assert_fail@plt+0x1370>
   127a4:	mov	r0, #0
   127a8:	bl	112f8 <dcgettext@plt>
   127ac:	str	r0, [sp, #16]
   127b0:	ldr	r0, [r8, #16]
   127b4:	bl	178b8 <__assert_fail@plt+0x62b4>
   127b8:	str	r0, [sp]
   127bc:	ldr	r3, [pc, #440]	; 1297c <__assert_fail@plt+0x1378>
   127c0:	ldr	r2, [sp, #16]
   127c4:	mov	r1, r4
   127c8:	mov	r0, #0
   127cc:	bl	113ac <error@plt>
   127d0:	mov	r4, #0
   127d4:	b	125e8 <__assert_fail@plt+0xfe4>
   127d8:	bl	11484 <__errno_location@plt>
   127dc:	ldr	r4, [r0]
   127e0:	mov	r2, #5
   127e4:	ldr	r1, [pc, #392]	; 12974 <__assert_fail@plt+0x1370>
   127e8:	mov	r0, #0
   127ec:	bl	112f8 <dcgettext@plt>
   127f0:	str	r0, [sp, #16]
   127f4:	ldr	r0, [r8, #8]
   127f8:	bl	178b8 <__assert_fail@plt+0x62b4>
   127fc:	str	r0, [sp]
   12800:	ldr	r3, [pc, #376]	; 12980 <__assert_fail@plt+0x137c>
   12804:	ldr	r2, [sp, #16]
   12808:	mov	r1, r4
   1280c:	mov	r0, #0
   12810:	bl	113ac <error@plt>
   12814:	ldr	r1, [r8, #12]
   12818:	cmp	r1, #0
   1281c:	movne	r4, #0
   12820:	bne	12610 <__assert_fail@plt+0x100c>
   12824:	b	12864 <__assert_fail@plt+0x1260>
   12828:	bl	11484 <__errno_location@plt>
   1282c:	ldr	r4, [r0]
   12830:	mov	r2, #5
   12834:	ldr	r1, [pc, #312]	; 12974 <__assert_fail@plt+0x1370>
   12838:	mov	r0, #0
   1283c:	bl	112f8 <dcgettext@plt>
   12840:	mov	r6, r0
   12844:	ldr	r0, [r8, #12]
   12848:	bl	178b8 <__assert_fail@plt+0x62b4>
   1284c:	str	r0, [sp]
   12850:	ldr	r3, [pc, #300]	; 12984 <__assert_fail@plt+0x1380>
   12854:	mov	r2, r6
   12858:	mov	r1, r4
   1285c:	mov	r0, #0
   12860:	bl	113ac <error@plt>
   12864:	bl	11484 <__errno_location@plt>
   12868:	mov	r4, r0
   1286c:	ldr	r6, [r0]
   12870:	mov	r0, sl
   12874:	bl	1140c <context_free@plt>
   12878:	str	r6, [r4]
   1287c:	mov	r6, #1
   12880:	b	12674 <__assert_fail@plt+0x1070>
   12884:	mov	r2, r4
   12888:	mov	r1, r7
   1288c:	mov	r0, r6
   12890:	bl	17e34 <__assert_fail@plt+0x6830>
   12894:	b	12384 <__assert_fail@plt+0xd80>
   12898:	mov	r2, #4
   1289c:	mov	r1, r5
   128a0:	mov	r0, fp
   128a4:	bl	14af4 <__assert_fail@plt+0x34f0>
   128a8:	b	12298 <__assert_fail@plt+0xc94>
   128ac:	ldr	r4, [r4]
   128b0:	mov	r2, #5
   128b4:	ldr	r1, [pc, #204]	; 12988 <__assert_fail@plt+0x1384>
   128b8:	mov	r0, #0
   128bc:	bl	112f8 <dcgettext@plt>
   128c0:	mov	r2, r0
   128c4:	mov	r1, r4
   128c8:	mov	r0, #0
   128cc:	bl	113ac <error@plt>
   128d0:	mov	r9, #0
   128d4:	b	12090 <__assert_fail@plt+0xa8c>
   128d8:	andeq	sl, r1, r4, lsr #18
   128dc:	ldrdeq	sl, [r1], -r4
   128e0:	andeq	sl, r1, ip, ror sl
   128e4:	andeq	r2, r1, ip, lsr #19
   128e8:	andeq	sl, r1, r0, asr #2
   128ec:			; <UNDEFINED> instruction: 0x0001aab4
   128f0:	ldrdeq	ip, [r2], -r0
   128f4:	andeq	ip, r2, r8, asr #3
   128f8:	andeq	r0, r0, r2, lsl #2
   128fc:	andeq	r0, r0, r1, lsl #2
   12900:	andeq	r0, r0, r3, lsl #2
   12904:	muleq	r1, r4, sl
   12908:	andeq	sl, r1, r4, lsr #21
   1290c:	andeq	ip, r2, r4, ror #2
   12910:	ldrdeq	sl, [r1], -r0
   12914:	andeq	sl, r1, r0, lsr #4
   12918:	andeq	ip, r2, r4, asr #3
   1291c:	strdeq	sl, [r1], -r0
   12920:	andeq	sl, r1, r4, asr #21
   12924:			; <UNDEFINED> instruction: 0x0002c1b8
   12928:	andeq	sl, r1, r4, lsl #22
   1292c:	andeq	sl, r1, r4, lsl fp
   12930:	andeq	sl, r1, r0, lsr fp
   12934:	andeq	sl, r1, r8, asr fp
   12938:	andeq	sl, r1, ip, ror #22
   1293c:	muleq	r1, ip, fp
   12940:	andeq	fp, r1, r4, lsr #9
   12944:			; <UNDEFINED> instruction: 0x0001abbc
   12948:	andeq	sl, r1, ip, asr #23
   1294c:	andeq	sl, r1, r8, lsr ip
   12950:	strdeq	sl, [r1], -ip
   12954:	andeq	sl, r1, ip, ror #24
   12958:	andeq	sl, r1, r4, ror #30
   1295c:	andeq	sl, r1, r0, lsl #25
   12960:	andeq	sl, r1, ip, lsr #28
   12964:	muleq	r1, ip, ip
   12968:	andeq	sl, r1, r8, asr sp
   1296c:	andeq	sl, r1, ip, ror sp
   12970:			; <UNDEFINED> instruction: 0x0001adb0
   12974:	ldrdeq	sl, [r1], -r8
   12978:	andeq	sl, r1, ip, lsl #28
   1297c:	andeq	sl, r1, r4, lsl lr
   12980:	andeq	sl, r1, ip, lsl lr
   12984:	andeq	sl, r1, r4, lsr #28
   12988:	andeq	sl, r1, r4, asr lr
   1298c:	ldr	r3, [pc, #4]	; 12998 <__assert_fail@plt+0x1394>
   12990:	str	r0, [r3]
   12994:	bx	lr
   12998:	andeq	ip, r2, r4, lsl #4
   1299c:	ldr	r3, [pc, #4]	; 129a8 <__assert_fail@plt+0x13a4>
   129a0:	strb	r0, [r3, #4]
   129a4:	bx	lr
   129a8:	andeq	ip, r2, r4, lsl #4
   129ac:	push	{r4, r5, r6, lr}
   129b0:	sub	sp, sp, #8
   129b4:	ldr	r3, [pc, #200]	; 12a84 <__assert_fail@plt+0x1480>
   129b8:	ldr	r0, [r3]
   129bc:	bl	18ebc <__assert_fail@plt+0x78b8>
   129c0:	cmp	r0, #0
   129c4:	beq	129e8 <__assert_fail@plt+0x13e4>
   129c8:	ldr	r3, [pc, #184]	; 12a88 <__assert_fail@plt+0x1484>
   129cc:	ldrb	r3, [r3, #4]
   129d0:	cmp	r3, #0
   129d4:	beq	12a04 <__assert_fail@plt+0x1400>
   129d8:	bl	11484 <__errno_location@plt>
   129dc:	ldr	r3, [r0]
   129e0:	cmp	r3, #32
   129e4:	bne	12a04 <__assert_fail@plt+0x1400>
   129e8:	ldr	r3, [pc, #156]	; 12a8c <__assert_fail@plt+0x1488>
   129ec:	ldr	r0, [r3]
   129f0:	bl	18ebc <__assert_fail@plt+0x78b8>
   129f4:	cmp	r0, #0
   129f8:	bne	12a78 <__assert_fail@plt+0x1474>
   129fc:	add	sp, sp, #8
   12a00:	pop	{r4, r5, r6, pc}
   12a04:	mov	r2, #5
   12a08:	ldr	r1, [pc, #128]	; 12a90 <__assert_fail@plt+0x148c>
   12a0c:	mov	r0, #0
   12a10:	bl	112f8 <dcgettext@plt>
   12a14:	mov	r4, r0
   12a18:	ldr	r3, [pc, #104]	; 12a88 <__assert_fail@plt+0x1484>
   12a1c:	ldr	r5, [r3]
   12a20:	cmp	r5, #0
   12a24:	beq	12a5c <__assert_fail@plt+0x1458>
   12a28:	bl	11484 <__errno_location@plt>
   12a2c:	ldr	r6, [r0]
   12a30:	mov	r0, r5
   12a34:	bl	17730 <__assert_fail@plt+0x612c>
   12a38:	str	r4, [sp]
   12a3c:	mov	r3, r0
   12a40:	ldr	r2, [pc, #76]	; 12a94 <__assert_fail@plt+0x1490>
   12a44:	mov	r1, r6
   12a48:	mov	r0, #0
   12a4c:	bl	113ac <error@plt>
   12a50:	ldr	r3, [pc, #64]	; 12a98 <__assert_fail@plt+0x1494>
   12a54:	ldr	r0, [r3]
   12a58:	bl	112a4 <_exit@plt>
   12a5c:	bl	11484 <__errno_location@plt>
   12a60:	mov	r3, r4
   12a64:	ldr	r2, [pc, #48]	; 12a9c <__assert_fail@plt+0x1498>
   12a68:	ldr	r1, [r0]
   12a6c:	mov	r0, #0
   12a70:	bl	113ac <error@plt>
   12a74:	b	12a50 <__assert_fail@plt+0x144c>
   12a78:	ldr	r3, [pc, #24]	; 12a98 <__assert_fail@plt+0x1494>
   12a7c:	ldr	r0, [r3]
   12a80:	bl	112a4 <_exit@plt>
   12a84:	andeq	ip, r2, r4, asr #3
   12a88:	andeq	ip, r2, r4, lsl #4
   12a8c:	andeq	ip, r2, r0, asr #3
   12a90:	andeq	sl, r1, r4, asr pc
   12a94:	andeq	sl, r1, r0, ror #30
   12a98:	andeq	ip, r2, r8, ror #2
   12a9c:	andeq	sl, r1, r4, ror #30
   12aa0:	push	{r4, r5}
   12aa4:	ldrd	r4, [r0, #8]
   12aa8:	ldrd	r2, [r1, #8]
   12aac:	cmp	r5, r3
   12ab0:	cmpeq	r4, r2
   12ab4:	movne	r0, #0
   12ab8:	beq	12ac4 <__assert_fail@plt+0x14c0>
   12abc:	pop	{r4, r5}
   12ac0:	bx	lr
   12ac4:	ldrd	r4, [r0]
   12ac8:	ldrd	r2, [r1]
   12acc:	cmp	r5, r3
   12ad0:	cmpeq	r4, r2
   12ad4:	moveq	r0, #1
   12ad8:	movne	r0, #0
   12adc:	b	12abc <__assert_fail@plt+0x14b8>
   12ae0:	push	{r4, lr}
   12ae4:	mov	r2, r1
   12ae8:	mov	r3, #0
   12aec:	ldrd	r0, [r0, #8]
   12af0:	bl	19f0c <__assert_fail@plt+0x8908>
   12af4:	mov	r0, r2
   12af8:	pop	{r4, pc}
   12afc:	push	{r4, lr}
   12b00:	mov	r2, r1
   12b04:	mov	r3, #0
   12b08:	ldrd	r0, [r0]
   12b0c:	bl	19f0c <__assert_fail@plt+0x8908>
   12b10:	mov	r0, r2
   12b14:	pop	{r4, pc}
   12b18:	push	{r4, r5}
   12b1c:	ldrd	r4, [r0]
   12b20:	ldrd	r2, [r1]
   12b24:	cmp	r5, r3
   12b28:	cmpeq	r4, r2
   12b2c:	moveq	r0, #1
   12b30:	movne	r0, #0
   12b34:	pop	{r4, r5}
   12b38:	bx	lr
   12b3c:	push	{r4, r5}
   12b40:	ldr	r3, [r0]
   12b44:	ldrd	r4, [r3, #160]	; 0xa0
   12b48:	ldr	r3, [r1]
   12b4c:	ldrd	r2, [r3, #160]	; 0xa0
   12b50:	cmp	r5, r3
   12b54:	cmpeq	r4, r2
   12b58:	movhi	r0, #1
   12b5c:	movls	r0, #0
   12b60:	movcc	r3, #1
   12b64:	movcs	r3, #0
   12b68:	sub	r0, r0, r3
   12b6c:	pop	{r4, r5}
   12b70:	bx	lr
   12b74:	push	{r4, r5, r6, lr}
   12b78:	mov	r4, r0
   12b7c:	ldr	r3, [r0, #36]	; 0x24
   12b80:	add	r1, r1, #256	; 0x100
   12b84:	adds	r1, r1, r3
   12b88:	bcs	12bac <__assert_fail@plt+0x15a8>
   12b8c:	str	r1, [r0, #36]	; 0x24
   12b90:	ldr	r0, [r0, #24]
   12b94:	bl	18d4c <__assert_fail@plt+0x7748>
   12b98:	cmp	r0, #0
   12b9c:	beq	12bd0 <__assert_fail@plt+0x15cc>
   12ba0:	str	r0, [r4, #24]
   12ba4:	mov	r0, #1
   12ba8:	pop	{r4, r5, r6, pc}
   12bac:	ldr	r0, [r0, #24]
   12bb0:	bl	193bc <__assert_fail@plt+0x7db8>
   12bb4:	mov	r5, #0
   12bb8:	str	r5, [r4, #24]
   12bbc:	bl	11484 <__errno_location@plt>
   12bc0:	mov	r3, #36	; 0x24
   12bc4:	str	r3, [r0]
   12bc8:	mov	r0, r5
   12bcc:	pop	{r4, r5, r6, pc}
   12bd0:	ldr	r0, [r4, #24]
   12bd4:	bl	193bc <__assert_fail@plt+0x7db8>
   12bd8:	mov	r0, #0
   12bdc:	str	r0, [r4, #24]
   12be0:	pop	{r4, r5, r6, pc}
   12be4:	push	{r4, r5, r6, lr}
   12be8:	sub	sp, sp, #8
   12bec:	mov	r4, r1
   12bf0:	add	r5, r1, #64	; 0x40
   12bf4:	ldr	r3, [r1, #48]	; 0x30
   12bf8:	cmp	r3, #0
   12bfc:	bne	12c0c <__assert_fail@plt+0x1608>
   12c00:	ldr	r3, [r0, #48]	; 0x30
   12c04:	tst	r3, #1
   12c08:	bne	12c1c <__assert_fail@plt+0x1618>
   12c0c:	ldr	r3, [r0, #48]	; 0x30
   12c10:	lsl	r3, r3, #30
   12c14:	orrs	r3, r2, r3, lsr #31
   12c18:	beq	12c94 <__assert_fail@plt+0x1690>
   12c1c:	mov	r2, r5
   12c20:	ldr	r1, [r4, #24]
   12c24:	mov	r0, #3
   12c28:	bl	115b0 <__xstat64@plt>
   12c2c:	cmp	r0, #0
   12c30:	beq	12cc8 <__assert_fail@plt+0x16c4>
   12c34:	bl	11484 <__errno_location@plt>
   12c38:	mov	r6, r0
   12c3c:	ldr	r3, [r0]
   12c40:	cmp	r3, #2
   12c44:	beq	12c6c <__assert_fail@plt+0x1668>
   12c48:	ldr	r3, [r6]
   12c4c:	str	r3, [r4, #32]
   12c50:	mov	r2, #104	; 0x68
   12c54:	mov	r1, #0
   12c58:	mov	r0, r5
   12c5c:	bl	114a8 <memset@plt>
   12c60:	mov	r0, #10
   12c64:	add	sp, sp, #8
   12c68:	pop	{r4, r5, r6, pc}
   12c6c:	mov	r2, r5
   12c70:	ldr	r1, [r4, #24]
   12c74:	mov	r0, #3
   12c78:	bl	115e0 <__lxstat64@plt>
   12c7c:	cmp	r0, #0
   12c80:	bne	12c48 <__assert_fail@plt+0x1644>
   12c84:	mov	r3, #0
   12c88:	str	r3, [r6]
   12c8c:	mov	r0, #13
   12c90:	b	12c64 <__assert_fail@plt+0x1660>
   12c94:	ldr	r1, [r0, #32]
   12c98:	mov	r3, #256	; 0x100
   12c9c:	str	r3, [sp]
   12ca0:	mov	r3, r5
   12ca4:	ldr	r2, [r4, #24]
   12ca8:	mov	r0, #3
   12cac:	bl	11340 <__fxstatat64@plt>
   12cb0:	cmp	r0, #0
   12cb4:	beq	12cc8 <__assert_fail@plt+0x16c4>
   12cb8:	bl	11484 <__errno_location@plt>
   12cbc:	ldr	r3, [r0]
   12cc0:	str	r3, [r4, #32]
   12cc4:	b	12c50 <__assert_fail@plt+0x164c>
   12cc8:	ldr	r0, [r4, #80]	; 0x50
   12ccc:	and	r0, r0, #61440	; 0xf000
   12cd0:	cmp	r0, #16384	; 0x4000
   12cd4:	beq	12cf4 <__assert_fail@plt+0x16f0>
   12cd8:	cmp	r0, #40960	; 0xa000
   12cdc:	moveq	r0, #12
   12ce0:	beq	12c64 <__assert_fail@plt+0x1660>
   12ce4:	cmp	r0, #32768	; 0x8000
   12ce8:	moveq	r0, #8
   12cec:	movne	r0, #3
   12cf0:	b	12c64 <__assert_fail@plt+0x1660>
   12cf4:	ldrb	r3, [r4, #168]	; 0xa8
   12cf8:	cmp	r3, #46	; 0x2e
   12cfc:	movne	r0, #1
   12d00:	bne	12c64 <__assert_fail@plt+0x1660>
   12d04:	ldrb	r3, [r4, #169]	; 0xa9
   12d08:	cmp	r3, #0
   12d0c:	beq	12d28 <__assert_fail@plt+0x1724>
   12d10:	ldr	r3, [r4, #168]	; 0xa8
   12d14:	bic	r3, r3, #-16777216	; 0xff000000
   12d18:	bic	r3, r3, #255	; 0xff
   12d1c:	cmp	r3, #11776	; 0x2e00
   12d20:	movne	r0, #1
   12d24:	bne	12c64 <__assert_fail@plt+0x1660>
   12d28:	ldr	r0, [r4, #48]	; 0x30
   12d2c:	cmp	r0, #0
   12d30:	moveq	r0, #1
   12d34:	movne	r0, #5
   12d38:	b	12c64 <__assert_fail@plt+0x1660>
   12d3c:	push	{r4, r5, r6, r7, r8, lr}
   12d40:	mov	r6, r0
   12d44:	mov	r4, r1
   12d48:	mov	r5, r2
   12d4c:	ldr	r7, [r0, #44]	; 0x2c
   12d50:	ldr	r3, [r0, #40]	; 0x28
   12d54:	cmp	r3, r2
   12d58:	bcs	12d84 <__assert_fail@plt+0x1780>
   12d5c:	add	r1, r2, #40	; 0x28
   12d60:	str	r1, [r0, #40]	; 0x28
   12d64:	cmn	r1, #-1073741823	; 0xc0000001
   12d68:	bhi	12df4 <__assert_fail@plt+0x17f0>
   12d6c:	lsl	r1, r1, #2
   12d70:	ldr	r0, [r0, #8]
   12d74:	bl	18d4c <__assert_fail@plt+0x7748>
   12d78:	cmp	r0, #0
   12d7c:	strne	r0, [r6, #8]
   12d80:	beq	12df4 <__assert_fail@plt+0x17f0>
   12d84:	ldr	r3, [r6, #8]
   12d88:	cmp	r4, #0
   12d8c:	beq	12da0 <__assert_fail@plt+0x179c>
   12d90:	str	r4, [r3], #4
   12d94:	ldr	r4, [r4, #8]
   12d98:	cmp	r4, #0
   12d9c:	bne	12d90 <__assert_fail@plt+0x178c>
   12da0:	mov	r3, r7
   12da4:	mov	r2, #4
   12da8:	mov	r1, r5
   12dac:	ldr	r0, [r6, #8]
   12db0:	bl	11574 <qsort@plt>
   12db4:	ldr	lr, [r6, #8]
   12db8:	ldr	r0, [lr]
   12dbc:	subs	r3, r5, #1
   12dc0:	beq	12de4 <__assert_fail@plt+0x17e0>
   12dc4:	mov	r2, lr
   12dc8:	ldr	r1, [r2]
   12dcc:	ldr	ip, [r2, #4]!
   12dd0:	str	ip, [r1, #8]
   12dd4:	subs	r3, r3, #1
   12dd8:	bne	12dc8 <__assert_fail@plt+0x17c4>
   12ddc:	sub	r5, r5, #-1073741823	; 0xc0000001
   12de0:	add	lr, lr, r5, lsl #2
   12de4:	ldr	r3, [lr]
   12de8:	mov	r2, #0
   12dec:	str	r2, [r3, #8]
   12df0:	pop	{r4, r5, r6, r7, r8, pc}
   12df4:	ldr	r0, [r6, #8]
   12df8:	bl	193bc <__assert_fail@plt+0x7db8>
   12dfc:	mov	r3, #0
   12e00:	str	r3, [r6, #8]
   12e04:	str	r3, [r6, #40]	; 0x28
   12e08:	mov	r0, r4
   12e0c:	pop	{r4, r5, r6, r7, r8, pc}
   12e10:	push	{r4, r5, r6, r7, r8, lr}
   12e14:	mov	r6, r0
   12e18:	mov	r7, r1
   12e1c:	mov	r5, r2
   12e20:	add	r0, r2, #176	; 0xb0
   12e24:	bic	r0, r0, #7
   12e28:	bl	18d1c <__assert_fail@plt+0x7718>
   12e2c:	subs	r4, r0, #0
   12e30:	beq	12e7c <__assert_fail@plt+0x1878>
   12e34:	mov	r2, r5
   12e38:	mov	r1, r7
   12e3c:	add	r0, r4, #168	; 0xa8
   12e40:	bl	112b0 <memcpy@plt>
   12e44:	add	r2, r4, r5
   12e48:	mov	r3, #0
   12e4c:	strb	r3, [r2, #168]	; 0xa8
   12e50:	str	r5, [r4, #52]	; 0x34
   12e54:	str	r6, [r4, #44]	; 0x2c
   12e58:	ldr	r2, [r6, #24]
   12e5c:	str	r2, [r4, #28]
   12e60:	str	r3, [r4, #32]
   12e64:	str	r3, [r4, #12]
   12e68:	strh	r3, [r4, #58]	; 0x3a
   12e6c:	mov	r2, #3
   12e70:	strh	r2, [r4, #60]	; 0x3c
   12e74:	str	r3, [r4, #16]
   12e78:	str	r3, [r4, #20]
   12e7c:	mov	r0, r4
   12e80:	pop	{r4, r5, r6, r7, r8, pc}
   12e84:	push	{r4, lr}
   12e88:	sub	sp, sp, #8
   12e8c:	mov	r4, r0
   12e90:	ldr	r2, [r0, #48]	; 0x30
   12e94:	ldr	r3, [pc, #92]	; 12ef8 <__assert_fail@plt+0x18f4>
   12e98:	and	r3, r3, r2
   12e9c:	cmp	r3, #0
   12ea0:	beq	12ed4 <__assert_fail@plt+0x18d0>
   12ea4:	ldr	r3, [pc, #80]	; 12efc <__assert_fail@plt+0x18f8>
   12ea8:	str	r3, [sp]
   12eac:	ldr	r3, [pc, #76]	; 12f00 <__assert_fail@plt+0x18fc>
   12eb0:	ldr	r2, [pc, #76]	; 12f04 <__assert_fail@plt+0x1900>
   12eb4:	mov	r1, #0
   12eb8:	mov	r0, #31
   12ebc:	bl	15578 <__assert_fail@plt+0x3f74>
   12ec0:	str	r0, [r4, #56]	; 0x38
   12ec4:	adds	r0, r0, #0
   12ec8:	movne	r0, #1
   12ecc:	add	sp, sp, #8
   12ed0:	pop	{r4, pc}
   12ed4:	mov	r0, #32
   12ed8:	bl	18d1c <__assert_fail@plt+0x7718>
   12edc:	str	r0, [r4, #56]	; 0x38
   12ee0:	cmp	r0, #0
   12ee4:	moveq	r0, #0
   12ee8:	beq	12ecc <__assert_fail@plt+0x18c8>
   12eec:	bl	18f34 <__assert_fail@plt+0x7930>
   12ef0:	mov	r0, #1
   12ef4:	b	12ecc <__assert_fail@plt+0x18c8>
   12ef8:	andeq	r0, r0, r2, lsl #2
   12efc:			; <UNDEFINED> instruction: 0x000193bc
   12f00:	andeq	r2, r1, r0, lsr #21
   12f04:	andeq	r2, r1, r0, ror #21
   12f08:	push	{r4, lr}
   12f0c:	mov	ip, r1
   12f10:	ldr	r3, [r0, #48]	; 0x30
   12f14:	and	lr, r3, #16
   12f18:	ldr	r2, [pc, #48]	; 12f50 <__assert_fail@plt+0x194c>
   12f1c:	ldr	r1, [pc, #48]	; 12f54 <__assert_fail@plt+0x1950>
   12f20:	cmp	lr, #0
   12f24:	moveq	r1, r2
   12f28:	tst	r3, #512	; 0x200
   12f2c:	bne	12f3c <__assert_fail@plt+0x1938>
   12f30:	mov	r0, ip
   12f34:	bl	1931c <__assert_fail@plt+0x7d18>
   12f38:	pop	{r4, pc}
   12f3c:	mov	r2, r1
   12f40:	mov	r1, ip
   12f44:	ldr	r0, [r0, #32]
   12f48:	bl	15cd0 <__assert_fail@plt+0x46cc>
   12f4c:	pop	{r4, pc}
   12f50:	andeq	r4, r8, r0, lsl #18
   12f54:	andeq	ip, r8, r0, lsl #18
   12f58:	push	{r4, r5, r6, lr}
   12f5c:	subs	r4, r0, #0
   12f60:	bne	12f7c <__assert_fail@plt+0x1978>
   12f64:	pop	{r4, r5, r6, pc}
   12f68:	mov	r0, r4
   12f6c:	bl	193bc <__assert_fail@plt+0x7db8>
   12f70:	mov	r4, r5
   12f74:	cmp	r5, #0
   12f78:	beq	12f94 <__assert_fail@plt+0x1990>
   12f7c:	ldr	r5, [r4, #8]
   12f80:	ldr	r0, [r4, #12]
   12f84:	cmp	r0, #0
   12f88:	beq	12f68 <__assert_fail@plt+0x1964>
   12f8c:	bl	115ec <closedir@plt>
   12f90:	b	12f68 <__assert_fail@plt+0x1964>
   12f94:	pop	{r4, r5, r6, pc}
   12f98:	push	{r4, lr}
   12f9c:	ldr	r2, [r0, #48]	; 0x30
   12fa0:	ldr	r3, [pc, #40]	; 12fd0 <__assert_fail@plt+0x19cc>
   12fa4:	and	r3, r3, r2
   12fa8:	cmp	r3, #0
   12fac:	beq	12fc4 <__assert_fail@plt+0x19c0>
   12fb0:	ldr	r0, [r0, #56]	; 0x38
   12fb4:	cmp	r0, #0
   12fb8:	popeq	{r4, pc}
   12fbc:	bl	15708 <__assert_fail@plt+0x4104>
   12fc0:	pop	{r4, pc}
   12fc4:	ldr	r0, [r0, #56]	; 0x38
   12fc8:	bl	193bc <__assert_fail@plt+0x7db8>
   12fcc:	pop	{r4, pc}
   12fd0:	andeq	r0, r0, r2, lsl #2
   12fd4:	push	{r4, lr}
   12fd8:	mov	r4, r0
   12fdc:	mov	r0, r4
   12fe0:	bl	15c3c <__assert_fail@plt+0x4638>
   12fe4:	cmp	r0, #0
   12fe8:	bne	13004 <__assert_fail@plt+0x1a00>
   12fec:	mov	r0, r4
   12ff0:	bl	15c88 <__assert_fail@plt+0x4684>
   12ff4:	cmp	r0, #0
   12ff8:	blt	12fdc <__assert_fail@plt+0x19d8>
   12ffc:	bl	115d4 <close@plt>
   13000:	b	12fdc <__assert_fail@plt+0x19d8>
   13004:	pop	{r4, pc}
   13008:	push	{r4, r5, r6, r7, lr}
   1300c:	sub	sp, sp, #116	; 0x74
   13010:	ldr	r4, [r0, #44]	; 0x2c
   13014:	ldr	r3, [r4, #48]	; 0x30
   13018:	tst	r3, #512	; 0x200
   1301c:	beq	130fc <__assert_fail@plt+0x1af8>
   13020:	mov	r7, r1
   13024:	mov	r5, r0
   13028:	ldr	r6, [r4, #52]	; 0x34
   1302c:	cmp	r6, #0
   13030:	beq	13058 <__assert_fail@plt+0x1a54>
   13034:	ldrd	r2, [r5, #64]	; 0x40
   13038:	add	r1, sp, #112	; 0x70
   1303c:	strd	r2, [r1, #-104]!	; 0xffffff98
   13040:	mov	r0, r6
   13044:	bl	152c0 <__assert_fail@plt+0x3cbc>
   13048:	cmp	r0, #0
   1304c:	beq	13084 <__assert_fail@plt+0x1a80>
   13050:	ldr	r0, [r0, #8]
   13054:	b	13100 <__assert_fail@plt+0x1afc>
   13058:	ldr	r3, [pc, #184]	; 13118 <__assert_fail@plt+0x1b14>
   1305c:	str	r3, [sp]
   13060:	ldr	r3, [pc, #180]	; 1311c <__assert_fail@plt+0x1b18>
   13064:	ldr	r2, [pc, #180]	; 13120 <__assert_fail@plt+0x1b1c>
   13068:	mov	r1, #0
   1306c:	mov	r0, #13
   13070:	bl	15578 <__assert_fail@plt+0x3f74>
   13074:	mov	r6, r0
   13078:	str	r0, [r4, #52]	; 0x34
   1307c:	cmp	r0, #0
   13080:	bne	13034 <__assert_fail@plt+0x1a30>
   13084:	cmp	r7, #0
   13088:	blt	13108 <__assert_fail@plt+0x1b04>
   1308c:	add	r1, sp, #24
   13090:	mov	r0, r7
   13094:	bl	1122c <fstatfs64@plt>
   13098:	cmp	r0, #0
   1309c:	bne	13110 <__assert_fail@plt+0x1b0c>
   130a0:	cmp	r6, #0
   130a4:	beq	130e4 <__assert_fail@plt+0x1ae0>
   130a8:	mov	r0, #16
   130ac:	bl	18d1c <__assert_fail@plt+0x7718>
   130b0:	subs	r4, r0, #0
   130b4:	beq	130e4 <__assert_fail@plt+0x1ae0>
   130b8:	ldrd	r2, [r5, #64]	; 0x40
   130bc:	strd	r2, [r4]
   130c0:	ldr	r3, [sp, #24]
   130c4:	str	r3, [r4, #8]
   130c8:	mov	r1, r4
   130cc:	mov	r0, r6
   130d0:	bl	15ac4 <__assert_fail@plt+0x44c0>
   130d4:	cmp	r0, #0
   130d8:	beq	130f0 <__assert_fail@plt+0x1aec>
   130dc:	cmp	r4, r0
   130e0:	bne	130ec <__assert_fail@plt+0x1ae8>
   130e4:	ldr	r0, [sp, #24]
   130e8:	b	13100 <__assert_fail@plt+0x1afc>
   130ec:	bl	115c8 <abort@plt>
   130f0:	mov	r0, r4
   130f4:	bl	193bc <__assert_fail@plt+0x7db8>
   130f8:	b	130e4 <__assert_fail@plt+0x1ae0>
   130fc:	mov	r0, #0
   13100:	add	sp, sp, #116	; 0x74
   13104:	pop	{r4, r5, r6, r7, pc}
   13108:	mov	r0, #0
   1310c:	b	13100 <__assert_fail@plt+0x1afc>
   13110:	mov	r0, #0
   13114:	b	13100 <__assert_fail@plt+0x1afc>
   13118:			; <UNDEFINED> instruction: 0x000193bc
   1311c:	andeq	r2, r1, r8, lsl fp
   13120:	strdeq	r2, [r1], -ip
   13124:	push	{r4, r5, r6, lr}
   13128:	mov	r5, r0
   1312c:	mov	r4, r1
   13130:	ldr	r2, [r0, #48]	; 0x30
   13134:	ldr	r3, [pc, #176]	; 131ec <__assert_fail@plt+0x1be8>
   13138:	and	r3, r3, r2
   1313c:	cmp	r3, #0
   13140:	beq	131a8 <__assert_fail@plt+0x1ba4>
   13144:	mov	r0, #24
   13148:	bl	18d1c <__assert_fail@plt+0x7718>
   1314c:	subs	r6, r0, #0
   13150:	beq	131cc <__assert_fail@plt+0x1bc8>
   13154:	ldrd	r2, [r4, #64]	; 0x40
   13158:	strd	r2, [r6]
   1315c:	ldrd	r2, [r4, #160]	; 0xa0
   13160:	strd	r2, [r6, #8]
   13164:	str	r4, [r6, #16]
   13168:	mov	r1, r6
   1316c:	ldr	r0, [r5, #56]	; 0x38
   13170:	bl	15ac4 <__assert_fail@plt+0x44c0>
   13174:	mov	r5, r0
   13178:	cmp	r6, r0
   1317c:	beq	131d4 <__assert_fail@plt+0x1bd0>
   13180:	mov	r0, r6
   13184:	bl	193bc <__assert_fail@plt+0x7db8>
   13188:	cmp	r5, #0
   1318c:	beq	131dc <__assert_fail@plt+0x1bd8>
   13190:	ldr	r3, [r5, #16]
   13194:	str	r3, [r4]
   13198:	mov	r3, #2
   1319c:	strh	r3, [r4, #56]	; 0x38
   131a0:	mov	r0, #1
   131a4:	pop	{r4, r5, r6, pc}
   131a8:	add	r1, r1, #64	; 0x40
   131ac:	ldr	r0, [r0, #56]	; 0x38
   131b0:	bl	18f50 <__assert_fail@plt+0x794c>
   131b4:	cmp	r0, #0
   131b8:	beq	131e4 <__assert_fail@plt+0x1be0>
   131bc:	str	r4, [r4]
   131c0:	mov	r3, #2
   131c4:	strh	r3, [r4, #56]	; 0x38
   131c8:	pop	{r4, r5, r6, pc}
   131cc:	mov	r0, #0
   131d0:	pop	{r4, r5, r6, pc}
   131d4:	mov	r0, #1
   131d8:	pop	{r4, r5, r6, pc}
   131dc:	mov	r0, #0
   131e0:	pop	{r4, r5, r6, pc}
   131e4:	mov	r0, #1
   131e8:	pop	{r4, r5, r6, pc}
   131ec:	andeq	r0, r0, r2, lsl #2
   131f0:	push	{r4, r5, r6, lr}
   131f4:	mov	r5, r1
   131f8:	ldr	r1, [r0, #32]
   131fc:	cmp	r1, r5
   13200:	movne	r3, #0
   13204:	moveq	r3, #1
   13208:	cmn	r1, #100	; 0x64
   1320c:	moveq	r3, #0
   13210:	cmp	r3, #0
   13214:	bne	13254 <__assert_fail@plt+0x1c50>
   13218:	mov	r4, r0
   1321c:	cmp	r2, #0
   13220:	bne	13258 <__assert_fail@plt+0x1c54>
   13224:	ldr	r3, [r0, #48]	; 0x30
   13228:	lsr	r3, r3, #2
   1322c:	eor	r3, r3, #1
   13230:	cmp	r1, #0
   13234:	movlt	r3, #0
   13238:	andge	r3, r3, #1
   1323c:	cmp	r3, #0
   13240:	beq	1324c <__assert_fail@plt+0x1c48>
   13244:	mov	r0, r1
   13248:	bl	115d4 <close@plt>
   1324c:	str	r5, [r4, #32]
   13250:	pop	{r4, r5, r6, pc}
   13254:	bl	115c8 <abort@plt>
   13258:	add	r0, r0, #60	; 0x3c
   1325c:	bl	15c44 <__assert_fail@plt+0x4640>
   13260:	cmp	r0, #0
   13264:	blt	1324c <__assert_fail@plt+0x1c48>
   13268:	bl	115d4 <close@plt>
   1326c:	b	1324c <__assert_fail@plt+0x1c48>
   13270:	push	{r4, r5, r6, lr}
   13274:	mov	r4, r0
   13278:	ldr	r3, [r0, #48]	; 0x30
   1327c:	ands	r5, r3, #4
   13280:	movne	r5, #0
   13284:	bne	132a0 <__assert_fail@plt+0x1c9c>
   13288:	tst	r3, #512	; 0x200
   1328c:	bne	132b0 <__assert_fail@plt+0x1cac>
   13290:	ldr	r0, [r0, #28]
   13294:	bl	11568 <fchdir@plt>
   13298:	adds	r5, r0, #0
   1329c:	movne	r5, #1
   132a0:	add	r0, r4, #60	; 0x3c
   132a4:	bl	12fd4 <__assert_fail@plt+0x19d0>
   132a8:	mov	r0, r5
   132ac:	pop	{r4, r5, r6, pc}
   132b0:	mov	r2, #1
   132b4:	mvn	r1, #99	; 0x63
   132b8:	bl	131f0 <__assert_fail@plt+0x1bec>
   132bc:	b	132a0 <__assert_fail@plt+0x1c9c>
   132c0:	push	{r4, r5, r6, r7, r8, r9, lr}
   132c4:	sub	sp, sp, #108	; 0x6c
   132c8:	mov	r4, r0
   132cc:	mov	r6, r1
   132d0:	mov	r5, r2
   132d4:	subs	r9, r3, #0
   132d8:	beq	13474 <__assert_fail@plt+0x1e70>
   132dc:	ldr	r1, [pc, #448]	; 134a4 <__assert_fail@plt+0x1ea0>
   132e0:	mov	r0, r9
   132e4:	bl	11268 <strcmp@plt>
   132e8:	cmp	r0, #0
   132ec:	bne	13474 <__assert_fail@plt+0x1e70>
   132f0:	ldr	r3, [r4, #48]	; 0x30
   132f4:	tst	r3, #4
   132f8:	bne	13480 <__assert_fail@plt+0x1e7c>
   132fc:	cmp	r5, #0
   13300:	bge	13410 <__assert_fail@plt+0x1e0c>
   13304:	tst	r3, #512	; 0x200
   13308:	beq	13320 <__assert_fail@plt+0x1d1c>
   1330c:	add	r7, r4, #60	; 0x3c
   13310:	mov	r0, r7
   13314:	bl	15c3c <__assert_fail@plt+0x4638>
   13318:	cmp	r0, #0
   1331c:	beq	13340 <__assert_fail@plt+0x1d3c>
   13320:	mov	r7, #1
   13324:	mov	r1, r9
   13328:	mov	r0, r4
   1332c:	bl	12f08 <__assert_fail@plt+0x1904>
   13330:	subs	r8, r0, #0
   13334:	bge	13390 <__assert_fail@plt+0x1d8c>
   13338:	mvn	r4, #0
   1333c:	b	133fc <__assert_fail@plt+0x1df8>
   13340:	mov	r0, r7
   13344:	bl	15c88 <__assert_fail@plt+0x4684>
   13348:	subs	r8, r0, #0
   1334c:	blt	13320 <__assert_fail@plt+0x1d1c>
   13350:	ldr	r3, [r4, #48]	; 0x30
   13354:	tst	r3, #2
   13358:	bne	1341c <__assert_fail@plt+0x1e18>
   1335c:	mov	r5, r8
   13360:	mov	r7, #1
   13364:	ldr	r3, [r4, #48]	; 0x30
   13368:	tst	r3, #512	; 0x200
   1336c:	bne	13440 <__assert_fail@plt+0x1e3c>
   13370:	mov	r0, r8
   13374:	bl	11568 <fchdir@plt>
   13378:	mov	r4, r0
   1337c:	b	133f4 <__assert_fail@plt+0x1df0>
   13380:	cmp	r5, #0
   13384:	movge	r8, r5
   13388:	movge	r7, #0
   1338c:	blt	13408 <__assert_fail@plt+0x1e04>
   13390:	ldr	r3, [r4, #48]	; 0x30
   13394:	tst	r3, #2
   13398:	bne	133b8 <__assert_fail@plt+0x1db4>
   1339c:	cmp	r9, #0
   133a0:	beq	13364 <__assert_fail@plt+0x1d60>
   133a4:	ldr	r1, [pc, #248]	; 134a4 <__assert_fail@plt+0x1ea0>
   133a8:	mov	r0, r9
   133ac:	bl	11268 <strcmp@plt>
   133b0:	cmp	r0, #0
   133b4:	bne	13364 <__assert_fail@plt+0x1d60>
   133b8:	mov	r2, sp
   133bc:	mov	r1, r8
   133c0:	mov	r0, #3
   133c4:	bl	11358 <__fxstat64@plt>
   133c8:	cmp	r0, #0
   133cc:	bne	133f0 <__assert_fail@plt+0x1dec>
   133d0:	ldrd	r0, [r6, #64]	; 0x40
   133d4:	ldrd	r2, [sp]
   133d8:	cmp	r1, r3
   133dc:	cmpeq	r0, r2
   133e0:	beq	13428 <__assert_fail@plt+0x1e24>
   133e4:	bl	11484 <__errno_location@plt>
   133e8:	mov	r3, #2
   133ec:	str	r3, [r0]
   133f0:	mvn	r4, #0
   133f4:	cmp	r5, #0
   133f8:	blt	13458 <__assert_fail@plt+0x1e54>
   133fc:	mov	r0, r4
   13400:	add	sp, sp, #108	; 0x6c
   13404:	pop	{r4, r5, r6, r7, r8, r9, pc}
   13408:	mov	r7, #0
   1340c:	b	13324 <__assert_fail@plt+0x1d20>
   13410:	mov	r8, r5
   13414:	mov	r7, #1
   13418:	b	13390 <__assert_fail@plt+0x1d8c>
   1341c:	mov	r5, r8
   13420:	mov	r7, #1
   13424:	b	133b8 <__assert_fail@plt+0x1db4>
   13428:	ldrd	r0, [r6, #160]	; 0xa0
   1342c:	ldrd	r2, [sp, #96]	; 0x60
   13430:	cmp	r1, r3
   13434:	cmpeq	r0, r2
   13438:	bne	133e4 <__assert_fail@plt+0x1de0>
   1343c:	b	13364 <__assert_fail@plt+0x1d60>
   13440:	eor	r2, r7, #1
   13444:	mov	r1, r8
   13448:	mov	r0, r4
   1344c:	bl	131f0 <__assert_fail@plt+0x1bec>
   13450:	mov	r4, #0
   13454:	b	133fc <__assert_fail@plt+0x1df8>
   13458:	bl	11484 <__errno_location@plt>
   1345c:	mov	r5, r0
   13460:	ldr	r6, [r0]
   13464:	mov	r0, r8
   13468:	bl	115d4 <close@plt>
   1346c:	str	r6, [r5]
   13470:	b	133fc <__assert_fail@plt+0x1df8>
   13474:	ldr	r3, [r4, #48]	; 0x30
   13478:	tst	r3, #4
   1347c:	beq	13380 <__assert_fail@plt+0x1d7c>
   13480:	mvn	r2, r5
   13484:	lsr	r2, r2, #31
   13488:	ands	r3, r2, r3, lsr #9
   1348c:	moveq	r4, #0
   13490:	beq	133fc <__assert_fail@plt+0x1df8>
   13494:	mov	r0, r5
   13498:	bl	115d4 <close@plt>
   1349c:	mov	r4, #0
   134a0:	b	133fc <__assert_fail@plt+0x1df8>
   134a4:	andeq	sl, r1, r8, ror #30
   134a8:	push	{r4, r5, lr}
   134ac:	sub	sp, sp, #28
   134b0:	ldr	r2, [r0, #48]	; 0x30
   134b4:	ldr	r3, [pc, #172]	; 13568 <__assert_fail@plt+0x1f64>
   134b8:	and	r3, r3, r2
   134bc:	cmp	r3, #0
   134c0:	bne	13508 <__assert_fail@plt+0x1f04>
   134c4:	ldr	ip, [r1, #4]
   134c8:	cmp	ip, #0
   134cc:	beq	13500 <__assert_fail@plt+0x1efc>
   134d0:	ldr	r3, [ip, #48]	; 0x30
   134d4:	cmp	r3, #0
   134d8:	blt	13500 <__assert_fail@plt+0x1efc>
   134dc:	ldr	lr, [r0, #56]	; 0x38
   134e0:	ldrd	r2, [lr, #16]
   134e4:	orrs	r3, r2, r3
   134e8:	beq	13538 <__assert_fail@plt+0x1f34>
   134ec:	ldrd	r4, [lr]
   134f0:	ldrd	r2, [r1, #160]	; 0xa0
   134f4:	cmp	r5, r3
   134f8:	cmpeq	r4, r2
   134fc:	beq	1353c <__assert_fail@plt+0x1f38>
   13500:	add	sp, sp, #28
   13504:	pop	{r4, r5, pc}
   13508:	ldrd	r2, [r1, #64]	; 0x40
   1350c:	strd	r2, [sp]
   13510:	ldrd	r2, [r1, #160]	; 0xa0
   13514:	strd	r2, [sp, #8]
   13518:	mov	r1, sp
   1351c:	ldr	r0, [r0, #56]	; 0x38
   13520:	bl	15afc <__assert_fail@plt+0x44f8>
   13524:	cmp	r0, #0
   13528:	beq	13534 <__assert_fail@plt+0x1f30>
   1352c:	bl	193bc <__assert_fail@plt+0x7db8>
   13530:	b	13500 <__assert_fail@plt+0x1efc>
   13534:	bl	115c8 <abort@plt>
   13538:	bl	115c8 <abort@plt>
   1353c:	ldrd	r2, [lr, #8]
   13540:	ldrd	r4, [r1, #64]	; 0x40
   13544:	cmp	r3, r5
   13548:	cmpeq	r2, r4
   1354c:	bne	13500 <__assert_fail@plt+0x1efc>
   13550:	ldrd	r2, [ip, #64]	; 0x40
   13554:	strd	r2, [lr, #8]
   13558:	ldr	r3, [r0, #56]	; 0x38
   1355c:	ldrd	r0, [ip, #160]	; 0xa0
   13560:	strd	r0, [r3]
   13564:	b	13500 <__assert_fail@plt+0x1efc>
   13568:	andeq	r0, r0, r2, lsl #2
   1356c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13570:	sub	sp, sp, #68	; 0x44
   13574:	mov	r5, r0
   13578:	str	r1, [sp, #40]	; 0x28
   1357c:	ldr	r9, [r0]
   13580:	ldr	r3, [r9, #12]
   13584:	str	r3, [sp, #44]	; 0x2c
   13588:	cmp	r3, #0
   1358c:	beq	1368c <__assert_fail@plt+0x2088>
   13590:	mov	r0, r3
   13594:	bl	1155c <dirfd@plt>
   13598:	str	r0, [sp, #60]	; 0x3c
   1359c:	cmp	r0, #0
   135a0:	blt	13648 <__assert_fail@plt+0x2044>
   135a4:	ldr	r3, [r5, #44]	; 0x2c
   135a8:	cmp	r3, #0
   135ac:	ldr	r3, [pc, #2472]	; 13f5c <__assert_fail@plt+0x2958>
   135b0:	mvnne	r3, #0
   135b4:	str	r3, [sp, #24]
   135b8:	mov	r3, #1
   135bc:	str	r3, [sp, #52]	; 0x34
   135c0:	ldr	r3, [r9, #40]	; 0x28
   135c4:	mov	r1, r3
   135c8:	sub	r3, r3, #1
   135cc:	ldr	r2, [r9, #28]
   135d0:	ldrb	r2, [r2, r3]
   135d4:	cmp	r2, #47	; 0x2f
   135d8:	moveq	r1, r3
   135dc:	str	r1, [sp, #32]
   135e0:	ldr	r3, [r5, #48]	; 0x30
   135e4:	tst	r3, #4
   135e8:	ldrne	r3, [r5, #24]
   135ec:	addne	r2, r3, r1
   135f0:	addne	r2, r2, #1
   135f4:	strne	r2, [sp, #28]
   135f8:	movne	r2, #47	; 0x2f
   135fc:	strbne	r2, [r3, r1]
   13600:	moveq	r3, #0
   13604:	streq	r3, [sp, #28]
   13608:	ldr	r3, [sp, #32]
   1360c:	add	r3, r3, #1
   13610:	str	r3, [sp, #12]
   13614:	ldr	fp, [r5, #36]	; 0x24
   13618:	sub	fp, fp, r3
   1361c:	ldr	r3, [r9, #48]	; 0x30
   13620:	add	r3, r3, #1
   13624:	str	r3, [sp, #20]
   13628:	mov	r3, #0
   1362c:	str	r3, [sp, #48]	; 0x30
   13630:	str	r3, [sp, #36]	; 0x24
   13634:	str	r3, [sp, #4]
   13638:	mov	r8, r3
   1363c:	str	r3, [sp, #8]
   13640:	mov	sl, r3
   13644:	b	13bbc <__assert_fail@plt+0x25b8>
   13648:	ldr	r0, [r9, #12]
   1364c:	bl	115ec <closedir@plt>
   13650:	mov	r3, #0
   13654:	str	r3, [r9, #12]
   13658:	ldr	r3, [sp, #40]	; 0x28
   1365c:	cmp	r3, #3
   13660:	movne	r3, #0
   13664:	strne	r3, [sp, #8]
   13668:	bne	13a2c <__assert_fail@plt+0x2428>
   1366c:	mov	r3, #4
   13670:	strh	r3, [r9, #56]	; 0x38
   13674:	bl	11484 <__errno_location@plt>
   13678:	ldr	r3, [r0]
   1367c:	str	r3, [r9, #32]
   13680:	mov	r3, #0
   13684:	str	r3, [sp, #8]
   13688:	b	13a2c <__assert_fail@plt+0x2428>
   1368c:	ldr	r3, [r0, #48]	; 0x30
   13690:	and	r2, r3, #516	; 0x204
   13694:	cmp	r2, #512	; 0x200
   13698:	ldreq	r0, [r0, #32]
   1369c:	mvnne	r0, #99	; 0x63
   136a0:	ldr	r1, [r9, #24]
   136a4:	ands	r2, r3, #16
   136a8:	beq	136c8 <__assert_fail@plt+0x20c4>
   136ac:	tst	r3, #1
   136b0:	moveq	r2, #32768	; 0x8000
   136b4:	beq	136c8 <__assert_fail@plt+0x20c4>
   136b8:	ldr	r2, [r9, #48]	; 0x30
   136bc:	cmp	r2, #0
   136c0:	movne	r2, #32768	; 0x8000
   136c4:	moveq	r2, #0
   136c8:	add	r3, sp, #60	; 0x3c
   136cc:	bl	15d0c <__assert_fail@plt+0x4708>
   136d0:	str	r0, [r9, #12]
   136d4:	cmp	r0, #0
   136d8:	beq	137cc <__assert_fail@plt+0x21c8>
   136dc:	ldrh	r3, [r9, #56]	; 0x38
   136e0:	cmp	r3, #11
   136e4:	beq	13800 <__assert_fail@plt+0x21fc>
   136e8:	ldr	r3, [r5, #48]	; 0x30
   136ec:	tst	r3, #256	; 0x100
   136f0:	bne	13818 <__assert_fail@plt+0x2214>
   136f4:	ldr	r3, [r5, #44]	; 0x2c
   136f8:	cmp	r3, #0
   136fc:	ldr	r3, [pc, #2136]	; 13f5c <__assert_fail@plt+0x2958>
   13700:	mvnne	r3, #0
   13704:	str	r3, [sp, #24]
   13708:	ldr	r3, [sp, #40]	; 0x28
   1370c:	cmp	r3, #2
   13710:	beq	13908 <__assert_fail@plt+0x2304>
   13714:	ldr	r3, [r5, #48]	; 0x30
   13718:	and	r3, r3, #56	; 0x38
   1371c:	cmp	r3, #24
   13720:	beq	13860 <__assert_fail@plt+0x225c>
   13724:	ldr	r3, [sp, #40]	; 0x28
   13728:	cmp	r3, #3
   1372c:	movne	r6, #0
   13730:	moveq	r6, #1
   13734:	mov	r4, #1
   13738:	ldr	r3, [r5, #48]	; 0x30
   1373c:	tst	r3, #512	; 0x200
   13740:	bne	138f0 <__assert_fail@plt+0x22ec>
   13744:	ldr	r2, [sp, #60]	; 0x3c
   13748:	cmp	r2, #0
   1374c:	blt	13770 <__assert_fail@plt+0x216c>
   13750:	mov	r3, #0
   13754:	mov	r1, r9
   13758:	mov	r0, r5
   1375c:	bl	132c0 <__assert_fail@plt+0x1cbc>
   13760:	cmp	r0, #0
   13764:	moveq	r3, #1
   13768:	streq	r3, [sp, #52]	; 0x34
   1376c:	beq	135c0 <__assert_fail@plt+0x1fbc>
   13770:	tst	r4, r6
   13774:	beq	13784 <__assert_fail@plt+0x2180>
   13778:	bl	11484 <__errno_location@plt>
   1377c:	ldr	r3, [r0]
   13780:	str	r3, [r9, #32]
   13784:	ldrh	r3, [r9, #58]	; 0x3a
   13788:	orr	r3, r3, #1
   1378c:	strh	r3, [r9, #58]	; 0x3a
   13790:	ldr	r0, [r9, #12]
   13794:	bl	115ec <closedir@plt>
   13798:	mov	r3, #0
   1379c:	str	r3, [r9, #12]
   137a0:	ldr	r3, [r5, #48]	; 0x30
   137a4:	tst	r3, #512	; 0x200
   137a8:	beq	137bc <__assert_fail@plt+0x21b8>
   137ac:	ldr	r0, [sp, #60]	; 0x3c
   137b0:	cmp	r0, #0
   137b4:	blt	137bc <__assert_fail@plt+0x21b8>
   137b8:	bl	115d4 <close@plt>
   137bc:	mov	r3, #0
   137c0:	str	r3, [r9, #12]
   137c4:	str	r3, [sp, #52]	; 0x34
   137c8:	b	135c0 <__assert_fail@plt+0x1fbc>
   137cc:	ldr	r3, [sp, #40]	; 0x28
   137d0:	cmp	r3, #3
   137d4:	movne	r3, #0
   137d8:	strne	r3, [sp, #8]
   137dc:	bne	13a2c <__assert_fail@plt+0x2428>
   137e0:	mov	r3, #4
   137e4:	strh	r3, [r9, #56]	; 0x38
   137e8:	bl	11484 <__errno_location@plt>
   137ec:	ldr	r3, [r0]
   137f0:	str	r3, [r9, #32]
   137f4:	mov	r3, #0
   137f8:	str	r3, [sp, #8]
   137fc:	b	13a2c <__assert_fail@plt+0x2428>
   13800:	mov	r2, #0
   13804:	mov	r1, r9
   13808:	mov	r0, r5
   1380c:	bl	12be4 <__assert_fail@plt+0x15e0>
   13810:	strh	r0, [r9, #56]	; 0x38
   13814:	b	136f4 <__assert_fail@plt+0x20f0>
   13818:	mov	r1, r9
   1381c:	mov	r0, r5
   13820:	bl	134a8 <__assert_fail@plt+0x1ea4>
   13824:	mov	r2, #0
   13828:	mov	r1, r9
   1382c:	mov	r0, r5
   13830:	bl	12be4 <__assert_fail@plt+0x15e0>
   13834:	mov	r1, r9
   13838:	mov	r0, r5
   1383c:	bl	13124 <__assert_fail@plt+0x1b20>
   13840:	cmp	r0, #0
   13844:	bne	136f4 <__assert_fail@plt+0x20f0>
   13848:	bl	11484 <__errno_location@plt>
   1384c:	mov	r3, #12
   13850:	str	r3, [r0]
   13854:	mov	r3, #0
   13858:	str	r3, [sp, #8]
   1385c:	b	13a2c <__assert_fail@plt+0x2428>
   13860:	ldr	r3, [r9, #84]	; 0x54
   13864:	cmp	r3, #2
   13868:	bne	13724 <__assert_fail@plt+0x2120>
   1386c:	ldr	r1, [sp, #60]	; 0x3c
   13870:	mov	r0, r9
   13874:	bl	13008 <__assert_fail@plt+0x1a04>
   13878:	ldr	r3, [pc, #1760]	; 13f60 <__assert_fail@plt+0x295c>
   1387c:	cmp	r0, r3
   13880:	beq	138d8 <__assert_fail@plt+0x22d4>
   13884:	bgt	138c0 <__assert_fail@plt+0x22bc>
   13888:	ldr	r3, [pc, #1748]	; 13f64 <__assert_fail@plt+0x2960>
   1388c:	cmp	r0, r3
   13890:	beq	138d8 <__assert_fail@plt+0x22d4>
   13894:	cmp	r0, #0
   13898:	beq	138d8 <__assert_fail@plt+0x22d4>
   1389c:	ldr	r3, [sp, #40]	; 0x28
   138a0:	cmp	r3, #3
   138a4:	moveq	r6, #1
   138a8:	movne	r6, #0
   138ac:	movne	r3, #0
   138b0:	strne	r3, [sp, #52]	; 0x34
   138b4:	bne	135c0 <__assert_fail@plt+0x1fbc>
   138b8:	mov	r4, #0
   138bc:	b	13738 <__assert_fail@plt+0x2134>
   138c0:	ldr	r3, [pc, #1696]	; 13f68 <__assert_fail@plt+0x2964>
   138c4:	cmp	r0, r3
   138c8:	beq	138d8 <__assert_fail@plt+0x22d4>
   138cc:	ldr	r3, [pc, #1688]	; 13f6c <__assert_fail@plt+0x2968>
   138d0:	cmp	r0, r3
   138d4:	bne	1389c <__assert_fail@plt+0x2298>
   138d8:	ldr	r3, [sp, #40]	; 0x28
   138dc:	cmp	r3, #3
   138e0:	movne	r6, #0
   138e4:	moveq	r6, #1
   138e8:	mov	r4, #1
   138ec:	b	13738 <__assert_fail@plt+0x2134>
   138f0:	mov	r2, #3
   138f4:	ldr	r1, [pc, #1652]	; 13f70 <__assert_fail@plt+0x296c>
   138f8:	ldr	r0, [sp, #60]	; 0x3c
   138fc:	bl	190c4 <__assert_fail@plt+0x7ac0>
   13900:	str	r0, [sp, #60]	; 0x3c
   13904:	b	13744 <__assert_fail@plt+0x2140>
   13908:	mov	r3, #0
   1390c:	str	r3, [sp, #52]	; 0x34
   13910:	b	135c0 <__assert_fail@plt+0x1fbc>
   13914:	ldr	r3, [sp, #16]
   13918:	ldr	r3, [r3]
   1391c:	cmp	r3, #0
   13920:	beq	1394c <__assert_fail@plt+0x2348>
   13924:	str	r3, [r9, #32]
   13928:	ldr	r3, [sp, #44]	; 0x2c
   1392c:	cmp	r8, #0
   13930:	cmpeq	r3, #0
   13934:	movne	r3, #1
   13938:	moveq	r3, #0
   1393c:	cmp	r3, #0
   13940:	movne	r3, #7
   13944:	moveq	r3, #4
   13948:	strh	r3, [r9, #56]	; 0x38
   1394c:	ldr	r0, [r9, #12]
   13950:	cmp	r0, #0
   13954:	beq	13964 <__assert_fail@plt+0x2360>
   13958:	bl	115ec <closedir@plt>
   1395c:	mov	r3, #0
   13960:	str	r3, [r9, #12]
   13964:	ldr	r3, [sp, #36]	; 0x24
   13968:	cmp	r3, #0
   1396c:	bne	13dac <__assert_fail@plt+0x27a8>
   13970:	ldr	r3, [r5, #48]	; 0x30
   13974:	tst	r3, #4
   13978:	beq	139a4 <__assert_fail@plt+0x23a0>
   1397c:	ldr	r3, [r5, #36]	; 0x24
   13980:	ldr	r2, [sp, #12]
   13984:	cmp	r8, #0
   13988:	cmpne	r3, r2
   1398c:	ldreq	r3, [sp, #28]
   13990:	subeq	r3, r3, #1
   13994:	streq	r3, [sp, #28]
   13998:	mov	r3, #0
   1399c:	ldr	r2, [sp, #28]
   139a0:	strb	r3, [r2]
   139a4:	ldr	r3, [sp, #52]	; 0x34
   139a8:	ldr	r2, [sp, #44]	; 0x2c
   139ac:	cmp	r2, #0
   139b0:	movne	r3, #0
   139b4:	andeq	r3, r3, #1
   139b8:	cmp	r3, #0
   139bc:	beq	139f4 <__assert_fail@plt+0x23f0>
   139c0:	ldr	r3, [sp, #40]	; 0x28
   139c4:	cmp	r8, #0
   139c8:	cmpne	r3, #1
   139cc:	bne	139f4 <__assert_fail@plt+0x23f0>
   139d0:	ldr	r3, [r9, #48]	; 0x30
   139d4:	cmp	r3, #0
   139d8:	bne	13e2c <__assert_fail@plt+0x2828>
   139dc:	mov	r0, r5
   139e0:	bl	13270 <__assert_fail@plt+0x1c6c>
   139e4:	adds	r0, r0, #0
   139e8:	movne	r0, #1
   139ec:	cmp	r0, #0
   139f0:	bne	13e4c <__assert_fail@plt+0x2848>
   139f4:	cmp	r8, #0
   139f8:	beq	13e74 <__assert_fail@plt+0x2870>
   139fc:	ldr	r3, [sp, #48]	; 0x30
   13a00:	cmp	r3, #0
   13a04:	bne	13eac <__assert_fail@plt+0x28a8>
   13a08:	ldr	r3, [r5, #44]	; 0x2c
   13a0c:	cmp	r3, #0
   13a10:	cmpne	r8, #1
   13a14:	bls	13a2c <__assert_fail@plt+0x2428>
   13a18:	mov	r2, r8
   13a1c:	ldr	r1, [sp, #8]
   13a20:	mov	r0, r5
   13a24:	bl	12d3c <__assert_fail@plt+0x1738>
   13a28:	str	r0, [sp, #8]
   13a2c:	ldr	r0, [sp, #8]
   13a30:	add	sp, sp, #68	; 0x44
   13a34:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13a38:	ldrb	r3, [r7, #20]
   13a3c:	cmp	r3, #0
   13a40:	beq	13da4 <__assert_fail@plt+0x27a0>
   13a44:	ldrh	r3, [r7, #20]
   13a48:	cmp	r3, #46	; 0x2e
   13a4c:	bne	13bfc <__assert_fail@plt+0x25f8>
   13a50:	ldr	r4, [sp, #4]
   13a54:	b	13bb8 <__assert_fail@plt+0x25b4>
   13a58:	ldr	fp, [r5, #24]
   13a5c:	ldr	r3, [sp, #32]
   13a60:	add	r1, r3, #2
   13a64:	add	r1, r1, r6
   13a68:	mov	r0, r5
   13a6c:	bl	12b74 <__assert_fail@plt+0x1570>
   13a70:	cmp	r0, #0
   13a74:	beq	13aac <__assert_fail@plt+0x24a8>
   13a78:	ldr	r3, [r5, #24]
   13a7c:	cmp	fp, r3
   13a80:	beq	13af4 <__assert_fail@plt+0x24f0>
   13a84:	ldr	r2, [r5, #48]	; 0x30
   13a88:	tst	r2, #4
   13a8c:	ldrne	r2, [sp, #12]
   13a90:	addne	r3, r3, r2
   13a94:	strne	r3, [sp, #28]
   13a98:	ldr	fp, [r5, #36]	; 0x24
   13a9c:	ldr	r3, [sp, #12]
   13aa0:	sub	fp, fp, r3
   13aa4:	str	r0, [sp, #36]	; 0x24
   13aa8:	b	13c2c <__assert_fail@plt+0x2628>
   13aac:	ldr	r7, [sp, #16]
   13ab0:	ldr	r6, [r7]
   13ab4:	mov	r0, r4
   13ab8:	bl	193bc <__assert_fail@plt+0x7db8>
   13abc:	ldr	r0, [sp, #8]
   13ac0:	bl	12f58 <__assert_fail@plt+0x1954>
   13ac4:	ldr	r0, [r9, #12]
   13ac8:	bl	115ec <closedir@plt>
   13acc:	mov	r2, #0
   13ad0:	str	r2, [r9, #12]
   13ad4:	mov	r3, #7
   13ad8:	strh	r3, [r9, #56]	; 0x38
   13adc:	ldr	r3, [r5, #48]	; 0x30
   13ae0:	orr	r3, r3, #8192	; 0x2000
   13ae4:	str	r3, [r5, #48]	; 0x30
   13ae8:	str	r6, [r7]
   13aec:	str	r2, [sp, #8]
   13af0:	b	13a2c <__assert_fail@plt+0x2428>
   13af4:	ldr	r0, [sp, #36]	; 0x24
   13af8:	b	13a98 <__assert_fail@plt+0x2494>
   13afc:	mov	r0, r4
   13b00:	bl	193bc <__assert_fail@plt+0x7db8>
   13b04:	ldr	r0, [sp, #8]
   13b08:	bl	12f58 <__assert_fail@plt+0x1954>
   13b0c:	ldr	r0, [r9, #12]
   13b10:	bl	115ec <closedir@plt>
   13b14:	mov	r2, #0
   13b18:	str	r2, [r9, #12]
   13b1c:	mov	r3, #7
   13b20:	strh	r3, [r9, #56]	; 0x38
   13b24:	ldr	r3, [r5, #48]	; 0x30
   13b28:	orr	r3, r3, #8192	; 0x2000
   13b2c:	str	r3, [r5, #48]	; 0x30
   13b30:	mov	r3, #36	; 0x24
   13b34:	ldr	r1, [sp, #16]
   13b38:	str	r3, [r1]
   13b3c:	str	r2, [sp, #8]
   13b40:	b	13a2c <__assert_fail@plt+0x2428>
   13b44:	ldr	r3, [r4, #28]
   13b48:	str	r3, [r4, #24]
   13b4c:	ldr	r2, [r4, #52]	; 0x34
   13b50:	add	r2, r2, #1
   13b54:	add	r1, r4, #168	; 0xa8
   13b58:	ldr	r0, [sp, #28]
   13b5c:	bl	1128c <memmove@plt>
   13b60:	b	13c68 <__assert_fail@plt+0x2664>
   13b64:	mov	r3, sl
   13b68:	mov	r2, #16384	; 0x4000
   13b6c:	str	r2, [r4, #80]	; 0x50
   13b70:	cmp	r3, #0
   13b74:	movne	r2, #1
   13b78:	moveq	r2, #2
   13b7c:	mov	r3, #0
   13b80:	strd	r2, [r4, #112]	; 0x70
   13b84:	str	sl, [r4, #8]
   13b88:	ldr	r3, [sp, #8]
   13b8c:	cmp	r3, #0
   13b90:	ldrne	r3, [sp, #4]
   13b94:	strne	r4, [r3, #8]
   13b98:	streq	r4, [sp, #8]
   13b9c:	ldr	r3, [pc, #976]	; 13f74 <__assert_fail@plt+0x2970>
   13ba0:	cmp	r8, r3
   13ba4:	beq	13d58 <__assert_fail@plt+0x2754>
   13ba8:	add	r8, r8, #1
   13bac:	ldr	r3, [sp, #24]
   13bb0:	cmp	r8, r3
   13bb4:	bcs	13964 <__assert_fail@plt+0x2360>
   13bb8:	str	r4, [sp, #4]
   13bbc:	ldr	r3, [r9, #12]
   13bc0:	cmp	r3, #0
   13bc4:	beq	13964 <__assert_fail@plt+0x2360>
   13bc8:	bl	11484 <__errno_location@plt>
   13bcc:	str	r0, [sp, #16]
   13bd0:	str	sl, [r0]
   13bd4:	ldr	r0, [r9, #12]
   13bd8:	bl	11544 <readdir64@plt>
   13bdc:	subs	r7, r0, #0
   13be0:	beq	13914 <__assert_fail@plt+0x2310>
   13be4:	ldr	r3, [r5, #48]	; 0x30
   13be8:	tst	r3, #32
   13bec:	bne	13bfc <__assert_fail@plt+0x25f8>
   13bf0:	ldrb	r3, [r7, #19]
   13bf4:	cmp	r3, #46	; 0x2e
   13bf8:	beq	13a38 <__assert_fail@plt+0x2434>
   13bfc:	add	r4, r7, #19
   13c00:	mov	r0, r4
   13c04:	bl	11460 <strlen@plt>
   13c08:	mov	r6, r0
   13c0c:	mov	r2, r0
   13c10:	mov	r1, r4
   13c14:	mov	r0, r5
   13c18:	bl	12e10 <__assert_fail@plt+0x180c>
   13c1c:	subs	r4, r0, #0
   13c20:	beq	13aac <__assert_fail@plt+0x24a8>
   13c24:	cmp	fp, r6
   13c28:	bls	13a58 <__assert_fail@plt+0x2454>
   13c2c:	ldr	r3, [sp, #12]
   13c30:	adds	r6, r3, r6
   13c34:	bcs	13afc <__assert_fail@plt+0x24f8>
   13c38:	ldr	r3, [sp, #20]
   13c3c:	str	r3, [r4, #48]	; 0x30
   13c40:	ldr	r3, [r5]
   13c44:	str	r3, [r4, #4]
   13c48:	str	r6, [r4, #40]	; 0x28
   13c4c:	ldrd	r2, [r7]
   13c50:	strd	r2, [r4, #160]	; 0xa0
   13c54:	ldr	r3, [r5, #48]	; 0x30
   13c58:	tst	r3, #4
   13c5c:	addeq	r3, r4, #168	; 0xa8
   13c60:	streq	r3, [r4, #24]
   13c64:	bne	13b44 <__assert_fail@plt+0x2540>
   13c68:	ldr	r3, [r5, #44]	; 0x2c
   13c6c:	cmp	r3, #0
   13c70:	beq	13c80 <__assert_fail@plt+0x267c>
   13c74:	ldr	r3, [r5, #48]	; 0x30
   13c78:	tst	r3, #1024	; 0x400
   13c7c:	beq	13d40 <__assert_fail@plt+0x273c>
   13c80:	ldr	r3, [r5, #48]	; 0x30
   13c84:	tst	r3, #8
   13c88:	beq	13f10 <__assert_fail@plt+0x290c>
   13c8c:	ldrb	r2, [r7, #18]
   13c90:	tst	r2, #251	; 0xfb
   13c94:	beq	13f10 <__assert_fail@plt+0x290c>
   13c98:	lsr	r3, r3, #4
   13c9c:	and	r3, r3, #1
   13ca0:	cmp	r2, #10
   13ca4:	orrne	r3, r3, #1
   13ca8:	cmp	r3, #0
   13cac:	beq	13f10 <__assert_fail@plt+0x290c>
   13cb0:	mov	r2, #11
   13cb4:	strh	r2, [r4, #56]	; 0x38
   13cb8:	ldrb	r2, [r7, #18]
   13cbc:	sub	r2, r2, #1
   13cc0:	cmp	r2, #11
   13cc4:	ldrls	pc, [pc, r2, lsl #2]
   13cc8:	b	13d30 <__assert_fail@plt+0x272c>
   13ccc:	andeq	r3, r1, r0, lsl #26
   13cd0:	andeq	r3, r1, r8, lsr sp
   13cd4:	andeq	r3, r1, r0, lsr sp
   13cd8:	andeq	r3, r1, r8, ror #22
   13cdc:	andeq	r3, r1, r0, lsr sp
   13ce0:	ldrdeq	r3, [r1], -r4
   13ce4:	andeq	r3, r1, r0, lsr sp
   13ce8:	andeq	r3, r1, r8, lsl sp
   13cec:	andeq	r3, r1, r0, lsr sp
   13cf0:	andeq	r3, r1, ip, lsl #26
   13cf4:	andeq	r3, r1, r0, lsr sp
   13cf8:	andeq	r3, r1, r4, lsr #26
   13cfc:	mov	r3, sl
   13d00:	mov	r2, #4096	; 0x1000
   13d04:	b	13b6c <__assert_fail@plt+0x2568>
   13d08:	mov	r3, sl
   13d0c:	mov	r2, #40960	; 0xa000
   13d10:	b	13b6c <__assert_fail@plt+0x2568>
   13d14:	mov	r3, sl
   13d18:	mov	r2, #32768	; 0x8000
   13d1c:	b	13b6c <__assert_fail@plt+0x2568>
   13d20:	mov	r3, sl
   13d24:	mov	r2, #49152	; 0xc000
   13d28:	b	13b6c <__assert_fail@plt+0x2568>
   13d2c:	mov	r3, sl
   13d30:	mov	r2, sl
   13d34:	b	13b6c <__assert_fail@plt+0x2568>
   13d38:	mov	r2, #8192	; 0x2000
   13d3c:	b	13b6c <__assert_fail@plt+0x2568>
   13d40:	mov	r2, sl
   13d44:	mov	r1, r4
   13d48:	mov	r0, r5
   13d4c:	bl	12be4 <__assert_fail@plt+0x15e0>
   13d50:	strh	r0, [r4, #56]	; 0x38
   13d54:	b	13b84 <__assert_fail@plt+0x2580>
   13d58:	ldr	r3, [r5, #44]	; 0x2c
   13d5c:	cmp	r3, #0
   13d60:	bne	13ba8 <__assert_fail@plt+0x25a4>
   13d64:	ldr	r1, [sp, #60]	; 0x3c
   13d68:	mov	r0, r9
   13d6c:	bl	13008 <__assert_fail@plt+0x1a04>
   13d70:	ldr	r3, [pc, #488]	; 13f60 <__assert_fail@plt+0x295c>
   13d74:	cmp	r0, r3
   13d78:	beq	13d9c <__assert_fail@plt+0x2798>
   13d7c:	ldr	r3, [pc, #500]	; 13f78 <__assert_fail@plt+0x2974>
   13d80:	cmp	r0, r3
   13d84:	beq	13d9c <__assert_fail@plt+0x2798>
   13d88:	ldr	r3, [pc, #468]	; 13f64 <__assert_fail@plt+0x2960>
   13d8c:	cmp	r0, r3
   13d90:	movne	r3, #1
   13d94:	strne	r3, [sp, #48]	; 0x30
   13d98:	bne	13ba8 <__assert_fail@plt+0x25a4>
   13d9c:	str	sl, [sp, #48]	; 0x30
   13da0:	b	13ba8 <__assert_fail@plt+0x25a4>
   13da4:	ldr	r4, [sp, #4]
   13da8:	b	13bb8 <__assert_fail@plt+0x25b4>
   13dac:	ldr	r0, [r5, #24]
   13db0:	ldr	r1, [r5, #4]
   13db4:	cmp	r1, #0
   13db8:	beq	13de8 <__assert_fail@plt+0x27e4>
   13dbc:	ldr	r3, [r1, #24]
   13dc0:	add	r2, r1, #168	; 0xa8
   13dc4:	cmp	r3, r2
   13dc8:	ldrne	r2, [r1, #28]
   13dcc:	subne	r3, r3, r2
   13dd0:	addne	r3, r0, r3
   13dd4:	strne	r3, [r1, #24]
   13dd8:	str	r0, [r1, #28]
   13ddc:	ldr	r1, [r1, #8]
   13de0:	cmp	r1, #0
   13de4:	bne	13dbc <__assert_fail@plt+0x27b8>
   13de8:	ldr	r3, [sp, #8]
   13dec:	ldr	r2, [r3, #48]	; 0x30
   13df0:	cmp	r2, #0
   13df4:	blt	13970 <__assert_fail@plt+0x236c>
   13df8:	ldr	r2, [r3, #24]
   13dfc:	add	r1, r3, #168	; 0xa8
   13e00:	cmp	r2, r1
   13e04:	ldrne	r1, [r3, #28]
   13e08:	subne	r2, r2, r1
   13e0c:	addne	r2, r0, r2
   13e10:	strne	r2, [r3, #24]
   13e14:	str	r0, [r3, #28]
   13e18:	ldr	r2, [r3, #8]
   13e1c:	cmp	r2, #0
   13e20:	ldreq	r2, [r3, #4]
   13e24:	mov	r3, r2
   13e28:	b	13dec <__assert_fail@plt+0x27e8>
   13e2c:	ldr	r3, [pc, #328]	; 13f7c <__assert_fail@plt+0x2978>
   13e30:	mvn	r2, #0
   13e34:	ldr	r1, [r9, #4]
   13e38:	mov	r0, r5
   13e3c:	bl	132c0 <__assert_fail@plt+0x1cbc>
   13e40:	adds	r0, r0, #0
   13e44:	movne	r0, #1
   13e48:	b	139ec <__assert_fail@plt+0x23e8>
   13e4c:	mov	r3, #7
   13e50:	strh	r3, [r9, #56]	; 0x38
   13e54:	ldr	r3, [r5, #48]	; 0x30
   13e58:	orr	r3, r3, #8192	; 0x2000
   13e5c:	str	r3, [r5, #48]	; 0x30
   13e60:	ldr	r0, [sp, #8]
   13e64:	bl	12f58 <__assert_fail@plt+0x1954>
   13e68:	mov	r3, #0
   13e6c:	str	r3, [sp, #8]
   13e70:	b	13a2c <__assert_fail@plt+0x2428>
   13e74:	ldr	r3, [sp, #40]	; 0x28
   13e78:	cmp	r3, #3
   13e7c:	beq	13e94 <__assert_fail@plt+0x2890>
   13e80:	ldr	r0, [sp, #8]
   13e84:	bl	12f58 <__assert_fail@plt+0x1954>
   13e88:	mov	r3, #0
   13e8c:	str	r3, [sp, #8]
   13e90:	b	13a2c <__assert_fail@plt+0x2428>
   13e94:	ldrh	r3, [r9, #56]	; 0x38
   13e98:	cmp	r3, #4
   13e9c:	cmpne	r3, #7
   13ea0:	movne	r3, #6
   13ea4:	strhne	r3, [r9, #56]	; 0x38
   13ea8:	b	13e80 <__assert_fail@plt+0x287c>
   13eac:	ldr	r3, [pc, #204]	; 13f80 <__assert_fail@plt+0x297c>
   13eb0:	str	r3, [r5, #44]	; 0x2c
   13eb4:	mov	r2, r8
   13eb8:	ldr	r1, [sp, #8]
   13ebc:	mov	r0, r5
   13ec0:	bl	12d3c <__assert_fail@plt+0x1738>
   13ec4:	str	r0, [sp, #8]
   13ec8:	mov	r3, #0
   13ecc:	str	r3, [r5, #44]	; 0x2c
   13ed0:	b	13a2c <__assert_fail@plt+0x2428>
   13ed4:	mov	r3, #24576	; 0x6000
   13ed8:	str	r3, [r4, #80]	; 0x50
   13edc:	mov	r2, #1
   13ee0:	mov	r3, #0
   13ee4:	b	13b80 <__assert_fail@plt+0x257c>
   13ee8:	mov	r3, #24576	; 0x6000
   13eec:	str	r3, [r4, #80]	; 0x50
   13ef0:	mov	r2, #2
   13ef4:	mov	r3, #0
   13ef8:	b	13b80 <__assert_fail@plt+0x257c>
   13efc:	mov	r3, #8192	; 0x2000
   13f00:	str	r3, [r4, #80]	; 0x50
   13f04:	mov	r2, #2
   13f08:	mov	r3, #0
   13f0c:	b	13b80 <__assert_fail@plt+0x257c>
   13f10:	mov	r3, #11
   13f14:	strh	r3, [r4, #56]	; 0x38
   13f18:	ldrb	r3, [r7, #18]
   13f1c:	sub	r3, r3, #1
   13f20:	cmp	r3, #11
   13f24:	ldrls	pc, [pc, r3, lsl #2]
   13f28:	b	13d2c <__assert_fail@plt+0x2728>
   13f2c:	strdeq	r3, [r1], -ip
   13f30:	strdeq	r3, [r1], -ip
   13f34:	andeq	r3, r1, ip, lsr #26
   13f38:	andeq	r3, r1, r4, ror #22
   13f3c:	andeq	r3, r1, ip, lsr #26
   13f40:	andeq	r3, r1, r8, ror #29
   13f44:	andeq	r3, r1, ip, lsr #26
   13f48:	andeq	r3, r1, r4, lsl sp
   13f4c:	andeq	r3, r1, ip, lsr #26
   13f50:	andeq	r3, r1, r8, lsl #26
   13f54:	andeq	r3, r1, ip, lsr #26
   13f58:	andeq	r3, r1, r0, lsr #26
   13f5c:	andeq	r8, r1, r0, lsr #13
   13f60:	andeq	r6, r0, r9, ror #18
   13f64:			; <UNDEFINED> instruction: 0xff534d42
   13f68:	andeq	r9, r0, r0, lsr #31
   13f6c:	movtpl	r4, #24911	; 0x614f
   13f70:	andeq	r0, r0, r6, lsl #8
   13f74:	andeq	r2, r0, r0, lsl r7
   13f78:			; <UNDEFINED> instruction: 0x01021994
   13f7c:	andeq	sl, r1, r8, ror #30
   13f80:	andeq	r2, r1, ip, lsr fp
   13f84:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13f88:	sub	sp, sp, #20
   13f8c:	bic	r3, r1, #4080	; 0xff0
   13f90:	bics	r3, r3, #15
   13f94:	bne	140b4 <__assert_fail@plt+0x2ab0>
   13f98:	mov	r7, r0
   13f9c:	mov	r9, r1
   13fa0:	mov	fp, r2
   13fa4:	and	r3, r1, #516	; 0x204
   13fa8:	cmp	r3, #516	; 0x204
   13fac:	beq	140c8 <__assert_fail@plt+0x2ac4>
   13fb0:	tst	r1, #18
   13fb4:	beq	140dc <__assert_fail@plt+0x2ad8>
   13fb8:	mov	r1, #96	; 0x60
   13fbc:	mov	r0, #1
   13fc0:	bl	18ccc <__assert_fail@plt+0x76c8>
   13fc4:	subs	r6, r0, #0
   13fc8:	beq	142f8 <__assert_fail@plt+0x2cf4>
   13fcc:	str	fp, [r6, #44]	; 0x2c
   13fd0:	tst	r9, #2
   13fd4:	streq	r9, [r6, #48]	; 0x30
   13fd8:	bicne	r3, r9, #512	; 0x200
   13fdc:	orrne	r3, r3, #4
   13fe0:	strne	r3, [r6, #48]	; 0x30
   13fe4:	mvn	r3, #99	; 0x63
   13fe8:	str	r3, [r6, #32]
   13fec:	ldr	r0, [r7]
   13ff0:	cmp	r0, #0
   13ff4:	beq	140f0 <__assert_fail@plt+0x2aec>
   13ff8:	mov	r5, r7
   13ffc:	mov	r4, #0
   14000:	bl	11460 <strlen@plt>
   14004:	cmp	r4, r0
   14008:	movcc	r4, r0
   1400c:	ldr	r0, [r5, #4]!
   14010:	cmp	r0, #0
   14014:	bne	14000 <__assert_fail@plt+0x29fc>
   14018:	add	r1, r4, #1
   1401c:	cmp	r1, #4096	; 0x1000
   14020:	movcc	r1, #4096	; 0x1000
   14024:	mov	r0, r6
   14028:	bl	12b74 <__assert_fail@plt+0x1570>
   1402c:	subs	sl, r0, #0
   14030:	beq	142ec <__assert_fail@plt+0x2ce8>
   14034:	ldr	r3, [r7]
   14038:	cmp	r3, #0
   1403c:	beq	14304 <__assert_fail@plt+0x2d00>
   14040:	mov	r2, #0
   14044:	ldr	r1, [pc, #716]	; 14318 <__assert_fail@plt+0x2d14>
   14048:	mov	r0, r6
   1404c:	bl	12e10 <__assert_fail@plt+0x180c>
   14050:	subs	r3, r0, #0
   14054:	mov	r2, r3
   14058:	str	r3, [sp, #8]
   1405c:	beq	142e4 <__assert_fail@plt+0x2ce0>
   14060:	mvn	r3, #0
   14064:	str	r3, [r2, #48]	; 0x30
   14068:	cmp	fp, #0
   1406c:	beq	1407c <__assert_fail@plt+0x2a78>
   14070:	ldr	sl, [r6, #48]	; 0x30
   14074:	lsr	sl, sl, #10
   14078:	and	sl, sl, #1
   1407c:	ldr	r4, [r7]
   14080:	cmp	r4, #0
   14084:	beq	14294 <__assert_fail@plt+0x2c90>
   14088:	mov	r3, #0
   1408c:	mov	r5, r3
   14090:	str	r3, [sp, #12]
   14094:	mov	r8, r3
   14098:	lsr	r9, r9, #11
   1409c:	eor	r9, r9, #1
   140a0:	and	r3, r9, #1
   140a4:	mov	r9, r5
   140a8:	str	r6, [sp, #4]
   140ac:	mov	r6, r3
   140b0:	b	14168 <__assert_fail@plt+0x2b64>
   140b4:	bl	11484 <__errno_location@plt>
   140b8:	mov	r3, #22
   140bc:	str	r3, [r0]
   140c0:	mov	r6, #0
   140c4:	b	142f8 <__assert_fail@plt+0x2cf4>
   140c8:	bl	11484 <__errno_location@plt>
   140cc:	mov	r3, #22
   140d0:	str	r3, [r0]
   140d4:	mov	r6, #0
   140d8:	b	142f8 <__assert_fail@plt+0x2cf4>
   140dc:	bl	11484 <__errno_location@plt>
   140e0:	mov	r3, #22
   140e4:	str	r3, [r0]
   140e8:	mov	r6, #0
   140ec:	b	142f8 <__assert_fail@plt+0x2cf4>
   140f0:	mov	r4, #0
   140f4:	b	14018 <__assert_fail@plt+0x2a14>
   140f8:	mov	r1, r4
   140fc:	ldr	r0, [sp, #4]
   14100:	bl	12e10 <__assert_fail@plt+0x180c>
   14104:	subs	r4, r0, #0
   14108:	beq	142d0 <__assert_fail@plt+0x2ccc>
   1410c:	str	r9, [r4, #48]	; 0x30
   14110:	ldr	r3, [sp, #8]
   14114:	str	r3, [r4, #4]
   14118:	add	r3, r4, #168	; 0xa8
   1411c:	str	r3, [r4, #24]
   14120:	cmp	r5, #0
   14124:	moveq	r3, #0
   14128:	andne	r3, sl, #1
   1412c:	cmp	r3, #0
   14130:	beq	141d0 <__assert_fail@plt+0x2bcc>
   14134:	mov	r3, #11
   14138:	strh	r3, [r4, #56]	; 0x38
   1413c:	mov	r2, #2
   14140:	mov	r3, #0
   14144:	strd	r2, [r4, #112]	; 0x70
   14148:	cmp	fp, #0
   1414c:	beq	141e8 <__assert_fail@plt+0x2be4>
   14150:	str	r5, [r4, #8]
   14154:	mov	r5, r4
   14158:	add	r8, r8, #1
   1415c:	ldr	r4, [r7, #4]!
   14160:	cmp	r4, #0
   14164:	beq	14208 <__assert_fail@plt+0x2c04>
   14168:	mov	r0, r4
   1416c:	bl	11460 <strlen@plt>
   14170:	mov	r2, r0
   14174:	cmp	r0, #2
   14178:	movls	r3, #0
   1417c:	andhi	r3, r6, #1
   14180:	cmp	r3, #0
   14184:	beq	140f8 <__assert_fail@plt+0x2af4>
   14188:	add	r3, r4, r0
   1418c:	ldrb	r3, [r3, #-1]
   14190:	cmp	r3, #47	; 0x2f
   14194:	bne	140f8 <__assert_fail@plt+0x2af4>
   14198:	cmp	r0, #1
   1419c:	bls	140f8 <__assert_fail@plt+0x2af4>
   141a0:	sub	r1, r0, #2
   141a4:	add	r3, r4, r1
   141a8:	ldrb	r1, [r4, r1]
   141ac:	cmp	r1, #47	; 0x2f
   141b0:	bne	140f8 <__assert_fail@plt+0x2af4>
   141b4:	sub	r2, r2, #1
   141b8:	cmp	r2, #1
   141bc:	beq	140f8 <__assert_fail@plt+0x2af4>
   141c0:	ldrb	r1, [r3, #-1]!
   141c4:	cmp	r1, #47	; 0x2f
   141c8:	beq	141b4 <__assert_fail@plt+0x2bb0>
   141cc:	b	140f8 <__assert_fail@plt+0x2af4>
   141d0:	mov	r2, r9
   141d4:	mov	r1, r4
   141d8:	ldr	r0, [sp, #4]
   141dc:	bl	12be4 <__assert_fail@plt+0x15e0>
   141e0:	strh	r0, [r4, #56]	; 0x38
   141e4:	b	14148 <__assert_fail@plt+0x2b44>
   141e8:	str	r9, [r4, #8]
   141ec:	cmp	r5, #0
   141f0:	ldrne	r3, [sp, #12]
   141f4:	strne	r4, [r3, #8]
   141f8:	strne	r4, [sp, #12]
   141fc:	streq	r4, [sp, #12]
   14200:	moveq	r5, r4
   14204:	b	14158 <__assert_fail@plt+0x2b54>
   14208:	ldr	r6, [sp, #4]
   1420c:	cmp	fp, #0
   14210:	cmpne	r8, #1
   14214:	bhi	1427c <__assert_fail@plt+0x2c78>
   14218:	mov	r2, #0
   1421c:	ldr	r1, [pc, #244]	; 14318 <__assert_fail@plt+0x2d14>
   14220:	mov	r0, r6
   14224:	bl	12e10 <__assert_fail@plt+0x180c>
   14228:	str	r0, [r6]
   1422c:	cmp	r0, #0
   14230:	beq	142d4 <__assert_fail@plt+0x2cd0>
   14234:	str	r5, [r0, #8]
   14238:	ldr	r3, [r6]
   1423c:	mov	r2, #9
   14240:	strh	r2, [r3, #56]	; 0x38
   14244:	ldr	r3, [r6]
   14248:	mov	r2, #1
   1424c:	str	r2, [r3, #48]	; 0x30
   14250:	mov	r0, r6
   14254:	bl	12e84 <__assert_fail@plt+0x1880>
   14258:	cmp	r0, #0
   1425c:	beq	142d4 <__assert_fail@plt+0x2cd0>
   14260:	ldr	r3, [r6, #48]	; 0x30
   14264:	tst	r3, #516	; 0x204
   14268:	beq	142ac <__assert_fail@plt+0x2ca8>
   1426c:	mvn	r1, #0
   14270:	add	r0, r6, #60	; 0x3c
   14274:	bl	15c10 <__assert_fail@plt+0x460c>
   14278:	b	142f8 <__assert_fail@plt+0x2cf4>
   1427c:	mov	r2, r8
   14280:	mov	r1, r5
   14284:	mov	r0, r6
   14288:	bl	12d3c <__assert_fail@plt+0x1738>
   1428c:	mov	r5, r0
   14290:	b	14218 <__assert_fail@plt+0x2c14>
   14294:	mov	r5, #0
   14298:	b	14218 <__assert_fail@plt+0x2c14>
   1429c:	mov	r3, #0
   142a0:	str	r3, [sp, #8]
   142a4:	mov	r5, r3
   142a8:	b	14218 <__assert_fail@plt+0x2c14>
   142ac:	ldr	r1, [pc, #104]	; 1431c <__assert_fail@plt+0x2d18>
   142b0:	mov	r0, r6
   142b4:	bl	12f08 <__assert_fail@plt+0x1904>
   142b8:	str	r0, [r6, #28]
   142bc:	cmp	r0, #0
   142c0:	ldrlt	r3, [r6, #48]	; 0x30
   142c4:	orrlt	r3, r3, #4
   142c8:	strlt	r3, [r6, #48]	; 0x30
   142cc:	b	1426c <__assert_fail@plt+0x2c68>
   142d0:	ldr	r6, [sp, #4]
   142d4:	mov	r0, r5
   142d8:	bl	12f58 <__assert_fail@plt+0x1954>
   142dc:	ldr	r0, [sp, #8]
   142e0:	bl	193bc <__assert_fail@plt+0x7db8>
   142e4:	ldr	r0, [r6, #24]
   142e8:	bl	193bc <__assert_fail@plt+0x7db8>
   142ec:	mov	r0, r6
   142f0:	bl	193bc <__assert_fail@plt+0x7db8>
   142f4:	mov	r6, #0
   142f8:	mov	r0, r6
   142fc:	add	sp, sp, #20
   14300:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14304:	cmp	fp, #0
   14308:	beq	1429c <__assert_fail@plt+0x2c98>
   1430c:	mov	r3, #0
   14310:	str	r3, [sp, #8]
   14314:	b	14070 <__assert_fail@plt+0x2a6c>
   14318:	andeq	sl, r1, r4, lsr #18
   1431c:	andeq	sl, r1, ip, ror #30
   14320:	push	{r4, r5, r6, lr}
   14324:	mov	r5, r0
   14328:	ldr	r0, [r0]
   1432c:	cmp	r0, #0
   14330:	beq	14368 <__assert_fail@plt+0x2d64>
   14334:	ldr	r3, [r0, #48]	; 0x30
   14338:	cmp	r3, #0
   1433c:	blt	143cc <__assert_fail@plt+0x2dc8>
   14340:	ldr	r4, [r0, #8]
   14344:	cmp	r4, #0
   14348:	ldreq	r4, [r0, #4]
   1434c:	bl	193bc <__assert_fail@plt+0x7db8>
   14350:	mov	r0, r4
   14354:	ldr	r3, [r4, #48]	; 0x30
   14358:	cmp	r3, #0
   1435c:	bge	14340 <__assert_fail@plt+0x2d3c>
   14360:	mov	r0, r4
   14364:	bl	193bc <__assert_fail@plt+0x7db8>
   14368:	ldr	r0, [r5, #4]
   1436c:	cmp	r0, #0
   14370:	beq	14378 <__assert_fail@plt+0x2d74>
   14374:	bl	12f58 <__assert_fail@plt+0x1954>
   14378:	ldr	r0, [r5, #8]
   1437c:	bl	193bc <__assert_fail@plt+0x7db8>
   14380:	ldr	r0, [r5, #24]
   14384:	bl	193bc <__assert_fail@plt+0x7db8>
   14388:	ldr	r3, [r5, #48]	; 0x30
   1438c:	tst	r3, #512	; 0x200
   14390:	beq	143d4 <__assert_fail@plt+0x2dd0>
   14394:	ldr	r0, [r5, #32]
   14398:	cmp	r0, #0
   1439c:	blt	143dc <__assert_fail@plt+0x2dd8>
   143a0:	bl	115d4 <close@plt>
   143a4:	cmp	r0, #0
   143a8:	beq	143dc <__assert_fail@plt+0x2dd8>
   143ac:	bl	11484 <__errno_location@plt>
   143b0:	ldr	r4, [r0]
   143b4:	add	r0, r5, #60	; 0x3c
   143b8:	bl	12fd4 <__assert_fail@plt+0x19d0>
   143bc:	ldr	r0, [r5, #52]	; 0x34
   143c0:	cmp	r0, #0
   143c4:	bne	143f4 <__assert_fail@plt+0x2df0>
   143c8:	b	143f8 <__assert_fail@plt+0x2df4>
   143cc:	mov	r4, r0
   143d0:	b	14360 <__assert_fail@plt+0x2d5c>
   143d4:	tst	r3, #4
   143d8:	beq	14418 <__assert_fail@plt+0x2e14>
   143dc:	add	r0, r5, #60	; 0x3c
   143e0:	bl	12fd4 <__assert_fail@plt+0x19d0>
   143e4:	ldr	r0, [r5, #52]	; 0x34
   143e8:	cmp	r0, #0
   143ec:	movne	r4, #0
   143f0:	beq	1446c <__assert_fail@plt+0x2e68>
   143f4:	bl	15708 <__assert_fail@plt+0x4104>
   143f8:	mov	r0, r5
   143fc:	bl	12f98 <__assert_fail@plt+0x1994>
   14400:	mov	r0, r5
   14404:	bl	193bc <__assert_fail@plt+0x7db8>
   14408:	cmp	r4, #0
   1440c:	bne	1445c <__assert_fail@plt+0x2e58>
   14410:	mov	r0, r4
   14414:	pop	{r4, r5, r6, pc}
   14418:	ldr	r0, [r5, #28]
   1441c:	bl	11568 <fchdir@plt>
   14420:	subs	r4, r0, #0
   14424:	beq	14430 <__assert_fail@plt+0x2e2c>
   14428:	bl	11484 <__errno_location@plt>
   1442c:	ldr	r4, [r0]
   14430:	ldr	r0, [r5, #28]
   14434:	bl	115d4 <close@plt>
   14438:	clz	r3, r4
   1443c:	lsr	r3, r3, #5
   14440:	cmp	r0, #0
   14444:	moveq	r3, #0
   14448:	cmp	r3, #0
   1444c:	beq	143b4 <__assert_fail@plt+0x2db0>
   14450:	bl	11484 <__errno_location@plt>
   14454:	ldr	r4, [r0]
   14458:	b	143b4 <__assert_fail@plt+0x2db0>
   1445c:	bl	11484 <__errno_location@plt>
   14460:	str	r4, [r0]
   14464:	mvn	r4, #0
   14468:	b	14410 <__assert_fail@plt+0x2e0c>
   1446c:	mov	r0, r5
   14470:	bl	12f98 <__assert_fail@plt+0x1994>
   14474:	mov	r0, r5
   14478:	bl	193bc <__assert_fail@plt+0x7db8>
   1447c:	mov	r4, #0
   14480:	b	14410 <__assert_fail@plt+0x2e0c>
   14484:	push	{r4, r5, r6, r7, r8, lr}
   14488:	ldr	r5, [r0]
   1448c:	cmp	r5, #0
   14490:	beq	14ad4 <__assert_fail@plt+0x34d0>
   14494:	ldr	r3, [r0, #48]	; 0x30
   14498:	tst	r3, #8192	; 0x2000
   1449c:	bne	14adc <__assert_fail@plt+0x34d8>
   144a0:	mov	r8, r0
   144a4:	ldrh	r3, [r5, #60]	; 0x3c
   144a8:	mov	r2, #3
   144ac:	strh	r2, [r5, #60]	; 0x3c
   144b0:	cmp	r3, #1
   144b4:	beq	14534 <__assert_fail@plt+0x2f30>
   144b8:	cmp	r3, #2
   144bc:	beq	1454c <__assert_fail@plt+0x2f48>
   144c0:	ldrh	r2, [r5, #56]	; 0x38
   144c4:	cmp	r2, #1
   144c8:	bne	14740 <__assert_fail@plt+0x313c>
   144cc:	cmp	r3, #4
   144d0:	beq	144f4 <__assert_fail@plt+0x2ef0>
   144d4:	ldr	r1, [r8, #48]	; 0x30
   144d8:	tst	r1, #64	; 0x40
   144dc:	beq	145ec <__assert_fail@plt+0x2fe8>
   144e0:	ldrd	r6, [r5, #64]	; 0x40
   144e4:	ldrd	r2, [r8, #16]
   144e8:	cmp	r7, r3
   144ec:	cmpeq	r6, r2
   144f0:	beq	145ec <__assert_fail@plt+0x2fe8>
   144f4:	ldrh	r3, [r5, #58]	; 0x3a
   144f8:	tst	r3, #2
   144fc:	bne	145e0 <__assert_fail@plt+0x2fdc>
   14500:	ldr	r0, [r8, #4]
   14504:	cmp	r0, #0
   14508:	beq	14518 <__assert_fail@plt+0x2f14>
   1450c:	bl	12f58 <__assert_fail@plt+0x1954>
   14510:	mov	r3, #0
   14514:	str	r3, [r8, #4]
   14518:	mov	r3, #6
   1451c:	strh	r3, [r5, #56]	; 0x38
   14520:	mov	r1, r5
   14524:	mov	r0, r8
   14528:	bl	134a8 <__assert_fail@plt+0x1ea4>
   1452c:	mov	r4, r5
   14530:	b	1481c <__assert_fail@plt+0x3218>
   14534:	mov	r2, #0
   14538:	mov	r1, r5
   1453c:	bl	12be4 <__assert_fail@plt+0x15e0>
   14540:	strh	r0, [r5, #56]	; 0x38
   14544:	mov	r4, r5
   14548:	b	1481c <__assert_fail@plt+0x3218>
   1454c:	ldrh	r2, [r5, #56]	; 0x38
   14550:	sub	r3, r2, #12
   14554:	uxth	r3, r3
   14558:	cmp	r3, #1
   1455c:	bls	1456c <__assert_fail@plt+0x2f68>
   14560:	cmp	r2, #1
   14564:	bne	14740 <__assert_fail@plt+0x313c>
   14568:	b	144d4 <__assert_fail@plt+0x2ed0>
   1456c:	mov	r2, #1
   14570:	mov	r1, r5
   14574:	bl	12be4 <__assert_fail@plt+0x15e0>
   14578:	strh	r0, [r5, #56]	; 0x38
   1457c:	cmp	r0, #1
   14580:	movne	r4, r5
   14584:	bne	1491c <__assert_fail@plt+0x3318>
   14588:	ldr	r3, [r8, #48]	; 0x30
   1458c:	tst	r3, #4
   14590:	movne	r4, r5
   14594:	bne	1491c <__assert_fail@plt+0x3318>
   14598:	ldr	r1, [pc, #1356]	; 14aec <__assert_fail@plt+0x34e8>
   1459c:	mov	r0, r8
   145a0:	bl	12f08 <__assert_fail@plt+0x1904>
   145a4:	str	r0, [r5, #36]	; 0x24
   145a8:	cmp	r0, #0
   145ac:	blt	145c4 <__assert_fail@plt+0x2fc0>
   145b0:	ldrh	r3, [r5, #58]	; 0x3a
   145b4:	orr	r3, r3, #2
   145b8:	strh	r3, [r5, #58]	; 0x3a
   145bc:	mov	r4, r5
   145c0:	b	1491c <__assert_fail@plt+0x3318>
   145c4:	bl	11484 <__errno_location@plt>
   145c8:	ldr	r3, [r0]
   145cc:	str	r3, [r5, #32]
   145d0:	mov	r3, #7
   145d4:	strh	r3, [r5, #56]	; 0x38
   145d8:	mov	r4, r5
   145dc:	b	1491c <__assert_fail@plt+0x3318>
   145e0:	ldr	r0, [r5, #36]	; 0x24
   145e4:	bl	115d4 <close@plt>
   145e8:	b	14500 <__assert_fail@plt+0x2efc>
   145ec:	ldr	r0, [r8, #4]
   145f0:	cmp	r0, #0
   145f4:	beq	14640 <__assert_fail@plt+0x303c>
   145f8:	tst	r1, #4096	; 0x1000
   145fc:	bne	1462c <__assert_fail@plt+0x3028>
   14600:	ldr	r3, [r5, #24]
   14604:	mvn	r2, #0
   14608:	mov	r1, r5
   1460c:	mov	r0, r8
   14610:	bl	132c0 <__assert_fail@plt+0x1cbc>
   14614:	cmp	r0, #0
   14618:	bne	14694 <__assert_fail@plt+0x3090>
   1461c:	ldr	r4, [r8, #4]
   14620:	mov	r3, #0
   14624:	str	r3, [r8, #4]
   14628:	b	148dc <__assert_fail@plt+0x32d8>
   1462c:	bic	r1, r1, #4096	; 0x1000
   14630:	str	r1, [r8, #48]	; 0x30
   14634:	bl	12f58 <__assert_fail@plt+0x1954>
   14638:	mov	r3, #0
   1463c:	str	r3, [r8, #4]
   14640:	mov	r1, #3
   14644:	mov	r0, r8
   14648:	bl	1356c <__assert_fail@plt+0x1f68>
   1464c:	str	r0, [r8, #4]
   14650:	cmp	r0, #0
   14654:	bne	1461c <__assert_fail@plt+0x3018>
   14658:	ldr	r3, [r8, #48]	; 0x30
   1465c:	tst	r3, #8192	; 0x2000
   14660:	bne	14ae4 <__assert_fail@plt+0x34e0>
   14664:	ldr	r3, [r5, #32]
   14668:	cmp	r3, #0
   1466c:	beq	14680 <__assert_fail@plt+0x307c>
   14670:	ldrh	r3, [r5, #56]	; 0x38
   14674:	cmp	r3, #4
   14678:	movne	r3, #7
   1467c:	strhne	r3, [r5, #56]	; 0x38
   14680:	mov	r1, r5
   14684:	mov	r0, r8
   14688:	bl	134a8 <__assert_fail@plt+0x1ea4>
   1468c:	mov	r4, r5
   14690:	b	1481c <__assert_fail@plt+0x3218>
   14694:	bl	11484 <__errno_location@plt>
   14698:	ldr	r3, [r0]
   1469c:	str	r3, [r5, #32]
   146a0:	ldrh	r3, [r5, #58]	; 0x3a
   146a4:	orr	r3, r3, #1
   146a8:	strh	r3, [r5, #58]	; 0x3a
   146ac:	ldr	r3, [r8, #4]
   146b0:	cmp	r3, #0
   146b4:	beq	1461c <__assert_fail@plt+0x3018>
   146b8:	ldr	r2, [r3, #4]
   146bc:	ldr	r2, [r2, #24]
   146c0:	str	r2, [r3, #24]
   146c4:	ldr	r3, [r3, #8]
   146c8:	cmp	r3, #0
   146cc:	bne	146b8 <__assert_fail@plt+0x30b4>
   146d0:	b	1461c <__assert_fail@plt+0x3018>
   146d4:	str	r3, [r8]
   146d8:	ldr	r2, [r8, #24]
   146dc:	ldr	r3, [r3, #40]	; 0x28
   146e0:	mov	r1, #0
   146e4:	strb	r1, [r2, r3]
   146e8:	mov	r1, #3
   146ec:	mov	r0, r8
   146f0:	bl	1356c <__assert_fail@plt+0x1f68>
   146f4:	subs	r4, r0, #0
   146f8:	beq	14708 <__assert_fail@plt+0x3104>
   146fc:	mov	r0, r5
   14700:	bl	193bc <__assert_fail@plt+0x7db8>
   14704:	b	148dc <__assert_fail@plt+0x32d8>
   14708:	ldr	r3, [r8, #48]	; 0x30
   1470c:	tst	r3, #8192	; 0x2000
   14710:	beq	1475c <__assert_fail@plt+0x3158>
   14714:	b	1481c <__assert_fail@plt+0x3218>
   14718:	str	r4, [r8]
   1471c:	mov	r0, r5
   14720:	bl	193bc <__assert_fail@plt+0x7db8>
   14724:	ldr	r3, [r4, #48]	; 0x30
   14728:	cmp	r3, #0
   1472c:	beq	14824 <__assert_fail@plt+0x3220>
   14730:	ldrh	r3, [r4, #60]	; 0x3c
   14734:	mov	r5, r4
   14738:	cmp	r3, #4
   1473c:	bne	148d4 <__assert_fail@plt+0x32d0>
   14740:	ldr	r4, [r5, #8]
   14744:	cmp	r4, #0
   14748:	bne	14718 <__assert_fail@plt+0x3114>
   1474c:	ldr	r3, [r5, #4]
   14750:	ldr	r2, [r3, #12]
   14754:	cmp	r2, #0
   14758:	bne	146d4 <__assert_fail@plt+0x30d0>
   1475c:	ldr	r4, [r5, #4]
   14760:	str	r4, [r8]
   14764:	mov	r0, r5
   14768:	bl	193bc <__assert_fail@plt+0x7db8>
   1476c:	ldr	r3, [r4, #48]	; 0x30
   14770:	cmn	r3, #1
   14774:	beq	14a1c <__assert_fail@plt+0x3418>
   14778:	ldrh	r3, [r4, #56]	; 0x38
   1477c:	cmp	r3, #11
   14780:	beq	14a38 <__assert_fail@plt+0x3434>
   14784:	ldr	r2, [r8, #24]
   14788:	ldr	r3, [r4, #40]	; 0x28
   1478c:	mov	r1, #0
   14790:	strb	r1, [r2, r3]
   14794:	ldr	r3, [r4, #48]	; 0x30
   14798:	cmp	r3, r1
   1479c:	beq	14a3c <__assert_fail@plt+0x3438>
   147a0:	ldrh	r3, [r4, #58]	; 0x3a
   147a4:	tst	r3, #2
   147a8:	beq	14a94 <__assert_fail@plt+0x3490>
   147ac:	ldr	r3, [r8, #48]	; 0x30
   147b0:	tst	r3, #4
   147b4:	bne	147d0 <__assert_fail@plt+0x31cc>
   147b8:	tst	r3, #512	; 0x200
   147bc:	beq	14a68 <__assert_fail@plt+0x3464>
   147c0:	mov	r2, #1
   147c4:	ldr	r1, [r4, #36]	; 0x24
   147c8:	mov	r0, r8
   147cc:	bl	131f0 <__assert_fail@plt+0x1bec>
   147d0:	ldr	r0, [r4, #36]	; 0x24
   147d4:	bl	115d4 <close@plt>
   147d8:	ldrh	r3, [r4, #56]	; 0x38
   147dc:	cmp	r3, #2
   147e0:	beq	1480c <__assert_fail@plt+0x3208>
   147e4:	ldr	r3, [r4, #32]
   147e8:	cmp	r3, #0
   147ec:	movne	r3, #7
   147f0:	strhne	r3, [r4, #56]	; 0x38
   147f4:	bne	1480c <__assert_fail@plt+0x3208>
   147f8:	mov	r3, #6
   147fc:	strh	r3, [r4, #56]	; 0x38
   14800:	mov	r1, r4
   14804:	mov	r0, r8
   14808:	bl	134a8 <__assert_fail@plt+0x1ea4>
   1480c:	ldr	r3, [r8, #48]	; 0x30
   14810:	and	r3, r3, #8192	; 0x2000
   14814:	cmp	r3, #0
   14818:	movne	r4, #0
   1481c:	mov	r0, r4
   14820:	pop	{r4, r5, r6, r7, r8, pc}
   14824:	mov	r0, r8
   14828:	bl	13270 <__assert_fail@plt+0x1c6c>
   1482c:	cmp	r0, #0
   14830:	bne	148b0 <__assert_fail@plt+0x32ac>
   14834:	mov	r0, r8
   14838:	bl	12f98 <__assert_fail@plt+0x1994>
   1483c:	ldr	r2, [r4, #52]	; 0x34
   14840:	str	r2, [r4, #40]	; 0x28
   14844:	add	r6, r4, #168	; 0xa8
   14848:	add	r2, r2, #1
   1484c:	mov	r1, r6
   14850:	ldr	r0, [r8, #24]
   14854:	bl	1128c <memmove@plt>
   14858:	mov	r1, #47	; 0x2f
   1485c:	mov	r0, r6
   14860:	bl	1152c <strrchr@plt>
   14864:	cmp	r0, #0
   14868:	beq	14898 <__assert_fail@plt+0x3294>
   1486c:	cmp	r6, r0
   14870:	beq	148c4 <__assert_fail@plt+0x32c0>
   14874:	add	r5, r0, #1
   14878:	mov	r0, r5
   1487c:	bl	11460 <strlen@plt>
   14880:	mov	r7, r0
   14884:	add	r2, r0, #1
   14888:	mov	r1, r5
   1488c:	mov	r0, r6
   14890:	bl	1128c <memmove@plt>
   14894:	str	r7, [r4, #52]	; 0x34
   14898:	ldr	r3, [r8, #24]
   1489c:	str	r3, [r4, #28]
   148a0:	str	r3, [r4, #24]
   148a4:	mov	r0, r8
   148a8:	bl	12e84 <__assert_fail@plt+0x1880>
   148ac:	b	1491c <__assert_fail@plt+0x3318>
   148b0:	ldr	r3, [r8, #48]	; 0x30
   148b4:	orr	r3, r3, #8192	; 0x2000
   148b8:	str	r3, [r8, #48]	; 0x30
   148bc:	mov	r4, #0
   148c0:	b	1481c <__assert_fail@plt+0x3218>
   148c4:	ldrb	r3, [r4, #169]	; 0xa9
   148c8:	cmp	r3, #0
   148cc:	bne	14874 <__assert_fail@plt+0x3270>
   148d0:	b	14898 <__assert_fail@plt+0x3294>
   148d4:	cmp	r3, #2
   148d8:	beq	14970 <__assert_fail@plt+0x336c>
   148dc:	ldr	r2, [r8, #24]
   148e0:	ldr	r0, [r4, #4]
   148e4:	ldr	r1, [r0, #40]	; 0x28
   148e8:	sub	r3, r1, #1
   148ec:	ldr	r0, [r0, #28]
   148f0:	ldrb	r0, [r0, r3]
   148f4:	cmp	r0, #47	; 0x2f
   148f8:	movne	r3, r1
   148fc:	add	r0, r2, r3
   14900:	mov	r1, #47	; 0x2f
   14904:	strb	r1, [r2, r3]
   14908:	ldr	r2, [r4, #52]	; 0x34
   1490c:	add	r2, r2, #1
   14910:	add	r1, r4, #168	; 0xa8
   14914:	add	r0, r0, #1
   14918:	bl	1128c <memmove@plt>
   1491c:	str	r4, [r8]
   14920:	ldrh	r3, [r4, #56]	; 0x38
   14924:	cmp	r3, #11
   14928:	beq	149e4 <__assert_fail@plt+0x33e0>
   1492c:	ldrh	r3, [r4, #56]	; 0x38
   14930:	cmp	r3, #1
   14934:	bne	1481c <__assert_fail@plt+0x3218>
   14938:	ldr	r3, [r4, #48]	; 0x30
   1493c:	cmp	r3, #0
   14940:	ldrdeq	r2, [r4, #64]	; 0x40
   14944:	strdeq	r2, [r8, #16]
   14948:	mov	r1, r4
   1494c:	mov	r0, r8
   14950:	bl	13124 <__assert_fail@plt+0x1b20>
   14954:	cmp	r0, #0
   14958:	bne	1481c <__assert_fail@plt+0x3218>
   1495c:	bl	11484 <__errno_location@plt>
   14960:	mov	r3, #12
   14964:	str	r3, [r0]
   14968:	mov	r4, #0
   1496c:	b	1481c <__assert_fail@plt+0x3218>
   14970:	mov	r2, #1
   14974:	mov	r1, r4
   14978:	mov	r0, r8
   1497c:	bl	12be4 <__assert_fail@plt+0x15e0>
   14980:	strh	r0, [r4, #56]	; 0x38
   14984:	cmp	r0, #1
   14988:	beq	14998 <__assert_fail@plt+0x3394>
   1498c:	mov	r3, #3
   14990:	strh	r3, [r4, #60]	; 0x3c
   14994:	b	148dc <__assert_fail@plt+0x32d8>
   14998:	ldr	r3, [r8, #48]	; 0x30
   1499c:	tst	r3, #4
   149a0:	bne	1498c <__assert_fail@plt+0x3388>
   149a4:	ldr	r1, [pc, #320]	; 14aec <__assert_fail@plt+0x34e8>
   149a8:	mov	r0, r8
   149ac:	bl	12f08 <__assert_fail@plt+0x1904>
   149b0:	str	r0, [r4, #36]	; 0x24
   149b4:	cmp	r0, #0
   149b8:	bge	149d4 <__assert_fail@plt+0x33d0>
   149bc:	bl	11484 <__errno_location@plt>
   149c0:	ldr	r3, [r0]
   149c4:	str	r3, [r4, #32]
   149c8:	mov	r3, #7
   149cc:	strh	r3, [r4, #56]	; 0x38
   149d0:	b	1498c <__assert_fail@plt+0x3388>
   149d4:	ldrh	r3, [r4, #58]	; 0x3a
   149d8:	orr	r3, r3, #2
   149dc:	strh	r3, [r4, #58]	; 0x3a
   149e0:	b	1498c <__assert_fail@plt+0x3388>
   149e4:	ldrd	r2, [r4, #112]	; 0x70
   149e8:	cmp	r3, #0
   149ec:	cmpeq	r2, #2
   149f0:	beq	14a04 <__assert_fail@plt+0x3400>
   149f4:	cmp	r3, #0
   149f8:	cmpeq	r2, #1
   149fc:	beq	1481c <__assert_fail@plt+0x3218>
   14a00:	bl	115c8 <abort@plt>
   14a04:	mov	r2, #0
   14a08:	mov	r1, r4
   14a0c:	mov	r0, r8
   14a10:	bl	12be4 <__assert_fail@plt+0x15e0>
   14a14:	strh	r0, [r4, #56]	; 0x38
   14a18:	b	1492c <__assert_fail@plt+0x3328>
   14a1c:	mov	r0, r4
   14a20:	bl	193bc <__assert_fail@plt+0x7db8>
   14a24:	bl	11484 <__errno_location@plt>
   14a28:	mov	r4, #0
   14a2c:	str	r4, [r0]
   14a30:	str	r4, [r8]
   14a34:	b	1481c <__assert_fail@plt+0x3218>
   14a38:	bl	115c8 <abort@plt>
   14a3c:	mov	r0, r8
   14a40:	bl	13270 <__assert_fail@plt+0x1c6c>
   14a44:	cmp	r0, #0
   14a48:	beq	147d8 <__assert_fail@plt+0x31d4>
   14a4c:	bl	11484 <__errno_location@plt>
   14a50:	ldr	r3, [r0]
   14a54:	str	r3, [r4, #32]
   14a58:	ldr	r3, [r8, #48]	; 0x30
   14a5c:	orr	r3, r3, #8192	; 0x2000
   14a60:	str	r3, [r8, #48]	; 0x30
   14a64:	b	147d8 <__assert_fail@plt+0x31d4>
   14a68:	ldr	r0, [r4, #36]	; 0x24
   14a6c:	bl	11568 <fchdir@plt>
   14a70:	cmp	r0, #0
   14a74:	beq	147d0 <__assert_fail@plt+0x31cc>
   14a78:	bl	11484 <__errno_location@plt>
   14a7c:	ldr	r3, [r0]
   14a80:	str	r3, [r4, #32]
   14a84:	ldr	r3, [r8, #48]	; 0x30
   14a88:	orr	r3, r3, #8192	; 0x2000
   14a8c:	str	r3, [r8, #48]	; 0x30
   14a90:	b	147d0 <__assert_fail@plt+0x31cc>
   14a94:	tst	r3, #1
   14a98:	bne	147d8 <__assert_fail@plt+0x31d4>
   14a9c:	ldr	r3, [pc, #76]	; 14af0 <__assert_fail@plt+0x34ec>
   14aa0:	mvn	r2, #0
   14aa4:	ldr	r1, [r4, #4]
   14aa8:	mov	r0, r8
   14aac:	bl	132c0 <__assert_fail@plt+0x1cbc>
   14ab0:	cmp	r0, #0
   14ab4:	beq	147d8 <__assert_fail@plt+0x31d4>
   14ab8:	bl	11484 <__errno_location@plt>
   14abc:	ldr	r3, [r0]
   14ac0:	str	r3, [r4, #32]
   14ac4:	ldr	r3, [r8, #48]	; 0x30
   14ac8:	orr	r3, r3, #8192	; 0x2000
   14acc:	str	r3, [r8, #48]	; 0x30
   14ad0:	b	147d8 <__assert_fail@plt+0x31d4>
   14ad4:	mov	r4, #0
   14ad8:	b	1481c <__assert_fail@plt+0x3218>
   14adc:	mov	r4, #0
   14ae0:	b	1481c <__assert_fail@plt+0x3218>
   14ae4:	mov	r4, #0
   14ae8:	b	1481c <__assert_fail@plt+0x3218>
   14aec:	andeq	sl, r1, ip, ror #30
   14af0:	andeq	sl, r1, r8, ror #30
   14af4:	cmp	r2, #4
   14af8:	bhi	14b08 <__assert_fail@plt+0x3504>
   14afc:	strh	r2, [r1, #60]	; 0x3c
   14b00:	mov	r0, #0
   14b04:	bx	lr
   14b08:	push	{r4, lr}
   14b0c:	bl	11484 <__errno_location@plt>
   14b10:	mov	r3, #22
   14b14:	str	r3, [r0]
   14b18:	mov	r0, #1
   14b1c:	pop	{r4, pc}
   14b20:	push	{r4, r5, r6, r7, r8, lr}
   14b24:	bics	r3, r1, #4096	; 0x1000
   14b28:	bne	14bcc <__assert_fail@plt+0x35c8>
   14b2c:	mov	r4, r0
   14b30:	mov	r6, r1
   14b34:	ldr	r5, [r0]
   14b38:	bl	11484 <__errno_location@plt>
   14b3c:	mov	r7, r0
   14b40:	mov	r3, #0
   14b44:	str	r3, [r0]
   14b48:	ldr	r3, [r4, #48]	; 0x30
   14b4c:	tst	r3, #8192	; 0x2000
   14b50:	bne	14c70 <__assert_fail@plt+0x366c>
   14b54:	ldrh	r3, [r5, #56]	; 0x38
   14b58:	cmp	r3, #9
   14b5c:	beq	14be0 <__assert_fail@plt+0x35dc>
   14b60:	cmp	r3, #1
   14b64:	bne	14c78 <__assert_fail@plt+0x3674>
   14b68:	ldr	r0, [r4, #4]
   14b6c:	cmp	r0, #0
   14b70:	beq	14b78 <__assert_fail@plt+0x3574>
   14b74:	bl	12f58 <__assert_fail@plt+0x1954>
   14b78:	cmp	r6, #4096	; 0x1000
   14b7c:	ldreq	r3, [r4, #48]	; 0x30
   14b80:	orreq	r3, r3, #4096	; 0x1000
   14b84:	streq	r3, [r4, #48]	; 0x30
   14b88:	moveq	r6, #2
   14b8c:	movne	r6, #1
   14b90:	ldr	r3, [r5, #48]	; 0x30
   14b94:	cmp	r3, #0
   14b98:	bne	14bb8 <__assert_fail@plt+0x35b4>
   14b9c:	ldr	r3, [r5, #24]
   14ba0:	ldrb	r3, [r3]
   14ba4:	cmp	r3, #47	; 0x2f
   14ba8:	beq	14bb8 <__assert_fail@plt+0x35b4>
   14bac:	ldr	r3, [r4, #48]	; 0x30
   14bb0:	tst	r3, #4
   14bb4:	beq	14be8 <__assert_fail@plt+0x35e4>
   14bb8:	mov	r1, r6
   14bbc:	mov	r0, r4
   14bc0:	bl	1356c <__assert_fail@plt+0x1f68>
   14bc4:	str	r0, [r4, #4]
   14bc8:	pop	{r4, r5, r6, r7, r8, pc}
   14bcc:	bl	11484 <__errno_location@plt>
   14bd0:	mov	r3, #22
   14bd4:	str	r3, [r0]
   14bd8:	mov	r0, #0
   14bdc:	pop	{r4, r5, r6, r7, r8, pc}
   14be0:	ldr	r0, [r5, #8]
   14be4:	pop	{r4, r5, r6, r7, r8, pc}
   14be8:	ldr	r1, [pc, #144]	; 14c80 <__assert_fail@plt+0x367c>
   14bec:	mov	r0, r4
   14bf0:	bl	12f08 <__assert_fail@plt+0x1904>
   14bf4:	subs	r5, r0, #0
   14bf8:	blt	14c30 <__assert_fail@plt+0x362c>
   14bfc:	mov	r1, r6
   14c00:	mov	r0, r4
   14c04:	bl	1356c <__assert_fail@plt+0x1f68>
   14c08:	str	r0, [r4, #4]
   14c0c:	ldr	r3, [r4, #48]	; 0x30
   14c10:	tst	r3, #512	; 0x200
   14c14:	beq	14c3c <__assert_fail@plt+0x3638>
   14c18:	mov	r2, #1
   14c1c:	mov	r1, r5
   14c20:	mov	r0, r4
   14c24:	bl	131f0 <__assert_fail@plt+0x1bec>
   14c28:	ldr	r0, [r4, #4]
   14c2c:	pop	{r4, r5, r6, r7, r8, pc}
   14c30:	mov	r0, #0
   14c34:	str	r0, [r4, #4]
   14c38:	pop	{r4, r5, r6, r7, r8, pc}
   14c3c:	mov	r0, r5
   14c40:	bl	11568 <fchdir@plt>
   14c44:	cmp	r0, #0
   14c48:	bne	14c58 <__assert_fail@plt+0x3654>
   14c4c:	mov	r0, r5
   14c50:	bl	115d4 <close@plt>
   14c54:	b	14c28 <__assert_fail@plt+0x3624>
   14c58:	ldr	r4, [r7]
   14c5c:	mov	r0, r5
   14c60:	bl	115d4 <close@plt>
   14c64:	str	r4, [r7]
   14c68:	mov	r0, #0
   14c6c:	pop	{r4, r5, r6, r7, r8, pc}
   14c70:	mov	r0, #0
   14c74:	pop	{r4, r5, r6, r7, r8, pc}
   14c78:	mov	r0, #0
   14c7c:	pop	{r4, r5, r6, r7, r8, pc}
   14c80:	andeq	sl, r1, ip, ror #30
   14c84:	andeq	r0, r0, r0
   14c88:	push	{r4, lr}
   14c8c:	ror	r0, r0, #3
   14c90:	bl	19cac <__assert_fail@plt+0x86a8>
   14c94:	mov	r0, r1
   14c98:	pop	{r4, pc}
   14c9c:	cmp	r1, r0
   14ca0:	movne	r0, #0
   14ca4:	moveq	r0, #1
   14ca8:	bx	lr
   14cac:	ldr	r3, [r0, #20]
   14cb0:	ldr	r2, [pc, #176]	; 14d68 <__assert_fail@plt+0x3764>
   14cb4:	cmp	r3, r2
   14cb8:	beq	14d50 <__assert_fail@plt+0x374c>
   14cbc:	vldr	s15, [r3, #8]
   14cc0:	vldr	s14, [pc, #144]	; 14d58 <__assert_fail@plt+0x3754>
   14cc4:	vcmpe.f32	s15, s14
   14cc8:	vmrs	APSR_nzcv, fpscr
   14ccc:	ble	14d2c <__assert_fail@plt+0x3728>
   14cd0:	vldr	s14, [pc, #132]	; 14d5c <__assert_fail@plt+0x3758>
   14cd4:	vcmpe.f32	s15, s14
   14cd8:	vmrs	APSR_nzcv, fpscr
   14cdc:	bpl	14d2c <__assert_fail@plt+0x3728>
   14ce0:	vldr	s13, [r3, #12]
   14ce4:	vldr	s14, [pc, #116]	; 14d60 <__assert_fail@plt+0x375c>
   14ce8:	vcmpe.f32	s13, s14
   14cec:	vmrs	APSR_nzcv, fpscr
   14cf0:	ble	14d2c <__assert_fail@plt+0x3728>
   14cf4:	vldr	s14, [r3]
   14cf8:	vcmpe.f32	s14, #0.0
   14cfc:	vmrs	APSR_nzcv, fpscr
   14d00:	blt	14d2c <__assert_fail@plt+0x3728>
   14d04:	vldr	s13, [pc, #76]	; 14d58 <__assert_fail@plt+0x3754>
   14d08:	vadd.f32	s14, s14, s13
   14d0c:	vldr	s13, [r3, #4]
   14d10:	vcmpe.f32	s14, s13
   14d14:	vmrs	APSR_nzcv, fpscr
   14d18:	bpl	14d2c <__assert_fail@plt+0x3728>
   14d1c:	vldr	s12, [pc, #64]	; 14d64 <__assert_fail@plt+0x3760>
   14d20:	vcmpe.f32	s13, s12
   14d24:	vmrs	APSR_nzcv, fpscr
   14d28:	bls	14d3c <__assert_fail@plt+0x3738>
   14d2c:	ldr	r3, [pc, #52]	; 14d68 <__assert_fail@plt+0x3764>
   14d30:	str	r3, [r0, #20]
   14d34:	mov	r0, #0
   14d38:	bx	lr
   14d3c:	vcmpe.f32	s15, s14
   14d40:	vmrs	APSR_nzcv, fpscr
   14d44:	ble	14d2c <__assert_fail@plt+0x3728>
   14d48:	mov	r0, #1
   14d4c:	bx	lr
   14d50:	mov	r0, #1
   14d54:	bx	lr
   14d58:	stclcc	12, cr12, [ip, #820]	; 0x334
   14d5c:	svccc	0x00666666
   14d60:	svccc	0x008ccccd
   14d64:	svccc	0x00800000
   14d68:	andeq	sl, r1, r0, ror pc
   14d6c:	push	{r4, lr}
   14d70:	mov	r4, r0
   14d74:	mov	r0, r1
   14d78:	ldr	r3, [r4, #24]
   14d7c:	ldr	r1, [r4, #8]
   14d80:	blx	r3
   14d84:	ldr	r3, [r4, #8]
   14d88:	cmp	r0, r3
   14d8c:	bcs	14d9c <__assert_fail@plt+0x3798>
   14d90:	ldr	r3, [r4]
   14d94:	add	r0, r3, r0, lsl #3
   14d98:	pop	{r4, pc}
   14d9c:	bl	115c8 <abort@plt>
   14da0:	push	{r4, r5, r6, r7, r8, lr}
   14da4:	ldrb	r3, [r1, #16]
   14da8:	cmp	r3, #0
   14dac:	bne	14ddc <__assert_fail@plt+0x37d8>
   14db0:	vmov	s15, r0
   14db4:	vcvt.f32.u32	s13, s15
   14db8:	vldr	s14, [r1, #8]
   14dbc:	vdiv.f32	s15, s13, s14
   14dc0:	vldr	s14, [pc, #204]	; 14e94 <__assert_fail@plt+0x3890>
   14dc4:	vcmpe.f32	s15, s14
   14dc8:	vmrs	APSR_nzcv, fpscr
   14dcc:	movge	r7, #0
   14dd0:	bge	14e14 <__assert_fail@plt+0x3810>
   14dd4:	vcvt.u32.f32	s15, s15
   14dd8:	vmov	r0, s15
   14ddc:	cmp	r0, #10
   14de0:	movcc	r0, #10
   14de4:	orr	r7, r0, #1
   14de8:	cmn	r7, #1
   14dec:	ldrne	r8, [pc, #164]	; 14e98 <__assert_fail@plt+0x3894>
   14df0:	bne	14e40 <__assert_fail@plt+0x383c>
   14df4:	lsr	r3, r7, #30
   14df8:	lsl	r2, r7, #2
   14dfc:	adds	r3, r3, #0
   14e00:	movne	r3, #1
   14e04:	cmp	r2, #0
   14e08:	movlt	r3, #1
   14e0c:	cmp	r3, #0
   14e10:	movne	r7, #0
   14e14:	mov	r0, r7
   14e18:	pop	{r4, r5, r6, r7, r8, pc}
   14e1c:	mov	r4, #3
   14e20:	mov	r1, r4
   14e24:	mov	r0, r7
   14e28:	bl	19cac <__assert_fail@plt+0x86a8>
   14e2c:	cmp	r1, #0
   14e30:	bne	14df4 <__assert_fail@plt+0x37f0>
   14e34:	add	r7, r7, #2
   14e38:	cmn	r7, #1
   14e3c:	beq	14df4 <__assert_fail@plt+0x37f0>
   14e40:	cmp	r7, #9
   14e44:	bls	14e1c <__assert_fail@plt+0x3818>
   14e48:	umull	r2, r3, r8, r7
   14e4c:	lsr	r3, r3, #1
   14e50:	add	r3, r3, r3, lsl #1
   14e54:	cmp	r7, r3
   14e58:	beq	14e34 <__assert_fail@plt+0x3830>
   14e5c:	mov	r6, #16
   14e60:	mov	r5, #9
   14e64:	mov	r4, #3
   14e68:	add	r5, r5, r6
   14e6c:	add	r4, r4, #2
   14e70:	cmp	r5, r7
   14e74:	bcs	14e20 <__assert_fail@plt+0x381c>
   14e78:	add	r6, r6, #8
   14e7c:	mov	r1, r4
   14e80:	mov	r0, r7
   14e84:	bl	19cac <__assert_fail@plt+0x86a8>
   14e88:	cmp	r1, #0
   14e8c:	bne	14e68 <__assert_fail@plt+0x3864>
   14e90:	b	14e34 <__assert_fail@plt+0x3830>
   14e94:	svcmi	0x00800000
   14e98:	bge	feabf94c <optarg@@GLIBC_2.4+0xfea93784>
   14e9c:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14ea0:	ldr	r7, [r1]
   14ea4:	ldr	r3, [r1, #4]
   14ea8:	cmp	r7, r3
   14eac:	bcs	14fe0 <__assert_fail@plt+0x39dc>
   14eb0:	mov	fp, r2
   14eb4:	mov	sl, r1
   14eb8:	mov	r6, r0
   14ebc:	add	r7, r7, #8
   14ec0:	mov	r9, #0
   14ec4:	b	14f2c <__assert_fail@plt+0x3928>
   14ec8:	str	r5, [r0]
   14ecc:	ldr	r2, [r6, #12]
   14ed0:	add	r2, r2, #1
   14ed4:	str	r2, [r6, #12]
   14ed8:	str	r9, [r4]
   14edc:	ldr	r2, [r6, #36]	; 0x24
   14ee0:	str	r2, [r4, #4]
   14ee4:	str	r4, [r6, #36]	; 0x24
   14ee8:	b	14f74 <__assert_fail@plt+0x3970>
   14eec:	mov	r0, #8
   14ef0:	bl	18d1c <__assert_fail@plt+0x7718>
   14ef4:	cmp	r0, #0
   14ef8:	beq	14fe8 <__assert_fail@plt+0x39e4>
   14efc:	str	r4, [r0]
   14f00:	ldr	r3, [r5, #4]
   14f04:	str	r3, [r0, #4]
   14f08:	str	r0, [r5, #4]
   14f0c:	str	r9, [r8, #-8]
   14f10:	ldr	r3, [sl, #12]
   14f14:	sub	r3, r3, #1
   14f18:	str	r3, [sl, #12]
   14f1c:	add	r7, r7, #8
   14f20:	ldr	r3, [sl, #4]
   14f24:	cmp	r3, r8
   14f28:	bls	14fd8 <__assert_fail@plt+0x39d4>
   14f2c:	mov	r8, r7
   14f30:	ldr	r3, [r7, #-8]
   14f34:	cmp	r3, #0
   14f38:	beq	14f1c <__assert_fail@plt+0x3918>
   14f3c:	ldr	r4, [r7, #-4]
   14f40:	cmp	r4, #0
   14f44:	beq	14f80 <__assert_fail@plt+0x397c>
   14f48:	ldr	r5, [r4]
   14f4c:	mov	r1, r5
   14f50:	mov	r0, r6
   14f54:	bl	14d6c <__assert_fail@plt+0x3768>
   14f58:	ldr	r3, [r4, #4]
   14f5c:	ldr	r2, [r0]
   14f60:	cmp	r2, #0
   14f64:	beq	14ec8 <__assert_fail@plt+0x38c4>
   14f68:	ldr	r2, [r0, #4]
   14f6c:	str	r2, [r4, #4]
   14f70:	str	r4, [r0, #4]
   14f74:	mov	r4, r3
   14f78:	cmp	r3, #0
   14f7c:	bne	14f48 <__assert_fail@plt+0x3944>
   14f80:	ldr	r4, [r8, #-8]
   14f84:	str	r9, [r8, #-4]
   14f88:	cmp	fp, #0
   14f8c:	bne	14f1c <__assert_fail@plt+0x3918>
   14f90:	mov	r1, r4
   14f94:	mov	r0, r6
   14f98:	bl	14d6c <__assert_fail@plt+0x3768>
   14f9c:	mov	r5, r0
   14fa0:	ldr	r3, [r0]
   14fa4:	cmp	r3, #0
   14fa8:	beq	14fc4 <__assert_fail@plt+0x39c0>
   14fac:	ldr	r0, [r6, #36]	; 0x24
   14fb0:	cmp	r0, #0
   14fb4:	beq	14eec <__assert_fail@plt+0x38e8>
   14fb8:	ldr	r3, [r0, #4]
   14fbc:	str	r3, [r6, #36]	; 0x24
   14fc0:	b	14efc <__assert_fail@plt+0x38f8>
   14fc4:	str	r4, [r0]
   14fc8:	ldr	r3, [r6, #12]
   14fcc:	add	r3, r3, #1
   14fd0:	str	r3, [r6, #12]
   14fd4:	b	14f0c <__assert_fail@plt+0x3908>
   14fd8:	mov	r0, #1
   14fdc:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14fe0:	mov	r0, #1
   14fe4:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14fe8:	mov	r0, fp
   14fec:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14ff0:	push	{r4, r5, r6, r7, r8, lr}
   14ff4:	mov	r6, r0
   14ff8:	mov	r5, r1
   14ffc:	mov	r8, r2
   15000:	mov	r7, r3
   15004:	bl	14d6c <__assert_fail@plt+0x3768>
   15008:	str	r0, [r8]
   1500c:	ldr	r3, [r0]
   15010:	cmp	r3, #0
   15014:	beq	150ec <__assert_fail@plt+0x3ae8>
   15018:	mov	r4, r0
   1501c:	cmp	r5, r3
   15020:	beq	150b4 <__assert_fail@plt+0x3ab0>
   15024:	ldr	r2, [r6, #28]
   15028:	mov	r1, r3
   1502c:	mov	r0, r5
   15030:	blx	r2
   15034:	cmp	r0, #0
   15038:	bne	150b4 <__assert_fail@plt+0x3ab0>
   1503c:	ldr	r3, [r4, #4]
   15040:	cmp	r3, #0
   15044:	beq	150f4 <__assert_fail@plt+0x3af0>
   15048:	ldr	r1, [r3]
   1504c:	cmp	r5, r1
   15050:	beq	15084 <__assert_fail@plt+0x3a80>
   15054:	ldr	r3, [r6, #28]
   15058:	mov	r0, r5
   1505c:	blx	r3
   15060:	cmp	r0, #0
   15064:	bne	15084 <__assert_fail@plt+0x3a80>
   15068:	ldr	r4, [r4, #4]
   1506c:	ldr	r3, [r4, #4]
   15070:	cmp	r3, #0
   15074:	beq	150ec <__assert_fail@plt+0x3ae8>
   15078:	ldr	r1, [r3]
   1507c:	cmp	r5, r1
   15080:	bne	15054 <__assert_fail@plt+0x3a50>
   15084:	ldr	r2, [r4, #4]
   15088:	ldr	r3, [r2]
   1508c:	cmp	r7, #0
   15090:	beq	150ec <__assert_fail@plt+0x3ae8>
   15094:	ldr	r1, [r2, #4]
   15098:	str	r1, [r4, #4]
   1509c:	mov	r1, #0
   150a0:	str	r1, [r2]
   150a4:	ldr	r1, [r6, #36]	; 0x24
   150a8:	str	r1, [r2, #4]
   150ac:	str	r2, [r6, #36]	; 0x24
   150b0:	b	150ec <__assert_fail@plt+0x3ae8>
   150b4:	ldr	r3, [r4]
   150b8:	cmp	r7, #0
   150bc:	beq	150ec <__assert_fail@plt+0x3ae8>
   150c0:	ldr	r2, [r4, #4]
   150c4:	cmp	r2, #0
   150c8:	ldmne	r2, {r0, r1}
   150cc:	stmne	r4, {r0, r1}
   150d0:	movne	r1, #0
   150d4:	strne	r1, [r2]
   150d8:	ldrne	r1, [r6, #36]	; 0x24
   150dc:	strne	r1, [r2, #4]
   150e0:	strne	r2, [r6, #36]	; 0x24
   150e4:	moveq	r2, #0
   150e8:	streq	r2, [r4]
   150ec:	mov	r0, r3
   150f0:	pop	{r4, r5, r6, r7, r8, pc}
   150f4:	mov	r3, #0
   150f8:	b	150ec <__assert_fail@plt+0x3ae8>
   150fc:	ldr	r0, [r0, #8]
   15100:	bx	lr
   15104:	ldr	r0, [r0, #12]
   15108:	bx	lr
   1510c:	ldr	r0, [r0, #16]
   15110:	bx	lr
   15114:	ldr	r1, [r0]
   15118:	ldr	ip, [r0, #4]
   1511c:	cmp	r1, ip
   15120:	bcs	15178 <__assert_fail@plt+0x3b74>
   15124:	mov	r0, #0
   15128:	b	15144 <__assert_fail@plt+0x3b40>
   1512c:	mov	r2, #1
   15130:	cmp	r0, r2
   15134:	movcc	r0, r2
   15138:	add	r1, r1, #8
   1513c:	cmp	r1, ip
   15140:	bcs	15174 <__assert_fail@plt+0x3b70>
   15144:	ldr	r3, [r1]
   15148:	cmp	r3, #0
   1514c:	beq	15138 <__assert_fail@plt+0x3b34>
   15150:	ldr	r3, [r1, #4]
   15154:	cmp	r3, #0
   15158:	beq	1512c <__assert_fail@plt+0x3b28>
   1515c:	mov	r2, #1
   15160:	add	r2, r2, #1
   15164:	ldr	r3, [r3, #4]
   15168:	cmp	r3, #0
   1516c:	bne	15160 <__assert_fail@plt+0x3b5c>
   15170:	b	15130 <__assert_fail@plt+0x3b2c>
   15174:	bx	lr
   15178:	mov	r0, #0
   1517c:	bx	lr
   15180:	push	{lr}		; (str lr, [sp, #-4]!)
   15184:	ldr	r1, [r0]
   15188:	ldr	lr, [r0, #4]
   1518c:	cmp	r1, lr
   15190:	bcs	151e0 <__assert_fail@plt+0x3bdc>
   15194:	mov	r2, #0
   15198:	mov	ip, r2
   1519c:	b	151ac <__assert_fail@plt+0x3ba8>
   151a0:	add	r1, r1, #8
   151a4:	cmp	r1, lr
   151a8:	bcs	151e8 <__assert_fail@plt+0x3be4>
   151ac:	ldr	r3, [r1]
   151b0:	cmp	r3, #0
   151b4:	beq	151a0 <__assert_fail@plt+0x3b9c>
   151b8:	add	ip, ip, #1
   151bc:	add	r2, r2, #1
   151c0:	ldr	r3, [r1, #4]
   151c4:	cmp	r3, #0
   151c8:	beq	151a0 <__assert_fail@plt+0x3b9c>
   151cc:	add	r2, r2, #1
   151d0:	ldr	r3, [r3, #4]
   151d4:	cmp	r3, #0
   151d8:	bne	151cc <__assert_fail@plt+0x3bc8>
   151dc:	b	151a0 <__assert_fail@plt+0x3b9c>
   151e0:	mov	r2, #0
   151e4:	mov	ip, r2
   151e8:	ldr	r3, [r0, #12]
   151ec:	cmp	r3, ip
   151f0:	beq	151fc <__assert_fail@plt+0x3bf8>
   151f4:	mov	r0, #0
   151f8:	pop	{pc}		; (ldr pc, [sp], #4)
   151fc:	ldr	r0, [r0, #16]
   15200:	cmp	r0, r2
   15204:	movne	r0, #0
   15208:	moveq	r0, #1
   1520c:	pop	{pc}		; (ldr pc, [sp], #4)
   15210:	push	{r4, r5, r6, r7, r8, lr}
   15214:	sub	sp, sp, #8
   15218:	mov	r6, r0
   1521c:	mov	r4, r1
   15220:	ldr	r5, [r0, #8]
   15224:	ldr	r7, [r0, #12]
   15228:	bl	15114 <__assert_fail@plt+0x3b10>
   1522c:	mov	r8, r0
   15230:	ldr	r3, [r6, #16]
   15234:	ldr	r2, [pc, #116]	; 152b0 <__assert_fail@plt+0x3cac>
   15238:	mov	r1, #1
   1523c:	mov	r0, r4
   15240:	bl	114cc <__fprintf_chk@plt>
   15244:	mov	r3, r5
   15248:	ldr	r2, [pc, #100]	; 152b4 <__assert_fail@plt+0x3cb0>
   1524c:	mov	r1, #1
   15250:	mov	r0, r4
   15254:	bl	114cc <__fprintf_chk@plt>
   15258:	vmov	s15, r7
   1525c:	vcvt.f64.u32	d6, s15
   15260:	vldr	d7, [pc, #64]	; 152a8 <__assert_fail@plt+0x3ca4>
   15264:	vmul.f64	d6, d6, d7
   15268:	vmov	s15, r5
   1526c:	vcvt.f64.u32	d7, s15
   15270:	vdiv.f64	d5, d6, d7
   15274:	vstr	d5, [sp]
   15278:	mov	r3, r7
   1527c:	ldr	r2, [pc, #52]	; 152b8 <__assert_fail@plt+0x3cb4>
   15280:	mov	r1, #1
   15284:	mov	r0, r4
   15288:	bl	114cc <__fprintf_chk@plt>
   1528c:	mov	r3, r8
   15290:	ldr	r2, [pc, #36]	; 152bc <__assert_fail@plt+0x3cb8>
   15294:	mov	r1, #1
   15298:	mov	r0, r4
   1529c:	bl	114cc <__fprintf_chk@plt>
   152a0:	add	sp, sp, #8
   152a4:	pop	{r4, r5, r6, r7, r8, pc}
   152a8:	andeq	r0, r0, r0
   152ac:	subsmi	r0, r9, r0
   152b0:	andeq	sl, r1, r4, lsl #31
   152b4:	muleq	r1, ip, pc	; <UNPREDICTABLE>
   152b8:			; <UNDEFINED> instruction: 0x0001afb4
   152bc:	ldrdeq	sl, [r1], -r8
   152c0:	push	{r4, r5, r6, lr}
   152c4:	mov	r6, r0
   152c8:	mov	r5, r1
   152cc:	bl	14d6c <__assert_fail@plt+0x3768>
   152d0:	ldr	r1, [r0]
   152d4:	cmp	r1, #0
   152d8:	beq	1532c <__assert_fail@plt+0x3d28>
   152dc:	mov	r4, r0
   152e0:	cmp	r0, #0
   152e4:	beq	15334 <__assert_fail@plt+0x3d30>
   152e8:	cmp	r5, r1
   152ec:	beq	1531c <__assert_fail@plt+0x3d18>
   152f0:	ldr	r3, [r6, #28]
   152f4:	mov	r0, r5
   152f8:	blx	r3
   152fc:	cmp	r0, #0
   15300:	bne	1531c <__assert_fail@plt+0x3d18>
   15304:	ldr	r4, [r4, #4]
   15308:	cmp	r4, #0
   1530c:	beq	15324 <__assert_fail@plt+0x3d20>
   15310:	ldr	r1, [r4]
   15314:	cmp	r5, r1
   15318:	bne	152f0 <__assert_fail@plt+0x3cec>
   1531c:	ldr	r0, [r4]
   15320:	pop	{r4, r5, r6, pc}
   15324:	mov	r0, #0
   15328:	pop	{r4, r5, r6, pc}
   1532c:	mov	r0, #0
   15330:	pop	{r4, r5, r6, pc}
   15334:	mov	r0, #0
   15338:	pop	{r4, r5, r6, pc}
   1533c:	ldr	r3, [r0, #16]
   15340:	cmp	r3, #0
   15344:	beq	15388 <__assert_fail@plt+0x3d84>
   15348:	ldr	r3, [r0]
   1534c:	ldr	r2, [r0, #4]
   15350:	cmp	r3, r2
   15354:	bcs	15380 <__assert_fail@plt+0x3d7c>
   15358:	ldr	r0, [r3]
   1535c:	cmp	r0, #0
   15360:	bne	1537c <__assert_fail@plt+0x3d78>
   15364:	add	r3, r3, #8
   15368:	cmp	r3, r2
   1536c:	bcs	15380 <__assert_fail@plt+0x3d7c>
   15370:	ldr	r0, [r3]
   15374:	cmp	r0, #0
   15378:	beq	15364 <__assert_fail@plt+0x3d60>
   1537c:	bx	lr
   15380:	push	{r4, lr}
   15384:	bl	115c8 <abort@plt>
   15388:	mov	r0, #0
   1538c:	b	1537c <__assert_fail@plt+0x3d78>
   15390:	push	{r4, r5, r6, lr}
   15394:	mov	r5, r0
   15398:	mov	r4, r1
   1539c:	bl	14d6c <__assert_fail@plt+0x3768>
   153a0:	mov	r2, r0
   153a4:	mov	r3, r0
   153a8:	ldr	r1, [r3]
   153ac:	cmp	r4, r1
   153b0:	beq	153c4 <__assert_fail@plt+0x3dc0>
   153b4:	ldr	r3, [r3, #4]
   153b8:	cmp	r3, #0
   153bc:	bne	153a8 <__assert_fail@plt+0x3da4>
   153c0:	b	153d0 <__assert_fail@plt+0x3dcc>
   153c4:	ldr	r3, [r3, #4]
   153c8:	cmp	r3, #0
   153cc:	bne	153f0 <__assert_fail@plt+0x3dec>
   153d0:	ldr	r3, [r5, #4]
   153d4:	add	r2, r2, #8
   153d8:	cmp	r2, r3
   153dc:	bcs	153f8 <__assert_fail@plt+0x3df4>
   153e0:	ldr	r0, [r2]
   153e4:	cmp	r0, #0
   153e8:	beq	153d4 <__assert_fail@plt+0x3dd0>
   153ec:	pop	{r4, r5, r6, pc}
   153f0:	ldr	r0, [r3]
   153f4:	pop	{r4, r5, r6, pc}
   153f8:	mov	r0, #0
   153fc:	pop	{r4, r5, r6, pc}
   15400:	push	{r4, r5, lr}
   15404:	ldr	r4, [r0]
   15408:	ldr	r3, [r0, #4]
   1540c:	cmp	r4, r3
   15410:	bcs	1547c <__assert_fail@plt+0x3e78>
   15414:	mov	r5, r0
   15418:	mov	r0, #0
   1541c:	b	15430 <__assert_fail@plt+0x3e2c>
   15420:	add	r4, r4, #8
   15424:	ldr	r3, [r5, #4]
   15428:	cmp	r3, r4
   1542c:	bls	15478 <__assert_fail@plt+0x3e74>
   15430:	ldr	r3, [r4]
   15434:	cmp	r3, #0
   15438:	beq	15420 <__assert_fail@plt+0x3e1c>
   1543c:	cmp	r4, #0
   15440:	beq	15420 <__assert_fail@plt+0x3e1c>
   15444:	cmp	r2, r0
   15448:	popls	{r4, r5, pc}
   1544c:	add	ip, r1, r0, lsl #2
   15450:	mov	r3, r4
   15454:	add	r0, r0, #1
   15458:	ldr	lr, [r3]
   1545c:	str	lr, [ip], #4
   15460:	ldr	r3, [r3, #4]
   15464:	cmp	r3, #0
   15468:	beq	15420 <__assert_fail@plt+0x3e1c>
   1546c:	cmp	r2, r0
   15470:	bne	15454 <__assert_fail@plt+0x3e50>
   15474:	pop	{r4, r5, pc}
   15478:	pop	{r4, r5, pc}
   1547c:	mov	r0, #0
   15480:	pop	{r4, r5, pc}
   15484:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   15488:	ldr	r8, [r0]
   1548c:	ldr	r3, [r0, #4]
   15490:	cmp	r8, r3
   15494:	bcs	154fc <__assert_fail@plt+0x3ef8>
   15498:	mov	r7, r2
   1549c:	mov	r6, r1
   154a0:	mov	r9, r0
   154a4:	mov	r5, #0
   154a8:	b	154bc <__assert_fail@plt+0x3eb8>
   154ac:	add	r8, r8, #8
   154b0:	ldr	r3, [r9, #4]
   154b4:	cmp	r3, r8
   154b8:	bls	15500 <__assert_fail@plt+0x3efc>
   154bc:	ldr	r3, [r8]
   154c0:	cmp	r3, #0
   154c4:	beq	154ac <__assert_fail@plt+0x3ea8>
   154c8:	cmp	r8, #0
   154cc:	beq	154ac <__assert_fail@plt+0x3ea8>
   154d0:	mov	r4, r8
   154d4:	mov	r1, r7
   154d8:	ldr	r0, [r4]
   154dc:	blx	r6
   154e0:	cmp	r0, #0
   154e4:	beq	15500 <__assert_fail@plt+0x3efc>
   154e8:	add	r5, r5, #1
   154ec:	ldr	r4, [r4, #4]
   154f0:	cmp	r4, #0
   154f4:	bne	154d4 <__assert_fail@plt+0x3ed0>
   154f8:	b	154ac <__assert_fail@plt+0x3ea8>
   154fc:	mov	r5, #0
   15500:	mov	r0, r5
   15504:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   15508:	ldrb	r3, [r0]
   1550c:	cmp	r3, #0
   15510:	beq	15548 <__assert_fail@plt+0x3f44>
   15514:	push	{r4, r5, r6, lr}
   15518:	mov	r4, r0
   1551c:	mov	r5, r1
   15520:	mov	r1, #0
   15524:	rsb	r0, r1, r1, lsl #5
   15528:	mov	r1, r5
   1552c:	add	r0, r0, r3
   15530:	bl	19cac <__assert_fail@plt+0x86a8>
   15534:	ldrb	r3, [r4, #1]!
   15538:	cmp	r3, #0
   1553c:	bne	15524 <__assert_fail@plt+0x3f20>
   15540:	mov	r0, r1
   15544:	pop	{r4, r5, r6, pc}
   15548:	mov	r1, #0
   1554c:	mov	r0, r1
   15550:	bx	lr
   15554:	push	{lr}		; (str lr, [sp, #-4]!)
   15558:	mov	ip, r0
   1555c:	ldr	lr, [pc, #16]	; 15574 <__assert_fail@plt+0x3f70>
   15560:	ldm	lr!, {r0, r1, r2, r3}
   15564:	stmia	ip!, {r0, r1, r2, r3}
   15568:	ldr	r3, [lr]
   1556c:	str	r3, [ip]
   15570:	pop	{pc}		; (ldr pc, [sp], #4)
   15574:	andeq	sl, r1, r0, ror pc
   15578:	push	{r4, r5, r6, r7, r8, lr}
   1557c:	mov	r8, r0
   15580:	mov	r5, r1
   15584:	subs	r7, r2, #0
   15588:	ldr	r2, [pc, #180]	; 15644 <__assert_fail@plt+0x4040>
   1558c:	cmp	r7, #0
   15590:	moveq	r7, r2
   15594:	subs	r6, r3, #0
   15598:	ldr	r3, [pc, #168]	; 15648 <__assert_fail@plt+0x4044>
   1559c:	cmp	r6, #0
   155a0:	moveq	r6, r3
   155a4:	mov	r0, #40	; 0x28
   155a8:	bl	18d1c <__assert_fail@plt+0x7718>
   155ac:	subs	r4, r0, #0
   155b0:	beq	1562c <__assert_fail@plt+0x4028>
   155b4:	ldr	r3, [pc, #144]	; 1564c <__assert_fail@plt+0x4048>
   155b8:	cmp	r5, #0
   155bc:	moveq	r5, r3
   155c0:	str	r5, [r4, #20]
   155c4:	mov	r0, r4
   155c8:	bl	14cac <__assert_fail@plt+0x36a8>
   155cc:	cmp	r0, #0
   155d0:	beq	15634 <__assert_fail@plt+0x4030>
   155d4:	mov	r1, r5
   155d8:	mov	r0, r8
   155dc:	bl	14da0 <__assert_fail@plt+0x379c>
   155e0:	str	r0, [r4, #8]
   155e4:	cmp	r0, #0
   155e8:	beq	15634 <__assert_fail@plt+0x4030>
   155ec:	mov	r1, #8
   155f0:	bl	18ccc <__assert_fail@plt+0x76c8>
   155f4:	str	r0, [r4]
   155f8:	cmp	r0, #0
   155fc:	beq	15634 <__assert_fail@plt+0x4030>
   15600:	ldr	r3, [r4, #8]
   15604:	add	r0, r0, r3, lsl #3
   15608:	str	r0, [r4, #4]
   1560c:	mov	r3, #0
   15610:	str	r3, [r4, #12]
   15614:	str	r3, [r4, #16]
   15618:	str	r7, [r4, #24]
   1561c:	str	r6, [r4, #28]
   15620:	ldr	r2, [sp, #24]
   15624:	str	r2, [r4, #32]
   15628:	str	r3, [r4, #36]	; 0x24
   1562c:	mov	r0, r4
   15630:	pop	{r4, r5, r6, r7, r8, pc}
   15634:	mov	r0, r4
   15638:	bl	193bc <__assert_fail@plt+0x7db8>
   1563c:	mov	r4, #0
   15640:	b	1562c <__assert_fail@plt+0x4028>
   15644:	andeq	r4, r1, r8, lsl #25
   15648:	muleq	r1, ip, ip
   1564c:	andeq	sl, r1, r0, ror pc
   15650:	push	{r4, r5, r6, r7, r8, lr}
   15654:	mov	r5, r0
   15658:	ldr	r7, [r0]
   1565c:	ldr	r3, [r0, #4]
   15660:	cmp	r7, r3
   15664:	bcs	156f8 <__assert_fail@plt+0x40f4>
   15668:	add	r7, r7, #8
   1566c:	mov	r6, #0
   15670:	b	156d8 <__assert_fail@plt+0x40d4>
   15674:	str	r6, [r4]
   15678:	ldr	r3, [r4, #4]
   1567c:	ldr	r2, [r5, #36]	; 0x24
   15680:	str	r2, [r4, #4]
   15684:	str	r4, [r5, #36]	; 0x24
   15688:	mov	r4, r3
   1568c:	cmp	r3, #0
   15690:	beq	156ac <__assert_fail@plt+0x40a8>
   15694:	ldr	r3, [r5, #32]
   15698:	cmp	r3, #0
   1569c:	beq	15674 <__assert_fail@plt+0x4070>
   156a0:	ldr	r0, [r4]
   156a4:	blx	r3
   156a8:	b	15674 <__assert_fail@plt+0x4070>
   156ac:	ldr	r3, [r5, #32]
   156b0:	cmp	r3, #0
   156b4:	beq	156c0 <__assert_fail@plt+0x40bc>
   156b8:	ldr	r0, [r8, #-8]
   156bc:	blx	r3
   156c0:	str	r6, [r8, #-8]
   156c4:	str	r6, [r8, #-4]
   156c8:	add	r7, r7, #8
   156cc:	ldr	r3, [r5, #4]
   156d0:	cmp	r3, r8
   156d4:	bls	156f8 <__assert_fail@plt+0x40f4>
   156d8:	mov	r8, r7
   156dc:	ldr	r3, [r7, #-8]
   156e0:	cmp	r3, #0
   156e4:	beq	156c8 <__assert_fail@plt+0x40c4>
   156e8:	ldr	r4, [r7, #-4]
   156ec:	cmp	r4, #0
   156f0:	bne	15694 <__assert_fail@plt+0x4090>
   156f4:	b	156ac <__assert_fail@plt+0x40a8>
   156f8:	mov	r3, #0
   156fc:	str	r3, [r5, #12]
   15700:	str	r3, [r5, #16]
   15704:	pop	{r4, r5, r6, r7, r8, pc}
   15708:	push	{r4, r5, r6, lr}
   1570c:	mov	r5, r0
   15710:	ldr	r3, [r0, #32]
   15714:	cmp	r3, #0
   15718:	beq	15780 <__assert_fail@plt+0x417c>
   1571c:	ldr	r3, [r0, #16]
   15720:	cmp	r3, #0
   15724:	beq	15780 <__assert_fail@plt+0x417c>
   15728:	ldr	r6, [r0]
   1572c:	ldr	r3, [r0, #4]
   15730:	cmp	r6, r3
   15734:	bcc	1574c <__assert_fail@plt+0x4148>
   15738:	b	157c0 <__assert_fail@plt+0x41bc>
   1573c:	add	r6, r6, #8
   15740:	ldr	r3, [r5, #4]
   15744:	cmp	r3, r6
   15748:	bls	15780 <__assert_fail@plt+0x417c>
   1574c:	ldr	r3, [r6]
   15750:	cmp	r3, #0
   15754:	beq	1573c <__assert_fail@plt+0x4138>
   15758:	cmp	r6, #0
   1575c:	beq	1573c <__assert_fail@plt+0x4138>
   15760:	mov	r4, r6
   15764:	ldr	r3, [r5, #32]
   15768:	ldr	r0, [r4]
   1576c:	blx	r3
   15770:	ldr	r4, [r4, #4]
   15774:	cmp	r4, #0
   15778:	bne	15764 <__assert_fail@plt+0x4160>
   1577c:	b	1573c <__assert_fail@plt+0x4138>
   15780:	ldr	r6, [r5]
   15784:	ldr	r3, [r5, #4]
   15788:	cmp	r6, r3
   1578c:	bcs	157c0 <__assert_fail@plt+0x41bc>
   15790:	ldr	r0, [r6, #4]
   15794:	cmp	r0, #0
   15798:	beq	157b0 <__assert_fail@plt+0x41ac>
   1579c:	ldr	r4, [r0, #4]
   157a0:	bl	193bc <__assert_fail@plt+0x7db8>
   157a4:	mov	r0, r4
   157a8:	cmp	r4, #0
   157ac:	bne	1579c <__assert_fail@plt+0x4198>
   157b0:	add	r6, r6, #8
   157b4:	ldr	r3, [r5, #4]
   157b8:	cmp	r3, r6
   157bc:	bhi	15790 <__assert_fail@plt+0x418c>
   157c0:	ldr	r0, [r5, #36]	; 0x24
   157c4:	cmp	r0, #0
   157c8:	beq	157e0 <__assert_fail@plt+0x41dc>
   157cc:	ldr	r4, [r0, #4]
   157d0:	bl	193bc <__assert_fail@plt+0x7db8>
   157d4:	mov	r0, r4
   157d8:	cmp	r4, #0
   157dc:	bne	157cc <__assert_fail@plt+0x41c8>
   157e0:	ldr	r0, [r5]
   157e4:	bl	193bc <__assert_fail@plt+0x7db8>
   157e8:	mov	r0, r5
   157ec:	bl	193bc <__assert_fail@plt+0x7db8>
   157f0:	pop	{r4, r5, r6, pc}
   157f4:	push	{r4, r5, lr}
   157f8:	sub	sp, sp, #44	; 0x2c
   157fc:	mov	r4, r0
   15800:	mov	r0, r1
   15804:	ldr	r1, [r4, #20]
   15808:	bl	14da0 <__assert_fail@plt+0x379c>
   1580c:	subs	r5, r0, #0
   15810:	beq	15908 <__assert_fail@plt+0x4304>
   15814:	ldr	r3, [r4, #8]
   15818:	cmp	r5, r3
   1581c:	beq	15918 <__assert_fail@plt+0x4314>
   15820:	mov	r1, #8
   15824:	mov	r0, r5
   15828:	bl	18ccc <__assert_fail@plt+0x76c8>
   1582c:	str	r0, [sp]
   15830:	cmp	r0, #0
   15834:	beq	15920 <__assert_fail@plt+0x431c>
   15838:	str	r5, [sp, #8]
   1583c:	add	r0, r0, r5, lsl #3
   15840:	str	r0, [sp, #4]
   15844:	mov	r2, #0
   15848:	str	r2, [sp, #12]
   1584c:	str	r2, [sp, #16]
   15850:	ldr	r3, [r4, #20]
   15854:	str	r3, [sp, #20]
   15858:	ldr	r3, [r4, #24]
   1585c:	str	r3, [sp, #24]
   15860:	ldr	r3, [r4, #28]
   15864:	str	r3, [sp, #28]
   15868:	ldr	r3, [r4, #32]
   1586c:	str	r3, [sp, #32]
   15870:	ldr	r3, [r4, #36]	; 0x24
   15874:	str	r3, [sp, #36]	; 0x24
   15878:	mov	r1, r4
   1587c:	mov	r0, sp
   15880:	bl	14e9c <__assert_fail@plt+0x3898>
   15884:	subs	r5, r0, #0
   15888:	bne	158d0 <__assert_fail@plt+0x42cc>
   1588c:	ldr	r3, [sp, #36]	; 0x24
   15890:	str	r3, [r4, #36]	; 0x24
   15894:	mov	r2, #1
   15898:	mov	r1, sp
   1589c:	mov	r0, r4
   158a0:	bl	14e9c <__assert_fail@plt+0x3898>
   158a4:	cmp	r0, #0
   158a8:	beq	15904 <__assert_fail@plt+0x4300>
   158ac:	mov	r2, #0
   158b0:	mov	r1, sp
   158b4:	mov	r0, r4
   158b8:	bl	14e9c <__assert_fail@plt+0x3898>
   158bc:	cmp	r0, #0
   158c0:	beq	15904 <__assert_fail@plt+0x4300>
   158c4:	ldr	r0, [sp]
   158c8:	bl	193bc <__assert_fail@plt+0x7db8>
   158cc:	b	1590c <__assert_fail@plt+0x4308>
   158d0:	ldr	r0, [r4]
   158d4:	bl	193bc <__assert_fail@plt+0x7db8>
   158d8:	ldr	r3, [sp]
   158dc:	str	r3, [r4]
   158e0:	ldr	r3, [sp, #4]
   158e4:	str	r3, [r4, #4]
   158e8:	ldr	r3, [sp, #8]
   158ec:	str	r3, [r4, #8]
   158f0:	ldr	r3, [sp, #12]
   158f4:	str	r3, [r4, #12]
   158f8:	ldr	r3, [sp, #36]	; 0x24
   158fc:	str	r3, [r4, #36]	; 0x24
   15900:	b	1590c <__assert_fail@plt+0x4308>
   15904:	bl	115c8 <abort@plt>
   15908:	mov	r5, #0
   1590c:	mov	r0, r5
   15910:	add	sp, sp, #44	; 0x2c
   15914:	pop	{r4, r5, pc}
   15918:	mov	r5, #1
   1591c:	b	1590c <__assert_fail@plt+0x4308>
   15920:	mov	r5, #0
   15924:	b	1590c <__assert_fail@plt+0x4308>
   15928:	push	{r4, r5, r6, lr}
   1592c:	sub	sp, sp, #8
   15930:	subs	r6, r1, #0
   15934:	beq	15970 <__assert_fail@plt+0x436c>
   15938:	mov	r4, r0
   1593c:	mov	r5, r2
   15940:	mov	r3, #0
   15944:	add	r2, sp, #4
   15948:	mov	r1, r6
   1594c:	bl	14ff0 <__assert_fail@plt+0x39ec>
   15950:	cmp	r0, #0
   15954:	beq	15974 <__assert_fail@plt+0x4370>
   15958:	cmp	r5, #0
   1595c:	moveq	r0, #0
   15960:	strne	r0, [r5]
   15964:	movne	r0, #0
   15968:	add	sp, sp, #8
   1596c:	pop	{r4, r5, r6, pc}
   15970:	bl	115c8 <abort@plt>
   15974:	vldr	s15, [r4, #12]
   15978:	vcvt.f32.u32	s14, s15
   1597c:	ldr	r3, [r4, #20]
   15980:	vldr	s15, [r4, #8]
   15984:	vcvt.f32.u32	s15, s15
   15988:	vldr	s13, [r3, #8]
   1598c:	vmul.f32	s15, s15, s13
   15990:	vcmpe.f32	s14, s15
   15994:	vmrs	APSR_nzcv, fpscr
   15998:	bgt	159e8 <__assert_fail@plt+0x43e4>
   1599c:	ldr	r3, [sp, #4]
   159a0:	ldr	r2, [r3]
   159a4:	cmp	r2, #0
   159a8:	beq	15a8c <__assert_fail@plt+0x4488>
   159ac:	ldr	r0, [r4, #36]	; 0x24
   159b0:	cmp	r0, #0
   159b4:	beq	15a74 <__assert_fail@plt+0x4470>
   159b8:	ldr	r3, [r0, #4]
   159bc:	str	r3, [r4, #36]	; 0x24
   159c0:	str	r6, [r0]
   159c4:	ldr	r3, [sp, #4]
   159c8:	ldr	r2, [r3, #4]
   159cc:	str	r2, [r0, #4]
   159d0:	str	r0, [r3, #4]
   159d4:	ldr	r3, [r4, #16]
   159d8:	add	r3, r3, #1
   159dc:	str	r3, [r4, #16]
   159e0:	mov	r0, #1
   159e4:	b	15968 <__assert_fail@plt+0x4364>
   159e8:	mov	r0, r4
   159ec:	bl	14cac <__assert_fail@plt+0x36a8>
   159f0:	ldr	r3, [r4, #20]
   159f4:	vldr	s13, [r3, #8]
   159f8:	vldr	s15, [r4, #8]
   159fc:	vcvt.f32.u32	s15, s15
   15a00:	vldr	s14, [r4, #12]
   15a04:	vcvt.f32.u32	s14, s14
   15a08:	vmul.f32	s12, s13, s15
   15a0c:	vcmpe.f32	s14, s12
   15a10:	vmrs	APSR_nzcv, fpscr
   15a14:	ble	1599c <__assert_fail@plt+0x4398>
   15a18:	ldrb	r2, [r3, #16]
   15a1c:	cmp	r2, #0
   15a20:	vldr	s14, [r3, #12]
   15a24:	vmul.f32	s15, s15, s14
   15a28:	vmuleq.f32	s15, s15, s13
   15a2c:	vldr	s14, [pc, #140]	; 15ac0 <__assert_fail@plt+0x44bc>
   15a30:	vcmpe.f32	s15, s14
   15a34:	vmrs	APSR_nzcv, fpscr
   15a38:	bge	15ab0 <__assert_fail@plt+0x44ac>
   15a3c:	vcvt.u32.f32	s15, s15
   15a40:	vmov	r1, s15
   15a44:	mov	r0, r4
   15a48:	bl	157f4 <__assert_fail@plt+0x41f0>
   15a4c:	cmp	r0, #0
   15a50:	beq	15ab8 <__assert_fail@plt+0x44b4>
   15a54:	mov	r3, #0
   15a58:	add	r2, sp, #4
   15a5c:	mov	r1, r6
   15a60:	mov	r0, r4
   15a64:	bl	14ff0 <__assert_fail@plt+0x39ec>
   15a68:	cmp	r0, #0
   15a6c:	beq	1599c <__assert_fail@plt+0x4398>
   15a70:	bl	115c8 <abort@plt>
   15a74:	mov	r0, #8
   15a78:	bl	18d1c <__assert_fail@plt+0x7718>
   15a7c:	cmp	r0, #0
   15a80:	bne	159c0 <__assert_fail@plt+0x43bc>
   15a84:	mvn	r0, #0
   15a88:	b	15968 <__assert_fail@plt+0x4364>
   15a8c:	str	r6, [r3]
   15a90:	ldr	r3, [r4, #16]
   15a94:	add	r3, r3, #1
   15a98:	str	r3, [r4, #16]
   15a9c:	ldr	r3, [r4, #12]
   15aa0:	add	r3, r3, #1
   15aa4:	str	r3, [r4, #12]
   15aa8:	mov	r0, #1
   15aac:	b	15968 <__assert_fail@plt+0x4364>
   15ab0:	mvn	r0, #0
   15ab4:	b	15968 <__assert_fail@plt+0x4364>
   15ab8:	mvn	r0, #0
   15abc:	b	15968 <__assert_fail@plt+0x4364>
   15ac0:	svcmi	0x00800000
   15ac4:	push	{r4, lr}
   15ac8:	sub	sp, sp, #8
   15acc:	mov	r4, r1
   15ad0:	add	r2, sp, #4
   15ad4:	bl	15928 <__assert_fail@plt+0x4324>
   15ad8:	cmn	r0, #1
   15adc:	beq	15af4 <__assert_fail@plt+0x44f0>
   15ae0:	cmp	r0, #0
   15ae4:	movne	r0, r4
   15ae8:	ldreq	r0, [sp, #4]
   15aec:	add	sp, sp, #8
   15af0:	pop	{r4, pc}
   15af4:	mov	r0, #0
   15af8:	b	15aec <__assert_fail@plt+0x44e8>
   15afc:	push	{r4, r5, r6, lr}
   15b00:	sub	sp, sp, #8
   15b04:	mov	r4, r0
   15b08:	mov	r3, #1
   15b0c:	add	r2, sp, #4
   15b10:	bl	14ff0 <__assert_fail@plt+0x39ec>
   15b14:	subs	r5, r0, #0
   15b18:	beq	15b38 <__assert_fail@plt+0x4534>
   15b1c:	ldr	r3, [r4, #16]
   15b20:	sub	r3, r3, #1
   15b24:	str	r3, [r4, #16]
   15b28:	ldr	r3, [sp, #4]
   15b2c:	ldr	r3, [r3]
   15b30:	cmp	r3, #0
   15b34:	beq	15b44 <__assert_fail@plt+0x4540>
   15b38:	mov	r0, r5
   15b3c:	add	sp, sp, #8
   15b40:	pop	{r4, r5, r6, pc}
   15b44:	ldr	r3, [r4, #12]
   15b48:	sub	r3, r3, #1
   15b4c:	str	r3, [r4, #12]
   15b50:	vmov	s15, r3
   15b54:	vcvt.f32.u32	s15, s15
   15b58:	ldr	r3, [r4, #20]
   15b5c:	vldr	s14, [r4, #8]
   15b60:	vcvt.f32.u32	s14, s14
   15b64:	vldr	s13, [r3]
   15b68:	vmul.f32	s14, s14, s13
   15b6c:	vcmpe.f32	s15, s14
   15b70:	vmrs	APSR_nzcv, fpscr
   15b74:	bpl	15b38 <__assert_fail@plt+0x4534>
   15b78:	mov	r0, r4
   15b7c:	bl	14cac <__assert_fail@plt+0x36a8>
   15b80:	ldr	r3, [r4, #20]
   15b84:	vldr	s15, [r4, #8]
   15b88:	vcvt.f32.u32	s15, s15
   15b8c:	vldr	s14, [r4, #12]
   15b90:	vcvt.f32.u32	s13, s14
   15b94:	vldr	s14, [r3]
   15b98:	vmul.f32	s14, s15, s14
   15b9c:	vcmpe.f32	s13, s14
   15ba0:	vmrs	APSR_nzcv, fpscr
   15ba4:	bpl	15b38 <__assert_fail@plt+0x4534>
   15ba8:	ldrb	r2, [r3, #16]
   15bac:	cmp	r2, #0
   15bb0:	vldr	s14, [r3, #4]
   15bb4:	vmuleq.f32	s15, s15, s14
   15bb8:	vldreq	s14, [r3, #8]
   15bbc:	vmul.f32	s15, s15, s14
   15bc0:	vcvt.u32.f32	s15, s15
   15bc4:	vmov	r1, s15
   15bc8:	mov	r0, r4
   15bcc:	bl	157f4 <__assert_fail@plt+0x41f0>
   15bd0:	cmp	r0, #0
   15bd4:	bne	15b38 <__assert_fail@plt+0x4534>
   15bd8:	ldr	r0, [r4, #36]	; 0x24
   15bdc:	cmp	r0, #0
   15be0:	beq	15bf8 <__assert_fail@plt+0x45f4>
   15be4:	ldr	r6, [r0, #4]
   15be8:	bl	193bc <__assert_fail@plt+0x7db8>
   15bec:	mov	r0, r6
   15bf0:	cmp	r6, #0
   15bf4:	bne	15be4 <__assert_fail@plt+0x45e0>
   15bf8:	mov	r3, #0
   15bfc:	str	r3, [r4, #36]	; 0x24
   15c00:	b	15b38 <__assert_fail@plt+0x4534>
   15c04:	push	{r4, lr}
   15c08:	bl	15afc <__assert_fail@plt+0x44f8>
   15c0c:	pop	{r4, pc}
   15c10:	mov	r3, #1
   15c14:	strb	r3, [r0, #28]
   15c18:	mov	r3, #0
   15c1c:	str	r3, [r0, #20]
   15c20:	str	r3, [r0, #24]
   15c24:	str	r1, [r0]
   15c28:	str	r1, [r0, #4]
   15c2c:	str	r1, [r0, #8]
   15c30:	str	r1, [r0, #12]
   15c34:	str	r1, [r0, #16]
   15c38:	bx	lr
   15c3c:	ldrb	r0, [r0, #28]
   15c40:	bx	lr
   15c44:	mov	r2, r0
   15c48:	ldrb	ip, [r0, #28]
   15c4c:	eor	ip, ip, #1
   15c50:	ldr	r3, [r0, #20]
   15c54:	add	r3, ip, r3
   15c58:	and	r3, r3, #3
   15c5c:	ldr	r0, [r0, r3, lsl #2]
   15c60:	str	r1, [r2, r3, lsl #2]
   15c64:	str	r3, [r2, #20]
   15c68:	ldr	r1, [r2, #24]
   15c6c:	cmp	r3, r1
   15c70:	addeq	r3, ip, r3
   15c74:	andeq	r3, r3, #3
   15c78:	streq	r3, [r2, #24]
   15c7c:	mov	r3, #0
   15c80:	strb	r3, [r2, #28]
   15c84:	bx	lr
   15c88:	ldrb	r3, [r0, #28]
   15c8c:	cmp	r3, #0
   15c90:	bne	15cc8 <__assert_fail@plt+0x46c4>
   15c94:	mov	r2, r0
   15c98:	ldr	r3, [r0, #20]
   15c9c:	ldr	r0, [r0, r3, lsl #2]
   15ca0:	ldr	r1, [r2, #16]
   15ca4:	str	r1, [r2, r3, lsl #2]
   15ca8:	ldr	r1, [r2, #24]
   15cac:	cmp	r3, r1
   15cb0:	moveq	r3, #1
   15cb4:	strbeq	r3, [r2, #28]
   15cb8:	addne	r3, r3, #3
   15cbc:	andne	r3, r3, #3
   15cc0:	strne	r3, [r2, #20]
   15cc4:	bx	lr
   15cc8:	push	{r4, lr}
   15ccc:	bl	115c8 <abort@plt>
   15cd0:	push	{r2, r3}
   15cd4:	push	{lr}		; (str lr, [sp, #-4]!)
   15cd8:	sub	sp, sp, #12
   15cdc:	ldr	r2, [sp, #16]
   15ce0:	tst	r2, #64	; 0x40
   15ce4:	addne	r3, sp, #24
   15ce8:	strne	r3, [sp, #4]
   15cec:	ldrne	r3, [sp, #20]
   15cf0:	moveq	r3, #0
   15cf4:	bl	1146c <openat64@plt>
   15cf8:	bl	180a4 <__assert_fail@plt+0x6aa0>
   15cfc:	add	sp, sp, #12
   15d00:	pop	{lr}		; (ldr lr, [sp], #4)
   15d04:	add	sp, sp, #8
   15d08:	bx	lr
   15d0c:	push	{r4, r5, r6, r7, r8, lr}
   15d10:	mov	r6, r3
   15d14:	orr	r2, r2, #540672	; 0x84000
   15d18:	orr	r2, r2, #2304	; 0x900
   15d1c:	bl	15cd0 <__assert_fail@plt+0x46cc>
   15d20:	subs	r4, r0, #0
   15d24:	blt	15d60 <__assert_fail@plt+0x475c>
   15d28:	mov	r0, r4
   15d2c:	bl	11550 <fdopendir@plt>
   15d30:	subs	r5, r0, #0
   15d34:	beq	15d44 <__assert_fail@plt+0x4740>
   15d38:	str	r4, [r6]
   15d3c:	mov	r0, r5
   15d40:	pop	{r4, r5, r6, r7, r8, pc}
   15d44:	bl	11484 <__errno_location@plt>
   15d48:	mov	r6, r0
   15d4c:	ldr	r7, [r0]
   15d50:	mov	r0, r4
   15d54:	bl	115d4 <close@plt>
   15d58:	str	r7, [r6]
   15d5c:	b	15d3c <__assert_fail@plt+0x4738>
   15d60:	mov	r5, #0
   15d64:	b	15d3c <__assert_fail@plt+0x4738>
   15d68:	push	{r4, r5, r6, lr}
   15d6c:	subs	r4, r0, #0
   15d70:	beq	15de8 <__assert_fail@plt+0x47e4>
   15d74:	mov	r1, #47	; 0x2f
   15d78:	mov	r0, r4
   15d7c:	bl	1152c <strrchr@plt>
   15d80:	cmp	r0, #0
   15d84:	addne	r5, r0, #1
   15d88:	moveq	r5, r4
   15d8c:	sub	r3, r5, r4
   15d90:	cmp	r3, #6
   15d94:	ble	15dd4 <__assert_fail@plt+0x47d0>
   15d98:	mov	r2, #7
   15d9c:	ldr	r1, [pc, #96]	; 15e04 <__assert_fail@plt+0x4800>
   15da0:	sub	r0, r5, #7
   15da4:	bl	115bc <strncmp@plt>
   15da8:	cmp	r0, #0
   15dac:	bne	15dd4 <__assert_fail@plt+0x47d0>
   15db0:	mov	r2, #3
   15db4:	ldr	r1, [pc, #76]	; 15e08 <__assert_fail@plt+0x4804>
   15db8:	mov	r0, r5
   15dbc:	bl	115bc <strncmp@plt>
   15dc0:	cmp	r0, #0
   15dc4:	addeq	r4, r5, #3
   15dc8:	ldreq	r3, [pc, #60]	; 15e0c <__assert_fail@plt+0x4808>
   15dcc:	streq	r4, [r3]
   15dd0:	movne	r4, r5
   15dd4:	ldr	r3, [pc, #52]	; 15e10 <__assert_fail@plt+0x480c>
   15dd8:	str	r4, [r3]
   15ddc:	ldr	r3, [pc, #48]	; 15e14 <__assert_fail@plt+0x4810>
   15de0:	str	r4, [r3]
   15de4:	pop	{r4, r5, r6, pc}
   15de8:	ldr	r3, [pc, #40]	; 15e18 <__assert_fail@plt+0x4814>
   15dec:	ldr	r3, [r3]
   15df0:	mov	r2, #55	; 0x37
   15df4:	mov	r1, #1
   15df8:	ldr	r0, [pc, #28]	; 15e1c <__assert_fail@plt+0x4818>
   15dfc:	bl	11364 <fwrite@plt>
   15e00:	bl	115c8 <abort@plt>
   15e04:	andeq	fp, r1, r8, lsr #32
   15e08:	andeq	fp, r1, r0, lsr r0
   15e0c:			; <UNDEFINED> instruction: 0x0002c1b0
   15e10:	andeq	ip, r2, ip, lsl #4
   15e14:			; <UNDEFINED> instruction: 0x0002c1b4
   15e18:	andeq	ip, r2, r0, asr #3
   15e1c:	strdeq	sl, [r1], -r0
   15e20:	push	{r4, r5, r6, lr}
   15e24:	mov	r5, r0
   15e28:	mov	r4, r1
   15e2c:	mov	r2, #48	; 0x30
   15e30:	mov	r1, #0
   15e34:	bl	114a8 <memset@plt>
   15e38:	cmp	r4, #10
   15e3c:	beq	15e4c <__assert_fail@plt+0x4848>
   15e40:	str	r4, [r5]
   15e44:	mov	r0, r5
   15e48:	pop	{r4, r5, r6, pc}
   15e4c:	bl	115c8 <abort@plt>
   15e50:	push	{r4, r5, r6, lr}
   15e54:	mov	r4, r0
   15e58:	mov	r5, r1
   15e5c:	mov	r2, #5
   15e60:	mov	r1, r0
   15e64:	mov	r0, #0
   15e68:	bl	112f8 <dcgettext@plt>
   15e6c:	cmp	r4, r0
   15e70:	popne	{r4, r5, r6, pc}
   15e74:	bl	194bc <__assert_fail@plt+0x7eb8>
   15e78:	ldrb	r3, [r0]
   15e7c:	bic	r3, r3, #32
   15e80:	cmp	r3, #85	; 0x55
   15e84:	beq	15f00 <__assert_fail@plt+0x48fc>
   15e88:	cmp	r3, #71	; 0x47
   15e8c:	bne	15f5c <__assert_fail@plt+0x4958>
   15e90:	ldrb	r3, [r0, #1]
   15e94:	bic	r3, r3, #32
   15e98:	cmp	r3, #66	; 0x42
   15e9c:	bne	15f5c <__assert_fail@plt+0x4958>
   15ea0:	ldrb	r3, [r0, #2]
   15ea4:	cmp	r3, #49	; 0x31
   15ea8:	bne	15f5c <__assert_fail@plt+0x4958>
   15eac:	ldrb	r3, [r0, #3]
   15eb0:	cmp	r3, #56	; 0x38
   15eb4:	bne	15f5c <__assert_fail@plt+0x4958>
   15eb8:	ldrb	r3, [r0, #4]
   15ebc:	cmp	r3, #48	; 0x30
   15ec0:	bne	15f5c <__assert_fail@plt+0x4958>
   15ec4:	ldrb	r3, [r0, #5]
   15ec8:	cmp	r3, #51	; 0x33
   15ecc:	bne	15f5c <__assert_fail@plt+0x4958>
   15ed0:	ldrb	r3, [r0, #6]
   15ed4:	cmp	r3, #48	; 0x30
   15ed8:	bne	15f5c <__assert_fail@plt+0x4958>
   15edc:	ldrb	r3, [r0, #7]
   15ee0:	cmp	r3, #0
   15ee4:	bne	15f5c <__assert_fail@plt+0x4958>
   15ee8:	ldrb	r2, [r4]
   15eec:	ldr	r3, [pc, #124]	; 15f70 <__assert_fail@plt+0x496c>
   15ef0:	ldr	r0, [pc, #124]	; 15f74 <__assert_fail@plt+0x4970>
   15ef4:	cmp	r2, #96	; 0x60
   15ef8:	movne	r0, r3
   15efc:	pop	{r4, r5, r6, pc}
   15f00:	ldrb	r3, [r0, #1]
   15f04:	bic	r3, r3, #32
   15f08:	cmp	r3, #84	; 0x54
   15f0c:	bne	15f5c <__assert_fail@plt+0x4958>
   15f10:	ldrb	r3, [r0, #2]
   15f14:	bic	r3, r3, #32
   15f18:	cmp	r3, #70	; 0x46
   15f1c:	bne	15f5c <__assert_fail@plt+0x4958>
   15f20:	ldrb	r3, [r0, #3]
   15f24:	cmp	r3, #45	; 0x2d
   15f28:	bne	15f5c <__assert_fail@plt+0x4958>
   15f2c:	ldrb	r3, [r0, #4]
   15f30:	cmp	r3, #56	; 0x38
   15f34:	bne	15f5c <__assert_fail@plt+0x4958>
   15f38:	ldrb	r3, [r0, #5]
   15f3c:	cmp	r3, #0
   15f40:	bne	15f5c <__assert_fail@plt+0x4958>
   15f44:	ldrb	r2, [r4]
   15f48:	ldr	r3, [pc, #40]	; 15f78 <__assert_fail@plt+0x4974>
   15f4c:	ldr	r0, [pc, #40]	; 15f7c <__assert_fail@plt+0x4978>
   15f50:	cmp	r2, #96	; 0x60
   15f54:	movne	r0, r3
   15f58:	pop	{r4, r5, r6, pc}
   15f5c:	ldr	r3, [pc, #28]	; 15f80 <__assert_fail@plt+0x497c>
   15f60:	ldr	r0, [pc, #28]	; 15f84 <__assert_fail@plt+0x4980>
   15f64:	cmp	r5, #9
   15f68:	movne	r0, r3
   15f6c:	pop	{r4, r5, r6, pc}
   15f70:	andeq	fp, r1, ip, lsl #1
   15f74:	muleq	r1, r8, r0
   15f78:	andeq	fp, r1, r8, lsl #1
   15f7c:	muleq	r1, ip, r0
   15f80:	muleq	r1, r0, r0
   15f84:	muleq	r1, r4, r0
   15f88:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15f8c:	sub	sp, sp, #116	; 0x74
   15f90:	str	r0, [sp, #36]	; 0x24
   15f94:	mov	sl, r1
   15f98:	str	r2, [sp, #52]	; 0x34
   15f9c:	str	r3, [sp, #28]
   15fa0:	ldr	r8, [sp, #152]	; 0x98
   15fa4:	bl	1137c <__ctype_get_mb_cur_max@plt>
   15fa8:	str	r0, [sp, #84]	; 0x54
   15fac:	ldr	r3, [sp, #156]	; 0x9c
   15fb0:	lsr	r3, r3, #1
   15fb4:	and	r3, r3, #1
   15fb8:	str	r3, [sp, #32]
   15fbc:	mov	r3, #1
   15fc0:	str	r3, [sp, #40]	; 0x28
   15fc4:	mov	r3, #0
   15fc8:	str	r3, [sp, #80]	; 0x50
   15fcc:	str	r3, [sp, #44]	; 0x2c
   15fd0:	str	r3, [sp, #48]	; 0x30
   15fd4:	str	r3, [sp, #60]	; 0x3c
   15fd8:	str	r3, [sp, #72]	; 0x48
   15fdc:	str	r3, [sp, #76]	; 0x4c
   15fe0:	mov	r7, sl
   15fe4:	mov	sl, r8
   15fe8:	cmp	sl, #10
   15fec:	ldrls	pc, [pc, sl, lsl #2]
   15ff0:	b	161a8 <__assert_fail@plt+0x4ba4>
   15ff4:	andeq	r6, r1, r8, asr r0
   15ff8:	andeq	r6, r1, r8, lsr #32
   15ffc:	andeq	r6, r1, r4, lsl #3
   16000:	andeq	r6, r1, r0, lsr #32
   16004:	andeq	r6, r1, r8, lsr r1
   16008:	andeq	r6, r1, r8, rrx
   1600c:	ldrdeq	r7, [r1], -r4
   16010:	andeq	r6, r1, ip, lsr #3
   16014:	andeq	r6, r1, r4, lsr #1
   16018:	andeq	r6, r1, r4, lsr #1
   1601c:	andeq	r6, r1, r4, lsr #1
   16020:	mov	r3, #1
   16024:	str	r3, [sp, #48]	; 0x30
   16028:	mov	r3, #1
   1602c:	str	r3, [sp, #32]
   16030:	str	r3, [sp, #60]	; 0x3c
   16034:	ldr	r3, [pc, #4068]	; 17020 <__assert_fail@plt+0x5a1c>
   16038:	str	r3, [sp, #72]	; 0x48
   1603c:	mov	fp, #0
   16040:	mov	sl, #2
   16044:	mov	r6, #0
   16048:	ldr	r3, [sp, #48]	; 0x30
   1604c:	eor	r3, r3, #1
   16050:	str	r3, [sp, #68]	; 0x44
   16054:	b	1693c <__assert_fail@plt+0x5338>
   16058:	mov	r3, #0
   1605c:	str	r3, [sp, #32]
   16060:	mov	fp, r3
   16064:	b	16044 <__assert_fail@plt+0x4a40>
   16068:	ldr	r3, [sp, #32]
   1606c:	cmp	r3, #0
   16070:	bne	161c4 <__assert_fail@plt+0x4bc0>
   16074:	cmp	r7, #0
   16078:	beq	161e4 <__assert_fail@plt+0x4be0>
   1607c:	ldr	r3, [sp, #36]	; 0x24
   16080:	mov	r2, #34	; 0x22
   16084:	strb	r2, [r3]
   16088:	mov	r3, #1
   1608c:	str	r3, [sp, #48]	; 0x30
   16090:	str	r3, [sp, #60]	; 0x3c
   16094:	ldr	r3, [pc, #3980]	; 17028 <__assert_fail@plt+0x5a24>
   16098:	str	r3, [sp, #72]	; 0x48
   1609c:	mov	fp, #1
   160a0:	b	16044 <__assert_fail@plt+0x4a40>
   160a4:	cmp	sl, #10
   160a8:	beq	160cc <__assert_fail@plt+0x4ac8>
   160ac:	mov	r1, sl
   160b0:	ldr	r0, [pc, #3948]	; 17024 <__assert_fail@plt+0x5a20>
   160b4:	bl	15e50 <__assert_fail@plt+0x484c>
   160b8:	str	r0, [sp, #164]	; 0xa4
   160bc:	mov	r1, sl
   160c0:	ldr	r0, [pc, #3928]	; 17020 <__assert_fail@plt+0x5a1c>
   160c4:	bl	15e50 <__assert_fail@plt+0x484c>
   160c8:	str	r0, [sp, #168]	; 0xa8
   160cc:	ldr	r3, [sp, #32]
   160d0:	cmp	r3, #0
   160d4:	movne	fp, #0
   160d8:	bne	16110 <__assert_fail@plt+0x4b0c>
   160dc:	ldr	r3, [sp, #164]	; 0xa4
   160e0:	ldrb	r3, [r3]
   160e4:	cmp	r3, #0
   160e8:	beq	16130 <__assert_fail@plt+0x4b2c>
   160ec:	ldr	r2, [sp, #164]	; 0xa4
   160f0:	mov	fp, #0
   160f4:	ldr	r1, [sp, #36]	; 0x24
   160f8:	cmp	r7, fp
   160fc:	strbhi	r3, [r1, fp]
   16100:	add	fp, fp, #1
   16104:	ldrb	r3, [r2, #1]!
   16108:	cmp	r3, #0
   1610c:	bne	160f8 <__assert_fail@plt+0x4af4>
   16110:	ldr	r0, [sp, #168]	; 0xa8
   16114:	bl	11460 <strlen@plt>
   16118:	str	r0, [sp, #60]	; 0x3c
   1611c:	ldr	r3, [sp, #168]	; 0xa8
   16120:	str	r3, [sp, #72]	; 0x48
   16124:	mov	r3, #1
   16128:	str	r3, [sp, #48]	; 0x30
   1612c:	b	16044 <__assert_fail@plt+0x4a40>
   16130:	mov	fp, #0
   16134:	b	16110 <__assert_fail@plt+0x4b0c>
   16138:	ldr	r3, [sp, #32]
   1613c:	cmp	r3, #0
   16140:	bne	16200 <__assert_fail@plt+0x4bfc>
   16144:	mov	r3, #1
   16148:	str	r3, [sp, #48]	; 0x30
   1614c:	cmp	r7, #0
   16150:	beq	1621c <__assert_fail@plt+0x4c18>
   16154:	ldr	r3, [sp, #36]	; 0x24
   16158:	mov	r2, #39	; 0x27
   1615c:	strb	r2, [r3]
   16160:	mov	r3, #0
   16164:	str	r3, [sp, #32]
   16168:	mov	r3, #1
   1616c:	str	r3, [sp, #60]	; 0x3c
   16170:	ldr	r3, [pc, #3752]	; 17020 <__assert_fail@plt+0x5a1c>
   16174:	str	r3, [sp, #72]	; 0x48
   16178:	mov	fp, #1
   1617c:	mov	sl, #2
   16180:	b	16044 <__assert_fail@plt+0x4a40>
   16184:	ldr	r3, [sp, #32]
   16188:	cmp	r3, #0
   1618c:	beq	1614c <__assert_fail@plt+0x4b48>
   16190:	mov	r3, #1
   16194:	str	r3, [sp, #60]	; 0x3c
   16198:	ldr	r3, [pc, #3712]	; 17020 <__assert_fail@plt+0x5a1c>
   1619c:	str	r3, [sp, #72]	; 0x48
   161a0:	mov	fp, #0
   161a4:	b	16044 <__assert_fail@plt+0x4a40>
   161a8:	bl	115c8 <abort@plt>
   161ac:	mov	r3, #0
   161b0:	str	r3, [sp, #32]
   161b4:	mov	r3, #1
   161b8:	str	r3, [sp, #48]	; 0x30
   161bc:	mov	fp, #0
   161c0:	b	16044 <__assert_fail@plt+0x4a40>
   161c4:	ldr	r3, [sp, #32]
   161c8:	str	r3, [sp, #48]	; 0x30
   161cc:	mov	r3, #1
   161d0:	str	r3, [sp, #60]	; 0x3c
   161d4:	ldr	r3, [pc, #3660]	; 17028 <__assert_fail@plt+0x5a24>
   161d8:	str	r3, [sp, #72]	; 0x48
   161dc:	mov	fp, #0
   161e0:	b	16044 <__assert_fail@plt+0x4a40>
   161e4:	mov	r3, #1
   161e8:	str	r3, [sp, #48]	; 0x30
   161ec:	str	r3, [sp, #60]	; 0x3c
   161f0:	ldr	r3, [pc, #3632]	; 17028 <__assert_fail@plt+0x5a24>
   161f4:	str	r3, [sp, #72]	; 0x48
   161f8:	mov	fp, #1
   161fc:	b	16044 <__assert_fail@plt+0x4a40>
   16200:	mov	r3, #1
   16204:	str	r3, [sp, #60]	; 0x3c
   16208:	ldr	r3, [pc, #3600]	; 17020 <__assert_fail@plt+0x5a1c>
   1620c:	str	r3, [sp, #72]	; 0x48
   16210:	mov	fp, #0
   16214:	mov	sl, #2
   16218:	b	16044 <__assert_fail@plt+0x4a40>
   1621c:	mov	r3, #0
   16220:	str	r3, [sp, #32]
   16224:	mov	r3, #1
   16228:	str	r3, [sp, #60]	; 0x3c
   1622c:	ldr	r3, [pc, #3564]	; 17020 <__assert_fail@plt+0x5a1c>
   16230:	str	r3, [sp, #72]	; 0x48
   16234:	mov	fp, #1
   16238:	mov	sl, #2
   1623c:	b	16044 <__assert_fail@plt+0x4a40>
   16240:	mov	r3, #0
   16244:	str	r3, [sp, #56]	; 0x38
   16248:	ldr	r3, [sp, #52]	; 0x34
   1624c:	add	r2, r3, r6
   16250:	str	r2, [sp, #64]	; 0x40
   16254:	ldrb	r4, [r3, r6]
   16258:	cmp	r4, #126	; 0x7e
   1625c:	ldrls	pc, [pc, r4, lsl #2]
   16260:	b	16a9c <__assert_fail@plt+0x5498>
   16264:	andeq	r6, r1, ip, ror r4
   16268:	muleq	r1, ip, sl
   1626c:	muleq	r1, ip, sl
   16270:	muleq	r1, ip, sl
   16274:	muleq	r1, ip, sl
   16278:	muleq	r1, ip, sl
   1627c:	muleq	r1, ip, sl
   16280:	ldrdeq	r6, [r1], -r8
   16284:	andeq	r6, r1, r4, ror r4
   16288:	muleq	r1, r0, r7
   1628c:	andeq	r6, r1, r8, lsl #15
   16290:	strdeq	r6, [r1], -r8
   16294:	strdeq	r6, [r1], -r0
   16298:	andeq	r6, r1, ip, ror #8
   1629c:	muleq	r1, ip, sl
   162a0:	muleq	r1, ip, sl
   162a4:	muleq	r1, ip, sl
   162a8:	muleq	r1, ip, sl
   162ac:	muleq	r1, ip, sl
   162b0:	muleq	r1, ip, sl
   162b4:	muleq	r1, ip, sl
   162b8:	muleq	r1, ip, sl
   162bc:	muleq	r1, ip, sl
   162c0:	muleq	r1, ip, sl
   162c4:	muleq	r1, ip, sl
   162c8:	muleq	r1, ip, sl
   162cc:	muleq	r1, ip, sl
   162d0:	muleq	r1, ip, sl
   162d4:	muleq	r1, ip, sl
   162d8:	muleq	r1, ip, sl
   162dc:	muleq	r1, ip, sl
   162e0:	muleq	r1, ip, sl
   162e4:	andeq	r6, r1, ip, lsr #16
   162e8:	andeq	r6, r1, r8, lsr #16
   162ec:	andeq	r6, r1, r8, lsr #16
   162f0:	andeq	r6, r1, r0, lsl #16
   162f4:	andeq	r6, r1, r8, lsr #16
   162f8:	andeq	r6, r1, r0, ror lr
   162fc:	andeq	r6, r1, r8, lsr #16
   16300:	andeq	r6, r1, r0, lsl #20
   16304:	andeq	r6, r1, r8, lsr #16
   16308:	andeq	r6, r1, r8, lsr #16
   1630c:	andeq	r6, r1, r8, lsr #16
   16310:	andeq	r6, r1, r0, ror lr
   16314:	andeq	r6, r1, r0, ror lr
   16318:	andeq	r6, r1, r0, ror lr
   1631c:	andeq	r6, r1, r0, ror lr
   16320:	andeq	r6, r1, r0, ror lr
   16324:	andeq	r6, r1, r0, ror lr
   16328:	andeq	r6, r1, r0, ror lr
   1632c:	andeq	r6, r1, r0, ror lr
   16330:	andeq	r6, r1, r0, ror lr
   16334:	andeq	r6, r1, r0, ror lr
   16338:	andeq	r6, r1, r0, ror lr
   1633c:	andeq	r6, r1, r0, ror lr
   16340:	andeq	r6, r1, r0, ror lr
   16344:	andeq	r6, r1, r0, ror lr
   16348:	andeq	r6, r1, r0, ror lr
   1634c:	andeq	r6, r1, r0, ror lr
   16350:	andeq	r6, r1, r8, lsr #16
   16354:	andeq	r6, r1, r8, lsr #16
   16358:	andeq	r6, r1, r8, lsr #16
   1635c:	andeq	r6, r1, r8, lsr #16
   16360:	andeq	r6, r1, r4, lsl #11
   16364:	muleq	r1, ip, sl
   16368:	andeq	r6, r1, r0, ror lr
   1636c:	andeq	r6, r1, r0, ror lr
   16370:	andeq	r6, r1, r0, ror lr
   16374:	andeq	r6, r1, r0, ror lr
   16378:	andeq	r6, r1, r0, ror lr
   1637c:	andeq	r6, r1, r0, ror lr
   16380:	andeq	r6, r1, r0, ror lr
   16384:	andeq	r6, r1, r0, ror lr
   16388:	andeq	r6, r1, r0, ror lr
   1638c:	andeq	r6, r1, r0, ror lr
   16390:	andeq	r6, r1, r0, ror lr
   16394:	andeq	r6, r1, r0, ror lr
   16398:	andeq	r6, r1, r0, ror lr
   1639c:	andeq	r6, r1, r0, ror lr
   163a0:	andeq	r6, r1, r0, ror lr
   163a4:	andeq	r6, r1, r0, ror lr
   163a8:	andeq	r6, r1, r0, ror lr
   163ac:	andeq	r6, r1, r0, ror lr
   163b0:	andeq	r6, r1, r0, ror lr
   163b4:	andeq	r6, r1, r0, ror lr
   163b8:	andeq	r6, r1, r0, ror lr
   163bc:	andeq	r6, r1, r0, ror lr
   163c0:	andeq	r6, r1, r0, ror lr
   163c4:	andeq	r6, r1, r0, ror lr
   163c8:	andeq	r6, r1, r0, ror lr
   163cc:	andeq	r6, r1, r0, ror lr
   163d0:	andeq	r6, r1, r8, lsr #16
   163d4:	andeq	r6, r1, r0, lsl #14
   163d8:	andeq	r6, r1, r0, ror lr
   163dc:	andeq	r6, r1, r8, lsr #16
   163e0:	andeq	r6, r1, r0, ror lr
   163e4:	andeq	r6, r1, r8, lsr #16
   163e8:	andeq	r6, r1, r0, ror lr
   163ec:	andeq	r6, r1, r0, ror lr
   163f0:	andeq	r6, r1, r0, ror lr
   163f4:	andeq	r6, r1, r0, ror lr
   163f8:	andeq	r6, r1, r0, ror lr
   163fc:	andeq	r6, r1, r0, ror lr
   16400:	andeq	r6, r1, r0, ror lr
   16404:	andeq	r6, r1, r0, ror lr
   16408:	andeq	r6, r1, r0, ror lr
   1640c:	andeq	r6, r1, r0, ror lr
   16410:	andeq	r6, r1, r0, ror lr
   16414:	andeq	r6, r1, r0, ror lr
   16418:	andeq	r6, r1, r0, ror lr
   1641c:	andeq	r6, r1, r0, ror lr
   16420:	andeq	r6, r1, r0, ror lr
   16424:	andeq	r6, r1, r0, ror lr
   16428:	andeq	r6, r1, r0, ror lr
   1642c:	andeq	r6, r1, r0, ror lr
   16430:	andeq	r6, r1, r0, ror lr
   16434:	andeq	r6, r1, r0, ror lr
   16438:	andeq	r6, r1, r0, ror lr
   1643c:	andeq	r6, r1, r0, ror lr
   16440:	andeq	r6, r1, r0, ror lr
   16444:	andeq	r6, r1, r0, ror lr
   16448:	andeq	r6, r1, r0, ror lr
   1644c:	andeq	r6, r1, r0, ror lr
   16450:	andeq	r6, r1, r0, ror #15
   16454:	andeq	r6, r1, r8, lsr #16
   16458:	andeq	r6, r1, r0, ror #15
   1645c:	andeq	r6, r1, r0, lsl #16
   16460:	mov	r3, #0
   16464:	str	r3, [sp, #56]	; 0x38
   16468:	b	16248 <__assert_fail@plt+0x4c44>
   1646c:	mov	r3, #114	; 0x72
   16470:	b	16794 <__assert_fail@plt+0x5190>
   16474:	mov	r3, #98	; 0x62
   16478:	b	167ac <__assert_fail@plt+0x51a8>
   1647c:	ldr	r3, [sp, #48]	; 0x30
   16480:	cmp	r3, #0
   16484:	beq	1656c <__assert_fail@plt+0x4f68>
   16488:	ldr	r3, [sp, #32]
   1648c:	cmp	r3, #0
   16490:	bne	16ff4 <__assert_fail@plt+0x59f0>
   16494:	ldr	r3, [sp, #44]	; 0x2c
   16498:	eor	r3, r3, #1
   1649c:	cmp	sl, #2
   164a0:	movne	r3, #0
   164a4:	andeq	r3, r3, #1
   164a8:	cmp	r3, #0
   164ac:	moveq	r2, fp
   164b0:	beq	164f4 <__assert_fail@plt+0x4ef0>
   164b4:	cmp	r7, fp
   164b8:	ldrhi	r2, [sp, #36]	; 0x24
   164bc:	movhi	r1, #39	; 0x27
   164c0:	strbhi	r1, [r2, fp]
   164c4:	add	r2, fp, #1
   164c8:	cmp	r7, r2
   164cc:	ldrhi	r1, [sp, #36]	; 0x24
   164d0:	movhi	r0, #36	; 0x24
   164d4:	strbhi	r0, [r1, r2]
   164d8:	add	r2, fp, #2
   164dc:	cmp	r7, r2
   164e0:	ldrhi	r1, [sp, #36]	; 0x24
   164e4:	movhi	r0, #39	; 0x27
   164e8:	strbhi	r0, [r1, r2]
   164ec:	add	r2, fp, #3
   164f0:	str	r3, [sp, #44]	; 0x2c
   164f4:	cmp	r7, r2
   164f8:	ldrhi	r3, [sp, #36]	; 0x24
   164fc:	movhi	r1, #92	; 0x5c
   16500:	strbhi	r1, [r3, r2]
   16504:	add	fp, r2, #1
   16508:	cmp	r5, #0
   1650c:	beq	16e78 <__assert_fail@plt+0x5874>
   16510:	add	r3, r6, #1
   16514:	ldr	r1, [sp, #28]
   16518:	cmp	r1, r3
   1651c:	bls	16e88 <__assert_fail@plt+0x5884>
   16520:	ldr	r1, [sp, #52]	; 0x34
   16524:	ldrb	r3, [r1, r3]
   16528:	sub	r3, r3, #48	; 0x30
   1652c:	uxtb	r3, r3
   16530:	cmp	r3, #9
   16534:	bhi	16e94 <__assert_fail@plt+0x5890>
   16538:	cmp	r7, fp
   1653c:	movhi	r3, #48	; 0x30
   16540:	ldrhi	r1, [sp, #36]	; 0x24
   16544:	strbhi	r3, [r1, fp]
   16548:	add	r3, r2, #2
   1654c:	cmp	r7, r3
   16550:	movhi	r1, #48	; 0x30
   16554:	ldrhi	r0, [sp, #36]	; 0x24
   16558:	strbhi	r1, [r0, r3]
   1655c:	add	fp, r2, #3
   16560:	ldr	r8, [sp, #32]
   16564:	mov	r4, #48	; 0x30
   16568:	b	16844 <__assert_fail@plt+0x5240>
   1656c:	ldr	r3, [sp, #156]	; 0x9c
   16570:	tst	r3, #1
   16574:	bne	16938 <__assert_fail@plt+0x5334>
   16578:	ldr	r5, [sp, #48]	; 0x30
   1657c:	mov	r8, r5
   16580:	b	16844 <__assert_fail@plt+0x5240>
   16584:	cmp	sl, #2
   16588:	beq	165a0 <__assert_fail@plt+0x4f9c>
   1658c:	cmp	sl, #5
   16590:	beq	165b8 <__assert_fail@plt+0x4fb4>
   16594:	mov	r8, #0
   16598:	mov	r5, r8
   1659c:	b	16844 <__assert_fail@plt+0x5240>
   165a0:	ldr	r3, [sp, #32]
   165a4:	cmp	r3, #0
   165a8:	bne	17008 <__assert_fail@plt+0x5a04>
   165ac:	mov	r8, r3
   165b0:	mov	r5, r3
   165b4:	b	16844 <__assert_fail@plt+0x5240>
   165b8:	ldr	r3, [sp, #156]	; 0x9c
   165bc:	tst	r3, #4
   165c0:	beq	16ea0 <__assert_fail@plt+0x589c>
   165c4:	add	r3, r6, #2
   165c8:	ldr	r2, [sp, #28]
   165cc:	cmp	r2, r3
   165d0:	bls	16eac <__assert_fail@plt+0x58a8>
   165d4:	ldr	r2, [sp, #52]	; 0x34
   165d8:	add	r2, r2, r6
   165dc:	ldrb	r2, [r2, #1]
   165e0:	cmp	r2, #63	; 0x3f
   165e4:	movne	r8, #0
   165e8:	movne	r5, r8
   165ec:	bne	16844 <__assert_fail@plt+0x5240>
   165f0:	ldr	r2, [sp, #52]	; 0x34
   165f4:	ldrb	r2, [r2, r3]
   165f8:	sub	r1, r2, #33	; 0x21
   165fc:	cmp	r1, #29
   16600:	ldrls	pc, [pc, r1, lsl #2]
   16604:	b	16eb8 <__assert_fail@plt+0x58b4>
   16608:	andeq	r6, r1, r0, lsl #13
   1660c:			; <UNDEFINED> instruction: 0x00016eb8
   16610:			; <UNDEFINED> instruction: 0x00016eb8
   16614:			; <UNDEFINED> instruction: 0x00016eb8
   16618:			; <UNDEFINED> instruction: 0x00016eb8
   1661c:			; <UNDEFINED> instruction: 0x00016eb8
   16620:	andeq	r6, r1, r0, lsl #13
   16624:	andeq	r6, r1, r0, lsl #13
   16628:	andeq	r6, r1, r0, lsl #13
   1662c:			; <UNDEFINED> instruction: 0x00016eb8
   16630:			; <UNDEFINED> instruction: 0x00016eb8
   16634:			; <UNDEFINED> instruction: 0x00016eb8
   16638:	andeq	r6, r1, r0, lsl #13
   1663c:			; <UNDEFINED> instruction: 0x00016eb8
   16640:	andeq	r6, r1, r0, lsl #13
   16644:			; <UNDEFINED> instruction: 0x00016eb8
   16648:			; <UNDEFINED> instruction: 0x00016eb8
   1664c:			; <UNDEFINED> instruction: 0x00016eb8
   16650:			; <UNDEFINED> instruction: 0x00016eb8
   16654:			; <UNDEFINED> instruction: 0x00016eb8
   16658:			; <UNDEFINED> instruction: 0x00016eb8
   1665c:			; <UNDEFINED> instruction: 0x00016eb8
   16660:			; <UNDEFINED> instruction: 0x00016eb8
   16664:			; <UNDEFINED> instruction: 0x00016eb8
   16668:			; <UNDEFINED> instruction: 0x00016eb8
   1666c:			; <UNDEFINED> instruction: 0x00016eb8
   16670:			; <UNDEFINED> instruction: 0x00016eb8
   16674:	andeq	r6, r1, r0, lsl #13
   16678:	andeq	r6, r1, r0, lsl #13
   1667c:	andeq	r6, r1, r0, lsl #13
   16680:	ldr	r1, [sp, #32]
   16684:	cmp	r1, #0
   16688:	bne	170c8 <__assert_fail@plt+0x5ac4>
   1668c:	cmp	r7, fp
   16690:	movhi	r1, #63	; 0x3f
   16694:	ldrhi	r0, [sp, #36]	; 0x24
   16698:	strbhi	r1, [r0, fp]
   1669c:	add	r1, fp, #1
   166a0:	cmp	r7, r1
   166a4:	ldrhi	r0, [sp, #36]	; 0x24
   166a8:	movhi	ip, #34	; 0x22
   166ac:	strbhi	ip, [r0, r1]
   166b0:	add	r1, fp, #2
   166b4:	cmp	r7, r1
   166b8:	ldrhi	r0, [sp, #36]	; 0x24
   166bc:	movhi	ip, #34	; 0x22
   166c0:	strbhi	ip, [r0, r1]
   166c4:	add	r1, fp, #3
   166c8:	cmp	r7, r1
   166cc:	movhi	r0, #63	; 0x3f
   166d0:	ldrhi	ip, [sp, #36]	; 0x24
   166d4:	strbhi	r0, [ip, r1]
   166d8:	add	fp, fp, #4
   166dc:	ldr	r5, [sp, #32]
   166e0:	mov	r8, r5
   166e4:	mov	r4, r2
   166e8:	mov	r6, r3
   166ec:	b	16844 <__assert_fail@plt+0x5240>
   166f0:	mov	r3, #102	; 0x66
   166f4:	b	167ac <__assert_fail@plt+0x51a8>
   166f8:	mov	r3, #118	; 0x76
   166fc:	b	167ac <__assert_fail@plt+0x51a8>
   16700:	cmp	sl, #2
   16704:	beq	16770 <__assert_fail@plt+0x516c>
   16708:	ldr	r3, [sp, #48]	; 0x30
   1670c:	ldr	r2, [sp, #32]
   16710:	and	r3, r3, r2
   16714:	tst	r9, r3
   16718:	moveq	r3, r4
   1671c:	beq	167ac <__assert_fail@plt+0x51a8>
   16720:	mov	r8, #0
   16724:	mov	r5, r8
   16728:	eor	r5, r5, #1
   1672c:	ldr	r3, [sp, #44]	; 0x2c
   16730:	and	r5, r5, r3
   16734:	tst	r5, #255	; 0xff
   16738:	beq	16918 <__assert_fail@plt+0x5314>
   1673c:	cmp	r7, fp
   16740:	ldrhi	r3, [sp, #36]	; 0x24
   16744:	movhi	r2, #39	; 0x27
   16748:	strbhi	r2, [r3, fp]
   1674c:	add	r3, fp, #1
   16750:	cmp	r7, r3
   16754:	ldrhi	r2, [sp, #36]	; 0x24
   16758:	movhi	r1, #39	; 0x27
   1675c:	strbhi	r1, [r2, r3]
   16760:	add	fp, fp, #2
   16764:	mov	r3, #0
   16768:	str	r3, [sp, #44]	; 0x2c
   1676c:	b	16918 <__assert_fail@plt+0x5314>
   16770:	ldr	r3, [sp, #32]
   16774:	cmp	r3, #0
   16778:	bne	17014 <__assert_fail@plt+0x5a10>
   1677c:	mov	r8, r3
   16780:	mov	r5, r3
   16784:	b	16728 <__assert_fail@plt+0x5124>
   16788:	mov	r3, #110	; 0x6e
   1678c:	b	16794 <__assert_fail@plt+0x5190>
   16790:	mov	r3, #116	; 0x74
   16794:	ldr	r2, [sp, #32]
   16798:	cmp	sl, #2
   1679c:	movne	r2, #0
   167a0:	andeq	r2, r2, #1
   167a4:	cmp	r2, #0
   167a8:	bne	167cc <__assert_fail@plt+0x51c8>
   167ac:	ldr	r2, [sp, #48]	; 0x30
   167b0:	cmp	r2, #0
   167b4:	moveq	r8, r2
   167b8:	moveq	r5, r2
   167bc:	beq	16844 <__assert_fail@plt+0x5240>
   167c0:	mov	r4, r3
   167c4:	mov	r8, #0
   167c8:	b	1689c <__assert_fail@plt+0x5298>
   167cc:	mov	r8, sl
   167d0:	mov	sl, r7
   167d4:	b	17040 <__assert_fail@plt+0x5a3c>
   167d8:	mov	r3, #97	; 0x61
   167dc:	b	167ac <__assert_fail@plt+0x51a8>
   167e0:	ldr	r3, [sp, #28]
   167e4:	cmn	r3, #1
   167e8:	beq	16814 <__assert_fail@plt+0x5210>
   167ec:	ldr	r3, [sp, #28]
   167f0:	subs	r3, r3, #1
   167f4:	movne	r3, #1
   167f8:	cmp	r3, #0
   167fc:	bne	16ec4 <__assert_fail@plt+0x58c0>
   16800:	cmp	r6, #0
   16804:	beq	1682c <__assert_fail@plt+0x5228>
   16808:	mov	r8, #0
   1680c:	mov	r5, r8
   16810:	b	16844 <__assert_fail@plt+0x5240>
   16814:	ldr	r3, [sp, #52]	; 0x34
   16818:	ldrb	r3, [r3, #1]
   1681c:	adds	r3, r3, #0
   16820:	movne	r3, #1
   16824:	b	167f8 <__assert_fail@plt+0x51f4>
   16828:	mov	r8, #0
   1682c:	ldr	r5, [sp, #32]
   16830:	cmp	sl, #2
   16834:	movne	r5, #0
   16838:	andeq	r5, r5, #1
   1683c:	cmp	r5, #0
   16840:	bne	169f4 <__assert_fail@plt+0x53f0>
   16844:	ldr	r3, [sp, #68]	; 0x44
   16848:	cmp	sl, #2
   1684c:	orreq	r3, r3, #1
   16850:	eor	r3, r3, #1
   16854:	ldr	r2, [sp, #32]
   16858:	orr	r3, r2, r3
   1685c:	tst	r3, #255	; 0xff
   16860:	beq	16890 <__assert_fail@plt+0x528c>
   16864:	ldr	r3, [sp, #160]	; 0xa0
   16868:	cmp	r3, #0
   1686c:	beq	16890 <__assert_fail@plt+0x528c>
   16870:	lsr	r2, r4, #5
   16874:	uxtb	r2, r2
   16878:	and	r3, r4, #31
   1687c:	ldr	r1, [sp, #160]	; 0xa0
   16880:	ldr	r2, [r1, r2, lsl #2]
   16884:	lsr	r3, r2, r3
   16888:	tst	r3, #1
   1688c:	bne	1689c <__assert_fail@plt+0x5298>
   16890:	ldr	r3, [sp, #56]	; 0x38
   16894:	cmp	r3, #0
   16898:	beq	16728 <__assert_fail@plt+0x5124>
   1689c:	ldr	r3, [sp, #32]
   168a0:	cmp	r3, #0
   168a4:	bne	170b0 <__assert_fail@plt+0x5aac>
   168a8:	ldr	r3, [sp, #44]	; 0x2c
   168ac:	eor	r3, r3, #1
   168b0:	cmp	sl, #2
   168b4:	movne	r3, #0
   168b8:	andeq	r3, r3, #1
   168bc:	cmp	r3, #0
   168c0:	beq	16904 <__assert_fail@plt+0x5300>
   168c4:	cmp	r7, fp
   168c8:	ldrhi	r2, [sp, #36]	; 0x24
   168cc:	movhi	r1, #39	; 0x27
   168d0:	strbhi	r1, [r2, fp]
   168d4:	add	r2, fp, #1
   168d8:	cmp	r7, r2
   168dc:	ldrhi	r1, [sp, #36]	; 0x24
   168e0:	movhi	r0, #36	; 0x24
   168e4:	strbhi	r0, [r1, r2]
   168e8:	add	r2, fp, #2
   168ec:	cmp	r7, r2
   168f0:	ldrhi	r1, [sp, #36]	; 0x24
   168f4:	movhi	r0, #39	; 0x27
   168f8:	strbhi	r0, [r1, r2]
   168fc:	add	fp, fp, #3
   16900:	str	r3, [sp, #44]	; 0x2c
   16904:	cmp	r7, fp
   16908:	ldrhi	r3, [sp, #36]	; 0x24
   1690c:	movhi	r2, #92	; 0x5c
   16910:	strbhi	r2, [r3, fp]
   16914:	add	fp, fp, #1
   16918:	cmp	fp, r7
   1691c:	ldrcc	r3, [sp, #36]	; 0x24
   16920:	strbcc	r4, [r3, fp]
   16924:	add	fp, fp, #1
   16928:	ldr	r3, [sp, #40]	; 0x28
   1692c:	cmp	r8, #0
   16930:	moveq	r3, #0
   16934:	str	r3, [sp, #40]	; 0x28
   16938:	add	r6, r6, #1
   1693c:	ldr	r3, [sp, #28]
   16940:	cmn	r3, #1
   16944:	beq	16ed0 <__assert_fail@plt+0x58cc>
   16948:	ldr	r3, [sp, #28]
   1694c:	subs	r8, r3, r6
   16950:	movne	r8, #1
   16954:	cmp	r8, #0
   16958:	beq	16ee4 <__assert_fail@plt+0x58e0>
   1695c:	ldr	r5, [sp, #48]	; 0x30
   16960:	cmp	sl, #2
   16964:	moveq	r5, #0
   16968:	andne	r5, r5, #1
   1696c:	ldr	r3, [sp, #60]	; 0x3c
   16970:	adds	r9, r3, #0
   16974:	movne	r9, #1
   16978:	ands	r2, r5, r9
   1697c:	str	r2, [sp, #56]	; 0x38
   16980:	beq	16248 <__assert_fail@plt+0x4c44>
   16984:	add	r4, r6, r3
   16988:	ldr	r2, [sp, #28]
   1698c:	cmp	r3, #1
   16990:	movls	r3, #0
   16994:	movhi	r3, #1
   16998:	cmn	r2, #1
   1699c:	movne	r3, #0
   169a0:	cmp	r3, #0
   169a4:	beq	169b4 <__assert_fail@plt+0x53b0>
   169a8:	ldr	r0, [sp, #52]	; 0x34
   169ac:	bl	11460 <strlen@plt>
   169b0:	str	r0, [sp, #28]
   169b4:	ldr	r3, [sp, #28]
   169b8:	cmp	r3, r4
   169bc:	bcc	16240 <__assert_fail@plt+0x4c3c>
   169c0:	ldr	r2, [sp, #60]	; 0x3c
   169c4:	ldr	r1, [sp, #72]	; 0x48
   169c8:	ldr	r3, [sp, #52]	; 0x34
   169cc:	add	r0, r3, r6
   169d0:	bl	112d4 <memcmp@plt>
   169d4:	cmp	r0, #0
   169d8:	bne	16460 <__assert_fail@plt+0x4e5c>
   169dc:	ldr	r3, [sp, #32]
   169e0:	cmp	r3, #0
   169e4:	beq	16248 <__assert_fail@plt+0x4c44>
   169e8:	mov	r8, sl
   169ec:	mov	sl, r7
   169f0:	b	17040 <__assert_fail@plt+0x5a3c>
   169f4:	mov	r8, sl
   169f8:	mov	sl, r7
   169fc:	b	17040 <__assert_fail@plt+0x5a3c>
   16a00:	cmp	sl, #2
   16a04:	strne	r8, [sp, #80]	; 0x50
   16a08:	movne	r5, #0
   16a0c:	bne	16844 <__assert_fail@plt+0x5240>
   16a10:	ldr	r3, [sp, #32]
   16a14:	cmp	r3, #0
   16a18:	bne	1702c <__assert_fail@plt+0x5a28>
   16a1c:	ldr	r2, [sp, #76]	; 0x4c
   16a20:	adds	r3, r7, #0
   16a24:	movne	r3, #1
   16a28:	cmp	r2, #0
   16a2c:	movne	r3, #0
   16a30:	cmp	r3, #0
   16a34:	movne	r3, #0
   16a38:	bne	16a68 <__assert_fail@plt+0x5464>
   16a3c:	cmp	r7, fp
   16a40:	ldrhi	r3, [sp, #36]	; 0x24
   16a44:	movhi	r2, #39	; 0x27
   16a48:	strbhi	r2, [r3, fp]
   16a4c:	add	r3, fp, #1
   16a50:	cmp	r7, r3
   16a54:	ldrhi	r2, [sp, #36]	; 0x24
   16a58:	movhi	r1, #92	; 0x5c
   16a5c:	strbhi	r1, [r2, r3]
   16a60:	mov	r3, r7
   16a64:	ldr	r7, [sp, #76]	; 0x4c
   16a68:	add	r2, fp, #2
   16a6c:	cmp	r2, r3
   16a70:	ldrcc	r1, [sp, #36]	; 0x24
   16a74:	movcc	r0, #39	; 0x27
   16a78:	strbcc	r0, [r1, r2]
   16a7c:	add	fp, fp, #3
   16a80:	ldr	r2, [sp, #32]
   16a84:	mov	r5, r2
   16a88:	str	r8, [sp, #80]	; 0x50
   16a8c:	str	r2, [sp, #44]	; 0x2c
   16a90:	str	r7, [sp, #76]	; 0x4c
   16a94:	mov	r7, r3
   16a98:	b	16844 <__assert_fail@plt+0x5240>
   16a9c:	ldr	r5, [sp, #84]	; 0x54
   16aa0:	cmp	r5, #1
   16aa4:	beq	16ad4 <__assert_fail@plt+0x54d0>
   16aa8:	mov	r3, #0
   16aac:	str	r3, [sp, #104]	; 0x68
   16ab0:	str	r3, [sp, #108]	; 0x6c
   16ab4:	ldr	r3, [sp, #28]
   16ab8:	cmn	r3, #1
   16abc:	beq	16b08 <__assert_fail@plt+0x5504>
   16ac0:	mov	r3, #0
   16ac4:	str	r4, [sp, #88]	; 0x58
   16ac8:	str	fp, [sp, #92]	; 0x5c
   16acc:	mov	fp, r3
   16ad0:	b	16c30 <__assert_fail@plt+0x562c>
   16ad4:	bl	11424 <__ctype_b_loc@plt>
   16ad8:	ldr	r2, [r0]
   16adc:	lsl	r3, r4, #1
   16ae0:	ldrh	r8, [r2, r3]
   16ae4:	lsr	r8, r8, #14
   16ae8:	and	r8, r8, #1
   16aec:	mov	r2, r5
   16af0:	eor	r5, r8, #1
   16af4:	ldr	r3, [sp, #48]	; 0x30
   16af8:	and	r5, r5, r3
   16afc:	ands	r5, r5, #255	; 0xff
   16b00:	beq	16844 <__assert_fail@plt+0x5240>
   16b04:	b	16cc8 <__assert_fail@plt+0x56c4>
   16b08:	ldr	r0, [sp, #52]	; 0x34
   16b0c:	bl	11460 <strlen@plt>
   16b10:	str	r0, [sp, #28]
   16b14:	b	16ac0 <__assert_fail@plt+0x54bc>
   16b18:	mov	r2, fp
   16b1c:	mov	r1, r4
   16b20:	ldr	r4, [sp, #88]	; 0x58
   16b24:	ldr	fp, [sp, #92]	; 0x5c
   16b28:	ldr	r0, [sp, #28]
   16b2c:	cmp	r0, r5
   16b30:	bls	16cfc <__assert_fail@plt+0x56f8>
   16b34:	ldrb	r3, [r1]
   16b38:	cmp	r3, #0
   16b3c:	beq	16d04 <__assert_fail@plt+0x5700>
   16b40:	mov	r3, r1
   16b44:	add	r2, r2, #1
   16b48:	add	r1, r6, r2
   16b4c:	cmp	r0, r1
   16b50:	bls	16d0c <__assert_fail@plt+0x5708>
   16b54:	ldrb	r1, [r3, #1]!
   16b58:	cmp	r1, #0
   16b5c:	bne	16b44 <__assert_fail@plt+0x5540>
   16b60:	mov	r8, #0
   16b64:	b	16cc0 <__assert_fail@plt+0x56bc>
   16b68:	cmp	r4, r5
   16b6c:	beq	16c0c <__assert_fail@plt+0x5608>
   16b70:	ldrb	r3, [r4, #1]!
   16b74:	sub	r3, r3, #91	; 0x5b
   16b78:	cmp	r3, #33	; 0x21
   16b7c:	ldrls	pc, [pc, r3, lsl #2]
   16b80:	b	16b68 <__assert_fail@plt+0x5564>
   16b84:	andeq	r7, r1, r8, lsr r0
   16b88:	andeq	r7, r1, r8, lsr r0
   16b8c:	andeq	r6, r1, r8, ror #22
   16b90:	andeq	r7, r1, r8, lsr r0
   16b94:	andeq	r6, r1, r8, ror #22
   16b98:	andeq	r7, r1, r8, lsr r0
   16b9c:	andeq	r6, r1, r8, ror #22
   16ba0:	andeq	r6, r1, r8, ror #22
   16ba4:	andeq	r6, r1, r8, ror #22
   16ba8:	andeq	r6, r1, r8, ror #22
   16bac:	andeq	r6, r1, r8, ror #22
   16bb0:	andeq	r6, r1, r8, ror #22
   16bb4:	andeq	r6, r1, r8, ror #22
   16bb8:	andeq	r6, r1, r8, ror #22
   16bbc:	andeq	r6, r1, r8, ror #22
   16bc0:	andeq	r6, r1, r8, ror #22
   16bc4:	andeq	r6, r1, r8, ror #22
   16bc8:	andeq	r6, r1, r8, ror #22
   16bcc:	andeq	r6, r1, r8, ror #22
   16bd0:	andeq	r6, r1, r8, ror #22
   16bd4:	andeq	r6, r1, r8, ror #22
   16bd8:	andeq	r6, r1, r8, ror #22
   16bdc:	andeq	r6, r1, r8, ror #22
   16be0:	andeq	r6, r1, r8, ror #22
   16be4:	andeq	r6, r1, r8, ror #22
   16be8:	andeq	r6, r1, r8, ror #22
   16bec:	andeq	r6, r1, r8, ror #22
   16bf0:	andeq	r6, r1, r8, ror #22
   16bf4:	andeq	r6, r1, r8, ror #22
   16bf8:	andeq	r6, r1, r8, ror #22
   16bfc:	andeq	r6, r1, r8, ror #22
   16c00:	andeq	r6, r1, r8, ror #22
   16c04:	andeq	r6, r1, r8, ror #22
   16c08:	andeq	r7, r1, r8, lsr r0
   16c0c:	ldr	r0, [sp, #100]	; 0x64
   16c10:	bl	1134c <iswprint@plt>
   16c14:	cmp	r0, #0
   16c18:	moveq	r8, #0
   16c1c:	add	fp, fp, r9
   16c20:	add	r0, sp, #104	; 0x68
   16c24:	bl	112bc <mbsinit@plt>
   16c28:	cmp	r0, #0
   16c2c:	bne	16ca0 <__assert_fail@plt+0x569c>
   16c30:	add	r5, r6, fp
   16c34:	ldr	r3, [sp, #52]	; 0x34
   16c38:	add	r4, r3, r5
   16c3c:	add	r3, sp, #104	; 0x68
   16c40:	ldr	r2, [sp, #28]
   16c44:	sub	r2, r2, r5
   16c48:	mov	r1, r4
   16c4c:	add	r0, sp, #100	; 0x64
   16c50:	bl	194f0 <__assert_fail@plt+0x7eec>
   16c54:	subs	r9, r0, #0
   16c58:	beq	16d14 <__assert_fail@plt+0x5710>
   16c5c:	cmn	r9, #1
   16c60:	beq	16cb0 <__assert_fail@plt+0x56ac>
   16c64:	cmn	r9, #2
   16c68:	beq	16b18 <__assert_fail@plt+0x5514>
   16c6c:	ldr	r3, [sp, #32]
   16c70:	cmp	sl, #2
   16c74:	movne	r3, #0
   16c78:	andeq	r3, r3, #1
   16c7c:	cmp	r3, #0
   16c80:	beq	16c0c <__assert_fail@plt+0x5608>
   16c84:	cmp	r9, #1
   16c88:	bls	16c0c <__assert_fail@plt+0x5608>
   16c8c:	sub	r3, r9, #1
   16c90:	add	r5, r3, r5
   16c94:	ldr	r3, [sp, #52]	; 0x34
   16c98:	add	r5, r3, r5
   16c9c:	b	16b70 <__assert_fail@plt+0x556c>
   16ca0:	ldr	r4, [sp, #88]	; 0x58
   16ca4:	mov	r2, fp
   16ca8:	ldr	fp, [sp, #92]	; 0x5c
   16cac:	b	16cc0 <__assert_fail@plt+0x56bc>
   16cb0:	ldr	r4, [sp, #88]	; 0x58
   16cb4:	mov	r2, fp
   16cb8:	ldr	fp, [sp, #92]	; 0x5c
   16cbc:	mov	r8, #0
   16cc0:	cmp	r2, #1
   16cc4:	bls	16af0 <__assert_fail@plt+0x54ec>
   16cc8:	add	r1, r6, r2
   16ccc:	ldr	ip, [sp, #64]	; 0x40
   16cd0:	mov	r5, #0
   16cd4:	eor	r3, r8, #1
   16cd8:	ldr	r2, [sp, #48]	; 0x30
   16cdc:	and	r3, r3, r2
   16ce0:	uxtb	r3, r3
   16ce4:	ldr	r9, [sp, #32]
   16ce8:	ldr	lr, [sp, #44]	; 0x2c
   16cec:	ldr	r2, [sp, #56]	; 0x38
   16cf0:	str	r8, [sp, #56]	; 0x38
   16cf4:	ldr	r0, [sp, #36]	; 0x24
   16cf8:	b	16d94 <__assert_fail@plt+0x5790>
   16cfc:	mov	r8, #0
   16d00:	b	16cc0 <__assert_fail@plt+0x56bc>
   16d04:	mov	r8, #0
   16d08:	b	16cc0 <__assert_fail@plt+0x56bc>
   16d0c:	mov	r8, #0
   16d10:	b	16cc0 <__assert_fail@plt+0x56bc>
   16d14:	ldr	r4, [sp, #88]	; 0x58
   16d18:	mov	r2, fp
   16d1c:	ldr	fp, [sp, #92]	; 0x5c
   16d20:	b	16cc0 <__assert_fail@plt+0x56bc>
   16d24:	cmp	r2, #0
   16d28:	beq	16d3c <__assert_fail@plt+0x5738>
   16d2c:	cmp	r7, fp
   16d30:	movhi	r2, #92	; 0x5c
   16d34:	strbhi	r2, [r0, fp]
   16d38:	add	fp, fp, #1
   16d3c:	add	r8, r6, #1
   16d40:	cmp	r1, r8
   16d44:	bls	16e4c <__assert_fail@plt+0x5848>
   16d48:	eor	r2, r5, #1
   16d4c:	and	r2, r2, lr
   16d50:	ands	r2, r2, #255	; 0xff
   16d54:	beq	16e68 <__assert_fail@plt+0x5864>
   16d58:	cmp	r7, fp
   16d5c:	movhi	r2, #39	; 0x27
   16d60:	strbhi	r2, [r0, fp]
   16d64:	add	r2, fp, #1
   16d68:	cmp	r7, r2
   16d6c:	movhi	lr, #39	; 0x27
   16d70:	strbhi	lr, [r0, r2]
   16d74:	add	fp, fp, #2
   16d78:	mov	r6, r8
   16d7c:	mov	r2, r3
   16d80:	mov	lr, r3
   16d84:	cmp	r7, fp
   16d88:	strbhi	r4, [r0, fp]
   16d8c:	add	fp, fp, #1
   16d90:	ldrb	r4, [ip, #1]!
   16d94:	cmp	r3, #0
   16d98:	beq	16d24 <__assert_fail@plt+0x5720>
   16d9c:	cmp	r9, #0
   16da0:	bne	170a4 <__assert_fail@plt+0x5aa0>
   16da4:	eor	r5, lr, #1
   16da8:	cmp	sl, #2
   16dac:	movne	r5, #0
   16db0:	andeq	r5, r5, #1
   16db4:	cmp	r5, #0
   16db8:	beq	16df0 <__assert_fail@plt+0x57ec>
   16dbc:	cmp	r7, fp
   16dc0:	movhi	lr, #39	; 0x27
   16dc4:	strbhi	lr, [r0, fp]
   16dc8:	add	lr, fp, #1
   16dcc:	cmp	r7, lr
   16dd0:	movhi	r8, #36	; 0x24
   16dd4:	strbhi	r8, [r0, lr]
   16dd8:	add	lr, fp, #2
   16ddc:	cmp	r7, lr
   16de0:	movhi	r8, #39	; 0x27
   16de4:	strbhi	r8, [r0, lr]
   16de8:	add	fp, fp, #3
   16dec:	mov	lr, r5
   16df0:	cmp	r7, fp
   16df4:	movhi	r5, #92	; 0x5c
   16df8:	strbhi	r5, [r0, fp]
   16dfc:	add	r5, fp, #1
   16e00:	cmp	r7, r5
   16e04:	lsrhi	r8, r4, #6
   16e08:	addhi	r8, r8, #48	; 0x30
   16e0c:	strbhi	r8, [r0, r5]
   16e10:	add	r8, fp, #2
   16e14:	cmp	r7, r8
   16e18:	lsrhi	r5, r4, #3
   16e1c:	andhi	r5, r5, #7
   16e20:	addhi	r5, r5, #48	; 0x30
   16e24:	strbhi	r5, [r0, r8]
   16e28:	add	fp, fp, #3
   16e2c:	and	r4, r4, #7
   16e30:	add	r4, r4, #48	; 0x30
   16e34:	add	r5, r6, #1
   16e38:	cmp	r1, r5
   16e3c:	bls	16e58 <__assert_fail@plt+0x5854>
   16e40:	mov	r6, r5
   16e44:	mov	r5, r3
   16e48:	b	16d84 <__assert_fail@plt+0x5780>
   16e4c:	str	lr, [sp, #44]	; 0x2c
   16e50:	ldr	r8, [sp, #56]	; 0x38
   16e54:	b	16728 <__assert_fail@plt+0x5124>
   16e58:	str	lr, [sp, #44]	; 0x2c
   16e5c:	ldr	r8, [sp, #56]	; 0x38
   16e60:	mov	r5, r3
   16e64:	b	16728 <__assert_fail@plt+0x5124>
   16e68:	mov	r6, r8
   16e6c:	b	16d84 <__assert_fail@plt+0x5780>
   16e70:	mov	r5, #0
   16e74:	b	16844 <__assert_fail@plt+0x5240>
   16e78:	mov	r8, r5
   16e7c:	ldr	r5, [sp, #48]	; 0x30
   16e80:	mov	r4, #48	; 0x30
   16e84:	b	16844 <__assert_fail@plt+0x5240>
   16e88:	ldr	r8, [sp, #32]
   16e8c:	mov	r4, #48	; 0x30
   16e90:	b	16844 <__assert_fail@plt+0x5240>
   16e94:	ldr	r8, [sp, #32]
   16e98:	mov	r4, #48	; 0x30
   16e9c:	b	16844 <__assert_fail@plt+0x5240>
   16ea0:	mov	r8, #0
   16ea4:	mov	r5, r8
   16ea8:	b	16844 <__assert_fail@plt+0x5240>
   16eac:	mov	r8, #0
   16eb0:	mov	r5, r8
   16eb4:	b	16844 <__assert_fail@plt+0x5240>
   16eb8:	mov	r8, #0
   16ebc:	mov	r5, r8
   16ec0:	b	16844 <__assert_fail@plt+0x5240>
   16ec4:	mov	r8, #0
   16ec8:	mov	r5, r8
   16ecc:	b	16844 <__assert_fail@plt+0x5240>
   16ed0:	ldr	r3, [sp, #52]	; 0x34
   16ed4:	ldrb	r8, [r3, r6]
   16ed8:	adds	r8, r8, #0
   16edc:	movne	r8, #1
   16ee0:	b	16954 <__assert_fail@plt+0x5350>
   16ee4:	cmp	sl, #2
   16ee8:	movne	r3, #0
   16eec:	moveq	r3, #1
   16ef0:	ldr	r1, [sp, #32]
   16ef4:	mov	r2, r1
   16ef8:	and	r2, r2, r3
   16efc:	cmp	fp, #0
   16f00:	movne	r2, #0
   16f04:	andeq	r2, r2, #1
   16f08:	cmp	r2, #0
   16f0c:	bne	170bc <__assert_fail@plt+0x5ab8>
   16f10:	eor	r2, r1, #1
   16f14:	and	r3, r3, r2
   16f18:	ldr	r1, [sp, #80]	; 0x50
   16f1c:	tst	r1, r3
   16f20:	beq	16f98 <__assert_fail@plt+0x5994>
   16f24:	ldr	r3, [sp, #40]	; 0x28
   16f28:	cmp	r3, #0
   16f2c:	bne	16f54 <__assert_fail@plt+0x5950>
   16f30:	ldr	r1, [sp, #76]	; 0x4c
   16f34:	clz	r3, r7
   16f38:	lsr	r3, r3, #5
   16f3c:	cmp	r1, #0
   16f40:	moveq	r3, #0
   16f44:	cmp	r3, #0
   16f48:	beq	16f98 <__assert_fail@plt+0x5994>
   16f4c:	ldr	r7, [sp, #76]	; 0x4c
   16f50:	b	15fe8 <__assert_fail@plt+0x49e4>
   16f54:	ldr	r3, [sp, #168]	; 0xa8
   16f58:	str	r3, [sp, #16]
   16f5c:	ldr	r3, [sp, #164]	; 0xa4
   16f60:	str	r3, [sp, #12]
   16f64:	ldr	r3, [sp, #160]	; 0xa0
   16f68:	str	r3, [sp, #8]
   16f6c:	ldr	r3, [sp, #156]	; 0x9c
   16f70:	str	r3, [sp, #4]
   16f74:	mov	r3, #5
   16f78:	str	r3, [sp]
   16f7c:	ldr	r3, [sp, #28]
   16f80:	ldr	r2, [sp, #52]	; 0x34
   16f84:	ldr	r1, [sp, #76]	; 0x4c
   16f88:	ldr	r0, [sp, #36]	; 0x24
   16f8c:	bl	15f88 <__assert_fail@plt+0x4984>
   16f90:	mov	fp, r0
   16f94:	b	17098 <__assert_fail@plt+0x5a94>
   16f98:	mov	sl, r7
   16f9c:	ldr	r3, [sp, #72]	; 0x48
   16fa0:	cmp	r3, #0
   16fa4:	moveq	r2, #0
   16fa8:	andne	r2, r2, #1
   16fac:	cmp	r2, #0
   16fb0:	beq	16fe0 <__assert_fail@plt+0x59dc>
   16fb4:	mov	r2, r3
   16fb8:	ldrb	r3, [r3]
   16fbc:	cmp	r3, #0
   16fc0:	beq	16fe0 <__assert_fail@plt+0x59dc>
   16fc4:	ldr	r1, [sp, #36]	; 0x24
   16fc8:	cmp	sl, fp
   16fcc:	strbhi	r3, [r1, fp]
   16fd0:	add	fp, fp, #1
   16fd4:	ldrb	r3, [r2, #1]!
   16fd8:	cmp	r3, #0
   16fdc:	bne	16fc8 <__assert_fail@plt+0x59c4>
   16fe0:	cmp	sl, fp
   16fe4:	movhi	r3, #0
   16fe8:	ldrhi	r2, [sp, #36]	; 0x24
   16fec:	strbhi	r3, [r2, fp]
   16ff0:	b	17098 <__assert_fail@plt+0x5a94>
   16ff4:	mov	r8, sl
   16ff8:	mov	sl, r7
   16ffc:	ldr	r3, [sp, #32]
   17000:	str	r3, [sp, #48]	; 0x30
   17004:	b	17040 <__assert_fail@plt+0x5a3c>
   17008:	mov	r8, sl
   1700c:	mov	sl, r7
   17010:	b	17040 <__assert_fail@plt+0x5a3c>
   17014:	mov	r8, sl
   17018:	mov	sl, r7
   1701c:	b	17040 <__assert_fail@plt+0x5a3c>
   17020:	muleq	r1, r0, r0
   17024:	andeq	fp, r1, r0, lsr #1
   17028:	muleq	r1, r4, r0
   1702c:	mov	r8, sl
   17030:	mov	sl, r7
   17034:	b	17040 <__assert_fail@plt+0x5a3c>
   17038:	mov	r8, sl
   1703c:	mov	sl, r7
   17040:	ldr	r3, [sp, #48]	; 0x30
   17044:	cmp	r8, #2
   17048:	movne	r3, #0
   1704c:	andeq	r3, r3, #1
   17050:	cmp	r3, #0
   17054:	movne	r8, #4
   17058:	ldr	r3, [sp, #168]	; 0xa8
   1705c:	str	r3, [sp, #16]
   17060:	ldr	r3, [sp, #164]	; 0xa4
   17064:	str	r3, [sp, #12]
   17068:	mov	r3, #0
   1706c:	str	r3, [sp, #8]
   17070:	ldr	r3, [sp, #156]	; 0x9c
   17074:	bic	r3, r3, #2
   17078:	str	r3, [sp, #4]
   1707c:	str	r8, [sp]
   17080:	ldr	r3, [sp, #28]
   17084:	ldr	r2, [sp, #52]	; 0x34
   17088:	mov	r1, sl
   1708c:	ldr	r0, [sp, #36]	; 0x24
   17090:	bl	15f88 <__assert_fail@plt+0x4984>
   17094:	mov	fp, r0
   17098:	mov	r0, fp
   1709c:	add	sp, sp, #116	; 0x74
   170a0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   170a4:	mov	r8, sl
   170a8:	mov	sl, r7
   170ac:	b	17040 <__assert_fail@plt+0x5a3c>
   170b0:	mov	r8, sl
   170b4:	mov	sl, r7
   170b8:	b	17040 <__assert_fail@plt+0x5a3c>
   170bc:	mov	r8, sl
   170c0:	mov	sl, r7
   170c4:	b	17040 <__assert_fail@plt+0x5a3c>
   170c8:	mov	r8, sl
   170cc:	mov	sl, r7
   170d0:	b	17058 <__assert_fail@plt+0x5a54>
   170d4:	mov	r3, #1
   170d8:	str	r3, [sp, #32]
   170dc:	str	r3, [sp, #48]	; 0x30
   170e0:	str	r3, [sp, #60]	; 0x3c
   170e4:	ldr	r3, [pc, #-196]	; 17028 <__assert_fail@plt+0x5a24>
   170e8:	str	r3, [sp, #72]	; 0x48
   170ec:	mov	fp, #0
   170f0:	mov	sl, #5
   170f4:	b	16044 <__assert_fail@plt+0x4a40>
   170f8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   170fc:	sub	sp, sp, #52	; 0x34
   17100:	mov	r5, r0
   17104:	str	r1, [sp, #24]
   17108:	str	r2, [sp, #28]
   1710c:	mov	r4, r3
   17110:	bl	11484 <__errno_location@plt>
   17114:	str	r0, [sp, #32]
   17118:	ldr	r3, [r0]
   1711c:	str	r3, [sp, #36]	; 0x24
   17120:	ldr	r3, [pc, #396]	; 172b4 <__assert_fail@plt+0x5cb0>
   17124:	ldr	r6, [r3]
   17128:	cmn	r5, #-2147483647	; 0x80000001
   1712c:	movne	r3, #0
   17130:	moveq	r3, #1
   17134:	orrs	r3, r3, r5, lsr #31
   17138:	bne	17278 <__assert_fail@plt+0x5c74>
   1713c:	ldr	r3, [pc, #368]	; 172b4 <__assert_fail@plt+0x5cb0>
   17140:	ldr	r2, [r3, #4]
   17144:	cmp	r5, r2
   17148:	blt	171b0 <__assert_fail@plt+0x5bac>
   1714c:	str	r2, [sp, #44]	; 0x2c
   17150:	add	r3, r3, #8
   17154:	cmp	r6, r3
   17158:	beq	1727c <__assert_fail@plt+0x5c78>
   1715c:	sub	r2, r5, r2
   17160:	mov	r3, #8
   17164:	str	r3, [sp]
   17168:	mvn	r3, #-2147483648	; 0x80000000
   1716c:	add	r2, r2, #1
   17170:	add	r1, sp, #44	; 0x2c
   17174:	mov	r0, r6
   17178:	bl	18814 <__assert_fail@plt+0x7210>
   1717c:	mov	r6, r0
   17180:	ldr	r3, [pc, #300]	; 172b4 <__assert_fail@plt+0x5cb0>
   17184:	str	r0, [r3]
   17188:	ldr	r7, [pc, #292]	; 172b4 <__assert_fail@plt+0x5cb0>
   1718c:	ldr	r0, [r7, #4]
   17190:	ldr	r2, [sp, #44]	; 0x2c
   17194:	sub	r2, r2, r0
   17198:	lsl	r2, r2, #3
   1719c:	mov	r1, #0
   171a0:	add	r0, r6, r0, lsl #3
   171a4:	bl	114a8 <memset@plt>
   171a8:	ldr	r3, [sp, #44]	; 0x2c
   171ac:	str	r3, [r7, #4]
   171b0:	add	fp, r6, r5, lsl #3
   171b4:	ldr	r8, [r6, r5, lsl #3]
   171b8:	ldr	r7, [fp, #4]
   171bc:	ldr	r9, [r4, #4]
   171c0:	orr	r9, r9, #1
   171c4:	add	sl, r4, #8
   171c8:	ldr	r3, [r4, #44]	; 0x2c
   171cc:	str	r3, [sp, #16]
   171d0:	ldr	r3, [r4, #40]	; 0x28
   171d4:	str	r3, [sp, #12]
   171d8:	str	sl, [sp, #8]
   171dc:	str	r9, [sp, #4]
   171e0:	ldr	r3, [r4]
   171e4:	str	r3, [sp]
   171e8:	ldr	r3, [sp, #28]
   171ec:	ldr	r2, [sp, #24]
   171f0:	mov	r1, r8
   171f4:	mov	r0, r7
   171f8:	bl	15f88 <__assert_fail@plt+0x4984>
   171fc:	cmp	r8, r0
   17200:	bhi	17260 <__assert_fail@plt+0x5c5c>
   17204:	add	r8, r0, #1
   17208:	str	r8, [r6, r5, lsl #3]
   1720c:	ldr	r3, [pc, #164]	; 172b8 <__assert_fail@plt+0x5cb4>
   17210:	cmp	r7, r3
   17214:	beq	17220 <__assert_fail@plt+0x5c1c>
   17218:	mov	r0, r7
   1721c:	bl	193bc <__assert_fail@plt+0x7db8>
   17220:	mov	r0, r8
   17224:	bl	18690 <__assert_fail@plt+0x708c>
   17228:	mov	r7, r0
   1722c:	str	r0, [fp, #4]
   17230:	ldr	r3, [r4, #44]	; 0x2c
   17234:	str	r3, [sp, #16]
   17238:	ldr	r3, [r4, #40]	; 0x28
   1723c:	str	r3, [sp, #12]
   17240:	str	sl, [sp, #8]
   17244:	str	r9, [sp, #4]
   17248:	ldr	r3, [r4]
   1724c:	str	r3, [sp]
   17250:	ldr	r3, [sp, #28]
   17254:	ldr	r2, [sp, #24]
   17258:	mov	r1, r8
   1725c:	bl	15f88 <__assert_fail@plt+0x4984>
   17260:	ldr	r3, [sp, #32]
   17264:	ldr	r2, [sp, #36]	; 0x24
   17268:	str	r2, [r3]
   1726c:	mov	r0, r7
   17270:	add	sp, sp, #52	; 0x34
   17274:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17278:	bl	115c8 <abort@plt>
   1727c:	sub	r2, r5, r2
   17280:	mov	r3, #8
   17284:	str	r3, [sp]
   17288:	mvn	r3, #-2147483648	; 0x80000000
   1728c:	add	r2, r2, #1
   17290:	add	r1, sp, #44	; 0x2c
   17294:	mov	r0, #0
   17298:	bl	18814 <__assert_fail@plt+0x7210>
   1729c:	mov	r6, r0
   172a0:	ldr	r3, [pc, #12]	; 172b4 <__assert_fail@plt+0x5cb0>
   172a4:	str	r0, [r3], #8
   172a8:	ldm	r3, {r0, r1}
   172ac:	stm	r6, {r0, r1}
   172b0:	b	17188 <__assert_fail@plt+0x5b84>
   172b4:	andeq	ip, r2, ip, ror #2
   172b8:	andeq	ip, r2, r0, lsl r2
   172bc:	push	{r4, r5, r6, lr}
   172c0:	mov	r4, r0
   172c4:	bl	11484 <__errno_location@plt>
   172c8:	mov	r5, r0
   172cc:	ldr	r6, [r0]
   172d0:	cmp	r4, #0
   172d4:	ldr	r3, [pc, #20]	; 172f0 <__assert_fail@plt+0x5cec>
   172d8:	moveq	r4, r3
   172dc:	mov	r1, #48	; 0x30
   172e0:	mov	r0, r4
   172e4:	bl	18b7c <__assert_fail@plt+0x7578>
   172e8:	str	r6, [r5]
   172ec:	pop	{r4, r5, r6, pc}
   172f0:	andeq	ip, r2, r0, lsl r3
   172f4:	subs	r3, r0, #0
   172f8:	ldr	r2, [pc, #8]	; 17308 <__assert_fail@plt+0x5d04>
   172fc:	moveq	r3, r2
   17300:	ldr	r0, [r3]
   17304:	bx	lr
   17308:	andeq	ip, r2, r0, lsl r3
   1730c:	subs	r3, r0, #0
   17310:	ldr	r2, [pc, #8]	; 17320 <__assert_fail@plt+0x5d1c>
   17314:	moveq	r3, r2
   17318:	str	r1, [r3]
   1731c:	bx	lr
   17320:	andeq	ip, r2, r0, lsl r3
   17324:	push	{lr}		; (str lr, [sp, #-4]!)
   17328:	subs	r3, r0, #0
   1732c:	ldr	r0, [pc, #44]	; 17360 <__assert_fail@plt+0x5d5c>
   17330:	moveq	r3, r0
   17334:	add	r3, r3, #8
   17338:	lsr	lr, r1, #5
   1733c:	and	r1, r1, #31
   17340:	ldr	ip, [r3, lr, lsl #2]
   17344:	lsr	r0, ip, r1
   17348:	eor	r2, r2, r0
   1734c:	and	r2, r2, #1
   17350:	eor	r1, ip, r2, lsl r1
   17354:	str	r1, [r3, lr, lsl #2]
   17358:	and	r0, r0, #1
   1735c:	pop	{pc}		; (ldr pc, [sp], #4)
   17360:	andeq	ip, r2, r0, lsl r3
   17364:	subs	r3, r0, #0
   17368:	ldr	r2, [pc, #12]	; 1737c <__assert_fail@plt+0x5d78>
   1736c:	moveq	r3, r2
   17370:	ldr	r0, [r3, #4]
   17374:	str	r1, [r3, #4]
   17378:	bx	lr
   1737c:	andeq	ip, r2, r0, lsl r3
   17380:	subs	r3, r0, #0
   17384:	ldr	r0, [pc, #40]	; 173b4 <__assert_fail@plt+0x5db0>
   17388:	moveq	r3, r0
   1738c:	mov	r0, #10
   17390:	str	r0, [r3]
   17394:	cmp	r2, #0
   17398:	cmpne	r1, #0
   1739c:	beq	173ac <__assert_fail@plt+0x5da8>
   173a0:	str	r1, [r3, #40]	; 0x28
   173a4:	str	r2, [r3, #44]	; 0x2c
   173a8:	bx	lr
   173ac:	push	{r4, lr}
   173b0:	bl	115c8 <abort@plt>
   173b4:	andeq	ip, r2, r0, lsl r3
   173b8:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   173bc:	sub	sp, sp, #24
   173c0:	mov	r7, r0
   173c4:	mov	r8, r1
   173c8:	mov	r9, r2
   173cc:	mov	sl, r3
   173d0:	ldr	r4, [sp, #56]	; 0x38
   173d4:	cmp	r4, #0
   173d8:	ldr	r3, [pc, #84]	; 17434 <__assert_fail@plt+0x5e30>
   173dc:	moveq	r4, r3
   173e0:	bl	11484 <__errno_location@plt>
   173e4:	mov	r5, r0
   173e8:	ldr	r6, [r0]
   173ec:	ldr	r3, [r4, #44]	; 0x2c
   173f0:	str	r3, [sp, #16]
   173f4:	ldr	r3, [r4, #40]	; 0x28
   173f8:	str	r3, [sp, #12]
   173fc:	add	r3, r4, #8
   17400:	str	r3, [sp, #8]
   17404:	ldr	r3, [r4, #4]
   17408:	str	r3, [sp, #4]
   1740c:	ldr	r3, [r4]
   17410:	str	r3, [sp]
   17414:	mov	r3, sl
   17418:	mov	r2, r9
   1741c:	mov	r1, r8
   17420:	mov	r0, r7
   17424:	bl	15f88 <__assert_fail@plt+0x4984>
   17428:	str	r6, [r5]
   1742c:	add	sp, sp, #24
   17430:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   17434:	andeq	ip, r2, r0, lsl r3
   17438:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1743c:	sub	sp, sp, #44	; 0x2c
   17440:	str	r0, [sp, #28]
   17444:	str	r1, [sp, #32]
   17448:	mov	r6, r2
   1744c:	subs	r4, r3, #0
   17450:	ldr	r3, [pc, #172]	; 17504 <__assert_fail@plt+0x5f00>
   17454:	moveq	r4, r3
   17458:	bl	11484 <__errno_location@plt>
   1745c:	mov	r7, r0
   17460:	ldr	fp, [r0]
   17464:	ldr	r5, [r4, #4]
   17468:	cmp	r6, #0
   1746c:	orreq	r5, r5, #1
   17470:	add	r9, r4, #8
   17474:	ldr	r3, [r4, #44]	; 0x2c
   17478:	str	r3, [sp, #16]
   1747c:	ldr	r3, [r4, #40]	; 0x28
   17480:	str	r3, [sp, #12]
   17484:	str	r9, [sp, #8]
   17488:	str	r5, [sp, #4]
   1748c:	ldr	r3, [r4]
   17490:	str	r3, [sp]
   17494:	ldr	r3, [sp, #32]
   17498:	ldr	r2, [sp, #28]
   1749c:	mov	r1, #0
   174a0:	mov	r0, r1
   174a4:	bl	15f88 <__assert_fail@plt+0x4984>
   174a8:	mov	sl, r0
   174ac:	add	r8, r0, #1
   174b0:	mov	r0, r8
   174b4:	bl	18690 <__assert_fail@plt+0x708c>
   174b8:	str	r0, [sp, #36]	; 0x24
   174bc:	ldr	r3, [r4, #44]	; 0x2c
   174c0:	str	r3, [sp, #16]
   174c4:	ldr	r3, [r4, #40]	; 0x28
   174c8:	str	r3, [sp, #12]
   174cc:	str	r9, [sp, #8]
   174d0:	str	r5, [sp, #4]
   174d4:	ldr	r3, [r4]
   174d8:	str	r3, [sp]
   174dc:	ldr	r3, [sp, #32]
   174e0:	ldr	r2, [sp, #28]
   174e4:	mov	r1, r8
   174e8:	bl	15f88 <__assert_fail@plt+0x4984>
   174ec:	str	fp, [r7]
   174f0:	cmp	r6, #0
   174f4:	strne	sl, [r6]
   174f8:	ldr	r0, [sp, #36]	; 0x24
   174fc:	add	sp, sp, #44	; 0x2c
   17500:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17504:	andeq	ip, r2, r0, lsl r3
   17508:	push	{r4, lr}
   1750c:	mov	r3, r2
   17510:	mov	r2, #0
   17514:	bl	17438 <__assert_fail@plt+0x5e34>
   17518:	pop	{r4, pc}
   1751c:	push	{r4, r5, r6, r7, r8, lr}
   17520:	ldr	r3, [pc, #140]	; 175b4 <__assert_fail@plt+0x5fb0>
   17524:	ldr	r7, [r3]
   17528:	ldr	r3, [r3, #4]
   1752c:	cmp	r3, #1
   17530:	ble	1755c <__assert_fail@plt+0x5f58>
   17534:	mov	r5, r7
   17538:	mov	r4, #1
   1753c:	ldr	r6, [pc, #112]	; 175b4 <__assert_fail@plt+0x5fb0>
   17540:	ldr	r0, [r5, #12]
   17544:	bl	193bc <__assert_fail@plt+0x7db8>
   17548:	add	r4, r4, #1
   1754c:	add	r5, r5, #8
   17550:	ldr	r3, [r6, #4]
   17554:	cmp	r3, r4
   17558:	bgt	17540 <__assert_fail@plt+0x5f3c>
   1755c:	ldr	r0, [r7, #4]
   17560:	ldr	r3, [pc, #80]	; 175b8 <__assert_fail@plt+0x5fb4>
   17564:	cmp	r0, r3
   17568:	beq	17584 <__assert_fail@plt+0x5f80>
   1756c:	bl	193bc <__assert_fail@plt+0x7db8>
   17570:	ldr	r3, [pc, #60]	; 175b4 <__assert_fail@plt+0x5fb0>
   17574:	mov	r2, #256	; 0x100
   17578:	str	r2, [r3, #8]
   1757c:	ldr	r2, [pc, #52]	; 175b8 <__assert_fail@plt+0x5fb4>
   17580:	str	r2, [r3, #12]
   17584:	ldr	r3, [pc, #48]	; 175bc <__assert_fail@plt+0x5fb8>
   17588:	cmp	r7, r3
   1758c:	beq	175a4 <__assert_fail@plt+0x5fa0>
   17590:	mov	r0, r7
   17594:	bl	193bc <__assert_fail@plt+0x7db8>
   17598:	ldr	r3, [pc, #20]	; 175b4 <__assert_fail@plt+0x5fb0>
   1759c:	add	r2, r3, #8
   175a0:	str	r2, [r3]
   175a4:	mov	r2, #1
   175a8:	ldr	r3, [pc, #4]	; 175b4 <__assert_fail@plt+0x5fb0>
   175ac:	str	r2, [r3, #4]
   175b0:	pop	{r4, r5, r6, r7, r8, pc}
   175b4:	andeq	ip, r2, ip, ror #2
   175b8:	andeq	ip, r2, r0, lsl r2
   175bc:	andeq	ip, r2, r4, ror r1
   175c0:	push	{r4, lr}
   175c4:	ldr	r3, [pc, #8]	; 175d4 <__assert_fail@plt+0x5fd0>
   175c8:	mvn	r2, #0
   175cc:	bl	170f8 <__assert_fail@plt+0x5af4>
   175d0:	pop	{r4, pc}
   175d4:	andeq	ip, r2, r0, lsl r3
   175d8:	push	{r4, lr}
   175dc:	ldr	r3, [pc, #4]	; 175e8 <__assert_fail@plt+0x5fe4>
   175e0:	bl	170f8 <__assert_fail@plt+0x5af4>
   175e4:	pop	{r4, pc}
   175e8:	andeq	ip, r2, r0, lsl r3
   175ec:	push	{r4, lr}
   175f0:	mov	r1, r0
   175f4:	mov	r0, #0
   175f8:	bl	175c0 <__assert_fail@plt+0x5fbc>
   175fc:	pop	{r4, pc}
   17600:	push	{r4, lr}
   17604:	mov	r2, r1
   17608:	mov	r1, r0
   1760c:	mov	r0, #0
   17610:	bl	175d8 <__assert_fail@plt+0x5fd4>
   17614:	pop	{r4, pc}
   17618:	push	{r4, r5, lr}
   1761c:	sub	sp, sp, #52	; 0x34
   17620:	mov	r4, r0
   17624:	mov	r5, r2
   17628:	mov	r0, sp
   1762c:	bl	15e20 <__assert_fail@plt+0x481c>
   17630:	mov	r3, sp
   17634:	mvn	r2, #0
   17638:	mov	r1, r5
   1763c:	mov	r0, r4
   17640:	bl	170f8 <__assert_fail@plt+0x5af4>
   17644:	add	sp, sp, #52	; 0x34
   17648:	pop	{r4, r5, pc}
   1764c:	push	{r4, r5, r6, lr}
   17650:	sub	sp, sp, #48	; 0x30
   17654:	mov	r4, r0
   17658:	mov	r5, r2
   1765c:	mov	r6, r3
   17660:	mov	r0, sp
   17664:	bl	15e20 <__assert_fail@plt+0x481c>
   17668:	mov	r3, sp
   1766c:	mov	r2, r6
   17670:	mov	r1, r5
   17674:	mov	r0, r4
   17678:	bl	170f8 <__assert_fail@plt+0x5af4>
   1767c:	add	sp, sp, #48	; 0x30
   17680:	pop	{r4, r5, r6, pc}
   17684:	push	{r4, lr}
   17688:	mov	r2, r1
   1768c:	mov	r1, r0
   17690:	mov	r0, #0
   17694:	bl	17618 <__assert_fail@plt+0x6014>
   17698:	pop	{r4, pc}
   1769c:	push	{r4, lr}
   176a0:	mov	r3, r2
   176a4:	mov	r2, r1
   176a8:	mov	r1, r0
   176ac:	mov	r0, #0
   176b0:	bl	1764c <__assert_fail@plt+0x6048>
   176b4:	pop	{r4, pc}
   176b8:	push	{r4, r5, r6, lr}
   176bc:	sub	sp, sp, #48	; 0x30
   176c0:	mov	r4, r0
   176c4:	mov	r5, r1
   176c8:	mov	r6, r2
   176cc:	mov	ip, sp
   176d0:	ldr	lr, [pc, #64]	; 17718 <__assert_fail@plt+0x6114>
   176d4:	ldm	lr!, {r0, r1, r2, r3}
   176d8:	stmia	ip!, {r0, r1, r2, r3}
   176dc:	ldm	lr!, {r0, r1, r2, r3}
   176e0:	stmia	ip!, {r0, r1, r2, r3}
   176e4:	ldm	lr, {r0, r1, r2, r3}
   176e8:	stm	ip, {r0, r1, r2, r3}
   176ec:	mov	r2, #1
   176f0:	mov	r1, r6
   176f4:	mov	r0, sp
   176f8:	bl	17324 <__assert_fail@plt+0x5d20>
   176fc:	mov	r3, sp
   17700:	mov	r2, r5
   17704:	mov	r1, r4
   17708:	mov	r0, #0
   1770c:	bl	170f8 <__assert_fail@plt+0x5af4>
   17710:	add	sp, sp, #48	; 0x30
   17714:	pop	{r4, r5, r6, pc}
   17718:	andeq	ip, r2, r0, lsl r3
   1771c:	push	{r4, lr}
   17720:	mov	r2, r1
   17724:	mvn	r1, #0
   17728:	bl	176b8 <__assert_fail@plt+0x60b4>
   1772c:	pop	{r4, pc}
   17730:	push	{r4, lr}
   17734:	mov	r1, #58	; 0x3a
   17738:	bl	1771c <__assert_fail@plt+0x6118>
   1773c:	pop	{r4, pc}
   17740:	push	{r4, lr}
   17744:	mov	r2, #58	; 0x3a
   17748:	bl	176b8 <__assert_fail@plt+0x60b4>
   1774c:	pop	{r4, pc}
   17750:	push	{r4, r5, lr}
   17754:	sub	sp, sp, #100	; 0x64
   17758:	mov	r4, r0
   1775c:	mov	r5, r2
   17760:	mov	r0, sp
   17764:	bl	15e20 <__assert_fail@plt+0x481c>
   17768:	add	lr, sp, #48	; 0x30
   1776c:	mov	ip, sp
   17770:	ldm	ip!, {r0, r1, r2, r3}
   17774:	stmia	lr!, {r0, r1, r2, r3}
   17778:	ldm	ip!, {r0, r1, r2, r3}
   1777c:	stmia	lr!, {r0, r1, r2, r3}
   17780:	ldm	ip, {r0, r1, r2, r3}
   17784:	stm	lr, {r0, r1, r2, r3}
   17788:	mov	r2, #1
   1778c:	mov	r1, #58	; 0x3a
   17790:	add	r0, sp, #48	; 0x30
   17794:	bl	17324 <__assert_fail@plt+0x5d20>
   17798:	add	r3, sp, #48	; 0x30
   1779c:	mvn	r2, #0
   177a0:	mov	r1, r5
   177a4:	mov	r0, r4
   177a8:	bl	170f8 <__assert_fail@plt+0x5af4>
   177ac:	add	sp, sp, #100	; 0x64
   177b0:	pop	{r4, r5, pc}
   177b4:	push	{r4, r5, r6, r7, lr}
   177b8:	sub	sp, sp, #52	; 0x34
   177bc:	mov	r4, r0
   177c0:	mov	r6, r1
   177c4:	mov	r7, r2
   177c8:	mov	r5, r3
   177cc:	mov	ip, sp
   177d0:	ldr	lr, [pc, #64]	; 17818 <__assert_fail@plt+0x6214>
   177d4:	ldm	lr!, {r0, r1, r2, r3}
   177d8:	stmia	ip!, {r0, r1, r2, r3}
   177dc:	ldm	lr!, {r0, r1, r2, r3}
   177e0:	stmia	ip!, {r0, r1, r2, r3}
   177e4:	ldm	lr, {r0, r1, r2, r3}
   177e8:	stm	ip, {r0, r1, r2, r3}
   177ec:	mov	r2, r7
   177f0:	mov	r1, r6
   177f4:	mov	r0, sp
   177f8:	bl	17380 <__assert_fail@plt+0x5d7c>
   177fc:	mov	r3, sp
   17800:	ldr	r2, [sp, #72]	; 0x48
   17804:	mov	r1, r5
   17808:	mov	r0, r4
   1780c:	bl	170f8 <__assert_fail@plt+0x5af4>
   17810:	add	sp, sp, #52	; 0x34
   17814:	pop	{r4, r5, r6, r7, pc}
   17818:	andeq	ip, r2, r0, lsl r3
   1781c:	push	{lr}		; (str lr, [sp, #-4]!)
   17820:	sub	sp, sp, #12
   17824:	mvn	ip, #0
   17828:	str	ip, [sp]
   1782c:	bl	177b4 <__assert_fail@plt+0x61b0>
   17830:	add	sp, sp, #12
   17834:	pop	{pc}		; (ldr pc, [sp], #4)
   17838:	push	{r4, lr}
   1783c:	mov	r3, r2
   17840:	mov	r2, r1
   17844:	mov	r1, r0
   17848:	mov	r0, #0
   1784c:	bl	1781c <__assert_fail@plt+0x6218>
   17850:	pop	{r4, pc}
   17854:	push	{lr}		; (str lr, [sp, #-4]!)
   17858:	sub	sp, sp, #12
   1785c:	str	r3, [sp]
   17860:	mov	r3, r2
   17864:	mov	r2, r1
   17868:	mov	r1, r0
   1786c:	mov	r0, #0
   17870:	bl	177b4 <__assert_fail@plt+0x61b0>
   17874:	add	sp, sp, #12
   17878:	pop	{pc}		; (ldr pc, [sp], #4)
   1787c:	push	{r4, lr}
   17880:	ldr	r3, [pc, #4]	; 1788c <__assert_fail@plt+0x6288>
   17884:	bl	170f8 <__assert_fail@plt+0x5af4>
   17888:	pop	{r4, pc}
   1788c:	andeq	ip, r2, ip, ror r1
   17890:	push	{r4, lr}
   17894:	mov	r2, r1
   17898:	mov	r1, r0
   1789c:	mov	r0, #0
   178a0:	bl	1787c <__assert_fail@plt+0x6278>
   178a4:	pop	{r4, pc}
   178a8:	push	{r4, lr}
   178ac:	mvn	r2, #0
   178b0:	bl	1787c <__assert_fail@plt+0x6278>
   178b4:	pop	{r4, pc}
   178b8:	push	{r4, lr}
   178bc:	mov	r1, r0
   178c0:	mov	r0, #0
   178c4:	bl	178a8 <__assert_fail@plt+0x62a4>
   178c8:	pop	{r4, pc}
   178cc:	push	{r4, lr}
   178d0:	sub	sp, sp, #104	; 0x68
   178d4:	mov	r4, r0
   178d8:	mov	r2, sp
   178dc:	ldr	r1, [pc, #48]	; 17914 <__assert_fail@plt+0x6310>
   178e0:	mov	r0, #3
   178e4:	bl	115e0 <__lxstat64@plt>
   178e8:	cmp	r0, #0
   178ec:	bne	1790c <__assert_fail@plt+0x6308>
   178f0:	ldrd	r2, [sp, #96]	; 0x60
   178f4:	strd	r2, [r4]
   178f8:	ldrd	r2, [sp]
   178fc:	strd	r2, [r4, #8]
   17900:	mov	r0, r4
   17904:	add	sp, sp, #104	; 0x68
   17908:	pop	{r4, pc}
   1790c:	mov	r0, #0
   17910:	b	17904 <__assert_fail@plt+0x6300>
   17914:	andeq	fp, r1, r4, lsr #9
   17918:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1791c:	sub	sp, sp, #4032	; 0xfc0
   17920:	mov	r5, r1
   17924:	mov	r7, r2
   17928:	cmn	r0, #100	; 0x64
   1792c:	beq	17a00 <__assert_fail@plt+0x63fc>
   17930:	mov	r4, r0
   17934:	ldrb	r3, [r1]
   17938:	cmp	r3, #47	; 0x2f
   1793c:	beq	17a00 <__assert_fail@plt+0x63fc>
   17940:	mov	r2, r1
   17944:	mov	r1, r0
   17948:	mov	r0, sp
   1794c:	bl	18d9c <__assert_fail@plt+0x7798>
   17950:	subs	r8, r0, #0
   17954:	beq	179ac <__assert_fail@plt+0x63a8>
   17958:	mov	r1, r7
   1795c:	mov	r0, r8
   17960:	bl	1805c <__assert_fail@plt+0x6a58>
   17964:	mov	r6, r0
   17968:	bl	11484 <__errno_location@plt>
   1796c:	mov	r9, r0
   17970:	ldr	sl, [r0]
   17974:	mov	r3, sp
   17978:	cmp	r8, r3
   1797c:	beq	17988 <__assert_fail@plt+0x6384>
   17980:	mov	r0, r8
   17984:	bl	193bc <__assert_fail@plt+0x7db8>
   17988:	cmn	r6, #1
   1798c:	bne	17a10 <__assert_fail@plt+0x640c>
   17990:	sub	r3, sl, #1
   17994:	cmp	r3, #19
   17998:	bhi	17a1c <__assert_fail@plt+0x6418>
   1799c:	ldr	r2, [pc, #292]	; 17ac8 <__assert_fail@plt+0x64c4>
   179a0:	lsr	r3, r2, r3
   179a4:	tst	r3, #1
   179a8:	beq	17a1c <__assert_fail@plt+0x6418>
   179ac:	mov	r0, sp
   179b0:	bl	1960c <__assert_fail@plt+0x8008>
   179b4:	cmp	r0, #0
   179b8:	bne	17a30 <__assert_fail@plt+0x642c>
   179bc:	cmp	r4, #0
   179c0:	blt	179d0 <__assert_fail@plt+0x63cc>
   179c4:	ldr	r3, [sp]
   179c8:	cmp	r4, r3
   179cc:	beq	17a3c <__assert_fail@plt+0x6438>
   179d0:	mov	r0, r4
   179d4:	bl	11568 <fchdir@plt>
   179d8:	cmp	r0, #0
   179dc:	beq	17a58 <__assert_fail@plt+0x6454>
   179e0:	bl	11484 <__errno_location@plt>
   179e4:	mov	r4, r0
   179e8:	ldr	r5, [r0]
   179ec:	mov	r0, sp
   179f0:	bl	19688 <__assert_fail@plt+0x8084>
   179f4:	str	r5, [r4]
   179f8:	mvn	r6, #0
   179fc:	b	17a10 <__assert_fail@plt+0x640c>
   17a00:	mov	r1, r7
   17a04:	mov	r0, r5
   17a08:	bl	1805c <__assert_fail@plt+0x6a58>
   17a0c:	mov	r6, r0
   17a10:	mov	r0, r6
   17a14:	add	sp, sp, #4032	; 0xfc0
   17a18:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   17a1c:	cmp	sl, #38	; 0x26
   17a20:	cmpne	sl, #95	; 0x5f
   17a24:	strne	sl, [r9]
   17a28:	bne	17a10 <__assert_fail@plt+0x640c>
   17a2c:	b	179ac <__assert_fail@plt+0x63a8>
   17a30:	bl	11484 <__errno_location@plt>
   17a34:	ldr	r0, [r0]
   17a38:	bl	19548 <__assert_fail@plt+0x7f44>
   17a3c:	mov	r0, sp
   17a40:	bl	19688 <__assert_fail@plt+0x8084>
   17a44:	bl	11484 <__errno_location@plt>
   17a48:	mov	r3, #9
   17a4c:	str	r3, [r0]
   17a50:	mvn	r6, #0
   17a54:	b	17a10 <__assert_fail@plt+0x640c>
   17a58:	mov	r1, r7
   17a5c:	mov	r0, r5
   17a60:	bl	1805c <__assert_fail@plt+0x6a58>
   17a64:	mov	r6, r0
   17a68:	cmn	r0, #1
   17a6c:	beq	17a8c <__assert_fail@plt+0x6488>
   17a70:	mov	r0, sp
   17a74:	bl	19660 <__assert_fail@plt+0x805c>
   17a78:	cmp	r0, #0
   17a7c:	bne	17abc <__assert_fail@plt+0x64b8>
   17a80:	mov	r0, sp
   17a84:	bl	19688 <__assert_fail@plt+0x8084>
   17a88:	b	17a10 <__assert_fail@plt+0x640c>
   17a8c:	bl	11484 <__errno_location@plt>
   17a90:	mov	r5, r0
   17a94:	ldr	r4, [r0]
   17a98:	mov	r0, sp
   17a9c:	bl	19660 <__assert_fail@plt+0x805c>
   17aa0:	cmp	r0, #0
   17aa4:	bne	17abc <__assert_fail@plt+0x64b8>
   17aa8:	mov	r0, sp
   17aac:	bl	19688 <__assert_fail@plt+0x8084>
   17ab0:	cmp	r4, #0
   17ab4:	strne	r4, [r5]
   17ab8:	b	17a10 <__assert_fail@plt+0x640c>
   17abc:	bl	11484 <__errno_location@plt>
   17ac0:	ldr	r0, [r0]
   17ac4:	bl	19584 <__assert_fail@plt+0x7f80>
   17ac8:	andeq	r1, r8, r3
   17acc:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   17ad0:	sub	sp, sp, #4032	; 0xfc0
   17ad4:	mov	r5, r1
   17ad8:	mov	r7, r2
   17adc:	cmn	r0, #100	; 0x64
   17ae0:	beq	17bb4 <__assert_fail@plt+0x65b0>
   17ae4:	mov	r4, r0
   17ae8:	ldrb	r3, [r1]
   17aec:	cmp	r3, #47	; 0x2f
   17af0:	beq	17bb4 <__assert_fail@plt+0x65b0>
   17af4:	mov	r2, r1
   17af8:	mov	r1, r0
   17afc:	mov	r0, sp
   17b00:	bl	18d9c <__assert_fail@plt+0x7798>
   17b04:	subs	r8, r0, #0
   17b08:	beq	17b60 <__assert_fail@plt+0x655c>
   17b0c:	mov	r1, r7
   17b10:	mov	r0, r8
   17b14:	bl	18074 <__assert_fail@plt+0x6a70>
   17b18:	mov	r6, r0
   17b1c:	bl	11484 <__errno_location@plt>
   17b20:	mov	r9, r0
   17b24:	ldr	sl, [r0]
   17b28:	mov	r3, sp
   17b2c:	cmp	r8, r3
   17b30:	beq	17b3c <__assert_fail@plt+0x6538>
   17b34:	mov	r0, r8
   17b38:	bl	193bc <__assert_fail@plt+0x7db8>
   17b3c:	cmn	r6, #1
   17b40:	bne	17bc4 <__assert_fail@plt+0x65c0>
   17b44:	sub	r3, sl, #1
   17b48:	cmp	r3, #19
   17b4c:	bhi	17bd0 <__assert_fail@plt+0x65cc>
   17b50:	ldr	r2, [pc, #292]	; 17c7c <__assert_fail@plt+0x6678>
   17b54:	lsr	r3, r2, r3
   17b58:	tst	r3, #1
   17b5c:	beq	17bd0 <__assert_fail@plt+0x65cc>
   17b60:	mov	r0, sp
   17b64:	bl	1960c <__assert_fail@plt+0x8008>
   17b68:	cmp	r0, #0
   17b6c:	bne	17be4 <__assert_fail@plt+0x65e0>
   17b70:	cmp	r4, #0
   17b74:	blt	17b84 <__assert_fail@plt+0x6580>
   17b78:	ldr	r3, [sp]
   17b7c:	cmp	r4, r3
   17b80:	beq	17bf0 <__assert_fail@plt+0x65ec>
   17b84:	mov	r0, r4
   17b88:	bl	11568 <fchdir@plt>
   17b8c:	cmp	r0, #0
   17b90:	beq	17c0c <__assert_fail@plt+0x6608>
   17b94:	bl	11484 <__errno_location@plt>
   17b98:	mov	r4, r0
   17b9c:	ldr	r5, [r0]
   17ba0:	mov	r0, sp
   17ba4:	bl	19688 <__assert_fail@plt+0x8084>
   17ba8:	str	r5, [r4]
   17bac:	mvn	r6, #0
   17bb0:	b	17bc4 <__assert_fail@plt+0x65c0>
   17bb4:	mov	r1, r7
   17bb8:	mov	r0, r5
   17bbc:	bl	18074 <__assert_fail@plt+0x6a70>
   17bc0:	mov	r6, r0
   17bc4:	mov	r0, r6
   17bc8:	add	sp, sp, #4032	; 0xfc0
   17bcc:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   17bd0:	cmp	sl, #38	; 0x26
   17bd4:	cmpne	sl, #95	; 0x5f
   17bd8:	strne	sl, [r9]
   17bdc:	bne	17bc4 <__assert_fail@plt+0x65c0>
   17be0:	b	17b60 <__assert_fail@plt+0x655c>
   17be4:	bl	11484 <__errno_location@plt>
   17be8:	ldr	r0, [r0]
   17bec:	bl	19548 <__assert_fail@plt+0x7f44>
   17bf0:	mov	r0, sp
   17bf4:	bl	19688 <__assert_fail@plt+0x8084>
   17bf8:	bl	11484 <__errno_location@plt>
   17bfc:	mov	r3, #9
   17c00:	str	r3, [r0]
   17c04:	mvn	r6, #0
   17c08:	b	17bc4 <__assert_fail@plt+0x65c0>
   17c0c:	mov	r1, r7
   17c10:	mov	r0, r5
   17c14:	bl	18074 <__assert_fail@plt+0x6a70>
   17c18:	mov	r6, r0
   17c1c:	cmn	r0, #1
   17c20:	beq	17c40 <__assert_fail@plt+0x663c>
   17c24:	mov	r0, sp
   17c28:	bl	19660 <__assert_fail@plt+0x805c>
   17c2c:	cmp	r0, #0
   17c30:	bne	17c70 <__assert_fail@plt+0x666c>
   17c34:	mov	r0, sp
   17c38:	bl	19688 <__assert_fail@plt+0x8084>
   17c3c:	b	17bc4 <__assert_fail@plt+0x65c0>
   17c40:	bl	11484 <__errno_location@plt>
   17c44:	mov	r5, r0
   17c48:	ldr	r4, [r0]
   17c4c:	mov	r0, sp
   17c50:	bl	19660 <__assert_fail@plt+0x805c>
   17c54:	cmp	r0, #0
   17c58:	bne	17c70 <__assert_fail@plt+0x666c>
   17c5c:	mov	r0, sp
   17c60:	bl	19688 <__assert_fail@plt+0x8084>
   17c64:	cmp	r4, #0
   17c68:	strne	r4, [r5]
   17c6c:	b	17bc4 <__assert_fail@plt+0x65c0>
   17c70:	bl	11484 <__errno_location@plt>
   17c74:	ldr	r0, [r0]
   17c78:	bl	19584 <__assert_fail@plt+0x7f80>
   17c7c:	andeq	r1, r8, r3
   17c80:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   17c84:	sub	sp, sp, #4032	; 0xfc0
   17c88:	mov	r5, r1
   17c8c:	mov	r7, r2
   17c90:	cmn	r0, #100	; 0x64
   17c94:	beq	17d68 <__assert_fail@plt+0x6764>
   17c98:	mov	r4, r0
   17c9c:	ldrb	r3, [r1]
   17ca0:	cmp	r3, #47	; 0x2f
   17ca4:	beq	17d68 <__assert_fail@plt+0x6764>
   17ca8:	mov	r2, r1
   17cac:	mov	r1, r0
   17cb0:	mov	r0, sp
   17cb4:	bl	18d9c <__assert_fail@plt+0x7798>
   17cb8:	subs	r8, r0, #0
   17cbc:	beq	17d14 <__assert_fail@plt+0x6710>
   17cc0:	mov	r1, r7
   17cc4:	mov	r0, r8
   17cc8:	bl	114e4 <setfilecon@plt>
   17ccc:	mov	r6, r0
   17cd0:	bl	11484 <__errno_location@plt>
   17cd4:	mov	r9, r0
   17cd8:	ldr	sl, [r0]
   17cdc:	mov	r3, sp
   17ce0:	cmp	r8, r3
   17ce4:	beq	17cf0 <__assert_fail@plt+0x66ec>
   17ce8:	mov	r0, r8
   17cec:	bl	193bc <__assert_fail@plt+0x7db8>
   17cf0:	cmn	r6, #1
   17cf4:	bne	17d78 <__assert_fail@plt+0x6774>
   17cf8:	sub	r3, sl, #1
   17cfc:	cmp	r3, #19
   17d00:	bhi	17d84 <__assert_fail@plt+0x6780>
   17d04:	ldr	r2, [pc, #292]	; 17e30 <__assert_fail@plt+0x682c>
   17d08:	lsr	r3, r2, r3
   17d0c:	tst	r3, #1
   17d10:	beq	17d84 <__assert_fail@plt+0x6780>
   17d14:	mov	r0, sp
   17d18:	bl	1960c <__assert_fail@plt+0x8008>
   17d1c:	cmp	r0, #0
   17d20:	bne	17d98 <__assert_fail@plt+0x6794>
   17d24:	cmp	r4, #0
   17d28:	blt	17d38 <__assert_fail@plt+0x6734>
   17d2c:	ldr	r3, [sp]
   17d30:	cmp	r4, r3
   17d34:	beq	17da4 <__assert_fail@plt+0x67a0>
   17d38:	mov	r0, r4
   17d3c:	bl	11568 <fchdir@plt>
   17d40:	cmp	r0, #0
   17d44:	beq	17dc0 <__assert_fail@plt+0x67bc>
   17d48:	bl	11484 <__errno_location@plt>
   17d4c:	mov	r4, r0
   17d50:	ldr	r5, [r0]
   17d54:	mov	r0, sp
   17d58:	bl	19688 <__assert_fail@plt+0x8084>
   17d5c:	str	r5, [r4]
   17d60:	mvn	r6, #0
   17d64:	b	17d78 <__assert_fail@plt+0x6774>
   17d68:	mov	r1, r7
   17d6c:	mov	r0, r5
   17d70:	bl	114e4 <setfilecon@plt>
   17d74:	mov	r6, r0
   17d78:	mov	r0, r6
   17d7c:	add	sp, sp, #4032	; 0xfc0
   17d80:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   17d84:	cmp	sl, #38	; 0x26
   17d88:	cmpne	sl, #95	; 0x5f
   17d8c:	strne	sl, [r9]
   17d90:	bne	17d78 <__assert_fail@plt+0x6774>
   17d94:	b	17d14 <__assert_fail@plt+0x6710>
   17d98:	bl	11484 <__errno_location@plt>
   17d9c:	ldr	r0, [r0]
   17da0:	bl	19548 <__assert_fail@plt+0x7f44>
   17da4:	mov	r0, sp
   17da8:	bl	19688 <__assert_fail@plt+0x8084>
   17dac:	bl	11484 <__errno_location@plt>
   17db0:	mov	r3, #9
   17db4:	str	r3, [r0]
   17db8:	mvn	r6, #0
   17dbc:	b	17d78 <__assert_fail@plt+0x6774>
   17dc0:	mov	r1, r7
   17dc4:	mov	r0, r5
   17dc8:	bl	114e4 <setfilecon@plt>
   17dcc:	mov	r6, r0
   17dd0:	cmn	r0, #1
   17dd4:	beq	17df4 <__assert_fail@plt+0x67f0>
   17dd8:	mov	r0, sp
   17ddc:	bl	19660 <__assert_fail@plt+0x805c>
   17de0:	cmp	r0, #0
   17de4:	bne	17e24 <__assert_fail@plt+0x6820>
   17de8:	mov	r0, sp
   17dec:	bl	19688 <__assert_fail@plt+0x8084>
   17df0:	b	17d78 <__assert_fail@plt+0x6774>
   17df4:	bl	11484 <__errno_location@plt>
   17df8:	mov	r5, r0
   17dfc:	ldr	r4, [r0]
   17e00:	mov	r0, sp
   17e04:	bl	19660 <__assert_fail@plt+0x805c>
   17e08:	cmp	r0, #0
   17e0c:	bne	17e24 <__assert_fail@plt+0x6820>
   17e10:	mov	r0, sp
   17e14:	bl	19688 <__assert_fail@plt+0x8084>
   17e18:	cmp	r4, #0
   17e1c:	strne	r4, [r5]
   17e20:	b	17d78 <__assert_fail@plt+0x6774>
   17e24:	bl	11484 <__errno_location@plt>
   17e28:	ldr	r0, [r0]
   17e2c:	bl	19584 <__assert_fail@plt+0x7f80>
   17e30:	andeq	r1, r8, r3
   17e34:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   17e38:	sub	sp, sp, #4032	; 0xfc0
   17e3c:	mov	r5, r1
   17e40:	mov	r7, r2
   17e44:	cmn	r0, #100	; 0x64
   17e48:	beq	17f1c <__assert_fail@plt+0x6918>
   17e4c:	mov	r4, r0
   17e50:	ldrb	r3, [r1]
   17e54:	cmp	r3, #47	; 0x2f
   17e58:	beq	17f1c <__assert_fail@plt+0x6918>
   17e5c:	mov	r2, r1
   17e60:	mov	r1, r0
   17e64:	mov	r0, sp
   17e68:	bl	18d9c <__assert_fail@plt+0x7798>
   17e6c:	subs	r8, r0, #0
   17e70:	beq	17ec8 <__assert_fail@plt+0x68c4>
   17e74:	mov	r1, r7
   17e78:	mov	r0, r8
   17e7c:	bl	11280 <lsetfilecon@plt>
   17e80:	mov	r6, r0
   17e84:	bl	11484 <__errno_location@plt>
   17e88:	mov	r9, r0
   17e8c:	ldr	sl, [r0]
   17e90:	mov	r3, sp
   17e94:	cmp	r8, r3
   17e98:	beq	17ea4 <__assert_fail@plt+0x68a0>
   17e9c:	mov	r0, r8
   17ea0:	bl	193bc <__assert_fail@plt+0x7db8>
   17ea4:	cmn	r6, #1
   17ea8:	bne	17f2c <__assert_fail@plt+0x6928>
   17eac:	sub	r3, sl, #1
   17eb0:	cmp	r3, #19
   17eb4:	bhi	17f38 <__assert_fail@plt+0x6934>
   17eb8:	ldr	r2, [pc, #292]	; 17fe4 <__assert_fail@plt+0x69e0>
   17ebc:	lsr	r3, r2, r3
   17ec0:	tst	r3, #1
   17ec4:	beq	17f38 <__assert_fail@plt+0x6934>
   17ec8:	mov	r0, sp
   17ecc:	bl	1960c <__assert_fail@plt+0x8008>
   17ed0:	cmp	r0, #0
   17ed4:	bne	17f4c <__assert_fail@plt+0x6948>
   17ed8:	cmp	r4, #0
   17edc:	blt	17eec <__assert_fail@plt+0x68e8>
   17ee0:	ldr	r3, [sp]
   17ee4:	cmp	r4, r3
   17ee8:	beq	17f58 <__assert_fail@plt+0x6954>
   17eec:	mov	r0, r4
   17ef0:	bl	11568 <fchdir@plt>
   17ef4:	cmp	r0, #0
   17ef8:	beq	17f74 <__assert_fail@plt+0x6970>
   17efc:	bl	11484 <__errno_location@plt>
   17f00:	mov	r4, r0
   17f04:	ldr	r5, [r0]
   17f08:	mov	r0, sp
   17f0c:	bl	19688 <__assert_fail@plt+0x8084>
   17f10:	str	r5, [r4]
   17f14:	mvn	r6, #0
   17f18:	b	17f2c <__assert_fail@plt+0x6928>
   17f1c:	mov	r1, r7
   17f20:	mov	r0, r5
   17f24:	bl	11280 <lsetfilecon@plt>
   17f28:	mov	r6, r0
   17f2c:	mov	r0, r6
   17f30:	add	sp, sp, #4032	; 0xfc0
   17f34:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   17f38:	cmp	sl, #38	; 0x26
   17f3c:	cmpne	sl, #95	; 0x5f
   17f40:	strne	sl, [r9]
   17f44:	bne	17f2c <__assert_fail@plt+0x6928>
   17f48:	b	17ec8 <__assert_fail@plt+0x68c4>
   17f4c:	bl	11484 <__errno_location@plt>
   17f50:	ldr	r0, [r0]
   17f54:	bl	19548 <__assert_fail@plt+0x7f44>
   17f58:	mov	r0, sp
   17f5c:	bl	19688 <__assert_fail@plt+0x8084>
   17f60:	bl	11484 <__errno_location@plt>
   17f64:	mov	r3, #9
   17f68:	str	r3, [r0]
   17f6c:	mvn	r6, #0
   17f70:	b	17f2c <__assert_fail@plt+0x6928>
   17f74:	mov	r1, r7
   17f78:	mov	r0, r5
   17f7c:	bl	11280 <lsetfilecon@plt>
   17f80:	mov	r6, r0
   17f84:	cmn	r0, #1
   17f88:	beq	17fa8 <__assert_fail@plt+0x69a4>
   17f8c:	mov	r0, sp
   17f90:	bl	19660 <__assert_fail@plt+0x805c>
   17f94:	cmp	r0, #0
   17f98:	bne	17fd8 <__assert_fail@plt+0x69d4>
   17f9c:	mov	r0, sp
   17fa0:	bl	19688 <__assert_fail@plt+0x8084>
   17fa4:	b	17f2c <__assert_fail@plt+0x6928>
   17fa8:	bl	11484 <__errno_location@plt>
   17fac:	mov	r5, r0
   17fb0:	ldr	r4, [r0]
   17fb4:	mov	r0, sp
   17fb8:	bl	19660 <__assert_fail@plt+0x805c>
   17fbc:	cmp	r0, #0
   17fc0:	bne	17fd8 <__assert_fail@plt+0x69d4>
   17fc4:	mov	r0, sp
   17fc8:	bl	19688 <__assert_fail@plt+0x8084>
   17fcc:	cmp	r4, #0
   17fd0:	strne	r4, [r5]
   17fd4:	b	17f2c <__assert_fail@plt+0x6928>
   17fd8:	bl	11484 <__errno_location@plt>
   17fdc:	ldr	r0, [r0]
   17fe0:	bl	19584 <__assert_fail@plt+0x7f80>
   17fe4:	andeq	r1, r8, r3
   17fe8:	push	{r4, r5, r6, lr}
   17fec:	subs	r4, r0, #0
   17ff0:	beq	18008 <__assert_fail@plt+0x6a04>
   17ff4:	mov	r5, r1
   17ff8:	cmp	r4, #10
   17ffc:	beq	1801c <__assert_fail@plt+0x6a18>
   18000:	mov	r0, r4
   18004:	pop	{r4, r5, r6, pc}
   18008:	bl	11484 <__errno_location@plt>
   1800c:	mov	r3, #95	; 0x5f
   18010:	str	r3, [r0]
   18014:	mvn	r4, #0
   18018:	b	18000 <__assert_fail@plt+0x69fc>
   1801c:	ldr	r6, [r1]
   18020:	ldr	r1, [pc, #48]	; 18058 <__assert_fail@plt+0x6a54>
   18024:	mov	r0, r6
   18028:	bl	11268 <strcmp@plt>
   1802c:	cmp	r0, #0
   18030:	bne	18000 <__assert_fail@plt+0x69fc>
   18034:	mov	r0, r6
   18038:	bl	11580 <freecon@plt>
   1803c:	mov	r3, #0
   18040:	str	r3, [r5]
   18044:	bl	11484 <__errno_location@plt>
   18048:	mov	r3, #61	; 0x3d
   1804c:	str	r3, [r0]
   18050:	mvn	r4, #0
   18054:	b	18000 <__assert_fail@plt+0x69fc>
   18058:	andeq	fp, r1, r8, lsl #2
   1805c:	push	{r4, lr}
   18060:	mov	r4, r1
   18064:	bl	11454 <getfilecon@plt>
   18068:	mov	r1, r4
   1806c:	bl	17fe8 <__assert_fail@plt+0x69e4>
   18070:	pop	{r4, pc}
   18074:	push	{r4, lr}
   18078:	mov	r4, r1
   1807c:	bl	113d0 <lgetfilecon@plt>
   18080:	mov	r1, r4
   18084:	bl	17fe8 <__assert_fail@plt+0x69e4>
   18088:	pop	{r4, pc}
   1808c:	push	{r4, lr}
   18090:	mov	r4, r1
   18094:	bl	1131c <fgetfilecon@plt>
   18098:	mov	r1, r4
   1809c:	bl	17fe8 <__assert_fail@plt+0x69e4>
   180a0:	pop	{r4, pc}
   180a4:	push	{r4, r5, r6, r7, r8, lr}
   180a8:	mov	r4, r0
   180ac:	cmp	r0, #2
   180b0:	bls	180bc <__assert_fail@plt+0x6ab8>
   180b4:	mov	r0, r4
   180b8:	pop	{r4, r5, r6, r7, r8, pc}
   180bc:	bl	196ac <__assert_fail@plt+0x80a8>
   180c0:	mov	r6, r0
   180c4:	bl	11484 <__errno_location@plt>
   180c8:	mov	r5, r0
   180cc:	ldr	r7, [r0]
   180d0:	mov	r0, r4
   180d4:	bl	115d4 <close@plt>
   180d8:	str	r7, [r5]
   180dc:	mov	r4, r6
   180e0:	b	180b4 <__assert_fail@plt+0x6ab0>
   180e4:	push	{r4, r5, r6, lr}
   180e8:	sub	sp, sp, #32
   180ec:	mov	r4, r0
   180f0:	ldr	r5, [sp, #48]	; 0x30
   180f4:	ldr	r6, [sp, #52]	; 0x34
   180f8:	cmp	r1, #0
   180fc:	beq	181b4 <__assert_fail@plt+0x6bb0>
   18100:	str	r3, [sp, #4]
   18104:	str	r2, [sp]
   18108:	mov	r3, r1
   1810c:	ldr	r2, [pc, #940]	; 184c0 <__assert_fail@plt+0x6ebc>
   18110:	mov	r1, #1
   18114:	bl	114cc <__fprintf_chk@plt>
   18118:	mov	r2, #5
   1811c:	ldr	r1, [pc, #928]	; 184c4 <__assert_fail@plt+0x6ec0>
   18120:	mov	r0, #0
   18124:	bl	112f8 <dcgettext@plt>
   18128:	ldr	r3, [pc, #920]	; 184c8 <__assert_fail@plt+0x6ec4>
   1812c:	str	r3, [sp]
   18130:	mov	r3, r0
   18134:	ldr	r2, [pc, #912]	; 184cc <__assert_fail@plt+0x6ec8>
   18138:	mov	r1, #1
   1813c:	mov	r0, r4
   18140:	bl	114cc <__fprintf_chk@plt>
   18144:	mov	r1, r4
   18148:	mov	r0, #10
   1814c:	bl	112e0 <fputc_unlocked@plt>
   18150:	mov	r2, #5
   18154:	ldr	r1, [pc, #884]	; 184d0 <__assert_fail@plt+0x6ecc>
   18158:	mov	r0, #0
   1815c:	bl	112f8 <dcgettext@plt>
   18160:	ldr	r3, [pc, #876]	; 184d4 <__assert_fail@plt+0x6ed0>
   18164:	mov	r2, r0
   18168:	mov	r1, #1
   1816c:	mov	r0, r4
   18170:	bl	114cc <__fprintf_chk@plt>
   18174:	mov	r1, r4
   18178:	mov	r0, #10
   1817c:	bl	112e0 <fputc_unlocked@plt>
   18180:	cmp	r6, #9
   18184:	ldrls	pc, [pc, r6, lsl #2]
   18188:	b	18458 <__assert_fail@plt+0x6e54>
   1818c:	strdeq	r8, [r1], -r0
   18190:	andeq	r8, r1, ip, asr #3
   18194:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18198:	andeq	r8, r1, r8, lsr #4
   1819c:	andeq	r8, r1, r0, ror #4
   181a0:	andeq	r8, r1, r0, lsr #5
   181a4:	andeq	r8, r1, r8, ror #5
   181a8:	andeq	r8, r1, r8, lsr r3
   181ac:	muleq	r1, r0, r3
   181b0:	strdeq	r8, [r1], -r0
   181b4:	str	r3, [sp]
   181b8:	mov	r3, r2
   181bc:	ldr	r2, [pc, #788]	; 184d8 <__assert_fail@plt+0x6ed4>
   181c0:	mov	r1, #1
   181c4:	bl	114cc <__fprintf_chk@plt>
   181c8:	b	18118 <__assert_fail@plt+0x6b14>
   181cc:	mov	r2, #5
   181d0:	ldr	r1, [pc, #772]	; 184dc <__assert_fail@plt+0x6ed8>
   181d4:	mov	r0, #0
   181d8:	bl	112f8 <dcgettext@plt>
   181dc:	ldr	r3, [r5]
   181e0:	mov	r2, r0
   181e4:	mov	r1, #1
   181e8:	mov	r0, r4
   181ec:	bl	114cc <__fprintf_chk@plt>
   181f0:	add	sp, sp, #32
   181f4:	pop	{r4, r5, r6, pc}
   181f8:	mov	r2, #5
   181fc:	ldr	r1, [pc, #732]	; 184e0 <__assert_fail@plt+0x6edc>
   18200:	mov	r0, #0
   18204:	bl	112f8 <dcgettext@plt>
   18208:	ldr	r3, [r5]
   1820c:	ldr	r2, [r5, #4]
   18210:	str	r2, [sp]
   18214:	mov	r2, r0
   18218:	mov	r1, #1
   1821c:	mov	r0, r4
   18220:	bl	114cc <__fprintf_chk@plt>
   18224:	b	181f0 <__assert_fail@plt+0x6bec>
   18228:	mov	r2, #5
   1822c:	ldr	r1, [pc, #688]	; 184e4 <__assert_fail@plt+0x6ee0>
   18230:	mov	r0, #0
   18234:	bl	112f8 <dcgettext@plt>
   18238:	ldr	r3, [r5]
   1823c:	ldr	r2, [r5, #8]
   18240:	str	r2, [sp, #4]
   18244:	ldr	r2, [r5, #4]
   18248:	str	r2, [sp]
   1824c:	mov	r2, r0
   18250:	mov	r1, #1
   18254:	mov	r0, r4
   18258:	bl	114cc <__fprintf_chk@plt>
   1825c:	b	181f0 <__assert_fail@plt+0x6bec>
   18260:	mov	r2, #5
   18264:	ldr	r1, [pc, #636]	; 184e8 <__assert_fail@plt+0x6ee4>
   18268:	mov	r0, #0
   1826c:	bl	112f8 <dcgettext@plt>
   18270:	ldr	r3, [r5]
   18274:	ldr	r2, [r5, #12]
   18278:	str	r2, [sp, #8]
   1827c:	ldr	r2, [r5, #8]
   18280:	str	r2, [sp, #4]
   18284:	ldr	r2, [r5, #4]
   18288:	str	r2, [sp]
   1828c:	mov	r2, r0
   18290:	mov	r1, #1
   18294:	mov	r0, r4
   18298:	bl	114cc <__fprintf_chk@plt>
   1829c:	b	181f0 <__assert_fail@plt+0x6bec>
   182a0:	mov	r2, #5
   182a4:	ldr	r1, [pc, #576]	; 184ec <__assert_fail@plt+0x6ee8>
   182a8:	mov	r0, #0
   182ac:	bl	112f8 <dcgettext@plt>
   182b0:	ldr	r3, [r5]
   182b4:	ldr	r2, [r5, #16]
   182b8:	str	r2, [sp, #12]
   182bc:	ldr	r2, [r5, #12]
   182c0:	str	r2, [sp, #8]
   182c4:	ldr	r2, [r5, #8]
   182c8:	str	r2, [sp, #4]
   182cc:	ldr	r2, [r5, #4]
   182d0:	str	r2, [sp]
   182d4:	mov	r2, r0
   182d8:	mov	r1, #1
   182dc:	mov	r0, r4
   182e0:	bl	114cc <__fprintf_chk@plt>
   182e4:	b	181f0 <__assert_fail@plt+0x6bec>
   182e8:	mov	r2, #5
   182ec:	ldr	r1, [pc, #508]	; 184f0 <__assert_fail@plt+0x6eec>
   182f0:	mov	r0, #0
   182f4:	bl	112f8 <dcgettext@plt>
   182f8:	ldr	r3, [r5]
   182fc:	ldr	r2, [r5, #20]
   18300:	str	r2, [sp, #16]
   18304:	ldr	r2, [r5, #16]
   18308:	str	r2, [sp, #12]
   1830c:	ldr	r2, [r5, #12]
   18310:	str	r2, [sp, #8]
   18314:	ldr	r2, [r5, #8]
   18318:	str	r2, [sp, #4]
   1831c:	ldr	r2, [r5, #4]
   18320:	str	r2, [sp]
   18324:	mov	r2, r0
   18328:	mov	r1, #1
   1832c:	mov	r0, r4
   18330:	bl	114cc <__fprintf_chk@plt>
   18334:	b	181f0 <__assert_fail@plt+0x6bec>
   18338:	mov	r2, #5
   1833c:	ldr	r1, [pc, #432]	; 184f4 <__assert_fail@plt+0x6ef0>
   18340:	mov	r0, #0
   18344:	bl	112f8 <dcgettext@plt>
   18348:	ldr	r3, [r5]
   1834c:	ldr	r2, [r5, #24]
   18350:	str	r2, [sp, #20]
   18354:	ldr	r2, [r5, #20]
   18358:	str	r2, [sp, #16]
   1835c:	ldr	r2, [r5, #16]
   18360:	str	r2, [sp, #12]
   18364:	ldr	r2, [r5, #12]
   18368:	str	r2, [sp, #8]
   1836c:	ldr	r2, [r5, #8]
   18370:	str	r2, [sp, #4]
   18374:	ldr	r2, [r5, #4]
   18378:	str	r2, [sp]
   1837c:	mov	r2, r0
   18380:	mov	r1, #1
   18384:	mov	r0, r4
   18388:	bl	114cc <__fprintf_chk@plt>
   1838c:	b	181f0 <__assert_fail@plt+0x6bec>
   18390:	mov	r2, #5
   18394:	ldr	r1, [pc, #348]	; 184f8 <__assert_fail@plt+0x6ef4>
   18398:	mov	r0, #0
   1839c:	bl	112f8 <dcgettext@plt>
   183a0:	ldr	r3, [r5]
   183a4:	ldr	r2, [r5, #28]
   183a8:	str	r2, [sp, #24]
   183ac:	ldr	r2, [r5, #24]
   183b0:	str	r2, [sp, #20]
   183b4:	ldr	r2, [r5, #20]
   183b8:	str	r2, [sp, #16]
   183bc:	ldr	r2, [r5, #16]
   183c0:	str	r2, [sp, #12]
   183c4:	ldr	r2, [r5, #12]
   183c8:	str	r2, [sp, #8]
   183cc:	ldr	r2, [r5, #8]
   183d0:	str	r2, [sp, #4]
   183d4:	ldr	r2, [r5, #4]
   183d8:	str	r2, [sp]
   183dc:	mov	r2, r0
   183e0:	mov	r1, #1
   183e4:	mov	r0, r4
   183e8:	bl	114cc <__fprintf_chk@plt>
   183ec:	b	181f0 <__assert_fail@plt+0x6bec>
   183f0:	mov	r2, #5
   183f4:	ldr	r1, [pc, #256]	; 184fc <__assert_fail@plt+0x6ef8>
   183f8:	mov	r0, #0
   183fc:	bl	112f8 <dcgettext@plt>
   18400:	ldr	r3, [r5]
   18404:	ldr	r2, [r5, #32]
   18408:	str	r2, [sp, #28]
   1840c:	ldr	r2, [r5, #28]
   18410:	str	r2, [sp, #24]
   18414:	ldr	r2, [r5, #24]
   18418:	str	r2, [sp, #20]
   1841c:	ldr	r2, [r5, #20]
   18420:	str	r2, [sp, #16]
   18424:	ldr	r2, [r5, #16]
   18428:	str	r2, [sp, #12]
   1842c:	ldr	r2, [r5, #12]
   18430:	str	r2, [sp, #8]
   18434:	ldr	r2, [r5, #8]
   18438:	str	r2, [sp, #4]
   1843c:	ldr	r2, [r5, #4]
   18440:	str	r2, [sp]
   18444:	mov	r2, r0
   18448:	mov	r1, #1
   1844c:	mov	r0, r4
   18450:	bl	114cc <__fprintf_chk@plt>
   18454:	b	181f0 <__assert_fail@plt+0x6bec>
   18458:	mov	r2, #5
   1845c:	ldr	r1, [pc, #156]	; 18500 <__assert_fail@plt+0x6efc>
   18460:	mov	r0, #0
   18464:	bl	112f8 <dcgettext@plt>
   18468:	ldr	r3, [r5]
   1846c:	ldr	r2, [r5, #32]
   18470:	str	r2, [sp, #28]
   18474:	ldr	r2, [r5, #28]
   18478:	str	r2, [sp, #24]
   1847c:	ldr	r2, [r5, #24]
   18480:	str	r2, [sp, #20]
   18484:	ldr	r2, [r5, #20]
   18488:	str	r2, [sp, #16]
   1848c:	ldr	r2, [r5, #16]
   18490:	str	r2, [sp, #12]
   18494:	ldr	r2, [r5, #12]
   18498:	str	r2, [sp, #8]
   1849c:	ldr	r2, [r5, #8]
   184a0:	str	r2, [sp, #4]
   184a4:	ldr	r2, [r5, #4]
   184a8:	str	r2, [sp]
   184ac:	mov	r2, r0
   184b0:	mov	r1, #1
   184b4:	mov	r0, r4
   184b8:	bl	114cc <__fprintf_chk@plt>
   184bc:	b	181f0 <__assert_fail@plt+0x6bec>
   184c0:	andeq	fp, r1, r4, lsl r1
   184c4:	andeq	fp, r1, r8, lsr #2
   184c8:	andeq	r0, r0, r6, ror #15
   184cc:	andeq	fp, r1, r0, lsl #8
   184d0:	andeq	fp, r1, ip, lsr #2
   184d4:	ldrdeq	fp, [r1], -r8
   184d8:	andeq	fp, r1, r0, lsr #2
   184dc:	strdeq	fp, [r1], -ip
   184e0:	andeq	fp, r1, ip, lsl #4
   184e4:	andeq	fp, r1, r4, lsr #4
   184e8:	andeq	fp, r1, r0, asr #4
   184ec:	andeq	fp, r1, r0, ror #4
   184f0:	andeq	fp, r1, r4, lsl #5
   184f4:	andeq	fp, r1, ip, lsr #5
   184f8:	ldrdeq	fp, [r1], -r8
   184fc:	andeq	fp, r1, r8, lsl #6
   18500:	andeq	fp, r1, ip, lsr r3
   18504:	push	{r4, r5, lr}
   18508:	sub	sp, sp, #12
   1850c:	ldr	r5, [sp, #24]
   18510:	ldr	ip, [r5]
   18514:	cmp	ip, #0
   18518:	beq	18548 <__assert_fail@plt+0x6f44>
   1851c:	mov	lr, r5
   18520:	mov	ip, #0
   18524:	add	ip, ip, #1
   18528:	ldr	r4, [lr, #4]!
   1852c:	cmp	r4, #0
   18530:	bne	18524 <__assert_fail@plt+0x6f20>
   18534:	str	ip, [sp, #4]
   18538:	str	r5, [sp]
   1853c:	bl	180e4 <__assert_fail@plt+0x6ae0>
   18540:	add	sp, sp, #12
   18544:	pop	{r4, r5, pc}
   18548:	mov	ip, #0
   1854c:	b	18534 <__assert_fail@plt+0x6f30>
   18550:	push	{r4, r5, lr}
   18554:	sub	sp, sp, #52	; 0x34
   18558:	ldr	r4, [sp, #64]	; 0x40
   1855c:	sub	r4, r4, #4
   18560:	add	r5, sp, #4
   18564:	mov	ip, #0
   18568:	ldr	lr, [r4, #4]!
   1856c:	str	lr, [r5, #4]!
   18570:	cmp	lr, #0
   18574:	beq	18584 <__assert_fail@plt+0x6f80>
   18578:	add	ip, ip, #1
   1857c:	cmp	ip, #10
   18580:	bne	18568 <__assert_fail@plt+0x6f64>
   18584:	str	ip, [sp, #4]
   18588:	add	ip, sp, #8
   1858c:	str	ip, [sp]
   18590:	bl	180e4 <__assert_fail@plt+0x6ae0>
   18594:	add	sp, sp, #52	; 0x34
   18598:	pop	{r4, r5, pc}
   1859c:	push	{r3}		; (str r3, [sp, #-4]!)
   185a0:	push	{lr}		; (str lr, [sp, #-4]!)
   185a4:	sub	sp, sp, #16
   185a8:	add	r3, sp, #24
   185ac:	str	r3, [sp, #12]
   185b0:	str	r3, [sp]
   185b4:	ldr	r3, [sp, #20]
   185b8:	bl	18550 <__assert_fail@plt+0x6f4c>
   185bc:	add	sp, sp, #16
   185c0:	pop	{lr}		; (ldr lr, [sp], #4)
   185c4:	add	sp, sp, #4
   185c8:	bx	lr
   185cc:	push	{r4, lr}
   185d0:	ldr	r3, [pc, #112]	; 18648 <__assert_fail@plt+0x7044>
   185d4:	ldr	r1, [r3]
   185d8:	mov	r0, #10
   185dc:	bl	112e0 <fputc_unlocked@plt>
   185e0:	mov	r2, #5
   185e4:	ldr	r1, [pc, #96]	; 1864c <__assert_fail@plt+0x7048>
   185e8:	mov	r0, #0
   185ec:	bl	112f8 <dcgettext@plt>
   185f0:	ldr	r2, [pc, #88]	; 18650 <__assert_fail@plt+0x704c>
   185f4:	mov	r1, r0
   185f8:	mov	r0, #1
   185fc:	bl	114b4 <__printf_chk@plt>
   18600:	mov	r2, #5
   18604:	ldr	r1, [pc, #72]	; 18654 <__assert_fail@plt+0x7050>
   18608:	mov	r0, #0
   1860c:	bl	112f8 <dcgettext@plt>
   18610:	ldr	r3, [pc, #64]	; 18658 <__assert_fail@plt+0x7054>
   18614:	ldr	r2, [pc, #64]	; 1865c <__assert_fail@plt+0x7058>
   18618:	mov	r1, r0
   1861c:	mov	r0, #1
   18620:	bl	114b4 <__printf_chk@plt>
   18624:	mov	r2, #5
   18628:	ldr	r1, [pc, #48]	; 18660 <__assert_fail@plt+0x705c>
   1862c:	mov	r0, #0
   18630:	bl	112f8 <dcgettext@plt>
   18634:	ldr	r2, [pc, #40]	; 18664 <__assert_fail@plt+0x7060>
   18638:	mov	r1, r0
   1863c:	mov	r0, #1
   18640:	bl	114b4 <__printf_chk@plt>
   18644:	pop	{r4, pc}
   18648:	andeq	ip, r2, r4, asr #3
   1864c:	andeq	fp, r1, r8, ror r3
   18650:	andeq	fp, r1, ip, lsl #7
   18654:	andeq	fp, r1, r4, lsr #7
   18658:	andeq	sl, r1, r8, lsr #19
   1865c:	ldrdeq	sl, [r1], -r0
   18660:			; <UNDEFINED> instruction: 0x0001b3b8
   18664:	andeq	fp, r1, r0, ror #7
   18668:	push	{r4, lr}
   1866c:	bl	18d1c <__assert_fail@plt+0x7718>
   18670:	cmp	r0, #0
   18674:	popne	{r4, pc}
   18678:	bl	18c0c <__assert_fail@plt+0x7608>
   1867c:	push	{r4, lr}
   18680:	bl	18d1c <__assert_fail@plt+0x7718>
   18684:	cmp	r0, #0
   18688:	popne	{r4, pc}
   1868c:	bl	18c0c <__assert_fail@plt+0x7608>
   18690:	push	{r4, lr}
   18694:	bl	18668 <__assert_fail@plt+0x7064>
   18698:	pop	{r4, pc}
   1869c:	push	{r4, r5, r6, lr}
   186a0:	mov	r5, r0
   186a4:	mov	r4, r1
   186a8:	bl	18d4c <__assert_fail@plt+0x7748>
   186ac:	cmp	r0, #0
   186b0:	popne	{r4, r5, r6, pc}
   186b4:	adds	r4, r4, #0
   186b8:	movne	r4, #1
   186bc:	cmp	r5, #0
   186c0:	orreq	r4, r4, #1
   186c4:	cmp	r4, #0
   186c8:	popeq	{r4, r5, r6, pc}
   186cc:	bl	18c0c <__assert_fail@plt+0x7608>
   186d0:	push	{r4, lr}
   186d4:	cmp	r1, #0
   186d8:	orreq	r1, r1, #1
   186dc:	bl	18d4c <__assert_fail@plt+0x7748>
   186e0:	cmp	r0, #0
   186e4:	popne	{r4, pc}
   186e8:	bl	18c0c <__assert_fail@plt+0x7608>
   186ec:	push	{r4, r5, r6, lr}
   186f0:	mov	r6, r0
   186f4:	mov	r5, r1
   186f8:	mov	r4, r2
   186fc:	bl	195c0 <__assert_fail@plt+0x7fbc>
   18700:	cmp	r0, #0
   18704:	popne	{r4, r5, r6, pc}
   18708:	cmp	r6, #0
   1870c:	beq	1871c <__assert_fail@plt+0x7118>
   18710:	cmp	r5, #0
   18714:	cmpne	r4, #0
   18718:	popeq	{r4, r5, r6, pc}
   1871c:	bl	18c0c <__assert_fail@plt+0x7608>
   18720:	push	{r4, lr}
   18724:	bl	186ec <__assert_fail@plt+0x70e8>
   18728:	pop	{r4, pc}
   1872c:	push	{r4, lr}
   18730:	mov	ip, r1
   18734:	mov	r3, r2
   18738:	cmp	r2, #0
   1873c:	cmpne	r1, #0
   18740:	moveq	r3, #1
   18744:	moveq	ip, r3
   18748:	mov	r2, r3
   1874c:	mov	r1, ip
   18750:	bl	195c0 <__assert_fail@plt+0x7fbc>
   18754:	cmp	r0, #0
   18758:	popne	{r4, pc}
   1875c:	bl	18c0c <__assert_fail@plt+0x7608>
   18760:	push	{r4, lr}
   18764:	mov	r2, r1
   18768:	mov	r1, r0
   1876c:	mov	r0, #0
   18770:	bl	186ec <__assert_fail@plt+0x70e8>
   18774:	pop	{r4, pc}
   18778:	push	{r4, lr}
   1877c:	mov	r2, r1
   18780:	mov	r1, r0
   18784:	mov	r0, #0
   18788:	bl	1872c <__assert_fail@plt+0x7128>
   1878c:	pop	{r4, pc}
   18790:	push	{r4, r5, r6, r7, r8, lr}
   18794:	mov	r5, r1
   18798:	mov	r6, r2
   1879c:	ldr	r4, [r1]
   187a0:	subs	r7, r0, #0
   187a4:	beq	187c0 <__assert_fail@plt+0x71bc>
   187a8:	lsr	r2, r4, #1
   187ac:	add	r3, r2, #1
   187b0:	mvn	r3, r3
   187b4:	cmp	r4, r3
   187b8:	bls	187e4 <__assert_fail@plt+0x71e0>
   187bc:	bl	18c0c <__assert_fail@plt+0x7608>
   187c0:	cmp	r4, #0
   187c4:	bne	187ec <__assert_fail@plt+0x71e8>
   187c8:	mov	r1, r2
   187cc:	mov	r0, #64	; 0x40
   187d0:	bl	19ac0 <__assert_fail@plt+0x84bc>
   187d4:	cmp	r0, #0
   187d8:	movne	r4, r0
   187dc:	addeq	r4, r0, #1
   187e0:	b	187ec <__assert_fail@plt+0x71e8>
   187e4:	add	r4, r4, #1
   187e8:	add	r4, r4, r2
   187ec:	mov	r2, r6
   187f0:	mov	r1, r4
   187f4:	mov	r0, r7
   187f8:	bl	186ec <__assert_fail@plt+0x70e8>
   187fc:	str	r4, [r5]
   18800:	pop	{r4, r5, r6, r7, r8, pc}
   18804:	push	{r4, lr}
   18808:	mov	r2, #1
   1880c:	bl	18790 <__assert_fail@plt+0x718c>
   18810:	pop	{r4, pc}
   18814:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18818:	sub	sp, sp, #12
   1881c:	mov	fp, r0
   18820:	mov	sl, r1
   18824:	mov	r9, r2
   18828:	mov	r7, r3
   1882c:	ldr	r6, [sp, #48]	; 0x30
   18830:	ldr	r5, [r1]
   18834:	asrs	r4, r5, #1
   18838:	bmi	18994 <__assert_fail@plt+0x7390>
   1883c:	cmp	r5, #0
   18840:	blt	189a8 <__assert_fail@plt+0x73a4>
   18844:	mvn	r3, #-2147483648	; 0x80000000
   18848:	sub	r3, r3, r4
   1884c:	cmp	r5, r3
   18850:	movle	r3, #0
   18854:	movgt	r3, #1
   18858:	cmp	r3, #0
   1885c:	addeq	r4, r4, r5
   18860:	mvnne	r4, #-2147483648	; 0x80000000
   18864:	mvn	r8, r7
   18868:	lsr	r8, r8, #31
   1886c:	cmp	r7, r4
   18870:	movge	r3, #0
   18874:	andlt	r3, r8, #1
   18878:	cmp	r3, #0
   1887c:	movne	r4, r7
   18880:	cmp	r6, #0
   18884:	blt	189bc <__assert_fail@plt+0x73b8>
   18888:	cmp	r6, #0
   1888c:	beq	18a68 <__assert_fail@plt+0x7464>
   18890:	cmp	r4, #0
   18894:	blt	18a18 <__assert_fail@plt+0x7414>
   18898:	mov	r1, r6
   1889c:	mvn	r0, #-2147483648	; 0x80000000
   188a0:	bl	19ccc <__assert_fail@plt+0x86c8>
   188a4:	cmp	r0, r4
   188a8:	movge	r0, #0
   188ac:	movlt	r0, #1
   188b0:	cmp	r0, #0
   188b4:	mvnne	r3, #-2147483648	; 0x80000000
   188b8:	strne	r3, [sp, #4]
   188bc:	beq	18a50 <__assert_fail@plt+0x744c>
   188c0:	mov	r1, r6
   188c4:	ldr	r0, [sp, #4]
   188c8:	bl	19ccc <__assert_fail@plt+0x86c8>
   188cc:	mov	r4, r0
   188d0:	mov	r1, r6
   188d4:	ldr	r0, [sp, #4]
   188d8:	bl	19eec <__assert_fail@plt+0x88e8>
   188dc:	ldr	r3, [sp, #4]
   188e0:	sub	r1, r3, r1
   188e4:	cmp	fp, #0
   188e8:	moveq	r3, #0
   188ec:	streq	r3, [sl]
   188f0:	sub	r3, r4, r5
   188f4:	cmp	r3, r9
   188f8:	bge	18980 <__assert_fail@plt+0x737c>
   188fc:	cmp	r9, #0
   18900:	blt	18a74 <__assert_fail@plt+0x7470>
   18904:	cmp	r5, #0
   18908:	blt	18a88 <__assert_fail@plt+0x7484>
   1890c:	mvn	r3, #-2147483648	; 0x80000000
   18910:	sub	r3, r3, r9
   18914:	cmp	r5, r3
   18918:	movle	r3, #0
   1891c:	movgt	r3, #1
   18920:	cmp	r3, #0
   18924:	bne	18b30 <__assert_fail@plt+0x752c>
   18928:	add	r5, r5, r9
   1892c:	mov	r4, r5
   18930:	cmp	r7, r5
   18934:	movge	r7, #0
   18938:	andlt	r7, r8, #1
   1893c:	cmp	r7, #0
   18940:	bne	18b30 <__assert_fail@plt+0x752c>
   18944:	cmp	r6, #0
   18948:	blt	18a9c <__assert_fail@plt+0x7498>
   1894c:	cmp	r6, #0
   18950:	beq	1897c <__assert_fail@plt+0x7378>
   18954:	cmp	r5, #0
   18958:	blt	18af8 <__assert_fail@plt+0x74f4>
   1895c:	mov	r1, r6
   18960:	mvn	r0, #-2147483648	; 0x80000000
   18964:	bl	19ccc <__assert_fail@plt+0x86c8>
   18968:	cmp	r5, r0
   1896c:	movle	r0, #0
   18970:	movgt	r0, #1
   18974:	cmp	r0, #0
   18978:	bne	18b30 <__assert_fail@plt+0x752c>
   1897c:	mul	r1, r5, r6
   18980:	mov	r0, fp
   18984:	bl	1869c <__assert_fail@plt+0x7098>
   18988:	str	r4, [sl]
   1898c:	add	sp, sp, #12
   18990:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18994:	rsb	r3, r4, #-2147483648	; 0x80000000
   18998:	cmp	r5, r3
   1899c:	movge	r3, #0
   189a0:	movlt	r3, #1
   189a4:	b	18858 <__assert_fail@plt+0x7254>
   189a8:	rsb	r3, r5, #-2147483648	; 0x80000000
   189ac:	cmp	r4, r3
   189b0:	movge	r3, #0
   189b4:	movlt	r3, #1
   189b8:	b	18858 <__assert_fail@plt+0x7254>
   189bc:	cmp	r4, #0
   189c0:	blt	189e8 <__assert_fail@plt+0x73e4>
   189c4:	cmn	r6, #1
   189c8:	beq	18a04 <__assert_fail@plt+0x7400>
   189cc:	mov	r1, r6
   189d0:	mov	r0, #-2147483648	; 0x80000000
   189d4:	bl	19ccc <__assert_fail@plt+0x86c8>
   189d8:	cmp	r0, r4
   189dc:	movge	r0, #0
   189e0:	movlt	r0, #1
   189e4:	b	188b0 <__assert_fail@plt+0x72ac>
   189e8:	mov	r1, r6
   189ec:	mvn	r0, #-2147483648	; 0x80000000
   189f0:	bl	19ccc <__assert_fail@plt+0x86c8>
   189f4:	cmp	r0, r4
   189f8:	movle	r0, #0
   189fc:	movgt	r0, #1
   18a00:	b	188b0 <__assert_fail@plt+0x72ac>
   18a04:	add	r0, r4, #-2147483648	; 0x80000000
   18a08:	cmp	r0, #0
   18a0c:	movle	r0, #0
   18a10:	movgt	r0, #1
   18a14:	b	188b0 <__assert_fail@plt+0x72ac>
   18a18:	cmn	r4, #1
   18a1c:	beq	18a3c <__assert_fail@plt+0x7438>
   18a20:	mov	r1, r4
   18a24:	mov	r0, #-2147483648	; 0x80000000
   18a28:	bl	19ccc <__assert_fail@plt+0x86c8>
   18a2c:	cmp	r6, r0
   18a30:	movle	r0, #0
   18a34:	movgt	r0, #1
   18a38:	b	188b0 <__assert_fail@plt+0x72ac>
   18a3c:	add	r0, r6, #-2147483648	; 0x80000000
   18a40:	cmp	r0, #0
   18a44:	movle	r0, #0
   18a48:	movgt	r0, #1
   18a4c:	b	188b0 <__assert_fail@plt+0x72ac>
   18a50:	mul	r1, r6, r4
   18a54:	cmp	r1, #63	; 0x3f
   18a58:	movle	r3, #64	; 0x40
   18a5c:	strle	r3, [sp, #4]
   18a60:	bgt	188e4 <__assert_fail@plt+0x72e0>
   18a64:	b	188c0 <__assert_fail@plt+0x72bc>
   18a68:	mov	r3, #64	; 0x40
   18a6c:	str	r3, [sp, #4]
   18a70:	b	188c0 <__assert_fail@plt+0x72bc>
   18a74:	rsb	r3, r9, #-2147483648	; 0x80000000
   18a78:	cmp	r5, r3
   18a7c:	movge	r3, #0
   18a80:	movlt	r3, #1
   18a84:	b	18920 <__assert_fail@plt+0x731c>
   18a88:	rsb	r3, r5, #-2147483648	; 0x80000000
   18a8c:	cmp	r9, r3
   18a90:	movge	r3, #0
   18a94:	movlt	r3, #1
   18a98:	b	18920 <__assert_fail@plt+0x731c>
   18a9c:	cmp	r5, #0
   18aa0:	blt	18ac8 <__assert_fail@plt+0x74c4>
   18aa4:	cmn	r6, #1
   18aa8:	beq	18ae4 <__assert_fail@plt+0x74e0>
   18aac:	mov	r1, r6
   18ab0:	mov	r0, #-2147483648	; 0x80000000
   18ab4:	bl	19ccc <__assert_fail@plt+0x86c8>
   18ab8:	cmp	r5, r0
   18abc:	movle	r0, #0
   18ac0:	movgt	r0, #1
   18ac4:	b	18974 <__assert_fail@plt+0x7370>
   18ac8:	mov	r1, r6
   18acc:	mvn	r0, #-2147483648	; 0x80000000
   18ad0:	bl	19ccc <__assert_fail@plt+0x86c8>
   18ad4:	cmp	r5, r0
   18ad8:	movge	r0, #0
   18adc:	movlt	r0, #1
   18ae0:	b	18974 <__assert_fail@plt+0x7370>
   18ae4:	add	r0, r5, #-2147483648	; 0x80000000
   18ae8:	cmp	r0, #0
   18aec:	movle	r0, #0
   18af0:	movgt	r0, #1
   18af4:	b	18974 <__assert_fail@plt+0x7370>
   18af8:	cmn	r5, #1
   18afc:	beq	18b1c <__assert_fail@plt+0x7518>
   18b00:	mov	r1, r5
   18b04:	mov	r0, #-2147483648	; 0x80000000
   18b08:	bl	19ccc <__assert_fail@plt+0x86c8>
   18b0c:	cmp	r6, r0
   18b10:	movle	r0, #0
   18b14:	movgt	r0, #1
   18b18:	b	18974 <__assert_fail@plt+0x7370>
   18b1c:	add	r0, r6, #-2147483648	; 0x80000000
   18b20:	cmp	r0, #0
   18b24:	movle	r0, #0
   18b28:	movgt	r0, #1
   18b2c:	b	18974 <__assert_fail@plt+0x7370>
   18b30:	bl	18c0c <__assert_fail@plt+0x7608>
   18b34:	push	{r4, lr}
   18b38:	bl	18ccc <__assert_fail@plt+0x76c8>
   18b3c:	cmp	r0, #0
   18b40:	popne	{r4, pc}
   18b44:	bl	18c0c <__assert_fail@plt+0x7608>
   18b48:	push	{r4, lr}
   18b4c:	mov	r1, #1
   18b50:	bl	18b34 <__assert_fail@plt+0x7530>
   18b54:	pop	{r4, pc}
   18b58:	push	{r4, lr}
   18b5c:	bl	18ccc <__assert_fail@plt+0x76c8>
   18b60:	cmp	r0, #0
   18b64:	popne	{r4, pc}
   18b68:	bl	18c0c <__assert_fail@plt+0x7608>
   18b6c:	push	{r4, lr}
   18b70:	mov	r1, #1
   18b74:	bl	18b58 <__assert_fail@plt+0x7554>
   18b78:	pop	{r4, pc}
   18b7c:	push	{r4, r5, r6, lr}
   18b80:	mov	r5, r0
   18b84:	mov	r4, r1
   18b88:	mov	r0, r1
   18b8c:	bl	18668 <__assert_fail@plt+0x7064>
   18b90:	mov	r2, r4
   18b94:	mov	r1, r5
   18b98:	bl	112b0 <memcpy@plt>
   18b9c:	pop	{r4, r5, r6, pc}
   18ba0:	push	{r4, r5, r6, lr}
   18ba4:	mov	r5, r0
   18ba8:	mov	r4, r1
   18bac:	mov	r0, r1
   18bb0:	bl	1867c <__assert_fail@plt+0x7078>
   18bb4:	mov	r2, r4
   18bb8:	mov	r1, r5
   18bbc:	bl	112b0 <memcpy@plt>
   18bc0:	pop	{r4, r5, r6, pc}
   18bc4:	push	{r4, r5, r6, lr}
   18bc8:	mov	r5, r0
   18bcc:	mov	r4, r1
   18bd0:	add	r0, r1, #1
   18bd4:	bl	1867c <__assert_fail@plt+0x7078>
   18bd8:	mov	r2, #0
   18bdc:	strb	r2, [r0, r4]
   18be0:	mov	r2, r4
   18be4:	mov	r1, r5
   18be8:	bl	112b0 <memcpy@plt>
   18bec:	pop	{r4, r5, r6, pc}
   18bf0:	push	{r4, lr}
   18bf4:	mov	r4, r0
   18bf8:	bl	11460 <strlen@plt>
   18bfc:	add	r1, r0, #1
   18c00:	mov	r0, r4
   18c04:	bl	18b7c <__assert_fail@plt+0x7578>
   18c08:	pop	{r4, pc}
   18c0c:	push	{r4, lr}
   18c10:	ldr	r3, [pc, #40]	; 18c40 <__assert_fail@plt+0x763c>
   18c14:	ldr	r4, [r3]
   18c18:	mov	r2, #5
   18c1c:	ldr	r1, [pc, #32]	; 18c44 <__assert_fail@plt+0x7640>
   18c20:	mov	r0, #0
   18c24:	bl	112f8 <dcgettext@plt>
   18c28:	mov	r3, r0
   18c2c:	ldr	r2, [pc, #20]	; 18c48 <__assert_fail@plt+0x7644>
   18c30:	mov	r1, #0
   18c34:	mov	r0, r4
   18c38:	bl	113ac <error@plt>
   18c3c:	bl	115c8 <abort@plt>
   18c40:	andeq	ip, r2, r8, ror #2
   18c44:	andeq	fp, r1, r0, lsr r4
   18c48:	andeq	sl, r1, r4, ror #30
   18c4c:	push	{r4, lr}
   18c50:	orr	r1, r1, #512	; 0x200
   18c54:	bl	13f84 <__assert_fail@plt+0x2980>
   18c58:	cmp	r0, #0
   18c5c:	popne	{r4, pc}
   18c60:	bl	11484 <__errno_location@plt>
   18c64:	ldr	r3, [r0]
   18c68:	cmp	r3, #22
   18c6c:	beq	18c74 <__assert_fail@plt+0x7670>
   18c70:	bl	18c0c <__assert_fail@plt+0x7608>
   18c74:	ldr	r3, [pc, #12]	; 18c88 <__assert_fail@plt+0x7684>
   18c78:	mov	r2, #41	; 0x29
   18c7c:	ldr	r1, [pc, #8]	; 18c8c <__assert_fail@plt+0x7688>
   18c80:	ldr	r0, [pc, #8]	; 18c90 <__assert_fail@plt+0x768c>
   18c84:	bl	11604 <__assert_fail@plt>
   18c88:	andeq	fp, r1, r4, asr #8
   18c8c:	andeq	fp, r1, r0, asr r4
   18c90:	andeq	fp, r1, ip, asr r4
   18c94:	ldr	r3, [r0, #48]	; 0x30
   18c98:	and	r3, r3, #17
   18c9c:	cmp	r3, #16
   18ca0:	beq	18cc4 <__assert_fail@plt+0x76c0>
   18ca4:	cmp	r3, #17
   18ca8:	beq	18cb4 <__assert_fail@plt+0x76b0>
   18cac:	mov	r0, #0
   18cb0:	bx	lr
   18cb4:	ldr	r0, [r1, #48]	; 0x30
   18cb8:	adds	r0, r0, #0
   18cbc:	movne	r0, #1
   18cc0:	bx	lr
   18cc4:	mov	r0, #1
   18cc8:	bx	lr
   18ccc:	push	{r4, lr}
   18cd0:	mov	r2, r0
   18cd4:	mov	r3, r1
   18cd8:	cmp	r1, #0
   18cdc:	cmpne	r0, #0
   18ce0:	moveq	r3, #1
   18ce4:	moveq	r2, r3
   18ce8:	umull	r0, r1, r2, r3
   18cec:	cmp	r0, #0
   18cf0:	cmpge	r1, #0
   18cf4:	bne	18d08 <__assert_fail@plt+0x7704>
   18cf8:	mov	r1, r3
   18cfc:	mov	r0, r2
   18d00:	bl	11238 <calloc@plt>
   18d04:	pop	{r4, pc}
   18d08:	bl	11484 <__errno_location@plt>
   18d0c:	mov	r3, #12
   18d10:	str	r3, [r0]
   18d14:	mov	r0, #0
   18d18:	pop	{r4, pc}
   18d1c:	push	{r4, lr}
   18d20:	cmp	r0, #0
   18d24:	moveq	r0, #1
   18d28:	cmp	r0, #0
   18d2c:	blt	18d38 <__assert_fail@plt+0x7734>
   18d30:	bl	113dc <malloc@plt>
   18d34:	pop	{r4, pc}
   18d38:	bl	11484 <__errno_location@plt>
   18d3c:	mov	r3, #12
   18d40:	str	r3, [r0]
   18d44:	mov	r0, #0
   18d48:	pop	{r4, pc}
   18d4c:	push	{r4, lr}
   18d50:	cmp	r0, #0
   18d54:	beq	18d70 <__assert_fail@plt+0x776c>
   18d58:	cmp	r1, #0
   18d5c:	beq	18d7c <__assert_fail@plt+0x7778>
   18d60:	cmp	r1, #0
   18d64:	blt	18d88 <__assert_fail@plt+0x7784>
   18d68:	bl	11310 <realloc@plt>
   18d6c:	pop	{r4, pc}
   18d70:	mov	r0, r1
   18d74:	bl	18d1c <__assert_fail@plt+0x7718>
   18d78:	pop	{r4, pc}
   18d7c:	bl	193bc <__assert_fail@plt+0x7db8>
   18d80:	mov	r0, #0
   18d84:	pop	{r4, pc}
   18d88:	bl	11484 <__errno_location@plt>
   18d8c:	mov	r3, #12
   18d90:	str	r3, [r0]
   18d94:	mov	r0, #0
   18d98:	pop	{r4, pc}
   18d9c:	push	{r4, r5, r6, r7, lr}
   18da0:	sub	sp, sp, #44	; 0x2c
   18da4:	mov	r4, r0
   18da8:	ldrb	r3, [r2]
   18dac:	cmp	r3, #0
   18db0:	strbeq	r3, [r0]
   18db4:	beq	18e2c <__assert_fail@plt+0x7828>
   18db8:	mov	r6, r1
   18dbc:	mov	r5, r2
   18dc0:	ldr	r3, [pc, #224]	; 18ea8 <__assert_fail@plt+0x78a4>
   18dc4:	ldr	r3, [r3]
   18dc8:	cmp	r3, #0
   18dcc:	beq	18e34 <__assert_fail@plt+0x7830>
   18dd0:	ldr	r3, [pc, #208]	; 18ea8 <__assert_fail@plt+0x78a4>
   18dd4:	ldr	r3, [r3]
   18dd8:	cmp	r3, #0
   18ddc:	movlt	r0, #0
   18de0:	blt	18e2c <__assert_fail@plt+0x7828>
   18de4:	mov	r0, r5
   18de8:	bl	11460 <strlen@plt>
   18dec:	add	r0, r0, #27
   18df0:	cmp	r0, #4032	; 0xfc0
   18df4:	bls	18e04 <__assert_fail@plt+0x7800>
   18df8:	bl	18d1c <__assert_fail@plt+0x7718>
   18dfc:	subs	r4, r0, #0
   18e00:	beq	18ea0 <__assert_fail@plt+0x789c>
   18e04:	str	r6, [sp]
   18e08:	ldr	r3, [pc, #156]	; 18eac <__assert_fail@plt+0x78a8>
   18e0c:	mvn	r2, #0
   18e10:	mov	r1, #1
   18e14:	mov	r0, r4
   18e18:	bl	11490 <__sprintf_chk@plt>
   18e1c:	mov	r1, r5
   18e20:	add	r0, r4, r0
   18e24:	bl	11388 <strcpy@plt>
   18e28:	mov	r0, r4
   18e2c:	add	sp, sp, #44	; 0x2c
   18e30:	pop	{r4, r5, r6, r7, pc}
   18e34:	ldr	r1, [pc, #116]	; 18eb0 <__assert_fail@plt+0x78ac>
   18e38:	ldr	r0, [pc, #116]	; 18eb4 <__assert_fail@plt+0x78b0>
   18e3c:	bl	113c4 <open64@plt>
   18e40:	subs	r7, r0, #0
   18e44:	blt	18e8c <__assert_fail@plt+0x7888>
   18e48:	str	r7, [sp]
   18e4c:	ldr	r3, [pc, #100]	; 18eb8 <__assert_fail@plt+0x78b4>
   18e50:	mov	r2, #32
   18e54:	mov	r1, #1
   18e58:	add	r0, sp, #8
   18e5c:	bl	11490 <__sprintf_chk@plt>
   18e60:	mov	r1, #0
   18e64:	add	r0, sp, #8
   18e68:	bl	114f0 <access@plt>
   18e6c:	cmp	r0, #0
   18e70:	mvnne	r2, #0
   18e74:	moveq	r2, #1
   18e78:	ldr	r3, [pc, #40]	; 18ea8 <__assert_fail@plt+0x78a4>
   18e7c:	str	r2, [r3]
   18e80:	mov	r0, r7
   18e84:	bl	115d4 <close@plt>
   18e88:	b	18dd0 <__assert_fail@plt+0x77cc>
   18e8c:	mvn	r2, #0
   18e90:	ldr	r3, [pc, #16]	; 18ea8 <__assert_fail@plt+0x78a4>
   18e94:	str	r2, [r3]
   18e98:	mov	r0, #0
   18e9c:	b	18e2c <__assert_fail@plt+0x7828>
   18ea0:	mov	r0, r4
   18ea4:	b	18e2c <__assert_fail@plt+0x7828>
   18ea8:	andeq	ip, r2, r0, asr #6
   18eac:	muleq	r1, r4, r4
   18eb0:	andeq	r4, r8, r0, lsl #18
   18eb4:	andeq	fp, r1, ip, ror #8
   18eb8:	andeq	fp, r1, ip, ror r4
   18ebc:	push	{r4, r5, r6, lr}
   18ec0:	mov	r5, r0
   18ec4:	bl	11394 <__fpending@plt>
   18ec8:	mov	r6, r0
   18ecc:	ldr	r4, [r5]
   18ed0:	and	r4, r4, #32
   18ed4:	mov	r0, r5
   18ed8:	bl	1901c <__assert_fail@plt+0x7a18>
   18edc:	cmp	r4, #0
   18ee0:	bne	18f08 <__assert_fail@plt+0x7904>
   18ee4:	cmp	r0, #0
   18ee8:	popeq	{r4, r5, r6, pc}
   18eec:	cmp	r6, #0
   18ef0:	bne	18f24 <__assert_fail@plt+0x7920>
   18ef4:	bl	11484 <__errno_location@plt>
   18ef8:	ldr	r0, [r0]
   18efc:	subs	r0, r0, #9
   18f00:	mvnne	r0, #0
   18f04:	pop	{r4, r5, r6, pc}
   18f08:	cmp	r0, #0
   18f0c:	bne	18f2c <__assert_fail@plt+0x7928>
   18f10:	bl	11484 <__errno_location@plt>
   18f14:	mov	r3, #0
   18f18:	str	r3, [r0]
   18f1c:	mvn	r0, #0
   18f20:	pop	{r4, r5, r6, pc}
   18f24:	mvn	r0, #0
   18f28:	pop	{r4, r5, r6, pc}
   18f2c:	mvn	r0, #0
   18f30:	pop	{r4, r5, r6, pc}
   18f34:	mov	r2, #0
   18f38:	mov	r3, #0
   18f3c:	strd	r2, [r0, #16]
   18f40:	ldr	r3, [pc, #4]	; 18f4c <__assert_fail@plt+0x7948>
   18f44:	str	r3, [r0, #24]
   18f48:	bx	lr
   18f4c:	addseq	pc, r5, r6, lsl r6	; <UNPREDICTABLE>
   18f50:	push	{r4, r5, r6, r7, r8, lr}
   18f54:	ldr	r2, [r0, #24]
   18f58:	ldr	r3, [pc, #172]	; 1900c <__assert_fail@plt+0x7a08>
   18f5c:	cmp	r2, r3
   18f60:	bne	18fa8 <__assert_fail@plt+0x79a4>
   18f64:	ldrd	r6, [r0, #16]
   18f68:	orrs	r3, r6, r7
   18f6c:	beq	18fe8 <__assert_fail@plt+0x79e4>
   18f70:	ldrd	r4, [r1, #96]	; 0x60
   18f74:	ldrd	r2, [r0]
   18f78:	cmp	r5, r3
   18f7c:	cmpeq	r4, r2
   18f80:	beq	18fbc <__assert_fail@plt+0x79b8>
   18f84:	adds	r2, r6, #1
   18f88:	adc	r3, r7, #0
   18f8c:	strd	r2, [r0, #16]
   18f90:	and	r6, r6, r2
   18f94:	and	r7, r7, r3
   18f98:	orrs	ip, r6, r7
   18f9c:	beq	18fd8 <__assert_fail@plt+0x79d4>
   18fa0:	mov	r0, #0
   18fa4:	pop	{r4, r5, r6, r7, r8, pc}
   18fa8:	ldr	r3, [pc, #96]	; 19010 <__assert_fail@plt+0x7a0c>
   18fac:	mov	r2, #60	; 0x3c
   18fb0:	ldr	r1, [pc, #92]	; 19014 <__assert_fail@plt+0x7a10>
   18fb4:	ldr	r0, [pc, #92]	; 19018 <__assert_fail@plt+0x7a14>
   18fb8:	bl	11604 <__assert_fail@plt>
   18fbc:	ldrd	r4, [r1]
   18fc0:	ldrd	r2, [r0, #8]
   18fc4:	cmp	r5, r3
   18fc8:	cmpeq	r4, r2
   18fcc:	bne	18f84 <__assert_fail@plt+0x7980>
   18fd0:	mov	r0, #1
   18fd4:	pop	{r4, r5, r6, r7, r8, pc}
   18fd8:	orrs	r3, r2, r3
   18fdc:	bne	18ff4 <__assert_fail@plt+0x79f0>
   18fe0:	mov	r0, #1
   18fe4:	pop	{r4, r5, r6, r7, r8, pc}
   18fe8:	mov	r2, #1
   18fec:	mov	r3, #0
   18ff0:	strd	r2, [r0, #16]
   18ff4:	ldrd	r2, [r1]
   18ff8:	strd	r2, [r0, #8]
   18ffc:	ldrd	r2, [r1, #96]	; 0x60
   19000:	strd	r2, [r0]
   19004:	mov	r0, #0
   19008:	pop	{r4, r5, r6, r7, r8, pc}
   1900c:	addseq	pc, r5, r6, lsl r6	; <UNPREDICTABLE>
   19010:	andeq	fp, r1, r8, lsr #9
   19014:			; <UNDEFINED> instruction: 0x0001b4b4
   19018:	andeq	fp, r1, r8, asr #9
   1901c:	push	{r4, r5, r6, lr}
   19020:	sub	sp, sp, #8
   19024:	mov	r4, r0
   19028:	bl	114c0 <fileno@plt>
   1902c:	cmp	r0, #0
   19030:	blt	190a8 <__assert_fail@plt+0x7aa4>
   19034:	mov	r0, r4
   19038:	bl	113f4 <__freading@plt>
   1903c:	cmp	r0, #0
   19040:	beq	19074 <__assert_fail@plt+0x7a70>
   19044:	mov	r0, r4
   19048:	bl	114c0 <fileno@plt>
   1904c:	mov	r3, #1
   19050:	str	r3, [sp]
   19054:	mov	r2, #0
   19058:	mov	r3, #0
   1905c:	bl	11370 <lseek64@plt>
   19060:	mvn	r2, #0
   19064:	mvn	r3, #0
   19068:	cmp	r1, r3
   1906c:	cmpeq	r0, r2
   19070:	beq	190b4 <__assert_fail@plt+0x7ab0>
   19074:	mov	r0, r4
   19078:	bl	19358 <__assert_fail@plt+0x7d54>
   1907c:	cmp	r0, #0
   19080:	beq	190b4 <__assert_fail@plt+0x7ab0>
   19084:	bl	11484 <__errno_location@plt>
   19088:	mov	r5, r0
   1908c:	ldr	r6, [r0]
   19090:	mov	r0, r4
   19094:	bl	114fc <fclose@plt>
   19098:	cmp	r6, #0
   1909c:	strne	r6, [r5]
   190a0:	mvnne	r0, #0
   190a4:	b	190bc <__assert_fail@plt+0x7ab8>
   190a8:	mov	r0, r4
   190ac:	bl	114fc <fclose@plt>
   190b0:	b	190bc <__assert_fail@plt+0x7ab8>
   190b4:	mov	r0, r4
   190b8:	bl	114fc <fclose@plt>
   190bc:	add	sp, sp, #8
   190c0:	pop	{r4, r5, r6, pc}
   190c4:	push	{r1, r2, r3}
   190c8:	push	{r4, r5, r6, lr}
   190cc:	sub	sp, sp, #12
   190d0:	mov	r5, r0
   190d4:	ldr	r1, [sp, #28]
   190d8:	add	r3, sp, #32
   190dc:	str	r3, [sp, #4]
   190e0:	cmp	r1, #0
   190e4:	beq	1912c <__assert_fail@plt+0x7b28>
   190e8:	ldr	r3, [pc, #540]	; 1930c <__assert_fail@plt+0x7d08>
   190ec:	cmp	r1, r3
   190f0:	beq	1915c <__assert_fail@plt+0x7b58>
   190f4:	cmp	r1, #11
   190f8:	beq	192fc <__assert_fail@plt+0x7cf8>
   190fc:	bgt	19288 <__assert_fail@plt+0x7c84>
   19100:	cmp	r1, #3
   19104:	beq	192fc <__assert_fail@plt+0x7cf8>
   19108:	ble	19248 <__assert_fail@plt+0x7c44>
   1910c:	cmp	r1, #8
   19110:	beq	19268 <__assert_fail@plt+0x7c64>
   19114:	ble	19260 <__assert_fail@plt+0x7c5c>
   19118:	cmp	r1, #9
   1911c:	beq	192fc <__assert_fail@plt+0x7cf8>
   19120:	cmp	r1, #10
   19124:	bne	192c0 <__assert_fail@plt+0x7cbc>
   19128:	b	19268 <__assert_fail@plt+0x7c64>
   1912c:	ldr	r3, [sp, #4]
   19130:	add	r2, r3, #4
   19134:	str	r2, [sp, #4]
   19138:	ldr	r2, [r3]
   1913c:	mov	r1, #0
   19140:	bl	11514 <fcntl64@plt>
   19144:	mov	r4, r0
   19148:	mov	r0, r4
   1914c:	add	sp, sp, #12
   19150:	pop	{r4, r5, r6, lr}
   19154:	add	sp, sp, #12
   19158:	bx	lr
   1915c:	ldr	r3, [sp, #4]
   19160:	add	r2, r3, #4
   19164:	str	r2, [sp, #4]
   19168:	ldr	r6, [r3]
   1916c:	ldr	r3, [pc, #412]	; 19310 <__assert_fail@plt+0x7d0c>
   19170:	ldr	r3, [r3]
   19174:	cmp	r3, #0
   19178:	blt	191d8 <__assert_fail@plt+0x7bd4>
   1917c:	mov	r2, r6
   19180:	ldr	r1, [pc, #388]	; 1930c <__assert_fail@plt+0x7d08>
   19184:	bl	11514 <fcntl64@plt>
   19188:	subs	r4, r0, #0
   1918c:	blt	191a0 <__assert_fail@plt+0x7b9c>
   19190:	mov	r2, #1
   19194:	ldr	r3, [pc, #372]	; 19310 <__assert_fail@plt+0x7d0c>
   19198:	str	r2, [r3]
   1919c:	b	19148 <__assert_fail@plt+0x7b44>
   191a0:	bl	11484 <__errno_location@plt>
   191a4:	ldr	r3, [r0]
   191a8:	cmp	r3, #22
   191ac:	bne	19190 <__assert_fail@plt+0x7b8c>
   191b0:	mov	r2, r6
   191b4:	mov	r1, #0
   191b8:	mov	r0, r5
   191bc:	bl	11514 <fcntl64@plt>
   191c0:	subs	r4, r0, #0
   191c4:	blt	19148 <__assert_fail@plt+0x7b44>
   191c8:	mvn	r2, #0
   191cc:	ldr	r3, [pc, #316]	; 19310 <__assert_fail@plt+0x7d0c>
   191d0:	str	r2, [r3]
   191d4:	b	191fc <__assert_fail@plt+0x7bf8>
   191d8:	mov	r2, r6
   191dc:	mov	r1, #0
   191e0:	bl	11514 <fcntl64@plt>
   191e4:	subs	r4, r0, #0
   191e8:	blt	19148 <__assert_fail@plt+0x7b44>
   191ec:	ldr	r3, [pc, #284]	; 19310 <__assert_fail@plt+0x7d0c>
   191f0:	ldr	r3, [r3]
   191f4:	cmn	r3, #1
   191f8:	bne	19148 <__assert_fail@plt+0x7b44>
   191fc:	mov	r1, #1
   19200:	mov	r0, r4
   19204:	bl	11514 <fcntl64@plt>
   19208:	subs	r2, r0, #0
   1920c:	blt	19228 <__assert_fail@plt+0x7c24>
   19210:	orr	r2, r2, #1
   19214:	mov	r1, #2
   19218:	mov	r0, r4
   1921c:	bl	11514 <fcntl64@plt>
   19220:	cmn	r0, #1
   19224:	bne	19148 <__assert_fail@plt+0x7b44>
   19228:	bl	11484 <__errno_location@plt>
   1922c:	mov	r5, r0
   19230:	ldr	r6, [r0]
   19234:	mov	r0, r4
   19238:	bl	115d4 <close@plt>
   1923c:	str	r6, [r5]
   19240:	mvn	r4, #0
   19244:	b	19148 <__assert_fail@plt+0x7b44>
   19248:	cmp	r1, #1
   1924c:	beq	192fc <__assert_fail@plt+0x7cf8>
   19250:	bgt	19268 <__assert_fail@plt+0x7c64>
   19254:	cmp	r1, #0
   19258:	bne	192c0 <__assert_fail@plt+0x7cbc>
   1925c:	b	19268 <__assert_fail@plt+0x7c64>
   19260:	cmp	r1, #4
   19264:	bne	192c0 <__assert_fail@plt+0x7cbc>
   19268:	ldr	r3, [sp, #4]
   1926c:	add	r2, r3, #4
   19270:	str	r2, [sp, #4]
   19274:	ldr	r2, [r3]
   19278:	mov	r0, r5
   1927c:	bl	11514 <fcntl64@plt>
   19280:	mov	r4, r0
   19284:	b	19148 <__assert_fail@plt+0x7b44>
   19288:	ldr	r3, [pc, #132]	; 19314 <__assert_fail@plt+0x7d10>
   1928c:	cmp	r1, r3
   19290:	bgt	192e0 <__assert_fail@plt+0x7cdc>
   19294:	sub	r3, r3, #1
   19298:	cmp	r1, r3
   1929c:	bge	19268 <__assert_fail@plt+0x7c64>
   192a0:	sub	r3, r3, #5
   192a4:	cmp	r1, r3
   192a8:	beq	192fc <__assert_fail@plt+0x7cf8>
   192ac:	add	r3, r3, #1
   192b0:	cmp	r1, r3
   192b4:	beq	19268 <__assert_fail@plt+0x7c64>
   192b8:	cmp	r1, #1024	; 0x400
   192bc:	beq	19268 <__assert_fail@plt+0x7c64>
   192c0:	ldr	r3, [sp, #4]
   192c4:	add	r2, r3, #4
   192c8:	str	r2, [sp, #4]
   192cc:	ldr	r2, [r3]
   192d0:	mov	r0, r5
   192d4:	bl	11514 <fcntl64@plt>
   192d8:	mov	r4, r0
   192dc:	b	19148 <__assert_fail@plt+0x7b44>
   192e0:	ldr	r3, [pc, #48]	; 19318 <__assert_fail@plt+0x7d14>
   192e4:	cmp	r1, r3
   192e8:	beq	19268 <__assert_fail@plt+0x7c64>
   192ec:	blt	192fc <__assert_fail@plt+0x7cf8>
   192f0:	add	r3, r3, #1
   192f4:	cmp	r1, r3
   192f8:	bne	192c0 <__assert_fail@plt+0x7cbc>
   192fc:	mov	r0, r5
   19300:	bl	11514 <fcntl64@plt>
   19304:	mov	r4, r0
   19308:	b	19148 <__assert_fail@plt+0x7b44>
   1930c:	andeq	r0, r0, r6, lsl #8
   19310:	andeq	ip, r2, r4, asr #6
   19314:	andeq	r0, r0, r7, lsl #8
   19318:	andeq	r0, r0, r9, lsl #8
   1931c:	push	{r1, r2, r3}
   19320:	push	{lr}		; (str lr, [sp, #-4]!)
   19324:	sub	sp, sp, #8
   19328:	ldr	r1, [sp, #12]
   1932c:	tst	r1, #64	; 0x40
   19330:	addne	r3, sp, #20
   19334:	strne	r3, [sp, #4]
   19338:	ldrne	r2, [sp, #16]
   1933c:	moveq	r2, #0
   19340:	bl	113c4 <open64@plt>
   19344:	bl	180a4 <__assert_fail@plt+0x6aa0>
   19348:	add	sp, sp, #8
   1934c:	pop	{lr}		; (ldr lr, [sp], #4)
   19350:	add	sp, sp, #12
   19354:	bx	lr
   19358:	push	{r4, lr}
   1935c:	sub	sp, sp, #8
   19360:	subs	r4, r0, #0
   19364:	beq	19378 <__assert_fail@plt+0x7d74>
   19368:	mov	r0, r4
   1936c:	bl	113f4 <__freading@plt>
   19370:	cmp	r0, #0
   19374:	bne	19388 <__assert_fail@plt+0x7d84>
   19378:	mov	r0, r4
   1937c:	bl	11274 <fflush@plt>
   19380:	add	sp, sp, #8
   19384:	pop	{r4, pc}
   19388:	ldr	r3, [r4]
   1938c:	tst	r3, #256	; 0x100
   19390:	bne	193a0 <__assert_fail@plt+0x7d9c>
   19394:	mov	r0, r4
   19398:	bl	11274 <fflush@plt>
   1939c:	b	19380 <__assert_fail@plt+0x7d7c>
   193a0:	mov	r3, #1
   193a4:	str	r3, [sp]
   193a8:	mov	r2, #0
   193ac:	mov	r3, #0
   193b0:	mov	r0, r4
   193b4:	bl	19414 <__assert_fail@plt+0x7e10>
   193b8:	b	19394 <__assert_fail@plt+0x7d90>
   193bc:	push	{r4, r5, lr}
   193c0:	sub	sp, sp, #12
   193c4:	mov	r5, r0
   193c8:	bl	11484 <__errno_location@plt>
   193cc:	mov	r4, r0
   193d0:	ldr	r3, [r0]
   193d4:	str	r3, [sp]
   193d8:	str	r3, [sp, #4]
   193dc:	mov	r3, #0
   193e0:	str	r3, [r0]
   193e4:	mov	r0, r5
   193e8:	bl	11298 <free@plt>
   193ec:	ldr	r3, [r4]
   193f0:	cmp	r3, #0
   193f4:	moveq	r3, #4
   193f8:	movne	r3, #0
   193fc:	add	r2, sp, #8
   19400:	add	r3, r2, r3
   19404:	ldr	r3, [r3, #-8]
   19408:	str	r3, [r4]
   1940c:	add	sp, sp, #12
   19410:	pop	{r4, r5, pc}
   19414:	push	{r4, r5, r6, r7, lr}
   19418:	sub	sp, sp, #12
   1941c:	mov	r4, r0
   19420:	mov	r6, r2
   19424:	mov	r7, r3
   19428:	ldr	r5, [sp, #32]
   1942c:	ldr	r2, [r0, #8]
   19430:	ldr	r3, [r0, #4]
   19434:	cmp	r2, r3
   19438:	beq	19458 <__assert_fail@plt+0x7e54>
   1943c:	str	r5, [sp]
   19440:	mov	r2, r6
   19444:	mov	r3, r7
   19448:	mov	r0, r4
   1944c:	bl	11508 <fseeko64@plt>
   19450:	add	sp, sp, #12
   19454:	pop	{r4, r5, r6, r7, pc}
   19458:	ldr	r2, [r0, #20]
   1945c:	ldr	r3, [r0, #16]
   19460:	cmp	r2, r3
   19464:	bne	1943c <__assert_fail@plt+0x7e38>
   19468:	ldr	r3, [r0, #36]	; 0x24
   1946c:	cmp	r3, #0
   19470:	bne	1943c <__assert_fail@plt+0x7e38>
   19474:	bl	114c0 <fileno@plt>
   19478:	str	r5, [sp]
   1947c:	mov	r2, r6
   19480:	mov	r3, r7
   19484:	bl	11370 <lseek64@plt>
   19488:	mvn	r2, #0
   1948c:	mvn	r3, #0
   19490:	cmp	r1, r3
   19494:	cmpeq	r0, r2
   19498:	beq	194b4 <__assert_fail@plt+0x7eb0>
   1949c:	ldr	r3, [r4]
   194a0:	bic	r3, r3, #16
   194a4:	str	r3, [r4]
   194a8:	strd	r0, [r4, #80]	; 0x50
   194ac:	mov	r0, #0
   194b0:	b	19450 <__assert_fail@plt+0x7e4c>
   194b4:	mvn	r0, #0
   194b8:	b	19450 <__assert_fail@plt+0x7e4c>
   194bc:	push	{r4, lr}
   194c0:	mov	r0, #14
   194c4:	bl	11538 <nl_langinfo@plt>
   194c8:	cmp	r0, #0
   194cc:	beq	194e4 <__assert_fail@plt+0x7ee0>
   194d0:	ldrb	r2, [r0]
   194d4:	ldr	r3, [pc, #16]	; 194ec <__assert_fail@plt+0x7ee8>
   194d8:	cmp	r2, #0
   194dc:	moveq	r0, r3
   194e0:	pop	{r4, pc}
   194e4:	ldr	r0, [pc]	; 194ec <__assert_fail@plt+0x7ee8>
   194e8:	pop	{r4, pc}
   194ec:	andeq	fp, r1, r0, ror #9
   194f0:	push	{r4, r5, r6, r7, lr}
   194f4:	sub	sp, sp, #12
   194f8:	mov	r7, r1
   194fc:	mov	r5, r2
   19500:	subs	r6, r0, #0
   19504:	addeq	r6, sp, #4
   19508:	mov	r0, r6
   1950c:	bl	113a0 <mbrtowc@plt>
   19510:	mov	r4, r0
   19514:	cmp	r5, #0
   19518:	cmnne	r0, #3
   1951c:	bhi	1952c <__assert_fail@plt+0x7f28>
   19520:	mov	r0, r4
   19524:	add	sp, sp, #12
   19528:	pop	{r4, r5, r6, r7, pc}
   1952c:	mov	r0, #0
   19530:	bl	199b8 <__assert_fail@plt+0x83b4>
   19534:	cmp	r0, #0
   19538:	ldrbeq	r3, [r7]
   1953c:	streq	r3, [r6]
   19540:	moveq	r4, #1
   19544:	b	19520 <__assert_fail@plt+0x7f1c>
   19548:	push	{r4, lr}
   1954c:	mov	r5, r0
   19550:	ldr	r3, [pc, #36]	; 1957c <__assert_fail@plt+0x7f78>
   19554:	ldr	r4, [r3]
   19558:	mov	r2, #5
   1955c:	ldr	r1, [pc, #28]	; 19580 <__assert_fail@plt+0x7f7c>
   19560:	mov	r0, #0
   19564:	bl	112f8 <dcgettext@plt>
   19568:	mov	r2, r0
   1956c:	mov	r1, r5
   19570:	mov	r0, r4
   19574:	bl	113ac <error@plt>
   19578:	bl	115c8 <abort@plt>
   1957c:	andeq	ip, r2, r8, ror #2
   19580:	andeq	fp, r1, r8, ror #9
   19584:	push	{r4, lr}
   19588:	mov	r5, r0
   1958c:	ldr	r3, [pc, #36]	; 195b8 <__assert_fail@plt+0x7fb4>
   19590:	ldr	r4, [r3]
   19594:	mov	r2, #5
   19598:	ldr	r1, [pc, #28]	; 195bc <__assert_fail@plt+0x7fb8>
   1959c:	mov	r0, #0
   195a0:	bl	112f8 <dcgettext@plt>
   195a4:	mov	r2, r0
   195a8:	mov	r1, r5
   195ac:	mov	r0, r4
   195b0:	bl	113ac <error@plt>
   195b4:	bl	115c8 <abort@plt>
   195b8:	andeq	ip, r2, r8, ror #2
   195bc:	andeq	fp, r1, r4, lsl r5
   195c0:	push	{r4, r5, r6, lr}
   195c4:	mov	r6, r0
   195c8:	mov	r5, r1
   195cc:	subs	r4, r2, #0
   195d0:	beq	195fc <__assert_fail@plt+0x7ff8>
   195d4:	mov	r1, r4
   195d8:	mvn	r0, #0
   195dc:	bl	19ac0 <__assert_fail@plt+0x84bc>
   195e0:	cmp	r0, r5
   195e4:	bcs	195fc <__assert_fail@plt+0x7ff8>
   195e8:	bl	11484 <__errno_location@plt>
   195ec:	mov	r3, #12
   195f0:	str	r3, [r0]
   195f4:	mov	r0, #0
   195f8:	pop	{r4, r5, r6, pc}
   195fc:	mul	r1, r5, r4
   19600:	mov	r0, r6
   19604:	bl	18d4c <__assert_fail@plt+0x7748>
   19608:	pop	{r4, r5, r6, pc}
   1960c:	push	{r4, lr}
   19610:	mov	r4, r0
   19614:	mov	r3, #0
   19618:	str	r3, [r0, #4]
   1961c:	mov	r1, #524288	; 0x80000
   19620:	ldr	r0, [pc, #52]	; 1965c <__assert_fail@plt+0x8058>
   19624:	bl	1931c <__assert_fail@plt+0x7d18>
   19628:	str	r0, [r4]
   1962c:	cmp	r0, #0
   19630:	blt	1963c <__assert_fail@plt+0x8038>
   19634:	mov	r0, #0
   19638:	pop	{r4, pc}
   1963c:	mov	r1, #0
   19640:	mov	r0, r1
   19644:	bl	11430 <getcwd@plt>
   19648:	str	r0, [r4, #4]
   1964c:	cmp	r0, #0
   19650:	movne	r0, #0
   19654:	mvneq	r0, #0
   19658:	pop	{r4, pc}
   1965c:	andeq	sl, r1, ip, ror #30
   19660:	push	{r4, lr}
   19664:	ldr	r3, [r0]
   19668:	cmp	r3, #0
   1966c:	blt	1967c <__assert_fail@plt+0x8078>
   19670:	mov	r0, r3
   19674:	bl	11568 <fchdir@plt>
   19678:	pop	{r4, pc}
   1967c:	ldr	r0, [r0, #4]
   19680:	bl	19734 <__assert_fail@plt+0x8130>
   19684:	pop	{r4, pc}
   19688:	push	{r4, lr}
   1968c:	mov	r4, r0
   19690:	ldr	r0, [r0]
   19694:	cmp	r0, #0
   19698:	blt	196a0 <__assert_fail@plt+0x809c>
   1969c:	bl	115d4 <close@plt>
   196a0:	ldr	r0, [r4, #4]
   196a4:	bl	193bc <__assert_fail@plt+0x7db8>
   196a8:	pop	{r4, pc}
   196ac:	push	{r4, lr}
   196b0:	mov	r2, #3
   196b4:	mov	r1, #0
   196b8:	bl	190c4 <__assert_fail@plt+0x7ac0>
   196bc:	pop	{r4, pc}
   196c0:	ldr	r0, [r0]
   196c4:	cmp	r0, #0
   196c8:	bxlt	lr
   196cc:	push	{r4, lr}
   196d0:	bl	115d4 <close@plt>
   196d4:	cmp	r0, #0
   196d8:	popeq	{r4, pc}
   196dc:	ldr	r3, [pc, #12]	; 196f0 <__assert_fail@plt+0x80ec>
   196e0:	mov	r2, #64	; 0x40
   196e4:	ldr	r1, [pc, #8]	; 196f4 <__assert_fail@plt+0x80f0>
   196e8:	ldr	r0, [pc, #8]	; 196f8 <__assert_fail@plt+0x80f4>
   196ec:	bl	11604 <__assert_fail@plt>
   196f0:	andeq	fp, r1, r4, asr #10
   196f4:	andeq	fp, r1, ip, asr r5
   196f8:	andeq	fp, r1, r0, ror r5
   196fc:	push	{r4, r5, r6, lr}
   19700:	mov	r4, r0
   19704:	mov	r2, #18688	; 0x4900
   19708:	ldr	r0, [r0]
   1970c:	bl	1146c <openat64@plt>
   19710:	subs	r5, r0, #0
   19714:	blt	1972c <__assert_fail@plt+0x8128>
   19718:	mov	r0, r4
   1971c:	bl	196c0 <__assert_fail@plt+0x80bc>
   19720:	str	r5, [r4]
   19724:	mov	r0, #0
   19728:	pop	{r4, r5, r6, pc}
   1972c:	mvn	r0, #0
   19730:	pop	{r4, r5, r6, pc}
   19734:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19738:	sub	sp, sp, #20
   1973c:	mov	r5, r0
   19740:	bl	11334 <chdir@plt>
   19744:	subs	r4, r0, #0
   19748:	beq	19760 <__assert_fail@plt+0x815c>
   1974c:	bl	11484 <__errno_location@plt>
   19750:	mov	r9, r0
   19754:	ldr	r3, [r0]
   19758:	cmp	r3, #36	; 0x24
   1975c:	beq	1976c <__assert_fail@plt+0x8168>
   19760:	mov	r0, r4
   19764:	add	sp, sp, #20
   19768:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1976c:	mov	r0, r5
   19770:	bl	11460 <strlen@plt>
   19774:	mvn	r3, #99	; 0x63
   19778:	str	r3, [sp, #12]
   1977c:	subs	r6, r0, #0
   19780:	beq	19898 <__assert_fail@plt+0x8294>
   19784:	cmp	r6, #4096	; 0x1000
   19788:	bcc	198ac <__assert_fail@plt+0x82a8>
   1978c:	ldr	r1, [pc, #512]	; 19994 <__assert_fail@plt+0x8390>
   19790:	mov	r0, r5
   19794:	bl	115f8 <strspn@plt>
   19798:	mov	r4, r0
   1979c:	cmp	r0, #2
   197a0:	beq	198c0 <__assert_fail@plt+0x82bc>
   197a4:	cmp	r0, #0
   197a8:	moveq	r4, r5
   197ac:	bne	19920 <__assert_fail@plt+0x831c>
   197b0:	ldrb	r3, [r4]
   197b4:	cmp	r3, #47	; 0x2f
   197b8:	beq	1993c <__assert_fail@plt+0x8338>
   197bc:	add	r3, r5, r6
   197c0:	str	r3, [sp, #4]
   197c4:	cmp	r4, r3
   197c8:	bhi	19950 <__assert_fail@plt+0x834c>
   197cc:	mov	fp, r3
   197d0:	mov	r6, r4
   197d4:	sub	r3, r3, r4
   197d8:	cmp	r3, #4096	; 0x1000
   197dc:	movge	r7, #47	; 0x2f
   197e0:	movge	sl, #0
   197e4:	ldrge	r8, [pc, #428]	; 19998 <__assert_fail@plt+0x8394>
   197e8:	blt	19850 <__assert_fail@plt+0x824c>
   197ec:	mov	r2, #4096	; 0x1000
   197f0:	mov	r1, r7
   197f4:	mov	r0, r4
   197f8:	bl	11478 <memrchr@plt>
   197fc:	subs	r5, r0, #0
   19800:	beq	19964 <__assert_fail@plt+0x8360>
   19804:	strb	sl, [r5]
   19808:	sub	r6, r5, r6
   1980c:	cmp	r6, r8
   19810:	bgt	19974 <__assert_fail@plt+0x8370>
   19814:	mov	r1, r4
   19818:	add	r0, sp, #12
   1981c:	bl	196fc <__assert_fail@plt+0x80f8>
   19820:	strb	r7, [r5]
   19824:	cmp	r0, #0
   19828:	bne	19880 <__assert_fail@plt+0x827c>
   1982c:	add	r5, r5, #1
   19830:	ldr	r1, [pc, #348]	; 19994 <__assert_fail@plt+0x8390>
   19834:	mov	r0, r5
   19838:	bl	115f8 <strspn@plt>
   1983c:	add	r4, r5, r0
   19840:	mov	r6, r4
   19844:	sub	r3, fp, r4
   19848:	cmp	r3, r8
   1984c:	bgt	197ec <__assert_fail@plt+0x81e8>
   19850:	ldr	r3, [sp, #4]
   19854:	cmp	r3, r4
   19858:	bls	19870 <__assert_fail@plt+0x826c>
   1985c:	mov	r1, r4
   19860:	add	r0, sp, #12
   19864:	bl	196fc <__assert_fail@plt+0x80f8>
   19868:	cmp	r0, #0
   1986c:	bne	19880 <__assert_fail@plt+0x827c>
   19870:	ldr	r0, [sp, #12]
   19874:	bl	11568 <fchdir@plt>
   19878:	subs	r4, r0, #0
   1987c:	beq	19988 <__assert_fail@plt+0x8384>
   19880:	ldr	r4, [r9]
   19884:	add	r0, sp, #12
   19888:	bl	196c0 <__assert_fail@plt+0x80bc>
   1988c:	str	r4, [r9]
   19890:	mvn	r4, #0
   19894:	b	19760 <__assert_fail@plt+0x815c>
   19898:	ldr	r3, [pc, #252]	; 1999c <__assert_fail@plt+0x8398>
   1989c:	mov	r2, #126	; 0x7e
   198a0:	ldr	r1, [pc, #248]	; 199a0 <__assert_fail@plt+0x839c>
   198a4:	ldr	r0, [pc, #248]	; 199a4 <__assert_fail@plt+0x83a0>
   198a8:	bl	11604 <__assert_fail@plt>
   198ac:	ldr	r3, [pc, #232]	; 1999c <__assert_fail@plt+0x8398>
   198b0:	mov	r2, #127	; 0x7f
   198b4:	ldr	r1, [pc, #228]	; 199a0 <__assert_fail@plt+0x839c>
   198b8:	ldr	r0, [pc, #232]	; 199a8 <__assert_fail@plt+0x83a4>
   198bc:	bl	11604 <__assert_fail@plt>
   198c0:	sub	r2, r6, #3
   198c4:	mov	r1, #47	; 0x2f
   198c8:	add	r0, r5, #3
   198cc:	bl	114d8 <memchr@plt>
   198d0:	subs	r4, r0, #0
   198d4:	moveq	r3, #36	; 0x24
   198d8:	streq	r3, [r9]
   198dc:	mvneq	r4, #0
   198e0:	beq	19760 <__assert_fail@plt+0x815c>
   198e4:	mov	r3, #0
   198e8:	strb	r3, [r4]
   198ec:	mov	r1, r5
   198f0:	add	r0, sp, #12
   198f4:	bl	196fc <__assert_fail@plt+0x80f8>
   198f8:	mov	r3, #47	; 0x2f
   198fc:	strb	r3, [r4]
   19900:	cmp	r0, #0
   19904:	bne	19880 <__assert_fail@plt+0x827c>
   19908:	add	r4, r4, #1
   1990c:	ldr	r1, [pc, #128]	; 19994 <__assert_fail@plt+0x8390>
   19910:	mov	r0, r4
   19914:	bl	115f8 <strspn@plt>
   19918:	add	r4, r4, r0
   1991c:	b	197b0 <__assert_fail@plt+0x81ac>
   19920:	ldr	r1, [pc, #108]	; 19994 <__assert_fail@plt+0x8390>
   19924:	add	r0, sp, #12
   19928:	bl	196fc <__assert_fail@plt+0x80f8>
   1992c:	cmp	r0, #0
   19930:	addeq	r4, r5, r4
   19934:	beq	197b0 <__assert_fail@plt+0x81ac>
   19938:	b	19880 <__assert_fail@plt+0x827c>
   1993c:	ldr	r3, [pc, #88]	; 1999c <__assert_fail@plt+0x8398>
   19940:	mov	r2, #162	; 0xa2
   19944:	ldr	r1, [pc, #84]	; 199a0 <__assert_fail@plt+0x839c>
   19948:	ldr	r0, [pc, #92]	; 199ac <__assert_fail@plt+0x83a8>
   1994c:	bl	11604 <__assert_fail@plt>
   19950:	ldr	r3, [pc, #68]	; 1999c <__assert_fail@plt+0x8398>
   19954:	mov	r2, #163	; 0xa3
   19958:	ldr	r1, [pc, #64]	; 199a0 <__assert_fail@plt+0x839c>
   1995c:	ldr	r0, [pc, #76]	; 199b0 <__assert_fail@plt+0x83ac>
   19960:	bl	11604 <__assert_fail@plt>
   19964:	mov	r3, #36	; 0x24
   19968:	str	r3, [r9]
   1996c:	mvn	r4, #0
   19970:	b	19760 <__assert_fail@plt+0x815c>
   19974:	ldr	r3, [pc, #32]	; 1999c <__assert_fail@plt+0x8398>
   19978:	mov	r2, #179	; 0xb3
   1997c:	ldr	r1, [pc, #28]	; 199a0 <__assert_fail@plt+0x839c>
   19980:	ldr	r0, [pc, #44]	; 199b4 <__assert_fail@plt+0x83b0>
   19984:	bl	11604 <__assert_fail@plt>
   19988:	add	r0, sp, #12
   1998c:	bl	196c0 <__assert_fail@plt+0x80bc>
   19990:	b	19760 <__assert_fail@plt+0x815c>
   19994:	andeq	fp, r1, r4, lsr #9
   19998:	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   1999c:	andeq	fp, r1, r0, asr r5
   199a0:	andeq	fp, r1, ip, asr r5
   199a4:	andeq	fp, r1, r0, lsl #11
   199a8:	andeq	fp, r1, r8, lsl #11
   199ac:	muleq	r1, r4, r5
   199b0:	andeq	fp, r1, r0, lsr #11
   199b4:			; <UNDEFINED> instruction: 0x0001b5b0
   199b8:	push	{lr}		; (str lr, [sp, #-4]!)
   199bc:	sub	sp, sp, #268	; 0x10c
   199c0:	ldr	r2, [pc, #68]	; 19a0c <__assert_fail@plt+0x8408>
   199c4:	add	r1, sp, #4
   199c8:	bl	19a18 <__assert_fail@plt+0x8414>
   199cc:	cmp	r0, #0
   199d0:	movne	r0, #0
   199d4:	bne	19a04 <__assert_fail@plt+0x8400>
   199d8:	ldr	r1, [pc, #48]	; 19a10 <__assert_fail@plt+0x840c>
   199dc:	add	r0, sp, #4
   199e0:	bl	11268 <strcmp@plt>
   199e4:	cmp	r0, #0
   199e8:	moveq	r0, #0
   199ec:	beq	19a04 <__assert_fail@plt+0x8400>
   199f0:	ldr	r1, [pc, #28]	; 19a14 <__assert_fail@plt+0x8410>
   199f4:	add	r0, sp, #4
   199f8:	bl	11268 <strcmp@plt>
   199fc:	adds	r0, r0, #0
   19a00:	movne	r0, #1
   19a04:	add	sp, sp, #268	; 0x10c
   19a08:	pop	{pc}		; (ldr pc, [sp], #4)
   19a0c:	andeq	r0, r0, r1, lsl #2
   19a10:	andeq	fp, r1, r4, asr #11
   19a14:	andeq	fp, r1, r8, asr #11
   19a18:	push	{r4, r5, r6, lr}
   19a1c:	mov	r6, r1
   19a20:	mov	r4, r2
   19a24:	mov	r1, #0
   19a28:	bl	11520 <setlocale@plt>
   19a2c:	subs	r5, r0, #0
   19a30:	beq	19a54 <__assert_fail@plt+0x8450>
   19a34:	mov	r0, r5
   19a38:	bl	11460 <strlen@plt>
   19a3c:	cmp	r4, r0
   19a40:	bhi	19a6c <__assert_fail@plt+0x8468>
   19a44:	cmp	r4, #0
   19a48:	bne	19a84 <__assert_fail@plt+0x8480>
   19a4c:	mov	r0, #34	; 0x22
   19a50:	pop	{r4, r5, r6, pc}
   19a54:	cmp	r4, #0
   19a58:	beq	19aa8 <__assert_fail@plt+0x84a4>
   19a5c:	mov	r3, #0
   19a60:	strb	r3, [r6]
   19a64:	mov	r0, #22
   19a68:	pop	{r4, r5, r6, pc}
   19a6c:	add	r2, r0, #1
   19a70:	mov	r1, r5
   19a74:	mov	r0, r6
   19a78:	bl	112b0 <memcpy@plt>
   19a7c:	mov	r0, #0
   19a80:	pop	{r4, r5, r6, pc}
   19a84:	sub	r4, r4, #1
   19a88:	mov	r2, r4
   19a8c:	mov	r1, r5
   19a90:	mov	r0, r6
   19a94:	bl	112b0 <memcpy@plt>
   19a98:	mov	r3, #0
   19a9c:	strb	r3, [r6, r4]
   19aa0:	mov	r0, #34	; 0x22
   19aa4:	pop	{r4, r5, r6, pc}
   19aa8:	mov	r0, #22
   19aac:	pop	{r4, r5, r6, pc}
   19ab0:	push	{r4, lr}
   19ab4:	mov	r1, #0
   19ab8:	bl	11520 <setlocale@plt>
   19abc:	pop	{r4, pc}
   19ac0:	subs	r2, r1, #1
   19ac4:	bxeq	lr
   19ac8:	bcc	19ca0 <__assert_fail@plt+0x869c>
   19acc:	cmp	r0, r1
   19ad0:	bls	19c84 <__assert_fail@plt+0x8680>
   19ad4:	tst	r1, r2
   19ad8:	beq	19c90 <__assert_fail@plt+0x868c>
   19adc:	clz	r3, r0
   19ae0:	clz	r2, r1
   19ae4:	sub	r3, r2, r3
   19ae8:	rsbs	r3, r3, #31
   19aec:	addne	r3, r3, r3, lsl #1
   19af0:	mov	r2, #0
   19af4:	addne	pc, pc, r3, lsl #2
   19af8:	nop			; (mov r0, r0)
   19afc:	cmp	r0, r1, lsl #31
   19b00:	adc	r2, r2, r2
   19b04:	subcs	r0, r0, r1, lsl #31
   19b08:	cmp	r0, r1, lsl #30
   19b0c:	adc	r2, r2, r2
   19b10:	subcs	r0, r0, r1, lsl #30
   19b14:	cmp	r0, r1, lsl #29
   19b18:	adc	r2, r2, r2
   19b1c:	subcs	r0, r0, r1, lsl #29
   19b20:	cmp	r0, r1, lsl #28
   19b24:	adc	r2, r2, r2
   19b28:	subcs	r0, r0, r1, lsl #28
   19b2c:	cmp	r0, r1, lsl #27
   19b30:	adc	r2, r2, r2
   19b34:	subcs	r0, r0, r1, lsl #27
   19b38:	cmp	r0, r1, lsl #26
   19b3c:	adc	r2, r2, r2
   19b40:	subcs	r0, r0, r1, lsl #26
   19b44:	cmp	r0, r1, lsl #25
   19b48:	adc	r2, r2, r2
   19b4c:	subcs	r0, r0, r1, lsl #25
   19b50:	cmp	r0, r1, lsl #24
   19b54:	adc	r2, r2, r2
   19b58:	subcs	r0, r0, r1, lsl #24
   19b5c:	cmp	r0, r1, lsl #23
   19b60:	adc	r2, r2, r2
   19b64:	subcs	r0, r0, r1, lsl #23
   19b68:	cmp	r0, r1, lsl #22
   19b6c:	adc	r2, r2, r2
   19b70:	subcs	r0, r0, r1, lsl #22
   19b74:	cmp	r0, r1, lsl #21
   19b78:	adc	r2, r2, r2
   19b7c:	subcs	r0, r0, r1, lsl #21
   19b80:	cmp	r0, r1, lsl #20
   19b84:	adc	r2, r2, r2
   19b88:	subcs	r0, r0, r1, lsl #20
   19b8c:	cmp	r0, r1, lsl #19
   19b90:	adc	r2, r2, r2
   19b94:	subcs	r0, r0, r1, lsl #19
   19b98:	cmp	r0, r1, lsl #18
   19b9c:	adc	r2, r2, r2
   19ba0:	subcs	r0, r0, r1, lsl #18
   19ba4:	cmp	r0, r1, lsl #17
   19ba8:	adc	r2, r2, r2
   19bac:	subcs	r0, r0, r1, lsl #17
   19bb0:	cmp	r0, r1, lsl #16
   19bb4:	adc	r2, r2, r2
   19bb8:	subcs	r0, r0, r1, lsl #16
   19bbc:	cmp	r0, r1, lsl #15
   19bc0:	adc	r2, r2, r2
   19bc4:	subcs	r0, r0, r1, lsl #15
   19bc8:	cmp	r0, r1, lsl #14
   19bcc:	adc	r2, r2, r2
   19bd0:	subcs	r0, r0, r1, lsl #14
   19bd4:	cmp	r0, r1, lsl #13
   19bd8:	adc	r2, r2, r2
   19bdc:	subcs	r0, r0, r1, lsl #13
   19be0:	cmp	r0, r1, lsl #12
   19be4:	adc	r2, r2, r2
   19be8:	subcs	r0, r0, r1, lsl #12
   19bec:	cmp	r0, r1, lsl #11
   19bf0:	adc	r2, r2, r2
   19bf4:	subcs	r0, r0, r1, lsl #11
   19bf8:	cmp	r0, r1, lsl #10
   19bfc:	adc	r2, r2, r2
   19c00:	subcs	r0, r0, r1, lsl #10
   19c04:	cmp	r0, r1, lsl #9
   19c08:	adc	r2, r2, r2
   19c0c:	subcs	r0, r0, r1, lsl #9
   19c10:	cmp	r0, r1, lsl #8
   19c14:	adc	r2, r2, r2
   19c18:	subcs	r0, r0, r1, lsl #8
   19c1c:	cmp	r0, r1, lsl #7
   19c20:	adc	r2, r2, r2
   19c24:	subcs	r0, r0, r1, lsl #7
   19c28:	cmp	r0, r1, lsl #6
   19c2c:	adc	r2, r2, r2
   19c30:	subcs	r0, r0, r1, lsl #6
   19c34:	cmp	r0, r1, lsl #5
   19c38:	adc	r2, r2, r2
   19c3c:	subcs	r0, r0, r1, lsl #5
   19c40:	cmp	r0, r1, lsl #4
   19c44:	adc	r2, r2, r2
   19c48:	subcs	r0, r0, r1, lsl #4
   19c4c:	cmp	r0, r1, lsl #3
   19c50:	adc	r2, r2, r2
   19c54:	subcs	r0, r0, r1, lsl #3
   19c58:	cmp	r0, r1, lsl #2
   19c5c:	adc	r2, r2, r2
   19c60:	subcs	r0, r0, r1, lsl #2
   19c64:	cmp	r0, r1, lsl #1
   19c68:	adc	r2, r2, r2
   19c6c:	subcs	r0, r0, r1, lsl #1
   19c70:	cmp	r0, r1
   19c74:	adc	r2, r2, r2
   19c78:	subcs	r0, r0, r1
   19c7c:	mov	r0, r2
   19c80:	bx	lr
   19c84:	moveq	r0, #1
   19c88:	movne	r0, #0
   19c8c:	bx	lr
   19c90:	clz	r2, r1
   19c94:	rsb	r2, r2, #31
   19c98:	lsr	r0, r0, r2
   19c9c:	bx	lr
   19ca0:	cmp	r0, #0
   19ca4:	mvnne	r0, #0
   19ca8:	b	19f48 <__assert_fail@plt+0x8944>
   19cac:	cmp	r1, #0
   19cb0:	beq	19ca0 <__assert_fail@plt+0x869c>
   19cb4:	push	{r0, r1, lr}
   19cb8:	bl	19ac0 <__assert_fail@plt+0x84bc>
   19cbc:	pop	{r1, r2, lr}
   19cc0:	mul	r3, r2, r0
   19cc4:	sub	r1, r1, r3
   19cc8:	bx	lr
   19ccc:	cmp	r1, #0
   19cd0:	beq	19edc <__assert_fail@plt+0x88d8>
   19cd4:	eor	ip, r0, r1
   19cd8:	rsbmi	r1, r1, #0
   19cdc:	subs	r2, r1, #1
   19ce0:	beq	19ea8 <__assert_fail@plt+0x88a4>
   19ce4:	movs	r3, r0
   19ce8:	rsbmi	r3, r0, #0
   19cec:	cmp	r3, r1
   19cf0:	bls	19eb4 <__assert_fail@plt+0x88b0>
   19cf4:	tst	r1, r2
   19cf8:	beq	19ec4 <__assert_fail@plt+0x88c0>
   19cfc:	clz	r2, r3
   19d00:	clz	r0, r1
   19d04:	sub	r2, r0, r2
   19d08:	rsbs	r2, r2, #31
   19d0c:	addne	r2, r2, r2, lsl #1
   19d10:	mov	r0, #0
   19d14:	addne	pc, pc, r2, lsl #2
   19d18:	nop			; (mov r0, r0)
   19d1c:	cmp	r3, r1, lsl #31
   19d20:	adc	r0, r0, r0
   19d24:	subcs	r3, r3, r1, lsl #31
   19d28:	cmp	r3, r1, lsl #30
   19d2c:	adc	r0, r0, r0
   19d30:	subcs	r3, r3, r1, lsl #30
   19d34:	cmp	r3, r1, lsl #29
   19d38:	adc	r0, r0, r0
   19d3c:	subcs	r3, r3, r1, lsl #29
   19d40:	cmp	r3, r1, lsl #28
   19d44:	adc	r0, r0, r0
   19d48:	subcs	r3, r3, r1, lsl #28
   19d4c:	cmp	r3, r1, lsl #27
   19d50:	adc	r0, r0, r0
   19d54:	subcs	r3, r3, r1, lsl #27
   19d58:	cmp	r3, r1, lsl #26
   19d5c:	adc	r0, r0, r0
   19d60:	subcs	r3, r3, r1, lsl #26
   19d64:	cmp	r3, r1, lsl #25
   19d68:	adc	r0, r0, r0
   19d6c:	subcs	r3, r3, r1, lsl #25
   19d70:	cmp	r3, r1, lsl #24
   19d74:	adc	r0, r0, r0
   19d78:	subcs	r3, r3, r1, lsl #24
   19d7c:	cmp	r3, r1, lsl #23
   19d80:	adc	r0, r0, r0
   19d84:	subcs	r3, r3, r1, lsl #23
   19d88:	cmp	r3, r1, lsl #22
   19d8c:	adc	r0, r0, r0
   19d90:	subcs	r3, r3, r1, lsl #22
   19d94:	cmp	r3, r1, lsl #21
   19d98:	adc	r0, r0, r0
   19d9c:	subcs	r3, r3, r1, lsl #21
   19da0:	cmp	r3, r1, lsl #20
   19da4:	adc	r0, r0, r0
   19da8:	subcs	r3, r3, r1, lsl #20
   19dac:	cmp	r3, r1, lsl #19
   19db0:	adc	r0, r0, r0
   19db4:	subcs	r3, r3, r1, lsl #19
   19db8:	cmp	r3, r1, lsl #18
   19dbc:	adc	r0, r0, r0
   19dc0:	subcs	r3, r3, r1, lsl #18
   19dc4:	cmp	r3, r1, lsl #17
   19dc8:	adc	r0, r0, r0
   19dcc:	subcs	r3, r3, r1, lsl #17
   19dd0:	cmp	r3, r1, lsl #16
   19dd4:	adc	r0, r0, r0
   19dd8:	subcs	r3, r3, r1, lsl #16
   19ddc:	cmp	r3, r1, lsl #15
   19de0:	adc	r0, r0, r0
   19de4:	subcs	r3, r3, r1, lsl #15
   19de8:	cmp	r3, r1, lsl #14
   19dec:	adc	r0, r0, r0
   19df0:	subcs	r3, r3, r1, lsl #14
   19df4:	cmp	r3, r1, lsl #13
   19df8:	adc	r0, r0, r0
   19dfc:	subcs	r3, r3, r1, lsl #13
   19e00:	cmp	r3, r1, lsl #12
   19e04:	adc	r0, r0, r0
   19e08:	subcs	r3, r3, r1, lsl #12
   19e0c:	cmp	r3, r1, lsl #11
   19e10:	adc	r0, r0, r0
   19e14:	subcs	r3, r3, r1, lsl #11
   19e18:	cmp	r3, r1, lsl #10
   19e1c:	adc	r0, r0, r0
   19e20:	subcs	r3, r3, r1, lsl #10
   19e24:	cmp	r3, r1, lsl #9
   19e28:	adc	r0, r0, r0
   19e2c:	subcs	r3, r3, r1, lsl #9
   19e30:	cmp	r3, r1, lsl #8
   19e34:	adc	r0, r0, r0
   19e38:	subcs	r3, r3, r1, lsl #8
   19e3c:	cmp	r3, r1, lsl #7
   19e40:	adc	r0, r0, r0
   19e44:	subcs	r3, r3, r1, lsl #7
   19e48:	cmp	r3, r1, lsl #6
   19e4c:	adc	r0, r0, r0
   19e50:	subcs	r3, r3, r1, lsl #6
   19e54:	cmp	r3, r1, lsl #5
   19e58:	adc	r0, r0, r0
   19e5c:	subcs	r3, r3, r1, lsl #5
   19e60:	cmp	r3, r1, lsl #4
   19e64:	adc	r0, r0, r0
   19e68:	subcs	r3, r3, r1, lsl #4
   19e6c:	cmp	r3, r1, lsl #3
   19e70:	adc	r0, r0, r0
   19e74:	subcs	r3, r3, r1, lsl #3
   19e78:	cmp	r3, r1, lsl #2
   19e7c:	adc	r0, r0, r0
   19e80:	subcs	r3, r3, r1, lsl #2
   19e84:	cmp	r3, r1, lsl #1
   19e88:	adc	r0, r0, r0
   19e8c:	subcs	r3, r3, r1, lsl #1
   19e90:	cmp	r3, r1
   19e94:	adc	r0, r0, r0
   19e98:	subcs	r3, r3, r1
   19e9c:	cmp	ip, #0
   19ea0:	rsbmi	r0, r0, #0
   19ea4:	bx	lr
   19ea8:	teq	ip, r0
   19eac:	rsbmi	r0, r0, #0
   19eb0:	bx	lr
   19eb4:	movcc	r0, #0
   19eb8:	asreq	r0, ip, #31
   19ebc:	orreq	r0, r0, #1
   19ec0:	bx	lr
   19ec4:	clz	r2, r1
   19ec8:	rsb	r2, r2, #31
   19ecc:	cmp	ip, #0
   19ed0:	lsr	r0, r3, r2
   19ed4:	rsbmi	r0, r0, #0
   19ed8:	bx	lr
   19edc:	cmp	r0, #0
   19ee0:	mvngt	r0, #-2147483648	; 0x80000000
   19ee4:	movlt	r0, #-2147483648	; 0x80000000
   19ee8:	b	19f48 <__assert_fail@plt+0x8944>
   19eec:	cmp	r1, #0
   19ef0:	beq	19edc <__assert_fail@plt+0x88d8>
   19ef4:	push	{r0, r1, lr}
   19ef8:	bl	19cd4 <__assert_fail@plt+0x86d0>
   19efc:	pop	{r1, r2, lr}
   19f00:	mul	r3, r2, r0
   19f04:	sub	r1, r1, r3
   19f08:	bx	lr
   19f0c:	cmp	r3, #0
   19f10:	cmpeq	r2, #0
   19f14:	bne	19f2c <__assert_fail@plt+0x8928>
   19f18:	cmp	r1, #0
   19f1c:	cmpeq	r0, #0
   19f20:	mvnne	r1, #0
   19f24:	mvnne	r0, #0
   19f28:	b	19f48 <__assert_fail@plt+0x8944>
   19f2c:	sub	sp, sp, #8
   19f30:	push	{sp, lr}
   19f34:	bl	19f58 <__assert_fail@plt+0x8954>
   19f38:	ldr	lr, [sp, #4]
   19f3c:	add	sp, sp, #8
   19f40:	pop	{r2, r3}
   19f44:	bx	lr
   19f48:	push	{r1, lr}
   19f4c:	mov	r0, #8
   19f50:	bl	11250 <raise@plt>
   19f54:	pop	{r1, pc}
   19f58:	cmp	r1, r3
   19f5c:	push	{r4, r5, r6, r7, r8, r9, lr}
   19f60:	cmpeq	r0, r2
   19f64:	mov	r4, r0
   19f68:	mov	r5, r1
   19f6c:	ldr	r9, [sp, #28]
   19f70:	movcc	r0, #0
   19f74:	movcc	r1, #0
   19f78:	bcc	1a070 <__assert_fail@plt+0x8a6c>
   19f7c:	cmp	r3, #0
   19f80:	clzeq	ip, r2
   19f84:	clzne	ip, r3
   19f88:	addeq	ip, ip, #32
   19f8c:	cmp	r5, #0
   19f90:	clzeq	r1, r4
   19f94:	addeq	r1, r1, #32
   19f98:	clzne	r1, r5
   19f9c:	sub	ip, ip, r1
   19fa0:	sub	lr, ip, #32
   19fa4:	lsl	r7, r3, ip
   19fa8:	rsb	r8, ip, #32
   19fac:	orr	r7, r7, r2, lsl lr
   19fb0:	orr	r7, r7, r2, lsr r8
   19fb4:	lsl	r6, r2, ip
   19fb8:	cmp	r5, r7
   19fbc:	cmpeq	r4, r6
   19fc0:	movcc	r0, #0
   19fc4:	movcc	r1, #0
   19fc8:	bcc	19fe4 <__assert_fail@plt+0x89e0>
   19fcc:	mov	r3, #1
   19fd0:	subs	r4, r4, r6
   19fd4:	lsl	r1, r3, lr
   19fd8:	lsl	r0, r3, ip
   19fdc:	orr	r1, r1, r3, lsr r8
   19fe0:	sbc	r5, r5, r7
   19fe4:	cmp	ip, #0
   19fe8:	beq	1a070 <__assert_fail@plt+0x8a6c>
   19fec:	lsrs	r3, r7, #1
   19ff0:	rrx	r2, r6
   19ff4:	mov	r6, ip
   19ff8:	b	1a01c <__assert_fail@plt+0x8a18>
   19ffc:	subs	r4, r4, r2
   1a000:	sbc	r5, r5, r3
   1a004:	adds	r4, r4, r4
   1a008:	adc	r5, r5, r5
   1a00c:	adds	r4, r4, #1
   1a010:	adc	r5, r5, #0
   1a014:	subs	r6, r6, #1
   1a018:	beq	1a038 <__assert_fail@plt+0x8a34>
   1a01c:	cmp	r5, r3
   1a020:	cmpeq	r4, r2
   1a024:	bcs	19ffc <__assert_fail@plt+0x89f8>
   1a028:	adds	r4, r4, r4
   1a02c:	adc	r5, r5, r5
   1a030:	subs	r6, r6, #1
   1a034:	bne	1a01c <__assert_fail@plt+0x8a18>
   1a038:	lsr	r6, r4, ip
   1a03c:	lsr	r7, r5, ip
   1a040:	orr	r6, r6, r5, lsl r8
   1a044:	adds	r2, r0, r4
   1a048:	orr	r6, r6, r5, lsr lr
   1a04c:	adc	r3, r1, r5
   1a050:	lsl	r1, r7, ip
   1a054:	orr	r1, r1, r6, lsl lr
   1a058:	lsl	r0, r6, ip
   1a05c:	orr	r1, r1, r6, lsr r8
   1a060:	subs	r0, r2, r0
   1a064:	mov	r4, r6
   1a068:	mov	r5, r7
   1a06c:	sbc	r1, r3, r1
   1a070:	cmp	r9, #0
   1a074:	popeq	{r4, r5, r6, r7, r8, r9, pc}
   1a078:	strd	r4, [r9]
   1a07c:	pop	{r4, r5, r6, r7, r8, r9, pc}
   1a080:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1a084:	mov	r7, r0
   1a088:	ldr	r6, [pc, #72]	; 1a0d8 <__assert_fail@plt+0x8ad4>
   1a08c:	ldr	r5, [pc, #72]	; 1a0dc <__assert_fail@plt+0x8ad8>
   1a090:	add	r6, pc, r6
   1a094:	add	r5, pc, r5
   1a098:	sub	r6, r6, r5
   1a09c:	mov	r8, r1
   1a0a0:	mov	r9, r2
   1a0a4:	bl	1120c <fstatfs64@plt-0x20>
   1a0a8:	asrs	r6, r6, #2
   1a0ac:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   1a0b0:	mov	r4, #0
   1a0b4:	add	r4, r4, #1
   1a0b8:	ldr	r3, [r5], #4
   1a0bc:	mov	r2, r9
   1a0c0:	mov	r1, r8
   1a0c4:	mov	r0, r7
   1a0c8:	blx	r3
   1a0cc:	cmp	r6, r4
   1a0d0:	bne	1a0b4 <__assert_fail@plt+0x8ab0>
   1a0d4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1a0d8:	andeq	r1, r1, r0, ror lr
   1a0dc:	andeq	r1, r1, r8, ror #28
   1a0e0:	bx	lr
   1a0e4:	ldr	r3, [pc, #12]	; 1a0f8 <__assert_fail@plt+0x8af4>
   1a0e8:	mov	r1, #0
   1a0ec:	add	r3, pc, r3
   1a0f0:	ldr	r2, [r3]
   1a0f4:	b	1149c <__cxa_atexit@plt>
   1a0f8:	andeq	r2, r1, ip, rrx

Disassembly of section .fini:

0001a0fc <.fini>:
   1a0fc:	push	{r3, lr}
   1a100:	pop	{r3, pc}
