
../repos/coreutils/src/chcon:     file format elf32-littlearm


Disassembly of section .init:

00011238 <.init>:
   11238:	push	{r3, lr}
   1123c:	bl	12334 <__assert_fail@plt+0xcf8>
   11240:	pop	{r3, pc}

Disassembly of section .plt:

00011244 <fstatfs64@plt-0x14>:
   11244:	push	{lr}		; (str lr, [sp, #-4]!)
   11248:	ldr	lr, [pc, #4]	; 11254 <fstatfs64@plt-0x4>
   1124c:	add	lr, pc, lr
   11250:	ldr	pc, [lr, #8]!
   11254:	andeq	r8, r1, ip, lsr #27

00011258 <fstatfs64@plt>:
   11258:	add	ip, pc, #0, 12
   1125c:	add	ip, ip, #24, 20	; 0x18000
   11260:	ldr	pc, [ip, #3500]!	; 0xdac

00011264 <calloc@plt>:
   11264:	add	ip, pc, #0, 12
   11268:	add	ip, ip, #24, 20	; 0x18000
   1126c:	ldr	pc, [ip, #3492]!	; 0xda4

00011270 <fputs_unlocked@plt>:
   11270:	add	ip, pc, #0, 12
   11274:	add	ip, ip, #24, 20	; 0x18000
   11278:	ldr	pc, [ip, #3484]!	; 0xd9c

0001127c <raise@plt>:
   1127c:	add	ip, pc, #0, 12
   11280:	add	ip, ip, #24, 20	; 0x18000
   11284:	ldr	pc, [ip, #3476]!	; 0xd94

00011288 <is_selinux_enabled@plt>:
   11288:	add	ip, pc, #0, 12
   1128c:	add	ip, ip, #24, 20	; 0x18000
   11290:	ldr	pc, [ip, #3468]!	; 0xd8c

00011294 <strcmp@plt>:
   11294:	add	ip, pc, #0, 12
   11298:	add	ip, ip, #24, 20	; 0x18000
   1129c:	ldr	pc, [ip, #3460]!	; 0xd84

000112a0 <fflush@plt>:
   112a0:	add	ip, pc, #0, 12
   112a4:	add	ip, ip, #24, 20	; 0x18000
   112a8:	ldr	pc, [ip, #3452]!	; 0xd7c

000112ac <lsetfilecon@plt>:
   112ac:	add	ip, pc, #0, 12
   112b0:	add	ip, ip, #24, 20	; 0x18000
   112b4:	ldr	pc, [ip, #3444]!	; 0xd74

000112b8 <memmove@plt>:
   112b8:	add	ip, pc, #0, 12
   112bc:	add	ip, ip, #24, 20	; 0x18000
   112c0:	ldr	pc, [ip, #3436]!	; 0xd6c

000112c4 <free@plt>:
   112c4:	add	ip, pc, #0, 12
   112c8:	add	ip, ip, #24, 20	; 0x18000
   112cc:	ldr	pc, [ip, #3428]!	; 0xd64

000112d0 <_exit@plt>:
   112d0:	add	ip, pc, #0, 12
   112d4:	add	ip, ip, #24, 20	; 0x18000
   112d8:	ldr	pc, [ip, #3420]!	; 0xd5c

000112dc <memcpy@plt>:
   112dc:	add	ip, pc, #0, 12
   112e0:	add	ip, ip, #24, 20	; 0x18000
   112e4:	ldr	pc, [ip, #3412]!	; 0xd54

000112e8 <mbsinit@plt>:
   112e8:	add	ip, pc, #0, 12
   112ec:	add	ip, ip, #24, 20	; 0x18000
   112f0:	ldr	pc, [ip, #3404]!	; 0xd4c

000112f4 <context_new@plt>:
   112f4:	add	ip, pc, #0, 12
   112f8:	add	ip, ip, #24, 20	; 0x18000
   112fc:	ldr	pc, [ip, #3396]!	; 0xd44

00011300 <memcmp@plt>:
   11300:	add	ip, pc, #0, 12
   11304:	add	ip, ip, #24, 20	; 0x18000
   11308:	ldr	pc, [ip, #3388]!	; 0xd3c

0001130c <fputc_unlocked@plt>:
   1130c:	add	ip, pc, #0, 12
   11310:	add	ip, ip, #24, 20	; 0x18000
   11314:	ldr	pc, [ip, #3380]!	; 0xd34

00011318 <context_role_set@plt>:
   11318:	add	ip, pc, #0, 12
   1131c:	add	ip, ip, #24, 20	; 0x18000
   11320:	ldr	pc, [ip, #3372]!	; 0xd2c

00011324 <dcgettext@plt>:
   11324:	add	ip, pc, #0, 12
   11328:	add	ip, ip, #24, 20	; 0x18000
   1132c:	ldr	pc, [ip, #3364]!	; 0xd24

00011330 <context_type_set@plt>:
   11330:	add	ip, pc, #0, 12
   11334:	add	ip, ip, #24, 20	; 0x18000
   11338:	ldr	pc, [ip, #3356]!	; 0xd1c

0001133c <realloc@plt>:
   1133c:	add	ip, pc, #0, 12
   11340:	add	ip, ip, #24, 20	; 0x18000
   11344:	ldr	pc, [ip, #3348]!	; 0xd14

00011348 <fgetfilecon@plt>:
   11348:	add	ip, pc, #0, 12
   1134c:	add	ip, ip, #24, 20	; 0x18000
   11350:	ldr	pc, [ip, #3340]!	; 0xd0c

00011354 <textdomain@plt>:
   11354:	add	ip, pc, #0, 12
   11358:	add	ip, ip, #24, 20	; 0x18000
   1135c:	ldr	pc, [ip, #3332]!	; 0xd04

00011360 <chdir@plt>:
   11360:	add	ip, pc, #0, 12
   11364:	add	ip, ip, #24, 20	; 0x18000
   11368:	ldr	pc, [ip, #3324]!	; 0xcfc

0001136c <__fxstatat64@plt>:
   1136c:	add	ip, pc, #0, 12
   11370:	add	ip, ip, #24, 20	; 0x18000
   11374:	ldr	pc, [ip, #3316]!	; 0xcf4

00011378 <iswprint@plt>:
   11378:	add	ip, pc, #0, 12
   1137c:	add	ip, ip, #24, 20	; 0x18000
   11380:	ldr	pc, [ip, #3308]!	; 0xcec

00011384 <__fxstat64@plt>:
   11384:	add	ip, pc, #0, 12
   11388:	add	ip, ip, #24, 20	; 0x18000
   1138c:	ldr	pc, [ip, #3300]!	; 0xce4

00011390 <lseek64@plt>:
   11390:	add	ip, pc, #0, 12
   11394:	add	ip, ip, #24, 20	; 0x18000
   11398:	ldr	pc, [ip, #3292]!	; 0xcdc

0001139c <__ctype_get_mb_cur_max@plt>:
   1139c:	add	ip, pc, #0, 12
   113a0:	add	ip, ip, #24, 20	; 0x18000
   113a4:	ldr	pc, [ip, #3284]!	; 0xcd4

000113a8 <strcpy@plt>:
   113a8:	add	ip, pc, #0, 12
   113ac:	add	ip, ip, #24, 20	; 0x18000
   113b0:	ldr	pc, [ip, #3276]!	; 0xccc

000113b4 <__fpending@plt>:
   113b4:	add	ip, pc, #0, 12
   113b8:	add	ip, ip, #24, 20	; 0x18000
   113bc:	ldr	pc, [ip, #3268]!	; 0xcc4

000113c0 <ferror_unlocked@plt>:
   113c0:	add	ip, pc, #0, 12
   113c4:	add	ip, ip, #24, 20	; 0x18000
   113c8:	ldr	pc, [ip, #3260]!	; 0xcbc

000113cc <mbrtowc@plt>:
   113cc:	add	ip, pc, #0, 12
   113d0:	add	ip, ip, #24, 20	; 0x18000
   113d4:	ldr	pc, [ip, #3252]!	; 0xcb4

000113d8 <error@plt>:
   113d8:	add	ip, pc, #0, 12
   113dc:	add	ip, ip, #24, 20	; 0x18000
   113e0:	ldr	pc, [ip, #3244]!	; 0xcac

000113e4 <security_check_context@plt>:
   113e4:	add	ip, pc, #0, 12
   113e8:	add	ip, ip, #24, 20	; 0x18000
   113ec:	ldr	pc, [ip, #3236]!	; 0xca4

000113f0 <open64@plt>:
   113f0:	add	ip, pc, #0, 12
   113f4:	add	ip, ip, #24, 20	; 0x18000
   113f8:	ldr	pc, [ip, #3228]!	; 0xc9c

000113fc <lgetfilecon@plt>:
   113fc:	add	ip, pc, #0, 12
   11400:	add	ip, ip, #24, 20	; 0x18000
   11404:	ldr	pc, [ip, #3220]!	; 0xc94

00011408 <malloc@plt>:
   11408:	add	ip, pc, #0, 12
   1140c:	add	ip, ip, #24, 20	; 0x18000
   11410:	ldr	pc, [ip, #3212]!	; 0xc8c

00011414 <__libc_start_main@plt>:
   11414:	add	ip, pc, #0, 12
   11418:	add	ip, ip, #24, 20	; 0x18000
   1141c:	ldr	pc, [ip, #3204]!	; 0xc84

00011420 <__freading@plt>:
   11420:	add	ip, pc, #0, 12
   11424:	add	ip, ip, #24, 20	; 0x18000
   11428:	ldr	pc, [ip, #3196]!	; 0xc7c

0001142c <__gmon_start__@plt>:
   1142c:	add	ip, pc, #0, 12
   11430:	add	ip, ip, #24, 20	; 0x18000
   11434:	ldr	pc, [ip, #3188]!	; 0xc74

00011438 <context_free@plt>:
   11438:	add	ip, pc, #0, 12
   1143c:	add	ip, ip, #24, 20	; 0x18000
   11440:	ldr	pc, [ip, #3180]!	; 0xc6c

00011444 <getopt_long@plt>:
   11444:	add	ip, pc, #0, 12
   11448:	add	ip, ip, #24, 20	; 0x18000
   1144c:	ldr	pc, [ip, #3172]!	; 0xc64

00011450 <__ctype_b_loc@plt>:
   11450:	add	ip, pc, #0, 12
   11454:	add	ip, ip, #24, 20	; 0x18000
   11458:	ldr	pc, [ip, #3164]!	; 0xc5c

0001145c <getcwd@plt>:
   1145c:	add	ip, pc, #0, 12
   11460:	add	ip, ip, #24, 20	; 0x18000
   11464:	ldr	pc, [ip, #3156]!	; 0xc54

00011468 <exit@plt>:
   11468:	add	ip, pc, #0, 12
   1146c:	add	ip, ip, #24, 20	; 0x18000
   11470:	ldr	pc, [ip, #3148]!	; 0xc4c

00011474 <context_user_set@plt>:
   11474:	add	ip, pc, #0, 12
   11478:	add	ip, ip, #24, 20	; 0x18000
   1147c:	ldr	pc, [ip, #3140]!	; 0xc44

00011480 <getfilecon@plt>:
   11480:	add	ip, pc, #0, 12
   11484:	add	ip, ip, #24, 20	; 0x18000
   11488:	ldr	pc, [ip, #3132]!	; 0xc3c

0001148c <strlen@plt>:
   1148c:	add	ip, pc, #0, 12
   11490:	add	ip, ip, #24, 20	; 0x18000
   11494:	ldr	pc, [ip, #3124]!	; 0xc34

00011498 <openat64@plt>:
   11498:	add	ip, pc, #0, 12
   1149c:	add	ip, ip, #24, 20	; 0x18000
   114a0:	ldr	pc, [ip, #3116]!	; 0xc2c

000114a4 <memrchr@plt>:
   114a4:	add	ip, pc, #0, 12
   114a8:	add	ip, ip, #24, 20	; 0x18000
   114ac:	ldr	pc, [ip, #3108]!	; 0xc24

000114b0 <__errno_location@plt>:
   114b0:	add	ip, pc, #0, 12
   114b4:	add	ip, ip, #24, 20	; 0x18000
   114b8:	ldr	pc, [ip, #3100]!	; 0xc1c

000114bc <__sprintf_chk@plt>:
   114bc:	add	ip, pc, #0, 12
   114c0:	add	ip, ip, #24, 20	; 0x18000
   114c4:	ldr	pc, [ip, #3092]!	; 0xc14

000114c8 <__cxa_atexit@plt>:
   114c8:	add	ip, pc, #0, 12
   114cc:	add	ip, ip, #24, 20	; 0x18000
   114d0:	ldr	pc, [ip, #3084]!	; 0xc0c

000114d4 <memset@plt>:
   114d4:	add	ip, pc, #0, 12
   114d8:	add	ip, ip, #24, 20	; 0x18000
   114dc:	ldr	pc, [ip, #3076]!	; 0xc04

000114e0 <__printf_chk@plt>:
   114e0:	add	ip, pc, #0, 12
   114e4:	add	ip, ip, #24, 20	; 0x18000
   114e8:	ldr	pc, [ip, #3068]!	; 0xbfc

000114ec <fileno@plt>:
   114ec:	add	ip, pc, #0, 12
   114f0:	add	ip, ip, #24, 20	; 0x18000
   114f4:	ldr	pc, [ip, #3060]!	; 0xbf4

000114f8 <__fprintf_chk@plt>:
   114f8:	add	ip, pc, #0, 12
   114fc:	add	ip, ip, #24, 20	; 0x18000
   11500:	ldr	pc, [ip, #3052]!	; 0xbec

00011504 <memchr@plt>:
   11504:	add	ip, pc, #0, 12
   11508:	add	ip, ip, #24, 20	; 0x18000
   1150c:	ldr	pc, [ip, #3044]!	; 0xbe4

00011510 <setfilecon@plt>:
   11510:	add	ip, pc, #0, 12
   11514:	add	ip, ip, #24, 20	; 0x18000
   11518:	ldr	pc, [ip, #3036]!	; 0xbdc

0001151c <access@plt>:
   1151c:	add	ip, pc, #0, 12
   11520:	add	ip, ip, #24, 20	; 0x18000
   11524:	ldr	pc, [ip, #3028]!	; 0xbd4

00011528 <fclose@plt>:
   11528:	add	ip, pc, #0, 12
   1152c:	add	ip, ip, #24, 20	; 0x18000
   11530:	ldr	pc, [ip, #3020]!	; 0xbcc

00011534 <fseeko64@plt>:
   11534:	add	ip, pc, #0, 12
   11538:	add	ip, ip, #24, 20	; 0x18000
   1153c:	ldr	pc, [ip, #3012]!	; 0xbc4

00011540 <fcntl64@plt>:
   11540:	add	ip, pc, #0, 12
   11544:	add	ip, ip, #24, 20	; 0x18000
   11548:	ldr	pc, [ip, #3004]!	; 0xbbc

0001154c <setlocale@plt>:
   1154c:	add	ip, pc, #0, 12
   11550:	add	ip, ip, #24, 20	; 0x18000
   11554:	ldr	pc, [ip, #2996]!	; 0xbb4

00011558 <strrchr@plt>:
   11558:	add	ip, pc, #0, 12
   1155c:	add	ip, ip, #24, 20	; 0x18000
   11560:	ldr	pc, [ip, #2988]!	; 0xbac

00011564 <nl_langinfo@plt>:
   11564:	add	ip, pc, #0, 12
   11568:	add	ip, ip, #24, 20	; 0x18000
   1156c:	ldr	pc, [ip, #2980]!	; 0xba4

00011570 <readdir64@plt>:
   11570:	add	ip, pc, #0, 12
   11574:	add	ip, ip, #24, 20	; 0x18000
   11578:	ldr	pc, [ip, #2972]!	; 0xb9c

0001157c <fdopendir@plt>:
   1157c:	add	ip, pc, #0, 12
   11580:	add	ip, ip, #24, 20	; 0x18000
   11584:	ldr	pc, [ip, #2964]!	; 0xb94

00011588 <dirfd@plt>:
   11588:	add	ip, pc, #0, 12
   1158c:	add	ip, ip, #24, 20	; 0x18000
   11590:	ldr	pc, [ip, #2956]!	; 0xb8c

00011594 <fchdir@plt>:
   11594:	add	ip, pc, #0, 12
   11598:	add	ip, ip, #24, 20	; 0x18000
   1159c:	ldr	pc, [ip, #2948]!	; 0xb84

000115a0 <qsort@plt>:
   115a0:	add	ip, pc, #0, 12
   115a4:	add	ip, ip, #24, 20	; 0x18000
   115a8:	ldr	pc, [ip, #2940]!	; 0xb7c

000115ac <freecon@plt>:
   115ac:	add	ip, pc, #0, 12
   115b0:	add	ip, ip, #24, 20	; 0x18000
   115b4:	ldr	pc, [ip, #2932]!	; 0xb74

000115b8 <bindtextdomain@plt>:
   115b8:	add	ip, pc, #0, 12
   115bc:	add	ip, ip, #24, 20	; 0x18000
   115c0:	ldr	pc, [ip, #2924]!	; 0xb6c

000115c4 <context_range_set@plt>:
   115c4:	add	ip, pc, #0, 12
   115c8:	add	ip, ip, #24, 20	; 0x18000
   115cc:	ldr	pc, [ip, #2916]!	; 0xb64

000115d0 <context_str@plt>:
   115d0:	add	ip, pc, #0, 12
   115d4:	add	ip, ip, #24, 20	; 0x18000
   115d8:	ldr	pc, [ip, #2908]!	; 0xb5c

000115dc <__xstat64@plt>:
   115dc:	add	ip, pc, #0, 12
   115e0:	add	ip, ip, #24, 20	; 0x18000
   115e4:	ldr	pc, [ip, #2900]!	; 0xb54

000115e8 <fputs@plt>:
   115e8:	add	ip, pc, #0, 12
   115ec:	add	ip, ip, #24, 20	; 0x18000
   115f0:	ldr	pc, [ip, #2892]!	; 0xb4c

000115f4 <strncmp@plt>:
   115f4:	add	ip, pc, #0, 12
   115f8:	add	ip, ip, #24, 20	; 0x18000
   115fc:	ldr	pc, [ip, #2884]!	; 0xb44

00011600 <abort@plt>:
   11600:	add	ip, pc, #0, 12
   11604:	add	ip, ip, #24, 20	; 0x18000
   11608:	ldr	pc, [ip, #2876]!	; 0xb3c

0001160c <close@plt>:
   1160c:	add	ip, pc, #0, 12
   11610:	add	ip, ip, #24, 20	; 0x18000
   11614:	ldr	pc, [ip, #2868]!	; 0xb34

00011618 <__lxstat64@plt>:
   11618:	add	ip, pc, #0, 12
   1161c:	add	ip, ip, #24, 20	; 0x18000
   11620:	ldr	pc, [ip, #2860]!	; 0xb2c

00011624 <closedir@plt>:
   11624:	add	ip, pc, #0, 12
   11628:	add	ip, ip, #24, 20	; 0x18000
   1162c:	ldr	pc, [ip, #2852]!	; 0xb24

00011630 <strspn@plt>:
   11630:	add	ip, pc, #0, 12
   11634:	add	ip, ip, #24, 20	; 0x18000
   11638:	ldr	pc, [ip, #2844]!	; 0xb1c

0001163c <__assert_fail@plt>:
   1163c:	add	ip, pc, #0, 12
   11640:	add	ip, ip, #24, 20	; 0x18000
   11644:	ldr	pc, [ip, #2836]!	; 0xb14

Disassembly of section .text:

00011648 <.text>:
   11648:	push	{r4, lr}
   1164c:	bl	114b0 <__errno_location@plt>
   11650:	mov	r3, #12
   11654:	str	r3, [r0]
   11658:	mov	r0, #0
   1165c:	pop	{r4, pc}
   11660:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11664:	mov	r8, r0
   11668:	sub	sp, sp, #36	; 0x24
   1166c:	mov	fp, r1
   11670:	mov	r6, #0
   11674:	mov	r9, r6
   11678:	mvn	r4, #0
   1167c:	ldr	sl, [pc, #3016]	; 1224c <__assert_fail@plt+0xc10>
   11680:	mov	r7, #16
   11684:	ldr	r0, [r1]
   11688:	bl	15358 <__assert_fail@plt+0x3d1c>
   1168c:	ldr	r1, [pc, #3004]	; 12250 <__assert_fail@plt+0xc14>
   11690:	mov	r0, #6
   11694:	bl	1154c <setlocale@plt>
   11698:	ldr	r1, [pc, #2996]	; 12254 <__assert_fail@plt+0xc18>
   1169c:	ldr	r0, [pc, #2996]	; 12258 <__assert_fail@plt+0xc1c>
   116a0:	bl	115b8 <bindtextdomain@plt>
   116a4:	ldr	r0, [pc, #2988]	; 12258 <__assert_fail@plt+0xc1c>
   116a8:	bl	11354 <textdomain@plt>
   116ac:	ldr	r0, [pc, #2984]	; 1225c <__assert_fail@plt+0xc20>
   116b0:	bl	18794 <__assert_fail@plt+0x7158>
   116b4:	str	r6, [sp, #16]
   116b8:	mov	r5, #0
   116bc:	ldr	r3, [pc, #2972]	; 12260 <__assert_fail@plt+0xc24>
   116c0:	mov	r1, fp
   116c4:	mov	r0, r8
   116c8:	ldr	r2, [pc, #2964]	; 12264 <__assert_fail@plt+0xc28>
   116cc:	str	r5, [sp]
   116d0:	bl	11444 <getopt_long@plt>
   116d4:	cmn	r0, #1
   116d8:	bne	11720 <__assert_fail@plt+0xe4>
   116dc:	ldr	sl, [pc, #2920]	; 1224c <__assert_fail@plt+0xc10>
   116e0:	ldrb	r3, [sl]
   116e4:	cmp	r3, r5
   116e8:	beq	118d0 <__assert_fail@plt+0x294>
   116ec:	cmp	r7, #16
   116f0:	bne	118a4 <__assert_fail@plt+0x268>
   116f4:	cmp	r4, #1
   116f8:	strbne	r5, [sl, #20]
   116fc:	bne	118e0 <__assert_fail@plt+0x2a4>
   11700:	mov	r2, #5
   11704:	ldr	r1, [pc, #2908]	; 12268 <__assert_fail@plt+0xc2c>
   11708:	mov	r0, r5
   1170c:	bl	11324 <dcgettext@plt>
   11710:	mov	r2, r0
   11714:	mov	r1, r5
   11718:	mov	r0, #1
   1171c:	bl	113d8 <error@plt>
   11720:	cmp	r0, #108	; 0x6c
   11724:	beq	11860 <__assert_fail@plt+0x224>
   11728:	bgt	117b8 <__assert_fail@plt+0x17c>
   1172c:	cmp	r0, #76	; 0x4c
   11730:	beq	11878 <__assert_fail@plt+0x23c>
   11734:	bgt	11784 <__assert_fail@plt+0x148>
   11738:	cmn	r0, #2
   1173c:	beq	11870 <__assert_fail@plt+0x234>
   11740:	cmp	r0, #72	; 0x48
   11744:	beq	11880 <__assert_fail@plt+0x244>
   11748:	cmn	r0, #3
   1174c:	bne	11798 <__assert_fail@plt+0x15c>
   11750:	ldr	r3, [pc, #2836]	; 1226c <__assert_fail@plt+0xc30>
   11754:	ldr	r0, [pc, #2836]	; 12270 <__assert_fail@plt+0xc34>
   11758:	ldr	r2, [pc, #2836]	; 12274 <__assert_fail@plt+0xc38>
   1175c:	stmib	sp, {r3, r5}
   11760:	ldr	r3, [pc, #2832]	; 12278 <__assert_fail@plt+0xc3c>
   11764:	ldr	r1, [pc, #2832]	; 1227c <__assert_fail@plt+0xc40>
   11768:	str	r3, [sp]
   1176c:	ldr	r3, [pc, #2828]	; 12280 <__assert_fail@plt+0xc44>
   11770:	ldr	r0, [r0]
   11774:	ldr	r3, [r3]
   11778:	bl	1752c <__assert_fail@plt+0x5ef0>
   1177c:	mov	r0, r5
   11780:	bl	11468 <exit@plt>
   11784:	cmp	r0, #82	; 0x52
   11788:	beq	1182c <__assert_fail@plt+0x1f0>
   1178c:	bgt	117a0 <__assert_fail@plt+0x164>
   11790:	cmp	r0, #80	; 0x50
   11794:	beq	11888 <__assert_fail@plt+0x24c>
   11798:	mov	r0, #1
   1179c:	b	11874 <__assert_fail@plt+0x238>
   117a0:	cmp	r0, #102	; 0x66
   117a4:	beq	116b8 <__assert_fail@plt+0x7c>
   117a8:	cmp	r0, #104	; 0x68
   117ac:	bne	11798 <__assert_fail@plt+0x15c>
   117b0:	mov	r4, r5
   117b4:	b	116b8 <__assert_fail@plt+0x7c>
   117b8:	cmp	r0, #118	; 0x76
   117bc:	beq	11838 <__assert_fail@plt+0x1fc>
   117c0:	bgt	117e8 <__assert_fail@plt+0x1ac>
   117c4:	cmp	r0, #116	; 0x74
   117c8:	ldr	r3, [pc, #2740]	; 12284 <__assert_fail@plt+0xc48>
   117cc:	beq	11854 <__assert_fail@plt+0x218>
   117d0:	bgt	11844 <__assert_fail@plt+0x208>
   117d4:	cmp	r0, #114	; 0x72
   117d8:	bne	11798 <__assert_fail@plt+0x15c>
   117dc:	ldr	r3, [r3]
   117e0:	str	r3, [sl, #8]
   117e4:	b	1184c <__assert_fail@plt+0x210>
   117e8:	movw	r3, #257	; 0x101
   117ec:	cmp	r0, r3
   117f0:	beq	11890 <__assert_fail@plt+0x254>
   117f4:	bgt	11808 <__assert_fail@plt+0x1cc>
   117f8:	cmp	r0, #256	; 0x100
   117fc:	bne	11798 <__assert_fail@plt+0x15c>
   11800:	mov	r4, #1
   11804:	b	116b8 <__assert_fail@plt+0x7c>
   11808:	movw	r3, #258	; 0x102
   1180c:	cmp	r0, r3
   11810:	beq	11898 <__assert_fail@plt+0x25c>
   11814:	movw	r3, #259	; 0x103
   11818:	cmp	r0, r3
   1181c:	bne	11798 <__assert_fail@plt+0x15c>
   11820:	ldr	r3, [pc, #2652]	; 12284 <__assert_fail@plt+0xc48>
   11824:	ldr	r6, [r3]
   11828:	b	116b8 <__assert_fail@plt+0x7c>
   1182c:	mov	r3, #1
   11830:	strb	r3, [sl]
   11834:	b	116b8 <__assert_fail@plt+0x7c>
   11838:	mov	r3, #1
   1183c:	strb	r3, [sl, #1]
   11840:	b	116b8 <__assert_fail@plt+0x7c>
   11844:	ldr	r3, [r3]
   11848:	str	r3, [sl, #4]
   1184c:	mov	r9, #1
   11850:	b	116b8 <__assert_fail@plt+0x7c>
   11854:	ldr	r3, [r3]
   11858:	str	r3, [sl, #12]
   1185c:	b	1184c <__assert_fail@plt+0x210>
   11860:	ldr	r3, [pc, #2588]	; 12284 <__assert_fail@plt+0xc48>
   11864:	ldr	r3, [r3]
   11868:	str	r3, [sl, #16]
   1186c:	b	1184c <__assert_fail@plt+0x210>
   11870:	mov	r0, r5
   11874:	bl	123e8 <__assert_fail@plt+0xdac>
   11878:	mov	r7, #2
   1187c:	b	116b8 <__assert_fail@plt+0x7c>
   11880:	mov	r7, #17
   11884:	b	116b8 <__assert_fail@plt+0x7c>
   11888:	mov	r7, #16
   1188c:	b	116b8 <__assert_fail@plt+0x7c>
   11890:	str	r5, [sp, #16]
   11894:	b	116b8 <__assert_fail@plt+0x7c>
   11898:	mov	r3, #1
   1189c:	str	r3, [sp, #16]
   118a0:	b	116b8 <__assert_fail@plt+0x7c>
   118a4:	cmp	r4, #0
   118a8:	movne	r3, #1
   118ac:	strbne	r3, [sl, #20]
   118b0:	bne	118e0 <__assert_fail@plt+0x2a4>
   118b4:	mov	r2, #5
   118b8:	ldr	r1, [pc, #2504]	; 12288 <__assert_fail@plt+0xc4c>
   118bc:	mov	r0, r4
   118c0:	bl	11324 <dcgettext@plt>
   118c4:	mov	r2, r0
   118c8:	mov	r1, r4
   118cc:	b	11718 <__assert_fail@plt+0xdc>
   118d0:	adds	r4, r4, #0
   118d4:	mov	r7, #16
   118d8:	movne	r4, #1
   118dc:	strb	r4, [sl, #20]
   118e0:	ldr	r2, [pc, #2468]	; 1228c <__assert_fail@plt+0xc50>
   118e4:	cmp	r6, #0
   118e8:	moveq	r4, r9
   118ec:	movne	r4, #1
   118f0:	cmp	r4, #0
   118f4:	ldr	r3, [r2]
   118f8:	mov	r5, r2
   118fc:	sub	r1, r8, r3
   11900:	beq	121f0 <__assert_fail@plt+0xbb4>
   11904:	cmp	r1, #0
   11908:	bgt	1196c <__assert_fail@plt+0x330>
   1190c:	cmp	r3, r8
   11910:	mov	r2, #5
   11914:	blt	11938 <__assert_fail@plt+0x2fc>
   11918:	ldr	r1, [pc, #2416]	; 12290 <__assert_fail@plt+0xc54>
   1191c:	mov	r0, #0
   11920:	bl	11324 <dcgettext@plt>
   11924:	mov	r1, #0
   11928:	mov	r2, r0
   1192c:	mov	r0, r1
   11930:	bl	113d8 <error@plt>
   11934:	b	11798 <__assert_fail@plt+0x15c>
   11938:	ldr	r1, [pc, #2388]	; 12294 <__assert_fail@plt+0xc58>
   1193c:	mov	r0, #0
   11940:	sub	r8, r8, #-1073741823	; 0xc0000001
   11944:	bl	11324 <dcgettext@plt>
   11948:	mov	r4, r0
   1194c:	ldr	r0, [fp, r8, lsl #2]
   11950:	bl	16958 <__assert_fail@plt+0x531c>
   11954:	mov	r1, #0
   11958:	mov	r3, r0
   1195c:	mov	r2, r4
   11960:	mov	r0, r1
   11964:	bl	113d8 <error@plt>
   11968:	b	11798 <__assert_fail@plt+0x15c>
   1196c:	cmp	r6, #0
   11970:	beq	119e8 <__assert_fail@plt+0x3ac>
   11974:	mov	r4, #0
   11978:	add	r1, sp, #28
   1197c:	mov	r0, r6
   11980:	str	r4, [sp, #28]
   11984:	bl	17068 <__assert_fail@plt+0x5a2c>
   11988:	cmp	r0, r4
   1198c:	bge	119cc <__assert_fail@plt+0x390>
   11990:	bl	114b0 <__errno_location@plt>
   11994:	ldr	r1, [pc, #2300]	; 12298 <__assert_fail@plt+0xc5c>
   11998:	mov	r2, #5
   1199c:	ldr	r5, [r0]
   119a0:	mov	r0, r4
   119a4:	bl	11324 <dcgettext@plt>
   119a8:	mov	r4, r0
   119ac:	mov	r1, r6
   119b0:	mov	r0, #4
   119b4:	bl	16774 <__assert_fail@plt+0x5138>
   119b8:	mov	r3, r0
   119bc:	mov	r2, r4
   119c0:	mov	r1, r5
   119c4:	mov	r0, #1
   119c8:	bl	113d8 <error@plt>
   119cc:	ldr	r3, [sp, #28]
   119d0:	cmp	r9, #0
   119d4:	str	r3, [sl, #24]
   119d8:	beq	119ec <__assert_fail@plt+0x3b0>
   119dc:	mov	r2, #5
   119e0:	ldr	r1, [pc, #2228]	; 1229c <__assert_fail@plt+0xc60>
   119e4:	b	1191c <__assert_fail@plt+0x2e0>
   119e8:	str	r6, [sl, #24]
   119ec:	ldrb	r4, [sl]
   119f0:	ldr	r3, [sp, #16]
   119f4:	and	r3, r3, r4
   119f8:	mov	r4, r3
   119fc:	bl	114b0 <__errno_location@plt>
   11a00:	cmp	r4, #0
   11a04:	mov	r9, r0
   11a08:	streq	r4, [sl, #48]	; 0x30
   11a0c:	beq	11a54 <__assert_fail@plt+0x418>
   11a10:	ldr	r0, [pc, #2184]	; 122a0 <__assert_fail@plt+0xc64>
   11a14:	bl	16964 <__assert_fail@plt+0x5328>
   11a18:	cmp	r0, #0
   11a1c:	str	r0, [sl, #48]	; 0x30
   11a20:	bne	11a54 <__assert_fail@plt+0x418>
   11a24:	ldr	r4, [r9]
   11a28:	mov	r2, #5
   11a2c:	ldr	r1, [pc, #2160]	; 122a4 <__assert_fail@plt+0xc68>
   11a30:	bl	11324 <dcgettext@plt>
   11a34:	mov	r5, r0
   11a38:	ldr	r1, [pc, #2152]	; 122a8 <__assert_fail@plt+0xc6c>
   11a3c:	mov	r0, #4
   11a40:	bl	16774 <__assert_fail@plt+0x5138>
   11a44:	mov	r3, r0
   11a48:	mov	r2, r5
   11a4c:	mov	r1, r4
   11a50:	b	119c4 <__assert_fail@plt+0x388>
   11a54:	ldr	r0, [r5]
   11a58:	mov	r2, #0
   11a5c:	orr	r1, r7, #8
   11a60:	add	r0, fp, r0, lsl #2
   11a64:	bl	178ec <__assert_fail@plt+0x62b0>
   11a68:	mov	r3, #1
   11a6c:	str	r0, [sp, #16]
   11a70:	ldr	r0, [sp, #16]
   11a74:	str	r3, [sp, #20]
   11a78:	bl	13d9c <__assert_fail@plt+0x2760>
   11a7c:	subs	r5, r0, #0
   11a80:	bne	11afc <__assert_fail@plt+0x4c0>
   11a84:	ldr	r4, [r9]
   11a88:	cmp	r4, #0
   11a8c:	beq	11ab0 <__assert_fail@plt+0x474>
   11a90:	mov	r2, #5
   11a94:	ldr	r1, [pc, #2064]	; 122ac <__assert_fail@plt+0xc70>
   11a98:	bl	11324 <dcgettext@plt>
   11a9c:	mov	r2, r0
   11aa0:	mov	r1, r4
   11aa4:	mov	r0, r5
   11aa8:	bl	113d8 <error@plt>
   11aac:	str	r5, [sp, #20]
   11ab0:	ldr	r0, [sp, #16]
   11ab4:	bl	13c84 <__assert_fail@plt+0x2648>
   11ab8:	cmp	r0, #0
   11abc:	beq	11aec <__assert_fail@plt+0x4b0>
   11ac0:	ldr	r4, [r9]
   11ac4:	mov	r2, #5
   11ac8:	mov	r0, #0
   11acc:	ldr	r1, [pc, #2012]	; 122b0 <__assert_fail@plt+0xc74>
   11ad0:	bl	11324 <dcgettext@plt>
   11ad4:	mov	r2, r0
   11ad8:	mov	r0, #0
   11adc:	mov	r1, r4
   11ae0:	bl	113d8 <error@plt>
   11ae4:	mov	r3, #0
   11ae8:	str	r3, [sp, #20]
   11aec:	ldr	r3, [sp, #20]
   11af0:	eor	r0, r3, #1
   11af4:	add	sp, sp, #36	; 0x24
   11af8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11afc:	ldrh	r3, [r5, #56]	; 0x38
   11b00:	ldr	r6, [r5, #24]
   11b04:	ldr	r4, [r5, #28]
   11b08:	sub	r3, r3, #1
   11b0c:	cmp	r3, #9
   11b10:	ldrls	pc, [pc, r3, lsl #2]
   11b14:	b	11e20 <__assert_fail@plt+0x7e4>
   11b18:	andeq	r1, r1, r0, asr #22
   11b1c:	ldrdeq	r1, [r1], -r0
   11b20:	andeq	r1, r1, r0, lsr #28
   11b24:	andeq	r1, r1, r0, asr #27
   11b28:	andeq	r1, r1, r0, lsr #28
   11b2c:	andeq	r1, r1, ip, asr ip
   11b30:	muleq	r1, r0, sp
   11b34:	andeq	r1, r1, r0, lsr #28
   11b38:	andeq	r1, r1, r0, lsr #28
   11b3c:	andeq	r1, r1, ip, lsr sp
   11b40:	ldrb	fp, [sl]
   11b44:	cmp	fp, #0
   11b48:	beq	11e20 <__assert_fail@plt+0x7e4>
   11b4c:	ldr	r3, [sl, #48]	; 0x30
   11b50:	cmp	r3, #0
   11b54:	beq	11c00 <__assert_fail@plt+0x5c4>
   11b58:	ldrd	r6, [r3]
   11b5c:	ldrd	r0, [r5, #160]	; 0xa0
   11b60:	cmp	r1, r7
   11b64:	cmpeq	r0, r6
   11b68:	bne	11c00 <__assert_fail@plt+0x5c4>
   11b6c:	ldrd	r2, [r3, #8]
   11b70:	ldrd	r0, [r5, #64]	; 0x40
   11b74:	cmp	r1, r3
   11b78:	cmpeq	r0, r2
   11b7c:	bne	11c00 <__assert_fail@plt+0x5c4>
   11b80:	ldr	r1, [pc, #1824]	; 122a8 <__assert_fail@plt+0xc6c>
   11b84:	mov	r0, r4
   11b88:	bl	11294 <strcmp@plt>
   11b8c:	subs	r6, r0, #0
   11b90:	mov	r2, #5
   11b94:	bne	11c0c <__assert_fail@plt+0x5d0>
   11b98:	ldr	r1, [pc, #1812]	; 122b4 <__assert_fail@plt+0xc78>
   11b9c:	bl	11324 <dcgettext@plt>
   11ba0:	mov	r7, r0
   11ba4:	mov	r1, r4
   11ba8:	mov	r0, #4
   11bac:	bl	16774 <__assert_fail@plt+0x5138>
   11bb0:	mov	r3, r0
   11bb4:	mov	r2, r7
   11bb8:	mov	r1, r6
   11bbc:	mov	r0, r6
   11bc0:	bl	113d8 <error@plt>
   11bc4:	mov	r2, #5
   11bc8:	ldr	r1, [pc, #1768]	; 122b8 <__assert_fail@plt+0xc7c>
   11bcc:	mov	r0, #0
   11bd0:	bl	11324 <dcgettext@plt>
   11bd4:	mov	r1, #0
   11bd8:	mov	r2, r0
   11bdc:	mov	r0, r1
   11be0:	bl	113d8 <error@plt>
   11be4:	mov	r2, #4
   11be8:	mov	r1, r5
   11bec:	ldr	r0, [sp, #16]
   11bf0:	bl	14360 <__assert_fail@plt+0x2d24>
   11bf4:	ldr	r0, [sp, #16]
   11bf8:	bl	13d9c <__assert_fail@plt+0x2760>
   11bfc:	mov	fp, #0
   11c00:	ldr	r3, [sp, #20]
   11c04:	and	r3, r3, fp
   11c08:	b	11a70 <__assert_fail@plt+0x434>
   11c0c:	ldr	r1, [pc, #1704]	; 122bc <__assert_fail@plt+0xc80>
   11c10:	mov	r0, #0
   11c14:	bl	11324 <dcgettext@plt>
   11c18:	mov	r6, r0
   11c1c:	mov	r2, r4
   11c20:	mov	r1, #4
   11c24:	mov	r0, #0
   11c28:	bl	16708 <__assert_fail@plt+0x50cc>
   11c2c:	mov	r4, r0
   11c30:	ldr	r2, [pc, #1648]	; 122a8 <__assert_fail@plt+0xc6c>
   11c34:	mov	r1, #4
   11c38:	mov	r0, #1
   11c3c:	bl	16708 <__assert_fail@plt+0x50cc>
   11c40:	mov	r1, #0
   11c44:	mov	r3, r4
   11c48:	str	r0, [sp]
   11c4c:	mov	r2, r6
   11c50:	mov	r0, r1
   11c54:	bl	113d8 <error@plt>
   11c58:	b	11bc4 <__assert_fail@plt+0x588>
   11c5c:	ldrb	fp, [sl]
   11c60:	cmp	fp, #0
   11c64:	moveq	fp, #1
   11c68:	beq	11c00 <__assert_fail@plt+0x5c4>
   11c6c:	ldrh	r3, [r5, #56]	; 0x38
   11c70:	cmp	r3, #6
   11c74:	bne	11e78 <__assert_fail@plt+0x83c>
   11c78:	cmp	fp, #0
   11c7c:	beq	11d1c <__assert_fail@plt+0x6e0>
   11c80:	ldr	ip, [sl, #48]	; 0x30
   11c84:	cmp	ip, #0
   11c88:	beq	11e80 <__assert_fail@plt+0x844>
   11c8c:	ldrd	r2, [ip]
   11c90:	ldrd	r0, [r5, #160]	; 0xa0
   11c94:	cmp	r1, r3
   11c98:	cmpeq	r0, r2
   11c9c:	bne	11e80 <__assert_fail@plt+0x844>
   11ca0:	ldrd	r0, [ip, #8]
   11ca4:	ldrd	r2, [r5, #64]	; 0x40
   11ca8:	cmp	r3, r1
   11cac:	cmpeq	r2, r0
   11cb0:	bne	11e80 <__assert_fail@plt+0x844>
   11cb4:	ldr	r1, [pc, #1516]	; 122a8 <__assert_fail@plt+0xc6c>
   11cb8:	mov	r0, r4
   11cbc:	bl	11294 <strcmp@plt>
   11cc0:	subs	r6, r0, #0
   11cc4:	mov	r2, #5
   11cc8:	bne	11e28 <__assert_fail@plt+0x7ec>
   11ccc:	ldr	r1, [pc, #1504]	; 122b4 <__assert_fail@plt+0xc78>
   11cd0:	bl	11324 <dcgettext@plt>
   11cd4:	mov	r7, r0
   11cd8:	mov	r1, r4
   11cdc:	mov	r0, #4
   11ce0:	bl	16774 <__assert_fail@plt+0x5138>
   11ce4:	mov	r3, r0
   11ce8:	mov	r2, r7
   11cec:	mov	r1, r6
   11cf0:	mov	r0, r6
   11cf4:	bl	113d8 <error@plt>
   11cf8:	mov	r2, #5
   11cfc:	ldr	r1, [pc, #1460]	; 122b8 <__assert_fail@plt+0xc7c>
   11d00:	mov	r0, #0
   11d04:	bl	11324 <dcgettext@plt>
   11d08:	mov	r1, #0
   11d0c:	mov	r2, r0
   11d10:	mov	r0, r1
   11d14:	bl	113d8 <error@plt>
   11d18:	mov	fp, #0
   11d1c:	ldrb	r3, [sl]
   11d20:	cmp	r3, #0
   11d24:	bne	11c00 <__assert_fail@plt+0x5c4>
   11d28:	mov	r2, #4
   11d2c:	mov	r1, r5
   11d30:	ldr	r0, [sp, #16]
   11d34:	bl	14360 <__assert_fail@plt+0x2d24>
   11d38:	b	11c00 <__assert_fail@plt+0x5c4>
   11d3c:	ldr	r3, [r5, #48]	; 0x30
   11d40:	cmp	r3, #0
   11d44:	bne	11d60 <__assert_fail@plt+0x724>
   11d48:	ldr	r3, [r5, #16]
   11d4c:	cmp	r3, #0
   11d50:	moveq	fp, #1
   11d54:	moveq	r2, fp
   11d58:	streq	fp, [r5, #16]
   11d5c:	beq	11d2c <__assert_fail@plt+0x6f0>
   11d60:	ldr	r1, [pc, #1368]	; 122c0 <__assert_fail@plt+0xc84>
   11d64:	mov	r2, #5
   11d68:	ldr	r7, [r5, #32]
   11d6c:	mov	r0, #0
   11d70:	bl	11324 <dcgettext@plt>
   11d74:	mov	r8, r0
   11d78:	mov	r1, r4
   11d7c:	mov	r0, #4
   11d80:	bl	16774 <__assert_fail@plt+0x5138>
   11d84:	mov	r3, r0
   11d88:	mov	r2, r8
   11d8c:	b	11dac <__assert_fail@plt+0x770>
   11d90:	mov	r2, r4
   11d94:	mov	r1, #3
   11d98:	ldr	r7, [r5, #32]
   11d9c:	mov	r0, #0
   11da0:	bl	16818 <__assert_fail@plt+0x51dc>
   11da4:	ldr	r2, [pc, #1304]	; 122c4 <__assert_fail@plt+0xc88>
   11da8:	mov	r3, r0
   11dac:	mov	r1, r7
   11db0:	mov	r0, #0
   11db4:	bl	113d8 <error@plt>
   11db8:	mov	fp, #0
   11dbc:	b	11c6c <__assert_fail@plt+0x630>
   11dc0:	mov	r2, #5
   11dc4:	ldr	r1, [pc, #1276]	; 122c8 <__assert_fail@plt+0xc8c>
   11dc8:	ldr	r7, [r5, #32]
   11dcc:	b	11d6c <__assert_fail@plt+0x730>
   11dd0:	mov	r1, r5
   11dd4:	ldr	r0, [sp, #16]
   11dd8:	bl	17934 <__assert_fail@plt+0x62f8>
   11ddc:	cmp	r0, #0
   11de0:	beq	11e20 <__assert_fail@plt+0x7e4>
   11de4:	mov	r2, #5
   11de8:	ldr	r1, [pc, #1244]	; 122cc <__assert_fail@plt+0xc90>
   11dec:	mov	r0, #0
   11df0:	bl	11324 <dcgettext@plt>
   11df4:	mov	r5, r0
   11df8:	mov	r2, r4
   11dfc:	mov	r1, #3
   11e00:	mov	r0, #0
   11e04:	bl	16818 <__assert_fail@plt+0x51dc>
   11e08:	mov	r1, #0
   11e0c:	mov	r3, r0
   11e10:	mov	r2, r5
   11e14:	mov	r0, r1
   11e18:	bl	113d8 <error@plt>
   11e1c:	b	11bfc <__assert_fail@plt+0x5c0>
   11e20:	mov	fp, #1
   11e24:	b	11c6c <__assert_fail@plt+0x630>
   11e28:	ldr	r1, [pc, #1164]	; 122bc <__assert_fail@plt+0xc80>
   11e2c:	mov	r0, #0
   11e30:	bl	11324 <dcgettext@plt>
   11e34:	mov	r6, r0
   11e38:	mov	r2, r4
   11e3c:	mov	r1, #4
   11e40:	mov	r0, #0
   11e44:	bl	16708 <__assert_fail@plt+0x50cc>
   11e48:	mov	r4, r0
   11e4c:	ldr	r2, [pc, #1108]	; 122a8 <__assert_fail@plt+0xc6c>
   11e50:	mov	r1, #4
   11e54:	mov	r0, #1
   11e58:	bl	16708 <__assert_fail@plt+0x50cc>
   11e5c:	mov	r1, #0
   11e60:	mov	r3, r4
   11e64:	str	r0, [sp]
   11e68:	mov	r2, r6
   11e6c:	mov	r0, r1
   11e70:	bl	113d8 <error@plt>
   11e74:	b	11cf8 <__assert_fail@plt+0x6bc>
   11e78:	cmp	fp, #0
   11e7c:	beq	11d1c <__assert_fail@plt+0x6e0>
   11e80:	ldrb	r3, [sl, #1]
   11e84:	cmp	r3, #0
   11e88:	beq	11ebc <__assert_fail@plt+0x880>
   11e8c:	mov	r2, #5
   11e90:	ldr	r1, [pc, #1080]	; 122d0 <__assert_fail@plt+0xc94>
   11e94:	mov	r0, #0
   11e98:	bl	11324 <dcgettext@plt>
   11e9c:	mov	r7, r0
   11ea0:	mov	r1, r4
   11ea4:	mov	r0, #4
   11ea8:	bl	16774 <__assert_fail@plt+0x5138>
   11eac:	mov	r2, r0
   11eb0:	mov	r1, r7
   11eb4:	mov	r0, #1
   11eb8:	bl	114e0 <__printf_chk@plt>
   11ebc:	ldr	r4, [sl, #24]
   11ec0:	mov	fp, #0
   11ec4:	ldr	r3, [sp, #16]
   11ec8:	str	fp, [sp, #28]
   11ecc:	cmp	r4, fp
   11ed0:	ldr	r7, [r3, #32]
   11ed4:	bne	12128 <__assert_fail@plt+0xaec>
   11ed8:	add	r2, sp, #28
   11edc:	mov	r1, r6
   11ee0:	ldrb	r3, [sl, #20]
   11ee4:	mov	r0, r7
   11ee8:	cmp	r3, fp
   11eec:	beq	11f40 <__assert_fail@plt+0x904>
   11ef0:	bl	169a4 <__assert_fail@plt+0x5368>
   11ef4:	cmp	r0, #0
   11ef8:	bge	11f48 <__assert_fail@plt+0x90c>
   11efc:	ldr	r4, [r9]
   11f00:	cmp	r4, #61	; 0x3d
   11f04:	beq	11f48 <__assert_fail@plt+0x90c>
   11f08:	ldr	r1, [pc, #904]	; 12298 <__assert_fail@plt+0xc5c>
   11f0c:	mov	r2, #5
   11f10:	mov	r0, #0
   11f14:	bl	11324 <dcgettext@plt>
   11f18:	mov	r7, r0
   11f1c:	mov	r1, r6
   11f20:	mov	r0, #4
   11f24:	bl	16774 <__assert_fail@plt+0x5138>
   11f28:	mov	r3, r0
   11f2c:	mov	r2, r7
   11f30:	mov	r1, r4
   11f34:	mov	r0, #0
   11f38:	bl	113d8 <error@plt>
   11f3c:	b	11d18 <__assert_fail@plt+0x6dc>
   11f40:	bl	16b3c <__assert_fail@plt+0x5500>
   11f44:	b	11ef4 <__assert_fail@plt+0x8b8>
   11f48:	ldr	r4, [sp, #28]
   11f4c:	cmp	r4, #0
   11f50:	moveq	r2, #5
   11f54:	ldreq	r1, [pc, #888]	; 122d4 <__assert_fail@plt+0xc98>
   11f58:	beq	11f10 <__assert_fail@plt+0x8d4>
   11f5c:	mov	r0, r4
   11f60:	bl	112f4 <context_new@plt>
   11f64:	subs	fp, r0, #0
   11f68:	bne	11fa0 <__assert_fail@plt+0x964>
   11f6c:	ldr	r6, [r9]
   11f70:	mov	r2, #5
   11f74:	ldr	r1, [pc, #860]	; 122d8 <__assert_fail@plt+0xc9c>
   11f78:	bl	11324 <dcgettext@plt>
   11f7c:	mov	r7, r0
   11f80:	mov	r0, r4
   11f84:	bl	16958 <__assert_fail@plt+0x531c>
   11f88:	mov	r3, r0
   11f8c:	mov	r2, r7
   11f90:	mov	r1, r6
   11f94:	mov	r0, fp
   11f98:	bl	113d8 <error@plt>
   11f9c:	b	11d1c <__assert_fail@plt+0x6e0>
   11fa0:	ldr	r1, [sl, #4]
   11fa4:	cmp	r1, #0
   11fa8:	bne	120c8 <__assert_fail@plt+0xa8c>
   11fac:	mov	r4, #1
   11fb0:	ldr	r1, [sl, #16]
   11fb4:	cmp	r1, #0
   11fb8:	beq	12008 <__assert_fail@plt+0x9cc>
   11fbc:	mov	r0, fp
   11fc0:	bl	115c4 <context_range_set@plt>
   11fc4:	cmp	r0, #0
   11fc8:	beq	12008 <__assert_fail@plt+0x9cc>
   11fcc:	ldr	r4, [r9]
   11fd0:	mov	r2, #5
   11fd4:	mov	r0, #0
   11fd8:	ldr	r1, [pc, #764]	; 122dc <__assert_fail@plt+0xca0>
   11fdc:	bl	11324 <dcgettext@plt>
   11fe0:	mov	r8, r0
   11fe4:	ldr	r0, [sl, #16]
   11fe8:	bl	16958 <__assert_fail@plt+0x531c>
   11fec:	mov	r1, r4
   11ff0:	ldr	r3, [pc, #744]	; 122e0 <__assert_fail@plt+0xca4>
   11ff4:	mov	r2, r8
   11ff8:	str	r0, [sp]
   11ffc:	mov	r0, #0
   12000:	mov	r4, #0
   12004:	bl	113d8 <error@plt>
   12008:	ldr	r1, [sl, #8]
   1200c:	cmp	r1, #0
   12010:	beq	12060 <__assert_fail@plt+0xa24>
   12014:	mov	r0, fp
   12018:	bl	11318 <context_role_set@plt>
   1201c:	cmp	r0, #0
   12020:	beq	12060 <__assert_fail@plt+0xa24>
   12024:	ldr	r4, [r9]
   12028:	mov	r2, #5
   1202c:	mov	r0, #0
   12030:	ldr	r1, [pc, #676]	; 122dc <__assert_fail@plt+0xca0>
   12034:	bl	11324 <dcgettext@plt>
   12038:	mov	r8, r0
   1203c:	ldr	r0, [sl, #8]
   12040:	bl	16958 <__assert_fail@plt+0x531c>
   12044:	mov	r1, r4
   12048:	ldr	r3, [pc, #660]	; 122e4 <__assert_fail@plt+0xca8>
   1204c:	mov	r2, r8
   12050:	str	r0, [sp]
   12054:	mov	r0, #0
   12058:	mov	r4, #0
   1205c:	bl	113d8 <error@plt>
   12060:	ldr	r1, [sl, #12]
   12064:	cmp	r1, #0
   12068:	beq	12114 <__assert_fail@plt+0xad8>
   1206c:	mov	r0, fp
   12070:	bl	11330 <context_type_set@plt>
   12074:	cmp	r0, #0
   12078:	beq	12114 <__assert_fail@plt+0xad8>
   1207c:	ldr	r4, [r9]
   12080:	mov	r2, #5
   12084:	mov	r0, #0
   12088:	ldr	r1, [pc, #588]	; 122dc <__assert_fail@plt+0xca0>
   1208c:	bl	11324 <dcgettext@plt>
   12090:	mov	r6, r0
   12094:	ldr	r0, [sl, #12]
   12098:	bl	16958 <__assert_fail@plt+0x531c>
   1209c:	ldr	r3, [pc, #580]	; 122e8 <__assert_fail@plt+0xcac>
   120a0:	mov	r2, r6
   120a4:	mov	r1, r4
   120a8:	str	r0, [sp]
   120ac:	mov	r0, #0
   120b0:	bl	113d8 <error@plt>
   120b4:	ldr	r4, [r9]
   120b8:	mov	r0, fp
   120bc:	bl	11438 <context_free@plt>
   120c0:	str	r4, [r9]
   120c4:	b	11d18 <__assert_fail@plt+0x6dc>
   120c8:	bl	11474 <context_user_set@plt>
   120cc:	cmp	r0, #0
   120d0:	beq	11fac <__assert_fail@plt+0x970>
   120d4:	ldr	r4, [r9]
   120d8:	mov	r2, #5
   120dc:	mov	r0, #0
   120e0:	ldr	r1, [pc, #500]	; 122dc <__assert_fail@plt+0xca0>
   120e4:	bl	11324 <dcgettext@plt>
   120e8:	mov	r8, r0
   120ec:	ldr	r0, [sl, #4]
   120f0:	bl	16958 <__assert_fail@plt+0x531c>
   120f4:	mov	r1, r4
   120f8:	ldr	r3, [pc, #492]	; 122ec <__assert_fail@plt+0xcb0>
   120fc:	mov	r2, r8
   12100:	str	r0, [sp]
   12104:	mov	r0, #0
   12108:	mov	r4, #0
   1210c:	bl	113d8 <error@plt>
   12110:	b	11fb0 <__assert_fail@plt+0x974>
   12114:	cmp	r4, #0
   12118:	beq	120b4 <__assert_fail@plt+0xa78>
   1211c:	mov	r0, fp
   12120:	bl	115d0 <context_str@plt>
   12124:	mov	r4, r0
   12128:	ldr	r1, [sp, #28]
   1212c:	cmp	r1, #0
   12130:	beq	1216c <__assert_fail@plt+0xb30>
   12134:	mov	r0, r4
   12138:	bl	11294 <strcmp@plt>
   1213c:	cmp	r0, #0
   12140:	bne	1216c <__assert_fail@plt+0xb30>
   12144:	mov	r4, #0
   12148:	ldr	r3, [sl, #24]
   1214c:	cmp	r3, #0
   12150:	bne	12164 <__assert_fail@plt+0xb28>
   12154:	mov	r0, fp
   12158:	bl	11438 <context_free@plt>
   1215c:	ldr	r0, [sp, #28]
   12160:	bl	115ac <freecon@plt>
   12164:	eor	fp, r4, #1
   12168:	b	11d1c <__assert_fail@plt+0x6e0>
   1216c:	ldrb	r3, [sl, #20]
   12170:	mov	r2, r4
   12174:	mov	r1, r6
   12178:	mov	r0, r7
   1217c:	cmp	r3, #0
   12180:	beq	121e8 <__assert_fail@plt+0xbac>
   12184:	bl	16cd4 <__assert_fail@plt+0x5698>
   12188:	cmp	r0, #0
   1218c:	beq	12144 <__assert_fail@plt+0xb08>
   12190:	mov	r2, #5
   12194:	ldr	r1, [pc, #340]	; 122f0 <__assert_fail@plt+0xcb4>
   12198:	mov	r0, #0
   1219c:	ldr	r7, [r9]
   121a0:	bl	11324 <dcgettext@plt>
   121a4:	mov	r8, r0
   121a8:	mov	r2, r6
   121ac:	mov	r1, #4
   121b0:	mov	r0, #0
   121b4:	bl	16708 <__assert_fail@plt+0x50cc>
   121b8:	mov	r6, r0
   121bc:	mov	r1, r4
   121c0:	mov	r0, #1
   121c4:	mov	r4, #1
   121c8:	bl	16950 <__assert_fail@plt+0x5314>
   121cc:	mov	r3, r6
   121d0:	mov	r2, r8
   121d4:	str	r0, [sp]
   121d8:	mov	r1, r7
   121dc:	mov	r0, #0
   121e0:	bl	113d8 <error@plt>
   121e4:	b	12148 <__assert_fail@plt+0xb0c>
   121e8:	bl	16e6c <__assert_fail@plt+0x5830>
   121ec:	b	12188 <__assert_fail@plt+0xb4c>
   121f0:	cmp	r1, #1
   121f4:	ble	1190c <__assert_fail@plt+0x2d0>
   121f8:	add	r1, r3, #1
   121fc:	ldr	r3, [fp, r3, lsl #2]
   12200:	str	r1, [r2]
   12204:	str	r3, [sl, #24]
   12208:	bl	11288 <is_selinux_enabled@plt>
   1220c:	cmp	r0, #0
   12210:	ble	119ec <__assert_fail@plt+0x3b0>
   12214:	ldr	r0, [sl, #24]
   12218:	bl	113e4 <security_check_context@plt>
   1221c:	cmp	r0, #0
   12220:	bge	119ec <__assert_fail@plt+0x3b0>
   12224:	bl	114b0 <__errno_location@plt>
   12228:	mov	r2, #5
   1222c:	ldr	r1, [pc, #192]	; 122f4 <__assert_fail@plt+0xcb8>
   12230:	ldr	r5, [r0]
   12234:	mov	r0, r4
   12238:	bl	11324 <dcgettext@plt>
   1223c:	mov	r4, r0
   12240:	ldr	r0, [sl, #24]
   12244:	bl	16958 <__assert_fail@plt+0x531c>
   12248:	b	119b8 <__assert_fail@plt+0x37c>
   1224c:	ldrdeq	sl, [r2], -r0
   12250:	andeq	r9, r1, r0, lsr #32
   12254:	andeq	r9, r1, sl, ror #2
   12258:	andeq	r9, r1, r7, asr #1
   1225c:	andeq	r2, r1, r0, lsl r7
   12260:	andeq	r8, r1, r8, asr #16
   12264:	muleq	r1, sp, r1
   12268:	andeq	r9, r1, ip, lsr #3
   1226c:	andeq	r9, r1, r2, lsl #3
   12270:	andeq	sl, r2, r4, asr #3
   12274:	andeq	r9, r1, r3, asr #1
   12278:	andeq	r9, r1, pc, lsl #3
   1227c:	andeq	r8, r1, r8, lsr #18
   12280:	andeq	sl, r2, r8, ror #2
   12284:	andeq	sl, r2, r8, asr #3
   12288:	ldrdeq	r9, [r1], -r6
   1228c:			; <UNDEFINED> instruction: 0x0002a1b8
   12290:	andeq	r9, r1, r8, ror #3
   12294:	strdeq	r9, [r1], -r8
   12298:	andeq	r9, r1, r1, lsl r2
   1229c:	andeq	r9, r1, sl, asr #4
   122a0:	strdeq	sl, [r2], -r0
   122a4:	andeq	r9, r1, r8, ror r2
   122a8:	strdeq	r9, [r1], -r0
   122ac:	muleq	r1, r7, r2
   122b0:	andeq	r9, r1, r7, lsl #10
   122b4:	andeq	r9, r1, r7, lsr #5
   122b8:	andeq	r9, r1, lr, lsl #6
   122bc:	ldrdeq	r9, [r1], -r4
   122c0:	andeq	r9, r1, pc, lsr r3
   122c4:	ldrdeq	r9, [r1], -r5
   122c8:	andeq	r9, r1, r0, asr r3
   122cc:	andeq	r9, r1, r9, ror #6
   122d0:	andeq	r9, r1, r3, lsr #8
   122d4:	andeq	r9, r1, r4, asr #8
   122d8:	andeq	r9, r1, r5, ror r4
   122dc:	muleq	r1, fp, r4
   122e0:	ldrdeq	r9, [r1], -r2
   122e4:	ldrdeq	r9, [r1], -r8
   122e8:	ldrdeq	r9, [r1], -sp
   122ec:	andeq	r9, r1, sp, asr #9
   122f0:	andeq	r9, r1, r2, ror #9
   122f4:	andeq	r9, r1, r6, lsr r2
   122f8:	mov	fp, #0
   122fc:	mov	lr, #0
   12300:	pop	{r1}		; (ldr r1, [sp], #4)
   12304:	mov	r2, sp
   12308:	push	{r2}		; (str r2, [sp, #-4]!)
   1230c:	push	{r0}		; (str r0, [sp, #-4]!)
   12310:	ldr	ip, [pc, #16]	; 12328 <__assert_fail@plt+0xcec>
   12314:	push	{ip}		; (str ip, [sp, #-4]!)
   12318:	ldr	r0, [pc, #12]	; 1232c <__assert_fail@plt+0xcf0>
   1231c:	ldr	r3, [pc, #12]	; 12330 <__assert_fail@plt+0xcf4>
   12320:	bl	11414 <__libc_start_main@plt>
   12324:	bl	11600 <abort@plt>
   12328:	muleq	r1, r0, r7
   1232c:	andeq	r1, r1, r0, ror #12
   12330:	andeq	r8, r1, r0, lsr r7
   12334:	ldr	r3, [pc, #20]	; 12350 <__assert_fail@plt+0xd14>
   12338:	ldr	r2, [pc, #20]	; 12354 <__assert_fail@plt+0xd18>
   1233c:	add	r3, pc, r3
   12340:	ldr	r2, [r3, r2]
   12344:	cmp	r2, #0
   12348:	bxeq	lr
   1234c:	b	1142c <__gmon_start__@plt>
   12350:			; <UNDEFINED> instruction: 0x00017cbc
   12354:	andeq	r0, r0, ip, asr r1
   12358:	ldr	r0, [pc, #24]	; 12378 <__assert_fail@plt+0xd3c>
   1235c:	ldr	r3, [pc, #24]	; 1237c <__assert_fail@plt+0xd40>
   12360:	cmp	r3, r0
   12364:	bxeq	lr
   12368:	ldr	r3, [pc, #16]	; 12380 <__assert_fail@plt+0xd44>
   1236c:	cmp	r3, #0
   12370:	bxeq	lr
   12374:	bx	r3
   12378:			; <UNDEFINED> instruction: 0x0002a1b0
   1237c:			; <UNDEFINED> instruction: 0x0002a1b0
   12380:	andeq	r0, r0, r0
   12384:	ldr	r0, [pc, #36]	; 123b0 <__assert_fail@plt+0xd74>
   12388:	ldr	r1, [pc, #36]	; 123b4 <__assert_fail@plt+0xd78>
   1238c:	sub	r1, r1, r0
   12390:	asr	r1, r1, #2
   12394:	add	r1, r1, r1, lsr #31
   12398:	asrs	r1, r1, #1
   1239c:	bxeq	lr
   123a0:	ldr	r3, [pc, #16]	; 123b8 <__assert_fail@plt+0xd7c>
   123a4:	cmp	r3, #0
   123a8:	bxeq	lr
   123ac:	bx	r3
   123b0:			; <UNDEFINED> instruction: 0x0002a1b0
   123b4:			; <UNDEFINED> instruction: 0x0002a1b0
   123b8:	andeq	r0, r0, r0
   123bc:	push	{r4, lr}
   123c0:	ldr	r4, [pc, #24]	; 123e0 <__assert_fail@plt+0xda4>
   123c4:	ldrb	r3, [r4]
   123c8:	cmp	r3, #0
   123cc:	popne	{r4, pc}
   123d0:	bl	12358 <__assert_fail@plt+0xd1c>
   123d4:	mov	r3, #1
   123d8:	strb	r3, [r4]
   123dc:	pop	{r4, pc}
   123e0:	andeq	sl, r2, ip, asr #3
   123e4:	b	12384 <__assert_fail@plt+0xd48>
   123e8:	subs	r5, r0, #0
   123ec:	push	{r7, lr}
   123f0:	sub	sp, sp, #64	; 0x40
   123f4:	ldr	r4, [pc, #648]	; 12684 <__assert_fail@plt+0x1048>
   123f8:	beq	12430 <__assert_fail@plt+0xdf4>
   123fc:	mov	r2, #5
   12400:	mov	r0, #0
   12404:	ldr	r3, [pc, #636]	; 12688 <__assert_fail@plt+0x104c>
   12408:	ldr	r1, [pc, #636]	; 1268c <__assert_fail@plt+0x1050>
   1240c:	ldr	r6, [r3]
   12410:	bl	11324 <dcgettext@plt>
   12414:	mov	r2, r0
   12418:	mov	r1, #1
   1241c:	ldr	r3, [r4]
   12420:	mov	r0, r6
   12424:	bl	114f8 <__fprintf_chk@plt>
   12428:	mov	r0, r5
   1242c:	bl	11468 <exit@plt>
   12430:	mov	r2, #5
   12434:	ldr	r1, [pc, #596]	; 12690 <__assert_fail@plt+0x1054>
   12438:	add	r6, sp, #8
   1243c:	bl	11324 <dcgettext@plt>
   12440:	ldr	r3, [r4]
   12444:	mov	r1, r0
   12448:	mov	r0, #1
   1244c:	ldr	r4, [pc, #576]	; 12694 <__assert_fail@plt+0x1058>
   12450:	ldr	r7, [pc, #576]	; 12698 <__assert_fail@plt+0x105c>
   12454:	mov	r2, r3
   12458:	str	r3, [sp]
   1245c:	bl	114e0 <__printf_chk@plt>
   12460:	mov	r2, #5
   12464:	ldr	r1, [pc, #560]	; 1269c <__assert_fail@plt+0x1060>
   12468:	mov	r0, r5
   1246c:	bl	11324 <dcgettext@plt>
   12470:	ldr	r1, [r4]
   12474:	bl	11270 <fputs_unlocked@plt>
   12478:	mov	r2, #5
   1247c:	ldr	r1, [pc, #540]	; 126a0 <__assert_fail@plt+0x1064>
   12480:	mov	r0, r5
   12484:	bl	11324 <dcgettext@plt>
   12488:	ldr	r1, [r4]
   1248c:	bl	11270 <fputs_unlocked@plt>
   12490:	mov	r2, #5
   12494:	ldr	r1, [pc, #520]	; 126a4 <__assert_fail@plt+0x1068>
   12498:	mov	r0, r5
   1249c:	bl	11324 <dcgettext@plt>
   124a0:	ldr	r1, [r4]
   124a4:	bl	11270 <fputs_unlocked@plt>
   124a8:	mov	r2, #5
   124ac:	ldr	r1, [pc, #500]	; 126a8 <__assert_fail@plt+0x106c>
   124b0:	mov	r0, r5
   124b4:	bl	11324 <dcgettext@plt>
   124b8:	ldr	r1, [r4]
   124bc:	bl	11270 <fputs_unlocked@plt>
   124c0:	mov	r2, #5
   124c4:	ldr	r1, [pc, #480]	; 126ac <__assert_fail@plt+0x1070>
   124c8:	mov	r0, r5
   124cc:	bl	11324 <dcgettext@plt>
   124d0:	ldr	r1, [r4]
   124d4:	bl	11270 <fputs_unlocked@plt>
   124d8:	mov	r2, #5
   124dc:	ldr	r1, [pc, #460]	; 126b0 <__assert_fail@plt+0x1074>
   124e0:	mov	r0, r5
   124e4:	bl	11324 <dcgettext@plt>
   124e8:	ldr	r1, [r4]
   124ec:	bl	11270 <fputs_unlocked@plt>
   124f0:	mov	r2, #5
   124f4:	ldr	r1, [pc, #440]	; 126b4 <__assert_fail@plt+0x1078>
   124f8:	mov	r0, r5
   124fc:	bl	11324 <dcgettext@plt>
   12500:	ldr	r1, [r4]
   12504:	bl	11270 <fputs_unlocked@plt>
   12508:	mov	r2, #5
   1250c:	ldr	r1, [pc, #420]	; 126b8 <__assert_fail@plt+0x107c>
   12510:	mov	r0, r5
   12514:	bl	11324 <dcgettext@plt>
   12518:	ldr	r1, [r4]
   1251c:	bl	11270 <fputs_unlocked@plt>
   12520:	mov	r2, #5
   12524:	ldr	r1, [pc, #400]	; 126bc <__assert_fail@plt+0x1080>
   12528:	mov	r0, r5
   1252c:	bl	11324 <dcgettext@plt>
   12530:	ldr	r1, [r4]
   12534:	bl	11270 <fputs_unlocked@plt>
   12538:	mov	r2, #5
   1253c:	ldr	r1, [pc, #380]	; 126c0 <__assert_fail@plt+0x1084>
   12540:	mov	r0, r5
   12544:	bl	11324 <dcgettext@plt>
   12548:	ldr	r1, [r4]
   1254c:	bl	11270 <fputs_unlocked@plt>
   12550:	mov	r2, #5
   12554:	ldr	r1, [pc, #360]	; 126c4 <__assert_fail@plt+0x1088>
   12558:	mov	r0, r5
   1255c:	bl	11324 <dcgettext@plt>
   12560:	ldr	r1, [r4]
   12564:	bl	11270 <fputs_unlocked@plt>
   12568:	ldr	lr, [pc, #344]	; 126c8 <__assert_fail@plt+0x108c>
   1256c:	add	ip, sp, #8
   12570:	ldm	lr!, {r0, r1, r2, r3}
   12574:	stmia	ip!, {r0, r1, r2, r3}
   12578:	ldm	lr!, {r0, r1, r2, r3}
   1257c:	stmia	ip!, {r0, r1, r2, r3}
   12580:	ldm	lr!, {r0, r1, r2, r3}
   12584:	stmia	ip!, {r0, r1, r2, r3}
   12588:	ldm	lr, {r0, r1}
   1258c:	stm	ip, {r0, r1}
   12590:	ldr	r1, [r6]
   12594:	cmp	r1, #0
   12598:	bne	1263c <__assert_fail@plt+0x1000>
   1259c:	ldr	r6, [r6, #4]
   125a0:	mov	r2, #5
   125a4:	mov	r0, #0
   125a8:	ldr	r7, [pc, #232]	; 12698 <__assert_fail@plt+0x105c>
   125ac:	ldr	r1, [pc, #280]	; 126cc <__assert_fail@plt+0x1090>
   125b0:	cmp	r6, #0
   125b4:	moveq	r6, r7
   125b8:	bl	11324 <dcgettext@plt>
   125bc:	mov	r1, r0
   125c0:	ldr	r3, [pc, #264]	; 126d0 <__assert_fail@plt+0x1094>
   125c4:	mov	r0, #1
   125c8:	ldr	r2, [pc, #260]	; 126d4 <__assert_fail@plt+0x1098>
   125cc:	bl	114e0 <__printf_chk@plt>
   125d0:	mov	r1, #0
   125d4:	mov	r0, #5
   125d8:	bl	1154c <setlocale@plt>
   125dc:	cmp	r0, #0
   125e0:	bne	12654 <__assert_fail@plt+0x1018>
   125e4:	mov	r2, #5
   125e8:	ldr	r1, [pc, #232]	; 126d8 <__assert_fail@plt+0x109c>
   125ec:	mov	r0, #0
   125f0:	bl	11324 <dcgettext@plt>
   125f4:	mov	r1, r0
   125f8:	ldr	r3, [pc, #152]	; 12698 <__assert_fail@plt+0x105c>
   125fc:	mov	r0, #1
   12600:	ldr	r2, [pc, #200]	; 126d0 <__assert_fail@plt+0x1094>
   12604:	bl	114e0 <__printf_chk@plt>
   12608:	mov	r2, #5
   1260c:	ldr	r1, [pc, #200]	; 126dc <__assert_fail@plt+0x10a0>
   12610:	mov	r0, #0
   12614:	bl	11324 <dcgettext@plt>
   12618:	ldr	r2, [pc, #192]	; 126e0 <__assert_fail@plt+0x10a4>
   1261c:	cmp	r6, r7
   12620:	mov	r1, r0
   12624:	mov	r0, #1
   12628:	ldr	r3, [pc, #180]	; 126e4 <__assert_fail@plt+0x10a8>
   1262c:	moveq	r3, r2
   12630:	mov	r2, r6
   12634:	bl	114e0 <__printf_chk@plt>
   12638:	b	12428 <__assert_fail@plt+0xdec>
   1263c:	mov	r0, r7
   12640:	bl	11294 <strcmp@plt>
   12644:	cmp	r0, #0
   12648:	beq	1259c <__assert_fail@plt+0xf60>
   1264c:	add	r6, r6, #8
   12650:	b	12590 <__assert_fail@plt+0xf54>
   12654:	mov	r2, #3
   12658:	ldr	r1, [pc, #136]	; 126e8 <__assert_fail@plt+0x10ac>
   1265c:	bl	115f4 <strncmp@plt>
   12660:	cmp	r0, #0
   12664:	beq	125e4 <__assert_fail@plt+0xfa8>
   12668:	mov	r2, #5
   1266c:	ldr	r1, [pc, #120]	; 126ec <__assert_fail@plt+0x10b0>
   12670:	mov	r0, #0
   12674:	bl	11324 <dcgettext@plt>
   12678:	ldr	r1, [r4]
   1267c:	bl	11270 <fputs_unlocked@plt>
   12680:	b	125e4 <__assert_fail@plt+0xfa8>
   12684:	andeq	sl, r2, ip, lsl #4
   12688:	andeq	sl, r2, r0, asr #3
   1268c:	andeq	r8, r1, lr, lsr #18
   12690:	andeq	r8, r1, r5, asr r9
   12694:	andeq	sl, r2, r4, asr #3
   12698:	andeq	r8, r1, r8, lsr #18
   1269c:	strdeq	r8, [r1], -r3
   126a0:	andeq	r8, r1, lr, ror sl
   126a4:	andeq	r8, r1, r9, asr #21
   126a8:			; <UNDEFINED> instruction: 0x00018bb0
   126ac:	andeq	r8, r1, fp, asr #25
   126b0:	andeq	r8, r1, fp, asr #26
   126b4:	andeq	r8, r1, r2, asr #27
   126b8:	andeq	r8, r1, r9, lsl #28
   126bc:	andeq	r8, r1, r0, asr lr
   126c0:	andeq	r9, r1, r1, lsr #32
   126c4:	andeq	r9, r1, lr, asr #32
   126c8:	andeq	r8, r1, r0, lsl r8
   126cc:	andeq	r9, r1, r4, lsl #1
   126d0:	muleq	r1, fp, r0
   126d4:	andeq	r9, r1, r3, asr #1
   126d8:	andeq	r9, r1, ip, lsl r1
   126dc:	andeq	r9, r1, r7, lsr r1
   126e0:	andeq	r9, r1, r4, lsr r5
   126e4:	andeq	r9, r1, r0, lsr #32
   126e8:	ldrdeq	r9, [r1], -r1
   126ec:	ldrdeq	r9, [r1], -r5
   126f0:	ldr	r3, [pc, #4]	; 126fc <__assert_fail@plt+0x10c0>
   126f4:	str	r0, [r3]
   126f8:	bx	lr
   126fc:	andeq	sl, r2, r4, lsl #4
   12700:	ldr	r3, [pc, #4]	; 1270c <__assert_fail@plt+0x10d0>
   12704:	strb	r0, [r3, #4]
   12708:	bx	lr
   1270c:	andeq	sl, r2, r4, lsl #4
   12710:	ldr	r3, [pc, #176]	; 127c8 <__assert_fail@plt+0x118c>
   12714:	push	{r0, r1, r4, r5, r6, lr}
   12718:	ldr	r0, [r3]
   1271c:	bl	17b38 <__assert_fail@plt+0x64fc>
   12720:	cmp	r0, #0
   12724:	beq	127ac <__assert_fail@plt+0x1170>
   12728:	ldr	r4, [pc, #156]	; 127cc <__assert_fail@plt+0x1190>
   1272c:	bl	114b0 <__errno_location@plt>
   12730:	mov	r5, r0
   12734:	ldrb	r6, [r4, #4]
   12738:	cmp	r6, #0
   1273c:	beq	1274c <__assert_fail@plt+0x1110>
   12740:	ldr	r3, [r0]
   12744:	cmp	r3, #32
   12748:	beq	127ac <__assert_fail@plt+0x1170>
   1274c:	mov	r2, #5
   12750:	ldr	r1, [pc, #120]	; 127d0 <__assert_fail@plt+0x1194>
   12754:	mov	r0, #0
   12758:	bl	11324 <dcgettext@plt>
   1275c:	mov	r6, r0
   12760:	ldr	r0, [r4]
   12764:	cmp	r0, #0
   12768:	beq	12798 <__assert_fail@plt+0x115c>
   1276c:	ldr	r4, [r5]
   12770:	bl	16808 <__assert_fail@plt+0x51cc>
   12774:	mov	r3, r0
   12778:	ldr	r2, [pc, #84]	; 127d4 <__assert_fail@plt+0x1198>
   1277c:	mov	r0, #0
   12780:	str	r6, [sp]
   12784:	mov	r1, r4
   12788:	bl	113d8 <error@plt>
   1278c:	ldr	r3, [pc, #68]	; 127d8 <__assert_fail@plt+0x119c>
   12790:	ldr	r0, [r3]
   12794:	bl	112d0 <_exit@plt>
   12798:	mov	r3, r6
   1279c:	ldr	r2, [pc, #56]	; 127dc <__assert_fail@plt+0x11a0>
   127a0:	ldr	r1, [r5]
   127a4:	bl	113d8 <error@plt>
   127a8:	b	1278c <__assert_fail@plt+0x1150>
   127ac:	ldr	r3, [pc, #44]	; 127e0 <__assert_fail@plt+0x11a4>
   127b0:	ldr	r0, [r3]
   127b4:	bl	17b38 <__assert_fail@plt+0x64fc>
   127b8:	cmp	r0, #0
   127bc:	bne	1278c <__assert_fail@plt+0x1150>
   127c0:	add	sp, sp, #8
   127c4:	pop	{r4, r5, r6, pc}
   127c8:	andeq	sl, r2, r4, asr #3
   127cc:	andeq	sl, r2, r4, lsl #4
   127d0:	andeq	r9, r1, r5, asr #11
   127d4:	ldrdeq	r9, [r1], -r1
   127d8:	andeq	sl, r2, ip, ror #2
   127dc:	ldrdeq	r9, [r1], -r5
   127e0:	andeq	sl, r2, r0, asr #3
   127e4:	push	{r4, r5, lr}
   127e8:	ldrd	r2, [r1, #8]
   127ec:	ldrd	r4, [r0, #8]
   127f0:	cmp	r5, r3
   127f4:	cmpeq	r4, r2
   127f8:	bne	12818 <__assert_fail@plt+0x11dc>
   127fc:	ldrd	r4, [r0]
   12800:	ldrd	r2, [r1]
   12804:	cmp	r5, r3
   12808:	cmpeq	r4, r2
   1280c:	moveq	r0, #1
   12810:	movne	r0, #0
   12814:	pop	{r4, r5, pc}
   12818:	mov	r0, #0
   1281c:	pop	{r4, r5, pc}
   12820:	push	{r4, lr}
   12824:	mov	r2, r1
   12828:	mov	r3, #0
   1282c:	ldrd	r0, [r0, #8]
   12830:	bl	185bc <__assert_fail@plt+0x6f80>
   12834:	mov	r0, r2
   12838:	pop	{r4, pc}
   1283c:	push	{r4, lr}
   12840:	mov	r2, r1
   12844:	mov	r3, #0
   12848:	ldrd	r0, [r0]
   1284c:	bl	185bc <__assert_fail@plt+0x6f80>
   12850:	mov	r0, r2
   12854:	pop	{r4, pc}
   12858:	push	{r4, r5, lr}
   1285c:	ldrd	r2, [r1]
   12860:	ldrd	r4, [r0]
   12864:	cmp	r5, r3
   12868:	cmpeq	r4, r2
   1286c:	moveq	r0, #1
   12870:	movne	r0, #0
   12874:	pop	{r4, r5, pc}
   12878:	ldr	r3, [r0]
   1287c:	push	{r4, r5, lr}
   12880:	ldrd	r4, [r3, #160]	; 0xa0
   12884:	ldr	r3, [r1]
   12888:	ldrd	r2, [r3, #160]	; 0xa0
   1288c:	cmp	r5, r3
   12890:	cmpeq	r4, r2
   12894:	movhi	r0, #1
   12898:	movls	r0, #0
   1289c:	movcc	r3, #1
   128a0:	movcs	r3, #0
   128a4:	sub	r0, r0, r3
   128a8:	pop	{r4, r5, pc}
   128ac:	push	{r4, r5, r6, lr}
   128b0:	mov	r4, r1
   128b4:	add	r5, r1, #64	; 0x40
   128b8:	ldr	r1, [r1, #48]	; 0x30
   128bc:	ldr	r3, [r0, #48]	; 0x30
   128c0:	cmp	r1, #0
   128c4:	bne	128d0 <__assert_fail@plt+0x1294>
   128c8:	tst	r3, #1
   128cc:	bne	128dc <__assert_fail@plt+0x12a0>
   128d0:	ubfx	r3, r3, #1, #1
   128d4:	orrs	r3, r2, r3
   128d8:	beq	12944 <__assert_fail@plt+0x1308>
   128dc:	mov	r1, r5
   128e0:	ldr	r0, [r4, #24]
   128e4:	bl	187ac <__assert_fail@plt+0x7170>
   128e8:	cmp	r0, #0
   128ec:	beq	1296c <__assert_fail@plt+0x1330>
   128f0:	bl	114b0 <__errno_location@plt>
   128f4:	ldr	r3, [r0]
   128f8:	mov	r6, r0
   128fc:	cmp	r3, #2
   12900:	bne	12924 <__assert_fail@plt+0x12e8>
   12904:	mov	r1, r5
   12908:	ldr	r0, [r4, #24]
   1290c:	bl	187cc <__assert_fail@plt+0x7190>
   12910:	cmp	r0, #0
   12914:	bne	12924 <__assert_fail@plt+0x12e8>
   12918:	str	r0, [r6]
   1291c:	mov	r0, #13
   12920:	pop	{r4, r5, r6, pc}
   12924:	ldr	r3, [r6]
   12928:	mov	r2, #104	; 0x68
   1292c:	mov	r1, #0
   12930:	str	r3, [r4, #32]
   12934:	mov	r0, r5
   12938:	bl	114d4 <memset@plt>
   1293c:	mov	r0, #10
   12940:	pop	{r4, r5, r6, pc}
   12944:	mov	r3, #256	; 0x100
   12948:	mov	r2, r5
   1294c:	ldr	r1, [r4, #24]
   12950:	ldr	r0, [r0, #32]
   12954:	bl	187dc <__assert_fail@plt+0x71a0>
   12958:	cmp	r0, #0
   1295c:	beq	1296c <__assert_fail@plt+0x1330>
   12960:	bl	114b0 <__errno_location@plt>
   12964:	ldr	r3, [r0]
   12968:	b	12928 <__assert_fail@plt+0x12ec>
   1296c:	ldr	r3, [r4, #80]	; 0x50
   12970:	and	r3, r3, #61440	; 0xf000
   12974:	cmp	r3, #16384	; 0x4000
   12978:	bne	129bc <__assert_fail@plt+0x1380>
   1297c:	ldrb	r3, [r4, #168]	; 0xa8
   12980:	cmp	r3, #46	; 0x2e
   12984:	bne	129d4 <__assert_fail@plt+0x1398>
   12988:	ldrb	r3, [r4, #169]	; 0xa9
   1298c:	cmp	r3, #0
   12990:	beq	129a8 <__assert_fail@plt+0x136c>
   12994:	ldr	r3, [r4, #168]	; 0xa8
   12998:	bic	r3, r3, #-16777216	; 0xff000000
   1299c:	bic	r3, r3, #255	; 0xff
   129a0:	cmp	r3, #11776	; 0x2e00
   129a4:	bne	129d4 <__assert_fail@plt+0x1398>
   129a8:	ldr	r3, [r4, #48]	; 0x30
   129ac:	cmp	r3, #0
   129b0:	moveq	r0, #1
   129b4:	movne	r0, #5
   129b8:	pop	{r4, r5, r6, pc}
   129bc:	cmp	r3, #40960	; 0xa000
   129c0:	beq	129dc <__assert_fail@plt+0x13a0>
   129c4:	cmp	r3, #32768	; 0x8000
   129c8:	movne	r0, #3
   129cc:	moveq	r0, #8
   129d0:	pop	{r4, r5, r6, pc}
   129d4:	mov	r0, #1
   129d8:	pop	{r4, r5, r6, pc}
   129dc:	mov	r0, #12
   129e0:	pop	{r4, r5, r6, pc}
   129e4:	ldr	r3, [r0, #40]	; 0x28
   129e8:	push	{r4, r5, r6, r7, r8, lr}
   129ec:	mov	r4, r0
   129f0:	mov	r6, r1
   129f4:	mov	r5, r2
   129f8:	ldr	r7, [r0, #44]	; 0x2c
   129fc:	cmp	r3, r2
   12a00:	bcs	12a48 <__assert_fail@plt+0x140c>
   12a04:	add	r1, r2, #40	; 0x28
   12a08:	ldr	r0, [r0, #8]
   12a0c:	cmn	r1, #-1073741823	; 0xc0000001
   12a10:	str	r1, [r4, #40]	; 0x28
   12a14:	bls	12a34 <__assert_fail@plt+0x13f8>
   12a18:	ldr	r0, [r4, #8]
   12a1c:	bl	17f50 <__assert_fail@plt+0x6914>
   12a20:	mov	r3, #0
   12a24:	str	r3, [r4, #8]
   12a28:	str	r3, [r4, #40]	; 0x28
   12a2c:	mov	r0, r6
   12a30:	pop	{r4, r5, r6, r7, r8, pc}
   12a34:	lsl	r1, r1, #2
   12a38:	bl	179ec <__assert_fail@plt+0x63b0>
   12a3c:	cmp	r0, #0
   12a40:	beq	12a18 <__assert_fail@plt+0x13dc>
   12a44:	str	r0, [r4, #8]
   12a48:	ldr	r0, [r4, #8]
   12a4c:	mov	r2, r0
   12a50:	cmp	r6, #0
   12a54:	bne	12a84 <__assert_fail@plt+0x1448>
   12a58:	mov	r3, r7
   12a5c:	mov	r2, #4
   12a60:	mov	r1, r5
   12a64:	bl	115a0 <qsort@plt>
   12a68:	ldr	r3, [r4, #8]
   12a6c:	ldr	r6, [r3]
   12a70:	subs	r5, r5, #1
   12a74:	ldr	r2, [r3]
   12a78:	bne	12a90 <__assert_fail@plt+0x1454>
   12a7c:	str	r5, [r2, #8]
   12a80:	b	12a2c <__assert_fail@plt+0x13f0>
   12a84:	str	r6, [r2], #4
   12a88:	ldr	r6, [r6, #8]
   12a8c:	b	12a50 <__assert_fail@plt+0x1414>
   12a90:	ldr	r1, [r3, #4]!
   12a94:	str	r1, [r2, #8]
   12a98:	b	12a70 <__assert_fail@plt+0x1434>
   12a9c:	push	{r4, r5, r6, r7, r8, lr}
   12aa0:	mov	r6, r0
   12aa4:	add	r0, r2, #176	; 0xb0
   12aa8:	bic	r0, r0, #7
   12aac:	mov	r7, r1
   12ab0:	mov	r5, r2
   12ab4:	bl	179c0 <__assert_fail@plt+0x6384>
   12ab8:	subs	r4, r0, #0
   12abc:	beq	12b08 <__assert_fail@plt+0x14cc>
   12ac0:	mov	r2, r5
   12ac4:	mov	r1, r7
   12ac8:	add	r0, r4, #168	; 0xa8
   12acc:	bl	112dc <memcpy@plt>
   12ad0:	mov	r3, #0
   12ad4:	add	r2, r4, r5
   12ad8:	strb	r3, [r2, #168]	; 0xa8
   12adc:	ldr	r2, [r6, #24]
   12ae0:	str	r3, [r4, #12]
   12ae4:	str	r3, [r4, #16]
   12ae8:	str	r3, [r4, #20]
   12aec:	str	r2, [r4, #28]
   12af0:	mov	r2, #3
   12af4:	str	r3, [r4, #32]
   12af8:	str	r6, [r4, #44]	; 0x2c
   12afc:	str	r5, [r4, #52]	; 0x34
   12b00:	strh	r3, [r4, #58]	; 0x3a
   12b04:	strh	r2, [r4, #60]	; 0x3c
   12b08:	mov	r0, r4
   12b0c:	pop	{r4, r5, r6, r7, r8, pc}
   12b10:	mov	r3, r0
   12b14:	mov	r0, r1
   12b18:	ldr	ip, [r3, #48]	; 0x30
   12b1c:	lsl	r2, ip, #11
   12b20:	tst	ip, #512	; 0x200
   12b24:	and	r2, r2, #32768	; 0x8000
   12b28:	orr	r2, r2, #540672	; 0x84000
   12b2c:	orr	r2, r2, #2304	; 0x900
   12b30:	beq	12b3c <__assert_fail@plt+0x1500>
   12b34:	ldr	r0, [r3, #32]
   12b38:	b	152d4 <__assert_fail@plt+0x3c98>
   12b3c:	mov	r1, r2
   12b40:	b	17ecc <__assert_fail@plt+0x6890>
   12b44:	push	{r4, r5, r6, lr}
   12b48:	mov	r4, r0
   12b4c:	cmp	r4, #0
   12b50:	popeq	{r4, r5, r6, pc}
   12b54:	ldr	r5, [r4, #8]
   12b58:	ldr	r0, [r4, #12]
   12b5c:	cmp	r0, #0
   12b60:	beq	12b68 <__assert_fail@plt+0x152c>
   12b64:	bl	11624 <closedir@plt>
   12b68:	mov	r0, r4
   12b6c:	mov	r4, r5
   12b70:	bl	17f50 <__assert_fail@plt+0x6914>
   12b74:	b	12b4c <__assert_fail@plt+0x1510>
   12b78:	push	{r4, lr}
   12b7c:	mov	r4, r0
   12b80:	mov	r0, r4
   12b84:	bl	15240 <__assert_fail@plt+0x3c04>
   12b88:	cmp	r0, #0
   12b8c:	popne	{r4, pc}
   12b90:	mov	r0, r4
   12b94:	bl	1528c <__assert_fail@plt+0x3c50>
   12b98:	cmp	r0, #0
   12b9c:	blt	12b80 <__assert_fail@plt+0x1544>
   12ba0:	bl	1160c <close@plt>
   12ba4:	b	12b80 <__assert_fail@plt+0x1544>
   12ba8:	push	{r4, r5, r6, r7, lr}
   12bac:	sub	sp, sp, #100	; 0x64
   12bb0:	ldr	r5, [r0, #44]	; 0x2c
   12bb4:	ldr	r3, [r5, #48]	; 0x30
   12bb8:	tst	r3, #512	; 0x200
   12bbc:	bne	12bcc <__assert_fail@plt+0x1590>
   12bc0:	mov	r0, #0
   12bc4:	add	sp, sp, #100	; 0x64
   12bc8:	pop	{r4, r5, r6, r7, pc}
   12bcc:	ldr	r4, [r5, #52]	; 0x34
   12bd0:	mov	r7, r1
   12bd4:	mov	r6, r0
   12bd8:	cmp	r4, #0
   12bdc:	bne	12c0c <__assert_fail@plt+0x15d0>
   12be0:	ldr	r3, [pc, #184]	; 12ca0 <__assert_fail@plt+0x1664>
   12be4:	mov	r1, r4
   12be8:	mov	r0, #13
   12bec:	ldr	r2, [pc, #176]	; 12ca4 <__assert_fail@plt+0x1668>
   12bf0:	str	r3, [sp]
   12bf4:	ldr	r3, [pc, #172]	; 12ca8 <__assert_fail@plt+0x166c>
   12bf8:	bl	14c20 <__assert_fail@plt+0x35e4>
   12bfc:	cmp	r0, #0
   12c00:	mov	r4, r0
   12c04:	str	r0, [r5, #52]	; 0x34
   12c08:	beq	12c2c <__assert_fail@plt+0x15f0>
   12c0c:	ldrd	r2, [r6, #64]	; 0x40
   12c10:	add	r1, sp, #8
   12c14:	mov	r0, r4
   12c18:	strd	r2, [sp, #8]
   12c1c:	bl	14a10 <__assert_fail@plt+0x33d4>
   12c20:	cmp	r0, #0
   12c24:	ldrne	r0, [r0, #8]
   12c28:	bne	12bc4 <__assert_fail@plt+0x1588>
   12c2c:	cmp	r7, #0
   12c30:	blt	12bc0 <__assert_fail@plt+0x1584>
   12c34:	add	r1, sp, #8
   12c38:	mov	r0, r7
   12c3c:	bl	11258 <fstatfs64@plt>
   12c40:	cmp	r0, #0
   12c44:	bne	12bc0 <__assert_fail@plt+0x1584>
   12c48:	cmp	r4, #0
   12c4c:	beq	12c98 <__assert_fail@plt+0x165c>
   12c50:	mov	r0, #16
   12c54:	bl	179c0 <__assert_fail@plt+0x6384>
   12c58:	subs	r5, r0, #0
   12c5c:	beq	12c98 <__assert_fail@plt+0x165c>
   12c60:	ldrd	r2, [r6, #64]	; 0x40
   12c64:	mov	r1, r5
   12c68:	mov	r0, r4
   12c6c:	strd	r2, [r5]
   12c70:	ldr	r3, [sp, #8]
   12c74:	str	r3, [r5, #8]
   12c78:	bl	150e8 <__assert_fail@plt+0x3aac>
   12c7c:	cmp	r0, #0
   12c80:	beq	12c90 <__assert_fail@plt+0x1654>
   12c84:	cmp	r5, r0
   12c88:	beq	12c98 <__assert_fail@plt+0x165c>
   12c8c:	bl	11600 <abort@plt>
   12c90:	mov	r0, r5
   12c94:	bl	17f50 <__assert_fail@plt+0x6914>
   12c98:	ldr	r0, [sp, #8]
   12c9c:	b	12bc4 <__assert_fail@plt+0x1588>
   12ca0:	andeq	r7, r1, r0, asr pc
   12ca4:	andeq	r2, r1, ip, lsr r8
   12ca8:	andeq	r2, r1, r8, asr r8
   12cac:	push	{r4, r5, r6, lr}
   12cb0:	mov	r5, r1
   12cb4:	ldr	r1, [r0, #32]
   12cb8:	sub	r3, r1, r5
   12cbc:	cmn	r1, #100	; 0x64
   12cc0:	clz	r3, r3
   12cc4:	lsr	r3, r3, #5
   12cc8:	moveq	r3, #0
   12ccc:	cmp	r3, #0
   12cd0:	beq	12cd8 <__assert_fail@plt+0x169c>
   12cd4:	bl	11600 <abort@plt>
   12cd8:	cmp	r2, #0
   12cdc:	mov	r4, r0
   12ce0:	beq	12d00 <__assert_fail@plt+0x16c4>
   12ce4:	add	r0, r0, #60	; 0x3c
   12ce8:	bl	15248 <__assert_fail@plt+0x3c0c>
   12cec:	cmp	r0, #0
   12cf0:	blt	12cf8 <__assert_fail@plt+0x16bc>
   12cf4:	bl	1160c <close@plt>
   12cf8:	str	r5, [r4, #32]
   12cfc:	pop	{r4, r5, r6, pc}
   12d00:	ldr	r3, [r0, #48]	; 0x30
   12d04:	mvn	r2, r1
   12d08:	lsr	r2, r2, #31
   12d0c:	eor	r3, r3, #4
   12d10:	ands	r3, r2, r3, lsr #2
   12d14:	beq	12cf8 <__assert_fail@plt+0x16bc>
   12d18:	mov	r0, r1
   12d1c:	b	12cf4 <__assert_fail@plt+0x16b8>
   12d20:	ldr	r3, [r0, #48]	; 0x30
   12d24:	push	{r4, r5, r6, lr}
   12d28:	mov	r5, r0
   12d2c:	ands	r4, r3, #4
   12d30:	movne	r4, #0
   12d34:	bne	12d4c <__assert_fail@plt+0x1710>
   12d38:	tst	r3, #512	; 0x200
   12d3c:	beq	12d5c <__assert_fail@plt+0x1720>
   12d40:	mov	r2, #1
   12d44:	mvn	r1, #99	; 0x63
   12d48:	bl	12cac <__assert_fail@plt+0x1670>
   12d4c:	add	r0, r5, #60	; 0x3c
   12d50:	bl	12b78 <__assert_fail@plt+0x153c>
   12d54:	mov	r0, r4
   12d58:	pop	{r4, r5, r6, pc}
   12d5c:	ldr	r0, [r0, #28]
   12d60:	bl	11594 <fchdir@plt>
   12d64:	adds	r4, r0, #0
   12d68:	movne	r4, #1
   12d6c:	b	12d4c <__assert_fail@plt+0x1710>
   12d70:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   12d74:	subs	sl, r3, #0
   12d78:	sub	sp, sp, #104	; 0x68
   12d7c:	mov	r7, r0
   12d80:	mov	r8, r1
   12d84:	mov	r6, r2
   12d88:	moveq	r9, sl
   12d8c:	beq	12da4 <__assert_fail@plt+0x1768>
   12d90:	ldr	r1, [pc, #368]	; 12f08 <__assert_fail@plt+0x18cc>
   12d94:	mov	r0, sl
   12d98:	bl	11294 <strcmp@plt>
   12d9c:	clz	r9, r0
   12da0:	lsr	r9, r9, #5
   12da4:	ldr	r3, [r7, #48]	; 0x30
   12da8:	ands	r4, r3, #4
   12dac:	beq	12dd8 <__assert_fail@plt+0x179c>
   12db0:	mvn	r4, r6
   12db4:	lsr	r4, r4, #31
   12db8:	ands	r4, r4, r3, lsr #9
   12dbc:	beq	12dcc <__assert_fail@plt+0x1790>
   12dc0:	mov	r0, r6
   12dc4:	mov	r4, #0
   12dc8:	bl	1160c <close@plt>
   12dcc:	mov	r0, r4
   12dd0:	add	sp, sp, #104	; 0x68
   12dd4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   12dd8:	ands	r2, r9, r6, lsr #31
   12ddc:	beq	12ec8 <__assert_fail@plt+0x188c>
   12de0:	tst	r3, #512	; 0x200
   12de4:	bne	12e04 <__assert_fail@plt+0x17c8>
   12de8:	mov	r1, sl
   12dec:	mov	r0, r7
   12df0:	bl	12b10 <__assert_fail@plt+0x14d4>
   12df4:	subs	r5, r0, #0
   12df8:	bge	12e30 <__assert_fail@plt+0x17f4>
   12dfc:	mvn	r4, #0
   12e00:	b	12dcc <__assert_fail@plt+0x1790>
   12e04:	add	r5, r7, #60	; 0x3c
   12e08:	mov	r0, r5
   12e0c:	bl	15240 <__assert_fail@plt+0x3c04>
   12e10:	cmp	r0, #0
   12e14:	bne	12de8 <__assert_fail@plt+0x17ac>
   12e18:	mov	r0, r5
   12e1c:	bl	1528c <__assert_fail@plt+0x3c50>
   12e20:	subs	r5, r0, #0
   12e24:	movge	r6, r5
   12e28:	movge	sl, r4
   12e2c:	blt	12de8 <__assert_fail@plt+0x17ac>
   12e30:	ldr	r3, [r7, #48]	; 0x30
   12e34:	tst	r3, #2
   12e38:	bne	12e58 <__assert_fail@plt+0x181c>
   12e3c:	cmp	sl, #0
   12e40:	beq	12ed8 <__assert_fail@plt+0x189c>
   12e44:	ldr	r1, [pc, #188]	; 12f08 <__assert_fail@plt+0x18cc>
   12e48:	mov	r0, sl
   12e4c:	bl	11294 <strcmp@plt>
   12e50:	cmp	r0, #0
   12e54:	bne	12ed8 <__assert_fail@plt+0x189c>
   12e58:	mov	r1, sp
   12e5c:	mov	r0, r5
   12e60:	bl	187bc <__assert_fail@plt+0x7180>
   12e64:	cmp	r0, #0
   12e68:	bne	12ea0 <__assert_fail@plt+0x1864>
   12e6c:	ldrd	r2, [sp]
   12e70:	ldrd	r0, [r8, #64]	; 0x40
   12e74:	cmp	r1, r3
   12e78:	cmpeq	r0, r2
   12e7c:	bne	12e94 <__assert_fail@plt+0x1858>
   12e80:	ldrd	r2, [sp, #96]	; 0x60
   12e84:	ldrd	r0, [r8, #160]	; 0xa0
   12e88:	cmp	r1, r3
   12e8c:	cmpeq	r0, r2
   12e90:	beq	12ed8 <__assert_fail@plt+0x189c>
   12e94:	bl	114b0 <__errno_location@plt>
   12e98:	mov	r3, #2
   12e9c:	str	r3, [r0]
   12ea0:	mvn	r4, #0
   12ea4:	cmp	r6, #0
   12ea8:	bge	12dcc <__assert_fail@plt+0x1790>
   12eac:	bl	114b0 <__errno_location@plt>
   12eb0:	mov	r6, r0
   12eb4:	mov	r0, r5
   12eb8:	ldr	r7, [r6]
   12ebc:	bl	1160c <close@plt>
   12ec0:	str	r7, [r6]
   12ec4:	b	12dcc <__assert_fail@plt+0x1790>
   12ec8:	cmp	r6, #0
   12ecc:	movge	r5, r6
   12ed0:	bge	12e30 <__assert_fail@plt+0x17f4>
   12ed4:	b	12de8 <__assert_fail@plt+0x17ac>
   12ed8:	ldr	r3, [r7, #48]	; 0x30
   12edc:	tst	r3, #512	; 0x200
   12ee0:	beq	12ef8 <__assert_fail@plt+0x18bc>
   12ee4:	eor	r2, r9, #1
   12ee8:	mov	r1, r5
   12eec:	mov	r0, r7
   12ef0:	bl	12cac <__assert_fail@plt+0x1670>
   12ef4:	b	12dcc <__assert_fail@plt+0x1790>
   12ef8:	mov	r0, r5
   12efc:	bl	11594 <fchdir@plt>
   12f00:	mov	r4, r0
   12f04:	b	12ea4 <__assert_fail@plt+0x1868>
   12f08:	strdeq	r9, [r1], -r0
   12f0c:	ldr	r3, [r0, #36]	; 0x24
   12f10:	add	r1, r1, #256	; 0x100
   12f14:	push	{r4, r5, r6, lr}
   12f18:	mov	r5, r0
   12f1c:	ldr	r0, [r0, #24]
   12f20:	adds	r1, r3, r1
   12f24:	bcc	12f48 <__assert_fail@plt+0x190c>
   12f28:	mov	r4, #0
   12f2c:	bl	17f50 <__assert_fail@plt+0x6914>
   12f30:	str	r4, [r5, #24]
   12f34:	bl	114b0 <__errno_location@plt>
   12f38:	mov	r3, #36	; 0x24
   12f3c:	str	r3, [r0]
   12f40:	mov	r0, r4
   12f44:	pop	{r4, r5, r6, pc}
   12f48:	str	r1, [r5, #36]	; 0x24
   12f4c:	bl	179ec <__assert_fail@plt+0x63b0>
   12f50:	subs	r4, r0, #0
   12f54:	bne	12f68 <__assert_fail@plt+0x192c>
   12f58:	ldr	r0, [r5, #24]
   12f5c:	bl	17f50 <__assert_fail@plt+0x6914>
   12f60:	str	r4, [r5, #24]
   12f64:	b	12f40 <__assert_fail@plt+0x1904>
   12f68:	mov	r0, #1
   12f6c:	str	r4, [r5, #24]
   12f70:	pop	{r4, r5, r6, pc}
   12f74:	ldr	r3, [r0, #48]	; 0x30
   12f78:	movw	r2, #258	; 0x102
   12f7c:	push	{r0, r1, r4, lr}
   12f80:	mov	r4, r0
   12f84:	tst	r2, r3
   12f88:	beq	12fbc <__assert_fail@plt+0x1980>
   12f8c:	ldr	r3, [pc, #72]	; 12fdc <__assert_fail@plt+0x19a0>
   12f90:	mov	r1, #0
   12f94:	mov	r0, #31
   12f98:	ldr	r2, [pc, #64]	; 12fe0 <__assert_fail@plt+0x19a4>
   12f9c:	str	r3, [sp]
   12fa0:	ldr	r3, [pc, #60]	; 12fe4 <__assert_fail@plt+0x19a8>
   12fa4:	bl	14c20 <__assert_fail@plt+0x35e4>
   12fa8:	str	r0, [r4, #56]	; 0x38
   12fac:	adds	r0, r0, #0
   12fb0:	movne	r0, #1
   12fb4:	add	sp, sp, #8
   12fb8:	pop	{r4, pc}
   12fbc:	mov	r0, #32
   12fc0:	bl	179c0 <__assert_fail@plt+0x6384>
   12fc4:	cmp	r0, #0
   12fc8:	str	r0, [r4, #56]	; 0x38
   12fcc:	beq	12fb4 <__assert_fail@plt+0x1978>
   12fd0:	bl	17ba8 <__assert_fail@plt+0x656c>
   12fd4:	mov	r0, #1
   12fd8:	b	12fb4 <__assert_fail@plt+0x1978>
   12fdc:	andeq	r7, r1, r0, asr pc
   12fe0:	andeq	r2, r1, r0, lsr #16
   12fe4:	andeq	r2, r1, r4, ror #15
   12fe8:	mov	r3, r0
   12fec:	movw	r2, #258	; 0x102
   12ff0:	ldr	r0, [r0, #56]	; 0x38
   12ff4:	ldr	r3, [r3, #48]	; 0x30
   12ff8:	tst	r2, r3
   12ffc:	beq	1300c <__assert_fail@plt+0x19d0>
   13000:	cmp	r0, #0
   13004:	bxeq	lr
   13008:	b	14d88 <__assert_fail@plt+0x374c>
   1300c:	b	17f50 <__assert_fail@plt+0x6914>
   13010:	ldr	r3, [r0, #48]	; 0x30
   13014:	movw	r2, #258	; 0x102
   13018:	push	{r4, r5, r6, lr}
   1301c:	mov	r6, r0
   13020:	mov	r4, r1
   13024:	tst	r2, r3
   13028:	beq	1309c <__assert_fail@plt+0x1a60>
   1302c:	mov	r0, #24
   13030:	bl	179c0 <__assert_fail@plt+0x6384>
   13034:	subs	r5, r0, #0
   13038:	bne	13044 <__assert_fail@plt+0x1a08>
   1303c:	mov	r0, #0
   13040:	pop	{r4, r5, r6, pc}
   13044:	ldrd	r2, [r4, #64]	; 0x40
   13048:	mov	r1, r5
   1304c:	ldr	r0, [r6, #56]	; 0x38
   13050:	strd	r2, [r5]
   13054:	ldrd	r2, [r4, #160]	; 0xa0
   13058:	str	r4, [r5, #16]
   1305c:	strd	r2, [r5, #8]
   13060:	bl	150e8 <__assert_fail@plt+0x3aac>
   13064:	cmp	r5, r0
   13068:	mov	r6, r0
   1306c:	bne	13078 <__assert_fail@plt+0x1a3c>
   13070:	mov	r0, #1
   13074:	pop	{r4, r5, r6, pc}
   13078:	mov	r0, r5
   1307c:	bl	17f50 <__assert_fail@plt+0x6914>
   13080:	cmp	r6, #0
   13084:	beq	1303c <__assert_fail@plt+0x1a00>
   13088:	ldr	r3, [r6, #16]
   1308c:	str	r3, [r4]
   13090:	mov	r3, #2
   13094:	strh	r3, [r4, #56]	; 0x38
   13098:	b	13070 <__assert_fail@plt+0x1a34>
   1309c:	add	r1, r1, #64	; 0x40
   130a0:	ldr	r0, [r0, #56]	; 0x38
   130a4:	bl	17bc4 <__assert_fail@plt+0x6588>
   130a8:	cmp	r0, #0
   130ac:	beq	13070 <__assert_fail@plt+0x1a34>
   130b0:	mov	r3, #2
   130b4:	str	r4, [r4]
   130b8:	strh	r3, [r4, #56]	; 0x38
   130bc:	pop	{r4, r5, r6, pc}
   130c0:	ldr	r3, [r0, #48]	; 0x30
   130c4:	mov	r2, r1
   130c8:	movw	r1, #258	; 0x102
   130cc:	push	{r4, r5, lr}
   130d0:	sub	sp, sp, #28
   130d4:	tst	r1, r3
   130d8:	beq	13110 <__assert_fail@plt+0x1ad4>
   130dc:	ldrd	r4, [r2, #64]	; 0x40
   130e0:	mov	r1, sp
   130e4:	ldrd	r2, [r2, #160]	; 0xa0
   130e8:	ldr	r0, [r0, #56]	; 0x38
   130ec:	strd	r4, [sp]
   130f0:	strd	r2, [sp, #8]
   130f4:	bl	15118 <__assert_fail@plt+0x3adc>
   130f8:	cmp	r0, #0
   130fc:	bne	13104 <__assert_fail@plt+0x1ac8>
   13100:	bl	11600 <abort@plt>
   13104:	bl	17f50 <__assert_fail@plt+0x6914>
   13108:	add	sp, sp, #28
   1310c:	pop	{r4, r5, pc}
   13110:	ldr	ip, [r2, #4]
   13114:	cmp	ip, #0
   13118:	beq	13108 <__assert_fail@plt+0x1acc>
   1311c:	ldr	r3, [ip, #48]	; 0x30
   13120:	cmp	r3, #0
   13124:	blt	13108 <__assert_fail@plt+0x1acc>
   13128:	ldr	r3, [r0, #56]	; 0x38
   1312c:	ldrd	r0, [r3, #16]
   13130:	orrs	r1, r0, r1
   13134:	beq	13100 <__assert_fail@plt+0x1ac4>
   13138:	ldrd	r4, [r3]
   1313c:	ldrd	r0, [r2, #160]	; 0xa0
   13140:	cmp	r5, r1
   13144:	cmpeq	r4, r0
   13148:	bne	13108 <__assert_fail@plt+0x1acc>
   1314c:	ldrd	r0, [r3, #8]
   13150:	ldrd	r4, [r2, #64]	; 0x40
   13154:	cmp	r1, r5
   13158:	cmpeq	r0, r4
   1315c:	ldrdeq	r0, [ip, #64]	; 0x40
   13160:	strdeq	r0, [r3, #8]
   13164:	ldrdeq	r0, [ip, #160]	; 0xa0
   13168:	strdeq	r0, [r3]
   1316c:	b	13108 <__assert_fail@plt+0x1acc>
   13170:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13174:	sub	sp, sp, #60	; 0x3c
   13178:	mov	r4, r0
   1317c:	ldr	r5, [r0]
   13180:	str	r1, [sp, #8]
   13184:	ldr	r3, [r5, #12]
   13188:	cmp	r3, #0
   1318c:	str	r3, [sp]
   13190:	beq	131e4 <__assert_fail@plt+0x1ba8>
   13194:	mov	r0, r3
   13198:	bl	11588 <dirfd@plt>
   1319c:	cmp	r0, #0
   131a0:	str	r0, [sp, #52]	; 0x34
   131a4:	bge	13254 <__assert_fail@plt+0x1c18>
   131a8:	mov	r6, #0
   131ac:	ldr	r0, [r5, #12]
   131b0:	bl	11624 <closedir@plt>
   131b4:	str	r6, [r5, #12]
   131b8:	ldr	r3, [sp, #8]
   131bc:	cmp	r3, #3
   131c0:	bne	133dc <__assert_fail@plt+0x1da0>
   131c4:	mov	r3, #4
   131c8:	strh	r3, [r5, #56]	; 0x38
   131cc:	bl	114b0 <__errno_location@plt>
   131d0:	ldr	r3, [r0]
   131d4:	str	r3, [r5, #32]
   131d8:	mov	r0, r6
   131dc:	add	sp, sp, #60	; 0x3c
   131e0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   131e4:	ldr	r3, [r0, #48]	; 0x30
   131e8:	ldr	r1, [r5, #24]
   131ec:	and	r2, r3, #516	; 0x204
   131f0:	cmp	r2, #512	; 0x200
   131f4:	ldreq	r0, [r0, #32]
   131f8:	mvnne	r0, #99	; 0x63
   131fc:	ands	r2, r3, #16
   13200:	beq	1321c <__assert_fail@plt+0x1be0>
   13204:	tst	r3, #1
   13208:	moveq	r2, #32768	; 0x8000
   1320c:	beq	1321c <__assert_fail@plt+0x1be0>
   13210:	ldr	r2, [r5, #48]	; 0x30
   13214:	cmp	r2, #0
   13218:	movne	r2, #32768	; 0x8000
   1321c:	add	r3, sp, #52	; 0x34
   13220:	bl	15308 <__assert_fail@plt+0x3ccc>
   13224:	cmp	r0, #0
   13228:	mov	r6, r0
   1322c:	str	r0, [r5, #12]
   13230:	beq	131b8 <__assert_fail@plt+0x1b7c>
   13234:	ldrh	r3, [r5, #56]	; 0x38
   13238:	cmp	r3, #11
   1323c:	bne	133e4 <__assert_fail@plt+0x1da8>
   13240:	mov	r2, #0
   13244:	mov	r1, r5
   13248:	mov	r0, r4
   1324c:	bl	128ac <__assert_fail@plt+0x1270>
   13250:	strh	r0, [r5, #56]	; 0x38
   13254:	ldr	r3, [r4, #44]	; 0x2c
   13258:	cmp	r3, #0
   1325c:	ldr	r3, [pc, #1812]	; 13978 <__assert_fail@plt+0x233c>
   13260:	mvnne	r3, #0
   13264:	str	r3, [sp, #36]	; 0x24
   13268:	ldr	r3, [sp]
   1326c:	cmp	r3, #0
   13270:	beq	13430 <__assert_fail@plt+0x1df4>
   13274:	mov	r3, #1
   13278:	str	r3, [sp, #24]
   1327c:	ldr	r2, [r5, #28]
   13280:	mov	r8, #0
   13284:	mov	r9, r8
   13288:	mov	r6, r8
   1328c:	ldr	r3, [r5, #40]	; 0x28
   13290:	str	r8, [sp, #20]
   13294:	str	r8, [sp, #32]
   13298:	sub	fp, r3, #1
   1329c:	ldrb	r2, [r2, fp]
   132a0:	cmp	r2, #47	; 0x2f
   132a4:	movne	fp, r3
   132a8:	ldr	r3, [r4, #48]	; 0x30
   132ac:	ands	r3, r3, #4
   132b0:	ldrne	r3, [r4, #24]
   132b4:	streq	r3, [sp, #4]
   132b8:	addne	r2, r3, fp
   132bc:	addne	r2, r2, #1
   132c0:	strne	r2, [sp, #4]
   132c4:	movne	r2, #47	; 0x2f
   132c8:	strbne	r2, [r3, fp]
   132cc:	add	r3, fp, #1
   132d0:	add	r2, fp, #1
   132d4:	str	r3, [sp, #16]
   132d8:	ldr	r3, [r4, #36]	; 0x24
   132dc:	sub	r3, r3, r2
   132e0:	str	r3, [sp, #28]
   132e4:	ldr	r3, [r5, #48]	; 0x30
   132e8:	add	r3, r3, #1
   132ec:	str	r3, [sp, #40]	; 0x28
   132f0:	ldr	r7, [r5, #12]
   132f4:	cmp	r7, #0
   132f8:	beq	13344 <__assert_fail@plt+0x1d08>
   132fc:	bl	114b0 <__errno_location@plt>
   13300:	mov	r3, #0
   13304:	str	r0, [sp, #12]
   13308:	str	r3, [r0]
   1330c:	mov	r0, r7
   13310:	bl	11570 <readdir64@plt>
   13314:	subs	r3, r0, #0
   13318:	bne	13574 <__assert_fail@plt+0x1f38>
   1331c:	ldr	r3, [sp, #12]
   13320:	ldr	r3, [r3]
   13324:	cmp	r3, #0
   13328:	beq	13344 <__assert_fail@plt+0x1d08>
   1332c:	str	r3, [r5, #32]
   13330:	ldr	r3, [sp]
   13334:	orrs	r3, r3, r9
   13338:	moveq	r3, #4
   1333c:	movne	r3, #7
   13340:	strh	r3, [r5, #56]	; 0x38
   13344:	ldr	r0, [r5, #12]
   13348:	cmp	r0, #0
   1334c:	beq	1335c <__assert_fail@plt+0x1d20>
   13350:	bl	11624 <closedir@plt>
   13354:	mov	r3, #0
   13358:	str	r3, [r5, #12]
   1335c:	ldr	r3, [sp, #20]
   13360:	cmp	r3, #0
   13364:	bne	13834 <__assert_fail@plt+0x21f8>
   13368:	ldr	r3, [r4, #48]	; 0x30
   1336c:	tst	r3, #4
   13370:	bne	138b0 <__assert_fail@plt+0x2274>
   13374:	ldr	r2, [sp]
   13378:	ldr	r3, [sp, #24]
   1337c:	cmp	r2, #0
   13380:	movne	r3, #0
   13384:	cmp	r3, #0
   13388:	beq	138f4 <__assert_fail@plt+0x22b8>
   1338c:	ldr	r3, [sp, #8]
   13390:	cmp	r9, #0
   13394:	cmpne	r3, #1
   13398:	bne	13920 <__assert_fail@plt+0x22e4>
   1339c:	ldr	r3, [r5, #48]	; 0x30
   133a0:	cmp	r3, #0
   133a4:	bne	138dc <__assert_fail@plt+0x22a0>
   133a8:	mov	r0, r4
   133ac:	bl	12d20 <__assert_fail@plt+0x16e4>
   133b0:	adds	r0, r0, #0
   133b4:	movne	r0, #1
   133b8:	cmp	r0, #0
   133bc:	beq	138f4 <__assert_fail@plt+0x22b8>
   133c0:	mov	r3, #7
   133c4:	strh	r3, [r5, #56]	; 0x38
   133c8:	ldr	r3, [r4, #48]	; 0x30
   133cc:	orr	r3, r3, #8192	; 0x2000
   133d0:	str	r3, [r4, #48]	; 0x30
   133d4:	mov	r0, r6
   133d8:	bl	12b44 <__assert_fail@plt+0x1508>
   133dc:	mov	r6, #0
   133e0:	b	131d8 <__assert_fail@plt+0x1b9c>
   133e4:	ldr	r3, [r4, #48]	; 0x30
   133e8:	tst	r3, #256	; 0x100
   133ec:	beq	13254 <__assert_fail@plt+0x1c18>
   133f0:	mov	r1, r5
   133f4:	mov	r0, r4
   133f8:	bl	130c0 <__assert_fail@plt+0x1a84>
   133fc:	mov	r2, #0
   13400:	mov	r1, r5
   13404:	mov	r0, r4
   13408:	bl	128ac <__assert_fail@plt+0x1270>
   1340c:	mov	r1, r5
   13410:	mov	r0, r4
   13414:	bl	13010 <__assert_fail@plt+0x19d4>
   13418:	subs	r6, r0, #0
   1341c:	bne	13254 <__assert_fail@plt+0x1c18>
   13420:	bl	114b0 <__errno_location@plt>
   13424:	mov	r3, #12
   13428:	str	r3, [r0]
   1342c:	b	131d8 <__assert_fail@plt+0x1b9c>
   13430:	ldr	r3, [sp, #8]
   13434:	cmp	r3, #2
   13438:	ldreq	r0, [sp]
   1343c:	beq	134b0 <__assert_fail@plt+0x1e74>
   13440:	ldr	r3, [r4, #48]	; 0x30
   13444:	and	r3, r3, #56	; 0x38
   13448:	cmp	r3, #24
   1344c:	bne	1348c <__assert_fail@plt+0x1e50>
   13450:	ldr	r3, [r5, #84]	; 0x54
   13454:	cmp	r3, #2
   13458:	bne	1348c <__assert_fail@plt+0x1e50>
   1345c:	mov	r0, r5
   13460:	ldr	r1, [sp, #52]	; 0x34
   13464:	bl	12ba8 <__assert_fail@plt+0x156c>
   13468:	movw	r3, #26985	; 0x6969
   1346c:	cmp	r0, r3
   13470:	beq	1348c <__assert_fail@plt+0x1e50>
   13474:	bgt	13494 <__assert_fail@plt+0x1e58>
   13478:	ldr	r3, [pc, #1276]	; 1397c <__assert_fail@plt+0x2340>
   1347c:	cmp	r0, r3
   13480:	clzne	r0, r0
   13484:	lsrne	r0, r0, #5
   13488:	bne	134b0 <__assert_fail@plt+0x1e74>
   1348c:	mov	r0, #1
   13490:	b	134b0 <__assert_fail@plt+0x1e74>
   13494:	movw	r3, #40864	; 0x9fa0
   13498:	cmp	r0, r3
   1349c:	beq	1348c <__assert_fail@plt+0x1e50>
   134a0:	ldr	r3, [pc, #1240]	; 13980 <__assert_fail@plt+0x2344>
   134a4:	sub	r0, r0, r3
   134a8:	clz	r0, r0
   134ac:	lsr	r0, r0, #5
   134b0:	ldr	r3, [sp, #8]
   134b4:	mov	r6, r0
   134b8:	sub	r7, r3, #3
   134bc:	clz	r7, r7
   134c0:	lsr	r7, r7, #5
   134c4:	orrs	r3, r7, r0
   134c8:	str	r3, [sp, #24]
   134cc:	beq	1327c <__assert_fail@plt+0x1c40>
   134d0:	ldr	r3, [r4, #48]	; 0x30
   134d4:	tst	r3, #512	; 0x200
   134d8:	beq	134f0 <__assert_fail@plt+0x1eb4>
   134dc:	mov	r2, #3
   134e0:	movw	r1, #1030	; 0x406
   134e4:	ldr	r0, [sp, #52]	; 0x34
   134e8:	bl	17d1c <__assert_fail@plt+0x66e0>
   134ec:	str	r0, [sp, #52]	; 0x34
   134f0:	ldr	r2, [sp, #52]	; 0x34
   134f4:	cmp	r2, #0
   134f8:	bge	13548 <__assert_fail@plt+0x1f0c>
   134fc:	tst	r7, r6
   13500:	bne	13564 <__assert_fail@plt+0x1f28>
   13504:	ldrh	r3, [r5, #58]	; 0x3a
   13508:	ldr	r0, [r5, #12]
   1350c:	orr	r3, r3, #1
   13510:	strh	r3, [r5, #58]	; 0x3a
   13514:	bl	11624 <closedir@plt>
   13518:	mov	r3, #0
   1351c:	str	r3, [r5, #12]
   13520:	ldr	r3, [r4, #48]	; 0x30
   13524:	tst	r3, #512	; 0x200
   13528:	beq	1353c <__assert_fail@plt+0x1f00>
   1352c:	ldr	r0, [sp, #52]	; 0x34
   13530:	cmp	r0, #0
   13534:	blt	1353c <__assert_fail@plt+0x1f00>
   13538:	bl	1160c <close@plt>
   1353c:	mov	r3, #0
   13540:	str	r3, [r5, #12]
   13544:	b	13278 <__assert_fail@plt+0x1c3c>
   13548:	mov	r3, #0
   1354c:	mov	r1, r5
   13550:	mov	r0, r4
   13554:	bl	12d70 <__assert_fail@plt+0x1734>
   13558:	cmp	r0, #0
   1355c:	bne	134fc <__assert_fail@plt+0x1ec0>
   13560:	b	13274 <__assert_fail@plt+0x1c38>
   13564:	bl	114b0 <__errno_location@plt>
   13568:	ldr	r3, [r0]
   1356c:	str	r3, [r5, #32]
   13570:	b	13504 <__assert_fail@plt+0x1ec8>
   13574:	ldr	r2, [r4, #48]	; 0x30
   13578:	tst	r2, #32
   1357c:	bne	135a4 <__assert_fail@plt+0x1f68>
   13580:	ldrb	r2, [r3, #19]
   13584:	cmp	r2, #46	; 0x2e
   13588:	bne	135a4 <__assert_fail@plt+0x1f68>
   1358c:	ldrb	r2, [r3, #20]
   13590:	cmp	r2, #0
   13594:	beq	132f0 <__assert_fail@plt+0x1cb4>
   13598:	ldrh	r2, [r3, #20]
   1359c:	cmp	r2, #46	; 0x2e
   135a0:	beq	132f0 <__assert_fail@plt+0x1cb4>
   135a4:	add	r7, r3, #19
   135a8:	str	r3, [sp, #44]	; 0x2c
   135ac:	mov	r0, r7
   135b0:	bl	1148c <strlen@plt>
   135b4:	mov	r2, r0
   135b8:	mov	r1, r7
   135bc:	mov	sl, r0
   135c0:	mov	r0, r4
   135c4:	bl	12a9c <__assert_fail@plt+0x1460>
   135c8:	subs	r7, r0, #0
   135cc:	beq	13608 <__assert_fail@plt+0x1fcc>
   135d0:	ldr	r3, [sp, #28]
   135d4:	cmp	r3, sl
   135d8:	ldr	r3, [sp, #44]	; 0x2c
   135dc:	bhi	13688 <__assert_fail@plt+0x204c>
   135e0:	ldr	r2, [r4, #24]
   135e4:	add	r1, fp, #2
   135e8:	mov	r0, r4
   135ec:	add	r1, r1, sl
   135f0:	str	r2, [sp, #28]
   135f4:	bl	12f0c <__assert_fail@plt+0x18d0>
   135f8:	cmp	r0, #0
   135fc:	ldr	r2, [sp, #28]
   13600:	ldr	r3, [sp, #44]	; 0x2c
   13604:	bne	13650 <__assert_fail@plt+0x2014>
   13608:	ldr	r3, [sp, #12]
   1360c:	mov	r0, r7
   13610:	ldr	r8, [r3]
   13614:	bl	17f50 <__assert_fail@plt+0x6914>
   13618:	mov	r0, r6
   1361c:	mov	r6, #0
   13620:	bl	12b44 <__assert_fail@plt+0x1508>
   13624:	ldr	r0, [r5, #12]
   13628:	bl	11624 <closedir@plt>
   1362c:	mov	r3, #7
   13630:	str	r6, [r5, #12]
   13634:	strh	r3, [r5, #56]	; 0x38
   13638:	ldr	r3, [r4, #48]	; 0x30
   1363c:	orr	r3, r3, #8192	; 0x2000
   13640:	str	r3, [r4, #48]	; 0x30
   13644:	ldr	r3, [sp, #12]
   13648:	str	r8, [r3]
   1364c:	b	131d8 <__assert_fail@plt+0x1b9c>
   13650:	ldr	r1, [r4, #24]
   13654:	cmp	r1, r2
   13658:	ldreq	r0, [sp, #20]
   1365c:	beq	13674 <__assert_fail@plt+0x2038>
   13660:	ldr	r2, [r4, #48]	; 0x30
   13664:	tst	r2, #4
   13668:	ldrne	r2, [sp, #16]
   1366c:	addne	r2, r1, r2
   13670:	strne	r2, [sp, #4]
   13674:	ldr	r1, [sp, #16]
   13678:	str	r0, [sp, #20]
   1367c:	ldr	r2, [r4, #36]	; 0x24
   13680:	sub	r2, r2, r1
   13684:	str	r2, [sp, #28]
   13688:	ldr	r2, [sp, #16]
   1368c:	adds	r2, r2, sl
   13690:	movcs	sl, #1
   13694:	movcc	sl, #0
   13698:	bcc	136e0 <__assert_fail@plt+0x20a4>
   1369c:	mov	r0, r7
   136a0:	bl	17f50 <__assert_fail@plt+0x6914>
   136a4:	mov	r0, r6
   136a8:	mov	r6, #0
   136ac:	bl	12b44 <__assert_fail@plt+0x1508>
   136b0:	ldr	r0, [r5, #12]
   136b4:	bl	11624 <closedir@plt>
   136b8:	mov	r3, #7
   136bc:	ldr	r2, [sp, #12]
   136c0:	str	r6, [r5, #12]
   136c4:	strh	r3, [r5, #56]	; 0x38
   136c8:	ldr	r3, [r4, #48]	; 0x30
   136cc:	orr	r3, r3, #8192	; 0x2000
   136d0:	str	r3, [r4, #48]	; 0x30
   136d4:	mov	r3, #36	; 0x24
   136d8:	str	r3, [r2]
   136dc:	b	131d8 <__assert_fail@plt+0x1b9c>
   136e0:	ldr	r1, [sp, #40]	; 0x28
   136e4:	str	r1, [r7, #48]	; 0x30
   136e8:	ldr	r1, [r4]
   136ec:	str	r1, [r7, #4]
   136f0:	str	r2, [r7, #40]	; 0x28
   136f4:	ldrd	r0, [r3]
   136f8:	ldr	r2, [r4, #48]	; 0x30
   136fc:	strd	r0, [r7, #160]	; 0xa0
   13700:	add	r1, r7, #168	; 0xa8
   13704:	tst	r2, #4
   13708:	streq	r1, [r7, #24]
   1370c:	beq	13730 <__assert_fail@plt+0x20f4>
   13710:	ldr	r2, [r7, #28]
   13714:	str	r3, [sp, #12]
   13718:	ldr	r0, [sp, #4]
   1371c:	str	r2, [r7, #24]
   13720:	ldr	r2, [r7, #52]	; 0x34
   13724:	add	r2, r2, #1
   13728:	bl	112b8 <memmove@plt>
   1372c:	ldr	r3, [sp, #12]
   13730:	ldr	r2, [r4, #44]	; 0x2c
   13734:	ldr	r1, [r4, #48]	; 0x30
   13738:	cmp	r2, #0
   1373c:	beq	13748 <__assert_fail@plt+0x210c>
   13740:	ands	r2, r1, #1024	; 0x400
   13744:	beq	13818 <__assert_fail@plt+0x21dc>
   13748:	ands	r2, r1, #8
   1374c:	ldrb	r3, [r3, #18]
   13750:	beq	1376c <__assert_fail@plt+0x2130>
   13754:	ands	r2, r3, #251	; 0xfb
   13758:	beq	1376c <__assert_fail@plt+0x2130>
   1375c:	ubfx	r1, r1, #4, #1
   13760:	cmp	r3, #10
   13764:	moveq	r2, r1
   13768:	orrne	r2, r1, #1
   1376c:	mov	r1, #11
   13770:	sub	r3, r3, #1
   13774:	cmp	r3, r1
   13778:	strh	r1, [r7, #56]	; 0x38
   1377c:	lslls	r3, r3, #1
   13780:	ldrls	r1, [pc, #508]	; 13984 <__assert_fail@plt+0x2348>
   13784:	ldrhls	sl, [r1, r3]
   13788:	cmp	r2, #0
   1378c:	mov	r3, #0
   13790:	movne	r2, #1
   13794:	moveq	r2, #2
   13798:	str	sl, [r7, #80]	; 0x50
   1379c:	strd	r2, [r7, #112]	; 0x70
   137a0:	mov	r3, #0
   137a4:	cmp	r6, r3
   137a8:	str	r3, [r7, #8]
   137ac:	moveq	r6, r7
   137b0:	ldrne	r3, [sp, #32]
   137b4:	strne	r7, [r3, #8]
   137b8:	movw	r3, #10000	; 0x2710
   137bc:	cmp	r9, r3
   137c0:	bne	13800 <__assert_fail@plt+0x21c4>
   137c4:	ldr	sl, [r4, #44]	; 0x2c
   137c8:	cmp	sl, #0
   137cc:	bne	13800 <__assert_fail@plt+0x21c4>
   137d0:	mov	r0, r5
   137d4:	ldr	r1, [sp, #52]	; 0x34
   137d8:	bl	12ba8 <__assert_fail@plt+0x156c>
   137dc:	movw	r3, #26985	; 0x6969
   137e0:	cmp	r0, r3
   137e4:	beq	1382c <__assert_fail@plt+0x21f0>
   137e8:	ldr	r3, [pc, #408]	; 13988 <__assert_fail@plt+0x234c>
   137ec:	cmp	r0, r3
   137f0:	beq	1382c <__assert_fail@plt+0x21f0>
   137f4:	ldr	r3, [pc, #384]	; 1397c <__assert_fail@plt+0x2340>
   137f8:	subs	r8, r0, r3
   137fc:	movne	r8, #1
   13800:	ldr	r3, [sp, #36]	; 0x24
   13804:	add	r9, r9, #1
   13808:	cmp	r3, r9
   1380c:	bls	1335c <__assert_fail@plt+0x1d20>
   13810:	str	r7, [sp, #32]
   13814:	b	132f0 <__assert_fail@plt+0x1cb4>
   13818:	mov	r1, r7
   1381c:	mov	r0, r4
   13820:	bl	128ac <__assert_fail@plt+0x1270>
   13824:	strh	r0, [r7, #56]	; 0x38
   13828:	b	137a0 <__assert_fail@plt+0x2164>
   1382c:	mov	r8, sl
   13830:	b	13800 <__assert_fail@plt+0x21c4>
   13834:	ldr	r3, [r4, #4]
   13838:	ldr	r1, [r4, #24]
   1383c:	cmp	r3, #0
   13840:	bne	13888 <__assert_fail@plt+0x224c>
   13844:	mov	r3, r6
   13848:	ldr	r2, [r3, #48]	; 0x30
   1384c:	cmp	r2, #0
   13850:	blt	13368 <__assert_fail@plt+0x1d2c>
   13854:	ldr	r2, [r3, #24]
   13858:	add	r0, r3, #168	; 0xa8
   1385c:	cmp	r2, r0
   13860:	ldrne	r0, [r3, #28]
   13864:	str	r1, [r3, #28]
   13868:	subne	r2, r2, r0
   1386c:	addne	r2, r1, r2
   13870:	strne	r2, [r3, #24]
   13874:	ldr	r2, [r3, #8]
   13878:	cmp	r2, #0
   1387c:	ldreq	r2, [r3, #4]
   13880:	mov	r3, r2
   13884:	b	13848 <__assert_fail@plt+0x220c>
   13888:	ldr	r2, [r3, #24]
   1388c:	add	r0, r3, #168	; 0xa8
   13890:	cmp	r2, r0
   13894:	ldrne	r0, [r3, #28]
   13898:	str	r1, [r3, #28]
   1389c:	subne	r2, r2, r0
   138a0:	addne	r2, r1, r2
   138a4:	strne	r2, [r3, #24]
   138a8:	ldr	r3, [r3, #8]
   138ac:	b	1383c <__assert_fail@plt+0x2200>
   138b0:	ldr	r2, [sp, #16]
   138b4:	ldr	r3, [r4, #36]	; 0x24
   138b8:	cmp	r9, #0
   138bc:	cmpne	r3, r2
   138c0:	ldreq	r3, [sp, #4]
   138c4:	subeq	r3, r3, #1
   138c8:	streq	r3, [sp, #4]
   138cc:	mov	r3, #0
   138d0:	ldr	r2, [sp, #4]
   138d4:	strb	r3, [r2]
   138d8:	b	13374 <__assert_fail@plt+0x1d38>
   138dc:	ldr	r3, [pc, #168]	; 1398c <__assert_fail@plt+0x2350>
   138e0:	mvn	r2, #0
   138e4:	mov	r0, r4
   138e8:	ldr	r1, [r5, #4]
   138ec:	bl	12d70 <__assert_fail@plt+0x1734>
   138f0:	b	133b0 <__assert_fail@plt+0x1d74>
   138f4:	cmp	r9, #0
   138f8:	bne	13920 <__assert_fail@plt+0x22e4>
   138fc:	ldr	r3, [sp, #8]
   13900:	cmp	r3, #3
   13904:	bne	133d4 <__assert_fail@plt+0x1d98>
   13908:	ldrh	r3, [r5, #56]	; 0x38
   1390c:	cmp	r3, #4
   13910:	cmpne	r3, #7
   13914:	movne	r3, #6
   13918:	strhne	r3, [r5, #56]	; 0x38
   1391c:	b	133d4 <__assert_fail@plt+0x1d98>
   13920:	cmp	r8, #0
   13924:	beq	13950 <__assert_fail@plt+0x2314>
   13928:	ldr	r3, [pc, #96]	; 13990 <__assert_fail@plt+0x2354>
   1392c:	mov	r1, r6
   13930:	mov	r2, r9
   13934:	mov	r0, r4
   13938:	str	r3, [r4, #44]	; 0x2c
   1393c:	bl	129e4 <__assert_fail@plt+0x13a8>
   13940:	mov	r3, #0
   13944:	mov	r6, r0
   13948:	str	r3, [r4, #44]	; 0x2c
   1394c:	b	131d8 <__assert_fail@plt+0x1b9c>
   13950:	ldr	r3, [r4, #44]	; 0x2c
   13954:	cmp	r3, #0
   13958:	cmpne	r9, #1
   1395c:	beq	131d8 <__assert_fail@plt+0x1b9c>
   13960:	mov	r1, r6
   13964:	mov	r2, r9
   13968:	mov	r0, r4
   1396c:	bl	129e4 <__assert_fail@plt+0x13a8>
   13970:	mov	r6, r0
   13974:	b	131d8 <__assert_fail@plt+0x1b9c>
   13978:	andeq	r8, r1, r0, lsr #13
   1397c:			; <UNDEFINED> instruction: 0xff534d42
   13980:	movtpl	r4, #24911	; 0x614f
   13984:	ldrdeq	r9, [r1], -r8
   13988:			; <UNDEFINED> instruction: 0x01021994
   1398c:	strdeq	r9, [r1], -r0
   13990:	andeq	r2, r1, r8, ror r8
   13994:	push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13998:	bic	r4, r1, #4080	; 0xff0
   1399c:	bic	r4, r4, #15
   139a0:	cmp	r4, #0
   139a4:	str	r0, [sp]
   139a8:	beq	139c0 <__assert_fail@plt+0x2384>
   139ac:	bl	114b0 <__errno_location@plt>
   139b0:	mov	r3, #22
   139b4:	str	r3, [r0]
   139b8:	mov	r4, #0
   139bc:	b	139dc <__assert_fail@plt+0x23a0>
   139c0:	and	r3, r1, #516	; 0x204
   139c4:	mov	r6, r1
   139c8:	cmp	r3, #516	; 0x204
   139cc:	bne	139e8 <__assert_fail@plt+0x23ac>
   139d0:	bl	114b0 <__errno_location@plt>
   139d4:	mov	r3, #22
   139d8:	str	r3, [r0]
   139dc:	mov	r0, r4
   139e0:	add	sp, sp, #12
   139e4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   139e8:	ands	r4, r1, #18
   139ec:	beq	139d0 <__assert_fail@plt+0x2394>
   139f0:	mov	r1, #96	; 0x60
   139f4:	mov	r0, #1
   139f8:	mov	sl, r2
   139fc:	bl	1796c <__assert_fail@plt+0x6330>
   13a00:	subs	r4, r0, #0
   13a04:	beq	139dc <__assert_fail@plt+0x23a0>
   13a08:	tst	r6, #2
   13a0c:	mov	r5, #0
   13a10:	str	sl, [r4, #44]	; 0x2c
   13a14:	bicne	r3, r6, #512	; 0x200
   13a18:	orrne	r3, r3, #4
   13a1c:	streq	r6, [r4, #48]	; 0x30
   13a20:	strne	r3, [r4, #48]	; 0x30
   13a24:	mvn	r3, #99	; 0x63
   13a28:	str	r3, [r4, #32]
   13a2c:	ldr	r3, [sp]
   13a30:	sub	r8, r3, #4
   13a34:	ldr	r7, [r8, #4]!
   13a38:	cmp	r7, #0
   13a3c:	bne	13b60 <__assert_fail@plt+0x2524>
   13a40:	add	r1, r5, #1
   13a44:	mov	r0, r4
   13a48:	cmp	r1, #4096	; 0x1000
   13a4c:	movcc	r1, #4096	; 0x1000
   13a50:	bl	12f0c <__assert_fail@plt+0x18d0>
   13a54:	cmp	r0, #0
   13a58:	beq	13c70 <__assert_fail@plt+0x2634>
   13a5c:	ldr	r3, [sp]
   13a60:	ldr	r8, [r3]
   13a64:	cmp	r8, #0
   13a68:	beq	13a8c <__assert_fail@plt+0x2450>
   13a6c:	mov	r2, r7
   13a70:	ldr	r1, [pc, #516]	; 13c7c <__assert_fail@plt+0x2640>
   13a74:	mov	r0, r4
   13a78:	bl	12a9c <__assert_fail@plt+0x1460>
   13a7c:	subs	r8, r0, #0
   13a80:	beq	13c68 <__assert_fail@plt+0x262c>
   13a84:	mvn	r3, #0
   13a88:	str	r3, [r8, #48]	; 0x30
   13a8c:	cmp	sl, #0
   13a90:	eor	r6, r6, #2048	; 0x800
   13a94:	ldrne	r3, [r4, #48]	; 0x30
   13a98:	mov	fp, #0
   13a9c:	ubfx	r6, r6, #11, #1
   13aa0:	moveq	r3, #1
   13aa4:	mov	r7, fp
   13aa8:	mov	r9, fp
   13aac:	ubfxne	r3, r3, #10, #1
   13ab0:	str	r3, [sp, #4]
   13ab4:	ldr	r3, [sp]
   13ab8:	ldr	r5, [r3, r9, lsl #2]
   13abc:	cmp	r5, #0
   13ac0:	bne	13b74 <__assert_fail@plt+0x2538>
   13ac4:	cmp	sl, #0
   13ac8:	cmpne	r9, #1
   13acc:	bls	13ae4 <__assert_fail@plt+0x24a8>
   13ad0:	mov	r1, r7
   13ad4:	mov	r2, r9
   13ad8:	mov	r0, r4
   13adc:	bl	129e4 <__assert_fail@plt+0x13a8>
   13ae0:	mov	r7, r0
   13ae4:	mov	r2, #0
   13ae8:	ldr	r1, [pc, #396]	; 13c7c <__assert_fail@plt+0x2640>
   13aec:	mov	r0, r4
   13af0:	bl	12a9c <__assert_fail@plt+0x1460>
   13af4:	cmp	r0, #0
   13af8:	str	r0, [r4]
   13afc:	beq	13c58 <__assert_fail@plt+0x261c>
   13b00:	mov	r3, #9
   13b04:	str	r7, [r0, #8]
   13b08:	strh	r3, [r0, #56]	; 0x38
   13b0c:	mov	r3, #1
   13b10:	str	r3, [r0, #48]	; 0x30
   13b14:	mov	r0, r4
   13b18:	bl	12f74 <__assert_fail@plt+0x1938>
   13b1c:	cmp	r0, #0
   13b20:	beq	13c58 <__assert_fail@plt+0x261c>
   13b24:	ldr	r3, [r4, #48]	; 0x30
   13b28:	tst	r3, #516	; 0x204
   13b2c:	bne	13b50 <__assert_fail@plt+0x2514>
   13b30:	ldr	r1, [pc, #328]	; 13c80 <__assert_fail@plt+0x2644>
   13b34:	mov	r0, r4
   13b38:	bl	12b10 <__assert_fail@plt+0x14d4>
   13b3c:	cmp	r0, #0
   13b40:	str	r0, [r4, #28]
   13b44:	ldrlt	r3, [r4, #48]	; 0x30
   13b48:	orrlt	r3, r3, #4
   13b4c:	strlt	r3, [r4, #48]	; 0x30
   13b50:	mvn	r1, #0
   13b54:	add	r0, r4, #60	; 0x3c
   13b58:	bl	15214 <__assert_fail@plt+0x3bd8>
   13b5c:	b	139dc <__assert_fail@plt+0x23a0>
   13b60:	mov	r0, r7
   13b64:	bl	1148c <strlen@plt>
   13b68:	cmp	r5, r0
   13b6c:	movcc	r5, r0
   13b70:	b	13a34 <__assert_fail@plt+0x23f8>
   13b74:	mov	r0, r5
   13b78:	bl	1148c <strlen@plt>
   13b7c:	cmp	r0, #2
   13b80:	movls	r1, #0
   13b84:	andhi	r1, r6, #1
   13b88:	mov	r2, r0
   13b8c:	cmp	r1, #0
   13b90:	beq	13ba8 <__assert_fail@plt+0x256c>
   13b94:	add	r1, r5, r0
   13b98:	ldrb	r1, [r1, #-1]
   13b9c:	cmp	r1, #47	; 0x2f
   13ba0:	subeq	r0, r5, #2
   13ba4:	beq	13c34 <__assert_fail@plt+0x25f8>
   13ba8:	mov	r1, r5
   13bac:	mov	r0, r4
   13bb0:	bl	12a9c <__assert_fail@plt+0x1460>
   13bb4:	subs	r5, r0, #0
   13bb8:	beq	13c58 <__assert_fail@plt+0x261c>
   13bbc:	mov	r2, #0
   13bc0:	cmp	r7, #0
   13bc4:	str	r8, [r5, #4]
   13bc8:	str	r2, [r5, #48]	; 0x30
   13bcc:	add	r2, r5, #168	; 0xa8
   13bd0:	str	r2, [r5, #24]
   13bd4:	ldr	r2, [sp, #4]
   13bd8:	moveq	r2, #0
   13bdc:	cmp	r2, #0
   13be0:	beq	13c44 <__assert_fail@plt+0x2608>
   13be4:	mov	r2, #11
   13be8:	mov	r0, #2
   13bec:	mov	r1, #0
   13bf0:	strh	r2, [r5, #56]	; 0x38
   13bf4:	strd	r0, [r5, #112]	; 0x70
   13bf8:	cmp	sl, #0
   13bfc:	strne	r7, [r5, #8]
   13c00:	bne	13c1c <__assert_fail@plt+0x25e0>
   13c04:	cmp	r7, #0
   13c08:	str	sl, [r5, #8]
   13c0c:	moveq	fp, r5
   13c10:	strne	r5, [fp, #8]
   13c14:	movne	fp, r5
   13c18:	movne	r5, r7
   13c1c:	add	r9, r9, #1
   13c20:	mov	r7, r5
   13c24:	b	13ab4 <__assert_fail@plt+0x2478>
   13c28:	sub	r2, r2, #1
   13c2c:	cmp	r2, #1
   13c30:	beq	13ba8 <__assert_fail@plt+0x256c>
   13c34:	ldrb	r1, [r0, r2]
   13c38:	cmp	r1, #47	; 0x2f
   13c3c:	beq	13c28 <__assert_fail@plt+0x25ec>
   13c40:	b	13ba8 <__assert_fail@plt+0x256c>
   13c44:	mov	r1, r5
   13c48:	mov	r0, r4
   13c4c:	bl	128ac <__assert_fail@plt+0x1270>
   13c50:	strh	r0, [r5, #56]	; 0x38
   13c54:	b	13bf8 <__assert_fail@plt+0x25bc>
   13c58:	mov	r0, r7
   13c5c:	bl	12b44 <__assert_fail@plt+0x1508>
   13c60:	mov	r0, r8
   13c64:	bl	17f50 <__assert_fail@plt+0x6914>
   13c68:	ldr	r0, [r4, #24]
   13c6c:	bl	17f50 <__assert_fail@plt+0x6914>
   13c70:	mov	r0, r4
   13c74:	bl	17f50 <__assert_fail@plt+0x6914>
   13c78:	b	139b8 <__assert_fail@plt+0x237c>
   13c7c:	andeq	r9, r1, r0, lsr #32
   13c80:	strdeq	r9, [r1], -r1
   13c84:	push	{r4, r5, r6, lr}
   13c88:	mov	r4, r0
   13c8c:	ldr	r0, [r0]
   13c90:	cmp	r0, #0
   13c94:	bne	13d2c <__assert_fail@plt+0x26f0>
   13c98:	ldr	r0, [r4, #4]
   13c9c:	cmp	r0, #0
   13ca0:	beq	13ca8 <__assert_fail@plt+0x266c>
   13ca4:	bl	12b44 <__assert_fail@plt+0x1508>
   13ca8:	ldr	r0, [r4, #8]
   13cac:	bl	17f50 <__assert_fail@plt+0x6914>
   13cb0:	ldr	r0, [r4, #24]
   13cb4:	bl	17f50 <__assert_fail@plt+0x6914>
   13cb8:	ldr	r3, [r4, #48]	; 0x30
   13cbc:	tst	r3, #512	; 0x200
   13cc0:	beq	13d58 <__assert_fail@plt+0x271c>
   13cc4:	ldr	r0, [r4, #32]
   13cc8:	cmp	r0, #0
   13ccc:	bge	13d40 <__assert_fail@plt+0x2704>
   13cd0:	mov	r5, #0
   13cd4:	add	r0, r4, #60	; 0x3c
   13cd8:	bl	12b78 <__assert_fail@plt+0x153c>
   13cdc:	ldr	r0, [r4, #52]	; 0x34
   13ce0:	cmp	r0, #0
   13ce4:	beq	13cec <__assert_fail@plt+0x26b0>
   13ce8:	bl	14d88 <__assert_fail@plt+0x374c>
   13cec:	mov	r0, r4
   13cf0:	bl	12fe8 <__assert_fail@plt+0x19ac>
   13cf4:	mov	r0, r4
   13cf8:	bl	17f50 <__assert_fail@plt+0x6914>
   13cfc:	cmp	r5, #0
   13d00:	beq	13d10 <__assert_fail@plt+0x26d4>
   13d04:	bl	114b0 <__errno_location@plt>
   13d08:	str	r5, [r0]
   13d0c:	mvn	r5, #0
   13d10:	mov	r0, r5
   13d14:	pop	{r4, r5, r6, pc}
   13d18:	ldr	r5, [r0, #8]
   13d1c:	cmp	r5, #0
   13d20:	ldreq	r5, [r0, #4]
   13d24:	bl	17f50 <__assert_fail@plt+0x6914>
   13d28:	mov	r0, r5
   13d2c:	ldr	r3, [r0, #48]	; 0x30
   13d30:	cmp	r3, #0
   13d34:	bge	13d18 <__assert_fail@plt+0x26dc>
   13d38:	bl	17f50 <__assert_fail@plt+0x6914>
   13d3c:	b	13c98 <__assert_fail@plt+0x265c>
   13d40:	bl	1160c <close@plt>
   13d44:	cmp	r0, #0
   13d48:	beq	13cd0 <__assert_fail@plt+0x2694>
   13d4c:	bl	114b0 <__errno_location@plt>
   13d50:	ldr	r5, [r0]
   13d54:	b	13cd4 <__assert_fail@plt+0x2698>
   13d58:	tst	r3, #4
   13d5c:	bne	13cd0 <__assert_fail@plt+0x2694>
   13d60:	ldr	r0, [r4, #28]
   13d64:	bl	11594 <fchdir@plt>
   13d68:	subs	r5, r0, #0
   13d6c:	beq	13d78 <__assert_fail@plt+0x273c>
   13d70:	bl	114b0 <__errno_location@plt>
   13d74:	ldr	r5, [r0]
   13d78:	ldr	r0, [r4, #28]
   13d7c:	bl	1160c <close@plt>
   13d80:	adds	r0, r0, #0
   13d84:	movne	r0, #1
   13d88:	cmp	r5, #0
   13d8c:	movne	r0, #0
   13d90:	cmp	r0, #0
   13d94:	beq	13cd4 <__assert_fail@plt+0x2698>
   13d98:	b	13d4c <__assert_fail@plt+0x2710>
   13d9c:	push	{r4, r5, r6, r7, r8, lr}
   13da0:	ldr	r4, [r0]
   13da4:	cmp	r4, #0
   13da8:	bne	13db8 <__assert_fail@plt+0x277c>
   13dac:	mov	r4, #0
   13db0:	mov	r0, r4
   13db4:	pop	{r4, r5, r6, r7, r8, pc}
   13db8:	ldr	r1, [r0, #48]	; 0x30
   13dbc:	mov	r5, r0
   13dc0:	ands	r2, r1, #8192	; 0x2000
   13dc4:	bne	13dac <__assert_fail@plt+0x2770>
   13dc8:	ldrh	ip, [r4, #60]	; 0x3c
   13dcc:	mov	r3, #3
   13dd0:	strh	r3, [r4, #60]	; 0x3c
   13dd4:	cmp	ip, #1
   13dd8:	bne	13dec <__assert_fail@plt+0x27b0>
   13ddc:	mov	r1, r4
   13de0:	bl	128ac <__assert_fail@plt+0x1270>
   13de4:	strh	r0, [r4, #56]	; 0x38
   13de8:	b	13db0 <__assert_fail@plt+0x2774>
   13dec:	cmp	ip, #2
   13df0:	ldrh	r3, [r4, #56]	; 0x38
   13df4:	bne	13ed4 <__assert_fail@plt+0x2898>
   13df8:	sub	r2, r3, #12
   13dfc:	cmp	r2, #1
   13e00:	bhi	142c8 <__assert_fail@plt+0x2c8c>
   13e04:	mov	r2, #1
   13e08:	mov	r1, r4
   13e0c:	bl	128ac <__assert_fail@plt+0x1270>
   13e10:	cmp	r0, #1
   13e14:	strh	r0, [r4, #56]	; 0x38
   13e18:	bne	13e60 <__assert_fail@plt+0x2824>
   13e1c:	ldr	r3, [r5, #48]	; 0x30
   13e20:	tst	r3, #4
   13e24:	bne	13e60 <__assert_fail@plt+0x2824>
   13e28:	ldr	r1, [pc, #1320]	; 14358 <__assert_fail@plt+0x2d1c>
   13e2c:	mov	r0, r5
   13e30:	bl	12b10 <__assert_fail@plt+0x14d4>
   13e34:	cmp	r0, #0
   13e38:	str	r0, [r4, #36]	; 0x24
   13e3c:	ldrhge	r3, [r4, #58]	; 0x3a
   13e40:	orrge	r3, r3, #2
   13e44:	strhge	r3, [r4, #58]	; 0x3a
   13e48:	bge	13e60 <__assert_fail@plt+0x2824>
   13e4c:	bl	114b0 <__errno_location@plt>
   13e50:	ldr	r3, [r0]
   13e54:	str	r3, [r4, #32]
   13e58:	mov	r3, #7
   13e5c:	strh	r3, [r4, #56]	; 0x38
   13e60:	ldrh	r3, [r4, #56]	; 0x38
   13e64:	str	r4, [r5]
   13e68:	cmp	r3, #11
   13e6c:	bne	13e94 <__assert_fail@plt+0x2858>
   13e70:	ldrd	r2, [r4, #112]	; 0x70
   13e74:	cmp	r3, #0
   13e78:	cmpeq	r2, #2
   13e7c:	bne	14110 <__assert_fail@plt+0x2ad4>
   13e80:	mov	r2, #0
   13e84:	mov	r1, r4
   13e88:	mov	r0, r5
   13e8c:	bl	128ac <__assert_fail@plt+0x1270>
   13e90:	strh	r0, [r4, #56]	; 0x38
   13e94:	ldrh	r3, [r4, #56]	; 0x38
   13e98:	cmp	r3, #1
   13e9c:	bne	13db0 <__assert_fail@plt+0x2774>
   13ea0:	ldr	r3, [r4, #48]	; 0x30
   13ea4:	mov	r0, r5
   13ea8:	mov	r1, r4
   13eac:	cmp	r3, #0
   13eb0:	ldrdeq	r2, [r4, #64]	; 0x40
   13eb4:	strdeq	r2, [r5, #16]
   13eb8:	bl	13010 <__assert_fail@plt+0x19d4>
   13ebc:	subs	r5, r0, #0
   13ec0:	bne	13db0 <__assert_fail@plt+0x2774>
   13ec4:	bl	114b0 <__errno_location@plt>
   13ec8:	mov	r3, #12
   13ecc:	str	r3, [r0]
   13ed0:	b	13dac <__assert_fail@plt+0x2770>
   13ed4:	cmp	r3, #1
   13ed8:	bne	142d0 <__assert_fail@plt+0x2c94>
   13edc:	cmp	ip, #4
   13ee0:	beq	13f00 <__assert_fail@plt+0x28c4>
   13ee4:	tst	r1, #64	; 0x40
   13ee8:	beq	13f44 <__assert_fail@plt+0x2908>
   13eec:	ldrd	r2, [r5, #16]
   13ef0:	ldrd	r6, [r4, #64]	; 0x40
   13ef4:	cmp	r7, r3
   13ef8:	cmpeq	r6, r2
   13efc:	beq	13f44 <__assert_fail@plt+0x2908>
   13f00:	ldrh	r3, [r4, #58]	; 0x3a
   13f04:	tst	r3, #2
   13f08:	beq	13f14 <__assert_fail@plt+0x28d8>
   13f0c:	ldr	r0, [r4, #36]	; 0x24
   13f10:	bl	1160c <close@plt>
   13f14:	ldr	r0, [r5, #4]
   13f18:	cmp	r0, #0
   13f1c:	beq	13f2c <__assert_fail@plt+0x28f0>
   13f20:	bl	12b44 <__assert_fail@plt+0x1508>
   13f24:	mov	r3, #0
   13f28:	str	r3, [r5, #4]
   13f2c:	mov	r3, #6
   13f30:	strh	r3, [r4, #56]	; 0x38
   13f34:	mov	r1, r4
   13f38:	mov	r0, r5
   13f3c:	bl	130c0 <__assert_fail@plt+0x1a84>
   13f40:	b	13db0 <__assert_fail@plt+0x2774>
   13f44:	ldr	r0, [r5, #4]
   13f48:	cmp	r0, #0
   13f4c:	beq	13f6c <__assert_fail@plt+0x2930>
   13f50:	tst	r1, #4096	; 0x1000
   13f54:	beq	14238 <__assert_fail@plt+0x2bfc>
   13f58:	bic	r1, r1, #4096	; 0x1000
   13f5c:	str	r1, [r5, #48]	; 0x30
   13f60:	bl	12b44 <__assert_fail@plt+0x1508>
   13f64:	mov	r3, #0
   13f68:	str	r3, [r5, #4]
   13f6c:	mov	r1, #3
   13f70:	mov	r0, r5
   13f74:	bl	13170 <__assert_fail@plt+0x1b34>
   13f78:	cmp	r0, #0
   13f7c:	str	r0, [r5, #4]
   13f80:	bne	14278 <__assert_fail@plt+0x2c3c>
   13f84:	ldr	r3, [r5, #48]	; 0x30
   13f88:	tst	r3, #8192	; 0x2000
   13f8c:	bne	13dac <__assert_fail@plt+0x2770>
   13f90:	ldr	r3, [r4, #32]
   13f94:	cmp	r3, #0
   13f98:	beq	13f34 <__assert_fail@plt+0x28f8>
   13f9c:	ldrh	r3, [r4, #56]	; 0x38
   13fa0:	cmp	r3, #4
   13fa4:	beq	13f34 <__assert_fail@plt+0x28f8>
   13fa8:	mov	r3, #7
   13fac:	b	13f30 <__assert_fail@plt+0x28f4>
   13fb0:	ldr	r2, [r3, #4]
   13fb4:	ldr	r2, [r2, #24]
   13fb8:	str	r2, [r3, #24]
   13fbc:	ldr	r3, [r3, #8]
   13fc0:	b	14270 <__assert_fail@plt+0x2c34>
   13fc4:	mov	r0, r6
   13fc8:	bl	17f50 <__assert_fail@plt+0x6914>
   13fcc:	b	14284 <__assert_fail@plt+0x2c48>
   13fd0:	mov	r0, r6
   13fd4:	str	r4, [r5]
   13fd8:	bl	17f50 <__assert_fail@plt+0x6914>
   13fdc:	ldr	r6, [r4, #48]	; 0x30
   13fe0:	cmp	r6, #0
   13fe4:	bne	1408c <__assert_fail@plt+0x2a50>
   13fe8:	mov	r0, r5
   13fec:	bl	12d20 <__assert_fail@plt+0x16e4>
   13ff0:	cmp	r0, #0
   13ff4:	ldrne	r3, [r5, #48]	; 0x30
   13ff8:	orrne	r3, r3, #8192	; 0x2000
   13ffc:	strne	r3, [r5, #48]	; 0x30
   14000:	bne	13dac <__assert_fail@plt+0x2770>
   14004:	mov	r0, r5
   14008:	add	r6, r4, #168	; 0xa8
   1400c:	bl	12fe8 <__assert_fail@plt+0x19ac>
   14010:	ldr	r2, [r4, #52]	; 0x34
   14014:	mov	r1, r6
   14018:	ldr	r0, [r5, #24]
   1401c:	str	r2, [r4, #40]	; 0x28
   14020:	add	r2, r2, #1
   14024:	bl	112b8 <memmove@plt>
   14028:	mov	r1, #47	; 0x2f
   1402c:	mov	r0, r6
   14030:	bl	11558 <strrchr@plt>
   14034:	cmp	r0, #0
   14038:	beq	14074 <__assert_fail@plt+0x2a38>
   1403c:	cmp	r6, r0
   14040:	bne	14050 <__assert_fail@plt+0x2a14>
   14044:	ldrb	r3, [r6, #1]
   14048:	cmp	r3, #0
   1404c:	beq	14074 <__assert_fail@plt+0x2a38>
   14050:	add	r7, r0, #1
   14054:	mov	r0, r7
   14058:	bl	1148c <strlen@plt>
   1405c:	mov	r8, r0
   14060:	add	r2, r0, #1
   14064:	mov	r1, r7
   14068:	mov	r0, r6
   1406c:	bl	112b8 <memmove@plt>
   14070:	str	r8, [r4, #52]	; 0x34
   14074:	ldr	r3, [r5, #24]
   14078:	mov	r0, r5
   1407c:	str	r3, [r4, #24]
   14080:	str	r3, [r4, #28]
   14084:	bl	12f74 <__assert_fail@plt+0x1938>
   14088:	b	13e60 <__assert_fail@plt+0x2824>
   1408c:	ldrh	r3, [r4, #60]	; 0x3c
   14090:	mov	r6, r4
   14094:	cmp	r3, #4
   14098:	beq	142d4 <__assert_fail@plt+0x2c98>
   1409c:	cmp	r3, #2
   140a0:	bne	14284 <__assert_fail@plt+0x2c48>
   140a4:	mov	r2, #1
   140a8:	mov	r1, r4
   140ac:	mov	r0, r5
   140b0:	bl	128ac <__assert_fail@plt+0x1270>
   140b4:	cmp	r0, #1
   140b8:	strh	r0, [r4, #56]	; 0x38
   140bc:	bne	14104 <__assert_fail@plt+0x2ac8>
   140c0:	ldr	r3, [r5, #48]	; 0x30
   140c4:	tst	r3, #4
   140c8:	bne	14104 <__assert_fail@plt+0x2ac8>
   140cc:	ldr	r1, [pc, #644]	; 14358 <__assert_fail@plt+0x2d1c>
   140d0:	mov	r0, r5
   140d4:	bl	12b10 <__assert_fail@plt+0x14d4>
   140d8:	cmp	r0, #0
   140dc:	str	r0, [r4, #36]	; 0x24
   140e0:	ldrhge	r3, [r4, #58]	; 0x3a
   140e4:	orrge	r3, r3, #2
   140e8:	strhge	r3, [r4, #58]	; 0x3a
   140ec:	bge	14104 <__assert_fail@plt+0x2ac8>
   140f0:	bl	114b0 <__errno_location@plt>
   140f4:	ldr	r3, [r0]
   140f8:	str	r3, [r4, #32]
   140fc:	mov	r3, #7
   14100:	strh	r3, [r4, #56]	; 0x38
   14104:	mov	r3, #3
   14108:	strh	r3, [r4, #60]	; 0x3c
   1410c:	b	14284 <__assert_fail@plt+0x2c48>
   14110:	cmp	r3, #0
   14114:	cmpeq	r2, #1
   14118:	beq	13db0 <__assert_fail@plt+0x2774>
   1411c:	bl	11600 <abort@plt>
   14120:	ldrh	r3, [r4, #56]	; 0x38
   14124:	cmp	r3, #11
   14128:	beq	1411c <__assert_fail@plt+0x2ae0>
   1412c:	ldr	r2, [r5, #24]
   14130:	mov	r1, #0
   14134:	ldr	r3, [r4, #40]	; 0x28
   14138:	strb	r1, [r2, r3]
   1413c:	ldr	r3, [r4, #48]	; 0x30
   14140:	cmp	r3, r1
   14144:	bne	14174 <__assert_fail@plt+0x2b38>
   14148:	mov	r0, r5
   1414c:	bl	12d20 <__assert_fail@plt+0x16e4>
   14150:	cmp	r0, #0
   14154:	beq	141ac <__assert_fail@plt+0x2b70>
   14158:	bl	114b0 <__errno_location@plt>
   1415c:	ldr	r3, [r0]
   14160:	str	r3, [r4, #32]
   14164:	ldr	r3, [r5, #48]	; 0x30
   14168:	orr	r3, r3, #8192	; 0x2000
   1416c:	str	r3, [r5, #48]	; 0x30
   14170:	b	141ac <__assert_fail@plt+0x2b70>
   14174:	ldrh	r3, [r4, #58]	; 0x3a
   14178:	tst	r3, #2
   1417c:	beq	14218 <__assert_fail@plt+0x2bdc>
   14180:	ldr	r3, [r5, #48]	; 0x30
   14184:	tst	r3, #4
   14188:	bne	141a4 <__assert_fail@plt+0x2b68>
   1418c:	tst	r3, #512	; 0x200
   14190:	ldr	r1, [r4, #36]	; 0x24
   14194:	beq	141ec <__assert_fail@plt+0x2bb0>
   14198:	mov	r2, #1
   1419c:	mov	r0, r5
   141a0:	bl	12cac <__assert_fail@plt+0x1670>
   141a4:	ldr	r0, [r4, #36]	; 0x24
   141a8:	bl	1160c <close@plt>
   141ac:	ldrh	r3, [r4, #56]	; 0x38
   141b0:	cmp	r3, #2
   141b4:	beq	141dc <__assert_fail@plt+0x2ba0>
   141b8:	ldr	r3, [r4, #32]
   141bc:	cmp	r3, #0
   141c0:	movne	r3, #7
   141c4:	moveq	r3, #6
   141c8:	strh	r3, [r4, #56]	; 0x38
   141cc:	bne	141dc <__assert_fail@plt+0x2ba0>
   141d0:	mov	r1, r4
   141d4:	mov	r0, r5
   141d8:	bl	130c0 <__assert_fail@plt+0x1a84>
   141dc:	ldr	r3, [r5, #48]	; 0x30
   141e0:	tst	r3, #8192	; 0x2000
   141e4:	beq	13db0 <__assert_fail@plt+0x2774>
   141e8:	b	13dac <__assert_fail@plt+0x2770>
   141ec:	mov	r0, r1
   141f0:	bl	11594 <fchdir@plt>
   141f4:	cmp	r0, #0
   141f8:	beq	141a4 <__assert_fail@plt+0x2b68>
   141fc:	bl	114b0 <__errno_location@plt>
   14200:	ldr	r3, [r0]
   14204:	str	r3, [r4, #32]
   14208:	ldr	r3, [r5, #48]	; 0x30
   1420c:	orr	r3, r3, #8192	; 0x2000
   14210:	str	r3, [r5, #48]	; 0x30
   14214:	b	141a4 <__assert_fail@plt+0x2b68>
   14218:	tst	r3, #1
   1421c:	bne	141ac <__assert_fail@plt+0x2b70>
   14220:	ldr	r3, [pc, #308]	; 1435c <__assert_fail@plt+0x2d20>
   14224:	mvn	r2, #0
   14228:	mov	r0, r5
   1422c:	ldr	r1, [r4, #4]
   14230:	bl	12d70 <__assert_fail@plt+0x1734>
   14234:	b	14150 <__assert_fail@plt+0x2b14>
   14238:	mvn	r2, #0
   1423c:	mov	r1, r4
   14240:	ldr	r3, [r4, #24]
   14244:	mov	r0, r5
   14248:	bl	12d70 <__assert_fail@plt+0x1734>
   1424c:	cmp	r0, #0
   14250:	beq	14278 <__assert_fail@plt+0x2c3c>
   14254:	bl	114b0 <__errno_location@plt>
   14258:	ldr	r3, [r0]
   1425c:	str	r3, [r4, #32]
   14260:	ldrh	r3, [r4, #58]	; 0x3a
   14264:	orr	r3, r3, #1
   14268:	strh	r3, [r4, #58]	; 0x3a
   1426c:	ldr	r3, [r5, #4]
   14270:	cmp	r3, #0
   14274:	bne	13fb0 <__assert_fail@plt+0x2974>
   14278:	mov	r3, #0
   1427c:	ldr	r4, [r5, #4]
   14280:	str	r3, [r5, #4]
   14284:	ldr	r0, [r4, #4]
   14288:	ldr	r2, [r5, #24]
   1428c:	ldr	r1, [r0, #40]	; 0x28
   14290:	ldr	r0, [r0, #28]
   14294:	sub	r3, r1, #1
   14298:	ldrb	r0, [r0, r3]
   1429c:	cmp	r0, #47	; 0x2f
   142a0:	movne	r3, r1
   142a4:	mov	r1, #47	; 0x2f
   142a8:	add	r0, r2, r3
   142ac:	strb	r1, [r2, r3]
   142b0:	add	r0, r0, #1
   142b4:	add	r1, r4, #168	; 0xa8
   142b8:	ldr	r2, [r4, #52]	; 0x34
   142bc:	add	r2, r2, #1
   142c0:	bl	112b8 <memmove@plt>
   142c4:	b	13e60 <__assert_fail@plt+0x2824>
   142c8:	cmp	r3, #1
   142cc:	beq	13ee4 <__assert_fail@plt+0x28a8>
   142d0:	mov	r6, r4
   142d4:	ldr	r4, [r6, #8]
   142d8:	cmp	r4, #0
   142dc:	bne	13fd0 <__assert_fail@plt+0x2994>
   142e0:	ldr	r3, [r6, #4]
   142e4:	ldr	r2, [r3, #12]
   142e8:	cmp	r2, #0
   142ec:	beq	14320 <__assert_fail@plt+0x2ce4>
   142f0:	str	r3, [r5]
   142f4:	mov	r1, #3
   142f8:	mov	r0, r5
   142fc:	ldr	r2, [r5, #24]
   14300:	ldr	r3, [r3, #40]	; 0x28
   14304:	strb	r4, [r2, r3]
   14308:	bl	13170 <__assert_fail@plt+0x1b34>
   1430c:	subs	r4, r0, #0
   14310:	bne	13fc4 <__assert_fail@plt+0x2988>
   14314:	ldr	r3, [r5, #48]	; 0x30
   14318:	tst	r3, #8192	; 0x2000
   1431c:	bne	13dac <__assert_fail@plt+0x2770>
   14320:	ldr	r4, [r6, #4]
   14324:	mov	r0, r6
   14328:	str	r4, [r5]
   1432c:	bl	17f50 <__assert_fail@plt+0x6914>
   14330:	ldr	r3, [r4, #48]	; 0x30
   14334:	cmn	r3, #1
   14338:	bne	14120 <__assert_fail@plt+0x2ae4>
   1433c:	mov	r0, r4
   14340:	mov	r4, #0
   14344:	bl	17f50 <__assert_fail@plt+0x6914>
   14348:	bl	114b0 <__errno_location@plt>
   1434c:	str	r4, [r0]
   14350:	str	r4, [r5]
   14354:	b	13db0 <__assert_fail@plt+0x2774>
   14358:	strdeq	r9, [r1], -r1
   1435c:	strdeq	r9, [r1], -r0
   14360:	cmp	r2, #4
   14364:	bls	14380 <__assert_fail@plt+0x2d44>
   14368:	push	{r4, lr}
   1436c:	bl	114b0 <__errno_location@plt>
   14370:	mov	r3, #22
   14374:	str	r3, [r0]
   14378:	mov	r0, #1
   1437c:	pop	{r4, pc}
   14380:	mov	r0, #0
   14384:	strh	r2, [r1, #60]	; 0x3c
   14388:	bx	lr
   1438c:	push	{r4, r5, r6, r7, r8, lr}
   14390:	mov	r7, r1
   14394:	mov	r5, r0
   14398:	bl	114b0 <__errno_location@plt>
   1439c:	bics	r2, r7, #4096	; 0x1000
   143a0:	mov	r6, r0
   143a4:	beq	143b8 <__assert_fail@plt+0x2d7c>
   143a8:	mov	r3, #22
   143ac:	str	r3, [r0]
   143b0:	mov	r0, #0
   143b4:	pop	{r4, r5, r6, r7, r8, pc}
   143b8:	ldr	r4, [r5]
   143bc:	str	r2, [r0]
   143c0:	ldr	r3, [r5, #48]	; 0x30
   143c4:	ands	r0, r3, #8192	; 0x2000
   143c8:	bne	143b0 <__assert_fail@plt+0x2d74>
   143cc:	ldrh	r3, [r4, #56]	; 0x38
   143d0:	cmp	r3, #9
   143d4:	bne	143e0 <__assert_fail@plt+0x2da4>
   143d8:	ldr	r0, [r4, #8]
   143dc:	pop	{r4, r5, r6, r7, r8, pc}
   143e0:	cmp	r3, #1
   143e4:	popne	{r4, r5, r6, r7, r8, pc}
   143e8:	ldr	r0, [r5, #4]
   143ec:	cmp	r0, #0
   143f0:	beq	143f8 <__assert_fail@plt+0x2dbc>
   143f4:	bl	12b44 <__assert_fail@plt+0x1508>
   143f8:	cmp	r7, #4096	; 0x1000
   143fc:	ldreq	r3, [r5, #48]	; 0x30
   14400:	moveq	r8, #2
   14404:	movne	r8, #1
   14408:	orreq	r3, r3, #4096	; 0x1000
   1440c:	streq	r3, [r5, #48]	; 0x30
   14410:	ldr	r3, [r4, #48]	; 0x30
   14414:	cmp	r3, #0
   14418:	bne	14438 <__assert_fail@plt+0x2dfc>
   1441c:	ldr	r3, [r4, #24]
   14420:	ldrb	r3, [r3]
   14424:	cmp	r3, #47	; 0x2f
   14428:	beq	14438 <__assert_fail@plt+0x2dfc>
   1442c:	ldr	r0, [r5, #48]	; 0x30
   14430:	ands	r4, r0, #4
   14434:	beq	1444c <__assert_fail@plt+0x2e10>
   14438:	mov	r1, r8
   1443c:	mov	r0, r5
   14440:	bl	13170 <__assert_fail@plt+0x1b34>
   14444:	str	r0, [r5, #4]
   14448:	pop	{r4, r5, r6, r7, r8, pc}
   1444c:	ldr	r1, [pc, #116]	; 144c8 <__assert_fail@plt+0x2e8c>
   14450:	mov	r0, r5
   14454:	bl	12b10 <__assert_fail@plt+0x14d4>
   14458:	subs	r7, r0, #0
   1445c:	strlt	r4, [r5, #4]
   14460:	blt	143b0 <__assert_fail@plt+0x2d74>
   14464:	mov	r1, r8
   14468:	mov	r0, r5
   1446c:	bl	13170 <__assert_fail@plt+0x1b34>
   14470:	str	r0, [r5, #4]
   14474:	ldr	r0, [r5, #48]	; 0x30
   14478:	ands	r4, r0, #512	; 0x200
   1447c:	beq	14498 <__assert_fail@plt+0x2e5c>
   14480:	mov	r2, #1
   14484:	mov	r1, r7
   14488:	mov	r0, r5
   1448c:	bl	12cac <__assert_fail@plt+0x1670>
   14490:	ldr	r0, [r5, #4]
   14494:	pop	{r4, r5, r6, r7, r8, pc}
   14498:	mov	r0, r7
   1449c:	bl	11594 <fchdir@plt>
   144a0:	cmp	r0, #0
   144a4:	beq	144bc <__assert_fail@plt+0x2e80>
   144a8:	ldr	r5, [r6]
   144ac:	mov	r0, r7
   144b0:	bl	1160c <close@plt>
   144b4:	str	r5, [r6]
   144b8:	b	143b0 <__assert_fail@plt+0x2d74>
   144bc:	mov	r0, r7
   144c0:	bl	1160c <close@plt>
   144c4:	b	14490 <__assert_fail@plt+0x2e54>
   144c8:	strdeq	r9, [r1], -r1
   144cc:	andeq	r0, r0, r0
   144d0:	ror	r0, r0, #3
   144d4:	udiv	r3, r0, r1
   144d8:	mls	r0, r3, r1, r0
   144dc:	bx	lr
   144e0:	sub	r0, r1, r0
   144e4:	clz	r0, r0
   144e8:	lsr	r0, r0, #5
   144ec:	bx	lr
   144f0:	ldrb	r3, [r1, #16]
   144f4:	cmp	r3, #0
   144f8:	bne	14524 <__assert_fail@plt+0x2ee8>
   144fc:	vmov	s15, r0
   14500:	vldr	s14, [r1, #8]
   14504:	vcvt.f32.u32	s13, s15
   14508:	vdiv.f32	s15, s13, s14
   1450c:	vldr	s14, [pc, #140]	; 145a0 <__assert_fail@plt+0x2f64>
   14510:	vcmpe.f32	s15, s14
   14514:	vmrs	APSR_nzcv, fpscr
   14518:	bge	14538 <__assert_fail@plt+0x2efc>
   1451c:	vcvt.u32.f32	s15, s15
   14520:	vmov	r0, s15
   14524:	cmp	r0, #10
   14528:	movcc	r0, #10
   1452c:	orr	r0, r0, #1
   14530:	cmn	r0, #1
   14534:	bne	1456c <__assert_fail@plt+0x2f30>
   14538:	mov	r0, #0
   1453c:	bx	lr
   14540:	add	r2, r3, #1
   14544:	add	r3, r3, #2
   14548:	add	r1, r1, r2, lsl #2
   1454c:	udiv	r2, r0, r3
   14550:	cmp	r0, r1
   14554:	mls	r2, r3, r2, r0
   14558:	bls	14578 <__assert_fail@plt+0x2f3c>
   1455c:	cmp	r2, #0
   14560:	bne	14540 <__assert_fail@plt+0x2f04>
   14564:	add	r0, r0, #2
   14568:	b	14530 <__assert_fail@plt+0x2ef4>
   1456c:	mov	r1, #9
   14570:	mov	r3, #3
   14574:	b	1454c <__assert_fail@plt+0x2f10>
   14578:	cmp	r2, #0
   1457c:	beq	14564 <__assert_fail@plt+0x2f28>
   14580:	lsrs	r3, r0, #30
   14584:	movne	r3, #1
   14588:	moveq	r3, #0
   1458c:	tst	r0, #536870912	; 0x20000000
   14590:	bne	14538 <__assert_fail@plt+0x2efc>
   14594:	cmp	r3, #0
   14598:	bxeq	lr
   1459c:	b	14538 <__assert_fail@plt+0x2efc>
   145a0:	svcmi	0x00800000
   145a4:	push	{r4, lr}
   145a8:	mov	r4, r0
   145ac:	mov	r0, r1
   145b0:	ldr	r1, [r4, #8]
   145b4:	ldr	r3, [r4, #24]
   145b8:	blx	r3
   145bc:	ldr	r3, [r4, #8]
   145c0:	cmp	r3, r0
   145c4:	bhi	145cc <__assert_fail@plt+0x2f90>
   145c8:	bl	11600 <abort@plt>
   145cc:	ldr	r3, [r4]
   145d0:	add	r0, r3, r0, lsl #3
   145d4:	pop	{r4, pc}
   145d8:	push	{r4, r5, r6, r7, r8, lr}
   145dc:	mov	r8, r2
   145e0:	mov	r6, r1
   145e4:	mov	r5, r0
   145e8:	mov	r7, r3
   145ec:	bl	145a4 <__assert_fail@plt+0x2f68>
   145f0:	str	r0, [r8]
   145f4:	ldr	r1, [r0]
   145f8:	cmp	r1, #0
   145fc:	bne	1460c <__assert_fail@plt+0x2fd0>
   14600:	mov	r2, #0
   14604:	mov	r0, r2
   14608:	pop	{r4, r5, r6, r7, r8, pc}
   1460c:	cmp	r1, r6
   14610:	mov	r4, r0
   14614:	beq	1462c <__assert_fail@plt+0x2ff0>
   14618:	mov	r0, r6
   1461c:	ldr	r3, [r5, #28]
   14620:	blx	r3
   14624:	cmp	r0, #0
   14628:	beq	14680 <__assert_fail@plt+0x3044>
   1462c:	cmp	r7, #0
   14630:	ldr	r2, [r4]
   14634:	beq	14604 <__assert_fail@plt+0x2fc8>
   14638:	ldr	r3, [r4, #4]
   1463c:	cmp	r3, #0
   14640:	streq	r3, [r4]
   14644:	beq	14604 <__assert_fail@plt+0x2fc8>
   14648:	ldm	r3, {r0, r1}
   1464c:	stm	r4, {r0, r1}
   14650:	mov	r1, #0
   14654:	str	r1, [r3]
   14658:	ldr	r1, [r5, #36]	; 0x24
   1465c:	str	r1, [r3, #4]
   14660:	str	r3, [r5, #36]	; 0x24
   14664:	b	14604 <__assert_fail@plt+0x2fc8>
   14668:	mov	r0, r6
   1466c:	ldr	r3, [r5, #28]
   14670:	blx	r3
   14674:	cmp	r0, #0
   14678:	bne	14698 <__assert_fail@plt+0x305c>
   1467c:	ldr	r4, [r4, #4]
   14680:	ldr	r3, [r4, #4]
   14684:	cmp	r3, #0
   14688:	beq	14600 <__assert_fail@plt+0x2fc4>
   1468c:	ldr	r1, [r3]
   14690:	cmp	r1, r6
   14694:	bne	14668 <__assert_fail@plt+0x302c>
   14698:	ldr	r3, [r4, #4]
   1469c:	cmp	r7, #0
   146a0:	ldr	r2, [r3]
   146a4:	beq	14604 <__assert_fail@plt+0x2fc8>
   146a8:	ldr	r1, [r3, #4]
   146ac:	str	r1, [r4, #4]
   146b0:	b	14650 <__assert_fail@plt+0x3014>
   146b4:	ldr	r2, [pc, #164]	; 14760 <__assert_fail@plt+0x3124>
   146b8:	ldr	r3, [r0]
   146bc:	cmp	r3, r2
   146c0:	beq	14748 <__assert_fail@plt+0x310c>
   146c4:	vldr	s13, [pc, #132]	; 14750 <__assert_fail@plt+0x3114>
   146c8:	vldr	s14, [r3, #8]
   146cc:	vcmpe.f32	s14, s13
   146d0:	vmrs	APSR_nzcv, fpscr
   146d4:	ble	1473c <__assert_fail@plt+0x3100>
   146d8:	vldr	s15, [pc, #116]	; 14754 <__assert_fail@plt+0x3118>
   146dc:	vcmpe.f32	s14, s15
   146e0:	vmrs	APSR_nzcv, fpscr
   146e4:	bpl	1473c <__assert_fail@plt+0x3100>
   146e8:	vldr	s15, [pc, #104]	; 14758 <__assert_fail@plt+0x311c>
   146ec:	vldr	s12, [r3, #12]
   146f0:	vcmpe.f32	s12, s15
   146f4:	vmrs	APSR_nzcv, fpscr
   146f8:	ble	1473c <__assert_fail@plt+0x3100>
   146fc:	vldr	s15, [r3]
   14700:	vcmpe.f32	s15, #0.0
   14704:	vmrs	APSR_nzcv, fpscr
   14708:	blt	1473c <__assert_fail@plt+0x3100>
   1470c:	vadd.f32	s15, s15, s13
   14710:	vldr	s13, [r3, #4]
   14714:	vcmpe.f32	s15, s13
   14718:	vmrs	APSR_nzcv, fpscr
   1471c:	bpl	1473c <__assert_fail@plt+0x3100>
   14720:	vldr	s12, [pc, #52]	; 1475c <__assert_fail@plt+0x3120>
   14724:	vcmpe.f32	s13, s12
   14728:	vmrs	APSR_nzcv, fpscr
   1472c:	bhi	1473c <__assert_fail@plt+0x3100>
   14730:	vcmpe.f32	s14, s15
   14734:	vmrs	APSR_nzcv, fpscr
   14738:	bgt	14748 <__assert_fail@plt+0x310c>
   1473c:	str	r2, [r0]
   14740:	mov	r0, #0
   14744:	bx	lr
   14748:	mov	r0, #1
   1474c:	bx	lr
   14750:	stclcc	12, cr12, [ip, #820]	; 0x334
   14754:	svccc	0x00666666
   14758:	svccc	0x008ccccd
   1475c:	svccc	0x00800000
   14760:	strdeq	r9, [r1], -r4
   14764:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   14768:	mov	r5, r0
   1476c:	mov	r7, r1
   14770:	mov	r8, r2
   14774:	mov	r9, #0
   14778:	ldr	r4, [r1]
   1477c:	add	r4, r4, #8
   14780:	ldr	r2, [r7, #4]
   14784:	sub	r3, r4, #8
   14788:	cmp	r2, r3
   1478c:	bhi	1479c <__assert_fail@plt+0x3160>
   14790:	mov	r8, #1
   14794:	mov	r0, r8
   14798:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1479c:	ldr	r3, [r4, #-8]
   147a0:	cmp	r3, #0
   147a4:	ldrne	r6, [r4, #-4]
   147a8:	bne	14804 <__assert_fail@plt+0x31c8>
   147ac:	add	r4, r4, #8
   147b0:	b	14780 <__assert_fail@plt+0x3144>
   147b4:	ldr	sl, [r6]
   147b8:	mov	r0, r5
   147bc:	mov	r1, sl
   147c0:	bl	145a4 <__assert_fail@plt+0x2f68>
   147c4:	ldr	r2, [r0]
   147c8:	ldr	r1, [r6, #4]
   147cc:	cmp	r2, #0
   147d0:	ldrne	r3, [r0, #4]
   147d4:	strne	r3, [r6, #4]
   147d8:	strne	r6, [r0, #4]
   147dc:	bne	14800 <__assert_fail@plt+0x31c4>
   147e0:	ldr	r3, [r5, #12]
   147e4:	str	sl, [r0]
   147e8:	add	r3, r3, #1
   147ec:	str	r3, [r5, #12]
   147f0:	str	r2, [r6]
   147f4:	ldr	r3, [r5, #36]	; 0x24
   147f8:	str	r3, [r6, #4]
   147fc:	str	r6, [r5, #36]	; 0x24
   14800:	mov	r6, r1
   14804:	cmp	r6, #0
   14808:	bne	147b4 <__assert_fail@plt+0x3178>
   1480c:	cmp	r8, #0
   14810:	str	r6, [r4, #-4]
   14814:	ldr	sl, [r4, #-8]
   14818:	bne	147ac <__assert_fail@plt+0x3170>
   1481c:	mov	r1, sl
   14820:	mov	r0, r5
   14824:	bl	145a4 <__assert_fail@plt+0x2f68>
   14828:	ldr	r3, [r0]
   1482c:	mov	r6, r0
   14830:	cmp	r3, #0
   14834:	beq	14880 <__assert_fail@plt+0x3244>
   14838:	ldr	r0, [r5, #36]	; 0x24
   1483c:	cmp	r0, #0
   14840:	ldrne	r3, [r0, #4]
   14844:	strne	r3, [r5, #36]	; 0x24
   14848:	bne	1485c <__assert_fail@plt+0x3220>
   1484c:	mov	r0, #8
   14850:	bl	179c0 <__assert_fail@plt+0x6384>
   14854:	cmp	r0, #0
   14858:	beq	14794 <__assert_fail@plt+0x3158>
   1485c:	ldr	r3, [r6, #4]
   14860:	str	sl, [r0]
   14864:	str	r3, [r0, #4]
   14868:	str	r0, [r6, #4]
   1486c:	ldr	r3, [r7, #12]
   14870:	str	r9, [r4, #-8]
   14874:	sub	r3, r3, #1
   14878:	str	r3, [r7, #12]
   1487c:	b	147ac <__assert_fail@plt+0x3170>
   14880:	ldr	r3, [r5, #12]
   14884:	str	sl, [r0]
   14888:	add	r3, r3, #1
   1488c:	str	r3, [r5, #12]
   14890:	b	1486c <__assert_fail@plt+0x3230>
   14894:	ldr	r0, [r0, #8]
   14898:	bx	lr
   1489c:	ldr	r0, [r0, #12]
   148a0:	bx	lr
   148a4:	ldr	r0, [r0, #16]
   148a8:	bx	lr
   148ac:	ldm	r0, {r3, ip}
   148b0:	mov	r0, #0
   148b4:	cmp	ip, r3
   148b8:	bxls	lr
   148bc:	ldr	r2, [r3]
   148c0:	cmp	r2, #0
   148c4:	beq	148ec <__assert_fail@plt+0x32b0>
   148c8:	mov	r1, r3
   148cc:	mov	r2, #1
   148d0:	b	148d8 <__assert_fail@plt+0x329c>
   148d4:	add	r2, r2, #1
   148d8:	ldr	r1, [r1, #4]
   148dc:	cmp	r1, #0
   148e0:	bne	148d4 <__assert_fail@plt+0x3298>
   148e4:	cmp	r0, r2
   148e8:	movcc	r0, r2
   148ec:	add	r3, r3, #8
   148f0:	b	148b4 <__assert_fail@plt+0x3278>
   148f4:	push	{lr}		; (str lr, [sp, #-4]!)
   148f8:	mov	r3, #0
   148fc:	mov	r1, r3
   14900:	ldm	r0, {r2, lr}
   14904:	cmp	lr, r2
   14908:	bhi	1492c <__assert_fail@plt+0x32f0>
   1490c:	ldr	r2, [r0, #12]
   14910:	cmp	r2, r1
   14914:	ldreq	r0, [r0, #16]
   14918:	subeq	r0, r0, r3
   1491c:	clzeq	r0, r0
   14920:	lsreq	r0, r0, #5
   14924:	movne	r0, #0
   14928:	pop	{pc}		; (ldr pc, [sp], #4)
   1492c:	ldr	ip, [r2]
   14930:	cmp	ip, #0
   14934:	addne	r1, r1, #1
   14938:	addne	r3, r3, #1
   1493c:	movne	ip, r2
   14940:	bne	14950 <__assert_fail@plt+0x3314>
   14944:	add	r2, r2, #8
   14948:	b	14904 <__assert_fail@plt+0x32c8>
   1494c:	add	r3, r3, #1
   14950:	ldr	ip, [ip, #4]
   14954:	cmp	ip, #0
   14958:	bne	1494c <__assert_fail@plt+0x3310>
   1495c:	b	14944 <__assert_fail@plt+0x3308>
   14960:	push	{r0, r1, r4, r5, r6, r7, r8, lr}
   14964:	mov	r6, r0
   14968:	mov	r4, r1
   1496c:	bl	148ac <__assert_fail@plt+0x3270>
   14970:	ldr	r5, [r6, #8]
   14974:	mov	r8, r0
   14978:	mov	r1, #1
   1497c:	mov	r0, r4
   14980:	ldr	r7, [r6, #12]
   14984:	ldr	r2, [pc, #116]	; 14a00 <__assert_fail@plt+0x33c4>
   14988:	ldr	r3, [r6, #16]
   1498c:	bl	114f8 <__fprintf_chk@plt>
   14990:	mov	r3, r5
   14994:	ldr	r2, [pc, #104]	; 14a04 <__assert_fail@plt+0x33c8>
   14998:	mov	r1, #1
   1499c:	mov	r0, r4
   149a0:	bl	114f8 <__fprintf_chk@plt>
   149a4:	vmov	s15, r7
   149a8:	mov	r3, r7
   149ac:	mov	r1, #1
   149b0:	ldr	r2, [pc, #80]	; 14a08 <__assert_fail@plt+0x33cc>
   149b4:	mov	r0, r4
   149b8:	vcvt.f64.u32	d6, s15
   149bc:	vldr	d7, [pc, #52]	; 149f8 <__assert_fail@plt+0x33bc>
   149c0:	vmul.f64	d6, d6, d7
   149c4:	vmov	s15, r5
   149c8:	vcvt.f64.u32	d7, s15
   149cc:	vdiv.f64	d5, d6, d7
   149d0:	vstr	d5, [sp]
   149d4:	bl	114f8 <__fprintf_chk@plt>
   149d8:	ldr	r2, [pc, #44]	; 14a0c <__assert_fail@plt+0x33d0>
   149dc:	mov	r3, r8
   149e0:	mov	r1, #1
   149e4:	mov	r0, r4
   149e8:	add	sp, sp, #8
   149ec:	pop	{r4, r5, r6, r7, r8, lr}
   149f0:	b	114f8 <__fprintf_chk@plt>
   149f4:	nop	{0}
   149f8:	andeq	r0, r0, r0
   149fc:	subsmi	r0, r9, r0
   14a00:	andeq	r9, r1, r8, lsl #12
   14a04:	andeq	r9, r1, r0, lsr #12
   14a08:	andeq	r9, r1, r8, lsr r6
   14a0c:	andeq	r9, r1, r9, asr r6
   14a10:	push	{r4, r5, r6, lr}
   14a14:	mov	r6, r0
   14a18:	mov	r5, r1
   14a1c:	bl	145a4 <__assert_fail@plt+0x2f68>
   14a20:	ldr	r3, [r0]
   14a24:	cmp	r3, #0
   14a28:	beq	14a64 <__assert_fail@plt+0x3428>
   14a2c:	mov	r4, r0
   14a30:	ldr	r1, [r4]
   14a34:	cmp	r1, r5
   14a38:	bne	14a44 <__assert_fail@plt+0x3408>
   14a3c:	ldr	r0, [r4]
   14a40:	pop	{r4, r5, r6, pc}
   14a44:	mov	r0, r5
   14a48:	ldr	r3, [r6, #28]
   14a4c:	blx	r3
   14a50:	cmp	r0, #0
   14a54:	bne	14a3c <__assert_fail@plt+0x3400>
   14a58:	ldr	r4, [r4, #4]
   14a5c:	cmp	r4, #0
   14a60:	bne	14a30 <__assert_fail@plt+0x33f4>
   14a64:	mov	r0, #0
   14a68:	pop	{r4, r5, r6, pc}
   14a6c:	ldr	r3, [r0, #16]
   14a70:	cmp	r3, #0
   14a74:	beq	14aa4 <__assert_fail@plt+0x3468>
   14a78:	ldr	r3, [r0]
   14a7c:	ldr	r2, [r0, #4]
   14a80:	cmp	r2, r3
   14a84:	bhi	14a90 <__assert_fail@plt+0x3454>
   14a88:	push	{r4, lr}
   14a8c:	bl	11600 <abort@plt>
   14a90:	ldr	r0, [r3]
   14a94:	cmp	r0, #0
   14a98:	bxne	lr
   14a9c:	add	r3, r3, #8
   14aa0:	b	14a80 <__assert_fail@plt+0x3444>
   14aa4:	mov	r0, r3
   14aa8:	bx	lr
   14aac:	push	{r4, r5, r6, lr}
   14ab0:	mov	r4, r0
   14ab4:	mov	r5, r1
   14ab8:	bl	145a4 <__assert_fail@plt+0x2f68>
   14abc:	mov	r2, r0
   14ac0:	mov	r3, r0
   14ac4:	ldm	r3, {r1, r3}
   14ac8:	cmp	r1, r5
   14acc:	bne	14ae0 <__assert_fail@plt+0x34a4>
   14ad0:	cmp	r3, #0
   14ad4:	beq	14ae8 <__assert_fail@plt+0x34ac>
   14ad8:	ldr	r0, [r3]
   14adc:	pop	{r4, r5, r6, pc}
   14ae0:	cmp	r3, #0
   14ae4:	bne	14ac4 <__assert_fail@plt+0x3488>
   14ae8:	ldr	r3, [r4, #4]
   14aec:	add	r2, r2, #8
   14af0:	cmp	r3, r2
   14af4:	bhi	14b00 <__assert_fail@plt+0x34c4>
   14af8:	mov	r0, #0
   14afc:	pop	{r4, r5, r6, pc}
   14b00:	ldr	r0, [r2]
   14b04:	cmp	r0, #0
   14b08:	beq	14aec <__assert_fail@plt+0x34b0>
   14b0c:	pop	{r4, r5, r6, pc}
   14b10:	ldr	ip, [r0]
   14b14:	mov	r3, #0
   14b18:	push	{r4, r5, lr}
   14b1c:	ldr	lr, [r0, #4]
   14b20:	cmp	lr, ip
   14b24:	bhi	14b30 <__assert_fail@plt+0x34f4>
   14b28:	mov	r0, r3
   14b2c:	pop	{r4, r5, pc}
   14b30:	ldr	lr, [ip]
   14b34:	cmp	lr, #0
   14b38:	beq	14b64 <__assert_fail@plt+0x3528>
   14b3c:	add	r4, r1, r3, lsl #2
   14b40:	mov	lr, ip
   14b44:	cmp	r2, r3
   14b48:	bls	14b28 <__assert_fail@plt+0x34ec>
   14b4c:	ldr	r5, [lr]
   14b50:	add	r3, r3, #1
   14b54:	str	r5, [r4], #4
   14b58:	ldr	lr, [lr, #4]
   14b5c:	cmp	lr, #0
   14b60:	bne	14b44 <__assert_fail@plt+0x3508>
   14b64:	add	ip, ip, #8
   14b68:	b	14b1c <__assert_fail@plt+0x34e0>
   14b6c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   14b70:	mov	r7, r0
   14b74:	mov	r8, r1
   14b78:	mov	r9, r2
   14b7c:	mov	r6, #0
   14b80:	ldr	r4, [r0]
   14b84:	ldr	r3, [r7, #4]
   14b88:	cmp	r3, r4
   14b8c:	bhi	14b98 <__assert_fail@plt+0x355c>
   14b90:	mov	r0, r6
   14b94:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   14b98:	ldr	r3, [r4]
   14b9c:	cmp	r3, #0
   14ba0:	beq	14bcc <__assert_fail@plt+0x3590>
   14ba4:	mov	r5, r4
   14ba8:	mov	r1, r9
   14bac:	ldr	r0, [r5]
   14bb0:	blx	r8
   14bb4:	cmp	r0, #0
   14bb8:	beq	14b90 <__assert_fail@plt+0x3554>
   14bbc:	ldr	r5, [r5, #4]
   14bc0:	add	r6, r6, #1
   14bc4:	cmp	r5, #0
   14bc8:	bne	14ba8 <__assert_fail@plt+0x356c>
   14bcc:	add	r4, r4, #8
   14bd0:	b	14b84 <__assert_fail@plt+0x3548>
   14bd4:	sub	r2, r0, #1
   14bd8:	mov	r0, #0
   14bdc:	ldrb	r3, [r2, #1]!
   14be0:	cmp	r3, #0
   14be4:	bxeq	lr
   14be8:	rsb	r0, r0, r0, lsl #5
   14bec:	add	r0, r0, r3
   14bf0:	udiv	r3, r0, r1
   14bf4:	mls	r0, r1, r3, r0
   14bf8:	b	14bdc <__assert_fail@plt+0x35a0>
   14bfc:	push	{lr}		; (str lr, [sp, #-4]!)
   14c00:	mov	ip, r0
   14c04:	ldr	lr, [pc, #16]	; 14c1c <__assert_fail@plt+0x35e0>
   14c08:	ldm	lr!, {r0, r1, r2, r3}
   14c0c:	stmia	ip!, {r0, r1, r2, r3}
   14c10:	ldr	r3, [lr]
   14c14:	str	r3, [ip]
   14c18:	pop	{pc}		; (ldr pc, [sp], #4)
   14c1c:	strdeq	r9, [r1], -r4
   14c20:	cmp	r2, #0
   14c24:	push	{r4, r5, r6, r7, r8, lr}
   14c28:	mov	r8, r0
   14c2c:	mov	r0, #40	; 0x28
   14c30:	mov	r5, r1
   14c34:	ldr	r7, [pc, #164]	; 14ce0 <__assert_fail@plt+0x36a4>
   14c38:	movne	r7, r2
   14c3c:	cmp	r3, #0
   14c40:	ldr	r6, [pc, #156]	; 14ce4 <__assert_fail@plt+0x36a8>
   14c44:	movne	r6, r3
   14c48:	bl	179c0 <__assert_fail@plt+0x6384>
   14c4c:	subs	r4, r0, #0
   14c50:	beq	14cc8 <__assert_fail@plt+0x368c>
   14c54:	ldr	r3, [pc, #140]	; 14ce8 <__assert_fail@plt+0x36ac>
   14c58:	cmp	r5, #0
   14c5c:	mov	r0, r4
   14c60:	moveq	r5, r3
   14c64:	str	r5, [r0, #20]!
   14c68:	bl	146b4 <__assert_fail@plt+0x3078>
   14c6c:	cmp	r0, #0
   14c70:	beq	14cd0 <__assert_fail@plt+0x3694>
   14c74:	mov	r1, r5
   14c78:	mov	r0, r8
   14c7c:	bl	144f0 <__assert_fail@plt+0x2eb4>
   14c80:	cmp	r0, #0
   14c84:	str	r0, [r4, #8]
   14c88:	beq	14cd0 <__assert_fail@plt+0x3694>
   14c8c:	mov	r1, #8
   14c90:	bl	1796c <__assert_fail@plt+0x6330>
   14c94:	cmp	r0, #0
   14c98:	str	r0, [r4]
   14c9c:	beq	14cd0 <__assert_fail@plt+0x3694>
   14ca0:	ldr	r3, [r4, #8]
   14ca4:	str	r7, [r4, #24]
   14ca8:	ldr	r2, [sp, #24]
   14cac:	str	r6, [r4, #28]
   14cb0:	add	r0, r0, r3, lsl #3
   14cb4:	mov	r3, #0
   14cb8:	str	r0, [r4, #4]
   14cbc:	str	r3, [r4, #12]
   14cc0:	str	r3, [r4, #16]
   14cc4:	strd	r2, [r4, #32]
   14cc8:	mov	r0, r4
   14ccc:	pop	{r4, r5, r6, r7, r8, pc}
   14cd0:	mov	r0, r4
   14cd4:	mov	r4, #0
   14cd8:	bl	17f50 <__assert_fail@plt+0x6914>
   14cdc:	b	14cc8 <__assert_fail@plt+0x368c>
   14ce0:	ldrdeq	r4, [r1], -r0
   14ce4:	andeq	r4, r1, r0, ror #9
   14ce8:	strdeq	r9, [r1], -r4
   14cec:	push	{r4, r5, r6, r7, r8, lr}
   14cf0:	mov	r5, r0
   14cf4:	mov	r7, #0
   14cf8:	ldr	r4, [r0]
   14cfc:	add	r4, r4, #8
   14d00:	ldr	r2, [r5, #4]
   14d04:	sub	r3, r4, #8
   14d08:	cmp	r2, r3
   14d0c:	bhi	14d20 <__assert_fail@plt+0x36e4>
   14d10:	mov	r3, #0
   14d14:	str	r3, [r5, #12]
   14d18:	str	r3, [r5, #16]
   14d1c:	pop	{r4, r5, r6, r7, r8, pc}
   14d20:	ldr	r3, [r4, #-8]
   14d24:	cmp	r3, #0
   14d28:	ldrne	r6, [r4, #-4]
   14d2c:	bne	14d60 <__assert_fail@plt+0x3724>
   14d30:	add	r4, r4, #8
   14d34:	b	14d00 <__assert_fail@plt+0x36c4>
   14d38:	cmp	r3, #0
   14d3c:	beq	14d48 <__assert_fail@plt+0x370c>
   14d40:	ldr	r0, [r6]
   14d44:	blx	r3
   14d48:	ldr	r3, [r6, #4]
   14d4c:	ldr	r2, [r5, #36]	; 0x24
   14d50:	str	r7, [r6]
   14d54:	str	r2, [r6, #4]
   14d58:	str	r6, [r5, #36]	; 0x24
   14d5c:	mov	r6, r3
   14d60:	cmp	r6, #0
   14d64:	ldr	r3, [r5, #32]
   14d68:	bne	14d38 <__assert_fail@plt+0x36fc>
   14d6c:	cmp	r3, #0
   14d70:	beq	14d7c <__assert_fail@plt+0x3740>
   14d74:	ldr	r0, [r4, #-8]
   14d78:	blx	r3
   14d7c:	str	r7, [r4, #-8]
   14d80:	str	r7, [r4, #-4]
   14d84:	b	14d30 <__assert_fail@plt+0x36f4>
   14d88:	ldr	r3, [r0, #32]
   14d8c:	push	{r4, r5, r6, lr}
   14d90:	mov	r4, r0
   14d94:	cmp	r3, #0
   14d98:	bne	14dcc <__assert_fail@plt+0x3790>
   14d9c:	ldr	r5, [r4]
   14da0:	ldr	r3, [r4, #4]
   14da4:	cmp	r3, r5
   14da8:	bhi	14e1c <__assert_fail@plt+0x37e0>
   14dac:	ldr	r0, [r4, #36]	; 0x24
   14db0:	cmp	r0, #0
   14db4:	bne	14e3c <__assert_fail@plt+0x3800>
   14db8:	ldr	r0, [r4]
   14dbc:	bl	17f50 <__assert_fail@plt+0x6914>
   14dc0:	mov	r0, r4
   14dc4:	pop	{r4, r5, r6, lr}
   14dc8:	b	17f50 <__assert_fail@plt+0x6914>
   14dcc:	ldr	r3, [r0, #16]
   14dd0:	cmp	r3, #0
   14dd4:	ldrne	r5, [r0]
   14dd8:	beq	14d9c <__assert_fail@plt+0x3760>
   14ddc:	ldr	r3, [r4, #4]
   14de0:	cmp	r3, r5
   14de4:	bls	14d9c <__assert_fail@plt+0x3760>
   14de8:	ldr	r3, [r5]
   14dec:	cmp	r3, #0
   14df0:	bne	14dfc <__assert_fail@plt+0x37c0>
   14df4:	add	r5, r5, #8
   14df8:	b	14ddc <__assert_fail@plt+0x37a0>
   14dfc:	mov	r6, r5
   14e00:	ldr	r0, [r6]
   14e04:	ldr	r3, [r4, #32]
   14e08:	blx	r3
   14e0c:	ldr	r6, [r6, #4]
   14e10:	cmp	r6, #0
   14e14:	bne	14e00 <__assert_fail@plt+0x37c4>
   14e18:	b	14df4 <__assert_fail@plt+0x37b8>
   14e1c:	ldr	r0, [r5, #4]
   14e20:	cmp	r0, #0
   14e24:	addeq	r5, r5, #8
   14e28:	beq	14da0 <__assert_fail@plt+0x3764>
   14e2c:	ldr	r6, [r0, #4]
   14e30:	bl	17f50 <__assert_fail@plt+0x6914>
   14e34:	mov	r0, r6
   14e38:	b	14e20 <__assert_fail@plt+0x37e4>
   14e3c:	ldr	r5, [r0, #4]
   14e40:	bl	17f50 <__assert_fail@plt+0x6914>
   14e44:	mov	r0, r5
   14e48:	b	14db0 <__assert_fail@plt+0x3774>
   14e4c:	push	{r4, r5, lr}
   14e50:	mov	r4, r0
   14e54:	sub	sp, sp, #44	; 0x2c
   14e58:	mov	r0, r1
   14e5c:	ldr	r1, [r4, #20]
   14e60:	bl	144f0 <__assert_fail@plt+0x2eb4>
   14e64:	subs	r5, r0, #0
   14e68:	bne	14e7c <__assert_fail@plt+0x3840>
   14e6c:	mov	r5, #0
   14e70:	mov	r0, r5
   14e74:	add	sp, sp, #44	; 0x2c
   14e78:	pop	{r4, r5, pc}
   14e7c:	ldr	r3, [r4, #8]
   14e80:	cmp	r3, r5
   14e84:	beq	14f64 <__assert_fail@plt+0x3928>
   14e88:	mov	r1, #8
   14e8c:	bl	1796c <__assert_fail@plt+0x6330>
   14e90:	cmp	r0, #0
   14e94:	str	r0, [sp]
   14e98:	beq	14e6c <__assert_fail@plt+0x3830>
   14e9c:	ldr	r3, [r4, #20]
   14ea0:	mov	r2, #0
   14ea4:	add	r0, r0, r5, lsl #3
   14ea8:	mov	r1, r4
   14eac:	stmib	sp, {r0, r5}
   14eb0:	mov	r0, sp
   14eb4:	str	r2, [sp, #12]
   14eb8:	strd	r2, [sp, #16]
   14ebc:	ldr	r3, [r4, #24]
   14ec0:	str	r3, [sp, #24]
   14ec4:	ldr	r3, [r4, #28]
   14ec8:	str	r3, [sp, #28]
   14ecc:	ldr	r3, [r4, #32]
   14ed0:	str	r3, [sp, #32]
   14ed4:	ldr	r3, [r4, #36]	; 0x24
   14ed8:	str	r3, [sp, #36]	; 0x24
   14edc:	bl	14764 <__assert_fail@plt+0x3128>
   14ee0:	subs	r5, r0, #0
   14ee4:	beq	14f1c <__assert_fail@plt+0x38e0>
   14ee8:	ldr	r0, [r4]
   14eec:	bl	17f50 <__assert_fail@plt+0x6914>
   14ef0:	ldr	r3, [sp]
   14ef4:	str	r3, [r4]
   14ef8:	ldr	r3, [sp, #4]
   14efc:	str	r3, [r4, #4]
   14f00:	ldr	r3, [sp, #8]
   14f04:	str	r3, [r4, #8]
   14f08:	ldr	r3, [sp, #12]
   14f0c:	str	r3, [r4, #12]
   14f10:	ldr	r3, [sp, #36]	; 0x24
   14f14:	str	r3, [r4, #36]	; 0x24
   14f18:	b	14e70 <__assert_fail@plt+0x3834>
   14f1c:	ldr	r3, [sp, #36]	; 0x24
   14f20:	mov	r2, #1
   14f24:	mov	r1, sp
   14f28:	mov	r0, r4
   14f2c:	str	r3, [r4, #36]	; 0x24
   14f30:	bl	14764 <__assert_fail@plt+0x3128>
   14f34:	cmp	r0, #0
   14f38:	bne	14f40 <__assert_fail@plt+0x3904>
   14f3c:	bl	11600 <abort@plt>
   14f40:	mov	r2, r5
   14f44:	mov	r1, sp
   14f48:	mov	r0, r4
   14f4c:	bl	14764 <__assert_fail@plt+0x3128>
   14f50:	cmp	r0, #0
   14f54:	beq	14f3c <__assert_fail@plt+0x3900>
   14f58:	ldr	r0, [sp]
   14f5c:	bl	17f50 <__assert_fail@plt+0x6914>
   14f60:	b	14e70 <__assert_fail@plt+0x3834>
   14f64:	mov	r5, #1
   14f68:	b	14e70 <__assert_fail@plt+0x3834>
   14f6c:	push	{r0, r1, r4, r5, r6, lr}
   14f70:	subs	r6, r1, #0
   14f74:	bne	14f7c <__assert_fail@plt+0x3940>
   14f78:	bl	11600 <abort@plt>
   14f7c:	mov	r5, r2
   14f80:	mov	r3, #0
   14f84:	add	r2, sp, #4
   14f88:	mov	r4, r0
   14f8c:	bl	145d8 <__assert_fail@plt+0x2f9c>
   14f90:	cmp	r0, #0
   14f94:	beq	14fac <__assert_fail@plt+0x3970>
   14f98:	cmp	r5, #0
   14f9c:	strne	r0, [r5]
   14fa0:	movne	r0, #0
   14fa4:	moveq	r0, r5
   14fa8:	b	1502c <__assert_fail@plt+0x39f0>
   14fac:	vldr	s15, [r4, #12]
   14fb0:	ldr	r3, [r4, #20]
   14fb4:	vcvt.f32.u32	s14, s15
   14fb8:	vldr	s15, [r4, #8]
   14fbc:	vldr	s13, [r3, #8]
   14fc0:	vcvt.f32.u32	s15, s15
   14fc4:	vmul.f32	s15, s15, s13
   14fc8:	vcmpe.f32	s14, s15
   14fcc:	vmrs	APSR_nzcv, fpscr
   14fd0:	ble	15068 <__assert_fail@plt+0x3a2c>
   14fd4:	add	r0, r4, #20
   14fd8:	bl	146b4 <__assert_fail@plt+0x3078>
   14fdc:	vldr	s15, [r4, #8]
   14fe0:	vldr	s14, [r4, #12]
   14fe4:	ldr	r3, [r4, #20]
   14fe8:	vcvt.f32.u32	s15, s15
   14fec:	vcvt.f32.u32	s14, s14
   14ff0:	vldr	s13, [r3, #8]
   14ff4:	vmul.f32	s12, s13, s15
   14ff8:	vcmpe.f32	s14, s12
   14ffc:	vmrs	APSR_nzcv, fpscr
   15000:	ble	15068 <__assert_fail@plt+0x3a2c>
   15004:	vldr	s14, [r3, #12]
   15008:	ldrb	r3, [r3, #16]
   1500c:	vmul.f32	s15, s15, s14
   15010:	vldr	s14, [pc, #204]	; 150e4 <__assert_fail@plt+0x3aa8>
   15014:	cmp	r3, #0
   15018:	vmuleq.f32	s15, s15, s13
   1501c:	vcmpe.f32	s15, s14
   15020:	vmrs	APSR_nzcv, fpscr
   15024:	blt	15034 <__assert_fail@plt+0x39f8>
   15028:	mvn	r0, #0
   1502c:	add	sp, sp, #8
   15030:	pop	{r4, r5, r6, pc}
   15034:	vcvt.u32.f32	s15, s15
   15038:	mov	r0, r4
   1503c:	vmov	r1, s15
   15040:	bl	14e4c <__assert_fail@plt+0x3810>
   15044:	cmp	r0, #0
   15048:	beq	15028 <__assert_fail@plt+0x39ec>
   1504c:	mov	r3, #0
   15050:	add	r2, sp, #4
   15054:	mov	r1, r6
   15058:	mov	r0, r4
   1505c:	bl	145d8 <__assert_fail@plt+0x2f9c>
   15060:	cmp	r0, #0
   15064:	bne	14f78 <__assert_fail@plt+0x393c>
   15068:	ldr	r3, [sp, #4]
   1506c:	ldr	r2, [r3]
   15070:	cmp	r2, #0
   15074:	beq	150c4 <__assert_fail@plt+0x3a88>
   15078:	ldr	r0, [r4, #36]	; 0x24
   1507c:	cmp	r0, #0
   15080:	ldrne	r3, [r0, #4]
   15084:	strne	r3, [r4, #36]	; 0x24
   15088:	bne	1509c <__assert_fail@plt+0x3a60>
   1508c:	mov	r0, #8
   15090:	bl	179c0 <__assert_fail@plt+0x6384>
   15094:	cmp	r0, #0
   15098:	beq	15028 <__assert_fail@plt+0x39ec>
   1509c:	ldr	r3, [sp, #4]
   150a0:	ldr	r2, [r3, #4]
   150a4:	str	r6, [r0]
   150a8:	str	r2, [r0, #4]
   150ac:	str	r0, [r3, #4]
   150b0:	ldr	r3, [r4, #16]
   150b4:	add	r3, r3, #1
   150b8:	str	r3, [r4, #16]
   150bc:	mov	r0, #1
   150c0:	b	1502c <__assert_fail@plt+0x39f0>
   150c4:	str	r6, [r3]
   150c8:	ldr	r3, [r4, #16]
   150cc:	add	r3, r3, #1
   150d0:	str	r3, [r4, #16]
   150d4:	ldr	r3, [r4, #12]
   150d8:	add	r3, r3, #1
   150dc:	str	r3, [r4, #12]
   150e0:	b	150bc <__assert_fail@plt+0x3a80>
   150e4:	svcmi	0x00800000
   150e8:	push	{r0, r1, r4, lr}
   150ec:	add	r2, sp, #4
   150f0:	mov	r4, r1
   150f4:	bl	14f6c <__assert_fail@plt+0x3930>
   150f8:	cmn	r0, #1
   150fc:	moveq	r4, #0
   15100:	beq	1510c <__assert_fail@plt+0x3ad0>
   15104:	cmp	r0, #0
   15108:	ldreq	r4, [sp, #4]
   1510c:	mov	r0, r4
   15110:	add	sp, sp, #8
   15114:	pop	{r4, pc}
   15118:	push	{r0, r1, r4, r5, r6, lr}
   1511c:	mov	r3, #1
   15120:	add	r2, sp, #4
   15124:	mov	r4, r0
   15128:	bl	145d8 <__assert_fail@plt+0x2f9c>
   1512c:	subs	r5, r0, #0
   15130:	beq	151e8 <__assert_fail@plt+0x3bac>
   15134:	ldr	r3, [r4, #16]
   15138:	sub	r3, r3, #1
   1513c:	str	r3, [r4, #16]
   15140:	ldr	r3, [sp, #4]
   15144:	ldr	r3, [r3]
   15148:	cmp	r3, #0
   1514c:	bne	151e8 <__assert_fail@plt+0x3bac>
   15150:	vldr	s14, [r4, #8]
   15154:	ldr	r3, [r4, #12]
   15158:	vcvt.f32.u32	s14, s14
   1515c:	sub	r3, r3, #1
   15160:	vmov	s15, r3
   15164:	str	r3, [r4, #12]
   15168:	ldr	r3, [r4, #20]
   1516c:	vldr	s13, [r3]
   15170:	vcvt.f32.u32	s15, s15
   15174:	vmul.f32	s14, s14, s13
   15178:	vcmpe.f32	s15, s14
   1517c:	vmrs	APSR_nzcv, fpscr
   15180:	bpl	151e8 <__assert_fail@plt+0x3bac>
   15184:	add	r0, r4, #20
   15188:	bl	146b4 <__assert_fail@plt+0x3078>
   1518c:	vldr	s15, [r4, #8]
   15190:	vldr	s14, [r4, #12]
   15194:	ldr	r3, [r4, #20]
   15198:	vcvt.f32.u32	s15, s15
   1519c:	vcvt.f32.u32	s13, s14
   151a0:	vldr	s14, [r3]
   151a4:	vmul.f32	s14, s15, s14
   151a8:	vcmpe.f32	s13, s14
   151ac:	vmrs	APSR_nzcv, fpscr
   151b0:	bpl	151e8 <__assert_fail@plt+0x3bac>
   151b4:	ldrb	r2, [r3, #16]
   151b8:	mov	r0, r4
   151bc:	vldr	s14, [r3, #4]
   151c0:	cmp	r2, #0
   151c4:	vmul.f32	s15, s15, s14
   151c8:	vldreq	s14, [r3, #8]
   151cc:	vmuleq.f32	s15, s15, s14
   151d0:	vcvt.u32.f32	s15, s15
   151d4:	vmov	r1, s15
   151d8:	bl	14e4c <__assert_fail@plt+0x3810>
   151dc:	cmp	r0, #0
   151e0:	ldreq	r0, [r4, #36]	; 0x24
   151e4:	beq	15200 <__assert_fail@plt+0x3bc4>
   151e8:	mov	r0, r5
   151ec:	add	sp, sp, #8
   151f0:	pop	{r4, r5, r6, pc}
   151f4:	ldr	r6, [r0, #4]
   151f8:	bl	17f50 <__assert_fail@plt+0x6914>
   151fc:	mov	r0, r6
   15200:	cmp	r0, #0
   15204:	bne	151f4 <__assert_fail@plt+0x3bb8>
   15208:	str	r0, [r4, #36]	; 0x24
   1520c:	b	151e8 <__assert_fail@plt+0x3bac>
   15210:	b	15118 <__assert_fail@plt+0x3adc>
   15214:	mov	r3, #1
   15218:	str	r1, [r0]
   1521c:	str	r1, [r0, #4]
   15220:	str	r1, [r0, #8]
   15224:	strb	r3, [r0, #28]
   15228:	mov	r3, #0
   1522c:	str	r1, [r0, #12]
   15230:	str	r1, [r0, #16]
   15234:	str	r3, [r0, #20]
   15238:	str	r3, [r0, #24]
   1523c:	bx	lr
   15240:	ldrb	r0, [r0, #28]
   15244:	bx	lr
   15248:	ldrb	r2, [r0, #28]
   1524c:	mov	r3, r0
   15250:	ldr	ip, [r0, #20]
   15254:	eor	r2, r2, #1
   15258:	add	ip, r2, ip
   1525c:	and	ip, ip, #3
   15260:	ldr	r0, [r0, ip, lsl #2]
   15264:	str	r1, [r3, ip, lsl #2]
   15268:	ldr	r1, [r3, #24]
   1526c:	str	ip, [r3, #20]
   15270:	cmp	r1, ip
   15274:	addeq	r2, r2, r1
   15278:	andeq	r2, r2, #3
   1527c:	streq	r2, [r3, #24]
   15280:	mov	r2, #0
   15284:	strb	r2, [r3, #28]
   15288:	bx	lr
   1528c:	ldrb	r2, [r0, #28]
   15290:	cmp	r2, #0
   15294:	beq	152a0 <__assert_fail@plt+0x3c64>
   15298:	push	{r4, lr}
   1529c:	bl	11600 <abort@plt>
   152a0:	ldr	r1, [r0, #16]
   152a4:	mov	r3, r0
   152a8:	ldr	r2, [r0, #20]
   152ac:	ldr	r0, [r0, r2, lsl #2]
   152b0:	str	r1, [r3, r2, lsl #2]
   152b4:	ldr	r1, [r3, #24]
   152b8:	cmp	r2, r1
   152bc:	addne	r2, r2, #3
   152c0:	moveq	r2, #1
   152c4:	andne	r2, r2, #3
   152c8:	strbeq	r2, [r3, #28]
   152cc:	strne	r2, [r3, #20]
   152d0:	bx	lr
   152d4:	push	{r2, r3}
   152d8:	push	{r0, r1, r2, lr}
   152dc:	ldr	r2, [sp, #16]
   152e0:	ands	r3, r2, #64	; 0x40
   152e4:	addne	r3, sp, #20
   152e8:	strne	r3, [sp, #4]
   152ec:	ldrne	r3, [sp, #20]
   152f0:	bl	11498 <openat64@plt>
   152f4:	bl	170b0 <__assert_fail@plt+0x5a74>
   152f8:	add	sp, sp, #12
   152fc:	pop	{lr}		; (ldr lr, [sp], #4)
   15300:	add	sp, sp, #8
   15304:	bx	lr
   15308:	orr	r2, r2, #540672	; 0x84000
   1530c:	push	{r4, r5, r6, r7, r8, lr}
   15310:	mov	r5, r3
   15314:	orr	r2, r2, #2304	; 0x900
   15318:	bl	152d4 <__assert_fail@plt+0x3c98>
   1531c:	subs	r6, r0, #0
   15320:	movlt	r4, #0
   15324:	blt	15350 <__assert_fail@plt+0x3d14>
   15328:	bl	1157c <fdopendir@plt>
   1532c:	subs	r4, r0, #0
   15330:	strne	r6, [r5]
   15334:	bne	15350 <__assert_fail@plt+0x3d14>
   15338:	bl	114b0 <__errno_location@plt>
   1533c:	mov	r5, r0
   15340:	mov	r0, r6
   15344:	ldr	r7, [r5]
   15348:	bl	1160c <close@plt>
   1534c:	str	r7, [r5]
   15350:	mov	r0, r4
   15354:	pop	{r4, r5, r6, r7, r8, pc}
   15358:	push	{r4, r5, r6, lr}
   1535c:	subs	r4, r0, #0
   15360:	bne	15378 <__assert_fail@plt+0x3d3c>
   15364:	ldr	r3, [pc, #124]	; 153e8 <__assert_fail@plt+0x3dac>
   15368:	ldr	r0, [pc, #124]	; 153ec <__assert_fail@plt+0x3db0>
   1536c:	ldr	r1, [r3]
   15370:	bl	115e8 <fputs@plt>
   15374:	bl	11600 <abort@plt>
   15378:	mov	r1, #47	; 0x2f
   1537c:	bl	11558 <strrchr@plt>
   15380:	subs	r6, r0, #0
   15384:	beq	153d4 <__assert_fail@plt+0x3d98>
   15388:	add	r5, r6, #1
   1538c:	sub	r3, r5, r4
   15390:	cmp	r3, #6
   15394:	ble	153d4 <__assert_fail@plt+0x3d98>
   15398:	mov	r2, #7
   1539c:	ldr	r1, [pc, #76]	; 153f0 <__assert_fail@plt+0x3db4>
   153a0:	sub	r0, r6, #6
   153a4:	bl	115f4 <strncmp@plt>
   153a8:	cmp	r0, #0
   153ac:	bne	153d4 <__assert_fail@plt+0x3d98>
   153b0:	mov	r2, #3
   153b4:	ldr	r1, [pc, #56]	; 153f4 <__assert_fail@plt+0x3db8>
   153b8:	mov	r0, r5
   153bc:	bl	115f4 <strncmp@plt>
   153c0:	cmp	r0, #0
   153c4:	ldreq	r3, [pc, #44]	; 153f8 <__assert_fail@plt+0x3dbc>
   153c8:	addeq	r4, r6, #4
   153cc:	movne	r4, r5
   153d0:	streq	r4, [r3]
   153d4:	ldr	r3, [pc, #32]	; 153fc <__assert_fail@plt+0x3dc0>
   153d8:	str	r4, [r3]
   153dc:	ldr	r3, [pc, #28]	; 15400 <__assert_fail@plt+0x3dc4>
   153e0:	str	r4, [r3]
   153e4:	pop	{r4, r5, r6, pc}
   153e8:	andeq	sl, r2, r0, asr #3
   153ec:	andeq	r9, r1, r1, ror r6
   153f0:	andeq	r9, r1, r9, lsr #13
   153f4:			; <UNDEFINED> instruction: 0x000196b1
   153f8:			; <UNDEFINED> instruction: 0x0002a1b0
   153fc:	andeq	sl, r2, ip, lsl #4
   15400:			; <UNDEFINED> instruction: 0x0002a1b4
   15404:	push	{r4, lr}
   15408:	mov	r2, #48	; 0x30
   1540c:	mov	r4, r1
   15410:	mov	r1, #0
   15414:	bl	114d4 <memset@plt>
   15418:	cmp	r4, #10
   1541c:	bne	15424 <__assert_fail@plt+0x3de8>
   15420:	bl	11600 <abort@plt>
   15424:	str	r4, [r0]
   15428:	pop	{r4, pc}
   1542c:	push	{r4, r5, r6, lr}
   15430:	mov	r2, #5
   15434:	mov	r6, r0
   15438:	mov	r5, r1
   1543c:	mov	r1, r0
   15440:	mov	r0, #0
   15444:	bl	11324 <dcgettext@plt>
   15448:	cmp	r6, r0
   1544c:	mov	r4, r0
   15450:	bne	154c0 <__assert_fail@plt+0x3e84>
   15454:	bl	18060 <__assert_fail@plt+0x6a24>
   15458:	ldrb	r3, [r0]
   1545c:	bic	r3, r3, #32
   15460:	cmp	r3, #85	; 0x55
   15464:	bne	154c8 <__assert_fail@plt+0x3e8c>
   15468:	ldrb	r3, [r0, #1]
   1546c:	bic	r3, r3, #32
   15470:	cmp	r3, #84	; 0x54
   15474:	bne	15538 <__assert_fail@plt+0x3efc>
   15478:	ldrb	r3, [r0, #2]
   1547c:	bic	r3, r3, #32
   15480:	cmp	r3, #70	; 0x46
   15484:	bne	15538 <__assert_fail@plt+0x3efc>
   15488:	ldrb	r3, [r0, #3]
   1548c:	cmp	r3, #45	; 0x2d
   15490:	bne	15538 <__assert_fail@plt+0x3efc>
   15494:	ldrb	r3, [r0, #4]
   15498:	cmp	r3, #56	; 0x38
   1549c:	bne	15538 <__assert_fail@plt+0x3efc>
   154a0:	ldrb	r3, [r0, #5]
   154a4:	cmp	r3, #0
   154a8:	bne	15538 <__assert_fail@plt+0x3efc>
   154ac:	ldrb	r2, [r4]
   154b0:	ldr	r3, [pc, #144]	; 15548 <__assert_fail@plt+0x3f0c>
   154b4:	ldr	r4, [pc, #144]	; 1554c <__assert_fail@plt+0x3f10>
   154b8:	cmp	r2, #96	; 0x60
   154bc:	movne	r4, r3
   154c0:	mov	r0, r4
   154c4:	pop	{r4, r5, r6, pc}
   154c8:	cmp	r3, #71	; 0x47
   154cc:	bne	15538 <__assert_fail@plt+0x3efc>
   154d0:	ldrb	r3, [r0, #1]
   154d4:	bic	r3, r3, #32
   154d8:	cmp	r3, #66	; 0x42
   154dc:	bne	15538 <__assert_fail@plt+0x3efc>
   154e0:	ldrb	r3, [r0, #2]
   154e4:	cmp	r3, #49	; 0x31
   154e8:	bne	15538 <__assert_fail@plt+0x3efc>
   154ec:	ldrb	r3, [r0, #3]
   154f0:	cmp	r3, #56	; 0x38
   154f4:	bne	15538 <__assert_fail@plt+0x3efc>
   154f8:	ldrb	r3, [r0, #4]
   154fc:	cmp	r3, #48	; 0x30
   15500:	bne	15538 <__assert_fail@plt+0x3efc>
   15504:	ldrb	r3, [r0, #5]
   15508:	cmp	r3, #51	; 0x33
   1550c:	bne	15538 <__assert_fail@plt+0x3efc>
   15510:	ldrb	r3, [r0, #6]
   15514:	cmp	r3, #48	; 0x30
   15518:	bne	15538 <__assert_fail@plt+0x3efc>
   1551c:	ldrb	r3, [r0, #7]
   15520:	cmp	r3, #0
   15524:	bne	15538 <__assert_fail@plt+0x3efc>
   15528:	ldrb	r2, [r4]
   1552c:	ldr	r3, [pc, #28]	; 15550 <__assert_fail@plt+0x3f14>
   15530:	ldr	r4, [pc, #28]	; 15554 <__assert_fail@plt+0x3f18>
   15534:	b	154b8 <__assert_fail@plt+0x3e7c>
   15538:	ldr	r4, [pc, #24]	; 15558 <__assert_fail@plt+0x3f1c>
   1553c:	cmp	r5, #9
   15540:	ldr	r3, [pc, #20]	; 1555c <__assert_fail@plt+0x3f20>
   15544:	b	154bc <__assert_fail@plt+0x3e80>
   15548:	andeq	r9, r1, lr, lsl #14
   1554c:	andeq	r9, r1, r9, lsl r7
   15550:	andeq	r9, r1, r2, lsl r7
   15554:	andeq	r9, r1, r5, lsl r7
   15558:	andeq	r9, r1, ip, lsl #14
   1555c:	ldrdeq	r9, [r1], -r7
   15560:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15564:	sub	sp, sp, #108	; 0x6c
   15568:	mov	r8, r0
   1556c:	mov	r5, r1
   15570:	mov	r6, #0
   15574:	str	r3, [sp, #40]	; 0x28
   15578:	str	r2, [sp, #48]	; 0x30
   1557c:	ldr	sl, [sp, #144]	; 0x90
   15580:	bl	1139c <__ctype_get_mb_cur_max@plt>
   15584:	ldr	r3, [sp, #148]	; 0x94
   15588:	str	r6, [sp, #24]
   1558c:	str	r6, [sp, #32]
   15590:	str	r6, [sp, #44]	; 0x2c
   15594:	str	r6, [sp, #52]	; 0x34
   15598:	ubfx	r7, r3, #1, #1
   1559c:	mov	r3, #1
   155a0:	str	r6, [sp, #60]	; 0x3c
   155a4:	str	r3, [sp, #72]	; 0x48
   155a8:	str	r0, [sp, #76]	; 0x4c
   155ac:	cmp	sl, #10
   155b0:	ldrls	pc, [pc, sl, lsl #2]
   155b4:	b	157f8 <__assert_fail@plt+0x41bc>
   155b8:	andeq	r5, r1, r4, ror #11
   155bc:	andeq	r5, r1, r0, lsl r8
   155c0:	muleq	r1, r4, r7
   155c4:	andeq	r5, r1, ip, lsr #15
   155c8:	andeq	r5, r1, ip, ror r7
   155cc:	ldrdeq	r5, [r1], -r4
   155d0:			; <UNDEFINED> instruction: 0x000156b4
   155d4:	strdeq	r5, [r1], -ip
   155d8:	andeq	r5, r1, r4, lsl #14
   155dc:	andeq	r5, r1, r4, lsl #14
   155e0:	andeq	r5, r1, r4, lsl #14
   155e4:	mov	r4, sl
   155e8:	mov	r7, #0
   155ec:	mov	r9, r5
   155f0:	mov	r3, #0
   155f4:	str	r6, [sp, #68]	; 0x44
   155f8:	str	r3, [sp, #28]
   155fc:	ldr	r3, [sp, #40]	; 0x28
   15600:	cmn	r3, #1
   15604:	bne	161a4 <__assert_fail@plt+0x4b68>
   15608:	ldr	r2, [sp, #28]
   1560c:	ldr	r3, [sp, #48]	; 0x30
   15610:	ldrb	r3, [r3, r2]
   15614:	adds	r3, r3, #0
   15618:	movne	r3, #1
   1561c:	str	r3, [sp, #36]	; 0x24
   15620:	ldr	r3, [sp, #36]	; 0x24
   15624:	cmp	r3, #0
   15628:	bne	15834 <__assert_fail@plt+0x41f8>
   1562c:	sub	r3, sl, #2
   15630:	cmp	r4, #0
   15634:	clz	r3, r3
   15638:	movne	r2, #0
   1563c:	lsr	r3, r3, #5
   15640:	andeq	r2, r3, r7
   15644:	cmp	r2, #0
   15648:	bne	159f8 <__assert_fail@plt+0x43bc>
   1564c:	eor	r7, r7, #1
   15650:	ands	r3, r3, r7
   15654:	beq	1621c <__assert_fail@plt+0x4be0>
   15658:	ldr	r2, [sp, #68]	; 0x44
   1565c:	cmp	r2, #0
   15660:	beq	161e4 <__assert_fail@plt+0x4ba8>
   15664:	ldr	r3, [sp, #72]	; 0x48
   15668:	cmp	r3, #0
   1566c:	beq	161b8 <__assert_fail@plt+0x4b7c>
   15670:	ldr	r2, [sp, #48]	; 0x30
   15674:	ldr	r3, [sp, #160]	; 0xa0
   15678:	ldr	r1, [sp, #60]	; 0x3c
   1567c:	str	r3, [sp, #16]
   15680:	ldr	r3, [sp, #156]	; 0x9c
   15684:	str	r3, [sp, #12]
   15688:	ldr	r3, [sp, #152]	; 0x98
   1568c:	str	r3, [sp, #8]
   15690:	ldr	r3, [sp, #148]	; 0x94
   15694:	str	r3, [sp, #4]
   15698:	mov	r3, #5
   1569c:	str	r3, [sp]
   156a0:	ldr	r3, [sp, #40]	; 0x28
   156a4:	mov	r0, r8
   156a8:	bl	15560 <__assert_fail@plt+0x3f24>
   156ac:	mov	r4, r0
   156b0:	b	16210 <__assert_fail@plt+0x4bd4>
   156b4:	ldr	r3, [pc, #2948]	; 16240 <__assert_fail@plt+0x4c04>
   156b8:	mov	r7, #1
   156bc:	mov	r4, #0
   156c0:	mov	sl, #5
   156c4:	str	r7, [sp, #24]
   156c8:	str	r7, [sp, #32]
   156cc:	str	r3, [sp, #44]	; 0x2c
   156d0:	b	155ec <__assert_fail@plt+0x3fb0>
   156d4:	cmp	r7, #0
   156d8:	bne	1581c <__assert_fail@plt+0x41e0>
   156dc:	cmp	r5, #0
   156e0:	mov	r4, #1
   156e4:	movne	r3, #34	; 0x22
   156e8:	strbne	r3, [r8]
   156ec:	mov	r3, #1
   156f0:	str	r3, [sp, #24]
   156f4:	str	r3, [sp, #32]
   156f8:	ldr	r3, [pc, #2880]	; 16240 <__assert_fail@plt+0x4c04>
   156fc:	str	r3, [sp, #44]	; 0x2c
   15700:	b	155ec <__assert_fail@plt+0x3fb0>
   15704:	cmp	sl, #10
   15708:	beq	1572c <__assert_fail@plt+0x40f0>
   1570c:	mov	r1, sl
   15710:	ldr	r0, [pc, #2860]	; 16244 <__assert_fail@plt+0x4c08>
   15714:	bl	1542c <__assert_fail@plt+0x3df0>
   15718:	mov	r1, sl
   1571c:	str	r0, [sp, #156]	; 0x9c
   15720:	ldr	r0, [pc, #2848]	; 16248 <__assert_fail@plt+0x4c0c>
   15724:	bl	1542c <__assert_fail@plt+0x3df0>
   15728:	str	r0, [sp, #160]	; 0xa0
   1572c:	cmp	r7, #0
   15730:	moveq	r4, r7
   15734:	beq	1574c <__assert_fail@plt+0x4110>
   15738:	mov	r4, #0
   1573c:	b	1575c <__assert_fail@plt+0x4120>
   15740:	cmp	r5, r4
   15744:	strbhi	r3, [r8, r4]
   15748:	add	r4, r4, #1
   1574c:	ldr	r3, [sp, #156]	; 0x9c
   15750:	ldrb	r3, [r3, r4]
   15754:	cmp	r3, #0
   15758:	bne	15740 <__assert_fail@plt+0x4104>
   1575c:	ldr	r0, [sp, #160]	; 0xa0
   15760:	bl	1148c <strlen@plt>
   15764:	ldr	r3, [sp, #160]	; 0xa0
   15768:	str	r0, [sp, #32]
   1576c:	str	r3, [sp, #44]	; 0x2c
   15770:	mov	r3, #1
   15774:	str	r3, [sp, #24]
   15778:	b	155ec <__assert_fail@plt+0x3fb0>
   1577c:	mov	r3, #1
   15780:	cmp	r7, #0
   15784:	streq	r3, [sp, #24]
   15788:	beq	157cc <__assert_fail@plt+0x4190>
   1578c:	str	r3, [sp, #32]
   15790:	b	157b8 <__assert_fail@plt+0x417c>
   15794:	cmp	r7, #0
   15798:	beq	157cc <__assert_fail@plt+0x4190>
   1579c:	mov	r3, #1
   157a0:	str	r3, [sp, #32]
   157a4:	ldr	r3, [pc, #2716]	; 16248 <__assert_fail@plt+0x4c0c>
   157a8:	b	1582c <__assert_fail@plt+0x41f0>
   157ac:	mov	r7, #1
   157b0:	str	r7, [sp, #24]
   157b4:	str	r7, [sp, #32]
   157b8:	ldr	r3, [pc, #2696]	; 16248 <__assert_fail@plt+0x4c0c>
   157bc:	mov	r4, #0
   157c0:	str	r3, [sp, #44]	; 0x2c
   157c4:	mov	sl, #2
   157c8:	b	155ec <__assert_fail@plt+0x3fb0>
   157cc:	cmp	r5, #0
   157d0:	movne	r3, #39	; 0x27
   157d4:	movne	r7, #0
   157d8:	strbne	r3, [r8]
   157dc:	moveq	r7, r5
   157e0:	mov	r3, #1
   157e4:	mov	r4, #1
   157e8:	str	r3, [sp, #32]
   157ec:	ldr	r3, [pc, #2644]	; 16248 <__assert_fail@plt+0x4c0c>
   157f0:	str	r3, [sp, #44]	; 0x2c
   157f4:	b	157c4 <__assert_fail@plt+0x4188>
   157f8:	bl	11600 <abort@plt>
   157fc:	mov	r3, #1
   15800:	mov	r7, #0
   15804:	str	r3, [sp, #24]
   15808:	mov	r4, #0
   1580c:	b	155ec <__assert_fail@plt+0x3fb0>
   15810:	mov	r7, #1
   15814:	str	sl, [sp, #32]
   15818:	b	157b8 <__assert_fail@plt+0x417c>
   1581c:	mov	r3, #1
   15820:	str	r7, [sp, #24]
   15824:	str	r3, [sp, #32]
   15828:	ldr	r3, [pc, #2576]	; 16240 <__assert_fail@plt+0x4c04>
   1582c:	str	r3, [sp, #44]	; 0x2c
   15830:	b	15808 <__assert_fail@plt+0x41cc>
   15834:	ldr	fp, [sp, #24]
   15838:	ldr	r3, [sp, #32]
   1583c:	cmp	sl, #2
   15840:	moveq	fp, #0
   15844:	andne	fp, fp, #1
   15848:	adds	r5, r3, #0
   1584c:	movne	r5, #1
   15850:	ands	r3, fp, r5
   15854:	str	r3, [sp, #64]	; 0x40
   15858:	beq	15928 <__assert_fail@plt+0x42ec>
   1585c:	ldr	r3, [sp, #28]
   15860:	ldr	r2, [sp, #32]
   15864:	cmp	r2, #1
   15868:	add	r6, r3, r2
   1586c:	mov	r3, r2
   15870:	ldr	r2, [sp, #40]	; 0x28
   15874:	movls	r3, #0
   15878:	movhi	r3, #1
   1587c:	cmn	r2, #1
   15880:	movne	r3, #0
   15884:	cmp	r3, #0
   15888:	beq	15898 <__assert_fail@plt+0x425c>
   1588c:	ldr	r0, [sp, #48]	; 0x30
   15890:	bl	1148c <strlen@plt>
   15894:	str	r0, [sp, #40]	; 0x28
   15898:	ldr	r3, [sp, #40]	; 0x28
   1589c:	cmp	r6, r3
   158a0:	bhi	15920 <__assert_fail@plt+0x42e4>
   158a4:	ldr	r0, [sp, #28]
   158a8:	ldr	r2, [sp, #32]
   158ac:	ldr	r3, [sp, #48]	; 0x30
   158b0:	ldr	r1, [sp, #44]	; 0x2c
   158b4:	add	r0, r3, r0
   158b8:	bl	11300 <memcmp@plt>
   158bc:	cmp	r0, #0
   158c0:	bne	15920 <__assert_fail@plt+0x42e4>
   158c4:	cmp	r7, #0
   158c8:	beq	15928 <__assert_fail@plt+0x42ec>
   158cc:	str	r7, [sp, #24]
   158d0:	ldr	r3, [sp, #24]
   158d4:	mov	r1, r9
   158d8:	ldr	r2, [sp, #48]	; 0x30
   158dc:	cmp	sl, #2
   158e0:	movne	r3, #0
   158e4:	andeq	r3, r3, #1
   158e8:	cmp	r3, #0
   158ec:	ldr	r3, [sp, #160]	; 0xa0
   158f0:	movne	sl, #4
   158f4:	str	sl, [sp]
   158f8:	str	r3, [sp, #16]
   158fc:	ldr	r3, [sp, #156]	; 0x9c
   15900:	str	r3, [sp, #12]
   15904:	mov	r3, #0
   15908:	str	r3, [sp, #8]
   1590c:	ldr	r3, [sp, #148]	; 0x94
   15910:	bic	r3, r3, #2
   15914:	str	r3, [sp, #4]
   15918:	ldr	r3, [sp, #40]	; 0x28
   1591c:	b	156a4 <__assert_fail@plt+0x4068>
   15920:	mov	r3, #0
   15924:	str	r3, [sp, #64]	; 0x40
   15928:	ldr	r2, [sp, #28]
   1592c:	ldr	r3, [sp, #48]	; 0x30
   15930:	add	r3, r3, r2
   15934:	str	r3, [sp, #80]	; 0x50
   15938:	ldr	r3, [sp, #48]	; 0x30
   1593c:	ldrb	r6, [r3, r2]
   15940:	cmp	r6, #58	; 0x3a
   15944:	bhi	15aa8 <__assert_fail@plt+0x446c>
   15948:	cmp	r6, #43	; 0x2b
   1594c:	bcs	15c68 <__assert_fail@plt+0x462c>
   15950:	cmp	r6, #32
   15954:	beq	15cbc <__assert_fail@plt+0x4680>
   15958:	bhi	15a00 <__assert_fail@plt+0x43c4>
   1595c:	cmp	r6, #9
   15960:	beq	15e64 <__assert_fail@plt+0x4828>
   15964:	bhi	159c4 <__assert_fail@plt+0x4388>
   15968:	cmp	r6, #7
   1596c:	beq	15e74 <__assert_fail@plt+0x4838>
   15970:	bhi	15e90 <__assert_fail@plt+0x4854>
   15974:	cmp	r6, #0
   15978:	beq	15cd8 <__assert_fail@plt+0x469c>
   1597c:	ldr	r3, [sp, #76]	; 0x4c
   15980:	cmp	r3, #1
   15984:	bne	15edc <__assert_fail@plt+0x48a0>
   15988:	bl	11450 <__ctype_b_loc@plt>
   1598c:	ldr	r2, [r0]
   15990:	sxth	r3, r6
   15994:	lsl	r3, r3, #1
   15998:	ldrh	r5, [r2, r3]
   1599c:	ldr	r3, [sp, #76]	; 0x4c
   159a0:	ubfx	r5, r5, #14, #1
   159a4:	str	r3, [sp, #56]	; 0x38
   159a8:	ldr	r3, [sp, #24]
   159ac:	eor	fp, r5, #1
   159b0:	and	fp, fp, r3
   159b4:	ands	fp, fp, #255	; 0xff
   159b8:	beq	15b98 <__assert_fail@plt+0x455c>
   159bc:	mov	r5, #0
   159c0:	b	15f88 <__assert_fail@plt+0x494c>
   159c4:	cmp	r6, #11
   159c8:	beq	15e98 <__assert_fail@plt+0x485c>
   159cc:	bcc	15e6c <__assert_fail@plt+0x4830>
   159d0:	cmp	r6, #12
   159d4:	beq	15ea0 <__assert_fail@plt+0x4864>
   159d8:	cmp	r6, #13
   159dc:	moveq	r3, #114	; 0x72
   159e0:	bne	1597c <__assert_fail@plt+0x4340>
   159e4:	cmp	sl, #2
   159e8:	movne	r2, #0
   159ec:	andeq	r2, r7, #1
   159f0:	cmp	r2, #0
   159f4:	beq	15e78 <__assert_fail@plt+0x483c>
   159f8:	mov	sl, #2
   159fc:	b	158d0 <__assert_fail@plt+0x4294>
   15a00:	cmp	r6, #37	; 0x25
   15a04:	beq	15c68 <__assert_fail@plt+0x462c>
   15a08:	bhi	15a1c <__assert_fail@plt+0x43e0>
   15a0c:	cmp	r6, #35	; 0x23
   15a10:	beq	15cb0 <__assert_fail@plt+0x4674>
   15a14:	mov	r5, #0
   15a18:	b	15cc0 <__assert_fail@plt+0x4684>
   15a1c:	cmp	r6, #39	; 0x27
   15a20:	bne	15a14 <__assert_fail@plt+0x43d8>
   15a24:	cmp	sl, #2
   15a28:	ldrne	r5, [sp, #36]	; 0x24
   15a2c:	movne	r3, r5
   15a30:	strne	r3, [sp, #68]	; 0x44
   15a34:	bne	15db4 <__assert_fail@plt+0x4778>
   15a38:	cmp	r7, #0
   15a3c:	bne	158d0 <__assert_fail@plt+0x4294>
   15a40:	ldr	r3, [sp, #60]	; 0x3c
   15a44:	cmp	r9, #0
   15a48:	clz	r3, r3
   15a4c:	lsr	r3, r3, #5
   15a50:	moveq	r3, #0
   15a54:	cmp	r3, #0
   15a58:	strne	r9, [sp, #60]	; 0x3c
   15a5c:	movne	r9, #0
   15a60:	bne	15a70 <__assert_fail@plt+0x4434>
   15a64:	cmp	r9, r4
   15a68:	movhi	r3, #39	; 0x27
   15a6c:	strbhi	r3, [r8, r4]
   15a70:	add	r3, r4, #1
   15a74:	ldr	r5, [sp, #36]	; 0x24
   15a78:	mov	fp, #0
   15a7c:	cmp	r3, r9
   15a80:	movcc	r2, #92	; 0x5c
   15a84:	str	fp, [sp, #52]	; 0x34
   15a88:	strbcc	r2, [r8, r3]
   15a8c:	add	r3, r4, #2
   15a90:	add	r4, r4, #3
   15a94:	cmp	r3, r9
   15a98:	str	r5, [sp, #68]	; 0x44
   15a9c:	movcc	r2, #39	; 0x27
   15aa0:	strbcc	r2, [r8, r3]
   15aa4:	b	15b98 <__assert_fail@plt+0x455c>
   15aa8:	cmp	r6, #94	; 0x5e
   15aac:	beq	15a14 <__assert_fail@plt+0x43d8>
   15ab0:	bhi	15c70 <__assert_fail@plt+0x4634>
   15ab4:	cmp	r6, #90	; 0x5a
   15ab8:	bhi	15c5c <__assert_fail@plt+0x4620>
   15abc:	cmp	r6, #65	; 0x41
   15ac0:	bcs	15c68 <__assert_fail@plt+0x462c>
   15ac4:	cmp	r6, #62	; 0x3e
   15ac8:	bls	15a14 <__assert_fail@plt+0x43d8>
   15acc:	cmp	r6, #63	; 0x3f
   15ad0:	bne	1597c <__assert_fail@plt+0x4340>
   15ad4:	cmp	sl, #2
   15ad8:	beq	15dbc <__assert_fail@plt+0x4780>
   15adc:	cmp	sl, #5
   15ae0:	movne	fp, #0
   15ae4:	bne	1618c <__assert_fail@plt+0x4b50>
   15ae8:	ldr	r3, [sp, #148]	; 0x94
   15aec:	tst	r3, #4
   15af0:	beq	15dc4 <__assert_fail@plt+0x4788>
   15af4:	ldr	r3, [sp, #28]
   15af8:	add	r2, r3, #2
   15afc:	ldr	r3, [sp, #40]	; 0x28
   15b00:	cmp	r2, r3
   15b04:	bcs	15dc4 <__assert_fail@plt+0x4788>
   15b08:	ldr	r1, [sp, #28]
   15b0c:	ldr	r3, [sp, #48]	; 0x30
   15b10:	add	r3, r3, r1
   15b14:	ldrb	r1, [r3, #1]
   15b18:	cmp	r1, #63	; 0x3f
   15b1c:	bne	15dc4 <__assert_fail@plt+0x4788>
   15b20:	ldr	r3, [sp, #48]	; 0x30
   15b24:	ldrb	r6, [r3, r2]
   15b28:	sub	r3, r6, #33	; 0x21
   15b2c:	uxtb	r3, r3
   15b30:	cmp	r3, #29
   15b34:	bhi	16194 <__assert_fail@plt+0x4b58>
   15b38:	ldr	r0, [pc, #1804]	; 1624c <__assert_fail@plt+0x4c10>
   15b3c:	mov	r5, #1
   15b40:	ands	r5, r0, r5, lsl r3
   15b44:	beq	1619c <__assert_fail@plt+0x4b60>
   15b48:	cmp	r7, #0
   15b4c:	bne	158d0 <__assert_fail@plt+0x4294>
   15b50:	cmp	r9, r4
   15b54:	add	r3, r4, #1
   15b58:	str	r2, [sp, #28]
   15b5c:	mov	r5, #0
   15b60:	strbhi	r1, [r8, r4]
   15b64:	cmp	r9, r3
   15b68:	mov	fp, r5
   15b6c:	movhi	r1, #34	; 0x22
   15b70:	strbhi	r1, [r8, r3]
   15b74:	add	r3, r4, #2
   15b78:	cmp	r9, r3
   15b7c:	movhi	r1, #34	; 0x22
   15b80:	strbhi	r1, [r8, r3]
   15b84:	add	r3, r4, #3
   15b88:	add	r4, r4, #4
   15b8c:	cmp	r9, r3
   15b90:	movhi	r1, #63	; 0x3f
   15b94:	strbhi	r1, [r8, r3]
   15b98:	ldr	r3, [sp, #24]
   15b9c:	eor	r3, r3, #1
   15ba0:	cmp	sl, #2
   15ba4:	orreq	r3, r3, #1
   15ba8:	eor	r3, r3, #1
   15bac:	orr	r3, r7, r3
   15bb0:	tst	r3, #255	; 0xff
   15bb4:	beq	15be0 <__assert_fail@plt+0x45a4>
   15bb8:	ldr	r3, [sp, #152]	; 0x98
   15bbc:	cmp	r3, #0
   15bc0:	beq	15be0 <__assert_fail@plt+0x45a4>
   15bc4:	ldr	r1, [sp, #152]	; 0x98
   15bc8:	ubfx	r2, r6, #5, #8
   15bcc:	and	r3, r6, #31
   15bd0:	ldr	r2, [r1, r2, lsl #2]
   15bd4:	lsr	r3, r2, r3
   15bd8:	tst	r3, #1
   15bdc:	bne	15bec <__assert_fail@plt+0x45b0>
   15be0:	ldr	r3, [sp, #64]	; 0x40
   15be4:	cmp	r3, #0
   15be8:	beq	15de4 <__assert_fail@plt+0x47a8>
   15bec:	sub	r3, sl, #2
   15bf0:	cmp	r7, #0
   15bf4:	clz	r3, r3
   15bf8:	lsr	r3, r3, #5
   15bfc:	bne	158d0 <__assert_fail@plt+0x4294>
   15c00:	ldr	r2, [sp, #52]	; 0x34
   15c04:	eor	r2, r2, #1
   15c08:	ands	r3, r3, r2
   15c0c:	beq	15c44 <__assert_fail@plt+0x4608>
   15c10:	cmp	r9, r4
   15c14:	str	r3, [sp, #52]	; 0x34
   15c18:	movhi	r2, #39	; 0x27
   15c1c:	strbhi	r2, [r8, r4]
   15c20:	add	r2, r4, #1
   15c24:	cmp	r9, r2
   15c28:	movhi	r1, #36	; 0x24
   15c2c:	strbhi	r1, [r8, r2]
   15c30:	add	r2, r4, #2
   15c34:	add	r4, r4, #3
   15c38:	cmp	r9, r2
   15c3c:	movhi	r1, #39	; 0x27
   15c40:	strbhi	r1, [r8, r2]
   15c44:	cmp	r9, r4
   15c48:	ldr	fp, [sp, #36]	; 0x24
   15c4c:	movhi	r3, #92	; 0x5c
   15c50:	strbhi	r3, [r8, r4]
   15c54:	add	r4, r4, #1
   15c58:	b	15de4 <__assert_fail@plt+0x47a8>
   15c5c:	cmp	r6, #92	; 0x5c
   15c60:	beq	15dcc <__assert_fail@plt+0x4790>
   15c64:	bls	15a14 <__assert_fail@plt+0x43d8>
   15c68:	ldr	r5, [sp, #36]	; 0x24
   15c6c:	b	15db4 <__assert_fail@plt+0x4778>
   15c70:	cmp	r6, #122	; 0x7a
   15c74:	bhi	15c94 <__assert_fail@plt+0x4658>
   15c78:	cmp	r6, #97	; 0x61
   15c7c:	bcs	15c68 <__assert_fail@plt+0x462c>
   15c80:	cmp	r6, #95	; 0x5f
   15c84:	beq	15c68 <__assert_fail@plt+0x462c>
   15c88:	cmp	r6, #96	; 0x60
   15c8c:	bne	1597c <__assert_fail@plt+0x4340>
   15c90:	b	15a14 <__assert_fail@plt+0x43d8>
   15c94:	cmp	r6, #124	; 0x7c
   15c98:	beq	15a14 <__assert_fail@plt+0x43d8>
   15c9c:	bcc	15ea8 <__assert_fail@plt+0x486c>
   15ca0:	cmp	r6, #125	; 0x7d
   15ca4:	beq	15ea8 <__assert_fail@plt+0x486c>
   15ca8:	cmp	r6, #126	; 0x7e
   15cac:	bne	1597c <__assert_fail@plt+0x4340>
   15cb0:	ldr	r3, [sp, #28]
   15cb4:	cmp	r3, #0
   15cb8:	bne	15dc4 <__assert_fail@plt+0x4788>
   15cbc:	ldr	r5, [sp, #36]	; 0x24
   15cc0:	cmp	sl, #2
   15cc4:	movne	fp, #0
   15cc8:	andeq	fp, r7, #1
   15ccc:	cmp	fp, #0
   15cd0:	beq	15b98 <__assert_fail@plt+0x455c>
   15cd4:	b	159f8 <__assert_fail@plt+0x43bc>
   15cd8:	ldr	r3, [sp, #24]
   15cdc:	cmp	r3, #0
   15ce0:	beq	15da8 <__assert_fail@plt+0x476c>
   15ce4:	sub	r2, sl, #2
   15ce8:	cmp	r7, #0
   15cec:	clz	r2, r2
   15cf0:	lsr	r2, r2, #5
   15cf4:	bne	158cc <__assert_fail@plt+0x4290>
   15cf8:	ldr	r3, [sp, #52]	; 0x34
   15cfc:	eor	r3, r3, #1
   15d00:	ands	r2, r2, r3
   15d04:	moveq	r3, r4
   15d08:	beq	15d40 <__assert_fail@plt+0x4704>
   15d0c:	cmp	r9, r4
   15d10:	str	r2, [sp, #52]	; 0x34
   15d14:	movhi	r3, #39	; 0x27
   15d18:	strbhi	r3, [r8, r4]
   15d1c:	add	r3, r4, #1
   15d20:	cmp	r9, r3
   15d24:	movhi	r1, #36	; 0x24
   15d28:	strbhi	r1, [r8, r3]
   15d2c:	add	r3, r4, #2
   15d30:	cmp	r9, r3
   15d34:	movhi	r1, #39	; 0x27
   15d38:	strbhi	r1, [r8, r3]
   15d3c:	add	r3, r4, #3
   15d40:	cmp	r9, r3
   15d44:	add	r4, r3, #1
   15d48:	movhi	r2, #92	; 0x5c
   15d4c:	strbhi	r2, [r8, r3]
   15d50:	cmp	fp, #0
   15d54:	beq	1617c <__assert_fail@plt+0x4b40>
   15d58:	ldr	r2, [sp, #28]
   15d5c:	ldr	r1, [sp, #40]	; 0x28
   15d60:	add	r2, r2, #1
   15d64:	cmp	r2, r1
   15d68:	bcs	15da0 <__assert_fail@plt+0x4764>
   15d6c:	ldr	r1, [sp, #48]	; 0x30
   15d70:	mov	r6, #48	; 0x30
   15d74:	ldrb	r2, [r1, r2]
   15d78:	sub	r2, r2, #48	; 0x30
   15d7c:	cmp	r2, #9
   15d80:	bhi	1618c <__assert_fail@plt+0x4b50>
   15d84:	cmp	r9, r4
   15d88:	add	r2, r3, #2
   15d8c:	strbhi	r6, [r8, r4]
   15d90:	cmp	r9, r2
   15d94:	add	r4, r3, #3
   15d98:	movhi	r1, #48	; 0x30
   15d9c:	strbhi	r1, [r8, r2]
   15da0:	mov	r5, #0
   15da4:	b	16184 <__assert_fail@plt+0x4b48>
   15da8:	ldr	r3, [sp, #148]	; 0x94
   15dac:	ands	r5, r3, #1
   15db0:	bne	15e38 <__assert_fail@plt+0x47fc>
   15db4:	mov	fp, #0
   15db8:	b	15b98 <__assert_fail@plt+0x455c>
   15dbc:	cmp	r7, #0
   15dc0:	bne	158d0 <__assert_fail@plt+0x4294>
   15dc4:	mov	r5, #0
   15dc8:	b	15db4 <__assert_fail@plt+0x4778>
   15dcc:	cmp	sl, #2
   15dd0:	bne	15e44 <__assert_fail@plt+0x4808>
   15dd4:	cmp	r7, #0
   15dd8:	bne	158d0 <__assert_fail@plt+0x4294>
   15ddc:	mov	r5, r7
   15de0:	mov	fp, r7
   15de4:	ldr	r3, [sp, #52]	; 0x34
   15de8:	eor	fp, fp, #1
   15dec:	tst	r3, fp
   15df0:	beq	15e1c <__assert_fail@plt+0x47e0>
   15df4:	cmp	r9, r4
   15df8:	movhi	r3, #39	; 0x27
   15dfc:	strbhi	r3, [r8, r4]
   15e00:	add	r3, r4, #1
   15e04:	add	r4, r4, #2
   15e08:	cmp	r9, r3
   15e0c:	movhi	r2, #39	; 0x27
   15e10:	strbhi	r2, [r8, r3]
   15e14:	mov	r3, #0
   15e18:	str	r3, [sp, #52]	; 0x34
   15e1c:	cmp	r9, r4
   15e20:	ldr	r3, [sp, #72]	; 0x48
   15e24:	strbhi	r6, [r8, r4]
   15e28:	cmp	r5, #0
   15e2c:	add	r4, r4, #1
   15e30:	moveq	r3, #0
   15e34:	str	r3, [sp, #72]	; 0x48
   15e38:	ldr	r3, [sp, #28]
   15e3c:	add	r3, r3, #1
   15e40:	b	155f8 <__assert_fail@plt+0x3fbc>
   15e44:	ldr	r3, [sp, #24]
   15e48:	and	r3, r3, r7
   15e4c:	tst	r5, r3
   15e50:	moveq	r3, r6
   15e54:	beq	159e4 <__assert_fail@plt+0x43a8>
   15e58:	mov	fp, #0
   15e5c:	mov	r5, fp
   15e60:	b	15de4 <__assert_fail@plt+0x47a8>
   15e64:	mov	r3, #116	; 0x74
   15e68:	b	159e4 <__assert_fail@plt+0x43a8>
   15e6c:	mov	r3, #110	; 0x6e
   15e70:	b	159e4 <__assert_fail@plt+0x43a8>
   15e74:	mov	r3, #97	; 0x61
   15e78:	ldr	r2, [sp, #24]
   15e7c:	cmp	r2, #0
   15e80:	beq	15dc4 <__assert_fail@plt+0x4788>
   15e84:	mov	r6, r3
   15e88:	mov	r5, #0
   15e8c:	b	15bec <__assert_fail@plt+0x45b0>
   15e90:	mov	r3, #98	; 0x62
   15e94:	b	15e78 <__assert_fail@plt+0x483c>
   15e98:	mov	r3, #118	; 0x76
   15e9c:	b	15e78 <__assert_fail@plt+0x483c>
   15ea0:	mov	r3, #102	; 0x66
   15ea4:	b	15e78 <__assert_fail@plt+0x483c>
   15ea8:	ldr	r3, [sp, #40]	; 0x28
   15eac:	cmn	r3, #1
   15eb0:	bne	15ed0 <__assert_fail@plt+0x4894>
   15eb4:	ldr	r3, [sp, #48]	; 0x30
   15eb8:	ldrb	r3, [r3, #1]
   15ebc:	adds	r3, r3, #0
   15ec0:	movne	r3, #1
   15ec4:	cmp	r3, #0
   15ec8:	bne	15dc4 <__assert_fail@plt+0x4788>
   15ecc:	b	15cb0 <__assert_fail@plt+0x4674>
   15ed0:	ldr	r3, [sp, #40]	; 0x28
   15ed4:	subs	r3, r3, #1
   15ed8:	b	15ec0 <__assert_fail@plt+0x4884>
   15edc:	mov	r3, #0
   15ee0:	mov	r2, #0
   15ee4:	strd	r2, [sp, #96]	; 0x60
   15ee8:	ldr	r3, [sp, #40]	; 0x28
   15eec:	cmn	r3, #1
   15ef0:	bne	15f00 <__assert_fail@plt+0x48c4>
   15ef4:	ldr	r0, [sp, #48]	; 0x30
   15ef8:	bl	1148c <strlen@plt>
   15efc:	str	r0, [sp, #40]	; 0x28
   15f00:	ldr	r5, [sp, #36]	; 0x24
   15f04:	mov	r3, #0
   15f08:	str	r3, [sp, #56]	; 0x38
   15f0c:	ldr	r3, [sp, #28]
   15f10:	add	r0, sp, #92	; 0x5c
   15f14:	ldr	r1, [sp, #40]	; 0x28
   15f18:	ldr	r2, [sp, #56]	; 0x38
   15f1c:	add	r2, r3, r2
   15f20:	ldr	r3, [sp, #48]	; 0x30
   15f24:	add	fp, r3, r2
   15f28:	sub	r2, r1, r2
   15f2c:	add	r3, sp, #96	; 0x60
   15f30:	mov	r1, fp
   15f34:	bl	18094 <__assert_fail@plt+0x6a58>
   15f38:	subs	r2, r0, #0
   15f3c:	beq	15f7c <__assert_fail@plt+0x4940>
   15f40:	cmn	r2, #1
   15f44:	beq	16150 <__assert_fail@plt+0x4b14>
   15f48:	cmn	r2, #2
   15f4c:	bne	160c0 <__assert_fail@plt+0x4a84>
   15f50:	ldr	r3, [sp, #28]
   15f54:	ldr	r2, [sp, #56]	; 0x38
   15f58:	add	r3, r3, r2
   15f5c:	ldr	r2, [sp, #40]	; 0x28
   15f60:	cmp	r2, r3
   15f64:	bls	16150 <__assert_fail@plt+0x4b14>
   15f68:	ldr	r2, [sp, #56]	; 0x38
   15f6c:	ldr	r3, [sp, #80]	; 0x50
   15f70:	ldrb	r5, [r3, r2]
   15f74:	cmp	r5, #0
   15f78:	bne	160b0 <__assert_fail@plt+0x4a74>
   15f7c:	ldr	r3, [sp, #56]	; 0x38
   15f80:	cmp	r3, #1
   15f84:	bls	159a8 <__assert_fail@plt+0x436c>
   15f88:	ldr	r3, [sp, #28]
   15f8c:	mov	fp, #0
   15f90:	mov	ip, #92	; 0x5c
   15f94:	ldr	r2, [sp, #56]	; 0x38
   15f98:	add	r3, r3, r2
   15f9c:	ldr	r2, [sp, #24]
   15fa0:	str	r3, [sp, #36]	; 0x24
   15fa4:	eor	r3, r5, #1
   15fa8:	and	r3, r3, r2
   15fac:	mov	r2, #39	; 0x27
   15fb0:	uxtb	r3, r3
   15fb4:	cmp	r3, #0
   15fb8:	beq	16158 <__assert_fail@plt+0x4b1c>
   15fbc:	sub	r0, sl, #2
   15fc0:	cmp	r7, #0
   15fc4:	clz	r0, r0
   15fc8:	lsr	r0, r0, #5
   15fcc:	bne	158cc <__assert_fail@plt+0x4290>
   15fd0:	ldr	r1, [sp, #52]	; 0x34
   15fd4:	eor	r1, r1, #1
   15fd8:	ands	r1, r0, r1
   15fdc:	beq	1600c <__assert_fail@plt+0x49d0>
   15fe0:	cmp	r9, r4
   15fe4:	add	r0, r4, #1
   15fe8:	str	r1, [sp, #52]	; 0x34
   15fec:	strbhi	r2, [r8, r4]
   15ff0:	cmp	r9, r0
   15ff4:	movhi	lr, #36	; 0x24
   15ff8:	strbhi	lr, [r8, r0]
   15ffc:	add	r0, r4, #2
   16000:	add	r4, r4, #3
   16004:	cmp	r9, r0
   16008:	strbhi	r2, [r8, r0]
   1600c:	cmp	r9, r4
   16010:	add	r0, r4, #1
   16014:	mov	fp, r3
   16018:	strbhi	ip, [r8, r4]
   1601c:	cmp	r9, r0
   16020:	lsrhi	r1, r6, #6
   16024:	addhi	r1, r1, #48	; 0x30
   16028:	strbhi	r1, [r8, r0]
   1602c:	add	r0, r4, #2
   16030:	add	r4, r4, #3
   16034:	cmp	r9, r0
   16038:	ubfxhi	r1, r6, #3, #3
   1603c:	and	r6, r6, #7
   16040:	add	r6, r6, #48	; 0x30
   16044:	addhi	r1, r1, #48	; 0x30
   16048:	strbhi	r1, [r8, r0]
   1604c:	eor	r0, fp, #1
   16050:	ldr	r1, [sp, #28]
   16054:	ldr	lr, [sp, #52]	; 0x34
   16058:	add	r1, r1, #1
   1605c:	and	r0, r0, lr
   16060:	ldr	lr, [sp, #36]	; 0x24
   16064:	cmp	r1, lr
   16068:	bcs	15de4 <__assert_fail@plt+0x47a8>
   1606c:	cmp	r0, #0
   16070:	beq	16094 <__assert_fail@plt+0x4a58>
   16074:	cmp	r9, r4
   16078:	add	r0, r4, #1
   1607c:	strbhi	r2, [r8, r4]
   16080:	cmp	r9, r0
   16084:	add	r4, r4, #2
   16088:	strbhi	r2, [r8, r0]
   1608c:	mov	r0, #0
   16090:	str	r0, [sp, #52]	; 0x34
   16094:	ldr	r0, [sp, #48]	; 0x30
   16098:	cmp	r9, r4
   1609c:	str	r1, [sp, #28]
   160a0:	strbhi	r6, [r8, r4]
   160a4:	add	r4, r4, #1
   160a8:	ldrb	r6, [r0, r1]
   160ac:	b	15fb4 <__assert_fail@plt+0x4978>
   160b0:	ldr	r3, [sp, #56]	; 0x38
   160b4:	add	r3, r3, #1
   160b8:	str	r3, [sp, #56]	; 0x38
   160bc:	b	15f50 <__assert_fail@plt+0x4914>
   160c0:	cmp	sl, #2
   160c4:	movne	r3, #0
   160c8:	andeq	r3, r7, #1
   160cc:	cmp	r3, #0
   160d0:	movne	r1, #1
   160d4:	bne	16130 <__assert_fail@plt+0x4af4>
   160d8:	ldr	r0, [sp, #92]	; 0x5c
   160dc:	str	r2, [sp, #84]	; 0x54
   160e0:	bl	11378 <iswprint@plt>
   160e4:	ldr	r3, [sp, #56]	; 0x38
   160e8:	cmp	r0, #0
   160ec:	add	r0, sp, #96	; 0x60
   160f0:	moveq	r5, #0
   160f4:	ldr	r2, [sp, #84]	; 0x54
   160f8:	add	r3, r3, r2
   160fc:	str	r3, [sp, #56]	; 0x38
   16100:	bl	112e8 <mbsinit@plt>
   16104:	cmp	r0, #0
   16108:	beq	15f0c <__assert_fail@plt+0x48d0>
   1610c:	b	15f7c <__assert_fail@plt+0x4940>
   16110:	ldrb	r3, [fp, #1]!
   16114:	cmp	r3, #94	; 0x5e
   16118:	beq	159f8 <__assert_fail@plt+0x43bc>
   1611c:	bhi	1613c <__assert_fail@plt+0x4b00>
   16120:	sub	r3, r3, #91	; 0x5b
   16124:	cmp	r3, #1
   16128:	bls	159f8 <__assert_fail@plt+0x43bc>
   1612c:	add	r1, r1, #1
   16130:	cmp	r1, r2
   16134:	bne	16110 <__assert_fail@plt+0x4ad4>
   16138:	b	160d8 <__assert_fail@plt+0x4a9c>
   1613c:	cmp	r3, #96	; 0x60
   16140:	beq	159f8 <__assert_fail@plt+0x43bc>
   16144:	cmp	r3, #124	; 0x7c
   16148:	bne	1612c <__assert_fail@plt+0x4af0>
   1614c:	b	159f8 <__assert_fail@plt+0x43bc>
   16150:	mov	r5, #0
   16154:	b	15f7c <__assert_fail@plt+0x4940>
   16158:	ldr	r1, [sp, #64]	; 0x40
   1615c:	cmp	r1, #0
   16160:	beq	1604c <__assert_fail@plt+0x4a10>
   16164:	cmp	r9, r4
   16168:	mov	r1, #0
   1616c:	strbhi	ip, [r8, r4]
   16170:	add	r4, r4, #1
   16174:	str	r1, [sp, #64]	; 0x40
   16178:	b	1604c <__assert_fail@plt+0x4a10>
   1617c:	mov	r5, fp
   16180:	ldr	fp, [sp, #24]
   16184:	mov	r6, #48	; 0x30
   16188:	b	15b98 <__assert_fail@plt+0x455c>
   1618c:	mov	r5, #0
   16190:	b	15b98 <__assert_fail@plt+0x455c>
   16194:	mov	r6, r1
   16198:	b	15dc4 <__assert_fail@plt+0x4788>
   1619c:	mov	r6, r1
   161a0:	b	15db4 <__assert_fail@plt+0x4778>
   161a4:	ldr	r2, [sp, #28]
   161a8:	ldr	r3, [sp, #40]	; 0x28
   161ac:	subs	r3, r3, r2
   161b0:	movne	r3, #1
   161b4:	b	1561c <__assert_fail@plt+0x3fe0>
   161b8:	ldr	r3, [sp, #60]	; 0x3c
   161bc:	mov	sl, #2
   161c0:	ldr	r7, [sp, #72]	; 0x48
   161c4:	adds	r6, r3, #0
   161c8:	mov	r5, r3
   161cc:	movne	r6, #1
   161d0:	cmp	r9, #0
   161d4:	movne	r6, #0
   161d8:	cmp	r6, #0
   161dc:	bne	155ac <__assert_fail@plt+0x3f70>
   161e0:	ldr	r3, [sp, #68]	; 0x44
   161e4:	ldr	r2, [sp, #44]	; 0x2c
   161e8:	cmp	r2, #0
   161ec:	moveq	r3, #0
   161f0:	andne	r3, r3, #1
   161f4:	cmp	r3, #0
   161f8:	movne	r3, r2
   161fc:	subne	r3, r3, #1
   16200:	bne	16230 <__assert_fail@plt+0x4bf4>
   16204:	cmp	r9, r4
   16208:	movhi	r3, #0
   1620c:	strbhi	r3, [r8, r4]
   16210:	mov	r0, r4
   16214:	add	sp, sp, #108	; 0x6c
   16218:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1621c:	mov	r3, r7
   16220:	b	161e4 <__assert_fail@plt+0x4ba8>
   16224:	cmp	r9, r4
   16228:	strbhi	r2, [r8, r4]
   1622c:	add	r4, r4, #1
   16230:	ldrb	r2, [r3, #1]!
   16234:	cmp	r2, #0
   16238:	bne	16224 <__assert_fail@plt+0x4be8>
   1623c:	b	16204 <__assert_fail@plt+0x4bc8>
   16240:	andeq	r9, r1, ip, lsl #14
   16244:	andeq	r9, r1, sp, lsl r7
   16248:	ldrdeq	r9, [r1], -r7
   1624c:	stmdacc	r0, {r0, r6, r7, r8, ip, lr}
   16250:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16254:	sub	sp, sp, #52	; 0x34
   16258:	mov	r6, r0
   1625c:	mov	r5, r3
   16260:	mov	r8, r1
   16264:	mov	r9, r2
   16268:	bl	114b0 <__errno_location@plt>
   1626c:	ldr	r3, [r0]
   16270:	cmn	r6, #-2147483647	; 0x80000001
   16274:	str	r0, [sp, #24]
   16278:	ldr	r7, [pc, #368]	; 163f0 <__assert_fail@plt+0x4db4>
   1627c:	str	r3, [sp, #32]
   16280:	movne	r3, #0
   16284:	moveq	r3, #1
   16288:	orrs	r3, r3, r6, lsr #31
   1628c:	ldr	r4, [r7]
   16290:	beq	16298 <__assert_fail@plt+0x4c5c>
   16294:	bl	11600 <abort@plt>
   16298:	ldr	r2, [r7, #4]
   1629c:	cmp	r2, r6
   162a0:	bgt	16310 <__assert_fail@plt+0x4cd4>
   162a4:	add	sl, r7, #8
   162a8:	mov	r3, #8
   162ac:	cmp	r4, sl
   162b0:	add	r1, sp, #44	; 0x2c
   162b4:	str	r2, [sp, #44]	; 0x2c
   162b8:	sub	r2, r6, r2
   162bc:	movne	r0, r4
   162c0:	moveq	r0, #0
   162c4:	add	r2, r2, #1
   162c8:	str	r3, [sp]
   162cc:	mvn	r3, #-2147483648	; 0x80000000
   162d0:	bl	1772c <__assert_fail@plt+0x60f0>
   162d4:	cmp	r4, sl
   162d8:	mov	fp, r0
   162dc:	str	r0, [r7]
   162e0:	ldmeq	r4, {r0, r1}
   162e4:	mov	r4, fp
   162e8:	ldr	r2, [sp, #44]	; 0x2c
   162ec:	stmeq	fp, {r0, r1}
   162f0:	mov	r1, #0
   162f4:	ldr	r0, [r7, #4]
   162f8:	sub	r2, r2, r0
   162fc:	add	r0, fp, r0, lsl #3
   16300:	lsl	r2, r2, #3
   16304:	bl	114d4 <memset@plt>
   16308:	ldr	r3, [sp, #44]	; 0x2c
   1630c:	str	r3, [r7, #4]
   16310:	ldr	r3, [r5, #4]
   16314:	add	sl, r4, r6, lsl #3
   16318:	mov	r2, r8
   1631c:	ldr	fp, [r4, r6, lsl #3]
   16320:	ldr	r7, [sl, #4]
   16324:	orr	r3, r3, #1
   16328:	str	r3, [sp, #28]
   1632c:	add	r3, r5, #8
   16330:	mov	r1, fp
   16334:	str	r3, [sp, #36]	; 0x24
   16338:	mov	r0, r7
   1633c:	ldr	r3, [r5, #44]	; 0x2c
   16340:	str	r3, [sp, #16]
   16344:	ldr	r3, [r5, #40]	; 0x28
   16348:	str	r3, [sp, #12]
   1634c:	add	r3, r5, #8
   16350:	str	r3, [sp, #8]
   16354:	ldr	r3, [sp, #28]
   16358:	str	r3, [sp, #4]
   1635c:	ldr	r3, [r5]
   16360:	str	r3, [sp]
   16364:	mov	r3, r9
   16368:	bl	15560 <__assert_fail@plt+0x3f24>
   1636c:	cmp	fp, r0
   16370:	bhi	163d8 <__assert_fail@plt+0x4d9c>
   16374:	ldr	r3, [pc, #120]	; 163f4 <__assert_fail@plt+0x4db8>
   16378:	add	fp, r0, #1
   1637c:	str	fp, [r4, r6, lsl #3]
   16380:	cmp	r7, r3
   16384:	beq	16390 <__assert_fail@plt+0x4d54>
   16388:	mov	r0, r7
   1638c:	bl	17f50 <__assert_fail@plt+0x6914>
   16390:	mov	r0, fp
   16394:	bl	1761c <__assert_fail@plt+0x5fe0>
   16398:	ldr	r3, [r5, #44]	; 0x2c
   1639c:	mov	r2, r8
   163a0:	mov	r1, fp
   163a4:	str	r0, [sl, #4]
   163a8:	mov	r7, r0
   163ac:	str	r3, [sp, #16]
   163b0:	ldr	r3, [r5, #40]	; 0x28
   163b4:	str	r3, [sp, #12]
   163b8:	add	r3, r5, #8
   163bc:	str	r3, [sp, #8]
   163c0:	ldr	r3, [sp, #28]
   163c4:	str	r3, [sp, #4]
   163c8:	ldr	r3, [r5]
   163cc:	str	r3, [sp]
   163d0:	mov	r3, r9
   163d4:	bl	15560 <__assert_fail@plt+0x3f24>
   163d8:	ldr	r3, [sp, #24]
   163dc:	mov	r0, r7
   163e0:	ldr	r2, [sp, #32]
   163e4:	str	r2, [r3]
   163e8:	add	sp, sp, #52	; 0x34
   163ec:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   163f0:	andeq	sl, r2, r0, ror r1
   163f4:	andeq	sl, r2, r0, lsl r2
   163f8:	push	{r4, r5, r6, lr}
   163fc:	mov	r5, r0
   16400:	bl	114b0 <__errno_location@plt>
   16404:	mov	r4, r0
   16408:	cmp	r5, #0
   1640c:	ldr	r0, [pc, #20]	; 16428 <__assert_fail@plt+0x4dec>
   16410:	mov	r1, #48	; 0x30
   16414:	movne	r0, r5
   16418:	ldr	r6, [r4]
   1641c:	bl	1781c <__assert_fail@plt+0x61e0>
   16420:	str	r6, [r4]
   16424:	pop	{r4, r5, r6, pc}
   16428:	andeq	sl, r2, r0, lsl r3
   1642c:	ldr	r3, [pc, #12]	; 16440 <__assert_fail@plt+0x4e04>
   16430:	cmp	r0, #0
   16434:	moveq	r0, r3
   16438:	ldr	r0, [r0]
   1643c:	bx	lr
   16440:	andeq	sl, r2, r0, lsl r3
   16444:	ldr	r3, [pc, #12]	; 16458 <__assert_fail@plt+0x4e1c>
   16448:	cmp	r0, #0
   1644c:	moveq	r0, r3
   16450:	str	r1, [r0]
   16454:	bx	lr
   16458:	andeq	sl, r2, r0, lsl r3
   1645c:	ldr	r3, [pc, #52]	; 16498 <__assert_fail@plt+0x4e5c>
   16460:	cmp	r0, #0
   16464:	push	{lr}		; (str lr, [sp, #-4]!)
   16468:	lsr	lr, r1, #5
   1646c:	and	r1, r1, #31
   16470:	moveq	r0, r3
   16474:	add	r3, r0, #8
   16478:	ldr	ip, [r3, lr, lsl #2]
   1647c:	lsr	r0, ip, r1
   16480:	eor	r2, r2, r0
   16484:	and	r0, r0, #1
   16488:	and	r2, r2, #1
   1648c:	eor	r1, ip, r2, lsl r1
   16490:	str	r1, [r3, lr, lsl #2]
   16494:	pop	{pc}		; (ldr pc, [sp], #4)
   16498:	andeq	sl, r2, r0, lsl r3
   1649c:	ldr	r3, [pc, #16]	; 164b4 <__assert_fail@plt+0x4e78>
   164a0:	cmp	r0, #0
   164a4:	movne	r3, r0
   164a8:	ldr	r0, [r3, #4]
   164ac:	str	r1, [r3, #4]
   164b0:	bx	lr
   164b4:	andeq	sl, r2, r0, lsl r3
   164b8:	ldr	r3, [pc, #44]	; 164ec <__assert_fail@plt+0x4eb0>
   164bc:	cmp	r0, #0
   164c0:	moveq	r0, r3
   164c4:	mov	r3, #10
   164c8:	cmp	r2, #0
   164cc:	cmpne	r1, #0
   164d0:	str	r3, [r0]
   164d4:	bne	164e0 <__assert_fail@plt+0x4ea4>
   164d8:	push	{r4, lr}
   164dc:	bl	11600 <abort@plt>
   164e0:	str	r1, [r0, #40]	; 0x28
   164e4:	str	r2, [r0, #44]	; 0x2c
   164e8:	bx	lr
   164ec:	andeq	sl, r2, r0, lsl r3
   164f0:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   164f4:	sub	sp, sp, #24
   164f8:	mov	sl, r3
   164fc:	mov	r7, r0
   16500:	mov	r8, r1
   16504:	mov	r9, r2
   16508:	ldr	r4, [sp, #56]	; 0x38
   1650c:	ldr	r3, [pc, #88]	; 1656c <__assert_fail@plt+0x4f30>
   16510:	cmp	r4, #0
   16514:	moveq	r4, r3
   16518:	bl	114b0 <__errno_location@plt>
   1651c:	ldr	r3, [r4, #44]	; 0x2c
   16520:	mov	r5, r0
   16524:	mov	r2, r9
   16528:	mov	r1, r8
   1652c:	mov	r0, r7
   16530:	ldr	r6, [r5]
   16534:	str	r3, [sp, #16]
   16538:	ldr	r3, [r4, #40]	; 0x28
   1653c:	str	r3, [sp, #12]
   16540:	add	r3, r4, #8
   16544:	str	r3, [sp, #8]
   16548:	ldr	r3, [r4, #4]
   1654c:	str	r3, [sp, #4]
   16550:	ldr	r3, [r4]
   16554:	str	r3, [sp]
   16558:	mov	r3, sl
   1655c:	bl	15560 <__assert_fail@plt+0x3f24>
   16560:	str	r6, [r5]
   16564:	add	sp, sp, #24
   16568:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1656c:	andeq	sl, r2, r0, lsl r3
   16570:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16574:	cmp	r3, #0
   16578:	sub	sp, sp, #44	; 0x2c
   1657c:	mov	r6, r2
   16580:	mov	sl, r1
   16584:	mov	r9, r0
   16588:	ldr	r4, [pc, #176]	; 16640 <__assert_fail@plt+0x5004>
   1658c:	movne	r4, r3
   16590:	bl	114b0 <__errno_location@plt>
   16594:	ldr	r3, [r0]
   16598:	mov	r1, #0
   1659c:	mov	r2, r9
   165a0:	mov	r8, r0
   165a4:	mov	r0, r1
   165a8:	ldr	r5, [r4, #4]
   165ac:	add	fp, r4, #8
   165b0:	str	r3, [sp, #28]
   165b4:	ldr	r3, [r4, #44]	; 0x2c
   165b8:	cmp	r6, #0
   165bc:	orreq	r5, r5, #1
   165c0:	str	r3, [sp, #16]
   165c4:	ldr	r3, [r4, #40]	; 0x28
   165c8:	stmib	sp, {r5, fp}
   165cc:	str	r3, [sp, #12]
   165d0:	ldr	r3, [r4]
   165d4:	str	r3, [sp]
   165d8:	mov	r3, sl
   165dc:	bl	15560 <__assert_fail@plt+0x3f24>
   165e0:	add	r1, r0, #1
   165e4:	mov	r7, r0
   165e8:	mov	r0, r1
   165ec:	str	r1, [sp, #36]	; 0x24
   165f0:	bl	1761c <__assert_fail@plt+0x5fe0>
   165f4:	ldr	r3, [r4, #44]	; 0x2c
   165f8:	mov	r2, r9
   165fc:	ldr	r1, [sp, #36]	; 0x24
   16600:	str	r3, [sp, #16]
   16604:	ldr	r3, [r4, #40]	; 0x28
   16608:	stmib	sp, {r5, fp}
   1660c:	str	r0, [sp, #32]
   16610:	str	r3, [sp, #12]
   16614:	ldr	r3, [r4]
   16618:	str	r3, [sp]
   1661c:	mov	r3, sl
   16620:	bl	15560 <__assert_fail@plt+0x3f24>
   16624:	ldr	r3, [sp, #28]
   16628:	cmp	r6, #0
   1662c:	ldr	r0, [sp, #32]
   16630:	str	r3, [r8]
   16634:	strne	r7, [r6]
   16638:	add	sp, sp, #44	; 0x2c
   1663c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16640:	andeq	sl, r2, r0, lsl r3
   16644:	mov	r3, r2
   16648:	mov	r2, #0
   1664c:	b	16570 <__assert_fail@plt+0x4f34>
   16650:	push	{r4, r5, r6, r7, r8, lr}
   16654:	mov	r6, #1
   16658:	ldr	r4, [pc, #100]	; 166c4 <__assert_fail@plt+0x5088>
   1665c:	ldr	r5, [r4]
   16660:	add	r7, r5, #4
   16664:	ldr	r3, [r4, #4]
   16668:	cmp	r3, r6
   1666c:	bgt	166b4 <__assert_fail@plt+0x5078>
   16670:	ldr	r6, [pc, #80]	; 166c8 <__assert_fail@plt+0x508c>
   16674:	ldr	r0, [r5, #4]
   16678:	cmp	r0, r6
   1667c:	beq	16690 <__assert_fail@plt+0x5054>
   16680:	bl	17f50 <__assert_fail@plt+0x6914>
   16684:	mov	r3, #256	; 0x100
   16688:	str	r3, [r4, #8]
   1668c:	str	r6, [r4, #12]
   16690:	ldr	r6, [pc, #52]	; 166cc <__assert_fail@plt+0x5090>
   16694:	cmp	r5, r6
   16698:	beq	166a8 <__assert_fail@plt+0x506c>
   1669c:	mov	r0, r5
   166a0:	bl	17f50 <__assert_fail@plt+0x6914>
   166a4:	str	r6, [r4]
   166a8:	mov	r3, #1
   166ac:	str	r3, [r4, #4]
   166b0:	pop	{r4, r5, r6, r7, r8, pc}
   166b4:	ldr	r0, [r7, r6, lsl #3]
   166b8:	add	r6, r6, #1
   166bc:	bl	17f50 <__assert_fail@plt+0x6914>
   166c0:	b	16664 <__assert_fail@plt+0x5028>
   166c4:	andeq	sl, r2, r0, ror r1
   166c8:	andeq	sl, r2, r0, lsl r2
   166cc:	andeq	sl, r2, r8, ror r1
   166d0:	ldr	r3, [pc, #4]	; 166dc <__assert_fail@plt+0x50a0>
   166d4:	mvn	r2, #0
   166d8:	b	16250 <__assert_fail@plt+0x4c14>
   166dc:	andeq	sl, r2, r0, lsl r3
   166e0:	ldr	r3, [pc]	; 166e8 <__assert_fail@plt+0x50ac>
   166e4:	b	16250 <__assert_fail@plt+0x4c14>
   166e8:	andeq	sl, r2, r0, lsl r3
   166ec:	mov	r1, r0
   166f0:	mov	r0, #0
   166f4:	b	166d0 <__assert_fail@plt+0x5094>
   166f8:	mov	r2, r1
   166fc:	mov	r1, r0
   16700:	mov	r0, #0
   16704:	b	166e0 <__assert_fail@plt+0x50a4>
   16708:	push	{r4, r5, lr}
   1670c:	sub	sp, sp, #52	; 0x34
   16710:	mov	r5, r2
   16714:	mov	r4, r0
   16718:	mov	r0, sp
   1671c:	bl	15404 <__assert_fail@plt+0x3dc8>
   16720:	mov	r3, sp
   16724:	mvn	r2, #0
   16728:	mov	r1, r5
   1672c:	mov	r0, r4
   16730:	bl	16250 <__assert_fail@plt+0x4c14>
   16734:	add	sp, sp, #52	; 0x34
   16738:	pop	{r4, r5, pc}
   1673c:	push	{r4, r5, r6, lr}
   16740:	sub	sp, sp, #48	; 0x30
   16744:	mov	r5, r2
   16748:	mov	r6, r3
   1674c:	mov	r4, r0
   16750:	mov	r0, sp
   16754:	bl	15404 <__assert_fail@plt+0x3dc8>
   16758:	mov	r3, sp
   1675c:	mov	r2, r6
   16760:	mov	r1, r5
   16764:	mov	r0, r4
   16768:	bl	16250 <__assert_fail@plt+0x4c14>
   1676c:	add	sp, sp, #48	; 0x30
   16770:	pop	{r4, r5, r6, pc}
   16774:	mov	r2, r1
   16778:	mov	r1, r0
   1677c:	mov	r0, #0
   16780:	b	16708 <__assert_fail@plt+0x50cc>
   16784:	mov	r3, r2
   16788:	mov	r2, r1
   1678c:	mov	r1, r0
   16790:	mov	r0, #0
   16794:	b	1673c <__assert_fail@plt+0x5100>
   16798:	push	{r4, r5, r6, lr}
   1679c:	mov	r4, r0
   167a0:	mov	r5, r1
   167a4:	mov	r6, r2
   167a8:	sub	sp, sp, #48	; 0x30
   167ac:	mov	ip, sp
   167b0:	ldr	lr, [pc, #64]	; 167f8 <__assert_fail@plt+0x51bc>
   167b4:	ldm	lr!, {r0, r1, r2, r3}
   167b8:	stmia	ip!, {r0, r1, r2, r3}
   167bc:	ldm	lr!, {r0, r1, r2, r3}
   167c0:	stmia	ip!, {r0, r1, r2, r3}
   167c4:	ldm	lr, {r0, r1, r2, r3}
   167c8:	stm	ip, {r0, r1, r2, r3}
   167cc:	mov	r1, r6
   167d0:	mov	r2, #1
   167d4:	mov	r0, sp
   167d8:	bl	1645c <__assert_fail@plt+0x4e20>
   167dc:	mov	r3, sp
   167e0:	mov	r2, r5
   167e4:	mov	r1, r4
   167e8:	mov	r0, #0
   167ec:	bl	16250 <__assert_fail@plt+0x4c14>
   167f0:	add	sp, sp, #48	; 0x30
   167f4:	pop	{r4, r5, r6, pc}
   167f8:	andeq	sl, r2, r0, lsl r3
   167fc:	mov	r2, r1
   16800:	mvn	r1, #0
   16804:	b	16798 <__assert_fail@plt+0x515c>
   16808:	mov	r1, #58	; 0x3a
   1680c:	b	167fc <__assert_fail@plt+0x51c0>
   16810:	mov	r2, #58	; 0x3a
   16814:	b	16798 <__assert_fail@plt+0x515c>
   16818:	push	{r4, r5, lr}
   1681c:	sub	sp, sp, #100	; 0x64
   16820:	mov	r4, r0
   16824:	mov	r0, sp
   16828:	mov	r5, r2
   1682c:	bl	15404 <__assert_fail@plt+0x3dc8>
   16830:	mov	ip, sp
   16834:	add	lr, sp, #48	; 0x30
   16838:	ldm	ip!, {r0, r1, r2, r3}
   1683c:	stmia	lr!, {r0, r1, r2, r3}
   16840:	ldm	ip!, {r0, r1, r2, r3}
   16844:	stmia	lr!, {r0, r1, r2, r3}
   16848:	ldm	ip, {r0, r1, r2, r3}
   1684c:	stm	lr, {r0, r1, r2, r3}
   16850:	mov	r2, #1
   16854:	mov	r1, #58	; 0x3a
   16858:	add	r0, sp, #48	; 0x30
   1685c:	bl	1645c <__assert_fail@plt+0x4e20>
   16860:	add	r3, sp, #48	; 0x30
   16864:	mvn	r2, #0
   16868:	mov	r1, r5
   1686c:	mov	r0, r4
   16870:	bl	16250 <__assert_fail@plt+0x4c14>
   16874:	add	sp, sp, #100	; 0x64
   16878:	pop	{r4, r5, pc}
   1687c:	push	{r4, r5, r6, r7, lr}
   16880:	mov	r4, r0
   16884:	mov	r6, r1
   16888:	mov	r7, r2
   1688c:	mov	r5, r3
   16890:	sub	sp, sp, #52	; 0x34
   16894:	ldr	lr, [pc, #68]	; 168e0 <__assert_fail@plt+0x52a4>
   16898:	mov	ip, sp
   1689c:	ldm	lr!, {r0, r1, r2, r3}
   168a0:	stmia	ip!, {r0, r1, r2, r3}
   168a4:	ldm	lr!, {r0, r1, r2, r3}
   168a8:	stmia	ip!, {r0, r1, r2, r3}
   168ac:	ldm	lr, {r0, r1, r2, r3}
   168b0:	stm	ip, {r0, r1, r2, r3}
   168b4:	mov	r2, r7
   168b8:	mov	r1, r6
   168bc:	mov	r0, sp
   168c0:	bl	164b8 <__assert_fail@plt+0x4e7c>
   168c4:	ldr	r2, [sp, #72]	; 0x48
   168c8:	mov	r3, sp
   168cc:	mov	r1, r5
   168d0:	mov	r0, r4
   168d4:	bl	16250 <__assert_fail@plt+0x4c14>
   168d8:	add	sp, sp, #52	; 0x34
   168dc:	pop	{r4, r5, r6, r7, pc}
   168e0:	andeq	sl, r2, r0, lsl r3
   168e4:	mvn	ip, #0
   168e8:	push	{r0, r1, r2, lr}
   168ec:	str	ip, [sp]
   168f0:	bl	1687c <__assert_fail@plt+0x5240>
   168f4:	add	sp, sp, #12
   168f8:	pop	{pc}		; (ldr pc, [sp], #4)
   168fc:	mov	r3, r2
   16900:	mov	r2, r1
   16904:	mov	r1, r0
   16908:	mov	r0, #0
   1690c:	b	168e4 <__assert_fail@plt+0x52a8>
   16910:	push	{r0, r1, r2, lr}
   16914:	str	r3, [sp]
   16918:	mov	r3, r2
   1691c:	mov	r2, r1
   16920:	mov	r1, r0
   16924:	mov	r0, #0
   16928:	bl	1687c <__assert_fail@plt+0x5240>
   1692c:	add	sp, sp, #12
   16930:	pop	{pc}		; (ldr pc, [sp], #4)
   16934:	ldr	r3, [pc]	; 1693c <__assert_fail@plt+0x5300>
   16938:	b	16250 <__assert_fail@plt+0x4c14>
   1693c:	andeq	sl, r2, r0, lsl #3
   16940:	mov	r2, r1
   16944:	mov	r1, r0
   16948:	mov	r0, #0
   1694c:	b	16934 <__assert_fail@plt+0x52f8>
   16950:	mvn	r2, #0
   16954:	b	16934 <__assert_fail@plt+0x52f8>
   16958:	mov	r1, r0
   1695c:	mov	r0, #0
   16960:	b	16950 <__assert_fail@plt+0x5314>
   16964:	push	{r4, lr}
   16968:	sub	sp, sp, #104	; 0x68
   1696c:	mov	r4, r0
   16970:	mov	r1, sp
   16974:	ldr	r0, [pc, #36]	; 169a0 <__assert_fail@plt+0x5364>
   16978:	bl	187cc <__assert_fail@plt+0x7190>
   1697c:	cmp	r0, #0
   16980:	ldrdeq	r2, [sp, #96]	; 0x60
   16984:	movne	r4, #0
   16988:	mov	r0, r4
   1698c:	strdeq	r2, [r4]
   16990:	ldrdeq	r2, [sp]
   16994:	strdeq	r2, [r4, #8]
   16998:	add	sp, sp, #104	; 0x68
   1699c:	pop	{r4, pc}
   169a0:	strdeq	r9, [r1], -r0
   169a4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   169a8:	cmn	r0, #100	; 0x64
   169ac:	sub	sp, sp, #4032	; 0xfc0
   169b0:	sub	sp, sp, #4
   169b4:	mov	r8, r1
   169b8:	mov	r9, r2
   169bc:	beq	169cc <__assert_fail@plt+0x5390>
   169c0:	ldrb	r3, [r1]
   169c4:	cmp	r3, #47	; 0x2f
   169c8:	bne	169ec <__assert_fail@plt+0x53b0>
   169cc:	mov	r1, r9
   169d0:	mov	r0, r8
   169d4:	bl	17068 <__assert_fail@plt+0x5a2c>
   169d8:	mov	r4, r0
   169dc:	mov	r0, r4
   169e0:	add	sp, sp, #4032	; 0xfc0
   169e4:	add	sp, sp, #4
   169e8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   169ec:	mov	r5, sp
   169f0:	mov	r2, r1
   169f4:	mov	r6, r0
   169f8:	mov	r1, r0
   169fc:	mov	r0, r5
   16a00:	bl	17a30 <__assert_fail@plt+0x63f4>
   16a04:	subs	fp, r0, #0
   16a08:	beq	16a68 <__assert_fail@plt+0x542c>
   16a0c:	mov	r1, r9
   16a10:	bl	17068 <__assert_fail@plt+0x5a2c>
   16a14:	mov	r4, r0
   16a18:	bl	114b0 <__errno_location@plt>
   16a1c:	cmp	fp, r5
   16a20:	mov	sl, r0
   16a24:	ldr	r7, [r0]
   16a28:	beq	16a34 <__assert_fail@plt+0x53f8>
   16a2c:	mov	r0, fp
   16a30:	bl	17f50 <__assert_fail@plt+0x6914>
   16a34:	cmn	r4, #1
   16a38:	bne	169dc <__assert_fail@plt+0x53a0>
   16a3c:	cmp	r7, #20
   16a40:	bls	16a58 <__assert_fail@plt+0x541c>
   16a44:	cmp	r7, #38	; 0x26
   16a48:	cmpne	r7, #95	; 0x5f
   16a4c:	beq	16a68 <__assert_fail@plt+0x542c>
   16a50:	str	r7, [sl]
   16a54:	b	169dc <__assert_fail@plt+0x53a0>
   16a58:	ldr	r3, [pc, #216]	; 16b38 <__assert_fail@plt+0x54fc>
   16a5c:	mvn	r3, r3, lsr r7
   16a60:	tst	r3, #1
   16a64:	bne	16a50 <__assert_fail@plt+0x5414>
   16a68:	mov	r0, r5
   16a6c:	bl	18188 <__assert_fail@plt+0x6b4c>
   16a70:	cmp	r0, #0
   16a74:	beq	16a84 <__assert_fail@plt+0x5448>
   16a78:	bl	114b0 <__errno_location@plt>
   16a7c:	ldr	r0, [r0]
   16a80:	bl	180e4 <__assert_fail@plt+0x6aa8>
   16a84:	cmp	r6, #0
   16a88:	blt	16ab4 <__assert_fail@plt+0x5478>
   16a8c:	ldr	r3, [sp]
   16a90:	cmp	r3, r6
   16a94:	bne	16ab4 <__assert_fail@plt+0x5478>
   16a98:	mov	r0, r5
   16a9c:	bl	181f8 <__assert_fail@plt+0x6bbc>
   16aa0:	bl	114b0 <__errno_location@plt>
   16aa4:	mov	r3, #9
   16aa8:	str	r3, [r0]
   16aac:	mvn	r4, #0
   16ab0:	b	169dc <__assert_fail@plt+0x53a0>
   16ab4:	mov	r0, r6
   16ab8:	bl	11594 <fchdir@plt>
   16abc:	subs	r6, r0, #0
   16ac0:	beq	16ae0 <__assert_fail@plt+0x54a4>
   16ac4:	bl	114b0 <__errno_location@plt>
   16ac8:	mov	r4, r0
   16acc:	mov	r0, r5
   16ad0:	ldr	r6, [r4]
   16ad4:	bl	181f8 <__assert_fail@plt+0x6bbc>
   16ad8:	str	r6, [r4]
   16adc:	b	16aac <__assert_fail@plt+0x5470>
   16ae0:	mov	r1, r9
   16ae4:	mov	r0, r8
   16ae8:	bl	17068 <__assert_fail@plt+0x5a2c>
   16aec:	cmn	r0, #1
   16af0:	mov	r4, r0
   16af4:	bne	16b00 <__assert_fail@plt+0x54c4>
   16af8:	bl	114b0 <__errno_location@plt>
   16afc:	ldr	r6, [r0]
   16b00:	mov	r0, r5
   16b04:	bl	181dc <__assert_fail@plt+0x6ba0>
   16b08:	cmp	r0, #0
   16b0c:	beq	16b1c <__assert_fail@plt+0x54e0>
   16b10:	bl	114b0 <__errno_location@plt>
   16b14:	ldr	r0, [r0]
   16b18:	bl	18120 <__assert_fail@plt+0x6ae4>
   16b1c:	mov	r0, r5
   16b20:	bl	181f8 <__assert_fail@plt+0x6bbc>
   16b24:	cmp	r6, #0
   16b28:	beq	169dc <__assert_fail@plt+0x53a0>
   16b2c:	bl	114b0 <__errno_location@plt>
   16b30:	str	r6, [r0]
   16b34:	b	169dc <__assert_fail@plt+0x53a0>
   16b38:	andseq	r2, r0, r6
   16b3c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16b40:	cmn	r0, #100	; 0x64
   16b44:	sub	sp, sp, #4032	; 0xfc0
   16b48:	sub	sp, sp, #4
   16b4c:	mov	r8, r1
   16b50:	mov	r9, r2
   16b54:	beq	16b64 <__assert_fail@plt+0x5528>
   16b58:	ldrb	r3, [r1]
   16b5c:	cmp	r3, #47	; 0x2f
   16b60:	bne	16b84 <__assert_fail@plt+0x5548>
   16b64:	mov	r1, r9
   16b68:	mov	r0, r8
   16b6c:	bl	17080 <__assert_fail@plt+0x5a44>
   16b70:	mov	r4, r0
   16b74:	mov	r0, r4
   16b78:	add	sp, sp, #4032	; 0xfc0
   16b7c:	add	sp, sp, #4
   16b80:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16b84:	mov	r5, sp
   16b88:	mov	r2, r1
   16b8c:	mov	r6, r0
   16b90:	mov	r1, r0
   16b94:	mov	r0, r5
   16b98:	bl	17a30 <__assert_fail@plt+0x63f4>
   16b9c:	subs	fp, r0, #0
   16ba0:	beq	16c00 <__assert_fail@plt+0x55c4>
   16ba4:	mov	r1, r9
   16ba8:	bl	17080 <__assert_fail@plt+0x5a44>
   16bac:	mov	r4, r0
   16bb0:	bl	114b0 <__errno_location@plt>
   16bb4:	cmp	fp, r5
   16bb8:	mov	sl, r0
   16bbc:	ldr	r7, [r0]
   16bc0:	beq	16bcc <__assert_fail@plt+0x5590>
   16bc4:	mov	r0, fp
   16bc8:	bl	17f50 <__assert_fail@plt+0x6914>
   16bcc:	cmn	r4, #1
   16bd0:	bne	16b74 <__assert_fail@plt+0x5538>
   16bd4:	cmp	r7, #20
   16bd8:	bls	16bf0 <__assert_fail@plt+0x55b4>
   16bdc:	cmp	r7, #38	; 0x26
   16be0:	cmpne	r7, #95	; 0x5f
   16be4:	beq	16c00 <__assert_fail@plt+0x55c4>
   16be8:	str	r7, [sl]
   16bec:	b	16b74 <__assert_fail@plt+0x5538>
   16bf0:	ldr	r3, [pc, #216]	; 16cd0 <__assert_fail@plt+0x5694>
   16bf4:	mvn	r3, r3, lsr r7
   16bf8:	tst	r3, #1
   16bfc:	bne	16be8 <__assert_fail@plt+0x55ac>
   16c00:	mov	r0, r5
   16c04:	bl	18188 <__assert_fail@plt+0x6b4c>
   16c08:	cmp	r0, #0
   16c0c:	beq	16c1c <__assert_fail@plt+0x55e0>
   16c10:	bl	114b0 <__errno_location@plt>
   16c14:	ldr	r0, [r0]
   16c18:	bl	180e4 <__assert_fail@plt+0x6aa8>
   16c1c:	cmp	r6, #0
   16c20:	blt	16c4c <__assert_fail@plt+0x5610>
   16c24:	ldr	r3, [sp]
   16c28:	cmp	r3, r6
   16c2c:	bne	16c4c <__assert_fail@plt+0x5610>
   16c30:	mov	r0, r5
   16c34:	bl	181f8 <__assert_fail@plt+0x6bbc>
   16c38:	bl	114b0 <__errno_location@plt>
   16c3c:	mov	r3, #9
   16c40:	str	r3, [r0]
   16c44:	mvn	r4, #0
   16c48:	b	16b74 <__assert_fail@plt+0x5538>
   16c4c:	mov	r0, r6
   16c50:	bl	11594 <fchdir@plt>
   16c54:	subs	r6, r0, #0
   16c58:	beq	16c78 <__assert_fail@plt+0x563c>
   16c5c:	bl	114b0 <__errno_location@plt>
   16c60:	mov	r4, r0
   16c64:	mov	r0, r5
   16c68:	ldr	r6, [r4]
   16c6c:	bl	181f8 <__assert_fail@plt+0x6bbc>
   16c70:	str	r6, [r4]
   16c74:	b	16c44 <__assert_fail@plt+0x5608>
   16c78:	mov	r1, r9
   16c7c:	mov	r0, r8
   16c80:	bl	17080 <__assert_fail@plt+0x5a44>
   16c84:	cmn	r0, #1
   16c88:	mov	r4, r0
   16c8c:	bne	16c98 <__assert_fail@plt+0x565c>
   16c90:	bl	114b0 <__errno_location@plt>
   16c94:	ldr	r6, [r0]
   16c98:	mov	r0, r5
   16c9c:	bl	181dc <__assert_fail@plt+0x6ba0>
   16ca0:	cmp	r0, #0
   16ca4:	beq	16cb4 <__assert_fail@plt+0x5678>
   16ca8:	bl	114b0 <__errno_location@plt>
   16cac:	ldr	r0, [r0]
   16cb0:	bl	18120 <__assert_fail@plt+0x6ae4>
   16cb4:	mov	r0, r5
   16cb8:	bl	181f8 <__assert_fail@plt+0x6bbc>
   16cbc:	cmp	r6, #0
   16cc0:	beq	16b74 <__assert_fail@plt+0x5538>
   16cc4:	bl	114b0 <__errno_location@plt>
   16cc8:	str	r6, [r0]
   16ccc:	b	16b74 <__assert_fail@plt+0x5538>
   16cd0:	andseq	r2, r0, r6
   16cd4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16cd8:	cmn	r0, #100	; 0x64
   16cdc:	sub	sp, sp, #4032	; 0xfc0
   16ce0:	sub	sp, sp, #4
   16ce4:	mov	r8, r1
   16ce8:	mov	r9, r2
   16cec:	beq	16cfc <__assert_fail@plt+0x56c0>
   16cf0:	ldrb	r3, [r1]
   16cf4:	cmp	r3, #47	; 0x2f
   16cf8:	bne	16d1c <__assert_fail@plt+0x56e0>
   16cfc:	mov	r1, r9
   16d00:	mov	r0, r8
   16d04:	bl	11510 <setfilecon@plt>
   16d08:	mov	r4, r0
   16d0c:	mov	r0, r4
   16d10:	add	sp, sp, #4032	; 0xfc0
   16d14:	add	sp, sp, #4
   16d18:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16d1c:	mov	r5, sp
   16d20:	mov	r2, r1
   16d24:	mov	r6, r0
   16d28:	mov	r1, r0
   16d2c:	mov	r0, r5
   16d30:	bl	17a30 <__assert_fail@plt+0x63f4>
   16d34:	subs	fp, r0, #0
   16d38:	beq	16d98 <__assert_fail@plt+0x575c>
   16d3c:	mov	r1, r9
   16d40:	bl	11510 <setfilecon@plt>
   16d44:	mov	r4, r0
   16d48:	bl	114b0 <__errno_location@plt>
   16d4c:	cmp	fp, r5
   16d50:	mov	sl, r0
   16d54:	ldr	r7, [r0]
   16d58:	beq	16d64 <__assert_fail@plt+0x5728>
   16d5c:	mov	r0, fp
   16d60:	bl	17f50 <__assert_fail@plt+0x6914>
   16d64:	cmn	r4, #1
   16d68:	bne	16d0c <__assert_fail@plt+0x56d0>
   16d6c:	cmp	r7, #20
   16d70:	bls	16d88 <__assert_fail@plt+0x574c>
   16d74:	cmp	r7, #38	; 0x26
   16d78:	cmpne	r7, #95	; 0x5f
   16d7c:	beq	16d98 <__assert_fail@plt+0x575c>
   16d80:	str	r7, [sl]
   16d84:	b	16d0c <__assert_fail@plt+0x56d0>
   16d88:	ldr	r3, [pc, #216]	; 16e68 <__assert_fail@plt+0x582c>
   16d8c:	mvn	r3, r3, lsr r7
   16d90:	tst	r3, #1
   16d94:	bne	16d80 <__assert_fail@plt+0x5744>
   16d98:	mov	r0, r5
   16d9c:	bl	18188 <__assert_fail@plt+0x6b4c>
   16da0:	cmp	r0, #0
   16da4:	beq	16db4 <__assert_fail@plt+0x5778>
   16da8:	bl	114b0 <__errno_location@plt>
   16dac:	ldr	r0, [r0]
   16db0:	bl	180e4 <__assert_fail@plt+0x6aa8>
   16db4:	cmp	r6, #0
   16db8:	blt	16de4 <__assert_fail@plt+0x57a8>
   16dbc:	ldr	r3, [sp]
   16dc0:	cmp	r3, r6
   16dc4:	bne	16de4 <__assert_fail@plt+0x57a8>
   16dc8:	mov	r0, r5
   16dcc:	bl	181f8 <__assert_fail@plt+0x6bbc>
   16dd0:	bl	114b0 <__errno_location@plt>
   16dd4:	mov	r3, #9
   16dd8:	str	r3, [r0]
   16ddc:	mvn	r4, #0
   16de0:	b	16d0c <__assert_fail@plt+0x56d0>
   16de4:	mov	r0, r6
   16de8:	bl	11594 <fchdir@plt>
   16dec:	subs	r6, r0, #0
   16df0:	beq	16e10 <__assert_fail@plt+0x57d4>
   16df4:	bl	114b0 <__errno_location@plt>
   16df8:	mov	r4, r0
   16dfc:	mov	r0, r5
   16e00:	ldr	r6, [r4]
   16e04:	bl	181f8 <__assert_fail@plt+0x6bbc>
   16e08:	str	r6, [r4]
   16e0c:	b	16ddc <__assert_fail@plt+0x57a0>
   16e10:	mov	r1, r9
   16e14:	mov	r0, r8
   16e18:	bl	11510 <setfilecon@plt>
   16e1c:	cmn	r0, #1
   16e20:	mov	r4, r0
   16e24:	bne	16e30 <__assert_fail@plt+0x57f4>
   16e28:	bl	114b0 <__errno_location@plt>
   16e2c:	ldr	r6, [r0]
   16e30:	mov	r0, r5
   16e34:	bl	181dc <__assert_fail@plt+0x6ba0>
   16e38:	cmp	r0, #0
   16e3c:	beq	16e4c <__assert_fail@plt+0x5810>
   16e40:	bl	114b0 <__errno_location@plt>
   16e44:	ldr	r0, [r0]
   16e48:	bl	18120 <__assert_fail@plt+0x6ae4>
   16e4c:	mov	r0, r5
   16e50:	bl	181f8 <__assert_fail@plt+0x6bbc>
   16e54:	cmp	r6, #0
   16e58:	beq	16d0c <__assert_fail@plt+0x56d0>
   16e5c:	bl	114b0 <__errno_location@plt>
   16e60:	str	r6, [r0]
   16e64:	b	16d0c <__assert_fail@plt+0x56d0>
   16e68:	andseq	r2, r0, r6
   16e6c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16e70:	cmn	r0, #100	; 0x64
   16e74:	sub	sp, sp, #4032	; 0xfc0
   16e78:	sub	sp, sp, #4
   16e7c:	mov	r8, r1
   16e80:	mov	r9, r2
   16e84:	beq	16e94 <__assert_fail@plt+0x5858>
   16e88:	ldrb	r3, [r1]
   16e8c:	cmp	r3, #47	; 0x2f
   16e90:	bne	16eb4 <__assert_fail@plt+0x5878>
   16e94:	mov	r1, r9
   16e98:	mov	r0, r8
   16e9c:	bl	112ac <lsetfilecon@plt>
   16ea0:	mov	r4, r0
   16ea4:	mov	r0, r4
   16ea8:	add	sp, sp, #4032	; 0xfc0
   16eac:	add	sp, sp, #4
   16eb0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16eb4:	mov	r5, sp
   16eb8:	mov	r2, r1
   16ebc:	mov	r6, r0
   16ec0:	mov	r1, r0
   16ec4:	mov	r0, r5
   16ec8:	bl	17a30 <__assert_fail@plt+0x63f4>
   16ecc:	subs	fp, r0, #0
   16ed0:	beq	16f30 <__assert_fail@plt+0x58f4>
   16ed4:	mov	r1, r9
   16ed8:	bl	112ac <lsetfilecon@plt>
   16edc:	mov	r4, r0
   16ee0:	bl	114b0 <__errno_location@plt>
   16ee4:	cmp	fp, r5
   16ee8:	mov	sl, r0
   16eec:	ldr	r7, [r0]
   16ef0:	beq	16efc <__assert_fail@plt+0x58c0>
   16ef4:	mov	r0, fp
   16ef8:	bl	17f50 <__assert_fail@plt+0x6914>
   16efc:	cmn	r4, #1
   16f00:	bne	16ea4 <__assert_fail@plt+0x5868>
   16f04:	cmp	r7, #20
   16f08:	bls	16f20 <__assert_fail@plt+0x58e4>
   16f0c:	cmp	r7, #38	; 0x26
   16f10:	cmpne	r7, #95	; 0x5f
   16f14:	beq	16f30 <__assert_fail@plt+0x58f4>
   16f18:	str	r7, [sl]
   16f1c:	b	16ea4 <__assert_fail@plt+0x5868>
   16f20:	ldr	r3, [pc, #216]	; 17000 <__assert_fail@plt+0x59c4>
   16f24:	mvn	r3, r3, lsr r7
   16f28:	tst	r3, #1
   16f2c:	bne	16f18 <__assert_fail@plt+0x58dc>
   16f30:	mov	r0, r5
   16f34:	bl	18188 <__assert_fail@plt+0x6b4c>
   16f38:	cmp	r0, #0
   16f3c:	beq	16f4c <__assert_fail@plt+0x5910>
   16f40:	bl	114b0 <__errno_location@plt>
   16f44:	ldr	r0, [r0]
   16f48:	bl	180e4 <__assert_fail@plt+0x6aa8>
   16f4c:	cmp	r6, #0
   16f50:	blt	16f7c <__assert_fail@plt+0x5940>
   16f54:	ldr	r3, [sp]
   16f58:	cmp	r3, r6
   16f5c:	bne	16f7c <__assert_fail@plt+0x5940>
   16f60:	mov	r0, r5
   16f64:	bl	181f8 <__assert_fail@plt+0x6bbc>
   16f68:	bl	114b0 <__errno_location@plt>
   16f6c:	mov	r3, #9
   16f70:	str	r3, [r0]
   16f74:	mvn	r4, #0
   16f78:	b	16ea4 <__assert_fail@plt+0x5868>
   16f7c:	mov	r0, r6
   16f80:	bl	11594 <fchdir@plt>
   16f84:	subs	r6, r0, #0
   16f88:	beq	16fa8 <__assert_fail@plt+0x596c>
   16f8c:	bl	114b0 <__errno_location@plt>
   16f90:	mov	r4, r0
   16f94:	mov	r0, r5
   16f98:	ldr	r6, [r4]
   16f9c:	bl	181f8 <__assert_fail@plt+0x6bbc>
   16fa0:	str	r6, [r4]
   16fa4:	b	16f74 <__assert_fail@plt+0x5938>
   16fa8:	mov	r1, r9
   16fac:	mov	r0, r8
   16fb0:	bl	112ac <lsetfilecon@plt>
   16fb4:	cmn	r0, #1
   16fb8:	mov	r4, r0
   16fbc:	bne	16fc8 <__assert_fail@plt+0x598c>
   16fc0:	bl	114b0 <__errno_location@plt>
   16fc4:	ldr	r6, [r0]
   16fc8:	mov	r0, r5
   16fcc:	bl	181dc <__assert_fail@plt+0x6ba0>
   16fd0:	cmp	r0, #0
   16fd4:	beq	16fe4 <__assert_fail@plt+0x59a8>
   16fd8:	bl	114b0 <__errno_location@plt>
   16fdc:	ldr	r0, [r0]
   16fe0:	bl	18120 <__assert_fail@plt+0x6ae4>
   16fe4:	mov	r0, r5
   16fe8:	bl	181f8 <__assert_fail@plt+0x6bbc>
   16fec:	cmp	r6, #0
   16ff0:	beq	16ea4 <__assert_fail@plt+0x5868>
   16ff4:	bl	114b0 <__errno_location@plt>
   16ff8:	str	r6, [r0]
   16ffc:	b	16ea4 <__assert_fail@plt+0x5868>
   17000:	andseq	r2, r0, r6
   17004:	push	{r4, r5, r6, r7, r8, lr}
   17008:	subs	r4, r0, #0
   1700c:	bne	17028 <__assert_fail@plt+0x59ec>
   17010:	bl	114b0 <__errno_location@plt>
   17014:	mov	r3, #95	; 0x5f
   17018:	mvn	r4, #0
   1701c:	str	r3, [r0]
   17020:	mov	r0, r4
   17024:	pop	{r4, r5, r6, r7, r8, pc}
   17028:	cmp	r4, #10
   1702c:	bne	17020 <__assert_fail@plt+0x59e4>
   17030:	mov	r5, r1
   17034:	ldr	r1, [pc, #40]	; 17064 <__assert_fail@plt+0x5a28>
   17038:	ldr	r6, [r5]
   1703c:	mov	r0, r6
   17040:	bl	11294 <strcmp@plt>
   17044:	subs	r7, r0, #0
   17048:	bne	17020 <__assert_fail@plt+0x59e4>
   1704c:	mov	r0, r6
   17050:	bl	115ac <freecon@plt>
   17054:	str	r7, [r5]
   17058:	bl	114b0 <__errno_location@plt>
   1705c:	mov	r3, #61	; 0x3d
   17060:	b	17018 <__assert_fail@plt+0x59dc>
   17064:	andeq	r9, r1, fp, ror #14
   17068:	push	{r4, lr}
   1706c:	mov	r4, r1
   17070:	bl	11480 <getfilecon@plt>
   17074:	mov	r1, r4
   17078:	pop	{r4, lr}
   1707c:	b	17004 <__assert_fail@plt+0x59c8>
   17080:	push	{r4, lr}
   17084:	mov	r4, r1
   17088:	bl	113fc <lgetfilecon@plt>
   1708c:	mov	r1, r4
   17090:	pop	{r4, lr}
   17094:	b	17004 <__assert_fail@plt+0x59c8>
   17098:	push	{r4, lr}
   1709c:	mov	r4, r1
   170a0:	bl	11348 <fgetfilecon@plt>
   170a4:	mov	r1, r4
   170a8:	pop	{r4, lr}
   170ac:	b	17004 <__assert_fail@plt+0x59c8>
   170b0:	cmp	r0, #2
   170b4:	push	{r4, r5, r6, r7, r8, lr}
   170b8:	mov	r4, r0
   170bc:	bhi	170e4 <__assert_fail@plt+0x5aa8>
   170c0:	bl	1821c <__assert_fail@plt+0x6be0>
   170c4:	mov	r6, r0
   170c8:	bl	114b0 <__errno_location@plt>
   170cc:	mov	r5, r0
   170d0:	mov	r0, r4
   170d4:	ldr	r7, [r5]
   170d8:	mov	r4, r6
   170dc:	bl	1160c <close@plt>
   170e0:	str	r7, [r5]
   170e4:	mov	r0, r4
   170e8:	pop	{r4, r5, r6, r7, r8, pc}
   170ec:	push	{r4, r5, r6, lr}
   170f0:	cmp	r1, #0
   170f4:	sub	sp, sp, #32
   170f8:	mov	r5, r0
   170fc:	ldr	r4, [sp, #48]	; 0x30
   17100:	ldr	r6, [sp, #52]	; 0x34
   17104:	beq	171b8 <__assert_fail@plt+0x5b7c>
   17108:	strd	r2, [sp]
   1710c:	mov	r3, r1
   17110:	mov	r1, #1
   17114:	ldr	r2, [pc, #856]	; 17474 <__assert_fail@plt+0x5e38>
   17118:	bl	114f8 <__fprintf_chk@plt>
   1711c:	mov	r2, #5
   17120:	ldr	r1, [pc, #848]	; 17478 <__assert_fail@plt+0x5e3c>
   17124:	mov	r0, #0
   17128:	bl	11324 <dcgettext@plt>
   1712c:	movw	r3, #2022	; 0x7e6
   17130:	ldr	r2, [pc, #836]	; 1747c <__assert_fail@plt+0x5e40>
   17134:	mov	r1, #1
   17138:	str	r3, [sp]
   1713c:	mov	r3, r0
   17140:	mov	r0, r5
   17144:	bl	114f8 <__fprintf_chk@plt>
   17148:	mov	r1, r5
   1714c:	mov	r0, #10
   17150:	bl	1130c <fputc_unlocked@plt>
   17154:	mov	r2, #5
   17158:	ldr	r1, [pc, #800]	; 17480 <__assert_fail@plt+0x5e44>
   1715c:	mov	r0, #0
   17160:	bl	11324 <dcgettext@plt>
   17164:	mov	r2, r0
   17168:	mov	r1, #1
   1716c:	ldr	r3, [pc, #784]	; 17484 <__assert_fail@plt+0x5e48>
   17170:	mov	r0, r5
   17174:	bl	114f8 <__fprintf_chk@plt>
   17178:	mov	r1, r5
   1717c:	mov	r0, #10
   17180:	bl	1130c <fputc_unlocked@plt>
   17184:	cmp	r6, #9
   17188:	ldrls	pc, [pc, r6, lsl #2]
   1718c:	b	17468 <__assert_fail@plt+0x5e2c>
   17190:	andeq	r7, r1, r8, lsr #5
   17194:	ldrdeq	r7, [r1], -r0
   17198:	strdeq	r7, [r1], -ip
   1719c:	andeq	r7, r1, r0, lsr r2
   171a0:	andeq	r7, r1, ip, ror #4
   171a4:			; <UNDEFINED> instruction: 0x000172b0
   171a8:	strdeq	r7, [r1], -r8
   171ac:	andeq	r7, r1, r8, asr #6
   171b0:	andeq	r7, r1, r0, lsr #7
   171b4:	andeq	r7, r1, r0, lsl #8
   171b8:	mov	r1, #1
   171bc:	str	r3, [sp]
   171c0:	mov	r3, r2
   171c4:	ldr	r2, [pc, #700]	; 17488 <__assert_fail@plt+0x5e4c>
   171c8:	bl	114f8 <__fprintf_chk@plt>
   171cc:	b	1711c <__assert_fail@plt+0x5ae0>
   171d0:	mov	r2, #5
   171d4:	ldr	r1, [pc, #688]	; 1748c <__assert_fail@plt+0x5e50>
   171d8:	mov	r0, #0
   171dc:	bl	11324 <dcgettext@plt>
   171e0:	ldr	r3, [r4]
   171e4:	mov	r2, r0
   171e8:	mov	r1, #1
   171ec:	mov	r0, r5
   171f0:	add	sp, sp, #32
   171f4:	pop	{r4, r5, r6, lr}
   171f8:	b	114f8 <__fprintf_chk@plt>
   171fc:	mov	r2, #5
   17200:	ldr	r1, [pc, #648]	; 17490 <__assert_fail@plt+0x5e54>
   17204:	mov	r0, #0
   17208:	bl	11324 <dcgettext@plt>
   1720c:	ldr	r3, [r4, #4]
   17210:	mov	r2, r0
   17214:	mov	r1, #1
   17218:	mov	r0, r5
   1721c:	str	r3, [sp, #48]	; 0x30
   17220:	ldr	r3, [r4]
   17224:	add	sp, sp, #32
   17228:	pop	{r4, r5, r6, lr}
   1722c:	b	114f8 <__fprintf_chk@plt>
   17230:	mov	r2, #5
   17234:	ldr	r1, [pc, #600]	; 17494 <__assert_fail@plt+0x5e58>
   17238:	mov	r0, #0
   1723c:	bl	11324 <dcgettext@plt>
   17240:	ldr	r3, [r4, #8]
   17244:	mov	r2, r0
   17248:	mov	r1, #1
   1724c:	mov	r0, r5
   17250:	str	r3, [sp, #52]	; 0x34
   17254:	ldr	r3, [r4, #4]
   17258:	str	r3, [sp, #48]	; 0x30
   1725c:	ldr	r3, [r4]
   17260:	add	sp, sp, #32
   17264:	pop	{r4, r5, r6, lr}
   17268:	b	114f8 <__fprintf_chk@plt>
   1726c:	mov	r2, #5
   17270:	ldr	r1, [pc, #544]	; 17498 <__assert_fail@plt+0x5e5c>
   17274:	mov	r0, #0
   17278:	bl	11324 <dcgettext@plt>
   1727c:	ldr	r3, [r4, #12]
   17280:	mov	r2, r0
   17284:	mov	r1, #1
   17288:	mov	r0, r5
   1728c:	str	r3, [sp, #8]
   17290:	ldr	r3, [r4, #8]
   17294:	str	r3, [sp, #4]
   17298:	ldr	r3, [r4, #4]
   1729c:	str	r3, [sp]
   172a0:	ldr	r3, [r4]
   172a4:	bl	114f8 <__fprintf_chk@plt>
   172a8:	add	sp, sp, #32
   172ac:	pop	{r4, r5, r6, pc}
   172b0:	mov	r2, #5
   172b4:	ldr	r1, [pc, #480]	; 1749c <__assert_fail@plt+0x5e60>
   172b8:	mov	r0, #0
   172bc:	bl	11324 <dcgettext@plt>
   172c0:	ldr	r3, [r4, #16]
   172c4:	mov	r2, r0
   172c8:	mov	r1, #1
   172cc:	mov	r0, r5
   172d0:	str	r3, [sp, #12]
   172d4:	ldr	r3, [r4, #12]
   172d8:	str	r3, [sp, #8]
   172dc:	ldr	r3, [r4, #8]
   172e0:	str	r3, [sp, #4]
   172e4:	ldr	r3, [r4, #4]
   172e8:	str	r3, [sp]
   172ec:	ldr	r3, [r4]
   172f0:	bl	114f8 <__fprintf_chk@plt>
   172f4:	b	172a8 <__assert_fail@plt+0x5c6c>
   172f8:	mov	r2, #5
   172fc:	ldr	r1, [pc, #412]	; 174a0 <__assert_fail@plt+0x5e64>
   17300:	mov	r0, #0
   17304:	bl	11324 <dcgettext@plt>
   17308:	ldr	r3, [r4, #20]
   1730c:	mov	r2, r0
   17310:	mov	r1, #1
   17314:	mov	r0, r5
   17318:	str	r3, [sp, #16]
   1731c:	ldr	r3, [r4, #16]
   17320:	str	r3, [sp, #12]
   17324:	ldr	r3, [r4, #12]
   17328:	str	r3, [sp, #8]
   1732c:	ldr	r3, [r4, #8]
   17330:	str	r3, [sp, #4]
   17334:	ldr	r3, [r4, #4]
   17338:	str	r3, [sp]
   1733c:	ldr	r3, [r4]
   17340:	bl	114f8 <__fprintf_chk@plt>
   17344:	b	172a8 <__assert_fail@plt+0x5c6c>
   17348:	mov	r2, #5
   1734c:	ldr	r1, [pc, #336]	; 174a4 <__assert_fail@plt+0x5e68>
   17350:	mov	r0, #0
   17354:	bl	11324 <dcgettext@plt>
   17358:	ldr	r3, [r4, #24]
   1735c:	mov	r2, r0
   17360:	mov	r1, #1
   17364:	mov	r0, r5
   17368:	str	r3, [sp, #20]
   1736c:	ldr	r3, [r4, #20]
   17370:	str	r3, [sp, #16]
   17374:	ldr	r3, [r4, #16]
   17378:	str	r3, [sp, #12]
   1737c:	ldr	r3, [r4, #12]
   17380:	str	r3, [sp, #8]
   17384:	ldr	r3, [r4, #8]
   17388:	str	r3, [sp, #4]
   1738c:	ldr	r3, [r4, #4]
   17390:	str	r3, [sp]
   17394:	ldr	r3, [r4]
   17398:	bl	114f8 <__fprintf_chk@plt>
   1739c:	b	172a8 <__assert_fail@plt+0x5c6c>
   173a0:	mov	r2, #5
   173a4:	ldr	r1, [pc, #252]	; 174a8 <__assert_fail@plt+0x5e6c>
   173a8:	mov	r0, #0
   173ac:	bl	11324 <dcgettext@plt>
   173b0:	ldr	r3, [r4, #28]
   173b4:	mov	r2, r0
   173b8:	mov	r1, #1
   173bc:	mov	r0, r5
   173c0:	str	r3, [sp, #24]
   173c4:	ldr	r3, [r4, #24]
   173c8:	str	r3, [sp, #20]
   173cc:	ldr	r3, [r4, #20]
   173d0:	str	r3, [sp, #16]
   173d4:	ldr	r3, [r4, #16]
   173d8:	str	r3, [sp, #12]
   173dc:	ldr	r3, [r4, #12]
   173e0:	str	r3, [sp, #8]
   173e4:	ldr	r3, [r4, #8]
   173e8:	str	r3, [sp, #4]
   173ec:	ldr	r3, [r4, #4]
   173f0:	str	r3, [sp]
   173f4:	ldr	r3, [r4]
   173f8:	bl	114f8 <__fprintf_chk@plt>
   173fc:	b	172a8 <__assert_fail@plt+0x5c6c>
   17400:	ldr	r1, [pc, #164]	; 174ac <__assert_fail@plt+0x5e70>
   17404:	mov	r2, #5
   17408:	mov	r0, #0
   1740c:	bl	11324 <dcgettext@plt>
   17410:	ldr	r3, [r4, #32]
   17414:	mov	r2, r0
   17418:	mov	r1, #1
   1741c:	mov	r0, r5
   17420:	str	r3, [sp, #28]
   17424:	ldr	r3, [r4, #28]
   17428:	str	r3, [sp, #24]
   1742c:	ldr	r3, [r4, #24]
   17430:	str	r3, [sp, #20]
   17434:	ldr	r3, [r4, #20]
   17438:	str	r3, [sp, #16]
   1743c:	ldr	r3, [r4, #16]
   17440:	str	r3, [sp, #12]
   17444:	ldr	r3, [r4, #12]
   17448:	str	r3, [sp, #8]
   1744c:	ldr	r3, [r4, #8]
   17450:	str	r3, [sp, #4]
   17454:	ldr	r3, [r4, #4]
   17458:	str	r3, [sp]
   1745c:	ldr	r3, [r4]
   17460:	bl	114f8 <__fprintf_chk@plt>
   17464:	b	172a8 <__assert_fail@plt+0x5c6c>
   17468:	mov	r2, #5
   1746c:	ldr	r1, [pc, #60]	; 174b0 <__assert_fail@plt+0x5e74>
   17470:	b	17408 <__assert_fail@plt+0x5dcc>
   17474:	andeq	r9, r1, r5, ror r7
   17478:	andeq	r9, r1, r8, lsl #15
   1747c:	andeq	r9, r1, r6, asr sl
   17480:	andeq	r9, r1, ip, lsl #15
   17484:	andeq	r9, r1, r7, lsr r8
   17488:	andeq	r9, r1, r1, lsl #15
   1748c:	andeq	r9, r1, r9, asr r8
   17490:	andeq	r9, r1, r9, ror #16
   17494:	andeq	r9, r1, r0, lsl #17
   17498:	muleq	r1, ip, r8
   1749c:			; <UNDEFINED> instruction: 0x000198bc
   174a0:	andeq	r9, r1, r0, ror #17
   174a4:	andeq	r9, r1, r8, lsl #18
   174a8:	andeq	r9, r1, r4, lsr r9
   174ac:	andeq	r9, r1, r4, ror #18
   174b0:	muleq	r1, r8, r9
   174b4:	push	{r0, r1, r4, lr}
   174b8:	mov	ip, #0
   174bc:	ldr	lr, [sp, #16]
   174c0:	ldr	r4, [lr, ip, lsl #2]
   174c4:	cmp	r4, #0
   174c8:	bne	174e0 <__assert_fail@plt+0x5ea4>
   174cc:	str	lr, [sp]
   174d0:	str	ip, [sp, #4]
   174d4:	bl	170ec <__assert_fail@plt+0x5ab0>
   174d8:	add	sp, sp, #8
   174dc:	pop	{r4, pc}
   174e0:	add	ip, ip, #1
   174e4:	b	174c0 <__assert_fail@plt+0x5e84>
   174e8:	push	{r4, r5, r6, lr}
   174ec:	sub	sp, sp, #48	; 0x30
   174f0:	mov	ip, #0
   174f4:	add	lr, sp, #8
   174f8:	mov	r5, lr
   174fc:	ldr	r6, [sp, #64]	; 0x40
   17500:	ldr	r4, [r6, ip, lsl #2]
   17504:	cmp	r4, #0
   17508:	str	r4, [lr], #4
   1750c:	beq	1751c <__assert_fail@plt+0x5ee0>
   17510:	add	ip, ip, #1
   17514:	cmp	ip, #10
   17518:	bne	17500 <__assert_fail@plt+0x5ec4>
   1751c:	stm	sp, {r5, ip}
   17520:	bl	170ec <__assert_fail@plt+0x5ab0>
   17524:	add	sp, sp, #48	; 0x30
   17528:	pop	{r4, r5, r6, pc}
   1752c:	push	{r3}		; (str r3, [sp, #-4]!)
   17530:	push	{r0, r1, r2, r3, lr}
   17534:	add	r3, sp, #24
   17538:	str	r3, [sp]
   1753c:	str	r3, [sp, #12]
   17540:	ldr	r3, [sp, #20]
   17544:	bl	174e8 <__assert_fail@plt+0x5eac>
   17548:	add	sp, sp, #16
   1754c:	pop	{lr}		; (ldr lr, [sp], #4)
   17550:	add	sp, sp, #4
   17554:	bx	lr
   17558:	ldr	r3, [pc, #116]	; 175d4 <__assert_fail@plt+0x5f98>
   1755c:	mov	r0, #10
   17560:	push	{r4, lr}
   17564:	ldr	r1, [r3]
   17568:	bl	1130c <fputc_unlocked@plt>
   1756c:	mov	r2, #5
   17570:	ldr	r1, [pc, #96]	; 175d8 <__assert_fail@plt+0x5f9c>
   17574:	mov	r0, #0
   17578:	bl	11324 <dcgettext@plt>
   1757c:	mov	r1, r0
   17580:	ldr	r2, [pc, #84]	; 175dc <__assert_fail@plt+0x5fa0>
   17584:	mov	r0, #1
   17588:	bl	114e0 <__printf_chk@plt>
   1758c:	mov	r2, #5
   17590:	ldr	r1, [pc, #72]	; 175e0 <__assert_fail@plt+0x5fa4>
   17594:	mov	r0, #0
   17598:	bl	11324 <dcgettext@plt>
   1759c:	mov	r1, r0
   175a0:	ldr	r3, [pc, #60]	; 175e4 <__assert_fail@plt+0x5fa8>
   175a4:	mov	r0, #1
   175a8:	ldr	r2, [pc, #56]	; 175e8 <__assert_fail@plt+0x5fac>
   175ac:	bl	114e0 <__printf_chk@plt>
   175b0:	mov	r2, #5
   175b4:	ldr	r1, [pc, #48]	; 175ec <__assert_fail@plt+0x5fb0>
   175b8:	mov	r0, #0
   175bc:	bl	11324 <dcgettext@plt>
   175c0:	mov	r1, r0
   175c4:	ldr	r2, [pc, #36]	; 175f0 <__assert_fail@plt+0x5fb4>
   175c8:	mov	r0, #1
   175cc:	pop	{r4, lr}
   175d0:	b	114e0 <__printf_chk@plt>
   175d4:	andeq	sl, r2, r4, asr #3
   175d8:	ldrdeq	r9, [r1], -r4
   175dc:	andeq	r9, r1, r8, ror #19
   175e0:	strdeq	r9, [r1], -lr
   175e4:	muleq	r1, fp, r0
   175e8:	andeq	r9, r1, r3, asr #1
   175ec:	andeq	r9, r1, r2, lsl sl
   175f0:	andeq	r9, r1, r9, lsr sl
   175f4:	push	{r4, lr}
   175f8:	bl	179c0 <__assert_fail@plt+0x6384>
   175fc:	cmp	r0, #0
   17600:	popne	{r4, pc}
   17604:	bl	178ac <__assert_fail@plt+0x6270>
   17608:	push	{r4, lr}
   1760c:	bl	179c0 <__assert_fail@plt+0x6384>
   17610:	cmp	r0, #0
   17614:	popne	{r4, pc}
   17618:	bl	178ac <__assert_fail@plt+0x6270>
   1761c:	b	175f4 <__assert_fail@plt+0x5fb8>
   17620:	push	{r4, r5, r6, lr}
   17624:	mov	r5, r0
   17628:	mov	r4, r1
   1762c:	bl	179ec <__assert_fail@plt+0x63b0>
   17630:	cmp	r0, #0
   17634:	popne	{r4, r5, r6, pc}
   17638:	adds	r4, r4, #0
   1763c:	movne	r4, #1
   17640:	cmp	r5, #0
   17644:	moveq	r4, #1
   17648:	cmp	r4, #0
   1764c:	popeq	{r4, r5, r6, pc}
   17650:	bl	178ac <__assert_fail@plt+0x6270>
   17654:	push	{r4, lr}
   17658:	bl	1803c <__assert_fail@plt+0x6a00>
   1765c:	cmp	r0, #0
   17660:	popne	{r4, pc}
   17664:	bl	178ac <__assert_fail@plt+0x6270>
   17668:	push	{r4, r5, r6, lr}
   1766c:	mov	r6, r0
   17670:	mov	r5, r1
   17674:	mov	r4, r2
   17678:	bl	1815c <__assert_fail@plt+0x6b20>
   1767c:	cmp	r0, #0
   17680:	popne	{r4, r5, r6, pc}
   17684:	cmp	r6, #0
   17688:	beq	17698 <__assert_fail@plt+0x605c>
   1768c:	cmp	r5, #0
   17690:	cmpne	r4, #0
   17694:	popeq	{r4, r5, r6, pc}
   17698:	bl	178ac <__assert_fail@plt+0x6270>
   1769c:	b	17668 <__assert_fail@plt+0x602c>
   176a0:	push	{r4, lr}
   176a4:	bl	1804c <__assert_fail@plt+0x6a10>
   176a8:	cmp	r0, #0
   176ac:	popne	{r4, pc}
   176b0:	bl	178ac <__assert_fail@plt+0x6270>
   176b4:	mov	r2, r1
   176b8:	mov	r1, r0
   176bc:	mov	r0, #0
   176c0:	b	17668 <__assert_fail@plt+0x602c>
   176c4:	mov	r2, r1
   176c8:	mov	r1, r0
   176cc:	mov	r0, #0
   176d0:	b	176a0 <__assert_fail@plt+0x6064>
   176d4:	cmp	r0, #0
   176d8:	push	{r4, r5, r6, lr}
   176dc:	mov	r5, r1
   176e0:	ldr	r4, [r1]
   176e4:	bne	17710 <__assert_fail@plt+0x60d4>
   176e8:	cmp	r4, #0
   176ec:	bne	17700 <__assert_fail@plt+0x60c4>
   176f0:	mov	r4, #64	; 0x40
   176f4:	udiv	r4, r4, r2
   176f8:	cmp	r2, #64	; 0x40
   176fc:	addhi	r4, r4, #1
   17700:	mov	r1, r4
   17704:	bl	17668 <__assert_fail@plt+0x602c>
   17708:	str	r4, [r5]
   1770c:	pop	{r4, r5, r6, pc}
   17710:	lsr	r3, r4, #1
   17714:	add	r3, r3, #1
   17718:	adds	r4, r4, r3
   1771c:	bcc	17700 <__assert_fail@plt+0x60c4>
   17720:	bl	178ac <__assert_fail@plt+0x6270>
   17724:	mov	r2, #1
   17728:	b	176d4 <__assert_fail@plt+0x6098>
   1772c:	ldr	ip, [r1]
   17730:	push	{r4, r5, r6, r7, r8, lr}
   17734:	mov	r5, r1
   17738:	mvn	r8, r3
   1773c:	lsr	r8, r8, #31
   17740:	ldr	lr, [sp, #24]
   17744:	asr	r1, ip, #1
   17748:	adds	r4, ip, r1
   1774c:	mvnvs	r4, #-2147483648	; 0x80000000
   17750:	cmp	r3, r4
   17754:	movge	r1, #0
   17758:	andlt	r1, r8, #1
   1775c:	cmp	r1, #0
   17760:	movne	r4, r3
   17764:	smull	r6, r7, r4, lr
   17768:	cmp	r7, r6, asr #31
   1776c:	bne	17784 <__assert_fail@plt+0x6148>
   17770:	cmp	r6, #63	; 0x3f
   17774:	mov	r1, r6
   17778:	bgt	17794 <__assert_fail@plt+0x6158>
   1777c:	mov	r1, #64	; 0x40
   17780:	b	17788 <__assert_fail@plt+0x614c>
   17784:	mvn	r1, #-2147483648	; 0x80000000
   17788:	sdiv	r4, r1, lr
   1778c:	mls	r6, lr, r4, r1
   17790:	sub	r1, r1, r6
   17794:	cmp	r0, #0
   17798:	sub	r6, r4, ip
   1779c:	streq	r0, [r5]
   177a0:	cmp	r6, r2
   177a4:	bge	177d8 <__assert_fail@plt+0x619c>
   177a8:	adds	r4, ip, r2
   177ac:	bvs	177d4 <__assert_fail@plt+0x6198>
   177b0:	cmp	r4, r3
   177b4:	movle	r3, #0
   177b8:	andgt	r3, r8, #1
   177bc:	cmp	r3, #0
   177c0:	bne	177d4 <__assert_fail@plt+0x6198>
   177c4:	smull	r2, r3, r4, lr
   177c8:	cmp	r3, r2, asr #31
   177cc:	mov	r1, r2
   177d0:	beq	177d8 <__assert_fail@plt+0x619c>
   177d4:	bl	178ac <__assert_fail@plt+0x6270>
   177d8:	bl	17620 <__assert_fail@plt+0x5fe4>
   177dc:	str	r4, [r5]
   177e0:	pop	{r4, r5, r6, r7, r8, pc}
   177e4:	push	{r4, lr}
   177e8:	bl	1796c <__assert_fail@plt+0x6330>
   177ec:	cmp	r0, #0
   177f0:	popne	{r4, pc}
   177f4:	bl	178ac <__assert_fail@plt+0x6270>
   177f8:	mov	r1, #1
   177fc:	b	177e4 <__assert_fail@plt+0x61a8>
   17800:	push	{r4, lr}
   17804:	bl	1796c <__assert_fail@plt+0x6330>
   17808:	cmp	r0, #0
   1780c:	popne	{r4, pc}
   17810:	bl	178ac <__assert_fail@plt+0x6270>
   17814:	mov	r1, #1
   17818:	b	17800 <__assert_fail@plt+0x61c4>
   1781c:	push	{r4, r5, r6, lr}
   17820:	mov	r4, r1
   17824:	mov	r5, r0
   17828:	mov	r0, r1
   1782c:	bl	175f4 <__assert_fail@plt+0x5fb8>
   17830:	mov	r2, r4
   17834:	mov	r1, r5
   17838:	pop	{r4, r5, r6, lr}
   1783c:	b	112dc <memcpy@plt>
   17840:	push	{r4, r5, r6, lr}
   17844:	mov	r4, r1
   17848:	mov	r5, r0
   1784c:	mov	r0, r1
   17850:	bl	17608 <__assert_fail@plt+0x5fcc>
   17854:	mov	r2, r4
   17858:	mov	r1, r5
   1785c:	pop	{r4, r5, r6, lr}
   17860:	b	112dc <memcpy@plt>
   17864:	push	{r4, r5, r6, lr}
   17868:	mov	r5, r0
   1786c:	add	r0, r1, #1
   17870:	mov	r4, r1
   17874:	bl	17608 <__assert_fail@plt+0x5fcc>
   17878:	mov	r2, #0
   1787c:	mov	r1, r5
   17880:	strb	r2, [r0, r4]
   17884:	mov	r2, r4
   17888:	pop	{r4, r5, r6, lr}
   1788c:	b	112dc <memcpy@plt>
   17890:	push	{r4, lr}
   17894:	mov	r4, r0
   17898:	bl	1148c <strlen@plt>
   1789c:	add	r1, r0, #1
   178a0:	mov	r0, r4
   178a4:	pop	{r4, lr}
   178a8:	b	1781c <__assert_fail@plt+0x61e0>
   178ac:	ldr	r3, [pc, #44]	; 178e0 <__assert_fail@plt+0x62a4>
   178b0:	mov	r2, #5
   178b4:	mov	r0, #0
   178b8:	push	{r4, lr}
   178bc:	ldr	r1, [pc, #32]	; 178e4 <__assert_fail@plt+0x62a8>
   178c0:	ldr	r4, [r3]
   178c4:	bl	11324 <dcgettext@plt>
   178c8:	mov	r3, r0
   178cc:	ldr	r2, [pc, #20]	; 178e8 <__assert_fail@plt+0x62ac>
   178d0:	mov	r1, #0
   178d4:	mov	r0, r4
   178d8:	bl	113d8 <error@plt>
   178dc:	bl	11600 <abort@plt>
   178e0:	andeq	sl, r2, ip, ror #2
   178e4:	andeq	r9, r1, r5, lsl #21
   178e8:	ldrdeq	r9, [r1], -r5
   178ec:	push	{r4, lr}
   178f0:	orr	r1, r1, #512	; 0x200
   178f4:	bl	13994 <__assert_fail@plt+0x2358>
   178f8:	cmp	r0, #0
   178fc:	popne	{r4, pc}
   17900:	bl	114b0 <__errno_location@plt>
   17904:	ldr	r3, [r0]
   17908:	cmp	r3, #22
   1790c:	bne	17924 <__assert_fail@plt+0x62e8>
   17910:	ldr	r3, [pc, #16]	; 17928 <__assert_fail@plt+0x62ec>
   17914:	mov	r2, #41	; 0x29
   17918:	ldr	r1, [pc, #12]	; 1792c <__assert_fail@plt+0x62f0>
   1791c:	ldr	r0, [pc, #12]	; 17930 <__assert_fail@plt+0x62f4>
   17920:	bl	1163c <__assert_fail@plt>
   17924:	bl	178ac <__assert_fail@plt+0x6270>
   17928:	muleq	r1, r6, sl
   1792c:	andeq	r9, r1, r0, lsr #21
   17930:	andeq	r9, r1, fp, lsr #21
   17934:	ldr	r3, [r0, #48]	; 0x30
   17938:	and	r3, r3, #17
   1793c:	cmp	r3, #16
   17940:	beq	1795c <__assert_fail@plt+0x6320>
   17944:	cmp	r3, #17
   17948:	bne	17964 <__assert_fail@plt+0x6328>
   1794c:	ldr	r0, [r1, #48]	; 0x30
   17950:	adds	r0, r0, #0
   17954:	movne	r0, #1
   17958:	bx	lr
   1795c:	mov	r0, #1
   17960:	bx	lr
   17964:	mov	r0, #0
   17968:	bx	lr
   1796c:	cmp	r1, #0
   17970:	cmpne	r0, #0
   17974:	beq	179ac <__assert_fail@plt+0x6370>
   17978:	push	{r4, r5, r6, lr}
   1797c:	umull	r4, r5, r0, r1
   17980:	adds	r3, r5, #0
   17984:	movne	r3, #1
   17988:	cmp	r4, #0
   1798c:	blt	17998 <__assert_fail@plt+0x635c>
   17990:	cmp	r3, #0
   17994:	beq	179b8 <__assert_fail@plt+0x637c>
   17998:	bl	114b0 <__errno_location@plt>
   1799c:	mov	r3, #12
   179a0:	str	r3, [r0]
   179a4:	mov	r0, #0
   179a8:	pop	{r4, r5, r6, pc}
   179ac:	mov	r1, #1
   179b0:	mov	r0, r1
   179b4:	b	11264 <calloc@plt>
   179b8:	pop	{r4, r5, r6, lr}
   179bc:	b	179b4 <__assert_fail@plt+0x6378>
   179c0:	cmp	r0, #0
   179c4:	beq	179e4 <__assert_fail@plt+0x63a8>
   179c8:	bge	179e8 <__assert_fail@plt+0x63ac>
   179cc:	push	{r4, lr}
   179d0:	bl	114b0 <__errno_location@plt>
   179d4:	mov	r3, #12
   179d8:	str	r3, [r0]
   179dc:	mov	r0, #0
   179e0:	pop	{r4, pc}
   179e4:	mov	r0, #1
   179e8:	b	11408 <malloc@plt>
   179ec:	cmp	r0, #0
   179f0:	bne	179fc <__assert_fail@plt+0x63c0>
   179f4:	mov	r0, r1
   179f8:	b	179c0 <__assert_fail@plt+0x6384>
   179fc:	cmp	r1, #0
   17a00:	push	{r4, lr}
   17a04:	bne	17a14 <__assert_fail@plt+0x63d8>
   17a08:	bl	17f50 <__assert_fail@plt+0x6914>
   17a0c:	mov	r0, #0
   17a10:	pop	{r4, pc}
   17a14:	blt	17a20 <__assert_fail@plt+0x63e4>
   17a18:	pop	{r4, lr}
   17a1c:	b	1133c <realloc@plt>
   17a20:	bl	114b0 <__errno_location@plt>
   17a24:	mov	r3, #12
   17a28:	str	r3, [r0]
   17a2c:	b	17a0c <__assert_fail@plt+0x63d0>
   17a30:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   17a34:	mov	r4, r0
   17a38:	sub	sp, sp, #40	; 0x28
   17a3c:	ldrb	r3, [r2]
   17a40:	cmp	r3, #0
   17a44:	strbeq	r3, [r0]
   17a48:	beq	17ad0 <__assert_fail@plt+0x6494>
   17a4c:	ldr	r7, [pc, #208]	; 17b24 <__assert_fail@plt+0x64e8>
   17a50:	mov	sl, r1
   17a54:	mov	r5, r2
   17a58:	ldr	r6, [r7]
   17a5c:	mov	r8, r7
   17a60:	cmp	r6, #0
   17a64:	bne	17ac0 <__assert_fail@plt+0x6484>
   17a68:	ldr	r1, [pc, #184]	; 17b28 <__assert_fail@plt+0x64ec>
   17a6c:	ldr	r0, [pc, #184]	; 17b2c <__assert_fail@plt+0x64f0>
   17a70:	bl	113f0 <open64@plt>
   17a74:	subs	r9, r0, #0
   17a78:	mvnlt	r3, #0
   17a7c:	strlt	r3, [r7]
   17a80:	blt	17acc <__assert_fail@plt+0x6490>
   17a84:	ldr	r3, [pc, #164]	; 17b30 <__assert_fail@plt+0x64f4>
   17a88:	mov	r2, #32
   17a8c:	mov	r1, #1
   17a90:	add	r0, sp, #8
   17a94:	str	r9, [sp]
   17a98:	bl	114bc <__sprintf_chk@plt>
   17a9c:	mov	r1, r6
   17aa0:	add	r0, sp, #8
   17aa4:	bl	1151c <access@plt>
   17aa8:	cmp	r0, #0
   17aac:	mov	r0, r9
   17ab0:	mvnne	r3, #0
   17ab4:	moveq	r3, #1
   17ab8:	str	r3, [r7]
   17abc:	bl	1160c <close@plt>
   17ac0:	ldr	r3, [r8]
   17ac4:	cmp	r3, #0
   17ac8:	bge	17adc <__assert_fail@plt+0x64a0>
   17acc:	mov	r4, #0
   17ad0:	mov	r0, r4
   17ad4:	add	sp, sp, #40	; 0x28
   17ad8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   17adc:	mov	r0, r5
   17ae0:	bl	1148c <strlen@plt>
   17ae4:	add	r0, r0, #27
   17ae8:	cmp	r0, #4032	; 0xfc0
   17aec:	bls	17afc <__assert_fail@plt+0x64c0>
   17af0:	bl	179c0 <__assert_fail@plt+0x6384>
   17af4:	subs	r4, r0, #0
   17af8:	beq	17acc <__assert_fail@plt+0x6490>
   17afc:	ldr	r3, [pc, #48]	; 17b34 <__assert_fail@plt+0x64f8>
   17b00:	mvn	r2, #0
   17b04:	mov	r1, #1
   17b08:	mov	r0, r4
   17b0c:	str	sl, [sp]
   17b10:	bl	114bc <__sprintf_chk@plt>
   17b14:	add	r0, r4, r0
   17b18:	mov	r1, r5
   17b1c:	bl	113a8 <strcpy@plt>
   17b20:	b	17ad0 <__assert_fail@plt+0x6494>
   17b24:	andeq	sl, r2, r0, asr #6
   17b28:	andeq	r4, r8, r0, lsl #18
   17b2c:			; <UNDEFINED> instruction: 0x00019abb
   17b30:	andeq	r9, r1, r9, asr #21
   17b34:	andeq	r9, r1, r0, ror #21
   17b38:	push	{r4, r5, r6, lr}
   17b3c:	mov	r4, r0
   17b40:	bl	113b4 <__fpending@plt>
   17b44:	mov	r5, r0
   17b48:	mov	r0, r4
   17b4c:	bl	113c0 <ferror_unlocked@plt>
   17b50:	mov	r6, r0
   17b54:	mov	r0, r4
   17b58:	bl	17c74 <__assert_fail@plt+0x6638>
   17b5c:	cmp	r6, #0
   17b60:	mov	r4, r0
   17b64:	bne	17b90 <__assert_fail@plt+0x6554>
   17b68:	cmp	r0, #0
   17b6c:	beq	17b88 <__assert_fail@plt+0x654c>
   17b70:	cmp	r5, #0
   17b74:	bne	17ba0 <__assert_fail@plt+0x6564>
   17b78:	bl	114b0 <__errno_location@plt>
   17b7c:	ldr	r4, [r0]
   17b80:	subs	r4, r4, #9
   17b84:	mvnne	r4, #0
   17b88:	mov	r0, r4
   17b8c:	pop	{r4, r5, r6, pc}
   17b90:	cmp	r0, #0
   17b94:	bne	17ba0 <__assert_fail@plt+0x6564>
   17b98:	bl	114b0 <__errno_location@plt>
   17b9c:	str	r4, [r0]
   17ba0:	mvn	r4, #0
   17ba4:	b	17b88 <__assert_fail@plt+0x654c>
   17ba8:	mov	r3, #0
   17bac:	mov	r2, #0
   17bb0:	strd	r2, [r0, #16]
   17bb4:	ldr	r3, [pc, #4]	; 17bc0 <__assert_fail@plt+0x6584>
   17bb8:	str	r3, [r0, #24]
   17bbc:	bx	lr
   17bc0:	addseq	pc, r5, r6, lsl r6	; <UNPREDICTABLE>
   17bc4:	ldr	r3, [pc, #152]	; 17c64 <__assert_fail@plt+0x6628>
   17bc8:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   17bcc:	ldr	r2, [r0, #24]
   17bd0:	cmp	r2, r3
   17bd4:	beq	17bec <__assert_fail@plt+0x65b0>
   17bd8:	ldr	r3, [pc, #136]	; 17c68 <__assert_fail@plt+0x662c>
   17bdc:	mov	r2, #60	; 0x3c
   17be0:	ldr	r1, [pc, #132]	; 17c6c <__assert_fail@plt+0x6630>
   17be4:	ldr	r0, [pc, #132]	; 17c70 <__assert_fail@plt+0x6634>
   17be8:	bl	1163c <__assert_fail@plt>
   17bec:	ldrd	r6, [r0, #16]
   17bf0:	orrs	r3, r6, r7
   17bf4:	beq	17c28 <__assert_fail@plt+0x65ec>
   17bf8:	ldrd	r2, [r0]
   17bfc:	ldrd	r4, [r1, #96]	; 0x60
   17c00:	cmp	r5, r3
   17c04:	cmpeq	r4, r2
   17c08:	bne	17c28 <__assert_fail@plt+0x65ec>
   17c0c:	ldrd	r4, [r1]
   17c10:	ldrd	r2, [r0, #8]
   17c14:	cmp	r5, r3
   17c18:	cmpeq	r4, r2
   17c1c:	bne	17c28 <__assert_fail@plt+0x65ec>
   17c20:	mov	r0, #1
   17c24:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   17c28:	adds	r8, r6, #1
   17c2c:	adc	r9, r7, #0
   17c30:	and	r2, r6, r8
   17c34:	and	r3, r7, r9
   17c38:	orrs	r3, r2, r3
   17c3c:	strd	r8, [r0, #16]
   17c40:	bne	17c5c <__assert_fail@plt+0x6620>
   17c44:	orrs	r3, r8, r9
   17c48:	beq	17c20 <__assert_fail@plt+0x65e4>
   17c4c:	ldrd	r2, [r1]
   17c50:	strd	r2, [r0, #8]
   17c54:	ldrd	r2, [r1, #96]	; 0x60
   17c58:	strd	r2, [r0]
   17c5c:	mov	r0, #0
   17c60:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   17c64:	addseq	pc, r5, r6, lsl r6	; <UNPREDICTABLE>
   17c68:	strdeq	r9, [r1], -r2
   17c6c:	strdeq	r9, [r1], -lr
   17c70:	andeq	r9, r1, r0, lsl fp
   17c74:	push	{r0, r1, r2, r4, r5, lr}
   17c78:	mov	r4, r0
   17c7c:	bl	114ec <fileno@plt>
   17c80:	cmp	r0, #0
   17c84:	mov	r0, r4
   17c88:	bge	17c98 <__assert_fail@plt+0x665c>
   17c8c:	add	sp, sp, #12
   17c90:	pop	{r4, r5, lr}
   17c94:	b	11528 <fclose@plt>
   17c98:	bl	11420 <__freading@plt>
   17c9c:	cmp	r0, #0
   17ca0:	bne	17cdc <__assert_fail@plt+0x66a0>
   17ca4:	mov	r0, r4
   17ca8:	bl	17f00 <__assert_fail@plt+0x68c4>
   17cac:	cmp	r0, #0
   17cb0:	bne	17d10 <__assert_fail@plt+0x66d4>
   17cb4:	mov	r5, #0
   17cb8:	mov	r0, r4
   17cbc:	bl	11528 <fclose@plt>
   17cc0:	cmp	r5, #0
   17cc4:	beq	17cd4 <__assert_fail@plt+0x6698>
   17cc8:	bl	114b0 <__errno_location@plt>
   17ccc:	str	r5, [r0]
   17cd0:	mvn	r0, #0
   17cd4:	add	sp, sp, #12
   17cd8:	pop	{r4, r5, pc}
   17cdc:	mov	r0, r4
   17ce0:	bl	114ec <fileno@plt>
   17ce4:	mov	r3, #1
   17ce8:	mov	r2, #0
   17cec:	str	r3, [sp]
   17cf0:	mov	r3, #0
   17cf4:	bl	11390 <lseek64@plt>
   17cf8:	mvn	r3, #0
   17cfc:	mvn	r2, #0
   17d00:	cmp	r1, r3
   17d04:	cmpeq	r0, r2
   17d08:	bne	17ca4 <__assert_fail@plt+0x6668>
   17d0c:	b	17cb4 <__assert_fail@plt+0x6678>
   17d10:	bl	114b0 <__errno_location@plt>
   17d14:	ldr	r5, [r0]
   17d18:	b	17cb8 <__assert_fail@plt+0x667c>
   17d1c:	push	{r1, r2, r3}
   17d20:	push	{r0, r1, r2, r4, r5, r6, r7, r8, lr}
   17d24:	add	r2, sp, #40	; 0x28
   17d28:	ldr	r1, [sp, #36]	; 0x24
   17d2c:	str	r2, [sp, #4]
   17d30:	cmp	r1, #0
   17d34:	beq	17d84 <__assert_fail@plt+0x6748>
   17d38:	movw	r3, #1030	; 0x406
   17d3c:	mov	r5, r0
   17d40:	cmp	r1, r3
   17d44:	beq	17d90 <__assert_fail@plt+0x6754>
   17d48:	cmp	r1, #11
   17d4c:	beq	17d74 <__assert_fail@plt+0x6738>
   17d50:	bgt	17e84 <__assert_fail@plt+0x6848>
   17d54:	cmp	r1, #4
   17d58:	beq	17e9c <__assert_fail@plt+0x6860>
   17d5c:	bgt	17e7c <__assert_fail@plt+0x6840>
   17d60:	cmp	r1, #2
   17d64:	beq	17e9c <__assert_fail@plt+0x6860>
   17d68:	bgt	17d74 <__assert_fail@plt+0x6738>
   17d6c:	cmp	r1, #1
   17d70:	bne	17e9c <__assert_fail@plt+0x6860>
   17d74:	mov	r0, r5
   17d78:	bl	11540 <fcntl64@plt>
   17d7c:	mov	r4, r0
   17d80:	b	17dd8 <__assert_fail@plt+0x679c>
   17d84:	ldr	r2, [sp, #40]	; 0x28
   17d88:	bl	11540 <fcntl64@plt>
   17d8c:	b	17d7c <__assert_fail@plt+0x6740>
   17d90:	ldr	r6, [pc, #304]	; 17ec8 <__assert_fail@plt+0x688c>
   17d94:	add	r3, sp, #44	; 0x2c
   17d98:	str	r3, [sp, #4]
   17d9c:	ldr	r7, [r2]
   17da0:	ldr	r3, [r6]
   17da4:	mov	r8, r6
   17da8:	mov	r2, r7
   17dac:	cmp	r3, #0
   17db0:	blt	17e40 <__assert_fail@plt+0x6804>
   17db4:	bl	11540 <fcntl64@plt>
   17db8:	subs	r4, r0, #0
   17dbc:	bge	17dd0 <__assert_fail@plt+0x6794>
   17dc0:	bl	114b0 <__errno_location@plt>
   17dc4:	ldr	r3, [r0]
   17dc8:	cmp	r3, #22
   17dcc:	beq	17dec <__assert_fail@plt+0x67b0>
   17dd0:	mov	r3, #1
   17dd4:	str	r3, [r8]
   17dd8:	mov	r0, r4
   17ddc:	add	sp, sp, #12
   17de0:	pop	{r4, r5, r6, r7, r8, lr}
   17de4:	add	sp, sp, #12
   17de8:	bx	lr
   17dec:	mov	r2, r7
   17df0:	mov	r1, #0
   17df4:	mov	r0, r5
   17df8:	bl	11540 <fcntl64@plt>
   17dfc:	subs	r4, r0, #0
   17e00:	mvnge	r3, #0
   17e04:	strge	r3, [r6]
   17e08:	blt	17dd8 <__assert_fail@plt+0x679c>
   17e0c:	mov	r1, #1
   17e10:	mov	r0, r4
   17e14:	bl	11540 <fcntl64@plt>
   17e18:	subs	r2, r0, #0
   17e1c:	bge	17e60 <__assert_fail@plt+0x6824>
   17e20:	bl	114b0 <__errno_location@plt>
   17e24:	mov	r5, r0
   17e28:	mov	r0, r4
   17e2c:	ldr	r6, [r5]
   17e30:	mvn	r4, #0
   17e34:	bl	1160c <close@plt>
   17e38:	str	r6, [r5]
   17e3c:	b	17dd8 <__assert_fail@plt+0x679c>
   17e40:	mov	r1, #0
   17e44:	bl	11540 <fcntl64@plt>
   17e48:	subs	r4, r0, #0
   17e4c:	blt	17dd8 <__assert_fail@plt+0x679c>
   17e50:	ldr	r3, [r6]
   17e54:	cmn	r3, #1
   17e58:	bne	17dd8 <__assert_fail@plt+0x679c>
   17e5c:	b	17e0c <__assert_fail@plt+0x67d0>
   17e60:	orr	r2, r2, #1
   17e64:	mov	r1, #2
   17e68:	mov	r0, r4
   17e6c:	bl	11540 <fcntl64@plt>
   17e70:	cmn	r0, #1
   17e74:	bne	17dd8 <__assert_fail@plt+0x679c>
   17e78:	b	17e20 <__assert_fail@plt+0x67e4>
   17e7c:	cmp	r1, #9
   17e80:	b	17d70 <__assert_fail@plt+0x6734>
   17e84:	movw	r2, #1031	; 0x407
   17e88:	cmp	r1, r2
   17e8c:	bgt	17eac <__assert_fail@plt+0x6870>
   17e90:	cmp	r1, r3
   17e94:	movwlt	r3, #1025	; 0x401
   17e98:	blt	17ec0 <__assert_fail@plt+0x6884>
   17e9c:	ldr	r3, [sp, #4]
   17ea0:	mov	r0, r5
   17ea4:	ldr	r2, [r3]
   17ea8:	b	17d88 <__assert_fail@plt+0x674c>
   17eac:	movw	r3, #1033	; 0x409
   17eb0:	cmp	r1, r3
   17eb4:	beq	17e9c <__assert_fail@plt+0x6860>
   17eb8:	blt	17d74 <__assert_fail@plt+0x6738>
   17ebc:	movw	r3, #1034	; 0x40a
   17ec0:	cmp	r1, r3
   17ec4:	b	17d70 <__assert_fail@plt+0x6734>
   17ec8:	andeq	sl, r2, r4, asr #6
   17ecc:	push	{r1, r2, r3}
   17ed0:	push	{r0, r1, lr}
   17ed4:	ldr	r1, [sp, #12]
   17ed8:	ands	r2, r1, #64	; 0x40
   17edc:	ldrne	r2, [sp, #16]
   17ee0:	addne	r3, sp, #16
   17ee4:	strne	r3, [sp, #4]
   17ee8:	bl	113f0 <open64@plt>
   17eec:	bl	170b0 <__assert_fail@plt+0x5a74>
   17ef0:	add	sp, sp, #8
   17ef4:	pop	{lr}		; (ldr lr, [sp], #4)
   17ef8:	add	sp, sp, #12
   17efc:	bx	lr
   17f00:	push	{r0, r1, r4, lr}
   17f04:	subs	r4, r0, #0
   17f08:	bne	17f1c <__assert_fail@plt+0x68e0>
   17f0c:	mov	r0, r4
   17f10:	add	sp, sp, #8
   17f14:	pop	{r4, lr}
   17f18:	b	112a0 <fflush@plt>
   17f1c:	bl	11420 <__freading@plt>
   17f20:	cmp	r0, #0
   17f24:	beq	17f0c <__assert_fail@plt+0x68d0>
   17f28:	ldr	r3, [r4]
   17f2c:	tst	r3, #256	; 0x100
   17f30:	beq	17f0c <__assert_fail@plt+0x68d0>
   17f34:	mov	r3, #1
   17f38:	mov	r2, #0
   17f3c:	mov	r0, r4
   17f40:	str	r3, [sp]
   17f44:	mov	r3, #0
   17f48:	bl	17fa0 <__assert_fail@plt+0x6964>
   17f4c:	b	17f0c <__assert_fail@plt+0x68d0>
   17f50:	push	{r0, r1, r2, r4, r5, lr}
   17f54:	mov	r5, r0
   17f58:	bl	114b0 <__errno_location@plt>
   17f5c:	mov	r4, r0
   17f60:	mov	r0, r5
   17f64:	ldr	r3, [r4]
   17f68:	str	r3, [sp]
   17f6c:	str	r3, [sp, #4]
   17f70:	mov	r3, #0
   17f74:	str	r3, [r4]
   17f78:	bl	112c4 <free@plt>
   17f7c:	ldr	r3, [r4]
   17f80:	add	r2, sp, #8
   17f84:	clz	r3, r3
   17f88:	lsr	r3, r3, #5
   17f8c:	add	r3, r2, r3, lsl #2
   17f90:	ldr	r3, [r3, #-8]
   17f94:	str	r3, [r4]
   17f98:	add	sp, sp, #12
   17f9c:	pop	{r4, r5, pc}
   17fa0:	push	{r0, r1, r4, r5, r6, r7, r8, lr}
   17fa4:	mov	r4, r0
   17fa8:	ldmib	r0, {ip, lr}
   17fac:	ldr	r8, [sp, #32]
   17fb0:	cmp	lr, ip
   17fb4:	bne	18024 <__assert_fail@plt+0x69e8>
   17fb8:	ldr	ip, [r0, #16]
   17fbc:	ldr	lr, [r0, #20]
   17fc0:	cmp	lr, ip
   17fc4:	bne	18024 <__assert_fail@plt+0x69e8>
   17fc8:	ldr	r5, [r0, #36]	; 0x24
   17fcc:	cmp	r5, #0
   17fd0:	bne	18024 <__assert_fail@plt+0x69e8>
   17fd4:	mov	r6, r2
   17fd8:	mov	r7, r3
   17fdc:	bl	114ec <fileno@plt>
   17fe0:	mov	r2, r6
   17fe4:	mov	r3, r7
   17fe8:	str	r8, [sp]
   17fec:	bl	11390 <lseek64@plt>
   17ff0:	mvn	r3, #0
   17ff4:	mvn	r2, #0
   17ff8:	cmp	r1, r3
   17ffc:	cmpeq	r0, r2
   18000:	mvneq	r0, #0
   18004:	beq	1801c <__assert_fail@plt+0x69e0>
   18008:	ldr	r3, [r4]
   1800c:	strd	r0, [r4, #80]	; 0x50
   18010:	mov	r0, r5
   18014:	bic	r3, r3, #16
   18018:	str	r3, [r4]
   1801c:	add	sp, sp, #8
   18020:	pop	{r4, r5, r6, r7, r8, pc}
   18024:	mov	r0, r4
   18028:	str	r8, [sp, #32]
   1802c:	add	sp, sp, #8
   18030:	pop	{r4, r5, r6, r7, r8, lr}
   18034:	b	11534 <fseeko64@plt>
   18038:	b	179c0 <__assert_fail@plt+0x6384>
   1803c:	cmp	r1, #0
   18040:	orreq	r1, r1, #1
   18044:	b	179ec <__assert_fail@plt+0x63b0>
   18048:	b	1796c <__assert_fail@plt+0x6330>
   1804c:	cmp	r2, #0
   18050:	cmpne	r1, #0
   18054:	moveq	r2, #1
   18058:	moveq	r1, r2
   1805c:	b	1815c <__assert_fail@plt+0x6b20>
   18060:	push	{r4, lr}
   18064:	mov	r0, #14
   18068:	bl	11564 <nl_langinfo@plt>
   1806c:	cmp	r0, #0
   18070:	beq	18088 <__assert_fail@plt+0x6a4c>
   18074:	ldrb	r2, [r0]
   18078:	ldr	r3, [pc, #16]	; 18090 <__assert_fail@plt+0x6a54>
   1807c:	cmp	r2, #0
   18080:	moveq	r0, r3
   18084:	pop	{r4, pc}
   18088:	ldr	r0, [pc]	; 18090 <__assert_fail@plt+0x6a54>
   1808c:	pop	{r4, pc}
   18090:	andeq	r9, r1, r8, lsr #22
   18094:	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   18098:	subs	r5, r0, #0
   1809c:	mov	r7, r2
   180a0:	addeq	r5, sp, #4
   180a4:	mov	r6, r1
   180a8:	mov	r0, r5
   180ac:	bl	113cc <mbrtowc@plt>
   180b0:	cmp	r7, #0
   180b4:	cmnne	r0, #3
   180b8:	mov	r4, r0
   180bc:	bls	180d8 <__assert_fail@plt+0x6a9c>
   180c0:	mov	r0, #0
   180c4:	bl	184dc <__assert_fail@plt+0x6ea0>
   180c8:	cmp	r0, #0
   180cc:	ldrbeq	r3, [r6]
   180d0:	moveq	r4, #1
   180d4:	streq	r3, [r5]
   180d8:	mov	r0, r4
   180dc:	add	sp, sp, #12
   180e0:	pop	{r4, r5, r6, r7, pc}
   180e4:	ldr	r3, [pc, #44]	; 18118 <__assert_fail@plt+0x6adc>
   180e8:	mov	r5, r0
   180ec:	mov	r2, #5
   180f0:	push	{r4, lr}
   180f4:	mov	r0, #0
   180f8:	ldr	r1, [pc, #28]	; 1811c <__assert_fail@plt+0x6ae0>
   180fc:	ldr	r4, [r3]
   18100:	bl	11324 <dcgettext@plt>
   18104:	mov	r2, r0
   18108:	mov	r1, r5
   1810c:	mov	r0, r4
   18110:	bl	113d8 <error@plt>
   18114:	bl	11600 <abort@plt>
   18118:	andeq	sl, r2, ip, ror #2
   1811c:	andeq	r9, r1, lr, lsr #22
   18120:	ldr	r3, [pc, #44]	; 18154 <__assert_fail@plt+0x6b18>
   18124:	mov	r5, r0
   18128:	mov	r2, #5
   1812c:	push	{r4, lr}
   18130:	mov	r0, #0
   18134:	ldr	r1, [pc, #28]	; 18158 <__assert_fail@plt+0x6b1c>
   18138:	ldr	r4, [r3]
   1813c:	bl	11324 <dcgettext@plt>
   18140:	mov	r2, r0
   18144:	mov	r1, r5
   18148:	mov	r0, r4
   1814c:	bl	113d8 <error@plt>
   18150:	bl	11600 <abort@plt>
   18154:	andeq	sl, r2, ip, ror #2
   18158:	andeq	r9, r1, r9, asr fp
   1815c:	umull	r2, r3, r1, r2
   18160:	cmp	r3, #0
   18164:	bne	18170 <__assert_fail@plt+0x6b34>
   18168:	mov	r1, r2
   1816c:	b	179ec <__assert_fail@plt+0x63b0>
   18170:	push	{r4, lr}
   18174:	bl	114b0 <__errno_location@plt>
   18178:	mov	r3, #12
   1817c:	str	r3, [r0]
   18180:	mov	r0, #0
   18184:	pop	{r4, pc}
   18188:	push	{r4, r5, r6, lr}
   1818c:	mov	r4, #0
   18190:	mov	r5, r0
   18194:	mov	r1, #524288	; 0x80000
   18198:	str	r4, [r0, #4]
   1819c:	ldr	r0, [pc, #52]	; 181d8 <__assert_fail@plt+0x6b9c>
   181a0:	bl	17ecc <__assert_fail@plt+0x6890>
   181a4:	cmp	r0, r4
   181a8:	str	r0, [r5]
   181ac:	bge	181d0 <__assert_fail@plt+0x6b94>
   181b0:	mov	r1, r4
   181b4:	mov	r0, r4
   181b8:	bl	1145c <getcwd@plt>
   181bc:	str	r0, [r5, #4]
   181c0:	clz	r0, r0
   181c4:	lsr	r0, r0, #5
   181c8:	rsb	r0, r0, #0
   181cc:	pop	{r4, r5, r6, pc}
   181d0:	mov	r0, r4
   181d4:	pop	{r4, r5, r6, pc}
   181d8:	strdeq	r9, [r1], -r1
   181dc:	mov	r3, r0
   181e0:	ldr	r0, [r0]
   181e4:	cmp	r0, #0
   181e8:	blt	181f0 <__assert_fail@plt+0x6bb4>
   181ec:	b	11594 <fchdir@plt>
   181f0:	ldr	r0, [r3, #4]
   181f4:	b	18298 <__assert_fail@plt+0x6c5c>
   181f8:	push	{r4, lr}
   181fc:	mov	r4, r0
   18200:	ldr	r0, [r0]
   18204:	cmp	r0, #0
   18208:	blt	18210 <__assert_fail@plt+0x6bd4>
   1820c:	bl	1160c <close@plt>
   18210:	ldr	r0, [r4, #4]
   18214:	pop	{r4, lr}
   18218:	b	17f50 <__assert_fail@plt+0x6914>
   1821c:	mov	r2, #3
   18220:	mov	r1, #0
   18224:	b	17d1c <__assert_fail@plt+0x66e0>
   18228:	cmp	r0, #0
   1822c:	bxlt	lr
   18230:	push	{r4, lr}
   18234:	bl	1160c <close@plt>
   18238:	cmp	r0, #0
   1823c:	popeq	{r4, pc}
   18240:	ldr	r3, [pc, #12]	; 18254 <__assert_fail@plt+0x6c18>
   18244:	mov	r2, #64	; 0x40
   18248:	ldr	r1, [pc, #8]	; 18258 <__assert_fail@plt+0x6c1c>
   1824c:	ldr	r0, [pc, #8]	; 1825c <__assert_fail@plt+0x6c20>
   18250:	bl	1163c <__assert_fail@plt>
   18254:	andeq	r9, r1, r7, lsl #23
   18258:	muleq	r1, fp, fp
   1825c:	andeq	r9, r1, ip, lsr #23
   18260:	push	{r4, r5, r6, lr}
   18264:	mov	r2, #18688	; 0x4900
   18268:	mov	r4, r0
   1826c:	ldr	r0, [r0]
   18270:	bl	11498 <openat64@plt>
   18274:	subs	r5, r0, #0
   18278:	blt	18290 <__assert_fail@plt+0x6c54>
   1827c:	ldr	r0, [r4]
   18280:	bl	18228 <__assert_fail@plt+0x6bec>
   18284:	mov	r0, #0
   18288:	str	r5, [r4]
   1828c:	pop	{r4, r5, r6, pc}
   18290:	mvn	r0, #0
   18294:	pop	{r4, r5, r6, pc}
   18298:	push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   1829c:	mov	r5, r0
   182a0:	bl	11360 <chdir@plt>
   182a4:	subs	r4, r0, #0
   182a8:	beq	18498 <__assert_fail@plt+0x6e5c>
   182ac:	bl	114b0 <__errno_location@plt>
   182b0:	ldr	r3, [r0]
   182b4:	mov	r7, r0
   182b8:	cmp	r3, #36	; 0x24
   182bc:	bne	18498 <__assert_fail@plt+0x6e5c>
   182c0:	mov	r0, r5
   182c4:	bl	1148c <strlen@plt>
   182c8:	mvn	r3, #99	; 0x63
   182cc:	subs	r6, r0, #0
   182d0:	str	r3, [sp, #4]
   182d4:	bne	182ec <__assert_fail@plt+0x6cb0>
   182d8:	ldr	r3, [pc, #476]	; 184bc <__assert_fail@plt+0x6e80>
   182dc:	mov	r2, #126	; 0x7e
   182e0:	ldr	r1, [pc, #472]	; 184c0 <__assert_fail@plt+0x6e84>
   182e4:	ldr	r0, [pc, #472]	; 184c4 <__assert_fail@plt+0x6e88>
   182e8:	bl	1163c <__assert_fail@plt>
   182ec:	cmp	r6, #4096	; 0x1000
   182f0:	bcs	18308 <__assert_fail@plt+0x6ccc>
   182f4:	ldr	r3, [pc, #448]	; 184bc <__assert_fail@plt+0x6e80>
   182f8:	mov	r2, #127	; 0x7f
   182fc:	ldr	r1, [pc, #444]	; 184c0 <__assert_fail@plt+0x6e84>
   18300:	ldr	r0, [pc, #448]	; 184c8 <__assert_fail@plt+0x6e8c>
   18304:	b	182e8 <__assert_fail@plt+0x6cac>
   18308:	ldr	r1, [pc, #444]	; 184cc <__assert_fail@plt+0x6e90>
   1830c:	mov	r0, r5
   18310:	bl	11630 <strspn@plt>
   18314:	cmp	r0, #2
   18318:	mov	r4, r0
   1831c:	bne	18398 <__assert_fail@plt+0x6d5c>
   18320:	sub	r2, r6, #3
   18324:	mov	r1, #47	; 0x2f
   18328:	add	r0, r5, #3
   1832c:	bl	11504 <memchr@plt>
   18330:	subs	r4, r0, #0
   18334:	bne	18340 <__assert_fail@plt+0x6d04>
   18338:	mvn	r4, #0
   1833c:	b	18498 <__assert_fail@plt+0x6e5c>
   18340:	mov	r3, #0
   18344:	mov	r1, r5
   18348:	add	r0, sp, #4
   1834c:	strb	r3, [r4]
   18350:	bl	18260 <__assert_fail@plt+0x6c24>
   18354:	mov	r3, #47	; 0x2f
   18358:	cmp	r0, #0
   1835c:	strb	r3, [r4]
   18360:	bne	183bc <__assert_fail@plt+0x6d80>
   18364:	add	r4, r4, #1
   18368:	ldr	r1, [pc, #348]	; 184cc <__assert_fail@plt+0x6e90>
   1836c:	mov	r0, r4
   18370:	bl	11630 <strspn@plt>
   18374:	add	r4, r4, r0
   18378:	ldrb	r3, [r4]
   1837c:	cmp	r3, #47	; 0x2f
   18380:	bne	183d0 <__assert_fail@plt+0x6d94>
   18384:	ldr	r3, [pc, #304]	; 184bc <__assert_fail@plt+0x6e80>
   18388:	mov	r2, #162	; 0xa2
   1838c:	ldr	r1, [pc, #300]	; 184c0 <__assert_fail@plt+0x6e84>
   18390:	ldr	r0, [pc, #312]	; 184d0 <__assert_fail@plt+0x6e94>
   18394:	b	182e8 <__assert_fail@plt+0x6cac>
   18398:	cmp	r0, #0
   1839c:	moveq	r4, r5
   183a0:	beq	18378 <__assert_fail@plt+0x6d3c>
   183a4:	ldr	r1, [pc, #288]	; 184cc <__assert_fail@plt+0x6e90>
   183a8:	add	r0, sp, #4
   183ac:	bl	18260 <__assert_fail@plt+0x6c24>
   183b0:	cmp	r0, #0
   183b4:	addeq	r4, r5, r4
   183b8:	beq	18378 <__assert_fail@plt+0x6d3c>
   183bc:	ldr	r4, [r7]
   183c0:	ldr	r0, [sp, #4]
   183c4:	bl	18228 <__assert_fail@plt+0x6bec>
   183c8:	str	r4, [r7]
   183cc:	b	18338 <__assert_fail@plt+0x6cfc>
   183d0:	add	r6, r5, r6
   183d4:	cmp	r4, r6
   183d8:	movls	r8, #47	; 0x2f
   183dc:	ldrls	r9, [pc, #232]	; 184cc <__assert_fail@plt+0x6e90>
   183e0:	bls	1846c <__assert_fail@plt+0x6e30>
   183e4:	ldr	r3, [pc, #208]	; 184bc <__assert_fail@plt+0x6e80>
   183e8:	mov	r2, #163	; 0xa3
   183ec:	ldr	r1, [pc, #204]	; 184c0 <__assert_fail@plt+0x6e84>
   183f0:	ldr	r0, [pc, #220]	; 184d4 <__assert_fail@plt+0x6e98>
   183f4:	b	182e8 <__assert_fail@plt+0x6cac>
   183f8:	mov	r2, #4096	; 0x1000
   183fc:	mov	r1, #47	; 0x2f
   18400:	mov	r0, r4
   18404:	bl	114a4 <memrchr@plt>
   18408:	subs	r5, r0, #0
   1840c:	moveq	r3, #36	; 0x24
   18410:	streq	r3, [r7]
   18414:	beq	18338 <__assert_fail@plt+0x6cfc>
   18418:	mov	r3, #0
   1841c:	strb	r3, [r5]
   18420:	sub	r3, r5, r4
   18424:	cmp	r3, #4096	; 0x1000
   18428:	blt	18440 <__assert_fail@plt+0x6e04>
   1842c:	ldr	r3, [pc, #136]	; 184bc <__assert_fail@plt+0x6e80>
   18430:	mov	r2, #179	; 0xb3
   18434:	ldr	r1, [pc, #132]	; 184c0 <__assert_fail@plt+0x6e84>
   18438:	ldr	r0, [pc, #152]	; 184d8 <__assert_fail@plt+0x6e9c>
   1843c:	b	182e8 <__assert_fail@plt+0x6cac>
   18440:	mov	r1, r4
   18444:	add	r0, sp, #4
   18448:	bl	18260 <__assert_fail@plt+0x6c24>
   1844c:	cmp	r0, #0
   18450:	strb	r8, [r5]
   18454:	bne	183bc <__assert_fail@plt+0x6d80>
   18458:	add	r4, r5, #1
   1845c:	mov	r1, r9
   18460:	mov	r0, r4
   18464:	bl	11630 <strspn@plt>
   18468:	add	r4, r4, r0
   1846c:	sub	r3, r6, r4
   18470:	cmp	r3, #4096	; 0x1000
   18474:	bge	183f8 <__assert_fail@plt+0x6dbc>
   18478:	cmp	r4, r6
   1847c:	bcc	184a4 <__assert_fail@plt+0x6e68>
   18480:	ldr	r0, [sp, #4]
   18484:	bl	11594 <fchdir@plt>
   18488:	subs	r4, r0, #0
   1848c:	bne	183bc <__assert_fail@plt+0x6d80>
   18490:	ldr	r0, [sp, #4]
   18494:	bl	18228 <__assert_fail@plt+0x6bec>
   18498:	mov	r0, r4
   1849c:	add	sp, sp, #12
   184a0:	pop	{r4, r5, r6, r7, r8, r9, pc}
   184a4:	mov	r1, r4
   184a8:	add	r0, sp, #4
   184ac:	bl	18260 <__assert_fail@plt+0x6c24>
   184b0:	cmp	r0, #0
   184b4:	beq	18480 <__assert_fail@plt+0x6e44>
   184b8:	b	183bc <__assert_fail@plt+0x6d80>
   184bc:	muleq	r1, r0, fp
   184c0:	muleq	r1, fp, fp
   184c4:			; <UNDEFINED> instruction: 0x00019bb9
   184c8:	andeq	r9, r1, r1, asr #23
   184cc:	strdeq	r9, [r1], -r0
   184d0:	andeq	r9, r1, sp, asr #23
   184d4:	ldrdeq	r9, [r1], -r9	; <UNPREDICTABLE>
   184d8:	andeq	r9, r1, r8, ror #23
   184dc:	push	{lr}		; (str lr, [sp, #-4]!)
   184e0:	sub	sp, sp, #268	; 0x10c
   184e4:	movw	r2, #257	; 0x101
   184e8:	add	r1, sp, #4
   184ec:	bl	18538 <__assert_fail@plt+0x6efc>
   184f0:	cmp	r0, #0
   184f4:	movne	r0, #0
   184f8:	bne	18528 <__assert_fail@plt+0x6eec>
   184fc:	ldr	r1, [pc, #44]	; 18530 <__assert_fail@plt+0x6ef4>
   18500:	add	r0, sp, #4
   18504:	bl	11294 <strcmp@plt>
   18508:	cmp	r0, #0
   1850c:	beq	18524 <__assert_fail@plt+0x6ee8>
   18510:	ldr	r1, [pc, #28]	; 18534 <__assert_fail@plt+0x6ef8>
   18514:	add	r0, sp, #4
   18518:	bl	11294 <strcmp@plt>
   1851c:	adds	r0, r0, #0
   18520:	movne	r0, #1
   18524:	and	r0, r0, #1
   18528:	add	sp, sp, #268	; 0x10c
   1852c:	pop	{pc}		; (ldr pc, [sp], #4)
   18530:	strdeq	r9, [r1], -fp
   18534:	strdeq	r9, [r1], -sp
   18538:	push	{r4, r5, r6, lr}
   1853c:	mov	r5, r1
   18540:	mov	r1, #0
   18544:	mov	r4, r2
   18548:	bl	1154c <setlocale@plt>
   1854c:	subs	r6, r0, #0
   18550:	bne	18564 <__assert_fail@plt+0x6f28>
   18554:	cmp	r4, #0
   18558:	mov	r0, #22
   1855c:	strbne	r6, [r5]
   18560:	pop	{r4, r5, r6, pc}
   18564:	bl	1148c <strlen@plt>
   18568:	cmp	r4, r0
   1856c:	bls	18588 <__assert_fail@plt+0x6f4c>
   18570:	add	r2, r0, #1
   18574:	mov	r1, r6
   18578:	mov	r0, r5
   1857c:	bl	112dc <memcpy@plt>
   18580:	mov	r0, #0
   18584:	pop	{r4, r5, r6, pc}
   18588:	cmp	r4, #0
   1858c:	beq	185ac <__assert_fail@plt+0x6f70>
   18590:	sub	r4, r4, #1
   18594:	mov	r1, r6
   18598:	mov	r2, r4
   1859c:	mov	r0, r5
   185a0:	bl	112dc <memcpy@plt>
   185a4:	mov	r3, #0
   185a8:	strb	r3, [r5, r4]
   185ac:	mov	r0, #34	; 0x22
   185b0:	pop	{r4, r5, r6, pc}
   185b4:	mov	r1, #0
   185b8:	b	1154c <setlocale@plt>
   185bc:	cmp	r3, #0
   185c0:	cmpeq	r2, #0
   185c4:	bne	185dc <__assert_fail@plt+0x6fa0>
   185c8:	cmp	r1, #0
   185cc:	cmpeq	r0, #0
   185d0:	mvnne	r1, #0
   185d4:	mvnne	r0, #0
   185d8:	b	185f8 <__assert_fail@plt+0x6fbc>
   185dc:	sub	sp, sp, #8
   185e0:	push	{sp, lr}
   185e4:	bl	18608 <__assert_fail@plt+0x6fcc>
   185e8:	ldr	lr, [sp, #4]
   185ec:	add	sp, sp, #8
   185f0:	pop	{r2, r3}
   185f4:	bx	lr
   185f8:	push	{r1, lr}
   185fc:	mov	r0, #8
   18600:	bl	1127c <raise@plt>
   18604:	pop	{r1, pc}
   18608:	cmp	r1, r3
   1860c:	cmpeq	r0, r2
   18610:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18614:	mov	r4, r0
   18618:	movcc	r0, #0
   1861c:	mov	r5, r1
   18620:	ldr	lr, [sp, #36]	; 0x24
   18624:	movcc	r1, r0
   18628:	bcc	18724 <__assert_fail@plt+0x70e8>
   1862c:	cmp	r3, #0
   18630:	clzeq	ip, r2
   18634:	clzne	ip, r3
   18638:	addeq	ip, ip, #32
   1863c:	cmp	r5, #0
   18640:	clzeq	r1, r4
   18644:	addeq	r1, r1, #32
   18648:	clzne	r1, r5
   1864c:	sub	ip, ip, r1
   18650:	sub	sl, ip, #32
   18654:	lsl	r9, r3, ip
   18658:	rsb	fp, ip, #32
   1865c:	orr	r9, r9, r2, lsl sl
   18660:	orr	r9, r9, r2, lsr fp
   18664:	lsl	r8, r2, ip
   18668:	cmp	r5, r9
   1866c:	cmpeq	r4, r8
   18670:	movcc	r0, #0
   18674:	movcc	r1, r0
   18678:	bcc	18694 <__assert_fail@plt+0x7058>
   1867c:	mov	r0, #1
   18680:	subs	r4, r4, r8
   18684:	lsl	r1, r0, sl
   18688:	orr	r1, r1, r0, lsr fp
   1868c:	lsl	r0, r0, ip
   18690:	sbc	r5, r5, r9
   18694:	cmp	ip, #0
   18698:	beq	18724 <__assert_fail@plt+0x70e8>
   1869c:	lsr	r6, r8, #1
   186a0:	orr	r6, r6, r9, lsl #31
   186a4:	lsr	r7, r9, #1
   186a8:	mov	r2, ip
   186ac:	b	186d0 <__assert_fail@plt+0x7094>
   186b0:	subs	r3, r4, r6
   186b4:	sbc	r8, r5, r7
   186b8:	adds	r3, r3, r3
   186bc:	adc	r8, r8, r8
   186c0:	adds	r4, r3, #1
   186c4:	adc	r5, r8, #0
   186c8:	subs	r2, r2, #1
   186cc:	beq	186ec <__assert_fail@plt+0x70b0>
   186d0:	cmp	r5, r7
   186d4:	cmpeq	r4, r6
   186d8:	bcs	186b0 <__assert_fail@plt+0x7074>
   186dc:	adds	r4, r4, r4
   186e0:	adc	r5, r5, r5
   186e4:	subs	r2, r2, #1
   186e8:	bne	186d0 <__assert_fail@plt+0x7094>
   186ec:	lsr	r3, r4, ip
   186f0:	orr	r3, r3, r5, lsl fp
   186f4:	lsr	r2, r5, ip
   186f8:	orr	r3, r3, r5, lsr sl
   186fc:	adds	r0, r0, r4
   18700:	mov	r4, r3
   18704:	lsl	r3, r2, ip
   18708:	orr	r3, r3, r4, lsl sl
   1870c:	lsl	ip, r4, ip
   18710:	orr	r3, r3, r4, lsr fp
   18714:	adc	r1, r1, r5
   18718:	subs	r0, r0, ip
   1871c:	mov	r5, r2
   18720:	sbc	r1, r1, r3
   18724:	cmp	lr, #0
   18728:	strdne	r4, [lr]
   1872c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18730:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   18734:	mov	r7, r0
   18738:	ldr	r6, [pc, #72]	; 18788 <__assert_fail@plt+0x714c>
   1873c:	ldr	r5, [pc, #72]	; 1878c <__assert_fail@plt+0x7150>
   18740:	add	r6, pc, r6
   18744:	add	r5, pc, r5
   18748:	sub	r6, r6, r5
   1874c:	mov	r8, r1
   18750:	mov	r9, r2
   18754:	bl	11238 <fstatfs64@plt-0x20>
   18758:	asrs	r6, r6, #2
   1875c:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   18760:	mov	r4, #0
   18764:	add	r4, r4, #1
   18768:	ldr	r3, [r5], #4
   1876c:	mov	r2, r9
   18770:	mov	r1, r8
   18774:	mov	r0, r7
   18778:	blx	r3
   1877c:	cmp	r6, r4
   18780:	bne	18764 <__assert_fail@plt+0x7128>
   18784:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   18788:	andeq	r1, r1, r4, asr #15
   1878c:			; <UNDEFINED> instruction: 0x000117bc
   18790:	bx	lr
   18794:	ldr	r3, [pc, #12]	; 187a8 <__assert_fail@plt+0x716c>
   18798:	mov	r1, #0
   1879c:	add	r3, pc, r3
   187a0:	ldr	r2, [r3]
   187a4:	b	114c8 <__cxa_atexit@plt>
   187a8:	andeq	r1, r1, r0, asr #19
   187ac:	mov	r2, r1
   187b0:	mov	r1, r0
   187b4:	mov	r0, #3
   187b8:	b	115dc <__xstat64@plt>
   187bc:	mov	r2, r1
   187c0:	mov	r1, r0
   187c4:	mov	r0, #3
   187c8:	b	11384 <__fxstat64@plt>
   187cc:	mov	r2, r1
   187d0:	mov	r1, r0
   187d4:	mov	r0, #3
   187d8:	b	11618 <__lxstat64@plt>
   187dc:	push	{lr}		; (str lr, [sp, #-4]!)
   187e0:	sub	sp, sp, #12
   187e4:	str	r3, [sp]
   187e8:	mov	r3, r2
   187ec:	mov	r2, r1
   187f0:	mov	r1, r0
   187f4:	mov	r0, #3
   187f8:	bl	1136c <__fxstatat64@plt>
   187fc:	add	sp, sp, #12
   18800:	pop	{pc}		; (ldr pc, [sp], #4)

Disassembly of section .fini:

00018804 <.fini>:
   18804:	push	{r3, lr}
   18808:	pop	{r3, pc}
