
../repos/coreutils/src/tsort:     file format elf32-littlearm


Disassembly of section .init:

00010c20 <.init>:
   10c20:	push	{r3, lr}
   10c24:	bl	10ee0 <__assert_fail@plt+0x48>
   10c28:	pop	{r3, pc}

Disassembly of section .plt:

00010c2c <calloc@plt-0x14>:
   10c2c:	push	{lr}		; (str lr, [sp, #-4]!)
   10c30:	ldr	lr, [pc, #4]	; 10c3c <calloc@plt-0x4>
   10c34:	add	lr, pc, lr
   10c38:	ldr	pc, [lr, #8]!
   10c3c:	andeq	r8, r1, r4, asr #7

00010c40 <calloc@plt>:
   10c40:	add	ip, pc, #0, 12
   10c44:	add	ip, ip, #24, 20	; 0x18000
   10c48:	ldr	pc, [ip, #964]!	; 0x3c4

00010c4c <fputs_unlocked@plt>:
   10c4c:	add	ip, pc, #0, 12
   10c50:	add	ip, ip, #24, 20	; 0x18000
   10c54:	ldr	pc, [ip, #956]!	; 0x3bc

00010c58 <strcmp@plt>:
   10c58:	add	ip, pc, #0, 12
   10c5c:	add	ip, ip, #24, 20	; 0x18000
   10c60:	ldr	pc, [ip, #948]!	; 0x3b4

00010c64 <posix_fadvise64@plt>:
   10c64:	add	ip, pc, #0, 12
   10c68:	add	ip, ip, #24, 20	; 0x18000
   10c6c:	ldr	pc, [ip, #940]!	; 0x3ac

00010c70 <printf@plt>:
   10c70:	add	ip, pc, #0, 12
   10c74:	add	ip, ip, #24, 20	; 0x18000
   10c78:	ldr	pc, [ip, #932]!	; 0x3a4

00010c7c <fflush@plt>:
   10c7c:	add	ip, pc, #0, 12
   10c80:	add	ip, ip, #24, 20	; 0x18000
   10c84:	ldr	pc, [ip, #924]!	; 0x39c

00010c88 <free@plt>:
   10c88:	add	ip, pc, #0, 12
   10c8c:	add	ip, ip, #24, 20	; 0x18000
   10c90:	ldr	pc, [ip, #916]!	; 0x394

00010c94 <_exit@plt>:
   10c94:	add	ip, pc, #0, 12
   10c98:	add	ip, ip, #24, 20	; 0x18000
   10c9c:	ldr	pc, [ip, #908]!	; 0x38c

00010ca0 <memcpy@plt>:
   10ca0:	add	ip, pc, #0, 12
   10ca4:	add	ip, ip, #24, 20	; 0x18000
   10ca8:	ldr	pc, [ip, #900]!	; 0x384

00010cac <mbsinit@plt>:
   10cac:	add	ip, pc, #0, 12
   10cb0:	add	ip, ip, #24, 20	; 0x18000
   10cb4:	ldr	pc, [ip, #892]!	; 0x37c

00010cb8 <memcmp@plt>:
   10cb8:	add	ip, pc, #0, 12
   10cbc:	add	ip, ip, #24, 20	; 0x18000
   10cc0:	ldr	pc, [ip, #884]!	; 0x374

00010cc4 <fputc_unlocked@plt>:
   10cc4:	add	ip, pc, #0, 12
   10cc8:	add	ip, ip, #24, 20	; 0x18000
   10ccc:	ldr	pc, [ip, #876]!	; 0x36c

00010cd0 <getc_unlocked@plt>:
   10cd0:	add	ip, pc, #0, 12
   10cd4:	add	ip, ip, #24, 20	; 0x18000
   10cd8:	ldr	pc, [ip, #868]!	; 0x364

00010cdc <dup2@plt>:
   10cdc:	add	ip, pc, #0, 12
   10ce0:	add	ip, ip, #24, 20	; 0x18000
   10ce4:	ldr	pc, [ip, #860]!	; 0x35c

00010ce8 <realloc@plt>:
   10ce8:	add	ip, pc, #0, 12
   10cec:	add	ip, ip, #24, 20	; 0x18000
   10cf0:	ldr	pc, [ip, #852]!	; 0x354

00010cf4 <textdomain@plt>:
   10cf4:	add	ip, pc, #0, 12
   10cf8:	add	ip, ip, #24, 20	; 0x18000
   10cfc:	ldr	pc, [ip, #844]!	; 0x34c

00010d00 <iswprint@plt>:
   10d00:	add	ip, pc, #0, 12
   10d04:	add	ip, ip, #24, 20	; 0x18000
   10d08:	ldr	pc, [ip, #836]!	; 0x344

00010d0c <fwrite@plt>:
   10d0c:	add	ip, pc, #0, 12
   10d10:	add	ip, ip, #24, 20	; 0x18000
   10d14:	ldr	pc, [ip, #828]!	; 0x33c

00010d18 <lseek64@plt>:
   10d18:	add	ip, pc, #0, 12
   10d1c:	add	ip, ip, #24, 20	; 0x18000
   10d20:	ldr	pc, [ip, #820]!	; 0x334

00010d24 <__ctype_get_mb_cur_max@plt>:
   10d24:	add	ip, pc, #0, 12
   10d28:	add	ip, ip, #24, 20	; 0x18000
   10d2c:	ldr	pc, [ip, #812]!	; 0x32c

00010d30 <__fpending@plt>:
   10d30:	add	ip, pc, #0, 12
   10d34:	add	ip, ip, #24, 20	; 0x18000
   10d38:	ldr	pc, [ip, #804]!	; 0x324

00010d3c <ferror_unlocked@plt>:
   10d3c:	add	ip, pc, #0, 12
   10d40:	add	ip, ip, #24, 20	; 0x18000
   10d44:	ldr	pc, [ip, #796]!	; 0x31c

00010d48 <mbrtowc@plt>:
   10d48:	add	ip, pc, #0, 12
   10d4c:	add	ip, ip, #24, 20	; 0x18000
   10d50:	ldr	pc, [ip, #788]!	; 0x314

00010d54 <error@plt>:
   10d54:	add	ip, pc, #0, 12
   10d58:	add	ip, ip, #24, 20	; 0x18000
   10d5c:	ldr	pc, [ip, #780]!	; 0x30c

00010d60 <open64@plt>:
   10d60:	add	ip, pc, #0, 12
   10d64:	add	ip, ip, #24, 20	; 0x18000
   10d68:	ldr	pc, [ip, #772]!	; 0x304

00010d6c <puts@plt>:
   10d6c:	add	ip, pc, #0, 12
   10d70:	add	ip, ip, #24, 20	; 0x18000
   10d74:	ldr	pc, [ip, #764]!	; 0x2fc

00010d78 <malloc@plt>:
   10d78:	add	ip, pc, #0, 12
   10d7c:	add	ip, ip, #24, 20	; 0x18000
   10d80:	ldr	pc, [ip, #756]!	; 0x2f4

00010d84 <__libc_start_main@plt>:
   10d84:	add	ip, pc, #0, 12
   10d88:	add	ip, ip, #24, 20	; 0x18000
   10d8c:	ldr	pc, [ip, #748]!	; 0x2ec

00010d90 <__freading@plt>:
   10d90:	add	ip, pc, #0, 12
   10d94:	add	ip, ip, #24, 20	; 0x18000
   10d98:	ldr	pc, [ip, #740]!	; 0x2e4

00010d9c <__gmon_start__@plt>:
   10d9c:	add	ip, pc, #0, 12
   10da0:	add	ip, ip, #24, 20	; 0x18000
   10da4:	ldr	pc, [ip, #732]!	; 0x2dc

00010da8 <freopen64@plt>:
   10da8:	add	ip, pc, #0, 12
   10dac:	add	ip, ip, #24, 20	; 0x18000
   10db0:	ldr	pc, [ip, #724]!	; 0x2d4

00010db4 <getopt_long@plt>:
   10db4:	add	ip, pc, #0, 12
   10db8:	add	ip, ip, #24, 20	; 0x18000
   10dbc:	ldr	pc, [ip, #716]!	; 0x2cc

00010dc0 <__ctype_b_loc@plt>:
   10dc0:	add	ip, pc, #0, 12
   10dc4:	add	ip, ip, #24, 20	; 0x18000
   10dc8:	ldr	pc, [ip, #708]!	; 0x2c4

00010dcc <exit@plt>:
   10dcc:	add	ip, pc, #0, 12
   10dd0:	add	ip, ip, #24, 20	; 0x18000
   10dd4:	ldr	pc, [ip, #700]!	; 0x2bc

00010dd8 <gettext@plt>:
   10dd8:	add	ip, pc, #0, 12
   10ddc:	add	ip, ip, #24, 20	; 0x18000
   10de0:	ldr	pc, [ip, #692]!	; 0x2b4

00010de4 <strlen@plt>:
   10de4:	add	ip, pc, #0, 12
   10de8:	add	ip, ip, #24, 20	; 0x18000
   10dec:	ldr	pc, [ip, #684]!	; 0x2ac

00010df0 <fprintf@plt>:
   10df0:	add	ip, pc, #0, 12
   10df4:	add	ip, ip, #24, 20	; 0x18000
   10df8:	ldr	pc, [ip, #676]!	; 0x2a4

00010dfc <__errno_location@plt>:
   10dfc:	add	ip, pc, #0, 12
   10e00:	add	ip, ip, #24, 20	; 0x18000
   10e04:	ldr	pc, [ip, #668]!	; 0x29c

00010e08 <__cxa_atexit@plt>:
   10e08:	add	ip, pc, #0, 12
   10e0c:	add	ip, ip, #24, 20	; 0x18000
   10e10:	ldr	pc, [ip, #660]!	; 0x294

00010e14 <memset@plt>:
   10e14:	add	ip, pc, #0, 12
   10e18:	add	ip, ip, #24, 20	; 0x18000
   10e1c:	ldr	pc, [ip, #652]!	; 0x28c

00010e20 <fileno@plt>:
   10e20:	add	ip, pc, #0, 12
   10e24:	add	ip, ip, #24, 20	; 0x18000
   10e28:	ldr	pc, [ip, #644]!	; 0x284

00010e2c <fclose@plt>:
   10e2c:	add	ip, pc, #0, 12
   10e30:	add	ip, ip, #24, 20	; 0x18000
   10e34:	ldr	pc, [ip, #636]!	; 0x27c

00010e38 <fseeko64@plt>:
   10e38:	add	ip, pc, #0, 12
   10e3c:	add	ip, ip, #24, 20	; 0x18000
   10e40:	ldr	pc, [ip, #628]!	; 0x274

00010e44 <setlocale@plt>:
   10e44:	add	ip, pc, #0, 12
   10e48:	add	ip, ip, #24, 20	; 0x18000
   10e4c:	ldr	pc, [ip, #620]!	; 0x26c

00010e50 <strrchr@plt>:
   10e50:	add	ip, pc, #0, 12
   10e54:	add	ip, ip, #24, 20	; 0x18000
   10e58:	ldr	pc, [ip, #612]!	; 0x264

00010e5c <nl_langinfo@plt>:
   10e5c:	add	ip, pc, #0, 12
   10e60:	add	ip, ip, #24, 20	; 0x18000
   10e64:	ldr	pc, [ip, #604]!	; 0x25c

00010e68 <bindtextdomain@plt>:
   10e68:	add	ip, pc, #0, 12
   10e6c:	add	ip, ip, #24, 20	; 0x18000
   10e70:	ldr	pc, [ip, #596]!	; 0x254

00010e74 <strncmp@plt>:
   10e74:	add	ip, pc, #0, 12
   10e78:	add	ip, ip, #24, 20	; 0x18000
   10e7c:	ldr	pc, [ip, #588]!	; 0x24c

00010e80 <abort@plt>:
   10e80:	add	ip, pc, #0, 12
   10e84:	add	ip, ip, #24, 20	; 0x18000
   10e88:	ldr	pc, [ip, #580]!	; 0x244

00010e8c <close@plt>:
   10e8c:	add	ip, pc, #0, 12
   10e90:	add	ip, ip, #24, 20	; 0x18000
   10e94:	ldr	pc, [ip, #572]!	; 0x23c

00010e98 <__assert_fail@plt>:
   10e98:	add	ip, pc, #0, 12
   10e9c:	add	ip, ip, #24, 20	; 0x18000
   10ea0:	ldr	pc, [ip, #564]!	; 0x234

Disassembly of section .text:

00010ea4 <.text>:
   10ea4:	mov	fp, #0
   10ea8:	mov	lr, #0
   10eac:	pop	{r1}		; (ldr r1, [sp], #4)
   10eb0:	mov	r2, sp
   10eb4:	push	{r2}		; (str r2, [sp, #-4]!)
   10eb8:	push	{r0}		; (str r0, [sp, #-4]!)
   10ebc:	ldr	ip, [pc, #16]	; 10ed4 <__assert_fail@plt+0x3c>
   10ec0:	push	{ip}		; (str ip, [sp, #-4]!)
   10ec4:	ldr	r0, [pc, #12]	; 10ed8 <__assert_fail@plt+0x40>
   10ec8:	ldr	r3, [pc, #12]	; 10edc <__assert_fail@plt+0x44>
   10ecc:	bl	10d84 <__libc_start_main@plt>
   10ed0:	bl	10e80 <abort@plt>
   10ed4:	andeq	r7, r1, r4, asr #23
   10ed8:	andeq	r2, r1, r4, ror #2
   10edc:	andeq	r7, r1, r4, ror #22
   10ee0:	ldr	r3, [pc, #20]	; 10efc <__assert_fail@plt+0x64>
   10ee4:	ldr	r2, [pc, #20]	; 10f00 <__assert_fail@plt+0x68>
   10ee8:	add	r3, pc, r3
   10eec:	ldr	r2, [r3, r2]
   10ef0:	cmp	r2, #0
   10ef4:	bxeq	lr
   10ef8:	b	10d9c <__gmon_start__@plt>
   10efc:	andeq	r8, r1, r0, lsl r1
   10f00:	ldrdeq	r0, [r0], -r8
   10f04:	ldr	r0, [pc, #24]	; 10f24 <__assert_fail@plt+0x8c>
   10f08:	ldr	r3, [pc, #24]	; 10f28 <__assert_fail@plt+0x90>
   10f0c:	cmp	r3, r0
   10f10:	bxeq	lr
   10f14:	ldr	r3, [pc, #16]	; 10f2c <__assert_fail@plt+0x94>
   10f18:	cmp	r3, #0
   10f1c:	bxeq	lr
   10f20:	bx	r3
   10f24:	andeq	r9, r2, ip, lsr #2
   10f28:	andeq	r9, r2, ip, lsr #2
   10f2c:	andeq	r0, r0, r0
   10f30:	ldr	r0, [pc, #36]	; 10f5c <__assert_fail@plt+0xc4>
   10f34:	ldr	r1, [pc, #36]	; 10f60 <__assert_fail@plt+0xc8>
   10f38:	sub	r1, r1, r0
   10f3c:	asr	r1, r1, #2
   10f40:	add	r1, r1, r1, lsr #31
   10f44:	asrs	r1, r1, #1
   10f48:	bxeq	lr
   10f4c:	ldr	r3, [pc, #16]	; 10f64 <__assert_fail@plt+0xcc>
   10f50:	cmp	r3, #0
   10f54:	bxeq	lr
   10f58:	bx	r3
   10f5c:	andeq	r9, r2, ip, lsr #2
   10f60:	andeq	r9, r2, ip, lsr #2
   10f64:	andeq	r0, r0, r0
   10f68:	push	{r4, lr}
   10f6c:	ldr	r4, [pc, #24]	; 10f8c <__assert_fail@plt+0xf4>
   10f70:	ldrb	r3, [r4]
   10f74:	cmp	r3, #0
   10f78:	popne	{r4, pc}
   10f7c:	bl	10f04 <__assert_fail@plt+0x6c>
   10f80:	mov	r3, #1
   10f84:	strb	r3, [r4]
   10f88:	pop	{r4, pc}
   10f8c:	andeq	r9, r2, r4, asr r1
   10f90:	b	10f30 <__assert_fail@plt+0x98>
   10f94:	str	fp, [sp, #-8]!
   10f98:	str	lr, [sp, #4]
   10f9c:	add	fp, sp, #4
   10fa0:	movw	r0, #31724	; 0x7bec
   10fa4:	movt	r0, #1
   10fa8:	bl	10dd8 <gettext@plt>
   10fac:	mov	r2, r0
   10fb0:	movw	r3, #37196	; 0x914c
   10fb4:	movt	r3, #2
   10fb8:	ldr	r3, [r3]
   10fbc:	mov	r1, r3
   10fc0:	mov	r0, r2
   10fc4:	bl	10c4c <fputs_unlocked@plt>
   10fc8:	nop	{0}
   10fcc:	sub	sp, fp, #4
   10fd0:	ldr	fp, [sp]
   10fd4:	add	sp, sp, #4
   10fd8:	pop	{pc}		; (ldr pc, [sp], #4)
   10fdc:	str	fp, [sp, #-8]!
   10fe0:	str	lr, [sp, #4]
   10fe4:	add	fp, sp, #4
   10fe8:	sub	sp, sp, #80	; 0x50
   10fec:	str	r0, [fp, #-80]	; 0xffffffb0
   10ff0:	movw	r2, #32152	; 0x7d98
   10ff4:	movt	r2, #1
   10ff8:	sub	r3, fp, #72	; 0x48
   10ffc:	ldrd	r0, [r2]
   11000:	strd	r0, [r3]
   11004:	ldrd	r0, [r2, #8]
   11008:	strd	r0, [r3, #8]
   1100c:	ldrd	r0, [r2, #16]
   11010:	strd	r0, [r3, #16]
   11014:	ldrd	r0, [r2, #24]
   11018:	strd	r0, [r3, #24]
   1101c:	ldrd	r0, [r2, #32]
   11020:	strd	r0, [r3, #32]
   11024:	ldrd	r0, [r2, #40]	; 0x28
   11028:	strd	r0, [r3, #40]	; 0x28
   1102c:	ldrd	r0, [r2, #48]	; 0x30
   11030:	strd	r0, [r3, #48]	; 0x30
   11034:	ldr	r3, [fp, #-80]	; 0xffffffb0
   11038:	str	r3, [fp, #-8]
   1103c:	sub	r3, fp, #72	; 0x48
   11040:	str	r3, [fp, #-12]
   11044:	b	11054 <__assert_fail@plt+0x1bc>
   11048:	ldr	r3, [fp, #-12]
   1104c:	add	r3, r3, #8
   11050:	str	r3, [fp, #-12]
   11054:	ldr	r3, [fp, #-12]
   11058:	ldr	r3, [r3]
   1105c:	cmp	r3, #0
   11060:	beq	11084 <__assert_fail@plt+0x1ec>
   11064:	ldr	r3, [fp, #-12]
   11068:	ldr	r3, [r3]
   1106c:	mov	r1, r3
   11070:	ldr	r0, [fp, #-80]	; 0xffffffb0
   11074:	bl	10c58 <strcmp@plt>
   11078:	mov	r3, r0
   1107c:	cmp	r3, #0
   11080:	bne	11048 <__assert_fail@plt+0x1b0>
   11084:	ldr	r3, [fp, #-12]
   11088:	ldr	r3, [r3, #4]
   1108c:	cmp	r3, #0
   11090:	beq	110a0 <__assert_fail@plt+0x208>
   11094:	ldr	r3, [fp, #-12]
   11098:	ldr	r3, [r3, #4]
   1109c:	str	r3, [fp, #-8]
   110a0:	movw	r0, #31780	; 0x7c24
   110a4:	movt	r0, #1
   110a8:	bl	10dd8 <gettext@plt>
   110ac:	mov	r3, r0
   110b0:	movw	r2, #31804	; 0x7c3c
   110b4:	movt	r2, #1
   110b8:	movw	r1, #31844	; 0x7c64
   110bc:	movt	r1, #1
   110c0:	mov	r0, r3
   110c4:	bl	10c70 <printf@plt>
   110c8:	mov	r1, #0
   110cc:	mov	r0, #5
   110d0:	bl	10e44 <setlocale@plt>
   110d4:	str	r0, [fp, #-16]
   110d8:	ldr	r3, [fp, #-16]
   110dc:	cmp	r3, #0
   110e0:	beq	1112c <__assert_fail@plt+0x294>
   110e4:	mov	r2, #3
   110e8:	movw	r1, #31860	; 0x7c74
   110ec:	movt	r1, #1
   110f0:	ldr	r0, [fp, #-16]
   110f4:	bl	10e74 <strncmp@plt>
   110f8:	mov	r3, r0
   110fc:	cmp	r3, #0
   11100:	beq	1112c <__assert_fail@plt+0x294>
   11104:	movw	r0, #31864	; 0x7c78
   11108:	movt	r0, #1
   1110c:	bl	10dd8 <gettext@plt>
   11110:	mov	r2, r0
   11114:	movw	r3, #37196	; 0x914c
   11118:	movt	r3, #2
   1111c:	ldr	r3, [r3]
   11120:	mov	r1, r3
   11124:	mov	r0, r2
   11128:	bl	10c4c <fputs_unlocked@plt>
   1112c:	movw	r0, #31936	; 0x7cc0
   11130:	movt	r0, #1
   11134:	bl	10dd8 <gettext@plt>
   11138:	mov	r3, r0
   1113c:	ldr	r2, [fp, #-80]	; 0xffffffb0
   11140:	movw	r1, #31804	; 0x7c3c
   11144:	movt	r1, #1
   11148:	mov	r0, r3
   1114c:	bl	10c70 <printf@plt>
   11150:	movw	r0, #31964	; 0x7cdc
   11154:	movt	r0, #1
   11158:	bl	10dd8 <gettext@plt>
   1115c:	ldr	r2, [fp, #-8]
   11160:	ldr	r3, [fp, #-80]	; 0xffffffb0
   11164:	cmp	r2, r3
   11168:	bne	11178 <__assert_fail@plt+0x2e0>
   1116c:	movw	r3, #32016	; 0x7d10
   11170:	movt	r3, #1
   11174:	b	11180 <__assert_fail@plt+0x2e8>
   11178:	movw	r3, #32028	; 0x7d1c
   1117c:	movt	r3, #1
   11180:	mov	r2, r3
   11184:	ldr	r1, [fp, #-8]
   11188:	bl	10c70 <printf@plt>
   1118c:	nop	{0}
   11190:	sub	sp, fp, #4
   11194:	ldr	fp, [sp]
   11198:	add	sp, sp, #4
   1119c:	pop	{pc}		; (ldr pc, [sp], #4)
   111a0:	str	r4, [sp, #-12]!
   111a4:	str	fp, [sp, #4]
   111a8:	str	lr, [sp, #8]
   111ac:	add	fp, sp, #8
   111b0:	sub	sp, sp, #12
   111b4:	str	r0, [fp, #-16]
   111b8:	ldr	r3, [fp, #-16]
   111bc:	cmp	r3, #0
   111c0:	beq	111fc <__assert_fail@plt+0x364>
   111c4:	movw	r3, #37184	; 0x9140
   111c8:	movt	r3, #2
   111cc:	ldr	r4, [r3]
   111d0:	movw	r0, #32208	; 0x7dd0
   111d4:	movt	r0, #1
   111d8:	bl	10dd8 <gettext@plt>
   111dc:	mov	r1, r0
   111e0:	movw	r3, #37232	; 0x9170
   111e4:	movt	r3, #2
   111e8:	ldr	r3, [r3]
   111ec:	mov	r2, r3
   111f0:	mov	r0, r4
   111f4:	bl	10df0 <fprintf@plt>
   111f8:	b	112ac <__assert_fail@plt+0x414>
   111fc:	movw	r0, #32248	; 0x7df8
   11200:	movt	r0, #1
   11204:	bl	10dd8 <gettext@plt>
   11208:	mov	r2, r0
   1120c:	movw	r3, #37232	; 0x9170
   11210:	movt	r3, #2
   11214:	ldr	r3, [r3]
   11218:	mov	r1, r3
   1121c:	mov	r0, r2
   11220:	bl	10c70 <printf@plt>
   11224:	bl	10f94 <__assert_fail@plt+0xfc>
   11228:	movw	r0, #32348	; 0x7e5c
   1122c:	movt	r0, #1
   11230:	bl	10dd8 <gettext@plt>
   11234:	mov	r2, r0
   11238:	movw	r3, #37196	; 0x914c
   1123c:	movt	r3, #2
   11240:	ldr	r3, [r3]
   11244:	mov	r1, r3
   11248:	mov	r0, r2
   1124c:	bl	10c4c <fputs_unlocked@plt>
   11250:	movw	r0, #32352	; 0x7e60
   11254:	movt	r0, #1
   11258:	bl	10dd8 <gettext@plt>
   1125c:	mov	r2, r0
   11260:	movw	r3, #37196	; 0x914c
   11264:	movt	r3, #2
   11268:	ldr	r3, [r3]
   1126c:	mov	r1, r3
   11270:	mov	r0, r2
   11274:	bl	10c4c <fputs_unlocked@plt>
   11278:	movw	r0, #32400	; 0x7e90
   1127c:	movt	r0, #1
   11280:	bl	10dd8 <gettext@plt>
   11284:	mov	r2, r0
   11288:	movw	r3, #37196	; 0x914c
   1128c:	movt	r3, #2
   11290:	ldr	r3, [r3]
   11294:	mov	r1, r3
   11298:	mov	r0, r2
   1129c:	bl	10c4c <fputs_unlocked@plt>
   112a0:	movw	r0, #32456	; 0x7ec8
   112a4:	movt	r0, #1
   112a8:	bl	10fdc <__assert_fail@plt+0x144>
   112ac:	ldr	r0, [fp, #-16]
   112b0:	bl	10dcc <exit@plt>
   112b4:	str	fp, [sp, #-8]!
   112b8:	str	lr, [sp, #4]
   112bc:	add	fp, sp, #4
   112c0:	sub	sp, sp, #16
   112c4:	str	r0, [fp, #-16]
   112c8:	mov	r0, #28
   112cc:	bl	16a80 <__assert_fail@plt+0x5be8>
   112d0:	mov	r3, r0
   112d4:	str	r3, [fp, #-8]
   112d8:	ldr	r3, [fp, #-16]
   112dc:	cmp	r3, #0
   112e0:	beq	112fc <__assert_fail@plt+0x464>
   112e4:	ldr	r0, [fp, #-16]
   112e8:	bl	16c8c <__assert_fail@plt+0x5df4>
   112ec:	mov	r3, r0
   112f0:	mov	r2, r3
   112f4:	ldr	r3, [fp, #-8]
   112f8:	str	r2, [r3]
   112fc:	ldr	r3, [fp, #-8]
   11300:	mov	r0, r3
   11304:	sub	sp, fp, #4
   11308:	ldr	fp, [sp]
   1130c:	add	sp, sp, #4
   11310:	pop	{pc}		; (ldr pc, [sp], #4)
   11314:	str	fp, [sp, #-8]!
   11318:	str	lr, [sp, #4]
   1131c:	add	fp, sp, #4
   11320:	sub	sp, sp, #32
   11324:	str	r0, [fp, #-32]	; 0xffffffe0
   11328:	str	r1, [fp, #-36]	; 0xffffffdc
   1132c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   11330:	cmp	r3, #0
   11334:	bne	11358 <__assert_fail@plt+0x4c0>
   11338:	movw	r3, #32768	; 0x8000
   1133c:	movt	r3, #1
   11340:	mov	r2, #126	; 0x7e
   11344:	movw	r1, #32464	; 0x7ed0
   11348:	movt	r1, #1
   1134c:	movw	r0, #32476	; 0x7edc
   11350:	movt	r0, #1
   11354:	bl	10e98 <__assert_fail@plt>
   11358:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1135c:	ldr	r3, [r3, #8]
   11360:	cmp	r3, #0
   11364:	bne	11388 <__assert_fail@plt+0x4f0>
   11368:	ldr	r0, [fp, #-36]	; 0xffffffdc
   1136c:	bl	112b4 <__assert_fail@plt+0x41c>
   11370:	mov	r2, r0
   11374:	ldr	r3, [fp, #-32]	; 0xffffffe0
   11378:	str	r2, [r3, #8]
   1137c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   11380:	ldr	r3, [r3, #8]
   11384:	b	1187c <__assert_fail@plt+0x9e4>
   11388:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1138c:	str	r3, [fp, #-24]	; 0xffffffe8
   11390:	ldr	r3, [fp, #-32]	; 0xffffffe0
   11394:	ldr	r3, [r3, #8]
   11398:	str	r3, [fp, #-8]
   1139c:	ldr	r3, [fp, #-8]
   113a0:	str	r3, [fp, #-20]	; 0xffffffec
   113a4:	ldr	r3, [fp, #-36]	; 0xffffffdc
   113a8:	cmp	r3, #0
   113ac:	beq	113cc <__assert_fail@plt+0x534>
   113b0:	ldr	r3, [fp, #-8]
   113b4:	cmp	r3, #0
   113b8:	beq	113cc <__assert_fail@plt+0x534>
   113bc:	ldr	r3, [fp, #-8]
   113c0:	ldr	r3, [r3]
   113c4:	cmp	r3, #0
   113c8:	bne	113ec <__assert_fail@plt+0x554>
   113cc:	movw	r3, #32768	; 0x8000
   113d0:	movt	r3, #1
   113d4:	mov	r2, #140	; 0x8c
   113d8:	movw	r1, #32464	; 0x7ed0
   113dc:	movt	r1, #1
   113e0:	movw	r0, #32484	; 0x7ee4
   113e4:	movt	r0, #1
   113e8:	bl	10e98 <__assert_fail@plt>
   113ec:	ldr	r3, [fp, #-8]
   113f0:	ldr	r3, [r3]
   113f4:	mov	r1, r3
   113f8:	ldr	r0, [fp, #-36]	; 0xffffffdc
   113fc:	bl	10c58 <strcmp@plt>
   11400:	str	r0, [fp, #-28]	; 0xffffffe4
   11404:	ldr	r3, [fp, #-28]	; 0xffffffe4
   11408:	cmp	r3, #0
   1140c:	bne	11418 <__assert_fail@plt+0x580>
   11410:	ldr	r3, [fp, #-8]
   11414:	b	1187c <__assert_fail@plt+0x9e4>
   11418:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1141c:	cmp	r3, #0
   11420:	bge	11434 <__assert_fail@plt+0x59c>
   11424:	ldr	r3, [fp, #-8]
   11428:	ldr	r3, [r3, #4]
   1142c:	str	r3, [fp, #-12]
   11430:	b	11440 <__assert_fail@plt+0x5a8>
   11434:	ldr	r3, [fp, #-8]
   11438:	ldr	r3, [r3, #8]
   1143c:	str	r3, [fp, #-12]
   11440:	ldr	r3, [fp, #-12]
   11444:	cmp	r3, #0
   11448:	bne	11850 <__assert_fail@plt+0x9b8>
   1144c:	ldr	r0, [fp, #-36]	; 0xffffffdc
   11450:	bl	112b4 <__assert_fail@plt+0x41c>
   11454:	str	r0, [fp, #-12]
   11458:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1145c:	cmp	r3, #0
   11460:	bge	11474 <__assert_fail@plt+0x5dc>
   11464:	ldr	r3, [fp, #-8]
   11468:	ldr	r2, [fp, #-12]
   1146c:	str	r2, [r3, #4]
   11470:	b	11480 <__assert_fail@plt+0x5e8>
   11474:	ldr	r3, [fp, #-8]
   11478:	ldr	r2, [fp, #-12]
   1147c:	str	r2, [r3, #8]
   11480:	ldr	r3, [fp, #-36]	; 0xffffffdc
   11484:	cmp	r3, #0
   11488:	beq	114c8 <__assert_fail@plt+0x630>
   1148c:	ldr	r3, [fp, #-20]	; 0xffffffec
   11490:	cmp	r3, #0
   11494:	beq	114c8 <__assert_fail@plt+0x630>
   11498:	ldr	r3, [fp, #-20]	; 0xffffffec
   1149c:	ldr	r3, [r3]
   114a0:	cmp	r3, #0
   114a4:	beq	114c8 <__assert_fail@plt+0x630>
   114a8:	ldr	r3, [fp, #-20]	; 0xffffffec
   114ac:	ldr	r3, [r3]
   114b0:	mov	r1, r3
   114b4:	ldr	r0, [fp, #-36]	; 0xffffffdc
   114b8:	bl	10c58 <strcmp@plt>
   114bc:	mov	r3, r0
   114c0:	cmp	r3, #0
   114c4:	bne	114e8 <__assert_fail@plt+0x650>
   114c8:	movw	r3, #32768	; 0x8000
   114cc:	movt	r3, #1
   114d0:	mov	r2, #163	; 0xa3
   114d4:	movw	r1, #32464	; 0x7ed0
   114d8:	movt	r1, #1
   114dc:	movw	r0, #32504	; 0x7ef8
   114e0:	movt	r0, #1
   114e4:	bl	10e98 <__assert_fail@plt>
   114e8:	ldr	r3, [fp, #-20]	; 0xffffffec
   114ec:	ldr	r3, [r3]
   114f0:	mov	r1, r3
   114f4:	ldr	r0, [fp, #-36]	; 0xffffffdc
   114f8:	bl	10c58 <strcmp@plt>
   114fc:	mov	r3, r0
   11500:	cmp	r3, #0
   11504:	bge	11528 <__assert_fail@plt+0x690>
   11508:	ldr	r3, [fp, #-20]	; 0xffffffec
   1150c:	ldr	r3, [r3, #4]
   11510:	str	r3, [fp, #-8]
   11514:	ldr	r3, [fp, #-8]
   11518:	str	r3, [fp, #-16]
   1151c:	mvn	r3, #0
   11520:	str	r3, [fp, #-28]	; 0xffffffe4
   11524:	b	11604 <__assert_fail@plt+0x76c>
   11528:	ldr	r3, [fp, #-20]	; 0xffffffec
   1152c:	ldr	r3, [r3, #8]
   11530:	str	r3, [fp, #-8]
   11534:	ldr	r3, [fp, #-8]
   11538:	str	r3, [fp, #-16]
   1153c:	mov	r3, #1
   11540:	str	r3, [fp, #-28]	; 0xffffffe4
   11544:	b	11604 <__assert_fail@plt+0x76c>
   11548:	ldr	r3, [fp, #-36]	; 0xffffffdc
   1154c:	cmp	r3, #0
   11550:	beq	11590 <__assert_fail@plt+0x6f8>
   11554:	ldr	r3, [fp, #-8]
   11558:	cmp	r3, #0
   1155c:	beq	11590 <__assert_fail@plt+0x6f8>
   11560:	ldr	r3, [fp, #-8]
   11564:	ldr	r3, [r3]
   11568:	cmp	r3, #0
   1156c:	beq	11590 <__assert_fail@plt+0x6f8>
   11570:	ldr	r3, [fp, #-8]
   11574:	ldr	r3, [r3]
   11578:	mov	r1, r3
   1157c:	ldr	r0, [fp, #-36]	; 0xffffffdc
   11580:	bl	10c58 <strcmp@plt>
   11584:	mov	r3, r0
   11588:	cmp	r3, #0
   1158c:	bne	115b0 <__assert_fail@plt+0x718>
   11590:	movw	r3, #32768	; 0x8000
   11594:	movt	r3, #1
   11598:	mov	r2, #177	; 0xb1
   1159c:	movw	r1, #32464	; 0x7ed0
   115a0:	movt	r1, #1
   115a4:	movw	r0, #32548	; 0x7f24
   115a8:	movt	r0, #1
   115ac:	bl	10e98 <__assert_fail@plt>
   115b0:	ldr	r3, [fp, #-8]
   115b4:	ldr	r3, [r3]
   115b8:	mov	r1, r3
   115bc:	ldr	r0, [fp, #-36]	; 0xffffffdc
   115c0:	bl	10c58 <strcmp@plt>
   115c4:	mov	r3, r0
   115c8:	cmp	r3, #0
   115cc:	bge	115ec <__assert_fail@plt+0x754>
   115d0:	ldr	r3, [fp, #-8]
   115d4:	mvn	r2, #0
   115d8:	strb	r2, [r3, #12]
   115dc:	ldr	r3, [fp, #-8]
   115e0:	ldr	r3, [r3, #4]
   115e4:	str	r3, [fp, #-8]
   115e8:	b	11604 <__assert_fail@plt+0x76c>
   115ec:	ldr	r3, [fp, #-8]
   115f0:	mov	r2, #1
   115f4:	strb	r2, [r3, #12]
   115f8:	ldr	r3, [fp, #-8]
   115fc:	ldr	r3, [r3, #8]
   11600:	str	r3, [fp, #-8]
   11604:	ldr	r2, [fp, #-8]
   11608:	ldr	r3, [fp, #-12]
   1160c:	cmp	r2, r3
   11610:	bne	11548 <__assert_fail@plt+0x6b0>
   11614:	ldr	r3, [fp, #-20]	; 0xffffffec
   11618:	ldrsb	r3, [r3, #12]
   1161c:	cmp	r3, #0
   11620:	beq	11640 <__assert_fail@plt+0x7a8>
   11624:	ldr	r3, [fp, #-20]	; 0xffffffec
   11628:	ldrsb	r3, [r3, #12]
   1162c:	mov	r2, r3
   11630:	ldr	r3, [fp, #-28]	; 0xffffffe4
   11634:	rsb	r3, r3, #0
   11638:	cmp	r2, r3
   1163c:	bne	11670 <__assert_fail@plt+0x7d8>
   11640:	ldr	r3, [fp, #-20]	; 0xffffffec
   11644:	ldrsb	r3, [r3, #12]
   11648:	uxtb	r2, r3
   1164c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   11650:	uxtb	r3, r3
   11654:	add	r3, r2, r3
   11658:	uxtb	r3, r3
   1165c:	sxtb	r2, r3
   11660:	ldr	r3, [fp, #-20]	; 0xffffffec
   11664:	strb	r2, [r3, #12]
   11668:	ldr	r3, [fp, #-12]
   1166c:	b	1187c <__assert_fail@plt+0x9e4>
   11670:	ldr	r3, [fp, #-16]
   11674:	ldrsb	r3, [r3, #12]
   11678:	mov	r2, r3
   1167c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   11680:	cmp	r3, r2
   11684:	bne	116f8 <__assert_fail@plt+0x860>
   11688:	ldr	r3, [fp, #-16]
   1168c:	str	r3, [fp, #-8]
   11690:	ldr	r3, [fp, #-28]	; 0xffffffe4
   11694:	cmp	r3, #0
   11698:	bge	116bc <__assert_fail@plt+0x824>
   1169c:	ldr	r3, [fp, #-16]
   116a0:	ldr	r2, [r3, #8]
   116a4:	ldr	r3, [fp, #-20]	; 0xffffffec
   116a8:	str	r2, [r3, #4]
   116ac:	ldr	r3, [fp, #-16]
   116b0:	ldr	r2, [fp, #-20]	; 0xffffffec
   116b4:	str	r2, [r3, #8]
   116b8:	b	116d8 <__assert_fail@plt+0x840>
   116bc:	ldr	r3, [fp, #-16]
   116c0:	ldr	r2, [r3, #4]
   116c4:	ldr	r3, [fp, #-20]	; 0xffffffec
   116c8:	str	r2, [r3, #8]
   116cc:	ldr	r3, [fp, #-16]
   116d0:	ldr	r2, [fp, #-20]	; 0xffffffec
   116d4:	str	r2, [r3, #4]
   116d8:	ldr	r3, [fp, #-16]
   116dc:	mov	r2, #0
   116e0:	strb	r2, [r3, #12]
   116e4:	ldr	r3, [fp, #-16]
   116e8:	ldrsb	r2, [r3, #12]
   116ec:	ldr	r3, [fp, #-20]	; 0xffffffec
   116f0:	strb	r2, [r3, #12]
   116f4:	b	11818 <__assert_fail@plt+0x980>
   116f8:	ldr	r3, [fp, #-28]	; 0xffffffe4
   116fc:	cmp	r3, #0
   11700:	bge	1174c <__assert_fail@plt+0x8b4>
   11704:	ldr	r3, [fp, #-16]
   11708:	ldr	r3, [r3, #8]
   1170c:	str	r3, [fp, #-8]
   11710:	ldr	r3, [fp, #-8]
   11714:	ldr	r2, [r3, #4]
   11718:	ldr	r3, [fp, #-16]
   1171c:	str	r2, [r3, #8]
   11720:	ldr	r3, [fp, #-8]
   11724:	ldr	r2, [fp, #-16]
   11728:	str	r2, [r3, #4]
   1172c:	ldr	r3, [fp, #-8]
   11730:	ldr	r2, [r3, #8]
   11734:	ldr	r3, [fp, #-20]	; 0xffffffec
   11738:	str	r2, [r3, #4]
   1173c:	ldr	r3, [fp, #-8]
   11740:	ldr	r2, [fp, #-20]	; 0xffffffec
   11744:	str	r2, [r3, #8]
   11748:	b	11790 <__assert_fail@plt+0x8f8>
   1174c:	ldr	r3, [fp, #-16]
   11750:	ldr	r3, [r3, #4]
   11754:	str	r3, [fp, #-8]
   11758:	ldr	r3, [fp, #-8]
   1175c:	ldr	r2, [r3, #8]
   11760:	ldr	r3, [fp, #-16]
   11764:	str	r2, [r3, #4]
   11768:	ldr	r3, [fp, #-8]
   1176c:	ldr	r2, [fp, #-16]
   11770:	str	r2, [r3, #8]
   11774:	ldr	r3, [fp, #-8]
   11778:	ldr	r2, [r3, #4]
   1177c:	ldr	r3, [fp, #-20]	; 0xffffffec
   11780:	str	r2, [r3, #8]
   11784:	ldr	r3, [fp, #-8]
   11788:	ldr	r2, [fp, #-20]	; 0xffffffec
   1178c:	str	r2, [r3, #4]
   11790:	ldr	r3, [fp, #-20]	; 0xffffffec
   11794:	mov	r2, #0
   11798:	strb	r2, [r3, #12]
   1179c:	ldr	r3, [fp, #-16]
   117a0:	mov	r2, #0
   117a4:	strb	r2, [r3, #12]
   117a8:	ldr	r3, [fp, #-8]
   117ac:	ldrsb	r3, [r3, #12]
   117b0:	mov	r2, r3
   117b4:	ldr	r3, [fp, #-28]	; 0xffffffe4
   117b8:	cmp	r3, r2
   117bc:	bne	117e0 <__assert_fail@plt+0x948>
   117c0:	ldr	r3, [fp, #-28]	; 0xffffffe4
   117c4:	uxtb	r3, r3
   117c8:	rsb	r3, r3, #0
   117cc:	uxtb	r3, r3
   117d0:	sxtb	r2, r3
   117d4:	ldr	r3, [fp, #-20]	; 0xffffffec
   117d8:	strb	r2, [r3, #12]
   117dc:	b	1180c <__assert_fail@plt+0x974>
   117e0:	ldr	r3, [fp, #-8]
   117e4:	ldrsb	r3, [r3, #12]
   117e8:	mov	r2, r3
   117ec:	ldr	r3, [fp, #-28]	; 0xffffffe4
   117f0:	rsb	r3, r3, #0
   117f4:	cmp	r2, r3
   117f8:	bne	1180c <__assert_fail@plt+0x974>
   117fc:	ldr	r3, [fp, #-28]	; 0xffffffe4
   11800:	sxtb	r2, r3
   11804:	ldr	r3, [fp, #-16]
   11808:	strb	r2, [r3, #12]
   1180c:	ldr	r3, [fp, #-8]
   11810:	mov	r2, #0
   11814:	strb	r2, [r3, #12]
   11818:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1181c:	ldr	r3, [r3, #8]
   11820:	ldr	r2, [fp, #-20]	; 0xffffffec
   11824:	cmp	r2, r3
   11828:	bne	1183c <__assert_fail@plt+0x9a4>
   1182c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   11830:	ldr	r2, [fp, #-8]
   11834:	str	r2, [r3, #8]
   11838:	b	11848 <__assert_fail@plt+0x9b0>
   1183c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   11840:	ldr	r2, [fp, #-8]
   11844:	str	r2, [r3, #4]
   11848:	ldr	r3, [fp, #-12]
   1184c:	b	1187c <__assert_fail@plt+0x9e4>
   11850:	ldr	r3, [fp, #-12]
   11854:	ldrsb	r3, [r3, #12]
   11858:	cmp	r3, #0
   1185c:	beq	11870 <__assert_fail@plt+0x9d8>
   11860:	ldr	r3, [fp, #-8]
   11864:	str	r3, [fp, #-24]	; 0xffffffe8
   11868:	ldr	r3, [fp, #-12]
   1186c:	str	r3, [fp, #-20]	; 0xffffffec
   11870:	ldr	r3, [fp, #-12]
   11874:	str	r3, [fp, #-8]
   11878:	b	113a4 <__assert_fail@plt+0x50c>
   1187c:	mov	r0, r3
   11880:	sub	sp, fp, #4
   11884:	ldr	fp, [sp]
   11888:	add	sp, sp, #4
   1188c:	pop	{pc}		; (ldr pc, [sp], #4)
   11890:	str	fp, [sp, #-8]!
   11894:	str	lr, [sp, #4]
   11898:	add	fp, sp, #4
   1189c:	sub	sp, sp, #16
   118a0:	str	r0, [fp, #-16]
   118a4:	str	r1, [fp, #-20]	; 0xffffffec
   118a8:	ldr	r3, [fp, #-16]
   118ac:	ldr	r2, [r3]
   118b0:	ldr	r3, [fp, #-20]	; 0xffffffec
   118b4:	ldr	r3, [r3]
   118b8:	mov	r1, r3
   118bc:	mov	r0, r2
   118c0:	bl	10c58 <strcmp@plt>
   118c4:	mov	r3, r0
   118c8:	cmp	r3, #0
   118cc:	beq	1191c <__assert_fail@plt+0xa84>
   118d0:	ldr	r3, [fp, #-20]	; 0xffffffec
   118d4:	ldr	r3, [r3, #16]
   118d8:	add	r2, r3, #1
   118dc:	ldr	r3, [fp, #-20]	; 0xffffffec
   118e0:	str	r2, [r3, #16]
   118e4:	mov	r0, #8
   118e8:	bl	16460 <__assert_fail@plt+0x55c8>
   118ec:	mov	r3, r0
   118f0:	str	r3, [fp, #-8]
   118f4:	ldr	r3, [fp, #-8]
   118f8:	ldr	r2, [fp, #-20]	; 0xffffffec
   118fc:	str	r2, [r3]
   11900:	ldr	r3, [fp, #-16]
   11904:	ldr	r2, [r3, #24]
   11908:	ldr	r3, [fp, #-8]
   1190c:	str	r2, [r3, #4]
   11910:	ldr	r3, [fp, #-16]
   11914:	ldr	r2, [fp, #-8]
   11918:	str	r2, [r3, #24]
   1191c:	nop	{0}
   11920:	sub	sp, fp, #4
   11924:	ldr	fp, [sp]
   11928:	add	sp, sp, #4
   1192c:	pop	{pc}		; (ldr pc, [sp], #4)
   11930:	push	{fp}		; (str fp, [sp, #-4]!)
   11934:	add	fp, sp, #0
   11938:	sub	sp, sp, #12
   1193c:	str	r0, [fp, #-8]
   11940:	movw	r3, #37220	; 0x9164
   11944:	movt	r3, #2
   11948:	ldr	r3, [r3]
   1194c:	add	r2, r3, #1
   11950:	movw	r3, #37220	; 0x9164
   11954:	movt	r3, #2
   11958:	str	r2, [r3]
   1195c:	mov	r3, #0
   11960:	mov	r0, r3
   11964:	add	sp, fp, #0
   11968:	pop	{fp}		; (ldr fp, [sp], #4)
   1196c:	bx	lr
   11970:	push	{fp}		; (str fp, [sp, #-4]!)
   11974:	add	fp, sp, #0
   11978:	sub	sp, sp, #12
   1197c:	str	r0, [fp, #-8]
   11980:	ldr	r3, [fp, #-8]
   11984:	ldr	r3, [r3, #16]
   11988:	cmp	r3, #0
   1198c:	bne	119f4 <__assert_fail@plt+0xb5c>
   11990:	ldr	r3, [fp, #-8]
   11994:	ldrb	r3, [r3, #13]
   11998:	eor	r3, r3, #1
   1199c:	uxtb	r3, r3
   119a0:	cmp	r3, #0
   119a4:	beq	119f4 <__assert_fail@plt+0xb5c>
   119a8:	movw	r3, #37208	; 0x9158
   119ac:	movt	r3, #2
   119b0:	ldr	r3, [r3]
   119b4:	cmp	r3, #0
   119b8:	bne	119d0 <__assert_fail@plt+0xb38>
   119bc:	movw	r3, #37208	; 0x9158
   119c0:	movt	r3, #2
   119c4:	ldr	r2, [fp, #-8]
   119c8:	str	r2, [r3]
   119cc:	b	119e4 <__assert_fail@plt+0xb4c>
   119d0:	movw	r3, #37212	; 0x915c
   119d4:	movt	r3, #2
   119d8:	ldr	r3, [r3]
   119dc:	ldr	r2, [fp, #-8]
   119e0:	str	r2, [r3, #20]
   119e4:	movw	r3, #37212	; 0x915c
   119e8:	movt	r3, #2
   119ec:	ldr	r2, [fp, #-8]
   119f0:	str	r2, [r3]
   119f4:	mov	r3, #0
   119f8:	mov	r0, r3
   119fc:	add	sp, fp, #0
   11a00:	pop	{fp}		; (ldr fp, [sp], #4)
   11a04:	bx	lr
   11a08:	str	fp, [sp, #-8]!
   11a0c:	str	lr, [sp, #4]
   11a10:	add	fp, sp, #4
   11a14:	sub	sp, sp, #24
   11a18:	str	r0, [fp, #-24]	; 0xffffffe8
   11a1c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   11a20:	ldr	r3, [r3, #16]
   11a24:	cmp	r3, #0
   11a28:	beq	11bfc <__assert_fail@plt+0xd64>
   11a2c:	movw	r3, #37216	; 0x9160
   11a30:	movt	r3, #2
   11a34:	ldr	r3, [r3]
   11a38:	cmp	r3, #0
   11a3c:	bne	11a54 <__assert_fail@plt+0xbbc>
   11a40:	movw	r3, #37216	; 0x9160
   11a44:	movt	r3, #2
   11a48:	ldr	r2, [fp, #-24]	; 0xffffffe8
   11a4c:	str	r2, [r3]
   11a50:	b	11bfc <__assert_fail@plt+0xd64>
   11a54:	ldr	r3, [fp, #-24]	; 0xffffffe8
   11a58:	add	r3, r3, #24
   11a5c:	str	r3, [fp, #-8]
   11a60:	b	11bec <__assert_fail@plt+0xd54>
   11a64:	ldr	r3, [fp, #-8]
   11a68:	ldr	r3, [r3]
   11a6c:	ldr	r2, [r3]
   11a70:	movw	r3, #37216	; 0x9160
   11a74:	movt	r3, #2
   11a78:	ldr	r3, [r3]
   11a7c:	cmp	r2, r3
   11a80:	bne	11bdc <__assert_fail@plt+0xd44>
   11a84:	ldr	r3, [fp, #-24]	; 0xffffffe8
   11a88:	ldr	r3, [r3, #20]
   11a8c:	cmp	r3, #0
   11a90:	beq	11bb4 <__assert_fail@plt+0xd1c>
   11a94:	b	11b48 <__assert_fail@plt+0xcb0>
   11a98:	movw	r3, #37216	; 0x9160
   11a9c:	movt	r3, #2
   11aa0:	ldr	r3, [r3]
   11aa4:	ldr	r3, [r3, #20]
   11aa8:	str	r3, [fp, #-12]
   11aac:	movw	r3, #37216	; 0x9160
   11ab0:	movt	r3, #2
   11ab4:	ldr	r3, [r3]
   11ab8:	ldr	r3, [r3]
   11abc:	movw	r2, #32592	; 0x7f50
   11ac0:	movt	r2, #1
   11ac4:	mov	r1, #0
   11ac8:	mov	r0, #0
   11acc:	bl	10d54 <error@plt>
   11ad0:	movw	r3, #37216	; 0x9160
   11ad4:	movt	r3, #2
   11ad8:	ldr	r3, [r3]
   11adc:	ldr	r2, [fp, #-24]	; 0xffffffe8
   11ae0:	cmp	r2, r3
   11ae4:	bne	11b24 <__assert_fail@plt+0xc8c>
   11ae8:	ldr	r3, [fp, #-8]
   11aec:	ldr	r3, [r3]
   11af0:	str	r3, [fp, #-16]
   11af4:	ldr	r3, [fp, #-16]
   11af8:	ldr	r3, [r3]
   11afc:	ldr	r2, [r3, #16]
   11b00:	sub	r2, r2, #1
   11b04:	str	r2, [r3, #16]
   11b08:	ldr	r3, [fp, #-16]
   11b0c:	ldr	r2, [r3, #4]
   11b10:	ldr	r3, [fp, #-8]
   11b14:	str	r2, [r3]
   11b18:	ldr	r0, [fp, #-16]
   11b1c:	bl	12720 <__assert_fail@plt+0x1888>
   11b20:	b	11b5c <__assert_fail@plt+0xcc4>
   11b24:	movw	r3, #37216	; 0x9160
   11b28:	movt	r3, #2
   11b2c:	ldr	r3, [r3]
   11b30:	mov	r2, #0
   11b34:	str	r2, [r3, #20]
   11b38:	movw	r3, #37216	; 0x9160
   11b3c:	movt	r3, #2
   11b40:	ldr	r2, [fp, #-12]
   11b44:	str	r2, [r3]
   11b48:	movw	r3, #37216	; 0x9160
   11b4c:	movt	r3, #2
   11b50:	ldr	r3, [r3]
   11b54:	cmp	r3, #0
   11b58:	bne	11a98 <__assert_fail@plt+0xc00>
   11b5c:	b	11b98 <__assert_fail@plt+0xd00>
   11b60:	movw	r3, #37216	; 0x9160
   11b64:	movt	r3, #2
   11b68:	ldr	r3, [r3]
   11b6c:	ldr	r3, [r3, #20]
   11b70:	str	r3, [fp, #-20]	; 0xffffffec
   11b74:	movw	r3, #37216	; 0x9160
   11b78:	movt	r3, #2
   11b7c:	ldr	r3, [r3]
   11b80:	mov	r2, #0
   11b84:	str	r2, [r3, #20]
   11b88:	movw	r3, #37216	; 0x9160
   11b8c:	movt	r3, #2
   11b90:	ldr	r2, [fp, #-20]	; 0xffffffec
   11b94:	str	r2, [r3]
   11b98:	movw	r3, #37216	; 0x9160
   11b9c:	movt	r3, #2
   11ba0:	ldr	r3, [r3]
   11ba4:	cmp	r3, #0
   11ba8:	bne	11b60 <__assert_fail@plt+0xcc8>
   11bac:	mov	r3, #1
   11bb0:	b	11c00 <__assert_fail@plt+0xd68>
   11bb4:	movw	r3, #37216	; 0x9160
   11bb8:	movt	r3, #2
   11bbc:	ldr	r2, [r3]
   11bc0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   11bc4:	str	r2, [r3, #20]
   11bc8:	movw	r3, #37216	; 0x9160
   11bcc:	movt	r3, #2
   11bd0:	ldr	r2, [fp, #-24]	; 0xffffffe8
   11bd4:	str	r2, [r3]
   11bd8:	b	11bfc <__assert_fail@plt+0xd64>
   11bdc:	ldr	r3, [fp, #-8]
   11be0:	ldr	r3, [r3]
   11be4:	add	r3, r3, #4
   11be8:	str	r3, [fp, #-8]
   11bec:	ldr	r3, [fp, #-8]
   11bf0:	ldr	r3, [r3]
   11bf4:	cmp	r3, #0
   11bf8:	bne	11a64 <__assert_fail@plt+0xbcc>
   11bfc:	mov	r3, #0
   11c00:	mov	r0, r3
   11c04:	sub	sp, fp, #4
   11c08:	ldr	fp, [sp]
   11c0c:	add	sp, sp, #4
   11c10:	pop	{pc}		; (ldr pc, [sp], #4)
   11c14:	str	fp, [sp, #-8]!
   11c18:	str	lr, [sp, #4]
   11c1c:	add	fp, sp, #4
   11c20:	sub	sp, sp, #8
   11c24:	str	r0, [fp, #-8]
   11c28:	str	r1, [fp, #-12]
   11c2c:	ldr	r3, [fp, #-8]
   11c30:	ldr	r3, [r3, #4]
   11c34:	cmp	r3, #0
   11c38:	bne	11c60 <__assert_fail@plt+0xdc8>
   11c3c:	ldr	r3, [fp, #-8]
   11c40:	ldr	r3, [r3, #8]
   11c44:	cmp	r3, #0
   11c48:	bne	11c60 <__assert_fail@plt+0xdc8>
   11c4c:	ldr	r3, [fp, #-12]
   11c50:	ldr	r0, [fp, #-8]
   11c54:	blx	r3
   11c58:	mov	r3, r0
   11c5c:	b	11cf4 <__assert_fail@plt+0xe5c>
   11c60:	ldr	r3, [fp, #-8]
   11c64:	ldr	r3, [r3, #4]
   11c68:	cmp	r3, #0
   11c6c:	beq	11c98 <__assert_fail@plt+0xe00>
   11c70:	ldr	r3, [fp, #-8]
   11c74:	ldr	r3, [r3, #4]
   11c78:	ldr	r1, [fp, #-12]
   11c7c:	mov	r0, r3
   11c80:	bl	11c14 <__assert_fail@plt+0xd7c>
   11c84:	mov	r3, r0
   11c88:	cmp	r3, #0
   11c8c:	beq	11c98 <__assert_fail@plt+0xe00>
   11c90:	mov	r3, #1
   11c94:	b	11cf4 <__assert_fail@plt+0xe5c>
   11c98:	ldr	r3, [fp, #-12]
   11c9c:	ldr	r0, [fp, #-8]
   11ca0:	blx	r3
   11ca4:	mov	r3, r0
   11ca8:	cmp	r3, #0
   11cac:	beq	11cb8 <__assert_fail@plt+0xe20>
   11cb0:	mov	r3, #1
   11cb4:	b	11cf4 <__assert_fail@plt+0xe5c>
   11cb8:	ldr	r3, [fp, #-8]
   11cbc:	ldr	r3, [r3, #8]
   11cc0:	cmp	r3, #0
   11cc4:	beq	11cf0 <__assert_fail@plt+0xe58>
   11cc8:	ldr	r3, [fp, #-8]
   11ccc:	ldr	r3, [r3, #8]
   11cd0:	ldr	r1, [fp, #-12]
   11cd4:	mov	r0, r3
   11cd8:	bl	11c14 <__assert_fail@plt+0xd7c>
   11cdc:	mov	r3, r0
   11ce0:	cmp	r3, #0
   11ce4:	beq	11cf0 <__assert_fail@plt+0xe58>
   11ce8:	mov	r3, #1
   11cec:	b	11cf4 <__assert_fail@plt+0xe5c>
   11cf0:	mov	r3, #0
   11cf4:	mov	r0, r3
   11cf8:	sub	sp, fp, #4
   11cfc:	ldr	fp, [sp]
   11d00:	add	sp, sp, #4
   11d04:	pop	{pc}		; (ldr pc, [sp], #4)
   11d08:	str	fp, [sp, #-8]!
   11d0c:	str	lr, [sp, #4]
   11d10:	add	fp, sp, #4
   11d14:	sub	sp, sp, #8
   11d18:	str	r0, [fp, #-8]
   11d1c:	str	r1, [fp, #-12]
   11d20:	ldr	r3, [fp, #-8]
   11d24:	ldr	r3, [r3, #8]
   11d28:	cmp	r3, #0
   11d2c:	beq	11d44 <__assert_fail@plt+0xeac>
   11d30:	ldr	r3, [fp, #-8]
   11d34:	ldr	r3, [r3, #8]
   11d38:	ldr	r1, [fp, #-12]
   11d3c:	mov	r0, r3
   11d40:	bl	11c14 <__assert_fail@plt+0xd7c>
   11d44:	nop	{0}
   11d48:	sub	sp, fp, #4
   11d4c:	ldr	fp, [sp]
   11d50:	add	sp, sp, #4
   11d54:	pop	{pc}		; (ldr pc, [sp], #4)
   11d58:	str	r4, [sp, #-12]!
   11d5c:	str	fp, [sp, #4]
   11d60:	str	lr, [sp, #8]
   11d64:	add	fp, sp, #8
   11d68:	sub	sp, sp, #52	; 0x34
   11d6c:	str	r0, [fp, #-56]	; 0xffffffc8
   11d70:	mov	r3, #1
   11d74:	strb	r3, [fp, #-13]
   11d78:	mov	r3, #0
   11d7c:	str	r3, [fp, #-20]	; 0xffffffec
   11d80:	mov	r3, #0
   11d84:	str	r3, [fp, #-24]	; 0xffffffe8
   11d88:	movw	r1, #32596	; 0x7f54
   11d8c:	movt	r1, #1
   11d90:	ldr	r0, [fp, #-56]	; 0xffffffc8
   11d94:	bl	10c58 <strcmp@plt>
   11d98:	mov	r3, r0
   11d9c:	cmp	r3, #0
   11da0:	moveq	r3, #1
   11da4:	movne	r3, #0
   11da8:	strb	r3, [fp, #-29]	; 0xffffffe3
   11dac:	mov	r0, #0
   11db0:	bl	112b4 <__assert_fail@plt+0x41c>
   11db4:	str	r0, [fp, #-36]	; 0xffffffdc
   11db8:	ldrb	r3, [fp, #-29]	; 0xffffffe3
   11dbc:	eor	r3, r3, #1
   11dc0:	uxtb	r3, r3
   11dc4:	cmp	r3, #0
   11dc8:	beq	11e2c <__assert_fail@plt+0xf94>
   11dcc:	movw	r3, #37192	; 0x9148
   11dd0:	movt	r3, #2
   11dd4:	ldr	r3, [r3]
   11dd8:	mov	r2, r3
   11ddc:	movw	r1, #32600	; 0x7f58
   11de0:	movt	r1, #1
   11de4:	ldr	r0, [fp, #-56]	; 0xffffffc8
   11de8:	bl	12840 <__assert_fail@plt+0x19a8>
   11dec:	mov	r3, r0
   11df0:	cmp	r3, #0
   11df4:	bne	11e2c <__assert_fail@plt+0xf94>
   11df8:	bl	10dfc <__errno_location@plt>
   11dfc:	mov	r3, r0
   11e00:	ldr	r4, [r3]
   11e04:	ldr	r2, [fp, #-56]	; 0xffffffc8
   11e08:	mov	r1, #3
   11e0c:	mov	r0, #0
   11e10:	bl	153d0 <__assert_fail@plt+0x4538>
   11e14:	mov	r3, r0
   11e18:	movw	r2, #32592	; 0x7f50
   11e1c:	movt	r2, #1
   11e20:	mov	r1, r4
   11e24:	mov	r0, #1
   11e28:	bl	10d54 <error@plt>
   11e2c:	movw	r3, #37192	; 0x9148
   11e30:	movt	r3, #2
   11e34:	ldr	r3, [r3]
   11e38:	mov	r1, #2
   11e3c:	mov	r0, r3
   11e40:	bl	124f4 <__assert_fail@plt+0x165c>
   11e44:	sub	r3, fp, #48	; 0x30
   11e48:	mov	r0, r3
   11e4c:	bl	15704 <__assert_fail@plt+0x486c>
   11e50:	movw	r3, #37192	; 0x9148
   11e54:	movt	r3, #2
   11e58:	ldr	r0, [r3]
   11e5c:	sub	r3, fp, #48	; 0x30
   11e60:	mov	r2, #3
   11e64:	movw	r1, #32604	; 0x7f5c
   11e68:	movt	r1, #1
   11e6c:	bl	15800 <__assert_fail@plt+0x4968>
   11e70:	str	r0, [fp, #-40]	; 0xffffffd8
   11e74:	ldr	r3, [fp, #-40]	; 0xffffffd8
   11e78:	cmn	r3, #1
   11e7c:	beq	11eec <__assert_fail@plt+0x1054>
   11e80:	ldr	r3, [fp, #-40]	; 0xffffffd8
   11e84:	cmp	r3, #0
   11e88:	bne	11eac <__assert_fail@plt+0x1014>
   11e8c:	movw	r3, #32780	; 0x800c
   11e90:	movt	r3, #1
   11e94:	movw	r2, #458	; 0x1ca
   11e98:	movw	r1, #32464	; 0x7ed0
   11e9c:	movt	r1, #1
   11ea0:	movw	r0, #32608	; 0x7f60
   11ea4:	movt	r0, #1
   11ea8:	bl	10e98 <__assert_fail@plt>
   11eac:	ldr	r3, [fp, #-44]	; 0xffffffd4
   11eb0:	mov	r1, r3
   11eb4:	ldr	r0, [fp, #-36]	; 0xffffffdc
   11eb8:	bl	11314 <__assert_fail@plt+0x47c>
   11ebc:	str	r0, [fp, #-24]	; 0xffffffe8
   11ec0:	ldr	r3, [fp, #-20]	; 0xffffffec
   11ec4:	cmp	r3, #0
   11ec8:	beq	11ee0 <__assert_fail@plt+0x1048>
   11ecc:	ldr	r1, [fp, #-24]	; 0xffffffe8
   11ed0:	ldr	r0, [fp, #-20]	; 0xffffffec
   11ed4:	bl	11890 <__assert_fail@plt+0x9f8>
   11ed8:	mov	r3, #0
   11edc:	str	r3, [fp, #-24]	; 0xffffffe8
   11ee0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   11ee4:	str	r3, [fp, #-20]	; 0xffffffec
   11ee8:	b	11e50 <__assert_fail@plt+0xfb8>
   11eec:	nop	{0}
   11ef0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   11ef4:	cmp	r3, #0
   11ef8:	beq	11f30 <__assert_fail@plt+0x1098>
   11efc:	movw	r0, #32620	; 0x7f6c
   11f00:	movt	r0, #1
   11f04:	bl	10dd8 <gettext@plt>
   11f08:	mov	r4, r0
   11f0c:	ldr	r2, [fp, #-56]	; 0xffffffc8
   11f10:	mov	r1, #3
   11f14:	mov	r0, #0
   11f18:	bl	153d0 <__assert_fail@plt+0x4538>
   11f1c:	mov	r3, r0
   11f20:	mov	r2, r4
   11f24:	mov	r1, #0
   11f28:	mov	r0, #1
   11f2c:	bl	10d54 <error@plt>
   11f30:	movw	r1, #6448	; 0x1930
   11f34:	movt	r1, #1
   11f38:	ldr	r0, [fp, #-36]	; 0xffffffdc
   11f3c:	bl	11d08 <__assert_fail@plt+0xe70>
   11f40:	b	120c8 <__assert_fail@plt+0x1230>
   11f44:	movw	r1, #6512	; 0x1970
   11f48:	movt	r1, #1
   11f4c:	ldr	r0, [fp, #-36]	; 0xffffffdc
   11f50:	bl	11d08 <__assert_fail@plt+0xe70>
   11f54:	b	12040 <__assert_fail@plt+0x11a8>
   11f58:	movw	r3, #37208	; 0x9158
   11f5c:	movt	r3, #2
   11f60:	ldr	r3, [r3]
   11f64:	ldr	r3, [r3, #24]
   11f68:	str	r3, [fp, #-28]	; 0xffffffe4
   11f6c:	movw	r3, #37208	; 0x9158
   11f70:	movt	r3, #2
   11f74:	ldr	r3, [r3]
   11f78:	ldr	r3, [r3]
   11f7c:	mov	r0, r3
   11f80:	bl	10d6c <puts@plt>
   11f84:	movw	r3, #37208	; 0x9158
   11f88:	movt	r3, #2
   11f8c:	ldr	r3, [r3]
   11f90:	mov	r2, #1
   11f94:	strb	r2, [r3, #13]
   11f98:	movw	r3, #37220	; 0x9164
   11f9c:	movt	r3, #2
   11fa0:	ldr	r3, [r3]
   11fa4:	sub	r2, r3, #1
   11fa8:	movw	r3, #37220	; 0x9164
   11fac:	movt	r3, #2
   11fb0:	str	r2, [r3]
   11fb4:	b	12018 <__assert_fail@plt+0x1180>
   11fb8:	ldr	r3, [fp, #-28]	; 0xffffffe4
   11fbc:	ldr	r3, [r3]
   11fc0:	ldr	r2, [r3, #16]
   11fc4:	sub	r2, r2, #1
   11fc8:	str	r2, [r3, #16]
   11fcc:	ldr	r3, [fp, #-28]	; 0xffffffe4
   11fd0:	ldr	r3, [r3]
   11fd4:	ldr	r3, [r3, #16]
   11fd8:	cmp	r3, #0
   11fdc:	bne	1200c <__assert_fail@plt+0x1174>
   11fe0:	movw	r3, #37212	; 0x915c
   11fe4:	movt	r3, #2
   11fe8:	ldr	r3, [r3]
   11fec:	ldr	r2, [fp, #-28]	; 0xffffffe4
   11ff0:	ldr	r2, [r2]
   11ff4:	str	r2, [r3, #20]
   11ff8:	ldr	r3, [fp, #-28]	; 0xffffffe4
   11ffc:	ldr	r2, [r3]
   12000:	movw	r3, #37212	; 0x915c
   12004:	movt	r3, #2
   12008:	str	r2, [r3]
   1200c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   12010:	ldr	r3, [r3, #4]
   12014:	str	r3, [fp, #-28]	; 0xffffffe4
   12018:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1201c:	cmp	r3, #0
   12020:	bne	11fb8 <__assert_fail@plt+0x1120>
   12024:	movw	r3, #37208	; 0x9158
   12028:	movt	r3, #2
   1202c:	ldr	r3, [r3]
   12030:	ldr	r2, [r3, #20]
   12034:	movw	r3, #37208	; 0x9158
   12038:	movt	r3, #2
   1203c:	str	r2, [r3]
   12040:	movw	r3, #37208	; 0x9158
   12044:	movt	r3, #2
   12048:	ldr	r3, [r3]
   1204c:	cmp	r3, #0
   12050:	bne	11f58 <__assert_fail@plt+0x10c0>
   12054:	movw	r3, #37220	; 0x9164
   12058:	movt	r3, #2
   1205c:	ldr	r3, [r3]
   12060:	cmp	r3, #0
   12064:	beq	120c8 <__assert_fail@plt+0x1230>
   12068:	movw	r0, #32664	; 0x7f98
   1206c:	movt	r0, #1
   12070:	bl	10dd8 <gettext@plt>
   12074:	mov	r4, r0
   12078:	ldr	r2, [fp, #-56]	; 0xffffffc8
   1207c:	mov	r1, #3
   12080:	mov	r0, #0
   12084:	bl	153d0 <__assert_fail@plt+0x4538>
   12088:	mov	r3, r0
   1208c:	mov	r2, r4
   12090:	mov	r1, #0
   12094:	mov	r0, #0
   12098:	bl	10d54 <error@plt>
   1209c:	mov	r3, #0
   120a0:	strb	r3, [fp, #-13]
   120a4:	movw	r1, #6664	; 0x1a08
   120a8:	movt	r1, #1
   120ac:	ldr	r0, [fp, #-36]	; 0xffffffdc
   120b0:	bl	11d08 <__assert_fail@plt+0xe70>
   120b4:	movw	r3, #37216	; 0x9160
   120b8:	movt	r3, #2
   120bc:	ldr	r3, [r3]
   120c0:	cmp	r3, #0
   120c4:	bne	120a4 <__assert_fail@plt+0x120c>
   120c8:	movw	r3, #37220	; 0x9164
   120cc:	movt	r3, #2
   120d0:	ldr	r3, [r3]
   120d4:	cmp	r3, #0
   120d8:	bne	11f44 <__assert_fail@plt+0x10ac>
   120dc:	movw	r3, #37192	; 0x9148
   120e0:	movt	r3, #2
   120e4:	ldr	r3, [r3]
   120e8:	mov	r0, r3
   120ec:	bl	1255c <__assert_fail@plt+0x16c4>
   120f0:	mov	r3, r0
   120f4:	cmp	r3, #0
   120f8:	beq	12150 <__assert_fail@plt+0x12b8>
   120fc:	bl	10dfc <__errno_location@plt>
   12100:	mov	r3, r0
   12104:	ldr	r4, [r3]
   12108:	ldrb	r3, [fp, #-29]	; 0xffffffe3
   1210c:	cmp	r3, #0
   12110:	beq	12128 <__assert_fail@plt+0x1290>
   12114:	movw	r0, #32692	; 0x7fb4
   12118:	movt	r0, #1
   1211c:	bl	10dd8 <gettext@plt>
   12120:	mov	r3, r0
   12124:	b	1213c <__assert_fail@plt+0x12a4>
   12128:	ldr	r2, [fp, #-56]	; 0xffffffc8
   1212c:	mov	r1, #3
   12130:	mov	r0, #0
   12134:	bl	153d0 <__assert_fail@plt+0x4538>
   12138:	mov	r3, r0
   1213c:	movw	r2, #32592	; 0x7f50
   12140:	movt	r2, #1
   12144:	mov	r1, r4
   12148:	mov	r0, #1
   1214c:	bl	10d54 <error@plt>
   12150:	ldrb	r3, [fp, #-13]
   12154:	eor	r3, r3, #1
   12158:	uxtb	r3, r3
   1215c:	mov	r0, r3
   12160:	bl	10dcc <exit@plt>
   12164:	str	r4, [sp, #-12]!
   12168:	str	fp, [sp, #4]
   1216c:	str	lr, [sp, #8]
   12170:	add	fp, sp, #8
   12174:	sub	sp, sp, #36	; 0x24
   12178:	str	r0, [fp, #-16]
   1217c:	str	r1, [fp, #-20]	; 0xffffffec
   12180:	ldr	r3, [fp, #-20]	; 0xffffffec
   12184:	ldr	r3, [r3]
   12188:	mov	r0, r3
   1218c:	bl	12d6c <__assert_fail@plt+0x1ed4>
   12190:	movw	r1, #32028	; 0x7d1c
   12194:	movt	r1, #1
   12198:	mov	r0, #6
   1219c:	bl	10e44 <setlocale@plt>
   121a0:	movw	r1, #32708	; 0x7fc4
   121a4:	movt	r1, #1
   121a8:	movw	r0, #32052	; 0x7d34
   121ac:	movt	r0, #1
   121b0:	bl	10e68 <bindtextdomain@plt>
   121b4:	movw	r0, #32052	; 0x7d34
   121b8:	movt	r0, #1
   121bc:	bl	10cf4 <textdomain@plt>
   121c0:	movw	r0, #9048	; 0x2358
   121c4:	movt	r0, #1
   121c8:	bl	17bc8 <__assert_fail@plt+0x6d30>
   121cc:	movw	r3, #37092	; 0x90e4
   121d0:	movt	r3, #2
   121d4:	ldr	r2, [r3]
   121d8:	mov	r3, #0
   121dc:	str	r3, [sp, #16]
   121e0:	movw	r3, #32732	; 0x7fdc
   121e4:	movt	r3, #1
   121e8:	str	r3, [sp, #12]
   121ec:	movw	r3, #4512	; 0x11a0
   121f0:	movt	r3, #1
   121f4:	str	r3, [sp, #8]
   121f8:	mov	r3, #1
   121fc:	str	r3, [sp, #4]
   12200:	str	r2, [sp]
   12204:	movw	r3, #31844	; 0x7c64
   12208:	movt	r3, #1
   1220c:	movw	r2, #32456	; 0x7ec8
   12210:	movt	r2, #1
   12214:	ldr	r1, [fp, #-20]	; 0xffffffec
   12218:	ldr	r0, [fp, #-16]
   1221c:	bl	12c34 <__assert_fail@plt+0x1d9c>
   12220:	movw	r3, #37176	; 0x9138
   12224:	movt	r3, #2
   12228:	ldr	r3, [r3]
   1222c:	ldr	r2, [fp, #-16]
   12230:	sub	r3, r2, r3
   12234:	cmp	r3, #1
   12238:	ble	12290 <__assert_fail@plt+0x13f8>
   1223c:	movw	r0, #32748	; 0x7fec
   12240:	movt	r0, #1
   12244:	bl	10dd8 <gettext@plt>
   12248:	mov	r4, r0
   1224c:	movw	r3, #37176	; 0x9138
   12250:	movt	r3, #2
   12254:	ldr	r3, [r3]
   12258:	add	r3, r3, #1
   1225c:	lsl	r3, r3, #2
   12260:	ldr	r2, [fp, #-20]	; 0xffffffec
   12264:	add	r3, r2, r3
   12268:	ldr	r3, [r3]
   1226c:	mov	r0, r3
   12270:	bl	156cc <__assert_fail@plt+0x4834>
   12274:	mov	r3, r0
   12278:	mov	r2, r4
   1227c:	mov	r1, #0
   12280:	mov	r0, #0
   12284:	bl	10d54 <error@plt>
   12288:	mov	r0, #1
   1228c:	bl	111a0 <__assert_fail@plt+0x308>
   12290:	movw	r3, #37176	; 0x9138
   12294:	movt	r3, #2
   12298:	ldr	r3, [r3]
   1229c:	ldr	r2, [fp, #-16]
   122a0:	cmp	r2, r3
   122a4:	beq	122c8 <__assert_fail@plt+0x1430>
   122a8:	movw	r3, #37176	; 0x9138
   122ac:	movt	r3, #2
   122b0:	ldr	r3, [r3]
   122b4:	lsl	r3, r3, #2
   122b8:	ldr	r2, [fp, #-20]	; 0xffffffec
   122bc:	add	r3, r2, r3
   122c0:	ldr	r3, [r3]
   122c4:	b	122d0 <__assert_fail@plt+0x1438>
   122c8:	movw	r3, #32596	; 0x7f54
   122cc:	movt	r3, #1
   122d0:	mov	r0, r3
   122d4:	bl	11d58 <__assert_fail@plt+0xec0>
   122d8:	mov	r3, #0
   122dc:	mov	r0, r3
   122e0:	sub	sp, fp, #8
   122e4:	ldr	r4, [sp]
   122e8:	ldr	fp, [sp, #4]
   122ec:	add	sp, sp, #8
   122f0:	pop	{pc}		; (ldr pc, [sp], #4)
   122f4:	push	{fp}		; (str fp, [sp, #-4]!)
   122f8:	add	fp, sp, #0
   122fc:	sub	sp, sp, #12
   12300:	str	r0, [fp, #-8]
   12304:	movw	r3, #37224	; 0x9168
   12308:	movt	r3, #2
   1230c:	ldr	r2, [fp, #-8]
   12310:	str	r2, [r3]
   12314:	nop	{0}
   12318:	add	sp, fp, #0
   1231c:	pop	{fp}		; (ldr fp, [sp], #4)
   12320:	bx	lr
   12324:	push	{fp}		; (str fp, [sp, #-4]!)
   12328:	add	fp, sp, #0
   1232c:	sub	sp, sp, #12
   12330:	mov	r3, r0
   12334:	strb	r3, [fp, #-5]
   12338:	movw	r3, #37228	; 0x916c
   1233c:	movt	r3, #2
   12340:	ldrb	r2, [fp, #-5]
   12344:	strb	r2, [r3]
   12348:	nop	{0}
   1234c:	add	sp, fp, #0
   12350:	pop	{fp}		; (ldr fp, [sp], #4)
   12354:	bx	lr
   12358:	str	r4, [sp, #-12]!
   1235c:	str	fp, [sp, #4]
   12360:	str	lr, [sp, #8]
   12364:	add	fp, sp, #8
   12368:	sub	sp, sp, #20
   1236c:	movw	r3, #37196	; 0x914c
   12370:	movt	r3, #2
   12374:	ldr	r3, [r3]
   12378:	mov	r0, r3
   1237c:	bl	16fdc <__assert_fail@plt+0x6144>
   12380:	mov	r3, r0
   12384:	cmp	r3, #0
   12388:	beq	1245c <__assert_fail@plt+0x15c4>
   1238c:	movw	r3, #37228	; 0x916c
   12390:	movt	r3, #2
   12394:	ldrb	r3, [r3]
   12398:	eor	r3, r3, #1
   1239c:	uxtb	r3, r3
   123a0:	cmp	r3, #0
   123a4:	bne	123bc <__assert_fail@plt+0x1524>
   123a8:	bl	10dfc <__errno_location@plt>
   123ac:	mov	r3, r0
   123b0:	ldr	r3, [r3]
   123b4:	cmp	r3, #32
   123b8:	beq	1245c <__assert_fail@plt+0x15c4>
   123bc:	movw	r0, #32804	; 0x8024
   123c0:	movt	r0, #1
   123c4:	bl	10dd8 <gettext@plt>
   123c8:	str	r0, [fp, #-16]
   123cc:	movw	r3, #37224	; 0x9168
   123d0:	movt	r3, #2
   123d4:	ldr	r3, [r3]
   123d8:	cmp	r3, #0
   123dc:	beq	12428 <__assert_fail@plt+0x1590>
   123e0:	bl	10dfc <__errno_location@plt>
   123e4:	mov	r3, r0
   123e8:	ldr	r4, [r3]
   123ec:	movw	r3, #37224	; 0x9168
   123f0:	movt	r3, #2
   123f4:	ldr	r3, [r3]
   123f8:	mov	r0, r3
   123fc:	bl	15358 <__assert_fail@plt+0x44c0>
   12400:	mov	r2, r0
   12404:	ldr	r3, [fp, #-16]
   12408:	str	r3, [sp]
   1240c:	mov	r3, r2
   12410:	movw	r2, #32816	; 0x8030
   12414:	movt	r2, #1
   12418:	mov	r1, r4
   1241c:	mov	r0, #0
   12420:	bl	10d54 <error@plt>
   12424:	b	12448 <__assert_fail@plt+0x15b0>
   12428:	bl	10dfc <__errno_location@plt>
   1242c:	mov	r3, r0
   12430:	ldr	r1, [r3]
   12434:	ldr	r3, [fp, #-16]
   12438:	movw	r2, #32824	; 0x8038
   1243c:	movt	r2, #1
   12440:	mov	r0, #0
   12444:	bl	10d54 <error@plt>
   12448:	movw	r3, #37096	; 0x90e8
   1244c:	movt	r3, #2
   12450:	ldr	r3, [r3]
   12454:	mov	r0, r3
   12458:	bl	10c94 <_exit@plt>
   1245c:	movw	r3, #37184	; 0x9140
   12460:	movt	r3, #2
   12464:	ldr	r3, [r3]
   12468:	mov	r0, r3
   1246c:	bl	16fdc <__assert_fail@plt+0x6144>
   12470:	mov	r3, r0
   12474:	cmp	r3, #0
   12478:	beq	12490 <__assert_fail@plt+0x15f8>
   1247c:	movw	r3, #37096	; 0x90e8
   12480:	movt	r3, #2
   12484:	ldr	r3, [r3]
   12488:	mov	r0, r3
   1248c:	bl	10c94 <_exit@plt>
   12490:	nop	{0}
   12494:	sub	sp, fp, #8
   12498:	ldr	r4, [sp]
   1249c:	ldr	fp, [sp, #4]
   124a0:	add	sp, sp, #8
   124a4:	pop	{pc}		; (ldr pc, [sp], #4)
   124a8:	str	fp, [sp, #-8]!
   124ac:	str	lr, [sp, #4]
   124b0:	add	fp, sp, #4
   124b4:	sub	sp, sp, #40	; 0x28
   124b8:	str	r0, [fp, #-16]
   124bc:	strd	r2, [fp, #-28]	; 0xffffffe4
   124c0:	ldr	r3, [fp, #12]
   124c4:	str	r3, [sp, #8]
   124c8:	ldrd	r2, [fp, #4]
   124cc:	strd	r2, [sp]
   124d0:	ldrd	r2, [fp, #-28]	; 0xffffffe4
   124d4:	ldr	r0, [fp, #-16]
   124d8:	bl	10c64 <posix_fadvise64@plt>
   124dc:	str	r0, [fp, #-8]
   124e0:	nop	{0}
   124e4:	sub	sp, fp, #4
   124e8:	ldr	fp, [sp]
   124ec:	add	sp, sp, #4
   124f0:	pop	{pc}		; (ldr pc, [sp], #4)
   124f4:	str	fp, [sp, #-8]!
   124f8:	str	lr, [sp, #4]
   124fc:	add	fp, sp, #4
   12500:	sub	sp, sp, #24
   12504:	str	r0, [fp, #-8]
   12508:	str	r1, [fp, #-12]
   1250c:	ldr	r3, [fp, #-8]
   12510:	cmp	r3, #0
   12514:	beq	12548 <__assert_fail@plt+0x16b0>
   12518:	ldr	r0, [fp, #-8]
   1251c:	bl	10e20 <fileno@plt>
   12520:	mov	r1, r0
   12524:	ldr	r3, [fp, #-12]
   12528:	str	r3, [sp, #8]
   1252c:	mov	r2, #0
   12530:	mov	r3, #0
   12534:	strd	r2, [sp]
   12538:	mov	r2, #0
   1253c:	mov	r3, #0
   12540:	mov	r0, r1
   12544:	bl	124a8 <__assert_fail@plt+0x1610>
   12548:	nop	{0}
   1254c:	sub	sp, fp, #4
   12550:	ldr	fp, [sp]
   12554:	add	sp, sp, #4
   12558:	pop	{pc}		; (ldr pc, [sp], #4)
   1255c:	str	fp, [sp, #-8]!
   12560:	str	lr, [sp, #4]
   12564:	add	fp, sp, #4
   12568:	sub	sp, sp, #32
   1256c:	str	r0, [fp, #-24]	; 0xffffffe8
   12570:	mov	r3, #0
   12574:	str	r3, [fp, #-8]
   12578:	mov	r3, #0
   1257c:	str	r3, [fp, #-12]
   12580:	ldr	r0, [fp, #-24]	; 0xffffffe8
   12584:	bl	10e20 <fileno@plt>
   12588:	str	r0, [fp, #-16]
   1258c:	ldr	r3, [fp, #-16]
   12590:	cmp	r3, #0
   12594:	bge	125a8 <__assert_fail@plt+0x1710>
   12598:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1259c:	bl	10e2c <fclose@plt>
   125a0:	mov	r3, r0
   125a4:	b	1264c <__assert_fail@plt+0x17b4>
   125a8:	ldr	r0, [fp, #-24]	; 0xffffffe8
   125ac:	bl	10d90 <__freading@plt>
   125b0:	mov	r3, r0
   125b4:	cmp	r3, #0
   125b8:	beq	125f4 <__assert_fail@plt+0x175c>
   125bc:	ldr	r0, [fp, #-24]	; 0xffffffe8
   125c0:	bl	10e20 <fileno@plt>
   125c4:	mov	r1, r0
   125c8:	mov	r3, #1
   125cc:	str	r3, [sp]
   125d0:	mov	r2, #0
   125d4:	mov	r3, #0
   125d8:	mov	r0, r1
   125dc:	bl	10d18 <lseek64@plt>
   125e0:	mvn	r2, #0
   125e4:	mvn	r3, #0
   125e8:	cmp	r1, r3
   125ec:	cmpeq	r0, r2
   125f0:	beq	12618 <__assert_fail@plt+0x1780>
   125f4:	ldr	r0, [fp, #-24]	; 0xffffffe8
   125f8:	bl	126b4 <__assert_fail@plt+0x181c>
   125fc:	mov	r3, r0
   12600:	cmp	r3, #0
   12604:	beq	12618 <__assert_fail@plt+0x1780>
   12608:	bl	10dfc <__errno_location@plt>
   1260c:	mov	r3, r0
   12610:	ldr	r3, [r3]
   12614:	str	r3, [fp, #-8]
   12618:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1261c:	bl	10e2c <fclose@plt>
   12620:	str	r0, [fp, #-12]
   12624:	ldr	r3, [fp, #-8]
   12628:	cmp	r3, #0
   1262c:	beq	12648 <__assert_fail@plt+0x17b0>
   12630:	bl	10dfc <__errno_location@plt>
   12634:	mov	r2, r0
   12638:	ldr	r3, [fp, #-8]
   1263c:	str	r3, [r2]
   12640:	mvn	r3, #0
   12644:	str	r3, [fp, #-12]
   12648:	ldr	r3, [fp, #-12]
   1264c:	mov	r0, r3
   12650:	sub	sp, fp, #4
   12654:	ldr	fp, [sp]
   12658:	add	sp, sp, #4
   1265c:	pop	{pc}		; (ldr pc, [sp], #4)
   12660:	str	fp, [sp, #-8]!
   12664:	str	lr, [sp, #4]
   12668:	add	fp, sp, #4
   1266c:	sub	sp, sp, #16
   12670:	str	r0, [fp, #-8]
   12674:	ldr	r3, [fp, #-8]
   12678:	ldr	r3, [r3]
   1267c:	and	r3, r3, #256	; 0x100
   12680:	cmp	r3, #0
   12684:	beq	126a0 <__assert_fail@plt+0x1808>
   12688:	mov	r3, #1
   1268c:	str	r3, [sp]
   12690:	mov	r2, #0
   12694:	mov	r3, #0
   12698:	ldr	r0, [fp, #-8]
   1269c:	bl	12a2c <__assert_fail@plt+0x1b94>
   126a0:	nop	{0}
   126a4:	sub	sp, fp, #4
   126a8:	ldr	fp, [sp]
   126ac:	add	sp, sp, #4
   126b0:	pop	{pc}		; (ldr pc, [sp], #4)
   126b4:	str	fp, [sp, #-8]!
   126b8:	str	lr, [sp, #4]
   126bc:	add	fp, sp, #4
   126c0:	sub	sp, sp, #8
   126c4:	str	r0, [fp, #-8]
   126c8:	ldr	r3, [fp, #-8]
   126cc:	cmp	r3, #0
   126d0:	beq	126e8 <__assert_fail@plt+0x1850>
   126d4:	ldr	r0, [fp, #-8]
   126d8:	bl	10d90 <__freading@plt>
   126dc:	mov	r3, r0
   126e0:	cmp	r3, #0
   126e4:	bne	126f8 <__assert_fail@plt+0x1860>
   126e8:	ldr	r0, [fp, #-8]
   126ec:	bl	10c7c <fflush@plt>
   126f0:	mov	r3, r0
   126f4:	b	1270c <__assert_fail@plt+0x1874>
   126f8:	ldr	r0, [fp, #-8]
   126fc:	bl	12660 <__assert_fail@plt+0x17c8>
   12700:	ldr	r0, [fp, #-8]
   12704:	bl	10c7c <fflush@plt>
   12708:	mov	r3, r0
   1270c:	mov	r0, r3
   12710:	sub	sp, fp, #4
   12714:	ldr	fp, [sp]
   12718:	add	sp, sp, #4
   1271c:	pop	{pc}		; (ldr pc, [sp], #4)
   12720:	str	r4, [sp, #-12]!
   12724:	str	fp, [sp, #4]
   12728:	str	lr, [sp, #8]
   1272c:	add	fp, sp, #8
   12730:	sub	sp, sp, #20
   12734:	str	r0, [fp, #-24]	; 0xffffffe8
   12738:	bl	10dfc <__errno_location@plt>
   1273c:	mov	r3, r0
   12740:	ldr	r3, [r3]
   12744:	str	r3, [fp, #-20]	; 0xffffffec
   12748:	bl	10dfc <__errno_location@plt>
   1274c:	mov	r3, r0
   12750:	ldr	r3, [r3]
   12754:	str	r3, [fp, #-16]
   12758:	bl	10dfc <__errno_location@plt>
   1275c:	mov	r2, r0
   12760:	mov	r3, #0
   12764:	str	r3, [r2]
   12768:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1276c:	bl	10c88 <free@plt>
   12770:	bl	10dfc <__errno_location@plt>
   12774:	mov	r3, r0
   12778:	ldr	r3, [r3]
   1277c:	cmp	r3, #0
   12780:	moveq	r3, #1
   12784:	movne	r3, #0
   12788:	uxtb	r3, r3
   1278c:	mov	r4, r3
   12790:	bl	10dfc <__errno_location@plt>
   12794:	mov	r2, r0
   12798:	lsl	r3, r4, #2
   1279c:	sub	r1, fp, #12
   127a0:	add	r3, r1, r3
   127a4:	ldr	r3, [r3, #-8]
   127a8:	str	r3, [r2]
   127ac:	nop	{0}
   127b0:	sub	sp, fp, #8
   127b4:	ldr	r4, [sp]
   127b8:	ldr	fp, [sp, #4]
   127bc:	add	sp, sp, #8
   127c0:	pop	{pc}		; (ldr pc, [sp], #4)
   127c4:	str	fp, [sp, #-8]!
   127c8:	str	lr, [sp, #4]
   127cc:	add	fp, sp, #4
   127d0:	sub	sp, sp, #16
   127d4:	str	r0, [fp, #-16]
   127d8:	mov	r1, #0
   127dc:	movw	r0, #32828	; 0x803c
   127e0:	movt	r0, #1
   127e4:	bl	10d60 <open64@plt>
   127e8:	str	r0, [fp, #-8]
   127ec:	ldr	r2, [fp, #-8]
   127f0:	ldr	r3, [fp, #-16]
   127f4:	cmp	r2, r3
   127f8:	beq	12828 <__assert_fail@plt+0x1990>
   127fc:	ldr	r3, [fp, #-8]
   12800:	cmp	r3, #0
   12804:	blt	12820 <__assert_fail@plt+0x1988>
   12808:	ldr	r0, [fp, #-8]
   1280c:	bl	10e8c <close@plt>
   12810:	bl	10dfc <__errno_location@plt>
   12814:	mov	r2, r0
   12818:	mov	r3, #9
   1281c:	str	r3, [r2]
   12820:	mov	r3, #0
   12824:	b	1282c <__assert_fail@plt+0x1994>
   12828:	mov	r3, #1
   1282c:	mov	r0, r3
   12830:	sub	sp, fp, #4
   12834:	ldr	fp, [sp]
   12838:	add	sp, sp, #4
   1283c:	pop	{pc}		; (ldr pc, [sp], #4)
   12840:	str	fp, [sp, #-8]!
   12844:	str	lr, [sp, #4]
   12848:	add	fp, sp, #4
   1284c:	sub	sp, sp, #24
   12850:	str	r0, [fp, #-16]
   12854:	str	r1, [fp, #-20]	; 0xffffffec
   12858:	str	r2, [fp, #-24]	; 0xffffffe8
   1285c:	mov	r3, #0
   12860:	strb	r3, [fp, #-5]
   12864:	mov	r3, #0
   12868:	strb	r3, [fp, #-6]
   1286c:	mov	r3, #0
   12870:	strb	r3, [fp, #-7]
   12874:	ldr	r0, [fp, #-24]	; 0xffffffe8
   12878:	bl	10e20 <fileno@plt>
   1287c:	mov	r3, r0
   12880:	cmp	r3, #1
   12884:	beq	128d8 <__assert_fail@plt+0x1a40>
   12888:	cmp	r3, #2
   1288c:	beq	128b8 <__assert_fail@plt+0x1a20>
   12890:	cmp	r3, #0
   12894:	beq	128f8 <__assert_fail@plt+0x1a60>
   12898:	mov	r1, #2
   1289c:	mov	r0, #2
   128a0:	bl	10cdc <dup2@plt>
   128a4:	mov	r3, r0
   128a8:	cmp	r3, #2
   128ac:	beq	128b8 <__assert_fail@plt+0x1a20>
   128b0:	mov	r3, #1
   128b4:	strb	r3, [fp, #-7]
   128b8:	mov	r1, #1
   128bc:	mov	r0, #1
   128c0:	bl	10cdc <dup2@plt>
   128c4:	mov	r3, r0
   128c8:	cmp	r3, #1
   128cc:	beq	128d8 <__assert_fail@plt+0x1a40>
   128d0:	mov	r3, #1
   128d4:	strb	r3, [fp, #-6]
   128d8:	mov	r1, #0
   128dc:	mov	r0, #0
   128e0:	bl	10cdc <dup2@plt>
   128e4:	mov	r3, r0
   128e8:	cmp	r3, #0
   128ec:	beq	128f8 <__assert_fail@plt+0x1a60>
   128f0:	mov	r3, #1
   128f4:	strb	r3, [fp, #-5]
   128f8:	nop	{0}
   128fc:	ldrb	r3, [fp, #-5]
   12900:	cmp	r3, #0
   12904:	beq	12930 <__assert_fail@plt+0x1a98>
   12908:	mov	r0, #0
   1290c:	bl	127c4 <__assert_fail@plt+0x192c>
   12910:	mov	r3, r0
   12914:	eor	r3, r3, #1
   12918:	uxtb	r3, r3
   1291c:	cmp	r3, #0
   12920:	beq	12930 <__assert_fail@plt+0x1a98>
   12924:	mov	r3, #0
   12928:	str	r3, [fp, #-24]	; 0xffffffe8
   1292c:	b	129ac <__assert_fail@plt+0x1b14>
   12930:	ldrb	r3, [fp, #-6]
   12934:	cmp	r3, #0
   12938:	beq	12964 <__assert_fail@plt+0x1acc>
   1293c:	mov	r0, #1
   12940:	bl	127c4 <__assert_fail@plt+0x192c>
   12944:	mov	r3, r0
   12948:	eor	r3, r3, #1
   1294c:	uxtb	r3, r3
   12950:	cmp	r3, #0
   12954:	beq	12964 <__assert_fail@plt+0x1acc>
   12958:	mov	r3, #0
   1295c:	str	r3, [fp, #-24]	; 0xffffffe8
   12960:	b	129ac <__assert_fail@plt+0x1b14>
   12964:	ldrb	r3, [fp, #-7]
   12968:	cmp	r3, #0
   1296c:	beq	12998 <__assert_fail@plt+0x1b00>
   12970:	mov	r0, #2
   12974:	bl	127c4 <__assert_fail@plt+0x192c>
   12978:	mov	r3, r0
   1297c:	eor	r3, r3, #1
   12980:	uxtb	r3, r3
   12984:	cmp	r3, #0
   12988:	beq	12998 <__assert_fail@plt+0x1b00>
   1298c:	mov	r3, #0
   12990:	str	r3, [fp, #-24]	; 0xffffffe8
   12994:	b	129ac <__assert_fail@plt+0x1b14>
   12998:	ldr	r2, [fp, #-24]	; 0xffffffe8
   1299c:	ldr	r1, [fp, #-20]	; 0xffffffec
   129a0:	ldr	r0, [fp, #-16]
   129a4:	bl	10da8 <freopen64@plt>
   129a8:	str	r0, [fp, #-24]	; 0xffffffe8
   129ac:	bl	10dfc <__errno_location@plt>
   129b0:	mov	r3, r0
   129b4:	ldr	r3, [r3]
   129b8:	str	r3, [fp, #-12]
   129bc:	ldrb	r3, [fp, #-7]
   129c0:	cmp	r3, #0
   129c4:	beq	129d0 <__assert_fail@plt+0x1b38>
   129c8:	mov	r0, #2
   129cc:	bl	10e8c <close@plt>
   129d0:	ldrb	r3, [fp, #-6]
   129d4:	cmp	r3, #0
   129d8:	beq	129e4 <__assert_fail@plt+0x1b4c>
   129dc:	mov	r0, #1
   129e0:	bl	10e8c <close@plt>
   129e4:	ldrb	r3, [fp, #-5]
   129e8:	cmp	r3, #0
   129ec:	beq	129f8 <__assert_fail@plt+0x1b60>
   129f0:	mov	r0, #0
   129f4:	bl	10e8c <close@plt>
   129f8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   129fc:	cmp	r3, #0
   12a00:	bne	12a14 <__assert_fail@plt+0x1b7c>
   12a04:	bl	10dfc <__errno_location@plt>
   12a08:	mov	r2, r0
   12a0c:	ldr	r3, [fp, #-12]
   12a10:	str	r3, [r2]
   12a14:	ldr	r3, [fp, #-24]	; 0xffffffe8
   12a18:	mov	r0, r3
   12a1c:	sub	sp, fp, #4
   12a20:	ldr	fp, [sp]
   12a24:	add	sp, sp, #4
   12a28:	pop	{pc}		; (ldr pc, [sp], #4)
   12a2c:	str	fp, [sp, #-8]!
   12a30:	str	lr, [sp, #4]
   12a34:	add	fp, sp, #4
   12a38:	sub	sp, sp, #32
   12a3c:	str	r0, [fp, #-16]
   12a40:	strd	r2, [fp, #-28]	; 0xffffffe4
   12a44:	ldr	r3, [fp, #-16]
   12a48:	ldr	r2, [r3, #8]
   12a4c:	ldr	r3, [fp, #-16]
   12a50:	ldr	r3, [r3, #4]
   12a54:	cmp	r2, r3
   12a58:	bne	12af0 <__assert_fail@plt+0x1c58>
   12a5c:	ldr	r3, [fp, #-16]
   12a60:	ldr	r2, [r3, #20]
   12a64:	ldr	r3, [fp, #-16]
   12a68:	ldr	r3, [r3, #16]
   12a6c:	cmp	r2, r3
   12a70:	bne	12af0 <__assert_fail@plt+0x1c58>
   12a74:	ldr	r3, [fp, #-16]
   12a78:	ldr	r3, [r3, #36]	; 0x24
   12a7c:	cmp	r3, #0
   12a80:	bne	12af0 <__assert_fail@plt+0x1c58>
   12a84:	ldr	r0, [fp, #-16]
   12a88:	bl	10e20 <fileno@plt>
   12a8c:	mov	r1, r0
   12a90:	ldr	r3, [fp, #4]
   12a94:	str	r3, [sp]
   12a98:	ldrd	r2, [fp, #-28]	; 0xffffffe4
   12a9c:	mov	r0, r1
   12aa0:	bl	10d18 <lseek64@plt>
   12aa4:	strd	r0, [fp, #-12]
   12aa8:	ldrd	r2, [fp, #-12]
   12aac:	mvn	r0, #0
   12ab0:	mvn	r1, #0
   12ab4:	cmp	r3, r1
   12ab8:	cmpeq	r2, r0
   12abc:	bne	12ac8 <__assert_fail@plt+0x1c30>
   12ac0:	mvn	r3, #0
   12ac4:	b	12b08 <__assert_fail@plt+0x1c70>
   12ac8:	ldr	r3, [fp, #-16]
   12acc:	ldr	r3, [r3]
   12ad0:	bic	r2, r3, #16
   12ad4:	ldr	r3, [fp, #-16]
   12ad8:	str	r2, [r3]
   12adc:	ldr	r1, [fp, #-16]
   12ae0:	ldrd	r2, [fp, #-12]
   12ae4:	strd	r2, [r1, #80]	; 0x50
   12ae8:	mov	r3, #0
   12aec:	b	12b08 <__assert_fail@plt+0x1c70>
   12af0:	ldr	r3, [fp, #4]
   12af4:	str	r3, [sp]
   12af8:	ldrd	r2, [fp, #-28]	; 0xffffffe4
   12afc:	ldr	r0, [fp, #-16]
   12b00:	bl	10e38 <fseeko64@plt>
   12b04:	mov	r3, r0
   12b08:	mov	r0, r3
   12b0c:	sub	sp, fp, #4
   12b10:	ldr	fp, [sp]
   12b14:	add	sp, sp, #4
   12b18:	pop	{pc}		; (ldr pc, [sp], #4)
   12b1c:	str	fp, [sp, #-8]!
   12b20:	str	lr, [sp, #4]
   12b24:	add	fp, sp, #4
   12b28:	sub	sp, sp, #40	; 0x28
   12b2c:	str	r0, [fp, #-24]	; 0xffffffe8
   12b30:	str	r1, [fp, #-28]	; 0xffffffe4
   12b34:	str	r2, [fp, #-32]	; 0xffffffe0
   12b38:	str	r3, [fp, #-36]	; 0xffffffdc
   12b3c:	movw	r3, #37200	; 0x9150
   12b40:	movt	r3, #2
   12b44:	ldr	r3, [r3]
   12b48:	str	r3, [fp, #-8]
   12b4c:	movw	r3, #37200	; 0x9150
   12b50:	movt	r3, #2
   12b54:	mov	r2, #0
   12b58:	str	r2, [r3]
   12b5c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   12b60:	cmp	r3, #2
   12b64:	bne	12bfc <__assert_fail@plt+0x1d64>
   12b68:	mov	r3, #0
   12b6c:	str	r3, [sp]
   12b70:	movw	r3, #32856	; 0x8058
   12b74:	movt	r3, #1
   12b78:	movw	r2, #32904	; 0x8088
   12b7c:	movt	r2, #1
   12b80:	ldr	r1, [fp, #-28]	; 0xffffffe4
   12b84:	ldr	r0, [fp, #-24]	; 0xffffffe8
   12b88:	bl	10db4 <getopt_long@plt>
   12b8c:	str	r0, [fp, #-12]
   12b90:	ldr	r3, [fp, #-12]
   12b94:	cmn	r3, #1
   12b98:	beq	12bfc <__assert_fail@plt+0x1d64>
   12b9c:	ldr	r3, [fp, #-12]
   12ba0:	cmp	r3, #104	; 0x68
   12ba4:	beq	12bb8 <__assert_fail@plt+0x1d20>
   12ba8:	ldr	r3, [fp, #-12]
   12bac:	cmp	r3, #118	; 0x76
   12bb0:	beq	12bc8 <__assert_fail@plt+0x1d30>
   12bb4:	b	12c00 <__assert_fail@plt+0x1d68>
   12bb8:	ldr	r3, [fp, #8]
   12bbc:	mov	r0, #0
   12bc0:	blx	r3
   12bc4:	b	12c00 <__assert_fail@plt+0x1d68>
   12bc8:	add	r3, fp, #12
   12bcc:	str	r3, [fp, #-16]
   12bd0:	movw	r3, #37196	; 0x914c
   12bd4:	movt	r3, #2
   12bd8:	ldr	r0, [r3]
   12bdc:	ldr	r3, [fp, #-16]
   12be0:	str	r3, [sp]
   12be4:	ldr	r3, [fp, #4]
   12be8:	ldr	r2, [fp, #-36]	; 0xffffffdc
   12bec:	ldr	r1, [fp, #-32]	; 0xffffffe0
   12bf0:	bl	16224 <__assert_fail@plt+0x538c>
   12bf4:	mov	r0, #0
   12bf8:	bl	10dcc <exit@plt>
   12bfc:	nop	{0}
   12c00:	movw	r3, #37200	; 0x9150
   12c04:	movt	r3, #2
   12c08:	ldr	r2, [fp, #-8]
   12c0c:	str	r2, [r3]
   12c10:	movw	r3, #37176	; 0x9138
   12c14:	movt	r3, #2
   12c18:	mov	r2, #0
   12c1c:	str	r2, [r3]
   12c20:	nop	{0}
   12c24:	sub	sp, fp, #4
   12c28:	ldr	fp, [sp]
   12c2c:	add	sp, sp, #4
   12c30:	pop	{pc}		; (ldr pc, [sp], #4)
   12c34:	str	fp, [sp, #-8]!
   12c38:	str	lr, [sp, #4]
   12c3c:	add	fp, sp, #4
   12c40:	sub	sp, sp, #40	; 0x28
   12c44:	str	r0, [fp, #-24]	; 0xffffffe8
   12c48:	str	r1, [fp, #-28]	; 0xffffffe4
   12c4c:	str	r2, [fp, #-32]	; 0xffffffe0
   12c50:	str	r3, [fp, #-36]	; 0xffffffdc
   12c54:	movw	r3, #37200	; 0x9150
   12c58:	movt	r3, #2
   12c5c:	ldr	r3, [r3]
   12c60:	str	r3, [fp, #-8]
   12c64:	movw	r3, #37200	; 0x9150
   12c68:	movt	r3, #2
   12c6c:	mov	r2, #1
   12c70:	str	r2, [r3]
   12c74:	ldrb	r3, [fp, #8]
   12c78:	cmp	r3, #0
   12c7c:	beq	12c8c <__assert_fail@plt+0x1df4>
   12c80:	movw	r3, #32908	; 0x808c
   12c84:	movt	r3, #1
   12c88:	b	12c94 <__assert_fail@plt+0x1dfc>
   12c8c:	movw	r3, #32904	; 0x8088
   12c90:	movt	r3, #1
   12c94:	str	r3, [fp, #-12]
   12c98:	mov	r3, #0
   12c9c:	str	r3, [sp]
   12ca0:	movw	r3, #32856	; 0x8058
   12ca4:	movt	r3, #1
   12ca8:	ldr	r2, [fp, #-12]
   12cac:	ldr	r1, [fp, #-28]	; 0xffffffe4
   12cb0:	ldr	r0, [fp, #-24]	; 0xffffffe8
   12cb4:	bl	10db4 <getopt_long@plt>
   12cb8:	str	r0, [fp, #-16]
   12cbc:	ldr	r3, [fp, #-16]
   12cc0:	cmn	r3, #1
   12cc4:	beq	12d44 <__assert_fail@plt+0x1eac>
   12cc8:	ldr	r3, [fp, #-16]
   12ccc:	cmp	r3, #104	; 0x68
   12cd0:	beq	12ce4 <__assert_fail@plt+0x1e4c>
   12cd4:	ldr	r3, [fp, #-16]
   12cd8:	cmp	r3, #118	; 0x76
   12cdc:	beq	12cf4 <__assert_fail@plt+0x1e5c>
   12ce0:	b	12d28 <__assert_fail@plt+0x1e90>
   12ce4:	ldr	r3, [fp, #12]
   12ce8:	mov	r0, #0
   12cec:	blx	r3
   12cf0:	b	12d48 <__assert_fail@plt+0x1eb0>
   12cf4:	add	r3, fp, #16
   12cf8:	str	r3, [fp, #-20]	; 0xffffffec
   12cfc:	movw	r3, #37196	; 0x914c
   12d00:	movt	r3, #2
   12d04:	ldr	r0, [r3]
   12d08:	ldr	r3, [fp, #-20]	; 0xffffffec
   12d0c:	str	r3, [sp]
   12d10:	ldr	r3, [fp, #4]
   12d14:	ldr	r2, [fp, #-36]	; 0xffffffdc
   12d18:	ldr	r1, [fp, #-32]	; 0xffffffe0
   12d1c:	bl	16224 <__assert_fail@plt+0x538c>
   12d20:	mov	r0, #0
   12d24:	bl	10dcc <exit@plt>
   12d28:	movw	r3, #37096	; 0x90e8
   12d2c:	movt	r3, #2
   12d30:	ldr	r2, [r3]
   12d34:	ldr	r3, [fp, #12]
   12d38:	mov	r0, r2
   12d3c:	blx	r3
   12d40:	b	12d48 <__assert_fail@plt+0x1eb0>
   12d44:	nop	{0}
   12d48:	movw	r3, #37200	; 0x9150
   12d4c:	movt	r3, #2
   12d50:	ldr	r2, [fp, #-8]
   12d54:	str	r2, [r3]
   12d58:	nop	{0}
   12d5c:	sub	sp, fp, #4
   12d60:	ldr	fp, [sp]
   12d64:	add	sp, sp, #4
   12d68:	pop	{pc}		; (ldr pc, [sp], #4)
   12d6c:	str	fp, [sp, #-8]!
   12d70:	str	lr, [sp, #4]
   12d74:	add	fp, sp, #4
   12d78:	sub	sp, sp, #16
   12d7c:	str	r0, [fp, #-16]
   12d80:	ldr	r3, [fp, #-16]
   12d84:	cmp	r3, #0
   12d88:	bne	12db0 <__assert_fail@plt+0x1f18>
   12d8c:	movw	r3, #37184	; 0x9140
   12d90:	movt	r3, #2
   12d94:	ldr	r3, [r3]
   12d98:	mov	r2, #55	; 0x37
   12d9c:	mov	r1, #1
   12da0:	movw	r0, #32912	; 0x8090
   12da4:	movt	r0, #1
   12da8:	bl	10d0c <fwrite@plt>
   12dac:	bl	10e80 <abort@plt>
   12db0:	mov	r1, #47	; 0x2f
   12db4:	ldr	r0, [fp, #-16]
   12db8:	bl	10e50 <strrchr@plt>
   12dbc:	str	r0, [fp, #-8]
   12dc0:	ldr	r3, [fp, #-8]
   12dc4:	cmp	r3, #0
   12dc8:	beq	12dd8 <__assert_fail@plt+0x1f40>
   12dcc:	ldr	r3, [fp, #-8]
   12dd0:	add	r3, r3, #1
   12dd4:	b	12ddc <__assert_fail@plt+0x1f44>
   12dd8:	ldr	r3, [fp, #-16]
   12ddc:	str	r3, [fp, #-12]
   12de0:	ldr	r2, [fp, #-12]
   12de4:	ldr	r3, [fp, #-16]
   12de8:	sub	r3, r2, r3
   12dec:	cmp	r3, #6
   12df0:	ble	12e60 <__assert_fail@plt+0x1fc8>
   12df4:	ldr	r3, [fp, #-12]
   12df8:	sub	r3, r3, #7
   12dfc:	mov	r2, #7
   12e00:	movw	r1, #32968	; 0x80c8
   12e04:	movt	r1, #1
   12e08:	mov	r0, r3
   12e0c:	bl	10e74 <strncmp@plt>
   12e10:	mov	r3, r0
   12e14:	cmp	r3, #0
   12e18:	bne	12e60 <__assert_fail@plt+0x1fc8>
   12e1c:	ldr	r3, [fp, #-12]
   12e20:	str	r3, [fp, #-16]
   12e24:	mov	r2, #3
   12e28:	movw	r1, #32976	; 0x80d0
   12e2c:	movt	r1, #1
   12e30:	ldr	r0, [fp, #-12]
   12e34:	bl	10e74 <strncmp@plt>
   12e38:	mov	r3, r0
   12e3c:	cmp	r3, #0
   12e40:	bne	12e60 <__assert_fail@plt+0x1fc8>
   12e44:	ldr	r3, [fp, #-12]
   12e48:	add	r3, r3, #3
   12e4c:	str	r3, [fp, #-16]
   12e50:	movw	r3, #37168	; 0x9130
   12e54:	movt	r3, #2
   12e58:	ldr	r2, [fp, #-16]
   12e5c:	str	r2, [r3]
   12e60:	movw	r3, #37232	; 0x9170
   12e64:	movt	r3, #2
   12e68:	ldr	r2, [fp, #-16]
   12e6c:	str	r2, [r3]
   12e70:	movw	r3, #37172	; 0x9134
   12e74:	movt	r3, #2
   12e78:	ldr	r2, [fp, #-16]
   12e7c:	str	r2, [r3]
   12e80:	nop	{0}
   12e84:	sub	sp, fp, #4
   12e88:	ldr	fp, [sp]
   12e8c:	add	sp, sp, #4
   12e90:	pop	{pc}		; (ldr pc, [sp], #4)
   12e94:	str	fp, [sp, #-8]!
   12e98:	str	lr, [sp, #4]
   12e9c:	add	fp, sp, #4
   12ea0:	sub	sp, sp, #16
   12ea4:	str	r0, [fp, #-16]
   12ea8:	bl	10dfc <__errno_location@plt>
   12eac:	mov	r3, r0
   12eb0:	ldr	r3, [r3]
   12eb4:	str	r3, [fp, #-8]
   12eb8:	ldr	r3, [fp, #-16]
   12ebc:	cmp	r3, #0
   12ec0:	beq	12ecc <__assert_fail@plt+0x2034>
   12ec4:	ldr	r3, [fp, #-16]
   12ec8:	b	12ed4 <__assert_fail@plt+0x203c>
   12ecc:	movw	r3, #37236	; 0x9174
   12ed0:	movt	r3, #2
   12ed4:	mov	r1, #48	; 0x30
   12ed8:	mov	r0, r3
   12edc:	bl	16b80 <__assert_fail@plt+0x5ce8>
   12ee0:	mov	r3, r0
   12ee4:	str	r3, [fp, #-12]
   12ee8:	bl	10dfc <__errno_location@plt>
   12eec:	mov	r2, r0
   12ef0:	ldr	r3, [fp, #-8]
   12ef4:	str	r3, [r2]
   12ef8:	ldr	r3, [fp, #-12]
   12efc:	mov	r0, r3
   12f00:	sub	sp, fp, #4
   12f04:	ldr	fp, [sp]
   12f08:	add	sp, sp, #4
   12f0c:	pop	{pc}		; (ldr pc, [sp], #4)
   12f10:	push	{fp}		; (str fp, [sp, #-4]!)
   12f14:	add	fp, sp, #0
   12f18:	sub	sp, sp, #12
   12f1c:	str	r0, [fp, #-8]
   12f20:	ldr	r3, [fp, #-8]
   12f24:	cmp	r3, #0
   12f28:	beq	12f34 <__assert_fail@plt+0x209c>
   12f2c:	ldr	r3, [fp, #-8]
   12f30:	b	12f3c <__assert_fail@plt+0x20a4>
   12f34:	movw	r3, #37236	; 0x9174
   12f38:	movt	r3, #2
   12f3c:	ldr	r3, [r3]
   12f40:	mov	r0, r3
   12f44:	add	sp, fp, #0
   12f48:	pop	{fp}		; (ldr fp, [sp], #4)
   12f4c:	bx	lr
   12f50:	push	{fp}		; (str fp, [sp, #-4]!)
   12f54:	add	fp, sp, #0
   12f58:	sub	sp, sp, #12
   12f5c:	str	r0, [fp, #-8]
   12f60:	str	r1, [fp, #-12]
   12f64:	ldr	r3, [fp, #-8]
   12f68:	cmp	r3, #0
   12f6c:	beq	12f78 <__assert_fail@plt+0x20e0>
   12f70:	ldr	r3, [fp, #-8]
   12f74:	b	12f80 <__assert_fail@plt+0x20e8>
   12f78:	movw	r3, #37236	; 0x9174
   12f7c:	movt	r3, #2
   12f80:	ldr	r2, [fp, #-12]
   12f84:	str	r2, [r3]
   12f88:	nop	{0}
   12f8c:	add	sp, fp, #0
   12f90:	pop	{fp}		; (ldr fp, [sp], #4)
   12f94:	bx	lr
   12f98:	push	{fp}		; (str fp, [sp, #-4]!)
   12f9c:	add	fp, sp, #0
   12fa0:	sub	sp, sp, #36	; 0x24
   12fa4:	str	r0, [fp, #-24]	; 0xffffffe8
   12fa8:	mov	r3, r1
   12fac:	str	r2, [fp, #-32]	; 0xffffffe0
   12fb0:	strb	r3, [fp, #-25]	; 0xffffffe7
   12fb4:	ldrb	r3, [fp, #-25]	; 0xffffffe7
   12fb8:	strb	r3, [fp, #-5]
   12fbc:	ldr	r3, [fp, #-24]	; 0xffffffe8
   12fc0:	cmp	r3, #0
   12fc4:	beq	12fd0 <__assert_fail@plt+0x2138>
   12fc8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   12fcc:	b	12fd8 <__assert_fail@plt+0x2140>
   12fd0:	movw	r3, #37236	; 0x9174
   12fd4:	movt	r3, #2
   12fd8:	add	r2, r3, #8
   12fdc:	ldrb	r3, [fp, #-5]
   12fe0:	lsr	r3, r3, #5
   12fe4:	uxtb	r3, r3
   12fe8:	lsl	r3, r3, #2
   12fec:	add	r3, r2, r3
   12ff0:	str	r3, [fp, #-12]
   12ff4:	ldrb	r3, [fp, #-5]
   12ff8:	and	r3, r3, #31
   12ffc:	str	r3, [fp, #-16]
   13000:	ldr	r3, [fp, #-12]
   13004:	ldr	r2, [r3]
   13008:	ldr	r3, [fp, #-16]
   1300c:	lsr	r3, r2, r3
   13010:	and	r3, r3, #1
   13014:	str	r3, [fp, #-20]	; 0xffffffec
   13018:	ldr	r3, [fp, #-12]
   1301c:	ldr	r3, [r3]
   13020:	ldr	r2, [fp, #-32]	; 0xffffffe0
   13024:	and	r1, r2, #1
   13028:	ldr	r2, [fp, #-20]	; 0xffffffec
   1302c:	eor	r1, r1, r2
   13030:	ldr	r2, [fp, #-16]
   13034:	lsl	r2, r1, r2
   13038:	eor	r2, r2, r3
   1303c:	ldr	r3, [fp, #-12]
   13040:	str	r2, [r3]
   13044:	ldr	r3, [fp, #-20]	; 0xffffffec
   13048:	mov	r0, r3
   1304c:	add	sp, fp, #0
   13050:	pop	{fp}		; (ldr fp, [sp], #4)
   13054:	bx	lr
   13058:	push	{fp}		; (str fp, [sp, #-4]!)
   1305c:	add	fp, sp, #0
   13060:	sub	sp, sp, #20
   13064:	str	r0, [fp, #-16]
   13068:	str	r1, [fp, #-20]	; 0xffffffec
   1306c:	ldr	r3, [fp, #-16]
   13070:	cmp	r3, #0
   13074:	bne	13084 <__assert_fail@plt+0x21ec>
   13078:	movw	r3, #37236	; 0x9174
   1307c:	movt	r3, #2
   13080:	str	r3, [fp, #-16]
   13084:	ldr	r3, [fp, #-16]
   13088:	ldr	r3, [r3, #4]
   1308c:	str	r3, [fp, #-8]
   13090:	ldr	r3, [fp, #-16]
   13094:	ldr	r2, [fp, #-20]	; 0xffffffec
   13098:	str	r2, [r3, #4]
   1309c:	ldr	r3, [fp, #-8]
   130a0:	mov	r0, r3
   130a4:	add	sp, fp, #0
   130a8:	pop	{fp}		; (ldr fp, [sp], #4)
   130ac:	bx	lr
   130b0:	str	fp, [sp, #-8]!
   130b4:	str	lr, [sp, #4]
   130b8:	add	fp, sp, #4
   130bc:	sub	sp, sp, #16
   130c0:	str	r0, [fp, #-8]
   130c4:	str	r1, [fp, #-12]
   130c8:	str	r2, [fp, #-16]
   130cc:	ldr	r3, [fp, #-8]
   130d0:	cmp	r3, #0
   130d4:	bne	130e4 <__assert_fail@plt+0x224c>
   130d8:	movw	r3, #37236	; 0x9174
   130dc:	movt	r3, #2
   130e0:	str	r3, [fp, #-8]
   130e4:	ldr	r3, [fp, #-8]
   130e8:	mov	r2, #10
   130ec:	str	r2, [r3]
   130f0:	ldr	r3, [fp, #-12]
   130f4:	cmp	r3, #0
   130f8:	beq	13108 <__assert_fail@plt+0x2270>
   130fc:	ldr	r3, [fp, #-16]
   13100:	cmp	r3, #0
   13104:	bne	1310c <__assert_fail@plt+0x2274>
   13108:	bl	10e80 <abort@plt>
   1310c:	ldr	r3, [fp, #-8]
   13110:	ldr	r2, [fp, #-12]
   13114:	str	r2, [r3, #40]	; 0x28
   13118:	ldr	r3, [fp, #-8]
   1311c:	ldr	r2, [fp, #-16]
   13120:	str	r2, [r3, #44]	; 0x2c
   13124:	nop	{0}
   13128:	sub	sp, fp, #4
   1312c:	ldr	fp, [sp]
   13130:	add	sp, sp, #4
   13134:	pop	{pc}		; (ldr pc, [sp], #4)
   13138:	str	fp, [sp, #-8]!
   1313c:	str	lr, [sp, #4]
   13140:	add	fp, sp, #4
   13144:	sub	sp, sp, #56	; 0x38
   13148:	str	r0, [fp, #-56]	; 0xffffffc8
   1314c:	str	r1, [fp, #-60]	; 0xffffffc4
   13150:	sub	r1, fp, #52	; 0x34
   13154:	mov	r2, #0
   13158:	mov	r3, #0
   1315c:	strd	r2, [r1]
   13160:	strd	r2, [r1, #8]
   13164:	strd	r2, [r1, #16]
   13168:	strd	r2, [r1, #24]
   1316c:	strd	r2, [r1, #32]
   13170:	strd	r2, [r1, #40]	; 0x28
   13174:	ldr	r3, [fp, #-60]	; 0xffffffc4
   13178:	cmp	r3, #10
   1317c:	bne	13184 <__assert_fail@plt+0x22ec>
   13180:	bl	10e80 <abort@plt>
   13184:	ldr	r3, [fp, #-60]	; 0xffffffc4
   13188:	str	r3, [fp, #-52]	; 0xffffffcc
   1318c:	ldr	r3, [fp, #-56]	; 0xffffffc8
   13190:	mov	r2, r3
   13194:	sub	r3, fp, #52	; 0x34
   13198:	ldrd	r0, [r3]
   1319c:	strd	r0, [r2]
   131a0:	ldrd	r0, [r3, #8]
   131a4:	strd	r0, [r2, #8]
   131a8:	ldrd	r0, [r3, #16]
   131ac:	strd	r0, [r2, #16]
   131b0:	ldrd	r0, [r3, #24]
   131b4:	strd	r0, [r2, #24]
   131b8:	ldrd	r0, [r3, #32]
   131bc:	strd	r0, [r2, #32]
   131c0:	ldrd	r0, [r3, #40]	; 0x28
   131c4:	strd	r0, [r2, #40]	; 0x28
   131c8:	ldr	r0, [fp, #-56]	; 0xffffffc8
   131cc:	sub	sp, fp, #4
   131d0:	ldr	fp, [sp]
   131d4:	add	sp, sp, #4
   131d8:	pop	{pc}		; (ldr pc, [sp], #4)
   131dc:	str	fp, [sp, #-8]!
   131e0:	str	lr, [sp, #4]
   131e4:	add	fp, sp, #4
   131e8:	sub	sp, sp, #16
   131ec:	str	r0, [fp, #-16]
   131f0:	str	r1, [fp, #-20]	; 0xffffffec
   131f4:	ldr	r0, [fp, #-16]
   131f8:	bl	10dd8 <gettext@plt>
   131fc:	str	r0, [fp, #-8]
   13200:	ldr	r2, [fp, #-8]
   13204:	ldr	r3, [fp, #-16]
   13208:	cmp	r2, r3
   1320c:	beq	13218 <__assert_fail@plt+0x2380>
   13210:	ldr	r3, [fp, #-8]
   13214:	b	132c8 <__assert_fail@plt+0x2430>
   13218:	bl	1723c <__assert_fail@plt+0x63a4>
   1321c:	str	r0, [fp, #-12]
   13220:	movw	r1, #33168	; 0x8190
   13224:	movt	r1, #1
   13228:	ldr	r0, [fp, #-12]
   1322c:	bl	16f30 <__assert_fail@plt+0x6098>
   13230:	mov	r3, r0
   13234:	cmp	r3, #0
   13238:	bne	13264 <__assert_fail@plt+0x23cc>
   1323c:	ldr	r3, [fp, #-16]
   13240:	ldrb	r3, [r3]
   13244:	cmp	r3, #96	; 0x60
   13248:	bne	13258 <__assert_fail@plt+0x23c0>
   1324c:	movw	r3, #33176	; 0x8198
   13250:	movt	r3, #1
   13254:	b	132c8 <__assert_fail@plt+0x2430>
   13258:	movw	r3, #33180	; 0x819c
   1325c:	movt	r3, #1
   13260:	b	132c8 <__assert_fail@plt+0x2430>
   13264:	movw	r1, #33184	; 0x81a0
   13268:	movt	r1, #1
   1326c:	ldr	r0, [fp, #-12]
   13270:	bl	16f30 <__assert_fail@plt+0x6098>
   13274:	mov	r3, r0
   13278:	cmp	r3, #0
   1327c:	bne	132a8 <__assert_fail@plt+0x2410>
   13280:	ldr	r3, [fp, #-16]
   13284:	ldrb	r3, [r3]
   13288:	cmp	r3, #96	; 0x60
   1328c:	bne	1329c <__assert_fail@plt+0x2404>
   13290:	movw	r3, #33192	; 0x81a8
   13294:	movt	r3, #1
   13298:	b	132c8 <__assert_fail@plt+0x2430>
   1329c:	movw	r3, #33196	; 0x81ac
   132a0:	movt	r3, #1
   132a4:	b	132c8 <__assert_fail@plt+0x2430>
   132a8:	ldr	r3, [fp, #-20]	; 0xffffffec
   132ac:	cmp	r3, #9
   132b0:	bne	132c0 <__assert_fail@plt+0x2428>
   132b4:	movw	r3, #33200	; 0x81b0
   132b8:	movt	r3, #1
   132bc:	b	132c8 <__assert_fail@plt+0x2430>
   132c0:	movw	r3, #33204	; 0x81b4
   132c4:	movt	r3, #1
   132c8:	mov	r0, r3
   132cc:	sub	sp, fp, #4
   132d0:	ldr	fp, [sp]
   132d4:	add	sp, sp, #4
   132d8:	pop	{pc}		; (ldr pc, [sp], #4)
   132dc:	str	r4, [sp, #-12]!
   132e0:	str	fp, [sp, #4]
   132e4:	str	lr, [sp, #8]
   132e8:	add	fp, sp, #8
   132ec:	sub	sp, sp, #116	; 0x74
   132f0:	str	r0, [fp, #-88]	; 0xffffffa8
   132f4:	str	r1, [fp, #-92]	; 0xffffffa4
   132f8:	str	r2, [fp, #-96]	; 0xffffffa0
   132fc:	str	r3, [fp, #-100]	; 0xffffff9c
   13300:	mov	r3, #0
   13304:	str	r3, [fp, #-20]	; 0xffffffec
   13308:	mov	r3, #0
   1330c:	str	r3, [fp, #-24]	; 0xffffffe8
   13310:	mov	r3, #0
   13314:	str	r3, [fp, #-28]	; 0xffffffe4
   13318:	mov	r3, #0
   1331c:	str	r3, [fp, #-32]	; 0xffffffe0
   13320:	mov	r3, #0
   13324:	strb	r3, [fp, #-33]	; 0xffffffdf
   13328:	bl	10d24 <__ctype_get_mb_cur_max@plt>
   1332c:	mov	r3, r0
   13330:	cmp	r3, #1
   13334:	moveq	r3, #1
   13338:	movne	r3, #0
   1333c:	strb	r3, [fp, #-57]	; 0xffffffc7
   13340:	ldr	r3, [fp, #8]
   13344:	and	r3, r3, #2
   13348:	cmp	r3, #0
   1334c:	movne	r3, #1
   13350:	moveq	r3, #0
   13354:	strb	r3, [fp, #-34]	; 0xffffffde
   13358:	mov	r3, #0
   1335c:	strb	r3, [fp, #-35]	; 0xffffffdd
   13360:	mov	r3, #0
   13364:	strb	r3, [fp, #-36]	; 0xffffffdc
   13368:	mov	r3, #1
   1336c:	strb	r3, [fp, #-37]	; 0xffffffdb
   13370:	ldr	r3, [fp, #4]
   13374:	cmp	r3, #10
   13378:	ldrls	pc, [pc, r3, lsl #2]
   1337c:	b	13594 <__assert_fail@plt+0x26fc>
   13380:	andeq	r3, r1, r8, lsl #11
   13384:	andeq	r3, r1, r0, lsl #10
   13388:	andeq	r3, r1, r4, lsr #10
   1338c:	strdeq	r3, [r1], -r8
   13390:	andeq	r3, r1, r8, lsl #10
   13394:			; <UNDEFINED> instruction: 0x000133bc
   13398:	andeq	r3, r1, ip, lsr #7
   1339c:	andeq	r3, r1, r0, lsr #8
   133a0:	andeq	r3, r1, r4, lsr r4
   133a4:	andeq	r3, r1, r4, lsr r4
   133a8:	andeq	r3, r1, r4, lsr r4
   133ac:	mov	r3, #5
   133b0:	str	r3, [fp, #4]
   133b4:	mov	r3, #1
   133b8:	strb	r3, [fp, #-34]	; 0xffffffde
   133bc:	ldrb	r3, [fp, #-34]	; 0xffffffde
   133c0:	eor	r3, r3, #1
   133c4:	uxtb	r3, r3
   133c8:	cmp	r3, #0
   133cc:	beq	13400 <__assert_fail@plt+0x2568>
   133d0:	ldr	r2, [fp, #-20]	; 0xffffffec
   133d4:	ldr	r3, [fp, #-92]	; 0xffffffa4
   133d8:	cmp	r2, r3
   133dc:	bcs	133f4 <__assert_fail@plt+0x255c>
   133e0:	ldr	r2, [fp, #-88]	; 0xffffffa8
   133e4:	ldr	r3, [fp, #-20]	; 0xffffffec
   133e8:	add	r3, r2, r3
   133ec:	mov	r2, #34	; 0x22
   133f0:	strb	r2, [r3]
   133f4:	ldr	r3, [fp, #-20]	; 0xffffffec
   133f8:	add	r3, r3, #1
   133fc:	str	r3, [fp, #-20]	; 0xffffffec
   13400:	mov	r3, #1
   13404:	strb	r3, [fp, #-33]	; 0xffffffdf
   13408:	movw	r3, #33200	; 0x81b0
   1340c:	movt	r3, #1
   13410:	str	r3, [fp, #-28]	; 0xffffffe4
   13414:	mov	r3, #1
   13418:	str	r3, [fp, #-32]	; 0xffffffe0
   1341c:	b	13598 <__assert_fail@plt+0x2700>
   13420:	mov	r3, #1
   13424:	strb	r3, [fp, #-33]	; 0xffffffdf
   13428:	mov	r3, #0
   1342c:	strb	r3, [fp, #-34]	; 0xffffffde
   13430:	b	13598 <__assert_fail@plt+0x2700>
   13434:	ldr	r3, [fp, #4]
   13438:	cmp	r3, #10
   1343c:	beq	13468 <__assert_fail@plt+0x25d0>
   13440:	ldr	r1, [fp, #4]
   13444:	movw	r0, #33208	; 0x81b8
   13448:	movt	r0, #1
   1344c:	bl	131dc <__assert_fail@plt+0x2344>
   13450:	str	r0, [fp, #16]
   13454:	ldr	r1, [fp, #4]
   13458:	movw	r0, #33204	; 0x81b4
   1345c:	movt	r0, #1
   13460:	bl	131dc <__assert_fail@plt+0x2344>
   13464:	str	r0, [fp, #20]
   13468:	ldrb	r3, [fp, #-34]	; 0xffffffde
   1346c:	eor	r3, r3, #1
   13470:	uxtb	r3, r3
   13474:	cmp	r3, #0
   13478:	beq	134d8 <__assert_fail@plt+0x2640>
   1347c:	ldr	r3, [fp, #16]
   13480:	str	r3, [fp, #-28]	; 0xffffffe4
   13484:	b	134c8 <__assert_fail@plt+0x2630>
   13488:	ldr	r2, [fp, #-20]	; 0xffffffec
   1348c:	ldr	r3, [fp, #-92]	; 0xffffffa4
   13490:	cmp	r2, r3
   13494:	bcs	134b0 <__assert_fail@plt+0x2618>
   13498:	ldr	r2, [fp, #-88]	; 0xffffffa8
   1349c:	ldr	r3, [fp, #-20]	; 0xffffffec
   134a0:	add	r3, r2, r3
   134a4:	ldr	r2, [fp, #-28]	; 0xffffffe4
   134a8:	ldrb	r2, [r2]
   134ac:	strb	r2, [r3]
   134b0:	ldr	r3, [fp, #-20]	; 0xffffffec
   134b4:	add	r3, r3, #1
   134b8:	str	r3, [fp, #-20]	; 0xffffffec
   134bc:	ldr	r3, [fp, #-28]	; 0xffffffe4
   134c0:	add	r3, r3, #1
   134c4:	str	r3, [fp, #-28]	; 0xffffffe4
   134c8:	ldr	r3, [fp, #-28]	; 0xffffffe4
   134cc:	ldrb	r3, [r3]
   134d0:	cmp	r3, #0
   134d4:	bne	13488 <__assert_fail@plt+0x25f0>
   134d8:	mov	r3, #1
   134dc:	strb	r3, [fp, #-33]	; 0xffffffdf
   134e0:	ldr	r3, [fp, #20]
   134e4:	str	r3, [fp, #-28]	; 0xffffffe4
   134e8:	ldr	r0, [fp, #-28]	; 0xffffffe4
   134ec:	bl	10de4 <strlen@plt>
   134f0:	str	r0, [fp, #-32]	; 0xffffffe0
   134f4:	b	13598 <__assert_fail@plt+0x2700>
   134f8:	mov	r3, #1
   134fc:	strb	r3, [fp, #-33]	; 0xffffffdf
   13500:	mov	r3, #1
   13504:	strb	r3, [fp, #-34]	; 0xffffffde
   13508:	ldrb	r3, [fp, #-34]	; 0xffffffde
   1350c:	eor	r3, r3, #1
   13510:	uxtb	r3, r3
   13514:	cmp	r3, #0
   13518:	beq	13524 <__assert_fail@plt+0x268c>
   1351c:	mov	r3, #1
   13520:	strb	r3, [fp, #-33]	; 0xffffffdf
   13524:	mov	r3, #2
   13528:	str	r3, [fp, #4]
   1352c:	ldrb	r3, [fp, #-34]	; 0xffffffde
   13530:	eor	r3, r3, #1
   13534:	uxtb	r3, r3
   13538:	cmp	r3, #0
   1353c:	beq	13570 <__assert_fail@plt+0x26d8>
   13540:	ldr	r2, [fp, #-20]	; 0xffffffec
   13544:	ldr	r3, [fp, #-92]	; 0xffffffa4
   13548:	cmp	r2, r3
   1354c:	bcs	13564 <__assert_fail@plt+0x26cc>
   13550:	ldr	r2, [fp, #-88]	; 0xffffffa8
   13554:	ldr	r3, [fp, #-20]	; 0xffffffec
   13558:	add	r3, r2, r3
   1355c:	mov	r2, #39	; 0x27
   13560:	strb	r2, [r3]
   13564:	ldr	r3, [fp, #-20]	; 0xffffffec
   13568:	add	r3, r3, #1
   1356c:	str	r3, [fp, #-20]	; 0xffffffec
   13570:	movw	r3, #33204	; 0x81b4
   13574:	movt	r3, #1
   13578:	str	r3, [fp, #-28]	; 0xffffffe4
   1357c:	mov	r3, #1
   13580:	str	r3, [fp, #-32]	; 0xffffffe0
   13584:	b	13598 <__assert_fail@plt+0x2700>
   13588:	mov	r3, #0
   1358c:	strb	r3, [fp, #-34]	; 0xffffffde
   13590:	b	13598 <__assert_fail@plt+0x2700>
   13594:	bl	10e80 <abort@plt>
   13598:	mov	r3, #0
   1359c:	str	r3, [fp, #-16]
   135a0:	b	1473c <__assert_fail@plt+0x38a4>
   135a4:	mov	r3, #0
   135a8:	strb	r3, [fp, #-40]	; 0xffffffd8
   135ac:	mov	r3, #0
   135b0:	strb	r3, [fp, #-41]	; 0xffffffd7
   135b4:	mov	r3, #0
   135b8:	strb	r3, [fp, #-42]	; 0xffffffd6
   135bc:	ldrb	r3, [fp, #-33]	; 0xffffffdf
   135c0:	cmp	r3, #0
   135c4:	beq	13660 <__assert_fail@plt+0x27c8>
   135c8:	ldr	r3, [fp, #4]
   135cc:	cmp	r3, #2
   135d0:	beq	13660 <__assert_fail@plt+0x27c8>
   135d4:	ldr	r3, [fp, #-32]	; 0xffffffe0
   135d8:	cmp	r3, #0
   135dc:	beq	13660 <__assert_fail@plt+0x27c8>
   135e0:	ldr	r2, [fp, #-16]
   135e4:	ldr	r3, [fp, #-32]	; 0xffffffe0
   135e8:	add	r4, r2, r3
   135ec:	ldr	r3, [fp, #-100]	; 0xffffff9c
   135f0:	cmn	r3, #1
   135f4:	bne	13618 <__assert_fail@plt+0x2780>
   135f8:	ldr	r3, [fp, #-32]	; 0xffffffe0
   135fc:	cmp	r3, #1
   13600:	bls	13618 <__assert_fail@plt+0x2780>
   13604:	ldr	r0, [fp, #-96]	; 0xffffffa0
   13608:	bl	10de4 <strlen@plt>
   1360c:	str	r0, [fp, #-100]	; 0xffffff9c
   13610:	ldr	r3, [fp, #-100]	; 0xffffff9c
   13614:	b	1361c <__assert_fail@plt+0x2784>
   13618:	ldr	r3, [fp, #-100]	; 0xffffff9c
   1361c:	cmp	r3, r4
   13620:	bcc	13660 <__assert_fail@plt+0x27c8>
   13624:	ldr	r2, [fp, #-96]	; 0xffffffa0
   13628:	ldr	r3, [fp, #-16]
   1362c:	add	r3, r2, r3
   13630:	ldr	r2, [fp, #-32]	; 0xffffffe0
   13634:	ldr	r1, [fp, #-28]	; 0xffffffe4
   13638:	mov	r0, r3
   1363c:	bl	10cb8 <memcmp@plt>
   13640:	mov	r3, r0
   13644:	cmp	r3, #0
   13648:	bne	13660 <__assert_fail@plt+0x27c8>
   1364c:	ldrb	r3, [fp, #-34]	; 0xffffffde
   13650:	cmp	r3, #0
   13654:	bne	148f8 <__assert_fail@plt+0x3a60>
   13658:	mov	r3, #1
   1365c:	strb	r3, [fp, #-40]	; 0xffffffd8
   13660:	ldr	r2, [fp, #-96]	; 0xffffffa0
   13664:	ldr	r3, [fp, #-16]
   13668:	add	r3, r2, r3
   1366c:	ldrb	r3, [r3]
   13670:	strb	r3, [fp, #-38]	; 0xffffffda
   13674:	ldrb	r3, [fp, #-38]	; 0xffffffda
   13678:	cmp	r3, #126	; 0x7e
   1367c:	ldrls	pc, [pc, r3, lsl #2]
   13680:	b	13eb8 <__assert_fail@plt+0x3020>
   13684:	andeq	r3, r1, r0, lsl #17
   13688:			; <UNDEFINED> instruction: 0x00013eb8
   1368c:			; <UNDEFINED> instruction: 0x00013eb8
   13690:			; <UNDEFINED> instruction: 0x00013eb8
   13694:			; <UNDEFINED> instruction: 0x00013eb8
   13698:			; <UNDEFINED> instruction: 0x00013eb8
   1369c:			; <UNDEFINED> instruction: 0x00013eb8
   136a0:	andeq	r3, r1, r4, ror ip
   136a4:	andeq	r3, r1, r0, lsl #25
   136a8:			; <UNDEFINED> instruction: 0x00013cb0
   136ac:	muleq	r1, r8, ip
   136b0:			; <UNDEFINED> instruction: 0x00013cbc
   136b4:	andeq	r3, r1, ip, lsl #25
   136b8:	andeq	r3, r1, r4, lsr #25
   136bc:			; <UNDEFINED> instruction: 0x00013eb8
   136c0:			; <UNDEFINED> instruction: 0x00013eb8
   136c4:			; <UNDEFINED> instruction: 0x00013eb8
   136c8:			; <UNDEFINED> instruction: 0x00013eb8
   136cc:			; <UNDEFINED> instruction: 0x00013eb8
   136d0:			; <UNDEFINED> instruction: 0x00013eb8
   136d4:			; <UNDEFINED> instruction: 0x00013eb8
   136d8:			; <UNDEFINED> instruction: 0x00013eb8
   136dc:			; <UNDEFINED> instruction: 0x00013eb8
   136e0:			; <UNDEFINED> instruction: 0x00013eb8
   136e4:			; <UNDEFINED> instruction: 0x00013eb8
   136e8:			; <UNDEFINED> instruction: 0x00013eb8
   136ec:			; <UNDEFINED> instruction: 0x00013eb8
   136f0:			; <UNDEFINED> instruction: 0x00013eb8
   136f4:			; <UNDEFINED> instruction: 0x00013eb8
   136f8:			; <UNDEFINED> instruction: 0x00013eb8
   136fc:			; <UNDEFINED> instruction: 0x00013eb8
   13700:			; <UNDEFINED> instruction: 0x00013eb8
   13704:	muleq	r1, ip, sp
   13708:	andeq	r3, r1, r4, lsr #27
   1370c:	andeq	r3, r1, r4, lsr #27
   13710:	muleq	r1, r0, sp
   13714:	andeq	r3, r1, r4, lsr #27
   13718:	andeq	r3, r1, ip, lsr #29
   1371c:	andeq	r3, r1, r4, lsr #27
   13720:	andeq	r3, r1, r0, asr #27
   13724:	andeq	r3, r1, r4, lsr #27
   13728:	andeq	r3, r1, r4, lsr #27
   1372c:	andeq	r3, r1, r4, lsr #27
   13730:	andeq	r3, r1, ip, lsr #29
   13734:	andeq	r3, r1, ip, lsr #29
   13738:	andeq	r3, r1, ip, lsr #29
   1373c:	andeq	r3, r1, ip, lsr #29
   13740:	andeq	r3, r1, ip, lsr #29
   13744:	andeq	r3, r1, ip, lsr #29
   13748:	andeq	r3, r1, ip, lsr #29
   1374c:	andeq	r3, r1, ip, lsr #29
   13750:	andeq	r3, r1, ip, lsr #29
   13754:	andeq	r3, r1, ip, lsr #29
   13758:	andeq	r3, r1, ip, lsr #29
   1375c:	andeq	r3, r1, ip, lsr #29
   13760:	andeq	r3, r1, ip, lsr #29
   13764:	andeq	r3, r1, ip, lsr #29
   13768:	andeq	r3, r1, ip, lsr #29
   1376c:	andeq	r3, r1, ip, lsr #29
   13770:	andeq	r3, r1, r4, lsr #27
   13774:	andeq	r3, r1, r4, lsr #27
   13778:	andeq	r3, r1, r4, lsr #27
   1377c:	andeq	r3, r1, r4, lsr #27
   13780:	andeq	r3, r1, r0, ror #20
   13784:			; <UNDEFINED> instruction: 0x00013eb8
   13788:	andeq	r3, r1, ip, lsr #29
   1378c:	andeq	r3, r1, ip, lsr #29
   13790:	andeq	r3, r1, ip, lsr #29
   13794:	andeq	r3, r1, ip, lsr #29
   13798:	andeq	r3, r1, ip, lsr #29
   1379c:	andeq	r3, r1, ip, lsr #29
   137a0:	andeq	r3, r1, ip, lsr #29
   137a4:	andeq	r3, r1, ip, lsr #29
   137a8:	andeq	r3, r1, ip, lsr #29
   137ac:	andeq	r3, r1, ip, lsr #29
   137b0:	andeq	r3, r1, ip, lsr #29
   137b4:	andeq	r3, r1, ip, lsr #29
   137b8:	andeq	r3, r1, ip, lsr #29
   137bc:	andeq	r3, r1, ip, lsr #29
   137c0:	andeq	r3, r1, ip, lsr #29
   137c4:	andeq	r3, r1, ip, lsr #29
   137c8:	andeq	r3, r1, ip, lsr #29
   137cc:	andeq	r3, r1, ip, lsr #29
   137d0:	andeq	r3, r1, ip, lsr #29
   137d4:	andeq	r3, r1, ip, lsr #29
   137d8:	andeq	r3, r1, ip, lsr #29
   137dc:	andeq	r3, r1, ip, lsr #29
   137e0:	andeq	r3, r1, ip, lsr #29
   137e4:	andeq	r3, r1, ip, lsr #29
   137e8:	andeq	r3, r1, ip, lsr #29
   137ec:	andeq	r3, r1, ip, lsr #29
   137f0:	andeq	r3, r1, r4, lsr #27
   137f4:	andeq	r3, r1, r8, asr #25
   137f8:	andeq	r3, r1, ip, lsr #29
   137fc:	andeq	r3, r1, r4, lsr #27
   13800:	andeq	r3, r1, ip, lsr #29
   13804:	andeq	r3, r1, r4, lsr #27
   13808:	andeq	r3, r1, ip, lsr #29
   1380c:	andeq	r3, r1, ip, lsr #29
   13810:	andeq	r3, r1, ip, lsr #29
   13814:	andeq	r3, r1, ip, lsr #29
   13818:	andeq	r3, r1, ip, lsr #29
   1381c:	andeq	r3, r1, ip, lsr #29
   13820:	andeq	r3, r1, ip, lsr #29
   13824:	andeq	r3, r1, ip, lsr #29
   13828:	andeq	r3, r1, ip, lsr #29
   1382c:	andeq	r3, r1, ip, lsr #29
   13830:	andeq	r3, r1, ip, lsr #29
   13834:	andeq	r3, r1, ip, lsr #29
   13838:	andeq	r3, r1, ip, lsr #29
   1383c:	andeq	r3, r1, ip, lsr #29
   13840:	andeq	r3, r1, ip, lsr #29
   13844:	andeq	r3, r1, ip, lsr #29
   13848:	andeq	r3, r1, ip, lsr #29
   1384c:	andeq	r3, r1, ip, lsr #29
   13850:	andeq	r3, r1, ip, lsr #29
   13854:	andeq	r3, r1, ip, lsr #29
   13858:	andeq	r3, r1, ip, lsr #29
   1385c:	andeq	r3, r1, ip, lsr #29
   13860:	andeq	r3, r1, ip, lsr #29
   13864:	andeq	r3, r1, ip, lsr #29
   13868:	andeq	r3, r1, ip, lsr #29
   1386c:	andeq	r3, r1, ip, lsr #29
   13870:	andeq	r3, r1, r8, asr #26
   13874:	andeq	r3, r1, r4, lsr #27
   13878:	andeq	r3, r1, r8, asr #26
   1387c:	muleq	r1, r0, sp
   13880:	ldrb	r3, [fp, #-33]	; 0xffffffdf
   13884:	cmp	r3, #0
   13888:	beq	13a4c <__assert_fail@plt+0x2bb4>
   1388c:	ldrb	r3, [fp, #-34]	; 0xffffffde
   13890:	cmp	r3, #0
   13894:	bne	14900 <__assert_fail@plt+0x3a68>
   13898:	mov	r3, #1
   1389c:	strb	r3, [fp, #-41]	; 0xffffffd7
   138a0:	ldr	r3, [fp, #4]
   138a4:	cmp	r3, #2
   138a8:	bne	13958 <__assert_fail@plt+0x2ac0>
   138ac:	ldrb	r3, [fp, #-35]	; 0xffffffdd
   138b0:	eor	r3, r3, #1
   138b4:	uxtb	r3, r3
   138b8:	cmp	r3, #0
   138bc:	beq	13958 <__assert_fail@plt+0x2ac0>
   138c0:	ldr	r2, [fp, #-20]	; 0xffffffec
   138c4:	ldr	r3, [fp, #-92]	; 0xffffffa4
   138c8:	cmp	r2, r3
   138cc:	bcs	138e4 <__assert_fail@plt+0x2a4c>
   138d0:	ldr	r2, [fp, #-88]	; 0xffffffa8
   138d4:	ldr	r3, [fp, #-20]	; 0xffffffec
   138d8:	add	r3, r2, r3
   138dc:	mov	r2, #39	; 0x27
   138e0:	strb	r2, [r3]
   138e4:	ldr	r3, [fp, #-20]	; 0xffffffec
   138e8:	add	r3, r3, #1
   138ec:	str	r3, [fp, #-20]	; 0xffffffec
   138f0:	ldr	r2, [fp, #-20]	; 0xffffffec
   138f4:	ldr	r3, [fp, #-92]	; 0xffffffa4
   138f8:	cmp	r2, r3
   138fc:	bcs	13914 <__assert_fail@plt+0x2a7c>
   13900:	ldr	r2, [fp, #-88]	; 0xffffffa8
   13904:	ldr	r3, [fp, #-20]	; 0xffffffec
   13908:	add	r3, r2, r3
   1390c:	mov	r2, #36	; 0x24
   13910:	strb	r2, [r3]
   13914:	ldr	r3, [fp, #-20]	; 0xffffffec
   13918:	add	r3, r3, #1
   1391c:	str	r3, [fp, #-20]	; 0xffffffec
   13920:	ldr	r2, [fp, #-20]	; 0xffffffec
   13924:	ldr	r3, [fp, #-92]	; 0xffffffa4
   13928:	cmp	r2, r3
   1392c:	bcs	13944 <__assert_fail@plt+0x2aac>
   13930:	ldr	r2, [fp, #-88]	; 0xffffffa8
   13934:	ldr	r3, [fp, #-20]	; 0xffffffec
   13938:	add	r3, r2, r3
   1393c:	mov	r2, #39	; 0x27
   13940:	strb	r2, [r3]
   13944:	ldr	r3, [fp, #-20]	; 0xffffffec
   13948:	add	r3, r3, #1
   1394c:	str	r3, [fp, #-20]	; 0xffffffec
   13950:	mov	r3, #1
   13954:	strb	r3, [fp, #-35]	; 0xffffffdd
   13958:	ldr	r2, [fp, #-20]	; 0xffffffec
   1395c:	ldr	r3, [fp, #-92]	; 0xffffffa4
   13960:	cmp	r2, r3
   13964:	bcs	1397c <__assert_fail@plt+0x2ae4>
   13968:	ldr	r2, [fp, #-88]	; 0xffffffa8
   1396c:	ldr	r3, [fp, #-20]	; 0xffffffec
   13970:	add	r3, r2, r3
   13974:	mov	r2, #92	; 0x5c
   13978:	strb	r2, [r3]
   1397c:	ldr	r3, [fp, #-20]	; 0xffffffec
   13980:	add	r3, r3, #1
   13984:	str	r3, [fp, #-20]	; 0xffffffec
   13988:	ldr	r3, [fp, #4]
   1398c:	cmp	r3, #2
   13990:	beq	13a40 <__assert_fail@plt+0x2ba8>
   13994:	ldr	r3, [fp, #-16]
   13998:	add	r3, r3, #1
   1399c:	ldr	r2, [fp, #-100]	; 0xffffff9c
   139a0:	cmp	r2, r3
   139a4:	bls	13a40 <__assert_fail@plt+0x2ba8>
   139a8:	ldr	r3, [fp, #-16]
   139ac:	add	r3, r3, #1
   139b0:	ldr	r2, [fp, #-96]	; 0xffffffa0
   139b4:	add	r3, r2, r3
   139b8:	ldrb	r3, [r3]
   139bc:	cmp	r3, #47	; 0x2f
   139c0:	bls	13a40 <__assert_fail@plt+0x2ba8>
   139c4:	ldr	r3, [fp, #-16]
   139c8:	add	r3, r3, #1
   139cc:	ldr	r2, [fp, #-96]	; 0xffffffa0
   139d0:	add	r3, r2, r3
   139d4:	ldrb	r3, [r3]
   139d8:	cmp	r3, #57	; 0x39
   139dc:	bhi	13a40 <__assert_fail@plt+0x2ba8>
   139e0:	ldr	r2, [fp, #-20]	; 0xffffffec
   139e4:	ldr	r3, [fp, #-92]	; 0xffffffa4
   139e8:	cmp	r2, r3
   139ec:	bcs	13a04 <__assert_fail@plt+0x2b6c>
   139f0:	ldr	r2, [fp, #-88]	; 0xffffffa8
   139f4:	ldr	r3, [fp, #-20]	; 0xffffffec
   139f8:	add	r3, r2, r3
   139fc:	mov	r2, #48	; 0x30
   13a00:	strb	r2, [r3]
   13a04:	ldr	r3, [fp, #-20]	; 0xffffffec
   13a08:	add	r3, r3, #1
   13a0c:	str	r3, [fp, #-20]	; 0xffffffec
   13a10:	ldr	r2, [fp, #-20]	; 0xffffffec
   13a14:	ldr	r3, [fp, #-92]	; 0xffffffa4
   13a18:	cmp	r2, r3
   13a1c:	bcs	13a34 <__assert_fail@plt+0x2b9c>
   13a20:	ldr	r2, [fp, #-88]	; 0xffffffa8
   13a24:	ldr	r3, [fp, #-20]	; 0xffffffec
   13a28:	add	r3, r2, r3
   13a2c:	mov	r2, #48	; 0x30
   13a30:	strb	r2, [r3]
   13a34:	ldr	r3, [fp, #-20]	; 0xffffffec
   13a38:	add	r3, r3, #1
   13a3c:	str	r3, [fp, #-20]	; 0xffffffec
   13a40:	mov	r3, #48	; 0x30
   13a44:	strb	r3, [fp, #-38]	; 0xffffffda
   13a48:	b	14488 <__assert_fail@plt+0x35f0>
   13a4c:	ldr	r3, [fp, #8]
   13a50:	and	r3, r3, #1
   13a54:	cmp	r3, #0
   13a58:	beq	14488 <__assert_fail@plt+0x35f0>
   13a5c:	b	14730 <__assert_fail@plt+0x3898>
   13a60:	ldr	r3, [fp, #4]
   13a64:	cmp	r3, #2
   13a68:	beq	13a7c <__assert_fail@plt+0x2be4>
   13a6c:	ldr	r3, [fp, #4]
   13a70:	cmp	r3, #5
   13a74:	beq	13a8c <__assert_fail@plt+0x2bf4>
   13a78:	b	13c70 <__assert_fail@plt+0x2dd8>
   13a7c:	ldrb	r3, [fp, #-34]	; 0xffffffde
   13a80:	cmp	r3, #0
   13a84:	beq	13c64 <__assert_fail@plt+0x2dcc>
   13a88:	b	14934 <__assert_fail@plt+0x3a9c>
   13a8c:	ldr	r3, [fp, #8]
   13a90:	and	r3, r3, #4
   13a94:	cmp	r3, #0
   13a98:	beq	13c6c <__assert_fail@plt+0x2dd4>
   13a9c:	ldr	r3, [fp, #-16]
   13aa0:	add	r3, r3, #2
   13aa4:	ldr	r2, [fp, #-100]	; 0xffffff9c
   13aa8:	cmp	r2, r3
   13aac:	bls	13c6c <__assert_fail@plt+0x2dd4>
   13ab0:	ldr	r3, [fp, #-16]
   13ab4:	add	r3, r3, #1
   13ab8:	ldr	r2, [fp, #-96]	; 0xffffffa0
   13abc:	add	r3, r2, r3
   13ac0:	ldrb	r3, [r3]
   13ac4:	cmp	r3, #63	; 0x3f
   13ac8:	bne	13c6c <__assert_fail@plt+0x2dd4>
   13acc:	ldr	r3, [fp, #-16]
   13ad0:	add	r3, r3, #2
   13ad4:	ldr	r2, [fp, #-96]	; 0xffffffa0
   13ad8:	add	r3, r2, r3
   13adc:	ldrb	r3, [r3]
   13ae0:	sub	r3, r3, #33	; 0x21
   13ae4:	cmp	r3, #29
   13ae8:	ldrls	pc, [pc, r3, lsl #2]
   13aec:	b	13c5c <__assert_fail@plt+0x2dc4>
   13af0:	andeq	r3, r1, r8, ror #22
   13af4:	andeq	r3, r1, ip, asr ip
   13af8:	andeq	r3, r1, ip, asr ip
   13afc:	andeq	r3, r1, ip, asr ip
   13b00:	andeq	r3, r1, ip, asr ip
   13b04:	andeq	r3, r1, ip, asr ip
   13b08:	andeq	r3, r1, r8, ror #22
   13b0c:	andeq	r3, r1, r8, ror #22
   13b10:	andeq	r3, r1, r8, ror #22
   13b14:	andeq	r3, r1, ip, asr ip
   13b18:	andeq	r3, r1, ip, asr ip
   13b1c:	andeq	r3, r1, ip, asr ip
   13b20:	andeq	r3, r1, r8, ror #22
   13b24:	andeq	r3, r1, ip, asr ip
   13b28:	andeq	r3, r1, r8, ror #22
   13b2c:	andeq	r3, r1, ip, asr ip
   13b30:	andeq	r3, r1, ip, asr ip
   13b34:	andeq	r3, r1, ip, asr ip
   13b38:	andeq	r3, r1, ip, asr ip
   13b3c:	andeq	r3, r1, ip, asr ip
   13b40:	andeq	r3, r1, ip, asr ip
   13b44:	andeq	r3, r1, ip, asr ip
   13b48:	andeq	r3, r1, ip, asr ip
   13b4c:	andeq	r3, r1, ip, asr ip
   13b50:	andeq	r3, r1, ip, asr ip
   13b54:	andeq	r3, r1, ip, asr ip
   13b58:	andeq	r3, r1, ip, asr ip
   13b5c:	andeq	r3, r1, r8, ror #22
   13b60:	andeq	r3, r1, r8, ror #22
   13b64:	andeq	r3, r1, r8, ror #22
   13b68:	ldrb	r3, [fp, #-34]	; 0xffffffde
   13b6c:	cmp	r3, #0
   13b70:	bne	14908 <__assert_fail@plt+0x3a70>
   13b74:	ldr	r3, [fp, #-16]
   13b78:	add	r3, r3, #2
   13b7c:	ldr	r2, [fp, #-96]	; 0xffffffa0
   13b80:	add	r3, r2, r3
   13b84:	ldrb	r3, [r3]
   13b88:	strb	r3, [fp, #-38]	; 0xffffffda
   13b8c:	ldr	r3, [fp, #-16]
   13b90:	add	r3, r3, #2
   13b94:	str	r3, [fp, #-16]
   13b98:	ldr	r2, [fp, #-20]	; 0xffffffec
   13b9c:	ldr	r3, [fp, #-92]	; 0xffffffa4
   13ba0:	cmp	r2, r3
   13ba4:	bcs	13bbc <__assert_fail@plt+0x2d24>
   13ba8:	ldr	r2, [fp, #-88]	; 0xffffffa8
   13bac:	ldr	r3, [fp, #-20]	; 0xffffffec
   13bb0:	add	r3, r2, r3
   13bb4:	mov	r2, #63	; 0x3f
   13bb8:	strb	r2, [r3]
   13bbc:	ldr	r3, [fp, #-20]	; 0xffffffec
   13bc0:	add	r3, r3, #1
   13bc4:	str	r3, [fp, #-20]	; 0xffffffec
   13bc8:	ldr	r2, [fp, #-20]	; 0xffffffec
   13bcc:	ldr	r3, [fp, #-92]	; 0xffffffa4
   13bd0:	cmp	r2, r3
   13bd4:	bcs	13bec <__assert_fail@plt+0x2d54>
   13bd8:	ldr	r2, [fp, #-88]	; 0xffffffa8
   13bdc:	ldr	r3, [fp, #-20]	; 0xffffffec
   13be0:	add	r3, r2, r3
   13be4:	mov	r2, #34	; 0x22
   13be8:	strb	r2, [r3]
   13bec:	ldr	r3, [fp, #-20]	; 0xffffffec
   13bf0:	add	r3, r3, #1
   13bf4:	str	r3, [fp, #-20]	; 0xffffffec
   13bf8:	ldr	r2, [fp, #-20]	; 0xffffffec
   13bfc:	ldr	r3, [fp, #-92]	; 0xffffffa4
   13c00:	cmp	r2, r3
   13c04:	bcs	13c1c <__assert_fail@plt+0x2d84>
   13c08:	ldr	r2, [fp, #-88]	; 0xffffffa8
   13c0c:	ldr	r3, [fp, #-20]	; 0xffffffec
   13c10:	add	r3, r2, r3
   13c14:	mov	r2, #34	; 0x22
   13c18:	strb	r2, [r3]
   13c1c:	ldr	r3, [fp, #-20]	; 0xffffffec
   13c20:	add	r3, r3, #1
   13c24:	str	r3, [fp, #-20]	; 0xffffffec
   13c28:	ldr	r2, [fp, #-20]	; 0xffffffec
   13c2c:	ldr	r3, [fp, #-92]	; 0xffffffa4
   13c30:	cmp	r2, r3
   13c34:	bcs	13c4c <__assert_fail@plt+0x2db4>
   13c38:	ldr	r2, [fp, #-88]	; 0xffffffa8
   13c3c:	ldr	r3, [fp, #-20]	; 0xffffffec
   13c40:	add	r3, r2, r3
   13c44:	mov	r2, #63	; 0x3f
   13c48:	strb	r2, [r3]
   13c4c:	ldr	r3, [fp, #-20]	; 0xffffffec
   13c50:	add	r3, r3, #1
   13c54:	str	r3, [fp, #-20]	; 0xffffffec
   13c58:	b	13c60 <__assert_fail@plt+0x2dc8>
   13c5c:	nop	{0}
   13c60:	b	13c6c <__assert_fail@plt+0x2dd4>
   13c64:	nop	{0}
   13c68:	b	144bc <__assert_fail@plt+0x3624>
   13c6c:	nop	{0}
   13c70:	b	144bc <__assert_fail@plt+0x3624>
   13c74:	mov	r3, #97	; 0x61
   13c78:	strb	r3, [fp, #-39]	; 0xffffffd9
   13c7c:	b	13d30 <__assert_fail@plt+0x2e98>
   13c80:	mov	r3, #98	; 0x62
   13c84:	strb	r3, [fp, #-39]	; 0xffffffd9
   13c88:	b	13d30 <__assert_fail@plt+0x2e98>
   13c8c:	mov	r3, #102	; 0x66
   13c90:	strb	r3, [fp, #-39]	; 0xffffffd9
   13c94:	b	13d30 <__assert_fail@plt+0x2e98>
   13c98:	mov	r3, #110	; 0x6e
   13c9c:	strb	r3, [fp, #-39]	; 0xffffffd9
   13ca0:	b	13d14 <__assert_fail@plt+0x2e7c>
   13ca4:	mov	r3, #114	; 0x72
   13ca8:	strb	r3, [fp, #-39]	; 0xffffffd9
   13cac:	b	13d14 <__assert_fail@plt+0x2e7c>
   13cb0:	mov	r3, #116	; 0x74
   13cb4:	strb	r3, [fp, #-39]	; 0xffffffd9
   13cb8:	b	13d14 <__assert_fail@plt+0x2e7c>
   13cbc:	mov	r3, #118	; 0x76
   13cc0:	strb	r3, [fp, #-39]	; 0xffffffd9
   13cc4:	b	13d30 <__assert_fail@plt+0x2e98>
   13cc8:	ldrb	r3, [fp, #-38]	; 0xffffffda
   13ccc:	strb	r3, [fp, #-39]	; 0xffffffd9
   13cd0:	ldr	r3, [fp, #4]
   13cd4:	cmp	r3, #2
   13cd8:	bne	13cec <__assert_fail@plt+0x2e54>
   13cdc:	ldrb	r3, [fp, #-34]	; 0xffffffde
   13ce0:	cmp	r3, #0
   13ce4:	beq	14648 <__assert_fail@plt+0x37b0>
   13ce8:	b	14934 <__assert_fail@plt+0x3a9c>
   13cec:	ldrb	r3, [fp, #-33]	; 0xffffffdf
   13cf0:	cmp	r3, #0
   13cf4:	beq	13d10 <__assert_fail@plt+0x2e78>
   13cf8:	ldrb	r3, [fp, #-34]	; 0xffffffde
   13cfc:	cmp	r3, #0
   13d00:	beq	13d10 <__assert_fail@plt+0x2e78>
   13d04:	ldr	r3, [fp, #-32]	; 0xffffffe0
   13d08:	cmp	r3, #0
   13d0c:	bne	14650 <__assert_fail@plt+0x37b8>
   13d10:	nop	{0}
   13d14:	ldr	r3, [fp, #4]
   13d18:	cmp	r3, #2
   13d1c:	bne	13d2c <__assert_fail@plt+0x2e94>
   13d20:	ldrb	r3, [fp, #-34]	; 0xffffffde
   13d24:	cmp	r3, #0
   13d28:	bne	14910 <__assert_fail@plt+0x3a78>
   13d2c:	nop	{0}
   13d30:	ldrb	r3, [fp, #-33]	; 0xffffffdf
   13d34:	cmp	r3, #0
   13d38:	beq	14490 <__assert_fail@plt+0x35f8>
   13d3c:	ldrb	r3, [fp, #-39]	; 0xffffffd9
   13d40:	strb	r3, [fp, #-38]	; 0xffffffda
   13d44:	b	14548 <__assert_fail@plt+0x36b0>
   13d48:	ldr	r3, [fp, #-100]	; 0xffffff9c
   13d4c:	cmn	r3, #1
   13d50:	bne	13d74 <__assert_fail@plt+0x2edc>
   13d54:	ldr	r3, [fp, #-96]	; 0xffffffa0
   13d58:	add	r3, r3, #1
   13d5c:	ldrb	r3, [r3]
   13d60:	cmp	r3, #0
   13d64:	movne	r3, #1
   13d68:	moveq	r3, #0
   13d6c:	uxtb	r3, r3
   13d70:	b	13d88 <__assert_fail@plt+0x2ef0>
   13d74:	ldr	r3, [fp, #-100]	; 0xffffff9c
   13d78:	cmp	r3, #1
   13d7c:	movne	r3, #1
   13d80:	moveq	r3, #0
   13d84:	uxtb	r3, r3
   13d88:	cmp	r3, #0
   13d8c:	bne	14498 <__assert_fail@plt+0x3600>
   13d90:	ldr	r3, [fp, #-16]
   13d94:	cmp	r3, #0
   13d98:	bne	144a0 <__assert_fail@plt+0x3608>
   13d9c:	mov	r3, #1
   13da0:	strb	r3, [fp, #-42]	; 0xffffffd6
   13da4:	ldr	r3, [fp, #4]
   13da8:	cmp	r3, #2
   13dac:	bne	144a8 <__assert_fail@plt+0x3610>
   13db0:	ldrb	r3, [fp, #-34]	; 0xffffffde
   13db4:	cmp	r3, #0
   13db8:	beq	144a8 <__assert_fail@plt+0x3610>
   13dbc:	b	14934 <__assert_fail@plt+0x3a9c>
   13dc0:	mov	r3, #1
   13dc4:	strb	r3, [fp, #-36]	; 0xffffffdc
   13dc8:	mov	r3, #1
   13dcc:	strb	r3, [fp, #-42]	; 0xffffffd6
   13dd0:	ldr	r3, [fp, #4]
   13dd4:	cmp	r3, #2
   13dd8:	bne	144b0 <__assert_fail@plt+0x3618>
   13ddc:	ldrb	r3, [fp, #-34]	; 0xffffffde
   13de0:	cmp	r3, #0
   13de4:	bne	14918 <__assert_fail@plt+0x3a80>
   13de8:	ldr	r3, [fp, #-92]	; 0xffffffa4
   13dec:	cmp	r3, #0
   13df0:	beq	13e10 <__assert_fail@plt+0x2f78>
   13df4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   13df8:	cmp	r3, #0
   13dfc:	bne	13e10 <__assert_fail@plt+0x2f78>
   13e00:	ldr	r3, [fp, #-92]	; 0xffffffa4
   13e04:	str	r3, [fp, #-24]	; 0xffffffe8
   13e08:	mov	r3, #0
   13e0c:	str	r3, [fp, #-92]	; 0xffffffa4
   13e10:	ldr	r2, [fp, #-20]	; 0xffffffec
   13e14:	ldr	r3, [fp, #-92]	; 0xffffffa4
   13e18:	cmp	r2, r3
   13e1c:	bcs	13e34 <__assert_fail@plt+0x2f9c>
   13e20:	ldr	r2, [fp, #-88]	; 0xffffffa8
   13e24:	ldr	r3, [fp, #-20]	; 0xffffffec
   13e28:	add	r3, r2, r3
   13e2c:	mov	r2, #39	; 0x27
   13e30:	strb	r2, [r3]
   13e34:	ldr	r3, [fp, #-20]	; 0xffffffec
   13e38:	add	r3, r3, #1
   13e3c:	str	r3, [fp, #-20]	; 0xffffffec
   13e40:	ldr	r2, [fp, #-20]	; 0xffffffec
   13e44:	ldr	r3, [fp, #-92]	; 0xffffffa4
   13e48:	cmp	r2, r3
   13e4c:	bcs	13e64 <__assert_fail@plt+0x2fcc>
   13e50:	ldr	r2, [fp, #-88]	; 0xffffffa8
   13e54:	ldr	r3, [fp, #-20]	; 0xffffffec
   13e58:	add	r3, r2, r3
   13e5c:	mov	r2, #92	; 0x5c
   13e60:	strb	r2, [r3]
   13e64:	ldr	r3, [fp, #-20]	; 0xffffffec
   13e68:	add	r3, r3, #1
   13e6c:	str	r3, [fp, #-20]	; 0xffffffec
   13e70:	ldr	r2, [fp, #-20]	; 0xffffffec
   13e74:	ldr	r3, [fp, #-92]	; 0xffffffa4
   13e78:	cmp	r2, r3
   13e7c:	bcs	13e94 <__assert_fail@plt+0x2ffc>
   13e80:	ldr	r2, [fp, #-88]	; 0xffffffa8
   13e84:	ldr	r3, [fp, #-20]	; 0xffffffec
   13e88:	add	r3, r2, r3
   13e8c:	mov	r2, #39	; 0x27
   13e90:	strb	r2, [r3]
   13e94:	ldr	r3, [fp, #-20]	; 0xffffffec
   13e98:	add	r3, r3, #1
   13e9c:	str	r3, [fp, #-20]	; 0xffffffec
   13ea0:	mov	r3, #0
   13ea4:	strb	r3, [fp, #-35]	; 0xffffffdd
   13ea8:	b	144b0 <__assert_fail@plt+0x3618>
   13eac:	mov	r3, #1
   13eb0:	strb	r3, [fp, #-42]	; 0xffffffd6
   13eb4:	b	144bc <__assert_fail@plt+0x3624>
   13eb8:	ldrb	r3, [fp, #-57]	; 0xffffffc7
   13ebc:	cmp	r3, #0
   13ec0:	beq	13f00 <__assert_fail@plt+0x3068>
   13ec4:	mov	r3, #1
   13ec8:	str	r3, [fp, #-48]	; 0xffffffd0
   13ecc:	bl	10dc0 <__ctype_b_loc@plt>
   13ed0:	mov	r3, r0
   13ed4:	ldr	r2, [r3]
   13ed8:	ldrb	r3, [fp, #-38]	; 0xffffffda
   13edc:	lsl	r3, r3, #1
   13ee0:	add	r3, r2, r3
   13ee4:	ldrh	r3, [r3]
   13ee8:	and	r3, r3, #16384	; 0x4000
   13eec:	cmp	r3, #0
   13ef0:	movne	r3, #1
   13ef4:	moveq	r3, #0
   13ef8:	strb	r3, [fp, #-49]	; 0xffffffcf
   13efc:	b	1414c <__assert_fail@plt+0x32b4>
   13f00:	sub	r3, fp, #76	; 0x4c
   13f04:	mov	r2, #8
   13f08:	mov	r1, #0
   13f0c:	mov	r0, r3
   13f10:	bl	10e14 <memset@plt>
   13f14:	mov	r3, #0
   13f18:	str	r3, [fp, #-48]	; 0xffffffd0
   13f1c:	mov	r3, #1
   13f20:	strb	r3, [fp, #-49]	; 0xffffffcf
   13f24:	ldr	r3, [fp, #-100]	; 0xffffff9c
   13f28:	cmn	r3, #1
   13f2c:	bne	13f3c <__assert_fail@plt+0x30a4>
   13f30:	ldr	r0, [fp, #-96]	; 0xffffffa0
   13f34:	bl	10de4 <strlen@plt>
   13f38:	str	r0, [fp, #-100]	; 0xffffff9c
   13f3c:	ldr	r2, [fp, #-16]
   13f40:	ldr	r3, [fp, #-48]	; 0xffffffd0
   13f44:	add	r3, r2, r3
   13f48:	ldr	r2, [fp, #-96]	; 0xffffffa0
   13f4c:	add	r1, r2, r3
   13f50:	ldr	r2, [fp, #-16]
   13f54:	ldr	r3, [fp, #-48]	; 0xffffffd0
   13f58:	add	r3, r2, r3
   13f5c:	ldr	r2, [fp, #-100]	; 0xffffff9c
   13f60:	sub	r2, r2, r3
   13f64:	sub	r3, fp, #76	; 0x4c
   13f68:	sub	r0, fp, #80	; 0x50
   13f6c:	bl	172a4 <__assert_fail@plt+0x640c>
   13f70:	str	r0, [fp, #-64]	; 0xffffffc0
   13f74:	ldr	r3, [fp, #-64]	; 0xffffffc0
   13f78:	cmp	r3, #0
   13f7c:	beq	14140 <__assert_fail@plt+0x32a8>
   13f80:	ldr	r3, [fp, #-64]	; 0xffffffc0
   13f84:	cmn	r3, #1
   13f88:	bne	13f98 <__assert_fail@plt+0x3100>
   13f8c:	mov	r3, #0
   13f90:	strb	r3, [fp, #-49]	; 0xffffffcf
   13f94:	b	1414c <__assert_fail@plt+0x32b4>
   13f98:	ldr	r3, [fp, #-64]	; 0xffffffc0
   13f9c:	cmn	r3, #2
   13fa0:	bne	13ff8 <__assert_fail@plt+0x3160>
   13fa4:	mov	r3, #0
   13fa8:	strb	r3, [fp, #-49]	; 0xffffffcf
   13fac:	b	13fbc <__assert_fail@plt+0x3124>
   13fb0:	ldr	r3, [fp, #-48]	; 0xffffffd0
   13fb4:	add	r3, r3, #1
   13fb8:	str	r3, [fp, #-48]	; 0xffffffd0
   13fbc:	ldr	r2, [fp, #-16]
   13fc0:	ldr	r3, [fp, #-48]	; 0xffffffd0
   13fc4:	add	r3, r2, r3
   13fc8:	ldr	r2, [fp, #-100]	; 0xffffff9c
   13fcc:	cmp	r2, r3
   13fd0:	bls	14148 <__assert_fail@plt+0x32b0>
   13fd4:	ldr	r2, [fp, #-16]
   13fd8:	ldr	r3, [fp, #-48]	; 0xffffffd0
   13fdc:	add	r3, r2, r3
   13fe0:	ldr	r2, [fp, #-96]	; 0xffffffa0
   13fe4:	add	r3, r2, r3
   13fe8:	ldrb	r3, [r3]
   13fec:	cmp	r3, #0
   13ff0:	bne	13fb0 <__assert_fail@plt+0x3118>
   13ff4:	b	14148 <__assert_fail@plt+0x32b0>
   13ff8:	ldrb	r3, [fp, #-34]	; 0xffffffde
   13ffc:	cmp	r3, #0
   14000:	beq	140f4 <__assert_fail@plt+0x325c>
   14004:	ldr	r3, [fp, #4]
   14008:	cmp	r3, #2
   1400c:	bne	140f4 <__assert_fail@plt+0x325c>
   14010:	mov	r3, #1
   14014:	str	r3, [fp, #-56]	; 0xffffffc8
   14018:	b	140e4 <__assert_fail@plt+0x324c>
   1401c:	ldr	r2, [fp, #-16]
   14020:	ldr	r3, [fp, #-48]	; 0xffffffd0
   14024:	add	r2, r2, r3
   14028:	ldr	r3, [fp, #-56]	; 0xffffffc8
   1402c:	add	r3, r2, r3
   14030:	ldr	r2, [fp, #-96]	; 0xffffffa0
   14034:	add	r3, r2, r3
   14038:	ldrb	r3, [r3]
   1403c:	sub	r3, r3, #91	; 0x5b
   14040:	cmp	r3, #33	; 0x21
   14044:	ldrls	pc, [pc, r3, lsl #2]
   14048:	b	140d4 <__assert_fail@plt+0x323c>
   1404c:	andeq	r4, r1, r4, lsr r9
   14050:	andeq	r4, r1, r4, lsr r9
   14054:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14058:	andeq	r4, r1, r4, lsr r9
   1405c:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14060:	andeq	r4, r1, r4, lsr r9
   14064:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14068:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   1406c:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14070:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14074:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14078:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   1407c:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14080:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14084:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14088:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   1408c:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14090:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14094:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14098:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   1409c:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   140a0:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   140a4:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   140a8:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   140ac:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   140b0:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   140b4:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   140b8:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   140bc:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   140c0:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   140c4:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   140c8:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   140cc:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   140d0:	andeq	r4, r1, r4, lsr r9
   140d4:	nop	{0}
   140d8:	ldr	r3, [fp, #-56]	; 0xffffffc8
   140dc:	add	r3, r3, #1
   140e0:	str	r3, [fp, #-56]	; 0xffffffc8
   140e4:	ldr	r2, [fp, #-56]	; 0xffffffc8
   140e8:	ldr	r3, [fp, #-64]	; 0xffffffc0
   140ec:	cmp	r2, r3
   140f0:	bcc	1401c <__assert_fail@plt+0x3184>
   140f4:	ldr	r3, [fp, #-80]	; 0xffffffb0
   140f8:	mov	r0, r3
   140fc:	bl	10d00 <iswprint@plt>
   14100:	mov	r3, r0
   14104:	cmp	r3, #0
   14108:	bne	14114 <__assert_fail@plt+0x327c>
   1410c:	mov	r3, #0
   14110:	strb	r3, [fp, #-49]	; 0xffffffcf
   14114:	ldr	r2, [fp, #-48]	; 0xffffffd0
   14118:	ldr	r3, [fp, #-64]	; 0xffffffc0
   1411c:	add	r3, r2, r3
   14120:	str	r3, [fp, #-48]	; 0xffffffd0
   14124:	sub	r3, fp, #76	; 0x4c
   14128:	mov	r0, r3
   1412c:	bl	10cac <mbsinit@plt>
   14130:	mov	r3, r0
   14134:	cmp	r3, #0
   14138:	beq	13f3c <__assert_fail@plt+0x30a4>
   1413c:	b	1414c <__assert_fail@plt+0x32b4>
   14140:	nop	{0}
   14144:	b	1414c <__assert_fail@plt+0x32b4>
   14148:	nop	{0}
   1414c:	ldrb	r3, [fp, #-49]	; 0xffffffcf
   14150:	strb	r3, [fp, #-42]	; 0xffffffd6
   14154:	ldr	r3, [fp, #-48]	; 0xffffffd0
   14158:	cmp	r3, #1
   1415c:	bhi	14180 <__assert_fail@plt+0x32e8>
   14160:	ldrb	r3, [fp, #-33]	; 0xffffffdf
   14164:	cmp	r3, #0
   14168:	beq	144b8 <__assert_fail@plt+0x3620>
   1416c:	ldrb	r3, [fp, #-49]	; 0xffffffcf
   14170:	eor	r3, r3, #1
   14174:	uxtb	r3, r3
   14178:	cmp	r3, #0
   1417c:	beq	144b8 <__assert_fail@plt+0x3620>
   14180:	ldr	r2, [fp, #-16]
   14184:	ldr	r3, [fp, #-48]	; 0xffffffd0
   14188:	add	r3, r2, r3
   1418c:	str	r3, [fp, #-68]	; 0xffffffbc
   14190:	ldrb	r3, [fp, #-33]	; 0xffffffdf
   14194:	cmp	r3, #0
   14198:	beq	1434c <__assert_fail@plt+0x34b4>
   1419c:	ldrb	r3, [fp, #-49]	; 0xffffffcf
   141a0:	eor	r3, r3, #1
   141a4:	uxtb	r3, r3
   141a8:	cmp	r3, #0
   141ac:	beq	1434c <__assert_fail@plt+0x34b4>
   141b0:	ldrb	r3, [fp, #-34]	; 0xffffffde
   141b4:	cmp	r3, #0
   141b8:	bne	14920 <__assert_fail@plt+0x3a88>
   141bc:	mov	r3, #1
   141c0:	strb	r3, [fp, #-41]	; 0xffffffd7
   141c4:	ldr	r3, [fp, #4]
   141c8:	cmp	r3, #2
   141cc:	bne	1427c <__assert_fail@plt+0x33e4>
   141d0:	ldrb	r3, [fp, #-35]	; 0xffffffdd
   141d4:	eor	r3, r3, #1
   141d8:	uxtb	r3, r3
   141dc:	cmp	r3, #0
   141e0:	beq	1427c <__assert_fail@plt+0x33e4>
   141e4:	ldr	r2, [fp, #-20]	; 0xffffffec
   141e8:	ldr	r3, [fp, #-92]	; 0xffffffa4
   141ec:	cmp	r2, r3
   141f0:	bcs	14208 <__assert_fail@plt+0x3370>
   141f4:	ldr	r2, [fp, #-88]	; 0xffffffa8
   141f8:	ldr	r3, [fp, #-20]	; 0xffffffec
   141fc:	add	r3, r2, r3
   14200:	mov	r2, #39	; 0x27
   14204:	strb	r2, [r3]
   14208:	ldr	r3, [fp, #-20]	; 0xffffffec
   1420c:	add	r3, r3, #1
   14210:	str	r3, [fp, #-20]	; 0xffffffec
   14214:	ldr	r2, [fp, #-20]	; 0xffffffec
   14218:	ldr	r3, [fp, #-92]	; 0xffffffa4
   1421c:	cmp	r2, r3
   14220:	bcs	14238 <__assert_fail@plt+0x33a0>
   14224:	ldr	r2, [fp, #-88]	; 0xffffffa8
   14228:	ldr	r3, [fp, #-20]	; 0xffffffec
   1422c:	add	r3, r2, r3
   14230:	mov	r2, #36	; 0x24
   14234:	strb	r2, [r3]
   14238:	ldr	r3, [fp, #-20]	; 0xffffffec
   1423c:	add	r3, r3, #1
   14240:	str	r3, [fp, #-20]	; 0xffffffec
   14244:	ldr	r2, [fp, #-20]	; 0xffffffec
   14248:	ldr	r3, [fp, #-92]	; 0xffffffa4
   1424c:	cmp	r2, r3
   14250:	bcs	14268 <__assert_fail@plt+0x33d0>
   14254:	ldr	r2, [fp, #-88]	; 0xffffffa8
   14258:	ldr	r3, [fp, #-20]	; 0xffffffec
   1425c:	add	r3, r2, r3
   14260:	mov	r2, #39	; 0x27
   14264:	strb	r2, [r3]
   14268:	ldr	r3, [fp, #-20]	; 0xffffffec
   1426c:	add	r3, r3, #1
   14270:	str	r3, [fp, #-20]	; 0xffffffec
   14274:	mov	r3, #1
   14278:	strb	r3, [fp, #-35]	; 0xffffffdd
   1427c:	ldr	r2, [fp, #-20]	; 0xffffffec
   14280:	ldr	r3, [fp, #-92]	; 0xffffffa4
   14284:	cmp	r2, r3
   14288:	bcs	142a0 <__assert_fail@plt+0x3408>
   1428c:	ldr	r2, [fp, #-88]	; 0xffffffa8
   14290:	ldr	r3, [fp, #-20]	; 0xffffffec
   14294:	add	r3, r2, r3
   14298:	mov	r2, #92	; 0x5c
   1429c:	strb	r2, [r3]
   142a0:	ldr	r3, [fp, #-20]	; 0xffffffec
   142a4:	add	r3, r3, #1
   142a8:	str	r3, [fp, #-20]	; 0xffffffec
   142ac:	ldr	r2, [fp, #-20]	; 0xffffffec
   142b0:	ldr	r3, [fp, #-92]	; 0xffffffa4
   142b4:	cmp	r2, r3
   142b8:	bcs	142e0 <__assert_fail@plt+0x3448>
   142bc:	ldrb	r3, [fp, #-38]	; 0xffffffda
   142c0:	lsr	r3, r3, #6
   142c4:	uxtb	r2, r3
   142c8:	ldr	r1, [fp, #-88]	; 0xffffffa8
   142cc:	ldr	r3, [fp, #-20]	; 0xffffffec
   142d0:	add	r3, r1, r3
   142d4:	add	r2, r2, #48	; 0x30
   142d8:	uxtb	r2, r2
   142dc:	strb	r2, [r3]
   142e0:	ldr	r3, [fp, #-20]	; 0xffffffec
   142e4:	add	r3, r3, #1
   142e8:	str	r3, [fp, #-20]	; 0xffffffec
   142ec:	ldr	r2, [fp, #-20]	; 0xffffffec
   142f0:	ldr	r3, [fp, #-92]	; 0xffffffa4
   142f4:	cmp	r2, r3
   142f8:	bcs	14328 <__assert_fail@plt+0x3490>
   142fc:	ldrb	r3, [fp, #-38]	; 0xffffffda
   14300:	lsr	r3, r3, #3
   14304:	uxtb	r3, r3
   14308:	and	r3, r3, #7
   1430c:	uxtb	r2, r3
   14310:	ldr	r1, [fp, #-88]	; 0xffffffa8
   14314:	ldr	r3, [fp, #-20]	; 0xffffffec
   14318:	add	r3, r1, r3
   1431c:	add	r2, r2, #48	; 0x30
   14320:	uxtb	r2, r2
   14324:	strb	r2, [r3]
   14328:	ldr	r3, [fp, #-20]	; 0xffffffec
   1432c:	add	r3, r3, #1
   14330:	str	r3, [fp, #-20]	; 0xffffffec
   14334:	ldrb	r3, [fp, #-38]	; 0xffffffda
   14338:	and	r3, r3, #7
   1433c:	uxtb	r3, r3
   14340:	add	r3, r3, #48	; 0x30
   14344:	strb	r3, [fp, #-38]	; 0xffffffda
   14348:	b	14390 <__assert_fail@plt+0x34f8>
   1434c:	ldrb	r3, [fp, #-40]	; 0xffffffd8
   14350:	cmp	r3, #0
   14354:	beq	14390 <__assert_fail@plt+0x34f8>
   14358:	ldr	r2, [fp, #-20]	; 0xffffffec
   1435c:	ldr	r3, [fp, #-92]	; 0xffffffa4
   14360:	cmp	r2, r3
   14364:	bcs	1437c <__assert_fail@plt+0x34e4>
   14368:	ldr	r2, [fp, #-88]	; 0xffffffa8
   1436c:	ldr	r3, [fp, #-20]	; 0xffffffec
   14370:	add	r3, r2, r3
   14374:	mov	r2, #92	; 0x5c
   14378:	strb	r2, [r3]
   1437c:	ldr	r3, [fp, #-20]	; 0xffffffec
   14380:	add	r3, r3, #1
   14384:	str	r3, [fp, #-20]	; 0xffffffec
   14388:	mov	r3, #0
   1438c:	strb	r3, [fp, #-40]	; 0xffffffd8
   14390:	ldr	r3, [fp, #-16]
   14394:	add	r3, r3, #1
   14398:	ldr	r2, [fp, #-68]	; 0xffffffbc
   1439c:	cmp	r2, r3
   143a0:	bls	14480 <__assert_fail@plt+0x35e8>
   143a4:	ldrb	r3, [fp, #-35]	; 0xffffffdd
   143a8:	cmp	r3, #0
   143ac:	beq	1442c <__assert_fail@plt+0x3594>
   143b0:	ldrb	r3, [fp, #-41]	; 0xffffffd7
   143b4:	eor	r3, r3, #1
   143b8:	uxtb	r3, r3
   143bc:	cmp	r3, #0
   143c0:	beq	1442c <__assert_fail@plt+0x3594>
   143c4:	ldr	r2, [fp, #-20]	; 0xffffffec
   143c8:	ldr	r3, [fp, #-92]	; 0xffffffa4
   143cc:	cmp	r2, r3
   143d0:	bcs	143e8 <__assert_fail@plt+0x3550>
   143d4:	ldr	r2, [fp, #-88]	; 0xffffffa8
   143d8:	ldr	r3, [fp, #-20]	; 0xffffffec
   143dc:	add	r3, r2, r3
   143e0:	mov	r2, #39	; 0x27
   143e4:	strb	r2, [r3]
   143e8:	ldr	r3, [fp, #-20]	; 0xffffffec
   143ec:	add	r3, r3, #1
   143f0:	str	r3, [fp, #-20]	; 0xffffffec
   143f4:	ldr	r2, [fp, #-20]	; 0xffffffec
   143f8:	ldr	r3, [fp, #-92]	; 0xffffffa4
   143fc:	cmp	r2, r3
   14400:	bcs	14418 <__assert_fail@plt+0x3580>
   14404:	ldr	r2, [fp, #-88]	; 0xffffffa8
   14408:	ldr	r3, [fp, #-20]	; 0xffffffec
   1440c:	add	r3, r2, r3
   14410:	mov	r2, #39	; 0x27
   14414:	strb	r2, [r3]
   14418:	ldr	r3, [fp, #-20]	; 0xffffffec
   1441c:	add	r3, r3, #1
   14420:	str	r3, [fp, #-20]	; 0xffffffec
   14424:	mov	r3, #0
   14428:	strb	r3, [fp, #-35]	; 0xffffffdd
   1442c:	ldr	r2, [fp, #-20]	; 0xffffffec
   14430:	ldr	r3, [fp, #-92]	; 0xffffffa4
   14434:	cmp	r2, r3
   14438:	bcs	14450 <__assert_fail@plt+0x35b8>
   1443c:	ldr	r2, [fp, #-88]	; 0xffffffa8
   14440:	ldr	r3, [fp, #-20]	; 0xffffffec
   14444:	add	r3, r2, r3
   14448:	ldrb	r2, [fp, #-38]	; 0xffffffda
   1444c:	strb	r2, [r3]
   14450:	ldr	r3, [fp, #-20]	; 0xffffffec
   14454:	add	r3, r3, #1
   14458:	str	r3, [fp, #-20]	; 0xffffffec
   1445c:	ldr	r3, [fp, #-16]
   14460:	add	r3, r3, #1
   14464:	str	r3, [fp, #-16]
   14468:	ldr	r2, [fp, #-96]	; 0xffffffa0
   1446c:	ldr	r3, [fp, #-16]
   14470:	add	r3, r2, r3
   14474:	ldrb	r3, [r3]
   14478:	strb	r3, [fp, #-38]	; 0xffffffda
   1447c:	b	14190 <__assert_fail@plt+0x32f8>
   14480:	nop	{0}
   14484:	b	1465c <__assert_fail@plt+0x37c4>
   14488:	nop	{0}
   1448c:	b	144bc <__assert_fail@plt+0x3624>
   14490:	nop	{0}
   14494:	b	144bc <__assert_fail@plt+0x3624>
   14498:	nop	{0}
   1449c:	b	144bc <__assert_fail@plt+0x3624>
   144a0:	nop	{0}
   144a4:	b	144bc <__assert_fail@plt+0x3624>
   144a8:	nop	{0}
   144ac:	b	144bc <__assert_fail@plt+0x3624>
   144b0:	nop	{0}
   144b4:	b	144bc <__assert_fail@plt+0x3624>
   144b8:	nop	{0}
   144bc:	ldrb	r3, [fp, #-33]	; 0xffffffdf
   144c0:	eor	r3, r3, #1
   144c4:	uxtb	r3, r3
   144c8:	cmp	r3, #0
   144cc:	bne	144dc <__assert_fail@plt+0x3644>
   144d0:	ldr	r3, [fp, #4]
   144d4:	cmp	r3, #2
   144d8:	bne	144f0 <__assert_fail@plt+0x3658>
   144dc:	ldrb	r3, [fp, #-34]	; 0xffffffde
   144e0:	eor	r3, r3, #1
   144e4:	uxtb	r3, r3
   144e8:	cmp	r3, #0
   144ec:	bne	14530 <__assert_fail@plt+0x3698>
   144f0:	ldr	r3, [fp, #12]
   144f4:	cmp	r3, #0
   144f8:	beq	14530 <__assert_fail@plt+0x3698>
   144fc:	ldrb	r3, [fp, #-38]	; 0xffffffda
   14500:	lsr	r3, r3, #5
   14504:	uxtb	r3, r3
   14508:	lsl	r3, r3, #2
   1450c:	ldr	r2, [fp, #12]
   14510:	add	r3, r2, r3
   14514:	ldr	r2, [r3]
   14518:	ldrb	r3, [fp, #-38]	; 0xffffffda
   1451c:	and	r3, r3, #31
   14520:	lsr	r3, r2, r3
   14524:	and	r3, r3, #1
   14528:	cmp	r3, #0
   1452c:	bne	14544 <__assert_fail@plt+0x36ac>
   14530:	ldrb	r3, [fp, #-40]	; 0xffffffd8
   14534:	eor	r3, r3, #1
   14538:	uxtb	r3, r3
   1453c:	cmp	r3, #0
   14540:	bne	14658 <__assert_fail@plt+0x37c0>
   14544:	nop	{0}
   14548:	ldrb	r3, [fp, #-34]	; 0xffffffde
   1454c:	cmp	r3, #0
   14550:	bne	14928 <__assert_fail@plt+0x3a90>
   14554:	mov	r3, #1
   14558:	strb	r3, [fp, #-41]	; 0xffffffd7
   1455c:	ldr	r3, [fp, #4]
   14560:	cmp	r3, #2
   14564:	bne	14614 <__assert_fail@plt+0x377c>
   14568:	ldrb	r3, [fp, #-35]	; 0xffffffdd
   1456c:	eor	r3, r3, #1
   14570:	uxtb	r3, r3
   14574:	cmp	r3, #0
   14578:	beq	14614 <__assert_fail@plt+0x377c>
   1457c:	ldr	r2, [fp, #-20]	; 0xffffffec
   14580:	ldr	r3, [fp, #-92]	; 0xffffffa4
   14584:	cmp	r2, r3
   14588:	bcs	145a0 <__assert_fail@plt+0x3708>
   1458c:	ldr	r2, [fp, #-88]	; 0xffffffa8
   14590:	ldr	r3, [fp, #-20]	; 0xffffffec
   14594:	add	r3, r2, r3
   14598:	mov	r2, #39	; 0x27
   1459c:	strb	r2, [r3]
   145a0:	ldr	r3, [fp, #-20]	; 0xffffffec
   145a4:	add	r3, r3, #1
   145a8:	str	r3, [fp, #-20]	; 0xffffffec
   145ac:	ldr	r2, [fp, #-20]	; 0xffffffec
   145b0:	ldr	r3, [fp, #-92]	; 0xffffffa4
   145b4:	cmp	r2, r3
   145b8:	bcs	145d0 <__assert_fail@plt+0x3738>
   145bc:	ldr	r2, [fp, #-88]	; 0xffffffa8
   145c0:	ldr	r3, [fp, #-20]	; 0xffffffec
   145c4:	add	r3, r2, r3
   145c8:	mov	r2, #36	; 0x24
   145cc:	strb	r2, [r3]
   145d0:	ldr	r3, [fp, #-20]	; 0xffffffec
   145d4:	add	r3, r3, #1
   145d8:	str	r3, [fp, #-20]	; 0xffffffec
   145dc:	ldr	r2, [fp, #-20]	; 0xffffffec
   145e0:	ldr	r3, [fp, #-92]	; 0xffffffa4
   145e4:	cmp	r2, r3
   145e8:	bcs	14600 <__assert_fail@plt+0x3768>
   145ec:	ldr	r2, [fp, #-88]	; 0xffffffa8
   145f0:	ldr	r3, [fp, #-20]	; 0xffffffec
   145f4:	add	r3, r2, r3
   145f8:	mov	r2, #39	; 0x27
   145fc:	strb	r2, [r3]
   14600:	ldr	r3, [fp, #-20]	; 0xffffffec
   14604:	add	r3, r3, #1
   14608:	str	r3, [fp, #-20]	; 0xffffffec
   1460c:	mov	r3, #1
   14610:	strb	r3, [fp, #-35]	; 0xffffffdd
   14614:	ldr	r2, [fp, #-20]	; 0xffffffec
   14618:	ldr	r3, [fp, #-92]	; 0xffffffa4
   1461c:	cmp	r2, r3
   14620:	bcs	14638 <__assert_fail@plt+0x37a0>
   14624:	ldr	r2, [fp, #-88]	; 0xffffffa8
   14628:	ldr	r3, [fp, #-20]	; 0xffffffec
   1462c:	add	r3, r2, r3
   14630:	mov	r2, #92	; 0x5c
   14634:	strb	r2, [r3]
   14638:	ldr	r3, [fp, #-20]	; 0xffffffec
   1463c:	add	r3, r3, #1
   14640:	str	r3, [fp, #-20]	; 0xffffffec
   14644:	b	1465c <__assert_fail@plt+0x37c4>
   14648:	nop	{0}
   1464c:	b	1465c <__assert_fail@plt+0x37c4>
   14650:	nop	{0}
   14654:	b	1465c <__assert_fail@plt+0x37c4>
   14658:	nop	{0}
   1465c:	ldrb	r3, [fp, #-35]	; 0xffffffdd
   14660:	cmp	r3, #0
   14664:	beq	146e4 <__assert_fail@plt+0x384c>
   14668:	ldrb	r3, [fp, #-41]	; 0xffffffd7
   1466c:	eor	r3, r3, #1
   14670:	uxtb	r3, r3
   14674:	cmp	r3, #0
   14678:	beq	146e4 <__assert_fail@plt+0x384c>
   1467c:	ldr	r2, [fp, #-20]	; 0xffffffec
   14680:	ldr	r3, [fp, #-92]	; 0xffffffa4
   14684:	cmp	r2, r3
   14688:	bcs	146a0 <__assert_fail@plt+0x3808>
   1468c:	ldr	r2, [fp, #-88]	; 0xffffffa8
   14690:	ldr	r3, [fp, #-20]	; 0xffffffec
   14694:	add	r3, r2, r3
   14698:	mov	r2, #39	; 0x27
   1469c:	strb	r2, [r3]
   146a0:	ldr	r3, [fp, #-20]	; 0xffffffec
   146a4:	add	r3, r3, #1
   146a8:	str	r3, [fp, #-20]	; 0xffffffec
   146ac:	ldr	r2, [fp, #-20]	; 0xffffffec
   146b0:	ldr	r3, [fp, #-92]	; 0xffffffa4
   146b4:	cmp	r2, r3
   146b8:	bcs	146d0 <__assert_fail@plt+0x3838>
   146bc:	ldr	r2, [fp, #-88]	; 0xffffffa8
   146c0:	ldr	r3, [fp, #-20]	; 0xffffffec
   146c4:	add	r3, r2, r3
   146c8:	mov	r2, #39	; 0x27
   146cc:	strb	r2, [r3]
   146d0:	ldr	r3, [fp, #-20]	; 0xffffffec
   146d4:	add	r3, r3, #1
   146d8:	str	r3, [fp, #-20]	; 0xffffffec
   146dc:	mov	r3, #0
   146e0:	strb	r3, [fp, #-35]	; 0xffffffdd
   146e4:	ldr	r2, [fp, #-20]	; 0xffffffec
   146e8:	ldr	r3, [fp, #-92]	; 0xffffffa4
   146ec:	cmp	r2, r3
   146f0:	bcs	14708 <__assert_fail@plt+0x3870>
   146f4:	ldr	r2, [fp, #-88]	; 0xffffffa8
   146f8:	ldr	r3, [fp, #-20]	; 0xffffffec
   146fc:	add	r3, r2, r3
   14700:	ldrb	r2, [fp, #-38]	; 0xffffffda
   14704:	strb	r2, [r3]
   14708:	ldr	r3, [fp, #-20]	; 0xffffffec
   1470c:	add	r3, r3, #1
   14710:	str	r3, [fp, #-20]	; 0xffffffec
   14714:	ldrb	r3, [fp, #-42]	; 0xffffffd6
   14718:	eor	r3, r3, #1
   1471c:	uxtb	r3, r3
   14720:	cmp	r3, #0
   14724:	beq	14730 <__assert_fail@plt+0x3898>
   14728:	mov	r3, #0
   1472c:	strb	r3, [fp, #-37]	; 0xffffffdb
   14730:	ldr	r3, [fp, #-16]
   14734:	add	r3, r3, #1
   14738:	str	r3, [fp, #-16]
   1473c:	ldr	r3, [fp, #-100]	; 0xffffff9c
   14740:	cmn	r3, #1
   14744:	bne	1476c <__assert_fail@plt+0x38d4>
   14748:	ldr	r2, [fp, #-96]	; 0xffffffa0
   1474c:	ldr	r3, [fp, #-16]
   14750:	add	r3, r2, r3
   14754:	ldrb	r3, [r3]
   14758:	cmp	r3, #0
   1475c:	movne	r3, #1
   14760:	moveq	r3, #0
   14764:	uxtb	r3, r3
   14768:	b	14784 <__assert_fail@plt+0x38ec>
   1476c:	ldr	r2, [fp, #-16]
   14770:	ldr	r3, [fp, #-100]	; 0xffffff9c
   14774:	cmp	r2, r3
   14778:	movne	r3, #1
   1477c:	moveq	r3, #0
   14780:	uxtb	r3, r3
   14784:	cmp	r3, #0
   14788:	bne	135a4 <__assert_fail@plt+0x270c>
   1478c:	ldr	r3, [fp, #-20]	; 0xffffffec
   14790:	cmp	r3, #0
   14794:	bne	147b0 <__assert_fail@plt+0x3918>
   14798:	ldr	r3, [fp, #4]
   1479c:	cmp	r3, #2
   147a0:	bne	147b0 <__assert_fail@plt+0x3918>
   147a4:	ldrb	r3, [fp, #-34]	; 0xffffffde
   147a8:	cmp	r3, #0
   147ac:	bne	14930 <__assert_fail@plt+0x3a98>
   147b0:	ldr	r3, [fp, #4]
   147b4:	cmp	r3, #2
   147b8:	bne	14858 <__assert_fail@plt+0x39c0>
   147bc:	ldrb	r3, [fp, #-34]	; 0xffffffde
   147c0:	eor	r3, r3, #1
   147c4:	uxtb	r3, r3
   147c8:	cmp	r3, #0
   147cc:	beq	14858 <__assert_fail@plt+0x39c0>
   147d0:	ldrb	r3, [fp, #-36]	; 0xffffffdc
   147d4:	cmp	r3, #0
   147d8:	beq	14858 <__assert_fail@plt+0x39c0>
   147dc:	ldrb	r3, [fp, #-37]	; 0xffffffdb
   147e0:	cmp	r3, #0
   147e4:	beq	1482c <__assert_fail@plt+0x3994>
   147e8:	ldr	r3, [fp, #20]
   147ec:	str	r3, [sp, #16]
   147f0:	ldr	r3, [fp, #16]
   147f4:	str	r3, [sp, #12]
   147f8:	ldr	r3, [fp, #12]
   147fc:	str	r3, [sp, #8]
   14800:	ldr	r3, [fp, #8]
   14804:	str	r3, [sp, #4]
   14808:	mov	r3, #5
   1480c:	str	r3, [sp]
   14810:	ldr	r3, [fp, #-100]	; 0xffffff9c
   14814:	ldr	r2, [fp, #-96]	; 0xffffffa0
   14818:	ldr	r1, [fp, #-24]	; 0xffffffe8
   1481c:	ldr	r0, [fp, #-88]	; 0xffffffa8
   14820:	bl	132dc <__assert_fail@plt+0x2444>
   14824:	mov	r3, r0
   14828:	b	14998 <__assert_fail@plt+0x3b00>
   1482c:	ldr	r3, [fp, #-92]	; 0xffffffa4
   14830:	cmp	r3, #0
   14834:	bne	14858 <__assert_fail@plt+0x39c0>
   14838:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1483c:	cmp	r3, #0
   14840:	beq	14858 <__assert_fail@plt+0x39c0>
   14844:	ldr	r3, [fp, #-24]	; 0xffffffe8
   14848:	str	r3, [fp, #-92]	; 0xffffffa4
   1484c:	mov	r3, #0
   14850:	str	r3, [fp, #-20]	; 0xffffffec
   14854:	b	13370 <__assert_fail@plt+0x24d8>
   14858:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1485c:	cmp	r3, #0
   14860:	beq	148cc <__assert_fail@plt+0x3a34>
   14864:	ldrb	r3, [fp, #-34]	; 0xffffffde
   14868:	eor	r3, r3, #1
   1486c:	uxtb	r3, r3
   14870:	cmp	r3, #0
   14874:	beq	148cc <__assert_fail@plt+0x3a34>
   14878:	b	148bc <__assert_fail@plt+0x3a24>
   1487c:	ldr	r2, [fp, #-20]	; 0xffffffec
   14880:	ldr	r3, [fp, #-92]	; 0xffffffa4
   14884:	cmp	r2, r3
   14888:	bcs	148a4 <__assert_fail@plt+0x3a0c>
   1488c:	ldr	r2, [fp, #-88]	; 0xffffffa8
   14890:	ldr	r3, [fp, #-20]	; 0xffffffec
   14894:	add	r3, r2, r3
   14898:	ldr	r2, [fp, #-28]	; 0xffffffe4
   1489c:	ldrb	r2, [r2]
   148a0:	strb	r2, [r3]
   148a4:	ldr	r3, [fp, #-20]	; 0xffffffec
   148a8:	add	r3, r3, #1
   148ac:	str	r3, [fp, #-20]	; 0xffffffec
   148b0:	ldr	r3, [fp, #-28]	; 0xffffffe4
   148b4:	add	r3, r3, #1
   148b8:	str	r3, [fp, #-28]	; 0xffffffe4
   148bc:	ldr	r3, [fp, #-28]	; 0xffffffe4
   148c0:	ldrb	r3, [r3]
   148c4:	cmp	r3, #0
   148c8:	bne	1487c <__assert_fail@plt+0x39e4>
   148cc:	ldr	r2, [fp, #-20]	; 0xffffffec
   148d0:	ldr	r3, [fp, #-92]	; 0xffffffa4
   148d4:	cmp	r2, r3
   148d8:	bcs	148f0 <__assert_fail@plt+0x3a58>
   148dc:	ldr	r2, [fp, #-88]	; 0xffffffa8
   148e0:	ldr	r3, [fp, #-20]	; 0xffffffec
   148e4:	add	r3, r2, r3
   148e8:	mov	r2, #0
   148ec:	strb	r2, [r3]
   148f0:	ldr	r3, [fp, #-20]	; 0xffffffec
   148f4:	b	14998 <__assert_fail@plt+0x3b00>
   148f8:	nop	{0}
   148fc:	b	14934 <__assert_fail@plt+0x3a9c>
   14900:	nop	{0}
   14904:	b	14934 <__assert_fail@plt+0x3a9c>
   14908:	nop	{0}
   1490c:	b	14934 <__assert_fail@plt+0x3a9c>
   14910:	nop	{0}
   14914:	b	14934 <__assert_fail@plt+0x3a9c>
   14918:	nop	{0}
   1491c:	b	14934 <__assert_fail@plt+0x3a9c>
   14920:	nop	{0}
   14924:	b	14934 <__assert_fail@plt+0x3a9c>
   14928:	nop	{0}
   1492c:	b	14934 <__assert_fail@plt+0x3a9c>
   14930:	nop	{0}
   14934:	ldr	r3, [fp, #4]
   14938:	cmp	r3, #2
   1493c:	bne	14954 <__assert_fail@plt+0x3abc>
   14940:	ldrb	r3, [fp, #-33]	; 0xffffffdf
   14944:	cmp	r3, #0
   14948:	beq	14954 <__assert_fail@plt+0x3abc>
   1494c:	mov	r3, #4
   14950:	str	r3, [fp, #4]
   14954:	ldr	r3, [fp, #8]
   14958:	bic	r3, r3, #2
   1495c:	ldr	r2, [fp, #20]
   14960:	str	r2, [sp, #16]
   14964:	ldr	r2, [fp, #16]
   14968:	str	r2, [sp, #12]
   1496c:	mov	r2, #0
   14970:	str	r2, [sp, #8]
   14974:	str	r3, [sp, #4]
   14978:	ldr	r3, [fp, #4]
   1497c:	str	r3, [sp]
   14980:	ldr	r3, [fp, #-100]	; 0xffffff9c
   14984:	ldr	r2, [fp, #-96]	; 0xffffffa0
   14988:	ldr	r1, [fp, #-92]	; 0xffffffa4
   1498c:	ldr	r0, [fp, #-88]	; 0xffffffa8
   14990:	bl	132dc <__assert_fail@plt+0x2444>
   14994:	mov	r3, r0
   14998:	mov	r0, r3
   1499c:	sub	sp, fp, #8
   149a0:	ldr	r4, [sp]
   149a4:	ldr	fp, [sp, #4]
   149a8:	add	sp, sp, #8
   149ac:	pop	{pc}		; (ldr pc, [sp], #4)
   149b0:	str	fp, [sp, #-8]!
   149b4:	str	lr, [sp, #4]
   149b8:	add	fp, sp, #4
   149bc:	sub	sp, sp, #56	; 0x38
   149c0:	str	r0, [fp, #-24]	; 0xffffffe8
   149c4:	str	r1, [fp, #-28]	; 0xffffffe4
   149c8:	str	r2, [fp, #-32]	; 0xffffffe0
   149cc:	str	r3, [fp, #-36]	; 0xffffffdc
   149d0:	ldr	r3, [fp, #4]
   149d4:	cmp	r3, #0
   149d8:	beq	149e4 <__assert_fail@plt+0x3b4c>
   149dc:	ldr	r3, [fp, #4]
   149e0:	b	149ec <__assert_fail@plt+0x3b54>
   149e4:	movw	r3, #37236	; 0x9174
   149e8:	movt	r3, #2
   149ec:	str	r3, [fp, #-8]
   149f0:	bl	10dfc <__errno_location@plt>
   149f4:	mov	r3, r0
   149f8:	ldr	r3, [r3]
   149fc:	str	r3, [fp, #-12]
   14a00:	ldr	r3, [fp, #-8]
   14a04:	ldr	r3, [r3]
   14a08:	ldr	r2, [fp, #-8]
   14a0c:	ldr	r2, [r2, #4]
   14a10:	ldr	r1, [fp, #-8]
   14a14:	add	r1, r1, #8
   14a18:	ldr	r0, [fp, #-8]
   14a1c:	ldr	r0, [r0, #40]	; 0x28
   14a20:	ldr	ip, [fp, #-8]
   14a24:	ldr	ip, [ip, #44]	; 0x2c
   14a28:	str	ip, [sp, #16]
   14a2c:	str	r0, [sp, #12]
   14a30:	str	r1, [sp, #8]
   14a34:	str	r2, [sp, #4]
   14a38:	str	r3, [sp]
   14a3c:	ldr	r3, [fp, #-36]	; 0xffffffdc
   14a40:	ldr	r2, [fp, #-32]	; 0xffffffe0
   14a44:	ldr	r1, [fp, #-28]	; 0xffffffe4
   14a48:	ldr	r0, [fp, #-24]	; 0xffffffe8
   14a4c:	bl	132dc <__assert_fail@plt+0x2444>
   14a50:	str	r0, [fp, #-16]
   14a54:	bl	10dfc <__errno_location@plt>
   14a58:	mov	r2, r0
   14a5c:	ldr	r3, [fp, #-12]
   14a60:	str	r3, [r2]
   14a64:	ldr	r3, [fp, #-16]
   14a68:	mov	r0, r3
   14a6c:	sub	sp, fp, #4
   14a70:	ldr	fp, [sp]
   14a74:	add	sp, sp, #4
   14a78:	pop	{pc}		; (ldr pc, [sp], #4)
   14a7c:	str	fp, [sp, #-8]!
   14a80:	str	lr, [sp, #4]
   14a84:	add	fp, sp, #4
   14a88:	sub	sp, sp, #16
   14a8c:	str	r0, [fp, #-8]
   14a90:	str	r1, [fp, #-12]
   14a94:	str	r2, [fp, #-16]
   14a98:	ldr	r3, [fp, #-16]
   14a9c:	mov	r2, #0
   14aa0:	ldr	r1, [fp, #-12]
   14aa4:	ldr	r0, [fp, #-8]
   14aa8:	bl	14ac4 <__assert_fail@plt+0x3c2c>
   14aac:	mov	r3, r0
   14ab0:	mov	r0, r3
   14ab4:	sub	sp, fp, #4
   14ab8:	ldr	fp, [sp]
   14abc:	add	sp, sp, #4
   14ac0:	pop	{pc}		; (ldr pc, [sp], #4)
   14ac4:	str	fp, [sp, #-8]!
   14ac8:	str	lr, [sp, #4]
   14acc:	add	fp, sp, #4
   14ad0:	sub	sp, sp, #64	; 0x40
   14ad4:	str	r0, [fp, #-32]	; 0xffffffe0
   14ad8:	str	r1, [fp, #-36]	; 0xffffffdc
   14adc:	str	r2, [fp, #-40]	; 0xffffffd8
   14ae0:	str	r3, [fp, #-44]	; 0xffffffd4
   14ae4:	ldr	r3, [fp, #-44]	; 0xffffffd4
   14ae8:	cmp	r3, #0
   14aec:	beq	14af8 <__assert_fail@plt+0x3c60>
   14af0:	ldr	r3, [fp, #-44]	; 0xffffffd4
   14af4:	b	14b00 <__assert_fail@plt+0x3c68>
   14af8:	movw	r3, #37236	; 0x9174
   14afc:	movt	r3, #2
   14b00:	str	r3, [fp, #-8]
   14b04:	bl	10dfc <__errno_location@plt>
   14b08:	mov	r3, r0
   14b0c:	ldr	r3, [r3]
   14b10:	str	r3, [fp, #-12]
   14b14:	ldr	r3, [fp, #-8]
   14b18:	ldr	r3, [r3, #4]
   14b1c:	ldr	r2, [fp, #-40]	; 0xffffffd8
   14b20:	cmp	r2, #0
   14b24:	moveq	r2, #1
   14b28:	movne	r2, #0
   14b2c:	uxtb	r2, r2
   14b30:	orr	r3, r3, r2
   14b34:	str	r3, [fp, #-16]
   14b38:	ldr	r3, [fp, #-8]
   14b3c:	ldr	r3, [r3]
   14b40:	ldr	r2, [fp, #-8]
   14b44:	add	r2, r2, #8
   14b48:	ldr	r1, [fp, #-8]
   14b4c:	ldr	r1, [r1, #40]	; 0x28
   14b50:	ldr	r0, [fp, #-8]
   14b54:	ldr	r0, [r0, #44]	; 0x2c
   14b58:	str	r0, [sp, #16]
   14b5c:	str	r1, [sp, #12]
   14b60:	str	r2, [sp, #8]
   14b64:	ldr	r2, [fp, #-16]
   14b68:	str	r2, [sp, #4]
   14b6c:	str	r3, [sp]
   14b70:	ldr	r3, [fp, #-36]	; 0xffffffdc
   14b74:	ldr	r2, [fp, #-32]	; 0xffffffe0
   14b78:	mov	r1, #0
   14b7c:	mov	r0, #0
   14b80:	bl	132dc <__assert_fail@plt+0x2444>
   14b84:	mov	r3, r0
   14b88:	add	r3, r3, #1
   14b8c:	str	r3, [fp, #-20]	; 0xffffffec
   14b90:	ldr	r0, [fp, #-20]	; 0xffffffec
   14b94:	bl	164e0 <__assert_fail@plt+0x5648>
   14b98:	mov	r3, r0
   14b9c:	str	r3, [fp, #-24]	; 0xffffffe8
   14ba0:	ldr	r3, [fp, #-8]
   14ba4:	ldr	r3, [r3]
   14ba8:	ldr	r2, [fp, #-8]
   14bac:	add	r2, r2, #8
   14bb0:	ldr	r1, [fp, #-8]
   14bb4:	ldr	r1, [r1, #40]	; 0x28
   14bb8:	ldr	r0, [fp, #-8]
   14bbc:	ldr	r0, [r0, #44]	; 0x2c
   14bc0:	str	r0, [sp, #16]
   14bc4:	str	r1, [sp, #12]
   14bc8:	str	r2, [sp, #8]
   14bcc:	ldr	r2, [fp, #-16]
   14bd0:	str	r2, [sp, #4]
   14bd4:	str	r3, [sp]
   14bd8:	ldr	r3, [fp, #-36]	; 0xffffffdc
   14bdc:	ldr	r2, [fp, #-32]	; 0xffffffe0
   14be0:	ldr	r1, [fp, #-20]	; 0xffffffec
   14be4:	ldr	r0, [fp, #-24]	; 0xffffffe8
   14be8:	bl	132dc <__assert_fail@plt+0x2444>
   14bec:	bl	10dfc <__errno_location@plt>
   14bf0:	mov	r2, r0
   14bf4:	ldr	r3, [fp, #-12]
   14bf8:	str	r3, [r2]
   14bfc:	ldr	r3, [fp, #-40]	; 0xffffffd8
   14c00:	cmp	r3, #0
   14c04:	beq	14c18 <__assert_fail@plt+0x3d80>
   14c08:	ldr	r3, [fp, #-20]	; 0xffffffec
   14c0c:	sub	r2, r3, #1
   14c10:	ldr	r3, [fp, #-40]	; 0xffffffd8
   14c14:	str	r2, [r3]
   14c18:	ldr	r3, [fp, #-24]	; 0xffffffe8
   14c1c:	mov	r0, r3
   14c20:	sub	sp, fp, #4
   14c24:	ldr	fp, [sp]
   14c28:	add	sp, sp, #4
   14c2c:	pop	{pc}		; (ldr pc, [sp], #4)
   14c30:	str	fp, [sp, #-8]!
   14c34:	str	lr, [sp, #4]
   14c38:	add	fp, sp, #4
   14c3c:	sub	sp, sp, #8
   14c40:	movw	r3, #37112	; 0x90f8
   14c44:	movt	r3, #2
   14c48:	ldr	r3, [r3]
   14c4c:	str	r3, [fp, #-12]
   14c50:	mov	r3, #1
   14c54:	str	r3, [fp, #-8]
   14c58:	b	14c84 <__assert_fail@plt+0x3dec>
   14c5c:	ldr	r3, [fp, #-8]
   14c60:	lsl	r3, r3, #3
   14c64:	ldr	r2, [fp, #-12]
   14c68:	add	r3, r2, r3
   14c6c:	ldr	r3, [r3, #4]
   14c70:	mov	r0, r3
   14c74:	bl	12720 <__assert_fail@plt+0x1888>
   14c78:	ldr	r3, [fp, #-8]
   14c7c:	add	r3, r3, #1
   14c80:	str	r3, [fp, #-8]
   14c84:	movw	r3, #37100	; 0x90ec
   14c88:	movt	r3, #2
   14c8c:	ldr	r3, [r3]
   14c90:	ldr	r2, [fp, #-8]
   14c94:	cmp	r2, r3
   14c98:	blt	14c5c <__assert_fail@plt+0x3dc4>
   14c9c:	ldr	r3, [fp, #-12]
   14ca0:	ldr	r2, [r3, #4]
   14ca4:	movw	r3, #37284	; 0x91a4
   14ca8:	movt	r3, #2
   14cac:	cmp	r2, r3
   14cb0:	beq	14ce8 <__assert_fail@plt+0x3e50>
   14cb4:	ldr	r3, [fp, #-12]
   14cb8:	ldr	r3, [r3, #4]
   14cbc:	mov	r0, r3
   14cc0:	bl	12720 <__assert_fail@plt+0x1888>
   14cc4:	movw	r3, #37104	; 0x90f0
   14cc8:	movt	r3, #2
   14ccc:	mov	r2, #256	; 0x100
   14cd0:	str	r2, [r3]
   14cd4:	movw	r3, #37104	; 0x90f0
   14cd8:	movt	r3, #2
   14cdc:	movw	r2, #37284	; 0x91a4
   14ce0:	movt	r2, #2
   14ce4:	str	r2, [r3, #4]
   14ce8:	ldr	r2, [fp, #-12]
   14cec:	movw	r3, #37104	; 0x90f0
   14cf0:	movt	r3, #2
   14cf4:	cmp	r2, r3
   14cf8:	beq	14d18 <__assert_fail@plt+0x3e80>
   14cfc:	ldr	r0, [fp, #-12]
   14d00:	bl	12720 <__assert_fail@plt+0x1888>
   14d04:	movw	r3, #37112	; 0x90f8
   14d08:	movt	r3, #2
   14d0c:	movw	r2, #37104	; 0x90f0
   14d10:	movt	r2, #2
   14d14:	str	r2, [r3]
   14d18:	movw	r3, #37100	; 0x90ec
   14d1c:	movt	r3, #2
   14d20:	mov	r2, #1
   14d24:	str	r2, [r3]
   14d28:	nop	{0}
   14d2c:	sub	sp, fp, #4
   14d30:	ldr	fp, [sp]
   14d34:	add	sp, sp, #4
   14d38:	pop	{pc}		; (ldr pc, [sp], #4)
   14d3c:	str	fp, [sp, #-8]!
   14d40:	str	lr, [sp, #4]
   14d44:	add	fp, sp, #4
   14d48:	sub	sp, sp, #80	; 0x50
   14d4c:	str	r0, [fp, #-48]	; 0xffffffd0
   14d50:	str	r1, [fp, #-52]	; 0xffffffcc
   14d54:	str	r2, [fp, #-56]	; 0xffffffc8
   14d58:	str	r3, [fp, #-60]	; 0xffffffc4
   14d5c:	bl	10dfc <__errno_location@plt>
   14d60:	mov	r3, r0
   14d64:	ldr	r3, [r3]
   14d68:	str	r3, [fp, #-16]
   14d6c:	movw	r3, #37112	; 0x90f8
   14d70:	movt	r3, #2
   14d74:	ldr	r3, [r3]
   14d78:	str	r3, [fp, #-8]
   14d7c:	mvn	r3, #-2147483648	; 0x80000000
   14d80:	str	r3, [fp, #-20]	; 0xffffffec
   14d84:	ldr	r3, [fp, #-48]	; 0xffffffd0
   14d88:	cmp	r3, #0
   14d8c:	blt	14da0 <__assert_fail@plt+0x3f08>
   14d90:	ldr	r2, [fp, #-48]	; 0xffffffd0
   14d94:	ldr	r3, [fp, #-20]	; 0xffffffec
   14d98:	cmp	r2, r3
   14d9c:	blt	14da4 <__assert_fail@plt+0x3f0c>
   14da0:	bl	10e80 <abort@plt>
   14da4:	movw	r3, #37100	; 0x90ec
   14da8:	movt	r3, #2
   14dac:	ldr	r3, [r3]
   14db0:	ldr	r2, [fp, #-48]	; 0xffffffd0
   14db4:	cmp	r2, r3
   14db8:	blt	14eb0 <__assert_fail@plt+0x4018>
   14dbc:	ldr	r2, [fp, #-8]
   14dc0:	movw	r3, #37104	; 0x90f0
   14dc4:	movt	r3, #2
   14dc8:	cmp	r2, r3
   14dcc:	moveq	r3, #1
   14dd0:	movne	r3, #0
   14dd4:	strb	r3, [fp, #-21]	; 0xffffffeb
   14dd8:	movw	r3, #37100	; 0x90ec
   14ddc:	movt	r3, #2
   14de0:	ldr	r3, [r3]
   14de4:	str	r3, [fp, #-40]	; 0xffffffd8
   14de8:	ldrb	r3, [fp, #-21]	; 0xffffffeb
   14dec:	cmp	r3, #0
   14df0:	beq	14dfc <__assert_fail@plt+0x3f64>
   14df4:	mov	r0, #0
   14df8:	b	14e00 <__assert_fail@plt+0x3f68>
   14dfc:	ldr	r0, [fp, #-8]
   14e00:	movw	r3, #37100	; 0x90ec
   14e04:	movt	r3, #2
   14e08:	ldr	r3, [r3]
   14e0c:	ldr	r2, [fp, #-48]	; 0xffffffd0
   14e10:	sub	r3, r2, r3
   14e14:	add	r2, r3, #1
   14e18:	sub	r1, fp, #40	; 0x28
   14e1c:	mov	r3, #8
   14e20:	str	r3, [sp]
   14e24:	ldr	r3, [fp, #-20]	; 0xffffffec
   14e28:	bl	16840 <__assert_fail@plt+0x59a8>
   14e2c:	str	r0, [fp, #-8]
   14e30:	movw	r3, #37112	; 0x90f8
   14e34:	movt	r3, #2
   14e38:	ldr	r2, [fp, #-8]
   14e3c:	str	r2, [r3]
   14e40:	ldrb	r3, [fp, #-21]	; 0xffffffeb
   14e44:	cmp	r3, #0
   14e48:	beq	14e64 <__assert_fail@plt+0x3fcc>
   14e4c:	ldr	r2, [fp, #-8]
   14e50:	movw	r3, #37104	; 0x90f0
   14e54:	movt	r3, #2
   14e58:	mov	r1, r2
   14e5c:	ldrd	r2, [r3]
   14e60:	strd	r2, [r1]
   14e64:	movw	r3, #37100	; 0x90ec
   14e68:	movt	r3, #2
   14e6c:	ldr	r3, [r3]
   14e70:	lsl	r3, r3, #3
   14e74:	ldr	r2, [fp, #-8]
   14e78:	add	r0, r2, r3
   14e7c:	ldr	r2, [fp, #-40]	; 0xffffffd8
   14e80:	movw	r3, #37100	; 0x90ec
   14e84:	movt	r3, #2
   14e88:	ldr	r3, [r3]
   14e8c:	sub	r3, r2, r3
   14e90:	lsl	r3, r3, #3
   14e94:	mov	r2, r3
   14e98:	mov	r1, #0
   14e9c:	bl	10e14 <memset@plt>
   14ea0:	ldr	r2, [fp, #-40]	; 0xffffffd8
   14ea4:	movw	r3, #37100	; 0x90ec
   14ea8:	movt	r3, #2
   14eac:	str	r2, [r3]
   14eb0:	ldr	r3, [fp, #-48]	; 0xffffffd0
   14eb4:	lsl	r3, r3, #3
   14eb8:	ldr	r2, [fp, #-8]
   14ebc:	add	r3, r2, r3
   14ec0:	ldr	r3, [r3]
   14ec4:	str	r3, [fp, #-28]	; 0xffffffe4
   14ec8:	ldr	r3, [fp, #-48]	; 0xffffffd0
   14ecc:	lsl	r3, r3, #3
   14ed0:	ldr	r2, [fp, #-8]
   14ed4:	add	r3, r2, r3
   14ed8:	ldr	r3, [r3, #4]
   14edc:	str	r3, [fp, #-12]
   14ee0:	ldr	r3, [fp, #-60]	; 0xffffffc4
   14ee4:	ldr	r3, [r3, #4]
   14ee8:	orr	r3, r3, #1
   14eec:	str	r3, [fp, #-32]	; 0xffffffe0
   14ef0:	ldr	r3, [fp, #-60]	; 0xffffffc4
   14ef4:	ldr	r3, [r3]
   14ef8:	ldr	r2, [fp, #-60]	; 0xffffffc4
   14efc:	add	r2, r2, #8
   14f00:	ldr	r1, [fp, #-60]	; 0xffffffc4
   14f04:	ldr	r1, [r1, #40]	; 0x28
   14f08:	ldr	r0, [fp, #-60]	; 0xffffffc4
   14f0c:	ldr	r0, [r0, #44]	; 0x2c
   14f10:	str	r0, [sp, #16]
   14f14:	str	r1, [sp, #12]
   14f18:	str	r2, [sp, #8]
   14f1c:	ldr	r2, [fp, #-32]	; 0xffffffe0
   14f20:	str	r2, [sp, #4]
   14f24:	str	r3, [sp]
   14f28:	ldr	r3, [fp, #-56]	; 0xffffffc8
   14f2c:	ldr	r2, [fp, #-52]	; 0xffffffcc
   14f30:	ldr	r1, [fp, #-28]	; 0xffffffe4
   14f34:	ldr	r0, [fp, #-12]
   14f38:	bl	132dc <__assert_fail@plt+0x2444>
   14f3c:	str	r0, [fp, #-36]	; 0xffffffdc
   14f40:	ldr	r2, [fp, #-28]	; 0xffffffe4
   14f44:	ldr	r3, [fp, #-36]	; 0xffffffdc
   14f48:	cmp	r2, r3
   14f4c:	bhi	15004 <__assert_fail@plt+0x416c>
   14f50:	ldr	r3, [fp, #-36]	; 0xffffffdc
   14f54:	add	r3, r3, #1
   14f58:	str	r3, [fp, #-28]	; 0xffffffe4
   14f5c:	ldr	r3, [fp, #-48]	; 0xffffffd0
   14f60:	lsl	r3, r3, #3
   14f64:	ldr	r2, [fp, #-8]
   14f68:	add	r3, r2, r3
   14f6c:	ldr	r2, [fp, #-28]	; 0xffffffe4
   14f70:	str	r2, [r3]
   14f74:	ldr	r2, [fp, #-12]
   14f78:	movw	r3, #37284	; 0x91a4
   14f7c:	movt	r3, #2
   14f80:	cmp	r2, r3
   14f84:	beq	14f90 <__assert_fail@plt+0x40f8>
   14f88:	ldr	r0, [fp, #-12]
   14f8c:	bl	12720 <__assert_fail@plt+0x1888>
   14f90:	ldr	r0, [fp, #-28]	; 0xffffffe4
   14f94:	bl	164e0 <__assert_fail@plt+0x5648>
   14f98:	mov	r3, r0
   14f9c:	str	r3, [fp, #-12]
   14fa0:	ldr	r3, [fp, #-48]	; 0xffffffd0
   14fa4:	lsl	r3, r3, #3
   14fa8:	ldr	r2, [fp, #-8]
   14fac:	add	r3, r2, r3
   14fb0:	ldr	r2, [fp, #-12]
   14fb4:	str	r2, [r3, #4]
   14fb8:	ldr	r3, [fp, #-60]	; 0xffffffc4
   14fbc:	ldr	r3, [r3]
   14fc0:	ldr	r2, [fp, #-60]	; 0xffffffc4
   14fc4:	add	r2, r2, #8
   14fc8:	ldr	r1, [fp, #-60]	; 0xffffffc4
   14fcc:	ldr	r1, [r1, #40]	; 0x28
   14fd0:	ldr	r0, [fp, #-60]	; 0xffffffc4
   14fd4:	ldr	r0, [r0, #44]	; 0x2c
   14fd8:	str	r0, [sp, #16]
   14fdc:	str	r1, [sp, #12]
   14fe0:	str	r2, [sp, #8]
   14fe4:	ldr	r2, [fp, #-32]	; 0xffffffe0
   14fe8:	str	r2, [sp, #4]
   14fec:	str	r3, [sp]
   14ff0:	ldr	r3, [fp, #-56]	; 0xffffffc8
   14ff4:	ldr	r2, [fp, #-52]	; 0xffffffcc
   14ff8:	ldr	r1, [fp, #-28]	; 0xffffffe4
   14ffc:	ldr	r0, [fp, #-12]
   15000:	bl	132dc <__assert_fail@plt+0x2444>
   15004:	bl	10dfc <__errno_location@plt>
   15008:	mov	r2, r0
   1500c:	ldr	r3, [fp, #-16]
   15010:	str	r3, [r2]
   15014:	ldr	r3, [fp, #-12]
   15018:	mov	r0, r3
   1501c:	sub	sp, fp, #4
   15020:	ldr	fp, [sp]
   15024:	add	sp, sp, #4
   15028:	pop	{pc}		; (ldr pc, [sp], #4)
   1502c:	str	fp, [sp, #-8]!
   15030:	str	lr, [sp, #4]
   15034:	add	fp, sp, #4
   15038:	sub	sp, sp, #8
   1503c:	str	r0, [fp, #-8]
   15040:	str	r1, [fp, #-12]
   15044:	movw	r3, #37236	; 0x9174
   15048:	movt	r3, #2
   1504c:	mvn	r2, #0
   15050:	ldr	r1, [fp, #-12]
   15054:	ldr	r0, [fp, #-8]
   15058:	bl	14d3c <__assert_fail@plt+0x3ea4>
   1505c:	mov	r3, r0
   15060:	mov	r0, r3
   15064:	sub	sp, fp, #4
   15068:	ldr	fp, [sp]
   1506c:	add	sp, sp, #4
   15070:	pop	{pc}		; (ldr pc, [sp], #4)
   15074:	str	fp, [sp, #-8]!
   15078:	str	lr, [sp, #4]
   1507c:	add	fp, sp, #4
   15080:	sub	sp, sp, #16
   15084:	str	r0, [fp, #-8]
   15088:	str	r1, [fp, #-12]
   1508c:	str	r2, [fp, #-16]
   15090:	movw	r3, #37236	; 0x9174
   15094:	movt	r3, #2
   15098:	ldr	r2, [fp, #-16]
   1509c:	ldr	r1, [fp, #-12]
   150a0:	ldr	r0, [fp, #-8]
   150a4:	bl	14d3c <__assert_fail@plt+0x3ea4>
   150a8:	mov	r3, r0
   150ac:	mov	r0, r3
   150b0:	sub	sp, fp, #4
   150b4:	ldr	fp, [sp]
   150b8:	add	sp, sp, #4
   150bc:	pop	{pc}		; (ldr pc, [sp], #4)
   150c0:	str	fp, [sp, #-8]!
   150c4:	str	lr, [sp, #4]
   150c8:	add	fp, sp, #4
   150cc:	sub	sp, sp, #8
   150d0:	str	r0, [fp, #-8]
   150d4:	ldr	r1, [fp, #-8]
   150d8:	mov	r0, #0
   150dc:	bl	1502c <__assert_fail@plt+0x4194>
   150e0:	mov	r3, r0
   150e4:	mov	r0, r3
   150e8:	sub	sp, fp, #4
   150ec:	ldr	fp, [sp]
   150f0:	add	sp, sp, #4
   150f4:	pop	{pc}		; (ldr pc, [sp], #4)
   150f8:	str	fp, [sp, #-8]!
   150fc:	str	lr, [sp, #4]
   15100:	add	fp, sp, #4
   15104:	sub	sp, sp, #8
   15108:	str	r0, [fp, #-8]
   1510c:	str	r1, [fp, #-12]
   15110:	ldr	r2, [fp, #-12]
   15114:	ldr	r1, [fp, #-8]
   15118:	mov	r0, #0
   1511c:	bl	15074 <__assert_fail@plt+0x41dc>
   15120:	mov	r3, r0
   15124:	mov	r0, r3
   15128:	sub	sp, fp, #4
   1512c:	ldr	fp, [sp]
   15130:	add	sp, sp, #4
   15134:	pop	{pc}		; (ldr pc, [sp], #4)
   15138:	str	fp, [sp, #-8]!
   1513c:	str	lr, [sp, #4]
   15140:	add	fp, sp, #4
   15144:	sub	sp, sp, #64	; 0x40
   15148:	str	r0, [fp, #-56]	; 0xffffffc8
   1514c:	str	r1, [fp, #-60]	; 0xffffffc4
   15150:	str	r2, [fp, #-64]	; 0xffffffc0
   15154:	sub	r3, fp, #52	; 0x34
   15158:	ldr	r1, [fp, #-60]	; 0xffffffc4
   1515c:	mov	r0, r3
   15160:	bl	13138 <__assert_fail@plt+0x22a0>
   15164:	sub	r3, fp, #52	; 0x34
   15168:	mvn	r2, #0
   1516c:	ldr	r1, [fp, #-64]	; 0xffffffc0
   15170:	ldr	r0, [fp, #-56]	; 0xffffffc8
   15174:	bl	14d3c <__assert_fail@plt+0x3ea4>
   15178:	mov	r3, r0
   1517c:	mov	r0, r3
   15180:	sub	sp, fp, #4
   15184:	ldr	fp, [sp]
   15188:	add	sp, sp, #4
   1518c:	pop	{pc}		; (ldr pc, [sp], #4)
   15190:	str	fp, [sp, #-8]!
   15194:	str	lr, [sp, #4]
   15198:	add	fp, sp, #4
   1519c:	sub	sp, sp, #64	; 0x40
   151a0:	str	r0, [fp, #-56]	; 0xffffffc8
   151a4:	str	r1, [fp, #-60]	; 0xffffffc4
   151a8:	str	r2, [fp, #-64]	; 0xffffffc0
   151ac:	str	r3, [fp, #-68]	; 0xffffffbc
   151b0:	sub	r3, fp, #52	; 0x34
   151b4:	ldr	r1, [fp, #-60]	; 0xffffffc4
   151b8:	mov	r0, r3
   151bc:	bl	13138 <__assert_fail@plt+0x22a0>
   151c0:	sub	r3, fp, #52	; 0x34
   151c4:	ldr	r2, [fp, #-68]	; 0xffffffbc
   151c8:	ldr	r1, [fp, #-64]	; 0xffffffc0
   151cc:	ldr	r0, [fp, #-56]	; 0xffffffc8
   151d0:	bl	14d3c <__assert_fail@plt+0x3ea4>
   151d4:	mov	r3, r0
   151d8:	mov	r0, r3
   151dc:	sub	sp, fp, #4
   151e0:	ldr	fp, [sp]
   151e4:	add	sp, sp, #4
   151e8:	pop	{pc}		; (ldr pc, [sp], #4)
   151ec:	str	fp, [sp, #-8]!
   151f0:	str	lr, [sp, #4]
   151f4:	add	fp, sp, #4
   151f8:	sub	sp, sp, #8
   151fc:	str	r0, [fp, #-8]
   15200:	str	r1, [fp, #-12]
   15204:	ldr	r2, [fp, #-12]
   15208:	ldr	r1, [fp, #-8]
   1520c:	mov	r0, #0
   15210:	bl	15138 <__assert_fail@plt+0x42a0>
   15214:	mov	r3, r0
   15218:	mov	r0, r3
   1521c:	sub	sp, fp, #4
   15220:	ldr	fp, [sp]
   15224:	add	sp, sp, #4
   15228:	pop	{pc}		; (ldr pc, [sp], #4)
   1522c:	str	fp, [sp, #-8]!
   15230:	str	lr, [sp, #4]
   15234:	add	fp, sp, #4
   15238:	sub	sp, sp, #16
   1523c:	str	r0, [fp, #-8]
   15240:	str	r1, [fp, #-12]
   15244:	str	r2, [fp, #-16]
   15248:	ldr	r3, [fp, #-16]
   1524c:	ldr	r2, [fp, #-12]
   15250:	ldr	r1, [fp, #-8]
   15254:	mov	r0, #0
   15258:	bl	15190 <__assert_fail@plt+0x42f8>
   1525c:	mov	r3, r0
   15260:	mov	r0, r3
   15264:	sub	sp, fp, #4
   15268:	ldr	fp, [sp]
   1526c:	add	sp, sp, #4
   15270:	pop	{pc}		; (ldr pc, [sp], #4)
   15274:	str	fp, [sp, #-8]!
   15278:	str	lr, [sp, #4]
   1527c:	add	fp, sp, #4
   15280:	sub	sp, sp, #64	; 0x40
   15284:	str	r0, [fp, #-56]	; 0xffffffc8
   15288:	str	r1, [fp, #-60]	; 0xffffffc4
   1528c:	mov	r3, r2
   15290:	strb	r3, [fp, #-61]	; 0xffffffc3
   15294:	movw	r2, #37236	; 0x9174
   15298:	movt	r2, #2
   1529c:	sub	r3, fp, #52	; 0x34
   152a0:	ldrd	r0, [r2]
   152a4:	strd	r0, [r3]
   152a8:	ldrd	r0, [r2, #8]
   152ac:	strd	r0, [r3, #8]
   152b0:	ldrd	r0, [r2, #16]
   152b4:	strd	r0, [r3, #16]
   152b8:	ldrd	r0, [r2, #24]
   152bc:	strd	r0, [r3, #24]
   152c0:	ldrd	r0, [r2, #32]
   152c4:	strd	r0, [r3, #32]
   152c8:	ldrd	r0, [r2, #40]	; 0x28
   152cc:	strd	r0, [r3, #40]	; 0x28
   152d0:	ldrb	r1, [fp, #-61]	; 0xffffffc3
   152d4:	sub	r3, fp, #52	; 0x34
   152d8:	mov	r2, #1
   152dc:	mov	r0, r3
   152e0:	bl	12f98 <__assert_fail@plt+0x2100>
   152e4:	sub	r3, fp, #52	; 0x34
   152e8:	ldr	r2, [fp, #-60]	; 0xffffffc4
   152ec:	ldr	r1, [fp, #-56]	; 0xffffffc8
   152f0:	mov	r0, #0
   152f4:	bl	14d3c <__assert_fail@plt+0x3ea4>
   152f8:	mov	r3, r0
   152fc:	mov	r0, r3
   15300:	sub	sp, fp, #4
   15304:	ldr	fp, [sp]
   15308:	add	sp, sp, #4
   1530c:	pop	{pc}		; (ldr pc, [sp], #4)
   15310:	str	fp, [sp, #-8]!
   15314:	str	lr, [sp, #4]
   15318:	add	fp, sp, #4
   1531c:	sub	sp, sp, #8
   15320:	str	r0, [fp, #-8]
   15324:	mov	r3, r1
   15328:	strb	r3, [fp, #-9]
   1532c:	ldrb	r3, [fp, #-9]
   15330:	mov	r2, r3
   15334:	mvn	r1, #0
   15338:	ldr	r0, [fp, #-8]
   1533c:	bl	15274 <__assert_fail@plt+0x43dc>
   15340:	mov	r3, r0
   15344:	mov	r0, r3
   15348:	sub	sp, fp, #4
   1534c:	ldr	fp, [sp]
   15350:	add	sp, sp, #4
   15354:	pop	{pc}		; (ldr pc, [sp], #4)
   15358:	str	fp, [sp, #-8]!
   1535c:	str	lr, [sp, #4]
   15360:	add	fp, sp, #4
   15364:	sub	sp, sp, #8
   15368:	str	r0, [fp, #-8]
   1536c:	mov	r1, #58	; 0x3a
   15370:	ldr	r0, [fp, #-8]
   15374:	bl	15310 <__assert_fail@plt+0x4478>
   15378:	mov	r3, r0
   1537c:	mov	r0, r3
   15380:	sub	sp, fp, #4
   15384:	ldr	fp, [sp]
   15388:	add	sp, sp, #4
   1538c:	pop	{pc}		; (ldr pc, [sp], #4)
   15390:	str	fp, [sp, #-8]!
   15394:	str	lr, [sp, #4]
   15398:	add	fp, sp, #4
   1539c:	sub	sp, sp, #8
   153a0:	str	r0, [fp, #-8]
   153a4:	str	r1, [fp, #-12]
   153a8:	mov	r2, #58	; 0x3a
   153ac:	ldr	r1, [fp, #-12]
   153b0:	ldr	r0, [fp, #-8]
   153b4:	bl	15274 <__assert_fail@plt+0x43dc>
   153b8:	mov	r3, r0
   153bc:	mov	r0, r3
   153c0:	sub	sp, fp, #4
   153c4:	ldr	fp, [sp]
   153c8:	add	sp, sp, #4
   153cc:	pop	{pc}		; (ldr pc, [sp], #4)
   153d0:	str	fp, [sp, #-8]!
   153d4:	str	lr, [sp, #4]
   153d8:	add	fp, sp, #4
   153dc:	sub	sp, sp, #112	; 0x70
   153e0:	str	r0, [fp, #-56]	; 0xffffffc8
   153e4:	str	r1, [fp, #-60]	; 0xffffffc4
   153e8:	str	r2, [fp, #-64]	; 0xffffffc0
   153ec:	sub	r3, fp, #116	; 0x74
   153f0:	ldr	r1, [fp, #-60]	; 0xffffffc4
   153f4:	mov	r0, r3
   153f8:	bl	13138 <__assert_fail@plt+0x22a0>
   153fc:	sub	r3, fp, #52	; 0x34
   15400:	sub	r2, fp, #116	; 0x74
   15404:	ldrd	r0, [r2]
   15408:	strd	r0, [r3]
   1540c:	ldrd	r0, [r2, #8]
   15410:	strd	r0, [r3, #8]
   15414:	ldrd	r0, [r2, #16]
   15418:	strd	r0, [r3, #16]
   1541c:	ldrd	r0, [r2, #24]
   15420:	strd	r0, [r3, #24]
   15424:	ldrd	r0, [r2, #32]
   15428:	strd	r0, [r3, #32]
   1542c:	ldrd	r0, [r2, #40]	; 0x28
   15430:	strd	r0, [r3, #40]	; 0x28
   15434:	sub	r3, fp, #52	; 0x34
   15438:	mov	r2, #1
   1543c:	mov	r1, #58	; 0x3a
   15440:	mov	r0, r3
   15444:	bl	12f98 <__assert_fail@plt+0x2100>
   15448:	sub	r3, fp, #52	; 0x34
   1544c:	mvn	r2, #0
   15450:	ldr	r1, [fp, #-64]	; 0xffffffc0
   15454:	ldr	r0, [fp, #-56]	; 0xffffffc8
   15458:	bl	14d3c <__assert_fail@plt+0x3ea4>
   1545c:	mov	r3, r0
   15460:	mov	r0, r3
   15464:	sub	sp, fp, #4
   15468:	ldr	fp, [sp]
   1546c:	add	sp, sp, #4
   15470:	pop	{pc}		; (ldr pc, [sp], #4)
   15474:	str	fp, [sp, #-8]!
   15478:	str	lr, [sp, #4]
   1547c:	add	fp, sp, #4
   15480:	sub	sp, sp, #24
   15484:	str	r0, [fp, #-8]
   15488:	str	r1, [fp, #-12]
   1548c:	str	r2, [fp, #-16]
   15490:	str	r3, [fp, #-20]	; 0xffffffec
   15494:	mvn	r3, #0
   15498:	str	r3, [sp]
   1549c:	ldr	r3, [fp, #-20]	; 0xffffffec
   154a0:	ldr	r2, [fp, #-16]
   154a4:	ldr	r1, [fp, #-12]
   154a8:	ldr	r0, [fp, #-8]
   154ac:	bl	154c8 <__assert_fail@plt+0x4630>
   154b0:	mov	r3, r0
   154b4:	mov	r0, r3
   154b8:	sub	sp, fp, #4
   154bc:	ldr	fp, [sp]
   154c0:	add	sp, sp, #4
   154c4:	pop	{pc}		; (ldr pc, [sp], #4)
   154c8:	str	fp, [sp, #-8]!
   154cc:	str	lr, [sp, #4]
   154d0:	add	fp, sp, #4
   154d4:	sub	sp, sp, #64	; 0x40
   154d8:	str	r0, [fp, #-56]	; 0xffffffc8
   154dc:	str	r1, [fp, #-60]	; 0xffffffc4
   154e0:	str	r2, [fp, #-64]	; 0xffffffc0
   154e4:	str	r3, [fp, #-68]	; 0xffffffbc
   154e8:	movw	r2, #37236	; 0x9174
   154ec:	movt	r2, #2
   154f0:	sub	r3, fp, #52	; 0x34
   154f4:	ldrd	r0, [r2]
   154f8:	strd	r0, [r3]
   154fc:	ldrd	r0, [r2, #8]
   15500:	strd	r0, [r3, #8]
   15504:	ldrd	r0, [r2, #16]
   15508:	strd	r0, [r3, #16]
   1550c:	ldrd	r0, [r2, #24]
   15510:	strd	r0, [r3, #24]
   15514:	ldrd	r0, [r2, #32]
   15518:	strd	r0, [r3, #32]
   1551c:	ldrd	r0, [r2, #40]	; 0x28
   15520:	strd	r0, [r3, #40]	; 0x28
   15524:	sub	r3, fp, #52	; 0x34
   15528:	ldr	r2, [fp, #-64]	; 0xffffffc0
   1552c:	ldr	r1, [fp, #-60]	; 0xffffffc4
   15530:	mov	r0, r3
   15534:	bl	130b0 <__assert_fail@plt+0x2218>
   15538:	sub	r3, fp, #52	; 0x34
   1553c:	ldr	r2, [fp, #4]
   15540:	ldr	r1, [fp, #-68]	; 0xffffffbc
   15544:	ldr	r0, [fp, #-56]	; 0xffffffc8
   15548:	bl	14d3c <__assert_fail@plt+0x3ea4>
   1554c:	mov	r3, r0
   15550:	mov	r0, r3
   15554:	sub	sp, fp, #4
   15558:	ldr	fp, [sp]
   1555c:	add	sp, sp, #4
   15560:	pop	{pc}		; (ldr pc, [sp], #4)
   15564:	str	fp, [sp, #-8]!
   15568:	str	lr, [sp, #4]
   1556c:	add	fp, sp, #4
   15570:	sub	sp, sp, #16
   15574:	str	r0, [fp, #-8]
   15578:	str	r1, [fp, #-12]
   1557c:	str	r2, [fp, #-16]
   15580:	ldr	r3, [fp, #-16]
   15584:	ldr	r2, [fp, #-12]
   15588:	ldr	r1, [fp, #-8]
   1558c:	mov	r0, #0
   15590:	bl	15474 <__assert_fail@plt+0x45dc>
   15594:	mov	r3, r0
   15598:	mov	r0, r3
   1559c:	sub	sp, fp, #4
   155a0:	ldr	fp, [sp]
   155a4:	add	sp, sp, #4
   155a8:	pop	{pc}		; (ldr pc, [sp], #4)
   155ac:	str	fp, [sp, #-8]!
   155b0:	str	lr, [sp, #4]
   155b4:	add	fp, sp, #4
   155b8:	sub	sp, sp, #24
   155bc:	str	r0, [fp, #-8]
   155c0:	str	r1, [fp, #-12]
   155c4:	str	r2, [fp, #-16]
   155c8:	str	r3, [fp, #-20]	; 0xffffffec
   155cc:	ldr	r3, [fp, #-20]	; 0xffffffec
   155d0:	str	r3, [sp]
   155d4:	ldr	r3, [fp, #-16]
   155d8:	ldr	r2, [fp, #-12]
   155dc:	ldr	r1, [fp, #-8]
   155e0:	mov	r0, #0
   155e4:	bl	154c8 <__assert_fail@plt+0x4630>
   155e8:	mov	r3, r0
   155ec:	mov	r0, r3
   155f0:	sub	sp, fp, #4
   155f4:	ldr	fp, [sp]
   155f8:	add	sp, sp, #4
   155fc:	pop	{pc}		; (ldr pc, [sp], #4)
   15600:	str	fp, [sp, #-8]!
   15604:	str	lr, [sp, #4]
   15608:	add	fp, sp, #4
   1560c:	sub	sp, sp, #16
   15610:	str	r0, [fp, #-8]
   15614:	str	r1, [fp, #-12]
   15618:	str	r2, [fp, #-16]
   1561c:	movw	r3, #37116	; 0x90fc
   15620:	movt	r3, #2
   15624:	ldr	r2, [fp, #-16]
   15628:	ldr	r1, [fp, #-12]
   1562c:	ldr	r0, [fp, #-8]
   15630:	bl	14d3c <__assert_fail@plt+0x3ea4>
   15634:	mov	r3, r0
   15638:	mov	r0, r3
   1563c:	sub	sp, fp, #4
   15640:	ldr	fp, [sp]
   15644:	add	sp, sp, #4
   15648:	pop	{pc}		; (ldr pc, [sp], #4)
   1564c:	str	fp, [sp, #-8]!
   15650:	str	lr, [sp, #4]
   15654:	add	fp, sp, #4
   15658:	sub	sp, sp, #8
   1565c:	str	r0, [fp, #-8]
   15660:	str	r1, [fp, #-12]
   15664:	ldr	r2, [fp, #-12]
   15668:	ldr	r1, [fp, #-8]
   1566c:	mov	r0, #0
   15670:	bl	15600 <__assert_fail@plt+0x4768>
   15674:	mov	r3, r0
   15678:	mov	r0, r3
   1567c:	sub	sp, fp, #4
   15680:	ldr	fp, [sp]
   15684:	add	sp, sp, #4
   15688:	pop	{pc}		; (ldr pc, [sp], #4)
   1568c:	str	fp, [sp, #-8]!
   15690:	str	lr, [sp, #4]
   15694:	add	fp, sp, #4
   15698:	sub	sp, sp, #8
   1569c:	str	r0, [fp, #-8]
   156a0:	str	r1, [fp, #-12]
   156a4:	mvn	r2, #0
   156a8:	ldr	r1, [fp, #-12]
   156ac:	ldr	r0, [fp, #-8]
   156b0:	bl	15600 <__assert_fail@plt+0x4768>
   156b4:	mov	r3, r0
   156b8:	mov	r0, r3
   156bc:	sub	sp, fp, #4
   156c0:	ldr	fp, [sp]
   156c4:	add	sp, sp, #4
   156c8:	pop	{pc}		; (ldr pc, [sp], #4)
   156cc:	str	fp, [sp, #-8]!
   156d0:	str	lr, [sp, #4]
   156d4:	add	fp, sp, #4
   156d8:	sub	sp, sp, #8
   156dc:	str	r0, [fp, #-8]
   156e0:	ldr	r1, [fp, #-8]
   156e4:	mov	r0, #0
   156e8:	bl	1568c <__assert_fail@plt+0x47f4>
   156ec:	mov	r3, r0
   156f0:	mov	r0, r3
   156f4:	sub	sp, fp, #4
   156f8:	ldr	fp, [sp]
   156fc:	add	sp, sp, #4
   15700:	pop	{pc}		; (ldr pc, [sp], #4)
   15704:	push	{fp}		; (str fp, [sp, #-4]!)
   15708:	add	fp, sp, #0
   1570c:	sub	sp, sp, #12
   15710:	str	r0, [fp, #-8]
   15714:	ldr	r3, [fp, #-8]
   15718:	mov	r2, #0
   1571c:	str	r2, [r3]
   15720:	ldr	r3, [fp, #-8]
   15724:	mov	r2, #0
   15728:	str	r2, [r3, #4]
   1572c:	nop	{0}
   15730:	add	sp, fp, #0
   15734:	pop	{fp}		; (ldr fp, [sp], #4)
   15738:	bx	lr
   1573c:	push	{fp}		; (str fp, [sp, #-4]!)
   15740:	add	fp, sp, #0
   15744:	sub	sp, sp, #12
   15748:	str	r0, [fp, #-8]
   1574c:	str	r1, [fp, #-12]
   15750:	ldr	r3, [fp, #-8]
   15754:	lsr	r3, r3, #5
   15758:	lsl	r3, r3, #2
   1575c:	ldr	r2, [fp, #-12]
   15760:	add	r3, r2, r3
   15764:	ldr	r2, [r3]
   15768:	ldr	r3, [fp, #-8]
   1576c:	and	r3, r3, #31
   15770:	lsr	r3, r2, r3
   15774:	and	r3, r3, #1
   15778:	cmp	r3, #0
   1577c:	movne	r3, #1
   15780:	moveq	r3, #0
   15784:	uxtb	r3, r3
   15788:	mov	r0, r3
   1578c:	add	sp, fp, #0
   15790:	pop	{fp}		; (ldr fp, [sp], #4)
   15794:	bx	lr
   15798:	push	{fp}		; (str fp, [sp, #-4]!)
   1579c:	add	fp, sp, #0
   157a0:	sub	sp, sp, #20
   157a4:	str	r0, [fp, #-16]
   157a8:	str	r1, [fp, #-20]	; 0xffffffec
   157ac:	mov	r3, #1
   157b0:	str	r3, [fp, #-8]
   157b4:	ldr	r3, [fp, #-16]
   157b8:	lsr	r3, r3, #5
   157bc:	lsl	r2, r3, #2
   157c0:	ldr	r1, [fp, #-20]	; 0xffffffec
   157c4:	add	r2, r1, r2
   157c8:	ldr	r1, [r2]
   157cc:	ldr	r2, [fp, #-16]
   157d0:	and	r2, r2, #31
   157d4:	ldr	r0, [fp, #-8]
   157d8:	lsl	r2, r0, r2
   157dc:	lsl	r3, r3, #2
   157e0:	ldr	r0, [fp, #-20]	; 0xffffffec
   157e4:	add	r3, r0, r3
   157e8:	orr	r2, r1, r2
   157ec:	str	r2, [r3]
   157f0:	nop	{0}
   157f4:	add	sp, fp, #0
   157f8:	pop	{fp}		; (ldr fp, [sp], #4)
   157fc:	bx	lr
   15800:	str	fp, [sp, #-8]!
   15804:	str	lr, [sp, #4]
   15808:	add	fp, sp, #4
   1580c:	sub	sp, sp, #80	; 0x50
   15810:	str	r0, [fp, #-64]	; 0xffffffc0
   15814:	str	r1, [fp, #-68]	; 0xffffffbc
   15818:	str	r2, [fp, #-72]	; 0xffffffb8
   1581c:	str	r3, [fp, #-76]	; 0xffffffb4
   15820:	sub	r3, fp, #52	; 0x34
   15824:	mov	r2, #32
   15828:	mov	r1, #0
   1582c:	mov	r0, r3
   15830:	bl	10e14 <memset@plt>
   15834:	mov	r3, #0
   15838:	str	r3, [fp, #-12]
   1583c:	b	15874 <__assert_fail@plt+0x49dc>
   15840:	ldr	r3, [fp, #-12]
   15844:	ldr	r2, [fp, #-68]	; 0xffffffbc
   15848:	add	r3, r2, r3
   1584c:	ldrb	r3, [r3]
   15850:	strb	r3, [fp, #-17]	; 0xffffffef
   15854:	ldrb	r3, [fp, #-17]	; 0xffffffef
   15858:	sub	r2, fp, #52	; 0x34
   1585c:	mov	r1, r2
   15860:	mov	r0, r3
   15864:	bl	15798 <__assert_fail@plt+0x4900>
   15868:	ldr	r3, [fp, #-12]
   1586c:	add	r3, r3, #1
   15870:	str	r3, [fp, #-12]
   15874:	ldr	r3, [fp, #-12]
   15878:	ldr	r2, [fp, #-72]	; 0xffffffb8
   1587c:	cmp	r2, r3
   15880:	bhi	15840 <__assert_fail@plt+0x49a8>
   15884:	ldr	r0, [fp, #-64]	; 0xffffffc0
   15888:	bl	10cd0 <getc_unlocked@plt>
   1588c:	str	r0, [fp, #-8]
   15890:	b	158a0 <__assert_fail@plt+0x4a08>
   15894:	ldr	r0, [fp, #-64]	; 0xffffffc0
   15898:	bl	10cd0 <getc_unlocked@plt>
   1589c:	str	r0, [fp, #-8]
   158a0:	ldr	r3, [fp, #-8]
   158a4:	cmp	r3, #0
   158a8:	blt	158cc <__assert_fail@plt+0x4a34>
   158ac:	ldr	r3, [fp, #-8]
   158b0:	sub	r2, fp, #52	; 0x34
   158b4:	mov	r1, r2
   158b8:	mov	r0, r3
   158bc:	bl	1573c <__assert_fail@plt+0x48a4>
   158c0:	mov	r3, r0
   158c4:	cmp	r3, #0
   158c8:	bne	15894 <__assert_fail@plt+0x49fc>
   158cc:	ldr	r3, [fp, #-76]	; 0xffffffb4
   158d0:	ldr	r3, [r3, #4]
   158d4:	str	r3, [fp, #-16]
   158d8:	ldr	r3, [fp, #-76]	; 0xffffffb4
   158dc:	ldr	r3, [r3]
   158e0:	str	r3, [fp, #-56]	; 0xffffffc8
   158e4:	mov	r3, #0
   158e8:	str	r3, [fp, #-12]
   158ec:	ldr	r3, [fp, #-8]
   158f0:	cmp	r3, #0
   158f4:	bge	1590c <__assert_fail@plt+0x4a74>
   158f8:	ldr	r3, [fp, #-12]
   158fc:	cmp	r3, #0
   15900:	bne	1590c <__assert_fail@plt+0x4a74>
   15904:	mvn	r3, #0
   15908:	b	159ec <__assert_fail@plt+0x4b54>
   1590c:	ldr	r3, [fp, #-56]	; 0xffffffc8
   15910:	ldr	r2, [fp, #-12]
   15914:	cmp	r2, r3
   15918:	bne	1593c <__assert_fail@plt+0x4aa4>
   1591c:	sub	r1, fp, #56	; 0x38
   15920:	mov	r3, #1
   15924:	str	r3, [sp]
   15928:	mvn	r3, #0
   1592c:	mov	r2, #1
   15930:	ldr	r0, [fp, #-16]
   15934:	bl	16840 <__assert_fail@plt+0x59a8>
   15938:	str	r0, [fp, #-16]
   1593c:	ldr	r3, [fp, #-8]
   15940:	cmp	r3, #0
   15944:	bge	15960 <__assert_fail@plt+0x4ac8>
   15948:	ldr	r3, [fp, #-12]
   1594c:	ldr	r2, [fp, #-16]
   15950:	add	r3, r2, r3
   15954:	mov	r2, #0
   15958:	strb	r2, [r3]
   1595c:	b	159cc <__assert_fail@plt+0x4b34>
   15960:	ldr	r3, [fp, #-8]
   15964:	sub	r2, fp, #52	; 0x34
   15968:	mov	r1, r2
   1596c:	mov	r0, r3
   15970:	bl	1573c <__assert_fail@plt+0x48a4>
   15974:	mov	r3, r0
   15978:	cmp	r3, #0
   1597c:	beq	15998 <__assert_fail@plt+0x4b00>
   15980:	ldr	r3, [fp, #-12]
   15984:	ldr	r2, [fp, #-16]
   15988:	add	r3, r2, r3
   1598c:	mov	r2, #0
   15990:	strb	r2, [r3]
   15994:	b	159cc <__assert_fail@plt+0x4b34>
   15998:	ldr	r3, [fp, #-12]
   1599c:	add	r2, r3, #1
   159a0:	str	r2, [fp, #-12]
   159a4:	mov	r2, r3
   159a8:	ldr	r3, [fp, #-16]
   159ac:	add	r3, r3, r2
   159b0:	ldr	r2, [fp, #-8]
   159b4:	uxtb	r2, r2
   159b8:	strb	r2, [r3]
   159bc:	ldr	r0, [fp, #-64]	; 0xffffffc0
   159c0:	bl	10cd0 <getc_unlocked@plt>
   159c4:	str	r0, [fp, #-8]
   159c8:	b	158ec <__assert_fail@plt+0x4a54>
   159cc:	ldr	r3, [fp, #-76]	; 0xffffffb4
   159d0:	ldr	r2, [fp, #-16]
   159d4:	str	r2, [r3, #4]
   159d8:	ldr	r3, [fp, #-56]	; 0xffffffc8
   159dc:	mov	r2, r3
   159e0:	ldr	r3, [fp, #-76]	; 0xffffffb4
   159e4:	str	r2, [r3]
   159e8:	ldr	r3, [fp, #-12]
   159ec:	mov	r0, r3
   159f0:	sub	sp, fp, #4
   159f4:	ldr	fp, [sp]
   159f8:	add	sp, sp, #4
   159fc:	pop	{pc}		; (ldr pc, [sp], #4)
   15a00:	str	r4, [sp, #-12]!
   15a04:	str	fp, [sp, #4]
   15a08:	str	lr, [sp, #8]
   15a0c:	add	fp, sp, #8
   15a10:	sub	sp, sp, #68	; 0x44
   15a14:	str	r0, [fp, #-56]	; 0xffffffc8
   15a18:	str	r1, [fp, #-60]	; 0xffffffc4
   15a1c:	str	r2, [fp, #-64]	; 0xffffffc0
   15a20:	str	r3, [fp, #-68]	; 0xffffffbc
   15a24:	sub	r3, fp, #44	; 0x2c
   15a28:	str	r3, [fp, #-28]	; 0xffffffe4
   15a2c:	ldr	r3, [fp, #-60]	; 0xffffffc4
   15a30:	cmp	r3, #0
   15a34:	bne	15a44 <__assert_fail@plt+0x4bac>
   15a38:	mov	r3, #64	; 0x40
   15a3c:	str	r3, [fp, #-60]	; 0xffffffc4
   15a40:	b	15a50 <__assert_fail@plt+0x4bb8>
   15a44:	ldr	r3, [fp, #-60]	; 0xffffffc4
   15a48:	add	r3, r3, #1
   15a4c:	str	r3, [fp, #-60]	; 0xffffffc4
   15a50:	ldr	r3, [fp, #-60]	; 0xffffffc4
   15a54:	str	r3, [fp, #-48]	; 0xffffffd0
   15a58:	ldr	r3, [fp, #-48]	; 0xffffffd0
   15a5c:	mov	r1, #4
   15a60:	mov	r0, r3
   15a64:	bl	16690 <__assert_fail@plt+0x57f8>
   15a68:	mov	r3, r0
   15a6c:	str	r3, [fp, #-16]
   15a70:	ldr	r3, [fp, #-48]	; 0xffffffd0
   15a74:	mov	r1, #4
   15a78:	mov	r0, r3
   15a7c:	bl	16690 <__assert_fail@plt+0x57f8>
   15a80:	mov	r3, r0
   15a84:	str	r3, [fp, #-20]	; 0xffffffec
   15a88:	mov	r3, #0
   15a8c:	str	r3, [fp, #-24]	; 0xffffffe8
   15a90:	ldr	r0, [fp, #-28]	; 0xffffffe4
   15a94:	bl	15704 <__assert_fail@plt+0x486c>
   15a98:	ldr	r3, [fp, #-28]	; 0xffffffe4
   15a9c:	ldr	r2, [fp, #-68]	; 0xffffffbc
   15aa0:	ldr	r1, [fp, #-64]	; 0xffffffc0
   15aa4:	ldr	r0, [fp, #-56]	; 0xffffffc8
   15aa8:	bl	15800 <__assert_fail@plt+0x4968>
   15aac:	str	r0, [fp, #-32]	; 0xffffffe0
   15ab0:	ldr	r3, [fp, #-48]	; 0xffffffd0
   15ab4:	ldr	r2, [fp, #-24]	; 0xffffffe8
   15ab8:	cmp	r2, r3
   15abc:	blt	15af8 <__assert_fail@plt+0x4c60>
   15ac0:	sub	r1, fp, #48	; 0x30
   15ac4:	mov	r3, #4
   15ac8:	str	r3, [sp]
   15acc:	mvn	r3, #0
   15ad0:	mov	r2, #1
   15ad4:	ldr	r0, [fp, #-16]
   15ad8:	bl	16840 <__assert_fail@plt+0x59a8>
   15adc:	str	r0, [fp, #-16]
   15ae0:	ldr	r3, [fp, #-48]	; 0xffffffd0
   15ae4:	mov	r2, #4
   15ae8:	mov	r1, r3
   15aec:	ldr	r0, [fp, #-20]	; 0xffffffec
   15af0:	bl	165c4 <__assert_fail@plt+0x572c>
   15af4:	str	r0, [fp, #-20]	; 0xffffffec
   15af8:	ldr	r3, [fp, #-32]	; 0xffffffe0
   15afc:	cmn	r3, #1
   15b00:	bne	15b64 <__assert_fail@plt+0x4ccc>
   15b04:	ldr	r3, [fp, #-24]	; 0xffffffe8
   15b08:	lsl	r3, r3, #2
   15b0c:	ldr	r2, [fp, #-16]
   15b10:	add	r3, r2, r3
   15b14:	mov	r2, #0
   15b18:	str	r2, [r3]
   15b1c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   15b20:	lsl	r3, r3, #2
   15b24:	ldr	r2, [fp, #-20]	; 0xffffffec
   15b28:	add	r3, r2, r3
   15b2c:	mov	r2, #0
   15b30:	str	r2, [r3]
   15b34:	nop	{0}
   15b38:	ldr	r3, [fp, #-28]	; 0xffffffe4
   15b3c:	ldr	r3, [r3, #4]
   15b40:	mov	r0, r3
   15b44:	bl	12720 <__assert_fail@plt+0x1888>
   15b48:	ldr	r3, [fp, #4]
   15b4c:	ldr	r2, [fp, #-16]
   15b50:	str	r2, [r3]
   15b54:	ldr	r3, [fp, #8]
   15b58:	cmp	r3, #0
   15b5c:	beq	15bec <__assert_fail@plt+0x4d54>
   15b60:	b	15bdc <__assert_fail@plt+0x4d44>
   15b64:	ldr	r3, [fp, #-32]	; 0xffffffe0
   15b68:	add	r3, r3, #1
   15b6c:	mov	r1, #1
   15b70:	mov	r0, r3
   15b74:	bl	16690 <__assert_fail@plt+0x57f8>
   15b78:	mov	r3, r0
   15b7c:	str	r3, [fp, #-36]	; 0xffffffdc
   15b80:	ldr	r3, [fp, #-24]	; 0xffffffe8
   15b84:	lsl	r3, r3, #2
   15b88:	ldr	r2, [fp, #-20]	; 0xffffffec
   15b8c:	add	r3, r2, r3
   15b90:	ldr	r2, [fp, #-32]	; 0xffffffe0
   15b94:	str	r2, [r3]
   15b98:	ldr	r3, [fp, #-28]	; 0xffffffe4
   15b9c:	ldr	r1, [r3, #4]
   15ba0:	ldr	r3, [fp, #-32]	; 0xffffffe0
   15ba4:	add	r0, r3, #1
   15ba8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   15bac:	lsl	r3, r3, #2
   15bb0:	ldr	r2, [fp, #-16]
   15bb4:	add	r4, r2, r3
   15bb8:	mov	r2, r0
   15bbc:	ldr	r0, [fp, #-36]	; 0xffffffdc
   15bc0:	bl	10ca0 <memcpy@plt>
   15bc4:	mov	r3, r0
   15bc8:	str	r3, [r4]
   15bcc:	ldr	r3, [fp, #-24]	; 0xffffffe8
   15bd0:	add	r3, r3, #1
   15bd4:	str	r3, [fp, #-24]	; 0xffffffe8
   15bd8:	b	15a98 <__assert_fail@plt+0x4c00>
   15bdc:	ldr	r3, [fp, #8]
   15be0:	ldr	r2, [fp, #-20]	; 0xffffffec
   15be4:	str	r2, [r3]
   15be8:	b	15bf4 <__assert_fail@plt+0x4d5c>
   15bec:	ldr	r0, [fp, #-20]	; 0xffffffec
   15bf0:	bl	12720 <__assert_fail@plt+0x1888>
   15bf4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   15bf8:	mov	r0, r3
   15bfc:	sub	sp, fp, #8
   15c00:	ldr	r4, [sp]
   15c04:	ldr	fp, [sp, #4]
   15c08:	add	sp, sp, #8
   15c0c:	pop	{pc}		; (ldr pc, [sp], #4)
   15c10:	strd	r4, [sp, #-24]!	; 0xffffffe8
   15c14:	strd	r6, [sp, #8]
   15c18:	str	fp, [sp, #16]
   15c1c:	str	lr, [sp, #20]
   15c20:	add	fp, sp, #20
   15c24:	sub	sp, sp, #48	; 0x30
   15c28:	str	r0, [fp, #-24]	; 0xffffffe8
   15c2c:	str	r1, [fp, #-28]	; 0xffffffe4
   15c30:	str	r2, [fp, #-32]	; 0xffffffe0
   15c34:	str	r3, [fp, #-36]	; 0xffffffdc
   15c38:	ldr	r3, [fp, #-28]	; 0xffffffe4
   15c3c:	cmp	r3, #0
   15c40:	beq	15c68 <__assert_fail@plt+0x4dd0>
   15c44:	ldr	r3, [fp, #-36]	; 0xffffffdc
   15c48:	str	r3, [sp]
   15c4c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   15c50:	ldr	r2, [fp, #-28]	; 0xffffffe4
   15c54:	movw	r1, #33212	; 0x81bc
   15c58:	movt	r1, #1
   15c5c:	ldr	r0, [fp, #-24]	; 0xffffffe8
   15c60:	bl	10df0 <fprintf@plt>
   15c64:	b	15c80 <__assert_fail@plt+0x4de8>
   15c68:	ldr	r3, [fp, #-36]	; 0xffffffdc
   15c6c:	ldr	r2, [fp, #-32]	; 0xffffffe0
   15c70:	movw	r1, #33224	; 0x81c8
   15c74:	movt	r1, #1
   15c78:	ldr	r0, [fp, #-24]	; 0xffffffe8
   15c7c:	bl	10df0 <fprintf@plt>
   15c80:	movw	r0, #33232	; 0x81d0
   15c84:	movt	r0, #1
   15c88:	bl	10dd8 <gettext@plt>
   15c8c:	mov	r2, r0
   15c90:	movw	r3, #2022	; 0x7e6
   15c94:	movw	r1, #34016	; 0x84e0
   15c98:	movt	r1, #1
   15c9c:	ldr	r0, [fp, #-24]	; 0xffffffe8
   15ca0:	bl	10df0 <fprintf@plt>
   15ca4:	ldr	r1, [fp, #-24]	; 0xffffffe8
   15ca8:	mov	r0, #10
   15cac:	bl	10cc4 <fputc_unlocked@plt>
   15cb0:	movw	r0, #33236	; 0x81d4
   15cb4:	movt	r0, #1
   15cb8:	bl	10dd8 <gettext@plt>
   15cbc:	mov	r3, r0
   15cc0:	movw	r2, #33408	; 0x8280
   15cc4:	movt	r2, #1
   15cc8:	mov	r1, r3
   15ccc:	ldr	r0, [fp, #-24]	; 0xffffffe8
   15cd0:	bl	10df0 <fprintf@plt>
   15cd4:	ldr	r1, [fp, #-24]	; 0xffffffe8
   15cd8:	mov	r0, #10
   15cdc:	bl	10cc4 <fputc_unlocked@plt>
   15ce0:	ldr	r3, [fp, #8]
   15ce4:	cmp	r3, #9
   15ce8:	ldrls	pc, [pc, r3, lsl #2]
   15cec:	b	160cc <__assert_fail@plt+0x5234>
   15cf0:	andeq	r6, r1, r8, ror r1
   15cf4:	andeq	r5, r1, r8, lsl sp
   15cf8:	andeq	r5, r1, r0, asr #26
   15cfc:	andeq	r5, r1, r0, ror sp
   15d00:			; <UNDEFINED> instruction: 0x00015db4
   15d04:	andeq	r5, r1, r0, lsl lr
   15d08:	andeq	r5, r1, ip, ror lr
   15d0c:	strdeq	r5, [r1], -r8
   15d10:	andeq	r5, r1, r4, lsl #31
   15d14:	andeq	r6, r1, r0, lsr #32
   15d18:	movw	r0, #33444	; 0x82a4
   15d1c:	movt	r0, #1
   15d20:	bl	10dd8 <gettext@plt>
   15d24:	mov	r1, r0
   15d28:	ldr	r3, [fp, #4]
   15d2c:	ldr	r3, [r3]
   15d30:	mov	r2, r3
   15d34:	ldr	r0, [fp, #-24]	; 0xffffffe8
   15d38:	bl	10df0 <fprintf@plt>
   15d3c:	b	1617c <__assert_fail@plt+0x52e4>
   15d40:	movw	r0, #33460	; 0x82b4
   15d44:	movt	r0, #1
   15d48:	bl	10dd8 <gettext@plt>
   15d4c:	mov	r1, r0
   15d50:	ldr	r3, [fp, #4]
   15d54:	ldr	r2, [r3]
   15d58:	ldr	r3, [fp, #4]
   15d5c:	add	r3, r3, #4
   15d60:	ldr	r3, [r3]
   15d64:	ldr	r0, [fp, #-24]	; 0xffffffe8
   15d68:	bl	10df0 <fprintf@plt>
   15d6c:	b	1617c <__assert_fail@plt+0x52e4>
   15d70:	movw	r0, #33484	; 0x82cc
   15d74:	movt	r0, #1
   15d78:	bl	10dd8 <gettext@plt>
   15d7c:	ldr	r3, [fp, #4]
   15d80:	ldr	r2, [r3]
   15d84:	ldr	r3, [fp, #4]
   15d88:	add	r3, r3, #4
   15d8c:	ldr	r1, [r3]
   15d90:	ldr	r3, [fp, #4]
   15d94:	add	r3, r3, #8
   15d98:	ldr	r3, [r3]
   15d9c:	str	r3, [sp]
   15da0:	mov	r3, r1
   15da4:	mov	r1, r0
   15da8:	ldr	r0, [fp, #-24]	; 0xffffffe8
   15dac:	bl	10df0 <fprintf@plt>
   15db0:	b	1617c <__assert_fail@plt+0x52e4>
   15db4:	movw	r0, #33512	; 0x82e8
   15db8:	movt	r0, #1
   15dbc:	bl	10dd8 <gettext@plt>
   15dc0:	mov	ip, r0
   15dc4:	ldr	r3, [fp, #4]
   15dc8:	ldr	r1, [r3]
   15dcc:	ldr	r3, [fp, #4]
   15dd0:	add	r3, r3, #4
   15dd4:	ldr	r0, [r3]
   15dd8:	ldr	r3, [fp, #4]
   15ddc:	add	r3, r3, #8
   15de0:	ldr	r3, [r3]
   15de4:	ldr	r2, [fp, #4]
   15de8:	add	r2, r2, #12
   15dec:	ldr	r2, [r2]
   15df0:	str	r2, [sp, #4]
   15df4:	str	r3, [sp]
   15df8:	mov	r3, r0
   15dfc:	mov	r2, r1
   15e00:	mov	r1, ip
   15e04:	ldr	r0, [fp, #-24]	; 0xffffffe8
   15e08:	bl	10df0 <fprintf@plt>
   15e0c:	b	1617c <__assert_fail@plt+0x52e4>
   15e10:	movw	r0, #33544	; 0x8308
   15e14:	movt	r0, #1
   15e18:	bl	10dd8 <gettext@plt>
   15e1c:	mov	lr, r0
   15e20:	ldr	r3, [fp, #4]
   15e24:	ldr	r0, [r3]
   15e28:	ldr	r3, [fp, #4]
   15e2c:	add	r3, r3, #4
   15e30:	ldr	ip, [r3]
   15e34:	ldr	r3, [fp, #4]
   15e38:	add	r3, r3, #8
   15e3c:	ldr	r3, [r3]
   15e40:	ldr	r2, [fp, #4]
   15e44:	add	r2, r2, #12
   15e48:	ldr	r2, [r2]
   15e4c:	ldr	r1, [fp, #4]
   15e50:	add	r1, r1, #16
   15e54:	ldr	r1, [r1]
   15e58:	str	r1, [sp, #8]
   15e5c:	str	r2, [sp, #4]
   15e60:	str	r3, [sp]
   15e64:	mov	r3, ip
   15e68:	mov	r2, r0
   15e6c:	mov	r1, lr
   15e70:	ldr	r0, [fp, #-24]	; 0xffffffe8
   15e74:	bl	10df0 <fprintf@plt>
   15e78:	b	1617c <__assert_fail@plt+0x52e4>
   15e7c:	movw	r0, #33580	; 0x832c
   15e80:	movt	r0, #1
   15e84:	bl	10dd8 <gettext@plt>
   15e88:	mov	r4, r0
   15e8c:	ldr	r3, [fp, #4]
   15e90:	ldr	ip, [r3]
   15e94:	ldr	r3, [fp, #4]
   15e98:	add	r3, r3, #4
   15e9c:	ldr	lr, [r3]
   15ea0:	ldr	r3, [fp, #4]
   15ea4:	add	r3, r3, #8
   15ea8:	ldr	r3, [r3]
   15eac:	ldr	r2, [fp, #4]
   15eb0:	add	r2, r2, #12
   15eb4:	ldr	r2, [r2]
   15eb8:	ldr	r1, [fp, #4]
   15ebc:	add	r1, r1, #16
   15ec0:	ldr	r1, [r1]
   15ec4:	ldr	r0, [fp, #4]
   15ec8:	add	r0, r0, #20
   15ecc:	ldr	r0, [r0]
   15ed0:	str	r0, [sp, #12]
   15ed4:	str	r1, [sp, #8]
   15ed8:	str	r2, [sp, #4]
   15edc:	str	r3, [sp]
   15ee0:	mov	r3, lr
   15ee4:	mov	r2, ip
   15ee8:	mov	r1, r4
   15eec:	ldr	r0, [fp, #-24]	; 0xffffffe8
   15ef0:	bl	10df0 <fprintf@plt>
   15ef4:	b	1617c <__assert_fail@plt+0x52e4>
   15ef8:	movw	r0, #33620	; 0x8354
   15efc:	movt	r0, #1
   15f00:	bl	10dd8 <gettext@plt>
   15f04:	mov	r5, r0
   15f08:	ldr	r3, [fp, #4]
   15f0c:	ldr	lr, [r3]
   15f10:	ldr	r3, [fp, #4]
   15f14:	add	r3, r3, #4
   15f18:	ldr	r4, [r3]
   15f1c:	ldr	r3, [fp, #4]
   15f20:	add	r3, r3, #8
   15f24:	ldr	r3, [r3]
   15f28:	ldr	r2, [fp, #4]
   15f2c:	add	r2, r2, #12
   15f30:	ldr	r2, [r2]
   15f34:	ldr	r1, [fp, #4]
   15f38:	add	r1, r1, #16
   15f3c:	ldr	r1, [r1]
   15f40:	ldr	r0, [fp, #4]
   15f44:	add	r0, r0, #20
   15f48:	ldr	r0, [r0]
   15f4c:	ldr	ip, [fp, #4]
   15f50:	add	ip, ip, #24
   15f54:	ldr	ip, [ip]
   15f58:	str	ip, [sp, #16]
   15f5c:	str	r0, [sp, #12]
   15f60:	str	r1, [sp, #8]
   15f64:	str	r2, [sp, #4]
   15f68:	str	r3, [sp]
   15f6c:	mov	r3, r4
   15f70:	mov	r2, lr
   15f74:	mov	r1, r5
   15f78:	ldr	r0, [fp, #-24]	; 0xffffffe8
   15f7c:	bl	10df0 <fprintf@plt>
   15f80:	b	1617c <__assert_fail@plt+0x52e4>
   15f84:	movw	r0, #33664	; 0x8380
   15f88:	movt	r0, #1
   15f8c:	bl	10dd8 <gettext@plt>
   15f90:	mov	r6, r0
   15f94:	ldr	r3, [fp, #4]
   15f98:	ldr	r4, [r3]
   15f9c:	ldr	r3, [fp, #4]
   15fa0:	add	r3, r3, #4
   15fa4:	ldr	r5, [r3]
   15fa8:	ldr	r3, [fp, #4]
   15fac:	add	r3, r3, #8
   15fb0:	ldr	r3, [r3]
   15fb4:	ldr	r2, [fp, #4]
   15fb8:	add	r2, r2, #12
   15fbc:	ldr	r2, [r2]
   15fc0:	ldr	r1, [fp, #4]
   15fc4:	add	r1, r1, #16
   15fc8:	ldr	r1, [r1]
   15fcc:	ldr	r0, [fp, #4]
   15fd0:	add	r0, r0, #20
   15fd4:	ldr	r0, [r0]
   15fd8:	ldr	ip, [fp, #4]
   15fdc:	add	ip, ip, #24
   15fe0:	ldr	ip, [ip]
   15fe4:	ldr	lr, [fp, #4]
   15fe8:	add	lr, lr, #28
   15fec:	ldr	lr, [lr]
   15ff0:	str	lr, [sp, #20]
   15ff4:	str	ip, [sp, #16]
   15ff8:	str	r0, [sp, #12]
   15ffc:	str	r1, [sp, #8]
   16000:	str	r2, [sp, #4]
   16004:	str	r3, [sp]
   16008:	mov	r3, r5
   1600c:	mov	r2, r4
   16010:	mov	r1, r6
   16014:	ldr	r0, [fp, #-24]	; 0xffffffe8
   16018:	bl	10df0 <fprintf@plt>
   1601c:	b	1617c <__assert_fail@plt+0x52e4>
   16020:	movw	r0, #33712	; 0x83b0
   16024:	movt	r0, #1
   16028:	bl	10dd8 <gettext@plt>
   1602c:	mov	r7, r0
   16030:	ldr	r3, [fp, #4]
   16034:	ldr	r5, [r3]
   16038:	ldr	r3, [fp, #4]
   1603c:	add	r3, r3, #4
   16040:	ldr	r6, [r3]
   16044:	ldr	r3, [fp, #4]
   16048:	add	r3, r3, #8
   1604c:	ldr	r3, [r3]
   16050:	ldr	r2, [fp, #4]
   16054:	add	r2, r2, #12
   16058:	ldr	r2, [r2]
   1605c:	ldr	r1, [fp, #4]
   16060:	add	r1, r1, #16
   16064:	ldr	r1, [r1]
   16068:	ldr	r0, [fp, #4]
   1606c:	add	r0, r0, #20
   16070:	ldr	r0, [r0]
   16074:	ldr	ip, [fp, #4]
   16078:	add	ip, ip, #24
   1607c:	ldr	ip, [ip]
   16080:	ldr	lr, [fp, #4]
   16084:	add	lr, lr, #28
   16088:	ldr	lr, [lr]
   1608c:	ldr	r4, [fp, #4]
   16090:	add	r4, r4, #32
   16094:	ldr	r4, [r4]
   16098:	str	r4, [sp, #24]
   1609c:	str	lr, [sp, #20]
   160a0:	str	ip, [sp, #16]
   160a4:	str	r0, [sp, #12]
   160a8:	str	r1, [sp, #8]
   160ac:	str	r2, [sp, #4]
   160b0:	str	r3, [sp]
   160b4:	mov	r3, r6
   160b8:	mov	r2, r5
   160bc:	mov	r1, r7
   160c0:	ldr	r0, [fp, #-24]	; 0xffffffe8
   160c4:	bl	10df0 <fprintf@plt>
   160c8:	b	1617c <__assert_fail@plt+0x52e4>
   160cc:	movw	r0, #33764	; 0x83e4
   160d0:	movt	r0, #1
   160d4:	bl	10dd8 <gettext@plt>
   160d8:	mov	r7, r0
   160dc:	ldr	r3, [fp, #4]
   160e0:	ldr	r5, [r3]
   160e4:	ldr	r3, [fp, #4]
   160e8:	add	r3, r3, #4
   160ec:	ldr	r6, [r3]
   160f0:	ldr	r3, [fp, #4]
   160f4:	add	r3, r3, #8
   160f8:	ldr	r3, [r3]
   160fc:	ldr	r2, [fp, #4]
   16100:	add	r2, r2, #12
   16104:	ldr	r2, [r2]
   16108:	ldr	r1, [fp, #4]
   1610c:	add	r1, r1, #16
   16110:	ldr	r1, [r1]
   16114:	ldr	r0, [fp, #4]
   16118:	add	r0, r0, #20
   1611c:	ldr	r0, [r0]
   16120:	ldr	ip, [fp, #4]
   16124:	add	ip, ip, #24
   16128:	ldr	ip, [ip]
   1612c:	ldr	lr, [fp, #4]
   16130:	add	lr, lr, #28
   16134:	ldr	lr, [lr]
   16138:	ldr	r4, [fp, #4]
   1613c:	add	r4, r4, #32
   16140:	ldr	r4, [r4]
   16144:	str	r4, [sp, #24]
   16148:	str	lr, [sp, #20]
   1614c:	str	ip, [sp, #16]
   16150:	str	r0, [sp, #12]
   16154:	str	r1, [sp, #8]
   16158:	str	r2, [sp, #4]
   1615c:	str	r3, [sp]
   16160:	mov	r3, r6
   16164:	mov	r2, r5
   16168:	mov	r1, r7
   1616c:	ldr	r0, [fp, #-24]	; 0xffffffe8
   16170:	bl	10df0 <fprintf@plt>
   16174:	b	1617c <__assert_fail@plt+0x52e4>
   16178:	nop	{0}
   1617c:	nop	{0}
   16180:	sub	sp, fp, #20
   16184:	ldrd	r4, [sp]
   16188:	ldrd	r6, [sp, #8]
   1618c:	ldr	fp, [sp, #16]
   16190:	add	sp, sp, #20
   16194:	pop	{pc}		; (ldr pc, [sp], #4)
   16198:	str	fp, [sp, #-8]!
   1619c:	str	lr, [sp, #4]
   161a0:	add	fp, sp, #4
   161a4:	sub	sp, sp, #32
   161a8:	str	r0, [fp, #-16]
   161ac:	str	r1, [fp, #-20]	; 0xffffffec
   161b0:	str	r2, [fp, #-24]	; 0xffffffe8
   161b4:	str	r3, [fp, #-28]	; 0xffffffe4
   161b8:	mov	r3, #0
   161bc:	str	r3, [fp, #-8]
   161c0:	b	161d0 <__assert_fail@plt+0x5338>
   161c4:	ldr	r3, [fp, #-8]
   161c8:	add	r3, r3, #1
   161cc:	str	r3, [fp, #-8]
   161d0:	ldr	r3, [fp, #-8]
   161d4:	lsl	r3, r3, #2
   161d8:	ldr	r2, [fp, #4]
   161dc:	add	r3, r2, r3
   161e0:	ldr	r3, [r3]
   161e4:	cmp	r3, #0
   161e8:	bne	161c4 <__assert_fail@plt+0x532c>
   161ec:	ldr	r3, [fp, #-8]
   161f0:	str	r3, [sp, #4]
   161f4:	ldr	r3, [fp, #4]
   161f8:	str	r3, [sp]
   161fc:	ldr	r3, [fp, #-28]	; 0xffffffe4
   16200:	ldr	r2, [fp, #-24]	; 0xffffffe8
   16204:	ldr	r1, [fp, #-20]	; 0xffffffec
   16208:	ldr	r0, [fp, #-16]
   1620c:	bl	15c10 <__assert_fail@plt+0x4d78>
   16210:	nop	{0}
   16214:	sub	sp, fp, #4
   16218:	ldr	fp, [sp]
   1621c:	add	sp, sp, #4
   16220:	pop	{pc}		; (ldr pc, [sp], #4)
   16224:	str	fp, [sp, #-8]!
   16228:	str	lr, [sp, #4]
   1622c:	add	fp, sp, #4
   16230:	sub	sp, sp, #72	; 0x48
   16234:	str	r0, [fp, #-56]	; 0xffffffc8
   16238:	str	r1, [fp, #-60]	; 0xffffffc4
   1623c:	str	r2, [fp, #-64]	; 0xffffffc0
   16240:	str	r3, [fp, #-68]	; 0xffffffbc
   16244:	mov	r3, #0
   16248:	str	r3, [fp, #-8]
   1624c:	b	1625c <__assert_fail@plt+0x53c4>
   16250:	ldr	r3, [fp, #-8]
   16254:	add	r3, r3, #1
   16258:	str	r3, [fp, #-8]
   1625c:	ldr	r3, [fp, #-8]
   16260:	cmp	r3, #9
   16264:	bhi	162a8 <__assert_fail@plt+0x5410>
   16268:	ldr	r3, [fp, #4]
   1626c:	add	r2, r3, #4
   16270:	str	r2, [fp, #4]
   16274:	ldr	r2, [r3]
   16278:	ldr	r3, [fp, #-8]
   1627c:	lsl	r3, r3, #2
   16280:	sub	r1, fp, #4
   16284:	add	r3, r1, r3
   16288:	str	r2, [r3, #-44]	; 0xffffffd4
   1628c:	ldr	r3, [fp, #-8]
   16290:	lsl	r3, r3, #2
   16294:	sub	r2, fp, #4
   16298:	add	r3, r2, r3
   1629c:	ldr	r3, [r3, #-44]	; 0xffffffd4
   162a0:	cmp	r3, #0
   162a4:	bne	16250 <__assert_fail@plt+0x53b8>
   162a8:	ldr	r3, [fp, #-8]
   162ac:	str	r3, [sp, #4]
   162b0:	sub	r3, fp, #48	; 0x30
   162b4:	str	r3, [sp]
   162b8:	ldr	r3, [fp, #-68]	; 0xffffffbc
   162bc:	ldr	r2, [fp, #-64]	; 0xffffffc0
   162c0:	ldr	r1, [fp, #-60]	; 0xffffffc4
   162c4:	ldr	r0, [fp, #-56]	; 0xffffffc8
   162c8:	bl	15c10 <__assert_fail@plt+0x4d78>
   162cc:	nop	{0}
   162d0:	sub	sp, fp, #4
   162d4:	ldr	fp, [sp]
   162d8:	add	sp, sp, #4
   162dc:	pop	{pc}		; (ldr pc, [sp], #4)
   162e0:	push	{r3}		; (str r3, [sp, #-4]!)
   162e4:	str	fp, [sp, #-8]!
   162e8:	str	lr, [sp, #4]
   162ec:	add	fp, sp, #4
   162f0:	sub	sp, sp, #36	; 0x24
   162f4:	str	r0, [fp, #-20]	; 0xffffffec
   162f8:	str	r1, [fp, #-24]	; 0xffffffe8
   162fc:	str	r2, [fp, #-28]	; 0xffffffe4
   16300:	add	r3, fp, #8
   16304:	str	r3, [fp, #-12]
   16308:	ldr	r3, [fp, #-12]
   1630c:	str	r3, [sp]
   16310:	ldr	r3, [fp, #4]
   16314:	ldr	r2, [fp, #-28]	; 0xffffffe4
   16318:	ldr	r1, [fp, #-24]	; 0xffffffe8
   1631c:	ldr	r0, [fp, #-20]	; 0xffffffec
   16320:	bl	16224 <__assert_fail@plt+0x538c>
   16324:	nop	{0}
   16328:	sub	sp, fp, #4
   1632c:	ldr	fp, [sp]
   16330:	ldr	lr, [sp, #4]
   16334:	add	sp, sp, #8
   16338:	add	sp, sp, #4
   1633c:	bx	lr
   16340:	str	fp, [sp, #-8]!
   16344:	str	lr, [sp, #4]
   16348:	add	fp, sp, #4
   1634c:	movw	r3, #37196	; 0x914c
   16350:	movt	r3, #2
   16354:	ldr	r3, [r3]
   16358:	mov	r1, r3
   1635c:	mov	r0, #10
   16360:	bl	10cc4 <fputc_unlocked@plt>
   16364:	movw	r0, #33824	; 0x8420
   16368:	movt	r0, #1
   1636c:	bl	10dd8 <gettext@plt>
   16370:	mov	r3, r0
   16374:	movw	r1, #33844	; 0x8434
   16378:	movt	r1, #1
   1637c:	mov	r0, r3
   16380:	bl	10c70 <printf@plt>
   16384:	movw	r0, #33868	; 0x844c
   16388:	movt	r0, #1
   1638c:	bl	10dd8 <gettext@plt>
   16390:	mov	r3, r0
   16394:	movw	r2, #33888	; 0x8460
   16398:	movt	r2, #1
   1639c:	movw	r1, #33928	; 0x8488
   163a0:	movt	r1, #1
   163a4:	mov	r0, r3
   163a8:	bl	10c70 <printf@plt>
   163ac:	movw	r0, #33944	; 0x8498
   163b0:	movt	r0, #1
   163b4:	bl	10dd8 <gettext@plt>
   163b8:	mov	r3, r0
   163bc:	movw	r1, #33984	; 0x84c0
   163c0:	movt	r1, #1
   163c4:	mov	r0, r3
   163c8:	bl	10c70 <printf@plt>
   163cc:	nop	{0}
   163d0:	sub	sp, fp, #4
   163d4:	ldr	fp, [sp]
   163d8:	add	sp, sp, #4
   163dc:	pop	{pc}		; (ldr pc, [sp], #4)
   163e0:	str	fp, [sp, #-8]!
   163e4:	str	lr, [sp, #4]
   163e8:	add	fp, sp, #4
   163ec:	sub	sp, sp, #16
   163f0:	str	r0, [fp, #-8]
   163f4:	str	r1, [fp, #-12]
   163f8:	str	r2, [fp, #-16]
   163fc:	ldr	r2, [fp, #-16]
   16400:	ldr	r1, [fp, #-12]
   16404:	ldr	r0, [fp, #-8]
   16408:	bl	165c4 <__assert_fail@plt+0x572c>
   1640c:	mov	r3, r0
   16410:	mov	r0, r3
   16414:	sub	sp, fp, #4
   16418:	ldr	fp, [sp]
   1641c:	add	sp, sp, #4
   16420:	pop	{pc}		; (ldr pc, [sp], #4)
   16424:	str	fp, [sp, #-8]!
   16428:	str	lr, [sp, #4]
   1642c:	add	fp, sp, #4
   16430:	sub	sp, sp, #8
   16434:	str	r0, [fp, #-8]
   16438:	ldr	r3, [fp, #-8]
   1643c:	cmp	r3, #0
   16440:	bne	16448 <__assert_fail@plt+0x55b0>
   16444:	bl	16cd4 <__assert_fail@plt+0x5e3c>
   16448:	ldr	r3, [fp, #-8]
   1644c:	mov	r0, r3
   16450:	sub	sp, fp, #4
   16454:	ldr	fp, [sp]
   16458:	add	sp, sp, #4
   1645c:	pop	{pc}		; (ldr pc, [sp], #4)
   16460:	str	fp, [sp, #-8]!
   16464:	str	lr, [sp, #4]
   16468:	add	fp, sp, #4
   1646c:	sub	sp, sp, #8
   16470:	str	r0, [fp, #-8]
   16474:	ldr	r0, [fp, #-8]
   16478:	bl	16de8 <__assert_fail@plt+0x5f50>
   1647c:	mov	r3, r0
   16480:	mov	r0, r3
   16484:	bl	16424 <__assert_fail@plt+0x558c>
   16488:	mov	r3, r0
   1648c:	mov	r0, r3
   16490:	sub	sp, fp, #4
   16494:	ldr	fp, [sp]
   16498:	add	sp, sp, #4
   1649c:	pop	{pc}		; (ldr pc, [sp], #4)
   164a0:	str	fp, [sp, #-8]!
   164a4:	str	lr, [sp, #4]
   164a8:	add	fp, sp, #4
   164ac:	sub	sp, sp, #8
   164b0:	str	r0, [fp, #-8]
   164b4:	ldr	r0, [fp, #-8]
   164b8:	bl	170f4 <__assert_fail@plt+0x625c>
   164bc:	mov	r3, r0
   164c0:	mov	r0, r3
   164c4:	bl	16424 <__assert_fail@plt+0x558c>
   164c8:	mov	r3, r0
   164cc:	mov	r0, r3
   164d0:	sub	sp, fp, #4
   164d4:	ldr	fp, [sp]
   164d8:	add	sp, sp, #4
   164dc:	pop	{pc}		; (ldr pc, [sp], #4)
   164e0:	str	fp, [sp, #-8]!
   164e4:	str	lr, [sp, #4]
   164e8:	add	fp, sp, #4
   164ec:	sub	sp, sp, #8
   164f0:	str	r0, [fp, #-8]
   164f4:	ldr	r0, [fp, #-8]
   164f8:	bl	16460 <__assert_fail@plt+0x55c8>
   164fc:	mov	r3, r0
   16500:	mov	r0, r3
   16504:	sub	sp, fp, #4
   16508:	ldr	fp, [sp]
   1650c:	add	sp, sp, #4
   16510:	pop	{pc}		; (ldr pc, [sp], #4)
   16514:	str	fp, [sp, #-8]!
   16518:	str	lr, [sp, #4]
   1651c:	add	fp, sp, #4
   16520:	sub	sp, sp, #16
   16524:	str	r0, [fp, #-16]
   16528:	str	r1, [fp, #-20]	; 0xffffffec
   1652c:	ldr	r1, [fp, #-20]	; 0xffffffec
   16530:	ldr	r0, [fp, #-16]
   16534:	bl	16e78 <__assert_fail@plt+0x5fe0>
   16538:	str	r0, [fp, #-8]
   1653c:	ldr	r3, [fp, #-8]
   16540:	cmp	r3, #0
   16544:	bne	16564 <__assert_fail@plt+0x56cc>
   16548:	ldr	r3, [fp, #-16]
   1654c:	cmp	r3, #0
   16550:	beq	16560 <__assert_fail@plt+0x56c8>
   16554:	ldr	r3, [fp, #-20]	; 0xffffffec
   16558:	cmp	r3, #0
   1655c:	beq	16564 <__assert_fail@plt+0x56cc>
   16560:	bl	16cd4 <__assert_fail@plt+0x5e3c>
   16564:	ldr	r3, [fp, #-8]
   16568:	mov	r0, r3
   1656c:	sub	sp, fp, #4
   16570:	ldr	fp, [sp]
   16574:	add	sp, sp, #4
   16578:	pop	{pc}		; (ldr pc, [sp], #4)
   1657c:	str	fp, [sp, #-8]!
   16580:	str	lr, [sp, #4]
   16584:	add	fp, sp, #4
   16588:	sub	sp, sp, #8
   1658c:	str	r0, [fp, #-8]
   16590:	str	r1, [fp, #-12]
   16594:	ldr	r1, [fp, #-12]
   16598:	ldr	r0, [fp, #-8]
   1659c:	bl	1712c <__assert_fail@plt+0x6294>
   165a0:	mov	r3, r0
   165a4:	mov	r0, r3
   165a8:	bl	16424 <__assert_fail@plt+0x558c>
   165ac:	mov	r3, r0
   165b0:	mov	r0, r3
   165b4:	sub	sp, fp, #4
   165b8:	ldr	fp, [sp]
   165bc:	add	sp, sp, #4
   165c0:	pop	{pc}		; (ldr pc, [sp], #4)
   165c4:	str	fp, [sp, #-8]!
   165c8:	str	lr, [sp, #4]
   165cc:	add	fp, sp, #4
   165d0:	sub	sp, sp, #24
   165d4:	str	r0, [fp, #-16]
   165d8:	str	r1, [fp, #-20]	; 0xffffffec
   165dc:	str	r2, [fp, #-24]	; 0xffffffe8
   165e0:	ldr	r2, [fp, #-24]	; 0xffffffe8
   165e4:	ldr	r1, [fp, #-20]	; 0xffffffec
   165e8:	ldr	r0, [fp, #-16]
   165ec:	bl	1735c <__assert_fail@plt+0x64c4>
   165f0:	str	r0, [fp, #-8]
   165f4:	ldr	r3, [fp, #-8]
   165f8:	cmp	r3, #0
   165fc:	bne	16628 <__assert_fail@plt+0x5790>
   16600:	ldr	r3, [fp, #-16]
   16604:	cmp	r3, #0
   16608:	beq	16624 <__assert_fail@plt+0x578c>
   1660c:	ldr	r3, [fp, #-20]	; 0xffffffec
   16610:	cmp	r3, #0
   16614:	beq	16628 <__assert_fail@plt+0x5790>
   16618:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1661c:	cmp	r3, #0
   16620:	beq	16628 <__assert_fail@plt+0x5790>
   16624:	bl	16cd4 <__assert_fail@plt+0x5e3c>
   16628:	ldr	r3, [fp, #-8]
   1662c:	mov	r0, r3
   16630:	sub	sp, fp, #4
   16634:	ldr	fp, [sp]
   16638:	add	sp, sp, #4
   1663c:	pop	{pc}		; (ldr pc, [sp], #4)
   16640:	str	fp, [sp, #-8]!
   16644:	str	lr, [sp, #4]
   16648:	add	fp, sp, #4
   1664c:	sub	sp, sp, #16
   16650:	str	r0, [fp, #-8]
   16654:	str	r1, [fp, #-12]
   16658:	str	r2, [fp, #-16]
   1665c:	ldr	r2, [fp, #-16]
   16660:	ldr	r1, [fp, #-12]
   16664:	ldr	r0, [fp, #-8]
   16668:	bl	171cc <__assert_fail@plt+0x6334>
   1666c:	mov	r3, r0
   16670:	mov	r0, r3
   16674:	bl	16424 <__assert_fail@plt+0x558c>
   16678:	mov	r3, r0
   1667c:	mov	r0, r3
   16680:	sub	sp, fp, #4
   16684:	ldr	fp, [sp]
   16688:	add	sp, sp, #4
   1668c:	pop	{pc}		; (ldr pc, [sp], #4)
   16690:	str	fp, [sp, #-8]!
   16694:	str	lr, [sp, #4]
   16698:	add	fp, sp, #4
   1669c:	sub	sp, sp, #8
   166a0:	str	r0, [fp, #-8]
   166a4:	str	r1, [fp, #-12]
   166a8:	ldr	r2, [fp, #-12]
   166ac:	ldr	r1, [fp, #-8]
   166b0:	mov	r0, #0
   166b4:	bl	165c4 <__assert_fail@plt+0x572c>
   166b8:	mov	r3, r0
   166bc:	mov	r0, r3
   166c0:	sub	sp, fp, #4
   166c4:	ldr	fp, [sp]
   166c8:	add	sp, sp, #4
   166cc:	pop	{pc}		; (ldr pc, [sp], #4)
   166d0:	str	fp, [sp, #-8]!
   166d4:	str	lr, [sp, #4]
   166d8:	add	fp, sp, #4
   166dc:	sub	sp, sp, #8
   166e0:	str	r0, [fp, #-8]
   166e4:	str	r1, [fp, #-12]
   166e8:	ldr	r2, [fp, #-12]
   166ec:	ldr	r1, [fp, #-8]
   166f0:	mov	r0, #0
   166f4:	bl	16640 <__assert_fail@plt+0x57a8>
   166f8:	mov	r3, r0
   166fc:	mov	r0, r3
   16700:	sub	sp, fp, #4
   16704:	ldr	fp, [sp]
   16708:	add	sp, sp, #4
   1670c:	pop	{pc}		; (ldr pc, [sp], #4)
   16710:	str	fp, [sp, #-8]!
   16714:	str	lr, [sp, #4]
   16718:	add	fp, sp, #4
   1671c:	sub	sp, sp, #8
   16720:	str	r0, [fp, #-8]
   16724:	str	r1, [fp, #-12]
   16728:	mov	r2, #1
   1672c:	ldr	r1, [fp, #-12]
   16730:	ldr	r0, [fp, #-8]
   16734:	bl	16750 <__assert_fail@plt+0x58b8>
   16738:	mov	r3, r0
   1673c:	mov	r0, r3
   16740:	sub	sp, fp, #4
   16744:	ldr	fp, [sp]
   16748:	add	sp, sp, #4
   1674c:	pop	{pc}		; (ldr pc, [sp], #4)
   16750:	str	fp, [sp, #-8]!
   16754:	str	lr, [sp, #4]
   16758:	add	fp, sp, #4
   1675c:	sub	sp, sp, #24
   16760:	str	r0, [fp, #-16]
   16764:	str	r1, [fp, #-20]	; 0xffffffec
   16768:	str	r2, [fp, #-24]	; 0xffffffe8
   1676c:	ldr	r3, [fp, #-20]	; 0xffffffec
   16770:	ldr	r3, [r3]
   16774:	str	r3, [fp, #-8]
   16778:	ldr	r3, [fp, #-16]
   1677c:	cmp	r3, #0
   16780:	bne	167c8 <__assert_fail@plt+0x5930>
   16784:	ldr	r3, [fp, #-8]
   16788:	cmp	r3, #0
   1678c:	bne	16804 <__assert_fail@plt+0x596c>
   16790:	mov	r2, #64	; 0x40
   16794:	ldr	r3, [fp, #-24]	; 0xffffffe8
   16798:	udiv	r3, r2, r3
   1679c:	str	r3, [fp, #-8]
   167a0:	ldr	r3, [fp, #-8]
   167a4:	cmp	r3, #0
   167a8:	moveq	r3, #1
   167ac:	movne	r3, #0
   167b0:	uxtb	r3, r3
   167b4:	mov	r2, r3
   167b8:	ldr	r3, [fp, #-8]
   167bc:	add	r3, r2, r3
   167c0:	str	r3, [fp, #-8]
   167c4:	b	16804 <__assert_fail@plt+0x596c>
   167c8:	ldr	r2, [fp, #-8]
   167cc:	ldr	r3, [fp, #-8]
   167d0:	lsr	r3, r3, #1
   167d4:	add	r3, r3, #1
   167d8:	mov	r1, #0
   167dc:	adds	r3, r2, r3
   167e0:	bcc	167e8 <__assert_fail@plt+0x5950>
   167e4:	mov	r1, #1
   167e8:	str	r3, [fp, #-8]
   167ec:	mov	r3, r1
   167f0:	and	r3, r3, #1
   167f4:	uxtb	r3, r3
   167f8:	cmp	r3, #0
   167fc:	beq	16804 <__assert_fail@plt+0x596c>
   16800:	bl	16cd4 <__assert_fail@plt+0x5e3c>
   16804:	ldr	r3, [fp, #-8]
   16808:	ldr	r2, [fp, #-24]	; 0xffffffe8
   1680c:	mov	r1, r3
   16810:	ldr	r0, [fp, #-16]
   16814:	bl	165c4 <__assert_fail@plt+0x572c>
   16818:	str	r0, [fp, #-16]
   1681c:	ldr	r2, [fp, #-8]
   16820:	ldr	r3, [fp, #-20]	; 0xffffffec
   16824:	str	r2, [r3]
   16828:	ldr	r3, [fp, #-16]
   1682c:	mov	r0, r3
   16830:	sub	sp, fp, #4
   16834:	ldr	fp, [sp]
   16838:	add	sp, sp, #4
   1683c:	pop	{pc}		; (ldr pc, [sp], #4)
   16840:	str	fp, [sp, #-8]!
   16844:	str	lr, [sp, #4]
   16848:	add	fp, sp, #4
   1684c:	sub	sp, sp, #32
   16850:	str	r0, [fp, #-24]	; 0xffffffe8
   16854:	str	r1, [fp, #-28]	; 0xffffffe4
   16858:	str	r2, [fp, #-32]	; 0xffffffe0
   1685c:	str	r3, [fp, #-36]	; 0xffffffdc
   16860:	ldr	r3, [fp, #-28]	; 0xffffffe4
   16864:	ldr	r3, [r3]
   16868:	str	r3, [fp, #-8]
   1686c:	ldr	r3, [fp, #-8]
   16870:	asr	r3, r3, #1
   16874:	mov	r1, #0
   16878:	ldr	r2, [fp, #-8]
   1687c:	adds	r3, r2, r3
   16880:	bvc	16888 <__assert_fail@plt+0x59f0>
   16884:	mov	r1, #1
   16888:	str	r3, [fp, #-16]
   1688c:	mov	r3, r1
   16890:	and	r3, r3, #1
   16894:	uxtb	r3, r3
   16898:	cmp	r3, #0
   1689c:	beq	168a8 <__assert_fail@plt+0x5a10>
   168a0:	mvn	r3, #-2147483648	; 0x80000000
   168a4:	str	r3, [fp, #-16]
   168a8:	ldr	r3, [fp, #-36]	; 0xffffffdc
   168ac:	cmp	r3, #0
   168b0:	blt	168cc <__assert_fail@plt+0x5a34>
   168b4:	ldr	r3, [fp, #-16]
   168b8:	ldr	r2, [fp, #-36]	; 0xffffffdc
   168bc:	cmp	r2, r3
   168c0:	bge	168cc <__assert_fail@plt+0x5a34>
   168c4:	ldr	r3, [fp, #-36]	; 0xffffffdc
   168c8:	str	r3, [fp, #-16]
   168cc:	ldr	r2, [fp, #-16]
   168d0:	mov	lr, #0
   168d4:	ldr	r3, [fp, #4]
   168d8:	smull	r2, r3, r2, r3
   168dc:	mov	r0, #0
   168e0:	mov	r1, #0
   168e4:	mov	r0, r3
   168e8:	asr	r1, r3, #31
   168ec:	asr	ip, r2, #31
   168f0:	cmp	ip, r0
   168f4:	beq	168fc <__assert_fail@plt+0x5a64>
   168f8:	mov	lr, #1
   168fc:	mov	r3, r2
   16900:	str	r3, [fp, #-20]	; 0xffffffec
   16904:	mov	r3, lr
   16908:	and	r3, r3, #1
   1690c:	uxtb	r3, r3
   16910:	cmp	r3, #0
   16914:	beq	16920 <__assert_fail@plt+0x5a88>
   16918:	mvn	r3, #-2147483648	; 0x80000000
   1691c:	b	16938 <__assert_fail@plt+0x5aa0>
   16920:	ldr	r3, [fp, #-20]	; 0xffffffec
   16924:	cmp	r3, #63	; 0x3f
   16928:	bgt	16934 <__assert_fail@plt+0x5a9c>
   1692c:	mov	r3, #64	; 0x40
   16930:	b	16938 <__assert_fail@plt+0x5aa0>
   16934:	mov	r3, #0
   16938:	str	r3, [fp, #-12]
   1693c:	ldr	r3, [fp, #-12]
   16940:	cmp	r3, #0
   16944:	beq	1697c <__assert_fail@plt+0x5ae4>
   16948:	ldr	r2, [fp, #-12]
   1694c:	ldr	r3, [fp, #4]
   16950:	sdiv	r3, r2, r3
   16954:	str	r3, [fp, #-16]
   16958:	ldr	r3, [fp, #-12]
   1695c:	ldr	r2, [fp, #4]
   16960:	sdiv	r2, r3, r2
   16964:	ldr	r1, [fp, #4]
   16968:	mul	r2, r1, r2
   1696c:	sub	r3, r3, r2
   16970:	ldr	r2, [fp, #-12]
   16974:	sub	r3, r2, r3
   16978:	str	r3, [fp, #-20]	; 0xffffffec
   1697c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   16980:	cmp	r3, #0
   16984:	bne	16994 <__assert_fail@plt+0x5afc>
   16988:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1698c:	mov	r2, #0
   16990:	str	r2, [r3]
   16994:	ldr	r2, [fp, #-16]
   16998:	ldr	r3, [fp, #-8]
   1699c:	sub	r3, r2, r3
   169a0:	ldr	r2, [fp, #-32]	; 0xffffffe0
   169a4:	cmp	r2, r3
   169a8:	ble	16a48 <__assert_fail@plt+0x5bb0>
   169ac:	mov	r1, #0
   169b0:	ldr	r2, [fp, #-8]
   169b4:	ldr	r3, [fp, #-32]	; 0xffffffe0
   169b8:	adds	r3, r2, r3
   169bc:	bvc	169c4 <__assert_fail@plt+0x5b2c>
   169c0:	mov	r1, #1
   169c4:	str	r3, [fp, #-16]
   169c8:	mov	r3, r1
   169cc:	and	r3, r3, #1
   169d0:	uxtb	r3, r3
   169d4:	cmp	r3, #0
   169d8:	bne	16a44 <__assert_fail@plt+0x5bac>
   169dc:	ldr	r3, [fp, #-36]	; 0xffffffdc
   169e0:	cmp	r3, #0
   169e4:	blt	169f8 <__assert_fail@plt+0x5b60>
   169e8:	ldr	r3, [fp, #-16]
   169ec:	ldr	r2, [fp, #-36]	; 0xffffffdc
   169f0:	cmp	r2, r3
   169f4:	blt	16a44 <__assert_fail@plt+0x5bac>
   169f8:	ldr	r2, [fp, #-16]
   169fc:	mov	lr, #0
   16a00:	ldr	r3, [fp, #4]
   16a04:	smull	r2, r3, r2, r3
   16a08:	mov	r0, #0
   16a0c:	mov	r1, #0
   16a10:	mov	r0, r3
   16a14:	asr	r1, r3, #31
   16a18:	asr	ip, r2, #31
   16a1c:	cmp	ip, r0
   16a20:	beq	16a28 <__assert_fail@plt+0x5b90>
   16a24:	mov	lr, #1
   16a28:	mov	r3, r2
   16a2c:	str	r3, [fp, #-20]	; 0xffffffec
   16a30:	mov	r3, lr
   16a34:	and	r3, r3, #1
   16a38:	uxtb	r3, r3
   16a3c:	cmp	r3, #0
   16a40:	beq	16a48 <__assert_fail@plt+0x5bb0>
   16a44:	bl	16cd4 <__assert_fail@plt+0x5e3c>
   16a48:	ldr	r3, [fp, #-20]	; 0xffffffec
   16a4c:	mov	r1, r3
   16a50:	ldr	r0, [fp, #-24]	; 0xffffffe8
   16a54:	bl	16514 <__assert_fail@plt+0x567c>
   16a58:	str	r0, [fp, #-24]	; 0xffffffe8
   16a5c:	ldr	r2, [fp, #-16]
   16a60:	ldr	r3, [fp, #-28]	; 0xffffffe4
   16a64:	str	r2, [r3]
   16a68:	ldr	r3, [fp, #-24]	; 0xffffffe8
   16a6c:	mov	r0, r3
   16a70:	sub	sp, fp, #4
   16a74:	ldr	fp, [sp]
   16a78:	add	sp, sp, #4
   16a7c:	pop	{pc}		; (ldr pc, [sp], #4)
   16a80:	str	fp, [sp, #-8]!
   16a84:	str	lr, [sp, #4]
   16a88:	add	fp, sp, #4
   16a8c:	sub	sp, sp, #8
   16a90:	str	r0, [fp, #-8]
   16a94:	mov	r1, #1
   16a98:	ldr	r0, [fp, #-8]
   16a9c:	bl	16af0 <__assert_fail@plt+0x5c58>
   16aa0:	mov	r3, r0
   16aa4:	mov	r0, r3
   16aa8:	sub	sp, fp, #4
   16aac:	ldr	fp, [sp]
   16ab0:	add	sp, sp, #4
   16ab4:	pop	{pc}		; (ldr pc, [sp], #4)
   16ab8:	str	fp, [sp, #-8]!
   16abc:	str	lr, [sp, #4]
   16ac0:	add	fp, sp, #4
   16ac4:	sub	sp, sp, #8
   16ac8:	str	r0, [fp, #-8]
   16acc:	mov	r1, #1
   16ad0:	ldr	r0, [fp, #-8]
   16ad4:	bl	16b38 <__assert_fail@plt+0x5ca0>
   16ad8:	mov	r3, r0
   16adc:	mov	r0, r3
   16ae0:	sub	sp, fp, #4
   16ae4:	ldr	fp, [sp]
   16ae8:	add	sp, sp, #4
   16aec:	pop	{pc}		; (ldr pc, [sp], #4)
   16af0:	str	fp, [sp, #-8]!
   16af4:	str	lr, [sp, #4]
   16af8:	add	fp, sp, #4
   16afc:	sub	sp, sp, #8
   16b00:	str	r0, [fp, #-8]
   16b04:	str	r1, [fp, #-12]
   16b08:	ldr	r1, [fp, #-12]
   16b0c:	ldr	r0, [fp, #-8]
   16b10:	bl	16d18 <__assert_fail@plt+0x5e80>
   16b14:	mov	r3, r0
   16b18:	mov	r0, r3
   16b1c:	bl	16424 <__assert_fail@plt+0x558c>
   16b20:	mov	r3, r0
   16b24:	mov	r0, r3
   16b28:	sub	sp, fp, #4
   16b2c:	ldr	fp, [sp]
   16b30:	add	sp, sp, #4
   16b34:	pop	{pc}		; (ldr pc, [sp], #4)
   16b38:	str	fp, [sp, #-8]!
   16b3c:	str	lr, [sp, #4]
   16b40:	add	fp, sp, #4
   16b44:	sub	sp, sp, #8
   16b48:	str	r0, [fp, #-8]
   16b4c:	str	r1, [fp, #-12]
   16b50:	ldr	r1, [fp, #-12]
   16b54:	ldr	r0, [fp, #-8]
   16b58:	bl	17188 <__assert_fail@plt+0x62f0>
   16b5c:	mov	r3, r0
   16b60:	mov	r0, r3
   16b64:	bl	16424 <__assert_fail@plt+0x558c>
   16b68:	mov	r3, r0
   16b6c:	mov	r0, r3
   16b70:	sub	sp, fp, #4
   16b74:	ldr	fp, [sp]
   16b78:	add	sp, sp, #4
   16b7c:	pop	{pc}		; (ldr pc, [sp], #4)
   16b80:	str	fp, [sp, #-8]!
   16b84:	str	lr, [sp, #4]
   16b88:	add	fp, sp, #4
   16b8c:	sub	sp, sp, #8
   16b90:	str	r0, [fp, #-8]
   16b94:	str	r1, [fp, #-12]
   16b98:	ldr	r0, [fp, #-12]
   16b9c:	bl	16460 <__assert_fail@plt+0x55c8>
   16ba0:	mov	r3, r0
   16ba4:	ldr	r2, [fp, #-12]
   16ba8:	ldr	r1, [fp, #-8]
   16bac:	mov	r0, r3
   16bb0:	bl	10ca0 <memcpy@plt>
   16bb4:	mov	r3, r0
   16bb8:	mov	r0, r3
   16bbc:	sub	sp, fp, #4
   16bc0:	ldr	fp, [sp]
   16bc4:	add	sp, sp, #4
   16bc8:	pop	{pc}		; (ldr pc, [sp], #4)
   16bcc:	str	fp, [sp, #-8]!
   16bd0:	str	lr, [sp, #4]
   16bd4:	add	fp, sp, #4
   16bd8:	sub	sp, sp, #8
   16bdc:	str	r0, [fp, #-8]
   16be0:	str	r1, [fp, #-12]
   16be4:	ldr	r0, [fp, #-12]
   16be8:	bl	164a0 <__assert_fail@plt+0x5608>
   16bec:	mov	r3, r0
   16bf0:	mov	r0, r3
   16bf4:	ldr	r3, [fp, #-12]
   16bf8:	mov	r2, r3
   16bfc:	ldr	r1, [fp, #-8]
   16c00:	bl	10ca0 <memcpy@plt>
   16c04:	mov	r3, r0
   16c08:	mov	r0, r3
   16c0c:	sub	sp, fp, #4
   16c10:	ldr	fp, [sp]
   16c14:	add	sp, sp, #4
   16c18:	pop	{pc}		; (ldr pc, [sp], #4)
   16c1c:	str	fp, [sp, #-8]!
   16c20:	str	lr, [sp, #4]
   16c24:	add	fp, sp, #4
   16c28:	sub	sp, sp, #16
   16c2c:	str	r0, [fp, #-16]
   16c30:	str	r1, [fp, #-20]	; 0xffffffec
   16c34:	ldr	r3, [fp, #-20]	; 0xffffffec
   16c38:	add	r3, r3, #1
   16c3c:	mov	r0, r3
   16c40:	bl	164a0 <__assert_fail@plt+0x5608>
   16c44:	mov	r3, r0
   16c48:	str	r3, [fp, #-8]
   16c4c:	ldr	r3, [fp, #-20]	; 0xffffffec
   16c50:	ldr	r2, [fp, #-8]
   16c54:	add	r3, r2, r3
   16c58:	mov	r2, #0
   16c5c:	strb	r2, [r3]
   16c60:	ldr	r3, [fp, #-20]	; 0xffffffec
   16c64:	mov	r2, r3
   16c68:	ldr	r1, [fp, #-16]
   16c6c:	ldr	r0, [fp, #-8]
   16c70:	bl	10ca0 <memcpy@plt>
   16c74:	mov	r3, r0
   16c78:	mov	r0, r3
   16c7c:	sub	sp, fp, #4
   16c80:	ldr	fp, [sp]
   16c84:	add	sp, sp, #4
   16c88:	pop	{pc}		; (ldr pc, [sp], #4)
   16c8c:	str	fp, [sp, #-8]!
   16c90:	str	lr, [sp, #4]
   16c94:	add	fp, sp, #4
   16c98:	sub	sp, sp, #8
   16c9c:	str	r0, [fp, #-8]
   16ca0:	ldr	r0, [fp, #-8]
   16ca4:	bl	10de4 <strlen@plt>
   16ca8:	mov	r3, r0
   16cac:	add	r3, r3, #1
   16cb0:	mov	r1, r3
   16cb4:	ldr	r0, [fp, #-8]
   16cb8:	bl	16b80 <__assert_fail@plt+0x5ce8>
   16cbc:	mov	r3, r0
   16cc0:	mov	r0, r3
   16cc4:	sub	sp, fp, #4
   16cc8:	ldr	fp, [sp]
   16ccc:	add	sp, sp, #4
   16cd0:	pop	{pc}		; (ldr pc, [sp], #4)
   16cd4:	strd	r4, [sp, #-16]!
   16cd8:	str	fp, [sp, #8]
   16cdc:	str	lr, [sp, #12]
   16ce0:	add	fp, sp, #12
   16ce4:	movw	r3, #37096	; 0x90e8
   16ce8:	movt	r3, #2
   16cec:	ldr	r4, [r3]
   16cf0:	movw	r0, #34064	; 0x8510
   16cf4:	movt	r0, #1
   16cf8:	bl	10dd8 <gettext@plt>
   16cfc:	mov	r3, r0
   16d00:	movw	r2, #34084	; 0x8524
   16d04:	movt	r2, #1
   16d08:	mov	r1, #0
   16d0c:	mov	r0, r4
   16d10:	bl	10d54 <error@plt>
   16d14:	bl	10e80 <abort@plt>
   16d18:	str	fp, [sp, #-8]!
   16d1c:	str	lr, [sp, #4]
   16d20:	add	fp, sp, #4
   16d24:	sub	sp, sp, #16
   16d28:	str	r0, [fp, #-16]
   16d2c:	str	r1, [fp, #-20]	; 0xffffffec
   16d30:	ldr	r3, [fp, #-16]
   16d34:	cmp	r3, #0
   16d38:	beq	16d48 <__assert_fail@plt+0x5eb0>
   16d3c:	ldr	r3, [fp, #-20]	; 0xffffffec
   16d40:	cmp	r3, #0
   16d44:	bne	16d58 <__assert_fail@plt+0x5ec0>
   16d48:	mov	r3, #1
   16d4c:	str	r3, [fp, #-20]	; 0xffffffec
   16d50:	ldr	r3, [fp, #-20]	; 0xffffffec
   16d54:	str	r3, [fp, #-16]
   16d58:	mov	ip, #0
   16d5c:	ldr	r2, [fp, #-16]
   16d60:	ldr	r3, [fp, #-20]	; 0xffffffec
   16d64:	umull	r0, r1, r2, r3
   16d68:	mov	r2, #0
   16d6c:	mov	r3, #0
   16d70:	mov	r2, r1
   16d74:	mov	r3, #0
   16d78:	cmp	r2, #0
   16d7c:	beq	16d84 <__assert_fail@plt+0x5eec>
   16d80:	mov	ip, #1
   16d84:	cmp	r0, #0
   16d88:	bge	16d90 <__assert_fail@plt+0x5ef8>
   16d8c:	mov	ip, #1
   16d90:	mov	r3, ip
   16d94:	and	r3, r3, #1
   16d98:	uxtb	r3, r3
   16d9c:	cmp	r3, #0
   16da0:	beq	16dbc <__assert_fail@plt+0x5f24>
   16da4:	bl	10dfc <__errno_location@plt>
   16da8:	mov	r2, r0
   16dac:	mov	r3, #12
   16db0:	str	r3, [r2]
   16db4:	mov	r3, #0
   16db8:	b	16dd4 <__assert_fail@plt+0x5f3c>
   16dbc:	ldr	r1, [fp, #-20]	; 0xffffffec
   16dc0:	ldr	r0, [fp, #-16]
   16dc4:	bl	10c40 <calloc@plt>
   16dc8:	mov	r3, r0
   16dcc:	str	r3, [fp, #-8]
   16dd0:	ldr	r3, [fp, #-8]
   16dd4:	mov	r0, r3
   16dd8:	sub	sp, fp, #4
   16ddc:	ldr	fp, [sp]
   16de0:	add	sp, sp, #4
   16de4:	pop	{pc}		; (ldr pc, [sp], #4)
   16de8:	str	fp, [sp, #-8]!
   16dec:	str	lr, [sp, #4]
   16df0:	add	fp, sp, #4
   16df4:	sub	sp, sp, #16
   16df8:	str	r0, [fp, #-16]
   16dfc:	ldr	r3, [fp, #-16]
   16e00:	cmp	r3, #0
   16e04:	bne	16e10 <__assert_fail@plt+0x5f78>
   16e08:	mov	r3, #1
   16e0c:	str	r3, [fp, #-16]
   16e10:	mov	r2, #0
   16e14:	ldr	r3, [fp, #-16]
   16e18:	cmp	r3, #0
   16e1c:	bge	16e24 <__assert_fail@plt+0x5f8c>
   16e20:	mov	r2, #1
   16e24:	mov	r3, r2
   16e28:	and	r3, r3, #1
   16e2c:	uxtb	r3, r3
   16e30:	cmp	r3, #0
   16e34:	beq	16e50 <__assert_fail@plt+0x5fb8>
   16e38:	bl	10dfc <__errno_location@plt>
   16e3c:	mov	r2, r0
   16e40:	mov	r3, #12
   16e44:	str	r3, [r2]
   16e48:	mov	r3, #0
   16e4c:	b	16e64 <__assert_fail@plt+0x5fcc>
   16e50:	ldr	r0, [fp, #-16]
   16e54:	bl	10d78 <malloc@plt>
   16e58:	mov	r3, r0
   16e5c:	str	r3, [fp, #-8]
   16e60:	ldr	r3, [fp, #-8]
   16e64:	mov	r0, r3
   16e68:	sub	sp, fp, #4
   16e6c:	ldr	fp, [sp]
   16e70:	add	sp, sp, #4
   16e74:	pop	{pc}		; (ldr pc, [sp], #4)
   16e78:	str	fp, [sp, #-8]!
   16e7c:	str	lr, [sp, #4]
   16e80:	add	fp, sp, #4
   16e84:	sub	sp, sp, #16
   16e88:	str	r0, [fp, #-16]
   16e8c:	str	r1, [fp, #-20]	; 0xffffffec
   16e90:	ldr	r3, [fp, #-16]
   16e94:	cmp	r3, #0
   16e98:	bne	16eac <__assert_fail@plt+0x6014>
   16e9c:	ldr	r0, [fp, #-20]	; 0xffffffec
   16ea0:	bl	16de8 <__assert_fail@plt+0x5f50>
   16ea4:	mov	r3, r0
   16ea8:	b	16f1c <__assert_fail@plt+0x6084>
   16eac:	ldr	r3, [fp, #-20]	; 0xffffffec
   16eb0:	cmp	r3, #0
   16eb4:	bne	16ec8 <__assert_fail@plt+0x6030>
   16eb8:	ldr	r0, [fp, #-16]
   16ebc:	bl	12720 <__assert_fail@plt+0x1888>
   16ec0:	mov	r3, #0
   16ec4:	b	16f1c <__assert_fail@plt+0x6084>
   16ec8:	mov	r2, #0
   16ecc:	ldr	r3, [fp, #-20]	; 0xffffffec
   16ed0:	cmp	r3, #0
   16ed4:	bge	16edc <__assert_fail@plt+0x6044>
   16ed8:	mov	r2, #1
   16edc:	mov	r3, r2
   16ee0:	and	r3, r3, #1
   16ee4:	uxtb	r3, r3
   16ee8:	cmp	r3, #0
   16eec:	beq	16f08 <__assert_fail@plt+0x6070>
   16ef0:	bl	10dfc <__errno_location@plt>
   16ef4:	mov	r2, r0
   16ef8:	mov	r3, #12
   16efc:	str	r3, [r2]
   16f00:	mov	r3, #0
   16f04:	b	16f1c <__assert_fail@plt+0x6084>
   16f08:	ldr	r1, [fp, #-20]	; 0xffffffec
   16f0c:	ldr	r0, [fp, #-16]
   16f10:	bl	10ce8 <realloc@plt>
   16f14:	str	r0, [fp, #-8]
   16f18:	ldr	r3, [fp, #-8]
   16f1c:	mov	r0, r3
   16f20:	sub	sp, fp, #4
   16f24:	ldr	fp, [sp]
   16f28:	add	sp, sp, #4
   16f2c:	pop	{pc}		; (ldr pc, [sp], #4)
   16f30:	strd	r4, [sp, #-16]!
   16f34:	str	fp, [sp, #8]
   16f38:	str	lr, [sp, #12]
   16f3c:	add	fp, sp, #12
   16f40:	sub	sp, sp, #16
   16f44:	str	r0, [fp, #-24]	; 0xffffffe8
   16f48:	str	r1, [fp, #-28]	; 0xffffffe4
   16f4c:	ldr	r5, [fp, #-24]	; 0xffffffe8
   16f50:	ldr	r4, [fp, #-28]	; 0xffffffe4
   16f54:	cmp	r5, r4
   16f58:	bne	16f64 <__assert_fail@plt+0x60cc>
   16f5c:	mov	r3, #0
   16f60:	b	16fc4 <__assert_fail@plt+0x612c>
   16f64:	ldrb	r3, [r5]
   16f68:	mov	r0, r3
   16f6c:	bl	178a8 <__assert_fail@plt+0x6a10>
   16f70:	mov	r3, r0
   16f74:	strb	r3, [fp, #-13]
   16f78:	ldrb	r3, [r4]
   16f7c:	mov	r0, r3
   16f80:	bl	178a8 <__assert_fail@plt+0x6a10>
   16f84:	mov	r3, r0
   16f88:	strb	r3, [fp, #-14]
   16f8c:	ldrb	r3, [fp, #-13]
   16f90:	cmp	r3, #0
   16f94:	beq	16fb4 <__assert_fail@plt+0x611c>
   16f98:	add	r5, r5, #1
   16f9c:	add	r4, r4, #1
   16fa0:	ldrb	r2, [fp, #-13]
   16fa4:	ldrb	r3, [fp, #-14]
   16fa8:	cmp	r2, r3
   16fac:	beq	16f64 <__assert_fail@plt+0x60cc>
   16fb0:	b	16fb8 <__assert_fail@plt+0x6120>
   16fb4:	nop	{0}
   16fb8:	ldrb	r2, [fp, #-13]
   16fbc:	ldrb	r3, [fp, #-14]
   16fc0:	sub	r3, r2, r3
   16fc4:	mov	r0, r3
   16fc8:	sub	sp, fp, #12
   16fcc:	ldrd	r4, [sp]
   16fd0:	ldr	fp, [sp, #8]
   16fd4:	add	sp, sp, #12
   16fd8:	pop	{pc}		; (ldr pc, [sp], #4)
   16fdc:	str	fp, [sp, #-8]!
   16fe0:	str	lr, [sp, #4]
   16fe4:	add	fp, sp, #4
   16fe8:	sub	sp, sp, #16
   16fec:	str	r0, [fp, #-16]
   16ff0:	ldr	r0, [fp, #-16]
   16ff4:	bl	10d30 <__fpending@plt>
   16ff8:	mov	r3, r0
   16ffc:	cmp	r3, #0
   17000:	movne	r3, #1
   17004:	moveq	r3, #0
   17008:	strb	r3, [fp, #-5]
   1700c:	ldr	r0, [fp, #-16]
   17010:	bl	10d3c <ferror_unlocked@plt>
   17014:	mov	r3, r0
   17018:	cmp	r3, #0
   1701c:	movne	r3, #1
   17020:	moveq	r3, #0
   17024:	strb	r3, [fp, #-6]
   17028:	ldr	r0, [fp, #-16]
   1702c:	bl	1255c <__assert_fail@plt+0x16c4>
   17030:	mov	r3, r0
   17034:	cmp	r3, #0
   17038:	movne	r3, #1
   1703c:	moveq	r3, #0
   17040:	strb	r3, [fp, #-7]
   17044:	ldrb	r3, [fp, #-6]
   17048:	cmp	r3, #0
   1704c:	bne	1707c <__assert_fail@plt+0x61e4>
   17050:	ldrb	r3, [fp, #-7]
   17054:	cmp	r3, #0
   17058:	beq	170a8 <__assert_fail@plt+0x6210>
   1705c:	ldrb	r3, [fp, #-5]
   17060:	cmp	r3, #0
   17064:	bne	1707c <__assert_fail@plt+0x61e4>
   17068:	bl	10dfc <__errno_location@plt>
   1706c:	mov	r3, r0
   17070:	ldr	r3, [r3]
   17074:	cmp	r3, #9
   17078:	beq	170a8 <__assert_fail@plt+0x6210>
   1707c:	ldrb	r3, [fp, #-7]
   17080:	eor	r3, r3, #1
   17084:	uxtb	r3, r3
   17088:	cmp	r3, #0
   1708c:	beq	170a0 <__assert_fail@plt+0x6208>
   17090:	bl	10dfc <__errno_location@plt>
   17094:	mov	r2, r0
   17098:	mov	r3, #0
   1709c:	str	r3, [r2]
   170a0:	mvn	r3, #0
   170a4:	b	170ac <__assert_fail@plt+0x6214>
   170a8:	mov	r3, #0
   170ac:	mov	r0, r3
   170b0:	sub	sp, fp, #4
   170b4:	ldr	fp, [sp]
   170b8:	add	sp, sp, #4
   170bc:	pop	{pc}		; (ldr pc, [sp], #4)
   170c0:	str	fp, [sp, #-8]!
   170c4:	str	lr, [sp, #4]
   170c8:	add	fp, sp, #4
   170cc:	bl	10dfc <__errno_location@plt>
   170d0:	mov	r2, r0
   170d4:	mov	r3, #12
   170d8:	str	r3, [r2]
   170dc:	mov	r3, #0
   170e0:	mov	r0, r3
   170e4:	sub	sp, fp, #4
   170e8:	ldr	fp, [sp]
   170ec:	add	sp, sp, #4
   170f0:	pop	{pc}		; (ldr pc, [sp], #4)
   170f4:	str	fp, [sp, #-8]!
   170f8:	str	lr, [sp, #4]
   170fc:	add	fp, sp, #4
   17100:	sub	sp, sp, #8
   17104:	str	r0, [fp, #-8]
   17108:	ldr	r3, [fp, #-8]
   1710c:	mov	r0, r3
   17110:	bl	16de8 <__assert_fail@plt+0x5f50>
   17114:	mov	r3, r0
   17118:	mov	r0, r3
   1711c:	sub	sp, fp, #4
   17120:	ldr	fp, [sp]
   17124:	add	sp, sp, #4
   17128:	pop	{pc}		; (ldr pc, [sp], #4)
   1712c:	str	fp, [sp, #-8]!
   17130:	str	lr, [sp, #4]
   17134:	add	fp, sp, #4
   17138:	sub	sp, sp, #8
   1713c:	str	r0, [fp, #-8]
   17140:	str	r1, [fp, #-12]
   17144:	ldr	r3, [fp, #-12]
   17148:	cmp	r3, #0
   1714c:	moveq	r3, #1
   17150:	movne	r3, #0
   17154:	uxtb	r3, r3
   17158:	mov	r2, r3
   1715c:	ldr	r3, [fp, #-12]
   17160:	orr	r3, r2, r3
   17164:	mov	r1, r3
   17168:	ldr	r0, [fp, #-8]
   1716c:	bl	16e78 <__assert_fail@plt+0x5fe0>
   17170:	mov	r3, r0
   17174:	mov	r0, r3
   17178:	sub	sp, fp, #4
   1717c:	ldr	fp, [sp]
   17180:	add	sp, sp, #4
   17184:	pop	{pc}		; (ldr pc, [sp], #4)
   17188:	str	fp, [sp, #-8]!
   1718c:	str	lr, [sp, #4]
   17190:	add	fp, sp, #4
   17194:	sub	sp, sp, #8
   17198:	str	r0, [fp, #-8]
   1719c:	str	r1, [fp, #-12]
   171a0:	ldr	r3, [fp, #-8]
   171a4:	ldr	r2, [fp, #-12]
   171a8:	mov	r1, r2
   171ac:	mov	r0, r3
   171b0:	bl	16d18 <__assert_fail@plt+0x5e80>
   171b4:	mov	r3, r0
   171b8:	mov	r0, r3
   171bc:	sub	sp, fp, #4
   171c0:	ldr	fp, [sp]
   171c4:	add	sp, sp, #4
   171c8:	pop	{pc}		; (ldr pc, [sp], #4)
   171cc:	str	fp, [sp, #-8]!
   171d0:	str	lr, [sp, #4]
   171d4:	add	fp, sp, #4
   171d8:	sub	sp, sp, #16
   171dc:	str	r0, [fp, #-8]
   171e0:	str	r1, [fp, #-12]
   171e4:	str	r2, [fp, #-16]
   171e8:	ldr	r3, [fp, #-12]
   171ec:	cmp	r3, #0
   171f0:	beq	17200 <__assert_fail@plt+0x6368>
   171f4:	ldr	r3, [fp, #-16]
   171f8:	cmp	r3, #0
   171fc:	bne	17210 <__assert_fail@plt+0x6378>
   17200:	mov	r3, #1
   17204:	str	r3, [fp, #-16]
   17208:	ldr	r3, [fp, #-16]
   1720c:	str	r3, [fp, #-12]
   17210:	ldr	r3, [fp, #-12]
   17214:	ldr	r2, [fp, #-16]
   17218:	mov	r1, r3
   1721c:	ldr	r0, [fp, #-8]
   17220:	bl	1735c <__assert_fail@plt+0x64c4>
   17224:	mov	r3, r0
   17228:	mov	r0, r3
   1722c:	sub	sp, fp, #4
   17230:	ldr	fp, [sp]
   17234:	add	sp, sp, #4
   17238:	pop	{pc}		; (ldr pc, [sp], #4)
   1723c:	str	fp, [sp, #-8]!
   17240:	str	lr, [sp, #4]
   17244:	add	fp, sp, #4
   17248:	sub	sp, sp, #8
   1724c:	mov	r0, #14
   17250:	bl	10e5c <nl_langinfo@plt>
   17254:	str	r0, [fp, #-8]
   17258:	ldr	r3, [fp, #-8]
   1725c:	cmp	r3, #0
   17260:	bne	17270 <__assert_fail@plt+0x63d8>
   17264:	movw	r3, #34088	; 0x8528
   17268:	movt	r3, #1
   1726c:	str	r3, [fp, #-8]
   17270:	ldr	r3, [fp, #-8]
   17274:	ldrb	r3, [r3]
   17278:	cmp	r3, #0
   1727c:	bne	1728c <__assert_fail@plt+0x63f4>
   17280:	movw	r3, #34092	; 0x852c
   17284:	movt	r3, #1
   17288:	str	r3, [fp, #-8]
   1728c:	ldr	r3, [fp, #-8]
   17290:	mov	r0, r3
   17294:	sub	sp, fp, #4
   17298:	ldr	fp, [sp]
   1729c:	add	sp, sp, #4
   172a0:	pop	{pc}		; (ldr pc, [sp], #4)
   172a4:	str	fp, [sp, #-8]!
   172a8:	str	lr, [sp, #4]
   172ac:	add	fp, sp, #4
   172b0:	sub	sp, sp, #32
   172b4:	str	r0, [fp, #-24]	; 0xffffffe8
   172b8:	str	r1, [fp, #-28]	; 0xffffffe4
   172bc:	str	r2, [fp, #-32]	; 0xffffffe0
   172c0:	str	r3, [fp, #-36]	; 0xffffffdc
   172c4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   172c8:	cmp	r3, #0
   172cc:	bne	172d8 <__assert_fail@plt+0x6440>
   172d0:	sub	r3, fp, #16
   172d4:	str	r3, [fp, #-24]	; 0xffffffe8
   172d8:	ldr	r3, [fp, #-36]	; 0xffffffdc
   172dc:	ldr	r2, [fp, #-32]	; 0xffffffe0
   172e0:	ldr	r1, [fp, #-28]	; 0xffffffe4
   172e4:	ldr	r0, [fp, #-24]	; 0xffffffe8
   172e8:	bl	10d48 <mbrtowc@plt>
   172ec:	str	r0, [fp, #-8]
   172f0:	ldr	r3, [fp, #-8]
   172f4:	cmn	r3, #3
   172f8:	bls	17344 <__assert_fail@plt+0x64ac>
   172fc:	ldr	r3, [fp, #-32]	; 0xffffffe0
   17300:	cmp	r3, #0
   17304:	beq	17344 <__assert_fail@plt+0x64ac>
   17308:	mov	r0, #0
   1730c:	bl	17928 <__assert_fail@plt+0x6a90>
   17310:	mov	r3, r0
   17314:	eor	r3, r3, #1
   17318:	uxtb	r3, r3
   1731c:	cmp	r3, #0
   17320:	beq	17344 <__assert_fail@plt+0x64ac>
   17324:	ldr	r3, [fp, #-28]	; 0xffffffe4
   17328:	ldrb	r3, [r3]
   1732c:	strb	r3, [fp, #-9]
   17330:	ldrb	r2, [fp, #-9]
   17334:	ldr	r3, [fp, #-24]	; 0xffffffe8
   17338:	str	r2, [r3]
   1733c:	mov	r3, #1
   17340:	b	17348 <__assert_fail@plt+0x64b0>
   17344:	ldr	r3, [fp, #-8]
   17348:	mov	r0, r3
   1734c:	sub	sp, fp, #4
   17350:	ldr	fp, [sp]
   17354:	add	sp, sp, #4
   17358:	pop	{pc}		; (ldr pc, [sp], #4)
   1735c:	str	fp, [sp, #-8]!
   17360:	str	lr, [sp, #4]
   17364:	add	fp, sp, #4
   17368:	sub	sp, sp, #24
   1736c:	str	r0, [fp, #-16]
   17370:	str	r1, [fp, #-20]	; 0xffffffec
   17374:	str	r2, [fp, #-24]	; 0xffffffe8
   17378:	mov	ip, #0
   1737c:	ldr	r2, [fp, #-20]	; 0xffffffec
   17380:	ldr	r3, [fp, #-24]	; 0xffffffe8
   17384:	umull	r0, r1, r2, r3
   17388:	mov	r2, #0
   1738c:	mov	r3, #0
   17390:	mov	r2, r1
   17394:	mov	r3, #0
   17398:	cmp	r2, #0
   1739c:	beq	173a4 <__assert_fail@plt+0x650c>
   173a0:	mov	ip, #1
   173a4:	mov	r3, r0
   173a8:	str	r3, [fp, #-8]
   173ac:	mov	r3, ip
   173b0:	and	r3, r3, #1
   173b4:	uxtb	r3, r3
   173b8:	cmp	r3, #0
   173bc:	beq	173d8 <__assert_fail@plt+0x6540>
   173c0:	bl	10dfc <__errno_location@plt>
   173c4:	mov	r2, r0
   173c8:	mov	r3, #12
   173cc:	str	r3, [r2]
   173d0:	mov	r3, #0
   173d4:	b	173ec <__assert_fail@plt+0x6554>
   173d8:	ldr	r3, [fp, #-8]
   173dc:	mov	r1, r3
   173e0:	ldr	r0, [fp, #-16]
   173e4:	bl	16e78 <__assert_fail@plt+0x5fe0>
   173e8:	mov	r3, r0
   173ec:	mov	r0, r3
   173f0:	sub	sp, fp, #4
   173f4:	ldr	fp, [sp]
   173f8:	add	sp, sp, #4
   173fc:	pop	{pc}		; (ldr pc, [sp], #4)
   17400:	push	{fp}		; (str fp, [sp, #-4]!)
   17404:	add	fp, sp, #0
   17408:	sub	sp, sp, #12
   1740c:	str	r0, [fp, #-8]
   17410:	ldr	r3, [fp, #-8]
   17414:	cmp	r3, #90	; 0x5a
   17418:	bgt	1743c <__assert_fail@plt+0x65a4>
   1741c:	ldr	r3, [fp, #-8]
   17420:	cmp	r3, #65	; 0x41
   17424:	bge	1744c <__assert_fail@plt+0x65b4>
   17428:	ldr	r3, [fp, #-8]
   1742c:	sub	r3, r3, #48	; 0x30
   17430:	cmp	r3, #9
   17434:	bhi	17454 <__assert_fail@plt+0x65bc>
   17438:	b	1744c <__assert_fail@plt+0x65b4>
   1743c:	ldr	r3, [fp, #-8]
   17440:	sub	r3, r3, #97	; 0x61
   17444:	cmp	r3, #25
   17448:	bhi	17454 <__assert_fail@plt+0x65bc>
   1744c:	mov	r3, #1
   17450:	b	17458 <__assert_fail@plt+0x65c0>
   17454:	mov	r3, #0
   17458:	mov	r0, r3
   1745c:	add	sp, fp, #0
   17460:	pop	{fp}		; (ldr fp, [sp], #4)
   17464:	bx	lr
   17468:	push	{fp}		; (str fp, [sp, #-4]!)
   1746c:	add	fp, sp, #0
   17470:	sub	sp, sp, #12
   17474:	str	r0, [fp, #-8]
   17478:	ldr	r3, [fp, #-8]
   1747c:	cmp	r3, #65	; 0x41
   17480:	blt	174a8 <__assert_fail@plt+0x6610>
   17484:	ldr	r3, [fp, #-8]
   17488:	cmp	r3, #90	; 0x5a
   1748c:	ble	174a0 <__assert_fail@plt+0x6608>
   17490:	ldr	r3, [fp, #-8]
   17494:	sub	r3, r3, #97	; 0x61
   17498:	cmp	r3, #25
   1749c:	bhi	174a8 <__assert_fail@plt+0x6610>
   174a0:	mov	r3, #1
   174a4:	b	174ac <__assert_fail@plt+0x6614>
   174a8:	mov	r3, #0
   174ac:	mov	r0, r3
   174b0:	add	sp, fp, #0
   174b4:	pop	{fp}		; (ldr fp, [sp], #4)
   174b8:	bx	lr
   174bc:	push	{fp}		; (str fp, [sp, #-4]!)
   174c0:	add	fp, sp, #0
   174c4:	sub	sp, sp, #12
   174c8:	str	r0, [fp, #-8]
   174cc:	ldr	r3, [fp, #-8]
   174d0:	cmp	r3, #127	; 0x7f
   174d4:	bhi	174e0 <__assert_fail@plt+0x6648>
   174d8:	mov	r3, #1
   174dc:	b	174e4 <__assert_fail@plt+0x664c>
   174e0:	mov	r3, #0
   174e4:	mov	r0, r3
   174e8:	add	sp, fp, #0
   174ec:	pop	{fp}		; (ldr fp, [sp], #4)
   174f0:	bx	lr
   174f4:	push	{fp}		; (str fp, [sp, #-4]!)
   174f8:	add	fp, sp, #0
   174fc:	sub	sp, sp, #12
   17500:	str	r0, [fp, #-8]
   17504:	ldr	r3, [fp, #-8]
   17508:	cmp	r3, #32
   1750c:	beq	1751c <__assert_fail@plt+0x6684>
   17510:	ldr	r3, [fp, #-8]
   17514:	cmp	r3, #9
   17518:	bne	17524 <__assert_fail@plt+0x668c>
   1751c:	mov	r3, #1
   17520:	b	17528 <__assert_fail@plt+0x6690>
   17524:	mov	r3, #0
   17528:	and	r3, r3, #1
   1752c:	uxtb	r3, r3
   17530:	mov	r0, r3
   17534:	add	sp, fp, #0
   17538:	pop	{fp}		; (ldr fp, [sp], #4)
   1753c:	bx	lr
   17540:	push	{fp}		; (str fp, [sp, #-4]!)
   17544:	add	fp, sp, #0
   17548:	sub	sp, sp, #12
   1754c:	str	r0, [fp, #-8]
   17550:	ldr	r3, [fp, #-8]
   17554:	cmp	r3, #0
   17558:	blt	1757c <__assert_fail@plt+0x66e4>
   1755c:	ldr	r3, [fp, #-8]
   17560:	cmp	r3, #31
   17564:	ble	17574 <__assert_fail@plt+0x66dc>
   17568:	ldr	r3, [fp, #-8]
   1756c:	cmp	r3, #127	; 0x7f
   17570:	bne	1757c <__assert_fail@plt+0x66e4>
   17574:	mov	r3, #1
   17578:	b	17580 <__assert_fail@plt+0x66e8>
   1757c:	mov	r3, #0
   17580:	mov	r0, r3
   17584:	add	sp, fp, #0
   17588:	pop	{fp}		; (ldr fp, [sp], #4)
   1758c:	bx	lr
   17590:	push	{fp}		; (str fp, [sp, #-4]!)
   17594:	add	fp, sp, #0
   17598:	sub	sp, sp, #12
   1759c:	str	r0, [fp, #-8]
   175a0:	ldr	r3, [fp, #-8]
   175a4:	sub	r3, r3, #48	; 0x30
   175a8:	cmp	r3, #9
   175ac:	bhi	175b8 <__assert_fail@plt+0x6720>
   175b0:	mov	r3, #1
   175b4:	b	175bc <__assert_fail@plt+0x6724>
   175b8:	mov	r3, #0
   175bc:	mov	r0, r3
   175c0:	add	sp, fp, #0
   175c4:	pop	{fp}		; (ldr fp, [sp], #4)
   175c8:	bx	lr
   175cc:	push	{fp}		; (str fp, [sp, #-4]!)
   175d0:	add	fp, sp, #0
   175d4:	sub	sp, sp, #12
   175d8:	str	r0, [fp, #-8]
   175dc:	ldr	r3, [fp, #-8]
   175e0:	sub	r3, r3, #33	; 0x21
   175e4:	cmp	r3, #93	; 0x5d
   175e8:	bhi	175f4 <__assert_fail@plt+0x675c>
   175ec:	mov	r3, #1
   175f0:	b	175f8 <__assert_fail@plt+0x6760>
   175f4:	mov	r3, #0
   175f8:	mov	r0, r3
   175fc:	add	sp, fp, #0
   17600:	pop	{fp}		; (ldr fp, [sp], #4)
   17604:	bx	lr
   17608:	push	{fp}		; (str fp, [sp, #-4]!)
   1760c:	add	fp, sp, #0
   17610:	sub	sp, sp, #12
   17614:	str	r0, [fp, #-8]
   17618:	ldr	r3, [fp, #-8]
   1761c:	sub	r3, r3, #97	; 0x61
   17620:	cmp	r3, #25
   17624:	bhi	17630 <__assert_fail@plt+0x6798>
   17628:	mov	r3, #1
   1762c:	b	17634 <__assert_fail@plt+0x679c>
   17630:	mov	r3, #0
   17634:	mov	r0, r3
   17638:	add	sp, fp, #0
   1763c:	pop	{fp}		; (ldr fp, [sp], #4)
   17640:	bx	lr
   17644:	push	{fp}		; (str fp, [sp, #-4]!)
   17648:	add	fp, sp, #0
   1764c:	sub	sp, sp, #12
   17650:	str	r0, [fp, #-8]
   17654:	ldr	r3, [fp, #-8]
   17658:	sub	r3, r3, #32
   1765c:	cmp	r3, #94	; 0x5e
   17660:	bhi	1766c <__assert_fail@plt+0x67d4>
   17664:	mov	r3, #1
   17668:	b	17670 <__assert_fail@plt+0x67d8>
   1766c:	mov	r3, #0
   17670:	mov	r0, r3
   17674:	add	sp, fp, #0
   17678:	pop	{fp}		; (ldr fp, [sp], #4)
   1767c:	bx	lr
   17680:	push	{fp}		; (str fp, [sp, #-4]!)
   17684:	add	fp, sp, #0
   17688:	sub	sp, sp, #12
   1768c:	str	r0, [fp, #-8]
   17690:	ldr	r3, [fp, #-8]
   17694:	cmp	r3, #64	; 0x40
   17698:	bgt	176bc <__assert_fail@plt+0x6824>
   1769c:	ldr	r3, [fp, #-8]
   176a0:	cmp	r3, #58	; 0x3a
   176a4:	bge	176e4 <__assert_fail@plt+0x684c>
   176a8:	ldr	r3, [fp, #-8]
   176ac:	sub	r3, r3, #33	; 0x21
   176b0:	cmp	r3, #14
   176b4:	bhi	176ec <__assert_fail@plt+0x6854>
   176b8:	b	176e4 <__assert_fail@plt+0x684c>
   176bc:	ldr	r3, [fp, #-8]
   176c0:	cmp	r3, #91	; 0x5b
   176c4:	blt	176ec <__assert_fail@plt+0x6854>
   176c8:	ldr	r3, [fp, #-8]
   176cc:	cmp	r3, #96	; 0x60
   176d0:	ble	176e4 <__assert_fail@plt+0x684c>
   176d4:	ldr	r3, [fp, #-8]
   176d8:	sub	r3, r3, #123	; 0x7b
   176dc:	cmp	r3, #3
   176e0:	bhi	176ec <__assert_fail@plt+0x6854>
   176e4:	mov	r3, #1
   176e8:	b	176f0 <__assert_fail@plt+0x6858>
   176ec:	mov	r3, #0
   176f0:	mov	r0, r3
   176f4:	add	sp, fp, #0
   176f8:	pop	{fp}		; (ldr fp, [sp], #4)
   176fc:	bx	lr
   17700:	push	{fp}		; (str fp, [sp, #-4]!)
   17704:	add	fp, sp, #0
   17708:	sub	sp, sp, #12
   1770c:	str	r0, [fp, #-8]
   17710:	ldr	r3, [fp, #-8]
   17714:	cmp	r3, #9
   17718:	blt	1773c <__assert_fail@plt+0x68a4>
   1771c:	ldr	r3, [fp, #-8]
   17720:	cmp	r3, #13
   17724:	ble	17734 <__assert_fail@plt+0x689c>
   17728:	ldr	r3, [fp, #-8]
   1772c:	cmp	r3, #32
   17730:	bne	1773c <__assert_fail@plt+0x68a4>
   17734:	mov	r3, #1
   17738:	b	17740 <__assert_fail@plt+0x68a8>
   1773c:	mov	r3, #0
   17740:	mov	r0, r3
   17744:	add	sp, fp, #0
   17748:	pop	{fp}		; (ldr fp, [sp], #4)
   1774c:	bx	lr
   17750:	push	{fp}		; (str fp, [sp, #-4]!)
   17754:	add	fp, sp, #0
   17758:	sub	sp, sp, #12
   1775c:	str	r0, [fp, #-8]
   17760:	ldr	r3, [fp, #-8]
   17764:	sub	r3, r3, #65	; 0x41
   17768:	cmp	r3, #25
   1776c:	bhi	17778 <__assert_fail@plt+0x68e0>
   17770:	mov	r3, #1
   17774:	b	1777c <__assert_fail@plt+0x68e4>
   17778:	mov	r3, #0
   1777c:	mov	r0, r3
   17780:	add	sp, fp, #0
   17784:	pop	{fp}		; (ldr fp, [sp], #4)
   17788:	bx	lr
   1778c:	push	{fp}		; (str fp, [sp, #-4]!)
   17790:	add	fp, sp, #0
   17794:	sub	sp, sp, #12
   17798:	str	r0, [fp, #-8]
   1779c:	ldr	r3, [fp, #-8]
   177a0:	sub	r3, r3, #48	; 0x30
   177a4:	cmp	r3, #54	; 0x36
   177a8:	ldrls	pc, [pc, r3, lsl #2]
   177ac:	b	17894 <__assert_fail@plt+0x69fc>
   177b0:	andeq	r7, r1, ip, lsl #17
   177b4:	andeq	r7, r1, ip, lsl #17
   177b8:	andeq	r7, r1, ip, lsl #17
   177bc:	andeq	r7, r1, ip, lsl #17
   177c0:	andeq	r7, r1, ip, lsl #17
   177c4:	andeq	r7, r1, ip, lsl #17
   177c8:	andeq	r7, r1, ip, lsl #17
   177cc:	andeq	r7, r1, ip, lsl #17
   177d0:	andeq	r7, r1, ip, lsl #17
   177d4:	andeq	r7, r1, ip, lsl #17
   177d8:	muleq	r1, r4, r8
   177dc:	muleq	r1, r4, r8
   177e0:	muleq	r1, r4, r8
   177e4:	muleq	r1, r4, r8
   177e8:	muleq	r1, r4, r8
   177ec:	muleq	r1, r4, r8
   177f0:	muleq	r1, r4, r8
   177f4:	andeq	r7, r1, ip, lsl #17
   177f8:	andeq	r7, r1, ip, lsl #17
   177fc:	andeq	r7, r1, ip, lsl #17
   17800:	andeq	r7, r1, ip, lsl #17
   17804:	andeq	r7, r1, ip, lsl #17
   17808:	andeq	r7, r1, ip, lsl #17
   1780c:	muleq	r1, r4, r8
   17810:	muleq	r1, r4, r8
   17814:	muleq	r1, r4, r8
   17818:	muleq	r1, r4, r8
   1781c:	muleq	r1, r4, r8
   17820:	muleq	r1, r4, r8
   17824:	muleq	r1, r4, r8
   17828:	muleq	r1, r4, r8
   1782c:	muleq	r1, r4, r8
   17830:	muleq	r1, r4, r8
   17834:	muleq	r1, r4, r8
   17838:	muleq	r1, r4, r8
   1783c:	muleq	r1, r4, r8
   17840:	muleq	r1, r4, r8
   17844:	muleq	r1, r4, r8
   17848:	muleq	r1, r4, r8
   1784c:	muleq	r1, r4, r8
   17850:	muleq	r1, r4, r8
   17854:	muleq	r1, r4, r8
   17858:	muleq	r1, r4, r8
   1785c:	muleq	r1, r4, r8
   17860:	muleq	r1, r4, r8
   17864:	muleq	r1, r4, r8
   17868:	muleq	r1, r4, r8
   1786c:	muleq	r1, r4, r8
   17870:	muleq	r1, r4, r8
   17874:	andeq	r7, r1, ip, lsl #17
   17878:	andeq	r7, r1, ip, lsl #17
   1787c:	andeq	r7, r1, ip, lsl #17
   17880:	andeq	r7, r1, ip, lsl #17
   17884:	andeq	r7, r1, ip, lsl #17
   17888:	andeq	r7, r1, ip, lsl #17
   1788c:	mov	r3, #1
   17890:	b	17898 <__assert_fail@plt+0x6a00>
   17894:	mov	r3, #0
   17898:	mov	r0, r3
   1789c:	add	sp, fp, #0
   178a0:	pop	{fp}		; (ldr fp, [sp], #4)
   178a4:	bx	lr
   178a8:	push	{fp}		; (str fp, [sp, #-4]!)
   178ac:	add	fp, sp, #0
   178b0:	sub	sp, sp, #12
   178b4:	str	r0, [fp, #-8]
   178b8:	ldr	r3, [fp, #-8]
   178bc:	sub	r3, r3, #65	; 0x41
   178c0:	cmp	r3, #25
   178c4:	bhi	178d4 <__assert_fail@plt+0x6a3c>
   178c8:	ldr	r3, [fp, #-8]
   178cc:	add	r3, r3, #32
   178d0:	b	178d8 <__assert_fail@plt+0x6a40>
   178d4:	ldr	r3, [fp, #-8]
   178d8:	mov	r0, r3
   178dc:	add	sp, fp, #0
   178e0:	pop	{fp}		; (ldr fp, [sp], #4)
   178e4:	bx	lr
   178e8:	push	{fp}		; (str fp, [sp, #-4]!)
   178ec:	add	fp, sp, #0
   178f0:	sub	sp, sp, #12
   178f4:	str	r0, [fp, #-8]
   178f8:	ldr	r3, [fp, #-8]
   178fc:	sub	r3, r3, #97	; 0x61
   17900:	cmp	r3, #25
   17904:	bhi	17914 <__assert_fail@plt+0x6a7c>
   17908:	ldr	r3, [fp, #-8]
   1790c:	sub	r3, r3, #32
   17910:	b	17918 <__assert_fail@plt+0x6a80>
   17914:	ldr	r3, [fp, #-8]
   17918:	mov	r0, r3
   1791c:	add	sp, fp, #0
   17920:	pop	{fp}		; (ldr fp, [sp], #4)
   17924:	bx	lr
   17928:	str	fp, [sp, #-8]!
   1792c:	str	lr, [sp, #4]
   17930:	add	fp, sp, #4
   17934:	sub	sp, sp, #272	; 0x110
   17938:	str	r0, [fp, #-272]	; 0xfffffef0
   1793c:	sub	r3, fp, #264	; 0x108
   17940:	movw	r2, #257	; 0x101
   17944:	mov	r1, r3
   17948:	ldr	r0, [fp, #-272]	; 0xfffffef0
   1794c:	bl	17aec <__assert_fail@plt+0x6c54>
   17950:	mov	r3, r0
   17954:	cmp	r3, #0
   17958:	beq	17964 <__assert_fail@plt+0x6acc>
   1795c:	mov	r3, #0
   17960:	b	179b8 <__assert_fail@plt+0x6b20>
   17964:	sub	r3, fp, #264	; 0x108
   17968:	movw	r1, #34100	; 0x8534
   1796c:	movt	r1, #1
   17970:	mov	r0, r3
   17974:	bl	10c58 <strcmp@plt>
   17978:	mov	r3, r0
   1797c:	cmp	r3, #0
   17980:	beq	179ac <__assert_fail@plt+0x6b14>
   17984:	sub	r3, fp, #264	; 0x108
   17988:	movw	r1, #34104	; 0x8538
   1798c:	movt	r1, #1
   17990:	mov	r0, r3
   17994:	bl	10c58 <strcmp@plt>
   17998:	mov	r3, r0
   1799c:	cmp	r3, #0
   179a0:	beq	179ac <__assert_fail@plt+0x6b14>
   179a4:	mov	r3, #1
   179a8:	b	179b0 <__assert_fail@plt+0x6b18>
   179ac:	mov	r3, #0
   179b0:	and	r3, r3, #1
   179b4:	uxtb	r3, r3
   179b8:	mov	r0, r3
   179bc:	sub	sp, fp, #4
   179c0:	ldr	fp, [sp]
   179c4:	add	sp, sp, #4
   179c8:	pop	{pc}		; (ldr pc, [sp], #4)
   179cc:	str	fp, [sp, #-8]!
   179d0:	str	lr, [sp, #4]
   179d4:	add	fp, sp, #4
   179d8:	sub	sp, sp, #16
   179dc:	str	r0, [fp, #-16]
   179e0:	mov	r1, #0
   179e4:	ldr	r0, [fp, #-16]
   179e8:	bl	10e44 <setlocale@plt>
   179ec:	str	r0, [fp, #-8]
   179f0:	ldr	r3, [fp, #-8]
   179f4:	mov	r0, r3
   179f8:	sub	sp, fp, #4
   179fc:	ldr	fp, [sp]
   17a00:	add	sp, sp, #4
   17a04:	pop	{pc}		; (ldr pc, [sp], #4)
   17a08:	str	fp, [sp, #-8]!
   17a0c:	str	lr, [sp, #4]
   17a10:	add	fp, sp, #4
   17a14:	sub	sp, sp, #24
   17a18:	str	r0, [fp, #-16]
   17a1c:	str	r1, [fp, #-20]	; 0xffffffec
   17a20:	str	r2, [fp, #-24]	; 0xffffffe8
   17a24:	ldr	r0, [fp, #-16]
   17a28:	bl	179cc <__assert_fail@plt+0x6b34>
   17a2c:	str	r0, [fp, #-8]
   17a30:	ldr	r3, [fp, #-8]
   17a34:	cmp	r3, #0
   17a38:	bne	17a5c <__assert_fail@plt+0x6bc4>
   17a3c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   17a40:	cmp	r3, #0
   17a44:	beq	17a54 <__assert_fail@plt+0x6bbc>
   17a48:	ldr	r3, [fp, #-20]	; 0xffffffec
   17a4c:	mov	r2, #0
   17a50:	strb	r2, [r3]
   17a54:	mov	r3, #22
   17a58:	b	17ad8 <__assert_fail@plt+0x6c40>
   17a5c:	ldr	r0, [fp, #-8]
   17a60:	bl	10de4 <strlen@plt>
   17a64:	str	r0, [fp, #-12]
   17a68:	ldr	r2, [fp, #-12]
   17a6c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   17a70:	cmp	r2, r3
   17a74:	bcs	17a98 <__assert_fail@plt+0x6c00>
   17a78:	ldr	r3, [fp, #-12]
   17a7c:	add	r3, r3, #1
   17a80:	mov	r2, r3
   17a84:	ldr	r1, [fp, #-8]
   17a88:	ldr	r0, [fp, #-20]	; 0xffffffec
   17a8c:	bl	10ca0 <memcpy@plt>
   17a90:	mov	r3, #0
   17a94:	b	17ad8 <__assert_fail@plt+0x6c40>
   17a98:	ldr	r3, [fp, #-24]	; 0xffffffe8
   17a9c:	cmp	r3, #0
   17aa0:	beq	17ad4 <__assert_fail@plt+0x6c3c>
   17aa4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   17aa8:	sub	r3, r3, #1
   17aac:	mov	r2, r3
   17ab0:	ldr	r1, [fp, #-8]
   17ab4:	ldr	r0, [fp, #-20]	; 0xffffffec
   17ab8:	bl	10ca0 <memcpy@plt>
   17abc:	ldr	r3, [fp, #-24]	; 0xffffffe8
   17ac0:	sub	r3, r3, #1
   17ac4:	ldr	r2, [fp, #-20]	; 0xffffffec
   17ac8:	add	r3, r2, r3
   17acc:	mov	r2, #0
   17ad0:	strb	r2, [r3]
   17ad4:	mov	r3, #34	; 0x22
   17ad8:	mov	r0, r3
   17adc:	sub	sp, fp, #4
   17ae0:	ldr	fp, [sp]
   17ae4:	add	sp, sp, #4
   17ae8:	pop	{pc}		; (ldr pc, [sp], #4)
   17aec:	str	fp, [sp, #-8]!
   17af0:	str	lr, [sp, #4]
   17af4:	add	fp, sp, #4
   17af8:	sub	sp, sp, #16
   17afc:	str	r0, [fp, #-8]
   17b00:	str	r1, [fp, #-12]
   17b04:	str	r2, [fp, #-16]
   17b08:	ldr	r2, [fp, #-16]
   17b0c:	ldr	r1, [fp, #-12]
   17b10:	ldr	r0, [fp, #-8]
   17b14:	bl	17a08 <__assert_fail@plt+0x6b70>
   17b18:	mov	r3, r0
   17b1c:	mov	r0, r3
   17b20:	sub	sp, fp, #4
   17b24:	ldr	fp, [sp]
   17b28:	add	sp, sp, #4
   17b2c:	pop	{pc}		; (ldr pc, [sp], #4)
   17b30:	str	fp, [sp, #-8]!
   17b34:	str	lr, [sp, #4]
   17b38:	add	fp, sp, #4
   17b3c:	sub	sp, sp, #8
   17b40:	str	r0, [fp, #-8]
   17b44:	ldr	r0, [fp, #-8]
   17b48:	bl	179cc <__assert_fail@plt+0x6b34>
   17b4c:	mov	r3, r0
   17b50:	mov	r0, r3
   17b54:	sub	sp, fp, #4
   17b58:	ldr	fp, [sp]
   17b5c:	add	sp, sp, #4
   17b60:	pop	{pc}		; (ldr pc, [sp], #4)
   17b64:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   17b68:	mov	r7, r0
   17b6c:	ldr	r6, [pc, #72]	; 17bbc <__assert_fail@plt+0x6d24>
   17b70:	ldr	r5, [pc, #72]	; 17bc0 <__assert_fail@plt+0x6d28>
   17b74:	add	r6, pc, r6
   17b78:	add	r5, pc, r5
   17b7c:	sub	r6, r6, r5
   17b80:	mov	r8, r1
   17b84:	mov	r9, r2
   17b88:	bl	10c20 <calloc@plt-0x20>
   17b8c:	asrs	r6, r6, #2
   17b90:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   17b94:	mov	r4, #0
   17b98:	add	r4, r4, #1
   17b9c:	ldr	r3, [r5], #4
   17ba0:	mov	r2, r9
   17ba4:	mov	r1, r8
   17ba8:	mov	r0, r7
   17bac:	blx	r3
   17bb0:	cmp	r6, r4
   17bb4:	bne	17b98 <__assert_fail@plt+0x6d00>
   17bb8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   17bbc:	muleq	r1, r8, r3
   17bc0:	muleq	r1, r0, r3
   17bc4:	bx	lr
   17bc8:	ldr	r3, [pc, #12]	; 17bdc <__assert_fail@plt+0x6d44>
   17bcc:	mov	r1, #0
   17bd0:	add	r3, pc, r3
   17bd4:	ldr	r2, [r3]
   17bd8:	b	10e08 <__cxa_atexit@plt>
   17bdc:	andeq	r1, r1, r8, lsl #10

Disassembly of section .fini:

00017be0 <.fini>:
   17be0:	push	{r3, lr}
   17be4:	pop	{r3, pc}
