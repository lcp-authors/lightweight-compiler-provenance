
../repos/findutils/locate/locate:     file format elf32-littlearm


Disassembly of section .init:

000114d0 <.init>:
   114d0:	push	{r3, lr}
   114d4:	bl	119ec <__assert_fail@plt+0x4c>
   114d8:	pop	{r3, pc}

Disassembly of section .plt:

000114dc <pthread_mutex_unlock@plt-0x14>:
   114dc:	push	{lr}		; (str lr, [sp, #-4]!)
   114e0:	ldr	lr, [pc, #4]	; 114ec <pthread_mutex_unlock@plt-0x4>
   114e4:	add	lr, pc, lr
   114e8:	ldr	pc, [lr, #8]!
   114ec:	andeq	sp, r2, r4, lsl fp

000114f0 <pthread_mutex_unlock@plt>:
   114f0:	add	ip, pc, #0, 12
   114f4:	add	ip, ip, #184320	; 0x2d000
   114f8:	ldr	pc, [ip, #2836]!	; 0xb14

000114fc <fdopen@plt>:
   114fc:	add	ip, pc, #0, 12
   11500:	add	ip, ip, #184320	; 0x2d000
   11504:	ldr	pc, [ip, #2828]!	; 0xb0c

00011508 <calloc@plt>:
   11508:	add	ip, pc, #0, 12
   1150c:	add	ip, ip, #184320	; 0x2d000
   11510:	ldr	pc, [ip, #2820]!	; 0xb04

00011514 <wctype@plt>:
   11514:	add	ip, pc, #0, 12
   11518:	add	ip, ip, #184320	; 0x2d000
   1151c:	ldr	pc, [ip, #2812]!	; 0xafc

00011520 <raise@plt>:
   11520:	add	ip, pc, #0, 12
   11524:	add	ip, ip, #184320	; 0x2d000
   11528:	ldr	pc, [ip, #2804]!	; 0xaf4

0001152c <wcrtomb@plt>:
   1152c:	add	ip, pc, #0, 12
   11530:	add	ip, ip, #184320	; 0x2d000
   11534:	ldr	pc, [ip, #2796]!	; 0xaec

00011538 <iswctype@plt>:
   11538:	add	ip, pc, #0, 12
   1153c:	add	ip, ip, #184320	; 0x2d000
   11540:	ldr	pc, [ip, #2788]!	; 0xae4

00011544 <strcmp@plt>:
   11544:	add	ip, pc, #0, 12
   11548:	add	ip, ip, #184320	; 0x2d000
   1154c:	ldr	pc, [ip, #2780]!	; 0xadc

00011550 <printf@plt>:
   11550:	add	ip, pc, #0, 12
   11554:	add	ip, ip, #184320	; 0x2d000
   11558:	ldr	pc, [ip, #2772]!	; 0xad4

0001155c <pthread_mutex_destroy@plt>:
   1155c:	add	ip, pc, #0, 12
   11560:	add	ip, ip, #184320	; 0x2d000
   11564:	ldr	pc, [ip, #2764]!	; 0xacc

00011568 <fflush@plt>:
   11568:	add	ip, pc, #0, 12
   1156c:	add	ip, ip, #184320	; 0x2d000
   11570:	ldr	pc, [ip, #2756]!	; 0xac4

00011574 <wcwidth@plt>:
   11574:	add	ip, pc, #0, 12
   11578:	add	ip, ip, #184320	; 0x2d000
   1157c:	ldr	pc, [ip, #2748]!	; 0xabc

00011580 <getuid@plt>:
   11580:	add	ip, pc, #0, 12
   11584:	add	ip, ip, #184320	; 0x2d000
   11588:	ldr	pc, [ip, #2740]!	; 0xab4

0001158c <memmove@plt>:
   1158c:	add	ip, pc, #0, 12
   11590:	add	ip, ip, #184320	; 0x2d000
   11594:	ldr	pc, [ip, #2732]!	; 0xaac

00011598 <free@plt>:
   11598:	add	ip, pc, #0, 12
   1159c:	add	ip, ip, #184320	; 0x2d000
   115a0:	ldr	pc, [ip, #2724]!	; 0xaa4

000115a4 <pthread_mutex_lock@plt>:
   115a4:	add	ip, pc, #0, 12
   115a8:	add	ip, ip, #184320	; 0x2d000
   115ac:	ldr	pc, [ip, #2716]!	; 0xa9c

000115b0 <ferror@plt>:
   115b0:	add	ip, pc, #0, 12
   115b4:	add	ip, ip, #184320	; 0x2d000
   115b8:	ldr	pc, [ip, #2708]!	; 0xa94

000115bc <strndup@plt>:
   115bc:	add	ip, pc, #0, 12
   115c0:	add	ip, ip, #184320	; 0x2d000
   115c4:	ldr	pc, [ip, #2700]!	; 0xa8c

000115c8 <_exit@plt>:
   115c8:	add	ip, pc, #0, 12
   115cc:	add	ip, ip, #184320	; 0x2d000
   115d0:	ldr	pc, [ip, #2692]!	; 0xa84

000115d4 <memcpy@plt>:
   115d4:	add	ip, pc, #0, 12
   115d8:	add	ip, ip, #184320	; 0x2d000
   115dc:	ldr	pc, [ip, #2684]!	; 0xa7c

000115e0 <pthread_mutex_init@plt>:
   115e0:	add	ip, pc, #0, 12
   115e4:	add	ip, ip, #184320	; 0x2d000
   115e8:	ldr	pc, [ip, #2676]!	; 0xa74

000115ec <__strtoull_internal@plt>:
   115ec:	add	ip, pc, #0, 12
   115f0:	add	ip, ip, #184320	; 0x2d000
   115f4:	ldr	pc, [ip, #2668]!	; 0xa6c

000115f8 <towlower@plt>:
   115f8:	add	ip, pc, #0, 12
   115fc:	add	ip, ip, #184320	; 0x2d000
   11600:	ldr	pc, [ip, #2660]!	; 0xa64

00011604 <mbsinit@plt>:
   11604:	add	ip, pc, #0, 12
   11608:	add	ip, ip, #184320	; 0x2d000
   1160c:	ldr	pc, [ip, #2652]!	; 0xa5c

00011610 <time@plt>:
   11610:	add	ip, pc, #0, 12
   11614:	add	ip, ip, #184320	; 0x2d000
   11618:	ldr	pc, [ip, #2644]!	; 0xa54

0001161c <memcmp@plt>:
   1161c:	add	ip, pc, #0, 12
   11620:	add	ip, ip, #184320	; 0x2d000
   11624:	ldr	pc, [ip, #2636]!	; 0xa4c

00011628 <dcgettext@plt>:
   11628:	add	ip, pc, #0, 12
   1162c:	add	ip, ip, #184320	; 0x2d000
   11630:	ldr	pc, [ip, #2628]!	; 0xa44

00011634 <realloc@plt>:
   11634:	add	ip, pc, #0, 12
   11638:	add	ip, ip, #184320	; 0x2d000
   1163c:	ldr	pc, [ip, #2620]!	; 0xa3c

00011640 <textdomain@plt>:
   11640:	add	ip, pc, #0, 12
   11644:	add	ip, ip, #184320	; 0x2d000
   11648:	ldr	pc, [ip, #2612]!	; 0xa34

0001164c <iswcntrl@plt>:
   1164c:	add	ip, pc, #0, 12
   11650:	add	ip, ip, #184320	; 0x2d000
   11654:	ldr	pc, [ip, #2604]!	; 0xa2c

00011658 <geteuid@plt>:
   11658:	add	ip, pc, #0, 12
   1165c:	add	ip, ip, #184320	; 0x2d000
   11660:	ldr	pc, [ip, #2596]!	; 0xa24

00011664 <iswprint@plt>:
   11664:	add	ip, pc, #0, 12
   11668:	add	ip, ip, #184320	; 0x2d000
   1166c:	ldr	pc, [ip, #2588]!	; 0xa1c

00011670 <setgroups@plt>:
   11670:	add	ip, pc, #0, 12
   11674:	add	ip, ip, #184320	; 0x2d000
   11678:	ldr	pc, [ip, #2580]!	; 0xa14

0001167c <__fxstat64@plt>:
   1167c:	add	ip, pc, #0, 12
   11680:	add	ip, ip, #184320	; 0x2d000
   11684:	ldr	pc, [ip, #2572]!	; 0xa0c

00011688 <fwrite@plt>:
   11688:	add	ip, pc, #0, 12
   1168c:	add	ip, ip, #184320	; 0x2d000
   11690:	ldr	pc, [ip, #2564]!	; 0xa04

00011694 <lseek64@plt>:
   11694:	add	ip, pc, #0, 12
   11698:	add	ip, ip, #184320	; 0x2d000
   1169c:	ldr	pc, [ip, #2556]!	; 0x9fc

000116a0 <__ctype_get_mb_cur_max@plt>:
   116a0:	add	ip, pc, #0, 12
   116a4:	add	ip, ip, #184320	; 0x2d000
   116a8:	ldr	pc, [ip, #2548]!	; 0x9f4

000116ac <fread@plt>:
   116ac:	add	ip, pc, #0, 12
   116b0:	add	ip, ip, #184320	; 0x2d000
   116b4:	ldr	pc, [ip, #2540]!	; 0x9ec

000116b8 <__fpending@plt>:
   116b8:	add	ip, pc, #0, 12
   116bc:	add	ip, ip, #184320	; 0x2d000
   116c0:	ldr	pc, [ip, #2532]!	; 0x9e4

000116c4 <mbrtowc@plt>:
   116c4:	add	ip, pc, #0, 12
   116c8:	add	ip, ip, #184320	; 0x2d000
   116cc:	ldr	pc, [ip, #2524]!	; 0x9dc

000116d0 <error@plt>:
   116d0:	add	ip, pc, #0, 12
   116d4:	add	ip, ip, #184320	; 0x2d000
   116d8:	ldr	pc, [ip, #2516]!	; 0x9d4

000116dc <fnmatch@plt>:
   116dc:	add	ip, pc, #0, 12
   116e0:	add	ip, ip, #184320	; 0x2d000
   116e4:	ldr	pc, [ip, #2508]!	; 0x9cc

000116e8 <open64@plt>:
   116e8:	add	ip, pc, #0, 12
   116ec:	add	ip, ip, #184320	; 0x2d000
   116f0:	ldr	pc, [ip, #2500]!	; 0x9c4

000116f4 <getenv@plt>:
   116f4:	add	ip, pc, #0, 12
   116f8:	add	ip, ip, #184320	; 0x2d000
   116fc:	ldr	pc, [ip, #2492]!	; 0x9bc

00011700 <setgid@plt>:
   11700:	add	ip, pc, #0, 12
   11704:	add	ip, ip, #184320	; 0x2d000
   11708:	ldr	pc, [ip, #2484]!	; 0x9b4

0001170c <malloc@plt>:
   1170c:	add	ip, pc, #0, 12
   11710:	add	ip, ip, #184320	; 0x2d000
   11714:	ldr	pc, [ip, #2476]!	; 0x9ac

00011718 <__libc_start_main@plt>:
   11718:	add	ip, pc, #0, 12
   1171c:	add	ip, ip, #184320	; 0x2d000
   11720:	ldr	pc, [ip, #2468]!	; 0x9a4

00011724 <strftime@plt>:
   11724:	add	ip, pc, #0, 12
   11728:	add	ip, ip, #184320	; 0x2d000
   1172c:	ldr	pc, [ip, #2460]!	; 0x99c

00011730 <__freading@plt>:
   11730:	add	ip, pc, #0, 12
   11734:	add	ip, ip, #184320	; 0x2d000
   11738:	ldr	pc, [ip, #2452]!	; 0x994

0001173c <localtime@plt>:
   1173c:	add	ip, pc, #0, 12
   11740:	add	ip, ip, #184320	; 0x2d000
   11744:	ldr	pc, [ip, #2444]!	; 0x98c

00011748 <__ctype_tolower_loc@plt>:
   11748:	add	ip, pc, #0, 12
   1174c:	add	ip, ip, #184320	; 0x2d000
   11750:	ldr	pc, [ip, #2436]!	; 0x984

00011754 <__ctype_toupper_loc@plt>:
   11754:	add	ip, pc, #0, 12
   11758:	add	ip, ip, #184320	; 0x2d000
   1175c:	ldr	pc, [ip, #2428]!	; 0x97c

00011760 <__gmon_start__@plt>:
   11760:	add	ip, pc, #0, 12
   11764:	add	ip, ip, #184320	; 0x2d000
   11768:	ldr	pc, [ip, #2420]!	; 0x974

0001176c <getopt_long@plt>:
   1176c:	add	ip, pc, #0, 12
   11770:	add	ip, ip, #184320	; 0x2d000
   11774:	ldr	pc, [ip, #2412]!	; 0x96c

00011778 <__ctype_b_loc@plt>:
   11778:	add	ip, pc, #0, 12
   1177c:	add	ip, ip, #184320	; 0x2d000
   11780:	ldr	pc, [ip, #2404]!	; 0x964

00011784 <exit@plt>:
   11784:	add	ip, pc, #0, 12
   11788:	add	ip, ip, #184320	; 0x2d000
   1178c:	ldr	pc, [ip, #2396]!	; 0x95c

00011790 <feof@plt>:
   11790:	add	ip, pc, #0, 12
   11794:	add	ip, ip, #184320	; 0x2d000
   11798:	ldr	pc, [ip, #2388]!	; 0x954

0001179c <strtoul@plt>:
   1179c:	add	ip, pc, #0, 12
   117a0:	add	ip, ip, #184320	; 0x2d000
   117a4:	ldr	pc, [ip, #2380]!	; 0x94c

000117a8 <strlen@plt>:
   117a8:	add	ip, pc, #0, 12
   117ac:	add	ip, ip, #184320	; 0x2d000
   117b0:	ldr	pc, [ip, #2372]!	; 0x944

000117b4 <strchr@plt>:
   117b4:	add	ip, pc, #0, 12
   117b8:	add	ip, ip, #184320	; 0x2d000
   117bc:	ldr	pc, [ip, #2364]!	; 0x93c

000117c0 <fprintf@plt>:
   117c0:	add	ip, pc, #0, 12
   117c4:	add	ip, ip, #184320	; 0x2d000
   117c8:	ldr	pc, [ip, #2356]!	; 0x934

000117cc <ungetc@plt>:
   117cc:	add	ip, pc, #0, 12
   117d0:	add	ip, ip, #184320	; 0x2d000
   117d4:	ldr	pc, [ip, #2348]!	; 0x92c

000117d8 <__errno_location@plt>:
   117d8:	add	ip, pc, #0, 12
   117dc:	add	ip, ip, #184320	; 0x2d000
   117e0:	ldr	pc, [ip, #2340]!	; 0x924

000117e4 <iswalnum@plt>:
   117e4:	add	ip, pc, #0, 12
   117e8:	add	ip, ip, #184320	; 0x2d000
   117ec:	ldr	pc, [ip, #2332]!	; 0x91c

000117f0 <strncasecmp@plt>:
   117f0:	add	ip, pc, #0, 12
   117f4:	add	ip, ip, #184320	; 0x2d000
   117f8:	ldr	pc, [ip, #2324]!	; 0x914

000117fc <__cxa_atexit@plt>:
   117fc:	add	ip, pc, #0, 12
   11800:	add	ip, ip, #184320	; 0x2d000
   11804:	ldr	pc, [ip, #2316]!	; 0x90c

00011808 <getgid@plt>:
   11808:	add	ip, pc, #0, 12
   1180c:	add	ip, ip, #184320	; 0x2d000
   11810:	ldr	pc, [ip, #2308]!	; 0x904

00011814 <memset@plt>:
   11814:	add	ip, pc, #0, 12
   11818:	add	ip, ip, #184320	; 0x2d000
   1181c:	ldr	pc, [ip, #2300]!	; 0x8fc

00011820 <putchar@plt>:
   11820:	add	ip, pc, #0, 12
   11824:	add	ip, ip, #184320	; 0x2d000
   11828:	ldr	pc, [ip, #2292]!	; 0x8f4

0001182c <btowc@plt>:
   1182c:	add	ip, pc, #0, 12
   11830:	add	ip, ip, #184320	; 0x2d000
   11834:	ldr	pc, [ip, #2284]!	; 0x8ec

00011838 <fgetc@plt>:
   11838:	add	ip, pc, #0, 12
   1183c:	add	ip, ip, #184320	; 0x2d000
   11840:	ldr	pc, [ip, #2276]!	; 0x8e4

00011844 <fileno@plt>:
   11844:	add	ip, pc, #0, 12
   11848:	add	ip, ip, #184320	; 0x2d000
   1184c:	ldr	pc, [ip, #2268]!	; 0x8dc

00011850 <difftime@plt>:
   11850:	add	ip, pc, #0, 12
   11854:	add	ip, ip, #184320	; 0x2d000
   11858:	ldr	pc, [ip, #2260]!	; 0x8d4

0001185c <memchr@plt>:
   1185c:	add	ip, pc, #0, 12
   11860:	add	ip, ip, #184320	; 0x2d000
   11864:	ldr	pc, [ip, #2252]!	; 0x8cc

00011868 <fclose@plt>:
   11868:	add	ip, pc, #0, 12
   1186c:	add	ip, ip, #184320	; 0x2d000
   11870:	ldr	pc, [ip, #2244]!	; 0x8c4

00011874 <strnlen@plt>:
   11874:	add	ip, pc, #0, 12
   11878:	add	ip, ip, #184320	; 0x2d000
   1187c:	ldr	pc, [ip, #2236]!	; 0x8bc

00011880 <fseeko64@plt>:
   11880:	add	ip, pc, #0, 12
   11884:	add	ip, ip, #184320	; 0x2d000
   11888:	ldr	pc, [ip, #2228]!	; 0x8b4

0001188c <fcntl64@plt>:
   1188c:	add	ip, pc, #0, 12
   11890:	add	ip, ip, #184320	; 0x2d000
   11894:	ldr	pc, [ip, #2220]!	; 0x8ac

00011898 <setlocale@plt>:
   11898:	add	ip, pc, #0, 12
   1189c:	add	ip, ip, #184320	; 0x2d000
   118a0:	ldr	pc, [ip, #2212]!	; 0x8a4

000118a4 <strrchr@plt>:
   118a4:	add	ip, pc, #0, 12
   118a8:	add	ip, ip, #184320	; 0x2d000
   118ac:	ldr	pc, [ip, #2204]!	; 0x89c

000118b0 <nl_langinfo@plt>:
   118b0:	add	ip, pc, #0, 12
   118b4:	add	ip, ip, #184320	; 0x2d000
   118b8:	ldr	pc, [ip, #2196]!	; 0x894

000118bc <fputc@plt>:
   118bc:	add	ip, pc, #0, 12
   118c0:	add	ip, ip, #184320	; 0x2d000
   118c4:	ldr	pc, [ip, #2188]!	; 0x88c

000118c8 <setuid@plt>:
   118c8:	add	ip, pc, #0, 12
   118cc:	add	ip, ip, #184320	; 0x2d000
   118d0:	ldr	pc, [ip, #2180]!	; 0x884

000118d4 <localeconv@plt>:
   118d4:	add	ip, pc, #0, 12
   118d8:	add	ip, ip, #184320	; 0x2d000
   118dc:	ldr	pc, [ip, #2172]!	; 0x87c

000118e0 <clearerr@plt>:
   118e0:	add	ip, pc, #0, 12
   118e4:	add	ip, ip, #184320	; 0x2d000
   118e8:	ldr	pc, [ip, #2164]!	; 0x874

000118ec <sprintf@plt>:
   118ec:	add	ip, pc, #0, 12
   118f0:	add	ip, ip, #184320	; 0x2d000
   118f4:	ldr	pc, [ip, #2156]!	; 0x86c

000118f8 <putc@plt>:
   118f8:	add	ip, pc, #0, 12
   118fc:	add	ip, ip, #184320	; 0x2d000
   11900:	ldr	pc, [ip, #2148]!	; 0x864

00011904 <strpbrk@plt>:
   11904:	add	ip, pc, #0, 12
   11908:	add	ip, ip, #184320	; 0x2d000
   1190c:	ldr	pc, [ip, #2140]!	; 0x85c

00011910 <bindtextdomain@plt>:
   11910:	add	ip, pc, #0, 12
   11914:	add	ip, ip, #184320	; 0x2d000
   11918:	ldr	pc, [ip, #2132]!	; 0x854

0001191c <getdelim@plt>:
   1191c:	add	ip, pc, #0, 12
   11920:	add	ip, ip, #184320	; 0x2d000
   11924:	ldr	pc, [ip, #2124]!	; 0x84c

00011928 <__xstat64@plt>:
   11928:	add	ip, pc, #0, 12
   1192c:	add	ip, ip, #184320	; 0x2d000
   11930:	ldr	pc, [ip, #2116]!	; 0x844

00011934 <isatty@plt>:
   11934:	add	ip, pc, #0, 12
   11938:	add	ip, ip, #184320	; 0x2d000
   1193c:	ldr	pc, [ip, #2108]!	; 0x83c

00011940 <towupper@plt>:
   11940:	add	ip, pc, #0, 12
   11944:	add	ip, ip, #184320	; 0x2d000
   11948:	ldr	pc, [ip, #2100]!	; 0x834

0001194c <fputs@plt>:
   1194c:	add	ip, pc, #0, 12
   11950:	add	ip, ip, #184320	; 0x2d000
   11954:	ldr	pc, [ip, #2092]!	; 0x82c

00011958 <strncmp@plt>:
   11958:	add	ip, pc, #0, 12
   1195c:	add	ip, ip, #184320	; 0x2d000
   11960:	ldr	pc, [ip, #2084]!	; 0x824

00011964 <abort@plt>:
   11964:	add	ip, pc, #0, 12
   11968:	add	ip, ip, #184320	; 0x2d000
   1196c:	ldr	pc, [ip, #2076]!	; 0x81c

00011970 <getc@plt>:
   11970:	add	ip, pc, #0, 12
   11974:	add	ip, ip, #184320	; 0x2d000
   11978:	ldr	pc, [ip, #2068]!	; 0x814

0001197c <close@plt>:
   1197c:	add	ip, pc, #0, 12
   11980:	add	ip, ip, #184320	; 0x2d000
   11984:	ldr	pc, [ip, #2060]!	; 0x80c

00011988 <__lxstat64@plt>:
   11988:	add	ip, pc, #0, 12
   1198c:	add	ip, ip, #184320	; 0x2d000
   11990:	ldr	pc, [ip, #2052]!	; 0x804

00011994 <dcngettext@plt>:
   11994:	add	ip, pc, #0, 12
   11998:	add	ip, ip, #184320	; 0x2d000
   1199c:	ldr	pc, [ip, #2044]!	; 0x7fc

000119a0 <__assert_fail@plt>:
   119a0:	add	ip, pc, #0, 12
   119a4:	add	ip, ip, #184320	; 0x2d000
   119a8:	ldr	pc, [ip, #2036]!	; 0x7f4

Disassembly of section .text:

000119b0 <.text>:
   119b0:	mov	fp, #0
   119b4:	mov	lr, #0
   119b8:	pop	{r1}		; (ldr r1, [sp], #4)
   119bc:	mov	r2, sp
   119c0:	push	{r2}		; (str r2, [sp, #-4]!)
   119c4:	push	{r0}		; (str r0, [sp, #-4]!)
   119c8:	ldr	ip, [pc, #16]	; 119e0 <__assert_fail@plt+0x40>
   119cc:	push	{ip}		; (str ip, [sp, #-4]!)
   119d0:	ldr	r0, [pc, #12]	; 119e4 <__assert_fail@plt+0x44>
   119d4:	ldr	r3, [pc, #12]	; 119e8 <__assert_fail@plt+0x48>
   119d8:	bl	11718 <__libc_start_main@plt>
   119dc:	bl	11964 <abort@plt>
   119e0:	andeq	ip, r2, r0, ror #21
   119e4:	andeq	r4, r1, ip, asr r0
   119e8:	andeq	ip, r2, r0, lsl #21
   119ec:	ldr	r3, [pc, #20]	; 11a08 <__assert_fail@plt+0x68>
   119f0:	ldr	r2, [pc, #20]	; 11a0c <__assert_fail@plt+0x6c>
   119f4:	add	r3, pc, r3
   119f8:	ldr	r2, [r3, r2]
   119fc:	cmp	r2, #0
   11a00:	bxeq	lr
   11a04:	b	11760 <__gmon_start__@plt>
   11a08:	andeq	sp, r2, r4, lsl #12
   11a0c:	andeq	r0, r0, r0, lsr #3
   11a10:	ldr	r0, [pc, #24]	; 11a30 <__assert_fail@plt+0x90>
   11a14:	ldr	r3, [pc, #24]	; 11a34 <__assert_fail@plt+0x94>
   11a18:	cmp	r3, r0
   11a1c:	bxeq	lr
   11a20:	ldr	r3, [pc, #16]	; 11a38 <__assert_fail@plt+0x98>
   11a24:	cmp	r3, #0
   11a28:	bxeq	lr
   11a2c:	bx	r3
   11a30:	andeq	pc, r3, r4, lsl #4
   11a34:	andeq	pc, r3, r4, lsl #4
   11a38:	andeq	r0, r0, r0
   11a3c:	ldr	r0, [pc, #36]	; 11a68 <__assert_fail@plt+0xc8>
   11a40:	ldr	r1, [pc, #36]	; 11a6c <__assert_fail@plt+0xcc>
   11a44:	sub	r1, r1, r0
   11a48:	asr	r1, r1, #2
   11a4c:	add	r1, r1, r1, lsr #31
   11a50:	asrs	r1, r1, #1
   11a54:	bxeq	lr
   11a58:	ldr	r3, [pc, #16]	; 11a70 <__assert_fail@plt+0xd0>
   11a5c:	cmp	r3, #0
   11a60:	bxeq	lr
   11a64:	bx	r3
   11a68:	andeq	pc, r3, r4, lsl #4
   11a6c:	andeq	pc, r3, r4, lsl #4
   11a70:	andeq	r0, r0, r0
   11a74:	push	{r4, lr}
   11a78:	ldr	r4, [pc, #24]	; 11a98 <__assert_fail@plt+0xf8>
   11a7c:	ldrb	r3, [r4]
   11a80:	cmp	r3, #0
   11a84:	popne	{r4, pc}
   11a88:	bl	11a10 <__assert_fail@plt+0x70>
   11a8c:	mov	r3, #1
   11a90:	strb	r3, [r4]
   11a94:	pop	{r4, pc}
   11a98:	andeq	pc, r3, r4, lsr #4
   11a9c:	b	11a3c <__assert_fail@plt+0x9c>
   11aa0:	strd	r4, [sp, #-16]!
   11aa4:	str	r6, [sp, #8]
   11aa8:	str	lr, [sp, #12]
   11aac:	mov	r5, r0
   11ab0:	movw	r3, #61992	; 0xf228
   11ab4:	movt	r3, #3
   11ab8:	ldr	r4, [r3]
   11abc:	cmp	r4, #0
   11ac0:	beq	11b00 <__assert_fail@plt+0x160>
   11ac4:	ldr	r3, [r4]
   11ac8:	ldr	r1, [r4, #4]
   11acc:	mov	r0, r5
   11ad0:	blx	r3
   11ad4:	ldr	r4, [r4, #8]
   11ad8:	adds	r2, r4, #0
   11adc:	movne	r2, #1
   11ae0:	ands	r3, r0, #3
   11ae4:	movne	r3, r2
   11ae8:	cmp	r3, #0
   11aec:	bne	11ac4 <__assert_fail@plt+0x124>
   11af0:	ldrd	r4, [sp]
   11af4:	ldr	r6, [sp, #8]
   11af8:	add	sp, sp, #12
   11afc:	pop	{pc}		; (ldr pc, [sp], #4)
   11b00:	mov	r0, #3
   11b04:	b	11af0 <__assert_fail@plt+0x150>
   11b08:	strd	r4, [sp, #-16]!
   11b0c:	str	r6, [sp, #8]
   11b10:	str	lr, [sp, #12]
   11b14:	mov	r5, r0
   11b18:	movw	r3, #61992	; 0xf228
   11b1c:	movt	r3, #3
   11b20:	ldr	r4, [r3]
   11b24:	ldr	r6, [r3, #4]
   11b28:	cmp	r4, r6
   11b2c:	beq	11bbc <__assert_fail@plt+0x21c>
   11b30:	ldr	r3, [r4]
   11b34:	ldr	r1, [r4, #4]
   11b38:	mov	r0, r5
   11b3c:	blx	r3
   11b40:	ldr	r4, [r4, #8]
   11b44:	and	r3, r0, #5
   11b48:	cmp	r6, r4
   11b4c:	cmpne	r3, #0
   11b50:	bne	11b30 <__assert_fail@plt+0x190>
   11b54:	cmp	r0, #1
   11b58:	moveq	r0, #4
   11b5c:	beq	11bac <__assert_fail@plt+0x20c>
   11b60:	tst	r0, #12
   11b64:	bne	11bac <__assert_fail@plt+0x20c>
   11b68:	movw	r3, #61992	; 0xf228
   11b6c:	movt	r3, #3
   11b70:	ldr	r4, [r3, #4]
   11b74:	cmp	r4, #0
   11b78:	beq	11bc4 <__assert_fail@plt+0x224>
   11b7c:	ldr	r3, [r4]
   11b80:	ldr	r1, [r4, #4]
   11b84:	mov	r0, r5
   11b88:	blx	r3
   11b8c:	ldr	r4, [r4, #8]
   11b90:	cmp	r4, #0
   11b94:	moveq	r3, #0
   11b98:	andne	r3, r0, #1
   11b9c:	cmp	r3, #0
   11ba0:	bne	11b7c <__assert_fail@plt+0x1dc>
   11ba4:	cmp	r0, #1
   11ba8:	moveq	r0, #2
   11bac:	ldrd	r4, [sp]
   11bb0:	ldr	r6, [sp, #8]
   11bb4:	add	sp, sp, #12
   11bb8:	pop	{pc}		; (ldr pc, [sp], #4)
   11bbc:	mov	r0, #5
   11bc0:	b	11bac <__assert_fail@plt+0x20c>
   11bc4:	mov	r0, #2
   11bc8:	b	11bac <__assert_fail@plt+0x20c>
   11bcc:	strd	r4, [sp, #-16]!
   11bd0:	str	r6, [sp, #8]
   11bd4:	str	lr, [sp, #12]
   11bd8:	mov	r5, r0
   11bdc:	movw	r3, #61992	; 0xf228
   11be0:	movt	r3, #3
   11be4:	ldr	r4, [r3]
   11be8:	ldr	r6, [r3, #4]
   11bec:	cmp	r4, r6
   11bf0:	beq	11c34 <__assert_fail@plt+0x294>
   11bf4:	ldr	r3, [r4]
   11bf8:	ldr	r1, [r4, #4]
   11bfc:	mov	r0, r5
   11c00:	blx	r3
   11c04:	ldr	r4, [r4, #8]
   11c08:	subs	r2, r6, r4
   11c0c:	movne	r2, #1
   11c10:	ands	r3, r0, #3
   11c14:	movne	r3, r2
   11c18:	cmp	r3, #0
   11c1c:	bne	11bf4 <__assert_fail@plt+0x254>
   11c20:	cmp	r0, #1
   11c24:	moveq	r0, #4
   11c28:	beq	11c78 <__assert_fail@plt+0x2d8>
   11c2c:	tst	r0, #12
   11c30:	bne	11c78 <__assert_fail@plt+0x2d8>
   11c34:	movw	r3, #61992	; 0xf228
   11c38:	movt	r3, #3
   11c3c:	ldr	r4, [r3, #4]
   11c40:	cmp	r4, #0
   11c44:	beq	11c88 <__assert_fail@plt+0x2e8>
   11c48:	ldr	r3, [r4]
   11c4c:	ldr	r1, [r4, #4]
   11c50:	mov	r0, r5
   11c54:	blx	r3
   11c58:	ldr	r4, [r4, #8]
   11c5c:	cmp	r4, #0
   11c60:	moveq	r3, #0
   11c64:	andne	r3, r0, #1
   11c68:	cmp	r3, #0
   11c6c:	bne	11c48 <__assert_fail@plt+0x2a8>
   11c70:	cmp	r0, #1
   11c74:	moveq	r0, #2
   11c78:	ldrd	r4, [sp]
   11c7c:	ldr	r6, [sp, #8]
   11c80:	add	sp, sp, #12
   11c84:	pop	{pc}		; (ldr pc, [sp], #4)
   11c88:	mov	r0, #2
   11c8c:	b	11c78 <__assert_fail@plt+0x2d8>
   11c90:	ldr	r0, [r1, #8]
   11c94:	ldr	ip, [r1, #12]
   11c98:	adds	r2, r0, #1
   11c9c:	adc	r3, ip, #0
   11ca0:	strd	r2, [r1, #8]
   11ca4:	ldrd	r0, [r1]
   11ca8:	cmp	r3, r1
   11cac:	cmpeq	r2, r0
   11cb0:	movcs	r0, #8
   11cb4:	movcc	r0, #1
   11cb8:	bx	lr
   11cbc:	ldr	r3, [r1, #8]
   11cc0:	ldr	r2, [r1, #12]
   11cc4:	adds	r3, r3, #1
   11cc8:	adc	r2, r2, #0
   11ccc:	str	r3, [r1, #8]
   11cd0:	str	r2, [r1, #12]
   11cd4:	mov	r0, #1
   11cd8:	bx	lr
   11cdc:	str	r4, [sp, #-8]!
   11ce0:	str	lr, [sp, #4]
   11ce4:	mov	r1, #131072	; 0x20000
   11ce8:	bl	14c80 <__assert_fail@plt+0x32e0>
   11cec:	subs	r4, r0, #0
   11cf0:	bge	11d04 <__assert_fail@plt+0x364>
   11cf4:	mov	r0, r4
   11cf8:	ldr	r4, [sp]
   11cfc:	add	sp, sp, #4
   11d00:	pop	{pc}		; (ldr pc, [sp], #4)
   11d04:	mov	r2, #1
   11d08:	mov	r1, #2
   11d0c:	mov	r0, r4
   11d10:	bl	1c66c <__assert_fail@plt+0xaccc>
   11d14:	cmp	r0, #0
   11d18:	beq	11cf4 <__assert_fail@plt+0x354>
   11d1c:	mov	r0, r4
   11d20:	bl	1197c <close@plt>
   11d24:	mvn	r4, #0
   11d28:	b	11cf4 <__assert_fail@plt+0x354>
   11d2c:	str	r4, [sp, #-8]!
   11d30:	str	lr, [sp, #4]
   11d34:	movw	r3, #61992	; 0xf228
   11d38:	movt	r3, #3
   11d3c:	ldr	r0, [r3, #8]
   11d40:	bl	1c948 <__assert_fail@plt+0xafa8>
   11d44:	ldr	r4, [sp]
   11d48:	add	sp, sp, #4
   11d4c:	pop	{pc}		; (ldr pc, [sp], #4)
   11d50:	str	r4, [sp, #-8]!
   11d54:	str	lr, [sp, #4]
   11d58:	subs	r4, r0, #0
   11d5c:	beq	11da0 <__assert_fail@plt+0x400>
   11d60:	movw	r3, #61976	; 0xf218
   11d64:	movt	r3, #3
   11d68:	ldr	r5, [r3]
   11d6c:	mov	r2, #5
   11d70:	movw	r1, #52568	; 0xcd58
   11d74:	movt	r1, #2
   11d78:	mov	r0, #0
   11d7c:	bl	11628 <dcgettext@plt>
   11d80:	movw	r3, #62108	; 0xf29c
   11d84:	movt	r3, #3
   11d88:	ldr	r2, [r3]
   11d8c:	mov	r1, r0
   11d90:	mov	r0, r5
   11d94:	bl	117c0 <fprintf@plt>
   11d98:	mov	r0, r4
   11d9c:	bl	11784 <exit@plt>
   11da0:	movw	r4, #61980	; 0xf21c
   11da4:	movt	r4, #3
   11da8:	ldr	r6, [r4]
   11dac:	mov	r2, #5
   11db0:	movw	r1, #52608	; 0xcd80
   11db4:	movt	r1, #2
   11db8:	mov	r0, #0
   11dbc:	bl	11628 <dcgettext@plt>
   11dc0:	movw	r5, #62108	; 0xf29c
   11dc4:	movt	r5, #3
   11dc8:	ldr	r2, [r5]
   11dcc:	mov	r1, r0
   11dd0:	mov	r0, r6
   11dd4:	bl	117c0 <fprintf@plt>
   11dd8:	ldr	r1, [r5]
   11ddc:	ldr	r0, [r4]
   11de0:	bl	14a18 <__assert_fail@plt+0x3078>
   11de4:	mov	r0, #0
   11de8:	bl	11784 <exit@plt>
   11dec:	strd	r4, [sp, #-16]!
   11df0:	str	r6, [sp, #8]
   11df4:	str	lr, [sp, #12]
   11df8:	mov	r5, r0
   11dfc:	mov	r4, r1
   11e00:	mov	r0, #12
   11e04:	bl	1ba00 <__assert_fail@plt+0xa060>
   11e08:	str	r5, [r0]
   11e0c:	str	r4, [r0, #4]
   11e10:	mov	r3, #0
   11e14:	str	r3, [r0, #8]
   11e18:	movw	r3, #61992	; 0xf228
   11e1c:	movt	r3, #3
   11e20:	ldr	r3, [r3, #12]
   11e24:	cmp	r3, #0
   11e28:	beq	11e4c <__assert_fail@plt+0x4ac>
   11e2c:	str	r0, [r3, #8]
   11e30:	movw	r3, #61992	; 0xf228
   11e34:	movt	r3, #3
   11e38:	str	r0, [r3, #12]
   11e3c:	ldrd	r4, [sp]
   11e40:	ldr	r6, [sp, #8]
   11e44:	add	sp, sp, #12
   11e48:	pop	{pc}		; (ldr pc, [sp], #4)
   11e4c:	movw	r3, #61992	; 0xf228
   11e50:	movt	r3, #3
   11e54:	str	r0, [r3]
   11e58:	str	r0, [r3, #12]
   11e5c:	b	11e3c <__assert_fail@plt+0x49c>
   11e60:	str	r4, [sp, #-8]!
   11e64:	str	lr, [sp, #4]
   11e68:	movw	r4, #61980	; 0xf21c
   11e6c:	movt	r4, #3
   11e70:	ldr	r1, [r4]
   11e74:	ldr	r0, [r0, #12]
   11e78:	bl	1194c <fputs@plt>
   11e7c:	movw	r3, #61868	; 0xf1ac
   11e80:	movt	r3, #3
   11e84:	ldr	r1, [r4]
   11e88:	ldr	r0, [r3]
   11e8c:	bl	118f8 <putc@plt>
   11e90:	mov	r0, #1
   11e94:	ldr	r4, [sp]
   11e98:	add	sp, sp, #4
   11e9c:	pop	{pc}		; (ldr pc, [sp], #4)
   11ea0:	str	r4, [sp, #-8]!
   11ea4:	str	lr, [sp, #4]
   11ea8:	sub	sp, sp, #8
   11eac:	movw	r1, #61992	; 0xf228
   11eb0:	movt	r1, #3
   11eb4:	movw	r4, #61980	; 0xf21c
   11eb8:	movt	r4, #3
   11ebc:	ldr	r3, [r0, #12]
   11ec0:	str	r3, [sp]
   11ec4:	movw	r3, #56384	; 0xdc40
   11ec8:	movt	r3, #2
   11ecc:	ldrb	r2, [r1, #16]
   11ed0:	ldr	r1, [r1, #8]
   11ed4:	ldr	r0, [r4]
   11ed8:	bl	14454 <__assert_fail@plt+0x2ab4>
   11edc:	movw	r3, #61868	; 0xf1ac
   11ee0:	movt	r3, #3
   11ee4:	ldr	r1, [r4]
   11ee8:	ldr	r0, [r3]
   11eec:	bl	118f8 <putc@plt>
   11ef0:	mov	r0, #1
   11ef4:	add	sp, sp, #8
   11ef8:	ldr	r4, [sp]
   11efc:	add	sp, sp, #4
   11f00:	pop	{pc}		; (ldr pc, [sp], #4)
   11f04:	strd	r4, [sp, #-32]!	; 0xffffffe0
   11f08:	strd	r6, [sp, #8]
   11f0c:	strd	r8, [sp, #16]
   11f10:	str	sl, [sp, #24]
   11f14:	str	lr, [sp, #28]
   11f18:	mov	r4, r0
   11f1c:	mov	r7, r1
   11f20:	ldr	r0, [r0, #12]
   11f24:	bl	117a8 <strlen@plt>
   11f28:	ldr	r3, [r7, #8]
   11f2c:	ldr	r2, [r7, #12]
   11f30:	adds	r3, r3, #1
   11f34:	adc	r2, r2, #0
   11f38:	str	r3, [r7, #8]
   11f3c:	str	r2, [r7, #12]
   11f40:	ldrd	r2, [r7, #16]
   11f44:	adds	r8, r2, r0
   11f48:	adc	r9, r3, #0
   11f4c:	mov	r0, r8
   11f50:	mov	r1, r9
   11f54:	strd	r0, [r7, #16]
   11f58:	ldr	r5, [r4, #12]
   11f5c:	ldrb	r4, [r5]
   11f60:	cmp	r4, #0
   11f64:	beq	12040 <__assert_fail@plt+0x6a0>
   11f68:	mov	r9, #0
   11f6c:	mov	r6, r9
   11f70:	mov	sl, r9
   11f74:	mov	r8, #1
   11f78:	b	11fa8 <__assert_fail@plt+0x608>
   11f7c:	mov	sl, r8
   11f80:	bl	11778 <__ctype_b_loc@plt>
   11f84:	ldr	r3, [r0]
   11f88:	lsl	r4, r4, #1
   11f8c:	ldrh	r3, [r3, r4]
   11f90:	and	r3, r3, #8192	; 0x2000
   11f94:	cmp	r3, #0
   11f98:	movne	r6, #1
   11f9c:	ldrb	r4, [r5, #1]!
   11fa0:	cmp	r4, #0
   11fa4:	beq	11fc4 <__assert_fail@plt+0x624>
   11fa8:	tst	r4, #128	; 0x80
   11fac:	bne	11f7c <__assert_fail@plt+0x5dc>
   11fb0:	cmp	r4, #10
   11fb4:	moveq	r9, r8
   11fb8:	moveq	r6, r8
   11fbc:	beq	11f9c <__assert_fail@plt+0x5fc>
   11fc0:	b	11f80 <__assert_fail@plt+0x5e0>
   11fc4:	cmp	sl, #0
   11fc8:	beq	11fe4 <__assert_fail@plt+0x644>
   11fcc:	ldr	r3, [r7, #40]	; 0x28
   11fd0:	ldr	r2, [r7, #44]	; 0x2c
   11fd4:	adds	r3, r3, #1
   11fd8:	adc	r2, r2, #0
   11fdc:	str	r3, [r7, #40]	; 0x28
   11fe0:	str	r2, [r7, #44]	; 0x2c
   11fe4:	cmp	r6, #0
   11fe8:	beq	12004 <__assert_fail@plt+0x664>
   11fec:	ldr	r3, [r7, #24]
   11ff0:	ldr	r2, [r7, #28]
   11ff4:	adds	r3, r3, #1
   11ff8:	adc	r2, r2, #0
   11ffc:	str	r3, [r7, #24]
   12000:	str	r2, [r7, #28]
   12004:	cmp	r9, #0
   12008:	beq	12024 <__assert_fail@plt+0x684>
   1200c:	ldr	r3, [r7, #32]
   12010:	ldr	r2, [r7, #36]	; 0x24
   12014:	adds	r3, r3, #1
   12018:	adc	r2, r2, #0
   1201c:	str	r3, [r7, #32]
   12020:	str	r2, [r7, #36]	; 0x24
   12024:	mov	r0, #1
   12028:	ldrd	r4, [sp]
   1202c:	ldrd	r6, [sp, #8]
   12030:	ldrd	r8, [sp, #16]
   12034:	ldr	sl, [sp, #24]
   12038:	add	sp, sp, #28
   1203c:	pop	{pc}		; (ldr pc, [sp], #4)
   12040:	mov	r9, #0
   12044:	b	12004 <__assert_fail@plt+0x664>
   12048:	push	{lr}		; (str lr, [sp, #-4]!)
   1204c:	sub	sp, sp, #108	; 0x6c
   12050:	mov	r2, sp
   12054:	ldr	r1, [r0, #12]
   12058:	mov	r0, #3
   1205c:	bl	11988 <__lxstat64@plt>
   12060:	cmp	r0, #0
   12064:	movne	r0, #4
   12068:	moveq	r0, #1
   1206c:	add	sp, sp, #108	; 0x6c
   12070:	pop	{pc}		; (ldr pc, [sp], #4)
   12074:	push	{lr}		; (str lr, [sp, #-4]!)
   12078:	sub	sp, sp, #108	; 0x6c
   1207c:	mov	r2, sp
   12080:	ldr	r1, [r0, #12]
   12084:	mov	r0, #3
   12088:	bl	11988 <__lxstat64@plt>
   1208c:	cmp	r0, #0
   12090:	moveq	r0, #4
   12094:	movne	r0, #1
   12098:	add	sp, sp, #108	; 0x6c
   1209c:	pop	{pc}		; (ldr pc, [sp], #4)
   120a0:	push	{lr}		; (str lr, [sp, #-4]!)
   120a4:	sub	sp, sp, #108	; 0x6c
   120a8:	mov	r2, sp
   120ac:	ldr	r1, [r0, #12]
   120b0:	mov	r0, #3
   120b4:	bl	11928 <__xstat64@plt>
   120b8:	cmp	r0, #0
   120bc:	movne	r0, #4
   120c0:	moveq	r0, #1
   120c4:	add	sp, sp, #108	; 0x6c
   120c8:	pop	{pc}		; (ldr pc, [sp], #4)
   120cc:	push	{lr}		; (str lr, [sp, #-4]!)
   120d0:	sub	sp, sp, #108	; 0x6c
   120d4:	mov	r2, sp
   120d8:	ldr	r1, [r0, #12]
   120dc:	mov	r0, #3
   120e0:	bl	11928 <__xstat64@plt>
   120e4:	cmp	r0, #0
   120e8:	moveq	r0, #4
   120ec:	movne	r0, #1
   120f0:	add	sp, sp, #108	; 0x6c
   120f4:	pop	{pc}		; (ldr pc, [sp], #4)
   120f8:	str	r4, [sp, #-8]!
   120fc:	str	lr, [sp, #4]
   12100:	ldr	r0, [r0, #20]
   12104:	bl	181d4 <__assert_fail@plt+0x6834>
   12108:	cmp	r0, #0
   1210c:	movne	r0, #2
   12110:	moveq	r0, #4
   12114:	ldr	r4, [sp]
   12118:	add	sp, sp, #4
   1211c:	pop	{pc}		; (ldr pc, [sp], #4)
   12120:	str	r4, [sp, #-8]!
   12124:	str	lr, [sp, #4]
   12128:	ldr	r0, [r0, #20]
   1212c:	bl	163fc <__assert_fail@plt+0x4a5c>
   12130:	cmp	r0, #0
   12134:	movne	r0, #2
   12138:	moveq	r0, #4
   1213c:	ldr	r4, [sp]
   12140:	add	sp, sp, #4
   12144:	pop	{pc}		; (ldr pc, [sp], #4)
   12148:	strd	r4, [sp, #-16]!
   1214c:	str	r6, [sp, #8]
   12150:	str	lr, [sp, #12]
   12154:	mov	r4, r0
   12158:	mov	r5, r1
   1215c:	bl	116a0 <__ctype_get_mb_cur_max@plt>
   12160:	cmp	r0, #1
   12164:	bne	12190 <__assert_fail@plt+0x7f0>
   12168:	mov	r1, r5
   1216c:	ldr	r0, [r4, #20]
   12170:	bl	2b914 <__assert_fail@plt+0x19f74>
   12174:	cmp	r0, #0
   12178:	movne	r0, #2
   1217c:	moveq	r0, #4
   12180:	ldrd	r4, [sp]
   12184:	ldr	r6, [sp, #8]
   12188:	add	sp, sp, #12
   1218c:	pop	{pc}		; (ldr pc, [sp], #4)
   12190:	movw	r3, #51976	; 0xcb08
   12194:	movt	r3, #2
   12198:	movw	r2, #690	; 0x2b2
   1219c:	movw	r1, #53024	; 0xcf20
   121a0:	movt	r1, #2
   121a4:	movw	r0, #53036	; 0xcf2c
   121a8:	movt	r0, #2
   121ac:	bl	119a0 <__assert_fail@plt>
   121b0:	strd	r4, [sp, #-16]!
   121b4:	str	r6, [sp, #8]
   121b8:	str	lr, [sp, #12]
   121bc:	mov	r4, r0
   121c0:	mov	r5, r1
   121c4:	bl	116a0 <__ctype_get_mb_cur_max@plt>
   121c8:	cmp	r0, #1
   121cc:	bne	121f8 <__assert_fail@plt+0x858>
   121d0:	mov	r1, r5
   121d4:	ldr	r0, [r4, #20]
   121d8:	bl	2adf8 <__assert_fail@plt+0x19458>
   121dc:	cmp	r0, #0
   121e0:	movne	r0, #2
   121e4:	moveq	r0, #4
   121e8:	ldrd	r4, [sp]
   121ec:	ldr	r6, [sp, #8]
   121f0:	add	sp, sp, #12
   121f4:	pop	{pc}		; (ldr pc, [sp], #4)
   121f8:	ldr	r3, [pc, #20]	; 12214 <__assert_fail@plt+0x874>
   121fc:	movw	r2, #714	; 0x2ca
   12200:	movw	r1, #53024	; 0xcf20
   12204:	movt	r1, #2
   12208:	movw	r0, #53036	; 0xcf2c
   1220c:	movt	r0, #2
   12210:	bl	119a0 <__assert_fail@plt>
   12214:	andeq	ip, r2, r0, lsr fp
   12218:	str	r4, [sp, #-8]!
   1221c:	str	lr, [sp, #4]
   12220:	mov	r3, r1
   12224:	mov	r2, #0
   12228:	ldr	r1, [r0, #20]
   1222c:	mov	r0, r3
   12230:	bl	116dc <fnmatch@plt>
   12234:	cmp	r0, #0
   12238:	movne	r0, #4
   1223c:	moveq	r0, #2
   12240:	ldr	r4, [sp]
   12244:	add	sp, sp, #4
   12248:	pop	{pc}		; (ldr pc, [sp], #4)
   1224c:	str	r4, [sp, #-8]!
   12250:	str	lr, [sp, #4]
   12254:	mov	r3, r1
   12258:	mov	r2, #16
   1225c:	ldr	r1, [r0, #20]
   12260:	mov	r0, r3
   12264:	bl	116dc <fnmatch@plt>
   12268:	cmp	r0, #0
   1226c:	movne	r0, #4
   12270:	moveq	r0, #2
   12274:	ldr	r4, [sp]
   12278:	add	sp, sp, #4
   1227c:	pop	{pc}		; (ldr pc, [sp], #4)
   12280:	strd	r4, [sp, #-12]!
   12284:	str	lr, [sp, #8]
   12288:	sub	sp, sp, #12
   1228c:	mov	r5, r1
   12290:	ldr	r4, [r0, #20]
   12294:	mov	r0, r4
   12298:	bl	117a8 <strlen@plt>
   1229c:	mov	r2, r0
   122a0:	mov	r3, #0
   122a4:	str	r3, [sp, #4]
   122a8:	str	r0, [sp]
   122ac:	mov	r1, r4
   122b0:	mov	r0, r5
   122b4:	bl	2a4b0 <__assert_fail@plt+0x18b10>
   122b8:	cmp	r0, #0
   122bc:	movlt	r0, #4
   122c0:	movge	r0, #2
   122c4:	add	sp, sp, #12
   122c8:	ldrd	r4, [sp]
   122cc:	add	sp, sp, #8
   122d0:	pop	{pc}		; (ldr pc, [sp], #4)
   122d4:	str	r4, [sp, #-8]!
   122d8:	str	lr, [sp, #4]
   122dc:	mov	r4, r0
   122e0:	ldr	r0, [r0, #12]
   122e4:	bl	14a8c <__assert_fail@plt+0x30ec>
   122e8:	str	r0, [r4, #20]
   122ec:	mov	r0, #1
   122f0:	ldr	r4, [sp]
   122f4:	add	sp, sp, #4
   122f8:	pop	{pc}		; (ldr pc, [sp], #4)
   122fc:	strd	r4, [sp, #-20]!	; 0xffffffec
   12300:	strd	r6, [sp, #8]
   12304:	str	lr, [sp, #16]
   12308:	sub	sp, sp, #12
   1230c:	mov	r4, r0
   12310:	ldr	r3, [r0]
   12314:	cmp	r3, #128	; 0x80
   12318:	beq	12444 <__assert_fail@plt+0xaa4>
   1231c:	cmp	r3, #127	; 0x7f
   12320:	subgt	r3, r3, #256	; 0x100
   12324:	ldr	r2, [r0, #4]
   12328:	add	r3, r2, r3
   1232c:	str	r3, [r0, #4]
   12330:	ldr	r6, [r4, #4]
   12334:	ldr	r3, [r4, #8]
   12338:	cmp	r6, r3
   1233c:	movle	r3, #0
   12340:	movgt	r3, #1
   12344:	orrs	r3, r3, r6, lsr #31
   12348:	bne	12478 <__assert_fail@plt+0xad8>
   1234c:	mov	r2, #0
   12350:	str	r2, [sp]
   12354:	str	r2, [sp, #4]
   12358:	ldr	r3, [r4, #24]
   1235c:	add	r1, sp, #4
   12360:	mov	r0, sp
   12364:	bl	1191c <getdelim@plt>
   12368:	subs	r5, r0, #0
   1236c:	blt	1256c <__assert_fail@plt+0xbcc>
   12370:	ldr	r3, [sp]
   12374:	cmp	r3, #0
   12378:	beq	124b4 <__assert_fail@plt+0xb14>
   1237c:	add	r7, r6, r5
   12380:	add	r7, r7, #1
   12384:	ldr	r3, [r4, #16]
   12388:	cmp	r7, r3
   1238c:	bls	123ac <__assert_fail@plt+0xa0c>
   12390:	mov	r1, r7
   12394:	ldr	r0, [r4, #12]
   12398:	bl	1cb14 <__assert_fail@plt+0xb174>
   1239c:	cmp	r0, #0
   123a0:	beq	1256c <__assert_fail@plt+0xbcc>
   123a4:	str	r7, [r4, #16]
   123a8:	str	r0, [r4, #12]
   123ac:	ldr	r0, [r4, #12]
   123b0:	add	r2, r5, #1
   123b4:	ldr	r1, [sp]
   123b8:	add	r0, r0, r6
   123bc:	bl	115d4 <memcpy@plt>
   123c0:	ldr	r0, [sp]
   123c4:	bl	1c948 <__assert_fail@plt+0xafa8>
   123c8:	cmp	r5, #0
   123cc:	beq	12564 <__assert_fail@plt+0xbc4>
   123d0:	ldr	r0, [r4, #24]
   123d4:	bl	11970 <getc@plt>
   123d8:	str	r0, [r4]
   123dc:	ldr	r3, [r4, #4]
   123e0:	add	r5, r5, r3
   123e4:	sub	r5, r5, #1
   123e8:	str	r5, [r4, #8]
   123ec:	cmp	r5, #0
   123f0:	ble	124d0 <__assert_fail@plt+0xb30>
   123f4:	ldr	r2, [r4, #12]
   123f8:	ldr	r3, [r4, #8]
   123fc:	sub	r3, r3, #1
   12400:	add	r1, r2, r3
   12404:	ldrb	r3, [r2, r3]
   12408:	cmp	r3, #0
   1240c:	beq	12510 <__assert_fail@plt+0xb70>
   12410:	ldrb	r3, [r1, #1]
   12414:	cmp	r3, #0
   12418:	bne	1252c <__assert_fail@plt+0xb8c>
   1241c:	ldrb	r3, [r1, #2]
   12420:	cmp	r3, #0
   12424:	streq	r2, [r4, #20]
   12428:	moveq	r0, #1
   1242c:	bne	12548 <__assert_fail@plt+0xba8>
   12430:	add	sp, sp, #12
   12434:	ldrd	r4, [sp]
   12438:	ldrd	r6, [sp, #8]
   1243c:	add	sp, sp, #16
   12440:	pop	{pc}		; (ldr pc, [sp], #4)
   12444:	ldr	r6, [r0, #24]
   12448:	mov	r0, r6
   1244c:	bl	11838 <fgetc@plt>
   12450:	sxtb	r0, r0
   12454:	lsl	r5, r0, #8
   12458:	mov	r0, r6
   1245c:	bl	11838 <fgetc@plt>
   12460:	uxtb	r0, r0
   12464:	orr	r5, r5, r0
   12468:	ldr	r0, [r4, #4]
   1246c:	add	r5, r0, r5
   12470:	str	r5, [r4, #4]
   12474:	b	12330 <__assert_fail@plt+0x990>
   12478:	mov	r2, #5
   1247c:	movw	r1, #53052	; 0xcf3c
   12480:	movt	r1, #2
   12484:	mov	r0, #0
   12488:	bl	11628 <dcgettext@plt>
   1248c:	mov	r5, r0
   12490:	ldr	r2, [r4, #28]
   12494:	mov	r1, #8
   12498:	mov	r0, #0
   1249c:	bl	1b094 <__assert_fail@plt+0x96f4>
   124a0:	mov	r3, r0
   124a4:	mov	r2, r5
   124a8:	mov	r1, #0
   124ac:	mov	r0, #1
   124b0:	bl	116d0 <error@plt>
   124b4:	ldr	r3, [pc, #184]	; 12574 <__assert_fail@plt+0xbd4>
   124b8:	mov	r2, #245	; 0xf5
   124bc:	movw	r1, #53024	; 0xcf20
   124c0:	movt	r1, #2
   124c4:	movw	r0, #53096	; 0xcf68
   124c8:	movt	r0, #2
   124cc:	bl	119a0 <__assert_fail@plt>
   124d0:	mov	r2, #5
   124d4:	movw	r1, #53052	; 0xcf3c
   124d8:	movt	r1, #2
   124dc:	mov	r0, #0
   124e0:	bl	11628 <dcgettext@plt>
   124e4:	mov	r5, r0
   124e8:	ldr	r2, [r4, #28]
   124ec:	mov	r1, #8
   124f0:	mov	r0, #0
   124f4:	bl	1b094 <__assert_fail@plt+0x96f4>
   124f8:	mov	r3, r0
   124fc:	mov	r2, r5
   12500:	mov	r1, #0
   12504:	mov	r0, #1
   12508:	bl	116d0 <error@plt>
   1250c:	b	123f4 <__assert_fail@plt+0xa54>
   12510:	ldr	r3, [pc, #96]	; 12578 <__assert_fail@plt+0xbd8>
   12514:	mov	r2, #568	; 0x238
   12518:	movw	r1, #53024	; 0xcf20
   1251c:	movt	r1, #2
   12520:	movw	r0, #53108	; 0xcf74
   12524:	movt	r0, #2
   12528:	bl	119a0 <__assert_fail@plt>
   1252c:	ldr	r3, [pc, #68]	; 12578 <__assert_fail@plt+0xbd8>
   12530:	movw	r2, #569	; 0x239
   12534:	movw	r1, #53024	; 0xcf20
   12538:	movt	r1, #2
   1253c:	movw	r0, #53124	; 0xcf84
   12540:	movt	r0, #2
   12544:	bl	119a0 <__assert_fail@plt>
   12548:	ldr	r3, [pc, #40]	; 12578 <__assert_fail@plt+0xbd8>
   1254c:	movw	r2, #570	; 0x23a
   12550:	movw	r1, #53024	; 0xcf20
   12554:	movt	r1, #2
   12558:	movw	r0, #53140	; 0xcf94
   1255c:	movt	r0, #2
   12560:	bl	119a0 <__assert_fail@plt>
   12564:	mov	r0, #8
   12568:	b	12430 <__assert_fail@plt+0xa90>
   1256c:	mov	r0, #8
   12570:	b	12430 <__assert_fail@plt+0xa90>
   12574:	andeq	ip, r2, r8, asr fp
   12578:	andeq	ip, r2, r8, ror #22
   1257c:	str	r4, [sp, #-8]!
   12580:	str	lr, [sp, #4]
   12584:	mov	r4, r0
   12588:	mvn	r3, r1
   1258c:	cmp	r3, r2
   12590:	bcc	125b0 <__assert_fail@plt+0xc10>
   12594:	add	r2, r1, r2
   12598:	ldr	r3, [r0, #16]
   1259c:	cmp	r3, r2
   125a0:	bcc	125d8 <__assert_fail@plt+0xc38>
   125a4:	ldr	r4, [sp]
   125a8:	add	sp, sp, #4
   125ac:	pop	{pc}		; (ldr pc, [sp], #4)
   125b0:	mov	r2, #5
   125b4:	movw	r1, #53156	; 0xcfa4
   125b8:	movt	r1, #2
   125bc:	mov	r0, #0
   125c0:	bl	11628 <dcgettext@plt>
   125c4:	ldr	r3, [r4, #28]
   125c8:	mov	r2, r0
   125cc:	mov	r1, #0
   125d0:	mov	r0, #1
   125d4:	bl	116d0 <error@plt>
   125d8:	mov	r1, r0
   125dc:	str	r2, [r1, #16]!
   125e0:	mov	r2, #1
   125e4:	ldr	r0, [r0, #12]
   125e8:	bl	1bbc8 <__assert_fail@plt+0xa228>
   125ec:	str	r0, [r4, #12]
   125f0:	b	125a4 <__assert_fail@plt+0xc04>
   125f4:	ldr	r3, [r0]
   125f8:	cmn	r3, #1
   125fc:	beq	127ac <__assert_fail@plt+0xe0c>
   12600:	strd	r4, [sp, #-24]!	; 0xffffffe8
   12604:	strd	r6, [sp, #8]
   12608:	str	r8, [sp, #16]
   1260c:	str	lr, [sp, #20]
   12610:	mov	r4, r0
   12614:	cmp	r3, #30
   12618:	beq	12644 <__assert_fail@plt+0xca4>
   1261c:	sub	r3, r3, #14
   12620:	ldr	r2, [r0, #4]
   12624:	add	r3, r3, r2
   12628:	str	r3, [r0, #4]
   1262c:	cmp	r3, #0
   12630:	blt	126c8 <__assert_fail@plt+0xd28>
   12634:	ldr	r5, [r4, #4]
   12638:	mov	r7, #2
   1263c:	mov	r6, #1
   12640:	b	1272c <__assert_fail@plt+0xd8c>
   12644:	ldr	r3, [r0, #4]
   12648:	sub	r2, r3, #14
   1264c:	str	r2, [r0, #4]
   12650:	rsb	r5, r3, #14
   12654:	cmp	r2, #0
   12658:	ldrge	r3, [r0, #8]
   1265c:	subge	r2, r3, r2
   12660:	ldrlt	r2, [r0, #8]
   12664:	add	r3, r0, #32
   12668:	ldr	r1, [r0, #28]
   1266c:	ldr	r0, [r0, #24]
   12670:	bl	14234 <__assert_fail@plt+0x2894>
   12674:	cmp	r5, r0
   12678:	bgt	126ac <__assert_fail@plt+0xd0c>
   1267c:	ldr	r3, [r4, #4]
   12680:	add	r0, r0, r3
   12684:	str	r0, [r4, #4]
   12688:	cmp	r0, #0
   1268c:	bge	12634 <__assert_fail@plt+0xc94>
   12690:	ldr	r3, [pc, #284]	; 127b4 <__assert_fail@plt+0xe14>
   12694:	mov	r2, #480	; 0x1e0
   12698:	movw	r1, #53024	; 0xcf20
   1269c:	movt	r1, #2
   126a0:	movw	r0, #53244	; 0xcffc
   126a4:	movt	r0, #2
   126a8:	bl	119a0 <__assert_fail@plt>
   126ac:	ldr	r3, [pc, #256]	; 127b4 <__assert_fail@plt+0xe14>
   126b0:	movw	r2, #478	; 0x1de
   126b4:	movw	r1, #53024	; 0xcf20
   126b8:	movt	r1, #2
   126bc:	movw	r0, #53228	; 0xcfec
   126c0:	movt	r0, #2
   126c4:	bl	119a0 <__assert_fail@plt>
   126c8:	ldr	r3, [pc, #228]	; 127b4 <__assert_fail@plt+0xe14>
   126cc:	movw	r2, #485	; 0x1e5
   126d0:	movw	r1, #53024	; 0xcf20
   126d4:	movt	r1, #2
   126d8:	movw	r0, #53244	; 0xcffc
   126dc:	movt	r0, #2
   126e0:	bl	119a0 <__assert_fail@plt>
   126e4:	mov	r2, r7
   126e8:	mov	r1, r5
   126ec:	mov	r0, r4
   126f0:	bl	1257c <__assert_fail@plt+0xbdc>
   126f4:	ldr	r3, [r4]
   126f8:	and	r3, r3, #127	; 0x7f
   126fc:	mov	r2, r4
   12700:	str	r3, [r2], r3
   12704:	add	r3, r5, #1
   12708:	ldrb	r1, [r2, #36]	; 0x24
   1270c:	ldr	r2, [r4, #12]
   12710:	strb	r1, [r2, r5]
   12714:	ldr	r2, [r4]
   12718:	add	r2, r4, r2
   1271c:	ldrb	r1, [r2, #164]	; 0xa4
   12720:	ldr	r2, [r4, #12]
   12724:	strb	r1, [r2, r3]
   12728:	add	r5, r5, #2
   1272c:	ldr	r0, [r4, #24]
   12730:	bl	11970 <getc@plt>
   12734:	str	r0, [r4]
   12738:	cmp	r0, #30
   1273c:	ble	1276c <__assert_fail@plt+0xdcc>
   12740:	cmp	r0, #127	; 0x7f
   12744:	bgt	126e4 <__assert_fail@plt+0xd44>
   12748:	mov	r2, r6
   1274c:	mov	r1, r5
   12750:	mov	r0, r4
   12754:	bl	1257c <__assert_fail@plt+0xbdc>
   12758:	ldr	r3, [r4, #12]
   1275c:	ldr	r2, [r4]
   12760:	strb	r2, [r3, r5]
   12764:	add	r5, r5, #1
   12768:	b	1272c <__assert_fail@plt+0xd8c>
   1276c:	mov	r2, #1
   12770:	mov	r1, r5
   12774:	mov	r0, r4
   12778:	bl	1257c <__assert_fail@plt+0xbdc>
   1277c:	ldr	r3, [r4, #12]
   12780:	mov	r2, #0
   12784:	strb	r2, [r3, r5]
   12788:	str	r5, [r4, #8]
   1278c:	ldr	r3, [r4, #12]
   12790:	str	r3, [r4, #20]
   12794:	mov	r0, #1
   12798:	ldrd	r4, [sp]
   1279c:	ldrd	r6, [sp, #8]
   127a0:	ldr	r8, [sp, #16]
   127a4:	add	sp, sp, #20
   127a8:	pop	{pc}		; (ldr pc, [sp], #4)
   127ac:	mov	r0, #8
   127b0:	bx	lr
   127b4:	andeq	ip, r2, r0, lsl #23
   127b8:	strd	r4, [sp, #-36]!	; 0xffffffdc
   127bc:	strd	r6, [sp, #8]
   127c0:	strd	r8, [sp, #16]
   127c4:	strd	sl, [sp, #24]
   127c8:	str	lr, [sp, #32]
   127cc:	vpush	{d8-d10}
   127d0:	sub	sp, sp, #3168	; 0xc60
   127d4:	sub	sp, sp, #4
   127d8:	str	r0, [sp, #32]
   127dc:	str	r1, [sp, #36]	; 0x24
   127e0:	str	r2, [sp, #112]	; 0x70
   127e4:	ldr	r0, [r1]
   127e8:	cmp	r0, #0
   127ec:	movweq	r0, #53328	; 0xd050
   127f0:	movteq	r0, #2
   127f4:	bl	19114 <__assert_fail@plt+0x7774>
   127f8:	movw	r1, #54652	; 0xd57c
   127fc:	movt	r1, #2
   12800:	mov	r0, #6
   12804:	bl	11898 <setlocale@plt>
   12808:	movw	r4, #55676	; 0xd97c
   1280c:	movt	r4, #2
   12810:	movw	r1, #53336	; 0xd058
   12814:	movt	r1, #2
   12818:	mov	r0, r4
   1281c:	bl	11910 <bindtextdomain@plt>
   12820:	mov	r0, r4
   12824:	bl	11640 <textdomain@plt>
   12828:	mov	r0, #0
   1282c:	bl	1ac68 <__assert_fail@plt+0x92c8>
   12830:	movw	r3, #61992	; 0xf228
   12834:	movt	r3, #3
   12838:	str	r0, [r3, #8]
   1283c:	movw	r0, #19312	; 0x4b70
   12840:	movt	r0, #1
   12844:	bl	2cae4 <__assert_fail@plt+0x1b144>
   12848:	cmp	r0, #0
   1284c:	bne	12c5c <__assert_fail@plt+0x12bc>
   12850:	movw	r0, #7468	; 0x1d2c
   12854:	movt	r0, #1
   12858:	bl	2cae4 <__assert_fail@plt+0x1b144>
   1285c:	subs	r3, r0, #0
   12860:	str	r3, [sp, #64]	; 0x40
   12864:	bne	12c5c <__assert_fail@plt+0x12bc>
   12868:	movw	r4, #61992	; 0xf228
   1286c:	movt	r4, #3
   12870:	mov	r2, #0
   12874:	mov	r3, #0
   12878:	strd	r2, [r4, #24]
   1287c:	strd	r2, [r4, #32]
   12880:	mov	r3, #1
   12884:	strb	r3, [r4, #40]	; 0x28
   12888:	movw	r0, #53396	; 0xd094
   1288c:	movt	r0, #2
   12890:	bl	116f4 <getenv@plt>
   12894:	str	r0, [sp, #48]	; 0x30
   12898:	mov	r3, #0
   1289c:	str	r3, [r4, #44]	; 0x2c
   128a0:	ldr	fp, [sp, #64]	; 0x40
   128a4:	str	fp, [sp, #116]	; 0x74
   128a8:	str	fp, [sp, #52]	; 0x34
   128ac:	mov	r9, fp
   128b0:	str	fp, [sp, #44]	; 0x2c
   128b4:	str	fp, [sp, #72]	; 0x48
   128b8:	str	fp, [sp, #84]	; 0x54
   128bc:	str	fp, [sp, #124]	; 0x7c
   128c0:	str	fp, [sp, #88]	; 0x58
   128c4:	ldr	r4, [pc, #2812]	; 133c8 <__assert_fail@plt+0x1a28>
   128c8:	movw	r5, #61992	; 0xf228
   128cc:	movt	r5, #3
   128d0:	add	r7, r5, #24
   128d4:	mvn	r3, #0
   128d8:	str	r3, [sp, #1856]	; 0x740
   128dc:	add	r3, sp, #1856	; 0x740
   128e0:	str	r3, [sp]
   128e4:	mov	r3, r4
   128e8:	movw	r2, #53408	; 0xd0a0
   128ec:	movt	r2, #2
   128f0:	ldr	r1, [sp, #36]	; 0x24
   128f4:	ldr	r0, [sp, #32]
   128f8:	bl	1176c <getopt_long@plt>
   128fc:	cmn	r0, #1
   12900:	beq	12f50 <__assert_fail@plt+0x15b0>
   12904:	sub	r0, r0, #48	; 0x30
   12908:	cmp	r0, #209	; 0xd1
   1290c:	ldrls	pc, [pc, r0, lsl #2]
   12910:	b	12f3c <__assert_fail@plt+0x159c>
   12914:	muleq	r1, r4, ip
   12918:	andeq	r2, r1, ip, lsr pc
   1291c:	andeq	r2, r1, ip, lsr pc
   12920:	andeq	r2, r1, ip, lsr pc
   12924:	andeq	r2, r1, ip, lsr pc
   12928:	andeq	r2, r1, ip, lsr pc
   1292c:	andeq	r2, r1, ip, lsr pc
   12930:	andeq	r2, r1, ip, lsr pc
   12934:	andeq	r2, r1, ip, lsr pc
   12938:	andeq	r2, r1, ip, lsr pc
   1293c:	andeq	r2, r1, ip, lsr pc
   12940:	andeq	r2, r1, ip, lsr pc
   12944:	andeq	r2, r1, ip, lsr pc
   12948:	andeq	r2, r1, ip, lsr pc
   1294c:	andeq	r2, r1, ip, lsr pc
   12950:	andeq	r2, r1, ip, lsr pc
   12954:	andeq	r2, r1, ip, lsr pc
   12958:	andeq	r2, r1, r8, lsl #25
   1295c:	andeq	r2, r1, ip, lsr pc
   12960:	andeq	r2, r1, ip, lsr pc
   12964:	andeq	r2, r1, ip, lsr pc
   12968:	strdeq	r2, [r1], -r8
   1296c:	andeq	r2, r1, ip, lsr pc
   12970:	andeq	r2, r1, ip, lsr pc
   12974:	andeq	r2, r1, r8, asr #29
   12978:	andeq	r2, r1, ip, lsr pc
   1297c:	andeq	r2, r1, ip, lsr pc
   12980:	andeq	r2, r1, ip, lsr pc
   12984:			; <UNDEFINED> instruction: 0x00012eb4
   12988:	andeq	r2, r1, ip, lsr pc
   1298c:	andeq	r2, r1, ip, lsr pc
   12990:	andeq	r2, r1, ip, lsr pc
   12994:	andeq	r2, r1, r8, asr #29
   12998:	andeq	r2, r1, ip, lsr pc
   1299c:	andeq	r2, r1, ip, lsr pc
   129a0:	andeq	r2, r1, r8, lsr #29
   129a4:	andeq	r2, r1, ip, lsr pc
   129a8:	andeq	r2, r1, ip, lsr pc
   129ac:	andeq	r2, r1, ip, lsr pc
   129b0:	andeq	r2, r1, ip, lsr pc
   129b4:	andeq	r2, r1, ip, lsr pc
   129b8:	andeq	r2, r1, ip, lsr pc
   129bc:	andeq	r2, r1, ip, lsr pc
   129c0:	andeq	r2, r1, ip, lsr pc
   129c4:	andeq	r2, r1, ip, lsr pc
   129c8:	andeq	r2, r1, ip, lsr pc
   129cc:	andeq	r2, r1, ip, lsr pc
   129d0:	andeq	r2, r1, ip, lsr pc
   129d4:	andeq	r2, r1, ip, lsr pc
   129d8:	andeq	r2, r1, ip, lsr pc
   129dc:	andeq	r2, r1, r4, asr #30
   129e0:	andeq	r2, r1, ip, lsr #25
   129e4:			; <UNDEFINED> instruction: 0x00012cb8
   129e8:	andeq	r2, r1, ip, ror #25
   129ec:	andeq	r2, r1, ip, lsr pc
   129f0:	andeq	r2, r1, ip, lsr pc
   129f4:	andeq	r2, r1, ip, lsl #26
   129f8:	andeq	r2, r1, r4, lsl #26
   129fc:	andeq	r2, r1, ip, lsr pc
   12a00:	andeq	r2, r1, ip, lsr pc
   12a04:	ldrdeq	r2, [r1], -ip
   12a08:	ldrdeq	r2, [r1], -r4
   12a0c:	andeq	r2, r1, ip, lsr pc
   12a10:	andeq	r2, r1, ip, lsr pc
   12a14:	andeq	r2, r1, r8, lsr lr
   12a18:	andeq	r2, r1, ip, lsr pc
   12a1c:	andeq	r2, r1, r4, lsl #29
   12a20:	ldrdeq	r2, [r1], -r4
   12a24:	andeq	r2, r1, ip, lsr pc
   12a28:	andeq	r2, r1, ip, lsr pc
   12a2c:	andeq	r2, r1, r4, asr #28
   12a30:	andeq	r2, r1, r8, ror lr
   12a34:	andeq	r2, r1, ip, lsr pc
   12a38:	andeq	r2, r1, ip, lsr pc
   12a3c:	andeq	r2, r1, ip, lsr pc
   12a40:	andeq	r2, r1, ip, lsr pc
   12a44:	andeq	r2, r1, ip, lsr pc
   12a48:	andeq	r2, r1, ip, lsr pc
   12a4c:	andeq	r2, r1, ip, lsr pc
   12a50:	andeq	r2, r1, ip, lsr pc
   12a54:	andeq	r2, r1, ip, lsr pc
   12a58:	andeq	r2, r1, ip, lsr pc
   12a5c:	andeq	r2, r1, ip, lsr pc
   12a60:	andeq	r2, r1, ip, lsr pc
   12a64:	andeq	r2, r1, ip, lsr pc
   12a68:	andeq	r2, r1, ip, lsr pc
   12a6c:	andeq	r2, r1, ip, lsr pc
   12a70:	andeq	r2, r1, ip, lsr pc
   12a74:	andeq	r2, r1, ip, lsr pc
   12a78:	andeq	r2, r1, ip, lsr pc
   12a7c:	andeq	r2, r1, ip, lsr pc
   12a80:	andeq	r2, r1, ip, lsr pc
   12a84:	andeq	r2, r1, ip, lsr pc
   12a88:	andeq	r2, r1, ip, lsr pc
   12a8c:	andeq	r2, r1, ip, lsr pc
   12a90:	andeq	r2, r1, ip, lsr pc
   12a94:	andeq	r2, r1, ip, lsr pc
   12a98:	andeq	r2, r1, ip, lsr pc
   12a9c:	andeq	r2, r1, ip, lsr pc
   12aa0:	andeq	r2, r1, ip, lsr pc
   12aa4:	andeq	r2, r1, ip, lsr pc
   12aa8:	andeq	r2, r1, ip, lsr pc
   12aac:	andeq	r2, r1, ip, lsr pc
   12ab0:	andeq	r2, r1, ip, lsr pc
   12ab4:	andeq	r2, r1, ip, lsr pc
   12ab8:	andeq	r2, r1, ip, lsr pc
   12abc:	andeq	r2, r1, ip, lsr pc
   12ac0:	andeq	r2, r1, ip, lsr pc
   12ac4:	andeq	r2, r1, ip, lsr pc
   12ac8:	andeq	r2, r1, ip, lsr pc
   12acc:	andeq	r2, r1, ip, lsr pc
   12ad0:	andeq	r2, r1, ip, lsr pc
   12ad4:	andeq	r2, r1, ip, lsr pc
   12ad8:	andeq	r2, r1, ip, lsr pc
   12adc:	andeq	r2, r1, ip, lsr pc
   12ae0:	andeq	r2, r1, ip, lsr pc
   12ae4:	andeq	r2, r1, ip, lsr pc
   12ae8:	andeq	r2, r1, ip, lsr pc
   12aec:	andeq	r2, r1, ip, lsr pc
   12af0:	andeq	r2, r1, ip, lsr pc
   12af4:	andeq	r2, r1, ip, lsr pc
   12af8:	andeq	r2, r1, ip, lsr pc
   12afc:	andeq	r2, r1, ip, lsr pc
   12b00:	andeq	r2, r1, ip, lsr pc
   12b04:	andeq	r2, r1, ip, lsr pc
   12b08:	andeq	r2, r1, ip, lsr pc
   12b0c:	andeq	r2, r1, ip, lsr pc
   12b10:	andeq	r2, r1, ip, lsr pc
   12b14:	andeq	r2, r1, ip, lsr pc
   12b18:	andeq	r2, r1, ip, lsr pc
   12b1c:	andeq	r2, r1, ip, lsr pc
   12b20:	andeq	r2, r1, ip, lsr pc
   12b24:	andeq	r2, r1, ip, lsr pc
   12b28:	andeq	r2, r1, ip, lsr pc
   12b2c:	andeq	r2, r1, ip, lsr pc
   12b30:	andeq	r2, r1, ip, lsr pc
   12b34:	andeq	r2, r1, ip, lsr pc
   12b38:	andeq	r2, r1, ip, lsr pc
   12b3c:	andeq	r2, r1, ip, lsr pc
   12b40:	andeq	r2, r1, ip, lsr pc
   12b44:	andeq	r2, r1, ip, lsr pc
   12b48:	andeq	r2, r1, ip, lsr pc
   12b4c:	andeq	r2, r1, ip, lsr pc
   12b50:	andeq	r2, r1, ip, lsr pc
   12b54:	andeq	r2, r1, ip, lsr pc
   12b58:	andeq	r2, r1, ip, lsr pc
   12b5c:	andeq	r2, r1, ip, lsr pc
   12b60:	andeq	r2, r1, ip, lsr pc
   12b64:	andeq	r2, r1, ip, lsr pc
   12b68:	andeq	r2, r1, ip, lsr pc
   12b6c:	andeq	r2, r1, ip, lsr pc
   12b70:	andeq	r2, r1, ip, lsr pc
   12b74:	andeq	r2, r1, ip, lsr pc
   12b78:	andeq	r2, r1, ip, lsr pc
   12b7c:	andeq	r2, r1, ip, lsr pc
   12b80:	andeq	r2, r1, ip, lsr pc
   12b84:	andeq	r2, r1, ip, lsr pc
   12b88:	andeq	r2, r1, ip, lsr pc
   12b8c:	andeq	r2, r1, ip, lsr pc
   12b90:	andeq	r2, r1, ip, lsr pc
   12b94:	andeq	r2, r1, ip, lsr pc
   12b98:	andeq	r2, r1, ip, lsr pc
   12b9c:	andeq	r2, r1, ip, lsr pc
   12ba0:	andeq	r2, r1, ip, lsr pc
   12ba4:	andeq	r2, r1, ip, lsr pc
   12ba8:	andeq	r2, r1, ip, lsr pc
   12bac:	andeq	r2, r1, ip, lsr pc
   12bb0:	andeq	r2, r1, ip, lsr pc
   12bb4:	andeq	r2, r1, ip, lsr pc
   12bb8:	andeq	r2, r1, ip, lsr pc
   12bbc:	andeq	r2, r1, ip, lsr pc
   12bc0:	andeq	r2, r1, ip, lsr pc
   12bc4:	andeq	r2, r1, ip, lsr pc
   12bc8:	andeq	r2, r1, ip, lsr pc
   12bcc:	andeq	r2, r1, ip, lsr pc
   12bd0:	andeq	r2, r1, ip, lsr pc
   12bd4:	andeq	r2, r1, ip, lsr pc
   12bd8:	andeq	r2, r1, ip, lsr pc
   12bdc:	andeq	r2, r1, ip, lsr pc
   12be0:	andeq	r2, r1, ip, lsr pc
   12be4:	andeq	r2, r1, ip, lsr pc
   12be8:	andeq	r2, r1, ip, lsr pc
   12bec:	andeq	r2, r1, ip, lsr pc
   12bf0:	andeq	r2, r1, ip, lsr pc
   12bf4:	andeq	r2, r1, ip, lsr pc
   12bf8:	andeq	r2, r1, ip, lsr pc
   12bfc:	andeq	r2, r1, ip, lsr pc
   12c00:	andeq	r2, r1, ip, lsr pc
   12c04:	andeq	r2, r1, ip, lsr pc
   12c08:	andeq	r2, r1, ip, lsr pc
   12c0c:	andeq	r2, r1, ip, lsr pc
   12c10:	andeq	r2, r1, ip, lsr pc
   12c14:	andeq	r2, r1, ip, lsr pc
   12c18:	andeq	r2, r1, ip, lsr pc
   12c1c:	andeq	r2, r1, ip, lsr pc
   12c20:	andeq	r2, r1, ip, lsr pc
   12c24:	andeq	r2, r1, ip, lsr pc
   12c28:	andeq	r2, r1, ip, lsr pc
   12c2c:	andeq	r2, r1, ip, lsr pc
   12c30:	andeq	r2, r1, ip, lsr pc
   12c34:	andeq	r2, r1, ip, lsr pc
   12c38:	andeq	r2, r1, ip, lsr pc
   12c3c:	andeq	r2, r1, ip, lsr pc
   12c40:	andeq	r2, r1, ip, lsr pc
   12c44:	andeq	r2, r1, ip, lsr pc
   12c48:	andeq	r2, r1, ip, lsr pc
   12c4c:	andeq	r2, r1, ip, lsr pc
   12c50:	andeq	r2, r1, ip, lsr pc
   12c54:	muleq	r1, r0, lr
   12c58:	andeq	r2, r1, r4, lsl sp
   12c5c:	bl	117d8 <__errno_location@plt>
   12c60:	ldr	r4, [r0]
   12c64:	mov	r2, #5
   12c68:	movw	r1, #53360	; 0xd070
   12c6c:	movt	r1, #2
   12c70:	mov	r0, #0
   12c74:	bl	11628 <dcgettext@plt>
   12c78:	mov	r2, r0
   12c7c:	mov	r1, r4
   12c80:	mov	r0, #1
   12c84:	bl	116d0 <error@plt>
   12c88:	mov	r3, #1
   12c8c:	str	r3, [sp, #116]	; 0x74
   12c90:	b	128d4 <__assert_fail@plt+0xf34>
   12c94:	movw	r3, #61868	; 0xf1ac
   12c98:	movt	r3, #3
   12c9c:	mov	r2, #0
   12ca0:	str	r2, [r3]
   12ca4:	strb	r2, [r5, #40]	; 0x28
   12ca8:	b	128d4 <__assert_fail@plt+0xf34>
   12cac:	mov	r3, #1
   12cb0:	str	r3, [sp, #124]	; 0x7c
   12cb4:	b	128d4 <__assert_fail@plt+0xf34>
   12cb8:	movw	r3, #61984	; 0xf220
   12cbc:	movt	r3, #3
   12cc0:	ldr	r3, [r3]
   12cc4:	str	r3, [sp, #48]	; 0x30
   12cc8:	cmp	r3, #0
   12ccc:	bne	128d4 <__assert_fail@plt+0xf34>
   12cd0:	ldr	r3, [pc, #1780]	; 133cc <__assert_fail@plt+0x1a2c>
   12cd4:	movw	r2, #1613	; 0x64d
   12cd8:	movw	r1, #53024	; 0xcf20
   12cdc:	movt	r1, #2
   12ce0:	movw	r0, #53432	; 0xd0b8
   12ce4:	movt	r0, #2
   12ce8:	bl	119a0 <__assert_fail@plt>
   12cec:	mov	r3, #1
   12cf0:	str	r3, [r5, #44]	; 0x2c
   12cf4:	b	128d4 <__assert_fail@plt+0xf34>
   12cf8:	mov	r3, #2
   12cfc:	str	r3, [r5, #44]	; 0x2c
   12d00:	b	128d4 <__assert_fail@plt+0xf34>
   12d04:	mov	fp, #1
   12d08:	b	128d4 <__assert_fail@plt+0xf34>
   12d0c:	mov	r0, #0
   12d10:	bl	11d50 <__assert_fail@plt+0x3b0>
   12d14:	movw	r3, #61984	; 0xf220
   12d18:	movt	r3, #3
   12d1c:	ldr	r6, [r3]
   12d20:	ldrb	r3, [r6]
   12d24:	cmp	r3, #0
   12d28:	beq	12d8c <__assert_fail@plt+0x13ec>
   12d2c:	bl	117d8 <__errno_location@plt>
   12d30:	mov	r8, r0
   12d34:	mov	r3, #0
   12d38:	str	r3, [r0]
   12d3c:	mov	r2, #10
   12d40:	add	r1, sp, #2496	; 0x9c0
   12d44:	add	r1, r1, #12
   12d48:	mov	r0, r6
   12d4c:	bl	1179c <strtoul@plt>
   12d50:	cmn	r0, #1
   12d54:	beq	12db0 <__assert_fail@plt+0x1410>
   12d58:	cmp	r0, #0
   12d5c:	bne	12d6c <__assert_fail@plt+0x13cc>
   12d60:	ldr	r3, [r8]
   12d64:	cmp	r3, #22
   12d68:	beq	12dbc <__assert_fail@plt+0x141c>
   12d6c:	ldr	r3, [sp, #2508]	; 0x9cc
   12d70:	ldrb	r3, [r3]
   12d74:	cmp	r3, #0
   12d78:	bne	12dfc <__assert_fail@plt+0x145c>
   12d7c:	movw	r3, #61868	; 0xf1ac
   12d80:	movt	r3, #3
   12d84:	str	r0, [r3, #4]
   12d88:	b	128d4 <__assert_fail@plt+0xf34>
   12d8c:	mov	r2, #5
   12d90:	movw	r1, #53448	; 0xd0c8
   12d94:	movt	r1, #2
   12d98:	mov	r0, #0
   12d9c:	bl	11628 <dcgettext@plt>
   12da0:	mov	r2, r0
   12da4:	mov	r1, #0
   12da8:	mov	r0, #1
   12dac:	bl	116d0 <error@plt>
   12db0:	ldr	r3, [r8]
   12db4:	cmp	r3, #34	; 0x22
   12db8:	bne	12d6c <__assert_fail@plt+0x13cc>
   12dbc:	ldr	r4, [r8]
   12dc0:	mov	r2, #5
   12dc4:	movw	r1, #53512	; 0xd108
   12dc8:	movt	r1, #2
   12dcc:	mov	r0, #0
   12dd0:	bl	11628 <dcgettext@plt>
   12dd4:	mov	r5, r0
   12dd8:	mov	r2, r6
   12ddc:	mov	r1, #8
   12de0:	mov	r0, #0
   12de4:	bl	1b094 <__assert_fail@plt+0x96f4>
   12de8:	mov	r3, r0
   12dec:	mov	r2, r5
   12df0:	mov	r1, r4
   12df4:	mov	r0, #1
   12df8:	bl	116d0 <error@plt>
   12dfc:	mov	r2, #5
   12e00:	movw	r1, #53512	; 0xd108
   12e04:	movt	r1, #2
   12e08:	mov	r0, #0
   12e0c:	bl	11628 <dcgettext@plt>
   12e10:	mov	r4, r0
   12e14:	mov	r2, r6
   12e18:	mov	r1, #8
   12e1c:	mov	r0, #0
   12e20:	bl	1b094 <__assert_fail@plt+0x96f4>
   12e24:	mov	r3, r0
   12e28:	mov	r2, r4
   12e2c:	mov	r1, #0
   12e30:	mov	r0, #1
   12e34:	bl	116d0 <error@plt>
   12e38:	mov	r3, #1
   12e3c:	str	r3, [sp, #88]	; 0x58
   12e40:	b	128d4 <__assert_fail@plt+0xf34>
   12e44:	movw	r0, #53328	; 0xd050
   12e48:	movt	r0, #2
   12e4c:	bl	1438c <__assert_fail@plt+0x29ec>
   12e50:	ldr	r0, [sp, #64]	; 0x40
   12e54:	add	sp, sp, #3168	; 0xc60
   12e58:	add	sp, sp, #4
   12e5c:	vpop	{d8-d10}
   12e60:	ldrd	r4, [sp]
   12e64:	ldrd	r6, [sp, #8]
   12e68:	ldrd	r8, [sp, #16]
   12e6c:	ldrd	sl, [sp, #24]
   12e70:	add	sp, sp, #32
   12e74:	pop	{pc}		; (ldr pc, [sp], #4)
   12e78:	ldr	r3, [sp, #64]	; 0x40
   12e7c:	str	r3, [sp, #84]	; 0x54
   12e80:	b	128d4 <__assert_fail@plt+0xf34>
   12e84:	mov	r3, #1
   12e88:	str	r3, [sp, #44]	; 0x2c
   12e8c:	b	128d4 <__assert_fail@plt+0xf34>
   12e90:	movw	r3, #61984	; 0xf220
   12e94:	movt	r3, #3
   12e98:	ldr	r0, [r3]
   12e9c:	bl	14728 <__assert_fail@plt+0x2d88>
   12ea0:	mov	r9, r0
   12ea4:	b	128d4 <__assert_fail@plt+0xf34>
   12ea8:	mov	r3, #1
   12eac:	str	r3, [sp, #52]	; 0x34
   12eb0:	b	128d4 <__assert_fail@plt+0xf34>
   12eb4:	movw	r3, #61868	; 0xf1ac
   12eb8:	movt	r3, #3
   12ebc:	mov	r2, #1
   12ec0:	str	r2, [r3, #8]
   12ec4:	b	128d4 <__assert_fail@plt+0xf34>
   12ec8:	movw	r3, #61868	; 0xf1ac
   12ecc:	movt	r3, #3
   12ed0:	mov	r2, #0
   12ed4:	str	r2, [r3, #8]
   12ed8:	b	128d4 <__assert_fail@plt+0xf34>
   12edc:	movw	r3, #61984	; 0xf220
   12ee0:	movt	r3, #3
   12ee4:	ldr	r0, [r3]
   12ee8:	str	r0, [sp, #2508]	; 0x9cc
   12eec:	mov	r3, #0
   12ef0:	str	r3, [sp]
   12ef4:	mov	r3, r7
   12ef8:	mov	r2, #10
   12efc:	add	r1, sp, #2496	; 0x9c0
   12f00:	add	r1, r1, #12
   12f04:	bl	1c0a0 <__assert_fail@plt+0xa700>
   12f08:	cmp	r0, #0
   12f0c:	bne	12f1c <__assert_fail@plt+0x157c>
   12f10:	mov	r3, #1
   12f14:	str	r3, [sp, #72]	; 0x48
   12f18:	b	128d4 <__assert_fail@plt+0xf34>
   12f1c:	movw	r3, #61984	; 0xf220
   12f20:	movt	r3, #3
   12f24:	ldr	r3, [r3]
   12f28:	str	r3, [sp]
   12f2c:	ldr	r3, [pc, #1172]	; 133c8 <__assert_fail@plt+0x1a28>
   12f30:	mov	r2, #108	; 0x6c
   12f34:	ldr	r1, [sp, #1856]	; 0x740
   12f38:	bl	1bed8 <__assert_fail@plt+0xa538>
   12f3c:	mov	r0, #1
   12f40:	bl	11d50 <__assert_fail@plt+0x3b0>
   12f44:	mov	r3, #1
   12f48:	str	r3, [sp, #84]	; 0x54
   12f4c:	b	128d4 <__assert_fail@plt+0xf34>
   12f50:	mov	sl, r0
   12f54:	ldr	r3, [sp, #112]	; 0x70
   12f58:	ldr	r2, [sp, #48]	; 0x30
   12f5c:	mvn	r3, r3
   12f60:	lsr	r3, r3, #31
   12f64:	cmp	r2, #0
   12f68:	moveq	r3, #0
   12f6c:	cmp	r3, #0
   12f70:	bne	13050 <__assert_fail@plt+0x16b0>
   12f74:	ldr	r3, [sp, #124]	; 0x7c
   12f78:	ldr	r2, [sp, #52]	; 0x34
   12f7c:	orrs	r3, r3, r2
   12f80:	beq	14038 <__assert_fail@plt+0x2698>
   12f84:	ldr	r3, [sp, #52]	; 0x34
   12f88:	cmp	r3, #0
   12f8c:	beq	12fb4 <__assert_fail@plt+0x1614>
   12f90:	movw	r3, #61968	; 0xf210
   12f94:	movt	r3, #3
   12f98:	ldr	r3, [r3]
   12f9c:	ldr	r2, [sp, #72]	; 0x48
   12fa0:	ldr	r1, [sp, #64]	; 0x40
   12fa4:	ldr	r0, [sp, #32]
   12fa8:	cmp	r3, r0
   12fac:	moveq	r2, r1
   12fb0:	str	r2, [sp, #72]	; 0x48
   12fb4:	mov	r0, #1
   12fb8:	bl	11934 <isatty@plt>
   12fbc:	movw	r3, #61992	; 0xf228
   12fc0:	movt	r3, #3
   12fc4:	cmp	r0, #1
   12fc8:	movne	r0, #0
   12fcc:	moveq	r0, #1
   12fd0:	strb	r0, [r3, #16]
   12fd4:	ldr	r0, [sp, #48]	; 0x30
   12fd8:	cmp	r0, #0
   12fdc:	beq	13004 <__assert_fail@plt+0x1664>
   12fe0:	add	r3, sp, #3152	; 0xc50
   12fe4:	add	r3, r3, #8
   12fe8:	str	r3, [sp]
   12fec:	add	r3, sp, #3152	; 0xc50
   12ff0:	add	r3, r3, #12
   12ff4:	mov	r2, #1
   12ff8:	movw	r1, #53592	; 0xd158
   12ffc:	movt	r1, #2
   13000:	bl	14980 <__assert_fail@plt+0x2fe0>
   13004:	orr	r3, r9, #4194304	; 0x400000
   13008:	cmp	fp, #0
   1300c:	movne	r9, r3
   13010:	str	r9, [sp, #28]
   13014:	mov	r3, #0
   13018:	str	r3, [sp, #136]	; 0x88
   1301c:	mov	r4, r3
   13020:	movw	r9, #61992	; 0xf228
   13024:	movt	r9, #3
   13028:	movw	r3, #51976	; 0xcb08
   1302c:	movt	r3, #2
   13030:	str	r3, [sp, #132]	; 0x84
   13034:	add	r3, r3, #520	; 0x208
   13038:	str	r3, [sp, #140]	; 0x8c
   1303c:	vldr	d9, [pc, #884]	; 133b8 <__assert_fail@plt+0x1a18>
   13040:	vldr	d10, [pc, #888]	; 133c0 <__assert_fail@plt+0x1a20>
   13044:	mov	r8, fp
   13048:	str	sl, [sp, #128]	; 0x80
   1304c:	b	13960 <__assert_fail@plt+0x1fc0>
   13050:	ldr	r0, [sp, #112]	; 0x70
   13054:	bl	1197c <close@plt>
   13058:	str	sl, [sp, #112]	; 0x70
   1305c:	b	12f74 <__assert_fail@plt+0x15d4>
   13060:	mov	r2, #5
   13064:	movw	r1, #53564	; 0xd13c
   13068:	movt	r1, #2
   1306c:	mov	r0, #0
   13070:	bl	11628 <dcgettext@plt>
   13074:	mov	r2, r0
   13078:	mov	r1, #0
   1307c:	mov	r0, r1
   13080:	bl	116d0 <error@plt>
   13084:	mov	r0, #1
   13088:	bl	11d50 <__assert_fail@plt+0x3b0>
   1308c:	ldr	r3, [sp, #3164]	; 0xc5c
   13090:	ldr	r2, [sp, #48]	; 0x30
   13094:	ldrb	r3, [r2, r3]
   13098:	cmp	r3, #45	; 0x2d
   1309c:	beq	130c4 <__assert_fail@plt+0x1724>
   130a0:	cmp	r3, #46	; 0x2e
   130a4:	beq	1311c <__assert_fail@plt+0x177c>
   130a8:	ldr	r0, [sp, #3164]	; 0xc5c
   130ac:	ldr	r3, [sp, #48]	; 0x30
   130b0:	add	r0, r3, r0
   130b4:	bl	115bc <strndup@plt>
   130b8:	str	r0, [sp, #80]	; 0x50
   130bc:	str	r0, [sp, #56]	; 0x38
   130c0:	b	139d4 <__assert_fail@plt+0x2034>
   130c4:	ldr	r3, [sp, #136]	; 0x88
   130c8:	cmp	r3, #0
   130cc:	bne	130f4 <__assert_fail@plt+0x1754>
   130d0:	ldr	r4, [sp, #64]	; 0x40
   130d4:	mov	r3, #1
   130d8:	str	r3, [sp, #136]	; 0x88
   130dc:	movw	r3, #53292	; 0xd02c
   130e0:	movt	r3, #2
   130e4:	str	r3, [sp, #56]	; 0x38
   130e8:	mov	r3, #0
   130ec:	str	r3, [sp, #80]	; 0x50
   130f0:	b	139e4 <__assert_fail@plt+0x2044>
   130f4:	mov	r2, #5
   130f8:	movw	r1, #53596	; 0xd15c
   130fc:	movt	r1, #2
   13100:	mov	r0, #0
   13104:	bl	11628 <dcgettext@plt>
   13108:	mov	r2, r0
   1310c:	mov	r1, #0
   13110:	mov	r0, r1
   13114:	bl	116d0 <error@plt>
   13118:	b	12e50 <__assert_fail@plt+0x14b0>
   1311c:	movw	r3, #53268	; 0xd014
   13120:	movt	r3, #2
   13124:	str	r3, [sp, #56]	; 0x38
   13128:	mov	r3, #0
   1312c:	str	r3, [sp, #80]	; 0x50
   13130:	b	139d4 <__assert_fail@plt+0x2034>
   13134:	bl	117d8 <__errno_location@plt>
   13138:	ldr	r4, [r0]
   1313c:	ldr	r2, [sp, #56]	; 0x38
   13140:	mov	r1, #8
   13144:	mov	r0, #0
   13148:	bl	1b094 <__assert_fail@plt+0x96f4>
   1314c:	mov	r3, r0
   13150:	movw	r2, #56384	; 0xdc40
   13154:	movt	r2, #2
   13158:	mov	r1, r4
   1315c:	mov	r0, #0
   13160:	bl	116d0 <error@plt>
   13164:	b	12e50 <__assert_fail@plt+0x14b0>
   13168:	ldr	r3, [sp, #112]	; 0x70
   1316c:	cmn	r3, #1
   13170:	beq	13f64 <__assert_fail@plt+0x25c4>
   13174:	ldr	r2, [r9, #96]	; 0x60
   13178:	str	r2, [sp, #56]	; 0x38
   1317c:	mov	r4, r3
   13180:	ldr	r3, [sp, #48]	; 0x30
   13184:	str	r3, [sp, #80]	; 0x50
   13188:	ldr	r3, [sp, #128]	; 0x80
   1318c:	str	r3, [sp, #112]	; 0x70
   13190:	b	139e4 <__assert_fail@plt+0x2044>
   13194:	ldr	r3, [sp, #200]	; 0xc8
   13198:	str	r3, [sp, #92]	; 0x5c
   1319c:	ldr	r3, [sp, #204]	; 0xcc
   131a0:	str	r3, [sp, #104]	; 0x68
   131a4:	ldr	r3, [sp, #232]	; 0xe8
   131a8:	str	r3, [sp, #144]	; 0x90
   131ac:	ldr	r3, [sp, #236]	; 0xec
   131b0:	str	r3, [sp, #148]	; 0x94
   131b4:	add	r0, sp, #2496	; 0x9c0
   131b8:	add	r0, r0, #12
   131bc:	bl	11610 <time@plt>
   131c0:	cmn	r0, #1
   131c4:	beq	13384 <__assert_fail@plt+0x19e4>
   131c8:	ldr	r1, [sp, #232]	; 0xe8
   131cc:	ldr	r0, [sp, #2508]	; 0x9cc
   131d0:	bl	11850 <difftime@plt>
   131d4:	vmov.f64	d8, d0
   131d8:	movw	r3, #61868	; 0xf1ac
   131dc:	movt	r3, #3
   131e0:	ldr	r2, [r3, #4]
   131e4:	movw	r3, #20864	; 0x5180
   131e8:	movt	r3, #1
   131ec:	mul	r3, r3, r2
   131f0:	vmov	s15, r3
   131f4:	vcvt.f64.u32	d7, s15
   131f8:	vcmpe.f64	d0, d7
   131fc:	vmrs	APSR_nzcv, fpscr
   13200:	bgt	133d8 <__assert_fail@plt+0x1a38>
   13204:	movw	r1, #55620	; 0xd944
   13208:	movt	r1, #2
   1320c:	mov	r0, r4
   13210:	bl	114fc <fdopen@plt>
   13214:	subs	r3, r0, #0
   13218:	str	r3, [sp, #60]	; 0x3c
   1321c:	beq	13464 <__assert_fail@plt+0x1ac4>
   13220:	movw	r3, #61968	; 0xf210
   13224:	movt	r3, #3
   13228:	ldr	r7, [r3]
   1322c:	ldr	r3, [sp, #32]
   13230:	sub	fp, r3, r7
   13234:	add	r3, sp, #144	; 0x90
   13238:	str	r3, [sp, #96]	; 0x60
   1323c:	ldr	r3, [r9, #44]	; 0x2c
   13240:	str	r3, [sp, #76]	; 0x4c
   13244:	mov	r3, #0
   13248:	str	r3, [sp, #292]	; 0x124
   1324c:	str	r3, [sp, #264]	; 0x108
   13250:	str	r3, [sp, #268]	; 0x10c
   13254:	ldr	r2, [sp, #56]	; 0x38
   13258:	str	r2, [sp, #288]	; 0x120
   1325c:	ldr	r2, [sp, #60]	; 0x3c
   13260:	str	r2, [sp, #284]	; 0x11c
   13264:	str	r3, [r9]
   13268:	str	r3, [r9, #12]
   1326c:	str	r3, [r9, #4]
   13270:	strb	r3, [r9, #100]	; 0x64
   13274:	mov	r0, #128	; 0x80
   13278:	str	r0, [sp, #276]	; 0x114
   1327c:	bl	1ba00 <__assert_fail@plt+0xa060>
   13280:	str	r0, [sp, #272]	; 0x110
   13284:	ldr	r3, [sp, #284]	; 0x11c
   13288:	mov	r2, #2
   1328c:	mov	r1, #1
   13290:	bl	116ac <fread@plt>
   13294:	mov	r4, r0
   13298:	cmp	r0, #2
   1329c:	bhi	13498 <__assert_fail@plt+0x1af8>
   132a0:	cmp	r0, #1
   132a4:	bls	13fc0 <__assert_fail@plt+0x2620>
   132a8:	ldr	r5, [sp, #272]	; 0x110
   132ac:	ldrb	r3, [r5, #1]
   132b0:	cmp	r3, #0
   132b4:	bne	13fc0 <__assert_fail@plt+0x2620>
   132b8:	bl	11778 <__ctype_b_loc@plt>
   132bc:	ldrb	r3, [r5]
   132c0:	ldr	r1, [r0]
   132c4:	lsl	r2, r3, #1
   132c8:	ldrh	r2, [r1, r2]
   132cc:	tst	r2, #2048	; 0x800
   132d0:	beq	13fc0 <__assert_fail@plt+0x2620>
   132d4:	sub	r4, r3, #48	; 0x30
   132d8:	cmp	r4, #1
   132dc:	bgt	134b4 <__assert_fail@plt+0x1b14>
   132e0:	cmp	r4, #1
   132e4:	bne	13318 <__assert_fail@plt+0x1978>
   132e8:	ldr	r3, [r9, #44]	; 0x2c
   132ec:	cmp	r3, #2
   132f0:	beq	13544 <__assert_fail@plt+0x1ba4>
   132f4:	ldr	r3, [sp, #76]	; 0x4c
   132f8:	cmp	r3, #1
   132fc:	beq	13318 <__assert_fail@plt+0x1978>
   13300:	ldr	r3, [sp, #52]	; 0x34
   13304:	ldr	r2, [sp, #88]	; 0x58
   13308:	orrs	r3, r3, r2
   1330c:	moveq	r3, #1
   13310:	streq	r3, [sp, #76]	; 0x4c
   13314:	bne	13570 <__assert_fail@plt+0x1bd0>
   13318:	mov	r1, #0
   1331c:	movw	r0, #8956	; 0x22fc
   13320:	movt	r0, #1
   13324:	bl	11dec <__assert_fail@plt+0x44c>
   13328:	ldr	r3, [sp, #64]	; 0x40
   1332c:	str	r3, [sp, #108]	; 0x6c
   13330:	movw	r3, #53300	; 0xd034
   13334:	movt	r3, #2
   13338:	str	r3, [sp, #120]	; 0x78
   1333c:	mov	r3, #1
   13340:	str	r3, [sp, #100]	; 0x64
   13344:	ldr	r3, [sp, #84]	; 0x54
   13348:	cmp	r3, #0
   1334c:	bne	13690 <__assert_fail@plt+0x1cf0>
   13350:	cmp	fp, #0
   13354:	ble	137cc <__assert_fail@plt+0x1e2c>
   13358:	ldr	r3, [sp, #36]	; 0x24
   1335c:	add	r7, r3, r7, lsl #2
   13360:	ldr	r6, [sp, #64]	; 0x40
   13364:	mov	sl, #1
   13368:	movw	r3, #54264	; 0xd3f8
   1336c:	movt	r3, #2
   13370:	str	r3, [sp, #40]	; 0x28
   13374:	movw	r3, #8480	; 0x2120
   13378:	movt	r3, #1
   1337c:	str	r3, [sp, #68]	; 0x44
   13380:	b	13724 <__assert_fail@plt+0x1d84>
   13384:	bl	117d8 <__errno_location@plt>
   13388:	ldr	r5, [r0]
   1338c:	mov	r2, #5
   13390:	movw	r1, #53660	; 0xd19c
   13394:	movt	r1, #2
   13398:	mov	r0, #0
   1339c:	bl	11628 <dcgettext@plt>
   133a0:	mov	r2, r0
   133a4:	mov	r1, r5
   133a8:	mov	r0, #0
   133ac:	bl	116d0 <error@plt>
   133b0:	b	13204 <__assert_fail@plt+0x1864>
   133b4:	nop	{0}
   133b8:	andeq	r0, r0, r0
   133bc:	rscsmi	r1, r5, r0, lsl #16
   133c0:	andeq	r0, r0, r0
   133c4:	subsmi	r0, r9, r0
   133c8:	muleq	r2, r4, fp
   133cc:	andeq	ip, r2, r4, lsl #26
   133d0:	andeq	ip, r2, r8, lsl sp
   133d4:	andeq	ip, r2, r0, asr #26
   133d8:	mov	r2, #5
   133dc:	movw	r1, #53684	; 0xd1b4
   133e0:	movt	r1, #2
   133e4:	mov	r0, #0
   133e8:	bl	11628 <dcgettext@plt>
   133ec:	mov	sl, r0
   133f0:	ldr	r2, [sp, #56]	; 0x38
   133f4:	mov	r1, #8
   133f8:	mov	r0, #0
   133fc:	bl	1b094 <__assert_fail@plt+0x96f4>
   13400:	mov	r5, r0
   13404:	movw	r3, #61868	; 0xf1ac
   13408:	movt	r3, #3
   1340c:	ldr	r6, [r3, #4]
   13410:	mov	r2, #5
   13414:	ldr	fp, [sp, #140]	; 0x8c
   13418:	mov	r1, fp
   1341c:	mov	r0, #0
   13420:	bl	11628 <dcgettext@plt>
   13424:	mov	r7, r0
   13428:	mov	r2, #5
   1342c:	mov	r1, fp
   13430:	mov	r0, #0
   13434:	bl	11628 <dcgettext@plt>
   13438:	str	r0, [sp, #16]
   1343c:	vdiv.f64	d7, d8, d9
   13440:	vstr	d7, [sp, #8]
   13444:	str	r7, [sp, #4]
   13448:	str	r6, [sp]
   1344c:	mov	r3, r5
   13450:	mov	r2, sl
   13454:	mov	r1, #0
   13458:	mov	r0, r1
   1345c:	bl	116d0 <error@plt>
   13460:	b	13204 <__assert_fail@plt+0x1864>
   13464:	bl	117d8 <__errno_location@plt>
   13468:	ldr	r4, [r0]
   1346c:	ldr	r2, [sp, #56]	; 0x38
   13470:	mov	r1, #8
   13474:	mov	r0, #0
   13478:	bl	1b094 <__assert_fail@plt+0x96f4>
   1347c:	mov	r3, r0
   13480:	movw	r2, #56384	; 0xdc40
   13484:	movt	r2, #2
   13488:	mov	r1, r4
   1348c:	mov	r0, #0
   13490:	bl	116d0 <error@plt>
   13494:	b	12e50 <__assert_fail@plt+0x14b0>
   13498:	ldr	r3, [pc, #-208]	; 133d0 <__assert_fail@plt+0x1a30>
   1349c:	movw	r2, #935	; 0x3a7
   134a0:	movw	r1, #53024	; 0xcf20
   134a4:	movt	r1, #2
   134a8:	movw	r0, #53752	; 0xd1f8
   134ac:	movt	r0, #2
   134b0:	bl	119a0 <__assert_fail@plt>
   134b4:	ldr	r7, [sp, #288]	; 0x120
   134b8:	mov	r2, #5
   134bc:	movw	r1, #53764	; 0xd204
   134c0:	movt	r1, #2
   134c4:	mov	r0, #0
   134c8:	bl	11628 <dcgettext@plt>
   134cc:	mov	r6, r0
   134d0:	mov	r2, r7
   134d4:	mov	r1, #8
   134d8:	mov	r0, #0
   134dc:	bl	1b094 <__assert_fail@plt+0x96f4>
   134e0:	ldrb	r3, [r5, #1]
   134e4:	str	r3, [sp]
   134e8:	mov	r3, r0
   134ec:	mov	r2, r6
   134f0:	mov	r1, #0
   134f4:	mov	r0, r1
   134f8:	bl	116d0 <error@plt>
   134fc:	mov	r2, #5
   13500:	movw	r1, #53904	; 0xd290
   13504:	movt	r1, #2
   13508:	mov	r0, #0
   1350c:	bl	11628 <dcgettext@plt>
   13510:	mov	r5, r0
   13514:	ldr	r2, [sp, #288]	; 0x120
   13518:	mov	r1, #8
   1351c:	mov	r0, #0
   13520:	bl	1b094 <__assert_fail@plt+0x96f4>
   13524:	str	r4, [sp]
   13528:	mov	r3, r0
   1352c:	mov	r2, r5
   13530:	mov	r1, #0
   13534:	mov	r0, r1
   13538:	bl	116d0 <error@plt>
   1353c:	mov	r4, #0
   13540:	b	13904 <__assert_fail@plt+0x1f64>
   13544:	mov	r2, #5
   13548:	movw	r1, #53980	; 0xd2dc
   1354c:	movt	r1, #2
   13550:	mov	r0, #0
   13554:	bl	11628 <dcgettext@plt>
   13558:	mov	r2, r0
   1355c:	mov	r1, #0
   13560:	mov	r0, r1
   13564:	bl	116d0 <error@plt>
   13568:	mov	r4, #0
   1356c:	b	13904 <__assert_fail@plt+0x1f64>
   13570:	mov	r2, #5
   13574:	movw	r1, #54152	; 0xd388
   13578:	movt	r1, #2
   1357c:	mov	r0, #0
   13580:	bl	11628 <dcgettext@plt>
   13584:	mov	r4, r0
   13588:	ldr	r2, [sp, #288]	; 0x120
   1358c:	mov	r1, #8
   13590:	mov	r0, #0
   13594:	bl	1b094 <__assert_fail@plt+0x96f4>
   13598:	mov	r3, r0
   1359c:	mov	r2, r4
   135a0:	mov	r1, #0
   135a4:	mov	r0, r1
   135a8:	bl	116d0 <error@plt>
   135ac:	mov	r3, #1
   135b0:	str	r3, [sp, #76]	; 0x4c
   135b4:	b	13318 <__assert_fail@plt+0x1978>
   135b8:	mov	r2, #0
   135bc:	mov	r1, #256	; 0x100
   135c0:	add	r0, sp, #260	; 0x104
   135c4:	bl	1257c <__assert_fail@plt+0xbdc>
   135c8:	cmp	r4, #255	; 0xff
   135cc:	ble	13630 <__assert_fail@plt+0x1c90>
   135d0:	add	r3, sp, #272	; 0x110
   135d4:	add	r3, r3, #23
   135d8:	ldr	r2, [sp, #272]	; 0x110
   135dc:	add	r2, r2, #1
   135e0:	add	r1, sp, #272	; 0x110
   135e4:	add	r0, r1, #151	; 0x97
   135e8:	ldrb	r1, [r2, #-1]
   135ec:	strb	r1, [r3, #1]!
   135f0:	ldrb	r1, [r2], #2
   135f4:	strb	r1, [r3, #128]	; 0x80
   135f8:	cmp	r3, r0
   135fc:	bne	135e8 <__assert_fail@plt+0x1c48>
   13600:	mov	r1, #0
   13604:	movw	r0, #9716	; 0x25f4
   13608:	movt	r0, #1
   1360c:	bl	11dec <__assert_fail@plt+0x44c>
   13610:	ldr	r3, [sp, #64]	; 0x40
   13614:	str	r3, [sp, #100]	; 0x64
   13618:	movw	r3, #53324	; 0xd04c
   1361c:	movt	r3, #2
   13620:	str	r3, [sp, #120]	; 0x78
   13624:	mov	r3, #1
   13628:	str	r3, [sp, #108]	; 0x6c
   1362c:	b	13344 <__assert_fail@plt+0x19a4>
   13630:	ldr	r3, [sp, #284]	; 0x11c
   13634:	rsb	r2, r4, #256	; 0x100
   13638:	mov	r1, #1
   1363c:	ldr	r0, [sp, #272]	; 0x110
   13640:	add	r0, r0, r4
   13644:	bl	116ac <fread@plt>
   13648:	add	r4, r0, r4
   1364c:	cmp	r4, #256	; 0x100
   13650:	beq	135d0 <__assert_fail@plt+0x1c30>
   13654:	mov	r2, #5
   13658:	movw	r1, #54208	; 0xd3c0
   1365c:	movt	r1, #2
   13660:	mov	r0, #0
   13664:	bl	11628 <dcgettext@plt>
   13668:	mov	r4, r0
   1366c:	ldr	r2, [sp, #56]	; 0x38
   13670:	mov	r1, #8
   13674:	mov	r0, #0
   13678:	bl	1b094 <__assert_fail@plt+0x96f4>
   1367c:	mov	r3, r0
   13680:	mov	r2, r4
   13684:	mov	r1, #0
   13688:	mov	r0, #1
   1368c:	bl	116d0 <error@plt>
   13690:	mov	r1, #0
   13694:	movw	r0, #8916	; 0x22d4
   13698:	movt	r0, #1
   1369c:	bl	11dec <__assert_fail@plt+0x44c>
   136a0:	b	13350 <__assert_fail@plt+0x19b0>
   136a4:	mov	r0, #32
   136a8:	bl	1ba00 <__assert_fail@plt+0xa060>
   136ac:	mov	r4, r0
   136b0:	mov	r2, #32
   136b4:	mov	r1, #0
   136b8:	bl	11814 <memset@plt>
   136bc:	ldr	r0, [sp, #28]
   136c0:	bl	29b44 <__assert_fail@plt+0x181a4>
   136c4:	mov	r0, #100	; 0x64
   136c8:	str	r0, [r4, #4]
   136cc:	bl	1ba00 <__assert_fail@plt+0xa060>
   136d0:	str	r0, [r4]
   136d4:	mov	r3, #0
   136d8:	str	r3, [r4, #16]
   136dc:	ldr	r2, [sp, #28]
   136e0:	str	r2, [r4, #12]
   136e4:	str	r3, [r4, #20]
   136e8:	mov	r0, r5
   136ec:	bl	117a8 <strlen@plt>
   136f0:	mov	r2, r4
   136f4:	mov	r1, r0
   136f8:	mov	r0, r5
   136fc:	bl	29ac8 <__assert_fail@plt+0x18128>
   13700:	cmp	r0, #0
   13704:	bne	1376c <__assert_fail@plt+0x1dcc>
   13708:	mov	r1, r4
   1370c:	movw	r0, #8832	; 0x2280
   13710:	movt	r0, #1
   13714:	bl	11dec <__assert_fail@plt+0x44c>
   13718:	add	r6, r6, #1
   1371c:	cmp	r6, fp
   13720:	beq	137cc <__assert_fail@plt+0x1e2c>
   13724:	strb	sl, [r9, #100]	; 0x64
   13728:	ldr	r5, [r7], #4
   1372c:	ldr	r3, [sp, #44]	; 0x2c
   13730:	cmp	r3, #0
   13734:	bne	136a4 <__assert_fail@plt+0x1d04>
   13738:	ldr	r1, [sp, #40]	; 0x28
   1373c:	mov	r0, r5
   13740:	bl	11904 <strpbrk@plt>
   13744:	cmp	r0, #0
   13748:	beq	13784 <__assert_fail@plt+0x1de4>
   1374c:	cmp	r8, #0
   13750:	mov	r1, r5
   13754:	movwne	r0, #8780	; 0x224c
   13758:	movtne	r0, #1
   1375c:	movweq	r0, #8728	; 0x2218
   13760:	movteq	r0, #1
   13764:	bl	11dec <__assert_fail@plt+0x44c>
   13768:	b	13718 <__assert_fail@plt+0x1d78>
   1376c:	mov	r3, r0
   13770:	movw	r2, #56384	; 0xdc40
   13774:	movt	r2, #2
   13778:	mov	r1, #0
   1377c:	mov	r0, #1
   13780:	bl	116d0 <error@plt>
   13784:	bl	116a0 <__ctype_get_mb_cur_max@plt>
   13788:	cmp	r0, #1
   1378c:	beq	137b0 <__assert_fail@plt+0x1e10>
   13790:	movw	r0, #8440	; 0x20f8
   13794:	movt	r0, #1
   13798:	ldr	r3, [sp, #68]	; 0x44
   1379c:	cmp	r8, #0
   137a0:	movne	r0, r3
   137a4:	mov	r1, r5
   137a8:	bl	11dec <__assert_fail@plt+0x44c>
   137ac:	b	13718 <__assert_fail@plt+0x1d78>
   137b0:	movw	r0, #8624	; 0x21b0
   137b4:	movt	r0, #1
   137b8:	movw	r3, #8520	; 0x2148
   137bc:	movt	r3, #1
   137c0:	cmp	r8, #0
   137c4:	moveq	r0, r3
   137c8:	b	137a4 <__assert_fail@plt+0x1e04>
   137cc:	ldr	r4, [r9, #12]
   137d0:	ldr	r3, [sp, #76]	; 0x4c
   137d4:	cmp	r3, #1
   137d8:	beq	13a70 <__assert_fail@plt+0x20d0>
   137dc:	cmp	r3, #2
   137e0:	beq	13aa4 <__assert_fail@plt+0x2104>
   137e4:	ldr	r3, [sp, #52]	; 0x34
   137e8:	cmp	r3, #0
   137ec:	bne	13ad8 <__assert_fail@plt+0x2138>
   137f0:	ldr	r3, [sp, #88]	; 0x58
   137f4:	cmp	r3, #0
   137f8:	beq	1381c <__assert_fail@plt+0x1e7c>
   137fc:	ldrb	r3, [r9, #40]	; 0x28
   13800:	cmp	r3, #0
   13804:	mov	r1, #0
   13808:	movwne	r0, #7840	; 0x1ea0
   1380c:	movtne	r0, #1
   13810:	movweq	r0, #7776	; 0x1e60
   13814:	movteq	r0, #1
   13818:	bl	11dec <__assert_fail@plt+0x44c>
   1381c:	ldr	r3, [sp, #72]	; 0x48
   13820:	cmp	r3, #0
   13824:	add	r1, r9, #24
   13828:	movwne	r0, #7312	; 0x1c90
   1382c:	movtne	r0, #1
   13830:	movweq	r0, #7356	; 0x1cbc
   13834:	movteq	r0, #1
   13838:	bl	11dec <__assert_fail@plt+0x44c>
   1383c:	cmp	fp, #1
   13840:	ble	13aec <__assert_fail@plt+0x214c>
   13844:	ldr	r3, [r4, #8]
   13848:	str	r3, [r9, #4]
   1384c:	ldr	r3, [sp, #116]	; 0x74
   13850:	cmp	r3, #0
   13854:	movwne	r3, #7116	; 0x1bcc
   13858:	movtne	r3, #1
   1385c:	movweq	r3, #6920	; 0x1b08
   13860:	movteq	r3, #1
   13864:	str	r3, [r9, #104]	; 0x68
   13868:	ldr	r3, [sp, #52]	; 0x34
   1386c:	cmp	r3, #0
   13870:	bne	13afc <__assert_fail@plt+0x215c>
   13874:	ldr	r0, [sp, #284]	; 0x11c
   13878:	bl	11970 <getc@plt>
   1387c:	str	r0, [sp, #260]	; 0x104
   13880:	ldr	r3, [sp, #100]	; 0x64
   13884:	cmp	r3, #0
   13888:	cmnne	r0, #1
   1388c:	bne	13b20 <__assert_fail@plt+0x2180>
   13890:	ldr	r3, [sp, #260]	; 0x104
   13894:	cmn	r3, #1
   13898:	beq	138b0 <__assert_fail@plt+0x1f10>
   1389c:	ldr	r3, [r9, #104]	; 0x68
   138a0:	add	r0, sp, #260	; 0x104
   138a4:	blx	r3
   138a8:	cmp	r0, #8
   138ac:	bne	13890 <__assert_fail@plt+0x1ef0>
   138b0:	ldr	r3, [sp, #52]	; 0x34
   138b4:	cmp	r3, #0
   138b8:	beq	138f0 <__assert_fail@plt+0x1f50>
   138bc:	ldr	r3, [sp, #108]	; 0x6c
   138c0:	cmp	r3, #0
   138c4:	bne	13b34 <__assert_fail@plt+0x2194>
   138c8:	ldr	r3, [sp, #92]	; 0x5c
   138cc:	ldr	r2, [sp, #104]	; 0x68
   138d0:	orrs	r3, r3, r2
   138d4:	movne	r3, #1
   138d8:	moveq	r3, #0
   138dc:	ldr	r2, [sp, #96]	; 0x60
   138e0:	cmp	r2, #0
   138e4:	movne	r3, #1
   138e8:	cmp	r3, #0
   138ec:	bne	13bd4 <__assert_fail@plt+0x2234>
   138f0:	ldr	r0, [sp, #284]	; 0x11c
   138f4:	bl	115b0 <ferror@plt>
   138f8:	cmp	r0, #0
   138fc:	bne	13ef8 <__assert_fail@plt+0x2558>
   13900:	ldr	r4, [r9, #32]
   13904:	ldr	r0, [sp, #60]	; 0x3c
   13908:	bl	11868 <fclose@plt>
   1390c:	cmn	r0, #1
   13910:	beq	13f30 <__assert_fail@plt+0x2590>
   13914:	ldr	r3, [sp, #80]	; 0x50
   13918:	cmp	r3, #0
   1391c:	beq	13928 <__assert_fail@plt+0x1f88>
   13920:	mov	r0, r3
   13924:	bl	1c948 <__assert_fail@plt+0xafa8>
   13928:	ldr	r0, [sp, #48]	; 0x30
   1392c:	cmp	r0, #0
   13930:	beq	13f64 <__assert_fail@plt+0x25c4>
   13934:	add	r3, sp, #3152	; 0xc50
   13938:	add	r3, r3, #8
   1393c:	str	r3, [sp]
   13940:	add	r3, sp, #3152	; 0xc50
   13944:	add	r3, r3, #12
   13948:	mov	r2, #0
   1394c:	movw	r1, #53592	; 0xd158
   13950:	movt	r1, #2
   13954:	bl	14980 <__assert_fail@plt+0x2fe0>
   13958:	cmp	r0, #0
   1395c:	beq	13f64 <__assert_fail@plt+0x25c4>
   13960:	ldr	r3, [sp, #72]	; 0x48
   13964:	cmp	r3, #0
   13968:	beq	13980 <__assert_fail@plt+0x1fe0>
   1396c:	ldrd	r0, [r9, #24]
   13970:	ldrd	r2, [r9, #32]
   13974:	cmp	r1, r3
   13978:	cmpeq	r0, r2
   1397c:	bls	13f64 <__assert_fail@plt+0x25c4>
   13980:	mov	r2, #0
   13984:	mov	r3, #0
   13988:	strd	r2, [r9, #88]	; 0x58
   1398c:	strd	r2, [r9, #80]	; 0x50
   13990:	strd	r2, [r9, #72]	; 0x48
   13994:	strd	r2, [r9, #64]	; 0x40
   13998:	strd	r2, [r9, #56]	; 0x38
   1399c:	strd	r2, [r9, #48]	; 0x30
   139a0:	ldr	r3, [sp, #48]	; 0x30
   139a4:	cmp	r3, #0
   139a8:	beq	13168 <__assert_fail@plt+0x17c8>
   139ac:	ldr	r1, [sp, #3160]	; 0xc58
   139b0:	cmp	r1, #1
   139b4:	beq	1308c <__assert_fail@plt+0x16ec>
   139b8:	cmp	r1, #0
   139bc:	bne	130a8 <__assert_fail@plt+0x1708>
   139c0:	movw	r3, #53268	; 0xd014
   139c4:	movt	r3, #2
   139c8:	str	r3, [sp, #56]	; 0x38
   139cc:	mov	r3, #0
   139d0:	str	r3, [sp, #80]	; 0x50
   139d4:	ldr	r0, [sp, #56]	; 0x38
   139d8:	bl	11cdc <__assert_fail@plt+0x33c>
   139dc:	subs	r4, r0, #0
   139e0:	blt	13134 <__assert_fail@plt+0x1794>
   139e4:	add	r2, sp, #152	; 0x98
   139e8:	mov	r1, r4
   139ec:	mov	r0, #3
   139f0:	bl	1167c <__fxstat64@plt>
   139f4:	cmp	r0, #0
   139f8:	beq	13194 <__assert_fail@plt+0x17f4>
   139fc:	bl	117d8 <__errno_location@plt>
   13a00:	ldr	r5, [r0]
   13a04:	ldr	r2, [sp, #56]	; 0x38
   13a08:	mov	r1, #8
   13a0c:	mov	r0, #0
   13a10:	bl	1b094 <__assert_fail@plt+0x96f4>
   13a14:	mov	r3, r0
   13a18:	movw	r2, #56384	; 0xdc40
   13a1c:	movt	r2, #2
   13a20:	mov	r1, r5
   13a24:	mov	r0, #0
   13a28:	bl	116d0 <error@plt>
   13a2c:	movw	r1, #55620	; 0xd944
   13a30:	movt	r1, #2
   13a34:	mov	r0, r4
   13a38:	bl	114fc <fdopen@plt>
   13a3c:	subs	r3, r0, #0
   13a40:	str	r3, [sp, #60]	; 0x3c
   13a44:	beq	13464 <__assert_fail@plt+0x1ac4>
   13a48:	movw	r3, #61968	; 0xf210
   13a4c:	movt	r3, #3
   13a50:	ldr	r7, [r3]
   13a54:	ldr	r3, [sp, #32]
   13a58:	sub	fp, r3, r7
   13a5c:	mov	r3, #0
   13a60:	str	r3, [sp, #92]	; 0x5c
   13a64:	str	r3, [sp, #104]	; 0x68
   13a68:	str	r3, [sp, #96]	; 0x60
   13a6c:	b	1323c <__assert_fail@plt+0x189c>
   13a70:	mov	r3, #1
   13a74:	strb	r3, [r9, #100]	; 0x64
   13a78:	movw	r3, #61868	; 0xf1ac
   13a7c:	movt	r3, #3
   13a80:	ldr	r3, [r3, #8]
   13a84:	cmp	r3, #0
   13a88:	mov	r1, #0
   13a8c:	movwne	r0, #8352	; 0x20a0
   13a90:	movtne	r0, #1
   13a94:	movweq	r0, #8264	; 0x2048
   13a98:	movteq	r0, #1
   13a9c:	bl	11dec <__assert_fail@plt+0x44c>
   13aa0:	b	137e4 <__assert_fail@plt+0x1e44>
   13aa4:	mov	r3, #1
   13aa8:	strb	r3, [r9, #100]	; 0x64
   13aac:	movw	r3, #61868	; 0xf1ac
   13ab0:	movt	r3, #3
   13ab4:	ldr	r3, [r3, #8]
   13ab8:	cmp	r3, #0
   13abc:	mov	r1, #0
   13ac0:	movwne	r0, #8396	; 0x20cc
   13ac4:	movtne	r0, #1
   13ac8:	movweq	r0, #8308	; 0x2074
   13acc:	movteq	r0, #1
   13ad0:	bl	11dec <__assert_fail@plt+0x44c>
   13ad4:	b	137e4 <__assert_fail@plt+0x1e44>
   13ad8:	add	r1, r9, #48	; 0x30
   13adc:	movw	r0, #7940	; 0x1f04
   13ae0:	movt	r0, #1
   13ae4:	bl	11dec <__assert_fail@plt+0x44c>
   13ae8:	b	137f0 <__assert_fail@plt+0x1e50>
   13aec:	movw	r3, #6816	; 0x1aa0
   13af0:	movt	r3, #1
   13af4:	str	r3, [r9, #104]	; 0x68
   13af8:	b	13868 <__assert_fail@plt+0x1ec8>
   13afc:	mov	r2, #5
   13b00:	movw	r1, #54272	; 0xd400
   13b04:	movt	r1, #2
   13b08:	mov	r0, #0
   13b0c:	bl	11628 <dcgettext@plt>
   13b10:	ldr	r2, [sp, #120]	; 0x78
   13b14:	ldr	r1, [sp, #288]	; 0x120
   13b18:	bl	11550 <printf@plt>
   13b1c:	b	13874 <__assert_fail@plt+0x1ed4>
   13b20:	ldr	r1, [sp, #284]	; 0x11c
   13b24:	bl	117cc <ungetc@plt>
   13b28:	mov	r3, #0
   13b2c:	str	r3, [sp, #260]	; 0x104
   13b30:	b	13890 <__assert_fail@plt+0x1ef0>
   13b34:	mov	r4, #0
   13b38:	mov	r3, #1
   13b3c:	bfi	r4, r3, #0, #8
   13b40:	mov	r2, #5
   13b44:	movw	r1, #54308	; 0xd424
   13b48:	movt	r1, #2
   13b4c:	mov	r0, #0
   13b50:	bl	11628 <dcgettext@plt>
   13b54:	mov	r5, r0
   13b58:	mov	r2, #5
   13b5c:	movw	r1, #54364	; 0xd45c
   13b60:	movt	r1, #2
   13b64:	mov	r0, #0
   13b68:	bl	11628 <dcgettext@plt>
   13b6c:	ldr	r3, [sp, #292]	; 0x124
   13b70:	cmp	r3, #1
   13b74:	beq	13b9c <__assert_fail@plt+0x21fc>
   13b78:	cmp	r3, #2
   13b7c:	bne	13bb8 <__assert_fail@plt+0x2218>
   13b80:	cmp	r4, #0
   13b84:	movne	r1, r0
   13b88:	moveq	r1, r5
   13b8c:	movw	r0, #56384	; 0xdc40
   13b90:	movt	r0, #2
   13b94:	bl	11550 <printf@plt>
   13b98:	b	138c8 <__assert_fail@plt+0x1f28>
   13b9c:	cmp	r4, #0
   13ba0:	movne	r1, r5
   13ba4:	moveq	r1, r0
   13ba8:	movw	r0, #56384	; 0xdc40
   13bac:	movt	r0, #2
   13bb0:	bl	11550 <printf@plt>
   13bb4:	b	138c8 <__assert_fail@plt+0x1f28>
   13bb8:	mov	r2, #5
   13bbc:	movw	r1, #54416	; 0xd490
   13bc0:	movt	r1, #2
   13bc4:	mov	r0, #0
   13bc8:	bl	11628 <dcgettext@plt>
   13bcc:	bl	11550 <printf@plt>
   13bd0:	b	138c8 <__assert_fail@plt+0x1f28>
   13bd4:	ldr	r3, [sp, #92]	; 0x5c
   13bd8:	str	r3, [sp, #40]	; 0x28
   13bdc:	cmp	r2, #0
   13be0:	beq	13c90 <__assert_fail@plt+0x22f0>
   13be4:	mov	r0, r2
   13be8:	bl	1173c <localtime@plt>
   13bec:	subs	r4, r0, #0
   13bf0:	beq	13c90 <__assert_fail@plt+0x22f0>
   13bf4:	mov	r3, r4
   13bf8:	movw	r2, #54476	; 0xd4cc
   13bfc:	movt	r2, #2
   13c00:	mov	r1, #20
   13c04:	add	r0, sp, #2496	; 0x9c0
   13c08:	add	r0, r0, #12
   13c0c:	bl	11724 <strftime@plt>
   13c10:	cmp	r0, #19
   13c14:	bne	13e50 <__assert_fail@plt+0x24b0>
   13c18:	ldrb	r3, [sp, #2527]	; 0x9df
   13c1c:	cmp	r3, #0
   13c20:	bne	13e6c <__assert_fail@plt+0x24cc>
   13c24:	ldrb	r3, [sp, #2526]	; 0x9de
   13c28:	cmp	r3, #0
   13c2c:	beq	13e88 <__assert_fail@plt+0x24e8>
   13c30:	mov	r2, #5
   13c34:	movw	r1, #54588	; 0xd53c
   13c38:	movt	r1, #2
   13c3c:	mov	r0, #0
   13c40:	bl	11628 <dcgettext@plt>
   13c44:	ldr	r3, [sp, #96]	; 0x60
   13c48:	ldr	r2, [r3, #4]
   13c4c:	add	r1, sp, #2496	; 0x9c0
   13c50:	add	r1, r1, #12
   13c54:	bl	11550 <printf@plt>
   13c58:	mov	r3, r4
   13c5c:	movw	r2, #54628	; 0xd564
   13c60:	movt	r2, #2
   13c64:	mov	r1, #20
   13c68:	add	r0, sp, #2496	; 0x9c0
   13c6c:	add	r0, r0, #12
   13c70:	bl	11724 <strftime@plt>
   13c74:	cmp	r0, #5
   13c78:	bne	13ea4 <__assert_fail@plt+0x2504>
   13c7c:	add	r1, sp, #2496	; 0x9c0
   13c80:	add	r1, r1, #12
   13c84:	movw	r0, #54648	; 0xd578
   13c88:	movt	r0, #2
   13c8c:	bl	11550 <printf@plt>
   13c90:	mov	r3, #5
   13c94:	str	r3, [sp]
   13c98:	ldr	r3, [sp, #40]	; 0x28
   13c9c:	movw	r2, #54656	; 0xd580
   13ca0:	movt	r2, #2
   13ca4:	movw	r1, #54688	; 0xd5a0
   13ca8:	movt	r1, #2
   13cac:	mov	r0, #0
   13cb0:	bl	11994 <dcngettext@plt>
   13cb4:	mov	r4, r0
   13cb8:	mov	r1, #0
   13cbc:	mov	r2, #1
   13cc0:	mov	r3, #0
   13cc4:	strd	r2, [sp, #8]
   13cc8:	strd	r2, [sp]
   13ccc:	mov	r3, r1
   13cd0:	add	r2, sp, #552	; 0x228
   13cd4:	ldr	r0, [sp, #92]	; 0x5c
   13cd8:	bl	14d60 <__assert_fail@plt+0x33c0>
   13cdc:	mov	r1, r0
   13ce0:	mov	r0, r4
   13ce4:	bl	11550 <printf@plt>
   13ce8:	ldrb	r3, [r9, #100]	; 0x64
   13cec:	cmp	r3, #0
   13cf0:	mov	r2, #5
   13cf4:	movwne	r1, #54720	; 0xd5c0
   13cf8:	movtne	r1, #2
   13cfc:	movweq	r1, #54744	; 0xd5d8
   13d00:	movteq	r1, #2
   13d04:	mov	r0, #0
   13d08:	bl	11628 <dcgettext@plt>
   13d0c:	mov	r6, r0
   13d10:	mov	r4, #1
   13d14:	mov	r5, #0
   13d18:	strd	r4, [sp, #8]
   13d1c:	strd	r4, [sp]
   13d20:	mov	r3, #0
   13d24:	add	r2, sp, #552	; 0x228
   13d28:	ldrd	r0, [r9, #56]	; 0x38
   13d2c:	bl	14d60 <__assert_fail@plt+0x33c0>
   13d30:	mov	r1, r0
   13d34:	mov	r0, r6
   13d38:	bl	11550 <printf@plt>
   13d3c:	mov	r2, #5
   13d40:	movw	r1, #54764	; 0xd5ec
   13d44:	movt	r1, #2
   13d48:	mov	r0, #0
   13d4c:	bl	11628 <dcgettext@plt>
   13d50:	str	r0, [sp, #68]	; 0x44
   13d54:	strd	r4, [sp, #8]
   13d58:	strd	r4, [sp]
   13d5c:	mov	r3, #0
   13d60:	add	r2, sp, #552	; 0x228
   13d64:	ldrd	r0, [r9, #64]	; 0x40
   13d68:	bl	14d60 <__assert_fail@plt+0x33c0>
   13d6c:	mov	sl, r0
   13d70:	strd	r4, [sp, #8]
   13d74:	strd	r4, [sp]
   13d78:	mov	r3, #0
   13d7c:	add	r2, sp, #1200	; 0x4b0
   13d80:	add	r2, r2, #4
   13d84:	ldrd	r0, [r9, #72]	; 0x48
   13d88:	bl	14d60 <__assert_fail@plt+0x33c0>
   13d8c:	mov	r7, r0
   13d90:	strd	r4, [sp, #8]
   13d94:	strd	r4, [sp]
   13d98:	mov	r3, #0
   13d9c:	add	r2, sp, #1856	; 0x740
   13da0:	ldrd	r0, [r9, #80]	; 0x50
   13da4:	bl	14d60 <__assert_fail@plt+0x33c0>
   13da8:	mov	r6, r0
   13dac:	strd	r4, [sp, #8]
   13db0:	strd	r4, [sp]
   13db4:	mov	r3, #0
   13db8:	add	r2, sp, #2496	; 0x9c0
   13dbc:	add	r2, r2, #12
   13dc0:	ldrd	r0, [r9, #88]	; 0x58
   13dc4:	bl	14d60 <__assert_fail@plt+0x33c0>
   13dc8:	str	r0, [sp]
   13dcc:	mov	r3, r6
   13dd0:	mov	r2, r7
   13dd4:	mov	r1, sl
   13dd8:	ldr	r0, [sp, #68]	; 0x44
   13ddc:	bl	11550 <printf@plt>
   13de0:	cmp	fp, #0
   13de4:	bne	13e44 <__assert_fail@plt+0x24a4>
   13de8:	ldrb	r3, [r9, #100]	; 0x64
   13dec:	cmp	r3, #0
   13df0:	bne	13ec0 <__assert_fail@plt+0x2520>
   13df4:	ldrd	r2, [r9, #64]	; 0x40
   13df8:	orrs	r3, r2, r3
   13dfc:	beq	13edc <__assert_fail@plt+0x253c>
   13e00:	mov	r2, #5
   13e04:	movw	r1, #55032	; 0xd6f8
   13e08:	movt	r1, #2
   13e0c:	mov	r0, #0
   13e10:	bl	11628 <dcgettext@plt>
   13e14:	mov	r4, r0
   13e18:	ldrd	r0, [r9, #64]	; 0x40
   13e1c:	bl	2c854 <__assert_fail@plt+0x1aeb4>
   13e20:	vmov	d6, r0, r1
   13e24:	vldr	s15, [sp, #40]	; 0x28
   13e28:	vcvt.f64.u32	d7, s15
   13e2c:	vsub.f64	d7, d6, d7
   13e30:	vmul.f64	d7, d7, d10
   13e34:	vdiv.f64	d7, d7, d6
   13e38:	vmov	r2, r3, d7
   13e3c:	mov	r0, r4
   13e40:	bl	11550 <printf@plt>
   13e44:	mov	r0, #10
   13e48:	bl	11820 <putchar@plt>
   13e4c:	b	138f0 <__assert_fail@plt+0x1f50>
   13e50:	ldr	r3, [pc, #-2692]	; 133d4 <__assert_fail@plt+0x1a34>
   13e54:	movw	r2, #845	; 0x34d
   13e58:	movw	r1, #53024	; 0xcf20
   13e5c:	movt	r1, #2
   13e60:	movw	r0, #54496	; 0xd4e0
   13e64:	movt	r0, #2
   13e68:	bl	119a0 <__assert_fail@plt>
   13e6c:	ldr	r3, [pc, #-2720]	; 133d4 <__assert_fail@plt+0x1a34>
   13e70:	movw	r2, #846	; 0x34e
   13e74:	movw	r1, #53024	; 0xcf20
   13e78:	movt	r1, #2
   13e7c:	movw	r0, #54524	; 0xd4fc
   13e80:	movt	r0, #2
   13e84:	bl	119a0 <__assert_fail@plt>
   13e88:	ldr	r3, [pc, #-2748]	; 133d4 <__assert_fail@plt+0x1a34>
   13e8c:	movw	r2, #847	; 0x34f
   13e90:	movw	r1, #53024	; 0xcf20
   13e94:	movt	r1, #2
   13e98:	movw	r0, #54556	; 0xd51c
   13e9c:	movt	r0, #2
   13ea0:	bl	119a0 <__assert_fail@plt>
   13ea4:	ldr	r3, [pc, #-2776]	; 133d4 <__assert_fail@plt+0x1a34>
   13ea8:	movw	r2, #851	; 0x353
   13eac:	movw	r1, #53024	; 0xcf20
   13eb0:	movt	r1, #2
   13eb4:	movw	r0, #54632	; 0xd568
   13eb8:	movt	r0, #2
   13ebc:	bl	119a0 <__assert_fail@plt>
   13ec0:	mov	r2, #5
   13ec4:	movw	r1, #54944	; 0xd6a0
   13ec8:	movt	r1, #2
   13ecc:	mov	r0, #0
   13ed0:	bl	11628 <dcgettext@plt>
   13ed4:	bl	11550 <printf@plt>
   13ed8:	b	13e44 <__assert_fail@plt+0x24a4>
   13edc:	mov	r2, #5
   13ee0:	movw	r1, #55080	; 0xd728
   13ee4:	movt	r1, #2
   13ee8:	mov	r0, #0
   13eec:	bl	11628 <dcgettext@plt>
   13ef0:	bl	11550 <printf@plt>
   13ef4:	b	13e44 <__assert_fail@plt+0x24a4>
   13ef8:	bl	117d8 <__errno_location@plt>
   13efc:	ldr	r4, [r0]
   13f00:	ldr	r2, [sp, #288]	; 0x120
   13f04:	mov	r1, #8
   13f08:	mov	r0, #0
   13f0c:	bl	1b094 <__assert_fail@plt+0x96f4>
   13f10:	mov	r3, r0
   13f14:	movw	r2, #56384	; 0xdc40
   13f18:	movt	r2, #2
   13f1c:	mov	r1, r4
   13f20:	mov	r0, #0
   13f24:	bl	116d0 <error@plt>
   13f28:	mov	r4, #0
   13f2c:	b	13904 <__assert_fail@plt+0x1f64>
   13f30:	bl	117d8 <__errno_location@plt>
   13f34:	ldr	r4, [r0]
   13f38:	ldr	r2, [sp, #56]	; 0x38
   13f3c:	mov	r1, #8
   13f40:	mov	r0, #0
   13f44:	bl	1b094 <__assert_fail@plt+0x96f4>
   13f48:	mov	r3, r0
   13f4c:	movw	r2, #56384	; 0xdc40
   13f50:	movt	r2, #2
   13f54:	mov	r1, r4
   13f58:	mov	r0, #0
   13f5c:	bl	116d0 <error@plt>
   13f60:	b	12e50 <__assert_fail@plt+0x14b0>
   13f64:	ldr	r3, [sp, #124]	; 0x7c
   13f68:	cmp	r3, #0
   13f6c:	bne	13fac <__assert_fail@plt+0x260c>
   13f70:	cmp	r4, #0
   13f74:	bne	12e50 <__assert_fail@plt+0x14b0>
   13f78:	ldr	r3, [sp, #72]	; 0x48
   13f7c:	cmp	r3, #0
   13f80:	beq	13f98 <__assert_fail@plt+0x25f8>
   13f84:	movw	r3, #61992	; 0xf228
   13f88:	movt	r3, #3
   13f8c:	ldrd	r2, [r3, #24]
   13f90:	orrs	r3, r2, r3
   13f94:	beq	12e50 <__assert_fail@plt+0x14b0>
   13f98:	ldr	r3, [sp, #52]	; 0x34
   13f9c:	clz	r3, r3
   13fa0:	lsr	r3, r3, #5
   13fa4:	str	r3, [sp, #64]	; 0x40
   13fa8:	b	12e50 <__assert_fail@plt+0x14b0>
   13fac:	mov	r1, r4
   13fb0:	movw	r0, #55112	; 0xd748
   13fb4:	movt	r0, #2
   13fb8:	bl	11550 <printf@plt>
   13fbc:	b	13f70 <__assert_fail@plt+0x25d0>
   13fc0:	mov	r2, #0
   13fc4:	mov	r1, #10
   13fc8:	add	r0, sp, #260	; 0x104
   13fcc:	bl	1257c <__assert_fail@plt+0xbdc>
   13fd0:	ldr	r3, [sp, #284]	; 0x11c
   13fd4:	rsb	r2, r4, #10
   13fd8:	mov	r1, #1
   13fdc:	ldr	r0, [sp, #272]	; 0x110
   13fe0:	add	r0, r0, r4
   13fe4:	bl	116ac <fread@plt>
   13fe8:	add	r4, r4, r0
   13fec:	cmp	r4, #9
   13ff0:	bls	135b8 <__assert_fail@plt+0x1c18>
   13ff4:	mov	r2, #10
   13ff8:	ldr	r3, [sp, #132]	; 0x84
   13ffc:	add	r1, r3, #556	; 0x22c
   14000:	ldr	r0, [sp, #272]	; 0x110
   14004:	bl	1161c <memcmp@plt>
   14008:	subs	r5, r0, #0
   1400c:	str	r5, [sp, #108]	; 0x6c
   14010:	bne	135b8 <__assert_fail@plt+0x1c18>
   14014:	mov	r1, #0
   14018:	movw	r0, #8956	; 0x22fc
   1401c:	movt	r0, #1
   14020:	bl	11dec <__assert_fail@plt+0x44c>
   14024:	str	r5, [sp, #100]	; 0x64
   14028:	movw	r3, #53308	; 0xd03c
   1402c:	movt	r3, #2
   14030:	str	r3, [sp, #120]	; 0x78
   14034:	b	13344 <__assert_fail@plt+0x19a4>
   14038:	movw	r3, #61968	; 0xf210
   1403c:	movt	r3, #3
   14040:	ldr	r3, [r3]
   14044:	ldr	r2, [sp, #32]
   14048:	cmp	r3, r2
   1404c:	beq	13060 <__assert_fail@plt+0x16c0>
   14050:	mov	r3, #1
   14054:	str	r3, [sp, #88]	; 0x58
   14058:	b	12fb4 <__assert_fail@plt+0x1614>
   1405c:	strd	r4, [sp, #-28]!	; 0xffffffe4
   14060:	strd	r6, [sp, #8]
   14064:	strd	r8, [sp, #16]
   14068:	str	lr, [sp, #24]
   1406c:	sub	sp, sp, #20
   14070:	mov	r6, r0
   14074:	mov	r7, r1
   14078:	ldr	r3, [pc, #432]	; 14230 <__assert_fail@plt+0x2890>
   1407c:	ldr	r4, [r3]
   14080:	ldr	r2, [r3, #4]
   14084:	str	r4, [sp, #4]
   14088:	str	r2, [sp, #8]
   1408c:	ldr	r3, [r3, #8]
   14090:	str	r3, [sp, #12]
   14094:	cmp	r4, #0
   14098:	beq	14140 <__assert_fail@plt+0x27a0>
   1409c:	add	r5, sp, #8
   140a0:	mov	r0, r4
   140a4:	bl	11cdc <__assert_fail@plt+0x33c>
   140a8:	subs	r8, r0, #0
   140ac:	bge	140c4 <__assert_fail@plt+0x2724>
   140b0:	ldr	r4, [r5], #4
   140b4:	cmp	r4, #0
   140b8:	bne	140a0 <__assert_fail@plt+0x2700>
   140bc:	mvn	r8, #0
   140c0:	b	140d0 <__assert_fail@plt+0x2730>
   140c4:	movw	r3, #61992	; 0xf228
   140c8:	movt	r3, #3
   140cc:	str	r4, [r3, #96]	; 0x60
   140d0:	bl	11658 <geteuid@plt>
   140d4:	mov	r4, r0
   140d8:	bl	11580 <getuid@plt>
   140dc:	mov	r5, r0
   140e0:	bl	11808 <getgid@plt>
   140e4:	mov	r9, r0
   140e8:	cmp	r4, #0
   140ec:	beq	14148 <__assert_fail@plt+0x27a8>
   140f0:	cmp	r5, #0
   140f4:	cmpne	r4, r5
   140f8:	bne	1417c <__assert_fail@plt+0x27dc>
   140fc:	bl	117d8 <__errno_location@plt>
   14100:	mov	r3, #0
   14104:	str	r3, [r0]
   14108:	mov	r0, r9
   1410c:	bl	11700 <setgid@plt>
   14110:	cmp	r0, #0
   14114:	bne	141e8 <__assert_fail@plt+0x2848>
   14118:	mov	r2, r8
   1411c:	mov	r1, r7
   14120:	mov	r0, r6
   14124:	bl	127b8 <__assert_fail@plt+0xe18>
   14128:	add	sp, sp, #20
   1412c:	ldrd	r4, [sp]
   14130:	ldrd	r6, [sp, #8]
   14134:	ldrd	r8, [sp, #16]
   14138:	add	sp, sp, #24
   1413c:	pop	{pc}		; (ldr pc, [sp], #4)
   14140:	mvn	r8, #0
   14144:	b	140d0 <__assert_fail@plt+0x2730>
   14148:	str	r0, [sp, #4]
   1414c:	add	r1, sp, #4
   14150:	mov	r0, #1
   14154:	bl	11670 <setgroups@plt>
   14158:	cmp	r0, #0
   1415c:	beq	140f0 <__assert_fail@plt+0x2750>
   14160:	mov	r2, #5
   14164:	movw	r1, #55120	; 0xd750
   14168:	movt	r1, #2
   1416c:	mov	r0, #0
   14170:	bl	11628 <dcgettext@plt>
   14174:	mov	r5, r0
   14178:	b	14200 <__assert_fail@plt+0x2860>
   1417c:	bl	117d8 <__errno_location@plt>
   14180:	mov	r4, r0
   14184:	mov	r3, #0
   14188:	str	r3, [r0]
   1418c:	bl	11580 <getuid@plt>
   14190:	bl	118c8 <setuid@plt>
   14194:	cmp	r0, #0
   14198:	bne	141cc <__assert_fail@plt+0x282c>
   1419c:	mov	r0, #0
   141a0:	bl	118c8 <setuid@plt>
   141a4:	cmp	r0, #0
   141a8:	bne	140fc <__assert_fail@plt+0x275c>
   141ac:	mov	r2, #5
   141b0:	movw	r1, #55188	; 0xd794
   141b4:	movt	r1, #2
   141b8:	bl	11628 <dcgettext@plt>
   141bc:	mov	r5, r0
   141c0:	mov	r3, #0
   141c4:	str	r3, [r4]
   141c8:	b	14200 <__assert_fail@plt+0x2860>
   141cc:	mov	r2, #5
   141d0:	movw	r1, #55152	; 0xd770
   141d4:	movt	r1, #2
   141d8:	mov	r0, #0
   141dc:	bl	11628 <dcgettext@plt>
   141e0:	mov	r5, r0
   141e4:	b	14200 <__assert_fail@plt+0x2860>
   141e8:	mov	r2, #5
   141ec:	movw	r1, #55220	; 0xd7b4
   141f0:	movt	r1, #2
   141f4:	mov	r0, #0
   141f8:	bl	11628 <dcgettext@plt>
   141fc:	mov	r5, r0
   14200:	bl	117d8 <__errno_location@plt>
   14204:	ldr	r4, [r0]
   14208:	mov	r2, r5
   1420c:	mov	r1, #8
   14210:	mov	r0, #0
   14214:	bl	1b094 <__assert_fail@plt+0x96f4>
   14218:	mov	r3, r0
   1421c:	movw	r2, #56384	; 0xdc40
   14220:	movt	r2, #2
   14224:	mov	r1, r4
   14228:	mov	r0, #1
   1422c:	bl	116d0 <error@plt>
   14230:	andeq	ip, r2, ip, asr #26
   14234:	strd	r4, [sp, #-20]!	; 0xffffffec
   14238:	strd	r6, [sp, #8]
   1423c:	str	lr, [sp, #16]
   14240:	sub	sp, sp, #12
   14244:	mov	r4, r0
   14248:	mov	r5, r1
   1424c:	mov	r7, r2
   14250:	mov	r6, r3
   14254:	bl	118e0 <clearerr@plt>
   14258:	mov	r3, r4
   1425c:	mov	r2, #1
   14260:	mov	r1, #4
   14264:	add	r0, sp, r1
   14268:	bl	116ac <fread@plt>
   1426c:	cmp	r0, #1
   14270:	beq	142f0 <__assert_fail@plt+0x2950>
   14274:	mov	r2, r5
   14278:	mov	r1, #8
   1427c:	mov	r0, #0
   14280:	bl	1b094 <__assert_fail@plt+0x96f4>
   14284:	mov	r5, r0
   14288:	mov	r0, r4
   1428c:	bl	11790 <feof@plt>
   14290:	cmp	r0, #0
   14294:	beq	142c0 <__assert_fail@plt+0x2920>
   14298:	mov	r2, #5
   1429c:	movw	r1, #55500	; 0xd8cc
   142a0:	movt	r1, #2
   142a4:	mov	r0, #0
   142a8:	bl	11628 <dcgettext@plt>
   142ac:	mov	r3, r5
   142b0:	mov	r2, r0
   142b4:	mov	r1, #0
   142b8:	mov	r0, #1
   142bc:	bl	116d0 <error@plt>
   142c0:	bl	117d8 <__errno_location@plt>
   142c4:	ldr	r4, [r0]
   142c8:	mov	r2, #5
   142cc:	movw	r1, #55524	; 0xd8e4
   142d0:	movt	r1, #2
   142d4:	mov	r0, #0
   142d8:	bl	11628 <dcgettext@plt>
   142dc:	mov	r3, r5
   142e0:	mov	r2, r0
   142e4:	mov	r1, r4
   142e8:	mov	r0, #1
   142ec:	bl	116d0 <error@plt>
   142f0:	ldr	r0, [sp, #4]
   142f4:	rev	r4, r0
   142f8:	ldr	r3, [r6]
   142fc:	cmp	r3, #0
   14300:	bne	14370 <__assert_fail@plt+0x29d0>
   14304:	cmp	r7, r0
   14308:	bge	14360 <__assert_fail@plt+0x29c0>
   1430c:	cmp	r7, r4
   14310:	blt	14378 <__assert_fail@plt+0x29d8>
   14314:	mov	r2, #5
   14318:	movw	r1, #55556	; 0xd904
   1431c:	movt	r1, #2
   14320:	mov	r0, #0
   14324:	bl	11628 <dcgettext@plt>
   14328:	mov	r7, r0
   1432c:	mov	r2, r5
   14330:	mov	r1, #8
   14334:	mov	r0, #0
   14338:	bl	1b094 <__assert_fail@plt+0x96f4>
   1433c:	mov	r3, r0
   14340:	mov	r2, r7
   14344:	mov	r1, #0
   14348:	mov	r0, r1
   1434c:	bl	116d0 <error@plt>
   14350:	mov	r3, #2
   14354:	str	r3, [r6]
   14358:	mov	r0, r4
   1435c:	b	14378 <__assert_fail@plt+0x29d8>
   14360:	cmp	r7, r4
   14364:	movlt	r3, #1
   14368:	strlt	r3, [r6]
   1436c:	b	14378 <__assert_fail@plt+0x29d8>
   14370:	cmp	r3, #2
   14374:	moveq	r0, r4
   14378:	add	sp, sp, #12
   1437c:	ldrd	r4, [sp]
   14380:	ldrd	r6, [sp, #8]
   14384:	add	sp, sp, #16
   14388:	pop	{pc}		; (ldr pc, [sp], #4)
   1438c:	strd	r4, [sp, #-24]!	; 0xffffffe8
   14390:	strd	r6, [sp, #8]
   14394:	str	r8, [sp, #16]
   14398:	str	lr, [sp, #20]
   1439c:	sub	sp, sp, #16
   143a0:	mov	r5, r0
   143a4:	movw	r3, #61976	; 0xf218
   143a8:	movt	r3, #3
   143ac:	ldr	r0, [r3]
   143b0:	bl	1c8d8 <__assert_fail@plt+0xaf38>
   143b4:	movw	r3, #61980	; 0xf21c
   143b8:	movt	r3, #3
   143bc:	ldr	r4, [r3]
   143c0:	movw	r3, #61880	; 0xf1b8
   143c4:	movt	r3, #3
   143c8:	ldr	r6, [r3]
   143cc:	mov	r2, #5
   143d0:	movw	r1, #55624	; 0xd948
   143d4:	movt	r1, #2
   143d8:	mov	r0, #0
   143dc:	bl	11628 <dcgettext@plt>
   143e0:	mov	r7, r0
   143e4:	mov	r2, #5
   143e8:	movw	r1, #55640	; 0xd958
   143ec:	movt	r1, #2
   143f0:	mov	r0, #0
   143f4:	bl	11628 <dcgettext@plt>
   143f8:	mov	r8, r0
   143fc:	mov	r2, #5
   14400:	movw	r1, #55656	; 0xd968
   14404:	movt	r1, #2
   14408:	mov	r0, #0
   1440c:	bl	11628 <dcgettext@plt>
   14410:	mov	r3, #0
   14414:	str	r3, [sp, #12]
   14418:	str	r0, [sp, #8]
   1441c:	str	r8, [sp, #4]
   14420:	str	r7, [sp]
   14424:	mov	r3, r6
   14428:	movw	r2, #55672	; 0xd978
   1442c:	movt	r2, #2
   14430:	mov	r1, r5
   14434:	mov	r0, r4
   14438:	bl	1b940 <__assert_fail@plt+0x9fa0>
   1443c:	add	sp, sp, #16
   14440:	ldrd	r4, [sp]
   14444:	ldrd	r6, [sp, #8]
   14448:	ldr	r8, [sp, #16]
   1444c:	add	sp, sp, #20
   14450:	pop	{pc}		; (ldr pc, [sp], #4)
   14454:	strd	r4, [sp, #-28]!	; 0xffffffe4
   14458:	strd	r6, [sp, #8]
   1445c:	strd	r8, [sp, #16]
   14460:	str	lr, [sp, #24]
   14464:	sub	sp, sp, #8192	; 0x2000
   14468:	sub	sp, sp, #12
   1446c:	mov	r4, r0
   14470:	mov	r5, r3
   14474:	cmp	r2, #0
   14478:	beq	1453c <__assert_fail@plt+0x2b9c>
   1447c:	mov	r6, r1
   14480:	str	r1, [sp]
   14484:	mvn	r3, #0
   14488:	add	r2, sp, #8192	; 0x2000
   1448c:	add	r2, r2, #40	; 0x28
   14490:	ldr	r2, [r2]
   14494:	mov	r1, #8192	; 0x2000
   14498:	add	r0, sp, #8
   1449c:	bl	1ad7c <__assert_fail@plt+0x93dc>
   144a0:	mov	r7, r0
   144a4:	cmp	r0, #8192	; 0x2000
   144a8:	bcs	144dc <__assert_fail@plt+0x2b3c>
   144ac:	add	r6, sp, #8
   144b0:	mov	r1, r0
   144b4:	mov	r0, r6
   144b8:	bl	14574 <__assert_fail@plt+0x2bd4>
   144bc:	mov	r3, #0
   144c0:	strb	r3, [r6, r0]
   144c4:	mov	r2, r6
   144c8:	mov	r1, r5
   144cc:	mov	r0, r4
   144d0:	bl	117c0 <fprintf@plt>
   144d4:	mov	r4, r0
   144d8:	b	14554 <__assert_fail@plt+0x2bb4>
   144dc:	add	r9, r0, #1
   144e0:	mov	r0, r9
   144e4:	bl	1ba00 <__assert_fail@plt+0xa060>
   144e8:	mov	r8, r0
   144ec:	str	r6, [sp]
   144f0:	mvn	r3, #0
   144f4:	add	r2, sp, #8192	; 0x2000
   144f8:	add	r2, r2, #40	; 0x28
   144fc:	ldr	r2, [r2]
   14500:	mov	r1, r9
   14504:	bl	1ad7c <__assert_fail@plt+0x93dc>
   14508:	mov	r1, r7
   1450c:	mov	r0, r8
   14510:	bl	14574 <__assert_fail@plt+0x2bd4>
   14514:	mov	r3, #0
   14518:	strb	r3, [r8, r0]
   1451c:	mov	r2, r8
   14520:	mov	r1, r5
   14524:	mov	r0, r4
   14528:	bl	117c0 <fprintf@plt>
   1452c:	mov	r4, r0
   14530:	mov	r0, r8
   14534:	bl	1c948 <__assert_fail@plt+0xafa8>
   14538:	b	14554 <__assert_fail@plt+0x2bb4>
   1453c:	add	r3, sp, #8192	; 0x2000
   14540:	add	r3, r3, #40	; 0x28
   14544:	ldr	r2, [r3]
   14548:	mov	r1, r5
   1454c:	bl	117c0 <fprintf@plt>
   14550:	mov	r4, r0
   14554:	mov	r0, r4
   14558:	add	sp, sp, #8192	; 0x2000
   1455c:	add	sp, sp, #12
   14560:	ldrd	r4, [sp]
   14564:	ldrd	r6, [sp, #8]
   14568:	ldrd	r8, [sp, #16]
   1456c:	add	sp, sp, #24
   14570:	pop	{pc}		; (ldr pc, [sp], #4)
   14574:	strd	r4, [sp, #-36]!	; 0xffffffdc
   14578:	strd	r6, [sp, #8]
   1457c:	strd	r8, [sp, #16]
   14580:	strd	sl, [sp, #24]
   14584:	str	lr, [sp, #32]
   14588:	sub	sp, sp, #20
   1458c:	mov	sl, r0
   14590:	mov	r7, r1
   14594:	bl	116a0 <__ctype_get_mb_cur_max@plt>
   14598:	cmp	r0, #1
   1459c:	bls	145c4 <__assert_fail@plt+0x2c24>
   145a0:	add	r7, sl, r7
   145a4:	cmp	sl, r7
   145a8:	bcs	146fc <__assert_fail@plt+0x2d5c>
   145ac:	mov	r5, sl
   145b0:	mov	r4, sl
   145b4:	mov	r8, #0
   145b8:	mov	r9, #0
   145bc:	mov	fp, #63	; 0x3f
   145c0:	b	14638 <__assert_fail@plt+0x2c98>
   145c4:	add	r4, sl, r7
   145c8:	cmp	sl, r4
   145cc:	bcs	14720 <__assert_fail@plt+0x2d80>
   145d0:	bl	11778 <__ctype_b_loc@plt>
   145d4:	sub	sl, sl, #1
   145d8:	sub	r1, r4, #1
   145dc:	mov	ip, #63	; 0x3f
   145e0:	ldrb	r3, [sl, #1]!
   145e4:	ldr	r2, [r0]
   145e8:	lsl	r3, r3, #1
   145ec:	ldrh	r3, [r2, r3]
   145f0:	tst	r3, #16384	; 0x4000
   145f4:	strbeq	ip, [sl]
   145f8:	cmp	sl, r1
   145fc:	bne	145e0 <__assert_fail@plt+0x2c40>
   14600:	mov	r0, r7
   14604:	b	14704 <__assert_fail@plt+0x2d64>
   14608:	cmp	r3, #65	; 0x41
   1460c:	bcc	1465c <__assert_fail@plt+0x2cbc>
   14610:	cmp	r3, #95	; 0x5f
   14614:	bls	14628 <__assert_fail@plt+0x2c88>
   14618:	sub	r2, r3, #97	; 0x61
   1461c:	uxtb	r2, r2
   14620:	cmp	r2, #29
   14624:	bhi	1465c <__assert_fail@plt+0x2cbc>
   14628:	add	r4, r4, #1
   1462c:	strb	r3, [r5], #1
   14630:	cmp	r4, r7
   14634:	bcs	14700 <__assert_fail@plt+0x2d60>
   14638:	ldrb	r3, [r4]
   1463c:	cmp	r3, #63	; 0x3f
   14640:	bhi	14608 <__assert_fail@plt+0x2c68>
   14644:	cmp	r3, #37	; 0x25
   14648:	bcs	14628 <__assert_fail@plt+0x2c88>
   1464c:	sub	r2, r3, #32
   14650:	uxtb	r2, r2
   14654:	cmp	r2, #3
   14658:	bls	14628 <__assert_fail@plt+0x2c88>
   1465c:	strd	r8, [sp, #8]
   14660:	b	1468c <__assert_fail@plt+0x2cec>
   14664:	add	r4, r4, #1
   14668:	strb	fp, [r5], #1
   1466c:	b	14630 <__assert_fail@plt+0x2c90>
   14670:	strb	fp, [r5], #1
   14674:	mov	r4, r7
   14678:	b	14630 <__assert_fail@plt+0x2c90>
   1467c:	add	r0, sp, #8
   14680:	bl	11604 <mbsinit@plt>
   14684:	cmp	r0, #0
   14688:	bne	14630 <__assert_fail@plt+0x2c90>
   1468c:	add	r3, sp, #8
   14690:	sub	r2, r7, r4
   14694:	mov	r1, r4
   14698:	add	r0, sp, #4
   1469c:	bl	1caa4 <__assert_fail@plt+0xb104>
   146a0:	mov	r6, r0
   146a4:	cmn	r0, #1
   146a8:	beq	14664 <__assert_fail@plt+0x2cc4>
   146ac:	cmn	r0, #2
   146b0:	beq	14670 <__assert_fail@plt+0x2cd0>
   146b4:	cmp	r0, #0
   146b8:	movne	r6, r0
   146bc:	moveq	r6, #1
   146c0:	ldr	r0, [sp, #4]
   146c4:	bl	11574 <wcwidth@plt>
   146c8:	cmp	r0, #0
   146cc:	addlt	r4, r4, r6
   146d0:	strblt	fp, [r5], #1
   146d4:	blt	1467c <__assert_fail@plt+0x2cdc>
   146d8:	sub	r3, r5, #1
   146dc:	add	r1, r4, r6
   146e0:	ldrb	r2, [r4], #1
   146e4:	strb	r2, [r3, #1]!
   146e8:	cmp	r4, r1
   146ec:	bne	146e0 <__assert_fail@plt+0x2d40>
   146f0:	add	r5, r5, r6
   146f4:	mov	r4, r1
   146f8:	b	1467c <__assert_fail@plt+0x2cdc>
   146fc:	mov	r5, sl
   14700:	sub	r0, r5, sl
   14704:	add	sp, sp, #20
   14708:	ldrd	r4, [sp]
   1470c:	ldrd	r6, [sp, #8]
   14710:	ldrd	r8, [sp, #16]
   14714:	ldrd	sl, [sp, #24]
   14718:	add	sp, sp, #32
   1471c:	pop	{pc}		; (ldr pc, [sp], #4)
   14720:	mov	r0, r7
   14724:	b	14704 <__assert_fail@plt+0x2d64>
   14728:	strd	r4, [sp, #-32]!	; 0xffffffe0
   1472c:	strd	r6, [sp, #8]
   14730:	strd	r8, [sp, #16]
   14734:	str	sl, [sp, #24]
   14738:	str	lr, [sp, #28]
   1473c:	sub	sp, sp, #8
   14740:	mov	r8, r0
   14744:	movw	r6, #55704	; 0xd998
   14748:	movt	r6, #2
   1474c:	mov	r5, r6
   14750:	mov	r9, #0
   14754:	mov	r4, r9
   14758:	ldr	r7, [r5]
   1475c:	mov	r1, r8
   14760:	mov	r0, r7
   14764:	bl	11544 <strcmp@plt>
   14768:	cmp	r0, #0
   1476c:	beq	1485c <__assert_fail@plt+0x2ebc>
   14770:	mov	r0, r7
   14774:	bl	1b410 <__assert_fail@plt+0x9a70>
   14778:	bl	117a8 <strlen@plt>
   1477c:	add	r0, r0, #2
   14780:	add	r9, r9, r0
   14784:	add	r4, r4, #1
   14788:	add	r5, r5, #12
   1478c:	cmp	r4, #13
   14790:	bne	14758 <__assert_fail@plt+0x2db8>
   14794:	add	r0, r9, #1
   14798:	bl	1ba00 <__assert_fail@plt+0xa060>
   1479c:	mov	sl, r0
   147a0:	mov	r4, r0
   147a4:	mov	r5, #0
   147a8:	movw	r7, #56384	; 0xdc40
   147ac:	movt	r7, #2
   147b0:	movw	r9, #55860	; 0xda34
   147b4:	movt	r9, #2
   147b8:	b	147fc <__assert_fail@plt+0x2e5c>
   147bc:	ldrh	r3, [r9]
   147c0:	strh	r3, [r4]
   147c4:	ldrb	r3, [r9, #2]
   147c8:	strb	r3, [r4, #2]!
   147cc:	ldr	r0, [r6]
   147d0:	bl	1b410 <__assert_fail@plt+0x9a70>
   147d4:	mov	r2, r0
   147d8:	mov	r1, r7
   147dc:	mov	r0, r4
   147e0:	bl	118ec <sprintf@plt>
   147e4:	add	r4, r4, r0
   147e8:	add	r3, r5, #1
   147ec:	cmp	r3, #12
   147f0:	bhi	14824 <__assert_fail@plt+0x2e84>
   147f4:	add	r5, r5, #1
   147f8:	add	r6, r6, #12
   147fc:	cmp	r5, #0
   14800:	bne	147bc <__assert_fail@plt+0x2e1c>
   14804:	ldr	r0, [r6]
   14808:	bl	1b410 <__assert_fail@plt+0x9a70>
   1480c:	mov	r2, r0
   14810:	mov	r1, r7
   14814:	mov	r0, r4
   14818:	bl	118ec <sprintf@plt>
   1481c:	add	r4, r4, r0
   14820:	b	147f4 <__assert_fail@plt+0x2e54>
   14824:	mov	r2, #5
   14828:	movw	r1, #55864	; 0xda38
   1482c:	movt	r1, #2
   14830:	mov	r0, #0
   14834:	bl	11628 <dcgettext@plt>
   14838:	mov	r4, r0
   1483c:	mov	r0, r8
   14840:	bl	1b410 <__assert_fail@plt+0x9a70>
   14844:	str	sl, [sp]
   14848:	mov	r3, r0
   1484c:	mov	r2, r4
   14850:	mov	r1, #0
   14854:	mov	r0, #1
   14858:	bl	116d0 <error@plt>
   1485c:	movw	r3, #55704	; 0xd998
   14860:	movt	r3, #2
   14864:	add	r4, r4, r4, lsl #1
   14868:	add	r4, r3, r4, lsl #2
   1486c:	ldr	r0, [r4, #8]
   14870:	add	sp, sp, #8
   14874:	ldrd	r4, [sp]
   14878:	ldrd	r6, [sp, #8]
   1487c:	ldrd	r8, [sp, #16]
   14880:	ldr	sl, [sp, #24]
   14884:	add	sp, sp, #28
   14888:	pop	{pc}		; (ldr pc, [sp], #4)
   1488c:	cmp	r0, #12
   14890:	bhi	148a8 <__assert_fail@plt+0x2f08>
   14894:	movw	r3, #55704	; 0xd998
   14898:	movt	r3, #2
   1489c:	add	r0, r0, r0, lsl #1
   148a0:	ldr	r0, [r3, r0, lsl #2]
   148a4:	bx	lr
   148a8:	mov	r0, #0
   148ac:	bx	lr
   148b0:	cmp	r0, #12
   148b4:	bhi	148d0 <__assert_fail@plt+0x2f30>
   148b8:	movw	r3, #55704	; 0xd998
   148bc:	movt	r3, #2
   148c0:	add	r0, r0, r0, lsl #1
   148c4:	add	r0, r3, r0, lsl #2
   148c8:	ldr	r0, [r0, #8]
   148cc:	bx	lr
   148d0:	mvn	r0, #0
   148d4:	bx	lr
   148d8:	cmp	r0, #12
   148dc:	bhi	148f8 <__assert_fail@plt+0x2f58>
   148e0:	movw	r3, #55704	; 0xd998
   148e4:	movt	r3, #2
   148e8:	add	r0, r0, r0, lsl #1
   148ec:	add	r0, r3, r0, lsl #2
   148f0:	ldr	r0, [r0, #4]
   148f4:	bx	lr
   148f8:	mov	r0, #0
   148fc:	bx	lr
   14900:	cmp	r0, #12
   14904:	bhi	14970 <__assert_fail@plt+0x2fd0>
   14908:	push	{lr}		; (str lr, [sp, #-4]!)
   1490c:	movw	r3, #55704	; 0xd998
   14910:	movt	r3, #2
   14914:	add	r2, r0, r0, lsl #1
   14918:	add	r3, r3, r2, lsl #2
   1491c:	ldr	lr, [r3, #8]
   14920:	cmp	r0, #0
   14924:	beq	14978 <__assert_fail@plt+0x2fd8>
   14928:	movw	r3, #55704	; 0xd998
   1492c:	movt	r3, #2
   14930:	mov	r2, #0
   14934:	b	14948 <__assert_fail@plt+0x2fa8>
   14938:	add	r2, r2, #1
   1493c:	add	r3, r3, #12
   14940:	cmp	r0, r2
   14944:	beq	14968 <__assert_fail@plt+0x2fc8>
   14948:	ldr	ip, [r3, #4]
   1494c:	tst	r1, ip
   14950:	beq	14938 <__assert_fail@plt+0x2f98>
   14954:	ldr	ip, [r3, #8]
   14958:	cmp	ip, lr
   1495c:	bne	14938 <__assert_fail@plt+0x2f98>
   14960:	mov	r0, r2
   14964:	b	1496c <__assert_fail@plt+0x2fcc>
   14968:	mvn	r0, #0
   1496c:	pop	{pc}		; (ldr pc, [sp], #4)
   14970:	mvn	r0, #0
   14974:	bx	lr
   14978:	mvn	r0, #0
   1497c:	b	1496c <__assert_fail@plt+0x2fcc>
   14980:	strd	r4, [sp, #-16]!
   14984:	str	r6, [sp, #8]
   14988:	str	lr, [sp, #12]
   1498c:	ldr	r5, [sp, #16]
   14990:	cmp	r2, #0
   14994:	beq	149ec <__assert_fail@plt+0x304c>
   14998:	mov	r2, #0
   1499c:	str	r2, [r3]
   149a0:	str	r2, [r5]
   149a4:	ldr	r4, [r3]
   149a8:	add	r4, r0, r4
   149ac:	ldrb	r3, [r1]
   149b0:	cmp	r3, #0
   149b4:	beq	149cc <__assert_fail@plt+0x302c>
   149b8:	mov	r0, r4
   149bc:	bl	11904 <strpbrk@plt>
   149c0:	cmp	r0, #0
   149c4:	subne	r0, r0, r4
   149c8:	bne	149d4 <__assert_fail@plt+0x3034>
   149cc:	mov	r0, r4
   149d0:	bl	117a8 <strlen@plt>
   149d4:	str	r0, [r5]
   149d8:	mov	r0, #1
   149dc:	ldrd	r4, [sp]
   149e0:	ldr	r6, [sp, #8]
   149e4:	add	sp, sp, #12
   149e8:	pop	{pc}		; (ldr pc, [sp], #4)
   149ec:	ldr	ip, [r3]
   149f0:	ldr	lr, [r5]
   149f4:	add	ip, ip, lr
   149f8:	str	ip, [r3]
   149fc:	ldrb	lr, [r0, ip]
   14a00:	cmp	lr, #0
   14a04:	moveq	r0, r2
   14a08:	beq	149dc <__assert_fail@plt+0x303c>
   14a0c:	add	ip, ip, #1
   14a10:	str	ip, [r3]
   14a14:	b	149a4 <__assert_fail@plt+0x3004>
   14a18:	strd	r4, [sp, #-12]!
   14a1c:	str	lr, [sp, #8]
   14a20:	sub	sp, sp, #20
   14a24:	mov	r4, r0
   14a28:	mov	r5, r1
   14a2c:	mov	r2, #5
   14a30:	movw	r1, #56048	; 0xdaf0
   14a34:	movt	r1, #2
   14a38:	mov	r0, #0
   14a3c:	bl	11628 <dcgettext@plt>
   14a40:	movw	r3, #56296	; 0xdbe8
   14a44:	movt	r3, #2
   14a48:	str	r3, [sp, #8]
   14a4c:	movw	r3, #56320	; 0xdc00
   14a50:	movt	r3, #2
   14a54:	str	r3, [sp, #4]
   14a58:	movw	r3, #55672	; 0xd978
   14a5c:	movt	r3, #2
   14a60:	str	r3, [sp]
   14a64:	mov	r3, r5
   14a68:	movw	r2, #56256	; 0xdbc0
   14a6c:	movt	r2, #2
   14a70:	mov	r1, r0
   14a74:	mov	r0, r4
   14a78:	bl	117c0 <fprintf@plt>
   14a7c:	add	sp, sp, #20
   14a80:	ldrd	r4, [sp]
   14a84:	add	sp, sp, #8
   14a88:	pop	{pc}		; (ldr pc, [sp], #4)
   14a8c:	ldrb	r3, [r0]
   14a90:	cmp	r3, #47	; 0x2f
   14a94:	bne	14aa4 <__assert_fail@plt+0x3104>
   14a98:	ldrb	r3, [r0, #1]!
   14a9c:	cmp	r3, #47	; 0x2f
   14aa0:	beq	14a98 <__assert_fail@plt+0x30f8>
   14aa4:	ldrb	r2, [r0]
   14aa8:	cmp	r2, #0
   14aac:	bxeq	lr
   14ab0:	push	{lr}		; (str lr, [sp, #-4]!)
   14ab4:	mov	r1, r0
   14ab8:	mov	r3, #0
   14abc:	mov	lr, #1
   14ac0:	mov	ip, r3
   14ac4:	b	14ae0 <__assert_fail@plt+0x3140>
   14ac8:	cmp	r3, #0
   14acc:	movne	r0, r1
   14ad0:	movne	r3, ip
   14ad4:	ldrb	r2, [r1, #1]!
   14ad8:	cmp	r2, #0
   14adc:	beq	14af0 <__assert_fail@plt+0x3150>
   14ae0:	cmp	r2, #47	; 0x2f
   14ae4:	moveq	r3, lr
   14ae8:	bne	14ac8 <__assert_fail@plt+0x3128>
   14aec:	b	14ad4 <__assert_fail@plt+0x3134>
   14af0:	pop	{pc}		; (ldr pc, [sp], #4)
   14af4:	str	r4, [sp, #-8]!
   14af8:	str	lr, [sp, #4]
   14afc:	mov	r4, r0
   14b00:	bl	117a8 <strlen@plt>
   14b04:	cmp	r0, #1
   14b08:	bls	14b28 <__assert_fail@plt+0x3188>
   14b0c:	add	r3, r4, r0
   14b10:	ldrb	r3, [r3, #-1]
   14b14:	cmp	r3, #47	; 0x2f
   14b18:	subeq	r0, r0, #2
   14b1c:	addeq	r3, r4, r0
   14b20:	rsbeq	r1, r4, #1
   14b24:	beq	14b34 <__assert_fail@plt+0x3194>
   14b28:	ldr	r4, [sp]
   14b2c:	add	sp, sp, #4
   14b30:	pop	{pc}		; (ldr pc, [sp], #4)
   14b34:	add	r0, r1, r3
   14b38:	cmp	r3, r4
   14b3c:	beq	14b28 <__assert_fail@plt+0x3188>
   14b40:	ldrb	r2, [r3], #-1
   14b44:	cmp	r2, #47	; 0x2f
   14b48:	bne	14b28 <__assert_fail@plt+0x3188>
   14b4c:	b	14b34 <__assert_fail@plt+0x3194>
   14b50:	movw	r3, #62100	; 0xf294
   14b54:	movt	r3, #3
   14b58:	str	r0, [r3]
   14b5c:	bx	lr
   14b60:	movw	r3, #62100	; 0xf294
   14b64:	movt	r3, #3
   14b68:	strb	r0, [r3, #4]
   14b6c:	bx	lr
   14b70:	strd	r4, [sp, #-16]!
   14b74:	str	r6, [sp, #8]
   14b78:	str	lr, [sp, #12]
   14b7c:	sub	sp, sp, #8
   14b80:	movw	r3, #61980	; 0xf21c
   14b84:	movt	r3, #3
   14b88:	ldr	r0, [r3]
   14b8c:	bl	2c0c4 <__assert_fail@plt+0x1a724>
   14b90:	cmp	r0, #0
   14b94:	beq	14bbc <__assert_fail@plt+0x321c>
   14b98:	movw	r3, #62100	; 0xf294
   14b9c:	movt	r3, #3
   14ba0:	ldrb	r3, [r3, #4]
   14ba4:	cmp	r3, #0
   14ba8:	beq	14be8 <__assert_fail@plt+0x3248>
   14bac:	bl	117d8 <__errno_location@plt>
   14bb0:	ldr	r3, [r0]
   14bb4:	cmp	r3, #32
   14bb8:	bne	14be8 <__assert_fail@plt+0x3248>
   14bbc:	movw	r3, #61976	; 0xf218
   14bc0:	movt	r3, #3
   14bc4:	ldr	r0, [r3]
   14bc8:	bl	2c0c4 <__assert_fail@plt+0x1a724>
   14bcc:	cmp	r0, #0
   14bd0:	bne	14c70 <__assert_fail@plt+0x32d0>
   14bd4:	add	sp, sp, #8
   14bd8:	ldrd	r4, [sp]
   14bdc:	ldr	r6, [sp, #8]
   14be0:	add	sp, sp, #12
   14be4:	pop	{pc}		; (ldr pc, [sp], #4)
   14be8:	mov	r2, #5
   14bec:	movw	r1, #56368	; 0xdc30
   14bf0:	movt	r1, #2
   14bf4:	mov	r0, #0
   14bf8:	bl	11628 <dcgettext@plt>
   14bfc:	mov	r4, r0
   14c00:	movw	r3, #62100	; 0xf294
   14c04:	movt	r3, #3
   14c08:	ldr	r5, [r3]
   14c0c:	cmp	r5, #0
   14c10:	beq	14c50 <__assert_fail@plt+0x32b0>
   14c14:	bl	117d8 <__errno_location@plt>
   14c18:	ldr	r6, [r0]
   14c1c:	mov	r0, r5
   14c20:	bl	1b20c <__assert_fail@plt+0x986c>
   14c24:	str	r4, [sp]
   14c28:	mov	r3, r0
   14c2c:	movw	r2, #56380	; 0xdc3c
   14c30:	movt	r2, #2
   14c34:	mov	r1, r6
   14c38:	mov	r0, #0
   14c3c:	bl	116d0 <error@plt>
   14c40:	movw	r3, #61884	; 0xf1bc
   14c44:	movt	r3, #3
   14c48:	ldr	r0, [r3]
   14c4c:	bl	115c8 <_exit@plt>
   14c50:	bl	117d8 <__errno_location@plt>
   14c54:	mov	r3, r4
   14c58:	movw	r2, #56384	; 0xdc40
   14c5c:	movt	r2, #2
   14c60:	ldr	r1, [r0]
   14c64:	mov	r0, #0
   14c68:	bl	116d0 <error@plt>
   14c6c:	b	14c40 <__assert_fail@plt+0x32a0>
   14c70:	movw	r3, #61884	; 0xf1bc
   14c74:	movt	r3, #3
   14c78:	ldr	r0, [r3]
   14c7c:	bl	115c8 <_exit@plt>
   14c80:	push	{r1, r2, r3}
   14c84:	push	{lr}		; (str lr, [sp, #-4]!)
   14c88:	sub	sp, sp, #8
   14c8c:	ldr	r1, [sp, #12]
   14c90:	tst	r1, #64	; 0x40
   14c94:	addne	r3, sp, #20
   14c98:	strne	r3, [sp, #4]
   14c9c:	ldrne	r2, [sp, #16]
   14ca0:	moveq	r2, #0
   14ca4:	bl	116e8 <open64@plt>
   14ca8:	bl	1b470 <__assert_fail@plt+0x9ad0>
   14cac:	add	sp, sp, #8
   14cb0:	pop	{lr}		; (ldr lr, [sp], #4)
   14cb4:	add	sp, sp, #12
   14cb8:	bx	lr
   14cbc:	andeq	r0, r0, r0
   14cc0:	str	r4, [sp, #-16]!
   14cc4:	strd	r6, [sp, #4]
   14cc8:	str	lr, [sp, #12]
   14ccc:	vpush	{d8}
   14cd0:	vmov.f64	d8, d0
   14cd4:	cmp	r0, #1
   14cd8:	beq	14d40 <__assert_fail@plt+0x33a0>
   14cdc:	mov	r4, r0
   14ce0:	vldr	d7, [pc, #112]	; 14d58 <__assert_fail@plt+0x33b8>
   14ce4:	vcmpe.f64	d0, d7
   14ce8:	vmrs	APSR_nzcv, fpscr
   14cec:	bpl	14d40 <__assert_fail@plt+0x33a0>
   14cf0:	vmov	r0, r1, d0
   14cf4:	bl	2c918 <__assert_fail@plt+0x1af78>
   14cf8:	mov	r6, r0
   14cfc:	mov	r7, r1
   14d00:	cmp	r4, #0
   14d04:	movne	r0, #0
   14d08:	bne	14d28 <__assert_fail@plt+0x3388>
   14d0c:	mov	r0, r6
   14d10:	bl	2c854 <__assert_fail@plt+0x1aeb4>
   14d14:	vmov	d7, r0, r1
   14d18:	vcmp.f64	d7, d8
   14d1c:	vmrs	APSR_nzcv, fpscr
   14d20:	movne	r0, #1
   14d24:	moveq	r0, #0
   14d28:	adds	r2, r6, r0
   14d2c:	adc	r3, r7, r0, asr #31
   14d30:	mov	r0, r2
   14d34:	mov	r1, r3
   14d38:	bl	2c854 <__assert_fail@plt+0x1aeb4>
   14d3c:	vmov	d8, r0, r1
   14d40:	vmov.f64	d0, d8
   14d44:	vpop	{d8}
   14d48:	ldr	r4, [sp]
   14d4c:	ldrd	r6, [sp, #4]
   14d50:	add	sp, sp, #12
   14d54:	pop	{pc}		; (ldr pc, [sp], #4)
   14d58:	andeq	r0, r0, r0
   14d5c:	mvnsmi	r0, #0
   14d60:	strd	r4, [sp, #-36]!	; 0xffffffdc
   14d64:	strd	r6, [sp, #8]
   14d68:	strd	r8, [sp, #16]
   14d6c:	strd	sl, [sp, #24]
   14d70:	str	lr, [sp, #32]
   14d74:	vpush	{d8-d9}
   14d78:	sub	sp, sp, #116	; 0x74
   14d7c:	mov	r6, r0
   14d80:	mov	r7, r1
   14d84:	mov	r8, r2
   14d88:	str	r2, [sp, #28]
   14d8c:	mov	r9, r3
   14d90:	and	r3, r3, #3
   14d94:	str	r3, [sp]
   14d98:	ands	r3, r9, #32
   14d9c:	str	r3, [sp, #36]	; 0x24
   14da0:	movne	r3, #1024	; 0x400
   14da4:	moveq	r3, #1000	; 0x3e8
   14da8:	str	r3, [sp, #32]
   14dac:	bl	118d4 <localeconv@plt>
   14db0:	mov	r4, r0
   14db4:	ldr	r5, [r0]
   14db8:	mov	r0, r5
   14dbc:	bl	117a8 <strlen@plt>
   14dc0:	mov	fp, r0
   14dc4:	sub	r2, r0, #1
   14dc8:	cmp	r2, #16
   14dcc:	movcc	fp, r0
   14dd0:	movcs	fp, #1
   14dd4:	movw	r3, #56420	; 0xdc64
   14dd8:	movt	r3, #2
   14ddc:	cmp	r2, #15
   14de0:	movhi	r5, r3
   14de4:	ldr	sl, [r4, #8]
   14de8:	ldr	r3, [r4, #4]
   14dec:	mov	r4, r3
   14df0:	mov	r0, r3
   14df4:	bl	117a8 <strlen@plt>
   14df8:	movw	r3, #54652	; 0xd57c
   14dfc:	movt	r3, #2
   14e00:	mov	r1, r4
   14e04:	cmp	r0, #16
   14e08:	movhi	r1, r3
   14e0c:	str	r1, [sp, #12]
   14e10:	add	r3, r8, #644	; 0x284
   14e14:	add	r3, r3, #3
   14e18:	str	r3, [sp, #24]
   14e1c:	ldrd	r2, [sp, #176]	; 0xb0
   14e20:	ldrd	r0, [sp, #168]	; 0xa8
   14e24:	cmp	r3, r1
   14e28:	cmpeq	r2, r0
   14e2c:	bhi	14fa0 <__assert_fail@plt+0x3600>
   14e30:	bl	2c8c8 <__assert_fail@plt+0x1af28>
   14e34:	orrs	r3, r2, r3
   14e38:	bne	14e7c <__assert_fail@plt+0x34dc>
   14e3c:	ldrd	r2, [sp, #176]	; 0xb0
   14e40:	ldrd	r0, [sp, #168]	; 0xa8
   14e44:	bl	2c8c8 <__assert_fail@plt+0x1af28>
   14e48:	mov	r2, r0
   14e4c:	mov	r3, r1
   14e50:	mul	r0, r0, r7
   14e54:	mla	ip, r6, r1, r0
   14e58:	umull	r0, r1, r2, r6
   14e5c:	strd	r0, [sp, #16]
   14e60:	add	r1, ip, r1
   14e64:	str	r1, [sp, #20]
   14e68:	ldrd	r0, [sp, #16]
   14e6c:	bl	2c8c8 <__assert_fail@plt+0x1af28>
   14e70:	cmp	r1, r7
   14e74:	cmpeq	r0, r6
   14e78:	beq	15134 <__assert_fail@plt+0x3794>
   14e7c:	ldrd	r0, [sp, #168]	; 0xa8
   14e80:	bl	2c854 <__assert_fail@plt+0x1aeb4>
   14e84:	vmov	d9, r0, r1
   14e88:	ldrd	r0, [sp, #176]	; 0xb0
   14e8c:	bl	2c854 <__assert_fail@plt+0x1aeb4>
   14e90:	vmov	d7, r0, r1
   14e94:	vdiv.f64	d8, d9, d7
   14e98:	mov	r0, r6
   14e9c:	mov	r1, r7
   14ea0:	bl	2c854 <__assert_fail@plt+0x1aeb4>
   14ea4:	vmov	d7, r0, r1
   14ea8:	vmul.f64	d0, d8, d7
   14eac:	tst	r9, #16
   14eb0:	beq	1508c <__assert_fail@plt+0x36ec>
   14eb4:	vldr	d7, [pc, #1004]	; 152a8 <__assert_fail@plt+0x3908>
   14eb8:	mov	r7, #0
   14ebc:	vldr	s13, [sp, #32]
   14ec0:	vcvt.f64.u32	d6, s13
   14ec4:	vmul.f64	d7, d7, d6
   14ec8:	add	r7, r7, #1
   14ecc:	vmul.f64	d5, d6, d7
   14ed0:	vcmpe.f64	d5, d0
   14ed4:	vmrs	APSR_nzcv, fpscr
   14ed8:	movls	r3, #1
   14edc:	movhi	r3, #0
   14ee0:	cmp	r7, #7
   14ee4:	movgt	r3, #0
   14ee8:	andle	r3, r3, #1
   14eec:	cmp	r3, #0
   14ef0:	bne	14ec4 <__assert_fail@plt+0x3524>
   14ef4:	vdiv.f64	d8, d0, d7
   14ef8:	vmov.f64	d0, d8
   14efc:	ldr	r0, [sp]
   14f00:	bl	14cc0 <__assert_fail@plt+0x3320>
   14f04:	vmov	r2, r3, d0
   14f08:	movw	r1, #56432	; 0xdc70
   14f0c:	movt	r1, #2
   14f10:	ldr	r4, [sp, #28]
   14f14:	mov	r0, r4
   14f18:	bl	118ec <sprintf@plt>
   14f1c:	mov	r0, r4
   14f20:	bl	117a8 <strlen@plt>
   14f24:	mov	r8, r0
   14f28:	add	fp, fp, #1
   14f2c:	ldr	r3, [sp, #36]	; 0x24
   14f30:	clz	r3, r3
   14f34:	lsr	r3, r3, #5
   14f38:	add	r3, r3, #1
   14f3c:	add	r3, r3, fp
   14f40:	cmp	r3, r0
   14f44:	bcc	14f60 <__assert_fail@plt+0x35c0>
   14f48:	tst	r9, #8
   14f4c:	beq	150c0 <__assert_fail@plt+0x3720>
   14f50:	add	r3, r4, r0
   14f54:	ldrb	r3, [r3, #-1]
   14f58:	cmp	r3, #48	; 0x30
   14f5c:	bne	150c0 <__assert_fail@plt+0x3720>
   14f60:	vldr	d9, [pc, #840]	; 152b0 <__assert_fail@plt+0x3910>
   14f64:	vmul.f64	d0, d8, d9
   14f68:	ldr	r0, [sp]
   14f6c:	bl	14cc0 <__assert_fail@plt+0x3320>
   14f70:	vdiv.f64	d7, d0, d9
   14f74:	vmov	r2, r3, d7
   14f78:	movw	r1, #56424	; 0xdc68
   14f7c:	movt	r1, #2
   14f80:	ldr	r4, [sp, #28]
   14f84:	mov	r0, r4
   14f88:	bl	118ec <sprintf@plt>
   14f8c:	mov	r0, r4
   14f90:	bl	117a8 <strlen@plt>
   14f94:	mov	r8, r0
   14f98:	mov	fp, #0
   14f9c:	b	150c0 <__assert_fail@plt+0x3720>
   14fa0:	ldrd	r2, [sp, #168]	; 0xa8
   14fa4:	orrs	r3, r2, r3
   14fa8:	beq	14e7c <__assert_fail@plt+0x34dc>
   14fac:	ldrd	r2, [sp, #168]	; 0xa8
   14fb0:	ldrd	r0, [sp, #176]	; 0xb0
   14fb4:	bl	2c8c8 <__assert_fail@plt+0x1af28>
   14fb8:	orrs	r3, r2, r3
   14fbc:	bne	14e7c <__assert_fail@plt+0x34dc>
   14fc0:	ldrd	r2, [sp, #168]	; 0xa8
   14fc4:	ldrd	r0, [sp, #176]	; 0xb0
   14fc8:	bl	2c8c8 <__assert_fail@plt+0x1af28>
   14fcc:	strd	r0, [sp, #40]	; 0x28
   14fd0:	mov	r2, r0
   14fd4:	mov	r3, r1
   14fd8:	mov	r0, r6
   14fdc:	mov	r1, r7
   14fe0:	bl	2c8c8 <__assert_fail@plt+0x1af28>
   14fe4:	lsl	r1, r3, #2
   14fe8:	lsl	r4, r2, #2
   14fec:	orr	r0, r1, r2, lsr #30
   14ff0:	adds	r4, r4, r2
   14ff4:	adc	r3, r0, r3
   14ff8:	adds	r4, r4, r4
   14ffc:	adc	r8, r3, r3
   15000:	ldrd	r2, [sp, #40]	; 0x28
   15004:	mov	r0, r4
   15008:	mov	r1, r8
   1500c:	bl	2c8c8 <__assert_fail@plt+0x1af28>
   15010:	adds	r1, r2, r2
   15014:	str	r1, [sp, #48]	; 0x30
   15018:	adc	r3, r3, r3
   1501c:	str	r3, [sp, #52]	; 0x34
   15020:	ldrd	r2, [sp, #40]	; 0x28
   15024:	mov	r0, r6
   15028:	mov	r1, r7
   1502c:	bl	2c8c8 <__assert_fail@plt+0x1af28>
   15030:	strd	r0, [sp, #16]
   15034:	ldrd	r2, [sp, #40]	; 0x28
   15038:	mov	r0, r4
   1503c:	mov	r1, r8
   15040:	bl	2c8c8 <__assert_fail@plt+0x1af28>
   15044:	mov	r6, r0
   15048:	ldrd	r2, [sp, #40]	; 0x28
   1504c:	ldrd	r0, [sp, #48]	; 0x30
   15050:	cmp	r3, r1
   15054:	cmpeq	r2, r0
   15058:	bls	15070 <__assert_fail@plt+0x36d0>
   1505c:	mov	r3, r0
   15060:	orrs	r3, r3, r1
   15064:	movne	r4, #1
   15068:	moveq	r4, #0
   1506c:	b	1513c <__assert_fail@plt+0x379c>
   15070:	ldrd	r2, [sp, #40]	; 0x28
   15074:	ldrd	r0, [sp, #48]	; 0x30
   15078:	cmp	r3, r1
   1507c:	cmpeq	r2, r0
   15080:	movcc	r4, #3
   15084:	movcs	r4, #2
   15088:	b	1513c <__assert_fail@plt+0x379c>
   1508c:	ldr	r0, [sp]
   15090:	bl	14cc0 <__assert_fail@plt+0x3320>
   15094:	vmov	r2, r3, d0
   15098:	movw	r1, #56424	; 0xdc68
   1509c:	movt	r1, #2
   150a0:	ldr	r4, [sp, #28]
   150a4:	mov	r0, r4
   150a8:	bl	118ec <sprintf@plt>
   150ac:	mov	r0, r4
   150b0:	bl	117a8 <strlen@plt>
   150b4:	mov	r8, r0
   150b8:	mov	fp, #0
   150bc:	mvn	r7, #0
   150c0:	ldr	r3, [sp, #24]
   150c4:	sub	r6, r3, r8
   150c8:	mov	r2, r8
   150cc:	ldr	r1, [sp, #28]
   150d0:	mov	r0, r6
   150d4:	bl	1158c <memmove@plt>
   150d8:	sub	r8, r8, fp
   150dc:	add	r8, r6, r8
   150e0:	tst	r9, #4
   150e4:	bne	15484 <__assert_fail@plt+0x3ae4>
   150e8:	tst	r9, #128	; 0x80
   150ec:	beq	15104 <__assert_fail@plt+0x3764>
   150f0:	cmp	r7, #0
   150f4:	blt	15510 <__assert_fail@plt+0x3b70>
   150f8:	and	r3, r9, #256	; 0x100
   150fc:	orrs	r2, r3, r7
   15100:	bne	15570 <__assert_fail@plt+0x3bd0>
   15104:	mov	r3, #0
   15108:	ldr	r2, [sp, #24]
   1510c:	strb	r3, [r2]
   15110:	mov	r0, r6
   15114:	add	sp, sp, #116	; 0x74
   15118:	vpop	{d8-d9}
   1511c:	ldrd	r4, [sp]
   15120:	ldrd	r6, [sp, #8]
   15124:	ldrd	r8, [sp, #16]
   15128:	ldrd	sl, [sp, #24]
   1512c:	add	sp, sp, #32
   15130:	pop	{pc}		; (ldr pc, [sp], #4)
   15134:	mov	r4, #0
   15138:	mov	r6, r4
   1513c:	ands	r3, r9, #16
   15140:	str	r3, [sp, #40]	; 0x28
   15144:	beq	152fc <__assert_fail@plt+0x395c>
   15148:	ldr	r8, [sp, #32]
   1514c:	mov	r3, #0
   15150:	ldrd	r0, [sp, #16]
   15154:	cmp	r3, r1
   15158:	cmpeq	r8, r0
   1515c:	bhi	15334 <__assert_fail@plt+0x3994>
   15160:	mov	r7, #0
   15164:	str	r5, [sp, #48]	; 0x30
   15168:	str	fp, [sp, #56]	; 0x38
   1516c:	str	sl, [sp, #60]	; 0x3c
   15170:	mov	sl, r8
   15174:	mov	fp, r3
   15178:	b	151b8 <__assert_fail@plt+0x3818>
   1517c:	add	r4, r4, r5
   15180:	cmp	r4, r8
   15184:	movhi	r4, #3
   15188:	movls	r4, #2
   1518c:	add	r7, r7, #1
   15190:	ldrd	r2, [sp, #16]
   15194:	cmp	fp, r3
   15198:	cmpeq	sl, r2
   1519c:	movls	r3, #1
   151a0:	movhi	r3, #0
   151a4:	cmp	r7, #7
   151a8:	movgt	r3, #0
   151ac:	andle	r3, r3, #1
   151b0:	cmp	r3, #0
   151b4:	beq	1520c <__assert_fail@plt+0x386c>
   151b8:	mov	r2, sl
   151bc:	mov	r3, fp
   151c0:	ldrd	r0, [sp, #16]
   151c4:	bl	2c8c8 <__assert_fail@plt+0x1af28>
   151c8:	add	r2, r2, r2, lsl #2
   151cc:	add	r2, r6, r2, lsl #1
   151d0:	udiv	r6, r2, r8
   151d4:	mls	r2, r8, r6, r2
   151d8:	asr	r5, r4, #1
   151dc:	add	r5, r5, r2, lsl #1
   151e0:	mov	r2, sl
   151e4:	mov	r3, fp
   151e8:	ldrd	r0, [sp, #16]
   151ec:	bl	2c8c8 <__assert_fail@plt+0x1af28>
   151f0:	strd	r0, [sp, #16]
   151f4:	cmp	r8, r5
   151f8:	bls	1517c <__assert_fail@plt+0x37dc>
   151fc:	cmn	r4, r5
   15200:	movne	r4, #1
   15204:	moveq	r4, #0
   15208:	b	1518c <__assert_fail@plt+0x37ec>
   1520c:	ldr	r5, [sp, #48]	; 0x30
   15210:	ldr	fp, [sp, #56]	; 0x38
   15214:	ldr	sl, [sp, #60]	; 0x3c
   15218:	ldrd	r2, [sp, #16]
   1521c:	cmp	r3, #0
   15220:	cmpeq	r2, #9
   15224:	bhi	15340 <__assert_fail@plt+0x39a0>
   15228:	ldr	r3, [sp]
   1522c:	cmp	r3, #1
   15230:	beq	15290 <__assert_fail@plt+0x38f0>
   15234:	adds	r3, r4, #0
   15238:	movne	r3, #1
   1523c:	ldr	r2, [sp]
   15240:	cmp	r2, #0
   15244:	movne	r3, #0
   15248:	cmp	r3, #0
   1524c:	beq	155fc <__assert_fail@plt+0x3c5c>
   15250:	add	r6, r6, #1
   15254:	cmp	r6, #10
   15258:	beq	152b8 <__assert_fail@plt+0x3918>
   1525c:	ldr	r3, [sp, #28]
   15260:	add	r8, r3, #644	; 0x284
   15264:	add	r8, r8, #2
   15268:	add	r6, r6, #48	; 0x30
   1526c:	strb	r6, [r3, #646]	; 0x286
   15270:	sub	r8, r8, fp
   15274:	mov	r2, fp
   15278:	mov	r1, r5
   1527c:	mov	r0, r8
   15280:	bl	115d4 <memcpy@plt>
   15284:	mov	r6, #0
   15288:	mov	r4, r6
   1528c:	b	15304 <__assert_fail@plt+0x3964>
   15290:	and	r3, r6, #1
   15294:	add	r3, r3, r4
   15298:	cmp	r3, #2
   1529c:	movle	r3, #0
   152a0:	movgt	r3, #1
   152a4:	b	15248 <__assert_fail@plt+0x38a8>
   152a8:	andeq	r0, r0, r0
   152ac:	svccc	0x00f00000	; IMB
   152b0:	andeq	r0, r0, r0
   152b4:	eormi	r0, r4, r0
   152b8:	ldr	r3, [sp, #16]
   152bc:	adds	r3, r3, #1
   152c0:	str	r3, [sp, #16]
   152c4:	ldr	r3, [sp, #20]
   152c8:	adc	r3, r3, #0
   152cc:	str	r3, [sp, #20]
   152d0:	ldrd	r2, [sp, #16]
   152d4:	cmp	r3, #0
   152d8:	cmpeq	r2, #9
   152dc:	bls	152f0 <__assert_fail@plt+0x3950>
   152e0:	ldr	r8, [sp, #24]
   152e4:	mov	r4, #0
   152e8:	mov	r6, r4
   152ec:	b	15304 <__assert_fail@plt+0x3964>
   152f0:	mov	r4, #0
   152f4:	mov	r6, r4
   152f8:	b	15604 <__assert_fail@plt+0x3c64>
   152fc:	ldr	r8, [sp, #24]
   15300:	mvn	r7, #0
   15304:	ldr	r3, [sp]
   15308:	cmp	r3, #1
   1530c:	beq	15348 <__assert_fail@plt+0x39a8>
   15310:	ldr	r3, [sp]
   15314:	cmp	r3, #0
   15318:	movne	r6, #0
   1531c:	bne	15374 <__assert_fail@plt+0x39d4>
   15320:	add	r6, r6, r4
   15324:	cmp	r6, #0
   15328:	movle	r6, #0
   1532c:	movgt	r6, #1
   15330:	b	15374 <__assert_fail@plt+0x39d4>
   15334:	ldr	r8, [sp, #24]
   15338:	mov	r7, #0
   1533c:	b	15304 <__assert_fail@plt+0x3964>
   15340:	ldr	r8, [sp, #24]
   15344:	b	15304 <__assert_fail@plt+0x3964>
   15348:	ldr	r3, [sp, #16]
   1534c:	and	r0, r3, #1
   15350:	mov	r1, #0
   15354:	adds	r2, r0, r4
   15358:	adc	r3, r1, r4, asr #31
   1535c:	orr	r2, r2, r3
   15360:	cmp	r2, r1
   15364:	addne	r6, r6, #1
   15368:	cmp	r6, #5
   1536c:	movle	r6, #0
   15370:	movgt	r6, #1
   15374:	cmp	r6, #0
   15378:	beq	153d0 <__assert_fail@plt+0x3a30>
   1537c:	ldr	r3, [sp, #16]
   15380:	adds	r3, r3, #1
   15384:	str	r3, [sp, #16]
   15388:	ldr	r3, [sp, #20]
   1538c:	adc	r3, r3, #0
   15390:	str	r3, [sp, #20]
   15394:	ldr	r3, [sp, #40]	; 0x28
   15398:	cmp	r3, #0
   1539c:	beq	153d0 <__assert_fail@plt+0x3a30>
   153a0:	ldr	r2, [sp, #32]
   153a4:	mov	r3, #0
   153a8:	ldrd	r0, [sp, #16]
   153ac:	cmp	r3, r1
   153b0:	cmpeq	r2, r0
   153b4:	moveq	r3, #1
   153b8:	movne	r3, #0
   153bc:	cmp	r7, #7
   153c0:	movgt	r3, #0
   153c4:	andle	r3, r3, #1
   153c8:	cmp	r3, #0
   153cc:	bne	153f4 <__assert_fail@plt+0x3a54>
   153d0:	mov	r4, #10
   153d4:	mov	r5, #0
   153d8:	mov	fp, r8
   153dc:	strd	r4, [sp]
   153e0:	mov	r5, r9
   153e4:	mov	r9, r8
   153e8:	mov	r8, r7
   153ec:	ldrd	r6, [sp, #16]
   153f0:	b	1543c <__assert_fail@plt+0x3a9c>
   153f4:	add	r7, r7, #1
   153f8:	tst	r9, #8
   153fc:	beq	15410 <__assert_fail@plt+0x3a70>
   15400:	sub	r6, r8, #1
   15404:	mov	r3, #49	; 0x31
   15408:	strb	r3, [r8, #-1]
   1540c:	b	150e0 <__assert_fail@plt+0x3740>
   15410:	mov	r3, #48	; 0x30
   15414:	strb	r3, [r8, #-1]
   15418:	mvn	r3, fp
   1541c:	add	r8, r8, r3
   15420:	mov	r2, fp
   15424:	mov	r1, r5
   15428:	mov	r0, r8
   1542c:	bl	115d4 <memcpy@plt>
   15430:	b	15400 <__assert_fail@plt+0x3a60>
   15434:	mov	r6, r0
   15438:	mov	r7, r1
   1543c:	ldrd	r2, [sp]
   15440:	mov	r0, r6
   15444:	mov	r1, r7
   15448:	bl	2c8c8 <__assert_fail@plt+0x1af28>
   1544c:	add	r2, r2, #48	; 0x30
   15450:	strb	r2, [fp, #-1]!
   15454:	ldrd	r2, [sp]
   15458:	mov	r0, r6
   1545c:	mov	r1, r7
   15460:	bl	2c8c8 <__assert_fail@plt+0x1af28>
   15464:	cmp	r7, #0
   15468:	cmpeq	r6, #9
   1546c:	bhi	15434 <__assert_fail@plt+0x3a94>
   15470:	mov	r7, r8
   15474:	mov	r8, r9
   15478:	mov	r6, fp
   1547c:	mov	r9, r5
   15480:	b	150e0 <__assert_fail@plt+0x3740>
   15484:	sub	r4, r8, r6
   15488:	ldr	r0, [sp, #12]
   1548c:	bl	117a8 <strlen@plt>
   15490:	mov	fp, r0
   15494:	mov	r2, r4
   15498:	mov	r1, r6
   1549c:	add	r0, sp, #68	; 0x44
   154a0:	bl	115d4 <memcpy@plt>
   154a4:	mvn	r5, #0
   154a8:	mov	r6, r8
   154ac:	b	154f0 <__assert_fail@plt+0x3b50>
   154b0:	cmp	r5, r4
   154b4:	movcs	r5, r4
   154b8:	sub	r6, r6, r5
   154bc:	sub	r4, r4, r5
   154c0:	mov	r2, r5
   154c4:	add	r3, sp, #68	; 0x44
   154c8:	add	r1, r3, r4
   154cc:	mov	r0, r6
   154d0:	bl	115d4 <memcpy@plt>
   154d4:	cmp	r4, #0
   154d8:	beq	150e8 <__assert_fail@plt+0x3748>
   154dc:	sub	r6, r6, fp
   154e0:	mov	r2, fp
   154e4:	ldr	r1, [sp, #12]
   154e8:	mov	r0, r6
   154ec:	bl	115d4 <memcpy@plt>
   154f0:	ldrb	r3, [sl]
   154f4:	cmp	r3, #0
   154f8:	beq	154b0 <__assert_fail@plt+0x3b10>
   154fc:	cmp	r3, #255	; 0xff
   15500:	movne	r5, r3
   15504:	moveq	r5, r4
   15508:	add	sl, sl, #1
   1550c:	b	154b0 <__assert_fail@plt+0x3b10>
   15510:	ldrd	r2, [sp, #176]	; 0xb0
   15514:	cmp	r3, #0
   15518:	cmpeq	r2, #1
   1551c:	movls	r7, #0
   15520:	bls	150f8 <__assert_fail@plt+0x3758>
   15524:	mov	r7, #1
   15528:	mov	r2, #1
   1552c:	mov	r3, #0
   15530:	ldr	r1, [sp, #32]
   15534:	ldrd	r4, [sp, #176]	; 0xb0
   15538:	mul	r0, r1, r3
   1553c:	umull	r2, r3, r2, r1
   15540:	add	r3, r0, r3
   15544:	cmp	r5, r3
   15548:	cmpeq	r4, r2
   1554c:	bls	150f8 <__assert_fail@plt+0x3758>
   15550:	add	r7, r7, #1
   15554:	cmp	r7, #8
   15558:	bne	15538 <__assert_fail@plt+0x3b98>
   1555c:	and	r3, r9, #256	; 0x100
   15560:	tst	r9, #64	; 0x40
   15564:	bne	15578 <__assert_fail@plt+0x3bd8>
   15568:	ldr	r2, [sp, #24]
   1556c:	b	15590 <__assert_fail@plt+0x3bf0>
   15570:	tst	r9, #64	; 0x40
   15574:	beq	155d8 <__assert_fail@plt+0x3c38>
   15578:	ldr	r0, [sp, #28]
   1557c:	add	r2, r0, #648	; 0x288
   15580:	mov	r1, #32
   15584:	strb	r1, [r0, #647]	; 0x287
   15588:	cmp	r7, #0
   1558c:	beq	155e0 <__assert_fail@plt+0x3c40>
   15590:	ldr	ip, [sp, #36]	; 0x24
   15594:	cmp	ip, #0
   15598:	cmpeq	r7, #1
   1559c:	beq	15618 <__assert_fail@plt+0x3c78>
   155a0:	mov	r0, r2
   155a4:	movw	r1, #56388	; 0xdc44
   155a8:	movt	r1, #2
   155ac:	ldrb	r1, [r1, r7]
   155b0:	strb	r1, [r0], #1
   155b4:	str	r0, [sp, #24]
   155b8:	cmp	r3, #0
   155bc:	beq	15104 <__assert_fail@plt+0x3764>
   155c0:	cmp	ip, #0
   155c4:	movne	r3, #105	; 0x69
   155c8:	strbne	r3, [r2, #1]
   155cc:	addne	r2, r2, #2
   155d0:	ldreq	r2, [sp, #24]
   155d4:	b	155ec <__assert_fail@plt+0x3c4c>
   155d8:	ldr	r2, [sp, #24]
   155dc:	b	15588 <__assert_fail@plt+0x3be8>
   155e0:	cmp	r3, #0
   155e4:	streq	r2, [sp, #24]
   155e8:	beq	15104 <__assert_fail@plt+0x3764>
   155ec:	mov	r3, #66	; 0x42
   155f0:	strb	r3, [r2], #1
   155f4:	str	r2, [sp, #24]
   155f8:	b	15104 <__assert_fail@plt+0x3764>
   155fc:	cmp	r6, #0
   15600:	bne	1525c <__assert_fail@plt+0x38bc>
   15604:	tst	r9, #8
   15608:	beq	1525c <__assert_fail@plt+0x38bc>
   1560c:	ldr	r8, [sp, #24]
   15610:	mov	r6, #0
   15614:	b	15304 <__assert_fail@plt+0x3964>
   15618:	mov	r1, r2
   1561c:	mov	r2, #107	; 0x6b
   15620:	strb	r2, [r1], #1
   15624:	str	r1, [sp, #24]
   15628:	cmp	r3, #0
   1562c:	beq	15104 <__assert_fail@plt+0x3764>
   15630:	ldr	r2, [sp, #24]
   15634:	b	155ec <__assert_fail@plt+0x3c4c>
   15638:	strd	r4, [sp, #-20]!	; 0xffffffec
   1563c:	strd	r6, [sp, #8]
   15640:	str	lr, [sp, #16]
   15644:	sub	sp, sp, #20
   15648:	mov	r7, r1
   1564c:	mov	r6, r2
   15650:	subs	r4, r0, #0
   15654:	beq	156d8 <__assert_fail@plt+0x3d38>
   15658:	ldrb	r3, [r4]
   1565c:	cmp	r3, #39	; 0x27
   15660:	addeq	r4, r4, #1
   15664:	moveq	r5, #4
   15668:	movne	r5, #0
   1566c:	movw	r1, #56388	; 0xdc44
   15670:	movt	r1, #2
   15674:	mov	r3, #4
   15678:	add	r2, r1, #12
   1567c:	add	r1, r1, #20
   15680:	mov	r0, r4
   15684:	bl	2bd30 <__assert_fail@plt+0x1a390>
   15688:	cmp	r0, #0
   1568c:	blt	15728 <__assert_fail@plt+0x3d88>
   15690:	movw	r3, #56388	; 0xdc44
   15694:	movt	r3, #2
   15698:	add	r3, r3, r0, lsl #2
   1569c:	ldr	r3, [r3, #12]
   156a0:	orr	r5, r5, r3
   156a4:	mov	r2, #1
   156a8:	mov	r3, #0
   156ac:	strd	r2, [r6]
   156b0:	str	r5, [r7]
   156b4:	mov	r0, #0
   156b8:	ldrd	r2, [r6]
   156bc:	orrs	r3, r2, r3
   156c0:	beq	157c4 <__assert_fail@plt+0x3e24>
   156c4:	add	sp, sp, #20
   156c8:	ldrd	r4, [sp]
   156cc:	ldrd	r6, [sp, #8]
   156d0:	add	sp, sp, #16
   156d4:	pop	{pc}		; (ldr pc, [sp], #4)
   156d8:	movw	r0, #56440	; 0xdc78
   156dc:	movt	r0, #2
   156e0:	bl	116f4 <getenv@plt>
   156e4:	subs	r4, r0, #0
   156e8:	bne	15658 <__assert_fail@plt+0x3cb8>
   156ec:	movw	r0, #56452	; 0xdc84
   156f0:	movt	r0, #2
   156f4:	bl	116f4 <getenv@plt>
   156f8:	subs	r4, r0, #0
   156fc:	bne	15658 <__assert_fail@plt+0x3cb8>
   15700:	movw	r0, #56464	; 0xdc90
   15704:	movt	r0, #2
   15708:	bl	116f4 <getenv@plt>
   1570c:	cmp	r0, #0
   15710:	moveq	r2, #1024	; 0x400
   15714:	movne	r2, #512	; 0x200
   15718:	mov	r3, #0
   1571c:	strd	r2, [r6]
   15720:	mov	r5, #0
   15724:	b	156b0 <__assert_fail@plt+0x3d10>
   15728:	movw	r3, #56480	; 0xdca0
   1572c:	movt	r3, #2
   15730:	str	r3, [sp]
   15734:	mov	r3, r6
   15738:	mov	r2, #0
   1573c:	add	r1, sp, #12
   15740:	mov	r0, r4
   15744:	bl	1c0a0 <__assert_fail@plt+0xa700>
   15748:	cmp	r0, #0
   1574c:	bne	157a4 <__assert_fail@plt+0x3e04>
   15750:	ldrb	r3, [r4]
   15754:	sub	r3, r3, #48	; 0x30
   15758:	uxtb	r3, r3
   1575c:	cmp	r3, #9
   15760:	bls	156b0 <__assert_fail@plt+0x3d10>
   15764:	ldr	r2, [sp, #12]
   15768:	cmp	r2, r4
   1576c:	beq	1578c <__assert_fail@plt+0x3dec>
   15770:	ldrb	r3, [r4, #1]!
   15774:	sub	r3, r3, #48	; 0x30
   15778:	uxtb	r3, r3
   1577c:	cmp	r3, #9
   15780:	bls	156b0 <__assert_fail@plt+0x3d10>
   15784:	cmp	r2, r4
   15788:	bne	15770 <__assert_fail@plt+0x3dd0>
   1578c:	ldrb	r3, [r4, #-1]
   15790:	cmp	r3, #66	; 0x42
   15794:	orrne	r5, r5, #128	; 0x80
   15798:	beq	157b0 <__assert_fail@plt+0x3e10>
   1579c:	orr	r5, r5, #32
   157a0:	b	156b0 <__assert_fail@plt+0x3d10>
   157a4:	mov	r3, #0
   157a8:	str	r3, [r7]
   157ac:	b	156b8 <__assert_fail@plt+0x3d18>
   157b0:	orr	r5, r5, #384	; 0x180
   157b4:	ldrb	r3, [r4, #-2]
   157b8:	cmp	r3, #105	; 0x69
   157bc:	bne	156b0 <__assert_fail@plt+0x3d10>
   157c0:	b	1579c <__assert_fail@plt+0x3dfc>
   157c4:	movw	r0, #56464	; 0xdc90
   157c8:	movt	r0, #2
   157cc:	bl	116f4 <getenv@plt>
   157d0:	cmp	r0, #0
   157d4:	moveq	r2, #1024	; 0x400
   157d8:	movne	r2, #512	; 0x200
   157dc:	mov	r3, #0
   157e0:	strd	r2, [r6]
   157e4:	mov	r0, #4
   157e8:	b	156c4 <__assert_fail@plt+0x3d24>
   157ec:	strd	r4, [sp, #-36]!	; 0xffffffdc
   157f0:	strd	r6, [sp, #8]
   157f4:	strd	r8, [sp, #16]
   157f8:	strd	sl, [sp, #24]
   157fc:	str	lr, [sp, #32]
   15800:	add	fp, sp, #32
   15804:	sub	sp, sp, #28
   15808:	str	r0, [fp, #-40]	; 0xffffffd8
   1580c:	str	r2, [fp, #-48]	; 0xffffffd0
   15810:	str	r3, [fp, #-56]	; 0xffffffc8
   15814:	lsl	r3, r2, #2
   15818:	lsr	r4, r2, #30
   1581c:	adds	r4, r4, #0
   15820:	movne	r4, #1
   15824:	cmp	r3, #0
   15828:	movlt	r4, #1
   1582c:	cmp	r4, #0
   15830:	movne	r4, #0
   15834:	bne	15970 <__assert_fail@plt+0x3fd0>
   15838:	mov	r8, r1
   1583c:	mov	r0, r3
   15840:	cmp	r3, #4016	; 0xfb0
   15844:	bhi	15890 <__assert_fail@plt+0x3ef0>
   15848:	add	r3, r3, #22
   1584c:	bic	r3, r3, #7
   15850:	sub	sp, sp, r3
   15854:	add	r9, sp, #15
   15858:	bic	r9, r9, #15
   1585c:	cmp	r9, #0
   15860:	beq	15970 <__assert_fail@plt+0x3fd0>
   15864:	mov	r3, #1
   15868:	str	r3, [r9, #4]
   1586c:	ldr	r3, [fp, #-48]	; 0xffffffd0
   15870:	cmp	r3, #2
   15874:	bls	15930 <__assert_fail@plt+0x3f90>
   15878:	bl	11778 <__ctype_b_loc@plt>
   1587c:	str	r0, [fp, #-52]	; 0xffffffcc
   15880:	str	r8, [fp, #-44]	; 0xffffffd4
   15884:	mov	r5, #0
   15888:	mov	sl, #2
   1588c:	b	158f4 <__assert_fail@plt+0x3f54>
   15890:	bl	2c2c8 <__assert_fail@plt+0x1a928>
   15894:	mov	r9, r0
   15898:	b	1585c <__assert_fail@plt+0x3ebc>
   1589c:	cmp	r6, r4
   158a0:	beq	158d8 <__assert_fail@plt+0x3f38>
   158a4:	cmp	r5, #0
   158a8:	beq	15928 <__assert_fail@plt+0x3f88>
   158ac:	ldr	r3, [r9, r5, lsl #2]
   158b0:	sub	r5, r5, r3
   158b4:	ldrb	r4, [r8, r5]
   158b8:	lsl	r3, r4, #1
   158bc:	ldrh	r3, [r7, r3]
   158c0:	tst	r3, #256	; 0x100
   158c4:	beq	1589c <__assert_fail@plt+0x3efc>
   158c8:	bl	11748 <__ctype_tolower_loc@plt>
   158cc:	ldr	r3, [r0]
   158d0:	ldr	r4, [r3, r4, lsl #2]
   158d4:	b	1589c <__assert_fail@plt+0x3efc>
   158d8:	add	r5, r5, #1
   158dc:	sub	r3, sl, r5
   158e0:	str	r3, [r9, sl, lsl #2]
   158e4:	add	sl, sl, #1
   158e8:	ldr	r3, [fp, #-48]	; 0xffffffd0
   158ec:	cmp	sl, r3
   158f0:	beq	15930 <__assert_fail@plt+0x3f90>
   158f4:	ldr	r3, [fp, #-52]	; 0xffffffcc
   158f8:	ldr	r7, [r3]
   158fc:	ldr	r3, [fp, #-44]	; 0xffffffd4
   15900:	ldrb	r6, [r3, #1]!
   15904:	str	r3, [fp, #-44]	; 0xffffffd4
   15908:	lsl	r3, r6, #1
   1590c:	ldrh	r3, [r7, r3]
   15910:	tst	r3, #256	; 0x100
   15914:	beq	158b4 <__assert_fail@plt+0x3f14>
   15918:	bl	11748 <__ctype_tolower_loc@plt>
   1591c:	ldr	r3, [r0]
   15920:	ldrb	r6, [r3, r6, lsl #2]
   15924:	b	158b4 <__assert_fail@plt+0x3f14>
   15928:	str	sl, [r9, sl, lsl #2]
   1592c:	b	158e4 <__assert_fail@plt+0x3f44>
   15930:	mov	r6, #0
   15934:	ldr	r3, [fp, #-56]	; 0xffffffc8
   15938:	str	r6, [r3]
   1593c:	ldr	sl, [fp, #-40]	; 0xffffffd8
   15940:	b	159a0 <__assert_fail@plt+0x4000>
   15944:	add	r6, r6, #1
   15948:	add	sl, sl, #1
   1594c:	ldr	r3, [fp, #-48]	; 0xffffffd0
   15950:	cmp	r3, r6
   15954:	bne	159a0 <__assert_fail@plt+0x4000>
   15958:	ldr	r3, [fp, #-56]	; 0xffffffc8
   1595c:	ldr	r2, [fp, #-40]	; 0xffffffd8
   15960:	str	r2, [r3]
   15964:	mov	r0, r9
   15968:	bl	2c330 <__assert_fail@plt+0x1a990>
   1596c:	mov	r4, #1
   15970:	mov	r0, r4
   15974:	sub	sp, fp, #32
   15978:	ldrd	r4, [sp]
   1597c:	ldrd	r6, [sp, #8]
   15980:	ldrd	r8, [sp, #16]
   15984:	ldrd	sl, [sp, #24]
   15988:	add	sp, sp, #32
   1598c:	pop	{pc}		; (ldr pc, [sp], #4)
   15990:	ldr	r3, [fp, #-40]	; 0xffffffd8
   15994:	add	r3, r3, #1
   15998:	str	r3, [fp, #-40]	; 0xffffffd8
   1599c:	add	sl, sl, #1
   159a0:	ldrb	r4, [sl]
   159a4:	cmp	r4, #0
   159a8:	beq	15964 <__assert_fail@plt+0x3fc4>
   159ac:	bl	11778 <__ctype_b_loc@plt>
   159b0:	ldr	r7, [r0]
   159b4:	ldrb	r5, [r8, r6]
   159b8:	lsl	r3, r5, #1
   159bc:	ldrh	r3, [r7, r3]
   159c0:	tst	r3, #256	; 0x100
   159c4:	beq	159d4 <__assert_fail@plt+0x4034>
   159c8:	bl	11748 <__ctype_tolower_loc@plt>
   159cc:	ldr	r3, [r0]
   159d0:	ldr	r5, [r3, r5, lsl #2]
   159d4:	lsl	r3, r4, #1
   159d8:	ldrh	r3, [r7, r3]
   159dc:	tst	r3, #256	; 0x100
   159e0:	beq	159f0 <__assert_fail@plt+0x4050>
   159e4:	bl	11748 <__ctype_tolower_loc@plt>
   159e8:	ldr	r3, [r0]
   159ec:	ldr	r4, [r3, r4, lsl #2]
   159f0:	cmp	r4, r5
   159f4:	beq	15944 <__assert_fail@plt+0x3fa4>
   159f8:	cmp	r6, #0
   159fc:	beq	15990 <__assert_fail@plt+0x3ff0>
   15a00:	ldr	r3, [r9, r6, lsl #2]
   15a04:	ldr	r2, [fp, #-40]	; 0xffffffd8
   15a08:	add	r2, r2, r3
   15a0c:	str	r2, [fp, #-40]	; 0xffffffd8
   15a10:	sub	r6, r6, r3
   15a14:	b	159a0 <__assert_fail@plt+0x4000>
   15a18:	strd	r4, [sp, #-36]!	; 0xffffffdc
   15a1c:	strd	r6, [sp, #8]
   15a20:	strd	r8, [sp, #16]
   15a24:	strd	sl, [sp, #24]
   15a28:	str	lr, [sp, #32]
   15a2c:	add	fp, sp, #32
   15a30:	sub	sp, sp, #180	; 0xb4
   15a34:	str	r0, [fp, #-204]	; 0xffffff34
   15a38:	mov	r4, r1
   15a3c:	str	r2, [fp, #-200]	; 0xffffff38
   15a40:	mov	r0, r1
   15a44:	bl	174d0 <__assert_fail@plt+0x5b30>
   15a48:	str	r0, [fp, #-192]	; 0xffffff40
   15a4c:	mov	r2, #44	; 0x2c
   15a50:	umull	r6, r7, r0, r2
   15a54:	adds	r3, r7, #0
   15a58:	movne	r3, #1
   15a5c:	cmp	r6, #0
   15a60:	movlt	r3, #1
   15a64:	str	r3, [fp, #-196]	; 0xffffff3c
   15a68:	cmp	r3, #0
   15a6c:	bne	162e4 <__assert_fail@plt+0x4944>
   15a70:	mov	r1, r0
   15a74:	mul	r0, r2, r1
   15a78:	cmp	r0, #4016	; 0xfb0
   15a7c:	bhi	15ad8 <__assert_fail@plt+0x4138>
   15a80:	add	r3, r0, #22
   15a84:	bic	r3, r3, #7
   15a88:	sub	sp, sp, r3
   15a8c:	add	r7, sp, #15
   15a90:	bic	r7, r7, #15
   15a94:	cmp	r7, #0
   15a98:	beq	15e40 <__assert_fail@plt+0x44a0>
   15a9c:	ldr	r3, [fp, #-192]	; 0xffffff40
   15aa0:	add	r9, r3, r3, lsl #2
   15aa4:	add	r9, r7, r9, lsl #3
   15aa8:	str	r4, [fp, #-76]	; 0xffffffb4
   15aac:	mov	r3, #0
   15ab0:	strb	r3, [fp, #-92]	; 0xffffffa4
   15ab4:	mov	r0, #0
   15ab8:	mov	r1, #0
   15abc:	strd	r0, [fp, #-88]	; 0xffffffa8
   15ac0:	strb	r3, [fp, #-80]	; 0xffffffb0
   15ac4:	add	r4, r7, #16
   15ac8:	mov	r5, #1
   15acc:	movw	r8, #58600	; 0xe4e8
   15ad0:	movt	r8, #2
   15ad4:	b	15c08 <__assert_fail@plt+0x4268>
   15ad8:	bl	2c2c8 <__assert_fail@plt+0x1a928>
   15adc:	mov	r7, r0
   15ae0:	b	15a94 <__assert_fail@plt+0x40f4>
   15ae4:	ldr	r2, [fp, #-72]	; 0xffffffb8
   15ae8:	sub	r1, fp, #60	; 0x3c
   15aec:	mov	r0, r4
   15af0:	bl	115d4 <memcpy@plt>
   15af4:	str	r4, [r4, #-16]
   15af8:	b	15bc8 <__assert_fail@plt+0x4228>
   15afc:	sub	r0, fp, #88	; 0x58
   15b00:	bl	11604 <mbsinit@plt>
   15b04:	cmp	r0, #0
   15b08:	beq	15c54 <__assert_fail@plt+0x42b4>
   15b0c:	strb	r5, [fp, #-92]	; 0xffffffa4
   15b10:	ldr	r6, [fp, #-76]	; 0xffffffb4
   15b14:	bl	116a0 <__ctype_get_mb_cur_max@plt>
   15b18:	mov	r1, r0
   15b1c:	mov	r0, r6
   15b20:	bl	1b430 <__assert_fail@plt+0x9a90>
   15b24:	sub	r3, fp, #88	; 0x58
   15b28:	mov	r2, r0
   15b2c:	mov	r1, r6
   15b30:	sub	r0, fp, #64	; 0x40
   15b34:	bl	1caa4 <__assert_fail@plt+0xb104>
   15b38:	str	r0, [fp, #-72]	; 0xffffffb8
   15b3c:	cmn	r0, #1
   15b40:	streq	r5, [fp, #-72]	; 0xffffffb8
   15b44:	moveq	r3, #0
   15b48:	strbeq	r3, [fp, #-68]	; 0xffffffbc
   15b4c:	beq	15b98 <__assert_fail@plt+0x41f8>
   15b50:	cmn	r0, #2
   15b54:	beq	15c74 <__assert_fail@plt+0x42d4>
   15b58:	cmp	r0, #0
   15b5c:	bne	15b80 <__assert_fail@plt+0x41e0>
   15b60:	str	r5, [fp, #-72]	; 0xffffffb8
   15b64:	ldr	r3, [fp, #-76]	; 0xffffffb4
   15b68:	ldrb	r3, [r3]
   15b6c:	cmp	r3, #0
   15b70:	bne	15c8c <__assert_fail@plt+0x42ec>
   15b74:	ldr	r3, [fp, #-64]	; 0xffffffc0
   15b78:	cmp	r3, #0
   15b7c:	bne	15cac <__assert_fail@plt+0x430c>
   15b80:	strb	r5, [fp, #-68]	; 0xffffffbc
   15b84:	sub	r0, fp, #88	; 0x58
   15b88:	bl	11604 <mbsinit@plt>
   15b8c:	cmp	r0, #0
   15b90:	movne	r3, #0
   15b94:	strbne	r3, [fp, #-92]	; 0xffffffa4
   15b98:	strb	r5, [fp, #-80]	; 0xffffffb0
   15b9c:	ldrb	r3, [fp, #-68]	; 0xffffffbc
   15ba0:	cmp	r3, #0
   15ba4:	beq	15bb4 <__assert_fail@plt+0x4214>
   15ba8:	ldr	r6, [fp, #-64]	; 0xffffffc0
   15bac:	cmp	r6, #0
   15bb0:	beq	15ccc <__assert_fail@plt+0x432c>
   15bb4:	ldr	r3, [fp, #-76]	; 0xffffffb4
   15bb8:	sub	r2, fp, #60	; 0x3c
   15bbc:	cmp	r3, r2
   15bc0:	strne	r3, [r4, #-16]
   15bc4:	beq	15ae4 <__assert_fail@plt+0x4144>
   15bc8:	ldr	r6, [fp, #-72]	; 0xffffffb8
   15bcc:	str	r6, [r4, #-12]
   15bd0:	ldrb	r3, [fp, #-68]	; 0xffffffbc
   15bd4:	strb	r3, [r4, #-8]
   15bd8:	cmp	r3, #0
   15bdc:	beq	15bf0 <__assert_fail@plt+0x4250>
   15be0:	ldr	r0, [fp, #-64]	; 0xffffffc0
   15be4:	str	r0, [r4, #-4]
   15be8:	bl	115f8 <towlower@plt>
   15bec:	str	r0, [r4, #-4]
   15bf0:	ldr	r3, [fp, #-76]	; 0xffffffb4
   15bf4:	add	r3, r3, r6
   15bf8:	str	r3, [fp, #-76]	; 0xffffffb4
   15bfc:	mov	r3, #0
   15c00:	strb	r3, [fp, #-80]	; 0xffffffb0
   15c04:	add	r4, r4, #40	; 0x28
   15c08:	ldrb	r3, [fp, #-80]	; 0xffffffb0
   15c0c:	cmp	r3, #0
   15c10:	bne	15b9c <__assert_fail@plt+0x41fc>
   15c14:	ldrb	r3, [fp, #-92]	; 0xffffffa4
   15c18:	cmp	r3, #0
   15c1c:	bne	15b10 <__assert_fail@plt+0x4170>
   15c20:	ldr	r1, [fp, #-76]	; 0xffffffb4
   15c24:	ldrb	r3, [r1]
   15c28:	lsr	r2, r3, #5
   15c2c:	and	r3, r3, #31
   15c30:	ldr	r2, [r8, r2, lsl #2]
   15c34:	lsr	r3, r2, r3
   15c38:	tst	r3, #1
   15c3c:	beq	15afc <__assert_fail@plt+0x415c>
   15c40:	str	r5, [fp, #-72]	; 0xffffffb8
   15c44:	ldrb	r3, [r1]
   15c48:	str	r3, [fp, #-64]	; 0xffffffc0
   15c4c:	strb	r5, [fp, #-68]	; 0xffffffbc
   15c50:	b	15b98 <__assert_fail@plt+0x41f8>
   15c54:	movw	r3, #56520	; 0xdcc8
   15c58:	movt	r3, #2
   15c5c:	mov	r2, #143	; 0x8f
   15c60:	movw	r1, #56540	; 0xdcdc
   15c64:	movt	r1, #2
   15c68:	movw	r0, #56552	; 0xdce8
   15c6c:	movt	r0, #2
   15c70:	bl	119a0 <__assert_fail@plt>
   15c74:	ldr	r0, [fp, #-76]	; 0xffffffb4
   15c78:	bl	117a8 <strlen@plt>
   15c7c:	str	r0, [fp, #-72]	; 0xffffffb8
   15c80:	mov	r3, #0
   15c84:	strb	r3, [fp, #-68]	; 0xffffffbc
   15c88:	b	15b98 <__assert_fail@plt+0x41f8>
   15c8c:	movw	r3, #56520	; 0xdcc8
   15c90:	movt	r3, #2
   15c94:	mov	r2, #171	; 0xab
   15c98:	movw	r1, #56540	; 0xdcdc
   15c9c:	movt	r1, #2
   15ca0:	movw	r0, #56576	; 0xdd00
   15ca4:	movt	r0, #2
   15ca8:	bl	119a0 <__assert_fail@plt>
   15cac:	movw	r3, #56520	; 0xdcc8
   15cb0:	movt	r3, #2
   15cb4:	mov	r2, #172	; 0xac
   15cb8:	movw	r1, #56540	; 0xdcdc
   15cbc:	movt	r1, #2
   15cc0:	movw	r0, #56600	; 0xdd18
   15cc4:	movt	r0, #2
   15cc8:	bl	119a0 <__assert_fail@plt>
   15ccc:	str	r3, [fp, #-196]	; 0xffffff3c
   15cd0:	mov	r3, #1
   15cd4:	str	r3, [r9, #4]
   15cd8:	ldr	r3, [fp, #-192]	; 0xffffff40
   15cdc:	cmp	r3, #2
   15ce0:	bls	15db0 <__assert_fail@plt+0x4410>
   15ce4:	mov	r8, r7
   15ce8:	mov	r4, r6
   15cec:	mov	sl, #2
   15cf0:	str	r6, [fp, #-208]	; 0xffffff30
   15cf4:	b	15d98 <__assert_fail@plt+0x43f8>
   15cf8:	ldr	r2, [r5, #44]	; 0x2c
   15cfc:	add	r3, r4, r4, lsl #2
   15d00:	add	r1, r7, r3, lsl #3
   15d04:	ldr	r1, [r1, #4]
   15d08:	cmp	r2, r1
   15d0c:	movne	r0, #0
   15d10:	beq	15d60 <__assert_fail@plt+0x43c0>
   15d14:	cmp	r0, #0
   15d18:	bne	15d78 <__assert_fail@plt+0x43d8>
   15d1c:	cmp	r4, #0
   15d20:	beq	15da4 <__assert_fail@plt+0x4404>
   15d24:	ldr	r3, [r9, r4, lsl #2]
   15d28:	sub	r4, r4, r3
   15d2c:	cmp	r6, #0
   15d30:	beq	15cf8 <__assert_fail@plt+0x4358>
   15d34:	add	r3, r4, r4, lsl #2
   15d38:	add	r3, r7, r3, lsl #3
   15d3c:	ldrb	r2, [r3, #8]
   15d40:	cmp	r2, #0
   15d44:	beq	15cf8 <__assert_fail@plt+0x4358>
   15d48:	ldr	r0, [r5, #52]	; 0x34
   15d4c:	ldr	r3, [r3, #12]
   15d50:	cmp	r0, r3
   15d54:	movne	r0, #0
   15d58:	moveq	r0, #1
   15d5c:	b	15d14 <__assert_fail@plt+0x4374>
   15d60:	ldr	r1, [r7, r3, lsl #3]
   15d64:	ldr	r0, [r5, #40]	; 0x28
   15d68:	bl	1161c <memcmp@plt>
   15d6c:	clz	r0, r0
   15d70:	lsr	r0, r0, #5
   15d74:	b	15d14 <__assert_fail@plt+0x4374>
   15d78:	add	r4, r4, #1
   15d7c:	sub	r3, sl, r4
   15d80:	str	r3, [r9, sl, lsl #2]
   15d84:	add	sl, sl, #1
   15d88:	add	r8, r8, #40	; 0x28
   15d8c:	ldr	r3, [fp, #-192]	; 0xffffff40
   15d90:	cmp	r3, sl
   15d94:	beq	15dac <__assert_fail@plt+0x440c>
   15d98:	mov	r5, r8
   15d9c:	ldrb	r6, [r8, #48]	; 0x30
   15da0:	b	15d2c <__assert_fail@plt+0x438c>
   15da4:	str	sl, [r9, sl, lsl #2]
   15da8:	b	15d84 <__assert_fail@plt+0x43e4>
   15dac:	ldr	r6, [fp, #-208]	; 0xffffff30
   15db0:	mov	r3, #0
   15db4:	ldr	r2, [fp, #-200]	; 0xffffff38
   15db8:	str	r3, [r2]
   15dbc:	ldr	r2, [fp, #-204]	; 0xffffff34
   15dc0:	str	r2, [fp, #-132]	; 0xffffff7c
   15dc4:	strb	r3, [fp, #-148]	; 0xffffff6c
   15dc8:	mov	r0, #0
   15dcc:	mov	r1, #0
   15dd0:	strd	r0, [fp, #-144]	; 0xffffff70
   15dd4:	strb	r3, [fp, #-136]	; 0xffffff78
   15dd8:	str	r2, [fp, #-76]	; 0xffffffb4
   15ddc:	strb	r3, [fp, #-92]	; 0xffffffa4
   15de0:	strd	r0, [fp, #-88]	; 0xffffffa8
   15de4:	strb	r3, [fp, #-80]	; 0xffffffb0
   15de8:	mov	r5, #1
   15dec:	movw	sl, #58600	; 0xe4e8
   15df0:	movt	sl, #2
   15df4:	b	16334 <__assert_fail@plt+0x4994>
   15df8:	sub	r4, fp, #172	; 0xac
   15dfc:	ldr	r2, [fp, #-72]	; 0xffffffb8
   15e00:	sub	r1, fp, #60	; 0x3c
   15e04:	mov	r0, r4
   15e08:	bl	115d4 <memcpy@plt>
   15e0c:	str	r4, [fp, #-188]	; 0xffffff44
   15e10:	b	163ac <__assert_fail@plt+0x4a0c>
   15e14:	ldr	r1, [fp, #-188]	; 0xffffff44
   15e18:	ldr	r0, [r3]
   15e1c:	bl	1161c <memcmp@plt>
   15e20:	clz	r0, r0
   15e24:	lsr	r0, r0, #5
   15e28:	b	16308 <__assert_fail@plt+0x4968>
   15e2c:	ldr	r3, [fp, #-132]	; 0xffffff7c
   15e30:	ldr	r2, [fp, #-200]	; 0xffffff38
   15e34:	str	r3, [r2]
   15e38:	mov	r0, r7
   15e3c:	bl	2c330 <__assert_fail@plt+0x1a990>
   15e40:	ldr	r0, [fp, #-196]	; 0xffffff3c
   15e44:	sub	sp, fp, #32
   15e48:	ldrd	r4, [sp]
   15e4c:	ldrd	r6, [sp, #8]
   15e50:	ldrd	r8, [sp, #16]
   15e54:	ldrd	sl, [sp, #24]
   15e58:	add	sp, sp, #32
   15e5c:	pop	{pc}		; (ldr pc, [sp], #4)
   15e60:	cmp	r6, #0
   15e64:	bne	15efc <__assert_fail@plt+0x455c>
   15e68:	ldrb	r3, [fp, #-136]	; 0xffffff78
   15e6c:	cmp	r3, #0
   15e70:	bne	15eb4 <__assert_fail@plt+0x4514>
   15e74:	ldrb	r3, [fp, #-148]	; 0xffffff6c
   15e78:	cmp	r3, #0
   15e7c:	bne	160c4 <__assert_fail@plt+0x4724>
   15e80:	ldr	r1, [fp, #-132]	; 0xffffff7c
   15e84:	ldrb	r3, [r1]
   15e88:	lsr	r2, r3, #5
   15e8c:	and	r3, r3, #31
   15e90:	ldr	r2, [sl, r2, lsl #2]
   15e94:	lsr	r3, r2, r3
   15e98:	tst	r3, #1
   15e9c:	beq	160b0 <__assert_fail@plt+0x4710>
   15ea0:	str	r5, [fp, #-128]	; 0xffffff80
   15ea4:	ldrb	r3, [r1]
   15ea8:	str	r3, [fp, #-120]	; 0xffffff88
   15eac:	strb	r5, [fp, #-124]	; 0xffffff84
   15eb0:	strb	r5, [fp, #-136]	; 0xffffff78
   15eb4:	ldrb	r3, [fp, #-124]	; 0xffffff84
   15eb8:	cmp	r3, #0
   15ebc:	beq	15ecc <__assert_fail@plt+0x452c>
   15ec0:	ldr	r3, [fp, #-120]	; 0xffffff88
   15ec4:	cmp	r3, #0
   15ec8:	beq	161c8 <__assert_fail@plt+0x4828>
   15ecc:	ldr	r3, [fp, #-132]	; 0xffffff7c
   15ed0:	ldr	r2, [fp, #-128]	; 0xffffff80
   15ed4:	add	r3, r3, r2
   15ed8:	str	r3, [fp, #-132]	; 0xffffff7c
   15edc:	mov	r2, #0
   15ee0:	strb	r2, [fp, #-136]	; 0xffffff78
   15ee4:	ldr	r3, [fp, #-76]	; 0xffffffb4
   15ee8:	ldr	r1, [fp, #-72]	; 0xffffffb8
   15eec:	add	r3, r3, r1
   15ef0:	str	r3, [fp, #-76]	; 0xffffffb4
   15ef4:	strb	r2, [fp, #-80]	; 0xffffffb0
   15ef8:	b	16334 <__assert_fail@plt+0x4994>
   15efc:	ldr	r4, [r9, r6, lsl #2]
   15f00:	sub	r6, r6, r4
   15f04:	cmp	r4, #0
   15f08:	bne	15f5c <__assert_fail@plt+0x45bc>
   15f0c:	b	16334 <__assert_fail@plt+0x4994>
   15f10:	str	r5, [fp, #-128]	; 0xffffff80
   15f14:	ldrb	r3, [r1]
   15f18:	str	r3, [fp, #-120]	; 0xffffff88
   15f1c:	strb	r5, [fp, #-124]	; 0xffffff84
   15f20:	strb	r5, [fp, #-136]	; 0xffffff78
   15f24:	ldrb	r3, [fp, #-124]	; 0xffffff84
   15f28:	cmp	r3, #0
   15f2c:	beq	15f3c <__assert_fail@plt+0x459c>
   15f30:	ldr	r3, [fp, #-120]	; 0xffffff88
   15f34:	cmp	r3, #0
   15f38:	beq	160ac <__assert_fail@plt+0x470c>
   15f3c:	ldr	r3, [fp, #-132]	; 0xffffff7c
   15f40:	ldr	r2, [fp, #-128]	; 0xffffff80
   15f44:	add	r3, r3, r2
   15f48:	str	r3, [fp, #-132]	; 0xffffff7c
   15f4c:	mov	r3, #0
   15f50:	strb	r3, [fp, #-136]	; 0xffffff78
   15f54:	subs	r4, r4, #1
   15f58:	beq	16334 <__assert_fail@plt+0x4994>
   15f5c:	ldrb	r3, [fp, #-136]	; 0xffffff78
   15f60:	cmp	r3, #0
   15f64:	bne	15f24 <__assert_fail@plt+0x4584>
   15f68:	ldrb	r3, [fp, #-148]	; 0xffffff6c
   15f6c:	cmp	r3, #0
   15f70:	bne	15fa8 <__assert_fail@plt+0x4608>
   15f74:	ldr	r1, [fp, #-132]	; 0xffffff7c
   15f78:	ldrb	r3, [r1]
   15f7c:	lsr	r2, r3, #5
   15f80:	and	r3, r3, #31
   15f84:	ldr	r2, [sl, r2, lsl #2]
   15f88:	lsr	r3, r2, r3
   15f8c:	tst	r3, #1
   15f90:	bne	15f10 <__assert_fail@plt+0x4570>
   15f94:	sub	r0, fp, #144	; 0x90
   15f98:	bl	11604 <mbsinit@plt>
   15f9c:	cmp	r0, #0
   15fa0:	beq	16034 <__assert_fail@plt+0x4694>
   15fa4:	strb	r5, [fp, #-148]	; 0xffffff6c
   15fa8:	ldr	r8, [fp, #-132]	; 0xffffff7c
   15fac:	bl	116a0 <__ctype_get_mb_cur_max@plt>
   15fb0:	mov	r1, r0
   15fb4:	mov	r0, r8
   15fb8:	bl	1b430 <__assert_fail@plt+0x9a90>
   15fbc:	sub	r3, fp, #144	; 0x90
   15fc0:	mov	r2, r0
   15fc4:	mov	r1, r8
   15fc8:	sub	r0, fp, #120	; 0x78
   15fcc:	bl	1caa4 <__assert_fail@plt+0xb104>
   15fd0:	str	r0, [fp, #-128]	; 0xffffff80
   15fd4:	cmn	r0, #1
   15fd8:	streq	r5, [fp, #-128]	; 0xffffff80
   15fdc:	moveq	r3, #0
   15fe0:	strbeq	r3, [fp, #-124]	; 0xffffff84
   15fe4:	beq	15f20 <__assert_fail@plt+0x4580>
   15fe8:	cmn	r0, #2
   15fec:	beq	16054 <__assert_fail@plt+0x46b4>
   15ff0:	cmp	r0, #0
   15ff4:	bne	16018 <__assert_fail@plt+0x4678>
   15ff8:	str	r5, [fp, #-128]	; 0xffffff80
   15ffc:	ldr	r3, [fp, #-132]	; 0xffffff7c
   16000:	ldrb	r3, [r3]
   16004:	cmp	r3, #0
   16008:	bne	1606c <__assert_fail@plt+0x46cc>
   1600c:	ldr	r3, [fp, #-120]	; 0xffffff88
   16010:	cmp	r3, #0
   16014:	bne	1608c <__assert_fail@plt+0x46ec>
   16018:	strb	r5, [fp, #-124]	; 0xffffff84
   1601c:	sub	r0, fp, #144	; 0x90
   16020:	bl	11604 <mbsinit@plt>
   16024:	cmp	r0, #0
   16028:	movne	r3, #0
   1602c:	strbne	r3, [fp, #-148]	; 0xffffff6c
   16030:	b	15f20 <__assert_fail@plt+0x4580>
   16034:	movw	r3, #56520	; 0xdcc8
   16038:	movt	r3, #2
   1603c:	mov	r2, #143	; 0x8f
   16040:	movw	r1, #56540	; 0xdcdc
   16044:	movt	r1, #2
   16048:	movw	r0, #56552	; 0xdce8
   1604c:	movt	r0, #2
   16050:	bl	119a0 <__assert_fail@plt>
   16054:	ldr	r0, [fp, #-132]	; 0xffffff7c
   16058:	bl	117a8 <strlen@plt>
   1605c:	str	r0, [fp, #-128]	; 0xffffff80
   16060:	mov	r3, #0
   16064:	strb	r3, [fp, #-124]	; 0xffffff84
   16068:	b	15f20 <__assert_fail@plt+0x4580>
   1606c:	movw	r3, #56520	; 0xdcc8
   16070:	movt	r3, #2
   16074:	mov	r2, #171	; 0xab
   16078:	movw	r1, #56540	; 0xdcdc
   1607c:	movt	r1, #2
   16080:	movw	r0, #56576	; 0xdd00
   16084:	movt	r0, #2
   16088:	bl	119a0 <__assert_fail@plt>
   1608c:	movw	r3, #56520	; 0xdcc8
   16090:	movt	r3, #2
   16094:	mov	r2, #172	; 0xac
   16098:	movw	r1, #56540	; 0xdcdc
   1609c:	movt	r1, #2
   160a0:	movw	r0, #56600	; 0xdd18
   160a4:	movt	r0, #2
   160a8:	bl	119a0 <__assert_fail@plt>
   160ac:	bl	11964 <abort@plt>
   160b0:	sub	r0, fp, #144	; 0x90
   160b4:	bl	11604 <mbsinit@plt>
   160b8:	cmp	r0, #0
   160bc:	beq	16150 <__assert_fail@plt+0x47b0>
   160c0:	strb	r5, [fp, #-148]	; 0xffffff6c
   160c4:	ldr	r4, [fp, #-132]	; 0xffffff7c
   160c8:	bl	116a0 <__ctype_get_mb_cur_max@plt>
   160cc:	mov	r1, r0
   160d0:	mov	r0, r4
   160d4:	bl	1b430 <__assert_fail@plt+0x9a90>
   160d8:	sub	r3, fp, #144	; 0x90
   160dc:	mov	r2, r0
   160e0:	mov	r1, r4
   160e4:	sub	r0, fp, #120	; 0x78
   160e8:	bl	1caa4 <__assert_fail@plt+0xb104>
   160ec:	str	r0, [fp, #-128]	; 0xffffff80
   160f0:	cmn	r0, #1
   160f4:	streq	r5, [fp, #-128]	; 0xffffff80
   160f8:	moveq	r3, #0
   160fc:	strbeq	r3, [fp, #-124]	; 0xffffff84
   16100:	beq	15eb0 <__assert_fail@plt+0x4510>
   16104:	cmn	r0, #2
   16108:	beq	16170 <__assert_fail@plt+0x47d0>
   1610c:	cmp	r0, #0
   16110:	bne	16134 <__assert_fail@plt+0x4794>
   16114:	str	r5, [fp, #-128]	; 0xffffff80
   16118:	ldr	r3, [fp, #-132]	; 0xffffff7c
   1611c:	ldrb	r3, [r3]
   16120:	cmp	r3, #0
   16124:	bne	16188 <__assert_fail@plt+0x47e8>
   16128:	ldr	r3, [fp, #-120]	; 0xffffff88
   1612c:	cmp	r3, #0
   16130:	bne	161a8 <__assert_fail@plt+0x4808>
   16134:	strb	r5, [fp, #-124]	; 0xffffff84
   16138:	sub	r0, fp, #144	; 0x90
   1613c:	bl	11604 <mbsinit@plt>
   16140:	cmp	r0, #0
   16144:	movne	r3, #0
   16148:	strbne	r3, [fp, #-148]	; 0xffffff6c
   1614c:	b	15eb0 <__assert_fail@plt+0x4510>
   16150:	movw	r3, #56520	; 0xdcc8
   16154:	movt	r3, #2
   16158:	mov	r2, #143	; 0x8f
   1615c:	movw	r1, #56540	; 0xdcdc
   16160:	movt	r1, #2
   16164:	movw	r0, #56552	; 0xdce8
   16168:	movt	r0, #2
   1616c:	bl	119a0 <__assert_fail@plt>
   16170:	ldr	r0, [fp, #-132]	; 0xffffff7c
   16174:	bl	117a8 <strlen@plt>
   16178:	str	r0, [fp, #-128]	; 0xffffff80
   1617c:	mov	r3, #0
   16180:	strb	r3, [fp, #-124]	; 0xffffff84
   16184:	b	15eb0 <__assert_fail@plt+0x4510>
   16188:	movw	r3, #56520	; 0xdcc8
   1618c:	movt	r3, #2
   16190:	mov	r2, #171	; 0xab
   16194:	movw	r1, #56540	; 0xdcdc
   16198:	movt	r1, #2
   1619c:	movw	r0, #56576	; 0xdd00
   161a0:	movt	r0, #2
   161a4:	bl	119a0 <__assert_fail@plt>
   161a8:	movw	r3, #56520	; 0xdcc8
   161ac:	movt	r3, #2
   161b0:	mov	r2, #172	; 0xac
   161b4:	movw	r1, #56540	; 0xdcdc
   161b8:	movt	r1, #2
   161bc:	movw	r0, #56600	; 0xdd18
   161c0:	movt	r0, #2
   161c4:	bl	119a0 <__assert_fail@plt>
   161c8:	bl	11964 <abort@plt>
   161cc:	sub	r0, fp, #88	; 0x58
   161d0:	bl	11604 <mbsinit@plt>
   161d4:	cmp	r0, #0
   161d8:	beq	1626c <__assert_fail@plt+0x48cc>
   161dc:	strb	r5, [fp, #-92]	; 0xffffffa4
   161e0:	ldr	r4, [fp, #-76]	; 0xffffffb4
   161e4:	bl	116a0 <__ctype_get_mb_cur_max@plt>
   161e8:	mov	r1, r0
   161ec:	mov	r0, r4
   161f0:	bl	1b430 <__assert_fail@plt+0x9a90>
   161f4:	sub	r3, fp, #88	; 0x58
   161f8:	mov	r2, r0
   161fc:	mov	r1, r4
   16200:	sub	r0, fp, #64	; 0x40
   16204:	bl	1caa4 <__assert_fail@plt+0xb104>
   16208:	str	r0, [fp, #-72]	; 0xffffffb8
   1620c:	cmn	r0, #1
   16210:	streq	r5, [fp, #-72]	; 0xffffffb8
   16214:	moveq	r3, #0
   16218:	strbeq	r3, [fp, #-68]	; 0xffffffbc
   1621c:	beq	1637c <__assert_fail@plt+0x49dc>
   16220:	cmn	r0, #2
   16224:	beq	1628c <__assert_fail@plt+0x48ec>
   16228:	cmp	r0, #0
   1622c:	bne	16250 <__assert_fail@plt+0x48b0>
   16230:	str	r5, [fp, #-72]	; 0xffffffb8
   16234:	ldr	r3, [fp, #-76]	; 0xffffffb4
   16238:	ldrb	r3, [r3]
   1623c:	cmp	r3, #0
   16240:	bne	162a4 <__assert_fail@plt+0x4904>
   16244:	ldr	r3, [fp, #-64]	; 0xffffffc0
   16248:	cmp	r3, #0
   1624c:	bne	162c4 <__assert_fail@plt+0x4924>
   16250:	strb	r5, [fp, #-68]	; 0xffffffbc
   16254:	sub	r0, fp, #88	; 0x58
   16258:	bl	11604 <mbsinit@plt>
   1625c:	cmp	r0, #0
   16260:	movne	r3, #0
   16264:	strbne	r3, [fp, #-92]	; 0xffffffa4
   16268:	b	1637c <__assert_fail@plt+0x49dc>
   1626c:	movw	r3, #56520	; 0xdcc8
   16270:	movt	r3, #2
   16274:	mov	r2, #143	; 0x8f
   16278:	movw	r1, #56540	; 0xdcdc
   1627c:	movt	r1, #2
   16280:	movw	r0, #56552	; 0xdce8
   16284:	movt	r0, #2
   16288:	bl	119a0 <__assert_fail@plt>
   1628c:	ldr	r0, [fp, #-76]	; 0xffffffb4
   16290:	bl	117a8 <strlen@plt>
   16294:	str	r0, [fp, #-72]	; 0xffffffb8
   16298:	mov	r3, #0
   1629c:	strb	r3, [fp, #-68]	; 0xffffffbc
   162a0:	b	1637c <__assert_fail@plt+0x49dc>
   162a4:	movw	r3, #56520	; 0xdcc8
   162a8:	movt	r3, #2
   162ac:	mov	r2, #171	; 0xab
   162b0:	movw	r1, #56540	; 0xdcdc
   162b4:	movt	r1, #2
   162b8:	movw	r0, #56576	; 0xdd00
   162bc:	movt	r0, #2
   162c0:	bl	119a0 <__assert_fail@plt>
   162c4:	movw	r3, #56520	; 0xdcc8
   162c8:	movt	r3, #2
   162cc:	mov	r2, #172	; 0xac
   162d0:	movw	r1, #56540	; 0xdcdc
   162d4:	movt	r1, #2
   162d8:	movw	r0, #56600	; 0xdd18
   162dc:	movt	r0, #2
   162e0:	bl	119a0 <__assert_fail@plt>
   162e4:	mov	r3, #0
   162e8:	str	r3, [fp, #-196]	; 0xffffff3c
   162ec:	b	15e40 <__assert_fail@plt+0x44a0>
   162f0:	add	r3, r6, r6, lsl #2
   162f4:	add	r3, r7, r3, lsl #3
   162f8:	ldr	r2, [r3, #4]
   162fc:	cmp	r2, r4
   16300:	movne	r0, #0
   16304:	beq	15e14 <__assert_fail@plt+0x4474>
   16308:	cmp	r0, #0
   1630c:	beq	15e60 <__assert_fail@plt+0x44c0>
   16310:	add	r6, r6, #1
   16314:	ldr	r3, [fp, #-76]	; 0xffffffb4
   16318:	add	r4, r3, r4
   1631c:	str	r4, [fp, #-76]	; 0xffffffb4
   16320:	mov	r3, #0
   16324:	strb	r3, [fp, #-80]	; 0xffffffb0
   16328:	ldr	r3, [fp, #-192]	; 0xffffff40
   1632c:	cmp	r3, r6
   16330:	beq	15e2c <__assert_fail@plt+0x448c>
   16334:	ldrb	r3, [fp, #-80]	; 0xffffffb0
   16338:	cmp	r3, #0
   1633c:	bne	16380 <__assert_fail@plt+0x49e0>
   16340:	ldrb	r3, [fp, #-92]	; 0xffffffa4
   16344:	cmp	r3, #0
   16348:	bne	161e0 <__assert_fail@plt+0x4840>
   1634c:	ldr	r1, [fp, #-76]	; 0xffffffb4
   16350:	ldrb	r3, [r1]
   16354:	lsr	r2, r3, #5
   16358:	and	r3, r3, #31
   1635c:	ldr	r2, [sl, r2, lsl #2]
   16360:	lsr	r3, r2, r3
   16364:	tst	r3, #1
   16368:	beq	161cc <__assert_fail@plt+0x482c>
   1636c:	str	r5, [fp, #-72]	; 0xffffffb8
   16370:	ldrb	r3, [r1]
   16374:	str	r3, [fp, #-64]	; 0xffffffc0
   16378:	strb	r5, [fp, #-68]	; 0xffffffbc
   1637c:	strb	r5, [fp, #-80]	; 0xffffffb0
   16380:	ldrb	r3, [fp, #-68]	; 0xffffffbc
   16384:	cmp	r3, #0
   16388:	beq	16398 <__assert_fail@plt+0x49f8>
   1638c:	ldr	r3, [fp, #-64]	; 0xffffffc0
   16390:	cmp	r3, #0
   16394:	beq	15e38 <__assert_fail@plt+0x4498>
   16398:	ldr	r3, [fp, #-76]	; 0xffffffb4
   1639c:	sub	r2, fp, #60	; 0x3c
   163a0:	cmp	r3, r2
   163a4:	strne	r3, [fp, #-188]	; 0xffffff44
   163a8:	beq	15df8 <__assert_fail@plt+0x4458>
   163ac:	ldr	r4, [fp, #-72]	; 0xffffffb8
   163b0:	str	r4, [fp, #-184]	; 0xffffff48
   163b4:	ldrb	r3, [fp, #-68]	; 0xffffffbc
   163b8:	strb	r3, [fp, #-180]	; 0xffffff4c
   163bc:	cmp	r3, #0
   163c0:	beq	162f0 <__assert_fail@plt+0x4950>
   163c4:	ldr	r0, [fp, #-64]	; 0xffffffc0
   163c8:	str	r0, [fp, #-176]	; 0xffffff50
   163cc:	bl	115f8 <towlower@plt>
   163d0:	str	r0, [fp, #-176]	; 0xffffff50
   163d4:	add	r3, r6, r6, lsl #2
   163d8:	add	r3, r7, r3, lsl #3
   163dc:	ldrb	r2, [r3, #8]
   163e0:	cmp	r2, #0
   163e4:	beq	162f8 <__assert_fail@plt+0x4958>
   163e8:	ldr	r3, [r3, #12]
   163ec:	cmp	r3, r0
   163f0:	movne	r0, #0
   163f4:	moveq	r0, #1
   163f8:	b	16308 <__assert_fail@plt+0x4968>
   163fc:	strd	r4, [sp, #-36]!	; 0xffffffdc
   16400:	strd	r6, [sp, #8]
   16404:	strd	r8, [sp, #16]
   16408:	strd	sl, [sp, #24]
   1640c:	str	lr, [sp, #32]
   16410:	sub	sp, sp, #412	; 0x19c
   16414:	mov	sl, r0
   16418:	mov	r4, r1
   1641c:	str	r1, [sp, #12]
   16420:	bl	116a0 <__ctype_get_mb_cur_max@plt>
   16424:	cmp	r0, #1
   16428:	bhi	164b0 <__assert_fail@plt+0x4b10>
   1642c:	ldr	r3, [sp, #12]
   16430:	ldrb	r4, [r3]
   16434:	str	r4, [sp, #16]
   16438:	cmp	r4, #0
   1643c:	streq	sl, [sp, #4]
   16440:	beq	17024 <__assert_fail@plt+0x5684>
   16444:	bl	11778 <__ctype_b_loc@plt>
   16448:	str	r0, [sp, #20]
   1644c:	ldr	r2, [r0]
   16450:	lsl	r3, r4, #1
   16454:	ldrh	r3, [r2, r3]
   16458:	tst	r3, #256	; 0x100
   1645c:	beq	16470 <__assert_fail@plt+0x4ad0>
   16460:	bl	11748 <__ctype_tolower_loc@plt>
   16464:	ldr	r3, [r0]
   16468:	ldrb	r3, [r3, r4, lsl #2]
   1646c:	str	r3, [sp, #16]
   16470:	ldr	r2, [sp, #12]
   16474:	add	r3, r2, #1
   16478:	str	r3, [sp, #36]	; 0x24
   1647c:	ldrb	r3, [sl]
   16480:	cmp	r3, #0
   16484:	beq	17474 <__assert_fail@plt+0x5ad4>
   16488:	mov	r9, sl
   1648c:	str	r2, [sp, #28]
   16490:	mov	fp, #0
   16494:	mov	sl, fp
   16498:	str	fp, [sp, #32]
   1649c:	mov	r3, #1
   164a0:	str	r3, [sp, #8]
   164a4:	sub	r3, r3, r2
   164a8:	str	r3, [sp, #40]	; 0x28
   164ac:	b	172e8 <__assert_fail@plt+0x5948>
   164b0:	str	r4, [sp, #144]	; 0x90
   164b4:	mov	r3, #0
   164b8:	strb	r3, [sp, #128]	; 0x80
   164bc:	mov	r0, #0
   164c0:	mov	r1, #0
   164c4:	strd	r0, [sp, #132]	; 0x84
   164c8:	strb	r3, [sp, #140]	; 0x8c
   164cc:	ldrb	r1, [r4]
   164d0:	movw	r2, #58600	; 0xe4e8
   164d4:	movt	r2, #2
   164d8:	lsr	r3, r1, #5
   164dc:	and	r0, r1, #31
   164e0:	ldr	r3, [r2, r3, lsl #2]
   164e4:	lsr	r3, r3, r0
   164e8:	tst	r3, #1
   164ec:	beq	165b4 <__assert_fail@plt+0x4c14>
   164f0:	mov	r3, #1
   164f4:	str	r3, [sp, #148]	; 0x94
   164f8:	str	r1, [sp, #156]	; 0x9c
   164fc:	strb	r3, [sp, #152]	; 0x98
   16500:	mov	r3, #1
   16504:	strb	r3, [sp, #140]	; 0x8c
   16508:	ldrb	r4, [sp, #152]	; 0x98
   1650c:	cmp	r4, #0
   16510:	beq	16520 <__assert_fail@plt+0x4b80>
   16514:	ldr	r3, [sp, #156]	; 0x9c
   16518:	cmp	r3, #0
   1651c:	beq	172cc <__assert_fail@plt+0x592c>
   16520:	ldr	r3, [sp, #12]
   16524:	str	r3, [sp, #200]	; 0xc8
   16528:	mov	r3, #0
   1652c:	strb	r3, [sp, #184]	; 0xb8
   16530:	mov	r0, #0
   16534:	mov	r1, #0
   16538:	strd	r0, [sp, #188]	; 0xbc
   1653c:	strb	r3, [sp, #196]	; 0xc4
   16540:	ldr	r3, [sp, #144]	; 0x90
   16544:	add	r2, sp, #160	; 0xa0
   16548:	cmp	r3, r2
   1654c:	strne	r3, [sp, #48]	; 0x30
   16550:	beq	166e0 <__assert_fail@plt+0x4d40>
   16554:	ldr	r3, [sp, #148]	; 0x94
   16558:	str	r3, [sp, #52]	; 0x34
   1655c:	strb	r4, [sp, #56]	; 0x38
   16560:	cmp	r4, #0
   16564:	beq	16578 <__assert_fail@plt+0x4bd8>
   16568:	ldr	r0, [sp, #156]	; 0x9c
   1656c:	str	r0, [sp, #60]	; 0x3c
   16570:	bl	115f8 <towlower@plt>
   16574:	str	r0, [sp, #60]	; 0x3c
   16578:	str	sl, [sp, #256]	; 0x100
   1657c:	mov	r6, #0
   16580:	strb	r6, [sp, #240]	; 0xf0
   16584:	mov	r2, #0
   16588:	mov	r3, #0
   1658c:	strd	r2, [sp, #244]	; 0xf4
   16590:	strb	r6, [sp, #252]	; 0xfc
   16594:	str	r6, [sp, #4]
   16598:	mov	r8, r6
   1659c:	mov	r7, #1
   165a0:	movw	r5, #58600	; 0xe4e8
   165a4:	movt	r5, #2
   165a8:	str	sl, [sp, #8]
   165ac:	ldr	sl, [sp, #12]
   165b0:	b	16bdc <__assert_fail@plt+0x523c>
   165b4:	add	r0, sp, #132	; 0x84
   165b8:	bl	11604 <mbsinit@plt>
   165bc:	cmp	r0, #0
   165c0:	beq	16654 <__assert_fail@plt+0x4cb4>
   165c4:	mov	r3, #1
   165c8:	strb	r3, [sp, #128]	; 0x80
   165cc:	bl	116a0 <__ctype_get_mb_cur_max@plt>
   165d0:	mov	r1, r0
   165d4:	ldr	r4, [sp, #12]
   165d8:	mov	r0, r4
   165dc:	bl	1b430 <__assert_fail@plt+0x9a90>
   165e0:	add	r3, sp, #132	; 0x84
   165e4:	mov	r2, r0
   165e8:	mov	r1, r4
   165ec:	add	r0, sp, #156	; 0x9c
   165f0:	bl	1caa4 <__assert_fail@plt+0xb104>
   165f4:	str	r0, [sp, #148]	; 0x94
   165f8:	cmn	r0, #1
   165fc:	beq	16674 <__assert_fail@plt+0x4cd4>
   16600:	cmn	r0, #2
   16604:	beq	16688 <__assert_fail@plt+0x4ce8>
   16608:	cmp	r0, #0
   1660c:	bne	16634 <__assert_fail@plt+0x4c94>
   16610:	mov	r3, #1
   16614:	str	r3, [sp, #148]	; 0x94
   16618:	ldr	r3, [sp, #144]	; 0x90
   1661c:	ldrb	r3, [r3]
   16620:	cmp	r3, #0
   16624:	bne	166a0 <__assert_fail@plt+0x4d00>
   16628:	ldr	r3, [sp, #156]	; 0x9c
   1662c:	cmp	r3, #0
   16630:	bne	166c0 <__assert_fail@plt+0x4d20>
   16634:	mov	r3, #1
   16638:	strb	r3, [sp, #152]	; 0x98
   1663c:	add	r0, sp, #132	; 0x84
   16640:	bl	11604 <mbsinit@plt>
   16644:	cmp	r0, #0
   16648:	movne	r3, #0
   1664c:	strbne	r3, [sp, #128]	; 0x80
   16650:	b	16500 <__assert_fail@plt+0x4b60>
   16654:	movw	r3, #56520	; 0xdcc8
   16658:	movt	r3, #2
   1665c:	mov	r2, #143	; 0x8f
   16660:	movw	r1, #56540	; 0xdcdc
   16664:	movt	r1, #2
   16668:	movw	r0, #56552	; 0xdce8
   1666c:	movt	r0, #2
   16670:	bl	119a0 <__assert_fail@plt>
   16674:	mov	r3, #1
   16678:	str	r3, [sp, #148]	; 0x94
   1667c:	mov	r3, #0
   16680:	strb	r3, [sp, #152]	; 0x98
   16684:	b	16500 <__assert_fail@plt+0x4b60>
   16688:	ldr	r0, [sp, #144]	; 0x90
   1668c:	bl	117a8 <strlen@plt>
   16690:	str	r0, [sp, #148]	; 0x94
   16694:	mov	r3, #0
   16698:	strb	r3, [sp, #152]	; 0x98
   1669c:	b	16500 <__assert_fail@plt+0x4b60>
   166a0:	movw	r3, #56520	; 0xdcc8
   166a4:	movt	r3, #2
   166a8:	mov	r2, #171	; 0xab
   166ac:	movw	r1, #56540	; 0xdcdc
   166b0:	movt	r1, #2
   166b4:	movw	r0, #56576	; 0xdd00
   166b8:	movt	r0, #2
   166bc:	bl	119a0 <__assert_fail@plt>
   166c0:	movw	r3, #56520	; 0xdcc8
   166c4:	movt	r3, #2
   166c8:	mov	r2, #172	; 0xac
   166cc:	movw	r1, #56540	; 0xdcdc
   166d0:	movt	r1, #2
   166d4:	movw	r0, #56600	; 0xdd18
   166d8:	movt	r0, #2
   166dc:	bl	119a0 <__assert_fail@plt>
   166e0:	add	r5, sp, #64	; 0x40
   166e4:	ldr	r2, [sp, #148]	; 0x94
   166e8:	add	r1, sp, #160	; 0xa0
   166ec:	mov	r0, r5
   166f0:	bl	115d4 <memcpy@plt>
   166f4:	str	r5, [sp, #48]	; 0x30
   166f8:	b	16554 <__assert_fail@plt+0x4bb4>
   166fc:	add	r0, sp, #244	; 0xf4
   16700:	bl	11604 <mbsinit@plt>
   16704:	cmp	r0, #0
   16708:	beq	1679c <__assert_fail@plt+0x4dfc>
   1670c:	mov	r3, #1
   16710:	strb	r3, [sp, #240]	; 0xf0
   16714:	ldr	r4, [sp, #256]	; 0x100
   16718:	bl	116a0 <__ctype_get_mb_cur_max@plt>
   1671c:	mov	r1, r0
   16720:	mov	r0, r4
   16724:	bl	1b430 <__assert_fail@plt+0x9a90>
   16728:	add	r3, sp, #244	; 0xf4
   1672c:	mov	r2, r0
   16730:	mov	r1, r4
   16734:	add	r0, sp, #268	; 0x10c
   16738:	bl	1caa4 <__assert_fail@plt+0xb104>
   1673c:	str	r0, [sp, #260]	; 0x104
   16740:	cmn	r0, #1
   16744:	beq	167bc <__assert_fail@plt+0x4e1c>
   16748:	cmn	r0, #2
   1674c:	beq	167d0 <__assert_fail@plt+0x4e30>
   16750:	cmp	r0, #0
   16754:	bne	1677c <__assert_fail@plt+0x4ddc>
   16758:	mov	r3, #1
   1675c:	str	r3, [sp, #260]	; 0x104
   16760:	ldr	r3, [sp, #256]	; 0x100
   16764:	ldrb	r3, [r3]
   16768:	cmp	r3, #0
   1676c:	bne	167e8 <__assert_fail@plt+0x4e48>
   16770:	ldr	r3, [sp, #268]	; 0x10c
   16774:	cmp	r3, #0
   16778:	bne	16808 <__assert_fail@plt+0x4e68>
   1677c:	mov	r3, #1
   16780:	strb	r3, [sp, #264]	; 0x108
   16784:	add	r0, sp, #244	; 0xf4
   16788:	bl	11604 <mbsinit@plt>
   1678c:	cmp	r0, #0
   16790:	movne	r3, #0
   16794:	strbne	r3, [sp, #240]	; 0xf0
   16798:	b	16c28 <__assert_fail@plt+0x5288>
   1679c:	movw	r3, #56520	; 0xdcc8
   167a0:	movt	r3, #2
   167a4:	mov	r2, #143	; 0x8f
   167a8:	movw	r1, #56540	; 0xdcdc
   167ac:	movt	r1, #2
   167b0:	movw	r0, #56552	; 0xdce8
   167b4:	movt	r0, #2
   167b8:	bl	119a0 <__assert_fail@plt>
   167bc:	mov	r3, #1
   167c0:	str	r3, [sp, #260]	; 0x104
   167c4:	mov	r3, #0
   167c8:	strb	r3, [sp, #264]	; 0x108
   167cc:	b	16c28 <__assert_fail@plt+0x5288>
   167d0:	ldr	r0, [sp, #256]	; 0x100
   167d4:	bl	117a8 <strlen@plt>
   167d8:	str	r0, [sp, #260]	; 0x104
   167dc:	mov	r3, #0
   167e0:	strb	r3, [sp, #264]	; 0x108
   167e4:	b	16c28 <__assert_fail@plt+0x5288>
   167e8:	movw	r3, #56520	; 0xdcc8
   167ec:	movt	r3, #2
   167f0:	mov	r2, #171	; 0xab
   167f4:	movw	r1, #56540	; 0xdcdc
   167f8:	movt	r1, #2
   167fc:	movw	r0, #56576	; 0xdd00
   16800:	movt	r0, #2
   16804:	bl	119a0 <__assert_fail@plt>
   16808:	movw	r3, #56520	; 0xdcc8
   1680c:	movt	r3, #2
   16810:	mov	r2, #172	; 0xac
   16814:	movw	r1, #56540	; 0xdcdc
   16818:	movt	r1, #2
   1681c:	movw	r0, #56600	; 0xdd18
   16820:	movt	r0, #2
   16824:	bl	119a0 <__assert_fail@plt>
   16828:	ldr	r3, [sp, #4]
   1682c:	subs	r4, r8, r3
   16830:	beq	169d8 <__assert_fail@plt+0x5038>
   16834:	mov	r7, #1
   16838:	b	16914 <__assert_fail@plt+0x4f74>
   1683c:	add	r0, sp, #188	; 0xbc
   16840:	bl	11604 <mbsinit@plt>
   16844:	cmp	r0, #0
   16848:	beq	16960 <__assert_fail@plt+0x4fc0>
   1684c:	strb	r7, [sp, #184]	; 0xb8
   16850:	ldr	r9, [sp, #200]	; 0xc8
   16854:	bl	116a0 <__ctype_get_mb_cur_max@plt>
   16858:	mov	r1, r0
   1685c:	mov	r0, r9
   16860:	bl	1b430 <__assert_fail@plt+0x9a90>
   16864:	add	r3, sp, #188	; 0xbc
   16868:	mov	r2, r0
   1686c:	mov	r1, r9
   16870:	add	r0, sp, #212	; 0xd4
   16874:	bl	1caa4 <__assert_fail@plt+0xb104>
   16878:	str	r0, [sp, #204]	; 0xcc
   1687c:	cmn	r0, #1
   16880:	streq	r7, [sp, #204]	; 0xcc
   16884:	moveq	r3, #0
   16888:	strbeq	r3, [sp, #208]	; 0xd0
   1688c:	beq	168d8 <__assert_fail@plt+0x4f38>
   16890:	cmn	r0, #2
   16894:	beq	16980 <__assert_fail@plt+0x4fe0>
   16898:	cmp	r0, #0
   1689c:	bne	168c0 <__assert_fail@plt+0x4f20>
   168a0:	str	r7, [sp, #204]	; 0xcc
   168a4:	ldr	r3, [sp, #200]	; 0xc8
   168a8:	ldrb	r3, [r3]
   168ac:	cmp	r3, #0
   168b0:	bne	16998 <__assert_fail@plt+0x4ff8>
   168b4:	ldr	r3, [sp, #212]	; 0xd4
   168b8:	cmp	r3, #0
   168bc:	bne	169b8 <__assert_fail@plt+0x5018>
   168c0:	strb	r7, [sp, #208]	; 0xd0
   168c4:	add	r0, sp, #188	; 0xbc
   168c8:	bl	11604 <mbsinit@plt>
   168cc:	cmp	r0, #0
   168d0:	movne	r3, #0
   168d4:	strbne	r3, [sp, #184]	; 0xb8
   168d8:	strb	r7, [sp, #196]	; 0xc4
   168dc:	ldrb	r3, [sp, #208]	; 0xd0
   168e0:	cmp	r3, #0
   168e4:	beq	168f4 <__assert_fail@plt+0x4f54>
   168e8:	ldr	r3, [sp, #212]	; 0xd4
   168ec:	cmp	r3, #0
   168f0:	beq	174a4 <__assert_fail@plt+0x5b04>
   168f4:	ldr	r3, [sp, #200]	; 0xc8
   168f8:	ldr	r2, [sp, #204]	; 0xcc
   168fc:	add	r3, r3, r2
   16900:	str	r3, [sp, #200]	; 0xc8
   16904:	mov	r3, #0
   16908:	strb	r3, [sp, #196]	; 0xc4
   1690c:	subs	r4, r4, #1
   16910:	beq	169e4 <__assert_fail@plt+0x5044>
   16914:	ldrb	r3, [sp, #196]	; 0xc4
   16918:	cmp	r3, #0
   1691c:	bne	168dc <__assert_fail@plt+0x4f3c>
   16920:	ldrb	r3, [sp, #184]	; 0xb8
   16924:	cmp	r3, #0
   16928:	bne	16850 <__assert_fail@plt+0x4eb0>
   1692c:	ldr	r1, [sp, #200]	; 0xc8
   16930:	ldrb	r3, [r1]
   16934:	lsr	r2, r3, #5
   16938:	and	r3, r3, #31
   1693c:	ldr	r2, [r5, r2, lsl #2]
   16940:	lsr	r3, r2, r3
   16944:	tst	r3, #1
   16948:	beq	1683c <__assert_fail@plt+0x4e9c>
   1694c:	str	r7, [sp, #204]	; 0xcc
   16950:	ldrb	r3, [r1]
   16954:	str	r3, [sp, #212]	; 0xd4
   16958:	strb	r7, [sp, #208]	; 0xd0
   1695c:	b	168d8 <__assert_fail@plt+0x4f38>
   16960:	movw	r3, #56520	; 0xdcc8
   16964:	movt	r3, #2
   16968:	mov	r2, #143	; 0x8f
   1696c:	movw	r1, #56540	; 0xdcdc
   16970:	movt	r1, #2
   16974:	movw	r0, #56552	; 0xdce8
   16978:	movt	r0, #2
   1697c:	bl	119a0 <__assert_fail@plt>
   16980:	ldr	r0, [sp, #200]	; 0xc8
   16984:	bl	117a8 <strlen@plt>
   16988:	str	r0, [sp, #204]	; 0xcc
   1698c:	mov	r3, #0
   16990:	strb	r3, [sp, #208]	; 0xd0
   16994:	b	168d8 <__assert_fail@plt+0x4f38>
   16998:	movw	r3, #56520	; 0xdcc8
   1699c:	movt	r3, #2
   169a0:	mov	r2, #171	; 0xab
   169a4:	movw	r1, #56540	; 0xdcdc
   169a8:	movt	r1, #2
   169ac:	movw	r0, #56576	; 0xdd00
   169b0:	movt	r0, #2
   169b4:	bl	119a0 <__assert_fail@plt>
   169b8:	movw	r3, #56520	; 0xdcc8
   169bc:	movt	r3, #2
   169c0:	mov	r2, #172	; 0xac
   169c4:	movw	r1, #56540	; 0xdcdc
   169c8:	movt	r1, #2
   169cc:	movw	r0, #56600	; 0xdd18
   169d0:	movt	r0, #2
   169d4:	bl	119a0 <__assert_fail@plt>
   169d8:	ldrb	r3, [sp, #196]	; 0xc4
   169dc:	cmp	r3, #0
   169e0:	bne	16a2c <__assert_fail@plt+0x508c>
   169e4:	ldrb	r3, [sp, #184]	; 0xb8
   169e8:	cmp	r3, #0
   169ec:	bne	16a6c <__assert_fail@plt+0x50cc>
   169f0:	ldr	r1, [sp, #200]	; 0xc8
   169f4:	ldrb	r3, [r1]
   169f8:	lsr	r2, r3, #5
   169fc:	and	r3, r3, #31
   16a00:	ldr	r2, [r5, r2, lsl #2]
   16a04:	lsr	r3, r2, r3
   16a08:	tst	r3, #1
   16a0c:	beq	16a54 <__assert_fail@plt+0x50b4>
   16a10:	mov	r3, #1
   16a14:	str	r3, [sp, #204]	; 0xcc
   16a18:	ldrb	r2, [r1]
   16a1c:	str	r2, [sp, #212]	; 0xd4
   16a20:	strb	r3, [sp, #208]	; 0xd0
   16a24:	mov	r3, #1
   16a28:	strb	r3, [sp, #196]	; 0xc4
   16a2c:	ldrb	r7, [sp, #208]	; 0xd0
   16a30:	cmp	r7, #0
   16a34:	streq	r8, [sp, #4]
   16a38:	moveq	r7, fp
   16a3c:	beq	16c6c <__assert_fail@plt+0x52cc>
   16a40:	ldr	r3, [sp, #212]	; 0xd4
   16a44:	cmp	r3, #0
   16a48:	strne	r8, [sp, #4]
   16a4c:	bne	16c6c <__assert_fail@plt+0x52cc>
   16a50:	b	174b0 <__assert_fail@plt+0x5b10>
   16a54:	add	r0, sp, #188	; 0xbc
   16a58:	bl	11604 <mbsinit@plt>
   16a5c:	cmp	r0, #0
   16a60:	beq	16af4 <__assert_fail@plt+0x5154>
   16a64:	mov	r3, #1
   16a68:	strb	r3, [sp, #184]	; 0xb8
   16a6c:	ldr	r4, [sp, #200]	; 0xc8
   16a70:	bl	116a0 <__ctype_get_mb_cur_max@plt>
   16a74:	mov	r1, r0
   16a78:	mov	r0, r4
   16a7c:	bl	1b430 <__assert_fail@plt+0x9a90>
   16a80:	add	r3, sp, #188	; 0xbc
   16a84:	mov	r2, r0
   16a88:	mov	r1, r4
   16a8c:	add	r0, sp, #212	; 0xd4
   16a90:	bl	1caa4 <__assert_fail@plt+0xb104>
   16a94:	str	r0, [sp, #204]	; 0xcc
   16a98:	cmn	r0, #1
   16a9c:	beq	16b14 <__assert_fail@plt+0x5174>
   16aa0:	cmn	r0, #2
   16aa4:	beq	16b28 <__assert_fail@plt+0x5188>
   16aa8:	cmp	r0, #0
   16aac:	bne	16ad4 <__assert_fail@plt+0x5134>
   16ab0:	mov	r3, #1
   16ab4:	str	r3, [sp, #204]	; 0xcc
   16ab8:	ldr	r3, [sp, #200]	; 0xc8
   16abc:	ldrb	r3, [r3]
   16ac0:	cmp	r3, #0
   16ac4:	bne	16b40 <__assert_fail@plt+0x51a0>
   16ac8:	ldr	r3, [sp, #212]	; 0xd4
   16acc:	cmp	r3, #0
   16ad0:	bne	16b60 <__assert_fail@plt+0x51c0>
   16ad4:	mov	r3, #1
   16ad8:	strb	r3, [sp, #208]	; 0xd0
   16adc:	add	r0, sp, #188	; 0xbc
   16ae0:	bl	11604 <mbsinit@plt>
   16ae4:	cmp	r0, #0
   16ae8:	movne	r3, #0
   16aec:	strbne	r3, [sp, #184]	; 0xb8
   16af0:	b	16a24 <__assert_fail@plt+0x5084>
   16af4:	movw	r3, #56520	; 0xdcc8
   16af8:	movt	r3, #2
   16afc:	mov	r2, #143	; 0x8f
   16b00:	movw	r1, #56540	; 0xdcdc
   16b04:	movt	r1, #2
   16b08:	movw	r0, #56552	; 0xdce8
   16b0c:	movt	r0, #2
   16b10:	bl	119a0 <__assert_fail@plt>
   16b14:	mov	r3, #1
   16b18:	str	r3, [sp, #204]	; 0xcc
   16b1c:	mov	r3, #0
   16b20:	strb	r3, [sp, #208]	; 0xd0
   16b24:	b	16a24 <__assert_fail@plt+0x5084>
   16b28:	ldr	r0, [sp, #200]	; 0xc8
   16b2c:	bl	117a8 <strlen@plt>
   16b30:	str	r0, [sp, #204]	; 0xcc
   16b34:	mov	r3, #0
   16b38:	strb	r3, [sp, #208]	; 0xd0
   16b3c:	b	16a24 <__assert_fail@plt+0x5084>
   16b40:	movw	r3, #56520	; 0xdcc8
   16b44:	movt	r3, #2
   16b48:	mov	r2, #171	; 0xab
   16b4c:	movw	r1, #56540	; 0xdcdc
   16b50:	movt	r1, #2
   16b54:	movw	r0, #56576	; 0xdd00
   16b58:	movt	r0, #2
   16b5c:	bl	119a0 <__assert_fail@plt>
   16b60:	movw	r3, #56520	; 0xdcc8
   16b64:	movt	r3, #2
   16b68:	mov	r2, #172	; 0xac
   16b6c:	movw	r1, #56540	; 0xdcdc
   16b70:	movt	r1, #2
   16b74:	movw	r0, #56600	; 0xdd18
   16b78:	movt	r0, #2
   16b7c:	bl	119a0 <__assert_fail@plt>
   16b80:	ldr	r3, [sp, #352]	; 0x160
   16b84:	str	r3, [sp, #4]
   16b88:	b	17024 <__assert_fail@plt+0x5684>
   16b8c:	add	r4, sp, #104	; 0x68
   16b90:	ldr	r2, [sp, #260]	; 0x104
   16b94:	add	r1, sp, #272	; 0x110
   16b98:	mov	r0, r4
   16b9c:	bl	115d4 <memcpy@plt>
   16ba0:	str	r4, [sp, #88]	; 0x58
   16ba4:	b	16c88 <__assert_fail@plt+0x52e8>
   16ba8:	ldr	r3, [sp, #52]	; 0x34
   16bac:	cmp	r3, r4
   16bb0:	movne	r0, #0
   16bb4:	beq	16cd0 <__assert_fail@plt+0x5330>
   16bb8:	cmp	r0, #0
   16bbc:	bne	16cec <__assert_fail@plt+0x534c>
   16bc0:	ldr	r3, [sp, #256]	; 0x100
   16bc4:	ldr	r2, [sp, #260]	; 0x104
   16bc8:	add	r3, r3, r2
   16bcc:	str	r3, [sp, #256]	; 0x100
   16bd0:	mov	r3, #0
   16bd4:	strb	r3, [sp, #252]	; 0xfc
   16bd8:	mov	r8, r9
   16bdc:	ldrb	r3, [sp, #252]	; 0xfc
   16be0:	cmp	r3, #0
   16be4:	bne	16c30 <__assert_fail@plt+0x5290>
   16be8:	ldrb	r3, [sp, #240]	; 0xf0
   16bec:	cmp	r3, #0
   16bf0:	bne	16714 <__assert_fail@plt+0x4d74>
   16bf4:	ldr	r1, [sp, #256]	; 0x100
   16bf8:	ldrb	r3, [r1]
   16bfc:	lsr	r2, r3, #5
   16c00:	and	r3, r3, #31
   16c04:	ldr	r2, [r5, r2, lsl #2]
   16c08:	lsr	r3, r2, r3
   16c0c:	tst	r3, #1
   16c10:	beq	166fc <__assert_fail@plt+0x4d5c>
   16c14:	mov	r3, #1
   16c18:	str	r3, [sp, #260]	; 0x104
   16c1c:	ldrb	r2, [r1]
   16c20:	str	r2, [sp, #268]	; 0x10c
   16c24:	strb	r3, [sp, #264]	; 0x108
   16c28:	mov	r3, #1
   16c2c:	strb	r3, [sp, #252]	; 0xfc
   16c30:	ldrb	r3, [sp, #264]	; 0x108
   16c34:	cmp	r3, #0
   16c38:	beq	16c48 <__assert_fail@plt+0x52a8>
   16c3c:	ldr	r3, [sp, #268]	; 0x10c
   16c40:	cmp	r3, #0
   16c44:	beq	172c0 <__assert_fail@plt+0x5920>
   16c48:	cmp	r6, #9
   16c4c:	movls	fp, #0
   16c50:	andhi	fp, r7, #1
   16c54:	cmp	fp, #0
   16c58:	beq	16c6c <__assert_fail@plt+0x52cc>
   16c5c:	add	r3, r6, r6, lsl #2
   16c60:	cmp	r3, r8
   16c64:	movhi	r7, fp
   16c68:	bls	16828 <__assert_fail@plt+0x4e88>
   16c6c:	add	r6, r6, #1
   16c70:	add	r9, r8, #1
   16c74:	ldr	r3, [sp, #256]	; 0x100
   16c78:	add	r2, sp, #272	; 0x110
   16c7c:	cmp	r3, r2
   16c80:	strne	r3, [sp, #88]	; 0x58
   16c84:	beq	16b8c <__assert_fail@plt+0x51ec>
   16c88:	ldr	r4, [sp, #260]	; 0x104
   16c8c:	str	r4, [sp, #92]	; 0x5c
   16c90:	ldrb	r3, [sp, #264]	; 0x108
   16c94:	strb	r3, [sp, #96]	; 0x60
   16c98:	cmp	r3, #0
   16c9c:	beq	16ba8 <__assert_fail@plt+0x5208>
   16ca0:	ldr	r0, [sp, #268]	; 0x10c
   16ca4:	str	r0, [sp, #100]	; 0x64
   16ca8:	bl	115f8 <towlower@plt>
   16cac:	str	r0, [sp, #100]	; 0x64
   16cb0:	ldrb	r3, [sp, #56]	; 0x38
   16cb4:	cmp	r3, #0
   16cb8:	beq	16ba8 <__assert_fail@plt+0x5208>
   16cbc:	ldr	r3, [sp, #60]	; 0x3c
   16cc0:	cmp	r3, r0
   16cc4:	movne	r0, #0
   16cc8:	moveq	r0, #1
   16ccc:	b	16bb8 <__assert_fail@plt+0x5218>
   16cd0:	mov	r2, r4
   16cd4:	ldr	r1, [sp, #48]	; 0x30
   16cd8:	ldr	r0, [sp, #88]	; 0x58
   16cdc:	bl	1161c <memcmp@plt>
   16ce0:	clz	r0, r0
   16ce4:	lsr	r0, r0, #5
   16ce8:	b	16bb8 <__assert_fail@plt+0x5218>
   16cec:	add	r1, sp, #296	; 0x128
   16cf0:	ldrd	r2, [sp, #240]	; 0xf0
   16cf4:	strd	r2, [r1]
   16cf8:	ldrd	r2, [sp, #248]	; 0xf8
   16cfc:	strd	r2, [r1, #8]
   16d00:	ldr	r0, [sp, #256]	; 0x100
   16d04:	ldr	r3, [sp, #260]	; 0x104
   16d08:	str	r3, [sp, #316]	; 0x13c
   16d0c:	add	r3, sp, #264	; 0x108
   16d10:	ldrd	r2, [r3]
   16d14:	strd	r2, [r1, #24]
   16d18:	add	r3, sp, #272	; 0x110
   16d1c:	ldrd	r2, [r3]
   16d20:	strd	r2, [r1, #32]
   16d24:	add	r3, sp, #280	; 0x118
   16d28:	ldrd	r2, [r3]
   16d2c:	strd	r2, [r1, #40]	; 0x28
   16d30:	add	r3, sp, #288	; 0x120
   16d34:	ldrd	r2, [r3]
   16d38:	strd	r2, [r1, #48]	; 0x30
   16d3c:	add	r4, r4, r0
   16d40:	str	r4, [sp, #312]	; 0x138
   16d44:	mov	r3, #0
   16d48:	strb	r3, [sp, #308]	; 0x134
   16d4c:	str	sl, [sp, #368]	; 0x170
   16d50:	strb	r3, [sp, #352]	; 0x160
   16d54:	add	r2, sp, #356	; 0x164
   16d58:	mov	r0, #0
   16d5c:	mov	r1, #0
   16d60:	strd	r0, [r2]
   16d64:	strb	r3, [sp, #364]	; 0x16c
   16d68:	ldrb	r2, [sl]
   16d6c:	lsr	r3, r2, #5
   16d70:	and	r1, r2, #31
   16d74:	ldr	r3, [r5, r3, lsl #2]
   16d78:	lsr	r3, r3, r1
   16d7c:	tst	r3, #1
   16d80:	beq	16dd8 <__assert_fail@plt+0x5438>
   16d84:	mov	r3, #1
   16d88:	str	r3, [sp, #372]	; 0x174
   16d8c:	str	r2, [sp, #380]	; 0x17c
   16d90:	strb	r3, [sp, #376]	; 0x178
   16d94:	mov	r3, #1
   16d98:	strb	r3, [sp, #364]	; 0x16c
   16d9c:	ldrb	r3, [sp, #376]	; 0x178
   16da0:	cmp	r3, #0
   16da4:	beq	16db4 <__assert_fail@plt+0x5414>
   16da8:	ldr	r3, [sp, #380]	; 0x17c
   16dac:	cmp	r3, #0
   16db0:	beq	16f00 <__assert_fail@plt+0x5560>
   16db4:	ldr	r3, [sp, #368]	; 0x170
   16db8:	ldr	r2, [sp, #372]	; 0x174
   16dbc:	add	r3, r3, r2
   16dc0:	str	r3, [sp, #368]	; 0x170
   16dc4:	mov	r3, #0
   16dc8:	strb	r3, [sp, #364]	; 0x16c
   16dcc:	add	r9, r8, #2
   16dd0:	mov	r4, #1
   16dd4:	b	17158 <__assert_fail@plt+0x57b8>
   16dd8:	add	r0, sp, #356	; 0x164
   16ddc:	bl	11604 <mbsinit@plt>
   16de0:	cmp	r0, #0
   16de4:	beq	16e74 <__assert_fail@plt+0x54d4>
   16de8:	mov	r3, #1
   16dec:	strb	r3, [sp, #352]	; 0x160
   16df0:	bl	116a0 <__ctype_get_mb_cur_max@plt>
   16df4:	mov	r1, r0
   16df8:	mov	r0, sl
   16dfc:	bl	1b430 <__assert_fail@plt+0x9a90>
   16e00:	add	r3, sp, #356	; 0x164
   16e04:	mov	r2, r0
   16e08:	mov	r1, sl
   16e0c:	add	r0, sp, #380	; 0x17c
   16e10:	bl	1caa4 <__assert_fail@plt+0xb104>
   16e14:	str	r0, [sp, #372]	; 0x174
   16e18:	cmn	r0, #1
   16e1c:	beq	16e94 <__assert_fail@plt+0x54f4>
   16e20:	cmn	r0, #2
   16e24:	beq	16ea8 <__assert_fail@plt+0x5508>
   16e28:	cmp	r0, #0
   16e2c:	bne	16e54 <__assert_fail@plt+0x54b4>
   16e30:	mov	r3, #1
   16e34:	str	r3, [sp, #372]	; 0x174
   16e38:	ldr	r3, [sp, #368]	; 0x170
   16e3c:	ldrb	r3, [r3]
   16e40:	cmp	r3, #0
   16e44:	bne	16ec0 <__assert_fail@plt+0x5520>
   16e48:	ldr	r3, [sp, #380]	; 0x17c
   16e4c:	cmp	r3, #0
   16e50:	bne	16ee0 <__assert_fail@plt+0x5540>
   16e54:	mov	r3, #1
   16e58:	strb	r3, [sp, #376]	; 0x178
   16e5c:	add	r0, sp, #356	; 0x164
   16e60:	bl	11604 <mbsinit@plt>
   16e64:	cmp	r0, #0
   16e68:	movne	r3, #0
   16e6c:	strbne	r3, [sp, #352]	; 0x160
   16e70:	b	16d94 <__assert_fail@plt+0x53f4>
   16e74:	movw	r3, #56520	; 0xdcc8
   16e78:	movt	r3, #2
   16e7c:	mov	r2, #143	; 0x8f
   16e80:	movw	r1, #56540	; 0xdcdc
   16e84:	movt	r1, #2
   16e88:	movw	r0, #56552	; 0xdce8
   16e8c:	movt	r0, #2
   16e90:	bl	119a0 <__assert_fail@plt>
   16e94:	mov	r3, #1
   16e98:	str	r3, [sp, #372]	; 0x174
   16e9c:	mov	r3, #0
   16ea0:	strb	r3, [sp, #376]	; 0x178
   16ea4:	b	16d94 <__assert_fail@plt+0x53f4>
   16ea8:	ldr	r0, [sp, #368]	; 0x170
   16eac:	bl	117a8 <strlen@plt>
   16eb0:	str	r0, [sp, #372]	; 0x174
   16eb4:	mov	r3, #0
   16eb8:	strb	r3, [sp, #376]	; 0x178
   16ebc:	b	16d94 <__assert_fail@plt+0x53f4>
   16ec0:	movw	r3, #56520	; 0xdcc8
   16ec4:	movt	r3, #2
   16ec8:	mov	r2, #171	; 0xab
   16ecc:	movw	r1, #56540	; 0xdcdc
   16ed0:	movt	r1, #2
   16ed4:	movw	r0, #56576	; 0xdd00
   16ed8:	movt	r0, #2
   16edc:	bl	119a0 <__assert_fail@plt>
   16ee0:	movw	r3, #56520	; 0xdcc8
   16ee4:	movt	r3, #2
   16ee8:	mov	r2, #172	; 0xac
   16eec:	movw	r1, #56540	; 0xdcdc
   16ef0:	movt	r1, #2
   16ef4:	movw	r0, #56600	; 0xdd18
   16ef8:	movt	r0, #2
   16efc:	bl	119a0 <__assert_fail@plt>
   16f00:	bl	11964 <abort@plt>
   16f04:	add	r0, sp, #356	; 0x164
   16f08:	bl	11604 <mbsinit@plt>
   16f0c:	cmp	r0, #0
   16f10:	beq	16fa4 <__assert_fail@plt+0x5604>
   16f14:	strb	r4, [sp, #352]	; 0x160
   16f18:	ldr	r8, [sp, #368]	; 0x170
   16f1c:	bl	116a0 <__ctype_get_mb_cur_max@plt>
   16f20:	mov	r1, r0
   16f24:	mov	r0, r8
   16f28:	bl	1b430 <__assert_fail@plt+0x9a90>
   16f2c:	add	r3, sp, #356	; 0x164
   16f30:	mov	r2, r0
   16f34:	mov	r1, r8
   16f38:	add	r0, sp, #380	; 0x17c
   16f3c:	bl	1caa4 <__assert_fail@plt+0xb104>
   16f40:	str	r0, [sp, #372]	; 0x174
   16f44:	cmn	r0, #1
   16f48:	streq	r4, [sp, #372]	; 0x174
   16f4c:	moveq	r3, #0
   16f50:	strbeq	r3, [sp, #376]	; 0x178
   16f54:	beq	171a0 <__assert_fail@plt+0x5800>
   16f58:	cmn	r0, #2
   16f5c:	beq	16fc4 <__assert_fail@plt+0x5624>
   16f60:	cmp	r0, #0
   16f64:	bne	16f88 <__assert_fail@plt+0x55e8>
   16f68:	str	r4, [sp, #372]	; 0x174
   16f6c:	ldr	r3, [sp, #368]	; 0x170
   16f70:	ldrb	r3, [r3]
   16f74:	cmp	r3, #0
   16f78:	bne	16fdc <__assert_fail@plt+0x563c>
   16f7c:	ldr	r3, [sp, #380]	; 0x17c
   16f80:	cmp	r3, #0
   16f84:	bne	16ffc <__assert_fail@plt+0x565c>
   16f88:	strb	r4, [sp, #376]	; 0x178
   16f8c:	add	r0, sp, #356	; 0x164
   16f90:	bl	11604 <mbsinit@plt>
   16f94:	cmp	r0, #0
   16f98:	movne	r3, #0
   16f9c:	strbne	r3, [sp, #352]	; 0x160
   16fa0:	b	171a0 <__assert_fail@plt+0x5800>
   16fa4:	movw	r3, #56520	; 0xdcc8
   16fa8:	movt	r3, #2
   16fac:	mov	r2, #143	; 0x8f
   16fb0:	movw	r1, #56540	; 0xdcdc
   16fb4:	movt	r1, #2
   16fb8:	movw	r0, #56552	; 0xdce8
   16fbc:	movt	r0, #2
   16fc0:	bl	119a0 <__assert_fail@plt>
   16fc4:	ldr	r0, [sp, #368]	; 0x170
   16fc8:	bl	117a8 <strlen@plt>
   16fcc:	str	r0, [sp, #372]	; 0x174
   16fd0:	mov	r3, #0
   16fd4:	strb	r3, [sp, #376]	; 0x178
   16fd8:	b	171a0 <__assert_fail@plt+0x5800>
   16fdc:	movw	r3, #56520	; 0xdcc8
   16fe0:	movt	r3, #2
   16fe4:	mov	r2, #171	; 0xab
   16fe8:	movw	r1, #56540	; 0xdcdc
   16fec:	movt	r1, #2
   16ff0:	movw	r0, #56576	; 0xdd00
   16ff4:	movt	r0, #2
   16ff8:	bl	119a0 <__assert_fail@plt>
   16ffc:	movw	r3, #56520	; 0xdcc8
   17000:	movt	r3, #2
   17004:	mov	r2, #172	; 0xac
   17008:	movw	r1, #56540	; 0xdcdc
   1700c:	movt	r1, #2
   17010:	movw	r0, #56600	; 0xdd18
   17014:	movt	r0, #2
   17018:	bl	119a0 <__assert_fail@plt>
   1701c:	ldr	r3, [sp, #256]	; 0x100
   17020:	str	r3, [sp, #4]
   17024:	ldr	r0, [sp, #4]
   17028:	add	sp, sp, #412	; 0x19c
   1702c:	ldrd	r4, [sp]
   17030:	ldrd	r6, [sp, #8]
   17034:	ldrd	r8, [sp, #16]
   17038:	ldrd	sl, [sp, #24]
   1703c:	add	sp, sp, #32
   17040:	pop	{pc}		; (ldr pc, [sp], #4)
   17044:	add	r0, sp, #300	; 0x12c
   17048:	bl	11604 <mbsinit@plt>
   1704c:	cmp	r0, #0
   17050:	beq	17208 <__assert_fail@plt+0x5868>
   17054:	strb	r4, [sp, #296]	; 0x128
   17058:	ldr	r8, [sp, #312]	; 0x138
   1705c:	bl	116a0 <__ctype_get_mb_cur_max@plt>
   17060:	mov	r1, r0
   17064:	mov	r0, r8
   17068:	bl	1b430 <__assert_fail@plt+0x9a90>
   1706c:	add	r3, sp, #300	; 0x12c
   17070:	mov	r2, r0
   17074:	mov	r1, r8
   17078:	add	r0, sp, #324	; 0x144
   1707c:	bl	1caa4 <__assert_fail@plt+0xb104>
   17080:	str	r0, [sp, #316]	; 0x13c
   17084:	cmn	r0, #1
   17088:	streq	r4, [sp, #316]	; 0x13c
   1708c:	moveq	r3, #0
   17090:	strbeq	r3, [sp, #320]	; 0x140
   17094:	beq	170e0 <__assert_fail@plt+0x5740>
   17098:	cmn	r0, #2
   1709c:	beq	17228 <__assert_fail@plt+0x5888>
   170a0:	cmp	r0, #0
   170a4:	bne	170c8 <__assert_fail@plt+0x5728>
   170a8:	str	r4, [sp, #316]	; 0x13c
   170ac:	ldr	r3, [sp, #312]	; 0x138
   170b0:	ldrb	r3, [r3]
   170b4:	cmp	r3, #0
   170b8:	bne	17240 <__assert_fail@plt+0x58a0>
   170bc:	ldr	r3, [sp, #324]	; 0x144
   170c0:	cmp	r3, #0
   170c4:	bne	17260 <__assert_fail@plt+0x58c0>
   170c8:	strb	r4, [sp, #320]	; 0x140
   170cc:	add	r0, sp, #300	; 0x12c
   170d0:	bl	11604 <mbsinit@plt>
   170d4:	cmp	r0, #0
   170d8:	movne	r3, #0
   170dc:	strbne	r3, [sp, #296]	; 0x128
   170e0:	strb	r4, [sp, #308]	; 0x134
   170e4:	ldrb	r3, [sp, #320]	; 0x140
   170e8:	cmp	r3, #0
   170ec:	beq	17108 <__assert_fail@plt+0x5768>
   170f0:	ldr	r0, [sp, #324]	; 0x144
   170f4:	cmp	r0, #0
   170f8:	beq	17280 <__assert_fail@plt+0x58e0>
   170fc:	ldrb	r3, [sp, #376]	; 0x178
   17100:	cmp	r3, #0
   17104:	bne	1728c <__assert_fail@plt+0x58ec>
   17108:	ldr	r2, [sp, #316]	; 0x13c
   1710c:	ldr	r3, [sp, #372]	; 0x174
   17110:	cmp	r2, r3
   17114:	movne	r0, r4
   17118:	beq	172a8 <__assert_fail@plt+0x5908>
   1711c:	add	r1, r9, #1
   17120:	cmp	r0, #0
   17124:	bne	16bc0 <__assert_fail@plt+0x5220>
   17128:	ldr	r3, [sp, #312]	; 0x138
   1712c:	ldr	r2, [sp, #316]	; 0x13c
   17130:	add	r3, r3, r2
   17134:	str	r3, [sp, #312]	; 0x138
   17138:	mov	r2, #0
   1713c:	strb	r2, [sp, #308]	; 0x134
   17140:	ldr	r3, [sp, #368]	; 0x170
   17144:	ldr	r0, [sp, #372]	; 0x174
   17148:	add	r3, r3, r0
   1714c:	str	r3, [sp, #368]	; 0x170
   17150:	strb	r2, [sp, #364]	; 0x16c
   17154:	mov	r9, r1
   17158:	ldrb	r3, [sp, #364]	; 0x16c
   1715c:	cmp	r3, #0
   17160:	bne	171a4 <__assert_fail@plt+0x5804>
   17164:	ldrb	r3, [sp, #352]	; 0x160
   17168:	cmp	r3, #0
   1716c:	bne	16f18 <__assert_fail@plt+0x5578>
   17170:	ldr	r1, [sp, #368]	; 0x170
   17174:	ldrb	r3, [r1]
   17178:	lsr	r2, r3, #5
   1717c:	and	r3, r3, #31
   17180:	ldr	r2, [r5, r2, lsl #2]
   17184:	lsr	r3, r2, r3
   17188:	tst	r3, #1
   1718c:	beq	16f04 <__assert_fail@plt+0x5564>
   17190:	str	r4, [sp, #372]	; 0x174
   17194:	ldrb	r3, [r1]
   17198:	str	r3, [sp, #380]	; 0x17c
   1719c:	strb	r4, [sp, #376]	; 0x178
   171a0:	strb	r4, [sp, #364]	; 0x16c
   171a4:	ldrb	r3, [sp, #376]	; 0x178
   171a8:	cmp	r3, #0
   171ac:	beq	171bc <__assert_fail@plt+0x581c>
   171b0:	ldr	r3, [sp, #380]	; 0x17c
   171b4:	cmp	r3, #0
   171b8:	beq	1701c <__assert_fail@plt+0x567c>
   171bc:	ldrb	r3, [sp, #308]	; 0x134
   171c0:	cmp	r3, #0
   171c4:	bne	170e4 <__assert_fail@plt+0x5744>
   171c8:	ldrb	r3, [sp, #296]	; 0x128
   171cc:	cmp	r3, #0
   171d0:	bne	17058 <__assert_fail@plt+0x56b8>
   171d4:	ldr	r1, [sp, #312]	; 0x138
   171d8:	ldrb	r3, [r1]
   171dc:	lsr	r2, r3, #5
   171e0:	and	r3, r3, #31
   171e4:	ldr	r2, [r5, r2, lsl #2]
   171e8:	lsr	r3, r2, r3
   171ec:	tst	r3, #1
   171f0:	beq	17044 <__assert_fail@plt+0x56a4>
   171f4:	str	r4, [sp, #316]	; 0x13c
   171f8:	ldrb	r3, [r1]
   171fc:	str	r3, [sp, #324]	; 0x144
   17200:	strb	r4, [sp, #320]	; 0x140
   17204:	b	170e0 <__assert_fail@plt+0x5740>
   17208:	movw	r3, #56520	; 0xdcc8
   1720c:	movt	r3, #2
   17210:	mov	r2, #143	; 0x8f
   17214:	movw	r1, #56540	; 0xdcdc
   17218:	movt	r1, #2
   1721c:	movw	r0, #56552	; 0xdce8
   17220:	movt	r0, #2
   17224:	bl	119a0 <__assert_fail@plt>
   17228:	ldr	r0, [sp, #312]	; 0x138
   1722c:	bl	117a8 <strlen@plt>
   17230:	str	r0, [sp, #316]	; 0x13c
   17234:	mov	r3, #0
   17238:	strb	r3, [sp, #320]	; 0x140
   1723c:	b	170e0 <__assert_fail@plt+0x5740>
   17240:	movw	r3, #56520	; 0xdcc8
   17244:	movt	r3, #2
   17248:	mov	r2, #171	; 0xab
   1724c:	movw	r1, #56540	; 0xdcdc
   17250:	movt	r1, #2
   17254:	movw	r0, #56576	; 0xdd00
   17258:	movt	r0, #2
   1725c:	bl	119a0 <__assert_fail@plt>
   17260:	movw	r3, #56520	; 0xdcc8
   17264:	movt	r3, #2
   17268:	mov	r2, #172	; 0xac
   1726c:	movw	r1, #56540	; 0xdcdc
   17270:	movt	r1, #2
   17274:	movw	r0, #56600	; 0xdd18
   17278:	movt	r0, #2
   1727c:	bl	119a0 <__assert_fail@plt>
   17280:	mov	r3, #0
   17284:	str	r3, [sp, #4]
   17288:	b	17024 <__assert_fail@plt+0x5684>
   1728c:	bl	115f8 <towlower@plt>
   17290:	mov	r8, r0
   17294:	ldr	r0, [sp, #380]	; 0x17c
   17298:	bl	115f8 <towlower@plt>
   1729c:	subs	r0, r8, r0
   172a0:	movne	r0, #1
   172a4:	b	1711c <__assert_fail@plt+0x577c>
   172a8:	ldr	r1, [sp, #368]	; 0x170
   172ac:	ldr	r0, [sp, #312]	; 0x138
   172b0:	bl	1161c <memcmp@plt>
   172b4:	adds	r0, r0, #0
   172b8:	movne	r0, #1
   172bc:	b	1711c <__assert_fail@plt+0x577c>
   172c0:	mov	r3, #0
   172c4:	str	r3, [sp, #4]
   172c8:	b	17024 <__assert_fail@plt+0x5684>
   172cc:	str	sl, [sp, #4]
   172d0:	b	17024 <__assert_fail@plt+0x5684>
   172d4:	ldr	r3, [sp, #352]	; 0x160
   172d8:	str	r3, [sp, #4]
   172dc:	b	17024 <__assert_fail@plt+0x5684>
   172e0:	str	r4, [sp, #8]
   172e4:	mov	sl, r8
   172e8:	str	r9, [sp, #4]
   172ec:	add	fp, fp, #1
   172f0:	add	r8, sl, #1
   172f4:	ldr	r3, [sp, #20]
   172f8:	ldr	r6, [r3]
   172fc:	ldrb	r4, [r9], #1
   17300:	lsl	r3, r4, #1
   17304:	ldrh	r3, [r6, r3]
   17308:	tst	r3, #256	; 0x100
   1730c:	beq	1731c <__assert_fail@plt+0x597c>
   17310:	bl	11748 <__ctype_tolower_loc@plt>
   17314:	ldr	r3, [r0]
   17318:	ldr	r4, [r3, r4, lsl #2]
   1731c:	ldr	r3, [sp, #16]
   17320:	cmp	r4, r3
   17324:	beq	173d4 <__assert_fail@plt+0x5a34>
   17328:	str	r9, [sp, #24]
   1732c:	ldrb	r3, [r9]
   17330:	cmp	r3, #0
   17334:	beq	17498 <__assert_fail@plt+0x5af8>
   17338:	ldr	r4, [sp, #8]
   1733c:	cmp	fp, #9
   17340:	movls	r4, #0
   17344:	andhi	r4, r4, #1
   17348:	cmp	r4, #0
   1734c:	beq	172e4 <__assert_fail@plt+0x5944>
   17350:	add	r3, fp, fp, lsl #2
   17354:	cmp	r8, r3
   17358:	bcc	172e0 <__assert_fail@plt+0x5940>
   1735c:	ldr	r5, [sp, #28]
   17360:	cmp	r5, #0
   17364:	beq	17390 <__assert_fail@plt+0x59f0>
   17368:	ldr	r2, [sp, #32]
   1736c:	sub	r1, r8, r2
   17370:	mov	r0, r5
   17374:	bl	11874 <strnlen@plt>
   17378:	mov	r2, r5
   1737c:	ldrb	r3, [r2, r0]!
   17380:	str	r2, [sp, #28]
   17384:	cmp	r3, #0
   17388:	bne	173c8 <__assert_fail@plt+0x5a28>
   1738c:	str	r8, [sp, #32]
   17390:	ldr	r4, [sp, #12]
   17394:	mov	r0, r4
   17398:	bl	117a8 <strlen@plt>
   1739c:	add	r3, sp, #352	; 0x160
   173a0:	mov	r2, r0
   173a4:	mov	r1, r4
   173a8:	ldr	r0, [sp, #24]
   173ac:	bl	157ec <__assert_fail@plt+0x3e4c>
   173b0:	subs	r3, r0, #0
   173b4:	str	r3, [sp, #8]
   173b8:	bne	172d4 <__assert_fail@plt+0x5934>
   173bc:	mov	r3, #0
   173c0:	str	r3, [sp, #28]
   173c4:	b	172e4 <__assert_fail@plt+0x5944>
   173c8:	str	r8, [sp, #32]
   173cc:	str	r4, [sp, #8]
   173d0:	b	172e4 <__assert_fail@plt+0x5944>
   173d4:	ldr	r3, [sp, #12]
   173d8:	ldrb	r4, [r3, #1]
   173dc:	cmp	r4, #0
   173e0:	beq	17024 <__assert_fail@plt+0x5684>
   173e4:	str	r9, [sp, #24]
   173e8:	ldrb	r5, [r9]
   173ec:	cmp	r5, #0
   173f0:	beq	17480 <__assert_fail@plt+0x5ae0>
   173f4:	ldr	r7, [sp, #36]	; 0x24
   173f8:	ldr	r3, [sp, #40]	; 0x28
   173fc:	add	sl, r3, sl
   17400:	str	fp, [sp, #44]	; 0x2c
   17404:	mov	fp, r9
   17408:	b	1742c <__assert_fail@plt+0x5a8c>
   1740c:	cmp	r5, r4
   17410:	bne	1746c <__assert_fail@plt+0x5acc>
   17414:	ldrb	r4, [r7, #1]!
   17418:	cmp	r4, #0
   1741c:	beq	17024 <__assert_fail@plt+0x5684>
   17420:	ldrb	r5, [fp, #1]!
   17424:	cmp	r5, #0
   17428:	beq	1748c <__assert_fail@plt+0x5aec>
   1742c:	add	r8, r7, sl
   17430:	lsl	r3, r5, #1
   17434:	ldrh	r3, [r6, r3]
   17438:	tst	r3, #256	; 0x100
   1743c:	beq	1744c <__assert_fail@plt+0x5aac>
   17440:	bl	11748 <__ctype_tolower_loc@plt>
   17444:	ldr	r3, [r0]
   17448:	ldr	r5, [r3, r5, lsl #2]
   1744c:	lsl	r3, r4, #1
   17450:	ldrh	r3, [r6, r3]
   17454:	tst	r3, #256	; 0x100
   17458:	beq	1740c <__assert_fail@plt+0x5a6c>
   1745c:	bl	11748 <__ctype_tolower_loc@plt>
   17460:	ldr	r3, [r0]
   17464:	ldr	r4, [r3, r4, lsl #2]
   17468:	b	1740c <__assert_fail@plt+0x5a6c>
   1746c:	ldr	fp, [sp, #44]	; 0x2c
   17470:	b	17338 <__assert_fail@plt+0x5998>
   17474:	mov	r3, #0
   17478:	str	r3, [sp, #4]
   1747c:	b	17024 <__assert_fail@plt+0x5684>
   17480:	mov	r3, #0
   17484:	str	r3, [sp, #4]
   17488:	b	17024 <__assert_fail@plt+0x5684>
   1748c:	mov	r3, #0
   17490:	str	r3, [sp, #4]
   17494:	b	17024 <__assert_fail@plt+0x5684>
   17498:	mov	r3, #0
   1749c:	str	r3, [sp, #4]
   174a0:	b	17024 <__assert_fail@plt+0x5684>
   174a4:	ldrb	r3, [sp, #196]	; 0xc4
   174a8:	cmp	r3, #0
   174ac:	beq	169e4 <__assert_fail@plt+0x5044>
   174b0:	add	r2, sp, #352	; 0x160
   174b4:	mov	r1, sl
   174b8:	ldr	r0, [sp, #8]
   174bc:	bl	15a18 <__assert_fail@plt+0x4078>
   174c0:	subs	r7, r0, #0
   174c4:	bne	16b80 <__assert_fail@plt+0x51e0>
   174c8:	str	r8, [sp, #4]
   174cc:	b	16c6c <__assert_fail@plt+0x52cc>
   174d0:	strd	r4, [sp, #-20]!	; 0xffffffec
   174d4:	strd	r6, [sp, #8]
   174d8:	str	lr, [sp, #16]
   174dc:	sub	sp, sp, #60	; 0x3c
   174e0:	mov	r4, r0
   174e4:	bl	116a0 <__ctype_get_mb_cur_max@plt>
   174e8:	cmp	r0, #1
   174ec:	bhi	17514 <__assert_fail@plt+0x5b74>
   174f0:	mov	r0, r4
   174f4:	bl	117a8 <strlen@plt>
   174f8:	mov	r4, r0
   174fc:	mov	r0, r4
   17500:	add	sp, sp, #60	; 0x3c
   17504:	ldrd	r4, [sp]
   17508:	ldrd	r6, [sp, #8]
   1750c:	add	sp, sp, #16
   17510:	pop	{pc}		; (ldr pc, [sp], #4)
   17514:	str	r4, [sp, #16]
   17518:	mov	r4, #0
   1751c:	strb	r4, [sp]
   17520:	mov	r2, #0
   17524:	mov	r3, #0
   17528:	strd	r2, [sp, #4]
   1752c:	strb	r4, [sp, #12]
   17530:	mov	r5, #1
   17534:	movw	r6, #58600	; 0xe4e8
   17538:	movt	r6, #2
   1753c:	b	17610 <__assert_fail@plt+0x5c70>
   17540:	add	r0, sp, #4
   17544:	bl	11604 <mbsinit@plt>
   17548:	cmp	r0, #0
   1754c:	beq	1765c <__assert_fail@plt+0x5cbc>
   17550:	strb	r5, [sp]
   17554:	ldr	r7, [sp, #16]
   17558:	bl	116a0 <__ctype_get_mb_cur_max@plt>
   1755c:	mov	r1, r0
   17560:	mov	r0, r7
   17564:	bl	1b430 <__assert_fail@plt+0x9a90>
   17568:	add	r3, sp, #4
   1756c:	mov	r2, r0
   17570:	mov	r1, r7
   17574:	add	r0, sp, #28
   17578:	bl	1caa4 <__assert_fail@plt+0xb104>
   1757c:	str	r0, [sp, #20]
   17580:	cmn	r0, #1
   17584:	streq	r5, [sp, #20]
   17588:	moveq	r3, #0
   1758c:	strbeq	r3, [sp, #24]
   17590:	beq	175dc <__assert_fail@plt+0x5c3c>
   17594:	cmn	r0, #2
   17598:	beq	1767c <__assert_fail@plt+0x5cdc>
   1759c:	cmp	r0, #0
   175a0:	bne	175c4 <__assert_fail@plt+0x5c24>
   175a4:	str	r5, [sp, #20]
   175a8:	ldr	r3, [sp, #16]
   175ac:	ldrb	r3, [r3]
   175b0:	cmp	r3, #0
   175b4:	bne	17694 <__assert_fail@plt+0x5cf4>
   175b8:	ldr	r3, [sp, #28]
   175bc:	cmp	r3, #0
   175c0:	bne	176b4 <__assert_fail@plt+0x5d14>
   175c4:	strb	r5, [sp, #24]
   175c8:	add	r0, sp, #4
   175cc:	bl	11604 <mbsinit@plt>
   175d0:	cmp	r0, #0
   175d4:	movne	r3, #0
   175d8:	strbne	r3, [sp]
   175dc:	ldrb	r3, [sp, #24]
   175e0:	cmp	r3, #0
   175e4:	beq	175f4 <__assert_fail@plt+0x5c54>
   175e8:	ldr	r3, [sp, #28]
   175ec:	cmp	r3, #0
   175f0:	beq	174fc <__assert_fail@plt+0x5b5c>
   175f4:	add	r4, r4, #1
   175f8:	ldr	r3, [sp, #16]
   175fc:	ldr	r2, [sp, #20]
   17600:	add	r3, r3, r2
   17604:	str	r3, [sp, #16]
   17608:	mov	r3, #0
   1760c:	strb	r3, [sp, #12]
   17610:	ldrb	r3, [sp, #12]
   17614:	cmp	r3, #0
   17618:	bne	175dc <__assert_fail@plt+0x5c3c>
   1761c:	ldrb	r3, [sp]
   17620:	cmp	r3, #0
   17624:	bne	17554 <__assert_fail@plt+0x5bb4>
   17628:	ldr	r1, [sp, #16]
   1762c:	ldrb	r3, [r1]
   17630:	lsr	r2, r3, #5
   17634:	and	r3, r3, #31
   17638:	ldr	r2, [r6, r2, lsl #2]
   1763c:	lsr	r3, r2, r3
   17640:	tst	r3, #1
   17644:	beq	17540 <__assert_fail@plt+0x5ba0>
   17648:	str	r5, [sp, #20]
   1764c:	ldrb	r3, [r1]
   17650:	str	r3, [sp, #28]
   17654:	strb	r5, [sp, #24]
   17658:	b	175dc <__assert_fail@plt+0x5c3c>
   1765c:	movw	r3, #56620	; 0xdd2c
   17660:	movt	r3, #2
   17664:	mov	r2, #143	; 0x8f
   17668:	movw	r1, #56540	; 0xdcdc
   1766c:	movt	r1, #2
   17670:	movw	r0, #56552	; 0xdce8
   17674:	movt	r0, #2
   17678:	bl	119a0 <__assert_fail@plt>
   1767c:	ldr	r0, [sp, #16]
   17680:	bl	117a8 <strlen@plt>
   17684:	str	r0, [sp, #20]
   17688:	mov	r3, #0
   1768c:	strb	r3, [sp, #24]
   17690:	b	175dc <__assert_fail@plt+0x5c3c>
   17694:	movw	r3, #56620	; 0xdd2c
   17698:	movt	r3, #2
   1769c:	mov	r2, #171	; 0xab
   176a0:	movw	r1, #56540	; 0xdcdc
   176a4:	movt	r1, #2
   176a8:	movw	r0, #56576	; 0xdd00
   176ac:	movt	r0, #2
   176b0:	bl	119a0 <__assert_fail@plt>
   176b4:	movw	r3, #56620	; 0xdd2c
   176b8:	movt	r3, #2
   176bc:	mov	r2, #172	; 0xac
   176c0:	movw	r1, #56540	; 0xdcdc
   176c4:	movt	r1, #2
   176c8:	movw	r0, #56600	; 0xdd18
   176cc:	movt	r0, #2
   176d0:	bl	119a0 <__assert_fail@plt>
   176d4:	strd	r4, [sp, #-32]!	; 0xffffffe0
   176d8:	strd	r6, [sp, #8]
   176dc:	strd	r8, [sp, #16]
   176e0:	str	fp, [sp, #24]
   176e4:	str	lr, [sp, #28]
   176e8:	add	fp, sp, #28
   176ec:	mov	r7, r3
   176f0:	lsl	r3, r2, #2
   176f4:	lsr	r8, r2, #30
   176f8:	adds	r8, r8, #0
   176fc:	movne	r8, #1
   17700:	cmp	r3, #0
   17704:	movlt	r8, #1
   17708:	cmp	r8, #0
   1770c:	movne	r8, #0
   17710:	bne	1782c <__assert_fail@plt+0x5e8c>
   17714:	mov	r6, r0
   17718:	mov	r4, r1
   1771c:	mov	r5, r2
   17720:	mov	r0, r3
   17724:	cmp	r3, #4016	; 0xfb0
   17728:	bhi	17768 <__assert_fail@plt+0x5dc8>
   1772c:	add	r3, r3, #22
   17730:	bic	r3, r3, #7
   17734:	sub	sp, sp, r3
   17738:	add	r0, sp, #15
   1773c:	bic	r0, r0, #15
   17740:	cmp	r0, #0
   17744:	beq	1782c <__assert_fail@plt+0x5e8c>
   17748:	mov	r3, #1
   1774c:	str	r3, [r0, #4]
   17750:	cmp	r5, #2
   17754:	bls	177c8 <__assert_fail@plt+0x5e28>
   17758:	mov	lr, r4
   1775c:	mov	r3, #0
   17760:	mov	ip, #2
   17764:	b	17788 <__assert_fail@plt+0x5de8>
   17768:	bl	2c2c8 <__assert_fail@plt+0x1a928>
   1776c:	b	17740 <__assert_fail@plt+0x5da0>
   17770:	add	r3, r3, #1
   17774:	sub	r2, ip, r3
   17778:	str	r2, [r0, ip, lsl #2]
   1777c:	add	ip, ip, #1
   17780:	cmp	r5, ip
   17784:	beq	177c8 <__assert_fail@plt+0x5e28>
   17788:	ldrb	r1, [lr, #1]!
   1778c:	ldrb	r2, [r4, r3]
   17790:	cmp	r2, r1
   17794:	beq	17770 <__assert_fail@plt+0x5dd0>
   17798:	cmp	r3, #0
   1779c:	beq	177bc <__assert_fail@plt+0x5e1c>
   177a0:	ldr	r2, [r0, r3, lsl #2]
   177a4:	sub	r3, r3, r2
   177a8:	ldrb	r2, [r4, r3]
   177ac:	cmp	r2, r1
   177b0:	beq	17770 <__assert_fail@plt+0x5dd0>
   177b4:	cmp	r3, #0
   177b8:	bne	177a0 <__assert_fail@plt+0x5e00>
   177bc:	str	ip, [r0, ip, lsl #2]
   177c0:	mov	r3, #0
   177c4:	b	1777c <__assert_fail@plt+0x5ddc>
   177c8:	mov	r3, #0
   177cc:	str	r3, [r7]
   177d0:	mov	r1, r6
   177d4:	b	177e8 <__assert_fail@plt+0x5e48>
   177d8:	add	r3, r3, #1
   177dc:	add	r1, r1, #1
   177e0:	cmp	r5, r3
   177e4:	beq	17820 <__assert_fail@plt+0x5e80>
   177e8:	ldrb	r2, [r1]
   177ec:	cmp	r2, #0
   177f0:	beq	17824 <__assert_fail@plt+0x5e84>
   177f4:	ldrb	ip, [r4, r3]
   177f8:	cmp	ip, r2
   177fc:	beq	177d8 <__assert_fail@plt+0x5e38>
   17800:	cmp	r3, #0
   17804:	addeq	r6, r6, #1
   17808:	addeq	r1, r1, #1
   1780c:	beq	177e8 <__assert_fail@plt+0x5e48>
   17810:	ldr	r2, [r0, r3, lsl #2]
   17814:	add	r6, r6, r2
   17818:	sub	r3, r3, r2
   1781c:	b	177e8 <__assert_fail@plt+0x5e48>
   17820:	str	r6, [r7]
   17824:	bl	2c330 <__assert_fail@plt+0x1a990>
   17828:	mov	r8, #1
   1782c:	mov	r0, r8
   17830:	sub	sp, fp, #28
   17834:	ldrd	r4, [sp]
   17838:	ldrd	r6, [sp, #8]
   1783c:	ldrd	r8, [sp, #16]
   17840:	ldr	fp, [sp, #24]
   17844:	add	sp, sp, #28
   17848:	pop	{pc}		; (ldr pc, [sp], #4)
   1784c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   17850:	strd	r6, [sp, #8]
   17854:	strd	r8, [sp, #16]
   17858:	strd	sl, [sp, #24]
   1785c:	str	lr, [sp, #32]
   17860:	add	fp, sp, #32
   17864:	sub	sp, sp, #140	; 0x8c
   17868:	str	r0, [fp, #-164]	; 0xffffff5c
   1786c:	mov	r4, r1
   17870:	str	r2, [fp, #-160]	; 0xffffff60
   17874:	mov	r0, r1
   17878:	bl	174d0 <__assert_fail@plt+0x5b30>
   1787c:	str	r0, [fp, #-152]	; 0xffffff68
   17880:	mov	r2, #44	; 0x2c
   17884:	umull	r6, r7, r0, r2
   17888:	adds	r3, r7, #0
   1788c:	movne	r3, #1
   17890:	cmp	r6, #0
   17894:	movlt	r3, #1
   17898:	str	r3, [fp, #-156]	; 0xffffff64
   1789c:	cmp	r3, #0
   178a0:	bne	180f0 <__assert_fail@plt+0x6750>
   178a4:	mov	r1, r0
   178a8:	mul	r0, r2, r1
   178ac:	cmp	r0, #4016	; 0xfb0
   178b0:	bhi	1790c <__assert_fail@plt+0x5f6c>
   178b4:	add	r3, r0, #22
   178b8:	bic	r3, r3, #7
   178bc:	sub	sp, sp, r3
   178c0:	add	r8, sp, #15
   178c4:	bic	r8, r8, #15
   178c8:	cmp	r8, #0
   178cc:	beq	17c4c <__assert_fail@plt+0x62ac>
   178d0:	ldr	r3, [fp, #-152]	; 0xffffff68
   178d4:	add	r9, r3, r3, lsl #2
   178d8:	add	r9, r8, r9, lsl #3
   178dc:	str	r4, [fp, #-76]	; 0xffffffb4
   178e0:	mov	r3, #0
   178e4:	strb	r3, [fp, #-92]	; 0xffffffa4
   178e8:	mov	r0, #0
   178ec:	mov	r1, #0
   178f0:	strd	r0, [fp, #-88]	; 0xffffffa8
   178f4:	strb	r3, [fp, #-80]	; 0xffffffb0
   178f8:	add	r4, r8, #16
   178fc:	mov	r5, #1
   17900:	movw	r7, #58600	; 0xe4e8
   17904:	movt	r7, #2
   17908:	b	17a30 <__assert_fail@plt+0x6090>
   1790c:	bl	2c2c8 <__assert_fail@plt+0x1a928>
   17910:	mov	r8, r0
   17914:	b	178c8 <__assert_fail@plt+0x5f28>
   17918:	ldr	r2, [fp, #-72]	; 0xffffffb8
   1791c:	sub	r1, fp, #60	; 0x3c
   17920:	mov	r0, r4
   17924:	bl	115d4 <memcpy@plt>
   17928:	str	r4, [r4, #-16]
   1792c:	b	179fc <__assert_fail@plt+0x605c>
   17930:	sub	r0, fp, #88	; 0x58
   17934:	bl	11604 <mbsinit@plt>
   17938:	cmp	r0, #0
   1793c:	beq	17a7c <__assert_fail@plt+0x60dc>
   17940:	strb	r5, [fp, #-92]	; 0xffffffa4
   17944:	ldr	r6, [fp, #-76]	; 0xffffffb4
   17948:	bl	116a0 <__ctype_get_mb_cur_max@plt>
   1794c:	mov	r1, r0
   17950:	mov	r0, r6
   17954:	bl	1b430 <__assert_fail@plt+0x9a90>
   17958:	sub	r3, fp, #88	; 0x58
   1795c:	mov	r2, r0
   17960:	mov	r1, r6
   17964:	sub	r0, fp, #64	; 0x40
   17968:	bl	1caa4 <__assert_fail@plt+0xb104>
   1796c:	str	r0, [fp, #-72]	; 0xffffffb8
   17970:	cmn	r0, #1
   17974:	streq	r5, [fp, #-72]	; 0xffffffb8
   17978:	moveq	r3, #0
   1797c:	strbeq	r3, [fp, #-68]	; 0xffffffbc
   17980:	beq	179cc <__assert_fail@plt+0x602c>
   17984:	cmn	r0, #2
   17988:	beq	17a9c <__assert_fail@plt+0x60fc>
   1798c:	cmp	r0, #0
   17990:	bne	179b4 <__assert_fail@plt+0x6014>
   17994:	str	r5, [fp, #-72]	; 0xffffffb8
   17998:	ldr	r3, [fp, #-76]	; 0xffffffb4
   1799c:	ldrb	r3, [r3]
   179a0:	cmp	r3, #0
   179a4:	bne	17ab4 <__assert_fail@plt+0x6114>
   179a8:	ldr	r3, [fp, #-64]	; 0xffffffc0
   179ac:	cmp	r3, #0
   179b0:	bne	17ad4 <__assert_fail@plt+0x6134>
   179b4:	strb	r5, [fp, #-68]	; 0xffffffbc
   179b8:	sub	r0, fp, #88	; 0x58
   179bc:	bl	11604 <mbsinit@plt>
   179c0:	cmp	r0, #0
   179c4:	movne	r3, #0
   179c8:	strbne	r3, [fp, #-92]	; 0xffffffa4
   179cc:	strb	r5, [fp, #-80]	; 0xffffffb0
   179d0:	ldrb	r3, [fp, #-68]	; 0xffffffbc
   179d4:	cmp	r3, #0
   179d8:	beq	179e8 <__assert_fail@plt+0x6048>
   179dc:	ldr	r6, [fp, #-64]	; 0xffffffc0
   179e0:	cmp	r6, #0
   179e4:	beq	17af4 <__assert_fail@plt+0x6154>
   179e8:	ldr	r3, [fp, #-76]	; 0xffffffb4
   179ec:	sub	r2, fp, #60	; 0x3c
   179f0:	cmp	r3, r2
   179f4:	strne	r3, [r4, #-16]
   179f8:	beq	17918 <__assert_fail@plt+0x5f78>
   179fc:	ldr	r2, [fp, #-72]	; 0xffffffb8
   17a00:	str	r2, [r4, #-12]
   17a04:	ldrb	r3, [fp, #-68]	; 0xffffffbc
   17a08:	strb	r3, [r4, #-8]
   17a0c:	cmp	r3, #0
   17a10:	ldrne	r3, [fp, #-64]	; 0xffffffc0
   17a14:	strne	r3, [r4, #-4]
   17a18:	ldr	r3, [fp, #-76]	; 0xffffffb4
   17a1c:	add	r3, r3, r2
   17a20:	str	r3, [fp, #-76]	; 0xffffffb4
   17a24:	mov	r3, #0
   17a28:	strb	r3, [fp, #-80]	; 0xffffffb0
   17a2c:	add	r4, r4, #40	; 0x28
   17a30:	ldrb	r3, [fp, #-80]	; 0xffffffb0
   17a34:	cmp	r3, #0
   17a38:	bne	179d0 <__assert_fail@plt+0x6030>
   17a3c:	ldrb	r3, [fp, #-92]	; 0xffffffa4
   17a40:	cmp	r3, #0
   17a44:	bne	17944 <__assert_fail@plt+0x5fa4>
   17a48:	ldr	r1, [fp, #-76]	; 0xffffffb4
   17a4c:	ldrb	r3, [r1]
   17a50:	lsr	r2, r3, #5
   17a54:	and	r3, r3, #31
   17a58:	ldr	r2, [r7, r2, lsl #2]
   17a5c:	lsr	r3, r2, r3
   17a60:	tst	r3, #1
   17a64:	beq	17930 <__assert_fail@plt+0x5f90>
   17a68:	str	r5, [fp, #-72]	; 0xffffffb8
   17a6c:	ldrb	r3, [r1]
   17a70:	str	r3, [fp, #-64]	; 0xffffffc0
   17a74:	strb	r5, [fp, #-68]	; 0xffffffbc
   17a78:	b	179cc <__assert_fail@plt+0x602c>
   17a7c:	movw	r3, #56640	; 0xdd40
   17a80:	movt	r3, #2
   17a84:	mov	r2, #143	; 0x8f
   17a88:	movw	r1, #56540	; 0xdcdc
   17a8c:	movt	r1, #2
   17a90:	movw	r0, #56552	; 0xdce8
   17a94:	movt	r0, #2
   17a98:	bl	119a0 <__assert_fail@plt>
   17a9c:	ldr	r0, [fp, #-76]	; 0xffffffb4
   17aa0:	bl	117a8 <strlen@plt>
   17aa4:	str	r0, [fp, #-72]	; 0xffffffb8
   17aa8:	mov	r3, #0
   17aac:	strb	r3, [fp, #-68]	; 0xffffffbc
   17ab0:	b	179cc <__assert_fail@plt+0x602c>
   17ab4:	movw	r3, #56640	; 0xdd40
   17ab8:	movt	r3, #2
   17abc:	mov	r2, #171	; 0xab
   17ac0:	movw	r1, #56540	; 0xdcdc
   17ac4:	movt	r1, #2
   17ac8:	movw	r0, #56576	; 0xdd00
   17acc:	movt	r0, #2
   17ad0:	bl	119a0 <__assert_fail@plt>
   17ad4:	movw	r3, #56640	; 0xdd40
   17ad8:	movt	r3, #2
   17adc:	mov	r2, #172	; 0xac
   17ae0:	movw	r1, #56540	; 0xdcdc
   17ae4:	movt	r1, #2
   17ae8:	movw	r0, #56600	; 0xdd18
   17aec:	movt	r0, #2
   17af0:	bl	119a0 <__assert_fail@plt>
   17af4:	str	r3, [fp, #-156]	; 0xffffff64
   17af8:	mov	r3, #1
   17afc:	str	r3, [r9, #4]
   17b00:	ldr	r3, [fp, #-152]	; 0xffffff68
   17b04:	cmp	r3, #2
   17b08:	bls	17bd8 <__assert_fail@plt+0x6238>
   17b0c:	mov	r7, r8
   17b10:	mov	r4, r6
   17b14:	mov	sl, #2
   17b18:	str	r6, [fp, #-168]	; 0xffffff58
   17b1c:	b	17bc0 <__assert_fail@plt+0x6220>
   17b20:	ldr	r2, [r5, #44]	; 0x2c
   17b24:	add	r3, r4, r4, lsl #2
   17b28:	add	r1, r8, r3, lsl #3
   17b2c:	ldr	r1, [r1, #4]
   17b30:	cmp	r2, r1
   17b34:	movne	r0, #0
   17b38:	beq	17b88 <__assert_fail@plt+0x61e8>
   17b3c:	cmp	r0, #0
   17b40:	bne	17ba0 <__assert_fail@plt+0x6200>
   17b44:	cmp	r4, #0
   17b48:	beq	17bcc <__assert_fail@plt+0x622c>
   17b4c:	ldr	r3, [r9, r4, lsl #2]
   17b50:	sub	r4, r4, r3
   17b54:	cmp	r6, #0
   17b58:	beq	17b20 <__assert_fail@plt+0x6180>
   17b5c:	add	r3, r4, r4, lsl #2
   17b60:	add	r3, r8, r3, lsl #3
   17b64:	ldrb	r2, [r3, #8]
   17b68:	cmp	r2, #0
   17b6c:	beq	17b20 <__assert_fail@plt+0x6180>
   17b70:	ldr	r0, [r5, #52]	; 0x34
   17b74:	ldr	r3, [r3, #12]
   17b78:	cmp	r0, r3
   17b7c:	movne	r0, #0
   17b80:	moveq	r0, #1
   17b84:	b	17b3c <__assert_fail@plt+0x619c>
   17b88:	ldr	r1, [r8, r3, lsl #3]
   17b8c:	ldr	r0, [r5, #40]	; 0x28
   17b90:	bl	1161c <memcmp@plt>
   17b94:	clz	r0, r0
   17b98:	lsr	r0, r0, #5
   17b9c:	b	17b3c <__assert_fail@plt+0x619c>
   17ba0:	add	r4, r4, #1
   17ba4:	sub	r3, sl, r4
   17ba8:	str	r3, [r9, sl, lsl #2]
   17bac:	add	sl, sl, #1
   17bb0:	add	r7, r7, #40	; 0x28
   17bb4:	ldr	r3, [fp, #-152]	; 0xffffff68
   17bb8:	cmp	r3, sl
   17bbc:	beq	17bd4 <__assert_fail@plt+0x6234>
   17bc0:	mov	r5, r7
   17bc4:	ldrb	r6, [r7, #48]	; 0x30
   17bc8:	b	17b54 <__assert_fail@plt+0x61b4>
   17bcc:	str	sl, [r9, sl, lsl #2]
   17bd0:	b	17bac <__assert_fail@plt+0x620c>
   17bd4:	ldr	r6, [fp, #-168]	; 0xffffff58
   17bd8:	mov	r3, #0
   17bdc:	ldr	r2, [fp, #-160]	; 0xffffff60
   17be0:	str	r3, [r2]
   17be4:	ldr	r2, [fp, #-164]	; 0xffffff5c
   17be8:	str	r2, [fp, #-132]	; 0xffffff7c
   17bec:	strb	r3, [fp, #-148]	; 0xffffff6c
   17bf0:	mov	r0, #0
   17bf4:	mov	r1, #0
   17bf8:	strd	r0, [fp, #-144]	; 0xffffff70
   17bfc:	strb	r3, [fp, #-136]	; 0xffffff78
   17c00:	str	r2, [fp, #-76]	; 0xffffffb4
   17c04:	strb	r3, [fp, #-92]	; 0xffffffa4
   17c08:	strd	r0, [fp, #-88]	; 0xffffffa8
   17c0c:	strb	r3, [fp, #-80]	; 0xffffffb0
   17c10:	mov	r5, #1
   17c14:	movw	sl, #58600	; 0xe4e8
   17c18:	movt	sl, #2
   17c1c:	b	18148 <__assert_fail@plt+0x67a8>
   17c20:	ldr	r1, [fp, #-76]	; 0xffffffb4
   17c24:	ldr	r0, [r3]
   17c28:	bl	1161c <memcmp@plt>
   17c2c:	clz	r0, r0
   17c30:	lsr	r0, r0, #5
   17c34:	b	18118 <__assert_fail@plt+0x6778>
   17c38:	ldr	r3, [fp, #-132]	; 0xffffff7c
   17c3c:	ldr	r2, [fp, #-160]	; 0xffffff60
   17c40:	str	r3, [r2]
   17c44:	mov	r0, r8
   17c48:	bl	2c330 <__assert_fail@plt+0x1a990>
   17c4c:	ldr	r0, [fp, #-156]	; 0xffffff64
   17c50:	sub	sp, fp, #32
   17c54:	ldrd	r4, [sp]
   17c58:	ldrd	r6, [sp, #8]
   17c5c:	ldrd	r8, [sp, #16]
   17c60:	ldrd	sl, [sp, #24]
   17c64:	add	sp, sp, #32
   17c68:	pop	{pc}		; (ldr pc, [sp], #4)
   17c6c:	cmp	r6, #0
   17c70:	bne	17d08 <__assert_fail@plt+0x6368>
   17c74:	ldrb	r3, [fp, #-136]	; 0xffffff78
   17c78:	cmp	r3, #0
   17c7c:	bne	17cc0 <__assert_fail@plt+0x6320>
   17c80:	ldrb	r3, [fp, #-148]	; 0xffffff6c
   17c84:	cmp	r3, #0
   17c88:	bne	17ed0 <__assert_fail@plt+0x6530>
   17c8c:	ldr	r1, [fp, #-132]	; 0xffffff7c
   17c90:	ldrb	r3, [r1]
   17c94:	lsr	r2, r3, #5
   17c98:	and	r3, r3, #31
   17c9c:	ldr	r2, [sl, r2, lsl #2]
   17ca0:	lsr	r3, r2, r3
   17ca4:	tst	r3, #1
   17ca8:	beq	17ebc <__assert_fail@plt+0x651c>
   17cac:	str	r5, [fp, #-128]	; 0xffffff80
   17cb0:	ldrb	r3, [r1]
   17cb4:	str	r3, [fp, #-120]	; 0xffffff88
   17cb8:	strb	r5, [fp, #-124]	; 0xffffff84
   17cbc:	strb	r5, [fp, #-136]	; 0xffffff78
   17cc0:	ldrb	r3, [fp, #-124]	; 0xffffff84
   17cc4:	cmp	r3, #0
   17cc8:	beq	17cd8 <__assert_fail@plt+0x6338>
   17ccc:	ldr	r3, [fp, #-120]	; 0xffffff88
   17cd0:	cmp	r3, #0
   17cd4:	beq	17fd4 <__assert_fail@plt+0x6634>
   17cd8:	ldr	r3, [fp, #-132]	; 0xffffff7c
   17cdc:	ldr	r2, [fp, #-128]	; 0xffffff80
   17ce0:	add	r3, r3, r2
   17ce4:	str	r3, [fp, #-132]	; 0xffffff7c
   17ce8:	mov	r2, #0
   17cec:	strb	r2, [fp, #-136]	; 0xffffff78
   17cf0:	ldr	r3, [fp, #-76]	; 0xffffffb4
   17cf4:	ldr	r1, [fp, #-72]	; 0xffffffb8
   17cf8:	add	r3, r3, r1
   17cfc:	str	r3, [fp, #-76]	; 0xffffffb4
   17d00:	strb	r2, [fp, #-80]	; 0xffffffb0
   17d04:	b	18148 <__assert_fail@plt+0x67a8>
   17d08:	ldr	r4, [r9, r6, lsl #2]
   17d0c:	sub	r6, r6, r4
   17d10:	cmp	r4, #0
   17d14:	bne	17df4 <__assert_fail@plt+0x6454>
   17d18:	b	18148 <__assert_fail@plt+0x67a8>
   17d1c:	sub	r0, fp, #144	; 0x90
   17d20:	bl	11604 <mbsinit@plt>
   17d24:	cmp	r0, #0
   17d28:	beq	17e40 <__assert_fail@plt+0x64a0>
   17d2c:	strb	r5, [fp, #-148]	; 0xffffff6c
   17d30:	ldr	r7, [fp, #-132]	; 0xffffff7c
   17d34:	bl	116a0 <__ctype_get_mb_cur_max@plt>
   17d38:	mov	r1, r0
   17d3c:	mov	r0, r7
   17d40:	bl	1b430 <__assert_fail@plt+0x9a90>
   17d44:	sub	r3, fp, #144	; 0x90
   17d48:	mov	r2, r0
   17d4c:	mov	r1, r7
   17d50:	sub	r0, fp, #120	; 0x78
   17d54:	bl	1caa4 <__assert_fail@plt+0xb104>
   17d58:	str	r0, [fp, #-128]	; 0xffffff80
   17d5c:	cmn	r0, #1
   17d60:	streq	r5, [fp, #-128]	; 0xffffff80
   17d64:	moveq	r3, #0
   17d68:	strbeq	r3, [fp, #-124]	; 0xffffff84
   17d6c:	beq	17db8 <__assert_fail@plt+0x6418>
   17d70:	cmn	r0, #2
   17d74:	beq	17e60 <__assert_fail@plt+0x64c0>
   17d78:	cmp	r0, #0
   17d7c:	bne	17da0 <__assert_fail@plt+0x6400>
   17d80:	str	r5, [fp, #-128]	; 0xffffff80
   17d84:	ldr	r3, [fp, #-132]	; 0xffffff7c
   17d88:	ldrb	r3, [r3]
   17d8c:	cmp	r3, #0
   17d90:	bne	17e78 <__assert_fail@plt+0x64d8>
   17d94:	ldr	r3, [fp, #-120]	; 0xffffff88
   17d98:	cmp	r3, #0
   17d9c:	bne	17e98 <__assert_fail@plt+0x64f8>
   17da0:	strb	r5, [fp, #-124]	; 0xffffff84
   17da4:	sub	r0, fp, #144	; 0x90
   17da8:	bl	11604 <mbsinit@plt>
   17dac:	cmp	r0, #0
   17db0:	movne	r3, #0
   17db4:	strbne	r3, [fp, #-148]	; 0xffffff6c
   17db8:	strb	r5, [fp, #-136]	; 0xffffff78
   17dbc:	ldrb	r3, [fp, #-124]	; 0xffffff84
   17dc0:	cmp	r3, #0
   17dc4:	beq	17dd4 <__assert_fail@plt+0x6434>
   17dc8:	ldr	r3, [fp, #-120]	; 0xffffff88
   17dcc:	cmp	r3, #0
   17dd0:	beq	17eb8 <__assert_fail@plt+0x6518>
   17dd4:	ldr	r3, [fp, #-132]	; 0xffffff7c
   17dd8:	ldr	r2, [fp, #-128]	; 0xffffff80
   17ddc:	add	r3, r3, r2
   17de0:	str	r3, [fp, #-132]	; 0xffffff7c
   17de4:	mov	r3, #0
   17de8:	strb	r3, [fp, #-136]	; 0xffffff78
   17dec:	subs	r4, r4, #1
   17df0:	beq	18148 <__assert_fail@plt+0x67a8>
   17df4:	ldrb	r3, [fp, #-136]	; 0xffffff78
   17df8:	cmp	r3, #0
   17dfc:	bne	17dbc <__assert_fail@plt+0x641c>
   17e00:	ldrb	r3, [fp, #-148]	; 0xffffff6c
   17e04:	cmp	r3, #0
   17e08:	bne	17d30 <__assert_fail@plt+0x6390>
   17e0c:	ldr	r1, [fp, #-132]	; 0xffffff7c
   17e10:	ldrb	r3, [r1]
   17e14:	lsr	r2, r3, #5
   17e18:	and	r3, r3, #31
   17e1c:	ldr	r2, [sl, r2, lsl #2]
   17e20:	lsr	r3, r2, r3
   17e24:	tst	r3, #1
   17e28:	beq	17d1c <__assert_fail@plt+0x637c>
   17e2c:	str	r5, [fp, #-128]	; 0xffffff80
   17e30:	ldrb	r3, [r1]
   17e34:	str	r3, [fp, #-120]	; 0xffffff88
   17e38:	strb	r5, [fp, #-124]	; 0xffffff84
   17e3c:	b	17db8 <__assert_fail@plt+0x6418>
   17e40:	movw	r3, #56640	; 0xdd40
   17e44:	movt	r3, #2
   17e48:	mov	r2, #143	; 0x8f
   17e4c:	movw	r1, #56540	; 0xdcdc
   17e50:	movt	r1, #2
   17e54:	movw	r0, #56552	; 0xdce8
   17e58:	movt	r0, #2
   17e5c:	bl	119a0 <__assert_fail@plt>
   17e60:	ldr	r0, [fp, #-132]	; 0xffffff7c
   17e64:	bl	117a8 <strlen@plt>
   17e68:	str	r0, [fp, #-128]	; 0xffffff80
   17e6c:	mov	r3, #0
   17e70:	strb	r3, [fp, #-124]	; 0xffffff84
   17e74:	b	17db8 <__assert_fail@plt+0x6418>
   17e78:	movw	r3, #56640	; 0xdd40
   17e7c:	movt	r3, #2
   17e80:	mov	r2, #171	; 0xab
   17e84:	movw	r1, #56540	; 0xdcdc
   17e88:	movt	r1, #2
   17e8c:	movw	r0, #56576	; 0xdd00
   17e90:	movt	r0, #2
   17e94:	bl	119a0 <__assert_fail@plt>
   17e98:	movw	r3, #56640	; 0xdd40
   17e9c:	movt	r3, #2
   17ea0:	mov	r2, #172	; 0xac
   17ea4:	movw	r1, #56540	; 0xdcdc
   17ea8:	movt	r1, #2
   17eac:	movw	r0, #56600	; 0xdd18
   17eb0:	movt	r0, #2
   17eb4:	bl	119a0 <__assert_fail@plt>
   17eb8:	bl	11964 <abort@plt>
   17ebc:	sub	r0, fp, #144	; 0x90
   17ec0:	bl	11604 <mbsinit@plt>
   17ec4:	cmp	r0, #0
   17ec8:	beq	17f5c <__assert_fail@plt+0x65bc>
   17ecc:	strb	r5, [fp, #-148]	; 0xffffff6c
   17ed0:	ldr	r4, [fp, #-132]	; 0xffffff7c
   17ed4:	bl	116a0 <__ctype_get_mb_cur_max@plt>
   17ed8:	mov	r1, r0
   17edc:	mov	r0, r4
   17ee0:	bl	1b430 <__assert_fail@plt+0x9a90>
   17ee4:	sub	r3, fp, #144	; 0x90
   17ee8:	mov	r2, r0
   17eec:	mov	r1, r4
   17ef0:	sub	r0, fp, #120	; 0x78
   17ef4:	bl	1caa4 <__assert_fail@plt+0xb104>
   17ef8:	str	r0, [fp, #-128]	; 0xffffff80
   17efc:	cmn	r0, #1
   17f00:	streq	r5, [fp, #-128]	; 0xffffff80
   17f04:	moveq	r3, #0
   17f08:	strbeq	r3, [fp, #-124]	; 0xffffff84
   17f0c:	beq	17cbc <__assert_fail@plt+0x631c>
   17f10:	cmn	r0, #2
   17f14:	beq	17f7c <__assert_fail@plt+0x65dc>
   17f18:	cmp	r0, #0
   17f1c:	bne	17f40 <__assert_fail@plt+0x65a0>
   17f20:	str	r5, [fp, #-128]	; 0xffffff80
   17f24:	ldr	r3, [fp, #-132]	; 0xffffff7c
   17f28:	ldrb	r3, [r3]
   17f2c:	cmp	r3, #0
   17f30:	bne	17f94 <__assert_fail@plt+0x65f4>
   17f34:	ldr	r3, [fp, #-120]	; 0xffffff88
   17f38:	cmp	r3, #0
   17f3c:	bne	17fb4 <__assert_fail@plt+0x6614>
   17f40:	strb	r5, [fp, #-124]	; 0xffffff84
   17f44:	sub	r0, fp, #144	; 0x90
   17f48:	bl	11604 <mbsinit@plt>
   17f4c:	cmp	r0, #0
   17f50:	movne	r3, #0
   17f54:	strbne	r3, [fp, #-148]	; 0xffffff6c
   17f58:	b	17cbc <__assert_fail@plt+0x631c>
   17f5c:	movw	r3, #56640	; 0xdd40
   17f60:	movt	r3, #2
   17f64:	mov	r2, #143	; 0x8f
   17f68:	movw	r1, #56540	; 0xdcdc
   17f6c:	movt	r1, #2
   17f70:	movw	r0, #56552	; 0xdce8
   17f74:	movt	r0, #2
   17f78:	bl	119a0 <__assert_fail@plt>
   17f7c:	ldr	r0, [fp, #-132]	; 0xffffff7c
   17f80:	bl	117a8 <strlen@plt>
   17f84:	str	r0, [fp, #-128]	; 0xffffff80
   17f88:	mov	r3, #0
   17f8c:	strb	r3, [fp, #-124]	; 0xffffff84
   17f90:	b	17cbc <__assert_fail@plt+0x631c>
   17f94:	movw	r3, #56640	; 0xdd40
   17f98:	movt	r3, #2
   17f9c:	mov	r2, #171	; 0xab
   17fa0:	movw	r1, #56540	; 0xdcdc
   17fa4:	movt	r1, #2
   17fa8:	movw	r0, #56576	; 0xdd00
   17fac:	movt	r0, #2
   17fb0:	bl	119a0 <__assert_fail@plt>
   17fb4:	movw	r3, #56640	; 0xdd40
   17fb8:	movt	r3, #2
   17fbc:	mov	r2, #172	; 0xac
   17fc0:	movw	r1, #56540	; 0xdcdc
   17fc4:	movt	r1, #2
   17fc8:	movw	r0, #56600	; 0xdd18
   17fcc:	movt	r0, #2
   17fd0:	bl	119a0 <__assert_fail@plt>
   17fd4:	bl	11964 <abort@plt>
   17fd8:	sub	r0, fp, #88	; 0x58
   17fdc:	bl	11604 <mbsinit@plt>
   17fe0:	cmp	r0, #0
   17fe4:	beq	18078 <__assert_fail@plt+0x66d8>
   17fe8:	strb	r5, [fp, #-92]	; 0xffffffa4
   17fec:	ldr	r4, [fp, #-76]	; 0xffffffb4
   17ff0:	bl	116a0 <__ctype_get_mb_cur_max@plt>
   17ff4:	mov	r1, r0
   17ff8:	mov	r0, r4
   17ffc:	bl	1b430 <__assert_fail@plt+0x9a90>
   18000:	sub	r3, fp, #88	; 0x58
   18004:	mov	r2, r0
   18008:	mov	r1, r4
   1800c:	sub	r0, fp, #64	; 0x40
   18010:	bl	1caa4 <__assert_fail@plt+0xb104>
   18014:	str	r0, [fp, #-72]	; 0xffffffb8
   18018:	cmn	r0, #1
   1801c:	streq	r5, [fp, #-72]	; 0xffffffb8
   18020:	moveq	r3, #0
   18024:	strbeq	r3, [fp, #-68]	; 0xffffffbc
   18028:	beq	18190 <__assert_fail@plt+0x67f0>
   1802c:	cmn	r0, #2
   18030:	beq	18098 <__assert_fail@plt+0x66f8>
   18034:	cmp	r0, #0
   18038:	bne	1805c <__assert_fail@plt+0x66bc>
   1803c:	str	r5, [fp, #-72]	; 0xffffffb8
   18040:	ldr	r3, [fp, #-76]	; 0xffffffb4
   18044:	ldrb	r3, [r3]
   18048:	cmp	r3, #0
   1804c:	bne	180b0 <__assert_fail@plt+0x6710>
   18050:	ldr	r3, [fp, #-64]	; 0xffffffc0
   18054:	cmp	r3, #0
   18058:	bne	180d0 <__assert_fail@plt+0x6730>
   1805c:	strb	r5, [fp, #-68]	; 0xffffffbc
   18060:	sub	r0, fp, #88	; 0x58
   18064:	bl	11604 <mbsinit@plt>
   18068:	cmp	r0, #0
   1806c:	movne	r3, #0
   18070:	strbne	r3, [fp, #-92]	; 0xffffffa4
   18074:	b	18190 <__assert_fail@plt+0x67f0>
   18078:	movw	r3, #56640	; 0xdd40
   1807c:	movt	r3, #2
   18080:	mov	r2, #143	; 0x8f
   18084:	movw	r1, #56540	; 0xdcdc
   18088:	movt	r1, #2
   1808c:	movw	r0, #56552	; 0xdce8
   18090:	movt	r0, #2
   18094:	bl	119a0 <__assert_fail@plt>
   18098:	ldr	r0, [fp, #-76]	; 0xffffffb4
   1809c:	bl	117a8 <strlen@plt>
   180a0:	str	r0, [fp, #-72]	; 0xffffffb8
   180a4:	mov	r3, #0
   180a8:	strb	r3, [fp, #-68]	; 0xffffffbc
   180ac:	b	18190 <__assert_fail@plt+0x67f0>
   180b0:	movw	r3, #56640	; 0xdd40
   180b4:	movt	r3, #2
   180b8:	mov	r2, #171	; 0xab
   180bc:	movw	r1, #56540	; 0xdcdc
   180c0:	movt	r1, #2
   180c4:	movw	r0, #56576	; 0xdd00
   180c8:	movt	r0, #2
   180cc:	bl	119a0 <__assert_fail@plt>
   180d0:	movw	r3, #56640	; 0xdd40
   180d4:	movt	r3, #2
   180d8:	mov	r2, #172	; 0xac
   180dc:	movw	r1, #56540	; 0xdcdc
   180e0:	movt	r1, #2
   180e4:	movw	r0, #56600	; 0xdd18
   180e8:	movt	r0, #2
   180ec:	bl	119a0 <__assert_fail@plt>
   180f0:	mov	r3, #0
   180f4:	str	r3, [fp, #-156]	; 0xffffff64
   180f8:	b	17c4c <__assert_fail@plt+0x62ac>
   180fc:	add	r3, r6, r6, lsl #2
   18100:	add	r3, r8, r3, lsl #3
   18104:	ldr	r2, [r3, #4]
   18108:	ldr	r1, [fp, #-72]	; 0xffffffb8
   1810c:	cmp	r2, r1
   18110:	movne	r0, #0
   18114:	beq	17c20 <__assert_fail@plt+0x6280>
   18118:	cmp	r0, #0
   1811c:	beq	17c6c <__assert_fail@plt+0x62cc>
   18120:	add	r6, r6, #1
   18124:	ldr	r3, [fp, #-76]	; 0xffffffb4
   18128:	ldr	r2, [fp, #-72]	; 0xffffffb8
   1812c:	add	r3, r3, r2
   18130:	str	r3, [fp, #-76]	; 0xffffffb4
   18134:	mov	r3, #0
   18138:	strb	r3, [fp, #-80]	; 0xffffffb0
   1813c:	ldr	r3, [fp, #-152]	; 0xffffff68
   18140:	cmp	r3, r6
   18144:	beq	17c38 <__assert_fail@plt+0x6298>
   18148:	ldrb	r3, [fp, #-80]	; 0xffffffb0
   1814c:	cmp	r3, #0
   18150:	bne	18194 <__assert_fail@plt+0x67f4>
   18154:	ldrb	r3, [fp, #-92]	; 0xffffffa4
   18158:	cmp	r3, #0
   1815c:	bne	17fec <__assert_fail@plt+0x664c>
   18160:	ldr	r1, [fp, #-76]	; 0xffffffb4
   18164:	ldrb	r3, [r1]
   18168:	lsr	r2, r3, #5
   1816c:	and	r3, r3, #31
   18170:	ldr	r2, [sl, r2, lsl #2]
   18174:	lsr	r3, r2, r3
   18178:	tst	r3, #1
   1817c:	beq	17fd8 <__assert_fail@plt+0x6638>
   18180:	str	r5, [fp, #-72]	; 0xffffffb8
   18184:	ldrb	r3, [r1]
   18188:	str	r3, [fp, #-64]	; 0xffffffc0
   1818c:	strb	r5, [fp, #-68]	; 0xffffffbc
   18190:	strb	r5, [fp, #-80]	; 0xffffffb0
   18194:	ldrb	r3, [fp, #-68]	; 0xffffffbc
   18198:	cmp	r3, #0
   1819c:	beq	180fc <__assert_fail@plt+0x675c>
   181a0:	ldr	r2, [fp, #-64]	; 0xffffffc0
   181a4:	cmp	r2, #0
   181a8:	beq	17c44 <__assert_fail@plt+0x62a4>
   181ac:	add	r3, r6, r6, lsl #2
   181b0:	add	r3, r8, r3, lsl #3
   181b4:	ldrb	r1, [r3, #8]
   181b8:	cmp	r1, #0
   181bc:	beq	18104 <__assert_fail@plt+0x6764>
   181c0:	ldr	r0, [r3, #12]
   181c4:	cmp	r0, r2
   181c8:	movne	r0, #0
   181cc:	moveq	r0, #1
   181d0:	b	18118 <__assert_fail@plt+0x6778>
   181d4:	strd	r4, [sp, #-36]!	; 0xffffffdc
   181d8:	strd	r6, [sp, #8]
   181dc:	strd	r8, [sp, #16]
   181e0:	strd	sl, [sp, #24]
   181e4:	str	lr, [sp, #32]
   181e8:	sub	sp, sp, #292	; 0x124
   181ec:	mov	r5, r0
   181f0:	mov	r7, r1
   181f4:	bl	116a0 <__ctype_get_mb_cur_max@plt>
   181f8:	cmp	r0, #1
   181fc:	bhi	1823c <__assert_fail@plt+0x689c>
   18200:	ldrb	r8, [r7]
   18204:	cmp	r8, #0
   18208:	moveq	r0, r5
   1820c:	beq	18be8 <__assert_fail@plt+0x7248>
   18210:	add	r3, r7, #1
   18214:	str	r3, [sp, #4]
   18218:	ldrb	r3, [r5]
   1821c:	cmp	r3, #0
   18220:	beq	18f90 <__assert_fail@plt+0x75f0>
   18224:	mov	sl, r7
   18228:	mov	ip, #0
   1822c:	mov	r6, ip
   18230:	mov	r9, ip
   18234:	mov	lr, #1
   18238:	b	18e88 <__assert_fail@plt+0x74e8>
   1823c:	str	r7, [sp, #24]
   18240:	mov	r3, #0
   18244:	strb	r3, [sp, #8]
   18248:	mov	r0, #0
   1824c:	mov	r1, #0
   18250:	strd	r0, [sp, #12]
   18254:	strb	r3, [sp, #20]
   18258:	ldrb	r1, [r7]
   1825c:	movw	r2, #58600	; 0xe4e8
   18260:	movt	r2, #2
   18264:	lsr	r3, r1, #5
   18268:	and	r0, r1, #31
   1826c:	ldr	r3, [r2, r3, lsl #2]
   18270:	lsr	r3, r3, r0
   18274:	tst	r3, #1
   18278:	beq	182f0 <__assert_fail@plt+0x6950>
   1827c:	mov	r3, #1
   18280:	str	r3, [sp, #28]
   18284:	str	r1, [sp, #36]	; 0x24
   18288:	strb	r3, [sp, #32]
   1828c:	mov	r3, #1
   18290:	strb	r3, [sp, #20]
   18294:	ldrb	r3, [sp, #32]
   18298:	cmp	r3, #0
   1829c:	beq	182ac <__assert_fail@plt+0x690c>
   182a0:	ldr	r3, [sp, #36]	; 0x24
   182a4:	cmp	r3, #0
   182a8:	beq	18e70 <__assert_fail@plt+0x74d0>
   182ac:	str	r7, [sp, #80]	; 0x50
   182b0:	mov	r6, #0
   182b4:	strb	r6, [sp, #64]	; 0x40
   182b8:	mov	r2, #0
   182bc:	mov	r3, #0
   182c0:	strd	r2, [sp, #68]	; 0x44
   182c4:	strb	r6, [sp, #76]	; 0x4c
   182c8:	str	r5, [sp, #136]	; 0x88
   182cc:	strb	r6, [sp, #120]	; 0x78
   182d0:	strd	r2, [sp, #124]	; 0x7c
   182d4:	strb	r6, [sp, #132]	; 0x84
   182d8:	mov	sl, r6
   182dc:	str	r6, [sp]
   182e0:	mov	fp, #1
   182e4:	movw	r8, #58600	; 0xe4e8
   182e8:	movt	r8, #2
   182ec:	b	1902c <__assert_fail@plt+0x768c>
   182f0:	add	r0, sp, #12
   182f4:	bl	11604 <mbsinit@plt>
   182f8:	cmp	r0, #0
   182fc:	beq	1838c <__assert_fail@plt+0x69ec>
   18300:	mov	r3, #1
   18304:	strb	r3, [sp, #8]
   18308:	bl	116a0 <__ctype_get_mb_cur_max@plt>
   1830c:	mov	r1, r0
   18310:	mov	r0, r7
   18314:	bl	1b430 <__assert_fail@plt+0x9a90>
   18318:	add	r3, sp, #12
   1831c:	mov	r2, r0
   18320:	mov	r1, r7
   18324:	add	r0, sp, #36	; 0x24
   18328:	bl	1caa4 <__assert_fail@plt+0xb104>
   1832c:	str	r0, [sp, #28]
   18330:	cmn	r0, #1
   18334:	beq	183ac <__assert_fail@plt+0x6a0c>
   18338:	cmn	r0, #2
   1833c:	beq	183c0 <__assert_fail@plt+0x6a20>
   18340:	cmp	r0, #0
   18344:	bne	1836c <__assert_fail@plt+0x69cc>
   18348:	mov	r3, #1
   1834c:	str	r3, [sp, #28]
   18350:	ldr	r3, [sp, #24]
   18354:	ldrb	r3, [r3]
   18358:	cmp	r3, #0
   1835c:	bne	183d8 <__assert_fail@plt+0x6a38>
   18360:	ldr	r3, [sp, #36]	; 0x24
   18364:	cmp	r3, #0
   18368:	bne	183f8 <__assert_fail@plt+0x6a58>
   1836c:	mov	r3, #1
   18370:	strb	r3, [sp, #32]
   18374:	add	r0, sp, #12
   18378:	bl	11604 <mbsinit@plt>
   1837c:	cmp	r0, #0
   18380:	movne	r3, #0
   18384:	strbne	r3, [sp, #8]
   18388:	b	1828c <__assert_fail@plt+0x68ec>
   1838c:	movw	r3, #56640	; 0xdd40
   18390:	movt	r3, #2
   18394:	mov	r2, #143	; 0x8f
   18398:	movw	r1, #56540	; 0xdcdc
   1839c:	movt	r1, #2
   183a0:	movw	r0, #56552	; 0xdce8
   183a4:	movt	r0, #2
   183a8:	bl	119a0 <__assert_fail@plt>
   183ac:	mov	r3, #1
   183b0:	str	r3, [sp, #28]
   183b4:	mov	r3, #0
   183b8:	strb	r3, [sp, #32]
   183bc:	b	1828c <__assert_fail@plt+0x68ec>
   183c0:	ldr	r0, [sp, #24]
   183c4:	bl	117a8 <strlen@plt>
   183c8:	str	r0, [sp, #28]
   183cc:	mov	r3, #0
   183d0:	strb	r3, [sp, #32]
   183d4:	b	1828c <__assert_fail@plt+0x68ec>
   183d8:	movw	r3, #56640	; 0xdd40
   183dc:	movt	r3, #2
   183e0:	mov	r2, #171	; 0xab
   183e4:	movw	r1, #56540	; 0xdcdc
   183e8:	movt	r1, #2
   183ec:	movw	r0, #56576	; 0xdd00
   183f0:	movt	r0, #2
   183f4:	bl	119a0 <__assert_fail@plt>
   183f8:	movw	r3, #56640	; 0xdd40
   183fc:	movt	r3, #2
   18400:	mov	r2, #172	; 0xac
   18404:	movw	r1, #56540	; 0xdcdc
   18408:	movt	r1, #2
   1840c:	movw	r0, #56600	; 0xdd18
   18410:	movt	r0, #2
   18414:	bl	119a0 <__assert_fail@plt>
   18418:	add	r0, sp, #124	; 0x7c
   1841c:	bl	11604 <mbsinit@plt>
   18420:	cmp	r0, #0
   18424:	beq	184b8 <__assert_fail@plt+0x6b18>
   18428:	mov	r3, #1
   1842c:	strb	r3, [sp, #120]	; 0x78
   18430:	ldr	r4, [sp, #136]	; 0x88
   18434:	bl	116a0 <__ctype_get_mb_cur_max@plt>
   18438:	mov	r1, r0
   1843c:	mov	r0, r4
   18440:	bl	1b430 <__assert_fail@plt+0x9a90>
   18444:	add	r3, sp, #124	; 0x7c
   18448:	mov	r2, r0
   1844c:	mov	r1, r4
   18450:	add	r0, sp, #148	; 0x94
   18454:	bl	1caa4 <__assert_fail@plt+0xb104>
   18458:	str	r0, [sp, #140]	; 0x8c
   1845c:	cmn	r0, #1
   18460:	beq	184d8 <__assert_fail@plt+0x6b38>
   18464:	cmn	r0, #2
   18468:	beq	184ec <__assert_fail@plt+0x6b4c>
   1846c:	cmp	r0, #0
   18470:	bne	18498 <__assert_fail@plt+0x6af8>
   18474:	mov	r3, #1
   18478:	str	r3, [sp, #140]	; 0x8c
   1847c:	ldr	r3, [sp, #136]	; 0x88
   18480:	ldrb	r3, [r3]
   18484:	cmp	r3, #0
   18488:	bne	18504 <__assert_fail@plt+0x6b64>
   1848c:	ldr	r3, [sp, #148]	; 0x94
   18490:	cmp	r3, #0
   18494:	bne	18524 <__assert_fail@plt+0x6b84>
   18498:	mov	r3, #1
   1849c:	strb	r3, [sp, #144]	; 0x90
   184a0:	add	r0, sp, #124	; 0x7c
   184a4:	bl	11604 <mbsinit@plt>
   184a8:	cmp	r0, #0
   184ac:	movne	r3, #0
   184b0:	strbne	r3, [sp, #120]	; 0x78
   184b4:	b	19078 <__assert_fail@plt+0x76d8>
   184b8:	movw	r3, #56640	; 0xdd40
   184bc:	movt	r3, #2
   184c0:	mov	r2, #143	; 0x8f
   184c4:	movw	r1, #56540	; 0xdcdc
   184c8:	movt	r1, #2
   184cc:	movw	r0, #56552	; 0xdce8
   184d0:	movt	r0, #2
   184d4:	bl	119a0 <__assert_fail@plt>
   184d8:	mov	r3, #1
   184dc:	str	r3, [sp, #140]	; 0x8c
   184e0:	mov	r3, #0
   184e4:	strb	r3, [sp, #144]	; 0x90
   184e8:	b	19078 <__assert_fail@plt+0x76d8>
   184ec:	ldr	r0, [sp, #136]	; 0x88
   184f0:	bl	117a8 <strlen@plt>
   184f4:	str	r0, [sp, #140]	; 0x8c
   184f8:	mov	r3, #0
   184fc:	strb	r3, [sp, #144]	; 0x90
   18500:	b	19078 <__assert_fail@plt+0x76d8>
   18504:	movw	r3, #56640	; 0xdd40
   18508:	movt	r3, #2
   1850c:	mov	r2, #171	; 0xab
   18510:	movw	r1, #56540	; 0xdcdc
   18514:	movt	r1, #2
   18518:	movw	r0, #56576	; 0xdd00
   1851c:	movt	r0, #2
   18520:	bl	119a0 <__assert_fail@plt>
   18524:	movw	r3, #56640	; 0xdd40
   18528:	movt	r3, #2
   1852c:	mov	r2, #172	; 0xac
   18530:	movw	r1, #56540	; 0xdcdc
   18534:	movt	r1, #2
   18538:	movw	r0, #56600	; 0xdd18
   1853c:	movt	r0, #2
   18540:	bl	119a0 <__assert_fail@plt>
   18544:	mov	r0, #0
   18548:	b	18be8 <__assert_fail@plt+0x7248>
   1854c:	add	r0, sp, #68	; 0x44
   18550:	bl	11604 <mbsinit@plt>
   18554:	cmp	r0, #0
   18558:	beq	18670 <__assert_fail@plt+0x6cd0>
   1855c:	strb	r9, [sp, #64]	; 0x40
   18560:	ldr	fp, [sp, #80]	; 0x50
   18564:	bl	116a0 <__ctype_get_mb_cur_max@plt>
   18568:	mov	r1, r0
   1856c:	mov	r0, fp
   18570:	bl	1b430 <__assert_fail@plt+0x9a90>
   18574:	add	r3, sp, #68	; 0x44
   18578:	mov	r2, r0
   1857c:	mov	r1, fp
   18580:	add	r0, sp, #92	; 0x5c
   18584:	bl	1caa4 <__assert_fail@plt+0xb104>
   18588:	str	r0, [sp, #84]	; 0x54
   1858c:	cmn	r0, #1
   18590:	streq	r9, [sp, #84]	; 0x54
   18594:	moveq	r3, #0
   18598:	strbeq	r3, [sp, #88]	; 0x58
   1859c:	beq	185e8 <__assert_fail@plt+0x6c48>
   185a0:	cmn	r0, #2
   185a4:	beq	18690 <__assert_fail@plt+0x6cf0>
   185a8:	cmp	r0, #0
   185ac:	bne	185d0 <__assert_fail@plt+0x6c30>
   185b0:	str	r9, [sp, #84]	; 0x54
   185b4:	ldr	r3, [sp, #80]	; 0x50
   185b8:	ldrb	r3, [r3]
   185bc:	cmp	r3, #0
   185c0:	bne	186a8 <__assert_fail@plt+0x6d08>
   185c4:	ldr	r3, [sp, #92]	; 0x5c
   185c8:	cmp	r3, #0
   185cc:	bne	186c8 <__assert_fail@plt+0x6d28>
   185d0:	strb	r9, [sp, #88]	; 0x58
   185d4:	add	r0, sp, #68	; 0x44
   185d8:	bl	11604 <mbsinit@plt>
   185dc:	cmp	r0, #0
   185e0:	movne	r3, #0
   185e4:	strbne	r3, [sp, #64]	; 0x40
   185e8:	strb	r9, [sp, #76]	; 0x4c
   185ec:	ldrb	r3, [sp, #88]	; 0x58
   185f0:	cmp	r3, #0
   185f4:	beq	18604 <__assert_fail@plt+0x6c64>
   185f8:	ldr	r3, [sp, #92]	; 0x5c
   185fc:	cmp	r3, #0
   18600:	beq	18fb0 <__assert_fail@plt+0x7610>
   18604:	ldr	r3, [sp, #80]	; 0x50
   18608:	ldr	r2, [sp, #84]	; 0x54
   1860c:	add	r3, r3, r2
   18610:	str	r3, [sp, #80]	; 0x50
   18614:	mov	r3, #0
   18618:	strb	r3, [sp, #76]	; 0x4c
   1861c:	subs	r4, r4, #1
   18620:	beq	186f4 <__assert_fail@plt+0x6d54>
   18624:	ldrb	r3, [sp, #76]	; 0x4c
   18628:	cmp	r3, #0
   1862c:	bne	185ec <__assert_fail@plt+0x6c4c>
   18630:	ldrb	r3, [sp, #64]	; 0x40
   18634:	cmp	r3, #0
   18638:	bne	18560 <__assert_fail@plt+0x6bc0>
   1863c:	ldr	r1, [sp, #80]	; 0x50
   18640:	ldrb	r3, [r1]
   18644:	lsr	r2, r3, #5
   18648:	and	r3, r3, #31
   1864c:	ldr	r2, [r8, r2, lsl #2]
   18650:	lsr	r3, r2, r3
   18654:	tst	r3, #1
   18658:	beq	1854c <__assert_fail@plt+0x6bac>
   1865c:	str	r9, [sp, #84]	; 0x54
   18660:	ldrb	r3, [r1]
   18664:	str	r3, [sp, #92]	; 0x5c
   18668:	strb	r9, [sp, #88]	; 0x58
   1866c:	b	185e8 <__assert_fail@plt+0x6c48>
   18670:	movw	r3, #56640	; 0xdd40
   18674:	movt	r3, #2
   18678:	mov	r2, #143	; 0x8f
   1867c:	movw	r1, #56540	; 0xdcdc
   18680:	movt	r1, #2
   18684:	movw	r0, #56552	; 0xdce8
   18688:	movt	r0, #2
   1868c:	bl	119a0 <__assert_fail@plt>
   18690:	ldr	r0, [sp, #80]	; 0x50
   18694:	bl	117a8 <strlen@plt>
   18698:	str	r0, [sp, #84]	; 0x54
   1869c:	mov	r3, #0
   186a0:	strb	r3, [sp, #88]	; 0x58
   186a4:	b	185e8 <__assert_fail@plt+0x6c48>
   186a8:	movw	r3, #56640	; 0xdd40
   186ac:	movt	r3, #2
   186b0:	mov	r2, #171	; 0xab
   186b4:	movw	r1, #56540	; 0xdcdc
   186b8:	movt	r1, #2
   186bc:	movw	r0, #56576	; 0xdd00
   186c0:	movt	r0, #2
   186c4:	bl	119a0 <__assert_fail@plt>
   186c8:	movw	r3, #56640	; 0xdd40
   186cc:	movt	r3, #2
   186d0:	mov	r2, #172	; 0xac
   186d4:	movw	r1, #56540	; 0xdcdc
   186d8:	movt	r1, #2
   186dc:	movw	r0, #56600	; 0xdd18
   186e0:	movt	r0, #2
   186e4:	bl	119a0 <__assert_fail@plt>
   186e8:	ldrb	r3, [sp, #76]	; 0x4c
   186ec:	cmp	r3, #0
   186f0:	bne	1873c <__assert_fail@plt+0x6d9c>
   186f4:	ldrb	r3, [sp, #64]	; 0x40
   186f8:	cmp	r3, #0
   186fc:	bne	18780 <__assert_fail@plt+0x6de0>
   18700:	ldr	r1, [sp, #80]	; 0x50
   18704:	ldrb	r3, [r1]
   18708:	lsr	r2, r3, #5
   1870c:	and	r3, r3, #31
   18710:	ldr	r2, [r8, r2, lsl #2]
   18714:	lsr	r3, r2, r3
   18718:	tst	r3, #1
   1871c:	beq	18768 <__assert_fail@plt+0x6dc8>
   18720:	mov	r3, #1
   18724:	str	r3, [sp, #84]	; 0x54
   18728:	ldrb	r2, [r1]
   1872c:	str	r2, [sp, #92]	; 0x5c
   18730:	strb	r3, [sp, #88]	; 0x58
   18734:	mov	r3, #1
   18738:	strb	r3, [sp, #76]	; 0x4c
   1873c:	ldrb	fp, [sp, #88]	; 0x58
   18740:	cmp	fp, #0
   18744:	moveq	fp, #1
   18748:	bne	18894 <__assert_fail@plt+0x6ef4>
   1874c:	add	r2, r6, #1
   18750:	ldrb	r3, [sp, #144]	; 0x90
   18754:	cmp	r3, #0
   18758:	beq	188a4 <__assert_fail@plt+0x6f04>
   1875c:	str	r6, [sp]
   18760:	mov	r6, r2
   18764:	b	190b0 <__assert_fail@plt+0x7710>
   18768:	add	r0, sp, #68	; 0x44
   1876c:	bl	11604 <mbsinit@plt>
   18770:	cmp	r0, #0
   18774:	beq	18808 <__assert_fail@plt+0x6e68>
   18778:	mov	r3, #1
   1877c:	strb	r3, [sp, #64]	; 0x40
   18780:	ldr	r4, [sp, #80]	; 0x50
   18784:	bl	116a0 <__ctype_get_mb_cur_max@plt>
   18788:	mov	r1, r0
   1878c:	mov	r0, r4
   18790:	bl	1b430 <__assert_fail@plt+0x9a90>
   18794:	add	r3, sp, #68	; 0x44
   18798:	mov	r2, r0
   1879c:	mov	r1, r4
   187a0:	add	r0, sp, #92	; 0x5c
   187a4:	bl	1caa4 <__assert_fail@plt+0xb104>
   187a8:	str	r0, [sp, #84]	; 0x54
   187ac:	cmn	r0, #1
   187b0:	beq	18828 <__assert_fail@plt+0x6e88>
   187b4:	cmn	r0, #2
   187b8:	beq	1883c <__assert_fail@plt+0x6e9c>
   187bc:	cmp	r0, #0
   187c0:	bne	187e8 <__assert_fail@plt+0x6e48>
   187c4:	mov	r3, #1
   187c8:	str	r3, [sp, #84]	; 0x54
   187cc:	ldr	r3, [sp, #80]	; 0x50
   187d0:	ldrb	r3, [r3]
   187d4:	cmp	r3, #0
   187d8:	bne	18854 <__assert_fail@plt+0x6eb4>
   187dc:	ldr	r3, [sp, #92]	; 0x5c
   187e0:	cmp	r3, #0
   187e4:	bne	18874 <__assert_fail@plt+0x6ed4>
   187e8:	mov	r3, #1
   187ec:	strb	r3, [sp, #88]	; 0x58
   187f0:	add	r0, sp, #68	; 0x44
   187f4:	bl	11604 <mbsinit@plt>
   187f8:	cmp	r0, #0
   187fc:	movne	r3, #0
   18800:	strbne	r3, [sp, #64]	; 0x40
   18804:	b	18734 <__assert_fail@plt+0x6d94>
   18808:	movw	r3, #56640	; 0xdd40
   1880c:	movt	r3, #2
   18810:	mov	r2, #143	; 0x8f
   18814:	movw	r1, #56540	; 0xdcdc
   18818:	movt	r1, #2
   1881c:	movw	r0, #56552	; 0xdce8
   18820:	movt	r0, #2
   18824:	bl	119a0 <__assert_fail@plt>
   18828:	mov	r3, #1
   1882c:	str	r3, [sp, #84]	; 0x54
   18830:	mov	r3, #0
   18834:	strb	r3, [sp, #88]	; 0x58
   18838:	b	18734 <__assert_fail@plt+0x6d94>
   1883c:	ldr	r0, [sp, #80]	; 0x50
   18840:	bl	117a8 <strlen@plt>
   18844:	str	r0, [sp, #84]	; 0x54
   18848:	mov	r3, #0
   1884c:	strb	r3, [sp, #88]	; 0x58
   18850:	b	18734 <__assert_fail@plt+0x6d94>
   18854:	movw	r3, #56640	; 0xdd40
   18858:	movt	r3, #2
   1885c:	mov	r2, #171	; 0xab
   18860:	movw	r1, #56540	; 0xdcdc
   18864:	movt	r1, #2
   18868:	movw	r0, #56576	; 0xdd00
   1886c:	movt	r0, #2
   18870:	bl	119a0 <__assert_fail@plt>
   18874:	movw	r3, #56640	; 0xdd40
   18878:	movt	r3, #2
   1887c:	mov	r2, #172	; 0xac
   18880:	movw	r1, #56540	; 0xdcdc
   18884:	movt	r1, #2
   18888:	movw	r0, #56600	; 0xdd18
   1888c:	movt	r0, #2
   18890:	bl	119a0 <__assert_fail@plt>
   18894:	ldr	r3, [sp, #92]	; 0x5c
   18898:	cmp	r3, #0
   1889c:	bne	1874c <__assert_fail@plt+0x6dac>
   188a0:	b	18fbc <__assert_fail@plt+0x761c>
   188a4:	str	r6, [sp]
   188a8:	mov	r6, r2
   188ac:	b	18ff4 <__assert_fail@plt+0x7654>
   188b0:	ldr	r1, [sp, #24]
   188b4:	ldr	r0, [sp, #136]	; 0x88
   188b8:	bl	1161c <memcmp@plt>
   188bc:	clz	r0, r0
   188c0:	lsr	r0, r0, #5
   188c4:	b	19008 <__assert_fail@plt+0x7668>
   188c8:	ldrd	r2, [sp, #120]	; 0x78
   188cc:	strd	r2, [sp, #176]	; 0xb0
   188d0:	ldrd	r2, [sp, #128]	; 0x80
   188d4:	strd	r2, [sp, #184]	; 0xb8
   188d8:	ldr	r1, [sp, #136]	; 0x88
   188dc:	ldr	r3, [sp, #140]	; 0x8c
   188e0:	str	r3, [sp, #196]	; 0xc4
   188e4:	ldrd	r2, [sp, #144]	; 0x90
   188e8:	strd	r2, [sp, #200]	; 0xc8
   188ec:	ldrd	r2, [sp, #152]	; 0x98
   188f0:	strd	r2, [sp, #208]	; 0xd0
   188f4:	ldrd	r2, [sp, #160]	; 0xa0
   188f8:	strd	r2, [sp, #216]	; 0xd8
   188fc:	ldrd	r2, [sp, #168]	; 0xa8
   18900:	strd	r2, [sp, #224]	; 0xe0
   18904:	ldr	r3, [sp, #196]	; 0xc4
   18908:	add	r1, r3, r1
   1890c:	str	r1, [sp, #192]	; 0xc0
   18910:	mov	r3, #0
   18914:	strb	r3, [sp, #188]	; 0xbc
   18918:	str	r7, [sp, #248]	; 0xf8
   1891c:	strb	r3, [sp, #232]	; 0xe8
   18920:	mov	r0, #0
   18924:	mov	r1, #0
   18928:	strd	r0, [sp, #236]	; 0xec
   1892c:	strb	r3, [sp, #244]	; 0xf4
   18930:	ldrb	r2, [r7]
   18934:	lsr	r3, r2, #5
   18938:	and	r1, r2, #31
   1893c:	ldr	r3, [r8, r3, lsl #2]
   18940:	lsr	r3, r3, r1
   18944:	tst	r3, #1
   18948:	beq	189a0 <__assert_fail@plt+0x7000>
   1894c:	mov	r3, #1
   18950:	str	r3, [sp, #252]	; 0xfc
   18954:	str	r2, [sp, #260]	; 0x104
   18958:	strb	r3, [sp, #256]	; 0x100
   1895c:	mov	r3, #1
   18960:	strb	r3, [sp, #244]	; 0xf4
   18964:	ldrb	r3, [sp, #256]	; 0x100
   18968:	cmp	r3, #0
   1896c:	beq	1897c <__assert_fail@plt+0x6fdc>
   18970:	ldr	r3, [sp, #260]	; 0x104
   18974:	cmp	r3, #0
   18978:	beq	18ac8 <__assert_fail@plt+0x7128>
   1897c:	ldr	r3, [sp, #248]	; 0xf8
   18980:	ldr	r2, [sp, #252]	; 0xfc
   18984:	add	r3, r3, r2
   18988:	str	r3, [sp, #248]	; 0xf8
   1898c:	mov	r3, #0
   18990:	strb	r3, [sp, #244]	; 0xf4
   18994:	add	r6, r6, #1
   18998:	mov	r4, #1
   1899c:	b	18d18 <__assert_fail@plt+0x7378>
   189a0:	add	r0, sp, #236	; 0xec
   189a4:	bl	11604 <mbsinit@plt>
   189a8:	cmp	r0, #0
   189ac:	beq	18a3c <__assert_fail@plt+0x709c>
   189b0:	mov	r3, #1
   189b4:	strb	r3, [sp, #232]	; 0xe8
   189b8:	bl	116a0 <__ctype_get_mb_cur_max@plt>
   189bc:	mov	r1, r0
   189c0:	mov	r0, r7
   189c4:	bl	1b430 <__assert_fail@plt+0x9a90>
   189c8:	add	r3, sp, #236	; 0xec
   189cc:	mov	r2, r0
   189d0:	mov	r1, r7
   189d4:	add	r0, sp, #260	; 0x104
   189d8:	bl	1caa4 <__assert_fail@plt+0xb104>
   189dc:	str	r0, [sp, #252]	; 0xfc
   189e0:	cmn	r0, #1
   189e4:	beq	18a5c <__assert_fail@plt+0x70bc>
   189e8:	cmn	r0, #2
   189ec:	beq	18a70 <__assert_fail@plt+0x70d0>
   189f0:	cmp	r0, #0
   189f4:	bne	18a1c <__assert_fail@plt+0x707c>
   189f8:	mov	r3, #1
   189fc:	str	r3, [sp, #252]	; 0xfc
   18a00:	ldr	r3, [sp, #248]	; 0xf8
   18a04:	ldrb	r3, [r3]
   18a08:	cmp	r3, #0
   18a0c:	bne	18a88 <__assert_fail@plt+0x70e8>
   18a10:	ldr	r3, [sp, #260]	; 0x104
   18a14:	cmp	r3, #0
   18a18:	bne	18aa8 <__assert_fail@plt+0x7108>
   18a1c:	mov	r3, #1
   18a20:	strb	r3, [sp, #256]	; 0x100
   18a24:	add	r0, sp, #236	; 0xec
   18a28:	bl	11604 <mbsinit@plt>
   18a2c:	cmp	r0, #0
   18a30:	movne	r3, #0
   18a34:	strbne	r3, [sp, #232]	; 0xe8
   18a38:	b	1895c <__assert_fail@plt+0x6fbc>
   18a3c:	movw	r3, #56640	; 0xdd40
   18a40:	movt	r3, #2
   18a44:	mov	r2, #143	; 0x8f
   18a48:	movw	r1, #56540	; 0xdcdc
   18a4c:	movt	r1, #2
   18a50:	movw	r0, #56552	; 0xdce8
   18a54:	movt	r0, #2
   18a58:	bl	119a0 <__assert_fail@plt>
   18a5c:	mov	r3, #1
   18a60:	str	r3, [sp, #252]	; 0xfc
   18a64:	mov	r3, #0
   18a68:	strb	r3, [sp, #256]	; 0x100
   18a6c:	b	1895c <__assert_fail@plt+0x6fbc>
   18a70:	ldr	r0, [sp, #248]	; 0xf8
   18a74:	bl	117a8 <strlen@plt>
   18a78:	str	r0, [sp, #252]	; 0xfc
   18a7c:	mov	r3, #0
   18a80:	strb	r3, [sp, #256]	; 0x100
   18a84:	b	1895c <__assert_fail@plt+0x6fbc>
   18a88:	movw	r3, #56640	; 0xdd40
   18a8c:	movt	r3, #2
   18a90:	mov	r2, #171	; 0xab
   18a94:	movw	r1, #56540	; 0xdcdc
   18a98:	movt	r1, #2
   18a9c:	movw	r0, #56576	; 0xdd00
   18aa0:	movt	r0, #2
   18aa4:	bl	119a0 <__assert_fail@plt>
   18aa8:	movw	r3, #56640	; 0xdd40
   18aac:	movt	r3, #2
   18ab0:	mov	r2, #172	; 0xac
   18ab4:	movw	r1, #56540	; 0xdcdc
   18ab8:	movt	r1, #2
   18abc:	movw	r0, #56600	; 0xdd18
   18ac0:	movt	r0, #2
   18ac4:	bl	119a0 <__assert_fail@plt>
   18ac8:	bl	11964 <abort@plt>
   18acc:	add	r0, sp, #236	; 0xec
   18ad0:	bl	11604 <mbsinit@plt>
   18ad4:	cmp	r0, #0
   18ad8:	beq	18b6c <__assert_fail@plt+0x71cc>
   18adc:	strb	r4, [sp, #232]	; 0xe8
   18ae0:	ldr	r9, [sp, #248]	; 0xf8
   18ae4:	bl	116a0 <__ctype_get_mb_cur_max@plt>
   18ae8:	mov	r1, r0
   18aec:	mov	r0, r9
   18af0:	bl	1b430 <__assert_fail@plt+0x9a90>
   18af4:	add	r3, sp, #236	; 0xec
   18af8:	mov	r2, r0
   18afc:	mov	r1, r9
   18b00:	add	r0, sp, #260	; 0x104
   18b04:	bl	1caa4 <__assert_fail@plt+0xb104>
   18b08:	str	r0, [sp, #252]	; 0xfc
   18b0c:	cmn	r0, #1
   18b10:	streq	r4, [sp, #252]	; 0xfc
   18b14:	moveq	r3, #0
   18b18:	strbeq	r3, [sp, #256]	; 0x100
   18b1c:	beq	18d60 <__assert_fail@plt+0x73c0>
   18b20:	cmn	r0, #2
   18b24:	beq	18b8c <__assert_fail@plt+0x71ec>
   18b28:	cmp	r0, #0
   18b2c:	bne	18b50 <__assert_fail@plt+0x71b0>
   18b30:	str	r4, [sp, #252]	; 0xfc
   18b34:	ldr	r3, [sp, #248]	; 0xf8
   18b38:	ldrb	r3, [r3]
   18b3c:	cmp	r3, #0
   18b40:	bne	18ba4 <__assert_fail@plt+0x7204>
   18b44:	ldr	r3, [sp, #260]	; 0x104
   18b48:	cmp	r3, #0
   18b4c:	bne	18bc4 <__assert_fail@plt+0x7224>
   18b50:	strb	r4, [sp, #256]	; 0x100
   18b54:	add	r0, sp, #236	; 0xec
   18b58:	bl	11604 <mbsinit@plt>
   18b5c:	cmp	r0, #0
   18b60:	movne	r3, #0
   18b64:	strbne	r3, [sp, #232]	; 0xe8
   18b68:	b	18d60 <__assert_fail@plt+0x73c0>
   18b6c:	movw	r3, #56640	; 0xdd40
   18b70:	movt	r3, #2
   18b74:	mov	r2, #143	; 0x8f
   18b78:	movw	r1, #56540	; 0xdcdc
   18b7c:	movt	r1, #2
   18b80:	movw	r0, #56552	; 0xdce8
   18b84:	movt	r0, #2
   18b88:	bl	119a0 <__assert_fail@plt>
   18b8c:	ldr	r0, [sp, #248]	; 0xf8
   18b90:	bl	117a8 <strlen@plt>
   18b94:	str	r0, [sp, #252]	; 0xfc
   18b98:	mov	r3, #0
   18b9c:	strb	r3, [sp, #256]	; 0x100
   18ba0:	b	18d60 <__assert_fail@plt+0x73c0>
   18ba4:	movw	r3, #56640	; 0xdd40
   18ba8:	movt	r3, #2
   18bac:	mov	r2, #171	; 0xab
   18bb0:	movw	r1, #56540	; 0xdcdc
   18bb4:	movt	r1, #2
   18bb8:	movw	r0, #56576	; 0xdd00
   18bbc:	movt	r0, #2
   18bc0:	bl	119a0 <__assert_fail@plt>
   18bc4:	movw	r3, #56640	; 0xdd40
   18bc8:	movt	r3, #2
   18bcc:	mov	r2, #172	; 0xac
   18bd0:	movw	r1, #56540	; 0xdcdc
   18bd4:	movt	r1, #2
   18bd8:	movw	r0, #56600	; 0xdd18
   18bdc:	movt	r0, #2
   18be0:	bl	119a0 <__assert_fail@plt>
   18be4:	ldr	r0, [sp, #136]	; 0x88
   18be8:	add	sp, sp, #292	; 0x124
   18bec:	ldrd	r4, [sp]
   18bf0:	ldrd	r6, [sp, #8]
   18bf4:	ldrd	r8, [sp, #16]
   18bf8:	ldrd	sl, [sp, #24]
   18bfc:	add	sp, sp, #32
   18c00:	pop	{pc}		; (ldr pc, [sp], #4)
   18c04:	add	r0, sp, #180	; 0xb4
   18c08:	bl	11604 <mbsinit@plt>
   18c0c:	cmp	r0, #0
   18c10:	beq	18dc8 <__assert_fail@plt+0x7428>
   18c14:	strb	r4, [sp, #176]	; 0xb0
   18c18:	ldr	r9, [sp, #192]	; 0xc0
   18c1c:	bl	116a0 <__ctype_get_mb_cur_max@plt>
   18c20:	mov	r1, r0
   18c24:	mov	r0, r9
   18c28:	bl	1b430 <__assert_fail@plt+0x9a90>
   18c2c:	add	r3, sp, #180	; 0xb4
   18c30:	mov	r2, r0
   18c34:	mov	r1, r9
   18c38:	add	r0, sp, #204	; 0xcc
   18c3c:	bl	1caa4 <__assert_fail@plt+0xb104>
   18c40:	str	r0, [sp, #196]	; 0xc4
   18c44:	cmn	r0, #1
   18c48:	streq	r4, [sp, #196]	; 0xc4
   18c4c:	moveq	r3, #0
   18c50:	strbeq	r3, [sp, #200]	; 0xc8
   18c54:	beq	18ca0 <__assert_fail@plt+0x7300>
   18c58:	cmn	r0, #2
   18c5c:	beq	18de8 <__assert_fail@plt+0x7448>
   18c60:	cmp	r0, #0
   18c64:	bne	18c88 <__assert_fail@plt+0x72e8>
   18c68:	str	r4, [sp, #196]	; 0xc4
   18c6c:	ldr	r3, [sp, #192]	; 0xc0
   18c70:	ldrb	r3, [r3]
   18c74:	cmp	r3, #0
   18c78:	bne	18e00 <__assert_fail@plt+0x7460>
   18c7c:	ldr	r3, [sp, #204]	; 0xcc
   18c80:	cmp	r3, #0
   18c84:	bne	18e20 <__assert_fail@plt+0x7480>
   18c88:	strb	r4, [sp, #200]	; 0xc8
   18c8c:	add	r0, sp, #180	; 0xb4
   18c90:	bl	11604 <mbsinit@plt>
   18c94:	cmp	r0, #0
   18c98:	movne	r3, #0
   18c9c:	strbne	r3, [sp, #176]	; 0xb0
   18ca0:	strb	r4, [sp, #188]	; 0xbc
   18ca4:	ldrb	r3, [sp, #200]	; 0xc8
   18ca8:	cmp	r3, #0
   18cac:	beq	18cc8 <__assert_fail@plt+0x7328>
   18cb0:	ldr	r3, [sp, #204]	; 0xcc
   18cb4:	cmp	r3, #0
   18cb8:	beq	18e40 <__assert_fail@plt+0x74a0>
   18cbc:	ldrb	r2, [sp, #256]	; 0x100
   18cc0:	cmp	r2, #0
   18cc4:	bne	18e48 <__assert_fail@plt+0x74a8>
   18cc8:	ldr	r2, [sp, #196]	; 0xc4
   18ccc:	ldr	r3, [sp, #252]	; 0xfc
   18cd0:	cmp	r2, r3
   18cd4:	movne	r0, r4
   18cd8:	beq	18e58 <__assert_fail@plt+0x74b8>
   18cdc:	add	r1, r6, #1
   18ce0:	cmp	r0, #0
   18ce4:	bne	19010 <__assert_fail@plt+0x7670>
   18ce8:	ldr	r3, [sp, #192]	; 0xc0
   18cec:	ldr	r2, [sp, #196]	; 0xc4
   18cf0:	add	r3, r3, r2
   18cf4:	str	r3, [sp, #192]	; 0xc0
   18cf8:	mov	r2, #0
   18cfc:	strb	r2, [sp, #188]	; 0xbc
   18d00:	ldr	r3, [sp, #248]	; 0xf8
   18d04:	ldr	r0, [sp, #252]	; 0xfc
   18d08:	add	r3, r3, r0
   18d0c:	str	r3, [sp, #248]	; 0xf8
   18d10:	strb	r2, [sp, #244]	; 0xf4
   18d14:	mov	r6, r1
   18d18:	ldrb	r3, [sp, #244]	; 0xf4
   18d1c:	cmp	r3, #0
   18d20:	bne	18d64 <__assert_fail@plt+0x73c4>
   18d24:	ldrb	r3, [sp, #232]	; 0xe8
   18d28:	cmp	r3, #0
   18d2c:	bne	18ae0 <__assert_fail@plt+0x7140>
   18d30:	ldr	r1, [sp, #248]	; 0xf8
   18d34:	ldrb	r3, [r1]
   18d38:	lsr	r2, r3, #5
   18d3c:	and	r3, r3, #31
   18d40:	ldr	r2, [r8, r2, lsl #2]
   18d44:	lsr	r3, r2, r3
   18d48:	tst	r3, #1
   18d4c:	beq	18acc <__assert_fail@plt+0x712c>
   18d50:	str	r4, [sp, #252]	; 0xfc
   18d54:	ldrb	r3, [r1]
   18d58:	str	r3, [sp, #260]	; 0x104
   18d5c:	strb	r4, [sp, #256]	; 0x100
   18d60:	strb	r4, [sp, #244]	; 0xf4
   18d64:	ldrb	r3, [sp, #256]	; 0x100
   18d68:	cmp	r3, #0
   18d6c:	beq	18d7c <__assert_fail@plt+0x73dc>
   18d70:	ldr	r3, [sp, #260]	; 0x104
   18d74:	cmp	r3, #0
   18d78:	beq	18be4 <__assert_fail@plt+0x7244>
   18d7c:	ldrb	r3, [sp, #188]	; 0xbc
   18d80:	cmp	r3, #0
   18d84:	bne	18ca4 <__assert_fail@plt+0x7304>
   18d88:	ldrb	r3, [sp, #176]	; 0xb0
   18d8c:	cmp	r3, #0
   18d90:	bne	18c18 <__assert_fail@plt+0x7278>
   18d94:	ldr	r1, [sp, #192]	; 0xc0
   18d98:	ldrb	r3, [r1]
   18d9c:	lsr	r2, r3, #5
   18da0:	and	r3, r3, #31
   18da4:	ldr	r2, [r8, r2, lsl #2]
   18da8:	lsr	r3, r2, r3
   18dac:	tst	r3, #1
   18db0:	beq	18c04 <__assert_fail@plt+0x7264>
   18db4:	str	r4, [sp, #196]	; 0xc4
   18db8:	ldrb	r3, [r1]
   18dbc:	str	r3, [sp, #204]	; 0xcc
   18dc0:	strb	r4, [sp, #200]	; 0xc8
   18dc4:	b	18ca0 <__assert_fail@plt+0x7300>
   18dc8:	movw	r3, #56640	; 0xdd40
   18dcc:	movt	r3, #2
   18dd0:	mov	r2, #143	; 0x8f
   18dd4:	movw	r1, #56540	; 0xdcdc
   18dd8:	movt	r1, #2
   18ddc:	movw	r0, #56552	; 0xdce8
   18de0:	movt	r0, #2
   18de4:	bl	119a0 <__assert_fail@plt>
   18de8:	ldr	r0, [sp, #192]	; 0xc0
   18dec:	bl	117a8 <strlen@plt>
   18df0:	str	r0, [sp, #196]	; 0xc4
   18df4:	mov	r3, #0
   18df8:	strb	r3, [sp, #200]	; 0xc8
   18dfc:	b	18ca0 <__assert_fail@plt+0x7300>
   18e00:	movw	r3, #56640	; 0xdd40
   18e04:	movt	r3, #2
   18e08:	mov	r2, #171	; 0xab
   18e0c:	movw	r1, #56540	; 0xdcdc
   18e10:	movt	r1, #2
   18e14:	movw	r0, #56576	; 0xdd00
   18e18:	movt	r0, #2
   18e1c:	bl	119a0 <__assert_fail@plt>
   18e20:	movw	r3, #56640	; 0xdd40
   18e24:	movt	r3, #2
   18e28:	mov	r2, #172	; 0xac
   18e2c:	movw	r1, #56540	; 0xdcdc
   18e30:	movt	r1, #2
   18e34:	movw	r0, #56600	; 0xdd18
   18e38:	movt	r0, #2
   18e3c:	bl	119a0 <__assert_fail@plt>
   18e40:	mov	r0, #0
   18e44:	b	18be8 <__assert_fail@plt+0x7248>
   18e48:	ldr	r0, [sp, #260]	; 0x104
   18e4c:	subs	r0, r0, r3
   18e50:	movne	r0, #1
   18e54:	b	18cdc <__assert_fail@plt+0x733c>
   18e58:	ldr	r1, [sp, #248]	; 0xf8
   18e5c:	ldr	r0, [sp, #192]	; 0xc0
   18e60:	bl	1161c <memcmp@plt>
   18e64:	adds	r0, r0, #0
   18e68:	movne	r0, #1
   18e6c:	b	18cdc <__assert_fail@plt+0x733c>
   18e70:	mov	r0, r5
   18e74:	b	18be8 <__assert_fail@plt+0x7248>
   18e78:	ldr	r0, [sp, #232]	; 0xe8
   18e7c:	b	18be8 <__assert_fail@plt+0x7248>
   18e80:	mov	lr, fp
   18e84:	mov	ip, r4
   18e88:	mov	r0, r5
   18e8c:	add	r6, r6, #1
   18e90:	add	r4, ip, #1
   18e94:	add	r5, r5, #1
   18e98:	ldrb	r3, [r0]
   18e9c:	cmp	r3, r8
   18ea0:	beq	18f30 <__assert_fail@plt+0x7590>
   18ea4:	str	r5, [sp]
   18ea8:	ldrb	r3, [r5]
   18eac:	cmp	r3, #0
   18eb0:	beq	18fa8 <__assert_fail@plt+0x7608>
   18eb4:	cmp	r6, #9
   18eb8:	movls	fp, #0
   18ebc:	andhi	fp, lr, #1
   18ec0:	cmp	fp, #0
   18ec4:	beq	18e84 <__assert_fail@plt+0x74e4>
   18ec8:	add	r3, r6, r6, lsl #2
   18ecc:	cmp	r3, r4
   18ed0:	bhi	18e80 <__assert_fail@plt+0x74e0>
   18ed4:	cmp	sl, #0
   18ed8:	beq	18ef8 <__assert_fail@plt+0x7558>
   18edc:	sub	r1, r4, r9
   18ee0:	mov	r0, sl
   18ee4:	bl	11874 <strnlen@plt>
   18ee8:	ldrb	r3, [sl, r0]!
   18eec:	cmp	r3, #0
   18ef0:	bne	18f24 <__assert_fail@plt+0x7584>
   18ef4:	mov	r9, r4
   18ef8:	mov	r0, r7
   18efc:	bl	117a8 <strlen@plt>
   18f00:	add	r3, sp, #232	; 0xe8
   18f04:	mov	r2, r0
   18f08:	mov	r1, r7
   18f0c:	ldr	r0, [sp]
   18f10:	bl	176d4 <__assert_fail@plt+0x5d34>
   18f14:	subs	lr, r0, #0
   18f18:	bne	18e78 <__assert_fail@plt+0x74d8>
   18f1c:	mov	sl, #0
   18f20:	b	18e84 <__assert_fail@plt+0x74e4>
   18f24:	mov	r9, r4
   18f28:	mov	lr, fp
   18f2c:	b	18e84 <__assert_fail@plt+0x74e4>
   18f30:	ldrb	r3, [r7, #1]
   18f34:	cmp	r3, #0
   18f38:	beq	18be8 <__assert_fail@plt+0x7248>
   18f3c:	str	r5, [sp]
   18f40:	ldrb	r2, [r5]
   18f44:	cmp	r2, #0
   18f48:	beq	18f98 <__assert_fail@plt+0x75f8>
   18f4c:	add	r4, ip, #2
   18f50:	cmp	r3, r2
   18f54:	bne	18eb4 <__assert_fail@plt+0x7514>
   18f58:	mov	fp, r5
   18f5c:	ldr	r3, [sp, #4]
   18f60:	ldrb	r2, [r3, #1]!
   18f64:	cmp	r2, #0
   18f68:	beq	18be8 <__assert_fail@plt+0x7248>
   18f6c:	ldrb	r1, [fp, #1]!
   18f70:	cmp	r1, #0
   18f74:	beq	18fa0 <__assert_fail@plt+0x7600>
   18f78:	add	r4, r3, #1
   18f7c:	sub	r4, r4, r7
   18f80:	add	r4, r4, ip
   18f84:	cmp	r2, r1
   18f88:	beq	18f60 <__assert_fail@plt+0x75c0>
   18f8c:	b	18eb4 <__assert_fail@plt+0x7514>
   18f90:	mov	r0, #0
   18f94:	b	18be8 <__assert_fail@plt+0x7248>
   18f98:	mov	r0, #0
   18f9c:	b	18be8 <__assert_fail@plt+0x7248>
   18fa0:	mov	r0, #0
   18fa4:	b	18be8 <__assert_fail@plt+0x7248>
   18fa8:	mov	r0, #0
   18fac:	b	18be8 <__assert_fail@plt+0x7248>
   18fb0:	ldrb	r3, [sp, #76]	; 0x4c
   18fb4:	cmp	r3, #0
   18fb8:	beq	186f4 <__assert_fail@plt+0x6d54>
   18fbc:	add	r2, sp, #232	; 0xe8
   18fc0:	mov	r1, r7
   18fc4:	mov	r0, r5
   18fc8:	bl	1784c <__assert_fail@plt+0x5eac>
   18fcc:	subs	fp, r0, #0
   18fd0:	beq	1874c <__assert_fail@plt+0x6dac>
   18fd4:	ldr	r0, [sp, #232]	; 0xe8
   18fd8:	b	18be8 <__assert_fail@plt+0x7248>
   18fdc:	cmp	sl, #9
   18fe0:	movls	r3, #0
   18fe4:	andhi	r3, fp, #1
   18fe8:	cmp	r3, #0
   18fec:	bne	190ec <__assert_fail@plt+0x774c>
   18ff0:	add	r6, r6, #1
   18ff4:	ldr	r2, [sp, #140]	; 0x8c
   18ff8:	ldr	r3, [sp, #28]
   18ffc:	cmp	r2, r3
   19000:	movne	r0, #0
   19004:	beq	188b0 <__assert_fail@plt+0x6f10>
   19008:	cmp	r0, #0
   1900c:	bne	188c8 <__assert_fail@plt+0x6f28>
   19010:	ldr	r3, [sp, #136]	; 0x88
   19014:	ldr	r2, [sp, #140]	; 0x8c
   19018:	add	r3, r3, r2
   1901c:	str	r3, [sp, #136]	; 0x88
   19020:	mov	r3, #0
   19024:	strb	r3, [sp, #132]	; 0x84
   19028:	add	sl, sl, #1
   1902c:	ldrb	r3, [sp, #132]	; 0x84
   19030:	cmp	r3, #0
   19034:	bne	19080 <__assert_fail@plt+0x76e0>
   19038:	ldrb	r3, [sp, #120]	; 0x78
   1903c:	cmp	r3, #0
   19040:	bne	18430 <__assert_fail@plt+0x6a90>
   19044:	ldr	r1, [sp, #136]	; 0x88
   19048:	ldrb	r3, [r1]
   1904c:	lsr	r2, r3, #5
   19050:	and	r3, r3, #31
   19054:	ldr	r2, [r8, r2, lsl #2]
   19058:	lsr	r3, r2, r3
   1905c:	tst	r3, #1
   19060:	beq	18418 <__assert_fail@plt+0x6a78>
   19064:	mov	r3, #1
   19068:	str	r3, [sp, #140]	; 0x8c
   1906c:	ldrb	r2, [r1]
   19070:	str	r2, [sp, #148]	; 0x94
   19074:	strb	r3, [sp, #144]	; 0x90
   19078:	mov	r3, #1
   1907c:	strb	r3, [sp, #132]	; 0x84
   19080:	ldrb	r3, [sp, #144]	; 0x90
   19084:	cmp	r3, #0
   19088:	beq	18fdc <__assert_fail@plt+0x763c>
   1908c:	ldr	r3, [sp, #148]	; 0x94
   19090:	cmp	r3, #0
   19094:	beq	18544 <__assert_fail@plt+0x6ba4>
   19098:	cmp	sl, #9
   1909c:	movls	r3, #0
   190a0:	andhi	r3, fp, #1
   190a4:	cmp	r3, #0
   190a8:	addeq	r6, r6, #1
   190ac:	bne	190d4 <__assert_fail@plt+0x7734>
   190b0:	ldrb	r3, [sp, #32]
   190b4:	cmp	r3, #0
   190b8:	beq	18ff4 <__assert_fail@plt+0x7654>
   190bc:	ldr	r0, [sp, #148]	; 0x94
   190c0:	ldr	r3, [sp, #36]	; 0x24
   190c4:	cmp	r0, r3
   190c8:	movne	r0, #0
   190cc:	moveq	r0, #1
   190d0:	b	19008 <__assert_fail@plt+0x7668>
   190d4:	add	r2, sl, sl, lsl #2
   190d8:	cmp	r6, r2
   190dc:	addcc	r6, r6, #1
   190e0:	movcc	fp, r3
   190e4:	bcc	190b0 <__assert_fail@plt+0x7710>
   190e8:	b	19100 <__assert_fail@plt+0x7760>
   190ec:	add	r2, sl, sl, lsl #2
   190f0:	cmp	r2, r6
   190f4:	addhi	r6, r6, #1
   190f8:	movhi	fp, r3
   190fc:	bhi	18ff4 <__assert_fail@plt+0x7654>
   19100:	ldr	r3, [sp]
   19104:	subs	r4, r6, r3
   19108:	beq	186e8 <__assert_fail@plt+0x6d48>
   1910c:	mov	r9, #1
   19110:	b	18624 <__assert_fail@plt+0x6c84>
   19114:	strd	r4, [sp, #-16]!
   19118:	str	r6, [sp, #8]
   1911c:	str	lr, [sp, #12]
   19120:	subs	r4, r0, #0
   19124:	beq	191c0 <__assert_fail@plt+0x7820>
   19128:	mov	r1, #47	; 0x2f
   1912c:	mov	r0, r4
   19130:	bl	118a4 <strrchr@plt>
   19134:	subs	r5, r0, #0
   19138:	beq	19198 <__assert_fail@plt+0x77f8>
   1913c:	add	r6, r5, #1
   19140:	sub	r3, r6, r4
   19144:	cmp	r3, #6
   19148:	ble	19198 <__assert_fail@plt+0x77f8>
   1914c:	mov	r2, #7
   19150:	movw	r1, #56716	; 0xdd8c
   19154:	movt	r1, #2
   19158:	sub	r0, r5, #6
   1915c:	bl	11958 <strncmp@plt>
   19160:	cmp	r0, #0
   19164:	bne	19198 <__assert_fail@plt+0x77f8>
   19168:	mov	r2, #3
   1916c:	movw	r1, #56724	; 0xdd94
   19170:	movt	r1, #2
   19174:	mov	r0, r6
   19178:	bl	11958 <strncmp@plt>
   1917c:	cmp	r0, #0
   19180:	movne	r4, r6
   19184:	bne	19198 <__assert_fail@plt+0x77f8>
   19188:	add	r4, r5, #4
   1918c:	movw	r3, #61960	; 0xf208
   19190:	movt	r3, #3
   19194:	str	r4, [r3]
   19198:	movw	r3, #62108	; 0xf29c
   1919c:	movt	r3, #3
   191a0:	str	r4, [r3]
   191a4:	movw	r3, #61964	; 0xf20c
   191a8:	movt	r3, #3
   191ac:	str	r4, [r3]
   191b0:	ldrd	r4, [sp]
   191b4:	ldr	r6, [sp, #8]
   191b8:	add	sp, sp, #12
   191bc:	pop	{pc}		; (ldr pc, [sp], #4)
   191c0:	movw	r3, #61976	; 0xf218
   191c4:	movt	r3, #3
   191c8:	ldr	r3, [r3]
   191cc:	mov	r2, #55	; 0x37
   191d0:	mov	r1, #1
   191d4:	movw	r0, #56660	; 0xdd54
   191d8:	movt	r0, #2
   191dc:	bl	11688 <fwrite@plt>
   191e0:	bl	11964 <abort@plt>
   191e4:	mov	r2, #0
   191e8:	mov	r3, #0
   191ec:	strd	r2, [r0]
   191f0:	strd	r2, [r0, #8]
   191f4:	strd	r2, [r0, #16]
   191f8:	strd	r2, [r0, #24]
   191fc:	strd	r2, [r0, #32]
   19200:	strd	r2, [r0, #40]	; 0x28
   19204:	cmp	r1, #10
   19208:	beq	19214 <__assert_fail@plt+0x7874>
   1920c:	str	r1, [r0]
   19210:	bx	lr
   19214:	str	r4, [sp, #-8]!
   19218:	str	lr, [sp, #4]
   1921c:	bl	11964 <abort@plt>
   19220:	strd	r4, [sp, #-16]!
   19224:	str	r6, [sp, #8]
   19228:	str	lr, [sp, #12]
   1922c:	mov	r5, r0
   19230:	mov	r6, r1
   19234:	mov	r2, #5
   19238:	mov	r1, r0
   1923c:	mov	r0, #0
   19240:	bl	11628 <dcgettext@plt>
   19244:	mov	r4, r0
   19248:	cmp	r5, r0
   1924c:	beq	19264 <__assert_fail@plt+0x78c4>
   19250:	mov	r0, r4
   19254:	ldrd	r4, [sp]
   19258:	ldr	r6, [sp, #8]
   1925c:	add	sp, sp, #12
   19260:	pop	{pc}		; (ldr pc, [sp], #4)
   19264:	bl	2c284 <__assert_fail@plt+0x1a8e4>
   19268:	ldrb	r3, [r0]
   1926c:	bic	r3, r3, #32
   19270:	cmp	r3, #85	; 0x55
   19274:	bne	192f8 <__assert_fail@plt+0x7958>
   19278:	ldrb	r3, [r0, #1]
   1927c:	bic	r3, r3, #32
   19280:	cmp	r3, #84	; 0x54
   19284:	bne	192bc <__assert_fail@plt+0x791c>
   19288:	ldrb	r3, [r0, #2]
   1928c:	bic	r3, r3, #32
   19290:	cmp	r3, #70	; 0x46
   19294:	bne	192bc <__assert_fail@plt+0x791c>
   19298:	ldrb	r3, [r0, #3]
   1929c:	cmp	r3, #45	; 0x2d
   192a0:	bne	192bc <__assert_fail@plt+0x791c>
   192a4:	ldrb	r3, [r0, #4]
   192a8:	cmp	r3, #56	; 0x38
   192ac:	bne	192bc <__assert_fail@plt+0x791c>
   192b0:	ldrb	r3, [r0, #5]
   192b4:	cmp	r3, #0
   192b8:	beq	192d8 <__assert_fail@plt+0x7938>
   192bc:	movw	r4, #56812	; 0xddec
   192c0:	movt	r4, #2
   192c4:	movw	r3, #56832	; 0xde00
   192c8:	movt	r3, #2
   192cc:	cmp	r6, #9
   192d0:	movne	r4, r3
   192d4:	b	19250 <__assert_fail@plt+0x78b0>
   192d8:	ldrb	r2, [r4]
   192dc:	movw	r4, #56828	; 0xddfc
   192e0:	movt	r4, #2
   192e4:	movw	r3, #56816	; 0xddf0
   192e8:	movt	r3, #2
   192ec:	cmp	r2, #96	; 0x60
   192f0:	movne	r4, r3
   192f4:	b	19250 <__assert_fail@plt+0x78b0>
   192f8:	cmp	r3, #71	; 0x47
   192fc:	bne	192bc <__assert_fail@plt+0x791c>
   19300:	ldrb	r3, [r0, #1]
   19304:	bic	r3, r3, #32
   19308:	cmp	r3, #66	; 0x42
   1930c:	bne	192bc <__assert_fail@plt+0x791c>
   19310:	ldrb	r3, [r0, #2]
   19314:	cmp	r3, #49	; 0x31
   19318:	bne	192bc <__assert_fail@plt+0x791c>
   1931c:	ldrb	r3, [r0, #3]
   19320:	cmp	r3, #56	; 0x38
   19324:	bne	192bc <__assert_fail@plt+0x791c>
   19328:	ldrb	r3, [r0, #4]
   1932c:	cmp	r3, #48	; 0x30
   19330:	bne	192bc <__assert_fail@plt+0x791c>
   19334:	ldrb	r3, [r0, #5]
   19338:	cmp	r3, #51	; 0x33
   1933c:	bne	192bc <__assert_fail@plt+0x791c>
   19340:	ldrb	r3, [r0, #6]
   19344:	cmp	r3, #48	; 0x30
   19348:	bne	192bc <__assert_fail@plt+0x791c>
   1934c:	ldrb	r3, [r0, #7]
   19350:	cmp	r3, #0
   19354:	bne	192bc <__assert_fail@plt+0x791c>
   19358:	ldrb	r2, [r4]
   1935c:	movw	r4, #56824	; 0xddf8
   19360:	movt	r4, #2
   19364:	movw	r3, #56820	; 0xddf4
   19368:	movt	r3, #2
   1936c:	cmp	r2, #96	; 0x60
   19370:	movne	r4, r3
   19374:	b	19250 <__assert_fail@plt+0x78b0>
   19378:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1937c:	strd	r6, [sp, #8]
   19380:	strd	r8, [sp, #16]
   19384:	strd	sl, [sp, #24]
   19388:	str	lr, [sp, #32]
   1938c:	sub	sp, sp, #116	; 0x74
   19390:	str	r0, [sp, #64]	; 0x40
   19394:	mov	r8, r1
   19398:	str	r2, [sp, #48]	; 0x30
   1939c:	str	r3, [sp, #24]
   193a0:	ldr	r7, [sp, #152]	; 0x98
   193a4:	bl	116a0 <__ctype_get_mb_cur_max@plt>
   193a8:	str	r0, [sp, #76]	; 0x4c
   193ac:	ldr	r3, [sp, #156]	; 0x9c
   193b0:	ubfx	r3, r3, #1, #1
   193b4:	str	r3, [sp, #32]
   193b8:	mov	r3, #1
   193bc:	str	r3, [sp, #40]	; 0x28
   193c0:	mov	r3, #0
   193c4:	str	r3, [sp, #68]	; 0x44
   193c8:	str	r3, [sp, #36]	; 0x24
   193cc:	str	r3, [sp, #28]
   193d0:	str	r3, [sp, #52]	; 0x34
   193d4:	str	r3, [sp, #60]	; 0x3c
   193d8:	str	r3, [sp, #72]	; 0x48
   193dc:	movw	r3, #56836	; 0xde04
   193e0:	movt	r3, #2
   193e4:	str	r3, [sp, #80]	; 0x50
   193e8:	mov	r9, r8
   193ec:	mov	sl, r7
   193f0:	cmp	sl, #10
   193f4:	ldrls	pc, [pc, sl, lsl #2]
   193f8:	b	195bc <__assert_fail@plt+0x7c1c>
   193fc:	andeq	r9, r1, ip, asr r4
   19400:	andeq	r9, r1, r0, lsr r4
   19404:	muleq	r1, r4, r5
   19408:	andeq	r9, r1, r8, lsr #8
   1940c:	andeq	r9, r1, r8, asr #10
   19410:	andeq	r9, r1, ip, ror #8
   19414:	andeq	sl, r1, r8, lsr r8
   19418:	andeq	r9, r1, r0, asr #11
   1941c:	andeq	r9, r1, r8, lsr #9
   19420:	andeq	r9, r1, r8, lsr #9
   19424:	andeq	r9, r1, r8, lsr #9
   19428:	mov	r3, #1
   1942c:	str	r3, [sp, #28]
   19430:	mov	r3, #1
   19434:	str	r3, [sp, #32]
   19438:	str	r3, [sp, #52]	; 0x34
   1943c:	movw	r3, #56832	; 0xde00
   19440:	movt	r3, #2
   19444:	str	r3, [sp, #60]	; 0x3c
   19448:	mov	fp, #0
   1944c:	mov	sl, #2
   19450:	mov	r6, #0
   19454:	ldr	r8, [sp, #64]	; 0x40
   19458:	b	19cd0 <__assert_fail@plt+0x8330>
   1945c:	mov	fp, sl
   19460:	mov	r3, #0
   19464:	str	r3, [sp, #32]
   19468:	b	19450 <__assert_fail@plt+0x7ab0>
   1946c:	ldr	r3, [sp, #32]
   19470:	cmp	r3, #0
   19474:	bne	195d4 <__assert_fail@plt+0x7c34>
   19478:	cmp	r9, #0
   1947c:	beq	195f8 <__assert_fail@plt+0x7c58>
   19480:	mov	r3, #34	; 0x22
   19484:	ldr	r2, [sp, #64]	; 0x40
   19488:	strb	r3, [r2]
   1948c:	mov	fp, #1
   19490:	str	fp, [sp, #28]
   19494:	str	fp, [sp, #52]	; 0x34
   19498:	movw	r3, #56812	; 0xddec
   1949c:	movt	r3, #2
   194a0:	str	r3, [sp, #60]	; 0x3c
   194a4:	b	19450 <__assert_fail@plt+0x7ab0>
   194a8:	cmp	sl, #10
   194ac:	bne	194e0 <__assert_fail@plt+0x7b40>
   194b0:	ldr	r3, [sp, #32]
   194b4:	cmp	r3, #0
   194b8:	movne	fp, #0
   194bc:	beq	19508 <__assert_fail@plt+0x7b68>
   194c0:	ldr	r0, [sp, #168]	; 0xa8
   194c4:	bl	117a8 <strlen@plt>
   194c8:	str	r0, [sp, #52]	; 0x34
   194cc:	ldr	r3, [sp, #168]	; 0xa8
   194d0:	str	r3, [sp, #60]	; 0x3c
   194d4:	mov	r3, #1
   194d8:	str	r3, [sp, #28]
   194dc:	b	19450 <__assert_fail@plt+0x7ab0>
   194e0:	mov	r1, sl
   194e4:	ldr	r0, [sp, #80]	; 0x50
   194e8:	bl	19220 <__assert_fail@plt+0x7880>
   194ec:	str	r0, [sp, #164]	; 0xa4
   194f0:	mov	r1, sl
   194f4:	movw	r0, #56832	; 0xde00
   194f8:	movt	r0, #2
   194fc:	bl	19220 <__assert_fail@plt+0x7880>
   19500:	str	r0, [sp, #168]	; 0xa8
   19504:	b	194b0 <__assert_fail@plt+0x7b10>
   19508:	ldr	r3, [sp, #164]	; 0xa4
   1950c:	ldrb	r3, [r3]
   19510:	cmp	r3, #0
   19514:	beq	19540 <__assert_fail@plt+0x7ba0>
   19518:	ldr	r2, [sp, #164]	; 0xa4
   1951c:	mov	fp, #0
   19520:	ldr	r1, [sp, #64]	; 0x40
   19524:	cmp	r9, fp
   19528:	strbhi	r3, [r1, fp]
   1952c:	add	fp, fp, #1
   19530:	ldrb	r3, [r2, #1]!
   19534:	cmp	r3, #0
   19538:	bne	19524 <__assert_fail@plt+0x7b84>
   1953c:	b	194c0 <__assert_fail@plt+0x7b20>
   19540:	mov	fp, #0
   19544:	b	194c0 <__assert_fail@plt+0x7b20>
   19548:	ldr	r3, [sp, #32]
   1954c:	cmp	r3, #0
   19550:	bne	19430 <__assert_fail@plt+0x7a90>
   19554:	mov	r3, #1
   19558:	str	r3, [sp, #28]
   1955c:	cmp	r9, #0
   19560:	beq	19614 <__assert_fail@plt+0x7c74>
   19564:	mov	r3, #39	; 0x27
   19568:	ldr	r2, [sp, #64]	; 0x40
   1956c:	strb	r3, [r2]
   19570:	mov	r3, #0
   19574:	str	r3, [sp, #32]
   19578:	mov	fp, #1
   1957c:	str	fp, [sp, #52]	; 0x34
   19580:	movw	r3, #56832	; 0xde00
   19584:	movt	r3, #2
   19588:	str	r3, [sp, #60]	; 0x3c
   1958c:	mov	sl, #2
   19590:	b	19450 <__assert_fail@plt+0x7ab0>
   19594:	ldr	r3, [sp, #32]
   19598:	cmp	r3, #0
   1959c:	beq	1955c <__assert_fail@plt+0x7bbc>
   195a0:	mov	r3, #1
   195a4:	str	r3, [sp, #52]	; 0x34
   195a8:	movw	r3, #56832	; 0xde00
   195ac:	movt	r3, #2
   195b0:	str	r3, [sp, #60]	; 0x3c
   195b4:	mov	fp, #0
   195b8:	b	19450 <__assert_fail@plt+0x7ab0>
   195bc:	bl	11964 <abort@plt>
   195c0:	mov	fp, #0
   195c4:	str	fp, [sp, #32]
   195c8:	mov	r3, #1
   195cc:	str	r3, [sp, #28]
   195d0:	b	19450 <__assert_fail@plt+0x7ab0>
   195d4:	ldr	r3, [sp, #32]
   195d8:	str	r3, [sp, #28]
   195dc:	mov	r3, #1
   195e0:	str	r3, [sp, #52]	; 0x34
   195e4:	movw	r3, #56812	; 0xddec
   195e8:	movt	r3, #2
   195ec:	str	r3, [sp, #60]	; 0x3c
   195f0:	mov	fp, #0
   195f4:	b	19450 <__assert_fail@plt+0x7ab0>
   195f8:	mov	fp, #1
   195fc:	str	fp, [sp, #28]
   19600:	str	fp, [sp, #52]	; 0x34
   19604:	movw	r3, #56812	; 0xddec
   19608:	movt	r3, #2
   1960c:	str	r3, [sp, #60]	; 0x3c
   19610:	b	19450 <__assert_fail@plt+0x7ab0>
   19614:	mov	r3, #0
   19618:	str	r3, [sp, #32]
   1961c:	mov	fp, #1
   19620:	str	fp, [sp, #52]	; 0x34
   19624:	movw	r3, #56832	; 0xde00
   19628:	movt	r3, #2
   1962c:	str	r3, [sp, #60]	; 0x3c
   19630:	mov	sl, #2
   19634:	b	19450 <__assert_fail@plt+0x7ab0>
   19638:	mov	r3, r2
   1963c:	add	r4, r6, r2
   19640:	ldr	r2, [sp, #24]
   19644:	cmp	r3, #1
   19648:	movls	r3, #0
   1964c:	movhi	r3, #1
   19650:	cmn	r2, #1
   19654:	movne	r3, #0
   19658:	cmp	r3, #0
   1965c:	beq	1966c <__assert_fail@plt+0x7ccc>
   19660:	ldr	r0, [sp, #48]	; 0x30
   19664:	bl	117a8 <strlen@plt>
   19668:	str	r0, [sp, #24]
   1966c:	ldr	r3, [sp, #24]
   19670:	cmp	r4, r3
   19674:	bhi	1a860 <__assert_fail@plt+0x8ec0>
   19678:	ldr	r3, [sp, #48]	; 0x30
   1967c:	add	r4, r3, r6
   19680:	ldr	r2, [sp, #52]	; 0x34
   19684:	ldr	r1, [sp, #60]	; 0x3c
   19688:	mov	r0, r4
   1968c:	bl	1161c <memcmp@plt>
   19690:	cmp	r0, #0
   19694:	bne	1a860 <__assert_fail@plt+0x8ec0>
   19698:	ldr	r3, [sp, #32]
   1969c:	cmp	r3, #0
   196a0:	bne	198b0 <__assert_fail@plt+0x7f10>
   196a4:	ldrb	r4, [r4]
   196a8:	cmp	r4, #126	; 0x7e
   196ac:	ldrls	pc, [pc, r4, lsl #2]
   196b0:	b	1a164 <__assert_fail@plt+0x87c4>
   196b4:	strdeq	r9, [r1], -r4
   196b8:	andeq	sl, r1, r4, ror #2
   196bc:	andeq	sl, r1, r4, ror #2
   196c0:	andeq	sl, r1, r4, ror #2
   196c4:	andeq	sl, r1, r4, ror #2
   196c8:	andeq	sl, r1, r4, ror #2
   196cc:	andeq	sl, r1, r4, ror #2
   196d0:	andeq	sl, r1, ip
   196d4:	muleq	r1, r0, fp
   196d8:	andeq	r9, r1, r4, lsr pc
   196dc:	andeq	r9, r1, r0, ror #31
   196e0:	andeq	r9, r1, r8, asr #30
   196e4:	andeq	r9, r1, r4, lsr #23
   196e8:			; <UNDEFINED> instruction: 0x00019bb8
   196ec:	andeq	sl, r1, r4, ror #2
   196f0:	andeq	sl, r1, r4, ror #2
   196f4:	andeq	sl, r1, r4, ror #2
   196f8:	andeq	sl, r1, r4, ror #2
   196fc:	andeq	sl, r1, r4, ror #2
   19700:	andeq	sl, r1, r4, ror #2
   19704:	andeq	sl, r1, r4, ror #2
   19708:	andeq	sl, r1, r4, ror #2
   1970c:	andeq	sl, r1, r4, ror #2
   19710:	andeq	sl, r1, r4, ror #2
   19714:	andeq	sl, r1, r4, ror #2
   19718:	andeq	sl, r1, r4, ror #2
   1971c:	andeq	sl, r1, r4, ror #2
   19720:	andeq	sl, r1, r4, ror #2
   19724:	andeq	sl, r1, r4, ror #2
   19728:	andeq	sl, r1, r4, ror #2
   1972c:	andeq	sl, r1, r4, ror #2
   19730:	andeq	sl, r1, r4, ror #2
   19734:	andeq	sl, r1, r0, lsl #1
   19738:	andeq	sl, r1, r4, lsr #1
   1973c:	andeq	sl, r1, r4, lsr #1
   19740:	andeq	sl, r1, ip, lsr r0
   19744:	andeq	sl, r1, r4, lsr #1
   19748:	andeq	sl, r1, r4, asr #11
   1974c:	andeq	sl, r1, r4, lsr #1
   19750:	andeq	sl, r1, r4, asr #1
   19754:	andeq	sl, r1, r4, lsr #1
   19758:	andeq	sl, r1, r4, lsr #1
   1975c:	andeq	sl, r1, r4, lsr #1
   19760:	andeq	sl, r1, r4, asr #11
   19764:	andeq	sl, r1, r4, asr #11
   19768:	andeq	sl, r1, r4, asr #11
   1976c:	andeq	sl, r1, r4, asr #11
   19770:	andeq	sl, r1, r4, asr #11
   19774:	andeq	sl, r1, r4, asr #11
   19778:	andeq	sl, r1, r4, asr #11
   1977c:	andeq	sl, r1, r4, asr #11
   19780:	andeq	sl, r1, r4, asr #11
   19784:	andeq	sl, r1, r4, asr #11
   19788:	andeq	sl, r1, r4, asr #11
   1978c:	andeq	sl, r1, r4, asr #11
   19790:	andeq	sl, r1, r4, asr #11
   19794:	andeq	sl, r1, r4, asr #11
   19798:	andeq	sl, r1, r4, asr #11
   1979c:	andeq	sl, r1, r4, asr #11
   197a0:	andeq	sl, r1, r4, lsr #1
   197a4:	andeq	sl, r1, r4, lsr #1
   197a8:	andeq	sl, r1, r4, lsr #1
   197ac:	andeq	sl, r1, r4, lsr #1
   197b0:	andeq	r9, r1, r4, lsr #20
   197b4:	andeq	sl, r1, r4, ror #2
   197b8:	andeq	sl, r1, r4, asr #11
   197bc:	andeq	sl, r1, r4, asr #11
   197c0:	andeq	sl, r1, r4, asr #11
   197c4:	andeq	sl, r1, r4, asr #11
   197c8:	andeq	sl, r1, r4, asr #11
   197cc:	andeq	sl, r1, r4, asr #11
   197d0:	andeq	sl, r1, r4, asr #11
   197d4:	andeq	sl, r1, r4, asr #11
   197d8:	andeq	sl, r1, r4, asr #11
   197dc:	andeq	sl, r1, r4, asr #11
   197e0:	andeq	sl, r1, r4, asr #11
   197e4:	andeq	sl, r1, r4, asr #11
   197e8:	andeq	sl, r1, r4, asr #11
   197ec:	andeq	sl, r1, r4, asr #11
   197f0:	andeq	sl, r1, r4, asr #11
   197f4:	andeq	sl, r1, r4, asr #11
   197f8:	andeq	sl, r1, r4, asr #11
   197fc:	andeq	sl, r1, r4, asr #11
   19800:	andeq	sl, r1, r4, asr #11
   19804:	andeq	sl, r1, r4, asr #11
   19808:	andeq	sl, r1, r4, asr #11
   1980c:	andeq	sl, r1, r4, asr #11
   19810:	andeq	sl, r1, r4, asr #11
   19814:	andeq	sl, r1, r4, asr #11
   19818:	andeq	sl, r1, r4, asr #11
   1981c:	andeq	sl, r1, r4, asr #11
   19820:	andeq	sl, r1, r4, lsr #1
   19824:	andeq	r9, r1, ip, asr pc
   19828:	andeq	sl, r1, r4, asr #11
   1982c:	andeq	sl, r1, r4, lsr #1
   19830:	andeq	sl, r1, r4, asr #11
   19834:	andeq	sl, r1, r4, lsr #1
   19838:	andeq	sl, r1, r4, asr #11
   1983c:	andeq	sl, r1, r4, asr #11
   19840:	andeq	sl, r1, r4, asr #11
   19844:	andeq	sl, r1, r4, asr #11
   19848:	andeq	sl, r1, r4, asr #11
   1984c:	andeq	sl, r1, r4, asr #11
   19850:	andeq	sl, r1, r4, asr #11
   19854:	andeq	sl, r1, r4, asr #11
   19858:	andeq	sl, r1, r4, asr #11
   1985c:	andeq	sl, r1, r4, asr #11
   19860:	andeq	sl, r1, r4, asr #11
   19864:	andeq	sl, r1, r4, asr #11
   19868:	andeq	sl, r1, r4, asr #11
   1986c:	andeq	sl, r1, r4, asr #11
   19870:	andeq	sl, r1, r4, asr #11
   19874:	andeq	sl, r1, r4, asr #11
   19878:	andeq	sl, r1, r4, asr #11
   1987c:	andeq	sl, r1, r4, asr #11
   19880:	andeq	sl, r1, r4, asr #11
   19884:	andeq	sl, r1, r4, asr #11
   19888:	andeq	sl, r1, r4, asr #11
   1988c:	andeq	sl, r1, r4, asr #11
   19890:	andeq	sl, r1, r4, asr #11
   19894:	andeq	sl, r1, r4, asr #11
   19898:	andeq	sl, r1, r4, asr #11
   1989c:	andeq	sl, r1, r4, asr #11
   198a0:	andeq	sl, r1, ip, lsl r0
   198a4:	andeq	sl, r1, r4, lsr #1
   198a8:	andeq	sl, r1, ip, lsl r0
   198ac:	andeq	sl, r1, ip, lsr r0
   198b0:	mov	r8, r9
   198b4:	mov	r7, sl
   198b8:	b	1a7b8 <__assert_fail@plt+0x8e18>
   198bc:	ldr	r3, [sp, #28]
   198c0:	cmp	r3, #0
   198c4:	bne	198e4 <__assert_fail@plt+0x7f44>
   198c8:	ldr	r3, [sp, #156]	; 0x9c
   198cc:	tst	r3, #1
   198d0:	bne	19ccc <__assert_fail@plt+0x832c>
   198d4:	ldr	r3, [sp, #28]
   198d8:	str	r3, [sp, #44]	; 0x2c
   198dc:	mov	r5, r3
   198e0:	b	19bec <__assert_fail@plt+0x824c>
   198e4:	ldr	r3, [sp, #32]
   198e8:	cmp	r3, #0
   198ec:	bne	1a768 <__assert_fail@plt+0x8dc8>
   198f0:	str	r3, [sp, #44]	; 0x2c
   198f4:	ldr	r3, [sp, #36]	; 0x24
   198f8:	eor	r3, r3, #1
   198fc:	cmp	sl, #2
   19900:	movne	r3, #0
   19904:	andeq	r3, r3, #1
   19908:	cmp	r3, #0
   1990c:	beq	19964 <__assert_fail@plt+0x7fc4>
   19910:	cmp	r9, fp
   19914:	movhi	r2, #39	; 0x27
   19918:	strbhi	r2, [r8, fp]
   1991c:	add	r2, fp, #1
   19920:	cmp	r9, r2
   19924:	movhi	r1, #36	; 0x24
   19928:	strbhi	r1, [r8, r2]
   1992c:	add	r2, fp, #2
   19930:	cmp	r9, r2
   19934:	movhi	r1, #39	; 0x27
   19938:	strbhi	r1, [r8, r2]
   1993c:	add	r2, fp, #3
   19940:	cmp	r9, r2
   19944:	bls	1a824 <__assert_fail@plt+0x8e84>
   19948:	mov	r1, #92	; 0x5c
   1994c:	strb	r1, [r8, r2]
   19950:	add	fp, fp, #4
   19954:	str	r3, [sp, #36]	; 0x24
   19958:	mov	r5, #0
   1995c:	mov	r4, #48	; 0x30
   19960:	b	19c38 <__assert_fail@plt+0x8298>
   19964:	cmp	r9, fp
   19968:	bhi	19990 <__assert_fail@plt+0x7ff0>
   1996c:	add	r1, fp, #1
   19970:	ldr	r2, [sp, #56]	; 0x38
   19974:	cmp	r2, #0
   19978:	bne	199b8 <__assert_fail@plt+0x8018>
   1997c:	mov	r3, r5
   19980:	ldr	r5, [sp, #56]	; 0x38
   19984:	mov	fp, r1
   19988:	mov	r4, #48	; 0x30
   1998c:	b	19bec <__assert_fail@plt+0x824c>
   19990:	mov	r2, #92	; 0x5c
   19994:	strb	r2, [r8, fp]
   19998:	add	r1, fp, #1
   1999c:	ldr	r2, [sp, #56]	; 0x38
   199a0:	cmp	r2, #0
   199a4:	moveq	r3, r5
   199a8:	moveq	r5, r2
   199ac:	moveq	fp, r1
   199b0:	moveq	r4, #48	; 0x30
   199b4:	beq	19c38 <__assert_fail@plt+0x8298>
   199b8:	add	r2, r6, #1
   199bc:	ldr	r0, [sp, #24]
   199c0:	cmp	r2, r0
   199c4:	bcs	199e0 <__assert_fail@plt+0x8040>
   199c8:	ldr	r0, [sp, #48]	; 0x30
   199cc:	ldrb	r2, [r0, r2]
   199d0:	sub	r2, r2, #48	; 0x30
   199d4:	uxtb	r2, r2
   199d8:	cmp	r2, #9
   199dc:	bls	199f8 <__assert_fail@plt+0x8058>
   199e0:	mov	r2, r3
   199e4:	mov	r3, r5
   199e8:	mov	r5, r2
   199ec:	mov	fp, r1
   199f0:	mov	r4, #48	; 0x30
   199f4:	b	19c10 <__assert_fail@plt+0x8270>
   199f8:	cmp	r9, r1
   199fc:	movhi	r2, #48	; 0x30
   19a00:	strbhi	r2, [r8, r1]
   19a04:	add	r2, fp, #2
   19a08:	cmp	r9, r2
   19a0c:	movhi	r1, #48	; 0x30
   19a10:	strbhi	r1, [r8, r2]
   19a14:	add	r1, fp, #3
   19a18:	b	199e0 <__assert_fail@plt+0x8040>
   19a1c:	mov	r3, #0
   19a20:	str	r3, [sp, #44]	; 0x2c
   19a24:	cmp	sl, #2
   19a28:	beq	19a44 <__assert_fail@plt+0x80a4>
   19a2c:	cmp	sl, #5
   19a30:	beq	19a5c <__assert_fail@plt+0x80bc>
   19a34:	mov	r5, #0
   19a38:	mov	r3, r5
   19a3c:	mov	r4, #63	; 0x3f
   19a40:	b	19bec <__assert_fail@plt+0x824c>
   19a44:	ldr	r3, [sp, #32]
   19a48:	cmp	r3, #0
   19a4c:	bne	1a774 <__assert_fail@plt+0x8dd4>
   19a50:	mov	r5, r3
   19a54:	mov	r4, #63	; 0x3f
   19a58:	b	1a154 <__assert_fail@plt+0x87b4>
   19a5c:	ldr	r3, [sp, #156]	; 0x9c
   19a60:	tst	r3, #4
   19a64:	beq	1a58c <__assert_fail@plt+0x8bec>
   19a68:	add	r2, r6, #2
   19a6c:	ldr	r3, [sp, #24]
   19a70:	cmp	r2, r3
   19a74:	bcs	1a59c <__assert_fail@plt+0x8bfc>
   19a78:	ldr	r3, [sp, #48]	; 0x30
   19a7c:	add	r3, r3, r6
   19a80:	ldrb	r4, [r3, #1]
   19a84:	cmp	r4, #63	; 0x3f
   19a88:	movne	r5, #0
   19a8c:	movne	r3, r5
   19a90:	movne	r4, #63	; 0x3f
   19a94:	bne	19bec <__assert_fail@plt+0x824c>
   19a98:	ldr	r3, [sp, #48]	; 0x30
   19a9c:	ldrb	r1, [r3, r2]
   19aa0:	sub	r3, r1, #33	; 0x21
   19aa4:	cmp	r3, #29
   19aa8:	ldrls	pc, [pc, r3, lsl #2]
   19aac:	b	1a5ac <__assert_fail@plt+0x8c0c>
   19ab0:	andeq	r9, r1, r8, lsr #22
   19ab4:	andeq	sl, r1, ip, lsr #11
   19ab8:	andeq	sl, r1, ip, lsr #11
   19abc:	andeq	sl, r1, ip, lsr #11
   19ac0:	andeq	sl, r1, ip, lsr #11
   19ac4:	andeq	sl, r1, ip, lsr #11
   19ac8:	andeq	r9, r1, r8, lsr #22
   19acc:	andeq	r9, r1, r8, lsr #22
   19ad0:	andeq	r9, r1, r8, lsr #22
   19ad4:	andeq	sl, r1, ip, lsr #11
   19ad8:	andeq	sl, r1, ip, lsr #11
   19adc:	andeq	sl, r1, ip, lsr #11
   19ae0:	andeq	r9, r1, r8, lsr #22
   19ae4:	andeq	sl, r1, ip, lsr #11
   19ae8:	andeq	r9, r1, r8, lsr #22
   19aec:	andeq	sl, r1, ip, lsr #11
   19af0:	andeq	sl, r1, ip, lsr #11
   19af4:	andeq	sl, r1, ip, lsr #11
   19af8:	andeq	sl, r1, ip, lsr #11
   19afc:	andeq	sl, r1, ip, lsr #11
   19b00:	andeq	sl, r1, ip, lsr #11
   19b04:	andeq	sl, r1, ip, lsr #11
   19b08:	andeq	sl, r1, ip, lsr #11
   19b0c:	andeq	sl, r1, ip, lsr #11
   19b10:	andeq	sl, r1, ip, lsr #11
   19b14:	andeq	sl, r1, ip, lsr #11
   19b18:	andeq	sl, r1, ip, lsr #11
   19b1c:	andeq	r9, r1, r8, lsr #22
   19b20:	andeq	r9, r1, r8, lsr #22
   19b24:	andeq	r9, r1, r8, lsr #22
   19b28:	ldr	r3, [sp, #32]
   19b2c:	cmp	r3, #0
   19b30:	bne	1a818 <__assert_fail@plt+0x8e78>
   19b34:	cmp	r9, fp
   19b38:	movhi	r3, #63	; 0x3f
   19b3c:	strbhi	r3, [r8, fp]
   19b40:	add	r3, fp, #1
   19b44:	cmp	r9, r3
   19b48:	movhi	r0, #34	; 0x22
   19b4c:	strbhi	r0, [r8, r3]
   19b50:	add	r3, fp, #2
   19b54:	cmp	r9, r3
   19b58:	movhi	r0, #34	; 0x22
   19b5c:	strbhi	r0, [r8, r3]
   19b60:	add	r3, fp, #3
   19b64:	cmp	r9, r3
   19b68:	movhi	r0, #63	; 0x3f
   19b6c:	strbhi	r0, [r8, r3]
   19b70:	add	fp, fp, #4
   19b74:	ldr	r3, [sp, #32]
   19b78:	mov	r5, r3
   19b7c:	mov	r4, r1
   19b80:	mov	r6, r2
   19b84:	b	19bec <__assert_fail@plt+0x824c>
   19b88:	mov	r3, #0
   19b8c:	str	r3, [sp, #44]	; 0x2c
   19b90:	mov	r4, #8
   19b94:	mov	r3, #98	; 0x62
   19b98:	b	19bd8 <__assert_fail@plt+0x8238>
   19b9c:	mov	r3, #0
   19ba0:	str	r3, [sp, #44]	; 0x2c
   19ba4:	mov	r4, #12
   19ba8:	mov	r3, #102	; 0x66
   19bac:	b	19bd8 <__assert_fail@plt+0x8238>
   19bb0:	mov	r3, #0
   19bb4:	str	r3, [sp, #44]	; 0x2c
   19bb8:	mov	r4, #13
   19bbc:	mov	r3, #114	; 0x72
   19bc0:	ldr	r2, [sp, #32]
   19bc4:	cmp	sl, #2
   19bc8:	movne	r2, #0
   19bcc:	andeq	r2, r2, #1
   19bd0:	cmp	r2, #0
   19bd4:	bne	19ff8 <__assert_fail@plt+0x8658>
   19bd8:	ldr	r2, [sp, #28]
   19bdc:	cmp	r2, #0
   19be0:	bne	1a5e0 <__assert_fail@plt+0x8c40>
   19be4:	mov	r5, r2
   19be8:	mov	r3, r2
   19bec:	ldr	r2, [sp, #28]
   19bf0:	eor	r2, r2, #1
   19bf4:	cmp	sl, #2
   19bf8:	orreq	r2, r2, #1
   19bfc:	eor	r2, r2, #1
   19c00:	ldr	r1, [sp, #32]
   19c04:	orr	r2, r1, r2
   19c08:	tst	r2, #255	; 0xff
   19c0c:	beq	19c38 <__assert_fail@plt+0x8298>
   19c10:	ldr	r2, [sp, #160]	; 0xa0
   19c14:	cmp	r2, #0
   19c18:	beq	19c38 <__assert_fail@plt+0x8298>
   19c1c:	ubfx	r1, r4, #5, #8
   19c20:	and	r2, r4, #31
   19c24:	ldr	r0, [sp, #160]	; 0xa0
   19c28:	ldr	r1, [r0, r1, lsl #2]
   19c2c:	lsr	r2, r1, r2
   19c30:	tst	r2, #1
   19c34:	bne	19c44 <__assert_fail@plt+0x82a4>
   19c38:	ldr	r2, [sp, #44]	; 0x2c
   19c3c:	cmp	r2, #0
   19c40:	beq	19f98 <__assert_fail@plt+0x85f8>
   19c44:	ldr	r3, [sp, #32]
   19c48:	cmp	r3, #0
   19c4c:	bne	1a798 <__assert_fail@plt+0x8df8>
   19c50:	ldr	r3, [sp, #36]	; 0x24
   19c54:	eor	r3, r3, #1
   19c58:	cmp	sl, #2
   19c5c:	movne	r3, #0
   19c60:	andeq	r3, r3, #1
   19c64:	cmp	r3, #0
   19c68:	beq	19ca0 <__assert_fail@plt+0x8300>
   19c6c:	cmp	r9, fp
   19c70:	movhi	r2, #39	; 0x27
   19c74:	strbhi	r2, [r8, fp]
   19c78:	add	r2, fp, #1
   19c7c:	cmp	r9, r2
   19c80:	movhi	r1, #36	; 0x24
   19c84:	strbhi	r1, [r8, r2]
   19c88:	add	r2, fp, #2
   19c8c:	cmp	r9, r2
   19c90:	movhi	r1, #39	; 0x27
   19c94:	strbhi	r1, [r8, r2]
   19c98:	add	fp, fp, #3
   19c9c:	str	r3, [sp, #36]	; 0x24
   19ca0:	cmp	r9, fp
   19ca4:	movhi	r3, #92	; 0x5c
   19ca8:	strbhi	r3, [r8, fp]
   19cac:	add	fp, fp, #1
   19cb0:	cmp	fp, r9
   19cb4:	strbcc	r4, [r8, fp]
   19cb8:	add	fp, fp, #1
   19cbc:	cmp	r5, #0
   19cc0:	ldr	r3, [sp, #40]	; 0x28
   19cc4:	moveq	r3, r5
   19cc8:	str	r3, [sp, #40]	; 0x28
   19ccc:	add	r6, r6, #1
   19cd0:	ldr	r3, [sp, #24]
   19cd4:	cmn	r3, #1
   19cd8:	beq	1a608 <__assert_fail@plt+0x8c68>
   19cdc:	ldr	r3, [sp, #24]
   19ce0:	subs	r5, r3, r6
   19ce4:	movne	r5, #1
   19ce8:	cmp	r5, #0
   19cec:	beq	1a61c <__assert_fail@plt+0x8c7c>
   19cf0:	ldr	r3, [sp, #28]
   19cf4:	cmp	sl, #2
   19cf8:	moveq	r3, #0
   19cfc:	andne	r3, r3, #1
   19d00:	str	r3, [sp, #56]	; 0x38
   19d04:	ldr	r2, [sp, #52]	; 0x34
   19d08:	adds	r7, r2, #0
   19d0c:	movne	r7, #1
   19d10:	ands	r3, r3, r7
   19d14:	str	r3, [sp, #44]	; 0x2c
   19d18:	bne	19638 <__assert_fail@plt+0x7c98>
   19d1c:	ldr	r3, [sp, #48]	; 0x30
   19d20:	ldrb	r4, [r3, r6]
   19d24:	cmp	r4, #126	; 0x7e
   19d28:	ldrls	pc, [pc, r4, lsl #2]
   19d2c:	b	1a164 <__assert_fail@plt+0x87c4>
   19d30:			; <UNDEFINED> instruction: 0x000198bc
   19d34:	andeq	sl, r1, r4, ror #2
   19d38:	andeq	sl, r1, r4, ror #2
   19d3c:	andeq	sl, r1, r4, ror #2
   19d40:	andeq	sl, r1, r4, ror #2
   19d44:	andeq	sl, r1, r4, ror #2
   19d48:	andeq	sl, r1, r4, ror #2
   19d4c:	andeq	sl, r1, r4
   19d50:	muleq	r1, r0, fp
   19d54:	andeq	r9, r1, r4, lsr pc
   19d58:	ldrdeq	r9, [r1], -r8
   19d5c:	andeq	r9, r1, r8, asr #30
   19d60:	andeq	r9, r1, r4, lsr #23
   19d64:			; <UNDEFINED> instruction: 0x00019bb8
   19d68:	andeq	sl, r1, r4, ror #2
   19d6c:	andeq	sl, r1, r4, ror #2
   19d70:	andeq	sl, r1, r4, ror #2
   19d74:	andeq	sl, r1, r4, ror #2
   19d78:	andeq	sl, r1, r4, ror #2
   19d7c:	andeq	sl, r1, r4, ror #2
   19d80:	andeq	sl, r1, r4, ror #2
   19d84:	andeq	sl, r1, r4, ror #2
   19d88:	andeq	sl, r1, r4, ror #2
   19d8c:	andeq	sl, r1, r4, ror #2
   19d90:	andeq	sl, r1, r4, ror #2
   19d94:	andeq	sl, r1, r4, ror #2
   19d98:	andeq	sl, r1, r4, ror #2
   19d9c:	andeq	sl, r1, r4, ror #2
   19da0:	andeq	sl, r1, r4, ror #2
   19da4:	andeq	sl, r1, r4, ror #2
   19da8:	andeq	sl, r1, r4, ror #2
   19dac:	andeq	sl, r1, r4, ror #2
   19db0:	andeq	sl, r1, r0, lsl #1
   19db4:	andeq	sl, r1, ip, ror r0
   19db8:	andeq	sl, r1, ip, ror r0
   19dbc:	andeq	sl, r1, ip, lsr r0
   19dc0:	andeq	sl, r1, ip, ror r0
   19dc4:	andeq	sl, r1, r4, lsl #11
   19dc8:	andeq	sl, r1, ip, ror r0
   19dcc:	andeq	sl, r1, r4, asr #1
   19dd0:	andeq	sl, r1, ip, ror r0
   19dd4:	andeq	sl, r1, ip, ror r0
   19dd8:	andeq	sl, r1, ip, ror r0
   19ddc:	andeq	sl, r1, r4, lsl #11
   19de0:	andeq	sl, r1, r4, lsl #11
   19de4:	andeq	sl, r1, r4, lsl #11
   19de8:	andeq	sl, r1, r4, lsl #11
   19dec:	andeq	sl, r1, r4, lsl #11
   19df0:	andeq	sl, r1, r4, lsl #11
   19df4:	andeq	sl, r1, r4, lsl #11
   19df8:	andeq	sl, r1, r4, lsl #11
   19dfc:	andeq	sl, r1, r4, lsl #11
   19e00:	andeq	sl, r1, r4, lsl #11
   19e04:	andeq	sl, r1, r4, lsl #11
   19e08:	andeq	sl, r1, r4, lsl #11
   19e0c:	andeq	sl, r1, r4, lsl #11
   19e10:	andeq	sl, r1, r4, lsl #11
   19e14:	andeq	sl, r1, r4, lsl #11
   19e18:	andeq	sl, r1, r4, lsl #11
   19e1c:	andeq	sl, r1, ip, ror r0
   19e20:	andeq	sl, r1, ip, ror r0
   19e24:	andeq	sl, r1, ip, ror r0
   19e28:	andeq	sl, r1, ip, ror r0
   19e2c:	andeq	r9, r1, r4, lsr #20
   19e30:	andeq	sl, r1, r4, ror #2
   19e34:	andeq	sl, r1, r4, lsl #11
   19e38:	andeq	sl, r1, r4, lsl #11
   19e3c:	andeq	sl, r1, r4, lsl #11
   19e40:	andeq	sl, r1, r4, lsl #11
   19e44:	andeq	sl, r1, r4, lsl #11
   19e48:	andeq	sl, r1, r4, lsl #11
   19e4c:	andeq	sl, r1, r4, lsl #11
   19e50:	andeq	sl, r1, r4, lsl #11
   19e54:	andeq	sl, r1, r4, lsl #11
   19e58:	andeq	sl, r1, r4, lsl #11
   19e5c:	andeq	sl, r1, r4, lsl #11
   19e60:	andeq	sl, r1, r4, lsl #11
   19e64:	andeq	sl, r1, r4, lsl #11
   19e68:	andeq	sl, r1, r4, lsl #11
   19e6c:	andeq	sl, r1, r4, lsl #11
   19e70:	andeq	sl, r1, r4, lsl #11
   19e74:	andeq	sl, r1, r4, lsl #11
   19e78:	andeq	sl, r1, r4, lsl #11
   19e7c:	andeq	sl, r1, r4, lsl #11
   19e80:	andeq	sl, r1, r4, lsl #11
   19e84:	andeq	sl, r1, r4, lsl #11
   19e88:	andeq	sl, r1, r4, lsl #11
   19e8c:	andeq	sl, r1, r4, lsl #11
   19e90:	andeq	sl, r1, r4, lsl #11
   19e94:	andeq	sl, r1, r4, lsl #11
   19e98:	andeq	sl, r1, r4, lsl #11
   19e9c:	andeq	sl, r1, ip, ror r0
   19ea0:	andeq	r9, r1, ip, asr pc
   19ea4:	andeq	sl, r1, r4, lsl #11
   19ea8:	andeq	sl, r1, ip, ror r0
   19eac:	andeq	sl, r1, r4, lsl #11
   19eb0:	andeq	sl, r1, ip, ror r0
   19eb4:	andeq	sl, r1, r4, lsl #11
   19eb8:	andeq	sl, r1, r4, lsl #11
   19ebc:	andeq	sl, r1, r4, lsl #11
   19ec0:	andeq	sl, r1, r4, lsl #11
   19ec4:	andeq	sl, r1, r4, lsl #11
   19ec8:	andeq	sl, r1, r4, lsl #11
   19ecc:	andeq	sl, r1, r4, lsl #11
   19ed0:	andeq	sl, r1, r4, lsl #11
   19ed4:	andeq	sl, r1, r4, lsl #11
   19ed8:	andeq	sl, r1, r4, lsl #11
   19edc:	andeq	sl, r1, r4, lsl #11
   19ee0:	andeq	sl, r1, r4, lsl #11
   19ee4:	andeq	sl, r1, r4, lsl #11
   19ee8:	andeq	sl, r1, r4, lsl #11
   19eec:	andeq	sl, r1, r4, lsl #11
   19ef0:	andeq	sl, r1, r4, lsl #11
   19ef4:	andeq	sl, r1, r4, lsl #11
   19ef8:	andeq	sl, r1, r4, lsl #11
   19efc:	andeq	sl, r1, r4, lsl #11
   19f00:	andeq	sl, r1, r4, lsl #11
   19f04:	andeq	sl, r1, r4, lsl #11
   19f08:	andeq	sl, r1, r4, lsl #11
   19f0c:	andeq	sl, r1, r4, lsl #11
   19f10:	andeq	sl, r1, r4, lsl #11
   19f14:	andeq	sl, r1, r4, lsl #11
   19f18:	andeq	sl, r1, r4, lsl #11
   19f1c:	andeq	sl, r1, ip, lsl r0
   19f20:	andeq	sl, r1, ip, ror r0
   19f24:	andeq	sl, r1, ip, lsl r0
   19f28:	andeq	sl, r1, ip, lsr r0
   19f2c:	mov	r3, #0
   19f30:	str	r3, [sp, #44]	; 0x2c
   19f34:	mov	r4, #9
   19f38:	mov	r3, #116	; 0x74
   19f3c:	b	19bc0 <__assert_fail@plt+0x8220>
   19f40:	mov	r3, #0
   19f44:	str	r3, [sp, #44]	; 0x2c
   19f48:	mov	r4, #11
   19f4c:	mov	r3, #118	; 0x76
   19f50:	b	19bd8 <__assert_fail@plt+0x8238>
   19f54:	mov	r3, #0
   19f58:	str	r3, [sp, #44]	; 0x2c
   19f5c:	cmp	sl, #2
   19f60:	beq	19f84 <__assert_fail@plt+0x85e4>
   19f64:	ldr	r3, [sp, #28]
   19f68:	ldr	r2, [sp, #32]
   19f6c:	and	r3, r3, r2
   19f70:	tst	r7, r3
   19f74:	bne	1a5f8 <__assert_fail@plt+0x8c58>
   19f78:	mov	r4, #92	; 0x5c
   19f7c:	mov	r3, r4
   19f80:	b	19bd8 <__assert_fail@plt+0x8238>
   19f84:	ldr	r3, [sp, #32]
   19f88:	cmp	r3, #0
   19f8c:	bne	1a780 <__assert_fail@plt+0x8de0>
   19f90:	mov	r5, r3
   19f94:	mov	r4, #92	; 0x5c
   19f98:	eor	r3, r3, #1
   19f9c:	ldr	r2, [sp, #36]	; 0x24
   19fa0:	and	r3, r3, r2
   19fa4:	tst	r3, #255	; 0xff
   19fa8:	beq	19cb0 <__assert_fail@plt+0x8310>
   19fac:	cmp	r9, fp
   19fb0:	movhi	r3, #39	; 0x27
   19fb4:	strbhi	r3, [r8, fp]
   19fb8:	add	r3, fp, #1
   19fbc:	cmp	r9, r3
   19fc0:	movhi	r2, #39	; 0x27
   19fc4:	strbhi	r2, [r8, r3]
   19fc8:	add	fp, fp, #2
   19fcc:	mov	r3, #0
   19fd0:	str	r3, [sp, #36]	; 0x24
   19fd4:	b	19cb0 <__assert_fail@plt+0x8310>
   19fd8:	mov	r3, #110	; 0x6e
   19fdc:	b	19bc0 <__assert_fail@plt+0x8220>
   19fe0:	mov	r3, #110	; 0x6e
   19fe4:	b	19bc0 <__assert_fail@plt+0x8220>
   19fe8:	mov	r3, #0
   19fec:	str	r3, [sp, #44]	; 0x2c
   19ff0:	mov	r3, #110	; 0x6e
   19ff4:	b	19bc0 <__assert_fail@plt+0x8220>
   19ff8:	mov	r8, r9
   19ffc:	mov	r7, #2
   1a000:	b	1a7a0 <__assert_fail@plt+0x8e00>
   1a004:	mov	r3, #97	; 0x61
   1a008:	b	19bd8 <__assert_fail@plt+0x8238>
   1a00c:	mov	r3, #97	; 0x61
   1a010:	b	19bd8 <__assert_fail@plt+0x8238>
   1a014:	mov	r3, #0
   1a018:	str	r3, [sp, #44]	; 0x2c
   1a01c:	ldr	r3, [sp, #24]
   1a020:	cmn	r3, #1
   1a024:	beq	1a050 <__assert_fail@plt+0x86b0>
   1a028:	ldr	r3, [sp, #24]
   1a02c:	subs	r3, r3, #1
   1a030:	movne	r3, #1
   1a034:	cmp	r3, #0
   1a038:	bne	1a5b8 <__assert_fail@plt+0x8c18>
   1a03c:	cmp	r6, #0
   1a040:	beq	1a080 <__assert_fail@plt+0x86e0>
   1a044:	mov	r5, #0
   1a048:	mov	r3, r5
   1a04c:	b	19bec <__assert_fail@plt+0x824c>
   1a050:	ldr	r3, [sp, #48]	; 0x30
   1a054:	ldrb	r3, [r3, #1]
   1a058:	adds	r3, r3, #0
   1a05c:	movne	r3, #1
   1a060:	b	1a034 <__assert_fail@plt+0x8694>
   1a064:	mov	r3, #0
   1a068:	str	r3, [sp, #44]	; 0x2c
   1a06c:	b	1a03c <__assert_fail@plt+0x869c>
   1a070:	mov	r3, #0
   1a074:	str	r3, [sp, #44]	; 0x2c
   1a078:	b	1a080 <__assert_fail@plt+0x86e0>
   1a07c:	ldr	r5, [sp, #44]	; 0x2c
   1a080:	ldr	r3, [sp, #32]
   1a084:	cmp	sl, #2
   1a088:	movne	r3, #0
   1a08c:	andeq	r3, r3, #1
   1a090:	cmp	r3, #0
   1a094:	beq	19bec <__assert_fail@plt+0x824c>
   1a098:	mov	r8, r9
   1a09c:	mov	r7, #2
   1a0a0:	b	1a7a0 <__assert_fail@plt+0x8e00>
   1a0a4:	ldr	r5, [sp, #32]
   1a0a8:	b	1a080 <__assert_fail@plt+0x86e0>
   1a0ac:	mov	r3, #0
   1a0b0:	str	r3, [sp, #44]	; 0x2c
   1a0b4:	mov	r5, r3
   1a0b8:	b	1a080 <__assert_fail@plt+0x86e0>
   1a0bc:	mov	r3, #0
   1a0c0:	str	r3, [sp, #44]	; 0x2c
   1a0c4:	cmp	sl, #2
   1a0c8:	strne	r5, [sp, #68]	; 0x44
   1a0cc:	movne	r3, #0
   1a0d0:	movne	r4, #39	; 0x27
   1a0d4:	bne	19bec <__assert_fail@plt+0x824c>
   1a0d8:	ldr	r3, [sp, #32]
   1a0dc:	cmp	r3, #0
   1a0e0:	bne	1a78c <__assert_fail@plt+0x8dec>
   1a0e4:	ldr	r3, [sp, #72]	; 0x48
   1a0e8:	clz	r3, r3
   1a0ec:	lsr	r3, r3, #5
   1a0f0:	cmp	r9, #0
   1a0f4:	moveq	r3, #0
   1a0f8:	cmp	r3, #0
   1a0fc:	movne	r3, #0
   1a100:	bne	1a128 <__assert_fail@plt+0x8788>
   1a104:	cmp	r9, fp
   1a108:	movhi	r3, #39	; 0x27
   1a10c:	strbhi	r3, [r8, fp]
   1a110:	add	r3, fp, #1
   1a114:	cmp	r9, r3
   1a118:	movhi	r2, #92	; 0x5c
   1a11c:	strbhi	r2, [r8, r3]
   1a120:	mov	r3, r9
   1a124:	ldr	r9, [sp, #72]	; 0x48
   1a128:	add	r2, fp, #2
   1a12c:	cmp	r2, r3
   1a130:	movcc	r1, #39	; 0x27
   1a134:	strbcc	r1, [r8, r2]
   1a138:	add	fp, fp, #3
   1a13c:	str	r5, [sp, #68]	; 0x44
   1a140:	ldr	r2, [sp, #32]
   1a144:	str	r2, [sp, #36]	; 0x24
   1a148:	str	r9, [sp, #72]	; 0x48
   1a14c:	mov	r9, r3
   1a150:	mov	r4, #39	; 0x27
   1a154:	mov	r3, #0
   1a158:	b	19c38 <__assert_fail@plt+0x8298>
   1a15c:	mov	r3, #0
   1a160:	str	r3, [sp, #44]	; 0x2c
   1a164:	ldr	r7, [sp, #76]	; 0x4c
   1a168:	cmp	r7, #1
   1a16c:	bne	1a1a4 <__assert_fail@plt+0x8804>
   1a170:	bl	11778 <__ctype_b_loc@plt>
   1a174:	ldr	r2, [r0]
   1a178:	lsl	r3, r4, #1
   1a17c:	ldrh	r5, [r2, r3]
   1a180:	ubfx	r5, r5, #14, #1
   1a184:	mov	ip, r7
   1a188:	eor	r3, r5, #1
   1a18c:	ldr	r2, [sp, #28]
   1a190:	and	r3, r3, r2
   1a194:	ands	r3, r3, #255	; 0xff
   1a198:	beq	19bec <__assert_fail@plt+0x824c>
   1a19c:	mov	r5, #0
   1a1a0:	b	1a400 <__assert_fail@plt+0x8a60>
   1a1a4:	mov	r2, #0
   1a1a8:	mov	r3, #0
   1a1ac:	strd	r2, [sp, #104]	; 0x68
   1a1b0:	ldr	r3, [sp, #24]
   1a1b4:	cmn	r3, #1
   1a1b8:	beq	1a1dc <__assert_fail@plt+0x883c>
   1a1bc:	mov	r3, #0
   1a1c0:	str	r4, [sp, #88]	; 0x58
   1a1c4:	str	fp, [sp, #92]	; 0x5c
   1a1c8:	str	r8, [sp, #56]	; 0x38
   1a1cc:	mov	r8, r3
   1a1d0:	str	r9, [sp, #84]	; 0x54
   1a1d4:	ldr	r9, [sp, #48]	; 0x30
   1a1d8:	b	1a328 <__assert_fail@plt+0x8988>
   1a1dc:	ldr	r0, [sp, #48]	; 0x30
   1a1e0:	bl	117a8 <strlen@plt>
   1a1e4:	str	r0, [sp, #24]
   1a1e8:	b	1a1bc <__assert_fail@plt+0x881c>
   1a1ec:	mov	r1, fp
   1a1f0:	ldr	r4, [sp, #88]	; 0x58
   1a1f4:	mov	r2, r8
   1a1f8:	mov	ip, r8
   1a1fc:	ldr	fp, [sp, #92]	; 0x5c
   1a200:	ldr	r8, [sp, #56]	; 0x38
   1a204:	ldr	r9, [sp, #84]	; 0x54
   1a208:	ldr	r0, [sp, #24]
   1a20c:	cmp	r7, r0
   1a210:	bcs	1a3c8 <__assert_fail@plt+0x8a28>
   1a214:	ldrb	r3, [r1]
   1a218:	cmp	r3, #0
   1a21c:	beq	1a3d0 <__assert_fail@plt+0x8a30>
   1a220:	mov	r3, r1
   1a224:	add	r2, r2, #1
   1a228:	add	r1, r6, r2
   1a22c:	cmp	r0, r1
   1a230:	bls	1a3d8 <__assert_fail@plt+0x8a38>
   1a234:	ldrb	r1, [r3, #1]!
   1a238:	cmp	r1, #0
   1a23c:	bne	1a224 <__assert_fail@plt+0x8884>
   1a240:	mov	ip, r2
   1a244:	mov	r5, #0
   1a248:	b	1a3f8 <__assert_fail@plt+0x8a58>
   1a24c:	ldr	r3, [sp, #56]	; 0x38
   1a250:	str	r3, [sp, #64]	; 0x40
   1a254:	ldr	r8, [sp, #84]	; 0x54
   1a258:	mov	r7, #2
   1a25c:	b	1a7a0 <__assert_fail@plt+0x8e00>
   1a260:	cmp	r2, r7
   1a264:	beq	1a304 <__assert_fail@plt+0x8964>
   1a268:	ldrb	r3, [r2], #1
   1a26c:	sub	r3, r3, #91	; 0x5b
   1a270:	cmp	r3, #33	; 0x21
   1a274:	ldrls	pc, [pc, r3, lsl #2]
   1a278:	b	1a260 <__assert_fail@plt+0x88c0>
   1a27c:	andeq	sl, r1, ip, asr #4
   1a280:	andeq	sl, r1, ip, asr #4
   1a284:	andeq	sl, r1, r0, ror #4
   1a288:	andeq	sl, r1, ip, asr #4
   1a28c:	andeq	sl, r1, r0, ror #4
   1a290:	andeq	sl, r1, ip, asr #4
   1a294:	andeq	sl, r1, r0, ror #4
   1a298:	andeq	sl, r1, r0, ror #4
   1a29c:	andeq	sl, r1, r0, ror #4
   1a2a0:	andeq	sl, r1, r0, ror #4
   1a2a4:	andeq	sl, r1, r0, ror #4
   1a2a8:	andeq	sl, r1, r0, ror #4
   1a2ac:	andeq	sl, r1, r0, ror #4
   1a2b0:	andeq	sl, r1, r0, ror #4
   1a2b4:	andeq	sl, r1, r0, ror #4
   1a2b8:	andeq	sl, r1, r0, ror #4
   1a2bc:	andeq	sl, r1, r0, ror #4
   1a2c0:	andeq	sl, r1, r0, ror #4
   1a2c4:	andeq	sl, r1, r0, ror #4
   1a2c8:	andeq	sl, r1, r0, ror #4
   1a2cc:	andeq	sl, r1, r0, ror #4
   1a2d0:	andeq	sl, r1, r0, ror #4
   1a2d4:	andeq	sl, r1, r0, ror #4
   1a2d8:	andeq	sl, r1, r0, ror #4
   1a2dc:	andeq	sl, r1, r0, ror #4
   1a2e0:	andeq	sl, r1, r0, ror #4
   1a2e4:	andeq	sl, r1, r0, ror #4
   1a2e8:	andeq	sl, r1, r0, ror #4
   1a2ec:	andeq	sl, r1, r0, ror #4
   1a2f0:	andeq	sl, r1, r0, ror #4
   1a2f4:	andeq	sl, r1, r0, ror #4
   1a2f8:	andeq	sl, r1, r0, ror #4
   1a2fc:	andeq	sl, r1, r0, ror #4
   1a300:	andeq	sl, r1, ip, asr #4
   1a304:	ldr	r0, [sp, #100]	; 0x64
   1a308:	bl	11664 <iswprint@plt>
   1a30c:	cmp	r0, #0
   1a310:	moveq	r5, #0
   1a314:	add	r8, r8, r4
   1a318:	add	r0, sp, #104	; 0x68
   1a31c:	bl	11604 <mbsinit@plt>
   1a320:	cmp	r0, #0
   1a324:	bne	1a394 <__assert_fail@plt+0x89f4>
   1a328:	add	r7, r6, r8
   1a32c:	add	fp, r9, r7
   1a330:	add	r3, sp, #104	; 0x68
   1a334:	ldr	r2, [sp, #24]
   1a338:	sub	r2, r2, r7
   1a33c:	mov	r1, fp
   1a340:	add	r0, sp, #100	; 0x64
   1a344:	bl	1caa4 <__assert_fail@plt+0xb104>
   1a348:	subs	r4, r0, #0
   1a34c:	beq	1a3e4 <__assert_fail@plt+0x8a44>
   1a350:	cmn	r4, #1
   1a354:	beq	1a3ac <__assert_fail@plt+0x8a0c>
   1a358:	cmn	r4, #2
   1a35c:	beq	1a1ec <__assert_fail@plt+0x884c>
   1a360:	ldr	r3, [sp, #32]
   1a364:	cmp	sl, #2
   1a368:	movne	r3, #0
   1a36c:	andeq	r3, r3, #1
   1a370:	cmp	r3, #0
   1a374:	beq	1a304 <__assert_fail@plt+0x8964>
   1a378:	cmp	r4, #1
   1a37c:	bls	1a304 <__assert_fail@plt+0x8964>
   1a380:	add	r2, r7, #1
   1a384:	add	r2, r9, r2
   1a388:	add	r3, r9, r4
   1a38c:	add	r7, r3, r7
   1a390:	b	1a268 <__assert_fail@plt+0x88c8>
   1a394:	ldr	r4, [sp, #88]	; 0x58
   1a398:	mov	ip, r8
   1a39c:	ldr	fp, [sp, #92]	; 0x5c
   1a3a0:	ldr	r8, [sp, #56]	; 0x38
   1a3a4:	ldr	r9, [sp, #84]	; 0x54
   1a3a8:	b	1a3f8 <__assert_fail@plt+0x8a58>
   1a3ac:	ldr	r4, [sp, #88]	; 0x58
   1a3b0:	mov	ip, r8
   1a3b4:	ldr	fp, [sp, #92]	; 0x5c
   1a3b8:	ldr	r8, [sp, #56]	; 0x38
   1a3bc:	ldr	r9, [sp, #84]	; 0x54
   1a3c0:	mov	r5, #0
   1a3c4:	b	1a3f8 <__assert_fail@plt+0x8a58>
   1a3c8:	mov	r5, #0
   1a3cc:	b	1a3f8 <__assert_fail@plt+0x8a58>
   1a3d0:	mov	r5, #0
   1a3d4:	b	1a3f8 <__assert_fail@plt+0x8a58>
   1a3d8:	mov	ip, r2
   1a3dc:	mov	r5, #0
   1a3e0:	b	1a3f8 <__assert_fail@plt+0x8a58>
   1a3e4:	ldr	r4, [sp, #88]	; 0x58
   1a3e8:	mov	ip, r8
   1a3ec:	ldr	fp, [sp, #92]	; 0x5c
   1a3f0:	ldr	r8, [sp, #56]	; 0x38
   1a3f4:	ldr	r9, [sp, #84]	; 0x54
   1a3f8:	cmp	ip, #1
   1a3fc:	bls	1a188 <__assert_fail@plt+0x87e8>
   1a400:	add	lr, r6, ip
   1a404:	ldr	r3, [sp, #48]	; 0x30
   1a408:	add	r1, r3, r6
   1a40c:	mov	r3, #0
   1a410:	eor	r0, r5, #1
   1a414:	ldr	r2, [sp, #28]
   1a418:	and	r0, r0, r2
   1a41c:	uxtb	r0, r0
   1a420:	str	r0, [sp, #56]	; 0x38
   1a424:	mov	r7, #92	; 0x5c
   1a428:	ldr	ip, [sp, #36]	; 0x24
   1a42c:	str	r5, [sp, #84]	; 0x54
   1a430:	ldr	r2, [sp, #44]	; 0x2c
   1a434:	b	1a4a4 <__assert_fail@plt+0x8b04>
   1a438:	cmp	r2, #0
   1a43c:	beq	1a44c <__assert_fail@plt+0x8aac>
   1a440:	cmp	r9, fp
   1a444:	strbhi	r7, [r8, fp]
   1a448:	add	fp, fp, #1
   1a44c:	add	r5, r6, #1
   1a450:	cmp	r5, lr
   1a454:	bcs	1a560 <__assert_fail@plt+0x8bc0>
   1a458:	eor	r2, r3, #1
   1a45c:	and	r2, r2, ip
   1a460:	ands	r2, r2, #255	; 0xff
   1a464:	beq	1a57c <__assert_fail@plt+0x8bdc>
   1a468:	cmp	r9, fp
   1a46c:	movhi	r2, #39	; 0x27
   1a470:	strbhi	r2, [r8, fp]
   1a474:	add	r2, fp, #1
   1a478:	cmp	r9, r2
   1a47c:	movhi	ip, #39	; 0x27
   1a480:	strbhi	ip, [r8, r2]
   1a484:	add	fp, fp, #2
   1a488:	ldr	ip, [sp, #56]	; 0x38
   1a48c:	mov	r2, ip
   1a490:	mov	r6, r5
   1a494:	cmp	r9, fp
   1a498:	strbhi	r4, [r8, fp]
   1a49c:	add	fp, fp, #1
   1a4a0:	ldrb	r4, [r1, #1]!
   1a4a4:	cmp	r0, #0
   1a4a8:	beq	1a438 <__assert_fail@plt+0x8a98>
   1a4ac:	ldr	r3, [sp, #32]
   1a4b0:	cmp	r3, #0
   1a4b4:	bne	1a748 <__assert_fail@plt+0x8da8>
   1a4b8:	eor	r3, ip, #1
   1a4bc:	cmp	sl, #2
   1a4c0:	movne	r3, #0
   1a4c4:	andeq	r3, r3, #1
   1a4c8:	cmp	r3, #0
   1a4cc:	beq	1a504 <__assert_fail@plt+0x8b64>
   1a4d0:	cmp	r9, fp
   1a4d4:	movhi	ip, #39	; 0x27
   1a4d8:	strbhi	ip, [r8, fp]
   1a4dc:	add	ip, fp, #1
   1a4e0:	cmp	r9, ip
   1a4e4:	movhi	r5, #36	; 0x24
   1a4e8:	strbhi	r5, [r8, ip]
   1a4ec:	add	ip, fp, #2
   1a4f0:	cmp	r9, ip
   1a4f4:	movhi	r5, #39	; 0x27
   1a4f8:	strbhi	r5, [r8, ip]
   1a4fc:	add	fp, fp, #3
   1a500:	mov	ip, r3
   1a504:	cmp	r9, fp
   1a508:	strbhi	r7, [r8, fp]
   1a50c:	add	r3, fp, #1
   1a510:	cmp	r9, r3
   1a514:	bls	1a524 <__assert_fail@plt+0x8b84>
   1a518:	lsr	r5, r4, #6
   1a51c:	add	r5, r5, #48	; 0x30
   1a520:	strb	r5, [r8, r3]
   1a524:	add	r3, fp, #2
   1a528:	cmp	r9, r3
   1a52c:	bls	1a53c <__assert_fail@plt+0x8b9c>
   1a530:	ubfx	r5, r4, #3, #3
   1a534:	add	r5, r5, #48	; 0x30
   1a538:	strb	r5, [r8, r3]
   1a53c:	add	fp, fp, #3
   1a540:	and	r4, r4, #7
   1a544:	add	r4, r4, #48	; 0x30
   1a548:	add	r5, r6, #1
   1a54c:	cmp	r5, lr
   1a550:	bcs	1a56c <__assert_fail@plt+0x8bcc>
   1a554:	ldr	r3, [sp, #56]	; 0x38
   1a558:	mov	r6, r5
   1a55c:	b	1a494 <__assert_fail@plt+0x8af4>
   1a560:	str	ip, [sp, #36]	; 0x24
   1a564:	ldr	r5, [sp, #84]	; 0x54
   1a568:	b	19f98 <__assert_fail@plt+0x85f8>
   1a56c:	str	ip, [sp, #36]	; 0x24
   1a570:	ldr	r5, [sp, #84]	; 0x54
   1a574:	mov	r3, r0
   1a578:	b	19f98 <__assert_fail@plt+0x85f8>
   1a57c:	mov	r6, r5
   1a580:	b	1a494 <__assert_fail@plt+0x8af4>
   1a584:	ldr	r3, [sp, #44]	; 0x2c
   1a588:	b	19bec <__assert_fail@plt+0x824c>
   1a58c:	mov	r5, #0
   1a590:	mov	r3, r5
   1a594:	mov	r4, #63	; 0x3f
   1a598:	b	19bec <__assert_fail@plt+0x824c>
   1a59c:	mov	r5, #0
   1a5a0:	mov	r3, r5
   1a5a4:	mov	r4, #63	; 0x3f
   1a5a8:	b	19bec <__assert_fail@plt+0x824c>
   1a5ac:	mov	r5, #0
   1a5b0:	mov	r3, r5
   1a5b4:	b	19bec <__assert_fail@plt+0x824c>
   1a5b8:	mov	r5, #0
   1a5bc:	mov	r3, r5
   1a5c0:	b	19bec <__assert_fail@plt+0x824c>
   1a5c4:	ldr	r5, [sp, #44]	; 0x2c
   1a5c8:	ldr	r3, [sp, #32]
   1a5cc:	b	19bec <__assert_fail@plt+0x824c>
   1a5d0:	ldr	r5, [sp, #44]	; 0x2c
   1a5d4:	mov	r3, #0
   1a5d8:	str	r3, [sp, #44]	; 0x2c
   1a5dc:	b	19bec <__assert_fail@plt+0x824c>
   1a5e0:	mov	r4, r3
   1a5e4:	mov	r5, #0
   1a5e8:	b	19c44 <__assert_fail@plt+0x82a4>
   1a5ec:	mov	r5, #0
   1a5f0:	mov	r4, #97	; 0x61
   1a5f4:	b	19c44 <__assert_fail@plt+0x82a4>
   1a5f8:	mov	r5, #0
   1a5fc:	mov	r3, r5
   1a600:	mov	r4, #92	; 0x5c
   1a604:	b	19f98 <__assert_fail@plt+0x85f8>
   1a608:	ldr	r3, [sp, #48]	; 0x30
   1a60c:	ldrb	r5, [r3, r6]
   1a610:	adds	r5, r5, #0
   1a614:	movne	r5, #1
   1a618:	b	19ce8 <__assert_fail@plt+0x8348>
   1a61c:	cmp	sl, #2
   1a620:	movne	r3, #0
   1a624:	moveq	r3, #1
   1a628:	ldr	r1, [sp, #32]
   1a62c:	cmp	fp, #0
   1a630:	andeq	r2, r3, r1
   1a634:	movne	r2, #0
   1a638:	cmp	r2, #0
   1a63c:	bne	1a75c <__assert_fail@plt+0x8dbc>
   1a640:	eor	r2, r1, #1
   1a644:	uxtb	r2, r2
   1a648:	and	r3, r3, r2
   1a64c:	ldr	r1, [sp, #68]	; 0x44
   1a650:	ands	r3, r1, r3
   1a654:	beq	1a6e8 <__assert_fail@plt+0x8d48>
   1a658:	ldr	r2, [sp, #40]	; 0x28
   1a65c:	cmp	r2, #0
   1a660:	bne	1a698 <__assert_fail@plt+0x8cf8>
   1a664:	ldr	r2, [sp, #72]	; 0x48
   1a668:	adds	r2, r2, #0
   1a66c:	movne	r2, #1
   1a670:	cmp	r9, #0
   1a674:	movne	r2, #0
   1a678:	str	r2, [sp, #68]	; 0x44
   1a67c:	mov	sl, #2
   1a680:	ldr	r1, [sp, #40]	; 0x28
   1a684:	str	r1, [sp, #32]
   1a688:	cmp	r2, #0
   1a68c:	beq	1a6dc <__assert_fail@plt+0x8d3c>
   1a690:	ldr	r9, [sp, #72]	; 0x48
   1a694:	b	193f0 <__assert_fail@plt+0x7a50>
   1a698:	ldr	r3, [sp, #168]	; 0xa8
   1a69c:	str	r3, [sp, #16]
   1a6a0:	ldr	r3, [sp, #164]	; 0xa4
   1a6a4:	str	r3, [sp, #12]
   1a6a8:	ldr	r3, [sp, #160]	; 0xa0
   1a6ac:	str	r3, [sp, #8]
   1a6b0:	ldr	r3, [sp, #156]	; 0x9c
   1a6b4:	str	r3, [sp, #4]
   1a6b8:	mov	r3, #5
   1a6bc:	str	r3, [sp]
   1a6c0:	ldr	r3, [sp, #24]
   1a6c4:	ldr	r2, [sp, #48]	; 0x30
   1a6c8:	ldr	r1, [sp, #72]	; 0x48
   1a6cc:	ldr	r0, [sp, #64]	; 0x40
   1a6d0:	bl	19378 <__assert_fail@plt+0x79d8>
   1a6d4:	mov	fp, r0
   1a6d8:	b	1a7f8 <__assert_fail@plt+0x8e58>
   1a6dc:	mov	r8, r9
   1a6e0:	mov	r2, r3
   1a6e4:	b	1a6ec <__assert_fail@plt+0x8d4c>
   1a6e8:	mov	r8, r9
   1a6ec:	ldr	r3, [sp, #60]	; 0x3c
   1a6f0:	cmp	r3, #0
   1a6f4:	moveq	r2, #0
   1a6f8:	andne	r2, r2, #1
   1a6fc:	cmp	r2, #0
   1a700:	beq	1a730 <__assert_fail@plt+0x8d90>
   1a704:	mov	r2, r3
   1a708:	ldrb	r3, [r3]
   1a70c:	cmp	r3, #0
   1a710:	beq	1a730 <__assert_fail@plt+0x8d90>
   1a714:	ldr	r1, [sp, #64]	; 0x40
   1a718:	cmp	r8, fp
   1a71c:	strbhi	r3, [r1, fp]
   1a720:	add	fp, fp, #1
   1a724:	ldrb	r3, [r2, #1]!
   1a728:	cmp	r3, #0
   1a72c:	bne	1a718 <__assert_fail@plt+0x8d78>
   1a730:	cmp	r8, fp
   1a734:	bls	1a7f8 <__assert_fail@plt+0x8e58>
   1a738:	mov	r3, #0
   1a73c:	ldr	r2, [sp, #64]	; 0x40
   1a740:	strb	r3, [r2, fp]
   1a744:	b	1a7f8 <__assert_fail@plt+0x8e58>
   1a748:	mov	r8, r9
   1a74c:	mov	r7, sl
   1a750:	ldr	r3, [sp, #32]
   1a754:	str	r3, [sp, #28]
   1a758:	b	1a7a0 <__assert_fail@plt+0x8e00>
   1a75c:	mov	r8, r9
   1a760:	mov	r7, #2
   1a764:	b	1a7a0 <__assert_fail@plt+0x8e00>
   1a768:	mov	r8, r9
   1a76c:	mov	r7, sl
   1a770:	b	1a7a0 <__assert_fail@plt+0x8e00>
   1a774:	mov	r8, r9
   1a778:	mov	r7, sl
   1a77c:	b	1a7a0 <__assert_fail@plt+0x8e00>
   1a780:	mov	r8, r9
   1a784:	mov	r7, sl
   1a788:	b	1a7a0 <__assert_fail@plt+0x8e00>
   1a78c:	mov	r8, r9
   1a790:	mov	r7, sl
   1a794:	b	1a7a0 <__assert_fail@plt+0x8e00>
   1a798:	mov	r8, r9
   1a79c:	mov	r7, sl
   1a7a0:	ldr	r3, [sp, #28]
   1a7a4:	cmp	r7, #2
   1a7a8:	movne	r3, #0
   1a7ac:	andeq	r3, r3, #1
   1a7b0:	cmp	r3, #0
   1a7b4:	movne	r7, #4
   1a7b8:	ldr	r3, [sp, #168]	; 0xa8
   1a7bc:	str	r3, [sp, #16]
   1a7c0:	ldr	r3, [sp, #164]	; 0xa4
   1a7c4:	str	r3, [sp, #12]
   1a7c8:	mov	r3, #0
   1a7cc:	str	r3, [sp, #8]
   1a7d0:	ldr	r3, [sp, #156]	; 0x9c
   1a7d4:	bic	r3, r3, #2
   1a7d8:	str	r3, [sp, #4]
   1a7dc:	str	r7, [sp]
   1a7e0:	ldr	r3, [sp, #24]
   1a7e4:	ldr	r2, [sp, #48]	; 0x30
   1a7e8:	mov	r1, r8
   1a7ec:	ldr	r0, [sp, #64]	; 0x40
   1a7f0:	bl	19378 <__assert_fail@plt+0x79d8>
   1a7f4:	mov	fp, r0
   1a7f8:	mov	r0, fp
   1a7fc:	add	sp, sp, #116	; 0x74
   1a800:	ldrd	r4, [sp]
   1a804:	ldrd	r6, [sp, #8]
   1a808:	ldrd	r8, [sp, #16]
   1a80c:	ldrd	sl, [sp, #24]
   1a810:	add	sp, sp, #32
   1a814:	pop	{pc}		; (ldr pc, [sp], #4)
   1a818:	mov	r8, r9
   1a81c:	mov	r7, sl
   1a820:	b	1a7b8 <__assert_fail@plt+0x8e18>
   1a824:	add	fp, fp, #4
   1a828:	str	r3, [sp, #36]	; 0x24
   1a82c:	mov	r5, #0
   1a830:	mov	r4, #48	; 0x30
   1a834:	b	19bec <__assert_fail@plt+0x824c>
   1a838:	mov	r3, #1
   1a83c:	str	r3, [sp, #32]
   1a840:	str	r3, [sp, #28]
   1a844:	str	r3, [sp, #52]	; 0x34
   1a848:	movw	r3, #56812	; 0xddec
   1a84c:	movt	r3, #2
   1a850:	str	r3, [sp, #60]	; 0x3c
   1a854:	mov	fp, #0
   1a858:	mov	sl, #5
   1a85c:	b	19450 <__assert_fail@plt+0x7ab0>
   1a860:	ldr	r3, [sp, #48]	; 0x30
   1a864:	ldrb	r4, [r3, r6]
   1a868:	cmp	r4, #126	; 0x7e
   1a86c:	ldrls	pc, [pc, r4, lsl #2]
   1a870:	b	1a15c <__assert_fail@plt+0x87bc>
   1a874:	andeq	r9, r1, r4, ror #17
   1a878:	andeq	sl, r1, ip, asr r1
   1a87c:	andeq	sl, r1, ip, asr r1
   1a880:	andeq	sl, r1, ip, asr r1
   1a884:	andeq	sl, r1, ip, asr r1
   1a888:	andeq	sl, r1, ip, asr r1
   1a88c:	andeq	sl, r1, ip, asr r1
   1a890:	andeq	sl, r1, ip, ror #11
   1a894:	andeq	r9, r1, r8, lsl #23
   1a898:	andeq	r9, r1, ip, lsr #30
   1a89c:	andeq	r9, r1, r8, ror #31
   1a8a0:	andeq	r9, r1, r0, asr #30
   1a8a4:	muleq	r1, ip, fp
   1a8a8:			; <UNDEFINED> instruction: 0x00019bb0
   1a8ac:	andeq	sl, r1, ip, asr r1
   1a8b0:	andeq	sl, r1, ip, asr r1
   1a8b4:	andeq	sl, r1, ip, asr r1
   1a8b8:	andeq	sl, r1, ip, asr r1
   1a8bc:	andeq	sl, r1, ip, asr r1
   1a8c0:	andeq	sl, r1, ip, asr r1
   1a8c4:	andeq	sl, r1, ip, asr r1
   1a8c8:	andeq	sl, r1, ip, asr r1
   1a8cc:	andeq	sl, r1, ip, asr r1
   1a8d0:	andeq	sl, r1, ip, asr r1
   1a8d4:	andeq	sl, r1, ip, asr r1
   1a8d8:	andeq	sl, r1, ip, asr r1
   1a8dc:	andeq	sl, r1, ip, asr r1
   1a8e0:	andeq	sl, r1, ip, asr r1
   1a8e4:	andeq	sl, r1, ip, asr r1
   1a8e8:	andeq	sl, r1, ip, asr r1
   1a8ec:	andeq	sl, r1, ip, asr r1
   1a8f0:	andeq	sl, r1, ip, asr r1
   1a8f4:	andeq	sl, r1, r0, ror r0
   1a8f8:	andeq	sl, r1, ip, lsr #1
   1a8fc:	andeq	sl, r1, ip, lsr #1
   1a900:	andeq	sl, r1, r4, rrx
   1a904:	andeq	sl, r1, ip, lsr #1
   1a908:	ldrdeq	sl, [r1], -r0
   1a90c:	andeq	sl, r1, ip, lsr #1
   1a910:	strheq	sl, [r1], -ip
   1a914:	andeq	sl, r1, ip, lsr #1
   1a918:	andeq	sl, r1, ip, lsr #1
   1a91c:	andeq	sl, r1, ip, lsr #1
   1a920:	ldrdeq	sl, [r1], -r0
   1a924:	ldrdeq	sl, [r1], -r0
   1a928:	ldrdeq	sl, [r1], -r0
   1a92c:	ldrdeq	sl, [r1], -r0
   1a930:	ldrdeq	sl, [r1], -r0
   1a934:	ldrdeq	sl, [r1], -r0
   1a938:	ldrdeq	sl, [r1], -r0
   1a93c:	ldrdeq	sl, [r1], -r0
   1a940:	ldrdeq	sl, [r1], -r0
   1a944:	ldrdeq	sl, [r1], -r0
   1a948:	ldrdeq	sl, [r1], -r0
   1a94c:	ldrdeq	sl, [r1], -r0
   1a950:	ldrdeq	sl, [r1], -r0
   1a954:	ldrdeq	sl, [r1], -r0
   1a958:	ldrdeq	sl, [r1], -r0
   1a95c:	ldrdeq	sl, [r1], -r0
   1a960:	andeq	sl, r1, ip, lsr #1
   1a964:	andeq	sl, r1, ip, lsr #1
   1a968:	andeq	sl, r1, ip, lsr #1
   1a96c:	andeq	sl, r1, ip, lsr #1
   1a970:	andeq	r9, r1, ip, lsl sl
   1a974:	andeq	sl, r1, ip, asr r1
   1a978:	ldrdeq	sl, [r1], -r0
   1a97c:	ldrdeq	sl, [r1], -r0
   1a980:	ldrdeq	sl, [r1], -r0
   1a984:	ldrdeq	sl, [r1], -r0
   1a988:	ldrdeq	sl, [r1], -r0
   1a98c:	ldrdeq	sl, [r1], -r0
   1a990:	ldrdeq	sl, [r1], -r0
   1a994:	ldrdeq	sl, [r1], -r0
   1a998:	ldrdeq	sl, [r1], -r0
   1a99c:	ldrdeq	sl, [r1], -r0
   1a9a0:	ldrdeq	sl, [r1], -r0
   1a9a4:	ldrdeq	sl, [r1], -r0
   1a9a8:	ldrdeq	sl, [r1], -r0
   1a9ac:	ldrdeq	sl, [r1], -r0
   1a9b0:	ldrdeq	sl, [r1], -r0
   1a9b4:	ldrdeq	sl, [r1], -r0
   1a9b8:	ldrdeq	sl, [r1], -r0
   1a9bc:	ldrdeq	sl, [r1], -r0
   1a9c0:	ldrdeq	sl, [r1], -r0
   1a9c4:	ldrdeq	sl, [r1], -r0
   1a9c8:	ldrdeq	sl, [r1], -r0
   1a9cc:	ldrdeq	sl, [r1], -r0
   1a9d0:	ldrdeq	sl, [r1], -r0
   1a9d4:	ldrdeq	sl, [r1], -r0
   1a9d8:	ldrdeq	sl, [r1], -r0
   1a9dc:	ldrdeq	sl, [r1], -r0
   1a9e0:	andeq	sl, r1, ip, lsr #1
   1a9e4:	andeq	r9, r1, r4, asr pc
   1a9e8:	ldrdeq	sl, [r1], -r0
   1a9ec:	andeq	sl, r1, ip, lsr #1
   1a9f0:	ldrdeq	sl, [r1], -r0
   1a9f4:	andeq	sl, r1, ip, lsr #1
   1a9f8:	ldrdeq	sl, [r1], -r0
   1a9fc:	ldrdeq	sl, [r1], -r0
   1aa00:	ldrdeq	sl, [r1], -r0
   1aa04:	ldrdeq	sl, [r1], -r0
   1aa08:	ldrdeq	sl, [r1], -r0
   1aa0c:	ldrdeq	sl, [r1], -r0
   1aa10:	ldrdeq	sl, [r1], -r0
   1aa14:	ldrdeq	sl, [r1], -r0
   1aa18:	ldrdeq	sl, [r1], -r0
   1aa1c:	ldrdeq	sl, [r1], -r0
   1aa20:	ldrdeq	sl, [r1], -r0
   1aa24:	ldrdeq	sl, [r1], -r0
   1aa28:	ldrdeq	sl, [r1], -r0
   1aa2c:	ldrdeq	sl, [r1], -r0
   1aa30:	ldrdeq	sl, [r1], -r0
   1aa34:	ldrdeq	sl, [r1], -r0
   1aa38:	ldrdeq	sl, [r1], -r0
   1aa3c:	ldrdeq	sl, [r1], -r0
   1aa40:	ldrdeq	sl, [r1], -r0
   1aa44:	ldrdeq	sl, [r1], -r0
   1aa48:	ldrdeq	sl, [r1], -r0
   1aa4c:	ldrdeq	sl, [r1], -r0
   1aa50:	ldrdeq	sl, [r1], -r0
   1aa54:	ldrdeq	sl, [r1], -r0
   1aa58:	ldrdeq	sl, [r1], -r0
   1aa5c:	ldrdeq	sl, [r1], -r0
   1aa60:	andeq	sl, r1, r4, lsl r0
   1aa64:	andeq	sl, r1, ip, lsr #1
   1aa68:	andeq	sl, r1, r4, lsl r0
   1aa6c:	andeq	sl, r1, r4, rrx
   1aa70:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1aa74:	strd	r6, [sp, #8]
   1aa78:	strd	r8, [sp, #16]
   1aa7c:	strd	sl, [sp, #24]
   1aa80:	str	lr, [sp, #32]
   1aa84:	sub	sp, sp, #52	; 0x34
   1aa88:	mov	r5, r0
   1aa8c:	str	r1, [sp, #24]
   1aa90:	str	r2, [sp, #28]
   1aa94:	mov	r4, r3
   1aa98:	bl	117d8 <__errno_location@plt>
   1aa9c:	str	r0, [sp, #32]
   1aaa0:	ldr	r3, [r0]
   1aaa4:	str	r3, [sp, #36]	; 0x24
   1aaa8:	movw	r3, #61888	; 0xf1c0
   1aaac:	movt	r3, #3
   1aab0:	ldr	r6, [r3]
   1aab4:	cmn	r5, #-2147483647	; 0x80000001
   1aab8:	movne	r3, #0
   1aabc:	moveq	r3, #1
   1aac0:	orrs	r3, r3, r5, lsr #31
   1aac4:	bne	1ac28 <__assert_fail@plt+0x9288>
   1aac8:	movw	r3, #61888	; 0xf1c0
   1aacc:	movt	r3, #3
   1aad0:	ldr	r2, [r3, #4]
   1aad4:	cmp	r2, r5
   1aad8:	bgt	1ab48 <__assert_fail@plt+0x91a8>
   1aadc:	str	r2, [sp, #44]	; 0x2c
   1aae0:	add	r3, r3, #8
   1aae4:	cmp	r6, r3
   1aae8:	beq	1ac2c <__assert_fail@plt+0x928c>
   1aaec:	sub	r2, r5, r2
   1aaf0:	mov	r3, #8
   1aaf4:	str	r3, [sp]
   1aaf8:	mvn	r3, #-2147483648	; 0x80000000
   1aafc:	add	r2, r2, #1
   1ab00:	add	r1, sp, #44	; 0x2c
   1ab04:	mov	r0, r6
   1ab08:	bl	1bc4c <__assert_fail@plt+0xa2ac>
   1ab0c:	mov	r6, r0
   1ab10:	movw	r3, #61888	; 0xf1c0
   1ab14:	movt	r3, #3
   1ab18:	str	r0, [r3]
   1ab1c:	movw	r7, #61888	; 0xf1c0
   1ab20:	movt	r7, #3
   1ab24:	ldr	r0, [r7, #4]
   1ab28:	ldr	r2, [sp, #44]	; 0x2c
   1ab2c:	sub	r2, r2, r0
   1ab30:	lsl	r2, r2, #3
   1ab34:	mov	r1, #0
   1ab38:	add	r0, r6, r0, lsl #3
   1ab3c:	bl	11814 <memset@plt>
   1ab40:	ldr	r3, [sp, #44]	; 0x2c
   1ab44:	str	r3, [r7, #4]
   1ab48:	add	fp, r6, r5, lsl #3
   1ab4c:	ldr	r8, [r6, r5, lsl #3]
   1ab50:	ldr	r7, [fp, #4]
   1ab54:	ldr	r3, [r4, #4]
   1ab58:	orr	r9, r3, #1
   1ab5c:	add	sl, r4, #8
   1ab60:	ldr	r3, [r4, #44]	; 0x2c
   1ab64:	str	r3, [sp, #16]
   1ab68:	ldr	r3, [r4, #40]	; 0x28
   1ab6c:	str	r3, [sp, #12]
   1ab70:	str	sl, [sp, #8]
   1ab74:	str	r9, [sp, #4]
   1ab78:	ldr	r3, [r4]
   1ab7c:	str	r3, [sp]
   1ab80:	ldr	r3, [sp, #28]
   1ab84:	ldr	r2, [sp, #24]
   1ab88:	mov	r1, r8
   1ab8c:	mov	r0, r7
   1ab90:	bl	19378 <__assert_fail@plt+0x79d8>
   1ab94:	cmp	r8, r0
   1ab98:	bhi	1abfc <__assert_fail@plt+0x925c>
   1ab9c:	add	r8, r0, #1
   1aba0:	str	r8, [r6, r5, lsl #3]
   1aba4:	movw	r3, #62112	; 0xf2a0
   1aba8:	movt	r3, #3
   1abac:	cmp	r7, r3
   1abb0:	beq	1abbc <__assert_fail@plt+0x921c>
   1abb4:	mov	r0, r7
   1abb8:	bl	1c948 <__assert_fail@plt+0xafa8>
   1abbc:	mov	r0, r8
   1abc0:	bl	1ba48 <__assert_fail@plt+0xa0a8>
   1abc4:	mov	r7, r0
   1abc8:	str	r0, [fp, #4]
   1abcc:	ldr	r3, [r4, #44]	; 0x2c
   1abd0:	str	r3, [sp, #16]
   1abd4:	ldr	r3, [r4, #40]	; 0x28
   1abd8:	str	r3, [sp, #12]
   1abdc:	str	sl, [sp, #8]
   1abe0:	str	r9, [sp, #4]
   1abe4:	ldr	r3, [r4]
   1abe8:	str	r3, [sp]
   1abec:	ldr	r3, [sp, #28]
   1abf0:	ldr	r2, [sp, #24]
   1abf4:	mov	r1, r8
   1abf8:	bl	19378 <__assert_fail@plt+0x79d8>
   1abfc:	ldr	r3, [sp, #32]
   1ac00:	ldr	r2, [sp, #36]	; 0x24
   1ac04:	str	r2, [r3]
   1ac08:	mov	r0, r7
   1ac0c:	add	sp, sp, #52	; 0x34
   1ac10:	ldrd	r4, [sp]
   1ac14:	ldrd	r6, [sp, #8]
   1ac18:	ldrd	r8, [sp, #16]
   1ac1c:	ldrd	sl, [sp, #24]
   1ac20:	add	sp, sp, #32
   1ac24:	pop	{pc}		; (ldr pc, [sp], #4)
   1ac28:	bl	11964 <abort@plt>
   1ac2c:	sub	r2, r5, r2
   1ac30:	mov	r3, #8
   1ac34:	str	r3, [sp]
   1ac38:	mvn	r3, #-2147483648	; 0x80000000
   1ac3c:	add	r2, r2, #1
   1ac40:	add	r1, sp, #44	; 0x2c
   1ac44:	mov	r0, #0
   1ac48:	bl	1bc4c <__assert_fail@plt+0xa2ac>
   1ac4c:	mov	r6, r0
   1ac50:	movw	r3, #61888	; 0xf1c0
   1ac54:	movt	r3, #3
   1ac58:	str	r0, [r3]
   1ac5c:	ldrd	r2, [r3, #8]
   1ac60:	strd	r2, [r0]
   1ac64:	b	1ab1c <__assert_fail@plt+0x917c>
   1ac68:	strd	r4, [sp, #-16]!
   1ac6c:	str	r6, [sp, #8]
   1ac70:	str	lr, [sp, #12]
   1ac74:	mov	r4, r0
   1ac78:	bl	117d8 <__errno_location@plt>
   1ac7c:	mov	r5, r0
   1ac80:	ldr	r6, [r0]
   1ac84:	cmp	r4, #0
   1ac88:	ldr	r3, [pc, #32]	; 1acb0 <__assert_fail@plt+0x9310>
   1ac8c:	moveq	r4, r3
   1ac90:	mov	r1, #48	; 0x30
   1ac94:	mov	r0, r4
   1ac98:	bl	1bdbc <__assert_fail@plt+0xa41c>
   1ac9c:	str	r6, [r5]
   1aca0:	ldrd	r4, [sp]
   1aca4:	ldr	r6, [sp, #8]
   1aca8:	add	sp, sp, #12
   1acac:	pop	{pc}		; (ldr pc, [sp], #4)
   1acb0:	andeq	pc, r3, r0, lsr #7
   1acb4:	subs	r3, r0, #0
   1acb8:	ldr	r2, [pc, #8]	; 1acc8 <__assert_fail@plt+0x9328>
   1acbc:	moveq	r3, r2
   1acc0:	ldr	r0, [r3]
   1acc4:	bx	lr
   1acc8:	andeq	pc, r3, r0, lsr #7
   1accc:	subs	r3, r0, #0
   1acd0:	ldr	r2, [pc, #8]	; 1ace0 <__assert_fail@plt+0x9340>
   1acd4:	moveq	r3, r2
   1acd8:	str	r1, [r3]
   1acdc:	bx	lr
   1ace0:	andeq	pc, r3, r0, lsr #7
   1ace4:	push	{lr}		; (str lr, [sp, #-4]!)
   1ace8:	subs	r3, r0, #0
   1acec:	ldr	r0, [pc, #44]	; 1ad20 <__assert_fail@plt+0x9380>
   1acf0:	moveq	r3, r0
   1acf4:	add	r3, r3, #8
   1acf8:	lsr	lr, r1, #5
   1acfc:	and	r1, r1, #31
   1ad00:	ldr	ip, [r3, lr, lsl #2]
   1ad04:	lsr	r0, ip, r1
   1ad08:	eor	r2, r2, r0
   1ad0c:	and	r2, r2, #1
   1ad10:	eor	r1, ip, r2, lsl r1
   1ad14:	str	r1, [r3, lr, lsl #2]
   1ad18:	and	r0, r0, #1
   1ad1c:	pop	{pc}		; (ldr pc, [sp], #4)
   1ad20:	andeq	pc, r3, r0, lsr #7
   1ad24:	subs	r3, r0, #0
   1ad28:	ldr	r2, [pc, #12]	; 1ad3c <__assert_fail@plt+0x939c>
   1ad2c:	moveq	r3, r2
   1ad30:	ldr	r0, [r3, #4]
   1ad34:	str	r1, [r3, #4]
   1ad38:	bx	lr
   1ad3c:	andeq	pc, r3, r0, lsr #7
   1ad40:	subs	r3, r0, #0
   1ad44:	ldr	r0, [pc, #44]	; 1ad78 <__assert_fail@plt+0x93d8>
   1ad48:	moveq	r3, r0
   1ad4c:	mov	r0, #10
   1ad50:	str	r0, [r3]
   1ad54:	cmp	r2, #0
   1ad58:	cmpne	r1, #0
   1ad5c:	beq	1ad6c <__assert_fail@plt+0x93cc>
   1ad60:	str	r1, [r3, #40]	; 0x28
   1ad64:	str	r2, [r3, #44]	; 0x2c
   1ad68:	bx	lr
   1ad6c:	str	r4, [sp, #-8]!
   1ad70:	str	lr, [sp, #4]
   1ad74:	bl	11964 <abort@plt>
   1ad78:	andeq	pc, r3, r0, lsr #7
   1ad7c:	strd	r4, [sp, #-32]!	; 0xffffffe0
   1ad80:	strd	r6, [sp, #8]
   1ad84:	strd	r8, [sp, #16]
   1ad88:	str	sl, [sp, #24]
   1ad8c:	str	lr, [sp, #28]
   1ad90:	sub	sp, sp, #24
   1ad94:	mov	r7, r0
   1ad98:	mov	r8, r1
   1ad9c:	mov	r9, r2
   1ada0:	mov	sl, r3
   1ada4:	ldr	r4, [sp, #56]	; 0x38
   1ada8:	cmp	r4, #0
   1adac:	ldr	r3, [pc, #104]	; 1ae1c <__assert_fail@plt+0x947c>
   1adb0:	moveq	r4, r3
   1adb4:	bl	117d8 <__errno_location@plt>
   1adb8:	mov	r5, r0
   1adbc:	ldr	r6, [r0]
   1adc0:	ldr	r3, [r4, #44]	; 0x2c
   1adc4:	str	r3, [sp, #16]
   1adc8:	ldr	r3, [r4, #40]	; 0x28
   1adcc:	str	r3, [sp, #12]
   1add0:	add	r3, r4, #8
   1add4:	str	r3, [sp, #8]
   1add8:	ldr	r3, [r4, #4]
   1addc:	str	r3, [sp, #4]
   1ade0:	ldr	r3, [r4]
   1ade4:	str	r3, [sp]
   1ade8:	mov	r3, sl
   1adec:	mov	r2, r9
   1adf0:	mov	r1, r8
   1adf4:	mov	r0, r7
   1adf8:	bl	19378 <__assert_fail@plt+0x79d8>
   1adfc:	str	r6, [r5]
   1ae00:	add	sp, sp, #24
   1ae04:	ldrd	r4, [sp]
   1ae08:	ldrd	r6, [sp, #8]
   1ae0c:	ldrd	r8, [sp, #16]
   1ae10:	ldr	sl, [sp, #24]
   1ae14:	add	sp, sp, #28
   1ae18:	pop	{pc}		; (ldr pc, [sp], #4)
   1ae1c:	andeq	pc, r3, r0, lsr #7
   1ae20:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1ae24:	strd	r6, [sp, #8]
   1ae28:	strd	r8, [sp, #16]
   1ae2c:	strd	sl, [sp, #24]
   1ae30:	str	lr, [sp, #32]
   1ae34:	sub	sp, sp, #44	; 0x2c
   1ae38:	mov	r8, r0
   1ae3c:	mov	sl, r1
   1ae40:	mov	r6, r2
   1ae44:	subs	r4, r3, #0
   1ae48:	ldr	r3, [pc, #200]	; 1af18 <__assert_fail@plt+0x9578>
   1ae4c:	moveq	r4, r3
   1ae50:	bl	117d8 <__errno_location@plt>
   1ae54:	mov	r7, r0
   1ae58:	ldr	fp, [r0]
   1ae5c:	ldr	r5, [r4, #4]
   1ae60:	cmp	r6, #0
   1ae64:	orreq	r5, r5, #1
   1ae68:	add	r9, r4, #8
   1ae6c:	ldr	r3, [r4, #44]	; 0x2c
   1ae70:	str	r3, [sp, #16]
   1ae74:	ldr	r3, [r4, #40]	; 0x28
   1ae78:	str	r3, [sp, #12]
   1ae7c:	str	r9, [sp, #8]
   1ae80:	str	r5, [sp, #4]
   1ae84:	ldr	r3, [r4]
   1ae88:	str	r3, [sp]
   1ae8c:	str	sl, [sp, #36]	; 0x24
   1ae90:	mov	r3, sl
   1ae94:	str	r8, [sp, #32]
   1ae98:	mov	r2, r8
   1ae9c:	mov	r1, #0
   1aea0:	mov	r0, r1
   1aea4:	bl	19378 <__assert_fail@plt+0x79d8>
   1aea8:	mov	sl, r0
   1aeac:	add	r8, r0, #1
   1aeb0:	mov	r0, r8
   1aeb4:	bl	1ba48 <__assert_fail@plt+0xa0a8>
   1aeb8:	str	r0, [sp, #28]
   1aebc:	ldr	r3, [r4, #44]	; 0x2c
   1aec0:	str	r3, [sp, #16]
   1aec4:	ldr	r3, [r4, #40]	; 0x28
   1aec8:	str	r3, [sp, #12]
   1aecc:	str	r9, [sp, #8]
   1aed0:	str	r5, [sp, #4]
   1aed4:	ldr	r3, [r4]
   1aed8:	str	r3, [sp]
   1aedc:	ldr	r3, [sp, #36]	; 0x24
   1aee0:	ldr	r2, [sp, #32]
   1aee4:	mov	r1, r8
   1aee8:	bl	19378 <__assert_fail@plt+0x79d8>
   1aeec:	str	fp, [r7]
   1aef0:	cmp	r6, #0
   1aef4:	strne	sl, [r6]
   1aef8:	ldr	r0, [sp, #28]
   1aefc:	add	sp, sp, #44	; 0x2c
   1af00:	ldrd	r4, [sp]
   1af04:	ldrd	r6, [sp, #8]
   1af08:	ldrd	r8, [sp, #16]
   1af0c:	ldrd	sl, [sp, #24]
   1af10:	add	sp, sp, #32
   1af14:	pop	{pc}		; (ldr pc, [sp], #4)
   1af18:	andeq	pc, r3, r0, lsr #7
   1af1c:	str	r4, [sp, #-8]!
   1af20:	str	lr, [sp, #4]
   1af24:	mov	r3, r2
   1af28:	mov	r2, #0
   1af2c:	bl	1ae20 <__assert_fail@plt+0x9480>
   1af30:	ldr	r4, [sp]
   1af34:	add	sp, sp, #4
   1af38:	pop	{pc}		; (ldr pc, [sp], #4)
   1af3c:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1af40:	strd	r6, [sp, #8]
   1af44:	str	r8, [sp, #16]
   1af48:	str	lr, [sp, #20]
   1af4c:	movw	r3, #61888	; 0xf1c0
   1af50:	movt	r3, #3
   1af54:	ldr	r7, [r3]
   1af58:	ldr	r3, [r3, #4]
   1af5c:	cmp	r3, #1
   1af60:	ble	1af8c <__assert_fail@plt+0x95ec>
   1af64:	mov	r4, #1
   1af68:	add	r6, r7, #4
   1af6c:	movw	r5, #61888	; 0xf1c0
   1af70:	movt	r5, #3
   1af74:	ldr	r0, [r6, r4, lsl #3]
   1af78:	bl	1c948 <__assert_fail@plt+0xafa8>
   1af7c:	add	r4, r4, #1
   1af80:	ldr	r3, [r5, #4]
   1af84:	cmp	r3, r4
   1af88:	bgt	1af74 <__assert_fail@plt+0x95d4>
   1af8c:	ldr	r0, [r7, #4]
   1af90:	movw	r3, #62112	; 0xf2a0
   1af94:	movt	r3, #3
   1af98:	cmp	r0, r3
   1af9c:	beq	1afc0 <__assert_fail@plt+0x9620>
   1afa0:	bl	1c948 <__assert_fail@plt+0xafa8>
   1afa4:	movw	r3, #61888	; 0xf1c0
   1afa8:	movt	r3, #3
   1afac:	mov	r2, #256	; 0x100
   1afb0:	str	r2, [r3, #8]
   1afb4:	movw	r2, #62112	; 0xf2a0
   1afb8:	movt	r2, #3
   1afbc:	str	r2, [r3, #12]
   1afc0:	ldr	r3, [pc, #64]	; 1b008 <__assert_fail@plt+0x9668>
   1afc4:	cmp	r7, r3
   1afc8:	beq	1afe4 <__assert_fail@plt+0x9644>
   1afcc:	mov	r0, r7
   1afd0:	bl	1c948 <__assert_fail@plt+0xafa8>
   1afd4:	movw	r3, #61888	; 0xf1c0
   1afd8:	movt	r3, #3
   1afdc:	add	r2, r3, #8
   1afe0:	str	r2, [r3]
   1afe4:	movw	r3, #61888	; 0xf1c0
   1afe8:	movt	r3, #3
   1afec:	mov	r2, #1
   1aff0:	str	r2, [r3, #4]
   1aff4:	ldrd	r4, [sp]
   1aff8:	ldrd	r6, [sp, #8]
   1affc:	ldr	r8, [sp, #16]
   1b000:	add	sp, sp, #20
   1b004:	pop	{pc}		; (ldr pc, [sp], #4)
   1b008:	andeq	pc, r3, r8, asr #3
   1b00c:	str	r4, [sp, #-8]!
   1b010:	str	lr, [sp, #4]
   1b014:	ldr	r3, [pc, #16]	; 1b02c <__assert_fail@plt+0x968c>
   1b018:	mvn	r2, #0
   1b01c:	bl	1aa70 <__assert_fail@plt+0x90d0>
   1b020:	ldr	r4, [sp]
   1b024:	add	sp, sp, #4
   1b028:	pop	{pc}		; (ldr pc, [sp], #4)
   1b02c:	andeq	pc, r3, r0, lsr #7
   1b030:	str	r4, [sp, #-8]!
   1b034:	str	lr, [sp, #4]
   1b038:	ldr	r3, [pc, #12]	; 1b04c <__assert_fail@plt+0x96ac>
   1b03c:	bl	1aa70 <__assert_fail@plt+0x90d0>
   1b040:	ldr	r4, [sp]
   1b044:	add	sp, sp, #4
   1b048:	pop	{pc}		; (ldr pc, [sp], #4)
   1b04c:	andeq	pc, r3, r0, lsr #7
   1b050:	str	r4, [sp, #-8]!
   1b054:	str	lr, [sp, #4]
   1b058:	mov	r1, r0
   1b05c:	mov	r0, #0
   1b060:	bl	1b00c <__assert_fail@plt+0x966c>
   1b064:	ldr	r4, [sp]
   1b068:	add	sp, sp, #4
   1b06c:	pop	{pc}		; (ldr pc, [sp], #4)
   1b070:	str	r4, [sp, #-8]!
   1b074:	str	lr, [sp, #4]
   1b078:	mov	r2, r1
   1b07c:	mov	r1, r0
   1b080:	mov	r0, #0
   1b084:	bl	1b030 <__assert_fail@plt+0x9690>
   1b088:	ldr	r4, [sp]
   1b08c:	add	sp, sp, #4
   1b090:	pop	{pc}		; (ldr pc, [sp], #4)
   1b094:	strd	r4, [sp, #-12]!
   1b098:	str	lr, [sp, #8]
   1b09c:	sub	sp, sp, #52	; 0x34
   1b0a0:	mov	r4, r0
   1b0a4:	mov	r5, r2
   1b0a8:	mov	r0, sp
   1b0ac:	bl	191e4 <__assert_fail@plt+0x7844>
   1b0b0:	mov	r3, sp
   1b0b4:	mvn	r2, #0
   1b0b8:	mov	r1, r5
   1b0bc:	mov	r0, r4
   1b0c0:	bl	1aa70 <__assert_fail@plt+0x90d0>
   1b0c4:	add	sp, sp, #52	; 0x34
   1b0c8:	ldrd	r4, [sp]
   1b0cc:	add	sp, sp, #8
   1b0d0:	pop	{pc}		; (ldr pc, [sp], #4)
   1b0d4:	strd	r4, [sp, #-16]!
   1b0d8:	str	r6, [sp, #8]
   1b0dc:	str	lr, [sp, #12]
   1b0e0:	sub	sp, sp, #48	; 0x30
   1b0e4:	mov	r4, r0
   1b0e8:	mov	r5, r2
   1b0ec:	mov	r6, r3
   1b0f0:	mov	r0, sp
   1b0f4:	bl	191e4 <__assert_fail@plt+0x7844>
   1b0f8:	mov	r3, sp
   1b0fc:	mov	r2, r6
   1b100:	mov	r1, r5
   1b104:	mov	r0, r4
   1b108:	bl	1aa70 <__assert_fail@plt+0x90d0>
   1b10c:	add	sp, sp, #48	; 0x30
   1b110:	ldrd	r4, [sp]
   1b114:	ldr	r6, [sp, #8]
   1b118:	add	sp, sp, #12
   1b11c:	pop	{pc}		; (ldr pc, [sp], #4)
   1b120:	str	r4, [sp, #-8]!
   1b124:	str	lr, [sp, #4]
   1b128:	mov	r2, r1
   1b12c:	mov	r1, r0
   1b130:	mov	r0, #0
   1b134:	bl	1b094 <__assert_fail@plt+0x96f4>
   1b138:	ldr	r4, [sp]
   1b13c:	add	sp, sp, #4
   1b140:	pop	{pc}		; (ldr pc, [sp], #4)
   1b144:	str	r4, [sp, #-8]!
   1b148:	str	lr, [sp, #4]
   1b14c:	mov	r3, r2
   1b150:	mov	r2, r1
   1b154:	mov	r1, r0
   1b158:	mov	r0, #0
   1b15c:	bl	1b0d4 <__assert_fail@plt+0x9734>
   1b160:	ldr	r4, [sp]
   1b164:	add	sp, sp, #4
   1b168:	pop	{pc}		; (ldr pc, [sp], #4)
   1b16c:	strd	r4, [sp, #-12]!
   1b170:	str	lr, [sp, #8]
   1b174:	sub	sp, sp, #52	; 0x34
   1b178:	mov	r4, r0
   1b17c:	mov	r5, r1
   1b180:	mov	r1, r2
   1b184:	ldr	r0, [pc, #92]	; 1b1e8 <__assert_fail@plt+0x9848>
   1b188:	ldrd	r2, [r0]
   1b18c:	strd	r2, [sp]
   1b190:	ldrd	r2, [r0, #8]
   1b194:	strd	r2, [sp, #8]
   1b198:	ldrd	r2, [r0, #16]
   1b19c:	strd	r2, [sp, #16]
   1b1a0:	ldrd	r2, [r0, #24]
   1b1a4:	strd	r2, [sp, #24]
   1b1a8:	ldrd	r2, [r0, #32]
   1b1ac:	strd	r2, [sp, #32]
   1b1b0:	ldrd	r2, [r0, #40]	; 0x28
   1b1b4:	strd	r2, [sp, #40]	; 0x28
   1b1b8:	mov	r2, #1
   1b1bc:	mov	r0, sp
   1b1c0:	bl	1ace4 <__assert_fail@plt+0x9344>
   1b1c4:	mov	r3, sp
   1b1c8:	mov	r2, r5
   1b1cc:	mov	r1, r4
   1b1d0:	mov	r0, #0
   1b1d4:	bl	1aa70 <__assert_fail@plt+0x90d0>
   1b1d8:	add	sp, sp, #52	; 0x34
   1b1dc:	ldrd	r4, [sp]
   1b1e0:	add	sp, sp, #8
   1b1e4:	pop	{pc}		; (ldr pc, [sp], #4)
   1b1e8:	andeq	pc, r3, r0, lsr #7
   1b1ec:	str	r4, [sp, #-8]!
   1b1f0:	str	lr, [sp, #4]
   1b1f4:	mov	r2, r1
   1b1f8:	mvn	r1, #0
   1b1fc:	bl	1b16c <__assert_fail@plt+0x97cc>
   1b200:	ldr	r4, [sp]
   1b204:	add	sp, sp, #4
   1b208:	pop	{pc}		; (ldr pc, [sp], #4)
   1b20c:	str	r4, [sp, #-8]!
   1b210:	str	lr, [sp, #4]
   1b214:	mov	r1, #58	; 0x3a
   1b218:	bl	1b1ec <__assert_fail@plt+0x984c>
   1b21c:	ldr	r4, [sp]
   1b220:	add	sp, sp, #4
   1b224:	pop	{pc}		; (ldr pc, [sp], #4)
   1b228:	str	r4, [sp, #-8]!
   1b22c:	str	lr, [sp, #4]
   1b230:	mov	r2, #58	; 0x3a
   1b234:	bl	1b16c <__assert_fail@plt+0x97cc>
   1b238:	ldr	r4, [sp]
   1b23c:	add	sp, sp, #4
   1b240:	pop	{pc}		; (ldr pc, [sp], #4)
   1b244:	strd	r4, [sp, #-12]!
   1b248:	str	lr, [sp, #8]
   1b24c:	sub	sp, sp, #100	; 0x64
   1b250:	mov	r4, r0
   1b254:	mov	r5, r2
   1b258:	mov	r0, sp
   1b25c:	bl	191e4 <__assert_fail@plt+0x7844>
   1b260:	ldrd	r2, [sp]
   1b264:	strd	r2, [sp, #48]	; 0x30
   1b268:	ldrd	r2, [sp, #8]
   1b26c:	strd	r2, [sp, #56]	; 0x38
   1b270:	ldrd	r2, [sp, #16]
   1b274:	strd	r2, [sp, #64]	; 0x40
   1b278:	ldrd	r2, [sp, #24]
   1b27c:	strd	r2, [sp, #72]	; 0x48
   1b280:	ldrd	r2, [sp, #32]
   1b284:	strd	r2, [sp, #80]	; 0x50
   1b288:	ldrd	r2, [sp, #40]	; 0x28
   1b28c:	strd	r2, [sp, #88]	; 0x58
   1b290:	mov	r2, #1
   1b294:	mov	r1, #58	; 0x3a
   1b298:	add	r0, sp, #48	; 0x30
   1b29c:	bl	1ace4 <__assert_fail@plt+0x9344>
   1b2a0:	add	r3, sp, #48	; 0x30
   1b2a4:	mvn	r2, #0
   1b2a8:	mov	r1, r5
   1b2ac:	mov	r0, r4
   1b2b0:	bl	1aa70 <__assert_fail@plt+0x90d0>
   1b2b4:	add	sp, sp, #100	; 0x64
   1b2b8:	ldrd	r4, [sp]
   1b2bc:	add	sp, sp, #8
   1b2c0:	pop	{pc}		; (ldr pc, [sp], #4)
   1b2c4:	strd	r4, [sp, #-20]!	; 0xffffffec
   1b2c8:	strd	r6, [sp, #8]
   1b2cc:	str	lr, [sp, #16]
   1b2d0:	sub	sp, sp, #52	; 0x34
   1b2d4:	mov	r4, r0
   1b2d8:	mov	r5, r3
   1b2dc:	ldr	r3, [pc, #92]	; 1b340 <__assert_fail@plt+0x99a0>
   1b2e0:	ldrd	r6, [r3]
   1b2e4:	strd	r6, [sp]
   1b2e8:	ldrd	r6, [r3, #8]
   1b2ec:	strd	r6, [sp, #8]
   1b2f0:	ldrd	r6, [r3, #16]
   1b2f4:	strd	r6, [sp, #16]
   1b2f8:	ldrd	r6, [r3, #24]
   1b2fc:	strd	r6, [sp, #24]
   1b300:	ldrd	r6, [r3, #32]
   1b304:	strd	r6, [sp, #32]
   1b308:	ldrd	r6, [r3, #40]	; 0x28
   1b30c:	strd	r6, [sp, #40]	; 0x28
   1b310:	mov	r0, sp
   1b314:	bl	1ad40 <__assert_fail@plt+0x93a0>
   1b318:	mov	r3, sp
   1b31c:	ldr	r2, [sp, #72]	; 0x48
   1b320:	mov	r1, r5
   1b324:	mov	r0, r4
   1b328:	bl	1aa70 <__assert_fail@plt+0x90d0>
   1b32c:	add	sp, sp, #52	; 0x34
   1b330:	ldrd	r4, [sp]
   1b334:	ldrd	r6, [sp, #8]
   1b338:	add	sp, sp, #16
   1b33c:	pop	{pc}		; (ldr pc, [sp], #4)
   1b340:	andeq	pc, r3, r0, lsr #7
   1b344:	push	{lr}		; (str lr, [sp, #-4]!)
   1b348:	sub	sp, sp, #12
   1b34c:	mvn	ip, #0
   1b350:	str	ip, [sp]
   1b354:	bl	1b2c4 <__assert_fail@plt+0x9924>
   1b358:	add	sp, sp, #12
   1b35c:	pop	{pc}		; (ldr pc, [sp], #4)
   1b360:	str	r4, [sp, #-8]!
   1b364:	str	lr, [sp, #4]
   1b368:	mov	r3, r2
   1b36c:	mov	r2, r1
   1b370:	mov	r1, r0
   1b374:	mov	r0, #0
   1b378:	bl	1b344 <__assert_fail@plt+0x99a4>
   1b37c:	ldr	r4, [sp]
   1b380:	add	sp, sp, #4
   1b384:	pop	{pc}		; (ldr pc, [sp], #4)
   1b388:	push	{lr}		; (str lr, [sp, #-4]!)
   1b38c:	sub	sp, sp, #12
   1b390:	str	r3, [sp]
   1b394:	mov	r3, r2
   1b398:	mov	r2, r1
   1b39c:	mov	r1, r0
   1b3a0:	mov	r0, #0
   1b3a4:	bl	1b2c4 <__assert_fail@plt+0x9924>
   1b3a8:	add	sp, sp, #12
   1b3ac:	pop	{pc}		; (ldr pc, [sp], #4)
   1b3b0:	str	r4, [sp, #-8]!
   1b3b4:	str	lr, [sp, #4]
   1b3b8:	ldr	r3, [pc, #12]	; 1b3cc <__assert_fail@plt+0x9a2c>
   1b3bc:	bl	1aa70 <__assert_fail@plt+0x90d0>
   1b3c0:	ldr	r4, [sp]
   1b3c4:	add	sp, sp, #4
   1b3c8:	pop	{pc}		; (ldr pc, [sp], #4)
   1b3cc:	ldrdeq	pc, [r3], -r0
   1b3d0:	str	r4, [sp, #-8]!
   1b3d4:	str	lr, [sp, #4]
   1b3d8:	mov	r2, r1
   1b3dc:	mov	r1, r0
   1b3e0:	mov	r0, #0
   1b3e4:	bl	1b3b0 <__assert_fail@plt+0x9a10>
   1b3e8:	ldr	r4, [sp]
   1b3ec:	add	sp, sp, #4
   1b3f0:	pop	{pc}		; (ldr pc, [sp], #4)
   1b3f4:	str	r4, [sp, #-8]!
   1b3f8:	str	lr, [sp, #4]
   1b3fc:	mvn	r2, #0
   1b400:	bl	1b3b0 <__assert_fail@plt+0x9a10>
   1b404:	ldr	r4, [sp]
   1b408:	add	sp, sp, #4
   1b40c:	pop	{pc}		; (ldr pc, [sp], #4)
   1b410:	str	r4, [sp, #-8]!
   1b414:	str	lr, [sp, #4]
   1b418:	mov	r1, r0
   1b41c:	mov	r0, #0
   1b420:	bl	1b3f4 <__assert_fail@plt+0x9a54>
   1b424:	ldr	r4, [sp]
   1b428:	add	sp, sp, #4
   1b42c:	pop	{pc}		; (ldr pc, [sp], #4)
   1b430:	strd	r4, [sp, #-16]!
   1b434:	str	r6, [sp, #8]
   1b438:	str	lr, [sp, #12]
   1b43c:	mov	r5, r0
   1b440:	mov	r4, r1
   1b444:	mov	r2, r1
   1b448:	mov	r1, #0
   1b44c:	bl	1185c <memchr@plt>
   1b450:	cmp	r0, #0
   1b454:	subne	r0, r0, r5
   1b458:	addne	r0, r0, #1
   1b45c:	moveq	r0, r4
   1b460:	ldrd	r4, [sp]
   1b464:	ldr	r6, [sp, #8]
   1b468:	add	sp, sp, #12
   1b46c:	pop	{pc}		; (ldr pc, [sp], #4)
   1b470:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1b474:	strd	r6, [sp, #8]
   1b478:	str	r8, [sp, #16]
   1b47c:	str	lr, [sp, #20]
   1b480:	mov	r4, r0
   1b484:	cmp	r0, #2
   1b488:	bls	1b4a4 <__assert_fail@plt+0x9b04>
   1b48c:	mov	r0, r4
   1b490:	ldrd	r4, [sp]
   1b494:	ldrd	r6, [sp, #8]
   1b498:	ldr	r8, [sp, #16]
   1b49c:	add	sp, sp, #20
   1b4a0:	pop	{pc}		; (ldr pc, [sp], #4)
   1b4a4:	bl	2c4e8 <__assert_fail@plt+0x1ab48>
   1b4a8:	mov	r6, r0
   1b4ac:	bl	117d8 <__errno_location@plt>
   1b4b0:	mov	r5, r0
   1b4b4:	ldr	r7, [r0]
   1b4b8:	mov	r0, r4
   1b4bc:	bl	1197c <close@plt>
   1b4c0:	str	r7, [r5]
   1b4c4:	mov	r4, r6
   1b4c8:	b	1b48c <__assert_fail@plt+0x9aec>
   1b4cc:	strd	r4, [sp, #-16]!
   1b4d0:	str	r6, [sp, #8]
   1b4d4:	str	lr, [sp, #12]
   1b4d8:	sub	sp, sp, #32
   1b4dc:	mov	r4, r0
   1b4e0:	ldr	r5, [sp, #48]	; 0x30
   1b4e4:	ldr	r6, [sp, #52]	; 0x34
   1b4e8:	cmp	r1, #0
   1b4ec:	beq	1b5a8 <__assert_fail@plt+0x9c08>
   1b4f0:	str	r3, [sp]
   1b4f4:	mov	r3, r2
   1b4f8:	mov	r2, r1
   1b4fc:	movw	r1, #56940	; 0xde6c
   1b500:	movt	r1, #2
   1b504:	bl	117c0 <fprintf@plt>
   1b508:	mov	r2, #5
   1b50c:	movw	r1, #56960	; 0xde80
   1b510:	movt	r1, #2
   1b514:	mov	r0, #0
   1b518:	bl	11628 <dcgettext@plt>
   1b51c:	movw	r3, #2022	; 0x7e6
   1b520:	mov	r2, r0
   1b524:	movw	r1, #57664	; 0xe140
   1b528:	movt	r1, #2
   1b52c:	mov	r0, r4
   1b530:	bl	117c0 <fprintf@plt>
   1b534:	mov	r1, r4
   1b538:	mov	r0, #10
   1b53c:	bl	118bc <fputc@plt>
   1b540:	mov	r2, #5
   1b544:	movw	r1, #56964	; 0xde84
   1b548:	movt	r1, #2
   1b54c:	mov	r0, #0
   1b550:	bl	11628 <dcgettext@plt>
   1b554:	movw	r2, #57136	; 0xdf30
   1b558:	movt	r2, #2
   1b55c:	mov	r1, r0
   1b560:	mov	r0, r4
   1b564:	bl	117c0 <fprintf@plt>
   1b568:	mov	r1, r4
   1b56c:	mov	r0, #10
   1b570:	bl	118bc <fputc@plt>
   1b574:	cmp	r6, #9
   1b578:	ldrls	pc, [pc, r6, lsl #2]
   1b57c:	b	1b830 <__assert_fail@plt+0x9e90>
   1b580:	ldrdeq	fp, [r1], -ip
   1b584:			; <UNDEFINED> instruction: 0x0001b5b8
   1b588:	strdeq	fp, [r1], -r0
   1b58c:	andeq	fp, r1, ip, lsl r6
   1b590:	andeq	fp, r1, r0, asr r6
   1b594:	andeq	fp, r1, ip, lsl #13
   1b598:	ldrdeq	fp, [r1], -r0
   1b59c:	andeq	fp, r1, ip, lsl r7
   1b5a0:	andeq	fp, r1, r0, ror r7
   1b5a4:	andeq	fp, r1, ip, asr #15
   1b5a8:	movw	r1, #56952	; 0xde78
   1b5ac:	movt	r1, #2
   1b5b0:	bl	117c0 <fprintf@plt>
   1b5b4:	b	1b508 <__assert_fail@plt+0x9b68>
   1b5b8:	mov	r2, #5
   1b5bc:	movw	r1, #57172	; 0xdf54
   1b5c0:	movt	r1, #2
   1b5c4:	mov	r0, #0
   1b5c8:	bl	11628 <dcgettext@plt>
   1b5cc:	ldr	r2, [r5]
   1b5d0:	mov	r1, r0
   1b5d4:	mov	r0, r4
   1b5d8:	bl	117c0 <fprintf@plt>
   1b5dc:	add	sp, sp, #32
   1b5e0:	ldrd	r4, [sp]
   1b5e4:	ldr	r6, [sp, #8]
   1b5e8:	add	sp, sp, #12
   1b5ec:	pop	{pc}		; (ldr pc, [sp], #4)
   1b5f0:	mov	r2, #5
   1b5f4:	movw	r1, #57188	; 0xdf64
   1b5f8:	movt	r1, #2
   1b5fc:	mov	r0, #0
   1b600:	bl	11628 <dcgettext@plt>
   1b604:	ldr	r3, [r5, #4]
   1b608:	ldr	r2, [r5]
   1b60c:	mov	r1, r0
   1b610:	mov	r0, r4
   1b614:	bl	117c0 <fprintf@plt>
   1b618:	b	1b5dc <__assert_fail@plt+0x9c3c>
   1b61c:	mov	r2, #5
   1b620:	movw	r1, #57212	; 0xdf7c
   1b624:	movt	r1, #2
   1b628:	mov	r0, #0
   1b62c:	bl	11628 <dcgettext@plt>
   1b630:	ldr	r3, [r5, #8]
   1b634:	str	r3, [sp]
   1b638:	ldr	r3, [r5, #4]
   1b63c:	ldr	r2, [r5]
   1b640:	mov	r1, r0
   1b644:	mov	r0, r4
   1b648:	bl	117c0 <fprintf@plt>
   1b64c:	b	1b5dc <__assert_fail@plt+0x9c3c>
   1b650:	mov	r2, #5
   1b654:	movw	r1, #57240	; 0xdf98
   1b658:	movt	r1, #2
   1b65c:	mov	r0, #0
   1b660:	bl	11628 <dcgettext@plt>
   1b664:	ldr	r3, [r5, #12]
   1b668:	str	r3, [sp, #4]
   1b66c:	ldr	r3, [r5, #8]
   1b670:	str	r3, [sp]
   1b674:	ldr	r3, [r5, #4]
   1b678:	ldr	r2, [r5]
   1b67c:	mov	r1, r0
   1b680:	mov	r0, r4
   1b684:	bl	117c0 <fprintf@plt>
   1b688:	b	1b5dc <__assert_fail@plt+0x9c3c>
   1b68c:	mov	r2, #5
   1b690:	movw	r1, #57272	; 0xdfb8
   1b694:	movt	r1, #2
   1b698:	mov	r0, #0
   1b69c:	bl	11628 <dcgettext@plt>
   1b6a0:	ldr	r3, [r5, #16]
   1b6a4:	str	r3, [sp, #8]
   1b6a8:	ldr	r3, [r5, #12]
   1b6ac:	str	r3, [sp, #4]
   1b6b0:	ldr	r3, [r5, #8]
   1b6b4:	str	r3, [sp]
   1b6b8:	ldr	r3, [r5, #4]
   1b6bc:	ldr	r2, [r5]
   1b6c0:	mov	r1, r0
   1b6c4:	mov	r0, r4
   1b6c8:	bl	117c0 <fprintf@plt>
   1b6cc:	b	1b5dc <__assert_fail@plt+0x9c3c>
   1b6d0:	mov	r2, #5
   1b6d4:	movw	r1, #57308	; 0xdfdc
   1b6d8:	movt	r1, #2
   1b6dc:	mov	r0, #0
   1b6e0:	bl	11628 <dcgettext@plt>
   1b6e4:	ldr	r3, [r5, #20]
   1b6e8:	str	r3, [sp, #12]
   1b6ec:	ldr	r3, [r5, #16]
   1b6f0:	str	r3, [sp, #8]
   1b6f4:	ldr	r3, [r5, #12]
   1b6f8:	str	r3, [sp, #4]
   1b6fc:	ldr	r3, [r5, #8]
   1b700:	str	r3, [sp]
   1b704:	ldr	r3, [r5, #4]
   1b708:	ldr	r2, [r5]
   1b70c:	mov	r1, r0
   1b710:	mov	r0, r4
   1b714:	bl	117c0 <fprintf@plt>
   1b718:	b	1b5dc <__assert_fail@plt+0x9c3c>
   1b71c:	mov	r2, #5
   1b720:	movw	r1, #57348	; 0xe004
   1b724:	movt	r1, #2
   1b728:	mov	r0, #0
   1b72c:	bl	11628 <dcgettext@plt>
   1b730:	ldr	r3, [r5, #24]
   1b734:	str	r3, [sp, #16]
   1b738:	ldr	r3, [r5, #20]
   1b73c:	str	r3, [sp, #12]
   1b740:	ldr	r3, [r5, #16]
   1b744:	str	r3, [sp, #8]
   1b748:	ldr	r3, [r5, #12]
   1b74c:	str	r3, [sp, #4]
   1b750:	ldr	r3, [r5, #8]
   1b754:	str	r3, [sp]
   1b758:	ldr	r3, [r5, #4]
   1b75c:	ldr	r2, [r5]
   1b760:	mov	r1, r0
   1b764:	mov	r0, r4
   1b768:	bl	117c0 <fprintf@plt>
   1b76c:	b	1b5dc <__assert_fail@plt+0x9c3c>
   1b770:	mov	r2, #5
   1b774:	movw	r1, #57392	; 0xe030
   1b778:	movt	r1, #2
   1b77c:	mov	r0, #0
   1b780:	bl	11628 <dcgettext@plt>
   1b784:	ldr	r3, [r5, #28]
   1b788:	str	r3, [sp, #20]
   1b78c:	ldr	r3, [r5, #24]
   1b790:	str	r3, [sp, #16]
   1b794:	ldr	r3, [r5, #20]
   1b798:	str	r3, [sp, #12]
   1b79c:	ldr	r3, [r5, #16]
   1b7a0:	str	r3, [sp, #8]
   1b7a4:	ldr	r3, [r5, #12]
   1b7a8:	str	r3, [sp, #4]
   1b7ac:	ldr	r3, [r5, #8]
   1b7b0:	str	r3, [sp]
   1b7b4:	ldr	r3, [r5, #4]
   1b7b8:	ldr	r2, [r5]
   1b7bc:	mov	r1, r0
   1b7c0:	mov	r0, r4
   1b7c4:	bl	117c0 <fprintf@plt>
   1b7c8:	b	1b5dc <__assert_fail@plt+0x9c3c>
   1b7cc:	mov	r2, #5
   1b7d0:	movw	r1, #57440	; 0xe060
   1b7d4:	movt	r1, #2
   1b7d8:	mov	r0, #0
   1b7dc:	bl	11628 <dcgettext@plt>
   1b7e0:	ldr	r3, [r5, #32]
   1b7e4:	str	r3, [sp, #24]
   1b7e8:	ldr	r3, [r5, #28]
   1b7ec:	str	r3, [sp, #20]
   1b7f0:	ldr	r3, [r5, #24]
   1b7f4:	str	r3, [sp, #16]
   1b7f8:	ldr	r3, [r5, #20]
   1b7fc:	str	r3, [sp, #12]
   1b800:	ldr	r3, [r5, #16]
   1b804:	str	r3, [sp, #8]
   1b808:	ldr	r3, [r5, #12]
   1b80c:	str	r3, [sp, #4]
   1b810:	ldr	r3, [r5, #8]
   1b814:	str	r3, [sp]
   1b818:	ldr	r3, [r5, #4]
   1b81c:	ldr	r2, [r5]
   1b820:	mov	r1, r0
   1b824:	mov	r0, r4
   1b828:	bl	117c0 <fprintf@plt>
   1b82c:	b	1b5dc <__assert_fail@plt+0x9c3c>
   1b830:	mov	r2, #5
   1b834:	movw	r1, #57492	; 0xe094
   1b838:	movt	r1, #2
   1b83c:	mov	r0, #0
   1b840:	bl	11628 <dcgettext@plt>
   1b844:	ldr	r3, [r5, #32]
   1b848:	str	r3, [sp, #24]
   1b84c:	ldr	r3, [r5, #28]
   1b850:	str	r3, [sp, #20]
   1b854:	ldr	r3, [r5, #24]
   1b858:	str	r3, [sp, #16]
   1b85c:	ldr	r3, [r5, #20]
   1b860:	str	r3, [sp, #12]
   1b864:	ldr	r3, [r5, #16]
   1b868:	str	r3, [sp, #8]
   1b86c:	ldr	r3, [r5, #12]
   1b870:	str	r3, [sp, #4]
   1b874:	ldr	r3, [r5, #8]
   1b878:	str	r3, [sp]
   1b87c:	ldr	r3, [r5, #4]
   1b880:	ldr	r2, [r5]
   1b884:	mov	r1, r0
   1b888:	mov	r0, r4
   1b88c:	bl	117c0 <fprintf@plt>
   1b890:	b	1b5dc <__assert_fail@plt+0x9c3c>
   1b894:	strd	r4, [sp, #-12]!
   1b898:	str	lr, [sp, #8]
   1b89c:	sub	sp, sp, #12
   1b8a0:	ldr	r5, [sp, #24]
   1b8a4:	ldr	ip, [r5]
   1b8a8:	cmp	ip, #0
   1b8ac:	beq	1b8e4 <__assert_fail@plt+0x9f44>
   1b8b0:	mov	lr, r5
   1b8b4:	mov	ip, #0
   1b8b8:	add	ip, ip, #1
   1b8bc:	ldr	r4, [lr, #4]!
   1b8c0:	cmp	r4, #0
   1b8c4:	bne	1b8b8 <__assert_fail@plt+0x9f18>
   1b8c8:	str	ip, [sp, #4]
   1b8cc:	str	r5, [sp]
   1b8d0:	bl	1b4cc <__assert_fail@plt+0x9b2c>
   1b8d4:	add	sp, sp, #12
   1b8d8:	ldrd	r4, [sp]
   1b8dc:	add	sp, sp, #8
   1b8e0:	pop	{pc}		; (ldr pc, [sp], #4)
   1b8e4:	mov	ip, #0
   1b8e8:	b	1b8c8 <__assert_fail@plt+0x9f28>
   1b8ec:	strd	r4, [sp, #-12]!
   1b8f0:	str	lr, [sp, #8]
   1b8f4:	sub	sp, sp, #52	; 0x34
   1b8f8:	ldr	r5, [sp, #64]	; 0x40
   1b8fc:	add	r4, sp, #8
   1b900:	mov	ip, #0
   1b904:	ldr	lr, [r5], #4
   1b908:	str	lr, [r4], #4
   1b90c:	cmp	lr, #0
   1b910:	beq	1b920 <__assert_fail@plt+0x9f80>
   1b914:	add	ip, ip, #1
   1b918:	cmp	ip, #10
   1b91c:	bne	1b904 <__assert_fail@plt+0x9f64>
   1b920:	str	ip, [sp, #4]
   1b924:	add	ip, sp, #8
   1b928:	str	ip, [sp]
   1b92c:	bl	1b4cc <__assert_fail@plt+0x9b2c>
   1b930:	add	sp, sp, #52	; 0x34
   1b934:	ldrd	r4, [sp]
   1b938:	add	sp, sp, #8
   1b93c:	pop	{pc}		; (ldr pc, [sp], #4)
   1b940:	push	{r3}		; (str r3, [sp, #-4]!)
   1b944:	push	{lr}		; (str lr, [sp, #-4]!)
   1b948:	sub	sp, sp, #16
   1b94c:	add	r3, sp, #24
   1b950:	str	r3, [sp, #12]
   1b954:	str	r3, [sp]
   1b958:	ldr	r3, [sp, #20]
   1b95c:	bl	1b8ec <__assert_fail@plt+0x9f4c>
   1b960:	add	sp, sp, #16
   1b964:	pop	{lr}		; (ldr lr, [sp], #4)
   1b968:	add	sp, sp, #4
   1b96c:	bx	lr
   1b970:	str	r4, [sp, #-8]!
   1b974:	str	lr, [sp, #4]
   1b978:	movw	r3, #61980	; 0xf21c
   1b97c:	movt	r3, #3
   1b980:	ldr	r1, [r3]
   1b984:	mov	r0, #10
   1b988:	bl	118bc <fputc@plt>
   1b98c:	mov	r2, #5
   1b990:	movw	r1, #57552	; 0xe0d0
   1b994:	movt	r1, #2
   1b998:	mov	r0, #0
   1b99c:	bl	11628 <dcgettext@plt>
   1b9a0:	movw	r1, #56296	; 0xdbe8
   1b9a4:	movt	r1, #2
   1b9a8:	bl	11550 <printf@plt>
   1b9ac:	mov	r2, #5
   1b9b0:	movw	r1, #57572	; 0xe0e4
   1b9b4:	movt	r1, #2
   1b9b8:	mov	r0, #0
   1b9bc:	bl	11628 <dcgettext@plt>
   1b9c0:	movw	r2, #56256	; 0xdbc0
   1b9c4:	movt	r2, #2
   1b9c8:	movw	r1, #55672	; 0xd978
   1b9cc:	movt	r1, #2
   1b9d0:	bl	11550 <printf@plt>
   1b9d4:	mov	r2, #5
   1b9d8:	movw	r1, #57592	; 0xe0f8
   1b9dc:	movt	r1, #2
   1b9e0:	mov	r0, #0
   1b9e4:	bl	11628 <dcgettext@plt>
   1b9e8:	movw	r1, #57632	; 0xe120
   1b9ec:	movt	r1, #2
   1b9f0:	bl	11550 <printf@plt>
   1b9f4:	ldr	r4, [sp]
   1b9f8:	add	sp, sp, #4
   1b9fc:	pop	{pc}		; (ldr pc, [sp], #4)
   1ba00:	str	r4, [sp, #-8]!
   1ba04:	str	lr, [sp, #4]
   1ba08:	bl	1ca68 <__assert_fail@plt+0xb0c8>
   1ba0c:	cmp	r0, #0
   1ba10:	beq	1ba20 <__assert_fail@plt+0xa080>
   1ba14:	ldr	r4, [sp]
   1ba18:	add	sp, sp, #4
   1ba1c:	pop	{pc}		; (ldr pc, [sp], #4)
   1ba20:	bl	1be94 <__assert_fail@plt+0xa4f4>
   1ba24:	str	r4, [sp, #-8]!
   1ba28:	str	lr, [sp, #4]
   1ba2c:	bl	1ca68 <__assert_fail@plt+0xb0c8>
   1ba30:	cmp	r0, #0
   1ba34:	beq	1ba44 <__assert_fail@plt+0xa0a4>
   1ba38:	ldr	r4, [sp]
   1ba3c:	add	sp, sp, #4
   1ba40:	pop	{pc}		; (ldr pc, [sp], #4)
   1ba44:	bl	1be94 <__assert_fail@plt+0xa4f4>
   1ba48:	str	r4, [sp, #-8]!
   1ba4c:	str	lr, [sp, #4]
   1ba50:	bl	1ba00 <__assert_fail@plt+0xa060>
   1ba54:	ldr	r4, [sp]
   1ba58:	add	sp, sp, #4
   1ba5c:	pop	{pc}		; (ldr pc, [sp], #4)
   1ba60:	strd	r4, [sp, #-16]!
   1ba64:	str	r6, [sp, #8]
   1ba68:	str	lr, [sp, #12]
   1ba6c:	mov	r5, r0
   1ba70:	mov	r4, r1
   1ba74:	bl	1cb14 <__assert_fail@plt+0xb174>
   1ba78:	cmp	r0, #0
   1ba7c:	beq	1ba90 <__assert_fail@plt+0xa0f0>
   1ba80:	ldrd	r4, [sp]
   1ba84:	ldr	r6, [sp, #8]
   1ba88:	add	sp, sp, #12
   1ba8c:	pop	{pc}		; (ldr pc, [sp], #4)
   1ba90:	adds	r4, r4, #0
   1ba94:	movne	r4, #1
   1ba98:	cmp	r5, #0
   1ba9c:	moveq	r4, #1
   1baa0:	cmp	r4, #0
   1baa4:	beq	1ba80 <__assert_fail@plt+0xa0e0>
   1baa8:	bl	1be94 <__assert_fail@plt+0xa4f4>
   1baac:	str	r4, [sp, #-8]!
   1bab0:	str	lr, [sp, #4]
   1bab4:	cmp	r1, #0
   1bab8:	orreq	r1, r1, #1
   1babc:	bl	1cb14 <__assert_fail@plt+0xb174>
   1bac0:	cmp	r0, #0
   1bac4:	beq	1bad4 <__assert_fail@plt+0xa134>
   1bac8:	ldr	r4, [sp]
   1bacc:	add	sp, sp, #4
   1bad0:	pop	{pc}		; (ldr pc, [sp], #4)
   1bad4:	bl	1be94 <__assert_fail@plt+0xa4f4>
   1bad8:	strd	r4, [sp, #-16]!
   1badc:	str	r6, [sp, #8]
   1bae0:	str	lr, [sp, #12]
   1bae4:	mov	r4, r0
   1bae8:	mov	r6, r1
   1baec:	mov	r5, r2
   1baf0:	bl	1cb70 <__assert_fail@plt+0xb1d0>
   1baf4:	cmp	r0, #0
   1baf8:	beq	1bb0c <__assert_fail@plt+0xa16c>
   1bafc:	ldrd	r4, [sp]
   1bb00:	ldr	r6, [sp, #8]
   1bb04:	add	sp, sp, #12
   1bb08:	pop	{pc}		; (ldr pc, [sp], #4)
   1bb0c:	cmp	r4, #0
   1bb10:	beq	1bb20 <__assert_fail@plt+0xa180>
   1bb14:	cmp	r6, #0
   1bb18:	cmpne	r5, #0
   1bb1c:	beq	1bafc <__assert_fail@plt+0xa15c>
   1bb20:	bl	1be94 <__assert_fail@plt+0xa4f4>
   1bb24:	str	r4, [sp, #-8]!
   1bb28:	str	lr, [sp, #4]
   1bb2c:	bl	1bad8 <__assert_fail@plt+0xa138>
   1bb30:	ldr	r4, [sp]
   1bb34:	add	sp, sp, #4
   1bb38:	pop	{pc}		; (ldr pc, [sp], #4)
   1bb3c:	str	r4, [sp, #-8]!
   1bb40:	str	lr, [sp, #4]
   1bb44:	mov	ip, r1
   1bb48:	mov	r3, r2
   1bb4c:	cmp	r2, #0
   1bb50:	cmpne	r1, #0
   1bb54:	moveq	r3, #1
   1bb58:	moveq	ip, r3
   1bb5c:	mov	r2, r3
   1bb60:	mov	r1, ip
   1bb64:	bl	1cb70 <__assert_fail@plt+0xb1d0>
   1bb68:	cmp	r0, #0
   1bb6c:	beq	1bb7c <__assert_fail@plt+0xa1dc>
   1bb70:	ldr	r4, [sp]
   1bb74:	add	sp, sp, #4
   1bb78:	pop	{pc}		; (ldr pc, [sp], #4)
   1bb7c:	bl	1be94 <__assert_fail@plt+0xa4f4>
   1bb80:	str	r4, [sp, #-8]!
   1bb84:	str	lr, [sp, #4]
   1bb88:	mov	r2, r1
   1bb8c:	mov	r1, r0
   1bb90:	mov	r0, #0
   1bb94:	bl	1bad8 <__assert_fail@plt+0xa138>
   1bb98:	ldr	r4, [sp]
   1bb9c:	add	sp, sp, #4
   1bba0:	pop	{pc}		; (ldr pc, [sp], #4)
   1bba4:	str	r4, [sp, #-8]!
   1bba8:	str	lr, [sp, #4]
   1bbac:	mov	r2, r1
   1bbb0:	mov	r1, r0
   1bbb4:	mov	r0, #0
   1bbb8:	bl	1bb3c <__assert_fail@plt+0xa19c>
   1bbbc:	ldr	r4, [sp]
   1bbc0:	add	sp, sp, #4
   1bbc4:	pop	{pc}		; (ldr pc, [sp], #4)
   1bbc8:	strd	r4, [sp, #-16]!
   1bbcc:	str	r6, [sp, #8]
   1bbd0:	str	lr, [sp, #12]
   1bbd4:	mov	r5, r1
   1bbd8:	ldr	r4, [r1]
   1bbdc:	cmp	r0, #0
   1bbe0:	beq	1bc10 <__assert_fail@plt+0xa270>
   1bbe4:	lsr	r3, r4, #1
   1bbe8:	add	r3, r3, #1
   1bbec:	adds	r4, r4, r3
   1bbf0:	bcs	1bc2c <__assert_fail@plt+0xa28c>
   1bbf4:	mov	r1, r4
   1bbf8:	bl	1bad8 <__assert_fail@plt+0xa138>
   1bbfc:	str	r4, [r5]
   1bc00:	ldrd	r4, [sp]
   1bc04:	ldr	r6, [sp, #8]
   1bc08:	add	sp, sp, #12
   1bc0c:	pop	{pc}		; (ldr pc, [sp], #4)
   1bc10:	cmp	r4, #0
   1bc14:	bne	1bbf4 <__assert_fail@plt+0xa254>
   1bc18:	mov	r4, #64	; 0x40
   1bc1c:	udiv	r4, r4, r2
   1bc20:	cmp	r2, #64	; 0x40
   1bc24:	addhi	r4, r4, #1
   1bc28:	b	1bbf4 <__assert_fail@plt+0xa254>
   1bc2c:	bl	1be94 <__assert_fail@plt+0xa4f4>
   1bc30:	str	r4, [sp, #-8]!
   1bc34:	str	lr, [sp, #4]
   1bc38:	mov	r2, #1
   1bc3c:	bl	1bbc8 <__assert_fail@plt+0xa228>
   1bc40:	ldr	r4, [sp]
   1bc44:	add	sp, sp, #4
   1bc48:	pop	{pc}		; (ldr pc, [sp], #4)
   1bc4c:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1bc50:	strd	r6, [sp, #8]
   1bc54:	str	r8, [sp, #16]
   1bc58:	str	lr, [sp, #20]
   1bc5c:	mov	r5, r1
   1bc60:	ldr	lr, [sp, #24]
   1bc64:	ldr	ip, [r1]
   1bc68:	asr	r4, ip, #1
   1bc6c:	adds	r4, ip, r4
   1bc70:	movvs	r1, #1
   1bc74:	movvc	r1, #0
   1bc78:	cmp	r1, #0
   1bc7c:	mvnne	r4, #-2147483648	; 0x80000000
   1bc80:	mvn	r8, r3
   1bc84:	lsr	r8, r8, #31
   1bc88:	cmp	r3, r4
   1bc8c:	movge	r1, #0
   1bc90:	andlt	r1, r8, #1
   1bc94:	cmp	r1, #0
   1bc98:	movne	r4, r3
   1bc9c:	smull	r6, r7, r4, lr
   1bca0:	asr	r1, r6, #31
   1bca4:	cmp	r1, r7
   1bca8:	bne	1bcc0 <__assert_fail@plt+0xa320>
   1bcac:	mov	r1, r6
   1bcb0:	cmp	r6, #63	; 0x3f
   1bcb4:	movle	r1, #64	; 0x40
   1bcb8:	ble	1bcc4 <__assert_fail@plt+0xa324>
   1bcbc:	b	1bcd0 <__assert_fail@plt+0xa330>
   1bcc0:	mvn	r1, #-2147483648	; 0x80000000
   1bcc4:	sdiv	r4, r1, lr
   1bcc8:	mls	r6, lr, r4, r1
   1bccc:	sub	r1, r1, r6
   1bcd0:	cmp	r0, #0
   1bcd4:	moveq	r6, #0
   1bcd8:	streq	r6, [r5]
   1bcdc:	sub	r6, r4, ip
   1bce0:	cmp	r6, r2
   1bce4:	bge	1bd1c <__assert_fail@plt+0xa37c>
   1bce8:	adds	r2, ip, r2
   1bcec:	mov	r4, r2
   1bcf0:	bvs	1bd38 <__assert_fail@plt+0xa398>
   1bcf4:	cmp	r2, r3
   1bcf8:	movle	r3, #0
   1bcfc:	andgt	r3, r8, #1
   1bd00:	cmp	r3, #0
   1bd04:	bne	1bd38 <__assert_fail@plt+0xa398>
   1bd08:	smull	r2, r3, r2, lr
   1bd0c:	asr	ip, r2, #31
   1bd10:	mov	r1, r2
   1bd14:	cmp	ip, r3
   1bd18:	bne	1bd38 <__assert_fail@plt+0xa398>
   1bd1c:	bl	1ba60 <__assert_fail@plt+0xa0c0>
   1bd20:	str	r4, [r5]
   1bd24:	ldrd	r4, [sp]
   1bd28:	ldrd	r6, [sp, #8]
   1bd2c:	ldr	r8, [sp, #16]
   1bd30:	add	sp, sp, #20
   1bd34:	pop	{pc}		; (ldr pc, [sp], #4)
   1bd38:	bl	1be94 <__assert_fail@plt+0xa4f4>
   1bd3c:	str	r4, [sp, #-8]!
   1bd40:	str	lr, [sp, #4]
   1bd44:	bl	1c5f8 <__assert_fail@plt+0xac58>
   1bd48:	cmp	r0, #0
   1bd4c:	beq	1bd5c <__assert_fail@plt+0xa3bc>
   1bd50:	ldr	r4, [sp]
   1bd54:	add	sp, sp, #4
   1bd58:	pop	{pc}		; (ldr pc, [sp], #4)
   1bd5c:	bl	1be94 <__assert_fail@plt+0xa4f4>
   1bd60:	str	r4, [sp, #-8]!
   1bd64:	str	lr, [sp, #4]
   1bd68:	mov	r1, #1
   1bd6c:	bl	1bd3c <__assert_fail@plt+0xa39c>
   1bd70:	ldr	r4, [sp]
   1bd74:	add	sp, sp, #4
   1bd78:	pop	{pc}		; (ldr pc, [sp], #4)
   1bd7c:	str	r4, [sp, #-8]!
   1bd80:	str	lr, [sp, #4]
   1bd84:	bl	1c5f8 <__assert_fail@plt+0xac58>
   1bd88:	cmp	r0, #0
   1bd8c:	beq	1bd9c <__assert_fail@plt+0xa3fc>
   1bd90:	ldr	r4, [sp]
   1bd94:	add	sp, sp, #4
   1bd98:	pop	{pc}		; (ldr pc, [sp], #4)
   1bd9c:	bl	1be94 <__assert_fail@plt+0xa4f4>
   1bda0:	str	r4, [sp, #-8]!
   1bda4:	str	lr, [sp, #4]
   1bda8:	mov	r1, #1
   1bdac:	bl	1bd7c <__assert_fail@plt+0xa3dc>
   1bdb0:	ldr	r4, [sp]
   1bdb4:	add	sp, sp, #4
   1bdb8:	pop	{pc}		; (ldr pc, [sp], #4)
   1bdbc:	strd	r4, [sp, #-16]!
   1bdc0:	str	r6, [sp, #8]
   1bdc4:	str	lr, [sp, #12]
   1bdc8:	mov	r5, r0
   1bdcc:	mov	r4, r1
   1bdd0:	mov	r0, r1
   1bdd4:	bl	1ba00 <__assert_fail@plt+0xa060>
   1bdd8:	mov	r2, r4
   1bddc:	mov	r1, r5
   1bde0:	bl	115d4 <memcpy@plt>
   1bde4:	ldrd	r4, [sp]
   1bde8:	ldr	r6, [sp, #8]
   1bdec:	add	sp, sp, #12
   1bdf0:	pop	{pc}		; (ldr pc, [sp], #4)
   1bdf4:	strd	r4, [sp, #-16]!
   1bdf8:	str	r6, [sp, #8]
   1bdfc:	str	lr, [sp, #12]
   1be00:	mov	r5, r0
   1be04:	mov	r4, r1
   1be08:	mov	r0, r1
   1be0c:	bl	1ba24 <__assert_fail@plt+0xa084>
   1be10:	mov	r2, r4
   1be14:	mov	r1, r5
   1be18:	bl	115d4 <memcpy@plt>
   1be1c:	ldrd	r4, [sp]
   1be20:	ldr	r6, [sp, #8]
   1be24:	add	sp, sp, #12
   1be28:	pop	{pc}		; (ldr pc, [sp], #4)
   1be2c:	strd	r4, [sp, #-16]!
   1be30:	str	r6, [sp, #8]
   1be34:	str	lr, [sp, #12]
   1be38:	mov	r5, r0
   1be3c:	mov	r4, r1
   1be40:	add	r0, r1, #1
   1be44:	bl	1ba24 <__assert_fail@plt+0xa084>
   1be48:	mov	r2, #0
   1be4c:	strb	r2, [r0, r4]
   1be50:	mov	r2, r4
   1be54:	mov	r1, r5
   1be58:	bl	115d4 <memcpy@plt>
   1be5c:	ldrd	r4, [sp]
   1be60:	ldr	r6, [sp, #8]
   1be64:	add	sp, sp, #12
   1be68:	pop	{pc}		; (ldr pc, [sp], #4)
   1be6c:	str	r4, [sp, #-8]!
   1be70:	str	lr, [sp, #4]
   1be74:	mov	r4, r0
   1be78:	bl	117a8 <strlen@plt>
   1be7c:	add	r1, r0, #1
   1be80:	mov	r0, r4
   1be84:	bl	1bdbc <__assert_fail@plt+0xa41c>
   1be88:	ldr	r4, [sp]
   1be8c:	add	sp, sp, #4
   1be90:	pop	{pc}		; (ldr pc, [sp], #4)
   1be94:	str	r4, [sp, #-8]!
   1be98:	str	lr, [sp, #4]
   1be9c:	movw	r3, #61884	; 0xf1bc
   1bea0:	movt	r3, #3
   1bea4:	ldr	r4, [r3]
   1bea8:	mov	r2, #5
   1beac:	movw	r1, #57712	; 0xe170
   1beb0:	movt	r1, #2
   1beb4:	mov	r0, #0
   1beb8:	bl	11628 <dcgettext@plt>
   1bebc:	mov	r3, r0
   1bec0:	movw	r2, #56384	; 0xdc40
   1bec4:	movt	r2, #2
   1bec8:	mov	r1, #0
   1becc:	mov	r0, r4
   1bed0:	bl	116d0 <error@plt>
   1bed4:	bl	11964 <abort@plt>
   1bed8:	push	{lr}		; (str lr, [sp, #-4]!)
   1bedc:	sub	sp, sp, #20
   1bee0:	movw	ip, #61884	; 0xf1bc
   1bee4:	movt	ip, #3
   1bee8:	ldr	r5, [ip]
   1beec:	sub	r0, r0, #1
   1bef0:	cmp	r0, #3
   1bef4:	ldrls	pc, [pc, r0, lsl #2]
   1bef8:	b	1bf18 <__assert_fail@plt+0xa578>
   1befc:	andeq	fp, r1, ip, lsl pc
   1bf00:	andeq	fp, r1, ip, lsl #30
   1bf04:	andeq	fp, r1, ip, lsl #30
   1bf08:	andeq	fp, r1, r8, lsr #30
   1bf0c:	movw	r0, #57792	; 0xe1c0
   1bf10:	movt	r0, #2
   1bf14:	b	1bf30 <__assert_fail@plt+0xa590>
   1bf18:	bl	11964 <abort@plt>
   1bf1c:	movw	r0, #57732	; 0xe184
   1bf20:	movt	r0, #2
   1bf24:	b	1bf30 <__assert_fail@plt+0xa590>
   1bf28:	movw	r0, #57764	; 0xe1a4
   1bf2c:	movt	r0, #2
   1bf30:	cmp	r1, #0
   1bf34:	blt	1bf78 <__assert_fail@plt+0xa5d8>
   1bf38:	ldr	r6, [r3, r1, lsl #4]
   1bf3c:	movw	r4, #57832	; 0xe1e8
   1bf40:	movt	r4, #2
   1bf44:	mov	r2, #5
   1bf48:	mov	r1, r0
   1bf4c:	mov	r0, #0
   1bf50:	bl	11628 <dcgettext@plt>
   1bf54:	ldr	r3, [sp, #24]
   1bf58:	str	r3, [sp, #4]
   1bf5c:	str	r6, [sp]
   1bf60:	mov	r3, r4
   1bf64:	mov	r2, r0
   1bf68:	mov	r1, #0
   1bf6c:	mov	r0, r5
   1bf70:	bl	116d0 <error@plt>
   1bf74:	bl	11964 <abort@plt>
   1bf78:	movw	r4, #57832	; 0xe1e8
   1bf7c:	movt	r4, #2
   1bf80:	sub	r4, r4, r1
   1bf84:	strb	r2, [sp, #12]
   1bf88:	mov	r3, #0
   1bf8c:	strb	r3, [sp, #13]
   1bf90:	add	r6, sp, #12
   1bf94:	b	1bf44 <__assert_fail@plt+0xa5a4>
   1bf98:	cmp	r2, #0
   1bf9c:	beq	1c098 <__assert_fail@plt+0xa6f8>
   1bfa0:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1bfa4:	strd	r6, [sp, #8]
   1bfa8:	strd	r8, [sp, #16]
   1bfac:	strd	sl, [sp, #24]
   1bfb0:	str	lr, [sp, #32]
   1bfb4:	sub	sp, sp, #20
   1bfb8:	mov	r9, r0
   1bfbc:	sub	ip, r2, #1
   1bfc0:	ldrd	sl, [r0]
   1bfc4:	mov	r0, #0
   1bfc8:	asr	r7, r1, #31
   1bfcc:	str	r1, [sp, #8]
   1bfd0:	str	r9, [sp, #12]
   1bfd4:	b	1c030 <__assert_fail@plt+0xa690>
   1bfd8:	cmp	r7, #0
   1bfdc:	bne	1c058 <__assert_fail@plt+0xa6b8>
   1bfe0:	ldr	r3, [sp, #8]
   1bfe4:	str	r3, [sp, #4]
   1bfe8:	umull	r8, r9, sl, r1
   1bfec:	mov	r2, r9
   1bff0:	mov	r3, #0
   1bff4:	ldr	r8, [sp, #4]
   1bff8:	umlal	r2, r3, lr, r8
   1bffc:	cmp	r3, #0
   1c000:	bne	1c058 <__assert_fail@plt+0xa6b8>
   1c004:	orrs	r3, r4, r5
   1c008:	bne	1c064 <__assert_fail@plt+0xa6c4>
   1c00c:	mul	r3, sl, r7
   1c010:	mla	r3, r1, fp, r3
   1c014:	umull	sl, fp, sl, r1
   1c018:	add	fp, r3, fp
   1c01c:	mov	r3, #0
   1c020:	orr	r0, r0, r3
   1c024:	sub	ip, ip, #1
   1c028:	cmn	ip, #1
   1c02c:	beq	1c074 <__assert_fail@plt+0xa6d4>
   1c030:	mov	r4, #0
   1c034:	mov	r5, r4
   1c038:	mov	lr, fp
   1c03c:	cmp	fp, r4
   1c040:	bne	1bfd8 <__assert_fail@plt+0xa638>
   1c044:	cmp	r7, r4
   1c048:	movne	lr, r7
   1c04c:	strne	sl, [sp, #4]
   1c050:	beq	1c004 <__assert_fail@plt+0xa664>
   1c054:	b	1bfe8 <__assert_fail@plt+0xa648>
   1c058:	mov	r4, #1
   1c05c:	mov	r5, #0
   1c060:	b	1c004 <__assert_fail@plt+0xa664>
   1c064:	mvn	sl, #0
   1c068:	mvn	fp, #0
   1c06c:	mov	r3, #1
   1c070:	b	1c020 <__assert_fail@plt+0xa680>
   1c074:	ldr	r9, [sp, #12]
   1c078:	strd	sl, [r9]
   1c07c:	add	sp, sp, #20
   1c080:	ldrd	r4, [sp]
   1c084:	ldrd	r6, [sp, #8]
   1c088:	ldrd	r8, [sp, #16]
   1c08c:	ldrd	sl, [sp, #24]
   1c090:	add	sp, sp, #32
   1c094:	pop	{pc}		; (ldr pc, [sp], #4)
   1c098:	mov	r0, #0
   1c09c:	bx	lr
   1c0a0:	strd	r4, [sp, #-28]!	; 0xffffffe4
   1c0a4:	strd	r6, [sp, #8]
   1c0a8:	strd	r8, [sp, #16]
   1c0ac:	str	lr, [sp, #24]
   1c0b0:	sub	sp, sp, #20
   1c0b4:	cmp	r2, #36	; 0x24
   1c0b8:	bhi	1c10c <__assert_fail@plt+0xa76c>
   1c0bc:	mov	r5, r0
   1c0c0:	mov	r6, r1
   1c0c4:	mov	r7, r2
   1c0c8:	mov	r9, r3
   1c0cc:	cmp	r1, #0
   1c0d0:	addeq	r6, sp, #12
   1c0d4:	bl	117d8 <__errno_location@plt>
   1c0d8:	mov	r8, r0
   1c0dc:	mov	r3, #0
   1c0e0:	str	r3, [r0]
   1c0e4:	ldrb	r4, [r5]
   1c0e8:	bl	11778 <__ctype_b_loc@plt>
   1c0ec:	ldr	r1, [r0]
   1c0f0:	mov	r2, r5
   1c0f4:	lsl	r3, r4, #1
   1c0f8:	ldrh	r3, [r1, r3]
   1c0fc:	tst	r3, #8192	; 0x2000
   1c100:	beq	1c12c <__assert_fail@plt+0xa78c>
   1c104:	ldrb	r4, [r2, #1]!
   1c108:	b	1c0f4 <__assert_fail@plt+0xa754>
   1c10c:	movw	r3, #57836	; 0xe1ec
   1c110:	movt	r3, #2
   1c114:	mov	r2, #84	; 0x54
   1c118:	movw	r1, #57848	; 0xe1f8
   1c11c:	movt	r1, #2
   1c120:	movw	r0, #57860	; 0xe204
   1c124:	movt	r0, #2
   1c128:	bl	119a0 <__assert_fail@plt>
   1c12c:	cmp	r4, #45	; 0x2d
   1c130:	moveq	r4, #4
   1c134:	beq	1c2c8 <__assert_fail@plt+0xa928>
   1c138:	mov	r3, #0
   1c13c:	mov	r2, r7
   1c140:	mov	r1, r6
   1c144:	mov	r0, r5
   1c148:	bl	115ec <__strtoull_internal@plt>
   1c14c:	strd	r0, [sp]
   1c150:	ldr	r7, [r6]
   1c154:	cmp	r7, r5
   1c158:	beq	1c17c <__assert_fail@plt+0xa7dc>
   1c15c:	ldr	r3, [r8]
   1c160:	cmp	r3, #0
   1c164:	beq	1c2a0 <__assert_fail@plt+0xa900>
   1c168:	cmp	r3, #34	; 0x22
   1c16c:	moveq	r4, #1
   1c170:	beq	1c2a4 <__assert_fail@plt+0xa904>
   1c174:	mov	r4, #4
   1c178:	b	1c2c8 <__assert_fail@plt+0xa928>
   1c17c:	ldr	r3, [sp, #48]	; 0x30
   1c180:	cmp	r3, #0
   1c184:	beq	1c5e8 <__assert_fail@plt+0xac48>
   1c188:	ldrb	r1, [r5]
   1c18c:	cmp	r1, #0
   1c190:	moveq	r4, #4
   1c194:	beq	1c2c8 <__assert_fail@plt+0xa928>
   1c198:	mov	r0, r3
   1c19c:	bl	117b4 <strchr@plt>
   1c1a0:	cmp	r0, #0
   1c1a4:	beq	1c5f0 <__assert_fail@plt+0xac50>
   1c1a8:	mov	r2, #1
   1c1ac:	mov	r3, #0
   1c1b0:	strd	r2, [sp]
   1c1b4:	ldrb	r5, [r7]
   1c1b8:	mov	r4, #0
   1c1bc:	mov	r1, r5
   1c1c0:	ldr	r0, [sp, #48]	; 0x30
   1c1c4:	bl	117b4 <strchr@plt>
   1c1c8:	cmp	r0, #0
   1c1cc:	beq	1c2e4 <__assert_fail@plt+0xa944>
   1c1d0:	sub	r3, r5, #69	; 0x45
   1c1d4:	cmp	r3, #47	; 0x2f
   1c1d8:	ldrls	pc, [pc, r3, lsl #2]
   1c1dc:	b	1c430 <__assert_fail@plt+0xaa90>
   1c1e0:	strdeq	ip, [r1], -r4
   1c1e4:	andeq	ip, r1, r0, lsr r4
   1c1e8:	strdeq	ip, [r1], -r4
   1c1ec:	andeq	ip, r1, r0, lsr r4
   1c1f0:	andeq	ip, r1, r0, lsr r4
   1c1f4:	andeq	ip, r1, r0, lsr r4
   1c1f8:	strdeq	ip, [r1], -r4
   1c1fc:	andeq	ip, r1, r0, lsr r4
   1c200:	strdeq	ip, [r1], -r4
   1c204:	andeq	ip, r1, r0, lsr r4
   1c208:	andeq	ip, r1, r0, lsr r4
   1c20c:	strdeq	ip, [r1], -r4
   1c210:	andeq	ip, r1, r0, lsr r4
   1c214:	andeq	ip, r1, r0, lsr r4
   1c218:	andeq	ip, r1, r0, lsr r4
   1c21c:	strdeq	ip, [r1], -r4
   1c220:	andeq	ip, r1, r0, lsr r4
   1c224:	andeq	ip, r1, r0, lsr r4
   1c228:	andeq	ip, r1, r0, lsr r4
   1c22c:	andeq	ip, r1, r0, lsr r4
   1c230:	strdeq	ip, [r1], -r4
   1c234:	strdeq	ip, [r1], -r4
   1c238:	andeq	ip, r1, r0, lsr r4
   1c23c:	andeq	ip, r1, r0, lsr r4
   1c240:	andeq	ip, r1, r0, lsr r4
   1c244:	andeq	ip, r1, r0, lsr r4
   1c248:	andeq	ip, r1, r0, lsr r4
   1c24c:	andeq	ip, r1, r0, lsr r4
   1c250:	andeq	ip, r1, r0, lsr r4
   1c254:	andeq	ip, r1, r0, lsr r4
   1c258:	andeq	ip, r1, r0, lsr r4
   1c25c:	andeq	ip, r1, r0, lsr r4
   1c260:	andeq	ip, r1, r0, lsr r4
   1c264:	andeq	ip, r1, r0, lsr r4
   1c268:	strdeq	ip, [r1], -r4
   1c26c:	andeq	ip, r1, r0, lsr r4
   1c270:	andeq	ip, r1, r0, lsr r4
   1c274:	andeq	ip, r1, r0, lsr r4
   1c278:	strdeq	ip, [r1], -r4
   1c27c:	andeq	ip, r1, r0, lsr r4
   1c280:	strdeq	ip, [r1], -r4
   1c284:	andeq	ip, r1, r0, lsr r4
   1c288:	andeq	ip, r1, r0, lsr r4
   1c28c:	andeq	ip, r1, r0, lsr r4
   1c290:	andeq	ip, r1, r0, lsr r4
   1c294:	andeq	ip, r1, r0, lsr r4
   1c298:	andeq	ip, r1, r0, lsr r4
   1c29c:	strdeq	ip, [r1], -r4
   1c2a0:	mov	r4, #0
   1c2a4:	ldr	r3, [sp, #48]	; 0x30
   1c2a8:	cmp	r3, #0
   1c2ac:	strdeq	r0, [r9]
   1c2b0:	beq	1c2c8 <__assert_fail@plt+0xa928>
   1c2b4:	ldrb	r5, [r7]
   1c2b8:	cmp	r5, #0
   1c2bc:	bne	1c1bc <__assert_fail@plt+0xa81c>
   1c2c0:	ldrd	r2, [sp]
   1c2c4:	strd	r2, [r9]
   1c2c8:	mov	r0, r4
   1c2cc:	add	sp, sp, #20
   1c2d0:	ldrd	r4, [sp]
   1c2d4:	ldrd	r6, [sp, #8]
   1c2d8:	ldrd	r8, [sp, #16]
   1c2dc:	add	sp, sp, #24
   1c2e0:	pop	{pc}		; (ldr pc, [sp], #4)
   1c2e4:	ldrd	r2, [sp]
   1c2e8:	strd	r2, [r9]
   1c2ec:	orr	r4, r4, #2
   1c2f0:	b	1c2c8 <__assert_fail@plt+0xa928>
   1c2f4:	mov	r1, #48	; 0x30
   1c2f8:	ldr	r0, [sp, #48]	; 0x30
   1c2fc:	bl	117b4 <strchr@plt>
   1c300:	cmp	r0, #0
   1c304:	beq	1c43c <__assert_fail@plt+0xaa9c>
   1c308:	ldrb	r3, [r7, #1]
   1c30c:	cmp	r3, #68	; 0x44
   1c310:	beq	1c448 <__assert_fail@plt+0xaaa8>
   1c314:	cmp	r3, #105	; 0x69
   1c318:	beq	1c418 <__assert_fail@plt+0xaa78>
   1c31c:	cmp	r3, #66	; 0x42
   1c320:	moveq	r7, #2
   1c324:	movne	r7, #1
   1c328:	moveq	r1, #1000	; 0x3e8
   1c32c:	movne	r1, #1024	; 0x400
   1c330:	sub	r5, r5, #66	; 0x42
   1c334:	cmp	r5, #53	; 0x35
   1c338:	ldrls	pc, [pc, r5, lsl #2]
   1c33c:	b	1c5b4 <__assert_fail@plt+0xac14>
   1c340:	andeq	ip, r1, r0, lsr #9
   1c344:			; <UNDEFINED> instruction: 0x0001c5b4
   1c348:			; <UNDEFINED> instruction: 0x0001c5b4
   1c34c:	andeq	ip, r1, ip, ror #9
   1c350:			; <UNDEFINED> instruction: 0x0001c5b4
   1c354:	strdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1c358:			; <UNDEFINED> instruction: 0x0001c5b4
   1c35c:			; <UNDEFINED> instruction: 0x0001c5b4
   1c360:			; <UNDEFINED> instruction: 0x0001c5b4
   1c364:	andeq	ip, r1, ip, lsl #10
   1c368:			; <UNDEFINED> instruction: 0x0001c5b4
   1c36c:	andeq	ip, r1, ip, lsl r5
   1c370:			; <UNDEFINED> instruction: 0x0001c5b4
   1c374:			; <UNDEFINED> instruction: 0x0001c5b4
   1c378:	andeq	ip, r1, ip, lsr #10
   1c37c:			; <UNDEFINED> instruction: 0x0001c5b4
   1c380:			; <UNDEFINED> instruction: 0x0001c5b4
   1c384:			; <UNDEFINED> instruction: 0x0001c5b4
   1c388:	andeq	ip, r1, ip, lsr r5
   1c38c:			; <UNDEFINED> instruction: 0x0001c5b4
   1c390:			; <UNDEFINED> instruction: 0x0001c5b4
   1c394:			; <UNDEFINED> instruction: 0x0001c5b4
   1c398:			; <UNDEFINED> instruction: 0x0001c5b4
   1c39c:	muleq	r1, r4, r5
   1c3a0:	andeq	ip, r1, r4, lsr #11
   1c3a4:			; <UNDEFINED> instruction: 0x0001c5b4
   1c3a8:			; <UNDEFINED> instruction: 0x0001c5b4
   1c3ac:			; <UNDEFINED> instruction: 0x0001c5b4
   1c3b0:			; <UNDEFINED> instruction: 0x0001c5b4
   1c3b4:			; <UNDEFINED> instruction: 0x0001c5b4
   1c3b8:			; <UNDEFINED> instruction: 0x0001c5b4
   1c3bc:			; <UNDEFINED> instruction: 0x0001c5b4
   1c3c0:	andeq	ip, r1, r4, asr r4
   1c3c4:	andeq	ip, r1, r4, asr #11
   1c3c8:			; <UNDEFINED> instruction: 0x0001c5b4
   1c3cc:			; <UNDEFINED> instruction: 0x0001c5b4
   1c3d0:			; <UNDEFINED> instruction: 0x0001c5b4
   1c3d4:	strdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1c3d8:			; <UNDEFINED> instruction: 0x0001c5b4
   1c3dc:			; <UNDEFINED> instruction: 0x0001c5b4
   1c3e0:			; <UNDEFINED> instruction: 0x0001c5b4
   1c3e4:	andeq	ip, r1, ip, lsl #10
   1c3e8:			; <UNDEFINED> instruction: 0x0001c5b4
   1c3ec:	andeq	ip, r1, ip, lsl r5
   1c3f0:			; <UNDEFINED> instruction: 0x0001c5b4
   1c3f4:			; <UNDEFINED> instruction: 0x0001c5b4
   1c3f8:			; <UNDEFINED> instruction: 0x0001c5b4
   1c3fc:			; <UNDEFINED> instruction: 0x0001c5b4
   1c400:			; <UNDEFINED> instruction: 0x0001c5b4
   1c404:			; <UNDEFINED> instruction: 0x0001c5b4
   1c408:	andeq	ip, r1, ip, lsr r5
   1c40c:			; <UNDEFINED> instruction: 0x0001c5b4
   1c410:			; <UNDEFINED> instruction: 0x0001c5b4
   1c414:	andeq	ip, r1, ip, asr #10
   1c418:	ldrb	r3, [r7, #2]
   1c41c:	cmp	r3, #66	; 0x42
   1c420:	movne	r7, #1
   1c424:	moveq	r7, #3
   1c428:	mov	r1, #1024	; 0x400
   1c42c:	b	1c330 <__assert_fail@plt+0xa990>
   1c430:	mov	r7, #1
   1c434:	mov	r1, #1024	; 0x400
   1c438:	b	1c330 <__assert_fail@plt+0xa990>
   1c43c:	mov	r7, #1
   1c440:	mov	r1, #1024	; 0x400
   1c444:	b	1c330 <__assert_fail@plt+0xa990>
   1c448:	mov	r7, #2
   1c44c:	mov	r1, #1000	; 0x3e8
   1c450:	b	1c330 <__assert_fail@plt+0xa990>
   1c454:	ldr	r2, [sp]
   1c458:	ldr	r3, [sp, #4]
   1c45c:	mov	r0, #0
   1c460:	mov	r1, r0
   1c464:	lsr	r0, r3, #23
   1c468:	orrs	r1, r0, r1
   1c46c:	bne	1c48c <__assert_fail@plt+0xaaec>
   1c470:	lsl	r3, r3, #9
   1c474:	orr	r3, r3, r2, lsr #23
   1c478:	lsl	r2, r2, #9
   1c47c:	str	r2, [sp]
   1c480:	str	r3, [sp, #4]
   1c484:	mov	r0, #0
   1c488:	b	1c5c8 <__assert_fail@plt+0xac28>
   1c48c:	mvn	r2, #0
   1c490:	mvn	r3, #0
   1c494:	strd	r2, [sp]
   1c498:	mov	r0, #1
   1c49c:	b	1c5c8 <__assert_fail@plt+0xac28>
   1c4a0:	ldr	r2, [sp]
   1c4a4:	ldr	r3, [sp, #4]
   1c4a8:	mov	r0, #0
   1c4ac:	mov	r1, r0
   1c4b0:	lsr	r0, r3, #22
   1c4b4:	orrs	r1, r0, r1
   1c4b8:	bne	1c4d8 <__assert_fail@plt+0xab38>
   1c4bc:	lsl	r3, r3, #10
   1c4c0:	orr	r3, r3, r2, lsr #22
   1c4c4:	lsl	r2, r2, #10
   1c4c8:	str	r2, [sp]
   1c4cc:	str	r3, [sp, #4]
   1c4d0:	mov	r0, #0
   1c4d4:	b	1c5c8 <__assert_fail@plt+0xac28>
   1c4d8:	mvn	r2, #0
   1c4dc:	mvn	r3, #0
   1c4e0:	strd	r2, [sp]
   1c4e4:	mov	r0, #1
   1c4e8:	b	1c5c8 <__assert_fail@plt+0xac28>
   1c4ec:	mov	r2, #6
   1c4f0:	mov	r0, sp
   1c4f4:	bl	1bf98 <__assert_fail@plt+0xa5f8>
   1c4f8:	b	1c5c8 <__assert_fail@plt+0xac28>
   1c4fc:	mov	r2, #3
   1c500:	mov	r0, sp
   1c504:	bl	1bf98 <__assert_fail@plt+0xa5f8>
   1c508:	b	1c5c8 <__assert_fail@plt+0xac28>
   1c50c:	mov	r2, #1
   1c510:	mov	r0, sp
   1c514:	bl	1bf98 <__assert_fail@plt+0xa5f8>
   1c518:	b	1c5c8 <__assert_fail@plt+0xac28>
   1c51c:	mov	r2, #2
   1c520:	mov	r0, sp
   1c524:	bl	1bf98 <__assert_fail@plt+0xa5f8>
   1c528:	b	1c5c8 <__assert_fail@plt+0xac28>
   1c52c:	mov	r2, #5
   1c530:	mov	r0, sp
   1c534:	bl	1bf98 <__assert_fail@plt+0xa5f8>
   1c538:	b	1c5c8 <__assert_fail@plt+0xac28>
   1c53c:	mov	r2, #4
   1c540:	mov	r0, sp
   1c544:	bl	1bf98 <__assert_fail@plt+0xa5f8>
   1c548:	b	1c5c8 <__assert_fail@plt+0xac28>
   1c54c:	ldr	r3, [sp]
   1c550:	ldr	r2, [sp, #4]
   1c554:	mov	r0, #0
   1c558:	mov	r1, r0
   1c55c:	lsr	r0, r2, #31
   1c560:	orrs	r1, r0, r1
   1c564:	bne	1c580 <__assert_fail@plt+0xabe0>
   1c568:	adds	r3, r3, r3
   1c56c:	adc	r2, r2, r2
   1c570:	str	r3, [sp]
   1c574:	str	r2, [sp, #4]
   1c578:	mov	r0, #0
   1c57c:	b	1c5c8 <__assert_fail@plt+0xac28>
   1c580:	mvn	r2, #0
   1c584:	mvn	r3, #0
   1c588:	strd	r2, [sp]
   1c58c:	mov	r0, #1
   1c590:	b	1c5c8 <__assert_fail@plt+0xac28>
   1c594:	mov	r2, #8
   1c598:	mov	r0, sp
   1c59c:	bl	1bf98 <__assert_fail@plt+0xa5f8>
   1c5a0:	b	1c5c8 <__assert_fail@plt+0xac28>
   1c5a4:	mov	r2, #7
   1c5a8:	mov	r0, sp
   1c5ac:	bl	1bf98 <__assert_fail@plt+0xa5f8>
   1c5b0:	b	1c5c8 <__assert_fail@plt+0xac28>
   1c5b4:	ldrd	r2, [sp]
   1c5b8:	strd	r2, [r9]
   1c5bc:	orr	r4, r4, #2
   1c5c0:	b	1c2c8 <__assert_fail@plt+0xa928>
   1c5c4:	mov	r0, #0
   1c5c8:	orr	r4, r4, r0
   1c5cc:	ldr	r3, [r6]
   1c5d0:	add	r2, r3, r7
   1c5d4:	str	r2, [r6]
   1c5d8:	ldrb	r3, [r3, r7]
   1c5dc:	cmp	r3, #0
   1c5e0:	orrne	r4, r4, #2
   1c5e4:	b	1c2c0 <__assert_fail@plt+0xa920>
   1c5e8:	mov	r4, #4
   1c5ec:	b	1c2c8 <__assert_fail@plt+0xa928>
   1c5f0:	mov	r4, #4
   1c5f4:	b	1c2c8 <__assert_fail@plt+0xa928>
   1c5f8:	strd	r4, [sp, #-16]!
   1c5fc:	str	r6, [sp, #8]
   1c600:	str	lr, [sp, #12]
   1c604:	cmp	r1, #0
   1c608:	cmpne	r0, #0
   1c60c:	beq	1c648 <__assert_fail@plt+0xaca8>
   1c610:	mov	r2, r0
   1c614:	mov	r3, r1
   1c618:	umull	r4, r5, r0, r1
   1c61c:	adds	r1, r5, #0
   1c620:	movne	r1, #1
   1c624:	cmp	r4, #0
   1c628:	movlt	r1, #1
   1c62c:	cmp	r1, #0
   1c630:	beq	1c650 <__assert_fail@plt+0xacb0>
   1c634:	bl	117d8 <__errno_location@plt>
   1c638:	mov	r3, #12
   1c63c:	str	r3, [r0]
   1c640:	mov	r0, #0
   1c644:	b	1c65c <__assert_fail@plt+0xacbc>
   1c648:	mov	r3, #1
   1c64c:	mov	r2, r3
   1c650:	mov	r1, r3
   1c654:	mov	r0, r2
   1c658:	bl	11508 <calloc@plt>
   1c65c:	ldrd	r4, [sp]
   1c660:	ldr	r6, [sp, #8]
   1c664:	add	sp, sp, #12
   1c668:	pop	{pc}		; (ldr pc, [sp], #4)
   1c66c:	push	{r1, r2, r3}
   1c670:	strd	r4, [sp, #-16]!
   1c674:	str	r6, [sp, #8]
   1c678:	str	lr, [sp, #12]
   1c67c:	sub	sp, sp, #12
   1c680:	mov	r5, r0
   1c684:	ldr	r1, [sp, #28]
   1c688:	add	r3, sp, #32
   1c68c:	str	r3, [sp, #4]
   1c690:	cmp	r1, #0
   1c694:	beq	1c6dc <__assert_fail@plt+0xad3c>
   1c698:	movw	r3, #1030	; 0x406
   1c69c:	cmp	r1, r3
   1c6a0:	beq	1c718 <__assert_fail@plt+0xad78>
   1c6a4:	cmp	r1, #11
   1c6a8:	beq	1c8c8 <__assert_fail@plt+0xaf28>
   1c6ac:	bgt	1c854 <__assert_fail@plt+0xaeb4>
   1c6b0:	cmp	r1, #3
   1c6b4:	beq	1c8c8 <__assert_fail@plt+0xaf28>
   1c6b8:	ble	1c814 <__assert_fail@plt+0xae74>
   1c6bc:	cmp	r1, #8
   1c6c0:	beq	1c834 <__assert_fail@plt+0xae94>
   1c6c4:	ble	1c82c <__assert_fail@plt+0xae8c>
   1c6c8:	cmp	r1, #9
   1c6cc:	beq	1c8c8 <__assert_fail@plt+0xaf28>
   1c6d0:	cmp	r1, #10
   1c6d4:	bne	1c88c <__assert_fail@plt+0xaeec>
   1c6d8:	b	1c834 <__assert_fail@plt+0xae94>
   1c6dc:	ldr	r3, [sp, #4]
   1c6e0:	add	r2, r3, #4
   1c6e4:	str	r2, [sp, #4]
   1c6e8:	ldr	r2, [r3]
   1c6ec:	mov	r1, #0
   1c6f0:	bl	1188c <fcntl64@plt>
   1c6f4:	mov	r4, r0
   1c6f8:	mov	r0, r4
   1c6fc:	add	sp, sp, #12
   1c700:	ldrd	r4, [sp]
   1c704:	ldr	r6, [sp, #8]
   1c708:	ldr	lr, [sp, #12]
   1c70c:	add	sp, sp, #16
   1c710:	add	sp, sp, #12
   1c714:	bx	lr
   1c718:	ldr	r3, [sp, #4]
   1c71c:	add	r2, r3, #4
   1c720:	str	r2, [sp, #4]
   1c724:	ldr	r6, [r3]
   1c728:	movw	r3, #62416	; 0xf3d0
   1c72c:	movt	r3, #3
   1c730:	ldr	r3, [r3]
   1c734:	cmp	r3, #0
   1c738:	blt	1c7a0 <__assert_fail@plt+0xae00>
   1c73c:	mov	r2, r6
   1c740:	movw	r1, #1030	; 0x406
   1c744:	bl	1188c <fcntl64@plt>
   1c748:	subs	r4, r0, #0
   1c74c:	blt	1c764 <__assert_fail@plt+0xadc4>
   1c750:	movw	r3, #62416	; 0xf3d0
   1c754:	movt	r3, #3
   1c758:	mov	r2, #1
   1c75c:	str	r2, [r3]
   1c760:	b	1c6f8 <__assert_fail@plt+0xad58>
   1c764:	bl	117d8 <__errno_location@plt>
   1c768:	ldr	r3, [r0]
   1c76c:	cmp	r3, #22
   1c770:	bne	1c750 <__assert_fail@plt+0xadb0>
   1c774:	mov	r2, r6
   1c778:	mov	r1, #0
   1c77c:	mov	r0, r5
   1c780:	bl	1188c <fcntl64@plt>
   1c784:	subs	r4, r0, #0
   1c788:	blt	1c6f8 <__assert_fail@plt+0xad58>
   1c78c:	movw	r3, #62416	; 0xf3d0
   1c790:	movt	r3, #3
   1c794:	mvn	r2, #0
   1c798:	str	r2, [r3]
   1c79c:	b	1c7c8 <__assert_fail@plt+0xae28>
   1c7a0:	mov	r2, r6
   1c7a4:	mov	r1, #0
   1c7a8:	bl	1188c <fcntl64@plt>
   1c7ac:	subs	r4, r0, #0
   1c7b0:	blt	1c6f8 <__assert_fail@plt+0xad58>
   1c7b4:	movw	r3, #62416	; 0xf3d0
   1c7b8:	movt	r3, #3
   1c7bc:	ldr	r3, [r3]
   1c7c0:	cmn	r3, #1
   1c7c4:	bne	1c6f8 <__assert_fail@plt+0xad58>
   1c7c8:	mov	r1, #1
   1c7cc:	mov	r0, r4
   1c7d0:	bl	1188c <fcntl64@plt>
   1c7d4:	subs	r2, r0, #0
   1c7d8:	blt	1c7f4 <__assert_fail@plt+0xae54>
   1c7dc:	orr	r2, r2, #1
   1c7e0:	mov	r1, #2
   1c7e4:	mov	r0, r4
   1c7e8:	bl	1188c <fcntl64@plt>
   1c7ec:	cmn	r0, #1
   1c7f0:	bne	1c6f8 <__assert_fail@plt+0xad58>
   1c7f4:	bl	117d8 <__errno_location@plt>
   1c7f8:	mov	r5, r0
   1c7fc:	ldr	r6, [r0]
   1c800:	mov	r0, r4
   1c804:	bl	1197c <close@plt>
   1c808:	str	r6, [r5]
   1c80c:	mvn	r4, #0
   1c810:	b	1c6f8 <__assert_fail@plt+0xad58>
   1c814:	cmp	r1, #1
   1c818:	beq	1c8c8 <__assert_fail@plt+0xaf28>
   1c81c:	bgt	1c834 <__assert_fail@plt+0xae94>
   1c820:	cmp	r1, #0
   1c824:	bne	1c88c <__assert_fail@plt+0xaeec>
   1c828:	b	1c834 <__assert_fail@plt+0xae94>
   1c82c:	cmp	r1, #4
   1c830:	bne	1c88c <__assert_fail@plt+0xaeec>
   1c834:	ldr	r3, [sp, #4]
   1c838:	add	r2, r3, #4
   1c83c:	str	r2, [sp, #4]
   1c840:	ldr	r2, [r3]
   1c844:	mov	r0, r5
   1c848:	bl	1188c <fcntl64@plt>
   1c84c:	mov	r4, r0
   1c850:	b	1c6f8 <__assert_fail@plt+0xad58>
   1c854:	movw	r3, #1031	; 0x407
   1c858:	cmp	r1, r3
   1c85c:	bgt	1c8ac <__assert_fail@plt+0xaf0c>
   1c860:	movw	r3, #1030	; 0x406
   1c864:	cmp	r1, r3
   1c868:	bge	1c834 <__assert_fail@plt+0xae94>
   1c86c:	movw	r3, #1025	; 0x401
   1c870:	cmp	r1, r3
   1c874:	beq	1c8c8 <__assert_fail@plt+0xaf28>
   1c878:	movw	r3, #1026	; 0x402
   1c87c:	cmp	r1, r3
   1c880:	beq	1c834 <__assert_fail@plt+0xae94>
   1c884:	cmp	r1, #1024	; 0x400
   1c888:	beq	1c834 <__assert_fail@plt+0xae94>
   1c88c:	ldr	r3, [sp, #4]
   1c890:	add	r2, r3, #4
   1c894:	str	r2, [sp, #4]
   1c898:	ldr	r2, [r3]
   1c89c:	mov	r0, r5
   1c8a0:	bl	1188c <fcntl64@plt>
   1c8a4:	mov	r4, r0
   1c8a8:	b	1c6f8 <__assert_fail@plt+0xad58>
   1c8ac:	movw	r3, #1033	; 0x409
   1c8b0:	cmp	r1, r3
   1c8b4:	beq	1c834 <__assert_fail@plt+0xae94>
   1c8b8:	blt	1c8c8 <__assert_fail@plt+0xaf28>
   1c8bc:	movw	r3, #1034	; 0x40a
   1c8c0:	cmp	r1, r3
   1c8c4:	bne	1c88c <__assert_fail@plt+0xaeec>
   1c8c8:	mov	r0, r5
   1c8cc:	bl	1188c <fcntl64@plt>
   1c8d0:	mov	r4, r0
   1c8d4:	b	1c6f8 <__assert_fail@plt+0xad58>
   1c8d8:	str	r4, [sp, #-8]!
   1c8dc:	str	lr, [sp, #4]
   1c8e0:	sub	sp, sp, #8
   1c8e4:	subs	r4, r0, #0
   1c8e8:	beq	1c8fc <__assert_fail@plt+0xaf5c>
   1c8ec:	mov	r0, r4
   1c8f0:	bl	11730 <__freading@plt>
   1c8f4:	cmp	r0, #0
   1c8f8:	bne	1c914 <__assert_fail@plt+0xaf74>
   1c8fc:	mov	r0, r4
   1c900:	bl	11568 <fflush@plt>
   1c904:	add	sp, sp, #8
   1c908:	ldr	r4, [sp]
   1c90c:	add	sp, sp, #4
   1c910:	pop	{pc}		; (ldr pc, [sp], #4)
   1c914:	ldr	r3, [r4]
   1c918:	tst	r3, #256	; 0x100
   1c91c:	bne	1c92c <__assert_fail@plt+0xaf8c>
   1c920:	mov	r0, r4
   1c924:	bl	11568 <fflush@plt>
   1c928:	b	1c904 <__assert_fail@plt+0xaf64>
   1c92c:	mov	r3, #1
   1c930:	str	r3, [sp]
   1c934:	mov	r2, #0
   1c938:	mov	r3, #0
   1c93c:	mov	r0, r4
   1c940:	bl	1c9a8 <__assert_fail@plt+0xb008>
   1c944:	b	1c920 <__assert_fail@plt+0xaf80>
   1c948:	strd	r4, [sp, #-12]!
   1c94c:	str	lr, [sp, #8]
   1c950:	sub	sp, sp, #12
   1c954:	mov	r5, r0
   1c958:	bl	117d8 <__errno_location@plt>
   1c95c:	mov	r4, r0
   1c960:	ldr	r3, [r0]
   1c964:	str	r3, [sp]
   1c968:	str	r3, [sp, #4]
   1c96c:	mov	r3, #0
   1c970:	str	r3, [r0]
   1c974:	mov	r0, r5
   1c978:	bl	11598 <free@plt>
   1c97c:	ldr	r3, [r4]
   1c980:	clz	r3, r3
   1c984:	lsr	r3, r3, #5
   1c988:	add	r2, sp, #8
   1c98c:	add	r3, r2, r3, lsl #2
   1c990:	ldr	r3, [r3, #-8]
   1c994:	str	r3, [r4]
   1c998:	add	sp, sp, #12
   1c99c:	ldrd	r4, [sp]
   1c9a0:	add	sp, sp, #8
   1c9a4:	pop	{pc}		; (ldr pc, [sp], #4)
   1c9a8:	str	r4, [sp, #-16]!
   1c9ac:	strd	r6, [sp, #4]
   1c9b0:	str	lr, [sp, #12]
   1c9b4:	sub	sp, sp, #8
   1c9b8:	mov	r4, r0
   1c9bc:	mov	r6, r2
   1c9c0:	mov	r7, r3
   1c9c4:	ldr	r2, [r0, #8]
   1c9c8:	ldr	r3, [r0, #4]
   1c9cc:	cmp	r2, r3
   1c9d0:	beq	1ca00 <__assert_fail@plt+0xb060>
   1c9d4:	ldr	r3, [sp, #24]
   1c9d8:	str	r3, [sp]
   1c9dc:	mov	r2, r6
   1c9e0:	mov	r3, r7
   1c9e4:	mov	r0, r4
   1c9e8:	bl	11880 <fseeko64@plt>
   1c9ec:	add	sp, sp, #8
   1c9f0:	ldr	r4, [sp]
   1c9f4:	ldrd	r6, [sp, #4]
   1c9f8:	add	sp, sp, #12
   1c9fc:	pop	{pc}		; (ldr pc, [sp], #4)
   1ca00:	ldr	r2, [r0, #20]
   1ca04:	ldr	r3, [r0, #16]
   1ca08:	cmp	r2, r3
   1ca0c:	bne	1c9d4 <__assert_fail@plt+0xb034>
   1ca10:	ldr	r3, [r0, #36]	; 0x24
   1ca14:	cmp	r3, #0
   1ca18:	bne	1c9d4 <__assert_fail@plt+0xb034>
   1ca1c:	bl	11844 <fileno@plt>
   1ca20:	ldr	r3, [sp, #24]
   1ca24:	str	r3, [sp]
   1ca28:	mov	r2, r6
   1ca2c:	mov	r3, r7
   1ca30:	bl	11694 <lseek64@plt>
   1ca34:	mvn	r2, #0
   1ca38:	mvn	r3, #0
   1ca3c:	cmp	r1, r3
   1ca40:	cmpeq	r0, r2
   1ca44:	beq	1ca60 <__assert_fail@plt+0xb0c0>
   1ca48:	ldr	r3, [r4]
   1ca4c:	bic	r3, r3, #16
   1ca50:	str	r3, [r4]
   1ca54:	strd	r0, [r4, #80]	; 0x50
   1ca58:	mov	r0, #0
   1ca5c:	b	1c9ec <__assert_fail@plt+0xb04c>
   1ca60:	mvn	r0, #0
   1ca64:	b	1c9ec <__assert_fail@plt+0xb04c>
   1ca68:	str	r4, [sp, #-8]!
   1ca6c:	str	lr, [sp, #4]
   1ca70:	cmp	r0, #0
   1ca74:	beq	1ca90 <__assert_fail@plt+0xb0f0>
   1ca78:	bge	1ca94 <__assert_fail@plt+0xb0f4>
   1ca7c:	bl	117d8 <__errno_location@plt>
   1ca80:	mov	r3, #12
   1ca84:	str	r3, [r0]
   1ca88:	mov	r0, #0
   1ca8c:	b	1ca98 <__assert_fail@plt+0xb0f8>
   1ca90:	mov	r0, #1
   1ca94:	bl	1170c <malloc@plt>
   1ca98:	ldr	r4, [sp]
   1ca9c:	add	sp, sp, #4
   1caa0:	pop	{pc}		; (ldr pc, [sp], #4)
   1caa4:	strd	r4, [sp, #-20]!	; 0xffffffec
   1caa8:	strd	r6, [sp, #8]
   1caac:	str	lr, [sp, #16]
   1cab0:	sub	sp, sp, #12
   1cab4:	mov	r7, r1
   1cab8:	mov	r5, r2
   1cabc:	subs	r6, r0, #0
   1cac0:	addeq	r6, sp, #4
   1cac4:	mov	r0, r6
   1cac8:	bl	116c4 <mbrtowc@plt>
   1cacc:	mov	r4, r0
   1cad0:	cmp	r5, #0
   1cad4:	cmnne	r0, #3
   1cad8:	bhi	1caf4 <__assert_fail@plt+0xb154>
   1cadc:	mov	r0, r4
   1cae0:	add	sp, sp, #12
   1cae4:	ldrd	r4, [sp]
   1cae8:	ldrd	r6, [sp, #8]
   1caec:	add	sp, sp, #16
   1caf0:	pop	{pc}		; (ldr pc, [sp], #4)
   1caf4:	mov	r0, #0
   1caf8:	bl	2c228 <__assert_fail@plt+0x1a888>
   1cafc:	cmp	r0, #0
   1cb00:	bne	1cadc <__assert_fail@plt+0xb13c>
   1cb04:	ldrb	r3, [r7]
   1cb08:	str	r3, [r6]
   1cb0c:	mov	r4, #1
   1cb10:	b	1cadc <__assert_fail@plt+0xb13c>
   1cb14:	str	r4, [sp, #-8]!
   1cb18:	str	lr, [sp, #4]
   1cb1c:	cmp	r0, #0
   1cb20:	beq	1cb44 <__assert_fail@plt+0xb1a4>
   1cb24:	cmp	r1, #0
   1cb28:	beq	1cb50 <__assert_fail@plt+0xb1b0>
   1cb2c:	cmp	r1, #0
   1cb30:	blt	1cb5c <__assert_fail@plt+0xb1bc>
   1cb34:	bl	11634 <realloc@plt>
   1cb38:	ldr	r4, [sp]
   1cb3c:	add	sp, sp, #4
   1cb40:	pop	{pc}		; (ldr pc, [sp], #4)
   1cb44:	mov	r0, r1
   1cb48:	bl	1ca68 <__assert_fail@plt+0xb0c8>
   1cb4c:	b	1cb38 <__assert_fail@plt+0xb198>
   1cb50:	bl	1c948 <__assert_fail@plt+0xafa8>
   1cb54:	mov	r0, #0
   1cb58:	b	1cb38 <__assert_fail@plt+0xb198>
   1cb5c:	bl	117d8 <__errno_location@plt>
   1cb60:	mov	r3, #12
   1cb64:	str	r3, [r0]
   1cb68:	mov	r0, #0
   1cb6c:	b	1cb38 <__assert_fail@plt+0xb198>
   1cb70:	str	r4, [sp, #-8]!
   1cb74:	str	lr, [sp, #4]
   1cb78:	umull	r2, r3, r1, r2
   1cb7c:	cmp	r3, #0
   1cb80:	bne	1cb98 <__assert_fail@plt+0xb1f8>
   1cb84:	mov	r1, r2
   1cb88:	bl	1cb14 <__assert_fail@plt+0xb174>
   1cb8c:	ldr	r4, [sp]
   1cb90:	add	sp, sp, #4
   1cb94:	pop	{pc}		; (ldr pc, [sp], #4)
   1cb98:	bl	117d8 <__errno_location@plt>
   1cb9c:	mov	r3, #12
   1cba0:	str	r3, [r0]
   1cba4:	mov	r0, #0
   1cba8:	b	1cb8c <__assert_fail@plt+0xb1ec>
   1cbac:	mov	r2, r0
   1cbb0:	ldr	r0, [r0, #80]	; 0x50
   1cbb4:	cmp	r0, #1
   1cbb8:	beq	1cc04 <__assert_fail@plt+0xb264>
   1cbbc:	add	r0, r1, #1
   1cbc0:	ldr	r3, [r2, #28]
   1cbc4:	cmp	r0, r3
   1cbc8:	bge	1cc0c <__assert_fail@plt+0xb26c>
   1cbcc:	ldr	ip, [r2, #8]
   1cbd0:	add	r2, ip, r0, lsl #2
   1cbd4:	ldr	r0, [ip, r0, lsl #2]
   1cbd8:	cmn	r0, #1
   1cbdc:	bne	1cc14 <__assert_fail@plt+0xb274>
   1cbe0:	sub	r0, r3, r1
   1cbe4:	mov	r3, #1
   1cbe8:	add	r3, r3, #1
   1cbec:	cmp	r3, r0
   1cbf0:	beq	1cc08 <__assert_fail@plt+0xb268>
   1cbf4:	ldr	r1, [r2, #4]!
   1cbf8:	cmn	r1, #1
   1cbfc:	beq	1cbe8 <__assert_fail@plt+0xb248>
   1cc00:	mov	r0, r3
   1cc04:	bx	lr
   1cc08:	bx	lr
   1cc0c:	mov	r0, #1
   1cc10:	bx	lr
   1cc14:	mov	r0, #1
   1cc18:	bx	lr
   1cc1c:	ldr	r3, [r0, #80]	; 0x50
   1cc20:	cmp	r3, #1
   1cc24:	ldreq	r3, [r0, #4]
   1cc28:	ldrbeq	r0, [r3, r1]
   1cc2c:	ldrne	r3, [r0, #8]
   1cc30:	ldrne	r0, [r3, r1, lsl #2]
   1cc34:	bx	lr
   1cc38:	ldr	ip, [r0, #36]	; 0x24
   1cc3c:	ldr	r3, [r0, #48]	; 0x30
   1cc40:	cmp	ip, r3
   1cc44:	movge	ip, r3
   1cc48:	ldr	r3, [r0, #28]
   1cc4c:	cmp	ip, r3
   1cc50:	ble	1cc8c <__assert_fail@plt+0xb2ec>
   1cc54:	ldr	r2, [r0]
   1cc58:	ldr	r1, [r0, #24]
   1cc5c:	add	r2, r2, r3
   1cc60:	ldrb	r2, [r2, r1]
   1cc64:	ldr	r1, [r0, #64]	; 0x40
   1cc68:	ldrb	r1, [r1, r2]
   1cc6c:	ldr	r2, [r0, #4]
   1cc70:	strb	r1, [r2, r3]
   1cc74:	add	r3, r3, #1
   1cc78:	cmp	ip, r3
   1cc7c:	bne	1cc54 <__assert_fail@plt+0xb2b4>
   1cc80:	str	ip, [r0, #28]
   1cc84:	str	ip, [r0, #32]
   1cc88:	bx	lr
   1cc8c:	mov	ip, r3
   1cc90:	b	1cc80 <__assert_fail@plt+0xb2e0>
   1cc94:	push	{lr}		; (str lr, [sp, #-4]!)
   1cc98:	mov	ip, r0
   1cc9c:	mov	lr, r1
   1cca0:	clz	r1, r1
   1cca4:	lsr	r1, r1, #5
   1cca8:	cmp	r0, #0
   1ccac:	movne	r0, r1
   1ccb0:	moveq	r0, #1
   1ccb4:	cmp	r0, #0
   1ccb8:	movne	r0, #0
   1ccbc:	bne	1ccf8 <__assert_fail@plt+0xb358>
   1ccc0:	ldr	r3, [ip, #4]
   1ccc4:	ldr	r2, [lr, #4]
   1ccc8:	cmp	r3, r2
   1cccc:	bne	1ccf8 <__assert_fail@plt+0xb358>
   1ccd0:	subs	r3, r3, #1
   1ccd4:	bmi	1ccf4 <__assert_fail@plt+0xb354>
   1ccd8:	ldr	r1, [ip, #8]
   1ccdc:	ldr	r2, [lr, #8]
   1cce0:	ldr	r1, [r1, r3, lsl #2]
   1cce4:	ldr	r2, [r2, r3, lsl #2]
   1cce8:	cmp	r1, r2
   1ccec:	beq	1ccd0 <__assert_fail@plt+0xb330>
   1ccf0:	b	1ccf8 <__assert_fail@plt+0xb358>
   1ccf4:	mov	r0, #1
   1ccf8:	pop	{pc}		; (ldr pc, [sp], #4)
   1ccfc:	str	r4, [sp, #-8]!
   1cd00:	str	lr, [sp, #4]
   1cd04:	ldr	lr, [r0, #4]
   1cd08:	cmp	lr, #0
   1cd0c:	movle	r0, #0
   1cd10:	ble	1cd88 <__assert_fail@plt+0xb3e8>
   1cd14:	sub	lr, lr, #1
   1cd18:	mov	ip, #0
   1cd1c:	cmp	lr, ip
   1cd20:	bls	1cd74 <__assert_fail@plt+0xb3d4>
   1cd24:	add	r2, lr, ip
   1cd28:	lsr	r2, r2, #1
   1cd2c:	ldr	r4, [r0, #8]
   1cd30:	ldr	r3, [r4, r2, lsl #2]
   1cd34:	cmp	r1, r3
   1cd38:	bgt	1cd60 <__assert_fail@plt+0xb3c0>
   1cd3c:	cmp	ip, r2
   1cd40:	bcs	1cd74 <__assert_fail@plt+0xb3d4>
   1cd44:	add	r3, ip, r2
   1cd48:	lsr	r3, r3, #1
   1cd4c:	ldr	lr, [r4, r3, lsl #2]
   1cd50:	cmp	lr, r1
   1cd54:	blt	1cd68 <__assert_fail@plt+0xb3c8>
   1cd58:	mov	r2, r3
   1cd5c:	b	1cd3c <__assert_fail@plt+0xb39c>
   1cd60:	mov	r3, r2
   1cd64:	mov	r2, lr
   1cd68:	add	ip, r3, #1
   1cd6c:	mov	lr, r2
   1cd70:	b	1cd1c <__assert_fail@plt+0xb37c>
   1cd74:	ldr	r3, [r0, #8]
   1cd78:	ldr	r3, [r3, ip, lsl #2]
   1cd7c:	cmp	r3, r1
   1cd80:	addeq	r0, ip, #1
   1cd84:	movne	r0, #0
   1cd88:	ldr	r4, [sp]
   1cd8c:	add	sp, sp, #4
   1cd90:	pop	{pc}		; (ldr pc, [sp], #4)
   1cd94:	cmp	r1, #0
   1cd98:	blt	1cde0 <__assert_fail@plt+0xb440>
   1cd9c:	ldr	r3, [r0, #4]
   1cda0:	cmp	r3, r1
   1cda4:	ble	1cde0 <__assert_fail@plt+0xb440>
   1cda8:	sub	r3, r3, #1
   1cdac:	str	r3, [r0, #4]
   1cdb0:	cmp	r3, r1
   1cdb4:	ble	1cde0 <__assert_fail@plt+0xb440>
   1cdb8:	add	r3, r1, #1
   1cdbc:	lsl	r3, r3, #2
   1cdc0:	ldr	r2, [r0, #8]
   1cdc4:	ldr	ip, [r2, r3]
   1cdc8:	str	ip, [r2, r1, lsl #2]
   1cdcc:	add	r1, r1, #1
   1cdd0:	add	r3, r3, #4
   1cdd4:	ldr	r2, [r0, #4]
   1cdd8:	cmp	r2, r1
   1cddc:	bgt	1cdc0 <__assert_fail@plt+0xb420>
   1cde0:	bx	lr
   1cde4:	strd	r4, [sp, #-16]!
   1cde8:	str	r6, [sp, #8]
   1cdec:	str	lr, [sp, #12]
   1cdf0:	mov	r4, r0
   1cdf4:	mov	r6, r1
   1cdf8:	mov	r5, r2
   1cdfc:	b	1ce04 <__assert_fail@plt+0xb464>
   1ce00:	mov	r4, r3
   1ce04:	ldr	r3, [r4, #4]
   1ce08:	cmp	r3, #0
   1ce0c:	bne	1ce00 <__assert_fail@plt+0xb460>
   1ce10:	ldr	r3, [r4, #8]
   1ce14:	cmp	r3, #0
   1ce18:	bne	1ce00 <__assert_fail@plt+0xb460>
   1ce1c:	mov	r1, r4
   1ce20:	mov	r0, r5
   1ce24:	blx	r6
   1ce28:	cmp	r0, #0
   1ce2c:	bne	1ce68 <__assert_fail@plt+0xb4c8>
   1ce30:	ldr	r2, [r4]
   1ce34:	cmp	r2, #0
   1ce38:	beq	1ce68 <__assert_fail@plt+0xb4c8>
   1ce3c:	ldr	r3, [r2, #8]
   1ce40:	cmp	r3, r4
   1ce44:	movne	r4, #0
   1ce48:	moveq	r4, #1
   1ce4c:	cmp	r3, #0
   1ce50:	movne	r1, r4
   1ce54:	moveq	r1, #1
   1ce58:	mov	r4, r2
   1ce5c:	cmp	r1, #0
   1ce60:	bne	1ce1c <__assert_fail@plt+0xb47c>
   1ce64:	b	1ce00 <__assert_fail@plt+0xb460>
   1ce68:	ldrd	r4, [sp]
   1ce6c:	ldr	r6, [sp, #8]
   1ce70:	add	sp, sp, #12
   1ce74:	pop	{pc}		; (ldr pc, [sp], #4)
   1ce78:	strd	r4, [sp, #-16]!
   1ce7c:	str	r6, [sp, #8]
   1ce80:	str	lr, [sp, #12]
   1ce84:	mov	r4, r0
   1ce88:	mov	r6, r1
   1ce8c:	mov	r5, r2
   1ce90:	b	1ce9c <__assert_fail@plt+0xb4fc>
   1ce94:	mov	r3, r2
   1ce98:	mov	r4, r3
   1ce9c:	mov	r1, r4
   1cea0:	mov	r0, r5
   1cea4:	blx	r6
   1cea8:	cmp	r0, #0
   1ceac:	bne	1cee4 <__assert_fail@plt+0xb544>
   1ceb0:	ldr	r3, [r4, #4]
   1ceb4:	cmp	r3, #0
   1ceb8:	bne	1ce98 <__assert_fail@plt+0xb4f8>
   1cebc:	ldr	r2, [r4, #8]
   1cec0:	cmp	r2, #0
   1cec4:	cmpne	r2, r3
   1cec8:	bne	1ce94 <__assert_fail@plt+0xb4f4>
   1cecc:	ldr	r2, [r4]
   1ced0:	mov	r3, r4
   1ced4:	cmp	r2, #0
   1ced8:	beq	1cee4 <__assert_fail@plt+0xb544>
   1cedc:	mov	r4, r2
   1cee0:	b	1cebc <__assert_fail@plt+0xb51c>
   1cee4:	ldrd	r4, [sp]
   1cee8:	ldr	r6, [sp, #8]
   1ceec:	add	sp, sp, #12
   1cef0:	pop	{pc}		; (ldr pc, [sp], #4)
   1cef4:	ldrb	r3, [r1, #24]
   1cef8:	cmp	r3, #4
   1cefc:	beq	1cf10 <__assert_fail@plt+0xb570>
   1cf00:	cmp	r3, #17
   1cf04:	beq	1cf3c <__assert_fail@plt+0xb59c>
   1cf08:	mov	r0, #0
   1cf0c:	bx	lr
   1cf10:	ldr	r3, [r0, #132]	; 0x84
   1cf14:	cmp	r3, #0
   1cf18:	beq	1cf08 <__assert_fail@plt+0xb568>
   1cf1c:	ldr	r2, [r1, #20]
   1cf20:	ldr	r2, [r3, r2, lsl #2]
   1cf24:	str	r2, [r1, #20]
   1cf28:	ldr	r3, [r0, #80]	; 0x50
   1cf2c:	mov	r1, #1
   1cf30:	orr	r3, r3, r1, lsl r2
   1cf34:	str	r3, [r0, #80]	; 0x50
   1cf38:	b	1cf08 <__assert_fail@plt+0xb568>
   1cf3c:	ldr	r3, [r1, #4]
   1cf40:	cmp	r3, #0
   1cf44:	beq	1cf08 <__assert_fail@plt+0xb568>
   1cf48:	ldrb	r2, [r3, #24]
   1cf4c:	cmp	r2, #17
   1cf50:	bne	1cf08 <__assert_fail@plt+0xb568>
   1cf54:	ldr	r2, [r3, #20]
   1cf58:	ldr	r3, [r3, #4]
   1cf5c:	str	r3, [r1, #4]
   1cf60:	cmp	r3, #0
   1cf64:	strne	r1, [r3]
   1cf68:	ldr	r3, [r0, #132]	; 0x84
   1cf6c:	ldr	r1, [r1, #20]
   1cf70:	ldr	r1, [r3, r1, lsl #2]
   1cf74:	str	r1, [r3, r2, lsl #2]
   1cf78:	cmp	r2, #31
   1cf7c:	bgt	1cf08 <__assert_fail@plt+0xb568>
   1cf80:	ldr	r3, [r0, #80]	; 0x50
   1cf84:	mov	r1, #1
   1cf88:	bic	r2, r3, r1, lsl r2
   1cf8c:	str	r2, [r0, #80]	; 0x50
   1cf90:	b	1cf08 <__assert_fail@plt+0xb568>
   1cf94:	ldrb	r3, [r1, #24]
   1cf98:	cmp	r3, #11
   1cf9c:	beq	1cfcc <__assert_fail@plt+0xb62c>
   1cfa0:	cmp	r3, #16
   1cfa4:	beq	1cfdc <__assert_fail@plt+0xb63c>
   1cfa8:	ldr	r3, [r1, #4]
   1cfac:	cmp	r3, #0
   1cfb0:	ldrne	r2, [r1, #16]
   1cfb4:	strne	r2, [r3, #16]
   1cfb8:	ldr	r3, [r1, #8]
   1cfbc:	cmp	r3, #0
   1cfc0:	ldrne	r2, [r1, #16]
   1cfc4:	strne	r2, [r3, #16]
   1cfc8:	b	1cfd4 <__assert_fail@plt+0xb634>
   1cfcc:	ldr	r3, [r1, #4]
   1cfd0:	str	r1, [r3, #16]
   1cfd4:	mov	r0, #0
   1cfd8:	bx	lr
   1cfdc:	ldr	r3, [r1, #4]
   1cfe0:	ldr	r2, [r1, #8]
   1cfe4:	ldr	r2, [r2, #12]
   1cfe8:	str	r2, [r3, #16]
   1cfec:	ldr	r3, [r1, #8]
   1cff0:	ldr	r2, [r1, #16]
   1cff4:	str	r2, [r3, #16]
   1cff8:	b	1cfd4 <__assert_fail@plt+0xb634>
   1cffc:	ldr	r3, [r1, #40]	; 0x28
   1d000:	ldr	ip, [r1, #56]	; 0x38
   1d004:	cmp	ip, r3
   1d008:	ble	1d084 <__assert_fail@plt+0xb6e4>
   1d00c:	push	{lr}		; (str lr, [sp, #-4]!)
   1d010:	ldr	ip, [r1, #4]
   1d014:	ldrb	r3, [ip, r3]
   1d018:	strb	r3, [r0]
   1d01c:	ldr	ip, [r1, #80]	; 0x50
   1d020:	cmp	ip, #1
   1d024:	ble	1d054 <__assert_fail@plt+0xb6b4>
   1d028:	ldr	ip, [r1, #40]	; 0x28
   1d02c:	ldr	lr, [r1, #28]
   1d030:	cmp	ip, lr
   1d034:	beq	1d054 <__assert_fail@plt+0xb6b4>
   1d038:	ldr	lr, [r1, #8]
   1d03c:	ldr	ip, [lr, ip, lsl #2]
   1d040:	cmn	ip, #1
   1d044:	moveq	r3, #1
   1d048:	strbeq	r3, [r0, #4]
   1d04c:	moveq	r0, r3
   1d050:	beq	1d17c <__assert_fail@plt+0xb7dc>
   1d054:	cmp	r3, #92	; 0x5c
   1d058:	beq	1d094 <__assert_fail@plt+0xb6f4>
   1d05c:	cmp	r3, #91	; 0x5b
   1d060:	beq	1d0e0 <__assert_fail@plt+0xb740>
   1d064:	cmp	r3, #93	; 0x5d
   1d068:	beq	1d180 <__assert_fail@plt+0xb7e0>
   1d06c:	cmp	r3, #94	; 0x5e
   1d070:	bne	1d168 <__assert_fail@plt+0xb7c8>
   1d074:	mov	r3, #25
   1d078:	strb	r3, [r0, #4]
   1d07c:	mov	r0, #1
   1d080:	b	1d17c <__assert_fail@plt+0xb7dc>
   1d084:	mov	r3, #2
   1d088:	strb	r3, [r0, #4]
   1d08c:	mov	r0, #0
   1d090:	bx	lr
   1d094:	tst	r2, #1
   1d098:	beq	1d0b0 <__assert_fail@plt+0xb710>
   1d09c:	ldr	r3, [r1, #40]	; 0x28
   1d0a0:	add	r3, r3, #1
   1d0a4:	ldr	r2, [r1, #48]	; 0x30
   1d0a8:	cmp	r3, r2
   1d0ac:	blt	1d0c0 <__assert_fail@plt+0xb720>
   1d0b0:	mov	r3, #1
   1d0b4:	strb	r3, [r0, #4]
   1d0b8:	mov	r0, r3
   1d0bc:	b	1d17c <__assert_fail@plt+0xb7dc>
   1d0c0:	str	r3, [r1, #40]	; 0x28
   1d0c4:	ldr	r2, [r1, #4]
   1d0c8:	ldrb	r3, [r2, r3]
   1d0cc:	strb	r3, [r0]
   1d0d0:	mov	r3, #1
   1d0d4:	strb	r3, [r0, #4]
   1d0d8:	mov	r0, r3
   1d0dc:	b	1d17c <__assert_fail@plt+0xb7dc>
   1d0e0:	ldr	r3, [r1, #40]	; 0x28
   1d0e4:	add	lr, r3, #1
   1d0e8:	ldr	ip, [r1, #48]	; 0x30
   1d0ec:	cmp	lr, ip
   1d0f0:	bge	1d128 <__assert_fail@plt+0xb788>
   1d0f4:	ldr	r1, [r1, #4]
   1d0f8:	add	r3, r1, r3
   1d0fc:	ldrb	r3, [r3, #1]
   1d100:	strb	r3, [r0]
   1d104:	cmp	r3, #58	; 0x3a
   1d108:	beq	1d150 <__assert_fail@plt+0xb7b0>
   1d10c:	cmp	r3, #61	; 0x3d
   1d110:	beq	1d140 <__assert_fail@plt+0xb7a0>
   1d114:	cmp	r3, #46	; 0x2e
   1d118:	moveq	r3, #26
   1d11c:	strbeq	r3, [r0, #4]
   1d120:	moveq	r0, #2
   1d124:	beq	1d17c <__assert_fail@plt+0xb7dc>
   1d128:	mov	r3, #1
   1d12c:	strb	r3, [r0, #4]
   1d130:	mov	r2, #91	; 0x5b
   1d134:	strb	r2, [r0]
   1d138:	mov	r0, r3
   1d13c:	b	1d17c <__assert_fail@plt+0xb7dc>
   1d140:	mov	r3, #28
   1d144:	strb	r3, [r0, #4]
   1d148:	mov	r0, #2
   1d14c:	b	1d17c <__assert_fail@plt+0xb7dc>
   1d150:	tst	r2, #4
   1d154:	beq	1d128 <__assert_fail@plt+0xb788>
   1d158:	mov	r3, #30
   1d15c:	strb	r3, [r0, #4]
   1d160:	mov	r0, #2
   1d164:	b	1d17c <__assert_fail@plt+0xb7dc>
   1d168:	cmp	r3, #45	; 0x2d
   1d16c:	bne	1d0b0 <__assert_fail@plt+0xb710>
   1d170:	mov	r3, #22
   1d174:	strb	r3, [r0, #4]
   1d178:	mov	r0, #1
   1d17c:	pop	{pc}		; (ldr pc, [sp], #4)
   1d180:	mov	r3, #21
   1d184:	strb	r3, [r0, #4]
   1d188:	mov	r0, #1
   1d18c:	b	1d17c <__assert_fail@plt+0xb7dc>
   1d190:	strd	r4, [sp, #-32]!	; 0xffffffe0
   1d194:	strd	r6, [sp, #8]
   1d198:	strd	r8, [sp, #16]
   1d19c:	str	sl, [sp, #24]
   1d1a0:	str	lr, [sp, #28]
   1d1a4:	sub	sp, sp, #8
   1d1a8:	mov	r6, r0
   1d1ac:	mov	r4, r1
   1d1b0:	mov	r8, r2
   1d1b4:	mov	r9, r3
   1d1b8:	ldr	r5, [r1, #40]	; 0x28
   1d1bc:	mov	r1, r5
   1d1c0:	mov	r0, r4
   1d1c4:	bl	1cbac <__assert_fail@plt+0xb20c>
   1d1c8:	cmp	r0, #1
   1d1cc:	bgt	1d218 <__assert_fail@plt+0xb878>
   1d1d0:	add	r5, r5, r9
   1d1d4:	str	r5, [r4, #40]	; 0x28
   1d1d8:	ldrb	r3, [r8, #4]
   1d1dc:	and	r2, r3, #251	; 0xfb
   1d1e0:	cmp	r3, #28
   1d1e4:	cmpne	r2, #26
   1d1e8:	beq	1d260 <__assert_fail@plt+0xb8c0>
   1d1ec:	ldrb	r2, [sp, #48]	; 0x30
   1d1f0:	cmp	r3, #22
   1d1f4:	moveq	r3, r2
   1d1f8:	orrne	r3, r2, #1
   1d1fc:	cmp	r3, #0
   1d200:	beq	1d408 <__assert_fail@plt+0xba68>
   1d204:	mov	r0, #0
   1d208:	str	r0, [r6]
   1d20c:	ldrb	r3, [r8]
   1d210:	strb	r3, [r6, #4]
   1d214:	b	1d244 <__assert_fail@plt+0xb8a4>
   1d218:	mov	r7, r0
   1d21c:	mov	r3, #1
   1d220:	str	r3, [r6]
   1d224:	ldr	r1, [r4, #40]	; 0x28
   1d228:	mov	r0, r4
   1d22c:	bl	1cc1c <__assert_fail@plt+0xb27c>
   1d230:	str	r0, [r6, #4]
   1d234:	ldr	r3, [r4, #40]	; 0x28
   1d238:	add	r7, r3, r7
   1d23c:	str	r7, [r4, #40]	; 0x28
   1d240:	mov	r0, #0
   1d244:	add	sp, sp, #8
   1d248:	ldrd	r4, [sp]
   1d24c:	ldrd	r6, [sp, #8]
   1d250:	ldrd	r8, [sp, #16]
   1d254:	ldr	sl, [sp, #24]
   1d258:	add	sp, sp, #28
   1d25c:	pop	{pc}		; (ldr pc, [sp], #4)
   1d260:	ldr	r3, [r4, #56]	; 0x38
   1d264:	cmp	r5, r3
   1d268:	movge	r0, #7
   1d26c:	bge	1d244 <__assert_fail@plt+0xb8a4>
   1d270:	ldrb	r9, [r8]
   1d274:	mov	r5, #0
   1d278:	b	1d360 <__assert_fail@plt+0xb9c0>
   1d27c:	ldrb	r3, [r4, #75]	; 0x4b
   1d280:	cmp	r3, #0
   1d284:	bne	1d2a0 <__assert_fail@plt+0xb900>
   1d288:	ldr	r2, [r4, #4]
   1d28c:	ldr	r3, [r4, #40]	; 0x28
   1d290:	add	r1, r3, #1
   1d294:	str	r1, [r4, #40]	; 0x28
   1d298:	ldrb	r7, [r2, r3]
   1d29c:	b	1d380 <__assert_fail@plt+0xb9e0>
   1d2a0:	ldrb	r3, [r4, #76]	; 0x4c
   1d2a4:	cmp	r3, #0
   1d2a8:	beq	1d32c <__assert_fail@plt+0xb98c>
   1d2ac:	ldr	sl, [r4, #40]	; 0x28
   1d2b0:	ldr	r3, [r4, #28]
   1d2b4:	cmp	sl, r3
   1d2b8:	beq	1d2cc <__assert_fail@plt+0xb92c>
   1d2bc:	ldr	r3, [r4, #8]
   1d2c0:	ldr	r3, [r3, sl, lsl #2]
   1d2c4:	cmn	r3, #1
   1d2c8:	beq	1d300 <__assert_fail@plt+0xb960>
   1d2cc:	ldr	r2, [r4, #12]
   1d2d0:	ldr	r3, [r4]
   1d2d4:	ldr	r1, [r2, sl, lsl #2]
   1d2d8:	ldr	r2, [r4, #24]
   1d2dc:	add	r3, r3, r1
   1d2e0:	ldrb	r7, [r3, r2]
   1d2e4:	bics	r3, r7, #127	; 0x7f
   1d2e8:	beq	1d314 <__assert_fail@plt+0xb974>
   1d2ec:	ldr	r3, [r4, #4]
   1d2f0:	add	r2, sl, #1
   1d2f4:	str	r2, [r4, #40]	; 0x28
   1d2f8:	ldrb	r7, [r3, sl]
   1d2fc:	b	1d380 <__assert_fail@plt+0xb9e0>
   1d300:	ldr	r3, [r4, #4]
   1d304:	add	r2, sl, #1
   1d308:	str	r2, [r4, #40]	; 0x28
   1d30c:	ldrb	r7, [r3, sl]
   1d310:	b	1d380 <__assert_fail@plt+0xb9e0>
   1d314:	mov	r1, sl
   1d318:	mov	r0, r4
   1d31c:	bl	1cbac <__assert_fail@plt+0xb20c>
   1d320:	add	r0, sl, r0
   1d324:	str	r0, [r4, #40]	; 0x28
   1d328:	b	1d380 <__assert_fail@plt+0xb9e0>
   1d32c:	ldr	r3, [r4]
   1d330:	ldr	r1, [r4, #24]
   1d334:	ldr	r2, [r4, #40]	; 0x28
   1d338:	add	r0, r2, #1
   1d33c:	str	r0, [r4, #40]	; 0x28
   1d340:	add	r3, r3, r1
   1d344:	ldrb	r7, [r3, r2]
   1d348:	b	1d380 <__assert_fail@plt+0xb9e0>
   1d34c:	ldr	r3, [r6, #4]
   1d350:	strb	r7, [r3, r5]
   1d354:	add	r5, r5, #1
   1d358:	cmp	r5, #32
   1d35c:	beq	1d434 <__assert_fail@plt+0xba94>
   1d360:	ldrb	r3, [r8, #4]
   1d364:	cmp	r3, #30
   1d368:	beq	1d27c <__assert_fail@plt+0xb8dc>
   1d36c:	ldr	r2, [r4, #4]
   1d370:	ldr	r3, [r4, #40]	; 0x28
   1d374:	add	r1, r3, #1
   1d378:	str	r1, [r4, #40]	; 0x28
   1d37c:	ldrb	r7, [r2, r3]
   1d380:	ldr	r3, [r4, #40]	; 0x28
   1d384:	ldr	r2, [r4, #56]	; 0x38
   1d388:	cmp	r2, r3
   1d38c:	ble	1d42c <__assert_fail@plt+0xba8c>
   1d390:	cmp	r9, r7
   1d394:	bne	1d34c <__assert_fail@plt+0xb9ac>
   1d398:	ldr	r2, [r4, #4]
   1d39c:	ldrb	r2, [r2, r3]
   1d3a0:	cmp	r2, #93	; 0x5d
   1d3a4:	bne	1d34c <__assert_fail@plt+0xb9ac>
   1d3a8:	add	r3, r3, #1
   1d3ac:	str	r3, [r4, #40]	; 0x28
   1d3b0:	ldr	r3, [r6, #4]
   1d3b4:	mov	r2, #0
   1d3b8:	strb	r2, [r3, r5]
   1d3bc:	ldrb	r3, [r8, #4]
   1d3c0:	cmp	r3, #28
   1d3c4:	beq	1d3e8 <__assert_fail@plt+0xba48>
   1d3c8:	cmp	r3, #30
   1d3cc:	beq	1d3f8 <__assert_fail@plt+0xba58>
   1d3d0:	cmp	r3, #26
   1d3d4:	moveq	r3, #3
   1d3d8:	streq	r3, [r6]
   1d3dc:	moveq	r0, r2
   1d3e0:	movne	r0, #0
   1d3e4:	b	1d244 <__assert_fail@plt+0xb8a4>
   1d3e8:	mov	r3, #2
   1d3ec:	str	r3, [r6]
   1d3f0:	mov	r0, #0
   1d3f4:	b	1d244 <__assert_fail@plt+0xb8a4>
   1d3f8:	mov	r3, #4
   1d3fc:	str	r3, [r6]
   1d400:	mov	r0, #0
   1d404:	b	1d244 <__assert_fail@plt+0xb8a4>
   1d408:	ldr	r2, [sp, #44]	; 0x2c
   1d40c:	mov	r1, r4
   1d410:	mov	r0, sp
   1d414:	bl	1cffc <__assert_fail@plt+0xb65c>
   1d418:	ldrb	r3, [sp, #4]
   1d41c:	cmp	r3, #21
   1d420:	movne	r0, #11
   1d424:	beq	1d204 <__assert_fail@plt+0xb864>
   1d428:	b	1d244 <__assert_fail@plt+0xb8a4>
   1d42c:	mov	r0, #7
   1d430:	b	1d244 <__assert_fail@plt+0xb8a4>
   1d434:	mov	r0, #7
   1d438:	b	1d244 <__assert_fail@plt+0xb8a4>
   1d43c:	ldrb	r3, [r1, #24]
   1d440:	cmp	r3, #17
   1d444:	beq	1d450 <__assert_fail@plt+0xbab0>
   1d448:	mov	r0, #0
   1d44c:	bx	lr
   1d450:	ldr	r3, [r1, #20]
   1d454:	cmp	r0, r3
   1d458:	bne	1d448 <__assert_fail@plt+0xbaa8>
   1d45c:	ldrb	r3, [r1, #26]
   1d460:	orr	r3, r3, #8
   1d464:	strb	r3, [r1, #26]
   1d468:	b	1d448 <__assert_fail@plt+0xbaa8>
   1d46c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1d470:	strd	r6, [sp, #8]
   1d474:	strd	r8, [sp, #16]
   1d478:	strd	sl, [sp, #24]
   1d47c:	str	lr, [sp, #32]
   1d480:	sub	sp, sp, #52	; 0x34
   1d484:	str	r0, [sp, #12]
   1d488:	mov	fp, r1
   1d48c:	mov	sl, r2
   1d490:	str	r3, [sp, #32]
   1d494:	ldr	r8, [r0, #84]	; 0x54
   1d498:	add	r3, r3, r3, lsl #1
   1d49c:	ldr	r7, [r8, #24]
   1d4a0:	add	r7, r7, r3, lsl #2
   1d4a4:	ldr	r3, [r7, #4]
   1d4a8:	cmp	r3, #0
   1d4ac:	ble	1d648 <__assert_fail@plt+0xbca8>
   1d4b0:	mov	r3, #1
   1d4b4:	lsl	r3, r3, sl
   1d4b8:	str	r3, [sp, #20]
   1d4bc:	mvn	r3, r3
   1d4c0:	str	r3, [sp, #24]
   1d4c4:	mov	r4, #0
   1d4c8:	ldr	r3, [sp, #88]	; 0x58
   1d4cc:	add	r3, r3, #1
   1d4d0:	add	r3, r3, r3, lsl #1
   1d4d4:	str	r3, [sp, #36]	; 0x24
   1d4d8:	b	1d5b8 <__assert_fail@plt+0xbc18>
   1d4dc:	ldr	r3, [r8, #20]
   1d4e0:	add	r3, r3, r4
   1d4e4:	ldr	r3, [r3, #8]
   1d4e8:	ldr	r3, [r3]
   1d4ec:	cmp	r7, r3
   1d4f0:	beq	1d578 <__assert_fail@plt+0xbbd8>
   1d4f4:	str	fp, [sp]
   1d4f8:	mov	r2, sl
   1d4fc:	ldr	r1, [sp, #16]
   1d500:	ldr	r0, [sp, #12]
   1d504:	bl	1d46c <__assert_fail@plt+0xbacc>
   1d508:	cmn	r0, #1
   1d50c:	beq	1d64c <__assert_fail@plt+0xbcac>
   1d510:	cmp	r0, #0
   1d514:	bne	1d524 <__assert_fail@plt+0xbb84>
   1d518:	ldr	r3, [sp, #28]
   1d51c:	cmp	r3, #0
   1d520:	bne	1d64c <__assert_fail@plt+0xbcac>
   1d524:	cmp	sl, #31
   1d528:	bgt	1d53c <__assert_fail@plt+0xbb9c>
   1d52c:	ldr	r3, [r9, #-8]
   1d530:	ldr	r2, [sp, #24]
   1d534:	and	r3, r3, r2
   1d538:	str	r3, [r9, #-8]
   1d53c:	add	r5, r5, #24
   1d540:	ldrb	r3, [r5, #-28]	; 0xffffffe4
   1d544:	cmp	r3, #0
   1d548:	beq	1d584 <__assert_fail@plt+0xbbe4>
   1d54c:	mov	r9, r5
   1d550:	ldr	r3, [r5, #-24]	; 0xffffffe8
   1d554:	cmp	r3, r6
   1d558:	bne	1d53c <__assert_fail@plt+0xbb9c>
   1d55c:	cmp	sl, #31
   1d560:	bgt	1d4dc <__assert_fail@plt+0xbb3c>
   1d564:	ldr	r3, [r5, #-8]
   1d568:	ldr	r2, [sp, #20]
   1d56c:	tst	r2, r3
   1d570:	bne	1d4dc <__assert_fail@plt+0xbb3c>
   1d574:	b	1d53c <__assert_fail@plt+0xbb9c>
   1d578:	ldr	fp, [sp, #16]
   1d57c:	sbfx	r0, fp, #0, #1
   1d580:	b	1d64c <__assert_fail@plt+0xbcac>
   1d584:	ldr	r7, [sp, #40]	; 0x28
   1d588:	ldr	r4, [sp, #44]	; 0x2c
   1d58c:	ldr	fp, [sp, #16]
   1d590:	b	1d5a8 <__assert_fail@plt+0xbc08>
   1d594:	tst	fp, #1
   1d598:	beq	1d5a8 <__assert_fail@plt+0xbc08>
   1d59c:	ldr	r3, [r2, r6, lsl #3]
   1d5a0:	cmp	r3, sl
   1d5a4:	beq	1d668 <__assert_fail@plt+0xbcc8>
   1d5a8:	add	r4, r4, #1
   1d5ac:	ldr	r3, [r7, #4]
   1d5b0:	cmp	r3, r4
   1d5b4:	ble	1d648 <__assert_fail@plt+0xbca8>
   1d5b8:	ldr	r3, [r7, #8]
   1d5bc:	ldr	r6, [r3, r4, lsl #2]
   1d5c0:	ldr	r2, [r8]
   1d5c4:	add	r3, r2, r6, lsl #3
   1d5c8:	ldrb	r3, [r3, #4]
   1d5cc:	cmp	r3, #8
   1d5d0:	beq	1d594 <__assert_fail@plt+0xbbf4>
   1d5d4:	cmp	r3, #9
   1d5d8:	beq	1d62c <__assert_fail@plt+0xbc8c>
   1d5dc:	cmp	r3, #4
   1d5e0:	bne	1d5a8 <__assert_fail@plt+0xbc08>
   1d5e4:	ldr	r3, [sp, #88]	; 0x58
   1d5e8:	cmn	r3, #1
   1d5ec:	beq	1d5a8 <__assert_fail@plt+0xbc08>
   1d5f0:	add	r3, r6, r6, lsl #1
   1d5f4:	lsl	r3, r3, #2
   1d5f8:	ldr	r2, [sp, #12]
   1d5fc:	ldr	r5, [r2, #116]	; 0x74
   1d600:	ldr	r2, [sp, #36]	; 0x24
   1d604:	add	r5, r5, r2, lsl #3
   1d608:	and	r2, fp, #2
   1d60c:	str	r2, [sp, #28]
   1d610:	str	r7, [sp, #40]	; 0x28
   1d614:	str	r4, [sp, #44]	; 0x2c
   1d618:	mov	r4, r3
   1d61c:	str	fp, [sp, #16]
   1d620:	ldr	r7, [sp, #32]
   1d624:	ldr	fp, [sp, #88]	; 0x58
   1d628:	b	1d54c <__assert_fail@plt+0xbbac>
   1d62c:	tst	fp, #2
   1d630:	beq	1d5a8 <__assert_fail@plt+0xbc08>
   1d634:	ldr	r3, [r2, r6, lsl #3]
   1d638:	cmp	r3, sl
   1d63c:	bne	1d5a8 <__assert_fail@plt+0xbc08>
   1d640:	mov	r0, #0
   1d644:	b	1d64c <__assert_fail@plt+0xbcac>
   1d648:	ubfx	r0, fp, #1, #1
   1d64c:	add	sp, sp, #52	; 0x34
   1d650:	ldrd	r4, [sp]
   1d654:	ldrd	r6, [sp, #8]
   1d658:	ldrd	r8, [sp, #16]
   1d65c:	ldrd	sl, [sp, #24]
   1d660:	add	sp, sp, #32
   1d664:	pop	{pc}		; (ldr pc, [sp], #4)
   1d668:	mvn	r0, #0
   1d66c:	b	1d64c <__assert_fail@plt+0xbcac>
   1d670:	str	r4, [sp, #-8]!
   1d674:	str	lr, [sp, #4]
   1d678:	sub	sp, sp, #8
   1d67c:	ldr	lr, [sp, #16]
   1d680:	add	r1, r1, r1, lsl #1
   1d684:	ldr	ip, [r0, #116]	; 0x74
   1d688:	add	r1, ip, r1, lsl #3
   1d68c:	ldr	ip, [r1, #8]
   1d690:	cmp	ip, lr
   1d694:	bgt	1d6d8 <__assert_fail@plt+0xbd38>
   1d698:	ldr	r4, [r1, #12]
   1d69c:	cmp	r4, lr
   1d6a0:	movlt	r0, #1
   1d6a4:	blt	1d6c8 <__assert_fail@plt+0xbd28>
   1d6a8:	cmp	ip, lr
   1d6ac:	movne	r1, #0
   1d6b0:	moveq	r1, #1
   1d6b4:	cmp	r4, lr
   1d6b8:	beq	1d6e0 <__assert_fail@plt+0xbd40>
   1d6bc:	cmp	ip, lr
   1d6c0:	movne	r0, #0
   1d6c4:	beq	1d6e4 <__assert_fail@plt+0xbd44>
   1d6c8:	add	sp, sp, #8
   1d6cc:	ldr	r4, [sp]
   1d6d0:	add	sp, sp, #4
   1d6d4:	pop	{pc}		; (ldr pc, [sp], #4)
   1d6d8:	mvn	r0, #0
   1d6dc:	b	1d6c8 <__assert_fail@plt+0xbd28>
   1d6e0:	orr	r1, r1, #2
   1d6e4:	ldr	ip, [sp, #20]
   1d6e8:	str	ip, [sp]
   1d6ec:	bl	1d46c <__assert_fail@plt+0xbacc>
   1d6f0:	b	1d6c8 <__assert_fail@plt+0xbd28>
   1d6f4:	strd	r4, [sp, #-12]!
   1d6f8:	str	lr, [sp, #8]
   1d6fc:	mov	r4, r0
   1d700:	ldr	r5, [r0, #108]	; 0x6c
   1d704:	mov	ip, r5
   1d708:	mov	r0, #0
   1d70c:	cmp	ip, r0
   1d710:	ble	1d77c <__assert_fail@plt+0xbddc>
   1d714:	add	r2, ip, r0
   1d718:	add	r2, r2, r2, lsr #31
   1d71c:	asr	r2, r2, #1
   1d720:	ldr	lr, [r4, #116]	; 0x74
   1d724:	add	r3, r2, r2, lsl #1
   1d728:	add	r3, lr, r3, lsl #3
   1d72c:	ldr	r3, [r3, #4]
   1d730:	cmp	r1, r3
   1d734:	bgt	1d768 <__assert_fail@plt+0xbdc8>
   1d738:	cmp	r0, r2
   1d73c:	bge	1d77c <__assert_fail@plt+0xbddc>
   1d740:	add	r3, r0, r2
   1d744:	add	r3, r3, r3, lsr #31
   1d748:	asr	r3, r3, #1
   1d74c:	add	ip, r3, r3, lsl #1
   1d750:	add	ip, lr, ip, lsl #3
   1d754:	ldr	ip, [ip, #4]
   1d758:	cmp	ip, r1
   1d75c:	blt	1d770 <__assert_fail@plt+0xbdd0>
   1d760:	mov	r2, r3
   1d764:	b	1d738 <__assert_fail@plt+0xbd98>
   1d768:	mov	r3, r2
   1d76c:	mov	r2, ip
   1d770:	add	r0, r3, #1
   1d774:	mov	ip, r2
   1d778:	b	1d70c <__assert_fail@plt+0xbd6c>
   1d77c:	cmp	r5, r0
   1d780:	ble	1d7a8 <__assert_fail@plt+0xbe08>
   1d784:	ldr	r3, [r4, #116]	; 0x74
   1d788:	add	r2, r0, r0, lsl #1
   1d78c:	add	r3, r3, r2, lsl #3
   1d790:	ldr	r3, [r3, #4]
   1d794:	cmp	r3, r1
   1d798:	mvnne	r0, #0
   1d79c:	ldrd	r4, [sp]
   1d7a0:	add	sp, sp, #8
   1d7a4:	pop	{pc}		; (ldr pc, [sp], #4)
   1d7a8:	mvn	r0, #0
   1d7ac:	b	1d79c <__assert_fail@plt+0xbdfc>
   1d7b0:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1d7b4:	strd	r6, [sp, #8]
   1d7b8:	strd	r8, [sp, #16]
   1d7bc:	strd	sl, [sp, #24]
   1d7c0:	str	lr, [sp, #32]
   1d7c4:	sub	sp, sp, #20
   1d7c8:	mov	r4, r0
   1d7cc:	mov	r5, r1
   1d7d0:	str	r2, [sp, #12]
   1d7d4:	mov	r8, r3
   1d7d8:	ldr	sl, [r0, #84]	; 0x54
   1d7dc:	mov	r1, r3
   1d7e0:	bl	1d6f4 <__assert_fail@plt+0xbd54>
   1d7e4:	mov	fp, r0
   1d7e8:	ldr	r1, [sp, #60]	; 0x3c
   1d7ec:	mov	r0, r4
   1d7f0:	bl	1d6f4 <__assert_fail@plt+0xbd54>
   1d7f4:	str	r0, [sp, #8]
   1d7f8:	ldr	r3, [r5, #4]
   1d7fc:	cmp	r3, #0
   1d800:	ble	1d8a8 <__assert_fail@plt+0xbf08>
   1d804:	mov	r6, #0
   1d808:	ldr	r3, [r5, #8]
   1d80c:	ldr	r1, [r3, r6, lsl #2]
   1d810:	ldr	r3, [r4, #116]	; 0x74
   1d814:	add	r2, r1, r1, lsl #1
   1d818:	ldr	r2, [r3, r2, lsl #3]
   1d81c:	ldr	r3, [sl]
   1d820:	ldr	r7, [r3, r2, lsl #3]
   1d824:	str	fp, [sp, #4]
   1d828:	str	r8, [sp]
   1d82c:	ldr	r3, [sp, #12]
   1d830:	mov	r2, r7
   1d834:	mov	r0, r4
   1d838:	bl	1d670 <__assert_fail@plt+0xbcd0>
   1d83c:	mov	r9, r0
   1d840:	ldr	r3, [r5, #8]
   1d844:	ldr	r1, [r3, r6, lsl #2]
   1d848:	ldr	r3, [sp, #8]
   1d84c:	str	r3, [sp, #4]
   1d850:	ldr	r3, [sp, #60]	; 0x3c
   1d854:	str	r3, [sp]
   1d858:	ldr	r3, [sp, #56]	; 0x38
   1d85c:	mov	r2, r7
   1d860:	mov	r0, r4
   1d864:	bl	1d670 <__assert_fail@plt+0xbcd0>
   1d868:	cmp	r9, r0
   1d86c:	beq	1d890 <__assert_fail@plt+0xbef0>
   1d870:	mov	r0, #1
   1d874:	add	sp, sp, #20
   1d878:	ldrd	r4, [sp]
   1d87c:	ldrd	r6, [sp, #8]
   1d880:	ldrd	r8, [sp, #16]
   1d884:	ldrd	sl, [sp, #24]
   1d888:	add	sp, sp, #32
   1d88c:	pop	{pc}		; (ldr pc, [sp], #4)
   1d890:	add	r6, r6, #1
   1d894:	ldr	r3, [r5, #4]
   1d898:	cmp	r3, r6
   1d89c:	bgt	1d808 <__assert_fail@plt+0xbe68>
   1d8a0:	mov	r0, #0
   1d8a4:	b	1d874 <__assert_fail@plt+0xbed4>
   1d8a8:	mov	r0, #0
   1d8ac:	b	1d874 <__assert_fail@plt+0xbed4>
   1d8b0:	strd	r4, [sp, #-16]!
   1d8b4:	str	r6, [sp, #8]
   1d8b8:	str	lr, [sp, #12]
   1d8bc:	mov	r4, r0
   1d8c0:	mov	r5, r1
   1d8c4:	ldr	r3, [r0, #80]	; 0x50
   1d8c8:	cmp	r3, #1
   1d8cc:	ble	1d914 <__assert_fail@plt+0xbf74>
   1d8d0:	cmn	r1, #-1073741823	; 0xc0000001
   1d8d4:	bhi	1d954 <__assert_fail@plt+0xbfb4>
   1d8d8:	lsl	r6, r1, #2
   1d8dc:	mov	r1, r6
   1d8e0:	ldr	r0, [r0, #8]
   1d8e4:	bl	1cb14 <__assert_fail@plt+0xb174>
   1d8e8:	cmp	r0, #0
   1d8ec:	beq	1d95c <__assert_fail@plt+0xbfbc>
   1d8f0:	str	r0, [r4, #8]
   1d8f4:	ldr	r0, [r4, #12]
   1d8f8:	cmp	r0, #0
   1d8fc:	beq	1d914 <__assert_fail@plt+0xbf74>
   1d900:	mov	r1, r6
   1d904:	bl	1cb14 <__assert_fail@plt+0xb174>
   1d908:	cmp	r0, #0
   1d90c:	beq	1d964 <__assert_fail@plt+0xbfc4>
   1d910:	str	r0, [r4, #12]
   1d914:	ldrb	r3, [r4, #75]	; 0x4b
   1d918:	cmp	r3, #0
   1d91c:	bne	1d938 <__assert_fail@plt+0xbf98>
   1d920:	str	r5, [r4, #36]	; 0x24
   1d924:	mov	r0, #0
   1d928:	ldrd	r4, [sp]
   1d92c:	ldr	r6, [sp, #8]
   1d930:	add	sp, sp, #12
   1d934:	pop	{pc}		; (ldr pc, [sp], #4)
   1d938:	mov	r1, r5
   1d93c:	ldr	r0, [r4, #4]
   1d940:	bl	1cb14 <__assert_fail@plt+0xb174>
   1d944:	cmp	r0, #0
   1d948:	beq	1d96c <__assert_fail@plt+0xbfcc>
   1d94c:	str	r0, [r4, #4]
   1d950:	b	1d920 <__assert_fail@plt+0xbf80>
   1d954:	mov	r0, #12
   1d958:	b	1d928 <__assert_fail@plt+0xbf88>
   1d95c:	mov	r0, #12
   1d960:	b	1d928 <__assert_fail@plt+0xbf88>
   1d964:	mov	r0, #12
   1d968:	b	1d928 <__assert_fail@plt+0xbf88>
   1d96c:	mov	r0, #12
   1d970:	b	1d928 <__assert_fail@plt+0xbf88>
   1d974:	strd	r4, [sp, #-16]!
   1d978:	str	r6, [sp, #8]
   1d97c:	str	lr, [sp, #12]
   1d980:	mov	r4, r0
   1d984:	mov	r5, r1
   1d988:	ldr	r1, [r0]
   1d98c:	ldr	r3, [r0, #4]
   1d990:	cmp	r1, r3
   1d994:	beq	1d9c0 <__assert_fail@plt+0xc020>
   1d998:	ldr	r2, [r4, #8]
   1d99c:	ldr	r3, [r4, #4]
   1d9a0:	add	r1, r3, #1
   1d9a4:	str	r1, [r4, #4]
   1d9a8:	str	r5, [r2, r3, lsl #2]
   1d9ac:	mov	r0, #1
   1d9b0:	ldrd	r4, [sp]
   1d9b4:	ldr	r6, [sp, #8]
   1d9b8:	add	sp, sp, #12
   1d9bc:	pop	{pc}		; (ldr pc, [sp], #4)
   1d9c0:	add	r1, r1, #1
   1d9c4:	lsl	r3, r1, #1
   1d9c8:	str	r3, [r0]
   1d9cc:	lsl	r1, r1, #3
   1d9d0:	ldr	r0, [r0, #8]
   1d9d4:	bl	1cb14 <__assert_fail@plt+0xb174>
   1d9d8:	cmp	r0, #0
   1d9dc:	beq	1d9e8 <__assert_fail@plt+0xc048>
   1d9e0:	str	r0, [r4, #8]
   1d9e4:	b	1d998 <__assert_fail@plt+0xbff8>
   1d9e8:	mov	r0, #0
   1d9ec:	b	1d9b0 <__assert_fail@plt+0xc010>
   1d9f0:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1d9f4:	strd	r6, [sp, #8]
   1d9f8:	str	r8, [sp, #16]
   1d9fc:	str	lr, [sp, #20]
   1da00:	mov	r7, r0
   1da04:	mov	r5, r1
   1da08:	mov	r4, r2
   1da0c:	mov	r6, r3
   1da10:	ldr	r3, [r0, #64]	; 0x40
   1da14:	cmp	r3, #31
   1da18:	beq	1da98 <__assert_fail@plt+0xc0f8>
   1da1c:	ldr	r3, [r7, #56]	; 0x38
   1da20:	ldr	r2, [r7, #64]	; 0x40
   1da24:	add	r1, r2, #1
   1da28:	str	r1, [r7, #64]	; 0x40
   1da2c:	lsl	r2, r2, #5
   1da30:	add	r0, r2, #4
   1da34:	add	r0, r3, r0
   1da38:	add	r3, r3, r2
   1da3c:	mov	r2, #0
   1da40:	str	r2, [r3, #4]
   1da44:	str	r5, [r3, #8]
   1da48:	str	r4, [r3, #12]
   1da4c:	ldrd	r6, [r6]
   1da50:	strd	r6, [r3, #24]
   1da54:	ldrb	r1, [r3, #30]
   1da58:	and	r1, r1, #251	; 0xfb
   1da5c:	bfi	r1, r2, #3, #1
   1da60:	strb	r1, [r3, #30]
   1da64:	str	r2, [r3, #16]
   1da68:	str	r2, [r3, #20]
   1da6c:	mvn	r2, #0
   1da70:	str	r2, [r3, #32]
   1da74:	cmp	r5, #0
   1da78:	strne	r0, [r5]
   1da7c:	cmp	r4, #0
   1da80:	strne	r0, [r4]
   1da84:	ldrd	r4, [sp]
   1da88:	ldrd	r6, [sp, #8]
   1da8c:	ldr	r8, [sp, #16]
   1da90:	add	sp, sp, #20
   1da94:	pop	{pc}		; (ldr pc, [sp], #4)
   1da98:	mov	r0, #996	; 0x3e4
   1da9c:	bl	1ca68 <__assert_fail@plt+0xb0c8>
   1daa0:	cmp	r0, #0
   1daa4:	beq	1da84 <__assert_fail@plt+0xc0e4>
   1daa8:	ldr	r3, [r7, #56]	; 0x38
   1daac:	str	r3, [r0]
   1dab0:	str	r0, [r7, #56]	; 0x38
   1dab4:	mov	r3, #0
   1dab8:	str	r3, [r7, #64]	; 0x40
   1dabc:	b	1da1c <__assert_fail@plt+0xc07c>
   1dac0:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1dac4:	strd	r6, [sp, #8]
   1dac8:	str	r8, [sp, #16]
   1dacc:	str	lr, [sp, #20]
   1dad0:	sub	sp, sp, #8
   1dad4:	mov	r4, r0
   1dad8:	mov	r7, r1
   1dadc:	ldr	r5, [r0]
   1dae0:	add	r8, sp, #4
   1dae4:	mov	r6, #0
   1dae8:	add	r3, r4, #20
   1daec:	mov	r2, r6
   1daf0:	mov	r1, r6
   1daf4:	mov	r0, r7
   1daf8:	bl	1d9f0 <__assert_fail@plt+0xc050>
   1dafc:	str	r0, [r8]
   1db00:	cmp	r0, #0
   1db04:	beq	1db3c <__assert_fail@plt+0xc19c>
   1db08:	str	r5, [r0]
   1db0c:	ldr	r2, [r8]
   1db10:	ldrb	r3, [r2, #26]
   1db14:	orr	r3, r3, #4
   1db18:	strb	r3, [r2, #26]
   1db1c:	ldr	r5, [r8]
   1db20:	ldr	r3, [r4, #4]
   1db24:	cmp	r3, #0
   1db28:	beq	1db54 <__assert_fail@plt+0xc1b4>
   1db2c:	add	r8, r5, #4
   1db30:	mov	r4, r3
   1db34:	b	1dae8 <__assert_fail@plt+0xc148>
   1db38:	ldr	r0, [sp, #4]
   1db3c:	add	sp, sp, #8
   1db40:	ldrd	r4, [sp]
   1db44:	ldrd	r6, [sp, #8]
   1db48:	ldr	r8, [sp, #16]
   1db4c:	add	sp, sp, #20
   1db50:	pop	{pc}		; (ldr pc, [sp], #4)
   1db54:	ldr	r2, [r4, #8]
   1db58:	cmp	r2, r3
   1db5c:	cmpne	r2, #0
   1db60:	bne	1db80 <__assert_fail@plt+0xc1e0>
   1db64:	ldr	r2, [r4]
   1db68:	ldr	r5, [r5]
   1db6c:	mov	r3, r4
   1db70:	cmp	r2, #0
   1db74:	beq	1db38 <__assert_fail@plt+0xc198>
   1db78:	mov	r4, r2
   1db7c:	b	1db54 <__assert_fail@plt+0xc1b4>
   1db80:	add	r8, r5, #8
   1db84:	mov	r4, r2
   1db88:	b	1dae8 <__assert_fail@plt+0xc148>
   1db8c:	strd	r4, [sp, #-12]!
   1db90:	str	lr, [sp, #8]
   1db94:	sub	sp, sp, #12
   1db98:	mov	r4, #0
   1db9c:	mov	r5, #0
   1dba0:	strd	r4, [sp]
   1dba4:	strb	r3, [sp, #4]
   1dba8:	mov	r3, sp
   1dbac:	bl	1d9f0 <__assert_fail@plt+0xc050>
   1dbb0:	add	sp, sp, #12
   1dbb4:	ldrd	r4, [sp]
   1dbb8:	add	sp, sp, #8
   1dbbc:	pop	{pc}		; (ldr pc, [sp], #4)
   1dbc0:	strd	r4, [sp, #-32]!	; 0xffffffe0
   1dbc4:	strd	r6, [sp, #8]
   1dbc8:	strd	r8, [sp, #16]
   1dbcc:	str	sl, [sp, #24]
   1dbd0:	str	lr, [sp, #28]
   1dbd4:	mov	r8, r0
   1dbd8:	mov	r7, r2
   1dbdc:	ldr	r6, [r1]
   1dbe0:	ldr	r4, [r2, #4]
   1dbe4:	ldrb	r3, [r1, #28]
   1dbe8:	ubfx	r3, r3, #4, #1
   1dbec:	cmp	r4, #0
   1dbf0:	moveq	r3, #0
   1dbf4:	cmp	r3, #0
   1dbf8:	bne	1dc40 <__assert_fail@plt+0xc2a0>
   1dbfc:	mov	r3, #8
   1dc00:	mov	r2, #0
   1dc04:	mov	r1, r2
   1dc08:	mov	r0, r6
   1dc0c:	bl	1db8c <__assert_fail@plt+0xc1ec>
   1dc10:	mov	r5, r0
   1dc14:	mov	r3, #9
   1dc18:	mov	r2, #0
   1dc1c:	mov	r1, r2
   1dc20:	mov	r0, r6
   1dc24:	bl	1db8c <__assert_fail@plt+0xc1ec>
   1dc28:	mov	sl, r0
   1dc2c:	cmp	r4, #0
   1dc30:	moveq	r9, r0
   1dc34:	beq	1dca4 <__assert_fail@plt+0xc304>
   1dc38:	mov	r9, r0
   1dc3c:	b	1dc8c <__assert_fail@plt+0xc2ec>
   1dc40:	ldr	r3, [r2, #20]
   1dc44:	cmp	r3, #31
   1dc48:	bgt	1dd00 <__assert_fail@plt+0xc360>
   1dc4c:	ldr	r2, [r6, #80]	; 0x50
   1dc50:	lsr	r3, r2, r3
   1dc54:	tst	r3, #1
   1dc58:	beq	1dd00 <__assert_fail@plt+0xc360>
   1dc5c:	mov	r3, #8
   1dc60:	mov	r2, #0
   1dc64:	mov	r1, r2
   1dc68:	mov	r0, r6
   1dc6c:	bl	1db8c <__assert_fail@plt+0xc1ec>
   1dc70:	mov	r5, r0
   1dc74:	mov	r3, #9
   1dc78:	mov	r2, #0
   1dc7c:	mov	r1, r2
   1dc80:	mov	r0, r6
   1dc84:	bl	1db8c <__assert_fail@plt+0xc1ec>
   1dc88:	mov	r9, r0
   1dc8c:	mov	r3, #16
   1dc90:	mov	r2, r9
   1dc94:	mov	r1, r4
   1dc98:	mov	r0, r6
   1dc9c:	bl	1db8c <__assert_fail@plt+0xc1ec>
   1dca0:	mov	sl, r0
   1dca4:	mov	r3, #16
   1dca8:	mov	r2, sl
   1dcac:	mov	r1, r5
   1dcb0:	mov	r0, r6
   1dcb4:	bl	1db8c <__assert_fail@plt+0xc1ec>
   1dcb8:	mov	r4, r0
   1dcbc:	cmp	sl, #0
   1dcc0:	cmpne	r0, #0
   1dcc4:	beq	1dd1c <__assert_fail@plt+0xc37c>
   1dcc8:	cmp	r9, #0
   1dccc:	cmpne	r5, #0
   1dcd0:	beq	1dd1c <__assert_fail@plt+0xc37c>
   1dcd4:	ldr	r3, [r7, #20]
   1dcd8:	str	r3, [r9, #20]
   1dcdc:	str	r3, [r5, #20]
   1dce0:	ldrb	r3, [r7, #26]
   1dce4:	ubfx	r3, r3, #3, #1
   1dce8:	ldrb	r2, [r9, #26]
   1dcec:	bfi	r2, r3, #3, #1
   1dcf0:	strb	r2, [r9, #26]
   1dcf4:	ldrb	r2, [r5, #26]
   1dcf8:	bfi	r2, r3, #3, #1
   1dcfc:	strb	r2, [r5, #26]
   1dd00:	mov	r0, r4
   1dd04:	ldrd	r4, [sp]
   1dd08:	ldrd	r6, [sp, #8]
   1dd0c:	ldrd	r8, [sp, #16]
   1dd10:	ldr	sl, [sp, #24]
   1dd14:	add	sp, sp, #28
   1dd18:	pop	{pc}		; (ldr pc, [sp], #4)
   1dd1c:	mov	r3, #12
   1dd20:	str	r3, [r8]
   1dd24:	mov	r4, #0
   1dd28:	b	1dd00 <__assert_fail@plt+0xc360>
   1dd2c:	strd	r4, [sp, #-12]!
   1dd30:	str	lr, [sp, #8]
   1dd34:	sub	sp, sp, #12
   1dd38:	mov	r5, r0
   1dd3c:	mov	r4, r1
   1dd40:	mov	r3, #0
   1dd44:	str	r3, [sp, #4]
   1dd48:	ldr	r2, [r1, #4]
   1dd4c:	cmp	r2, r3
   1dd50:	beq	1dd60 <__assert_fail@plt+0xc3c0>
   1dd54:	ldrb	r3, [r2, #24]
   1dd58:	cmp	r3, #17
   1dd5c:	beq	1dd8c <__assert_fail@plt+0xc3ec>
   1dd60:	ldr	r2, [r4, #8]
   1dd64:	cmp	r2, #0
   1dd68:	beq	1dd78 <__assert_fail@plt+0xc3d8>
   1dd6c:	ldrb	r3, [r2, #24]
   1dd70:	cmp	r3, #17
   1dd74:	beq	1dda8 <__assert_fail@plt+0xc408>
   1dd78:	ldr	r0, [sp, #4]
   1dd7c:	add	sp, sp, #12
   1dd80:	ldrd	r4, [sp]
   1dd84:	add	sp, sp, #8
   1dd88:	pop	{pc}		; (ldr pc, [sp], #4)
   1dd8c:	mov	r1, r0
   1dd90:	add	r0, sp, #4
   1dd94:	bl	1dbc0 <__assert_fail@plt+0xc220>
   1dd98:	str	r0, [r4, #4]
   1dd9c:	cmp	r0, #0
   1dda0:	strne	r4, [r0]
   1dda4:	b	1dd60 <__assert_fail@plt+0xc3c0>
   1dda8:	mov	r1, r5
   1ddac:	add	r0, sp, #4
   1ddb0:	bl	1dbc0 <__assert_fail@plt+0xc220>
   1ddb4:	str	r0, [r4, #8]
   1ddb8:	cmp	r0, #0
   1ddbc:	strne	r4, [r0]
   1ddc0:	b	1dd78 <__assert_fail@plt+0xc3d8>
   1ddc4:	strd	r4, [sp, #-16]!
   1ddc8:	str	r6, [sp, #8]
   1ddcc:	str	lr, [sp, #12]
   1ddd0:	mov	r4, r0
   1ddd4:	mov	r5, r1
   1ddd8:	mov	r3, #1
   1dddc:	str	r3, [r0]
   1dde0:	str	r3, [r0, #4]
   1dde4:	mov	r0, #4
   1dde8:	bl	1ca68 <__assert_fail@plt+0xb0c8>
   1ddec:	str	r0, [r4, #8]
   1ddf0:	cmp	r0, #0
   1ddf4:	moveq	r3, #0
   1ddf8:	streq	r3, [r4, #4]
   1ddfc:	streq	r3, [r4]
   1de00:	moveq	r0, #12
   1de04:	strne	r5, [r0]
   1de08:	movne	r0, #0
   1de0c:	ldrd	r4, [sp]
   1de10:	ldr	r6, [sp, #8]
   1de14:	add	sp, sp, #12
   1de18:	pop	{pc}		; (ldr pc, [sp], #4)
   1de1c:	str	r4, [sp, #-8]!
   1de20:	str	lr, [sp, #4]
   1de24:	mov	r4, r0
   1de28:	str	r1, [r0]
   1de2c:	mov	r3, #0
   1de30:	str	r3, [r0, #4]
   1de34:	lsl	r0, r1, #2
   1de38:	bl	1ca68 <__assert_fail@plt+0xb0c8>
   1de3c:	str	r0, [r4, #8]
   1de40:	cmp	r0, #0
   1de44:	movne	r0, #0
   1de48:	moveq	r0, #12
   1de4c:	ldr	r4, [sp]
   1de50:	add	sp, sp, #4
   1de54:	pop	{pc}		; (ldr pc, [sp], #4)
   1de58:	strd	r4, [sp, #-32]!	; 0xffffffe0
   1de5c:	strd	r6, [sp, #8]
   1de60:	strd	r8, [sp, #16]
   1de64:	str	sl, [sp, #24]
   1de68:	str	lr, [sp, #28]
   1de6c:	mov	r6, r0
   1de70:	mov	r5, r1
   1de74:	mov	r7, r2
   1de78:	mov	r8, r1
   1de7c:	str	r2, [r8], #16
   1de80:	ldr	r1, [r1, #8]
   1de84:	mov	r0, r8
   1de88:	bl	1de1c <__assert_fail@plt+0xc47c>
   1de8c:	subs	r9, r0, #0
   1de90:	bne	1df6c <__assert_fail@plt+0xc5cc>
   1de94:	ldr	r3, [r5, #8]
   1de98:	cmp	r3, #0
   1de9c:	ble	1deec <__assert_fail@plt+0xc54c>
   1dea0:	mov	r4, r9
   1dea4:	b	1deb8 <__assert_fail@plt+0xc518>
   1dea8:	add	r4, r4, #1
   1deac:	ldr	r3, [r5, #8]
   1deb0:	cmp	r3, r4
   1deb4:	ble	1deec <__assert_fail@plt+0xc54c>
   1deb8:	ldr	r3, [r5, #12]
   1debc:	ldr	r1, [r3, r4, lsl #2]
   1dec0:	ldr	r3, [r6]
   1dec4:	add	r3, r3, r1, lsl #3
   1dec8:	ldrb	r3, [r3, #4]
   1decc:	tst	r3, #8
   1ded0:	bne	1dea8 <__assert_fail@plt+0xc508>
   1ded4:	mov	r0, r8
   1ded8:	bl	1d974 <__assert_fail@plt+0xbfd4>
   1dedc:	cmp	r0, #0
   1dee0:	bne	1dea8 <__assert_fail@plt+0xc508>
   1dee4:	mov	r9, #12
   1dee8:	b	1df28 <__assert_fail@plt+0xc588>
   1deec:	ldr	r4, [r6, #68]	; 0x44
   1def0:	and	r7, r7, r4
   1def4:	add	r7, r7, r7, lsl #1
   1def8:	lsl	r4, r7, #2
   1defc:	ldr	r6, [r6, #32]
   1df00:	add	r7, r6, r4
   1df04:	ldr	r3, [r6, r4]
   1df08:	ldr	r2, [r7, #4]
   1df0c:	cmp	r2, r3
   1df10:	ble	1df44 <__assert_fail@plt+0xc5a4>
   1df14:	ldr	r2, [r7, #8]
   1df18:	ldr	r3, [r6, r4]
   1df1c:	add	r1, r3, #1
   1df20:	str	r1, [r6, r4]
   1df24:	str	r5, [r2, r3, lsl #2]
   1df28:	mov	r0, r9
   1df2c:	ldrd	r4, [sp]
   1df30:	ldrd	r6, [sp, #8]
   1df34:	ldrd	r8, [sp, #16]
   1df38:	ldr	sl, [sp, #24]
   1df3c:	add	sp, sp, #28
   1df40:	pop	{pc}		; (ldr pc, [sp], #4)
   1df44:	add	r3, r3, #1
   1df48:	lsl	r8, r3, #1
   1df4c:	lsl	r1, r3, #3
   1df50:	ldr	r0, [r7, #8]
   1df54:	bl	1cb14 <__assert_fail@plt+0xb174>
   1df58:	cmp	r0, #0
   1df5c:	beq	1df74 <__assert_fail@plt+0xc5d4>
   1df60:	str	r0, [r7, #8]
   1df64:	str	r8, [r7, #4]
   1df68:	b	1df14 <__assert_fail@plt+0xc574>
   1df6c:	mov	r9, #12
   1df70:	b	1df28 <__assert_fail@plt+0xc588>
   1df74:	mov	r9, #12
   1df78:	b	1df28 <__assert_fail@plt+0xc588>
   1df7c:	strd	r4, [sp, #-20]!	; 0xffffffec
   1df80:	strd	r6, [sp, #8]
   1df84:	str	lr, [sp, #16]
   1df88:	sub	sp, sp, #84	; 0x54
   1df8c:	mov	r4, r0
   1df90:	ldr	r5, [r0, #36]	; 0x24
   1df94:	ldr	r3, [r0, #48]	; 0x30
   1df98:	cmp	r5, r3
   1df9c:	movge	r5, r3
   1dfa0:	ldr	r7, [r0, #28]
   1dfa4:	cmp	r5, r7
   1dfa8:	ble	1e0f0 <__assert_fail@plt+0xc750>
   1dfac:	mov	r6, #1
   1dfb0:	b	1e090 <__assert_fail@plt+0xc6f0>
   1dfb4:	ldr	r3, [r4, #80]	; 0x50
   1dfb8:	cmp	r3, #0
   1dfbc:	cmpgt	r2, #0
   1dfc0:	ble	1e018 <__assert_fail@plt+0xc678>
   1dfc4:	add	r0, sp, #16
   1dfc8:	mov	r1, #0
   1dfcc:	ldr	r3, [r4]
   1dfd0:	ldr	ip, [r4, #24]
   1dfd4:	add	r3, r3, r7
   1dfd8:	add	r3, r3, r1
   1dfdc:	ldrb	r3, [r3, ip]
   1dfe0:	ldr	ip, [r4, #64]	; 0x40
   1dfe4:	ldrb	ip, [ip, r3]
   1dfe8:	ldr	r3, [r4, #4]
   1dfec:	add	r3, r3, r7
   1dff0:	strb	ip, [r3, r1]
   1dff4:	strb	ip, [r0], #1
   1dff8:	add	r1, r1, #1
   1dffc:	ldr	r3, [r4, #80]	; 0x50
   1e000:	cmp	r2, r3
   1e004:	movlt	r3, r2
   1e008:	cmp	r3, r1
   1e00c:	bgt	1dfcc <__assert_fail@plt+0xc62c>
   1e010:	add	r1, sp, #16
   1e014:	b	1e0b8 <__assert_fail@plt+0xc718>
   1e018:	add	r1, sp, #16
   1e01c:	b	1e0b8 <__assert_fail@plt+0xc718>
   1e020:	ldr	r3, [r4]
   1e024:	ldr	r2, [r4, #24]
   1e028:	add	r3, r3, r7
   1e02c:	ldrb	r3, [r3, r2]
   1e030:	str	r3, [sp, #4]
   1e034:	ldr	r2, [r4, #64]	; 0x40
   1e038:	cmp	r2, #0
   1e03c:	ldrbne	r3, [r2, r3]
   1e040:	strne	r3, [sp, #4]
   1e044:	ldrd	r2, [sp, #8]
   1e048:	strd	r2, [r4, #16]
   1e04c:	mov	r0, r6
   1e050:	add	r3, r7, #1
   1e054:	ldr	r2, [r4, #8]
   1e058:	ldr	r1, [sp, #4]
   1e05c:	str	r1, [r2, r7, lsl #2]
   1e060:	add	r0, r7, r0
   1e064:	cmp	r3, r0
   1e068:	bge	1e10c <__assert_fail@plt+0xc76c>
   1e06c:	mvn	r1, #0
   1e070:	ldr	r2, [r4, #8]
   1e074:	str	r1, [r2, r3, lsl #2]
   1e078:	add	r3, r3, #1
   1e07c:	cmp	r3, r0
   1e080:	bne	1e070 <__assert_fail@plt+0xc6d0>
   1e084:	mov	r7, r0
   1e088:	cmp	r7, r5
   1e08c:	bge	1e0f0 <__assert_fail@plt+0xc750>
   1e090:	sub	r2, r5, r7
   1e094:	ldrd	r0, [r4, #16]
   1e098:	strd	r0, [sp, #8]
   1e09c:	ldr	r3, [r4, #64]	; 0x40
   1e0a0:	cmp	r3, #0
   1e0a4:	bne	1dfb4 <__assert_fail@plt+0xc614>
   1e0a8:	ldr	r1, [r4, #24]
   1e0ac:	add	r3, r7, r1
   1e0b0:	ldr	r1, [r4]
   1e0b4:	add	r1, r1, r3
   1e0b8:	add	r3, r4, #16
   1e0bc:	add	r0, sp, #4
   1e0c0:	bl	1caa4 <__assert_fail@plt+0xb104>
   1e0c4:	sub	r3, r0, #1
   1e0c8:	cmn	r3, #3
   1e0cc:	bhi	1e020 <__assert_fail@plt+0xc680>
   1e0d0:	cmn	r0, #2
   1e0d4:	bne	1e050 <__assert_fail@plt+0xc6b0>
   1e0d8:	ldr	r2, [r4, #36]	; 0x24
   1e0dc:	ldr	r3, [r4, #48]	; 0x30
   1e0e0:	cmp	r2, r3
   1e0e4:	bge	1e020 <__assert_fail@plt+0xc680>
   1e0e8:	ldrd	r2, [sp, #8]
   1e0ec:	strd	r2, [r4, #16]
   1e0f0:	str	r7, [r4, #28]
   1e0f4:	str	r7, [r4, #32]
   1e0f8:	add	sp, sp, #84	; 0x54
   1e0fc:	ldrd	r4, [sp]
   1e100:	ldrd	r6, [sp, #8]
   1e104:	add	sp, sp, #16
   1e108:	pop	{pc}		; (ldr pc, [sp], #4)
   1e10c:	mov	r7, r3
   1e110:	b	1e088 <__assert_fail@plt+0xc6e8>
   1e114:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1e118:	strd	r6, [sp, #8]
   1e11c:	strd	r8, [sp, #16]
   1e120:	strd	sl, [sp, #24]
   1e124:	str	lr, [sp, #32]
   1e128:	sub	sp, sp, #92	; 0x5c
   1e12c:	mov	r5, r0
   1e130:	ldr	r4, [r0, #28]
   1e134:	ldr	r6, [r0, #36]	; 0x24
   1e138:	ldr	r3, [r0, #48]	; 0x30
   1e13c:	cmp	r6, r3
   1e140:	movge	r6, r3
   1e144:	ldrb	r3, [r0, #74]	; 0x4a
   1e148:	cmp	r3, #0
   1e14c:	bne	1e15c <__assert_fail@plt+0xc7bc>
   1e150:	ldr	r3, [r0, #64]	; 0x40
   1e154:	cmp	r3, #0
   1e158:	beq	1e190 <__assert_fail@plt+0xc7f0>
   1e15c:	ldr	r7, [r5, #32]
   1e160:	cmp	r4, r6
   1e164:	blt	1e2bc <__assert_fail@plt+0xc91c>
   1e168:	str	r4, [r5, #28]
   1e16c:	str	r7, [r5, #32]
   1e170:	mov	r0, #0
   1e174:	add	sp, sp, #92	; 0x5c
   1e178:	ldrd	r4, [sp]
   1e17c:	ldrd	r6, [sp, #8]
   1e180:	ldrd	r8, [sp, #16]
   1e184:	ldrd	sl, [sp, #24]
   1e188:	add	sp, sp, #32
   1e18c:	pop	{pc}		; (ldr pc, [sp], #4)
   1e190:	ldrb	r3, [r0, #76]	; 0x4c
   1e194:	cmp	r3, #0
   1e198:	bne	1e15c <__assert_fail@plt+0xc7bc>
   1e19c:	cmp	r4, r6
   1e1a0:	bge	1e41c <__assert_fail@plt+0xca7c>
   1e1a4:	add	r3, r0, #16
   1e1a8:	str	r3, [sp, #4]
   1e1ac:	mvn	r7, #0
   1e1b0:	b	1e268 <__assert_fail@plt+0xc8c8>
   1e1b4:	ldr	r0, [sp, #4]
   1e1b8:	ldrd	r2, [r0]
   1e1bc:	strd	r2, [sp, #80]	; 0x50
   1e1c0:	mov	r9, r4
   1e1c4:	add	r1, r8, r4
   1e1c8:	mov	r3, r0
   1e1cc:	sub	r2, r6, r4
   1e1d0:	add	r1, sl, r1
   1e1d4:	add	r0, sp, #12
   1e1d8:	bl	1caa4 <__assert_fail@plt+0xb104>
   1e1dc:	mov	r8, r0
   1e1e0:	sub	r3, r0, #1
   1e1e4:	cmn	r3, #4
   1e1e8:	bhi	1e3b8 <__assert_fail@plt+0xca18>
   1e1ec:	ldr	sl, [sp, #12]
   1e1f0:	mov	r0, sl
   1e1f4:	bl	11940 <towupper@plt>
   1e1f8:	mov	fp, r0
   1e1fc:	cmp	sl, r0
   1e200:	beq	1e394 <__assert_fail@plt+0xc9f4>
   1e204:	add	r2, sp, #80	; 0x50
   1e208:	mov	r1, r0
   1e20c:	add	r0, sp, #16
   1e210:	bl	1152c <wcrtomb@plt>
   1e214:	cmp	r8, r0
   1e218:	bne	1e2b8 <__assert_fail@plt+0xc918>
   1e21c:	ldr	r0, [r5, #4]
   1e220:	mov	r2, r8
   1e224:	add	r1, sp, #16
   1e228:	add	r0, r0, r4
   1e22c:	bl	115d4 <memcpy@plt>
   1e230:	add	r4, r4, #1
   1e234:	ldr	r3, [r5, #8]
   1e238:	str	fp, [r3, r9, lsl #2]
   1e23c:	add	r9, r9, r8
   1e240:	cmp	r4, r9
   1e244:	bge	1e260 <__assert_fail@plt+0xc8c0>
   1e248:	ldr	r3, [r5, #8]
   1e24c:	str	r7, [r3, r4, lsl #2]
   1e250:	add	r4, r4, #1
   1e254:	cmp	r9, r4
   1e258:	bne	1e248 <__assert_fail@plt+0xc8a8>
   1e25c:	mov	r4, r9
   1e260:	cmp	r6, r4
   1e264:	ble	1e41c <__assert_fail@plt+0xca7c>
   1e268:	ldr	sl, [r5]
   1e26c:	ldr	r8, [r5, #24]
   1e270:	add	r3, sl, r8
   1e274:	ldrb	fp, [r3, r4]
   1e278:	bics	r3, fp, #127	; 0x7f
   1e27c:	bne	1e1b4 <__assert_fail@plt+0xc814>
   1e280:	ldr	r0, [sp, #4]
   1e284:	bl	11604 <mbsinit@plt>
   1e288:	cmp	r0, #0
   1e28c:	beq	1e1b4 <__assert_fail@plt+0xc814>
   1e290:	mov	r0, fp
   1e294:	bl	11940 <towupper@plt>
   1e298:	bics	r3, r0, #127	; 0x7f
   1e29c:	bne	1e1b4 <__assert_fail@plt+0xc814>
   1e2a0:	ldr	r3, [r5, #4]
   1e2a4:	strb	r0, [r3, r4]
   1e2a8:	ldr	r3, [r5, #8]
   1e2ac:	str	r0, [r3, r4, lsl #2]
   1e2b0:	add	r4, r4, #1
   1e2b4:	b	1e260 <__assert_fail@plt+0xc8c0>
   1e2b8:	mov	r7, r4
   1e2bc:	sub	r2, r6, r4
   1e2c0:	ldrd	r0, [r5, #16]
   1e2c4:	strd	r0, [sp, #80]	; 0x50
   1e2c8:	ldr	r3, [r5, #64]	; 0x40
   1e2cc:	cmp	r3, #0
   1e2d0:	bne	1e42c <__assert_fail@plt+0xca8c>
   1e2d4:	ldr	r3, [r5, #24]
   1e2d8:	add	r3, r7, r3
   1e2dc:	ldr	r1, [r5]
   1e2e0:	add	r3, r1, r3
   1e2e4:	str	r3, [sp, #4]
   1e2e8:	add	r3, r5, #16
   1e2ec:	ldr	r1, [sp, #4]
   1e2f0:	add	r0, sp, #12
   1e2f4:	bl	1caa4 <__assert_fail@plt+0xb104>
   1e2f8:	mov	r8, r0
   1e2fc:	sub	fp, r0, #1
   1e300:	cmn	fp, #4
   1e304:	bhi	1e614 <__assert_fail@plt+0xcc74>
   1e308:	ldr	sl, [sp, #12]
   1e30c:	mov	r0, sl
   1e310:	bl	11940 <towupper@plt>
   1e314:	mov	r9, r0
   1e318:	cmp	sl, r0
   1e31c:	beq	1e5d4 <__assert_fail@plt+0xcc34>
   1e320:	add	r2, sp, #80	; 0x50
   1e324:	mov	r1, r0
   1e328:	add	r0, sp, #16
   1e32c:	bl	1152c <wcrtomb@plt>
   1e330:	mov	sl, r0
   1e334:	cmp	r8, r0
   1e338:	bne	1e48c <__assert_fail@plt+0xcaec>
   1e33c:	ldr	r0, [r5, #4]
   1e340:	mov	r2, sl
   1e344:	add	r1, sp, #16
   1e348:	add	r0, r0, r4
   1e34c:	bl	115d4 <memcpy@plt>
   1e350:	ldrb	r3, [r5, #76]	; 0x4c
   1e354:	cmp	r3, #0
   1e358:	bne	1e5ec <__assert_fail@plt+0xcc4c>
   1e35c:	add	r7, r7, r8
   1e360:	add	r3, r4, #1
   1e364:	ldr	r2, [r5, #8]
   1e368:	str	r9, [r2, r4, lsl #2]
   1e36c:	add	r4, r4, r8
   1e370:	cmp	r3, r4
   1e374:	bge	1e690 <__assert_fail@plt+0xccf0>
   1e378:	mvn	r1, #0
   1e37c:	ldr	r2, [r5, #8]
   1e380:	str	r1, [r2, r3, lsl #2]
   1e384:	add	r3, r3, #1
   1e388:	cmp	r4, r3
   1e38c:	bne	1e37c <__assert_fail@plt+0xc9dc>
   1e390:	b	1e160 <__assert_fail@plt+0xc7c0>
   1e394:	ldr	r0, [r5, #4]
   1e398:	ldr	r3, [r5, #24]
   1e39c:	add	r3, r4, r3
   1e3a0:	ldr	r1, [r5]
   1e3a4:	mov	r2, r8
   1e3a8:	add	r1, r1, r3
   1e3ac:	add	r0, r0, r4
   1e3b0:	bl	115d4 <memcpy@plt>
   1e3b4:	b	1e230 <__assert_fail@plt+0xc890>
   1e3b8:	cmn	r3, #3
   1e3bc:	bhi	1e3e8 <__assert_fail@plt+0xca48>
   1e3c0:	ldr	r2, [r5, #36]	; 0x24
   1e3c4:	ldr	r3, [r5, #48]	; 0x30
   1e3c8:	cmp	r2, r3
   1e3cc:	blt	1e414 <__assert_fail@plt+0xca74>
   1e3d0:	ldr	r3, [r5, #4]
   1e3d4:	strb	fp, [r3, r4]
   1e3d8:	add	r4, r4, #1
   1e3dc:	ldr	r3, [r5, #8]
   1e3e0:	str	fp, [r3, r9, lsl #2]
   1e3e4:	b	1e260 <__assert_fail@plt+0xc8c0>
   1e3e8:	ldr	r3, [r5, #4]
   1e3ec:	strb	fp, [r3, r4]
   1e3f0:	add	r4, r4, #1
   1e3f4:	ldr	r3, [r5, #8]
   1e3f8:	str	fp, [r3, r9, lsl #2]
   1e3fc:	cmn	r0, #1
   1e400:	bne	1e260 <__assert_fail@plt+0xc8c0>
   1e404:	ldrd	r2, [sp, #80]	; 0x50
   1e408:	ldr	r1, [sp, #4]
   1e40c:	strd	r2, [r1]
   1e410:	b	1e260 <__assert_fail@plt+0xc8c0>
   1e414:	ldrd	r2, [sp, #80]	; 0x50
   1e418:	strd	r2, [r5, #16]
   1e41c:	str	r4, [r5, #28]
   1e420:	str	r4, [r5, #32]
   1e424:	mov	r0, #0
   1e428:	b	1e174 <__assert_fail@plt+0xc7d4>
   1e42c:	ldr	lr, [r5, #80]	; 0x50
   1e430:	cmp	lr, #0
   1e434:	cmpgt	r2, #0
   1e438:	ble	1e480 <__assert_fail@plt+0xcae0>
   1e43c:	ldr	r8, [r5]
   1e440:	ldr	ip, [r5, #24]
   1e444:	add	ip, r7, ip
   1e448:	add	r1, r8, ip
   1e44c:	add	r0, sp, #16
   1e450:	cmp	lr, r2
   1e454:	movge	lr, r2
   1e458:	mov	r8, r1
   1e45c:	ldrb	ip, [r1], #1
   1e460:	ldrb	ip, [r3, ip]
   1e464:	strb	ip, [r0], #1
   1e468:	sub	ip, r1, r8
   1e46c:	cmp	lr, ip
   1e470:	bgt	1e45c <__assert_fail@plt+0xcabc>
   1e474:	add	r3, sp, #16
   1e478:	str	r3, [sp, #4]
   1e47c:	b	1e2e8 <__assert_fail@plt+0xc948>
   1e480:	add	r3, sp, #16
   1e484:	str	r3, [sp, #4]
   1e488:	b	1e2e8 <__assert_fail@plt+0xc948>
   1e48c:	cmn	r0, #1
   1e490:	beq	1e5bc <__assert_fail@plt+0xcc1c>
   1e494:	mov	r6, r4
   1e498:	add	r3, r4, r0
   1e49c:	str	r3, [sp, #4]
   1e4a0:	ldr	r0, [r5, #36]	; 0x24
   1e4a4:	cmp	r3, r0
   1e4a8:	bls	1e4b8 <__assert_fail@plt+0xcb18>
   1e4ac:	ldrd	r2, [sp, #80]	; 0x50
   1e4b0:	strd	r2, [r5, #16]
   1e4b4:	b	1e168 <__assert_fail@plt+0xc7c8>
   1e4b8:	ldr	r3, [r5, #12]
   1e4bc:	cmp	r3, #0
   1e4c0:	beq	1e5a0 <__assert_fail@plt+0xcc00>
   1e4c4:	ldrb	r3, [r5, #76]	; 0x4c
   1e4c8:	cmp	r3, #0
   1e4cc:	bne	1e4f4 <__assert_fail@plt+0xcb54>
   1e4d0:	cmp	r6, #0
   1e4d4:	beq	1e4ec <__assert_fail@plt+0xcb4c>
   1e4d8:	ldr	r2, [r5, #12]
   1e4dc:	str	r3, [r2, r3, lsl #2]
   1e4e0:	add	r3, r3, #1
   1e4e4:	cmp	r6, r3
   1e4e8:	bne	1e4d8 <__assert_fail@plt+0xcb38>
   1e4ec:	mov	r3, #1
   1e4f0:	strb	r3, [r5, #76]	; 0x4c
   1e4f4:	ldr	r0, [r5, #4]
   1e4f8:	mov	r2, sl
   1e4fc:	add	r1, sp, #16
   1e500:	add	r0, r0, r6
   1e504:	bl	115d4 <memcpy@plt>
   1e508:	lsl	r3, r6, #2
   1e50c:	ldr	r2, [r5, #8]
   1e510:	str	r9, [r2, r6, lsl #2]
   1e514:	ldr	r2, [r5, #12]
   1e518:	str	r7, [r2, r6, lsl #2]
   1e51c:	cmp	sl, #1
   1e520:	bls	1e560 <__assert_fail@plt+0xcbc0>
   1e524:	add	r3, r3, #4
   1e528:	mov	r2, #1
   1e52c:	mvn	r0, #0
   1e530:	cmp	r2, r8
   1e534:	movcc	r1, r2
   1e538:	movcs	r1, fp
   1e53c:	ldr	ip, [r5, #12]
   1e540:	add	r1, r7, r1
   1e544:	str	r1, [ip, r3]
   1e548:	ldr	r1, [r5, #8]
   1e54c:	str	r0, [r1, r3]
   1e550:	add	r2, r2, #1
   1e554:	add	r3, r3, #4
   1e558:	cmp	sl, r2
   1e55c:	bne	1e530 <__assert_fail@plt+0xcb90>
   1e560:	sub	sl, sl, r8
   1e564:	ldr	r6, [r5, #48]	; 0x30
   1e568:	add	r6, sl, r6
   1e56c:	str	r6, [r5, #48]	; 0x30
   1e570:	ldr	r3, [r5, #52]	; 0x34
   1e574:	cmp	r3, r7
   1e578:	ble	1e588 <__assert_fail@plt+0xcbe8>
   1e57c:	ldr	r3, [r5, #56]	; 0x38
   1e580:	add	sl, r3, sl
   1e584:	str	sl, [r5, #56]	; 0x38
   1e588:	ldr	r3, [r5, #36]	; 0x24
   1e58c:	cmp	r6, r3
   1e590:	movge	r6, r3
   1e594:	ldr	r4, [sp, #4]
   1e598:	add	r7, r7, r8
   1e59c:	b	1e160 <__assert_fail@plt+0xc7c0>
   1e5a0:	lsl	r0, r0, #2
   1e5a4:	bl	1ca68 <__assert_fail@plt+0xb0c8>
   1e5a8:	str	r0, [r5, #12]
   1e5ac:	cmp	r0, #0
   1e5b0:	moveq	r0, #12
   1e5b4:	bne	1e4c4 <__assert_fail@plt+0xcb24>
   1e5b8:	b	1e174 <__assert_fail@plt+0xc7d4>
   1e5bc:	ldr	r0, [r5, #4]
   1e5c0:	mov	r2, r8
   1e5c4:	ldr	r1, [sp, #4]
   1e5c8:	add	r0, r0, r4
   1e5cc:	bl	115d4 <memcpy@plt>
   1e5d0:	b	1e350 <__assert_fail@plt+0xc9b0>
   1e5d4:	ldr	r0, [r5, #4]
   1e5d8:	mov	r2, r8
   1e5dc:	ldr	r1, [sp, #4]
   1e5e0:	add	r0, r0, r4
   1e5e4:	bl	115d4 <memcpy@plt>
   1e5e8:	b	1e350 <__assert_fail@plt+0xc9b0>
   1e5ec:	lsl	r2, r4, #2
   1e5f0:	mov	r3, r7
   1e5f4:	add	r0, r8, r7
   1e5f8:	ldr	r1, [r5, #12]
   1e5fc:	str	r3, [r1, r2]
   1e600:	add	r2, r2, #4
   1e604:	add	r3, r3, #1
   1e608:	cmp	r3, r0
   1e60c:	bne	1e5f8 <__assert_fail@plt+0xcc58>
   1e610:	b	1e35c <__assert_fail@plt+0xc9bc>
   1e614:	cmn	fp, #3
   1e618:	bhi	1e62c <__assert_fail@plt+0xcc8c>
   1e61c:	ldr	r2, [r5, #36]	; 0x24
   1e620:	ldr	r3, [r5, #48]	; 0x30
   1e624:	cmp	r2, r3
   1e628:	blt	1e684 <__assert_fail@plt+0xcce4>
   1e62c:	ldr	r3, [r5]
   1e630:	ldr	r2, [r5, #24]
   1e634:	add	r3, r3, r7
   1e638:	ldrb	r3, [r3, r2]
   1e63c:	ldr	r2, [r5, #64]	; 0x40
   1e640:	cmp	r2, #0
   1e644:	ldrbne	r3, [r2, r3]
   1e648:	mov	r1, r4
   1e64c:	ldr	r2, [r5, #4]
   1e650:	strb	r3, [r2, r4]
   1e654:	ldrb	r2, [r5, #76]	; 0x4c
   1e658:	cmp	r2, #0
   1e65c:	ldrne	r2, [r5, #12]
   1e660:	strne	r7, [r2, r4, lsl #2]
   1e664:	add	r7, r7, #1
   1e668:	add	r4, r4, #1
   1e66c:	ldr	r2, [r5, #8]
   1e670:	str	r3, [r2, r1, lsl #2]
   1e674:	cmn	r8, #1
   1e678:	ldrdeq	r2, [sp, #80]	; 0x50
   1e67c:	strdeq	r2, [r5, #16]
   1e680:	b	1e160 <__assert_fail@plt+0xc7c0>
   1e684:	ldrd	r2, [sp, #80]	; 0x50
   1e688:	strd	r2, [r5, #16]
   1e68c:	b	1e168 <__assert_fail@plt+0xc7c8>
   1e690:	mov	r4, r3
   1e694:	b	1e160 <__assert_fail@plt+0xc7c0>
   1e698:	ldr	r3, [r1, #4]
   1e69c:	str	r3, [r0, #4]
   1e6a0:	cmp	r3, #0
   1e6a4:	ble	1e708 <__assert_fail@plt+0xcd68>
   1e6a8:	strd	r4, [sp, #-16]!
   1e6ac:	str	r6, [sp, #8]
   1e6b0:	str	lr, [sp, #12]
   1e6b4:	mov	r5, r1
   1e6b8:	mov	r4, r0
   1e6bc:	str	r3, [r0]
   1e6c0:	lsl	r0, r3, #2
   1e6c4:	bl	1ca68 <__assert_fail@plt+0xb0c8>
   1e6c8:	str	r0, [r4, #8]
   1e6cc:	cmp	r0, #0
   1e6d0:	moveq	r3, #0
   1e6d4:	streq	r3, [r4, #4]
   1e6d8:	streq	r3, [r4]
   1e6dc:	moveq	r0, #12
   1e6e0:	beq	1e6f8 <__assert_fail@plt+0xcd58>
   1e6e4:	ldr	r2, [r5, #4]
   1e6e8:	lsl	r2, r2, #2
   1e6ec:	ldr	r1, [r5, #8]
   1e6f0:	bl	115d4 <memcpy@plt>
   1e6f4:	mov	r0, #0
   1e6f8:	ldrd	r4, [sp]
   1e6fc:	ldr	r6, [sp, #8]
   1e700:	add	sp, sp, #12
   1e704:	pop	{pc}		; (ldr pc, [sp], #4)
   1e708:	mov	r3, #0
   1e70c:	str	r3, [r0]
   1e710:	str	r3, [r0, #4]
   1e714:	str	r3, [r0, #8]
   1e718:	mov	r0, r3
   1e71c:	bx	lr
   1e720:	strd	r4, [sp, #-32]!	; 0xffffffe0
   1e724:	strd	r6, [sp, #8]
   1e728:	strd	r8, [sp, #16]
   1e72c:	str	sl, [sp, #24]
   1e730:	str	lr, [sp, #28]
   1e734:	mov	r5, r0
   1e738:	mov	r4, r2
   1e73c:	subs	r6, r1, #0
   1e740:	beq	1e75c <__assert_fail@plt+0xcdbc>
   1e744:	ldr	r0, [r6, #4]
   1e748:	cmp	r2, #0
   1e74c:	cmpne	r0, #0
   1e750:	bgt	1e798 <__assert_fail@plt+0xcdf8>
   1e754:	cmp	r0, #0
   1e758:	bgt	1e7a4 <__assert_fail@plt+0xce04>
   1e75c:	cmp	r4, #0
   1e760:	beq	1e770 <__assert_fail@plt+0xcdd0>
   1e764:	ldr	r3, [r4, #4]
   1e768:	cmp	r3, #0
   1e76c:	bgt	1e7e0 <__assert_fail@plt+0xce40>
   1e770:	mov	r0, #0
   1e774:	str	r0, [r5]
   1e778:	str	r0, [r5, #4]
   1e77c:	str	r0, [r5, #8]
   1e780:	ldrd	r4, [sp]
   1e784:	ldrd	r6, [sp, #8]
   1e788:	ldrd	r8, [sp, #16]
   1e78c:	ldr	sl, [sp, #24]
   1e790:	add	sp, sp, #28
   1e794:	pop	{pc}		; (ldr pc, [sp], #4)
   1e798:	ldr	r3, [r2, #4]
   1e79c:	cmp	r3, #0
   1e7a0:	bgt	1e7b4 <__assert_fail@plt+0xce14>
   1e7a4:	mov	r1, r6
   1e7a8:	mov	r0, r5
   1e7ac:	bl	1e698 <__assert_fail@plt+0xccf8>
   1e7b0:	b	1e780 <__assert_fail@plt+0xcde0>
   1e7b4:	add	r0, r0, r3
   1e7b8:	str	r0, [r5]
   1e7bc:	lsl	r0, r0, #2
   1e7c0:	bl	1ca68 <__assert_fail@plt+0xb0c8>
   1e7c4:	str	r0, [r5, #8]
   1e7c8:	cmp	r0, #0
   1e7cc:	beq	1e8bc <__assert_fail@plt+0xcf1c>
   1e7d0:	mov	r3, #0
   1e7d4:	mov	r8, r3
   1e7d8:	mov	r7, r3
   1e7dc:	b	1e800 <__assert_fail@plt+0xce60>
   1e7e0:	mov	r1, r4
   1e7e4:	mov	r0, r5
   1e7e8:	bl	1e698 <__assert_fail@plt+0xccf8>
   1e7ec:	b	1e780 <__assert_fail@plt+0xcde0>
   1e7f0:	add	r8, r8, #1
   1e7f4:	ldr	r2, [r5, #8]
   1e7f8:	str	r1, [r2, r3, lsl #2]
   1e7fc:	add	r3, r3, #1
   1e800:	mov	r9, r3
   1e804:	ldr	r2, [r6, #4]
   1e808:	cmp	r2, r7
   1e80c:	ble	1e878 <__assert_fail@plt+0xced8>
   1e810:	ldr	r1, [r4, #4]
   1e814:	cmp	r1, r8
   1e818:	ble	1e84c <__assert_fail@plt+0xceac>
   1e81c:	ldr	r2, [r6, #8]
   1e820:	ldr	r2, [r2, r7, lsl #2]
   1e824:	ldr	r1, [r4, #8]
   1e828:	ldr	r1, [r1, r8, lsl #2]
   1e82c:	cmp	r2, r1
   1e830:	bgt	1e7f0 <__assert_fail@plt+0xce50>
   1e834:	cmp	r2, r1
   1e838:	addeq	r8, r8, #1
   1e83c:	add	r7, r7, #1
   1e840:	ldr	r1, [r5, #8]
   1e844:	str	r2, [r1, r3, lsl #2]
   1e848:	b	1e7fc <__assert_fail@plt+0xce5c>
   1e84c:	ldr	r0, [r5, #8]
   1e850:	sub	r2, r2, r7
   1e854:	ldr	r1, [r6, #8]
   1e858:	lsl	r2, r2, #2
   1e85c:	add	r1, r1, r7, lsl #2
   1e860:	add	r0, r0, r3, lsl #2
   1e864:	bl	115d4 <memcpy@plt>
   1e868:	ldr	r3, [r6, #4]
   1e86c:	sub	r7, r3, r7
   1e870:	add	r9, r9, r7
   1e874:	b	1e884 <__assert_fail@plt+0xcee4>
   1e878:	ldr	r2, [r4, #4]
   1e87c:	cmp	r2, r8
   1e880:	bgt	1e890 <__assert_fail@plt+0xcef0>
   1e884:	str	r9, [r5, #4]
   1e888:	mov	r0, #0
   1e88c:	b	1e780 <__assert_fail@plt+0xcde0>
   1e890:	ldr	r0, [r5, #8]
   1e894:	sub	r2, r2, r8
   1e898:	ldr	r1, [r4, #8]
   1e89c:	lsl	r2, r2, #2
   1e8a0:	add	r1, r1, r8, lsl #2
   1e8a4:	add	r0, r0, r3, lsl #2
   1e8a8:	bl	115d4 <memcpy@plt>
   1e8ac:	ldr	r3, [r4, #4]
   1e8b0:	sub	r8, r3, r8
   1e8b4:	add	r9, r9, r8
   1e8b8:	b	1e884 <__assert_fail@plt+0xcee4>
   1e8bc:	mov	r0, #12
   1e8c0:	b	1e780 <__assert_fail@plt+0xcde0>
   1e8c4:	ldr	r3, [r1, #4]
   1e8c8:	cmp	r3, #0
   1e8cc:	beq	1ea88 <__assert_fail@plt+0xd0e8>
   1e8d0:	ldr	ip, [r2, #4]
   1e8d4:	cmp	ip, #0
   1e8d8:	beq	1ea84 <__assert_fail@plt+0xd0e4>
   1e8dc:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1e8e0:	strd	r6, [sp, #8]
   1e8e4:	str	r8, [sp, #16]
   1e8e8:	str	lr, [sp, #20]
   1e8ec:	mov	r6, r2
   1e8f0:	mov	r5, r1
   1e8f4:	mov	r7, r0
   1e8f8:	add	r3, r3, ip
   1e8fc:	ldr	r4, [r0]
   1e900:	ldr	r2, [r0, #4]
   1e904:	add	r2, r3, r2
   1e908:	cmp	r2, r4
   1e90c:	bgt	1e934 <__assert_fail@plt+0xcf94>
   1e910:	ldr	r3, [r7, #4]
   1e914:	ldr	r4, [r5, #4]
   1e918:	ldr	r2, [r6, #4]
   1e91c:	add	r1, r3, r4
   1e920:	add	r1, r1, r2
   1e924:	sub	r4, r4, #1
   1e928:	sub	r2, r2, #1
   1e92c:	sub	r3, r3, #1
   1e930:	b	1e9c0 <__assert_fail@plt+0xd020>
   1e934:	add	r4, r3, r4
   1e938:	lsl	r1, r4, #2
   1e93c:	ldr	r0, [r0, #8]
   1e940:	bl	1cb14 <__assert_fail@plt+0xb174>
   1e944:	cmp	r0, #0
   1e948:	beq	1ea90 <__assert_fail@plt+0xd0f0>
   1e94c:	str	r0, [r7, #8]
   1e950:	str	r4, [r7]
   1e954:	b	1e910 <__assert_fail@plt+0xcf70>
   1e958:	cmp	r3, #0
   1e95c:	blt	1e998 <__assert_fail@plt+0xcff8>
   1e960:	ldr	r8, [r7, #8]
   1e964:	add	lr, r8, r3, lsl #2
   1e968:	ldr	r0, [r8, r3, lsl #2]
   1e96c:	cmp	ip, r0
   1e970:	bge	1e98c <__assert_fail@plt+0xcfec>
   1e974:	sub	r3, r3, #1
   1e978:	cmn	r3, #1
   1e97c:	beq	1e998 <__assert_fail@plt+0xcff8>
   1e980:	ldr	r0, [lr, #-4]!
   1e984:	cmp	ip, r0
   1e988:	blt	1e974 <__assert_fail@plt+0xcfd4>
   1e98c:	ldr	r0, [r8, r3, lsl #2]
   1e990:	cmp	ip, r0
   1e994:	beq	1e9a4 <__assert_fail@plt+0xd004>
   1e998:	sub	r1, r1, #1
   1e99c:	ldr	r0, [r7, #8]
   1e9a0:	str	ip, [r0, r1, lsl #2]
   1e9a4:	subs	r4, r4, #1
   1e9a8:	bmi	1e9e8 <__assert_fail@plt+0xd048>
   1e9ac:	subs	r2, r2, #1
   1e9b0:	bpl	1e9c0 <__assert_fail@plt+0xd020>
   1e9b4:	b	1e9e8 <__assert_fail@plt+0xd048>
   1e9b8:	subs	r4, r4, #1
   1e9bc:	bmi	1e9e8 <__assert_fail@plt+0xd048>
   1e9c0:	ldr	r0, [r5, #8]
   1e9c4:	ldr	ip, [r0, r4, lsl #2]
   1e9c8:	ldr	r0, [r6, #8]
   1e9cc:	ldr	r0, [r0, r2, lsl #2]
   1e9d0:	cmp	ip, r0
   1e9d4:	beq	1e958 <__assert_fail@plt+0xcfb8>
   1e9d8:	cmp	ip, r0
   1e9dc:	bge	1e9b8 <__assert_fail@plt+0xd018>
   1e9e0:	subs	r2, r2, #1
   1e9e4:	bpl	1e9c0 <__assert_fail@plt+0xd020>
   1e9e8:	ldr	r3, [r7, #4]
   1e9ec:	sub	r0, r3, #1
   1e9f0:	ldr	r2, [r5, #4]
   1e9f4:	add	r2, r3, r2
   1e9f8:	ldr	ip, [r6, #4]
   1e9fc:	add	r2, r2, ip
   1ea00:	sub	r4, r2, #1
   1ea04:	sub	r2, r2, r1
   1ea08:	add	r3, r3, r2
   1ea0c:	str	r3, [r7, #4]
   1ea10:	cmp	r0, #0
   1ea14:	cmpge	r2, #0
   1ea18:	bgt	1ea58 <__assert_fail@plt+0xd0b8>
   1ea1c:	ldr	r0, [r7, #8]
   1ea20:	lsl	r2, r2, #2
   1ea24:	add	r1, r0, r1, lsl #2
   1ea28:	bl	115d4 <memcpy@plt>
   1ea2c:	mov	r3, #0
   1ea30:	mov	r0, r3
   1ea34:	ldrd	r4, [sp]
   1ea38:	ldrd	r6, [sp, #8]
   1ea3c:	ldr	r8, [sp, #16]
   1ea40:	add	sp, sp, #20
   1ea44:	pop	{pc}		; (ldr pc, [sp], #4)
   1ea48:	add	lr, r0, r2
   1ea4c:	str	ip, [r3, lr, lsl #2]
   1ea50:	subs	r0, r0, #1
   1ea54:	bmi	1ea1c <__assert_fail@plt+0xd07c>
   1ea58:	ldr	r3, [r7, #8]
   1ea5c:	ldr	lr, [r3, r4, lsl #2]
   1ea60:	ldr	ip, [r3, r0, lsl #2]
   1ea64:	cmp	lr, ip
   1ea68:	ble	1ea48 <__assert_fail@plt+0xd0a8>
   1ea6c:	sub	r4, r4, #1
   1ea70:	add	ip, r0, r2
   1ea74:	str	lr, [r3, ip, lsl #2]
   1ea78:	subs	r2, r2, #1
   1ea7c:	bne	1ea58 <__assert_fail@plt+0xd0b8>
   1ea80:	b	1ea1c <__assert_fail@plt+0xd07c>
   1ea84:	mov	r3, ip
   1ea88:	mov	r0, r3
   1ea8c:	bx	lr
   1ea90:	mov	r3, #12
   1ea94:	b	1ea30 <__assert_fail@plt+0xd090>
   1ea98:	strd	r4, [sp, #-16]!
   1ea9c:	str	r6, [sp, #8]
   1eaa0:	str	lr, [sp, #12]
   1eaa4:	mov	r5, r0
   1eaa8:	ldr	r6, [r0, #36]	; 0x24
   1eaac:	ldr	r3, [r0, #48]	; 0x30
   1eab0:	cmp	r6, r3
   1eab4:	movge	r6, r3
   1eab8:	ldr	r4, [r0, #28]
   1eabc:	cmp	r6, r4
   1eac0:	ble	1eb18 <__assert_fail@plt+0xd178>
   1eac4:	bl	11754 <__ctype_toupper_loc@plt>
   1eac8:	ldr	r3, [r5]
   1eacc:	ldr	r2, [r5, #24]
   1ead0:	add	r3, r3, r4
   1ead4:	ldrb	r3, [r3, r2]
   1ead8:	ldr	r2, [r5, #64]	; 0x40
   1eadc:	cmp	r2, #0
   1eae0:	ldrbne	r3, [r2, r3]
   1eae4:	ldr	r2, [r5, #4]
   1eae8:	ldr	r1, [r0]
   1eaec:	ldr	r3, [r1, r3, lsl #2]
   1eaf0:	strb	r3, [r2, r4]
   1eaf4:	add	r4, r4, #1
   1eaf8:	cmp	r6, r4
   1eafc:	bne	1eac8 <__assert_fail@plt+0xd128>
   1eb00:	str	r6, [r5, #28]
   1eb04:	str	r6, [r5, #32]
   1eb08:	ldrd	r4, [sp]
   1eb0c:	ldr	r6, [sp, #8]
   1eb10:	add	sp, sp, #12
   1eb14:	pop	{pc}		; (ldr pc, [sp], #4)
   1eb18:	mov	r6, r4
   1eb1c:	b	1eb00 <__assert_fail@plt+0xd160>
   1eb20:	strd	r4, [sp, #-16]!
   1eb24:	str	r6, [sp, #8]
   1eb28:	str	lr, [sp, #12]
   1eb2c:	ldr	r3, [r0, #36]	; 0x24
   1eb30:	cmn	r3, #-536870910	; 0xe0000002
   1eb34:	bhi	1ebfc <__assert_fail@plt+0xd25c>
   1eb38:	mov	r4, r0
   1eb3c:	lsl	r3, r3, #1
   1eb40:	ldr	r2, [r0, #48]	; 0x30
   1eb44:	cmp	r3, r2
   1eb48:	movge	r3, r2
   1eb4c:	cmp	r3, r1
   1eb50:	movge	r1, r3
   1eb54:	bl	1d8b0 <__assert_fail@plt+0xbf10>
   1eb58:	subs	r5, r0, #0
   1eb5c:	bne	1ebac <__assert_fail@plt+0xd20c>
   1eb60:	ldr	r0, [r4, #100]	; 0x64
   1eb64:	cmp	r0, #0
   1eb68:	beq	1eb88 <__assert_fail@plt+0xd1e8>
   1eb6c:	ldr	r1, [r4, #36]	; 0x24
   1eb70:	add	r1, r1, #1
   1eb74:	lsl	r1, r1, #2
   1eb78:	bl	1cb14 <__assert_fail@plt+0xb174>
   1eb7c:	cmp	r0, #0
   1eb80:	beq	1ec04 <__assert_fail@plt+0xd264>
   1eb84:	str	r0, [r4, #100]	; 0x64
   1eb88:	ldrb	r3, [r4, #72]	; 0x48
   1eb8c:	cmp	r3, #0
   1eb90:	beq	1ebcc <__assert_fail@plt+0xd22c>
   1eb94:	ldr	r3, [r4, #80]	; 0x50
   1eb98:	cmp	r3, #1
   1eb9c:	ble	1ebc0 <__assert_fail@plt+0xd220>
   1eba0:	mov	r0, r4
   1eba4:	bl	1e114 <__assert_fail@plt+0xc774>
   1eba8:	mov	r5, r0
   1ebac:	mov	r0, r5
   1ebb0:	ldrd	r4, [sp]
   1ebb4:	ldr	r6, [sp, #8]
   1ebb8:	add	sp, sp, #12
   1ebbc:	pop	{pc}		; (ldr pc, [sp], #4)
   1ebc0:	mov	r0, r4
   1ebc4:	bl	1ea98 <__assert_fail@plt+0xd0f8>
   1ebc8:	b	1ebac <__assert_fail@plt+0xd20c>
   1ebcc:	ldr	r3, [r4, #80]	; 0x50
   1ebd0:	cmp	r3, #1
   1ebd4:	bgt	1ebf0 <__assert_fail@plt+0xd250>
   1ebd8:	ldr	r3, [r4, #64]	; 0x40
   1ebdc:	cmp	r3, #0
   1ebe0:	beq	1ebac <__assert_fail@plt+0xd20c>
   1ebe4:	mov	r0, r4
   1ebe8:	bl	1cc38 <__assert_fail@plt+0xb298>
   1ebec:	b	1ebac <__assert_fail@plt+0xd20c>
   1ebf0:	mov	r0, r4
   1ebf4:	bl	1df7c <__assert_fail@plt+0xc5dc>
   1ebf8:	b	1ebac <__assert_fail@plt+0xd20c>
   1ebfc:	mov	r5, #12
   1ec00:	b	1ebac <__assert_fail@plt+0xd20c>
   1ec04:	mov	r5, #12
   1ec08:	b	1ebac <__assert_fail@plt+0xd20c>
   1ec0c:	ldr	r3, [r1, #40]	; 0x28
   1ec10:	ldr	ip, [r1, #56]	; 0x38
   1ec14:	cmp	ip, r3
   1ec18:	ble	1eeb0 <__assert_fail@plt+0xd510>
   1ec1c:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1ec20:	strd	r6, [sp, #8]
   1ec24:	str	r8, [sp, #16]
   1ec28:	str	lr, [sp, #20]
   1ec2c:	sub	sp, sp, #8
   1ec30:	ldr	ip, [r1, #4]
   1ec34:	ldrb	r6, [ip, r3]
   1ec38:	strb	r6, [r0]
   1ec3c:	ldrb	r3, [r0, #6]
   1ec40:	and	r3, r3, #191	; 0xbf
   1ec44:	bfc	r3, #5, #1
   1ec48:	strb	r3, [r0, #6]
   1ec4c:	ldr	r3, [r1, #80]	; 0x50
   1ec50:	cmp	r3, #1
   1ec54:	ble	1ec78 <__assert_fail@plt+0xd2d8>
   1ec58:	ldr	ip, [r1, #40]	; 0x28
   1ec5c:	ldr	lr, [r1, #28]
   1ec60:	cmp	ip, lr
   1ec64:	beq	1ec78 <__assert_fail@plt+0xd2d8>
   1ec68:	ldr	lr, [r1, #8]
   1ec6c:	ldr	ip, [lr, ip, lsl #2]
   1ec70:	cmn	ip, #1
   1ec74:	beq	1eec0 <__assert_fail@plt+0xd520>
   1ec78:	mov	r7, r2
   1ec7c:	mov	r4, r1
   1ec80:	mov	r5, r0
   1ec84:	cmp	r6, #92	; 0x5c
   1ec88:	beq	1eedc <__assert_fail@plt+0xd53c>
   1ec8c:	mov	r3, #1
   1ec90:	strb	r3, [r0, #4]
   1ec94:	ldr	r3, [r1, #80]	; 0x50
   1ec98:	cmp	r3, #1
   1ec9c:	ble	1f3c0 <__assert_fail@plt+0xda20>
   1eca0:	ldr	r1, [r1, #40]	; 0x28
   1eca4:	mov	r0, r4
   1eca8:	bl	1cc1c <__assert_fail@plt+0xb27c>
   1ecac:	mov	r8, r0
   1ecb0:	bl	117e4 <iswalnum@plt>
   1ecb4:	adds	r0, r0, #0
   1ecb8:	movne	r0, #1
   1ecbc:	cmp	r8, #95	; 0x5f
   1ecc0:	orreq	r0, r0, #1
   1ecc4:	ldrb	r3, [r5, #6]
   1ecc8:	bfi	r3, r0, #6, #1
   1eccc:	strb	r3, [r5, #6]
   1ecd0:	sub	r3, r6, #10
   1ecd4:	cmp	r3, #115	; 0x73
   1ecd8:	ldrls	pc, [pc, r3, lsl #2]
   1ecdc:	b	1f5d8 <__assert_fail@plt+0xdc38>
   1ece0:	andeq	pc, r1, ip, ror #7
   1ece4:	ldrdeq	pc, [r1], -r8
   1ece8:	ldrdeq	pc, [r1], -r8
   1ecec:	ldrdeq	pc, [r1], -r8
   1ecf0:	ldrdeq	pc, [r1], -r8
   1ecf4:	ldrdeq	pc, [r1], -r8
   1ecf8:	ldrdeq	pc, [r1], -r8
   1ecfc:	ldrdeq	pc, [r1], -r8
   1ed00:	ldrdeq	pc, [r1], -r8
   1ed04:	ldrdeq	pc, [r1], -r8
   1ed08:	ldrdeq	pc, [r1], -r8
   1ed0c:	ldrdeq	pc, [r1], -r8
   1ed10:	ldrdeq	pc, [r1], -r8
   1ed14:	ldrdeq	pc, [r1], -r8
   1ed18:	ldrdeq	pc, [r1], -r8
   1ed1c:	ldrdeq	pc, [r1], -r8
   1ed20:	ldrdeq	pc, [r1], -r8
   1ed24:	ldrdeq	pc, [r1], -r8
   1ed28:	ldrdeq	pc, [r1], -r8
   1ed2c:	ldrdeq	pc, [r1], -r8
   1ed30:	ldrdeq	pc, [r1], -r8
   1ed34:	ldrdeq	pc, [r1], -r8
   1ed38:	ldrdeq	pc, [r1], -r8
   1ed3c:	ldrdeq	pc, [r1], -r8
   1ed40:	ldrdeq	pc, [r1], -r8
   1ed44:	ldrdeq	pc, [r1], -r8
   1ed48:	andeq	pc, r1, r0, ror #10
   1ed4c:	ldrdeq	pc, [r1], -r8
   1ed50:	ldrdeq	pc, [r1], -r8
   1ed54:	ldrdeq	pc, [r1], -r8
   1ed58:	andeq	pc, r1, ip, lsr #9
   1ed5c:	andeq	pc, r1, r8, asr #9
   1ed60:	andeq	pc, r1, r4, lsr #8
   1ed64:	andeq	pc, r1, r4, lsr r4	; <UNPREDICTABLE>
   1ed68:	ldrdeq	pc, [r1], -r8
   1ed6c:	ldrdeq	pc, [r1], -r8
   1ed70:	strdeq	pc, [r1], -r4
   1ed74:	ldrdeq	pc, [r1], -r8
   1ed78:	ldrdeq	pc, [r1], -r8
   1ed7c:	ldrdeq	pc, [r1], -r8
   1ed80:	ldrdeq	pc, [r1], -r8
   1ed84:	ldrdeq	pc, [r1], -r8
   1ed88:	ldrdeq	pc, [r1], -r8
   1ed8c:	ldrdeq	pc, [r1], -r8
   1ed90:	ldrdeq	pc, [r1], -r8
   1ed94:	ldrdeq	pc, [r1], -r8
   1ed98:	ldrdeq	pc, [r1], -r8
   1ed9c:	ldrdeq	pc, [r1], -r8
   1eda0:	ldrdeq	pc, [r1], -r8
   1eda4:	ldrdeq	pc, [r1], -r8
   1eda8:	ldrdeq	pc, [r1], -r8
   1edac:	ldrdeq	pc, [r1], -r8
   1edb0:	ldrdeq	pc, [r1], -r8
   1edb4:	andeq	pc, r1, r4, asr r4	; <UNPREDICTABLE>
   1edb8:	ldrdeq	pc, [r1], -r8
   1edbc:	ldrdeq	pc, [r1], -r8
   1edc0:	ldrdeq	pc, [r1], -r8
   1edc4:	ldrdeq	pc, [r1], -r8
   1edc8:	ldrdeq	pc, [r1], -r8
   1edcc:	ldrdeq	pc, [r1], -r8
   1edd0:	ldrdeq	pc, [r1], -r8
   1edd4:	ldrdeq	pc, [r1], -r8
   1edd8:	ldrdeq	pc, [r1], -r8
   1eddc:	ldrdeq	pc, [r1], -r8
   1ede0:	ldrdeq	pc, [r1], -r8
   1ede4:	ldrdeq	pc, [r1], -r8
   1ede8:	ldrdeq	pc, [r1], -r8
   1edec:	ldrdeq	pc, [r1], -r8
   1edf0:	ldrdeq	pc, [r1], -r8
   1edf4:	ldrdeq	pc, [r1], -r8
   1edf8:	ldrdeq	pc, [r1], -r8
   1edfc:	ldrdeq	pc, [r1], -r8
   1ee00:	ldrdeq	pc, [r1], -r8
   1ee04:	ldrdeq	pc, [r1], -r8
   1ee08:	ldrdeq	pc, [r1], -r8
   1ee0c:	ldrdeq	pc, [r1], -r8
   1ee10:	ldrdeq	pc, [r1], -r8
   1ee14:	ldrdeq	pc, [r1], -r8
   1ee18:	ldrdeq	pc, [r1], -r8
   1ee1c:	ldrdeq	pc, [r1], -r8
   1ee20:	ldrdeq	pc, [r1], -r8
   1ee24:	andeq	pc, r1, r4, ror #9
   1ee28:	ldrdeq	pc, [r1], -r8
   1ee2c:	ldrdeq	pc, [r1], -r8
   1ee30:	andeq	pc, r1, r4, lsl #10
   1ee34:	ldrdeq	pc, [r1], -r8
   1ee38:	ldrdeq	pc, [r1], -r8
   1ee3c:	ldrdeq	pc, [r1], -r8
   1ee40:	ldrdeq	pc, [r1], -r8
   1ee44:	ldrdeq	pc, [r1], -r8
   1ee48:	ldrdeq	pc, [r1], -r8
   1ee4c:	ldrdeq	pc, [r1], -r8
   1ee50:	ldrdeq	pc, [r1], -r8
   1ee54:	ldrdeq	pc, [r1], -r8
   1ee58:	ldrdeq	pc, [r1], -r8
   1ee5c:	ldrdeq	pc, [r1], -r8
   1ee60:	ldrdeq	pc, [r1], -r8
   1ee64:	ldrdeq	pc, [r1], -r8
   1ee68:	ldrdeq	pc, [r1], -r8
   1ee6c:	ldrdeq	pc, [r1], -r8
   1ee70:	ldrdeq	pc, [r1], -r8
   1ee74:	ldrdeq	pc, [r1], -r8
   1ee78:	ldrdeq	pc, [r1], -r8
   1ee7c:	ldrdeq	pc, [r1], -r8
   1ee80:	ldrdeq	pc, [r1], -r8
   1ee84:	ldrdeq	pc, [r1], -r8
   1ee88:	ldrdeq	pc, [r1], -r8
   1ee8c:	ldrdeq	pc, [r1], -r8
   1ee90:	ldrdeq	pc, [r1], -r8
   1ee94:	ldrdeq	pc, [r1], -r8
   1ee98:	ldrdeq	pc, [r1], -r8
   1ee9c:	ldrdeq	pc, [r1], -r8
   1eea0:	ldrdeq	pc, [r1], -r8
   1eea4:	andeq	pc, r1, r4, ror r4	; <UNPREDICTABLE>
   1eea8:	andeq	pc, r1, r8, lsl #8
   1eeac:	muleq	r1, r0, r4
   1eeb0:	mov	r3, #2
   1eeb4:	strb	r3, [r0, #4]
   1eeb8:	mov	r0, #0
   1eebc:	bx	lr
   1eec0:	mov	r3, #1
   1eec4:	strb	r3, [r0, #4]
   1eec8:	ldrb	r2, [r0, #6]
   1eecc:	orr	r2, r2, #32
   1eed0:	strb	r2, [r0, #6]
   1eed4:	mov	r0, r3
   1eed8:	b	1eefc <__assert_fail@plt+0xd55c>
   1eedc:	ldr	r1, [r1, #40]	; 0x28
   1eee0:	add	r2, r1, #1
   1eee4:	ldr	r0, [r4, #48]	; 0x30
   1eee8:	cmp	r2, r0
   1eeec:	blt	1ef14 <__assert_fail@plt+0xd574>
   1eef0:	mov	r3, #36	; 0x24
   1eef4:	strb	r3, [r5, #4]
   1eef8:	mov	r0, #1
   1eefc:	add	sp, sp, #8
   1ef00:	ldrd	r4, [sp]
   1ef04:	ldrd	r6, [sp, #8]
   1ef08:	ldr	r8, [sp, #16]
   1ef0c:	add	sp, sp, #20
   1ef10:	pop	{pc}		; (ldr pc, [sp], #4)
   1ef14:	ldrb	r0, [r4, #75]	; 0x4b
   1ef18:	cmp	r0, #0
   1ef1c:	bne	1f0e0 <__assert_fail@plt+0xd740>
   1ef20:	ldr	r3, [r4, #4]
   1ef24:	ldrb	r6, [r3, r2]
   1ef28:	strb	r6, [r5]
   1ef2c:	mov	r3, #1
   1ef30:	strb	r3, [r5, #4]
   1ef34:	ldr	r3, [r4, #80]	; 0x50
   1ef38:	cmp	r3, #1
   1ef3c:	ble	1f15c <__assert_fail@plt+0xd7bc>
   1ef40:	ldr	r1, [r4, #40]	; 0x28
   1ef44:	add	r1, r1, #1
   1ef48:	mov	r0, r4
   1ef4c:	bl	1cc1c <__assert_fail@plt+0xb27c>
   1ef50:	mov	r4, r0
   1ef54:	bl	117e4 <iswalnum@plt>
   1ef58:	adds	r0, r0, #0
   1ef5c:	movne	r0, #1
   1ef60:	cmp	r4, #95	; 0x5f
   1ef64:	orreq	r0, r0, #1
   1ef68:	ldrb	r3, [r5, #6]
   1ef6c:	bfi	r3, r0, #6, #1
   1ef70:	strb	r3, [r5, #6]
   1ef74:	sub	r3, r6, #39	; 0x27
   1ef78:	cmp	r3, #86	; 0x56
   1ef7c:	ldrls	pc, [pc, r3, lsl #2]
   1ef80:	b	1f5d0 <__assert_fail@plt+0xdc30>
   1ef84:	andeq	pc, r1, ip, ror #5
   1ef88:	andeq	pc, r1, r0, lsl r3	; <UNPREDICTABLE>
   1ef8c:	andeq	pc, r1, ip, lsr #6
   1ef90:	ldrdeq	pc, [r1], -r0
   1ef94:	andeq	pc, r1, r8, asr #6
   1ef98:	ldrdeq	pc, [r1], -r0
   1ef9c:	ldrdeq	pc, [r1], -r0
   1efa0:	ldrdeq	pc, [r1], -r0
   1efa4:	ldrdeq	pc, [r1], -r0
   1efa8:	ldrdeq	pc, [r1], -r0
   1efac:	andeq	pc, r1, r4, lsr #3
   1efb0:	andeq	pc, r1, r4, lsr #3
   1efb4:	andeq	pc, r1, r4, lsr #3
   1efb8:	andeq	pc, r1, r4, lsr #3
   1efbc:	andeq	pc, r1, r4, lsr #3
   1efc0:	andeq	pc, r1, r4, lsr #3
   1efc4:	andeq	pc, r1, r4, lsr #3
   1efc8:	andeq	pc, r1, r4, lsr #3
   1efcc:	andeq	pc, r1, r4, lsr #3
   1efd0:	ldrdeq	pc, [r1], -r0
   1efd4:	ldrdeq	pc, [r1], -r0
   1efd8:	andeq	pc, r1, r8, asr #3
   1efdc:	ldrdeq	pc, [r1], -r0
   1efe0:	andeq	pc, r1, ip, ror #3
   1efe4:	andeq	pc, r1, r8, ror #6
   1efe8:	ldrdeq	pc, [r1], -r0
   1efec:	ldrdeq	pc, [r1], -r0
   1eff0:	andeq	pc, r1, r4, lsr r2	; <UNPREDICTABLE>
   1eff4:	ldrdeq	pc, [r1], -r0
   1eff8:	ldrdeq	pc, [r1], -r0
   1effc:	ldrdeq	pc, [r1], -r0
   1f000:	ldrdeq	pc, [r1], -r0
   1f004:	ldrdeq	pc, [r1], -r0
   1f008:	ldrdeq	pc, [r1], -r0
   1f00c:	ldrdeq	pc, [r1], -r0
   1f010:	ldrdeq	pc, [r1], -r0
   1f014:	ldrdeq	pc, [r1], -r0
   1f018:	ldrdeq	pc, [r1], -r0
   1f01c:	ldrdeq	pc, [r1], -r0
   1f020:	ldrdeq	pc, [r1], -r0
   1f024:	ldrdeq	pc, [r1], -r0
   1f028:	ldrdeq	pc, [r1], -r0
   1f02c:	ldrdeq	pc, [r1], -r0
   1f030:	ldrdeq	pc, [r1], -r0
   1f034:	andeq	pc, r1, ip, lsr #5
   1f038:	ldrdeq	pc, [r1], -r0
   1f03c:	ldrdeq	pc, [r1], -r0
   1f040:	ldrdeq	pc, [r1], -r0
   1f044:	andeq	pc, r1, r4, ror r2	; <UNPREDICTABLE>
   1f048:	ldrdeq	pc, [r1], -r0
   1f04c:	ldrdeq	pc, [r1], -r0
   1f050:	ldrdeq	pc, [r1], -r0
   1f054:	ldrdeq	pc, [r1], -r0
   1f058:	ldrdeq	pc, [r1], -r0
   1f05c:	ldrdeq	pc, [r1], -r0
   1f060:	ldrdeq	pc, [r1], -r0
   1f064:	ldrdeq	pc, [r1], -r0
   1f068:	andeq	pc, r1, r8, asr #5
   1f06c:	ldrdeq	pc, [r1], -r0
   1f070:	andeq	pc, r1, r0, lsl r2	; <UNPREDICTABLE>
   1f074:	ldrdeq	pc, [r1], -r0
   1f078:	ldrdeq	pc, [r1], -r0
   1f07c:	ldrdeq	pc, [r1], -r0
   1f080:	ldrdeq	pc, [r1], -r0
   1f084:	ldrdeq	pc, [r1], -r0
   1f088:	ldrdeq	pc, [r1], -r0
   1f08c:	ldrdeq	pc, [r1], -r0
   1f090:	ldrdeq	pc, [r1], -r0
   1f094:	ldrdeq	pc, [r1], -r0
   1f098:	ldrdeq	pc, [r1], -r0
   1f09c:	ldrdeq	pc, [r1], -r0
   1f0a0:	ldrdeq	pc, [r1], -r0
   1f0a4:	ldrdeq	pc, [r1], -r0
   1f0a8:	ldrdeq	pc, [r1], -r0
   1f0ac:	ldrdeq	pc, [r1], -r0
   1f0b0:	ldrdeq	pc, [r1], -r0
   1f0b4:	muleq	r1, r0, r2
   1f0b8:	ldrdeq	pc, [r1], -r0
   1f0bc:	ldrdeq	pc, [r1], -r0
   1f0c0:	ldrdeq	pc, [r1], -r0
   1f0c4:	andeq	pc, r1, r8, asr r2	; <UNPREDICTABLE>
   1f0c8:	ldrdeq	pc, [r1], -r0
   1f0cc:	ldrdeq	pc, [r1], -r0
   1f0d0:	ldrdeq	pc, [r1], -r0
   1f0d4:	andeq	pc, r1, r8, lsl #7
   1f0d8:	andeq	pc, r1, r8, lsl #3
   1f0dc:	andeq	pc, r1, r4, lsr #7
   1f0e0:	cmp	r3, #1
   1f0e4:	ble	1f11c <__assert_fail@plt+0xd77c>
   1f0e8:	ldr	r3, [r4, #8]
   1f0ec:	lsl	ip, r2, #2
   1f0f0:	ldr	r0, [r3, r2, lsl #2]
   1f0f4:	cmn	r0, #1
   1f0f8:	beq	1f150 <__assert_fail@plt+0xd7b0>
   1f0fc:	add	r1, r1, #2
   1f100:	ldr	r0, [r4, #28]
   1f104:	cmp	r0, r1
   1f108:	beq	1f11c <__assert_fail@plt+0xd77c>
   1f10c:	add	r3, r3, ip
   1f110:	ldr	r3, [r3, #4]
   1f114:	cmn	r3, #1
   1f118:	beq	1f150 <__assert_fail@plt+0xd7b0>
   1f11c:	ldrb	r3, [r4, #76]	; 0x4c
   1f120:	cmp	r3, #0
   1f124:	beq	1f5e0 <__assert_fail@plt+0xdc40>
   1f128:	ldr	r1, [r4, #12]
   1f12c:	ldr	r3, [r4]
   1f130:	ldr	r0, [r1, r2, lsl #2]
   1f134:	ldr	r1, [r4, #24]
   1f138:	add	r3, r3, r0
   1f13c:	ldrb	r6, [r3, r1]
   1f140:	bics	r3, r6, #127	; 0x7f
   1f144:	ldrne	r3, [r4, #4]
   1f148:	ldrbne	r6, [r3, r2]
   1f14c:	b	1ef28 <__assert_fail@plt+0xd588>
   1f150:	ldr	r3, [r4, #4]
   1f154:	ldrb	r6, [r3, r2]
   1f158:	b	1ef28 <__assert_fail@plt+0xd588>
   1f15c:	bl	11778 <__ctype_b_loc@plt>
   1f160:	ldr	r2, [r0]
   1f164:	lsl	r3, r6, #1
   1f168:	ldrh	r3, [r2, r3]
   1f16c:	ubfx	r3, r3, #3, #1
   1f170:	cmp	r6, #95	; 0x5f
   1f174:	orreq	r3, r3, #1
   1f178:	ldrb	r2, [r5, #6]
   1f17c:	bfi	r2, r3, #6, #1
   1f180:	strb	r2, [r5, #6]
   1f184:	b	1ef74 <__assert_fail@plt+0xd5d4>
   1f188:	tst	r7, #33792	; 0x8400
   1f18c:	movne	r0, #2
   1f190:	bne	1eefc <__assert_fail@plt+0xd55c>
   1f194:	mov	r3, #10
   1f198:	strb	r3, [r5, #4]
   1f19c:	mov	r0, #2
   1f1a0:	b	1eefc <__assert_fail@plt+0xd55c>
   1f1a4:	tst	r7, #16384	; 0x4000
   1f1a8:	movne	r0, #2
   1f1ac:	bne	1eefc <__assert_fail@plt+0xd55c>
   1f1b0:	mov	r3, #4
   1f1b4:	strb	r3, [r5, #4]
   1f1b8:	sub	r6, r6, #49	; 0x31
   1f1bc:	str	r6, [r5]
   1f1c0:	mov	r0, #2
   1f1c4:	b	1eefc <__assert_fail@plt+0xd55c>
   1f1c8:	tst	r7, #524288	; 0x80000
   1f1cc:	movne	r0, #2
   1f1d0:	bne	1eefc <__assert_fail@plt+0xd55c>
   1f1d4:	mov	r3, #12
   1f1d8:	strb	r3, [r5, #4]
   1f1dc:	mov	r3, #6
   1f1e0:	str	r3, [r5]
   1f1e4:	mov	r0, #2
   1f1e8:	b	1eefc <__assert_fail@plt+0xd55c>
   1f1ec:	tst	r7, #524288	; 0x80000
   1f1f0:	movne	r0, #2
   1f1f4:	bne	1eefc <__assert_fail@plt+0xd55c>
   1f1f8:	mov	r3, #12
   1f1fc:	strb	r3, [r5, #4]
   1f200:	mov	r3, #9
   1f204:	str	r3, [r5]
   1f208:	mov	r0, #2
   1f20c:	b	1eefc <__assert_fail@plt+0xd55c>
   1f210:	tst	r7, #524288	; 0x80000
   1f214:	movne	r0, #2
   1f218:	bne	1eefc <__assert_fail@plt+0xd55c>
   1f21c:	mov	r3, #12
   1f220:	strb	r3, [r5, #4]
   1f224:	mov	r3, #256	; 0x100
   1f228:	str	r3, [r5]
   1f22c:	mov	r0, #2
   1f230:	b	1eefc <__assert_fail@plt+0xd55c>
   1f234:	tst	r7, #524288	; 0x80000
   1f238:	movne	r0, #2
   1f23c:	bne	1eefc <__assert_fail@plt+0xd55c>
   1f240:	mov	r3, #12
   1f244:	strb	r3, [r5, #4]
   1f248:	mov	r3, #512	; 0x200
   1f24c:	str	r3, [r5]
   1f250:	mov	r0, #2
   1f254:	b	1eefc <__assert_fail@plt+0xd55c>
   1f258:	tst	r7, #524288	; 0x80000
   1f25c:	movne	r0, #2
   1f260:	bne	1eefc <__assert_fail@plt+0xd55c>
   1f264:	mov	r3, #32
   1f268:	strb	r3, [r5, #4]
   1f26c:	mov	r0, #2
   1f270:	b	1eefc <__assert_fail@plt+0xd55c>
   1f274:	tst	r7, #524288	; 0x80000
   1f278:	movne	r0, #2
   1f27c:	bne	1eefc <__assert_fail@plt+0xd55c>
   1f280:	mov	r3, #33	; 0x21
   1f284:	strb	r3, [r5, #4]
   1f288:	mov	r0, #2
   1f28c:	b	1eefc <__assert_fail@plt+0xd55c>
   1f290:	tst	r7, #524288	; 0x80000
   1f294:	movne	r0, #2
   1f298:	bne	1eefc <__assert_fail@plt+0xd55c>
   1f29c:	mov	r3, #34	; 0x22
   1f2a0:	strb	r3, [r5, #4]
   1f2a4:	mov	r0, #2
   1f2a8:	b	1eefc <__assert_fail@plt+0xd55c>
   1f2ac:	tst	r7, #524288	; 0x80000
   1f2b0:	movne	r0, #2
   1f2b4:	bne	1eefc <__assert_fail@plt+0xd55c>
   1f2b8:	mov	r3, #35	; 0x23
   1f2bc:	strb	r3, [r5, #4]
   1f2c0:	mov	r0, #2
   1f2c4:	b	1eefc <__assert_fail@plt+0xd55c>
   1f2c8:	tst	r7, #524288	; 0x80000
   1f2cc:	movne	r0, #2
   1f2d0:	bne	1eefc <__assert_fail@plt+0xd55c>
   1f2d4:	mov	r3, #12
   1f2d8:	strb	r3, [r5, #4]
   1f2dc:	mov	r3, #64	; 0x40
   1f2e0:	str	r3, [r5]
   1f2e4:	mov	r0, #2
   1f2e8:	b	1eefc <__assert_fail@plt+0xd55c>
   1f2ec:	tst	r7, #524288	; 0x80000
   1f2f0:	movne	r0, #2
   1f2f4:	bne	1eefc <__assert_fail@plt+0xd55c>
   1f2f8:	mov	r3, #12
   1f2fc:	strb	r3, [r5, #4]
   1f300:	mov	r3, #128	; 0x80
   1f304:	str	r3, [r5]
   1f308:	mov	r0, #2
   1f30c:	b	1eefc <__assert_fail@plt+0xd55c>
   1f310:	tst	r7, #8192	; 0x2000
   1f314:	movne	r0, #2
   1f318:	bne	1eefc <__assert_fail@plt+0xd55c>
   1f31c:	mov	r3, #8
   1f320:	strb	r3, [r5, #4]
   1f324:	mov	r0, #2
   1f328:	b	1eefc <__assert_fail@plt+0xd55c>
   1f32c:	tst	r7, #8192	; 0x2000
   1f330:	movne	r0, #2
   1f334:	bne	1eefc <__assert_fail@plt+0xd55c>
   1f338:	mov	r3, #9
   1f33c:	strb	r3, [r5, #4]
   1f340:	mov	r0, #2
   1f344:	b	1eefc <__assert_fail@plt+0xd55c>
   1f348:	movw	r2, #1026	; 0x402
   1f34c:	and	r2, r7, r2
   1f350:	cmp	r2, #2
   1f354:	moveq	r3, #18
   1f358:	strbeq	r3, [r5, #4]
   1f35c:	moveq	r0, #2
   1f360:	movne	r0, #2
   1f364:	b	1eefc <__assert_fail@plt+0xd55c>
   1f368:	movw	r2, #1026	; 0x402
   1f36c:	and	r2, r7, r2
   1f370:	cmp	r2, #2
   1f374:	moveq	r3, #19
   1f378:	strbeq	r3, [r5, #4]
   1f37c:	moveq	r0, #2
   1f380:	movne	r0, #2
   1f384:	b	1eefc <__assert_fail@plt+0xd55c>
   1f388:	and	r2, r7, #4608	; 0x1200
   1f38c:	cmp	r2, #512	; 0x200
   1f390:	moveq	r3, #23
   1f394:	strbeq	r3, [r5, #4]
   1f398:	moveq	r0, #2
   1f39c:	movne	r0, #2
   1f3a0:	b	1eefc <__assert_fail@plt+0xd55c>
   1f3a4:	and	r2, r7, #4608	; 0x1200
   1f3a8:	cmp	r2, #512	; 0x200
   1f3ac:	moveq	r3, #24
   1f3b0:	strbeq	r3, [r5, #4]
   1f3b4:	moveq	r0, #2
   1f3b8:	movne	r0, #2
   1f3bc:	b	1eefc <__assert_fail@plt+0xd55c>
   1f3c0:	bl	11778 <__ctype_b_loc@plt>
   1f3c4:	ldr	r2, [r0]
   1f3c8:	lsl	r3, r6, #1
   1f3cc:	ldrh	r3, [r2, r3]
   1f3d0:	ubfx	r3, r3, #3, #1
   1f3d4:	cmp	r6, #95	; 0x5f
   1f3d8:	orreq	r3, r3, #1
   1f3dc:	ldrb	r2, [r5, #6]
   1f3e0:	bfi	r2, r3, #6, #1
   1f3e4:	strb	r2, [r5, #6]
   1f3e8:	b	1ecd0 <__assert_fail@plt+0xd330>
   1f3ec:	tst	r7, #2048	; 0x800
   1f3f0:	moveq	r0, #1
   1f3f4:	beq	1eefc <__assert_fail@plt+0xd55c>
   1f3f8:	mov	r3, #10
   1f3fc:	strb	r3, [r5, #4]
   1f400:	mov	r0, #1
   1f404:	b	1eefc <__assert_fail@plt+0xd55c>
   1f408:	and	r2, r7, #33792	; 0x8400
   1f40c:	cmp	r2, #32768	; 0x8000
   1f410:	moveq	r3, #10
   1f414:	strbeq	r3, [r5, #4]
   1f418:	moveq	r0, #1
   1f41c:	movne	r0, #1
   1f420:	b	1eefc <__assert_fail@plt+0xd55c>
   1f424:	mov	r3, #11
   1f428:	strb	r3, [r5, #4]
   1f42c:	mov	r0, #1
   1f430:	b	1eefc <__assert_fail@plt+0xd55c>
   1f434:	movw	r3, #1026	; 0x402
   1f438:	tst	r7, r3
   1f43c:	movne	r0, #1
   1f440:	bne	1eefc <__assert_fail@plt+0xd55c>
   1f444:	mov	r3, #18
   1f448:	strb	r3, [r5, #4]
   1f44c:	mov	r0, #1
   1f450:	b	1eefc <__assert_fail@plt+0xd55c>
   1f454:	movw	r3, #1026	; 0x402
   1f458:	tst	r7, r3
   1f45c:	movne	r0, #1
   1f460:	bne	1eefc <__assert_fail@plt+0xd55c>
   1f464:	mov	r3, #19
   1f468:	strb	r3, [r5, #4]
   1f46c:	mov	r0, #1
   1f470:	b	1eefc <__assert_fail@plt+0xd55c>
   1f474:	and	r2, r7, #4608	; 0x1200
   1f478:	cmp	r2, #4608	; 0x1200
   1f47c:	moveq	r3, #23
   1f480:	strbeq	r3, [r5, #4]
   1f484:	moveq	r0, #1
   1f488:	movne	r0, #1
   1f48c:	b	1eefc <__assert_fail@plt+0xd55c>
   1f490:	and	r2, r7, #4608	; 0x1200
   1f494:	cmp	r2, #4608	; 0x1200
   1f498:	moveq	r3, #24
   1f49c:	strbeq	r3, [r5, #4]
   1f4a0:	moveq	r0, #1
   1f4a4:	movne	r0, #1
   1f4a8:	b	1eefc <__assert_fail@plt+0xd55c>
   1f4ac:	tst	r7, #8192	; 0x2000
   1f4b0:	moveq	r0, #1
   1f4b4:	beq	1eefc <__assert_fail@plt+0xd55c>
   1f4b8:	mov	r3, #8
   1f4bc:	strb	r3, [r5, #4]
   1f4c0:	mov	r0, #1
   1f4c4:	b	1eefc <__assert_fail@plt+0xd55c>
   1f4c8:	tst	r7, #8192	; 0x2000
   1f4cc:	moveq	r0, #1
   1f4d0:	beq	1eefc <__assert_fail@plt+0xd55c>
   1f4d4:	mov	r3, #9
   1f4d8:	strb	r3, [r5, #4]
   1f4dc:	mov	r0, #1
   1f4e0:	b	1eefc <__assert_fail@plt+0xd55c>
   1f4e4:	mov	r3, #20
   1f4e8:	strb	r3, [r5, #4]
   1f4ec:	mov	r0, #1
   1f4f0:	b	1eefc <__assert_fail@plt+0xd55c>
   1f4f4:	mov	r3, #5
   1f4f8:	strb	r3, [r5, #4]
   1f4fc:	mov	r0, #1
   1f500:	b	1eefc <__assert_fail@plt+0xd55c>
   1f504:	mov	r3, #8
   1f508:	movt	r3, #128	; 0x80
   1f50c:	tst	r7, r3
   1f510:	bne	1f548 <__assert_fail@plt+0xdba8>
   1f514:	ldr	r3, [r4, #40]	; 0x28
   1f518:	cmp	r3, #0
   1f51c:	beq	1f548 <__assert_fail@plt+0xdba8>
   1f520:	ldr	r2, [r4, #4]
   1f524:	add	r3, r2, r3
   1f528:	ldrb	r2, [r3, #-1]
   1f52c:	eor	r3, r7, #2048	; 0x800
   1f530:	ubfx	r3, r3, #11, #1
   1f534:	cmp	r2, #10
   1f538:	orrne	r3, r3, #1
   1f53c:	cmp	r3, #0
   1f540:	movne	r0, #1
   1f544:	bne	1eefc <__assert_fail@plt+0xd55c>
   1f548:	mov	r3, #12
   1f54c:	strb	r3, [r5, #4]
   1f550:	mov	r3, #16
   1f554:	str	r3, [r5]
   1f558:	mov	r0, #1
   1f55c:	b	1eefc <__assert_fail@plt+0xd55c>
   1f560:	tst	r7, #8
   1f564:	bne	1f57c <__assert_fail@plt+0xdbdc>
   1f568:	ldr	r3, [r4, #40]	; 0x28
   1f56c:	add	r3, r3, #1
   1f570:	ldr	r2, [r4, #48]	; 0x30
   1f574:	cmp	r3, r2
   1f578:	bne	1f594 <__assert_fail@plt+0xdbf4>
   1f57c:	mov	r3, #12
   1f580:	strb	r3, [r5, #4]
   1f584:	mov	r3, #32
   1f588:	str	r3, [r5]
   1f58c:	mov	r0, #1
   1f590:	b	1eefc <__assert_fail@plt+0xd55c>
   1f594:	str	r3, [r4, #40]	; 0x28
   1f598:	mov	r2, r7
   1f59c:	mov	r1, r4
   1f5a0:	mov	r0, sp
   1f5a4:	bl	1ec0c <__assert_fail@plt+0xd26c>
   1f5a8:	ldr	r3, [r4, #40]	; 0x28
   1f5ac:	sub	r3, r3, #1
   1f5b0:	str	r3, [r4, #40]	; 0x28
   1f5b4:	ldrb	r3, [sp, #4]
   1f5b8:	sub	r3, r3, #9
   1f5bc:	uxtb	r3, r3
   1f5c0:	cmp	r3, #1
   1f5c4:	movhi	r0, #1
   1f5c8:	bhi	1eefc <__assert_fail@plt+0xd55c>
   1f5cc:	b	1f57c <__assert_fail@plt+0xdbdc>
   1f5d0:	mov	r0, #2
   1f5d4:	b	1eefc <__assert_fail@plt+0xd55c>
   1f5d8:	mov	r0, #1
   1f5dc:	b	1eefc <__assert_fail@plt+0xd55c>
   1f5e0:	ldr	r3, [r4]
   1f5e4:	ldr	r1, [r4, #24]
   1f5e8:	add	r2, r3, r2
   1f5ec:	ldrb	r6, [r2, r1]
   1f5f0:	b	1ef28 <__assert_fail@plt+0xd588>
   1f5f4:	str	r4, [sp, #-8]!
   1f5f8:	str	lr, [sp, #4]
   1f5fc:	mov	r4, r1
   1f600:	bl	1ec0c <__assert_fail@plt+0xd26c>
   1f604:	ldr	r3, [r4, #40]	; 0x28
   1f608:	add	r0, r3, r0
   1f60c:	str	r0, [r4, #40]	; 0x28
   1f610:	ldr	r4, [sp]
   1f614:	add	sp, sp, #4
   1f618:	pop	{pc}		; (ldr pc, [sp], #4)
   1f61c:	strd	r4, [sp, #-32]!	; 0xffffffe0
   1f620:	strd	r6, [sp, #8]
   1f624:	strd	r8, [sp, #16]
   1f628:	str	sl, [sp, #24]
   1f62c:	str	lr, [sp, #28]
   1f630:	mov	r6, r0
   1f634:	mov	r4, r1
   1f638:	mov	r5, r2
   1f63c:	mvn	r9, #0
   1f640:	movw	r8, #32816	; 0x8030
   1f644:	mvn	r7, #1
   1f648:	mov	r2, r5
   1f64c:	mov	r1, r6
   1f650:	mov	r0, r4
   1f654:	bl	1f5f4 <__assert_fail@plt+0xdc54>
   1f658:	ldrb	r2, [r4]
   1f65c:	ldrb	r3, [r4, #4]
   1f660:	cmp	r3, #2
   1f664:	beq	1f6cc <__assert_fail@plt+0xdd2c>
   1f668:	cmp	r3, #24
   1f66c:	cmpne	r2, #44	; 0x2c
   1f670:	beq	1f6d0 <__assert_fail@plt+0xdd30>
   1f674:	cmp	r3, #1
   1f678:	movne	r9, r7
   1f67c:	bne	1f648 <__assert_fail@plt+0xdca8>
   1f680:	sub	r3, r2, #48	; 0x30
   1f684:	uxtb	r1, r3
   1f688:	cmp	r1, #9
   1f68c:	movhi	r3, #0
   1f690:	movls	r3, #1
   1f694:	cmn	r9, #2
   1f698:	moveq	r3, #0
   1f69c:	cmp	r3, #0
   1f6a0:	moveq	r9, r7
   1f6a4:	beq	1f648 <__assert_fail@plt+0xdca8>
   1f6a8:	cmn	r9, #1
   1f6ac:	subeq	r9, r2, #48	; 0x30
   1f6b0:	beq	1f648 <__assert_fail@plt+0xdca8>
   1f6b4:	add	r9, r9, r9, lsl #2
   1f6b8:	add	r2, r2, r9, lsl #1
   1f6bc:	cmp	r2, r8
   1f6c0:	movge	r2, r8
   1f6c4:	sub	r9, r2, #48	; 0x30
   1f6c8:	b	1f648 <__assert_fail@plt+0xdca8>
   1f6cc:	mvn	r9, #1
   1f6d0:	mov	r0, r9
   1f6d4:	ldrd	r4, [sp]
   1f6d8:	ldrd	r6, [sp, #8]
   1f6dc:	ldrd	r8, [sp, #16]
   1f6e0:	ldr	sl, [sp, #24]
   1f6e4:	add	sp, sp, #28
   1f6e8:	pop	{pc}		; (ldr pc, [sp], #4)
   1f6ec:	str	r4, [sp, #-8]!
   1f6f0:	str	lr, [sp, #4]
   1f6f4:	mov	r4, r0
   1f6f8:	ldr	r0, [r0]
   1f6fc:	bl	1c948 <__assert_fail@plt+0xafa8>
   1f700:	ldr	r0, [r4, #4]
   1f704:	bl	1c948 <__assert_fail@plt+0xafa8>
   1f708:	ldr	r0, [r4, #8]
   1f70c:	bl	1c948 <__assert_fail@plt+0xafa8>
   1f710:	ldr	r0, [r4, #12]
   1f714:	bl	1c948 <__assert_fail@plt+0xafa8>
   1f718:	mov	r0, r4
   1f71c:	bl	1c948 <__assert_fail@plt+0xafa8>
   1f720:	ldr	r4, [sp]
   1f724:	add	sp, sp, #4
   1f728:	pop	{pc}		; (ldr pc, [sp], #4)
   1f72c:	str	r4, [sp, #-8]!
   1f730:	str	lr, [sp, #4]
   1f734:	ldr	r2, [r0, #4]
   1f738:	mov	r3, #255	; 0xff
   1f73c:	movt	r3, #4
   1f740:	and	r3, r3, r2
   1f744:	cmp	r3, #6
   1f748:	beq	1f760 <__assert_fail@plt+0xddc0>
   1f74c:	cmp	r3, #3
   1f750:	beq	1f76c <__assert_fail@plt+0xddcc>
   1f754:	ldr	r4, [sp]
   1f758:	add	sp, sp, #4
   1f75c:	pop	{pc}		; (ldr pc, [sp], #4)
   1f760:	ldr	r0, [r0]
   1f764:	bl	1f6ec <__assert_fail@plt+0xdd4c>
   1f768:	b	1f754 <__assert_fail@plt+0xddb4>
   1f76c:	ldr	r0, [r0]
   1f770:	bl	1c948 <__assert_fail@plt+0xafa8>
   1f774:	b	1f754 <__assert_fail@plt+0xddb4>
   1f778:	str	r4, [sp, #-8]!
   1f77c:	str	lr, [sp, #4]
   1f780:	add	r0, r1, #20
   1f784:	bl	1f72c <__assert_fail@plt+0xdd8c>
   1f788:	mov	r0, #0
   1f78c:	ldr	r4, [sp]
   1f790:	add	sp, sp, #4
   1f794:	pop	{pc}		; (ldr pc, [sp], #4)
   1f798:	strd	r4, [sp, #-32]!	; 0xffffffe0
   1f79c:	strd	r6, [sp, #8]
   1f7a0:	strd	r8, [sp, #16]
   1f7a4:	str	sl, [sp, #24]
   1f7a8:	str	lr, [sp, #28]
   1f7ac:	sub	sp, sp, #8
   1f7b0:	mov	r4, r0
   1f7b4:	add	r3, sp, #8
   1f7b8:	stmdb	r3, {r1, r2}
   1f7bc:	ldrb	r5, [sp, #4]
   1f7c0:	ldr	r6, [r0, #4]
   1f7c4:	ldr	r3, [r0, #8]
   1f7c8:	cmp	r3, r6
   1f7cc:	bcs	1f8a4 <__assert_fail@plt+0xdf04>
   1f7d0:	ldr	r1, [r4, #8]
   1f7d4:	ldr	r0, [r4]
   1f7d8:	lsl	r1, r1, #3
   1f7dc:	ldrd	r2, [sp]
   1f7e0:	strd	r2, [r0, r1]
   1f7e4:	ldr	r2, [r4, #8]
   1f7e8:	ldr	r3, [r4]
   1f7ec:	add	r3, r3, r2, lsl #3
   1f7f0:	ldr	r2, [r3, #4]
   1f7f4:	bfc	r2, #8, #10
   1f7f8:	str	r2, [r3, #4]
   1f7fc:	cmp	r5, #5
   1f800:	beq	1f974 <__assert_fail@plt+0xdfd4>
   1f804:	cmp	r5, #6
   1f808:	movne	r5, #0
   1f80c:	moveq	r5, #1
   1f810:	ldr	r2, [r4, #8]
   1f814:	ldr	r3, [r4]
   1f818:	add	r3, r3, r2, lsl #3
   1f81c:	ldrb	r2, [r3, #6]
   1f820:	bfi	r2, r5, #4, #1
   1f824:	strb	r2, [r3, #6]
   1f828:	ldr	r2, [r4, #8]
   1f82c:	ldr	r3, [r4, #12]
   1f830:	mvn	r1, #0
   1f834:	str	r1, [r3, r2, lsl #2]
   1f838:	ldr	r3, [r4, #8]
   1f83c:	add	r3, r3, r3, lsl #1
   1f840:	lsl	r3, r3, #2
   1f844:	ldr	r0, [r4, #20]
   1f848:	add	r1, r0, r3
   1f84c:	mov	r2, #0
   1f850:	str	r2, [r0, r3]
   1f854:	str	r2, [r1, #4]
   1f858:	str	r2, [r1, #8]
   1f85c:	ldr	r3, [r4, #8]
   1f860:	add	r3, r3, r3, lsl #1
   1f864:	lsl	r3, r3, #2
   1f868:	ldr	r0, [r4, #24]
   1f86c:	add	r1, r0, r3
   1f870:	str	r2, [r0, r3]
   1f874:	str	r2, [r1, #4]
   1f878:	str	r2, [r1, #8]
   1f87c:	ldr	r0, [r4, #8]
   1f880:	add	r3, r0, #1
   1f884:	str	r3, [r4, #8]
   1f888:	add	sp, sp, #8
   1f88c:	ldrd	r4, [sp]
   1f890:	ldrd	r6, [sp, #8]
   1f894:	ldrd	r8, [sp, #16]
   1f898:	ldr	sl, [sp, #24]
   1f89c:	add	sp, sp, #28
   1f8a0:	pop	{pc}		; (ldr pc, [sp], #4)
   1f8a4:	lsl	r7, r6, #1
   1f8a8:	movw	r3, #21845	; 0x5555
   1f8ac:	movt	r3, #5461	; 0x1555
   1f8b0:	cmp	r7, r3
   1f8b4:	bhi	1f988 <__assert_fail@plt+0xdfe8>
   1f8b8:	lsl	r1, r6, #4
   1f8bc:	ldr	r0, [r0]
   1f8c0:	bl	1cb14 <__assert_fail@plt+0xb174>
   1f8c4:	cmp	r0, #0
   1f8c8:	beq	1f990 <__assert_fail@plt+0xdff0>
   1f8cc:	str	r0, [r4]
   1f8d0:	lsl	r8, r6, #3
   1f8d4:	mov	r1, r8
   1f8d8:	ldr	r0, [r4, #12]
   1f8dc:	bl	1cb14 <__assert_fail@plt+0xb174>
   1f8e0:	mov	r9, r0
   1f8e4:	mov	r1, r8
   1f8e8:	ldr	r0, [r4, #16]
   1f8ec:	bl	1cb14 <__assert_fail@plt+0xb174>
   1f8f0:	mov	r8, r0
   1f8f4:	add	r6, r6, r6, lsl #1
   1f8f8:	lsl	r6, r6, #3
   1f8fc:	mov	r1, r6
   1f900:	ldr	r0, [r4, #20]
   1f904:	bl	1cb14 <__assert_fail@plt+0xb174>
   1f908:	mov	sl, r0
   1f90c:	mov	r1, r6
   1f910:	ldr	r0, [r4, #24]
   1f914:	bl	1cb14 <__assert_fail@plt+0xb174>
   1f918:	mov	r6, r0
   1f91c:	cmp	r8, #0
   1f920:	cmpne	r9, #0
   1f924:	beq	1f94c <__assert_fail@plt+0xdfac>
   1f928:	cmp	r0, #0
   1f92c:	cmpne	sl, #0
   1f930:	beq	1f94c <__assert_fail@plt+0xdfac>
   1f934:	str	r9, [r4, #12]
   1f938:	str	r8, [r4, #16]
   1f93c:	str	sl, [r4, #20]
   1f940:	str	r0, [r4, #24]
   1f944:	str	r7, [r4, #4]
   1f948:	b	1f7d0 <__assert_fail@plt+0xde30>
   1f94c:	mov	r0, r9
   1f950:	bl	1c948 <__assert_fail@plt+0xafa8>
   1f954:	mov	r0, r8
   1f958:	bl	1c948 <__assert_fail@plt+0xafa8>
   1f95c:	mov	r0, sl
   1f960:	bl	1c948 <__assert_fail@plt+0xafa8>
   1f964:	mov	r0, r6
   1f968:	bl	1c948 <__assert_fail@plt+0xafa8>
   1f96c:	mvn	r0, #0
   1f970:	b	1f888 <__assert_fail@plt+0xdee8>
   1f974:	ldr	r3, [r4, #92]	; 0x5c
   1f978:	cmp	r3, #1
   1f97c:	movgt	r5, #1
   1f980:	bgt	1f810 <__assert_fail@plt+0xde70>
   1f984:	b	1f804 <__assert_fail@plt+0xde64>
   1f988:	mvn	r0, #0
   1f98c:	b	1f888 <__assert_fail@plt+0xdee8>
   1f990:	mvn	r0, #0
   1f994:	b	1f888 <__assert_fail@plt+0xdee8>
   1f998:	ldrb	r3, [r1, #24]
   1f99c:	cmp	r3, #16
   1f9a0:	bne	1f9c0 <__assert_fail@plt+0xe020>
   1f9a4:	ldr	r3, [r1, #4]
   1f9a8:	ldr	r2, [r3, #12]
   1f9ac:	str	r2, [r1, #12]
   1f9b0:	ldr	r3, [r3, #28]
   1f9b4:	str	r3, [r1, #28]
   1f9b8:	mov	r0, #0
   1f9bc:	bx	lr
   1f9c0:	strd	r4, [sp, #-16]!
   1f9c4:	str	r6, [sp, #8]
   1f9c8:	str	lr, [sp, #12]
   1f9cc:	mov	r4, r1
   1f9d0:	mov	r5, r0
   1f9d4:	str	r1, [r4, #12]
   1f9d8:	add	r3, r1, #20
   1f9dc:	ldm	r3, {r1, r2}
   1f9e0:	bl	1f798 <__assert_fail@plt+0xddf8>
   1f9e4:	str	r0, [r4, #28]
   1f9e8:	cmn	r0, #1
   1f9ec:	beq	1fa30 <__assert_fail@plt+0xe090>
   1f9f0:	ldrb	r3, [r4, #24]
   1f9f4:	cmp	r3, #12
   1f9f8:	movne	r0, #0
   1f9fc:	beq	1fa10 <__assert_fail@plt+0xe070>
   1fa00:	ldrd	r4, [sp]
   1fa04:	ldr	r6, [sp, #8]
   1fa08:	add	sp, sp, #12
   1fa0c:	pop	{pc}		; (ldr pc, [sp], #4)
   1fa10:	ldr	r3, [r5]
   1fa14:	add	r0, r3, r0, lsl #3
   1fa18:	ldr	r3, [r0, #4]
   1fa1c:	ldr	r2, [r4, #20]
   1fa20:	bfi	r3, r2, #8, #10
   1fa24:	str	r3, [r0, #4]
   1fa28:	mov	r0, #0
   1fa2c:	b	1fa00 <__assert_fail@plt+0xe060>
   1fa30:	mov	r0, #12
   1fa34:	b	1fa00 <__assert_fail@plt+0xe060>
   1fa38:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1fa3c:	strd	r6, [sp, #8]
   1fa40:	str	r8, [sp, #16]
   1fa44:	str	lr, [sp, #20]
   1fa48:	mov	r4, r0
   1fa4c:	mov	r5, r1
   1fa50:	mov	r7, r2
   1fa54:	lsl	r6, r1, #3
   1fa58:	ldr	r3, [r0]
   1fa5c:	add	r3, r3, r6
   1fa60:	ldm	r3, {r1, r2}
   1fa64:	bl	1f798 <__assert_fail@plt+0xddf8>
   1fa68:	cmn	r0, #1
   1fa6c:	beq	1fac8 <__assert_fail@plt+0xe128>
   1fa70:	lsl	r3, r0, #3
   1fa74:	ldr	r2, [r4]
   1fa78:	add	r2, r2, r3
   1fa7c:	ldr	r1, [r2, #4]
   1fa80:	bfi	r1, r7, #8, #10
   1fa84:	str	r1, [r2, #4]
   1fa88:	ldr	r2, [r4]
   1fa8c:	add	ip, r2, r3
   1fa90:	add	r2, r2, r6
   1fa94:	ldr	r1, [r2, #4]
   1fa98:	ldr	r2, [ip, #4]
   1fa9c:	orr	r1, r2, r1
   1faa0:	ubfx	r1, r1, #8, #10
   1faa4:	bfi	r2, r1, #8, #10
   1faa8:	str	r2, [ip, #4]
   1faac:	ldr	r2, [r4]
   1fab0:	add	r3, r2, r3
   1fab4:	ldrb	r2, [r3, #6]
   1fab8:	orr	r2, r2, #4
   1fabc:	strb	r2, [r3, #6]
   1fac0:	ldr	r3, [r4, #16]
   1fac4:	str	r5, [r3, r0, lsl #2]
   1fac8:	ldrd	r4, [sp]
   1facc:	ldrd	r6, [sp, #8]
   1fad0:	ldr	r8, [sp, #16]
   1fad4:	add	sp, sp, #20
   1fad8:	pop	{pc}		; (ldr pc, [sp], #4)
   1fadc:	str	r4, [sp, #-8]!
   1fae0:	str	lr, [sp, #4]
   1fae4:	mov	r4, r0
   1fae8:	ldr	r0, [r0, #24]
   1faec:	bl	1c948 <__assert_fail@plt+0xafa8>
   1faf0:	ldr	r0, [r4, #36]	; 0x24
   1faf4:	bl	1c948 <__assert_fail@plt+0xafa8>
   1faf8:	ldr	r3, [r4, #40]	; 0x28
   1fafc:	add	r2, r4, #4
   1fb00:	cmp	r3, r2
   1fb04:	beq	1fb18 <__assert_fail@plt+0xe178>
   1fb08:	ldr	r0, [r3, #8]
   1fb0c:	bl	1c948 <__assert_fail@plt+0xafa8>
   1fb10:	ldr	r0, [r4, #40]	; 0x28
   1fb14:	bl	1c948 <__assert_fail@plt+0xafa8>
   1fb18:	ldr	r0, [r4, #12]
   1fb1c:	bl	1c948 <__assert_fail@plt+0xafa8>
   1fb20:	ldr	r0, [r4, #48]	; 0x30
   1fb24:	bl	1c948 <__assert_fail@plt+0xafa8>
   1fb28:	ldr	r0, [r4, #44]	; 0x2c
   1fb2c:	bl	1c948 <__assert_fail@plt+0xafa8>
   1fb30:	mov	r0, r4
   1fb34:	bl	1c948 <__assert_fail@plt+0xafa8>
   1fb38:	ldr	r4, [sp]
   1fb3c:	add	sp, sp, #4
   1fb40:	pop	{pc}		; (ldr pc, [sp], #4)
   1fb44:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1fb48:	strd	r6, [sp, #8]
   1fb4c:	strd	r8, [sp, #16]
   1fb50:	strd	sl, [sp, #24]
   1fb54:	str	lr, [sp, #32]
   1fb58:	sub	sp, sp, #20
   1fb5c:	ldr	r5, [r2, #4]
   1fb60:	cmp	r5, #0
   1fb64:	streq	r5, [r0]
   1fb68:	beq	1fe04 <__assert_fail@plt+0xe464>
   1fb6c:	add	r8, r3, r5
   1fb70:	cmp	r5, #0
   1fb74:	ble	1fb90 <__assert_fail@plt+0xe1f0>
   1fb78:	ldr	ip, [r2, #8]
   1fb7c:	add	r5, ip, r5, lsl #2
   1fb80:	ldr	lr, [ip], #4
   1fb84:	add	r8, r8, lr
   1fb88:	cmp	r5, ip
   1fb8c:	bne	1fb80 <__assert_fail@plt+0xe1e0>
   1fb90:	mov	r4, r3
   1fb94:	mov	r7, r2
   1fb98:	mov	r9, r1
   1fb9c:	str	r0, [sp, #12]
   1fba0:	ldr	r3, [r1, #68]	; 0x44
   1fba4:	and	r3, r3, r8
   1fba8:	add	r3, r3, r3, lsl #1
   1fbac:	lsl	r3, r3, #2
   1fbb0:	ldr	r2, [r1, #32]
   1fbb4:	add	r1, r2, r3
   1fbb8:	ldr	fp, [r2, r3]
   1fbbc:	cmp	fp, #0
   1fbc0:	ble	1fc18 <__assert_fail@plt+0xe278>
   1fbc4:	ldr	sl, [r1, #8]
   1fbc8:	sub	sl, sl, #4
   1fbcc:	mov	r6, #0
   1fbd0:	b	1fbe0 <__assert_fail@plt+0xe240>
   1fbd4:	add	r6, r6, #1
   1fbd8:	cmp	r6, fp
   1fbdc:	beq	1fc18 <__assert_fail@plt+0xe278>
   1fbe0:	ldr	r5, [sl, #4]!
   1fbe4:	ldr	r3, [r5]
   1fbe8:	cmp	r3, r8
   1fbec:	bne	1fbd4 <__assert_fail@plt+0xe234>
   1fbf0:	ldrb	r3, [r5, #52]	; 0x34
   1fbf4:	and	r3, r3, #15
   1fbf8:	cmp	r3, r4
   1fbfc:	bne	1fbd4 <__assert_fail@plt+0xe234>
   1fc00:	mov	r1, r7
   1fc04:	ldr	r0, [r5, #40]	; 0x28
   1fc08:	bl	1cc94 <__assert_fail@plt+0xb2f4>
   1fc0c:	cmp	r0, #0
   1fc10:	beq	1fbd4 <__assert_fail@plt+0xe234>
   1fc14:	b	1fe04 <__assert_fail@plt+0xe464>
   1fc18:	mov	r1, #1
   1fc1c:	mov	r0, #56	; 0x38
   1fc20:	bl	1c5f8 <__assert_fail@plt+0xac58>
   1fc24:	subs	r5, r0, #0
   1fc28:	beq	1fcdc <__assert_fail@plt+0xe33c>
   1fc2c:	add	fp, r5, #4
   1fc30:	mov	r1, r7
   1fc34:	mov	r0, fp
   1fc38:	bl	1e698 <__assert_fail@plt+0xccf8>
   1fc3c:	subs	r6, r0, #0
   1fc40:	bne	1fc84 <__assert_fail@plt+0xe2e4>
   1fc44:	ldrb	r3, [r5, #52]	; 0x34
   1fc48:	bfi	r3, r4, #0, #4
   1fc4c:	strb	r3, [r5, #52]	; 0x34
   1fc50:	str	fp, [r5, #40]	; 0x28
   1fc54:	ldr	r3, [r7, #4]
   1fc58:	cmp	r3, #0
   1fc5c:	ble	1fdec <__assert_fail@plt+0xe44c>
   1fc60:	mov	sl, r6
   1fc64:	and	r3, r4, #4
   1fc68:	str	r3, [sp, #4]
   1fc6c:	and	r3, r4, #2
   1fc70:	str	r3, [sp]
   1fc74:	and	r3, r4, #1
   1fc78:	str	r8, [sp, #8]
   1fc7c:	mov	r8, r3
   1fc80:	b	1fd54 <__assert_fail@plt+0xe3b4>
   1fc84:	mov	r0, r5
   1fc88:	bl	1c948 <__assert_fail@plt+0xafa8>
   1fc8c:	b	1fcdc <__assert_fail@plt+0xe33c>
   1fc90:	ldrb	r3, [r5, #52]	; 0x34
   1fc94:	orr	r3, r3, #64	; 0x40
   1fc98:	strb	r3, [r5, #52]	; 0x34
   1fc9c:	b	1fdb8 <__assert_fail@plt+0xe418>
   1fca0:	mov	r0, #12
   1fca4:	bl	1ca68 <__assert_fail@plt+0xb0c8>
   1fca8:	cmp	r0, #0
   1fcac:	beq	1fcd4 <__assert_fail@plt+0xe334>
   1fcb0:	str	r0, [r5, #40]	; 0x28
   1fcb4:	mov	r1, r7
   1fcb8:	bl	1e698 <__assert_fail@plt+0xccf8>
   1fcbc:	subs	sl, r0, #0
   1fcc0:	bne	1fcf0 <__assert_fail@plt+0xe350>
   1fcc4:	ldrb	r3, [r5, #52]	; 0x34
   1fcc8:	orr	r3, r3, #128	; 0x80
   1fccc:	strb	r3, [r5, #52]	; 0x34
   1fcd0:	b	1fdcc <__assert_fail@plt+0xe42c>
   1fcd4:	mov	r0, r5
   1fcd8:	bl	1fadc <__assert_fail@plt+0xe13c>
   1fcdc:	mov	r3, #12
   1fce0:	ldr	r2, [sp, #12]
   1fce4:	str	r3, [r2]
   1fce8:	mov	r5, #0
   1fcec:	b	1fe04 <__assert_fail@plt+0xe464>
   1fcf0:	mov	r0, r5
   1fcf4:	bl	1fadc <__assert_fail@plt+0xe13c>
   1fcf8:	b	1fcdc <__assert_fail@plt+0xe33c>
   1fcfc:	tst	r4, #2
   1fd00:	beq	1fd0c <__assert_fail@plt+0xe36c>
   1fd04:	cmp	r8, #0
   1fd08:	bne	1fd34 <__assert_fail@plt+0xe394>
   1fd0c:	tst	r4, #16
   1fd10:	beq	1fd20 <__assert_fail@plt+0xe380>
   1fd14:	ldr	r3, [sp]
   1fd18:	cmp	r3, #0
   1fd1c:	beq	1fd34 <__assert_fail@plt+0xe394>
   1fd20:	tst	r4, #64	; 0x40
   1fd24:	beq	1fd44 <__assert_fail@plt+0xe3a4>
   1fd28:	ldr	r3, [sp, #4]
   1fd2c:	cmp	r3, #0
   1fd30:	bne	1fd44 <__assert_fail@plt+0xe3a4>
   1fd34:	sub	r1, r6, sl
   1fd38:	mov	r0, fp
   1fd3c:	bl	1cd94 <__assert_fail@plt+0xb3f4>
   1fd40:	add	sl, sl, #1
   1fd44:	add	r6, r6, #1
   1fd48:	ldr	r3, [r7, #4]
   1fd4c:	cmp	r6, r3
   1fd50:	bge	1fde8 <__assert_fail@plt+0xe448>
   1fd54:	ldr	r3, [r7, #8]
   1fd58:	ldr	r2, [r3, r6, lsl #2]
   1fd5c:	ldr	r3, [r9]
   1fd60:	add	r3, r3, r2, lsl #3
   1fd64:	ldrb	r1, [r3, #4]
   1fd68:	ldr	r4, [r3, #4]
   1fd6c:	ubfx	r4, r4, #8, #10
   1fd70:	cmp	r1, #1
   1fd74:	cmpeq	r4, #0
   1fd78:	beq	1fd44 <__assert_fail@plt+0xe3a4>
   1fd7c:	ldrb	r2, [r5, #52]	; 0x34
   1fd80:	ubfx	r0, r2, #5, #1
   1fd84:	ldrb	r3, [r3, #6]
   1fd88:	ubfx	r3, r3, #4, #1
   1fd8c:	orr	r0, r0, r3
   1fd90:	mov	r3, r2
   1fd94:	bfi	r3, r0, #5, #1
   1fd98:	strb	r3, [r5, #52]	; 0x34
   1fd9c:	cmp	r1, #2
   1fda0:	uxtbeq	r3, r3
   1fda4:	orreq	r3, r3, #16
   1fda8:	strbeq	r3, [r5, #52]	; 0x34
   1fdac:	beq	1fdb8 <__assert_fail@plt+0xe418>
   1fdb0:	cmp	r1, #4
   1fdb4:	beq	1fc90 <__assert_fail@plt+0xe2f0>
   1fdb8:	cmp	r4, #0
   1fdbc:	beq	1fd44 <__assert_fail@plt+0xe3a4>
   1fdc0:	ldr	r3, [r5, #40]	; 0x28
   1fdc4:	cmp	fp, r3
   1fdc8:	beq	1fca0 <__assert_fail@plt+0xe300>
   1fdcc:	tst	r4, #1
   1fdd0:	beq	1fcfc <__assert_fail@plt+0xe35c>
   1fdd4:	cmp	r8, #0
   1fdd8:	beq	1fd34 <__assert_fail@plt+0xe394>
   1fddc:	tst	r4, #2
   1fde0:	bne	1fd34 <__assert_fail@plt+0xe394>
   1fde4:	b	1fd0c <__assert_fail@plt+0xe36c>
   1fde8:	ldr	r8, [sp, #8]
   1fdec:	mov	r2, r8
   1fdf0:	mov	r1, r5
   1fdf4:	mov	r0, r9
   1fdf8:	bl	1de58 <__assert_fail@plt+0xc4b8>
   1fdfc:	cmp	r0, #0
   1fe00:	bne	1fe24 <__assert_fail@plt+0xe484>
   1fe04:	mov	r0, r5
   1fe08:	add	sp, sp, #20
   1fe0c:	ldrd	r4, [sp]
   1fe10:	ldrd	r6, [sp, #8]
   1fe14:	ldrd	r8, [sp, #16]
   1fe18:	ldrd	sl, [sp, #24]
   1fe1c:	add	sp, sp, #32
   1fe20:	pop	{pc}		; (ldr pc, [sp], #4)
   1fe24:	mov	r0, r5
   1fe28:	bl	1fadc <__assert_fail@plt+0xe13c>
   1fe2c:	b	1fcdc <__assert_fail@plt+0xe33c>
   1fe30:	strd	r4, [sp, #-16]!
   1fe34:	str	r6, [sp, #8]
   1fe38:	str	lr, [sp, #12]
   1fe3c:	ldr	r5, [r0]
   1fe40:	ldr	r0, [r5, #56]	; 0x38
   1fe44:	cmp	r0, #0
   1fe48:	beq	1fe60 <__assert_fail@plt+0xe4c0>
   1fe4c:	ldr	r4, [r0]
   1fe50:	bl	1c948 <__assert_fail@plt+0xafa8>
   1fe54:	mov	r0, r4
   1fe58:	cmp	r4, #0
   1fe5c:	bne	1fe4c <__assert_fail@plt+0xe4ac>
   1fe60:	mov	r4, #0
   1fe64:	str	r4, [r5, #56]	; 0x38
   1fe68:	mov	r3, #31
   1fe6c:	str	r3, [r5, #64]	; 0x40
   1fe70:	str	r4, [r5, #52]	; 0x34
   1fe74:	ldr	r0, [r5, #16]
   1fe78:	bl	1c948 <__assert_fail@plt+0xafa8>
   1fe7c:	str	r4, [r5, #16]
   1fe80:	ldrd	r4, [sp]
   1fe84:	ldr	r6, [sp, #8]
   1fe88:	add	sp, sp, #12
   1fe8c:	pop	{pc}		; (ldr pc, [sp], #4)
   1fe90:	str	r4, [sp, #-8]!
   1fe94:	str	lr, [sp, #4]
   1fe98:	mov	r4, r0
   1fe9c:	ldr	r0, [r0, #8]
   1fea0:	bl	1c948 <__assert_fail@plt+0xafa8>
   1fea4:	ldr	r0, [r4, #12]
   1fea8:	bl	1c948 <__assert_fail@plt+0xafa8>
   1feac:	ldrb	r3, [r4, #75]	; 0x4b
   1feb0:	cmp	r3, #0
   1feb4:	bne	1fec4 <__assert_fail@plt+0xe524>
   1feb8:	ldr	r4, [sp]
   1febc:	add	sp, sp, #4
   1fec0:	pop	{pc}		; (ldr pc, [sp], #4)
   1fec4:	ldr	r0, [r4, #4]
   1fec8:	bl	1c948 <__assert_fail@plt+0xafa8>
   1fecc:	b	1feb8 <__assert_fail@plt+0xe518>
   1fed0:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1fed4:	strd	r6, [sp, #8]
   1fed8:	str	r8, [sp, #16]
   1fedc:	str	lr, [sp, #20]
   1fee0:	mov	r6, r0
   1fee4:	ldr	r3, [r0]
   1fee8:	cmp	r3, #0
   1feec:	beq	1ff1c <__assert_fail@plt+0xe57c>
   1fef0:	ldr	r3, [r0, #8]
   1fef4:	cmp	r3, #0
   1fef8:	beq	1ff1c <__assert_fail@plt+0xe57c>
   1fefc:	mov	r4, #0
   1ff00:	ldr	r0, [r6]
   1ff04:	add	r0, r0, r4, lsl #3
   1ff08:	bl	1f72c <__assert_fail@plt+0xdd8c>
   1ff0c:	add	r4, r4, #1
   1ff10:	ldr	r3, [r6, #8]
   1ff14:	cmp	r3, r4
   1ff18:	bhi	1ff00 <__assert_fail@plt+0xe560>
   1ff1c:	ldr	r0, [r6, #12]
   1ff20:	bl	1c948 <__assert_fail@plt+0xafa8>
   1ff24:	ldr	r3, [r6, #8]
   1ff28:	cmp	r3, #0
   1ff2c:	beq	1ff9c <__assert_fail@plt+0xe5fc>
   1ff30:	mov	r4, #0
   1ff34:	mov	r5, r4
   1ff38:	b	1ff50 <__assert_fail@plt+0xe5b0>
   1ff3c:	add	r5, r5, #1
   1ff40:	add	r4, r4, #12
   1ff44:	ldr	r3, [r6, #8]
   1ff48:	cmp	r3, r5
   1ff4c:	bls	1ff9c <__assert_fail@plt+0xe5fc>
   1ff50:	ldr	r3, [r6, #24]
   1ff54:	cmp	r3, #0
   1ff58:	beq	1ff68 <__assert_fail@plt+0xe5c8>
   1ff5c:	add	r3, r3, r4
   1ff60:	ldr	r0, [r3, #8]
   1ff64:	bl	1c948 <__assert_fail@plt+0xafa8>
   1ff68:	ldr	r3, [r6, #28]
   1ff6c:	cmp	r3, #0
   1ff70:	beq	1ff80 <__assert_fail@plt+0xe5e0>
   1ff74:	add	r3, r3, r4
   1ff78:	ldr	r0, [r3, #8]
   1ff7c:	bl	1c948 <__assert_fail@plt+0xafa8>
   1ff80:	ldr	r3, [r6, #20]
   1ff84:	cmp	r3, #0
   1ff88:	beq	1ff3c <__assert_fail@plt+0xe59c>
   1ff8c:	add	r3, r3, r4
   1ff90:	ldr	r0, [r3, #8]
   1ff94:	bl	1c948 <__assert_fail@plt+0xafa8>
   1ff98:	b	1ff3c <__assert_fail@plt+0xe59c>
   1ff9c:	ldr	r0, [r6, #20]
   1ffa0:	bl	1c948 <__assert_fail@plt+0xafa8>
   1ffa4:	ldr	r0, [r6, #24]
   1ffa8:	bl	1c948 <__assert_fail@plt+0xafa8>
   1ffac:	ldr	r0, [r6, #28]
   1ffb0:	bl	1c948 <__assert_fail@plt+0xafa8>
   1ffb4:	ldr	r0, [r6]
   1ffb8:	bl	1c948 <__assert_fail@plt+0xafa8>
   1ffbc:	ldr	r3, [r6, #32]
   1ffc0:	cmp	r3, #0
   1ffc4:	beq	20028 <__assert_fail@plt+0xe688>
   1ffc8:	mov	r7, #0
   1ffcc:	mov	r8, r7
   1ffd0:	b	1fff0 <__assert_fail@plt+0xe650>
   1ffd4:	ldr	r0, [r5, #8]
   1ffd8:	bl	1c948 <__assert_fail@plt+0xafa8>
   1ffdc:	add	r8, r8, #1
   1ffe0:	add	r7, r7, #12
   1ffe4:	ldr	r3, [r6, #68]	; 0x44
   1ffe8:	cmp	r3, r8
   1ffec:	bcc	20028 <__assert_fail@plt+0xe688>
   1fff0:	ldr	r3, [r6, #32]
   1fff4:	add	r5, r3, r7
   1fff8:	ldr	r3, [r3, r7]
   1fffc:	cmp	r3, #0
   20000:	ble	1ffd4 <__assert_fail@plt+0xe634>
   20004:	mov	r4, #0
   20008:	ldr	r3, [r5, #8]
   2000c:	ldr	r0, [r3, r4, lsl #2]
   20010:	bl	1fadc <__assert_fail@plt+0xe13c>
   20014:	add	r4, r4, #1
   20018:	ldr	r3, [r5]
   2001c:	cmp	r3, r4
   20020:	bgt	20008 <__assert_fail@plt+0xe668>
   20024:	b	1ffd4 <__assert_fail@plt+0xe634>
   20028:	ldr	r0, [r6, #32]
   2002c:	bl	1c948 <__assert_fail@plt+0xafa8>
   20030:	ldr	r0, [r6, #60]	; 0x3c
   20034:	movw	r3, #57900	; 0xe22c
   20038:	movt	r3, #2
   2003c:	cmp	r0, r3
   20040:	beq	20048 <__assert_fail@plt+0xe6a8>
   20044:	bl	1c948 <__assert_fail@plt+0xafa8>
   20048:	ldr	r0, [r6, #132]	; 0x84
   2004c:	bl	1c948 <__assert_fail@plt+0xafa8>
   20050:	mov	r0, r6
   20054:	bl	1c948 <__assert_fail@plt+0xafa8>
   20058:	ldrd	r4, [sp]
   2005c:	ldrd	r6, [sp, #8]
   20060:	ldr	r8, [sp, #16]
   20064:	add	sp, sp, #20
   20068:	pop	{pc}		; (ldr pc, [sp], #4)
   2006c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   20070:	strd	r6, [sp, #8]
   20074:	strd	r8, [sp, #16]
   20078:	strd	sl, [sp, #24]
   2007c:	str	lr, [sp, #32]
   20080:	sub	sp, sp, #28
   20084:	str	r3, [sp, #4]
   20088:	add	r3, r1, r1, lsl #1
   2008c:	ldr	r6, [r0, #28]
   20090:	add	r6, r6, r3, lsl #2
   20094:	mov	r3, #0
   20098:	str	r3, [sp, #12]
   2009c:	str	r3, [sp, #16]
   200a0:	str	r3, [sp, #20]
   200a4:	ldr	r3, [r6, #4]
   200a8:	cmp	r3, #0
   200ac:	ble	20128 <__assert_fail@plt+0xe788>
   200b0:	mov	r7, r0
   200b4:	mov	r8, r1
   200b8:	mov	fp, r2
   200bc:	mov	r5, #0
   200c0:	b	201a8 <__assert_fail@plt+0xe808>
   200c4:	ldr	r0, [sp, #20]
   200c8:	bl	1c948 <__assert_fail@plt+0xafa8>
   200cc:	b	20134 <__assert_fail@plt+0xe794>
   200d0:	cmp	r3, #0
   200d4:	ble	20128 <__assert_fail@plt+0xe788>
   200d8:	mov	r4, #0
   200dc:	b	20108 <__assert_fail@plt+0xe768>
   200e0:	mov	r1, r5
   200e4:	mov	r0, fp
   200e8:	bl	1ccfc <__assert_fail@plt+0xb35c>
   200ec:	sub	r1, r0, #1
   200f0:	mov	r0, fp
   200f4:	bl	1cd94 <__assert_fail@plt+0xb3f4>
   200f8:	add	r4, r4, #1
   200fc:	ldr	r3, [r6, #4]
   20100:	cmp	r3, r4
   20104:	ble	20128 <__assert_fail@plt+0xe788>
   20108:	ldr	r3, [r6, #8]
   2010c:	ldr	r5, [r3, r4, lsl #2]
   20110:	mov	r1, r5
   20114:	add	r0, sp, #12
   20118:	bl	1ccfc <__assert_fail@plt+0xb35c>
   2011c:	cmp	r0, #0
   20120:	bne	200f8 <__assert_fail@plt+0xe758>
   20124:	b	200e0 <__assert_fail@plt+0xe740>
   20128:	ldr	r0, [sp, #20]
   2012c:	bl	1c948 <__assert_fail@plt+0xafa8>
   20130:	mov	r4, #0
   20134:	mov	r0, r4
   20138:	add	sp, sp, #28
   2013c:	ldrd	r4, [sp]
   20140:	ldrd	r6, [sp, #8]
   20144:	ldrd	r8, [sp, #16]
   20148:	ldrd	sl, [sp, #24]
   2014c:	add	sp, sp, #32
   20150:	pop	{pc}		; (ldr pc, [sp], #4)
   20154:	mov	r1, r9
   20158:	mov	r0, r6
   2015c:	bl	1ccfc <__assert_fail@plt+0xb35c>
   20160:	cmp	r0, #0
   20164:	bne	20198 <__assert_fail@plt+0xe7f8>
   20168:	mov	r1, r9
   2016c:	mov	r0, fp
   20170:	bl	1ccfc <__assert_fail@plt+0xb35c>
   20174:	cmp	r0, #0
   20178:	beq	20198 <__assert_fail@plt+0xe7f8>
   2017c:	ldr	r2, [r7, #28]
   20180:	add	r2, r2, r4
   20184:	ldr	r1, [sp, #4]
   20188:	add	r0, sp, #12
   2018c:	bl	1e8c4 <__assert_fail@plt+0xcf24>
   20190:	subs	r4, r0, #0
   20194:	bne	200c4 <__assert_fail@plt+0xe724>
   20198:	add	r5, r5, #1
   2019c:	ldr	r3, [r6, #4]
   201a0:	cmp	r3, r5
   201a4:	ble	200d0 <__assert_fail@plt+0xe730>
   201a8:	ldr	r3, [r6, #8]
   201ac:	ldr	r4, [r3, r5, lsl #2]
   201b0:	cmp	r8, r4
   201b4:	beq	20198 <__assert_fail@plt+0xe7f8>
   201b8:	ldr	r3, [r7]
   201bc:	add	r3, r3, r4, lsl #3
   201c0:	ldrb	r3, [r3, #4]
   201c4:	tst	r3, #8
   201c8:	beq	20198 <__assert_fail@plt+0xe7f8>
   201cc:	add	r4, r4, r4, lsl #1
   201d0:	lsl	r4, r4, #2
   201d4:	ldr	r3, [r7, #20]
   201d8:	add	r3, r3, r4
   201dc:	ldr	r2, [r3, #8]
   201e0:	ldr	r9, [r2]
   201e4:	ldr	r3, [r3, #4]
   201e8:	cmp	r3, #1
   201ec:	ble	20154 <__assert_fail@plt+0xe7b4>
   201f0:	ldr	sl, [r2, #4]
   201f4:	mov	r1, r9
   201f8:	mov	r0, r6
   201fc:	bl	1ccfc <__assert_fail@plt+0xb35c>
   20200:	cmp	r0, #0
   20204:	bne	2021c <__assert_fail@plt+0xe87c>
   20208:	mov	r1, r9
   2020c:	mov	r0, fp
   20210:	bl	1ccfc <__assert_fail@plt+0xb35c>
   20214:	cmp	r0, #0
   20218:	bne	2017c <__assert_fail@plt+0xe7dc>
   2021c:	cmp	sl, #0
   20220:	ble	20198 <__assert_fail@plt+0xe7f8>
   20224:	mov	r1, sl
   20228:	mov	r0, r6
   2022c:	bl	1ccfc <__assert_fail@plt+0xb35c>
   20230:	cmp	r0, #0
   20234:	bne	20198 <__assert_fail@plt+0xe7f8>
   20238:	mov	r1, sl
   2023c:	mov	r0, fp
   20240:	bl	1ccfc <__assert_fail@plt+0xb35c>
   20244:	cmp	r0, #0
   20248:	beq	20198 <__assert_fail@plt+0xe7f8>
   2024c:	b	2017c <__assert_fail@plt+0xe7dc>
   20250:	strd	r4, [sp, #-24]!	; 0xffffffe8
   20254:	strd	r6, [sp, #8]
   20258:	str	r8, [sp, #16]
   2025c:	str	lr, [sp, #20]
   20260:	mov	r8, r0
   20264:	ldr	r3, [r0, #124]	; 0x7c
   20268:	cmp	r3, #0
   2026c:	ble	202f8 <__assert_fail@plt+0xe958>
   20270:	mov	r7, #0
   20274:	b	20290 <__assert_fail@plt+0xe8f0>
   20278:	mov	r0, r6
   2027c:	bl	1c948 <__assert_fail@plt+0xafa8>
   20280:	add	r7, r7, #1
   20284:	ldr	r3, [r8, #124]	; 0x7c
   20288:	cmp	r3, r7
   2028c:	ble	202f8 <__assert_fail@plt+0xe958>
   20290:	ldr	r3, [r8, #132]	; 0x84
   20294:	ldr	r6, [r3, r7, lsl #2]
   20298:	ldr	r3, [r6, #16]
   2029c:	cmp	r3, #0
   202a0:	ble	202d0 <__assert_fail@plt+0xe930>
   202a4:	mov	r4, #0
   202a8:	ldr	r3, [r6, #20]
   202ac:	ldr	r5, [r3, r4, lsl #2]
   202b0:	ldr	r0, [r5, #16]
   202b4:	bl	1c948 <__assert_fail@plt+0xafa8>
   202b8:	mov	r0, r5
   202bc:	bl	1c948 <__assert_fail@plt+0xafa8>
   202c0:	add	r4, r4, #1
   202c4:	ldr	r3, [r6, #16]
   202c8:	cmp	r3, r4
   202cc:	bgt	202a8 <__assert_fail@plt+0xe908>
   202d0:	ldr	r0, [r6, #20]
   202d4:	bl	1c948 <__assert_fail@plt+0xafa8>
   202d8:	ldr	r3, [r6, #8]
   202dc:	cmp	r3, #0
   202e0:	beq	20278 <__assert_fail@plt+0xe8d8>
   202e4:	ldr	r0, [r3, #8]
   202e8:	bl	1c948 <__assert_fail@plt+0xafa8>
   202ec:	ldr	r0, [r6, #8]
   202f0:	bl	1c948 <__assert_fail@plt+0xafa8>
   202f4:	b	20278 <__assert_fail@plt+0xe8d8>
   202f8:	mov	r3, #0
   202fc:	str	r3, [r8, #124]	; 0x7c
   20300:	str	r3, [r8, #108]	; 0x6c
   20304:	ldrd	r4, [sp]
   20308:	ldrd	r6, [sp, #8]
   2030c:	ldr	r8, [sp, #16]
   20310:	add	sp, sp, #20
   20314:	pop	{pc}		; (ldr pc, [sp], #4)
   20318:	strd	r4, [sp, #-16]!
   2031c:	str	r6, [sp, #8]
   20320:	str	lr, [sp, #12]
   20324:	mov	r4, r0
   20328:	ldr	r0, [r0, #8]
   2032c:	add	r5, r4, #12
   20330:	cmp	r0, r5
   20334:	beq	2033c <__assert_fail@plt+0xe99c>
   20338:	bl	1c948 <__assert_fail@plt+0xafa8>
   2033c:	mov	r3, #0
   20340:	str	r3, [r4]
   20344:	mov	r3, #16
   20348:	str	r3, [r4, #4]
   2034c:	str	r5, [r4, #8]
   20350:	ldrd	r4, [sp]
   20354:	ldr	r6, [sp, #8]
   20358:	add	sp, sp, #12
   2035c:	pop	{pc}		; (ldr pc, [sp], #4)
   20360:	strd	r4, [sp, #-16]!
   20364:	str	r6, [sp, #8]
   20368:	str	lr, [sp, #12]
   2036c:	subs	r5, r0, #0
   20370:	beq	203c4 <__assert_fail@plt+0xea24>
   20374:	ldr	r3, [r5]
   20378:	cmp	r3, #0
   2037c:	ble	203bc <__assert_fail@plt+0xea1c>
   20380:	mov	r4, #0
   20384:	mov	r6, r4
   20388:	ldr	r3, [r5, #8]
   2038c:	add	r3, r3, r4
   20390:	ldr	r0, [r3, #20]
   20394:	bl	1c948 <__assert_fail@plt+0xafa8>
   20398:	ldr	r3, [r5, #8]
   2039c:	add	r3, r3, r4
   203a0:	ldr	r0, [r3, #8]
   203a4:	bl	1c948 <__assert_fail@plt+0xafa8>
   203a8:	add	r6, r6, #1
   203ac:	add	r4, r4, #24
   203b0:	ldr	r3, [r5]
   203b4:	cmp	r3, r6
   203b8:	bgt	20388 <__assert_fail@plt+0xe9e8>
   203bc:	ldr	r0, [r5, #8]
   203c0:	bl	1c948 <__assert_fail@plt+0xafa8>
   203c4:	mov	r0, #0
   203c8:	ldrd	r4, [sp]
   203cc:	ldr	r6, [sp, #8]
   203d0:	add	sp, sp, #12
   203d4:	pop	{pc}		; (ldr pc, [sp], #4)
   203d8:	strd	r4, [sp, #-16]!
   203dc:	str	r6, [sp, #8]
   203e0:	str	lr, [sp, #12]
   203e4:	ldr	r2, [r1, #28]
   203e8:	ldrb	r3, [r1, #24]
   203ec:	sub	r3, r3, #2
   203f0:	cmp	r3, #14
   203f4:	ldrls	pc, [pc, r3, lsl #2]
   203f8:	b	20530 <__assert_fail@plt+0xeb90>
   203fc:	andeq	r0, r2, r8, asr #10
   20400:	andeq	r0, r2, r0, lsr r5
   20404:	strdeq	r0, [r2], -r4
   20408:	andeq	r0, r2, r0, lsr r5
   2040c:	andeq	r0, r2, r0, lsr r5
   20410:	andeq	r0, r2, r0, lsr r5
   20414:	ldrdeq	r0, [r2], -r8
   20418:	ldrdeq	r0, [r2], -r8
   2041c:	andeq	r0, r2, r8, lsr r4
   20420:	andeq	r0, r2, r8, lsr r4
   20424:	ldrdeq	r0, [r2], -r8
   20428:	andeq	r0, r2, r0, lsr r5
   2042c:	andeq	r0, r2, r0, lsr r5
   20430:	andeq	r0, r2, r0, lsr r5
   20434:	andeq	r0, r2, r8, asr #10
   20438:	ldrb	r3, [r0, #88]	; 0x58
   2043c:	orr	r3, r3, #1
   20440:	strb	r3, [r0, #88]	; 0x58
   20444:	ldr	r3, [r1, #4]
   20448:	cmp	r3, #0
   2044c:	ldrne	r3, [r3, #12]
   20450:	ldreq	r3, [r1, #16]
   20454:	ldr	r4, [r3, #28]
   20458:	ldr	r3, [r1, #8]
   2045c:	cmp	r3, #0
   20460:	ldrne	r3, [r3, #12]
   20464:	ldreq	r3, [r1, #16]
   20468:	ldr	r5, [r3, #28]
   2046c:	add	r2, r2, r2, lsl #1
   20470:	lsl	r2, r2, #2
   20474:	ldr	r3, [r0, #20]
   20478:	add	r6, r3, r2
   2047c:	mov	r1, #2
   20480:	str	r1, [r3, r2]
   20484:	mov	r0, #8
   20488:	bl	1ca68 <__assert_fail@plt+0xb0c8>
   2048c:	str	r0, [r6, #8]
   20490:	cmp	r0, #0
   20494:	beq	2055c <__assert_fail@plt+0xebbc>
   20498:	cmp	r4, r5
   2049c:	beq	204c4 <__assert_fail@plt+0xeb24>
   204a0:	mov	r3, #2
   204a4:	str	r3, [r6, #4]
   204a8:	cmp	r4, r5
   204ac:	strlt	r4, [r0]
   204b0:	strlt	r5, [r0, #4]
   204b4:	strge	r5, [r0]
   204b8:	strge	r4, [r0, #4]
   204bc:	mov	r0, #0
   204c0:	b	2054c <__assert_fail@plt+0xebac>
   204c4:	mov	r3, #1
   204c8:	str	r3, [r6, #4]
   204cc:	str	r4, [r0]
   204d0:	mov	r0, #0
   204d4:	b	2054c <__assert_fail@plt+0xebac>
   204d8:	ldr	r1, [r1, #16]
   204dc:	add	r2, r2, r2, lsl #1
   204e0:	ldr	r0, [r0, #20]
   204e4:	ldr	r1, [r1, #28]
   204e8:	add	r0, r0, r2, lsl #2
   204ec:	bl	1ddc4 <__assert_fail@plt+0xc424>
   204f0:	b	2054c <__assert_fail@plt+0xebac>
   204f4:	ldr	r3, [r1, #16]
   204f8:	ldr	ip, [r3, #28]
   204fc:	ldr	r3, [r0, #12]
   20500:	str	ip, [r3, r2, lsl #2]
   20504:	ldrb	r3, [r1, #24]
   20508:	cmp	r3, #4
   2050c:	movne	r0, #0
   20510:	bne	2054c <__assert_fail@plt+0xebac>
   20514:	ldr	r1, [r0, #12]
   20518:	add	ip, r2, r2, lsl #1
   2051c:	ldr	r0, [r0, #20]
   20520:	ldr	r1, [r1, r2, lsl #2]
   20524:	add	r0, r0, ip, lsl #2
   20528:	bl	1ddc4 <__assert_fail@plt+0xc424>
   2052c:	b	2054c <__assert_fail@plt+0xebac>
   20530:	ldr	r3, [r1, #16]
   20534:	ldr	r1, [r3, #28]
   20538:	ldr	r3, [r0, #12]
   2053c:	str	r1, [r3, r2, lsl #2]
   20540:	mov	r0, #0
   20544:	b	2054c <__assert_fail@plt+0xebac>
   20548:	mov	r0, #0
   2054c:	ldrd	r4, [sp]
   20550:	ldr	r6, [sp, #8]
   20554:	add	sp, sp, #12
   20558:	pop	{pc}		; (ldr pc, [sp], #4)
   2055c:	mov	r0, #12
   20560:	b	2054c <__assert_fail@plt+0xebac>
   20564:	strd	r4, [sp, #-16]!
   20568:	str	r6, [sp, #8]
   2056c:	str	lr, [sp, #12]
   20570:	mov	r4, r0
   20574:	mov	r5, r1
   20578:	ldr	r1, [r0]
   2057c:	cmp	r1, #0
   20580:	beq	205b8 <__assert_fail@plt+0xec18>
   20584:	ldr	r3, [r0, #4]
   20588:	cmp	r3, #0
   2058c:	bne	205cc <__assert_fail@plt+0xec2c>
   20590:	ldr	r3, [r0, #8]
   20594:	str	r5, [r3]
   20598:	ldr	r3, [r0, #4]
   2059c:	add	r3, r3, #1
   205a0:	str	r3, [r0, #4]
   205a4:	mov	r0, #1
   205a8:	ldrd	r4, [sp]
   205ac:	ldr	r6, [sp, #8]
   205b0:	add	sp, sp, #12
   205b4:	pop	{pc}		; (ldr pc, [sp], #4)
   205b8:	mov	r1, r5
   205bc:	bl	1ddc4 <__assert_fail@plt+0xc424>
   205c0:	clz	r0, r0
   205c4:	lsr	r0, r0, #5
   205c8:	b	205a8 <__assert_fail@plt+0xec08>
   205cc:	cmp	r1, r3
   205d0:	beq	2062c <__assert_fail@plt+0xec8c>
   205d4:	ldr	r1, [r4, #8]
   205d8:	ldr	r3, [r1]
   205dc:	cmp	r3, r5
   205e0:	ble	20650 <__assert_fail@plt+0xecb0>
   205e4:	ldr	r3, [r4, #4]
   205e8:	cmp	r3, #0
   205ec:	ble	20610 <__assert_fail@plt+0xec70>
   205f0:	sub	r2, r3, #-1073741823	; 0xc0000001
   205f4:	lsl	r2, r2, #2
   205f8:	ldr	r1, [r4, #8]
   205fc:	ldr	r0, [r1, r2]
   20600:	str	r0, [r1, r3, lsl #2]
   20604:	sub	r2, r2, #4
   20608:	subs	r3, r3, #1
   2060c:	bne	205f8 <__assert_fail@plt+0xec58>
   20610:	ldr	r2, [r4, #8]
   20614:	str	r5, [r2, r3, lsl #2]
   20618:	ldr	r3, [r4, #4]
   2061c:	add	r3, r3, #1
   20620:	str	r3, [r4, #4]
   20624:	mov	r0, #1
   20628:	b	205a8 <__assert_fail@plt+0xec08>
   2062c:	lsl	r3, r1, #1
   20630:	str	r3, [r0]
   20634:	lsl	r1, r1, #3
   20638:	ldr	r0, [r0, #8]
   2063c:	bl	1cb14 <__assert_fail@plt+0xb174>
   20640:	cmp	r0, #0
   20644:	beq	20690 <__assert_fail@plt+0xecf0>
   20648:	str	r0, [r4, #8]
   2064c:	b	205d4 <__assert_fail@plt+0xec34>
   20650:	ldr	r3, [r4, #4]
   20654:	sub	r0, r3, #-1073741823	; 0xc0000001
   20658:	lsl	r2, r0, #2
   2065c:	ldr	r0, [r1, r0, lsl #2]
   20660:	cmp	r5, r0
   20664:	bge	20610 <__assert_fail@plt+0xec70>
   20668:	add	r2, r2, #4
   2066c:	str	r0, [r1, r2]
   20670:	sub	r3, r3, #1
   20674:	ldr	r1, [r4, #8]
   20678:	add	r0, r1, r2
   2067c:	ldr	r0, [r0, #-8]
   20680:	sub	r2, r2, #4
   20684:	cmp	r0, r5
   20688:	bgt	2066c <__assert_fail@plt+0xeccc>
   2068c:	b	20610 <__assert_fail@plt+0xec70>
   20690:	mov	r0, #0
   20694:	b	205a8 <__assert_fail@plt+0xec08>
   20698:	strd	r4, [sp, #-36]!	; 0xffffffdc
   2069c:	strd	r6, [sp, #8]
   206a0:	strd	r8, [sp, #16]
   206a4:	strd	sl, [sp, #24]
   206a8:	str	lr, [sp, #32]
   206ac:	sub	sp, sp, #20
   206b0:	mov	r4, r0
   206b4:	mov	r5, r1
   206b8:	mov	r6, r2
   206bc:	mov	r9, r3
   206c0:	ldr	r7, [sp, #56]	; 0x38
   206c4:	mov	r8, #0
   206c8:	b	20898 <__assert_fail@plt+0xeef8>
   206cc:	lsl	fp, r5, #2
   206d0:	ldr	r3, [r4, #12]
   206d4:	ldr	r5, [r3, r5, lsl #2]
   206d8:	str	r6, [sp, #12]
   206dc:	add	r6, r6, r6, lsl #1
   206e0:	lsl	sl, r6, #2
   206e4:	ldr	r3, [r4, #20]
   206e8:	add	r3, r3, sl
   206ec:	str	r8, [r3, #4]
   206f0:	mov	r2, r7
   206f4:	mov	r1, r5
   206f8:	mov	r0, r4
   206fc:	bl	1fa38 <__assert_fail@plt+0xe098>
   20700:	mov	r6, r0
   20704:	cmn	r0, #1
   20708:	beq	20990 <__assert_fail@plt+0xeff0>
   2070c:	ldr	r3, [r4, #12]
   20710:	ldr	r2, [r3, fp]
   20714:	ldr	r1, [sp, #12]
   20718:	str	r2, [r3, r1, lsl #2]
   2071c:	ldr	r0, [r4, #20]
   20720:	mov	r1, r6
   20724:	add	r0, r0, sl
   20728:	bl	20564 <__assert_fail@plt+0xebc4>
   2072c:	cmp	r0, #0
   20730:	bne	20898 <__assert_fail@plt+0xeef8>
   20734:	mov	r0, #12
   20738:	b	209bc <__assert_fail@plt+0xf01c>
   2073c:	ldr	r3, [r4, #12]
   20740:	ldr	r2, [r3, r5, lsl #2]
   20744:	str	r2, [r3, r6, lsl #2]
   20748:	b	209bc <__assert_fail@plt+0xf01c>
   2074c:	ldr	r2, [r2, #8]
   20750:	ldr	fp, [r2]
   20754:	add	sl, r6, r6, lsl #1
   20758:	lsl	sl, sl, #2
   2075c:	add	r3, r3, sl
   20760:	str	r8, [r3, #4]
   20764:	cmp	r5, r9
   20768:	movne	r3, #0
   2076c:	moveq	r3, #1
   20770:	cmp	r5, r6
   20774:	moveq	r3, #0
   20778:	cmp	r3, #0
   2077c:	bne	207d0 <__assert_fail@plt+0xee30>
   20780:	ldr	r3, [r4]
   20784:	add	r1, r3, r1
   20788:	ldr	r3, [r1, #4]
   2078c:	ubfx	r3, r3, #8, #10
   20790:	orr	r7, r7, r3
   20794:	mov	r2, r7
   20798:	mov	r1, fp
   2079c:	mov	r0, r4
   207a0:	bl	1fa38 <__assert_fail@plt+0xe098>
   207a4:	mov	r6, r0
   207a8:	cmn	r0, #1
   207ac:	beq	20998 <__assert_fail@plt+0xeff8>
   207b0:	ldr	r0, [r4, #20]
   207b4:	mov	r1, r6
   207b8:	add	r0, r0, sl
   207bc:	bl	20564 <__assert_fail@plt+0xebc4>
   207c0:	cmp	r0, #0
   207c4:	beq	207f0 <__assert_fail@plt+0xee50>
   207c8:	mov	r5, fp
   207cc:	b	20898 <__assert_fail@plt+0xeef8>
   207d0:	ldr	r0, [r4, #20]
   207d4:	mov	r1, fp
   207d8:	add	r0, r0, sl
   207dc:	bl	20564 <__assert_fail@plt+0xebc4>
   207e0:	cmp	r0, #0
   207e4:	movne	r0, #0
   207e8:	moveq	r0, #12
   207ec:	b	209bc <__assert_fail@plt+0xf01c>
   207f0:	mov	r0, #12
   207f4:	b	209bc <__assert_fail@plt+0xf01c>
   207f8:	sub	r1, r1, #1
   207fc:	add	r2, r2, r0
   20800:	ldrb	r3, [r2, #6]
   20804:	ubfx	r3, r3, #2, #1
   20808:	cmp	r1, #0
   2080c:	movle	r3, #0
   20810:	andgt	r3, r3, #1
   20814:	cmp	r3, #0
   20818:	beq	20930 <__assert_fail@plt+0xef90>
   2081c:	ldr	r3, [ip, #-4]!
   20820:	cmp	r5, r3
   20824:	bne	207f8 <__assert_fail@plt+0xee58>
   20828:	ldr	r3, [r2, #4]
   2082c:	ubfx	r3, r3, #8, #10
   20830:	cmp	r7, r3
   20834:	bne	207f8 <__assert_fail@plt+0xee58>
   20838:	cmn	r1, #1
   2083c:	beq	20930 <__assert_fail@plt+0xef90>
   20840:	ldr	r0, [r4, #20]
   20844:	add	r0, r0, fp
   20848:	bl	20564 <__assert_fail@plt+0xebc4>
   2084c:	cmp	r0, #0
   20850:	beq	209b0 <__assert_fail@plt+0xf010>
   20854:	ldr	r3, [r4, #20]
   20858:	add	sl, r3, sl
   2085c:	ldr	r3, [sl, #8]
   20860:	ldr	r5, [r3, #4]
   20864:	mov	r2, r7
   20868:	mov	r1, r5
   2086c:	mov	r0, r4
   20870:	bl	1fa38 <__assert_fail@plt+0xe098>
   20874:	mov	r6, r0
   20878:	cmn	r0, #1
   2087c:	beq	209b8 <__assert_fail@plt+0xf018>
   20880:	ldr	r0, [r4, #20]
   20884:	mov	r1, r6
   20888:	add	r0, r0, fp
   2088c:	bl	20564 <__assert_fail@plt+0xebc4>
   20890:	cmp	r0, #0
   20894:	beq	20988 <__assert_fail@plt+0xefe8>
   20898:	lsl	r1, r5, #3
   2089c:	ldr	r3, [r4]
   208a0:	add	r3, r3, r1
   208a4:	ldrb	r3, [r3, #4]
   208a8:	cmp	r3, #4
   208ac:	beq	206cc <__assert_fail@plt+0xed2c>
   208b0:	ldr	r3, [r4, #20]
   208b4:	add	sl, r5, r5, lsl #1
   208b8:	lsl	sl, sl, #2
   208bc:	add	r2, r3, sl
   208c0:	ldr	r0, [r2, #4]
   208c4:	cmp	r0, #0
   208c8:	beq	2073c <__assert_fail@plt+0xed9c>
   208cc:	cmp	r0, #1
   208d0:	beq	2074c <__assert_fail@plt+0xedac>
   208d4:	ldr	r2, [r2, #8]
   208d8:	ldr	r5, [r2]
   208dc:	add	r6, r6, r6, lsl #1
   208e0:	lsl	fp, r6, #2
   208e4:	add	r3, r3, fp
   208e8:	str	r8, [r3, #4]
   208ec:	ldr	lr, [r4, #8]
   208f0:	sub	r1, lr, #1
   208f4:	ldr	r0, [r4]
   208f8:	add	r2, r0, r1, lsl #3
   208fc:	ldrb	r3, [r2, #6]
   20900:	ubfx	r3, r3, #2, #1
   20904:	cmp	r1, #0
   20908:	movle	r3, #0
   2090c:	andgt	r3, r3, #1
   20910:	cmp	r3, #0
   20914:	beq	20930 <__assert_fail@plt+0xef90>
   20918:	ldr	ip, [r4, #16]
   2091c:	add	ip, ip, lr, lsl #2
   20920:	add	r0, r0, lr, lsl #3
   20924:	sub	r0, r0, r2
   20928:	sub	r0, r0, #16
   2092c:	b	2081c <__assert_fail@plt+0xee7c>
   20930:	mov	r2, r7
   20934:	mov	r1, r5
   20938:	mov	r0, r4
   2093c:	bl	1fa38 <__assert_fail@plt+0xe098>
   20940:	mov	r6, r0
   20944:	cmn	r0, #1
   20948:	beq	209a0 <__assert_fail@plt+0xf000>
   2094c:	ldr	r0, [r4, #20]
   20950:	mov	r1, r6
   20954:	add	r0, r0, fp
   20958:	bl	20564 <__assert_fail@plt+0xebc4>
   2095c:	cmp	r0, #0
   20960:	beq	209a8 <__assert_fail@plt+0xf008>
   20964:	str	r7, [sp]
   20968:	mov	r3, r9
   2096c:	mov	r2, r6
   20970:	mov	r1, r5
   20974:	mov	r0, r4
   20978:	bl	20698 <__assert_fail@plt+0xecf8>
   2097c:	cmp	r0, #0
   20980:	beq	20854 <__assert_fail@plt+0xeeb4>
   20984:	b	209bc <__assert_fail@plt+0xf01c>
   20988:	mov	r0, #12
   2098c:	b	209bc <__assert_fail@plt+0xf01c>
   20990:	mov	r0, #12
   20994:	b	209bc <__assert_fail@plt+0xf01c>
   20998:	mov	r0, #12
   2099c:	b	209bc <__assert_fail@plt+0xf01c>
   209a0:	mov	r0, #12
   209a4:	b	209bc <__assert_fail@plt+0xf01c>
   209a8:	mov	r0, #12
   209ac:	b	209bc <__assert_fail@plt+0xf01c>
   209b0:	mov	r0, #12
   209b4:	b	209bc <__assert_fail@plt+0xf01c>
   209b8:	mov	r0, #12
   209bc:	add	sp, sp, #20
   209c0:	ldrd	r4, [sp]
   209c4:	ldrd	r6, [sp, #8]
   209c8:	ldrd	r8, [sp, #16]
   209cc:	ldrd	sl, [sp, #24]
   209d0:	add	sp, sp, #32
   209d4:	pop	{pc}		; (ldr pc, [sp], #4)
   209d8:	strd	r4, [sp, #-32]!	; 0xffffffe0
   209dc:	strd	r6, [sp, #8]
   209e0:	strd	r8, [sp, #16]
   209e4:	str	sl, [sp, #24]
   209e8:	str	lr, [sp, #28]
   209ec:	sub	sp, sp, #8
   209f0:	mov	r6, r0
   209f4:	mov	r7, r1
   209f8:	mov	r4, r2
   209fc:	mov	r9, r3
   20a00:	ldr	r8, [sp, #40]	; 0x28
   20a04:	b	20a50 <__assert_fail@plt+0xf0b0>
   20a08:	mov	r1, r4
   20a0c:	mov	r0, r7
   20a10:	bl	20564 <__assert_fail@plt+0xebc4>
   20a14:	cmp	r0, #0
   20a18:	beq	20ad8 <__assert_fail@plt+0xf138>
   20a1c:	add	r5, r5, r5, lsl #1
   20a20:	lsl	r5, r5, #2
   20a24:	ldr	r3, [r6, #20]
   20a28:	add	r3, r3, r5
   20a2c:	ldr	sl, [r3, #4]
   20a30:	cmp	sl, #0
   20a34:	beq	20adc <__assert_fail@plt+0xf13c>
   20a38:	cmp	sl, #2
   20a3c:	beq	20aa8 <__assert_fail@plt+0xf108>
   20a40:	ldr	r3, [r6, #20]
   20a44:	add	r5, r3, r5
   20a48:	ldr	r3, [r5, #8]
   20a4c:	ldr	r4, [r3]
   20a50:	mov	r1, r4
   20a54:	mov	r0, r7
   20a58:	bl	1ccfc <__assert_fail@plt+0xb35c>
   20a5c:	subs	sl, r0, #0
   20a60:	bne	20ad0 <__assert_fail@plt+0xf130>
   20a64:	mov	r5, r4
   20a68:	ldr	r3, [r6]
   20a6c:	add	r2, r3, r4, lsl #3
   20a70:	ldrb	r2, [r2, #4]
   20a74:	cmp	r2, r8
   20a78:	bne	20a08 <__assert_fail@plt+0xf068>
   20a7c:	ldr	r3, [r3, r4, lsl #3]
   20a80:	cmp	r3, r9
   20a84:	bne	20a08 <__assert_fail@plt+0xf068>
   20a88:	cmp	r8, #9
   20a8c:	bne	20adc <__assert_fail@plt+0xf13c>
   20a90:	mov	r1, r4
   20a94:	mov	r0, r7
   20a98:	bl	20564 <__assert_fail@plt+0xebc4>
   20a9c:	cmp	r0, #0
   20aa0:	moveq	sl, #12
   20aa4:	b	20adc <__assert_fail@plt+0xf13c>
   20aa8:	ldr	r3, [r3, #8]
   20aac:	ldr	r2, [r3, #4]
   20ab0:	str	r8, [sp]
   20ab4:	mov	r3, r9
   20ab8:	mov	r1, r7
   20abc:	mov	r0, r6
   20ac0:	bl	209d8 <__assert_fail@plt+0xf038>
   20ac4:	subs	sl, r0, #0
   20ac8:	beq	20a40 <__assert_fail@plt+0xf0a0>
   20acc:	b	20adc <__assert_fail@plt+0xf13c>
   20ad0:	mov	sl, #0
   20ad4:	b	20adc <__assert_fail@plt+0xf13c>
   20ad8:	mov	sl, #12
   20adc:	mov	r0, sl
   20ae0:	add	sp, sp, #8
   20ae4:	ldrd	r4, [sp]
   20ae8:	ldrd	r6, [sp, #8]
   20aec:	ldrd	r8, [sp, #16]
   20af0:	ldr	sl, [sp, #24]
   20af4:	add	sp, sp, #28
   20af8:	pop	{pc}		; (ldr pc, [sp], #4)
   20afc:	strd	r4, [sp, #-16]!
   20b00:	str	r6, [sp, #8]
   20b04:	str	lr, [sp, #12]
   20b08:	subs	r6, r1, #0
   20b0c:	moveq	r2, #0
   20b10:	beq	20c78 <__assert_fail@plt+0xf2d8>
   20b14:	ldr	r2, [r6, #4]
   20b18:	cmp	r2, #0
   20b1c:	beq	20c78 <__assert_fail@plt+0xf2d8>
   20b20:	mov	r4, r0
   20b24:	ldr	r1, [r0]
   20b28:	ldr	r3, [r0, #4]
   20b2c:	add	r0, r3, r2, lsl #1
   20b30:	cmp	r1, r0
   20b34:	blt	20b54 <__assert_fail@plt+0xf1b4>
   20b38:	cmp	r3, #0
   20b3c:	beq	20b88 <__assert_fail@plt+0xf1e8>
   20b40:	ldr	r2, [r6, #4]
   20b44:	add	r5, r3, r2, lsl #1
   20b48:	sub	r2, r2, #1
   20b4c:	sub	r3, r3, #1
   20b50:	b	20bc0 <__assert_fail@plt+0xf220>
   20b54:	add	r1, r2, r1
   20b58:	lsl	r5, r1, #1
   20b5c:	lsl	r1, r1, #3
   20b60:	ldr	r0, [r4, #8]
   20b64:	bl	1cb14 <__assert_fail@plt+0xb174>
   20b68:	cmp	r0, #0
   20b6c:	beq	20ca4 <__assert_fail@plt+0xf304>
   20b70:	str	r0, [r4, #8]
   20b74:	str	r5, [r4]
   20b78:	ldr	r3, [r4, #4]
   20b7c:	cmp	r3, #0
   20b80:	bne	20b40 <__assert_fail@plt+0xf1a0>
   20b84:	b	20b8c <__assert_fail@plt+0xf1ec>
   20b88:	ldr	r0, [r4, #8]
   20b8c:	ldr	r3, [r6, #4]
   20b90:	str	r3, [r4, #4]
   20b94:	ldr	r2, [r6, #4]
   20b98:	lsl	r2, r2, #2
   20b9c:	ldr	r1, [r6, #8]
   20ba0:	bl	115d4 <memcpy@plt>
   20ba4:	mov	r2, #0
   20ba8:	b	20c78 <__assert_fail@plt+0xf2d8>
   20bac:	cmp	r0, r1
   20bb0:	sublt	r2, r2, #1
   20bb4:	sublt	r5, r5, #1
   20bb8:	strlt	r1, [ip, r5, lsl #2]
   20bbc:	subge	r3, r3, #1
   20bc0:	cmp	r2, #0
   20bc4:	cmpge	r3, #0
   20bc8:	blt	20bf0 <__assert_fail@plt+0xf250>
   20bcc:	ldr	ip, [r4, #8]
   20bd0:	ldr	r0, [ip, r3, lsl #2]
   20bd4:	ldr	r1, [r6, #8]
   20bd8:	ldr	r1, [r1, r2, lsl #2]
   20bdc:	cmp	r0, r1
   20be0:	subeq	r2, r2, #1
   20be4:	subeq	r3, r3, #1
   20be8:	bne	20bac <__assert_fail@plt+0xf20c>
   20bec:	b	20bc0 <__assert_fail@plt+0xf220>
   20bf0:	cmp	r2, #0
   20bf4:	bge	20c20 <__assert_fail@plt+0xf280>
   20bf8:	ldr	r3, [r4, #4]
   20bfc:	ldr	r2, [r6, #4]
   20c00:	add	r2, r3, r2, lsl #1
   20c04:	sub	lr, r2, #1
   20c08:	subs	r2, r2, r5
   20c0c:	beq	20c78 <__assert_fail@plt+0xf2d8>
   20c10:	sub	ip, r3, #1
   20c14:	add	r3, r3, r2
   20c18:	str	r3, [r4, #4]
   20c1c:	b	20c50 <__assert_fail@plt+0xf2b0>
   20c20:	add	r2, r2, #1
   20c24:	sub	r5, r5, r2
   20c28:	ldr	r0, [r4, #8]
   20c2c:	lsl	r2, r2, #2
   20c30:	ldr	r1, [r6, #8]
   20c34:	add	r0, r0, r5, lsl #2
   20c38:	bl	115d4 <memcpy@plt>
   20c3c:	b	20bf8 <__assert_fail@plt+0xf258>
   20c40:	add	r0, ip, r2
   20c44:	str	r1, [r3, r0, lsl #2]
   20c48:	subs	ip, ip, #1
   20c4c:	bmi	20c8c <__assert_fail@plt+0xf2ec>
   20c50:	ldr	r3, [r4, #8]
   20c54:	ldr	r0, [r3, lr, lsl #2]
   20c58:	ldr	r1, [r3, ip, lsl #2]
   20c5c:	cmp	r0, r1
   20c60:	ble	20c40 <__assert_fail@plt+0xf2a0>
   20c64:	sub	lr, lr, #1
   20c68:	add	r1, ip, r2
   20c6c:	str	r0, [r3, r1, lsl #2]
   20c70:	subs	r2, r2, #1
   20c74:	bne	20c50 <__assert_fail@plt+0xf2b0>
   20c78:	mov	r0, r2
   20c7c:	ldrd	r4, [sp]
   20c80:	ldr	r6, [sp, #8]
   20c84:	add	sp, sp, #12
   20c88:	pop	{pc}		; (ldr pc, [sp], #4)
   20c8c:	ldr	r0, [r4, #8]
   20c90:	lsl	r2, r2, #2
   20c94:	add	r1, r0, r5, lsl #2
   20c98:	bl	115d4 <memcpy@plt>
   20c9c:	mov	r2, #0
   20ca0:	b	20c78 <__assert_fail@plt+0xf2d8>
   20ca4:	mov	r2, #12
   20ca8:	b	20c78 <__assert_fail@plt+0xf2d8>
   20cac:	strd	r4, [sp, #-36]!	; 0xffffffdc
   20cb0:	strd	r6, [sp, #8]
   20cb4:	strd	r8, [sp, #16]
   20cb8:	strd	sl, [sp, #24]
   20cbc:	str	lr, [sp, #32]
   20cc0:	sub	sp, sp, #44	; 0x2c
   20cc4:	mov	sl, r0
   20cc8:	mov	r4, r1
   20ccc:	mov	r5, r2
   20cd0:	mov	fp, r3
   20cd4:	add	r7, r2, r2, lsl #1
   20cd8:	lsl	r7, r7, #2
   20cdc:	ldr	r3, [r1, #20]
   20ce0:	add	r3, r3, r7
   20ce4:	ldr	r1, [r3, #4]
   20ce8:	add	r1, r1, #1
   20cec:	add	r0, sp, #28
   20cf0:	bl	1de1c <__assert_fail@plt+0xc47c>
   20cf4:	subs	r9, r0, #0
   20cf8:	bne	20ec0 <__assert_fail@plt+0xf520>
   20cfc:	mov	r8, r7
   20d00:	ldr	r3, [sp, #32]
   20d04:	add	r2, r3, #1
   20d08:	str	r2, [sp, #32]
   20d0c:	ldr	r2, [sp, #36]	; 0x24
   20d10:	str	r5, [r2, r3, lsl #2]
   20d14:	ldr	r3, [r4, #24]
   20d18:	add	r3, r3, r7
   20d1c:	mvn	r2, #0
   20d20:	str	r2, [r3, #4]
   20d24:	ldr	r2, [r4]
   20d28:	lsl	r6, r5, #3
   20d2c:	add	r1, r2, r6
   20d30:	ldr	r0, [r1, #4]
   20d34:	mov	r3, #65280	; 0xff00
   20d38:	movt	r3, #3
   20d3c:	and	r3, r3, r0
   20d40:	cmp	r3, #0
   20d44:	beq	20d74 <__assert_fail@plt+0xf3d4>
   20d48:	ldr	r3, [r4, #20]
   20d4c:	add	r3, r3, r7
   20d50:	ldr	r0, [r3, #4]
   20d54:	cmp	r0, #0
   20d58:	beq	20ee0 <__assert_fail@plt+0xf540>
   20d5c:	ldr	r3, [r3, #8]
   20d60:	ldr	r3, [r3]
   20d64:	add	r2, r2, r3, lsl #3
   20d68:	ldrb	r3, [r2, #6]
   20d6c:	tst	r3, #4
   20d70:	beq	20dac <__assert_fail@plt+0xf40c>
   20d74:	ldr	r3, [r4]
   20d78:	add	r6, r3, r6
   20d7c:	ldrb	r3, [r6, #4]
   20d80:	tst	r3, #8
   20d84:	beq	20ee0 <__assert_fail@plt+0xf540>
   20d88:	ldr	r3, [r4, #20]
   20d8c:	add	r3, r3, r7
   20d90:	ldr	r2, [r3, #4]
   20d94:	cmp	r2, #0
   20d98:	ble	20ee0 <__assert_fail@plt+0xf540>
   20d9c:	mov	r6, r9
   20da0:	mov	r2, #0
   20da4:	str	r2, [sp, #12]
   20da8:	b	20e20 <__assert_fail@plt+0xf480>
   20dac:	ldr	r3, [r1, #4]
   20db0:	ubfx	r3, r3, #8, #10
   20db4:	str	r3, [sp]
   20db8:	mov	r3, r5
   20dbc:	mov	r2, r5
   20dc0:	mov	r1, r5
   20dc4:	mov	r0, r4
   20dc8:	bl	20698 <__assert_fail@plt+0xecf8>
   20dcc:	cmp	r0, #0
   20dd0:	beq	20d74 <__assert_fail@plt+0xf3d4>
   20dd4:	mov	r9, r0
   20dd8:	b	20ec0 <__assert_fail@plt+0xf520>
   20ddc:	mov	r1, r4
   20de0:	add	r0, sp, #16
   20de4:	bl	20cac <__assert_fail@plt+0xf30c>
   20de8:	cmp	r0, #0
   20dec:	beq	20e64 <__assert_fail@plt+0xf4c4>
   20df0:	mov	r9, r0
   20df4:	b	20ec0 <__assert_fail@plt+0xf520>
   20df8:	ldr	r0, [sp, #24]
   20dfc:	bl	1c948 <__assert_fail@plt+0xafa8>
   20e00:	mov	r3, #1
   20e04:	str	r3, [sp, #12]
   20e08:	add	r6, r6, #1
   20e0c:	ldr	r3, [r4, #20]
   20e10:	add	r3, r3, r8
   20e14:	ldr	r2, [r3, #4]
   20e18:	cmp	r2, r6
   20e1c:	ble	20e90 <__assert_fail@plt+0xf4f0>
   20e20:	ldr	r3, [r3, #8]
   20e24:	ldr	r2, [r3, r6, lsl #2]
   20e28:	add	r5, r2, r2, lsl #1
   20e2c:	lsl	r5, r5, #2
   20e30:	ldr	r0, [r4, #24]
   20e34:	add	r1, r0, r5
   20e38:	ldr	r3, [r1, #4]
   20e3c:	cmn	r3, #1
   20e40:	moveq	r3, #1
   20e44:	streq	r3, [sp, #12]
   20e48:	beq	20e08 <__assert_fail@plt+0xf468>
   20e4c:	cmp	r3, #0
   20e50:	beq	20ddc <__assert_fail@plt+0xf43c>
   20e54:	ldrd	r2, [r0, r5]
   20e58:	strd	r2, [sp, #16]
   20e5c:	ldr	r3, [r1, #8]
   20e60:	str	r3, [sp, #24]
   20e64:	add	r1, sp, #16
   20e68:	add	r0, sp, #28
   20e6c:	bl	20afc <__assert_fail@plt+0xf15c>
   20e70:	cmp	r0, #0
   20e74:	bne	20df0 <__assert_fail@plt+0xf450>
   20e78:	ldr	r3, [r4, #24]
   20e7c:	add	r5, r3, r5
   20e80:	ldr	r3, [r5, #4]
   20e84:	cmp	r3, #0
   20e88:	bne	20e08 <__assert_fail@plt+0xf468>
   20e8c:	b	20df8 <__assert_fail@plt+0xf458>
   20e90:	eor	fp, fp, #1
   20e94:	ldr	r3, [sp, #12]
   20e98:	tst	r3, fp
   20e9c:	beq	20ee0 <__assert_fail@plt+0xf540>
   20ea0:	ldr	r3, [r4, #24]
   20ea4:	add	r7, r3, r7
   20ea8:	mov	r3, #0
   20eac:	str	r3, [r7, #4]
   20eb0:	ldrd	r2, [sp, #28]
   20eb4:	strd	r2, [sl]
   20eb8:	ldr	r3, [sp, #36]	; 0x24
   20ebc:	str	r3, [sl, #8]
   20ec0:	mov	r0, r9
   20ec4:	add	sp, sp, #44	; 0x2c
   20ec8:	ldrd	r4, [sp]
   20ecc:	ldrd	r6, [sp, #8]
   20ed0:	ldrd	r8, [sp, #16]
   20ed4:	ldrd	sl, [sp, #24]
   20ed8:	add	sp, sp, #32
   20edc:	pop	{pc}		; (ldr pc, [sp], #4)
   20ee0:	ldr	r1, [r4, #24]
   20ee4:	add	r0, r1, r7
   20ee8:	ldrd	r2, [sp, #28]
   20eec:	strd	r2, [r1, r7]
   20ef0:	ldr	r3, [sp, #36]	; 0x24
   20ef4:	str	r3, [r0, #8]
   20ef8:	b	20eb0 <__assert_fail@plt+0xf510>
   20efc:	strd	r4, [sp, #-16]!
   20f00:	str	r6, [sp, #8]
   20f04:	str	lr, [sp, #12]
   20f08:	mov	r5, r0
   20f0c:	cmp	r1, #0
   20f10:	ldrlt	r0, [r0, #60]	; 0x3c
   20f14:	blt	20f54 <__assert_fail@plt+0xf5b4>
   20f18:	ldr	r3, [r5, #48]	; 0x30
   20f1c:	cmp	r3, r1
   20f20:	beq	20f64 <__assert_fail@plt+0xf5c4>
   20f24:	ldr	r3, [r5, #80]	; 0x50
   20f28:	cmp	r3, #1
   20f2c:	ble	20fcc <__assert_fail@plt+0xf62c>
   20f30:	ldr	r3, [r5, #8]
   20f34:	add	r3, r3, r1, lsl #2
   20f38:	ldr	r4, [r3], #-4
   20f3c:	cmn	r4, #1
   20f40:	bne	20f78 <__assert_fail@plt+0xf5d8>
   20f44:	sub	r1, r1, #1
   20f48:	cmn	r1, #1
   20f4c:	bne	20f38 <__assert_fail@plt+0xf598>
   20f50:	ldr	r0, [r5, #60]	; 0x3c
   20f54:	ldrd	r4, [sp]
   20f58:	ldr	r6, [sp, #8]
   20f5c:	add	sp, sp, #12
   20f60:	pop	{pc}		; (ldr pc, [sp], #4)
   20f64:	and	r2, r2, #2
   20f68:	cmp	r2, #0
   20f6c:	movne	r0, #8
   20f70:	moveq	r0, #10
   20f74:	b	20f54 <__assert_fail@plt+0xf5b4>
   20f78:	ldrb	r3, [r5, #78]	; 0x4e
   20f7c:	cmp	r3, #0
   20f80:	bne	20fa4 <__assert_fail@plt+0xf604>
   20f84:	cmp	r4, #10
   20f88:	movne	r0, #0
   20f8c:	bne	20f54 <__assert_fail@plt+0xf5b4>
   20f90:	ldrb	r3, [r5, #77]	; 0x4d
   20f94:	cmp	r3, #0
   20f98:	moveq	r0, #0
   20f9c:	movne	r0, #2
   20fa0:	b	20f54 <__assert_fail@plt+0xf5b4>
   20fa4:	mov	r0, r4
   20fa8:	bl	117e4 <iswalnum@plt>
   20fac:	adds	r3, r0, #0
   20fb0:	movne	r3, #1
   20fb4:	cmp	r4, #95	; 0x5f
   20fb8:	orreq	r3, r3, #1
   20fbc:	cmp	r3, #0
   20fc0:	movne	r0, #1
   20fc4:	bne	20f54 <__assert_fail@plt+0xf5b4>
   20fc8:	b	20f84 <__assert_fail@plt+0xf5e4>
   20fcc:	ldr	r3, [r5, #4]
   20fd0:	ldrb	r3, [r3, r1]
   20fd4:	asr	r0, r3, #5
   20fd8:	ldr	r1, [r5, #68]	; 0x44
   20fdc:	and	r2, r3, #31
   20fe0:	ldr	r0, [r1, r0, lsl #2]
   20fe4:	lsr	r0, r0, r2
   20fe8:	ands	r0, r0, #1
   20fec:	bne	20f54 <__assert_fail@plt+0xf5b4>
   20ff0:	cmp	r3, #10
   20ff4:	bne	20f54 <__assert_fail@plt+0xf5b4>
   20ff8:	ldrb	r3, [r5, #77]	; 0x4d
   20ffc:	cmp	r3, #0
   21000:	movne	r0, #2
   21004:	b	20f54 <__assert_fail@plt+0xf5b4>
   21008:	str	r4, [sp, #-8]!
   2100c:	str	lr, [sp, #4]
   21010:	ldr	r3, [r0, #4]
   21014:	ldrb	ip, [r3, r2]
   21018:	ldrb	r3, [r1, #4]
   2101c:	sub	r3, r3, #1
   21020:	cmp	r3, #6
   21024:	ldrls	pc, [pc, r3, lsl #2]
   21028:	b	21150 <__assert_fail@plt+0xf7b0>
   2102c:	andeq	r1, r2, r8, asr #32
   21030:	andeq	r1, r2, r0, asr r1
   21034:	andeq	r1, r2, ip, asr r0
   21038:	andeq	r1, r2, r0, asr r1
   2103c:	ldrdeq	r1, [r2], -ip
   21040:	andeq	r1, r2, r0, asr r1
   21044:	ldrdeq	r1, [r2], -r0
   21048:	ldrb	r3, [r1]
   2104c:	cmp	r3, ip
   21050:	movne	r0, #0
   21054:	bne	21154 <__assert_fail@plt+0xf7b4>
   21058:	b	21078 <__assert_fail@plt+0xf6d8>
   2105c:	lsr	lr, ip, #5
   21060:	ldr	r3, [r1]
   21064:	and	ip, ip, #31
   21068:	ldr	r3, [r3, lr, lsl #2]
   2106c:	lsr	ip, r3, ip
   21070:	tst	ip, #1
   21074:	beq	21160 <__assert_fail@plt+0xf7c0>
   21078:	ldr	ip, [r1, #4]
   2107c:	mov	r3, #65280	; 0xff00
   21080:	movt	r3, #3
   21084:	and	r3, r3, ip
   21088:	cmp	r3, #0
   2108c:	moveq	r0, #1
   21090:	beq	21154 <__assert_fail@plt+0xf7b4>
   21094:	mov	r3, r2
   21098:	mov	r4, r1
   2109c:	ldr	r2, [r0, #88]	; 0x58
   210a0:	mov	r1, r3
   210a4:	bl	20efc <__assert_fail@plt+0xf55c>
   210a8:	ldr	r3, [r4, #4]
   210ac:	ubfx	r3, r3, #8, #10
   210b0:	tst	r3, #4
   210b4:	beq	2111c <__assert_fail@plt+0xf77c>
   210b8:	tst	r0, #1
   210bc:	beq	21168 <__assert_fail@plt+0xf7c8>
   210c0:	tst	r3, #8
   210c4:	beq	2112c <__assert_fail@plt+0xf78c>
   210c8:	mov	r0, #0
   210cc:	b	21154 <__assert_fail@plt+0xf7b4>
   210d0:	tst	ip, #128	; 0x80
   210d4:	movne	r0, #0
   210d8:	bne	21154 <__assert_fail@plt+0xf7b4>
   210dc:	cmp	ip, #10
   210e0:	beq	21104 <__assert_fail@plt+0xf764>
   210e4:	cmp	ip, #0
   210e8:	bne	21078 <__assert_fail@plt+0xf6d8>
   210ec:	ldr	r3, [r0, #84]	; 0x54
   210f0:	ldr	r3, [r3, #128]	; 0x80
   210f4:	tst	r3, #128	; 0x80
   210f8:	movne	r0, #0
   210fc:	beq	21078 <__assert_fail@plt+0xf6d8>
   21100:	b	21154 <__assert_fail@plt+0xf7b4>
   21104:	ldr	r3, [r0, #84]	; 0x54
   21108:	ldr	r3, [r3, #128]	; 0x80
   2110c:	tst	r3, #64	; 0x40
   21110:	bne	21078 <__assert_fail@plt+0xf6d8>
   21114:	mov	r0, #0
   21118:	b	21154 <__assert_fail@plt+0xf7b4>
   2111c:	tst	r3, #8
   21120:	beq	2112c <__assert_fail@plt+0xf78c>
   21124:	tst	r0, #1
   21128:	bne	21170 <__assert_fail@plt+0xf7d0>
   2112c:	tst	r3, #32
   21130:	beq	21140 <__assert_fail@plt+0xf7a0>
   21134:	tst	r0, #2
   21138:	moveq	r0, #0
   2113c:	beq	21154 <__assert_fail@plt+0xf7b4>
   21140:	tst	r3, #128	; 0x80
   21144:	ubfxne	r0, r0, #3, #1
   21148:	moveq	r0, #1
   2114c:	b	21154 <__assert_fail@plt+0xf7b4>
   21150:	mov	r0, #0
   21154:	ldr	r4, [sp]
   21158:	add	sp, sp, #4
   2115c:	pop	{pc}		; (ldr pc, [sp], #4)
   21160:	mov	r0, #0
   21164:	b	21154 <__assert_fail@plt+0xf7b4>
   21168:	mov	r0, #0
   2116c:	b	21154 <__assert_fail@plt+0xf7b4>
   21170:	mov	r0, #0
   21174:	b	21154 <__assert_fail@plt+0xf7b4>
   21178:	strd	r4, [sp, #-36]!	; 0xffffffdc
   2117c:	strd	r6, [sp, #8]
   21180:	strd	r8, [sp, #16]
   21184:	strd	sl, [sp, #24]
   21188:	str	lr, [sp, #32]
   2118c:	sub	sp, sp, #4
   21190:	ldr	r7, [r0, #84]	; 0x54
   21194:	ldr	r3, [r1, #4]
   21198:	cmp	r3, #0
   2119c:	ble	2129c <__assert_fail@plt+0xf8fc>
   211a0:	mov	r9, r2
   211a4:	mov	r6, r1
   211a8:	mov	r8, r0
   211ac:	mov	r4, #0
   211b0:	b	211e4 <__assert_fail@plt+0xf844>
   211b4:	lsl	sl, r1, #1
   211b8:	lsl	r1, r1, #3
   211bc:	bl	1cb14 <__assert_fail@plt+0xb174>
   211c0:	cmp	r0, #0
   211c4:	beq	212a4 <__assert_fail@plt+0xf904>
   211c8:	str	r0, [r8, #132]	; 0x84
   211cc:	str	sl, [r8, #128]	; 0x80
   211d0:	b	21230 <__assert_fail@plt+0xf890>
   211d4:	add	r4, r4, #1
   211d8:	ldr	r3, [r6, #4]
   211dc:	cmp	r3, r4
   211e0:	ble	2127c <__assert_fail@plt+0xf8dc>
   211e4:	ldr	r3, [r6, #8]
   211e8:	ldr	r5, [r3, r4, lsl #2]
   211ec:	ldr	r3, [r7]
   211f0:	add	r2, r3, r5, lsl #3
   211f4:	ldrb	r2, [r2, #4]
   211f8:	cmp	r2, #8
   211fc:	bne	211d4 <__assert_fail@plt+0xf834>
   21200:	ldr	r3, [r3, r5, lsl #3]
   21204:	cmp	r3, #31
   21208:	bgt	211d4 <__assert_fail@plt+0xf834>
   2120c:	ldr	r2, [r7, #80]	; 0x50
   21210:	lsr	r3, r2, r3
   21214:	tst	r3, #1
   21218:	beq	211d4 <__assert_fail@plt+0xf834>
   2121c:	ldr	r0, [r8, #132]	; 0x84
   21220:	ldr	r1, [r8, #128]	; 0x80
   21224:	ldr	r3, [r8, #124]	; 0x7c
   21228:	cmp	r1, r3
   2122c:	beq	211b4 <__assert_fail@plt+0xf814>
   21230:	ldr	fp, [r8, #124]	; 0x7c
   21234:	ldr	sl, [r8, #132]	; 0x84
   21238:	mov	r1, #24
   2123c:	mov	r0, #1
   21240:	bl	1c5f8 <__assert_fail@plt+0xac58>
   21244:	str	r0, [sl, fp, lsl #2]
   21248:	ldr	r2, [r8, #124]	; 0x7c
   2124c:	ldr	r3, [r8, #132]	; 0x84
   21250:	ldr	r3, [r3, r2, lsl #2]
   21254:	cmp	r3, #0
   21258:	beq	212a4 <__assert_fail@plt+0xf904>
   2125c:	str	r5, [r3, #4]
   21260:	ldr	r2, [r8, #132]	; 0x84
   21264:	ldr	r3, [r8, #124]	; 0x7c
   21268:	add	r1, r3, #1
   2126c:	str	r1, [r8, #124]	; 0x7c
   21270:	ldr	r3, [r2, r3, lsl #2]
   21274:	str	r9, [r3]
   21278:	b	211d4 <__assert_fail@plt+0xf834>
   2127c:	mov	r0, #0
   21280:	add	sp, sp, #4
   21284:	ldrd	r4, [sp]
   21288:	ldrd	r6, [sp, #8]
   2128c:	ldrd	r8, [sp, #16]
   21290:	ldrd	sl, [sp, #24]
   21294:	add	sp, sp, #32
   21298:	pop	{pc}		; (ldr pc, [sp], #4)
   2129c:	mov	r0, #0
   212a0:	b	21280 <__assert_fail@plt+0xf8e0>
   212a4:	mov	r0, #12
   212a8:	b	21280 <__assert_fail@plt+0xf8e0>
   212ac:	strd	r4, [sp, #-16]!
   212b0:	str	r6, [sp, #8]
   212b4:	str	lr, [sp, #12]
   212b8:	mov	r4, r0
   212bc:	mov	r5, r1
   212c0:	ldr	r6, [r0, #104]	; 0x68
   212c4:	ldr	r3, [r0, #36]	; 0x24
   212c8:	cmp	r3, r1
   212cc:	bgt	212dc <__assert_fail@plt+0xf93c>
   212d0:	ldr	r2, [r0, #48]	; 0x30
   212d4:	cmp	r3, r2
   212d8:	blt	212f4 <__assert_fail@plt+0xf954>
   212dc:	ldr	r3, [r4, #28]
   212e0:	cmp	r3, r5
   212e4:	bgt	21308 <__assert_fail@plt+0xf968>
   212e8:	ldr	r2, [r4, #48]	; 0x30
   212ec:	cmp	r3, r2
   212f0:	bge	21308 <__assert_fail@plt+0xf968>
   212f4:	add	r1, r5, #1
   212f8:	mov	r0, r4
   212fc:	bl	1eb20 <__assert_fail@plt+0xd180>
   21300:	cmp	r0, #0
   21304:	bne	21338 <__assert_fail@plt+0xf998>
   21308:	cmp	r6, r5
   2130c:	movge	r0, #0
   21310:	bge	21338 <__assert_fail@plt+0xf998>
   21314:	sub	r2, r5, r6
   21318:	add	r6, r6, #1
   2131c:	ldr	r0, [r4, #100]	; 0x64
   21320:	lsl	r2, r2, #2
   21324:	mov	r1, #0
   21328:	add	r0, r0, r6, lsl #2
   2132c:	bl	11814 <memset@plt>
   21330:	str	r5, [r4, #104]	; 0x68
   21334:	mov	r0, #0
   21338:	ldrd	r4, [sp]
   2133c:	ldr	r6, [sp, #8]
   21340:	add	sp, sp, #12
   21344:	pop	{pc}		; (ldr pc, [sp], #4)
   21348:	strd	r4, [sp, #-36]!	; 0xffffffdc
   2134c:	strd	r6, [sp, #8]
   21350:	strd	r8, [sp, #16]
   21354:	strd	sl, [sp, #24]
   21358:	str	lr, [sp, #32]
   2135c:	sub	sp, sp, #28
   21360:	mov	r5, r0
   21364:	mov	r6, r1
   21368:	mov	r7, r2
   2136c:	mov	r8, r3
   21370:	ldr	r1, [r1, #4]
   21374:	add	r0, sp, #12
   21378:	bl	1de1c <__assert_fail@plt+0xc47c>
   2137c:	subs	r9, r0, #0
   21380:	bne	21458 <__assert_fail@plt+0xfab8>
   21384:	ldr	r3, [r6, #4]
   21388:	cmp	r3, #0
   2138c:	ble	21478 <__assert_fail@plt+0xfad8>
   21390:	mov	r4, r9
   21394:	b	213f8 <__assert_fail@plt+0xfa58>
   21398:	add	r0, r0, #1
   2139c:	cmp	lr, r0
   213a0:	beq	2142c <__assert_fail@plt+0xfa8c>
   213a4:	ldr	ip, [r3, #4]!
   213a8:	add	fp, sl, ip, lsl #3
   213ac:	ldrb	fp, [fp, #4]
   213b0:	cmp	r8, fp
   213b4:	bne	21398 <__assert_fail@plt+0xf9f8>
   213b8:	ldr	fp, [sl, ip, lsl #3]
   213bc:	cmp	r7, fp
   213c0:	bne	21398 <__assert_fail@plt+0xf9f8>
   213c4:	cmn	ip, #1
   213c8:	beq	2142c <__assert_fail@plt+0xfa8c>
   213cc:	str	r8, [sp]
   213d0:	mov	r3, r7
   213d4:	add	r1, sp, #12
   213d8:	mov	r0, r5
   213dc:	bl	209d8 <__assert_fail@plt+0xf038>
   213e0:	subs	sl, r0, #0
   213e4:	bne	2144c <__assert_fail@plt+0xfaac>
   213e8:	add	r4, r4, #1
   213ec:	ldr	r3, [r6, #4]
   213f0:	cmp	r3, r4
   213f4:	ble	21478 <__assert_fail@plt+0xfad8>
   213f8:	ldr	r3, [r6, #8]
   213fc:	ldr	r2, [r3, r4, lsl #2]
   21400:	add	r3, r2, r2, lsl #1
   21404:	ldr	r1, [r5, #24]
   21408:	add	r1, r1, r3, lsl #2
   2140c:	ldr	lr, [r1, #4]
   21410:	cmp	lr, #0
   21414:	ble	2142c <__assert_fail@plt+0xfa8c>
   21418:	ldr	sl, [r5]
   2141c:	ldr	r3, [r1, #8]
   21420:	sub	r3, r3, #4
   21424:	mov	r0, r9
   21428:	b	213a4 <__assert_fail@plt+0xfa04>
   2142c:	add	r0, sp, #12
   21430:	bl	20afc <__assert_fail@plt+0xf15c>
   21434:	subs	sl, r0, #0
   21438:	beq	213e8 <__assert_fail@plt+0xfa48>
   2143c:	ldr	r0, [sp, #20]
   21440:	bl	1c948 <__assert_fail@plt+0xafa8>
   21444:	mov	r9, sl
   21448:	b	21458 <__assert_fail@plt+0xfab8>
   2144c:	ldr	r0, [sp, #20]
   21450:	bl	1c948 <__assert_fail@plt+0xafa8>
   21454:	mov	r9, sl
   21458:	mov	r0, r9
   2145c:	add	sp, sp, #28
   21460:	ldrd	r4, [sp]
   21464:	ldrd	r6, [sp, #8]
   21468:	ldrd	r8, [sp, #16]
   2146c:	ldrd	sl, [sp, #24]
   21470:	add	sp, sp, #32
   21474:	pop	{pc}		; (ldr pc, [sp], #4)
   21478:	ldr	r0, [r6, #8]
   2147c:	bl	1c948 <__assert_fail@plt+0xafa8>
   21480:	ldrd	r2, [sp, #12]
   21484:	strd	r2, [r6]
   21488:	ldr	r3, [sp, #20]
   2148c:	str	r3, [r6, #8]
   21490:	b	21458 <__assert_fail@plt+0xfab8>
   21494:	strd	r4, [sp, #-36]!	; 0xffffffdc
   21498:	strd	r6, [sp, #8]
   2149c:	strd	r8, [sp, #16]
   214a0:	strd	sl, [sp, #24]
   214a4:	str	lr, [sp, #32]
   214a8:	sub	sp, sp, #14464	; 0x3880
   214ac:	sub	sp, sp, #44	; 0x2c
   214b0:	str	r1, [sp, #16]
   214b4:	mov	r3, #0
   214b8:	str	r3, [r1, #44]	; 0x2c
   214bc:	str	r3, [r1, #48]	; 0x30
   214c0:	mov	r2, #0
   214c4:	mov	r3, #0
   214c8:	strd	r2, [sp, #24]
   214cc:	strd	r2, [sp, #32]
   214d0:	strd	r2, [sp, #40]	; 0x28
   214d4:	strd	r2, [sp, #48]	; 0x30
   214d8:	ldr	r3, [r1, #8]
   214dc:	cmp	r3, #0
   214e0:	ble	21b30 <__assert_fail@plt+0x10190>
   214e4:	mov	r9, r1
   214e8:	mov	sl, #0
   214ec:	str	sl, [sp, #4]
   214f0:	str	r0, [sp, #8]
   214f4:	b	2196c <__assert_fail@plt+0xffcc>
   214f8:	ldrb	r3, [r3, r1, lsl #3]
   214fc:	asr	r0, r3, #5
   21500:	and	r3, r3, #31
   21504:	add	r1, sp, #24
   21508:	ldr	r1, [r1, r0, lsl #2]
   2150c:	mov	ip, #1
   21510:	orr	r3, r1, ip, lsl r3
   21514:	add	r1, sp, #24
   21518:	str	r3, [r1, r0, lsl #2]
   2151c:	cmp	r2, #0
   21520:	beq	21600 <__assert_fail@plt+0xfc60>
   21524:	tst	r2, #32
   21528:	bne	216cc <__assert_fail@plt+0xfd2c>
   2152c:	tst	r2, #128	; 0x80
   21530:	bne	216fc <__assert_fail@plt+0xfd5c>
   21534:	tst	r2, #4
   21538:	beq	2159c <__assert_fail@plt+0xfbfc>
   2153c:	cmp	r7, #1
   21540:	beq	21718 <__assert_fail@plt+0xfd78>
   21544:	ldr	r1, [sp, #8]
   21548:	ldr	r3, [r1, #92]	; 0x5c
   2154c:	cmp	r3, #1
   21550:	ble	21740 <__assert_fail@plt+0xfda0>
   21554:	add	ip, sp, #20
   21558:	add	r0, r1, #96	; 0x60
   2155c:	ldr	lr, [r1, #60]	; 0x3c
   21560:	sub	lr, lr, #4
   21564:	add	r4, r1, #128	; 0x80
   21568:	mov	r1, #0
   2156c:	ldr	r5, [r0], #4
   21570:	ldr	r3, [lr, #4]!
   21574:	mvn	r3, r3
   21578:	orr	r3, r3, r5
   2157c:	ldr	r5, [ip, #4]!
   21580:	and	r3, r3, r5
   21584:	str	r3, [ip]
   21588:	orr	r1, r1, r3
   2158c:	cmp	r0, r4
   21590:	bne	2156c <__assert_fail@plt+0xfbcc>
   21594:	cmp	r1, #0
   21598:	beq	21950 <__assert_fail@plt+0xffb0>
   2159c:	tst	r2, #8
   215a0:	beq	21600 <__assert_fail@plt+0xfc60>
   215a4:	cmp	r7, #1
   215a8:	beq	21774 <__assert_fail@plt+0xfdd4>
   215ac:	ldr	r2, [sp, #8]
   215b0:	ldr	r3, [r2, #92]	; 0x5c
   215b4:	cmp	r3, #1
   215b8:	ble	2179c <__assert_fail@plt+0xfdfc>
   215bc:	add	r0, sp, #20
   215c0:	add	r1, r2, #96	; 0x60
   215c4:	ldr	ip, [r2, #60]	; 0x3c
   215c8:	sub	ip, ip, #4
   215cc:	add	lr, r2, #128	; 0x80
   215d0:	mov	r2, #0
   215d4:	ldr	r3, [r1], #4
   215d8:	ldr	r4, [ip, #4]!
   215dc:	and	r4, r4, r3
   215e0:	ldr	r3, [r0, #4]!
   215e4:	bic	r3, r3, r4
   215e8:	str	r3, [r0]
   215ec:	orr	r2, r2, r3
   215f0:	cmp	r1, lr
   215f4:	bne	215d4 <__assert_fail@plt+0xfc34>
   215f8:	cmp	r2, #0
   215fc:	beq	21950 <__assert_fail@plt+0xffb0>
   21600:	cmp	sl, #0
   21604:	addgt	r4, sp, #148	; 0x94
   21608:	movgt	r5, #0
   2160c:	bgt	2181c <__assert_fail@plt+0xfe7c>
   21610:	mov	r5, #0
   21614:	b	21948 <__assert_fail@plt+0xffa8>
   21618:	ldr	lr, [r3, r1, lsl #3]
   2161c:	add	r0, sp, #20
   21620:	sub	r1, lr, #4
   21624:	add	lr, lr, #28
   21628:	ldr	r3, [r0, #4]!
   2162c:	ldr	ip, [r1, #4]!
   21630:	orr	r3, r3, ip
   21634:	str	r3, [r0]
   21638:	cmp	r1, lr
   2163c:	bne	21628 <__assert_fail@plt+0xfc88>
   21640:	b	2151c <__assert_fail@plt+0xfb7c>
   21644:	ldr	r1, [sp, #8]
   21648:	ldr	r3, [r1, #92]	; 0x5c
   2164c:	cmp	r3, #1
   21650:	ble	21680 <__assert_fail@plt+0xfce0>
   21654:	ldr	lr, [r1, #60]	; 0x3c
   21658:	add	r0, sp, #20
   2165c:	sub	r1, lr, #4
   21660:	add	lr, lr, #28
   21664:	ldr	r3, [r0, #4]!
   21668:	ldr	ip, [r1, #4]!
   2166c:	orr	r3, r3, ip
   21670:	str	r3, [r0]
   21674:	cmp	r1, lr
   21678:	bne	21664 <__assert_fail@plt+0xfcc4>
   2167c:	b	21698 <__assert_fail@plt+0xfcf8>
   21680:	mvn	r0, #0
   21684:	mvn	r1, #0
   21688:	strd	r0, [sp, #24]
   2168c:	strd	r0, [sp, #32]
   21690:	strd	r0, [sp, #40]	; 0x28
   21694:	strd	r0, [sp, #48]	; 0x30
   21698:	ldr	r3, [sp, #8]
   2169c:	ldr	r3, [r3, #128]	; 0x80
   216a0:	tst	r3, #64	; 0x40
   216a4:	bne	216b4 <__assert_fail@plt+0xfd14>
   216a8:	ldr	r1, [sp, #24]
   216ac:	bic	r1, r1, #1024	; 0x400
   216b0:	str	r1, [sp, #24]
   216b4:	tst	r3, #128	; 0x80
   216b8:	beq	2151c <__assert_fail@plt+0xfb7c>
   216bc:	ldr	r3, [sp, #24]
   216c0:	bic	r3, r3, #1
   216c4:	str	r3, [sp, #24]
   216c8:	b	2151c <__assert_fail@plt+0xfb7c>
   216cc:	ldr	r3, [sp, #24]
   216d0:	mov	r0, #0
   216d4:	mov	r1, #0
   216d8:	strd	r0, [sp, #24]
   216dc:	strd	r0, [sp, #32]
   216e0:	strd	r0, [sp, #40]	; 0x28
   216e4:	strd	r0, [sp, #48]	; 0x30
   216e8:	tst	r3, #1024	; 0x400
   216ec:	beq	21950 <__assert_fail@plt+0xffb0>
   216f0:	mov	r3, #1024	; 0x400
   216f4:	str	r3, [sp, #24]
   216f8:	b	2152c <__assert_fail@plt+0xfb8c>
   216fc:	mov	r2, #0
   21700:	mov	r3, #0
   21704:	strd	r2, [sp, #24]
   21708:	strd	r2, [sp, #32]
   2170c:	strd	r2, [sp, #40]	; 0x28
   21710:	strd	r2, [sp, #48]	; 0x30
   21714:	b	21950 <__assert_fail@plt+0xffb0>
   21718:	ldrb	r3, [r8, #6]
   2171c:	tst	r3, #64	; 0x40
   21720:	bne	21544 <__assert_fail@plt+0xfba4>
   21724:	mov	r2, #0
   21728:	mov	r3, #0
   2172c:	strd	r2, [sp, #24]
   21730:	strd	r2, [sp, #32]
   21734:	strd	r2, [sp, #40]	; 0x28
   21738:	strd	r2, [sp, #48]	; 0x30
   2173c:	b	21950 <__assert_fail@plt+0xffb0>
   21740:	add	ip, sp, #20
   21744:	ldr	r3, [sp, #8]
   21748:	add	r0, r3, #96	; 0x60
   2174c:	add	lr, r3, #128	; 0x80
   21750:	mov	r1, #0
   21754:	ldr	r3, [r0], #4
   21758:	ldr	r4, [ip, #4]!
   2175c:	and	r3, r3, r4
   21760:	str	r3, [ip]
   21764:	orr	r1, r1, r3
   21768:	cmp	r0, lr
   2176c:	bne	21754 <__assert_fail@plt+0xfdb4>
   21770:	b	21594 <__assert_fail@plt+0xfbf4>
   21774:	ldrb	r3, [r8, #6]
   21778:	tst	r3, #64	; 0x40
   2177c:	beq	215ac <__assert_fail@plt+0xfc0c>
   21780:	mov	r2, #0
   21784:	mov	r3, #0
   21788:	strd	r2, [sp, #24]
   2178c:	strd	r2, [sp, #32]
   21790:	strd	r2, [sp, #40]	; 0x28
   21794:	strd	r2, [sp, #48]	; 0x30
   21798:	b	21950 <__assert_fail@plt+0xffb0>
   2179c:	add	r0, sp, #20
   217a0:	ldr	r3, [sp, #8]
   217a4:	add	r1, r3, #96	; 0x60
   217a8:	add	lr, r3, #128	; 0x80
   217ac:	mov	r2, #0
   217b0:	ldr	ip, [r1], #4
   217b4:	ldr	r3, [r0, #4]!
   217b8:	bic	r3, r3, ip
   217bc:	str	r3, [r0]
   217c0:	orr	r2, r2, r3
   217c4:	cmp	r1, lr
   217c8:	bne	217b0 <__assert_fail@plt+0xfe10>
   217cc:	b	215f8 <__assert_fail@plt+0xfc58>
   217d0:	add	r2, sp, #20
   217d4:	sub	r1, r4, #32
   217d8:	add	r6, sp, #52	; 0x34
   217dc:	mov	ip, r1
   217e0:	mov	lr, r2
   217e4:	mov	r0, #0
   217e8:	ldr	r3, [lr, #4]!
   217ec:	ldr	fp, [ip, #4]!
   217f0:	and	r3, r3, fp
   217f4:	str	r3, [r6, #4]!
   217f8:	orr	r0, r0, r3
   217fc:	cmp	ip, r4
   21800:	bne	217e8 <__assert_fail@plt+0xfe48>
   21804:	cmp	r0, #0
   21808:	bne	2185c <__assert_fail@plt+0xfebc>
   2180c:	add	r5, r5, #1
   21810:	add	r4, r4, #32
   21814:	cmp	r5, sl
   21818:	bge	21948 <__assert_fail@plt+0xffa8>
   2181c:	cmp	r7, #1
   21820:	bne	217d0 <__assert_fail@plt+0xfe30>
   21824:	ldrb	r2, [r8]
   21828:	asr	r1, r2, #5
   2182c:	lsl	r3, r5, #5
   21830:	add	r3, r3, r1, lsl #2
   21834:	add	r1, sp, #14464	; 0x3880
   21838:	add	r1, r1, #40	; 0x28
   2183c:	add	r3, r1, r3
   21840:	sub	r3, r3, #14336	; 0x3800
   21844:	and	r2, r2, #31
   21848:	ldr	r3, [r3, #-48]	; 0xffffffd0
   2184c:	lsr	r2, r3, r2
   21850:	tst	r2, #1
   21854:	beq	2180c <__assert_fail@plt+0xfe6c>
   21858:	b	217d0 <__assert_fail@plt+0xfe30>
   2185c:	add	fp, sp, #84	; 0x54
   21860:	mov	r6, #0
   21864:	mov	lr, r6
   21868:	ldr	r3, [r2, #4]!
   2186c:	ldr	r0, [r1, #4]!
   21870:	bic	ip, r0, r3
   21874:	str	ip, [fp, #4]!
   21878:	orr	lr, lr, ip
   2187c:	bic	r3, r3, r0
   21880:	str	r3, [r2]
   21884:	orr	r6, r6, r3
   21888:	cmp	r1, r4
   2188c:	bne	21868 <__assert_fail@plt+0xfec8>
   21890:	cmp	lr, #0
   21894:	beq	21918 <__assert_fail@plt+0xff78>
   21898:	add	r3, sp, #14464	; 0x3880
   2189c:	add	r3, r3, #40	; 0x28
   218a0:	add	ip, r3, sl, lsl #5
   218a4:	sub	ip, ip, #14336	; 0x3800
   218a8:	add	r1, sp, #88	; 0x58
   218ac:	ldrd	r2, [r1]
   218b0:	strd	r2, [ip, #-48]	; 0xffffffd0
   218b4:	ldrd	r2, [r1, #8]
   218b8:	strd	r2, [ip, #-40]	; 0xffffffd8
   218bc:	ldrd	r2, [r1, #16]
   218c0:	strd	r2, [ip, #-32]	; 0xffffffe0
   218c4:	ldrd	r2, [r1, #24]
   218c8:	strd	r2, [ip, #-24]	; 0xffffffe8
   218cc:	add	r1, sp, #56	; 0x38
   218d0:	ldrd	r2, [r1]
   218d4:	strd	r2, [r4, #-28]	; 0xffffffe4
   218d8:	ldrd	r2, [r1, #8]
   218dc:	strd	r2, [r4, #-20]	; 0xffffffec
   218e0:	ldrd	r2, [r1, #16]
   218e4:	strd	r2, [r4, #-12]
   218e8:	ldrd	r2, [r1, #24]
   218ec:	strd	r2, [r4, #-4]
   218f0:	add	r1, r5, r5, lsl #1
   218f4:	add	r0, sl, sl, lsl #1
   218f8:	add	r3, sp, #8256	; 0x2040
   218fc:	add	r3, r3, #56	; 0x38
   21900:	add	r1, r3, r1, lsl #2
   21904:	add	r0, r3, r0, lsl #2
   21908:	bl	1e698 <__assert_fail@plt+0xccf8>
   2190c:	cmp	r0, #0
   21910:	bne	21a74 <__assert_fail@plt+0x100d4>
   21914:	add	sl, sl, #1
   21918:	ldr	r3, [r9, #12]
   2191c:	add	r0, r5, r5, lsl #1
   21920:	ldr	r2, [sp, #12]
   21924:	ldr	r1, [r3, r2]
   21928:	add	r3, sp, #8256	; 0x2040
   2192c:	add	r3, r3, #56	; 0x38
   21930:	add	r0, r3, r0, lsl #2
   21934:	bl	20564 <__assert_fail@plt+0xebc4>
   21938:	cmp	r0, #0
   2193c:	beq	21a74 <__assert_fail@plt+0x100d4>
   21940:	cmp	r6, #0
   21944:	bne	2180c <__assert_fail@plt+0xfe6c>
   21948:	cmp	sl, r5
   2194c:	beq	219fc <__assert_fail@plt+0x1005c>
   21950:	ldr	r3, [sp, #4]
   21954:	add	r3, r3, #1
   21958:	mov	r2, r3
   2195c:	str	r3, [sp, #4]
   21960:	ldr	r3, [r9, #8]
   21964:	cmp	r2, r3
   21968:	bge	21aa8 <__assert_fail@plt+0x10108>
   2196c:	ldr	r2, [sp, #4]
   21970:	lsl	r3, r2, #2
   21974:	str	r3, [sp, #12]
   21978:	ldr	r3, [r9, #12]
   2197c:	ldr	r1, [r3, r2, lsl #2]
   21980:	ldr	r3, [sp, #8]
   21984:	ldr	r3, [r3]
   21988:	add	r8, r3, r1, lsl #3
   2198c:	ldrb	r7, [r8, #4]
   21990:	ldr	r2, [r8, #4]
   21994:	ubfx	r2, r2, #8, #10
   21998:	cmp	r7, #1
   2199c:	beq	214f8 <__assert_fail@plt+0xfb58>
   219a0:	cmp	r7, #3
   219a4:	beq	21618 <__assert_fail@plt+0xfc78>
   219a8:	cmp	r7, #5
   219ac:	beq	21644 <__assert_fail@plt+0xfca4>
   219b0:	cmp	r7, #7
   219b4:	bne	21950 <__assert_fail@plt+0xffb0>
   219b8:	mvn	r0, #0
   219bc:	mvn	r1, #0
   219c0:	strd	r0, [sp, #24]
   219c4:	strd	r0, [sp, #32]
   219c8:	ldr	r3, [sp, #8]
   219cc:	ldr	r3, [r3, #128]	; 0x80
   219d0:	tst	r3, #64	; 0x40
   219d4:	bne	219e4 <__assert_fail@plt+0x10044>
   219d8:	ldr	r1, [sp, #24]
   219dc:	bic	r1, r1, #1024	; 0x400
   219e0:	str	r1, [sp, #24]
   219e4:	tst	r3, #128	; 0x80
   219e8:	beq	2151c <__assert_fail@plt+0xfb7c>
   219ec:	ldr	r3, [sp, #24]
   219f0:	bic	r3, r3, #1
   219f4:	str	r3, [sp, #24]
   219f8:	b	2151c <__assert_fail@plt+0xfb7c>
   219fc:	add	r3, sp, #14464	; 0x3880
   21a00:	add	r3, r3, #40	; 0x28
   21a04:	add	r1, r3, sl, lsl #5
   21a08:	sub	r1, r1, #14336	; 0x3800
   21a0c:	ldrd	r2, [sp, #24]
   21a10:	strd	r2, [r1, #-48]	; 0xffffffd0
   21a14:	ldrd	r2, [sp, #32]
   21a18:	strd	r2, [r1, #-40]	; 0xffffffd8
   21a1c:	ldrd	r2, [sp, #40]	; 0x28
   21a20:	strd	r2, [r1, #-32]	; 0xffffffe0
   21a24:	ldrd	r2, [sp, #48]	; 0x30
   21a28:	strd	r2, [r1, #-24]	; 0xffffffe8
   21a2c:	ldr	r3, [r9, #12]
   21a30:	add	r0, sl, sl, lsl #1
   21a34:	ldr	r2, [sp, #12]
   21a38:	ldr	r1, [r3, r2]
   21a3c:	add	r3, sp, #8256	; 0x2040
   21a40:	add	r3, r3, #56	; 0x38
   21a44:	add	r0, r3, r0, lsl #2
   21a48:	bl	1ddc4 <__assert_fail@plt+0xc424>
   21a4c:	cmp	r0, #0
   21a50:	bne	21a74 <__assert_fail@plt+0x100d4>
   21a54:	add	sl, sl, #1
   21a58:	mov	r2, #0
   21a5c:	mov	r3, #0
   21a60:	strd	r2, [sp, #24]
   21a64:	strd	r2, [sp, #32]
   21a68:	strd	r2, [sp, #40]	; 0x28
   21a6c:	strd	r2, [sp, #48]	; 0x30
   21a70:	b	21950 <__assert_fail@plt+0xffb0>
   21a74:	cmp	sl, #0
   21a78:	ble	21aa0 <__assert_fail@plt+0x10100>
   21a7c:	add	r4, sp, #8256	; 0x2040
   21a80:	add	r4, r4, #56	; 0x38
   21a84:	add	r5, sl, sl, lsl #1
   21a88:	add	r5, r4, r5, lsl #2
   21a8c:	ldr	r0, [r4, #8]
   21a90:	bl	1c948 <__assert_fail@plt+0xafa8>
   21a94:	add	r4, r4, #12
   21a98:	cmp	r4, r5
   21a9c:	bne	21a8c <__assert_fail@plt+0x100ec>
   21aa0:	mov	r0, #0
   21aa4:	b	21bdc <__assert_fail@plt+0x1023c>
   21aa8:	ldr	r7, [sp, #8]
   21aac:	cmp	sl, #0
   21ab0:	ble	21b2c <__assert_fail@plt+0x1018c>
   21ab4:	add	r1, sl, #1
   21ab8:	add	r0, sp, #11392	; 0x2c80
   21abc:	add	r0, r0, #24
   21ac0:	bl	1de1c <__assert_fail@plt+0xc47c>
   21ac4:	str	r0, [sp, #4]
   21ac8:	add	r2, sp, #14464	; 0x3880
   21acc:	add	r2, r2, #36	; 0x24
   21ad0:	str	r0, [r2]
   21ad4:	cmp	r0, #0
   21ad8:	bne	21ba4 <__assert_fail@plt+0x10204>
   21adc:	add	r3, sp, #11328	; 0x2c40
   21ae0:	add	r3, r3, #56	; 0x38
   21ae4:	mov	r0, #0
   21ae8:	mov	r1, #0
   21aec:	strd	r0, [r3]
   21af0:	strd	r0, [r3, #8]
   21af4:	strd	r0, [r3, #16]
   21af8:	strd	r0, [r3, #24]
   21afc:	add	r8, sp, #8256	; 0x2040
   21b00:	add	r8, r8, #56	; 0x38
   21b04:	str	r8, [sp, #20]
   21b08:	add	r3, sp, #120	; 0x78
   21b0c:	str	r3, [sp, #12]
   21b10:	add	r6, sp, #148	; 0x94
   21b14:	add	fp, sp, #13440	; 0x3480
   21b18:	add	fp, fp, #36	; 0x24
   21b1c:	ldr	r9, [sp, #4]
   21b20:	mov	r3, #0
   21b24:	str	r3, [sp, #8]
   21b28:	b	21c88 <__assert_fail@plt+0x102e8>
   21b2c:	bne	21f9c <__assert_fail@plt+0x105fc>
   21b30:	mov	r1, #256	; 0x100
   21b34:	mov	r0, #4
   21b38:	bl	1c5f8 <__assert_fail@plt+0xac58>
   21b3c:	ldr	r3, [sp, #16]
   21b40:	str	r0, [r3, #44]	; 0x2c
   21b44:	adds	r0, r0, #0
   21b48:	movne	r0, #1
   21b4c:	b	21bdc <__assert_fail@plt+0x1023c>
   21b50:	add	r4, r4, #1
   21b54:	ldr	r3, [r5, #4]
   21b58:	cmp	r3, r4
   21b5c:	ble	21bfc <__assert_fail@plt+0x1025c>
   21b60:	ldr	r3, [r5, #8]
   21b64:	ldr	r2, [r3, r4, lsl #2]
   21b68:	ldr	r3, [r7, #12]
   21b6c:	ldr	r1, [r3, r2, lsl #2]
   21b70:	cmn	r1, #1
   21b74:	beq	21b50 <__assert_fail@plt+0x101b0>
   21b78:	add	r1, r1, r1, lsl #1
   21b7c:	ldr	r3, [r7, #24]
   21b80:	add	r1, r3, r1, lsl #2
   21b84:	add	r0, sp, #11392	; 0x2c80
   21b88:	add	r0, r0, #24
   21b8c:	bl	20afc <__assert_fail@plt+0xf15c>
   21b90:	add	r3, sp, #14464	; 0x3880
   21b94:	add	r3, r3, #36	; 0x24
   21b98:	str	r0, [r3]
   21b9c:	cmp	r0, #0
   21ba0:	beq	21b50 <__assert_fail@plt+0x101b0>
   21ba4:	add	r3, sp, #11392	; 0x2c80
   21ba8:	add	r3, r3, #32
   21bac:	ldr	r0, [r3]
   21bb0:	bl	1c948 <__assert_fail@plt+0xafa8>
   21bb4:	add	r4, sp, #8256	; 0x2040
   21bb8:	add	r4, r4, #56	; 0x38
   21bbc:	add	r5, sl, sl, lsl #1
   21bc0:	add	r5, r4, r5, lsl #2
   21bc4:	ldr	r0, [r4, #8]
   21bc8:	bl	1c948 <__assert_fail@plt+0xafa8>
   21bcc:	add	r4, r4, #12
   21bd0:	cmp	r5, r4
   21bd4:	bne	21bc4 <__assert_fail@plt+0x10224>
   21bd8:	mov	r0, #0
   21bdc:	add	sp, sp, #14464	; 0x3880
   21be0:	add	sp, sp, #44	; 0x2c
   21be4:	ldrd	r4, [sp]
   21be8:	ldrd	r6, [sp, #8]
   21bec:	ldrd	r8, [sp, #16]
   21bf0:	ldrd	sl, [sp, #24]
   21bf4:	add	sp, sp, #32
   21bf8:	pop	{pc}		; (ldr pc, [sp], #4)
   21bfc:	mov	r3, #0
   21c00:	add	r2, sp, #11392	; 0x2c80
   21c04:	add	r2, r2, #24
   21c08:	mov	r1, r7
   21c0c:	add	r0, sp, #14464	; 0x3880
   21c10:	add	r0, r0, #36	; 0x24
   21c14:	bl	1fb44 <__assert_fail@plt+0xe1a4>
   21c18:	mov	r4, r0
   21c1c:	str	r0, [fp], #4
   21c20:	cmp	r0, #0
   21c24:	beq	21cb0 <__assert_fail@plt+0x10310>
   21c28:	ldrsb	r3, [r4, #52]	; 0x34
   21c2c:	cmp	r3, #0
   21c30:	blt	21cc8 <__assert_fail@plt+0x10328>
   21c34:	add	r3, sp, #12416	; 0x3080
   21c38:	add	r3, r3, #36	; 0x24
   21c3c:	str	r4, [r3, r9, lsl #2]
   21c40:	add	r3, sp, #11392	; 0x2c80
   21c44:	add	r3, r3, #36	; 0x24
   21c48:	str	r4, [r3, r9, lsl #2]
   21c4c:	add	r4, sp, #11328	; 0x2c40
   21c50:	add	r4, r4, #52	; 0x34
   21c54:	sub	r1, r6, #32
   21c58:	mov	r2, r4
   21c5c:	ldr	r3, [r2, #4]!
   21c60:	ldr	r0, [r1, #4]!
   21c64:	orr	r3, r3, r0
   21c68:	str	r3, [r2]
   21c6c:	cmp	r6, r1
   21c70:	bne	21c5c <__assert_fail@plt+0x102bc>
   21c74:	add	r9, r9, #1
   21c78:	add	r8, r8, #12
   21c7c:	add	r6, r6, #32
   21c80:	cmp	r9, sl
   21c84:	beq	21d78 <__assert_fail@plt+0x103d8>
   21c88:	add	r3, sp, #11392	; 0x2c80
   21c8c:	add	r3, r3, #28
   21c90:	mov	r2, #0
   21c94:	str	r2, [r3]
   21c98:	mov	r5, r8
   21c9c:	ldr	r3, [r8, #4]
   21ca0:	cmp	r3, r2
   21ca4:	ble	21bfc <__assert_fail@plt+0x1025c>
   21ca8:	ldr	r4, [sp, #4]
   21cac:	b	21b60 <__assert_fail@plt+0x101c0>
   21cb0:	add	r3, sp, #14464	; 0x3880
   21cb4:	add	r3, r3, #36	; 0x24
   21cb8:	ldr	r3, [r3]
   21cbc:	cmp	r3, #0
   21cc0:	beq	21c28 <__assert_fail@plt+0x10288>
   21cc4:	b	21ba4 <__assert_fail@plt+0x10204>
   21cc8:	mov	r3, #1
   21ccc:	add	r2, sp, #11392	; 0x2c80
   21cd0:	add	r2, r2, #24
   21cd4:	mov	r1, r7
   21cd8:	add	r0, sp, #14464	; 0x3880
   21cdc:	add	r0, r0, #36	; 0x24
   21ce0:	bl	1fb44 <__assert_fail@plt+0xe1a4>
   21ce4:	mov	r5, r9
   21ce8:	add	r3, sp, #12416	; 0x3080
   21cec:	add	r3, r3, #36	; 0x24
   21cf0:	str	r0, [r3, r9, lsl #2]
   21cf4:	cmp	r0, #0
   21cf8:	beq	21d60 <__assert_fail@plt+0x103c0>
   21cfc:	cmp	r4, r0
   21d00:	beq	21d18 <__assert_fail@plt+0x10378>
   21d04:	ldr	r3, [r7, #92]	; 0x5c
   21d08:	cmp	r3, #2
   21d0c:	ldr	r3, [sp, #8]
   21d10:	movge	r3, #1
   21d14:	str	r3, [sp, #8]
   21d18:	mov	r3, #2
   21d1c:	add	r2, sp, #11392	; 0x2c80
   21d20:	add	r2, r2, #24
   21d24:	mov	r1, r7
   21d28:	add	r0, sp, #14464	; 0x3880
   21d2c:	add	r0, r0, #36	; 0x24
   21d30:	bl	1fb44 <__assert_fail@plt+0xe1a4>
   21d34:	add	r3, sp, #11392	; 0x2c80
   21d38:	add	r3, r3, #36	; 0x24
   21d3c:	str	r0, [r3, r5, lsl #2]
   21d40:	cmp	r0, #0
   21d44:	bne	21c4c <__assert_fail@plt+0x102ac>
   21d48:	add	r3, sp, #14464	; 0x3880
   21d4c:	add	r3, r3, #36	; 0x24
   21d50:	ldr	r3, [r3]
   21d54:	cmp	r3, #0
   21d58:	beq	21c4c <__assert_fail@plt+0x102ac>
   21d5c:	b	21ba4 <__assert_fail@plt+0x10204>
   21d60:	add	r3, sp, #14464	; 0x3880
   21d64:	add	r3, r3, #36	; 0x24
   21d68:	ldr	r3, [r3]
   21d6c:	cmp	r3, #0
   21d70:	beq	21d04 <__assert_fail@plt+0x10364>
   21d74:	b	21ba4 <__assert_fail@plt+0x10204>
   21d78:	ldr	r3, [sp, #8]
   21d7c:	cmp	r3, #0
   21d80:	bne	21ee4 <__assert_fail@plt+0x10544>
   21d84:	mov	r1, #256	; 0x100
   21d88:	mov	r0, #4
   21d8c:	bl	1c5f8 <__assert_fail@plt+0xac58>
   21d90:	mov	r9, r0
   21d94:	ldr	r3, [sp, #16]
   21d98:	str	r0, [r3, #44]	; 0x2c
   21d9c:	cmp	r0, #0
   21da0:	beq	21ba4 <__assert_fail@plt+0x10204>
   21da4:	mov	r5, r0
   21da8:	add	r7, r7, #96	; 0x60
   21dac:	add	r8, r0, #1024	; 0x400
   21db0:	ldr	r6, [sp, #12]
   21db4:	ldr	r3, [r4, #4]!
   21db8:	cmp	r3, #0
   21dbc:	beq	21de4 <__assert_fail@plt+0x10444>
   21dc0:	mov	r0, r5
   21dc4:	mov	r2, #1
   21dc8:	mov	ip, r6
   21dcc:	tst	r3, #1
   21dd0:	bne	21e98 <__assert_fail@plt+0x104f8>
   21dd4:	lsl	r2, r2, #1
   21dd8:	add	r0, r0, #4
   21ddc:	lsrs	r3, r3, #1
   21de0:	bne	21dcc <__assert_fail@plt+0x1042c>
   21de4:	add	r5, r5, #128	; 0x80
   21de8:	add	r7, r7, #4
   21dec:	add	r6, r6, #4
   21df0:	cmp	r8, r5
   21df4:	bne	21db4 <__assert_fail@plt+0x10414>
   21df8:	add	r3, sp, #11328	; 0x2c40
   21dfc:	add	r3, r3, #56	; 0x38
   21e00:	ldr	r3, [r3]
   21e04:	tst	r3, #1024	; 0x400
   21e08:	beq	21e60 <__assert_fail@plt+0x104c0>
   21e0c:	ldr	r3, [sp, #120]	; 0x78
   21e10:	tst	r3, #1024	; 0x400
   21e14:	bne	21e3c <__assert_fail@plt+0x1049c>
   21e18:	ldr	r2, [sp, #12]
   21e1c:	ldr	r3, [sp, #4]
   21e20:	add	r3, r3, #1
   21e24:	cmp	r3, sl
   21e28:	beq	21e60 <__assert_fail@plt+0x104c0>
   21e2c:	ldr	r1, [r2, #32]!
   21e30:	tst	r1, #1024	; 0x400
   21e34:	beq	21e20 <__assert_fail@plt+0x10480>
   21e38:	str	r3, [sp, #4]
   21e3c:	add	r3, sp, #14464	; 0x3880
   21e40:	add	r3, r3, #40	; 0x28
   21e44:	ldr	r2, [sp, #4]
   21e48:	add	r3, r3, r2, lsl #2
   21e4c:	ldr	r3, [r3, #-3076]	; 0xfffff3fc
   21e50:	str	r3, [r9, #40]	; 0x28
   21e54:	ldr	r2, [sp, #8]
   21e58:	cmp	r2, #0
   21e5c:	strne	r3, [r9, #1064]	; 0x428
   21e60:	add	r3, sp, #11392	; 0x2c80
   21e64:	add	r3, r3, #32
   21e68:	ldr	r0, [r3]
   21e6c:	bl	1c948 <__assert_fail@plt+0xafa8>
   21e70:	add	r4, sl, sl, lsl #1
   21e74:	ldr	r5, [sp, #20]
   21e78:	add	r4, r5, r4, lsl #2
   21e7c:	ldr	r0, [r5, #8]
   21e80:	bl	1c948 <__assert_fail@plt+0xafa8>
   21e84:	add	r5, r5, #12
   21e88:	cmp	r4, r5
   21e8c:	bne	21e7c <__assert_fail@plt+0x104dc>
   21e90:	mov	r0, #1
   21e94:	b	21bdc <__assert_fail@plt+0x1023c>
   21e98:	ldr	r1, [r6]
   21e9c:	tst	r2, r1
   21ea0:	bne	21edc <__assert_fail@plt+0x1053c>
   21ea4:	ldr	r1, [sp, #4]
   21ea8:	add	r1, r1, #1
   21eac:	ldr	lr, [ip, r1, lsl #5]
   21eb0:	tst	r2, lr
   21eb4:	beq	21ea8 <__assert_fail@plt+0x10508>
   21eb8:	ldr	lr, [r7]
   21ebc:	tst	r2, lr
   21ec0:	add	lr, sp, #14464	; 0x3880
   21ec4:	add	lr, lr, #40	; 0x28
   21ec8:	add	r1, lr, r1, lsl #2
   21ecc:	ldrne	r1, [r1, #-2052]	; 0xfffff7fc
   21ed0:	ldreq	r1, [r1, #-1028]	; 0xfffffbfc
   21ed4:	str	r1, [r0]
   21ed8:	b	21dd4 <__assert_fail@plt+0x10434>
   21edc:	ldr	r1, [sp, #4]
   21ee0:	b	21eb8 <__assert_fail@plt+0x10518>
   21ee4:	mov	r1, #512	; 0x200
   21ee8:	mov	r0, #4
   21eec:	bl	1c5f8 <__assert_fail@plt+0xac58>
   21ef0:	mov	r9, r0
   21ef4:	ldr	r3, [sp, #16]
   21ef8:	str	r0, [r3, #48]	; 0x30
   21efc:	cmp	r0, #0
   21f00:	beq	21ba4 <__assert_fail@plt+0x10204>
   21f04:	mov	r6, r0
   21f08:	add	r7, r0, #1024	; 0x400
   21f0c:	ldr	r5, [sp, #12]
   21f10:	ldr	r3, [r4, #4]!
   21f14:	cmp	r3, #0
   21f18:	beq	21f40 <__assert_fail@plt+0x105a0>
   21f1c:	mov	r0, r6
   21f20:	mov	r2, #1
   21f24:	mov	lr, r5
   21f28:	tst	r3, #1
   21f2c:	bne	21f54 <__assert_fail@plt+0x105b4>
   21f30:	lsl	r2, r2, #1
   21f34:	add	r0, r0, #4
   21f38:	lsrs	r3, r3, #1
   21f3c:	bne	21f28 <__assert_fail@plt+0x10588>
   21f40:	add	r6, r6, #128	; 0x80
   21f44:	add	r5, r5, #4
   21f48:	cmp	r7, r6
   21f4c:	bne	21f10 <__assert_fail@plt+0x10570>
   21f50:	b	21df8 <__assert_fail@plt+0x10458>
   21f54:	ldr	r1, [r5]
   21f58:	tst	r2, r1
   21f5c:	bne	21f94 <__assert_fail@plt+0x105f4>
   21f60:	ldr	r1, [sp, #4]
   21f64:	add	r1, r1, #1
   21f68:	ldr	ip, [lr, r1, lsl #5]
   21f6c:	tst	r2, ip
   21f70:	beq	21f64 <__assert_fail@plt+0x105c4>
   21f74:	add	ip, sp, #14464	; 0x3880
   21f78:	add	ip, ip, #40	; 0x28
   21f7c:	add	r1, ip, r1, lsl #2
   21f80:	ldr	ip, [r1, #-1028]	; 0xfffffbfc
   21f84:	str	ip, [r0]
   21f88:	ldr	r1, [r1, #-2052]	; 0xfffff7fc
   21f8c:	str	r1, [r0, #1024]	; 0x400
   21f90:	b	21f30 <__assert_fail@plt+0x10590>
   21f94:	ldr	r1, [sp, #4]
   21f98:	b	21f74 <__assert_fail@plt+0x105d4>
   21f9c:	mov	r0, #0
   21fa0:	b	21bdc <__assert_fail@plt+0x1023c>
   21fa4:	strd	r4, [sp, #-24]!	; 0xffffffe8
   21fa8:	strd	r6, [sp, #8]
   21fac:	str	r8, [sp, #16]
   21fb0:	str	lr, [sp, #20]
   21fb4:	mov	r4, r0
   21fb8:	mov	r5, r1
   21fbc:	mov	r1, r2
   21fc0:	ldr	r2, [r0, #88]	; 0x58
   21fc4:	bl	20efc <__assert_fail@plt+0xf55c>
   21fc8:	ldr	lr, [r5, #8]
   21fcc:	cmp	lr, #0
   21fd0:	ble	2203c <__assert_fail@plt+0x1069c>
   21fd4:	ldr	r3, [r4, #84]	; 0x54
   21fd8:	ldr	r4, [r3]
   21fdc:	ldr	ip, [r5, #12]
   21fe0:	sub	ip, ip, #4
   21fe4:	mov	r1, #0
   21fe8:	and	r7, r0, #8
   21fec:	and	r6, r0, #2
   21ff0:	and	r5, r0, #1
   21ff4:	b	22050 <__assert_fail@plt+0x106b0>
   21ff8:	tst	r3, #8
   21ffc:	beq	22008 <__assert_fail@plt+0x10668>
   22000:	cmp	r5, #0
   22004:	bne	22044 <__assert_fail@plt+0x106a4>
   22008:	tst	r3, #32
   2200c:	beq	22018 <__assert_fail@plt+0x10678>
   22010:	cmp	r6, #0
   22014:	beq	22044 <__assert_fail@plt+0x106a4>
   22018:	tst	r3, #128	; 0x80
   2201c:	beq	22028 <__assert_fail@plt+0x10688>
   22020:	cmp	r7, #0
   22024:	beq	22044 <__assert_fail@plt+0x106a4>
   22028:	ldrd	r4, [sp]
   2202c:	ldrd	r6, [sp, #8]
   22030:	ldr	r8, [sp, #16]
   22034:	add	sp, sp, #20
   22038:	pop	{pc}		; (ldr pc, [sp], #4)
   2203c:	mov	r0, #0
   22040:	b	22028 <__assert_fail@plt+0x10688>
   22044:	add	r1, r1, #1
   22048:	cmp	lr, r1
   2204c:	beq	22090 <__assert_fail@plt+0x106f0>
   22050:	ldr	r0, [ip, #4]!
   22054:	add	r2, r4, r0, lsl #3
   22058:	ldr	r3, [r2, #4]
   2205c:	ubfx	r3, r3, #8, #10
   22060:	ldrb	r2, [r2, #4]
   22064:	cmp	r2, #2
   22068:	bne	22044 <__assert_fail@plt+0x106a4>
   2206c:	cmp	r3, #0
   22070:	beq	22028 <__assert_fail@plt+0x10688>
   22074:	tst	r3, #4
   22078:	beq	21ff8 <__assert_fail@plt+0x10658>
   2207c:	cmp	r5, #0
   22080:	beq	22044 <__assert_fail@plt+0x106a4>
   22084:	tst	r3, #8
   22088:	beq	22008 <__assert_fail@plt+0x10668>
   2208c:	b	22044 <__assert_fail@plt+0x106a4>
   22090:	mov	r0, #0
   22094:	b	22028 <__assert_fail@plt+0x10688>
   22098:	strd	r4, [sp, #-24]!	; 0xffffffe8
   2209c:	strd	r6, [sp, #8]
   220a0:	str	r8, [sp, #16]
   220a4:	str	lr, [sp, #20]
   220a8:	ldr	r7, [sp, #28]
   220ac:	subs	r5, r0, #0
   220b0:	beq	22164 <__assert_fail@plt+0x107c4>
   220b4:	ldr	r4, [r5]
   220b8:	cmp	r4, #0
   220bc:	beq	2216c <__assert_fail@plt+0x107cc>
   220c0:	mov	r0, r3
   220c4:	sub	r4, r4, #1
   220c8:	str	r4, [r5]
   220cc:	add	r4, r4, r4, lsl #1
   220d0:	lsl	r4, r4, #3
   220d4:	ldr	r3, [r5, #8]
   220d8:	ldr	r3, [r3, r4]
   220dc:	str	r3, [r1]
   220e0:	lsl	r6, r2, #3
   220e4:	ldr	r3, [r5, #8]
   220e8:	add	r3, r3, r4
   220ec:	mov	r2, r6
   220f0:	ldr	r1, [r3, #8]
   220f4:	bl	115d4 <memcpy@plt>
   220f8:	ldr	r3, [r5, #8]
   220fc:	add	r3, r3, r4
   22100:	ldr	r1, [r3, #8]
   22104:	mov	r2, r6
   22108:	add	r1, r1, r6
   2210c:	ldr	r0, [sp, #24]
   22110:	bl	115d4 <memcpy@plt>
   22114:	ldr	r0, [r7, #8]
   22118:	bl	1c948 <__assert_fail@plt+0xafa8>
   2211c:	ldr	r3, [r5, #8]
   22120:	add	r3, r3, r4
   22124:	ldr	r0, [r3, #8]
   22128:	bl	1c948 <__assert_fail@plt+0xafa8>
   2212c:	ldr	r1, [r5, #8]
   22130:	add	r1, r1, r4
   22134:	ldrd	r2, [r1, #12]
   22138:	strd	r2, [r7]
   2213c:	ldr	r3, [r1, #20]
   22140:	str	r3, [r7, #8]
   22144:	ldr	r3, [r5, #8]
   22148:	add	r4, r3, r4
   2214c:	ldr	r0, [r4, #4]
   22150:	ldrd	r4, [sp]
   22154:	ldrd	r6, [sp, #8]
   22158:	ldr	r8, [sp, #16]
   2215c:	add	sp, sp, #20
   22160:	pop	{pc}		; (ldr pc, [sp], #4)
   22164:	mvn	r0, #0
   22168:	b	22150 <__assert_fail@plt+0x107b0>
   2216c:	mvn	r0, #0
   22170:	b	22150 <__assert_fail@plt+0x107b0>
   22174:	strd	r4, [sp, #-32]!	; 0xffffffe0
   22178:	strd	r6, [sp, #8]
   2217c:	strd	r8, [sp, #16]
   22180:	str	sl, [sp, #24]
   22184:	str	lr, [sp, #28]
   22188:	mov	r6, r0
   2218c:	mov	r4, r1
   22190:	mov	r5, r2
   22194:	mov	r9, r3
   22198:	ldr	r7, [sp, #32]
   2219c:	ldr	r3, [sp, #36]	; 0x24
   221a0:	tst	r3, #4194304	; 0x400000
   221a4:	beq	221e8 <__assert_fail@plt+0x10848>
   221a8:	movw	r1, #58392	; 0xe418
   221ac:	movt	r1, #2
   221b0:	mov	r0, r7
   221b4:	bl	11544 <strcmp@plt>
   221b8:	cmp	r0, #0
   221bc:	movweq	r7, #58384	; 0xe410
   221c0:	movteq	r7, #2
   221c4:	beq	221e8 <__assert_fail@plt+0x10848>
   221c8:	movw	r1, #58400	; 0xe420
   221cc:	movt	r1, #2
   221d0:	mov	r0, r7
   221d4:	bl	11544 <strcmp@plt>
   221d8:	movw	r3, #58384	; 0xe410
   221dc:	movt	r3, #2
   221e0:	cmp	r0, #0
   221e4:	moveq	r7, r3
   221e8:	ldr	r3, [r5, #36]	; 0x24
   221ec:	ldr	r2, [r9]
   221f0:	cmp	r2, r3
   221f4:	beq	22244 <__assert_fail@plt+0x108a4>
   221f8:	ldr	r9, [r5, #12]
   221fc:	ldr	r8, [r5, #36]	; 0x24
   22200:	add	r3, r8, #1
   22204:	str	r3, [r5, #36]	; 0x24
   22208:	mov	r0, r7
   2220c:	bl	11514 <wctype@plt>
   22210:	str	r0, [r9, r8, lsl #2]
   22214:	movw	r1, #58408	; 0xe428
   22218:	movt	r1, #2
   2221c:	mov	r0, r7
   22220:	bl	11544 <strcmp@plt>
   22224:	subs	r5, r0, #0
   22228:	bne	22308 <__assert_fail@plt+0x10968>
   2222c:	cmp	r6, #0
   22230:	bne	2226c <__assert_fail@plt+0x108cc>
   22234:	bl	11778 <__ctype_b_loc@plt>
   22238:	mov	r3, r5
   2223c:	mov	lr, #1
   22240:	b	222c4 <__assert_fail@plt+0x10924>
   22244:	lsl	r3, r3, #1
   22248:	add	r8, r3, #1
   2224c:	lsl	r1, r8, #2
   22250:	ldr	r0, [r5, #12]
   22254:	bl	1cb14 <__assert_fail@plt+0xb174>
   22258:	cmp	r0, #0
   2225c:	beq	22bd0 <__assert_fail@plt+0x11230>
   22260:	str	r0, [r5, #12]
   22264:	str	r8, [r9]
   22268:	b	221f8 <__assert_fail@plt+0x10858>
   2226c:	bl	11778 <__ctype_b_loc@plt>
   22270:	mov	r3, r5
   22274:	mov	lr, #1
   22278:	b	22288 <__assert_fail@plt+0x108e8>
   2227c:	add	r3, r3, #1
   22280:	cmp	r3, #256	; 0x100
   22284:	beq	22bd4 <__assert_fail@plt+0x11234>
   22288:	ldr	r1, [r0]
   2228c:	lsl	r2, r3, #1
   22290:	ldrh	r2, [r1, r2]
   22294:	tst	r2, #8
   22298:	beq	2227c <__assert_fail@plt+0x108dc>
   2229c:	ldrb	r2, [r6, r3]
   222a0:	asr	ip, r2, #5
   222a4:	and	r2, r2, #31
   222a8:	ldr	r1, [r4, ip, lsl #2]
   222ac:	orr	r2, r1, lr, lsl r2
   222b0:	str	r2, [r4, ip, lsl #2]
   222b4:	b	2227c <__assert_fail@plt+0x108dc>
   222b8:	add	r3, r3, #1
   222bc:	cmp	r3, #256	; 0x100
   222c0:	beq	22bd4 <__assert_fail@plt+0x11234>
   222c4:	ldr	r1, [r0]
   222c8:	lsl	r2, r3, #1
   222cc:	ldrh	r2, [r1, r2]
   222d0:	tst	r2, #8
   222d4:	beq	222b8 <__assert_fail@plt+0x10918>
   222d8:	add	r2, r3, #31
   222dc:	cmp	r3, #0
   222e0:	movge	r2, r3
   222e4:	asr	r2, r2, #5
   222e8:	rsbs	r1, r3, #0
   222ec:	and	ip, r3, #31
   222f0:	and	r1, r1, #31
   222f4:	rsbpl	ip, r1, #0
   222f8:	ldr	r1, [r4, r2, lsl #2]
   222fc:	orr	r1, r1, lr, lsl ip
   22300:	str	r1, [r4, r2, lsl #2]
   22304:	b	222b8 <__assert_fail@plt+0x10918>
   22308:	movw	r1, #58416	; 0xe430
   2230c:	movt	r1, #2
   22310:	mov	r0, r7
   22314:	bl	11544 <strcmp@plt>
   22318:	subs	r5, r0, #0
   2231c:	bne	223d4 <__assert_fail@plt+0x10a34>
   22320:	cmp	r6, #0
   22324:	bne	22338 <__assert_fail@plt+0x10998>
   22328:	bl	11778 <__ctype_b_loc@plt>
   2232c:	mov	r3, r5
   22330:	mov	lr, #1
   22334:	b	22390 <__assert_fail@plt+0x109f0>
   22338:	bl	11778 <__ctype_b_loc@plt>
   2233c:	mov	r3, r5
   22340:	mov	lr, #1
   22344:	b	22354 <__assert_fail@plt+0x109b4>
   22348:	add	r3, r3, #1
   2234c:	cmp	r3, #256	; 0x100
   22350:	beq	22bd4 <__assert_fail@plt+0x11234>
   22354:	ldr	r1, [r0]
   22358:	lsl	r2, r3, #1
   2235c:	ldrh	r2, [r1, r2]
   22360:	tst	r2, #2
   22364:	beq	22348 <__assert_fail@plt+0x109a8>
   22368:	ldrb	r2, [r6, r3]
   2236c:	asr	ip, r2, #5
   22370:	and	r2, r2, #31
   22374:	ldr	r1, [r4, ip, lsl #2]
   22378:	orr	r2, r1, lr, lsl r2
   2237c:	str	r2, [r4, ip, lsl #2]
   22380:	b	22348 <__assert_fail@plt+0x109a8>
   22384:	add	r3, r3, #1
   22388:	cmp	r3, #256	; 0x100
   2238c:	beq	22bd4 <__assert_fail@plt+0x11234>
   22390:	ldr	r1, [r0]
   22394:	lsl	r2, r3, #1
   22398:	ldrh	r2, [r1, r2]
   2239c:	tst	r2, #2
   223a0:	beq	22384 <__assert_fail@plt+0x109e4>
   223a4:	add	r2, r3, #31
   223a8:	cmp	r3, #0
   223ac:	movge	r2, r3
   223b0:	asr	r2, r2, #5
   223b4:	rsbs	r1, r3, #0
   223b8:	and	ip, r3, #31
   223bc:	and	r1, r1, #31
   223c0:	rsbpl	ip, r1, #0
   223c4:	ldr	r1, [r4, r2, lsl #2]
   223c8:	orr	r1, r1, lr, lsl ip
   223cc:	str	r1, [r4, r2, lsl #2]
   223d0:	b	22384 <__assert_fail@plt+0x109e4>
   223d4:	movw	r1, #58400	; 0xe420
   223d8:	movt	r1, #2
   223dc:	mov	r0, r7
   223e0:	bl	11544 <strcmp@plt>
   223e4:	subs	r5, r0, #0
   223e8:	bne	224a0 <__assert_fail@plt+0x10b00>
   223ec:	cmp	r6, #0
   223f0:	bne	22404 <__assert_fail@plt+0x10a64>
   223f4:	bl	11778 <__ctype_b_loc@plt>
   223f8:	mov	r3, r5
   223fc:	mov	lr, #1
   22400:	b	2245c <__assert_fail@plt+0x10abc>
   22404:	bl	11778 <__ctype_b_loc@plt>
   22408:	mov	r3, r5
   2240c:	mov	lr, #1
   22410:	b	22420 <__assert_fail@plt+0x10a80>
   22414:	add	r3, r3, #1
   22418:	cmp	r3, #256	; 0x100
   2241c:	beq	22bd4 <__assert_fail@plt+0x11234>
   22420:	ldr	r1, [r0]
   22424:	lsl	r2, r3, #1
   22428:	ldrh	r2, [r1, r2]
   2242c:	tst	r2, #512	; 0x200
   22430:	beq	22414 <__assert_fail@plt+0x10a74>
   22434:	ldrb	r2, [r6, r3]
   22438:	asr	ip, r2, #5
   2243c:	and	r2, r2, #31
   22440:	ldr	r1, [r4, ip, lsl #2]
   22444:	orr	r2, r1, lr, lsl r2
   22448:	str	r2, [r4, ip, lsl #2]
   2244c:	b	22414 <__assert_fail@plt+0x10a74>
   22450:	add	r3, r3, #1
   22454:	cmp	r3, #256	; 0x100
   22458:	beq	22bd4 <__assert_fail@plt+0x11234>
   2245c:	ldr	r1, [r0]
   22460:	lsl	r2, r3, #1
   22464:	ldrh	r2, [r1, r2]
   22468:	tst	r2, #512	; 0x200
   2246c:	beq	22450 <__assert_fail@plt+0x10ab0>
   22470:	add	r2, r3, #31
   22474:	cmp	r3, #0
   22478:	movge	r2, r3
   2247c:	asr	r2, r2, #5
   22480:	rsbs	r1, r3, #0
   22484:	and	ip, r3, #31
   22488:	and	r1, r1, #31
   2248c:	rsbpl	ip, r1, #0
   22490:	ldr	r1, [r4, r2, lsl #2]
   22494:	orr	r1, r1, lr, lsl ip
   22498:	str	r1, [r4, r2, lsl #2]
   2249c:	b	22450 <__assert_fail@plt+0x10ab0>
   224a0:	movw	r1, #58424	; 0xe438
   224a4:	movt	r1, #2
   224a8:	mov	r0, r7
   224ac:	bl	11544 <strcmp@plt>
   224b0:	subs	r5, r0, #0
   224b4:	bne	2256c <__assert_fail@plt+0x10bcc>
   224b8:	cmp	r6, #0
   224bc:	bne	224d0 <__assert_fail@plt+0x10b30>
   224c0:	bl	11778 <__ctype_b_loc@plt>
   224c4:	mov	r3, r5
   224c8:	mov	lr, #1
   224cc:	b	22528 <__assert_fail@plt+0x10b88>
   224d0:	bl	11778 <__ctype_b_loc@plt>
   224d4:	mov	r3, r5
   224d8:	mov	lr, #1
   224dc:	b	224ec <__assert_fail@plt+0x10b4c>
   224e0:	add	r3, r3, #1
   224e4:	cmp	r3, #256	; 0x100
   224e8:	beq	22bd4 <__assert_fail@plt+0x11234>
   224ec:	ldr	r1, [r0]
   224f0:	lsl	r2, r3, #1
   224f4:	ldrh	r2, [r1, r2]
   224f8:	tst	r2, #8192	; 0x2000
   224fc:	beq	224e0 <__assert_fail@plt+0x10b40>
   22500:	ldrb	r2, [r6, r3]
   22504:	asr	ip, r2, #5
   22508:	and	r2, r2, #31
   2250c:	ldr	r1, [r4, ip, lsl #2]
   22510:	orr	r2, r1, lr, lsl r2
   22514:	str	r2, [r4, ip, lsl #2]
   22518:	b	224e0 <__assert_fail@plt+0x10b40>
   2251c:	add	r3, r3, #1
   22520:	cmp	r3, #256	; 0x100
   22524:	beq	22bd4 <__assert_fail@plt+0x11234>
   22528:	ldr	r1, [r0]
   2252c:	lsl	r2, r3, #1
   22530:	ldrh	r2, [r1, r2]
   22534:	tst	r2, #8192	; 0x2000
   22538:	beq	2251c <__assert_fail@plt+0x10b7c>
   2253c:	add	r2, r3, #31
   22540:	cmp	r3, #0
   22544:	movge	r2, r3
   22548:	asr	r2, r2, #5
   2254c:	rsbs	r1, r3, #0
   22550:	and	ip, r3, #31
   22554:	and	r1, r1, #31
   22558:	rsbpl	ip, r1, #0
   2255c:	ldr	r1, [r4, r2, lsl #2]
   22560:	orr	r1, r1, lr, lsl ip
   22564:	str	r1, [r4, r2, lsl #2]
   22568:	b	2251c <__assert_fail@plt+0x10b7c>
   2256c:	movw	r1, #58384	; 0xe410
   22570:	movt	r1, #2
   22574:	mov	r0, r7
   22578:	bl	11544 <strcmp@plt>
   2257c:	subs	r5, r0, #0
   22580:	bne	22638 <__assert_fail@plt+0x10c98>
   22584:	cmp	r6, #0
   22588:	bne	2259c <__assert_fail@plt+0x10bfc>
   2258c:	bl	11778 <__ctype_b_loc@plt>
   22590:	mov	r3, r5
   22594:	mov	lr, #1
   22598:	b	225f4 <__assert_fail@plt+0x10c54>
   2259c:	bl	11778 <__ctype_b_loc@plt>
   225a0:	mov	r3, r5
   225a4:	mov	lr, #1
   225a8:	b	225b8 <__assert_fail@plt+0x10c18>
   225ac:	add	r3, r3, #1
   225b0:	cmp	r3, #256	; 0x100
   225b4:	beq	22bd4 <__assert_fail@plt+0x11234>
   225b8:	ldr	r1, [r0]
   225bc:	lsl	r2, r3, #1
   225c0:	ldrh	r2, [r1, r2]
   225c4:	tst	r2, #1024	; 0x400
   225c8:	beq	225ac <__assert_fail@plt+0x10c0c>
   225cc:	ldrb	r2, [r6, r3]
   225d0:	asr	ip, r2, #5
   225d4:	and	r2, r2, #31
   225d8:	ldr	r1, [r4, ip, lsl #2]
   225dc:	orr	r2, r1, lr, lsl r2
   225e0:	str	r2, [r4, ip, lsl #2]
   225e4:	b	225ac <__assert_fail@plt+0x10c0c>
   225e8:	add	r3, r3, #1
   225ec:	cmp	r3, #256	; 0x100
   225f0:	beq	22bd4 <__assert_fail@plt+0x11234>
   225f4:	ldr	r1, [r0]
   225f8:	lsl	r2, r3, #1
   225fc:	ldrh	r2, [r1, r2]
   22600:	tst	r2, #1024	; 0x400
   22604:	beq	225e8 <__assert_fail@plt+0x10c48>
   22608:	add	r2, r3, #31
   2260c:	cmp	r3, #0
   22610:	movge	r2, r3
   22614:	asr	r2, r2, #5
   22618:	rsbs	r1, r3, #0
   2261c:	and	ip, r3, #31
   22620:	and	r1, r1, #31
   22624:	rsbpl	ip, r1, #0
   22628:	ldr	r1, [r4, r2, lsl #2]
   2262c:	orr	r1, r1, lr, lsl ip
   22630:	str	r1, [r4, r2, lsl #2]
   22634:	b	225e8 <__assert_fail@plt+0x10c48>
   22638:	movw	r1, #58432	; 0xe440
   2263c:	movt	r1, #2
   22640:	mov	r0, r7
   22644:	bl	11544 <strcmp@plt>
   22648:	subs	r5, r0, #0
   2264c:	bne	22704 <__assert_fail@plt+0x10d64>
   22650:	cmp	r6, #0
   22654:	bne	22668 <__assert_fail@plt+0x10cc8>
   22658:	bl	11778 <__ctype_b_loc@plt>
   2265c:	mov	r3, r5
   22660:	mov	lr, #1
   22664:	b	226c0 <__assert_fail@plt+0x10d20>
   22668:	bl	11778 <__ctype_b_loc@plt>
   2266c:	mov	r3, r5
   22670:	mov	lr, #1
   22674:	b	22684 <__assert_fail@plt+0x10ce4>
   22678:	add	r3, r3, #1
   2267c:	cmp	r3, #256	; 0x100
   22680:	beq	22bd4 <__assert_fail@plt+0x11234>
   22684:	ldr	r1, [r0]
   22688:	lsl	r2, r3, #1
   2268c:	ldrh	r2, [r1, r2]
   22690:	tst	r2, #2048	; 0x800
   22694:	beq	22678 <__assert_fail@plt+0x10cd8>
   22698:	ldrb	r2, [r6, r3]
   2269c:	asr	ip, r2, #5
   226a0:	and	r2, r2, #31
   226a4:	ldr	r1, [r4, ip, lsl #2]
   226a8:	orr	r2, r1, lr, lsl r2
   226ac:	str	r2, [r4, ip, lsl #2]
   226b0:	b	22678 <__assert_fail@plt+0x10cd8>
   226b4:	add	r3, r3, #1
   226b8:	cmp	r3, #256	; 0x100
   226bc:	beq	22bd4 <__assert_fail@plt+0x11234>
   226c0:	ldr	r1, [r0]
   226c4:	lsl	r2, r3, #1
   226c8:	ldrh	r2, [r1, r2]
   226cc:	tst	r2, #2048	; 0x800
   226d0:	beq	226b4 <__assert_fail@plt+0x10d14>
   226d4:	add	r2, r3, #31
   226d8:	cmp	r3, #0
   226dc:	movge	r2, r3
   226e0:	asr	r2, r2, #5
   226e4:	rsbs	r1, r3, #0
   226e8:	and	ip, r3, #31
   226ec:	and	r1, r1, #31
   226f0:	rsbpl	ip, r1, #0
   226f4:	ldr	r1, [r4, r2, lsl #2]
   226f8:	orr	r1, r1, lr, lsl ip
   226fc:	str	r1, [r4, r2, lsl #2]
   22700:	b	226b4 <__assert_fail@plt+0x10d14>
   22704:	movw	r1, #55396	; 0xd864
   22708:	movt	r1, #2
   2270c:	mov	r0, r7
   22710:	bl	11544 <strcmp@plt>
   22714:	subs	r5, r0, #0
   22718:	bne	227d0 <__assert_fail@plt+0x10e30>
   2271c:	cmp	r6, #0
   22720:	bne	22734 <__assert_fail@plt+0x10d94>
   22724:	bl	11778 <__ctype_b_loc@plt>
   22728:	mov	r3, r5
   2272c:	mov	lr, #1
   22730:	b	2278c <__assert_fail@plt+0x10dec>
   22734:	bl	11778 <__ctype_b_loc@plt>
   22738:	mov	r3, r5
   2273c:	mov	lr, #1
   22740:	b	22750 <__assert_fail@plt+0x10db0>
   22744:	add	r3, r3, #1
   22748:	cmp	r3, #256	; 0x100
   2274c:	beq	22bd4 <__assert_fail@plt+0x11234>
   22750:	ldr	r1, [r0]
   22754:	lsl	r2, r3, #1
   22758:	ldrh	r2, [r1, r2]
   2275c:	tst	r2, #16384	; 0x4000
   22760:	beq	22744 <__assert_fail@plt+0x10da4>
   22764:	ldrb	r2, [r6, r3]
   22768:	asr	ip, r2, #5
   2276c:	and	r2, r2, #31
   22770:	ldr	r1, [r4, ip, lsl #2]
   22774:	orr	r2, r1, lr, lsl r2
   22778:	str	r2, [r4, ip, lsl #2]
   2277c:	b	22744 <__assert_fail@plt+0x10da4>
   22780:	add	r3, r3, #1
   22784:	cmp	r3, #256	; 0x100
   22788:	beq	22bd4 <__assert_fail@plt+0x11234>
   2278c:	ldr	r1, [r0]
   22790:	lsl	r2, r3, #1
   22794:	ldrh	r2, [r1, r2]
   22798:	tst	r2, #16384	; 0x4000
   2279c:	beq	22780 <__assert_fail@plt+0x10de0>
   227a0:	add	r2, r3, #31
   227a4:	cmp	r3, #0
   227a8:	movge	r2, r3
   227ac:	asr	r2, r2, #5
   227b0:	rsbs	r1, r3, #0
   227b4:	and	ip, r3, #31
   227b8:	and	r1, r1, #31
   227bc:	rsbpl	ip, r1, #0
   227c0:	ldr	r1, [r4, r2, lsl #2]
   227c4:	orr	r1, r1, lr, lsl ip
   227c8:	str	r1, [r4, r2, lsl #2]
   227cc:	b	22780 <__assert_fail@plt+0x10de0>
   227d0:	movw	r1, #58392	; 0xe418
   227d4:	movt	r1, #2
   227d8:	mov	r0, r7
   227dc:	bl	11544 <strcmp@plt>
   227e0:	subs	r5, r0, #0
   227e4:	bne	2289c <__assert_fail@plt+0x10efc>
   227e8:	cmp	r6, #0
   227ec:	bne	22800 <__assert_fail@plt+0x10e60>
   227f0:	bl	11778 <__ctype_b_loc@plt>
   227f4:	mov	r3, r5
   227f8:	mov	lr, #1
   227fc:	b	22858 <__assert_fail@plt+0x10eb8>
   22800:	bl	11778 <__ctype_b_loc@plt>
   22804:	mov	r3, r5
   22808:	mov	lr, #1
   2280c:	b	2281c <__assert_fail@plt+0x10e7c>
   22810:	add	r3, r3, #1
   22814:	cmp	r3, #256	; 0x100
   22818:	beq	22bd4 <__assert_fail@plt+0x11234>
   2281c:	ldr	r1, [r0]
   22820:	lsl	r2, r3, #1
   22824:	ldrh	r2, [r1, r2]
   22828:	tst	r2, #256	; 0x100
   2282c:	beq	22810 <__assert_fail@plt+0x10e70>
   22830:	ldrb	r2, [r6, r3]
   22834:	asr	ip, r2, #5
   22838:	and	r2, r2, #31
   2283c:	ldr	r1, [r4, ip, lsl #2]
   22840:	orr	r2, r1, lr, lsl r2
   22844:	str	r2, [r4, ip, lsl #2]
   22848:	b	22810 <__assert_fail@plt+0x10e70>
   2284c:	add	r3, r3, #1
   22850:	cmp	r3, #256	; 0x100
   22854:	beq	22bd4 <__assert_fail@plt+0x11234>
   22858:	ldr	r1, [r0]
   2285c:	lsl	r2, r3, #1
   22860:	ldrh	r2, [r1, r2]
   22864:	tst	r2, #256	; 0x100
   22868:	beq	2284c <__assert_fail@plt+0x10eac>
   2286c:	add	r2, r3, #31
   22870:	cmp	r3, #0
   22874:	movge	r2, r3
   22878:	asr	r2, r2, #5
   2287c:	rsbs	r1, r3, #0
   22880:	and	ip, r3, #31
   22884:	and	r1, r1, #31
   22888:	rsbpl	ip, r1, #0
   2288c:	ldr	r1, [r4, r2, lsl #2]
   22890:	orr	r1, r1, lr, lsl ip
   22894:	str	r1, [r4, r2, lsl #2]
   22898:	b	2284c <__assert_fail@plt+0x10eac>
   2289c:	movw	r1, #58440	; 0xe448
   228a0:	movt	r1, #2
   228a4:	mov	r0, r7
   228a8:	bl	11544 <strcmp@plt>
   228ac:	subs	r5, r0, #0
   228b0:	bne	22968 <__assert_fail@plt+0x10fc8>
   228b4:	cmp	r6, #0
   228b8:	bne	228cc <__assert_fail@plt+0x10f2c>
   228bc:	bl	11778 <__ctype_b_loc@plt>
   228c0:	mov	r3, r5
   228c4:	mov	lr, #1
   228c8:	b	22924 <__assert_fail@plt+0x10f84>
   228cc:	bl	11778 <__ctype_b_loc@plt>
   228d0:	mov	r3, r5
   228d4:	mov	lr, #1
   228d8:	b	228e8 <__assert_fail@plt+0x10f48>
   228dc:	add	r3, r3, #1
   228e0:	cmp	r3, #256	; 0x100
   228e4:	beq	22bd4 <__assert_fail@plt+0x11234>
   228e8:	ldr	r1, [r0]
   228ec:	lsl	r2, r3, #1
   228f0:	ldrh	r2, [r1, r2]
   228f4:	tst	r2, #1
   228f8:	beq	228dc <__assert_fail@plt+0x10f3c>
   228fc:	ldrb	r2, [r6, r3]
   22900:	asr	ip, r2, #5
   22904:	and	r2, r2, #31
   22908:	ldr	r1, [r4, ip, lsl #2]
   2290c:	orr	r2, r1, lr, lsl r2
   22910:	str	r2, [r4, ip, lsl #2]
   22914:	b	228dc <__assert_fail@plt+0x10f3c>
   22918:	add	r3, r3, #1
   2291c:	cmp	r3, #256	; 0x100
   22920:	beq	22bd4 <__assert_fail@plt+0x11234>
   22924:	ldr	r1, [r0]
   22928:	lsl	r2, r3, #1
   2292c:	ldrh	r2, [r1, r2]
   22930:	tst	r2, #1
   22934:	beq	22918 <__assert_fail@plt+0x10f78>
   22938:	add	r2, r3, #31
   2293c:	cmp	r3, #0
   22940:	movge	r2, r3
   22944:	asr	r2, r2, #5
   22948:	rsbs	r1, r3, #0
   2294c:	and	ip, r3, #31
   22950:	and	r1, r1, #31
   22954:	rsbpl	ip, r1, #0
   22958:	ldr	r1, [r4, r2, lsl #2]
   2295c:	orr	r1, r1, lr, lsl ip
   22960:	str	r1, [r4, r2, lsl #2]
   22964:	b	22918 <__assert_fail@plt+0x10f78>
   22968:	movw	r1, #58448	; 0xe450
   2296c:	movt	r1, #2
   22970:	mov	r0, r7
   22974:	bl	11544 <strcmp@plt>
   22978:	subs	r5, r0, #0
   2297c:	bne	22a34 <__assert_fail@plt+0x11094>
   22980:	cmp	r6, #0
   22984:	bne	22998 <__assert_fail@plt+0x10ff8>
   22988:	bl	11778 <__ctype_b_loc@plt>
   2298c:	mov	r3, r5
   22990:	mov	lr, #1
   22994:	b	229f0 <__assert_fail@plt+0x11050>
   22998:	bl	11778 <__ctype_b_loc@plt>
   2299c:	mov	r3, r5
   229a0:	mov	lr, #1
   229a4:	b	229b4 <__assert_fail@plt+0x11014>
   229a8:	add	r3, r3, #1
   229ac:	cmp	r3, #256	; 0x100
   229b0:	beq	22bd4 <__assert_fail@plt+0x11234>
   229b4:	ldr	r1, [r0]
   229b8:	lsl	r2, r3, #1
   229bc:	ldrsh	r2, [r1, r2]
   229c0:	cmp	r2, #0
   229c4:	bge	229a8 <__assert_fail@plt+0x11008>
   229c8:	ldrb	r2, [r6, r3]
   229cc:	asr	ip, r2, #5
   229d0:	and	r2, r2, #31
   229d4:	ldr	r1, [r4, ip, lsl #2]
   229d8:	orr	r2, r1, lr, lsl r2
   229dc:	str	r2, [r4, ip, lsl #2]
   229e0:	b	229a8 <__assert_fail@plt+0x11008>
   229e4:	add	r3, r3, #1
   229e8:	cmp	r3, #256	; 0x100
   229ec:	beq	22bd4 <__assert_fail@plt+0x11234>
   229f0:	ldr	r1, [r0]
   229f4:	lsl	r2, r3, #1
   229f8:	ldrsh	r2, [r1, r2]
   229fc:	cmp	r2, #0
   22a00:	bge	229e4 <__assert_fail@plt+0x11044>
   22a04:	add	r2, r3, #31
   22a08:	cmp	r3, #0
   22a0c:	movge	r2, r3
   22a10:	asr	r2, r2, #5
   22a14:	rsbs	r1, r3, #0
   22a18:	and	ip, r3, #31
   22a1c:	and	r1, r1, #31
   22a20:	rsbpl	ip, r1, #0
   22a24:	ldr	r1, [r4, r2, lsl #2]
   22a28:	orr	r1, r1, lr, lsl ip
   22a2c:	str	r1, [r4, r2, lsl #2]
   22a30:	b	229e4 <__assert_fail@plt+0x11044>
   22a34:	movw	r1, #58456	; 0xe458
   22a38:	movt	r1, #2
   22a3c:	mov	r0, r7
   22a40:	bl	11544 <strcmp@plt>
   22a44:	subs	r5, r0, #0
   22a48:	bne	22b00 <__assert_fail@plt+0x11160>
   22a4c:	cmp	r6, #0
   22a50:	bne	22a64 <__assert_fail@plt+0x110c4>
   22a54:	bl	11778 <__ctype_b_loc@plt>
   22a58:	mov	r3, r5
   22a5c:	mov	lr, #1
   22a60:	b	22abc <__assert_fail@plt+0x1111c>
   22a64:	bl	11778 <__ctype_b_loc@plt>
   22a68:	mov	r3, #0
   22a6c:	mov	lr, #1
   22a70:	b	22a84 <__assert_fail@plt+0x110e4>
   22a74:	add	r3, r3, #2
   22a78:	add	r6, r6, #1
   22a7c:	cmp	r3, #512	; 0x200
   22a80:	beq	22bd4 <__assert_fail@plt+0x11234>
   22a84:	ldr	r2, [r0]
   22a88:	ldrh	r2, [r2, r3]
   22a8c:	tst	r2, #4
   22a90:	beq	22a74 <__assert_fail@plt+0x110d4>
   22a94:	ldrb	r2, [r6]
   22a98:	asr	ip, r2, #5
   22a9c:	and	r2, r2, #31
   22aa0:	ldr	r1, [r4, ip, lsl #2]
   22aa4:	orr	r2, r1, lr, lsl r2
   22aa8:	str	r2, [r4, ip, lsl #2]
   22aac:	b	22a74 <__assert_fail@plt+0x110d4>
   22ab0:	add	r3, r3, #1
   22ab4:	cmp	r3, #256	; 0x100
   22ab8:	beq	22bd4 <__assert_fail@plt+0x11234>
   22abc:	ldr	r1, [r0]
   22ac0:	lsl	r2, r3, #1
   22ac4:	ldrh	r2, [r1, r2]
   22ac8:	tst	r2, #4
   22acc:	beq	22ab0 <__assert_fail@plt+0x11110>
   22ad0:	add	r2, r3, #31
   22ad4:	cmp	r3, #0
   22ad8:	movge	r2, r3
   22adc:	asr	r2, r2, #5
   22ae0:	rsbs	r1, r3, #0
   22ae4:	and	ip, r3, #31
   22ae8:	and	r1, r1, #31
   22aec:	rsbpl	ip, r1, #0
   22af0:	ldr	r1, [r4, r2, lsl #2]
   22af4:	orr	r1, r1, lr, lsl ip
   22af8:	str	r1, [r4, r2, lsl #2]
   22afc:	b	22ab0 <__assert_fail@plt+0x11110>
   22b00:	movw	r1, #58464	; 0xe460
   22b04:	movt	r1, #2
   22b08:	mov	r0, r7
   22b0c:	bl	11544 <strcmp@plt>
   22b10:	subs	r5, r0, #0
   22b14:	movne	r5, #4
   22b18:	bne	22bd4 <__assert_fail@plt+0x11234>
   22b1c:	cmp	r6, #0
   22b20:	bne	22b34 <__assert_fail@plt+0x11194>
   22b24:	bl	11778 <__ctype_b_loc@plt>
   22b28:	mov	r3, r5
   22b2c:	mov	lr, #1
   22b30:	b	22b8c <__assert_fail@plt+0x111ec>
   22b34:	bl	11778 <__ctype_b_loc@plt>
   22b38:	mov	r3, r5
   22b3c:	mov	lr, #1
   22b40:	b	22b50 <__assert_fail@plt+0x111b0>
   22b44:	add	r3, r3, #1
   22b48:	cmp	r3, #256	; 0x100
   22b4c:	beq	22bd4 <__assert_fail@plt+0x11234>
   22b50:	ldr	r1, [r0]
   22b54:	lsl	r2, r3, #1
   22b58:	ldrh	r2, [r1, r2]
   22b5c:	tst	r2, #4096	; 0x1000
   22b60:	beq	22b44 <__assert_fail@plt+0x111a4>
   22b64:	ldrb	r2, [r6, r3]
   22b68:	asr	ip, r2, #5
   22b6c:	and	r2, r2, #31
   22b70:	ldr	r1, [r4, ip, lsl #2]
   22b74:	orr	r2, r1, lr, lsl r2
   22b78:	str	r2, [r4, ip, lsl #2]
   22b7c:	b	22b44 <__assert_fail@plt+0x111a4>
   22b80:	add	r3, r3, #1
   22b84:	cmp	r3, #256	; 0x100
   22b88:	beq	22bd4 <__assert_fail@plt+0x11234>
   22b8c:	ldr	r1, [r0]
   22b90:	lsl	r2, r3, #1
   22b94:	ldrh	r2, [r1, r2]
   22b98:	tst	r2, #4096	; 0x1000
   22b9c:	beq	22b80 <__assert_fail@plt+0x111e0>
   22ba0:	add	r2, r3, #31
   22ba4:	cmp	r3, #0
   22ba8:	movge	r2, r3
   22bac:	asr	r2, r2, #5
   22bb0:	rsbs	r1, r3, #0
   22bb4:	and	ip, r3, #31
   22bb8:	and	r1, r1, #31
   22bbc:	rsbpl	ip, r1, #0
   22bc0:	ldr	r1, [r4, r2, lsl #2]
   22bc4:	orr	r1, r1, lr, lsl ip
   22bc8:	str	r1, [r4, r2, lsl #2]
   22bcc:	b	22b80 <__assert_fail@plt+0x111e0>
   22bd0:	mov	r5, #12
   22bd4:	mov	r0, r5
   22bd8:	ldrd	r4, [sp]
   22bdc:	ldrd	r6, [sp, #8]
   22be0:	ldrd	r8, [sp, #16]
   22be4:	ldr	sl, [sp, #24]
   22be8:	add	sp, sp, #28
   22bec:	pop	{pc}		; (ldr pc, [sp], #4)
   22bf0:	strd	r4, [sp, #-32]!	; 0xffffffe0
   22bf4:	strd	r6, [sp, #8]
   22bf8:	strd	r8, [sp, #16]
   22bfc:	str	sl, [sp, #24]
   22c00:	str	lr, [sp, #28]
   22c04:	sub	sp, sp, #24
   22c08:	mov	r6, r0
   22c0c:	mov	r9, r1
   22c10:	mov	sl, r2
   22c14:	mov	r5, r3
   22c18:	ldrb	r8, [sp, #56]	; 0x38
   22c1c:	mov	r3, #0
   22c20:	str	r3, [sp, #20]
   22c24:	mov	r1, #1
   22c28:	mov	r0, #32
   22c2c:	bl	1c5f8 <__assert_fail@plt+0xac58>
   22c30:	subs	r4, r0, #0
   22c34:	beq	22da8 <__assert_fail@plt+0x11408>
   22c38:	mov	r1, #1
   22c3c:	mov	r0, #40	; 0x28
   22c40:	bl	1c5f8 <__assert_fail@plt+0xac58>
   22c44:	subs	r7, r0, #0
   22c48:	beq	22dbc <__assert_fail@plt+0x1141c>
   22c4c:	ldrb	r3, [r7, #16]
   22c50:	bfi	r3, r8, #0, #1
   22c54:	strb	r3, [r7, #16]
   22c58:	mov	r3, #0
   22c5c:	str	r3, [sp, #4]
   22c60:	str	sl, [sp]
   22c64:	add	r3, sp, #20
   22c68:	mov	r2, r7
   22c6c:	mov	r1, r4
   22c70:	mov	r0, r9
   22c74:	bl	22174 <__assert_fail@plt+0x107d4>
   22c78:	subs	r9, r0, #0
   22c7c:	bne	22dd8 <__assert_fail@plt+0x11438>
   22c80:	ldrb	r3, [r5]
   22c84:	cmp	r3, #0
   22c88:	beq	22cb0 <__assert_fail@plt+0x11310>
   22c8c:	mov	r0, #1
   22c90:	lsr	r1, r3, #5
   22c94:	and	r3, r3, #31
   22c98:	ldr	r2, [r4, r1, lsl #2]
   22c9c:	orr	r3, r2, r0, lsl r3
   22ca0:	str	r3, [r4, r1, lsl #2]
   22ca4:	ldrb	r3, [r5, #1]!
   22ca8:	cmp	r3, #0
   22cac:	bne	22c90 <__assert_fail@plt+0x112f0>
   22cb0:	cmp	r8, #0
   22cb4:	beq	22cd4 <__assert_fail@plt+0x11334>
   22cb8:	sub	r3, r4, #4
   22cbc:	add	r1, r4, #28
   22cc0:	ldr	r2, [r3, #4]!
   22cc4:	mvn	r2, r2
   22cc8:	str	r2, [r3]
   22ccc:	cmp	r3, r1
   22cd0:	bne	22cc0 <__assert_fail@plt+0x11320>
   22cd4:	ldr	r3, [r6, #92]	; 0x5c
   22cd8:	cmp	r3, #1
   22cdc:	ble	22d08 <__assert_fail@plt+0x11368>
   22ce0:	sub	r3, r4, #4
   22ce4:	ldr	r1, [r6, #60]	; 0x3c
   22ce8:	sub	r1, r1, #4
   22cec:	add	ip, r4, #28
   22cf0:	ldr	r2, [r3, #4]!
   22cf4:	ldr	r0, [r1, #4]!
   22cf8:	and	r2, r2, r0
   22cfc:	str	r2, [r3]
   22d00:	cmp	r3, ip
   22d04:	bne	22cf0 <__assert_fail@plt+0x11350>
   22d08:	mov	r1, #0
   22d0c:	str	r1, [sp, #16]
   22d10:	str	r4, [sp, #12]
   22d14:	mov	r3, #3
   22d18:	strb	r3, [sp, #16]
   22d1c:	add	r3, sp, #12
   22d20:	mov	r2, r1
   22d24:	mov	r0, r6
   22d28:	bl	1d9f0 <__assert_fail@plt+0xc050>
   22d2c:	subs	r5, r0, #0
   22d30:	beq	22e04 <__assert_fail@plt+0x11464>
   22d34:	ldr	r3, [r6, #92]	; 0x5c
   22d38:	cmp	r3, #1
   22d3c:	ble	22df8 <__assert_fail@plt+0x11458>
   22d40:	mov	r3, #6
   22d44:	strb	r3, [sp, #16]
   22d48:	str	r7, [sp, #12]
   22d4c:	ldrb	r3, [r6, #88]	; 0x58
   22d50:	orr	r3, r3, #2
   22d54:	strb	r3, [r6, #88]	; 0x58
   22d58:	add	r3, sp, #12
   22d5c:	mov	r2, #0
   22d60:	mov	r1, r2
   22d64:	mov	r0, r6
   22d68:	bl	1d9f0 <__assert_fail@plt+0xc050>
   22d6c:	subs	r2, r0, #0
   22d70:	beq	22e04 <__assert_fail@plt+0x11464>
   22d74:	mov	r3, #10
   22d78:	mov	r1, r5
   22d7c:	mov	r0, r6
   22d80:	bl	1db8c <__assert_fail@plt+0xc1ec>
   22d84:	mov	r5, r0
   22d88:	mov	r0, r5
   22d8c:	add	sp, sp, #24
   22d90:	ldrd	r4, [sp]
   22d94:	ldrd	r6, [sp, #8]
   22d98:	ldrd	r8, [sp, #16]
   22d9c:	ldr	sl, [sp, #24]
   22da0:	add	sp, sp, #28
   22da4:	pop	{pc}		; (ldr pc, [sp], #4)
   22da8:	mov	r3, #12
   22dac:	ldr	r2, [sp, #60]	; 0x3c
   22db0:	str	r3, [r2]
   22db4:	mov	r5, r4
   22db8:	b	22d88 <__assert_fail@plt+0x113e8>
   22dbc:	mov	r0, r4
   22dc0:	bl	1c948 <__assert_fail@plt+0xafa8>
   22dc4:	mov	r3, #12
   22dc8:	ldr	r2, [sp, #60]	; 0x3c
   22dcc:	str	r3, [r2]
   22dd0:	mov	r5, r7
   22dd4:	b	22d88 <__assert_fail@plt+0x113e8>
   22dd8:	mov	r0, r4
   22ddc:	bl	1c948 <__assert_fail@plt+0xafa8>
   22de0:	mov	r0, r7
   22de4:	bl	1f6ec <__assert_fail@plt+0xdd4c>
   22de8:	ldr	r3, [sp, #60]	; 0x3c
   22dec:	str	r9, [r3]
   22df0:	mov	r5, #0
   22df4:	b	22d88 <__assert_fail@plt+0x113e8>
   22df8:	mov	r0, r7
   22dfc:	bl	1f6ec <__assert_fail@plt+0xdd4c>
   22e00:	b	22d88 <__assert_fail@plt+0x113e8>
   22e04:	mov	r0, r4
   22e08:	bl	1c948 <__assert_fail@plt+0xafa8>
   22e0c:	mov	r0, r7
   22e10:	bl	1f6ec <__assert_fail@plt+0xdd4c>
   22e14:	mov	r3, #12
   22e18:	ldr	r2, [sp, #60]	; 0x3c
   22e1c:	str	r3, [r2]
   22e20:	mov	r5, #0
   22e24:	b	22d88 <__assert_fail@plt+0x113e8>
   22e28:	strd	r4, [sp, #-36]!	; 0xffffffdc
   22e2c:	strd	r6, [sp, #8]
   22e30:	strd	r8, [sp, #16]
   22e34:	strd	sl, [sp, #24]
   22e38:	str	lr, [sp, #32]
   22e3c:	sub	sp, sp, #316	; 0x13c
   22e40:	ldr	fp, [r0]
   22e44:	ldr	r3, [fp, #92]	; 0x5c
   22e48:	cmp	r3, #1
   22e4c:	ldreq	r3, [r0, #12]
   22e50:	ubfxeq	r3, r3, #22, #1
   22e54:	movne	r3, #0
   22e58:	mov	r9, r3
   22e5c:	ldr	r3, [r1, #8]
   22e60:	cmp	r3, #0
   22e64:	ble	22f68 <__assert_fail@plt+0x115c8>
   22e68:	mov	r7, r2
   22e6c:	str	r1, [sp, #8]
   22e70:	str	r0, [sp, #28]
   22e74:	mov	r3, #0
   22e78:	str	r3, [sp, #4]
   22e7c:	str	r3, [sp, #20]
   22e80:	str	r3, [sp, #24]
   22e84:	mov	r3, #255	; 0xff
   22e88:	movt	r3, #32
   22e8c:	str	r3, [sp, #32]
   22e90:	mov	r3, #1
   22e94:	movt	r3, #32
   22e98:	str	r3, [sp, #36]	; 0x24
   22e9c:	mov	sl, fp
   22ea0:	b	22f00 <__assert_fail@plt+0x11560>
   22ea4:	ldrb	r5, [r2, r4, lsl #3]
   22ea8:	strb	r3, [r7, r5]
   22eac:	cmp	r9, #0
   22eb0:	beq	22ec8 <__assert_fail@plt+0x11528>
   22eb4:	bl	11748 <__ctype_tolower_loc@plt>
   22eb8:	ldr	r3, [r0]
   22ebc:	ldr	r3, [r3, r5, lsl #2]
   22ec0:	mov	r2, #1
   22ec4:	strb	r2, [r7, r3]
   22ec8:	ldr	r3, [sp, #28]
   22ecc:	ldr	r3, [r3, #12]
   22ed0:	tst	r3, #4194304	; 0x400000
   22ed4:	beq	22ee4 <__assert_fail@plt+0x11544>
   22ed8:	ldr	r3, [sl, #92]	; 0x5c
   22edc:	cmp	r3, #1
   22ee0:	bgt	22f84 <__assert_fail@plt+0x115e4>
   22ee4:	ldr	r3, [sp, #4]
   22ee8:	add	r2, r3, #1
   22eec:	str	r2, [sp, #4]
   22ef0:	ldr	r3, [sp, #8]
   22ef4:	ldr	r3, [r3, #8]
   22ef8:	cmp	r3, r2
   22efc:	ble	22f68 <__assert_fail@plt+0x115c8>
   22f00:	ldr	r3, [sp, #8]
   22f04:	ldr	r3, [r3, #12]
   22f08:	ldr	r2, [sp, #4]
   22f0c:	ldr	r4, [r3, r2, lsl #2]
   22f10:	lsl	r3, r4, #3
   22f14:	str	r3, [sp, #12]
   22f18:	ldr	r2, [sl]
   22f1c:	add	r3, r2, r3
   22f20:	ldrb	r3, [r3, #4]
   22f24:	mov	r5, r3
   22f28:	cmp	r3, #1
   22f2c:	beq	22ea4 <__assert_fail@plt+0x11504>
   22f30:	cmp	r3, #3
   22f34:	beq	23068 <__assert_fail@plt+0x116c8>
   22f38:	cmp	r3, #6
   22f3c:	beq	230f8 <__assert_fail@plt+0x11758>
   22f40:	and	r2, r3, #253	; 0xfd
   22f44:	cmp	r3, #2
   22f48:	cmpne	r2, #5
   22f4c:	bne	22ee4 <__assert_fail@plt+0x11544>
   22f50:	mov	r2, #256	; 0x100
   22f54:	mov	r1, #1
   22f58:	mov	r0, r7
   22f5c:	bl	11814 <memset@plt>
   22f60:	cmp	r5, #2
   22f64:	beq	23258 <__assert_fail@plt+0x118b8>
   22f68:	add	sp, sp, #316	; 0x13c
   22f6c:	ldrd	r4, [sp]
   22f70:	ldrd	r6, [sp, #8]
   22f74:	ldrd	r8, [sp, #16]
   22f78:	ldrd	sl, [sp, #24]
   22f7c:	add	sp, sp, #32
   22f80:	pop	{pc}		; (ldr pc, [sp], #4)
   22f84:	ldr	r3, [sl]
   22f88:	ldrb	r3, [r3, r4, lsl #3]
   22f8c:	strb	r3, [sp, #56]	; 0x38
   22f90:	add	r2, r4, #1
   22f94:	ldr	r3, [sl, #8]
   22f98:	cmp	r2, r3
   22f9c:	bcs	23058 <__assert_fail@plt+0x116b8>
   22fa0:	ldr	r3, [sp, #12]
   22fa4:	add	r3, r3, #8
   22fa8:	ldr	r1, [sl]
   22fac:	add	r3, r1, r3
   22fb0:	ldr	r1, [r3, #4]
   22fb4:	ldr	r0, [sp, #32]
   22fb8:	and	r1, r1, r0
   22fbc:	ldr	ip, [sp, #36]	; 0x24
   22fc0:	cmp	r1, ip
   22fc4:	bne	23060 <__assert_fail@plt+0x116c0>
   22fc8:	add	r4, sp, #57	; 0x39
   22fcc:	ldrb	r3, [r3]
   22fd0:	strb	r3, [r4], #1
   22fd4:	add	r2, r2, #1
   22fd8:	ldr	r3, [sl, #8]
   22fdc:	cmp	r3, r2
   22fe0:	bls	22ffc <__assert_fail@plt+0x1165c>
   22fe4:	ldr	r3, [sl]
   22fe8:	add	r3, r3, r2, lsl #3
   22fec:	ldr	r1, [r3, #4]
   22ff0:	and	r1, r1, r0
   22ff4:	cmp	r1, ip
   22ff8:	beq	22fcc <__assert_fail@plt+0x1162c>
   22ffc:	mov	r3, #0
   23000:	str	r3, [sp, #48]	; 0x30
   23004:	str	r3, [sp, #52]	; 0x34
   23008:	add	r1, sp, #56	; 0x38
   2300c:	sub	r4, r4, r1
   23010:	add	r3, sp, #48	; 0x30
   23014:	mov	r2, r4
   23018:	add	r0, sp, #44	; 0x2c
   2301c:	bl	1caa4 <__assert_fail@plt+0xb104>
   23020:	cmp	r4, r0
   23024:	bne	22ee4 <__assert_fail@plt+0x11544>
   23028:	ldr	r0, [sp, #44]	; 0x2c
   2302c:	bl	115f8 <towlower@plt>
   23030:	add	r2, sp, #48	; 0x30
   23034:	mov	r1, r0
   23038:	add	r0, sp, #56	; 0x38
   2303c:	bl	1152c <wcrtomb@plt>
   23040:	cmn	r0, #1
   23044:	beq	22ee4 <__assert_fail@plt+0x11544>
   23048:	ldrb	r3, [sp, #56]	; 0x38
   2304c:	mov	r2, #1
   23050:	strb	r2, [r7, r3]
   23054:	b	22ee4 <__assert_fail@plt+0x11544>
   23058:	add	r4, sp, #57	; 0x39
   2305c:	b	22ffc <__assert_fail@plt+0x1165c>
   23060:	add	r4, sp, #57	; 0x39
   23064:	b	22ffc <__assert_fail@plt+0x1165c>
   23068:	mov	fp, #0
   2306c:	mov	r8, #1
   23070:	str	sl, [sp, #16]
   23074:	b	230d0 <__assert_fail@plt+0x11730>
   23078:	strb	r8, [r7, r3]
   2307c:	add	r4, r4, #1
   23080:	add	r5, r5, #1
   23084:	cmp	r4, #32
   23088:	beq	230c4 <__assert_fail@plt+0x11724>
   2308c:	lsr	r3, r6, r4
   23090:	tst	r3, #1
   23094:	beq	2307c <__assert_fail@plt+0x116dc>
   23098:	strb	r8, [r7, r5]
   2309c:	cmp	r9, #0
   230a0:	beq	2307c <__assert_fail@plt+0x116dc>
   230a4:	add	r3, r5, #128	; 0x80
   230a8:	cmp	r3, #384	; 0x180
   230ac:	movcs	r3, r5
   230b0:	bcs	23078 <__assert_fail@plt+0x116d8>
   230b4:	bl	11748 <__ctype_tolower_loc@plt>
   230b8:	ldr	r3, [r0]
   230bc:	ldr	r3, [r3, r5, lsl #2]
   230c0:	b	23078 <__assert_fail@plt+0x116d8>
   230c4:	add	fp, fp, #4
   230c8:	cmp	fp, #32
   230cc:	beq	230f0 <__assert_fail@plt+0x11750>
   230d0:	lsl	r5, fp, #3
   230d4:	ldr	r3, [sp, #16]
   230d8:	ldr	r3, [r3]
   230dc:	ldr	r2, [sp, #12]
   230e0:	ldr	r3, [r3, r2]
   230e4:	ldr	r6, [r3, fp]
   230e8:	mov	r4, #0
   230ec:	b	2308c <__assert_fail@plt+0x116ec>
   230f0:	ldr	sl, [sp, #16]
   230f4:	b	22ee4 <__assert_fail@plt+0x11544>
   230f8:	ldr	r5, [r2, r4, lsl #3]
   230fc:	ldr	r3, [sl, #92]	; 0x5c
   23100:	cmp	r3, #1
   23104:	ble	23140 <__assert_fail@plt+0x117a0>
   23108:	ldr	r3, [r5, #36]	; 0x24
   2310c:	cmp	r3, #0
   23110:	bne	2312c <__assert_fail@plt+0x1178c>
   23114:	ldrb	r3, [r5, #16]
   23118:	tst	r3, #1
   2311c:	bne	2312c <__assert_fail@plt+0x1178c>
   23120:	ldr	r3, [r5, #32]
   23124:	cmp	r3, #0
   23128:	beq	23140 <__assert_fail@plt+0x117a0>
   2312c:	mov	r3, #0
   23130:	strb	r3, [sp, #48]	; 0x30
   23134:	ldr	r4, [sp, #20]
   23138:	ldr	r5, [sp, #24]
   2313c:	b	23170 <__assert_fail@plt+0x117d0>
   23140:	ldr	r3, [r5, #20]
   23144:	cmp	r3, #0
   23148:	ble	22ee4 <__assert_fail@plt+0x11544>
   2314c:	mov	r4, #0
   23150:	ldr	fp, [sp, #28]
   23154:	b	231b4 <__assert_fail@plt+0x11814>
   23158:	ldrb	r3, [sp, #48]	; 0x30
   2315c:	add	r3, r3, #1
   23160:	uxtb	r3, r3
   23164:	strb	r3, [sp, #48]	; 0x30
   23168:	cmp	r3, #0
   2316c:	beq	22ee4 <__assert_fail@plt+0x11544>
   23170:	str	r4, [sp, #56]	; 0x38
   23174:	str	r5, [sp, #60]	; 0x3c
   23178:	add	r3, sp, #56	; 0x38
   2317c:	mov	r2, #1
   23180:	add	r1, sp, #48	; 0x30
   23184:	mov	r0, #0
   23188:	bl	1caa4 <__assert_fail@plt+0xb104>
   2318c:	cmn	r0, #2
   23190:	bne	23158 <__assert_fail@plt+0x117b8>
   23194:	ldrb	r3, [sp, #48]	; 0x30
   23198:	mov	r2, #1
   2319c:	strb	r2, [r7, r3]
   231a0:	b	23158 <__assert_fail@plt+0x117b8>
   231a4:	add	r4, r4, #1
   231a8:	ldr	r3, [r5, #20]
   231ac:	cmp	r3, r4
   231b0:	ble	22ee4 <__assert_fail@plt+0x11544>
   231b4:	ldr	r3, [sp, #20]
   231b8:	str	r3, [sp, #48]	; 0x30
   231bc:	ldr	r3, [sp, #24]
   231c0:	str	r3, [sp, #52]	; 0x34
   231c4:	lsl	r8, r4, #2
   231c8:	ldr	r3, [r5]
   231cc:	add	r2, sp, #48	; 0x30
   231d0:	ldr	r1, [r3, r4, lsl #2]
   231d4:	add	r0, sp, #56	; 0x38
   231d8:	bl	1152c <wcrtomb@plt>
   231dc:	cmn	r0, #1
   231e0:	beq	2320c <__assert_fail@plt+0x1186c>
   231e4:	ldrb	r6, [sp, #56]	; 0x38
   231e8:	mov	r3, #1
   231ec:	strb	r3, [r7, r6]
   231f0:	cmp	r9, #0
   231f4:	beq	2320c <__assert_fail@plt+0x1186c>
   231f8:	bl	11748 <__ctype_tolower_loc@plt>
   231fc:	ldr	r3, [r0]
   23200:	ldr	r3, [r3, r6, lsl #2]
   23204:	mov	r2, #1
   23208:	strb	r2, [r7, r3]
   2320c:	ldr	r3, [fp, #12]
   23210:	tst	r3, #4194304	; 0x400000
   23214:	beq	231a4 <__assert_fail@plt+0x11804>
   23218:	ldr	r3, [sl, #92]	; 0x5c
   2321c:	cmp	r3, #1
   23220:	ble	231a4 <__assert_fail@plt+0x11804>
   23224:	ldr	r3, [r5]
   23228:	ldr	r0, [r3, r8]
   2322c:	bl	115f8 <towlower@plt>
   23230:	add	r2, sp, #48	; 0x30
   23234:	mov	r1, r0
   23238:	add	r0, sp, #56	; 0x38
   2323c:	bl	1152c <wcrtomb@plt>
   23240:	cmn	r0, #1
   23244:	beq	231a4 <__assert_fail@plt+0x11804>
   23248:	ldrb	r3, [sp, #56]	; 0x38
   2324c:	mov	r2, #1
   23250:	strb	r2, [r7, r3]
   23254:	b	231a4 <__assert_fail@plt+0x11804>
   23258:	ldr	r2, [sp, #28]
   2325c:	ldrb	r3, [r2, #28]
   23260:	orr	r3, r3, #1
   23264:	strb	r3, [r2, #28]
   23268:	b	22f68 <__assert_fail@plt+0x115c8>
   2326c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   23270:	strd	r6, [sp, #8]
   23274:	strd	r8, [sp, #16]
   23278:	strd	sl, [sp, #24]
   2327c:	str	lr, [sp, #32]
   23280:	sub	sp, sp, #28
   23284:	mov	r4, r0
   23288:	mov	r6, r1
   2328c:	mov	r7, r2
   23290:	ldr	r5, [r0, #24]
   23294:	cmp	r5, r1
   23298:	suble	r5, r1, r5
   2329c:	ble	232f8 <__assert_fail@plt+0x11958>
   232a0:	ldr	r3, [r0, #80]	; 0x50
   232a4:	cmp	r3, #1
   232a8:	bgt	233bc <__assert_fail@plt+0x11a1c>
   232ac:	ldr	r3, [r4, #44]	; 0x2c
   232b0:	str	r3, [r4, #48]	; 0x30
   232b4:	ldr	r3, [r4, #52]	; 0x34
   232b8:	str	r3, [r4, #56]	; 0x38
   232bc:	mov	r3, #0
   232c0:	str	r3, [r4, #28]
   232c4:	str	r3, [r4, #24]
   232c8:	str	r3, [r4, #32]
   232cc:	strb	r3, [r4, #76]	; 0x4c
   232d0:	and	r3, r7, #1
   232d4:	cmp	r3, #0
   232d8:	movne	r3, #4
   232dc:	moveq	r3, #6
   232e0:	str	r3, [r4, #60]	; 0x3c
   232e4:	ldrb	r3, [r4, #75]	; 0x4b
   232e8:	cmp	r3, #0
   232ec:	ldreq	r3, [r4]
   232f0:	streq	r3, [r4, #4]
   232f4:	mov	r5, r6
   232f8:	cmp	r5, #0
   232fc:	beq	23374 <__assert_fail@plt+0x119d4>
   23300:	ldr	r3, [r4, #32]
   23304:	cmp	r3, r5
   23308:	ble	235f0 <__assert_fail@plt+0x11c50>
   2330c:	ldrb	r3, [r4, #76]	; 0x4c
   23310:	cmp	r3, #0
   23314:	bne	233cc <__assert_fail@plt+0x11a2c>
   23318:	mov	r2, r7
   2331c:	sub	r1, r5, #1
   23320:	mov	r0, r4
   23324:	bl	20efc <__assert_fail@plt+0xf55c>
   23328:	str	r0, [r4, #60]	; 0x3c
   2332c:	ldr	r3, [r4, #80]	; 0x50
   23330:	cmp	r3, #1
   23334:	bgt	235bc <__assert_fail@plt+0x11c1c>
   23338:	ldrb	r3, [r4, #75]	; 0x4b
   2333c:	cmp	r3, #0
   23340:	bne	235d8 <__assert_fail@plt+0x11c38>
   23344:	ldr	r3, [r4, #28]
   23348:	sub	r3, r3, r5
   2334c:	str	r3, [r4, #28]
   23350:	ldr	r3, [r4, #32]
   23354:	sub	r3, r3, r5
   23358:	str	r3, [r4, #32]
   2335c:	ldrb	r3, [r4, #75]	; 0x4b
   23360:	cmp	r3, #0
   23364:	bne	23374 <__assert_fail@plt+0x119d4>
   23368:	ldr	r3, [r4, #4]
   2336c:	add	r3, r3, r5
   23370:	str	r3, [r4, #4]
   23374:	str	r6, [r4, #24]
   23378:	ldr	r3, [r4, #48]	; 0x30
   2337c:	sub	r3, r3, r5
   23380:	str	r3, [r4, #48]	; 0x30
   23384:	ldr	r2, [r4, #56]	; 0x38
   23388:	sub	r5, r2, r5
   2338c:	str	r5, [r4, #56]	; 0x38
   23390:	ldr	r2, [r4, #80]	; 0x50
   23394:	cmp	r2, #1
   23398:	ble	23934 <__assert_fail@plt+0x11f94>
   2339c:	ldrb	r3, [r4, #72]	; 0x48
   233a0:	cmp	r3, #0
   233a4:	beq	23928 <__assert_fail@plt+0x11f88>
   233a8:	mov	r0, r4
   233ac:	bl	1e114 <__assert_fail@plt+0xc774>
   233b0:	cmp	r0, #0
   233b4:	beq	23944 <__assert_fail@plt+0x11fa4>
   233b8:	b	2394c <__assert_fail@plt+0x11fac>
   233bc:	mov	r3, #0
   233c0:	str	r3, [r0, #16]
   233c4:	str	r3, [r0, #20]
   233c8:	b	232ac <__assert_fail@plt+0x1190c>
   233cc:	ldr	sl, [r4, #28]
   233d0:	ldr	r9, [r4, #12]
   233d4:	mov	r2, sl
   233d8:	mov	r1, #0
   233dc:	b	233ec <__assert_fail@plt+0x11a4c>
   233e0:	mov	r2, r8
   233e4:	cmp	r1, r2
   233e8:	bge	23410 <__assert_fail@plt+0x11a70>
   233ec:	add	r3, r1, r2
   233f0:	add	r3, r3, r3, lsr #31
   233f4:	asr	r8, r3, #1
   233f8:	ldr	r3, [r9, r8, lsl #2]
   233fc:	cmp	r3, r5
   23400:	bgt	233e0 <__assert_fail@plt+0x11a40>
   23404:	bge	23418 <__assert_fail@plt+0x11a78>
   23408:	add	r1, r8, #1
   2340c:	b	233e4 <__assert_fail@plt+0x11a44>
   23410:	cmp	r3, r5
   23414:	addlt	r8, r8, #1
   23418:	mov	r2, r7
   2341c:	sub	r1, r8, #1
   23420:	mov	r0, r4
   23424:	bl	20efc <__assert_fail@plt+0xf55c>
   23428:	str	r0, [r4, #60]	; 0x3c
   2342c:	cmp	r5, sl
   23430:	movge	r3, #0
   23434:	movlt	r3, #1
   23438:	cmp	r5, r8
   2343c:	movne	r3, #0
   23440:	cmp	r3, #0
   23444:	bne	2351c <__assert_fail@plt+0x11b7c>
   23448:	ldr	r3, [r4, #44]	; 0x2c
   2344c:	sub	r3, r3, r6
   23450:	add	r3, r3, r5
   23454:	str	r3, [r4, #48]	; 0x30
   23458:	ldr	r3, [r4, #52]	; 0x34
   2345c:	sub	r3, r3, r6
   23460:	add	r3, r3, r5
   23464:	str	r3, [r4, #56]	; 0x38
   23468:	mov	r3, #0
   2346c:	strb	r3, [r4, #76]	; 0x4c
   23470:	cmp	r8, r3
   23474:	ble	234a0 <__assert_fail@plt+0x11b00>
   23478:	sub	r2, r8, #-1073741823	; 0xc0000001
   2347c:	add	r3, r9, r2, lsl #2
   23480:	ldr	r2, [r9, r2, lsl #2]
   23484:	cmp	r2, r5
   23488:	bne	234a0 <__assert_fail@plt+0x11b00>
   2348c:	subs	r8, r8, #1
   23490:	beq	234a0 <__assert_fail@plt+0x11b00>
   23494:	ldr	r2, [r3, #-4]!
   23498:	cmp	r2, r5
   2349c:	beq	2348c <__assert_fail@plt+0x11aec>
   234a0:	cmp	r8, sl
   234a4:	bge	235a0 <__assert_fail@plt+0x11c00>
   234a8:	ldr	r2, [r4, #8]
   234ac:	add	r3, r2, r8, lsl #2
   234b0:	ldr	r2, [r2, r8, lsl #2]
   234b4:	cmn	r2, #1
   234b8:	bne	234d4 <__assert_fail@plt+0x11b34>
   234bc:	add	r8, r8, #1
   234c0:	cmp	sl, r8
   234c4:	beq	235a8 <__assert_fail@plt+0x11c08>
   234c8:	ldr	r2, [r3, #4]!
   234cc:	cmn	r2, #1
   234d0:	beq	234bc <__assert_fail@plt+0x11b1c>
   234d4:	ldr	r2, [r9, r8, lsl #2]
   234d8:	sub	r2, r2, r5
   234dc:	str	r2, [r4, #28]
   234e0:	cmp	r2, #0
   234e4:	beq	235b0 <__assert_fail@plt+0x11c10>
   234e8:	ble	2350c <__assert_fail@plt+0x11b6c>
   234ec:	mov	r3, #0
   234f0:	mvn	r1, #0
   234f4:	ldr	r2, [r4, #8]
   234f8:	str	r1, [r2, r3, lsl #2]
   234fc:	add	r3, r3, #1
   23500:	ldr	r2, [r4, #28]
   23504:	cmp	r2, r3
   23508:	bgt	234f4 <__assert_fail@plt+0x11b54>
   2350c:	mov	r1, #255	; 0xff
   23510:	ldr	r0, [r4, #4]
   23514:	bl	11814 <memset@plt>
   23518:	b	235b0 <__assert_fail@plt+0x11c10>
   2351c:	ldr	r3, [r9, r8, lsl #2]
   23520:	cmp	r3, r5
   23524:	bne	23448 <__assert_fail@plt+0x11aa8>
   23528:	ldr	r0, [r4, #8]
   2352c:	lsl	r7, r5, #2
   23530:	sub	r2, sl, r5
   23534:	lsl	r2, r2, #2
   23538:	add	r1, r0, r7
   2353c:	bl	1158c <memmove@plt>
   23540:	ldr	r0, [r4, #4]
   23544:	ldr	r2, [r4, #28]
   23548:	sub	r2, r2, r5
   2354c:	add	r1, r0, r5
   23550:	bl	1158c <memmove@plt>
   23554:	ldr	r3, [r4, #28]
   23558:	sub	r3, r3, r5
   2355c:	str	r3, [r4, #28]
   23560:	ldr	r2, [r4, #32]
   23564:	sub	r2, r2, r5
   23568:	str	r2, [r4, #32]
   2356c:	cmp	r3, #0
   23570:	ble	2335c <__assert_fail@plt+0x119bc>
   23574:	mov	r3, #0
   23578:	ldr	r1, [r4, #12]
   2357c:	ldr	r2, [r1, r7]
   23580:	sub	r2, r2, r5
   23584:	str	r2, [r1, r3, lsl #2]
   23588:	add	r3, r3, #1
   2358c:	add	r7, r7, #4
   23590:	ldr	r2, [r4, #28]
   23594:	cmp	r2, r3
   23598:	bgt	23578 <__assert_fail@plt+0x11bd8>
   2359c:	b	2335c <__assert_fail@plt+0x119bc>
   235a0:	cmp	r8, sl
   235a4:	bne	234d4 <__assert_fail@plt+0x11b34>
   235a8:	mov	r3, #0
   235ac:	str	r3, [r4, #28]
   235b0:	ldr	r3, [r4, #28]
   235b4:	str	r3, [r4, #32]
   235b8:	b	2335c <__assert_fail@plt+0x119bc>
   235bc:	ldr	r0, [r4, #8]
   235c0:	ldr	r2, [r4, #28]
   235c4:	sub	r2, r2, r5
   235c8:	lsl	r2, r2, #2
   235cc:	add	r1, r0, r5, lsl #2
   235d0:	bl	1158c <memmove@plt>
   235d4:	b	23338 <__assert_fail@plt+0x11998>
   235d8:	ldr	r0, [r4, #4]
   235dc:	ldr	r2, [r4, #28]
   235e0:	sub	r2, r2, r5
   235e4:	add	r1, r0, r5
   235e8:	bl	1158c <memmove@plt>
   235ec:	b	23344 <__assert_fail@plt+0x119a4>
   235f0:	ldr	fp, [r4, #28]
   235f4:	ldrb	r3, [r4, #76]	; 0x4c
   235f8:	cmp	r3, #0
   235fc:	bne	2375c <__assert_fail@plt+0x11dbc>
   23600:	mov	r3, #0
   23604:	str	r3, [r4, #28]
   23608:	ldr	r3, [r4, #80]	; 0x50
   2360c:	cmp	r3, #1
   23610:	ble	238c4 <__assert_fail@plt+0x11f24>
   23614:	ldrb	r2, [r4, #73]	; 0x49
   23618:	cmp	r2, #0
   2361c:	beq	236d4 <__assert_fail@plt+0x11d34>
   23620:	ldr	r1, [r4]
   23624:	ldr	r9, [r4, #24]
   23628:	add	r9, r1, r9
   2362c:	sub	r3, r5, r3
   23630:	add	r3, r9, r3
   23634:	cmp	r1, r3
   23638:	movcc	r1, r3
   2363c:	mov	sl, r5
   23640:	sub	r3, r5, #1
   23644:	add	r8, r9, r3
   23648:	cmp	r1, r8
   2364c:	bhi	236d4 <__assert_fail@plt+0x11d34>
   23650:	ldrb	r3, [r9, r3]
   23654:	and	r3, r3, #192	; 0xc0
   23658:	cmp	r3, #128	; 0x80
   2365c:	subeq	r3, r8, #1
   23660:	subeq	r1, r1, #1
   23664:	bne	23688 <__assert_fail@plt+0x11ce8>
   23668:	mov	r8, r3
   2366c:	cmp	r3, r1
   23670:	beq	236d4 <__assert_fail@plt+0x11d34>
   23674:	sub	r3, r3, #1
   23678:	ldrb	r2, [r8]
   2367c:	and	r2, r2, #192	; 0xc0
   23680:	cmp	r2, #128	; 0x80
   23684:	beq	23668 <__assert_fail@plt+0x11cc8>
   23688:	ldr	r2, [r4, #48]	; 0x30
   2368c:	add	r2, r9, r2
   23690:	sub	r2, r2, r8
   23694:	ldr	r3, [r4, #64]	; 0x40
   23698:	cmp	r3, #0
   2369c:	moveq	ip, r8
   236a0:	bne	23788 <__assert_fail@plt+0x11de8>
   236a4:	mov	r0, #0
   236a8:	mov	r1, #0
   236ac:	strd	r0, [sp, #16]
   236b0:	add	r3, sp, #16
   236b4:	mov	r1, ip
   236b8:	add	r0, sp, #4
   236bc:	bl	1caa4 <__assert_fail@plt+0xb104>
   236c0:	add	r9, r9, sl
   236c4:	sub	r8, r9, r8
   236c8:	cmp	r8, r0
   236cc:	cmnls	r0, #3
   236d0:	bls	237d0 <__assert_fail@plt+0x11e30>
   236d4:	ldr	r0, [r4, #24]
   236d8:	ldr	r3, [r4, #32]
   236dc:	add	r0, r0, r3
   236e0:	cmp	r6, r0
   236e4:	ble	23998 <__assert_fail@plt+0x11ff8>
   236e8:	add	r9, r4, #16
   236ec:	ldr	r8, [r4, #44]	; 0x2c
   236f0:	sub	r8, r8, r0
   236f4:	ldrd	r2, [r9]
   236f8:	strd	r2, [sp, #16]
   236fc:	mov	sl, r0
   23700:	ldr	r1, [r4]
   23704:	mov	r3, r9
   23708:	mov	r2, r8
   2370c:	add	r1, r1, r0
   23710:	add	r0, sp, #8
   23714:	bl	1caa4 <__assert_fail@plt+0xb104>
   23718:	sub	r3, r0, #1
   2371c:	cmn	r3, #4
   23720:	ldrls	r8, [sp, #8]
   23724:	bhi	23824 <__assert_fail@plt+0x11e84>
   23728:	add	r0, sl, r0
   2372c:	cmp	r6, r0
   23730:	bgt	236ec <__assert_fail@plt+0x11d4c>
   23734:	sub	r0, r0, r6
   23738:	str	r0, [r4, #28]
   2373c:	cmn	r8, #1
   23740:	bne	237f0 <__assert_fail@plt+0x11e50>
   23744:	mov	r2, r7
   23748:	sub	r1, fp, #1
   2374c:	mov	r0, r4
   23750:	bl	20efc <__assert_fail@plt+0xf55c>
   23754:	str	r0, [r4, #60]	; 0x3c
   23758:	b	2380c <__assert_fail@plt+0x11e6c>
   2375c:	ldr	r3, [r4, #44]	; 0x2c
   23760:	sub	r3, r3, r6
   23764:	add	r3, r3, r5
   23768:	str	r3, [r4, #48]	; 0x30
   2376c:	ldr	r3, [r4, #52]	; 0x34
   23770:	sub	r3, r3, r6
   23774:	add	r3, r3, r5
   23778:	str	r3, [r4, #56]	; 0x38
   2377c:	mov	r3, #0
   23780:	strb	r3, [r4, #76]	; 0x4c
   23784:	b	23600 <__assert_fail@plt+0x11c60>
   23788:	cmp	r2, #6
   2378c:	movlt	r0, r2
   23790:	movge	r0, #6
   23794:	cmp	r2, #0
   23798:	addle	ip, sp, #8
   2379c:	ble	236a4 <__assert_fail@plt+0x11d04>
   237a0:	add	r1, r8, r0
   237a4:	add	ip, sp, #24
   237a8:	add	r0, ip, r0
   237ac:	sub	r0, r0, #17
   237b0:	mov	lr, r8
   237b4:	ldrb	ip, [r1, #-1]!
   237b8:	ldrb	ip, [r3, ip]
   237bc:	strb	ip, [r0], #-1
   237c0:	cmp	r1, lr
   237c4:	bne	237b4 <__assert_fail@plt+0x11e14>
   237c8:	add	ip, sp, #8
   237cc:	b	236a4 <__assert_fail@plt+0x11d04>
   237d0:	mov	r3, #0
   237d4:	str	r3, [r4, #16]
   237d8:	str	r3, [r4, #20]
   237dc:	sub	r0, r0, r8
   237e0:	str	r0, [r4, #28]
   237e4:	ldr	r8, [sp, #4]
   237e8:	cmn	r8, #1
   237ec:	beq	236d4 <__assert_fail@plt+0x11d34>
   237f0:	ldrb	r3, [r4, #78]	; 0x4e
   237f4:	cmp	r3, #0
   237f8:	bne	23848 <__assert_fail@plt+0x11ea8>
   237fc:	cmp	r8, #10
   23800:	movne	r3, #0
   23804:	beq	23870 <__assert_fail@plt+0x11ed0>
   23808:	str	r3, [r4, #60]	; 0x3c
   2380c:	ldr	r2, [r4, #28]
   23810:	cmp	r2, #0
   23814:	bne	23884 <__assert_fail@plt+0x11ee4>
   23818:	ldr	r3, [r4, #28]
   2381c:	str	r3, [r4, #32]
   23820:	b	2335c <__assert_fail@plt+0x119bc>
   23824:	cmp	r8, #0
   23828:	cmpne	r0, #0
   2382c:	ldrne	r3, [r4]
   23830:	ldrbne	r8, [r3, sl]
   23834:	moveq	r8, #0
   23838:	ldrd	r2, [sp, #16]
   2383c:	strd	r2, [r9]
   23840:	mov	r0, #1
   23844:	b	23728 <__assert_fail@plt+0x11d88>
   23848:	mov	r0, r8
   2384c:	bl	117e4 <iswalnum@plt>
   23850:	subs	r3, r8, #95	; 0x5f
   23854:	movne	r3, #1
   23858:	cmp	r0, #0
   2385c:	movne	r3, #0
   23860:	cmp	r3, #0
   23864:	moveq	r3, #1
   23868:	beq	23808 <__assert_fail@plt+0x11e68>
   2386c:	b	237fc <__assert_fail@plt+0x11e5c>
   23870:	ldrb	r3, [r4, #77]	; 0x4d
   23874:	cmp	r3, #0
   23878:	moveq	r3, #0
   2387c:	movne	r3, #2
   23880:	b	23808 <__assert_fail@plt+0x11e68>
   23884:	ble	238a8 <__assert_fail@plt+0x11f08>
   23888:	mov	r3, #0
   2388c:	mvn	r1, #0
   23890:	ldr	r2, [r4, #8]
   23894:	str	r1, [r2, r3, lsl #2]
   23898:	add	r3, r3, #1
   2389c:	ldr	r2, [r4, #28]
   238a0:	cmp	r2, r3
   238a4:	bgt	23890 <__assert_fail@plt+0x11ef0>
   238a8:	ldrb	r3, [r4, #75]	; 0x4b
   238ac:	cmp	r3, #0
   238b0:	beq	23818 <__assert_fail@plt+0x11e78>
   238b4:	mov	r1, #255	; 0xff
   238b8:	ldr	r0, [r4, #4]
   238bc:	bl	11814 <memset@plt>
   238c0:	b	23818 <__assert_fail@plt+0x11e78>
   238c4:	ldr	r3, [r4]
   238c8:	ldr	r2, [r4, #24]
   238cc:	add	r3, r3, r5
   238d0:	add	r3, r3, r2
   238d4:	ldrb	r1, [r3, #-1]
   238d8:	mov	r3, #0
   238dc:	str	r3, [r4, #32]
   238e0:	ldr	r3, [r4, #64]	; 0x40
   238e4:	cmp	r3, #0
   238e8:	ldrbne	r1, [r3, r1]
   238ec:	lsr	r2, r1, #5
   238f0:	ldr	r0, [r4, #68]	; 0x44
   238f4:	and	r3, r1, #31
   238f8:	ldr	r2, [r0, r2, lsl #2]
   238fc:	lsr	r3, r2, r3
   23900:	ands	r3, r3, #1
   23904:	bne	23910 <__assert_fail@plt+0x11f70>
   23908:	cmp	r1, #10
   2390c:	beq	23918 <__assert_fail@plt+0x11f78>
   23910:	str	r3, [r4, #60]	; 0x3c
   23914:	b	2335c <__assert_fail@plt+0x119bc>
   23918:	ldrb	r2, [r4, #77]	; 0x4d
   2391c:	cmp	r2, #0
   23920:	movne	r3, #2
   23924:	b	23910 <__assert_fail@plt+0x11f70>
   23928:	mov	r0, r4
   2392c:	bl	1df7c <__assert_fail@plt+0xc5dc>
   23930:	b	23944 <__assert_fail@plt+0x11fa4>
   23934:	ldrb	r2, [r4, #75]	; 0x4b
   23938:	cmp	r2, #0
   2393c:	streq	r3, [r4, #28]
   23940:	bne	23968 <__assert_fail@plt+0x11fc8>
   23944:	mov	r0, #0
   23948:	str	r0, [r4, #40]	; 0x28
   2394c:	add	sp, sp, #28
   23950:	ldrd	r4, [sp]
   23954:	ldrd	r6, [sp, #8]
   23958:	ldrd	r8, [sp, #16]
   2395c:	ldrd	sl, [sp, #24]
   23960:	add	sp, sp, #32
   23964:	pop	{pc}		; (ldr pc, [sp], #4)
   23968:	ldrb	r3, [r4, #72]	; 0x48
   2396c:	cmp	r3, #0
   23970:	bne	2398c <__assert_fail@plt+0x11fec>
   23974:	ldr	r3, [r4, #64]	; 0x40
   23978:	cmp	r3, #0
   2397c:	beq	23944 <__assert_fail@plt+0x11fa4>
   23980:	mov	r0, r4
   23984:	bl	1cc38 <__assert_fail@plt+0xb298>
   23988:	b	23944 <__assert_fail@plt+0x11fa4>
   2398c:	mov	r0, r4
   23990:	bl	1ea98 <__assert_fail@plt+0xd0f8>
   23994:	b	23944 <__assert_fail@plt+0x11fa4>
   23998:	sub	r0, r0, r6
   2399c:	str	r0, [r4, #28]
   239a0:	b	23744 <__assert_fail@plt+0x11da4>
   239a4:	strd	r4, [sp, #-36]!	; 0xffffffdc
   239a8:	strd	r6, [sp, #8]
   239ac:	strd	r8, [sp, #16]
   239b0:	strd	sl, [sp, #24]
   239b4:	str	lr, [sp, #32]
   239b8:	sub	sp, sp, #4
   239bc:	ldr	r9, [r0]
   239c0:	add	ip, r9, r1, lsl #3
   239c4:	ldrb	fp, [ip, #4]
   239c8:	cmp	fp, #7
   239cc:	beq	23a38 <__assert_fail@plt+0x12098>
   239d0:	mov	r5, r3
   239d4:	mov	r6, r2
   239d8:	mov	r8, r1
   239dc:	mov	r7, r0
   239e0:	mov	r1, r3
   239e4:	mov	r0, r2
   239e8:	bl	1cbac <__assert_fail@plt+0xb20c>
   239ec:	mov	sl, r0
   239f0:	cmp	fp, #5
   239f4:	beq	23b4c <__assert_fail@plt+0x121ac>
   239f8:	cmp	fp, #6
   239fc:	movne	r4, #0
   23a00:	moveq	r4, #1
   23a04:	cmp	r0, #1
   23a08:	movle	r4, #0
   23a0c:	cmp	r4, #0
   23a10:	moveq	sl, #0
   23a14:	bne	23b94 <__assert_fail@plt+0x121f4>
   23a18:	mov	r0, sl
   23a1c:	add	sp, sp, #4
   23a20:	ldrd	r4, [sp]
   23a24:	ldrd	r6, [sp, #8]
   23a28:	ldrd	r8, [sp, #16]
   23a2c:	ldrd	sl, [sp, #24]
   23a30:	add	sp, sp, #32
   23a34:	pop	{pc}		; (ldr pc, [sp], #4)
   23a38:	ldr	r1, [r2, #4]
   23a3c:	ldrb	r0, [r1, r3]
   23a40:	cmp	r0, #193	; 0xc1
   23a44:	movls	sl, #0
   23a48:	bls	23a18 <__assert_fail@plt+0x12078>
   23a4c:	add	ip, r3, #1
   23a50:	ldr	r2, [r2, #48]	; 0x30
   23a54:	cmp	ip, r2
   23a58:	movge	sl, #0
   23a5c:	bge	23a18 <__assert_fail@plt+0x12078>
   23a60:	add	lr, r1, r3
   23a64:	ldrb	lr, [lr, #1]
   23a68:	cmp	r0, #223	; 0xdf
   23a6c:	bls	23ad4 <__assert_fail@plt+0x12134>
   23a70:	cmp	r0, #239	; 0xef
   23a74:	bhi	23ae8 <__assert_fail@plt+0x12148>
   23a78:	cmp	lr, #159	; 0x9f
   23a7c:	cmpls	r0, #224	; 0xe0
   23a80:	movne	sl, #3
   23a84:	beq	23cbc <__assert_fail@plt+0x1231c>
   23a88:	add	r0, sl, r3
   23a8c:	cmp	r2, r0
   23a90:	movlt	sl, #0
   23a94:	blt	23a18 <__assert_fail@plt+0x12078>
   23a98:	ldrb	r2, [r1, ip]
   23a9c:	eor	r2, r2, #128	; 0x80
   23aa0:	cmp	r2, #63	; 0x3f
   23aa4:	bhi	23cc4 <__assert_fail@plt+0x12324>
   23aa8:	add	r0, r3, #2
   23aac:	add	r0, r1, r0
   23ab0:	add	r3, r1, r3
   23ab4:	add	r3, r3, sl
   23ab8:	ldrb	r2, [r0], #1
   23abc:	eor	r2, r2, #128	; 0x80
   23ac0:	cmp	r2, #63	; 0x3f
   23ac4:	bhi	23ccc <__assert_fail@plt+0x1232c>
   23ac8:	cmp	r3, r0
   23acc:	bne	23ab8 <__assert_fail@plt+0x12118>
   23ad0:	b	23a18 <__assert_fail@plt+0x12078>
   23ad4:	eor	lr, lr, #128	; 0x80
   23ad8:	cmp	lr, #63	; 0x3f
   23adc:	movhi	sl, #0
   23ae0:	movls	sl, #2
   23ae4:	b	23a18 <__assert_fail@plt+0x12078>
   23ae8:	cmp	r0, #247	; 0xf7
   23aec:	bhi	23b08 <__assert_fail@plt+0x12168>
   23af0:	cmp	lr, #143	; 0x8f
   23af4:	cmpls	r0, #240	; 0xf0
   23af8:	movne	sl, #4
   23afc:	bne	23a88 <__assert_fail@plt+0x120e8>
   23b00:	mov	sl, #0
   23b04:	b	23a18 <__assert_fail@plt+0x12078>
   23b08:	cmp	r0, #251	; 0xfb
   23b0c:	bhi	23b28 <__assert_fail@plt+0x12188>
   23b10:	cmp	lr, #135	; 0x87
   23b14:	cmpls	r0, #248	; 0xf8
   23b18:	movne	sl, #5
   23b1c:	bne	23a88 <__assert_fail@plt+0x120e8>
   23b20:	mov	sl, #0
   23b24:	b	23a18 <__assert_fail@plt+0x12078>
   23b28:	cmp	r0, #253	; 0xfd
   23b2c:	movhi	sl, #0
   23b30:	bhi	23a18 <__assert_fail@plt+0x12078>
   23b34:	cmp	lr, #131	; 0x83
   23b38:	cmpls	r0, #252	; 0xfc
   23b3c:	moveq	sl, #0
   23b40:	beq	23a18 <__assert_fail@plt+0x12078>
   23b44:	mov	sl, #6
   23b48:	b	23a88 <__assert_fail@plt+0x120e8>
   23b4c:	cmp	r0, #1
   23b50:	movle	sl, #0
   23b54:	ble	23a18 <__assert_fail@plt+0x12078>
   23b58:	ldr	r3, [r7, #128]	; 0x80
   23b5c:	tst	r3, #64	; 0x40
   23b60:	bne	23b78 <__assert_fail@plt+0x121d8>
   23b64:	ldr	r2, [r6, #4]
   23b68:	ldrb	r2, [r2, r5]
   23b6c:	cmp	r2, #10
   23b70:	moveq	sl, #0
   23b74:	beq	23a18 <__assert_fail@plt+0x12078>
   23b78:	tst	r3, #128	; 0x80
   23b7c:	beq	23a18 <__assert_fail@plt+0x12078>
   23b80:	ldr	r3, [r6, #4]
   23b84:	ldrb	r3, [r3, r5]
   23b88:	cmp	r3, #0
   23b8c:	moveq	sl, #0
   23b90:	b	23a18 <__assert_fail@plt+0x12078>
   23b94:	ldr	r7, [r9, r8, lsl #3]
   23b98:	ldr	r3, [r7, #32]
   23b9c:	cmp	r3, #0
   23ba0:	bne	23be0 <__assert_fail@plt+0x12240>
   23ba4:	ldr	r3, [r7, #36]	; 0x24
   23ba8:	cmp	r3, #0
   23bac:	bne	23be0 <__assert_fail@plt+0x12240>
   23bb0:	ldr	r3, [r7, #20]
   23bb4:	cmp	r3, #0
   23bb8:	moveq	r4, #0
   23bbc:	beq	23c74 <__assert_fail@plt+0x122d4>
   23bc0:	mov	r1, r5
   23bc4:	mov	r0, r6
   23bc8:	bl	1cc1c <__assert_fail@plt+0xb27c>
   23bcc:	mov	r4, r0
   23bd0:	ldr	r0, [r7, #20]
   23bd4:	cmp	r0, #0
   23bd8:	bgt	23bfc <__assert_fail@plt+0x1225c>
   23bdc:	b	23c74 <__assert_fail@plt+0x122d4>
   23be0:	mov	r1, r5
   23be4:	mov	r0, r6
   23be8:	bl	1cc1c <__assert_fail@plt+0xb27c>
   23bec:	mov	r4, r0
   23bf0:	ldr	r0, [r7, #20]
   23bf4:	cmp	r0, #0
   23bf8:	ble	23c3c <__assert_fail@plt+0x1229c>
   23bfc:	ldr	r2, [r7]
   23c00:	ldr	r3, [r2]
   23c04:	cmp	r3, r4
   23c08:	beq	23c28 <__assert_fail@plt+0x12288>
   23c0c:	mov	r3, #0
   23c10:	add	r3, r3, #1
   23c14:	cmp	r0, r3
   23c18:	beq	23c3c <__assert_fail@plt+0x1229c>
   23c1c:	ldr	r1, [r2, #4]!
   23c20:	cmp	r1, r4
   23c24:	bne	23c10 <__assert_fail@plt+0x12270>
   23c28:	ldrb	r3, [r7, #16]
   23c2c:	and	r3, r3, #1
   23c30:	cmp	r3, #0
   23c34:	movne	sl, #0
   23c38:	b	23a18 <__assert_fail@plt+0x12078>
   23c3c:	ldr	r3, [r7, #36]	; 0x24
   23c40:	cmp	r3, #0
   23c44:	ble	23c74 <__assert_fail@plt+0x122d4>
   23c48:	mov	r5, #0
   23c4c:	ldr	r3, [r7, #12]
   23c50:	ldr	r1, [r3, r5, lsl #2]
   23c54:	mov	r0, r4
   23c58:	bl	11538 <iswctype@plt>
   23c5c:	cmp	r0, #0
   23c60:	bne	23c28 <__assert_fail@plt+0x12288>
   23c64:	add	r5, r5, #1
   23c68:	ldr	r3, [r7, #36]	; 0x24
   23c6c:	cmp	r3, r5
   23c70:	bgt	23c4c <__assert_fail@plt+0x122ac>
   23c74:	ldr	r0, [r7, #32]
   23c78:	cmp	r0, #0
   23c7c:	ble	23cdc <__assert_fail@plt+0x1233c>
   23c80:	ldr	r2, [r7, #4]
   23c84:	sub	r2, r2, #4
   23c88:	mov	r3, #0
   23c8c:	b	23c9c <__assert_fail@plt+0x122fc>
   23c90:	add	r3, r3, #1
   23c94:	cmp	r0, r3
   23c98:	beq	23cdc <__assert_fail@plt+0x1233c>
   23c9c:	ldr	r1, [r2, #4]!
   23ca0:	cmp	r4, r1
   23ca4:	bcc	23c90 <__assert_fail@plt+0x122f0>
   23ca8:	ldr	r1, [r7, #8]
   23cac:	ldr	r1, [r1, r3, lsl #2]
   23cb0:	cmp	r4, r1
   23cb4:	bhi	23c90 <__assert_fail@plt+0x122f0>
   23cb8:	b	23c28 <__assert_fail@plt+0x12288>
   23cbc:	mov	sl, #0
   23cc0:	b	23a18 <__assert_fail@plt+0x12078>
   23cc4:	mov	sl, #0
   23cc8:	b	23a18 <__assert_fail@plt+0x12078>
   23ccc:	mov	sl, #0
   23cd0:	b	23a18 <__assert_fail@plt+0x12078>
   23cd4:	mov	sl, #0
   23cd8:	b	23a18 <__assert_fail@plt+0x12078>
   23cdc:	ldrb	r3, [r7, #16]
   23ce0:	tst	r3, #1
   23ce4:	beq	23cd4 <__assert_fail@plt+0x12334>
   23ce8:	cmp	sl, #1
   23cec:	movlt	sl, #1
   23cf0:	b	23a18 <__assert_fail@plt+0x12078>
   23cf4:	strd	r4, [sp, #-36]!	; 0xffffffdc
   23cf8:	strd	r6, [sp, #8]
   23cfc:	strd	r8, [sp, #16]
   23d00:	strd	sl, [sp, #24]
   23d04:	str	lr, [sp, #32]
   23d08:	sub	sp, sp, #164	; 0xa4
   23d0c:	mov	r9, r0
   23d10:	mov	r4, r1
   23d14:	mov	r8, r2
   23d18:	str	r3, [sp, #24]
   23d1c:	ldr	fp, [sp, #204]	; 0xcc
   23d20:	ldr	r3, [r1]
   23d24:	str	r3, [sp, #20]
   23d28:	ldrb	r2, [r2, #4]
   23d2c:	sub	r3, r2, #1
   23d30:	cmp	r3, #35	; 0x23
   23d34:	ldrls	pc, [pc, r3, lsl #2]
   23d38:	b	24bf4 <__assert_fail@plt+0x13254>
   23d3c:	andeq	r3, r2, ip, asr #27
   23d40:	andeq	r5, r2, r8, asr r0
   23d44:	strdeq	r4, [r2], -r4	; <UNPREDICTABLE>
   23d48:	andeq	r4, r2, r8, lsl #15
   23d4c:	andeq	r4, r2, r0, lsl #22
   23d50:	strdeq	r4, [r2], -r4	; <UNPREDICTABLE>
   23d54:	strdeq	r4, [r2], -r4	; <UNPREDICTABLE>
   23d58:	muleq	r2, r4, lr
   23d5c:	andeq	r4, r2, ip, lsr r8
   23d60:	andeq	r5, r2, r8, asr r0
   23d64:	andeq	r4, r2, r8, lsl r8
   23d68:	strdeq	r4, [r2], -r4	; <UNPREDICTABLE>
   23d6c:	strdeq	r4, [r2], -r4	; <UNPREDICTABLE>
   23d70:	strdeq	r4, [r2], -r4	; <UNPREDICTABLE>
   23d74:	strdeq	r4, [r2], -r4	; <UNPREDICTABLE>
   23d78:	strdeq	r4, [r2], -r4	; <UNPREDICTABLE>
   23d7c:	strdeq	r4, [r2], -r4	; <UNPREDICTABLE>
   23d80:	andeq	r4, r2, r8, lsl r8
   23d84:	andeq	r4, r2, r8, lsl r8
   23d88:	andeq	r3, r2, r4, ror pc
   23d8c:	strdeq	r4, [r2], -r4	; <UNPREDICTABLE>
   23d90:	strdeq	r4, [r2], -r4	; <UNPREDICTABLE>
   23d94:	andeq	r4, r2, r0, lsl #16
   23d98:	andeq	r4, r2, r4, asr #16
   23d9c:	strdeq	r4, [r2], -r4	; <UNPREDICTABLE>
   23da0:	strdeq	r4, [r2], -r4	; <UNPREDICTABLE>
   23da4:	strdeq	r4, [r2], -r4	; <UNPREDICTABLE>
   23da8:	strdeq	r4, [r2], -r4	; <UNPREDICTABLE>
   23dac:	strdeq	r4, [r2], -r4	; <UNPREDICTABLE>
   23db0:	strdeq	r4, [r2], -r4	; <UNPREDICTABLE>
   23db4:	strdeq	r4, [r2], -r4	; <UNPREDICTABLE>
   23db8:	andeq	r4, r2, r4, asr #22
   23dbc:	andeq	r4, r2, r4, asr #22
   23dc0:	muleq	r2, ip, fp
   23dc4:	muleq	r2, ip, fp
   23dc8:	strdeq	r4, [r2], -r4	; <UNPREDICTABLE>
   23dcc:	mov	r3, r8
   23dd0:	mov	r2, #0
   23dd4:	mov	r1, r2
   23dd8:	ldr	r0, [sp, #20]
   23ddc:	bl	1d9f0 <__assert_fail@plt+0xc050>
   23de0:	subs	sl, r0, #0
   23de4:	moveq	r3, #12
   23de8:	streq	r3, [fp]
   23dec:	beq	24e7c <__assert_fail@plt+0x134dc>
   23df0:	ldr	r3, [sp, #20]
   23df4:	ldr	r3, [r3, #92]	; 0x5c
   23df8:	cmp	r3, #1
   23dfc:	movgt	r6, #0
   23e00:	movgt	r5, #16
   23e04:	ble	24870 <__assert_fail@plt+0x12ed0>
   23e08:	ldr	r3, [r9, #40]	; 0x28
   23e0c:	ldr	r2, [r9, #56]	; 0x38
   23e10:	cmp	r2, r3
   23e14:	ble	24870 <__assert_fail@plt+0x12ed0>
   23e18:	ldr	r2, [r9, #28]
   23e1c:	cmp	r3, r2
   23e20:	beq	24870 <__assert_fail@plt+0x12ed0>
   23e24:	ldr	r2, [r9, #8]
   23e28:	ldr	r3, [r2, r3, lsl #2]
   23e2c:	cmn	r3, #1
   23e30:	bne	24870 <__assert_fail@plt+0x12ed0>
   23e34:	ldr	r2, [sp, #24]
   23e38:	mov	r1, r9
   23e3c:	mov	r0, r8
   23e40:	bl	1f5f4 <__assert_fail@plt+0xdc54>
   23e44:	mov	r3, r8
   23e48:	mov	r2, r6
   23e4c:	mov	r1, r6
   23e50:	ldr	r7, [sp, #20]
   23e54:	mov	r0, r7
   23e58:	bl	1d9f0 <__assert_fail@plt+0xc050>
   23e5c:	mov	r4, r0
   23e60:	mov	r3, r5
   23e64:	mov	r2, r0
   23e68:	mov	r1, sl
   23e6c:	mov	r0, r7
   23e70:	bl	1db8c <__assert_fail@plt+0xc1ec>
   23e74:	mov	sl, r0
   23e78:	cmp	r0, #0
   23e7c:	cmpne	r4, #0
   23e80:	bne	23e08 <__assert_fail@plt+0x12468>
   23e84:	mov	r3, #12
   23e88:	str	r3, [fp]
   23e8c:	mov	sl, #0
   23e90:	b	24e7c <__assert_fail@plt+0x134dc>
   23e94:	ldr	r5, [r1, #24]
   23e98:	add	r3, r5, #1
   23e9c:	str	r3, [r1, #24]
   23ea0:	ldr	r6, [sp, #24]
   23ea4:	orr	r2, r6, #8388608	; 0x800000
   23ea8:	mov	r1, r0
   23eac:	mov	r0, r8
   23eb0:	bl	1f5f4 <__assert_fail@plt+0xdc54>
   23eb4:	ldrb	r3, [r8, #4]
   23eb8:	cmp	r3, #9
   23ebc:	moveq	r0, #0
   23ec0:	bne	23f0c <__assert_fail@plt+0x1256c>
   23ec4:	cmp	r5, #8
   23ec8:	bhi	23ee0 <__assert_fail@plt+0x12540>
   23ecc:	ldr	r1, [sp, #20]
   23ed0:	ldr	r3, [r1, #84]	; 0x54
   23ed4:	mov	r2, #1
   23ed8:	orr	r3, r3, r2, lsl r5
   23edc:	str	r3, [r1, #84]	; 0x54
   23ee0:	mov	r3, #17
   23ee4:	mov	r2, #0
   23ee8:	mov	r1, r0
   23eec:	ldr	r0, [sp, #20]
   23ef0:	bl	1db8c <__assert_fail@plt+0xc1ec>
   23ef4:	subs	sl, r0, #0
   23ef8:	moveq	r3, #12
   23efc:	streq	r3, [fp]
   23f00:	beq	23f3c <__assert_fail@plt+0x1259c>
   23f04:	str	r5, [sl, #20]
   23f08:	b	24870 <__assert_fail@plt+0x12ed0>
   23f0c:	str	fp, [sp, #4]
   23f10:	ldr	r3, [sp, #200]	; 0xc8
   23f14:	add	r3, r3, #1
   23f18:	str	r3, [sp]
   23f1c:	mov	r3, r6
   23f20:	mov	r2, r8
   23f24:	mov	r1, r4
   23f28:	mov	r0, r9
   23f2c:	bl	252dc <__assert_fail@plt+0x1393c>
   23f30:	ldr	r3, [fp]
   23f34:	cmp	r3, #0
   23f38:	beq	23f44 <__assert_fail@plt+0x125a4>
   23f3c:	mov	sl, #0
   23f40:	b	24e7c <__assert_fail@plt+0x134dc>
   23f44:	ldrb	r3, [r8, #4]
   23f48:	cmp	r3, #9
   23f4c:	beq	23ec4 <__assert_fail@plt+0x12524>
   23f50:	cmp	r0, #0
   23f54:	beq	23f68 <__assert_fail@plt+0x125c8>
   23f58:	mov	r2, #0
   23f5c:	movw	r1, #63352	; 0xf778
   23f60:	movt	r1, #1
   23f64:	bl	1cde4 <__assert_fail@plt+0xb444>
   23f68:	mov	r3, #8
   23f6c:	str	r3, [fp]
   23f70:	b	23f3c <__assert_fail@plt+0x1259c>
   23f74:	mov	r3, #0
   23f78:	str	r3, [sp, #68]	; 0x44
   23f7c:	mov	r1, #1
   23f80:	mov	r0, #32
   23f84:	bl	1c5f8 <__assert_fail@plt+0xac58>
   23f88:	mov	r4, r0
   23f8c:	str	r0, [sp, #32]
   23f90:	mov	r1, #1
   23f94:	mov	r0, #40	; 0x28
   23f98:	bl	1c5f8 <__assert_fail@plt+0xac58>
   23f9c:	str	r0, [sp, #36]	; 0x24
   23fa0:	clz	r0, r0
   23fa4:	lsr	r0, r0, #5
   23fa8:	cmp	r4, #0
   23fac:	movne	r7, r0
   23fb0:	moveq	r7, #1
   23fb4:	cmp	r7, #0
   23fb8:	bne	24030 <__assert_fail@plt+0x12690>
   23fbc:	ldr	r2, [sp, #24]
   23fc0:	mov	r1, r9
   23fc4:	mov	r0, r8
   23fc8:	bl	1cffc <__assert_fail@plt+0xb65c>
   23fcc:	str	r0, [sp, #28]
   23fd0:	ldrb	r3, [r8, #4]
   23fd4:	cmp	r3, #2
   23fd8:	streq	r3, [fp]
   23fdc:	beq	240c0 <__assert_fail@plt+0x12720>
   23fe0:	cmp	r3, #25
   23fe4:	strne	r7, [sp, #52]	; 0x34
   23fe8:	beq	2404c <__assert_fail@plt+0x126ac>
   23fec:	ldrb	r3, [r8, #4]
   23ff0:	cmp	r3, #21
   23ff4:	moveq	r3, #1
   23ff8:	strbeq	r3, [r8, #4]
   23ffc:	mov	r3, #0
   24000:	str	r3, [sp, #48]	; 0x30
   24004:	mov	r2, #1
   24008:	str	r3, [sp, #44]	; 0x2c
   2400c:	add	sl, sp, #96	; 0x60
   24010:	ldr	r3, [sp, #24]
   24014:	ubfx	r3, r3, #16, #1
   24018:	str	r3, [sp, #60]	; 0x3c
   2401c:	ldr	r4, [sp, #32]
   24020:	str	r7, [sp, #40]	; 0x28
   24024:	str	fp, [sp, #204]	; 0xcc
   24028:	ldr	fp, [sp, #36]	; 0x24
   2402c:	b	24450 <__assert_fail@plt+0x12ab0>
   24030:	ldr	r0, [sp, #32]
   24034:	bl	1c948 <__assert_fail@plt+0xafa8>
   24038:	ldr	r0, [sp, #36]	; 0x24
   2403c:	bl	1c948 <__assert_fail@plt+0xafa8>
   24040:	mov	r3, #12
   24044:	str	r3, [fp]
   24048:	b	240d0 <__assert_fail@plt+0x12730>
   2404c:	ldr	r2, [sp, #36]	; 0x24
   24050:	ldrb	r3, [r2, #16]
   24054:	orr	r3, r3, #1
   24058:	strb	r3, [r2, #16]
   2405c:	ldr	r3, [sp, #24]
   24060:	tst	r3, #256	; 0x100
   24064:	beq	24078 <__assert_fail@plt+0x126d8>
   24068:	ldr	r2, [sp, #32]
   2406c:	ldr	r3, [r2]
   24070:	orr	r3, r3, #1024	; 0x400
   24074:	str	r3, [r2]
   24078:	ldr	r3, [r9, #40]	; 0x28
   2407c:	ldr	r2, [sp, #28]
   24080:	add	r3, r3, r2
   24084:	str	r3, [r9, #40]	; 0x28
   24088:	ldr	r2, [sp, #24]
   2408c:	mov	r1, r9
   24090:	mov	r0, r8
   24094:	bl	1cffc <__assert_fail@plt+0xb65c>
   24098:	str	r0, [sp, #28]
   2409c:	ldrb	r3, [r8, #4]
   240a0:	cmp	r3, #2
   240a4:	streq	r3, [fp]
   240a8:	beq	240c0 <__assert_fail@plt+0x12720>
   240ac:	mov	r3, #1
   240b0:	str	r3, [sp, #52]	; 0x34
   240b4:	b	23fec <__assert_fail@plt+0x1264c>
   240b8:	ldr	fp, [sp, #204]	; 0xcc
   240bc:	str	r0, [fp]
   240c0:	ldr	r0, [sp, #32]
   240c4:	bl	1c948 <__assert_fail@plt+0xafa8>
   240c8:	ldr	r0, [sp, #36]	; 0x24
   240cc:	bl	1f6ec <__assert_fail@plt+0xdd4c>
   240d0:	ldr	r3, [fp]
   240d4:	cmp	r3, #0
   240d8:	bne	25060 <__assert_fail@plt+0x136c0>
   240dc:	mov	sl, #0
   240e0:	b	24870 <__assert_fail@plt+0x12ed0>
   240e4:	ldr	fp, [sp, #204]	; 0xcc
   240e8:	mov	r3, #7
   240ec:	str	r3, [fp]
   240f0:	b	240c0 <__assert_fail@plt+0x12720>
   240f4:	ldr	r3, [r9, #40]	; 0x28
   240f8:	ldr	r2, [sp, #28]
   240fc:	add	r3, r3, r2
   24100:	str	r3, [r9, #40]	; 0x28
   24104:	ldr	r2, [sp, #24]
   24108:	mov	r1, r9
   2410c:	add	r0, sp, #88	; 0x58
   24110:	bl	1cffc <__assert_fail@plt+0xb65c>
   24114:	mov	r3, r0
   24118:	ldrb	r2, [sp, #92]	; 0x5c
   2411c:	cmp	r2, #2
   24120:	beq	24148 <__assert_fail@plt+0x127a8>
   24124:	cmp	r2, #21
   24128:	bne	24158 <__assert_fail@plt+0x127b8>
   2412c:	ldr	r3, [r9, #40]	; 0x28
   24130:	ldr	r2, [sp, #28]
   24134:	sub	r3, r3, r2
   24138:	str	r3, [r9, #40]	; 0x28
   2413c:	mov	r3, #1
   24140:	strb	r3, [r8, #4]
   24144:	b	244c4 <__assert_fail@plt+0x12b24>
   24148:	ldr	fp, [sp, #204]	; 0xcc
   2414c:	mov	r3, #7
   24150:	str	r3, [fp]
   24154:	b	240c0 <__assert_fail@plt+0x12720>
   24158:	add	r2, sp, #128	; 0x80
   2415c:	str	r2, [sp, #84]	; 0x54
   24160:	mov	r2, #3
   24164:	str	r2, [sp, #80]	; 0x50
   24168:	mov	r2, #1
   2416c:	str	r2, [sp, #8]
   24170:	ldr	r2, [sp, #24]
   24174:	str	r2, [sp, #4]
   24178:	ldr	r2, [sp, #20]
   2417c:	str	r2, [sp]
   24180:	add	r2, sp, #88	; 0x58
   24184:	mov	r1, r9
   24188:	add	r0, sp, #80	; 0x50
   2418c:	bl	1d190 <__assert_fail@plt+0xb7f0>
   24190:	cmp	r0, #0
   24194:	bne	242a0 <__assert_fail@plt+0x12900>
   24198:	ldr	r2, [sp, #24]
   2419c:	mov	r1, r9
   241a0:	mov	r0, r8
   241a4:	bl	1cffc <__assert_fail@plt+0xb65c>
   241a8:	str	r0, [sp, #28]
   241ac:	ldr	r6, [sp, #72]	; 0x48
   241b0:	sub	r3, r6, #2
   241b4:	bics	r3, r3, #2
   241b8:	beq	250e0 <__assert_fail@plt+0x13740>
   241bc:	ldr	r7, [sp, #80]	; 0x50
   241c0:	sub	r3, r7, #2
   241c4:	bics	r3, r3, #2
   241c8:	beq	250ec <__assert_fail@plt+0x1374c>
   241cc:	cmp	r6, #3
   241d0:	moveq	r3, #1
   241d4:	movne	r3, #0
   241d8:	str	r3, [sp, #56]	; 0x38
   241dc:	beq	242ac <__assert_fail@plt+0x1290c>
   241e0:	cmp	r7, #3
   241e4:	beq	242dc <__assert_fail@plt+0x1293c>
   241e8:	cmp	r6, #0
   241ec:	movne	r5, #0
   241f0:	bne	241f8 <__assert_fail@plt+0x12858>
   241f4:	ldrb	r5, [sp, #76]	; 0x4c
   241f8:	cmp	r7, #0
   241fc:	bne	24304 <__assert_fail@plt+0x12964>
   24200:	ldrb	r7, [sp, #84]	; 0x54
   24204:	ldr	r3, [sp, #56]	; 0x38
   24208:	cmp	r6, #0
   2420c:	moveq	r3, #1
   24210:	cmp	r3, #0
   24214:	bne	24318 <__assert_fail@plt+0x12978>
   24218:	ldr	r5, [sp, #76]	; 0x4c
   2421c:	ldr	r3, [sp, #80]	; 0x50
   24220:	cmp	r3, #3
   24224:	cmpne	r3, #0
   24228:	beq	24338 <__assert_fail@plt+0x12998>
   2422c:	ldr	r7, [sp, #84]	; 0x54
   24230:	cmn	r5, #1
   24234:	cmnne	r7, #1
   24238:	beq	25108 <__assert_fail@plt+0x13768>
   2423c:	ldr	r3, [sp, #60]	; 0x3c
   24240:	cmp	r7, r5
   24244:	movcs	r3, #0
   24248:	andcc	r3, r3, #1
   2424c:	cmp	r3, #0
   24250:	bne	25114 <__assert_fail@plt+0x13774>
   24254:	ldr	r3, [sp, #20]
   24258:	ldr	r3, [r3, #92]	; 0x5c
   2425c:	cmp	r3, #1
   24260:	ble	24294 <__assert_fail@plt+0x128f4>
   24264:	ldr	r3, [fp, #32]
   24268:	ldr	r2, [sp, #48]	; 0x30
   2426c:	cmp	r3, r2
   24270:	beq	24358 <__assert_fail@plt+0x129b8>
   24274:	ldr	r2, [fp, #32]
   24278:	ldr	r3, [fp, #4]
   2427c:	str	r5, [r3, r2, lsl #2]
   24280:	ldr	r2, [fp, #8]
   24284:	ldr	r3, [fp, #32]
   24288:	add	r1, r3, #1
   2428c:	str	r1, [fp, #32]
   24290:	str	r7, [r2, r3, lsl #2]
   24294:	mov	r3, #0
   24298:	mov	ip, #1
   2429c:	b	243d0 <__assert_fail@plt+0x12a30>
   242a0:	ldr	fp, [sp, #204]	; 0xcc
   242a4:	str	r0, [fp]
   242a8:	b	240c0 <__assert_fail@plt+0x12720>
   242ac:	ldr	r0, [sp, #76]	; 0x4c
   242b0:	bl	117a8 <strlen@plt>
   242b4:	cmp	r0, #1
   242b8:	bhi	242d0 <__assert_fail@plt+0x12930>
   242bc:	cmp	r7, #3
   242c0:	beq	2513c <__assert_fail@plt+0x1379c>
   242c4:	ldr	r3, [sp, #76]	; 0x4c
   242c8:	ldrb	r5, [r3]
   242cc:	b	241f8 <__assert_fail@plt+0x12858>
   242d0:	ldr	fp, [sp, #204]	; 0xcc
   242d4:	mov	r3, #3
   242d8:	b	250f4 <__assert_fail@plt+0x13754>
   242dc:	ldr	r0, [sp, #84]	; 0x54
   242e0:	bl	117a8 <strlen@plt>
   242e4:	cmp	r0, #1
   242e8:	bhi	250fc <__assert_fail@plt+0x1375c>
   242ec:	cmp	r6, #0
   242f0:	beq	241f4 <__assert_fail@plt+0x12854>
   242f4:	cmp	r6, #3
   242f8:	beq	242c4 <__assert_fail@plt+0x12924>
   242fc:	mov	r5, #0
   24300:	b	241f8 <__assert_fail@plt+0x12858>
   24304:	cmp	r7, #3
   24308:	ldreq	r3, [sp, #84]	; 0x54
   2430c:	ldrbeq	r7, [r3]
   24310:	movne	r7, #0
   24314:	b	24204 <__assert_fail@plt+0x12864>
   24318:	ldr	r3, [sp, #20]
   2431c:	ldr	r3, [r3, #92]	; 0x5c
   24320:	cmp	r3, #1
   24324:	ble	25128 <__assert_fail@plt+0x13788>
   24328:	mov	r0, r5
   2432c:	bl	1182c <btowc@plt>
   24330:	mov	r5, r0
   24334:	b	2421c <__assert_fail@plt+0x1287c>
   24338:	ldr	r3, [sp, #20]
   2433c:	ldr	r3, [r3, #92]	; 0x5c
   24340:	cmp	r3, #1
   24344:	ble	24230 <__assert_fail@plt+0x12890>
   24348:	mov	r0, r7
   2434c:	bl	1182c <btowc@plt>
   24350:	mov	r7, r0
   24354:	b	24230 <__assert_fail@plt+0x12890>
   24358:	lsl	r3, r2, #1
   2435c:	add	r3, r3, #1
   24360:	str	r3, [sp, #48]	; 0x30
   24364:	lsl	r6, r3, #2
   24368:	mov	r1, r6
   2436c:	ldr	r0, [fp, #4]
   24370:	bl	1cb14 <__assert_fail@plt+0xb174>
   24374:	str	r0, [sp, #56]	; 0x38
   24378:	mov	r1, r6
   2437c:	ldr	r0, [fp, #8]
   24380:	bl	1cb14 <__assert_fail@plt+0xb174>
   24384:	mov	r6, r0
   24388:	ldr	r3, [sp, #56]	; 0x38
   2438c:	cmp	r0, #0
   24390:	cmpne	r3, #0
   24394:	beq	243a8 <__assert_fail@plt+0x12a08>
   24398:	ldr	r3, [sp, #56]	; 0x38
   2439c:	str	r3, [fp, #4]
   243a0:	str	r0, [fp, #8]
   243a4:	b	24274 <__assert_fail@plt+0x128d4>
   243a8:	ldr	fp, [sp, #204]	; 0xcc
   243ac:	mov	r0, r3
   243b0:	bl	1c948 <__assert_fail@plt+0xafa8>
   243b4:	mov	r0, r6
   243b8:	bl	1c948 <__assert_fail@plt+0xafa8>
   243bc:	mov	r3, #12
   243c0:	b	250f4 <__assert_fail@plt+0x13754>
   243c4:	add	r3, r3, #1
   243c8:	cmp	r3, #256	; 0x100
   243cc:	beq	250d0 <__assert_fail@plt+0x13730>
   243d0:	cmp	r3, r5
   243d4:	movcc	r2, #0
   243d8:	movcs	r2, #1
   243dc:	cmp	r3, r7
   243e0:	movhi	r2, #0
   243e4:	cmp	r2, #0
   243e8:	beq	243c4 <__assert_fail@plt+0x12a24>
   243ec:	add	r2, r3, #31
   243f0:	cmp	r3, #0
   243f4:	movge	r2, r3
   243f8:	asr	r2, r2, #5
   243fc:	rsbs	r1, r3, #0
   24400:	and	r0, r3, #31
   24404:	and	r1, r1, #31
   24408:	rsbpl	r0, r1, #0
   2440c:	ldr	r1, [r4, r2, lsl #2]
   24410:	orr	r1, r1, ip, lsl r0
   24414:	str	r1, [r4, r2, lsl #2]
   24418:	b	243c4 <__assert_fail@plt+0x12a24>
   2441c:	ldrb	r3, [sp, #76]	; 0x4c
   24420:	asr	r1, r3, #5
   24424:	and	r3, r3, #31
   24428:	ldr	r2, [r4, r1, lsl #2]
   2442c:	mov	r0, #1
   24430:	orr	r3, r2, r0, lsl r3
   24434:	str	r3, [r4, r1, lsl #2]
   24438:	ldrb	r3, [r8, #4]
   2443c:	cmp	r3, #2
   24440:	beq	245f0 <__assert_fail@plt+0x12c50>
   24444:	cmp	r3, #21
   24448:	beq	24600 <__assert_fail@plt+0x12c60>
   2444c:	ldr	r2, [sp, #40]	; 0x28
   24450:	str	sl, [sp, #76]	; 0x4c
   24454:	mov	r3, #3
   24458:	str	r3, [sp, #72]	; 0x48
   2445c:	str	r2, [sp, #8]
   24460:	ldr	r3, [sp, #24]
   24464:	str	r3, [sp, #4]
   24468:	ldr	r3, [sp, #20]
   2446c:	str	r3, [sp]
   24470:	ldr	r3, [sp, #28]
   24474:	mov	r2, r8
   24478:	mov	r1, r9
   2447c:	add	r0, sp, #72	; 0x48
   24480:	bl	1d190 <__assert_fail@plt+0xb7f0>
   24484:	cmp	r0, #0
   24488:	bne	240b8 <__assert_fail@plt+0x12718>
   2448c:	ldr	r2, [sp, #24]
   24490:	mov	r1, r9
   24494:	mov	r0, r8
   24498:	bl	1cffc <__assert_fail@plt+0xb65c>
   2449c:	str	r0, [sp, #28]
   244a0:	ldr	r3, [sp, #72]	; 0x48
   244a4:	sub	r3, r3, #2
   244a8:	bics	r3, r3, #2
   244ac:	beq	244c4 <__assert_fail@plt+0x12b24>
   244b0:	ldrb	r3, [r8, #4]
   244b4:	cmp	r3, #2
   244b8:	beq	240e4 <__assert_fail@plt+0x12744>
   244bc:	cmp	r3, #22
   244c0:	beq	240f4 <__assert_fail@plt+0x12754>
   244c4:	ldr	r3, [sp, #72]	; 0x48
   244c8:	cmp	r3, #4
   244cc:	ldrls	pc, [pc, r3, lsl #2]
   244d0:	b	245b4 <__assert_fail@plt+0x12c14>
   244d4:	andeq	r4, r2, ip, lsl r4
   244d8:	andeq	r4, r2, r8, ror #9
   244dc:	andeq	r4, r2, ip, lsr r5
   244e0:	andeq	r4, r2, r8, ror r5
   244e4:			; <UNDEFINED> instruction: 0x000245b4
   244e8:	ldr	r3, [fp, #20]
   244ec:	ldr	r2, [sp, #44]	; 0x2c
   244f0:	cmp	r3, r2
   244f4:	beq	24514 <__assert_fail@plt+0x12b74>
   244f8:	ldr	r2, [fp]
   244fc:	ldr	r3, [fp, #20]
   24500:	add	r1, r3, #1
   24504:	str	r1, [fp, #20]
   24508:	ldr	r1, [sp, #76]	; 0x4c
   2450c:	str	r1, [r2, r3, lsl #2]
   24510:	b	24438 <__assert_fail@plt+0x12a98>
   24514:	lsl	r3, r2, #1
   24518:	add	r3, r3, #1
   2451c:	str	r3, [sp, #44]	; 0x2c
   24520:	lsl	r1, r3, #2
   24524:	ldr	r0, [fp]
   24528:	bl	1cb14 <__assert_fail@plt+0xb174>
   2452c:	cmp	r0, #0
   24530:	beq	24778 <__assert_fail@plt+0x12dd8>
   24534:	str	r0, [fp]
   24538:	b	244f8 <__assert_fail@plt+0x12b58>
   2453c:	ldr	r5, [sp, #76]	; 0x4c
   24540:	mov	r0, r5
   24544:	bl	117a8 <strlen@plt>
   24548:	cmp	r0, #1
   2454c:	bne	250b0 <__assert_fail@plt+0x13710>
   24550:	ldrb	r3, [r5]
   24554:	asr	r1, r3, #5
   24558:	and	r3, r3, #31
   2455c:	ldr	r2, [r4, r1, lsl #2]
   24560:	orr	r3, r2, r0, lsl r3
   24564:	str	r3, [r4, r1, lsl #2]
   24568:	mov	r3, #0
   2456c:	ldr	r2, [sp, #204]	; 0xcc
   24570:	str	r3, [r2]
   24574:	b	24438 <__assert_fail@plt+0x12a98>
   24578:	ldr	r5, [sp, #76]	; 0x4c
   2457c:	mov	r0, r5
   24580:	bl	117a8 <strlen@plt>
   24584:	cmp	r0, #1
   24588:	bne	250c0 <__assert_fail@plt+0x13720>
   2458c:	ldrb	r3, [r5]
   24590:	asr	r1, r3, #5
   24594:	and	r3, r3, #31
   24598:	ldr	r2, [r4, r1, lsl #2]
   2459c:	orr	r3, r2, r0, lsl r3
   245a0:	str	r3, [r4, r1, lsl #2]
   245a4:	mov	r3, #0
   245a8:	ldr	r2, [sp, #204]	; 0xcc
   245ac:	str	r3, [r2]
   245b0:	b	24438 <__assert_fail@plt+0x12a98>
   245b4:	ldr	r3, [sp, #24]
   245b8:	str	r3, [sp, #4]
   245bc:	ldr	r3, [sp, #76]	; 0x4c
   245c0:	str	r3, [sp]
   245c4:	add	r3, sp, #68	; 0x44
   245c8:	mov	r2, fp
   245cc:	mov	r1, r4
   245d0:	ldr	r0, [r9, #64]	; 0x40
   245d4:	bl	22174 <__assert_fail@plt+0x107d4>
   245d8:	ldr	r3, [sp, #204]	; 0xcc
   245dc:	str	r0, [r3]
   245e0:	cmp	r0, #0
   245e4:	beq	24438 <__assert_fail@plt+0x12a98>
   245e8:	ldr	fp, [sp, #204]	; 0xcc
   245ec:	b	240c0 <__assert_fail@plt+0x12720>
   245f0:	ldr	fp, [sp, #204]	; 0xcc
   245f4:	mov	r3, #7
   245f8:	str	r3, [fp]
   245fc:	b	240c0 <__assert_fail@plt+0x12720>
   24600:	ldr	fp, [sp, #204]	; 0xcc
   24604:	ldr	r3, [r9, #40]	; 0x28
   24608:	ldr	r2, [sp, #28]
   2460c:	add	r3, r3, r2
   24610:	str	r3, [r9, #40]	; 0x28
   24614:	ldr	r3, [sp, #52]	; 0x34
   24618:	cmp	r3, #0
   2461c:	beq	24640 <__assert_fail@plt+0x12ca0>
   24620:	ldr	r2, [sp, #32]
   24624:	sub	r3, r2, #4
   24628:	add	r1, r2, #28
   2462c:	ldr	r2, [r3, #4]!
   24630:	mvn	r2, r2
   24634:	str	r2, [r3]
   24638:	cmp	r3, r1
   2463c:	bne	2462c <__assert_fail@plt+0x12c8c>
   24640:	ldr	r3, [sp, #20]
   24644:	ldr	r0, [r3, #92]	; 0x5c
   24648:	cmp	r0, #1
   2464c:	ble	2467c <__assert_fail@plt+0x12cdc>
   24650:	ldr	r1, [sp, #32]
   24654:	sub	r2, r1, #4
   24658:	ldr	r3, [r3, #60]	; 0x3c
   2465c:	sub	r3, r3, #4
   24660:	add	ip, r1, #28
   24664:	ldr	r1, [r2, #4]!
   24668:	ldr	lr, [r3, #4]!
   2466c:	and	r1, r1, lr
   24670:	str	r1, [r2]
   24674:	cmp	ip, r2
   24678:	bne	24664 <__assert_fail@plt+0x12cc4>
   2467c:	ldr	r2, [sp, #36]	; 0x24
   24680:	ldr	r3, [r2, #20]
   24684:	cmp	r3, #0
   24688:	bne	246d0 <__assert_fail@plt+0x12d30>
   2468c:	ldr	r3, [r2, #24]
   24690:	cmp	r3, #0
   24694:	bne	246d0 <__assert_fail@plt+0x12d30>
   24698:	ldr	r3, [r2, #28]
   2469c:	cmp	r3, #0
   246a0:	bne	246d0 <__assert_fail@plt+0x12d30>
   246a4:	ldr	r3, [r2, #32]
   246a8:	cmp	r3, #0
   246ac:	bne	246d0 <__assert_fail@plt+0x12d30>
   246b0:	cmp	r0, #1
   246b4:	ble	24740 <__assert_fail@plt+0x12da0>
   246b8:	ldr	r3, [r2, #36]	; 0x24
   246bc:	cmp	r3, #0
   246c0:	bne	246d0 <__assert_fail@plt+0x12d30>
   246c4:	ldrb	r3, [r2, #16]
   246c8:	tst	r3, #1
   246cc:	beq	24740 <__assert_fail@plt+0x12da0>
   246d0:	ldr	r0, [sp, #20]
   246d4:	ldrb	r3, [r0, #88]	; 0x58
   246d8:	orr	r3, r3, #2
   246dc:	strb	r3, [r0, #88]	; 0x58
   246e0:	mov	r3, #6
   246e4:	strb	r3, [sp, #132]	; 0x84
   246e8:	ldr	r3, [sp, #36]	; 0x24
   246ec:	str	r3, [sp, #128]	; 0x80
   246f0:	add	r3, sp, #128	; 0x80
   246f4:	mov	r2, #0
   246f8:	mov	r1, r2
   246fc:	bl	1d9f0 <__assert_fail@plt+0xc050>
   24700:	subs	sl, r0, #0
   24704:	beq	2477c <__assert_fail@plt+0x12ddc>
   24708:	ldr	r2, [sp, #32]
   2470c:	ldr	r3, [r2]
   24710:	cmp	r3, #0
   24714:	bne	25068 <__assert_fail@plt+0x136c8>
   24718:	mov	r3, r2
   2471c:	add	r2, r2, #28
   24720:	ldr	r1, [r3, #4]!
   24724:	cmp	r1, #0
   24728:	bne	25068 <__assert_fail@plt+0x136c8>
   2472c:	cmp	r2, r3
   24730:	bne	24720 <__assert_fail@plt+0x12d80>
   24734:	ldr	r0, [sp, #32]
   24738:	bl	1c948 <__assert_fail@plt+0xafa8>
   2473c:	b	24870 <__assert_fail@plt+0x12ed0>
   24740:	ldr	r0, [sp, #36]	; 0x24
   24744:	bl	1f6ec <__assert_fail@plt+0xdd4c>
   24748:	mov	r3, #3
   2474c:	strb	r3, [sp, #132]	; 0x84
   24750:	ldr	r3, [sp, #32]
   24754:	str	r3, [sp, #128]	; 0x80
   24758:	add	r3, sp, #128	; 0x80
   2475c:	mov	r2, #0
   24760:	mov	r1, r2
   24764:	ldr	r0, [sp, #20]
   24768:	bl	1d9f0 <__assert_fail@plt+0xc050>
   2476c:	subs	sl, r0, #0
   24770:	bne	24870 <__assert_fail@plt+0x12ed0>
   24774:	b	2477c <__assert_fail@plt+0x12ddc>
   24778:	ldr	fp, [sp, #204]	; 0xcc
   2477c:	mov	r3, #12
   24780:	str	r3, [fp]
   24784:	b	240c0 <__assert_fail@plt+0x12720>
   24788:	ldr	r2, [r8]
   2478c:	mov	r3, #1
   24790:	lsl	r3, r3, r2
   24794:	ldr	r2, [sp, #20]
   24798:	ldr	r2, [r2, #84]	; 0x54
   2479c:	tst	r3, r2
   247a0:	moveq	r3, #6
   247a4:	streq	r3, [fp]
   247a8:	moveq	sl, #0
   247ac:	beq	24e7c <__assert_fail@plt+0x134dc>
   247b0:	ldr	r0, [sp, #20]
   247b4:	ldr	r2, [r0, #80]	; 0x50
   247b8:	orr	r3, r2, r3
   247bc:	str	r3, [r0, #80]	; 0x50
   247c0:	mov	r3, r8
   247c4:	mov	r2, #0
   247c8:	mov	r1, r2
   247cc:	bl	1d9f0 <__assert_fail@plt+0xc050>
   247d0:	subs	sl, r0, #0
   247d4:	moveq	r3, #12
   247d8:	streq	r3, [fp]
   247dc:	beq	24e7c <__assert_fail@plt+0x134dc>
   247e0:	ldr	r2, [sp, #20]
   247e4:	ldr	r3, [r2, #76]	; 0x4c
   247e8:	add	r3, r3, #1
   247ec:	str	r3, [r2, #76]	; 0x4c
   247f0:	ldrb	r3, [r2, #88]	; 0x58
   247f4:	orr	r3, r3, #2
   247f8:	strb	r3, [r2, #88]	; 0x58
   247fc:	b	24870 <__assert_fail@plt+0x12ed0>
   24800:	ldr	r3, [sp, #24]
   24804:	tst	r3, #16777216	; 0x1000000
   24808:	movne	r3, #13
   2480c:	strne	r3, [fp]
   24810:	movne	sl, #0
   24814:	bne	24e7c <__assert_fail@plt+0x134dc>
   24818:	ldr	r3, [sp, #24]
   2481c:	tst	r3, #32
   24820:	movne	r3, #13
   24824:	strne	r3, [fp]
   24828:	movne	sl, #0
   2482c:	bne	24e7c <__assert_fail@plt+0x134dc>
   24830:	ldr	r3, [sp, #24]
   24834:	tst	r3, #16
   24838:	bne	2489c <__assert_fail@plt+0x12efc>
   2483c:	cmp	r2, #9
   24840:	beq	248d8 <__assert_fail@plt+0x12f38>
   24844:	mov	r3, #1
   24848:	strb	r3, [r8, #4]
   2484c:	mov	r3, r8
   24850:	mov	r2, #0
   24854:	mov	r1, r2
   24858:	ldr	r0, [sp, #20]
   2485c:	bl	1d9f0 <__assert_fail@plt+0xc050>
   24860:	subs	sl, r0, #0
   24864:	moveq	r3, #12
   24868:	streq	r3, [fp]
   2486c:	beq	24e7c <__assert_fail@plt+0x134dc>
   24870:	ldr	r2, [sp, #24]
   24874:	mov	r1, r9
   24878:	mov	r0, r8
   2487c:	bl	1f5f4 <__assert_fail@plt+0xdc54>
   24880:	movw	r3, #54332	; 0xd43c
   24884:	movt	r3, #1
   24888:	str	r3, [sp, #32]
   2488c:	movw	r3, #63352	; 0xf778
   24890:	movt	r3, #1
   24894:	str	r3, [sp, #36]	; 0x24
   24898:	b	24f14 <__assert_fail@plt+0x13574>
   2489c:	mov	r5, r3
   248a0:	mov	r2, r3
   248a4:	mov	r1, r9
   248a8:	mov	r0, r8
   248ac:	bl	1f5f4 <__assert_fail@plt+0xdc54>
   248b0:	str	fp, [sp, #4]
   248b4:	ldr	r3, [sp, #200]	; 0xc8
   248b8:	str	r3, [sp]
   248bc:	mov	r3, r5
   248c0:	mov	r2, r8
   248c4:	mov	r1, r4
   248c8:	mov	r0, r9
   248cc:	bl	23cf4 <__assert_fail@plt+0x12354>
   248d0:	mov	sl, r0
   248d4:	b	24e7c <__assert_fail@plt+0x134dc>
   248d8:	ldr	r3, [sp, #24]
   248dc:	tst	r3, #131072	; 0x20000
   248e0:	moveq	r3, #16
   248e4:	streq	r3, [fp]
   248e8:	moveq	sl, #0
   248ec:	bne	24844 <__assert_fail@plt+0x12ea4>
   248f0:	b	24e7c <__assert_fail@plt+0x134dc>
   248f4:	ldr	r3, [r8]
   248f8:	movw	r2, #783	; 0x30f
   248fc:	tst	r2, r3
   24900:	beq	24914 <__assert_fail@plt+0x12f74>
   24904:	ldr	r3, [sp, #20]
   24908:	ldrb	r3, [r3, #88]	; 0x58
   2490c:	tst	r3, #16
   24910:	beq	249c8 <__assert_fail@plt+0x13028>
   24914:	ldr	r3, [r8]
   24918:	sub	r2, r3, #256	; 0x100
   2491c:	bics	r2, r2, #256	; 0x100
   24920:	bne	24ad8 <__assert_fail@plt+0x13138>
   24924:	cmp	r3, #256	; 0x100
   24928:	beq	24aac <__assert_fail@plt+0x1310c>
   2492c:	mov	r3, #5
   24930:	str	r3, [r8]
   24934:	mov	r3, r8
   24938:	mov	r2, #0
   2493c:	mov	r1, r2
   24940:	ldr	r0, [sp, #20]
   24944:	bl	1d9f0 <__assert_fail@plt+0xc050>
   24948:	mov	r5, r0
   2494c:	mov	r3, #10
   24950:	str	r3, [r8]
   24954:	mov	r3, r8
   24958:	mov	r2, #0
   2495c:	mov	r1, r2
   24960:	ldr	r6, [sp, #20]
   24964:	mov	r0, r6
   24968:	bl	1d9f0 <__assert_fail@plt+0xc050>
   2496c:	mov	r4, r0
   24970:	mov	r3, #10
   24974:	mov	r2, r0
   24978:	mov	r1, r5
   2497c:	mov	r0, r6
   24980:	bl	1db8c <__assert_fail@plt+0xc1ec>
   24984:	clz	r3, r4
   24988:	lsr	r3, r3, #5
   2498c:	cmp	r5, #0
   24990:	moveq	r3, #1
   24994:	mov	sl, r0
   24998:	cmp	r0, #0
   2499c:	moveq	r3, #1
   249a0:	cmp	r3, #0
   249a4:	movne	r3, #12
   249a8:	strne	r3, [fp]
   249ac:	movne	sl, #0
   249b0:	bne	24e7c <__assert_fail@plt+0x134dc>
   249b4:	ldr	r2, [sp, #24]
   249b8:	mov	r1, r9
   249bc:	mov	r0, r8
   249c0:	bl	1f5f4 <__assert_fail@plt+0xdc54>
   249c4:	b	24e7c <__assert_fail@plt+0x134dc>
   249c8:	ldr	r2, [sp, #20]
   249cc:	orr	r3, r3, #16
   249d0:	strb	r3, [r2, #88]	; 0x58
   249d4:	tst	r3, #8
   249d8:	bne	24a2c <__assert_fail@plt+0x1308c>
   249dc:	mov	r3, #0
   249e0:	str	r3, [r2, #96]	; 0x60
   249e4:	movt	r3, #1023	; 0x3ff
   249e8:	str	r3, [r2, #100]	; 0x64
   249ec:	mvn	r3, #2013265921	; 0x78000001
   249f0:	str	r3, [r2, #104]	; 0x68
   249f4:	mvn	r3, #-134217727	; 0xf8000001
   249f8:	str	r3, [r2, #108]	; 0x6c
   249fc:	ldrb	r3, [r2, #88]	; 0x58
   24a00:	tst	r3, #4
   24a04:	moveq	r5, #128	; 0x80
   24a08:	moveq	r3, #4
   24a0c:	beq	24a34 <__assert_fail@plt+0x13094>
   24a10:	ldr	r1, [sp, #20]
   24a14:	mov	r2, #0
   24a18:	str	r2, [r1, #112]	; 0x70
   24a1c:	str	r2, [r1, #116]	; 0x74
   24a20:	str	r2, [r1, #120]	; 0x78
   24a24:	str	r2, [r1, #124]	; 0x7c
   24a28:	b	24914 <__assert_fail@plt+0x12f74>
   24a2c:	mov	r5, #0
   24a30:	mov	r3, r5
   24a34:	add	r3, r3, #24
   24a38:	ldr	r2, [sp, #20]
   24a3c:	add	r4, r2, r3, lsl #2
   24a40:	add	r6, r2, #128	; 0x80
   24a44:	bl	11778 <__ctype_b_loc@plt>
   24a48:	mov	ip, #1
   24a4c:	b	24aa0 <__assert_fail@plt+0x13100>
   24a50:	ldr	r3, [r4]
   24a54:	orr	r3, r3, ip, lsl r1
   24a58:	str	r3, [r4]
   24a5c:	add	r1, r1, #1
   24a60:	add	r2, r2, #1
   24a64:	cmp	r1, #32
   24a68:	beq	24a90 <__assert_fail@plt+0x130f0>
   24a6c:	ldr	lr, [r0]
   24a70:	lsl	r3, r2, #1
   24a74:	ldrh	r3, [lr, r3]
   24a78:	ubfx	r3, r3, #3, #1
   24a7c:	cmp	r2, #95	; 0x5f
   24a80:	orreq	r3, r3, #1
   24a84:	cmp	r3, #0
   24a88:	bne	24a50 <__assert_fail@plt+0x130b0>
   24a8c:	b	24a5c <__assert_fail@plt+0x130bc>
   24a90:	add	r5, r5, #32
   24a94:	add	r4, r4, #4
   24a98:	cmp	r6, r4
   24a9c:	beq	24914 <__assert_fail@plt+0x12f74>
   24aa0:	mov	r2, r5
   24aa4:	mov	r1, #0
   24aa8:	b	24a6c <__assert_fail@plt+0x130cc>
   24aac:	mov	r3, #6
   24ab0:	str	r3, [r8]
   24ab4:	mov	r3, r8
   24ab8:	mov	r2, #0
   24abc:	mov	r1, r2
   24ac0:	ldr	r0, [sp, #20]
   24ac4:	bl	1d9f0 <__assert_fail@plt+0xc050>
   24ac8:	mov	r5, r0
   24acc:	mov	r3, #9
   24ad0:	str	r3, [r8]
   24ad4:	b	24954 <__assert_fail@plt+0x12fb4>
   24ad8:	mov	r3, r8
   24adc:	mov	r2, #0
   24ae0:	mov	r1, r2
   24ae4:	ldr	r0, [sp, #20]
   24ae8:	bl	1d9f0 <__assert_fail@plt+0xc050>
   24aec:	subs	sl, r0, #0
   24af0:	moveq	r3, #12
   24af4:	streq	r3, [fp]
   24af8:	bne	249b4 <__assert_fail@plt+0x13014>
   24afc:	b	24e7c <__assert_fail@plt+0x134dc>
   24b00:	mov	r3, r8
   24b04:	mov	r2, #0
   24b08:	mov	r1, r2
   24b0c:	ldr	r0, [sp, #20]
   24b10:	bl	1d9f0 <__assert_fail@plt+0xc050>
   24b14:	subs	sl, r0, #0
   24b18:	moveq	r3, #12
   24b1c:	streq	r3, [fp]
   24b20:	beq	24e7c <__assert_fail@plt+0x134dc>
   24b24:	ldr	r2, [sp, #20]
   24b28:	ldr	r3, [r2, #92]	; 0x5c
   24b2c:	cmp	r3, #1
   24b30:	ble	24870 <__assert_fail@plt+0x12ed0>
   24b34:	ldrb	r3, [r2, #88]	; 0x58
   24b38:	orr	r3, r3, #2
   24b3c:	strb	r3, [r2, #88]	; 0x58
   24b40:	b	24870 <__assert_fail@plt+0x12ed0>
   24b44:	str	fp, [sp, #4]
   24b48:	cmp	r2, #33	; 0x21
   24b4c:	movne	r2, #0
   24b50:	moveq	r2, #1
   24b54:	str	r2, [sp]
   24b58:	movw	r3, #58472	; 0xe468
   24b5c:	movt	r3, #2
   24b60:	movw	r2, #58408	; 0xe428
   24b64:	movt	r2, #2
   24b68:	ldr	r1, [r0, #64]	; 0x40
   24b6c:	ldr	r0, [sp, #20]
   24b70:	bl	22bf0 <__assert_fail@plt+0x11250>
   24b74:	ldr	r3, [fp]
   24b78:	mov	sl, r0
   24b7c:	clz	r0, r0
   24b80:	lsr	r0, r0, #5
   24b84:	cmp	r3, #0
   24b88:	moveq	r0, #0
   24b8c:	cmp	r0, #0
   24b90:	beq	24870 <__assert_fail@plt+0x12ed0>
   24b94:	mov	sl, #0
   24b98:	b	24e7c <__assert_fail@plt+0x134dc>
   24b9c:	str	fp, [sp, #4]
   24ba0:	cmp	r2, #35	; 0x23
   24ba4:	movne	r2, #0
   24ba8:	moveq	r2, #1
   24bac:	str	r2, [sp]
   24bb0:	movw	r3, #54652	; 0xd57c
   24bb4:	movt	r3, #2
   24bb8:	movw	r2, #58424	; 0xe438
   24bbc:	movt	r2, #2
   24bc0:	ldr	r1, [r0, #64]	; 0x40
   24bc4:	ldr	r0, [sp, #20]
   24bc8:	bl	22bf0 <__assert_fail@plt+0x11250>
   24bcc:	ldr	r3, [fp]
   24bd0:	mov	sl, r0
   24bd4:	clz	r0, r0
   24bd8:	lsr	r0, r0, #5
   24bdc:	cmp	r3, #0
   24be0:	moveq	r0, #0
   24be4:	cmp	r0, #0
   24be8:	beq	24870 <__assert_fail@plt+0x12ed0>
   24bec:	mov	sl, #0
   24bf0:	b	24e7c <__assert_fail@plt+0x134dc>
   24bf4:	mov	r3, #5
   24bf8:	str	r3, [fp]
   24bfc:	mov	sl, #0
   24c00:	b	24e7c <__assert_fail@plt+0x134dc>
   24c04:	ldr	r2, [sp, #24]
   24c08:	mov	r1, r8
   24c0c:	mov	r0, r9
   24c10:	bl	1f61c <__assert_fail@plt+0xdc7c>
   24c14:	mov	r4, r0
   24c18:	cmn	r0, #1
   24c1c:	beq	24c64 <__assert_fail@plt+0x132c4>
   24c20:	cmn	r0, #2
   24c24:	beq	24c3c <__assert_fail@plt+0x1329c>
   24c28:	ldrb	r3, [r8, #4]
   24c2c:	cmp	r3, #24
   24c30:	beq	24d6c <__assert_fail@plt+0x133cc>
   24c34:	cmp	r3, #1
   24c38:	beq	24c80 <__assert_fail@plt+0x132e0>
   24c3c:	ldr	r3, [sp, #24]
   24c40:	tst	r3, #2097152	; 0x200000
   24c44:	bne	24c98 <__assert_fail@plt+0x132f8>
   24c48:	ldrb	r3, [r8, #4]
   24c4c:	cmp	r3, #2
   24c50:	bne	24d5c <__assert_fail@plt+0x133bc>
   24c54:	mov	r3, #9
   24c58:	str	r3, [fp]
   24c5c:	mov	r6, #0
   24c60:	b	24e18 <__assert_fail@plt+0x13478>
   24c64:	ldrb	r3, [r8, #4]
   24c68:	cmp	r3, #1
   24c6c:	bne	24cb4 <__assert_fail@plt+0x13314>
   24c70:	ldrb	r3, [r8]
   24c74:	cmp	r3, #44	; 0x2c
   24c78:	moveq	r4, #0
   24c7c:	bne	24cb4 <__assert_fail@plt+0x13314>
   24c80:	ldrb	r3, [r8]
   24c84:	cmp	r3, #44	; 0x2c
   24c88:	beq	24cc4 <__assert_fail@plt+0x13324>
   24c8c:	ldr	r3, [sp, #24]
   24c90:	tst	r3, #2097152	; 0x200000
   24c94:	beq	24d5c <__assert_fail@plt+0x133bc>
   24c98:	str	r6, [r9, #40]	; 0x28
   24c9c:	ldrd	r2, [sp, #128]	; 0x80
   24ca0:	strd	r2, [r8]
   24ca4:	mov	r3, #1
   24ca8:	strb	r3, [r8, #4]
   24cac:	mov	r6, sl
   24cb0:	b	24e18 <__assert_fail@plt+0x13478>
   24cb4:	mov	r3, #10
   24cb8:	str	r3, [fp]
   24cbc:	mov	r6, #0
   24cc0:	b	24e18 <__assert_fail@plt+0x13478>
   24cc4:	ldr	r2, [sp, #24]
   24cc8:	mov	r1, r8
   24ccc:	mov	r0, r9
   24cd0:	bl	1f61c <__assert_fail@plt+0xdc7c>
   24cd4:	mov	r7, r0
   24cd8:	cmn	r4, #2
   24cdc:	cmnne	r0, #2
   24ce0:	beq	24c3c <__assert_fail@plt+0x1329c>
   24ce4:	cmn	r0, #1
   24ce8:	cmpne	r4, r0
   24cec:	bgt	24d74 <__assert_fail@plt+0x133d4>
   24cf0:	ldrb	r3, [r8, #4]
   24cf4:	cmp	r3, #24
   24cf8:	bne	24d74 <__assert_fail@plt+0x133d4>
   24cfc:	cmn	r7, #1
   24d00:	beq	24d84 <__assert_fail@plt+0x133e4>
   24d04:	cmp	r7, #32768	; 0x8000
   24d08:	movlt	r3, #0
   24d0c:	movge	r3, #1
   24d10:	cmp	r3, #0
   24d14:	movne	r3, #15
   24d18:	strne	r3, [fp]
   24d1c:	movne	r6, #0
   24d20:	bne	24e18 <__assert_fail@plt+0x13478>
   24d24:	ldr	r2, [sp, #24]
   24d28:	mov	r1, r9
   24d2c:	mov	r0, r8
   24d30:	bl	1f5f4 <__assert_fail@plt+0xdc54>
   24d34:	cmp	sl, #0
   24d38:	beq	24ed4 <__assert_fail@plt+0x13534>
   24d3c:	orrs	r3, r7, r4
   24d40:	bne	24d94 <__assert_fail@plt+0x133f4>
   24d44:	mov	r2, #0
   24d48:	ldr	r1, [sp, #36]	; 0x24
   24d4c:	mov	r0, sl
   24d50:	bl	1cde4 <__assert_fail@plt+0xb444>
   24d54:	mov	r6, #0
   24d58:	b	24e18 <__assert_fail@plt+0x13478>
   24d5c:	mov	r3, #10
   24d60:	str	r3, [fp]
   24d64:	mov	r6, #0
   24d68:	b	24e18 <__assert_fail@plt+0x13478>
   24d6c:	mov	r7, r0
   24d70:	b	24cf0 <__assert_fail@plt+0x13350>
   24d74:	mov	r3, #10
   24d78:	str	r3, [fp]
   24d7c:	mov	r6, #0
   24d80:	b	24e18 <__assert_fail@plt+0x13478>
   24d84:	cmp	r4, #32768	; 0x8000
   24d88:	movlt	r3, #0
   24d8c:	movge	r3, #1
   24d90:	b	24d10 <__assert_fail@plt+0x13370>
   24d94:	cmp	r4, #0
   24d98:	ble	24eb0 <__assert_fail@plt+0x13510>
   24d9c:	cmp	r4, #1
   24da0:	ble	24e9c <__assert_fail@plt+0x134fc>
   24da4:	str	sl, [sp, #28]
   24da8:	mov	r5, sl
   24dac:	mov	r6, #2
   24db0:	ldr	r1, [sp, #20]
   24db4:	mov	r0, r5
   24db8:	bl	1dac0 <__assert_fail@plt+0xc120>
   24dbc:	mov	r5, r0
   24dc0:	mov	r3, #16
   24dc4:	mov	r2, r0
   24dc8:	ldr	r1, [sp, #28]
   24dcc:	ldr	r0, [sp, #20]
   24dd0:	bl	1db8c <__assert_fail@plt+0xc1ec>
   24dd4:	str	r0, [sp, #28]
   24dd8:	cmp	r0, #0
   24ddc:	cmpne	r5, #0
   24de0:	beq	24e0c <__assert_fail@plt+0x1346c>
   24de4:	add	r6, r6, #1
   24de8:	cmp	r4, r6
   24dec:	bge	24db0 <__assert_fail@plt+0x13410>
   24df0:	cmp	r7, r4
   24df4:	beq	25120 <__assert_fail@plt+0x13780>
   24df8:	ldr	r1, [sp, #20]
   24dfc:	mov	r0, r5
   24e00:	bl	1dac0 <__assert_fail@plt+0xc120>
   24e04:	subs	r5, r0, #0
   24e08:	bne	24f98 <__assert_fail@plt+0x135f8>
   24e0c:	mov	r3, #12
   24e10:	str	r3, [fp]
   24e14:	mov	r6, #0
   24e18:	ldr	r2, [fp]
   24e1c:	clz	r3, r6
   24e20:	lsr	r3, r3, #5
   24e24:	cmp	r2, #0
   24e28:	moveq	r3, #0
   24e2c:	cmp	r3, #0
   24e30:	bne	24eec <__assert_fail@plt+0x1354c>
   24e34:	ldr	r3, [sp, #24]
   24e38:	tst	r3, #16777216	; 0x1000000
   24e3c:	beq	24f10 <__assert_fail@plt+0x13570>
   24e40:	ldrb	r3, [r8, #4]
   24e44:	mov	sl, r6
   24e48:	cmp	r3, #23
   24e4c:	cmpne	r3, #11
   24e50:	bne	24f14 <__assert_fail@plt+0x13574>
   24e54:	cmp	r6, #0
   24e58:	beq	24e70 <__assert_fail@plt+0x134d0>
   24e5c:	mov	r2, #0
   24e60:	movw	r1, #63352	; 0xf778
   24e64:	movt	r1, #1
   24e68:	mov	r0, r6
   24e6c:	bl	1cde4 <__assert_fail@plt+0xb444>
   24e70:	mov	r3, #13
   24e74:	str	r3, [fp]
   24e78:	mov	sl, #0
   24e7c:	mov	r0, sl
   24e80:	add	sp, sp, #164	; 0xa4
   24e84:	ldrd	r4, [sp]
   24e88:	ldrd	r6, [sp, #8]
   24e8c:	ldrd	r8, [sp, #16]
   24e90:	ldrd	sl, [sp, #24]
   24e94:	add	sp, sp, #32
   24e98:	pop	{pc}		; (ldr pc, [sp], #4)
   24e9c:	cmp	r4, r7
   24ea0:	beq	24edc <__assert_fail@plt+0x1353c>
   24ea4:	mov	r5, sl
   24ea8:	str	sl, [sp, #28]
   24eac:	b	24df8 <__assert_fail@plt+0x13458>
   24eb0:	mov	r5, sl
   24eb4:	mov	r3, #0
   24eb8:	str	r3, [sp, #28]
   24ebc:	b	24f98 <__assert_fail@plt+0x135f8>
   24ec0:	ldr	r2, [r5, #20]
   24ec4:	ldr	r1, [sp, #32]
   24ec8:	mov	r0, r5
   24ecc:	bl	1cde4 <__assert_fail@plt+0xb444>
   24ed0:	b	24fa4 <__assert_fail@plt+0x13604>
   24ed4:	mov	r6, sl
   24ed8:	b	24e18 <__assert_fail@plt+0x13478>
   24edc:	mov	r6, sl
   24ee0:	b	24e18 <__assert_fail@plt+0x13478>
   24ee4:	mov	r6, sl
   24ee8:	b	24e18 <__assert_fail@plt+0x13478>
   24eec:	cmp	sl, #0
   24ef0:	beq	24e7c <__assert_fail@plt+0x134dc>
   24ef4:	mov	r2, #0
   24ef8:	movw	r1, #63352	; 0xf778
   24efc:	movt	r1, #1
   24f00:	mov	r0, sl
   24f04:	bl	1cde4 <__assert_fail@plt+0xb444>
   24f08:	mov	sl, #0
   24f0c:	b	24e7c <__assert_fail@plt+0x134dc>
   24f10:	mov	sl, r6
   24f14:	ldrb	r5, [r8, #4]
   24f18:	cmp	r5, #18
   24f1c:	movne	r4, #0
   24f20:	moveq	r4, #1
   24f24:	cmp	r5, #11
   24f28:	cmpne	r5, #23
   24f2c:	moveq	r3, #1
   24f30:	movne	r3, #0
   24f34:	sub	r2, r5, #18
   24f38:	uxtb	r2, r2
   24f3c:	cmp	r2, #1
   24f40:	orrls	r3, r3, #1
   24f44:	cmp	r3, #0
   24f48:	beq	24e7c <__assert_fail@plt+0x134dc>
   24f4c:	ldr	r6, [r9, #40]	; 0x28
   24f50:	ldrd	r2, [r8]
   24f54:	strd	r2, [sp, #128]	; 0x80
   24f58:	cmp	r5, #23
   24f5c:	beq	24c04 <__assert_fail@plt+0x13264>
   24f60:	cmp	r5, #19
   24f64:	moveq	r7, #1
   24f68:	mvnne	r7, #0
   24f6c:	ldr	r2, [sp, #24]
   24f70:	mov	r1, r9
   24f74:	mov	r0, r8
   24f78:	bl	1f5f4 <__assert_fail@plt+0xdc54>
   24f7c:	cmp	sl, #0
   24f80:	beq	24ee4 <__assert_fail@plt+0x13544>
   24f84:	cmp	r5, #18
   24f88:	beq	24e9c <__assert_fail@plt+0x134fc>
   24f8c:	mov	r5, sl
   24f90:	mov	r3, #0
   24f94:	str	r3, [sp, #28]
   24f98:	ldrb	r3, [r5, #24]
   24f9c:	cmp	r3, #17
   24fa0:	beq	24ec0 <__assert_fail@plt+0x13520>
   24fa4:	cmn	r7, #1
   24fa8:	moveq	r3, #11
   24fac:	movne	r3, #10
   24fb0:	mov	r2, #0
   24fb4:	mov	r1, r5
   24fb8:	ldr	r0, [sp, #20]
   24fbc:	bl	1db8c <__assert_fail@plt+0xc1ec>
   24fc0:	subs	r6, r0, #0
   24fc4:	beq	24e0c <__assert_fail@plt+0x1346c>
   24fc8:	add	r4, r4, #2
   24fcc:	cmp	r7, r4
   24fd0:	blt	25030 <__assert_fail@plt+0x13690>
   24fd4:	ldr	r1, [sp, #20]
   24fd8:	mov	r0, r5
   24fdc:	bl	1dac0 <__assert_fail@plt+0xc120>
   24fe0:	mov	r5, r0
   24fe4:	mov	r3, #16
   24fe8:	mov	r2, r0
   24fec:	mov	r1, r6
   24ff0:	ldr	r6, [sp, #20]
   24ff4:	mov	r0, r6
   24ff8:	bl	1db8c <__assert_fail@plt+0xc1ec>
   24ffc:	mov	r1, r0
   25000:	cmp	r0, #0
   25004:	cmpne	r5, #0
   25008:	beq	24e0c <__assert_fail@plt+0x1346c>
   2500c:	mov	r3, #10
   25010:	mov	r2, #0
   25014:	mov	r0, r6
   25018:	bl	1db8c <__assert_fail@plt+0xc1ec>
   2501c:	subs	r6, r0, #0
   25020:	beq	24e0c <__assert_fail@plt+0x1346c>
   25024:	add	r4, r4, #1
   25028:	cmp	r7, r4
   2502c:	bge	24fd4 <__assert_fail@plt+0x13634>
   25030:	ldr	r3, [sp, #28]
   25034:	cmp	r3, #0
   25038:	beq	24e34 <__assert_fail@plt+0x13494>
   2503c:	mov	r3, #16
   25040:	mov	r2, r6
   25044:	ldr	r1, [sp, #28]
   25048:	ldr	r0, [sp, #20]
   2504c:	bl	1db8c <__assert_fail@plt+0xc1ec>
   25050:	mov	r6, r0
   25054:	b	24e18 <__assert_fail@plt+0x13478>
   25058:	mov	sl, #0
   2505c:	b	24e7c <__assert_fail@plt+0x134dc>
   25060:	mov	sl, #0
   25064:	b	24e7c <__assert_fail@plt+0x134dc>
   25068:	mov	r3, #3
   2506c:	strb	r3, [sp, #132]	; 0x84
   25070:	ldr	r3, [sp, #32]
   25074:	str	r3, [sp, #128]	; 0x80
   25078:	add	r3, sp, #128	; 0x80
   2507c:	mov	r2, #0
   25080:	mov	r1, r2
   25084:	ldr	r0, [sp, #20]
   25088:	bl	1d9f0 <__assert_fail@plt+0xc050>
   2508c:	subs	r1, r0, #0
   25090:	beq	2477c <__assert_fail@plt+0x12ddc>
   25094:	mov	r3, #10
   25098:	mov	r2, sl
   2509c:	ldr	r0, [sp, #20]
   250a0:	bl	1db8c <__assert_fail@plt+0xc1ec>
   250a4:	subs	sl, r0, #0
   250a8:	bne	24870 <__assert_fail@plt+0x12ed0>
   250ac:	b	2477c <__assert_fail@plt+0x12ddc>
   250b0:	ldr	fp, [sp, #204]	; 0xcc
   250b4:	mov	r3, #3
   250b8:	str	r3, [fp]
   250bc:	b	240c0 <__assert_fail@plt+0x12720>
   250c0:	ldr	fp, [sp, #204]	; 0xcc
   250c4:	mov	r3, #3
   250c8:	str	r3, [fp]
   250cc:	b	240c0 <__assert_fail@plt+0x12720>
   250d0:	mov	r3, #0
   250d4:	ldr	r2, [sp, #204]	; 0xcc
   250d8:	str	r3, [r2]
   250dc:	b	24438 <__assert_fail@plt+0x12a98>
   250e0:	ldr	fp, [sp, #204]	; 0xcc
   250e4:	mov	r3, #11
   250e8:	b	250f4 <__assert_fail@plt+0x13754>
   250ec:	ldr	fp, [sp, #204]	; 0xcc
   250f0:	mov	r3, #11
   250f4:	str	r3, [fp]
   250f8:	b	240c0 <__assert_fail@plt+0x12720>
   250fc:	ldr	fp, [sp, #204]	; 0xcc
   25100:	mov	r3, #3
   25104:	b	250f4 <__assert_fail@plt+0x13754>
   25108:	ldr	fp, [sp, #204]	; 0xcc
   2510c:	mov	r3, #3
   25110:	b	250f4 <__assert_fail@plt+0x13754>
   25114:	ldr	fp, [sp, #204]	; 0xcc
   25118:	mov	r3, #11
   2511c:	b	250f4 <__assert_fail@plt+0x13754>
   25120:	ldr	r6, [sp, #28]
   25124:	b	24e34 <__assert_fail@plt+0x13494>
   25128:	ldr	r3, [sp, #80]	; 0x50
   2512c:	cmp	r3, #3
   25130:	cmpne	r3, #0
   25134:	bne	2422c <__assert_fail@plt+0x1288c>
   25138:	b	24230 <__assert_fail@plt+0x12890>
   2513c:	ldr	r0, [sp, #84]	; 0x54
   25140:	bl	117a8 <strlen@plt>
   25144:	cmp	r0, #1
   25148:	bls	242c4 <__assert_fail@plt+0x12924>
   2514c:	ldr	fp, [sp, #204]	; 0xcc
   25150:	mov	r3, #3
   25154:	b	250f4 <__assert_fail@plt+0x13754>
   25158:	strd	r4, [sp, #-36]!	; 0xffffffdc
   2515c:	strd	r6, [sp, #8]
   25160:	strd	r8, [sp, #16]
   25164:	strd	sl, [sp, #24]
   25168:	str	lr, [sp, #32]
   2516c:	sub	sp, sp, #20
   25170:	mov	fp, r0
   25174:	mov	r9, r1
   25178:	mov	r8, r2
   2517c:	mov	sl, r3
   25180:	ldr	r7, [sp, #56]	; 0x38
   25184:	ldr	r6, [sp, #60]	; 0x3c
   25188:	ldr	ip, [r1]
   2518c:	str	ip, [sp, #12]
   25190:	str	r6, [sp, #4]
   25194:	str	r7, [sp]
   25198:	bl	23cf4 <__assert_fail@plt+0x12354>
   2519c:	ldr	r3, [r6]
   251a0:	mov	r4, r0
   251a4:	clz	r0, r0
   251a8:	lsr	r0, r0, #5
   251ac:	cmp	r3, #0
   251b0:	moveq	r0, #0
   251b4:	cmp	r0, #0
   251b8:	beq	25208 <__assert_fail@plt+0x13868>
   251bc:	mov	r4, #0
   251c0:	b	252bc <__assert_fail@plt+0x1391c>
   251c4:	cmp	r4, #0
   251c8:	beq	252bc <__assert_fail@plt+0x1391c>
   251cc:	mov	r2, #0
   251d0:	movw	r1, #63352	; 0xf778
   251d4:	movt	r1, #1
   251d8:	mov	r0, r4
   251dc:	bl	1cde4 <__assert_fail@plt+0xb444>
   251e0:	mov	r4, #0
   251e4:	b	252bc <__assert_fail@plt+0x1391c>
   251e8:	mov	r3, #16
   251ec:	mov	r2, r5
   251f0:	mov	r1, r4
   251f4:	ldr	r0, [sp, #12]
   251f8:	bl	1db8c <__assert_fail@plt+0xc1ec>
   251fc:	cmp	r0, #0
   25200:	beq	25284 <__assert_fail@plt+0x138e4>
   25204:	mov	r4, r0
   25208:	ldrb	r2, [r8, #4]
   2520c:	and	r3, r2, #247	; 0xf7
   25210:	cmp	r3, #2
   25214:	beq	252bc <__assert_fail@plt+0x1391c>
   25218:	clz	r3, r7
   2521c:	lsr	r3, r3, #5
   25220:	cmp	r2, #9
   25224:	orrne	r3, r3, #1
   25228:	cmp	r3, #0
   2522c:	beq	252bc <__assert_fail@plt+0x1391c>
   25230:	str	r6, [sp, #4]
   25234:	str	r7, [sp]
   25238:	mov	r3, sl
   2523c:	mov	r2, r8
   25240:	mov	r1, r9
   25244:	mov	r0, fp
   25248:	bl	23cf4 <__assert_fail@plt+0x12354>
   2524c:	ldr	r3, [r6]
   25250:	mov	r5, r0
   25254:	clz	r0, r0
   25258:	lsr	r0, r0, #5
   2525c:	cmp	r3, #0
   25260:	moveq	r0, #0
   25264:	cmp	r0, #0
   25268:	bne	251c4 <__assert_fail@plt+0x13824>
   2526c:	cmp	r4, #0
   25270:	cmpne	r5, #0
   25274:	bne	251e8 <__assert_fail@plt+0x13848>
   25278:	cmp	r4, #0
   2527c:	moveq	r4, r5
   25280:	b	25208 <__assert_fail@plt+0x13868>
   25284:	mov	fp, r0
   25288:	movw	r7, #63352	; 0xf778
   2528c:	movt	r7, #1
   25290:	mov	r2, #0
   25294:	mov	r1, r7
   25298:	mov	r0, r5
   2529c:	bl	1cde4 <__assert_fail@plt+0xb444>
   252a0:	mov	r2, #0
   252a4:	mov	r1, r7
   252a8:	mov	r0, r4
   252ac:	bl	1cde4 <__assert_fail@plt+0xb444>
   252b0:	mov	r3, #12
   252b4:	str	r3, [r6]
   252b8:	mov	r4, fp
   252bc:	mov	r0, r4
   252c0:	add	sp, sp, #20
   252c4:	ldrd	r4, [sp]
   252c8:	ldrd	r6, [sp, #8]
   252cc:	ldrd	r8, [sp, #16]
   252d0:	ldrd	sl, [sp, #24]
   252d4:	add	sp, sp, #32
   252d8:	pop	{pc}		; (ldr pc, [sp], #4)
   252dc:	strd	r4, [sp, #-36]!	; 0xffffffdc
   252e0:	strd	r6, [sp, #8]
   252e4:	strd	r8, [sp, #16]
   252e8:	strd	sl, [sp, #24]
   252ec:	str	lr, [sp, #32]
   252f0:	sub	sp, sp, #28
   252f4:	str	r0, [sp, #12]
   252f8:	str	r1, [sp, #16]
   252fc:	mov	r4, r2
   25300:	mov	r9, r3
   25304:	str	r3, [sp, #20]
   25308:	ldr	r8, [sp, #64]	; 0x40
   2530c:	ldr	r7, [sp, #68]	; 0x44
   25310:	ldr	r5, [r1]
   25314:	ldr	fp, [r5, #84]	; 0x54
   25318:	str	r7, [sp, #4]
   2531c:	str	r8, [sp]
   25320:	bl	25158 <__assert_fail@plt+0x137b8>
   25324:	ldr	r3, [r7]
   25328:	mov	r6, r0
   2532c:	clz	r0, r0
   25330:	lsr	r0, r0, #5
   25334:	cmp	r3, #0
   25338:	moveq	r0, #0
   2533c:	cmp	r0, #0
   25340:	bne	25454 <__assert_fail@plt+0x13ab4>
   25344:	orr	r9, r9, #8388608	; 0x800000
   25348:	b	2538c <__assert_fail@plt+0x139ec>
   2534c:	cmp	r6, #0
   25350:	beq	25434 <__assert_fail@plt+0x13a94>
   25354:	mov	r2, #0
   25358:	movw	r1, #63352	; 0xf778
   2535c:	movt	r1, #1
   25360:	mov	r0, r6
   25364:	bl	1cde4 <__assert_fail@plt+0xb444>
   25368:	mov	r6, #0
   2536c:	b	25434 <__assert_fail@plt+0x13a94>
   25370:	mov	r2, #0
   25374:	mov	r3, #10
   25378:	mov	r1, r6
   2537c:	mov	r0, r5
   25380:	bl	1db8c <__assert_fail@plt+0xc1ec>
   25384:	subs	r6, r0, #0
   25388:	beq	2542c <__assert_fail@plt+0x13a8c>
   2538c:	ldrb	r3, [r4, #4]
   25390:	cmp	r3, #10
   25394:	bne	25434 <__assert_fail@plt+0x13a94>
   25398:	mov	r2, r9
   2539c:	ldr	r1, [sp, #12]
   253a0:	mov	r0, r4
   253a4:	bl	1f5f4 <__assert_fail@plt+0xdc54>
   253a8:	ldrb	r2, [r4, #4]
   253ac:	and	r3, r2, #247	; 0xf7
   253b0:	cmp	r3, #2
   253b4:	beq	25370 <__assert_fail@plt+0x139d0>
   253b8:	clz	r3, r8
   253bc:	lsr	r3, r3, #5
   253c0:	cmp	r2, #9
   253c4:	orrne	r3, r3, #1
   253c8:	cmp	r3, #0
   253cc:	beq	25424 <__assert_fail@plt+0x13a84>
   253d0:	ldr	sl, [r5, #84]	; 0x54
   253d4:	str	fp, [r5, #84]	; 0x54
   253d8:	str	r7, [sp, #4]
   253dc:	str	r8, [sp]
   253e0:	ldr	r3, [sp, #20]
   253e4:	mov	r2, r4
   253e8:	ldr	r1, [sp, #16]
   253ec:	ldr	r0, [sp, #12]
   253f0:	bl	25158 <__assert_fail@plt+0x137b8>
   253f4:	ldr	r3, [r7]
   253f8:	mov	r2, r0
   253fc:	clz	r0, r0
   25400:	lsr	r0, r0, #5
   25404:	cmp	r3, #0
   25408:	moveq	r0, #0
   2540c:	cmp	r0, #0
   25410:	bne	2534c <__assert_fail@plt+0x139ac>
   25414:	ldr	r3, [r5, #84]	; 0x54
   25418:	orr	sl, r3, sl
   2541c:	str	sl, [r5, #84]	; 0x54
   25420:	b	25374 <__assert_fail@plt+0x139d4>
   25424:	mov	r2, #0
   25428:	b	25374 <__assert_fail@plt+0x139d4>
   2542c:	mov	r3, #12
   25430:	str	r3, [r7]
   25434:	mov	r0, r6
   25438:	add	sp, sp, #28
   2543c:	ldrd	r4, [sp]
   25440:	ldrd	r6, [sp, #8]
   25444:	ldrd	r8, [sp, #16]
   25448:	ldrd	sl, [sp, #24]
   2544c:	add	sp, sp, #32
   25450:	pop	{pc}		; (ldr pc, [sp], #4)
   25454:	mov	r6, #0
   25458:	b	25434 <__assert_fail@plt+0x13a94>
   2545c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   25460:	strd	r6, [sp, #8]
   25464:	strd	r8, [sp, #16]
   25468:	strd	sl, [sp, #24]
   2546c:	str	lr, [sp, #32]
   25470:	sub	sp, sp, #4
   25474:	ldr	lr, [r2, #4]
   25478:	cmp	lr, #0
   2547c:	moveq	r4, #0
   25480:	streq	r4, [r0]
   25484:	beq	25658 <__assert_fail@plt+0x13cb8>
   25488:	mov	r6, lr
   2548c:	cmp	lr, #0
   25490:	ble	254ac <__assert_fail@plt+0x13b0c>
   25494:	ldr	r3, [r2, #8]
   25498:	add	lr, r3, lr, lsl #2
   2549c:	ldr	ip, [r3], #4
   254a0:	add	r6, r6, ip
   254a4:	cmp	r3, lr
   254a8:	bne	2549c <__assert_fail@plt+0x13afc>
   254ac:	mov	fp, r2
   254b0:	mov	r9, r1
   254b4:	mov	sl, r0
   254b8:	ldr	r3, [r1, #68]	; 0x44
   254bc:	and	r3, r3, r6
   254c0:	add	r3, r3, r3, lsl #1
   254c4:	lsl	r3, r3, #2
   254c8:	ldr	r2, [r1, #32]
   254cc:	add	r1, r2, r3
   254d0:	ldr	r8, [r2, r3]
   254d4:	cmp	r8, #0
   254d8:	ble	25520 <__assert_fail@plt+0x13b80>
   254dc:	ldr	r7, [r1, #8]
   254e0:	sub	r7, r7, #4
   254e4:	mov	r5, #0
   254e8:	b	254f8 <__assert_fail@plt+0x13b58>
   254ec:	add	r5, r5, #1
   254f0:	cmp	r8, r5
   254f4:	beq	25520 <__assert_fail@plt+0x13b80>
   254f8:	ldr	r4, [r7, #4]!
   254fc:	ldr	r3, [r4]
   25500:	cmp	r6, r3
   25504:	bne	254ec <__assert_fail@plt+0x13b4c>
   25508:	mov	r1, fp
   2550c:	add	r0, r4, #4
   25510:	bl	1cc94 <__assert_fail@plt+0xb2f4>
   25514:	cmp	r0, #0
   25518:	beq	254ec <__assert_fail@plt+0x13b4c>
   2551c:	b	25658 <__assert_fail@plt+0x13cb8>
   25520:	mov	r1, #1
   25524:	mov	r0, #56	; 0x38
   25528:	bl	1c5f8 <__assert_fail@plt+0xac58>
   2552c:	subs	r4, r0, #0
   25530:	beq	2557c <__assert_fail@plt+0x13bdc>
   25534:	add	r5, r4, #4
   25538:	mov	r1, fp
   2553c:	mov	r0, r5
   25540:	bl	1e698 <__assert_fail@plt+0xccf8>
   25544:	cmp	r0, #0
   25548:	bne	25574 <__assert_fail@plt+0x13bd4>
   2554c:	str	r5, [r4, #40]	; 0x28
   25550:	ldr	lr, [fp, #4]
   25554:	cmp	lr, #0
   25558:	ble	25640 <__assert_fail@plt+0x13ca0>
   2555c:	ldr	r5, [r9]
   25560:	ldr	r1, [fp, #8]
   25564:	add	lr, r1, lr, lsl #2
   25568:	mov	r7, #65280	; 0xff00
   2556c:	movt	r7, #3
   25570:	b	255d8 <__assert_fail@plt+0x13c38>
   25574:	mov	r0, r4
   25578:	bl	1c948 <__assert_fail@plt+0xafa8>
   2557c:	mov	r3, #12
   25580:	str	r3, [sl]
   25584:	mov	r4, #0
   25588:	b	25658 <__assert_fail@plt+0x13cb8>
   2558c:	ldr	r2, [r3, #4]
   25590:	tst	r7, r2
   25594:	beq	255d0 <__assert_fail@plt+0x13c30>
   25598:	ldrb	r2, [r4, #52]	; 0x34
   2559c:	ubfx	r0, r2, #5, #1
   255a0:	ldrb	ip, [r3, #6]
   255a4:	ubfx	ip, ip, #4, #1
   255a8:	orr	r0, r0, ip
   255ac:	bfi	r2, r0, #5, #1
   255b0:	strb	r2, [r4, #52]	; 0x34
   255b4:	ldr	r3, [r3, #4]
   255b8:	tst	r7, r3
   255bc:	beq	255d0 <__assert_fail@plt+0x13c30>
   255c0:	b	25630 <__assert_fail@plt+0x13c90>
   255c4:	uxtb	r3, r2
   255c8:	orr	r3, r3, #16
   255cc:	strb	r3, [r4, #52]	; 0x34
   255d0:	cmp	lr, r1
   255d4:	beq	25640 <__assert_fail@plt+0x13ca0>
   255d8:	ldr	r3, [r1], #4
   255dc:	add	r3, r5, r3, lsl #3
   255e0:	ldrb	r0, [r3, #4]
   255e4:	cmp	r0, #1
   255e8:	beq	2558c <__assert_fail@plt+0x13bec>
   255ec:	ldrb	r2, [r4, #52]	; 0x34
   255f0:	ubfx	ip, r2, #5, #1
   255f4:	ldrb	r8, [r3, #6]
   255f8:	ubfx	r8, r8, #4, #1
   255fc:	orr	ip, ip, r8
   25600:	bfi	r2, ip, #5, #1
   25604:	strb	r2, [r4, #52]	; 0x34
   25608:	cmp	r0, #2
   2560c:	beq	255c4 <__assert_fail@plt+0x13c24>
   25610:	cmp	r0, #4
   25614:	bne	25628 <__assert_fail@plt+0x13c88>
   25618:	ldrb	r3, [r4, #52]	; 0x34
   2561c:	orr	r3, r3, #64	; 0x40
   25620:	strb	r3, [r4, #52]	; 0x34
   25624:	b	255d0 <__assert_fail@plt+0x13c30>
   25628:	cmp	r0, #12
   2562c:	bne	255b4 <__assert_fail@plt+0x13c14>
   25630:	ldrb	r3, [r4, #52]	; 0x34
   25634:	orr	r3, r3, #128	; 0x80
   25638:	strb	r3, [r4, #52]	; 0x34
   2563c:	b	255d0 <__assert_fail@plt+0x13c30>
   25640:	mov	r2, r6
   25644:	mov	r1, r4
   25648:	mov	r0, r9
   2564c:	bl	1de58 <__assert_fail@plt+0xc4b8>
   25650:	cmp	r0, #0
   25654:	bne	25678 <__assert_fail@plt+0x13cd8>
   25658:	mov	r0, r4
   2565c:	add	sp, sp, #4
   25660:	ldrd	r4, [sp]
   25664:	ldrd	r6, [sp, #8]
   25668:	ldrd	r8, [sp, #16]
   2566c:	ldrd	sl, [sp, #24]
   25670:	add	sp, sp, #32
   25674:	pop	{pc}		; (ldr pc, [sp], #4)
   25678:	mov	r0, r4
   2567c:	bl	1fadc <__assert_fail@plt+0xe13c>
   25680:	b	2557c <__assert_fail@plt+0x13bdc>
   25684:	strd	r4, [sp, #-28]!	; 0xffffffe4
   25688:	strd	r6, [sp, #8]
   2568c:	strd	r8, [sp, #16]
   25690:	str	lr, [sp, #24]
   25694:	sub	sp, sp, #20
   25698:	subs	r8, r3, #0
   2569c:	ble	25748 <__assert_fail@plt+0x13da8>
   256a0:	mov	r7, r2
   256a4:	mov	r9, r0
   256a8:	sub	r4, r1, #4
   256ac:	mov	r5, #0
   256b0:	b	256c8 <__assert_fail@plt+0x13d28>
   256b4:	ldr	r3, [r7, r5, lsl #2]
   256b8:	str	r3, [r4]
   256bc:	add	r5, r5, #1
   256c0:	cmp	r8, r5
   256c4:	beq	2572c <__assert_fail@plt+0x13d8c>
   256c8:	add	r4, r4, #4
   256cc:	ldr	r1, [r4]
   256d0:	cmp	r1, #0
   256d4:	beq	256b4 <__assert_fail@plt+0x13d14>
   256d8:	ldr	r2, [r7, r5, lsl #2]
   256dc:	cmp	r2, #0
   256e0:	beq	256bc <__assert_fail@plt+0x13d1c>
   256e4:	add	r2, r2, #4
   256e8:	add	r1, r1, #4
   256ec:	mov	r0, sp
   256f0:	bl	1e720 <__assert_fail@plt+0xcd80>
   256f4:	str	r0, [sp, #12]
   256f8:	cmp	r0, #0
   256fc:	bne	25730 <__assert_fail@plt+0x13d90>
   25700:	mov	r2, sp
   25704:	mov	r1, r9
   25708:	add	r0, sp, #12
   2570c:	bl	2545c <__assert_fail@plt+0x13abc>
   25710:	str	r0, [r4]
   25714:	ldr	r0, [sp, #8]
   25718:	bl	1c948 <__assert_fail@plt+0xafa8>
   2571c:	ldr	r0, [sp, #12]
   25720:	cmp	r0, #0
   25724:	beq	256bc <__assert_fail@plt+0x13d1c>
   25728:	b	25730 <__assert_fail@plt+0x13d90>
   2572c:	mov	r0, #0
   25730:	add	sp, sp, #20
   25734:	ldrd	r4, [sp]
   25738:	ldrd	r6, [sp, #8]
   2573c:	ldrd	r8, [sp, #16]
   25740:	add	sp, sp, #24
   25744:	pop	{pc}		; (ldr pc, [sp], #4)
   25748:	mov	r0, #0
   2574c:	b	25730 <__assert_fail@plt+0x13d90>
   25750:	strd	r4, [sp, #-36]!	; 0xffffffdc
   25754:	strd	r6, [sp, #8]
   25758:	strd	r8, [sp, #16]
   2575c:	strd	sl, [sp, #24]
   25760:	str	lr, [sp, #32]
   25764:	sub	sp, sp, #28
   25768:	mov	r8, r0
   2576c:	str	r1, [sp]
   25770:	mov	r7, r2
   25774:	str	r3, [sp, #4]
   25778:	mov	r1, r2
   2577c:	bl	1d6f4 <__assert_fail@plt+0xbd54>
   25780:	cmn	r0, #1
   25784:	moveq	r0, #0
   25788:	beq	25958 <__assert_fail@plt+0x13fb8>
   2578c:	ldr	r9, [r8, #84]	; 0x54
   25790:	add	r0, r0, #1
   25794:	add	r0, r0, r0, lsl #1
   25798:	lsl	fp, r0, #3
   2579c:	b	2581c <__assert_fail@plt+0x13e7c>
   257a0:	ldr	r3, [r9, #20]
   257a4:	add	r6, r6, r6, lsl #1
   257a8:	add	r6, r3, r6, lsl #2
   257ac:	ldr	r3, [r6, #8]
   257b0:	ldr	r5, [r3]
   257b4:	mov	r1, r5
   257b8:	ldr	r6, [sp]
   257bc:	mov	r0, r6
   257c0:	bl	1ccfc <__assert_fail@plt+0xb35c>
   257c4:	cmp	r0, #0
   257c8:	bne	25888 <__assert_fail@plt+0x13ee8>
   257cc:	mov	r1, r5
   257d0:	add	r0, sp, #8
   257d4:	bl	1ddc4 <__assert_fail@plt+0xc424>
   257d8:	str	r0, [sp, #20]
   257dc:	ldr	r3, [sp, #64]	; 0x40
   257e0:	ldr	r2, [sp, #4]
   257e4:	add	r1, sp, #8
   257e8:	mov	r0, r9
   257ec:	bl	21348 <__assert_fail@plt+0xf9a8>
   257f0:	mov	r4, r0
   257f4:	add	r1, sp, #8
   257f8:	mov	r0, r6
   257fc:	bl	20afc <__assert_fail@plt+0xf15c>
   25800:	mov	r5, r0
   25804:	ldr	r0, [sp, #16]
   25808:	bl	1c948 <__assert_fail@plt+0xafa8>
   2580c:	ldr	r0, [sp, #20]
   25810:	orr	r3, r4, r5
   25814:	orrs	r3, r3, r0
   25818:	bne	25828 <__assert_fail@plt+0x13e88>
   2581c:	ldr	r4, [r8, #116]	; 0x74
   25820:	add	r4, r4, fp
   25824:	b	25898 <__assert_fail@plt+0x13ef8>
   25828:	cmp	r0, #0
   2582c:	bne	25958 <__assert_fail@plt+0x13fb8>
   25830:	cmp	r4, #0
   25834:	movne	r0, r4
   25838:	moveq	r0, r5
   2583c:	b	25958 <__assert_fail@plt+0x13fb8>
   25840:	mov	r1, sl
   25844:	add	r0, sp, #8
   25848:	bl	1ddc4 <__assert_fail@plt+0xc424>
   2584c:	str	r0, [sp, #20]
   25850:	cmp	r0, #0
   25854:	bne	25958 <__assert_fail@plt+0x13fb8>
   25858:	ldr	r6, [r8, #100]	; 0x64
   2585c:	add	r2, sp, #8
   25860:	mov	r1, r9
   25864:	add	r0, sp, #20
   25868:	bl	2545c <__assert_fail@plt+0x13abc>
   2586c:	str	r0, [r6, r5, lsl #2]
   25870:	ldr	r0, [sp, #16]
   25874:	bl	1c948 <__assert_fail@plt+0xafa8>
   25878:	ldr	r3, [r8, #100]	; 0x64
   2587c:	ldr	r3, [r3, r5, lsl #2]
   25880:	cmp	r3, #0
   25884:	beq	25944 <__assert_fail@plt+0x13fa4>
   25888:	add	r4, r4, #24
   2588c:	ldrb	r3, [r4, #-28]	; 0xffffffe4
   25890:	cmp	r3, #0
   25894:	beq	25954 <__assert_fail@plt+0x13fb4>
   25898:	ldr	r6, [r4, #-24]	; 0xffffffe8
   2589c:	mov	r1, r6
   258a0:	ldr	r0, [sp]
   258a4:	bl	1ccfc <__assert_fail@plt+0xb35c>
   258a8:	cmp	r0, #0
   258ac:	beq	25888 <__assert_fail@plt+0x13ee8>
   258b0:	ldr	r5, [r4, #-12]
   258b4:	add	r5, r7, r5
   258b8:	ldr	r3, [r4, #-16]
   258bc:	sub	r5, r5, r3
   258c0:	cmp	r7, r5
   258c4:	beq	257a0 <__assert_fail@plt+0x13e00>
   258c8:	ldr	r3, [r9, #12]
   258cc:	ldr	sl, [r3, r6, lsl #2]
   258d0:	ldr	r3, [r8, #100]	; 0x64
   258d4:	ldr	r6, [r3, r5, lsl #2]
   258d8:	cmp	r6, #0
   258dc:	beq	25840 <__assert_fail@plt+0x13ea0>
   258e0:	add	r6, r6, #4
   258e4:	mov	r1, sl
   258e8:	mov	r0, r6
   258ec:	bl	1ccfc <__assert_fail@plt+0xb35c>
   258f0:	cmp	r0, #0
   258f4:	bne	25888 <__assert_fail@plt+0x13ee8>
   258f8:	mov	r1, r6
   258fc:	add	r0, sp, #8
   25900:	bl	1e698 <__assert_fail@plt+0xccf8>
   25904:	str	r0, [sp, #20]
   25908:	mov	r1, sl
   2590c:	add	r0, sp, #8
   25910:	bl	20564 <__assert_fail@plt+0xebc4>
   25914:	eor	r0, r0, #1
   25918:	ldr	r3, [sp, #20]
   2591c:	cmp	r3, #0
   25920:	orrne	r0, r0, #1
   25924:	tst	r0, #255	; 0xff
   25928:	beq	25858 <__assert_fail@plt+0x13eb8>
   2592c:	ldr	r0, [sp, #16]
   25930:	bl	1c948 <__assert_fail@plt+0xafa8>
   25934:	ldr	r0, [sp, #20]
   25938:	cmp	r0, #0
   2593c:	moveq	r0, #12
   25940:	b	25958 <__assert_fail@plt+0x13fb8>
   25944:	ldr	r0, [sp, #20]
   25948:	cmp	r0, #0
   2594c:	beq	25888 <__assert_fail@plt+0x13ee8>
   25950:	b	25958 <__assert_fail@plt+0x13fb8>
   25954:	mov	r0, #0
   25958:	add	sp, sp, #28
   2595c:	ldrd	r4, [sp]
   25960:	ldrd	r6, [sp, #8]
   25964:	ldrd	r8, [sp, #16]
   25968:	ldrd	sl, [sp, #24]
   2596c:	add	sp, sp, #32
   25970:	pop	{pc}		; (ldr pc, [sp], #4)
   25974:	strd	r4, [sp, #-36]!	; 0xffffffdc
   25978:	strd	r6, [sp, #8]
   2597c:	strd	r8, [sp, #16]
   25980:	strd	sl, [sp, #24]
   25984:	str	lr, [sp, #32]
   25988:	sub	sp, sp, #84	; 0x54
   2598c:	mov	r4, r0
   25990:	str	r1, [sp, #32]
   25994:	mov	r7, r2
   25998:	mov	r6, r3
   2599c:	ldr	r3, [r0, #84]	; 0x54
   259a0:	mov	r2, r3
   259a4:	str	r3, [sp, #24]
   259a8:	mov	r3, #0
   259ac:	str	r3, [sp, #76]	; 0x4c
   259b0:	ldr	r3, [r2]
   259b4:	ldr	r3, [r3, r7, lsl #3]
   259b8:	str	r3, [sp, #28]
   259bc:	ldr	r5, [r0, #120]	; 0x78
   259c0:	ldr	r3, [sp, #124]	; 0x7c
   259c4:	add	r5, r3, r5
   259c8:	ldr	r8, [r1, #4]
   259cc:	cmp	r5, r8
   259d0:	bge	25b20 <__assert_fail@plt+0x14180>
   259d4:	ldr	r3, [sp, #32]
   259d8:	ldr	r5, [r3]
   259dc:	cmp	r5, #0
   259e0:	beq	25f4c <__assert_fail@plt+0x145ac>
   259e4:	ldr	r2, [r4, #100]	; 0x64
   259e8:	str	r2, [sp, #40]	; 0x28
   259ec:	ldr	r2, [r4, #40]	; 0x28
   259f0:	str	r2, [sp, #44]	; 0x2c
   259f4:	ldr	r9, [r3, #8]
   259f8:	str	r9, [r4, #100]	; 0x64
   259fc:	str	r5, [r4, #40]	; 0x28
   25a00:	str	r4, [sp, #12]
   25a04:	ldr	r2, [r4, #88]	; 0x58
   25a08:	sub	r1, r5, #1
   25a0c:	mov	r0, r4
   25a10:	bl	20efc <__assert_fail@plt+0xf55c>
   25a14:	mov	r8, r0
   25a18:	cmp	r5, r6
   25a1c:	beq	25f84 <__assert_fail@plt+0x145e4>
   25a20:	ldr	sl, [r9, r5, lsl #2]
   25a24:	cmp	sl, #0
   25a28:	beq	25fd0 <__assert_fail@plt+0x14630>
   25a2c:	ldrb	r3, [sl, #52]	; 0x34
   25a30:	tst	r3, #64	; 0x40
   25a34:	bne	25b78 <__assert_fail@plt+0x141d8>
   25a38:	mov	r3, #0
   25a3c:	str	r3, [sp, #64]	; 0x40
   25a40:	str	r3, [sp, #68]	; 0x44
   25a44:	str	r3, [sp, #72]	; 0x48
   25a48:	ldrb	r3, [sl, #52]	; 0x34
   25a4c:	tst	r3, #64	; 0x40
   25a50:	beq	25aac <__assert_fail@plt+0x1410c>
   25a54:	ldr	r3, [sp, #68]	; 0x44
   25a58:	cmp	r3, #0
   25a5c:	beq	25a88 <__assert_fail@plt+0x140e8>
   25a60:	ldr	r3, [sp, #128]	; 0x80
   25a64:	str	r3, [sp]
   25a68:	ldr	r3, [sp, #28]
   25a6c:	mov	r2, r5
   25a70:	add	r1, sp, #64	; 0x40
   25a74:	mov	r0, r4
   25a78:	bl	25750 <__assert_fail@plt+0x13db0>
   25a7c:	str	r0, [sp, #76]	; 0x4c
   25a80:	cmp	r0, #0
   25a84:	bne	25b94 <__assert_fail@plt+0x141f4>
   25a88:	mov	r3, r8
   25a8c:	add	r2, sp, #64	; 0x40
   25a90:	ldr	r1, [sp, #24]
   25a94:	add	r0, sp, #76	; 0x4c
   25a98:	bl	1fb44 <__assert_fail@plt+0xe1a4>
   25a9c:	subs	sl, r0, #0
   25aa0:	beq	25ba4 <__assert_fail@plt+0x14204>
   25aa4:	ldr	r3, [r4, #100]	; 0x64
   25aa8:	str	sl, [r3, r5, lsl #2]
   25aac:	ldr	r3, [sp, #124]	; 0x7c
   25ab0:	cmp	r3, r5
   25ab4:	ble	25ad4 <__assert_fail@plt+0x14134>
   25ab8:	ldr	r3, [r4, #120]	; 0x78
   25abc:	cmp	r3, #0
   25ac0:	addge	r7, r5, #1
   25ac4:	movge	r3, #0
   25ac8:	strge	r3, [sp, #16]
   25acc:	movge	r9, r3
   25ad0:	bge	25db8 <__assert_fail@plt+0x14418>
   25ad4:	ldr	r0, [sp, #72]	; 0x48
   25ad8:	bl	1c948 <__assert_fail@plt+0xafa8>
   25adc:	ldr	r3, [r4, #100]	; 0x64
   25ae0:	ldr	r2, [sp, #124]	; 0x7c
   25ae4:	ldr	r0, [r3, r2, lsl #2]
   25ae8:	cmp	r0, #0
   25aec:	beq	25f1c <__assert_fail@plt+0x1457c>
   25af0:	ldr	r3, [sp, #32]
   25af4:	str	r5, [r3]
   25af8:	ldr	r3, [sp, #40]	; 0x28
   25afc:	str	r3, [r4, #100]	; 0x64
   25b00:	ldr	r3, [sp, #44]	; 0x2c
   25b04:	str	r3, [r4, #40]	; 0x28
   25b08:	ldr	r1, [sp, #120]	; 0x78
   25b0c:	add	r0, r0, #4
   25b10:	bl	1ccfc <__assert_fail@plt+0xb35c>
   25b14:	clz	r0, r0
   25b18:	lsr	r0, r0, #5
   25b1c:	b	25bcc <__assert_fail@plt+0x1422c>
   25b20:	add	r5, r5, #1
   25b24:	movw	r3, #65535	; 0xffff
   25b28:	movt	r3, #32767	; 0x7fff
   25b2c:	sub	r3, r3, r8
   25b30:	cmp	r3, r5
   25b34:	blt	25f04 <__assert_fail@plt+0x14564>
   25b38:	add	r9, r8, r5
   25b3c:	cmn	r9, #-1073741823	; 0xc0000001
   25b40:	bhi	25f0c <__assert_fail@plt+0x1456c>
   25b44:	lsl	r1, r9, #2
   25b48:	ldr	sl, [sp, #32]
   25b4c:	ldr	r0, [sl, #8]
   25b50:	bl	1cb14 <__assert_fail@plt+0xb174>
   25b54:	cmp	r0, #0
   25b58:	beq	25f14 <__assert_fail@plt+0x14574>
   25b5c:	str	r0, [sl, #8]
   25b60:	str	r9, [sl, #4]
   25b64:	lsl	r2, r5, #2
   25b68:	mov	r1, #0
   25b6c:	add	r0, r0, r8, lsl #2
   25b70:	bl	11814 <memset@plt>
   25b74:	b	259d4 <__assert_fail@plt+0x14034>
   25b78:	add	r1, sl, #4
   25b7c:	add	r0, sp, #64	; 0x40
   25b80:	bl	1e698 <__assert_fail@plt+0xccf8>
   25b84:	str	r0, [sp, #76]	; 0x4c
   25b88:	cmp	r0, #0
   25b8c:	beq	25a48 <__assert_fail@plt+0x140a8>
   25b90:	b	25bcc <__assert_fail@plt+0x1422c>
   25b94:	ldr	r0, [sp, #72]	; 0x48
   25b98:	bl	1c948 <__assert_fail@plt+0xafa8>
   25b9c:	ldr	r0, [sp, #76]	; 0x4c
   25ba0:	b	25bcc <__assert_fail@plt+0x1422c>
   25ba4:	ldr	r3, [sp, #76]	; 0x4c
   25ba8:	cmp	r3, #0
   25bac:	beq	25aa4 <__assert_fail@plt+0x14104>
   25bb0:	ldr	r0, [sp, #72]	; 0x48
   25bb4:	bl	1c948 <__assert_fail@plt+0xafa8>
   25bb8:	ldr	r0, [sp, #76]	; 0x4c
   25bbc:	b	25bcc <__assert_fail@plt+0x1422c>
   25bc0:	ldr	r0, [sp, #72]	; 0x48
   25bc4:	bl	1c948 <__assert_fail@plt+0xafa8>
   25bc8:	ldr	r0, [sp, #76]	; 0x4c
   25bcc:	add	sp, sp, #84	; 0x54
   25bd0:	ldrd	r4, [sp]
   25bd4:	ldrd	r6, [sp, #8]
   25bd8:	ldrd	r8, [sp, #16]
   25bdc:	ldrd	sl, [sp, #24]
   25be0:	add	sp, sp, #32
   25be4:	pop	{pc}		; (ldr pc, [sp], #4)
   25be8:	ldr	r5, [sp, #8]
   25bec:	mov	r3, r5
   25bf0:	ldr	r2, [sp, #12]
   25bf4:	mov	r0, r6
   25bf8:	bl	239a4 <__assert_fail@plt+0x12004>
   25bfc:	cmp	r0, #1
   25c00:	ble	25e6c <__assert_fail@plt+0x144cc>
   25c04:	ldr	r3, [r6, #12]
   25c08:	ldr	fp, [r3, r7, lsl #2]
   25c0c:	add	r5, r5, r0
   25c10:	ldr	r3, [r4, #100]	; 0x64
   25c14:	ldr	r1, [r3, r5, lsl #2]
   25c18:	str	r9, [sp, #56]	; 0x38
   25c1c:	cmp	r1, #0
   25c20:	beq	25c3c <__assert_fail@plt+0x1429c>
   25c24:	add	r1, r1, #4
   25c28:	add	r0, sp, #52	; 0x34
   25c2c:	bl	20afc <__assert_fail@plt+0xf15c>
   25c30:	str	r0, [sp, #48]	; 0x30
   25c34:	cmp	r0, #0
   25c38:	bne	25ce4 <__assert_fail@plt+0x14344>
   25c3c:	mov	r1, fp
   25c40:	add	r0, sp, #52	; 0x34
   25c44:	bl	20564 <__assert_fail@plt+0xebc4>
   25c48:	cmp	r0, #0
   25c4c:	beq	25e40 <__assert_fail@plt+0x144a0>
   25c50:	ldr	fp, [r4, #100]	; 0x64
   25c54:	add	r2, sp, #52	; 0x34
   25c58:	mov	r1, r6
   25c5c:	add	r0, sp, #48	; 0x30
   25c60:	bl	2545c <__assert_fail@plt+0x13abc>
   25c64:	str	r0, [fp, r5, lsl #2]
   25c68:	ldr	r3, [r4, #100]	; 0x64
   25c6c:	ldr	r3, [r3, r5, lsl #2]
   25c70:	cmp	r3, #0
   25c74:	beq	25e4c <__assert_fail@plt+0x144ac>
   25c78:	ldr	r3, [r6, #12]
   25c7c:	ldr	r1, [r3, r7, lsl #2]
   25c80:	add	r0, sp, #64	; 0x40
   25c84:	bl	20564 <__assert_fail@plt+0xebc4>
   25c88:	cmp	r0, #0
   25c8c:	beq	25e78 <__assert_fail@plt+0x144d8>
   25c90:	add	r8, r8, #1
   25c94:	ldr	r3, [sl, #20]
   25c98:	cmp	r8, r3
   25c9c:	bge	25e98 <__assert_fail@plt+0x144f8>
   25ca0:	ldr	r3, [sl, #24]
   25ca4:	ldr	r1, [r3, r8, lsl #2]
   25ca8:	mov	r7, r1
   25cac:	lsl	fp, r1, #3
   25cb0:	ldr	r3, [r6]
   25cb4:	add	r3, r3, fp
   25cb8:	ldrb	r3, [r3, #6]
   25cbc:	tst	r3, #16
   25cc0:	bne	25be8 <__assert_fail@plt+0x14248>
   25cc4:	ldr	r1, [r6]
   25cc8:	ldr	r2, [sp, #8]
   25ccc:	add	r1, r1, fp
   25cd0:	mov	r0, r4
   25cd4:	bl	21008 <__assert_fail@plt+0xf668>
   25cd8:	cmp	r0, #0
   25cdc:	beq	25c90 <__assert_fail@plt+0x142f0>
   25ce0:	b	25c78 <__assert_fail@plt+0x142d8>
   25ce4:	ldr	r7, [sp, #36]	; 0x24
   25ce8:	ldr	r0, [sp, #60]	; 0x3c
   25cec:	bl	1c948 <__assert_fail@plt+0xafa8>
   25cf0:	ldr	r3, [sp, #48]	; 0x30
   25cf4:	str	r3, [sp, #76]	; 0x4c
   25cf8:	cmp	r3, #0
   25cfc:	bne	25e88 <__assert_fail@plt+0x144e8>
   25d00:	mov	r5, r7
   25d04:	ldr	r3, [sp, #68]	; 0x44
   25d08:	cmp	r3, #0
   25d0c:	beq	25d58 <__assert_fail@plt+0x143b8>
   25d10:	ldr	r3, [sp, #128]	; 0x80
   25d14:	ldr	r2, [sp, #28]
   25d18:	add	r1, sp, #64	; 0x40
   25d1c:	ldr	r0, [sp, #24]
   25d20:	bl	21348 <__assert_fail@plt+0xf9a8>
   25d24:	str	r0, [sp, #76]	; 0x4c
   25d28:	cmp	r0, #0
   25d2c:	bne	25eac <__assert_fail@plt+0x1450c>
   25d30:	ldr	r3, [sp, #128]	; 0x80
   25d34:	str	r3, [sp]
   25d38:	ldr	r3, [sp, #28]
   25d3c:	mov	r2, r7
   25d40:	add	r1, sp, #64	; 0x40
   25d44:	mov	r0, r4
   25d48:	bl	25750 <__assert_fail@plt+0x13db0>
   25d4c:	str	r0, [sp, #76]	; 0x4c
   25d50:	cmp	r0, #0
   25d54:	bne	25ebc <__assert_fail@plt+0x1451c>
   25d58:	ldr	r2, [r4, #88]	; 0x58
   25d5c:	ldr	r1, [sp, #8]
   25d60:	ldr	r0, [sp, #12]
   25d64:	bl	20efc <__assert_fail@plt+0xf55c>
   25d68:	mov	r3, r0
   25d6c:	add	r2, sp, #64	; 0x40
   25d70:	ldr	r1, [sp, #24]
   25d74:	add	r0, sp, #76	; 0x4c
   25d78:	bl	1fb44 <__assert_fail@plt+0xe1a4>
   25d7c:	subs	sl, r0, #0
   25d80:	beq	25ecc <__assert_fail@plt+0x1452c>
   25d84:	ldr	r3, [r4, #100]	; 0x64
   25d88:	ldr	r2, [sp, #20]
   25d8c:	str	sl, [r3, r2]
   25d90:	mov	r3, #0
   25d94:	str	r3, [sp, #16]
   25d98:	ldr	r3, [sp, #124]	; 0x7c
   25d9c:	cmp	r3, r5
   25da0:	ble	25ad4 <__assert_fail@plt+0x14134>
   25da4:	add	r7, r7, #1
   25da8:	ldr	r3, [r4, #120]	; 0x78
   25dac:	ldr	r2, [sp, #16]
   25db0:	cmp	r2, r3
   25db4:	bgt	25ad4 <__assert_fail@plt+0x14134>
   25db8:	sub	r3, r7, #1
   25dbc:	str	r3, [sp, #8]
   25dc0:	str	r9, [sp, #68]	; 0x44
   25dc4:	lsl	r3, r7, #2
   25dc8:	str	r3, [sp, #20]
   25dcc:	ldr	r3, [r4, #100]	; 0x64
   25dd0:	ldr	r1, [r3, r7, lsl #2]
   25dd4:	cmp	r1, #0
   25dd8:	beq	25f3c <__assert_fail@plt+0x1459c>
   25ddc:	add	r1, r1, #4
   25de0:	add	r0, sp, #64	; 0x40
   25de4:	bl	20afc <__assert_fail@plt+0xf15c>
   25de8:	str	r0, [sp, #76]	; 0x4c
   25dec:	cmp	r0, #0
   25df0:	bne	25bc0 <__assert_fail@plt+0x14220>
   25df4:	cmp	sl, #0
   25df8:	beq	25d00 <__assert_fail@plt+0x14360>
   25dfc:	ldr	r6, [r4, #84]	; 0x54
   25e00:	str	r9, [sp, #48]	; 0x30
   25e04:	str	r9, [sp, #52]	; 0x34
   25e08:	str	r9, [sp, #56]	; 0x38
   25e0c:	str	r9, [sp, #60]	; 0x3c
   25e10:	ldr	r3, [sl, #20]
   25e14:	cmp	r3, #0
   25e18:	ble	25e9c <__assert_fail@plt+0x144fc>
   25e1c:	ldr	r3, [sl, #24]
   25e20:	ldr	r1, [r3]
   25e24:	lsl	fp, r1, #3
   25e28:	ldr	r3, [r6]
   25e2c:	add	r3, r3, fp
   25e30:	mov	r8, #0
   25e34:	str	r7, [sp, #36]	; 0x24
   25e38:	mov	r7, r1
   25e3c:	b	25cb8 <__assert_fail@plt+0x14318>
   25e40:	ldr	r0, [sp, #60]	; 0x3c
   25e44:	bl	1c948 <__assert_fail@plt+0xafa8>
   25e48:	b	25e80 <__assert_fail@plt+0x144e0>
   25e4c:	ldr	r3, [sp, #48]	; 0x30
   25e50:	cmp	r3, #0
   25e54:	beq	25c78 <__assert_fail@plt+0x142d8>
   25e58:	ldr	r7, [sp, #36]	; 0x24
   25e5c:	ldr	r0, [sp, #60]	; 0x3c
   25e60:	bl	1c948 <__assert_fail@plt+0xafa8>
   25e64:	ldr	r3, [sp, #48]	; 0x30
   25e68:	b	25cf4 <__assert_fail@plt+0x14354>
   25e6c:	cmp	r0, #0
   25e70:	beq	25cc4 <__assert_fail@plt+0x14324>
   25e74:	b	25c78 <__assert_fail@plt+0x142d8>
   25e78:	ldr	r0, [sp, #60]	; 0x3c
   25e7c:	bl	1c948 <__assert_fail@plt+0xafa8>
   25e80:	mov	r3, #12
   25e84:	str	r3, [sp, #76]	; 0x4c
   25e88:	ldr	r0, [sp, #72]	; 0x48
   25e8c:	bl	1c948 <__assert_fail@plt+0xafa8>
   25e90:	ldr	r0, [sp, #76]	; 0x4c
   25e94:	b	25bcc <__assert_fail@plt+0x1422c>
   25e98:	ldr	r7, [sp, #36]	; 0x24
   25e9c:	ldr	r0, [sp, #60]	; 0x3c
   25ea0:	bl	1c948 <__assert_fail@plt+0xafa8>
   25ea4:	str	r9, [sp, #76]	; 0x4c
   25ea8:	b	25d00 <__assert_fail@plt+0x14360>
   25eac:	ldr	r0, [sp, #72]	; 0x48
   25eb0:	bl	1c948 <__assert_fail@plt+0xafa8>
   25eb4:	ldr	r0, [sp, #76]	; 0x4c
   25eb8:	b	25bcc <__assert_fail@plt+0x1422c>
   25ebc:	ldr	r0, [sp, #72]	; 0x48
   25ec0:	bl	1c948 <__assert_fail@plt+0xafa8>
   25ec4:	ldr	r0, [sp, #76]	; 0x4c
   25ec8:	b	25bcc <__assert_fail@plt+0x1422c>
   25ecc:	ldr	r3, [sp, #76]	; 0x4c
   25ed0:	cmp	r3, #0
   25ed4:	bne	25ef4 <__assert_fail@plt+0x14554>
   25ed8:	ldr	r3, [r4, #100]	; 0x64
   25edc:	ldr	r2, [sp, #20]
   25ee0:	str	r9, [r3, r2]
   25ee4:	ldr	r3, [sp, #16]
   25ee8:	add	r3, r3, #1
   25eec:	str	r3, [sp, #16]
   25ef0:	b	25d98 <__assert_fail@plt+0x143f8>
   25ef4:	ldr	r0, [sp, #72]	; 0x48
   25ef8:	bl	1c948 <__assert_fail@plt+0xafa8>
   25efc:	ldr	r0, [sp, #76]	; 0x4c
   25f00:	b	25bcc <__assert_fail@plt+0x1422c>
   25f04:	mov	r0, #12
   25f08:	b	25bcc <__assert_fail@plt+0x1422c>
   25f0c:	mov	r0, #12
   25f10:	b	25bcc <__assert_fail@plt+0x1422c>
   25f14:	mov	r0, #12
   25f18:	b	25bcc <__assert_fail@plt+0x1422c>
   25f1c:	ldr	r3, [sp, #32]
   25f20:	str	r5, [r3]
   25f24:	ldr	r3, [sp, #40]	; 0x28
   25f28:	str	r3, [r4, #100]	; 0x64
   25f2c:	ldr	r3, [sp, #44]	; 0x2c
   25f30:	str	r3, [r4, #40]	; 0x28
   25f34:	mov	r0, #1
   25f38:	b	25bcc <__assert_fail@plt+0x1422c>
   25f3c:	cmp	sl, #0
   25f40:	bne	25dfc <__assert_fail@plt+0x1445c>
   25f44:	mov	r5, r7
   25f48:	b	25d58 <__assert_fail@plt+0x143b8>
   25f4c:	ldr	r3, [r4, #100]	; 0x64
   25f50:	str	r3, [sp, #40]	; 0x28
   25f54:	ldr	r3, [r4, #40]	; 0x28
   25f58:	str	r3, [sp, #44]	; 0x2c
   25f5c:	ldr	r3, [sp, #32]
   25f60:	ldr	r3, [r3, #8]
   25f64:	str	r3, [r4, #100]	; 0x64
   25f68:	str	r6, [r4, #40]	; 0x28
   25f6c:	str	r4, [sp, #12]
   25f70:	ldr	r2, [r4, #88]	; 0x58
   25f74:	sub	r1, r6, #1
   25f78:	mov	r0, r4
   25f7c:	bl	20efc <__assert_fail@plt+0xf55c>
   25f80:	mov	r8, r0
   25f84:	mov	r1, r7
   25f88:	add	r0, sp, #64	; 0x40
   25f8c:	bl	1ddc4 <__assert_fail@plt+0xc424>
   25f90:	str	r0, [sp, #76]	; 0x4c
   25f94:	cmp	r0, #0
   25f98:	bne	25bcc <__assert_fail@plt+0x1422c>
   25f9c:	ldr	r3, [sp, #128]	; 0x80
   25fa0:	ldr	r2, [sp, #28]
   25fa4:	add	r1, sp, #64	; 0x40
   25fa8:	ldr	r0, [sp, #24]
   25fac:	bl	21348 <__assert_fail@plt+0xf9a8>
   25fb0:	str	r0, [sp, #76]	; 0x4c
   25fb4:	cmp	r0, #0
   25fb8:	moveq	r5, r6
   25fbc:	beq	25a54 <__assert_fail@plt+0x140b4>
   25fc0:	ldr	r0, [sp, #72]	; 0x48
   25fc4:	bl	1c948 <__assert_fail@plt+0xafa8>
   25fc8:	ldr	r0, [sp, #76]	; 0x4c
   25fcc:	b	25bcc <__assert_fail@plt+0x1422c>
   25fd0:	mov	r3, #0
   25fd4:	str	r3, [sp, #64]	; 0x40
   25fd8:	str	r3, [sp, #68]	; 0x44
   25fdc:	str	r3, [sp, #72]	; 0x48
   25fe0:	b	25aac <__assert_fail@plt+0x1410c>
   25fe4:	strd	r4, [sp, #-32]!	; 0xffffffe0
   25fe8:	strd	r6, [sp, #8]
   25fec:	strd	r8, [sp, #16]
   25ff0:	str	sl, [sp, #24]
   25ff4:	str	lr, [sp, #28]
   25ff8:	sub	sp, sp, #16
   25ffc:	mov	r4, r0
   26000:	mov	r8, r1
   26004:	mov	r6, r2
   26008:	mov	r9, r3
   2600c:	ldr	r5, [sp, #48]	; 0x30
   26010:	mov	r1, r2
   26014:	mov	r3, #8
   26018:	str	r3, [sp, #8]
   2601c:	str	r5, [sp, #4]
   26020:	str	r9, [sp]
   26024:	ldr	r3, [r2, #4]
   26028:	ldr	r2, [r1], #8
   2602c:	bl	25974 <__assert_fail@plt+0x13fd4>
   26030:	cmp	r0, #0
   26034:	beq	26054 <__assert_fail@plt+0x146b4>
   26038:	add	sp, sp, #16
   2603c:	ldrd	r4, [sp]
   26040:	ldrd	r6, [sp, #8]
   26044:	ldrd	r8, [sp, #16]
   26048:	ldr	sl, [sp, #24]
   2604c:	add	sp, sp, #28
   26050:	pop	{pc}		; (ldr pc, [sp], #4)
   26054:	ldr	sl, [r8]
   26058:	ldr	r7, [r6, #4]
   2605c:	ldr	r1, [r4, #112]	; 0x70
   26060:	ldr	r3, [r4, #108]	; 0x6c
   26064:	cmp	r3, r1
   26068:	bge	26154 <__assert_fail@plt+0x147b4>
   2606c:	ldr	r3, [r4, #108]	; 0x6c
   26070:	cmp	r3, #0
   26074:	ble	2609c <__assert_fail@plt+0x146fc>
   26078:	add	r3, r3, r3, lsl #1
   2607c:	lsl	r3, r3, #3
   26080:	sub	r3, r3, #24
   26084:	ldr	r2, [r4, #116]	; 0x74
   26088:	add	r3, r2, r3
   2608c:	ldr	r2, [r3, #4]
   26090:	cmp	r5, r2
   26094:	moveq	r2, #1
   26098:	strbeq	r2, [r3, #20]
   2609c:	ldr	r3, [r4, #108]	; 0x6c
   260a0:	ldr	r2, [r4, #116]	; 0x74
   260a4:	add	r3, r3, r3, lsl #1
   260a8:	str	r9, [r2, r3, lsl #3]
   260ac:	ldr	r3, [r4, #108]	; 0x6c
   260b0:	ldr	r2, [r4, #116]	; 0x74
   260b4:	add	r3, r3, r3, lsl #1
   260b8:	add	r3, r2, r3, lsl #3
   260bc:	str	r5, [r3, #4]
   260c0:	ldr	r3, [r4, #108]	; 0x6c
   260c4:	ldr	r2, [r4, #116]	; 0x74
   260c8:	add	r3, r3, r3, lsl #1
   260cc:	add	r3, r2, r3, lsl #3
   260d0:	str	sl, [r3, #8]
   260d4:	ldr	r3, [r4, #108]	; 0x6c
   260d8:	ldr	r2, [r4, #116]	; 0x74
   260dc:	add	r3, r3, r3, lsl #1
   260e0:	add	r3, r2, r3, lsl #3
   260e4:	str	r7, [r3, #12]
   260e8:	ldr	r3, [r4, #108]	; 0x6c
   260ec:	ldr	r2, [r4, #116]	; 0x74
   260f0:	add	r3, r3, r3, lsl #1
   260f4:	add	r3, r2, r3, lsl #3
   260f8:	cmp	sl, r7
   260fc:	movne	r2, #0
   26100:	mvneq	r2, #0
   26104:	str	r2, [r3, #16]
   26108:	ldr	r2, [r4, #116]	; 0x74
   2610c:	ldr	r3, [r4, #108]	; 0x6c
   26110:	add	r1, r3, #1
   26114:	str	r1, [r4, #108]	; 0x6c
   26118:	add	r3, r3, r3, lsl #1
   2611c:	add	r3, r2, r3, lsl #3
   26120:	mov	r2, #0
   26124:	strb	r2, [r3, #20]
   26128:	sub	r7, r7, sl
   2612c:	ldr	r3, [r4, #120]	; 0x78
   26130:	cmp	r3, r7
   26134:	strlt	r7, [r4, #120]	; 0x78
   26138:	ldr	r1, [r6, #4]
   2613c:	add	r5, r5, r1
   26140:	ldr	r1, [r8]
   26144:	sub	r1, r5, r1
   26148:	mov	r0, r4
   2614c:	bl	212ac <__assert_fail@plt+0xf90c>
   26150:	b	26038 <__assert_fail@plt+0x14698>
   26154:	add	r1, r1, r1, lsl #1
   26158:	lsl	r1, r1, #4
   2615c:	ldr	r0, [r4, #116]	; 0x74
   26160:	bl	1cb14 <__assert_fail@plt+0xb174>
   26164:	cmp	r0, #0
   26168:	beq	261a0 <__assert_fail@plt+0x14800>
   2616c:	str	r0, [r4, #116]	; 0x74
   26170:	ldr	r2, [r4, #112]	; 0x70
   26174:	add	r2, r2, r2, lsl #1
   26178:	ldr	r3, [r4, #108]	; 0x6c
   2617c:	add	r3, r3, r3, lsl #1
   26180:	lsl	r2, r2, #3
   26184:	mov	r1, #0
   26188:	add	r0, r0, r3, lsl #3
   2618c:	bl	11814 <memset@plt>
   26190:	ldr	r3, [r4, #112]	; 0x70
   26194:	lsl	r3, r3, #1
   26198:	str	r3, [r4, #112]	; 0x70
   2619c:	b	2606c <__assert_fail@plt+0x146cc>
   261a0:	ldr	r0, [r4, #116]	; 0x74
   261a4:	bl	1c948 <__assert_fail@plt+0xafa8>
   261a8:	mov	r0, #12
   261ac:	b	26038 <__assert_fail@plt+0x14698>
   261b0:	strd	r4, [sp, #-36]!	; 0xffffffdc
   261b4:	strd	r6, [sp, #8]
   261b8:	strd	r8, [sp, #16]
   261bc:	strd	sl, [sp, #24]
   261c0:	str	lr, [sp, #32]
   261c4:	sub	sp, sp, #84	; 0x54
   261c8:	ldr	fp, [r0, #84]	; 0x54
   261cc:	ldr	r2, [r0, #40]	; 0x28
   261d0:	str	r2, [sp, #28]
   261d4:	ldr	r3, [r1, #4]
   261d8:	cmp	r3, #0
   261dc:	ble	26898 <__assert_fail@plt+0x14ef8>
   261e0:	mov	sl, r0
   261e4:	lsl	r3, r2, #2
   261e8:	str	r3, [sp, #40]	; 0x28
   261ec:	mov	r3, #0
   261f0:	str	r3, [sp, #20]
   261f4:	mov	r7, r1
   261f8:	b	26248 <__assert_fail@plt+0x148a8>
   261fc:	tst	r3, #8
   26200:	beq	2620c <__assert_fail@plt+0x1486c>
   26204:	tst	r0, #1
   26208:	bne	2622c <__assert_fail@plt+0x1488c>
   2620c:	tst	r3, #32
   26210:	beq	2621c <__assert_fail@plt+0x1487c>
   26214:	tst	r0, #2
   26218:	beq	2622c <__assert_fail@plt+0x1488c>
   2621c:	tst	r3, #128	; 0x80
   26220:	beq	262b4 <__assert_fail@plt+0x14914>
   26224:	tst	r0, #8
   26228:	bne	262b4 <__assert_fail@plt+0x14914>
   2622c:	ldr	r3, [sp, #20]
   26230:	add	r3, r3, #1
   26234:	mov	r2, r3
   26238:	str	r3, [sp, #20]
   2623c:	ldr	r3, [r7, #4]
   26240:	cmp	r3, r2
   26244:	ble	26898 <__assert_fail@plt+0x14ef8>
   26248:	ldr	r3, [r7, #8]
   2624c:	ldr	r2, [sp, #20]
   26250:	ldr	r8, [r3, r2, lsl #2]
   26254:	ldr	r4, [fp]
   26258:	add	r4, r4, r8, lsl #3
   2625c:	ldrb	r3, [r4, #4]
   26260:	cmp	r3, #4
   26264:	bne	2622c <__assert_fail@plt+0x1488c>
   26268:	ldr	r2, [r4, #4]
   2626c:	mov	r3, #65280	; 0xff00
   26270:	movt	r3, #3
   26274:	and	r3, r3, r2
   26278:	cmp	r3, #0
   2627c:	beq	262b4 <__assert_fail@plt+0x14914>
   26280:	ldr	r2, [sl, #88]	; 0x58
   26284:	ldr	r1, [sp, #28]
   26288:	mov	r0, sl
   2628c:	bl	20efc <__assert_fail@plt+0xf55c>
   26290:	ldr	r3, [r4, #4]
   26294:	ubfx	r3, r3, #8, #10
   26298:	tst	r3, #4
   2629c:	beq	261fc <__assert_fail@plt+0x1485c>
   262a0:	tst	r0, #1
   262a4:	beq	2622c <__assert_fail@plt+0x1488c>
   262a8:	tst	r3, #8
   262ac:	beq	2620c <__assert_fail@plt+0x1486c>
   262b0:	b	2622c <__assert_fail@plt+0x1488c>
   262b4:	ldr	r9, [sl, #108]	; 0x6c
   262b8:	ldr	r1, [sp, #28]
   262bc:	mov	r0, sl
   262c0:	bl	1d6f4 <__assert_fail@plt+0xbd54>
   262c4:	cmn	r0, #1
   262c8:	beq	262f8 <__assert_fail@plt+0x14958>
   262cc:	add	r0, r0, #1
   262d0:	add	r0, r0, r0, lsl #1
   262d4:	ldr	r3, [sl, #116]	; 0x74
   262d8:	add	r3, r3, r0, lsl #3
   262dc:	ldr	r2, [r3, #-24]	; 0xffffffe8
   262e0:	cmp	r8, r2
   262e4:	beq	26668 <__assert_fail@plt+0x14cc8>
   262e8:	add	r3, r3, #24
   262ec:	ldrb	r2, [r3, #-28]	; 0xffffffe4
   262f0:	cmp	r2, #0
   262f4:	bne	262dc <__assert_fail@plt+0x1493c>
   262f8:	ldr	r3, [sl, #84]	; 0x54
   262fc:	str	r3, [sp, #44]	; 0x2c
   26300:	ldr	r3, [r3]
   26304:	ldr	r3, [r3, r8, lsl #3]
   26308:	str	r3, [sp, #48]	; 0x30
   2630c:	ldr	r3, [sl, #124]	; 0x7c
   26310:	cmp	r3, #0
   26314:	ble	26668 <__assert_fail@plt+0x14cc8>
   26318:	ldr	r3, [sl, #4]
   2631c:	mov	r2, #0
   26320:	str	r2, [sp, #32]
   26324:	str	fp, [sp, #52]	; 0x34
   26328:	str	r8, [sp, #36]	; 0x24
   2632c:	str	r9, [sp, #56]	; 0x38
   26330:	mov	fp, r3
   26334:	str	r7, [sp, #60]	; 0x3c
   26338:	b	26410 <__assert_fail@plt+0x14a70>
   2633c:	mov	r2, r5
   26340:	ldr	r3, [sp, #24]
   26344:	add	r1, fp, r3
   26348:	add	r0, fp, r7
   2634c:	bl	1161c <memcmp@plt>
   26350:	cmp	r0, #0
   26354:	bne	263e8 <__assert_fail@plt+0x14a48>
   26358:	add	r7, r7, r5
   2635c:	ldr	r3, [sp, #28]
   26360:	str	r3, [sp]
   26364:	ldr	r3, [sp, #36]	; 0x24
   26368:	mov	r2, r8
   2636c:	mov	r1, r4
   26370:	mov	r0, sl
   26374:	bl	25fe4 <__assert_fail@plt+0x14644>
   26378:	ldr	fp, [sl, #4]
   2637c:	cmp	r0, #1
   26380:	bhi	2669c <__assert_fail@plt+0x14cfc>
   26384:	add	r6, r6, #1
   26388:	str	r9, [sp, #24]
   2638c:	ldr	r3, [r4, #16]
   26390:	cmp	r6, r3
   26394:	bge	2645c <__assert_fail@plt+0x14abc>
   26398:	ldr	r3, [r4, #20]
   2639c:	ldr	r8, [r3, r6, lsl #2]
   263a0:	ldr	r9, [r8, #4]
   263a4:	ldr	r3, [sp, #24]
   263a8:	sub	r5, r9, r3
   263ac:	cmp	r5, #0
   263b0:	ble	26358 <__assert_fail@plt+0x149b8>
   263b4:	add	r1, r5, r7
   263b8:	ldr	r3, [sl, #28]
   263bc:	cmp	r1, r3
   263c0:	ble	2633c <__assert_fail@plt+0x1499c>
   263c4:	ldr	r3, [sl, #48]	; 0x30
   263c8:	cmp	r1, r3
   263cc:	bgt	263e8 <__assert_fail@plt+0x14a48>
   263d0:	mov	r0, sl
   263d4:	bl	212ac <__assert_fail@plt+0xf90c>
   263d8:	cmp	r0, #0
   263dc:	bne	268a8 <__assert_fail@plt+0x14f08>
   263e0:	ldr	fp, [sl, #4]
   263e4:	b	2633c <__assert_fail@plt+0x1499c>
   263e8:	ldr	r3, [r4, #16]
   263ec:	cmp	r3, r6
   263f0:	ble	26458 <__assert_fail@plt+0x14ab8>
   263f4:	ldr	r3, [sp, #32]
   263f8:	add	r3, r3, #1
   263fc:	mov	r2, r3
   26400:	str	r3, [sp, #32]
   26404:	ldr	r3, [sl, #124]	; 0x7c
   26408:	cmp	r2, r3
   2640c:	bge	26658 <__assert_fail@plt+0x14cb8>
   26410:	ldr	r3, [sl, #132]	; 0x84
   26414:	ldr	r2, [sp, #32]
   26418:	ldr	r4, [r3, r2, lsl #2]
   2641c:	ldr	r2, [r4, #4]
   26420:	ldr	r3, [sp, #44]	; 0x2c
   26424:	ldr	r3, [r3]
   26428:	ldr	r3, [r3, r2, lsl #3]
   2642c:	ldr	r2, [sp, #48]	; 0x30
   26430:	cmp	r2, r3
   26434:	bne	263f4 <__assert_fail@plt+0x14a54>
   26438:	ldr	r3, [r4]
   2643c:	str	r3, [sp, #24]
   26440:	ldr	r3, [r4, #16]
   26444:	cmp	r3, #0
   26448:	ble	2647c <__assert_fail@plt+0x14adc>
   2644c:	ldr	r7, [sp, #28]
   26450:	mov	r6, #0
   26454:	b	26398 <__assert_fail@plt+0x149f8>
   26458:	ldr	r9, [sp, #24]
   2645c:	cmp	r6, #0
   26460:	addgt	r9, r9, #1
   26464:	ldr	r3, [sp, #28]
   26468:	cmp	r3, r9
   2646c:	blt	263f4 <__assert_fail@plt+0x14a54>
   26470:	mov	r8, #1
   26474:	ldr	r6, [sp, #48]	; 0x30
   26478:	b	2659c <__assert_fail@plt+0x14bfc>
   2647c:	ldr	r7, [sp, #28]
   26480:	ldr	r9, [sp, #24]
   26484:	b	26464 <__assert_fail@plt+0x14ac4>
   26488:	ldr	r3, [sl, #48]	; 0x30
   2648c:	cmp	r3, r7
   26490:	ble	263f4 <__assert_fail@plt+0x14a54>
   26494:	add	r1, r7, #1
   26498:	mov	r0, sl
   2649c:	bl	1eb20 <__assert_fail@plt+0xd180>
   264a0:	cmp	r0, #0
   264a4:	bne	268a8 <__assert_fail@plt+0x14f08>
   264a8:	ldr	fp, [sl, #4]
   264ac:	b	265b8 <__assert_fail@plt+0x14c18>
   264b0:	add	r3, r3, #1
   264b4:	cmp	ip, r3
   264b8:	beq	2658c <__assert_fail@plt+0x14bec>
   264bc:	ldr	r5, [r2, #4]!
   264c0:	add	r1, r0, r5, lsl #3
   264c4:	ldrb	r1, [r1, #4]
   264c8:	cmp	r1, #9
   264cc:	bne	264b0 <__assert_fail@plt+0x14b10>
   264d0:	ldr	r1, [r0, r5, lsl #3]
   264d4:	cmp	r6, r1
   264d8:	bne	264b0 <__assert_fail@plt+0x14b10>
   264dc:	cmn	r5, #1
   264e0:	beq	2658c <__assert_fail@plt+0x14bec>
   264e4:	ldr	r3, [r4, #8]
   264e8:	cmp	r3, #0
   264ec:	beq	26608 <__assert_fail@plt+0x14c68>
   264f0:	ldr	r3, [r4]
   264f4:	ldr	r2, [r4, #4]
   264f8:	ldr	r1, [r4, #8]
   264fc:	mov	r0, #9
   26500:	str	r0, [sp, #8]
   26504:	str	r9, [sp, #4]
   26508:	str	r5, [sp]
   2650c:	mov	r0, sl
   26510:	bl	25974 <__assert_fail@plt+0x13fd4>
   26514:	cmp	r0, #1
   26518:	beq	2658c <__assert_fail@plt+0x14bec>
   2651c:	cmp	r0, #0
   26520:	bne	268a8 <__assert_fail@plt+0x14f08>
   26524:	ldr	r3, [r4, #12]
   26528:	ldr	r2, [r4, #16]
   2652c:	cmp	r2, r3
   26530:	beq	26630 <__assert_fail@plt+0x14c90>
   26534:	mov	r1, #20
   26538:	mov	r0, r8
   2653c:	bl	1c5f8 <__assert_fail@plt+0xac58>
   26540:	subs	r2, r0, #0
   26544:	beq	268a4 <__assert_fail@plt+0x14f04>
   26548:	ldr	r1, [r4, #16]
   2654c:	ldr	r3, [r4, #20]
   26550:	str	r2, [r3, r1, lsl #2]
   26554:	str	r5, [r2]
   26558:	str	r9, [r2, #4]
   2655c:	ldr	r3, [r4, #16]
   26560:	add	r3, r3, #1
   26564:	str	r3, [r4, #16]
   26568:	ldr	r3, [sp, #28]
   2656c:	str	r3, [sp]
   26570:	ldr	r3, [sp, #36]	; 0x24
   26574:	mov	r1, r4
   26578:	mov	r0, sl
   2657c:	bl	25fe4 <__assert_fail@plt+0x14644>
   26580:	ldr	fp, [sl, #4]
   26584:	cmp	r0, #1
   26588:	bhi	2669c <__assert_fail@plt+0x14cfc>
   2658c:	add	r9, r9, #1
   26590:	ldr	r3, [sp, #28]
   26594:	cmp	r3, r9
   26598:	blt	263f4 <__assert_fail@plt+0x14a54>
   2659c:	ldr	r3, [r4]
   265a0:	sub	r3, r9, r3
   265a4:	cmp	r3, #0
   265a8:	ble	265d4 <__assert_fail@plt+0x14c34>
   265ac:	ldr	r3, [sl, #28]
   265b0:	cmp	r3, r7
   265b4:	ble	26488 <__assert_fail@plt+0x14ae8>
   265b8:	add	r1, r7, #1
   265bc:	add	r3, fp, r9
   265c0:	ldrb	r2, [fp, r7]
   265c4:	ldrb	r3, [r3, #-1]
   265c8:	cmp	r2, r3
   265cc:	bne	263f4 <__assert_fail@plt+0x14a54>
   265d0:	mov	r7, r1
   265d4:	ldr	r3, [sl, #100]	; 0x64
   265d8:	ldr	r3, [r3, r9, lsl #2]
   265dc:	cmp	r3, #0
   265e0:	beq	2658c <__assert_fail@plt+0x14bec>
   265e4:	ldr	ip, [r3, #8]
   265e8:	cmp	ip, #0
   265ec:	ble	2658c <__assert_fail@plt+0x14bec>
   265f0:	ldr	r2, [sp, #44]	; 0x2c
   265f4:	ldr	r0, [r2]
   265f8:	ldr	r2, [r3, #12]
   265fc:	sub	r2, r2, #4
   26600:	mov	r3, #0
   26604:	b	264bc <__assert_fail@plt+0x14b1c>
   26608:	ldr	r1, [r4]
   2660c:	sub	r1, r9, r1
   26610:	add	r1, r1, #1
   26614:	mov	r0, #12
   26618:	bl	1c5f8 <__assert_fail@plt+0xac58>
   2661c:	str	r0, [r4, #8]
   26620:	cmp	r0, #0
   26624:	bne	264f0 <__assert_fail@plt+0x14b50>
   26628:	mov	r0, #12
   2662c:	b	268a8 <__assert_fail@plt+0x14f08>
   26630:	lsl	r3, r3, #1
   26634:	add	fp, r3, #1
   26638:	lsl	r1, fp, #2
   2663c:	ldr	r0, [r4, #20]
   26640:	bl	1cb14 <__assert_fail@plt+0xb174>
   26644:	cmp	r0, #0
   26648:	beq	268a4 <__assert_fail@plt+0x14f04>
   2664c:	str	r0, [r4, #20]
   26650:	str	fp, [r4, #12]
   26654:	b	26534 <__assert_fail@plt+0x14b94>
   26658:	ldr	fp, [sp, #52]	; 0x34
   2665c:	ldr	r8, [sp, #36]	; 0x24
   26660:	ldr	r9, [sp, #56]	; 0x38
   26664:	ldr	r7, [sp, #60]	; 0x3c
   26668:	mov	r3, #0
   2666c:	str	r3, [sp, #76]	; 0x4c
   26670:	lsl	r3, r8, #2
   26674:	str	r3, [sp, #44]	; 0x2c
   26678:	ldr	r3, [sl, #108]	; 0x6c
   2667c:	cmp	r3, r9
   26680:	ble	2622c <__assert_fail@plt+0x1488c>
   26684:	add	r3, r8, r8, lsl #1
   26688:	lsl	r3, r3, #2
   2668c:	str	r3, [sp, #48]	; 0x30
   26690:	ldr	r6, [sp, #28]
   26694:	str	r7, [sp, #52]	; 0x34
   26698:	b	26744 <__assert_fail@plt+0x14da4>
   2669c:	str	r0, [sp, #76]	; 0x4c
   266a0:	ldr	r0, [sp, #76]	; 0x4c
   266a4:	add	sp, sp, #84	; 0x54
   266a8:	ldrd	r4, [sp]
   266ac:	ldrd	r6, [sp, #8]
   266b0:	ldrd	r8, [sp, #16]
   266b4:	ldrd	sl, [sp, #24]
   266b8:	add	sp, sp, #32
   266bc:	pop	{pc}		; (ldr pc, [sp], #4)
   266c0:	ldr	r2, [fp, #12]
   266c4:	ldr	r1, [sp, #44]	; 0x2c
   266c8:	ldr	r2, [r2, r1]
   266cc:	add	r2, r2, r2, lsl #1
   266d0:	ldr	r1, [fp, #24]
   266d4:	add	r2, r1, r2, lsl #2
   266d8:	str	r2, [sp, #24]
   266dc:	b	2679c <__assert_fail@plt+0x14dfc>
   266e0:	ldr	r3, [sp, #32]
   266e4:	ldr	r2, [sp, #24]
   266e8:	mov	r1, fp
   266ec:	add	r0, sp, #76	; 0x4c
   266f0:	bl	1fb44 <__assert_fail@plt+0xe1a4>
   266f4:	str	r0, [r5, r4, lsl #2]
   266f8:	ldr	r3, [sl, #100]	; 0x64
   266fc:	ldr	r3, [r3, r4, lsl #2]
   26700:	cmp	r3, #0
   26704:	bne	26830 <__assert_fail@plt+0x14e90>
   26708:	ldr	r3, [sp, #76]	; 0x4c
   2670c:	cmp	r3, #0
   26710:	beq	26830 <__assert_fail@plt+0x14e90>
   26714:	b	266a0 <__assert_fail@plt+0x14d00>
   26718:	ldr	r0, [sp, #72]	; 0x48
   2671c:	bl	1c948 <__assert_fail@plt+0xafa8>
   26720:	b	266a0 <__assert_fail@plt+0x14d00>
   26724:	ldr	r3, [sp, #76]	; 0x4c
   26728:	cmp	r3, #0
   2672c:	beq	26830 <__assert_fail@plt+0x14e90>
   26730:	b	266a0 <__assert_fail@plt+0x14d00>
   26734:	add	r9, r9, #1
   26738:	ldr	r3, [sl, #108]	; 0x6c
   2673c:	cmp	r3, r9
   26740:	ble	26890 <__assert_fail@plt+0x14ef0>
   26744:	add	r3, r9, r9, lsl #1
   26748:	ldr	r2, [sl, #116]	; 0x74
   2674c:	add	r1, r2, r3, lsl #3
   26750:	ldr	r3, [r2, r3, lsl #3]
   26754:	cmp	r3, r8
   26758:	bne	26734 <__assert_fail@plt+0x14d94>
   2675c:	ldr	r3, [r1, #4]
   26760:	cmp	r3, r6
   26764:	bne	26734 <__assert_fail@plt+0x14d94>
   26768:	ldr	r3, [r1, #12]
   2676c:	ldr	r4, [r1, #8]
   26770:	subs	r7, r3, r4
   26774:	bne	266c0 <__assert_fail@plt+0x14d20>
   26778:	ldr	r2, [fp, #20]
   2677c:	ldr	r1, [sp, #48]	; 0x30
   26780:	add	r2, r2, r1
   26784:	ldr	r2, [r2, #8]
   26788:	ldr	r2, [r2]
   2678c:	add	r2, r2, r2, lsl #1
   26790:	ldr	r1, [fp, #24]
   26794:	add	r2, r1, r2, lsl #2
   26798:	str	r2, [sp, #24]
   2679c:	add	r3, r3, r6
   267a0:	sub	r4, r3, r4
   267a4:	ldr	r2, [sl, #88]	; 0x58
   267a8:	sub	r1, r4, #1
   267ac:	mov	r0, sl
   267b0:	bl	20efc <__assert_fail@plt+0xf55c>
   267b4:	str	r0, [sp, #32]
   267b8:	ldr	r5, [sl, #100]	; 0x64
   267bc:	ldr	r3, [r5, r4, lsl #2]
   267c0:	ldr	r2, [sp, #40]	; 0x28
   267c4:	ldr	r2, [r5, r2]
   267c8:	cmp	r2, #0
   267cc:	ldrne	r2, [r2, #8]
   267d0:	moveq	r2, #0
   267d4:	str	r2, [sp, #36]	; 0x24
   267d8:	cmp	r3, #0
   267dc:	beq	266e0 <__assert_fail@plt+0x14d40>
   267e0:	ldr	r2, [sp, #24]
   267e4:	ldr	r1, [r3, #40]	; 0x28
   267e8:	add	r0, sp, #64	; 0x40
   267ec:	bl	1e720 <__assert_fail@plt+0xcd80>
   267f0:	str	r0, [sp, #76]	; 0x4c
   267f4:	cmp	r0, #0
   267f8:	bne	26718 <__assert_fail@plt+0x14d78>
   267fc:	ldr	r5, [sl, #100]	; 0x64
   26800:	ldr	r3, [sp, #32]
   26804:	add	r2, sp, #64	; 0x40
   26808:	mov	r1, fp
   2680c:	add	r0, sp, #76	; 0x4c
   26810:	bl	1fb44 <__assert_fail@plt+0xe1a4>
   26814:	str	r0, [r5, r4, lsl #2]
   26818:	ldr	r0, [sp, #72]	; 0x48
   2681c:	bl	1c948 <__assert_fail@plt+0xafa8>
   26820:	ldr	r3, [sl, #100]	; 0x64
   26824:	ldr	r3, [r3, r4, lsl #2]
   26828:	cmp	r3, #0
   2682c:	beq	26724 <__assert_fail@plt+0x14d84>
   26830:	cmp	r7, #0
   26834:	bne	26734 <__assert_fail@plt+0x14d94>
   26838:	ldr	r3, [sl, #100]	; 0x64
   2683c:	ldr	r2, [sp, #40]	; 0x28
   26840:	ldr	r3, [r3, r2]
   26844:	ldr	r3, [r3, #8]
   26848:	ldr	r2, [sp, #36]	; 0x24
   2684c:	cmp	r3, r2
   26850:	ble	26734 <__assert_fail@plt+0x14d94>
   26854:	mov	r2, r6
   26858:	ldr	r4, [sp, #24]
   2685c:	mov	r1, r4
   26860:	mov	r0, sl
   26864:	bl	21178 <__assert_fail@plt+0xf7d8>
   26868:	str	r0, [sp, #76]	; 0x4c
   2686c:	cmp	r0, #0
   26870:	bne	266a0 <__assert_fail@plt+0x14d00>
   26874:	mov	r1, r4
   26878:	mov	r0, sl
   2687c:	bl	261b0 <__assert_fail@plt+0x14810>
   26880:	str	r0, [sp, #76]	; 0x4c
   26884:	cmp	r0, #0
   26888:	beq	26734 <__assert_fail@plt+0x14d94>
   2688c:	b	266a0 <__assert_fail@plt+0x14d00>
   26890:	ldr	r7, [sp, #52]	; 0x34
   26894:	b	2622c <__assert_fail@plt+0x1488c>
   26898:	mov	r3, #0
   2689c:	str	r3, [sp, #76]	; 0x4c
   268a0:	b	266a0 <__assert_fail@plt+0x14d00>
   268a4:	mov	r0, #12
   268a8:	str	r0, [sp, #76]	; 0x4c
   268ac:	b	266a0 <__assert_fail@plt+0x14d00>
   268b0:	strd	r4, [sp, #-32]!	; 0xffffffe0
   268b4:	strd	r6, [sp, #8]
   268b8:	strd	r8, [sp, #16]
   268bc:	str	sl, [sp, #24]
   268c0:	str	lr, [sp, #28]
   268c4:	sub	sp, sp, #16
   268c8:	mov	r8, r0
   268cc:	mov	r4, r1
   268d0:	ldr	r7, [r1, #84]	; 0x54
   268d4:	ldr	r6, [r1, #40]	; 0x28
   268d8:	ldr	r3, [r1, #104]	; 0x68
   268dc:	cmp	r3, r6
   268e0:	bge	26924 <__assert_fail@plt+0x14f84>
   268e4:	ldr	r3, [r1, #100]	; 0x64
   268e8:	str	r2, [r3, r6, lsl #2]
   268ec:	str	r6, [r1, #104]	; 0x68
   268f0:	mov	r5, r2
   268f4:	ldr	r3, [r7, #76]	; 0x4c
   268f8:	cmp	r3, #0
   268fc:	cmpne	r5, #0
   26900:	bne	269f4 <__assert_fail@plt+0x15054>
   26904:	mov	r0, r5
   26908:	add	sp, sp, #16
   2690c:	ldrd	r4, [sp]
   26910:	ldrd	r6, [sp, #8]
   26914:	ldrd	r8, [sp, #16]
   26918:	ldr	sl, [sp, #24]
   2691c:	add	sp, sp, #28
   26920:	pop	{pc}		; (ldr pc, [sp], #4)
   26924:	ldr	r9, [r1, #100]	; 0x64
   26928:	ldr	r3, [r9, r6, lsl #2]
   2692c:	cmp	r3, #0
   26930:	streq	r2, [r9, r6, lsl #2]
   26934:	moveq	r5, r2
   26938:	beq	268f4 <__assert_fail@plt+0x14f54>
   2693c:	ldr	r3, [r3, #40]	; 0x28
   26940:	cmp	r2, #0
   26944:	beq	269b4 <__assert_fail@plt+0x15014>
   26948:	ldr	r9, [r2, #40]	; 0x28
   2694c:	mov	r2, r3
   26950:	mov	r1, r9
   26954:	add	r0, sp, #4
   26958:	bl	1e720 <__assert_fail@plt+0xcd80>
   2695c:	str	r0, [r8]
   26960:	cmp	r0, #0
   26964:	movne	r5, #0
   26968:	bne	26904 <__assert_fail@plt+0x14f64>
   2696c:	ldr	r1, [r4, #40]	; 0x28
   26970:	ldr	r2, [r4, #88]	; 0x58
   26974:	sub	r1, r1, #1
   26978:	mov	r0, r4
   2697c:	bl	20efc <__assert_fail@plt+0xf55c>
   26980:	ldr	sl, [r4, #100]	; 0x64
   26984:	mov	r3, r0
   26988:	add	r2, sp, #4
   2698c:	mov	r1, r7
   26990:	mov	r0, r8
   26994:	bl	1fb44 <__assert_fail@plt+0xe1a4>
   26998:	mov	r5, r0
   2699c:	str	r0, [sl, r6, lsl #2]
   269a0:	cmp	r9, #0
   269a4:	beq	268f4 <__assert_fail@plt+0x14f54>
   269a8:	ldr	r0, [sp, #12]
   269ac:	bl	1c948 <__assert_fail@plt+0xafa8>
   269b0:	b	268f4 <__assert_fail@plt+0x14f54>
   269b4:	ldrd	r0, [r3]
   269b8:	strd	r0, [sp, #4]
   269bc:	ldr	r3, [r3, #8]
   269c0:	str	r3, [sp, #12]
   269c4:	ldr	r2, [r4, #88]	; 0x58
   269c8:	sub	r1, r6, #1
   269cc:	mov	r0, r4
   269d0:	bl	20efc <__assert_fail@plt+0xf55c>
   269d4:	mov	r3, r0
   269d8:	add	r2, sp, #4
   269dc:	mov	r1, r7
   269e0:	mov	r0, r8
   269e4:	bl	1fb44 <__assert_fail@plt+0xe1a4>
   269e8:	mov	r5, r0
   269ec:	str	r0, [r9, r6, lsl #2]
   269f0:	b	268f4 <__assert_fail@plt+0x14f54>
   269f4:	add	r7, r5, #4
   269f8:	mov	r2, r6
   269fc:	mov	r1, r7
   26a00:	mov	r0, r4
   26a04:	bl	21178 <__assert_fail@plt+0xf7d8>
   26a08:	str	r0, [r8]
   26a0c:	cmp	r0, #0
   26a10:	bne	26a44 <__assert_fail@plt+0x150a4>
   26a14:	ldrb	r3, [r5, #52]	; 0x34
   26a18:	tst	r3, #64	; 0x40
   26a1c:	beq	26904 <__assert_fail@plt+0x14f64>
   26a20:	mov	r1, r7
   26a24:	mov	r0, r4
   26a28:	bl	261b0 <__assert_fail@plt+0x14810>
   26a2c:	str	r0, [r8]
   26a30:	cmp	r0, #0
   26a34:	bne	26a4c <__assert_fail@plt+0x150ac>
   26a38:	ldr	r3, [r4, #100]	; 0x64
   26a3c:	ldr	r5, [r3, r6, lsl #2]
   26a40:	b	26904 <__assert_fail@plt+0x14f64>
   26a44:	mov	r5, #0
   26a48:	b	26904 <__assert_fail@plt+0x14f64>
   26a4c:	mov	r5, #0
   26a50:	b	26904 <__assert_fail@plt+0x14f64>
   26a54:	strd	r4, [sp, #-36]!	; 0xffffffdc
   26a58:	strd	r6, [sp, #8]
   26a5c:	strd	r8, [sp, #16]
   26a60:	strd	sl, [sp, #24]
   26a64:	str	lr, [sp, #32]
   26a68:	sub	sp, sp, #84	; 0x54
   26a6c:	str	r0, [sp, #8]
   26a70:	mov	r4, r1
   26a74:	mov	sl, r2
   26a78:	mov	r5, r3
   26a7c:	ldr	r6, [r0, #84]	; 0x54
   26a80:	mov	r3, #0
   26a84:	str	r3, [sp, #76]	; 0x4c
   26a88:	lsl	r3, sl, #2
   26a8c:	str	r3, [sp, #12]
   26a90:	ldr	r3, [r0, #100]	; 0x64
   26a94:	ldr	fp, [r3, sl, lsl #2]
   26a98:	cmp	fp, #0
   26a9c:	beq	26b9c <__assert_fail@plt+0x151fc>
   26aa0:	add	fp, fp, #4
   26aa4:	ldr	r3, [r5, #4]
   26aa8:	cmp	r3, #0
   26aac:	beq	26ba8 <__assert_fail@plt+0x15208>
   26ab0:	mov	r3, #0
   26ab4:	str	r3, [sp, #48]	; 0x30
   26ab8:	mov	r2, r5
   26abc:	mov	r1, r6
   26ac0:	add	r0, sp, #48	; 0x30
   26ac4:	bl	2545c <__assert_fail@plt+0x13abc>
   26ac8:	mov	r9, r0
   26acc:	ldr	r8, [sp, #48]	; 0x30
   26ad0:	cmp	r8, #0
   26ad4:	bne	26bdc <__assert_fail@plt+0x1523c>
   26ad8:	ldr	r3, [r0, #28]
   26adc:	cmp	r3, #0
   26ae0:	bne	26b48 <__assert_fail@plt+0x151a8>
   26ae4:	add	r8, r0, #28
   26ae8:	ldr	r1, [r5, #4]
   26aec:	mov	r0, r8
   26af0:	bl	1de1c <__assert_fail@plt+0xc47c>
   26af4:	mov	r7, r0
   26af8:	str	r0, [sp, #48]	; 0x30
   26afc:	cmp	r0, #0
   26b00:	bne	270f0 <__assert_fail@plt+0x15750>
   26b04:	ldr	r3, [r5, #4]
   26b08:	cmp	r3, #0
   26b0c:	ble	26b48 <__assert_fail@plt+0x151a8>
   26b10:	ldr	r3, [r5, #8]
   26b14:	ldr	r1, [r3, r7, lsl #2]
   26b18:	add	r1, r1, r1, lsl #1
   26b1c:	ldr	r3, [r6, #28]
   26b20:	add	r1, r3, r1, lsl #2
   26b24:	mov	r0, r8
   26b28:	bl	20afc <__assert_fail@plt+0xf15c>
   26b2c:	str	r0, [sp, #48]	; 0x30
   26b30:	cmp	r0, #0
   26b34:	bne	270f8 <__assert_fail@plt+0x15758>
   26b38:	add	r7, r7, #1
   26b3c:	ldr	r3, [r5, #4]
   26b40:	cmp	r7, r3
   26b44:	blt	26b10 <__assert_fail@plt+0x15170>
   26b48:	add	r2, r9, #28
   26b4c:	mov	r1, fp
   26b50:	mov	r0, r5
   26b54:	bl	1e8c4 <__assert_fail@plt+0xcf24>
   26b58:	str	r0, [sp, #28]
   26b5c:	str	r0, [sp, #76]	; 0x4c
   26b60:	cmp	r0, #0
   26b64:	bne	270e8 <__assert_fail@plt+0x15748>
   26b68:	ldr	r3, [r4, #20]
   26b6c:	cmp	r3, #0
   26b70:	bne	26bfc <__assert_fail@plt+0x1525c>
   26b74:	ldr	r7, [r4]
   26b78:	mov	r2, r5
   26b7c:	mov	r1, r6
   26b80:	add	r0, sp, #76	; 0x4c
   26b84:	bl	2545c <__assert_fail@plt+0x13abc>
   26b88:	str	r0, [r7, sl, lsl #2]
   26b8c:	ldr	r8, [sp, #76]	; 0x4c
   26b90:	cmp	r8, #0
   26b94:	beq	26bc0 <__assert_fail@plt+0x15220>
   26b98:	b	26bdc <__assert_fail@plt+0x1523c>
   26b9c:	ldr	r3, [r5, #4]
   26ba0:	cmp	r3, #0
   26ba4:	bne	26e0c <__assert_fail@plt+0x1546c>
   26ba8:	ldr	r3, [r4]
   26bac:	mov	r2, #0
   26bb0:	str	r2, [r3, sl, lsl #2]
   26bb4:	cmp	fp, r2
   26bb8:	moveq	r8, r2
   26bbc:	beq	26bdc <__assert_fail@plt+0x1523c>
   26bc0:	ldr	r3, [sp, #8]
   26bc4:	ldr	r3, [r3, #100]	; 0x64
   26bc8:	ldr	r3, [r3, sl, lsl #2]
   26bcc:	ldrb	r3, [r3, #52]	; 0x34
   26bd0:	tst	r3, #64	; 0x40
   26bd4:	moveq	r8, #0
   26bd8:	bne	26e2c <__assert_fail@plt+0x1548c>
   26bdc:	mov	r0, r8
   26be0:	add	sp, sp, #84	; 0x54
   26be4:	ldrd	r4, [sp]
   26be8:	ldrd	r6, [sp, #8]
   26bec:	ldrd	r8, [sp, #16]
   26bf0:	ldrd	sl, [sp, #24]
   26bf4:	add	sp, sp, #32
   26bf8:	pop	{pc}		; (ldr pc, [sp], #4)
   26bfc:	ldr	r3, [sp, #8]
   26c00:	ldr	r3, [r3, #116]	; 0x74
   26c04:	str	r3, [sp, #20]
   26c08:	ble	26e00 <__assert_fail@plt+0x15460>
   26c0c:	mov	r7, r0
   26c10:	str	fp, [sp, #24]
   26c14:	b	26ca0 <__assert_fail@plt+0x15300>
   26c18:	ldr	lr, [r5, #4]
   26c1c:	cmp	lr, #0
   26c20:	ble	26c90 <__assert_fail@plt+0x152f0>
   26c24:	ldr	r2, [r5, #8]
   26c28:	add	lr, r2, lr, lsl #2
   26c2c:	mvn	r8, #0
   26c30:	mov	r1, r8
   26c34:	b	26c4c <__assert_fail@plt+0x152ac>
   26c38:	ldr	ip, [r0, r3, lsl #3]
   26c3c:	cmp	r9, ip
   26c40:	moveq	r1, r3
   26c44:	cmp	r2, lr
   26c48:	beq	26c78 <__assert_fail@plt+0x152d8>
   26c4c:	ldr	r3, [r2], #4
   26c50:	add	ip, r0, r3, lsl #3
   26c54:	ldrb	ip, [ip, #4]
   26c58:	cmp	ip, #8
   26c5c:	beq	26c38 <__assert_fail@plt+0x15298>
   26c60:	cmp	ip, #9
   26c64:	bne	26c44 <__assert_fail@plt+0x152a4>
   26c68:	ldr	ip, [r0, r3, lsl #3]
   26c6c:	cmp	r9, ip
   26c70:	moveq	r8, r3
   26c74:	b	26c44 <__assert_fail@plt+0x152a4>
   26c78:	str	r8, [sp, #16]
   26c7c:	cmp	r1, #0
   26c80:	bge	26cf8 <__assert_fail@plt+0x15358>
   26c84:	ldr	r3, [sp, #16]
   26c88:	cmp	r3, #0
   26c8c:	bge	26d24 <__assert_fail@plt+0x15384>
   26c90:	add	r7, r7, #1
   26c94:	ldr	r3, [r4, #20]
   26c98:	cmp	r7, r3
   26c9c:	bge	26dfc <__assert_fail@plt+0x1545c>
   26ca0:	ldr	r3, [r4, #24]
   26ca4:	ldr	r3, [r3, r7, lsl #2]
   26ca8:	add	r3, r3, r3, lsl #1
   26cac:	ldr	ip, [sp, #20]
   26cb0:	add	r2, ip, r3, lsl #3
   26cb4:	ldr	r1, [r2, #8]
   26cb8:	cmp	sl, r1
   26cbc:	ble	26c90 <__assert_fail@plt+0x152f0>
   26cc0:	ldr	r1, [r2, #4]
   26cc4:	cmp	sl, r1
   26cc8:	bgt	26c90 <__assert_fail@plt+0x152f0>
   26ccc:	ldr	r0, [r6]
   26cd0:	ldr	r3, [ip, r3, lsl #3]
   26cd4:	ldr	r9, [r0, r3, lsl #3]
   26cd8:	ldr	r3, [r2, #12]
   26cdc:	cmp	sl, r3
   26ce0:	beq	26c18 <__assert_fail@plt+0x15278>
   26ce4:	ldr	r3, [r5, #4]
   26ce8:	cmp	r3, #0
   26cec:	ldrgt	fp, [sp, #28]
   26cf0:	bgt	26db0 <__assert_fail@plt+0x15410>
   26cf4:	b	26c90 <__assert_fail@plt+0x152f0>
   26cf8:	ldr	r3, [sp, #24]
   26cfc:	mov	r2, r5
   26d00:	mov	r0, r6
   26d04:	bl	2006c <__assert_fail@plt+0xe6cc>
   26d08:	cmp	r0, #0
   26d0c:	bne	27100 <__assert_fail@plt+0x15760>
   26d10:	cmp	r8, #0
   26d14:	blt	26c90 <__assert_fail@plt+0x152f0>
   26d18:	ldr	r3, [r5, #4]
   26d1c:	cmp	r3, #0
   26d20:	ble	26c90 <__assert_fail@plt+0x152f0>
   26d24:	ldr	r9, [sp, #28]
   26d28:	b	26d3c <__assert_fail@plt+0x1539c>
   26d2c:	add	r9, r9, #1
   26d30:	ldr	r3, [r5, #4]
   26d34:	cmp	r9, r3
   26d38:	bge	26c90 <__assert_fail@plt+0x152f0>
   26d3c:	ldr	r3, [r5, #8]
   26d40:	ldr	fp, [r3, r9, lsl #2]
   26d44:	add	r8, fp, fp, lsl #1
   26d48:	lsl	r8, r8, #2
   26d4c:	ldr	r0, [r6, #28]
   26d50:	ldr	r1, [sp, #16]
   26d54:	add	r0, r0, r8
   26d58:	bl	1ccfc <__assert_fail@plt+0xb35c>
   26d5c:	cmp	r0, #0
   26d60:	bne	26d2c <__assert_fail@plt+0x1538c>
   26d64:	ldr	r0, [r6, #24]
   26d68:	ldr	r1, [sp, #16]
   26d6c:	add	r0, r0, r8
   26d70:	bl	1ccfc <__assert_fail@plt+0xb35c>
   26d74:	cmp	r0, #0
   26d78:	bne	26d2c <__assert_fail@plt+0x1538c>
   26d7c:	ldr	r3, [sp, #24]
   26d80:	mov	r2, r5
   26d84:	mov	r1, fp
   26d88:	mov	r0, r6
   26d8c:	bl	2006c <__assert_fail@plt+0xe6cc>
   26d90:	cmp	r0, #0
   26d94:	bne	27108 <__assert_fail@plt+0x15768>
   26d98:	sub	r9, r9, #1
   26d9c:	b	26d2c <__assert_fail@plt+0x1538c>
   26da0:	add	fp, fp, #1
   26da4:	ldr	r3, [r5, #4]
   26da8:	cmp	fp, r3
   26dac:	bge	26c90 <__assert_fail@plt+0x152f0>
   26db0:	ldr	r3, [r5, #8]
   26db4:	ldr	r1, [r3, fp, lsl #2]
   26db8:	ldr	r2, [r6]
   26dbc:	add	r3, r2, r1, lsl #3
   26dc0:	ldrb	r3, [r3, #4]
   26dc4:	sub	r3, r3, #8
   26dc8:	cmp	r3, #1
   26dcc:	bhi	26da0 <__assert_fail@plt+0x15400>
   26dd0:	ldr	r3, [r2, r1, lsl #3]
   26dd4:	cmp	r9, r3
   26dd8:	bne	26da0 <__assert_fail@plt+0x15400>
   26ddc:	ldr	r3, [sp, #24]
   26de0:	mov	r2, r5
   26de4:	mov	r0, r6
   26de8:	bl	2006c <__assert_fail@plt+0xe6cc>
   26dec:	cmp	r0, #0
   26df0:	beq	26da0 <__assert_fail@plt+0x15400>
   26df4:	mov	r8, r0
   26df8:	b	26bdc <__assert_fail@plt+0x1523c>
   26dfc:	ldr	fp, [sp, #24]
   26e00:	mov	r3, #0
   26e04:	str	r3, [sp, #76]	; 0x4c
   26e08:	b	26b74 <__assert_fail@plt+0x151d4>
   26e0c:	ldr	r4, [r1]
   26e10:	mov	r2, r5
   26e14:	mov	r1, r6
   26e18:	add	r0, sp, #76	; 0x4c
   26e1c:	bl	2545c <__assert_fail@plt+0x13abc>
   26e20:	str	r0, [r4, sl, lsl #2]
   26e24:	ldr	r8, [sp, #76]	; 0x4c
   26e28:	b	26bdc <__assert_fail@plt+0x1523c>
   26e2c:	mov	r1, sl
   26e30:	ldr	r5, [sp, #8]
   26e34:	mov	r0, r5
   26e38:	bl	1d6f4 <__assert_fail@plt+0xbd54>
   26e3c:	str	r0, [sp, #32]
   26e40:	cmn	r0, #1
   26e44:	moveq	r8, #0
   26e48:	beq	26bdc <__assert_fail@plt+0x1523c>
   26e4c:	ldr	r7, [r5, #84]	; 0x54
   26e50:	mov	r3, #0
   26e54:	str	r3, [sp, #48]	; 0x30
   26e58:	ldr	r3, [fp, #4]
   26e5c:	cmp	r3, #0
   26e60:	ble	270e0 <__assert_fail@plt+0x15740>
   26e64:	add	r3, r0, r0, lsl #1
   26e68:	lsl	r3, r3, #3
   26e6c:	str	r3, [sp, #36]	; 0x24
   26e70:	mov	r3, #0
   26e74:	add	r2, r4, #16
   26e78:	str	r2, [sp, #24]
   26e7c:	str	sl, [sp, #28]
   26e80:	mov	sl, r3
   26e84:	b	26ea0 <__assert_fail@plt+0x15500>
   26e88:	cmp	r2, #4
   26e8c:	beq	26ed4 <__assert_fail@plt+0x15534>
   26e90:	add	sl, sl, #1
   26e94:	ldr	r3, [fp, #4]
   26e98:	cmp	sl, r3
   26e9c:	bge	270b4 <__assert_fail@plt+0x15714>
   26ea0:	ldr	r3, [fp, #8]
   26ea4:	ldr	r6, [r3, sl, lsl #2]
   26ea8:	ldr	r3, [r7]
   26eac:	add	r3, r3, r6, lsl #3
   26eb0:	ldrb	r2, [r3, #4]
   26eb4:	ldr	r3, [r4, #8]
   26eb8:	cmp	r6, r3
   26ebc:	bne	26e88 <__assert_fail@plt+0x154e8>
   26ec0:	ldr	r3, [r4, #12]
   26ec4:	ldr	r1, [sp, #28]
   26ec8:	cmp	r1, r3
   26ecc:	bne	26e88 <__assert_fail@plt+0x154e8>
   26ed0:	b	26e90 <__assert_fail@plt+0x154f0>
   26ed4:	ldr	r3, [sp, #8]
   26ed8:	ldr	r5, [r3, #116]	; 0x74
   26edc:	ldr	r3, [sp, #36]	; 0x24
   26ee0:	add	r5, r5, r3
   26ee4:	add	r3, r6, r6, lsl #1
   26ee8:	lsl	r3, r3, #2
   26eec:	str	r3, [sp, #20]
   26ef0:	lsl	r3, r6, #2
   26ef4:	str	r3, [sp, #16]
   26ef8:	ldr	r3, [sp, #32]
   26efc:	str	fp, [sp, #40]	; 0x28
   26f00:	str	sl, [sp, #44]	; 0x2c
   26f04:	mov	sl, r3
   26f08:	ldr	fp, [sp, #28]
   26f0c:	b	26fb0 <__assert_fail@plt+0x15610>
   26f10:	ldr	r3, [r7, #20]
   26f14:	ldr	r2, [sp, #20]
   26f18:	add	r3, r3, r2
   26f1c:	ldr	r3, [r3, #8]
   26f20:	ldr	r8, [r3]
   26f24:	b	26fe0 <__assert_fail@plt+0x15640>
   26f28:	ldrd	r2, [r4]
   26f2c:	strd	r2, [sp, #48]	; 0x30
   26f30:	ldrd	r2, [r4, #8]
   26f34:	strd	r2, [sp, #56]	; 0x38
   26f38:	ldrd	r2, [r4, #16]
   26f3c:	strd	r2, [sp, #64]	; 0x40
   26f40:	ldr	r3, [r4, #24]
   26f44:	str	r3, [sp, #72]	; 0x48
   26f48:	ldr	r1, [sp, #24]
   26f4c:	add	r0, sp, #64	; 0x40
   26f50:	bl	1e698 <__assert_fail@plt+0xccf8>
   26f54:	cmp	r0, #0
   26f58:	beq	27040 <__assert_fail@plt+0x156a0>
   26f5c:	mov	r8, r0
   26f60:	b	270c0 <__assert_fail@plt+0x15720>
   26f64:	ldr	r3, [sp, #48]	; 0x30
   26f68:	ldr	r2, [sp, #12]
   26f6c:	str	r5, [r3, r2]
   26f70:	mov	r1, sl
   26f74:	add	r0, sp, #64	; 0x40
   26f78:	bl	1ccfc <__assert_fail@plt+0xb35c>
   26f7c:	sub	r1, r0, #1
   26f80:	add	r0, sp, #64	; 0x40
   26f84:	bl	1cd94 <__assert_fail@plt+0xb3f4>
   26f88:	add	r5, sl, sl, lsl #1
   26f8c:	ldr	r3, [sp, #8]
   26f90:	ldr	r3, [r3, #116]	; 0x74
   26f94:	add	r5, r3, r5, lsl #3
   26f98:	add	sl, sl, #1
   26f9c:	add	r2, r5, #24
   26fa0:	ldrb	r3, [r5, #20]
   26fa4:	cmp	r3, #0
   26fa8:	beq	270a8 <__assert_fail@plt+0x15708>
   26fac:	mov	r5, r2
   26fb0:	ldr	r3, [r5]
   26fb4:	cmp	r6, r3
   26fb8:	bne	26f98 <__assert_fail@plt+0x155f8>
   26fbc:	ldr	r3, [r5, #12]
   26fc0:	ldr	r2, [r5, #8]
   26fc4:	sub	r3, r3, r2
   26fc8:	add	r9, fp, r3
   26fcc:	cmp	r3, #0
   26fd0:	beq	26f10 <__assert_fail@plt+0x15570>
   26fd4:	ldr	r3, [r7, #12]
   26fd8:	ldr	r2, [sp, #16]
   26fdc:	ldr	r8, [r3, r2]
   26fe0:	ldr	r3, [r4, #12]
   26fe4:	cmp	r9, r3
   26fe8:	bgt	26f98 <__assert_fail@plt+0x155f8>
   26fec:	ldr	r3, [r4]
   26ff0:	ldr	r0, [r3, r9, lsl #2]
   26ff4:	cmp	r0, #0
   26ff8:	beq	26f98 <__assert_fail@plt+0x155f8>
   26ffc:	mov	r1, r8
   27000:	add	r0, r0, #4
   27004:	bl	1ccfc <__assert_fail@plt+0xb35c>
   27008:	cmp	r0, #0
   2700c:	beq	26f98 <__assert_fail@plt+0x155f8>
   27010:	str	r9, [sp, #4]
   27014:	str	r8, [sp]
   27018:	mov	r3, fp
   2701c:	mov	r2, r6
   27020:	ldr	r1, [sp, #24]
   27024:	ldr	r0, [sp, #8]
   27028:	bl	1d7b0 <__assert_fail@plt+0xbe10>
   2702c:	cmp	r0, #0
   27030:	bne	26f98 <__assert_fail@plt+0x155f8>
   27034:	ldr	r3, [sp, #48]	; 0x30
   27038:	cmp	r3, #0
   2703c:	beq	26f28 <__assert_fail@plt+0x15588>
   27040:	str	r6, [sp, #56]	; 0x38
   27044:	str	fp, [sp, #60]	; 0x3c
   27048:	mov	r1, sl
   2704c:	add	r0, sp, #64	; 0x40
   27050:	bl	20564 <__assert_fail@plt+0xebc4>
   27054:	cmp	r0, #0
   27058:	beq	270bc <__assert_fail@plt+0x1571c>
   2705c:	ldr	r3, [sp, #48]	; 0x30
   27060:	ldr	r2, [sp, #12]
   27064:	ldr	r5, [r3, r2]
   27068:	add	r1, sp, #48	; 0x30
   2706c:	ldr	r0, [sp, #8]
   27070:	bl	27110 <__assert_fail@plt+0x15770>
   27074:	cmp	r0, #0
   27078:	bne	270d8 <__assert_fail@plt+0x15738>
   2707c:	ldr	r1, [r4, #4]
   27080:	cmp	r1, #0
   27084:	beq	26f64 <__assert_fail@plt+0x155c4>
   27088:	add	r3, fp, #1
   2708c:	ldr	r2, [sp, #48]	; 0x30
   27090:	mov	r0, r7
   27094:	bl	25684 <__assert_fail@plt+0x13ce4>
   27098:	cmp	r0, #0
   2709c:	beq	26f64 <__assert_fail@plt+0x155c4>
   270a0:	mov	r8, r0
   270a4:	b	270c0 <__assert_fail@plt+0x15720>
   270a8:	ldr	fp, [sp, #40]	; 0x28
   270ac:	ldr	sl, [sp, #44]	; 0x2c
   270b0:	b	26e90 <__assert_fail@plt+0x154f0>
   270b4:	mov	r8, #0
   270b8:	b	270c0 <__assert_fail@plt+0x15720>
   270bc:	mov	r8, #12
   270c0:	ldr	r3, [sp, #48]	; 0x30
   270c4:	cmp	r3, #0
   270c8:	beq	26bdc <__assert_fail@plt+0x1523c>
   270cc:	ldr	r0, [sp, #72]	; 0x48
   270d0:	bl	1c948 <__assert_fail@plt+0xafa8>
   270d4:	b	26bdc <__assert_fail@plt+0x1523c>
   270d8:	mov	r8, r0
   270dc:	b	270c0 <__assert_fail@plt+0x15720>
   270e0:	mov	r8, #0
   270e4:	b	26bdc <__assert_fail@plt+0x1523c>
   270e8:	ldr	r8, [sp, #28]
   270ec:	b	26bdc <__assert_fail@plt+0x1523c>
   270f0:	mov	r8, #12
   270f4:	b	26bdc <__assert_fail@plt+0x1523c>
   270f8:	mov	r8, #12
   270fc:	b	26bdc <__assert_fail@plt+0x1523c>
   27100:	mov	r8, r0
   27104:	b	26bdc <__assert_fail@plt+0x1523c>
   27108:	mov	r8, r0
   2710c:	b	26bdc <__assert_fail@plt+0x1523c>
   27110:	strd	r4, [sp, #-36]!	; 0xffffffdc
   27114:	strd	r6, [sp, #8]
   27118:	strd	r8, [sp, #16]
   2711c:	strd	sl, [sp, #24]
   27120:	str	lr, [sp, #32]
   27124:	sub	sp, sp, #60	; 0x3c
   27128:	mov	sl, r0
   2712c:	mov	r7, r1
   27130:	ldr	fp, [r1, #12]
   27134:	ldr	r1, [r1, #8]
   27138:	add	r0, sp, #44	; 0x2c
   2713c:	bl	1ddc4 <__assert_fail@plt+0xc424>
   27140:	subs	r4, r0, #0
   27144:	bne	273d0 <__assert_fail@plt+0x15a30>
   27148:	add	r3, sp, #44	; 0x2c
   2714c:	mov	r2, fp
   27150:	mov	r1, r7
   27154:	mov	r0, sl
   27158:	bl	26a54 <__assert_fail@plt+0x150b4>
   2715c:	subs	r3, r0, #0
   27160:	str	r3, [sp, #32]
   27164:	bne	273b4 <__assert_fail@plt+0x15a14>
   27168:	cmp	fp, #0
   2716c:	ble	273bc <__assert_fail@plt+0x15a1c>
   27170:	str	r3, [sp, #20]
   27174:	mov	r9, sl
   27178:	b	27310 <__assert_fail@plt+0x15970>
   2717c:	ldr	r2, [sp, #16]
   27180:	mov	r1, #0
   27184:	bl	11814 <memset@plt>
   27188:	ldr	r0, [sp, #52]	; 0x34
   2718c:	bl	1c948 <__assert_fail@plt+0xafa8>
   27190:	ldr	r4, [sp, #32]
   27194:	b	273d0 <__assert_fail@plt+0x15a30>
   27198:	ldr	r3, [r7, #12]
   2719c:	str	r3, [sp, #24]
   271a0:	ldr	r2, [sp, #12]
   271a4:	ldr	r3, [r2, #84]	; 0x54
   271a8:	mov	r0, r3
   271ac:	mov	r3, r9
   271b0:	mov	r1, fp
   271b4:	str	r0, [sp, #36]	; 0x24
   271b8:	bl	239a4 <__assert_fail@plt+0x12004>
   271bc:	subs	r6, r0, #0
   271c0:	ble	272d8 <__assert_fail@plt+0x15938>
   271c4:	add	r3, r9, r6
   271c8:	ldr	r2, [sp, #24]
   271cc:	cmp	r2, r3
   271d0:	blt	27204 <__assert_fail@plt+0x15864>
   271d4:	ldr	r2, [r7]
   271d8:	ldr	r0, [r2, r3, lsl #2]
   271dc:	cmp	r0, #0
   271e0:	beq	27284 <__assert_fail@plt+0x158e4>
   271e4:	ldr	r3, [sp, #36]	; 0x24
   271e8:	ldr	r3, [r3, #12]
   271ec:	ldr	r2, [sp, #8]
   271f0:	ldr	r1, [r3, r2, lsl #2]
   271f4:	add	r0, r0, #4
   271f8:	bl	1ccfc <__assert_fail@plt+0xb35c>
   271fc:	cmp	r0, #0
   27200:	beq	27284 <__assert_fail@plt+0x158e4>
   27204:	ldr	r3, [r7, #20]
   27208:	cmp	r3, #0
   2720c:	beq	2723c <__assert_fail@plt+0x1589c>
   27210:	ldr	r3, [r4, #12]
   27214:	ldr	r2, [sp, #8]
   27218:	ldr	r2, [r3, r2, lsl #2]
   2721c:	str	r9, [sp, #4]
   27220:	str	fp, [sp]
   27224:	add	r3, r9, r6
   27228:	ldr	r1, [sp, #28]
   2722c:	ldr	r0, [sp, #12]
   27230:	bl	1d7b0 <__assert_fail@plt+0xbe10>
   27234:	cmp	r0, #0
   27238:	bne	27250 <__assert_fail@plt+0x158b0>
   2723c:	mov	r1, fp
   27240:	add	r0, sp, #44	; 0x2c
   27244:	bl	20564 <__assert_fail@plt+0xebc4>
   27248:	cmp	r0, #0
   2724c:	beq	273c4 <__assert_fail@plt+0x15a24>
   27250:	add	sl, sl, #1
   27254:	ldr	r3, [r5, #20]
   27258:	cmp	sl, r3
   2725c:	bge	272e4 <__assert_fail@plt+0x15944>
   27260:	ldr	r3, [r5, #24]
   27264:	ldr	fp, [r3, sl, lsl #2]
   27268:	str	fp, [sp, #8]
   2726c:	lsl	r8, fp, #3
   27270:	ldr	r3, [r4]
   27274:	add	r3, r3, r8
   27278:	ldrb	r3, [r3, #6]
   2727c:	tst	r3, #16
   27280:	bne	27198 <__assert_fail@plt+0x157f8>
   27284:	ldr	r1, [r4]
   27288:	mov	r2, r9
   2728c:	add	r1, r1, r8
   27290:	ldr	r0, [sp, #12]
   27294:	bl	21008 <__assert_fail@plt+0xf668>
   27298:	cmp	r0, #0
   2729c:	beq	27250 <__assert_fail@plt+0x158b0>
   272a0:	ldr	r3, [r7]
   272a4:	ldr	r2, [sp, #16]
   272a8:	ldr	r0, [r3, r2]
   272ac:	cmp	r0, #0
   272b0:	beq	27250 <__assert_fail@plt+0x158b0>
   272b4:	ldr	r3, [r4, #12]
   272b8:	ldr	r2, [sp, #8]
   272bc:	ldr	r1, [r3, r2, lsl #2]
   272c0:	add	r0, r0, #4
   272c4:	bl	1ccfc <__assert_fail@plt+0xb35c>
   272c8:	cmp	r0, #0
   272cc:	beq	27250 <__assert_fail@plt+0x158b0>
   272d0:	mov	r6, #1
   272d4:	b	27204 <__assert_fail@plt+0x15864>
   272d8:	cmp	r6, #0
   272dc:	beq	27284 <__assert_fail@plt+0x158e4>
   272e0:	b	27204 <__assert_fail@plt+0x15864>
   272e4:	mov	fp, r9
   272e8:	ldr	r9, [sp, #12]
   272ec:	add	r3, sp, #44	; 0x2c
   272f0:	mov	r2, fp
   272f4:	mov	r1, r7
   272f8:	mov	r0, r9
   272fc:	bl	26a54 <__assert_fail@plt+0x150b4>
   27300:	cmp	r0, #0
   27304:	bne	273f0 <__assert_fail@plt+0x15a50>
   27308:	cmp	fp, #0
   2730c:	beq	273ac <__assert_fail@plt+0x15a0c>
   27310:	ldr	r0, [r7]
   27314:	lsl	r3, fp, #2
   27318:	str	r3, [sp, #16]
   2731c:	ldr	r3, [r0, fp, lsl #2]
   27320:	cmp	r3, #0
   27324:	ldreq	r3, [sp, #20]
   27328:	addeq	r3, r3, #1
   2732c:	ldrne	r3, [sp, #32]
   27330:	str	r3, [sp, #20]
   27334:	ldr	r3, [r9, #120]	; 0x78
   27338:	ldr	r2, [sp, #20]
   2733c:	cmp	r3, r2
   27340:	blt	2717c <__assert_fail@plt+0x157dc>
   27344:	mov	r3, #0
   27348:	str	r3, [sp, #48]	; 0x30
   2734c:	sub	fp, fp, #1
   27350:	ldr	r3, [r9, #100]	; 0x64
   27354:	ldr	r2, [sp, #16]
   27358:	add	r3, r3, r2
   2735c:	ldr	r5, [r3, #-4]
   27360:	cmp	r5, #0
   27364:	beq	272ec <__assert_fail@plt+0x1594c>
   27368:	ldr	r4, [r9, #84]	; 0x54
   2736c:	ldr	r3, [r5, #20]
   27370:	cmp	r3, #0
   27374:	ble	272ec <__assert_fail@plt+0x1594c>
   27378:	ldr	r3, [r5, #24]
   2737c:	ldr	r6, [r3]
   27380:	str	r6, [sp, #8]
   27384:	lsl	r8, r6, #3
   27388:	ldr	r3, [r4]
   2738c:	add	r3, r3, r8
   27390:	ldr	sl, [sp, #32]
   27394:	add	r2, r7, #16
   27398:	str	r2, [sp, #28]
   2739c:	str	r9, [sp, #12]
   273a0:	mov	r9, fp
   273a4:	mov	fp, r6
   273a8:	b	27278 <__assert_fail@plt+0x158d8>
   273ac:	mov	r4, fp
   273b0:	b	273c8 <__assert_fail@plt+0x15a28>
   273b4:	ldr	r4, [sp, #32]
   273b8:	b	273c8 <__assert_fail@plt+0x15a28>
   273bc:	ldr	r4, [sp, #32]
   273c0:	b	273c8 <__assert_fail@plt+0x15a28>
   273c4:	mov	r4, #12
   273c8:	ldr	r0, [sp, #52]	; 0x34
   273cc:	bl	1c948 <__assert_fail@plt+0xafa8>
   273d0:	mov	r0, r4
   273d4:	add	sp, sp, #60	; 0x3c
   273d8:	ldrd	r4, [sp]
   273dc:	ldrd	r6, [sp, #8]
   273e0:	ldrd	r8, [sp, #16]
   273e4:	ldrd	sl, [sp, #24]
   273e8:	add	sp, sp, #32
   273ec:	pop	{pc}		; (ldr pc, [sp], #4)
   273f0:	mov	r4, r0
   273f4:	b	273c8 <__assert_fail@plt+0x15a28>
   273f8:	strd	r4, [sp, #-36]!	; 0xffffffdc
   273fc:	strd	r6, [sp, #8]
   27400:	strd	r8, [sp, #16]
   27404:	strd	sl, [sp, #24]
   27408:	str	lr, [sp, #32]
   2740c:	sub	sp, sp, #420	; 0x1a4
   27410:	mov	r5, r0
   27414:	str	r0, [sp, #20]
   27418:	str	r1, [sp, #44]	; 0x2c
   2741c:	str	r2, [sp, #60]	; 0x3c
   27420:	mov	r4, r3
   27424:	ldr	r6, [sp, #456]	; 0x1c8
   27428:	ldr	sl, [r0]
   2742c:	mov	r2, #136	; 0x88
   27430:	mov	r1, #0
   27434:	add	r0, sp, #276	; 0x114
   27438:	bl	11814 <memset@plt>
   2743c:	str	sl, [sp, #360]	; 0x168
   27440:	ldr	r2, [r5, #16]
   27444:	str	r2, [sp, #32]
   27448:	cmp	r2, #0
   2744c:	beq	27474 <__assert_fail@plt+0x15ad4>
   27450:	ldrb	r2, [r5, #28]
   27454:	ubfx	r3, r2, #3, #1
   27458:	cmp	r4, r6
   2745c:	moveq	r3, #0
   27460:	andne	r3, r3, #1
   27464:	cmp	r3, #0
   27468:	moveq	r3, #0
   2746c:	streq	r3, [sp, #32]
   27470:	bne	277c0 <__assert_fail@plt+0x15e20>
   27474:	ldr	r3, [sp, #20]
   27478:	ldr	r3, [r3, #24]
   2747c:	ldr	r2, [sp, #464]	; 0x1d0
   27480:	cmp	r3, r2
   27484:	subcc	r2, r2, #1
   27488:	subcc	r3, r2, r3
   2748c:	movcs	r3, #0
   27490:	str	r3, [sp, #72]	; 0x48
   27494:	ldr	ip, [sp, #20]
   27498:	ldr	r3, [ip, #8]
   2749c:	cmp	r3, #0
   274a0:	beq	289bc <__assert_fail@plt+0x1701c>
   274a4:	ldr	r3, [sl, #36]	; 0x24
   274a8:	cmp	r3, #0
   274ac:	beq	289c8 <__assert_fail@plt+0x17028>
   274b0:	ldr	r2, [sl, #40]	; 0x28
   274b4:	cmp	r2, #0
   274b8:	beq	289d4 <__assert_fail@plt+0x17034>
   274bc:	ldr	r1, [sl, #44]	; 0x2c
   274c0:	cmp	r1, #0
   274c4:	beq	289e0 <__assert_fail@plt+0x17040>
   274c8:	ldr	r0, [sl, #48]	; 0x30
   274cc:	cmp	r0, #0
   274d0:	beq	289ec <__assert_fail@plt+0x1704c>
   274d4:	ldr	r3, [r3, #8]
   274d8:	cmp	r3, #0
   274dc:	bne	27518 <__assert_fail@plt+0x15b78>
   274e0:	ldr	r3, [r2, #8]
   274e4:	cmp	r3, #0
   274e8:	bne	27518 <__assert_fail@plt+0x15b78>
   274ec:	ldr	r2, [r1, #8]
   274f0:	cmp	r2, #0
   274f4:	beq	27504 <__assert_fail@plt+0x15b64>
   274f8:	ldrsb	r2, [ip, #28]
   274fc:	cmp	r2, #0
   27500:	blt	27518 <__assert_fail@plt+0x15b78>
   27504:	cmp	r4, #0
   27508:	cmpne	r6, #0
   2750c:	bne	289f8 <__assert_fail@plt+0x17058>
   27510:	mov	r6, r3
   27514:	mov	r4, r3
   27518:	ldr	r3, [sp, #464]	; 0x1d0
   2751c:	ldr	r2, [sp, #72]	; 0x48
   27520:	subs	r3, r3, r2
   27524:	str	r3, [sp, #64]	; 0x40
   27528:	movne	r5, #1
   2752c:	bne	2753c <__assert_fail@plt+0x15b9c>
   27530:	ldr	r5, [sl, #76]	; 0x4c
   27534:	adds	r5, r5, #0
   27538:	movne	r5, #1
   2753c:	ldr	r3, [sp, #20]
   27540:	ldr	ip, [r3, #20]
   27544:	str	ip, [sp, #68]	; 0x44
   27548:	ldr	r2, [r3, #12]
   2754c:	ldr	r0, [sl, #92]	; 0x5c
   27550:	ldr	r3, [sl, #8]
   27554:	add	r3, r3, #1
   27558:	cmp	r3, r0
   2755c:	movlt	r3, r0
   27560:	ldr	lr, [sp, #60]	; 0x3c
   27564:	add	r1, lr, #1
   27568:	ldr	r7, [sp, #44]	; 0x2c
   2756c:	str	r7, [sp, #276]	; 0x114
   27570:	str	lr, [sp, #324]	; 0x144
   27574:	str	lr, [sp, #320]	; 0x140
   27578:	mov	r7, ip
   2757c:	str	ip, [sp, #340]	; 0x154
   27580:	and	ip, r2, #4194304	; 0x400000
   27584:	ubfx	r2, r2, #22, #1
   27588:	strb	r2, [sp, #348]	; 0x15c
   2758c:	orrs	r2, r7, ip
   27590:	movne	r2, #1
   27594:	moveq	r2, #0
   27598:	strb	r2, [sp, #351]	; 0x15f
   2759c:	str	r0, [sp, #356]	; 0x164
   275a0:	ldrb	r2, [sl, #88]	; 0x58
   275a4:	ubfx	r0, r2, #2, #1
   275a8:	strb	r0, [sp, #349]	; 0x15d
   275ac:	ubfx	r2, r2, #3, #1
   275b0:	strb	r2, [sp, #350]	; 0x15e
   275b4:	str	lr, [sp, #332]	; 0x14c
   275b8:	str	lr, [sp, #328]	; 0x148
   275bc:	cmp	r3, r1
   275c0:	movlt	r1, r3
   275c4:	add	r0, sp, #276	; 0x114
   275c8:	bl	1d8b0 <__assert_fail@plt+0xbf10>
   275cc:	subs	r2, r0, #0
   275d0:	str	r2, [sp, #76]	; 0x4c
   275d4:	bne	28950 <__assert_fail@plt+0x16fb0>
   275d8:	add	r3, sl, #96	; 0x60
   275dc:	str	r3, [sp, #344]	; 0x158
   275e0:	ldrb	r3, [sl, #88]	; 0x58
   275e4:	ubfx	r3, r3, #4, #1
   275e8:	strb	r3, [sp, #354]	; 0x162
   275ec:	ldrb	r3, [sp, #351]	; 0x15f
   275f0:	cmp	r3, #0
   275f4:	beq	28b00 <__assert_fail@plt+0x17160>
   275f8:	mov	r3, r2
   275fc:	str	r3, [sp, #304]	; 0x130
   27600:	str	r3, [sp, #308]	; 0x134
   27604:	ldr	r3, [sp, #460]	; 0x1cc
   27608:	str	r3, [sp, #332]	; 0x14c
   2760c:	str	r3, [sp, #328]	; 0x148
   27610:	ldr	r3, [sp, #20]
   27614:	ldrb	r3, [r3, #28]
   27618:	ubfx	r3, r3, #7, #1
   2761c:	strb	r3, [sp, #353]	; 0x161
   27620:	ldr	r7, [sl, #76]	; 0x4c
   27624:	lsl	r7, r7, #1
   27628:	ldr	r3, [sp, #472]	; 0x1d8
   2762c:	str	r3, [sp, #364]	; 0x16c
   27630:	mvn	r3, #0
   27634:	str	r3, [sp, #368]	; 0x170
   27638:	cmp	r7, #0
   2763c:	ble	2767c <__assert_fail@plt+0x15cdc>
   27640:	movw	r3, #43690	; 0xaaaa
   27644:	movt	r3, #2730	; 0xaaa
   27648:	cmp	r7, r3
   2764c:	bhi	28af4 <__assert_fail@plt+0x17154>
   27650:	add	r0, r7, r7, lsl #1
   27654:	lsl	r0, r0, #3
   27658:	bl	1ca68 <__assert_fail@plt+0xb0c8>
   2765c:	str	r0, [sp, #392]	; 0x188
   27660:	lsl	r0, r7, #2
   27664:	bl	1ca68 <__assert_fail@plt+0xb0c8>
   27668:	str	r0, [sp, #408]	; 0x198
   2766c:	ldr	r3, [sp, #392]	; 0x188
   27670:	cmp	r0, #0
   27674:	cmpne	r3, #0
   27678:	beq	28af4 <__assert_fail@plt+0x17154>
   2767c:	str	r7, [sp, #388]	; 0x184
   27680:	mov	r3, #1
   27684:	str	r3, [sp, #396]	; 0x18c
   27688:	str	r7, [sp, #404]	; 0x194
   2768c:	ldr	r3, [sp, #64]	; 0x40
   27690:	cmp	r3, #1
   27694:	bls	277d8 <__assert_fail@plt+0x15e38>
   27698:	ldr	r0, [sp, #312]	; 0x138
   2769c:	cmn	r0, #-1073741822	; 0xc0000002
   276a0:	bhi	2895c <__assert_fail@plt+0x16fbc>
   276a4:	add	r0, r0, #1
   276a8:	lsl	r0, r0, #2
   276ac:	bl	1ca68 <__assert_fail@plt+0xb0c8>
   276b0:	str	r0, [sp, #376]	; 0x178
   276b4:	cmp	r0, #0
   276b8:	beq	28968 <__assert_fail@plt+0x16fc8>
   276bc:	str	r4, [sp, #412]	; 0x19c
   276c0:	ldr	r3, [sp, #472]	; 0x1d8
   276c4:	and	r3, r3, #1
   276c8:	cmp	r3, #0
   276cc:	movne	r3, #4
   276d0:	moveq	r3, #6
   276d4:	str	r3, [sp, #336]	; 0x150
   276d8:	cmp	r4, r6
   276dc:	mvngt	r3, #0
   276e0:	movle	r3, #1
   276e4:	str	r3, [sp, #92]	; 0x5c
   276e8:	movlt	r3, r4
   276ec:	movge	r3, r6
   276f0:	str	r3, [sp, #56]	; 0x38
   276f4:	movge	r3, r4
   276f8:	movlt	r3, r6
   276fc:	str	r3, [sp, #48]	; 0x30
   27700:	ldr	r3, [sl, #92]	; 0x5c
   27704:	str	r3, [sp, #88]	; 0x58
   27708:	ldr	r2, [sp, #32]
   2770c:	cmp	r2, #0
   27710:	beq	277e8 <__assert_fail@plt+0x15e48>
   27714:	cmp	r3, #1
   27718:	moveq	r3, #4
   2771c:	beq	27740 <__assert_fail@plt+0x15da0>
   27720:	ldr	r3, [sp, #20]
   27724:	ldr	r3, [r3, #12]
   27728:	and	r3, r3, #4194304	; 0x400000
   2772c:	ldr	r2, [sp, #68]	; 0x44
   27730:	orr	r3, r2, r3
   27734:	cmp	r3, #0
   27738:	ldr	r3, [sp, #76]	; 0x4c
   2773c:	moveq	r3, #4
   27740:	ldr	r2, [sp, #76]	; 0x4c
   27744:	cmp	r4, r6
   27748:	movle	r2, #2
   2774c:	ldr	r1, [sp, #68]	; 0x44
   27750:	cmp	r1, #0
   27754:	orrne	r3, r3, #1
   27758:	orr	r3, r3, r2
   2775c:	str	r3, [sp, #80]	; 0x50
   27760:	ldr	r3, [sp, #48]	; 0x30
   27764:	cmp	r4, r3
   27768:	movle	r3, #0
   2776c:	movgt	r3, #1
   27770:	ldr	r2, [sp, #56]	; 0x38
   27774:	cmp	r4, r2
   27778:	orrlt	r3, r3, #1
   2777c:	str	r3, [sp, #84]	; 0x54
   27780:	cmp	r3, #0
   27784:	bne	28974 <__assert_fail@plt+0x16fd4>
   27788:	str	r5, [sp, #16]
   2778c:	add	r3, sp, #416	; 0x1a0
   27790:	cmp	r4, r6
   27794:	suble	r3, r3, #4
   27798:	movgt	r3, #0
   2779c:	str	r3, [sp, #96]	; 0x60
   277a0:	adds	r3, r3, #0
   277a4:	movne	r3, #1
   277a8:	str	r3, [sp, #100]	; 0x64
   277ac:	mov	r3, #65280	; 0xff00
   277b0:	movt	r3, #3
   277b4:	str	r3, [sp, #40]	; 0x28
   277b8:	str	sl, [sp, #52]	; 0x34
   277bc:	b	28b94 <__assert_fail@plt+0x171f4>
   277c0:	and	r2, r2, #1
   277c4:	cmp	r2, #0
   277c8:	ldr	r3, [sp, #32]
   277cc:	movne	r3, #0
   277d0:	str	r3, [sp, #32]
   277d4:	b	27474 <__assert_fail@plt+0x15ad4>
   277d8:	ldrb	r3, [sl, #88]	; 0x58
   277dc:	tst	r3, #2
   277e0:	beq	276bc <__assert_fail@plt+0x15d1c>
   277e4:	b	27698 <__assert_fail@plt+0x15cf8>
   277e8:	mov	r3, #8
   277ec:	str	r3, [sp, #80]	; 0x50
   277f0:	b	27760 <__assert_fail@plt+0x15dc0>
   277f4:	ldr	r5, [sp, #76]	; 0x4c
   277f8:	ldr	r4, [sp, #412]	; 0x19c
   277fc:	ldr	r3, [sp, #300]	; 0x12c
   27800:	sub	r3, r4, r3
   27804:	ldr	r2, [sp, #308]	; 0x134
   27808:	cmp	r2, r3
   2780c:	bhi	27834 <__assert_fail@plt+0x15e94>
   27810:	ldr	r2, [sp, #472]	; 0x1d8
   27814:	mov	r1, r4
   27818:	add	r0, sp, #276	; 0x114
   2781c:	bl	2326c <__assert_fail@plt+0x118cc>
   27820:	subs	r3, r0, #0
   27824:	str	r3, [sp, #24]
   27828:	bne	28990 <__assert_fail@plt+0x16ff0>
   2782c:	ldr	r3, [sp, #300]	; 0x12c
   27830:	sub	r3, r4, r3
   27834:	ldr	r2, [sp, #304]	; 0x130
   27838:	cmp	r2, r3
   2783c:	ldrhi	r2, [sp, #280]	; 0x118
   27840:	ldrbhi	r3, [r2, r3]
   27844:	movls	r3, r5
   27848:	ldr	r2, [sp, #32]
   2784c:	ldrb	r3, [r2, r3]
   27850:	cmp	r3, #0
   27854:	bne	27a4c <__assert_fail@plt+0x160ac>
   27858:	ldr	r3, [sp, #92]	; 0x5c
   2785c:	add	r4, r4, r3
   27860:	str	r4, [sp, #412]	; 0x19c
   27864:	ldr	r3, [sp, #48]	; 0x30
   27868:	cmp	r4, r3
   2786c:	movle	r3, #0
   27870:	movgt	r3, #1
   27874:	ldr	r2, [sp, #56]	; 0x38
   27878:	cmp	r4, r2
   2787c:	movge	r4, r3
   27880:	orrlt	r4, r3, #1
   27884:	cmp	r4, #0
   27888:	beq	277f8 <__assert_fail@plt+0x15e58>
   2788c:	ldr	sl, [sp, #52]	; 0x34
   27890:	mov	r3, #1
   27894:	str	r3, [sp, #24]
   27898:	b	279ec <__assert_fail@plt+0x1604c>
   2789c:	ldr	r2, [sp, #412]	; 0x19c
   278a0:	ldr	r3, [sp, #48]	; 0x30
   278a4:	cmp	r3, r2
   278a8:	ble	27a3c <__assert_fail@plt+0x1609c>
   278ac:	ldr	r1, [sp, #44]	; 0x2c
   278b0:	add	r3, r1, r2
   278b4:	ldrb	r2, [r1, r2]
   278b8:	ldr	r1, [sp, #68]	; 0x44
   278bc:	ldrb	r2, [r1, r2]
   278c0:	ldr	r1, [sp, #32]
   278c4:	ldrb	r2, [r1, r2]
   278c8:	cmp	r2, #0
   278cc:	bne	27a4c <__assert_fail@plt+0x160ac>
   278d0:	ldr	r2, [sp, #44]	; 0x2c
   278d4:	sub	r1, r2, #1
   278d8:	ldr	r0, [sp, #48]	; 0x30
   278dc:	add	r1, r1, r0
   278e0:	rsb	ip, r2, #1
   278e4:	ldr	lr, [sp, #32]
   278e8:	ldr	r4, [sp, #68]	; 0x44
   278ec:	add	r0, ip, r3
   278f0:	cmp	r3, r1
   278f4:	beq	27b20 <__assert_fail@plt+0x16180>
   278f8:	ldrb	r2, [r3, #1]!
   278fc:	ldrb	r2, [r4, r2]
   27900:	ldrb	r2, [lr, r2]
   27904:	cmp	r2, #0
   27908:	beq	278ec <__assert_fail@plt+0x15f4c>
   2790c:	str	r0, [sp, #412]	; 0x19c
   27910:	b	27a4c <__assert_fail@plt+0x160ac>
   27914:	ldr	r2, [sp, #412]	; 0x19c
   27918:	ldr	r3, [sp, #48]	; 0x30
   2791c:	cmp	r3, r2
   27920:	ble	27a3c <__assert_fail@plt+0x1609c>
   27924:	ldr	r1, [sp, #44]	; 0x2c
   27928:	add	r3, r1, r2
   2792c:	ldrb	r2, [r1, r2]
   27930:	ldr	r1, [sp, #32]
   27934:	ldrb	r2, [r1, r2]
   27938:	cmp	r2, #0
   2793c:	bne	27a4c <__assert_fail@plt+0x160ac>
   27940:	ldr	r2, [sp, #44]	; 0x2c
   27944:	sub	r1, r2, #1
   27948:	ldr	r0, [sp, #48]	; 0x30
   2794c:	add	r1, r1, r0
   27950:	rsb	ip, r2, #1
   27954:	ldr	lr, [sp, #32]
   27958:	add	r0, ip, r3
   2795c:	cmp	r1, r3
   27960:	beq	27a38 <__assert_fail@plt+0x16098>
   27964:	ldrb	r2, [r3, #1]!
   27968:	ldrb	r2, [lr, r2]
   2796c:	cmp	r2, #0
   27970:	beq	27958 <__assert_fail@plt+0x15fb8>
   27974:	str	r0, [sp, #412]	; 0x19c
   27978:	b	27a4c <__assert_fail@plt+0x160ac>
   2797c:	ldr	r3, [sp, #412]	; 0x19c
   27980:	ldr	r2, [sp, #56]	; 0x38
   27984:	cmp	r2, r3
   27988:	bgt	27a28 <__assert_fail@plt+0x16088>
   2798c:	ldr	r1, [sp, #84]	; 0x54
   27990:	ldr	ip, [sp, #76]	; 0x4c
   27994:	mov	r0, #1
   27998:	ldr	r4, [sp, #32]
   2799c:	ldr	lr, [sp, #68]	; 0x44
   279a0:	ldr	r6, [sp, #56]	; 0x38
   279a4:	ldr	r7, [sp, #44]	; 0x2c
   279a8:	ldr	r5, [sp, #60]	; 0x3c
   279ac:	cmp	r3, r5
   279b0:	ldrblt	r2, [r7, r3]
   279b4:	movge	r2, ip
   279b8:	cmp	lr, #0
   279bc:	ldrbne	r2, [lr, r2]
   279c0:	ldrb	r2, [r4, r2]
   279c4:	cmp	r2, #0
   279c8:	bne	27b68 <__assert_fail@plt+0x161c8>
   279cc:	sub	r3, r3, #1
   279d0:	mov	r1, r0
   279d4:	cmp	r3, r6
   279d8:	bge	279ac <__assert_fail@plt+0x1600c>
   279dc:	ldr	sl, [sp, #52]	; 0x34
   279e0:	str	r3, [sp, #412]	; 0x19c
   279e4:	mov	r3, #1
   279e8:	str	r3, [sp, #24]
   279ec:	ldr	r0, [sp, #376]	; 0x178
   279f0:	bl	1c948 <__assert_fail@plt+0xafa8>
   279f4:	ldr	r3, [sl, #76]	; 0x4c
   279f8:	cmp	r3, #0
   279fc:	bne	289a0 <__assert_fail@plt+0x17000>
   27a00:	add	r0, sp, #276	; 0x114
   27a04:	bl	1fe90 <__assert_fail@plt+0xe4f0>
   27a08:	ldr	r0, [sp, #24]
   27a0c:	add	sp, sp, #420	; 0x1a4
   27a10:	ldrd	r4, [sp]
   27a14:	ldrd	r6, [sp, #8]
   27a18:	ldrd	r8, [sp, #16]
   27a1c:	ldrd	sl, [sp, #24]
   27a20:	add	sp, sp, #32
   27a24:	pop	{pc}		; (ldr pc, [sp], #4)
   27a28:	ldr	sl, [sp, #52]	; 0x34
   27a2c:	mov	r3, #1
   27a30:	str	r3, [sp, #24]
   27a34:	b	279ec <__assert_fail@plt+0x1604c>
   27a38:	str	r0, [sp, #412]	; 0x19c
   27a3c:	ldr	r3, [sp, #412]	; 0x19c
   27a40:	ldr	r2, [sp, #48]	; 0x30
   27a44:	cmp	r3, r2
   27a48:	beq	27b28 <__assert_fail@plt+0x16188>
   27a4c:	ldr	r2, [sp, #472]	; 0x1d8
   27a50:	ldr	r1, [sp, #412]	; 0x19c
   27a54:	add	r0, sp, #276	; 0x114
   27a58:	bl	2326c <__assert_fail@plt+0x118cc>
   27a5c:	subs	r3, r0, #0
   27a60:	str	r3, [sp, #24]
   27a64:	bne	28998 <__assert_fail@plt+0x16ff8>
   27a68:	ldr	r3, [sp, #88]	; 0x58
   27a6c:	cmp	r3, #1
   27a70:	beq	27a90 <__assert_fail@plt+0x160f0>
   27a74:	ldr	r3, [sp, #304]	; 0x130
   27a78:	cmp	r3, #0
   27a7c:	beq	27a90 <__assert_fail@plt+0x160f0>
   27a80:	ldr	r3, [sp, #284]	; 0x11c
   27a84:	ldr	r3, [r3]
   27a88:	cmn	r3, #1
   27a8c:	beq	28b5c <__assert_fail@plt+0x171bc>
   27a90:	mov	r3, #0
   27a94:	str	r3, [sp, #396]	; 0x18c
   27a98:	str	r3, [sp, #384]	; 0x180
   27a9c:	str	r3, [sp, #380]	; 0x17c
   27aa0:	ldr	r4, [sp, #360]	; 0x168
   27aa4:	ldr	r1, [sp, #316]	; 0x13c
   27aa8:	str	r1, [sp, #36]	; 0x24
   27aac:	str	r3, [sp, #112]	; 0x70
   27ab0:	ldr	r5, [r4, #36]	; 0x24
   27ab4:	ldrsb	r3, [r5, #52]	; 0x34
   27ab8:	cmp	r3, #0
   27abc:	bge	27b90 <__assert_fail@plt+0x161f0>
   27ac0:	ldr	r2, [sp, #364]	; 0x16c
   27ac4:	sub	r1, r1, #1
   27ac8:	add	r0, sp, #276	; 0x114
   27acc:	bl	20efc <__assert_fail@plt+0xf55c>
   27ad0:	tst	r0, #1
   27ad4:	bne	27b8c <__assert_fail@plt+0x161ec>
   27ad8:	cmp	r0, #0
   27adc:	beq	27b90 <__assert_fail@plt+0x161f0>
   27ae0:	and	r3, r0, #6
   27ae4:	cmp	r3, #6
   27ae8:	beq	27bd8 <__assert_fail@plt+0x16238>
   27aec:	tst	r0, #2
   27af0:	bne	27be0 <__assert_fail@plt+0x16240>
   27af4:	tst	r0, #4
   27af8:	beq	27b90 <__assert_fail@plt+0x161f0>
   27afc:	mov	r3, r0
   27b00:	ldr	r2, [r5, #40]	; 0x28
   27b04:	mov	r1, r4
   27b08:	add	r0, sp, #112	; 0x70
   27b0c:	bl	1fb44 <__assert_fail@plt+0xe1a4>
   27b10:	subs	r5, r0, #0
   27b14:	bne	27b90 <__assert_fail@plt+0x161f0>
   27b18:	ldr	sl, [sp, #52]	; 0x34
   27b1c:	b	28adc <__assert_fail@plt+0x1713c>
   27b20:	str	r0, [sp, #412]	; 0x19c
   27b24:	b	27a3c <__assert_fail@plt+0x1609c>
   27b28:	ldr	r2, [sp, #60]	; 0x3c
   27b2c:	cmp	r3, r2
   27b30:	ldrlt	r2, [sp, #44]	; 0x2c
   27b34:	ldrblt	r3, [r2, r3]
   27b38:	ldrge	r3, [sp, #76]	; 0x4c
   27b3c:	ldr	r2, [sp, #68]	; 0x44
   27b40:	cmp	r2, #0
   27b44:	ldrbne	r3, [r2, r3]
   27b48:	ldr	r2, [sp, #32]
   27b4c:	ldrb	r3, [r2, r3]
   27b50:	cmp	r3, #0
   27b54:	bne	27a4c <__assert_fail@plt+0x160ac>
   27b58:	ldr	sl, [sp, #52]	; 0x34
   27b5c:	mov	r3, #1
   27b60:	str	r3, [sp, #24]
   27b64:	b	279ec <__assert_fail@plt+0x1604c>
   27b68:	cmp	r1, #0
   27b6c:	strne	r3, [sp, #412]	; 0x19c
   27b70:	ldr	r2, [sp, #56]	; 0x38
   27b74:	cmp	r3, r2
   27b78:	bge	27a4c <__assert_fail@plt+0x160ac>
   27b7c:	ldr	sl, [sp, #52]	; 0x34
   27b80:	mov	r3, #1
   27b84:	str	r3, [sp, #24]
   27b88:	b	279ec <__assert_fail@plt+0x1604c>
   27b8c:	ldr	r5, [r4, #40]	; 0x28
   27b90:	ldr	r3, [sp, #376]	; 0x178
   27b94:	cmp	r3, #0
   27b98:	beq	27c44 <__assert_fail@plt+0x162a4>
   27b9c:	ldr	r2, [sp, #36]	; 0x24
   27ba0:	str	r5, [r3, r2, lsl #2]
   27ba4:	ldr	r3, [r4, #76]	; 0x4c
   27ba8:	cmp	r3, #0
   27bac:	ldreq	sl, [sp, #100]	; 0x64
   27bb0:	bne	27be8 <__assert_fail@plt+0x16248>
   27bb4:	ldrb	r3, [r5, #52]	; 0x34
   27bb8:	tst	r3, #16
   27bbc:	bne	27c4c <__assert_fail@plt+0x162ac>
   27bc0:	ldr	r3, [sp, #24]
   27bc4:	str	r3, [sp, #12]
   27bc8:	mvn	fp, #0
   27bcc:	ldr	r3, [sp, #96]	; 0x60
   27bd0:	str	r3, [sp, #28]
   27bd4:	b	27ff0 <__assert_fail@plt+0x16650>
   27bd8:	ldr	r5, [r4, #48]	; 0x30
   27bdc:	b	27b90 <__assert_fail@plt+0x161f0>
   27be0:	ldr	r5, [r4, #44]	; 0x2c
   27be4:	b	27b90 <__assert_fail@plt+0x161f0>
   27be8:	add	r4, r5, #4
   27bec:	mov	r2, #0
   27bf0:	mov	r1, r4
   27bf4:	add	r0, sp, #276	; 0x114
   27bf8:	bl	21178 <__assert_fail@plt+0xf7d8>
   27bfc:	mov	fp, r0
   27c00:	str	r0, [sp, #112]	; 0x70
   27c04:	cmp	r0, #0
   27c08:	bne	28d60 <__assert_fail@plt+0x173c0>
   27c0c:	ldrb	r3, [r5, #52]	; 0x34
   27c10:	tst	r3, #64	; 0x40
   27c14:	bne	27c20 <__assert_fail@plt+0x16280>
   27c18:	ldr	sl, [sp, #84]	; 0x54
   27c1c:	b	27bb4 <__assert_fail@plt+0x16214>
   27c20:	mov	r1, r4
   27c24:	add	r0, sp, #276	; 0x114
   27c28:	bl	261b0 <__assert_fail@plt+0x14810>
   27c2c:	mov	fp, r0
   27c30:	str	r0, [sp, #112]	; 0x70
   27c34:	cmp	r0, #0
   27c38:	bne	28d60 <__assert_fail@plt+0x173c0>
   27c3c:	ldr	sl, [sp, #84]	; 0x54
   27c40:	b	27bb4 <__assert_fail@plt+0x16214>
   27c44:	ldr	sl, [sp, #100]	; 0x64
   27c48:	b	27bb4 <__assert_fail@plt+0x16214>
   27c4c:	ldrsb	r3, [r5, #52]	; 0x34
   27c50:	cmp	r3, #0
   27c54:	blt	27c74 <__assert_fail@plt+0x162d4>
   27c58:	ldr	r3, [sp, #16]
   27c5c:	cmp	r3, #0
   27c60:	beq	27c98 <__assert_fail@plt+0x162f8>
   27c64:	ldr	fp, [sp, #36]	; 0x24
   27c68:	mov	r3, #1
   27c6c:	str	r3, [sp, #12]
   27c70:	b	27bcc <__assert_fail@plt+0x1622c>
   27c74:	ldr	r2, [sp, #36]	; 0x24
   27c78:	mov	r1, r5
   27c7c:	add	r0, sp, #276	; 0x114
   27c80:	bl	21fa4 <__assert_fail@plt+0x10604>
   27c84:	subs	r3, r0, #0
   27c88:	str	r3, [sp, #12]
   27c8c:	bne	27c58 <__assert_fail@plt+0x162b8>
   27c90:	mvn	fp, #0
   27c94:	b	27bcc <__assert_fail@plt+0x1622c>
   27c98:	ldr	fp, [sp, #36]	; 0x24
   27c9c:	b	28d60 <__assert_fail@plt+0x173c0>
   27ca0:	ldr	r2, [sp, #324]	; 0x144
   27ca4:	cmp	r3, r2
   27ca8:	bge	28010 <__assert_fail@plt+0x16670>
   27cac:	add	r1, r1, #2
   27cb0:	add	r0, sp, #276	; 0x114
   27cb4:	bl	1eb20 <__assert_fail@plt+0xd180>
   27cb8:	str	r0, [sp, #112]	; 0x70
   27cbc:	cmp	r0, #0
   27cc0:	beq	2801c <__assert_fail@plt+0x1667c>
   27cc4:	ldr	sl, [sp, #52]	; 0x34
   27cc8:	b	28adc <__assert_fail@plt+0x1713c>
   27ccc:	ldr	r2, [sp, #324]	; 0x144
   27cd0:	cmp	r3, r2
   27cd4:	bge	2801c <__assert_fail@plt+0x1667c>
   27cd8:	b	27cac <__assert_fail@plt+0x1630c>
   27cdc:	ldr	r6, [sp, #360]	; 0x168
   27ce0:	ldr	r3, [r5, #8]
   27ce4:	cmp	r3, #0
   27ce8:	ble	28ae8 <__assert_fail@plt+0x17148>
   27cec:	ldr	r7, [sp, #24]
   27cf0:	b	27e04 <__assert_fail@plt+0x16464>
   27cf4:	tst	r3, #8
   27cf8:	beq	27d04 <__assert_fail@plt+0x16364>
   27cfc:	tst	r0, #1
   27d00:	bne	27df4 <__assert_fail@plt+0x16454>
   27d04:	tst	r3, #32
   27d08:	beq	27d14 <__assert_fail@plt+0x16374>
   27d0c:	tst	r0, #2
   27d10:	beq	27df4 <__assert_fail@plt+0x16454>
   27d14:	tst	r3, #128	; 0x80
   27d18:	beq	27d24 <__assert_fail@plt+0x16384>
   27d1c:	tst	r0, #8
   27d20:	beq	27df4 <__assert_fail@plt+0x16454>
   27d24:	ldr	r3, [sp, #316]	; 0x13c
   27d28:	add	r2, sp, #276	; 0x114
   27d2c:	mov	r1, r8
   27d30:	mov	r0, r6
   27d34:	bl	239a4 <__assert_fail@plt+0x12004>
   27d38:	cmp	r0, #0
   27d3c:	beq	27df4 <__assert_fail@plt+0x16454>
   27d40:	ldr	r4, [sp, #316]	; 0x13c
   27d44:	add	r4, r0, r4
   27d48:	ldr	r3, [sp, #396]	; 0x18c
   27d4c:	cmp	r3, r0
   27d50:	movlt	r3, r0
   27d54:	str	r3, [sp, #396]	; 0x18c
   27d58:	mov	r1, r4
   27d5c:	add	r0, sp, #276	; 0x114
   27d60:	bl	212ac <__assert_fail@plt+0xf90c>
   27d64:	str	r0, [sp, #124]	; 0x7c
   27d68:	cmp	r0, #0
   27d6c:	bne	27eac <__assert_fail@plt+0x1650c>
   27d70:	ldr	r3, [r6, #12]
   27d74:	ldr	r3, [r3, r8, lsl #2]
   27d78:	add	r3, r3, r3, lsl #1
   27d7c:	lsl	r3, r3, #2
   27d80:	ldr	r0, [r6, #24]
   27d84:	add	r2, r0, r3
   27d88:	ldr	r8, [sp, #376]	; 0x178
   27d8c:	ldr	r1, [r8, r4, lsl #2]
   27d90:	cmp	r1, #0
   27d94:	beq	27e64 <__assert_fail@plt+0x164c4>
   27d98:	ldr	r1, [r1, #40]	; 0x28
   27d9c:	add	r0, sp, #136	; 0x88
   27da0:	bl	1e720 <__assert_fail@plt+0xcd80>
   27da4:	str	r0, [sp, #124]	; 0x7c
   27da8:	cmp	r0, #0
   27dac:	bne	27eac <__assert_fail@plt+0x1650c>
   27db0:	ldr	r2, [sp, #364]	; 0x16c
   27db4:	sub	r1, r4, #1
   27db8:	add	r0, sp, #276	; 0x114
   27dbc:	bl	20efc <__assert_fail@plt+0xf55c>
   27dc0:	ldr	r8, [sp, #376]	; 0x178
   27dc4:	mov	r3, r0
   27dc8:	add	r2, sp, #136	; 0x88
   27dcc:	mov	r1, r6
   27dd0:	add	r0, sp, #124	; 0x7c
   27dd4:	bl	1fb44 <__assert_fail@plt+0xe1a4>
   27dd8:	str	r0, [r8, r4, lsl #2]
   27ddc:	ldr	r0, [sp, #144]	; 0x90
   27de0:	bl	1c948 <__assert_fail@plt+0xafa8>
   27de4:	ldr	r3, [sp, #376]	; 0x178
   27de8:	ldr	r3, [r3, r4, lsl #2]
   27dec:	cmp	r3, #0
   27df0:	beq	27ea0 <__assert_fail@plt+0x16500>
   27df4:	add	r7, r7, #1
   27df8:	ldr	r3, [r5, #8]
   27dfc:	cmp	r7, r3
   27e00:	bge	28ae8 <__assert_fail@plt+0x17148>
   27e04:	ldr	r3, [r5, #12]
   27e08:	ldr	r8, [r3, r7, lsl #2]
   27e0c:	ldr	r4, [r6]
   27e10:	add	r4, r4, r8, lsl #3
   27e14:	ldrb	r3, [r4, #6]
   27e18:	tst	r3, #16
   27e1c:	beq	27df4 <__assert_fail@plt+0x16454>
   27e20:	ldr	r3, [r4, #4]
   27e24:	ldr	r2, [sp, #40]	; 0x28
   27e28:	tst	r2, r3
   27e2c:	beq	27d24 <__assert_fail@plt+0x16384>
   27e30:	ldr	r2, [sp, #364]	; 0x16c
   27e34:	ldr	r1, [sp, #316]	; 0x13c
   27e38:	add	r0, sp, #276	; 0x114
   27e3c:	bl	20efc <__assert_fail@plt+0xf55c>
   27e40:	ldr	r3, [r4, #4]
   27e44:	ubfx	r3, r3, #8, #10
   27e48:	tst	r3, #4
   27e4c:	beq	27cf4 <__assert_fail@plt+0x16354>
   27e50:	tst	r0, #1
   27e54:	beq	27df4 <__assert_fail@plt+0x16454>
   27e58:	tst	r3, #8
   27e5c:	beq	27d04 <__assert_fail@plt+0x16364>
   27e60:	b	27df4 <__assert_fail@plt+0x16454>
   27e64:	ldrd	r0, [r0, r3]
   27e68:	strd	r0, [sp, #136]	; 0x88
   27e6c:	ldr	r3, [r2, #8]
   27e70:	str	r3, [sp, #144]	; 0x90
   27e74:	ldr	r2, [sp, #364]	; 0x16c
   27e78:	sub	r1, r4, #1
   27e7c:	add	r0, sp, #276	; 0x114
   27e80:	bl	20efc <__assert_fail@plt+0xf55c>
   27e84:	mov	r3, r0
   27e88:	add	r2, sp, #136	; 0x88
   27e8c:	mov	r1, r6
   27e90:	add	r0, sp, #124	; 0x7c
   27e94:	bl	1fb44 <__assert_fail@plt+0xe1a4>
   27e98:	str	r0, [r8, r4, lsl #2]
   27e9c:	b	27de4 <__assert_fail@plt+0x16444>
   27ea0:	ldr	r0, [sp, #124]	; 0x7c
   27ea4:	cmp	r0, #0
   27ea8:	beq	27df4 <__assert_fail@plt+0x16454>
   27eac:	str	r0, [sp, #112]	; 0x70
   27eb0:	ldr	r3, [sp, #376]	; 0x178
   27eb4:	cmp	r3, #0
   27eb8:	beq	28d38 <__assert_fail@plt+0x17398>
   27ebc:	mov	r4, #0
   27ec0:	b	28058 <__assert_fail@plt+0x166b8>
   27ec4:	ldr	r6, [r5, #48]	; 0x30
   27ec8:	cmp	r6, #0
   27ecc:	beq	27ef4 <__assert_fail@plt+0x16554>
   27ed0:	ldr	r2, [sp, #364]	; 0x16c
   27ed4:	ldr	r1, [sp, #316]	; 0x13c
   27ed8:	sub	r1, r1, #1
   27edc:	add	r0, sp, #276	; 0x114
   27ee0:	bl	20efc <__assert_fail@plt+0xf55c>
   27ee4:	tst	r0, #1
   27ee8:	addne	r4, r4, #256	; 0x100
   27eec:	ldr	r4, [r6, r4, lsl #2]
   27ef0:	b	2804c <__assert_fail@plt+0x166ac>
   27ef4:	mov	r1, r5
   27ef8:	ldr	r0, [sp, #360]	; 0x168
   27efc:	bl	21494 <__assert_fail@plt+0xfaf4>
   27f00:	cmp	r0, #0
   27f04:	bne	2803c <__assert_fail@plt+0x1669c>
   27f08:	mov	r3, #12
   27f0c:	str	r3, [sp, #112]	; 0x70
   27f10:	b	27eb0 <__assert_fail@plt+0x16510>
   27f14:	ldr	r3, [sp, #112]	; 0x70
   27f18:	cmp	r3, #0
   27f1c:	bne	28ad8 <__assert_fail@plt+0x17138>
   27f20:	ldr	r3, [sp, #376]	; 0x178
   27f24:	cmp	r3, #0
   27f28:	beq	28d44 <__assert_fail@plt+0x173a4>
   27f2c:	ldr	r3, [sp, #12]
   27f30:	ldr	r2, [sp, #16]
   27f34:	cmp	r3, #0
   27f38:	eorne	r3, r2, #1
   27f3c:	moveq	r3, #0
   27f40:	cmp	r3, #0
   27f44:	bne	28d44 <__assert_fail@plt+0x173a4>
   27f48:	mov	r6, #0
   27f4c:	ldr	r0, [sp, #380]	; 0x17c
   27f50:	ldr	r2, [sp, #316]	; 0x13c
   27f54:	ldr	r3, [sp, #376]	; 0x178
   27f58:	add	r3, r3, r2, lsl #2
   27f5c:	add	r2, r2, #1
   27f60:	cmp	r0, r2
   27f64:	blt	28d44 <__assert_fail@plt+0x173a4>
   27f68:	ldr	r1, [sp, #316]	; 0x13c
   27f6c:	add	r1, r1, #1
   27f70:	str	r1, [sp, #316]	; 0x13c
   27f74:	ldr	r1, [r3, #4]!
   27f78:	cmp	r1, #0
   27f7c:	beq	27f5c <__assert_fail@plt+0x165bc>
   27f80:	mov	r2, r6
   27f84:	add	r1, sp, #276	; 0x114
   27f88:	add	r0, sp, #112	; 0x70
   27f8c:	bl	268b0 <__assert_fail@plt+0x14f10>
   27f90:	ldr	r3, [sp, #112]	; 0x70
   27f94:	orrs	r3, r0, r3
   27f98:	beq	27f4c <__assert_fail@plt+0x165ac>
   27f9c:	mov	r4, r0
   27fa0:	cmp	r0, #0
   27fa4:	bne	28074 <__assert_fail@plt+0x166d4>
   27fa8:	b	28d44 <__assert_fail@plt+0x173a4>
   27fac:	ldr	r3, [sp, #84]	; 0x54
   27fb0:	cmp	r5, r4
   27fb4:	movne	sl, r3
   27fb8:	ldr	r3, [sp, #36]	; 0x24
   27fbc:	cmp	r5, r4
   27fc0:	moveq	r3, r9
   27fc4:	str	r3, [sp, #36]	; 0x24
   27fc8:	b	2807c <__assert_fail@plt+0x166dc>
   27fcc:	ldr	fp, [sp, #316]	; 0x13c
   27fd0:	ldr	r3, [sp, #16]
   27fd4:	cmp	r3, #0
   27fd8:	beq	28d60 <__assert_fail@plt+0x173c0>
   27fdc:	mov	r3, #1
   27fe0:	str	r3, [sp, #12]
   27fe4:	mov	r3, #0
   27fe8:	str	r3, [sp, #28]
   27fec:	mov	r5, r4
   27ff0:	ldr	r1, [sp, #316]	; 0x13c
   27ff4:	ldr	r3, [sp, #332]	; 0x14c
   27ff8:	cmp	r1, r3
   27ffc:	bge	28d44 <__assert_fail@plt+0x173a4>
   28000:	add	r9, r1, #1
   28004:	ldr	r3, [sp, #312]	; 0x138
   28008:	cmp	r9, r3
   2800c:	bge	27ca0 <__assert_fail@plt+0x16300>
   28010:	ldr	r3, [sp, #304]	; 0x130
   28014:	cmp	r9, r3
   28018:	bge	27ccc <__assert_fail@plt+0x1632c>
   2801c:	ldrb	r3, [r5, #52]	; 0x34
   28020:	tst	r3, #32
   28024:	bne	27cdc <__assert_fail@plt+0x1633c>
   28028:	ldr	r3, [sp, #316]	; 0x13c
   2802c:	add	r2, r3, #1
   28030:	str	r2, [sp, #316]	; 0x13c
   28034:	ldr	r2, [sp, #280]	; 0x118
   28038:	ldrb	r4, [r2, r3]
   2803c:	ldr	r3, [r5, #44]	; 0x2c
   28040:	cmp	r3, #0
   28044:	beq	27ec4 <__assert_fail@plt+0x16524>
   28048:	ldr	r4, [r3, r4, lsl #2]
   2804c:	ldr	r3, [sp, #376]	; 0x178
   28050:	cmp	r3, #0
   28054:	beq	2806c <__assert_fail@plt+0x166cc>
   28058:	mov	r2, r4
   2805c:	add	r1, sp, #276	; 0x114
   28060:	add	r0, sp, #112	; 0x70
   28064:	bl	268b0 <__assert_fail@plt+0x14f10>
   28068:	mov	r4, r0
   2806c:	cmp	r4, #0
   28070:	beq	27f14 <__assert_fail@plt+0x16574>
   28074:	cmp	sl, #0
   28078:	bne	27fac <__assert_fail@plt+0x1660c>
   2807c:	ldrb	r3, [r4, #52]	; 0x34
   28080:	tst	r3, #16
   28084:	beq	27fec <__assert_fail@plt+0x1664c>
   28088:	tst	r3, #128	; 0x80
   2808c:	beq	27fcc <__assert_fail@plt+0x1662c>
   28090:	ldr	r2, [sp, #316]	; 0x13c
   28094:	mov	r1, r4
   28098:	add	r0, sp, #276	; 0x114
   2809c:	bl	21fa4 <__assert_fail@plt+0x10604>
   280a0:	cmp	r0, #0
   280a4:	beq	27fec <__assert_fail@plt+0x1664c>
   280a8:	b	27fcc <__assert_fail@plt+0x1662c>
   280ac:	ldr	r9, [sp, #28]
   280b0:	mov	r3, sl
   280b4:	ldr	sl, [sp, #12]
   280b8:	mov	r2, r5
   280bc:	mov	r1, r4
   280c0:	mov	r0, r9
   280c4:	bl	25684 <__assert_fail@plt+0x13ce4>
   280c8:	mov	r8, r0
   280cc:	mov	r0, r5
   280d0:	bl	1c948 <__assert_fail@plt+0xafa8>
   280d4:	cmp	r8, #0
   280d8:	beq	28130 <__assert_fail@plt+0x16790>
   280dc:	mov	r5, #0
   280e0:	b	28b3c <__assert_fail@plt+0x1719c>
   280e4:	str	r4, [sp, #136]	; 0x88
   280e8:	mov	r3, #0
   280ec:	str	r3, [sp, #140]	; 0x8c
   280f0:	str	r7, [sp, #144]	; 0x90
   280f4:	str	fp, [sp, #148]	; 0x94
   280f8:	str	r3, [sp, #152]	; 0x98
   280fc:	str	r3, [sp, #156]	; 0x9c
   28100:	str	r3, [sp, #160]	; 0xa0
   28104:	add	r1, sp, #136	; 0x88
   28108:	add	r0, sp, #276	; 0x114
   2810c:	bl	27110 <__assert_fail@plt+0x15770>
   28110:	mov	r8, r0
   28114:	ldr	r0, [sp, #160]	; 0xa0
   28118:	bl	1c948 <__assert_fail@plt+0xafa8>
   2811c:	cmp	r8, #0
   28120:	bne	28b38 <__assert_fail@plt+0x17198>
   28124:	ldr	r5, [r4]
   28128:	cmp	r5, #0
   2812c:	beq	28b24 <__assert_fail@plt+0x17184>
   28130:	mov	r8, sl
   28134:	ldr	sl, [sp, #52]	; 0x34
   28138:	ldr	r0, [sp, #376]	; 0x178
   2813c:	bl	1c948 <__assert_fail@plt+0xafa8>
   28140:	str	r4, [sp, #376]	; 0x178
   28144:	str	r7, [sp, #372]	; 0x174
   28148:	str	fp, [sp, #368]	; 0x170
   2814c:	mov	r0, #0
   28150:	bl	1c948 <__assert_fail@plt+0xafa8>
   28154:	mov	r0, #0
   28158:	bl	1c948 <__assert_fail@plt+0xafa8>
   2815c:	b	28db4 <__assert_fail@plt+0x17414>
   28160:	ldr	sl, [sp, #52]	; 0x34
   28164:	mov	r3, #1
   28168:	str	r3, [sp, #24]
   2816c:	b	279ec <__assert_fail@plt+0x1604c>
   28170:	mov	r8, sl
   28174:	ldr	sl, [sp, #52]	; 0x34
   28178:	b	28db4 <__assert_fail@plt+0x17414>
   2817c:	ldrb	r3, [sl, #88]	; 0x58
   28180:	tst	r3, #1
   28184:	beq	28a10 <__assert_fail@plt+0x17070>
   28188:	ldr	r3, [sl, #76]	; 0x4c
   2818c:	cmp	r3, #0
   28190:	ble	28a10 <__assert_fail@plt+0x17070>
   28194:	ldr	r3, [sp, #20]
   28198:	ldr	r3, [r3]
   2819c:	str	r3, [sp, #16]
   281a0:	mov	r3, #0
   281a4:	str	r3, [sp, #124]	; 0x7c
   281a8:	mov	r2, #2
   281ac:	str	r2, [sp, #128]	; 0x80
   281b0:	str	r3, [sp, #132]	; 0x84
   281b4:	str	r3, [sp, #136]	; 0x88
   281b8:	mov	r3, #16
   281bc:	str	r3, [sp, #140]	; 0x8c
   281c0:	add	r3, sp, #148	; 0x94
   281c4:	str	r3, [sp, #144]	; 0x90
   281c8:	mov	r0, #48	; 0x30
   281cc:	bl	1ca68 <__assert_fail@plt+0xb0c8>
   281d0:	str	r0, [sp, #132]	; 0x84
   281d4:	cmp	r0, #0
   281d8:	beq	28a04 <__assert_fail@plt+0x17064>
   281dc:	add	fp, sp, #124	; 0x7c
   281e0:	b	28a44 <__assert_fail@plt+0x170a4>
   281e4:	mov	r3, #8
   281e8:	add	r2, sp, #148	; 0x94
   281ec:	ldr	r1, [sp, #64]	; 0x40
   281f0:	add	r0, sp, #136	; 0x88
   281f4:	bl	2c154 <__assert_fail@plt+0x1a7b4>
   281f8:	cmp	r0, #0
   281fc:	bne	28a74 <__assert_fail@plt+0x170d4>
   28200:	ldr	r0, [sp, #144]	; 0x90
   28204:	add	r3, sp, #148	; 0x94
   28208:	cmp	r0, r3
   2820c:	beq	28214 <__assert_fail@plt+0x16874>
   28210:	bl	1c948 <__assert_fail@plt+0xafa8>
   28214:	add	r3, sp, #148	; 0x94
   28218:	str	r3, [sp, #144]	; 0x90
   2821c:	mov	r3, #0
   28220:	str	r3, [sp, #136]	; 0x88
   28224:	mvn	r3, #0
   28228:	str	r3, [sp, #140]	; 0x8c
   2822c:	add	r0, sp, #136	; 0x88
   28230:	bl	20318 <__assert_fail@plt+0xe978>
   28234:	mov	r0, fp
   28238:	bl	20360 <__assert_fail@plt+0xe9c0>
   2823c:	mov	r3, #12
   28240:	str	r3, [sp, #24]
   28244:	b	279ec <__assert_fail@plt+0x1604c>
   28248:	ldr	r3, [r2, r7, lsl #3]
   2824c:	add	r3, r3, #1
   28250:	ldr	r2, [sp, #64]	; 0x40
   28254:	cmp	r2, r3
   28258:	ble	285d4 <__assert_fail@plt+0x16c34>
   2825c:	ldr	r2, [sp, #468]	; 0x1d4
   28260:	add	r2, r2, r3, lsl #3
   28264:	ldr	r0, [sp, #468]	; 0x1d4
   28268:	str	r1, [r0, r3, lsl #3]
   2826c:	mvn	r3, #0
   28270:	str	r3, [r2, #4]
   28274:	b	285d4 <__assert_fail@plt+0x16c34>
   28278:	ldr	r3, [r2, r0]
   2827c:	add	r3, r3, #1
   28280:	ldr	r2, [sp, #64]	; 0x40
   28284:	cmp	r2, r3
   28288:	ble	285d4 <__assert_fail@plt+0x16c34>
   2828c:	ldr	r2, [sp, #468]	; 0x1d4
   28290:	add	r2, r2, r3, lsl #3
   28294:	ldr	r0, [sp, #468]	; 0x1d4
   28298:	ldr	r0, [r0, r3, lsl #3]
   2829c:	cmp	r1, r0
   282a0:	bgt	282c8 <__assert_fail@plt+0x16928>
   282a4:	ldrb	r0, [ip, #6]
   282a8:	tst	r0, #8
   282ac:	beq	282c0 <__assert_fail@plt+0x16920>
   282b0:	ldr	r0, [sp, #32]
   282b4:	ldr	r3, [r0, r3, lsl #3]
   282b8:	cmn	r3, #1
   282bc:	bne	282e0 <__assert_fail@plt+0x16940>
   282c0:	str	r1, [r2, #4]
   282c4:	b	285d4 <__assert_fail@plt+0x16c34>
   282c8:	str	r1, [r2, #4]
   282cc:	ldr	r2, [sp, #36]	; 0x24
   282d0:	ldr	r1, [sp, #468]	; 0x1d4
   282d4:	ldr	r0, [sp, #32]
   282d8:	bl	115d4 <memcpy@plt>
   282dc:	b	285d4 <__assert_fail@plt+0x16c34>
   282e0:	ldr	r2, [sp, #36]	; 0x24
   282e4:	mov	r1, r0
   282e8:	ldr	r0, [sp, #468]	; 0x1d4
   282ec:	bl	115d4 <memcpy@plt>
   282f0:	b	285d4 <__assert_fail@plt+0x16c34>
   282f4:	ldr	r3, [sp, #372]	; 0x174
   282f8:	cmp	r7, r3
   282fc:	bne	285e8 <__assert_fail@plt+0x16c48>
   28300:	cmp	fp, #0
   28304:	beq	28398 <__assert_fail@plt+0x169f8>
   28308:	ldr	r3, [sp, #24]
   2830c:	b	28314 <__assert_fail@plt+0x16974>
   28310:	ldr	r3, [sp, #24]
   28314:	ldr	r1, [sp, #12]
   28318:	b	28328 <__assert_fail@plt+0x16988>
   2831c:	add	r3, r3, #1
   28320:	cmp	r1, r3
   28324:	beq	28378 <__assert_fail@plt+0x169d8>
   28328:	ldr	r2, [sp, #468]	; 0x1d4
   2832c:	ldr	r2, [r2, r3, lsl #3]
   28330:	cmp	r2, #0
   28334:	blt	2831c <__assert_fail@plt+0x1697c>
   28338:	ldr	r2, [r9, r3, lsl #3]
   2833c:	cmn	r2, #1
   28340:	bne	2831c <__assert_fail@plt+0x1697c>
   28344:	add	r3, sp, #112	; 0x70
   28348:	str	r3, [sp, #4]
   2834c:	ldr	r3, [sp, #32]
   28350:	str	r3, [sp]
   28354:	ldr	r3, [sp, #468]	; 0x1d4
   28358:	ldr	r2, [sp, #12]
   2835c:	add	r1, sp, #108	; 0x6c
   28360:	mov	r0, fp
   28364:	bl	22098 <__assert_fail@plt+0x106f8>
   28368:	subs	r7, r0, #0
   2836c:	bge	28604 <__assert_fail@plt+0x16c64>
   28370:	ldr	sl, [sp, #28]
   28374:	b	2837c <__assert_fail@plt+0x169dc>
   28378:	ldr	sl, [sp, #28]
   2837c:	ldr	r0, [sp, #120]	; 0x78
   28380:	bl	1c948 <__assert_fail@plt+0xafa8>
   28384:	add	r0, sp, #136	; 0x88
   28388:	bl	20318 <__assert_fail@plt+0xe978>
   2838c:	mov	r0, fp
   28390:	bl	20360 <__assert_fail@plt+0xe9c0>
   28394:	b	2883c <__assert_fail@plt+0x16e9c>
   28398:	ldr	sl, [sp, #28]
   2839c:	b	2837c <__assert_fail@plt+0x169dc>
   283a0:	mov	r1, r7
   283a4:	add	r0, sp, #112	; 0x70
   283a8:	bl	20564 <__assert_fail@plt+0xebc4>
   283ac:	cmp	r0, #0
   283b0:	bne	28654 <__assert_fail@plt+0x16cb4>
   283b4:	ldr	sl, [sp, #28]
   283b8:	ldr	r0, [sp, #120]	; 0x78
   283bc:	bl	1c948 <__assert_fail@plt+0xafa8>
   283c0:	add	r0, sp, #136	; 0x88
   283c4:	bl	20318 <__assert_fail@plt+0xe978>
   283c8:	mov	r0, fp
   283cc:	bl	20360 <__assert_fail@plt+0xe9c0>
   283d0:	mov	r3, #12
   283d4:	str	r3, [sp, #24]
   283d8:	b	279ec <__assert_fail@plt+0x1604c>
   283dc:	mov	r1, r7
   283e0:	add	r0, sp, #112	; 0x70
   283e4:	bl	1ccfc <__assert_fail@plt+0xb35c>
   283e8:	cmp	r0, #0
   283ec:	bne	287f8 <__assert_fail@plt+0x16e58>
   283f0:	cmp	fp, #0
   283f4:	beq	2858c <__assert_fail@plt+0x16bec>
   283f8:	ldr	r8, [sp, #108]	; 0x6c
   283fc:	ldr	r4, [fp]
   28400:	add	r3, r4, #1
   28404:	str	r3, [fp]
   28408:	ldr	r1, [fp, #4]
   2840c:	cmp	r3, r1
   28410:	beq	284a8 <__assert_fail@plt+0x16b08>
   28414:	add	r4, r4, r4, lsl #1
   28418:	lsl	r6, r4, #3
   2841c:	ldr	r3, [fp, #8]
   28420:	str	r8, [r3, r4, lsl #3]
   28424:	ldr	r3, [fp, #8]
   28428:	add	r3, r3, r6
   2842c:	str	r5, [r3, #4]
   28430:	ldr	r4, [fp, #8]
   28434:	add	r4, r4, r6
   28438:	ldr	r0, [sp, #40]	; 0x28
   2843c:	bl	1ca68 <__assert_fail@plt+0xb0c8>
   28440:	str	r0, [r4, #8]
   28444:	ldr	r3, [fp, #8]
   28448:	add	r3, r3, r6
   2844c:	ldr	r0, [r3, #8]
   28450:	cmp	r0, #0
   28454:	beq	28810 <__assert_fail@plt+0x16e70>
   28458:	ldr	r4, [sp, #36]	; 0x24
   2845c:	mov	r2, r4
   28460:	ldr	r1, [sp, #468]	; 0x1d4
   28464:	bl	115d4 <memcpy@plt>
   28468:	ldr	r3, [fp, #8]
   2846c:	add	r3, r3, r6
   28470:	ldr	r0, [r3, #8]
   28474:	mov	r2, r4
   28478:	ldr	r1, [sp, #32]
   2847c:	add	r0, r0, r4
   28480:	bl	115d4 <memcpy@plt>
   28484:	ldr	r0, [fp, #8]
   28488:	add	r0, r0, r6
   2848c:	add	r1, sp, #112	; 0x70
   28490:	add	r0, r0, #12
   28494:	bl	1e698 <__assert_fail@plt+0xccf8>
   28498:	cmp	r0, #0
   2849c:	beq	2858c <__assert_fail@plt+0x16bec>
   284a0:	ldr	sl, [sp, #28]
   284a4:	b	283b8 <__assert_fail@plt+0x16a18>
   284a8:	add	r1, r1, r1, lsl #1
   284ac:	lsl	r1, r1, #4
   284b0:	ldr	r0, [fp, #8]
   284b4:	bl	1cb14 <__assert_fail@plt+0xb174>
   284b8:	cmp	r0, #0
   284bc:	beq	28808 <__assert_fail@plt+0x16e68>
   284c0:	ldr	r3, [fp, #4]
   284c4:	lsl	r3, r3, #1
   284c8:	str	r3, [fp, #4]
   284cc:	str	r0, [fp, #8]
   284d0:	b	28414 <__assert_fail@plt+0x16a74>
   284d4:	add	r4, r4, #1
   284d8:	cmp	sl, r4
   284dc:	beq	2858c <__assert_fail@plt+0x16bec>
   284e0:	ldr	r5, [r6, #4]!
   284e4:	mov	r1, r5
   284e8:	mov	r0, r8
   284ec:	bl	1ccfc <__assert_fail@plt+0xb35c>
   284f0:	cmp	r0, #0
   284f4:	beq	284d4 <__assert_fail@plt+0x16b34>
   284f8:	cmn	r7, #1
   284fc:	bne	283dc <__assert_fail@plt+0x16a3c>
   28500:	mov	r7, r5
   28504:	b	284d4 <__assert_fail@plt+0x16b34>
   28508:	ldrb	r3, [r3, #6]
   2850c:	tst	r3, #16
   28510:	bne	28674 <__assert_fail@plt+0x16cd4>
   28514:	cmp	r2, #4
   28518:	beq	286a4 <__assert_fail@plt+0x16d04>
   2851c:	ldr	r5, [sp, #108]	; 0x6c
   28520:	ldr	r1, [r4]
   28524:	mov	r2, r5
   28528:	add	r1, r1, r6
   2852c:	add	r0, sp, #276	; 0x114
   28530:	bl	21008 <__assert_fail@plt+0xf668>
   28534:	cmp	r0, #0
   28538:	beq	28734 <__assert_fail@plt+0x16d94>
   2853c:	ldr	r3, [r4, #12]
   28540:	ldr	r7, [r3, r8, lsl #2]
   28544:	add	r5, r5, #1
   28548:	str	r5, [sp, #108]	; 0x6c
   2854c:	cmp	fp, #0
   28550:	beq	28584 <__assert_fail@plt+0x16be4>
   28554:	ldr	r3, [sp, #368]	; 0x170
   28558:	cmp	r5, r3
   2855c:	bgt	28734 <__assert_fail@plt+0x16d94>
   28560:	ldr	r3, [sp, #376]	; 0x178
   28564:	ldr	r0, [r3, r5, lsl #2]
   28568:	cmp	r0, #0
   2856c:	beq	28734 <__assert_fail@plt+0x16d94>
   28570:	mov	r1, r7
   28574:	add	r0, r0, #4
   28578:	bl	1ccfc <__assert_fail@plt+0xb35c>
   2857c:	cmp	r0, #0
   28580:	beq	28734 <__assert_fail@plt+0x16d94>
   28584:	mov	r3, #0
   28588:	str	r3, [sp, #116]	; 0x74
   2858c:	cmp	r7, #0
   28590:	blt	28738 <__assert_fail@plt+0x16d98>
   28594:	ldr	r1, [sp, #108]	; 0x6c
   28598:	ldr	r3, [sp, #468]	; 0x1d4
   2859c:	ldr	r3, [r3, #4]
   285a0:	cmp	r1, r3
   285a4:	bgt	28820 <__assert_fail@plt+0x16e80>
   285a8:	ldr	r3, [sp, #12]
   285ac:	str	r3, [sp, #20]
   285b0:	lsl	r0, r7, #3
   285b4:	ldr	r3, [sp, #16]
   285b8:	ldr	r2, [r3]
   285bc:	add	ip, r2, r0
   285c0:	ldrb	r3, [ip, #4]
   285c4:	cmp	r3, #8
   285c8:	beq	28248 <__assert_fail@plt+0x168a8>
   285cc:	cmp	r3, #9
   285d0:	beq	28278 <__assert_fail@plt+0x168d8>
   285d4:	ldr	r3, [sp, #468]	; 0x1d4
   285d8:	ldr	r2, [r3, #4]
   285dc:	ldr	r3, [sp, #108]	; 0x6c
   285e0:	cmp	r2, r3
   285e4:	beq	282f4 <__assert_fail@plt+0x16954>
   285e8:	cmp	fp, #0
   285ec:	beq	28604 <__assert_fail@plt+0x16c64>
   285f0:	mov	r1, r7
   285f4:	add	r0, sp, #112	; 0x70
   285f8:	bl	1ccfc <__assert_fail@plt+0xb35c>
   285fc:	cmp	r0, #0
   28600:	bne	28310 <__assert_fail@plt+0x16970>
   28604:	ldr	r4, [sp, #360]	; 0x168
   28608:	mov	r8, r7
   2860c:	lsl	r6, r7, #3
   28610:	ldr	r1, [r4]
   28614:	add	r3, r1, r6
   28618:	ldrb	r2, [r3, #4]
   2861c:	tst	r2, #8
   28620:	beq	28508 <__assert_fail@plt+0x16b68>
   28624:	ldr	r2, [sp, #108]	; 0x6c
   28628:	ldr	r3, [sp, #376]	; 0x178
   2862c:	ldr	r8, [r3, r2, lsl #2]
   28630:	add	r8, r8, #4
   28634:	add	r3, r7, r7, lsl #1
   28638:	ldr	r4, [r4, #20]
   2863c:	add	r4, r4, r3, lsl #2
   28640:	mov	r1, r7
   28644:	add	r0, sp, #112	; 0x70
   28648:	bl	1ccfc <__assert_fail@plt+0xb35c>
   2864c:	cmp	r0, #0
   28650:	beq	283a0 <__assert_fail@plt+0x16a00>
   28654:	ldr	sl, [r4, #4]
   28658:	cmp	sl, #0
   2865c:	ble	28734 <__assert_fail@plt+0x16d94>
   28660:	ldr	r6, [r4, #8]
   28664:	sub	r6, r6, #4
   28668:	ldr	r4, [sp, #24]
   2866c:	mvn	r7, #0
   28670:	b	284e0 <__assert_fail@plt+0x16b40>
   28674:	ldr	r3, [sp, #108]	; 0x6c
   28678:	add	r2, sp, #276	; 0x114
   2867c:	mov	r1, r7
   28680:	mov	r0, r4
   28684:	bl	239a4 <__assert_fail@plt+0x12004>
   28688:	subs	r5, r0, #0
   2868c:	beq	2851c <__assert_fail@plt+0x16b7c>
   28690:	ldr	r3, [r4, #12]
   28694:	ldr	r7, [r3, r8, lsl #2]
   28698:	ldr	r3, [sp, #108]	; 0x6c
   2869c:	add	r5, r5, r3
   286a0:	b	28548 <__assert_fail@plt+0x16ba8>
   286a4:	ldr	r3, [r1, r6]
   286a8:	add	r3, r3, #1
   286ac:	ldr	r2, [sp, #64]	; 0x40
   286b0:	cmp	r2, r3
   286b4:	ble	28794 <__assert_fail@plt+0x16df4>
   286b8:	ldr	r2, [sp, #468]	; 0x1d4
   286bc:	add	r2, r2, r3, lsl #3
   286c0:	ldr	r5, [r2, #4]
   286c4:	ldr	r2, [sp, #468]	; 0x1d4
   286c8:	ldr	r2, [r2, r3, lsl #3]
   286cc:	sub	r5, r5, r2
   286d0:	cmp	fp, #0
   286d4:	beq	287ec <__assert_fail@plt+0x16e4c>
   286d8:	ldr	r2, [sp, #468]	; 0x1d4
   286dc:	add	r2, r2, r3, lsl #3
   286e0:	ldr	r1, [sp, #468]	; 0x1d4
   286e4:	ldr	r0, [r1, r3, lsl #3]
   286e8:	cmn	r0, #1
   286ec:	beq	28734 <__assert_fail@plt+0x16d94>
   286f0:	ldr	r3, [r2, #4]
   286f4:	cmn	r3, #1
   286f8:	beq	28734 <__assert_fail@plt+0x16d94>
   286fc:	cmp	r5, #0
   28700:	beq	287a0 <__assert_fail@plt+0x16e00>
   28704:	ldr	ip, [sp, #280]	; 0x118
   28708:	ldr	r1, [sp, #108]	; 0x6c
   2870c:	ldr	r3, [sp, #304]	; 0x130
   28710:	sub	r3, r3, r1
   28714:	cmp	r5, r3
   28718:	bgt	28734 <__assert_fail@plt+0x16d94>
   2871c:	mov	r2, r5
   28720:	add	r1, ip, r1
   28724:	add	r0, ip, r0
   28728:	bl	1161c <memcmp@plt>
   2872c:	cmp	r0, #0
   28730:	beq	28690 <__assert_fail@plt+0x16cf0>
   28734:	mvn	r7, #0
   28738:	cmn	r7, #2
   2873c:	beq	28800 <__assert_fail@plt+0x16e60>
   28740:	add	r3, sp, #112	; 0x70
   28744:	str	r3, [sp, #4]
   28748:	ldr	r3, [sp, #32]
   2874c:	str	r3, [sp]
   28750:	ldr	r3, [sp, #468]	; 0x1d4
   28754:	ldr	r2, [sp, #20]
   28758:	add	r1, sp, #108	; 0x6c
   2875c:	mov	r0, fp
   28760:	bl	22098 <__assert_fail@plt+0x106f8>
   28764:	subs	r7, r0, #0
   28768:	bge	28594 <__assert_fail@plt+0x16bf4>
   2876c:	ldr	sl, [sp, #28]
   28770:	ldr	r0, [sp, #120]	; 0x78
   28774:	bl	1c948 <__assert_fail@plt+0xafa8>
   28778:	add	r0, sp, #136	; 0x88
   2877c:	bl	20318 <__assert_fail@plt+0xe978>
   28780:	mov	r0, fp
   28784:	bl	20360 <__assert_fail@plt+0xe9c0>
   28788:	mov	r3, #1
   2878c:	str	r3, [sp, #24]
   28790:	b	279ec <__assert_fail@plt+0x1604c>
   28794:	cmp	fp, #0
   28798:	mvnne	r7, #0
   2879c:	bne	2858c <__assert_fail@plt+0x16bec>
   287a0:	mov	r1, r7
   287a4:	add	r0, sp, #112	; 0x70
   287a8:	bl	20564 <__assert_fail@plt+0xebc4>
   287ac:	cmp	r0, #0
   287b0:	beq	28818 <__assert_fail@plt+0x16e78>
   287b4:	ldr	r3, [r4, #20]
   287b8:	add	r2, r8, r8, lsl #1
   287bc:	add	r3, r3, r2, lsl #2
   287c0:	ldr	r3, [r3, #8]
   287c4:	ldr	r7, [r3]
   287c8:	ldr	r2, [sp, #108]	; 0x6c
   287cc:	ldr	r3, [sp, #376]	; 0x178
   287d0:	ldr	r0, [r3, r2, lsl #2]
   287d4:	mov	r1, r7
   287d8:	add	r0, r0, #4
   287dc:	bl	1ccfc <__assert_fail@plt+0xb35c>
   287e0:	cmp	r0, #0
   287e4:	beq	2851c <__assert_fail@plt+0x16b7c>
   287e8:	b	2858c <__assert_fail@plt+0x16bec>
   287ec:	cmp	r5, #0
   287f0:	bne	28690 <__assert_fail@plt+0x16cf0>
   287f4:	b	287a0 <__assert_fail@plt+0x16e00>
   287f8:	mov	r7, r5
   287fc:	b	2858c <__assert_fail@plt+0x16bec>
   28800:	ldr	sl, [sp, #28]
   28804:	b	283b8 <__assert_fail@plt+0x16a18>
   28808:	ldr	sl, [sp, #28]
   2880c:	b	283b8 <__assert_fail@plt+0x16a18>
   28810:	ldr	sl, [sp, #28]
   28814:	b	283b8 <__assert_fail@plt+0x16a18>
   28818:	ldr	sl, [sp, #28]
   2881c:	b	283b8 <__assert_fail@plt+0x16a18>
   28820:	ldr	sl, [sp, #28]
   28824:	ldr	r0, [sp, #120]	; 0x78
   28828:	bl	1c948 <__assert_fail@plt+0xafa8>
   2882c:	add	r0, sp, #136	; 0x88
   28830:	bl	20318 <__assert_fail@plt+0xe978>
   28834:	mov	r0, fp
   28838:	bl	20360 <__assert_fail@plt+0xe9c0>
   2883c:	cmp	r0, #0
   28840:	beq	28e1c <__assert_fail@plt+0x1747c>
   28844:	str	r0, [sp, #24]
   28848:	b	279ec <__assert_fail@plt+0x1604c>
   2884c:	ldr	r0, [r1, #-4]
   28850:	add	r0, r0, ip
   28854:	str	r0, [r1, #-4]
   28858:	ldr	r0, [r1]
   2885c:	add	r0, r0, ip
   28860:	str	r0, [r1]
   28864:	add	r2, r2, #8
   28868:	cmp	r2, lr
   2886c:	beq	288b0 <__assert_fail@plt+0x16f10>
   28870:	mov	r1, r2
   28874:	ldr	r0, [r2, #-4]
   28878:	cmn	r0, #1
   2887c:	beq	28864 <__assert_fail@plt+0x16ec4>
   28880:	cmp	r4, #0
   28884:	beq	2884c <__assert_fail@plt+0x16eac>
   28888:	cmp	r0, r5
   2888c:	ldrne	r0, [r6, r0, lsl #2]
   28890:	moveq	r0, r7
   28894:	str	r0, [r2, #-4]
   28898:	ldr	r0, [r2]
   2889c:	cmp	r5, r0
   288a0:	ldrne	r0, [r6, r0, lsl #2]
   288a4:	moveq	r0, r7
   288a8:	str	r0, [r2]
   288ac:	b	2884c <__assert_fail@plt+0x16eac>
   288b0:	ldr	r2, [sp, #72]	; 0x48
   288b4:	cmp	r2, #0
   288b8:	ble	288e4 <__assert_fail@plt+0x16f44>
   288bc:	ldr	r2, [sp, #468]	; 0x1d4
   288c0:	add	r3, r2, r3
   288c4:	ldr	r1, [sp, #464]	; 0x1d0
   288c8:	add	r1, r2, r1, lsl #3
   288cc:	mvn	r2, #0
   288d0:	str	r2, [r3]
   288d4:	str	r2, [r3, #4]
   288d8:	add	r3, r3, #8
   288dc:	cmp	r3, r1
   288e0:	bne	288d0 <__assert_fail@plt+0x16f30>
   288e4:	ldr	r3, [sl, #132]	; 0x84
   288e8:	cmp	r3, #0
   288ec:	beq	279ec <__assert_fail@plt+0x1604c>
   288f0:	ldr	r3, [sp, #64]	; 0x40
   288f4:	sub	r1, r3, #1
   288f8:	mov	r3, #0
   288fc:	ldr	r2, [sp, #468]	; 0x1d4
   28900:	add	ip, r2, #8
   28904:	add	r0, r2, #12
   28908:	b	28934 <__assert_fail@plt+0x16f94>
   2890c:	add	r2, r2, #1
   28910:	ldr	lr, [sp, #468]	; 0x1d4
   28914:	ldr	r2, [lr, r2, lsl #3]
   28918:	str	r2, [ip, r3, lsl #3]
   2891c:	ldr	r2, [sl, #132]	; 0x84
   28920:	ldr	r2, [r2, r3, lsl #2]
   28924:	add	r2, lr, r2, lsl #3
   28928:	ldr	r2, [r2, #12]
   2892c:	str	r2, [r0, r3, lsl #3]
   28930:	add	r3, r3, #1
   28934:	cmp	r3, r1
   28938:	beq	279ec <__assert_fail@plt+0x1604c>
   2893c:	ldr	r2, [sl, #132]	; 0x84
   28940:	ldr	r2, [r2, r3, lsl #2]
   28944:	cmp	r3, r2
   28948:	bne	2890c <__assert_fail@plt+0x16f6c>
   2894c:	b	28930 <__assert_fail@plt+0x16f90>
   28950:	ldr	r3, [sp, #76]	; 0x4c
   28954:	str	r3, [sp, #24]
   28958:	b	279ec <__assert_fail@plt+0x1604c>
   2895c:	mov	r3, #12
   28960:	str	r3, [sp, #24]
   28964:	b	279ec <__assert_fail@plt+0x1604c>
   28968:	mov	r3, #12
   2896c:	str	r3, [sp, #24]
   28970:	b	279ec <__assert_fail@plt+0x1604c>
   28974:	mov	r3, #1
   28978:	str	r3, [sp, #24]
   2897c:	b	279ec <__assert_fail@plt+0x1604c>
   28980:	ldr	sl, [sp, #52]	; 0x34
   28984:	mov	r3, #12
   28988:	str	r3, [sp, #24]
   2898c:	b	279ec <__assert_fail@plt+0x1604c>
   28990:	ldr	sl, [sp, #52]	; 0x34
   28994:	b	279ec <__assert_fail@plt+0x1604c>
   28998:	ldr	sl, [sp, #52]	; 0x34
   2899c:	b	279ec <__assert_fail@plt+0x1604c>
   289a0:	add	r0, sp, #276	; 0x114
   289a4:	bl	20250 <__assert_fail@plt+0xe8b0>
   289a8:	ldr	r0, [sp, #408]	; 0x198
   289ac:	bl	1c948 <__assert_fail@plt+0xafa8>
   289b0:	ldr	r0, [sp, #392]	; 0x188
   289b4:	bl	1c948 <__assert_fail@plt+0xafa8>
   289b8:	b	27a00 <__assert_fail@plt+0x16060>
   289bc:	mov	r3, #1
   289c0:	str	r3, [sp, #24]
   289c4:	b	27a08 <__assert_fail@plt+0x16068>
   289c8:	mov	r3, #1
   289cc:	str	r3, [sp, #24]
   289d0:	b	27a08 <__assert_fail@plt+0x16068>
   289d4:	mov	r3, #1
   289d8:	str	r3, [sp, #24]
   289dc:	b	27a08 <__assert_fail@plt+0x16068>
   289e0:	mov	r3, #1
   289e4:	str	r3, [sp, #24]
   289e8:	b	27a08 <__assert_fail@plt+0x16068>
   289ec:	mov	r3, #1
   289f0:	str	r3, [sp, #24]
   289f4:	b	27a08 <__assert_fail@plt+0x16068>
   289f8:	mov	r3, #1
   289fc:	str	r3, [sp, #24]
   28a00:	b	27a08 <__assert_fail@plt+0x16068>
   28a04:	mov	r3, #12
   28a08:	str	r3, [sp, #24]
   28a0c:	b	279ec <__assert_fail@plt+0x1604c>
   28a10:	ldr	r3, [sp, #20]
   28a14:	ldr	r3, [r3]
   28a18:	str	r3, [sp, #16]
   28a1c:	mov	fp, #0
   28a20:	str	fp, [sp, #124]	; 0x7c
   28a24:	mov	r3, #2
   28a28:	str	r3, [sp, #128]	; 0x80
   28a2c:	str	fp, [sp, #132]	; 0x84
   28a30:	str	fp, [sp, #136]	; 0x88
   28a34:	mov	r3, #16
   28a38:	str	r3, [sp, #140]	; 0x8c
   28a3c:	add	r3, sp, #148	; 0x94
   28a40:	str	r3, [sp, #144]	; 0x90
   28a44:	ldr	r3, [sp, #16]
   28a48:	ldr	r7, [r3, #72]	; 0x48
   28a4c:	mov	r3, #0
   28a50:	str	r3, [sp, #112]	; 0x70
   28a54:	str	r3, [sp, #116]	; 0x74
   28a58:	str	r3, [sp, #120]	; 0x78
   28a5c:	ldr	r3, [sp, #136]	; 0x88
   28a60:	ldr	r2, [sp, #64]	; 0x40
   28a64:	cmp	r2, r3
   28a68:	bhi	281e4 <__assert_fail@plt+0x16844>
   28a6c:	ldr	r3, [sp, #64]	; 0x40
   28a70:	str	r3, [sp, #136]	; 0x88
   28a74:	ldr	r3, [sp, #144]	; 0x90
   28a78:	str	r3, [sp, #32]
   28a7c:	ldr	r2, [sp, #36]	; 0x24
   28a80:	ldr	r1, [sp, #468]	; 0x1d4
   28a84:	mov	r0, r3
   28a88:	bl	115d4 <memcpy@plt>
   28a8c:	ldr	r9, [sp, #468]	; 0x1d4
   28a90:	ldr	r3, [r9], #4
   28a94:	str	r3, [sp, #108]	; 0x6c
   28a98:	ldr	r3, [sp, #64]	; 0x40
   28a9c:	lsl	r2, r3, #4
   28aa0:	str	r2, [sp, #40]	; 0x28
   28aa4:	str	r3, [sp, #12]
   28aa8:	str	sl, [sp, #28]
   28aac:	b	28594 <__assert_fail@plt+0x16bf4>
   28ab0:	mov	r3, #0
   28ab4:	ldr	r2, [sp, #468]	; 0x1d4
   28ab8:	str	r3, [r2]
   28abc:	ldr	r3, [sp, #368]	; 0x170
   28ac0:	str	r3, [r2, #4]
   28ac4:	b	28e1c <__assert_fail@plt+0x1747c>
   28ac8:	ldr	sl, [sp, #52]	; 0x34
   28acc:	mov	r3, #12
   28ad0:	str	r3, [sp, #24]
   28ad4:	b	279ec <__assert_fail@plt+0x1604c>
   28ad8:	ldr	sl, [sp, #52]	; 0x34
   28adc:	mov	r3, #12
   28ae0:	str	r3, [sp, #24]
   28ae4:	b	279ec <__assert_fail@plt+0x1604c>
   28ae8:	mov	r3, #0
   28aec:	str	r3, [sp, #112]	; 0x70
   28af0:	b	28028 <__assert_fail@plt+0x16688>
   28af4:	mov	r3, #12
   28af8:	str	r3, [sp, #24]
   28afc:	b	279ec <__assert_fail@plt+0x1604c>
   28b00:	ldr	r3, [sp, #44]	; 0x2c
   28b04:	str	r3, [sp, #280]	; 0x118
   28b08:	ldr	r3, [sl, #92]	; 0x5c
   28b0c:	ldr	r2, [sp, #60]	; 0x3c
   28b10:	ldr	r1, [sp, #76]	; 0x4c
   28b14:	cmp	r3, #1
   28b18:	movgt	r2, r1
   28b1c:	mov	r3, r2
   28b20:	b	275fc <__assert_fail@plt+0x15c5c>
   28b24:	mov	r0, r4
   28b28:	bl	1c948 <__assert_fail@plt+0xafa8>
   28b2c:	mov	r0, r5
   28b30:	bl	1c948 <__assert_fail@plt+0xafa8>
   28b34:	b	28b54 <__assert_fail@plt+0x171b4>
   28b38:	mov	r5, #0
   28b3c:	mov	r0, r4
   28b40:	bl	1c948 <__assert_fail@plt+0xafa8>
   28b44:	mov	r0, r5
   28b48:	bl	1c948 <__assert_fail@plt+0xafa8>
   28b4c:	cmp	r8, #1
   28b50:	bne	28bbc <__assert_fail@plt+0x1721c>
   28b54:	add	r0, sp, #276	; 0x114
   28b58:	bl	20250 <__assert_fail@plt+0xe8b0>
   28b5c:	ldr	r3, [sp, #412]	; 0x19c
   28b60:	ldr	r2, [sp, #92]	; 0x5c
   28b64:	add	r3, r2, r3
   28b68:	str	r3, [sp, #412]	; 0x19c
   28b6c:	ldr	r2, [sp, #48]	; 0x30
   28b70:	cmp	r3, r2
   28b74:	movle	r2, #0
   28b78:	movgt	r2, #1
   28b7c:	ldr	r1, [sp, #56]	; 0x38
   28b80:	cmp	r3, r1
   28b84:	movge	r3, r2
   28b88:	orrlt	r3, r2, #1
   28b8c:	cmp	r3, #0
   28b90:	bne	28160 <__assert_fail@plt+0x167c0>
   28b94:	ldr	r3, [sp, #80]	; 0x50
   28b98:	sub	r3, r3, #4
   28b9c:	cmp	r3, #4
   28ba0:	ldrls	pc, [pc, r3, lsl #2]
   28ba4:	b	277f4 <__assert_fail@plt+0x15e54>
   28ba8:	andeq	r7, r2, ip, ror r9
   28bac:	andeq	r7, r2, ip, ror r9
   28bb0:	andeq	r7, r2, r4, lsl r9
   28bb4:	muleq	r2, ip, r8
   28bb8:	andeq	r7, r2, ip, asr #20
   28bbc:	mov	r3, r8
   28bc0:	ldr	sl, [sp, #52]	; 0x34
   28bc4:	str	r3, [sp, #24]
   28bc8:	b	279ec <__assert_fail@plt+0x1604c>
   28bcc:	ldr	sl, [sp, #52]	; 0x34
   28bd0:	mov	r0, r4
   28bd4:	bl	1c948 <__assert_fail@plt+0xafa8>
   28bd8:	mov	r0, #0
   28bdc:	bl	1c948 <__assert_fail@plt+0xafa8>
   28be0:	mov	r3, #12
   28be4:	b	28bc4 <__assert_fail@plt+0x17224>
   28be8:	mov	r2, fp
   28bec:	ldr	r3, [sp, #376]	; 0x178
   28bf0:	ldr	r1, [r3, fp, lsl #2]
   28bf4:	add	r0, sp, #276	; 0x114
   28bf8:	bl	21fa4 <__assert_fail@plt+0x10604>
   28bfc:	str	r0, [sp, #372]	; 0x174
   28c00:	ldr	r3, [sp, #52]	; 0x34
   28c04:	ldrb	r3, [r3, #88]	; 0x58
   28c08:	tst	r3, #1
   28c0c:	bne	28c3c <__assert_fail@plt+0x1729c>
   28c10:	b	28c2c <__assert_fail@plt+0x1728c>
   28c14:	mov	r2, fp
   28c18:	ldr	r3, [sp, #376]	; 0x178
   28c1c:	ldr	r1, [r3, fp, lsl #2]
   28c20:	add	r0, sp, #276	; 0x114
   28c24:	bl	21fa4 <__assert_fail@plt+0x10604>
   28c28:	str	r0, [sp, #372]	; 0x174
   28c2c:	ldr	r3, [sp, #52]	; 0x34
   28c30:	ldr	r3, [r3, #76]	; 0x4c
   28c34:	cmp	r3, #0
   28c38:	beq	28170 <__assert_fail@plt+0x167d0>
   28c3c:	ldr	r9, [sp, #360]	; 0x168
   28c40:	ldr	r7, [sp, #372]	; 0x174
   28c44:	cmn	fp, #-1073741822	; 0xc0000002
   28c48:	bhi	28ac8 <__assert_fail@plt+0x17128>
   28c4c:	add	r5, fp, #1
   28c50:	lsl	r5, r5, #2
   28c54:	mov	r0, r5
   28c58:	bl	1ca68 <__assert_fail@plt+0xb0c8>
   28c5c:	subs	r4, r0, #0
   28c60:	beq	28bcc <__assert_fail@plt+0x1722c>
   28c64:	ldr	r3, [r9, #76]	; 0x4c
   28c68:	cmp	r3, #0
   28c6c:	beq	280e4 <__assert_fail@plt+0x16744>
   28c70:	mov	r0, r5
   28c74:	bl	1ca68 <__assert_fail@plt+0xb0c8>
   28c78:	subs	r5, r0, #0
   28c7c:	beq	28bcc <__assert_fail@plt+0x1722c>
   28c80:	mov	r6, #0
   28c84:	str	sl, [sp, #12]
   28c88:	str	r9, [sp, #28]
   28c8c:	add	sl, fp, #1
   28c90:	lsl	r9, sl, #2
   28c94:	mov	r2, r9
   28c98:	mov	r1, r6
   28c9c:	mov	r0, r5
   28ca0:	bl	11814 <memset@plt>
   28ca4:	str	r4, [sp, #136]	; 0x88
   28ca8:	str	r5, [sp, #140]	; 0x8c
   28cac:	str	r7, [sp, #144]	; 0x90
   28cb0:	str	fp, [sp, #148]	; 0x94
   28cb4:	str	r6, [sp, #152]	; 0x98
   28cb8:	str	r6, [sp, #156]	; 0x9c
   28cbc:	str	r6, [sp, #160]	; 0xa0
   28cc0:	add	r1, sp, #136	; 0x88
   28cc4:	add	r0, sp, #276	; 0x114
   28cc8:	bl	27110 <__assert_fail@plt+0x15770>
   28ccc:	mov	r8, r0
   28cd0:	ldr	r0, [sp, #160]	; 0xa0
   28cd4:	bl	1c948 <__assert_fail@plt+0xafa8>
   28cd8:	cmp	r8, #0
   28cdc:	bne	28b3c <__assert_fail@plt+0x1719c>
   28ce0:	ldr	r3, [r4]
   28ce4:	cmp	r3, #0
   28ce8:	bne	280ac <__assert_fail@plt+0x1670c>
   28cec:	ldr	r3, [r5]
   28cf0:	cmp	r3, #0
   28cf4:	bne	280ac <__assert_fail@plt+0x1670c>
   28cf8:	sub	r9, r9, #4
   28cfc:	ldr	r3, [sp, #376]	; 0x178
   28d00:	add	r9, r3, r9
   28d04:	subs	fp, fp, #1
   28d08:	bmi	28b24 <__assert_fail@plt+0x17184>
   28d0c:	ldr	r1, [r9, #-4]!
   28d10:	cmp	r1, #0
   28d14:	beq	28d04 <__assert_fail@plt+0x17364>
   28d18:	ldrb	r3, [r1, #52]	; 0x34
   28d1c:	tst	r3, #16
   28d20:	beq	28d04 <__assert_fail@plt+0x17364>
   28d24:	mov	r2, fp
   28d28:	add	r0, sp, #276	; 0x114
   28d2c:	bl	21fa4 <__assert_fail@plt+0x10604>
   28d30:	mov	r7, r0
   28d34:	b	28c8c <__assert_fail@plt+0x172ec>
   28d38:	ldr	r3, [sp, #112]	; 0x70
   28d3c:	cmp	r3, #0
   28d40:	bne	28e48 <__assert_fail@plt+0x174a8>
   28d44:	ldr	r2, [sp, #28]
   28d48:	cmp	r2, #0
   28d4c:	beq	28d60 <__assert_fail@plt+0x173c0>
   28d50:	ldr	r3, [r2]
   28d54:	ldr	r1, [sp, #36]	; 0x24
   28d58:	add	r3, r3, r1
   28d5c:	str	r3, [r2]
   28d60:	cmn	fp, #1
   28d64:	beq	28b54 <__assert_fail@plt+0x171b4>
   28d68:	cmn	fp, #2
   28d6c:	beq	28980 <__assert_fail@plt+0x16fe0>
   28d70:	str	fp, [sp, #368]	; 0x170
   28d74:	ldr	r3, [sp, #64]	; 0x40
   28d78:	cmp	r3, #1
   28d7c:	movls	sl, #0
   28d80:	movhi	sl, #1
   28d84:	ldr	r3, [sp, #20]
   28d88:	ldrb	r3, [r3, #28]
   28d8c:	eor	r3, r3, #16
   28d90:	ubfx	r3, r3, #4, #1
   28d94:	tst	sl, r3
   28d98:	bne	28be8 <__assert_fail@plt+0x17248>
   28d9c:	ldr	r2, [sp, #52]	; 0x34
   28da0:	ldr	r3, [r2, #76]	; 0x4c
   28da4:	cmp	r3, #0
   28da8:	bne	28c14 <__assert_fail@plt+0x17274>
   28dac:	mov	r8, sl
   28db0:	mov	sl, r2
   28db4:	ldr	r2, [sp, #64]	; 0x40
   28db8:	cmp	r2, #0
   28dbc:	beq	279ec <__assert_fail@plt+0x1604c>
   28dc0:	cmp	r2, #1
   28dc4:	bls	28ab0 <__assert_fail@plt+0x17110>
   28dc8:	ldr	r3, [sp, #468]	; 0x1d4
   28dcc:	lsl	r2, r2, #3
   28dd0:	str	r2, [sp, #36]	; 0x24
   28dd4:	sub	r1, r3, #8
   28dd8:	add	r1, r1, r2
   28ddc:	mvn	r2, #0
   28de0:	str	r2, [r3, #12]
   28de4:	str	r2, [r3, #8]!
   28de8:	cmp	r3, r1
   28dec:	bne	28de0 <__assert_fail@plt+0x17440>
   28df0:	mov	r3, #0
   28df4:	ldr	r2, [sp, #468]	; 0x1d4
   28df8:	str	r3, [r2]
   28dfc:	ldr	r3, [sp, #368]	; 0x170
   28e00:	str	r3, [r2, #4]
   28e04:	ldr	r3, [sp, #20]
   28e08:	ldrb	r3, [r3, #28]
   28e0c:	eor	r3, r3, #16
   28e10:	ubfx	r3, r3, #4, #1
   28e14:	tst	r8, r3
   28e18:	bne	2817c <__assert_fail@plt+0x167dc>
   28e1c:	ldrb	r4, [sp, #352]	; 0x160
   28e20:	ldr	r5, [sp, #304]	; 0x130
   28e24:	ldr	r6, [sp, #288]	; 0x120
   28e28:	ldr	ip, [sp, #412]	; 0x19c
   28e2c:	ldr	r3, [sp, #468]	; 0x1d4
   28e30:	add	r2, r3, #4
   28e34:	ldr	r3, [sp, #64]	; 0x40
   28e38:	lsl	r3, r3, #3
   28e3c:	add	lr, r2, r3
   28e40:	ldr	r7, [sp, #308]	; 0x134
   28e44:	b	28870 <__assert_fail@plt+0x16ed0>
   28e48:	ldr	sl, [sp, #52]	; 0x34
   28e4c:	b	28adc <__assert_fail@plt+0x1713c>
   28e50:	strd	r4, [sp, #-36]!	; 0xffffffdc
   28e54:	strd	r6, [sp, #8]
   28e58:	strd	r8, [sp, #16]
   28e5c:	strd	sl, [sp, #24]
   28e60:	str	lr, [sp, #32]
   28e64:	sub	sp, sp, #132	; 0x84
   28e68:	mov	r5, r0
   28e6c:	mov	fp, r1
   28e70:	mov	r6, r2
   28e74:	mov	r9, r3
   28e78:	mov	r2, #0
   28e7c:	str	r2, [sp, #124]	; 0x7c
   28e80:	ldrb	r3, [r0, #28]
   28e84:	str	r9, [r0, #12]
   28e88:	str	r2, [r0, #8]
   28e8c:	str	r2, [r0, #24]
   28e90:	and	r3, r3, #150	; 0x96
   28e94:	bfi	r3, r2, #1, #2
   28e98:	strb	r3, [r0, #28]
   28e9c:	ldr	r4, [r0]
   28ea0:	ldr	r3, [r0, #4]
   28ea4:	cmp	r3, #159	; 0x9f
   28ea8:	bls	2916c <__assert_fail@plt+0x177cc>
   28eac:	mov	r2, #160	; 0xa0
   28eb0:	str	r2, [r5, #8]
   28eb4:	mov	r1, #0
   28eb8:	mov	r0, r4
   28ebc:	bl	11814 <memset@plt>
   28ec0:	mov	r3, #31
   28ec4:	str	r3, [r4, #64]	; 0x40
   28ec8:	movw	r3, #43689	; 0xaaa9
   28ecc:	movt	r3, #2730	; 0xaaa
   28ed0:	cmp	r6, r3
   28ed4:	bhi	29aa4 <__assert_fail@plt+0x18104>
   28ed8:	add	r0, r6, #1
   28edc:	str	r0, [r4, #4]
   28ee0:	lsl	r0, r0, #3
   28ee4:	bl	1ca68 <__assert_fail@plt+0xb0c8>
   28ee8:	str	r0, [r4]
   28eec:	cmp	r6, #0
   28ef0:	beq	29190 <__assert_fail@plt+0x177f0>
   28ef4:	mov	r7, #1
   28ef8:	lsl	r7, r7, #1
   28efc:	cmp	r6, r7
   28f00:	bcs	28ef8 <__assert_fail@plt+0x17558>
   28f04:	mov	r1, r7
   28f08:	mov	r0, #12
   28f0c:	bl	1c5f8 <__assert_fail@plt+0xac58>
   28f10:	str	r0, [r4, #32]
   28f14:	sub	r7, r7, #1
   28f18:	str	r7, [r4, #68]	; 0x44
   28f1c:	bl	116a0 <__ctype_get_mb_cur_max@plt>
   28f20:	str	r0, [r4, #92]	; 0x5c
   28f24:	mov	r0, #14
   28f28:	bl	118b0 <nl_langinfo@plt>
   28f2c:	ldrb	r3, [r0]
   28f30:	and	r3, r3, #223	; 0xdf
   28f34:	cmp	r3, #85	; 0x55
   28f38:	bne	28f90 <__assert_fail@plt+0x175f0>
   28f3c:	ldrb	r3, [r0, #1]
   28f40:	and	r3, r3, #223	; 0xdf
   28f44:	cmp	r3, #84	; 0x54
   28f48:	bne	28f90 <__assert_fail@plt+0x175f0>
   28f4c:	ldrb	r3, [r0, #2]
   28f50:	and	r3, r3, #223	; 0xdf
   28f54:	cmp	r3, #70	; 0x46
   28f58:	bne	28f90 <__assert_fail@plt+0x175f0>
   28f5c:	ldrb	r3, [r0, #3]
   28f60:	cmp	r3, #45	; 0x2d
   28f64:	moveq	r3, #4
   28f68:	movne	r3, #3
   28f6c:	movw	r1, #58476	; 0xe46c
   28f70:	movt	r1, #2
   28f74:	add	r0, r0, r3
   28f78:	bl	11544 <strcmp@plt>
   28f7c:	cmp	r0, #0
   28f80:	bne	28f90 <__assert_fail@plt+0x175f0>
   28f84:	ldrb	r3, [r4, #88]	; 0x58
   28f88:	orr	r3, r3, #4
   28f8c:	strb	r3, [r4, #88]	; 0x58
   28f90:	ldrb	r3, [r4, #88]	; 0x58
   28f94:	bfc	r3, #3, #1
   28f98:	strb	r3, [r4, #88]	; 0x58
   28f9c:	ldr	r3, [r4, #92]	; 0x5c
   28fa0:	cmp	r3, #1
   28fa4:	ble	28fc0 <__assert_fail@plt+0x17620>
   28fa8:	ldrb	r3, [r4, #88]	; 0x58
   28fac:	tst	r3, #4
   28fb0:	beq	29198 <__assert_fail@plt+0x177f8>
   28fb4:	movw	r3, #57900	; 0xe22c
   28fb8:	movt	r3, #2
   28fbc:	str	r3, [r4, #60]	; 0x3c
   28fc0:	ldr	r3, [r4]
   28fc4:	cmp	r3, #0
   28fc8:	beq	29aa4 <__assert_fail@plt+0x18104>
   28fcc:	ldr	r3, [r4, #32]
   28fd0:	cmp	r3, #0
   28fd4:	beq	29aa4 <__assert_fail@plt+0x18104>
   28fd8:	mov	r3, #0
   28fdc:	str	r3, [sp, #124]	; 0x7c
   28fe0:	movw	r3, #0
   28fe4:	movt	r3, #0
   28fe8:	cmp	r3, #0
   28fec:	movne	r3, #1
   28ff0:	moveq	r3, #0
   28ff4:	mov	r2, r3
   28ff8:	movw	r3, #0
   28ffc:	movt	r3, #0
   29000:	cmp	r3, #0
   29004:	movne	r3, #1
   29008:	moveq	r3, #0
   2900c:	orr	r3, r2, r3
   29010:	ands	r3, r3, #255	; 0xff
   29014:	str	r3, [sp, #16]
   29018:	beq	29044 <__assert_fail@plt+0x176a4>
   2901c:	mov	r1, #0
   29020:	add	r0, r4, #136	; 0x88
   29024:	bl	115e0 <pthread_mutex_init@plt>
   29028:	cmp	r0, #0
   2902c:	movne	r3, #12
   29030:	strne	r3, [sp, #124]	; 0x7c
   29034:	bne	29aac <__assert_fail@plt+0x1810c>
   29038:	ldr	r3, [sp, #124]	; 0x7c
   2903c:	cmp	r3, #0
   29040:	bne	29aac <__assert_fail@plt+0x1810c>
   29044:	str	r6, [sp, #12]
   29048:	ldr	r8, [r5, #20]
   2904c:	and	r7, r9, #4194304	; 0x400000
   29050:	orr	sl, r8, r7
   29054:	mov	r2, #76	; 0x4c
   29058:	mov	r1, #0
   2905c:	add	r0, sp, #44	; 0x2c
   29060:	bl	11814 <memset@plt>
   29064:	str	fp, [sp, #40]	; 0x28
   29068:	str	r6, [sp, #88]	; 0x58
   2906c:	str	r6, [sp, #84]	; 0x54
   29070:	str	r8, [sp, #104]	; 0x68
   29074:	adds	r3, r7, #0
   29078:	movne	r3, #1
   2907c:	strb	r3, [sp, #112]	; 0x70
   29080:	adds	r3, sl, #0
   29084:	movne	r3, #1
   29088:	strb	r3, [sp, #115]	; 0x73
   2908c:	ldr	r3, [r4, #92]	; 0x5c
   29090:	str	r3, [sp, #120]	; 0x78
   29094:	ldrb	r3, [r4, #88]	; 0x58
   29098:	ubfx	r2, r3, #2, #1
   2909c:	strb	r2, [sp, #113]	; 0x71
   290a0:	ubfx	r3, r3, #3, #1
   290a4:	strb	r3, [sp, #114]	; 0x72
   290a8:	str	r6, [sp, #96]	; 0x60
   290ac:	str	r6, [sp, #92]	; 0x5c
   290b0:	cmp	r6, #0
   290b4:	bgt	29224 <__assert_fail@plt+0x17884>
   290b8:	ldrb	r3, [sp, #115]	; 0x73
   290bc:	cmp	r3, #0
   290c0:	ldrne	fp, [sp, #44]	; 0x2c
   290c4:	str	fp, [sp, #44]	; 0x2c
   290c8:	cmp	r7, #0
   290cc:	beq	29248 <__assert_fail@plt+0x178a8>
   290d0:	ldr	r3, [r4, #92]	; 0x5c
   290d4:	cmp	r3, #1
   290d8:	ble	2923c <__assert_fail@plt+0x1789c>
   290dc:	ldr	r6, [sp, #12]
   290e0:	add	r0, sp, #40	; 0x28
   290e4:	bl	1e114 <__assert_fail@plt+0xc774>
   290e8:	cmp	r0, #0
   290ec:	bne	29128 <__assert_fail@plt+0x17788>
   290f0:	ldr	r3, [sp, #72]	; 0x48
   290f4:	cmp	r6, r3
   290f8:	ble	29270 <__assert_fail@plt+0x178d0>
   290fc:	ldr	r1, [sp, #76]	; 0x4c
   29100:	ldr	r2, [r4, #92]	; 0x5c
   29104:	ldr	r3, [sp, #68]	; 0x44
   29108:	add	r3, r3, r2
   2910c:	cmp	r1, r3
   29110:	bgt	29270 <__assert_fail@plt+0x178d0>
   29114:	lsl	r1, r1, #1
   29118:	add	r0, sp, #40	; 0x28
   2911c:	bl	1d8b0 <__assert_fail@plt+0xbf10>
   29120:	cmp	r0, #0
   29124:	beq	290e0 <__assert_fail@plt+0x17740>
   29128:	str	r0, [sp, #124]	; 0x7c
   2912c:	mov	r0, r5
   29130:	bl	1fe30 <__assert_fail@plt+0xe490>
   29134:	add	r0, sp, #40	; 0x28
   29138:	bl	1fe90 <__assert_fail@plt+0xe4f0>
   2913c:	ldr	r3, [sp, #16]
   29140:	cmp	r3, #0
   29144:	beq	29150 <__assert_fail@plt+0x177b0>
   29148:	add	r0, r4, #136	; 0x88
   2914c:	bl	1155c <pthread_mutex_destroy@plt>
   29150:	mov	r0, r4
   29154:	bl	1fed0 <__assert_fail@plt+0xe530>
   29158:	mov	r3, #0
   2915c:	str	r3, [r5]
   29160:	str	r3, [r5, #4]
   29164:	ldr	r0, [sp, #124]	; 0x7c
   29168:	b	299a8 <__assert_fail@plt+0x18008>
   2916c:	mov	r1, #160	; 0xa0
   29170:	mov	r0, r4
   29174:	bl	1cb14 <__assert_fail@plt+0xb174>
   29178:	subs	r4, r0, #0
   2917c:	beq	29a5c <__assert_fail@plt+0x180bc>
   29180:	mov	r3, #160	; 0xa0
   29184:	str	r3, [r5, #4]
   29188:	str	r4, [r5]
   2918c:	b	28eac <__assert_fail@plt+0x1750c>
   29190:	mov	r7, #1
   29194:	b	28f04 <__assert_fail@plt+0x17564>
   29198:	mov	r1, #1
   2919c:	mov	r0, #32
   291a0:	bl	1c5f8 <__assert_fail@plt+0xac58>
   291a4:	str	r0, [r4, #60]	; 0x3c
   291a8:	cmp	r0, #0
   291ac:	beq	29aa4 <__assert_fail@plt+0x18104>
   291b0:	mov	r7, #0
   291b4:	b	29218 <__assert_fail@plt+0x17878>
   291b8:	ldrb	r3, [r4, #88]	; 0x58
   291bc:	orr	r3, r3, #8
   291c0:	strb	r3, [r4, #88]	; 0x58
   291c4:	add	sl, sl, #1
   291c8:	add	r8, r8, #1
   291cc:	cmp	sl, #32
   291d0:	beq	2920c <__assert_fail@plt+0x1786c>
   291d4:	mov	r0, r8
   291d8:	bl	1182c <btowc@plt>
   291dc:	cmn	r0, #1
   291e0:	beq	291f8 <__assert_fail@plt+0x17858>
   291e4:	ldr	r2, [r4, #60]	; 0x3c
   291e8:	ldr	r3, [r2, r7]
   291ec:	mov	r1, #1
   291f0:	orr	r3, r3, r1, lsl sl
   291f4:	str	r3, [r2, r7]
   291f8:	bics	r3, r8, #127	; 0x7f
   291fc:	bne	291c4 <__assert_fail@plt+0x17824>
   29200:	cmp	r0, r8
   29204:	bne	291b8 <__assert_fail@plt+0x17818>
   29208:	b	291c4 <__assert_fail@plt+0x17824>
   2920c:	add	r7, r7, #4
   29210:	cmp	r7, #32
   29214:	beq	28fc0 <__assert_fail@plt+0x17620>
   29218:	lsl	r8, r7, #3
   2921c:	mov	sl, #0
   29220:	b	291d4 <__assert_fail@plt+0x17834>
   29224:	add	r1, r6, #1
   29228:	add	r0, sp, #40	; 0x28
   2922c:	bl	1d8b0 <__assert_fail@plt+0xbf10>
   29230:	cmp	r0, #0
   29234:	beq	290b8 <__assert_fail@plt+0x17718>
   29238:	b	29128 <__assert_fail@plt+0x17788>
   2923c:	add	r0, sp, #40	; 0x28
   29240:	bl	1ea98 <__assert_fail@plt+0xd0f8>
   29244:	b	29270 <__assert_fail@plt+0x178d0>
   29248:	ldr	r3, [r4, #92]	; 0x5c
   2924c:	cmp	r3, #1
   29250:	bgt	29268 <__assert_fail@plt+0x178c8>
   29254:	cmp	sl, #0
   29258:	beq	294a4 <__assert_fail@plt+0x17b04>
   2925c:	add	r0, sp, #40	; 0x28
   29260:	bl	1cc38 <__assert_fail@plt+0xb298>
   29264:	b	29270 <__assert_fail@plt+0x178d0>
   29268:	add	r0, sp, #40	; 0x28
   2926c:	bl	1df7c <__assert_fail@plt+0xc5dc>
   29270:	mov	r8, #0
   29274:	str	r8, [sp, #124]	; 0x7c
   29278:	str	r8, [r5, #24]
   2927c:	ldr	r6, [r5]
   29280:	str	r9, [r6, #128]	; 0x80
   29284:	orr	r2, r9, #8388608	; 0x800000
   29288:	add	r1, sp, #40	; 0x28
   2928c:	add	r0, sp, #28
   29290:	bl	1f5f4 <__assert_fail@plt+0xdc54>
   29294:	add	r3, sp, #124	; 0x7c
   29298:	str	r3, [sp, #4]
   2929c:	str	r8, [sp]
   292a0:	mov	r3, r9
   292a4:	add	r2, sp, #28
   292a8:	mov	r1, r5
   292ac:	add	r0, sp, #40	; 0x28
   292b0:	bl	252dc <__assert_fail@plt+0x1393c>
   292b4:	mov	r8, r0
   292b8:	clz	r0, r0
   292bc:	lsr	r0, r0, #5
   292c0:	ldr	r3, [sp, #124]	; 0x7c
   292c4:	cmp	r3, #0
   292c8:	moveq	r0, #0
   292cc:	cmp	r0, #0
   292d0:	bne	29a98 <__assert_fail@plt+0x180f8>
   292d4:	mov	r3, #2
   292d8:	mov	r2, #0
   292dc:	mov	r1, r2
   292e0:	mov	r0, r6
   292e4:	bl	1db8c <__assert_fail@plt+0xc1ec>
   292e8:	mov	r9, r0
   292ec:	cmp	r8, #0
   292f0:	beq	29308 <__assert_fail@plt+0x17968>
   292f4:	mov	r3, #16
   292f8:	mov	r2, r9
   292fc:	mov	r1, r8
   29300:	mov	r0, r6
   29304:	bl	1db8c <__assert_fail@plt+0xc1ec>
   29308:	cmp	r0, #0
   2930c:	cmpne	r9, #0
   29310:	moveq	r3, #12
   29314:	streq	r3, [sp, #124]	; 0x7c
   29318:	beq	29a98 <__assert_fail@plt+0x180f8>
   2931c:	str	r0, [r4, #52]	; 0x34
   29320:	ldr	r6, [r5]
   29324:	ldr	r0, [r6, #4]
   29328:	lsl	r0, r0, #2
   2932c:	bl	1ca68 <__assert_fail@plt+0xb0c8>
   29330:	str	r0, [r6, #12]
   29334:	ldr	r0, [r6, #4]
   29338:	lsl	r0, r0, #2
   2933c:	bl	1ca68 <__assert_fail@plt+0xb0c8>
   29340:	str	r0, [r6, #16]
   29344:	ldr	r0, [r6, #4]
   29348:	add	r0, r0, r0, lsl #1
   2934c:	lsl	r0, r0, #2
   29350:	bl	1ca68 <__assert_fail@plt+0xb0c8>
   29354:	str	r0, [r6, #20]
   29358:	ldr	r0, [r6, #4]
   2935c:	add	r0, r0, r0, lsl #1
   29360:	lsl	r0, r0, #2
   29364:	bl	1ca68 <__assert_fail@plt+0xb0c8>
   29368:	str	r0, [r6, #24]
   2936c:	ldr	r3, [r6, #12]
   29370:	cmp	r3, #0
   29374:	beq	29a90 <__assert_fail@plt+0x180f0>
   29378:	ldr	r3, [r6, #16]
   2937c:	cmp	r3, #0
   29380:	beq	29a64 <__assert_fail@plt+0x180c4>
   29384:	ldr	r3, [r6, #20]
   29388:	clz	sl, r0
   2938c:	lsr	sl, sl, #5
   29390:	cmp	r3, #0
   29394:	moveq	sl, #1
   29398:	cmp	sl, #0
   2939c:	bne	29a6c <__assert_fail@plt+0x180cc>
   293a0:	ldr	r0, [r5, #24]
   293a4:	lsl	r0, r0, #2
   293a8:	bl	1ca68 <__assert_fail@plt+0xb0c8>
   293ac:	str	r0, [r6, #132]	; 0x84
   293b0:	cmp	r0, #0
   293b4:	beq	2942c <__assert_fail@plt+0x17a8c>
   293b8:	ldr	r3, [r5, #24]
   293bc:	cmp	r3, #0
   293c0:	beq	293e0 <__assert_fail@plt+0x17a40>
   293c4:	mov	r3, #0
   293c8:	ldr	r2, [r6, #132]	; 0x84
   293cc:	str	r3, [r2, r3, lsl #2]
   293d0:	add	r3, r3, #1
   293d4:	ldr	r2, [r5, #24]
   293d8:	cmp	r2, r3
   293dc:	bhi	293c8 <__assert_fail@plt+0x17a28>
   293e0:	mov	r2, r6
   293e4:	movw	r1, #52980	; 0xcef4
   293e8:	movt	r1, #1
   293ec:	ldr	r0, [r6, #52]	; 0x34
   293f0:	bl	1ce78 <__assert_fail@plt+0xb4d8>
   293f4:	ldr	ip, [r5, #24]
   293f8:	cmp	ip, #0
   293fc:	beq	294bc <__assert_fail@plt+0x17b1c>
   29400:	ldr	r2, [r6, #132]	; 0x84
   29404:	ldr	r3, [r2]
   29408:	cmp	r3, #0
   2940c:	bne	2942c <__assert_fail@plt+0x17a8c>
   29410:	mov	r0, ip
   29414:	add	r3, r3, #1
   29418:	cmp	r0, r3
   2941c:	beq	294b4 <__assert_fail@plt+0x17b14>
   29420:	ldr	r1, [r2, #4]!
   29424:	cmp	r1, r3
   29428:	beq	29414 <__assert_fail@plt+0x17a74>
   2942c:	mov	r2, r5
   29430:	movw	r1, #56620	; 0xdd2c
   29434:	movt	r1, #1
   29438:	ldr	r0, [r6, #52]	; 0x34
   2943c:	bl	1cde4 <__assert_fail@plt+0xb444>
   29440:	cmp	r0, #0
   29444:	bne	29a88 <__assert_fail@plt+0x180e8>
   29448:	mov	r2, r6
   2944c:	movw	r1, #63896	; 0xf998
   29450:	movt	r1, #1
   29454:	ldr	r0, [r6, #52]	; 0x34
   29458:	bl	1cde4 <__assert_fail@plt+0xb444>
   2945c:	cmp	r0, #0
   29460:	bne	29a88 <__assert_fail@plt+0x180e8>
   29464:	mov	r2, r6
   29468:	movw	r1, #53140	; 0xcf94
   2946c:	movt	r1, #1
   29470:	ldr	r0, [r6, #52]	; 0x34
   29474:	bl	1ce78 <__assert_fail@plt+0xb4d8>
   29478:	mov	r2, r6
   2947c:	movw	r1, #984	; 0x3d8
   29480:	movt	r1, #2
   29484:	ldr	r0, [r6, #52]	; 0x34
   29488:	bl	1ce78 <__assert_fail@plt+0xb4d8>
   2948c:	subs	r3, r0, #0
   29490:	str	r3, [sp, #12]
   29494:	bne	29a74 <__assert_fail@plt+0x180d4>
   29498:	mov	r8, sl
   2949c:	mov	r9, r3
   294a0:	b	29500 <__assert_fail@plt+0x17b60>
   294a4:	ldr	r3, [sp, #76]	; 0x4c
   294a8:	str	r3, [sp, #68]	; 0x44
   294ac:	str	r3, [sp, #72]	; 0x48
   294b0:	b	29270 <__assert_fail@plt+0x178d0>
   294b4:	cmp	r3, ip
   294b8:	bne	2942c <__assert_fail@plt+0x17a8c>
   294bc:	ldr	r0, [r6, #132]	; 0x84
   294c0:	bl	1c948 <__assert_fail@plt+0xafa8>
   294c4:	mov	r3, #0
   294c8:	str	r3, [r6, #132]	; 0x84
   294cc:	b	2942c <__assert_fail@plt+0x17a8c>
   294d0:	cmp	r8, #0
   294d4:	beq	29550 <__assert_fail@plt+0x17bb0>
   294d8:	mov	r8, sl
   294dc:	ldr	r9, [sp, #12]
   294e0:	b	29500 <__assert_fail@plt+0x17b60>
   294e4:	ldr	r0, [sp, #36]	; 0x24
   294e8:	bl	1c948 <__assert_fail@plt+0xafa8>
   294ec:	mov	r8, #1
   294f0:	add	r9, r9, #1
   294f4:	ldr	r3, [r6, #8]
   294f8:	cmp	r3, r9
   294fc:	beq	294d0 <__assert_fail@plt+0x17b30>
   29500:	add	fp, r9, r9, lsl #1
   29504:	lsl	fp, fp, #2
   29508:	ldr	r3, [r6, #24]
   2950c:	add	r3, r3, fp
   29510:	ldr	r3, [r3, #4]
   29514:	cmp	r3, #0
   29518:	bne	294f0 <__assert_fail@plt+0x17b50>
   2951c:	mov	r3, #1
   29520:	mov	r2, r9
   29524:	mov	r1, r6
   29528:	add	r0, sp, #28
   2952c:	bl	20cac <__assert_fail@plt+0xf30c>
   29530:	cmp	r0, #0
   29534:	bne	29a88 <__assert_fail@plt+0x180e8>
   29538:	ldr	r3, [r6, #24]
   2953c:	add	fp, r3, fp
   29540:	ldr	r3, [fp, #4]
   29544:	cmp	r3, #0
   29548:	bne	294f0 <__assert_fail@plt+0x17b50>
   2954c:	b	294e4 <__assert_fail@plt+0x17b44>
   29550:	ldrb	r3, [r5, #28]
   29554:	tst	r3, #16
   29558:	beq	296c4 <__assert_fail@plt+0x17d24>
   2955c:	ldr	r3, [r6, #76]	; 0x4c
   29560:	cmp	r3, #0
   29564:	beq	2964c <__assert_fail@plt+0x17cac>
   29568:	ldr	r0, [r6, #8]
   2956c:	add	r0, r0, r0, lsl #1
   29570:	lsl	r0, r0, #2
   29574:	bl	1ca68 <__assert_fail@plt+0xb0c8>
   29578:	str	r0, [r6, #28]
   2957c:	cmp	r0, #0
   29580:	beq	29a7c <__assert_fail@plt+0x180dc>
   29584:	ldr	r3, [r6, #8]
   29588:	cmp	r3, #0
   2958c:	beq	2964c <__assert_fail@plt+0x17cac>
   29590:	ldr	r1, [sp, #12]
   29594:	mov	r3, #0
   29598:	mov	r2, r3
   2959c:	ldr	ip, [r6, #28]
   295a0:	add	r0, ip, r3
   295a4:	str	r2, [ip, r3]
   295a8:	str	r2, [r0, #4]
   295ac:	str	r2, [r0, #8]
   295b0:	add	r1, r1, #1
   295b4:	ldr	r0, [r6, #8]
   295b8:	add	r3, r3, #12
   295bc:	cmp	r0, r1
   295c0:	bhi	2959c <__assert_fail@plt+0x17bfc>
   295c4:	cmp	r0, #0
   295c8:	beq	2964c <__assert_fail@plt+0x17cac>
   295cc:	ldr	r3, [sp, #12]
   295d0:	mov	fp, #0
   295d4:	str	r7, [sp, #20]
   295d8:	mov	r7, r3
   295dc:	ldr	r3, [r6, #24]
   295e0:	add	r3, r3, fp
   295e4:	ldr	sl, [r3, #8]
   295e8:	ldr	r3, [r3, #4]
   295ec:	cmp	r3, #0
   295f0:	ble	29634 <__assert_fail@plt+0x17c94>
   295f4:	sub	sl, sl, #4
   295f8:	ldr	r9, [sp, #12]
   295fc:	ldr	r0, [sl, #4]!
   29600:	add	r0, r0, r0, lsl #1
   29604:	ldr	r3, [r6, #28]
   29608:	mov	r1, r7
   2960c:	add	r0, r3, r0, lsl #2
   29610:	bl	1d974 <__assert_fail@plt+0xbfd4>
   29614:	cmp	r0, #0
   29618:	beq	29a84 <__assert_fail@plt+0x180e4>
   2961c:	add	r9, r9, #1
   29620:	ldr	r3, [r6, #24]
   29624:	add	r3, r3, fp
   29628:	ldr	r3, [r3, #4]
   2962c:	cmp	r9, r3
   29630:	blt	295fc <__assert_fail@plt+0x17c5c>
   29634:	add	r7, r7, #1
   29638:	add	fp, fp, #12
   2963c:	ldr	r3, [r6, #8]
   29640:	cmp	r7, r3
   29644:	bcc	295dc <__assert_fail@plt+0x17c3c>
   29648:	ldr	r7, [sp, #20]
   2964c:	mov	r3, #0
   29650:	str	r3, [sp, #124]	; 0x7c
   29654:	ldrb	r3, [r4, #88]	; 0x58
   29658:	ubfx	r3, r3, #2, #1
   2965c:	cmp	r7, #0
   29660:	moveq	r7, r3
   29664:	movne	r7, #0
   29668:	cmp	r7, #0
   2966c:	bne	296e0 <__assert_fail@plt+0x17d40>
   29670:	ldr	r3, [r4, #52]	; 0x34
   29674:	ldr	r3, [r3, #12]
   29678:	ldr	r1, [r3, #28]
   2967c:	str	r1, [r4, #72]	; 0x48
   29680:	add	r1, r1, r1, lsl #1
   29684:	ldr	r3, [r4, #24]
   29688:	add	r1, r3, r1, lsl #2
   2968c:	add	r0, sp, #28
   29690:	bl	1e698 <__assert_fail@plt+0xccf8>
   29694:	mov	r7, r0
   29698:	str	r0, [sp, #24]
   2969c:	cmp	r0, #0
   296a0:	bne	29984 <__assert_fail@plt+0x17fe4>
   296a4:	ldr	r3, [r4, #76]	; 0x4c
   296a8:	cmp	r3, #0
   296ac:	ble	29940 <__assert_fail@plt+0x17fa0>
   296b0:	ldr	r0, [sp, #32]
   296b4:	cmp	r0, #0
   296b8:	ble	29940 <__assert_fail@plt+0x17fa0>
   296bc:	mov	r6, r7
   296c0:	b	298e4 <__assert_fail@plt+0x17f44>
   296c4:	ldr	r3, [r5, #24]
   296c8:	cmp	r3, #0
   296cc:	beq	2955c <__assert_fail@plt+0x17bbc>
   296d0:	ldrb	r3, [r6, #88]	; 0x58
   296d4:	tst	r3, #1
   296d8:	bne	29568 <__assert_fail@plt+0x17bc8>
   296dc:	b	2955c <__assert_fail@plt+0x17bbc>
   296e0:	ldr	r3, [r5, #20]
   296e4:	cmp	r3, #0
   296e8:	bne	29670 <__assert_fail@plt+0x17cd0>
   296ec:	ldr	r0, [r4, #8]
   296f0:	cmp	r0, #0
   296f4:	beq	29848 <__assert_fail@plt+0x17ea8>
   296f8:	ldr	r2, [r4]
   296fc:	mov	ip, r8
   29700:	ldr	r1, [sp, #12]
   29704:	mov	lr, r7
   29708:	b	29768 <__assert_fail@plt+0x17dc8>
   2970c:	mov	ip, lr
   29710:	b	29758 <__assert_fail@plt+0x17db8>
   29714:	ldr	r3, [r2]
   29718:	ldr	r6, [r3, #16]
   2971c:	cmp	r6, #0
   29720:	bne	29670 <__assert_fail@plt+0x17cd0>
   29724:	ldr	r6, [r3, #20]
   29728:	cmp	r6, #0
   2972c:	bne	29670 <__assert_fail@plt+0x17cd0>
   29730:	ldr	r6, [r3, #24]
   29734:	cmp	r6, #0
   29738:	bne	29670 <__assert_fail@plt+0x17cd0>
   2973c:	ldr	r3, [r3, #28]
   29740:	cmp	r3, #0
   29744:	beq	29758 <__assert_fail@plt+0x17db8>
   29748:	b	29670 <__assert_fail@plt+0x17cd0>
   2974c:	ldrsb	r3, [r2]
   29750:	cmp	r3, #0
   29754:	movlt	r8, r7
   29758:	add	r1, r1, #1
   2975c:	add	r2, r2, #8
   29760:	cmp	r0, r1
   29764:	beq	297e0 <__assert_fail@plt+0x17e40>
   29768:	ldrb	r3, [r2, #4]
   2976c:	sub	r3, r3, #1
   29770:	cmp	r3, #11
   29774:	ldrls	pc, [pc, r3, lsl #2]
   29778:	b	297dc <__assert_fail@plt+0x17e3c>
   2977c:	andeq	r9, r2, ip, asr #14
   29780:	andeq	r9, r2, r8, asr r7
   29784:	andeq	r9, r2, r4, lsl r7
   29788:	andeq	r9, r2, r8, asr r7
   2978c:	andeq	r9, r2, ip, lsl #14
   29790:	andeq	r9, r2, r0, ror r6
   29794:	ldrdeq	r9, [r2], -ip
   29798:	andeq	r9, r2, r8, asr r7
   2979c:	andeq	r9, r2, r8, asr r7
   297a0:	andeq	r9, r2, r8, asr r7
   297a4:	andeq	r9, r2, r8, asr r7
   297a8:	andeq	r9, r2, ip, lsr #15
   297ac:	ldr	r3, [r2]
   297b0:	cmp	r3, #32
   297b4:	beq	29758 <__assert_fail@plt+0x17db8>
   297b8:	bls	297d0 <__assert_fail@plt+0x17e30>
   297bc:	cmp	r3, #64	; 0x40
   297c0:	beq	29758 <__assert_fail@plt+0x17db8>
   297c4:	cmp	r3, #128	; 0x80
   297c8:	beq	29758 <__assert_fail@plt+0x17db8>
   297cc:	b	29670 <__assert_fail@plt+0x17cd0>
   297d0:	cmp	r3, #16
   297d4:	beq	29758 <__assert_fail@plt+0x17db8>
   297d8:	b	29670 <__assert_fail@plt+0x17cd0>
   297dc:	bl	11964 <abort@plt>
   297e0:	orr	r8, r8, ip
   297e4:	tst	r8, #255	; 0xff
   297e8:	beq	2984c <__assert_fail@plt+0x17eac>
   297ec:	mov	lr, #7
   297f0:	ldr	r3, [sp, #12]
   297f4:	b	29814 <__assert_fail@plt+0x17e74>
   297f8:	ldrsb	r2, [r6, r0]
   297fc:	cmp	r2, #0
   29800:	blt	29838 <__assert_fail@plt+0x17e98>
   29804:	add	r3, r3, #1
   29808:	ldr	r2, [r4, #8]
   2980c:	cmp	r3, r2
   29810:	bcs	2984c <__assert_fail@plt+0x17eac>
   29814:	lsl	r0, r3, #3
   29818:	ldr	r6, [r4]
   2981c:	add	r1, r6, r0
   29820:	ldrb	r2, [r1, #4]
   29824:	cmp	r2, #1
   29828:	beq	297f8 <__assert_fail@plt+0x17e58>
   2982c:	cmp	r2, #5
   29830:	strbeq	lr, [r1, #4]
   29834:	b	29804 <__assert_fail@plt+0x17e64>
   29838:	ldrb	r2, [r1, #6]
   2983c:	bfc	r2, #5, #1
   29840:	strb	r2, [r1, #6]
   29844:	b	29804 <__assert_fail@plt+0x17e64>
   29848:	mov	ip, r8
   2984c:	mov	r3, #1
   29850:	str	r3, [r4, #92]	; 0x5c
   29854:	ldrb	r3, [r4, #88]	; 0x58
   29858:	ldr	r2, [r4, #76]	; 0x4c
   2985c:	cmp	r2, #0
   29860:	orrgt	ip, ip, #1
   29864:	and	r3, r3, #251	; 0xfb
   29868:	bfi	r3, ip, #1, #1
   2986c:	strb	r3, [r4, #88]	; 0x58
   29870:	b	29670 <__assert_fail@plt+0x17cd0>
   29874:	add	r1, r1, #1
   29878:	cmp	r0, r1
   2987c:	beq	298d4 <__assert_fail@plt+0x17f34>
   29880:	ldr	r8, [r2, #4]!
   29884:	add	r9, ip, r8, lsl #3
   29888:	ldrb	r9, [r9, #4]
   2988c:	cmp	r9, #9
   29890:	bne	29874 <__assert_fail@plt+0x17ed4>
   29894:	ldr	r9, [ip, r8, lsl #3]
   29898:	ldr	r8, [lr]
   2989c:	cmp	r9, r8
   298a0:	bne	29874 <__assert_fail@plt+0x17ed4>
   298a4:	cmp	r0, r1
   298a8:	beq	298d4 <__assert_fail@plt+0x17f34>
   298ac:	ldr	r2, [r4, #20]
   298b0:	add	r3, r3, r3, lsl #1
   298b4:	add	r3, r2, r3, lsl #2
   298b8:	ldr	r3, [r3, #8]
   298bc:	ldr	r8, [r3]
   298c0:	mov	r1, r8
   298c4:	add	r0, sp, #28
   298c8:	bl	1ccfc <__assert_fail@plt+0xb35c>
   298cc:	cmp	r0, #0
   298d0:	beq	2991c <__assert_fail@plt+0x17f7c>
   298d4:	add	r6, r6, #1
   298d8:	ldr	r0, [sp, #32]
   298dc:	cmp	r0, r6
   298e0:	ble	29940 <__assert_fail@plt+0x17fa0>
   298e4:	ldr	r2, [sp, #36]	; 0x24
   298e8:	ldr	ip, [r4]
   298ec:	ldr	r3, [r2, r6, lsl #2]
   298f0:	add	lr, ip, r3, lsl #3
   298f4:	ldrb	r1, [lr, #4]
   298f8:	cmp	r1, #4
   298fc:	bne	298d4 <__assert_fail@plt+0x17f34>
   29900:	cmp	r0, #0
   29904:	ble	29914 <__assert_fail@plt+0x17f74>
   29908:	sub	r2, r2, #4
   2990c:	mov	r1, r7
   29910:	b	29880 <__assert_fail@plt+0x17ee0>
   29914:	mov	r1, r7
   29918:	b	298a4 <__assert_fail@plt+0x17f04>
   2991c:	add	r8, r8, r8, lsl #1
   29920:	ldr	r1, [r4, #24]
   29924:	add	r1, r1, r8, lsl #2
   29928:	add	r0, sp, #28
   2992c:	bl	20afc <__assert_fail@plt+0xf15c>
   29930:	subs	r6, r0, #0
   29934:	beq	298d4 <__assert_fail@plt+0x17f34>
   29938:	mov	r7, r6
   2993c:	b	29984 <__assert_fail@plt+0x17fe4>
   29940:	mov	r3, #0
   29944:	add	r2, sp, #28
   29948:	mov	r1, r4
   2994c:	add	r0, sp, #24
   29950:	bl	1fb44 <__assert_fail@plt+0xe1a4>
   29954:	str	r0, [r4, #36]	; 0x24
   29958:	cmp	r0, #0
   2995c:	ldreq	r7, [sp, #24]
   29960:	beq	29984 <__assert_fail@plt+0x17fe4>
   29964:	ldrsb	r3, [r0, #52]	; 0x34
   29968:	cmp	r3, #0
   2996c:	strge	r0, [r4, #48]	; 0x30
   29970:	strge	r0, [r4, #44]	; 0x2c
   29974:	strge	r0, [r4, #40]	; 0x28
   29978:	blt	299c4 <__assert_fail@plt+0x18024>
   2997c:	ldr	r0, [sp, #36]	; 0x24
   29980:	bl	1c948 <__assert_fail@plt+0xafa8>
   29984:	str	r7, [sp, #124]	; 0x7c
   29988:	mov	r0, r5
   2998c:	bl	1fe30 <__assert_fail@plt+0xe490>
   29990:	add	r0, sp, #40	; 0x28
   29994:	bl	1fe90 <__assert_fail@plt+0xe4f0>
   29998:	ldr	r3, [sp, #124]	; 0x7c
   2999c:	cmp	r3, #0
   299a0:	bne	29a30 <__assert_fail@plt+0x18090>
   299a4:	ldr	r0, [sp, #124]	; 0x7c
   299a8:	add	sp, sp, #132	; 0x84
   299ac:	ldrd	r4, [sp]
   299b0:	ldrd	r6, [sp, #8]
   299b4:	ldrd	r8, [sp, #16]
   299b8:	ldrd	sl, [sp, #24]
   299bc:	add	sp, sp, #32
   299c0:	pop	{pc}		; (ldr pc, [sp], #4)
   299c4:	mov	r3, #1
   299c8:	add	r2, sp, #28
   299cc:	mov	r1, r4
   299d0:	add	r0, sp, #24
   299d4:	bl	1fb44 <__assert_fail@plt+0xe1a4>
   299d8:	str	r0, [r4, #40]	; 0x28
   299dc:	mov	r3, #2
   299e0:	add	r2, sp, #28
   299e4:	mov	r1, r4
   299e8:	add	r0, sp, #24
   299ec:	bl	1fb44 <__assert_fail@plt+0xe1a4>
   299f0:	str	r0, [r4, #44]	; 0x2c
   299f4:	mov	r3, #6
   299f8:	add	r2, sp, #28
   299fc:	mov	r1, r4
   29a00:	add	r0, sp, #24
   29a04:	bl	1fb44 <__assert_fail@plt+0xe1a4>
   29a08:	str	r0, [r4, #48]	; 0x30
   29a0c:	ldr	r3, [r4, #40]	; 0x28
   29a10:	cmp	r3, #0
   29a14:	beq	29a28 <__assert_fail@plt+0x18088>
   29a18:	ldr	r3, [r4, #44]	; 0x2c
   29a1c:	cmp	r0, #0
   29a20:	cmpne	r3, #0
   29a24:	bne	2997c <__assert_fail@plt+0x17fdc>
   29a28:	ldr	r7, [sp, #24]
   29a2c:	b	29984 <__assert_fail@plt+0x17fe4>
   29a30:	ldr	r3, [sp, #16]
   29a34:	cmp	r3, #0
   29a38:	beq	29a44 <__assert_fail@plt+0x180a4>
   29a3c:	add	r0, r4, #136	; 0x88
   29a40:	bl	1155c <pthread_mutex_destroy@plt>
   29a44:	mov	r0, r4
   29a48:	bl	1fed0 <__assert_fail@plt+0xe530>
   29a4c:	mov	r3, #0
   29a50:	str	r3, [r5]
   29a54:	str	r3, [r5, #4]
   29a58:	b	299a4 <__assert_fail@plt+0x18004>
   29a5c:	mov	r0, #12
   29a60:	b	299a8 <__assert_fail@plt+0x18008>
   29a64:	mov	r0, #12
   29a68:	b	29a88 <__assert_fail@plt+0x180e8>
   29a6c:	mov	r0, #12
   29a70:	b	29a88 <__assert_fail@plt+0x180e8>
   29a74:	ldr	r0, [sp, #12]
   29a78:	b	29a88 <__assert_fail@plt+0x180e8>
   29a7c:	mov	r0, #12
   29a80:	b	29a88 <__assert_fail@plt+0x180e8>
   29a84:	mov	r0, #12
   29a88:	str	r0, [sp, #124]	; 0x7c
   29a8c:	b	2912c <__assert_fail@plt+0x1778c>
   29a90:	mov	r0, #12
   29a94:	b	29a88 <__assert_fail@plt+0x180e8>
   29a98:	mov	r3, #0
   29a9c:	str	r3, [r4, #52]	; 0x34
   29aa0:	b	2912c <__assert_fail@plt+0x1778c>
   29aa4:	mov	r3, #12
   29aa8:	str	r3, [sp, #124]	; 0x7c
   29aac:	mov	r0, r4
   29ab0:	bl	1fed0 <__assert_fail@plt+0xe530>
   29ab4:	mov	r3, #0
   29ab8:	str	r3, [r5]
   29abc:	str	r3, [r5, #4]
   29ac0:	ldr	r0, [sp, #124]	; 0x7c
   29ac4:	b	299a8 <__assert_fail@plt+0x18008>
   29ac8:	str	r4, [sp, #-8]!
   29acc:	str	lr, [sp, #4]
   29ad0:	mov	ip, r2
   29ad4:	movw	r3, #62420	; 0xf3d4
   29ad8:	movt	r3, #3
   29adc:	ldr	r3, [r3]
   29ae0:	ubfx	lr, r3, #25, #1
   29ae4:	ldrb	r2, [r2, #28]
   29ae8:	bfi	r2, lr, #4, #1
   29aec:	mvn	r2, r2, lsl #25
   29af0:	mvn	r2, r2, lsr #25
   29af4:	strb	r2, [ip, #28]
   29af8:	mov	r2, r1
   29afc:	mov	r1, r0
   29b00:	mov	r0, ip
   29b04:	bl	28e50 <__assert_fail@plt+0x174b0>
   29b08:	cmp	r0, #0
   29b0c:	moveq	r0, #0
   29b10:	beq	29b38 <__assert_fail@plt+0x18198>
   29b14:	movw	r3, #57900	; 0xe22c
   29b18:	movt	r3, #2
   29b1c:	add	r1, r3, #32
   29b20:	add	r3, r3, r0, lsl #2
   29b24:	ldr	r3, [r3, #416]	; 0x1a0
   29b28:	mov	r2, #5
   29b2c:	add	r1, r1, r3
   29b30:	mov	r0, #0
   29b34:	bl	11628 <dcgettext@plt>
   29b38:	ldr	r4, [sp]
   29b3c:	add	sp, sp, #4
   29b40:	pop	{pc}		; (ldr pc, [sp], #4)
   29b44:	movw	r3, #62420	; 0xf3d4
   29b48:	movt	r3, #3
   29b4c:	ldr	r2, [r3]
   29b50:	str	r0, [r3]
   29b54:	mov	r0, r2
   29b58:	bx	lr
   29b5c:	strd	r4, [sp, #-16]!
   29b60:	str	r6, [sp, #8]
   29b64:	str	lr, [sp, #12]
   29b68:	mov	r5, r0
   29b6c:	ldr	r4, [r0]
   29b70:	ldr	r6, [r0, #16]
   29b74:	mov	r2, #256	; 0x100
   29b78:	mov	r1, #0
   29b7c:	mov	r0, r6
   29b80:	bl	11814 <memset@plt>
   29b84:	mov	r2, r6
   29b88:	ldr	r1, [r4, #36]	; 0x24
   29b8c:	mov	r0, r5
   29b90:	bl	22e28 <__assert_fail@plt+0x11488>
   29b94:	ldr	r1, [r4, #40]	; 0x28
   29b98:	ldr	r3, [r4, #36]	; 0x24
   29b9c:	cmp	r3, r1
   29ba0:	beq	29bb0 <__assert_fail@plt+0x18210>
   29ba4:	mov	r2, r6
   29ba8:	mov	r0, r5
   29bac:	bl	22e28 <__assert_fail@plt+0x11488>
   29bb0:	ldr	r1, [r4, #44]	; 0x2c
   29bb4:	ldr	r3, [r4, #36]	; 0x24
   29bb8:	cmp	r3, r1
   29bbc:	beq	29bcc <__assert_fail@plt+0x1822c>
   29bc0:	mov	r2, r6
   29bc4:	mov	r0, r5
   29bc8:	bl	22e28 <__assert_fail@plt+0x11488>
   29bcc:	ldr	r1, [r4, #48]	; 0x30
   29bd0:	ldr	r3, [r4, #36]	; 0x24
   29bd4:	cmp	r3, r1
   29bd8:	beq	29be8 <__assert_fail@plt+0x18248>
   29bdc:	mov	r2, r6
   29be0:	mov	r0, r5
   29be4:	bl	22e28 <__assert_fail@plt+0x11488>
   29be8:	ldrb	r3, [r5, #28]
   29bec:	orr	r3, r3, #8
   29bf0:	strb	r3, [r5, #28]
   29bf4:	mov	r0, #0
   29bf8:	ldrd	r4, [sp]
   29bfc:	ldr	r6, [sp, #8]
   29c00:	add	sp, sp, #12
   29c04:	pop	{pc}		; (ldr pc, [sp], #4)
   29c08:	strd	r4, [sp, #-36]!	; 0xffffffdc
   29c0c:	strd	r6, [sp, #8]
   29c10:	strd	r8, [sp, #16]
   29c14:	strd	sl, [sp, #24]
   29c18:	str	lr, [sp, #32]
   29c1c:	sub	sp, sp, #52	; 0x34
   29c20:	ldr	ip, [sp, #88]	; 0x58
   29c24:	ldr	r7, [sp, #96]	; 0x60
   29c28:	ldr	r9, [r0]
   29c2c:	add	r8, r3, ip
   29c30:	cmp	r3, r2
   29c34:	movle	lr, #0
   29c38:	movgt	lr, #1
   29c3c:	orrs	lr, lr, r3, lsr #31
   29c40:	bne	29fa4 <__assert_fail@plt+0x18604>
   29c44:	mov	r5, r3
   29c48:	str	r2, [sp, #32]
   29c4c:	str	r1, [sp, #36]	; 0x24
   29c50:	mov	r6, r0
   29c54:	cmp	r8, r2
   29c58:	bgt	29db0 <__assert_fail@plt+0x18410>
   29c5c:	cmp	ip, #0
   29c60:	cmpge	r3, r8
   29c64:	bgt	29db8 <__assert_fail@plt+0x18418>
   29c68:	cmp	r8, #0
   29c6c:	blt	29fb4 <__assert_fail@plt+0x18614>
   29c70:	cmp	r3, r8
   29c74:	movgt	r3, #0
   29c78:	movle	r3, #1
   29c7c:	ands	r3, r3, ip, lsr #31
   29c80:	bne	29fb4 <__assert_fail@plt+0x18614>
   29c84:	movw	r3, #0
   29c88:	movt	r3, #0
   29c8c:	cmp	r3, #0
   29c90:	movne	r3, #1
   29c94:	moveq	r3, #0
   29c98:	mov	r2, r3
   29c9c:	movw	r3, #0
   29ca0:	movt	r3, #0
   29ca4:	cmp	r3, #0
   29ca8:	movne	r3, #1
   29cac:	moveq	r3, #0
   29cb0:	orr	r3, r2, r3
   29cb4:	ands	r3, r3, #255	; 0xff
   29cb8:	str	r3, [sp, #28]
   29cbc:	beq	29cd0 <__assert_fail@plt+0x18330>
   29cc0:	add	r0, r9, #136	; 0x88
   29cc4:	bl	115a4 <pthread_mutex_lock@plt>
   29cc8:	mov	r3, #1
   29ccc:	str	r3, [sp, #28]
   29cd0:	ldrb	r3, [r6, #28]
   29cd4:	ubfx	fp, r3, #5, #2
   29cd8:	cmp	r8, r5
   29cdc:	ble	29cf4 <__assert_fail@plt+0x18354>
   29ce0:	ldr	r2, [r6, #16]
   29ce4:	cmp	r2, #0
   29ce8:	beq	29cf4 <__assert_fail@plt+0x18354>
   29cec:	tst	r3, #8
   29cf0:	beq	29dc0 <__assert_fail@plt+0x18420>
   29cf4:	ldrb	r3, [r6, #28]
   29cf8:	tst	r3, #16
   29cfc:	bne	29df0 <__assert_fail@plt+0x18450>
   29d00:	cmp	r7, #0
   29d04:	moveq	r4, #1
   29d08:	beq	29d20 <__assert_fail@plt+0x18380>
   29d0c:	and	r3, r3, #6
   29d10:	cmp	r3, #4
   29d14:	beq	29dcc <__assert_fail@plt+0x1842c>
   29d18:	ldr	r4, [r6, #24]
   29d1c:	add	r4, r4, #1
   29d20:	str	r4, [sp, #40]	; 0x28
   29d24:	lsl	r0, r4, #3
   29d28:	bl	1ca68 <__assert_fail@plt+0xb0c8>
   29d2c:	subs	sl, r0, #0
   29d30:	beq	29f9c <__assert_fail@plt+0x185fc>
   29d34:	str	fp, [sp, #16]
   29d38:	str	sl, [sp, #12]
   29d3c:	str	r4, [sp, #8]
   29d40:	ldr	r3, [sp, #92]	; 0x5c
   29d44:	str	r3, [sp, #4]
   29d48:	str	r8, [sp]
   29d4c:	mov	r3, r5
   29d50:	ldr	r2, [sp, #32]
   29d54:	ldr	r1, [sp, #36]	; 0x24
   29d58:	mov	r0, r6
   29d5c:	bl	273f8 <__assert_fail@plt+0x15a58>
   29d60:	subs	r8, r0, #0
   29d64:	beq	29dfc <__assert_fail@plt+0x1845c>
   29d68:	cmp	r8, #1
   29d6c:	mvneq	r5, #0
   29d70:	mvnne	r5, #1
   29d74:	mov	r0, sl
   29d78:	bl	1c948 <__assert_fail@plt+0xafa8>
   29d7c:	ldr	r3, [sp, #28]
   29d80:	cmp	r3, #0
   29d84:	beq	29d90 <__assert_fail@plt+0x183f0>
   29d88:	add	r0, r9, #136	; 0x88
   29d8c:	bl	114f0 <pthread_mutex_unlock@plt>
   29d90:	mov	r0, r5
   29d94:	add	sp, sp, #52	; 0x34
   29d98:	ldrd	r4, [sp]
   29d9c:	ldrd	r6, [sp, #8]
   29da0:	ldrd	r8, [sp, #16]
   29da4:	ldrd	sl, [sp, #24]
   29da8:	add	sp, sp, #32
   29dac:	pop	{pc}		; (ldr pc, [sp], #4)
   29db0:	ldr	r8, [sp, #32]
   29db4:	b	29c84 <__assert_fail@plt+0x182e4>
   29db8:	ldr	r8, [sp, #32]
   29dbc:	b	29c84 <__assert_fail@plt+0x182e4>
   29dc0:	mov	r0, r6
   29dc4:	bl	29b5c <__assert_fail@plt+0x181bc>
   29dc8:	b	29cf4 <__assert_fail@plt+0x18354>
   29dcc:	ldr	r3, [r7]
   29dd0:	ldr	r2, [r6, #24]
   29dd4:	cmp	r3, r2
   29dd8:	bhi	29d18 <__assert_fail@plt+0x18378>
   29ddc:	cmp	r3, #0
   29de0:	movgt	r4, r3
   29de4:	movle	r4, #1
   29de8:	movle	r7, #0
   29dec:	b	29d20 <__assert_fail@plt+0x18380>
   29df0:	mov	r4, #1
   29df4:	mov	r7, #0
   29df8:	b	29d20 <__assert_fail@plt+0x18380>
   29dfc:	cmp	r7, #0
   29e00:	beq	29eac <__assert_fail@plt+0x1850c>
   29e04:	ldrb	fp, [r6, #28]
   29e08:	ubfx	fp, fp, #1, #2
   29e0c:	add	r3, r4, #1
   29e10:	str	r3, [sp, #32]
   29e14:	cmp	fp, #0
   29e18:	beq	29ec0 <__assert_fail@plt+0x18520>
   29e1c:	cmp	fp, #1
   29e20:	movne	fp, #2
   29e24:	beq	29f0c <__assert_fail@plt+0x1856c>
   29e28:	cmp	r4, #0
   29e2c:	ble	29f78 <__assert_fail@plt+0x185d8>
   29e30:	ldr	r3, [sp, #40]	; 0x28
   29e34:	lsl	ip, r3, #2
   29e38:	mov	r3, #0
   29e3c:	add	r0, sl, #4
   29e40:	ldr	r1, [sl, r3, lsl #1]
   29e44:	ldr	r2, [r7, #4]
   29e48:	str	r1, [r2, r3]
   29e4c:	ldr	r1, [r0, r3, lsl #1]
   29e50:	ldr	r2, [r7, #8]
   29e54:	str	r1, [r2, r3]
   29e58:	add	r3, r3, #4
   29e5c:	cmp	ip, r3
   29e60:	bne	29e40 <__assert_fail@plt+0x184a0>
   29e64:	ldr	r3, [r7]
   29e68:	cmp	r4, r3
   29e6c:	bcs	29e94 <__assert_fail@plt+0x184f4>
   29e70:	mvn	r3, #0
   29e74:	ldr	r2, [r7, #8]
   29e78:	str	r3, [r2, r4, lsl #2]
   29e7c:	ldr	r2, [r7, #4]
   29e80:	str	r3, [r2, r4, lsl #2]
   29e84:	add	r4, r4, #1
   29e88:	ldr	r2, [r7]
   29e8c:	cmp	r4, r2
   29e90:	bcc	29e74 <__assert_fail@plt+0x184d4>
   29e94:	ldrb	r3, [r6, #28]
   29e98:	bfi	r3, fp, #1, #2
   29e9c:	strb	r3, [r6, #28]
   29ea0:	and	r3, r3, #6
   29ea4:	cmp	r3, #0
   29ea8:	beq	29fac <__assert_fail@plt+0x1860c>
   29eac:	ldrb	r3, [sp, #100]	; 0x64
   29eb0:	cmp	r3, #0
   29eb4:	bne	29f90 <__assert_fail@plt+0x185f0>
   29eb8:	ldr	r5, [sl]
   29ebc:	b	29d74 <__assert_fail@plt+0x183d4>
   29ec0:	lsl	fp, r3, #2
   29ec4:	mov	r0, fp
   29ec8:	bl	1ca68 <__assert_fail@plt+0xb0c8>
   29ecc:	str	r0, [r7, #4]
   29ed0:	cmp	r0, #0
   29ed4:	beq	29f80 <__assert_fail@plt+0x185e0>
   29ed8:	mov	r0, fp
   29edc:	bl	1ca68 <__assert_fail@plt+0xb0c8>
   29ee0:	str	r0, [r7, #8]
   29ee4:	cmp	r0, #0
   29ee8:	beq	29efc <__assert_fail@plt+0x1855c>
   29eec:	ldr	r3, [sp, #32]
   29ef0:	str	r3, [r7]
   29ef4:	mov	fp, #1
   29ef8:	b	29e28 <__assert_fail@plt+0x18488>
   29efc:	ldr	r0, [r7, #4]
   29f00:	bl	1c948 <__assert_fail@plt+0xafa8>
   29f04:	mov	fp, #0
   29f08:	b	29e94 <__assert_fail@plt+0x184f4>
   29f0c:	ldr	r3, [r7]
   29f10:	ldr	r2, [sp, #32]
   29f14:	cmp	r3, r2
   29f18:	bcs	29e28 <__assert_fail@plt+0x18488>
   29f1c:	lsl	r3, r2, #2
   29f20:	str	r3, [sp, #44]	; 0x2c
   29f24:	mov	r1, r3
   29f28:	ldr	r0, [r7, #4]
   29f2c:	bl	1cb14 <__assert_fail@plt+0xb174>
   29f30:	subs	r2, r0, #0
   29f34:	str	r2, [sp, #36]	; 0x24
   29f38:	beq	29f88 <__assert_fail@plt+0x185e8>
   29f3c:	ldr	r1, [sp, #44]	; 0x2c
   29f40:	ldr	r0, [r7, #8]
   29f44:	bl	1cb14 <__assert_fail@plt+0xb174>
   29f48:	cmp	r0, #0
   29f4c:	beq	29f68 <__assert_fail@plt+0x185c8>
   29f50:	ldr	r3, [sp, #36]	; 0x24
   29f54:	str	r3, [r7, #4]
   29f58:	str	r0, [r7, #8]
   29f5c:	ldr	r3, [sp, #32]
   29f60:	str	r3, [r7]
   29f64:	b	29e28 <__assert_fail@plt+0x18488>
   29f68:	ldr	r0, [sp, #36]	; 0x24
   29f6c:	bl	1c948 <__assert_fail@plt+0xafa8>
   29f70:	mov	fp, #0
   29f74:	b	29e94 <__assert_fail@plt+0x184f4>
   29f78:	mov	r4, r8
   29f7c:	b	29e64 <__assert_fail@plt+0x184c4>
   29f80:	mov	fp, #0
   29f84:	b	29e94 <__assert_fail@plt+0x184f4>
   29f88:	mov	fp, #0
   29f8c:	b	29e94 <__assert_fail@plt+0x184f4>
   29f90:	ldr	r3, [sl, #4]
   29f94:	sub	r5, r3, r5
   29f98:	b	29d74 <__assert_fail@plt+0x183d4>
   29f9c:	mvn	r5, #1
   29fa0:	b	29d7c <__assert_fail@plt+0x183dc>
   29fa4:	mvn	r5, #0
   29fa8:	b	29d90 <__assert_fail@plt+0x183f0>
   29fac:	mvn	r5, #1
   29fb0:	b	29d74 <__assert_fail@plt+0x183d4>
   29fb4:	movw	r3, #0
   29fb8:	movt	r3, #0
   29fbc:	cmp	r3, #0
   29fc0:	movne	r3, #1
   29fc4:	moveq	r3, #0
   29fc8:	mov	r2, r3
   29fcc:	movw	r3, #0
   29fd0:	movt	r3, #0
   29fd4:	cmp	r3, #0
   29fd8:	movne	r3, #1
   29fdc:	moveq	r3, #0
   29fe0:	orr	r3, r2, r3
   29fe4:	ands	r3, r3, #255	; 0xff
   29fe8:	str	r3, [sp, #28]
   29fec:	movne	r8, #0
   29ff0:	bne	29cc0 <__assert_fail@plt+0x18320>
   29ff4:	ldrb	fp, [r6, #28]
   29ff8:	ubfx	fp, fp, #5, #2
   29ffc:	mov	r8, #0
   2a000:	b	29cf4 <__assert_fail@plt+0x18354>
   2a004:	strd	r4, [sp, #-36]!	; 0xffffffdc
   2a008:	strd	r6, [sp, #8]
   2a00c:	strd	r8, [sp, #16]
   2a010:	strd	sl, [sp, #24]
   2a014:	str	lr, [sp, #32]
   2a018:	sub	sp, sp, #20
   2a01c:	mov	r7, r3
   2a020:	ldr	r5, [sp, #56]	; 0x38
   2a024:	ldr	r6, [sp, #72]	; 0x48
   2a028:	orr	r3, r5, r2
   2a02c:	orrs	r3, r3, r6
   2a030:	mvnmi	r4, #1
   2a034:	bmi	2a09c <__assert_fail@plt+0x186fc>
   2a038:	mov	r9, r0
   2a03c:	mov	sl, r1
   2a040:	mov	r4, r2
   2a044:	adds	fp, r2, r5
   2a048:	bvs	2a100 <__assert_fail@plt+0x18760>
   2a04c:	cmp	r5, #0
   2a050:	ble	2a0f4 <__assert_fail@plt+0x18754>
   2a054:	cmp	r2, #0
   2a058:	movle	r8, #0
   2a05c:	bgt	2a0bc <__assert_fail@plt+0x1871c>
   2a060:	ldrb	r3, [sp, #76]	; 0x4c
   2a064:	str	r3, [sp, #12]
   2a068:	ldr	r3, [sp, #68]	; 0x44
   2a06c:	str	r3, [sp, #8]
   2a070:	str	r6, [sp, #4]
   2a074:	ldr	r3, [sp, #64]	; 0x40
   2a078:	str	r3, [sp]
   2a07c:	ldr	r3, [sp, #60]	; 0x3c
   2a080:	mov	r2, fp
   2a084:	mov	r1, r7
   2a088:	mov	r0, r9
   2a08c:	bl	29c08 <__assert_fail@plt+0x18268>
   2a090:	mov	r4, r0
   2a094:	mov	r0, r8
   2a098:	bl	1c948 <__assert_fail@plt+0xafa8>
   2a09c:	mov	r0, r4
   2a0a0:	add	sp, sp, #20
   2a0a4:	ldrd	r4, [sp]
   2a0a8:	ldrd	r6, [sp, #8]
   2a0ac:	ldrd	r8, [sp, #16]
   2a0b0:	ldrd	sl, [sp, #24]
   2a0b4:	add	sp, sp, #32
   2a0b8:	pop	{pc}		; (ldr pc, [sp], #4)
   2a0bc:	mov	r0, fp
   2a0c0:	bl	1ca68 <__assert_fail@plt+0xb0c8>
   2a0c4:	subs	r8, r0, #0
   2a0c8:	beq	2a108 <__assert_fail@plt+0x18768>
   2a0cc:	mov	r2, r4
   2a0d0:	mov	r1, sl
   2a0d4:	mov	r0, r8
   2a0d8:	bl	115d4 <memcpy@plt>
   2a0dc:	mov	r2, r5
   2a0e0:	mov	r1, r7
   2a0e4:	add	r0, r8, r4
   2a0e8:	bl	115d4 <memcpy@plt>
   2a0ec:	mov	r7, r8
   2a0f0:	b	2a060 <__assert_fail@plt+0x186c0>
   2a0f4:	mov	r7, r1
   2a0f8:	mov	r8, #0
   2a0fc:	b	2a060 <__assert_fail@plt+0x186c0>
   2a100:	mvn	r4, #1
   2a104:	b	2a09c <__assert_fail@plt+0x186fc>
   2a108:	mvn	r4, #1
   2a10c:	b	2a09c <__assert_fail@plt+0x186fc>
   2a110:	strd	r4, [sp, #-24]!	; 0xffffffe8
   2a114:	strd	r6, [sp, #8]
   2a118:	str	r8, [sp, #16]
   2a11c:	str	lr, [sp, #20]
   2a120:	mov	r4, r0
   2a124:	mov	r7, r1
   2a128:	mov	r6, r2
   2a12c:	and	r2, r2, #1
   2a130:	movw	r5, #45820	; 0xb2fc
   2a134:	movt	r5, #3
   2a138:	movw	r3, #710	; 0x2c6
   2a13c:	movt	r3, #257	; 0x101
   2a140:	cmp	r2, #0
   2a144:	moveq	r5, r3
   2a148:	mov	r3, #0
   2a14c:	str	r3, [r0]
   2a150:	str	r3, [r0, #4]
   2a154:	str	r3, [r0, #8]
   2a158:	mov	r0, #256	; 0x100
   2a15c:	bl	1ca68 <__assert_fail@plt+0xb0c8>
   2a160:	str	r0, [r4, #16]
   2a164:	cmp	r0, #0
   2a168:	beq	2a210 <__assert_fail@plt+0x18870>
   2a16c:	lsl	r3, r6, #21
   2a170:	and	r3, r3, #4194304	; 0x400000
   2a174:	orr	r5, r3, r5
   2a178:	tst	r6, #4
   2a17c:	bicne	r5, r5, #64	; 0x40
   2a180:	orrne	r5, r5, #256	; 0x100
   2a184:	movne	r2, #1
   2a188:	moveq	r2, #0
   2a18c:	ldrb	r3, [r4, #28]
   2a190:	bfi	r3, r2, #7, #1
   2a194:	ubfx	r6, r6, #3, #1
   2a198:	bfi	r3, r6, #4, #1
   2a19c:	strb	r3, [r4, #28]
   2a1a0:	mov	r3, #0
   2a1a4:	str	r3, [r4, #20]
   2a1a8:	mov	r0, r7
   2a1ac:	bl	117a8 <strlen@plt>
   2a1b0:	mov	r3, r5
   2a1b4:	mov	r2, r0
   2a1b8:	mov	r1, r7
   2a1bc:	mov	r0, r4
   2a1c0:	bl	28e50 <__assert_fail@plt+0x174b0>
   2a1c4:	mov	r5, r0
   2a1c8:	cmp	r0, #16
   2a1cc:	beq	2a1f8 <__assert_fail@plt+0x18858>
   2a1d0:	cmp	r0, #0
   2a1d4:	bne	2a1fc <__assert_fail@plt+0x1885c>
   2a1d8:	mov	r0, r4
   2a1dc:	bl	29b5c <__assert_fail@plt+0x181bc>
   2a1e0:	mov	r0, r5
   2a1e4:	ldrd	r4, [sp]
   2a1e8:	ldrd	r6, [sp, #8]
   2a1ec:	ldr	r8, [sp, #16]
   2a1f0:	add	sp, sp, #20
   2a1f4:	pop	{pc}		; (ldr pc, [sp], #4)
   2a1f8:	mov	r5, #8
   2a1fc:	ldr	r0, [r4, #16]
   2a200:	bl	1c948 <__assert_fail@plt+0xafa8>
   2a204:	mov	r3, #0
   2a208:	str	r3, [r4, #16]
   2a20c:	b	2a1e0 <__assert_fail@plt+0x18840>
   2a210:	mov	r5, #12
   2a214:	b	2a1e0 <__assert_fail@plt+0x18840>
   2a218:	strd	r4, [sp, #-24]!	; 0xffffffe8
   2a21c:	strd	r6, [sp, #8]
   2a220:	str	r8, [sp, #16]
   2a224:	str	lr, [sp, #20]
   2a228:	cmp	r0, #16
   2a22c:	bhi	2a2a8 <__assert_fail@plt+0x18908>
   2a230:	mov	r6, r2
   2a234:	mov	r4, r3
   2a238:	movw	r3, #57900	; 0xe22c
   2a23c:	movt	r3, #2
   2a240:	add	r1, r3, #32
   2a244:	add	r3, r3, r0, lsl #2
   2a248:	ldr	r3, [r3, #416]	; 0x1a0
   2a24c:	mov	r2, #5
   2a250:	add	r1, r1, r3
   2a254:	mov	r0, #0
   2a258:	bl	11628 <dcgettext@plt>
   2a25c:	mov	r7, r0
   2a260:	bl	117a8 <strlen@plt>
   2a264:	add	r5, r0, #1
   2a268:	cmp	r4, #0
   2a26c:	beq	2a290 <__assert_fail@plt+0x188f0>
   2a270:	cmp	r5, r4
   2a274:	subhi	r2, r4, #1
   2a278:	movhi	r3, #0
   2a27c:	strbhi	r3, [r6, r2]
   2a280:	movls	r2, r5
   2a284:	mov	r1, r7
   2a288:	mov	r0, r6
   2a28c:	bl	115d4 <memcpy@plt>
   2a290:	mov	r0, r5
   2a294:	ldrd	r4, [sp]
   2a298:	ldrd	r6, [sp, #8]
   2a29c:	ldr	r8, [sp, #16]
   2a2a0:	add	sp, sp, #20
   2a2a4:	pop	{pc}		; (ldr pc, [sp], #4)
   2a2a8:	bl	11964 <abort@plt>
   2a2ac:	strd	r4, [sp, #-16]!
   2a2b0:	str	r6, [sp, #8]
   2a2b4:	str	lr, [sp, #12]
   2a2b8:	mov	r4, r0
   2a2bc:	ldr	r5, [r0]
   2a2c0:	cmp	r5, #0
   2a2c4:	beq	2a30c <__assert_fail@plt+0x1896c>
   2a2c8:	movw	r3, #0
   2a2cc:	movt	r3, #0
   2a2d0:	cmp	r3, #0
   2a2d4:	movne	r3, #1
   2a2d8:	moveq	r3, #0
   2a2dc:	movw	r2, #0
   2a2e0:	movt	r2, #0
   2a2e4:	cmp	r2, #0
   2a2e8:	movne	r2, #1
   2a2ec:	moveq	r2, #0
   2a2f0:	orr	r3, r3, r2
   2a2f4:	tst	r3, #255	; 0xff
   2a2f8:	beq	2a304 <__assert_fail@plt+0x18964>
   2a2fc:	add	r0, r5, #136	; 0x88
   2a300:	bl	1155c <pthread_mutex_destroy@plt>
   2a304:	mov	r0, r5
   2a308:	bl	1fed0 <__assert_fail@plt+0xe530>
   2a30c:	mov	r5, #0
   2a310:	str	r5, [r4]
   2a314:	str	r5, [r4, #4]
   2a318:	ldr	r0, [r4, #16]
   2a31c:	bl	1c948 <__assert_fail@plt+0xafa8>
   2a320:	str	r5, [r4, #16]
   2a324:	ldr	r0, [r4, #20]
   2a328:	bl	1c948 <__assert_fail@plt+0xafa8>
   2a32c:	str	r5, [r4, #20]
   2a330:	ldrd	r4, [sp]
   2a334:	ldr	r6, [sp, #8]
   2a338:	add	sp, sp, #12
   2a33c:	pop	{pc}		; (ldr pc, [sp], #4)
   2a340:	strd	r4, [sp, #-36]!	; 0xffffffdc
   2a344:	strd	r6, [sp, #8]
   2a348:	strd	r8, [sp, #16]
   2a34c:	strd	sl, [sp, #24]
   2a350:	str	lr, [sp, #32]
   2a354:	sub	sp, sp, #36	; 0x24
   2a358:	ldr	r6, [sp, #72]	; 0x48
   2a35c:	bics	ip, r6, #7
   2a360:	movne	r0, #2
   2a364:	bne	2a424 <__assert_fail@plt+0x18a84>
   2a368:	mov	r7, r3
   2a36c:	mov	r9, r2
   2a370:	str	r1, [sp, #28]
   2a374:	mov	r5, r0
   2a378:	ands	fp, r6, #4
   2a37c:	beq	2a440 <__assert_fail@plt+0x18aa0>
   2a380:	ldr	fp, [r3]
   2a384:	ldr	r8, [r3, #4]
   2a388:	ldr	sl, [r5]
   2a38c:	movw	r3, #0
   2a390:	movt	r3, #0
   2a394:	cmp	r3, #0
   2a398:	movne	r4, #1
   2a39c:	moveq	r4, #0
   2a3a0:	mov	r3, r4
   2a3a4:	mov	r4, #1
   2a3a8:	movw	r2, #0
   2a3ac:	movt	r2, #0
   2a3b0:	cmp	r2, #0
   2a3b4:	movne	r4, #1
   2a3b8:	moveq	r4, #0
   2a3bc:	orr	r4, r3, r4
   2a3c0:	ands	r4, r4, #255	; 0xff
   2a3c4:	beq	2a3d0 <__assert_fail@plt+0x18a30>
   2a3c8:	add	r0, sl, #136	; 0x88
   2a3cc:	bl	115a4 <pthread_mutex_lock@plt>
   2a3d0:	ldrb	r3, [r5, #28]
   2a3d4:	tst	r3, #16
   2a3d8:	beq	2a450 <__assert_fail@plt+0x18ab0>
   2a3dc:	str	r6, [sp, #16]
   2a3e0:	mov	r3, #0
   2a3e4:	str	r3, [sp, #12]
   2a3e8:	str	r3, [sp, #8]
   2a3ec:	str	r8, [sp, #4]
   2a3f0:	str	r8, [sp]
   2a3f4:	mov	r3, fp
   2a3f8:	mov	r2, r8
   2a3fc:	ldr	r1, [sp, #28]
   2a400:	mov	r0, r5
   2a404:	bl	273f8 <__assert_fail@plt+0x15a58>
   2a408:	mov	r5, r0
   2a40c:	cmp	r4, #0
   2a410:	beq	2a41c <__assert_fail@plt+0x18a7c>
   2a414:	add	r0, sl, #136	; 0x88
   2a418:	bl	114f0 <pthread_mutex_unlock@plt>
   2a41c:	adds	r0, r5, #0
   2a420:	movne	r0, #1
   2a424:	add	sp, sp, #36	; 0x24
   2a428:	ldrd	r4, [sp]
   2a42c:	ldrd	r6, [sp, #8]
   2a430:	ldrd	r8, [sp, #16]
   2a434:	ldrd	sl, [sp, #24]
   2a438:	add	sp, sp, #32
   2a43c:	pop	{pc}		; (ldr pc, [sp], #4)
   2a440:	ldr	r0, [sp, #28]
   2a444:	bl	117a8 <strlen@plt>
   2a448:	mov	r8, r0
   2a44c:	b	2a388 <__assert_fail@plt+0x189e8>
   2a450:	str	r6, [sp, #16]
   2a454:	str	r7, [sp, #12]
   2a458:	str	r9, [sp, #8]
   2a45c:	str	r8, [sp, #4]
   2a460:	str	r8, [sp]
   2a464:	mov	r3, fp
   2a468:	mov	r2, r8
   2a46c:	ldr	r1, [sp, #28]
   2a470:	mov	r0, r5
   2a474:	bl	273f8 <__assert_fail@plt+0x15a58>
   2a478:	mov	r5, r0
   2a47c:	b	2a40c <__assert_fail@plt+0x18a6c>
   2a480:	push	{lr}		; (str lr, [sp, #-4]!)
   2a484:	sub	sp, sp, #20
   2a488:	mov	ip, #1
   2a48c:	str	ip, [sp, #12]
   2a490:	ldr	ip, [sp, #24]
   2a494:	str	ip, [sp, #8]
   2a498:	str	r2, [sp, #4]
   2a49c:	mov	ip, #0
   2a4a0:	str	ip, [sp]
   2a4a4:	bl	29c08 <__assert_fail@plt+0x18268>
   2a4a8:	add	sp, sp, #20
   2a4ac:	pop	{pc}		; (ldr pc, [sp], #4)
   2a4b0:	push	{lr}		; (str lr, [sp, #-4]!)
   2a4b4:	sub	sp, sp, #20
   2a4b8:	mov	ip, #0
   2a4bc:	str	ip, [sp, #12]
   2a4c0:	ldr	ip, [sp, #28]
   2a4c4:	str	ip, [sp, #8]
   2a4c8:	str	r2, [sp, #4]
   2a4cc:	ldr	ip, [sp, #24]
   2a4d0:	str	ip, [sp]
   2a4d4:	bl	29c08 <__assert_fail@plt+0x18268>
   2a4d8:	add	sp, sp, #20
   2a4dc:	pop	{pc}		; (ldr pc, [sp], #4)
   2a4e0:	push	{lr}		; (str lr, [sp, #-4]!)
   2a4e4:	sub	sp, sp, #28
   2a4e8:	mov	ip, #1
   2a4ec:	str	ip, [sp, #20]
   2a4f0:	ldr	ip, [sp, #44]	; 0x2c
   2a4f4:	str	ip, [sp, #16]
   2a4f8:	ldr	ip, [sp, #40]	; 0x28
   2a4fc:	str	ip, [sp, #12]
   2a500:	mov	ip, #0
   2a504:	str	ip, [sp, #8]
   2a508:	ldr	ip, [sp, #36]	; 0x24
   2a50c:	str	ip, [sp, #4]
   2a510:	ldr	ip, [sp, #32]
   2a514:	str	ip, [sp]
   2a518:	bl	2a004 <__assert_fail@plt+0x18664>
   2a51c:	add	sp, sp, #28
   2a520:	pop	{pc}		; (ldr pc, [sp], #4)
   2a524:	push	{lr}		; (str lr, [sp, #-4]!)
   2a528:	sub	sp, sp, #28
   2a52c:	mov	ip, #0
   2a530:	str	ip, [sp, #20]
   2a534:	ldr	ip, [sp, #48]	; 0x30
   2a538:	str	ip, [sp, #16]
   2a53c:	ldr	ip, [sp, #44]	; 0x2c
   2a540:	str	ip, [sp, #12]
   2a544:	ldr	ip, [sp, #40]	; 0x28
   2a548:	str	ip, [sp, #8]
   2a54c:	ldr	ip, [sp, #36]	; 0x24
   2a550:	str	ip, [sp, #4]
   2a554:	ldr	ip, [sp, #32]
   2a558:	str	ip, [sp]
   2a55c:	bl	2a004 <__assert_fail@plt+0x18664>
   2a560:	add	sp, sp, #28
   2a564:	pop	{pc}		; (ldr pc, [sp], #4)
   2a568:	cmp	r2, #0
   2a56c:	beq	2a598 <__assert_fail@plt+0x18bf8>
   2a570:	push	{lr}		; (str lr, [sp, #-4]!)
   2a574:	ldrb	ip, [r0, #28]
   2a578:	mov	lr, #1
   2a57c:	bfi	ip, lr, #1, #2
   2a580:	strb	ip, [r0, #28]
   2a584:	str	r2, [r1]
   2a588:	str	r3, [r1, #4]
   2a58c:	ldr	r3, [sp, #4]
   2a590:	str	r3, [r1, #8]
   2a594:	pop	{pc}		; (ldr pc, [sp], #4)
   2a598:	ldrb	r3, [r0, #28]
   2a59c:	bfc	r3, #1, #2
   2a5a0:	strb	r3, [r0, #28]
   2a5a4:	mov	r3, #0
   2a5a8:	str	r3, [r1]
   2a5ac:	str	r3, [r1, #8]
   2a5b0:	str	r3, [r1, #4]
   2a5b4:	bx	lr
   2a5b8:	cmp	r1, #2
   2a5bc:	bls	2a610 <__assert_fail@plt+0x18c70>
   2a5c0:	strd	r4, [sp, #-36]!	; 0xffffffdc
   2a5c4:	strd	r6, [sp, #8]
   2a5c8:	strd	r8, [sp, #16]
   2a5cc:	strd	sl, [sp, #24]
   2a5d0:	str	lr, [sp, #32]
   2a5d4:	sub	sp, sp, #28
   2a5d8:	str	r2, [sp, #12]
   2a5dc:	str	r1, [sp, #4]
   2a5e0:	mov	r6, r0
   2a5e4:	bl	11778 <__ctype_b_loc@plt>
   2a5e8:	str	r0, [sp, #16]
   2a5ec:	ldr	sl, [r0]
   2a5f0:	mov	fp, #1
   2a5f4:	mov	r8, fp
   2a5f8:	mov	r9, #0
   2a5fc:	mvn	r3, #0
   2a600:	mov	r7, fp
   2a604:	str	fp, [sp, #8]
   2a608:	mov	fp, r3
   2a60c:	b	2a64c <__assert_fail@plt+0x18cac>
   2a610:	mov	r3, #1
   2a614:	str	r3, [r2]
   2a618:	sub	r0, r1, #1
   2a61c:	bx	lr
   2a620:	cmp	r5, r4
   2a624:	beq	2a6ac <__assert_fail@plt+0x18d0c>
   2a628:	mov	fp, r9
   2a62c:	add	r9, r9, #1
   2a630:	mov	r3, #1
   2a634:	str	r3, [sp, #8]
   2a638:	mov	r8, r3
   2a63c:	add	r7, r9, r8
   2a640:	ldr	r3, [sp, #4]
   2a644:	cmp	r7, r3
   2a648:	bcs	2a6c8 <__assert_fail@plt+0x18d28>
   2a64c:	ldrb	r5, [r6, r7]
   2a650:	lsl	r3, r5, #1
   2a654:	ldrh	r3, [sl, r3]
   2a658:	tst	r3, #256	; 0x100
   2a65c:	beq	2a66c <__assert_fail@plt+0x18ccc>
   2a660:	bl	11748 <__ctype_tolower_loc@plt>
   2a664:	ldr	r3, [r0]
   2a668:	ldrb	r5, [r3, r5, lsl #2]
   2a66c:	add	r3, r6, fp
   2a670:	ldrb	r4, [r3, r8]
   2a674:	lsl	r3, r4, #1
   2a678:	ldrh	r3, [sl, r3]
   2a67c:	tst	r3, #256	; 0x100
   2a680:	beq	2a690 <__assert_fail@plt+0x18cf0>
   2a684:	bl	11748 <__ctype_tolower_loc@plt>
   2a688:	ldr	r3, [r0]
   2a68c:	ldrb	r4, [r3, r4, lsl #2]
   2a690:	cmp	r5, r4
   2a694:	bcs	2a620 <__assert_fail@plt+0x18c80>
   2a698:	sub	r3, r7, fp
   2a69c:	str	r3, [sp, #8]
   2a6a0:	mov	r9, r7
   2a6a4:	mov	r8, #1
   2a6a8:	b	2a63c <__assert_fail@plt+0x18c9c>
   2a6ac:	ldr	r3, [sp, #8]
   2a6b0:	cmp	r8, r3
   2a6b4:	addne	r8, r8, #1
   2a6b8:	ldreq	r3, [sp, #8]
   2a6bc:	addeq	r9, r9, r3
   2a6c0:	moveq	r8, #1
   2a6c4:	b	2a63c <__assert_fail@plt+0x18c9c>
   2a6c8:	str	fp, [sp, #20]
   2a6cc:	ldr	fp, [sp, #8]
   2a6d0:	ldr	r3, [sp, #12]
   2a6d4:	str	fp, [r3]
   2a6d8:	ldr	r3, [sp, #16]
   2a6dc:	ldr	fp, [r3]
   2a6e0:	mov	r7, #1
   2a6e4:	str	r7, [sp, #8]
   2a6e8:	mov	r8, r7
   2a6ec:	mov	r9, #0
   2a6f0:	mvn	sl, #0
   2a6f4:	b	2a724 <__assert_fail@plt+0x18d84>
   2a6f8:	cmp	r5, r4
   2a6fc:	beq	2a784 <__assert_fail@plt+0x18de4>
   2a700:	mov	sl, r9
   2a704:	add	r9, r9, #1
   2a708:	mov	r3, #1
   2a70c:	str	r3, [sp, #8]
   2a710:	mov	r8, r3
   2a714:	add	r7, r9, r8
   2a718:	ldr	r3, [sp, #4]
   2a71c:	cmp	r3, r7
   2a720:	bls	2a7a0 <__assert_fail@plt+0x18e00>
   2a724:	ldrb	r5, [r6, r7]
   2a728:	lsl	r3, r5, #1
   2a72c:	ldrh	r3, [fp, r3]
   2a730:	tst	r3, #256	; 0x100
   2a734:	beq	2a744 <__assert_fail@plt+0x18da4>
   2a738:	bl	11748 <__ctype_tolower_loc@plt>
   2a73c:	ldr	r3, [r0]
   2a740:	ldrb	r5, [r3, r5, lsl #2]
   2a744:	add	r3, r6, sl
   2a748:	ldrb	r4, [r3, r8]
   2a74c:	lsl	r3, r4, #1
   2a750:	ldrh	r3, [fp, r3]
   2a754:	tst	r3, #256	; 0x100
   2a758:	beq	2a768 <__assert_fail@plt+0x18dc8>
   2a75c:	bl	11748 <__ctype_tolower_loc@plt>
   2a760:	ldr	r3, [r0]
   2a764:	ldrb	r4, [r3, r4, lsl #2]
   2a768:	cmp	r5, r4
   2a76c:	bls	2a6f8 <__assert_fail@plt+0x18d58>
   2a770:	sub	r3, r7, sl
   2a774:	str	r3, [sp, #8]
   2a778:	mov	r9, r7
   2a77c:	mov	r8, #1
   2a780:	b	2a714 <__assert_fail@plt+0x18d74>
   2a784:	ldr	r3, [sp, #8]
   2a788:	cmp	r8, r3
   2a78c:	addne	r8, r8, #1
   2a790:	ldreq	r3, [sp, #8]
   2a794:	addeq	r9, r9, r3
   2a798:	moveq	r8, #1
   2a79c:	b	2a714 <__assert_fail@plt+0x18d74>
   2a7a0:	add	sl, sl, #1
   2a7a4:	ldr	r3, [sp, #20]
   2a7a8:	add	r0, r3, #1
   2a7ac:	cmp	sl, r0
   2a7b0:	bcc	2a7c4 <__assert_fail@plt+0x18e24>
   2a7b4:	ldr	r3, [sp, #12]
   2a7b8:	ldr	r2, [sp, #8]
   2a7bc:	str	r2, [r3]
   2a7c0:	mov	r0, sl
   2a7c4:	add	sp, sp, #28
   2a7c8:	ldrd	r4, [sp]
   2a7cc:	ldrd	r6, [sp, #8]
   2a7d0:	ldrd	r8, [sp, #16]
   2a7d4:	ldrd	sl, [sp, #24]
   2a7d8:	add	sp, sp, #32
   2a7dc:	pop	{pc}		; (ldr pc, [sp], #4)
   2a7e0:	strd	r4, [sp, #-36]!	; 0xffffffdc
   2a7e4:	strd	r6, [sp, #8]
   2a7e8:	strd	r8, [sp, #16]
   2a7ec:	strd	sl, [sp, #24]
   2a7f0:	str	lr, [sp, #32]
   2a7f4:	sub	sp, sp, #1088	; 0x440
   2a7f8:	sub	sp, sp, #12
   2a7fc:	str	r0, [sp]
   2a800:	mov	r5, r1
   2a804:	mov	r0, r2
   2a808:	str	r2, [sp, #16]
   2a80c:	mov	r4, r3
   2a810:	add	r2, sp, #1088	; 0x440
   2a814:	add	r2, r2, #4
   2a818:	mov	r1, r3
   2a81c:	bl	2a5b8 <__assert_fail@plt+0x18c18>
   2a820:	str	r0, [sp, #12]
   2a824:	add	r3, sp, #64	; 0x40
   2a828:	add	r2, sp, #1088	; 0x440
   2a82c:	str	r4, [r3, #4]!
   2a830:	cmp	r3, r2
   2a834:	bne	2a82c <__assert_fail@plt+0x18e8c>
   2a838:	cmp	r4, #0
   2a83c:	beq	2adb4 <__assert_fail@plt+0x19414>
   2a840:	bl	11778 <__ctype_b_loc@plt>
   2a844:	ldr	r9, [r0]
   2a848:	ldr	r3, [sp, #16]
   2a84c:	sub	r8, r3, #1
   2a850:	sub	r3, r4, #1
   2a854:	str	r3, [sp, #32]
   2a858:	mov	r7, r3
   2a85c:	b	2a87c <__assert_fail@plt+0x18edc>
   2a860:	add	r3, sp, #1088	; 0x440
   2a864:	add	r3, r3, #8
   2a868:	add	r6, r3, r6, lsl #2
   2a86c:	str	r7, [r6, #-1028]	; 0xfffffbfc
   2a870:	sub	r7, r7, #1
   2a874:	cmn	r7, #1
   2a878:	beq	2a8a0 <__assert_fail@plt+0x18f00>
   2a87c:	ldrb	r6, [r8, #1]!
   2a880:	lsl	r3, r6, #1
   2a884:	ldrh	r3, [r9, r3]
   2a888:	tst	r3, #256	; 0x100
   2a88c:	beq	2a860 <__assert_fail@plt+0x18ec0>
   2a890:	bl	11748 <__ctype_tolower_loc@plt>
   2a894:	ldr	r3, [r0]
   2a898:	ldr	r6, [r3, r6, lsl #2]
   2a89c:	b	2a860 <__assert_fail@plt+0x18ec0>
   2a8a0:	ldr	r3, [sp, #1092]	; 0x444
   2a8a4:	str	r3, [sp, #28]
   2a8a8:	ldr	r2, [sp, #12]
   2a8ac:	ldr	r0, [sp, #16]
   2a8b0:	add	r1, r0, r3
   2a8b4:	bl	117f0 <strncasecmp@plt>
   2a8b8:	cmp	r0, #0
   2a8bc:	beq	2ab78 <__assert_fail@plt+0x191d8>
   2a8c0:	ldr	r2, [sp, #12]
   2a8c4:	sub	r3, r4, r2
   2a8c8:	cmp	r3, r2
   2a8cc:	movcc	r3, r2
   2a8d0:	add	r3, r3, #1
   2a8d4:	str	r3, [sp, #28]
   2a8d8:	str	r3, [sp, #1092]	; 0x444
   2a8dc:	mov	r3, #0
   2a8e0:	str	r3, [sp, #4]
   2a8e4:	sub	fp, r4, #1
   2a8e8:	sub	r3, r2, #1
   2a8ec:	str	r3, [sp, #20]
   2a8f0:	rsb	r3, r2, #1
   2a8f4:	str	r3, [sp, #24]
   2a8f8:	mov	r0, r5
   2a8fc:	str	r4, [sp, #8]
   2a900:	b	2abf4 <__assert_fail@plt+0x19254>
   2a904:	add	r3, sp, #1088	; 0x440
   2a908:	add	r3, r3, #8
   2a90c:	add	r4, r3, r4, lsl #2
   2a910:	ldr	fp, [r4, #-1028]	; 0xfffffbfc
   2a914:	cmp	fp, #0
   2a918:	beq	2a9b0 <__assert_fail@plt+0x19010>
   2a91c:	ldr	r3, [sp, #28]
   2a920:	ldr	r2, [sp, #8]
   2a924:	cmp	r2, #0
   2a928:	cmpne	r3, fp
   2a92c:	ldrhi	fp, [sp, #52]	; 0x34
   2a930:	ldr	r3, [sp, #4]
   2a934:	add	r3, r3, fp
   2a938:	str	r3, [sp, #4]
   2a93c:	mov	r3, #0
   2a940:	str	r3, [sp, #8]
   2a944:	mov	r0, r8
   2a948:	ldr	r3, [sp, #20]
   2a94c:	ldr	r2, [sp, #4]
   2a950:	add	r8, r3, r2
   2a954:	sub	r2, r8, r0
   2a958:	mov	r1, #0
   2a95c:	ldr	r3, [sp]
   2a960:	add	r0, r3, r0
   2a964:	bl	1185c <memchr@plt>
   2a968:	adds	r3, r8, #0
   2a96c:	movne	r3, #1
   2a970:	cmp	r0, #0
   2a974:	moveq	r0, r3
   2a978:	movne	r0, #0
   2a97c:	cmp	r0, #0
   2a980:	beq	2add8 <__assert_fail@plt+0x19438>
   2a984:	ldr	r3, [sp]
   2a988:	add	r3, r3, r8
   2a98c:	ldrb	r4, [r3, #-1]
   2a990:	lsl	r3, r4, #1
   2a994:	ldrh	r3, [r9, r3]
   2a998:	tst	r3, #256	; 0x100
   2a99c:	beq	2a904 <__assert_fail@plt+0x18f64>
   2a9a0:	bl	11748 <__ctype_tolower_loc@plt>
   2a9a4:	ldr	r3, [r0]
   2a9a8:	ldr	r4, [r3, r4, lsl #2]
   2a9ac:	b	2a904 <__assert_fail@plt+0x18f64>
   2a9b0:	ldr	r3, [sp, #12]
   2a9b4:	ldr	r2, [sp, #8]
   2a9b8:	cmp	r3, r2
   2a9bc:	movcs	r7, r3
   2a9c0:	movcc	r7, r2
   2a9c4:	ldr	r3, [sp, #32]
   2a9c8:	cmp	r7, r3
   2a9cc:	bcs	2aa8c <__assert_fail@plt+0x190ec>
   2a9d0:	sub	r6, r7, #1
   2a9d4:	ldr	r3, [sp, #16]
   2a9d8:	add	r6, r3, r6
   2a9dc:	ldr	r3, [sp, #4]
   2a9e0:	add	r7, r7, r3
   2a9e4:	ldr	r3, [sp]
   2a9e8:	add	r7, r3, r7
   2a9ec:	str	r8, [sp, #24]
   2a9f0:	str	fp, [sp, #36]	; 0x24
   2a9f4:	ldr	fp, [sp, #40]	; 0x28
   2a9f8:	ldr	r8, [sp, #44]	; 0x2c
   2a9fc:	b	2aa10 <__assert_fail@plt+0x19070>
   2aa00:	cmp	r5, r4
   2aa04:	bne	2aa58 <__assert_fail@plt+0x190b8>
   2aa08:	cmp	r6, fp
   2aa0c:	beq	2aa88 <__assert_fail@plt+0x190e8>
   2aa10:	add	sl, r8, r6
   2aa14:	ldrb	r5, [r6, #1]!
   2aa18:	lsl	r3, r5, #1
   2aa1c:	ldrh	r3, [r9, r3]
   2aa20:	tst	r3, #256	; 0x100
   2aa24:	beq	2aa34 <__assert_fail@plt+0x19094>
   2aa28:	bl	11748 <__ctype_tolower_loc@plt>
   2aa2c:	ldr	r3, [r0]
   2aa30:	ldr	r5, [r3, r5, lsl #2]
   2aa34:	ldrb	r4, [r7], #1
   2aa38:	lsl	r3, r4, #1
   2aa3c:	ldrh	r3, [r9, r3]
   2aa40:	tst	r3, #256	; 0x100
   2aa44:	beq	2aa00 <__assert_fail@plt+0x19060>
   2aa48:	bl	11748 <__ctype_tolower_loc@plt>
   2aa4c:	ldr	r3, [r0]
   2aa50:	ldr	r4, [r3, r4, lsl #2]
   2aa54:	b	2aa00 <__assert_fail@plt+0x19060>
   2aa58:	ldr	r8, [sp, #24]
   2aa5c:	ldr	fp, [sp, #36]	; 0x24
   2aa60:	ldr	r3, [sp, #32]
   2aa64:	cmp	sl, r3
   2aa68:	bcs	2aa8c <__assert_fail@plt+0x190ec>
   2aa6c:	ldr	r3, [sp, #48]	; 0x30
   2aa70:	ldr	r2, [sp, #4]
   2aa74:	add	r3, r3, r2
   2aa78:	add	r3, r3, sl
   2aa7c:	str	r3, [sp, #4]
   2aa80:	str	fp, [sp, #8]
   2aa84:	b	2a944 <__assert_fail@plt+0x18fa4>
   2aa88:	ldr	r8, [sp, #24]
   2aa8c:	ldr	r6, [sp, #56]	; 0x38
   2aa90:	ldr	r3, [sp, #12]
   2aa94:	ldr	r2, [sp, #8]
   2aa98:	cmp	r3, r2
   2aa9c:	bls	2ab54 <__assert_fail@plt+0x191b4>
   2aaa0:	ldr	r1, [sp, #16]
   2aaa4:	add	sl, r1, r3
   2aaa8:	ldr	r1, [sp, #4]
   2aaac:	add	r7, r3, r1
   2aab0:	ldr	r3, [sp]
   2aab4:	add	r7, r3, r7
   2aab8:	str	r8, [sp, #24]
   2aabc:	mov	r8, r2
   2aac0:	b	2aadc <__assert_fail@plt+0x1913c>
   2aac4:	cmp	r5, r4
   2aac8:	bne	2ab24 <__assert_fail@plt+0x19184>
   2aacc:	sub	r3, r6, #1
   2aad0:	cmp	r8, r6
   2aad4:	beq	2ab5c <__assert_fail@plt+0x191bc>
   2aad8:	mov	r6, r3
   2aadc:	add	fp, r6, #1
   2aae0:	ldrb	r5, [sl, #-1]!
   2aae4:	lsl	r3, r5, #1
   2aae8:	ldrh	r3, [r9, r3]
   2aaec:	tst	r3, #256	; 0x100
   2aaf0:	beq	2ab00 <__assert_fail@plt+0x19160>
   2aaf4:	bl	11748 <__ctype_tolower_loc@plt>
   2aaf8:	ldr	r3, [r0]
   2aafc:	ldr	r5, [r3, r5, lsl #2]
   2ab00:	ldrb	r4, [r7, #-1]!
   2ab04:	lsl	r3, r4, #1
   2ab08:	ldrh	r3, [r9, r3]
   2ab0c:	tst	r3, #256	; 0x100
   2ab10:	beq	2aac4 <__assert_fail@plt+0x19124>
   2ab14:	bl	11748 <__ctype_tolower_loc@plt>
   2ab18:	ldr	r3, [r0]
   2ab1c:	ldr	r4, [r3, r4, lsl #2]
   2ab20:	b	2aac4 <__assert_fail@plt+0x19124>
   2ab24:	ldr	r8, [sp, #24]
   2ab28:	ldr	r3, [sp, #8]
   2ab2c:	add	r3, r3, #1
   2ab30:	cmp	r3, fp
   2ab34:	bhi	2ab68 <__assert_fail@plt+0x191c8>
   2ab38:	ldr	r3, [sp, #4]
   2ab3c:	ldr	r2, [sp, #28]
   2ab40:	add	r3, r3, r2
   2ab44:	str	r3, [sp, #4]
   2ab48:	ldr	r3, [sp, #52]	; 0x34
   2ab4c:	str	r3, [sp, #8]
   2ab50:	b	2a944 <__assert_fail@plt+0x18fa4>
   2ab54:	ldr	fp, [sp, #60]	; 0x3c
   2ab58:	b	2ab28 <__assert_fail@plt+0x19188>
   2ab5c:	ldr	r8, [sp, #24]
   2ab60:	mov	fp, r6
   2ab64:	b	2ab28 <__assert_fail@plt+0x19188>
   2ab68:	ldr	r3, [sp]
   2ab6c:	ldr	r2, [sp, #4]
   2ab70:	add	r0, r3, r2
   2ab74:	b	2add8 <__assert_fail@plt+0x19438>
   2ab78:	mov	r3, #0
   2ab7c:	str	r3, [sp, #8]
   2ab80:	str	r3, [sp, #4]
   2ab84:	ldr	r2, [sp, #12]
   2ab88:	sub	r3, r2, #1
   2ab8c:	str	r3, [sp, #56]	; 0x38
   2ab90:	ldr	r3, [sp, #28]
   2ab94:	sub	r3, r4, r3
   2ab98:	str	r3, [sp, #52]	; 0x34
   2ab9c:	str	r2, [sp, #60]	; 0x3c
   2aba0:	sub	r3, r4, #2
   2aba4:	ldr	r1, [sp, #16]
   2aba8:	add	r3, r3, r1
   2abac:	str	r3, [sp, #40]	; 0x28
   2abb0:	rsb	r3, r1, #1
   2abb4:	str	r3, [sp, #44]	; 0x2c
   2abb8:	rsb	r3, r2, #1
   2abbc:	str	r3, [sp, #48]	; 0x30
   2abc0:	mov	r0, r5
   2abc4:	str	r4, [sp, #20]
   2abc8:	b	2a948 <__assert_fail@plt+0x18fa8>
   2abcc:	add	r3, sp, #1088	; 0x440
   2abd0:	add	r3, r3, #8
   2abd4:	add	r4, r3, r4, lsl #2
   2abd8:	ldr	r3, [r4, #-1028]	; 0xfffffbfc
   2abdc:	cmp	r3, #0
   2abe0:	beq	2ac60 <__assert_fail@plt+0x192c0>
   2abe4:	ldr	r2, [sp, #4]
   2abe8:	add	r3, r2, r3
   2abec:	str	r3, [sp, #4]
   2abf0:	mov	r0, sl
   2abf4:	ldr	r3, [sp, #8]
   2abf8:	ldr	r2, [sp, #4]
   2abfc:	add	sl, r3, r2
   2ac00:	sub	r2, sl, r0
   2ac04:	mov	r1, #0
   2ac08:	ldr	r3, [sp]
   2ac0c:	add	r0, r3, r0
   2ac10:	bl	1185c <memchr@plt>
   2ac14:	clz	r0, r0
   2ac18:	lsr	r0, r0, #5
   2ac1c:	cmp	sl, #0
   2ac20:	moveq	r0, #0
   2ac24:	cmp	r0, #0
   2ac28:	beq	2add8 <__assert_fail@plt+0x19438>
   2ac2c:	bl	11778 <__ctype_b_loc@plt>
   2ac30:	ldr	r7, [r0]
   2ac34:	ldr	r3, [sp]
   2ac38:	add	r3, r3, sl
   2ac3c:	ldrb	r4, [r3, #-1]
   2ac40:	lsl	r3, r4, #1
   2ac44:	ldrh	r3, [r7, r3]
   2ac48:	tst	r3, #256	; 0x100
   2ac4c:	beq	2abcc <__assert_fail@plt+0x1922c>
   2ac50:	bl	11748 <__ctype_tolower_loc@plt>
   2ac54:	ldr	r3, [r0]
   2ac58:	ldr	r4, [r3, r4, lsl #2]
   2ac5c:	b	2abcc <__assert_fail@plt+0x1922c>
   2ac60:	ldr	r6, [sp, #12]
   2ac64:	cmp	r6, fp
   2ac68:	bcs	2ad04 <__assert_fail@plt+0x19364>
   2ac6c:	ldr	r3, [sp, #16]
   2ac70:	ldr	r2, [sp, #20]
   2ac74:	add	r9, r3, r2
   2ac78:	ldr	r3, [sp, #4]
   2ac7c:	add	r8, r6, r3
   2ac80:	ldr	r3, [sp]
   2ac84:	add	r8, r3, r8
   2ac88:	b	2aca0 <__assert_fail@plt+0x19300>
   2ac8c:	cmp	r5, r4
   2ac90:	bne	2ace4 <__assert_fail@plt+0x19344>
   2ac94:	add	r6, r6, #1
   2ac98:	cmp	r6, fp
   2ac9c:	bcs	2ad04 <__assert_fail@plt+0x19364>
   2aca0:	ldrb	r5, [r9, #1]!
   2aca4:	lsl	r3, r5, #1
   2aca8:	ldrh	r3, [r7, r3]
   2acac:	tst	r3, #256	; 0x100
   2acb0:	beq	2acc0 <__assert_fail@plt+0x19320>
   2acb4:	bl	11748 <__ctype_tolower_loc@plt>
   2acb8:	ldr	r3, [r0]
   2acbc:	ldr	r5, [r3, r5, lsl #2]
   2acc0:	ldrb	r4, [r8], #1
   2acc4:	lsl	r3, r4, #1
   2acc8:	ldrh	r3, [r7, r3]
   2accc:	tst	r3, #256	; 0x100
   2acd0:	beq	2ac8c <__assert_fail@plt+0x192ec>
   2acd4:	bl	11748 <__ctype_tolower_loc@plt>
   2acd8:	ldr	r3, [r0]
   2acdc:	ldr	r4, [r3, r4, lsl #2]
   2ace0:	b	2ac8c <__assert_fail@plt+0x192ec>
   2ace4:	cmp	fp, r6
   2ace8:	bls	2ad04 <__assert_fail@plt+0x19364>
   2acec:	ldr	r3, [sp, #24]
   2acf0:	ldr	r2, [sp, #4]
   2acf4:	add	r3, r3, r2
   2acf8:	add	r3, r3, r6
   2acfc:	str	r3, [sp, #4]
   2ad00:	b	2abf0 <__assert_fail@plt+0x19250>
   2ad04:	ldr	r3, [sp, #12]
   2ad08:	sub	r6, r3, #1
   2ad0c:	cmn	r6, #1
   2ad10:	beq	2ada4 <__assert_fail@plt+0x19404>
   2ad14:	ldr	r2, [sp, #16]
   2ad18:	add	r9, r2, r3
   2ad1c:	ldr	r2, [sp, #4]
   2ad20:	add	r8, r3, r2
   2ad24:	ldr	r3, [sp]
   2ad28:	add	r8, r3, r8
   2ad2c:	b	2ad44 <__assert_fail@plt+0x193a4>
   2ad30:	cmp	r5, r4
   2ad34:	bne	2ad88 <__assert_fail@plt+0x193e8>
   2ad38:	sub	r6, r6, #1
   2ad3c:	cmn	r6, #1
   2ad40:	beq	2ada4 <__assert_fail@plt+0x19404>
   2ad44:	ldrb	r5, [r9, #-1]!
   2ad48:	lsl	r3, r5, #1
   2ad4c:	ldrh	r3, [r7, r3]
   2ad50:	tst	r3, #256	; 0x100
   2ad54:	beq	2ad64 <__assert_fail@plt+0x193c4>
   2ad58:	bl	11748 <__ctype_tolower_loc@plt>
   2ad5c:	ldr	r3, [r0]
   2ad60:	ldr	r5, [r3, r5, lsl #2]
   2ad64:	ldrb	r4, [r8, #-1]!
   2ad68:	lsl	r3, r4, #1
   2ad6c:	ldrh	r3, [r7, r3]
   2ad70:	tst	r3, #256	; 0x100
   2ad74:	beq	2ad30 <__assert_fail@plt+0x19390>
   2ad78:	bl	11748 <__ctype_tolower_loc@plt>
   2ad7c:	ldr	r3, [r0]
   2ad80:	ldr	r4, [r3, r4, lsl #2]
   2ad84:	b	2ad30 <__assert_fail@plt+0x19390>
   2ad88:	cmn	r6, #1
   2ad8c:	beq	2ada4 <__assert_fail@plt+0x19404>
   2ad90:	ldr	r3, [sp, #4]
   2ad94:	ldr	r2, [sp, #28]
   2ad98:	add	r3, r3, r2
   2ad9c:	str	r3, [sp, #4]
   2ada0:	b	2abf0 <__assert_fail@plt+0x19250>
   2ada4:	ldr	r3, [sp]
   2ada8:	ldr	r2, [sp, #4]
   2adac:	add	r0, r3, r2
   2adb0:	b	2add8 <__assert_fail@plt+0x19438>
   2adb4:	ldr	r2, [sp, #12]
   2adb8:	ldr	r1, [sp, #1092]	; 0x444
   2adbc:	ldr	r3, [sp, #16]
   2adc0:	add	r1, r3, r1
   2adc4:	mov	r0, r3
   2adc8:	bl	117f0 <strncasecmp@plt>
   2adcc:	cmp	r0, #0
   2add0:	moveq	r0, #0
   2add4:	bne	2a8c0 <__assert_fail@plt+0x18f20>
   2add8:	add	sp, sp, #1088	; 0x440
   2addc:	add	sp, sp, #12
   2ade0:	ldrd	r4, [sp]
   2ade4:	ldrd	r6, [sp, #8]
   2ade8:	ldrd	r8, [sp, #16]
   2adec:	ldrd	sl, [sp, #24]
   2adf0:	add	sp, sp, #32
   2adf4:	pop	{pc}		; (ldr pc, [sp], #4)
   2adf8:	strd	r4, [sp, #-36]!	; 0xffffffdc
   2adfc:	strd	r6, [sp, #8]
   2ae00:	strd	r8, [sp, #16]
   2ae04:	strd	sl, [sp, #24]
   2ae08:	str	lr, [sp, #32]
   2ae0c:	sub	sp, sp, #68	; 0x44
   2ae10:	mov	r9, r0
   2ae14:	str	r1, [sp, #4]
   2ae18:	ldrb	r4, [r0]
   2ae1c:	cmp	r4, #0
   2ae20:	beq	2aeb0 <__assert_fail@plt+0x19510>
   2ae24:	mov	r6, r1
   2ae28:	ldrb	r5, [r1]
   2ae2c:	cmp	r5, #0
   2ae30:	beq	2af08 <__assert_fail@plt+0x19568>
   2ae34:	bl	11778 <__ctype_b_loc@plt>
   2ae38:	ldr	sl, [r0]
   2ae3c:	add	r6, r6, #1
   2ae40:	mov	r8, r9
   2ae44:	mov	r7, #1
   2ae48:	b	2ae74 <__assert_fail@plt+0x194d4>
   2ae4c:	cmp	r4, r5
   2ae50:	movne	r7, #0
   2ae54:	andeq	r7, r7, #1
   2ae58:	mov	r3, r6
   2ae5c:	ldrb	r4, [r8, #1]!
   2ae60:	cmp	r4, #0
   2ae64:	beq	2aeb8 <__assert_fail@plt+0x19518>
   2ae68:	ldrb	r5, [r6], #1
   2ae6c:	cmp	r5, #0
   2ae70:	beq	2aec8 <__assert_fail@plt+0x19528>
   2ae74:	lsl	r3, r4, #1
   2ae78:	ldrh	r3, [sl, r3]
   2ae7c:	tst	r3, #256	; 0x100
   2ae80:	beq	2ae90 <__assert_fail@plt+0x194f0>
   2ae84:	bl	11748 <__ctype_tolower_loc@plt>
   2ae88:	ldr	r3, [r0]
   2ae8c:	ldr	r4, [r3, r4, lsl #2]
   2ae90:	lsl	r3, r5, #1
   2ae94:	ldrh	r3, [sl, r3]
   2ae98:	tst	r3, #256	; 0x100
   2ae9c:	beq	2ae4c <__assert_fail@plt+0x194ac>
   2aea0:	bl	11748 <__ctype_tolower_loc@plt>
   2aea4:	ldr	r3, [r0]
   2aea8:	ldr	r5, [r3, r5, lsl #2]
   2aeac:	b	2ae4c <__assert_fail@plt+0x194ac>
   2aeb0:	ldr	r3, [sp, #4]
   2aeb4:	mov	r7, #1
   2aeb8:	ldrb	r2, [r3]
   2aebc:	cmp	r2, #0
   2aec0:	movne	r0, #0
   2aec4:	bne	2af08 <__assert_fail@plt+0x19568>
   2aec8:	cmp	r7, #0
   2aecc:	movne	r0, r9
   2aed0:	bne	2af08 <__assert_fail@plt+0x19568>
   2aed4:	ldr	r2, [sp, #4]
   2aed8:	sub	r3, r3, r2
   2aedc:	str	r3, [sp]
   2aee0:	add	r2, r9, #1
   2aee4:	str	r2, [sp, #8]
   2aee8:	sub	r4, r3, #1
   2aeec:	cmp	r3, #31
   2aef0:	bls	2af24 <__assert_fail@plt+0x19584>
   2aef4:	ldr	r3, [sp]
   2aef8:	ldr	r2, [sp, #4]
   2aefc:	mov	r1, r4
   2af00:	ldr	r0, [sp, #8]
   2af04:	bl	2a7e0 <__assert_fail@plt+0x18e40>
   2af08:	add	sp, sp, #68	; 0x44
   2af0c:	ldrd	r4, [sp]
   2af10:	ldrd	r6, [sp, #8]
   2af14:	ldrd	r8, [sp, #16]
   2af18:	ldrd	sl, [sp, #24]
   2af1c:	add	sp, sp, #32
   2af20:	pop	{pc}		; (ldr pc, [sp], #4)
   2af24:	add	r2, sp, #60	; 0x3c
   2af28:	mov	r1, r3
   2af2c:	ldr	r5, [sp, #4]
   2af30:	mov	r0, r5
   2af34:	bl	2a5b8 <__assert_fail@plt+0x18c18>
   2af38:	mov	r2, r0
   2af3c:	str	r0, [sp, #16]
   2af40:	ldr	r1, [sp, #60]	; 0x3c
   2af44:	str	r1, [sp, #32]
   2af48:	add	r1, r5, r1
   2af4c:	mov	r0, r5
   2af50:	bl	117f0 <strncasecmp@plt>
   2af54:	cmp	r0, #0
   2af58:	beq	2b1c4 <__assert_fail@plt+0x19824>
   2af5c:	ldr	r1, [sp]
   2af60:	ldr	r2, [sp, #16]
   2af64:	sub	r3, r1, r2
   2af68:	cmp	r3, r2
   2af6c:	movcc	r3, r2
   2af70:	add	r3, r3, #1
   2af74:	str	r3, [sp, #32]
   2af78:	str	r3, [sp, #60]	; 0x3c
   2af7c:	mov	r3, #0
   2af80:	str	r3, [sp, #12]
   2af84:	sub	r3, r2, #1
   2af88:	str	r3, [sp, #24]
   2af8c:	ldr	r0, [sp, #4]
   2af90:	sub	r3, r0, #1
   2af94:	add	sl, r3, r1
   2af98:	rsb	r9, r0, #1
   2af9c:	rsb	r3, r2, #1
   2afa0:	str	r3, [sp, #28]
   2afa4:	mov	r0, r4
   2afa8:	b	2b28c <__assert_fail@plt+0x198ec>
   2afac:	cmp	r5, r4
   2afb0:	bne	2b004 <__assert_fail@plt+0x19664>
   2afb4:	cmp	r6, fp
   2afb8:	beq	2b0bc <__assert_fail@plt+0x1971c>
   2afbc:	add	r9, sl, r6
   2afc0:	ldrb	r5, [r6, #1]!
   2afc4:	lsl	r3, r5, #1
   2afc8:	ldrh	r3, [r8, r3]
   2afcc:	tst	r3, #256	; 0x100
   2afd0:	beq	2afe0 <__assert_fail@plt+0x19640>
   2afd4:	bl	11748 <__ctype_tolower_loc@plt>
   2afd8:	ldr	r3, [r0]
   2afdc:	ldr	r5, [r3, r5, lsl #2]
   2afe0:	ldrb	r4, [r7, #1]!
   2afe4:	lsl	r3, r4, #1
   2afe8:	ldrh	r3, [r8, r3]
   2afec:	tst	r3, #256	; 0x100
   2aff0:	beq	2afac <__assert_fail@plt+0x1960c>
   2aff4:	bl	11748 <__ctype_tolower_loc@plt>
   2aff8:	ldr	r3, [r0]
   2affc:	ldr	r4, [r3, r4, lsl #2]
   2b000:	b	2afac <__assert_fail@plt+0x1960c>
   2b004:	ldr	r3, [sp]
   2b008:	cmp	r3, r9
   2b00c:	bls	2b0bc <__assert_fail@plt+0x1971c>
   2b010:	ldr	r3, [sp, #28]
   2b014:	ldr	r2, [sp, #12]
   2b018:	add	r3, r3, r2
   2b01c:	add	r3, r3, r9
   2b020:	str	r3, [sp, #12]
   2b024:	mov	r3, #0
   2b028:	str	r3, [sp, #20]
   2b02c:	ldr	r0, [sp, #24]
   2b030:	ldr	r3, [sp]
   2b034:	ldr	r2, [sp, #12]
   2b038:	add	r4, r3, r2
   2b03c:	str	r4, [sp, #24]
   2b040:	sub	r2, r4, r0
   2b044:	mov	r1, #0
   2b048:	ldr	r3, [sp, #8]
   2b04c:	add	r0, r3, r0
   2b050:	bl	1185c <memchr@plt>
   2b054:	adds	r3, r4, #0
   2b058:	movne	r3, #1
   2b05c:	cmp	r0, #0
   2b060:	moveq	r0, r3
   2b064:	movne	r0, #0
   2b068:	cmp	r0, #0
   2b06c:	beq	2af08 <__assert_fail@plt+0x19568>
   2b070:	ldr	r3, [sp, #16]
   2b074:	ldr	r2, [sp, #20]
   2b078:	cmp	r3, r2
   2b07c:	movcs	r4, r3
   2b080:	movcc	r4, r2
   2b084:	ldr	r3, [sp]
   2b088:	cmp	r3, r4
   2b08c:	bls	2b0bc <__assert_fail@plt+0x1971c>
   2b090:	bl	11778 <__ctype_b_loc@plt>
   2b094:	ldr	r8, [r0]
   2b098:	sub	r6, r4, #1
   2b09c:	ldr	r3, [sp, #4]
   2b0a0:	add	r6, r3, r6
   2b0a4:	ldr	r3, [sp, #12]
   2b0a8:	sub	r7, r3, #1
   2b0ac:	add	r7, r7, r4
   2b0b0:	ldr	r3, [sp, #8]
   2b0b4:	add	r7, r3, r7
   2b0b8:	b	2afbc <__assert_fail@plt+0x1961c>
   2b0bc:	ldr	r6, [sp, #44]	; 0x2c
   2b0c0:	ldr	r4, [sp, #16]
   2b0c4:	ldr	r5, [sp, #20]
   2b0c8:	cmp	r4, r5
   2b0cc:	bls	2b198 <__assert_fail@plt+0x197f8>
   2b0d0:	bl	11778 <__ctype_b_loc@plt>
   2b0d4:	ldr	r9, [r0]
   2b0d8:	ldr	r2, [sp, #4]
   2b0dc:	add	r8, r2, r4
   2b0e0:	ldr	r2, [sp, #12]
   2b0e4:	add	r7, r4, r2
   2b0e8:	ldr	r3, [sp, #8]
   2b0ec:	add	r7, r3, r7
   2b0f0:	str	fp, [sp, #36]	; 0x24
   2b0f4:	mov	fp, r5
   2b0f8:	str	sl, [sp, #40]	; 0x28
   2b0fc:	b	2b124 <__assert_fail@plt+0x19784>
   2b100:	bl	11748 <__ctype_tolower_loc@plt>
   2b104:	ldr	r3, [r0]
   2b108:	ldr	r4, [r3, r4, lsl #2]
   2b10c:	cmp	r5, r4
   2b110:	bne	2b160 <__assert_fail@plt+0x197c0>
   2b114:	sub	r3, r6, #1
   2b118:	cmp	fp, r6
   2b11c:	beq	2b1a4 <__assert_fail@plt+0x19804>
   2b120:	mov	r6, r3
   2b124:	add	sl, r6, #1
   2b128:	ldrb	r5, [r8, #-1]!
   2b12c:	lsl	r3, r5, #1
   2b130:	ldrh	r3, [r9, r3]
   2b134:	tst	r3, #256	; 0x100
   2b138:	beq	2b148 <__assert_fail@plt+0x197a8>
   2b13c:	bl	11748 <__ctype_tolower_loc@plt>
   2b140:	ldr	r3, [r0]
   2b144:	ldr	r5, [r3, r5, lsl #2]
   2b148:	ldrb	r4, [r7, #-1]!
   2b14c:	lsl	r3, r4, #1
   2b150:	ldrh	r3, [r9, r3]
   2b154:	tst	r3, #256	; 0x100
   2b158:	beq	2b10c <__assert_fail@plt+0x1976c>
   2b15c:	b	2b100 <__assert_fail@plt+0x19760>
   2b160:	mov	r2, sl
   2b164:	ldr	fp, [sp, #36]	; 0x24
   2b168:	ldr	sl, [sp, #40]	; 0x28
   2b16c:	ldr	r3, [sp, #20]
   2b170:	add	r3, r3, #1
   2b174:	cmp	r3, r2
   2b178:	bhi	2b1b4 <__assert_fail@plt+0x19814>
   2b17c:	ldr	r3, [sp, #12]
   2b180:	ldr	r2, [sp, #32]
   2b184:	add	r3, r3, r2
   2b188:	str	r3, [sp, #12]
   2b18c:	ldr	r3, [sp, #48]	; 0x30
   2b190:	str	r3, [sp, #20]
   2b194:	b	2b02c <__assert_fail@plt+0x1968c>
   2b198:	ldr	r3, [sp, #52]	; 0x34
   2b19c:	mov	r2, r3
   2b1a0:	b	2b16c <__assert_fail@plt+0x197cc>
   2b1a4:	ldr	fp, [sp, #36]	; 0x24
   2b1a8:	ldr	sl, [sp, #40]	; 0x28
   2b1ac:	mov	r2, r6
   2b1b0:	b	2b16c <__assert_fail@plt+0x197cc>
   2b1b4:	ldr	r3, [sp, #8]
   2b1b8:	ldr	r2, [sp, #12]
   2b1bc:	add	r0, r3, r2
   2b1c0:	b	2af08 <__assert_fail@plt+0x19568>
   2b1c4:	mov	r3, #0
   2b1c8:	str	r3, [sp, #20]
   2b1cc:	str	r3, [sp, #12]
   2b1d0:	ldr	r2, [sp, #16]
   2b1d4:	sub	r3, r2, #1
   2b1d8:	str	r3, [sp, #44]	; 0x2c
   2b1dc:	ldr	r1, [sp]
   2b1e0:	ldr	r3, [sp, #32]
   2b1e4:	sub	r3, r1, r3
   2b1e8:	str	r3, [sp, #48]	; 0x30
   2b1ec:	str	r2, [sp, #52]	; 0x34
   2b1f0:	ldr	r0, [sp, #4]
   2b1f4:	sub	r3, r0, #1
   2b1f8:	add	fp, r3, r1
   2b1fc:	rsb	sl, r0, #1
   2b200:	rsb	r3, r2, #1
   2b204:	str	r3, [sp, #28]
   2b208:	mov	r0, r4
   2b20c:	b	2b030 <__assert_fail@plt+0x19690>
   2b210:	cmp	r5, r4
   2b214:	bne	2b268 <__assert_fail@plt+0x198c8>
   2b218:	cmp	r6, sl
   2b21c:	beq	2b2f8 <__assert_fail@plt+0x19958>
   2b220:	add	fp, r9, r6
   2b224:	ldrb	r5, [r6, #1]!
   2b228:	lsl	r3, r5, #1
   2b22c:	ldrh	r3, [r8, r3]
   2b230:	tst	r3, #256	; 0x100
   2b234:	beq	2b244 <__assert_fail@plt+0x198a4>
   2b238:	bl	11748 <__ctype_tolower_loc@plt>
   2b23c:	ldr	r3, [r0]
   2b240:	ldr	r5, [r3, r5, lsl #2]
   2b244:	ldrb	r4, [r7, #1]!
   2b248:	lsl	r3, r4, #1
   2b24c:	ldrh	r3, [r8, r3]
   2b250:	tst	r3, #256	; 0x100
   2b254:	beq	2b210 <__assert_fail@plt+0x19870>
   2b258:	bl	11748 <__ctype_tolower_loc@plt>
   2b25c:	ldr	r3, [r0]
   2b260:	ldr	r4, [r3, r4, lsl #2]
   2b264:	b	2b210 <__assert_fail@plt+0x19870>
   2b268:	ldr	r3, [sp]
   2b26c:	cmp	r3, fp
   2b270:	bls	2b2f8 <__assert_fail@plt+0x19958>
   2b274:	ldr	r3, [sp, #28]
   2b278:	ldr	r2, [sp, #12]
   2b27c:	add	r3, r3, r2
   2b280:	add	r3, r3, fp
   2b284:	str	r3, [sp, #12]
   2b288:	ldr	r0, [sp, #20]
   2b28c:	ldr	r5, [sp]
   2b290:	ldr	r7, [sp, #12]
   2b294:	add	r4, r5, r7
   2b298:	str	r4, [sp, #20]
   2b29c:	sub	r2, r4, r0
   2b2a0:	mov	r1, #0
   2b2a4:	ldr	fp, [sp, #8]
   2b2a8:	add	r0, fp, r0
   2b2ac:	bl	1185c <memchr@plt>
   2b2b0:	adds	r3, r4, #0
   2b2b4:	movne	r3, #1
   2b2b8:	cmp	r0, #0
   2b2bc:	moveq	r0, r3
   2b2c0:	movne	r0, #0
   2b2c4:	cmp	r0, #0
   2b2c8:	beq	2b3b0 <__assert_fail@plt+0x19a10>
   2b2cc:	ldr	r3, [sp, #16]
   2b2d0:	cmp	r5, r3
   2b2d4:	bls	2b2f8 <__assert_fail@plt+0x19958>
   2b2d8:	bl	11778 <__ctype_b_loc@plt>
   2b2dc:	ldr	r8, [r0]
   2b2e0:	ldr	r2, [sp, #4]
   2b2e4:	ldr	r3, [sp, #24]
   2b2e8:	add	r6, r2, r3
   2b2ec:	add	r7, r7, r3
   2b2f0:	add	r7, fp, r7
   2b2f4:	b	2b220 <__assert_fail@plt+0x19880>
   2b2f8:	ldr	r4, [sp, #16]
   2b2fc:	sub	r6, r4, #1
   2b300:	cmn	r6, #1
   2b304:	beq	2b3a0 <__assert_fail@plt+0x19a00>
   2b308:	bl	11778 <__ctype_b_loc@plt>
   2b30c:	ldr	fp, [r0]
   2b310:	ldr	r3, [sp, #4]
   2b314:	add	r8, r3, r4
   2b318:	ldr	r3, [sp, #12]
   2b31c:	add	r7, r4, r3
   2b320:	ldr	r3, [sp, #8]
   2b324:	add	r7, r3, r7
   2b328:	b	2b34c <__assert_fail@plt+0x199ac>
   2b32c:	bl	11748 <__ctype_tolower_loc@plt>
   2b330:	ldr	r3, [r0]
   2b334:	ldr	r4, [r3, r4, lsl #2]
   2b338:	cmp	r5, r4
   2b33c:	bne	2b384 <__assert_fail@plt+0x199e4>
   2b340:	sub	r6, r6, #1
   2b344:	cmn	r6, #1
   2b348:	beq	2b3a0 <__assert_fail@plt+0x19a00>
   2b34c:	ldrb	r5, [r8, #-1]!
   2b350:	lsl	r3, r5, #1
   2b354:	ldrh	r3, [fp, r3]
   2b358:	tst	r3, #256	; 0x100
   2b35c:	beq	2b36c <__assert_fail@plt+0x199cc>
   2b360:	bl	11748 <__ctype_tolower_loc@plt>
   2b364:	ldr	r3, [r0]
   2b368:	ldr	r5, [r3, r5, lsl #2]
   2b36c:	ldrb	r4, [r7, #-1]!
   2b370:	lsl	r3, r4, #1
   2b374:	ldrh	r3, [fp, r3]
   2b378:	tst	r3, #256	; 0x100
   2b37c:	beq	2b338 <__assert_fail@plt+0x19998>
   2b380:	b	2b32c <__assert_fail@plt+0x1998c>
   2b384:	cmn	r6, #1
   2b388:	beq	2b3a0 <__assert_fail@plt+0x19a00>
   2b38c:	ldr	r3, [sp, #12]
   2b390:	ldr	r2, [sp, #32]
   2b394:	add	r3, r3, r2
   2b398:	str	r3, [sp, #12]
   2b39c:	b	2b288 <__assert_fail@plt+0x198e8>
   2b3a0:	ldr	r3, [sp, #8]
   2b3a4:	ldr	r2, [sp, #12]
   2b3a8:	add	r0, r3, r2
   2b3ac:	b	2af08 <__assert_fail@plt+0x19568>
   2b3b0:	mov	r0, #0
   2b3b4:	b	2af08 <__assert_fail@plt+0x19568>
   2b3b8:	cmp	r1, #2
   2b3bc:	bls	2b3ec <__assert_fail@plt+0x19a4c>
   2b3c0:	strd	r4, [sp, #-28]!	; 0xffffffe4
   2b3c4:	strd	r6, [sp, #8]
   2b3c8:	strd	r8, [sp, #16]
   2b3cc:	str	lr, [sp, #24]
   2b3d0:	mov	r7, #1
   2b3d4:	mov	ip, r7
   2b3d8:	mov	lr, #0
   2b3dc:	mvn	r4, #0
   2b3e0:	mov	r3, r7
   2b3e4:	mov	r8, r7
   2b3e8:	b	2b420 <__assert_fail@plt+0x19a80>
   2b3ec:	mov	r3, #1
   2b3f0:	str	r3, [r2]
   2b3f4:	sub	r0, r1, #1
   2b3f8:	bx	lr
   2b3fc:	cmp	r6, r5
   2b400:	beq	2b444 <__assert_fail@plt+0x19aa4>
   2b404:	mov	r4, lr
   2b408:	add	lr, lr, #1
   2b40c:	mov	r7, r8
   2b410:	mov	ip, r8
   2b414:	add	r3, ip, lr
   2b418:	cmp	r3, r1
   2b41c:	bcs	2b458 <__assert_fail@plt+0x19ab8>
   2b420:	ldrb	r6, [r0, r3]
   2b424:	add	r5, r0, ip
   2b428:	ldrb	r5, [r5, r4]
   2b42c:	cmp	r6, r5
   2b430:	bcs	2b3fc <__assert_fail@plt+0x19a5c>
   2b434:	sub	r7, r3, r4
   2b438:	mov	lr, r3
   2b43c:	mov	ip, #1
   2b440:	b	2b414 <__assert_fail@plt+0x19a74>
   2b444:	cmp	ip, r7
   2b448:	addne	ip, ip, #1
   2b44c:	addeq	lr, lr, r7
   2b450:	moveq	ip, #1
   2b454:	b	2b414 <__assert_fail@plt+0x19a74>
   2b458:	str	r7, [r2]
   2b45c:	mov	r8, #1
   2b460:	mov	ip, r8
   2b464:	mov	lr, #0
   2b468:	mvn	r7, #0
   2b46c:	mov	r3, r8
   2b470:	mov	r9, r8
   2b474:	b	2b49c <__assert_fail@plt+0x19afc>
   2b478:	cmp	r6, r5
   2b47c:	beq	2b4c0 <__assert_fail@plt+0x19b20>
   2b480:	mov	r7, lr
   2b484:	add	lr, lr, #1
   2b488:	mov	r8, r9
   2b48c:	mov	ip, r9
   2b490:	add	r3, ip, lr
   2b494:	cmp	r3, r1
   2b498:	bcs	2b4d4 <__assert_fail@plt+0x19b34>
   2b49c:	ldrb	r6, [r0, r3]
   2b4a0:	add	r5, r0, ip
   2b4a4:	ldrb	r5, [r5, r7]
   2b4a8:	cmp	r6, r5
   2b4ac:	bls	2b478 <__assert_fail@plt+0x19ad8>
   2b4b0:	sub	r8, r3, r7
   2b4b4:	mov	lr, r3
   2b4b8:	mov	ip, #1
   2b4bc:	b	2b490 <__assert_fail@plt+0x19af0>
   2b4c0:	cmp	ip, r8
   2b4c4:	addne	ip, ip, #1
   2b4c8:	addeq	lr, lr, r8
   2b4cc:	moveq	ip, #1
   2b4d0:	b	2b490 <__assert_fail@plt+0x19af0>
   2b4d4:	add	r7, r7, #1
   2b4d8:	add	r0, r4, #1
   2b4dc:	cmp	r7, r0
   2b4e0:	strcs	r8, [r2]
   2b4e4:	movcs	r0, r7
   2b4e8:	ldrd	r4, [sp]
   2b4ec:	ldrd	r6, [sp, #8]
   2b4f0:	ldrd	r8, [sp, #16]
   2b4f4:	add	sp, sp, #24
   2b4f8:	pop	{pc}		; (ldr pc, [sp], #4)
   2b4fc:	strd	r4, [sp, #-36]!	; 0xffffffdc
   2b500:	strd	r6, [sp, #8]
   2b504:	strd	r8, [sp, #16]
   2b508:	strd	sl, [sp, #24]
   2b50c:	str	lr, [sp, #32]
   2b510:	sub	sp, sp, #1072	; 0x430
   2b514:	sub	sp, sp, #4
   2b518:	mov	r5, r0
   2b51c:	mov	r6, r1
   2b520:	mov	r0, r2
   2b524:	str	r2, [sp]
   2b528:	mov	r4, r3
   2b52c:	add	r2, sp, #1056	; 0x420
   2b530:	add	r2, r2, #12
   2b534:	mov	r1, r3
   2b538:	bl	2b3b8 <__assert_fail@plt+0x19a18>
   2b53c:	mov	r7, r0
   2b540:	add	r3, sp, #40	; 0x28
   2b544:	add	r2, sp, #48	; 0x30
   2b548:	add	r2, r2, #1016	; 0x3f8
   2b54c:	str	r4, [r3, #4]!
   2b550:	cmp	r3, r2
   2b554:	bne	2b54c <__assert_fail@plt+0x19bac>
   2b558:	cmp	r4, #0
   2b55c:	beq	2b8d0 <__assert_fail@plt+0x19f30>
   2b560:	ldr	r3, [sp]
   2b564:	sub	r2, r3, #1
   2b568:	mov	fp, r3
   2b56c:	sub	r1, r4, #1
   2b570:	str	r1, [sp, #8]
   2b574:	add	r0, r1, r3
   2b578:	ldrb	r1, [r2, #1]!
   2b57c:	add	r3, sp, #1072	; 0x430
   2b580:	add	r1, r3, r1, lsl #2
   2b584:	mvn	r3, r2
   2b588:	add	r3, r3, r4
   2b58c:	add	r3, r3, fp
   2b590:	str	r3, [r1, #-1028]	; 0xfffffbfc
   2b594:	cmp	r2, r0
   2b598:	bne	2b578 <__assert_fail@plt+0x19bd8>
   2b59c:	ldr	r3, [sp, #1068]	; 0x42c
   2b5a0:	str	r3, [sp, #4]
   2b5a4:	mov	r2, r7
   2b5a8:	ldr	r0, [sp]
   2b5ac:	add	r1, r0, r3
   2b5b0:	bl	1161c <memcmp@plt>
   2b5b4:	cmp	r0, #0
   2b5b8:	beq	2b700 <__assert_fail@plt+0x19d60>
   2b5bc:	sub	r3, r4, r7
   2b5c0:	cmp	r3, r7
   2b5c4:	movcc	r3, r7
   2b5c8:	add	r3, r3, #1
   2b5cc:	str	r3, [sp, #12]
   2b5d0:	mov	r8, #0
   2b5d4:	sub	r3, r4, #1
   2b5d8:	str	r3, [sp, #4]
   2b5dc:	sub	r1, r7, #1
   2b5e0:	str	r1, [sp, #8]
   2b5e4:	ldr	r2, [sp]
   2b5e8:	add	r1, r2, r1
   2b5ec:	str	r1, [sp, #16]
   2b5f0:	mov	fp, r2
   2b5f4:	add	r1, r2, r7
   2b5f8:	str	r1, [sp]
   2b5fc:	sub	r9, r4, #2
   2b600:	add	r9, r9, r2
   2b604:	rsb	sl, r2, #1
   2b608:	mov	r0, r6
   2b60c:	mov	r6, r4
   2b610:	mov	r4, r7
   2b614:	b	2b7e0 <__assert_fail@plt+0x19e40>
   2b618:	cmp	sl, fp
   2b61c:	movcs	ip, sl
   2b620:	movcc	ip, fp
   2b624:	ldr	r3, [sp, #8]
   2b628:	cmp	ip, r3
   2b62c:	bcs	2b750 <__assert_fail@plt+0x19db0>
   2b630:	ldr	r0, [sp]
   2b634:	add	r3, r0, ip
   2b638:	add	r1, r8, ip
   2b63c:	add	r2, r5, r1
   2b640:	ldrb	r0, [r0, ip]
   2b644:	ldrb	r1, [r5, r1]
   2b648:	cmp	r0, r1
   2b64c:	bne	2b674 <__assert_fail@plt+0x19cd4>
   2b650:	ldr	r1, [sp, #12]
   2b654:	rsb	lr, r1, #1
   2b658:	add	ip, lr, r3
   2b65c:	cmp	r3, r9
   2b660:	beq	2b750 <__assert_fail@plt+0x19db0>
   2b664:	ldrb	r0, [r3, #1]!
   2b668:	ldrb	r1, [r2, #1]!
   2b66c:	cmp	r0, r1
   2b670:	beq	2b658 <__assert_fail@plt+0x19cb8>
   2b674:	ldr	r3, [sp, #16]
   2b678:	add	r8, r3, r8
   2b67c:	add	r8, ip, r8
   2b680:	mov	sl, r6
   2b684:	mov	r0, r7
   2b688:	add	r7, r8, r4
   2b68c:	sub	r2, r7, r0
   2b690:	mov	r1, #0
   2b694:	add	r0, r5, r0
   2b698:	bl	1185c <memchr@plt>
   2b69c:	adds	r3, r7, #0
   2b6a0:	movne	r3, #1
   2b6a4:	cmp	r0, #0
   2b6a8:	moveq	r0, r3
   2b6ac:	movne	r0, #0
   2b6b0:	cmp	r0, #0
   2b6b4:	beq	2b8f4 <__assert_fail@plt+0x19f54>
   2b6b8:	add	r3, r5, r7
   2b6bc:	ldrb	r3, [r3, #-1]
   2b6c0:	add	r2, sp, #1072	; 0x430
   2b6c4:	add	r3, r2, r3, lsl #2
   2b6c8:	ldr	r6, [r3, #-1028]	; 0xfffffbfc
   2b6cc:	cmp	r6, #0
   2b6d0:	beq	2b618 <__assert_fail@plt+0x19c78>
   2b6d4:	ldr	r3, [sp, #4]
   2b6d8:	cmp	sl, #0
   2b6dc:	cmpne	r3, r6
   2b6e0:	ldrhi	r6, [sp, #20]
   2b6e4:	add	r8, r8, r6
   2b6e8:	mov	sl, #0
   2b6ec:	b	2b684 <__assert_fail@plt+0x19ce4>
   2b6f0:	ldr	lr, [sp, #36]	; 0x24
   2b6f4:	b	2b7ac <__assert_fail@plt+0x19e0c>
   2b6f8:	add	r0, r5, r8
   2b6fc:	b	2b8f4 <__assert_fail@plt+0x19f54>
   2b700:	mov	sl, #0
   2b704:	mov	r8, sl
   2b708:	sub	r2, r7, #1
   2b70c:	str	r2, [sp, #24]
   2b710:	str	r7, [sp, #36]	; 0x24
   2b714:	ldr	r1, [sp, #4]
   2b718:	sub	r1, r4, r1
   2b71c:	str	r1, [sp, #20]
   2b720:	ldr	r1, [sp]
   2b724:	add	r2, r1, r2
   2b728:	str	r2, [sp, #28]
   2b72c:	str	r5, [sp, #32]
   2b730:	rsb	r2, r7, #1
   2b734:	str	r2, [sp, #16]
   2b738:	sub	r9, r4, #2
   2b73c:	add	r9, r9, fp
   2b740:	str	fp, [sp, #12]
   2b744:	mov	fp, r7
   2b748:	mov	r0, r6
   2b74c:	b	2b688 <__assert_fail@plt+0x19ce8>
   2b750:	cmp	sl, fp
   2b754:	ldrcs	lr, [sp, #36]	; 0x24
   2b758:	bcs	2b7ac <__assert_fail@plt+0x19e0c>
   2b75c:	ldr	r3, [sp, #24]
   2b760:	add	r2, r8, r3
   2b764:	add	r3, r5, r2
   2b768:	ldr	r0, [sp, #28]
   2b76c:	ldrb	r1, [r0]
   2b770:	ldrb	r2, [r5, r2]
   2b774:	cmp	r1, r2
   2b778:	bne	2b6f0 <__assert_fail@plt+0x19d50>
   2b77c:	mov	r2, r0
   2b780:	add	ip, r8, sl
   2b784:	add	ip, ip, r5
   2b788:	ldr	r1, [sp, #32]
   2b78c:	add	r6, r1, r8
   2b790:	sub	lr, r3, r6
   2b794:	cmp	r3, ip
   2b798:	beq	2b7ac <__assert_fail@plt+0x19e0c>
   2b79c:	ldrb	r0, [r2, #-1]!
   2b7a0:	ldrb	r1, [r3, #-1]!
   2b7a4:	cmp	r0, r1
   2b7a8:	beq	2b790 <__assert_fail@plt+0x19df0>
   2b7ac:	add	sl, sl, #1
   2b7b0:	cmp	sl, lr
   2b7b4:	bhi	2b6f8 <__assert_fail@plt+0x19d58>
   2b7b8:	ldr	r3, [sp, #4]
   2b7bc:	add	r8, r8, r3
   2b7c0:	ldr	sl, [sp, #20]
   2b7c4:	b	2b684 <__assert_fail@plt+0x19ce4>
   2b7c8:	add	r0, r5, r8
   2b7cc:	b	2b8f4 <__assert_fail@plt+0x19f54>
   2b7d0:	rsb	r3, r4, #1
   2b7d4:	add	r8, r3, r8
   2b7d8:	add	r8, ip, r8
   2b7dc:	mov	r0, r7
   2b7e0:	add	r7, r8, r6
   2b7e4:	sub	r2, r7, r0
   2b7e8:	mov	r1, #0
   2b7ec:	add	r0, r5, r0
   2b7f0:	bl	1185c <memchr@plt>
   2b7f4:	clz	r0, r0
   2b7f8:	lsr	r0, r0, #5
   2b7fc:	cmp	r7, #0
   2b800:	moveq	r0, #0
   2b804:	cmp	r0, #0
   2b808:	beq	2b8f4 <__assert_fail@plt+0x19f54>
   2b80c:	add	r3, r5, r7
   2b810:	ldrb	r3, [r3, #-1]
   2b814:	add	r2, sp, #1072	; 0x430
   2b818:	add	r3, r2, r3, lsl #2
   2b81c:	ldr	r3, [r3, #-1028]	; 0xfffffbfc
   2b820:	cmp	r3, #0
   2b824:	addne	r8, r8, r3
   2b828:	bne	2b7dc <__assert_fail@plt+0x19e3c>
   2b82c:	ldr	r3, [sp, #4]
   2b830:	cmp	r4, r3
   2b834:	bcs	2b87c <__assert_fail@plt+0x19edc>
   2b838:	add	r3, r8, r4
   2b83c:	add	r2, r5, r3
   2b840:	ldr	r1, [sp]
   2b844:	ldrb	r1, [r1]
   2b848:	ldrb	r3, [r5, r3]
   2b84c:	cmp	r1, r3
   2b850:	movne	ip, r4
   2b854:	bne	2b7d0 <__assert_fail@plt+0x19e30>
   2b858:	ldr	r3, [sp]
   2b85c:	add	ip, sl, r3
   2b860:	cmp	r3, r9
   2b864:	beq	2b87c <__assert_fail@plt+0x19edc>
   2b868:	ldrb	r0, [r3, #1]!
   2b86c:	ldrb	r1, [r2, #1]!
   2b870:	cmp	r0, r1
   2b874:	beq	2b85c <__assert_fail@plt+0x19ebc>
   2b878:	b	2b7d0 <__assert_fail@plt+0x19e30>
   2b87c:	ldr	r3, [sp, #8]
   2b880:	cmn	r3, #1
   2b884:	beq	2b7c8 <__assert_fail@plt+0x19e28>
   2b888:	ldr	r3, [sp, #8]
   2b88c:	add	r3, r8, r3
   2b890:	add	r2, r5, r3
   2b894:	ldr	r0, [sp, #16]
   2b898:	ldrb	r1, [r0]
   2b89c:	ldrb	r3, [r5, r3]
   2b8a0:	cmp	r1, r3
   2b8a4:	bne	2b8c4 <__assert_fail@plt+0x19f24>
   2b8a8:	mov	r3, r0
   2b8ac:	cmp	r3, fp
   2b8b0:	beq	2b7c8 <__assert_fail@plt+0x19e28>
   2b8b4:	ldrb	r0, [r3, #-1]!
   2b8b8:	ldrb	r1, [r2, #-1]!
   2b8bc:	cmp	r0, r1
   2b8c0:	beq	2b8ac <__assert_fail@plt+0x19f0c>
   2b8c4:	ldr	r3, [sp, #12]
   2b8c8:	add	r8, r8, r3
   2b8cc:	b	2b7dc <__assert_fail@plt+0x19e3c>
   2b8d0:	mov	r2, r7
   2b8d4:	ldr	r1, [sp, #1068]	; 0x42c
   2b8d8:	ldr	r3, [sp]
   2b8dc:	add	r1, r3, r1
   2b8e0:	mov	r0, r3
   2b8e4:	bl	1161c <memcmp@plt>
   2b8e8:	cmp	r0, #0
   2b8ec:	moveq	r0, #0
   2b8f0:	bne	2b5bc <__assert_fail@plt+0x19c1c>
   2b8f4:	add	sp, sp, #1072	; 0x430
   2b8f8:	add	sp, sp, #4
   2b8fc:	ldrd	r4, [sp]
   2b900:	ldrd	r6, [sp, #8]
   2b904:	ldrd	r8, [sp, #16]
   2b908:	ldrd	sl, [sp, #24]
   2b90c:	add	sp, sp, #32
   2b910:	pop	{pc}		; (ldr pc, [sp], #4)
   2b914:	strd	r4, [sp, #-36]!	; 0xffffffdc
   2b918:	strd	r6, [sp, #8]
   2b91c:	strd	r8, [sp, #16]
   2b920:	strd	sl, [sp, #24]
   2b924:	str	lr, [sp, #32]
   2b928:	sub	sp, sp, #44	; 0x2c
   2b92c:	ldrb	r3, [r0]
   2b930:	cmp	r3, #0
   2b934:	beq	2b9fc <__assert_fail@plt+0x1a05c>
   2b938:	ldrb	r2, [r1]
   2b93c:	cmp	r2, #0
   2b940:	beq	2bb14 <__assert_fail@plt+0x1a174>
   2b944:	mov	r7, r0
   2b948:	add	ip, r1, #1
   2b94c:	mov	lr, #1
   2b950:	mov	r6, ip
   2b954:	cmp	r3, r2
   2b958:	movne	lr, #0
   2b95c:	andeq	lr, lr, #1
   2b960:	ldrb	r3, [r7, #1]!
   2b964:	cmp	r3, #0
   2b968:	beq	2ba04 <__assert_fail@plt+0x1a064>
   2b96c:	ldrb	r2, [ip], #1
   2b970:	cmp	r2, #0
   2b974:	bne	2b950 <__assert_fail@plt+0x19fb0>
   2b978:	cmp	lr, #0
   2b97c:	movne	r5, r0
   2b980:	bne	2b9dc <__assert_fail@plt+0x1a03c>
   2b984:	mov	r4, r0
   2b988:	sub	r8, r6, r1
   2b98c:	ldrb	r1, [r1]
   2b990:	add	r0, r0, #1
   2b994:	bl	117b4 <strchr@plt>
   2b998:	mov	r5, r0
   2b99c:	cmp	r8, #1
   2b9a0:	cmpne	r0, #0
   2b9a4:	beq	2b9dc <__assert_fail@plt+0x1a03c>
   2b9a8:	sub	r3, r6, r8
   2b9ac:	str	r3, [sp, #8]
   2b9b0:	add	r4, r4, r8
   2b9b4:	cmp	r4, r0
   2b9b8:	subcs	r4, r4, r0
   2b9bc:	movcc	r4, #1
   2b9c0:	cmp	r8, #31
   2b9c4:	bls	2ba18 <__assert_fail@plt+0x1a078>
   2b9c8:	mov	r3, r8
   2b9cc:	ldr	r2, [sp, #8]
   2b9d0:	mov	r1, r4
   2b9d4:	bl	2b4fc <__assert_fail@plt+0x19b5c>
   2b9d8:	mov	r5, r0
   2b9dc:	mov	r0, r5
   2b9e0:	add	sp, sp, #44	; 0x2c
   2b9e4:	ldrd	r4, [sp]
   2b9e8:	ldrd	r6, [sp, #8]
   2b9ec:	ldrd	r8, [sp, #16]
   2b9f0:	ldrd	sl, [sp, #24]
   2b9f4:	add	sp, sp, #32
   2b9f8:	pop	{pc}		; (ldr pc, [sp], #4)
   2b9fc:	mov	r6, r1
   2ba00:	mov	lr, #1
   2ba04:	ldrb	r3, [r6]
   2ba08:	cmp	r3, #0
   2ba0c:	movne	r5, #0
   2ba10:	beq	2b978 <__assert_fail@plt+0x19fd8>
   2ba14:	b	2b9dc <__assert_fail@plt+0x1a03c>
   2ba18:	add	r2, sp, #36	; 0x24
   2ba1c:	mov	r1, r8
   2ba20:	ldr	r6, [sp, #8]
   2ba24:	mov	r0, r6
   2ba28:	bl	2b3b8 <__assert_fail@plt+0x19a18>
   2ba2c:	mov	r2, r0
   2ba30:	mov	r7, r0
   2ba34:	ldr	r1, [sp, #36]	; 0x24
   2ba38:	str	r1, [sp, #12]
   2ba3c:	add	r1, r6, r1
   2ba40:	mov	r0, r6
   2ba44:	bl	1161c <memcmp@plt>
   2ba48:	cmp	r0, #0
   2ba4c:	beq	2babc <__assert_fail@plt+0x1a11c>
   2ba50:	sub	r3, r8, r7
   2ba54:	cmp	r3, r7
   2ba58:	movcc	r3, r7
   2ba5c:	add	r3, r3, #1
   2ba60:	str	r3, [sp, #16]
   2ba64:	mov	r9, #0
   2ba68:	mov	r3, r7
   2ba6c:	sub	r1, r7, #1
   2ba70:	str	r1, [sp, #12]
   2ba74:	ldr	r2, [sp, #8]
   2ba78:	add	r1, r2, r1
   2ba7c:	str	r1, [sp, #20]
   2ba80:	mov	fp, r2
   2ba84:	add	r1, r2, r7
   2ba88:	str	r1, [sp, #4]
   2ba8c:	rsb	r1, r7, #1
   2ba90:	str	r1, [sp, #8]
   2ba94:	sub	r6, r8, #1
   2ba98:	add	r6, r6, r2
   2ba9c:	rsb	r7, r2, #1
   2baa0:	mov	r0, r4
   2baa4:	mov	r4, r3
   2baa8:	b	2bc48 <__assert_fail@plt+0x1a2a8>
   2baac:	ldr	lr, [sp, #28]
   2bab0:	b	2bb74 <__assert_fail@plt+0x1a1d4>
   2bab4:	add	r5, r5, r9
   2bab8:	b	2b9dc <__assert_fail@plt+0x1a03c>
   2babc:	mov	fp, #0
   2bac0:	mov	r9, fp
   2bac4:	mov	sl, r7
   2bac8:	sub	r2, r7, #1
   2bacc:	str	r2, [sp, #16]
   2bad0:	str	r7, [sp, #28]
   2bad4:	ldr	r3, [sp, #12]
   2bad8:	sub	r3, r8, r3
   2badc:	str	r3, [sp, #20]
   2bae0:	ldr	r3, [sp, #8]
   2bae4:	add	r2, r3, r2
   2bae8:	str	r2, [sp, #24]
   2baec:	sub	r6, r8, #1
   2baf0:	add	r6, r6, r3
   2baf4:	rsb	r7, r3, #1
   2baf8:	mov	r0, r4
   2bafc:	str	r8, [sp, #4]
   2bb00:	b	2bba4 <__assert_fail@plt+0x1a204>
   2bb04:	mov	r5, #0
   2bb08:	b	2b9dc <__assert_fail@plt+0x1a03c>
   2bb0c:	mov	r5, #0
   2bb10:	b	2b9dc <__assert_fail@plt+0x1a03c>
   2bb14:	mov	r5, r0
   2bb18:	b	2b9dc <__assert_fail@plt+0x1a03c>
   2bb1c:	cmp	sl, fp
   2bb20:	ldrls	lr, [sp, #28]
   2bb24:	bls	2bb74 <__assert_fail@plt+0x1a1d4>
   2bb28:	ldr	r3, [sp, #16]
   2bb2c:	add	r2, r9, r3
   2bb30:	add	r3, r5, r2
   2bb34:	ldr	r0, [sp, #24]
   2bb38:	ldrb	r1, [r0]
   2bb3c:	ldrb	r2, [r5, r2]
   2bb40:	cmp	r1, r2
   2bb44:	bne	2baac <__assert_fail@plt+0x1a10c>
   2bb48:	mov	r2, r0
   2bb4c:	add	ip, fp, r9
   2bb50:	add	ip, ip, r5
   2bb54:	add	r4, r5, r9
   2bb58:	sub	lr, r3, r4
   2bb5c:	cmp	r3, ip
   2bb60:	beq	2bb74 <__assert_fail@plt+0x1a1d4>
   2bb64:	ldrb	r0, [r2, #-1]!
   2bb68:	ldrb	r1, [r3, #-1]!
   2bb6c:	cmp	r0, r1
   2bb70:	beq	2bb58 <__assert_fail@plt+0x1a1b8>
   2bb74:	add	fp, fp, #1
   2bb78:	cmp	fp, lr
   2bb7c:	bhi	2bab4 <__assert_fail@plt+0x1a114>
   2bb80:	ldr	r3, [sp, #12]
   2bb84:	add	r9, r9, r3
   2bb88:	ldr	fp, [sp, #20]
   2bb8c:	b	2bba0 <__assert_fail@plt+0x1a200>
   2bb90:	rsb	r3, sl, #1
   2bb94:	add	r9, r3, r9
   2bb98:	add	r9, r9, r0
   2bb9c:	mov	fp, #0
   2bba0:	mov	r0, r8
   2bba4:	ldr	r3, [sp, #4]
   2bba8:	add	r8, r3, r9
   2bbac:	sub	r2, r8, r0
   2bbb0:	mov	r1, #0
   2bbb4:	add	r0, r5, r0
   2bbb8:	bl	1185c <memchr@plt>
   2bbbc:	adds	r3, r8, #0
   2bbc0:	movne	r3, #1
   2bbc4:	cmp	r0, #0
   2bbc8:	moveq	r0, r3
   2bbcc:	movne	r0, #0
   2bbd0:	cmp	r0, #0
   2bbd4:	beq	2bb04 <__assert_fail@plt+0x1a164>
   2bbd8:	cmp	sl, fp
   2bbdc:	movcs	r0, sl
   2bbe0:	movcc	r0, fp
   2bbe4:	ldr	r3, [sp, #4]
   2bbe8:	cmp	r3, r0
   2bbec:	bls	2bb1c <__assert_fail@plt+0x1a17c>
   2bbf0:	ldr	ip, [sp, #8]
   2bbf4:	add	r3, ip, r0
   2bbf8:	add	r1, r0, r9
   2bbfc:	add	r2, r5, r1
   2bc00:	ldrb	ip, [ip, r0]
   2bc04:	ldrb	r1, [r5, r1]
   2bc08:	cmp	ip, r1
   2bc0c:	bne	2bb90 <__assert_fail@plt+0x1a1f0>
   2bc10:	add	r0, r7, r3
   2bc14:	cmp	r3, r6
   2bc18:	beq	2bb1c <__assert_fail@plt+0x1a17c>
   2bc1c:	ldrb	ip, [r3, #1]!
   2bc20:	ldrb	r1, [r2, #1]!
   2bc24:	cmp	ip, r1
   2bc28:	beq	2bc10 <__assert_fail@plt+0x1a270>
   2bc2c:	b	2bb90 <__assert_fail@plt+0x1a1f0>
   2bc30:	add	r5, r5, r9
   2bc34:	b	2b9dc <__assert_fail@plt+0x1a03c>
   2bc38:	ldr	r3, [sp, #8]
   2bc3c:	add	r9, r3, r9
   2bc40:	add	r9, ip, r9
   2bc44:	mov	r0, sl
   2bc48:	add	sl, r8, r9
   2bc4c:	sub	r2, sl, r0
   2bc50:	mov	r1, #0
   2bc54:	add	r0, r5, r0
   2bc58:	bl	1185c <memchr@plt>
   2bc5c:	adds	r3, sl, #0
   2bc60:	movne	r3, #1
   2bc64:	cmp	r0, #0
   2bc68:	moveq	r0, r3
   2bc6c:	movne	r0, #0
   2bc70:	cmp	r0, #0
   2bc74:	beq	2bb0c <__assert_fail@plt+0x1a16c>
   2bc78:	cmp	r8, r4
   2bc7c:	bls	2bcc4 <__assert_fail@plt+0x1a324>
   2bc80:	add	r3, r4, r9
   2bc84:	add	r2, r5, r3
   2bc88:	ldr	r1, [sp, #4]
   2bc8c:	ldrb	r1, [r1]
   2bc90:	ldrb	r3, [r5, r3]
   2bc94:	cmp	r1, r3
   2bc98:	movne	ip, r4
   2bc9c:	bne	2bc38 <__assert_fail@plt+0x1a298>
   2bca0:	ldr	r3, [sp, #4]
   2bca4:	add	ip, r7, r3
   2bca8:	cmp	r3, r6
   2bcac:	beq	2bcc4 <__assert_fail@plt+0x1a324>
   2bcb0:	ldrb	r0, [r3, #1]!
   2bcb4:	ldrb	r1, [r2, #1]!
   2bcb8:	cmp	r0, r1
   2bcbc:	beq	2bca4 <__assert_fail@plt+0x1a304>
   2bcc0:	b	2bc38 <__assert_fail@plt+0x1a298>
   2bcc4:	ldr	r3, [sp, #12]
   2bcc8:	cmn	r3, #1
   2bccc:	beq	2bc30 <__assert_fail@plt+0x1a290>
   2bcd0:	ldr	r3, [sp, #12]
   2bcd4:	add	r3, r9, r3
   2bcd8:	add	r2, r5, r3
   2bcdc:	ldr	r0, [sp, #20]
   2bce0:	ldrb	r1, [r0]
   2bce4:	ldrb	r3, [r5, r3]
   2bce8:	cmp	r1, r3
   2bcec:	bne	2bd0c <__assert_fail@plt+0x1a36c>
   2bcf0:	mov	r3, r0
   2bcf4:	cmp	r3, fp
   2bcf8:	beq	2bc30 <__assert_fail@plt+0x1a290>
   2bcfc:	ldrb	r0, [r3, #-1]!
   2bd00:	ldrb	r1, [r2, #-1]!
   2bd04:	cmp	r0, r1
   2bd08:	beq	2bcf4 <__assert_fail@plt+0x1a354>
   2bd0c:	ldr	r3, [sp, #16]
   2bd10:	add	r9, r9, r3
   2bd14:	b	2bc44 <__assert_fail@plt+0x1a2a4>
   2bd18:	str	r4, [sp, #-8]!
   2bd1c:	str	lr, [sp, #4]
   2bd20:	movw	r3, #61884	; 0xf1bc
   2bd24:	movt	r3, #3
   2bd28:	ldr	r0, [r3]
   2bd2c:	bl	11784 <exit@plt>
   2bd30:	strd	r4, [sp, #-36]!	; 0xffffffdc
   2bd34:	strd	r6, [sp, #8]
   2bd38:	strd	r8, [sp, #16]
   2bd3c:	strd	sl, [sp, #24]
   2bd40:	str	lr, [sp, #32]
   2bd44:	sub	sp, sp, #12
   2bd48:	str	r0, [sp]
   2bd4c:	mov	r5, r1
   2bd50:	mov	r6, r2
   2bd54:	str	r2, [sp, #4]
   2bd58:	mov	r9, r3
   2bd5c:	bl	117a8 <strlen@plt>
   2bd60:	ldr	r4, [r5]
   2bd64:	cmp	r4, #0
   2bd68:	beq	2be24 <__assert_fail@plt+0x1a484>
   2bd6c:	mov	r8, r0
   2bd70:	mov	fp, #0
   2bd74:	mvn	sl, #0
   2bd78:	mov	r7, fp
   2bd7c:	b	2bd9c <__assert_fail@plt+0x1a3fc>
   2bd80:	mov	sl, r7
   2bd84:	b	2be04 <__assert_fail@plt+0x1a464>
   2bd88:	add	r7, r7, #1
   2bd8c:	ldr	r4, [r5, #4]!
   2bd90:	add	r6, r6, r9
   2bd94:	cmp	r4, #0
   2bd98:	beq	2bdfc <__assert_fail@plt+0x1a45c>
   2bd9c:	mov	r2, r8
   2bda0:	ldr	r1, [sp]
   2bda4:	mov	r0, r4
   2bda8:	bl	11958 <strncmp@plt>
   2bdac:	cmp	r0, #0
   2bdb0:	bne	2bd88 <__assert_fail@plt+0x1a3e8>
   2bdb4:	mov	r0, r4
   2bdb8:	bl	117a8 <strlen@plt>
   2bdbc:	cmp	r0, r8
   2bdc0:	beq	2bd80 <__assert_fail@plt+0x1a3e0>
   2bdc4:	cmn	sl, #1
   2bdc8:	moveq	sl, r7
   2bdcc:	beq	2bd88 <__assert_fail@plt+0x1a3e8>
   2bdd0:	ldr	r3, [sp, #4]
   2bdd4:	cmp	r3, #0
   2bdd8:	moveq	fp, #1
   2bddc:	beq	2bd88 <__assert_fail@plt+0x1a3e8>
   2bde0:	mov	r2, r9
   2bde4:	mov	r1, r6
   2bde8:	mla	r0, r9, sl, r3
   2bdec:	bl	1161c <memcmp@plt>
   2bdf0:	cmp	r0, #0
   2bdf4:	movne	fp, #1
   2bdf8:	b	2bd88 <__assert_fail@plt+0x1a3e8>
   2bdfc:	cmp	fp, #0
   2be00:	mvnne	sl, #1
   2be04:	mov	r0, sl
   2be08:	add	sp, sp, #12
   2be0c:	ldrd	r4, [sp]
   2be10:	ldrd	r6, [sp, #8]
   2be14:	ldrd	r8, [sp, #16]
   2be18:	ldrd	sl, [sp, #24]
   2be1c:	add	sp, sp, #32
   2be20:	pop	{pc}		; (ldr pc, [sp], #4)
   2be24:	mvn	sl, #0
   2be28:	b	2be04 <__assert_fail@plt+0x1a464>
   2be2c:	strd	r4, [sp, #-16]!
   2be30:	str	r6, [sp, #8]
   2be34:	str	lr, [sp, #12]
   2be38:	sub	sp, sp, #8
   2be3c:	mov	r6, r0
   2be40:	mov	r5, r1
   2be44:	cmn	r2, #1
   2be48:	mov	r2, #5
   2be4c:	movweq	r1, #58480	; 0xe470
   2be50:	movteq	r1, #2
   2be54:	movwne	r1, #58508	; 0xe48c
   2be58:	movtne	r1, #2
   2be5c:	mov	r0, #0
   2be60:	bl	11628 <dcgettext@plt>
   2be64:	mov	r4, r0
   2be68:	mov	r2, r5
   2be6c:	mov	r1, #8
   2be70:	mov	r0, #0
   2be74:	bl	1b094 <__assert_fail@plt+0x96f4>
   2be78:	mov	r5, r0
   2be7c:	mov	r1, r6
   2be80:	mov	r0, #1
   2be84:	bl	1b3f4 <__assert_fail@plt+0x9a54>
   2be88:	str	r0, [sp]
   2be8c:	mov	r3, r5
   2be90:	mov	r2, r4
   2be94:	mov	r1, #0
   2be98:	mov	r0, r1
   2be9c:	bl	116d0 <error@plt>
   2bea0:	add	sp, sp, #8
   2bea4:	ldrd	r4, [sp]
   2bea8:	ldr	r6, [sp, #8]
   2beac:	add	sp, sp, #12
   2beb0:	pop	{pc}		; (ldr pc, [sp], #4)
   2beb4:	strd	r4, [sp, #-36]!	; 0xffffffdc
   2beb8:	strd	r6, [sp, #8]
   2bebc:	strd	r8, [sp, #16]
   2bec0:	strd	sl, [sp, #24]
   2bec4:	str	lr, [sp, #32]
   2bec8:	sub	sp, sp, #12
   2becc:	mov	r7, r0
   2bed0:	mov	r4, r1
   2bed4:	mov	r8, r2
   2bed8:	mov	r2, #5
   2bedc:	movw	r1, #58540	; 0xe4ac
   2bee0:	movt	r1, #2
   2bee4:	mov	r0, #0
   2bee8:	bl	11628 <dcgettext@plt>
   2beec:	movw	r3, #61976	; 0xf218
   2bef0:	movt	r3, #3
   2bef4:	ldr	r1, [r3]
   2bef8:	bl	1194c <fputs@plt>
   2befc:	ldr	r5, [r7]
   2bf00:	cmp	r5, #0
   2bf04:	beq	2bfa8 <__assert_fail@plt+0x1a608>
   2bf08:	mov	r3, #0
   2bf0c:	str	r3, [sp]
   2bf10:	mov	r6, r3
   2bf14:	movw	sl, #61976	; 0xf218
   2bf18:	movt	sl, #3
   2bf1c:	movw	fp, #58564	; 0xe4c4
   2bf20:	movt	fp, #2
   2bf24:	movw	r3, #58572	; 0xe4cc
   2bf28:	movt	r3, #2
   2bf2c:	str	r3, [sp, #4]
   2bf30:	b	2bf68 <__assert_fail@plt+0x1a5c8>
   2bf34:	ldr	r9, [sl]
   2bf38:	mov	r0, r5
   2bf3c:	bl	1b410 <__assert_fail@plt+0x9a70>
   2bf40:	mov	r2, r0
   2bf44:	mov	r1, fp
   2bf48:	mov	r0, r9
   2bf4c:	bl	117c0 <fprintf@plt>
   2bf50:	str	r4, [sp]
   2bf54:	add	r6, r6, #1
   2bf58:	ldr	r5, [r7, #4]!
   2bf5c:	add	r4, r4, r8
   2bf60:	cmp	r5, #0
   2bf64:	beq	2bfa8 <__assert_fail@plt+0x1a608>
   2bf68:	cmp	r6, #0
   2bf6c:	beq	2bf34 <__assert_fail@plt+0x1a594>
   2bf70:	mov	r2, r8
   2bf74:	mov	r1, r4
   2bf78:	ldr	r0, [sp]
   2bf7c:	bl	1161c <memcmp@plt>
   2bf80:	cmp	r0, #0
   2bf84:	bne	2bf34 <__assert_fail@plt+0x1a594>
   2bf88:	ldr	r9, [sl]
   2bf8c:	mov	r0, r5
   2bf90:	bl	1b410 <__assert_fail@plt+0x9a70>
   2bf94:	mov	r2, r0
   2bf98:	ldr	r1, [sp, #4]
   2bf9c:	mov	r0, r9
   2bfa0:	bl	117c0 <fprintf@plt>
   2bfa4:	b	2bf54 <__assert_fail@plt+0x1a5b4>
   2bfa8:	movw	r3, #61976	; 0xf218
   2bfac:	movt	r3, #3
   2bfb0:	ldr	r1, [r3]
   2bfb4:	mov	r0, #10
   2bfb8:	bl	118f8 <putc@plt>
   2bfbc:	add	sp, sp, #12
   2bfc0:	ldrd	r4, [sp]
   2bfc4:	ldrd	r6, [sp, #8]
   2bfc8:	ldrd	r8, [sp, #16]
   2bfcc:	ldrd	sl, [sp, #24]
   2bfd0:	add	sp, sp, #32
   2bfd4:	pop	{pc}		; (ldr pc, [sp], #4)
   2bfd8:	strd	r4, [sp, #-24]!	; 0xffffffe8
   2bfdc:	strd	r6, [sp, #8]
   2bfe0:	str	r8, [sp, #16]
   2bfe4:	str	lr, [sp, #20]
   2bfe8:	mov	r7, r0
   2bfec:	mov	r6, r1
   2bff0:	mov	r4, r2
   2bff4:	mov	r5, r3
   2bff8:	ldr	r3, [sp, #24]
   2bffc:	mov	r2, r5
   2c000:	mov	r1, r4
   2c004:	mov	r0, r6
   2c008:	bl	2bd30 <__assert_fail@plt+0x1a390>
   2c00c:	cmp	r0, #0
   2c010:	blt	2c028 <__assert_fail@plt+0x1a688>
   2c014:	ldrd	r4, [sp]
   2c018:	ldrd	r6, [sp, #8]
   2c01c:	ldr	r8, [sp, #16]
   2c020:	add	sp, sp, #20
   2c024:	pop	{pc}		; (ldr pc, [sp], #4)
   2c028:	mov	r2, r0
   2c02c:	mov	r1, r6
   2c030:	mov	r0, r7
   2c034:	bl	2be2c <__assert_fail@plt+0x1a48c>
   2c038:	ldr	r2, [sp, #24]
   2c03c:	mov	r1, r5
   2c040:	mov	r0, r4
   2c044:	bl	2beb4 <__assert_fail@plt+0x1a514>
   2c048:	ldr	r3, [sp, #28]
   2c04c:	blx	r3
   2c050:	mvn	r0, #0
   2c054:	b	2c014 <__assert_fail@plt+0x1a674>
   2c058:	strd	r4, [sp, #-24]!	; 0xffffffe8
   2c05c:	strd	r6, [sp, #8]
   2c060:	str	r8, [sp, #16]
   2c064:	str	lr, [sp, #20]
   2c068:	ldr	r7, [r1]
   2c06c:	cmp	r7, #0
   2c070:	beq	2c0ac <__assert_fail@plt+0x1a70c>
   2c074:	mov	r6, r3
   2c078:	mov	r8, r0
   2c07c:	mov	r4, r2
   2c080:	mov	r5, r1
   2c084:	mov	r2, r6
   2c088:	mov	r1, r4
   2c08c:	mov	r0, r8
   2c090:	bl	1161c <memcmp@plt>
   2c094:	cmp	r0, #0
   2c098:	beq	2c0ac <__assert_fail@plt+0x1a70c>
   2c09c:	ldr	r7, [r5, #4]!
   2c0a0:	add	r4, r4, r6
   2c0a4:	cmp	r7, #0
   2c0a8:	bne	2c084 <__assert_fail@plt+0x1a6e4>
   2c0ac:	mov	r0, r7
   2c0b0:	ldrd	r4, [sp]
   2c0b4:	ldrd	r6, [sp, #8]
   2c0b8:	ldr	r8, [sp, #16]
   2c0bc:	add	sp, sp, #20
   2c0c0:	pop	{pc}		; (ldr pc, [sp], #4)
   2c0c4:	strd	r4, [sp, #-16]!
   2c0c8:	str	r6, [sp, #8]
   2c0cc:	str	lr, [sp, #12]
   2c0d0:	mov	r4, r0
   2c0d4:	bl	116b8 <__fpending@plt>
   2c0d8:	mov	r6, r0
   2c0dc:	mov	r0, r4
   2c0e0:	bl	115b0 <ferror@plt>
   2c0e4:	mov	r5, r0
   2c0e8:	mov	r0, r4
   2c0ec:	bl	11868 <fclose@plt>
   2c0f0:	cmp	r5, #0
   2c0f4:	bne	2c128 <__assert_fail@plt+0x1a788>
   2c0f8:	cmp	r0, #0
   2c0fc:	beq	2c118 <__assert_fail@plt+0x1a778>
   2c100:	cmp	r6, #0
   2c104:	bne	2c144 <__assert_fail@plt+0x1a7a4>
   2c108:	bl	117d8 <__errno_location@plt>
   2c10c:	ldr	r0, [r0]
   2c110:	subs	r0, r0, #9
   2c114:	mvnne	r0, #0
   2c118:	ldrd	r4, [sp]
   2c11c:	ldr	r6, [sp, #8]
   2c120:	add	sp, sp, #12
   2c124:	pop	{pc}		; (ldr pc, [sp], #4)
   2c128:	cmp	r0, #0
   2c12c:	bne	2c14c <__assert_fail@plt+0x1a7ac>
   2c130:	bl	117d8 <__errno_location@plt>
   2c134:	mov	r3, #0
   2c138:	str	r3, [r0]
   2c13c:	mvn	r0, #0
   2c140:	b	2c118 <__assert_fail@plt+0x1a778>
   2c144:	mvn	r0, #0
   2c148:	b	2c118 <__assert_fail@plt+0x1a778>
   2c14c:	mvn	r0, #0
   2c150:	b	2c118 <__assert_fail@plt+0x1a778>
   2c154:	strd	r4, [sp, #-32]!	; 0xffffffe0
   2c158:	strd	r6, [sp, #8]
   2c15c:	strd	r8, [sp, #16]
   2c160:	str	sl, [sp, #24]
   2c164:	str	lr, [sp, #28]
   2c168:	ldr	ip, [r0, #4]
   2c16c:	cmp	ip, r1
   2c170:	strcs	r1, [r0]
   2c174:	movcs	r4, #1
   2c178:	bcs	2c1c8 <__assert_fail@plt+0x1a828>
   2c17c:	mov	r7, r3
   2c180:	mov	r6, r1
   2c184:	mov	r5, r0
   2c188:	umull	r8, r9, r1, r3
   2c18c:	adds	r4, r9, #0
   2c190:	movne	r4, #1
   2c194:	cmp	r4, #0
   2c198:	bne	2c1e4 <__assert_fail@plt+0x1a844>
   2c19c:	ldr	r0, [r0, #8]
   2c1a0:	cmp	r0, r2
   2c1a4:	beq	2c1f8 <__assert_fail@plt+0x1a858>
   2c1a8:	mov	r1, r8
   2c1ac:	bl	1cb14 <__assert_fail@plt+0xb174>
   2c1b0:	subs	r8, r0, #0
   2c1b4:	beq	2c1c8 <__assert_fail@plt+0x1a828>
   2c1b8:	str	r8, [r5, #8]
   2c1bc:	str	r6, [r5, #4]
   2c1c0:	str	r6, [r5]
   2c1c4:	mov	r4, #1
   2c1c8:	mov	r0, r4
   2c1cc:	ldrd	r4, [sp]
   2c1d0:	ldrd	r6, [sp, #8]
   2c1d4:	ldrd	r8, [sp, #16]
   2c1d8:	ldr	sl, [sp, #24]
   2c1dc:	add	sp, sp, #28
   2c1e0:	pop	{pc}		; (ldr pc, [sp], #4)
   2c1e4:	bl	117d8 <__errno_location@plt>
   2c1e8:	mov	r3, #12
   2c1ec:	str	r3, [r0]
   2c1f0:	mov	r4, #0
   2c1f4:	b	2c1c8 <__assert_fail@plt+0x1a828>
   2c1f8:	mov	r0, r8
   2c1fc:	bl	1ca68 <__assert_fail@plt+0xb0c8>
   2c200:	subs	r8, r0, #0
   2c204:	beq	2c1c8 <__assert_fail@plt+0x1a828>
   2c208:	ldr	r1, [r5, #8]
   2c20c:	cmp	r1, #0
   2c210:	beq	2c1b8 <__assert_fail@plt+0x1a818>
   2c214:	ldr	r2, [r5]
   2c218:	mul	r2, r2, r7
   2c21c:	mov	r0, r8
   2c220:	bl	115d4 <memcpy@plt>
   2c224:	b	2c1b8 <__assert_fail@plt+0x1a818>
   2c228:	push	{lr}		; (str lr, [sp, #-4]!)
   2c22c:	sub	sp, sp, #268	; 0x10c
   2c230:	movw	r2, #257	; 0x101
   2c234:	add	r1, sp, #4
   2c238:	bl	2c428 <__assert_fail@plt+0x1aa88>
   2c23c:	cmp	r0, #0
   2c240:	movne	r0, #0
   2c244:	bne	2c27c <__assert_fail@plt+0x1a8dc>
   2c248:	movw	r1, #58580	; 0xe4d4
   2c24c:	movt	r1, #2
   2c250:	add	r0, sp, #4
   2c254:	bl	11544 <strcmp@plt>
   2c258:	cmp	r0, #0
   2c25c:	beq	2c278 <__assert_fail@plt+0x1a8d8>
   2c260:	movw	r1, #58584	; 0xe4d8
   2c264:	movt	r1, #2
   2c268:	add	r0, sp, #4
   2c26c:	bl	11544 <strcmp@plt>
   2c270:	adds	r0, r0, #0
   2c274:	movne	r0, #1
   2c278:	and	r0, r0, #1
   2c27c:	add	sp, sp, #268	; 0x10c
   2c280:	pop	{pc}		; (ldr pc, [sp], #4)
   2c284:	str	r4, [sp, #-8]!
   2c288:	str	lr, [sp, #4]
   2c28c:	mov	r0, #14
   2c290:	bl	118b0 <nl_langinfo@plt>
   2c294:	cmp	r0, #0
   2c298:	beq	2c2bc <__assert_fail@plt+0x1a91c>
   2c29c:	ldrb	r2, [r0]
   2c2a0:	movw	r3, #58592	; 0xe4e0
   2c2a4:	movt	r3, #2
   2c2a8:	cmp	r2, #0
   2c2ac:	moveq	r0, r3
   2c2b0:	ldr	r4, [sp]
   2c2b4:	add	sp, sp, #4
   2c2b8:	pop	{pc}		; (ldr pc, [sp], #4)
   2c2bc:	movw	r0, #58592	; 0xe4e0
   2c2c0:	movt	r0, #2
   2c2c4:	b	2c2b0 <__assert_fail@plt+0x1a910>
   2c2c8:	adds	r3, r0, #16
   2c2cc:	bmi	2c320 <__assert_fail@plt+0x1a980>
   2c2d0:	mov	r2, #0
   2c2d4:	cmp	r3, r0
   2c2d8:	bcc	2c320 <__assert_fail@plt+0x1a980>
   2c2dc:	cmp	r2, #0
   2c2e0:	bne	2c328 <__assert_fail@plt+0x1a988>
   2c2e4:	str	r4, [sp, #-8]!
   2c2e8:	str	lr, [sp, #4]
   2c2ec:	mov	r0, r3
   2c2f0:	bl	1170c <malloc@plt>
   2c2f4:	cmp	r0, #0
   2c2f8:	beq	2c314 <__assert_fail@plt+0x1a974>
   2c2fc:	add	r3, r0, #8
   2c300:	bic	r3, r3, #15
   2c304:	rsb	r2, r0, #8
   2c308:	add	r3, r3, r2
   2c30c:	add	r0, r0, r3
   2c310:	strb	r3, [r0, #-1]
   2c314:	ldr	r4, [sp]
   2c318:	add	sp, sp, #4
   2c31c:	pop	{pc}		; (ldr pc, [sp], #4)
   2c320:	mov	r2, #1
   2c324:	b	2c2dc <__assert_fail@plt+0x1a93c>
   2c328:	mov	r0, #0
   2c32c:	bx	lr
   2c330:	str	r4, [sp, #-8]!
   2c334:	str	lr, [sp, #4]
   2c338:	tst	r0, #7
   2c33c:	bne	2c354 <__assert_fail@plt+0x1a9b4>
   2c340:	tst	r0, #8
   2c344:	bne	2c358 <__assert_fail@plt+0x1a9b8>
   2c348:	ldr	r4, [sp]
   2c34c:	add	sp, sp, #4
   2c350:	pop	{pc}		; (ldr pc, [sp], #4)
   2c354:	bl	11964 <abort@plt>
   2c358:	ldrb	r3, [r0, #-1]
   2c35c:	sub	r0, r0, r3
   2c360:	bl	1c948 <__assert_fail@plt+0xafa8>
   2c364:	b	2c348 <__assert_fail@plt+0x1a9a8>
   2c368:	str	r4, [sp, #-8]!
   2c36c:	str	lr, [sp, #4]
   2c370:	mov	r4, r0
   2c374:	bl	11574 <wcwidth@plt>
   2c378:	cmp	r0, #0
   2c37c:	blt	2c38c <__assert_fail@plt+0x1a9ec>
   2c380:	ldr	r4, [sp]
   2c384:	add	sp, sp, #4
   2c388:	pop	{pc}		; (ldr pc, [sp], #4)
   2c38c:	mov	r0, r4
   2c390:	bl	1164c <iswcntrl@plt>
   2c394:	clz	r0, r0
   2c398:	lsr	r0, r0, #5
   2c39c:	b	2c380 <__assert_fail@plt+0x1a9e0>
   2c3a0:	strd	r4, [sp, #-16]!
   2c3a4:	str	r6, [sp, #8]
   2c3a8:	str	lr, [sp, #12]
   2c3ac:	mov	r5, r0
   2c3b0:	mov	r4, r1
   2c3b4:	ldr	r3, [r1], #16
   2c3b8:	cmp	r3, r1
   2c3bc:	strne	r3, [r0]
   2c3c0:	beq	2c3f0 <__assert_fail@plt+0x1aa50>
   2c3c4:	ldr	r3, [r4, #4]
   2c3c8:	str	r3, [r5, #4]
   2c3cc:	ldrb	r3, [r4, #8]
   2c3d0:	strb	r3, [r5, #8]
   2c3d4:	cmp	r3, #0
   2c3d8:	ldrne	r3, [r4, #12]
   2c3dc:	strne	r3, [r5, #12]
   2c3e0:	ldrd	r4, [sp]
   2c3e4:	ldr	r6, [sp, #8]
   2c3e8:	add	sp, sp, #12
   2c3ec:	pop	{pc}		; (ldr pc, [sp], #4)
   2c3f0:	add	r6, r0, #16
   2c3f4:	ldr	r2, [r4, #4]
   2c3f8:	mov	r0, r6
   2c3fc:	bl	115d4 <memcpy@plt>
   2c400:	str	r6, [r5]
   2c404:	b	2c3c4 <__assert_fail@plt+0x1aa24>
   2c408:	movw	r3, #58600	; 0xe4e8
   2c40c:	movt	r3, #2
   2c410:	lsr	r2, r0, #5
   2c414:	and	r0, r0, #31
   2c418:	ldr	r3, [r3, r2, lsl #2]
   2c41c:	lsr	r0, r3, r0
   2c420:	and	r0, r0, #1
   2c424:	bx	lr
   2c428:	strd	r4, [sp, #-16]!
   2c42c:	str	r6, [sp, #8]
   2c430:	str	lr, [sp, #12]
   2c434:	mov	r6, r1
   2c438:	mov	r4, r2
   2c43c:	mov	r1, #0
   2c440:	bl	11898 <setlocale@plt>
   2c444:	subs	r5, r0, #0
   2c448:	beq	2c48c <__assert_fail@plt+0x1aaec>
   2c44c:	mov	r0, r5
   2c450:	bl	117a8 <strlen@plt>
   2c454:	cmp	r4, r0
   2c458:	bhi	2c4a8 <__assert_fail@plt+0x1ab08>
   2c45c:	cmp	r4, #0
   2c460:	moveq	r0, #34	; 0x22
   2c464:	beq	2c4bc <__assert_fail@plt+0x1ab1c>
   2c468:	sub	r4, r4, #1
   2c46c:	mov	r2, r4
   2c470:	mov	r1, r5
   2c474:	mov	r0, r6
   2c478:	bl	115d4 <memcpy@plt>
   2c47c:	mov	r3, #0
   2c480:	strb	r3, [r6, r4]
   2c484:	mov	r0, #34	; 0x22
   2c488:	b	2c4bc <__assert_fail@plt+0x1ab1c>
   2c48c:	cmp	r4, #0
   2c490:	moveq	r0, #22
   2c494:	beq	2c4bc <__assert_fail@plt+0x1ab1c>
   2c498:	mov	r3, #0
   2c49c:	strb	r3, [r6]
   2c4a0:	mov	r0, #22
   2c4a4:	b	2c4bc <__assert_fail@plt+0x1ab1c>
   2c4a8:	add	r2, r0, #1
   2c4ac:	mov	r1, r5
   2c4b0:	mov	r0, r6
   2c4b4:	bl	115d4 <memcpy@plt>
   2c4b8:	mov	r0, #0
   2c4bc:	ldrd	r4, [sp]
   2c4c0:	ldr	r6, [sp, #8]
   2c4c4:	add	sp, sp, #12
   2c4c8:	pop	{pc}		; (ldr pc, [sp], #4)
   2c4cc:	str	r4, [sp, #-8]!
   2c4d0:	str	lr, [sp, #4]
   2c4d4:	mov	r1, #0
   2c4d8:	bl	11898 <setlocale@plt>
   2c4dc:	ldr	r4, [sp]
   2c4e0:	add	sp, sp, #4
   2c4e4:	pop	{pc}		; (ldr pc, [sp], #4)
   2c4e8:	str	r4, [sp, #-8]!
   2c4ec:	str	lr, [sp, #4]
   2c4f0:	mov	r2, #3
   2c4f4:	mov	r1, #0
   2c4f8:	bl	1c66c <__assert_fail@plt+0xaccc>
   2c4fc:	ldr	r4, [sp]
   2c500:	add	sp, sp, #4
   2c504:	pop	{pc}		; (ldr pc, [sp], #4)
   2c508:	eor	r1, r1, #-2147483648	; 0x80000000
   2c50c:	b	2c514 <__assert_fail@plt+0x1ab74>
   2c510:	eor	r3, r3, #-2147483648	; 0x80000000
   2c514:	push	{r4, r5, lr}
   2c518:	lsl	r4, r1, #1
   2c51c:	lsl	r5, r3, #1
   2c520:	teq	r4, r5
   2c524:	teqeq	r0, r2
   2c528:	orrsne	ip, r4, r0
   2c52c:	orrsne	ip, r5, r2
   2c530:	mvnsne	ip, r4, asr #21
   2c534:	mvnsne	ip, r5, asr #21
   2c538:	beq	2c724 <__assert_fail@plt+0x1ad84>
   2c53c:	lsr	r4, r4, #21
   2c540:	rsbs	r5, r4, r5, lsr #21
   2c544:	rsblt	r5, r5, #0
   2c548:	ble	2c568 <__assert_fail@plt+0x1abc8>
   2c54c:	add	r4, r4, r5
   2c550:	eor	r2, r0, r2
   2c554:	eor	r3, r1, r3
   2c558:	eor	r0, r2, r0
   2c55c:	eor	r1, r3, r1
   2c560:	eor	r2, r0, r2
   2c564:	eor	r3, r1, r3
   2c568:	cmp	r5, #54	; 0x36
   2c56c:	pophi	{r4, r5, pc}
   2c570:	tst	r1, #-2147483648	; 0x80000000
   2c574:	lsl	r1, r1, #12
   2c578:	mov	ip, #1048576	; 0x100000
   2c57c:	orr	r1, ip, r1, lsr #12
   2c580:	beq	2c58c <__assert_fail@plt+0x1abec>
   2c584:	rsbs	r0, r0, #0
   2c588:	rsc	r1, r1, #0
   2c58c:	tst	r3, #-2147483648	; 0x80000000
   2c590:	lsl	r3, r3, #12
   2c594:	orr	r3, ip, r3, lsr #12
   2c598:	beq	2c5a4 <__assert_fail@plt+0x1ac04>
   2c59c:	rsbs	r2, r2, #0
   2c5a0:	rsc	r3, r3, #0
   2c5a4:	teq	r4, r5
   2c5a8:	beq	2c70c <__assert_fail@plt+0x1ad6c>
   2c5ac:	sub	r4, r4, #1
   2c5b0:	rsbs	lr, r5, #32
   2c5b4:	blt	2c5d0 <__assert_fail@plt+0x1ac30>
   2c5b8:	lsl	ip, r2, lr
   2c5bc:	adds	r0, r0, r2, lsr r5
   2c5c0:	adc	r1, r1, #0
   2c5c4:	adds	r0, r0, r3, lsl lr
   2c5c8:	adcs	r1, r1, r3, asr r5
   2c5cc:	b	2c5ec <__assert_fail@plt+0x1ac4c>
   2c5d0:	sub	r5, r5, #32
   2c5d4:	add	lr, lr, #32
   2c5d8:	cmp	r2, #1
   2c5dc:	lsl	ip, r3, lr
   2c5e0:	orrcs	ip, ip, #2
   2c5e4:	adds	r0, r0, r3, asr r5
   2c5e8:	adcs	r1, r1, r3, asr #31
   2c5ec:	and	r5, r1, #-2147483648	; 0x80000000
   2c5f0:	bpl	2c600 <__assert_fail@plt+0x1ac60>
   2c5f4:	rsbs	ip, ip, #0
   2c5f8:	rscs	r0, r0, #0
   2c5fc:	rsc	r1, r1, #0
   2c600:	cmp	r1, #1048576	; 0x100000
   2c604:	bcc	2c644 <__assert_fail@plt+0x1aca4>
   2c608:	cmp	r1, #2097152	; 0x200000
   2c60c:	bcc	2c62c <__assert_fail@plt+0x1ac8c>
   2c610:	lsrs	r1, r1, #1
   2c614:	rrxs	r0, r0
   2c618:	rrx	ip, ip
   2c61c:	add	r4, r4, #1
   2c620:	lsl	r2, r4, #21
   2c624:	cmn	r2, #4194304	; 0x400000
   2c628:	bcs	2c784 <__assert_fail@plt+0x1ade4>
   2c62c:	cmp	ip, #-2147483648	; 0x80000000
   2c630:	lsrseq	ip, r0, #1
   2c634:	adcs	r0, r0, #0
   2c638:	adc	r1, r1, r4, lsl #20
   2c63c:	orr	r1, r1, r5
   2c640:	pop	{r4, r5, pc}
   2c644:	lsls	ip, ip, #1
   2c648:	adcs	r0, r0, r0
   2c64c:	adc	r1, r1, r1
   2c650:	tst	r1, #1048576	; 0x100000
   2c654:	sub	r4, r4, #1
   2c658:	bne	2c62c <__assert_fail@plt+0x1ac8c>
   2c65c:	teq	r1, #0
   2c660:	moveq	r1, r0
   2c664:	moveq	r0, #0
   2c668:	clz	r3, r1
   2c66c:	addeq	r3, r3, #32
   2c670:	sub	r3, r3, #11
   2c674:	subs	r2, r3, #32
   2c678:	bge	2c69c <__assert_fail@plt+0x1acfc>
   2c67c:	adds	r2, r2, #12
   2c680:	ble	2c698 <__assert_fail@plt+0x1acf8>
   2c684:	add	ip, r2, #20
   2c688:	rsb	r2, r2, #12
   2c68c:	lsl	r0, r1, ip
   2c690:	lsr	r1, r1, r2
   2c694:	b	2c6ac <__assert_fail@plt+0x1ad0c>
   2c698:	add	r2, r2, #20
   2c69c:	rsble	ip, r2, #32
   2c6a0:	lsl	r1, r1, r2
   2c6a4:	orrle	r1, r1, r0, lsr ip
   2c6a8:	lslle	r0, r0, r2
   2c6ac:	subs	r4, r4, r3
   2c6b0:	addge	r1, r1, r4, lsl #20
   2c6b4:	orrge	r1, r1, r5
   2c6b8:	popge	{r4, r5, pc}
   2c6bc:	mvn	r4, r4
   2c6c0:	subs	r4, r4, #31
   2c6c4:	bge	2c700 <__assert_fail@plt+0x1ad60>
   2c6c8:	adds	r4, r4, #12
   2c6cc:	bgt	2c6e8 <__assert_fail@plt+0x1ad48>
   2c6d0:	add	r4, r4, #20
   2c6d4:	rsb	r2, r4, #32
   2c6d8:	lsr	r0, r0, r4
   2c6dc:	orr	r0, r0, r1, lsl r2
   2c6e0:	orr	r1, r5, r1, lsr r4
   2c6e4:	pop	{r4, r5, pc}
   2c6e8:	rsb	r4, r4, #12
   2c6ec:	rsb	r2, r4, #32
   2c6f0:	lsr	r0, r0, r2
   2c6f4:	orr	r0, r0, r1, lsl r4
   2c6f8:	mov	r1, r5
   2c6fc:	pop	{r4, r5, pc}
   2c700:	lsr	r0, r1, r4
   2c704:	mov	r1, r5
   2c708:	pop	{r4, r5, pc}
   2c70c:	teq	r4, #0
   2c710:	eor	r3, r3, #1048576	; 0x100000
   2c714:	eoreq	r1, r1, #1048576	; 0x100000
   2c718:	addeq	r4, r4, #1
   2c71c:	subne	r5, r5, #1
   2c720:	b	2c5ac <__assert_fail@plt+0x1ac0c>
   2c724:	mvns	ip, r4, asr #21
   2c728:	mvnsne	ip, r5, asr #21
   2c72c:	beq	2c794 <__assert_fail@plt+0x1adf4>
   2c730:	teq	r4, r5
   2c734:	teqeq	r0, r2
   2c738:	beq	2c74c <__assert_fail@plt+0x1adac>
   2c73c:	orrs	ip, r4, r0
   2c740:	moveq	r1, r3
   2c744:	moveq	r0, r2
   2c748:	pop	{r4, r5, pc}
   2c74c:	teq	r1, r3
   2c750:	movne	r1, #0
   2c754:	movne	r0, #0
   2c758:	popne	{r4, r5, pc}
   2c75c:	lsrs	ip, r4, #21
   2c760:	bne	2c774 <__assert_fail@plt+0x1add4>
   2c764:	lsls	r0, r0, #1
   2c768:	adcs	r1, r1, r1
   2c76c:	orrcs	r1, r1, #-2147483648	; 0x80000000
   2c770:	pop	{r4, r5, pc}
   2c774:	adds	r4, r4, #4194304	; 0x400000
   2c778:	addcc	r1, r1, #1048576	; 0x100000
   2c77c:	popcc	{r4, r5, pc}
   2c780:	and	r5, r1, #-2147483648	; 0x80000000
   2c784:	orr	r1, r5, #2130706432	; 0x7f000000
   2c788:	orr	r1, r1, #15728640	; 0xf00000
   2c78c:	mov	r0, #0
   2c790:	pop	{r4, r5, pc}
   2c794:	mvns	ip, r4, asr #21
   2c798:	movne	r1, r3
   2c79c:	movne	r0, r2
   2c7a0:	mvnseq	ip, r5, asr #21
   2c7a4:	movne	r3, r1
   2c7a8:	movne	r2, r0
   2c7ac:	orrs	r4, r0, r1, lsl #12
   2c7b0:	orrseq	r5, r2, r3, lsl #12
   2c7b4:	teqeq	r1, r3
   2c7b8:	orrne	r1, r1, #524288	; 0x80000
   2c7bc:	pop	{r4, r5, pc}
   2c7c0:	teq	r0, #0
   2c7c4:	moveq	r1, #0
   2c7c8:	bxeq	lr
   2c7cc:	push	{r4, r5, lr}
   2c7d0:	mov	r4, #1024	; 0x400
   2c7d4:	add	r4, r4, #50	; 0x32
   2c7d8:	mov	r5, #0
   2c7dc:	mov	r1, #0
   2c7e0:	b	2c65c <__assert_fail@plt+0x1acbc>
   2c7e4:	teq	r0, #0
   2c7e8:	moveq	r1, #0
   2c7ec:	bxeq	lr
   2c7f0:	push	{r4, r5, lr}
   2c7f4:	mov	r4, #1024	; 0x400
   2c7f8:	add	r4, r4, #50	; 0x32
   2c7fc:	ands	r5, r0, #-2147483648	; 0x80000000
   2c800:	rsbmi	r0, r0, #0
   2c804:	mov	r1, #0
   2c808:	b	2c65c <__assert_fail@plt+0x1acbc>
   2c80c:	lsls	r2, r0, #1
   2c810:	asr	r1, r2, #3
   2c814:	rrx	r1, r1
   2c818:	lsl	r0, r2, #28
   2c81c:	andsne	r3, r2, #-16777216	; 0xff000000
   2c820:	teqne	r3, #-16777216	; 0xff000000
   2c824:	eorne	r1, r1, #939524096	; 0x38000000
   2c828:	bxne	lr
   2c82c:	bics	r2, r2, #-16777216	; 0xff000000
   2c830:	bxeq	lr
   2c834:	teq	r3, #-16777216	; 0xff000000
   2c838:	orreq	r1, r1, #524288	; 0x80000
   2c83c:	bxeq	lr
   2c840:	push	{r4, r5, lr}
   2c844:	mov	r4, #896	; 0x380
   2c848:	and	r5, r1, #-2147483648	; 0x80000000
   2c84c:	bic	r1, r1, #-2147483648	; 0x80000000
   2c850:	b	2c65c <__assert_fail@plt+0x1acbc>
   2c854:	orrs	r2, r0, r1
   2c858:	bxeq	lr
   2c85c:	push	{r4, r5, lr}
   2c860:	mov	r5, #0
   2c864:	b	2c884 <__assert_fail@plt+0x1aee4>
   2c868:	orrs	r2, r0, r1
   2c86c:	bxeq	lr
   2c870:	push	{r4, r5, lr}
   2c874:	ands	r5, r1, #-2147483648	; 0x80000000
   2c878:	bpl	2c884 <__assert_fail@plt+0x1aee4>
   2c87c:	rsbs	r0, r0, #0
   2c880:	rsc	r1, r1, #0
   2c884:	mov	r4, #1024	; 0x400
   2c888:	add	r4, r4, #50	; 0x32
   2c88c:	lsrs	ip, r1, #22
   2c890:	beq	2c600 <__assert_fail@plt+0x1ac60>
   2c894:	mov	r2, #3
   2c898:	lsrs	ip, ip, #3
   2c89c:	addne	r2, r2, #3
   2c8a0:	lsrs	ip, ip, #3
   2c8a4:	addne	r2, r2, #3
   2c8a8:	add	r2, r2, ip, lsr #3
   2c8ac:	rsb	r3, r2, #32
   2c8b0:	lsl	ip, r0, r3
   2c8b4:	lsr	r0, r0, r2
   2c8b8:	orr	r0, r0, r1, lsl r3
   2c8bc:	lsr	r1, r1, r2
   2c8c0:	add	r4, r4, r2
   2c8c4:	b	2c600 <__assert_fail@plt+0x1ac60>
   2c8c8:	cmp	r3, #0
   2c8cc:	cmpeq	r2, #0
   2c8d0:	bne	2c8e8 <__assert_fail@plt+0x1af48>
   2c8d4:	cmp	r1, #0
   2c8d8:	cmpeq	r0, #0
   2c8dc:	mvnne	r1, #0
   2c8e0:	mvnne	r0, #0
   2c8e4:	b	2c904 <__assert_fail@plt+0x1af64>
   2c8e8:	sub	sp, sp, #8
   2c8ec:	push	{sp, lr}
   2c8f0:	bl	2c958 <__assert_fail@plt+0x1afb8>
   2c8f4:	ldr	lr, [sp, #4]
   2c8f8:	add	sp, sp, #8
   2c8fc:	pop	{r2, r3}
   2c900:	bx	lr
   2c904:	push	{r1, lr}
   2c908:	mov	r0, #8
   2c90c:	bl	11520 <raise@plt>
   2c910:	pop	{r1, pc}
   2c914:	andeq	r0, r0, r0
   2c918:	vmov	d6, r0, r1
   2c91c:	vldr	d7, [pc, #36]	; 2c948 <__assert_fail@plt+0x1afa8>
   2c920:	vldr	d5, [pc, #40]	; 2c950 <__assert_fail@plt+0x1afb0>
   2c924:	vmul.f64	d7, d6, d7
   2c928:	vcvt.u32.f64	s14, d7
   2c92c:	vcvt.f64.u32	d4, s14
   2c930:	vmov	r1, s14
   2c934:	vmls.f64	d6, d4, d5
   2c938:	vcvt.u32.f64	s15, d6
   2c93c:	vmov	r0, s15
   2c940:	bx	lr
   2c944:	nop			; (mov r0, r0)
   2c948:	andeq	r0, r0, r0
   2c94c:	ldclcc	0, cr0, [r0]
   2c950:	andeq	r0, r0, r0
   2c954:	mvnsmi	r0, r0
   2c958:	cmp	r1, r3
   2c95c:	cmpeq	r0, r2
   2c960:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2c964:	mov	r4, r0
   2c968:	movcc	r0, #0
   2c96c:	mov	r5, r1
   2c970:	ldr	lr, [sp, #36]	; 0x24
   2c974:	movcc	r1, r0
   2c978:	bcc	2ca74 <__assert_fail@plt+0x1b0d4>
   2c97c:	cmp	r3, #0
   2c980:	clzeq	ip, r2
   2c984:	clzne	ip, r3
   2c988:	addeq	ip, ip, #32
   2c98c:	cmp	r5, #0
   2c990:	clzeq	r1, r4
   2c994:	addeq	r1, r1, #32
   2c998:	clzne	r1, r5
   2c99c:	sub	ip, ip, r1
   2c9a0:	sub	sl, ip, #32
   2c9a4:	lsl	r9, r3, ip
   2c9a8:	rsb	fp, ip, #32
   2c9ac:	orr	r9, r9, r2, lsl sl
   2c9b0:	orr	r9, r9, r2, lsr fp
   2c9b4:	lsl	r8, r2, ip
   2c9b8:	cmp	r5, r9
   2c9bc:	cmpeq	r4, r8
   2c9c0:	movcc	r0, #0
   2c9c4:	movcc	r1, r0
   2c9c8:	bcc	2c9e4 <__assert_fail@plt+0x1b044>
   2c9cc:	mov	r0, #1
   2c9d0:	subs	r4, r4, r8
   2c9d4:	lsl	r1, r0, sl
   2c9d8:	orr	r1, r1, r0, lsr fp
   2c9dc:	lsl	r0, r0, ip
   2c9e0:	sbc	r5, r5, r9
   2c9e4:	cmp	ip, #0
   2c9e8:	beq	2ca74 <__assert_fail@plt+0x1b0d4>
   2c9ec:	lsr	r6, r8, #1
   2c9f0:	orr	r6, r6, r9, lsl #31
   2c9f4:	lsr	r7, r9, #1
   2c9f8:	mov	r2, ip
   2c9fc:	b	2ca20 <__assert_fail@plt+0x1b080>
   2ca00:	subs	r3, r4, r6
   2ca04:	sbc	r8, r5, r7
   2ca08:	adds	r3, r3, r3
   2ca0c:	adc	r8, r8, r8
   2ca10:	adds	r4, r3, #1
   2ca14:	adc	r5, r8, #0
   2ca18:	subs	r2, r2, #1
   2ca1c:	beq	2ca3c <__assert_fail@plt+0x1b09c>
   2ca20:	cmp	r5, r7
   2ca24:	cmpeq	r4, r6
   2ca28:	bcs	2ca00 <__assert_fail@plt+0x1b060>
   2ca2c:	adds	r4, r4, r4
   2ca30:	adc	r5, r5, r5
   2ca34:	subs	r2, r2, #1
   2ca38:	bne	2ca20 <__assert_fail@plt+0x1b080>
   2ca3c:	lsr	r3, r4, ip
   2ca40:	orr	r3, r3, r5, lsl fp
   2ca44:	lsr	r2, r5, ip
   2ca48:	orr	r3, r3, r5, lsr sl
   2ca4c:	adds	r0, r0, r4
   2ca50:	mov	r4, r3
   2ca54:	lsl	r3, r2, ip
   2ca58:	orr	r3, r3, r4, lsl sl
   2ca5c:	lsl	ip, r4, ip
   2ca60:	orr	r3, r3, r4, lsr fp
   2ca64:	adc	r1, r1, r5
   2ca68:	subs	r0, r0, ip
   2ca6c:	mov	r5, r2
   2ca70:	sbc	r1, r1, r3
   2ca74:	cmp	lr, #0
   2ca78:	strdne	r4, [lr]
   2ca7c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2ca80:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   2ca84:	mov	r7, r0
   2ca88:	ldr	r6, [pc, #72]	; 2cad8 <__assert_fail@plt+0x1b138>
   2ca8c:	ldr	r5, [pc, #72]	; 2cadc <__assert_fail@plt+0x1b13c>
   2ca90:	add	r6, pc, r6
   2ca94:	add	r5, pc, r5
   2ca98:	sub	r6, r6, r5
   2ca9c:	mov	r8, r1
   2caa0:	mov	r9, r2
   2caa4:	bl	114d0 <pthread_mutex_unlock@plt-0x20>
   2caa8:	asrs	r6, r6, #2
   2caac:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   2cab0:	mov	r4, #0
   2cab4:	add	r4, r4, #1
   2cab8:	ldr	r3, [r5], #4
   2cabc:	mov	r2, r9
   2cac0:	mov	r1, r8
   2cac4:	mov	r0, r7
   2cac8:	blx	r3
   2cacc:	cmp	r6, r4
   2cad0:	bne	2cab4 <__assert_fail@plt+0x1b114>
   2cad4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   2cad8:	andeq	r2, r1, ip, ror r4
   2cadc:	andeq	r2, r1, r4, ror r4
   2cae0:	bx	lr
   2cae4:	ldr	r3, [pc, #12]	; 2caf8 <__assert_fail@plt+0x1b158>
   2cae8:	mov	r1, #0
   2caec:	add	r3, pc, r3
   2caf0:	ldr	r2, [r3]
   2caf4:	b	117fc <__cxa_atexit@plt>
   2caf8:			; <UNDEFINED> instruction: 0x000126b4

Disassembly of section .fini:

0002cafc <.fini>:
   2cafc:	push	{r3, lr}
   2cb00:	pop	{r3, pc}
