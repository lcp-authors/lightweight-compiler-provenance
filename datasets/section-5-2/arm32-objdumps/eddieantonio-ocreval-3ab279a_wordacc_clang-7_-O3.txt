
../repos/eddieantonio-ocreval-3ab279a/wordacc/wordacc:     file format elf32-littlearm


Disassembly of section .init:

00010afc <.init>:
   10afc:	push	{r3, lr}
   10b00:	bl	10d0c <__assert_fail@plt+0x4c>
   10b04:	pop	{r3, pc}

Disassembly of section .plt:

00010b08 <calloc@plt-0x14>:
   10b08:	push	{lr}		; (str lr, [sp, #-4]!)
   10b0c:	ldr	lr, [pc, #4]	; 10b18 <calloc@plt-0x4>
   10b10:	add	lr, pc, lr
   10b14:	ldr	pc, [lr, #8]!
   10b18:	andeq	r8, r1, r8, ror #9

00010b1c <calloc@plt>:
   10b1c:	add	ip, pc, #0, 12
   10b20:	add	ip, ip, #24, 20	; 0x18000
   10b24:	ldr	pc, [ip, #1256]!	; 0x4e8

00010b28 <strcmp@plt>:
   10b28:	add	ip, pc, #0, 12
   10b2c:	add	ip, ip, #24, 20	; 0x18000
   10b30:	ldr	pc, [ip, #1248]!	; 0x4e0

00010b34 <strtol@plt>:
   10b34:	add	ip, pc, #0, 12
   10b38:	add	ip, ip, #24, 20	; 0x18000
   10b3c:	ldr	pc, [ip, #1240]!	; 0x4d8

00010b40 <fopen@plt>:
   10b40:	add	ip, pc, #0, 12
   10b44:	add	ip, ip, #24, 20	; 0x18000
   10b48:	ldr	pc, [ip, #1232]!	; 0x4d0

00010b4c <free@plt>:
   10b4c:	add	ip, pc, #0, 12
   10b50:	add	ip, ip, #24, 20	; 0x18000
   10b54:	ldr	pc, [ip, #1224]!	; 0x4c8

00010b58 <utf8proc_get_property@plt>:
   10b58:	add	ip, pc, #0, 12
   10b5c:	add	ip, ip, #24, 20	; 0x18000
   10b60:	ldr	pc, [ip, #1216]!	; 0x4c0

00010b64 <fgets@plt>:
   10b64:	add	ip, pc, #0, 12
   10b68:	add	ip, ip, #24, 20	; 0x18000
   10b6c:	ldr	pc, [ip, #1208]!	; 0x4b8

00010b70 <utf8proc_encode_char@plt>:
   10b70:	add	ip, pc, #0, 12
   10b74:	add	ip, ip, #24, 20	; 0x18000
   10b78:	ldr	pc, [ip, #1200]!	; 0x4b0

00010b7c <strdup@plt>:
   10b7c:	add	ip, pc, #0, 12
   10b80:	add	ip, ip, #24, 20	; 0x18000
   10b84:	ldr	pc, [ip, #1192]!	; 0x4a8

00010b88 <rewind@plt>:
   10b88:	add	ip, pc, #0, 12
   10b8c:	add	ip, ip, #24, 20	; 0x18000
   10b90:	ldr	pc, [ip, #1184]!	; 0x4a0

00010b94 <unlink@plt>:
   10b94:	add	ip, pc, #0, 12
   10b98:	add	ip, ip, #24, 20	; 0x18000
   10b9c:	ldr	pc, [ip, #1176]!	; 0x498

00010ba0 <utf8proc_tolower@plt>:
   10ba0:	add	ip, pc, #0, 12
   10ba4:	add	ip, ip, #24, 20	; 0x18000
   10ba8:	ldr	pc, [ip, #1168]!	; 0x490

00010bac <__xstat@plt>:
   10bac:	add	ip, pc, #0, 12
   10bb0:	add	ip, ip, #24, 20	; 0x18000
   10bb4:	ldr	pc, [ip, #1160]!	; 0x488

00010bb8 <fwrite@plt>:
   10bb8:	add	ip, pc, #0, 12
   10bbc:	add	ip, ip, #24, 20	; 0x18000
   10bc0:	ldr	pc, [ip, #1152]!	; 0x480

00010bc4 <fread@plt>:
   10bc4:	add	ip, pc, #0, 12
   10bc8:	add	ip, ip, #24, 20	; 0x18000
   10bcc:	ldr	pc, [ip, #1144]!	; 0x478

00010bd0 <utf8proc_iterate@plt>:
   10bd0:	add	ip, pc, #0, 12
   10bd4:	add	ip, ip, #24, 20	; 0x18000
   10bd8:	ldr	pc, [ip, #1136]!	; 0x470

00010bdc <malloc@plt>:
   10bdc:	add	ip, pc, #0, 12
   10be0:	add	ip, ip, #24, 20	; 0x18000
   10be4:	ldr	pc, [ip, #1128]!	; 0x468

00010be8 <__libc_start_main@plt>:
   10be8:	add	ip, pc, #0, 12
   10bec:	add	ip, ip, #24, 20	; 0x18000
   10bf0:	ldr	pc, [ip, #1120]!	; 0x460

00010bf4 <__sysv_signal@plt>:
   10bf4:	add	ip, pc, #0, 12
   10bf8:	add	ip, ip, #24, 20	; 0x18000
   10bfc:	ldr	pc, [ip, #1112]!	; 0x458

00010c00 <__gmon_start__@plt>:
   10c00:	add	ip, pc, #0, 12
   10c04:	add	ip, ip, #24, 20	; 0x18000
   10c08:	ldr	pc, [ip, #1104]!	; 0x450

00010c0c <getpid@plt>:
   10c0c:	add	ip, pc, #0, 12
   10c10:	add	ip, ip, #24, 20	; 0x18000
   10c14:	ldr	pc, [ip, #1096]!	; 0x448

00010c18 <exit@plt>:
   10c18:	add	ip, pc, #0, 12
   10c1c:	add	ip, ip, #24, 20	; 0x18000
   10c20:	ldr	pc, [ip, #1088]!	; 0x440

00010c24 <utf8proc_category@plt>:
   10c24:	add	ip, pc, #0, 12
   10c28:	add	ip, ip, #24, 20	; 0x18000
   10c2c:	ldr	pc, [ip, #1080]!	; 0x438

00010c30 <strlen@plt>:
   10c30:	add	ip, pc, #0, 12
   10c34:	add	ip, ip, #24, 20	; 0x18000
   10c38:	ldr	pc, [ip, #1072]!	; 0x430

00010c3c <fprintf@plt>:
   10c3c:	add	ip, pc, #0, 12
   10c40:	add	ip, ip, #24, 20	; 0x18000
   10c44:	ldr	pc, [ip, #1064]!	; 0x428

00010c48 <__isoc99_sscanf@plt>:
   10c48:	add	ip, pc, #0, 12
   10c4c:	add	ip, ip, #24, 20	; 0x18000
   10c50:	ldr	pc, [ip, #1056]!	; 0x420

00010c54 <fclose@plt>:
   10c54:	add	ip, pc, #0, 12
   10c58:	add	ip, ip, #24, 20	; 0x18000
   10c5c:	ldr	pc, [ip, #1048]!	; 0x418

00010c60 <utf8proc_NFC@plt>:
   10c60:	add	ip, pc, #0, 12
   10c64:	add	ip, ip, #24, 20	; 0x18000
   10c68:	ldr	pc, [ip, #1040]!	; 0x410

00010c6c <fputc@plt>:
   10c6c:	add	ip, pc, #0, 12
   10c70:	add	ip, ip, #24, 20	; 0x18000
   10c74:	ldr	pc, [ip, #1032]!	; 0x408

00010c78 <sprintf@plt>:
   10c78:	add	ip, pc, #0, 12
   10c7c:	add	ip, ip, #24, 20	; 0x18000
   10c80:	ldr	pc, [ip, #1024]!	; 0x400

00010c84 <utf8proc_errmsg@plt>:
   10c84:	add	ip, pc, #0, 12
   10c88:	add	ip, ip, #24, 20	; 0x18000
   10c8c:	ldr	pc, [ip, #1016]!	; 0x3f8

00010c90 <fputs@plt>:
   10c90:	add	ip, pc, #0, 12
   10c94:	add	ip, ip, #24, 20	; 0x18000
   10c98:	ldr	pc, [ip, #1008]!	; 0x3f0

00010c9c <strncmp@plt>:
   10c9c:	add	ip, pc, #0, 12
   10ca0:	add	ip, ip, #24, 20	; 0x18000
   10ca4:	ldr	pc, [ip, #1000]!	; 0x3e8

00010ca8 <abort@plt>:
   10ca8:	add	ip, pc, #0, 12
   10cac:	add	ip, ip, #24, 20	; 0x18000
   10cb0:	ldr	pc, [ip, #992]!	; 0x3e0

00010cb4 <getc@plt>:
   10cb4:	add	ip, pc, #0, 12
   10cb8:	add	ip, ip, #24, 20	; 0x18000
   10cbc:	ldr	pc, [ip, #984]!	; 0x3d8

00010cc0 <__assert_fail@plt>:
   10cc0:	add	ip, pc, #0, 12
   10cc4:	add	ip, ip, #24, 20	; 0x18000
   10cc8:	ldr	pc, [ip, #976]!	; 0x3d0

Disassembly of section .text:

00010cd0 <error@@Base-0x3058>:
   10cd0:	mov	fp, #0
   10cd4:	mov	lr, #0
   10cd8:	pop	{r1}		; (ldr r1, [sp], #4)
   10cdc:	mov	r2, sp
   10ce0:	push	{r2}		; (str r2, [sp, #-4]!)
   10ce4:	push	{r0}		; (str r0, [sp, #-4]!)
   10ce8:	ldr	ip, [pc, #16]	; 10d00 <__assert_fail@plt+0x40>
   10cec:	push	{ip}		; (str ip, [sp, #-4]!)
   10cf0:	ldr	r0, [pc, #12]	; 10d04 <__assert_fail@plt+0x44>
   10cf4:	ldr	r3, [pc, #12]	; 10d08 <__assert_fail@plt+0x48>
   10cf8:	bl	10be8 <__libc_start_main@plt>
   10cfc:	bl	10ca8 <abort@plt>
   10d00:	muleq	r1, ip, r7
   10d04:	andeq	r1, r1, r8, asr sl
   10d08:	andeq	r4, r1, ip, lsr r7
   10d0c:	ldr	r3, [pc, #20]	; 10d28 <__assert_fail@plt+0x68>
   10d10:	ldr	r2, [pc, #20]	; 10d2c <__assert_fail@plt+0x6c>
   10d14:	add	r3, pc, r3
   10d18:	ldr	r2, [r3, r2]
   10d1c:	cmp	r2, #0
   10d20:	bxeq	lr
   10d24:	b	10c00 <__gmon_start__@plt>
   10d28:	andeq	r8, r1, r4, ror #5
   10d2c:	muleq	r0, ip, r0
   10d30:	ldr	r0, [pc, #24]	; 10d50 <__assert_fail@plt+0x90>
   10d34:	ldr	r3, [pc, #24]	; 10d54 <__assert_fail@plt+0x94>
   10d38:	cmp	r3, r0
   10d3c:	bxeq	lr
   10d40:	ldr	r3, [pc, #16]	; 10d58 <__assert_fail@plt+0x98>
   10d44:	cmp	r3, #0
   10d48:	bxeq	lr
   10d4c:	bx	r3
   10d50:	andeq	r9, r2, r0, ror #1
   10d54:	andeq	r9, r2, r0, ror #1
   10d58:	andeq	r0, r0, r0
   10d5c:	ldr	r0, [pc, #36]	; 10d88 <__assert_fail@plt+0xc8>
   10d60:	ldr	r1, [pc, #36]	; 10d8c <__assert_fail@plt+0xcc>
   10d64:	sub	r1, r1, r0
   10d68:	asr	r1, r1, #2
   10d6c:	add	r1, r1, r1, lsr #31
   10d70:	asrs	r1, r1, #1
   10d74:	bxeq	lr
   10d78:	ldr	r3, [pc, #16]	; 10d90 <__assert_fail@plt+0xd0>
   10d7c:	cmp	r3, #0
   10d80:	bxeq	lr
   10d84:	bx	r3
   10d88:	andeq	r9, r2, r0, ror #1
   10d8c:	andeq	r9, r2, r0, ror #1
   10d90:	andeq	r0, r0, r0
   10d94:	push	{r4, lr}
   10d98:	ldr	r4, [pc, #24]	; 10db8 <__assert_fail@plt+0xf8>
   10d9c:	ldrb	r3, [r4]
   10da0:	cmp	r3, #0
   10da4:	popne	{r4, pc}
   10da8:	bl	10d30 <__assert_fail@plt+0x70>
   10dac:	mov	r3, #1
   10db0:	strb	r3, [r4]
   10db4:	pop	{r4, pc}
   10db8:	strdeq	r9, [r2], -r0
   10dbc:	b	10d5c <__assert_fail@plt+0x9c>
   10dc0:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   10dc4:	add	fp, sp, #24
   10dc8:	mov	r9, r0
   10dcc:	movw	r0, #45356	; 0xb12c
   10dd0:	mov	r8, r1
   10dd4:	mov	r1, #4
   10dd8:	movt	r0, #2
   10ddc:	add	r4, r0, r9, lsl #4
   10de0:	ldr	r0, [r4, #12]
   10de4:	add	r0, r0, #1
   10de8:	bl	1381c <__assert_fail@plt+0x2b5c>
   10dec:	ldr	r1, [r4, #12]
   10df0:	cmp	r1, #1
   10df4:	movlt	r2, #0
   10df8:	strlt	r2, [r8]
   10dfc:	poplt	{r4, r5, r6, r7, r8, r9, fp, pc}
   10e00:	movw	ip, #5044	; 0x13b4
   10e04:	rsb	r3, r9, #1
   10e08:	mov	r4, #0
   10e0c:	mov	r2, #0
   10e10:	mov	r7, #0
   10e14:	movt	ip, #3
   10e18:	ldr	r6, [ip, r9, lsl #2]
   10e1c:	add	r7, r7, #1
   10e20:	ldr	r5, [r6, r4]!
   10e24:	add	r4, r4, #8
   10e28:	add	r5, r5, r3
   10e2c:	ldrb	r5, [r5, #12]
   10e30:	cmp	r5, #0
   10e34:	strne	r6, [r0, r2, lsl #2]
   10e38:	addne	r2, r2, #1
   10e3c:	cmp	r7, r1
   10e40:	strge	r2, [r8]
   10e44:	popge	{r4, r5, r6, r7, r8, r9, fp, pc}
   10e48:	b	10e18 <__assert_fail@plt+0x158>
   10e4c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10e50:	add	fp, sp, #28
   10e54:	sub	sp, sp, #4
   10e58:	ldr	r1, [r0]
   10e5c:	movw	r4, #37056	; 0x90c0
   10e60:	mov	sl, r0
   10e64:	movw	r0, #45312	; 0xb100
   10e68:	movt	r4, #2
   10e6c:	movt	r0, #2
   10e70:	mov	r2, r4
   10e74:	bl	13f38 <error@@Base+0x210>
   10e78:	ldrb	r0, [r4, #11]
   10e7c:	cmp	r0, #0
   10e80:	bne	110e8 <__assert_fail@plt+0x428>
   10e84:	movw	r4, #45356	; 0xb12c
   10e88:	movw	r1, #45312	; 0xb100
   10e8c:	movt	r4, #2
   10e90:	movt	r1, #2
   10e94:	mov	r0, r4
   10e98:	bl	12f68 <__assert_fail@plt+0x22a8>
   10e9c:	ldr	r0, [r4, #12]
   10ea0:	mov	r1, #8
   10ea4:	add	r0, r0, #1
   10ea8:	bl	1381c <__assert_fail@plt+0x2b5c>
   10eac:	ldr	r5, [r4]
   10eb0:	movw	r9, #5044	; 0x13b4
   10eb4:	movt	r9, #3
   10eb8:	str	r0, [r9]
   10ebc:	cmp	r5, #0
   10ec0:	beq	10f2c <__assert_fail@plt+0x26c>
   10ec4:	movw	r7, #45404	; 0xb15c
   10ec8:	mov	r8, #0
   10ecc:	mov	r4, #1
   10ed0:	movt	r7, #2
   10ed4:	ldr	r1, [r5, #8]
   10ed8:	mov	r0, r7
   10edc:	bl	12cdc <__assert_fail@plt+0x201c>
   10ee0:	mov	r6, r0
   10ee4:	cmp	r0, #0
   10ee8:	bne	10f10 <__assert_fail@plt+0x250>
   10eec:	mov	r0, #1
   10ef0:	mov	r1, #16
   10ef4:	bl	1381c <__assert_fail@plt+0x2b5c>
   10ef8:	mov	r6, r0
   10efc:	ldr	r0, [r5, #8]
   10f00:	mov	r1, r6
   10f04:	str	r0, [r6, #8]
   10f08:	mov	r0, r7
   10f0c:	bl	12d6c <__assert_fail@plt+0x20ac>
   10f10:	strb	r4, [r6, #12]
   10f14:	ldr	r0, [r9]
   10f18:	str	r6, [r0, r8]
   10f1c:	add	r8, r8, #8
   10f20:	ldr	r5, [r5, #4]
   10f24:	cmp	r5, #0
   10f28:	bne	10ed4 <__assert_fail@plt+0x214>
   10f2c:	movw	r0, #45312	; 0xb100
   10f30:	ldr	r1, [sl, #4]
   10f34:	movw	r2, #37056	; 0x90c0
   10f38:	movt	r0, #2
   10f3c:	movt	r2, #2
   10f40:	add	r5, r0, #16
   10f44:	mov	r0, r5
   10f48:	bl	13f38 <error@@Base+0x210>
   10f4c:	movw	sl, #45356	; 0xb12c
   10f50:	mov	r1, r5
   10f54:	movt	sl, #2
   10f58:	add	r0, sl, #16
   10f5c:	bl	12f68 <__assert_fail@plt+0x22a8>
   10f60:	ldr	r0, [sl, #28]
   10f64:	mov	r1, #8
   10f68:	add	r0, r0, #1
   10f6c:	bl	1381c <__assert_fail@plt+0x2b5c>
   10f70:	ldr	r7, [sl, #16]
   10f74:	str	r0, [r9, #4]
   10f78:	cmp	r7, #0
   10f7c:	beq	10fe8 <__assert_fail@plt+0x328>
   10f80:	movw	r5, #45404	; 0xb15c
   10f84:	mov	r4, #0
   10f88:	mov	r8, #1
   10f8c:	movt	r5, #2
   10f90:	ldr	r1, [r7, #8]
   10f94:	mov	r0, r5
   10f98:	bl	12cdc <__assert_fail@plt+0x201c>
   10f9c:	mov	r6, r0
   10fa0:	cmp	r0, #0
   10fa4:	bne	10fcc <__assert_fail@plt+0x30c>
   10fa8:	mov	r0, #1
   10fac:	mov	r1, #16
   10fb0:	bl	1381c <__assert_fail@plt+0x2b5c>
   10fb4:	mov	r6, r0
   10fb8:	ldr	r0, [r7, #8]
   10fbc:	mov	r1, r6
   10fc0:	str	r0, [r6, #8]
   10fc4:	mov	r0, r5
   10fc8:	bl	12d6c <__assert_fail@plt+0x20ac>
   10fcc:	strb	r8, [r6, #13]
   10fd0:	ldr	r0, [r9, #4]
   10fd4:	str	r6, [r0, r4]
   10fd8:	add	r4, r4, #8
   10fdc:	ldr	r7, [r7, #4]
   10fe0:	cmp	r7, #0
   10fe4:	bne	10f90 <__assert_fail@plt+0x2d0>
   10fe8:	ldr	r0, [sl, #12]
   10fec:	mov	r1, #4
   10ff0:	add	r0, r0, #1
   10ff4:	bl	1381c <__assert_fail@plt+0x2b5c>
   10ff8:	ldr	r1, [sl, #12]
   10ffc:	cmp	r1, #1
   11000:	blt	1105c <__assert_fail@plt+0x39c>
   11004:	mov	r3, #0
   11008:	mov	r2, #0
   1100c:	ldr	r7, [r9]
   11010:	ldr	r6, [r7, r3]!
   11014:	add	r3, r3, #8
   11018:	ldrb	r6, [r6, #13]
   1101c:	cmp	r6, #0
   11020:	strne	r7, [r0, r2, lsl #2]
   11024:	addne	r2, r2, #1
   11028:	subs	r1, r1, #1
   1102c:	bne	1100c <__assert_fail@plt+0x34c>
   11030:	movw	r1, #5032	; 0x13a8
   11034:	cmp	r2, #65536	; 0x10000
   11038:	movt	r1, #3
   1103c:	str	r0, [r1]
   11040:	movw	r0, #5036	; 0x13ac
   11044:	movt	r0, #3
   11048:	str	r2, [r0]
   1104c:	blt	11078 <__assert_fail@plt+0x3b8>
   11050:	movw	r0, #18374	; 0x47c6
   11054:	movt	r0, #1
   11058:	bl	13d28 <error@@Base>
   1105c:	movw	r1, #5032	; 0x13a8
   11060:	movt	r1, #3
   11064:	str	r0, [r1]
   11068:	movw	r0, #5036	; 0x13ac
   1106c:	mov	r1, #0
   11070:	movt	r0, #3
   11074:	str	r1, [r0]
   11078:	ldr	r0, [sl, #28]
   1107c:	mov	r1, #4
   11080:	add	r0, r0, #1
   11084:	bl	1381c <__assert_fail@plt+0x2b5c>
   11088:	ldr	r1, [sl, #28]
   1108c:	cmp	r1, #1
   11090:	blt	110c4 <__assert_fail@plt+0x404>
   11094:	mov	r3, #0
   11098:	mov	r2, #0
   1109c:	ldr	r7, [r9, #4]
   110a0:	ldr	r6, [r7, r3]!
   110a4:	add	r3, r3, #8
   110a8:	ldrb	r6, [r6, #12]
   110ac:	cmp	r6, #0
   110b0:	strne	r7, [r0, r2, lsl #2]
   110b4:	addne	r2, r2, #1
   110b8:	subs	r1, r1, #1
   110bc:	bne	1109c <__assert_fail@plt+0x3dc>
   110c0:	b	110c8 <__assert_fail@plt+0x408>
   110c4:	mov	r2, #0
   110c8:	movw	r1, #45344	; 0xb120
   110cc:	movt	r1, #2
   110d0:	str	r0, [r1]
   110d4:	movw	r0, #45348	; 0xb124
   110d8:	movt	r0, #2
   110dc:	str	r2, [r0]
   110e0:	sub	sp, fp, #28
   110e4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   110e8:	movw	r0, #18348	; 0x47ac
   110ec:	movt	r0, #1
   110f0:	bl	13d28 <error@@Base>
   110f4:	cmp	r1, #0
   110f8:	moveq	r0, #0
   110fc:	bxeq	lr
   11100:	push	{fp, lr}
   11104:	mov	fp, sp
   11108:	ldr	r3, [r1, #8]
   1110c:	mov	ip, r0
   11110:	mov	r0, #0
   11114:	rsb	lr, r3, #0
   11118:	cmp	lr, ip
   1111c:	bge	11140 <__assert_fail@plt+0x480>
   11120:	sub	lr, ip, #1
   11124:	add	r0, r3, lr
   11128:	ldr	r3, [r1, #12]
   1112c:	bic	r0, r0, #1
   11130:	add	r0, r3, r0
   11134:	ldrh	r0, [r0]
   11138:	str	lr, [r2]
   1113c:	ldr	r3, [r1, #8]
   11140:	cmp	r3, ip
   11144:	pop	{fp, lr}
   11148:	bxle	lr
   1114c:	ldr	r1, [r1, #12]
   11150:	add	ip, ip, #1
   11154:	add	r3, r3, ip
   11158:	bic	r3, r3, #1
   1115c:	add	r1, r1, r3
   11160:	ldrh	r1, [r1]
   11164:	add	r1, r1, #1
   11168:	cmp	r1, r0
   1116c:	movcs	r0, r1
   11170:	strcs	ip, [r2]
   11174:	bx	lr
   11178:	push	{r4, r5, r6, sl, fp, lr}
   1117c:	add	fp, sp, #16
   11180:	ldr	r2, [r1]
   11184:	cmp	r2, #0
   11188:	beq	111d0 <__assert_fail@plt+0x510>
   1118c:	ldr	r5, [r2, #8]
   11190:	mov	r3, #0
   11194:	rsb	r4, r5, #0
   11198:	cmp	r4, r0
   1119c:	blt	111d8 <__assert_fail@plt+0x518>
   111a0:	cmp	r5, r0
   111a4:	ble	111f8 <__assert_fail@plt+0x538>
   111a8:	ldr	r2, [r2, #12]
   111ac:	add	r5, r0, r5
   111b0:	add	r5, r5, #1
   111b4:	bic	r5, r5, #1
   111b8:	add	r2, r2, r5
   111bc:	ldrh	r2, [r2]
   111c0:	add	r2, r2, #1
   111c4:	cmp	r2, r3
   111c8:	movcc	r2, r3
   111cc:	b	111fc <__assert_fail@plt+0x53c>
   111d0:	mov	r2, #0
   111d4:	b	111fc <__assert_fail@plt+0x53c>
   111d8:	ldr	r4, [r2, #12]
   111dc:	add	r3, r0, r5
   111e0:	sub	r3, r3, #1
   111e4:	bic	r3, r3, #1
   111e8:	add	r3, r4, r3
   111ec:	ldrh	r3, [r3]
   111f0:	cmp	r5, r0
   111f4:	bgt	111a8 <__assert_fail@plt+0x4e8>
   111f8:	mov	r2, r3
   111fc:	movw	r3, #45348	; 0xb124
   11200:	add	r4, r2, r0
   11204:	movt	r3, #2
   11208:	ldr	ip, [r3]
   1120c:	movw	r3, #5036	; 0x13ac
   11210:	movt	r3, #3
   11214:	ldr	lr, [r3]
   11218:	cmp	r2, lr
   1121c:	cmplt	r4, ip
   11220:	blt	1126c <__assert_fail@plt+0x5ac>
   11224:	mov	r3, r2
   11228:	cmp	r3, lr
   1122c:	movweq	r6, #5040	; 0x13b0
   11230:	addeq	r2, r0, #1
   11234:	movteq	r6, #3
   11238:	streq	r2, [r6]
   1123c:	cmp	r4, ip
   11240:	movweq	r6, #5028	; 0x13a4
   11244:	subeq	r2, r0, #1
   11248:	movteq	r6, #3
   1124c:	streq	r2, [r6]
   11250:	ldr	r2, [r1, #8]
   11254:	ldr	r1, [r1, #12]
   11258:	add	r0, r2, r0
   1125c:	bic	r0, r0, #1
   11260:	add	r0, r1, r0
   11264:	strh	r3, [r0]
   11268:	pop	{r4, r5, r6, sl, fp, pc}
   1126c:	movw	r3, #45344	; 0xb120
   11270:	movt	r3, #2
   11274:	ldr	r3, [r3]
   11278:	add	r4, r3, r0, lsl #2
   1127c:	movw	r3, #5032	; 0x13a8
   11280:	movt	r3, #3
   11284:	ldr	r5, [r3]
   11288:	ldr	r3, [r4, r2, lsl #2]
   1128c:	ldr	r6, [r5, r2, lsl #2]
   11290:	ldr	r3, [r3]
   11294:	ldr	r6, [r6]
   11298:	cmp	r6, r3
   1129c:	bne	112c8 <__assert_fail@plt+0x608>
   112a0:	add	r3, r2, #1
   112a4:	cmp	r3, lr
   112a8:	bge	112c0 <__assert_fail@plt+0x600>
   112ac:	add	r2, r0, r2
   112b0:	add	r2, r2, #1
   112b4:	cmp	r2, ip
   112b8:	mov	r2, r3
   112bc:	blt	11288 <__assert_fail@plt+0x5c8>
   112c0:	add	r4, r0, r3
   112c4:	b	11228 <__assert_fail@plt+0x568>
   112c8:	add	r4, r0, r2
   112cc:	b	11224 <__assert_fail@plt+0x564>
   112d0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   112d4:	add	fp, sp, #28
   112d8:	sub	sp, sp, #4
   112dc:	movw	r0, #45348	; 0xb124
   112e0:	movw	r9, #5036	; 0x13ac
   112e4:	movw	r7, #5028	; 0x13a4
   112e8:	movw	r4, #5040	; 0x13b0
   112ec:	movt	r0, #2
   112f0:	movt	r9, #3
   112f4:	movt	r7, #3
   112f8:	movt	r4, #3
   112fc:	ldr	r0, [r0]
   11300:	ldr	r1, [r9]
   11304:	str	r0, [r7]
   11308:	rsb	r2, r1, #0
   1130c:	sub	r0, r0, r1
   11310:	cmp	r0, r2
   11314:	str	r2, [r4]
   11318:	blt	113bc <__assert_fail@plt+0x6fc>
   1131c:	movw	sl, #45388	; 0xb14c
   11320:	mvn	r8, #0
   11324:	movt	sl, #2
   11328:	mov	r0, #1
   1132c:	mov	r1, #16
   11330:	mov	r6, r8
   11334:	bl	1381c <__assert_fail@plt+0x2b5c>
   11338:	add	r8, r8, #1
   1133c:	mov	r5, r0
   11340:	mov	r1, #2
   11344:	str	r8, [r0, #8]
   11348:	add	r0, r6, #2
   1134c:	bl	1381c <__assert_fail@plt+0x2b5c>
   11350:	str	r0, [r5, #12]
   11354:	mov	r0, sl
   11358:	mov	r1, r5
   1135c:	bl	11d24 <__assert_fail@plt+0x1064>
   11360:	mvn	r6, r6
   11364:	cmp	r8, r6
   11368:	blt	1139c <__assert_fail@plt+0x6dc>
   1136c:	ldr	r0, [r4]
   11370:	cmp	r6, r0
   11374:	blt	11390 <__assert_fail@plt+0x6d0>
   11378:	ldr	r0, [r7]
   1137c:	cmp	r6, r0
   11380:	bgt	11390 <__assert_fail@plt+0x6d0>
   11384:	mov	r0, r6
   11388:	mov	r1, r5
   1138c:	bl	11178 <__assert_fail@plt+0x4b8>
   11390:	add	r6, r6, #2
   11394:	cmp	r6, r8
   11398:	ble	1136c <__assert_fail@plt+0x6ac>
   1139c:	movw	r1, #45348	; 0xb124
   113a0:	ldr	r0, [r9]
   113a4:	movt	r1, #2
   113a8:	ldr	r1, [r1]
   113ac:	sub	r0, r1, r0
   113b0:	ldr	r1, [r4]
   113b4:	cmp	r1, r0
   113b8:	ble	11328 <__assert_fail@plt+0x668>
   113bc:	sub	sp, fp, #28
   113c0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   113c4:	push	{r4, r5, r6, r7, fp, lr}
   113c8:	add	fp, sp, #16
   113cc:	movw	r0, #45388	; 0xb14c
   113d0:	movt	r0, #2
   113d4:	ldr	r2, [r0, #4]
   113d8:	cmp	r2, #0
   113dc:	beq	114f0 <__assert_fail@plt+0x830>
   113e0:	movw	r0, #5036	; 0x13ac
   113e4:	movw	r1, #45348	; 0xb124
   113e8:	movt	r0, #3
   113ec:	movt	r1, #2
   113f0:	ldr	r0, [r0]
   113f4:	ldr	r1, [r1]
   113f8:	sub	ip, r1, r0
   113fc:	movw	r0, #5032	; 0x13a8
   11400:	mov	r1, #1
   11404:	movt	r0, #3
   11408:	ldr	r0, [r0]
   1140c:	sub	r0, r0, #4
   11410:	b	1141c <__assert_fail@plt+0x75c>
   11414:	cmp	r2, #0
   11418:	popeq	{r4, r5, r6, r7, fp, pc}
   1141c:	mov	lr, r2
   11420:	ldr	r2, [r2]
   11424:	ldr	r3, [lr, #8]
   11428:	ldr	r4, [lr, #12]
   1142c:	cmp	r2, #0
   11430:	add	r3, r3, ip
   11434:	bic	r3, r3, #1
   11438:	add	r3, r4, r3
   1143c:	ldrh	r3, [r3]
   11440:	beq	114b4 <__assert_fail@plt+0x7f4>
   11444:	ldr	r4, [r2, #8]
   11448:	mov	r6, #0
   1144c:	rsb	r5, r4, #0
   11450:	cmp	ip, r5
   11454:	mov	r5, ip
   11458:	ble	11474 <__assert_fail@plt+0x7b4>
   1145c:	ldr	r7, [r2, #12]
   11460:	sub	r5, ip, #1
   11464:	add	r6, r4, r5
   11468:	bic	r6, r6, #1
   1146c:	add	r6, r7, r6
   11470:	ldrh	r6, [r6]
   11474:	cmp	r4, ip
   11478:	ble	114c4 <__assert_fail@plt+0x804>
   1147c:	add	r7, ip, #1
   11480:	add	r4, r4, r7
   11484:	bic	ip, r4, #1
   11488:	ldr	r4, [r2, #12]
   1148c:	add	r4, r4, ip
   11490:	ldrh	r4, [r4]
   11494:	add	r4, r4, #1
   11498:	cmp	r4, r6
   1149c:	movcs	r5, r7
   114a0:	movcc	r4, r6
   114a4:	mov	ip, r5
   114a8:	cmp	r4, r3
   114ac:	blt	114d4 <__assert_fail@plt+0x814>
   114b0:	b	11414 <__assert_fail@plt+0x754>
   114b4:	mov	r4, #0
   114b8:	cmp	r4, r3
   114bc:	blt	114d4 <__assert_fail@plt+0x814>
   114c0:	b	11414 <__assert_fail@plt+0x754>
   114c4:	mov	ip, r5
   114c8:	mov	r4, r6
   114cc:	cmp	r4, r3
   114d0:	bge	11414 <__assert_fail@plt+0x754>
   114d4:	ldr	r2, [r0, r3, lsl #2]
   114d8:	sub	r3, r3, #1
   114dc:	cmp	r3, r4
   114e0:	strb	r1, [r2, #4]
   114e4:	bgt	114d4 <__assert_fail@plt+0x814>
   114e8:	ldr	r2, [lr]
   114ec:	b	11414 <__assert_fail@plt+0x754>
   114f0:	pop	{r4, r5, r6, r7, fp, pc}
   114f4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   114f8:	add	fp, sp, #28
   114fc:	sub	sp, sp, #4
   11500:	mov	sl, r2
   11504:	mov	r9, r1
   11508:	mov	r6, r0
   1150c:	bl	12e8c <__assert_fail@plt+0x21cc>
   11510:	movw	r0, #8052	; 0x1f74
   11514:	mov	r1, r6
   11518:	ldr	r0, [r1, r0]!
   1151c:	cmp	r0, #1
   11520:	blt	11650 <__assert_fail@plt+0x990>
   11524:	movw	r0, #8048	; 0x1f70
   11528:	cmp	sl, #0
   1152c:	str	r1, [sp]
   11530:	add	r5, r6, r0
   11534:	beq	115e0 <__assert_fail@plt+0x920>
   11538:	movw	r4, #53460	; 0xd0d4
   1153c:	mov	r8, #0
   11540:	movt	r4, #2
   11544:	ldr	r0, [r5]
   11548:	ldr	r0, [r0, r8, lsl #2]
   1154c:	ldr	r7, [r0, #12]
   11550:	ldr	r6, [r0, #16]
   11554:	mov	r0, r4
   11558:	mov	r1, r7
   1155c:	mov	r2, r6
   11560:	bl	12110 <__assert_fail@plt+0x1450>
   11564:	mov	r0, r9
   11568:	mov	r1, r7
   1156c:	mov	r2, r6
   11570:	bl	12110 <__assert_fail@plt+0x1450>
   11574:	ldr	r0, [r5]
   11578:	ldr	r0, [r0, r8, lsl #2]
   1157c:	ldr	r0, [r0, #8]
   11580:	bl	10c30 <strlen@plt>
   11584:	add	r0, r9, r0, lsl #3
   11588:	mov	r1, r7
   1158c:	mov	r2, r6
   11590:	bl	12110 <__assert_fail@plt+0x1450>
   11594:	sub	r0, r7, r6
   11598:	mov	r1, #1
   1159c:	clz	r0, r0
   115a0:	lsr	r6, r0, #5
   115a4:	mov	r0, sl
   115a8:	mov	r2, r6
   115ac:	bl	12110 <__assert_fail@plt+0x1450>
   115b0:	cmp	r7, #11
   115b4:	mov	r1, #1
   115b8:	mov	r2, r6
   115bc:	movge	r7, #11
   115c0:	add	r0, sl, r7, lsl #3
   115c4:	bl	12110 <__assert_fail@plt+0x1450>
   115c8:	ldr	r0, [sp]
   115cc:	add	r8, r8, #1
   115d0:	ldr	r0, [r0]
   115d4:	cmp	r8, r0
   115d8:	blt	11544 <__assert_fail@plt+0x884>
   115dc:	b	11650 <__assert_fail@plt+0x990>
   115e0:	movw	r8, #53460	; 0xd0d4
   115e4:	mov	r4, #0
   115e8:	movt	r8, #2
   115ec:	ldr	r0, [r5]
   115f0:	ldr	r0, [r0, r4, lsl #2]
   115f4:	ldr	r6, [r0, #12]
   115f8:	ldr	r7, [r0, #16]
   115fc:	mov	r0, r8
   11600:	mov	r1, r6
   11604:	mov	r2, r7
   11608:	bl	12110 <__assert_fail@plt+0x1450>
   1160c:	mov	r0, r9
   11610:	mov	r1, r6
   11614:	mov	r2, r7
   11618:	bl	12110 <__assert_fail@plt+0x1450>
   1161c:	ldr	r0, [r5]
   11620:	ldr	r0, [r0, r4, lsl #2]
   11624:	ldr	r0, [r0, #8]
   11628:	bl	10c30 <strlen@plt>
   1162c:	add	r0, r9, r0, lsl #3
   11630:	mov	r1, r6
   11634:	mov	r2, r7
   11638:	bl	12110 <__assert_fail@plt+0x1450>
   1163c:	ldr	r0, [sp]
   11640:	add	r4, r4, #1
   11644:	ldr	r0, [r0]
   11648:	cmp	r4, r0
   1164c:	blt	115ec <__assert_fail@plt+0x92c>
   11650:	sub	sp, fp, #28
   11654:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11658:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1165c:	add	fp, sp, #28
   11660:	sub	sp, sp, #12
   11664:	movw	r7, #45356	; 0xb12c
   11668:	movt	r7, #2
   1166c:	ldr	r0, [r7, #12]
   11670:	cmp	r0, #1
   11674:	blt	1185c <__assert_fail@plt+0xb9c>
   11678:	movw	r9, #53460	; 0xd0d4
   1167c:	movw	r6, #5044	; 0x13b4
   11680:	mov	r8, #0
   11684:	movt	r9, #2
   11688:	movt	r6, #3
   1168c:	add	r1, r9, #936	; 0x3a8
   11690:	add	r4, r9, #928	; 0x3a0
   11694:	str	r1, [sp, #8]
   11698:	add	r1, r9, #944	; 0x3b0
   1169c:	str	r1, [sp, #4]
   116a0:	add	r1, r9, #952	; 0x3b8
   116a4:	str	r1, [sp]
   116a8:	cmp	r8, r0
   116ac:	bge	11840 <__assert_fail@plt+0xb80>
   116b0:	ldr	r0, [r6]
   116b4:	mov	r1, #1
   116b8:	add	r0, r0, r8, lsl #3
   116bc:	ldrb	r0, [r0, #4]
   116c0:	and	r5, r0, #1
   116c4:	mov	r0, r4
   116c8:	eor	r2, r5, #1
   116cc:	bl	12110 <__assert_fail@plt+0x1450>
   116d0:	ldr	r0, [r7, #12]
   116d4:	add	sl, r8, #1
   116d8:	cmp	sl, r0
   116dc:	bge	11850 <__assert_fail@plt+0xb90>
   116e0:	ldr	r0, [r6]
   116e4:	mov	r1, #1
   116e8:	add	r0, r0, sl, lsl #3
   116ec:	ldrb	r0, [r0, #4]
   116f0:	and	r5, r5, r0
   116f4:	ldr	r0, [sp, #8]
   116f8:	eor	r2, r5, #1
   116fc:	bl	12110 <__assert_fail@plt+0x1450>
   11700:	ldr	r0, [r7, #12]
   11704:	add	r1, r8, #2
   11708:	cmp	r1, r0
   1170c:	bge	11850 <__assert_fail@plt+0xb90>
   11710:	ldr	r0, [r6]
   11714:	add	r0, r0, r1, lsl #3
   11718:	mov	r1, #1
   1171c:	ldrb	r0, [r0, #4]
   11720:	and	r5, r5, r0
   11724:	ldr	r0, [sp, #4]
   11728:	eor	r2, r5, #1
   1172c:	bl	12110 <__assert_fail@plt+0x1450>
   11730:	ldr	r0, [r7, #12]
   11734:	add	r1, r8, #3
   11738:	cmp	r1, r0
   1173c:	bge	11850 <__assert_fail@plt+0xb90>
   11740:	ldr	r0, [r6]
   11744:	add	r0, r0, r1, lsl #3
   11748:	mov	r1, #1
   1174c:	ldrb	r0, [r0, #4]
   11750:	and	r5, r5, r0
   11754:	ldr	r0, [sp]
   11758:	eor	r2, r5, #1
   1175c:	bl	12110 <__assert_fail@plt+0x1450>
   11760:	ldr	r0, [r7, #12]
   11764:	add	r1, r8, #4
   11768:	cmp	r1, r0
   1176c:	bge	11850 <__assert_fail@plt+0xb90>
   11770:	ldr	r0, [r6]
   11774:	add	r0, r0, r1, lsl #3
   11778:	mov	r1, r9
   1177c:	ldrb	r0, [r0, #4]
   11780:	and	r9, r5, r0
   11784:	mov	r5, r1
   11788:	add	r0, r1, #960	; 0x3c0
   1178c:	mov	r1, #1
   11790:	eor	r2, r9, #1
   11794:	bl	12110 <__assert_fail@plt+0x1450>
   11798:	ldr	r0, [r7, #12]
   1179c:	add	r1, r8, #5
   117a0:	cmp	r1, r0
   117a4:	bge	1182c <__assert_fail@plt+0xb6c>
   117a8:	ldr	r0, [r6]
   117ac:	add	r0, r0, r1, lsl #3
   117b0:	mov	r1, #1
   117b4:	ldrb	r0, [r0, #4]
   117b8:	and	r9, r9, r0
   117bc:	add	r0, r5, #968	; 0x3c8
   117c0:	eor	r2, r9, #1
   117c4:	bl	12110 <__assert_fail@plt+0x1450>
   117c8:	ldr	r0, [r7, #12]
   117cc:	add	r1, r8, #6
   117d0:	cmp	r1, r0
   117d4:	bge	1182c <__assert_fail@plt+0xb6c>
   117d8:	ldr	r0, [r6]
   117dc:	add	r0, r0, r1, lsl #3
   117e0:	mov	r1, #1
   117e4:	ldrb	r0, [r0, #4]
   117e8:	and	r9, r9, r0
   117ec:	add	r0, r5, #976	; 0x3d0
   117f0:	eor	r2, r9, #1
   117f4:	bl	12110 <__assert_fail@plt+0x1450>
   117f8:	ldr	r0, [r7, #12]
   117fc:	add	r1, r8, #7
   11800:	cmp	r1, r0
   11804:	bge	1182c <__assert_fail@plt+0xb6c>
   11808:	ldr	r0, [r6]
   1180c:	add	r0, r0, r1, lsl #3
   11810:	mov	r1, #1
   11814:	ldrb	r0, [r0, #4]
   11818:	and	r0, r9, r0
   1181c:	eor	r2, r0, #1
   11820:	add	r0, r5, #984	; 0x3d8
   11824:	bl	12110 <__assert_fail@plt+0x1450>
   11828:	ldr	r0, [r7, #12]
   1182c:	mov	r8, sl
   11830:	mov	r9, r5
   11834:	cmp	r8, r0
   11838:	blt	116a8 <__assert_fail@plt+0x9e8>
   1183c:	b	1185c <__assert_fail@plt+0xb9c>
   11840:	add	r8, r8, #1
   11844:	cmp	r8, r0
   11848:	blt	116a8 <__assert_fail@plt+0x9e8>
   1184c:	b	1185c <__assert_fail@plt+0xb9c>
   11850:	mov	r8, sl
   11854:	cmp	r8, r0
   11858:	blt	116a8 <__assert_fail@plt+0x9e8>
   1185c:	sub	sp, fp, #28
   11860:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11864:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11868:	add	fp, sp, #28
   1186c:	sub	sp, sp, #4
   11870:	movw	r8, #45356	; 0xb12c
   11874:	movt	r8, #2
   11878:	ldr	r0, [r8, #12]
   1187c:	cmp	r0, #1
   11880:	blt	118ec <__assert_fail@plt+0xc2c>
   11884:	movw	r4, #53460	; 0xd0d4
   11888:	movw	r6, #5044	; 0x13b4
   1188c:	mov	r5, #0
   11890:	movw	r9, #9048	; 0x2358
   11894:	movt	r4, #2
   11898:	movt	r6, #3
   1189c:	add	r7, r4, #992	; 0x3e0
   118a0:	ldr	r0, [r6]
   118a4:	ldr	r0, [r0, r5, lsl #3]
   118a8:	ldr	r0, [r0, #8]
   118ac:	bl	120cc <__assert_fail@plt+0x140c>
   118b0:	ldr	r2, [r6]
   118b4:	cmp	r0, #0
   118b8:	mov	r0, r7
   118bc:	addeq	r0, r4, r9
   118c0:	ldr	r1, [r2, r5, lsl #3]!
   118c4:	ldrb	r2, [r2, #4]
   118c8:	ldr	r1, [r1, #8]
   118cc:	clz	r2, r2
   118d0:	lsr	r3, r2, #5
   118d4:	mov	r2, #1
   118d8:	bl	12124 <__assert_fail@plt+0x1464>
   118dc:	ldr	r0, [r8, #12]
   118e0:	add	r5, r5, #1
   118e4:	cmp	r5, r0
   118e8:	blt	118a0 <__assert_fail@plt+0xbe0>
   118ec:	movw	r9, #53460	; 0xd0d4
   118f0:	movt	r9, #2
   118f4:	add	r0, r9, #992	; 0x3e0
   118f8:	bl	12e8c <__assert_fail@plt+0x21cc>
   118fc:	movw	r0, #9044	; 0x2354
   11900:	ldr	r0, [r9, r0]
   11904:	cmp	r0, #1
   11908:	blt	11980 <__assert_fail@plt+0xcc0>
   1190c:	mov	r4, #0
   11910:	movw	sl, #9040	; 0x2350
   11914:	add	r5, r9, #8
   11918:	mov	r8, r9
   1191c:	ldr	r0, [r8, sl]!
   11920:	ldr	r0, [r0, r4, lsl #2]
   11924:	ldr	r6, [r0, #12]
   11928:	ldr	r7, [r0, #16]
   1192c:	mov	r0, r9
   11930:	mov	r1, r6
   11934:	mov	r2, r7
   11938:	bl	12110 <__assert_fail@plt+0x1450>
   1193c:	mov	r0, r5
   11940:	mov	r1, r6
   11944:	mov	r2, r7
   11948:	bl	12110 <__assert_fail@plt+0x1450>
   1194c:	ldr	r0, [r8]
   11950:	ldr	r0, [r0, r4, lsl #2]
   11954:	ldr	r0, [r0, #8]
   11958:	bl	10c30 <strlen@plt>
   1195c:	add	r0, r5, r0, lsl #3
   11960:	mov	r1, r6
   11964:	mov	r2, r7
   11968:	bl	12110 <__assert_fail@plt+0x1450>
   1196c:	movw	r0, #9044	; 0x2354
   11970:	add	r4, r4, #1
   11974:	ldr	r0, [r9, r0]
   11978:	cmp	r4, r0
   1197c:	blt	11918 <__assert_fail@plt+0xc58>
   11980:	movw	r0, #9048	; 0x2358
   11984:	add	r0, r9, r0
   11988:	bl	12e8c <__assert_fail@plt+0x21cc>
   1198c:	movw	r0, #17100	; 0x42cc
   11990:	ldr	r0, [r9, r0]
   11994:	cmp	r0, #1
   11998:	blt	11a4c <__assert_fail@plt+0xd8c>
   1199c:	mov	r5, #0
   119a0:	add	sl, r9, #416	; 0x1a0
   119a4:	add	r6, r9, #824	; 0x338
   119a8:	movw	r0, #17096	; 0x42c8
   119ac:	mov	r8, r9
   119b0:	ldr	r0, [r9, r0]!
   119b4:	ldr	r0, [r0, r5, lsl #2]
   119b8:	ldr	r7, [r0, #12]
   119bc:	ldr	r4, [r0, #16]
   119c0:	mov	r0, r8
   119c4:	mov	r1, r7
   119c8:	mov	r2, r4
   119cc:	bl	12110 <__assert_fail@plt+0x1450>
   119d0:	mov	r0, sl
   119d4:	mov	r1, r7
   119d8:	mov	r2, r4
   119dc:	bl	12110 <__assert_fail@plt+0x1450>
   119e0:	ldr	r0, [r9]
   119e4:	mov	r9, r8
   119e8:	ldr	r0, [r0, r5, lsl #2]
   119ec:	ldr	r0, [r0, #8]
   119f0:	bl	10c30 <strlen@plt>
   119f4:	add	r0, sl, r0, lsl #3
   119f8:	mov	r1, r7
   119fc:	mov	r2, r4
   11a00:	bl	12110 <__assert_fail@plt+0x1450>
   11a04:	sub	r0, r7, r4
   11a08:	mov	r1, #1
   11a0c:	clz	r0, r0
   11a10:	lsr	r4, r0, #5
   11a14:	mov	r0, r6
   11a18:	mov	r2, r4
   11a1c:	bl	12110 <__assert_fail@plt+0x1450>
   11a20:	cmp	r7, #11
   11a24:	mov	r1, #1
   11a28:	mov	r2, r4
   11a2c:	movge	r7, #11
   11a30:	add	r0, r6, r7, lsl #3
   11a34:	bl	12110 <__assert_fail@plt+0x1450>
   11a38:	movw	r0, #17100	; 0x42cc
   11a3c:	add	r5, r5, #1
   11a40:	ldr	r0, [r8, r0]
   11a44:	cmp	r5, r0
   11a48:	blt	119a8 <__assert_fail@plt+0xce8>
   11a4c:	sub	sp, fp, #28
   11a50:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11a54:	b	11658 <__assert_fail@plt+0x998>
   11a58:	push	{fp, lr}
   11a5c:	mov	fp, sp
   11a60:	sub	sp, sp, #8
   11a64:	movw	r2, #18398	; 0x47de
   11a68:	movw	r3, #37032	; 0x90a8
   11a6c:	str	r0, [sp, #4]
   11a70:	add	r0, sp, #4
   11a74:	mov	r4, r1
   11a78:	movt	r2, #1
   11a7c:	movt	r3, #2
   11a80:	bl	13a2c <__assert_fail@plt+0x2d6c>
   11a84:	ldr	r0, [sp, #4]
   11a88:	bic	r0, r0, #1
   11a8c:	cmp	r0, #2
   11a90:	bne	11cbc <__assert_fail@plt+0xffc>
   11a94:	movw	r0, #45352	; 0xb128
   11a98:	movt	r0, #2
   11a9c:	ldr	r0, [r0]
   11aa0:	bl	11f68 <__assert_fail@plt+0x12a8>
   11aa4:	mov	r0, r4
   11aa8:	str	r4, [sp]
   11aac:	bl	10e4c <__assert_fail@plt+0x18c>
   11ab0:	movw	r0, #45348	; 0xb124
   11ab4:	movw	sl, #5036	; 0x13ac
   11ab8:	movw	r4, #5028	; 0x13a4
   11abc:	movw	r8, #5040	; 0x13b0
   11ac0:	movt	r0, #2
   11ac4:	movt	sl, #3
   11ac8:	movt	r4, #3
   11acc:	movt	r8, #3
   11ad0:	ldr	r1, [r0]
   11ad4:	ldr	r2, [sl]
   11ad8:	rsb	r0, r2, #0
   11adc:	sub	r3, r1, r2
   11ae0:	str	r1, [r4]
   11ae4:	cmp	r3, r0
   11ae8:	str	r0, [r8]
   11aec:	blt	11b90 <__assert_fail@plt+0xed0>
   11af0:	movw	r5, #45388	; 0xb14c
   11af4:	mvn	r9, #0
   11af8:	movt	r5, #2
   11afc:	mov	r0, #1
   11b00:	mov	r1, #16
   11b04:	mov	r7, r9
   11b08:	bl	1381c <__assert_fail@plt+0x2b5c>
   11b0c:	add	r9, r9, #1
   11b10:	mov	r6, r0
   11b14:	mov	r1, #2
   11b18:	str	r9, [r0, #8]
   11b1c:	add	r0, r7, #2
   11b20:	bl	1381c <__assert_fail@plt+0x2b5c>
   11b24:	str	r0, [r6, #12]
   11b28:	mov	r0, r5
   11b2c:	mov	r1, r6
   11b30:	bl	11d24 <__assert_fail@plt+0x1064>
   11b34:	mvn	r7, r7
   11b38:	cmp	r9, r7
   11b3c:	blt	11b70 <__assert_fail@plt+0xeb0>
   11b40:	ldr	r0, [r8]
   11b44:	cmp	r7, r0
   11b48:	blt	11b64 <__assert_fail@plt+0xea4>
   11b4c:	ldr	r0, [r4]
   11b50:	cmp	r7, r0
   11b54:	bgt	11b64 <__assert_fail@plt+0xea4>
   11b58:	mov	r0, r7
   11b5c:	mov	r1, r6
   11b60:	bl	11178 <__assert_fail@plt+0x4b8>
   11b64:	add	r7, r7, #2
   11b68:	cmp	r7, r9
   11b6c:	ble	11b40 <__assert_fail@plt+0xe80>
   11b70:	movw	r0, #45348	; 0xb124
   11b74:	ldr	r2, [sl]
   11b78:	ldr	r3, [r8]
   11b7c:	movt	r0, #2
   11b80:	ldr	r1, [r0]
   11b84:	sub	r0, r1, r2
   11b88:	cmp	r3, r0
   11b8c:	ble	11afc <__assert_fail@plt+0xe3c>
   11b90:	movw	r0, #45388	; 0xb14c
   11b94:	movt	r0, #2
   11b98:	ldr	r0, [r0, #4]
   11b9c:	cmp	r0, #0
   11ba0:	beq	11c94 <__assert_fail@plt+0xfd4>
   11ba4:	sub	r6, r1, r2
   11ba8:	movw	r1, #5032	; 0x13a8
   11bac:	mov	r2, #1
   11bb0:	movt	r1, #3
   11bb4:	ldr	r1, [r1]
   11bb8:	sub	r1, r1, #4
   11bbc:	b	11bd4 <__assert_fail@plt+0xf14>
   11bc0:	mov	r6, r3
   11bc4:	mov	r5, r4
   11bc8:	cmp	r5, r7
   11bcc:	blt	11c78 <__assert_fail@plt+0xfb8>
   11bd0:	b	11c8c <__assert_fail@plt+0xfcc>
   11bd4:	mov	r3, r0
   11bd8:	ldr	r0, [r0]
   11bdc:	ldr	r7, [r3, #8]
   11be0:	ldr	r3, [r3, #12]
   11be4:	cmp	r0, #0
   11be8:	add	r7, r7, r6
   11bec:	bic	r7, r7, #1
   11bf0:	add	r3, r3, r7
   11bf4:	ldrh	r7, [r3]
   11bf8:	beq	11c6c <__assert_fail@plt+0xfac>
   11bfc:	ldr	r5, [r0, #8]
   11c00:	mov	r4, #0
   11c04:	rsb	r3, r5, #0
   11c08:	cmp	r6, r3
   11c0c:	mov	r3, r6
   11c10:	ble	11c2c <__assert_fail@plt+0xf6c>
   11c14:	sub	r3, r6, #1
   11c18:	add	r4, r5, r3
   11c1c:	bic	ip, r4, #1
   11c20:	ldr	r4, [r0, #12]
   11c24:	add	r4, r4, ip
   11c28:	ldrh	r4, [r4]
   11c2c:	cmp	r5, r6
   11c30:	ble	11bc0 <__assert_fail@plt+0xf00>
   11c34:	add	r6, r6, #1
   11c38:	add	r5, r5, r6
   11c3c:	bic	ip, r5, #1
   11c40:	ldr	r5, [r0, #12]
   11c44:	add	r5, r5, ip
   11c48:	ldrh	r5, [r5]
   11c4c:	add	r5, r5, #1
   11c50:	cmp	r5, r4
   11c54:	movcs	r3, r6
   11c58:	movcc	r5, r4
   11c5c:	mov	r6, r3
   11c60:	cmp	r5, r7
   11c64:	blt	11c78 <__assert_fail@plt+0xfb8>
   11c68:	b	11c8c <__assert_fail@plt+0xfcc>
   11c6c:	mov	r5, #0
   11c70:	cmp	r5, r7
   11c74:	bge	11c8c <__assert_fail@plt+0xfcc>
   11c78:	ldr	r3, [r1, r7, lsl #2]
   11c7c:	sub	r7, r7, #1
   11c80:	cmp	r7, r5
   11c84:	strb	r2, [r3, #4]
   11c88:	bgt	11c78 <__assert_fail@plt+0xfb8>
   11c8c:	cmp	r0, #0
   11c90:	bne	11bd4 <__assert_fail@plt+0xf14>
   11c94:	bl	11864 <__assert_fail@plt+0xba4>
   11c98:	ldr	r0, [sp, #4]
   11c9c:	mov	r1, #0
   11ca0:	cmp	r0, #3
   11ca4:	ldr	r0, [sp]
   11ca8:	ldreq	r1, [r0, #8]
   11cac:	movw	r0, #53460	; 0xd0d4
   11cb0:	movt	r0, #2
   11cb4:	bl	125d8 <__assert_fail@plt+0x1918>
   11cb8:	bl	13ce8 <__assert_fail@plt+0x3028>
   11cbc:	movw	r0, #18459	; 0x481b
   11cc0:	movt	r0, #1
   11cc4:	bl	13d28 <error@@Base>
   11cc8:	vmov.i32	q8, #0	; 0x00000000
   11ccc:	vst1.32	{d16-d17}, [r0]
   11cd0:	bx	lr
   11cd4:	push	{r4, r5, fp, lr}
   11cd8:	add	fp, sp, #8
   11cdc:	mov	r4, r0
   11ce0:	ldr	r0, [r0]
   11ce4:	mov	r5, #0
   11ce8:	str	r5, [r1]
   11cec:	cmp	r0, #0
   11cf0:	str	r0, [r1, #4]
   11cf4:	str	r1, [r4]
   11cf8:	addeq	r0, r4, #4
   11cfc:	str	r1, [r0]
   11d00:	ldr	r0, [r4, #8]
   11d04:	cmp	r0, #0
   11d08:	beq	11d14 <__assert_fail@plt+0x1054>
   11d0c:	bl	10b4c <free@plt>
   11d10:	str	r5, [r4, #8]
   11d14:	ldr	r0, [r4, #12]
   11d18:	add	r0, r0, #1
   11d1c:	str	r0, [r4, #12]
   11d20:	pop	{r4, r5, fp, pc}
   11d24:	push	{r4, r5, fp, lr}
   11d28:	add	fp, sp, #8
   11d2c:	mov	r4, r0
   11d30:	ldr	r0, [r0, #4]
   11d34:	mov	r5, #0
   11d38:	mov	r2, r4
   11d3c:	cmp	r0, #0
   11d40:	stm	r1, {r0, r5}
   11d44:	addne	r2, r0, #4
   11d48:	str	r1, [r2]
   11d4c:	str	r1, [r4, #4]
   11d50:	ldr	r0, [r4, #8]
   11d54:	cmp	r0, #0
   11d58:	beq	11d64 <__assert_fail@plt+0x10a4>
   11d5c:	bl	10b4c <free@plt>
   11d60:	str	r5, [r4, #8]
   11d64:	ldr	r0, [r4, #12]
   11d68:	add	r0, r0, #1
   11d6c:	str	r0, [r4, #12]
   11d70:	pop	{r4, r5, fp, pc}
   11d74:	push	{r4, sl, fp, lr}
   11d78:	add	fp, sp, #8
   11d7c:	mov	r4, r0
   11d80:	ldr	r0, [r2]
   11d84:	mov	r3, r4
   11d88:	cmp	r0, #0
   11d8c:	stm	r1, {r0, r2}
   11d90:	addne	r3, r0, #4
   11d94:	str	r1, [r3]
   11d98:	str	r1, [r2]
   11d9c:	ldr	r0, [r4, #8]
   11da0:	cmp	r0, #0
   11da4:	beq	11db4 <__assert_fail@plt+0x10f4>
   11da8:	bl	10b4c <free@plt>
   11dac:	mov	r0, #0
   11db0:	str	r0, [r4, #8]
   11db4:	ldr	r0, [r4, #12]
   11db8:	add	r0, r0, #1
   11dbc:	str	r0, [r4, #12]
   11dc0:	pop	{r4, sl, fp, pc}
   11dc4:	push	{r4, sl, fp, lr}
   11dc8:	add	fp, sp, #8
   11dcc:	mov	r4, r0
   11dd0:	mov	r0, r1
   11dd4:	cmp	r1, #0
   11dd8:	ldr	r3, [r0, #4]!
   11ddc:	moveq	r0, r4
   11de0:	cmp	r3, #0
   11de4:	stm	r2, {r1, r3}
   11de8:	addeq	r3, r4, #4
   11dec:	str	r2, [r0]
   11df0:	str	r2, [r3]
   11df4:	ldr	r0, [r4, #8]
   11df8:	cmp	r0, #0
   11dfc:	beq	11e0c <__assert_fail@plt+0x114c>
   11e00:	bl	10b4c <free@plt>
   11e04:	mov	r0, #0
   11e08:	str	r0, [r4, #8]
   11e0c:	ldr	r0, [r4, #12]
   11e10:	add	r0, r0, #1
   11e14:	str	r0, [r4, #12]
   11e18:	pop	{r4, sl, fp, pc}
   11e1c:	push	{r4, r5, fp, lr}
   11e20:	add	fp, sp, #8
   11e24:	mov	r4, r0
   11e28:	ldm	r1, {r0, r2}
   11e2c:	mov	r5, #0
   11e30:	cmp	r0, #0
   11e34:	streq	r2, [r4]
   11e38:	strne	r2, [r0, #4]
   11e3c:	ldrne	r2, [r1, #4]
   11e40:	cmp	r2, #0
   11e44:	addeq	r2, r4, #4
   11e48:	str	r0, [r2]
   11e4c:	str	r5, [r1]
   11e50:	str	r5, [r1, #4]
   11e54:	ldr	r0, [r4, #8]
   11e58:	cmp	r0, #0
   11e5c:	beq	11e68 <__assert_fail@plt+0x11a8>
   11e60:	bl	10b4c <free@plt>
   11e64:	str	r5, [r4, #8]
   11e68:	ldr	r0, [r4, #12]
   11e6c:	sub	r0, r0, #1
   11e70:	str	r0, [r4, #12]
   11e74:	pop	{r4, r5, fp, pc}
   11e78:	push	{r4, sl, fp, lr}
   11e7c:	add	fp, sp, #8
   11e80:	mov	r4, r0
   11e84:	ldr	r0, [r0, #8]
   11e88:	cmp	r0, #0
   11e8c:	beq	11e94 <__assert_fail@plt+0x11d4>
   11e90:	pop	{r4, sl, fp, pc}
   11e94:	ldr	r0, [r4, #12]
   11e98:	cmp	r0, #0
   11e9c:	beq	11e90 <__assert_fail@plt+0x11d0>
   11ea0:	mov	r1, #4
   11ea4:	bl	1381c <__assert_fail@plt+0x2b5c>
   11ea8:	str	r0, [r4, #8]
   11eac:	ldr	r1, [r4]
   11eb0:	cmp	r1, #0
   11eb4:	beq	11e90 <__assert_fail@plt+0x11d0>
   11eb8:	str	r1, [r0]
   11ebc:	ldr	r0, [r1, #4]
   11ec0:	cmp	r0, #0
   11ec4:	popeq	{r4, sl, fp, pc}
   11ec8:	mov	r1, #4
   11ecc:	ldr	r2, [r4, #8]
   11ed0:	str	r0, [r2, r1]
   11ed4:	add	r1, r1, #4
   11ed8:	ldr	r0, [r0, #4]
   11edc:	cmp	r0, #0
   11ee0:	bne	11ecc <__assert_fail@plt+0x120c>
   11ee4:	b	11e90 <__assert_fail@plt+0x11d0>
   11ee8:	push	{r4, r5, r6, r7, fp, lr}
   11eec:	add	fp, sp, #16
   11ef0:	ldr	r6, [r0]
   11ef4:	cmp	r6, #0
   11ef8:	popeq	{r4, r5, r6, r7, fp, pc}
   11efc:	mov	r4, r1
   11f00:	mov	r5, r0
   11f04:	mov	r7, #0
   11f08:	ldm	r6, {r0, r1}
   11f0c:	cmp	r0, #0
   11f10:	streq	r1, [r5]
   11f14:	strne	r1, [r0, #4]
   11f18:	ldrne	r1, [r6, #4]
   11f1c:	cmp	r1, #0
   11f20:	addeq	r1, r5, #4
   11f24:	str	r0, [r1]
   11f28:	str	r7, [r6]
   11f2c:	str	r7, [r6, #4]
   11f30:	ldr	r0, [r5, #8]
   11f34:	cmp	r0, #0
   11f38:	beq	11f44 <__assert_fail@plt+0x1284>
   11f3c:	bl	10b4c <free@plt>
   11f40:	str	r7, [r5, #8]
   11f44:	ldr	r0, [r5, #12]
   11f48:	sub	r0, r0, #1
   11f4c:	str	r0, [r5, #12]
   11f50:	mov	r0, r6
   11f54:	blx	r4
   11f58:	ldr	r6, [r5]
   11f5c:	cmp	r6, #0
   11f60:	bne	11f08 <__assert_fail@plt+0x1248>
   11f64:	pop	{r4, r5, r6, r7, fp, pc}
   11f68:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   11f6c:	add	fp, sp, #24
   11f70:	movw	r8, #45164	; 0xb06c
   11f74:	mov	r1, r0
   11f78:	movt	r8, #2
   11f7c:	ldrb	r0, [r8]
   11f80:	cmp	r0, #1
   11f84:	beq	120c0 <__assert_fail@plt+0x1400>
   11f88:	cmp	r1, #0
   11f8c:	beq	1203c <__assert_fail@plt+0x137c>
   11f90:	movw	r2, #37068	; 0x90cc
   11f94:	add	r4, r8, #4
   11f98:	movt	r2, #2
   11f9c:	mov	r0, r4
   11fa0:	bl	13f38 <error@@Base+0x210>
   11fa4:	add	r0, r8, #20
   11fa8:	mov	r1, r4
   11fac:	bl	12f68 <__assert_fail@plt+0x22a8>
   11fb0:	movw	r1, #2892	; 0xb4c
   11fb4:	mov	r0, r4
   11fb8:	movt	r1, #1
   11fbc:	bl	11ee8 <__assert_fail@plt+0x1228>
   11fc0:	ldr	r7, [r8, #20]
   11fc4:	cmp	r7, #0
   11fc8:	beq	120b4 <__assert_fail@plt+0x13f4>
   11fcc:	movw	r4, #37108	; 0x90f4
   11fd0:	movw	r5, #18539	; 0x486b
   11fd4:	movt	r4, #2
   11fd8:	movt	r5, #1
   11fdc:	ldr	r6, [r7, #8]
   11fe0:	mov	r0, r4
   11fe4:	mov	r1, r6
   11fe8:	bl	12cdc <__assert_fail@plt+0x201c>
   11fec:	cmp	r0, #0
   11ff0:	beq	12010 <__assert_fail@plt+0x1350>
   11ff4:	mov	r0, r5
   11ff8:	mov	r1, r6
   11ffc:	bl	13db0 <error@@Base+0x88>
   12000:	ldr	r7, [r7, #4]
   12004:	cmp	r7, #0
   12008:	bne	11fdc <__assert_fail@plt+0x131c>
   1200c:	b	120b4 <__assert_fail@plt+0x13f4>
   12010:	mov	r0, #1
   12014:	mov	r1, #12
   12018:	bl	1381c <__assert_fail@plt+0x2b5c>
   1201c:	mov	r1, r0
   12020:	str	r6, [r0, #8]
   12024:	mov	r0, r4
   12028:	bl	12d6c <__assert_fail@plt+0x20ac>
   1202c:	ldr	r7, [r7, #4]
   12030:	cmp	r7, #0
   12034:	bne	11fdc <__assert_fail@plt+0x131c>
   12038:	b	120b4 <__assert_fail@plt+0x13f4>
   1203c:	movw	r5, #18976	; 0x4a20
   12040:	movw	r4, #37108	; 0x90f4
   12044:	movw	r9, #18539	; 0x486b
   12048:	mov	r7, #0
   1204c:	movt	r5, #1
   12050:	movt	r4, #2
   12054:	movt	r9, #1
   12058:	ldr	r6, [r5, r7, lsl #2]
   1205c:	mov	r0, r4
   12060:	mov	r1, r6
   12064:	bl	12cdc <__assert_fail@plt+0x201c>
   12068:	cmp	r0, #0
   1206c:	beq	1208c <__assert_fail@plt+0x13cc>
   12070:	mov	r0, r9
   12074:	mov	r1, r6
   12078:	bl	13db0 <error@@Base+0x88>
   1207c:	add	r7, r7, #1
   12080:	cmp	r7, #110	; 0x6e
   12084:	bne	12058 <__assert_fail@plt+0x1398>
   12088:	b	120b4 <__assert_fail@plt+0x13f4>
   1208c:	mov	r0, #1
   12090:	mov	r1, #12
   12094:	bl	1381c <__assert_fail@plt+0x2b5c>
   12098:	mov	r1, r0
   1209c:	str	r6, [r0, #8]
   120a0:	mov	r0, r4
   120a4:	bl	12d6c <__assert_fail@plt+0x20ac>
   120a8:	add	r7, r7, #1
   120ac:	cmp	r7, #110	; 0x6e
   120b0:	bne	12058 <__assert_fail@plt+0x1398>
   120b4:	mov	r0, #1
   120b8:	strb	r0, [r8]
   120bc:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   120c0:	movw	r0, #18483	; 0x4833
   120c4:	movt	r0, #1
   120c8:	bl	13d28 <error@@Base>
   120cc:	push	{fp, lr}
   120d0:	mov	fp, sp
   120d4:	mov	r1, r0
   120d8:	movw	r0, #45164	; 0xb06c
   120dc:	movt	r0, #2
   120e0:	ldrb	r0, [r0]
   120e4:	cmp	r0, #0
   120e8:	beq	12104 <__assert_fail@plt+0x1444>
   120ec:	movw	r0, #37108	; 0x90f4
   120f0:	movt	r0, #2
   120f4:	bl	12cdc <__assert_fail@plt+0x201c>
   120f8:	cmp	r0, #0
   120fc:	movwne	r0, #1
   12100:	pop	{fp, pc}
   12104:	movw	r0, #18513	; 0x4851
   12108:	movt	r0, #1
   1210c:	bl	13d28 <error@@Base>
   12110:	ldm	r0, {r3, ip}
   12114:	add	r1, r3, r1
   12118:	add	r2, ip, r2
   1211c:	stm	r0, {r1, r2}
   12120:	bx	lr
   12124:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   12128:	add	fp, sp, #24
   1212c:	mov	r8, r3
   12130:	mov	r5, r2
   12134:	mov	r4, r1
   12138:	mov	r6, r0
   1213c:	bl	12cdc <__assert_fail@plt+0x201c>
   12140:	mov	r7, r0
   12144:	cmp	r0, #0
   12148:	bne	12174 <__assert_fail@plt+0x14b4>
   1214c:	mov	r0, #1
   12150:	mov	r1, #20
   12154:	bl	1381c <__assert_fail@plt+0x2b5c>
   12158:	mov	r7, r0
   1215c:	mov	r0, r4
   12160:	bl	10b7c <strdup@plt>
   12164:	str	r0, [r7, #8]
   12168:	mov	r0, r6
   1216c:	mov	r1, r7
   12170:	bl	12d6c <__assert_fail@plt+0x20ac>
   12174:	ldr	r0, [r7, #12]
   12178:	ldr	r1, [r7, #16]
   1217c:	add	r0, r0, r5
   12180:	add	r1, r1, r8
   12184:	str	r0, [r7, #12]
   12188:	str	r1, [r7, #16]
   1218c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   12190:	push	{r4, r5, r6, r7, fp, lr}
   12194:	add	fp, sp, #16
   12198:	sub	sp, sp, #8
   1219c:	mov	r6, r1
   121a0:	movw	r1, #18792	; 0x4968
   121a4:	mov	r5, r0
   121a8:	movt	r1, #1
   121ac:	mov	r0, r6
   121b0:	bl	138b8 <__assert_fail@plt+0x2bf8>
   121b4:	mov	r4, r0
   121b8:	movw	r0, #45200	; 0xb090
   121bc:	mov	r1, #99	; 0x63
   121c0:	movt	r0, #2
   121c4:	mov	r2, r4
   121c8:	bl	10b64 <fgets@plt>
   121cc:	cmp	r0, #0
   121d0:	beq	12374 <__assert_fail@plt+0x16b4>
   121d4:	movw	r0, #45200	; 0xb090
   121d8:	movw	r1, #19416	; 0x4bd8
   121dc:	mov	r2, #45	; 0x2d
   121e0:	movt	r0, #2
   121e4:	movt	r1, #1
   121e8:	bl	10c9c <strncmp@plt>
   121ec:	cmp	r0, #0
   121f0:	bne	12374 <__assert_fail@plt+0x16b4>
   121f4:	movw	r0, #45200	; 0xb090
   121f8:	mov	r1, #99	; 0x63
   121fc:	mov	r2, r4
   12200:	movt	r0, #2
   12204:	bl	10b64 <fgets@plt>
   12208:	cmp	r0, #0
   1220c:	beq	12374 <__assert_fail@plt+0x16b4>
   12210:	movw	r0, #45200	; 0xb090
   12214:	movw	r1, #33207	; 0x81b7
   12218:	movt	r0, #2
   1221c:	movt	r1, #1
   12220:	bl	10b28 <strcmp@plt>
   12224:	cmp	r0, #0
   12228:	bne	12374 <__assert_fail@plt+0x16b4>
   1222c:	movw	r0, #45200	; 0xb090
   12230:	mov	r1, #99	; 0x63
   12234:	mov	r2, r4
   12238:	movt	r0, #2
   1223c:	bl	10b64 <fgets@plt>
   12240:	cmp	r0, #0
   12244:	beq	12374 <__assert_fail@plt+0x16b4>
   12248:	movw	r0, #45200	; 0xb090
   1224c:	movw	r1, #19595	; 0x4c8b
   12250:	add	r2, sp, #4
   12254:	movt	r0, #2
   12258:	movt	r1, #1
   1225c:	bl	10c48 <__isoc99_sscanf@plt>
   12260:	cmp	r0, #1
   12264:	bne	12374 <__assert_fail@plt+0x16b4>
   12268:	movw	r0, #45200	; 0xb090
   1226c:	mov	r1, #99	; 0x63
   12270:	mov	r2, r4
   12274:	movt	r0, #2
   12278:	bl	10b64 <fgets@plt>
   1227c:	cmp	r0, #0
   12280:	beq	12374 <__assert_fail@plt+0x16b4>
   12284:	movw	r0, #45200	; 0xb090
   12288:	movw	r1, #19595	; 0x4c8b
   1228c:	mov	r2, sp
   12290:	movt	r0, #2
   12294:	movt	r1, #1
   12298:	bl	10c48 <__isoc99_sscanf@plt>
   1229c:	cmp	r0, #1
   122a0:	bne	12374 <__assert_fail@plt+0x16b4>
   122a4:	movw	r0, #45200	; 0xb090
   122a8:	mov	r1, #99	; 0x63
   122ac:	mov	r2, r4
   122b0:	movt	r0, #2
   122b4:	bl	10b64 <fgets@plt>
   122b8:	cmp	r0, #0
   122bc:	beq	12374 <__assert_fail@plt+0x16b4>
   122c0:	movw	r0, #45200	; 0xb090
   122c4:	mov	r1, #99	; 0x63
   122c8:	mov	r2, r4
   122cc:	movt	r0, #2
   122d0:	bl	10b64 <fgets@plt>
   122d4:	cmp	r0, #0
   122d8:	beq	12374 <__assert_fail@plt+0x16b4>
   122dc:	ldm	r5, {r0, r1}
   122e0:	ldr	r2, [sp, #4]
   122e4:	add	r0, r0, r2
   122e8:	ldr	r2, [sp]
   122ec:	add	r1, r1, r2
   122f0:	stm	r5, {r0, r1}
   122f4:	add	r1, r5, #8
   122f8:	mov	r0, r4
   122fc:	bl	12390 <__assert_fail@plt+0x16d0>
   12300:	mov	r7, r0
   12304:	add	r1, r5, #416	; 0x1a0
   12308:	mov	r0, r4
   1230c:	bl	12390 <__assert_fail@plt+0x16d0>
   12310:	mov	r6, r0
   12314:	add	r1, r5, #824	; 0x338
   12318:	mov	r0, r4
   1231c:	bl	12390 <__assert_fail@plt+0x16d0>
   12320:	ldr	r0, [sp, #4]
   12324:	cmp	r0, #1
   12328:	blt	12364 <__assert_fail@plt+0x16a4>
   1232c:	add	r1, r5, #920	; 0x398
   12330:	mov	r0, r4
   12334:	bl	12390 <__assert_fail@plt+0x16d0>
   12338:	cmp	r7, #1
   1233c:	blt	1234c <__assert_fail@plt+0x168c>
   12340:	add	r1, r5, #992	; 0x3e0
   12344:	mov	r0, r4
   12348:	bl	124b4 <__assert_fail@plt+0x17f4>
   1234c:	cmp	r6, #1
   12350:	blt	12364 <__assert_fail@plt+0x16a4>
   12354:	movw	r0, #9048	; 0x2358
   12358:	add	r1, r5, r0
   1235c:	mov	r0, r4
   12360:	bl	124b4 <__assert_fail@plt+0x17f4>
   12364:	mov	r0, r4
   12368:	bl	13930 <__assert_fail@plt+0x2c70>
   1236c:	sub	sp, fp, #16
   12370:	pop	{r4, r5, r6, r7, fp, pc}
   12374:	movw	r1, #19482	; 0x4c1a
   12378:	movw	r0, #19464	; 0x4c08
   1237c:	cmp	r6, #0
   12380:	movt	r1, #1
   12384:	movt	r0, #1
   12388:	movne	r1, r6
   1238c:	bl	13d68 <error@@Base+0x40>
   12390:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12394:	add	fp, sp, #28
   12398:	sub	sp, sp, #12
   1239c:	mov	r5, r0
   123a0:	movw	r0, #45200	; 0xb090
   123a4:	mov	r4, r1
   123a8:	mov	r1, #99	; 0x63
   123ac:	movt	r0, #2
   123b0:	mov	r2, r5
   123b4:	bl	10b64 <fgets@plt>
   123b8:	mov	r6, #0
   123bc:	cmp	r0, #0
   123c0:	beq	124a8 <__assert_fail@plt+0x17e8>
   123c4:	movw	r0, #45200	; 0xb090
   123c8:	mov	r1, #99	; 0x63
   123cc:	mov	r2, r5
   123d0:	movt	r0, #2
   123d4:	bl	10b64 <fgets@plt>
   123d8:	cmp	r0, #0
   123dc:	beq	124a8 <__assert_fail@plt+0x17e8>
   123e0:	movw	r7, #45200	; 0xb090
   123e4:	mov	r1, #99	; 0x63
   123e8:	mov	r2, r5
   123ec:	movt	r7, #2
   123f0:	mov	r0, r7
   123f4:	bl	10b64 <fgets@plt>
   123f8:	cmp	r0, #0
   123fc:	beq	124a8 <__assert_fail@plt+0x17e8>
   12400:	mov	r6, #0
   12404:	add	r9, sp, #8
   12408:	add	sl, sp, #4
   1240c:	add	r8, r7, #29
   12410:	movw	r1, #19591	; 0x4c87
   12414:	mov	r0, r7
   12418:	mov	r2, r9
   1241c:	mov	r3, sl
   12420:	movt	r1, #1
   12424:	bl	10c48 <__isoc99_sscanf@plt>
   12428:	cmp	r0, #2
   1242c:	bne	124a8 <__assert_fail@plt+0x17e8>
   12430:	mov	r0, r8
   12434:	mov	r1, #0
   12438:	mov	r2, #10
   1243c:	bl	10b34 <strtol@plt>
   12440:	cmp	r0, #0
   12444:	beq	12450 <__assert_fail@plt+0x1790>
   12448:	ldr	r1, [sp, #8]
   1244c:	b	12470 <__assert_fail@plt+0x17b0>
   12450:	movw	r1, #19583	; 0x4c7f
   12454:	mov	r0, r8
   12458:	movt	r1, #1
   1245c:	bl	10b28 <strcmp@plt>
   12460:	ldr	r1, [sp, #8]
   12464:	cmp	r0, #0
   12468:	movwne	r0, #11
   1246c:	moveq	r6, r1
   12470:	mov	r2, r4
   12474:	ldr	r0, [r2, r0, lsl #3]!
   12478:	add	r0, r0, r1
   1247c:	ldr	r1, [sp, #4]
   12480:	str	r0, [r2]
   12484:	ldr	r0, [r2, #4]
   12488:	add	r0, r0, r1
   1248c:	mov	r1, #99	; 0x63
   12490:	str	r0, [r2, #4]
   12494:	mov	r0, r7
   12498:	mov	r2, r5
   1249c:	bl	10b64 <fgets@plt>
   124a0:	cmp	r0, #0
   124a4:	bne	12410 <__assert_fail@plt+0x1750>
   124a8:	mov	r0, r6
   124ac:	sub	sp, fp, #28
   124b0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   124b4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   124b8:	add	fp, sp, #28
   124bc:	sub	sp, sp, #12
   124c0:	mov	r5, r0
   124c4:	movw	r0, #45200	; 0xb090
   124c8:	mov	r4, r1
   124cc:	mov	r1, #99	; 0x63
   124d0:	movt	r0, #2
   124d4:	mov	r2, r5
   124d8:	bl	10b64 <fgets@plt>
   124dc:	cmp	r0, #0
   124e0:	beq	125d0 <__assert_fail@plt+0x1910>
   124e4:	movw	r0, #45200	; 0xb090
   124e8:	mov	r1, #99	; 0x63
   124ec:	mov	r2, r5
   124f0:	movt	r0, #2
   124f4:	bl	10b64 <fgets@plt>
   124f8:	cmp	r0, #0
   124fc:	beq	125d0 <__assert_fail@plt+0x1910>
   12500:	movw	r6, #45200	; 0xb090
   12504:	mov	r1, #99	; 0x63
   12508:	mov	r2, r5
   1250c:	movt	r6, #2
   12510:	mov	r0, r6
   12514:	bl	10b64 <fgets@plt>
   12518:	cmp	r0, #0
   1251c:	beq	125d0 <__assert_fail@plt+0x1910>
   12520:	add	r7, r6, #29
   12524:	movw	r1, #19591	; 0x4c87
   12528:	mov	r0, r6
   1252c:	add	r2, sp, #8
   12530:	add	r3, sp, #4
   12534:	movt	r1, #1
   12538:	bl	10c48 <__isoc99_sscanf@plt>
   1253c:	cmp	r0, #2
   12540:	bne	125d0 <__assert_fail@plt+0x1910>
   12544:	mov	r0, r6
   12548:	bl	10c30 <strlen@plt>
   1254c:	ldr	r9, [sp, #8]
   12550:	ldr	sl, [sp, #4]
   12554:	add	r0, r6, r0
   12558:	mov	r1, #0
   1255c:	strb	r1, [r0, #-1]
   12560:	mov	r0, r4
   12564:	mov	r1, r7
   12568:	bl	12cdc <__assert_fail@plt+0x201c>
   1256c:	mov	r8, r0
   12570:	cmp	r0, #0
   12574:	bne	125a0 <__assert_fail@plt+0x18e0>
   12578:	mov	r0, #1
   1257c:	mov	r1, #20
   12580:	bl	1381c <__assert_fail@plt+0x2b5c>
   12584:	mov	r8, r0
   12588:	mov	r0, r7
   1258c:	bl	10b7c <strdup@plt>
   12590:	str	r0, [r8, #8]
   12594:	mov	r0, r4
   12598:	mov	r1, r8
   1259c:	bl	12d6c <__assert_fail@plt+0x20ac>
   125a0:	ldr	r0, [r8, #12]
   125a4:	ldr	r1, [r8, #16]
   125a8:	mov	r2, r5
   125ac:	add	r0, r0, r9
   125b0:	add	r1, r1, sl
   125b4:	str	r0, [r8, #12]
   125b8:	str	r1, [r8, #16]
   125bc:	mov	r0, r6
   125c0:	mov	r1, #99	; 0x63
   125c4:	bl	10b64 <fgets@plt>
   125c8:	cmp	r0, #0
   125cc:	bne	12524 <__assert_fail@plt+0x1864>
   125d0:	sub	sp, fp, #28
   125d4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   125d8:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   125dc:	add	fp, sp, #24
   125e0:	sub	sp, sp, #8
   125e4:	mov	r2, r1
   125e8:	movw	r1, #18767	; 0x494f
   125ec:	mov	r5, r0
   125f0:	movt	r1, #1
   125f4:	mov	r0, r2
   125f8:	bl	138b8 <__assert_fail@plt+0x2bf8>
   125fc:	movw	r1, #19488	; 0x4c20
   12600:	movw	r2, #19416	; 0x4bd8
   12604:	movw	r3, #33207	; 0x81b7
   12608:	mov	r4, r0
   1260c:	movt	r1, #1
   12610:	movt	r2, #1
   12614:	movt	r3, #1
   12618:	bl	10c3c <fprintf@plt>
   1261c:	ldr	r2, [r5]
   12620:	movw	r1, #19493	; 0x4c25
   12624:	mov	r0, r4
   12628:	movt	r1, #1
   1262c:	bl	10c3c <fprintf@plt>
   12630:	ldr	r2, [r5, #4]
   12634:	movw	r1, #19507	; 0x4c33
   12638:	mov	r0, r4
   1263c:	movt	r1, #1
   12640:	bl	10c3c <fprintf@plt>
   12644:	ldr	r0, [r5]
   12648:	cmp	r0, #0
   1264c:	beq	1268c <__assert_fail@plt+0x19cc>
   12650:	ldr	r1, [r5, #4]
   12654:	vldr	d16, [pc, #332]	; 127a8 <__assert_fail@plt+0x1ae8>
   12658:	vmov	s2, r0
   1265c:	sub	r1, r0, r1
   12660:	mov	r0, r4
   12664:	vmov	s0, r1
   12668:	movw	r1, #19608	; 0x4c98
   1266c:	vcvt.f64.s32	d17, s0
   12670:	vcvt.f64.s32	d18, s2
   12674:	movt	r1, #1
   12678:	vmul.f64	d16, d17, d16
   1267c:	vdiv.f64	d16, d16, d18
   12680:	vmov	r2, r3, d16
   12684:	bl	10c3c <fprintf@plt>
   12688:	b	126a4 <__assert_fail@plt+0x19e4>
   1268c:	movw	r0, #19599	; 0x4c8f
   12690:	mov	r1, #8
   12694:	mov	r2, #1
   12698:	mov	r3, r4
   1269c:	movt	r0, #1
   126a0:	bl	10bb8 <fwrite@plt>
   126a4:	movw	r0, #19529	; 0x4c49
   126a8:	mov	r1, #12
   126ac:	mov	r2, #1
   126b0:	mov	r3, r4
   126b4:	mov	r7, #1
   126b8:	movt	r0, #1
   126bc:	bl	10bb8 <fwrite@plt>
   126c0:	movw	r3, #19542	; 0x4c56
   126c4:	mov	r8, #0
   126c8:	add	r1, r5, #8
   126cc:	mov	r0, r4
   126d0:	mov	r2, #50	; 0x32
   126d4:	str	r7, [sp, #4]
   126d8:	movt	r3, #1
   126dc:	str	r8, [sp]
   126e0:	bl	127b0 <__assert_fail@plt+0x1af0>
   126e4:	movw	r3, #19561	; 0x4c69
   126e8:	add	r6, r5, #416	; 0x1a0
   126ec:	mov	r0, r4
   126f0:	mov	r2, #50	; 0x32
   126f4:	str	r8, [sp]
   126f8:	str	r7, [sp, #4]
   126fc:	movt	r3, #1
   12700:	mov	r1, r6
   12704:	bl	127b0 <__assert_fail@plt+0x1af0>
   12708:	movw	r3, #19552	; 0x4c60
   1270c:	add	r1, r5, #824	; 0x338
   12710:	mov	r0, r4
   12714:	mov	r2, #10
   12718:	str	r7, [sp]
   1271c:	str	r7, [sp, #4]
   12720:	movt	r3, #1
   12724:	bl	127b0 <__assert_fail@plt+0x1af0>
   12728:	ldr	r0, [r5]
   1272c:	cmp	r0, #1
   12730:	blt	12798 <__assert_fail@plt+0x1ad8>
   12734:	movw	r3, #19575	; 0x4c77
   12738:	add	r1, r5, #920	; 0x398
   1273c:	mov	r0, r4
   12740:	mov	r2, #8
   12744:	str	r8, [sp]
   12748:	str	r8, [sp, #4]
   1274c:	movt	r3, #1
   12750:	bl	127b0 <__assert_fail@plt+0x1af0>
   12754:	ldr	r0, [r5, #8]
   12758:	cmp	r0, #1
   1275c:	blt	12774 <__assert_fail@plt+0x1ab4>
   12760:	movw	r2, #19542	; 0x4c56
   12764:	add	r1, r5, #992	; 0x3e0
   12768:	mov	r0, r4
   1276c:	movt	r2, #1
   12770:	bl	12b10 <__assert_fail@plt+0x1e50>
   12774:	ldr	r0, [r6]
   12778:	cmp	r0, #1
   1277c:	blt	12798 <__assert_fail@plt+0x1ad8>
   12780:	movw	r2, #19561	; 0x4c69
   12784:	movw	r0, #9048	; 0x2358
   12788:	add	r1, r5, r0
   1278c:	movt	r2, #1
   12790:	mov	r0, r4
   12794:	bl	12b10 <__assert_fail@plt+0x1e50>
   12798:	mov	r0, r4
   1279c:	sub	sp, fp, #24
   127a0:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   127a4:	b	13930 <__assert_fail@plt+0x2c70>
   127a8:	andeq	r0, r0, r0
   127ac:	subsmi	r0, r9, r0
   127b0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   127b4:	add	fp, sp, #28
   127b8:	sub	sp, sp, #4
   127bc:	vpush	{d8}
   127c0:	sub	sp, sp, #8
   127c4:	mov	r5, r1
   127c8:	movw	r1, #19614	; 0x4c9e
   127cc:	mov	r8, r2
   127d0:	mov	r2, r3
   127d4:	mov	r4, r0
   127d8:	movt	r1, #1
   127dc:	bl	10c3c <fprintf@plt>
   127e0:	movw	r0, #19662	; 0x4cce
   127e4:	mov	r1, #26
   127e8:	mov	r2, #1
   127ec:	mov	r3, r4
   127f0:	mov	r7, #1
   127f4:	movt	r0, #1
   127f8:	bl	10bb8 <fwrite@plt>
   127fc:	movw	r0, #19689	; 0x4ce9
   12800:	mov	r1, #3
   12804:	mov	r2, #1
   12808:	mov	r3, r4
   1280c:	movt	r0, #1
   12810:	bl	10bb8 <fwrite@plt>
   12814:	ldrb	r1, [fp, #8]
   12818:	movw	r0, #19619	; 0x4ca3
   1281c:	movw	r2, #19626	; 0x4caa
   12820:	movt	r0, #1
   12824:	movt	r2, #1
   12828:	cmp	r1, #0
   1282c:	str	r1, [sp]
   12830:	movw	r1, #19615	; 0x4c9f
   12834:	movne	r2, r0
   12838:	movt	r1, #1
   1283c:	mov	r0, r4
   12840:	bl	10c3c <fprintf@plt>
   12844:	ldr	r1, [fp, #12]
   12848:	lsl	r0, r8, #16
   1284c:	sxth	r6, r8
   12850:	cmp	r0, #65536	; 0x10000
   12854:	str	r1, [sp, #4]
   12858:	blt	12940 <__assert_fail@plt+0x1c80>
   1285c:	vldr	d8, [pc, #676]	; 12b08 <__assert_fail@plt+0x1e48>
   12860:	movw	sl, #19633	; 0x4cb1
   12864:	mov	r8, #1
   12868:	movt	sl, #1
   1286c:	mov	r0, r5
   12870:	ldr	r2, [r0, r7, lsl #3]!
   12874:	cmp	r2, #1
   12878:	blt	12930 <__assert_fail@plt+0x1c70>
   1287c:	cmp	r0, #0
   12880:	beq	128e0 <__assert_fail@plt+0x1c20>
   12884:	add	r9, r5, r7, lsl #3
   12888:	movw	r1, #19651	; 0x4cc3
   1288c:	mov	r0, r4
   12890:	ldr	r3, [r9, #4]!
   12894:	movt	r1, #1
   12898:	bl	10c3c <fprintf@plt>
   1289c:	ldr	r0, [r5, r7, lsl #3]
   128a0:	cmp	r0, #0
   128a4:	beq	128f0 <__assert_fail@plt+0x1c30>
   128a8:	ldr	r1, [r9]
   128ac:	vmov	s2, r0
   128b0:	sub	r1, r0, r1
   128b4:	mov	r0, r4
   128b8:	vmov	s0, r1
   128bc:	movw	r1, #19608	; 0x4c98
   128c0:	vcvt.f64.s32	d16, s0
   128c4:	vcvt.f64.s32	d17, s2
   128c8:	movt	r1, #1
   128cc:	vmul.f64	d16, d16, d8
   128d0:	vdiv.f64	d16, d16, d17
   128d4:	vmov	r2, r3, d16
   128d8:	bl	10c3c <fprintf@plt>
   128dc:	b	12908 <__assert_fail@plt+0x1c48>
   128e0:	movw	r0, #19662	; 0x4cce
   128e4:	mov	r1, #26
   128e8:	movt	r0, #1
   128ec:	b	128fc <__assert_fail@plt+0x1c3c>
   128f0:	movw	r0, #19599	; 0x4c8f
   128f4:	mov	r1, #8
   128f8:	movt	r0, #1
   128fc:	mov	r2, #1
   12900:	mov	r3, r4
   12904:	bl	10bb8 <fwrite@plt>
   12908:	movw	r0, #19689	; 0x4ce9
   1290c:	mov	r1, #3
   12910:	mov	r2, #1
   12914:	mov	r3, r4
   12918:	movt	r0, #1
   1291c:	bl	10bb8 <fwrite@plt>
   12920:	mov	r0, r4
   12924:	mov	r1, sl
   12928:	mov	r2, r7
   1292c:	bl	10c3c <fprintf@plt>
   12930:	add	r8, r8, #1
   12934:	sxth	r7, r8
   12938:	cmp	r6, r7
   1293c:	bge	1286c <__assert_fail@plt+0x1bac>
   12940:	ldr	r0, [sp]
   12944:	cmp	r0, #0
   12948:	beq	12a1c <__assert_fail@plt+0x1d5c>
   1294c:	add	r7, r6, #1
   12950:	mov	r0, r5
   12954:	ldr	r2, [r0, r7, lsl #3]!
   12958:	cmp	r2, #1
   1295c:	blt	12a1c <__assert_fail@plt+0x1d5c>
   12960:	cmp	r0, #0
   12964:	beq	129c8 <__assert_fail@plt+0x1d08>
   12968:	add	r8, r5, r7, lsl #3
   1296c:	movw	r1, #19651	; 0x4cc3
   12970:	mov	r0, r4
   12974:	ldr	r3, [r8, #4]!
   12978:	movt	r1, #1
   1297c:	bl	10c3c <fprintf@plt>
   12980:	ldr	r0, [r5, r7, lsl #3]
   12984:	cmp	r0, #0
   12988:	beq	129d8 <__assert_fail@plt+0x1d18>
   1298c:	ldr	r1, [r8]
   12990:	vldr	d16, [pc, #368]	; 12b08 <__assert_fail@plt+0x1e48>
   12994:	vmov	s2, r0
   12998:	sub	r1, r0, r1
   1299c:	mov	r0, r4
   129a0:	vmov	s0, r1
   129a4:	movw	r1, #19608	; 0x4c98
   129a8:	vcvt.f64.s32	d17, s0
   129ac:	vcvt.f64.s32	d18, s2
   129b0:	movt	r1, #1
   129b4:	vmul.f64	d16, d17, d16
   129b8:	vdiv.f64	d16, d16, d18
   129bc:	vmov	r2, r3, d16
   129c0:	bl	10c3c <fprintf@plt>
   129c4:	b	129f0 <__assert_fail@plt+0x1d30>
   129c8:	movw	r0, #19662	; 0x4cce
   129cc:	mov	r1, #26
   129d0:	movt	r0, #1
   129d4:	b	129e4 <__assert_fail@plt+0x1d24>
   129d8:	movw	r0, #19599	; 0x4c8f
   129dc:	mov	r1, #8
   129e0:	movt	r0, #1
   129e4:	mov	r2, #1
   129e8:	mov	r3, r4
   129ec:	bl	10bb8 <fwrite@plt>
   129f0:	movw	r0, #19689	; 0x4ce9
   129f4:	mov	r1, #3
   129f8:	mov	r2, #1
   129fc:	mov	r3, r4
   12a00:	movt	r0, #1
   12a04:	bl	10bb8 <fwrite@plt>
   12a08:	movw	r1, #19642	; 0x4cba
   12a0c:	mov	r0, r4
   12a10:	mov	r2, r6
   12a14:	movt	r1, #1
   12a18:	bl	10c3c <fprintf@plt>
   12a1c:	ldr	r0, [sp, #4]
   12a20:	tst	r0, #255	; 0xff
   12a24:	beq	12a8c <__assert_fail@plt+0x1dcc>
   12a28:	cmp	r5, #0
   12a2c:	beq	12a9c <__assert_fail@plt+0x1ddc>
   12a30:	ldm	r5, {r2, r3}
   12a34:	movw	r1, #19651	; 0x4cc3
   12a38:	mov	r0, r4
   12a3c:	movt	r1, #1
   12a40:	bl	10c3c <fprintf@plt>
   12a44:	ldr	r0, [r5]
   12a48:	cmp	r0, #0
   12a4c:	beq	12aac <__assert_fail@plt+0x1dec>
   12a50:	ldr	r1, [r5, #4]
   12a54:	vldr	d16, [pc, #172]	; 12b08 <__assert_fail@plt+0x1e48>
   12a58:	vmov	s2, r0
   12a5c:	sub	r1, r0, r1
   12a60:	mov	r0, r4
   12a64:	vmov	s0, r1
   12a68:	movw	r1, #19608	; 0x4c98
   12a6c:	vcvt.f64.s32	d17, s0
   12a70:	vcvt.f64.s32	d18, s2
   12a74:	movt	r1, #1
   12a78:	vmul.f64	d16, d17, d16
   12a7c:	vdiv.f64	d16, d16, d18
   12a80:	vmov	r2, r3, d16
   12a84:	bl	10c3c <fprintf@plt>
   12a88:	b	12ac4 <__assert_fail@plt+0x1e04>
   12a8c:	sub	sp, fp, #40	; 0x28
   12a90:	vpop	{d8}
   12a94:	add	sp, sp, #4
   12a98:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12a9c:	movw	r0, #19662	; 0x4cce
   12aa0:	mov	r1, #26
   12aa4:	movt	r0, #1
   12aa8:	b	12ab8 <__assert_fail@plt+0x1df8>
   12aac:	movw	r0, #19599	; 0x4c8f
   12ab0:	mov	r1, #8
   12ab4:	movt	r0, #1
   12ab8:	mov	r2, #1
   12abc:	mov	r3, r4
   12ac0:	bl	10bb8 <fwrite@plt>
   12ac4:	movw	r0, #19689	; 0x4ce9
   12ac8:	mov	r1, #3
   12acc:	mov	r2, #1
   12ad0:	mov	r3, r4
   12ad4:	movt	r0, #1
   12ad8:	bl	10bb8 <fwrite@plt>
   12adc:	movw	r0, #19583	; 0x4c7f
   12ae0:	mov	r1, #7
   12ae4:	mov	r2, #1
   12ae8:	mov	r3, r4
   12aec:	movt	r0, #1
   12af0:	sub	sp, fp, #40	; 0x28
   12af4:	vpop	{d8}
   12af8:	add	sp, sp, #4
   12afc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12b00:	b	10bb8 <fwrite@plt>
   12b04:	nop	{0}
   12b08:	andeq	r0, r0, r0
   12b0c:	subsmi	r0, r9, r0
   12b10:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12b14:	add	fp, sp, #28
   12b18:	sub	sp, sp, #4
   12b1c:	vpush	{d8}
   12b20:	mov	r5, r0
   12b24:	mov	r0, r1
   12b28:	mov	r6, r2
   12b2c:	mov	r8, r1
   12b30:	bl	12e8c <__assert_fail@plt+0x21cc>
   12b34:	movw	r0, #8052	; 0x1f74
   12b38:	movw	r2, #11408	; 0x2c90
   12b3c:	ldr	r0, [r8, r0]!
   12b40:	movt	r2, #1
   12b44:	mov	r4, r8
   12b48:	ldr	r1, [r4, #-4]!
   12b4c:	bl	14634 <error@@Base+0x90c>
   12b50:	movw	r1, #19614	; 0x4c9e
   12b54:	mov	r0, r5
   12b58:	mov	r2, r6
   12b5c:	movt	r1, #1
   12b60:	bl	10c3c <fprintf@plt>
   12b64:	movw	r0, #19662	; 0x4cce
   12b68:	mov	r1, #26
   12b6c:	mov	r2, #1
   12b70:	mov	r3, r5
   12b74:	movt	r0, #1
   12b78:	bl	10bb8 <fwrite@plt>
   12b7c:	movw	r0, #19689	; 0x4ce9
   12b80:	mov	r1, #3
   12b84:	mov	r2, #1
   12b88:	mov	r3, r5
   12b8c:	movt	r0, #1
   12b90:	bl	10bb8 <fwrite@plt>
   12b94:	mov	r0, #10
   12b98:	mov	r1, r5
   12b9c:	bl	10c6c <fputc@plt>
   12ba0:	ldr	r0, [r8]
   12ba4:	cmp	r0, #1
   12ba8:	blt	12c7c <__assert_fail@plt+0x1fbc>
   12bac:	vldr	d8, [pc, #212]	; 12c88 <__assert_fail@plt+0x1fc8>
   12bb0:	movw	r7, #19689	; 0x4ce9
   12bb4:	movw	r6, #19615	; 0x4c9f
   12bb8:	mov	sl, #0
   12bbc:	movt	r7, #1
   12bc0:	movt	r6, #1
   12bc4:	ldr	r0, [r4]
   12bc8:	movw	r1, #19651	; 0x4cc3
   12bcc:	movt	r1, #1
   12bd0:	ldr	r9, [r0, sl, lsl #2]
   12bd4:	mov	r0, r5
   12bd8:	ldr	r2, [r9, #12]
   12bdc:	ldr	r3, [r9, #16]
   12be0:	bl	10c3c <fprintf@plt>
   12be4:	ldr	r0, [r9, #12]
   12be8:	cmp	r0, #0
   12bec:	beq	12c28 <__assert_fail@plt+0x1f68>
   12bf0:	ldr	r1, [r9, #16]
   12bf4:	vmov	s2, r0
   12bf8:	sub	r1, r0, r1
   12bfc:	mov	r0, r5
   12c00:	vmov	s0, r1
   12c04:	movw	r1, #19608	; 0x4c98
   12c08:	vcvt.f64.s32	d16, s0
   12c0c:	vcvt.f64.s32	d17, s2
   12c10:	movt	r1, #1
   12c14:	vmul.f64	d16, d16, d8
   12c18:	vdiv.f64	d16, d16, d17
   12c1c:	vmov	r2, r3, d16
   12c20:	bl	10c3c <fprintf@plt>
   12c24:	b	12c40 <__assert_fail@plt+0x1f80>
   12c28:	movw	r0, #19599	; 0x4c8f
   12c2c:	mov	r1, #8
   12c30:	mov	r2, #1
   12c34:	mov	r3, r5
   12c38:	movt	r0, #1
   12c3c:	bl	10bb8 <fwrite@plt>
   12c40:	mov	r0, r7
   12c44:	mov	r1, #3
   12c48:	mov	r2, #1
   12c4c:	mov	r3, r5
   12c50:	bl	10bb8 <fwrite@plt>
   12c54:	ldr	r0, [r4]
   12c58:	mov	r1, r6
   12c5c:	ldr	r0, [r0, sl, lsl #2]
   12c60:	ldr	r2, [r0, #8]
   12c64:	mov	r0, r5
   12c68:	bl	10c3c <fprintf@plt>
   12c6c:	ldr	r0, [r8]
   12c70:	add	sl, sl, #1
   12c74:	cmp	sl, r0
   12c78:	blt	12bc4 <__assert_fail@plt+0x1f04>
   12c7c:	vpop	{d8}
   12c80:	add	sp, sp, #4
   12c84:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12c88:	andeq	r0, r0, r0
   12c8c:	subsmi	r0, r9, r0
   12c90:	ldr	r1, [r1, #8]
   12c94:	ldr	r0, [r0, #8]
   12c98:	b	1383c <__assert_fail@plt+0x2b7c>
   12c9c:	push	{r4, r5, r6, sl, fp, lr}
   12ca0:	add	fp, sp, #16
   12ca4:	mov	r4, r0
   12ca8:	movw	r6, #503	; 0x1f7
   12cac:	mov	r5, r0
   12cb0:	mov	r0, r5
   12cb4:	bl	11cc8 <__assert_fail@plt+0x1008>
   12cb8:	subs	r6, r6, #1
   12cbc:	add	r5, r5, #16
   12cc0:	bne	12cb0 <__assert_fail@plt+0x1ff0>
   12cc4:	movw	r0, #8052	; 0x1f74
   12cc8:	mov	r1, #0
   12ccc:	str	r1, [r4, r0]
   12cd0:	movw	r0, #8048	; 0x1f70
   12cd4:	str	r1, [r4, r0]
   12cd8:	pop	{r4, r5, r6, sl, fp, pc}
   12cdc:	push	{r4, r5, r6, sl, fp, lr}
   12ce0:	add	fp, sp, #16
   12ce4:	mov	r5, r1
   12ce8:	ldrb	r1, [r1]
   12cec:	mov	r4, #0
   12cf0:	mov	r2, #0
   12cf4:	cmp	r1, #0
   12cf8:	beq	12d2c <__assert_fail@plt+0x206c>
   12cfc:	add	r3, r5, #1
   12d00:	mov	r2, #0
   12d04:	uxtab	r2, r2, r1
   12d08:	ldrb	r1, [r3], #1
   12d0c:	cmp	r1, #0
   12d10:	bne	12d04 <__assert_fail@plt+0x2044>
   12d14:	movw	r1, #20065	; 0x4e61
   12d18:	movt	r1, #33354	; 0x824a
   12d1c:	umull	r1, r3, r2, r1
   12d20:	lsr	r1, r3, #8
   12d24:	movw	r3, #503	; 0x1f7
   12d28:	mls	r2, r1, r3, r2
   12d2c:	ldr	r6, [r0, r2, lsl #4]
   12d30:	cmp	r6, #0
   12d34:	bne	12d4c <__assert_fail@plt+0x208c>
   12d38:	mov	r0, r4
   12d3c:	pop	{r4, r5, r6, sl, fp, pc}
   12d40:	ldr	r6, [r6, #4]
   12d44:	cmp	r6, #0
   12d48:	beq	12d38 <__assert_fail@plt+0x2078>
   12d4c:	ldr	r1, [r6, #8]
   12d50:	mov	r0, r5
   12d54:	bl	10b28 <strcmp@plt>
   12d58:	cmp	r0, #0
   12d5c:	bne	12d40 <__assert_fail@plt+0x2080>
   12d60:	mov	r4, r6
   12d64:	mov	r0, r4
   12d68:	pop	{r4, r5, r6, sl, fp, pc}
   12d6c:	push	{r4, r5, fp, lr}
   12d70:	add	fp, sp, #8
   12d74:	mov	r4, r0
   12d78:	ldr	r0, [r1, #8]
   12d7c:	ldrb	r2, [r0]
   12d80:	cmp	r2, #0
   12d84:	beq	12dbc <__assert_fail@plt+0x20fc>
   12d88:	add	r3, r0, #1
   12d8c:	mov	r0, #0
   12d90:	uxtab	r0, r0, r2
   12d94:	ldrb	r2, [r3], #1
   12d98:	cmp	r2, #0
   12d9c:	bne	12d90 <__assert_fail@plt+0x20d0>
   12da0:	movw	r2, #20065	; 0x4e61
   12da4:	movt	r2, #33354	; 0x824a
   12da8:	umull	r2, r3, r0, r2
   12dac:	lsr	r2, r3, #8
   12db0:	movw	r3, #503	; 0x1f7
   12db4:	mls	r0, r2, r3, r0
   12db8:	b	12dc0 <__assert_fail@plt+0x2100>
   12dbc:	mov	r0, #0
   12dc0:	add	r0, r4, r0, lsl #4
   12dc4:	bl	11cd4 <__assert_fail@plt+0x1014>
   12dc8:	movw	r0, #8048	; 0x1f70
   12dcc:	mov	r5, r4
   12dd0:	ldr	r0, [r5, r0]!
   12dd4:	cmp	r0, #0
   12dd8:	beq	12de8 <__assert_fail@plt+0x2128>
   12ddc:	bl	10b4c <free@plt>
   12de0:	mov	r0, #0
   12de4:	str	r0, [r5]
   12de8:	movw	r0, #8052	; 0x1f74
   12dec:	ldr	r0, [r4, r0]!
   12df0:	add	r0, r0, #1
   12df4:	str	r0, [r4]
   12df8:	pop	{r4, r5, fp, pc}
   12dfc:	push	{r4, r5, fp, lr}
   12e00:	add	fp, sp, #8
   12e04:	mov	r4, r0
   12e08:	ldr	r0, [r1, #8]
   12e0c:	ldrb	r2, [r0]
   12e10:	cmp	r2, #0
   12e14:	beq	12e4c <__assert_fail@plt+0x218c>
   12e18:	add	r3, r0, #1
   12e1c:	mov	r0, #0
   12e20:	uxtab	r0, r0, r2
   12e24:	ldrb	r2, [r3], #1
   12e28:	cmp	r2, #0
   12e2c:	bne	12e20 <__assert_fail@plt+0x2160>
   12e30:	movw	r2, #20065	; 0x4e61
   12e34:	movt	r2, #33354	; 0x824a
   12e38:	umull	r2, r3, r0, r2
   12e3c:	lsr	r2, r3, #8
   12e40:	movw	r3, #503	; 0x1f7
   12e44:	mls	r0, r2, r3, r0
   12e48:	b	12e50 <__assert_fail@plt+0x2190>
   12e4c:	mov	r0, #0
   12e50:	add	r0, r4, r0, lsl #4
   12e54:	bl	11e1c <__assert_fail@plt+0x115c>
   12e58:	movw	r0, #8048	; 0x1f70
   12e5c:	mov	r5, r4
   12e60:	ldr	r0, [r5, r0]!
   12e64:	cmp	r0, #0
   12e68:	beq	12e78 <__assert_fail@plt+0x21b8>
   12e6c:	bl	10b4c <free@plt>
   12e70:	mov	r0, #0
   12e74:	str	r0, [r5]
   12e78:	movw	r0, #8052	; 0x1f74
   12e7c:	ldr	r0, [r4, r0]!
   12e80:	sub	r0, r0, #1
   12e84:	str	r0, [r4]
   12e88:	pop	{r4, r5, fp, pc}
   12e8c:	push	{r4, r5, fp, lr}
   12e90:	add	fp, sp, #8
   12e94:	mov	r4, r0
   12e98:	movw	r0, #8048	; 0x1f70
   12e9c:	mov	r5, r4
   12ea0:	ldr	r0, [r5, r0]!
   12ea4:	cmp	r0, #0
   12ea8:	bne	12f04 <__assert_fail@plt+0x2244>
   12eac:	movw	r0, #8052	; 0x1f74
   12eb0:	ldr	r0, [r4, r0]
   12eb4:	cmp	r0, #0
   12eb8:	popeq	{r4, r5, fp, pc}
   12ebc:	mov	r1, #4
   12ec0:	bl	1381c <__assert_fail@plt+0x2b5c>
   12ec4:	str	r0, [r5]
   12ec8:	mov	r0, #0
   12ecc:	movw	ip, #503	; 0x1f7
   12ed0:	mov	r2, #0
   12ed4:	ldr	r3, [r4, r2, lsl #4]
   12ed8:	cmp	r3, #0
   12edc:	beq	12ef8 <__assert_fail@plt+0x2238>
   12ee0:	ldr	r1, [r5]
   12ee4:	str	r3, [r1, r0, lsl #2]
   12ee8:	add	r0, r0, #1
   12eec:	ldr	r3, [r3, #4]
   12ef0:	cmp	r3, #0
   12ef4:	bne	12ee0 <__assert_fail@plt+0x2220>
   12ef8:	add	r2, r2, #1
   12efc:	cmp	r2, ip
   12f00:	bne	12ed4 <__assert_fail@plt+0x2214>
   12f04:	pop	{r4, r5, fp, pc}
   12f08:	push	{r4, r5, r6, r7, fp, lr}
   12f0c:	add	fp, sp, #16
   12f10:	mov	r5, r1
   12f14:	mov	r4, r0
   12f18:	movw	r7, #503	; 0x1f7
   12f1c:	mov	r6, r0
   12f20:	mov	r0, r6
   12f24:	mov	r1, r5
   12f28:	bl	11ee8 <__assert_fail@plt+0x1228>
   12f2c:	subs	r7, r7, #1
   12f30:	add	r6, r6, #16
   12f34:	bne	12f20 <__assert_fail@plt+0x2260>
   12f38:	movw	r0, #8048	; 0x1f70
   12f3c:	mov	r5, r4
   12f40:	ldr	r0, [r5, r0]!
   12f44:	cmp	r0, #0
   12f48:	beq	12f58 <__assert_fail@plt+0x2298>
   12f4c:	bl	10b4c <free@plt>
   12f50:	mov	r0, #0
   12f54:	str	r0, [r5]
   12f58:	movw	r0, #8052	; 0x1f74
   12f5c:	mov	r1, #0
   12f60:	str	r1, [r4, r0]
   12f64:	pop	{r4, r5, r6, r7, fp, pc}
   12f68:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12f6c:	add	fp, sp, #28
   12f70:	sub	sp, sp, #28
   12f74:	ldr	r8, [r1]
   12f78:	str	r0, [sp, #4]
   12f7c:	cmp	r8, #0
   12f80:	str	r8, [sp, #16]
   12f84:	beq	13794 <__assert_fail@plt+0x2ad4>
   12f88:	movw	sl, #19696	; 0x4cf0
   12f8c:	add	r9, sp, #12
   12f90:	movt	sl, #1
   12f94:	mov	r0, #17
   12f98:	mov	r1, r8
   12f9c:	mov	r5, r9
   12fa0:	mov	lr, r0
   12fa4:	mov	r9, #18
   12fa8:	cmp	r5, #0
   12fac:	beq	13118 <__assert_fail@plt+0x2458>
   12fb0:	mov	r5, r1
   12fb4:	ldr	r0, [r5, #12]
   12fb8:	mov	r2, #0
   12fbc:	movw	r1, #1092	; 0x444
   12fc0:	sub	r3, r1, r2
   12fc4:	add	r3, r2, r3, lsr #1
   12fc8:	add	r7, r3, r3, lsl #1
   12fcc:	ldr	r6, [sl, r7, lsl #2]
   12fd0:	cmp	r6, r0
   12fd4:	bls	12fe8 <__assert_fail@plt+0x2328>
   12fd8:	sub	r1, r3, #1
   12fdc:	cmp	r1, r2
   12fe0:	bcs	12fc0 <__assert_fail@plt+0x2300>
   12fe4:	b	13034 <__assert_fail@plt+0x2374>
   12fe8:	add	r2, sl, r7, lsl #2
   12fec:	ldr	r7, [r2, #4]
   12ff0:	cmp	r7, r0
   12ff4:	bcs	13008 <__assert_fail@plt+0x2348>
   12ff8:	add	r2, r3, #1
   12ffc:	cmp	r1, r2
   13000:	bcs	12fc0 <__assert_fail@plt+0x2300>
   13004:	b	13034 <__assert_fail@plt+0x2374>
   13008:	ldr	r1, [r2, #8]
   1300c:	orr	r1, r1, #2
   13010:	cmp	r1, #6
   13014:	bne	13034 <__assert_fail@plt+0x2374>
   13018:	ldr	r5, [r5, #4]
   1301c:	cmp	r5, #0
   13020:	bne	12fb4 <__assert_fail@plt+0x22f4>
   13024:	mov	r2, #18
   13028:	mov	ip, #18
   1302c:	mov	r5, #0
   13030:	b	13360 <__assert_fail@plt+0x26a0>
   13034:	cmp	r5, #0
   13038:	beq	13118 <__assert_fail@plt+0x2458>
   1303c:	mov	r2, #0
   13040:	movw	r1, #1092	; 0x444
   13044:	sub	r3, r1, r2
   13048:	add	r3, r2, r3, lsr #1
   1304c:	add	r7, r3, r3, lsl #1
   13050:	ldr	r6, [sl, r7, lsl #2]
   13054:	cmp	r6, r0
   13058:	bls	1306c <__assert_fail@plt+0x23ac>
   1305c:	sub	r1, r3, #1
   13060:	cmp	r1, r2
   13064:	bcs	13044 <__assert_fail@plt+0x2384>
   13068:	b	13088 <__assert_fail@plt+0x23c8>
   1306c:	add	r2, sl, r7, lsl #2
   13070:	ldr	r7, [r2, #4]
   13074:	cmp	r7, r0
   13078:	bcs	1334c <__assert_fail@plt+0x268c>
   1307c:	add	r2, r3, #1
   13080:	cmp	r1, r2
   13084:	bcs	13044 <__assert_fail@plt+0x2384>
   13088:	mov	ip, #0
   1308c:	ldr	r6, [r5, #4]
   13090:	cmp	r6, #0
   13094:	beq	1335c <__assert_fail@plt+0x269c>
   13098:	mov	r2, r6
   1309c:	str	r5, [sp, #8]
   130a0:	ldr	r0, [r2, #12]
   130a4:	mov	r4, #0
   130a8:	movw	r3, #1092	; 0x444
   130ac:	sub	r7, r3, r4
   130b0:	add	r7, r4, r7, lsr #1
   130b4:	add	r5, r7, r7, lsl #1
   130b8:	ldr	r1, [sl, r5, lsl #2]
   130bc:	cmp	r1, r0
   130c0:	bls	130d4 <__assert_fail@plt+0x2414>
   130c4:	sub	r3, r7, #1
   130c8:	cmp	r3, r4
   130cc:	bcs	130ac <__assert_fail@plt+0x23ec>
   130d0:	b	13128 <__assert_fail@plt+0x2468>
   130d4:	add	r5, sl, r5, lsl #2
   130d8:	ldr	r1, [r5, #4]
   130dc:	cmp	r1, r0
   130e0:	bcs	130f4 <__assert_fail@plt+0x2434>
   130e4:	add	r4, r7, #1
   130e8:	cmp	r3, r4
   130ec:	bcs	130ac <__assert_fail@plt+0x23ec>
   130f0:	b	13128 <__assert_fail@plt+0x2468>
   130f4:	ldr	r1, [r5, #8]
   130f8:	orr	r1, r1, #2
   130fc:	cmp	r1, #6
   13100:	bne	13128 <__assert_fail@plt+0x2468>
   13104:	ldr	r2, [r2, #4]
   13108:	cmp	r2, #0
   1310c:	bne	130a0 <__assert_fail@plt+0x23e0>
   13110:	mov	r2, #18
   13114:	b	13190 <__assert_fail@plt+0x24d0>
   13118:	mov	r5, #0
   1311c:	mov	r2, #18
   13120:	mov	ip, #18
   13124:	b	13360 <__assert_fail@plt+0x26a0>
   13128:	cmp	r2, #0
   1312c:	beq	1318c <__assert_fail@plt+0x24cc>
   13130:	mov	r3, #0
   13134:	movw	r2, #1092	; 0x444
   13138:	sub	r1, r2, r3
   1313c:	add	r7, r3, r1, lsr #1
   13140:	add	r5, r7, r7, lsl #1
   13144:	ldr	r1, [sl, r5, lsl #2]
   13148:	cmp	r1, r0
   1314c:	bls	13160 <__assert_fail@plt+0x24a0>
   13150:	sub	r2, r7, #1
   13154:	cmp	r2, r3
   13158:	bcs	13138 <__assert_fail@plt+0x2478>
   1315c:	b	13184 <__assert_fail@plt+0x24c4>
   13160:	add	r3, sl, r5, lsl #2
   13164:	ldr	r1, [r3, #4]
   13168:	cmp	r1, r0
   1316c:	bcs	134f0 <__assert_fail@plt+0x2830>
   13170:	add	r3, r7, #1
   13174:	cmp	r2, r3
   13178:	bcs	13138 <__assert_fail@plt+0x2478>
   1317c:	mov	r2, #0
   13180:	b	13190 <__assert_fail@plt+0x24d0>
   13184:	mov	r2, #0
   13188:	b	13190 <__assert_fail@plt+0x24d0>
   1318c:	mov	r2, #18
   13190:	ldr	r0, [r6, #12]
   13194:	mov	r4, #0
   13198:	movw	r3, #1092	; 0x444
   1319c:	sub	r1, r3, r4
   131a0:	add	r7, r4, r1, lsr #1
   131a4:	add	r5, r7, r7, lsl #1
   131a8:	ldr	r1, [sl, r5, lsl #2]
   131ac:	cmp	r1, r0
   131b0:	bls	131c4 <__assert_fail@plt+0x2504>
   131b4:	sub	r3, r7, #1
   131b8:	cmp	r3, r4
   131bc:	bcs	1319c <__assert_fail@plt+0x24dc>
   131c0:	b	1321c <__assert_fail@plt+0x255c>
   131c4:	add	r5, sl, r5, lsl #2
   131c8:	ldr	r1, [r5, #4]
   131cc:	cmp	r1, r0
   131d0:	bcs	131e4 <__assert_fail@plt+0x2524>
   131d4:	add	r4, r7, #1
   131d8:	cmp	r3, r4
   131dc:	bcs	1319c <__assert_fail@plt+0x24dc>
   131e0:	b	1321c <__assert_fail@plt+0x255c>
   131e4:	ldr	r0, [r5, #8]
   131e8:	orr	r0, r0, #2
   131ec:	cmp	r0, #6
   131f0:	bne	1321c <__assert_fail@plt+0x255c>
   131f4:	ldr	r6, [r6, #4]
   131f8:	cmp	r6, #0
   131fc:	bne	13190 <__assert_fail@plt+0x24d0>
   13200:	ldr	r5, [sp, #8]
   13204:	mov	r9, #18
   13208:	cmp	ip, #1
   1320c:	moveq	r0, #1
   13210:	cmpeq	r2, #2
   13214:	bne	13360 <__assert_fail@plt+0x26a0>
   13218:	b	13470 <__assert_fail@plt+0x27b0>
   1321c:	mov	r9, #18
   13220:	cmp	r6, #0
   13224:	beq	1331c <__assert_fail@plt+0x265c>
   13228:	ldr	r6, [r6, #4]
   1322c:	cmp	r6, #0
   13230:	beq	132a4 <__assert_fail@plt+0x25e4>
   13234:	ldr	r0, [r6, #12]
   13238:	mov	r3, #0
   1323c:	movw	r4, #1092	; 0x444
   13240:	sub	r1, r4, r3
   13244:	add	r7, r3, r1, lsr #1
   13248:	add	r5, r7, r7, lsl #1
   1324c:	ldr	r1, [sl, r5, lsl #2]
   13250:	cmp	r1, r0
   13254:	bls	13268 <__assert_fail@plt+0x25a8>
   13258:	sub	r4, r7, #1
   1325c:	cmp	r4, r3
   13260:	bcs	13240 <__assert_fail@plt+0x2580>
   13264:	b	132bc <__assert_fail@plt+0x25fc>
   13268:	add	r3, sl, r5, lsl #2
   1326c:	ldr	r1, [r3, #4]
   13270:	cmp	r1, r0
   13274:	bcs	13288 <__assert_fail@plt+0x25c8>
   13278:	add	r3, r7, #1
   1327c:	cmp	r4, r3
   13280:	bcs	13240 <__assert_fail@plt+0x2580>
   13284:	b	132bc <__assert_fail@plt+0x25fc>
   13288:	ldr	r1, [r3, #8]
   1328c:	orr	r1, r1, #2
   13290:	cmp	r1, #6
   13294:	bne	132bc <__assert_fail@plt+0x25fc>
   13298:	ldr	r6, [r6, #4]
   1329c:	cmp	r6, #0
   132a0:	bne	13234 <__assert_fail@plt+0x2574>
   132a4:	ldr	r5, [sp, #8]
   132a8:	cmp	ip, #1
   132ac:	moveq	r0, #1
   132b0:	cmpeq	r2, #2
   132b4:	bne	13360 <__assert_fail@plt+0x26a0>
   132b8:	b	13470 <__assert_fail@plt+0x27b0>
   132bc:	ldr	r5, [sp, #8]
   132c0:	cmp	r6, #0
   132c4:	beq	13320 <__assert_fail@plt+0x2660>
   132c8:	mov	r4, #0
   132cc:	movw	r6, #1092	; 0x444
   132d0:	sub	r1, r6, r4
   132d4:	add	r3, r4, r1, lsr #1
   132d8:	add	r7, r3, r3, lsl #1
   132dc:	ldr	r1, [sl, r7, lsl #2]
   132e0:	cmp	r1, r0
   132e4:	bls	132f8 <__assert_fail@plt+0x2638>
   132e8:	sub	r6, r3, #1
   132ec:	cmp	r6, r4
   132f0:	bcs	132d0 <__assert_fail@plt+0x2610>
   132f4:	b	13334 <__assert_fail@plt+0x2674>
   132f8:	add	r7, sl, r7, lsl #2
   132fc:	ldr	r1, [r7, #4]
   13300:	cmp	r1, r0
   13304:	bcs	135b0 <__assert_fail@plt+0x28f0>
   13308:	add	r4, r3, #1
   1330c:	mov	r9, #0
   13310:	cmp	r6, r4
   13314:	bcs	132d0 <__assert_fail@plt+0x2610>
   13318:	b	13320 <__assert_fail@plt+0x2660>
   1331c:	ldr	r5, [sp, #8]
   13320:	cmp	ip, #1
   13324:	moveq	r0, #1
   13328:	cmpeq	r2, #2
   1332c:	bne	13360 <__assert_fail@plt+0x26a0>
   13330:	b	13470 <__assert_fail@plt+0x27b0>
   13334:	mov	r9, #0
   13338:	cmp	ip, #1
   1333c:	moveq	r0, #1
   13340:	cmpeq	r2, #2
   13344:	bne	13360 <__assert_fail@plt+0x26a0>
   13348:	b	13470 <__assert_fail@plt+0x27b0>
   1334c:	ldr	ip, [r2, #8]
   13350:	ldr	r6, [r5, #4]
   13354:	cmp	r6, #0
   13358:	bne	13098 <__assert_fail@plt+0x23d8>
   1335c:	mov	r2, #18
   13360:	sub	r0, r2, #1
   13364:	cmp	r0, #3
   13368:	subcs	r0, ip, #1
   1336c:	cmpcs	r0, #3
   13370:	bcc	135d8 <__assert_fail@plt+0x2918>
   13374:	orr	r6, r2, #1
   13378:	orr	r4, ip, #1
   1337c:	cmp	r6, #9
   13380:	cmpeq	r4, #9
   13384:	beq	1346c <__assert_fail@plt+0x27ac>
   13388:	cmp	r4, #9
   1338c:	bne	133c8 <__assert_fail@plt+0x2708>
   13390:	cmp	r2, #13
   13394:	bhi	133c8 <__assert_fail@plt+0x2708>
   13398:	mov	r0, #1
   1339c:	mov	r1, #13312	; 0x3400
   133a0:	tst	r1, r0, lsl r2
   133a4:	beq	133c8 <__assert_fail@plt+0x2708>
   133a8:	orr	r0, r9, #1
   133ac:	cmp	r0, #9
   133b0:	bne	133c8 <__assert_fail@plt+0x2708>
   133b4:	mov	r0, ip
   133b8:	ldr	r1, [r5, #4]
   133bc:	cmp	r1, #0
   133c0:	bne	12fa0 <__assert_fail@plt+0x22e0>
   133c4:	b	135d8 <__assert_fail@plt+0x2918>
   133c8:	orr	r0, lr, #1
   133cc:	cmp	r0, #9
   133d0:	bne	13408 <__assert_fail@plt+0x2748>
   133d4:	cmp	ip, #13
   133d8:	bhi	13408 <__assert_fail@plt+0x2748>
   133dc:	mov	r0, #1
   133e0:	mov	r1, #13312	; 0x3400
   133e4:	tst	r1, r0, lsl ip
   133e8:	beq	13408 <__assert_fail@plt+0x2748>
   133ec:	cmp	r6, #9
   133f0:	bne	13408 <__assert_fail@plt+0x2748>
   133f4:	mov	r0, ip
   133f8:	ldr	r1, [r5, #4]
   133fc:	cmp	r1, #0
   13400:	bne	12fa0 <__assert_fail@plt+0x22e0>
   13404:	b	135d8 <__assert_fail@plt+0x2918>
   13408:	cmp	r2, #10
   1340c:	mov	r0, #8
   13410:	cmpeq	ip, #8
   13414:	beq	13470 <__assert_fail@plt+0x27b0>
   13418:	cmp	r9, #8
   1341c:	cmpeq	r2, #11
   13420:	beq	13480 <__assert_fail@plt+0x27c0>
   13424:	cmp	r2, #8
   13428:	cmpeq	lr, #8
   1342c:	beq	1348c <__assert_fail@plt+0x27cc>
   13430:	sub	r0, r4, #9
   13434:	cmp	r2, #15
   13438:	clz	r0, r0
   1343c:	lsr	r1, r0, #5
   13440:	bne	1349c <__assert_fail@plt+0x27dc>
   13444:	sub	r0, ip, #15
   13448:	clz	r0, r0
   1344c:	lsr	r0, r0, #5
   13450:	orrs	r0, r0, r1
   13454:	beq	1349c <__assert_fail@plt+0x27dc>
   13458:	mov	r0, ip
   1345c:	ldr	r1, [r5, #4]
   13460:	cmp	r1, #0
   13464:	bne	12fa0 <__assert_fail@plt+0x22e0>
   13468:	b	135d8 <__assert_fail@plt+0x2918>
   1346c:	mov	r0, ip
   13470:	ldr	r1, [r5, #4]
   13474:	cmp	r1, #0
   13478:	bne	12fa0 <__assert_fail@plt+0x22e0>
   1347c:	b	135d8 <__assert_fail@plt+0x2918>
   13480:	cmp	ip, #8
   13484:	beq	13470 <__assert_fail@plt+0x27b0>
   13488:	b	13424 <__assert_fail@plt+0x2764>
   1348c:	mov	r0, #11
   13490:	cmp	ip, #11
   13494:	beq	13470 <__assert_fail@plt+0x27b0>
   13498:	b	13430 <__assert_fail@plt+0x2770>
   1349c:	cmp	ip, #15
   134a0:	mov	r0, #15
   134a4:	cmpeq	r6, #9
   134a8:	beq	13470 <__assert_fail@plt+0x27b0>
   134ac:	cmp	lr, #15
   134b0:	cmpeq	r2, #15
   134b4:	beq	1354c <__assert_fail@plt+0x288c>
   134b8:	cmp	ip, #15
   134bc:	bne	134f8 <__assert_fail@plt+0x2838>
   134c0:	cmp	r9, #15
   134c4:	bne	13508 <__assert_fail@plt+0x2848>
   134c8:	orr	r7, r2, #2
   134cc:	sub	r3, r2, #10
   134d0:	sub	r7, r7, #14
   134d4:	clz	r3, r3
   134d8:	clz	r7, r7
   134dc:	lsr	r3, r3, #5
   134e0:	lsr	r7, r7, #5
   134e4:	orrs	r3, r3, r7
   134e8:	bne	13470 <__assert_fail@plt+0x27b0>
   134ec:	b	13508 <__assert_fail@plt+0x2848>
   134f0:	ldr	r2, [r3, #8]
   134f4:	b	13190 <__assert_fail@plt+0x24d0>
   134f8:	cmp	r2, #7
   134fc:	moveq	r0, #7
   13500:	cmpeq	ip, #7
   13504:	beq	13470 <__assert_fail@plt+0x27b0>
   13508:	cmp	r2, #16
   1350c:	bne	13584 <__assert_fail@plt+0x28c4>
   13510:	orr	r0, ip, #8
   13514:	sub	r0, r0, #15
   13518:	clz	r0, r0
   1351c:	lsr	r0, r0, #5
   13520:	orr	r0, r0, r1
   13524:	sub	r1, ip, #16
   13528:	clz	r1, r1
   1352c:	lsr	r1, r1, #5
   13530:	orrs	r0, r1, r0
   13534:	beq	13584 <__assert_fail@plt+0x28c4>
   13538:	mov	r0, ip
   1353c:	ldr	r1, [r5, #4]
   13540:	cmp	r1, #0
   13544:	bne	12fa0 <__assert_fail@plt+0x22e0>
   13548:	b	135d8 <__assert_fail@plt+0x2918>
   1354c:	orr	r7, ip, #2
   13550:	sub	r3, ip, #10
   13554:	sub	r7, r7, #14
   13558:	clz	r3, r3
   1355c:	clz	r7, r7
   13560:	lsr	r3, r3, #5
   13564:	lsr	r7, r7, #5
   13568:	orrs	r3, r3, r7
   1356c:	beq	134b8 <__assert_fail@plt+0x27f8>
   13570:	mov	r0, ip
   13574:	ldr	r1, [r5, #4]
   13578:	cmp	r1, #0
   1357c:	bne	12fa0 <__assert_fail@plt+0x22e0>
   13580:	b	135d8 <__assert_fail@plt+0x2918>
   13584:	cmp	ip, #16
   13588:	bne	135c8 <__assert_fail@plt+0x2908>
   1358c:	cmp	r2, #16
   13590:	bhi	135d8 <__assert_fail@plt+0x2918>
   13594:	movw	r3, #33664	; 0x8380
   13598:	mov	r1, #1
   1359c:	mov	r0, #16
   135a0:	movt	r3, #1
   135a4:	tst	r3, r1, lsl r2
   135a8:	bne	13470 <__assert_fail@plt+0x27b0>
   135ac:	b	135d8 <__assert_fail@plt+0x2918>
   135b0:	ldr	r9, [r7, #8]
   135b4:	cmp	ip, #1
   135b8:	moveq	r0, #1
   135bc:	cmpeq	r2, #2
   135c0:	bne	13360 <__assert_fail@plt+0x26a0>
   135c4:	b	13470 <__assert_fail@plt+0x27b0>
   135c8:	cmp	r2, #5
   135cc:	moveq	r0, #5
   135d0:	cmpeq	ip, #5
   135d4:	beq	13470 <__assert_fail@plt+0x27b0>
   135d8:	cmp	r5, #0
   135dc:	add	r9, sp, #12
   135e0:	beq	13794 <__assert_fail@plt+0x2ad4>
   135e4:	ldr	r1, [r5, #4]
   135e8:	cmp	r1, #0
   135ec:	beq	13680 <__assert_fail@plt+0x29c0>
   135f0:	mov	r0, r1
   135f4:	ldr	r1, [r1, #12]
   135f8:	mov	r4, r5
   135fc:	mov	r3, #0
   13600:	movw	r2, #1092	; 0x444
   13604:	sub	r7, r2, r3
   13608:	add	r7, r3, r7, lsr #1
   1360c:	add	r6, r7, r7, lsl #1
   13610:	ldr	r5, [sl, r6, lsl #2]
   13614:	cmp	r5, r1
   13618:	bls	1362c <__assert_fail@plt+0x296c>
   1361c:	sub	r2, r7, #1
   13620:	cmp	r2, r3
   13624:	bcs	13604 <__assert_fail@plt+0x2944>
   13628:	b	13670 <__assert_fail@plt+0x29b0>
   1362c:	add	r3, sl, r6, lsl #2
   13630:	ldr	r6, [r3, #4]
   13634:	cmp	r6, r1
   13638:	bcs	1364c <__assert_fail@plt+0x298c>
   1363c:	add	r3, r7, #1
   13640:	cmp	r2, r3
   13644:	bcs	13604 <__assert_fail@plt+0x2944>
   13648:	b	13670 <__assert_fail@plt+0x29b0>
   1364c:	ldr	r1, [r3, #8]
   13650:	orr	r1, r1, #2
   13654:	cmp	r1, #6
   13658:	bne	13670 <__assert_fail@plt+0x29b0>
   1365c:	ldr	r1, [r0, #4]
   13660:	mov	r5, r0
   13664:	cmp	r1, #0
   13668:	bne	135f0 <__assert_fail@plt+0x2930>
   1366c:	b	13684 <__assert_fail@plt+0x29c4>
   13670:	mov	r5, r4
   13674:	cmp	r4, #0
   13678:	bne	13688 <__assert_fail@plt+0x29c8>
   1367c:	b	13794 <__assert_fail@plt+0x2ad4>
   13680:	mov	r0, r5
   13684:	mov	r5, r0
   13688:	ldr	r0, [r8, #12]
   1368c:	bl	10b58 <utf8proc_get_property@plt>
   13690:	ldrsh	r0, [r0]
   13694:	sub	r1, r0, #1
   13698:	cmp	r1, #12
   1369c:	bcs	13778 <__assert_fail@plt+0x2ab8>
   136a0:	ldr	r4, [r5, #4]!
   136a4:	cmp	r8, r4
   136a8:	beq	13718 <__assert_fail@plt+0x2a58>
   136ac:	mov	r6, #0
   136b0:	mov	r7, r8
   136b4:	cmp	r7, #0
   136b8:	beq	1379c <__assert_fail@plt+0x2adc>
   136bc:	ldr	r0, [r7, #12]
   136c0:	mov	r1, r9
   136c4:	bl	10b70 <utf8proc_encode_char@plt>
   136c8:	cmp	r0, #0
   136cc:	beq	137bc <__assert_fail@plt+0x2afc>
   136d0:	ldr	r7, [r7, #4]
   136d4:	add	r6, r0, r6
   136d8:	cmp	r7, r4
   136dc:	bne	136b4 <__assert_fail@plt+0x29f4>
   136e0:	add	r0, r6, #1
   136e4:	bl	10bdc <malloc@plt>
   136e8:	mov	r6, r0
   136ec:	mov	r9, #0
   136f0:	cmp	r8, #0
   136f4:	beq	137dc <__assert_fail@plt+0x2b1c>
   136f8:	ldr	r0, [r8, #12]
   136fc:	add	r1, r6, r9
   13700:	bl	10b70 <utf8proc_encode_char@plt>
   13704:	ldr	r8, [r8, #4]
   13708:	add	r9, r0, r9
   1370c:	cmp	r8, r4
   13710:	bne	136f0 <__assert_fail@plt+0x2a30>
   13714:	b	13728 <__assert_fail@plt+0x2a68>
   13718:	mov	r0, #1
   1371c:	bl	10bdc <malloc@plt>
   13720:	mov	r6, r0
   13724:	mov	r9, #0
   13728:	mov	r0, #0
   1372c:	mov	r1, #12
   13730:	strb	r0, [r6, r9]
   13734:	mov	r0, #1
   13738:	bl	1381c <__assert_fail@plt+0x2b5c>
   1373c:	mov	r7, r0
   13740:	mov	r0, r6
   13744:	bl	10c60 <utf8proc_NFC@plt>
   13748:	str	r0, [r7, #8]
   1374c:	ldr	r0, [sp, #4]
   13750:	mov	r1, r7
   13754:	bl	11d24 <__assert_fail@plt+0x1064>
   13758:	mov	r0, r6
   1375c:	bl	10b4c <free@plt>
   13760:	add	r9, sp, #12
   13764:	ldr	r8, [r5]
   13768:	cmp	r8, #0
   1376c:	str	r8, [sp, #16]
   13770:	bne	12f94 <__assert_fail@plt+0x22d4>
   13774:	b	13794 <__assert_fail@plt+0x2ad4>
   13778:	cmp	r0, #29
   1377c:	beq	136a0 <__assert_fail@plt+0x29e0>
   13780:	add	r5, r5, #4
   13784:	ldr	r8, [r5]
   13788:	cmp	r8, #0
   1378c:	str	r8, [sp, #16]
   13790:	bne	12f94 <__assert_fail@plt+0x22d4>
   13794:	sub	sp, fp, #28
   13798:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1379c:	movw	r0, #32819	; 0x8033
   137a0:	movw	r1, #32812	; 0x802c
   137a4:	movw	r3, #32835	; 0x8043
   137a8:	mov	r2, #249	; 0xf9
   137ac:	movt	r0, #1
   137b0:	movt	r1, #1
   137b4:	movt	r3, #1
   137b8:	bl	10cc0 <__assert_fail@plt>
   137bc:	movw	r0, #32861	; 0x805d
   137c0:	movw	r1, #32812	; 0x802c
   137c4:	movw	r3, #32835	; 0x8043
   137c8:	mov	r2, #253	; 0xfd
   137cc:	movt	r0, #1
   137d0:	movt	r1, #1
   137d4:	movt	r3, #1
   137d8:	bl	10cc0 <__assert_fail@plt>
   137dc:	movw	r0, #32819	; 0x8033
   137e0:	movw	r1, #32812	; 0x802c
   137e4:	movw	r3, #32880	; 0x8070
   137e8:	movw	r2, #269	; 0x10d
   137ec:	movt	r0, #1
   137f0:	movt	r1, #1
   137f4:	movt	r3, #1
   137f8:	bl	10cc0 <__assert_fail@plt>
   137fc:	push	{r4, sl, fp, lr}
   13800:	add	fp, sp, #8
   13804:	mov	r4, r0
   13808:	ldr	r0, [r0, #8]
   1380c:	bl	10b4c <free@plt>
   13810:	mov	r0, r4
   13814:	pop	{r4, sl, fp, lr}
   13818:	b	10b4c <free@plt>
   1381c:	push	{fp, lr}
   13820:	mov	fp, sp
   13824:	bl	10b1c <calloc@plt>
   13828:	cmp	r0, #0
   1382c:	popne	{fp, pc}
   13830:	movw	r0, #32904	; 0x8088
   13834:	movt	r0, #1
   13838:	bl	13d28 <error@@Base>
   1383c:	push	{r4, r5, r6, sl, fp, lr}
   13840:	add	fp, sp, #16
   13844:	ldrb	r3, [r0]
   13848:	ldrb	ip, [r1]
   1384c:	mov	r2, r0
   13850:	mov	r0, #0
   13854:	cmp	r3, #0
   13858:	beq	13890 <__assert_fail@plt+0x2bd0>
   1385c:	add	r6, r2, #1
   13860:	add	lr, r1, #1
   13864:	mov	r2, #0
   13868:	uxtb	r4, ip
   1386c:	uxtb	r5, r3
   13870:	cmp	r5, r4
   13874:	bne	138a0 <__assert_fail@plt+0x2be0>
   13878:	ldrb	r3, [r6, r2]
   1387c:	ldrb	ip, [lr, r2]
   13880:	add	r2, r2, #1
   13884:	cmp	r3, #0
   13888:	bne	13868 <__assert_fail@plt+0x2ba8>
   1388c:	b	13894 <__assert_fail@plt+0x2bd4>
   13890:	mov	r2, #0
   13894:	cmp	ip, #0
   13898:	popeq	{r4, r5, r6, sl, fp, pc}
   1389c:	mov	r3, #0
   138a0:	ldrb	r1, [r1, r2]
   138a4:	uxtb	r2, r3
   138a8:	mov	r0, #1
   138ac:	cmp	r2, r1
   138b0:	mvncc	r0, #0
   138b4:	pop	{r4, r5, r6, sl, fp, pc}
   138b8:	push	{r4, r5, fp, lr}
   138bc:	add	fp, sp, #8
   138c0:	mov	r5, r1
   138c4:	cmp	r0, #0
   138c8:	beq	138fc <__assert_fail@plt+0x2c3c>
   138cc:	mov	r1, r5
   138d0:	mov	r4, r0
   138d4:	bl	10b40 <fopen@plt>
   138d8:	cmp	r0, #0
   138dc:	popne	{r4, r5, fp, pc}
   138e0:	ldrb	r0, [r5]
   138e4:	cmp	r0, #119	; 0x77
   138e8:	bne	13920 <__assert_fail@plt+0x2c60>
   138ec:	movw	r0, #32930	; 0x80a2
   138f0:	mov	r1, r4
   138f4:	movt	r0, #1
   138f8:	bl	13d68 <error@@Base+0x40>
   138fc:	ldrb	r0, [r5]
   13900:	movw	r1, #37096	; 0x90e8
   13904:	movw	r2, #37100	; 0x90ec
   13908:	movt	r1, #2
   1390c:	movt	r2, #2
   13910:	cmp	r0, #114	; 0x72
   13914:	moveq	r2, r1
   13918:	ldr	r0, [r2]
   1391c:	pop	{r4, r5, fp, pc}
   13920:	movw	r0, #32952	; 0x80b8
   13924:	mov	r1, r4
   13928:	movt	r0, #1
   1392c:	bl	13d68 <error@@Base+0x40>
   13930:	movw	r1, #37096	; 0x90e8
   13934:	movt	r1, #2
   13938:	ldr	r1, [r1]
   1393c:	cmp	r1, r0
   13940:	movwne	r1, #37100	; 0x90ec
   13944:	movtne	r1, #2
   13948:	ldrne	r1, [r1]
   1394c:	cmpne	r1, r0
   13950:	bxeq	lr
   13954:	b	10c54 <fclose@plt>
   13958:	push	{fp, lr}
   1395c:	mov	fp, sp
   13960:	sub	sp, sp, #88	; 0x58
   13964:	mov	r1, r0
   13968:	mov	r2, sp
   1396c:	mov	r0, #3
   13970:	bl	10bac <__xstat@plt>
   13974:	clz	r0, r0
   13978:	lsr	r0, r0, #5
   1397c:	mov	sp, fp
   13980:	pop	{fp, pc}
   13984:	push	{r4, r5, fp, lr}
   13988:	add	fp, sp, #8
   1398c:	sub	sp, sp, #104	; 0x68
   13990:	movw	r0, #45300	; 0xb0f4
   13994:	movt	r0, #2
   13998:	ldrh	r1, [r0]
   1399c:	add	r5, r1, #1
   139a0:	strh	r5, [r0]
   139a4:	movw	r0, #5056	; 0x13c0
   139a8:	movt	r0, #3
   139ac:	ldr	r4, [r0]
   139b0:	bl	10c0c <getpid@plt>
   139b4:	movw	r1, #32993	; 0x80e1
   139b8:	mov	r3, r0
   139bc:	sxth	r0, r5
   139c0:	add	r5, sp, #4
   139c4:	mov	r2, r4
   139c8:	str	r0, [sp]
   139cc:	movt	r1, #1
   139d0:	mov	r0, r5
   139d4:	bl	10c78 <sprintf@plt>
   139d8:	mov	r0, r5
   139dc:	bl	10b7c <strdup@plt>
   139e0:	mov	r4, r0
   139e4:	bl	10b94 <unlink@plt>
   139e8:	mov	r0, r4
   139ec:	sub	sp, fp, #8
   139f0:	pop	{r4, r5, fp, pc}
   139f4:	push	{r4, sl, fp, lr}
   139f8:	add	fp, sp, #8
   139fc:	mov	r4, r0
   13a00:	bl	10c30 <strlen@plt>
   13a04:	sub	r0, r0, #1
   13a08:	sxth	r0, r0
   13a0c:	cmp	r0, #0
   13a10:	blt	13a20 <__assert_fail@plt+0x2d60>
   13a14:	ldrb	r1, [r4, r0]
   13a18:	cmp	r1, #47	; 0x2f
   13a1c:	bne	13a04 <__assert_fail@plt+0x2d44>
   13a20:	add	r0, r4, r0
   13a24:	add	r0, r0, #1
   13a28:	pop	{r4, sl, fp, pc}
   13a2c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13a30:	add	fp, sp, #28
   13a34:	sub	sp, sp, #12
   13a38:	ldr	r4, [r1]
   13a3c:	str	r0, [sp, #8]
   13a40:	mov	r7, r3
   13a44:	str	r2, [sp]
   13a48:	str	r1, [sp, #4]
   13a4c:	mov	r0, r4
   13a50:	bl	10c30 <strlen@plt>
   13a54:	sub	r0, r0, #1
   13a58:	sxth	r0, r0
   13a5c:	cmp	r0, #0
   13a60:	blt	13a70 <__assert_fail@plt+0x2db0>
   13a64:	ldrb	r1, [r4, r0]
   13a68:	cmp	r1, #47	; 0x2f
   13a6c:	bne	13a54 <__assert_fail@plt+0x2d94>
   13a70:	add	r0, r4, r0
   13a74:	movw	r1, #5056	; 0x13c0
   13a78:	movw	r4, #15856	; 0x3df0
   13a7c:	add	r0, r0, #1
   13a80:	movt	r1, #3
   13a84:	movt	r4, #1
   13a88:	str	r0, [r1]
   13a8c:	mov	r0, #2
   13a90:	mov	r1, r4
   13a94:	bl	10bf4 <__sysv_signal@plt>
   13a98:	mov	r0, #15
   13a9c:	mov	r1, r4
   13aa0:	bl	10bf4 <__sysv_signal@plt>
   13aa4:	ldr	r0, [sp, #8]
   13aa8:	ldr	r6, [r0]
   13aac:	cmp	r6, #1
   13ab0:	bne	13ac8 <__assert_fail@plt+0x2e08>
   13ab4:	movw	r0, #37080	; 0x90d8
   13ab8:	movt	r0, #2
   13abc:	ldrb	r0, [r0]
   13ac0:	cmp	r0, #0
   13ac4:	bne	13cd0 <__assert_fail@plt+0x3010>
   13ac8:	ldr	ip, [sp, #4]
   13acc:	mov	r8, #0
   13ad0:	cmp	r6, #2
   13ad4:	blt	13c88 <__assert_fail@plt+0x2fc8>
   13ad8:	cmp	r7, #0
   13adc:	beq	13c44 <__assert_fail@plt+0x2f84>
   13ae0:	mov	r8, #0
   13ae4:	mov	r5, #1
   13ae8:	mov	r9, #1
   13aec:	ldr	r4, [ip, r5, lsl #2]
   13af0:	ldrb	r0, [r4]
   13af4:	cmp	r0, #45	; 0x2d
   13af8:	bne	13bdc <__assert_fail@plt+0x2f1c>
   13afc:	ldrb	sl, [r4, #1]
   13b00:	cmp	sl, #0
   13b04:	beq	13bdc <__assert_fail@plt+0x2f1c>
   13b08:	mov	r0, r4
   13b0c:	bl	10c30 <strlen@plt>
   13b10:	mov	r2, r0
   13b14:	movw	r0, #33022	; 0x80fe
   13b18:	mov	r1, r4
   13b1c:	movt	r0, #1
   13b20:	bl	10c9c <strncmp@plt>
   13b24:	cmp	r0, #0
   13b28:	beq	13cd0 <__assert_fail@plt+0x3010>
   13b2c:	ldr	ip, [sp, #4]
   13b30:	add	r1, r5, #1
   13b34:	mov	r0, #0
   13b38:	ldrb	r2, [r7]
   13b3c:	cmp	r1, r6
   13b40:	ldrlt	r0, [ip, r1, lsl #2]
   13b44:	cmp	r2, #0
   13b48:	beq	13cd8 <__assert_fail@plt+0x3018>
   13b4c:	mov	r1, #0
   13b50:	cmp	sl, r2
   13b54:	beq	13b7c <__assert_fail@plt+0x2ebc>
   13b58:	mov	r2, #1
   13b5c:	sxth	r1, r2
   13b60:	add	r3, r1, r1, lsl #1
   13b64:	ldrb	r3, [r7, r3, lsl #2]
   13b68:	cmp	r3, #0
   13b6c:	beq	13cd8 <__assert_fail@plt+0x3018>
   13b70:	add	r2, r2, #1
   13b74:	cmp	sl, r3
   13b78:	bne	13b5c <__assert_fail@plt+0x2e9c>
   13b7c:	add	r1, r1, r1, lsl #1
   13b80:	add	r3, r7, r1, lsl #2
   13b84:	ldr	r1, [r3, #4]
   13b88:	cmp	r1, #0
   13b8c:	beq	13bfc <__assert_fail@plt+0x2f3c>
   13b90:	mov	r2, r4
   13b94:	cmp	r0, #0
   13b98:	ldrb	r5, [r2, #2]!
   13b9c:	cmpeq	r5, #0
   13ba0:	beq	13bfc <__assert_fail@plt+0x2f3c>
   13ba4:	ldr	r3, [r1]
   13ba8:	cmp	r3, #0
   13bac:	bne	13c9c <__assert_fail@plt+0x2fdc>
   13bb0:	cmp	r5, #0
   13bb4:	movne	r0, r2
   13bb8:	str	r0, [r1]
   13bbc:	ldrb	r0, [r2]
   13bc0:	cmp	r0, #0
   13bc4:	addeq	r9, r9, #1
   13bc8:	add	r9, r9, #1
   13bcc:	sxth	r5, r9
   13bd0:	cmp	r6, r5
   13bd4:	bgt	13aec <__assert_fail@plt+0x2e2c>
   13bd8:	b	13c88 <__assert_fail@plt+0x2fc8>
   13bdc:	sxth	r0, r8
   13be0:	add	r8, r8, #1
   13be4:	str	r4, [ip, r0, lsl #2]
   13be8:	add	r9, r9, #1
   13bec:	sxth	r5, r9
   13bf0:	cmp	r6, r5
   13bf4:	bgt	13aec <__assert_fail@plt+0x2e2c>
   13bf8:	b	13c88 <__assert_fail@plt+0x2fc8>
   13bfc:	ldr	r0, [r3, #8]
   13c00:	cmp	r0, #0
   13c04:	beq	13cd8 <__assert_fail@plt+0x3018>
   13c08:	ldrb	r1, [r4, #2]
   13c0c:	cmp	r1, #0
   13c10:	bne	13cd8 <__assert_fail@plt+0x3018>
   13c14:	ldrb	r1, [r0]
   13c18:	cmp	r1, #0
   13c1c:	bne	13c9c <__assert_fail@plt+0x2fdc>
   13c20:	mov	r1, #1
   13c24:	strb	r1, [r0]
   13c28:	ldr	r0, [sp, #8]
   13c2c:	ldr	r6, [r0]
   13c30:	add	r9, r9, #1
   13c34:	sxth	r5, r9
   13c38:	cmp	r6, r5
   13c3c:	bgt	13aec <__assert_fail@plt+0x2e2c>
   13c40:	b	13c88 <__assert_fail@plt+0x2fc8>
   13c44:	mov	r1, #1
   13c48:	mov	r8, #0
   13c4c:	mov	r0, #1
   13c50:	ldr	r4, [ip, r1, lsl #2]
   13c54:	ldrb	r1, [r4]
   13c58:	cmp	r1, #45	; 0x2d
   13c5c:	bne	13c6c <__assert_fail@plt+0x2fac>
   13c60:	ldrb	r1, [r4, #1]
   13c64:	cmp	r1, #0
   13c68:	bne	13cac <__assert_fail@plt+0x2fec>
   13c6c:	sxth	r1, r8
   13c70:	add	r0, r0, #1
   13c74:	add	r8, r8, #1
   13c78:	str	r4, [ip, r1, lsl #2]
   13c7c:	sxth	r1, r0
   13c80:	cmp	r6, r1
   13c84:	bgt	13c50 <__assert_fail@plt+0x2f90>
   13c88:	ldr	r1, [sp, #8]
   13c8c:	sxth	r0, r8
   13c90:	str	r0, [r1]
   13c94:	sub	sp, fp, #28
   13c98:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13c9c:	movw	r0, #33058	; 0x8122
   13ca0:	mov	r1, r4
   13ca4:	movt	r0, #1
   13ca8:	bl	13d68 <error@@Base+0x40>
   13cac:	mov	r0, r4
   13cb0:	bl	10c30 <strlen@plt>
   13cb4:	mov	r2, r0
   13cb8:	movw	r0, #33022	; 0x80fe
   13cbc:	mov	r1, r4
   13cc0:	movt	r0, #1
   13cc4:	bl	10c9c <strncmp@plt>
   13cc8:	cmp	r0, #0
   13ccc:	bne	13cd8 <__assert_fail@plt+0x3018>
   13cd0:	ldr	r0, [sp]
   13cd4:	bl	13e20 <error@@Base+0xf8>
   13cd8:	movw	r0, #33043	; 0x8113
   13cdc:	mov	r1, r4
   13ce0:	movt	r0, #1
   13ce4:	bl	13d68 <error@@Base+0x40>
   13ce8:	push	{fp, lr}
   13cec:	mov	fp, sp
   13cf0:	mov	r0, #0
   13cf4:	bl	13cf8 <__assert_fail@plt+0x3038>
   13cf8:	push	{fp, lr}
   13cfc:	mov	fp, sp
   13d00:	mov	r4, r0
   13d04:	movw	r0, #5060	; 0x13c4
   13d08:	movt	r0, #3
   13d0c:	ldr	r0, [r0]
   13d10:	cmp	r0, #0
   13d14:	beq	13d1c <__assert_fail@plt+0x305c>
   13d18:	blx	r0
   13d1c:	bl	13e70 <error@@Base+0x148>
   13d20:	mov	r0, r4
   13d24:	bl	10c18 <exit@plt>

00013d28 <error@@Base>:
   13d28:	push	{fp, lr}
   13d2c:	mov	fp, sp
   13d30:	mov	r3, r0
   13d34:	movw	r0, #5056	; 0x13c0
   13d38:	movw	r1, #32972	; 0x80cc
   13d3c:	movt	r0, #3
   13d40:	movt	r1, #1
   13d44:	ldr	r2, [r0]
   13d48:	movw	r0, #37088	; 0x90e0
   13d4c:	movt	r0, #2
   13d50:	ldr	r0, [r0]
   13d54:	bl	10c3c <fprintf@plt>
   13d58:	movw	r0, #37084	; 0x90dc
   13d5c:	movt	r0, #2
   13d60:	ldr	r0, [r0]
   13d64:	bl	13cf8 <__assert_fail@plt+0x3038>
   13d68:	push	{fp, lr}
   13d6c:	mov	fp, sp
   13d70:	sub	sp, sp, #8
   13d74:	mov	r3, r0
   13d78:	movw	r0, #5056	; 0x13c0
   13d7c:	str	r1, [sp]
   13d80:	movw	r1, #32980	; 0x80d4
   13d84:	movt	r0, #3
   13d88:	movt	r1, #1
   13d8c:	ldr	r2, [r0]
   13d90:	movw	r0, #37088	; 0x90e0
   13d94:	movt	r0, #2
   13d98:	ldr	r0, [r0]
   13d9c:	bl	10c3c <fprintf@plt>
   13da0:	movw	r0, #37084	; 0x90dc
   13da4:	movt	r0, #2
   13da8:	ldr	r0, [r0]
   13dac:	bl	13cf8 <__assert_fail@plt+0x3038>
   13db0:	push	{fp, lr}
   13db4:	mov	fp, sp
   13db8:	sub	sp, sp, #8
   13dbc:	mov	r3, r0
   13dc0:	movw	r0, #5056	; 0x13c0
   13dc4:	str	r1, [sp]
   13dc8:	movw	r1, #32980	; 0x80d4
   13dcc:	movt	r0, #3
   13dd0:	movt	r1, #1
   13dd4:	ldr	r2, [r0]
   13dd8:	movw	r0, #37088	; 0x90e0
   13ddc:	movt	r0, #2
   13de0:	ldr	r0, [r0]
   13de4:	bl	10c3c <fprintf@plt>
   13de8:	mov	sp, fp
   13dec:	pop	{fp, pc}
   13df0:	movw	r0, #45302	; 0xb0f6
   13df4:	movt	r0, #2
   13df8:	ldrb	r1, [r0]
   13dfc:	cmp	r1, #1
   13e00:	bxeq	lr
   13e04:	push	{fp, lr}
   13e08:	mov	fp, sp
   13e0c:	mov	r1, #1
   13e10:	strb	r1, [r0]
   13e14:	movw	r0, #33007	; 0x80ef
   13e18:	movt	r0, #1
   13e1c:	bl	13d28 <error@@Base>
   13e20:	push	{fp, lr}
   13e24:	mov	fp, sp
   13e28:	mov	r3, r0
   13e2c:	movw	r0, #5052	; 0x13bc
   13e30:	movt	r0, #3
   13e34:	ldr	r0, [r0]
   13e38:	cmp	r0, #0
   13e3c:	bne	13e68 <error@@Base+0x140>
   13e40:	movw	r0, #5056	; 0x13c0
   13e44:	movw	r1, #33028	; 0x8104
   13e48:	movt	r0, #3
   13e4c:	movt	r1, #1
   13e50:	ldr	r2, [r0]
   13e54:	movw	r0, #37088	; 0x90e0
   13e58:	movt	r0, #2
   13e5c:	ldr	r0, [r0]
   13e60:	bl	10c3c <fprintf@plt>
   13e64:	bl	13ce8 <__assert_fail@plt+0x3028>
   13e68:	blx	r0
   13e6c:	bl	13ce8 <__assert_fail@plt+0x3028>
   13e70:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   13e74:	add	fp, sp, #24
   13e78:	sub	sp, sp, #104	; 0x68
   13e7c:	movw	r8, #45300	; 0xb0f4
   13e80:	movt	r8, #2
   13e84:	ldrsh	r0, [r8]
   13e88:	cmp	r0, #1
   13e8c:	blt	13ef8 <error@@Base+0x1d0>
   13e90:	movw	r9, #5056	; 0x13c0
   13e94:	movw	r5, #32993	; 0x80e1
   13e98:	mov	r7, #1
   13e9c:	add	r4, sp, #4
   13ea0:	movt	r9, #3
   13ea4:	movt	r5, #1
   13ea8:	ldr	r6, [r9]
   13eac:	bl	10c0c <getpid@plt>
   13eb0:	mov	r3, r0
   13eb4:	sxth	r0, r7
   13eb8:	mov	r1, r5
   13ebc:	mov	r2, r6
   13ec0:	str	r0, [sp]
   13ec4:	mov	r0, r4
   13ec8:	bl	10c78 <sprintf@plt>
   13ecc:	mov	r0, r4
   13ed0:	bl	10b7c <strdup@plt>
   13ed4:	mov	r6, r0
   13ed8:	bl	10b94 <unlink@plt>
   13edc:	mov	r0, r6
   13ee0:	bl	10b4c <free@plt>
   13ee4:	add	r0, r7, #1
   13ee8:	sxth	r7, r0
   13eec:	ldrsh	r0, [r8]
   13ef0:	cmp	r7, r0
   13ef4:	ble	13ea8 <error@@Base+0x180>
   13ef8:	sub	sp, fp, #24
   13efc:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   13f00:	push	{r4, r5, r6, sl, fp, lr}
   13f04:	add	fp, sp, #16
   13f08:	mov	r5, r1
   13f0c:	mov	r6, r0
   13f10:	mov	r0, #1
   13f14:	mov	r1, #16
   13f18:	mov	r4, r2
   13f1c:	bl	1381c <__assert_fail@plt+0x2b5c>
   13f20:	strb	r5, [r0, #8]
   13f24:	mov	r1, r0
   13f28:	str	r4, [r0, #12]
   13f2c:	mov	r0, r6
   13f30:	pop	{r4, r5, r6, sl, fp, lr}
   13f34:	b	11d24 <__assert_fail@plt+0x1064>
   13f38:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13f3c:	add	fp, sp, #28
   13f40:	sub	sp, sp, #124	; 0x7c
   13f44:	mov	r5, r2
   13f48:	mov	r2, r1
   13f4c:	cmp	r1, #0
   13f50:	str	r0, [sp, #16]
   13f54:	bne	13f64 <error@@Base+0x23c>
   13f58:	ldrb	r0, [r5]
   13f5c:	cmp	r0, #0
   13f60:	bne	14354 <error@@Base+0x62c>
   13f64:	ldr	r0, [sp, #16]
   13f68:	movw	r1, #18792	; 0x4968
   13f6c:	movt	r1, #1
   13f70:	ldr	r0, [r0, #4]
   13f74:	str	r0, [sp, #4]
   13f78:	mov	r0, r2
   13f7c:	bl	138b8 <__assert_fail@plt+0x2bf8>
   13f80:	mov	r6, r0
   13f84:	ldrb	r0, [r5]
   13f88:	cmp	r0, #0
   13f8c:	beq	13fd4 <error@@Base+0x2ac>
   13f90:	add	r0, sp, #20
   13f94:	mov	r1, #99	; 0x63
   13f98:	mov	r2, r6
   13f9c:	bl	10b64 <fgets@plt>
   13fa0:	cmp	r0, #0
   13fa4:	beq	13fc4 <error@@Base+0x29c>
   13fa8:	movw	r1, #33143	; 0x8177
   13fac:	add	r0, sp, #20
   13fb0:	mov	r2, #51	; 0x33
   13fb4:	movt	r1, #1
   13fb8:	bl	10c9c <strncmp@plt>
   13fbc:	cmp	r0, #0
   13fc0:	beq	142e4 <error@@Base+0x5bc>
   13fc4:	mov	r0, r6
   13fc8:	bl	10b88 <rewind@plt>
   13fcc:	mov	r7, #0
   13fd0:	strb	r7, [r5, #11]
   13fd4:	ldr	r8, [r5, #4]
   13fd8:	ldrb	r4, [r5, #1]
   13fdc:	mov	r0, r6
   13fe0:	str	r5, [sp, #8]
   13fe4:	cmp	r8, #0
   13fe8:	movweq	r8, #94	; 0x5e
   13fec:	bl	10cb4 <getc@plt>
   13ff0:	cmn	r0, #1
   13ff4:	beq	14154 <error@@Base+0x42c>
   13ff8:	add	r1, sp, #20
   13ffc:	cmp	r4, #0
   14000:	add	r1, r1, #1
   14004:	str	r1, [sp, #12]
   14008:	beq	140b8 <error@@Base+0x390>
   1400c:	mov	sl, #0
   14010:	sub	r7, fp, #32
   14014:	movw	r1, #36352	; 0x8e00
   14018:	movt	r1, #2
   1401c:	add	r1, r1, r0
   14020:	ldrsb	r9, [r1]
   14024:	cmp	r9, #1
   14028:	blt	14334 <error@@Base+0x60c>
   1402c:	strb	r0, [sp, #20]
   14030:	beq	14054 <error@@Base+0x32c>
   14034:	ldr	r0, [sp, #12]
   14038:	sub	r4, r9, #1
   1403c:	mov	r1, #1
   14040:	mov	r3, r6
   14044:	mov	r2, r4
   14048:	bl	10bc4 <fread@plt>
   1404c:	cmp	r0, r4
   14050:	bne	14348 <error@@Base+0x620>
   14054:	add	r0, sp, #20
   14058:	mov	r1, #4
   1405c:	mov	r2, r7
   14060:	bl	10bd0 <utf8proc_iterate@plt>
   14064:	cmp	r0, r9
   14068:	bne	14340 <error@@Base+0x618>
   1406c:	ldr	r5, [fp, #-32]	; 0xffffffe0
   14070:	mov	r4, #1
   14074:	cmp	r5, r8
   14078:	beq	140a0 <error@@Base+0x378>
   1407c:	mov	r0, #1
   14080:	mov	r1, #16
   14084:	bl	1381c <__assert_fail@plt+0x2b5c>
   14088:	strb	sl, [r0, #8]
   1408c:	mov	r1, r0
   14090:	str	r5, [r0, #12]
   14094:	ldr	r0, [sp, #16]
   14098:	bl	11d24 <__assert_fail@plt+0x1064>
   1409c:	mov	r4, #0
   140a0:	mov	r0, r6
   140a4:	bl	10cb4 <getc@plt>
   140a8:	cmn	r0, #1
   140ac:	mov	sl, r4
   140b0:	bne	14014 <error@@Base+0x2ec>
   140b4:	b	14154 <error@@Base+0x42c>
   140b8:	movw	r8, #36352	; 0x8e00
   140bc:	add	r9, sp, #20
   140c0:	sub	sl, fp, #32
   140c4:	mov	r5, #0
   140c8:	movt	r8, #2
   140cc:	add	r1, r8, r0
   140d0:	ldrsb	r7, [r1]
   140d4:	cmp	r7, #0
   140d8:	ble	14334 <error@@Base+0x60c>
   140dc:	cmp	r7, #1
   140e0:	strb	r0, [sp, #20]
   140e4:	beq	14108 <error@@Base+0x3e0>
   140e8:	ldr	r0, [sp, #12]
   140ec:	sub	r4, r7, #1
   140f0:	mov	r1, #1
   140f4:	mov	r3, r6
   140f8:	mov	r2, r4
   140fc:	bl	10bc4 <fread@plt>
   14100:	cmp	r0, r4
   14104:	bne	14348 <error@@Base+0x620>
   14108:	mov	r0, r9
   1410c:	mov	r1, #4
   14110:	mov	r2, sl
   14114:	bl	10bd0 <utf8proc_iterate@plt>
   14118:	cmp	r0, r7
   1411c:	bne	14340 <error@@Base+0x618>
   14120:	ldr	r4, [fp, #-32]	; 0xffffffe0
   14124:	mov	r0, #1
   14128:	mov	r1, #16
   1412c:	bl	1381c <__assert_fail@plt+0x2b5c>
   14130:	strb	r5, [r0, #8]
   14134:	mov	r1, r0
   14138:	str	r4, [r0, #12]
   1413c:	ldr	r0, [sp, #16]
   14140:	bl	11d24 <__assert_fail@plt+0x1064>
   14144:	mov	r0, r6
   14148:	bl	10cb4 <getc@plt>
   1414c:	cmn	r0, #1
   14150:	bne	140cc <error@@Base+0x3a4>
   14154:	mov	r0, r6
   14158:	bl	13930 <__assert_fail@plt+0x2c70>
   1415c:	ldr	r8, [sp, #8]
   14160:	ldr	r9, [sp, #4]
   14164:	ldrb	r0, [r8, #9]
   14168:	cmp	r0, #0
   1416c:	beq	142a0 <error@@Base+0x578>
   14170:	ldr	r0, [sp, #16]
   14174:	cmp	r9, #0
   14178:	addne	r0, r9, #4
   1417c:	ldr	r6, [r0]
   14180:	cmp	r6, #0
   14184:	beq	142a0 <error@@Base+0x578>
   14188:	mov	r4, #32
   1418c:	mov	r7, r6
   14190:	ldr	r5, [r7, #12]
   14194:	mov	r0, r5
   14198:	bl	10b58 <utf8proc_get_property@plt>
   1419c:	cmp	r5, #10
   141a0:	ble	141bc <error@@Base+0x494>
   141a4:	sub	r1, r5, #11
   141a8:	cmp	r1, #3
   141ac:	bcc	141dc <error@@Base+0x4b4>
   141b0:	cmp	r5, #160	; 0xa0
   141b4:	beq	141dc <error@@Base+0x4b4>
   141b8:	b	141f0 <error@@Base+0x4c8>
   141bc:	cmp	r5, #9
   141c0:	beq	141dc <error@@Base+0x4b4>
   141c4:	cmp	r5, #10
   141c8:	bne	141f0 <error@@Base+0x4c8>
   141cc:	ldr	r7, [r7, #4]
   141d0:	cmp	r7, #0
   141d4:	bne	14190 <error@@Base+0x468>
   141d8:	b	1420c <error@@Base+0x4e4>
   141dc:	str	r4, [r7, #12]
   141e0:	ldr	r7, [r7, #4]
   141e4:	cmp	r7, #0
   141e8:	bne	14190 <error@@Base+0x468>
   141ec:	b	1420c <error@@Base+0x4e4>
   141f0:	ldrsh	r0, [r0]
   141f4:	sub	r0, r0, #23
   141f8:	cmp	r0, #2
   141fc:	strls	r4, [r7, #12]
   14200:	ldr	r7, [r7, #4]
   14204:	cmp	r7, #0
   14208:	bne	14190 <error@@Base+0x468>
   1420c:	mov	r4, #0
   14210:	ldr	r1, [r6, #12]
   14214:	ldr	r5, [r6, #4]
   14218:	cmp	r1, #32
   1421c:	bne	14258 <error@@Base+0x530>
   14220:	tst	r4, #255	; 0xff
   14224:	beq	14280 <error@@Base+0x558>
   14228:	cmp	r5, #0
   1422c:	ldrne	r1, [r5, #12]
   14230:	cmpne	r1, #10
   14234:	beq	14280 <error@@Base+0x558>
   14238:	mov	r0, #1
   1423c:	cmp	r1, #32
   14240:	bne	1426c <error@@Base+0x544>
   14244:	ldrb	r0, [r6, #8]
   14248:	ldrb	r1, [r5, #8]
   1424c:	orr	r0, r1, r0
   14250:	strb	r0, [r5, #8]
   14254:	b	14280 <error@@Base+0x558>
   14258:	subs	r0, r1, #10
   1425c:	movwne	r0, #1
   14260:	tst	r4, #255	; 0xff
   14264:	cmpeq	r1, #10
   14268:	beq	14280 <error@@Base+0x558>
   1426c:	mov	r4, r0
   14270:	cmp	r5, #0
   14274:	mov	r6, r5
   14278:	bne	14210 <error@@Base+0x4e8>
   1427c:	b	142a0 <error@@Base+0x578>
   14280:	ldr	r0, [sp, #16]
   14284:	mov	r1, r6
   14288:	bl	11e1c <__assert_fail@plt+0x115c>
   1428c:	mov	r0, r6
   14290:	bl	10b4c <free@plt>
   14294:	cmp	r5, #0
   14298:	mov	r6, r5
   1429c:	bne	14210 <error@@Base+0x4e8>
   142a0:	ldrb	r0, [r8, #10]
   142a4:	cmp	r0, #0
   142a8:	beq	142dc <error@@Base+0x5b4>
   142ac:	ldr	r0, [sp, #16]
   142b0:	cmp	r9, #0
   142b4:	addne	r0, r9, #4
   142b8:	ldr	r4, [r0]
   142bc:	cmp	r4, #0
   142c0:	beq	142dc <error@@Base+0x5b4>
   142c4:	ldr	r0, [r4, #12]
   142c8:	bl	10ba0 <utf8proc_tolower@plt>
   142cc:	str	r0, [r4, #12]
   142d0:	ldr	r4, [r4, #4]
   142d4:	cmp	r4, #0
   142d8:	bne	142c4 <error@@Base+0x59c>
   142dc:	sub	sp, fp, #28
   142e0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   142e4:	movw	r8, #33199	; 0x81af
   142e8:	mov	r4, #0
   142ec:	add	r9, sp, #20
   142f0:	mov	r7, #1
   142f4:	movt	r8, #1
   142f8:	mov	r0, r9
   142fc:	mov	r1, #99	; 0x63
   14300:	mov	r2, r6
   14304:	bl	10b64 <fgets@plt>
   14308:	cmp	r0, #0
   1430c:	beq	13fd0 <error@@Base+0x2a8>
   14310:	mov	r0, r9
   14314:	mov	r1, r8
   14318:	bl	10b28 <strcmp@plt>
   1431c:	cmp	r0, #0
   14320:	addeq	r4, r4, #1
   14324:	sxth	r4, r4
   14328:	cmp	r4, #2
   1432c:	blt	142f8 <error@@Base+0x5d0>
   14330:	b	13fd0 <error@@Base+0x2a8>
   14334:	movw	r0, #33255	; 0x81e7
   14338:	movt	r0, #1
   1433c:	bl	13d28 <error@@Base>
   14340:	bl	10c84 <utf8proc_errmsg@plt>
   14344:	bl	13d28 <error@@Base>
   14348:	movw	r0, #33279	; 0x81ff
   1434c:	movt	r0, #1
   14350:	bl	13d28 <error@@Base>
   14354:	movw	r0, #33075	; 0x8133
   14358:	movw	r1, #33091	; 0x8143
   1435c:	movt	r0, #1
   14360:	movt	r1, #1
   14364:	bl	13d68 <error@@Base+0x40>
   14368:	push	{fp, lr}
   1436c:	mov	fp, sp
   14370:	bl	10b70 <utf8proc_encode_char@plt>
   14374:	cmp	r0, #0
   14378:	sxtbgt	r0, r0
   1437c:	popgt	{fp, pc}
   14380:	movw	r0, #33101	; 0x814d
   14384:	movt	r0, #1
   14388:	bl	13d28 <error@@Base>
   1438c:	push	{r4, r5, r6, r7, fp, lr}
   14390:	add	fp, sp, #16
   14394:	mov	r6, r3
   14398:	mov	r4, r2
   1439c:	mov	r5, r1
   143a0:	tst	r0, #255	; 0xff
   143a4:	beq	143ec <error@@Base+0x6c4>
   143a8:	mov	r0, #94	; 0x5e
   143ac:	mov	r1, r4
   143b0:	bl	10b70 <utf8proc_encode_char@plt>
   143b4:	cmp	r0, #0
   143b8:	ble	14474 <error@@Base+0x74c>
   143bc:	sxtb	r7, r0
   143c0:	cmp	r5, #10
   143c4:	bne	143f8 <error@@Base+0x6d0>
   143c8:	movw	r0, #32991	; 0x80df
   143cc:	movw	r1, #33124	; 0x8164
   143d0:	tst	r6, #255	; 0xff
   143d4:	movt	r0, #1
   143d8:	movt	r1, #1
   143dc:	moveq	r1, r0
   143e0:	add	r0, r4, r7
   143e4:	pop	{r4, r5, r6, r7, fp, lr}
   143e8:	b	10c78 <sprintf@plt>
   143ec:	mov	r7, #0
   143f0:	cmp	r5, #10
   143f4:	beq	143c8 <error@@Base+0x6a0>
   143f8:	mov	r0, r5
   143fc:	bl	10b58 <utf8proc_get_property@plt>
   14400:	cmp	r5, #32
   14404:	beq	14418 <error@@Base+0x6f0>
   14408:	ldrsh	r0, [r0]
   1440c:	sub	r1, r0, #1
   14410:	cmp	r1, #22
   14414:	bcs	14480 <error@@Base+0x758>
   14418:	mov	r0, r5
   1441c:	add	r6, r4, r7
   14420:	bl	10c24 <utf8proc_category@plt>
   14424:	sub	r0, r0, #6
   14428:	cmp	r0, #3
   1442c:	bcc	1443c <error@@Base+0x714>
   14430:	mov	r0, r5
   14434:	mov	r1, r6
   14438:	b	1445c <error@@Base+0x734>
   1443c:	movw	r0, #9676	; 0x25cc
   14440:	mov	r1, r6
   14444:	bl	10b70 <utf8proc_encode_char@plt>
   14448:	cmp	r0, #0
   1444c:	ble	14474 <error@@Base+0x74c>
   14450:	sxtab	r7, r7, r0
   14454:	mov	r0, r5
   14458:	add	r1, r4, r7
   1445c:	bl	10b70 <utf8proc_encode_char@plt>
   14460:	cmp	r0, #0
   14464:	sxtabgt	r0, r7, r0
   14468:	movgt	r1, #0
   1446c:	strbgt	r1, [r4, r0]
   14470:	popgt	{r4, r5, r6, r7, fp, pc}
   14474:	movw	r0, #33101	; 0x814d
   14478:	movt	r0, #1
   1447c:	bl	13d28 <error@@Base>
   14480:	cmp	r0, #29
   14484:	beq	14418 <error@@Base+0x6f0>
   14488:	add	r0, r4, r7
   1448c:	cmp	r5, #255	; 0xff
   14490:	bhi	144a8 <error@@Base+0x780>
   14494:	movw	r1, #33129	; 0x8169
   14498:	movt	r1, #1
   1449c:	mov	r2, r5
   144a0:	pop	{r4, r5, r6, r7, fp, lr}
   144a4:	b	10c78 <sprintf@plt>
   144a8:	movw	r1, #33136	; 0x8170
   144ac:	movt	r1, #1
   144b0:	mov	r2, r5
   144b4:	pop	{r4, r5, r6, r7, fp, lr}
   144b8:	b	10c78 <sprintf@plt>
   144bc:	push	{r4, r5, r6, r7, fp, lr}
   144c0:	add	fp, sp, #16
   144c4:	sub	sp, sp, #16
   144c8:	mov	r6, r2
   144cc:	mov	r2, r1
   144d0:	movw	r1, #18767	; 0x494f
   144d4:	mov	r5, r0
   144d8:	movt	r1, #1
   144dc:	mov	r0, r2
   144e0:	bl	138b8 <__assert_fail@plt+0x2bf8>
   144e4:	mov	r4, r0
   144e8:	cmp	r6, #0
   144ec:	beq	14540 <error@@Base+0x818>
   144f0:	movw	r0, #33143	; 0x8177
   144f4:	mov	r1, #55	; 0x37
   144f8:	mov	r2, #1
   144fc:	mov	r3, r4
   14500:	movt	r0, #1
   14504:	bl	10bb8 <fwrite@plt>
   14508:	movw	r7, #33199	; 0x81af
   1450c:	mov	r1, #55	; 0x37
   14510:	mov	r2, #1
   14514:	mov	r3, r4
   14518:	movt	r7, #1
   1451c:	mov	r0, r7
   14520:	bl	10bb8 <fwrite@plt>
   14524:	mov	r0, r4
   14528:	blx	r6
   1452c:	mov	r0, r7
   14530:	mov	r1, #55	; 0x37
   14534:	mov	r2, #1
   14538:	mov	r3, r4
   1453c:	bl	10bb8 <fwrite@plt>
   14540:	ldr	r6, [r5]
   14544:	cmp	r6, #0
   14548:	beq	1457c <error@@Base+0x854>
   1454c:	add	r5, sp, #7
   14550:	ldr	r1, [r6, #12]
   14554:	ldrb	r0, [r6, #8]
   14558:	mov	r2, r5
   1455c:	mov	r3, #0
   14560:	bl	1438c <error@@Base+0x664>
   14564:	mov	r0, r5
   14568:	mov	r1, r4
   1456c:	bl	10c90 <fputs@plt>
   14570:	ldr	r6, [r6, #4]
   14574:	cmp	r6, #0
   14578:	bne	14550 <error@@Base+0x828>
   1457c:	mov	r0, r4
   14580:	bl	13930 <__assert_fail@plt+0x2c70>
   14584:	sub	sp, fp, #16
   14588:	pop	{r4, r5, r6, r7, fp, pc}
   1458c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14590:	add	fp, sp, #28
   14594:	sub	sp, sp, #4
   14598:	mov	r9, #0
   1459c:	mov	sl, r0
   145a0:	str	r9, [sp]
   145a4:	ldrb	r0, [r1]
   145a8:	cmp	r0, #0
   145ac:	beq	14614 <error@@Base+0x8ec>
   145b0:	mov	r4, r1
   145b4:	mov	r8, sp
   145b8:	mov	r7, #1
   145bc:	mov	r0, r4
   145c0:	mvn	r1, #0
   145c4:	mov	r2, r8
   145c8:	bl	10bd0 <utf8proc_iterate@plt>
   145cc:	cmp	r0, #1
   145d0:	blt	14624 <error@@Base+0x8fc>
   145d4:	ldr	r5, [sp]
   145d8:	mov	r6, r0
   145dc:	mov	r0, #1
   145e0:	mov	r1, #16
   145e4:	bl	1381c <__assert_fail@plt+0x2b5c>
   145e8:	strb	r9, [r0, #8]
   145ec:	mov	r1, r0
   145f0:	str	r5, [r0, #12]
   145f4:	mov	r0, sl
   145f8:	bl	11d24 <__assert_fail@plt+0x1064>
   145fc:	ldrb	r0, [r4, r6]!
   14600:	cmp	r0, #0
   14604:	bne	145bc <error@@Base+0x894>
   14608:	mov	r0, r7
   1460c:	sub	sp, fp, #28
   14610:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14614:	mov	r7, #1
   14618:	mov	r0, r7
   1461c:	sub	sp, fp, #28
   14620:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14624:	mov	r7, #0
   14628:	mov	r0, r7
   1462c:	sub	sp, fp, #28
   14630:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14634:	cmp	r0, #2
   14638:	bxlt	lr
   1463c:	movw	r3, #45304	; 0xb0f8
   14640:	movt	r3, #2
   14644:	stm	r3, {r1, r2}
   14648:	sub	r1, r0, #1
   1464c:	mov	r0, #0
   14650:	b	14654 <error@@Base+0x92c>
   14654:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   14658:	add	fp, sp, #24
   1465c:	movw	r7, #45304	; 0xb0f8
   14660:	mov	r8, r1
   14664:	mov	r9, r0
   14668:	movt	r7, #2
   1466c:	b	14690 <error@@Base+0x968>
   14670:	sub	r1, r4, #1
   14674:	str	r6, [r0, r4, lsl #2]
   14678:	cmp	r1, r9
   1467c:	movgt	r0, r9
   14680:	blgt	14654 <error@@Base+0x92c>
   14684:	add	r9, r5, #1
   14688:	cmp	r9, r8
   1468c:	popge	{r4, r5, r6, r7, r8, r9, fp, pc}
   14690:	ldr	r0, [r7]
   14694:	cmp	r9, r8
   14698:	mov	r4, r8
   1469c:	mov	r5, r9
   146a0:	ldr	r6, [r0, r9, lsl #2]
   146a4:	bge	14670 <error@@Base+0x948>
   146a8:	mov	r5, r9
   146ac:	mov	r4, r8
   146b0:	cmp	r5, r4
   146b4:	blt	146c8 <error@@Base+0x9a0>
   146b8:	b	146e0 <error@@Base+0x9b8>
   146bc:	sub	r4, r4, #1
   146c0:	cmp	r5, r4
   146c4:	bge	146e0 <error@@Base+0x9b8>
   146c8:	ldm	r7, {r0, r2}
   146cc:	ldr	r1, [r0, r4, lsl #2]
   146d0:	mov	r0, r6
   146d4:	blx	r2
   146d8:	cmn	r0, #1
   146dc:	ble	146bc <error@@Base+0x994>
   146e0:	cmp	r5, r4
   146e4:	beq	146f8 <error@@Base+0x9d0>
   146e8:	ldr	r0, [r7]
   146ec:	ldr	r1, [r0, r4, lsl #2]
   146f0:	str	r1, [r0, r5, lsl #2]
   146f4:	add	r5, r5, #1
   146f8:	cmp	r5, r4
   146fc:	bge	14718 <error@@Base+0x9f0>
   14700:	ldm	r7, {r0, r2}
   14704:	ldr	r1, [r0, r5, lsl #2]
   14708:	mov	r0, r6
   1470c:	blx	r2
   14710:	cmp	r0, #1
   14714:	bge	146f4 <error@@Base+0x9cc>
   14718:	cmp	r5, r4
   1471c:	ldrne	r0, [r7]
   14720:	ldrne	r1, [r0, r5, lsl #2]
   14724:	strne	r1, [r0, r4, lsl #2]
   14728:	subne	r4, r4, #1
   1472c:	cmp	r5, r4
   14730:	blt	146c0 <error@@Base+0x998>
   14734:	ldr	r0, [r7]
   14738:	b	14670 <error@@Base+0x948>
   1473c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   14740:	mov	r7, r0
   14744:	ldr	r6, [pc, #72]	; 14794 <error@@Base+0xa6c>
   14748:	ldr	r5, [pc, #72]	; 14798 <error@@Base+0xa70>
   1474c:	add	r6, pc, r6
   14750:	add	r5, pc, r5
   14754:	sub	r6, r6, r5
   14758:	mov	r8, r1
   1475c:	mov	r9, r2
   14760:	bl	10afc <calloc@plt-0x20>
   14764:	asrs	r6, r6, #2
   14768:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   1476c:	mov	r4, #0
   14770:	add	r4, r4, #1
   14774:	ldr	r3, [r5], #4
   14778:	mov	r2, r9
   1477c:	mov	r1, r8
   14780:	mov	r0, r7
   14784:	blx	r3
   14788:	cmp	r6, r4
   1478c:	bne	14770 <error@@Base+0xa48>
   14790:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   14794:	andeq	r4, r1, r8, lsr #13
   14798:	andeq	r4, r1, r0, lsr #13
   1479c:	bx	lr

Disassembly of section .fini:

000147a0 <.fini>:
   147a0:	push	{r3, lr}
   147a4:	pop	{r3, pc}
