
../repos/dvidelabs-flatcc-3b39ef7/test/flatc_compat/flatc_compat:     file format elf32-littlearm


Disassembly of section .init:

00010c98 <.init>:
   10c98:	push	{r3, lr}
   10c9c:	bl	10dfc <_start@@Base+0x3c>
   10ca0:	pop	{r3, pc}

Disassembly of section .plt:

00010ca4 <strcmp@plt-0x14>:
   10ca4:	push	{lr}		; (str lr, [sp, #-4]!)
   10ca8:	ldr	lr, [pc, #4]	; 10cb4 <strcmp@plt-0x4>
   10cac:	add	lr, pc, lr
   10cb0:	ldr	pc, [lr, #8]!
   10cb4:	andeq	r4, r1, ip, asr #6

00010cb8 <strcmp@plt>:
   10cb8:	add	ip, pc, #0, 12
   10cbc:	add	ip, ip, #20, 20	; 0x14000
   10cc0:	ldr	pc, [ip, #844]!	; 0x34c

00010cc4 <printf@plt>:
   10cc4:	add	ip, pc, #0, 12
   10cc8:	add	ip, ip, #20, 20	; 0x14000
   10ccc:	ldr	pc, [ip, #836]!	; 0x344

00010cd0 <fopen@plt>:
   10cd0:	add	ip, pc, #0, 12
   10cd4:	add	ip, ip, #20, 20	; 0x14000
   10cd8:	ldr	pc, [ip, #828]!	; 0x33c

00010cdc <free@plt>:
   10cdc:	add	ip, pc, #0, 12
   10ce0:	add	ip, ip, #20, 20	; 0x14000
   10ce4:	ldr	pc, [ip, #820]!	; 0x334

00010ce8 <memcpy@plt>:
   10ce8:	add	ip, pc, #0, 12
   10cec:	add	ip, ip, #20, 20	; 0x14000
   10cf0:	ldr	pc, [ip, #812]!	; 0x32c

00010cf4 <ftell@plt>:
   10cf4:	add	ip, pc, #0, 12
   10cf8:	add	ip, ip, #20, 20	; 0x14000
   10cfc:	ldr	pc, [ip, #804]!	; 0x324

00010d00 <rewind@plt>:
   10d00:	add	ip, pc, #0, 12
   10d04:	add	ip, ip, #20, 20	; 0x14000
   10d08:	ldr	pc, [ip, #796]!	; 0x31c

00010d0c <fwrite@plt>:
   10d0c:	add	ip, pc, #0, 12
   10d10:	add	ip, ip, #20, 20	; 0x14000
   10d14:	ldr	pc, [ip, #788]!	; 0x314

00010d18 <fread@plt>:
   10d18:	add	ip, pc, #0, 12
   10d1c:	add	ip, ip, #20, 20	; 0x14000
   10d20:	ldr	pc, [ip, #780]!	; 0x30c

00010d24 <puts@plt>:
   10d24:	add	ip, pc, #0, 12
   10d28:	add	ip, ip, #20, 20	; 0x14000
   10d2c:	ldr	pc, [ip, #772]!	; 0x304

00010d30 <malloc@plt>:
   10d30:	add	ip, pc, #0, 12
   10d34:	add	ip, ip, #20, 20	; 0x14000
   10d38:	ldr	pc, [ip, #764]!	; 0x2fc

00010d3c <__libc_start_main@plt>:
   10d3c:	add	ip, pc, #0, 12
   10d40:	add	ip, ip, #20, 20	; 0x14000
   10d44:	ldr	pc, [ip, #756]!	; 0x2f4

00010d48 <__gmon_start__@plt>:
   10d48:	add	ip, pc, #0, 12
   10d4c:	add	ip, ip, #20, 20	; 0x14000
   10d50:	ldr	pc, [ip, #748]!	; 0x2ec

00010d54 <exit@plt>:
   10d54:	add	ip, pc, #0, 12
   10d58:	add	ip, ip, #20, 20	; 0x14000
   10d5c:	ldr	pc, [ip, #740]!	; 0x2e4

00010d60 <fprintf@plt>:
   10d60:	add	ip, pc, #0, 12
   10d64:	add	ip, ip, #20, 20	; 0x14000
   10d68:	ldr	pc, [ip, #732]!	; 0x2dc

00010d6c <posix_memalign@plt>:
   10d6c:	add	ip, pc, #0, 12
   10d70:	add	ip, ip, #20, 20	; 0x14000
   10d74:	ldr	pc, [ip, #724]!	; 0x2d4

00010d78 <strncpy@plt>:
   10d78:	add	ip, pc, #0, 12
   10d7c:	add	ip, ip, #20, 20	; 0x14000
   10d80:	ldr	pc, [ip, #716]!	; 0x2cc

00010d84 <fclose@plt>:
   10d84:	add	ip, pc, #0, 12
   10d88:	add	ip, ip, #20, 20	; 0x14000
   10d8c:	ldr	pc, [ip, #708]!	; 0x2c4

00010d90 <fputc@plt>:
   10d90:	add	ip, pc, #0, 12
   10d94:	add	ip, ip, #20, 20	; 0x14000
   10d98:	ldr	pc, [ip, #700]!	; 0x2bc

00010d9c <fseek@plt>:
   10d9c:	add	ip, pc, #0, 12
   10da0:	add	ip, ip, #20, 20	; 0x14000
   10da4:	ldr	pc, [ip, #692]!	; 0x2b4

00010da8 <abort@plt>:
   10da8:	add	ip, pc, #0, 12
   10dac:	add	ip, ip, #20, 20	; 0x14000
   10db0:	ldr	pc, [ip, #684]!	; 0x2ac

00010db4 <__assert_fail@plt>:
   10db4:	add	ip, pc, #0, 12
   10db8:	add	ip, ip, #20, 20	; 0x14000
   10dbc:	ldr	pc, [ip, #676]!	; 0x2a4

Disassembly of section .text:

00010dc0 <_start@@Base>:
   10dc0:	mov	fp, #0
   10dc4:	mov	lr, #0
   10dc8:	pop	{r1}		; (ldr r1, [sp], #4)
   10dcc:	mov	r2, sp
   10dd0:	push	{r2}		; (str r2, [sp, #-4]!)
   10dd4:	push	{r0}		; (str r0, [sp, #-4]!)
   10dd8:	ldr	ip, [pc, #16]	; 10df0 <_start@@Base+0x30>
   10ddc:	push	{ip}		; (str ip, [sp, #-4]!)
   10de0:	ldr	r0, [pc, #12]	; 10df4 <_start@@Base+0x34>
   10de4:	ldr	r3, [pc, #12]	; 10df8 <_start@@Base+0x38>
   10de8:	bl	10d3c <__libc_start_main@plt>
   10dec:	bl	10da8 <abort@plt>
   10df0:	andeq	r3, r1, r4, lsl #23
   10df4:	muleq	r1, r8, r0
   10df8:	andeq	r3, r1, r4, lsr #22
   10dfc:	ldr	r3, [pc, #20]	; 10e18 <_start@@Base+0x58>
   10e00:	ldr	r2, [pc, #20]	; 10e1c <_start@@Base+0x5c>
   10e04:	add	r3, pc, r3
   10e08:	ldr	r2, [r3, r2]
   10e0c:	cmp	r2, #0
   10e10:	bxeq	lr
   10e14:	b	10d48 <__gmon_start__@plt>
   10e18:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   10e1c:	andeq	r0, r0, r4, rrx
   10e20:	ldr	r0, [pc, #24]	; 10e40 <_start@@Base+0x80>
   10e24:	ldr	r3, [pc, #24]	; 10e44 <_start@@Base+0x84>
   10e28:	cmp	r3, r0
   10e2c:	bxeq	lr
   10e30:	ldr	r3, [pc, #16]	; 10e48 <_start@@Base+0x88>
   10e34:	cmp	r3, #0
   10e38:	bxeq	lr
   10e3c:	bx	r3
   10e40:	andeq	r5, r2, r4, ror r0
   10e44:	andeq	r5, r2, r4, ror r0
   10e48:	andeq	r0, r0, r0
   10e4c:	ldr	r0, [pc, #36]	; 10e78 <_start@@Base+0xb8>
   10e50:	ldr	r1, [pc, #36]	; 10e7c <_start@@Base+0xbc>
   10e54:	sub	r1, r1, r0
   10e58:	asr	r1, r1, #2
   10e5c:	add	r1, r1, r1, lsr #31
   10e60:	asrs	r1, r1, #1
   10e64:	bxeq	lr
   10e68:	ldr	r3, [pc, #16]	; 10e80 <_start@@Base+0xc0>
   10e6c:	cmp	r3, #0
   10e70:	bxeq	lr
   10e74:	bx	r3
   10e78:	andeq	r5, r2, r4, ror r0
   10e7c:	andeq	r5, r2, r4, ror r0
   10e80:	andeq	r0, r0, r0
   10e84:	push	{r4, lr}
   10e88:	ldr	r4, [pc, #24]	; 10ea8 <_start@@Base+0xe8>
   10e8c:	ldrb	r3, [r4]
   10e90:	cmp	r3, #0
   10e94:	popne	{r4, pc}
   10e98:	bl	10e20 <_start@@Base+0x60>
   10e9c:	mov	r3, #1
   10ea0:	strb	r3, [r4]
   10ea4:	pop	{r4, pc}
   10ea8:	andeq	r5, r2, ip, ror r0
   10eac:	b	10e4c <_start@@Base+0x8c>
   10eb0:	mov	r0, #0
   10eb4:	bx	lr
   10eb8:	mov	r0, #0
   10ebc:	bx	lr
   10ec0:	str	r4, [sp, #-8]!
   10ec4:	str	lr, [sp, #4]
   10ec8:	mov	r3, #4
   10ecc:	mov	r2, r3
   10ed0:	mov	r1, #0
   10ed4:	bl	1270c <flatcc_verify_field@@Base>
   10ed8:	ldr	r4, [sp]
   10edc:	add	sp, sp, #4
   10ee0:	pop	{pc}		; (ldr pc, [sp], #4)
   10ee4:	str	r4, [sp, #-8]!
   10ee8:	str	lr, [sp, #4]
   10eec:	mov	r4, r0
   10ef0:	mov	r3, #8
   10ef4:	mov	r2, r3
   10ef8:	mov	r1, #0
   10efc:	bl	1270c <flatcc_verify_field@@Base>
   10f00:	cmp	r0, #0
   10f04:	beq	10f14 <_start@@Base+0x154>
   10f08:	ldr	r4, [sp]
   10f0c:	add	sp, sp, #4
   10f10:	pop	{pc}		; (ldr pc, [sp], #4)
   10f14:	mov	r3, #4
   10f18:	mov	r2, r3
   10f1c:	mov	r1, #1
   10f20:	mov	r0, r4
   10f24:	bl	1270c <flatcc_verify_field@@Base>
   10f28:	b	10f08 <_start@@Base+0x148>
   10f2c:	str	r4, [sp, #-8]!
   10f30:	str	lr, [sp, #4]
   10f34:	mov	r4, r0
   10f38:	mov	r3, #8
   10f3c:	mov	r2, r3
   10f40:	mov	r1, #0
   10f44:	bl	1270c <flatcc_verify_field@@Base>
   10f48:	cmp	r0, #0
   10f4c:	beq	10f5c <_start@@Base+0x19c>
   10f50:	ldr	r4, [sp]
   10f54:	add	sp, sp, #4
   10f58:	pop	{pc}		; (ldr pc, [sp], #4)
   10f5c:	mov	r3, #4
   10f60:	mov	r2, r3
   10f64:	mov	r1, #1
   10f68:	mov	r0, r4
   10f6c:	bl	1270c <flatcc_verify_field@@Base>
   10f70:	b	10f50 <_start@@Base+0x190>
   10f74:	str	r4, [sp, #-8]!
   10f78:	str	lr, [sp, #4]
   10f7c:	mov	r4, r0
   10f80:	mov	r3, #1
   10f84:	mov	r2, r3
   10f88:	mov	r1, #0
   10f8c:	bl	1270c <flatcc_verify_field@@Base>
   10f90:	cmp	r0, #0
   10f94:	beq	10fa4 <_start@@Base+0x1e4>
   10f98:	ldr	r4, [sp]
   10f9c:	add	sp, sp, #4
   10fa0:	pop	{pc}		; (ldr pc, [sp], #4)
   10fa4:	mov	r3, #1
   10fa8:	mov	r2, r3
   10fac:	mov	r1, r3
   10fb0:	mov	r0, r4
   10fb4:	bl	1270c <flatcc_verify_field@@Base>
   10fb8:	cmp	r0, #0
   10fbc:	bne	10f98 <_start@@Base+0x1d8>
   10fc0:	mov	r3, #1
   10fc4:	mov	r2, r3
   10fc8:	mov	r1, #2
   10fcc:	mov	r0, r4
   10fd0:	bl	1270c <flatcc_verify_field@@Base>
   10fd4:	cmp	r0, #0
   10fd8:	bne	10f98 <_start@@Base+0x1d8>
   10fdc:	mov	r3, #1
   10fe0:	mov	r2, r3
   10fe4:	mov	r1, #3
   10fe8:	mov	r0, r4
   10fec:	bl	1270c <flatcc_verify_field@@Base>
   10ff0:	b	10f98 <_start@@Base+0x1d8>
   10ff4:	str	r4, [sp, #-8]!
   10ff8:	str	lr, [sp, #4]
   10ffc:	mov	r4, r0
   11000:	mov	r2, #0
   11004:	mov	r1, r2
   11008:	bl	12784 <flatcc_verify_string_field@@Base>
   1100c:	cmp	r0, #0
   11010:	beq	11020 <_start@@Base+0x260>
   11014:	ldr	r4, [sp]
   11018:	add	sp, sp, #4
   1101c:	pop	{pc}		; (ldr pc, [sp], #4)
   11020:	mov	r3, #8
   11024:	mov	r2, r3
   11028:	mov	r1, #1
   1102c:	mov	r0, r4
   11030:	bl	1270c <flatcc_verify_field@@Base>
   11034:	cmp	r0, #0
   11038:	bne	11014 <_start@@Base+0x254>
   1103c:	mov	r3, #2
   11040:	mov	r2, r3
   11044:	mov	r1, r3
   11048:	mov	r0, r4
   1104c:	bl	1270c <flatcc_verify_field@@Base>
   11050:	b	11014 <_start@@Base+0x254>
   11054:	str	r4, [sp, #-8]!
   11058:	str	lr, [sp, #4]
   1105c:	mov	r4, r0
   11060:	mov	r2, #0
   11064:	mov	r1, r2
   11068:	bl	12784 <flatcc_verify_string_field@@Base>
   1106c:	cmp	r0, #0
   11070:	beq	11080 <_start@@Base+0x2c0>
   11074:	ldr	r4, [sp]
   11078:	add	sp, sp, #4
   1107c:	pop	{pc}		; (ldr pc, [sp], #4)
   11080:	mov	r3, #4
   11084:	mov	r2, r3
   11088:	mov	r1, #1
   1108c:	mov	r0, r4
   11090:	bl	1270c <flatcc_verify_field@@Base>
   11094:	cmp	r0, #0
   11098:	bne	11074 <_start@@Base+0x2b4>
   1109c:	mov	r2, #0
   110a0:	mov	r1, #2
   110a4:	mov	r0, r4
   110a8:	bl	12784 <flatcc_verify_string_field@@Base>
   110ac:	cmp	r0, #0
   110b0:	bne	11074 <_start@@Base+0x2b4>
   110b4:	mov	r3, #8
   110b8:	mov	r2, r3
   110bc:	mov	r1, #3
   110c0:	mov	r0, r4
   110c4:	bl	1270c <flatcc_verify_field@@Base>
   110c8:	cmp	r0, #0
   110cc:	bne	11074 <_start@@Base+0x2b4>
   110d0:	mov	r2, #0
   110d4:	mov	r1, #4
   110d8:	mov	r0, r4
   110dc:	bl	12784 <flatcc_verify_string_field@@Base>
   110e0:	cmp	r0, #0
   110e4:	bne	11074 <_start@@Base+0x2b4>
   110e8:	mov	r3, #8
   110ec:	mov	r2, r3
   110f0:	mov	r1, #5
   110f4:	mov	r0, r4
   110f8:	bl	1270c <flatcc_verify_field@@Base>
   110fc:	cmp	r0, #0
   11100:	bne	11074 <_start@@Base+0x2b4>
   11104:	mov	r3, #4
   11108:	mov	r2, r3
   1110c:	mov	r1, #6
   11110:	mov	r0, r4
   11114:	bl	1270c <flatcc_verify_field@@Base>
   11118:	cmp	r0, #0
   1111c:	bne	11074 <_start@@Base+0x2b4>
   11120:	mov	r3, #8
   11124:	mov	r2, r3
   11128:	mov	r1, #7
   1112c:	mov	r0, r4
   11130:	bl	1270c <flatcc_verify_field@@Base>
   11134:	cmp	r0, #0
   11138:	bne	11074 <_start@@Base+0x2b4>
   1113c:	mov	r3, #4
   11140:	mov	r2, r3
   11144:	mov	r1, #8
   11148:	mov	r0, r4
   1114c:	bl	1270c <flatcc_verify_field@@Base>
   11150:	b	11074 <_start@@Base+0x2b4>
   11154:	str	r4, [sp, #-8]!
   11158:	str	lr, [sp, #4]
   1115c:	mov	r4, r0
   11160:	movw	r3, #4180	; 0x1054
   11164:	movt	r3, #1
   11168:	mov	r2, #0
   1116c:	mov	r1, r2
   11170:	bl	12aa8 <flatcc_verify_table_field@@Base>
   11174:	cmp	r0, #0
   11178:	beq	11188 <_start@@Base+0x3c8>
   1117c:	ldr	r4, [sp]
   11180:	add	sp, sp, #4
   11184:	pop	{pc}		; (ldr pc, [sp], #4)
   11188:	movw	r3, #3884	; 0xf2c
   1118c:	movt	r3, #1
   11190:	mov	r2, #0
   11194:	mov	r1, #1
   11198:	mov	r0, r4
   1119c:	bl	12aa8 <flatcc_verify_table_field@@Base>
   111a0:	cmp	r0, #0
   111a4:	bne	1117c <_start@@Base+0x3bc>
   111a8:	movw	r3, #3812	; 0xee4
   111ac:	movt	r3, #1
   111b0:	mov	r2, #0
   111b4:	mov	r1, #2
   111b8:	mov	r0, r4
   111bc:	bl	12aa8 <flatcc_verify_table_field@@Base>
   111c0:	b	1117c <_start@@Base+0x3bc>
   111c4:	str	r4, [sp, #-8]!
   111c8:	str	lr, [sp, #4]
   111cc:	sub	sp, sp, #8
   111d0:	mov	r4, r0
   111d4:	mov	r3, #16
   111d8:	mov	r2, #32
   111dc:	mov	r1, #0
   111e0:	bl	1270c <flatcc_verify_field@@Base>
   111e4:	cmp	r0, #0
   111e8:	beq	111fc <_start@@Base+0x43c>
   111ec:	add	sp, sp, #8
   111f0:	ldr	r4, [sp]
   111f4:	add	sp, sp, #4
   111f8:	pop	{pc}		; (ldr pc, [sp], #4)
   111fc:	mov	r3, #2
   11200:	mov	r2, r3
   11204:	mov	r1, r3
   11208:	mov	r0, r4
   1120c:	bl	1270c <flatcc_verify_field@@Base>
   11210:	cmp	r0, #0
   11214:	bne	111ec <_start@@Base+0x42c>
   11218:	mov	r3, #2
   1121c:	mov	r2, r3
   11220:	mov	r1, #1
   11224:	mov	r0, r4
   11228:	bl	1270c <flatcc_verify_field@@Base>
   1122c:	cmp	r0, #0
   11230:	bne	111ec <_start@@Base+0x42c>
   11234:	mov	r2, #1
   11238:	mov	r1, #3
   1123c:	mov	r0, r4
   11240:	bl	12784 <flatcc_verify_string_field@@Base>
   11244:	cmp	r0, #0
   11248:	bne	111ec <_start@@Base+0x42c>
   1124c:	mov	r3, #1
   11250:	mov	r2, r3
   11254:	mov	r1, #6
   11258:	mov	r0, r4
   1125c:	bl	1270c <flatcc_verify_field@@Base>
   11260:	cmp	r0, #0
   11264:	bne	111ec <_start@@Base+0x42c>
   11268:	mvn	r3, #0
   1126c:	str	r3, [sp, #4]
   11270:	mov	r3, #1
   11274:	str	r3, [sp]
   11278:	mov	r2, #0
   1127c:	mov	r1, #5
   11280:	mov	r0, r4
   11284:	bl	12820 <flatcc_verify_vector_field@@Base>
   11288:	cmp	r0, #0
   1128c:	bne	111ec <_start@@Base+0x42c>
   11290:	movw	r3, #4548	; 0x11c4
   11294:	movt	r3, #1
   11298:	mov	r2, #0
   1129c:	mov	r1, #11
   112a0:	mov	r0, r4
   112a4:	bl	12bcc <flatcc_verify_table_vector_field@@Base>
   112a8:	cmp	r0, #0
   112ac:	bne	111ec <_start@@Base+0x42c>
   112b0:	mov	r2, #0
   112b4:	mov	r1, #10
   112b8:	mov	r0, r4
   112bc:	bl	128d8 <flatcc_verify_string_vector_field@@Base>
   112c0:	cmp	r0, #0
   112c4:	bne	111ec <_start@@Base+0x42c>
   112c8:	mov	r2, #0
   112cc:	mov	r1, #28
   112d0:	mov	r0, r4
   112d4:	bl	128d8 <flatcc_verify_string_vector_field@@Base>
   112d8:	cmp	r0, #0
   112dc:	bne	111ec <_start@@Base+0x42c>
   112e0:	mvn	r3, #0
   112e4:	str	r3, [sp, #4]
   112e8:	mov	r3, #1
   112ec:	str	r3, [sp]
   112f0:	mov	r2, #0
   112f4:	mov	r1, #24
   112f8:	mov	r0, r4
   112fc:	bl	12820 <flatcc_verify_vector_field@@Base>
   11300:	cmp	r0, #0
   11304:	bne	111ec <_start@@Base+0x42c>
   11308:	mvn	r3, #-536870912	; 0xe0000000
   1130c:	str	r3, [sp, #4]
   11310:	mov	r3, #4
   11314:	str	r3, [sp]
   11318:	mov	r3, #8
   1131c:	mov	r2, #0
   11320:	mov	r1, #29
   11324:	mov	r0, r4
   11328:	bl	12820 <flatcc_verify_vector_field@@Base>
   1132c:	cmp	r0, #0
   11330:	bne	111ec <_start@@Base+0x42c>
   11334:	movw	r3, #4548	; 0x11c4
   11338:	movt	r3, #1
   1133c:	mov	r2, #0
   11340:	mov	r1, #12
   11344:	mov	r0, r4
   11348:	bl	12aa8 <flatcc_verify_table_field@@Base>
   1134c:	cmp	r0, #0
   11350:	bne	111ec <_start@@Base+0x42c>
   11354:	movw	r3, #5816	; 0x16b8
   11358:	movt	r3, #1
   1135c:	mov	r2, #0
   11360:	mov	r1, #8
   11364:	mov	r0, r4
   11368:	bl	13734 <flatcc_verify_union_field@@Base>
   1136c:	cmp	r0, #0
   11370:	bne	111ec <_start@@Base+0x42c>
   11374:	mvn	r3, #-1073741824	; 0xc0000000
   11378:	str	r3, [sp, #4]
   1137c:	mov	r3, #2
   11380:	str	r3, [sp]
   11384:	mov	r3, #4
   11388:	mov	r2, #0
   1138c:	mov	r1, #9
   11390:	mov	r0, r4
   11394:	bl	12820 <flatcc_verify_vector_field@@Base>
   11398:	cmp	r0, #0
   1139c:	bne	111ec <_start@@Base+0x42c>
   113a0:	mvn	r3, #-1073741824	; 0xc0000000
   113a4:	str	r3, [sp, #4]
   113a8:	mov	r3, #2
   113ac:	str	r3, [sp]
   113b0:	mov	r3, #4
   113b4:	mov	r2, #0
   113b8:	mov	r1, #31
   113bc:	mov	r0, r4
   113c0:	bl	12820 <flatcc_verify_vector_field@@Base>
   113c4:	cmp	r0, #0
   113c8:	bne	111ec <_start@@Base+0x42c>
   113cc:	movw	r3, #4548	; 0x11c4
   113d0:	movt	r3, #1
   113d4:	str	r3, [sp, #4]
   113d8:	mov	r3, #1
   113dc:	str	r3, [sp]
   113e0:	mov	r3, #0
   113e4:	mov	r2, r3
   113e8:	mov	r1, #13
   113ec:	mov	r0, r4
   113f0:	bl	1355c <flatcc_verify_table_as_nested_root@@Base>
   113f4:	cmp	r0, #0
   113f8:	bne	111ec <_start@@Base+0x42c>
   113fc:	movw	r3, #4084	; 0xff4
   11400:	movt	r3, #1
   11404:	mov	r2, #0
   11408:	mov	r1, #14
   1140c:	mov	r0, r4
   11410:	bl	12aa8 <flatcc_verify_table_field@@Base>
   11414:	cmp	r0, #0
   11418:	bne	111ec <_start@@Base+0x42c>
   1141c:	mov	r3, #1
   11420:	mov	r2, r3
   11424:	mov	r1, #15
   11428:	mov	r0, r4
   1142c:	bl	1270c <flatcc_verify_field@@Base>
   11430:	cmp	r0, #0
   11434:	bne	111ec <_start@@Base+0x42c>
   11438:	mov	r3, #4
   1143c:	mov	r2, r3
   11440:	mov	r1, #16
   11444:	mov	r0, r4
   11448:	bl	1270c <flatcc_verify_field@@Base>
   1144c:	cmp	r0, #0
   11450:	bne	111ec <_start@@Base+0x42c>
   11454:	mov	r3, #4
   11458:	mov	r2, r3
   1145c:	mov	r1, #17
   11460:	mov	r0, r4
   11464:	bl	1270c <flatcc_verify_field@@Base>
   11468:	cmp	r0, #0
   1146c:	bne	111ec <_start@@Base+0x42c>
   11470:	mov	r3, #8
   11474:	mov	r2, r3
   11478:	mov	r1, #18
   1147c:	mov	r0, r4
   11480:	bl	1270c <flatcc_verify_field@@Base>
   11484:	cmp	r0, #0
   11488:	bne	111ec <_start@@Base+0x42c>
   1148c:	mov	r3, #8
   11490:	mov	r2, r3
   11494:	mov	r1, #19
   11498:	mov	r0, r4
   1149c:	bl	1270c <flatcc_verify_field@@Base>
   114a0:	cmp	r0, #0
   114a4:	bne	111ec <_start@@Base+0x42c>
   114a8:	mov	r3, #4
   114ac:	mov	r2, r3
   114b0:	mov	r1, #20
   114b4:	mov	r0, r4
   114b8:	bl	1270c <flatcc_verify_field@@Base>
   114bc:	cmp	r0, #0
   114c0:	bne	111ec <_start@@Base+0x42c>
   114c4:	mov	r3, #4
   114c8:	mov	r2, r3
   114cc:	mov	r1, #21
   114d0:	mov	r0, r4
   114d4:	bl	1270c <flatcc_verify_field@@Base>
   114d8:	cmp	r0, #0
   114dc:	bne	111ec <_start@@Base+0x42c>
   114e0:	mov	r3, #8
   114e4:	mov	r2, r3
   114e8:	mov	r1, #22
   114ec:	mov	r0, r4
   114f0:	bl	1270c <flatcc_verify_field@@Base>
   114f4:	cmp	r0, #0
   114f8:	bne	111ec <_start@@Base+0x42c>
   114fc:	mov	r3, #8
   11500:	mov	r2, r3
   11504:	mov	r1, #23
   11508:	mov	r0, r4
   1150c:	bl	1270c <flatcc_verify_field@@Base>
   11510:	cmp	r0, #0
   11514:	bne	111ec <_start@@Base+0x42c>
   11518:	mov	r3, #4
   1151c:	mov	r2, r3
   11520:	mov	r1, #25
   11524:	mov	r0, r4
   11528:	bl	1270c <flatcc_verify_field@@Base>
   1152c:	cmp	r0, #0
   11530:	bne	111ec <_start@@Base+0x42c>
   11534:	mov	r3, #4
   11538:	mov	r2, r3
   1153c:	mov	r1, #26
   11540:	mov	r0, r4
   11544:	bl	1270c <flatcc_verify_field@@Base>
   11548:	cmp	r0, #0
   1154c:	bne	111ec <_start@@Base+0x42c>
   11550:	mov	r3, #4
   11554:	mov	r2, r3
   11558:	mov	r1, #27
   1155c:	mov	r0, r4
   11560:	bl	1270c <flatcc_verify_field@@Base>
   11564:	cmp	r0, #0
   11568:	bne	111ec <_start@@Base+0x42c>
   1156c:	mvn	r3, #0
   11570:	str	r3, [sp, #4]
   11574:	mov	r3, #1
   11578:	str	r3, [sp]
   1157c:	mov	r2, #0
   11580:	mov	r1, #30
   11584:	mov	r0, r4
   11588:	bl	12820 <flatcc_verify_vector_field@@Base>
   1158c:	cmp	r0, #0
   11590:	bne	111ec <_start@@Base+0x42c>
   11594:	mvn	r3, #-536870912	; 0xe0000000
   11598:	str	r3, [sp, #4]
   1159c:	mov	r3, #8
   115a0:	str	r3, [sp]
   115a4:	mov	r2, #0
   115a8:	mov	r1, #32
   115ac:	mov	r0, r4
   115b0:	bl	12820 <flatcc_verify_vector_field@@Base>
   115b4:	cmp	r0, #0
   115b8:	bne	111ec <_start@@Base+0x42c>
   115bc:	mvn	r3, #-536870912	; 0xe0000000
   115c0:	str	r3, [sp, #4]
   115c4:	mov	r3, #8
   115c8:	str	r3, [sp]
   115cc:	mov	r2, #0
   115d0:	mov	r1, #33	; 0x21
   115d4:	mov	r0, r4
   115d8:	bl	12820 <flatcc_verify_vector_field@@Base>
   115dc:	cmp	r0, #0
   115e0:	bne	111ec <_start@@Base+0x42c>
   115e4:	movw	r3, #3760	; 0xeb0
   115e8:	movt	r3, #1
   115ec:	mov	r2, #0
   115f0:	mov	r1, #34	; 0x22
   115f4:	mov	r0, r4
   115f8:	bl	12aa8 <flatcc_verify_table_field@@Base>
   115fc:	cmp	r0, #0
   11600:	bne	111ec <_start@@Base+0x42c>
   11604:	movw	r3, #5664	; 0x1620
   11608:	movt	r3, #1
   1160c:	mov	r2, #0
   11610:	mov	r1, #35	; 0x23
   11614:	mov	r0, r4
   11618:	bl	12aa8 <flatcc_verify_table_field@@Base>
   1161c:	b	111ec <_start@@Base+0x42c>
   11620:	str	r4, [sp, #-8]!
   11624:	str	lr, [sp, #4]
   11628:	sub	sp, sp, #8
   1162c:	mov	r4, r0
   11630:	mvn	r3, #0
   11634:	str	r3, [sp, #4]
   11638:	mov	r3, #1
   1163c:	str	r3, [sp]
   11640:	mov	r2, #0
   11644:	mov	r1, r2
   11648:	bl	12820 <flatcc_verify_vector_field@@Base>
   1164c:	cmp	r0, #0
   11650:	beq	11664 <_start@@Base+0x8a4>
   11654:	add	sp, sp, #8
   11658:	ldr	r4, [sp]
   1165c:	add	sp, sp, #4
   11660:	pop	{pc}		; (ldr pc, [sp], #4)
   11664:	mvn	r3, #0
   11668:	str	r3, [sp, #4]
   1166c:	mov	r1, #1
   11670:	str	r1, [sp]
   11674:	mov	r3, r1
   11678:	mov	r2, #0
   1167c:	mov	r0, r4
   11680:	bl	12820 <flatcc_verify_vector_field@@Base>
   11684:	cmp	r0, #0
   11688:	bne	11654 <_start@@Base+0x894>
   1168c:	movw	r3, #4548	; 0x11c4
   11690:	movt	r3, #1
   11694:	str	r3, [sp, #4]
   11698:	mov	r3, #1
   1169c:	str	r3, [sp]
   116a0:	mov	r3, #0
   116a4:	mov	r2, r3
   116a8:	mov	r1, #2
   116ac:	mov	r0, r4
   116b0:	bl	1355c <flatcc_verify_table_as_nested_root@@Base>
   116b4:	b	11654 <_start@@Base+0x894>
   116b8:	str	r4, [sp, #-8]!
   116bc:	str	lr, [sp, #4]
   116c0:	ldrb	r3, [r0, #12]
   116c4:	sub	r3, r3, #1
   116c8:	cmp	r3, #3
   116cc:	ldrls	pc, [pc, r3, lsl #2]
   116d0:	b	1172c <_start@@Base+0x96c>
   116d4:	andeq	r1, r1, r4, ror #13
   116d8:	strdeq	r1, [r1], -ip
   116dc:	andeq	r1, r1, ip, lsl #14
   116e0:	andeq	r1, r1, ip, lsl r7
   116e4:	movw	r1, #4548	; 0x11c4
   116e8:	movt	r1, #1
   116ec:	bl	12e70 <flatcc_verify_union_table@@Base>
   116f0:	ldr	r4, [sp]
   116f4:	add	sp, sp, #4
   116f8:	pop	{pc}		; (ldr pc, [sp], #4)
   116fc:	movw	r1, #3956	; 0xf74
   11700:	movt	r1, #1
   11704:	bl	12e70 <flatcc_verify_union_table@@Base>
   11708:	b	116f0 <_start@@Base+0x930>
   1170c:	movw	r1, #3768	; 0xeb8
   11710:	movt	r1, #1
   11714:	bl	12e70 <flatcc_verify_union_table@@Base>
   11718:	b	116f0 <_start@@Base+0x930>
   1171c:	movw	r1, #5940	; 0x1734
   11720:	movt	r1, #1
   11724:	bl	12e70 <flatcc_verify_union_table@@Base>
   11728:	b	116f0 <_start@@Base+0x930>
   1172c:	mov	r0, #0
   11730:	b	116f0 <_start@@Base+0x930>
   11734:	str	r4, [sp, #-8]!
   11738:	str	lr, [sp, #4]
   1173c:	mov	r4, r0
   11740:	movw	r3, #4436	; 0x1154
   11744:	movt	r3, #1
   11748:	mov	r2, #0
   1174c:	mov	r1, r2
   11750:	bl	12aa8 <flatcc_verify_table_field@@Base>
   11754:	cmp	r0, #0
   11758:	beq	11768 <_start@@Base+0x9a8>
   1175c:	ldr	r4, [sp]
   11760:	add	sp, sp, #4
   11764:	pop	{pc}		; (ldr pc, [sp], #4)
   11768:	movw	r3, #6052	; 0x17a4
   1176c:	movt	r3, #1
   11770:	mov	r2, #0
   11774:	mov	r1, #1
   11778:	mov	r0, r4
   1177c:	bl	12aa8 <flatcc_verify_table_field@@Base>
   11780:	cmp	r0, #0
   11784:	bne	1175c <_start@@Base+0x99c>
   11788:	movw	r3, #5816	; 0x16b8
   1178c:	movt	r3, #1
   11790:	mov	r2, #0
   11794:	mov	r1, #3
   11798:	mov	r0, r4
   1179c:	bl	13888 <flatcc_verify_union_vector_field@@Base>
   117a0:	b	1175c <_start@@Base+0x99c>
   117a4:	str	r4, [sp, #-8]!
   117a8:	str	lr, [sp, #4]
   117ac:	mov	r4, r0
   117b0:	movw	r3, #6228	; 0x1854
   117b4:	movt	r3, #1
   117b8:	mov	r2, #0
   117bc:	mov	r1, #1
   117c0:	bl	13734 <flatcc_verify_union_field@@Base>
   117c4:	cmp	r0, #0
   117c8:	beq	117d8 <_start@@Base+0xa18>
   117cc:	ldr	r4, [sp]
   117d0:	add	sp, sp, #4
   117d4:	pop	{pc}		; (ldr pc, [sp], #4)
   117d8:	movw	r3, #6228	; 0x1854
   117dc:	movt	r3, #1
   117e0:	mov	r2, #0
   117e4:	mov	r1, #3
   117e8:	mov	r0, r4
   117ec:	bl	13734 <flatcc_verify_union_field@@Base>
   117f0:	cmp	r0, #0
   117f4:	bne	117cc <_start@@Base+0xa0c>
   117f8:	movw	r3, #6228	; 0x1854
   117fc:	movt	r3, #1
   11800:	mov	r2, #0
   11804:	mov	r1, #5
   11808:	mov	r0, r4
   1180c:	bl	13734 <flatcc_verify_union_field@@Base>
   11810:	cmp	r0, #0
   11814:	bne	117cc <_start@@Base+0xa0c>
   11818:	movw	r3, #6228	; 0x1854
   1181c:	movt	r3, #1
   11820:	mov	r2, #0
   11824:	mov	r1, #7
   11828:	mov	r0, r4
   1182c:	bl	13734 <flatcc_verify_union_field@@Base>
   11830:	cmp	r0, #0
   11834:	bne	117cc <_start@@Base+0xa0c>
   11838:	movw	r3, #6228	; 0x1854
   1183c:	movt	r3, #1
   11840:	mov	r2, #0
   11844:	mov	r1, #9
   11848:	mov	r0, r4
   1184c:	bl	13888 <flatcc_verify_union_vector_field@@Base>
   11850:	b	117cc <_start@@Base+0xa0c>
   11854:	str	r4, [sp, #-8]!
   11858:	str	lr, [sp, #4]
   1185c:	ldrb	r3, [r0, #12]
   11860:	cmp	r3, #9
   11864:	beq	118c8 <_start@@Base+0xb08>
   11868:	bls	1188c <_start@@Base+0xacc>
   1186c:	cmp	r3, #11
   11870:	beq	118e8 <_start@@Base+0xb28>
   11874:	bcc	118d8 <_start@@Base+0xb18>
   11878:	cmp	r3, #255	; 0xff
   1187c:	movne	r0, #0
   11880:	bne	118bc <_start@@Base+0xafc>
   11884:	bl	12fd8 <flatcc_verify_union_string@@Base>
   11888:	b	118bc <_start@@Base+0xafc>
   1188c:	cmp	r3, #2
   11890:	beq	118b0 <_start@@Base+0xaf0>
   11894:	cmp	r3, #8
   11898:	movne	r0, #0
   1189c:	bne	118bc <_start@@Base+0xafc>
   118a0:	mov	r2, #2
   118a4:	mov	r1, r2
   118a8:	bl	12f70 <flatcc_verify_union_struct@@Base>
   118ac:	b	118bc <_start@@Base+0xafc>
   118b0:	movw	r1, #3776	; 0xec0
   118b4:	movt	r1, #1
   118b8:	bl	12e70 <flatcc_verify_union_table@@Base>
   118bc:	ldr	r4, [sp]
   118c0:	add	sp, sp, #4
   118c4:	pop	{pc}		; (ldr pc, [sp], #4)
   118c8:	mov	r2, #4
   118cc:	mov	r1, r2
   118d0:	bl	12f70 <flatcc_verify_union_struct@@Base>
   118d4:	b	118bc <_start@@Base+0xafc>
   118d8:	mov	r2, #4
   118dc:	mov	r1, r2
   118e0:	bl	12f70 <flatcc_verify_union_struct@@Base>
   118e4:	b	118bc <_start@@Base+0xafc>
   118e8:	bl	12fd8 <flatcc_verify_union_string@@Base>
   118ec:	b	118bc <_start@@Base+0xafc>

000118f0 <verify_monster@@Base>:
   118f0:	strd	r4, [sp, #-32]!	; 0xffffffe0
   118f4:	strd	r6, [sp, #8]
   118f8:	strd	r8, [sp, #16]
   118fc:	str	sl, [sp, #24]
   11900:	str	lr, [sp, #28]
   11904:	cmp	r0, #0
   11908:	beq	11d78 <verify_monster@@Base+0x488>
   1190c:	movw	r3, #20301	; 0x4f4d
   11910:	movt	r3, #21326	; 0x534e
   11914:	ldr	r2, [r0, #4]
   11918:	cmp	r2, r3
   1191c:	bne	11d78 <verify_monster@@Base+0x488>
   11920:	ldr	r3, [r0]
   11924:	adds	r4, r0, r3
   11928:	beq	11d78 <verify_monster@@Base+0x488>
   1192c:	ldr	r5, [r0, r3]
   11930:	sub	r5, r4, r5
   11934:	ldrh	r6, [r5]
   11938:	cmp	r6, #9
   1193c:	bls	11da0 <verify_monster@@Base+0x4b0>
   11940:	ldrh	r3, [r5, #8]
   11944:	cmp	r3, #0
   11948:	beq	11da0 <verify_monster@@Base+0x4b0>
   1194c:	ldrsh	r3, [r4, r3]
   11950:	cmp	r3, #80	; 0x50
   11954:	bne	11da0 <verify_monster@@Base+0x4b0>
   11958:	ldrh	r3, [r5, #4]
   1195c:	cmp	r3, #0
   11960:	beq	11db4 <verify_monster@@Base+0x4c4>
   11964:	adds	r3, r4, r3
   11968:	beq	11db4 <verify_monster@@Base+0x4c4>
   1196c:	sub	r0, r3, r0
   11970:	tst	r0, #15
   11974:	bne	11dc8 <verify_monster@@Base+0x4d8>
   11978:	vldr	s14, [r3]
   1197c:	vldr	s15, [pc, #996]	; 11d68 <verify_monster@@Base+0x478>
   11980:	vcmp.f32	s14, s15
   11984:	vmrs	APSR_nzcv, fpscr
   11988:	bne	11ddc <verify_monster@@Base+0x4ec>
   1198c:	vldr	s14, [r3, #4]
   11990:	vldr	s15, [pc, #980]	; 11d6c <verify_monster@@Base+0x47c>
   11994:	vcmp.f32	s14, s15
   11998:	vmrs	APSR_nzcv, fpscr
   1199c:	bne	11df0 <verify_monster@@Base+0x500>
   119a0:	vldr	s14, [r3, #8]
   119a4:	vldr	s15, [pc, #964]	; 11d70 <verify_monster@@Base+0x480>
   119a8:	vcmp.f32	s14, s15
   119ac:	vmrs	APSR_nzcv, fpscr
   119b0:	bne	11e04 <verify_monster@@Base+0x514>
   119b4:	vldr	d6, [r3, #16]
   119b8:	vldr	d7, [pc, #912]	; 11d50 <verify_monster@@Base+0x460>
   119bc:	vcmp.f64	d6, d7
   119c0:	vmrs	APSR_nzcv, fpscr
   119c4:	bne	11e18 <verify_monster@@Base+0x528>
   119c8:	ldrsb	r2, [r3, #24]
   119cc:	cmp	r2, #2
   119d0:	bne	11e2c <verify_monster@@Base+0x53c>
   119d4:	ldrsh	r2, [r3, #26]
   119d8:	cmp	r2, #5
   119dc:	bne	11e40 <verify_monster@@Base+0x550>
   119e0:	ldrsb	r3, [r3, #28]
   119e4:	cmp	r3, #6
   119e8:	bne	11e40 <verify_monster@@Base+0x550>
   119ec:	cmp	r6, #11
   119f0:	bls	11e54 <verify_monster@@Base+0x564>
   119f4:	ldrh	r3, [r5, #10]
   119f8:	cmp	r3, #0
   119fc:	beq	11e54 <verify_monster@@Base+0x564>
   11a00:	add	r0, r4, r3
   11a04:	ldr	r3, [r4, r3]
   11a08:	add	r3, r3, #4
   11a0c:	adds	r0, r0, r3
   11a10:	beq	11e74 <verify_monster@@Base+0x584>
   11a14:	ldr	r3, [r0, #-4]
   11a18:	cmp	r3, #9
   11a1c:	bne	11e74 <verify_monster@@Base+0x584>
   11a20:	movw	r1, #15756	; 0x3d8c
   11a24:	movt	r1, #1
   11a28:	bl	10cb8 <strcmp@plt>
   11a2c:	subs	r1, r0, #0
   11a30:	bne	11e88 <verify_monster@@Base+0x598>
   11a34:	cmp	r6, #15
   11a38:	bls	11e9c <verify_monster@@Base+0x5ac>
   11a3c:	ldrh	r3, [r5, #14]
   11a40:	cmp	r3, #0
   11a44:	beq	11e9c <verify_monster@@Base+0x5ac>
   11a48:	add	r0, r4, r3
   11a4c:	ldr	r2, [r4, r3]
   11a50:	add	r2, r2, #4
   11a54:	adds	r3, r0, r2
   11a58:	beq	11e9c <verify_monster@@Base+0x5ac>
   11a5c:	ldr	ip, [r3, #-4]
   11a60:	cmp	ip, #5
   11a64:	bne	11e9c <verify_monster@@Base+0x5ac>
   11a68:	ldrb	r2, [r0, r2]
   11a6c:	cmp	r2, #0
   11a70:	moveq	r1, #1
   11a74:	bne	11eb0 <verify_monster@@Base+0x5c0>
   11a78:	ldrb	r2, [r3, #1]!
   11a7c:	cmp	r2, r1
   11a80:	bne	11eb0 <verify_monster@@Base+0x5c0>
   11a84:	add	r1, r1, #1
   11a88:	cmp	r1, #5
   11a8c:	bne	11a78 <verify_monster@@Base+0x188>
   11a90:	cmp	r6, #25
   11a94:	bls	11ec4 <verify_monster@@Base+0x5d4>
   11a98:	ldrh	r3, [r5, #24]
   11a9c:	cmp	r3, #0
   11aa0:	beq	11ec4 <verify_monster@@Base+0x5d4>
   11aa4:	add	r2, r4, r3
   11aa8:	ldr	r3, [r4, r3]
   11aac:	add	r3, r3, #4
   11ab0:	adds	r7, r2, r3
   11ab4:	beq	11ec4 <verify_monster@@Base+0x5d4>
   11ab8:	ldr	r1, [r7, #-4]
   11abc:	cmp	r1, #2
   11ac0:	bne	11ed8 <verify_monster@@Base+0x5e8>
   11ac4:	ldr	r0, [r2, r3]
   11ac8:	add	r0, r0, #4
   11acc:	movw	r1, #15916	; 0x3e2c
   11ad0:	movt	r1, #1
   11ad4:	add	r0, r7, r0
   11ad8:	bl	10cb8 <strcmp@plt>
   11adc:	cmp	r0, #0
   11ae0:	bne	11eec <verify_monster@@Base+0x5fc>
   11ae4:	ldr	r0, [r7, #4]
   11ae8:	add	r0, r0, #8
   11aec:	movw	r1, #15960	; 0x3e58
   11af0:	movt	r1, #1
   11af4:	add	r0, r7, r0
   11af8:	bl	10cb8 <strcmp@plt>
   11afc:	cmp	r0, #0
   11b00:	bne	11f00 <verify_monster@@Base+0x610>
   11b04:	ldrh	r3, [r5, #18]
   11b08:	cmp	r3, #0
   11b0c:	beq	11f14 <verify_monster@@Base+0x624>
   11b10:	ldrb	r3, [r4, r3]
   11b14:	cmp	r3, #1
   11b18:	bne	11f14 <verify_monster@@Base+0x624>
   11b1c:	ldrh	r3, [r5, #20]
   11b20:	cmp	r3, #0
   11b24:	beq	11f28 <verify_monster@@Base+0x638>
   11b28:	add	r1, r4, r3
   11b2c:	ldr	r3, [r4, r3]
   11b30:	adds	r2, r1, r3
   11b34:	beq	11f28 <verify_monster@@Base+0x638>
   11b38:	ldr	r3, [r1, r3]
   11b3c:	sub	r3, r2, r3
   11b40:	ldrh	r1, [r3]
   11b44:	cmp	r1, #11
   11b48:	bls	11f3c <verify_monster@@Base+0x64c>
   11b4c:	ldrh	r3, [r3, #10]
   11b50:	cmp	r3, #0
   11b54:	beq	11f3c <verify_monster@@Base+0x64c>
   11b58:	add	r0, r2, r3
   11b5c:	ldr	r3, [r2, r3]
   11b60:	add	r3, r3, #4
   11b64:	movw	r1, #16048	; 0x3eb0
   11b68:	movt	r1, #1
   11b6c:	add	r0, r0, r3
   11b70:	bl	10cb8 <strcmp@plt>
   11b74:	cmp	r0, #0
   11b78:	bne	11f5c <verify_monster@@Base+0x66c>
   11b7c:	ldrh	r3, [r5, #22]
   11b80:	cmp	r3, #0
   11b84:	beq	11f70 <verify_monster@@Base+0x680>
   11b88:	add	r1, r4, r3
   11b8c:	ldr	r3, [r4, r3]
   11b90:	add	r3, r3, #4
   11b94:	adds	r2, r1, r3
   11b98:	beq	11f70 <verify_monster@@Base+0x680>
   11b9c:	ldr	ip, [r2, #-4]
   11ba0:	cmp	ip, #2
   11ba4:	bne	11f70 <verify_monster@@Base+0x680>
   11ba8:	ldrsh	r3, [r1, r3]
   11bac:	cmp	r3, #10
   11bb0:	bne	11f84 <verify_monster@@Base+0x694>
   11bb4:	ldrsb	r3, [r2, #2]
   11bb8:	cmp	r3, #20
   11bbc:	bne	11f98 <verify_monster@@Base+0x6a8>
   11bc0:	cmn	r2, #4
   11bc4:	beq	11fac <verify_monster@@Base+0x6bc>
   11bc8:	ldrsh	r3, [r2, #4]
   11bcc:	cmp	r3, #30
   11bd0:	bne	11fac <verify_monster@@Base+0x6bc>
   11bd4:	ldrsb	r3, [r2, #6]
   11bd8:	cmp	r3, #40	; 0x28
   11bdc:	bne	11fc0 <verify_monster@@Base+0x6d0>
   11be0:	cmp	r6, #37	; 0x25
   11be4:	bls	11fd4 <verify_monster@@Base+0x6e4>
   11be8:	ldrh	r2, [r5, #36]	; 0x24
   11bec:	cmp	r2, #0
   11bf0:	beq	11fd4 <verify_monster@@Base+0x6e4>
   11bf4:	movw	r3, #51521	; 0xc941
   11bf8:	movt	r3, #56697	; 0xdd79
   11bfc:	ldr	r2, [r4, r2]
   11c00:	cmp	r2, r3
   11c04:	bne	11fd4 <verify_monster@@Base+0x6e4>
   11c08:	cmp	r6, #39	; 0x27
   11c0c:	bls	11ff0 <verify_monster@@Base+0x700>
   11c10:	ldrh	r2, [r5, #38]	; 0x26
   11c14:	cmp	r2, #0
   11c18:	beq	11ff0 <verify_monster@@Base+0x700>
   11c1c:	movw	r3, #51521	; 0xc941
   11c20:	movt	r3, #56697	; 0xdd79
   11c24:	ldr	r2, [r4, r2]
   11c28:	cmp	r2, r3
   11c2c:	bne	11ff0 <verify_monster@@Base+0x700>
   11c30:	cmp	r6, #41	; 0x29
   11c34:	bls	1200c <verify_monster@@Base+0x71c>
   11c38:	ldrh	r3, [r5, #40]	; 0x28
   11c3c:	cmp	r3, #0
   11c40:	beq	1200c <verify_monster@@Base+0x71c>
   11c44:	ldrd	r8, [r4, r3]
   11c48:	add	r3, pc, #264	; 0x108
   11c4c:	ldrd	r2, [r3]
   11c50:	cmp	r9, r3
   11c54:	cmpeq	r8, r2
   11c58:	bne	1200c <verify_monster@@Base+0x71c>
   11c5c:	cmp	r6, #43	; 0x2b
   11c60:	bls	12028 <verify_monster@@Base+0x738>
   11c64:	ldrh	r3, [r5, #42]	; 0x2a
   11c68:	cmp	r3, #0
   11c6c:	beq	12028 <verify_monster@@Base+0x738>
   11c70:	ldrd	r8, [r4, r3]
   11c74:	add	r3, pc, #220	; 0xdc
   11c78:	ldrd	r2, [r3]
   11c7c:	cmp	r9, r3
   11c80:	cmpeq	r8, r2
   11c84:	bne	12028 <verify_monster@@Base+0x738>
   11c88:	cmp	r6, #45	; 0x2d
   11c8c:	bls	12044 <verify_monster@@Base+0x754>
   11c90:	ldrh	r2, [r5, #44]	; 0x2c
   11c94:	cmp	r2, #0
   11c98:	beq	12044 <verify_monster@@Base+0x754>
   11c9c:	movw	r3, #42097	; 0xa471
   11ca0:	movt	r3, #36481	; 0x8e81
   11ca4:	ldr	r2, [r4, r2]
   11ca8:	cmp	r2, r3
   11cac:	bne	12044 <verify_monster@@Base+0x754>
   11cb0:	cmp	r6, #47	; 0x2f
   11cb4:	bls	12060 <verify_monster@@Base+0x770>
   11cb8:	ldrh	r2, [r5, #46]	; 0x2e
   11cbc:	cmp	r2, #0
   11cc0:	beq	12060 <verify_monster@@Base+0x770>
   11cc4:	movw	r3, #42097	; 0xa471
   11cc8:	movt	r3, #36481	; 0x8e81
   11ccc:	ldr	r2, [r4, r2]
   11cd0:	cmp	r2, r3
   11cd4:	bne	12060 <verify_monster@@Base+0x770>
   11cd8:	cmp	r6, #49	; 0x31
   11cdc:	bls	1207c <verify_monster@@Base+0x78c>
   11ce0:	ldrh	r3, [r5, #48]	; 0x30
   11ce4:	cmp	r3, #0
   11ce8:	beq	1207c <verify_monster@@Base+0x78c>
   11cec:	ldrd	r8, [r4, r3]
   11cf0:	add	r3, pc, #104	; 0x68
   11cf4:	ldrd	r2, [r3]
   11cf8:	cmp	r9, r3
   11cfc:	cmpeq	r8, r2
   11d00:	bne	1207c <verify_monster@@Base+0x78c>
   11d04:	cmp	r6, #51	; 0x33
   11d08:	bls	11d30 <verify_monster@@Base+0x440>
   11d0c:	ldrh	r3, [r5, #50]	; 0x32
   11d10:	cmp	r3, #0
   11d14:	beq	11d30 <verify_monster@@Base+0x440>
   11d18:	ldrd	r4, [r4, r3]
   11d1c:	add	r3, pc, #60	; 0x3c
   11d20:	ldrd	r2, [r3]
   11d24:	cmp	r5, r3
   11d28:	cmpeq	r4, r2
   11d2c:	beq	11d88 <verify_monster@@Base+0x498>
   11d30:	ldr	r3, [pc, #60]	; 11d74 <verify_monster@@Base+0x484>
   11d34:	mov	r2, #155	; 0x9b
   11d38:	movw	r1, #16212	; 0x3f54
   11d3c:	movt	r1, #1
   11d40:	movw	r0, #16712	; 0x4148
   11d44:	movt	r0, #1
   11d48:	bl	10db4 <__assert_fail@plt>
   11d4c:	nop	{0}
   11d50:	andeq	r0, r0, r0
   11d54:	andmi	r0, r8, r0
   11d58:	vrhadd.s<illegal width 64>	d25, d27, d1
   11d5c:	cdpvs	0, 0, cr8, cr15, cr13, {6}
   11d60:			; <UNDEFINED> instruction: 0xc767ddf1
   11d64:	mvnsmi	r4, #220, 16	; 0xdc0000
   11d68:	svccc	0x00800000
   11d6c:	andmi	r0, r0, r0
   11d70:	submi	r0, r0, r0
   11d74:			; <UNDEFINED> instruction: 0x00013bb0
   11d78:	movw	r0, #15296	; 0x3bc0
   11d7c:	movt	r0, #1
   11d80:	bl	10d24 <puts@plt>
   11d84:	mvn	r0, #0
   11d88:	ldrd	r4, [sp]
   11d8c:	ldrd	r6, [sp, #8]
   11d90:	ldrd	r8, [sp, #16]
   11d94:	ldr	sl, [sp, #24]
   11d98:	add	sp, sp, #28
   11d9c:	pop	{pc}		; (ldr pc, [sp], #4)
   11da0:	movw	r0, #15320	; 0x3bd8
   11da4:	movt	r0, #1
   11da8:	bl	10d24 <puts@plt>
   11dac:	mvn	r0, #0
   11db0:	b	11d88 <verify_monster@@Base+0x498>
   11db4:	movw	r0, #15356	; 0x3bfc
   11db8:	movt	r0, #1
   11dbc:	bl	10d24 <puts@plt>
   11dc0:	mvn	r0, #0
   11dc4:	b	11d88 <verify_monster@@Base+0x498>
   11dc8:	movw	r0, #15376	; 0x3c10
   11dcc:	movt	r0, #1
   11dd0:	bl	10d24 <puts@plt>
   11dd4:	mvn	r0, #0
   11dd8:	b	11d88 <verify_monster@@Base+0x498>
   11ddc:	movw	r0, #15416	; 0x3c38
   11de0:	movt	r0, #1
   11de4:	bl	10d24 <puts@plt>
   11de8:	mvn	r0, #0
   11dec:	b	11d88 <verify_monster@@Base+0x498>
   11df0:	movw	r0, #15452	; 0x3c5c
   11df4:	movt	r0, #1
   11df8:	bl	10d24 <puts@plt>
   11dfc:	mvn	r0, #0
   11e00:	b	11d88 <verify_monster@@Base+0x498>
   11e04:	movw	r0, #15488	; 0x3c80
   11e08:	movt	r0, #1
   11e0c:	bl	10d24 <puts@plt>
   11e10:	mvn	r0, #0
   11e14:	b	11d88 <verify_monster@@Base+0x498>
   11e18:	movw	r0, #15524	; 0x3ca4
   11e1c:	movt	r0, #1
   11e20:	bl	10d24 <puts@plt>
   11e24:	mvn	r0, #0
   11e28:	b	11d88 <verify_monster@@Base+0x498>
   11e2c:	movw	r0, #15544	; 0x3cb8
   11e30:	movt	r0, #1
   11e34:	bl	10d24 <puts@plt>
   11e38:	mvn	r0, #0
   11e3c:	b	11d88 <verify_monster@@Base+0x498>
   11e40:	movw	r0, #15568	; 0x3cd0
   11e44:	movt	r0, #1
   11e48:	bl	10d24 <puts@plt>
   11e4c:	mvn	r0, #0
   11e50:	b	11d88 <verify_monster@@Base+0x498>
   11e54:	movw	r3, #15252	; 0x3b94
   11e58:	movt	r3, #1
   11e5c:	movw	r2, #699	; 0x2bb
   11e60:	movw	r1, #15592	; 0x3ce8
   11e64:	movt	r1, #1
   11e68:	movw	r0, #15692	; 0x3d4c
   11e6c:	movt	r0, #1
   11e70:	bl	10db4 <__assert_fail@plt>
   11e74:	movw	r0, #15728	; 0x3d70
   11e78:	movt	r0, #1
   11e7c:	bl	10d24 <puts@plt>
   11e80:	mvn	r0, #0
   11e84:	b	11d88 <verify_monster@@Base+0x498>
   11e88:	movw	r0, #15768	; 0x3d98
   11e8c:	movt	r0, #1
   11e90:	bl	10d24 <puts@plt>
   11e94:	mvn	r0, #0
   11e98:	b	11d88 <verify_monster@@Base+0x498>
   11e9c:	movw	r0, #15788	; 0x3dac
   11ea0:	movt	r0, #1
   11ea4:	bl	10d24 <puts@plt>
   11ea8:	mvn	r0, #0
   11eac:	b	11d88 <verify_monster@@Base+0x498>
   11eb0:	movw	r0, #15816	; 0x3dc8
   11eb4:	movt	r0, #1
   11eb8:	bl	10cc4 <printf@plt>
   11ebc:	mvn	r0, #0
   11ec0:	b	11d88 <verify_monster@@Base+0x498>
   11ec4:	movw	r0, #15848	; 0x3de8
   11ec8:	movt	r0, #1
   11ecc:	bl	10d24 <puts@plt>
   11ed0:	mvn	r0, #0
   11ed4:	b	11d88 <verify_monster@@Base+0x498>
   11ed8:	movw	r0, #15876	; 0x3e04
   11edc:	movt	r0, #1
   11ee0:	bl	10d24 <puts@plt>
   11ee4:	mvn	r0, #0
   11ee8:	b	11d88 <verify_monster@@Base+0x498>
   11eec:	movw	r0, #15924	; 0x3e34
   11ef0:	movt	r0, #1
   11ef4:	bl	10d24 <puts@plt>
   11ef8:	mvn	r0, #0
   11efc:	b	11d88 <verify_monster@@Base+0x498>
   11f00:	movw	r0, #15968	; 0x3e60
   11f04:	movt	r0, #1
   11f08:	bl	10d24 <puts@plt>
   11f0c:	mvn	r0, #0
   11f10:	b	11d88 <verify_monster@@Base+0x498>
   11f14:	movw	r0, #16008	; 0x3e88
   11f18:	movt	r0, #1
   11f1c:	bl	10d24 <puts@plt>
   11f20:	mvn	r0, #0
   11f24:	b	11d88 <verify_monster@@Base+0x498>
   11f28:	movw	r0, #16024	; 0x3e98
   11f2c:	movt	r0, #1
   11f30:	bl	10d24 <puts@plt>
   11f34:	mvn	r0, #0
   11f38:	b	11d88 <verify_monster@@Base+0x498>
   11f3c:	movw	r3, #15252	; 0x3b94
   11f40:	movt	r3, #1
   11f44:	movw	r2, #699	; 0x2bb
   11f48:	movw	r1, #15592	; 0x3ce8
   11f4c:	movt	r1, #1
   11f50:	movw	r0, #15692	; 0x3d4c
   11f54:	movt	r0, #1
   11f58:	bl	10db4 <__assert_fail@plt>
   11f5c:	movw	r0, #16056	; 0x3eb8
   11f60:	movt	r0, #1
   11f64:	bl	10d24 <puts@plt>
   11f68:	mvn	r0, #0
   11f6c:	b	11d88 <verify_monster@@Base+0x498>
   11f70:	movw	r0, #16080	; 0x3ed0
   11f74:	movt	r0, #1
   11f78:	bl	10d24 <puts@plt>
   11f7c:	mvn	r0, #0
   11f80:	b	11d88 <verify_monster@@Base+0x498>
   11f84:	movw	r0, #16116	; 0x3ef4
   11f88:	movt	r0, #1
   11f8c:	bl	10d24 <puts@plt>
   11f90:	mvn	r0, #0
   11f94:	b	11d88 <verify_monster@@Base+0x498>
   11f98:	movw	r0, #16140	; 0x3f0c
   11f9c:	movt	r0, #1
   11fa0:	bl	10d24 <puts@plt>
   11fa4:	mvn	r0, #0
   11fa8:	b	11d88 <verify_monster@@Base+0x498>
   11fac:	movw	r0, #16164	; 0x3f24
   11fb0:	movt	r0, #1
   11fb4:	bl	10d24 <puts@plt>
   11fb8:	mvn	r0, #0
   11fbc:	b	11d88 <verify_monster@@Base+0x498>
   11fc0:	movw	r0, #16188	; 0x3f3c
   11fc4:	movt	r0, #1
   11fc8:	bl	10d24 <puts@plt>
   11fcc:	mvn	r0, #0
   11fd0:	b	11d88 <verify_monster@@Base+0x498>
   11fd4:	ldr	r3, [pc, #-616]	; 11d74 <verify_monster@@Base+0x484>
   11fd8:	mov	r2, #148	; 0x94
   11fdc:	movw	r1, #16212	; 0x3f54
   11fe0:	movt	r1, #1
   11fe4:	movw	r0, #16296	; 0x3fa8
   11fe8:	movt	r0, #1
   11fec:	bl	10db4 <__assert_fail@plt>
   11ff0:	ldr	r3, [pc, #-644]	; 11d74 <verify_monster@@Base+0x484>
   11ff4:	mov	r2, #149	; 0x95
   11ff8:	movw	r1, #16212	; 0x3f54
   11ffc:	movt	r1, #1
   12000:	movw	r0, #16352	; 0x3fe0
   12004:	movt	r0, #1
   12008:	bl	10db4 <__assert_fail@plt>
   1200c:	ldr	r3, [pc, #-672]	; 11d74 <verify_monster@@Base+0x484>
   12010:	mov	r2, #150	; 0x96
   12014:	movw	r1, #16212	; 0x3f54
   12018:	movt	r1, #1
   1201c:	movw	r0, #16408	; 0x4018
   12020:	movt	r0, #1
   12024:	bl	10db4 <__assert_fail@plt>
   12028:	ldr	r3, [pc, #-700]	; 11d74 <verify_monster@@Base+0x484>
   1202c:	mov	r2, #151	; 0x97
   12030:	movw	r1, #16212	; 0x3f54
   12034:	movt	r1, #1
   12038:	movw	r0, #16472	; 0x4058
   1203c:	movt	r0, #1
   12040:	bl	10db4 <__assert_fail@plt>
   12044:	ldr	r3, [pc, #-728]	; 11d74 <verify_monster@@Base+0x484>
   12048:	mov	r2, #152	; 0x98
   1204c:	movw	r1, #16212	; 0x3f54
   12050:	movt	r1, #1
   12054:	movw	r0, #16536	; 0x4098
   12058:	movt	r0, #1
   1205c:	bl	10db4 <__assert_fail@plt>
   12060:	ldr	r3, [pc, #-756]	; 11d74 <verify_monster@@Base+0x484>
   12064:	mov	r2, #153	; 0x99
   12068:	movw	r1, #16212	; 0x3f54
   1206c:	movt	r1, #1
   12070:	movw	r0, #16592	; 0x40d0
   12074:	movt	r0, #1
   12078:	bl	10db4 <__assert_fail@plt>
   1207c:	ldr	r3, [pc, #-784]	; 11d74 <verify_monster@@Base+0x484>
   12080:	mov	r2, #154	; 0x9a
   12084:	movw	r1, #16212	; 0x3f54
   12088:	movt	r1, #1
   1208c:	movw	r0, #16648	; 0x4108
   12090:	movt	r0, #1
   12094:	bl	10db4 <__assert_fail@plt>

00012098 <main@@Base>:
   12098:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1209c:	strd	r6, [sp, #8]
   120a0:	strd	r8, [sp, #16]
   120a4:	strd	sl, [sp, #24]
   120a8:	str	lr, [sp, #32]
   120ac:	sub	sp, sp, #36	; 0x24
   120b0:	sub	r3, r0, #1
   120b4:	cmp	r3, #1
   120b8:	bhi	12158 <main@@Base+0xc0>
   120bc:	cmp	r0, #2
   120c0:	beq	12180 <main@@Base+0xe8>
   120c4:	movw	r3, #20592	; 0x5070
   120c8:	movt	r3, #2
   120cc:	movw	r1, #16840	; 0x41c8
   120d0:	movt	r1, #1
   120d4:	ldr	r0, [r3]
   120d8:	bl	10cd0 <fopen@plt>
   120dc:	subs	r5, r0, #0
   120e0:	moveq	r4, #0
   120e4:	beq	1237c <main@@Base+0x2e4>
   120e8:	mov	r2, #2
   120ec:	mov	r1, #0
   120f0:	mov	r0, r5
   120f4:	bl	10d9c <fseek@plt>
   120f8:	mov	r0, r5
   120fc:	bl	10cf4 <ftell@plt>
   12100:	mov	r4, r0
   12104:	cmp	r0, #1024	; 0x400
   12108:	bhi	12358 <main@@Base+0x2c0>
   1210c:	mov	r0, r5
   12110:	bl	10d00 <rewind@plt>
   12114:	cmp	r4, #0
   12118:	movne	r0, r4
   1211c:	moveq	r0, #1
   12120:	bl	10d30 <malloc@plt>
   12124:	subs	r7, r0, #0
   12128:	beq	1235c <main@@Base+0x2c4>
   1212c:	mov	r6, #0
   12130:	mov	r8, #1
   12134:	mov	r3, r5
   12138:	sub	r2, r4, r6
   1213c:	mov	r1, r8
   12140:	add	r0, r7, r6
   12144:	bl	10d18 <fread@plt>
   12148:	cmp	r0, #0
   1214c:	beq	12194 <main@@Base+0xfc>
   12150:	add	r6, r6, r0
   12154:	b	12134 <main@@Base+0x9c>
   12158:	movw	r3, #20600	; 0x5078
   1215c:	movt	r3, #2
   12160:	ldr	r3, [r3]
   12164:	mov	r2, #63	; 0x3f
   12168:	mov	r1, #1
   1216c:	movw	r0, #16776	; 0x4188
   12170:	movt	r0, #1
   12174:	bl	10d0c <fwrite@plt>
   12178:	mov	r0, #1
   1217c:	bl	10d54 <exit@plt>
   12180:	movw	r3, #20592	; 0x5070
   12184:	movt	r3, #2
   12188:	ldr	r2, [r1, #4]
   1218c:	str	r2, [r3]
   12190:	b	120c4 <main@@Base+0x2c>
   12194:	cmp	r4, r6
   12198:	bne	1235c <main@@Base+0x2c4>
   1219c:	mov	r0, r5
   121a0:	bl	10d84 <fclose@plt>
   121a4:	mov	r5, r7
   121a8:	b	1237c <main@@Base+0x2e4>
   121ac:	add	r2, sp, #12
   121b0:	mov	r1, sl
   121b4:	ldr	r0, [sp, #4]
   121b8:	bl	10d60 <fprintf@plt>
   121bc:	mov	r2, r5
   121c0:	mov	r1, fp
   121c4:	ldr	r0, [sp, #4]
   121c8:	bl	10d60 <fprintf@plt>
   121cc:	ldrb	r2, [r8, #1]!
   121d0:	mov	r1, r9
   121d4:	ldr	r0, [sp, #4]
   121d8:	bl	10d60 <fprintf@plt>
   121dc:	ldrb	r2, [r8]
   121e0:	sub	r3, r2, #32
   121e4:	uxtb	r3, r3
   121e8:	cmp	r3, #95	; 0x5f
   121ec:	movcs	r2, #46	; 0x2e
   121f0:	add	r3, sp, #32
   121f4:	add	r3, r3, r6
   121f8:	strb	r2, [r3, #-20]	; 0xffffffec
   121fc:	mov	r2, #0
   12200:	strb	r2, [r3, #-19]	; 0xffffffed
   12204:	add	r5, r5, #1
   12208:	cmp	r5, r4
   1220c:	beq	1223c <main@@Base+0x1a4>
   12210:	ands	r6, r5, #15
   12214:	bne	12224 <main@@Base+0x18c>
   12218:	cmp	r5, #0
   1221c:	beq	121bc <main@@Base+0x124>
   12220:	b	121ac <main@@Base+0x114>
   12224:	tst	r5, #7
   12228:	bne	121cc <main@@Base+0x134>
   1222c:	ldr	r1, [sp, #4]
   12230:	mov	r0, #32
   12234:	bl	10d90 <fputc@plt>
   12238:	b	121cc <main@@Base+0x134>
   1223c:	tst	r4, #15
   12240:	beq	12278 <main@@Base+0x1e0>
   12244:	mov	r5, r4
   12248:	movw	r8, #16900	; 0x4204
   1224c:	movt	r8, #1
   12250:	mov	sl, #3
   12254:	mov	r9, #1
   12258:	ldr	r3, [sp, #4]
   1225c:	mov	r2, sl
   12260:	mov	r1, r9
   12264:	mov	r0, r8
   12268:	bl	10d0c <fwrite@plt>
   1226c:	add	r5, r5, #1
   12270:	tst	r5, #15
   12274:	bne	12258 <main@@Base+0x1c0>
   12278:	add	r2, sp, #12
   1227c:	movw	r1, #16876	; 0x41ec
   12280:	movt	r1, #1
   12284:	ldr	r0, [sp, #4]
   12288:	bl	10d60 <fprintf@plt>
   1228c:	movw	r3, #4548	; 0x11c4
   12290:	movt	r3, #1
   12294:	movw	r2, #16904	; 0x4208
   12298:	movt	r2, #1
   1229c:	mov	r1, r4
   122a0:	mov	r0, r7
   122a4:	bl	1325c <flatcc_verify_table_as_root@@Base>
   122a8:	cmp	r0, #0
   122ac:	bne	12308 <main@@Base+0x270>
   122b0:	movw	r3, #4548	; 0x11c4
   122b4:	movt	r3, #1
   122b8:	movw	r2, #16904	; 0x4208
   122bc:	movt	r2, #1
   122c0:	mov	r1, r4
   122c4:	mov	r0, r7
   122c8:	bl	1325c <flatcc_verify_table_as_root@@Base>
   122cc:	cmp	r0, #0
   122d0:	bne	12330 <main@@Base+0x298>
   122d4:	mov	r0, r7
   122d8:	bl	118f0 <verify_monster@@Base>
   122dc:	mov	r4, r0
   122e0:	mov	r0, r7
   122e4:	bl	10cdc <free@plt>
   122e8:	mov	r0, r4
   122ec:	add	sp, sp, #36	; 0x24
   122f0:	ldrd	r4, [sp]
   122f4:	ldrd	r6, [sp, #8]
   122f8:	ldrd	r8, [sp, #16]
   122fc:	ldrd	sl, [sp, #24]
   12300:	add	sp, sp, #32
   12304:	pop	{pc}		; (ldr pc, [sp], #4)
   12308:	movw	r3, #20600	; 0x5078
   1230c:	movt	r3, #2
   12310:	ldr	r3, [r3]
   12314:	mov	r2, #38	; 0x26
   12318:	mov	r1, #1
   1231c:	movw	r0, #16912	; 0x4210
   12320:	movt	r0, #1
   12324:	bl	10d0c <fwrite@plt>
   12328:	mvn	r4, #0
   1232c:	b	122e0 <main@@Base+0x248>
   12330:	movw	r3, #20600	; 0x5078
   12334:	movt	r3, #2
   12338:	ldr	r3, [r3]
   1233c:	mov	r2, #62	; 0x3e
   12340:	mov	r1, #1
   12344:	movw	r0, #16952	; 0x4238
   12348:	movt	r0, #1
   1234c:	bl	10d0c <fwrite@plt>
   12350:	mvn	r4, #0
   12354:	b	122e0 <main@@Base+0x248>
   12358:	mov	r7, #0
   1235c:	mov	r0, r5
   12360:	bl	10d84 <fclose@plt>
   12364:	cmp	r7, #0
   12368:	moveq	r5, r7
   1236c:	beq	1237c <main@@Base+0x2e4>
   12370:	mov	r0, r7
   12374:	bl	10cdc <free@plt>
   12378:	mov	r5, #0
   1237c:	mov	r3, #0
   12380:	str	r3, [sp, #12]
   12384:	add	r2, r4, #255	; 0xff
   12388:	bic	r2, r2, #255	; 0xff
   1238c:	mov	r1, #256	; 0x100
   12390:	add	r0, sp, #12
   12394:	bl	10d6c <posix_memalign@plt>
   12398:	cmp	r0, #0
   1239c:	beq	123b8 <main@@Base+0x320>
   123a0:	ldr	r0, [sp, #12]
   123a4:	cmp	r0, #0
   123a8:	beq	123b8 <main@@Base+0x320>
   123ac:	bl	10cdc <free@plt>
   123b0:	mov	r3, #0
   123b4:	str	r3, [sp, #12]
   123b8:	ldr	r7, [sp, #12]
   123bc:	mov	r2, r4
   123c0:	mov	r1, r5
   123c4:	mov	r0, r7
   123c8:	bl	10ce8 <memcpy@plt>
   123cc:	mov	r0, r5
   123d0:	bl	10cdc <free@plt>
   123d4:	movw	r3, #20600	; 0x5078
   123d8:	movt	r3, #2
   123dc:	ldr	r3, [r3]
   123e0:	str	r3, [sp, #4]
   123e4:	movw	r2, #16844	; 0x41cc
   123e8:	movt	r2, #1
   123ec:	movw	r1, #16868	; 0x41e4
   123f0:	movt	r1, #1
   123f4:	mov	r0, r3
   123f8:	bl	10d60 <fprintf@plt>
   123fc:	cmp	r4, #0
   12400:	beq	12278 <main@@Base+0x1e0>
   12404:	sub	r8, r7, #1
   12408:	mov	r5, #0
   1240c:	movw	fp, #16884	; 0x41f4
   12410:	movt	fp, #1
   12414:	movw	sl, #16876	; 0x41ec
   12418:	movt	sl, #1
   1241c:	movw	r9, #16892	; 0x41fc
   12420:	movt	r9, #1
   12424:	b	12210 <main@@Base+0x178>
   12428:	add	r1, r1, #2
   1242c:	lsl	r1, r1, #1
   12430:	uxth	r1, r1
   12434:	ldrh	ip, [r0, #22]
   12438:	cmp	ip, r1
   1243c:	bls	1247c <main@@Base+0x3e4>
   12440:	ldr	ip, [r0, #12]
   12444:	ldrh	r1, [ip, r1]
   12448:	cmp	r1, #0
   1244c:	beq	1247c <main@@Base+0x3e4>
   12450:	ldrh	ip, [r0, #20]
   12454:	add	r2, r1, #4
   12458:	cmp	ip, r2
   1245c:	bcc	12494 <main@@Base+0x3fc>
   12460:	ldr	r2, [r0, #16]
   12464:	add	r1, r1, r2
   12468:	tst	r1, #3
   1246c:	bne	1249c <main@@Base+0x404>
   12470:	str	r1, [r3]
   12474:	mov	r0, #0
   12478:	bx	lr
   1247c:	mov	r1, #0
   12480:	str	r1, [r3]
   12484:	cmp	r2, r1
   12488:	moveq	r0, r2
   1248c:	movne	r0, #4
   12490:	bx	lr
   12494:	mov	r0, #13
   12498:	bx	lr
   1249c:	mov	r0, #12
   124a0:	bx	lr

000124a4 <flatcc_verify_error_string@@Base>:
   124a4:	cmp	r0, #36	; 0x24
   124a8:	ldrls	pc, [pc, r0, lsl #2]
   124ac:	b	126f4 <flatcc_verify_error_string@@Base+0x250>
   124b0:	andeq	r2, r1, r0, lsl #14
   124b4:	andeq	r2, r1, r4, asr #10
   124b8:	andeq	r2, r1, r0, asr r5
   124bc:	andeq	r2, r1, ip, asr r5
   124c0:	andeq	r2, r1, r8, ror #10
   124c4:	andeq	r2, r1, r4, ror r5
   124c8:	andeq	r2, r1, r0, lsl #11
   124cc:	andeq	r2, r1, ip, lsl #11
   124d0:	muleq	r1, r8, r5
   124d4:	andeq	r2, r1, r4, lsr #11
   124d8:			; <UNDEFINED> instruction: 0x000125b0
   124dc:			; <UNDEFINED> instruction: 0x000125bc
   124e0:	andeq	r2, r1, r8, asr #11
   124e4:	ldrdeq	r2, [r1], -r4
   124e8:	andeq	r2, r1, r0, ror #11
   124ec:	andeq	r2, r1, ip, ror #11
   124f0:	strdeq	r2, [r1], -r8
   124f4:	andeq	r2, r1, r4, lsl #12
   124f8:	andeq	r2, r1, r0, lsl r6
   124fc:	andeq	r2, r1, ip, lsl r6
   12500:	andeq	r2, r1, r8, lsr #12
   12504:	andeq	r2, r1, r4, lsr r6
   12508:	andeq	r2, r1, r0, asr #12
   1250c:	andeq	r2, r1, ip, asr #12
   12510:	andeq	r2, r1, r8, asr r6
   12514:	andeq	r2, r1, r4, ror #12
   12518:	andeq	r2, r1, r0, ror r6
   1251c:	andeq	r2, r1, ip, ror r6
   12520:	andeq	r2, r1, r8, lsl #13
   12524:	muleq	r1, r4, r6
   12528:	andeq	r2, r1, r0, lsr #13
   1252c:	andeq	r2, r1, ip, lsr #13
   12530:			; <UNDEFINED> instruction: 0x000126b8
   12534:	andeq	r2, r1, r4, asr #13
   12538:	ldrdeq	r2, [r1], -r0
   1253c:	ldrdeq	r2, [r1], -ip
   12540:	andeq	r2, r1, r8, ror #13
   12544:	movw	r0, #18160	; 0x46f0
   12548:	movt	r0, #1
   1254c:	bx	lr
   12550:	movw	r0, #17028	; 0x4284
   12554:	movt	r0, #1
   12558:	bx	lr
   1255c:	movw	r0, #17048	; 0x4298
   12560:	movt	r0, #1
   12564:	bx	lr
   12568:	movw	r0, #17076	; 0x42b4
   1256c:	movt	r0, #1
   12570:	bx	lr
   12574:	movw	r0, #17100	; 0x42cc
   12578:	movt	r0, #1
   1257c:	bx	lr
   12580:	movw	r0, #17136	; 0x42f0
   12584:	movt	r0, #1
   12588:	bx	lr
   1258c:	movw	r0, #17168	; 0x4310
   12590:	movt	r0, #1
   12594:	bx	lr
   12598:	movw	r0, #17196	; 0x432c
   1259c:	movt	r0, #1
   125a0:	bx	lr
   125a4:	movw	r0, #17216	; 0x4340
   125a8:	movt	r0, #1
   125ac:	bx	lr
   125b0:	movw	r0, #17236	; 0x4354
   125b4:	movt	r0, #1
   125b8:	bx	lr
   125bc:	movw	r0, #17260	; 0x436c
   125c0:	movt	r0, #1
   125c4:	bx	lr
   125c8:	movw	r0, #17280	; 0x4380
   125cc:	movt	r0, #1
   125d0:	bx	lr
   125d4:	movw	r0, #17304	; 0x4398
   125d8:	movt	r0, #1
   125dc:	bx	lr
   125e0:	movw	r0, #17332	; 0x43b4
   125e4:	movt	r0, #1
   125e8:	bx	lr
   125ec:	movw	r0, #17360	; 0x43d0
   125f0:	movt	r0, #1
   125f4:	bx	lr
   125f8:	movw	r0, #17400	; 0x43f8
   125fc:	movt	r0, #1
   12600:	bx	lr
   12604:	movw	r0, #17440	; 0x4420
   12608:	movt	r0, #1
   1260c:	bx	lr
   12610:	movw	r0, #17480	; 0x4448
   12614:	movt	r0, #1
   12618:	bx	lr
   1261c:	movw	r0, #17500	; 0x445c
   12620:	movt	r0, #1
   12624:	bx	lr
   12628:	movw	r0, #17540	; 0x4484
   1262c:	movt	r0, #1
   12630:	bx	lr
   12634:	movw	r0, #17564	; 0x449c
   12638:	movt	r0, #1
   1263c:	bx	lr
   12640:	movw	r0, #17608	; 0x44c8
   12644:	movt	r0, #1
   12648:	bx	lr
   1264c:	movw	r0, #17660	; 0x44fc
   12650:	movt	r0, #1
   12654:	bx	lr
   12658:	movw	r0, #17704	; 0x4528
   1265c:	movt	r0, #1
   12660:	bx	lr
   12664:	movw	r0, #17748	; 0x4554
   12668:	movt	r0, #1
   1266c:	bx	lr
   12670:	movw	r0, #17796	; 0x4584
   12674:	movt	r0, #1
   12678:	bx	lr
   1267c:	movw	r0, #17816	; 0x4598
   12680:	movt	r0, #1
   12684:	bx	lr
   12688:	movw	r0, #17844	; 0x45b4
   1268c:	movt	r0, #1
   12690:	bx	lr
   12694:	movw	r0, #17868	; 0x45cc
   12698:	movt	r0, #1
   1269c:	bx	lr
   126a0:	movw	r0, #17908	; 0x45f4
   126a4:	movt	r0, #1
   126a8:	bx	lr
   126ac:	movw	r0, #17948	; 0x461c
   126b0:	movt	r0, #1
   126b4:	bx	lr
   126b8:	movw	r0, #17972	; 0x4634
   126bc:	movt	r0, #1
   126c0:	bx	lr
   126c4:	movw	r0, #18012	; 0x465c
   126c8:	movt	r0, #1
   126cc:	bx	lr
   126d0:	movw	r0, #18052	; 0x4684
   126d4:	movt	r0, #1
   126d8:	bx	lr
   126dc:	movw	r0, #18104	; 0x46b8
   126e0:	movt	r0, #1
   126e4:	bx	lr
   126e8:	movw	r0, #18144	; 0x46e0
   126ec:	movt	r0, #1
   126f0:	bx	lr
   126f4:	movw	r0, #17016	; 0x4278
   126f8:	movt	r0, #1
   126fc:	bx	lr
   12700:	movw	r0, #17024	; 0x4280
   12704:	movt	r0, #1
   12708:	bx	lr

0001270c <flatcc_verify_field@@Base>:
   1270c:	add	r1, r1, #2
   12710:	lsl	r1, r1, #1
   12714:	uxth	r1, r1
   12718:	ldrh	ip, [r0, #22]
   1271c:	cmp	ip, r1
   12720:	bls	1276c <flatcc_verify_field@@Base+0x60>
   12724:	ldr	ip, [r0, #12]
   12728:	ldrh	r1, [ip, r1]
   1272c:	cmp	r1, #0
   12730:	beq	12774 <flatcc_verify_field@@Base+0x68>
   12734:	add	r2, r2, r1
   12738:	ldrh	ip, [r0, #20]
   1273c:	cmp	r2, ip
   12740:	bhi	1277c <flatcc_verify_field@@Base+0x70>
   12744:	ldr	r2, [r0]
   12748:	ldr	r0, [r0, #16]
   1274c:	add	r2, r2, r0
   12750:	add	r2, r2, r1
   12754:	sub	r3, r3, #1
   12758:	and	r2, r2, r3
   1275c:	cmp	r2, #0
   12760:	moveq	r0, #0
   12764:	movne	r0, #12
   12768:	bx	lr
   1276c:	mov	r0, #0
   12770:	bx	lr
   12774:	mov	r0, #0
   12778:	bx	lr
   1277c:	mov	r0, #13
   12780:	bx	lr

00012784 <flatcc_verify_string_field@@Base>:
   12784:	str	r4, [sp, #-8]!
   12788:	str	lr, [sp, #4]
   1278c:	sub	sp, sp, #8
   12790:	mov	r4, r0
   12794:	add	r3, sp, #4
   12798:	bl	12428 <main@@Base+0x390>
   1279c:	cmp	r0, #0
   127a0:	bne	12810 <flatcc_verify_string_field@@Base+0x8c>
   127a4:	ldr	r3, [sp, #4]
   127a8:	cmp	r3, #0
   127ac:	beq	12810 <flatcc_verify_string_field@@Base+0x8c>
   127b0:	ldr	r1, [r4]
   127b4:	ldr	r2, [r1, r3]
   127b8:	add	r2, r3, r2
   127bc:	cmp	r3, r2
   127c0:	movcs	r0, #17
   127c4:	bcs	12810 <flatcc_verify_string_field@@Base+0x8c>
   127c8:	ldr	r3, [r4, #4]
   127cc:	add	ip, r2, #4
   127d0:	cmp	r3, ip
   127d4:	movcc	r0, #17
   127d8:	bcc	12810 <flatcc_verify_string_field@@Base+0x8c>
   127dc:	tst	r2, #3
   127e0:	movne	r0, #17
   127e4:	bne	12810 <flatcc_verify_string_field@@Base+0x8c>
   127e8:	ldr	r2, [r1, r2]
   127ec:	sub	r3, r3, ip
   127f0:	add	lr, r2, #1
   127f4:	cmp	r3, lr
   127f8:	movcc	r0, #8
   127fc:	bcc	12810 <flatcc_verify_string_field@@Base+0x8c>
   12800:	add	r1, r1, ip
   12804:	ldrb	r3, [r1, r2]
   12808:	cmp	r3, #0
   1280c:	movne	r0, #7
   12810:	add	sp, sp, #8
   12814:	ldr	r4, [sp]
   12818:	add	sp, sp, #4
   1281c:	pop	{pc}		; (ldr pc, [sp], #4)

00012820 <flatcc_verify_vector_field@@Base>:
   12820:	strd	r4, [sp, #-16]!
   12824:	str	r6, [sp, #8]
   12828:	str	lr, [sp, #12]
   1282c:	sub	sp, sp, #8
   12830:	mov	r6, r0
   12834:	mov	r5, r3
   12838:	ldrh	r4, [sp, #24]
   1283c:	add	r3, sp, #4
   12840:	bl	12428 <main@@Base+0x390>
   12844:	cmp	r0, #0
   12848:	bne	128c4 <flatcc_verify_vector_field@@Base+0xa4>
   1284c:	ldr	r3, [sp, #4]
   12850:	cmp	r3, #0
   12854:	beq	128c4 <flatcc_verify_vector_field@@Base+0xa4>
   12858:	ldr	r1, [r6]
   1285c:	ldr	r2, [r1, r3]
   12860:	add	r2, r3, r2
   12864:	cmp	r3, r2
   12868:	movcs	r0, #16
   1286c:	bcs	128c4 <flatcc_verify_vector_field@@Base+0xa4>
   12870:	ldr	ip, [r6, #4]
   12874:	add	r3, r2, #4
   12878:	cmp	ip, r3
   1287c:	movcc	r0, #16
   12880:	bcc	128c4 <flatcc_verify_vector_field@@Base+0xa4>
   12884:	cmp	r4, #4
   12888:	movcc	r4, #4
   1288c:	sub	r4, r4, #1
   12890:	orr	r4, r4, #3
   12894:	tst	r4, r3
   12898:	movne	r0, #16
   1289c:	bne	128c4 <flatcc_verify_vector_field@@Base+0xa4>
   128a0:	ldr	r2, [r1, r2]
   128a4:	ldr	r1, [sp, #28]
   128a8:	cmp	r1, r2
   128ac:	movcc	r0, #25
   128b0:	bcc	128c4 <flatcc_verify_vector_field@@Base+0xa4>
   128b4:	sub	r3, ip, r3
   128b8:	mul	r5, r2, r5
   128bc:	cmp	r3, r5
   128c0:	movcc	r0, #26
   128c4:	add	sp, sp, #8
   128c8:	ldrd	r4, [sp]
   128cc:	ldr	r6, [sp, #8]
   128d0:	add	sp, sp, #12
   128d4:	pop	{pc}		; (ldr pc, [sp], #4)

000128d8 <flatcc_verify_string_vector_field@@Base>:
   128d8:	strd	r4, [sp, #-20]!	; 0xffffffec
   128dc:	strd	r6, [sp, #8]
   128e0:	str	lr, [sp, #16]
   128e4:	sub	sp, sp, #12
   128e8:	mov	r4, r0
   128ec:	add	r3, sp, #4
   128f0:	bl	12428 <main@@Base+0x390>
   128f4:	cmp	r0, #0
   128f8:	bne	12a94 <flatcc_verify_string_vector_field@@Base+0x1bc>
   128fc:	ldr	r3, [sp, #4]
   12900:	cmp	r3, #0
   12904:	beq	12a94 <flatcc_verify_string_vector_field@@Base+0x1bc>
   12908:	ldr	r1, [r4]
   1290c:	ldr	r2, [r1, r3]
   12910:	add	r2, r3, r2
   12914:	cmp	r3, r2
   12918:	movcs	r0, #16
   1291c:	bcs	12a94 <flatcc_verify_string_vector_field@@Base+0x1bc>
   12920:	ldr	r4, [r4, #4]
   12924:	add	r3, r2, #4
   12928:	cmp	r4, r3
   1292c:	movcc	r0, #16
   12930:	bcc	12a94 <flatcc_verify_string_vector_field@@Base+0x1bc>
   12934:	tst	r3, #3
   12938:	bne	12a68 <flatcc_verify_string_vector_field@@Base+0x190>
   1293c:	ldr	ip, [r1, r2]
   12940:	cmn	ip, #-1073741823	; 0xc0000001
   12944:	bhi	12a68 <flatcc_verify_string_vector_field@@Base+0x190>
   12948:	lsl	r5, ip, #2
   1294c:	sub	lr, r4, r3
   12950:	cmp	lr, r5
   12954:	bcc	12a68 <flatcc_verify_string_vector_field@@Base+0x190>
   12958:	cmp	ip, #0
   1295c:	beq	12a94 <flatcc_verify_string_vector_field@@Base+0x1bc>
   12960:	ldr	r2, [r1, r3]
   12964:	add	r2, r3, r2
   12968:	cmp	r2, r3
   1296c:	movls	r0, #17
   12970:	bls	12a94 <flatcc_verify_string_vector_field@@Base+0x1bc>
   12974:	add	lr, r2, #4
   12978:	cmp	r4, lr
   1297c:	movcc	r0, #17
   12980:	bcc	12a94 <flatcc_verify_string_vector_field@@Base+0x1bc>
   12984:	tst	r2, #3
   12988:	bne	129f8 <flatcc_verify_string_vector_field@@Base+0x120>
   1298c:	ldr	r7, [r1, r2]
   12990:	sub	ip, r4, lr
   12994:	add	r6, r7, #1
   12998:	cmp	ip, r6
   1299c:	addcs	ip, r3, r5
   129a0:	bcc	129f8 <flatcc_verify_string_vector_field@@Base+0x120>
   129a4:	add	lr, r1, lr
   129a8:	ldrb	lr, [lr, r7]
   129ac:	cmp	lr, #0
   129b0:	bne	12a34 <flatcc_verify_string_vector_field@@Base+0x15c>
   129b4:	add	r3, r3, #4
   129b8:	cmp	r3, ip
   129bc:	beq	12a94 <flatcc_verify_string_vector_field@@Base+0x1bc>
   129c0:	ldr	r2, [r1, r3]
   129c4:	add	r2, r3, r2
   129c8:	cmp	r2, r3
   129cc:	bls	12a50 <flatcc_verify_string_vector_field@@Base+0x178>
   129d0:	add	lr, r2, #4
   129d4:	cmp	r4, lr
   129d8:	bcc	12a58 <flatcc_verify_string_vector_field@@Base+0x180>
   129dc:	tst	r2, #3
   129e0:	bne	129f8 <flatcc_verify_string_vector_field@@Base+0x120>
   129e4:	ldr	r7, [r1, r2]
   129e8:	sub	r5, r4, lr
   129ec:	add	r6, r7, #1
   129f0:	cmp	r5, r6
   129f4:	bcs	129a4 <flatcc_verify_string_vector_field@@Base+0xcc>
   129f8:	add	ip, r2, #4
   129fc:	tst	r2, #3
   12a00:	movne	r0, #17
   12a04:	bne	12a94 <flatcc_verify_string_vector_field@@Base+0x1bc>
   12a08:	ldr	r2, [r1, r2]
   12a0c:	sub	r3, r4, ip
   12a10:	add	lr, r2, #1
   12a14:	cmp	r3, lr
   12a18:	movcc	r0, #8
   12a1c:	bcc	12a94 <flatcc_verify_string_vector_field@@Base+0x1bc>
   12a20:	add	r1, r1, ip
   12a24:	ldrb	r3, [r1, r2]
   12a28:	cmp	r3, #0
   12a2c:	movne	r0, #7
   12a30:	b	12a94 <flatcc_verify_string_vector_field@@Base+0x1bc>
   12a34:	cmp	r3, r2
   12a38:	bcs	12a60 <flatcc_verify_string_vector_field@@Base+0x188>
   12a3c:	add	ip, r2, #4
   12a40:	cmp	r4, ip
   12a44:	bcs	129fc <flatcc_verify_string_vector_field@@Base+0x124>
   12a48:	mov	r0, #17
   12a4c:	b	12a94 <flatcc_verify_string_vector_field@@Base+0x1bc>
   12a50:	mov	r0, #17
   12a54:	b	12a94 <flatcc_verify_string_vector_field@@Base+0x1bc>
   12a58:	mov	r0, #17
   12a5c:	b	12a94 <flatcc_verify_string_vector_field@@Base+0x1bc>
   12a60:	mov	r0, #17
   12a64:	b	12a94 <flatcc_verify_string_vector_field@@Base+0x1bc>
   12a68:	tst	r3, #3
   12a6c:	movne	r0, #16
   12a70:	bne	12a94 <flatcc_verify_string_vector_field@@Base+0x1bc>
   12a74:	ldr	r2, [r1, r2]
   12a78:	cmn	r2, #-1073741823	; 0xc0000001
   12a7c:	movhi	r0, #25
   12a80:	bhi	12a94 <flatcc_verify_string_vector_field@@Base+0x1bc>
   12a84:	sub	r3, r4, r3
   12a88:	lsl	r2, r2, #2
   12a8c:	cmp	r3, r2
   12a90:	movcc	r0, #26
   12a94:	add	sp, sp, #12
   12a98:	ldrd	r4, [sp]
   12a9c:	ldrd	r6, [sp, #8]
   12aa0:	add	sp, sp, #16
   12aa4:	pop	{pc}		; (ldr pc, [sp], #4)

00012aa8 <flatcc_verify_table_field@@Base>:
   12aa8:	strd	r4, [sp, #-12]!
   12aac:	str	lr, [sp, #8]
   12ab0:	sub	sp, sp, #36	; 0x24
   12ab4:	mov	r4, r0
   12ab8:	mov	r5, r3
   12abc:	add	r3, sp, #28
   12ac0:	bl	12428 <main@@Base+0x390>
   12ac4:	cmp	r0, #0
   12ac8:	bne	12ad8 <flatcc_verify_table_field@@Base+0x30>
   12acc:	ldr	r3, [sp, #28]
   12ad0:	cmp	r3, #0
   12ad4:	bne	12ae8 <flatcc_verify_table_field@@Base+0x40>
   12ad8:	add	sp, sp, #36	; 0x24
   12adc:	ldrd	r4, [sp]
   12ae0:	add	sp, sp, #8
   12ae4:	pop	{pc}		; (ldr pc, [sp], #4)
   12ae8:	ldr	r0, [r4]
   12aec:	ldr	ip, [r4, #4]
   12af0:	ldr	r1, [r0, r3]
   12af4:	ldr	r2, [r4, #8]
   12af8:	sub	r2, r2, #1
   12afc:	str	r2, [sp, #12]
   12b00:	cmp	r2, #0
   12b04:	moveq	r0, #3
   12b08:	beq	12ad8 <flatcc_verify_table_field@@Base+0x30>
   12b0c:	add	r2, r3, r1
   12b10:	cmp	r3, r2
   12b14:	movcs	r0, #15
   12b18:	bcs	12ad8 <flatcc_verify_table_field@@Base+0x30>
   12b1c:	add	r3, r2, #4
   12b20:	cmp	ip, r3
   12b24:	movcc	r0, #15
   12b28:	bcc	12ad8 <flatcc_verify_table_field@@Base+0x30>
   12b2c:	tst	r2, #3
   12b30:	movne	r0, #15
   12b34:	bne	12ad8 <flatcc_verify_table_field@@Base+0x30>
   12b38:	str	r2, [sp, #20]
   12b3c:	ldr	r3, [r0, r2]
   12b40:	subs	r3, r2, r3
   12b44:	movmi	r0, #29
   12b48:	bmi	12ad8 <flatcc_verify_table_field@@Base+0x30>
   12b4c:	tst	r3, #1
   12b50:	movne	r0, #29
   12b54:	bne	12ad8 <flatcc_verify_table_field@@Base+0x30>
   12b58:	add	lr, r3, #2
   12b5c:	cmp	ip, lr
   12b60:	movcc	r0, #27
   12b64:	bcc	12ad8 <flatcc_verify_table_field@@Base+0x30>
   12b68:	add	r4, r0, r3
   12b6c:	ldrh	r1, [r0, r3]
   12b70:	strh	r1, [sp, #26]
   12b74:	add	r3, r1, r3
   12b78:	cmp	ip, r3
   12b7c:	movcc	r0, #30
   12b80:	bcc	12ad8 <flatcc_verify_table_field@@Base+0x30>
   12b84:	tst	r1, #1
   12b88:	movne	r0, #30
   12b8c:	bne	12ad8 <flatcc_verify_table_field@@Base+0x30>
   12b90:	cmp	r1, #3
   12b94:	movls	r0, #28
   12b98:	bls	12ad8 <flatcc_verify_table_field@@Base+0x30>
   12b9c:	ldrh	r3, [r0, lr]
   12ba0:	strh	r3, [sp, #24]
   12ba4:	sub	r2, ip, r2
   12ba8:	cmp	r2, r3
   12bac:	movcc	r0, #20
   12bb0:	bcc	12ad8 <flatcc_verify_table_field@@Base+0x30>
   12bb4:	str	r4, [sp, #16]
   12bb8:	str	r0, [sp, #4]
   12bbc:	str	ip, [sp, #8]
   12bc0:	add	r0, sp, #4
   12bc4:	blx	r5
   12bc8:	b	12ad8 <flatcc_verify_table_field@@Base+0x30>

00012bcc <flatcc_verify_table_vector_field@@Base>:
   12bcc:	strd	r4, [sp, #-36]!	; 0xffffffdc
   12bd0:	strd	r6, [sp, #8]
   12bd4:	strd	r8, [sp, #16]
   12bd8:	strd	sl, [sp, #24]
   12bdc:	str	lr, [sp, #32]
   12be0:	sub	sp, sp, #36	; 0x24
   12be4:	mov	r4, r0
   12be8:	mov	r5, r3
   12bec:	add	r3, sp, #28
   12bf0:	bl	12428 <main@@Base+0x390>
   12bf4:	cmp	r0, #0
   12bf8:	bne	12c08 <flatcc_verify_table_vector_field@@Base+0x3c>
   12bfc:	ldr	r3, [sp, #28]
   12c00:	cmp	r3, #0
   12c04:	bne	12c24 <flatcc_verify_table_vector_field@@Base+0x58>
   12c08:	add	sp, sp, #36	; 0x24
   12c0c:	ldrd	r4, [sp]
   12c10:	ldrd	r6, [sp, #8]
   12c14:	ldrd	r8, [sp, #16]
   12c18:	ldrd	sl, [sp, #24]
   12c1c:	add	sp, sp, #32
   12c20:	pop	{pc}		; (ldr pc, [sp], #4)
   12c24:	ldr	r7, [r4]
   12c28:	ldr	r2, [r7, r3]
   12c2c:	ldr	r6, [r4, #8]
   12c30:	cmp	r6, #0
   12c34:	movle	r0, #3
   12c38:	ble	12c08 <flatcc_verify_table_vector_field@@Base+0x3c>
   12c3c:	add	r2, r3, r2
   12c40:	cmp	r3, r2
   12c44:	movcs	r0, #16
   12c48:	bcs	12c08 <flatcc_verify_table_vector_field@@Base+0x3c>
   12c4c:	ldr	r8, [r4, #4]
   12c50:	add	r4, r2, #4
   12c54:	cmp	r8, r4
   12c58:	movcc	r0, #16
   12c5c:	bcc	12c08 <flatcc_verify_table_vector_field@@Base+0x3c>
   12c60:	tst	r4, #3
   12c64:	bne	12e60 <flatcc_verify_table_vector_field@@Base+0x294>
   12c68:	ldr	r3, [r7, r2]
   12c6c:	cmn	r3, #-1073741823	; 0xc0000001
   12c70:	bhi	12e60 <flatcc_verify_table_vector_field@@Base+0x294>
   12c74:	lsl	sl, r3, #2
   12c78:	sub	r1, r8, r4
   12c7c:	cmp	r1, sl
   12c80:	bcc	12e60 <flatcc_verify_table_vector_field@@Base+0x294>
   12c84:	cmp	r3, #0
   12c88:	addne	r9, r7, r4
   12c8c:	addne	sl, r4, sl
   12c90:	subne	r6, r6, #2
   12c94:	bne	12ce8 <flatcc_verify_table_vector_field@@Base+0x11c>
   12c98:	b	12c08 <flatcc_verify_table_vector_field@@Base+0x3c>
   12c9c:	ldr	r3, [r7, r2]
   12ca0:	cmn	r3, #-1073741823	; 0xc0000001
   12ca4:	movhi	r0, #25
   12ca8:	bhi	12c08 <flatcc_verify_table_vector_field@@Base+0x3c>
   12cac:	sub	r4, r8, r4
   12cb0:	lsl	r3, r3, #2
   12cb4:	cmp	r4, r3
   12cb8:	movcc	r0, #26
   12cbc:	b	12c08 <flatcc_verify_table_vector_field@@Base+0x3c>
   12cc0:	str	r2, [sp, #16]
   12cc4:	str	r7, [sp, #4]
   12cc8:	str	r8, [sp, #8]
   12ccc:	add	r0, sp, #4
   12cd0:	blx	r5
   12cd4:	cmp	r0, #0
   12cd8:	bne	12e4c <flatcc_verify_table_vector_field@@Base+0x280>
   12cdc:	add	r4, r4, #4
   12ce0:	cmp	r4, sl
   12ce4:	beq	12c08 <flatcc_verify_table_vector_field@@Base+0x3c>
   12ce8:	mov	fp, r9
   12cec:	ldr	r3, [r9], #4
   12cf0:	str	r6, [sp, #12]
   12cf4:	cmp	r6, #0
   12cf8:	beq	12d7c <flatcc_verify_table_vector_field@@Base+0x1b0>
   12cfc:	add	r3, r3, r4
   12d00:	cmp	r4, r3
   12d04:	bcs	12d7c <flatcc_verify_table_vector_field@@Base+0x1b0>
   12d08:	add	r2, r3, #4
   12d0c:	cmp	r8, r2
   12d10:	bcc	12d7c <flatcc_verify_table_vector_field@@Base+0x1b0>
   12d14:	tst	r3, #3
   12d18:	bne	12d7c <flatcc_verify_table_vector_field@@Base+0x1b0>
   12d1c:	str	r3, [sp, #20]
   12d20:	ldr	r1, [r7, r3]
   12d24:	subs	r1, r3, r1
   12d28:	bmi	12d7c <flatcc_verify_table_vector_field@@Base+0x1b0>
   12d2c:	tst	r1, #1
   12d30:	bne	12d7c <flatcc_verify_table_vector_field@@Base+0x1b0>
   12d34:	add	ip, r1, #2
   12d38:	cmp	r8, ip
   12d3c:	bcc	12d7c <flatcc_verify_table_vector_field@@Base+0x1b0>
   12d40:	add	r2, r7, r1
   12d44:	ldrh	r0, [r7, r1]
   12d48:	strh	r0, [sp, #26]
   12d4c:	add	r1, r0, r1
   12d50:	cmp	r8, r1
   12d54:	bcc	12d7c <flatcc_verify_table_vector_field@@Base+0x1b0>
   12d58:	tst	r0, #1
   12d5c:	bne	12d7c <flatcc_verify_table_vector_field@@Base+0x1b0>
   12d60:	cmp	r0, #3
   12d64:	bls	12d7c <flatcc_verify_table_vector_field@@Base+0x1b0>
   12d68:	ldrh	r1, [r7, ip]
   12d6c:	strh	r1, [sp, #24]
   12d70:	sub	r3, r8, r3
   12d74:	cmp	r3, r1
   12d78:	bcs	12cc0 <flatcc_verify_table_vector_field@@Base+0xf4>
   12d7c:	ldr	r3, [fp]
   12d80:	str	r6, [sp, #12]
   12d84:	cmp	r6, #0
   12d88:	beq	12e58 <flatcc_verify_table_vector_field@@Base+0x28c>
   12d8c:	add	r3, r4, r3
   12d90:	cmp	r4, r3
   12d94:	movcs	r0, #15
   12d98:	bcs	12c08 <flatcc_verify_table_vector_field@@Base+0x3c>
   12d9c:	add	r2, r3, #4
   12da0:	cmp	r8, r2
   12da4:	movcc	r0, #15
   12da8:	bcc	12c08 <flatcc_verify_table_vector_field@@Base+0x3c>
   12dac:	tst	r3, #3
   12db0:	movne	r0, #15
   12db4:	bne	12c08 <flatcc_verify_table_vector_field@@Base+0x3c>
   12db8:	str	r3, [sp, #20]
   12dbc:	ldr	r2, [r7, r3]
   12dc0:	subs	r2, r3, r2
   12dc4:	movmi	r0, #29
   12dc8:	bmi	12c08 <flatcc_verify_table_vector_field@@Base+0x3c>
   12dcc:	tst	r2, #1
   12dd0:	movne	r0, #29
   12dd4:	bne	12c08 <flatcc_verify_table_vector_field@@Base+0x3c>
   12dd8:	add	r0, r2, #2
   12ddc:	cmp	r8, r0
   12de0:	movcc	r0, #27
   12de4:	bcc	12c08 <flatcc_verify_table_vector_field@@Base+0x3c>
   12de8:	add	ip, r7, r2
   12dec:	ldrh	r1, [r7, r2]
   12df0:	strh	r1, [sp, #26]
   12df4:	add	r2, r1, r2
   12df8:	cmp	r8, r2
   12dfc:	movcc	r0, #30
   12e00:	bcc	12c08 <flatcc_verify_table_vector_field@@Base+0x3c>
   12e04:	tst	r1, #1
   12e08:	movne	r0, #30
   12e0c:	bne	12c08 <flatcc_verify_table_vector_field@@Base+0x3c>
   12e10:	cmp	r1, #3
   12e14:	movls	r0, #28
   12e18:	bls	12c08 <flatcc_verify_table_vector_field@@Base+0x3c>
   12e1c:	ldrh	r2, [r7, r0]
   12e20:	strh	r2, [sp, #24]
   12e24:	sub	r3, r8, r3
   12e28:	cmp	r3, r2
   12e2c:	movcc	r0, #20
   12e30:	bcc	12c08 <flatcc_verify_table_vector_field@@Base+0x3c>
   12e34:	str	ip, [sp, #16]
   12e38:	str	r7, [sp, #4]
   12e3c:	str	r8, [sp, #8]
   12e40:	add	r0, sp, #4
   12e44:	blx	r5
   12e48:	b	12c08 <flatcc_verify_table_vector_field@@Base+0x3c>
   12e4c:	ldr	r3, [fp]
   12e50:	str	r6, [sp, #12]
   12e54:	b	12d8c <flatcc_verify_table_vector_field@@Base+0x1c0>
   12e58:	mov	r0, #3
   12e5c:	b	12c08 <flatcc_verify_table_vector_field@@Base+0x3c>
   12e60:	tst	r4, #3
   12e64:	beq	12c9c <flatcc_verify_table_vector_field@@Base+0xd0>
   12e68:	mov	r0, #16
   12e6c:	b	12c08 <flatcc_verify_table_vector_field@@Base+0x3c>

00012e70 <flatcc_verify_union_table@@Base>:
   12e70:	strd	r4, [sp, #-12]!
   12e74:	str	lr, [sp, #8]
   12e78:	sub	sp, sp, #28
   12e7c:	ldr	r4, [r0]
   12e80:	ldr	lr, [r0, #4]
   12e84:	ldr	ip, [r0, #16]
   12e88:	ldr	r2, [r0, #20]
   12e8c:	ldr	r3, [r0, #8]
   12e90:	sub	r3, r3, #1
   12e94:	str	r3, [sp, #8]
   12e98:	cmp	r3, #0
   12e9c:	moveq	r0, #3
   12ea0:	beq	12f60 <flatcc_verify_union_table@@Base+0xf0>
   12ea4:	add	r3, ip, r2
   12ea8:	cmp	ip, r3
   12eac:	movcs	r0, #15
   12eb0:	bcs	12f60 <flatcc_verify_union_table@@Base+0xf0>
   12eb4:	add	r2, r3, #4
   12eb8:	cmp	lr, r2
   12ebc:	movcc	r0, #15
   12ec0:	bcc	12f60 <flatcc_verify_union_table@@Base+0xf0>
   12ec4:	tst	r3, #3
   12ec8:	movne	r0, #15
   12ecc:	bne	12f60 <flatcc_verify_union_table@@Base+0xf0>
   12ed0:	str	r3, [sp, #16]
   12ed4:	ldr	r2, [r4, r3]
   12ed8:	subs	r2, r3, r2
   12edc:	movmi	r0, #29
   12ee0:	bmi	12f60 <flatcc_verify_union_table@@Base+0xf0>
   12ee4:	tst	r2, #1
   12ee8:	movne	r0, #29
   12eec:	bne	12f60 <flatcc_verify_union_table@@Base+0xf0>
   12ef0:	add	ip, r2, #2
   12ef4:	cmp	lr, ip
   12ef8:	movcc	r0, #27
   12efc:	bcc	12f60 <flatcc_verify_union_table@@Base+0xf0>
   12f00:	add	r5, r4, r2
   12f04:	ldrh	r0, [r4, r2]
   12f08:	strh	r0, [sp, #22]
   12f0c:	add	r2, r0, r2
   12f10:	cmp	lr, r2
   12f14:	movcc	r0, #30
   12f18:	bcc	12f60 <flatcc_verify_union_table@@Base+0xf0>
   12f1c:	tst	r0, #1
   12f20:	movne	r0, #30
   12f24:	bne	12f60 <flatcc_verify_union_table@@Base+0xf0>
   12f28:	cmp	r0, #3
   12f2c:	movls	r0, #28
   12f30:	bls	12f60 <flatcc_verify_union_table@@Base+0xf0>
   12f34:	ldrh	r2, [r4, ip]
   12f38:	strh	r2, [sp, #20]
   12f3c:	sub	r3, lr, r3
   12f40:	cmp	r3, r2
   12f44:	movcc	r0, #20
   12f48:	bcc	12f60 <flatcc_verify_union_table@@Base+0xf0>
   12f4c:	str	r5, [sp, #12]
   12f50:	str	r4, [sp]
   12f54:	str	lr, [sp, #4]
   12f58:	mov	r0, sp
   12f5c:	blx	r1
   12f60:	add	sp, sp, #28
   12f64:	ldrd	r4, [sp]
   12f68:	add	sp, sp, #8
   12f6c:	pop	{pc}		; (ldr pc, [sp], #4)

00012f70 <flatcc_verify_union_struct@@Base>:
   12f70:	ldr	ip, [r0, #4]
   12f74:	ldr	r3, [r0, #16]
   12f78:	ldr	r0, [r0, #20]
   12f7c:	cmp	r0, #0
   12f80:	beq	12fb8 <flatcc_verify_union_struct@@Base+0x48>
   12f84:	add	r3, r3, r0
   12f88:	cmp	ip, r3
   12f8c:	bcc	12fc0 <flatcc_verify_union_struct@@Base+0x50>
   12f90:	adds	r1, r1, r3
   12f94:	bcs	12fc8 <flatcc_verify_union_struct@@Base+0x58>
   12f98:	cmp	ip, r1
   12f9c:	bcc	12fd0 <flatcc_verify_union_struct@@Base+0x60>
   12fa0:	sub	r2, r2, #1
   12fa4:	and	r3, r3, r2
   12fa8:	cmp	r3, #0
   12fac:	moveq	r0, #0
   12fb0:	movne	r0, #11
   12fb4:	bx	lr
   12fb8:	mov	r0, #18
   12fbc:	bx	lr
   12fc0:	mov	r0, #18
   12fc4:	bx	lr
   12fc8:	mov	r0, #10
   12fcc:	bx	lr
   12fd0:	mov	r0, #9
   12fd4:	bx	lr

00012fd8 <flatcc_verify_union_string@@Base>:
   12fd8:	ldr	r2, [r0, #16]
   12fdc:	ldr	r3, [r0, #20]
   12fe0:	add	r3, r2, r3
   12fe4:	cmp	r2, r3
   12fe8:	bcs	13034 <flatcc_verify_union_string@@Base+0x5c>
   12fec:	ldr	r2, [r0, #4]
   12ff0:	add	r1, r3, #4
   12ff4:	cmp	r2, r1
   12ff8:	bcc	1303c <flatcc_verify_union_string@@Base+0x64>
   12ffc:	tst	r3, #3
   13000:	bne	13044 <flatcc_verify_union_string@@Base+0x6c>
   13004:	ldr	r0, [r0]
   13008:	ldr	r3, [r0, r3]
   1300c:	sub	r2, r2, r1
   13010:	add	ip, r3, #1
   13014:	cmp	r2, ip
   13018:	bcc	1304c <flatcc_verify_union_string@@Base+0x74>
   1301c:	add	r1, r0, r1
   13020:	ldrb	r3, [r1, r3]
   13024:	cmp	r3, #0
   13028:	moveq	r0, #0
   1302c:	movne	r0, #7
   13030:	bx	lr
   13034:	mov	r0, #17
   13038:	bx	lr
   1303c:	mov	r0, #17
   13040:	bx	lr
   13044:	mov	r0, #17
   13048:	bx	lr
   1304c:	mov	r0, #8
   13050:	bx	lr

00013054 <flatcc_verify_buffer_header@@Base>:
   13054:	tst	r0, #3
   13058:	bne	130c8 <flatcc_verify_buffer_header@@Base+0x74>
   1305c:	cmn	r1, #9
   13060:	bhi	130d0 <flatcc_verify_buffer_header@@Base+0x7c>
   13064:	cmp	r1, #7
   13068:	bls	130d8 <flatcc_verify_buffer_header@@Base+0x84>
   1306c:	cmp	r2, #0
   13070:	beq	130e0 <flatcc_verify_buffer_header@@Base+0x8c>
   13074:	str	r4, [sp, #-8]!
   13078:	str	lr, [sp, #4]
   1307c:	sub	sp, sp, #8
   13080:	mov	r1, r2
   13084:	mov	r4, r0
   13088:	mov	r2, #4
   1308c:	add	r0, sp, r2
   13090:	bl	10d78 <strncpy@plt>
   13094:	ldr	r3, [sp, #4]
   13098:	ldr	r2, [r4, #4]
   1309c:	cmp	r3, #0
   130a0:	cmpne	r2, r3
   130a4:	moveq	r3, #1
   130a8:	movne	r3, #0
   130ac:	cmp	r3, #0
   130b0:	movne	r0, #0
   130b4:	moveq	r0, #2
   130b8:	add	sp, sp, #8
   130bc:	ldr	r4, [sp]
   130c0:	add	sp, sp, #4
   130c4:	pop	{pc}		; (ldr pc, [sp], #4)
   130c8:	mov	r0, #5
   130cc:	bx	lr
   130d0:	mov	r0, #6
   130d4:	bx	lr
   130d8:	mov	r0, #1
   130dc:	bx	lr
   130e0:	mov	r0, #0
   130e4:	bx	lr

000130e8 <flatcc_verify_typed_buffer_header@@Base>:
   130e8:	tst	r0, #3
   130ec:	bne	1311c <flatcc_verify_typed_buffer_header@@Base+0x34>
   130f0:	cmn	r1, #9
   130f4:	bhi	13124 <flatcc_verify_typed_buffer_header@@Base+0x3c>
   130f8:	cmp	r1, #7
   130fc:	bls	1312c <flatcc_verify_typed_buffer_header@@Base+0x44>
   13100:	cmp	r2, #0
   13104:	beq	13134 <flatcc_verify_typed_buffer_header@@Base+0x4c>
   13108:	ldr	r0, [r0, #4]
   1310c:	cmp	r2, r0
   13110:	movne	r0, #2
   13114:	moveq	r0, #0
   13118:	bx	lr
   1311c:	mov	r0, #5
   13120:	bx	lr
   13124:	mov	r0, #6
   13128:	bx	lr
   1312c:	mov	r0, #1
   13130:	bx	lr
   13134:	mov	r0, #0
   13138:	bx	lr

0001313c <flatcc_verify_struct_as_root@@Base>:
   1313c:	strd	r4, [sp, #-24]!	; 0xffffffe8
   13140:	strd	r6, [sp, #8]
   13144:	str	r8, [sp, #16]
   13148:	str	lr, [sp, #20]
   1314c:	mov	r6, r0
   13150:	mov	r5, r1
   13154:	mov	r7, r2
   13158:	mov	r4, r3
   1315c:	bl	13054 <flatcc_verify_buffer_header@@Base>
   13160:	cmp	r0, #0
   13164:	bne	131c8 <flatcc_verify_struct_as_root@@Base+0x8c>
   13168:	ldr	r2, [r6]
   1316c:	clz	r3, r2
   13170:	lsr	r3, r3, #5
   13174:	cmp	r5, r2
   13178:	orrcc	r3, r3, #1
   1317c:	cmp	r3, #0
   13180:	movne	r0, #18
   13184:	bne	131b4 <flatcc_verify_struct_as_root@@Base+0x78>
   13188:	adds	r4, r4, r2
   1318c:	movcs	r0, #10
   13190:	bcs	131b4 <flatcc_verify_struct_as_root@@Base+0x78>
   13194:	cmp	r5, r4
   13198:	movcc	r0, #9
   1319c:	bcc	131b4 <flatcc_verify_struct_as_root@@Base+0x78>
   131a0:	ldrh	r3, [sp, #24]
   131a4:	sub	r3, r3, #1
   131a8:	and	r2, r2, r3
   131ac:	cmp	r2, #0
   131b0:	movne	r0, #11
   131b4:	ldrd	r4, [sp]
   131b8:	ldrd	r6, [sp, #8]
   131bc:	ldr	r8, [sp, #16]
   131c0:	add	sp, sp, #20
   131c4:	pop	{pc}		; (ldr pc, [sp], #4)
   131c8:	mov	r2, r7
   131cc:	mov	r1, r5
   131d0:	mov	r0, r6
   131d4:	bl	13054 <flatcc_verify_buffer_header@@Base>
   131d8:	b	131b4 <flatcc_verify_struct_as_root@@Base+0x78>

000131dc <flatcc_verify_struct_as_typed_root@@Base>:
   131dc:	strd	r4, [sp, #-16]!
   131e0:	str	r6, [sp, #8]
   131e4:	str	lr, [sp, #12]
   131e8:	mov	r6, r0
   131ec:	mov	r5, r1
   131f0:	mov	r4, r3
   131f4:	bl	130e8 <flatcc_verify_typed_buffer_header@@Base>
   131f8:	cmp	r0, #0
   131fc:	bne	1324c <flatcc_verify_struct_as_typed_root@@Base+0x70>
   13200:	ldr	r2, [r6]
   13204:	clz	r3, r2
   13208:	lsr	r3, r3, #5
   1320c:	cmp	r5, r2
   13210:	orrcc	r3, r3, #1
   13214:	cmp	r3, #0
   13218:	movne	r0, #18
   1321c:	bne	1324c <flatcc_verify_struct_as_typed_root@@Base+0x70>
   13220:	adds	r4, r4, r2
   13224:	movcs	r0, #10
   13228:	bcs	1324c <flatcc_verify_struct_as_typed_root@@Base+0x70>
   1322c:	cmp	r5, r4
   13230:	movcc	r0, #9
   13234:	bcc	1324c <flatcc_verify_struct_as_typed_root@@Base+0x70>
   13238:	ldrh	r3, [sp, #16]
   1323c:	sub	r3, r3, #1
   13240:	and	r2, r2, r3
   13244:	cmp	r2, #0
   13248:	movne	r0, #11
   1324c:	ldrd	r4, [sp]
   13250:	ldr	r6, [sp, #8]
   13254:	add	sp, sp, #12
   13258:	pop	{pc}		; (ldr pc, [sp], #4)

0001325c <flatcc_verify_table_as_root@@Base>:
   1325c:	strd	r4, [sp, #-20]!	; 0xffffffec
   13260:	strd	r6, [sp, #8]
   13264:	str	lr, [sp, #16]
   13268:	sub	sp, sp, #28
   1326c:	mov	r4, r0
   13270:	mov	r5, r1
   13274:	mov	r6, r2
   13278:	mov	r7, r3
   1327c:	bl	13054 <flatcc_verify_buffer_header@@Base>
   13280:	cmp	r0, #0
   13284:	bne	13350 <flatcc_verify_table_as_root@@Base+0xf4>
   13288:	ldr	r3, [r4]
   1328c:	mov	r2, #99	; 0x63
   13290:	str	r2, [sp, #8]
   13294:	cmp	r3, #0
   13298:	moveq	r0, #15
   1329c:	beq	13360 <flatcc_verify_table_as_root@@Base+0x104>
   132a0:	add	r2, r3, #4
   132a4:	cmp	r5, r2
   132a8:	movcc	r0, #15
   132ac:	bcc	13360 <flatcc_verify_table_as_root@@Base+0x104>
   132b0:	tst	r3, #3
   132b4:	movne	r0, #15
   132b8:	bne	13360 <flatcc_verify_table_as_root@@Base+0x104>
   132bc:	str	r3, [sp, #16]
   132c0:	ldr	r2, [r4, r3]
   132c4:	subs	r2, r3, r2
   132c8:	movmi	r0, #29
   132cc:	bmi	13360 <flatcc_verify_table_as_root@@Base+0x104>
   132d0:	tst	r2, #1
   132d4:	movne	r0, #29
   132d8:	bne	13360 <flatcc_verify_table_as_root@@Base+0x104>
   132dc:	add	r0, r2, #2
   132e0:	cmp	r5, r0
   132e4:	movcc	r0, #27
   132e8:	bcc	13360 <flatcc_verify_table_as_root@@Base+0x104>
   132ec:	add	ip, r4, r2
   132f0:	ldrh	r1, [r4, r2]
   132f4:	strh	r1, [sp, #22]
   132f8:	add	r2, r1, r2
   132fc:	cmp	r5, r2
   13300:	movcc	r0, #30
   13304:	bcc	13360 <flatcc_verify_table_as_root@@Base+0x104>
   13308:	tst	r1, #1
   1330c:	movne	r0, #30
   13310:	bne	13360 <flatcc_verify_table_as_root@@Base+0x104>
   13314:	cmp	r1, #3
   13318:	movls	r0, #28
   1331c:	bls	13360 <flatcc_verify_table_as_root@@Base+0x104>
   13320:	ldrh	r2, [r4, r0]
   13324:	strh	r2, [sp, #20]
   13328:	sub	r3, r5, r3
   1332c:	cmp	r3, r2
   13330:	movcc	r0, #20
   13334:	bcc	13360 <flatcc_verify_table_as_root@@Base+0x104>
   13338:	str	ip, [sp, #12]
   1333c:	str	r4, [sp]
   13340:	str	r5, [sp, #4]
   13344:	mov	r0, sp
   13348:	blx	r7
   1334c:	b	13360 <flatcc_verify_table_as_root@@Base+0x104>
   13350:	mov	r2, r6
   13354:	mov	r1, r5
   13358:	mov	r0, r4
   1335c:	bl	13054 <flatcc_verify_buffer_header@@Base>
   13360:	add	sp, sp, #28
   13364:	ldrd	r4, [sp]
   13368:	ldrd	r6, [sp, #8]
   1336c:	add	sp, sp, #16
   13370:	pop	{pc}		; (ldr pc, [sp], #4)

00013374 <flatcc_verify_table_as_typed_root@@Base>:
   13374:	strd	r4, [sp, #-16]!
   13378:	str	r6, [sp, #8]
   1337c:	str	lr, [sp, #12]
   13380:	sub	sp, sp, #24
   13384:	mov	r4, r0
   13388:	mov	r5, r1
   1338c:	mov	r6, r3
   13390:	bl	130e8 <flatcc_verify_typed_buffer_header@@Base>
   13394:	cmp	r0, #0
   13398:	beq	133b0 <flatcc_verify_table_as_typed_root@@Base+0x3c>
   1339c:	add	sp, sp, #24
   133a0:	ldrd	r4, [sp]
   133a4:	ldr	r6, [sp, #8]
   133a8:	add	sp, sp, #12
   133ac:	pop	{pc}		; (ldr pc, [sp], #4)
   133b0:	ldr	r3, [r4]
   133b4:	mov	r2, #99	; 0x63
   133b8:	str	r2, [sp, #8]
   133bc:	cmp	r3, #0
   133c0:	moveq	r0, #15
   133c4:	beq	1339c <flatcc_verify_table_as_typed_root@@Base+0x28>
   133c8:	add	r2, r3, #4
   133cc:	cmp	r5, r2
   133d0:	movcc	r0, #15
   133d4:	bcc	1339c <flatcc_verify_table_as_typed_root@@Base+0x28>
   133d8:	tst	r3, #3
   133dc:	movne	r0, #15
   133e0:	bne	1339c <flatcc_verify_table_as_typed_root@@Base+0x28>
   133e4:	str	r3, [sp, #16]
   133e8:	ldr	r2, [r4, r3]
   133ec:	subs	r2, r3, r2
   133f0:	movmi	r0, #29
   133f4:	bmi	1339c <flatcc_verify_table_as_typed_root@@Base+0x28>
   133f8:	tst	r2, #1
   133fc:	movne	r0, #29
   13400:	bne	1339c <flatcc_verify_table_as_typed_root@@Base+0x28>
   13404:	add	r0, r2, #2
   13408:	cmp	r5, r0
   1340c:	movcc	r0, #27
   13410:	bcc	1339c <flatcc_verify_table_as_typed_root@@Base+0x28>
   13414:	add	ip, r4, r2
   13418:	ldrh	r1, [r4, r2]
   1341c:	strh	r1, [sp, #22]
   13420:	add	r2, r1, r2
   13424:	cmp	r5, r2
   13428:	movcc	r0, #30
   1342c:	bcc	1339c <flatcc_verify_table_as_typed_root@@Base+0x28>
   13430:	tst	r1, #1
   13434:	movne	r0, #30
   13438:	bne	1339c <flatcc_verify_table_as_typed_root@@Base+0x28>
   1343c:	cmp	r1, #3
   13440:	movls	r0, #28
   13444:	bls	1339c <flatcc_verify_table_as_typed_root@@Base+0x28>
   13448:	ldrh	r2, [r4, r0]
   1344c:	strh	r2, [sp, #20]
   13450:	sub	r3, r5, r3
   13454:	cmp	r3, r2
   13458:	movcc	r0, #20
   1345c:	bcc	1339c <flatcc_verify_table_as_typed_root@@Base+0x28>
   13460:	str	ip, [sp, #12]
   13464:	str	r4, [sp]
   13468:	str	r5, [sp, #4]
   1346c:	mov	r0, sp
   13470:	blx	r6
   13474:	b	1339c <flatcc_verify_table_as_typed_root@@Base+0x28>

00013478 <flatcc_verify_struct_as_nested_root@@Base>:
   13478:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1347c:	strd	r6, [sp, #8]
   13480:	str	r8, [sp, #16]
   13484:	str	lr, [sp, #20]
   13488:	sub	sp, sp, #8
   1348c:	mov	r5, r0
   13490:	mov	r4, r1
   13494:	mov	r8, r2
   13498:	mov	r7, r3
   1349c:	ldrh	r6, [sp, #36]	; 0x24
   134a0:	mvn	r3, #0
   134a4:	str	r3, [sp, #4]
   134a8:	mov	r3, #1
   134ac:	str	r3, [sp]
   134b0:	mov	r3, r6
   134b4:	bl	12820 <flatcc_verify_vector_field@@Base>
   134b8:	cmp	r0, #0
   134bc:	bne	13534 <flatcc_verify_struct_as_nested_root@@Base+0xbc>
   134c0:	add	r1, r4, #2
   134c4:	lsl	r1, r1, #1
   134c8:	uxth	r1, r1
   134cc:	ldrh	r3, [r5, #22]
   134d0:	cmp	r3, r1
   134d4:	bls	1351c <flatcc_verify_struct_as_nested_root@@Base+0xa4>
   134d8:	ldr	r3, [r5, #12]
   134dc:	ldrh	r3, [r3, r1]
   134e0:	cmp	r3, #0
   134e4:	beq	1351c <flatcc_verify_struct_as_nested_root@@Base+0xa4>
   134e8:	ldr	r2, [r5, #16]
   134ec:	add	r3, r3, r2
   134f0:	ldr	r2, [r5]
   134f4:	adds	r1, r2, r3
   134f8:	beq	1351c <flatcc_verify_struct_as_nested_root@@Base+0xa4>
   134fc:	ldr	r3, [r2, r3]
   13500:	add	r0, r1, r3
   13504:	ldr	r1, [r1, r3]
   13508:	str	r6, [sp]
   1350c:	ldr	r3, [sp, #32]
   13510:	mov	r2, r7
   13514:	add	r0, r0, #4
   13518:	bl	1313c <flatcc_verify_struct_as_root@@Base>
   1351c:	add	sp, sp, #8
   13520:	ldrd	r4, [sp]
   13524:	ldrd	r6, [sp, #8]
   13528:	ldr	r8, [sp, #16]
   1352c:	add	sp, sp, #20
   13530:	pop	{pc}		; (ldr pc, [sp], #4)
   13534:	mvn	r3, #0
   13538:	str	r3, [sp, #4]
   1353c:	mov	r3, #1
   13540:	str	r3, [sp]
   13544:	mov	r3, r6
   13548:	mov	r2, r8
   1354c:	mov	r1, r4
   13550:	mov	r0, r5
   13554:	bl	12820 <flatcc_verify_vector_field@@Base>
   13558:	b	1351c <flatcc_verify_struct_as_nested_root@@Base+0xa4>

0001355c <flatcc_verify_table_as_nested_root@@Base>:
   1355c:	strd	r4, [sp, #-24]!	; 0xffffffe8
   13560:	strd	r6, [sp, #8]
   13564:	str	r8, [sp, #16]
   13568:	str	lr, [sp, #20]
   1356c:	sub	sp, sp, #32
   13570:	mov	r5, r0
   13574:	mov	r4, r1
   13578:	mov	r8, r2
   1357c:	mov	r6, r3
   13580:	ldrh	r7, [sp, #56]	; 0x38
   13584:	mvn	r3, #0
   13588:	str	r3, [sp, #4]
   1358c:	mov	r3, #1
   13590:	str	r3, [sp]
   13594:	mov	r3, r7
   13598:	bl	12820 <flatcc_verify_vector_field@@Base>
   1359c:	cmp	r0, #0
   135a0:	bne	136e4 <flatcc_verify_table_as_nested_root@@Base+0x188>
   135a4:	add	r1, r4, #2
   135a8:	lsl	r1, r1, #1
   135ac:	uxth	r1, r1
   135b0:	ldrh	r3, [r5, #22]
   135b4:	cmp	r3, r1
   135b8:	bls	13708 <flatcc_verify_table_as_nested_root@@Base+0x1ac>
   135bc:	ldr	r3, [r5, #12]
   135c0:	ldrh	r3, [r3, r1]
   135c4:	cmp	r3, #0
   135c8:	beq	13708 <flatcc_verify_table_as_nested_root@@Base+0x1ac>
   135cc:	ldr	r2, [r5, #16]
   135d0:	add	r3, r3, r2
   135d4:	ldr	r2, [r5]
   135d8:	adds	r1, r2, r3
   135dc:	beq	13708 <flatcc_verify_table_as_nested_root@@Base+0x1ac>
   135e0:	ldr	r3, [r2, r3]
   135e4:	add	r7, r1, r3
   135e8:	ldr	r4, [r1, r3]
   135ec:	add	r8, r7, #4
   135f0:	mov	r2, r6
   135f4:	mov	r1, r4
   135f8:	mov	r0, r8
   135fc:	bl	13054 <flatcc_verify_buffer_header@@Base>
   13600:	cmp	r0, #0
   13604:	bne	13720 <flatcc_verify_table_as_nested_root@@Base+0x1c4>
   13608:	ldr	r2, [r7, #4]
   1360c:	ldr	r3, [r5, #8]
   13610:	sub	r3, r3, #1
   13614:	str	r3, [sp, #16]
   13618:	cmp	r3, #0
   1361c:	moveq	r0, #3
   13620:	beq	13708 <flatcc_verify_table_as_nested_root@@Base+0x1ac>
   13624:	cmp	r2, #0
   13628:	moveq	r0, #15
   1362c:	beq	13708 <flatcc_verify_table_as_nested_root@@Base+0x1ac>
   13630:	add	r3, r2, #4
   13634:	cmp	r4, r3
   13638:	movcc	r0, #15
   1363c:	bcc	13708 <flatcc_verify_table_as_nested_root@@Base+0x1ac>
   13640:	tst	r2, #3
   13644:	movne	r0, #15
   13648:	bne	13708 <flatcc_verify_table_as_nested_root@@Base+0x1ac>
   1364c:	str	r2, [sp, #24]
   13650:	ldr	r3, [r8, r2]
   13654:	subs	r3, r2, r3
   13658:	movmi	r0, #29
   1365c:	bmi	13708 <flatcc_verify_table_as_nested_root@@Base+0x1ac>
   13660:	tst	r3, #1
   13664:	movne	r0, #29
   13668:	bne	13708 <flatcc_verify_table_as_nested_root@@Base+0x1ac>
   1366c:	add	r0, r3, #2
   13670:	cmp	r4, r0
   13674:	movcc	r0, #27
   13678:	bcc	13708 <flatcc_verify_table_as_nested_root@@Base+0x1ac>
   1367c:	add	ip, r8, r3
   13680:	ldrh	r1, [r8, r3]
   13684:	strh	r1, [sp, #30]
   13688:	add	r3, r1, r3
   1368c:	cmp	r4, r3
   13690:	movcc	r0, #30
   13694:	bcc	13708 <flatcc_verify_table_as_nested_root@@Base+0x1ac>
   13698:	tst	r1, #1
   1369c:	movne	r0, #30
   136a0:	bne	13708 <flatcc_verify_table_as_nested_root@@Base+0x1ac>
   136a4:	cmp	r1, #3
   136a8:	movls	r0, #28
   136ac:	bls	13708 <flatcc_verify_table_as_nested_root@@Base+0x1ac>
   136b0:	ldrh	r3, [r8, r0]
   136b4:	strh	r3, [sp, #28]
   136b8:	sub	r2, r4, r2
   136bc:	cmp	r2, r3
   136c0:	movcc	r0, #20
   136c4:	bcc	13708 <flatcc_verify_table_as_nested_root@@Base+0x1ac>
   136c8:	str	ip, [sp, #20]
   136cc:	str	r8, [sp, #8]
   136d0:	str	r4, [sp, #12]
   136d4:	add	r0, sp, #8
   136d8:	ldr	r3, [sp, #60]	; 0x3c
   136dc:	blx	r3
   136e0:	b	13708 <flatcc_verify_table_as_nested_root@@Base+0x1ac>
   136e4:	mvn	r3, #0
   136e8:	str	r3, [sp, #4]
   136ec:	mov	r3, #1
   136f0:	str	r3, [sp]
   136f4:	mov	r3, r7
   136f8:	mov	r2, r8
   136fc:	mov	r1, r4
   13700:	mov	r0, r5
   13704:	bl	12820 <flatcc_verify_vector_field@@Base>
   13708:	add	sp, sp, #32
   1370c:	ldrd	r4, [sp]
   13710:	ldrd	r6, [sp, #8]
   13714:	ldr	r8, [sp, #16]
   13718:	add	sp, sp, #20
   1371c:	pop	{pc}		; (ldr pc, [sp], #4)
   13720:	mov	r2, r6
   13724:	mov	r1, r4
   13728:	mov	r0, r8
   1372c:	bl	13054 <flatcc_verify_buffer_header@@Base>
   13730:	b	13708 <flatcc_verify_table_as_nested_root@@Base+0x1ac>

00013734 <flatcc_verify_union_field@@Base>:
   13734:	strd	r4, [sp, #-20]!	; 0xffffffec
   13738:	strd	r6, [sp, #8]
   1373c:	str	lr, [sp, #16]
   13740:	sub	sp, sp, #36	; 0x24
   13744:	add	ip, r1, #1
   13748:	lsl	ip, ip, #1
   1374c:	uxth	ip, ip
   13750:	ldrh	lr, [r0, #22]
   13754:	cmp	lr, ip
   13758:	bls	13828 <flatcc_verify_union_field@@Base+0xf4>
   1375c:	ldr	r6, [r0, #12]
   13760:	ldrh	r4, [r6, ip]
   13764:	cmp	r4, #0
   13768:	beq	13828 <flatcc_verify_union_field@@Base+0xf4>
   1376c:	add	r5, r4, #1
   13770:	ldrh	r7, [r0, #20]
   13774:	cmp	r5, r7
   13778:	bhi	1386c <flatcc_verify_union_field@@Base+0x138>
   1377c:	ldr	r7, [r0]
   13780:	add	ip, ip, #2
   13784:	uxth	ip, ip
   13788:	cmp	lr, ip
   1378c:	bls	13874 <flatcc_verify_union_field@@Base+0x140>
   13790:	ldr	lr, [r0, #16]
   13794:	add	r4, r4, lr
   13798:	add	r5, r7, r4
   1379c:	ldrb	lr, [r7, r4]
   137a0:	ldrh	r4, [r6, ip]
   137a4:	adds	ip, lr, #0
   137a8:	movne	ip, #1
   137ac:	cmp	r4, #0
   137b0:	moveq	ip, #1
   137b4:	cmp	ip, #0
   137b8:	moveq	r0, #24
   137bc:	beq	13858 <flatcc_verify_union_field@@Base+0x124>
   137c0:	cmp	lr, #0
   137c4:	moveq	r0, #0
   137c8:	beq	13858 <flatcc_verify_union_field@@Base+0x124>
   137cc:	mov	r6, r3
   137d0:	mov	r4, r0
   137d4:	add	r3, sp, #28
   137d8:	bl	12428 <main@@Base+0x390>
   137dc:	cmp	r0, #0
   137e0:	bne	13858 <flatcc_verify_union_field@@Base+0x124>
   137e4:	ldr	r3, [sp, #28]
   137e8:	cmp	r3, #0
   137ec:	beq	13858 <flatcc_verify_union_field@@Base+0x124>
   137f0:	ldr	r2, [r4]
   137f4:	str	r2, [sp, #4]
   137f8:	ldr	r1, [r4, #4]
   137fc:	str	r1, [sp, #8]
   13800:	ldr	r1, [r4, #8]
   13804:	str	r1, [sp, #12]
   13808:	str	r3, [sp, #20]
   1380c:	ldr	r3, [r2, r3]
   13810:	str	r3, [sp, #24]
   13814:	ldrb	r3, [r5]
   13818:	strb	r3, [sp, #16]
   1381c:	add	r0, sp, #4
   13820:	blx	r6
   13824:	b	13858 <flatcc_verify_union_field@@Base+0x124>
   13828:	add	ip, ip, #2
   1382c:	uxth	ip, ip
   13830:	cmp	lr, ip
   13834:	bls	1384c <flatcc_verify_union_field@@Base+0x118>
   13838:	ldr	r3, [r0, #12]
   1383c:	ldrh	r3, [r3, ip]
   13840:	cmp	r3, #0
   13844:	movne	r0, #23
   13848:	bne	13858 <flatcc_verify_union_field@@Base+0x124>
   1384c:	cmp	r2, #0
   13850:	moveq	r0, r2
   13854:	movne	r0, #21
   13858:	add	sp, sp, #36	; 0x24
   1385c:	ldrd	r4, [sp]
   13860:	ldrd	r6, [sp, #8]
   13864:	add	sp, sp, #16
   13868:	pop	{pc}		; (ldr pc, [sp], #4)
   1386c:	mov	r0, #13
   13870:	b	13858 <flatcc_verify_union_field@@Base+0x124>
   13874:	ldr	ip, [r0, #16]
   13878:	add	r4, r4, ip
   1387c:	add	r5, r7, r4
   13880:	ldrb	lr, [r7, r4]
   13884:	b	137c0 <flatcc_verify_union_field@@Base+0x8c>

00013888 <flatcc_verify_union_vector_field@@Base>:
   13888:	strd	r4, [sp, #-32]!	; 0xffffffe0
   1388c:	strd	r6, [sp, #8]
   13890:	strd	r8, [sp, #16]
   13894:	str	sl, [sp, #24]
   13898:	str	lr, [sp, #28]
   1389c:	sub	sp, sp, #40	; 0x28
   138a0:	sub	r7, r1, #1
   138a4:	uxth	r7, r7
   138a8:	add	r5, r1, #1
   138ac:	lsl	r5, r5, #1
   138b0:	uxth	r5, r5
   138b4:	ldrh	lr, [r0, #22]
   138b8:	cmp	lr, r5
   138bc:	bls	138d0 <flatcc_verify_union_vector_field@@Base+0x48>
   138c0:	ldr	ip, [r0, #12]
   138c4:	ldrh	ip, [ip, r5]
   138c8:	cmp	ip, #0
   138cc:	bne	13904 <flatcc_verify_union_vector_field@@Base+0x7c>
   138d0:	add	ip, r5, #2
   138d4:	uxth	ip, ip
   138d8:	cmp	lr, ip
   138dc:	ldrhi	lr, [r0, #12]
   138e0:	ldrhhi	ip, [lr, ip]
   138e4:	movls	ip, #0
   138e8:	uxth	lr, ip
   138ec:	adds	ip, r2, #0
   138f0:	movne	ip, #1
   138f4:	cmp	lr, #0
   138f8:	movne	ip, #0
   138fc:	cmp	ip, #0
   13900:	bne	13b0c <flatcc_verify_union_vector_field@@Base+0x284>
   13904:	mov	r9, r3
   13908:	mov	r8, r2
   1390c:	mov	r6, r1
   13910:	mov	r4, r0
   13914:	mvn	r3, #0
   13918:	str	r3, [sp, #4]
   1391c:	mov	r3, #1
   13920:	str	r3, [sp]
   13924:	mov	r1, r7
   13928:	bl	12820 <flatcc_verify_vector_field@@Base>
   1392c:	subs	sl, r0, #0
   13930:	bne	13a2c <flatcc_verify_union_vector_field@@Base+0x1a4>
   13934:	ldrh	r3, [r4, #22]
   13938:	cmp	r3, r5
   1393c:	bls	13a50 <flatcc_verify_union_vector_field@@Base+0x1c8>
   13940:	ldr	r3, [r4, #12]
   13944:	ldrh	r3, [r3, r5]
   13948:	cmp	r3, #0
   1394c:	beq	13a50 <flatcc_verify_union_vector_field@@Base+0x1c8>
   13950:	ldr	r2, [r4, #16]
   13954:	add	r3, r3, r2
   13958:	ldr	r2, [r4]
   1395c:	adds	r1, r2, r3
   13960:	beq	13a50 <flatcc_verify_union_vector_field@@Base+0x1c8>
   13964:	ldr	r3, [r2, r3]
   13968:	add	r5, r1, r3
   1396c:	ldr	r7, [r1, r3]
   13970:	add	r3, sp, #36	; 0x24
   13974:	mov	r2, r8
   13978:	mov	r1, r6
   1397c:	mov	r0, r4
   13980:	bl	12428 <main@@Base+0x390>
   13984:	subs	sl, r0, #0
   13988:	bne	13a50 <flatcc_verify_union_vector_field@@Base+0x1c8>
   1398c:	ldr	r3, [sp, #36]	; 0x24
   13990:	cmp	r3, #0
   13994:	beq	13a50 <flatcc_verify_union_vector_field@@Base+0x1c8>
   13998:	ldr	r1, [r4]
   1399c:	ldr	r2, [r1, r3]
   139a0:	ldr	r0, [r4, #8]
   139a4:	cmp	r0, #0
   139a8:	movle	sl, #3
   139ac:	ble	13a50 <flatcc_verify_union_vector_field@@Base+0x1c8>
   139b0:	add	r2, r3, r2
   139b4:	cmp	r3, r2
   139b8:	movcs	sl, #16
   139bc:	bcs	13a50 <flatcc_verify_union_vector_field@@Base+0x1c8>
   139c0:	ldr	ip, [r4, #4]
   139c4:	add	r3, r2, #4
   139c8:	cmp	ip, r3
   139cc:	movcc	sl, #16
   139d0:	bcc	13a50 <flatcc_verify_union_vector_field@@Base+0x1c8>
   139d4:	tst	r3, #3
   139d8:	bne	13b14 <flatcc_verify_union_vector_field@@Base+0x28c>
   139dc:	add	r6, r1, r2
   139e0:	ldr	lr, [r1, r2]
   139e4:	cmn	lr, #-1073741823	; 0xc0000001
   139e8:	bhi	13b14 <flatcc_verify_union_vector_field@@Base+0x28c>
   139ec:	sub	r4, ip, r3
   139f0:	cmp	r4, lr, lsl #2
   139f4:	bcc	13b14 <flatcc_verify_union_vector_field@@Base+0x28c>
   139f8:	cmp	r7, lr
   139fc:	bne	13afc <flatcc_verify_union_vector_field@@Base+0x274>
   13a00:	str	r1, [sp, #12]
   13a04:	str	ip, [sp, #16]
   13a08:	sub	r0, r0, #1
   13a0c:	str	r0, [sp, #20]
   13a10:	cmp	lr, #0
   13a14:	beq	13a50 <flatcc_verify_union_vector_field@@Base+0x1c8>
   13a18:	add	r4, r5, #4
   13a1c:	add	lr, lr, #4
   13a20:	add	r5, lr, r5
   13a24:	rsb	r7, r1, #4
   13a28:	b	13ac8 <flatcc_verify_union_vector_field@@Base+0x240>
   13a2c:	mvn	r3, #0
   13a30:	str	r3, [sp, #4]
   13a34:	mov	r3, #1
   13a38:	str	r3, [sp]
   13a3c:	mov	r2, r8
   13a40:	mov	r1, r7
   13a44:	mov	r0, r4
   13a48:	bl	12820 <flatcc_verify_vector_field@@Base>
   13a4c:	mov	sl, r0
   13a50:	mov	r0, sl
   13a54:	add	sp, sp, #40	; 0x28
   13a58:	ldrd	r4, [sp]
   13a5c:	ldrd	r6, [sp, #8]
   13a60:	ldrd	r8, [sp, #16]
   13a64:	ldr	sl, [sp, #24]
   13a68:	add	sp, sp, #28
   13a6c:	pop	{pc}		; (ldr pc, [sp], #4)
   13a70:	ldr	r2, [r1, r2]
   13a74:	cmn	r2, #-1073741823	; 0xc0000001
   13a78:	movhi	sl, #25
   13a7c:	bhi	13a50 <flatcc_verify_union_vector_field@@Base+0x1c8>
   13a80:	sub	r3, ip, r3
   13a84:	lsl	r2, r2, #2
   13a88:	cmp	r3, r2
   13a8c:	movcc	sl, #26
   13a90:	b	13a50 <flatcc_verify_union_vector_field@@Base+0x1c8>
   13a94:	ldrb	r1, [r4]
   13a98:	cmp	r1, #0
   13a9c:	beq	13b04 <flatcc_verify_union_vector_field@@Base+0x27c>
   13aa0:	strb	r1, [sp, #24]
   13aa4:	str	r2, [sp, #28]
   13aa8:	str	r3, [sp, #32]
   13aac:	add	r0, sp, #12
   13ab0:	blx	r9
   13ab4:	cmp	r0, #0
   13ab8:	bne	13aec <flatcc_verify_union_vector_field@@Base+0x264>
   13abc:	add	r4, r4, #1
   13ac0:	cmp	r5, r4
   13ac4:	beq	13a50 <flatcc_verify_union_vector_field@@Base+0x1c8>
   13ac8:	add	r2, r7, r6
   13acc:	ldr	r3, [r6, #4]!
   13ad0:	cmp	r3, #0
   13ad4:	bne	13a94 <flatcc_verify_union_vector_field@@Base+0x20c>
   13ad8:	ldrb	r3, [r4]
   13adc:	cmp	r3, #0
   13ae0:	beq	13abc <flatcc_verify_union_vector_field@@Base+0x234>
   13ae4:	mov	sl, #32
   13ae8:	b	13a50 <flatcc_verify_union_vector_field@@Base+0x1c8>
   13aec:	add	r0, sp, #12
   13af0:	blx	r9
   13af4:	mov	sl, r0
   13af8:	b	13a50 <flatcc_verify_union_vector_field@@Base+0x1c8>
   13afc:	mov	sl, #34	; 0x22
   13b00:	b	13a50 <flatcc_verify_union_vector_field@@Base+0x1c8>
   13b04:	mov	sl, #33	; 0x21
   13b08:	b	13a50 <flatcc_verify_union_vector_field@@Base+0x1c8>
   13b0c:	mov	sl, #22
   13b10:	b	13a50 <flatcc_verify_union_vector_field@@Base+0x1c8>
   13b14:	tst	r3, #3
   13b18:	beq	13a70 <flatcc_verify_union_vector_field@@Base+0x1e8>
   13b1c:	mov	sl, #16
   13b20:	b	13a50 <flatcc_verify_union_vector_field@@Base+0x1c8>

00013b24 <__libc_csu_init@@Base>:
   13b24:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   13b28:	mov	r7, r0
   13b2c:	ldr	r6, [pc, #72]	; 13b7c <__libc_csu_init@@Base+0x58>
   13b30:	ldr	r5, [pc, #72]	; 13b80 <__libc_csu_init@@Base+0x5c>
   13b34:	add	r6, pc, r6
   13b38:	add	r5, pc, r5
   13b3c:	sub	r6, r6, r5
   13b40:	mov	r8, r1
   13b44:	mov	r9, r2
   13b48:	bl	10c98 <strcmp@plt-0x20>
   13b4c:	asrs	r6, r6, #2
   13b50:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   13b54:	mov	r4, #0
   13b58:	add	r4, r4, #1
   13b5c:	ldr	r3, [r5], #4
   13b60:	mov	r2, r9
   13b64:	mov	r1, r8
   13b68:	mov	r0, r7
   13b6c:	blx	r3
   13b70:	cmp	r6, r4
   13b74:	bne	13b58 <__libc_csu_init@@Base+0x34>
   13b78:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   13b7c:	ldrdeq	r1, [r1], -r8
   13b80:	ldrdeq	r1, [r1], -r0

00013b84 <__libc_csu_fini@@Base>:
   13b84:	bx	lr

Disassembly of section .fini:

00013b88 <.fini>:
   13b88:	push	{r3, lr}
   13b8c:	pop	{r3, pc}
