
../repos/coreutils/src/fmt:     file format elf32-littlearm


Disassembly of section .init:

00010ca8 <.init>:
   10ca8:	push	{r3, lr}
   10cac:	bl	114f8 <__assert_fail@plt+0x5c0>
   10cb0:	pop	{r3, pc}

Disassembly of section .plt:

00010cb4 <calloc@plt-0x14>:
   10cb4:	push	{lr}		; (str lr, [sp, #-4]!)
   10cb8:	ldr	lr, [pc, #4]	; 10cc4 <calloc@plt-0x4>
   10cbc:	add	lr, pc, lr
   10cc0:	ldr	pc, [lr, #8]!
   10cc4:	andeq	r7, r1, ip, lsr r3

00010cc8 <calloc@plt>:
   10cc8:	add	ip, pc, #0, 12
   10ccc:	add	ip, ip, #94208	; 0x17000
   10cd0:	ldr	pc, [ip, #828]!	; 0x33c

00010cd4 <fputs_unlocked@plt>:
   10cd4:	add	ip, pc, #0, 12
   10cd8:	add	ip, ip, #94208	; 0x17000
   10cdc:	ldr	pc, [ip, #820]!	; 0x334

00010ce0 <raise@plt>:
   10ce0:	add	ip, pc, #0, 12
   10ce4:	add	ip, ip, #94208	; 0x17000
   10ce8:	ldr	pc, [ip, #812]!	; 0x32c

00010cec <strcmp@plt>:
   10cec:	add	ip, pc, #0, 12
   10cf0:	add	ip, ip, #94208	; 0x17000
   10cf4:	ldr	pc, [ip, #804]!	; 0x324

00010cf8 <posix_fadvise64@plt>:
   10cf8:	add	ip, pc, #0, 12
   10cfc:	add	ip, ip, #94208	; 0x17000
   10d00:	ldr	pc, [ip, #796]!	; 0x31c

00010d04 <fflush@plt>:
   10d04:	add	ip, pc, #0, 12
   10d08:	add	ip, ip, #94208	; 0x17000
   10d0c:	ldr	pc, [ip, #788]!	; 0x314

00010d10 <__memmove_chk@plt>:
   10d10:	add	ip, pc, #0, 12
   10d14:	add	ip, ip, #94208	; 0x17000
   10d18:	ldr	pc, [ip, #780]!	; 0x30c

00010d1c <free@plt>:
   10d1c:	add	ip, pc, #0, 12
   10d20:	add	ip, ip, #94208	; 0x17000
   10d24:	ldr	pc, [ip, #772]!	; 0x304

00010d28 <_exit@plt>:
   10d28:	add	ip, pc, #0, 12
   10d2c:	add	ip, ip, #94208	; 0x17000
   10d30:	ldr	pc, [ip, #764]!	; 0x2fc

00010d34 <memcpy@plt>:
   10d34:	add	ip, pc, #0, 12
   10d38:	add	ip, ip, #94208	; 0x17000
   10d3c:	ldr	pc, [ip, #756]!	; 0x2f4

00010d40 <__strtoull_internal@plt>:
   10d40:	add	ip, pc, #0, 12
   10d44:	add	ip, ip, #94208	; 0x17000
   10d48:	ldr	pc, [ip, #748]!	; 0x2ec

00010d4c <mbsinit@plt>:
   10d4c:	add	ip, pc, #0, 12
   10d50:	add	ip, ip, #94208	; 0x17000
   10d54:	ldr	pc, [ip, #740]!	; 0x2e4

00010d58 <fwrite_unlocked@plt>:
   10d58:	add	ip, pc, #0, 12
   10d5c:	add	ip, ip, #94208	; 0x17000
   10d60:	ldr	pc, [ip, #732]!	; 0x2dc

00010d64 <memcmp@plt>:
   10d64:	add	ip, pc, #0, 12
   10d68:	add	ip, ip, #94208	; 0x17000
   10d6c:	ldr	pc, [ip, #724]!	; 0x2d4

00010d70 <fputc_unlocked@plt>:
   10d70:	add	ip, pc, #0, 12
   10d74:	add	ip, ip, #94208	; 0x17000
   10d78:	ldr	pc, [ip, #716]!	; 0x2cc

00010d7c <dcgettext@plt>:
   10d7c:	add	ip, pc, #0, 12
   10d80:	add	ip, ip, #94208	; 0x17000
   10d84:	ldr	pc, [ip, #708]!	; 0x2c4

00010d88 <realloc@plt>:
   10d88:	add	ip, pc, #0, 12
   10d8c:	add	ip, ip, #94208	; 0x17000
   10d90:	ldr	pc, [ip, #700]!	; 0x2bc

00010d94 <textdomain@plt>:
   10d94:	add	ip, pc, #0, 12
   10d98:	add	ip, ip, #94208	; 0x17000
   10d9c:	ldr	pc, [ip, #692]!	; 0x2b4

00010da0 <iswprint@plt>:
   10da0:	add	ip, pc, #0, 12
   10da4:	add	ip, ip, #94208	; 0x17000
   10da8:	ldr	pc, [ip, #684]!	; 0x2ac

00010dac <fwrite@plt>:
   10dac:	add	ip, pc, #0, 12
   10db0:	add	ip, ip, #94208	; 0x17000
   10db4:	ldr	pc, [ip, #676]!	; 0x2a4

00010db8 <lseek64@plt>:
   10db8:	add	ip, pc, #0, 12
   10dbc:	add	ip, ip, #94208	; 0x17000
   10dc0:	ldr	pc, [ip, #668]!	; 0x29c

00010dc4 <__ctype_get_mb_cur_max@plt>:
   10dc4:	add	ip, pc, #0, 12
   10dc8:	add	ip, ip, #94208	; 0x17000
   10dcc:	ldr	pc, [ip, #660]!	; 0x294

00010dd0 <__fpending@plt>:
   10dd0:	add	ip, pc, #0, 12
   10dd4:	add	ip, ip, #94208	; 0x17000
   10dd8:	ldr	pc, [ip, #652]!	; 0x28c

00010ddc <mbrtowc@plt>:
   10ddc:	add	ip, pc, #0, 12
   10de0:	add	ip, ip, #94208	; 0x17000
   10de4:	ldr	pc, [ip, #644]!	; 0x284

00010de8 <error@plt>:
   10de8:	add	ip, pc, #0, 12
   10dec:	add	ip, ip, #94208	; 0x17000
   10df0:	ldr	pc, [ip, #636]!	; 0x27c

00010df4 <malloc@plt>:
   10df4:	add	ip, pc, #0, 12
   10df8:	add	ip, ip, #94208	; 0x17000
   10dfc:	ldr	pc, [ip, #628]!	; 0x274

00010e00 <__libc_start_main@plt>:
   10e00:	add	ip, pc, #0, 12
   10e04:	add	ip, ip, #94208	; 0x17000
   10e08:	ldr	pc, [ip, #620]!	; 0x26c

00010e0c <__freading@plt>:
   10e0c:	add	ip, pc, #0, 12
   10e10:	add	ip, ip, #94208	; 0x17000
   10e14:	ldr	pc, [ip, #612]!	; 0x264

00010e18 <__gmon_start__@plt>:
   10e18:	add	ip, pc, #0, 12
   10e1c:	add	ip, ip, #94208	; 0x17000
   10e20:	ldr	pc, [ip, #604]!	; 0x25c

00010e24 <getopt_long@plt>:
   10e24:	add	ip, pc, #0, 12
   10e28:	add	ip, ip, #94208	; 0x17000
   10e2c:	ldr	pc, [ip, #596]!	; 0x254

00010e30 <__ctype_b_loc@plt>:
   10e30:	add	ip, pc, #0, 12
   10e34:	add	ip, ip, #94208	; 0x17000
   10e38:	ldr	pc, [ip, #588]!	; 0x24c

00010e3c <exit@plt>:
   10e3c:	add	ip, pc, #0, 12
   10e40:	add	ip, ip, #94208	; 0x17000
   10e44:	ldr	pc, [ip, #580]!	; 0x244

00010e48 <strlen@plt>:
   10e48:	add	ip, pc, #0, 12
   10e4c:	add	ip, ip, #94208	; 0x17000
   10e50:	ldr	pc, [ip, #572]!	; 0x23c

00010e54 <strchr@plt>:
   10e54:	add	ip, pc, #0, 12
   10e58:	add	ip, ip, #94208	; 0x17000
   10e5c:	ldr	pc, [ip, #564]!	; 0x234

00010e60 <__errno_location@plt>:
   10e60:	add	ip, pc, #0, 12
   10e64:	add	ip, ip, #94208	; 0x17000
   10e68:	ldr	pc, [ip, #556]!	; 0x22c

00010e6c <__cxa_atexit@plt>:
   10e6c:	add	ip, pc, #0, 12
   10e70:	add	ip, ip, #94208	; 0x17000
   10e74:	ldr	pc, [ip, #548]!	; 0x224

00010e78 <memset@plt>:
   10e78:	add	ip, pc, #0, 12
   10e7c:	add	ip, ip, #94208	; 0x17000
   10e80:	ldr	pc, [ip, #540]!	; 0x21c

00010e84 <__printf_chk@plt>:
   10e84:	add	ip, pc, #0, 12
   10e88:	add	ip, ip, #94208	; 0x17000
   10e8c:	ldr	pc, [ip, #532]!	; 0x214

00010e90 <fileno@plt>:
   10e90:	add	ip, pc, #0, 12
   10e94:	add	ip, ip, #94208	; 0x17000
   10e98:	ldr	pc, [ip, #524]!	; 0x20c

00010e9c <__fprintf_chk@plt>:
   10e9c:	add	ip, pc, #0, 12
   10ea0:	add	ip, ip, #94208	; 0x17000
   10ea4:	ldr	pc, [ip, #516]!	; 0x204

00010ea8 <fclose@plt>:
   10ea8:	add	ip, pc, #0, 12
   10eac:	add	ip, ip, #94208	; 0x17000
   10eb0:	ldr	pc, [ip, #508]!	; 0x1fc

00010eb4 <fseeko64@plt>:
   10eb4:	add	ip, pc, #0, 12
   10eb8:	add	ip, ip, #94208	; 0x17000
   10ebc:	ldr	pc, [ip, #500]!	; 0x1f4

00010ec0 <__uflow@plt>:
   10ec0:	add	ip, pc, #0, 12
   10ec4:	add	ip, ip, #94208	; 0x17000
   10ec8:	ldr	pc, [ip, #492]!	; 0x1ec

00010ecc <__overflow@plt>:
   10ecc:	add	ip, pc, #0, 12
   10ed0:	add	ip, ip, #94208	; 0x17000
   10ed4:	ldr	pc, [ip, #484]!	; 0x1e4

00010ed8 <setlocale@plt>:
   10ed8:	add	ip, pc, #0, 12
   10edc:	add	ip, ip, #94208	; 0x17000
   10ee0:	ldr	pc, [ip, #476]!	; 0x1dc

00010ee4 <strrchr@plt>:
   10ee4:	add	ip, pc, #0, 12
   10ee8:	add	ip, ip, #94208	; 0x17000
   10eec:	ldr	pc, [ip, #468]!	; 0x1d4

00010ef0 <nl_langinfo@plt>:
   10ef0:	add	ip, pc, #0, 12
   10ef4:	add	ip, ip, #94208	; 0x17000
   10ef8:	ldr	pc, [ip, #460]!	; 0x1cc

00010efc <clearerr_unlocked@plt>:
   10efc:	add	ip, pc, #0, 12
   10f00:	add	ip, ip, #94208	; 0x17000
   10f04:	ldr	pc, [ip, #452]!	; 0x1c4

00010f08 <fopen64@plt>:
   10f08:	add	ip, pc, #0, 12
   10f0c:	add	ip, ip, #94208	; 0x17000
   10f10:	ldr	pc, [ip, #444]!	; 0x1bc

00010f14 <bindtextdomain@plt>:
   10f14:	add	ip, pc, #0, 12
   10f18:	add	ip, ip, #94208	; 0x17000
   10f1c:	ldr	pc, [ip, #436]!	; 0x1b4

00010f20 <strncmp@plt>:
   10f20:	add	ip, pc, #0, 12
   10f24:	add	ip, ip, #94208	; 0x17000
   10f28:	ldr	pc, [ip, #428]!	; 0x1ac

00010f2c <abort@plt>:
   10f2c:	add	ip, pc, #0, 12
   10f30:	add	ip, ip, #94208	; 0x17000
   10f34:	ldr	pc, [ip, #420]!	; 0x1a4

00010f38 <__assert_fail@plt>:
   10f38:	add	ip, pc, #0, 12
   10f3c:	add	ip, ip, #94208	; 0x17000
   10f40:	ldr	pc, [ip, #412]!	; 0x19c

Disassembly of section .text:

00010f44 <.text>:
   10f44:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10f48:	mov	fp, r0
   10f4c:	ldr	sl, [pc, #1284]	; 11458 <__assert_fail@plt+0x520>
   10f50:	sub	sp, sp, #44	; 0x2c
   10f54:	ldr	r0, [r1]
   10f58:	mov	r4, r1
   10f5c:	bl	12ca0 <__assert_fail@plt+0x1d68>
   10f60:	mov	r1, sl
   10f64:	mov	r0, #6
   10f68:	bl	10ed8 <setlocale@plt>
   10f6c:	ldr	r1, [pc, #1256]	; 1145c <__assert_fail@plt+0x524>
   10f70:	ldr	r0, [pc, #1256]	; 11460 <__assert_fail@plt+0x528>
   10f74:	bl	10f14 <bindtextdomain@plt>
   10f78:	ldr	r0, [pc, #1248]	; 11460 <__assert_fail@plt+0x528>
   10f7c:	bl	10d94 <textdomain@plt>
   10f80:	ldr	r0, [pc, #1244]	; 11464 <__assert_fail@plt+0x52c>
   10f84:	bl	1673c <__assert_fail@plt+0x5804>
   10f88:	ldr	r5, [pc, #1240]	; 11468 <__assert_fail@plt+0x530>
   10f8c:	ldr	r9, [pc, #1240]	; 1146c <__assert_fail@plt+0x534>
   10f90:	ldr	r1, [pc, #1240]	; 11470 <__assert_fail@plt+0x538>
   10f94:	mov	r3, #0
   10f98:	mov	r2, #75	; 0x4b
   10f9c:	cmp	fp, #1
   10fa0:	str	sl, [r5, #3492]	; 0xda4
   10fa4:	strb	r3, [r5, #3500]	; 0xdac
   10fa8:	strb	r3, [r5, #3502]	; 0xdae
   10fac:	strb	r3, [r5, #3501]	; 0xdad
   10fb0:	str	r3, [r5, #3488]	; 0xda0
   10fb4:	str	r3, [r5, #3480]	; 0xd98
   10fb8:	strb	r3, [r9, #328]	; 0x148
   10fbc:	str	r3, [r9, #336]	; 0x150
   10fc0:	str	r2, [r1, #4]
   10fc4:	ble	10fd8 <__assert_fail@plt+0xa0>
   10fc8:	ldr	r2, [r4, #4]
   10fcc:	ldrb	r1, [r2]
   10fd0:	cmp	r1, #45	; 0x2d
   10fd4:	beq	111a0 <__assert_fail@plt+0x268>
   10fd8:	str	r3, [sp, #32]
   10fdc:	mov	r3, #0
   10fe0:	ldr	r8, [pc, #1164]	; 11474 <__assert_fail@plt+0x53c>
   10fe4:	ldr	r7, [pc, #1164]	; 11478 <__assert_fail@plt+0x540>
   10fe8:	mov	r6, r3
   10fec:	str	r3, [sp, #28]
   10ff0:	str	r6, [sp]
   10ff4:	mov	r3, r8
   10ff8:	mov	r2, r7
   10ffc:	mov	r1, r4
   11000:	mov	r0, fp
   11004:	bl	10e24 <getopt_long@plt>
   11008:	cmn	r0, #1
   1100c:	beq	111f4 <__assert_fail@plt+0x2bc>
   11010:	cmp	r0, #112	; 0x70
   11014:	beq	11108 <__assert_fail@plt+0x1d0>
   11018:	bgt	11048 <__assert_fail@plt+0x110>
   1101c:	cmn	r0, #2
   11020:	beq	11100 <__assert_fail@plt+0x1c8>
   11024:	ble	110a0 <__assert_fail@plt+0x168>
   11028:	cmp	r0, #99	; 0x63
   1102c:	beq	11080 <__assert_fail@plt+0x148>
   11030:	cmp	r0, #103	; 0x67
   11034:	bne	110e8 <__assert_fail@plt+0x1b0>
   11038:	ldr	r3, [pc, #1084]	; 1147c <__assert_fail@plt+0x544>
   1103c:	ldr	r3, [r3]
   11040:	str	r3, [sp, #28]
   11044:	b	10ff0 <__assert_fail@plt+0xb8>
   11048:	cmp	r0, #116	; 0x74
   1104c:	beq	110dc <__assert_fail@plt+0x1a4>
   11050:	ble	1108c <__assert_fail@plt+0x154>
   11054:	cmp	r0, #117	; 0x75
   11058:	beq	11074 <__assert_fail@plt+0x13c>
   1105c:	cmp	r0, #119	; 0x77
   11060:	bne	110e8 <__assert_fail@plt+0x1b0>
   11064:	ldr	r3, [pc, #1040]	; 1147c <__assert_fail@plt+0x544>
   11068:	ldr	r3, [r3]
   1106c:	str	r3, [sp, #32]
   11070:	b	10ff0 <__assert_fail@plt+0xb8>
   11074:	mov	r3, #1
   11078:	strb	r3, [r9, #328]	; 0x148
   1107c:	b	10ff0 <__assert_fail@plt+0xb8>
   11080:	mov	r3, #1
   11084:	strb	r3, [r5, #3501]	; 0xdad
   11088:	b	10ff0 <__assert_fail@plt+0xb8>
   1108c:	cmp	r0, #115	; 0x73
   11090:	bne	110e8 <__assert_fail@plt+0x1b0>
   11094:	mov	r3, #1
   11098:	strb	r3, [r5, #3500]	; 0xdac
   1109c:	b	10ff0 <__assert_fail@plt+0xb8>
   110a0:	cmn	r0, #3
   110a4:	mov	r3, r0
   110a8:	bne	110ec <__assert_fail@plt+0x1b4>
   110ac:	ldr	r1, [pc, #972]	; 11480 <__assert_fail@plt+0x548>
   110b0:	ldr	r3, [pc, #972]	; 11484 <__assert_fail@plt+0x54c>
   110b4:	ldr	r2, [pc, #972]	; 11488 <__assert_fail@plt+0x550>
   110b8:	str	r6, [sp, #4]
   110bc:	ldr	r0, [r1]
   110c0:	ldr	r3, [r3]
   110c4:	ldr	r1, [pc, #960]	; 1148c <__assert_fail@plt+0x554>
   110c8:	str	r2, [sp]
   110cc:	ldr	r2, [pc, #956]	; 11490 <__assert_fail@plt+0x558>
   110d0:	bl	14f9c <__assert_fail@plt+0x4064>
   110d4:	mov	r0, #0
   110d8:	bl	10e3c <exit@plt>
   110dc:	mov	r3, #1
   110e0:	strb	r3, [r5, #3502]	; 0xdae
   110e4:	b	10ff0 <__assert_fail@plt+0xb8>
   110e8:	mov	r3, r0
   110ec:	sub	r2, r3, #48	; 0x30
   110f0:	cmp	r2, #9
   110f4:	bls	111c8 <__assert_fail@plt+0x290>
   110f8:	mov	r0, #1
   110fc:	bl	12684 <__assert_fail@plt+0x174c>
   11100:	mov	r0, #0
   11104:	bl	12684 <__assert_fail@plt+0x174c>
   11108:	ldr	r3, [pc, #876]	; 1147c <__assert_fail@plt+0x544>
   1110c:	str	r6, [r5, #3488]	; 0xda0
   11110:	ldr	r2, [r3]
   11114:	ldrb	r3, [r2]
   11118:	cmp	r3, #32
   1111c:	bne	11140 <__assert_fail@plt+0x208>
   11120:	mov	r0, r2
   11124:	rsb	r2, r2, #1
   11128:	add	r1, r0, r2
   1112c:	ldrb	r3, [r0, #1]!
   11130:	cmp	r3, #32
   11134:	beq	11128 <__assert_fail@plt+0x1f0>
   11138:	mov	r2, r0
   1113c:	str	r1, [r5, #3488]	; 0xda0
   11140:	mov	r0, r2
   11144:	str	r2, [r5, #3492]	; 0xda4
   11148:	str	r2, [sp, #36]	; 0x24
   1114c:	bl	10e48 <strlen@plt>
   11150:	ldr	r2, [sp, #36]	; 0x24
   11154:	add	ip, r2, r0
   11158:	cmp	ip, r2
   1115c:	str	r0, [r9, #336]	; 0x150
   11160:	bls	11190 <__assert_fail@plt+0x258>
   11164:	ldrb	r3, [ip, #-1]
   11168:	cmp	r3, #32
   1116c:	bne	11190 <__assert_fail@plt+0x258>
   11170:	sub	r3, ip, #1
   11174:	b	11184 <__assert_fail@plt+0x24c>
   11178:	ldrb	r1, [r3, #-1]!
   1117c:	cmp	r1, #32
   11180:	bne	11190 <__assert_fail@plt+0x258>
   11184:	cmp	r2, r3
   11188:	mov	ip, r3
   1118c:	bne	11178 <__assert_fail@plt+0x240>
   11190:	sub	r0, ip, r2
   11194:	str	r0, [r5, #3480]	; 0xd98
   11198:	strb	r6, [ip]
   1119c:	b	10ff0 <__assert_fail@plt+0xb8>
   111a0:	ldrb	r1, [r2, #1]
   111a4:	sub	r1, r1, #48	; 0x30
   111a8:	cmp	r1, #9
   111ac:	bhi	10fd8 <__assert_fail@plt+0xa0>
   111b0:	ldr	r3, [r4]
   111b4:	add	r2, r2, #1
   111b8:	str	r2, [sp, #32]
   111bc:	sub	fp, fp, #1
   111c0:	str	r3, [r4, #4]!
   111c4:	b	10fdc <__assert_fail@plt+0xa4>
   111c8:	mov	r2, #5
   111cc:	ldr	r1, [pc, #704]	; 11494 <__assert_fail@plt+0x55c>
   111d0:	mov	r0, #0
   111d4:	str	r3, [sp, #28]
   111d8:	bl	10d7c <dcgettext@plt>
   111dc:	mov	r1, #0
   111e0:	ldr	r3, [sp, #28]
   111e4:	mov	r2, r0
   111e8:	mov	r0, r1
   111ec:	bl	10de8 <error@plt>
   111f0:	b	110f8 <__assert_fail@plt+0x1c0>
   111f4:	ldr	r7, [sp, #32]
   111f8:	cmp	r7, #0
   111fc:	beq	113e4 <__assert_fail@plt+0x4ac>
   11200:	mov	r2, #5
   11204:	ldr	r1, [pc, #652]	; 11498 <__assert_fail@plt+0x560>
   11208:	mov	r0, #0
   1120c:	bl	10d7c <dcgettext@plt>
   11210:	ldr	r2, [pc, #644]	; 1149c <__assert_fail@plt+0x564>
   11214:	mov	r3, #0
   11218:	str	r6, [sp, #16]
   1121c:	strd	r2, [sp]
   11220:	str	sl, [sp, #8]
   11224:	mov	r3, #0
   11228:	mov	r2, #0
   1122c:	str	r0, [sp, #12]
   11230:	mov	r0, r7
   11234:	bl	1575c <__assert_fail@plt+0x4824>
   11238:	ldr	r3, [sp, #28]
   1123c:	cmp	r3, #0
   11240:	ldr	r3, [pc, #552]	; 11470 <__assert_fail@plt+0x538>
   11244:	mov	r7, r0
   11248:	str	r0, [r3, #4]
   1124c:	beq	11324 <__assert_fail@plt+0x3ec>
   11250:	mov	r2, #5
   11254:	ldr	r1, [pc, #572]	; 11498 <__assert_fail@plt+0x560>
   11258:	mov	r0, #0
   1125c:	bl	10d7c <dcgettext@plt>
   11260:	mov	r2, r7
   11264:	asr	r3, r7, #31
   11268:	str	r6, [sp, #16]
   1126c:	strd	r2, [sp]
   11270:	str	sl, [sp, #8]
   11274:	mov	r2, #0
   11278:	mov	r3, #0
   1127c:	str	r0, [sp, #12]
   11280:	ldr	r0, [sp, #28]
   11284:	bl	1575c <__assert_fail@plt+0x4824>
   11288:	str	r0, [r5, #3464]	; 0xd88
   1128c:	ldr	r6, [pc, #524]	; 114a0 <__assert_fail@plt+0x568>
   11290:	ldr	r3, [r6]
   11294:	cmp	r3, fp
   11298:	beq	11440 <__assert_fail@plt+0x508>
   1129c:	movge	r5, #1
   112a0:	bge	11344 <__assert_fail@plt+0x40c>
   112a4:	ldr	r7, [pc, #504]	; 114a4 <__assert_fail@plt+0x56c>
   112a8:	mov	r9, #0
   112ac:	mov	r5, #1
   112b0:	b	112e4 <__assert_fail@plt+0x3ac>
   112b4:	ldr	r3, [pc, #492]	; 114a8 <__assert_fail@plt+0x570>
   112b8:	mov	r1, sl
   112bc:	mov	r9, #1
   112c0:	ldr	r0, [r3]
   112c4:	bl	12088 <__assert_fail@plt+0x1150>
   112c8:	and	r5, r5, r0
   112cc:	uxtb	r5, r5
   112d0:	ldr	r3, [r6]
   112d4:	add	r3, r3, #1
   112d8:	cmp	fp, r3
   112dc:	str	r3, [r6]
   112e0:	ble	11354 <__assert_fail@plt+0x41c>
   112e4:	ldr	sl, [r4, r3, lsl #2]
   112e8:	mov	r1, r7
   112ec:	mov	r0, sl
   112f0:	bl	10cec <strcmp@plt>
   112f4:	cmp	r0, #0
   112f8:	beq	112b4 <__assert_fail@plt+0x37c>
   112fc:	ldr	r1, [pc, #424]	; 114ac <__assert_fail@plt+0x574>
   11300:	mov	r0, sl
   11304:	bl	10f08 <fopen64@plt>
   11308:	subs	r8, r0, #0
   1130c:	beq	1139c <__assert_fail@plt+0x464>
   11310:	mov	r1, sl
   11314:	bl	12088 <__assert_fail@plt+0x1150>
   11318:	and	r5, r5, r0
   1131c:	uxtb	r5, r5
   11320:	b	112d0 <__assert_fail@plt+0x398>
   11324:	ldr	r3, [pc, #324]	; 11470 <__assert_fail@plt+0x538>
   11328:	mov	r0, #187	; 0xbb
   1132c:	mov	r1, #200	; 0xc8
   11330:	ldr	r3, [r3, #4]
   11334:	mul	r0, r0, r3
   11338:	bl	16324 <__assert_fail@plt+0x53ec>
   1133c:	str	r0, [r5, #3464]	; 0xd88
   11340:	b	1128c <__assert_fail@plt+0x354>
   11344:	eor	r0, r5, #1
   11348:	uxtb	r0, r0
   1134c:	add	sp, sp, #44	; 0x2c
   11350:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11354:	cmp	r9, #0
   11358:	beq	11344 <__assert_fail@plt+0x40c>
   1135c:	ldr	r4, [pc, #324]	; 114a8 <__assert_fail@plt+0x570>
   11360:	ldr	r0, [r4]
   11364:	bl	12b00 <__assert_fail@plt+0x1bc8>
   11368:	cmp	r0, #0
   1136c:	beq	11344 <__assert_fail@plt+0x40c>
   11370:	bl	10e60 <__errno_location@plt>
   11374:	mov	r2, #5
   11378:	ldr	r1, [pc, #304]	; 114b0 <__assert_fail@plt+0x578>
   1137c:	ldr	r4, [r0]
   11380:	mov	r0, #0
   11384:	bl	10d7c <dcgettext@plt>
   11388:	mov	r1, r4
   1138c:	ldr	r2, [pc, #288]	; 114b4 <__assert_fail@plt+0x57c>
   11390:	mov	r3, r0
   11394:	mov	r0, #1
   11398:	bl	10de8 <error@plt>
   1139c:	bl	10e60 <__errno_location@plt>
   113a0:	mov	r2, #5
   113a4:	ldr	r1, [pc, #268]	; 114b8 <__assert_fail@plt+0x580>
   113a8:	mov	r5, r8
   113ac:	ldr	r3, [r0]
   113b0:	mov	r0, r8
   113b4:	str	r3, [sp, #28]
   113b8:	bl	10d7c <dcgettext@plt>
   113bc:	mov	r1, sl
   113c0:	str	r0, [sp, #32]
   113c4:	mov	r0, #4
   113c8:	bl	14920 <__assert_fail@plt+0x39e8>
   113cc:	ldr	r2, [sp, #32]
   113d0:	ldr	r1, [sp, #28]
   113d4:	mov	r3, r0
   113d8:	mov	r0, r8
   113dc:	bl	10de8 <error@plt>
   113e0:	b	112d0 <__assert_fail@plt+0x398>
   113e4:	ldr	r3, [sp, #28]
   113e8:	cmp	r3, #0
   113ec:	beq	11324 <__assert_fail@plt+0x3ec>
   113f0:	ldr	r6, [sp, #32]
   113f4:	mov	r2, #5
   113f8:	ldr	r1, [pc, #152]	; 11498 <__assert_fail@plt+0x560>
   113fc:	mov	r0, r6
   11400:	bl	10d7c <dcgettext@plt>
   11404:	mov	r2, #75	; 0x4b
   11408:	mov	r3, #0
   1140c:	str	r6, [sp, #16]
   11410:	strd	r2, [sp]
   11414:	str	sl, [sp, #8]
   11418:	mov	r2, #0
   1141c:	mov	r3, #0
   11420:	str	r0, [sp, #12]
   11424:	ldr	r0, [sp, #28]
   11428:	bl	1575c <__assert_fail@plt+0x4824>
   1142c:	ldr	r2, [pc, #60]	; 11470 <__assert_fail@plt+0x538>
   11430:	add	r3, r0, #10
   11434:	str	r0, [r5, #3464]	; 0xd88
   11438:	str	r3, [r2, #4]
   1143c:	b	1128c <__assert_fail@plt+0x354>
   11440:	ldr	r4, [pc, #96]	; 114a8 <__assert_fail@plt+0x570>
   11444:	ldr	r1, [pc, #88]	; 114a4 <__assert_fail@plt+0x56c>
   11448:	ldr	r0, [r4]
   1144c:	bl	12088 <__assert_fail@plt+0x1150>
   11450:	mov	r5, r0
   11454:	b	11360 <__assert_fail@plt+0x428>
   11458:	andeq	r6, r1, r0, ror #18
   1145c:	andeq	r6, r1, r4, ror sp
   11460:	andeq	r6, r1, ip, asr #25
   11464:	ldrdeq	r2, [r1], -ip
   11468:	andeq	lr, r2, r8, asr #2
   1146c:	andeq	r0, r3, r0, asr #2
   11470:	andeq	r8, r2, r0, ror #2
   11474:	andeq	r6, r1, r8, lsr #15
   11478:	strdeq	r6, [r1], -ip
   1147c:	andeq	r8, r2, r8, asr r1
   11480:	andeq	r8, r2, r4, asr r1
   11484:	andeq	r8, r2, ip, ror #1
   11488:	andeq	r6, r1, ip, ror #27
   1148c:	andeq	r6, r1, r8, lsl #17
   11490:	andeq	r6, r1, r8, asr #25
   11494:	andeq	r6, r1, ip, lsl #27
   11498:	andeq	r6, r1, r4, lsl lr
   1149c:	andeq	r0, r0, r4, asr #19
   114a0:	andeq	r8, r2, r0, asr #2
   114a4:	andeq	r6, r1, r4, lsr #28
   114a8:	andeq	r8, r2, r0, asr r1
   114ac:	andeq	r6, r1, r8, lsr #28
   114b0:	andeq	r6, r1, r8, asr #28
   114b4:	andeq	r6, r1, ip, asr #30
   114b8:	andeq	r6, r1, ip, lsr #28
   114bc:	mov	fp, #0
   114c0:	mov	lr, #0
   114c4:	pop	{r1}		; (ldr r1, [sp], #4)
   114c8:	mov	r2, sp
   114cc:	push	{r2}		; (str r2, [sp, #-4]!)
   114d0:	push	{r0}		; (str r0, [sp, #-4]!)
   114d4:	ldr	ip, [pc, #16]	; 114ec <__assert_fail@plt+0x5b4>
   114d8:	push	{ip}		; (str ip, [sp, #-4]!)
   114dc:	ldr	r0, [pc, #12]	; 114f0 <__assert_fail@plt+0x5b8>
   114e0:	ldr	r3, [pc, #12]	; 114f4 <__assert_fail@plt+0x5bc>
   114e4:	bl	10e00 <__libc_start_main@plt>
   114e8:	bl	10f2c <abort@plt>
   114ec:	andeq	r6, r1, r8, lsr r7
   114f0:	andeq	r0, r1, r4, asr #30
   114f4:	ldrdeq	r6, [r1], -r8
   114f8:	ldr	r3, [pc, #20]	; 11514 <__assert_fail@plt+0x5dc>
   114fc:	ldr	r2, [pc, #20]	; 11518 <__assert_fail@plt+0x5e0>
   11500:	add	r3, pc, r3
   11504:	ldr	r2, [r3, r2]
   11508:	cmp	r2, #0
   1150c:	bxeq	lr
   11510:	b	10e18 <__gmon_start__@plt>
   11514:	strdeq	r6, [r1], -r8
   11518:	andeq	r0, r0, r0, ror #1
   1151c:	ldr	r3, [pc, #28]	; 11540 <__assert_fail@plt+0x608>
   11520:	ldr	r0, [pc, #28]	; 11544 <__assert_fail@plt+0x60c>
   11524:	sub	r3, r3, r0
   11528:	cmp	r3, #6
   1152c:	bxls	lr
   11530:	ldr	r3, [pc, #16]	; 11548 <__assert_fail@plt+0x610>
   11534:	cmp	r3, #0
   11538:	bxeq	lr
   1153c:	bx	r3
   11540:	andeq	r8, r2, r7, lsr r1
   11544:	andeq	r8, r2, r4, lsr r1
   11548:	andeq	r0, r0, r0
   1154c:	ldr	r1, [pc, #36]	; 11578 <__assert_fail@plt+0x640>
   11550:	ldr	r0, [pc, #36]	; 1157c <__assert_fail@plt+0x644>
   11554:	sub	r1, r1, r0
   11558:	asr	r1, r1, #2
   1155c:	add	r1, r1, r1, lsr #31
   11560:	asrs	r1, r1, #1
   11564:	bxeq	lr
   11568:	ldr	r3, [pc, #16]	; 11580 <__assert_fail@plt+0x648>
   1156c:	cmp	r3, #0
   11570:	bxeq	lr
   11574:	bx	r3
   11578:	andeq	r8, r2, r4, lsr r1
   1157c:	andeq	r8, r2, r4, lsr r1
   11580:	andeq	r0, r0, r0
   11584:	push	{r4, lr}
   11588:	ldr	r4, [pc, #24]	; 115a8 <__assert_fail@plt+0x670>
   1158c:	ldrb	r3, [r4]
   11590:	cmp	r3, #0
   11594:	popne	{r4, pc}
   11598:	bl	1151c <__assert_fail@plt+0x5e4>
   1159c:	mov	r3, #1
   115a0:	strb	r3, [r4]
   115a4:	pop	{r4, pc}
   115a8:	andeq	r8, r2, ip, asr r1
   115ac:	ldr	r0, [pc, #40]	; 115dc <__assert_fail@plt+0x6a4>
   115b0:	ldr	r3, [r0]
   115b4:	cmp	r3, #0
   115b8:	bne	115c0 <__assert_fail@plt+0x688>
   115bc:	b	1154c <__assert_fail@plt+0x614>
   115c0:	ldr	r3, [pc, #24]	; 115e0 <__assert_fail@plt+0x6a8>
   115c4:	cmp	r3, #0
   115c8:	beq	115bc <__assert_fail@plt+0x684>
   115cc:	push	{r4, lr}
   115d0:	blx	r3
   115d4:	pop	{r4, lr}
   115d8:	b	1154c <__assert_fail@plt+0x614>
   115dc:	andeq	r7, r2, r4, lsl pc
   115e0:	andeq	r0, r0, r0
   115e4:	ldr	r3, [pc, #476]	; 117c8 <__assert_fail@plt+0x890>
   115e8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   115ec:	mov	r2, #0
   115f0:	ldm	r3, {r4, r9}
   115f4:	sub	sp, sp, #28
   115f8:	add	r8, r3, #8
   115fc:	sub	r5, r4, #28
   11600:	str	r2, [r4, #20]
   11604:	ldr	r2, [r4, #4]
   11608:	cmp	r5, r8
   1160c:	str	r2, [sp, #16]
   11610:	str	r9, [r4, #4]
   11614:	bcc	11760 <__assert_fail@plt+0x828>
   11618:	ldr	r1, [pc, #428]	; 117cc <__assert_fail@plt+0x894>
   1161c:	add	r3, r3, #36	; 0x24
   11620:	str	r3, [sp, #12]
   11624:	ldr	r2, [r1, #3456]	; 0xd80
   11628:	ldr	sl, [r1, #3464]	; 0xd88
   1162c:	ldr	fp, [r1, #3468]	; 0xd8c
   11630:	ldr	r0, [r1, #3460]	; 0xd84
   11634:	str	r0, [sp, #4]
   11638:	ldr	lr, [sp, #4]
   1163c:	ldr	r3, [r5, #4]
   11640:	cmp	r5, r8
   11644:	movne	lr, r2
   11648:	add	lr, lr, r3
   1164c:	mov	r0, r5
   11650:	mvn	r6, #-2147483648	; 0x80000000
   11654:	b	11688 <__assert_fail@plt+0x750>
   11658:	cmp	r1, r6
   1165c:	movlt	r6, r1
   11660:	strlt	r0, [r5, #24]
   11664:	strlt	lr, [r5, #16]
   11668:	cmp	r4, r0
   1166c:	beq	116f8 <__assert_fail@plt+0x7c0>
   11670:	ldr	r1, [r0, #-20]	; 0xffffffec
   11674:	ldr	ip, [r0, #4]
   11678:	add	r1, r1, ip
   1167c:	add	lr, lr, r1
   11680:	cmp	r9, lr
   11684:	ble	116f8 <__assert_fail@plt+0x7c0>
   11688:	add	r0, r0, #28
   1168c:	cmp	r4, r0
   11690:	moveq	r1, #0
   11694:	beq	116cc <__assert_fail@plt+0x794>
   11698:	sub	r1, sl, lr
   1169c:	ldr	ip, [r0, #24]
   116a0:	add	r1, r1, r1, lsl #2
   116a4:	cmp	r4, ip
   116a8:	lsl	r1, r1, #1
   116ac:	mul	r1, r1, r1
   116b0:	beq	116cc <__assert_fail@plt+0x794>
   116b4:	ldr	ip, [r0, #16]
   116b8:	sub	ip, lr, ip
   116bc:	add	ip, ip, ip, lsl #2
   116c0:	lsl	ip, ip, #1
   116c4:	mul	ip, ip, ip
   116c8:	add	r1, r1, ip, asr #1
   116cc:	ldr	ip, [r0, #20]
   116d0:	cmp	r5, r8
   116d4:	add	r1, r1, ip
   116d8:	bne	11658 <__assert_fail@plt+0x720>
   116dc:	cmp	fp, #0
   116e0:	subgt	ip, lr, fp
   116e4:	addgt	ip, ip, ip, lsl #2
   116e8:	lslgt	ip, ip, #1
   116ec:	mulgt	ip, ip, ip
   116f0:	addgt	r1, r1, ip, asr #1
   116f4:	b	11658 <__assert_fail@plt+0x720>
   116f8:	cmp	r5, r8
   116fc:	bls	11794 <__assert_fail@plt+0x85c>
   11700:	ldrb	r1, [r5, #-16]
   11704:	tst	r1, #2
   11708:	beq	11770 <__assert_fail@plt+0x838>
   1170c:	tst	r1, #8
   11710:	ldr	r1, [pc, #184]	; 117d0 <__assert_fail@plt+0x898>
   11714:	movne	r7, #2400	; 0x960
   11718:	moveq	r7, r1
   1171c:	ldrb	r1, [r5, #12]
   11720:	tst	r1, #1
   11724:	subne	r7, r7, #1600	; 0x640
   11728:	bne	1174c <__assert_fail@plt+0x814>
   1172c:	tst	r1, #8
   11730:	beq	1174c <__assert_fail@plt+0x814>
   11734:	add	r1, r3, #2
   11738:	ldr	r0, [pc, #148]	; 117d4 <__assert_fail@plt+0x89c>
   1173c:	str	r2, [sp, #8]
   11740:	bl	16324 <__assert_fail@plt+0x53ec>
   11744:	ldr	r2, [sp, #8]
   11748:	add	r7, r7, r0
   1174c:	add	r6, r6, r7
   11750:	str	r6, [r5, #20]
   11754:	sub	r5, r5, #28
   11758:	cmp	r5, r8
   1175c:	bcs	11638 <__assert_fail@plt+0x700>
   11760:	ldr	r3, [sp, #16]
   11764:	str	r3, [r4, #4]
   11768:	add	sp, sp, #28
   1176c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11770:	tst	r1, #4
   11774:	ldrne	r7, [pc, #92]	; 117d8 <__assert_fail@plt+0x8a0>
   11778:	bne	1171c <__assert_fail@plt+0x7e4>
   1177c:	ldr	r1, [sp, #12]
   11780:	cmp	r5, r1
   11784:	bls	11794 <__assert_fail@plt+0x85c>
   11788:	ldrb	r1, [r5, #-44]	; 0xffffffd4
   1178c:	tst	r1, #8
   11790:	bne	1179c <__assert_fail@plt+0x864>
   11794:	ldr	r7, [pc, #64]	; 117dc <__assert_fail@plt+0x8a4>
   11798:	b	1171c <__assert_fail@plt+0x7e4>
   1179c:	ldr	r1, [r5, #-24]	; 0xffffffe8
   117a0:	ldr	r0, [pc, #56]	; 117e0 <__assert_fail@plt+0x8a8>
   117a4:	add	r1, r1, #2
   117a8:	str	r2, [sp, #20]
   117ac:	str	r3, [sp, #8]
   117b0:	bl	16324 <__assert_fail@plt+0x53ec>
   117b4:	ldr	r3, [sp, #8]
   117b8:	ldr	r2, [sp, #20]
   117bc:	add	r0, r0, #4864	; 0x1300
   117c0:	add	r7, r0, #36	; 0x24
   117c4:	b	1171c <__assert_fail@plt+0x7e4>
   117c8:	andeq	r8, r2, r0, ror #2
   117cc:	andeq	lr, r2, r8, asr #2
   117d0:	andeq	r9, r5, r4, ror #2
   117d4:	andeq	r5, r0, r4, ror #15
   117d8:	andeq	r0, r0, r4, ror #25
   117dc:	andeq	r1, r0, r4, lsr #6
   117e0:	andeq	r9, r0, r0, asr #24
   117e4:	push	{r4, r5, r6, lr}
   117e8:	mov	r4, r0
   117ec:	ldr	r5, [pc, #112]	; 11864 <__assert_fail@plt+0x92c>
   117f0:	mov	r0, r1
   117f4:	mov	r6, #1
   117f8:	b	11840 <__assert_fail@plt+0x908>
   117fc:	cmp	r0, #9
   11800:	popne	{r4, r5, r6, pc}
   11804:	ldr	r3, [r5, #3472]	; 0xd90
   11808:	strb	r6, [r5, #3476]	; 0xd94
   1180c:	add	r2, r3, #7
   11810:	cmp	r3, #0
   11814:	movlt	r3, r2
   11818:	bic	r3, r3, #7
   1181c:	add	r3, r3, #8
   11820:	str	r3, [r5, #3472]	; 0xd90
   11824:	ldr	r3, [r4, #4]
   11828:	ldr	r2, [r4, #8]
   1182c:	add	r1, r3, #1
   11830:	cmp	r3, r2
   11834:	strcc	r1, [r4, #4]
   11838:	ldrbcc	r0, [r3]
   1183c:	bcs	11858 <__assert_fail@plt+0x920>
   11840:	cmp	r0, #32
   11844:	bne	117fc <__assert_fail@plt+0x8c4>
   11848:	ldr	r3, [r5, #3472]	; 0xd90
   1184c:	add	r3, r3, #1
   11850:	str	r3, [r5, #3472]	; 0xd90
   11854:	b	11824 <__assert_fail@plt+0x8ec>
   11858:	mov	r0, r4
   1185c:	bl	10ec0 <__uflow@plt>
   11860:	b	11840 <__assert_fail@plt+0x908>
   11864:	andeq	lr, r2, r8, asr #2
   11868:	push	{r4, r5, r6, lr}
   1186c:	mov	r2, #0
   11870:	ldr	r5, [pc, #224]	; 11958 <__assert_fail@plt+0xa20>
   11874:	ldr	r3, [r0, #4]
   11878:	ldr	r1, [r0, #8]
   1187c:	mov	r4, r0
   11880:	cmp	r3, r1
   11884:	str	r2, [r5, #3472]	; 0xd90
   11888:	bcs	11948 <__assert_fail@plt+0xa10>
   1188c:	add	r2, r3, #1
   11890:	str	r2, [r0, #4]
   11894:	ldrb	r1, [r3]
   11898:	mov	r0, r4
   1189c:	bl	117e4 <__assert_fail@plt+0x8ac>
   118a0:	ldr	r3, [r5, #3480]	; 0xd98
   118a4:	cmp	r3, #0
   118a8:	beq	11930 <__assert_fail@plt+0x9f8>
   118ac:	ldr	r6, [r5, #3492]	; 0xda4
   118b0:	ldr	r3, [r5, #3472]	; 0xd90
   118b4:	ldrb	r2, [r6]
   118b8:	str	r3, [r5, #3484]	; 0xd9c
   118bc:	cmp	r2, #0
   118c0:	beq	11920 <__assert_fail@plt+0x9e8>
   118c4:	cmp	r0, r2
   118c8:	beq	118e8 <__assert_fail@plt+0x9b0>
   118cc:	b	11954 <__assert_fail@plt+0xa1c>
   118d0:	ldrb	r3, [r6, #1]!
   118d4:	cmp	r3, #0
   118d8:	beq	11920 <__assert_fail@plt+0x9e8>
   118dc:	cmp	r3, r0
   118e0:	popne	{r4, r5, r6, pc}
   118e4:	ldr	r3, [r5, #3472]	; 0xd90
   118e8:	ldr	r2, [r4, #4]
   118ec:	ldr	r1, [r4, #8]
   118f0:	add	r0, r2, #1
   118f4:	cmp	r2, r1
   118f8:	add	r3, r3, #1
   118fc:	strcc	r0, [r4, #4]
   11900:	str	r3, [r5, #3472]	; 0xd90
   11904:	ldrbcc	r0, [r2]
   11908:	bcc	118d0 <__assert_fail@plt+0x998>
   1190c:	mov	r0, r4
   11910:	bl	10ec0 <__uflow@plt>
   11914:	ldrb	r3, [r6, #1]!
   11918:	cmp	r3, #0
   1191c:	bne	118dc <__assert_fail@plt+0x9a4>
   11920:	mov	r1, r0
   11924:	mov	r0, r4
   11928:	pop	{r4, r5, r6, lr}
   1192c:	b	117e4 <__assert_fail@plt+0x8ac>
   11930:	ldr	r3, [r5, #3472]	; 0xd90
   11934:	ldr	r2, [r5, #3488]	; 0xda0
   11938:	cmp	r3, r2
   1193c:	movge	r3, r2
   11940:	str	r3, [r5, #3484]	; 0xd9c
   11944:	pop	{r4, r5, r6, pc}
   11948:	bl	10ec0 <__uflow@plt>
   1194c:	mov	r1, r0
   11950:	b	11898 <__assert_fail@plt+0x960>
   11954:	pop	{r4, r5, r6, pc}
   11958:	andeq	lr, r2, r8, asr #2
   1195c:	push	{r4, r5, r6, r7, r8, lr}
   11960:	ldr	r4, [pc, #232]	; 11a50 <__assert_fail@plt+0xb18>
   11964:	ldrb	r2, [r4, #3476]	; 0xd94
   11968:	ldr	r3, [r4, #3496]	; 0xda8
   1196c:	cmp	r2, #0
   11970:	add	r6, r3, r0
   11974:	beq	119f8 <__assert_fail@plt+0xac0>
   11978:	cmp	r6, #0
   1197c:	add	r7, r6, #7
   11980:	movge	r7, r6
   11984:	bic	r7, r7, #7
   11988:	add	r2, r3, #1
   1198c:	cmp	r7, r2
   11990:	ble	119f8 <__assert_fail@plt+0xac0>
   11994:	cmp	r3, r7
   11998:	bge	119f8 <__assert_fail@plt+0xac0>
   1199c:	ldr	r5, [pc, #176]	; 11a54 <__assert_fail@plt+0xb1c>
   119a0:	mov	r8, #9
   119a4:	b	119cc <__assert_fail@plt+0xa94>
   119a8:	ldr	r3, [r4, #3496]	; 0xda8
   119ac:	cmp	r3, #0
   119b0:	add	r2, r3, #7
   119b4:	movlt	r3, r2
   119b8:	bic	r3, r3, #7
   119bc:	add	r3, r3, #8
   119c0:	cmp	r7, r3
   119c4:	str	r3, [r4, #3496]	; 0xda8
   119c8:	ble	119f8 <__assert_fail@plt+0xac0>
   119cc:	ldr	r0, [r5]
   119d0:	ldr	r3, [r0, #20]
   119d4:	ldr	r2, [r0, #24]
   119d8:	add	r1, r3, #1
   119dc:	cmp	r3, r2
   119e0:	strcc	r1, [r0, #20]
   119e4:	strbcc	r8, [r3]
   119e8:	bcc	119a8 <__assert_fail@plt+0xa70>
   119ec:	mov	r1, r8
   119f0:	bl	10ecc <__overflow@plt>
   119f4:	b	119a8 <__assert_fail@plt+0xa70>
   119f8:	cmp	r6, r3
   119fc:	pople	{r4, r5, r6, r7, r8, pc}
   11a00:	ldr	r5, [pc, #76]	; 11a54 <__assert_fail@plt+0xb1c>
   11a04:	mov	r7, #32
   11a08:	b	11a20 <__assert_fail@plt+0xae8>
   11a0c:	ldr	r3, [r4, #3496]	; 0xda8
   11a10:	add	r3, r3, #1
   11a14:	cmp	r6, r3
   11a18:	str	r3, [r4, #3496]	; 0xda8
   11a1c:	ble	11a4c <__assert_fail@plt+0xb14>
   11a20:	ldr	r0, [r5]
   11a24:	ldr	r3, [r0, #20]
   11a28:	ldr	r2, [r0, #24]
   11a2c:	add	r1, r3, #1
   11a30:	cmp	r3, r2
   11a34:	strcc	r1, [r0, #20]
   11a38:	strbcc	r7, [r3]
   11a3c:	bcc	11a0c <__assert_fail@plt+0xad4>
   11a40:	mov	r1, r7
   11a44:	bl	10ecc <__overflow@plt>
   11a48:	b	11a0c <__assert_fail@plt+0xad4>
   11a4c:	pop	{r4, r5, r6, r7, r8, pc}
   11a50:	andeq	lr, r2, r8, asr #2
   11a54:	andeq	r8, r2, r4, asr r1
   11a58:	ldr	r3, [pc, #128]	; 11ae0 <__assert_fail@plt+0xba8>
   11a5c:	ldrb	r2, [r3, #3500]	; 0xdac
   11a60:	cmp	r2, #0
   11a64:	bne	11a7c <__assert_fail@plt+0xb44>
   11a68:	ldrb	r2, [r3, #3501]	; 0xdad
   11a6c:	cmp	r2, #0
   11a70:	beq	11a88 <__assert_fail@plt+0xb50>
   11a74:	cmp	r0, #0
   11a78:	bne	11ab4 <__assert_fail@plt+0xb7c>
   11a7c:	ldr	r2, [r3, #3460]	; 0xd84
   11a80:	str	r2, [r3, #3456]	; 0xd80
   11a84:	bx	lr
   11a88:	ldrb	r2, [r3, #3502]	; 0xdae
   11a8c:	cmp	r2, #0
   11a90:	beq	11a7c <__assert_fail@plt+0xb44>
   11a94:	cmp	r0, #0
   11a98:	beq	11ac0 <__assert_fail@plt+0xb88>
   11a9c:	ldr	r1, [r3, #3472]	; 0xd90
   11aa0:	ldr	r2, [r3, #3460]	; 0xd84
   11aa4:	cmp	r1, r2
   11aa8:	beq	11ac4 <__assert_fail@plt+0xb8c>
   11aac:	str	r1, [r3, #3456]	; 0xd80
   11ab0:	bx	lr
   11ab4:	ldr	r2, [r3, #3472]	; 0xd90
   11ab8:	str	r2, [r3, #3456]	; 0xd80
   11abc:	bx	lr
   11ac0:	ldr	r2, [r3, #3460]	; 0xd84
   11ac4:	ldr	r1, [r3, #3456]	; 0xd80
   11ac8:	cmp	r2, r1
   11acc:	bxne	lr
   11ad0:	cmp	r2, #0
   11ad4:	moveq	r2, #3
   11ad8:	movne	r2, #0
   11adc:	b	11a80 <__assert_fail@plt+0xb48>
   11ae0:	andeq	lr, r2, r8, asr #2
   11ae4:	push	{r4, r5, r6, r7, r8, lr}
   11ae8:	ldr	r4, [r1]
   11aec:	cmp	r4, #0
   11af0:	beq	11b40 <__assert_fail@plt+0xc08>
   11af4:	mov	r7, r1
   11af8:	mov	r5, r0
   11afc:	ldr	r6, [pc, #80]	; 11b54 <__assert_fail@plt+0xc1c>
   11b00:	b	11b0c <__assert_fail@plt+0xbd4>
   11b04:	subs	r4, r4, #1
   11b08:	beq	11b3c <__assert_fail@plt+0xc04>
   11b0c:	ldr	r0, [r6]
   11b10:	ldrb	r1, [r5], #1
   11b14:	ldr	r3, [r0, #20]
   11b18:	ldr	r2, [r0, #24]
   11b1c:	add	ip, r3, #1
   11b20:	cmp	r3, r2
   11b24:	strcc	ip, [r0, #20]
   11b28:	strbcc	r1, [r3]
   11b2c:	bcc	11b04 <__assert_fail@plt+0xbcc>
   11b30:	bl	10ecc <__overflow@plt>
   11b34:	subs	r4, r4, #1
   11b38:	bne	11b0c <__assert_fail@plt+0xbd4>
   11b3c:	ldr	r4, [r7]
   11b40:	ldr	r2, [pc, #16]	; 11b58 <__assert_fail@plt+0xc20>
   11b44:	ldr	r3, [r2, #3496]	; 0xda8
   11b48:	add	r4, r3, r4
   11b4c:	str	r4, [r2, #3496]	; 0xda8
   11b50:	pop	{r4, r5, r6, r7, r8, pc}
   11b54:	andeq	r8, r2, r4, asr r1
   11b58:	andeq	lr, r2, r8, asr #2
   11b5c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   11b60:	mov	r3, #0
   11b64:	ldr	r7, [pc, #184]	; 11c24 <__assert_fail@plt+0xcec>
   11b68:	ldr	r9, [pc, #184]	; 11c28 <__assert_fail@plt+0xcf0>
   11b6c:	mov	r4, r0
   11b70:	ldr	r0, [r7, #3504]	; 0xdb0
   11b74:	mov	r5, r1
   11b78:	str	r3, [r7, #3496]	; 0xda8
   11b7c:	bl	1195c <__assert_fail@plt+0xa24>
   11b80:	ldr	r1, [r9]
   11b84:	ldr	r0, [r7, #3492]	; 0xda4
   11b88:	bl	10cd4 <fputs_unlocked@plt>
   11b8c:	ldr	r3, [r7, #3496]	; 0xda8
   11b90:	ldr	r2, [r7, #3480]	; 0xd98
   11b94:	add	r3, r3, r2
   11b98:	sub	r0, r5, r3
   11b9c:	str	r3, [r7, #3496]	; 0xda8
   11ba0:	bl	1195c <__assert_fail@plt+0xa24>
   11ba4:	ldr	r8, [r4, #24]
   11ba8:	sub	r6, r8, #28
   11bac:	cmp	r4, r6
   11bb0:	beq	11bdc <__assert_fail@plt+0xca4>
   11bb4:	add	r5, r4, #4
   11bb8:	mov	r1, r5
   11bbc:	ldr	r0, [r5, #-4]
   11bc0:	bl	11ae4 <__assert_fail@plt+0xbac>
   11bc4:	add	r4, r4, #28
   11bc8:	ldr	r0, [r4, #-20]	; 0xffffffec
   11bcc:	bl	1195c <__assert_fail@plt+0xa24>
   11bd0:	cmp	r6, r4
   11bd4:	add	r5, r5, #28
   11bd8:	bne	11bb8 <__assert_fail@plt+0xc80>
   11bdc:	sub	r1, r8, #24
   11be0:	ldr	r0, [r8, #-28]	; 0xffffffe4
   11be4:	bl	11ae4 <__assert_fail@plt+0xbac>
   11be8:	ldr	r0, [r9]
   11bec:	ldr	r1, [r7, #3496]	; 0xda8
   11bf0:	ldr	r3, [r0, #20]
   11bf4:	ldr	r2, [r0, #24]
   11bf8:	str	r1, [r7, #3468]	; 0xd8c
   11bfc:	cmp	r3, r2
   11c00:	bcs	11c18 <__assert_fail@plt+0xce0>
   11c04:	add	r1, r3, #1
   11c08:	mov	r2, #10
   11c0c:	str	r1, [r0, #20]
   11c10:	strb	r2, [r3]
   11c14:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   11c18:	mov	r1, #10
   11c1c:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   11c20:	b	10ecc <__overflow@plt>
   11c24:	andeq	lr, r2, r8, asr #2
   11c28:	andeq	r8, r2, r4, asr r1
   11c2c:	push	{r4, r5, r6, lr}
   11c30:	mov	r5, r0
   11c34:	ldr	r6, [pc, #52]	; 11c70 <__assert_fail@plt+0xd38>
   11c38:	ldr	r4, [pc, #52]	; 11c74 <__assert_fail@plt+0xd3c>
   11c3c:	ldr	r1, [r6, #3460]	; 0xd84
   11c40:	add	r0, r4, #8
   11c44:	bl	11b5c <__assert_fail@plt+0xc24>
   11c48:	ldr	r4, [r4, #32]
   11c4c:	cmp	r4, r5
   11c50:	popeq	{r4, r5, r6, pc}
   11c54:	mov	r0, r4
   11c58:	ldr	r1, [r6, #3456]	; 0xd80
   11c5c:	bl	11b5c <__assert_fail@plt+0xc24>
   11c60:	ldr	r4, [r4, #24]
   11c64:	cmp	r5, r4
   11c68:	bne	11c54 <__assert_fail@plt+0xd1c>
   11c6c:	pop	{r4, r5, r6, pc}
   11c70:	andeq	lr, r2, r8, asr #2
   11c74:	andeq	r8, r2, r0, ror #2
   11c78:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   11c7c:	ldr	r6, [pc, #288]	; 11da4 <__assert_fail@plt+0xe6c>
   11c80:	mov	r5, r6
   11c84:	ldr	r7, [r5], #8
   11c88:	cmp	r7, r5
   11c8c:	beq	11d6c <__assert_fail@plt+0xe34>
   11c90:	bl	115e4 <__assert_fail@plt+0x6ac>
   11c94:	ldr	r1, [r6, #32]
   11c98:	cmp	r7, r1
   11c9c:	beq	11d9c <__assert_fail@plt+0xe64>
   11ca0:	ldr	r2, [r1, #20]
   11ca4:	mov	r4, r7
   11ca8:	mvn	r3, #-2147483648	; 0x80000000
   11cac:	ldr	ip, [r1, #24]
   11cb0:	ldr	r0, [ip, #20]
   11cb4:	sub	r2, r2, r0
   11cb8:	cmp	r2, r3
   11cbc:	movlt	r3, r2
   11cc0:	movlt	r4, r1
   11cc4:	cmn	r3, #-2147483638	; 0x8000000a
   11cc8:	addle	r3, r3, #9
   11ccc:	cmp	r7, ip
   11cd0:	mov	r1, ip
   11cd4:	mov	r2, r0
   11cd8:	bne	11cac <__assert_fail@plt+0xd74>
   11cdc:	ldr	r9, [pc, #196]	; 11da8 <__assert_fail@plt+0xe70>
   11ce0:	mov	r0, r4
   11ce4:	bl	11c2c <__assert_fail@plt+0xcf4>
   11ce8:	ldr	r8, [r9, #3508]	; 0xdb4
   11cec:	add	r0, r9, #3504	; 0xdb0
   11cf0:	ldr	r1, [r4]
   11cf4:	add	sl, r0, #8
   11cf8:	sub	r2, r8, r1
   11cfc:	ldr	r3, [pc, #168]	; 11dac <__assert_fail@plt+0xe74>
   11d00:	mov	r0, sl
   11d04:	bl	10d10 <__memmove_chk@plt>
   11d08:	ldr	r3, [r4]
   11d0c:	ldr	r7, [r6]
   11d10:	sub	r0, sl, r3
   11d14:	add	r8, r8, r0
   11d18:	cmp	r7, r4
   11d1c:	str	r8, [r9, #3508]	; 0xdb4
   11d20:	bcc	11d40 <__assert_fail@plt+0xe08>
   11d24:	add	r2, r4, #28
   11d28:	b	11d30 <__assert_fail@plt+0xdf8>
   11d2c:	ldr	r3, [r2], #28
   11d30:	add	r3, r3, r0
   11d34:	cmp	r2, r7
   11d38:	str	r3, [r2, #-28]	; 0xffffffe4
   11d3c:	bls	11d2c <__assert_fail@plt+0xdf4>
   11d40:	sub	r2, r7, r4
   11d44:	mov	r1, r4
   11d48:	bic	r2, r2, #3
   11d4c:	sub	r4, r4, r5
   11d50:	add	r2, r2, #28
   11d54:	ldr	r3, [pc, #84]	; 11db0 <__assert_fail@plt+0xe78>
   11d58:	ldr	r0, [pc, #84]	; 11db4 <__assert_fail@plt+0xe7c>
   11d5c:	sub	r4, r7, r4
   11d60:	bl	10d10 <__memmove_chk@plt>
   11d64:	str	r4, [r6]
   11d68:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   11d6c:	ldr	r5, [pc, #52]	; 11da8 <__assert_fail@plt+0xe70>
   11d70:	ldr	r3, [pc, #64]	; 11db8 <__assert_fail@plt+0xe80>
   11d74:	add	r4, r5, #3504	; 0xdb0
   11d78:	ldr	r2, [r5, #3508]	; 0xdb4
   11d7c:	add	r4, r4, #8
   11d80:	sub	r2, r2, r4
   11d84:	mov	r0, r4
   11d88:	ldr	r3, [r3]
   11d8c:	mov	r1, #1
   11d90:	bl	10d58 <fwrite_unlocked@plt>
   11d94:	str	r4, [r5, #3508]	; 0xdb4
   11d98:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   11d9c:	mov	r4, r7
   11da0:	b	11cdc <__assert_fail@plt+0xda4>
   11da4:	andeq	r8, r2, r0, ror #2
   11da8:	andeq	lr, r2, r8, asr #2
   11dac:	andeq	r1, r0, r8, lsl #7
   11db0:	andeq	r6, r0, r0, ror #26
   11db4:	andeq	r8, r2, r8, ror #2
   11db8:	andeq	r8, r2, r4, asr r1
   11dbc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11dc0:	sub	sp, sp, #20
   11dc4:	mov	r6, r0
   11dc8:	mov	r5, r1
   11dcc:	bl	10e30 <__ctype_b_loc@plt>
   11dd0:	ldr	r4, [pc, #664]	; 12070 <__assert_fail@plt+0x1138>
   11dd4:	ldr	r7, [pc, #664]	; 12074 <__assert_fail@plt+0x113c>
   11dd8:	ldr	r9, [r4], #8
   11ddc:	add	fp, r7, #8512	; 0x2140
   11de0:	add	r4, r4, #27904	; 0x6d00
   11de4:	add	r3, r4, #40	; 0x28
   11de8:	str	r3, [sp, #12]
   11dec:	str	r0, [sp, #8]
   11df0:	ldr	r4, [r7, #3508]	; 0xdb4
   11df4:	mov	r8, #1
   11df8:	str	r4, [r9]
   11dfc:	ldr	sl, [sp, #8]
   11e00:	b	11e18 <__assert_fail@plt+0xee0>
   11e04:	ldr	r9, [sl]
   11e08:	lsl	r3, r5, #1
   11e0c:	ldrh	r3, [r9, r3]
   11e10:	tst	r3, #8192	; 0x2000
   11e14:	bne	11e6c <__assert_fail@plt+0xf34>
   11e18:	cmp	r4, fp
   11e1c:	beq	12020 <__assert_fail@plt+0x10e8>
   11e20:	strb	r5, [r4]
   11e24:	ldr	r3, [r6, #4]
   11e28:	ldr	r1, [r6, #8]
   11e2c:	add	r2, r4, #1
   11e30:	cmp	r3, r1
   11e34:	add	r0, r3, #1
   11e38:	strcc	r0, [r6, #4]
   11e3c:	mov	r4, r2
   11e40:	str	r2, [r7, #3508]	; 0xdb4
   11e44:	ldrbcc	r5, [r3]
   11e48:	bcc	11e04 <__assert_fail@plt+0xecc>
   11e4c:	mov	r0, r6
   11e50:	bl	10ec0 <__uflow@plt>
   11e54:	ldr	r4, [r7, #3508]	; 0xdb4
   11e58:	cmn	r0, #1
   11e5c:	mov	r5, r0
   11e60:	bne	11e04 <__assert_fail@plt+0xecc>
   11e64:	ldr	r3, [sp, #8]
   11e68:	ldr	r9, [r3]
   11e6c:	ldr	r3, [pc, #508]	; 12070 <__assert_fail@plt+0x1138>
   11e70:	ldr	r2, [r7, #3472]	; 0xd90
   11e74:	ldr	r0, [pc, #508]	; 12078 <__assert_fail@plt+0x1140>
   11e78:	ldr	r3, [r3]
   11e7c:	mov	sl, r3
   11e80:	ldr	r8, [r3]
   11e84:	str	r3, [sp]
   11e88:	sub	r4, r4, r8
   11e8c:	str	r4, [r3, #4]
   11e90:	add	r3, r4, r2
   11e94:	ldrb	r1, [r8]
   11e98:	str	r3, [sp, #4]
   11e9c:	str	r3, [r7, #3472]	; 0xd90
   11ea0:	bl	10e54 <strchr@plt>
   11ea4:	sub	r4, r4, #1
   11ea8:	ldrb	r2, [sl, #12]
   11eac:	ldrb	ip, [r8, r4]
   11eb0:	add	r1, r8, r4
   11eb4:	bic	r2, r2, #1
   11eb8:	lsl	ip, ip, #1
   11ebc:	ldrh	r3, [r9, ip]
   11ec0:	and	r3, r3, #4
   11ec4:	cmp	r0, #0
   11ec8:	moveq	r0, r2
   11ecc:	orrne	r0, r2, #1
   11ed0:	bic	r0, r0, #4
   11ed4:	cmp	r8, r1
   11ed8:	orr	r0, r3, r0
   11edc:	strb	r0, [sl, #12]
   11ee0:	ldrbcs	r9, [r8, r4]
   11ee4:	bcs	11f18 <__assert_fail@plt+0xfe0>
   11ee8:	mov	r4, r1
   11eec:	b	11ef8 <__assert_fail@plt+0xfc0>
   11ef0:	cmp	r4, r8
   11ef4:	beq	12034 <__assert_fail@plt+0x10fc>
   11ef8:	ldrb	r9, [r4]
   11efc:	ldr	r0, [pc, #376]	; 1207c <__assert_fail@plt+0x1144>
   11f00:	mov	sl, r4
   11f04:	mov	r1, r9
   11f08:	bl	10e54 <strchr@plt>
   11f0c:	sub	r4, r4, #1
   11f10:	cmp	r0, #0
   11f14:	bne	11ef0 <__assert_fail@plt+0xfb8>
   11f18:	mov	r1, r9
   11f1c:	ldr	r0, [pc, #348]	; 12080 <__assert_fail@plt+0x1148>
   11f20:	bl	10e54 <strchr@plt>
   11f24:	ldr	r2, [sp]
   11f28:	mov	r1, r5
   11f2c:	ldrb	r3, [r2, #12]
   11f30:	bic	r3, r3, #2
   11f34:	cmp	r0, #0
   11f38:	movne	r0, #2
   11f3c:	moveq	r0, #0
   11f40:	orr	r0, r0, r3
   11f44:	strb	r0, [r2, #12]
   11f48:	mov	r0, r6
   11f4c:	bl	117e4 <__assert_fail@plt+0x8ac>
   11f50:	ldr	r3, [pc, #280]	; 12070 <__assert_fail@plt+0x1138>
   11f54:	ldr	r2, [r7, #3472]	; 0xd90
   11f58:	ldr	r1, [sp, #4]
   11f5c:	ldr	r3, [r3]
   11f60:	sub	r2, r2, r1
   11f64:	str	r2, [r3, #8]
   11f68:	cmn	r0, #1
   11f6c:	mov	r5, r0
   11f70:	beq	12050 <__assert_fail@plt+0x1118>
   11f74:	ldrb	r1, [r3, #12]
   11f78:	ands	r0, r1, #2
   11f7c:	beq	1203c <__assert_fail@plt+0x1104>
   11f80:	sub	r0, r5, #10
   11f84:	clz	r0, r0
   11f88:	lsr	r0, r0, #5
   11f8c:	cmp	r2, #1
   11f90:	movle	r2, r0
   11f94:	orrgt	r2, r0, #1
   11f98:	cmp	r2, #0
   11f9c:	biceq	r1, r1, #8
   11fa0:	strbeq	r1, [r3, #12]
   11fa4:	beq	11fc4 <__assert_fail@plt+0x108c>
   11fa8:	mov	r1, #1
   11fac:	ldrb	r2, [r3, #12]
   11fb0:	cmp	r0, #0
   11fb4:	bic	r2, r2, #8
   11fb8:	orr	r2, r2, r1, lsl #3
   11fbc:	strb	r2, [r3, #12]
   11fc0:	bne	11fd4 <__assert_fail@plt+0x109c>
   11fc4:	ldr	r2, [pc, #184]	; 12084 <__assert_fail@plt+0x114c>
   11fc8:	ldrb	r2, [r2, #328]	; 0x148
   11fcc:	cmp	r2, #0
   11fd0:	beq	11fe8 <__assert_fail@plt+0x10b0>
   11fd4:	ldrb	r2, [r3, #12]
   11fd8:	tst	r2, #8
   11fdc:	moveq	r2, #1
   11fe0:	movne	r2, #2
   11fe4:	str	r2, [r3, #8]
   11fe8:	ldr	r2, [sp, #12]
   11fec:	cmp	r3, r2
   11ff0:	beq	12060 <__assert_fail@plt+0x1128>
   11ff4:	ldr	r3, [pc, #116]	; 12070 <__assert_fail@plt+0x1138>
   11ff8:	cmp	r5, #10
   11ffc:	cmnne	r5, #1
   12000:	ldr	r9, [r3]
   12004:	add	r9, r9, #28
   12008:	str	r9, [r3]
   1200c:	bne	11df0 <__assert_fail@plt+0xeb8>
   12010:	mov	r0, r6
   12014:	add	sp, sp, #20
   12018:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1201c:	b	11868 <__assert_fail@plt+0x930>
   12020:	mov	r0, r8
   12024:	bl	11a58 <__assert_fail@plt+0xb20>
   12028:	bl	11c78 <__assert_fail@plt+0xd40>
   1202c:	ldr	r4, [r7, #3508]	; 0xdb4
   12030:	b	11e20 <__assert_fail@plt+0xee8>
   12034:	ldrb	r9, [sl, #-1]
   12038:	b	11f18 <__assert_fail@plt+0xfe0>
   1203c:	mov	r1, r0
   12040:	sub	r0, r5, #10
   12044:	clz	r0, r0
   12048:	lsr	r0, r0, #5
   1204c:	b	11fac <__assert_fail@plt+0x1074>
   12050:	ldrb	r2, [r3, #12]
   12054:	orr	r2, r2, #8
   12058:	strb	r2, [r3, #12]
   1205c:	b	11fd4 <__assert_fail@plt+0x109c>
   12060:	mov	r0, #1
   12064:	bl	11a58 <__assert_fail@plt+0xb20>
   12068:	bl	11c78 <__assert_fail@plt+0xd40>
   1206c:	b	11ff4 <__assert_fail@plt+0x10bc>
   12070:	andeq	r8, r2, r0, ror #2
   12074:	andeq	lr, r2, r8, asr #2
   12078:	andeq	r6, r1, r8, asr #16
   1207c:	andeq	r6, r1, r0, asr r8
   12080:	andeq	r6, r1, r8, asr r8
   12084:	andeq	r0, r3, r0, asr #2
   12088:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1208c:	sub	sp, sp, #20
   12090:	ldr	r6, [pc, #1472]	; 12658 <__assert_fail@plt+0x1720>
   12094:	str	r1, [sp, #4]
   12098:	mov	r5, r0
   1209c:	mov	r1, #2
   120a0:	bl	12acc <__assert_fail@plt+0x1b94>
   120a4:	mov	r8, #0
   120a8:	mov	r0, r5
   120ac:	strb	r8, [r6, #3476]	; 0xd94
   120b0:	str	r8, [r6, #3456]	; 0xd80
   120b4:	bl	11868 <__assert_fail@plt+0x930>
   120b8:	ldr	sl, [pc, #1436]	; 1265c <__assert_fail@plt+0x1724>
   120bc:	ldr	fp, [pc, #1436]	; 12660 <__assert_fail@plt+0x1728>
   120c0:	add	r2, r6, #3504	; 0xdb0
   120c4:	add	r3, r2, #8
   120c8:	str	r3, [sp, #8]
   120cc:	mov	r4, r0
   120d0:	str	r0, [sl, #332]	; 0x14c
   120d4:	str	r8, [r6, #3468]	; 0xd8c
   120d8:	cmn	r4, #1
   120dc:	cmpne	r4, #10
   120e0:	ldr	r0, [r6, #3484]	; 0xd9c
   120e4:	moveq	r7, #1
   120e8:	movne	r7, #0
   120ec:	beq	121a8 <__assert_fail@plt+0x1270>
   120f0:	ldr	r3, [r6, #3488]	; 0xda0
   120f4:	cmp	r0, r3
   120f8:	blt	121a8 <__assert_fail@plt+0x1270>
   120fc:	ldr	r3, [sl, #336]	; 0x150
   12100:	ldr	r2, [r6, #3472]	; 0xd90
   12104:	add	r3, r0, r3
   12108:	cmp	r3, r2
   1210c:	ble	12368 <__assert_fail@plt+0x1430>
   12110:	cmp	r2, r0
   12114:	str	r8, [r6, #3496]	; 0xda8
   12118:	bgt	121b8 <__assert_fail@plt+0x1280>
   1211c:	cmp	r4, #10
   12120:	cmnne	r4, #1
   12124:	movne	r7, #1
   12128:	moveq	r7, #0
   1212c:	beq	12234 <__assert_fail@plt+0x12fc>
   12130:	bl	1195c <__assert_fail@plt+0xa24>
   12134:	ldr	r3, [r6, #3496]	; 0xda8
   12138:	ldr	r2, [r6, #3472]	; 0xd90
   1213c:	ldr	r9, [r6, #3492]	; 0xda4
   12140:	cmp	r2, r3
   12144:	moveq	r0, r8
   12148:	beq	12244 <__assert_fail@plt+0x130c>
   1214c:	ldrb	r1, [r9]
   12150:	cmp	r1, #0
   12154:	bne	12180 <__assert_fail@plt+0x1248>
   12158:	b	12240 <__assert_fail@plt+0x1308>
   1215c:	ldr	r3, [r6, #3496]	; 0xda8
   12160:	ldr	r2, [r6, #3472]	; 0xd90
   12164:	add	r3, r3, #1
   12168:	cmp	r3, r2
   1216c:	str	r3, [r6, #3496]	; 0xda8
   12170:	beq	121ec <__assert_fail@plt+0x12b4>
   12174:	ldrb	r1, [r9, #1]!
   12178:	cmp	r1, #0
   1217c:	beq	121ec <__assert_fail@plt+0x12b4>
   12180:	ldr	r0, [fp]
   12184:	ldr	r3, [r0, #20]
   12188:	ldr	r2, [r0, #24]
   1218c:	cmp	r3, r2
   12190:	addcc	r2, r3, #1
   12194:	strcc	r2, [r0, #20]
   12198:	strbcc	r1, [r3]
   1219c:	bcc	1215c <__assert_fail@plt+0x1224>
   121a0:	bl	10ecc <__overflow@plt>
   121a4:	b	1215c <__assert_fail@plt+0x1224>
   121a8:	ldr	r2, [r6, #3472]	; 0xd90
   121ac:	str	r8, [r6, #3496]	; 0xda8
   121b0:	cmp	r2, r0
   121b4:	ble	1211c <__assert_fail@plt+0x11e4>
   121b8:	bl	1195c <__assert_fail@plt+0xa24>
   121bc:	ldr	r3, [r6, #3496]	; 0xda8
   121c0:	ldr	r2, [r6, #3472]	; 0xd90
   121c4:	ldr	r9, [r6, #3492]	; 0xda4
   121c8:	cmp	r2, r3
   121cc:	beq	12410 <__assert_fail@plt+0x14d8>
   121d0:	ldrb	r1, [r9]
   121d4:	cmp	r4, #10
   121d8:	cmnne	r4, #1
   121dc:	movne	r7, #1
   121e0:	moveq	r7, #0
   121e4:	cmp	r1, #0
   121e8:	bne	12180 <__assert_fail@plt+0x1248>
   121ec:	cmp	r7, #0
   121f0:	bne	12240 <__assert_fail@plt+0x1308>
   121f4:	cmn	r4, #1
   121f8:	beq	122c0 <__assert_fail@plt+0x1388>
   121fc:	ldr	r0, [fp]
   12200:	ldr	r2, [r0, #24]
   12204:	ldr	r3, [r0, #20]
   12208:	cmp	r3, r2
   1220c:	addcc	r2, r3, #1
   12210:	strcc	r2, [r0, #20]
   12214:	movcc	r2, #10
   12218:	strbcc	r2, [r3]
   1221c:	bcs	1235c <__assert_fail@plt+0x1424>
   12220:	mov	r0, r5
   12224:	bl	11868 <__assert_fail@plt+0x930>
   12228:	mov	r4, r0
   1222c:	b	120d8 <__assert_fail@plt+0x11a0>
   12230:	mov	r4, r1
   12234:	cmn	r4, #1
   12238:	bne	121fc <__assert_fail@plt+0x12c4>
   1223c:	b	12300 <__assert_fail@plt+0x13c8>
   12240:	sub	r0, r2, r3
   12244:	bl	1195c <__assert_fail@plt+0xa24>
   12248:	mov	r1, r4
   1224c:	b	1226c <__assert_fail@plt+0x1334>
   12250:	ldr	r3, [r5, #4]
   12254:	ldr	r2, [r5, #8]
   12258:	cmp	r3, r2
   1225c:	bcs	122b0 <__assert_fail@plt+0x1378>
   12260:	add	r2, r3, #1
   12264:	str	r2, [r5, #4]
   12268:	ldrb	r1, [r3]
   1226c:	cmp	r1, #10
   12270:	cmnne	r1, #1
   12274:	beq	12230 <__assert_fail@plt+0x12f8>
   12278:	ldr	r0, [fp]
   1227c:	ldr	r3, [r0, #20]
   12280:	ldr	r2, [r0, #24]
   12284:	cmp	r3, r2
   12288:	addcc	r2, r3, #1
   1228c:	strcc	r2, [r0, #20]
   12290:	strbcc	r1, [r3]
   12294:	bcc	12250 <__assert_fail@plt+0x1318>
   12298:	uxtb	r1, r1
   1229c:	bl	10ecc <__overflow@plt>
   122a0:	ldr	r3, [r5, #4]
   122a4:	ldr	r2, [r5, #8]
   122a8:	cmp	r3, r2
   122ac:	bcc	12260 <__assert_fail@plt+0x1328>
   122b0:	mov	r0, r5
   122b4:	bl	10ec0 <__uflow@plt>
   122b8:	mov	r1, r0
   122bc:	b	1226c <__assert_fail@plt+0x1334>
   122c0:	ldr	r3, [r6, #3484]	; 0xd9c
   122c4:	ldr	r1, [r6, #3480]	; 0xd98
   122c8:	ldr	r2, [r6, #3472]	; 0xd90
   122cc:	add	r3, r3, r1
   122d0:	cmp	r3, r2
   122d4:	bgt	12300 <__assert_fail@plt+0x13c8>
   122d8:	ldr	r3, [pc, #896]	; 12660 <__assert_fail@plt+0x1728>
   122dc:	ldr	r0, [r3]
   122e0:	ldr	r3, [r0, #20]
   122e4:	ldr	r2, [r0, #24]
   122e8:	cmp	r3, r2
   122ec:	addcc	r1, r3, #1
   122f0:	movcc	r2, #10
   122f4:	strcc	r1, [r0, #20]
   122f8:	strbcc	r2, [r3]
   122fc:	bcs	12424 <__assert_fail@plt+0x14ec>
   12300:	ldr	r1, [pc, #860]	; 12664 <__assert_fail@plt+0x172c>
   12304:	ldr	r3, [r5]
   12308:	mvn	r2, #0
   1230c:	ldr	r1, [r1]
   12310:	ands	r4, r3, #32
   12314:	moveq	r6, r2
   12318:	movne	r6, #0
   1231c:	cmp	r5, r1
   12320:	str	r2, [sl, #332]	; 0x14c
   12324:	beq	125c4 <__assert_fail@plt+0x168c>
   12328:	mov	r0, r5
   1232c:	bl	12b00 <__assert_fail@plt+0x1bc8>
   12330:	cmp	r0, #0
   12334:	beq	124c8 <__assert_fail@plt+0x1590>
   12338:	cmp	r4, #0
   1233c:	beq	124c0 <__assert_fail@plt+0x1588>
   12340:	mov	r2, #5
   12344:	ldr	r1, [pc, #796]	; 12668 <__assert_fail@plt+0x1730>
   12348:	mov	r0, #0
   1234c:	bl	10d7c <dcgettext@plt>
   12350:	mov	r6, #0
   12354:	mov	r4, r0
   12358:	b	124dc <__assert_fail@plt+0x15a4>
   1235c:	mov	r1, #10
   12360:	bl	10ecc <__overflow@plt>
   12364:	b	12220 <__assert_fail@plt+0x12e8>
   12368:	mov	r3, r0
   1236c:	str	r3, [r6, #3504]	; 0xdb0
   12370:	ldr	r3, [sp, #8]
   12374:	mov	r1, r4
   12378:	str	r3, [r6, #3508]	; 0xdb4
   1237c:	ldr	r3, [pc, #744]	; 1266c <__assert_fail@plt+0x1734>
   12380:	str	r2, [r6, #3460]	; 0xd84
   12384:	mov	r0, r5
   12388:	add	r2, r3, #8
   1238c:	str	r2, [r3]
   12390:	bl	11dbc <__assert_fail@plt+0xe84>
   12394:	ldr	r9, [r6, #3484]	; 0xd9c
   12398:	ldr	r3, [r6, #3504]	; 0xdb0
   1239c:	cmp	r9, r3
   123a0:	mov	r4, r0
   123a4:	beq	12498 <__assert_fail@plt+0x1560>
   123a8:	mov	r0, r7
   123ac:	str	r3, [sp, #12]
   123b0:	bl	11a58 <__assert_fail@plt+0xb20>
   123b4:	ldrb	r2, [r6, #3500]	; 0xdac
   123b8:	cmp	r2, #0
   123bc:	bne	123d8 <__assert_fail@plt+0x14a0>
   123c0:	ldrb	r2, [r6, #3501]	; 0xdad
   123c4:	ldr	r3, [sp, #12]
   123c8:	cmp	r2, #0
   123cc:	beq	12430 <__assert_fail@plt+0x14f8>
   123d0:	cmp	r9, r3
   123d4:	beq	125d0 <__assert_fail@plt+0x1698>
   123d8:	ldr	r3, [pc, #652]	; 1266c <__assert_fail@plt+0x1734>
   123dc:	add	r3, r3, #8
   123e0:	ldr	r7, [r3, #-8]
   123e4:	cmp	r7, r3
   123e8:	bls	12644 <__assert_fail@plt+0x170c>
   123ec:	ldrb	r3, [r7, #-16]
   123f0:	str	r4, [sl, #332]	; 0x14c
   123f4:	orr	r3, r3, #10
   123f8:	strb	r3, [r7, #-16]
   123fc:	bl	115e4 <__assert_fail@plt+0x6ac>
   12400:	mov	r0, r7
   12404:	bl	11c2c <__assert_fail@plt+0xcf4>
   12408:	ldr	r4, [sl, #332]	; 0x14c
   1240c:	b	120d4 <__assert_fail@plt+0x119c>
   12410:	cmp	r4, #10
   12414:	cmnne	r4, #1
   12418:	movne	r7, #1
   1241c:	moveq	r7, #0
   12420:	b	121ec <__assert_fail@plt+0x12b4>
   12424:	mov	r1, #10
   12428:	bl	10ecc <__overflow@plt>
   1242c:	b	12300 <__assert_fail@plt+0x13c8>
   12430:	ldrb	r2, [r6, #3502]	; 0xdae
   12434:	cmp	r2, #0
   12438:	bne	1250c <__assert_fail@plt+0x15d4>
   1243c:	cmp	r9, r3
   12440:	bne	123d8 <__assert_fail@plt+0x14a0>
   12444:	ldr	r3, [sl, #336]	; 0x150
   12448:	ldr	r2, [r6, #3472]	; 0xd90
   1244c:	add	r9, r9, r3
   12450:	cmp	r2, r9
   12454:	blt	123d8 <__assert_fail@plt+0x14a0>
   12458:	cmp	r4, #10
   1245c:	cmnne	r4, #1
   12460:	beq	123d8 <__assert_fail@plt+0x14a0>
   12464:	ldr	r3, [r6, #3456]	; 0xd80
   12468:	cmp	r3, r2
   1246c:	moveq	r1, r4
   12470:	bne	123d8 <__assert_fail@plt+0x14a0>
   12474:	mov	r0, r5
   12478:	bl	11dbc <__assert_fail@plt+0xe84>
   1247c:	ldr	r3, [r6, #3484]	; 0xd9c
   12480:	ldr	r2, [r6, #3504]	; 0xdb0
   12484:	cmp	r3, r2
   12488:	mov	r1, r0
   1248c:	beq	12594 <__assert_fail@plt+0x165c>
   12490:	mov	r4, r1
   12494:	b	123d8 <__assert_fail@plt+0x14a0>
   12498:	ldr	r2, [sl, #336]	; 0x150
   1249c:	ldr	r1, [r6, #3472]	; 0xd90
   124a0:	add	r2, r9, r2
   124a4:	cmp	r2, r1
   124a8:	bgt	123a8 <__assert_fail@plt+0x1470>
   124ac:	cmp	r0, #10
   124b0:	cmnne	r0, #1
   124b4:	movne	r7, #1
   124b8:	moveq	r7, #0
   124bc:	b	123a8 <__assert_fail@plt+0x1470>
   124c0:	bl	10e60 <__errno_location@plt>
   124c4:	ldr	r6, [r0]
   124c8:	cmp	r6, #0
   124cc:	movlt	r0, #1
   124d0:	blt	12504 <__assert_fail@plt+0x15cc>
   124d4:	ldrne	r4, [pc, #404]	; 12670 <__assert_fail@plt+0x1738>
   124d8:	beq	12340 <__assert_fail@plt+0x1408>
   124dc:	ldr	r2, [sp, #4]
   124e0:	mov	r1, #3
   124e4:	mov	r0, #0
   124e8:	bl	149dc <__assert_fail@plt+0x3aa4>
   124ec:	mov	r2, r4
   124f0:	mov	r1, r6
   124f4:	mov	r3, r0
   124f8:	mov	r0, #0
   124fc:	bl	10de8 <error@plt>
   12500:	mov	r0, #0
   12504:	add	sp, sp, #20
   12508:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1250c:	cmp	r9, r3
   12510:	bne	123d8 <__assert_fail@plt+0x14a0>
   12514:	ldr	r2, [sl, #336]	; 0x150
   12518:	ldr	r3, [r6, #3472]	; 0xd90
   1251c:	add	r9, r9, r2
   12520:	cmp	r9, r3
   12524:	bgt	123d8 <__assert_fail@plt+0x14a0>
   12528:	cmp	r4, #10
   1252c:	cmnne	r4, #1
   12530:	beq	123d8 <__assert_fail@plt+0x14a0>
   12534:	ldr	r2, [r6, #3460]	; 0xd84
   12538:	cmp	r3, r2
   1253c:	movne	r1, r4
   12540:	bne	12574 <__assert_fail@plt+0x163c>
   12544:	b	123d8 <__assert_fail@plt+0x14a0>
   12548:	ldr	r0, [sl, #336]	; 0x150
   1254c:	ldr	r2, [r6, #3472]	; 0xd90
   12550:	add	r3, r3, r0
   12554:	cmp	r3, r2
   12558:	bgt	12490 <__assert_fail@plt+0x1558>
   1255c:	cmp	r1, #10
   12560:	cmnne	r1, #1
   12564:	beq	12490 <__assert_fail@plt+0x1558>
   12568:	ldr	r3, [r6, #3456]	; 0xd80
   1256c:	cmp	r2, r3
   12570:	bne	12490 <__assert_fail@plt+0x1558>
   12574:	mov	r0, r5
   12578:	bl	11dbc <__assert_fail@plt+0xe84>
   1257c:	ldr	r3, [r6, #3484]	; 0xd9c
   12580:	ldr	r2, [r6, #3504]	; 0xdb0
   12584:	cmp	r3, r2
   12588:	mov	r1, r0
   1258c:	bne	12490 <__assert_fail@plt+0x1558>
   12590:	b	12548 <__assert_fail@plt+0x1610>
   12594:	ldr	r0, [sl, #336]	; 0x150
   12598:	ldr	r2, [r6, #3472]	; 0xd90
   1259c:	add	r3, r3, r0
   125a0:	cmp	r3, r2
   125a4:	bgt	12490 <__assert_fail@plt+0x1558>
   125a8:	cmp	r1, #10
   125ac:	cmnne	r1, #1
   125b0:	beq	12490 <__assert_fail@plt+0x1558>
   125b4:	ldr	r3, [r6, #3456]	; 0xd80
   125b8:	cmp	r2, r3
   125bc:	beq	12474 <__assert_fail@plt+0x153c>
   125c0:	b	12490 <__assert_fail@plt+0x1558>
   125c4:	mov	r0, r5
   125c8:	bl	10efc <clearerr_unlocked@plt>
   125cc:	b	124c8 <__assert_fail@plt+0x1590>
   125d0:	ldr	r3, [sl, #336]	; 0x150
   125d4:	ldr	r2, [r6, #3472]	; 0xd90
   125d8:	add	r9, r9, r3
   125dc:	cmp	r9, r2
   125e0:	bgt	123d8 <__assert_fail@plt+0x14a0>
   125e4:	cmp	r4, #10
   125e8:	cmnne	r4, #1
   125ec:	beq	123d8 <__assert_fail@plt+0x14a0>
   125f0:	mov	r1, r4
   125f4:	b	12624 <__assert_fail@plt+0x16ec>
   125f8:	ldr	r0, [sl, #336]	; 0x150
   125fc:	ldr	r2, [r6, #3472]	; 0xd90
   12600:	add	r3, r3, r0
   12604:	cmp	r3, r2
   12608:	bgt	12490 <__assert_fail@plt+0x1558>
   1260c:	cmp	r1, #10
   12610:	cmnne	r1, #1
   12614:	beq	12490 <__assert_fail@plt+0x1558>
   12618:	ldr	r3, [r6, #3456]	; 0xd80
   1261c:	cmp	r2, r3
   12620:	bne	12490 <__assert_fail@plt+0x1558>
   12624:	mov	r0, r5
   12628:	bl	11dbc <__assert_fail@plt+0xe84>
   1262c:	ldr	r3, [r6, #3484]	; 0xd9c
   12630:	ldr	r2, [r6, #3504]	; 0xdb0
   12634:	cmp	r3, r2
   12638:	mov	r1, r0
   1263c:	bne	12490 <__assert_fail@plt+0x1558>
   12640:	b	125f8 <__assert_fail@plt+0x16c0>
   12644:	ldr	r3, [pc, #40]	; 12674 <__assert_fail@plt+0x173c>
   12648:	ldr	r2, [pc, #40]	; 12678 <__assert_fail@plt+0x1740>
   1264c:	ldr	r1, [pc, #40]	; 1267c <__assert_fail@plt+0x1744>
   12650:	ldr	r0, [pc, #40]	; 12680 <__assert_fail@plt+0x1748>
   12654:	bl	10f38 <__assert_fail@plt>
   12658:	andeq	lr, r2, r8, asr #2
   1265c:	andeq	r0, r3, r0, asr #2
   12660:	andeq	r8, r2, r4, asr r1
   12664:	andeq	r8, r2, r0, asr r1
   12668:	andeq	r6, r1, ip, ror r8
   1266c:	andeq	r8, r2, r0, ror #2
   12670:	andeq	r6, r1, ip, asr #30
   12674:	andeq	r6, r1, r0, ror #14
   12678:	andeq	r0, r0, pc, ror #4
   1267c:	andeq	r6, r1, ip, asr r8
   12680:	andeq	r6, r1, r8, ror #16
   12684:	subs	r6, r0, #0
   12688:	push	{r7, lr}
   1268c:	sub	sp, sp, #56	; 0x38
   12690:	beq	126cc <__assert_fail@plt+0x1794>
   12694:	ldr	r3, [pc, #708]	; 12960 <__assert_fail@plt+0x1a28>
   12698:	mov	r2, #5
   1269c:	ldr	r1, [pc, #704]	; 12964 <__assert_fail@plt+0x1a2c>
   126a0:	mov	r0, #0
   126a4:	ldr	r4, [r3]
   126a8:	bl	10d7c <dcgettext@plt>
   126ac:	ldr	r3, [pc, #692]	; 12968 <__assert_fail@plt+0x1a30>
   126b0:	mov	r1, #1
   126b4:	ldr	r3, [r3]
   126b8:	mov	r2, r0
   126bc:	mov	r0, r4
   126c0:	bl	10e9c <__fprintf_chk@plt>
   126c4:	mov	r0, r6
   126c8:	bl	10e3c <exit@plt>
   126cc:	mov	r2, #5
   126d0:	ldr	r1, [pc, #660]	; 1296c <__assert_fail@plt+0x1a34>
   126d4:	bl	10d7c <dcgettext@plt>
   126d8:	ldr	r3, [pc, #648]	; 12968 <__assert_fail@plt+0x1a30>
   126dc:	ldr	r7, [pc, #652]	; 12970 <__assert_fail@plt+0x1a38>
   126e0:	ldr	r4, [pc, #652]	; 12974 <__assert_fail@plt+0x1a3c>
   126e4:	ldr	r2, [r3]
   126e8:	mov	r1, r0
   126ec:	mov	r0, #1
   126f0:	bl	10e84 <__printf_chk@plt>
   126f4:	mov	r2, #5
   126f8:	ldr	r1, [pc, #632]	; 12978 <__assert_fail@plt+0x1a40>
   126fc:	mov	r0, r6
   12700:	bl	10d7c <dcgettext@plt>
   12704:	ldr	r1, [r7]
   12708:	bl	10cd4 <fputs_unlocked@plt>
   1270c:	mov	r2, #5
   12710:	ldr	r1, [pc, #612]	; 1297c <__assert_fail@plt+0x1a44>
   12714:	mov	r0, r6
   12718:	bl	10d7c <dcgettext@plt>
   1271c:	ldr	r1, [r7]
   12720:	bl	10cd4 <fputs_unlocked@plt>
   12724:	mov	r2, #5
   12728:	ldr	r1, [pc, #592]	; 12980 <__assert_fail@plt+0x1a48>
   1272c:	mov	r0, r6
   12730:	bl	10d7c <dcgettext@plt>
   12734:	ldr	r1, [r7]
   12738:	bl	10cd4 <fputs_unlocked@plt>
   1273c:	mov	r2, #5
   12740:	ldr	r1, [pc, #572]	; 12984 <__assert_fail@plt+0x1a4c>
   12744:	mov	r0, r6
   12748:	bl	10d7c <dcgettext@plt>
   1274c:	ldr	r1, [r7]
   12750:	bl	10cd4 <fputs_unlocked@plt>
   12754:	mov	r2, #5
   12758:	ldr	r1, [pc, #552]	; 12988 <__assert_fail@plt+0x1a50>
   1275c:	mov	r0, r6
   12760:	bl	10d7c <dcgettext@plt>
   12764:	ldr	r1, [r7]
   12768:	bl	10cd4 <fputs_unlocked@plt>
   1276c:	mov	r2, #5
   12770:	ldr	r1, [pc, #532]	; 1298c <__assert_fail@plt+0x1a54>
   12774:	mov	r0, r6
   12778:	bl	10d7c <dcgettext@plt>
   1277c:	ldr	r1, [r7]
   12780:	bl	10cd4 <fputs_unlocked@plt>
   12784:	mov	r2, #5
   12788:	ldr	r1, [pc, #512]	; 12990 <__assert_fail@plt+0x1a58>
   1278c:	mov	r0, r6
   12790:	bl	10d7c <dcgettext@plt>
   12794:	ldr	r1, [r7]
   12798:	bl	10cd4 <fputs_unlocked@plt>
   1279c:	ldm	r4!, {r0, r1, r2, r3}
   127a0:	mov	lr, sp
   127a4:	stmia	lr!, {r0, r1, r2, r3}
   127a8:	ldm	r4!, {r0, r1, r2, r3}
   127ac:	ldr	ip, [sp]
   127b0:	stmia	lr!, {r0, r1, r2, r3}
   127b4:	cmp	ip, #0
   127b8:	ldm	r4!, {r0, r1, r2, r3}
   127bc:	stmia	lr!, {r0, r1, r2, r3}
   127c0:	ldm	r4, {r0, r1}
   127c4:	moveq	r4, sp
   127c8:	stm	lr, {r0, r1}
   127cc:	beq	127fc <__assert_fail@plt+0x18c4>
   127d0:	ldr	r5, [pc, #444]	; 12994 <__assert_fail@plt+0x1a5c>
   127d4:	mov	r4, sp
   127d8:	b	127e8 <__assert_fail@plt+0x18b0>
   127dc:	ldr	ip, [r4, #8]!
   127e0:	cmp	ip, #0
   127e4:	beq	127fc <__assert_fail@plt+0x18c4>
   127e8:	mov	r1, ip
   127ec:	mov	r0, r5
   127f0:	bl	10cec <strcmp@plt>
   127f4:	cmp	r0, #0
   127f8:	bne	127dc <__assert_fail@plt+0x18a4>
   127fc:	ldr	r4, [r4, #4]
   12800:	mov	r2, #5
   12804:	cmp	r4, #0
   12808:	ldr	r1, [pc, #392]	; 12998 <__assert_fail@plt+0x1a60>
   1280c:	beq	128b4 <__assert_fail@plt+0x197c>
   12810:	mov	r0, #0
   12814:	bl	10d7c <dcgettext@plt>
   12818:	ldr	r3, [pc, #380]	; 1299c <__assert_fail@plt+0x1a64>
   1281c:	ldr	r2, [pc, #380]	; 129a0 <__assert_fail@plt+0x1a68>
   12820:	mov	r1, r0
   12824:	mov	r0, #1
   12828:	bl	10e84 <__printf_chk@plt>
   1282c:	mov	r1, #0
   12830:	mov	r0, #5
   12834:	bl	10ed8 <setlocale@plt>
   12838:	cmp	r0, #0
   1283c:	ldreq	r5, [pc, #336]	; 12994 <__assert_fail@plt+0x1a5c>
   12840:	beq	1285c <__assert_fail@plt+0x1924>
   12844:	mov	r2, #3
   12848:	ldr	r1, [pc, #340]	; 129a4 <__assert_fail@plt+0x1a6c>
   1284c:	bl	10f20 <strncmp@plt>
   12850:	ldr	r5, [pc, #316]	; 12994 <__assert_fail@plt+0x1a5c>
   12854:	cmp	r0, #0
   12858:	bne	12944 <__assert_fail@plt+0x1a0c>
   1285c:	mov	r2, #5
   12860:	ldr	r1, [pc, #320]	; 129a8 <__assert_fail@plt+0x1a70>
   12864:	mov	r0, #0
   12868:	bl	10d7c <dcgettext@plt>
   1286c:	ldr	r3, [pc, #288]	; 12994 <__assert_fail@plt+0x1a5c>
   12870:	ldr	r2, [pc, #292]	; 1299c <__assert_fail@plt+0x1a64>
   12874:	mov	r1, r0
   12878:	mov	r0, #1
   1287c:	bl	10e84 <__printf_chk@plt>
   12880:	mov	r2, #5
   12884:	ldr	r1, [pc, #288]	; 129ac <__assert_fail@plt+0x1a74>
   12888:	mov	r0, #0
   1288c:	bl	10d7c <dcgettext@plt>
   12890:	ldr	r2, [pc, #280]	; 129b0 <__assert_fail@plt+0x1a78>
   12894:	cmp	r4, r5
   12898:	ldr	r3, [pc, #276]	; 129b4 <__assert_fail@plt+0x1a7c>
   1289c:	movne	r3, r2
   128a0:	mov	r1, r0
   128a4:	mov	r2, r4
   128a8:	mov	r0, #1
   128ac:	bl	10e84 <__printf_chk@plt>
   128b0:	b	126c4 <__assert_fail@plt+0x178c>
   128b4:	mov	r0, r4
   128b8:	bl	10d7c <dcgettext@plt>
   128bc:	ldr	r3, [pc, #216]	; 1299c <__assert_fail@plt+0x1a64>
   128c0:	ldr	r2, [pc, #216]	; 129a0 <__assert_fail@plt+0x1a68>
   128c4:	mov	r1, r0
   128c8:	mov	r0, #1
   128cc:	bl	10e84 <__printf_chk@plt>
   128d0:	mov	r1, r4
   128d4:	mov	r0, #5
   128d8:	bl	10ed8 <setlocale@plt>
   128dc:	cmp	r0, #0
   128e0:	beq	128f8 <__assert_fail@plt+0x19c0>
   128e4:	mov	r2, #3
   128e8:	ldr	r1, [pc, #180]	; 129a4 <__assert_fail@plt+0x1a6c>
   128ec:	bl	10f20 <strncmp@plt>
   128f0:	cmp	r0, #0
   128f4:	bne	1293c <__assert_fail@plt+0x1a04>
   128f8:	mov	r2, #5
   128fc:	ldr	r1, [pc, #164]	; 129a8 <__assert_fail@plt+0x1a70>
   12900:	mov	r0, #0
   12904:	bl	10d7c <dcgettext@plt>
   12908:	ldr	r3, [pc, #132]	; 12994 <__assert_fail@plt+0x1a5c>
   1290c:	ldr	r2, [pc, #136]	; 1299c <__assert_fail@plt+0x1a64>
   12910:	mov	r4, r3
   12914:	mov	r1, r0
   12918:	mov	r0, #1
   1291c:	bl	10e84 <__printf_chk@plt>
   12920:	ldr	r1, [pc, #132]	; 129ac <__assert_fail@plt+0x1a74>
   12924:	mov	r2, #5
   12928:	mov	r0, #0
   1292c:	bl	10d7c <dcgettext@plt>
   12930:	ldr	r3, [pc, #124]	; 129b4 <__assert_fail@plt+0x1a7c>
   12934:	mov	r1, r0
   12938:	b	128a4 <__assert_fail@plt+0x196c>
   1293c:	ldr	r5, [pc, #80]	; 12994 <__assert_fail@plt+0x1a5c>
   12940:	mov	r4, r5
   12944:	mov	r2, #5
   12948:	ldr	r1, [pc, #104]	; 129b8 <__assert_fail@plt+0x1a80>
   1294c:	mov	r0, #0
   12950:	bl	10d7c <dcgettext@plt>
   12954:	ldr	r1, [r7]
   12958:	bl	10cd4 <fputs_unlocked@plt>
   1295c:	b	1285c <__assert_fail@plt+0x1924>
   12960:	andeq	r8, r2, r8, asr #2
   12964:	andeq	r6, r1, ip, lsl #17
   12968:	muleq	r3, ip, r2
   1296c:			; <UNDEFINED> instruction: 0x000168b4
   12970:	andeq	r8, r2, r4, asr r1
   12974:	andeq	r6, r1, r0, ror r7
   12978:	andeq	r6, r1, r0, ror #17
   1297c:	andeq	r6, r1, r4, ror #18
   12980:	muleq	r1, ip, r9
   12984:	andeq	r6, r1, r8, ror #19
   12988:	andeq	r6, r1, r0, lsl #22
   1298c:	andeq	r6, r1, r0, lsr #24
   12990:	andeq	r6, r1, r0, asr ip
   12994:	andeq	r6, r1, r8, lsl #17
   12998:	andeq	r6, r1, r8, lsl #25
   1299c:	andeq	r6, r1, r0, lsr #25
   129a0:	andeq	r6, r1, r8, asr #25
   129a4:	ldrdeq	r6, [r1], -r8
   129a8:	andeq	r6, r1, r4, lsr #26
   129ac:	andeq	r6, r1, r0, asr #26
   129b0:	andeq	r6, r1, r0, ror #18
   129b4:	andeq	r6, r1, r8, ror #28
   129b8:	ldrdeq	r6, [r1], -ip
   129bc:	ldr	r3, [pc, #4]	; 129c8 <__assert_fail@plt+0x1a90>
   129c0:	str	r0, [r3]
   129c4:	bx	lr
   129c8:	muleq	r3, r4, r2
   129cc:	ldr	r3, [pc, #4]	; 129d8 <__assert_fail@plt+0x1aa0>
   129d0:	strb	r0, [r3, #4]
   129d4:	bx	lr
   129d8:	muleq	r3, r4, r2
   129dc:	ldr	r3, [pc, #192]	; 12aa4 <__assert_fail@plt+0x1b6c>
   129e0:	push	{r4, r5, r6, lr}
   129e4:	sub	sp, sp, #8
   129e8:	ldr	r0, [r3]
   129ec:	bl	15e7c <__assert_fail@plt+0x4f44>
   129f0:	cmp	r0, #0
   129f4:	beq	12a18 <__assert_fail@plt+0x1ae0>
   129f8:	ldr	r4, [pc, #168]	; 12aa8 <__assert_fail@plt+0x1b70>
   129fc:	ldrb	r3, [r4, #4]
   12a00:	cmp	r3, #0
   12a04:	beq	12a34 <__assert_fail@plt+0x1afc>
   12a08:	bl	10e60 <__errno_location@plt>
   12a0c:	ldr	r3, [r0]
   12a10:	cmp	r3, #32
   12a14:	bne	12a34 <__assert_fail@plt+0x1afc>
   12a18:	ldr	r3, [pc, #140]	; 12aac <__assert_fail@plt+0x1b74>
   12a1c:	ldr	r0, [r3]
   12a20:	bl	15e7c <__assert_fail@plt+0x4f44>
   12a24:	cmp	r0, #0
   12a28:	bne	12a7c <__assert_fail@plt+0x1b44>
   12a2c:	add	sp, sp, #8
   12a30:	pop	{r4, r5, r6, pc}
   12a34:	mov	r2, #5
   12a38:	ldr	r1, [pc, #112]	; 12ab0 <__assert_fail@plt+0x1b78>
   12a3c:	mov	r0, #0
   12a40:	bl	10d7c <dcgettext@plt>
   12a44:	ldr	r4, [r4]
   12a48:	cmp	r4, #0
   12a4c:	mov	r5, r0
   12a50:	beq	12a88 <__assert_fail@plt+0x1b50>
   12a54:	bl	10e60 <__errno_location@plt>
   12a58:	ldr	r6, [r0]
   12a5c:	mov	r0, r4
   12a60:	bl	149c8 <__assert_fail@plt+0x3a90>
   12a64:	mov	r1, r6
   12a68:	str	r5, [sp]
   12a6c:	ldr	r2, [pc, #64]	; 12ab4 <__assert_fail@plt+0x1b7c>
   12a70:	mov	r3, r0
   12a74:	mov	r0, #0
   12a78:	bl	10de8 <error@plt>
   12a7c:	ldr	r3, [pc, #52]	; 12ab8 <__assert_fail@plt+0x1b80>
   12a80:	ldr	r0, [r3]
   12a84:	bl	10d28 <_exit@plt>
   12a88:	bl	10e60 <__errno_location@plt>
   12a8c:	mov	r3, r5
   12a90:	ldr	r2, [pc, #36]	; 12abc <__assert_fail@plt+0x1b84>
   12a94:	ldr	r1, [r0]
   12a98:	mov	r0, r4
   12a9c:	bl	10de8 <error@plt>
   12aa0:	b	12a7c <__assert_fail@plt+0x1b44>
   12aa4:	andeq	r8, r2, r4, asr r1
   12aa8:	muleq	r3, r4, r2
   12aac:	andeq	r8, r2, r8, asr #2
   12ab0:	andeq	r6, r1, ip, lsr pc
   12ab4:	andeq	r6, r1, r8, asr #30
   12ab8:	strdeq	r8, [r2], -r0
   12abc:	andeq	r6, r1, ip, asr #30
   12ac0:	push	{r4, r5}
   12ac4:	pop	{r4, r5}
   12ac8:	b	10cf8 <posix_fadvise64@plt>
   12acc:	cmp	r0, #0
   12ad0:	bxeq	lr
   12ad4:	push	{r4, lr}
   12ad8:	sub	sp, sp, #16
   12adc:	mov	r4, r1
   12ae0:	bl	10e90 <fileno@plt>
   12ae4:	mov	r2, #0
   12ae8:	mov	r3, #0
   12aec:	str	r4, [sp, #8]
   12af0:	strd	r2, [sp]
   12af4:	bl	10cf8 <posix_fadvise64@plt>
   12af8:	add	sp, sp, #16
   12afc:	pop	{r4, pc}
   12b00:	push	{r4, r5, lr}
   12b04:	sub	sp, sp, #12
   12b08:	mov	r4, r0
   12b0c:	bl	10e90 <fileno@plt>
   12b10:	cmp	r0, #0
   12b14:	mov	r0, r4
   12b18:	blt	12b94 <__assert_fail@plt+0x1c5c>
   12b1c:	bl	10e0c <__freading@plt>
   12b20:	cmp	r0, #0
   12b24:	bne	12b60 <__assert_fail@plt+0x1c28>
   12b28:	mov	r0, r4
   12b2c:	bl	12ba0 <__assert_fail@plt+0x1c68>
   12b30:	cmp	r0, #0
   12b34:	beq	12b90 <__assert_fail@plt+0x1c58>
   12b38:	bl	10e60 <__errno_location@plt>
   12b3c:	mov	r5, r0
   12b40:	mov	r0, r4
   12b44:	ldr	r4, [r5]
   12b48:	bl	10ea8 <fclose@plt>
   12b4c:	cmp	r4, #0
   12b50:	mvnne	r0, #0
   12b54:	strne	r4, [r5]
   12b58:	add	sp, sp, #12
   12b5c:	pop	{r4, r5, pc}
   12b60:	mov	r0, r4
   12b64:	bl	10e90 <fileno@plt>
   12b68:	mov	r3, #1
   12b6c:	str	r3, [sp]
   12b70:	mov	r2, #0
   12b74:	mov	r3, #0
   12b78:	bl	10db8 <lseek64@plt>
   12b7c:	mvn	r3, #0
   12b80:	mvn	r2, #0
   12b84:	cmp	r1, r3
   12b88:	cmpeq	r0, r2
   12b8c:	bne	12b28 <__assert_fail@plt+0x1bf0>
   12b90:	mov	r0, r4
   12b94:	add	sp, sp, #12
   12b98:	pop	{r4, r5, lr}
   12b9c:	b	10ea8 <fclose@plt>
   12ba0:	push	{r4, lr}
   12ba4:	subs	r4, r0, #0
   12ba8:	sub	sp, sp, #8
   12bac:	beq	12bc8 <__assert_fail@plt+0x1c90>
   12bb0:	bl	10e0c <__freading@plt>
   12bb4:	cmp	r0, #0
   12bb8:	beq	12bc8 <__assert_fail@plt+0x1c90>
   12bbc:	ldr	r3, [r4]
   12bc0:	tst	r3, #256	; 0x100
   12bc4:	bne	12bd8 <__assert_fail@plt+0x1ca0>
   12bc8:	mov	r0, r4
   12bcc:	add	sp, sp, #8
   12bd0:	pop	{r4, lr}
   12bd4:	b	10d04 <fflush@plt>
   12bd8:	mov	r3, #1
   12bdc:	str	r3, [sp]
   12be0:	mov	r2, #0
   12be4:	mov	r3, #0
   12be8:	mov	r0, r4
   12bec:	bl	12c00 <__assert_fail@plt+0x1cc8>
   12bf0:	mov	r0, r4
   12bf4:	add	sp, sp, #8
   12bf8:	pop	{r4, lr}
   12bfc:	b	10d04 <fflush@plt>
   12c00:	push	{r4, r5, r6, r7, r8, lr}
   12c04:	sub	sp, sp, #8
   12c08:	ldmib	r0, {ip, lr}
   12c0c:	mov	r4, r0
   12c10:	ldr	r5, [sp, #32]
   12c14:	cmp	lr, ip
   12c18:	beq	12c30 <__assert_fail@plt+0x1cf8>
   12c1c:	str	r5, [sp, #32]
   12c20:	mov	r0, r4
   12c24:	add	sp, sp, #8
   12c28:	pop	{r4, r5, r6, r7, r8, lr}
   12c2c:	b	10eb4 <fseeko64@plt>
   12c30:	ldr	lr, [r0, #20]
   12c34:	ldr	ip, [r0, #16]
   12c38:	cmp	lr, ip
   12c3c:	bne	12c1c <__assert_fail@plt+0x1ce4>
   12c40:	ldr	r8, [r0, #36]	; 0x24
   12c44:	cmp	r8, #0
   12c48:	bne	12c1c <__assert_fail@plt+0x1ce4>
   12c4c:	mov	r6, r2
   12c50:	mov	r7, r3
   12c54:	bl	10e90 <fileno@plt>
   12c58:	mov	r2, r6
   12c5c:	mov	r3, r7
   12c60:	str	r5, [sp]
   12c64:	bl	10db8 <lseek64@plt>
   12c68:	mvn	r3, #0
   12c6c:	mvn	r2, #0
   12c70:	cmp	r1, r3
   12c74:	cmpeq	r0, r2
   12c78:	beq	12c98 <__assert_fail@plt+0x1d60>
   12c7c:	ldr	r3, [r4]
   12c80:	strd	r0, [r4, #80]	; 0x50
   12c84:	mov	r0, r8
   12c88:	bic	r3, r3, #16
   12c8c:	str	r3, [r4]
   12c90:	add	sp, sp, #8
   12c94:	pop	{r4, r5, r6, r7, r8, pc}
   12c98:	mvn	r0, #0
   12c9c:	b	12c90 <__assert_fail@plt+0x1d58>
   12ca0:	push	{r4, r5, r6, lr}
   12ca4:	subs	r4, r0, #0
   12ca8:	beq	12d1c <__assert_fail@plt+0x1de4>
   12cac:	mov	r1, #47	; 0x2f
   12cb0:	bl	10ee4 <strrchr@plt>
   12cb4:	subs	r5, r0, #0
   12cb8:	beq	12d08 <__assert_fail@plt+0x1dd0>
   12cbc:	add	r6, r5, #1
   12cc0:	sub	r3, r6, r4
   12cc4:	cmp	r3, #6
   12cc8:	ble	12d08 <__assert_fail@plt+0x1dd0>
   12ccc:	mov	r2, #7
   12cd0:	ldr	r1, [pc, #96]	; 12d38 <__assert_fail@plt+0x1e00>
   12cd4:	sub	r0, r5, #6
   12cd8:	bl	10f20 <strncmp@plt>
   12cdc:	cmp	r0, #0
   12ce0:	bne	12d08 <__assert_fail@plt+0x1dd0>
   12ce4:	mov	r2, #3
   12ce8:	ldr	r1, [pc, #76]	; 12d3c <__assert_fail@plt+0x1e04>
   12cec:	mov	r0, r6
   12cf0:	bl	10f20 <strncmp@plt>
   12cf4:	cmp	r0, #0
   12cf8:	movne	r4, r6
   12cfc:	ldreq	r3, [pc, #60]	; 12d40 <__assert_fail@plt+0x1e08>
   12d00:	addeq	r4, r5, #4
   12d04:	streq	r4, [r3]
   12d08:	ldr	r2, [pc, #52]	; 12d44 <__assert_fail@plt+0x1e0c>
   12d0c:	ldr	r3, [pc, #52]	; 12d48 <__assert_fail@plt+0x1e10>
   12d10:	str	r4, [r2]
   12d14:	str	r4, [r3]
   12d18:	pop	{r4, r5, r6, pc}
   12d1c:	ldr	r3, [pc, #40]	; 12d4c <__assert_fail@plt+0x1e14>
   12d20:	mov	r2, #55	; 0x37
   12d24:	mov	r1, #1
   12d28:	ldr	r3, [r3]
   12d2c:	ldr	r0, [pc, #28]	; 12d50 <__assert_fail@plt+0x1e18>
   12d30:	bl	10dac <fwrite@plt>
   12d34:	bl	10f2c <abort@plt>
   12d38:	andeq	r6, r1, r8, lsl #31
   12d3c:	muleq	r1, r0, pc	; <UNPREDICTABLE>
   12d40:	andeq	r8, r2, r8, lsr r1
   12d44:	muleq	r3, ip, r2
   12d48:	andeq	r8, r2, ip, lsr r1
   12d4c:	andeq	r8, r2, r8, asr #2
   12d50:	andeq	r6, r1, r0, asr pc
   12d54:	push	{r4, r5, r6, lr}
   12d58:	mov	r2, #48	; 0x30
   12d5c:	mov	r4, r1
   12d60:	mov	r1, #0
   12d64:	mov	r5, r0
   12d68:	bl	10e78 <memset@plt>
   12d6c:	cmp	r4, #10
   12d70:	beq	12d80 <__assert_fail@plt+0x1e48>
   12d74:	str	r4, [r5]
   12d78:	mov	r0, r5
   12d7c:	pop	{r4, r5, r6, pc}
   12d80:	bl	10f2c <abort@plt>
   12d84:	push	{r4, r5, r6, lr}
   12d88:	mov	r4, r0
   12d8c:	mov	r5, r1
   12d90:	bl	15f50 <__assert_fail@plt+0x5018>
   12d94:	ldrb	r3, [r0]
   12d98:	bic	r3, r3, #32
   12d9c:	cmp	r3, #85	; 0x55
   12da0:	bne	12e00 <__assert_fail@plt+0x1ec8>
   12da4:	ldrb	r3, [r0, #1]
   12da8:	bic	r3, r3, #32
   12dac:	cmp	r3, #84	; 0x54
   12db0:	bne	12e3c <__assert_fail@plt+0x1f04>
   12db4:	ldrb	r3, [r0, #2]
   12db8:	bic	r3, r3, #32
   12dbc:	cmp	r3, #70	; 0x46
   12dc0:	bne	12e3c <__assert_fail@plt+0x1f04>
   12dc4:	ldrb	r3, [r0, #3]
   12dc8:	cmp	r3, #45	; 0x2d
   12dcc:	bne	12e3c <__assert_fail@plt+0x1f04>
   12dd0:	ldrb	r3, [r0, #4]
   12dd4:	cmp	r3, #56	; 0x38
   12dd8:	bne	12e3c <__assert_fail@plt+0x1f04>
   12ddc:	ldrb	r3, [r0, #5]
   12de0:	cmp	r3, #0
   12de4:	bne	12e3c <__assert_fail@plt+0x1f04>
   12de8:	ldrb	r2, [r4]
   12dec:	ldr	r3, [pc, #152]	; 12e8c <__assert_fail@plt+0x1f54>
   12df0:	ldr	r0, [pc, #152]	; 12e90 <__assert_fail@plt+0x1f58>
   12df4:	cmp	r2, #96	; 0x60
   12df8:	movne	r0, r3
   12dfc:	pop	{r4, r5, r6, pc}
   12e00:	cmp	r3, #71	; 0x47
   12e04:	bne	12e3c <__assert_fail@plt+0x1f04>
   12e08:	ldrb	r3, [r0, #1]
   12e0c:	bic	r3, r3, #32
   12e10:	cmp	r3, #66	; 0x42
   12e14:	bne	12e3c <__assert_fail@plt+0x1f04>
   12e18:	ldrb	r3, [r0, #2]
   12e1c:	cmp	r3, #49	; 0x31
   12e20:	bne	12e3c <__assert_fail@plt+0x1f04>
   12e24:	ldrb	r3, [r0, #3]
   12e28:	cmp	r3, #56	; 0x38
   12e2c:	bne	12e3c <__assert_fail@plt+0x1f04>
   12e30:	ldrb	r3, [r0, #4]
   12e34:	cmp	r3, #48	; 0x30
   12e38:	beq	12e50 <__assert_fail@plt+0x1f18>
   12e3c:	ldr	r3, [pc, #80]	; 12e94 <__assert_fail@plt+0x1f5c>
   12e40:	cmp	r5, #9
   12e44:	ldr	r0, [pc, #76]	; 12e98 <__assert_fail@plt+0x1f60>
   12e48:	movne	r0, r3
   12e4c:	pop	{r4, r5, r6, pc}
   12e50:	ldrb	r3, [r0, #5]
   12e54:	cmp	r3, #51	; 0x33
   12e58:	bne	12e3c <__assert_fail@plt+0x1f04>
   12e5c:	ldrb	r3, [r0, #6]
   12e60:	cmp	r3, #48	; 0x30
   12e64:	bne	12e3c <__assert_fail@plt+0x1f04>
   12e68:	ldrb	r3, [r0, #7]
   12e6c:	cmp	r3, #0
   12e70:	bne	12e3c <__assert_fail@plt+0x1f04>
   12e74:	ldrb	r2, [r4]
   12e78:	ldr	r3, [pc, #28]	; 12e9c <__assert_fail@plt+0x1f64>
   12e7c:	ldr	r0, [pc, #28]	; 12ea0 <__assert_fail@plt+0x1f68>
   12e80:	cmp	r2, #96	; 0x60
   12e84:	movne	r0, r3
   12e88:	pop	{r4, r5, r6, pc}
   12e8c:	andeq	r6, r1, ip, ror #31
   12e90:	andeq	r6, r1, r8, ror #31
   12e94:	strdeq	r6, [r1], -r8
   12e98:	andeq	r6, r1, ip, asr #16
   12e9c:	strdeq	r6, [r1], -r4
   12ea0:	strdeq	r6, [r1], -r0
   12ea4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12ea8:	sub	sp, sp, #116	; 0x74
   12eac:	mov	sl, r0
   12eb0:	str	r3, [sp, #24]
   12eb4:	mov	r3, #1
   12eb8:	mov	r8, r1
   12ebc:	str	r2, [sp, #56]	; 0x38
   12ec0:	str	r3, [sp, #36]	; 0x24
   12ec4:	bl	10dc4 <__ctype_get_mb_cur_max@plt>
   12ec8:	ldr	r3, [sp, #156]	; 0x9c
   12ecc:	mov	fp, r8
   12ed0:	mov	r2, #0
   12ed4:	lsr	r3, r3, #1
   12ed8:	and	r3, r3, #1
   12edc:	str	r2, [sp, #68]	; 0x44
   12ee0:	str	r3, [sp, #28]
   12ee4:	str	r2, [sp, #40]	; 0x28
   12ee8:	str	r2, [sp, #44]	; 0x2c
   12eec:	str	r2, [sp, #52]	; 0x34
   12ef0:	str	r2, [sp, #64]	; 0x40
   12ef4:	str	r2, [sp, #72]	; 0x48
   12ef8:	str	sl, [sp, #32]
   12efc:	str	r0, [sp, #76]	; 0x4c
   12f00:	ldr	r3, [sp, #152]	; 0x98
   12f04:	cmp	r3, #10
   12f08:	ldrls	pc, [pc, r3, lsl #2]
   12f0c:	b	140cc <__assert_fail@plt+0x3194>
   12f10:	andeq	r2, r1, ip, lsr pc
   12f14:	andeq	r3, r1, r4, lsr #4
   12f18:	andeq	r3, r1, r8, asr #4
   12f1c:	andeq	r3, r1, ip, ror #4
   12f20:	muleq	r1, r8, r3
   12f24:	andeq	r3, r1, ip, ror #6
   12f28:	andeq	r3, r1, r4, asr #6
   12f2c:	andeq	r3, r1, r0, lsl #5
   12f30:	muleq	r1, r8, r2
   12f34:	muleq	r1, r8, r2
   12f38:	muleq	r1, r8, r2
   12f3c:	mov	r3, #0
   12f40:	mov	r7, r3
   12f44:	str	r3, [sp, #28]
   12f48:	ldr	r3, [sp, #44]	; 0x2c
   12f4c:	mov	sl, #0
   12f50:	eor	r3, r3, #1
   12f54:	str	r3, [sp, #60]	; 0x3c
   12f58:	ldr	r3, [sp, #24]
   12f5c:	cmn	r3, #1
   12f60:	beq	134c4 <__assert_fail@plt+0x258c>
   12f64:	ldr	r3, [sp, #24]
   12f68:	subs	r5, r3, sl
   12f6c:	movne	r5, #1
   12f70:	cmp	r5, #0
   12f74:	beq	134dc <__assert_fail@plt+0x25a4>
   12f78:	ldr	r3, [sp, #152]	; 0x98
   12f7c:	ldr	r8, [sp, #44]	; 0x2c
   12f80:	cmp	r3, #2
   12f84:	moveq	r8, #0
   12f88:	andne	r8, r8, #1
   12f8c:	ldr	r3, [sp, #52]	; 0x34
   12f90:	adds	r9, r3, #0
   12f94:	movne	r9, #1
   12f98:	ands	r6, r9, r8
   12f9c:	beq	13944 <__assert_fail@plt+0x2a0c>
   12fa0:	ldr	r2, [sp, #52]	; 0x34
   12fa4:	ldr	r1, [sp, #24]
   12fa8:	cmp	r2, #1
   12fac:	mov	r3, r2
   12fb0:	movls	r3, #0
   12fb4:	movhi	r3, #1
   12fb8:	cmn	r1, #1
   12fbc:	movne	r3, #0
   12fc0:	cmp	r3, #0
   12fc4:	add	r4, sl, r2
   12fc8:	beq	12fd8 <__assert_fail@plt+0x20a0>
   12fcc:	ldr	r0, [sp, #56]	; 0x38
   12fd0:	bl	10e48 <strlen@plt>
   12fd4:	str	r0, [sp, #24]
   12fd8:	ldr	r3, [sp, #24]
   12fdc:	cmp	r3, r4
   12fe0:	ldr	r3, [sp, #56]	; 0x38
   12fe4:	add	r3, r3, sl
   12fe8:	str	r3, [sp, #48]	; 0x30
   12fec:	bcc	13950 <__assert_fail@plt+0x2a18>
   12ff0:	mov	r0, r3
   12ff4:	ldr	r2, [sp, #52]	; 0x34
   12ff8:	ldr	r1, [sp, #64]	; 0x40
   12ffc:	bl	10d64 <memcmp@plt>
   13000:	cmp	r0, #0
   13004:	bne	13950 <__assert_fail@plt+0x2a18>
   13008:	ldr	r3, [sp, #28]
   1300c:	cmp	r3, #0
   13010:	bne	141cc <__assert_fail@plt+0x3294>
   13014:	ldr	r3, [sp, #48]	; 0x30
   13018:	ldrb	r4, [r3]
   1301c:	cmp	r4, #126	; 0x7e
   13020:	ldrls	pc, [pc, r4, lsl #2]
   13024:	b	138e4 <__assert_fail@plt+0x29ac>
   13028:	andeq	r3, r1, r8, lsl #14
   1302c:	andeq	r3, r1, r4, ror #17
   13030:	andeq	r3, r1, r4, ror #17
   13034:	andeq	r3, r1, r4, ror #17
   13038:	andeq	r3, r1, r4, ror #17
   1303c:	andeq	r3, r1, r4, ror #17
   13040:	andeq	r3, r1, r4, ror #17
   13044:	andeq	r3, r1, ip, ror #13
   13048:	ldrdeq	r3, [r1], -r0
   1304c:	andeq	r3, r1, ip, asr #17
   13050:	andeq	r3, r1, r0, lsr r6
   13054:	andeq	r3, r1, r4, lsl r6
   13058:	andeq	r3, r1, r8, lsr #17
   1305c:	andeq	r3, r1, r4, lsl #17
   13060:	andeq	r3, r1, r4, ror #17
   13064:	andeq	r3, r1, r4, ror #17
   13068:	andeq	r3, r1, r4, ror #17
   1306c:	andeq	r3, r1, r4, ror #17
   13070:	andeq	r3, r1, r4, ror #17
   13074:	andeq	r3, r1, r4, ror #17
   13078:	andeq	r3, r1, r4, ror #17
   1307c:	andeq	r3, r1, r4, ror #17
   13080:	andeq	r3, r1, r4, ror #17
   13084:	andeq	r3, r1, r4, ror #17
   13088:	andeq	r3, r1, r4, ror #17
   1308c:	andeq	r3, r1, r4, ror #17
   13090:	andeq	r3, r1, r4, ror #17
   13094:	andeq	r3, r1, r4, ror #17
   13098:	andeq	r3, r1, r4, ror #17
   1309c:	andeq	r3, r1, r4, ror #17
   130a0:	andeq	r3, r1, r4, ror #17
   130a4:	andeq	r3, r1, r4, ror #17
   130a8:	andeq	r3, r1, r4, asr #17
   130ac:	strdeq	r3, [r1], -r8
   130b0:	strdeq	r3, [r1], -r8
   130b4:	andeq	r3, r1, r8, lsl #8
   130b8:	strdeq	r3, [r1], -r8
   130bc:	muleq	r1, r0, r8
   130c0:	strdeq	r3, [r1], -r8
   130c4:	andeq	r3, r1, r4, ror #16
   130c8:	strdeq	r3, [r1], -r8
   130cc:	strdeq	r3, [r1], -r8
   130d0:	strdeq	r3, [r1], -r8
   130d4:	muleq	r1, r0, r8
   130d8:	muleq	r1, r0, r8
   130dc:	muleq	r1, r0, r8
   130e0:	muleq	r1, r0, r8
   130e4:	muleq	r1, r0, r8
   130e8:	muleq	r1, r0, r8
   130ec:	muleq	r1, r0, r8
   130f0:	muleq	r1, r0, r8
   130f4:	muleq	r1, r0, r8
   130f8:	muleq	r1, r0, r8
   130fc:	muleq	r1, r0, r8
   13100:	muleq	r1, r0, r8
   13104:	muleq	r1, r0, r8
   13108:	muleq	r1, r0, r8
   1310c:	muleq	r1, r0, r8
   13110:	muleq	r1, r0, r8
   13114:	strdeq	r3, [r1], -r8
   13118:	strdeq	r3, [r1], -r8
   1311c:	strdeq	r3, [r1], -r8
   13120:	strdeq	r3, [r1], -r8
   13124:	andeq	r3, r1, r4, lsr r8
   13128:	andeq	r3, r1, r4, ror #17
   1312c:	muleq	r1, r0, r8
   13130:	muleq	r1, r0, r8
   13134:	muleq	r1, r0, r8
   13138:	muleq	r1, r0, r8
   1313c:	muleq	r1, r0, r8
   13140:	muleq	r1, r0, r8
   13144:	muleq	r1, r0, r8
   13148:	muleq	r1, r0, r8
   1314c:	muleq	r1, r0, r8
   13150:	muleq	r1, r0, r8
   13154:	muleq	r1, r0, r8
   13158:	muleq	r1, r0, r8
   1315c:	muleq	r1, r0, r8
   13160:	muleq	r1, r0, r8
   13164:	muleq	r1, r0, r8
   13168:	muleq	r1, r0, r8
   1316c:	muleq	r1, r0, r8
   13170:	muleq	r1, r0, r8
   13174:	muleq	r1, r0, r8
   13178:	muleq	r1, r0, r8
   1317c:	muleq	r1, r0, r8
   13180:	muleq	r1, r0, r8
   13184:	muleq	r1, r0, r8
   13188:	muleq	r1, r0, r8
   1318c:	muleq	r1, r0, r8
   13190:	muleq	r1, r0, r8
   13194:	strdeq	r3, [r1], -r8
   13198:	andeq	r3, r1, r4, asr r5
   1319c:	muleq	r1, r0, r8
   131a0:	strdeq	r3, [r1], -r8
   131a4:	muleq	r1, r0, r8
   131a8:	strdeq	r3, [r1], -r8
   131ac:	muleq	r1, r0, r8
   131b0:	muleq	r1, r0, r8
   131b4:	muleq	r1, r0, r8
   131b8:	muleq	r1, r0, r8
   131bc:	muleq	r1, r0, r8
   131c0:	muleq	r1, r0, r8
   131c4:	muleq	r1, r0, r8
   131c8:	muleq	r1, r0, r8
   131cc:	muleq	r1, r0, r8
   131d0:	muleq	r1, r0, r8
   131d4:	muleq	r1, r0, r8
   131d8:	muleq	r1, r0, r8
   131dc:	muleq	r1, r0, r8
   131e0:	muleq	r1, r0, r8
   131e4:	muleq	r1, r0, r8
   131e8:	muleq	r1, r0, r8
   131ec:	muleq	r1, r0, r8
   131f0:	muleq	r1, r0, r8
   131f4:	muleq	r1, r0, r8
   131f8:	muleq	r1, r0, r8
   131fc:	muleq	r1, r0, r8
   13200:	muleq	r1, r0, r8
   13204:	muleq	r1, r0, r8
   13208:	muleq	r1, r0, r8
   1320c:	muleq	r1, r0, r8
   13210:	muleq	r1, r0, r8
   13214:	andeq	r3, r1, r8, ror #7
   13218:	strdeq	r3, [r1], -r8
   1321c:	andeq	r3, r1, r8, ror #7
   13220:	andeq	r3, r1, r8, lsl #8
   13224:	mov	r3, #1
   13228:	str	r3, [sp, #28]
   1322c:	str	r3, [sp, #52]	; 0x34
   13230:	ldr	r3, [pc, #4000]	; 141d8 <__assert_fail@plt+0x32a0>
   13234:	mov	r7, #0
   13238:	str	r3, [sp, #64]	; 0x40
   1323c:	mov	r3, #2
   13240:	str	r3, [sp, #152]	; 0x98
   13244:	b	12f48 <__assert_fail@plt+0x2010>
   13248:	ldr	r3, [sp, #28]
   1324c:	cmp	r3, #0
   13250:	beq	133ac <__assert_fail@plt+0x2474>
   13254:	mov	r3, #1
   13258:	str	r3, [sp, #52]	; 0x34
   1325c:	ldr	r3, [pc, #3956]	; 141d8 <__assert_fail@plt+0x32a0>
   13260:	mov	r7, #0
   13264:	str	r3, [sp, #64]	; 0x40
   13268:	b	12f48 <__assert_fail@plt+0x2010>
   1326c:	mov	r3, #1
   13270:	str	r3, [sp, #44]	; 0x2c
   13274:	str	r3, [sp, #52]	; 0x34
   13278:	str	r3, [sp, #28]
   1327c:	b	13230 <__assert_fail@plt+0x22f8>
   13280:	mov	r3, #0
   13284:	str	r3, [sp, #28]
   13288:	mov	r3, #1
   1328c:	str	r3, [sp, #44]	; 0x2c
   13290:	mov	r7, #0
   13294:	b	12f48 <__assert_fail@plt+0x2010>
   13298:	ldr	r3, [sp, #152]	; 0x98
   1329c:	cmp	r3, #10
   132a0:	beq	132e4 <__assert_fail@plt+0x23ac>
   132a4:	mov	r2, #5
   132a8:	ldr	r1, [pc, #3884]	; 141dc <__assert_fail@plt+0x32a4>
   132ac:	mov	r0, #0
   132b0:	bl	10d7c <dcgettext@plt>
   132b4:	ldr	r2, [pc, #3872]	; 141dc <__assert_fail@plt+0x32a4>
   132b8:	cmp	r0, r2
   132bc:	str	r0, [sp, #164]	; 0xa4
   132c0:	beq	142c8 <__assert_fail@plt+0x3390>
   132c4:	mov	r2, #5
   132c8:	ldr	r1, [pc, #3848]	; 141d8 <__assert_fail@plt+0x32a0>
   132cc:	mov	r0, #0
   132d0:	bl	10d7c <dcgettext@plt>
   132d4:	ldr	r2, [pc, #3836]	; 141d8 <__assert_fail@plt+0x32a0>
   132d8:	cmp	r0, r2
   132dc:	str	r0, [sp, #168]	; 0xa8
   132e0:	beq	142b8 <__assert_fail@plt+0x3380>
   132e4:	ldr	r7, [sp, #28]
   132e8:	cmp	r7, #0
   132ec:	movne	r7, #0
   132f0:	bne	13324 <__assert_fail@plt+0x23ec>
   132f4:	ldr	r3, [sp, #164]	; 0xa4
   132f8:	ldrb	r3, [r3]
   132fc:	cmp	r3, #0
   13300:	beq	142d8 <__assert_fail@plt+0x33a0>
   13304:	ldr	r2, [sp, #164]	; 0xa4
   13308:	ldr	r1, [sp, #32]
   1330c:	cmp	fp, r7
   13310:	strbhi	r3, [r1, r7]
   13314:	ldrb	r3, [r2, #1]!
   13318:	add	r7, r7, #1
   1331c:	cmp	r3, #0
   13320:	bne	1330c <__assert_fail@plt+0x23d4>
   13324:	ldr	r0, [sp, #168]	; 0xa8
   13328:	bl	10e48 <strlen@plt>
   1332c:	ldr	r3, [sp, #168]	; 0xa8
   13330:	str	r3, [sp, #64]	; 0x40
   13334:	mov	r3, #1
   13338:	str	r3, [sp, #44]	; 0x2c
   1333c:	str	r0, [sp, #52]	; 0x34
   13340:	b	12f48 <__assert_fail@plt+0x2010>
   13344:	mov	r3, #1
   13348:	str	r3, [sp, #44]	; 0x2c
   1334c:	str	r3, [sp, #52]	; 0x34
   13350:	str	r3, [sp, #28]
   13354:	ldr	r3, [pc, #3716]	; 141e0 <__assert_fail@plt+0x32a8>
   13358:	mov	r7, #0
   1335c:	str	r3, [sp, #64]	; 0x40
   13360:	mov	r3, #5
   13364:	str	r3, [sp, #152]	; 0x98
   13368:	b	12f48 <__assert_fail@plt+0x2010>
   1336c:	ldr	r3, [sp, #28]
   13370:	cmp	r3, #0
   13374:	beq	14074 <__assert_fail@plt+0x313c>
   13378:	ldr	r3, [sp, #28]
   1337c:	mov	r7, #0
   13380:	str	r3, [sp, #44]	; 0x2c
   13384:	mov	r3, #1
   13388:	str	r3, [sp, #52]	; 0x34
   1338c:	ldr	r3, [pc, #3660]	; 141e0 <__assert_fail@plt+0x32a8>
   13390:	str	r3, [sp, #64]	; 0x40
   13394:	b	12f48 <__assert_fail@plt+0x2010>
   13398:	ldr	r3, [sp, #28]
   1339c:	cmp	r3, #0
   133a0:	mov	r3, #1
   133a4:	streq	r3, [sp, #44]	; 0x2c
   133a8:	bne	1322c <__assert_fail@plt+0x22f4>
   133ac:	cmp	fp, #0
   133b0:	beq	140a4 <__assert_fail@plt+0x316c>
   133b4:	ldr	r3, [sp, #32]
   133b8:	mov	r2, #39	; 0x27
   133bc:	mov	r7, #1
   133c0:	strb	r2, [r3]
   133c4:	mov	r3, #0
   133c8:	str	r3, [sp, #28]
   133cc:	mov	r3, #1
   133d0:	str	r3, [sp, #52]	; 0x34
   133d4:	ldr	r3, [pc, #3580]	; 141d8 <__assert_fail@plt+0x32a0>
   133d8:	str	r3, [sp, #64]	; 0x40
   133dc:	mov	r3, #2
   133e0:	str	r3, [sp, #152]	; 0x98
   133e4:	b	12f48 <__assert_fail@plt+0x2010>
   133e8:	ldr	r3, [sp, #24]
   133ec:	cmn	r3, #1
   133f0:	beq	14008 <__assert_fail@plt+0x30d0>
   133f4:	ldr	r3, [sp, #24]
   133f8:	subs	r3, r3, #1
   133fc:	movne	r3, #1
   13400:	cmp	r3, #0
   13404:	bne	13410 <__assert_fail@plt+0x24d8>
   13408:	cmp	sl, #0
   1340c:	beq	137fc <__assert_fail@plt+0x28c4>
   13410:	ldr	r3, [sp, #152]	; 0x98
   13414:	mov	r5, #0
   13418:	sub	r2, r3, #2
   1341c:	mov	r8, r5
   13420:	clz	r2, r2
   13424:	lsr	r2, r2, #5
   13428:	ldr	r3, [sp, #60]	; 0x3c
   1342c:	ldr	r1, [sp, #28]
   13430:	orr	r3, r2, r3
   13434:	eor	r3, r3, #1
   13438:	orr	r3, r1, r3
   1343c:	tst	r3, #255	; 0xff
   13440:	bne	13b6c <__assert_fail@plt+0x2c34>
   13444:	cmp	r6, #0
   13448:	bne	13598 <__assert_fail@plt+0x2660>
   1344c:	ldr	r3, [sp, #40]	; 0x28
   13450:	eor	r8, r8, #1
   13454:	and	r8, r8, r3
   13458:	add	sl, sl, #1
   1345c:	uxtb	r6, r8
   13460:	cmp	r6, #0
   13464:	beq	13498 <__assert_fail@plt+0x2560>
   13468:	cmp	fp, r7
   1346c:	movhi	r2, #39	; 0x27
   13470:	ldrhi	r3, [sp, #32]
   13474:	strbhi	r2, [r3, r7]
   13478:	add	r3, r7, #1
   1347c:	cmp	fp, r3
   13480:	movhi	r1, #39	; 0x27
   13484:	ldrhi	r2, [sp, #32]
   13488:	add	r7, r7, #2
   1348c:	strbhi	r1, [r2, r3]
   13490:	mov	r3, #0
   13494:	str	r3, [sp, #40]	; 0x28
   13498:	cmp	r7, fp
   1349c:	ldrcc	r3, [sp, #32]
   134a0:	strbcc	r4, [r3, r7]
   134a4:	ldr	r3, [sp, #36]	; 0x24
   134a8:	cmp	r5, #0
   134ac:	moveq	r3, #0
   134b0:	str	r3, [sp, #36]	; 0x24
   134b4:	ldr	r3, [sp, #24]
   134b8:	add	r7, r7, #1
   134bc:	cmn	r3, #1
   134c0:	bne	12f64 <__assert_fail@plt+0x202c>
   134c4:	ldr	r3, [sp, #56]	; 0x38
   134c8:	ldrb	r5, [r3, sl]
   134cc:	adds	r5, r5, #0
   134d0:	movne	r5, #1
   134d4:	cmp	r5, #0
   134d8:	bne	12f78 <__assert_fail@plt+0x2040>
   134dc:	ldr	r3, [sp, #152]	; 0x98
   134e0:	ldr	r1, [sp, #28]
   134e4:	sub	r3, r3, #2
   134e8:	clz	r3, r3
   134ec:	lsr	r3, r3, #5
   134f0:	and	r9, r1, r3
   134f4:	cmp	r7, #0
   134f8:	movne	r2, #0
   134fc:	andeq	r2, r9, #1
   13500:	cmp	r2, #0
   13504:	bne	13ee0 <__assert_fail@plt+0x2fa8>
   13508:	eor	r2, r1, #1
   1350c:	ands	r3, r3, r2
   13510:	beq	1439c <__assert_fail@plt+0x3464>
   13514:	ldr	r2, [sp, #68]	; 0x44
   13518:	cmp	r2, #0
   1351c:	beq	14388 <__assert_fail@plt+0x3450>
   13520:	ldr	r3, [sp, #36]	; 0x24
   13524:	cmp	r3, #0
   13528:	bne	14340 <__assert_fail@plt+0x3408>
   1352c:	ldr	r2, [sp, #72]	; 0x48
   13530:	clz	r3, fp
   13534:	cmp	r2, #0
   13538:	lsr	r3, r3, #5
   1353c:	moveq	r3, #0
   13540:	cmp	r3, #0
   13544:	beq	142e0 <__assert_fail@plt+0x33a8>
   13548:	str	r3, [sp, #68]	; 0x44
   1354c:	ldr	fp, [sp, #72]	; 0x48
   13550:	b	12f00 <__assert_fail@plt+0x1fc8>
   13554:	ldr	r3, [sp, #152]	; 0x98
   13558:	cmp	r3, #2
   1355c:	beq	13bb0 <__assert_fail@plt+0x2c78>
   13560:	ldr	r3, [sp, #44]	; 0x2c
   13564:	ldr	r2, [sp, #28]
   13568:	and	r2, r3, r2
   1356c:	ands	r2, r9, r2
   13570:	bne	13bbc <__assert_fail@plt+0x2c84>
   13574:	mov	r4, #92	; 0x5c
   13578:	mov	r3, r4
   1357c:	ldr	r1, [sp, #44]	; 0x2c
   13580:	cmp	r1, #0
   13584:	moveq	r5, #0
   13588:	moveq	r8, r1
   1358c:	beq	13428 <__assert_fail@plt+0x24f0>
   13590:	mov	r4, r3
   13594:	mov	r5, #0
   13598:	ldr	r3, [sp, #28]
   1359c:	cmp	r3, #0
   135a0:	bne	13ba4 <__assert_fail@plt+0x2c6c>
   135a4:	ldr	r3, [sp, #40]	; 0x28
   135a8:	eor	r9, r3, #1
   135ac:	and	r9, r9, r2
   135b0:	ands	r9, r9, #255	; 0xff
   135b4:	beq	135f8 <__assert_fail@plt+0x26c0>
   135b8:	cmp	fp, r7
   135bc:	movhi	r2, #39	; 0x27
   135c0:	ldrhi	r3, [sp, #32]
   135c4:	str	r9, [sp, #40]	; 0x28
   135c8:	strbhi	r2, [r3, r7]
   135cc:	add	r3, r7, #1
   135d0:	cmp	fp, r3
   135d4:	movhi	r1, #36	; 0x24
   135d8:	ldrhi	r2, [sp, #32]
   135dc:	strbhi	r1, [r2, r3]
   135e0:	add	r3, r7, #2
   135e4:	cmp	fp, r3
   135e8:	add	r7, r7, #3
   135ec:	ldrhi	r2, [sp, #32]
   135f0:	movhi	r1, #39	; 0x27
   135f4:	strbhi	r1, [r2, r3]
   135f8:	cmp	fp, r7
   135fc:	movhi	r2, #92	; 0x5c
   13600:	ldrhi	r3, [sp, #32]
   13604:	add	sl, sl, #1
   13608:	strbhi	r2, [r3, r7]
   1360c:	add	r7, r7, #1
   13610:	b	13498 <__assert_fail@plt+0x2560>
   13614:	ldr	r3, [sp, #152]	; 0x98
   13618:	mov	r4, #11
   1361c:	sub	r2, r3, #2
   13620:	mov	r3, #118	; 0x76
   13624:	clz	r2, r2
   13628:	lsr	r2, r2, #5
   1362c:	b	1357c <__assert_fail@plt+0x2644>
   13630:	mov	r4, #10
   13634:	mov	r3, #110	; 0x6e
   13638:	ldr	r2, [sp, #152]	; 0x98
   1363c:	ldr	r1, [sp, #28]
   13640:	sub	r2, r2, #2
   13644:	clz	r2, r2
   13648:	lsr	r2, r2, #5
   1364c:	ands	r1, r1, r2
   13650:	beq	1357c <__assert_fail@plt+0x2644>
   13654:	ldr	sl, [sp, #32]
   13658:	mov	r8, fp
   1365c:	mov	r2, r1
   13660:	mov	r3, #2
   13664:	str	r3, [sp, #152]	; 0x98
   13668:	ldr	r9, [sp, #44]	; 0x2c
   1366c:	ldr	r3, [sp, #152]	; 0x98
   13670:	and	r9, r9, r2
   13674:	tst	r9, #255	; 0xff
   13678:	movne	r3, #4
   1367c:	str	r3, [sp, #152]	; 0x98
   13680:	ldr	r3, [sp, #156]	; 0x9c
   13684:	mov	ip, #0
   13688:	bic	r3, r3, #2
   1368c:	str	r3, [sp, #4]
   13690:	ldr	r3, [sp, #168]	; 0xa8
   13694:	ldr	r2, [sp, #56]	; 0x38
   13698:	str	r3, [sp, #16]
   1369c:	ldr	r3, [sp, #164]	; 0xa4
   136a0:	mov	r1, r8
   136a4:	str	r3, [sp, #12]
   136a8:	ldr	r3, [sp, #152]	; 0x98
   136ac:	mov	r0, sl
   136b0:	str	r3, [sp]
   136b4:	str	ip, [sp, #8]
   136b8:	ldr	r3, [sp, #24]
   136bc:	bl	12ea4 <__assert_fail@plt+0x1f6c>
   136c0:	mov	fp, r0
   136c4:	mov	r0, fp
   136c8:	add	sp, sp, #116	; 0x74
   136cc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   136d0:	ldr	r3, [sp, #152]	; 0x98
   136d4:	mov	r4, #8
   136d8:	sub	r2, r3, #2
   136dc:	mov	r3, #98	; 0x62
   136e0:	clz	r2, r2
   136e4:	lsr	r2, r2, #5
   136e8:	b	1357c <__assert_fail@plt+0x2644>
   136ec:	ldr	r3, [sp, #152]	; 0x98
   136f0:	mov	r4, #7
   136f4:	sub	r2, r3, #2
   136f8:	mov	r3, #97	; 0x61
   136fc:	clz	r2, r2
   13700:	lsr	r2, r2, #5
   13704:	b	1357c <__assert_fail@plt+0x2644>
   13708:	ldr	r3, [sp, #44]	; 0x2c
   1370c:	cmp	r3, #0
   13710:	beq	13ef4 <__assert_fail@plt+0x2fbc>
   13714:	ldr	r3, [sp, #28]
   13718:	cmp	r3, #0
   1371c:	bne	141cc <__assert_fail@plt+0x3294>
   13720:	ldr	r3, [sp, #152]	; 0x98
   13724:	sub	r2, r3, #2
   13728:	ldr	r3, [sp, #40]	; 0x28
   1372c:	clz	r2, r2
   13730:	eor	r3, r3, #1
   13734:	lsr	r2, r2, #5
   13738:	ands	r3, r2, r3
   1373c:	moveq	r1, r7
   13740:	beq	13784 <__assert_fail@plt+0x284c>
   13744:	cmp	fp, r7
   13748:	movhi	r0, #39	; 0x27
   1374c:	ldrhi	r1, [sp, #32]
   13750:	str	r3, [sp, #40]	; 0x28
   13754:	strbhi	r0, [r1, r7]
   13758:	add	r1, r7, #1
   1375c:	cmp	fp, r1
   13760:	movhi	ip, #36	; 0x24
   13764:	ldrhi	r0, [sp, #32]
   13768:	strbhi	ip, [r0, r1]
   1376c:	add	r1, r7, #2
   13770:	cmp	fp, r1
   13774:	movhi	ip, #39	; 0x27
   13778:	ldrhi	r0, [sp, #32]
   1377c:	strbhi	ip, [r0, r1]
   13780:	add	r1, r7, #3
   13784:	cmp	fp, r1
   13788:	movhi	r0, #92	; 0x5c
   1378c:	ldrhi	r3, [sp, #32]
   13790:	add	r7, r1, #1
   13794:	strbhi	r0, [r3, r1]
   13798:	cmp	r8, #0
   1379c:	beq	140e0 <__assert_fail@plt+0x31a8>
   137a0:	ldr	r0, [sp, #24]
   137a4:	add	r3, sl, #1
   137a8:	cmp	r3, r0
   137ac:	bcs	1401c <__assert_fail@plt+0x30e4>
   137b0:	ldr	r0, [sp, #56]	; 0x38
   137b4:	ldrb	r3, [r0, r3]
   137b8:	sub	r3, r3, #48	; 0x30
   137bc:	cmp	r3, #9
   137c0:	bhi	1401c <__assert_fail@plt+0x30e4>
   137c4:	cmp	fp, r7
   137c8:	movhi	r3, #48	; 0x30
   137cc:	ldrhi	r0, [sp, #32]
   137d0:	ldr	r5, [sp, #28]
   137d4:	mov	r4, #48	; 0x30
   137d8:	strbhi	r3, [r0, r7]
   137dc:	add	r3, r1, #2
   137e0:	cmp	fp, r3
   137e4:	movhi	r0, #48	; 0x30
   137e8:	ldrhi	ip, [sp, #32]
   137ec:	add	r7, r1, #3
   137f0:	strbhi	r0, [ip, r3]
   137f4:	b	13428 <__assert_fail@plt+0x24f0>
   137f8:	mov	r5, #0
   137fc:	ldr	r3, [sp, #152]	; 0x98
   13800:	sub	r2, r3, #2
   13804:	ldr	r3, [sp, #28]
   13808:	clz	r2, r2
   1380c:	lsr	r2, r2, #5
   13810:	ands	r8, r3, r2
   13814:	beq	13428 <__assert_fail@plt+0x24f0>
   13818:	mov	r3, r8
   1381c:	mov	r2, r3
   13820:	mov	r3, #2
   13824:	ldr	sl, [sp, #32]
   13828:	mov	r8, fp
   1382c:	str	r3, [sp, #152]	; 0x98
   13830:	b	13668 <__assert_fail@plt+0x2730>
   13834:	ldr	r3, [sp, #152]	; 0x98
   13838:	cmp	r3, #2
   1383c:	beq	13f60 <__assert_fail@plt+0x3028>
   13840:	cmp	r3, #5
   13844:	beq	13f20 <__assert_fail@plt+0x2fe8>
   13848:	mov	r5, #0
   1384c:	sub	r2, r3, #2
   13850:	mov	r8, r5
   13854:	clz	r2, r2
   13858:	mov	r4, #63	; 0x3f
   1385c:	lsr	r2, r2, #5
   13860:	b	13428 <__assert_fail@plt+0x24f0>
   13864:	ldr	r3, [sp, #152]	; 0x98
   13868:	cmp	r3, #2
   1386c:	beq	13f80 <__assert_fail@plt+0x3048>
   13870:	mov	r2, #0
   13874:	str	r5, [sp, #68]	; 0x44
   13878:	mov	r8, r2
   1387c:	mov	r4, #39	; 0x27
   13880:	b	13428 <__assert_fail@plt+0x24f0>
   13884:	mov	r4, #13
   13888:	mov	r3, #114	; 0x72
   1388c:	b	13638 <__assert_fail@plt+0x2700>
   13890:	ldr	r3, [sp, #152]	; 0x98
   13894:	mov	r8, #0
   13898:	sub	r2, r3, #2
   1389c:	clz	r2, r2
   138a0:	lsr	r2, r2, #5
   138a4:	b	13428 <__assert_fail@plt+0x24f0>
   138a8:	ldr	r3, [sp, #152]	; 0x98
   138ac:	mov	r4, #12
   138b0:	sub	r2, r3, #2
   138b4:	mov	r3, #102	; 0x66
   138b8:	clz	r2, r2
   138bc:	lsr	r2, r2, #5
   138c0:	b	1357c <__assert_fail@plt+0x2644>
   138c4:	mov	r5, r6
   138c8:	b	137fc <__assert_fail@plt+0x28c4>
   138cc:	ldr	r3, [sp, #152]	; 0x98
   138d0:	sub	r2, r3, #2
   138d4:	mov	r3, #116	; 0x74
   138d8:	clz	r2, r2
   138dc:	lsr	r2, r2, #5
   138e0:	b	1357c <__assert_fail@plt+0x2644>
   138e4:	ldr	r8, [sp, #76]	; 0x4c
   138e8:	cmp	r8, #1
   138ec:	bne	13d9c <__assert_fail@plt+0x2e64>
   138f0:	bl	10e30 <__ctype_b_loc@plt>
   138f4:	sxth	r3, r4
   138f8:	mov	ip, r8
   138fc:	lsl	r3, r3, #1
   13900:	ldr	r2, [r0]
   13904:	ldrh	r3, [r2, r3]
   13908:	and	r3, r3, #16384	; 0x4000
   1390c:	cmp	r3, #0
   13910:	movne	r5, #1
   13914:	moveq	r5, #0
   13918:	moveq	r3, #1
   1391c:	movne	r3, #0
   13920:	ldr	r2, [sp, #44]	; 0x2c
   13924:	and	r3, r3, r2
   13928:	ands	r8, r3, #255	; 0xff
   1392c:	bne	13c30 <__assert_fail@plt+0x2cf8>
   13930:	ldr	r3, [sp, #152]	; 0x98
   13934:	sub	r2, r3, #2
   13938:	clz	r2, r2
   1393c:	lsr	r2, r2, #5
   13940:	b	13428 <__assert_fail@plt+0x24f0>
   13944:	ldr	r3, [sp, #56]	; 0x38
   13948:	add	r3, r3, sl
   1394c:	str	r3, [sp, #48]	; 0x30
   13950:	ldr	r3, [sp, #48]	; 0x30
   13954:	mov	r6, #0
   13958:	ldrb	r4, [r3]
   1395c:	cmp	r4, #126	; 0x7e
   13960:	ldrls	pc, [pc, r4, lsl #2]
   13964:	b	138e4 <__assert_fail@plt+0x29ac>
   13968:	andeq	r3, r1, r8, lsl #14
   1396c:	andeq	r3, r1, r4, ror #17
   13970:	andeq	r3, r1, r4, ror #17
   13974:	andeq	r3, r1, r4, ror #17
   13978:	andeq	r3, r1, r4, ror #17
   1397c:	andeq	r3, r1, r4, ror #17
   13980:	andeq	r3, r1, r4, ror #17
   13984:	andeq	r3, r1, ip, ror #13
   13988:	ldrdeq	r3, [r1], -r0
   1398c:	andeq	r3, r1, r4, ror #22
   13990:	andeq	r3, r1, r0, lsr r6
   13994:	andeq	r3, r1, r4, lsl r6
   13998:	andeq	r3, r1, r8, lsr #17
   1399c:	andeq	r3, r1, r4, lsl #17
   139a0:	andeq	r3, r1, r4, ror #17
   139a4:	andeq	r3, r1, r4, ror #17
   139a8:	andeq	r3, r1, r4, ror #17
   139ac:	andeq	r3, r1, r4, ror #17
   139b0:	andeq	r3, r1, r4, ror #17
   139b4:	andeq	r3, r1, r4, ror #17
   139b8:	andeq	r3, r1, r4, ror #17
   139bc:	andeq	r3, r1, r4, ror #17
   139c0:	andeq	r3, r1, r4, ror #17
   139c4:	andeq	r3, r1, r4, ror #17
   139c8:	andeq	r3, r1, r4, ror #17
   139cc:	andeq	r3, r1, r4, ror #17
   139d0:	andeq	r3, r1, r4, ror #17
   139d4:	andeq	r3, r1, r4, ror #17
   139d8:	andeq	r3, r1, r4, ror #17
   139dc:	andeq	r3, r1, r4, ror #17
   139e0:	andeq	r3, r1, r4, ror #17
   139e4:	andeq	r3, r1, r4, ror #17
   139e8:	strdeq	r3, [r1], -ip
   139ec:	strdeq	r3, [r1], -r8
   139f0:	strdeq	r3, [r1], -r8
   139f4:	andeq	r3, r1, r8, lsl #8
   139f8:	strdeq	r3, [r1], -r8
   139fc:	muleq	r1, r0, r8
   13a00:	strdeq	r3, [r1], -r8
   13a04:	andeq	r3, r1, r4, ror #16
   13a08:	strdeq	r3, [r1], -r8
   13a0c:	strdeq	r3, [r1], -r8
   13a10:	strdeq	r3, [r1], -r8
   13a14:	muleq	r1, r0, r8
   13a18:	muleq	r1, r0, r8
   13a1c:	muleq	r1, r0, r8
   13a20:	muleq	r1, r0, r8
   13a24:	muleq	r1, r0, r8
   13a28:	muleq	r1, r0, r8
   13a2c:	muleq	r1, r0, r8
   13a30:	muleq	r1, r0, r8
   13a34:	muleq	r1, r0, r8
   13a38:	muleq	r1, r0, r8
   13a3c:	muleq	r1, r0, r8
   13a40:	muleq	r1, r0, r8
   13a44:	muleq	r1, r0, r8
   13a48:	muleq	r1, r0, r8
   13a4c:	muleq	r1, r0, r8
   13a50:	muleq	r1, r0, r8
   13a54:	strdeq	r3, [r1], -r8
   13a58:	strdeq	r3, [r1], -r8
   13a5c:	strdeq	r3, [r1], -r8
   13a60:	strdeq	r3, [r1], -r8
   13a64:	andeq	r3, r1, r4, lsr r8
   13a68:	andeq	r3, r1, r4, ror #17
   13a6c:	muleq	r1, r0, r8
   13a70:	muleq	r1, r0, r8
   13a74:	muleq	r1, r0, r8
   13a78:	muleq	r1, r0, r8
   13a7c:	muleq	r1, r0, r8
   13a80:	muleq	r1, r0, r8
   13a84:	muleq	r1, r0, r8
   13a88:	muleq	r1, r0, r8
   13a8c:	muleq	r1, r0, r8
   13a90:	muleq	r1, r0, r8
   13a94:	muleq	r1, r0, r8
   13a98:	muleq	r1, r0, r8
   13a9c:	muleq	r1, r0, r8
   13aa0:	muleq	r1, r0, r8
   13aa4:	muleq	r1, r0, r8
   13aa8:	muleq	r1, r0, r8
   13aac:	muleq	r1, r0, r8
   13ab0:	muleq	r1, r0, r8
   13ab4:	muleq	r1, r0, r8
   13ab8:	muleq	r1, r0, r8
   13abc:	muleq	r1, r0, r8
   13ac0:	muleq	r1, r0, r8
   13ac4:	muleq	r1, r0, r8
   13ac8:	muleq	r1, r0, r8
   13acc:	muleq	r1, r0, r8
   13ad0:	muleq	r1, r0, r8
   13ad4:	strdeq	r3, [r1], -r8
   13ad8:	andeq	r3, r1, r4, asr r5
   13adc:	muleq	r1, r0, r8
   13ae0:	strdeq	r3, [r1], -r8
   13ae4:	muleq	r1, r0, r8
   13ae8:	strdeq	r3, [r1], -r8
   13aec:	muleq	r1, r0, r8
   13af0:	muleq	r1, r0, r8
   13af4:	muleq	r1, r0, r8
   13af8:	muleq	r1, r0, r8
   13afc:	muleq	r1, r0, r8
   13b00:	muleq	r1, r0, r8
   13b04:	muleq	r1, r0, r8
   13b08:	muleq	r1, r0, r8
   13b0c:	muleq	r1, r0, r8
   13b10:	muleq	r1, r0, r8
   13b14:	muleq	r1, r0, r8
   13b18:	muleq	r1, r0, r8
   13b1c:	muleq	r1, r0, r8
   13b20:	muleq	r1, r0, r8
   13b24:	muleq	r1, r0, r8
   13b28:	muleq	r1, r0, r8
   13b2c:	muleq	r1, r0, r8
   13b30:	muleq	r1, r0, r8
   13b34:	muleq	r1, r0, r8
   13b38:	muleq	r1, r0, r8
   13b3c:	muleq	r1, r0, r8
   13b40:	muleq	r1, r0, r8
   13b44:	muleq	r1, r0, r8
   13b48:	muleq	r1, r0, r8
   13b4c:	muleq	r1, r0, r8
   13b50:	muleq	r1, r0, r8
   13b54:	andeq	r3, r1, r8, ror #7
   13b58:	strdeq	r3, [r1], -r8
   13b5c:	andeq	r3, r1, r8, ror #7
   13b60:	andeq	r3, r1, r8, lsl #8
   13b64:	mov	r3, #116	; 0x74
   13b68:	b	13638 <__assert_fail@plt+0x2700>
   13b6c:	ldr	r3, [sp, #160]	; 0xa0
   13b70:	cmp	r3, #0
   13b74:	beq	13444 <__assert_fail@plt+0x250c>
   13b78:	lsr	r3, r4, #5
   13b7c:	ldr	r0, [sp, #160]	; 0xa0
   13b80:	uxtb	r3, r3
   13b84:	and	r1, r4, #31
   13b88:	ldr	r0, [r0, r3, lsl #2]
   13b8c:	lsr	r3, r0, r1
   13b90:	tst	r3, #1
   13b94:	beq	13444 <__assert_fail@plt+0x250c>
   13b98:	ldr	r3, [sp, #28]
   13b9c:	cmp	r3, #0
   13ba0:	beq	135a4 <__assert_fail@plt+0x266c>
   13ba4:	ldr	sl, [sp, #32]
   13ba8:	mov	r8, fp
   13bac:	b	13668 <__assert_fail@plt+0x2730>
   13bb0:	ldr	r3, [sp, #28]
   13bb4:	cmp	r3, #0
   13bb8:	bne	1410c <__assert_fail@plt+0x31d4>
   13bbc:	add	sl, sl, #1
   13bc0:	ldr	r6, [sp, #40]	; 0x28
   13bc4:	mov	r5, #0
   13bc8:	mov	r4, #92	; 0x5c
   13bcc:	b	13460 <__assert_fail@plt+0x2528>
   13bd0:	cmp	r9, r8
   13bd4:	bne	13e44 <__assert_fail@plt+0x2f0c>
   13bd8:	ldr	r0, [sp, #100]	; 0x64
   13bdc:	bl	10da0 <iswprint@plt>
   13be0:	add	r5, r5, r4
   13be4:	cmp	r0, #0
   13be8:	add	r0, sp, #104	; 0x68
   13bec:	moveq	r6, #0
   13bf0:	bl	10d4c <mbsinit@plt>
   13bf4:	cmp	r0, #0
   13bf8:	beq	13dd8 <__assert_fail@plt+0x2ea0>
   13bfc:	mov	r2, r6
   13c00:	mov	ip, r5
   13c04:	eor	r5, r2, #1
   13c08:	ldr	r4, [sp, #80]	; 0x50
   13c0c:	ldr	r6, [sp, #84]	; 0x54
   13c10:	ldr	r7, [sp, #88]	; 0x58
   13c14:	uxtb	r5, r5
   13c18:	cmp	ip, #1
   13c1c:	bls	1411c <__assert_fail@plt+0x31e4>
   13c20:	ldr	r3, [sp, #44]	; 0x2c
   13c24:	and	r8, r3, r5
   13c28:	mov	r5, r2
   13c2c:	uxtb	r8, r8
   13c30:	add	r2, sl, ip
   13c34:	ldr	r0, [sp, #48]	; 0x30
   13c38:	mov	r1, #0
   13c3c:	str	r5, [sp, #48]	; 0x30
   13c40:	ldr	r9, [sp, #28]
   13c44:	ldr	ip, [sp, #40]	; 0x28
   13c48:	ldr	r3, [sp, #32]
   13c4c:	ldr	r5, [sp, #152]	; 0x98
   13c50:	b	13d0c <__assert_fail@plt+0x2dd4>
   13c54:	cmp	r9, #0
   13c58:	bne	14030 <__assert_fail@plt+0x30f8>
   13c5c:	eor	r1, ip, #1
   13c60:	cmp	r5, #2
   13c64:	movne	r1, #0
   13c68:	andeq	r1, r1, #1
   13c6c:	cmp	r1, #0
   13c70:	beq	13ca8 <__assert_fail@plt+0x2d70>
   13c74:	cmp	fp, r7
   13c78:	movhi	ip, #39	; 0x27
   13c7c:	strbhi	ip, [r3, r7]
   13c80:	add	ip, r7, #1
   13c84:	cmp	fp, ip
   13c88:	movhi	lr, #36	; 0x24
   13c8c:	strbhi	lr, [r3, ip]
   13c90:	add	ip, r7, #2
   13c94:	cmp	fp, ip
   13c98:	movhi	lr, #39	; 0x27
   13c9c:	strbhi	lr, [r3, ip]
   13ca0:	add	r7, r7, #3
   13ca4:	mov	ip, r1
   13ca8:	cmp	fp, r7
   13cac:	movhi	r1, #92	; 0x5c
   13cb0:	strbhi	r1, [r3, r7]
   13cb4:	add	r1, r7, #1
   13cb8:	cmp	fp, r1
   13cbc:	lsrhi	lr, r4, #6
   13cc0:	addhi	lr, lr, #48	; 0x30
   13cc4:	strbhi	lr, [r3, r1]
   13cc8:	add	lr, r7, #2
   13ccc:	cmp	fp, lr
   13cd0:	lsrhi	r1, r4, #3
   13cd4:	andhi	r1, r1, #7
   13cd8:	addhi	r1, r1, #48	; 0x30
   13cdc:	add	sl, sl, #1
   13ce0:	strbhi	r1, [r3, lr]
   13ce4:	and	r4, r4, #7
   13ce8:	cmp	r2, sl
   13cec:	add	r4, r4, #48	; 0x30
   13cf0:	add	r7, r7, #3
   13cf4:	bls	14054 <__assert_fail@plt+0x311c>
   13cf8:	mov	r1, r8
   13cfc:	cmp	fp, r7
   13d00:	strbhi	r4, [r3, r7]
   13d04:	ldrb	r4, [r0, #1]!
   13d08:	add	r7, r7, #1
   13d0c:	cmp	r8, #0
   13d10:	bne	13c54 <__assert_fail@plt+0x2d1c>
   13d14:	cmp	r6, #0
   13d18:	bne	13d68 <__assert_fail@plt+0x2e30>
   13d1c:	eor	r6, r1, #1
   13d20:	and	r6, r6, ip
   13d24:	add	sl, sl, #1
   13d28:	cmp	r2, sl
   13d2c:	uxtb	r6, r6
   13d30:	bls	13d90 <__assert_fail@plt+0x2e58>
   13d34:	cmp	r6, #0
   13d38:	beq	13cfc <__assert_fail@plt+0x2dc4>
   13d3c:	cmp	fp, r7
   13d40:	movhi	ip, #39	; 0x27
   13d44:	strbhi	ip, [r3, r7]
   13d48:	add	ip, r7, #1
   13d4c:	cmp	fp, ip
   13d50:	movhi	lr, #39	; 0x27
   13d54:	strbhi	lr, [r3, ip]
   13d58:	add	r7, r7, #2
   13d5c:	mov	r6, r8
   13d60:	mov	ip, r8
   13d64:	b	13cfc <__assert_fail@plt+0x2dc4>
   13d68:	cmp	fp, r7
   13d6c:	eor	r6, r1, #1
   13d70:	movhi	lr, #92	; 0x5c
   13d74:	and	r6, r6, ip
   13d78:	add	sl, sl, #1
   13d7c:	strbhi	lr, [r3, r7]
   13d80:	cmp	r2, sl
   13d84:	add	r7, r7, #1
   13d88:	uxtb	r6, r6
   13d8c:	bhi	13d34 <__assert_fail@plt+0x2dfc>
   13d90:	str	ip, [sp, #40]	; 0x28
   13d94:	ldr	r5, [sp, #48]	; 0x30
   13d98:	b	13460 <__assert_fail@plt+0x2528>
   13d9c:	ldr	r3, [sp, #24]
   13da0:	cmn	r3, #1
   13da4:	mov	r3, #0
   13da8:	str	r3, [sp, #104]	; 0x68
   13dac:	str	r3, [sp, #108]	; 0x6c
   13db0:	beq	140d0 <__assert_fail@plt+0x3198>
   13db4:	mov	r2, r5
   13db8:	mov	r3, #0
   13dbc:	str	r7, [sp, #88]	; 0x58
   13dc0:	ldr	r7, [sp, #152]	; 0x98
   13dc4:	str	r5, [sp, #92]	; 0x5c
   13dc8:	str	r6, [sp, #84]	; 0x54
   13dcc:	mov	r5, r3
   13dd0:	mov	r6, r2
   13dd4:	str	r4, [sp, #80]	; 0x50
   13dd8:	ldr	r3, [sp, #56]	; 0x38
   13ddc:	add	r9, sl, r5
   13de0:	add	r8, r3, r9
   13de4:	ldr	r3, [sp, #24]
   13de8:	mov	r1, r8
   13dec:	sub	r2, r3, r9
   13df0:	add	r0, sp, #100	; 0x64
   13df4:	add	r3, sp, #104	; 0x68
   13df8:	bl	15f84 <__assert_fail@plt+0x504c>
   13dfc:	subs	r4, r0, #0
   13e00:	beq	141a8 <__assert_fail@plt+0x3270>
   13e04:	cmn	r4, #1
   13e08:	beq	14188 <__assert_fail@plt+0x3250>
   13e0c:	cmn	r4, #2
   13e10:	beq	14128 <__assert_fail@plt+0x31f0>
   13e14:	ldr	r2, [sp, #28]
   13e18:	cmp	r7, #2
   13e1c:	movne	r2, #0
   13e20:	andeq	r2, r2, #1
   13e24:	cmp	r2, #0
   13e28:	beq	13bd8 <__assert_fail@plt+0x2ca0>
   13e2c:	cmp	r4, #1
   13e30:	beq	13bd8 <__assert_fail@plt+0x2ca0>
   13e34:	sub	r3, r4, #1
   13e38:	add	r9, r3, r9
   13e3c:	ldr	r3, [sp, #56]	; 0x38
   13e40:	add	r9, r3, r9
   13e44:	ldrb	r3, [r8, #1]!
   13e48:	sub	r3, r3, #91	; 0x5b
   13e4c:	cmp	r3, #33	; 0x21
   13e50:	ldrls	pc, [pc, r3, lsl #2]
   13e54:	b	13bd0 <__assert_fail@plt+0x2c98>
   13e58:	andeq	r3, r1, r0, ror #29
   13e5c:	andeq	r3, r1, r0, ror #29
   13e60:	ldrdeq	r3, [r1], -r0
   13e64:	andeq	r3, r1, r0, ror #29
   13e68:	ldrdeq	r3, [r1], -r0
   13e6c:	andeq	r3, r1, r0, ror #29
   13e70:	ldrdeq	r3, [r1], -r0
   13e74:	ldrdeq	r3, [r1], -r0
   13e78:	ldrdeq	r3, [r1], -r0
   13e7c:	ldrdeq	r3, [r1], -r0
   13e80:	ldrdeq	r3, [r1], -r0
   13e84:	ldrdeq	r3, [r1], -r0
   13e88:	ldrdeq	r3, [r1], -r0
   13e8c:	ldrdeq	r3, [r1], -r0
   13e90:	ldrdeq	r3, [r1], -r0
   13e94:	ldrdeq	r3, [r1], -r0
   13e98:	ldrdeq	r3, [r1], -r0
   13e9c:	ldrdeq	r3, [r1], -r0
   13ea0:	ldrdeq	r3, [r1], -r0
   13ea4:	ldrdeq	r3, [r1], -r0
   13ea8:	ldrdeq	r3, [r1], -r0
   13eac:	ldrdeq	r3, [r1], -r0
   13eb0:	ldrdeq	r3, [r1], -r0
   13eb4:	ldrdeq	r3, [r1], -r0
   13eb8:	ldrdeq	r3, [r1], -r0
   13ebc:	ldrdeq	r3, [r1], -r0
   13ec0:	ldrdeq	r3, [r1], -r0
   13ec4:	ldrdeq	r3, [r1], -r0
   13ec8:	ldrdeq	r3, [r1], -r0
   13ecc:	ldrdeq	r3, [r1], -r0
   13ed0:	ldrdeq	r3, [r1], -r0
   13ed4:	ldrdeq	r3, [r1], -r0
   13ed8:	ldrdeq	r3, [r1], -r0
   13edc:	andeq	r3, r1, r0, ror #29
   13ee0:	mov	r3, #2
   13ee4:	ldr	sl, [sp, #32]
   13ee8:	mov	r8, fp
   13eec:	str	r3, [sp, #152]	; 0x98
   13ef0:	b	13668 <__assert_fail@plt+0x2730>
   13ef4:	ldr	r3, [sp, #156]	; 0x9c
   13ef8:	tst	r3, #1
   13efc:	bne	14028 <__assert_fail@plt+0x30f0>
   13f00:	ldr	r3, [sp, #152]	; 0x98
   13f04:	ldr	r4, [sp, #44]	; 0x2c
   13f08:	sub	r2, r3, #2
   13f0c:	mov	r5, #0
   13f10:	clz	r2, r2
   13f14:	mov	r8, r4
   13f18:	lsr	r2, r2, #5
   13f1c:	b	13428 <__assert_fail@plt+0x24f0>
   13f20:	ldr	r3, [sp, #156]	; 0x9c
   13f24:	ands	r9, r3, #4
   13f28:	beq	14060 <__assert_fail@plt+0x3128>
   13f2c:	ldr	r2, [sp, #24]
   13f30:	add	r3, sl, #2
   13f34:	cmp	r3, r2
   13f38:	bcs	13f4c <__assert_fail@plt+0x3014>
   13f3c:	ldr	r2, [sp, #48]	; 0x30
   13f40:	ldrb	r4, [r2, #1]
   13f44:	cmp	r4, #63	; 0x3f
   13f48:	beq	141e8 <__assert_fail@plt+0x32b0>
   13f4c:	mov	r2, #0
   13f50:	mov	r8, r2
   13f54:	mov	r5, r2
   13f58:	mov	r4, #63	; 0x3f
   13f5c:	b	13428 <__assert_fail@plt+0x24f0>
   13f60:	ldr	r3, [sp, #28]
   13f64:	cmp	r3, #0
   13f68:	bne	1428c <__assert_fail@plt+0x3354>
   13f6c:	mov	r2, r5
   13f70:	mov	r8, r3
   13f74:	mov	r5, #0
   13f78:	mov	r4, #63	; 0x3f
   13f7c:	b	13428 <__assert_fail@plt+0x24f0>
   13f80:	ldr	r3, [sp, #28]
   13f84:	cmp	r3, #0
   13f88:	bne	1428c <__assert_fail@plt+0x3354>
   13f8c:	ldr	r2, [sp, #72]	; 0x48
   13f90:	adds	r3, fp, #0
   13f94:	movne	r3, #1
   13f98:	cmp	r2, #0
   13f9c:	movne	r3, #0
   13fa0:	cmp	r3, #0
   13fa4:	strne	fp, [sp, #72]	; 0x48
   13fa8:	movne	fp, #0
   13fac:	bne	13fe8 <__assert_fail@plt+0x30b0>
   13fb0:	cmp	fp, r7
   13fb4:	movhi	r2, #39	; 0x27
   13fb8:	ldrhi	r3, [sp, #32]
   13fbc:	strbhi	r2, [r3, r7]
   13fc0:	add	r3, r7, #1
   13fc4:	cmp	fp, r3
   13fc8:	movhi	r1, #92	; 0x5c
   13fcc:	ldrhi	r2, [sp, #32]
   13fd0:	strbhi	r1, [r2, r3]
   13fd4:	add	r3, r7, #2
   13fd8:	cmp	fp, r3
   13fdc:	movhi	r1, #39	; 0x27
   13fe0:	ldrhi	r2, [sp, #32]
   13fe4:	strbhi	r1, [r2, r3]
   13fe8:	ldr	r3, [sp, #28]
   13fec:	add	r7, r7, #3
   13ff0:	mov	r2, r5
   13ff4:	mov	r8, r3
   13ff8:	str	r5, [sp, #68]	; 0x44
   13ffc:	str	r3, [sp, #40]	; 0x28
   14000:	mov	r4, #39	; 0x27
   14004:	b	13428 <__assert_fail@plt+0x24f0>
   14008:	ldr	r3, [sp, #56]	; 0x38
   1400c:	ldrb	r3, [r3, #1]
   14010:	adds	r3, r3, #0
   14014:	movne	r3, #1
   14018:	b	13400 <__assert_fail@plt+0x24c8>
   1401c:	ldr	r5, [sp, #28]
   14020:	mov	r4, #48	; 0x30
   14024:	b	13428 <__assert_fail@plt+0x24f0>
   14028:	add	sl, sl, #1
   1402c:	b	12f58 <__assert_fail@plt+0x2020>
   14030:	mov	sl, r3
   14034:	ldr	r3, [sp, #28]
   14038:	mov	r8, fp
   1403c:	str	r3, [sp, #44]	; 0x2c
   14040:	ldr	r3, [sp, #152]	; 0x98
   14044:	sub	r2, r3, #2
   14048:	clz	r2, r2
   1404c:	lsr	r2, r2, #5
   14050:	b	13668 <__assert_fail@plt+0x2730>
   14054:	str	ip, [sp, #40]	; 0x28
   14058:	ldr	r5, [sp, #48]	; 0x30
   1405c:	b	13498 <__assert_fail@plt+0x2560>
   14060:	mov	r2, r9
   14064:	mov	r8, r9
   14068:	mov	r5, #0
   1406c:	mov	r4, #63	; 0x3f
   14070:	b	13428 <__assert_fail@plt+0x24f0>
   14074:	cmp	fp, #0
   14078:	beq	140f0 <__assert_fail@plt+0x31b8>
   1407c:	ldr	r1, [sp, #32]
   14080:	mov	r3, #34	; 0x22
   14084:	mov	r2, #1
   14088:	strb	r3, [r1]
   1408c:	ldr	r3, [pc, #332]	; 141e0 <__assert_fail@plt+0x32a8>
   14090:	str	r2, [sp, #52]	; 0x34
   14094:	mov	r7, r2
   14098:	str	r2, [sp, #44]	; 0x2c
   1409c:	str	r3, [sp, #64]	; 0x40
   140a0:	b	12f48 <__assert_fail@plt+0x2010>
   140a4:	ldr	r3, [pc, #300]	; 141d8 <__assert_fail@plt+0x32a0>
   140a8:	str	r3, [sp, #64]	; 0x40
   140ac:	mov	r3, #0
   140b0:	str	r3, [sp, #28]
   140b4:	mov	r3, #1
   140b8:	str	r3, [sp, #52]	; 0x34
   140bc:	mov	r7, r3
   140c0:	mov	r3, #2
   140c4:	str	r3, [sp, #152]	; 0x98
   140c8:	b	12f48 <__assert_fail@plt+0x2010>
   140cc:	bl	10f2c <abort@plt>
   140d0:	ldr	r0, [sp, #56]	; 0x38
   140d4:	bl	10e48 <strlen@plt>
   140d8:	str	r0, [sp, #24]
   140dc:	b	13db4 <__assert_fail@plt+0x2e7c>
   140e0:	mov	r5, r8
   140e4:	mov	r4, #48	; 0x30
   140e8:	ldr	r8, [sp, #44]	; 0x2c
   140ec:	b	13428 <__assert_fail@plt+0x24f0>
   140f0:	mov	r3, #1
   140f4:	str	r3, [sp, #52]	; 0x34
   140f8:	mov	r7, r3
   140fc:	str	r3, [sp, #44]	; 0x2c
   14100:	ldr	r3, [pc, #216]	; 141e0 <__assert_fail@plt+0x32a8>
   14104:	str	r3, [sp, #64]	; 0x40
   14108:	b	12f48 <__assert_fail@plt+0x2010>
   1410c:	ldr	sl, [sp, #32]
   14110:	mov	r8, fp
   14114:	mov	r2, r3
   14118:	b	13668 <__assert_fail@plt+0x2730>
   1411c:	mov	r3, r5
   14120:	mov	r5, r2
   14124:	b	13920 <__assert_fail@plt+0x29e8>
   14128:	ldr	r1, [sp, #24]
   1412c:	mov	r2, r5
   14130:	cmp	r1, r9
   14134:	mov	ip, r5
   14138:	ldr	r4, [sp, #80]	; 0x50
   1413c:	ldr	r5, [sp, #92]	; 0x5c
   14140:	ldr	r6, [sp, #84]	; 0x54
   14144:	ldr	r7, [sp, #88]	; 0x58
   14148:	bls	1417c <__assert_fail@plt+0x3244>
   1414c:	ldrb	r3, [r8]
   14150:	cmp	r3, #0
   14154:	bne	14168 <__assert_fail@plt+0x3230>
   14158:	b	14180 <__assert_fail@plt+0x3248>
   1415c:	ldrb	r3, [r8, #1]!
   14160:	cmp	r3, #0
   14164:	beq	14280 <__assert_fail@plt+0x3348>
   14168:	add	r2, r2, #1
   1416c:	add	r3, sl, r2
   14170:	cmp	r1, r3
   14174:	bhi	1415c <__assert_fail@plt+0x3224>
   14178:	mov	ip, r2
   1417c:	mov	r3, #0
   14180:	mov	r2, r3
   14184:	b	13c18 <__assert_fail@plt+0x2ce0>
   14188:	mov	r3, #0
   1418c:	mov	ip, r5
   14190:	ldr	r4, [sp, #80]	; 0x50
   14194:	ldr	r5, [sp, #92]	; 0x5c
   14198:	ldr	r6, [sp, #84]	; 0x54
   1419c:	ldr	r7, [sp, #88]	; 0x58
   141a0:	mov	r2, r3
   141a4:	b	13c18 <__assert_fail@plt+0x2ce0>
   141a8:	mov	r3, r6
   141ac:	mov	ip, r5
   141b0:	eor	r5, r3, #1
   141b4:	mov	r2, r6
   141b8:	ldr	r4, [sp, #80]	; 0x50
   141bc:	ldr	r6, [sp, #84]	; 0x54
   141c0:	ldr	r7, [sp, #88]	; 0x58
   141c4:	uxtb	r5, r5
   141c8:	b	13c18 <__assert_fail@plt+0x2ce0>
   141cc:	ldr	sl, [sp, #32]
   141d0:	mov	r8, fp
   141d4:	b	1403c <__assert_fail@plt+0x3104>
   141d8:	strdeq	r6, [r1], -r8
   141dc:	strdeq	r6, [r1], -ip
   141e0:	andeq	r6, r1, ip, asr #16
   141e4:	stmdacc	r0, {r0, r6, r7, r8, ip, lr}
   141e8:	ldr	r2, [sp, #56]	; 0x38
   141ec:	ldrb	r1, [r2, r3]
   141f0:	sub	r2, r1, #33	; 0x21
   141f4:	uxtb	r2, r2
   141f8:	cmp	r2, #29
   141fc:	bhi	1429c <__assert_fail@plt+0x3364>
   14200:	ldr	r0, [pc, #-36]	; 141e4 <__assert_fail@plt+0x32ac>
   14204:	mov	ip, #1
   14208:	ands	r2, r0, ip, lsl r2
   1420c:	beq	142ac <__assert_fail@plt+0x3374>
   14210:	ldr	r2, [sp, #28]
   14214:	cmp	r2, #0
   14218:	bne	143ac <__assert_fail@plt+0x3474>
   1421c:	cmp	fp, r7
   14220:	ldr	r8, [sp, #28]
   14224:	ldrhi	r2, [sp, #32]
   14228:	mov	sl, r3
   1422c:	mov	r5, r8
   14230:	strbhi	r4, [r2, r7]
   14234:	add	r2, r7, #1
   14238:	cmp	fp, r2
   1423c:	movhi	r0, #34	; 0x22
   14240:	ldrhi	ip, [sp, #32]
   14244:	mov	r4, r1
   14248:	strbhi	r0, [ip, r2]
   1424c:	add	r2, r7, #2
   14250:	cmp	fp, r2
   14254:	movhi	r0, #34	; 0x22
   14258:	ldrhi	ip, [sp, #32]
   1425c:	strbhi	r0, [ip, r2]
   14260:	add	r2, r7, #3
   14264:	cmp	fp, r2
   14268:	movhi	r0, #63	; 0x3f
   1426c:	ldrhi	ip, [sp, #32]
   14270:	add	r7, r7, #4
   14274:	strbhi	r0, [ip, r2]
   14278:	mov	r2, r8
   1427c:	b	13428 <__assert_fail@plt+0x24f0>
   14280:	mov	ip, r2
   14284:	mov	r2, r3
   14288:	b	13c18 <__assert_fail@plt+0x2ce0>
   1428c:	ldr	sl, [sp, #32]
   14290:	mov	r8, fp
   14294:	ldr	r2, [sp, #28]
   14298:	b	13668 <__assert_fail@plt+0x2730>
   1429c:	mov	r2, #0
   142a0:	mov	r8, r2
   142a4:	mov	r5, r2
   142a8:	b	13428 <__assert_fail@plt+0x24f0>
   142ac:	mov	r8, r2
   142b0:	mov	r5, #0
   142b4:	b	13428 <__assert_fail@plt+0x24f0>
   142b8:	ldr	r1, [sp, #152]	; 0x98
   142bc:	bl	12d84 <__assert_fail@plt+0x1e4c>
   142c0:	str	r0, [sp, #168]	; 0xa8
   142c4:	b	132e4 <__assert_fail@plt+0x23ac>
   142c8:	ldr	r1, [sp, #152]	; 0x98
   142cc:	bl	12d84 <__assert_fail@plt+0x1e4c>
   142d0:	str	r0, [sp, #164]	; 0xa4
   142d4:	b	132c4 <__assert_fail@plt+0x238c>
   142d8:	ldr	r7, [sp, #28]
   142dc:	b	13324 <__assert_fail@plt+0x23ec>
   142e0:	ldr	sl, [sp, #32]
   142e4:	ldr	r2, [sp, #68]	; 0x44
   142e8:	mov	r8, fp
   142ec:	mov	fp, r7
   142f0:	ldr	r3, [sp, #64]	; 0x40
   142f4:	cmp	r3, #0
   142f8:	moveq	r2, #0
   142fc:	andne	r2, r2, #1
   14300:	cmp	r2, #0
   14304:	beq	14330 <__assert_fail@plt+0x33f8>
   14308:	mov	r2, r3
   1430c:	ldrb	r3, [r3]
   14310:	cmp	r3, #0
   14314:	beq	14330 <__assert_fail@plt+0x33f8>
   14318:	cmp	r8, fp
   1431c:	strbhi	r3, [sl, fp]
   14320:	ldrb	r3, [r2, #1]!
   14324:	add	fp, fp, #1
   14328:	cmp	r3, #0
   1432c:	bne	14318 <__assert_fail@plt+0x33e0>
   14330:	cmp	r8, fp
   14334:	movhi	r3, #0
   14338:	strbhi	r3, [sl, fp]
   1433c:	b	136c4 <__assert_fail@plt+0x278c>
   14340:	ldr	r3, [sp, #168]	; 0xa8
   14344:	ldr	sl, [sp, #32]
   14348:	str	r3, [sp, #16]
   1434c:	ldr	r3, [sp, #164]	; 0xa4
   14350:	mov	ip, #5
   14354:	str	r3, [sp, #12]
   14358:	ldr	r3, [sp, #160]	; 0xa0
   1435c:	ldr	r2, [sp, #56]	; 0x38
   14360:	str	r3, [sp, #8]
   14364:	ldr	r3, [sp, #156]	; 0x9c
   14368:	ldr	r1, [sp, #72]	; 0x48
   1436c:	str	r3, [sp, #4]
   14370:	mov	r0, sl
   14374:	ldr	r3, [sp, #24]
   14378:	str	ip, [sp]
   1437c:	bl	12ea4 <__assert_fail@plt+0x1f6c>
   14380:	mov	fp, r0
   14384:	b	136c4 <__assert_fail@plt+0x278c>
   14388:	mov	r8, fp
   1438c:	ldr	sl, [sp, #32]
   14390:	mov	fp, r7
   14394:	mov	r2, r3
   14398:	b	142f0 <__assert_fail@plt+0x33b8>
   1439c:	mov	r8, fp
   143a0:	ldr	sl, [sp, #32]
   143a4:	mov	fp, r7
   143a8:	b	142f0 <__assert_fail@plt+0x33b8>
   143ac:	ldr	sl, [sp, #32]
   143b0:	mov	r8, fp
   143b4:	b	13680 <__assert_fail@plt+0x2748>
   143b8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   143bc:	sub	sp, sp, #52	; 0x34
   143c0:	mov	r4, r0
   143c4:	mov	r5, r3
   143c8:	mov	sl, r1
   143cc:	mov	fp, r2
   143d0:	bl	10e60 <__errno_location@plt>
   143d4:	ldr	r7, [pc, #412]	; 14578 <__assert_fail@plt+0x3640>
   143d8:	cmn	r4, #-2147483647	; 0x80000001
   143dc:	ldr	r6, [r7]
   143e0:	mov	r8, r0
   143e4:	movne	r0, #0
   143e8:	moveq	r0, #1
   143ec:	ldr	r3, [r8]
   143f0:	orrs	r0, r0, r4, lsr #31
   143f4:	str	r3, [sp, #24]
   143f8:	bne	14574 <__assert_fail@plt+0x363c>
   143fc:	ldr	r2, [r7, #4]
   14400:	cmp	r4, r2
   14404:	blt	14464 <__assert_fail@plt+0x352c>
   14408:	add	r9, r7, #8
   1440c:	cmp	r6, r9
   14410:	str	r2, [sp, #44]	; 0x2c
   14414:	beq	14544 <__assert_fail@plt+0x360c>
   14418:	mov	r3, #8
   1441c:	sub	r2, r4, r2
   14420:	mov	r0, r6
   14424:	str	r3, [sp]
   14428:	add	r2, r2, #1
   1442c:	mvn	r3, #-2147483648	; 0x80000000
   14430:	add	r1, sp, #44	; 0x2c
   14434:	bl	15224 <__assert_fail@plt+0x42ec>
   14438:	mov	r6, r0
   1443c:	str	r0, [r7]
   14440:	ldr	r0, [r7, #4]
   14444:	ldr	r2, [sp, #44]	; 0x2c
   14448:	mov	r1, #0
   1444c:	sub	r2, r2, r0
   14450:	add	r0, r6, r0, lsl #3
   14454:	lsl	r2, r2, #3
   14458:	bl	10e78 <memset@plt>
   1445c:	ldr	r3, [sp, #44]	; 0x2c
   14460:	str	r3, [r7, #4]
   14464:	add	r3, r6, r4, lsl #3
   14468:	ldr	r1, [r5, #4]
   1446c:	ldr	r7, [r3, #4]
   14470:	ldr	r9, [r6, r4, lsl #3]
   14474:	ldr	r2, [r5, #40]	; 0x28
   14478:	ldr	ip, [r5, #44]	; 0x2c
   1447c:	add	r0, r5, #8
   14480:	str	r3, [sp, #28]
   14484:	ldr	r3, [r5]
   14488:	orr	r1, r1, #1
   1448c:	mov	lr, r0
   14490:	str	r1, [sp, #32]
   14494:	str	r0, [sp, #36]	; 0x24
   14498:	str	r1, [sp, #4]
   1449c:	str	r2, [sp, #12]
   144a0:	str	r3, [sp]
   144a4:	mov	r0, r7
   144a8:	mov	r1, r9
   144ac:	str	ip, [sp, #16]
   144b0:	str	lr, [sp, #8]
   144b4:	mov	r3, fp
   144b8:	mov	r2, sl
   144bc:	bl	12ea4 <__assert_fail@plt+0x1f6c>
   144c0:	cmp	r9, r0
   144c4:	bhi	14530 <__assert_fail@plt+0x35f8>
   144c8:	ldr	r3, [pc, #172]	; 1457c <__assert_fail@plt+0x3644>
   144cc:	add	r9, r0, #1
   144d0:	cmp	r7, r3
   144d4:	str	r9, [r6, r4, lsl #3]
   144d8:	beq	144e4 <__assert_fail@plt+0x35ac>
   144dc:	mov	r0, r7
   144e0:	bl	15ef8 <__assert_fail@plt+0x4fc0>
   144e4:	mov	r0, r9
   144e8:	bl	150c0 <__assert_fail@plt+0x4188>
   144ec:	ldr	lr, [sp, #28]
   144f0:	ldr	ip, [r5, #44]	; 0x2c
   144f4:	ldr	r4, [r5, #40]	; 0x28
   144f8:	mov	r3, fp
   144fc:	mov	r2, sl
   14500:	mov	r1, r9
   14504:	str	r0, [lr, #4]
   14508:	ldr	lr, [r5]
   1450c:	ldr	r5, [sp, #36]	; 0x24
   14510:	str	ip, [sp, #16]
   14514:	str	r5, [sp, #8]
   14518:	ldr	r5, [sp, #32]
   1451c:	str	r4, [sp, #12]
   14520:	str	r5, [sp, #4]
   14524:	str	lr, [sp]
   14528:	mov	r7, r0
   1452c:	bl	12ea4 <__assert_fail@plt+0x1f6c>
   14530:	ldr	r3, [sp, #24]
   14534:	mov	r0, r7
   14538:	str	r3, [r8]
   1453c:	add	sp, sp, #52	; 0x34
   14540:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14544:	mov	r3, #8
   14548:	sub	r2, r4, r2
   1454c:	str	r3, [sp]
   14550:	add	r1, sp, #44	; 0x2c
   14554:	add	r2, r2, #1
   14558:	mvn	r3, #-2147483648	; 0x80000000
   1455c:	bl	15224 <__assert_fail@plt+0x42ec>
   14560:	mov	r6, r0
   14564:	ldm	r9, {r0, r1}
   14568:	str	r6, [r7]
   1456c:	stm	r6, {r0, r1}
   14570:	b	14440 <__assert_fail@plt+0x3508>
   14574:	bl	10f2c <abort@plt>
   14578:	strdeq	r8, [r2], -r4
   1457c:	andeq	r0, r3, r0, lsr #5
   14580:	push	{r4, r5, r6, lr}
   14584:	mov	r5, r0
   14588:	bl	10e60 <__errno_location@plt>
   1458c:	cmp	r5, #0
   14590:	mov	r1, #48	; 0x30
   14594:	mov	r4, r0
   14598:	ldr	r0, [pc, #16]	; 145b0 <__assert_fail@plt+0x3678>
   1459c:	ldr	r6, [r4]
   145a0:	movne	r0, r5
   145a4:	bl	15520 <__assert_fail@plt+0x45e8>
   145a8:	str	r6, [r4]
   145ac:	pop	{r4, r5, r6, pc}
   145b0:	andeq	r0, r3, r0, lsr #7
   145b4:	ldr	r3, [pc, #12]	; 145c8 <__assert_fail@plt+0x3690>
   145b8:	cmp	r0, #0
   145bc:	moveq	r0, r3
   145c0:	ldr	r0, [r0]
   145c4:	bx	lr
   145c8:	andeq	r0, r3, r0, lsr #7
   145cc:	ldr	r3, [pc, #12]	; 145e0 <__assert_fail@plt+0x36a8>
   145d0:	cmp	r0, #0
   145d4:	moveq	r0, r3
   145d8:	str	r1, [r0]
   145dc:	bx	lr
   145e0:	andeq	r0, r3, r0, lsr #7
   145e4:	ldr	r3, [pc, #52]	; 14620 <__assert_fail@plt+0x36e8>
   145e8:	cmp	r0, #0
   145ec:	moveq	r0, r3
   145f0:	add	r3, r0, #8
   145f4:	push	{lr}		; (str lr, [sp, #-4]!)
   145f8:	lsr	lr, r1, #5
   145fc:	and	r1, r1, #31
   14600:	ldr	ip, [r3, lr, lsl #2]
   14604:	lsr	r0, ip, r1
   14608:	eor	r2, r2, r0
   1460c:	and	r2, r2, #1
   14610:	and	r0, r0, #1
   14614:	eor	r1, ip, r2, lsl r1
   14618:	str	r1, [r3, lr, lsl #2]
   1461c:	pop	{pc}		; (ldr pc, [sp], #4)
   14620:	andeq	r0, r3, r0, lsr #7
   14624:	ldr	r3, [pc, #16]	; 1463c <__assert_fail@plt+0x3704>
   14628:	cmp	r0, #0
   1462c:	movne	r3, r0
   14630:	ldr	r0, [r3, #4]
   14634:	str	r1, [r3, #4]
   14638:	bx	lr
   1463c:	andeq	r0, r3, r0, lsr #7
   14640:	ldr	r3, [pc, #44]	; 14674 <__assert_fail@plt+0x373c>
   14644:	cmp	r0, #0
   14648:	moveq	r0, r3
   1464c:	mov	ip, #10
   14650:	cmp	r2, #0
   14654:	cmpne	r1, #0
   14658:	str	ip, [r0]
   1465c:	beq	1466c <__assert_fail@plt+0x3734>
   14660:	str	r1, [r0, #40]	; 0x28
   14664:	str	r2, [r0, #44]	; 0x2c
   14668:	bx	lr
   1466c:	push	{r4, lr}
   14670:	bl	10f2c <abort@plt>
   14674:	andeq	r0, r3, r0, lsr #7
   14678:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1467c:	sub	sp, sp, #24
   14680:	ldr	ip, [pc, #108]	; 146f4 <__assert_fail@plt+0x37bc>
   14684:	ldr	r4, [sp, #56]	; 0x38
   14688:	mov	r9, r2
   1468c:	cmp	r4, #0
   14690:	moveq	r4, ip
   14694:	mov	sl, r3
   14698:	mov	r7, r0
   1469c:	mov	r8, r1
   146a0:	bl	10e60 <__errno_location@plt>
   146a4:	ldr	r3, [r4, #44]	; 0x2c
   146a8:	mov	r1, r8
   146ac:	ldr	r6, [r0]
   146b0:	str	r3, [sp, #16]
   146b4:	ldr	r2, [r4, #40]	; 0x28
   146b8:	add	r3, r4, #8
   146bc:	str	r3, [sp, #8]
   146c0:	str	r2, [sp, #12]
   146c4:	ldr	r2, [r4, #4]
   146c8:	mov	r5, r0
   146cc:	str	r2, [sp, #4]
   146d0:	ldr	ip, [r4]
   146d4:	mov	r3, sl
   146d8:	mov	r2, r9
   146dc:	mov	r0, r7
   146e0:	str	ip, [sp]
   146e4:	bl	12ea4 <__assert_fail@plt+0x1f6c>
   146e8:	str	r6, [r5]
   146ec:	add	sp, sp, #24
   146f0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   146f4:	andeq	r0, r3, r0, lsr #7
   146f8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   146fc:	cmp	r3, #0
   14700:	sub	sp, sp, #44	; 0x2c
   14704:	ldr	r4, [pc, #192]	; 147cc <__assert_fail@plt+0x3894>
   14708:	mov	r6, r2
   1470c:	movne	r4, r3
   14710:	mov	r9, r1
   14714:	mov	r8, r0
   14718:	bl	10e60 <__errno_location@plt>
   1471c:	ldr	r3, [r4, #44]	; 0x2c
   14720:	ldr	r5, [r4, #4]
   14724:	add	sl, r4, #8
   14728:	cmp	r6, #0
   1472c:	orreq	r5, r5, #1
   14730:	mov	r1, #0
   14734:	ldr	r2, [r0]
   14738:	str	r3, [sp, #16]
   1473c:	ldr	r3, [r4, #40]	; 0x28
   14740:	stmib	sp, {r5, sl}
   14744:	str	r3, [sp, #12]
   14748:	ldr	r3, [r4]
   1474c:	mov	r7, r0
   14750:	str	r2, [sp, #28]
   14754:	str	r3, [sp]
   14758:	mov	r2, r8
   1475c:	mov	r3, r9
   14760:	mov	r0, r1
   14764:	bl	12ea4 <__assert_fail@plt+0x1f6c>
   14768:	add	r1, r0, #1
   1476c:	mov	fp, r0
   14770:	mov	r0, r1
   14774:	str	r1, [sp, #36]	; 0x24
   14778:	bl	150c0 <__assert_fail@plt+0x4188>
   1477c:	ldr	r3, [r4, #44]	; 0x2c
   14780:	mov	r2, r8
   14784:	str	r3, [sp, #16]
   14788:	ldr	r3, [r4, #40]	; 0x28
   1478c:	str	r5, [sp, #4]
   14790:	str	r3, [sp, #12]
   14794:	str	sl, [sp, #8]
   14798:	ldr	ip, [r4]
   1479c:	ldr	r1, [sp, #36]	; 0x24
   147a0:	mov	r3, r9
   147a4:	str	ip, [sp]
   147a8:	str	r0, [sp, #32]
   147ac:	bl	12ea4 <__assert_fail@plt+0x1f6c>
   147b0:	ldr	r2, [sp, #28]
   147b4:	cmp	r6, #0
   147b8:	str	r2, [r7]
   147bc:	ldr	r0, [sp, #32]
   147c0:	strne	fp, [r6]
   147c4:	add	sp, sp, #44	; 0x2c
   147c8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   147cc:	andeq	r0, r3, r0, lsr #7
   147d0:	mov	r3, r2
   147d4:	mov	r2, #0
   147d8:	b	146f8 <__assert_fail@plt+0x37c0>
   147dc:	push	{r4, r5, r6, r7, r8, lr}
   147e0:	ldr	r6, [pc, #116]	; 1485c <__assert_fail@plt+0x3924>
   147e4:	ldr	r3, [r6, #4]
   147e8:	ldr	r7, [r6]
   147ec:	cmp	r3, #1
   147f0:	movgt	r5, r7
   147f4:	movgt	r4, #1
   147f8:	ble	14818 <__assert_fail@plt+0x38e0>
   147fc:	ldr	r0, [r5, #12]
   14800:	bl	15ef8 <__assert_fail@plt+0x4fc0>
   14804:	ldr	r3, [r6, #4]
   14808:	add	r4, r4, #1
   1480c:	cmp	r3, r4
   14810:	add	r5, r5, #8
   14814:	bgt	147fc <__assert_fail@plt+0x38c4>
   14818:	ldr	r0, [r7, #4]
   1481c:	ldr	r4, [pc, #60]	; 14860 <__assert_fail@plt+0x3928>
   14820:	cmp	r0, r4
   14824:	beq	14838 <__assert_fail@plt+0x3900>
   14828:	bl	15ef8 <__assert_fail@plt+0x4fc0>
   1482c:	mov	r3, #256	; 0x100
   14830:	str	r4, [r6, #12]
   14834:	str	r3, [r6, #8]
   14838:	ldr	r4, [pc, #36]	; 14864 <__assert_fail@plt+0x392c>
   1483c:	cmp	r7, r4
   14840:	beq	14850 <__assert_fail@plt+0x3918>
   14844:	mov	r0, r7
   14848:	bl	15ef8 <__assert_fail@plt+0x4fc0>
   1484c:	str	r4, [r6]
   14850:	mov	r3, #1
   14854:	str	r3, [r6, #4]
   14858:	pop	{r4, r5, r6, r7, r8, pc}
   1485c:	strdeq	r8, [r2], -r4
   14860:	andeq	r0, r3, r0, lsr #5
   14864:	strdeq	r8, [r2], -ip
   14868:	ldr	r3, [pc, #4]	; 14874 <__assert_fail@plt+0x393c>
   1486c:	mvn	r2, #0
   14870:	b	143b8 <__assert_fail@plt+0x3480>
   14874:	andeq	r0, r3, r0, lsr #7
   14878:	ldr	r3, [pc]	; 14880 <__assert_fail@plt+0x3948>
   1487c:	b	143b8 <__assert_fail@plt+0x3480>
   14880:	andeq	r0, r3, r0, lsr #7
   14884:	mov	r1, r0
   14888:	ldr	r3, [pc, #8]	; 14898 <__assert_fail@plt+0x3960>
   1488c:	mvn	r2, #0
   14890:	mov	r0, #0
   14894:	b	143b8 <__assert_fail@plt+0x3480>
   14898:	andeq	r0, r3, r0, lsr #7
   1489c:	mov	r2, r1
   148a0:	ldr	r3, [pc, #8]	; 148b0 <__assert_fail@plt+0x3978>
   148a4:	mov	r1, r0
   148a8:	mov	r0, #0
   148ac:	b	143b8 <__assert_fail@plt+0x3480>
   148b0:	andeq	r0, r3, r0, lsr #7
   148b4:	push	{r4, r5, lr}
   148b8:	sub	sp, sp, #52	; 0x34
   148bc:	mov	r5, r2
   148c0:	mov	r4, r0
   148c4:	mov	r0, sp
   148c8:	bl	12d54 <__assert_fail@plt+0x1e1c>
   148cc:	mov	r3, sp
   148d0:	mov	r1, r5
   148d4:	mov	r0, r4
   148d8:	mvn	r2, #0
   148dc:	bl	143b8 <__assert_fail@plt+0x3480>
   148e0:	add	sp, sp, #52	; 0x34
   148e4:	pop	{r4, r5, pc}
   148e8:	push	{r4, r5, r6, lr}
   148ec:	sub	sp, sp, #48	; 0x30
   148f0:	mov	r5, r2
   148f4:	mov	r6, r3
   148f8:	mov	r4, r0
   148fc:	mov	r0, sp
   14900:	bl	12d54 <__assert_fail@plt+0x1e1c>
   14904:	mov	r3, sp
   14908:	mov	r2, r6
   1490c:	mov	r1, r5
   14910:	mov	r0, r4
   14914:	bl	143b8 <__assert_fail@plt+0x3480>
   14918:	add	sp, sp, #48	; 0x30
   1491c:	pop	{r4, r5, r6, pc}
   14920:	mov	r2, r1
   14924:	mov	r1, r0
   14928:	mov	r0, #0
   1492c:	b	148b4 <__assert_fail@plt+0x397c>
   14930:	mov	r3, r2
   14934:	mov	r2, r1
   14938:	mov	r1, r0
   1493c:	mov	r0, #0
   14940:	b	148e8 <__assert_fail@plt+0x39b0>
   14944:	push	{r4, r5, r6, r7, r8, lr}
   14948:	mov	r7, r0
   1494c:	ldr	lr, [pc, #100]	; 149b8 <__assert_fail@plt+0x3a80>
   14950:	mov	r8, r1
   14954:	mov	r4, r2
   14958:	ldm	lr!, {r0, r1, r2, r3}
   1495c:	sub	sp, sp, #48	; 0x30
   14960:	mov	ip, sp
   14964:	lsr	r5, r4, #5
   14968:	stmia	ip!, {r0, r1, r2, r3}
   1496c:	add	r6, sp, #8
   14970:	ldm	lr!, {r0, r1, r2, r3}
   14974:	and	r4, r4, #31
   14978:	stmia	ip!, {r0, r1, r2, r3}
   1497c:	ldm	lr, {r0, r1, r2, r3}
   14980:	stm	ip, {r0, r1, r2, r3}
   14984:	mov	r2, r8
   14988:	ldr	lr, [r6, r5, lsl #2]
   1498c:	mov	r1, r7
   14990:	mov	r3, sp
   14994:	lsr	ip, lr, r4
   14998:	eor	ip, ip, #1
   1499c:	and	ip, ip, #1
   149a0:	mov	r0, #0
   149a4:	eor	r4, lr, ip, lsl r4
   149a8:	str	r4, [r6, r5, lsl #2]
   149ac:	bl	143b8 <__assert_fail@plt+0x3480>
   149b0:	add	sp, sp, #48	; 0x30
   149b4:	pop	{r4, r5, r6, r7, r8, pc}
   149b8:	andeq	r0, r3, r0, lsr #7
   149bc:	mov	r2, r1
   149c0:	mvn	r1, #0
   149c4:	b	14944 <__assert_fail@plt+0x3a0c>
   149c8:	mov	r2, #58	; 0x3a
   149cc:	mvn	r1, #0
   149d0:	b	14944 <__assert_fail@plt+0x3a0c>
   149d4:	mov	r2, #58	; 0x3a
   149d8:	b	14944 <__assert_fail@plt+0x3a0c>
   149dc:	push	{r4, r5, r6, r7, lr}
   149e0:	sub	sp, sp, #100	; 0x64
   149e4:	mov	r6, r0
   149e8:	mov	r0, sp
   149ec:	mov	r7, r2
   149f0:	bl	12d54 <__assert_fail@plt+0x1e1c>
   149f4:	mov	ip, sp
   149f8:	add	lr, sp, #48	; 0x30
   149fc:	ldm	ip!, {r0, r1, r2, r3}
   14a00:	stmia	lr!, {r0, r1, r2, r3}
   14a04:	ldm	ip!, {r0, r1, r2, r3}
   14a08:	ldr	r5, [sp, #60]	; 0x3c
   14a0c:	stmia	lr!, {r0, r1, r2, r3}
   14a10:	mvn	r4, r5
   14a14:	ldm	ip, {r0, r1, r2, r3}
   14a18:	and	ip, r4, #67108864	; 0x4000000
   14a1c:	eor	ip, ip, r5
   14a20:	str	ip, [sp, #60]	; 0x3c
   14a24:	stm	lr, {r0, r1, r2, r3}
   14a28:	mov	r1, r7
   14a2c:	mov	r0, r6
   14a30:	add	r3, sp, #48	; 0x30
   14a34:	mvn	r2, #0
   14a38:	bl	143b8 <__assert_fail@plt+0x3480>
   14a3c:	add	sp, sp, #100	; 0x64
   14a40:	pop	{r4, r5, r6, r7, pc}
   14a44:	push	{r4, r5, r6, r7, r8, lr}
   14a48:	mov	r5, r1
   14a4c:	ldr	lr, [pc, #100]	; 14ab8 <__assert_fail@plt+0x3b80>
   14a50:	mov	r4, r2
   14a54:	mov	r7, r0
   14a58:	mov	r8, r3
   14a5c:	ldm	lr!, {r0, r1, r2, r3}
   14a60:	sub	sp, sp, #48	; 0x30
   14a64:	mov	ip, sp
   14a68:	mov	r6, #10
   14a6c:	stmia	ip!, {r0, r1, r2, r3}
   14a70:	cmp	r4, #0
   14a74:	cmpne	r5, #0
   14a78:	ldm	lr!, {r0, r1, r2, r3}
   14a7c:	str	r6, [sp]
   14a80:	stmia	ip!, {r0, r1, r2, r3}
   14a84:	ldm	lr, {r0, r1, r2, r3}
   14a88:	stm	ip, {r0, r1, r2, r3}
   14a8c:	beq	14ab4 <__assert_fail@plt+0x3b7c>
   14a90:	mov	r3, sp
   14a94:	mov	r1, r8
   14a98:	mov	r0, r7
   14a9c:	ldr	r2, [sp, #72]	; 0x48
   14aa0:	str	r5, [sp, #40]	; 0x28
   14aa4:	str	r4, [sp, #44]	; 0x2c
   14aa8:	bl	143b8 <__assert_fail@plt+0x3480>
   14aac:	add	sp, sp, #48	; 0x30
   14ab0:	pop	{r4, r5, r6, r7, r8, pc}
   14ab4:	bl	10f2c <abort@plt>
   14ab8:	andeq	r0, r3, r0, lsr #7
   14abc:	push	{lr}		; (str lr, [sp, #-4]!)
   14ac0:	sub	sp, sp, #12
   14ac4:	mvn	ip, #0
   14ac8:	str	ip, [sp]
   14acc:	bl	14a44 <__assert_fail@plt+0x3b0c>
   14ad0:	add	sp, sp, #12
   14ad4:	pop	{pc}		; (ldr pc, [sp], #4)
   14ad8:	push	{lr}		; (str lr, [sp, #-4]!)
   14adc:	sub	sp, sp, #12
   14ae0:	mvn	ip, #0
   14ae4:	mov	r3, r2
   14ae8:	str	ip, [sp]
   14aec:	mov	r2, r1
   14af0:	mov	r1, r0
   14af4:	mov	r0, #0
   14af8:	bl	14a44 <__assert_fail@plt+0x3b0c>
   14afc:	add	sp, sp, #12
   14b00:	pop	{pc}		; (ldr pc, [sp], #4)
   14b04:	push	{lr}		; (str lr, [sp, #-4]!)
   14b08:	sub	sp, sp, #12
   14b0c:	str	r3, [sp]
   14b10:	mov	r3, r2
   14b14:	mov	r2, r1
   14b18:	mov	r1, r0
   14b1c:	mov	r0, #0
   14b20:	bl	14a44 <__assert_fail@plt+0x3b0c>
   14b24:	add	sp, sp, #12
   14b28:	pop	{pc}		; (ldr pc, [sp], #4)
   14b2c:	ldr	r3, [pc]	; 14b34 <__assert_fail@plt+0x3bfc>
   14b30:	b	143b8 <__assert_fail@plt+0x3480>
   14b34:	andeq	r8, r2, r4, lsl #2
   14b38:	mov	r2, r1
   14b3c:	ldr	r3, [pc, #8]	; 14b4c <__assert_fail@plt+0x3c14>
   14b40:	mov	r1, r0
   14b44:	mov	r0, #0
   14b48:	b	143b8 <__assert_fail@plt+0x3480>
   14b4c:	andeq	r8, r2, r4, lsl #2
   14b50:	ldr	r3, [pc, #4]	; 14b5c <__assert_fail@plt+0x3c24>
   14b54:	mvn	r2, #0
   14b58:	b	143b8 <__assert_fail@plt+0x3480>
   14b5c:	andeq	r8, r2, r4, lsl #2
   14b60:	mov	r1, r0
   14b64:	ldr	r3, [pc, #8]	; 14b74 <__assert_fail@plt+0x3c3c>
   14b68:	mvn	r2, #0
   14b6c:	mov	r0, #0
   14b70:	b	143b8 <__assert_fail@plt+0x3480>
   14b74:	andeq	r8, r2, r4, lsl #2
   14b78:	push	{r4, r5, r6, lr}
   14b7c:	sub	sp, sp, #32
   14b80:	cmp	r1, #0
   14b84:	mov	r4, r0
   14b88:	ldr	r5, [sp, #48]	; 0x30
   14b8c:	ldr	r6, [sp, #52]	; 0x34
   14b90:	beq	14ea8 <__assert_fail@plt+0x3f70>
   14b94:	stm	sp, {r2, r3}
   14b98:	mov	r3, r1
   14b9c:	ldr	r2, [pc, #808]	; 14ecc <__assert_fail@plt+0x3f94>
   14ba0:	mov	r1, #1
   14ba4:	bl	10e9c <__fprintf_chk@plt>
   14ba8:	mov	r2, #5
   14bac:	ldr	r1, [pc, #796]	; 14ed0 <__assert_fail@plt+0x3f98>
   14bb0:	mov	r0, #0
   14bb4:	bl	10d7c <dcgettext@plt>
   14bb8:	ldr	r3, [pc, #788]	; 14ed4 <__assert_fail@plt+0x3f9c>
   14bbc:	ldr	r2, [pc, #788]	; 14ed8 <__assert_fail@plt+0x3fa0>
   14bc0:	str	r3, [sp]
   14bc4:	mov	r1, #1
   14bc8:	mov	r3, r0
   14bcc:	mov	r0, r4
   14bd0:	bl	10e9c <__fprintf_chk@plt>
   14bd4:	mov	r1, r4
   14bd8:	mov	r0, #10
   14bdc:	bl	10d70 <fputc_unlocked@plt>
   14be0:	mov	r2, #5
   14be4:	ldr	r1, [pc, #752]	; 14edc <__assert_fail@plt+0x3fa4>
   14be8:	mov	r0, #0
   14bec:	bl	10d7c <dcgettext@plt>
   14bf0:	mov	r1, #1
   14bf4:	ldr	r3, [pc, #740]	; 14ee0 <__assert_fail@plt+0x3fa8>
   14bf8:	mov	r2, r0
   14bfc:	mov	r0, r4
   14c00:	bl	10e9c <__fprintf_chk@plt>
   14c04:	mov	r1, r4
   14c08:	mov	r0, #10
   14c0c:	bl	10d70 <fputc_unlocked@plt>
   14c10:	cmp	r6, #9
   14c14:	ldrls	pc, [pc, r6, lsl #2]
   14c18:	b	14ec0 <__assert_fail@plt+0x3f88>
   14c1c:	andeq	r4, r1, r0, lsr #25
   14c20:	andeq	r4, r1, r8, lsr #25
   14c24:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14c28:	andeq	r4, r1, r8, lsl #26
   14c2c:	andeq	r4, r1, r4, asr #26
   14c30:	andeq	r4, r1, r0, lsl #27
   14c34:			; <UNDEFINED> instruction: 0x00014dbc
   14c38:	andeq	r4, r1, r0, lsl #28
   14c3c:	andeq	r4, r1, r0, asr lr
   14c40:	andeq	r4, r1, r4, asr #24
   14c44:	ldr	r1, [pc, #664]	; 14ee4 <__assert_fail@plt+0x3fac>
   14c48:	mov	r2, #5
   14c4c:	mov	r0, #0
   14c50:	bl	10d7c <dcgettext@plt>
   14c54:	ldr	ip, [r5, #32]
   14c58:	ldr	r1, [r5, #28]
   14c5c:	ldr	r2, [r5, #24]
   14c60:	ldr	r3, [r5]
   14c64:	ldr	r6, [r5, #20]
   14c68:	str	ip, [sp, #28]
   14c6c:	ldr	lr, [r5, #16]
   14c70:	str	r1, [sp, #24]
   14c74:	ldr	ip, [r5, #12]
   14c78:	str	r2, [sp, #20]
   14c7c:	ldr	r1, [r5, #8]
   14c80:	ldr	r2, [r5, #4]
   14c84:	str	r6, [sp, #16]
   14c88:	stmib	sp, {r1, ip, lr}
   14c8c:	mov	r1, #1
   14c90:	str	r2, [sp]
   14c94:	mov	r2, r0
   14c98:	mov	r0, r4
   14c9c:	bl	10e9c <__fprintf_chk@plt>
   14ca0:	add	sp, sp, #32
   14ca4:	pop	{r4, r5, r6, pc}
   14ca8:	mov	r2, #5
   14cac:	ldr	r1, [pc, #564]	; 14ee8 <__assert_fail@plt+0x3fb0>
   14cb0:	mov	r0, #0
   14cb4:	bl	10d7c <dcgettext@plt>
   14cb8:	ldr	r3, [r5]
   14cbc:	mov	r1, #1
   14cc0:	mov	r2, r0
   14cc4:	mov	r0, r4
   14cc8:	add	sp, sp, #32
   14ccc:	pop	{r4, r5, r6, lr}
   14cd0:	b	10e9c <__fprintf_chk@plt>
   14cd4:	mov	r2, #5
   14cd8:	ldr	r1, [pc, #524]	; 14eec <__assert_fail@plt+0x3fb4>
   14cdc:	mov	r0, #0
   14ce0:	bl	10d7c <dcgettext@plt>
   14ce4:	ldr	r2, [r5, #4]
   14ce8:	ldr	r3, [r5]
   14cec:	mov	r1, #1
   14cf0:	str	r2, [sp, #48]	; 0x30
   14cf4:	mov	r2, r0
   14cf8:	mov	r0, r4
   14cfc:	add	sp, sp, #32
   14d00:	pop	{r4, r5, r6, lr}
   14d04:	b	10e9c <__fprintf_chk@plt>
   14d08:	mov	r2, #5
   14d0c:	ldr	r1, [pc, #476]	; 14ef0 <__assert_fail@plt+0x3fb8>
   14d10:	mov	r0, #0
   14d14:	bl	10d7c <dcgettext@plt>
   14d18:	ldr	r1, [r5, #8]
   14d1c:	ldr	r2, [r5, #4]
   14d20:	ldr	r3, [r5]
   14d24:	str	r1, [sp, #52]	; 0x34
   14d28:	str	r2, [sp, #48]	; 0x30
   14d2c:	mov	r1, #1
   14d30:	mov	r2, r0
   14d34:	mov	r0, r4
   14d38:	add	sp, sp, #32
   14d3c:	pop	{r4, r5, r6, lr}
   14d40:	b	10e9c <__fprintf_chk@plt>
   14d44:	mov	r2, #5
   14d48:	ldr	r1, [pc, #420]	; 14ef4 <__assert_fail@plt+0x3fbc>
   14d4c:	mov	r0, #0
   14d50:	bl	10d7c <dcgettext@plt>
   14d54:	ldr	r1, [r5, #8]
   14d58:	ldr	ip, [r5, #12]
   14d5c:	ldr	r2, [r5, #4]
   14d60:	ldr	r3, [r5]
   14d64:	stmib	sp, {r1, ip}
   14d68:	str	r2, [sp]
   14d6c:	mov	r1, #1
   14d70:	mov	r2, r0
   14d74:	mov	r0, r4
   14d78:	bl	10e9c <__fprintf_chk@plt>
   14d7c:	b	14ca0 <__assert_fail@plt+0x3d68>
   14d80:	mov	r2, #5
   14d84:	ldr	r1, [pc, #364]	; 14ef8 <__assert_fail@plt+0x3fc0>
   14d88:	mov	r0, #0
   14d8c:	bl	10d7c <dcgettext@plt>
   14d90:	add	r1, r5, #8
   14d94:	ldr	r2, [r5, #4]
   14d98:	ldm	r1, {r1, ip, lr}
   14d9c:	ldr	r3, [r5]
   14da0:	str	r2, [sp]
   14da4:	stmib	sp, {r1, ip, lr}
   14da8:	mov	r1, #1
   14dac:	mov	r2, r0
   14db0:	mov	r0, r4
   14db4:	bl	10e9c <__fprintf_chk@plt>
   14db8:	b	14ca0 <__assert_fail@plt+0x3d68>
   14dbc:	mov	r2, #5
   14dc0:	ldr	r1, [pc, #308]	; 14efc <__assert_fail@plt+0x3fc4>
   14dc4:	mov	r0, #0
   14dc8:	bl	10d7c <dcgettext@plt>
   14dcc:	add	r1, r5, #8
   14dd0:	ldr	r2, [r5, #4]
   14dd4:	ldm	r1, {r1, ip, lr}
   14dd8:	ldr	r6, [r5, #20]
   14ddc:	ldr	r3, [r5]
   14de0:	stmib	sp, {r1, ip, lr}
   14de4:	mov	r1, #1
   14de8:	str	r2, [sp]
   14dec:	str	r6, [sp, #16]
   14df0:	mov	r2, r0
   14df4:	mov	r0, r4
   14df8:	bl	10e9c <__fprintf_chk@plt>
   14dfc:	b	14ca0 <__assert_fail@plt+0x3d68>
   14e00:	mov	r2, #5
   14e04:	ldr	r1, [pc, #244]	; 14f00 <__assert_fail@plt+0x3fc8>
   14e08:	mov	r0, #0
   14e0c:	bl	10d7c <dcgettext@plt>
   14e10:	ldr	r2, [r5, #24]
   14e14:	ldr	r3, [r5]
   14e18:	ldr	r6, [r5, #20]
   14e1c:	ldr	lr, [r5, #16]
   14e20:	ldr	ip, [r5, #12]
   14e24:	str	r2, [sp, #20]
   14e28:	ldr	r1, [r5, #8]
   14e2c:	ldr	r2, [r5, #4]
   14e30:	str	r6, [sp, #16]
   14e34:	stmib	sp, {r1, ip, lr}
   14e38:	mov	r1, #1
   14e3c:	str	r2, [sp]
   14e40:	mov	r2, r0
   14e44:	mov	r0, r4
   14e48:	bl	10e9c <__fprintf_chk@plt>
   14e4c:	b	14ca0 <__assert_fail@plt+0x3d68>
   14e50:	mov	r2, #5
   14e54:	ldr	r1, [pc, #168]	; 14f04 <__assert_fail@plt+0x3fcc>
   14e58:	mov	r0, #0
   14e5c:	bl	10d7c <dcgettext@plt>
   14e60:	ldr	r1, [r5, #28]
   14e64:	ldr	r2, [r5, #24]
   14e68:	ldr	r3, [r5]
   14e6c:	ldr	r6, [r5, #20]
   14e70:	ldr	lr, [r5, #16]
   14e74:	str	r1, [sp, #24]
   14e78:	ldr	ip, [r5, #12]
   14e7c:	str	r2, [sp, #20]
   14e80:	ldr	r1, [r5, #8]
   14e84:	ldr	r2, [r5, #4]
   14e88:	str	r6, [sp, #16]
   14e8c:	stmib	sp, {r1, ip, lr}
   14e90:	mov	r1, #1
   14e94:	str	r2, [sp]
   14e98:	mov	r2, r0
   14e9c:	mov	r0, r4
   14ea0:	bl	10e9c <__fprintf_chk@plt>
   14ea4:	b	14ca0 <__assert_fail@plt+0x3d68>
   14ea8:	str	r3, [sp]
   14eac:	mov	r1, #1
   14eb0:	mov	r3, r2
   14eb4:	ldr	r2, [pc, #76]	; 14f08 <__assert_fail@plt+0x3fd0>
   14eb8:	bl	10e9c <__fprintf_chk@plt>
   14ebc:	b	14ba8 <__assert_fail@plt+0x3c70>
   14ec0:	mov	r2, #5
   14ec4:	ldr	r1, [pc, #64]	; 14f0c <__assert_fail@plt+0x3fd4>
   14ec8:	b	14c4c <__assert_fail@plt+0x3d14>
   14ecc:	andeq	r7, r1, r4, rrx
   14ed0:	andeq	r7, r1, r8, ror r0
   14ed4:	andeq	r0, r0, r6, ror #15
   14ed8:	andeq	r7, r1, r0, asr r3
   14edc:	andeq	r7, r1, ip, ror r0
   14ee0:	andeq	r7, r1, r8, lsr #2
   14ee4:	andeq	r7, r1, r8, asr r2
   14ee8:	andeq	r7, r1, ip, asr #2
   14eec:	andeq	r7, r1, ip, asr r1
   14ef0:	andeq	r7, r1, r4, ror r1
   14ef4:	muleq	r1, r0, r1
   14ef8:			; <UNDEFINED> instruction: 0x000171b0
   14efc:	ldrdeq	r7, [r1], -r4
   14f00:	strdeq	r7, [r1], -ip
   14f04:	andeq	r7, r1, r8, lsr #4
   14f08:	andeq	r7, r1, r0, ror r0
   14f0c:	andeq	r7, r1, ip, lsl #5
   14f10:	push	{r4, r5, lr}
   14f14:	sub	sp, sp, #12
   14f18:	ldr	r5, [sp, #24]
   14f1c:	ldr	ip, [r5]
   14f20:	cmp	ip, #0
   14f24:	beq	14f40 <__assert_fail@plt+0x4008>
   14f28:	mov	lr, r5
   14f2c:	mov	ip, #0
   14f30:	ldr	r4, [lr, #4]!
   14f34:	add	ip, ip, #1
   14f38:	cmp	r4, #0
   14f3c:	bne	14f30 <__assert_fail@plt+0x3ff8>
   14f40:	stm	sp, {r5, ip}
   14f44:	bl	14b78 <__assert_fail@plt+0x3c40>
   14f48:	add	sp, sp, #12
   14f4c:	pop	{r4, r5, pc}
   14f50:	push	{r4, r5, lr}
   14f54:	sub	sp, sp, #52	; 0x34
   14f58:	add	r5, sp, #4
   14f5c:	ldr	r4, [sp, #64]	; 0x40
   14f60:	mov	ip, #0
   14f64:	sub	r4, r4, #4
   14f68:	ldr	lr, [r4, #4]!
   14f6c:	cmp	lr, #0
   14f70:	str	lr, [r5, #4]!
   14f74:	beq	14f84 <__assert_fail@plt+0x404c>
   14f78:	add	ip, ip, #1
   14f7c:	cmp	ip, #10
   14f80:	bne	14f68 <__assert_fail@plt+0x4030>
   14f84:	add	lr, sp, #8
   14f88:	str	ip, [sp, #4]
   14f8c:	str	lr, [sp]
   14f90:	bl	14b78 <__assert_fail@plt+0x3c40>
   14f94:	add	sp, sp, #52	; 0x34
   14f98:	pop	{r4, r5, pc}
   14f9c:	push	{r3}		; (str r3, [sp, #-4]!)
   14fa0:	push	{r4, lr}
   14fa4:	sub	sp, sp, #60	; 0x3c
   14fa8:	add	lr, sp, #56	; 0x38
   14fac:	add	r3, sp, #72	; 0x48
   14fb0:	str	r3, [lr, #-44]!	; 0xffffffd4
   14fb4:	add	r4, sp, #68	; 0x44
   14fb8:	mov	r3, #0
   14fbc:	ldr	ip, [r4, #4]!
   14fc0:	cmp	ip, #0
   14fc4:	str	ip, [lr, #4]!
   14fc8:	beq	14fd8 <__assert_fail@plt+0x40a0>
   14fcc:	add	r3, r3, #1
   14fd0:	cmp	r3, #10
   14fd4:	bne	14fbc <__assert_fail@plt+0x4084>
   14fd8:	add	ip, sp, #16
   14fdc:	str	r3, [sp, #4]
   14fe0:	str	ip, [sp]
   14fe4:	ldr	r3, [sp, #68]	; 0x44
   14fe8:	bl	14b78 <__assert_fail@plt+0x3c40>
   14fec:	add	sp, sp, #60	; 0x3c
   14ff0:	pop	{r4, lr}
   14ff4:	add	sp, sp, #4
   14ff8:	bx	lr
   14ffc:	ldr	r3, [pc, #116]	; 15078 <__assert_fail@plt+0x4140>
   15000:	push	{r4, lr}
   15004:	mov	r0, #10
   15008:	ldr	r1, [r3]
   1500c:	bl	10d70 <fputc_unlocked@plt>
   15010:	mov	r2, #5
   15014:	ldr	r1, [pc, #96]	; 1507c <__assert_fail@plt+0x4144>
   15018:	mov	r0, #0
   1501c:	bl	10d7c <dcgettext@plt>
   15020:	ldr	r2, [pc, #88]	; 15080 <__assert_fail@plt+0x4148>
   15024:	mov	r1, r0
   15028:	mov	r0, #1
   1502c:	bl	10e84 <__printf_chk@plt>
   15030:	mov	r2, #5
   15034:	ldr	r1, [pc, #72]	; 15084 <__assert_fail@plt+0x414c>
   15038:	mov	r0, #0
   1503c:	bl	10d7c <dcgettext@plt>
   15040:	ldr	r3, [pc, #64]	; 15088 <__assert_fail@plt+0x4150>
   15044:	ldr	r2, [pc, #64]	; 1508c <__assert_fail@plt+0x4154>
   15048:	mov	r1, r0
   1504c:	mov	r0, #1
   15050:	bl	10e84 <__printf_chk@plt>
   15054:	mov	r2, #5
   15058:	ldr	r1, [pc, #48]	; 15090 <__assert_fail@plt+0x4158>
   1505c:	mov	r0, #0
   15060:	bl	10d7c <dcgettext@plt>
   15064:	ldr	r2, [pc, #40]	; 15094 <__assert_fail@plt+0x415c>
   15068:	pop	{r4, lr}
   1506c:	mov	r1, r0
   15070:	mov	r0, #1
   15074:	b	10e84 <__printf_chk@plt>
   15078:	andeq	r8, r2, r4, asr r1
   1507c:	andeq	r7, r1, r8, asr #5
   15080:	ldrdeq	r7, [r1], -ip
   15084:	strdeq	r7, [r1], -r4
   15088:	andeq	r6, r1, r0, lsr #25
   1508c:	andeq	r6, r1, r8, asr #25
   15090:	andeq	r7, r1, r8, lsl #6
   15094:	andeq	r7, r1, r0, lsr r3
   15098:	push	{r4, lr}
   1509c:	bl	15df4 <__assert_fail@plt+0x4ebc>
   150a0:	cmp	r0, #0
   150a4:	popne	{r4, pc}
   150a8:	bl	155e0 <__assert_fail@plt+0x46a8>
   150ac:	push	{r4, lr}
   150b0:	bl	15df4 <__assert_fail@plt+0x4ebc>
   150b4:	cmp	r0, #0
   150b8:	popne	{r4, pc}
   150bc:	bl	155e0 <__assert_fail@plt+0x46a8>
   150c0:	push	{r4, lr}
   150c4:	bl	15df4 <__assert_fail@plt+0x4ebc>
   150c8:	cmp	r0, #0
   150cc:	popne	{r4, pc}
   150d0:	bl	155e0 <__assert_fail@plt+0x46a8>
   150d4:	push	{r4, r5, r6, lr}
   150d8:	mov	r5, r0
   150dc:	mov	r4, r1
   150e0:	bl	15e20 <__assert_fail@plt+0x4ee8>
   150e4:	cmp	r0, #0
   150e8:	popne	{r4, r5, r6, pc}
   150ec:	adds	r4, r4, #0
   150f0:	movne	r4, #1
   150f4:	cmp	r5, #0
   150f8:	orreq	r4, r4, #1
   150fc:	cmp	r4, #0
   15100:	popeq	{r4, r5, r6, pc}
   15104:	bl	155e0 <__assert_fail@plt+0x46a8>
   15108:	push	{r4, lr}
   1510c:	cmp	r1, #0
   15110:	orreq	r1, r1, #1
   15114:	bl	15e20 <__assert_fail@plt+0x4ee8>
   15118:	cmp	r0, #0
   1511c:	popne	{r4, pc}
   15120:	bl	155e0 <__assert_fail@plt+0x46a8>
   15124:	push	{r4, r5, r6, lr}
   15128:	mov	r6, r0
   1512c:	mov	r5, r1
   15130:	mov	r4, r2
   15134:	bl	15fd8 <__assert_fail@plt+0x50a0>
   15138:	cmp	r0, #0
   1513c:	popne	{r4, r5, r6, pc}
   15140:	cmp	r6, #0
   15144:	beq	15154 <__assert_fail@plt+0x421c>
   15148:	cmp	r5, #0
   1514c:	cmpne	r4, #0
   15150:	popeq	{r4, r5, r6, pc}
   15154:	bl	155e0 <__assert_fail@plt+0x46a8>
   15158:	b	15124 <__assert_fail@plt+0x41ec>
   1515c:	cmp	r2, #0
   15160:	cmpne	r1, #0
   15164:	moveq	r2, #1
   15168:	moveq	r1, r2
   1516c:	push	{r4, lr}
   15170:	bl	15fd8 <__assert_fail@plt+0x50a0>
   15174:	cmp	r0, #0
   15178:	popne	{r4, pc}
   1517c:	bl	155e0 <__assert_fail@plt+0x46a8>
   15180:	mov	r2, r1
   15184:	mov	r1, r0
   15188:	mov	r0, #0
   1518c:	b	15124 <__assert_fail@plt+0x41ec>
   15190:	mov	r2, r1
   15194:	mov	r1, r0
   15198:	mov	r0, #0
   1519c:	b	1515c <__assert_fail@plt+0x4224>
   151a0:	push	{r4, r5, r6, lr}
   151a4:	subs	r6, r0, #0
   151a8:	sub	sp, sp, #8
   151ac:	mov	r5, r1
   151b0:	ldr	r4, [r1]
   151b4:	beq	151f0 <__assert_fail@plt+0x42b8>
   151b8:	lsr	r1, r4, #1
   151bc:	add	r3, r1, #1
   151c0:	mvn	r3, r3
   151c4:	cmp	r4, r3
   151c8:	bhi	151ec <__assert_fail@plt+0x42b4>
   151cc:	add	r4, r4, #1
   151d0:	add	r4, r4, r1
   151d4:	mov	r0, r6
   151d8:	mov	r1, r4
   151dc:	bl	15124 <__assert_fail@plt+0x41ec>
   151e0:	str	r4, [r5]
   151e4:	add	sp, sp, #8
   151e8:	pop	{r4, r5, r6, pc}
   151ec:	bl	155e0 <__assert_fail@plt+0x46a8>
   151f0:	cmp	r4, #0
   151f4:	bne	151d4 <__assert_fail@plt+0x429c>
   151f8:	mov	r1, r2
   151fc:	mov	r0, #64	; 0x40
   15200:	str	r2, [sp, #4]
   15204:	bl	16118 <__assert_fail@plt+0x51e0>
   15208:	ldr	r2, [sp, #4]
   1520c:	cmp	r0, #0
   15210:	movne	r4, r0
   15214:	addeq	r4, r0, #1
   15218:	b	151d4 <__assert_fail@plt+0x429c>
   1521c:	mov	r2, #1
   15220:	b	151a0 <__assert_fail@plt+0x4268>
   15224:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15228:	sub	sp, sp, #12
   1522c:	ldr	r6, [r1]
   15230:	mov	sl, r1
   15234:	mov	r9, r0
   15238:	asrs	r4, r6, #1
   1523c:	mov	r5, r2
   15240:	mov	fp, r3
   15244:	ldr	r7, [sp, #48]	; 0x30
   15248:	bmi	153b4 <__assert_fail@plt+0x447c>
   1524c:	mvn	r3, #-2147483648	; 0x80000000
   15250:	sub	r3, r3, r4
   15254:	cmp	r6, r3
   15258:	movle	r3, #0
   1525c:	movgt	r3, #1
   15260:	mvn	r8, fp
   15264:	cmp	r3, #0
   15268:	addeq	r4, r4, r6
   1526c:	mvnne	r4, #-2147483648	; 0x80000000
   15270:	lsr	r8, r8, #31
   15274:	cmp	fp, r4
   15278:	movge	r3, #0
   1527c:	andlt	r3, r8, #1
   15280:	cmp	r3, #0
   15284:	beq	1536c <__assert_fail@plt+0x4434>
   15288:	cmp	r7, #0
   1528c:	blt	1543c <__assert_fail@plt+0x4504>
   15290:	bne	15434 <__assert_fail@plt+0x44fc>
   15294:	mov	r2, #64	; 0x40
   15298:	mov	r1, r7
   1529c:	mov	r0, r2
   152a0:	str	r2, [sp, #4]
   152a4:	bl	16324 <__assert_fail@plt+0x53ec>
   152a8:	ldr	r2, [sp, #4]
   152ac:	mov	r1, r7
   152b0:	mov	r4, r0
   152b4:	mov	r0, r2
   152b8:	bl	16544 <__assert_fail@plt+0x560c>
   152bc:	ldr	r2, [sp, #4]
   152c0:	sub	r1, r2, r1
   152c4:	cmp	r9, #0
   152c8:	sub	r3, r4, r6
   152cc:	streq	r9, [sl]
   152d0:	cmp	r3, r5
   152d4:	bge	15358 <__assert_fail@plt+0x4420>
   152d8:	cmp	r5, #0
   152dc:	blt	153c8 <__assert_fail@plt+0x4490>
   152e0:	cmp	r6, #0
   152e4:	blt	15304 <__assert_fail@plt+0x43cc>
   152e8:	mvn	r3, #-2147483648	; 0x80000000
   152ec:	sub	r3, r3, r5
   152f0:	cmp	r6, r3
   152f4:	movle	r3, #0
   152f8:	movgt	r3, #1
   152fc:	cmp	r3, #0
   15300:	bne	154c4 <__assert_fail@plt+0x458c>
   15304:	add	r5, r6, r5
   15308:	cmp	fp, r5
   1530c:	movge	r8, #0
   15310:	andlt	r8, r8, #1
   15314:	cmp	r8, #0
   15318:	mov	r4, r5
   1531c:	bne	154c4 <__assert_fail@plt+0x458c>
   15320:	cmp	r7, #0
   15324:	blt	153dc <__assert_fail@plt+0x44a4>
   15328:	beq	15354 <__assert_fail@plt+0x441c>
   1532c:	cmp	r5, #0
   15330:	blt	15484 <__assert_fail@plt+0x454c>
   15334:	mov	r1, r7
   15338:	mvn	r0, #-2147483648	; 0x80000000
   1533c:	bl	16324 <__assert_fail@plt+0x53ec>
   15340:	cmp	r5, r0
   15344:	movle	r0, #0
   15348:	movgt	r0, #1
   1534c:	cmp	r0, #0
   15350:	bne	154c4 <__assert_fail@plt+0x458c>
   15354:	mul	r1, r5, r7
   15358:	mov	r0, r9
   1535c:	bl	150d4 <__assert_fail@plt+0x419c>
   15360:	str	r4, [sl]
   15364:	add	sp, sp, #12
   15368:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1536c:	cmp	r7, #0
   15370:	blt	15408 <__assert_fail@plt+0x44d0>
   15374:	beq	15294 <__assert_fail@plt+0x435c>
   15378:	cmp	r4, #0
   1537c:	blt	15444 <__assert_fail@plt+0x450c>
   15380:	mov	r1, r7
   15384:	mvn	r0, #-2147483648	; 0x80000000
   15388:	bl	16324 <__assert_fail@plt+0x53ec>
   1538c:	cmp	r0, r4
   15390:	movge	r0, #0
   15394:	movlt	r0, #1
   15398:	cmp	r0, #0
   1539c:	mvnne	r2, #-2147483648	; 0x80000000
   153a0:	bne	15298 <__assert_fail@plt+0x4360>
   153a4:	mul	r1, r7, r4
   153a8:	cmp	r1, #63	; 0x3f
   153ac:	bgt	152c4 <__assert_fail@plt+0x438c>
   153b0:	b	15294 <__assert_fail@plt+0x435c>
   153b4:	rsb	r3, r4, #-2147483648	; 0x80000000
   153b8:	cmp	r6, r3
   153bc:	movge	r3, #0
   153c0:	movlt	r3, #1
   153c4:	b	15260 <__assert_fail@plt+0x4328>
   153c8:	rsb	r3, r5, #-2147483648	; 0x80000000
   153cc:	cmp	r6, r3
   153d0:	movge	r3, #0
   153d4:	movlt	r3, #1
   153d8:	b	152fc <__assert_fail@plt+0x43c4>
   153dc:	cmp	r5, #0
   153e0:	blt	15468 <__assert_fail@plt+0x4530>
   153e4:	cmn	r7, #1
   153e8:	beq	15354 <__assert_fail@plt+0x441c>
   153ec:	mov	r1, r7
   153f0:	mov	r0, #-2147483648	; 0x80000000
   153f4:	bl	16324 <__assert_fail@plt+0x53ec>
   153f8:	cmp	r5, r0
   153fc:	movle	r0, #0
   15400:	movgt	r0, #1
   15404:	b	1534c <__assert_fail@plt+0x4414>
   15408:	cmp	r4, #0
   1540c:	blt	154a8 <__assert_fail@plt+0x4570>
   15410:	cmn	r7, #1
   15414:	beq	153a4 <__assert_fail@plt+0x446c>
   15418:	mov	r1, r7
   1541c:	mov	r0, #-2147483648	; 0x80000000
   15420:	bl	16324 <__assert_fail@plt+0x53ec>
   15424:	cmp	r0, r4
   15428:	movge	r0, #0
   1542c:	movlt	r0, #1
   15430:	b	15398 <__assert_fail@plt+0x4460>
   15434:	mov	r4, fp
   15438:	b	15380 <__assert_fail@plt+0x4448>
   1543c:	mov	r4, fp
   15440:	b	15410 <__assert_fail@plt+0x44d8>
   15444:	cmn	r4, #1
   15448:	beq	153a4 <__assert_fail@plt+0x446c>
   1544c:	mov	r1, r4
   15450:	mov	r0, #-2147483648	; 0x80000000
   15454:	bl	16324 <__assert_fail@plt+0x53ec>
   15458:	cmp	r7, r0
   1545c:	movle	r0, #0
   15460:	movgt	r0, #1
   15464:	b	15398 <__assert_fail@plt+0x4460>
   15468:	mov	r1, r7
   1546c:	mvn	r0, #-2147483648	; 0x80000000
   15470:	bl	16324 <__assert_fail@plt+0x53ec>
   15474:	cmp	r5, r0
   15478:	movge	r0, #0
   1547c:	movlt	r0, #1
   15480:	b	1534c <__assert_fail@plt+0x4414>
   15484:	cmn	r5, #1
   15488:	beq	15354 <__assert_fail@plt+0x441c>
   1548c:	mov	r1, r5
   15490:	mov	r0, #-2147483648	; 0x80000000
   15494:	bl	16324 <__assert_fail@plt+0x53ec>
   15498:	cmp	r7, r0
   1549c:	movle	r0, #0
   154a0:	movgt	r0, #1
   154a4:	b	1534c <__assert_fail@plt+0x4414>
   154a8:	mov	r1, r7
   154ac:	mvn	r0, #-2147483648	; 0x80000000
   154b0:	bl	16324 <__assert_fail@plt+0x53ec>
   154b4:	cmp	r0, r4
   154b8:	movle	r0, #0
   154bc:	movgt	r0, #1
   154c0:	b	15398 <__assert_fail@plt+0x4460>
   154c4:	bl	155e0 <__assert_fail@plt+0x46a8>
   154c8:	push	{r4, lr}
   154cc:	mov	r1, #1
   154d0:	bl	15dac <__assert_fail@plt+0x4e74>
   154d4:	cmp	r0, #0
   154d8:	popne	{r4, pc}
   154dc:	bl	155e0 <__assert_fail@plt+0x46a8>
   154e0:	push	{r4, lr}
   154e4:	mov	r1, #1
   154e8:	bl	15dac <__assert_fail@plt+0x4e74>
   154ec:	cmp	r0, #0
   154f0:	popne	{r4, pc}
   154f4:	bl	155e0 <__assert_fail@plt+0x46a8>
   154f8:	push	{r4, lr}
   154fc:	bl	15dac <__assert_fail@plt+0x4e74>
   15500:	cmp	r0, #0
   15504:	popne	{r4, pc}
   15508:	bl	155e0 <__assert_fail@plt+0x46a8>
   1550c:	push	{r4, lr}
   15510:	bl	15dac <__assert_fail@plt+0x4e74>
   15514:	cmp	r0, #0
   15518:	popne	{r4, pc}
   1551c:	bl	155e0 <__assert_fail@plt+0x46a8>
   15520:	push	{r4, r5, r6, lr}
   15524:	mov	r6, r0
   15528:	mov	r0, r1
   1552c:	mov	r4, r1
   15530:	bl	15df4 <__assert_fail@plt+0x4ebc>
   15534:	subs	r5, r0, #0
   15538:	beq	15550 <__assert_fail@plt+0x4618>
   1553c:	mov	r2, r4
   15540:	mov	r1, r6
   15544:	bl	10d34 <memcpy@plt>
   15548:	mov	r0, r5
   1554c:	pop	{r4, r5, r6, pc}
   15550:	bl	155e0 <__assert_fail@plt+0x46a8>
   15554:	push	{r4, r5, r6, lr}
   15558:	mov	r6, r0
   1555c:	mov	r0, r1
   15560:	mov	r4, r1
   15564:	bl	15df4 <__assert_fail@plt+0x4ebc>
   15568:	subs	r5, r0, #0
   1556c:	beq	15584 <__assert_fail@plt+0x464c>
   15570:	mov	r2, r4
   15574:	mov	r1, r6
   15578:	bl	10d34 <memcpy@plt>
   1557c:	mov	r0, r5
   15580:	pop	{r4, r5, r6, pc}
   15584:	bl	155e0 <__assert_fail@plt+0x46a8>
   15588:	push	{r4, r5, r6, lr}
   1558c:	mov	r6, r0
   15590:	add	r0, r1, #1
   15594:	mov	r4, r1
   15598:	bl	15df4 <__assert_fail@plt+0x4ebc>
   1559c:	subs	r5, r0, #0
   155a0:	beq	155c0 <__assert_fail@plt+0x4688>
   155a4:	mov	r3, #0
   155a8:	mov	r1, r6
   155ac:	strb	r3, [r5, r4]
   155b0:	mov	r2, r4
   155b4:	bl	10d34 <memcpy@plt>
   155b8:	mov	r0, r5
   155bc:	pop	{r4, r5, r6, pc}
   155c0:	bl	155e0 <__assert_fail@plt+0x46a8>
   155c4:	push	{r4, lr}
   155c8:	mov	r4, r0
   155cc:	bl	10e48 <strlen@plt>
   155d0:	add	r1, r0, #1
   155d4:	mov	r0, r4
   155d8:	pop	{r4, lr}
   155dc:	b	15520 <__assert_fail@plt+0x45e8>
   155e0:	ldr	r3, [pc, #44]	; 15614 <__assert_fail@plt+0x46dc>
   155e4:	push	{r4, lr}
   155e8:	mov	r2, #5
   155ec:	ldr	r1, [pc, #36]	; 15618 <__assert_fail@plt+0x46e0>
   155f0:	mov	r0, #0
   155f4:	ldr	r4, [r3]
   155f8:	bl	10d7c <dcgettext@plt>
   155fc:	ldr	r2, [pc, #24]	; 1561c <__assert_fail@plt+0x46e4>
   15600:	mov	r1, #0
   15604:	mov	r3, r0
   15608:	mov	r0, r4
   1560c:	bl	10de8 <error@plt>
   15610:	bl	10f2c <abort@plt>
   15614:	strdeq	r8, [r2], -r0
   15618:	andeq	r7, r1, r0, lsl #7
   1561c:	andeq	r6, r1, ip, asr #30
   15620:	push	{r4, r5, r6, r7, lr}
   15624:	sub	sp, sp, #20
   15628:	mov	r6, r2
   1562c:	ldr	ip, [sp, #48]	; 0x30
   15630:	mov	r2, r1
   15634:	mov	r7, r3
   15638:	str	ip, [sp]
   1563c:	add	r3, sp, #8
   15640:	mov	r1, #0
   15644:	mov	r5, r0
   15648:	ldr	r4, [sp, #56]	; 0x38
   1564c:	bl	15804 <__assert_fail@plt+0x48cc>
   15650:	cmp	r0, #0
   15654:	bne	156d8 <__assert_fail@plt+0x47a0>
   15658:	ldrd	r0, [sp, #8]
   1565c:	cmp	r1, r7
   15660:	cmpeq	r0, r6
   15664:	ldrd	r6, [sp, #40]	; 0x28
   15668:	movcc	r3, #1
   1566c:	movcs	r3, #0
   15670:	cmp	r1, r7
   15674:	cmpeq	r0, r6
   15678:	orrhi	r3, r3, #1
   1567c:	cmp	r3, #0
   15680:	beq	156d0 <__assert_fail@plt+0x4798>
   15684:	mov	r3, #0
   15688:	mvn	r2, #-1073741824	; 0xc0000000
   1568c:	cmp	r1, r3
   15690:	cmpeq	r0, r2
   15694:	bhi	15704 <__assert_fail@plt+0x47cc>
   15698:	bl	10e60 <__errno_location@plt>
   1569c:	mov	r3, #34	; 0x22
   156a0:	mov	r6, r3
   156a4:	str	r3, [r0]
   156a8:	cmp	r4, #0
   156ac:	moveq	r4, #1
   156b0:	mov	r0, r5
   156b4:	bl	14b60 <__assert_fail@plt+0x3c28>
   156b8:	mov	r1, r6
   156bc:	ldr	r3, [sp, #52]	; 0x34
   156c0:	ldr	r2, [pc, #144]	; 15758 <__assert_fail@plt+0x4820>
   156c4:	str	r0, [sp]
   156c8:	mov	r0, r4
   156cc:	bl	10de8 <error@plt>
   156d0:	add	sp, sp, #20
   156d4:	pop	{r4, r5, r6, r7, pc}
   156d8:	cmp	r0, #1
   156dc:	beq	15718 <__assert_fail@plt+0x47e0>
   156e0:	cmp	r0, #3
   156e4:	beq	15748 <__assert_fail@plt+0x4810>
   156e8:	cmp	r4, #0
   156ec:	beq	15738 <__assert_fail@plt+0x4800>
   156f0:	bl	10e60 <__errno_location@plt>
   156f4:	ldr	r6, [r0]
   156f8:	cmp	r6, #22
   156fc:	moveq	r6, #0
   15700:	b	156b0 <__assert_fail@plt+0x4778>
   15704:	bl	10e60 <__errno_location@plt>
   15708:	mov	r3, #75	; 0x4b
   1570c:	mov	r6, r3
   15710:	str	r3, [r0]
   15714:	b	156a8 <__assert_fail@plt+0x4770>
   15718:	bl	10e60 <__errno_location@plt>
   1571c:	mov	r3, #75	; 0x4b
   15720:	mov	r6, r3
   15724:	str	r3, [r0]
   15728:	cmp	r4, #0
   1572c:	moveq	r4, #1
   15730:	bne	156f8 <__assert_fail@plt+0x47c0>
   15734:	b	156b0 <__assert_fail@plt+0x4778>
   15738:	bl	10e60 <__errno_location@plt>
   1573c:	mov	r4, #1
   15740:	ldr	r6, [r0]
   15744:	b	156f8 <__assert_fail@plt+0x47c0>
   15748:	bl	10e60 <__errno_location@plt>
   1574c:	mov	r6, #0
   15750:	str	r6, [r0]
   15754:	b	15728 <__assert_fail@plt+0x47f0>
   15758:	andeq	r6, r1, r8, asr #30
   1575c:	push	{r4, r5}
   15760:	mov	r1, #10
   15764:	pop	{r4, r5}
   15768:	b	15620 <__assert_fail@plt+0x46e8>
   1576c:	push	{r4, r5, r6, r7, r8, lr}
   15770:	subs	r5, r1, #0
   15774:	mov	r4, r0
   15778:	blt	157ec <__assert_fail@plt+0x48b4>
   1577c:	moveq	r6, #0
   15780:	moveq	r7, #0
   15784:	bne	157ac <__assert_fail@plt+0x4874>
   15788:	ldr	r2, [r4]
   1578c:	ldr	r1, [r4, #4]
   15790:	mov	r0, #0
   15794:	mul	ip, r2, r7
   15798:	umull	r2, r3, r2, r5
   1579c:	mla	r5, r5, r1, ip
   157a0:	add	r3, r5, r3
   157a4:	strd	r2, [r4]
   157a8:	pop	{r4, r5, r6, r7, r8, pc}
   157ac:	asr	r7, r5, #31
   157b0:	mov	r2, r5
   157b4:	mov	r3, r7
   157b8:	mvn	r0, #0
   157bc:	mvn	r1, #0
   157c0:	bl	16564 <__assert_fail@plt+0x562c>
   157c4:	ldrd	r2, [r4]
   157c8:	mov	r6, r5
   157cc:	cmp	r1, r3
   157d0:	cmpeq	r0, r2
   157d4:	bcs	15788 <__assert_fail@plt+0x4850>
   157d8:	mvn	r2, #0
   157dc:	mvn	r3, #0
   157e0:	mov	r0, #1
   157e4:	strd	r2, [r4]
   157e8:	pop	{r4, r5, r6, r7, r8, pc}
   157ec:	ldrd	r2, [r0]
   157f0:	orrs	r3, r2, r3
   157f4:	moveq	r6, r5
   157f8:	asreq	r7, r6, #31
   157fc:	bne	157d8 <__assert_fail@plt+0x48a0>
   15800:	b	15788 <__assert_fail@plt+0x4850>
   15804:	cmp	r2, #36	; 0x24
   15808:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1580c:	sub	sp, sp, #20
   15810:	bhi	15d84 <__assert_fail@plt+0x4e4c>
   15814:	cmp	r1, #0
   15818:	mov	r8, r2
   1581c:	mov	r7, r0
   15820:	mov	r5, r1
   15824:	mov	r6, r3
   15828:	addeq	r5, sp, #4
   1582c:	bl	10e60 <__errno_location@plt>
   15830:	mov	r3, #0
   15834:	str	r3, [r0]
   15838:	mov	r9, r0
   1583c:	bl	10e30 <__ctype_b_loc@plt>
   15840:	ldrb	r3, [r7]
   15844:	mov	r2, r7
   15848:	ldr	r0, [r0]
   1584c:	b	15854 <__assert_fail@plt+0x491c>
   15850:	ldrb	r3, [r2, #1]!
   15854:	lsl	r1, r3, #1
   15858:	ldrh	r4, [r0, r1]
   1585c:	ands	r4, r4, #8192	; 0x2000
   15860:	bne	15850 <__assert_fail@plt+0x4918>
   15864:	cmp	r3, #45	; 0x2d
   15868:	bne	1587c <__assert_fail@plt+0x4944>
   1586c:	mov	r4, #4
   15870:	mov	r0, r4
   15874:	add	sp, sp, #20
   15878:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1587c:	mov	r2, r8
   15880:	mov	r3, r4
   15884:	mov	r1, r5
   15888:	mov	r0, r7
   1588c:	bl	10d40 <__strtoull_internal@plt>
   15890:	ldr	r8, [r5]
   15894:	cmp	r7, r8
   15898:	mov	r2, r0
   1589c:	str	r0, [sp, #8]
   158a0:	str	r1, [sp, #12]
   158a4:	beq	158f0 <__assert_fail@plt+0x49b8>
   158a8:	ldr	r4, [r9]
   158ac:	cmp	r4, #0
   158b0:	bne	158e0 <__assert_fail@plt+0x49a8>
   158b4:	ldr	r3, [sp, #56]	; 0x38
   158b8:	cmp	r3, #0
   158bc:	beq	158cc <__assert_fail@plt+0x4994>
   158c0:	ldrb	r9, [r8]
   158c4:	cmp	r9, #0
   158c8:	bne	15928 <__assert_fail@plt+0x49f0>
   158cc:	mov	r0, r4
   158d0:	str	r2, [r6]
   158d4:	str	r1, [r6, #4]
   158d8:	add	sp, sp, #20
   158dc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   158e0:	cmp	r4, #34	; 0x22
   158e4:	bne	1586c <__assert_fail@plt+0x4934>
   158e8:	mov	r4, #1
   158ec:	b	158b4 <__assert_fail@plt+0x497c>
   158f0:	ldr	r3, [sp, #56]	; 0x38
   158f4:	cmp	r3, #0
   158f8:	beq	1586c <__assert_fail@plt+0x4934>
   158fc:	ldrb	r1, [r8]
   15900:	cmp	r1, #0
   15904:	beq	1586c <__assert_fail@plt+0x4934>
   15908:	mov	r0, r3
   1590c:	bl	10e54 <strchr@plt>
   15910:	cmp	r0, #0
   15914:	beq	1586c <__assert_fail@plt+0x4934>
   15918:	ldrb	r9, [r8]
   1591c:	mov	r2, #1
   15920:	mov	r3, #0
   15924:	strd	r2, [sp, #8]
   15928:	mov	r1, r9
   1592c:	ldr	r0, [sp, #56]	; 0x38
   15930:	bl	10e54 <strchr@plt>
   15934:	cmp	r0, #0
   15938:	beq	15d40 <__assert_fail@plt+0x4e08>
   1593c:	sub	r3, r9, #69	; 0x45
   15940:	cmp	r3, #47	; 0x2f
   15944:	ldrls	pc, [pc, r3, lsl #2]
   15948:	b	15a0c <__assert_fail@plt+0x4ad4>
   1594c:	strdeq	r5, [r1], -ip
   15950:	andeq	r5, r1, ip, lsl #20
   15954:	strdeq	r5, [r1], -ip
   15958:	andeq	r5, r1, ip, lsl #20
   1595c:	andeq	r5, r1, ip, lsl #20
   15960:	andeq	r5, r1, ip, lsl #20
   15964:	strdeq	r5, [r1], -ip
   15968:	andeq	r5, r1, ip, lsl #20
   1596c:	strdeq	r5, [r1], -ip
   15970:	andeq	r5, r1, ip, lsl #20
   15974:	andeq	r5, r1, ip, lsl #20
   15978:	strdeq	r5, [r1], -ip
   1597c:	andeq	r5, r1, ip, lsl #20
   15980:	andeq	r5, r1, ip, lsl #20
   15984:	andeq	r5, r1, ip, lsl #20
   15988:	strdeq	r5, [r1], -ip
   1598c:	andeq	r5, r1, ip, lsl #20
   15990:	andeq	r5, r1, ip, lsl #20
   15994:	andeq	r5, r1, ip, lsl #20
   15998:	andeq	r5, r1, ip, lsl #20
   1599c:	strdeq	r5, [r1], -ip
   159a0:	strdeq	r5, [r1], -ip
   159a4:	andeq	r5, r1, ip, lsl #20
   159a8:	andeq	r5, r1, ip, lsl #20
   159ac:	andeq	r5, r1, ip, lsl #20
   159b0:	andeq	r5, r1, ip, lsl #20
   159b4:	andeq	r5, r1, ip, lsl #20
   159b8:	andeq	r5, r1, ip, lsl #20
   159bc:	andeq	r5, r1, ip, lsl #20
   159c0:	andeq	r5, r1, ip, lsl #20
   159c4:	andeq	r5, r1, ip, lsl #20
   159c8:	andeq	r5, r1, ip, lsl #20
   159cc:	andeq	r5, r1, ip, lsl #20
   159d0:	andeq	r5, r1, ip, lsl #20
   159d4:	strdeq	r5, [r1], -ip
   159d8:	andeq	r5, r1, ip, lsl #20
   159dc:	andeq	r5, r1, ip, lsl #20
   159e0:	andeq	r5, r1, ip, lsl #20
   159e4:	strdeq	r5, [r1], -ip
   159e8:	andeq	r5, r1, ip, lsl #20
   159ec:	strdeq	r5, [r1], -ip
   159f0:	andeq	r5, r1, ip, lsl #20
   159f4:	andeq	r5, r1, ip, lsl #20
   159f8:	andeq	r5, r1, ip, lsl #20
   159fc:	andeq	r5, r1, ip, lsl #20
   15a00:	andeq	r5, r1, ip, lsl #20
   15a04:	andeq	r5, r1, ip, lsl #20
   15a08:	strdeq	r5, [r1], -ip
   15a0c:	mov	r7, #1
   15a10:	mov	sl, #1024	; 0x400
   15a14:	sub	r9, r9, #66	; 0x42
   15a18:	cmp	r9, #53	; 0x35
   15a1c:	ldrls	pc, [pc, r9, lsl #2]
   15a20:	b	15d40 <__assert_fail@plt+0x4e08>
   15a24:	andeq	r5, r1, ip, lsl #25
   15a28:	andeq	r5, r1, r0, asr #26
   15a2c:	andeq	r5, r1, r0, asr #26
   15a30:	andeq	r5, r1, r4, ror #24
   15a34:	andeq	r5, r1, r0, asr #26
   15a38:	andeq	r5, r1, ip, lsr ip
   15a3c:	andeq	r5, r1, r0, asr #26
   15a40:	andeq	r5, r1, r0, asr #26
   15a44:	andeq	r5, r1, r0, asr #26
   15a48:	andeq	r5, r1, ip, lsl ip
   15a4c:	andeq	r5, r1, r0, asr #26
   15a50:	andeq	r5, r1, r8, ror #25
   15a54:	andeq	r5, r1, r0, asr #26
   15a58:	andeq	r5, r1, r0, asr #26
   15a5c:	andeq	r5, r1, r0, asr #25
   15a60:	andeq	r5, r1, r0, asr #26
   15a64:	andeq	r5, r1, r0, asr #26
   15a68:	andeq	r5, r1, r0, asr #26
   15a6c:	andeq	r5, r1, r8, lsl sp
   15a70:	andeq	r5, r1, r0, asr #26
   15a74:	andeq	r5, r1, r0, asr #26
   15a78:	andeq	r5, r1, r0, asr #26
   15a7c:	andeq	r5, r1, r0, asr #26
   15a80:	strdeq	r5, [r1], -r4
   15a84:	andeq	r5, r1, r0, asr #23
   15a88:	andeq	r5, r1, r0, asr #26
   15a8c:	andeq	r5, r1, r0, asr #26
   15a90:	andeq	r5, r1, r0, asr #26
   15a94:	andeq	r5, r1, r0, asr #26
   15a98:	andeq	r5, r1, r0, asr #26
   15a9c:	andeq	r5, r1, r0, asr #26
   15aa0:	andeq	r5, r1, r0, asr #26
   15aa4:	andeq	r5, r1, ip, lsl #23
   15aa8:	andeq	r5, r1, ip, ror fp
   15aac:	andeq	r5, r1, r0, asr #26
   15ab0:	andeq	r5, r1, r0, asr #26
   15ab4:	andeq	r5, r1, r0, asr #26
   15ab8:	andeq	r5, r1, ip, lsr ip
   15abc:	andeq	r5, r1, r0, asr #26
   15ac0:	andeq	r5, r1, r0, asr #26
   15ac4:	andeq	r5, r1, r0, asr #26
   15ac8:	andeq	r5, r1, ip, lsl ip
   15acc:	andeq	r5, r1, r0, asr #26
   15ad0:	andeq	r5, r1, r8, ror #25
   15ad4:	andeq	r5, r1, r0, asr #26
   15ad8:	andeq	r5, r1, r0, asr #26
   15adc:	andeq	r5, r1, r0, asr #26
   15ae0:	andeq	r5, r1, r0, asr #26
   15ae4:	andeq	r5, r1, r0, asr #26
   15ae8:	andeq	r5, r1, r0, asr #26
   15aec:	andeq	r5, r1, r8, lsl sp
   15af0:	andeq	r5, r1, r0, asr #26
   15af4:	andeq	r5, r1, r0, asr #26
   15af8:	andeq	r5, r1, r8, lsr fp
   15afc:	mov	r1, #48	; 0x30
   15b00:	ldr	r0, [sp, #56]	; 0x38
   15b04:	bl	10e54 <strchr@plt>
   15b08:	cmp	r0, #0
   15b0c:	beq	15a0c <__assert_fail@plt+0x4ad4>
   15b10:	ldrb	r3, [r8, #1]
   15b14:	cmp	r3, #68	; 0x44
   15b18:	beq	15b2c <__assert_fail@plt+0x4bf4>
   15b1c:	cmp	r3, #105	; 0x69
   15b20:	beq	15d50 <__assert_fail@plt+0x4e18>
   15b24:	cmp	r3, #66	; 0x42
   15b28:	bne	15a0c <__assert_fail@plt+0x4ad4>
   15b2c:	mov	r7, #2
   15b30:	mov	sl, #1000	; 0x3e8
   15b34:	b	15a14 <__assert_fail@plt+0x4adc>
   15b38:	ldrd	r2, [sp, #8]
   15b3c:	cmp	r2, #0
   15b40:	sbcs	r1, r3, #0
   15b44:	blt	15d68 <__assert_fail@plt+0x4e30>
   15b48:	adds	r2, r2, r2
   15b4c:	adc	r3, r3, r3
   15b50:	mov	r1, r3
   15b54:	mov	r9, #0
   15b58:	str	r2, [sp, #8]
   15b5c:	str	r3, [sp, #12]
   15b60:	add	r3, r8, r7
   15b64:	str	r3, [r5]
   15b68:	ldrb	r3, [r8, r7]
   15b6c:	orr	r4, r4, r9
   15b70:	cmp	r3, #0
   15b74:	orrne	r4, r4, #2
   15b78:	b	158cc <__assert_fail@plt+0x4994>
   15b7c:	ldr	r2, [sp, #8]
   15b80:	ldr	r1, [sp, #12]
   15b84:	mov	r9, #0
   15b88:	b	15b60 <__assert_fail@plt+0x4c28>
   15b8c:	ldrd	r2, [sp, #8]
   15b90:	ldr	r1, [pc, #512]	; 15d98 <__assert_fail@plt+0x4e60>
   15b94:	mvn	r0, #0
   15b98:	cmp	r3, r1
   15b9c:	cmpeq	r2, r0
   15ba0:	bhi	15d68 <__assert_fail@plt+0x4e30>
   15ba4:	lsl	r1, r3, #9
   15ba8:	orr	r1, r1, r2, lsr #23
   15bac:	lsl	r2, r2, #9
   15bb0:	str	r1, [sp, #12]
   15bb4:	str	r2, [sp, #8]
   15bb8:	mov	r9, #0
   15bbc:	b	15b60 <__assert_fail@plt+0x4c28>
   15bc0:	mov	fp, #7
   15bc4:	mov	r9, #0
   15bc8:	add	r8, sp, #8
   15bcc:	mov	r1, sl
   15bd0:	mov	r0, r8
   15bd4:	bl	1576c <__assert_fail@plt+0x4834>
   15bd8:	subs	fp, fp, #1
   15bdc:	orr	r9, r9, r0
   15be0:	bne	15bcc <__assert_fail@plt+0x4c94>
   15be4:	ldr	r8, [r5]
   15be8:	ldr	r2, [sp, #8]
   15bec:	ldr	r1, [sp, #12]
   15bf0:	b	15b60 <__assert_fail@plt+0x4c28>
   15bf4:	mov	fp, #8
   15bf8:	mov	r9, #0
   15bfc:	add	r8, sp, fp
   15c00:	mov	r1, sl
   15c04:	mov	r0, r8
   15c08:	bl	1576c <__assert_fail@plt+0x4834>
   15c0c:	subs	fp, fp, #1
   15c10:	orr	r9, r9, r0
   15c14:	bne	15c00 <__assert_fail@plt+0x4cc8>
   15c18:	b	15be4 <__assert_fail@plt+0x4cac>
   15c1c:	mov	r1, sl
   15c20:	add	r0, sp, #8
   15c24:	bl	1576c <__assert_fail@plt+0x4834>
   15c28:	ldr	r8, [r5]
   15c2c:	ldr	r2, [sp, #8]
   15c30:	ldr	r1, [sp, #12]
   15c34:	mov	r9, r0
   15c38:	b	15b60 <__assert_fail@plt+0x4c28>
   15c3c:	mov	fp, #3
   15c40:	mov	r9, #0
   15c44:	add	r8, sp, #8
   15c48:	mov	r1, sl
   15c4c:	mov	r0, r8
   15c50:	bl	1576c <__assert_fail@plt+0x4834>
   15c54:	subs	fp, fp, #1
   15c58:	orr	r9, r9, r0
   15c5c:	bne	15c48 <__assert_fail@plt+0x4d10>
   15c60:	b	15be4 <__assert_fail@plt+0x4cac>
   15c64:	mov	fp, #6
   15c68:	mov	r9, #0
   15c6c:	add	r8, sp, #8
   15c70:	mov	r1, sl
   15c74:	mov	r0, r8
   15c78:	bl	1576c <__assert_fail@plt+0x4834>
   15c7c:	subs	fp, fp, #1
   15c80:	orr	r9, r9, r0
   15c84:	bne	15c70 <__assert_fail@plt+0x4d38>
   15c88:	b	15be4 <__assert_fail@plt+0x4cac>
   15c8c:	ldrd	r0, [sp, #8]
   15c90:	ldr	r3, [pc, #260]	; 15d9c <__assert_fail@plt+0x4e64>
   15c94:	mvn	r2, #0
   15c98:	cmp	r1, r3
   15c9c:	cmpeq	r0, r2
   15ca0:	bhi	15d68 <__assert_fail@plt+0x4e30>
   15ca4:	lsl	r1, r1, #10
   15ca8:	orr	r1, r1, r0, lsr #22
   15cac:	lsl	r2, r0, #10
   15cb0:	str	r1, [sp, #12]
   15cb4:	str	r2, [sp, #8]
   15cb8:	mov	r9, #0
   15cbc:	b	15b60 <__assert_fail@plt+0x4c28>
   15cc0:	mov	fp, #5
   15cc4:	mov	r9, #0
   15cc8:	add	r8, sp, #8
   15ccc:	mov	r1, sl
   15cd0:	mov	r0, r8
   15cd4:	bl	1576c <__assert_fail@plt+0x4834>
   15cd8:	subs	fp, fp, #1
   15cdc:	orr	r9, r9, r0
   15ce0:	bne	15ccc <__assert_fail@plt+0x4d94>
   15ce4:	b	15be4 <__assert_fail@plt+0x4cac>
   15ce8:	mov	r1, sl
   15cec:	add	r0, sp, #8
   15cf0:	bl	1576c <__assert_fail@plt+0x4834>
   15cf4:	mov	r1, sl
   15cf8:	mov	r9, r0
   15cfc:	add	r0, sp, #8
   15d00:	bl	1576c <__assert_fail@plt+0x4834>
   15d04:	ldr	r8, [r5]
   15d08:	ldr	r2, [sp, #8]
   15d0c:	ldr	r1, [sp, #12]
   15d10:	orr	r9, r9, r0
   15d14:	b	15b60 <__assert_fail@plt+0x4c28>
   15d18:	mov	fp, #4
   15d1c:	mov	r9, #0
   15d20:	add	r8, sp, #8
   15d24:	mov	r1, sl
   15d28:	mov	r0, r8
   15d2c:	bl	1576c <__assert_fail@plt+0x4834>
   15d30:	subs	fp, fp, #1
   15d34:	orr	r9, r9, r0
   15d38:	bne	15d24 <__assert_fail@plt+0x4dec>
   15d3c:	b	15be4 <__assert_fail@plt+0x4cac>
   15d40:	ldrd	r2, [sp, #8]
   15d44:	orr	r4, r4, #2
   15d48:	strd	r2, [r6]
   15d4c:	b	15870 <__assert_fail@plt+0x4938>
   15d50:	ldrb	r7, [r8, #2]
   15d54:	mov	sl, #1024	; 0x400
   15d58:	cmp	r7, #66	; 0x42
   15d5c:	movne	r7, #1
   15d60:	moveq	r7, #3
   15d64:	b	15a14 <__assert_fail@plt+0x4adc>
   15d68:	mvn	r1, #0
   15d6c:	mvn	r0, #0
   15d70:	mvn	r2, #0
   15d74:	strd	r0, [sp, #8]
   15d78:	mov	r9, #1
   15d7c:	mov	r1, r2
   15d80:	b	15b60 <__assert_fail@plt+0x4c28>
   15d84:	ldr	r3, [pc, #20]	; 15da0 <__assert_fail@plt+0x4e68>
   15d88:	mov	r2, #85	; 0x55
   15d8c:	ldr	r1, [pc, #16]	; 15da4 <__assert_fail@plt+0x4e6c>
   15d90:	ldr	r0, [pc, #16]	; 15da8 <__assert_fail@plt+0x4e70>
   15d94:	bl	10f38 <__assert_fail@plt>
   15d98:	ldrshteq	pc, [pc], #-255	; <UNPREDICTABLE>
   15d9c:	ldrshteq	pc, [pc], -pc	; <UNPREDICTABLE>
   15da0:	muleq	r1, r4, r3
   15da4:	andeq	r7, r1, r0, lsr #7
   15da8:			; <UNDEFINED> instruction: 0x000173b0
   15dac:	cmp	r1, #0
   15db0:	cmpne	r0, #0
   15db4:	moveq	r1, #1
   15db8:	moveq	r0, r1
   15dbc:	umull	r2, r3, r0, r1
   15dc0:	adds	r3, r3, #0
   15dc4:	movne	r3, #1
   15dc8:	cmp	r2, #0
   15dcc:	blt	15ddc <__assert_fail@plt+0x4ea4>
   15dd0:	cmp	r3, #0
   15dd4:	bne	15ddc <__assert_fail@plt+0x4ea4>
   15dd8:	b	10cc8 <calloc@plt>
   15ddc:	push	{r4, lr}
   15de0:	bl	10e60 <__errno_location@plt>
   15de4:	mov	r3, #12
   15de8:	str	r3, [r0]
   15dec:	mov	r0, #0
   15df0:	pop	{r4, pc}
   15df4:	cmp	r0, #0
   15df8:	moveq	r0, #1
   15dfc:	cmp	r0, #0
   15e00:	blt	15e08 <__assert_fail@plt+0x4ed0>
   15e04:	b	10df4 <malloc@plt>
   15e08:	push	{r4, lr}
   15e0c:	bl	10e60 <__errno_location@plt>
   15e10:	mov	r3, #12
   15e14:	str	r3, [r0]
   15e18:	mov	r0, #0
   15e1c:	pop	{r4, pc}
   15e20:	cmp	r0, #0
   15e24:	beq	15e48 <__assert_fail@plt+0x4f10>
   15e28:	cmp	r1, #0
   15e2c:	push	{lr}		; (str lr, [sp, #-4]!)
   15e30:	sub	sp, sp, #12
   15e34:	beq	15e50 <__assert_fail@plt+0x4f18>
   15e38:	blt	15e68 <__assert_fail@plt+0x4f30>
   15e3c:	add	sp, sp, #12
   15e40:	pop	{lr}		; (ldr lr, [sp], #4)
   15e44:	b	10d88 <realloc@plt>
   15e48:	mov	r0, r1
   15e4c:	b	15df4 <__assert_fail@plt+0x4ebc>
   15e50:	str	r1, [sp, #4]
   15e54:	bl	15ef8 <__assert_fail@plt+0x4fc0>
   15e58:	ldr	r3, [sp, #4]
   15e5c:	mov	r0, r3
   15e60:	add	sp, sp, #12
   15e64:	pop	{pc}		; (ldr pc, [sp], #4)
   15e68:	bl	10e60 <__errno_location@plt>
   15e6c:	mov	r2, #12
   15e70:	mov	r3, #0
   15e74:	str	r2, [r0]
   15e78:	b	15e5c <__assert_fail@plt+0x4f24>
   15e7c:	push	{r4, r5, r6, lr}
   15e80:	mov	r4, r0
   15e84:	bl	10dd0 <__fpending@plt>
   15e88:	ldr	r5, [r4]
   15e8c:	and	r5, r5, #32
   15e90:	mov	r6, r0
   15e94:	mov	r0, r4
   15e98:	bl	12b00 <__assert_fail@plt+0x1bc8>
   15e9c:	cmp	r5, #0
   15ea0:	mov	r4, r0
   15ea4:	bne	15ec4 <__assert_fail@plt+0x4f8c>
   15ea8:	cmp	r0, #0
   15eac:	beq	15ebc <__assert_fail@plt+0x4f84>
   15eb0:	cmp	r6, #0
   15eb4:	beq	15ee0 <__assert_fail@plt+0x4fa8>
   15eb8:	mvn	r4, #0
   15ebc:	mov	r0, r4
   15ec0:	pop	{r4, r5, r6, pc}
   15ec4:	cmp	r0, #0
   15ec8:	bne	15eb8 <__assert_fail@plt+0x4f80>
   15ecc:	bl	10e60 <__errno_location@plt>
   15ed0:	str	r4, [r0]
   15ed4:	mvn	r4, #0
   15ed8:	mov	r0, r4
   15edc:	pop	{r4, r5, r6, pc}
   15ee0:	bl	10e60 <__errno_location@plt>
   15ee4:	ldr	r4, [r0]
   15ee8:	subs	r4, r4, #9
   15eec:	mvnne	r4, #0
   15ef0:	mov	r0, r4
   15ef4:	pop	{r4, r5, r6, pc}
   15ef8:	push	{r4, r5, lr}
   15efc:	sub	sp, sp, #12
   15f00:	mov	r5, r0
   15f04:	bl	10e60 <__errno_location@plt>
   15f08:	mov	r2, #0
   15f0c:	mov	r4, r0
   15f10:	ldr	r3, [r0]
   15f14:	str	r2, [r4]
   15f18:	mov	r0, r5
   15f1c:	str	r3, [sp]
   15f20:	str	r3, [sp, #4]
   15f24:	bl	10d1c <free@plt>
   15f28:	ldr	r3, [r4]
   15f2c:	add	r2, sp, #8
   15f30:	cmp	r3, #0
   15f34:	moveq	r3, #4
   15f38:	movne	r3, #0
   15f3c:	add	r3, r2, r3
   15f40:	ldr	r3, [r3, #-8]
   15f44:	str	r3, [r4]
   15f48:	add	sp, sp, #12
   15f4c:	pop	{r4, r5, pc}
   15f50:	push	{r4, lr}
   15f54:	mov	r0, #14
   15f58:	bl	10ef0 <nl_langinfo@plt>
   15f5c:	cmp	r0, #0
   15f60:	beq	15f78 <__assert_fail@plt+0x5040>
   15f64:	ldrb	r2, [r0]
   15f68:	ldr	r3, [pc, #16]	; 15f80 <__assert_fail@plt+0x5048>
   15f6c:	cmp	r2, #0
   15f70:	moveq	r0, r3
   15f74:	pop	{r4, pc}
   15f78:	ldr	r0, [pc]	; 15f80 <__assert_fail@plt+0x5048>
   15f7c:	pop	{r4, pc}
   15f80:	ldrdeq	r7, [r1], -r8
   15f84:	push	{r4, r5, r6, r7, lr}
   15f88:	subs	r6, r0, #0
   15f8c:	sub	sp, sp, #12
   15f90:	addeq	r6, sp, #4
   15f94:	mov	r0, r6
   15f98:	mov	r5, r2
   15f9c:	mov	r7, r1
   15fa0:	bl	10ddc <mbrtowc@plt>
   15fa4:	cmp	r5, #0
   15fa8:	cmnne	r0, #3
   15fac:	mov	r4, r0
   15fb0:	bls	15fcc <__assert_fail@plt+0x5094>
   15fb4:	mov	r0, #0
   15fb8:	bl	16024 <__assert_fail@plt+0x50ec>
   15fbc:	cmp	r0, #0
   15fc0:	moveq	r4, #1
   15fc4:	ldrbeq	r3, [r7]
   15fc8:	streq	r3, [r6]
   15fcc:	mov	r0, r4
   15fd0:	add	sp, sp, #12
   15fd4:	pop	{r4, r5, r6, r7, pc}
   15fd8:	push	{r4, r5, r6, lr}
   15fdc:	subs	r4, r2, #0
   15fe0:	mov	r6, r0
   15fe4:	mov	r5, r1
   15fe8:	beq	16014 <__assert_fail@plt+0x50dc>
   15fec:	mov	r1, r4
   15ff0:	mvn	r0, #0
   15ff4:	bl	16118 <__assert_fail@plt+0x51e0>
   15ff8:	cmp	r0, r5
   15ffc:	bcs	16014 <__assert_fail@plt+0x50dc>
   16000:	bl	10e60 <__errno_location@plt>
   16004:	mov	r3, #12
   16008:	str	r3, [r0]
   1600c:	mov	r0, #0
   16010:	pop	{r4, r5, r6, pc}
   16014:	mul	r1, r5, r4
   16018:	mov	r0, r6
   1601c:	pop	{r4, r5, r6, lr}
   16020:	b	15e20 <__assert_fail@plt+0x4ee8>
   16024:	push	{lr}		; (str lr, [sp, #-4]!)
   16028:	sub	sp, sp, #268	; 0x10c
   1602c:	add	r1, sp, #4
   16030:	ldr	r2, [pc, #60]	; 16074 <__assert_fail@plt+0x513c>
   16034:	bl	16080 <__assert_fail@plt+0x5148>
   16038:	cmp	r0, #0
   1603c:	movne	r0, #0
   16040:	bne	1606c <__assert_fail@plt+0x5134>
   16044:	ldr	r1, [pc, #44]	; 16078 <__assert_fail@plt+0x5140>
   16048:	add	r0, sp, #4
   1604c:	bl	10cec <strcmp@plt>
   16050:	cmp	r0, #0
   16054:	beq	1606c <__assert_fail@plt+0x5134>
   16058:	add	r0, sp, #4
   1605c:	ldr	r1, [pc, #24]	; 1607c <__assert_fail@plt+0x5144>
   16060:	bl	10cec <strcmp@plt>
   16064:	adds	r0, r0, #0
   16068:	movne	r0, #1
   1606c:	add	sp, sp, #268	; 0x10c
   16070:	pop	{pc}		; (ldr pc, [sp], #4)
   16074:	andeq	r0, r0, r1, lsl #2
   16078:	andeq	r7, r1, r0, ror #7
   1607c:	andeq	r7, r1, r4, ror #7
   16080:	push	{r4, r5, r6, lr}
   16084:	mov	r5, r1
   16088:	mov	r1, #0
   1608c:	mov	r4, r2
   16090:	bl	10ed8 <setlocale@plt>
   16094:	subs	r6, r0, #0
   16098:	beq	160f4 <__assert_fail@plt+0x51bc>
   1609c:	bl	10e48 <strlen@plt>
   160a0:	cmp	r4, r0
   160a4:	bhi	160dc <__assert_fail@plt+0x51a4>
   160a8:	cmp	r4, #0
   160ac:	bne	160b8 <__assert_fail@plt+0x5180>
   160b0:	mov	r0, #34	; 0x22
   160b4:	pop	{r4, r5, r6, pc}
   160b8:	sub	r4, r4, #1
   160bc:	mov	r1, r6
   160c0:	mov	r2, r4
   160c4:	mov	r0, r5
   160c8:	bl	10d34 <memcpy@plt>
   160cc:	mov	r3, #0
   160d0:	strb	r3, [r5, r4]
   160d4:	mov	r0, #34	; 0x22
   160d8:	pop	{r4, r5, r6, pc}
   160dc:	add	r2, r0, #1
   160e0:	mov	r1, r6
   160e4:	mov	r0, r5
   160e8:	bl	10d34 <memcpy@plt>
   160ec:	mov	r0, #0
   160f0:	pop	{r4, r5, r6, pc}
   160f4:	cmp	r4, #0
   160f8:	beq	16108 <__assert_fail@plt+0x51d0>
   160fc:	strb	r6, [r5]
   16100:	mov	r0, #22
   16104:	pop	{r4, r5, r6, pc}
   16108:	mov	r0, #22
   1610c:	pop	{r4, r5, r6, pc}
   16110:	mov	r1, #0
   16114:	b	10ed8 <setlocale@plt>
   16118:	subs	r2, r1, #1
   1611c:	bxeq	lr
   16120:	bcc	162f8 <__assert_fail@plt+0x53c0>
   16124:	cmp	r0, r1
   16128:	bls	162dc <__assert_fail@plt+0x53a4>
   1612c:	tst	r1, r2
   16130:	beq	162e8 <__assert_fail@plt+0x53b0>
   16134:	clz	r3, r0
   16138:	clz	r2, r1
   1613c:	sub	r3, r2, r3
   16140:	rsbs	r3, r3, #31
   16144:	addne	r3, r3, r3, lsl #1
   16148:	mov	r2, #0
   1614c:	addne	pc, pc, r3, lsl #2
   16150:	nop			; (mov r0, r0)
   16154:	cmp	r0, r1, lsl #31
   16158:	adc	r2, r2, r2
   1615c:	subcs	r0, r0, r1, lsl #31
   16160:	cmp	r0, r1, lsl #30
   16164:	adc	r2, r2, r2
   16168:	subcs	r0, r0, r1, lsl #30
   1616c:	cmp	r0, r1, lsl #29
   16170:	adc	r2, r2, r2
   16174:	subcs	r0, r0, r1, lsl #29
   16178:	cmp	r0, r1, lsl #28
   1617c:	adc	r2, r2, r2
   16180:	subcs	r0, r0, r1, lsl #28
   16184:	cmp	r0, r1, lsl #27
   16188:	adc	r2, r2, r2
   1618c:	subcs	r0, r0, r1, lsl #27
   16190:	cmp	r0, r1, lsl #26
   16194:	adc	r2, r2, r2
   16198:	subcs	r0, r0, r1, lsl #26
   1619c:	cmp	r0, r1, lsl #25
   161a0:	adc	r2, r2, r2
   161a4:	subcs	r0, r0, r1, lsl #25
   161a8:	cmp	r0, r1, lsl #24
   161ac:	adc	r2, r2, r2
   161b0:	subcs	r0, r0, r1, lsl #24
   161b4:	cmp	r0, r1, lsl #23
   161b8:	adc	r2, r2, r2
   161bc:	subcs	r0, r0, r1, lsl #23
   161c0:	cmp	r0, r1, lsl #22
   161c4:	adc	r2, r2, r2
   161c8:	subcs	r0, r0, r1, lsl #22
   161cc:	cmp	r0, r1, lsl #21
   161d0:	adc	r2, r2, r2
   161d4:	subcs	r0, r0, r1, lsl #21
   161d8:	cmp	r0, r1, lsl #20
   161dc:	adc	r2, r2, r2
   161e0:	subcs	r0, r0, r1, lsl #20
   161e4:	cmp	r0, r1, lsl #19
   161e8:	adc	r2, r2, r2
   161ec:	subcs	r0, r0, r1, lsl #19
   161f0:	cmp	r0, r1, lsl #18
   161f4:	adc	r2, r2, r2
   161f8:	subcs	r0, r0, r1, lsl #18
   161fc:	cmp	r0, r1, lsl #17
   16200:	adc	r2, r2, r2
   16204:	subcs	r0, r0, r1, lsl #17
   16208:	cmp	r0, r1, lsl #16
   1620c:	adc	r2, r2, r2
   16210:	subcs	r0, r0, r1, lsl #16
   16214:	cmp	r0, r1, lsl #15
   16218:	adc	r2, r2, r2
   1621c:	subcs	r0, r0, r1, lsl #15
   16220:	cmp	r0, r1, lsl #14
   16224:	adc	r2, r2, r2
   16228:	subcs	r0, r0, r1, lsl #14
   1622c:	cmp	r0, r1, lsl #13
   16230:	adc	r2, r2, r2
   16234:	subcs	r0, r0, r1, lsl #13
   16238:	cmp	r0, r1, lsl #12
   1623c:	adc	r2, r2, r2
   16240:	subcs	r0, r0, r1, lsl #12
   16244:	cmp	r0, r1, lsl #11
   16248:	adc	r2, r2, r2
   1624c:	subcs	r0, r0, r1, lsl #11
   16250:	cmp	r0, r1, lsl #10
   16254:	adc	r2, r2, r2
   16258:	subcs	r0, r0, r1, lsl #10
   1625c:	cmp	r0, r1, lsl #9
   16260:	adc	r2, r2, r2
   16264:	subcs	r0, r0, r1, lsl #9
   16268:	cmp	r0, r1, lsl #8
   1626c:	adc	r2, r2, r2
   16270:	subcs	r0, r0, r1, lsl #8
   16274:	cmp	r0, r1, lsl #7
   16278:	adc	r2, r2, r2
   1627c:	subcs	r0, r0, r1, lsl #7
   16280:	cmp	r0, r1, lsl #6
   16284:	adc	r2, r2, r2
   16288:	subcs	r0, r0, r1, lsl #6
   1628c:	cmp	r0, r1, lsl #5
   16290:	adc	r2, r2, r2
   16294:	subcs	r0, r0, r1, lsl #5
   16298:	cmp	r0, r1, lsl #4
   1629c:	adc	r2, r2, r2
   162a0:	subcs	r0, r0, r1, lsl #4
   162a4:	cmp	r0, r1, lsl #3
   162a8:	adc	r2, r2, r2
   162ac:	subcs	r0, r0, r1, lsl #3
   162b0:	cmp	r0, r1, lsl #2
   162b4:	adc	r2, r2, r2
   162b8:	subcs	r0, r0, r1, lsl #2
   162bc:	cmp	r0, r1, lsl #1
   162c0:	adc	r2, r2, r2
   162c4:	subcs	r0, r0, r1, lsl #1
   162c8:	cmp	r0, r1
   162cc:	adc	r2, r2, r2
   162d0:	subcs	r0, r0, r1
   162d4:	mov	r0, r2
   162d8:	bx	lr
   162dc:	moveq	r0, #1
   162e0:	movne	r0, #0
   162e4:	bx	lr
   162e8:	clz	r2, r1
   162ec:	rsb	r2, r2, #31
   162f0:	lsr	r0, r0, r2
   162f4:	bx	lr
   162f8:	cmp	r0, #0
   162fc:	mvnne	r0, #0
   16300:	b	165a0 <__assert_fail@plt+0x5668>
   16304:	cmp	r1, #0
   16308:	beq	162f8 <__assert_fail@plt+0x53c0>
   1630c:	push	{r0, r1, lr}
   16310:	bl	16118 <__assert_fail@plt+0x51e0>
   16314:	pop	{r1, r2, lr}
   16318:	mul	r3, r2, r0
   1631c:	sub	r1, r1, r3
   16320:	bx	lr
   16324:	cmp	r1, #0
   16328:	beq	16534 <__assert_fail@plt+0x55fc>
   1632c:	eor	ip, r0, r1
   16330:	rsbmi	r1, r1, #0
   16334:	subs	r2, r1, #1
   16338:	beq	16500 <__assert_fail@plt+0x55c8>
   1633c:	movs	r3, r0
   16340:	rsbmi	r3, r0, #0
   16344:	cmp	r3, r1
   16348:	bls	1650c <__assert_fail@plt+0x55d4>
   1634c:	tst	r1, r2
   16350:	beq	1651c <__assert_fail@plt+0x55e4>
   16354:	clz	r2, r3
   16358:	clz	r0, r1
   1635c:	sub	r2, r0, r2
   16360:	rsbs	r2, r2, #31
   16364:	addne	r2, r2, r2, lsl #1
   16368:	mov	r0, #0
   1636c:	addne	pc, pc, r2, lsl #2
   16370:	nop			; (mov r0, r0)
   16374:	cmp	r3, r1, lsl #31
   16378:	adc	r0, r0, r0
   1637c:	subcs	r3, r3, r1, lsl #31
   16380:	cmp	r3, r1, lsl #30
   16384:	adc	r0, r0, r0
   16388:	subcs	r3, r3, r1, lsl #30
   1638c:	cmp	r3, r1, lsl #29
   16390:	adc	r0, r0, r0
   16394:	subcs	r3, r3, r1, lsl #29
   16398:	cmp	r3, r1, lsl #28
   1639c:	adc	r0, r0, r0
   163a0:	subcs	r3, r3, r1, lsl #28
   163a4:	cmp	r3, r1, lsl #27
   163a8:	adc	r0, r0, r0
   163ac:	subcs	r3, r3, r1, lsl #27
   163b0:	cmp	r3, r1, lsl #26
   163b4:	adc	r0, r0, r0
   163b8:	subcs	r3, r3, r1, lsl #26
   163bc:	cmp	r3, r1, lsl #25
   163c0:	adc	r0, r0, r0
   163c4:	subcs	r3, r3, r1, lsl #25
   163c8:	cmp	r3, r1, lsl #24
   163cc:	adc	r0, r0, r0
   163d0:	subcs	r3, r3, r1, lsl #24
   163d4:	cmp	r3, r1, lsl #23
   163d8:	adc	r0, r0, r0
   163dc:	subcs	r3, r3, r1, lsl #23
   163e0:	cmp	r3, r1, lsl #22
   163e4:	adc	r0, r0, r0
   163e8:	subcs	r3, r3, r1, lsl #22
   163ec:	cmp	r3, r1, lsl #21
   163f0:	adc	r0, r0, r0
   163f4:	subcs	r3, r3, r1, lsl #21
   163f8:	cmp	r3, r1, lsl #20
   163fc:	adc	r0, r0, r0
   16400:	subcs	r3, r3, r1, lsl #20
   16404:	cmp	r3, r1, lsl #19
   16408:	adc	r0, r0, r0
   1640c:	subcs	r3, r3, r1, lsl #19
   16410:	cmp	r3, r1, lsl #18
   16414:	adc	r0, r0, r0
   16418:	subcs	r3, r3, r1, lsl #18
   1641c:	cmp	r3, r1, lsl #17
   16420:	adc	r0, r0, r0
   16424:	subcs	r3, r3, r1, lsl #17
   16428:	cmp	r3, r1, lsl #16
   1642c:	adc	r0, r0, r0
   16430:	subcs	r3, r3, r1, lsl #16
   16434:	cmp	r3, r1, lsl #15
   16438:	adc	r0, r0, r0
   1643c:	subcs	r3, r3, r1, lsl #15
   16440:	cmp	r3, r1, lsl #14
   16444:	adc	r0, r0, r0
   16448:	subcs	r3, r3, r1, lsl #14
   1644c:	cmp	r3, r1, lsl #13
   16450:	adc	r0, r0, r0
   16454:	subcs	r3, r3, r1, lsl #13
   16458:	cmp	r3, r1, lsl #12
   1645c:	adc	r0, r0, r0
   16460:	subcs	r3, r3, r1, lsl #12
   16464:	cmp	r3, r1, lsl #11
   16468:	adc	r0, r0, r0
   1646c:	subcs	r3, r3, r1, lsl #11
   16470:	cmp	r3, r1, lsl #10
   16474:	adc	r0, r0, r0
   16478:	subcs	r3, r3, r1, lsl #10
   1647c:	cmp	r3, r1, lsl #9
   16480:	adc	r0, r0, r0
   16484:	subcs	r3, r3, r1, lsl #9
   16488:	cmp	r3, r1, lsl #8
   1648c:	adc	r0, r0, r0
   16490:	subcs	r3, r3, r1, lsl #8
   16494:	cmp	r3, r1, lsl #7
   16498:	adc	r0, r0, r0
   1649c:	subcs	r3, r3, r1, lsl #7
   164a0:	cmp	r3, r1, lsl #6
   164a4:	adc	r0, r0, r0
   164a8:	subcs	r3, r3, r1, lsl #6
   164ac:	cmp	r3, r1, lsl #5
   164b0:	adc	r0, r0, r0
   164b4:	subcs	r3, r3, r1, lsl #5
   164b8:	cmp	r3, r1, lsl #4
   164bc:	adc	r0, r0, r0
   164c0:	subcs	r3, r3, r1, lsl #4
   164c4:	cmp	r3, r1, lsl #3
   164c8:	adc	r0, r0, r0
   164cc:	subcs	r3, r3, r1, lsl #3
   164d0:	cmp	r3, r1, lsl #2
   164d4:	adc	r0, r0, r0
   164d8:	subcs	r3, r3, r1, lsl #2
   164dc:	cmp	r3, r1, lsl #1
   164e0:	adc	r0, r0, r0
   164e4:	subcs	r3, r3, r1, lsl #1
   164e8:	cmp	r3, r1
   164ec:	adc	r0, r0, r0
   164f0:	subcs	r3, r3, r1
   164f4:	cmp	ip, #0
   164f8:	rsbmi	r0, r0, #0
   164fc:	bx	lr
   16500:	teq	ip, r0
   16504:	rsbmi	r0, r0, #0
   16508:	bx	lr
   1650c:	movcc	r0, #0
   16510:	asreq	r0, ip, #31
   16514:	orreq	r0, r0, #1
   16518:	bx	lr
   1651c:	clz	r2, r1
   16520:	rsb	r2, r2, #31
   16524:	cmp	ip, #0
   16528:	lsr	r0, r3, r2
   1652c:	rsbmi	r0, r0, #0
   16530:	bx	lr
   16534:	cmp	r0, #0
   16538:	mvngt	r0, #-2147483648	; 0x80000000
   1653c:	movlt	r0, #-2147483648	; 0x80000000
   16540:	b	165a0 <__assert_fail@plt+0x5668>
   16544:	cmp	r1, #0
   16548:	beq	16534 <__assert_fail@plt+0x55fc>
   1654c:	push	{r0, r1, lr}
   16550:	bl	1632c <__assert_fail@plt+0x53f4>
   16554:	pop	{r1, r2, lr}
   16558:	mul	r3, r2, r0
   1655c:	sub	r1, r1, r3
   16560:	bx	lr
   16564:	cmp	r3, #0
   16568:	cmpeq	r2, #0
   1656c:	bne	16584 <__assert_fail@plt+0x564c>
   16570:	cmp	r1, #0
   16574:	cmpeq	r0, #0
   16578:	mvnne	r1, #0
   1657c:	mvnne	r0, #0
   16580:	b	165a0 <__assert_fail@plt+0x5668>
   16584:	sub	sp, sp, #8
   16588:	push	{sp, lr}
   1658c:	bl	165b0 <__assert_fail@plt+0x5678>
   16590:	ldr	lr, [sp, #4]
   16594:	add	sp, sp, #8
   16598:	pop	{r2, r3}
   1659c:	bx	lr
   165a0:	push	{r1, lr}
   165a4:	mov	r0, #8
   165a8:	bl	10ce0 <raise@plt>
   165ac:	pop	{r1, pc}
   165b0:	cmp	r1, r3
   165b4:	push	{r4, r5, r6, r7, r8, r9, lr}
   165b8:	cmpeq	r0, r2
   165bc:	mov	r4, r0
   165c0:	mov	r5, r1
   165c4:	ldr	r9, [sp, #28]
   165c8:	movcc	r0, #0
   165cc:	movcc	r1, #0
   165d0:	bcc	166c8 <__assert_fail@plt+0x5790>
   165d4:	cmp	r3, #0
   165d8:	clzeq	ip, r2
   165dc:	clzne	ip, r3
   165e0:	addeq	ip, ip, #32
   165e4:	cmp	r5, #0
   165e8:	clzeq	r1, r4
   165ec:	addeq	r1, r1, #32
   165f0:	clzne	r1, r5
   165f4:	sub	ip, ip, r1
   165f8:	sub	lr, ip, #32
   165fc:	lsl	r7, r3, ip
   16600:	rsb	r8, ip, #32
   16604:	orr	r7, r7, r2, lsl lr
   16608:	orr	r7, r7, r2, lsr r8
   1660c:	lsl	r6, r2, ip
   16610:	cmp	r5, r7
   16614:	cmpeq	r4, r6
   16618:	movcc	r0, #0
   1661c:	movcc	r1, #0
   16620:	bcc	1663c <__assert_fail@plt+0x5704>
   16624:	mov	r3, #1
   16628:	subs	r4, r4, r6
   1662c:	lsl	r1, r3, lr
   16630:	lsl	r0, r3, ip
   16634:	orr	r1, r1, r3, lsr r8
   16638:	sbc	r5, r5, r7
   1663c:	cmp	ip, #0
   16640:	beq	166c8 <__assert_fail@plt+0x5790>
   16644:	lsrs	r3, r7, #1
   16648:	rrx	r2, r6
   1664c:	mov	r6, ip
   16650:	b	16674 <__assert_fail@plt+0x573c>
   16654:	subs	r4, r4, r2
   16658:	sbc	r5, r5, r3
   1665c:	adds	r4, r4, r4
   16660:	adc	r5, r5, r5
   16664:	adds	r4, r4, #1
   16668:	adc	r5, r5, #0
   1666c:	subs	r6, r6, #1
   16670:	beq	16690 <__assert_fail@plt+0x5758>
   16674:	cmp	r5, r3
   16678:	cmpeq	r4, r2
   1667c:	bcs	16654 <__assert_fail@plt+0x571c>
   16680:	adds	r4, r4, r4
   16684:	adc	r5, r5, r5
   16688:	subs	r6, r6, #1
   1668c:	bne	16674 <__assert_fail@plt+0x573c>
   16690:	lsr	r6, r4, ip
   16694:	lsr	r7, r5, ip
   16698:	orr	r6, r6, r5, lsl r8
   1669c:	adds	r2, r0, r4
   166a0:	orr	r6, r6, r5, lsr lr
   166a4:	adc	r3, r1, r5
   166a8:	lsl	r1, r7, ip
   166ac:	orr	r1, r1, r6, lsl lr
   166b0:	lsl	r0, r6, ip
   166b4:	orr	r1, r1, r6, lsr r8
   166b8:	subs	r0, r2, r0
   166bc:	mov	r4, r6
   166c0:	mov	r5, r7
   166c4:	sbc	r1, r3, r1
   166c8:	cmp	r9, #0
   166cc:	popeq	{r4, r5, r6, r7, r8, r9, pc}
   166d0:	strd	r4, [r9]
   166d4:	pop	{r4, r5, r6, r7, r8, r9, pc}
   166d8:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   166dc:	mov	r7, r0
   166e0:	ldr	r6, [pc, #72]	; 16730 <__assert_fail@plt+0x57f8>
   166e4:	ldr	r5, [pc, #72]	; 16734 <__assert_fail@plt+0x57fc>
   166e8:	add	r6, pc, r6
   166ec:	add	r5, pc, r5
   166f0:	sub	r6, r6, r5
   166f4:	mov	r8, r1
   166f8:	mov	r9, r2
   166fc:	bl	10ca8 <calloc@plt-0x20>
   16700:	asrs	r6, r6, #2
   16704:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   16708:	mov	r4, #0
   1670c:	add	r4, r4, #1
   16710:	ldr	r3, [r5], #4
   16714:	mov	r2, r9
   16718:	mov	r1, r8
   1671c:	mov	r0, r7
   16720:	blx	r3
   16724:	cmp	r6, r4
   16728:	bne	1670c <__assert_fail@plt+0x57d4>
   1672c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   16730:	andeq	r1, r1, r0, lsr #16
   16734:	andeq	r1, r1, r8, lsl r8
   16738:	bx	lr
   1673c:	ldr	r3, [pc, #12]	; 16750 <__assert_fail@plt+0x5818>
   16740:	mov	r1, #0
   16744:	add	r3, pc, r3
   16748:	ldr	r2, [r3]
   1674c:	b	10e6c <__cxa_atexit@plt>
   16750:	muleq	r1, ip, r9

Disassembly of section .fini:

00016754 <.fini>:
   16754:	push	{r3, lr}
   16758:	pop	{r3, pc}
