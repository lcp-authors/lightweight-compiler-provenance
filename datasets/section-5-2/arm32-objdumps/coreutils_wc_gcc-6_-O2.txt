
../repos/coreutils/src/wc:     file format elf32-littlearm


Disassembly of section .init:

00011044 <.init>:
   11044:	push	{r3, lr}
   11048:	bl	11e08 <__assert_fail@plt+0xa80>
   1104c:	pop	{r3, pc}

Disassembly of section .plt:

00011050 <calloc@plt-0x14>:
   11050:	push	{lr}		; (str lr, [sp, #-4]!)
   11054:	ldr	lr, [pc, #4]	; 11060 <calloc@plt-0x4>
   11058:	add	lr, pc, lr
   1105c:	ldr	pc, [lr, #8]!
   11060:	andeq	r7, r1, r0, lsr #31

00011064 <calloc@plt>:
   11064:	add	ip, pc, #0, 12
   11068:	add	ip, ip, #94208	; 0x17000
   1106c:	ldr	pc, [ip, #4000]!	; 0xfa0

00011070 <fputs_unlocked@plt>:
   11070:	add	ip, pc, #0, 12
   11074:	add	ip, ip, #94208	; 0x17000
   11078:	ldr	pc, [ip, #3992]!	; 0xf98

0001107c <raise@plt>:
   1107c:	add	ip, pc, #0, 12
   11080:	add	ip, ip, #94208	; 0x17000
   11084:	ldr	pc, [ip, #3984]!	; 0xf90

00011088 <strcmp@plt>:
   11088:	add	ip, pc, #0, 12
   1108c:	add	ip, ip, #94208	; 0x17000
   11090:	ldr	pc, [ip, #3976]!	; 0xf88

00011094 <posix_fadvise64@plt>:
   11094:	add	ip, pc, #0, 12
   11098:	add	ip, ip, #94208	; 0x17000
   1109c:	ldr	pc, [ip, #3968]!	; 0xf80

000110a0 <read@plt>:
   110a0:	add	ip, pc, #0, 12
   110a4:	add	ip, ip, #94208	; 0x17000
   110a8:	ldr	pc, [ip, #3960]!	; 0xf78

000110ac <fflush@plt>:
   110ac:	add	ip, pc, #0, 12
   110b0:	add	ip, ip, #94208	; 0x17000
   110b4:	ldr	pc, [ip, #3952]!	; 0xf70

000110b8 <wcwidth@plt>:
   110b8:	add	ip, pc, #0, 12
   110bc:	add	ip, ip, #94208	; 0x17000
   110c0:	ldr	pc, [ip, #3944]!	; 0xf68

000110c4 <__memmove_chk@plt>:
   110c4:	add	ip, pc, #0, 12
   110c8:	add	ip, ip, #94208	; 0x17000
   110cc:	ldr	pc, [ip, #3936]!	; 0xf60

000110d0 <free@plt>:
   110d0:	add	ip, pc, #0, 12
   110d4:	add	ip, ip, #94208	; 0x17000
   110d8:	ldr	pc, [ip, #3928]!	; 0xf58

000110dc <ferror@plt>:
   110dc:	add	ip, pc, #0, 12
   110e0:	add	ip, ip, #94208	; 0x17000
   110e4:	ldr	pc, [ip, #3920]!	; 0xf50

000110e8 <_exit@plt>:
   110e8:	add	ip, pc, #0, 12
   110ec:	add	ip, ip, #94208	; 0x17000
   110f0:	ldr	pc, [ip, #3912]!	; 0xf48

000110f4 <memcpy@plt>:
   110f4:	add	ip, pc, #0, 12
   110f8:	add	ip, ip, #94208	; 0x17000
   110fc:	ldr	pc, [ip, #3904]!	; 0xf40

00011100 <mbsinit@plt>:
   11100:	add	ip, pc, #0, 12
   11104:	add	ip, ip, #94208	; 0x17000
   11108:	ldr	pc, [ip, #3896]!	; 0xf38

0001110c <memcmp@plt>:
   1110c:	add	ip, pc, #0, 12
   11110:	add	ip, ip, #94208	; 0x17000
   11114:	ldr	pc, [ip, #3888]!	; 0xf30

00011118 <fputc_unlocked@plt>:
   11118:	add	ip, pc, #0, 12
   1111c:	add	ip, ip, #94208	; 0x17000
   11120:	ldr	pc, [ip, #3880]!	; 0xf28

00011124 <dcgettext@plt>:
   11124:	add	ip, pc, #0, 12
   11128:	add	ip, ip, #94208	; 0x17000
   1112c:	ldr	pc, [ip, #3872]!	; 0xf20

00011130 <sysconf@plt>:
   11130:	add	ip, pc, #0, 12
   11134:	add	ip, ip, #94208	; 0x17000
   11138:	ldr	pc, [ip, #3864]!	; 0xf18

0001113c <realloc@plt>:
   1113c:	add	ip, pc, #0, 12
   11140:	add	ip, ip, #94208	; 0x17000
   11144:	ldr	pc, [ip, #3856]!	; 0xf10

00011148 <textdomain@plt>:
   11148:	add	ip, pc, #0, 12
   1114c:	add	ip, ip, #94208	; 0x17000
   11150:	ldr	pc, [ip, #3848]!	; 0xf08

00011154 <iswcntrl@plt>:
   11154:	add	ip, pc, #0, 12
   11158:	add	ip, ip, #94208	; 0x17000
   1115c:	ldr	pc, [ip, #3840]!	; 0xf00

00011160 <rawmemchr@plt>:
   11160:	add	ip, pc, #0, 12
   11164:	add	ip, ip, #94208	; 0x17000
   11168:	ldr	pc, [ip, #3832]!	; 0xef8

0001116c <iswprint@plt>:
   1116c:	add	ip, pc, #0, 12
   11170:	add	ip, ip, #94208	; 0x17000
   11174:	ldr	pc, [ip, #3824]!	; 0xef0

00011178 <__fxstat64@plt>:
   11178:	add	ip, pc, #0, 12
   1117c:	add	ip, ip, #94208	; 0x17000
   11180:	ldr	pc, [ip, #3816]!	; 0xee8

00011184 <fwrite@plt>:
   11184:	add	ip, pc, #0, 12
   11188:	add	ip, ip, #94208	; 0x17000
   1118c:	ldr	pc, [ip, #3808]!	; 0xee0

00011190 <lseek64@plt>:
   11190:	add	ip, pc, #0, 12
   11194:	add	ip, ip, #94208	; 0x17000
   11198:	ldr	pc, [ip, #3800]!	; 0xed8

0001119c <__ctype_get_mb_cur_max@plt>:
   1119c:	add	ip, pc, #0, 12
   111a0:	add	ip, ip, #94208	; 0x17000
   111a4:	ldr	pc, [ip, #3792]!	; 0xed0

000111a8 <__fpending@plt>:
   111a8:	add	ip, pc, #0, 12
   111ac:	add	ip, ip, #94208	; 0x17000
   111b0:	ldr	pc, [ip, #3784]!	; 0xec8

000111b4 <mbrtowc@plt>:
   111b4:	add	ip, pc, #0, 12
   111b8:	add	ip, ip, #94208	; 0x17000
   111bc:	ldr	pc, [ip, #3776]!	; 0xec0

000111c0 <error@plt>:
   111c0:	add	ip, pc, #0, 12
   111c4:	add	ip, ip, #94208	; 0x17000
   111c8:	ldr	pc, [ip, #3768]!	; 0xeb8

000111cc <open64@plt>:
   111cc:	add	ip, pc, #0, 12
   111d0:	add	ip, ip, #94208	; 0x17000
   111d4:	ldr	pc, [ip, #3760]!	; 0xeb0

000111d8 <getenv@plt>:
   111d8:	add	ip, pc, #0, 12
   111dc:	add	ip, ip, #94208	; 0x17000
   111e0:	ldr	pc, [ip, #3752]!	; 0xea8

000111e4 <sysinfo@plt>:
   111e4:	add	ip, pc, #0, 12
   111e8:	add	ip, ip, #94208	; 0x17000
   111ec:	ldr	pc, [ip, #3744]!	; 0xea0

000111f0 <malloc@plt>:
   111f0:	add	ip, pc, #0, 12
   111f4:	add	ip, ip, #94208	; 0x17000
   111f8:	ldr	pc, [ip, #3736]!	; 0xe98

000111fc <__libc_start_main@plt>:
   111fc:	add	ip, pc, #0, 12
   11200:	add	ip, ip, #94208	; 0x17000
   11204:	ldr	pc, [ip, #3728]!	; 0xe90

00011208 <__freading@plt>:
   11208:	add	ip, pc, #0, 12
   1120c:	add	ip, ip, #94208	; 0x17000
   11210:	ldr	pc, [ip, #3720]!	; 0xe88

00011214 <__gmon_start__@plt>:
   11214:	add	ip, pc, #0, 12
   11218:	add	ip, ip, #94208	; 0x17000
   1121c:	ldr	pc, [ip, #3712]!	; 0xe80

00011220 <getopt_long@plt>:
   11220:	add	ip, pc, #0, 12
   11224:	add	ip, ip, #94208	; 0x17000
   11228:	ldr	pc, [ip, #3704]!	; 0xe78

0001122c <__ctype_b_loc@plt>:
   1122c:	add	ip, pc, #0, 12
   11230:	add	ip, ip, #94208	; 0x17000
   11234:	ldr	pc, [ip, #3696]!	; 0xe70

00011238 <exit@plt>:
   11238:	add	ip, pc, #0, 12
   1123c:	add	ip, ip, #94208	; 0x17000
   11240:	ldr	pc, [ip, #3688]!	; 0xe68

00011244 <feof@plt>:
   11244:	add	ip, pc, #0, 12
   11248:	add	ip, ip, #94208	; 0x17000
   1124c:	ldr	pc, [ip, #3680]!	; 0xe60

00011250 <iswspace@plt>:
   11250:	add	ip, pc, #0, 12
   11254:	add	ip, ip, #94208	; 0x17000
   11258:	ldr	pc, [ip, #3672]!	; 0xe58

0001125c <strlen@plt>:
   1125c:	add	ip, pc, #0, 12
   11260:	add	ip, ip, #94208	; 0x17000
   11264:	ldr	pc, [ip, #3664]!	; 0xe50

00011268 <strchr@plt>:
   11268:	add	ip, pc, #0, 12
   1126c:	add	ip, ip, #94208	; 0x17000
   11270:	ldr	pc, [ip, #3656]!	; 0xe48

00011274 <getpagesize@plt>:
   11274:	add	ip, pc, #0, 12
   11278:	add	ip, ip, #94208	; 0x17000
   1127c:	ldr	pc, [ip, #3648]!	; 0xe40

00011280 <__errno_location@plt>:
   11280:	add	ip, pc, #0, 12
   11284:	add	ip, ip, #94208	; 0x17000
   11288:	ldr	pc, [ip, #3640]!	; 0xe38

0001128c <__cxa_atexit@plt>:
   1128c:	add	ip, pc, #0, 12
   11290:	add	ip, ip, #94208	; 0x17000
   11294:	ldr	pc, [ip, #3632]!	; 0xe30

00011298 <setvbuf@plt>:
   11298:	add	ip, pc, #0, 12
   1129c:	add	ip, ip, #94208	; 0x17000
   112a0:	ldr	pc, [ip, #3624]!	; 0xe28

000112a4 <memset@plt>:
   112a4:	add	ip, pc, #0, 12
   112a8:	add	ip, ip, #94208	; 0x17000
   112ac:	ldr	pc, [ip, #3616]!	; 0xe20

000112b0 <btowc@plt>:
   112b0:	add	ip, pc, #0, 12
   112b4:	add	ip, ip, #94208	; 0x17000
   112b8:	ldr	pc, [ip, #3608]!	; 0xe18

000112bc <fgetc@plt>:
   112bc:	add	ip, pc, #0, 12
   112c0:	add	ip, ip, #94208	; 0x17000
   112c4:	ldr	pc, [ip, #3600]!	; 0xe10

000112c8 <__printf_chk@plt>:
   112c8:	add	ip, pc, #0, 12
   112cc:	add	ip, ip, #94208	; 0x17000
   112d0:	ldr	pc, [ip, #3592]!	; 0xe08

000112d4 <fileno@plt>:
   112d4:	add	ip, pc, #0, 12
   112d8:	add	ip, ip, #94208	; 0x17000
   112dc:	ldr	pc, [ip, #3584]!	; 0xe00

000112e0 <__fprintf_chk@plt>:
   112e0:	add	ip, pc, #0, 12
   112e4:	add	ip, ip, #94208	; 0x17000
   112e8:	ldr	pc, [ip, #3576]!	; 0xdf8

000112ec <fclose@plt>:
   112ec:	add	ip, pc, #0, 12
   112f0:	add	ip, ip, #94208	; 0x17000
   112f4:	ldr	pc, [ip, #3568]!	; 0xdf0

000112f8 <fseeko64@plt>:
   112f8:	add	ip, pc, #0, 12
   112fc:	add	ip, ip, #94208	; 0x17000
   11300:	ldr	pc, [ip, #3560]!	; 0xde8

00011304 <__overflow@plt>:
   11304:	add	ip, pc, #0, 12
   11308:	add	ip, ip, #94208	; 0x17000
   1130c:	ldr	pc, [ip, #3552]!	; 0xde0

00011310 <setlocale@plt>:
   11310:	add	ip, pc, #0, 12
   11314:	add	ip, ip, #94208	; 0x17000
   11318:	ldr	pc, [ip, #3544]!	; 0xdd8

0001131c <strrchr@plt>:
   1131c:	add	ip, pc, #0, 12
   11320:	add	ip, ip, #94208	; 0x17000
   11324:	ldr	pc, [ip, #3536]!	; 0xdd0

00011328 <nl_langinfo@plt>:
   11328:	add	ip, pc, #0, 12
   1132c:	add	ip, ip, #94208	; 0x17000
   11330:	ldr	pc, [ip, #3528]!	; 0xdc8

00011334 <fopen64@plt>:
   11334:	add	ip, pc, #0, 12
   11338:	add	ip, ip, #94208	; 0x17000
   1133c:	ldr	pc, [ip, #3520]!	; 0xdc0

00011340 <bindtextdomain@plt>:
   11340:	add	ip, pc, #0, 12
   11344:	add	ip, ip, #94208	; 0x17000
   11348:	ldr	pc, [ip, #3512]!	; 0xdb8

0001134c <getdelim@plt>:
   1134c:	add	ip, pc, #0, 12
   11350:	add	ip, ip, #94208	; 0x17000
   11354:	ldr	pc, [ip, #3504]!	; 0xdb0

00011358 <__xstat64@plt>:
   11358:	add	ip, pc, #0, 12
   1135c:	add	ip, ip, #94208	; 0x17000
   11360:	ldr	pc, [ip, #3496]!	; 0xda8

00011364 <strncmp@plt>:
   11364:	add	ip, pc, #0, 12
   11368:	add	ip, ip, #94208	; 0x17000
   1136c:	ldr	pc, [ip, #3488]!	; 0xda0

00011370 <abort@plt>:
   11370:	add	ip, pc, #0, 12
   11374:	add	ip, ip, #94208	; 0x17000
   11378:	ldr	pc, [ip, #3480]!	; 0xd98

0001137c <close@plt>:
   1137c:	add	ip, pc, #0, 12
   11380:	add	ip, ip, #94208	; 0x17000
   11384:	ldr	pc, [ip, #3472]!	; 0xd90

00011388 <__assert_fail@plt>:
   11388:	add	ip, pc, #0, 12
   1138c:	add	ip, ip, #94208	; 0x17000
   11390:	ldr	pc, [ip, #3464]!	; 0xd88

Disassembly of section .text:

00011398 <_obstack_begin@@Base-0x5514>:
   11398:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1139c:	vpush	{d8-d9}
   113a0:	mov	r6, r0
   113a4:	ldr	r0, [r1]
   113a8:	ldr	r9, [pc, #2440]	; 11d38 <__assert_fail@plt+0x9b0>
   113ac:	sub	sp, sp, #316	; 0x13c
   113b0:	mov	r5, #0
   113b4:	str	r1, [sp, #32]
   113b8:	bl	138b0 <__assert_fail@plt+0x2528>
   113bc:	ldr	r1, [pc, #2424]	; 11d3c <__assert_fail@plt+0x9b4>
   113c0:	mov	r0, #6
   113c4:	bl	11310 <setlocale@plt>
   113c8:	ldr	r1, [pc, #2416]	; 11d40 <__assert_fail@plt+0x9b8>
   113cc:	ldr	r0, [pc, #2416]	; 11d44 <__assert_fail@plt+0x9bc>
   113d0:	bl	11340 <bindtextdomain@plt>
   113d4:	ldr	r0, [pc, #2408]	; 11d44 <__assert_fail@plt+0x9bc>
   113d8:	bl	11148 <textdomain@plt>
   113dc:	ldr	r0, [pc, #2404]	; 11d48 <__assert_fail@plt+0x9c0>
   113e0:	bl	175b0 <_obstack_memory_used@@Base+0xaf4>
   113e4:	bl	11274 <getpagesize@plt>
   113e8:	mov	r3, #0
   113ec:	mov	r1, r3
   113f0:	mov	r2, #1
   113f4:	mov	sl, r2
   113f8:	mov	r4, #0
   113fc:	ldr	r8, [pc, #2376]	; 11d4c <__assert_fail@plt+0x9c4>
   11400:	ldr	r7, [pc, #2376]	; 11d50 <__assert_fail@plt+0x9c8>
   11404:	str	r0, [r9, #12]
   11408:	ldr	r0, [pc, #2372]	; 11d54 <__assert_fail@plt+0x9cc>
   1140c:	ldr	r0, [r0]
   11410:	bl	11298 <setvbuf@plt>
   11414:	ldr	r0, [pc, #2364]	; 11d58 <__assert_fail@plt+0x9d0>
   11418:	bl	111d8 <getenv@plt>
   1141c:	mov	r3, #0
   11420:	strd	r4, [r9, #56]	; 0x38
   11424:	strd	r4, [r9, #48]	; 0x30
   11428:	strd	r4, [r9, #40]	; 0x28
   1142c:	strd	r4, [r9, #32]
   11430:	strd	r4, [r9, #24]
   11434:	mov	fp, r3
   11438:	mov	r5, r3
   1143c:	strb	r3, [r9, #10]
   11440:	strb	r3, [r9, #9]
   11444:	strb	r3, [r9, #8]
   11448:	strb	r3, [r9]
   1144c:	strb	r3, [r9, #11]
   11450:	subs	r0, r0, r3
   11454:	movne	r0, #1
   11458:	strb	r0, [r9, #16]
   1145c:	str	r5, [sp]
   11460:	mov	r3, r8
   11464:	mov	r2, r7
   11468:	ldr	r1, [sp, #32]
   1146c:	mov	r0, r6
   11470:	bl	11220 <getopt_long@plt>
   11474:	cmn	r0, #1
   11478:	beq	115b8 <__assert_fail@plt+0x230>
   1147c:	cmp	r0, #108	; 0x6c
   11480:	beq	115b0 <__assert_fail@plt+0x228>
   11484:	bgt	114ac <__assert_fail@plt+0x124>
   11488:	cmn	r0, #2
   1148c:	beq	11530 <__assert_fail@plt+0x1a8>
   11490:	ble	114f0 <__assert_fail@plt+0x168>
   11494:	cmp	r0, #76	; 0x4c
   11498:	beq	114d8 <__assert_fail@plt+0x150>
   1149c:	cmp	r0, #99	; 0x63
   114a0:	bne	115a0 <__assert_fail@plt+0x218>
   114a4:	strb	sl, [r9, #10]
   114a8:	b	1145c <__assert_fail@plt+0xd4>
   114ac:	cmp	r0, #119	; 0x77
   114b0:	beq	115a8 <__assert_fail@plt+0x220>
   114b4:	ble	114e0 <__assert_fail@plt+0x158>
   114b8:	cmp	r0, #256	; 0x100
   114bc:	beq	1145c <__assert_fail@plt+0xd4>
   114c0:	ldr	r3, [pc, #2196]	; 11d5c <__assert_fail@plt+0x9d4>
   114c4:	cmp	r0, r3
   114c8:	bne	115a0 <__assert_fail@plt+0x218>
   114cc:	ldr	r3, [pc, #2188]	; 11d60 <__assert_fail@plt+0x9d8>
   114d0:	ldr	fp, [r3]
   114d4:	b	1145c <__assert_fail@plt+0xd4>
   114d8:	strb	sl, [r9, #11]
   114dc:	b	1145c <__assert_fail@plt+0xd4>
   114e0:	cmp	r0, #109	; 0x6d
   114e4:	bne	115a0 <__assert_fail@plt+0x218>
   114e8:	strb	sl, [r9, #9]
   114ec:	b	1145c <__assert_fail@plt+0xd4>
   114f0:	cmn	r0, #3
   114f4:	bne	115a0 <__assert_fail@plt+0x218>
   114f8:	ldr	r3, [pc, #2148]	; 11d64 <__assert_fail@plt+0x9dc>
   114fc:	ldr	r0, [pc, #2128]	; 11d54 <__assert_fail@plt+0x9cc>
   11500:	ldr	r1, [pc, #2144]	; 11d68 <__assert_fail@plt+0x9e0>
   11504:	ldr	r2, [pc, #2144]	; 11d6c <__assert_fail@plt+0x9e4>
   11508:	str	r5, [sp, #8]
   1150c:	ldr	r0, [r0]
   11510:	ldr	r3, [r3]
   11514:	str	r1, [sp, #4]
   11518:	str	r2, [sp]
   1151c:	ldr	r1, [pc, #2124]	; 11d70 <__assert_fail@plt+0x9e8>
   11520:	ldr	r2, [pc, #2124]	; 11d74 <__assert_fail@plt+0x9ec>
   11524:	bl	15f2c <__assert_fail@plt+0x4ba4>
   11528:	mov	r0, #0
   1152c:	bl	11238 <exit@plt>
   11530:	mov	r0, #0
   11534:	bl	12e68 <__assert_fail@plt+0x1ae0>
   11538:	mov	r2, #5
   1153c:	ldr	r1, [pc, #2100]	; 11d78 <__assert_fail@plt+0x9f0>
   11540:	mov	r0, #0
   11544:	bl	11124 <dcgettext@plt>
   11548:	ldr	r3, [r5]
   1154c:	ldr	r2, [sp, #32]
   11550:	ldr	r1, [r2, r3, lsl #2]
   11554:	mov	r6, r0
   11558:	mov	r0, #4
   1155c:	bl	15530 <__assert_fail@plt+0x41a8>
   11560:	mov	r1, #0
   11564:	mov	r2, r6
   11568:	mov	r3, r0
   1156c:	mov	r0, r1
   11570:	bl	111c0 <error@plt>
   11574:	ldr	r3, [pc, #2048]	; 11d7c <__assert_fail@plt+0x9f4>
   11578:	mov	r2, #5
   1157c:	ldr	r1, [pc, #2044]	; 11d80 <__assert_fail@plt+0x9f8>
   11580:	mov	r0, #0
   11584:	ldr	r4, [r3]
   11588:	bl	11124 <dcgettext@plt>
   1158c:	ldr	r2, [pc, #2032]	; 11d84 <__assert_fail@plt+0x9fc>
   11590:	mov	r1, #1
   11594:	mov	r3, r0
   11598:	mov	r0, r4
   1159c:	bl	112e0 <__fprintf_chk@plt>
   115a0:	mov	r0, #1
   115a4:	bl	12e68 <__assert_fail@plt+0x1ae0>
   115a8:	strb	sl, [r9, #8]
   115ac:	b	1145c <__assert_fail@plt+0xd4>
   115b0:	strb	sl, [r9]
   115b4:	b	1145c <__assert_fail@plt+0xd4>
   115b8:	ldrb	r3, [r9]
   115bc:	cmp	r3, #0
   115c0:	bne	11600 <__assert_fail@plt+0x278>
   115c4:	ldrb	r3, [r9, #8]
   115c8:	cmp	r3, #0
   115cc:	bne	11600 <__assert_fail@plt+0x278>
   115d0:	ldrb	r3, [r9, #9]
   115d4:	cmp	r3, #0
   115d8:	bne	11600 <__assert_fail@plt+0x278>
   115dc:	ldrb	r3, [r9, #10]
   115e0:	cmp	r3, #0
   115e4:	bne	11600 <__assert_fail@plt+0x278>
   115e8:	ldrb	r3, [r9, #11]
   115ec:	cmp	r3, #0
   115f0:	moveq	r3, #1
   115f4:	strbeq	r3, [r9, #10]
   115f8:	strbeq	r3, [r9, #8]
   115fc:	strbeq	r3, [r9]
   11600:	cmp	fp, #0
   11604:	beq	11c04 <__assert_fail@plt+0x87c>
   11608:	ldr	r5, [pc, #1912]	; 11d88 <__assert_fail@plt+0xa00>
   1160c:	ldr	r3, [r5]
   11610:	cmp	r6, r3
   11614:	bgt	11538 <__assert_fail@plt+0x1b0>
   11618:	ldr	r1, [pc, #1900]	; 11d8c <__assert_fail@plt+0xa04>
   1161c:	mov	r0, fp
   11620:	bl	11088 <strcmp@plt>
   11624:	cmp	r0, #0
   11628:	bne	11798 <__assert_fail@plt+0x410>
   1162c:	ldr	r3, [pc, #1884]	; 11d90 <__assert_fail@plt+0xa08>
   11630:	ldr	r4, [r3]
   11634:	mov	r0, r4
   11638:	bl	112d4 <fileno@plt>
   1163c:	add	r2, sp, #64	; 0x40
   11640:	mov	r1, r0
   11644:	mov	r0, #3
   11648:	bl	11178 <__fxstat64@plt>
   1164c:	cmp	r0, #0
   11650:	bne	11664 <__assert_fail@plt+0x2dc>
   11654:	ldr	r3, [sp, #80]	; 0x50
   11658:	and	r3, r3, #61440	; 0xf000
   1165c:	cmp	r3, #32768	; 0x8000
   11660:	beq	11c48 <__assert_fail@plt+0x8c0>
   11664:	mov	r3, #0
   11668:	mov	r0, r4
   1166c:	mov	r6, r3
   11670:	str	r3, [sp, #48]	; 0x30
   11674:	bl	131b0 <__assert_fail@plt+0x1e28>
   11678:	mov	r4, r6
   1167c:	str	r0, [sp, #32]
   11680:	ldr	r3, [sp, #32]
   11684:	cmp	r3, #0
   11688:	beq	11b24 <__assert_fail@plt+0x79c>
   1168c:	cmp	r6, #0
   11690:	bne	11960 <__assert_fail@plt+0x5d8>
   11694:	mov	r1, #112	; 0x70
   11698:	mov	r0, #1
   1169c:	bl	16110 <__assert_fail@plt+0x4d88>
   116a0:	mov	r7, #1
   116a4:	str	r0, [sp, #36]	; 0x24
   116a8:	str	r7, [r0]
   116ac:	mov	r4, #1
   116b0:	ldr	sl, [pc, #1748]	; 11d8c <__assert_fail@plt+0xa04>
   116b4:	mov	r8, #0
   116b8:	str	r7, [r9, #4]
   116bc:	b	11734 <__assert_fail@plt+0x3ac>
   116c0:	ldrb	r3, [r7]
   116c4:	cmp	r3, #0
   116c8:	beq	11828 <__assert_fail@plt+0x4a0>
   116cc:	cmp	r6, #0
   116d0:	movne	r5, r8
   116d4:	moveq	r5, #0
   116d8:	ldr	r3, [sp, #36]	; 0x24
   116dc:	mov	r1, sl
   116e0:	mov	r0, r7
   116e4:	add	r5, r3, r5
   116e8:	bl	11088 <strcmp@plt>
   116ec:	cmp	r0, #0
   116f0:	bne	1187c <__assert_fail@plt+0x4f4>
   116f4:	mvn	r2, #0
   116f8:	mvn	r3, #0
   116fc:	mov	r1, r7
   11700:	strd	r2, [sp]
   11704:	mov	r2, r5
   11708:	mov	r3, #1
   1170c:	strb	r3, [r9, #68]	; 0x44
   11710:	bl	120d8 <__assert_fail@plt+0xd50>
   11714:	mov	r5, r0
   11718:	and	r4, r4, r5
   1171c:	uxtb	r4, r4
   11720:	cmp	r6, #0
   11724:	add	r8, r8, #112	; 0x70
   11728:	ldreq	r3, [sp, #36]	; 0x24
   1172c:	moveq	r2, #1
   11730:	streq	r2, [r3]
   11734:	add	r1, sp, #64	; 0x40
   11738:	ldr	r0, [sp, #32]
   1173c:	bl	131e4 <__assert_fail@plt+0x1e5c>
   11740:	subs	r7, r0, #0
   11744:	beq	11930 <__assert_fail@plt+0x5a8>
   11748:	cmp	fp, #0
   1174c:	beq	118f8 <__assert_fail@plt+0x570>
   11750:	mov	r1, sl
   11754:	mov	r0, fp
   11758:	bl	11088 <strcmp@plt>
   1175c:	cmp	r0, #0
   11760:	bne	116c0 <__assert_fail@plt+0x338>
   11764:	mov	r1, sl
   11768:	mov	r0, r7
   1176c:	bl	11088 <strcmp@plt>
   11770:	subs	r5, r0, #0
   11774:	beq	117e8 <__assert_fail@plt+0x460>
   11778:	ldrb	r3, [r7]
   1177c:	cmp	r3, #0
   11780:	beq	11828 <__assert_fail@plt+0x4a0>
   11784:	cmp	r6, #0
   11788:	ldreq	r5, [sp, #36]	; 0x24
   1178c:	beq	1187c <__assert_fail@plt+0x4f4>
   11790:	mov	r5, r8
   11794:	b	116d8 <__assert_fail@plt+0x350>
   11798:	ldr	r1, [pc, #1524]	; 11d94 <__assert_fail@plt+0xa0c>
   1179c:	mov	r0, fp
   117a0:	bl	11334 <fopen64@plt>
   117a4:	subs	r4, r0, #0
   117a8:	bne	11634 <__assert_fail@plt+0x2ac>
   117ac:	bl	11280 <__errno_location@plt>
   117b0:	mov	r2, #5
   117b4:	ldr	r1, [pc, #1500]	; 11d98 <__assert_fail@plt+0xa10>
   117b8:	ldr	r5, [r0]
   117bc:	mov	r0, r4
   117c0:	bl	11124 <dcgettext@plt>
   117c4:	mov	r1, fp
   117c8:	mov	r4, r0
   117cc:	mov	r0, #4
   117d0:	bl	15530 <__assert_fail@plt+0x41a8>
   117d4:	mov	r2, r4
   117d8:	mov	r1, r5
   117dc:	mov	r3, r0
   117e0:	mov	r0, #1
   117e4:	bl	111c0 <error@plt>
   117e8:	mov	r2, #5
   117ec:	ldr	r1, [pc, #1448]	; 11d9c <__assert_fail@plt+0xa14>
   117f0:	bl	11124 <dcgettext@plt>
   117f4:	mov	r1, r7
   117f8:	mov	r4, r0
   117fc:	mov	r0, #4
   11800:	bl	15530 <__assert_fail@plt+0x41a8>
   11804:	mov	r2, r4
   11808:	mov	r1, r5
   1180c:	mov	r3, r0
   11810:	mov	r0, r5
   11814:	bl	111c0 <error@plt>
   11818:	ldrb	r3, [r7]
   1181c:	cmp	r3, #0
   11820:	movne	r4, r5
   11824:	bne	11720 <__assert_fail@plt+0x398>
   11828:	ldr	r0, [sp, #32]
   1182c:	bl	13280 <__assert_fail@plt+0x1ef8>
   11830:	mov	r2, fp
   11834:	mov	r1, #3
   11838:	mov	r5, r0
   1183c:	mov	r0, #0
   11840:	bl	155ec <__assert_fail@plt+0x4264>
   11844:	mov	r2, #5
   11848:	ldr	r1, [pc, #1360]	; 11da0 <__assert_fail@plt+0xa18>
   1184c:	mov	r4, r0
   11850:	mov	r0, #0
   11854:	bl	11124 <dcgettext@plt>
   11858:	mov	r1, #0
   1185c:	mov	r3, r4
   11860:	str	r5, [sp]
   11864:	ldr	r2, [pc, #1336]	; 11da4 <__assert_fail@plt+0xa1c>
   11868:	mov	r4, r1
   1186c:	str	r0, [sp, #4]
   11870:	mov	r0, r1
   11874:	bl	111c0 <error@plt>
   11878:	b	11720 <__assert_fail@plt+0x398>
   1187c:	mov	r1, #0
   11880:	mov	r0, r7
   11884:	bl	111cc <open64@plt>
   11888:	cmn	r0, #1
   1188c:	beq	118c4 <__assert_fail@plt+0x53c>
   11890:	mov	r3, #0
   11894:	mov	r2, #0
   11898:	mov	r1, r7
   1189c:	strd	r2, [sp]
   118a0:	mov	r2, r5
   118a4:	str	r0, [sp, #40]	; 0x28
   118a8:	bl	120d8 <__assert_fail@plt+0xd50>
   118ac:	ldr	r3, [sp, #40]	; 0x28
   118b0:	mov	r5, r0
   118b4:	mov	r0, r3
   118b8:	bl	1137c <close@plt>
   118bc:	cmp	r0, #0
   118c0:	beq	11718 <__assert_fail@plt+0x390>
   118c4:	bl	11280 <__errno_location@plt>
   118c8:	mov	r5, #0
   118cc:	mov	r2, r7
   118d0:	mov	r1, #3
   118d4:	ldr	r7, [r0]
   118d8:	mov	r0, r5
   118dc:	bl	155ec <__assert_fail@plt+0x4264>
   118e0:	ldr	r2, [pc, #1216]	; 11da8 <__assert_fail@plt+0xa20>
   118e4:	mov	r1, r7
   118e8:	mov	r3, r0
   118ec:	mov	r0, r5
   118f0:	bl	111c0 <error@plt>
   118f4:	b	11718 <__assert_fail@plt+0x390>
   118f8:	ldrb	r3, [r7]
   118fc:	cmp	r3, #0
   11900:	bne	116cc <__assert_fail@plt+0x344>
   11904:	mov	r2, #5
   11908:	ldr	r1, [pc, #1168]	; 11da0 <__assert_fail@plt+0xa18>
   1190c:	mov	r0, fp
   11910:	bl	11124 <dcgettext@plt>
   11914:	ldr	r2, [pc, #1164]	; 11da8 <__assert_fail@plt+0xa20>
   11918:	mov	r1, fp
   1191c:	mov	r4, fp
   11920:	mov	r3, r0
   11924:	mov	r0, fp
   11928:	bl	111c0 <error@plt>
   1192c:	b	11720 <__assert_fail@plt+0x398>
   11930:	ldr	r3, [sp, #64]	; 0x40
   11934:	cmp	r3, #3
   11938:	beq	11b24 <__assert_fail@plt+0x79c>
   1193c:	cmp	r3, #4
   11940:	beq	11b28 <__assert_fail@plt+0x7a0>
   11944:	cmp	r3, #2
   11948:	beq	11a58 <__assert_fail@plt+0x6d0>
   1194c:	ldr	r3, [pc, #1112]	; 11dac <__assert_fail@plt+0xa24>
   11950:	ldr	r2, [pc, #1112]	; 11db0 <__assert_fail@plt+0xa28>
   11954:	ldr	r1, [pc, #1112]	; 11db4 <__assert_fail@plt+0xa2c>
   11958:	ldr	r0, [pc, #1112]	; 11db8 <__assert_fail@plt+0xa30>
   1195c:	bl	11388 <__assert_fail@plt>
   11960:	mov	r1, #112	; 0x70
   11964:	mov	r0, r6
   11968:	bl	16110 <__assert_fail@plt+0x4d88>
   1196c:	cmp	r6, #1
   11970:	str	r0, [sp, #36]	; 0x24
   11974:	beq	11bcc <__assert_fail@plt+0x844>
   11978:	ldr	r3, [sp, #36]	; 0x24
   1197c:	mov	r5, #0
   11980:	add	sl, r3, #8
   11984:	mov	r7, #3
   11988:	b	119b0 <__assert_fail@plt+0x628>
   1198c:	mov	r2, sl
   11990:	mov	r1, #0
   11994:	mov	r0, r7
   11998:	bl	11178 <__fxstat64@plt>
   1199c:	add	r5, r5, #1
   119a0:	cmp	r6, r5
   119a4:	str	r0, [sl, #-8]
   119a8:	add	sl, sl, #112	; 0x70
   119ac:	beq	119e4 <__assert_fail@plt+0x65c>
   119b0:	ldr	r8, [r4, r5, lsl #2]
   119b4:	cmp	r8, #0
   119b8:	beq	1198c <__assert_fail@plt+0x604>
   119bc:	ldr	r1, [pc, #968]	; 11d8c <__assert_fail@plt+0xa04>
   119c0:	mov	r0, r8
   119c4:	bl	11088 <strcmp@plt>
   119c8:	cmp	r0, #0
   119cc:	beq	1198c <__assert_fail@plt+0x604>
   119d0:	mov	r1, r8
   119d4:	mov	r2, sl
   119d8:	mov	r0, r7
   119dc:	bl	11358 <__xstat64@plt>
   119e0:	b	1199c <__assert_fail@plt+0x614>
   119e4:	ldr	r3, [sp, #36]	; 0x24
   119e8:	ldr	r3, [r3]
   119ec:	cmp	r3, #0
   119f0:	movgt	r7, #1
   119f4:	bgt	116ac <__assert_fail@plt+0x324>
   119f8:	ldr	r3, [sp, #36]	; 0x24
   119fc:	mov	lr, #112	; 0x70
   11a00:	mov	ip, r3
   11a04:	mla	lr, lr, r6, r3
   11a08:	mov	r0, #0
   11a0c:	mov	r1, #0
   11a10:	mov	r8, #1
   11a14:	mov	r4, #7
   11a18:	b	11a20 <__assert_fail@plt+0x698>
   11a1c:	add	ip, ip, #112	; 0x70
   11a20:	cmp	ip, lr
   11a24:	beq	11b70 <__assert_fail@plt+0x7e8>
   11a28:	ldr	r3, [ip]
   11a2c:	cmp	r3, #0
   11a30:	bne	11a1c <__assert_fail@plt+0x694>
   11a34:	ldr	r3, [ip, #24]
   11a38:	and	r3, r3, #61440	; 0xf000
   11a3c:	cmp	r3, #32768	; 0x8000
   11a40:	movne	r8, r4
   11a44:	bne	11a1c <__assert_fail@plt+0x694>
   11a48:	ldrd	r2, [ip, #56]	; 0x38
   11a4c:	adds	r0, r0, r2
   11a50:	adc	r1, r1, r3
   11a54:	b	11a1c <__assert_fail@plt+0x694>
   11a58:	cmp	fp, #0
   11a5c:	movne	fp, #0
   11a60:	andeq	fp, r4, #1
   11a64:	cmp	fp, #0
   11a68:	beq	11a80 <__assert_fail@plt+0x6f8>
   11a6c:	ldr	r0, [sp, #32]
   11a70:	bl	13280 <__assert_fail@plt+0x1ef8>
   11a74:	subs	r1, r0, #0
   11a78:	movne	r4, fp
   11a7c:	beq	11cc4 <__assert_fail@plt+0x93c>
   11a80:	ldr	r3, [sp, #48]	; 0x30
   11a84:	cmp	r3, #0
   11a88:	bne	11c3c <__assert_fail@plt+0x8b4>
   11a8c:	ldr	r0, [sp, #32]
   11a90:	bl	13280 <__assert_fail@plt+0x1ef8>
   11a94:	cmp	r0, #1
   11a98:	bls	11af4 <__assert_fail@plt+0x76c>
   11a9c:	ldrd	r6, [r9, #32]
   11aa0:	mov	r2, #5
   11aa4:	ldr	r1, [pc, #784]	; 11dbc <__assert_fail@plt+0xa34>
   11aa8:	strd	r6, [sp, #40]	; 0x28
   11aac:	ldrd	r6, [r9, #40]	; 0x28
   11ab0:	mov	r0, #0
   11ab4:	ldrd	sl, [r9, #24]
   11ab8:	strd	r6, [sp, #48]	; 0x30
   11abc:	ldrd	r6, [r9, #48]	; 0x30
   11ac0:	strd	r6, [sp, #56]	; 0x38
   11ac4:	ldrd	r6, [r9, #56]	; 0x38
   11ac8:	bl	11124 <dcgettext@plt>
   11acc:	ldrd	r2, [sp, #56]	; 0x38
   11ad0:	strd	r6, [sp, #16]
   11ad4:	ldrd	r6, [sp, #48]	; 0x30
   11ad8:	strd	r2, [sp, #8]
   11adc:	mov	r1, fp
   11ae0:	strd	r6, [sp]
   11ae4:	ldrd	r2, [sp, #40]	; 0x28
   11ae8:	str	r0, [sp, #24]
   11aec:	mov	r0, sl
   11af0:	bl	11ef4 <__assert_fail@plt+0xb6c>
   11af4:	ldr	r0, [sp, #32]
   11af8:	bl	132a0 <__assert_fail@plt+0x1f18>
   11afc:	ldr	r0, [sp, #36]	; 0x24
   11b00:	bl	1350c <__assert_fail@plt+0x2184>
   11b04:	ldrb	r3, [r9, #68]	; 0x44
   11b08:	cmp	r3, #0
   11b0c:	bne	11ba8 <__assert_fail@plt+0x820>
   11b10:	eor	r0, r4, #1
   11b14:	uxtb	r0, r0
   11b18:	add	sp, sp, #316	; 0x13c
   11b1c:	vpop	{d8-d9}
   11b20:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11b24:	bl	16570 <__assert_fail@plt+0x51e8>
   11b28:	bl	11280 <__errno_location@plt>
   11b2c:	mov	r2, #5
   11b30:	ldr	r1, [pc, #648]	; 11dc0 <__assert_fail@plt+0xa38>
   11b34:	mov	r4, r7
   11b38:	ldr	r5, [r0]
   11b3c:	mov	r0, r7
   11b40:	bl	11124 <dcgettext@plt>
   11b44:	mov	r2, fp
   11b48:	mov	r1, #3
   11b4c:	mov	r6, r0
   11b50:	mov	r0, r7
   11b54:	bl	155ec <__assert_fail@plt+0x4264>
   11b58:	mov	r2, r6
   11b5c:	mov	r1, r5
   11b60:	mov	r3, r0
   11b64:	mov	r0, r7
   11b68:	bl	111c0 <error@plt>
   11b6c:	b	11a80 <__assert_fail@plt+0x6f8>
   11b70:	mov	r7, #1
   11b74:	mov	r4, #10
   11b78:	mov	r5, #0
   11b7c:	b	11b90 <__assert_fail@plt+0x808>
   11b80:	mov	r2, r4
   11b84:	mov	r3, r5
   11b88:	add	r7, r7, #1
   11b8c:	bl	173d8 <_obstack_memory_used@@Base+0x91c>
   11b90:	cmp	r1, #0
   11b94:	cmpeq	r0, #9
   11b98:	bhi	11b80 <__assert_fail@plt+0x7f8>
   11b9c:	cmp	r7, r8
   11ba0:	movlt	r7, r8
   11ba4:	b	116ac <__assert_fail@plt+0x324>
   11ba8:	mov	r0, #0
   11bac:	bl	1137c <close@plt>
   11bb0:	cmp	r0, #0
   11bb4:	beq	11b10 <__assert_fail@plt+0x788>
   11bb8:	bl	11280 <__errno_location@plt>
   11bbc:	ldr	r2, [pc, #456]	; 11d8c <__assert_fail@plt+0xa04>
   11bc0:	ldr	r1, [r0]
   11bc4:	mov	r0, #1
   11bc8:	bl	111c0 <error@plt>
   11bcc:	ldrb	r7, [r9]
   11bd0:	ldrb	r1, [r9, #8]
   11bd4:	ldrb	r2, [r9, #9]
   11bd8:	ldrb	r3, [r9, #10]
   11bdc:	add	r7, r7, r1
   11be0:	ldrb	r8, [r9, #11]
   11be4:	add	r7, r7, r2
   11be8:	add	r7, r7, r3
   11bec:	add	r7, r7, r8
   11bf0:	cmp	r7, #1
   11bf4:	bne	11978 <__assert_fail@plt+0x5f0>
   11bf8:	ldr	r3, [sp, #36]	; 0x24
   11bfc:	str	r6, [r3]
   11c00:	b	116ac <__assert_fail@plt+0x324>
   11c04:	ldr	r3, [pc, #380]	; 11d88 <__assert_fail@plt+0xa00>
   11c08:	ldr	r3, [r3]
   11c0c:	cmp	r6, r3
   11c10:	subgt	r6, r6, r3
   11c14:	ldrgt	r2, [sp, #32]
   11c18:	ldrle	r4, [pc, #420]	; 11dc4 <__assert_fail@plt+0xa3c>
   11c1c:	addgt	r4, r2, r3, lsl #2
   11c20:	mov	r0, r4
   11c24:	movle	r6, #1
   11c28:	bl	13188 <__assert_fail@plt+0x1e00>
   11c2c:	mov	r3, #0
   11c30:	str	r3, [sp, #48]	; 0x30
   11c34:	str	r0, [sp, #32]
   11c38:	b	11680 <__assert_fail@plt+0x2f8>
   11c3c:	add	r0, sp, #168	; 0xa8
   11c40:	bl	158d8 <__assert_fail@plt+0x4550>
   11c44:	b	11a8c <__assert_fail@plt+0x704>
   11c48:	ldrd	r0, [sp, #112]	; 0x70
   11c4c:	bl	17378 <_obstack_memory_used@@Base+0x8bc>
   11c50:	vldr	d8, [pc, #208]	; 11d28 <__assert_fail@plt+0x9a0>
   11c54:	vmov	d9, r0, r1
   11c58:	bl	13800 <__assert_fail@plt+0x2478>
   11c5c:	vldr	d7, [pc, #204]	; 11d30 <__assert_fail@plt+0x9a8>
   11c60:	vmul.f64	d0, d0, d8
   11c64:	vcmpe.f64	d0, d7
   11c68:	vmrs	APSR_nzcv, fpscr
   11c6c:	ble	11ce8 <__assert_fail@plt+0x960>
   11c70:	vcmpe.f64	d7, d9
   11c74:	vmrs	APSR_nzcv, fpscr
   11c78:	blt	11664 <__assert_fail@plt+0x2dc>
   11c7c:	add	r0, sp, #168	; 0xa8
   11c80:	bl	1585c <__assert_fail@plt+0x44d4>
   11c84:	add	r1, sp, #168	; 0xa8
   11c88:	mov	r0, r4
   11c8c:	bl	15908 <__assert_fail@plt+0x4580>
   11c90:	subs	r3, r0, #0
   11c94:	str	r3, [sp, #48]	; 0x30
   11c98:	beq	11cf4 <__assert_fail@plt+0x96c>
   11c9c:	mov	r0, r4
   11ca0:	bl	1340c <__assert_fail@plt+0x2084>
   11ca4:	cmp	r0, #0
   11ca8:	bne	11cf4 <__assert_fail@plt+0x96c>
   11cac:	ldr	r4, [sp, #172]	; 0xac
   11cb0:	ldr	r6, [sp, #168]	; 0xa8
   11cb4:	mov	r0, r4
   11cb8:	bl	13188 <__assert_fail@plt+0x1e00>
   11cbc:	str	r0, [sp, #32]
   11cc0:	b	11680 <__assert_fail@plt+0x2f8>
   11cc4:	mvn	r2, #0
   11cc8:	mvn	r3, #0
   11ccc:	strd	r2, [sp]
   11cd0:	mov	r3, #1
   11cd4:	ldr	r2, [sp, #36]	; 0x24
   11cd8:	strb	r3, [r9, #68]	; 0x44
   11cdc:	bl	120d8 <__assert_fail@plt+0xd50>
   11ce0:	mov	r4, r0
   11ce4:	b	11a80 <__assert_fail@plt+0x6f8>
   11ce8:	bl	13800 <__assert_fail@plt+0x2478>
   11cec:	vmul.f64	d7, d0, d8
   11cf0:	b	11c70 <__assert_fail@plt+0x8e8>
   11cf4:	mov	r2, #5
   11cf8:	ldr	r1, [pc, #200]	; 11dc8 <__assert_fail@plt+0xa40>
   11cfc:	mov	r0, #0
   11d00:	bl	11124 <dcgettext@plt>
   11d04:	mov	r1, fp
   11d08:	mov	r4, r0
   11d0c:	mov	r0, #4
   11d10:	bl	15530 <__assert_fail@plt+0x41a8>
   11d14:	mov	r2, r4
   11d18:	mov	r1, #0
   11d1c:	mov	r3, r0
   11d20:	mov	r0, #1
   11d24:	bl	111c0 <error@plt>
   11d28:	andeq	r0, r0, r0
   11d2c:	svccc	0x00e00000
   11d30:	andeq	r0, r0, r0
   11d34:	cmnmi	r4, r0
   11d38:	andeq	r9, r2, r0, lsr #3
   11d3c:	muleq	r1, ip, sl
   11d40:	strdeq	r7, [r1], -r4
   11d44:	andeq	r7, r1, ip, asr #22
   11d48:	andeq	r3, r1, r8, ror #5
   11d4c:	andeq	r7, r1, r4, lsl r6
   11d50:	andeq	r7, r1, r8, lsr ip
   11d54:	muleq	r2, r4, r1
   11d58:	andeq	r7, r1, ip, lsl #24
   11d5c:	andeq	r0, r0, r1, lsl #2
   11d60:	muleq	r2, r8, r1
   11d64:	andeq	r9, r2, r8, lsr #2
   11d68:	andeq	r7, r1, ip, lsl ip
   11d6c:	andeq	r7, r1, ip, lsr #24
   11d70:	ldrdeq	r7, [r1], -r0
   11d74:	andeq	r7, r1, r8, asr #22
   11d78:	andeq	r7, r1, r0, asr #24
   11d7c:	andeq	r9, r2, r8, lsl #3
   11d80:	andeq	r7, r1, r4, asr ip
   11d84:	andeq	r7, r1, r0, lsr #31
   11d88:	andeq	r9, r2, r0, lsl #3
   11d8c:	andeq	r7, r1, r8, lsl #25
   11d90:	muleq	r2, r0, r1
   11d94:	andeq	r7, r1, ip, lsl #25
   11d98:	muleq	r1, r0, ip
   11d9c:	andeq	r7, r1, r0, lsl sp
   11da0:	andeq	r7, r1, r8, asr sp
   11da4:	andeq	r7, r1, r8, ror sp
   11da8:	andeq	r7, r1, r8, asr lr
   11dac:			; <UNDEFINED> instruction: 0x000176b4
   11db0:	andeq	r0, r0, sl, lsr #7
   11db4:	ldrdeq	r7, [r1], -ip
   11db8:	andeq	r7, r1, r8, ror #25
   11dbc:	andeq	r7, r1, r0, asr sp
   11dc0:	andeq	r7, r1, ip, asr #25
   11dc4:	andeq	r9, r2, r0, ror #3
   11dc8:	andeq	r7, r1, ip, lsr #25
   11dcc:	mov	fp, #0
   11dd0:	mov	lr, #0
   11dd4:	pop	{r1}		; (ldr r1, [sp], #4)
   11dd8:	mov	r2, sp
   11ddc:	push	{r2}		; (str r2, [sp, #-4]!)
   11de0:	push	{r0}		; (str r0, [sp, #-4]!)
   11de4:	ldr	ip, [pc, #16]	; 11dfc <__assert_fail@plt+0xa74>
   11de8:	push	{ip}		; (str ip, [sp, #-4]!)
   11dec:	ldr	r0, [pc, #12]	; 11e00 <__assert_fail@plt+0xa78>
   11df0:	ldr	r3, [pc, #12]	; 11e04 <__assert_fail@plt+0xa7c>
   11df4:	bl	111fc <__libc_start_main@plt>
   11df8:	bl	11370 <abort@plt>
   11dfc:	andeq	r7, r1, ip, lsr #11
   11e00:	muleq	r1, r8, r3
   11e04:	andeq	r7, r1, ip, asr #10
   11e08:	ldr	r3, [pc, #20]	; 11e24 <__assert_fail@plt+0xa9c>
   11e0c:	ldr	r2, [pc, #20]	; 11e28 <__assert_fail@plt+0xaa0>
   11e10:	add	r3, pc, r3
   11e14:	ldr	r2, [r3, r2]
   11e18:	cmp	r2, #0
   11e1c:	bxeq	lr
   11e20:	b	11214 <__gmon_start__@plt>
   11e24:	andeq	r7, r1, r8, ror #3
   11e28:	andeq	r0, r0, ip, lsl r1
   11e2c:	ldr	r3, [pc, #28]	; 11e50 <__assert_fail@plt+0xac8>
   11e30:	ldr	r0, [pc, #28]	; 11e54 <__assert_fail@plt+0xacc>
   11e34:	sub	r3, r3, r0
   11e38:	cmp	r3, #6
   11e3c:	bxls	lr
   11e40:	ldr	r3, [pc, #16]	; 11e58 <__assert_fail@plt+0xad0>
   11e44:	cmp	r3, #0
   11e48:	bxeq	lr
   11e4c:	bx	r3
   11e50:	andeq	r9, r2, r7, ror r1
   11e54:	andeq	r9, r2, r4, ror r1
   11e58:	andeq	r0, r0, r0
   11e5c:	ldr	r1, [pc, #36]	; 11e88 <__assert_fail@plt+0xb00>
   11e60:	ldr	r0, [pc, #36]	; 11e8c <__assert_fail@plt+0xb04>
   11e64:	sub	r1, r1, r0
   11e68:	asr	r1, r1, #2
   11e6c:	add	r1, r1, r1, lsr #31
   11e70:	asrs	r1, r1, #1
   11e74:	bxeq	lr
   11e78:	ldr	r3, [pc, #16]	; 11e90 <__assert_fail@plt+0xb08>
   11e7c:	cmp	r3, #0
   11e80:	bxeq	lr
   11e84:	bx	r3
   11e88:	andeq	r9, r2, r4, ror r1
   11e8c:	andeq	r9, r2, r4, ror r1
   11e90:	andeq	r0, r0, r0
   11e94:	push	{r4, lr}
   11e98:	ldr	r4, [pc, #24]	; 11eb8 <__assert_fail@plt+0xb30>
   11e9c:	ldrb	r3, [r4]
   11ea0:	cmp	r3, #0
   11ea4:	popne	{r4, pc}
   11ea8:	bl	11e2c <__assert_fail@plt+0xaa4>
   11eac:	mov	r3, #1
   11eb0:	strb	r3, [r4]
   11eb4:	pop	{r4, pc}
   11eb8:	muleq	r2, ip, r1
   11ebc:	ldr	r0, [pc, #40]	; 11eec <__assert_fail@plt+0xb64>
   11ec0:	ldr	r3, [r0]
   11ec4:	cmp	r3, #0
   11ec8:	bne	11ed0 <__assert_fail@plt+0xb48>
   11ecc:	b	11e5c <__assert_fail@plt+0xad4>
   11ed0:	ldr	r3, [pc, #24]	; 11ef0 <__assert_fail@plt+0xb68>
   11ed4:	cmp	r3, #0
   11ed8:	beq	11ecc <__assert_fail@plt+0xb44>
   11edc:	push	{r4, lr}
   11ee0:	blx	r3
   11ee4:	pop	{r4, lr}
   11ee8:	b	11e5c <__assert_fail@plt+0xad4>
   11eec:	andeq	r8, r2, r4, lsl pc
   11ef0:	andeq	r0, r0, r0
   11ef4:	push	{r4, r5, r6, r7, r8, r9, lr}
   11ef8:	mov	r9, r3
   11efc:	ldr	r4, [pc, #448]	; 120c4 <__assert_fail@plt+0xd3c>
   11f00:	sub	sp, sp, #28
   11f04:	mov	r8, r2
   11f08:	ldrb	r3, [r4]
   11f0c:	ldr	r5, [sp, #80]	; 0x50
   11f10:	cmp	r3, #0
   11f14:	ldreq	r6, [pc, #428]	; 120c8 <__assert_fail@plt+0xd40>
   11f18:	bne	11fbc <__assert_fail@plt+0xc34>
   11f1c:	ldrb	r3, [r4, #8]
   11f20:	cmp	r3, #0
   11f24:	bne	11fec <__assert_fail@plt+0xc64>
   11f28:	ldrb	r3, [r4, #9]
   11f2c:	cmp	r3, #0
   11f30:	bne	12024 <__assert_fail@plt+0xc9c>
   11f34:	ldrb	r3, [r4, #10]
   11f38:	cmp	r3, #0
   11f3c:	bne	12058 <__assert_fail@plt+0xcd0>
   11f40:	ldrb	r3, [r4, #11]
   11f44:	cmp	r3, #0
   11f48:	bne	1208c <__assert_fail@plt+0xd04>
   11f4c:	cmp	r5, #0
   11f50:	beq	11f8c <__assert_fail@plt+0xc04>
   11f54:	mov	r1, #10
   11f58:	mov	r0, r5
   11f5c:	bl	11268 <strchr@plt>
   11f60:	cmp	r0, #0
   11f64:	beq	11f7c <__assert_fail@plt+0xbf4>
   11f68:	mov	r2, r5
   11f6c:	mov	r1, #3
   11f70:	mov	r0, #0
   11f74:	bl	155ec <__assert_fail@plt+0x4264>
   11f78:	mov	r5, r0
   11f7c:	mov	r2, r5
   11f80:	ldr	r1, [pc, #324]	; 120cc <__assert_fail@plt+0xd44>
   11f84:	mov	r0, #1
   11f88:	bl	112c8 <__printf_chk@plt>
   11f8c:	ldr	r3, [pc, #316]	; 120d0 <__assert_fail@plt+0xd48>
   11f90:	ldr	r0, [r3]
   11f94:	ldr	r3, [r0, #20]
   11f98:	ldr	r2, [r0, #24]
   11f9c:	cmp	r3, r2
   11fa0:	addcc	r1, r3, #1
   11fa4:	movcc	r2, #10
   11fa8:	strcc	r1, [r0, #20]
   11fac:	strbcc	r2, [r3]
   11fb0:	bcs	120b4 <__assert_fail@plt+0xd2c>
   11fb4:	add	sp, sp, #28
   11fb8:	pop	{r4, r5, r6, r7, r8, r9, pc}
   11fbc:	mov	r2, sp
   11fc0:	ldr	r6, [r4, #4]
   11fc4:	bl	13604 <__assert_fail@plt+0x227c>
   11fc8:	mov	r2, r6
   11fcc:	ldr	r1, [pc, #244]	; 120c8 <__assert_fail@plt+0xd40>
   11fd0:	ldr	r6, [pc, #252]	; 120d4 <__assert_fail@plt+0xd4c>
   11fd4:	mov	r3, r0
   11fd8:	mov	r0, #1
   11fdc:	bl	112c8 <__printf_chk@plt>
   11fe0:	ldrb	r3, [r4, #8]
   11fe4:	cmp	r3, #0
   11fe8:	beq	11f28 <__assert_fail@plt+0xba0>
   11fec:	mov	r1, r9
   11ff0:	mov	r2, sp
   11ff4:	mov	r0, r8
   11ff8:	ldr	r7, [r4, #4]
   11ffc:	bl	13604 <__assert_fail@plt+0x227c>
   12000:	mov	r1, r6
   12004:	mov	r2, r7
   12008:	ldr	r6, [pc, #196]	; 120d4 <__assert_fail@plt+0xd4c>
   1200c:	mov	r3, r0
   12010:	mov	r0, #1
   12014:	bl	112c8 <__printf_chk@plt>
   12018:	ldrb	r3, [r4, #9]
   1201c:	cmp	r3, #0
   12020:	beq	11f34 <__assert_fail@plt+0xbac>
   12024:	mov	r2, sp
   12028:	ldrd	r0, [sp, #56]	; 0x38
   1202c:	ldr	r7, [r4, #4]
   12030:	bl	13604 <__assert_fail@plt+0x227c>
   12034:	mov	r1, r6
   12038:	mov	r2, r7
   1203c:	ldr	r6, [pc, #144]	; 120d4 <__assert_fail@plt+0xd4c>
   12040:	mov	r3, r0
   12044:	mov	r0, #1
   12048:	bl	112c8 <__printf_chk@plt>
   1204c:	ldrb	r3, [r4, #10]
   12050:	cmp	r3, #0
   12054:	beq	11f40 <__assert_fail@plt+0xbb8>
   12058:	mov	r2, sp
   1205c:	ldrd	r0, [sp, #64]	; 0x40
   12060:	ldr	r7, [r4, #4]
   12064:	bl	13604 <__assert_fail@plt+0x227c>
   12068:	mov	r1, r6
   1206c:	mov	r2, r7
   12070:	ldr	r6, [pc, #92]	; 120d4 <__assert_fail@plt+0xd4c>
   12074:	mov	r3, r0
   12078:	mov	r0, #1
   1207c:	bl	112c8 <__printf_chk@plt>
   12080:	ldrb	r3, [r4, #11]
   12084:	cmp	r3, #0
   12088:	beq	11f4c <__assert_fail@plt+0xbc4>
   1208c:	mov	r2, sp
   12090:	ldrd	r0, [sp, #72]	; 0x48
   12094:	ldr	r4, [r4, #4]
   12098:	bl	13604 <__assert_fail@plt+0x227c>
   1209c:	mov	r2, r4
   120a0:	mov	r1, r6
   120a4:	mov	r3, r0
   120a8:	mov	r0, #1
   120ac:	bl	112c8 <__printf_chk@plt>
   120b0:	b	11f4c <__assert_fail@plt+0xbc4>
   120b4:	mov	r1, #10
   120b8:	bl	11304 <__overflow@plt>
   120bc:	add	sp, sp, #28
   120c0:	pop	{r4, r5, r6, r7, r8, r9, pc}
   120c4:	andeq	r9, r2, r0, lsr #3
   120c8:	ldrdeq	r7, [r1], -r5
   120cc:			; <UNDEFINED> instruction: 0x000176bc
   120d0:	muleq	r2, r4, r1
   120d4:	ldrdeq	r7, [r1], -r4
   120d8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   120dc:	sub	sp, sp, #16384	; 0x4000
   120e0:	sub	sp, sp, #148	; 0x94
   120e4:	subs	r3, r1, #0
   120e8:	str	r3, [sp, #84]	; 0x54
   120ec:	ldrne	r3, [sp, #84]	; 0x54
   120f0:	str	r0, [sp, #72]	; 0x48
   120f4:	mov	r7, r2
   120f8:	strne	r3, [sp, #92]	; 0x5c
   120fc:	beq	12b78 <__assert_fail@plt+0x17f0>
   12100:	mov	r3, #0
   12104:	mov	r2, #0
   12108:	strd	r2, [sp, #104]	; 0x68
   1210c:	strd	r2, [sp, #112]	; 0x70
   12110:	bl	1119c <__ctype_get_mb_cur_max@plt>
   12114:	ldr	r3, [pc, #2916]	; 12c80 <__assert_fail@plt+0x18f8>
   12118:	cmp	r0, #1
   1211c:	bls	1288c <__assert_fail@plt+0x1504>
   12120:	ldrb	r5, [r3, #9]
   12124:	str	r3, [sp, #76]	; 0x4c
   12128:	ldrb	r3, [r3, #10]
   1212c:	eor	r4, r5, #1
   12130:	str	r5, [sp, #88]	; 0x58
   12134:	and	r4, r4, r3
   12138:	ldr	r1, [sp, #76]	; 0x4c
   1213c:	ldrb	r2, [r1, #8]
   12140:	cmp	r2, #0
   12144:	bne	1227c <__assert_fail@plt+0xef4>
   12148:	ldrb	r6, [r1, #11]
   1214c:	cmp	r6, #0
   12150:	bne	124c8 <__assert_fail@plt+0x1140>
   12154:	eor	r3, r3, #1
   12158:	orrs	r3, r3, r5
   1215c:	bne	128b8 <__assert_fail@plt+0x1530>
   12160:	ldrb	r3, [r1]
   12164:	cmp	r3, #0
   12168:	bne	128b8 <__assert_fail@plt+0x1530>
   1216c:	cmp	r4, #0
   12170:	bne	125cc <__assert_fail@plt+0x1244>
   12174:	add	r3, sp, #112	; 0x70
   12178:	add	r2, sp, #104	; 0x68
   1217c:	ldr	r1, [sp, #72]	; 0x48
   12180:	ldr	r0, [sp, #92]	; 0x5c
   12184:	bl	12e50 <__assert_fail@plt+0x1ac8>
   12188:	mov	r8, #0
   1218c:	mov	r9, #0
   12190:	ldr	r2, [sp, #112]	; 0x70
   12194:	ldr	r3, [sp, #116]	; 0x74
   12198:	mov	sl, r8
   1219c:	mov	fp, r9
   121a0:	strd	r8, [sp, #32]
   121a4:	mov	r6, r0
   121a8:	ldr	r1, [sp, #76]	; 0x4c
   121ac:	ldr	r0, [sp, #88]	; 0x58
   121b0:	ldr	ip, [sp, #84]	; 0x54
   121b4:	ldrb	r1, [r1, #9]
   121b8:	str	ip, [sp, #24]
   121bc:	str	r2, [sp, #8]
   121c0:	cmp	r0, r1
   121c4:	movlt	sl, r2
   121c8:	movlt	fp, r3
   121cc:	ldrd	r0, [sp, #104]	; 0x68
   121d0:	str	r3, [sp, #12]
   121d4:	strd	sl, [sp]
   121d8:	ldrd	r2, [sp, #32]
   121dc:	strd	r8, [sp, #16]
   121e0:	bl	11ef4 <__assert_fail@plt+0xb6c>
   121e4:	ldr	ip, [sp, #76]	; 0x4c
   121e8:	ldrd	r0, [sp, #104]	; 0x68
   121ec:	ldrd	r4, [sp, #112]	; 0x70
   121f0:	ldrd	r2, [ip, #24]
   121f4:	strd	r4, [sp, #48]	; 0x30
   121f8:	adds	r2, r2, r0
   121fc:	adc	r3, r3, r1
   12200:	ldrd	r4, [ip, #32]
   12204:	strd	r2, [sp, #40]	; 0x28
   12208:	ldrd	r2, [sp, #32]
   1220c:	ldrd	r0, [ip, #40]	; 0x28
   12210:	adds	r2, r2, r4
   12214:	adc	r3, r3, r5
   12218:	adds	r0, r0, sl
   1221c:	adc	r1, r1, fp
   12220:	ldrd	sl, [ip, #56]	; 0x38
   12224:	mov	r4, r2
   12228:	mov	r5, r3
   1222c:	strd	sl, [sp, #32]
   12230:	ldrd	r2, [ip, #48]	; 0x30
   12234:	ldrd	sl, [sp, #48]	; 0x30
   12238:	strd	r4, [ip, #32]
   1223c:	strd	r0, [ip, #40]	; 0x28
   12240:	adds	sl, sl, r2
   12244:	adc	fp, fp, r3
   12248:	mov	r2, sl
   1224c:	mov	r3, fp
   12250:	ldrd	sl, [sp, #40]	; 0x28
   12254:	strd	r2, [ip, #48]	; 0x30
   12258:	strd	sl, [ip, #24]
   1225c:	ldrd	sl, [sp, #32]
   12260:	cmp	r9, fp
   12264:	cmpeq	r8, sl
   12268:	strdhi	r8, [ip, #56]	; 0x38
   1226c:	mov	r0, r6
   12270:	add	sp, sp, #16384	; 0x4000
   12274:	add	sp, sp, #148	; 0x94
   12278:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1227c:	mov	r2, #0
   12280:	mov	r3, #0
   12284:	mov	r1, #2
   12288:	strd	r2, [sp]
   1228c:	str	r1, [sp, #8]
   12290:	ldr	r0, [sp, #72]	; 0x48
   12294:	bl	133cc <__assert_fail@plt+0x2044>
   12298:	cmp	r4, #0
   1229c:	bne	128f0 <__assert_fail@plt+0x1568>
   122a0:	bl	1119c <__ctype_get_mb_cur_max@plt>
   122a4:	cmp	r0, #1
   122a8:	bls	124f0 <__assert_fail@plt+0x1168>
   122ac:	mov	r2, #0
   122b0:	mov	r0, #0
   122b4:	mov	r1, #0
   122b8:	mov	r4, r2
   122bc:	mov	r6, r2
   122c0:	mov	r7, r2
   122c4:	mov	sl, r0
   122c8:	mov	fp, r1
   122cc:	mov	r8, r0
   122d0:	mov	r9, r1
   122d4:	add	r3, sp, #140	; 0x8c
   122d8:	strd	r0, [sp, #40]	; 0x28
   122dc:	str	r2, [sp, #124]	; 0x7c
   122e0:	str	r2, [sp, #128]	; 0x80
   122e4:	strd	r0, [sp, #56]	; 0x38
   122e8:	str	r3, [sp, #68]	; 0x44
   122ec:	ldr	r3, [sp, #68]	; 0x44
   122f0:	rsb	r2, r4, #16384	; 0x4000
   122f4:	add	r1, r3, r4
   122f8:	ldr	r0, [sp, #72]	; 0x48
   122fc:	bl	15aa0 <__assert_fail@plt+0x4718>
   12300:	cmp	r0, #0
   12304:	beq	12a28 <__assert_fail@plt+0x16a0>
   12308:	cmn	r0, #1
   1230c:	beq	12a64 <__assert_fail@plt+0x16dc>
   12310:	ldrd	r2, [sp, #112]	; 0x70
   12314:	ldr	r5, [sp, #68]	; 0x44
   12318:	add	r4, r4, r0
   1231c:	adds	r2, r2, r0
   12320:	adc	r3, r3, #0
   12324:	add	r1, sp, #132	; 0x84
   12328:	strd	r2, [sp, #112]	; 0x70
   1232c:	mov	r2, r6
   12330:	str	r1, [sp, #64]	; 0x40
   12334:	strd	r8, [sp, #32]
   12338:	cmp	r2, #0
   1233c:	bne	126ac <__assert_fail@plt+0x1324>
   12340:	ldrb	r6, [r5]
   12344:	ldr	r0, [pc, #2360]	; 12c84 <__assert_fail@plt+0x18fc>
   12348:	and	r1, r6, #31
   1234c:	lsr	r3, r6, #5
   12350:	ldr	r3, [r0, r3, lsl #2]
   12354:	lsr	r3, r3, r1
   12358:	tst	r3, #1
   1235c:	beq	126ac <__assert_fail@plt+0x1324>
   12360:	sub	r3, r6, #9
   12364:	str	r6, [sp, #100]	; 0x64
   12368:	cmp	r3, #23
   1236c:	ldrls	pc, [pc, r3, lsl #2]
   12370:	b	123d4 <__assert_fail@plt+0x104c>
   12374:	andeq	r2, r1, ip, lsl #9
   12378:	andeq	r2, r1, r4, asr r4
   1237c:	andeq	r2, r1, r8, lsl r4
   12380:	andeq	r2, r1, r0, asr #9
   12384:	andeq	r2, r1, r0, asr #9
   12388:	ldrdeq	r2, [r1], -r4
   1238c:	ldrdeq	r2, [r1], -r4
   12390:	ldrdeq	r2, [r1], -r4
   12394:	ldrdeq	r2, [r1], -r4
   12398:	ldrdeq	r2, [r1], -r4
   1239c:	ldrdeq	r2, [r1], -r4
   123a0:	ldrdeq	r2, [r1], -r4
   123a4:	ldrdeq	r2, [r1], -r4
   123a8:	ldrdeq	r2, [r1], -r4
   123ac:	ldrdeq	r2, [r1], -r4
   123b0:	ldrdeq	r2, [r1], -r4
   123b4:	ldrdeq	r2, [r1], -r4
   123b8:	ldrdeq	r2, [r1], -r4
   123bc:	ldrdeq	r2, [r1], -r4
   123c0:	ldrdeq	r2, [r1], -r4
   123c4:	ldrdeq	r2, [r1], -r4
   123c8:	ldrdeq	r2, [r1], -r4
   123cc:	ldrdeq	r2, [r1], -r4
   123d0:	andeq	r2, r1, r8, lsr #9
   123d4:	str	r2, [sp, #48]	; 0x30
   123d8:	bl	1122c <__ctype_b_loc@plt>
   123dc:	lsl	r6, r6, #1
   123e0:	ldr	r2, [sp, #48]	; 0x30
   123e4:	ldr	r3, [r0]
   123e8:	ldrh	r3, [r3, r6]
   123ec:	tst	r3, #16384	; 0x4000
   123f0:	moveq	r3, #1
   123f4:	beq	12430 <__assert_fail@plt+0x10a8>
   123f8:	ldrd	r0, [sp, #40]	; 0x28
   123fc:	adds	r0, r0, #1
   12400:	adc	r1, r1, #0
   12404:	tst	r3, #8192	; 0x2000
   12408:	moveq	r7, #1
   1240c:	strd	r0, [sp, #40]	; 0x28
   12410:	moveq	r3, r7
   12414:	beq	12430 <__assert_fail@plt+0x10a8>
   12418:	mov	r3, #1
   1241c:	ldrd	r0, [sp, #32]
   12420:	adds	r0, r0, r7
   12424:	adc	r1, r1, #0
   12428:	mov	r7, #0
   1242c:	strd	r0, [sp, #32]
   12430:	adds	sl, sl, #1
   12434:	add	r5, r5, r3
   12438:	sub	r4, r4, r3
   1243c:	adc	fp, fp, #0
   12440:	cmp	r4, #0
   12444:	bne	12338 <__assert_fail@plt+0xfb0>
   12448:	ldrd	r8, [sp, #32]
   1244c:	mov	r6, r2
   12450:	b	122ec <__assert_fail@plt+0xf64>
   12454:	mov	r3, #1
   12458:	ldrd	r0, [sp, #104]	; 0x68
   1245c:	adds	r0, r0, #1
   12460:	adc	r1, r1, #0
   12464:	strd	r0, [sp, #104]	; 0x68
   12468:	ldrd	r8, [sp, #56]	; 0x38
   1246c:	ldrd	r0, [sp, #40]	; 0x28
   12470:	cmp	r9, r1
   12474:	cmpeq	r8, r0
   12478:	strdcc	r0, [sp, #56]	; 0x38
   1247c:	mov	r0, #0
   12480:	mov	r1, #0
   12484:	strd	r0, [sp, #40]	; 0x28
   12488:	b	1241c <__assert_fail@plt+0x1094>
   1248c:	mov	r3, #1
   12490:	ldrd	r0, [sp, #40]	; 0x28
   12494:	bic	r0, r0, #7
   12498:	adds	r8, r0, #8
   1249c:	adc	r9, r1, #0
   124a0:	strd	r8, [sp, #40]	; 0x28
   124a4:	b	1241c <__assert_fail@plt+0x1094>
   124a8:	mov	r3, #1
   124ac:	ldrd	r0, [sp, #40]	; 0x28
   124b0:	adds	r0, r0, #1
   124b4:	adc	r1, r1, #0
   124b8:	strd	r0, [sp, #40]	; 0x28
   124bc:	b	1241c <__assert_fail@plt+0x1094>
   124c0:	mov	r3, #1
   124c4:	b	12468 <__assert_fail@plt+0x10e0>
   124c8:	mov	r2, #0
   124cc:	mov	r3, #0
   124d0:	mov	r1, #2
   124d4:	strd	r2, [sp]
   124d8:	str	r1, [sp, #8]
   124dc:	ldr	r0, [sp, #72]	; 0x48
   124e0:	bl	133cc <__assert_fail@plt+0x2044>
   124e4:	bl	1119c <__ctype_get_mb_cur_max@plt>
   124e8:	cmp	r0, #1
   124ec:	bhi	122ac <__assert_fail@plt+0xf24>
   124f0:	mov	sl, #0
   124f4:	mov	fp, #0
   124f8:	mov	r7, #0
   124fc:	mov	r4, sl
   12500:	mov	r5, fp
   12504:	mov	r8, r7
   12508:	mov	r9, r7
   1250c:	add	r3, sp, #140	; 0x8c
   12510:	strd	sl, [sp, #32]
   12514:	str	r3, [sp, #68]	; 0x44
   12518:	mov	r2, #16384	; 0x4000
   1251c:	ldr	r1, [sp, #68]	; 0x44
   12520:	ldr	r0, [sp, #72]	; 0x48
   12524:	bl	15aa0 <__assert_fail@plt+0x4718>
   12528:	cmp	r0, #0
   1252c:	beq	12c00 <__assert_fail@plt+0x1878>
   12530:	cmn	r0, #1
   12534:	beq	12b90 <__assert_fail@plt+0x1808>
   12538:	ldrd	r2, [sp, #112]	; 0x70
   1253c:	ldr	ip, [sp, #68]	; 0x44
   12540:	adds	r6, r2, r0
   12544:	adc	r7, r3, #0
   12548:	add	r1, ip, r0
   1254c:	strd	r6, [sp, #112]	; 0x70
   12550:	mov	r6, ip
   12554:	mov	r7, r1
   12558:	ldrb	r3, [r6], #1
   1255c:	sub	r2, r3, #9
   12560:	cmp	r2, #23
   12564:	ldrls	pc, [pc, r2, lsl #2]
   12568:	b	12b00 <__assert_fail@plt+0x1778>
   1256c:	strdeq	r2, [r1], -r0
   12570:	muleq	r1, ip, sl
   12574:	andeq	r2, r1, r4, asr #21
   12578:	andeq	r2, r1, ip, lsr #21
   1257c:	andeq	r2, r1, ip, lsr #21
   12580:	andeq	r2, r1, r0, lsl #22
   12584:	andeq	r2, r1, r0, lsl #22
   12588:	andeq	r2, r1, r0, lsl #22
   1258c:	andeq	r2, r1, r0, lsl #22
   12590:	andeq	r2, r1, r0, lsl #22
   12594:	andeq	r2, r1, r0, lsl #22
   12598:	andeq	r2, r1, r0, lsl #22
   1259c:	andeq	r2, r1, r0, lsl #22
   125a0:	andeq	r2, r1, r0, lsl #22
   125a4:	andeq	r2, r1, r0, lsl #22
   125a8:	andeq	r2, r1, r0, lsl #22
   125ac:	andeq	r2, r1, r0, lsl #22
   125b0:	andeq	r2, r1, r0, lsl #22
   125b4:	andeq	r2, r1, r0, lsl #22
   125b8:	andeq	r2, r1, r0, lsl #22
   125bc:	andeq	r2, r1, r0, lsl #22
   125c0:	andeq	r2, r1, r0, lsl #22
   125c4:	andeq	r2, r1, r0, lsl #22
   125c8:	andeq	r2, r1, r4, ror #21
   125cc:	ldr	r0, [r7]
   125d0:	cmp	r0, #0
   125d4:	ble	125ec <__assert_fail@plt+0x1264>
   125d8:	add	r2, r7, #8
   125dc:	ldr	r1, [sp, #72]	; 0x48
   125e0:	mov	r0, #3
   125e4:	bl	11178 <__fxstat64@plt>
   125e8:	str	r0, [r7]
   125ec:	cmp	r0, #0
   125f0:	bne	129a4 <__assert_fail@plt+0x161c>
   125f4:	ldr	r3, [r7, #24]
   125f8:	and	r3, r3, #53248	; 0xd000
   125fc:	cmp	r3, #32768	; 0x8000
   12600:	bne	129a4 <__assert_fail@plt+0x161c>
   12604:	ldrd	r4, [r7, #56]	; 0x38
   12608:	cmp	r4, #0
   1260c:	sbcs	r3, r5, #0
   12610:	blt	129a4 <__assert_fail@plt+0x161c>
   12614:	add	r3, sp, #16384	; 0x4000
   12618:	add	r3, r3, #184	; 0xb8
   1261c:	ldrd	r2, [r3]
   12620:	cmp	r2, #0
   12624:	sbcs	r3, r3, #0
   12628:	blt	12c58 <__assert_fail@plt+0x18d0>
   1262c:	ldr	r3, [sp, #76]	; 0x4c
   12630:	mov	r0, r4
   12634:	ldr	r1, [r3, #12]
   12638:	bl	16dc0 <_obstack_memory_used@@Base+0x304>
   1263c:	cmp	r1, #0
   12640:	beq	12900 <__assert_fail@plt+0x1578>
   12644:	add	r1, sp, #16384	; 0x4000
   12648:	add	r1, r1, #184	; 0xb8
   1264c:	mov	r3, #0
   12650:	ldrd	r0, [r1]
   12654:	mov	r2, r4
   12658:	cmp	r4, r0
   1265c:	sbcs	r1, r3, r1
   12660:	movlt	r2, #0
   12664:	movlt	r3, #0
   12668:	blt	12688 <__assert_fail@plt+0x1300>
   1266c:	add	r1, sp, #16384	; 0x4000
   12670:	add	r1, r1, #184	; 0xb8
   12674:	ldrd	r0, [r1]
   12678:	subs	r0, r2, r0
   1267c:	sbc	r1, r3, r1
   12680:	mov	r2, r0
   12684:	mov	r3, r1
   12688:	mov	r8, #0
   1268c:	mov	r9, #0
   12690:	str	r2, [sp, #112]	; 0x70
   12694:	str	r3, [sp, #116]	; 0x74
   12698:	mov	sl, r8
   1269c:	mov	fp, r9
   126a0:	strd	r8, [sp, #32]
   126a4:	mov	r6, #1
   126a8:	b	121a8 <__assert_fail@plt+0xe20>
   126ac:	add	r6, sp, #124	; 0x7c
   126b0:	ldr	ip, [sp, #64]	; 0x40
   126b4:	ldm	r6, {r0, r1}
   126b8:	mov	r3, r6
   126bc:	mov	r2, r4
   126c0:	stm	ip, {r0, r1}
   126c4:	mov	r1, r5
   126c8:	add	r0, sp, #100	; 0x64
   126cc:	bl	1370c <__assert_fail@plt+0x2384>
   126d0:	cmn	r0, #2
   126d4:	beq	12820 <__assert_fail@plt+0x1498>
   126d8:	cmn	r0, #1
   126dc:	addeq	r5, r5, #1
   126e0:	subeq	r4, r4, #1
   126e4:	moveq	r2, #1
   126e8:	beq	12440 <__assert_fail@plt+0x10b8>
   126ec:	str	r0, [sp, #48]	; 0x30
   126f0:	mov	r0, r6
   126f4:	bl	11100 <mbsinit@plt>
   126f8:	ldr	r3, [sp, #48]	; 0x30
   126fc:	cmp	r3, #0
   12700:	clz	r2, r0
   12704:	lsr	r2, r2, #5
   12708:	bne	127ac <__assert_fail@plt+0x1424>
   1270c:	str	r3, [sp, #100]	; 0x64
   12710:	mov	r6, r3
   12714:	mov	r3, #1
   12718:	mov	r0, r6
   1271c:	str	r2, [sp, #80]	; 0x50
   12720:	str	r3, [sp, #48]	; 0x30
   12724:	bl	1116c <iswprint@plt>
   12728:	ldr	r3, [sp, #48]	; 0x30
   1272c:	ldr	r2, [sp, #80]	; 0x50
   12730:	cmp	r0, #0
   12734:	beq	12430 <__assert_fail@plt+0x10a8>
   12738:	ldr	r1, [sp, #76]	; 0x4c
   1273c:	ldrb	r1, [r1, #11]
   12740:	cmp	r1, #0
   12744:	bne	12860 <__assert_fail@plt+0x14d8>
   12748:	ldr	r6, [sp, #100]	; 0x64
   1274c:	str	r2, [sp, #80]	; 0x50
   12750:	mov	r0, r6
   12754:	str	r3, [sp, #48]	; 0x30
   12758:	bl	11250 <iswspace@plt>
   1275c:	ldr	r3, [sp, #48]	; 0x30
   12760:	ldr	r2, [sp, #80]	; 0x50
   12764:	cmp	r0, #0
   12768:	bne	1241c <__assert_fail@plt+0x1094>
   1276c:	ldr	r1, [sp, #76]	; 0x4c
   12770:	ldrb	r1, [r1, #16]
   12774:	cmp	r1, #0
   12778:	movne	r7, r1
   1277c:	bne	12430 <__assert_fail@plt+0x10a8>
   12780:	ldr	r1, [pc, #1280]	; 12c88 <__assert_fail@plt+0x1900>
   12784:	cmp	r6, r1
   12788:	cmpne	r6, #160	; 0xa0
   1278c:	beq	1241c <__assert_fail@plt+0x1094>
   12790:	ldr	r0, [pc, #1268]	; 12c8c <__assert_fail@plt+0x1904>
   12794:	add	r1, r1, #40	; 0x28
   12798:	cmp	r6, r0
   1279c:	cmpne	r6, r1
   127a0:	movne	r7, #1
   127a4:	bne	12430 <__assert_fail@plt+0x10a8>
   127a8:	b	1241c <__assert_fail@plt+0x1094>
   127ac:	ldr	r6, [sp, #100]	; 0x64
   127b0:	sub	r1, r6, #9
   127b4:	cmp	r1, #23
   127b8:	ldrls	pc, [pc, r1, lsl #2]
   127bc:	b	12718 <__assert_fail@plt+0x1390>
   127c0:	muleq	r1, r0, r4
   127c4:	andeq	r2, r1, r8, asr r4
   127c8:	andeq	r2, r1, ip, lsl r4
   127cc:	andeq	r2, r1, r8, ror #8
   127d0:	andeq	r2, r1, r8, ror #8
   127d4:	andeq	r2, r1, r8, lsl r7
   127d8:	andeq	r2, r1, r8, lsl r7
   127dc:	andeq	r2, r1, r8, lsl r7
   127e0:	andeq	r2, r1, r8, lsl r7
   127e4:	andeq	r2, r1, r8, lsl r7
   127e8:	andeq	r2, r1, r8, lsl r7
   127ec:	andeq	r2, r1, r8, lsl r7
   127f0:	andeq	r2, r1, r8, lsl r7
   127f4:	andeq	r2, r1, r8, lsl r7
   127f8:	andeq	r2, r1, r8, lsl r7
   127fc:	andeq	r2, r1, r8, lsl r7
   12800:	andeq	r2, r1, r8, lsl r7
   12804:	andeq	r2, r1, r8, lsl r7
   12808:	andeq	r2, r1, r8, lsl r7
   1280c:	andeq	r2, r1, r8, lsl r7
   12810:	andeq	r2, r1, r8, lsl r7
   12814:	andeq	r2, r1, r8, lsl r7
   12818:	andeq	r2, r1, r8, lsl r7
   1281c:	andeq	r2, r1, ip, lsr #9
   12820:	ldr	r3, [sp, #64]	; 0x40
   12824:	cmp	r4, #0
   12828:	ldrd	r8, [sp, #32]
   1282c:	ldm	r3, {r0, r1}
   12830:	stm	r6, {r0, r1}
   12834:	beq	12858 <__assert_fail@plt+0x14d0>
   12838:	cmp	r4, #16384	; 0x4000
   1283c:	subeq	r4, r4, #1
   12840:	addeq	r5, r5, #1
   12844:	mov	r1, r5
   12848:	ldr	r3, [pc, #1088]	; 12c90 <__assert_fail@plt+0x1908>
   1284c:	mov	r2, r4
   12850:	ldr	r0, [sp, #68]	; 0x44
   12854:	bl	110c4 <__memmove_chk@plt>
   12858:	mov	r6, #1
   1285c:	b	122ec <__assert_fail@plt+0xf64>
   12860:	mov	r0, r6
   12864:	bl	110b8 <wcwidth@plt>
   12868:	ldr	r3, [sp, #48]	; 0x30
   1286c:	ldr	r2, [sp, #80]	; 0x50
   12870:	cmp	r0, #0
   12874:	ble	12748 <__assert_fail@plt+0x13c0>
   12878:	ldrd	r8, [sp, #40]	; 0x28
   1287c:	adds	r8, r8, r0
   12880:	adc	r9, r9, r0, asr #31
   12884:	strd	r8, [sp, #40]	; 0x28
   12888:	b	12748 <__assert_fail@plt+0x13c0>
   1288c:	mov	r2, r3
   12890:	str	r3, [sp, #76]	; 0x4c
   12894:	ldrb	r3, [r3, #10]
   12898:	cmp	r3, #0
   1289c:	moveq	r3, r2
   128a0:	mov	r2, #0
   128a4:	ldrbeq	r3, [r3, #9]
   128a8:	str	r2, [sp, #88]	; 0x58
   128ac:	mov	r5, r2
   128b0:	mov	r4, r3
   128b4:	b	12138 <__assert_fail@plt+0xdb0>
   128b8:	mov	r2, #0
   128bc:	mov	r3, #0
   128c0:	mov	r1, #2
   128c4:	strd	r2, [sp]
   128c8:	str	r1, [sp, #8]
   128cc:	ldr	r0, [sp, #72]	; 0x48
   128d0:	bl	133cc <__assert_fail@plt+0x2044>
   128d4:	cmp	r4, #0
   128d8:	beq	128f0 <__assert_fail@plt+0x1568>
   128dc:	ldr	r3, [sp, #76]	; 0x4c
   128e0:	ldrb	r3, [r3]
   128e4:	cmp	r3, #0
   128e8:	beq	125cc <__assert_fail@plt+0x1244>
   128ec:	mov	r4, r6
   128f0:	orr	r4, r5, r4
   128f4:	tst	r4, #255	; 0xff
   128f8:	beq	12174 <__assert_fail@plt+0xdec>
   128fc:	b	122a0 <__assert_fail@plt+0xf18>
   12900:	ldr	r1, [r7, #64]	; 0x40
   12904:	mov	r0, r4
   12908:	sub	r3, r1, #1
   1290c:	cmn	r3, #-536870911	; 0xe0000001
   12910:	addls	r1, r1, #1
   12914:	ldrhi	r1, [pc, #888]	; 12c94 <__assert_fail@plt+0x190c>
   12918:	bl	16dc0 <_obstack_memory_used@@Base+0x304>
   1291c:	add	r3, sp, #16384	; 0x4000
   12920:	add	r3, r3, #184	; 0xb8
   12924:	mov	r5, #0
   12928:	ldrd	r2, [r3]
   1292c:	sub	r4, r4, r1
   12930:	cmp	r2, r4
   12934:	add	r2, sp, #16384	; 0x4000
   12938:	add	r2, r2, #188	; 0xbc
   1293c:	sbcs	r3, r3, r5
   12940:	ldr	r2, [r2]
   12944:	movlt	r3, #1
   12948:	movge	r3, #0
   1294c:	cmp	r2, #0
   12950:	movlt	r3, #0
   12954:	andge	r3, r3, #1
   12958:	cmp	r3, #0
   1295c:	beq	129a4 <__assert_fail@plt+0x161c>
   12960:	mov	r3, #1
   12964:	str	r3, [sp]
   12968:	mov	r2, r4
   1296c:	mov	r3, r5
   12970:	ldr	r0, [sp, #72]	; 0x48
   12974:	bl	11190 <lseek64@plt>
   12978:	cmp	r0, #0
   1297c:	sbcs	r3, r1, #0
   12980:	blt	129a4 <__assert_fail@plt+0x161c>
   12984:	add	r3, sp, #16384	; 0x4000
   12988:	add	r3, r3, #184	; 0xb8
   1298c:	ldrd	r2, [r3]
   12990:	subs	r2, r4, r2
   12994:	sbc	r3, r5, r3
   12998:	mov	r4, r2
   1299c:	mov	r5, r3
   129a0:	strd	r4, [sp, #112]	; 0x70
   129a4:	mov	r3, #0
   129a8:	mov	r2, #0
   129ac:	ldr	r5, [sp, #72]	; 0x48
   129b0:	mov	r1, #2
   129b4:	strd	r2, [sp]
   129b8:	str	r1, [sp, #8]
   129bc:	mov	r0, r5
   129c0:	bl	133cc <__assert_fail@plt+0x2044>
   129c4:	add	r3, sp, #140	; 0x8c
   129c8:	mov	r4, #16384	; 0x4000
   129cc:	mov	r7, r3
   129d0:	b	129ec <__assert_fail@plt+0x1664>
   129d4:	cmn	r0, #1
   129d8:	beq	12c0c <__assert_fail@plt+0x1884>
   129dc:	ldrd	r2, [sp, #112]	; 0x70
   129e0:	adds	r2, r2, r0
   129e4:	adc	r3, r3, #0
   129e8:	strd	r2, [sp, #112]	; 0x70
   129ec:	mov	r2, r4
   129f0:	mov	r1, r7
   129f4:	mov	r0, r5
   129f8:	bl	15aa0 <__assert_fail@plt+0x4718>
   129fc:	cmp	r0, #0
   12a00:	bne	129d4 <__assert_fail@plt+0x164c>
   12a04:	mov	r8, #0
   12a08:	mov	r9, #0
   12a0c:	mov	sl, r8
   12a10:	mov	fp, r9
   12a14:	strd	r8, [sp, #32]
   12a18:	ldr	r2, [sp, #112]	; 0x70
   12a1c:	ldr	r3, [sp, #116]	; 0x74
   12a20:	mov	r6, #1
   12a24:	b	121a8 <__assert_fail@plt+0xe20>
   12a28:	mov	r6, #1
   12a2c:	strd	r8, [sp, #32]
   12a30:	ldrd	r2, [sp, #40]	; 0x28
   12a34:	ldrd	r8, [sp, #56]	; 0x38
   12a38:	ldrd	r4, [sp, #32]
   12a3c:	cmp	r9, r3
   12a40:	cmpeq	r8, r2
   12a44:	movcc	r8, r2
   12a48:	movcc	r9, r3
   12a4c:	adds	r4, r4, r7
   12a50:	adc	r5, r5, #0
   12a54:	ldr	r2, [sp, #112]	; 0x70
   12a58:	strd	r4, [sp, #32]
   12a5c:	ldr	r3, [sp, #116]	; 0x74
   12a60:	b	121a8 <__assert_fail@plt+0xe20>
   12a64:	strd	r8, [sp, #32]
   12a68:	bl	11280 <__errno_location@plt>
   12a6c:	mov	r6, #0
   12a70:	ldr	r2, [sp, #92]	; 0x5c
   12a74:	mov	r1, #3
   12a78:	ldr	r4, [r0]
   12a7c:	mov	r0, r6
   12a80:	bl	155ec <__assert_fail@plt+0x4264>
   12a84:	mov	r1, r4
   12a88:	ldr	r2, [pc, #520]	; 12c98 <__assert_fail@plt+0x1910>
   12a8c:	mov	r3, r0
   12a90:	mov	r0, r6
   12a94:	bl	111c0 <error@plt>
   12a98:	b	12a30 <__assert_fail@plt+0x16a8>
   12a9c:	ldrd	r2, [sp, #104]	; 0x68
   12aa0:	adds	r2, r2, #1
   12aa4:	adc	r3, r3, #0
   12aa8:	strd	r2, [sp, #104]	; 0x68
   12aac:	ldrd	r2, [sp, #32]
   12ab0:	cmp	r3, fp
   12ab4:	cmpeq	r2, sl
   12ab8:	strdcc	sl, [sp, #32]
   12abc:	mov	sl, #0
   12ac0:	mov	fp, #0
   12ac4:	uxtb	r2, r9
   12ac8:	mov	r3, #0
   12acc:	adds	r4, r4, r2
   12ad0:	adc	r5, r5, r3
   12ad4:	mov	r9, r8
   12ad8:	cmp	r6, r7
   12adc:	bne	12558 <__assert_fail@plt+0x11d0>
   12ae0:	b	12518 <__assert_fail@plt+0x1190>
   12ae4:	adds	sl, sl, #1
   12ae8:	adc	fp, fp, #0
   12aec:	b	12ac4 <__assert_fail@plt+0x173c>
   12af0:	bic	sl, sl, #7
   12af4:	adds	sl, sl, #8
   12af8:	adc	fp, fp, #0
   12afc:	b	12ac4 <__assert_fail@plt+0x173c>
   12b00:	str	r3, [sp, #40]	; 0x28
   12b04:	bl	1122c <__ctype_b_loc@plt>
   12b08:	ldr	r3, [sp, #40]	; 0x28
   12b0c:	lsl	r2, r3, #1
   12b10:	ldr	r0, [r0]
   12b14:	ldrh	r2, [r0, r2]
   12b18:	tst	r2, #16384	; 0x4000
   12b1c:	beq	12ad8 <__assert_fail@plt+0x1750>
   12b20:	adds	sl, sl, #1
   12b24:	adc	fp, fp, #0
   12b28:	tst	r2, #8192	; 0x2000
   12b2c:	bne	12ac4 <__assert_fail@plt+0x173c>
   12b30:	mov	r0, r3
   12b34:	bl	112b0 <btowc@plt>
   12b38:	ldr	r3, [sp, #76]	; 0x4c
   12b3c:	ldrb	r3, [r3, #16]
   12b40:	cmp	r3, #0
   12b44:	movne	r9, r3
   12b48:	bne	12ad8 <__assert_fail@plt+0x1750>
   12b4c:	ldr	r3, [pc, #308]	; 12c88 <__assert_fail@plt+0x1900>
   12b50:	cmp	r0, r3
   12b54:	cmpne	r0, #160	; 0xa0
   12b58:	beq	12ac4 <__assert_fail@plt+0x173c>
   12b5c:	ldr	r2, [pc, #296]	; 12c8c <__assert_fail@plt+0x1904>
   12b60:	add	r3, r3, #40	; 0x28
   12b64:	cmp	r0, r2
   12b68:	cmpne	r0, r3
   12b6c:	movne	r9, #1
   12b70:	bne	12ad8 <__assert_fail@plt+0x1750>
   12b74:	b	12ac4 <__assert_fail@plt+0x173c>
   12b78:	mov	r2, #5
   12b7c:	ldr	r1, [pc, #280]	; 12c9c <__assert_fail@plt+0x1914>
   12b80:	mov	r0, r3
   12b84:	bl	11124 <dcgettext@plt>
   12b88:	str	r0, [sp, #92]	; 0x5c
   12b8c:	b	12100 <__assert_fail@plt+0xd78>
   12b90:	bl	11280 <__errno_location@plt>
   12b94:	mov	r6, #0
   12b98:	ldr	r2, [sp, #92]	; 0x5c
   12b9c:	mov	r1, #3
   12ba0:	mov	r7, r9
   12ba4:	ldr	r8, [r0]
   12ba8:	mov	r0, r6
   12bac:	bl	155ec <__assert_fail@plt+0x4264>
   12bb0:	mov	r1, r8
   12bb4:	ldr	r2, [pc, #220]	; 12c98 <__assert_fail@plt+0x1910>
   12bb8:	mov	r3, r0
   12bbc:	mov	r0, r6
   12bc0:	bl	111c0 <error@plt>
   12bc4:	ldrd	r8, [sp, #32]
   12bc8:	uxtb	r0, r7
   12bcc:	mov	r1, #0
   12bd0:	cmp	r9, fp
   12bd4:	cmpeq	r8, sl
   12bd8:	movcc	r9, fp
   12bdc:	movcc	r8, sl
   12be0:	adds	sl, r4, r0
   12be4:	adc	fp, r5, r1
   12be8:	ldr	r2, [sp, #112]	; 0x70
   12bec:	strd	sl, [sp, #32]
   12bf0:	ldr	r3, [sp, #116]	; 0x74
   12bf4:	mov	sl, #0
   12bf8:	mov	fp, #0
   12bfc:	b	121a8 <__assert_fail@plt+0xe20>
   12c00:	mov	r7, r9
   12c04:	mov	r6, #1
   12c08:	b	12bc4 <__assert_fail@plt+0x183c>
   12c0c:	bl	11280 <__errno_location@plt>
   12c10:	mov	r8, #0
   12c14:	mov	r9, #0
   12c18:	ldr	r2, [sp, #92]	; 0x5c
   12c1c:	mov	r1, #3
   12c20:	strd	r8, [sp, #32]
   12c24:	mov	sl, r8
   12c28:	mov	fp, r9
   12c2c:	ldr	r7, [r0]
   12c30:	mov	r0, #0
   12c34:	bl	155ec <__assert_fail@plt+0x4264>
   12c38:	ldr	r2, [pc, #88]	; 12c98 <__assert_fail@plt+0x1910>
   12c3c:	mov	r1, r7
   12c40:	mov	r3, r0
   12c44:	mov	r0, #0
   12c48:	bl	111c0 <error@plt>
   12c4c:	ldr	r2, [sp, #112]	; 0x70
   12c50:	ldr	r3, [sp, #116]	; 0x74
   12c54:	b	121a8 <__assert_fail@plt+0xe20>
   12c58:	mov	r3, #1
   12c5c:	str	r3, [sp]
   12c60:	mov	r2, #0
   12c64:	mov	r3, #0
   12c68:	ldr	r0, [sp, #72]	; 0x48
   12c6c:	bl	11190 <lseek64@plt>
   12c70:	add	r3, sp, #16384	; 0x4000
   12c74:	add	r3, r3, #184	; 0xb8
   12c78:	strd	r0, [r3]
   12c7c:	b	1262c <__assert_fail@plt+0x12a4>
   12c80:	andeq	r9, r2, r0, lsr #3
   12c84:	andeq	r7, r1, ip, asr lr
   12c88:	andeq	r2, r0, r7
   12c8c:	andeq	r2, r0, r0, rrx
   12c90:	andeq	r4, r0, r1
   12c94:	andeq	r0, r0, r1, lsl #4
   12c98:	andeq	r7, r1, r8, asr lr
   12c9c:	andeq	r7, r1, r0, asr #13
   12ca0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12ca4:	sub	sp, sp, #16384	; 0x4000
   12ca8:	sub	sp, sp, #44	; 0x2c
   12cac:	mov	r4, #0
   12cb0:	mov	r5, #0
   12cb4:	mov	r8, r1
   12cb8:	add	r7, sp, #36	; 0x24
   12cbc:	mov	sl, #16384	; 0x4000
   12cc0:	mov	r6, #10
   12cc4:	strd	r4, [sp, #8]
   12cc8:	str	r0, [sp, #20]
   12ccc:	str	r2, [sp, #24]
   12cd0:	str	r3, [sp, #28]
   12cd4:	strd	r4, [sp]
   12cd8:	mov	r2, sl
   12cdc:	mov	r1, r7
   12ce0:	mov	r0, r8
   12ce4:	bl	15aa0 <__assert_fail@plt+0x4718>
   12ce8:	subs	r9, r0, #0
   12cec:	beq	12ddc <__assert_fail@plt+0x1a54>
   12cf0:	cmn	r9, #1
   12cf4:	beq	12e04 <__assert_fail@plt+0x1a7c>
   12cf8:	ldrd	r2, [sp, #8]
   12cfc:	add	fp, r7, r9
   12d00:	adds	r2, r2, r9
   12d04:	adc	r3, r3, #0
   12d08:	cmp	r4, #0
   12d0c:	strd	r2, [sp, #8]
   12d10:	bne	12d78 <__assert_fail@plt+0x19f0>
   12d14:	cmp	fp, r7
   12d18:	beq	12e40 <__assert_fail@plt+0x1ab8>
   12d1c:	ldrd	r2, [sp]
   12d20:	mov	r0, r7
   12d24:	ldrb	r1, [r0], #1
   12d28:	sub	r1, r1, #10
   12d2c:	clz	r1, r1
   12d30:	lsr	r1, r1, #5
   12d34:	adds	r2, r2, r1
   12d38:	adc	r3, r3, #0
   12d3c:	cmp	fp, r0
   12d40:	bne	12d24 <__assert_fail@plt+0x199c>
   12d44:	ldr	r1, [pc, #252]	; 12e48 <__assert_fail@plt+0x1ac0>
   12d48:	ldrd	r4, [sp]
   12d4c:	strd	r2, [sp]
   12d50:	umull	r1, r0, r1, r9
   12d54:	subs	r4, r2, r4
   12d58:	sbc	r5, r3, r5
   12d5c:	mov	r1, #0
   12d60:	cmp	r5, r1
   12d64:	lsr	r0, r0, #3
   12d68:	cmpeq	r4, r0
   12d6c:	movls	r4, #1
   12d70:	movhi	r4, #0
   12d74:	b	12cd8 <__assert_fail@plt+0x1950>
   12d78:	strb	r6, [r7, r9]
   12d7c:	ldrd	r4, [sp]
   12d80:	mov	r0, r7
   12d84:	b	12d90 <__assert_fail@plt+0x1a08>
   12d88:	adds	r4, r4, #1
   12d8c:	adc	r5, r5, #0
   12d90:	mov	r1, r6
   12d94:	bl	11160 <rawmemchr@plt>
   12d98:	mov	r3, r0
   12d9c:	cmp	fp, r3
   12da0:	add	r0, r0, #1
   12da4:	bhi	12d88 <__assert_fail@plt+0x1a00>
   12da8:	ldr	r3, [pc, #152]	; 12e48 <__assert_fail@plt+0x1ac0>
   12dac:	ldrd	r0, [sp]
   12db0:	strd	r4, [sp]
   12db4:	umull	r3, r2, r3, r9
   12db8:	subs	r0, r4, r0
   12dbc:	sbc	r1, r5, r1
   12dc0:	mov	r3, #0
   12dc4:	cmp	r1, r3
   12dc8:	lsr	r2, r2, #3
   12dcc:	cmpeq	r0, r2
   12dd0:	movls	r4, #1
   12dd4:	movhi	r4, #0
   12dd8:	b	12cd8 <__assert_fail@plt+0x1950>
   12ddc:	ldr	r1, [sp, #28]
   12de0:	ldrd	r2, [sp, #8]
   12de4:	mov	r0, #1
   12de8:	strd	r2, [r1]
   12dec:	ldr	r1, [sp, #24]
   12df0:	ldrd	r2, [sp]
   12df4:	strd	r2, [r1]
   12df8:	add	sp, sp, #16384	; 0x4000
   12dfc:	add	sp, sp, #44	; 0x2c
   12e00:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12e04:	bl	11280 <__errno_location@plt>
   12e08:	ldr	r2, [sp, #20]
   12e0c:	mov	r1, #3
   12e10:	ldr	r4, [r0]
   12e14:	mov	r0, #0
   12e18:	bl	155ec <__assert_fail@plt+0x4264>
   12e1c:	mov	r1, r4
   12e20:	ldr	r2, [pc, #36]	; 12e4c <__assert_fail@plt+0x1ac4>
   12e24:	mov	r3, r0
   12e28:	mov	r0, #0
   12e2c:	bl	111c0 <error@plt>
   12e30:	mov	r0, #0
   12e34:	add	sp, sp, #16384	; 0x4000
   12e38:	add	sp, sp, #44	; 0x2c
   12e3c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12e40:	mov	r4, #1
   12e44:	b	12cd8 <__assert_fail@plt+0x1950>
   12e48:	stmhi	r8, {r0, r3, r7, fp, pc}
   12e4c:	andeq	r7, r1, r8, asr lr
   12e50:	cmp	r3, #0
   12e54:	cmpne	r2, #0
   12e58:	beq	12e60 <__assert_fail@plt+0x1ad8>
   12e5c:	b	12ca0 <__assert_fail@plt+0x1918>
   12e60:	mov	r0, #0
   12e64:	bx	lr
   12e68:	subs	r6, r0, #0
   12e6c:	push	{r7, lr}
   12e70:	sub	sp, sp, #56	; 0x38
   12e74:	beq	12eb0 <__assert_fail@plt+0x1b28>
   12e78:	ldr	r3, [pc, #688]	; 13130 <__assert_fail@plt+0x1da8>
   12e7c:	mov	r2, #5
   12e80:	ldr	r1, [pc, #684]	; 13134 <__assert_fail@plt+0x1dac>
   12e84:	mov	r0, #0
   12e88:	ldr	r4, [r3]
   12e8c:	bl	11124 <dcgettext@plt>
   12e90:	ldr	r3, [pc, #672]	; 13138 <__assert_fail@plt+0x1db0>
   12e94:	mov	r1, #1
   12e98:	ldr	r3, [r3]
   12e9c:	mov	r2, r0
   12ea0:	mov	r0, r4
   12ea4:	bl	112e0 <__fprintf_chk@plt>
   12ea8:	mov	r0, r6
   12eac:	bl	11238 <exit@plt>
   12eb0:	mov	r2, #5
   12eb4:	ldr	r1, [pc, #640]	; 1313c <__assert_fail@plt+0x1db4>
   12eb8:	bl	11124 <dcgettext@plt>
   12ebc:	ldr	r3, [pc, #628]	; 13138 <__assert_fail@plt+0x1db0>
   12ec0:	ldr	r7, [pc, #632]	; 13140 <__assert_fail@plt+0x1db8>
   12ec4:	ldr	r4, [pc, #632]	; 13144 <__assert_fail@plt+0x1dbc>
   12ec8:	ldr	r3, [r3]
   12ecc:	mov	r2, r3
   12ed0:	mov	r1, r0
   12ed4:	mov	r0, #1
   12ed8:	bl	112c8 <__printf_chk@plt>
   12edc:	mov	r2, #5
   12ee0:	ldr	r1, [pc, #608]	; 13148 <__assert_fail@plt+0x1dc0>
   12ee4:	mov	r0, r6
   12ee8:	bl	11124 <dcgettext@plt>
   12eec:	ldr	r1, [r7]
   12ef0:	bl	11070 <fputs_unlocked@plt>
   12ef4:	mov	r2, #5
   12ef8:	ldr	r1, [pc, #588]	; 1314c <__assert_fail@plt+0x1dc4>
   12efc:	mov	r0, r6
   12f00:	bl	11124 <dcgettext@plt>
   12f04:	ldr	r1, [r7]
   12f08:	bl	11070 <fputs_unlocked@plt>
   12f0c:	mov	r2, #5
   12f10:	ldr	r1, [pc, #568]	; 13150 <__assert_fail@plt+0x1dc8>
   12f14:	mov	r0, r6
   12f18:	bl	11124 <dcgettext@plt>
   12f1c:	ldr	r1, [r7]
   12f20:	bl	11070 <fputs_unlocked@plt>
   12f24:	mov	r2, #5
   12f28:	ldr	r1, [pc, #548]	; 13154 <__assert_fail@plt+0x1dcc>
   12f2c:	mov	r0, r6
   12f30:	bl	11124 <dcgettext@plt>
   12f34:	ldr	r1, [r7]
   12f38:	bl	11070 <fputs_unlocked@plt>
   12f3c:	mov	r2, #5
   12f40:	ldr	r1, [pc, #528]	; 13158 <__assert_fail@plt+0x1dd0>
   12f44:	mov	r0, r6
   12f48:	bl	11124 <dcgettext@plt>
   12f4c:	ldr	r1, [r7]
   12f50:	bl	11070 <fputs_unlocked@plt>
   12f54:	mov	r2, #5
   12f58:	ldr	r1, [pc, #508]	; 1315c <__assert_fail@plt+0x1dd4>
   12f5c:	mov	r0, r6
   12f60:	bl	11124 <dcgettext@plt>
   12f64:	ldr	r1, [r7]
   12f68:	bl	11070 <fputs_unlocked@plt>
   12f6c:	ldm	r4!, {r0, r1, r2, r3}
   12f70:	mov	lr, sp
   12f74:	stmia	lr!, {r0, r1, r2, r3}
   12f78:	ldm	r4!, {r0, r1, r2, r3}
   12f7c:	ldr	ip, [sp]
   12f80:	stmia	lr!, {r0, r1, r2, r3}
   12f84:	cmp	ip, #0
   12f88:	ldm	r4!, {r0, r1, r2, r3}
   12f8c:	stmia	lr!, {r0, r1, r2, r3}
   12f90:	ldm	r4, {r0, r1}
   12f94:	moveq	r4, sp
   12f98:	stm	lr, {r0, r1}
   12f9c:	beq	12fcc <__assert_fail@plt+0x1c44>
   12fa0:	ldr	r5, [pc, #440]	; 13160 <__assert_fail@plt+0x1dd8>
   12fa4:	mov	r4, sp
   12fa8:	b	12fb8 <__assert_fail@plt+0x1c30>
   12fac:	ldr	ip, [r4, #8]!
   12fb0:	cmp	ip, #0
   12fb4:	beq	12fcc <__assert_fail@plt+0x1c44>
   12fb8:	mov	r1, ip
   12fbc:	mov	r0, r5
   12fc0:	bl	11088 <strcmp@plt>
   12fc4:	cmp	r0, #0
   12fc8:	bne	12fac <__assert_fail@plt+0x1c24>
   12fcc:	ldr	r4, [r4, #4]
   12fd0:	mov	r2, #5
   12fd4:	cmp	r4, #0
   12fd8:	ldr	r1, [pc, #388]	; 13164 <__assert_fail@plt+0x1ddc>
   12fdc:	beq	13084 <__assert_fail@plt+0x1cfc>
   12fe0:	mov	r0, #0
   12fe4:	bl	11124 <dcgettext@plt>
   12fe8:	ldr	r3, [pc, #376]	; 13168 <__assert_fail@plt+0x1de0>
   12fec:	ldr	r2, [pc, #376]	; 1316c <__assert_fail@plt+0x1de4>
   12ff0:	mov	r1, r0
   12ff4:	mov	r0, #1
   12ff8:	bl	112c8 <__printf_chk@plt>
   12ffc:	mov	r1, #0
   13000:	mov	r0, #5
   13004:	bl	11310 <setlocale@plt>
   13008:	cmp	r0, #0
   1300c:	ldreq	r5, [pc, #332]	; 13160 <__assert_fail@plt+0x1dd8>
   13010:	beq	1302c <__assert_fail@plt+0x1ca4>
   13014:	mov	r2, #3
   13018:	ldr	r1, [pc, #336]	; 13170 <__assert_fail@plt+0x1de8>
   1301c:	bl	11364 <strncmp@plt>
   13020:	ldr	r5, [pc, #312]	; 13160 <__assert_fail@plt+0x1dd8>
   13024:	cmp	r0, #0
   13028:	bne	13114 <__assert_fail@plt+0x1d8c>
   1302c:	mov	r2, #5
   13030:	ldr	r1, [pc, #316]	; 13174 <__assert_fail@plt+0x1dec>
   13034:	mov	r0, #0
   13038:	bl	11124 <dcgettext@plt>
   1303c:	ldr	r3, [pc, #284]	; 13160 <__assert_fail@plt+0x1dd8>
   13040:	ldr	r2, [pc, #288]	; 13168 <__assert_fail@plt+0x1de0>
   13044:	mov	r1, r0
   13048:	mov	r0, #1
   1304c:	bl	112c8 <__printf_chk@plt>
   13050:	mov	r2, #5
   13054:	ldr	r1, [pc, #284]	; 13178 <__assert_fail@plt+0x1df0>
   13058:	mov	r0, #0
   1305c:	bl	11124 <dcgettext@plt>
   13060:	ldr	r2, [pc, #276]	; 1317c <__assert_fail@plt+0x1df4>
   13064:	cmp	r4, r5
   13068:	ldr	r3, [pc, #272]	; 13180 <__assert_fail@plt+0x1df8>
   1306c:	movne	r3, r2
   13070:	mov	r1, r0
   13074:	mov	r2, r4
   13078:	mov	r0, #1
   1307c:	bl	112c8 <__printf_chk@plt>
   13080:	b	12ea8 <__assert_fail@plt+0x1b20>
   13084:	mov	r0, r4
   13088:	bl	11124 <dcgettext@plt>
   1308c:	ldr	r3, [pc, #212]	; 13168 <__assert_fail@plt+0x1de0>
   13090:	ldr	r2, [pc, #212]	; 1316c <__assert_fail@plt+0x1de4>
   13094:	mov	r1, r0
   13098:	mov	r0, #1
   1309c:	bl	112c8 <__printf_chk@plt>
   130a0:	mov	r1, r4
   130a4:	mov	r0, #5
   130a8:	bl	11310 <setlocale@plt>
   130ac:	cmp	r0, #0
   130b0:	beq	130c8 <__assert_fail@plt+0x1d40>
   130b4:	mov	r2, #3
   130b8:	ldr	r1, [pc, #176]	; 13170 <__assert_fail@plt+0x1de8>
   130bc:	bl	11364 <strncmp@plt>
   130c0:	cmp	r0, #0
   130c4:	bne	1310c <__assert_fail@plt+0x1d84>
   130c8:	mov	r2, #5
   130cc:	ldr	r1, [pc, #160]	; 13174 <__assert_fail@plt+0x1dec>
   130d0:	mov	r0, #0
   130d4:	bl	11124 <dcgettext@plt>
   130d8:	ldr	r3, [pc, #128]	; 13160 <__assert_fail@plt+0x1dd8>
   130dc:	ldr	r2, [pc, #132]	; 13168 <__assert_fail@plt+0x1de0>
   130e0:	mov	r4, r3
   130e4:	mov	r1, r0
   130e8:	mov	r0, #1
   130ec:	bl	112c8 <__printf_chk@plt>
   130f0:	ldr	r1, [pc, #128]	; 13178 <__assert_fail@plt+0x1df0>
   130f4:	mov	r2, #5
   130f8:	mov	r0, #0
   130fc:	bl	11124 <dcgettext@plt>
   13100:	ldr	r3, [pc, #120]	; 13180 <__assert_fail@plt+0x1df8>
   13104:	mov	r1, r0
   13108:	b	13074 <__assert_fail@plt+0x1cec>
   1310c:	ldr	r5, [pc, #76]	; 13160 <__assert_fail@plt+0x1dd8>
   13110:	mov	r4, r5
   13114:	mov	r2, #5
   13118:	ldr	r1, [pc, #100]	; 13184 <__assert_fail@plt+0x1dfc>
   1311c:	mov	r0, #0
   13120:	bl	11124 <dcgettext@plt>
   13124:	ldr	r1, [r7]
   13128:	bl	11070 <fputs_unlocked@plt>
   1312c:	b	1302c <__assert_fail@plt+0x1ca4>
   13130:	andeq	r9, r2, r8, lsl #3
   13134:	ldrdeq	r7, [r1], -r4
   13138:	strdeq	r9, [r2], -r0
   1313c:	strdeq	r7, [r1], -ip
   13140:	muleq	r2, r4, r1
   13144:	ldrdeq	r7, [r1], -ip
   13148:	andeq	r7, r1, r4, asr #14
   1314c:	andeq	r7, r1, r8, lsl #16
   13150:	andeq	r7, r1, r0, asr #16
   13154:	andeq	r7, r1, r0, ror r9
   13158:	andeq	r7, r1, r0, lsr #21
   1315c:	ldrdeq	r7, [r1], -r0
   13160:	ldrdeq	r7, [r1], -r0
   13164:	andeq	r7, r1, r8, lsl #22
   13168:	andeq	r7, r1, r0, lsr #22
   1316c:	andeq	r7, r1, r8, asr #22
   13170:	andeq	r7, r1, r8, asr fp
   13174:	andeq	r7, r1, r4, lsr #23
   13178:	andeq	r7, r1, r0, asr #23
   1317c:	muleq	r1, ip, sl
   13180:	andeq	r7, r1, ip, lsl #27
   13184:	andeq	r7, r1, ip, asr fp
   13188:	push	{r4, lr}
   1318c:	mov	r4, r0
   13190:	mov	r0, #24
   13194:	bl	165f8 <__assert_fail@plt+0x5270>
   13198:	cmp	r0, #0
   1319c:	movne	r3, #0
   131a0:	strne	r4, [r0, #16]
   131a4:	strne	r4, [r0, #20]
   131a8:	strne	r3, [r0]
   131ac:	pop	{r4, pc}
   131b0:	push	{r4, lr}
   131b4:	mov	r4, r0
   131b8:	mov	r0, #24
   131bc:	bl	165f8 <__assert_fail@plt+0x5270>
   131c0:	cmp	r0, #0
   131c4:	popeq	{r4, pc}
   131c8:	mov	r3, #0
   131cc:	str	r4, [r0]
   131d0:	str	r3, [r0, #8]
   131d4:	str	r3, [r0, #12]
   131d8:	str	r3, [r0, #4]
   131dc:	str	r3, [r0, #16]
   131e0:	pop	{r4, pc}
   131e4:	ldr	r3, [r0]
   131e8:	cmp	r3, #0
   131ec:	beq	13234 <__assert_fail@plt+0x1eac>
   131f0:	push	{r4, r5, r6, lr}
   131f4:	mov	r2, #0
   131f8:	mov	r5, r1
   131fc:	mov	r4, r0
   13200:	add	r1, r0, #12
   13204:	add	r0, r0, #8
   13208:	bl	1134c <getdelim@plt>
   1320c:	cmp	r0, #0
   13210:	blt	13260 <__assert_fail@plt+0x1ed8>
   13214:	ldr	r3, [r4, #4]
   13218:	mov	r2, #1
   1321c:	add	r3, r3, r2
   13220:	str	r2, [r5]
   13224:	ldr	r2, [r4, #8]
   13228:	str	r3, [r4, #4]
   1322c:	mov	r0, r2
   13230:	pop	{r4, r5, r6, pc}
   13234:	ldr	r3, [r0, #20]
   13238:	ldr	r2, [r3]
   1323c:	cmp	r2, #0
   13240:	moveq	r3, #2
   13244:	addne	r3, r3, #4
   13248:	movne	ip, #1
   1324c:	strne	ip, [r1]
   13250:	streq	r3, [r1]
   13254:	strne	r3, [r0, #20]
   13258:	mov	r0, r2
   1325c:	bx	lr
   13260:	ldr	r0, [r4]
   13264:	bl	11244 <feof@plt>
   13268:	mov	r2, #0
   1326c:	cmp	r0, r2
   13270:	movne	r0, #2
   13274:	moveq	r0, #4
   13278:	str	r0, [r5]
   1327c:	b	1322c <__assert_fail@plt+0x1ea4>
   13280:	ldr	r3, [r0]
   13284:	cmp	r3, #0
   13288:	ldreq	r3, [r0, #20]
   1328c:	ldrne	r0, [r0, #4]
   13290:	ldreq	r0, [r0, #16]
   13294:	subeq	r0, r3, r0
   13298:	asreq	r0, r0, #2
   1329c:	bx	lr
   132a0:	ldr	r3, [r0]
   132a4:	push	{r4, lr}
   132a8:	cmp	r3, #0
   132ac:	mov	r4, r0
   132b0:	beq	132bc <__assert_fail@plt+0x1f34>
   132b4:	ldr	r0, [r0, #8]
   132b8:	bl	1350c <__assert_fail@plt+0x2184>
   132bc:	mov	r0, r4
   132c0:	pop	{r4, lr}
   132c4:	b	1350c <__assert_fail@plt+0x2184>
   132c8:	ldr	r3, [pc, #4]	; 132d4 <__assert_fail@plt+0x1f4c>
   132cc:	str	r0, [r3]
   132d0:	bx	lr
   132d4:	andeq	r9, r2, r8, ror #3
   132d8:	ldr	r3, [pc, #4]	; 132e4 <__assert_fail@plt+0x1f5c>
   132dc:	strb	r0, [r3, #4]
   132e0:	bx	lr
   132e4:	andeq	r9, r2, r8, ror #3
   132e8:	ldr	r3, [pc, #192]	; 133b0 <__assert_fail@plt+0x2028>
   132ec:	push	{r4, r5, r6, lr}
   132f0:	sub	sp, sp, #8
   132f4:	ldr	r0, [r3]
   132f8:	bl	16680 <__assert_fail@plt+0x52f8>
   132fc:	cmp	r0, #0
   13300:	beq	13324 <__assert_fail@plt+0x1f9c>
   13304:	ldr	r4, [pc, #168]	; 133b4 <__assert_fail@plt+0x202c>
   13308:	ldrb	r3, [r4, #4]
   1330c:	cmp	r3, #0
   13310:	beq	13340 <__assert_fail@plt+0x1fb8>
   13314:	bl	11280 <__errno_location@plt>
   13318:	ldr	r3, [r0]
   1331c:	cmp	r3, #32
   13320:	bne	13340 <__assert_fail@plt+0x1fb8>
   13324:	ldr	r3, [pc, #140]	; 133b8 <__assert_fail@plt+0x2030>
   13328:	ldr	r0, [r3]
   1332c:	bl	16680 <__assert_fail@plt+0x52f8>
   13330:	cmp	r0, #0
   13334:	bne	13388 <__assert_fail@plt+0x2000>
   13338:	add	sp, sp, #8
   1333c:	pop	{r4, r5, r6, pc}
   13340:	mov	r2, #5
   13344:	ldr	r1, [pc, #112]	; 133bc <__assert_fail@plt+0x2034>
   13348:	mov	r0, #0
   1334c:	bl	11124 <dcgettext@plt>
   13350:	ldr	r4, [r4]
   13354:	cmp	r4, #0
   13358:	mov	r5, r0
   1335c:	beq	13394 <__assert_fail@plt+0x200c>
   13360:	bl	11280 <__errno_location@plt>
   13364:	ldr	r6, [r0]
   13368:	mov	r0, r4
   1336c:	bl	155d8 <__assert_fail@plt+0x4250>
   13370:	mov	r1, r6
   13374:	str	r5, [sp]
   13378:	ldr	r2, [pc, #64]	; 133c0 <__assert_fail@plt+0x2038>
   1337c:	mov	r3, r0
   13380:	mov	r0, #0
   13384:	bl	111c0 <error@plt>
   13388:	ldr	r3, [pc, #52]	; 133c4 <__assert_fail@plt+0x203c>
   1338c:	ldr	r0, [r3]
   13390:	bl	110e8 <_exit@plt>
   13394:	bl	11280 <__errno_location@plt>
   13398:	mov	r3, r5
   1339c:	ldr	r2, [pc, #36]	; 133c8 <__assert_fail@plt+0x2040>
   133a0:	ldr	r1, [r0]
   133a4:	mov	r0, r4
   133a8:	bl	111c0 <error@plt>
   133ac:	b	13388 <__assert_fail@plt+0x2000>
   133b0:	muleq	r2, r4, r1
   133b4:	andeq	r9, r2, r8, ror #3
   133b8:	andeq	r9, r2, r8, lsl #3
   133bc:	andeq	r7, r1, r8, asr #28
   133c0:	andeq	r7, r1, r4, asr lr
   133c4:	andeq	r9, r2, ip, lsr #2
   133c8:	andeq	r7, r1, r8, asr lr
   133cc:	push	{r4, r5}
   133d0:	pop	{r4, r5}
   133d4:	b	11094 <posix_fadvise64@plt>
   133d8:	cmp	r0, #0
   133dc:	bxeq	lr
   133e0:	push	{r4, lr}
   133e4:	sub	sp, sp, #16
   133e8:	mov	r4, r1
   133ec:	bl	112d4 <fileno@plt>
   133f0:	mov	r2, #0
   133f4:	mov	r3, #0
   133f8:	str	r4, [sp, #8]
   133fc:	strd	r2, [sp]
   13400:	bl	11094 <posix_fadvise64@plt>
   13404:	add	sp, sp, #16
   13408:	pop	{r4, pc}
   1340c:	push	{r4, r5, lr}
   13410:	sub	sp, sp, #12
   13414:	mov	r4, r0
   13418:	bl	112d4 <fileno@plt>
   1341c:	cmp	r0, #0
   13420:	mov	r0, r4
   13424:	blt	134a0 <__assert_fail@plt+0x2118>
   13428:	bl	11208 <__freading@plt>
   1342c:	cmp	r0, #0
   13430:	bne	1346c <__assert_fail@plt+0x20e4>
   13434:	mov	r0, r4
   13438:	bl	134ac <__assert_fail@plt+0x2124>
   1343c:	cmp	r0, #0
   13440:	beq	1349c <__assert_fail@plt+0x2114>
   13444:	bl	11280 <__errno_location@plt>
   13448:	mov	r5, r0
   1344c:	mov	r0, r4
   13450:	ldr	r4, [r5]
   13454:	bl	112ec <fclose@plt>
   13458:	cmp	r4, #0
   1345c:	mvnne	r0, #0
   13460:	strne	r4, [r5]
   13464:	add	sp, sp, #12
   13468:	pop	{r4, r5, pc}
   1346c:	mov	r0, r4
   13470:	bl	112d4 <fileno@plt>
   13474:	mov	r3, #1
   13478:	str	r3, [sp]
   1347c:	mov	r2, #0
   13480:	mov	r3, #0
   13484:	bl	11190 <lseek64@plt>
   13488:	mvn	r3, #0
   1348c:	mvn	r2, #0
   13490:	cmp	r1, r3
   13494:	cmpeq	r0, r2
   13498:	bne	13434 <__assert_fail@plt+0x20ac>
   1349c:	mov	r0, r4
   134a0:	add	sp, sp, #12
   134a4:	pop	{r4, r5, lr}
   134a8:	b	112ec <fclose@plt>
   134ac:	push	{r4, lr}
   134b0:	subs	r4, r0, #0
   134b4:	sub	sp, sp, #8
   134b8:	beq	134d4 <__assert_fail@plt+0x214c>
   134bc:	bl	11208 <__freading@plt>
   134c0:	cmp	r0, #0
   134c4:	beq	134d4 <__assert_fail@plt+0x214c>
   134c8:	ldr	r3, [r4]
   134cc:	tst	r3, #256	; 0x100
   134d0:	bne	134e4 <__assert_fail@plt+0x215c>
   134d4:	mov	r0, r4
   134d8:	add	sp, sp, #8
   134dc:	pop	{r4, lr}
   134e0:	b	110ac <fflush@plt>
   134e4:	mov	r3, #1
   134e8:	str	r3, [sp]
   134ec:	mov	r2, #0
   134f0:	mov	r3, #0
   134f4:	mov	r0, r4
   134f8:	bl	13564 <__assert_fail@plt+0x21dc>
   134fc:	mov	r0, r4
   13500:	add	sp, sp, #8
   13504:	pop	{r4, lr}
   13508:	b	110ac <fflush@plt>
   1350c:	push	{r4, r5, lr}
   13510:	sub	sp, sp, #12
   13514:	mov	r5, r0
   13518:	bl	11280 <__errno_location@plt>
   1351c:	mov	r2, #0
   13520:	mov	r4, r0
   13524:	ldr	r3, [r0]
   13528:	str	r2, [r4]
   1352c:	mov	r0, r5
   13530:	str	r3, [sp]
   13534:	str	r3, [sp, #4]
   13538:	bl	110d0 <free@plt>
   1353c:	ldr	r3, [r4]
   13540:	add	r2, sp, #8
   13544:	cmp	r3, #0
   13548:	moveq	r3, #4
   1354c:	movne	r3, #0
   13550:	add	r3, r2, r3
   13554:	ldr	r3, [r3, #-8]
   13558:	str	r3, [r4]
   1355c:	add	sp, sp, #12
   13560:	pop	{r4, r5, pc}
   13564:	push	{r4, r5, r6, r7, r8, lr}
   13568:	sub	sp, sp, #8
   1356c:	ldmib	r0, {ip, lr}
   13570:	mov	r4, r0
   13574:	ldr	r5, [sp, #32]
   13578:	cmp	lr, ip
   1357c:	beq	13594 <__assert_fail@plt+0x220c>
   13580:	str	r5, [sp, #32]
   13584:	mov	r0, r4
   13588:	add	sp, sp, #8
   1358c:	pop	{r4, r5, r6, r7, r8, lr}
   13590:	b	112f8 <fseeko64@plt>
   13594:	ldr	lr, [r0, #20]
   13598:	ldr	ip, [r0, #16]
   1359c:	cmp	lr, ip
   135a0:	bne	13580 <__assert_fail@plt+0x21f8>
   135a4:	ldr	r8, [r0, #36]	; 0x24
   135a8:	cmp	r8, #0
   135ac:	bne	13580 <__assert_fail@plt+0x21f8>
   135b0:	mov	r6, r2
   135b4:	mov	r7, r3
   135b8:	bl	112d4 <fileno@plt>
   135bc:	mov	r2, r6
   135c0:	mov	r3, r7
   135c4:	str	r5, [sp]
   135c8:	bl	11190 <lseek64@plt>
   135cc:	mvn	r3, #0
   135d0:	mvn	r2, #0
   135d4:	cmp	r1, r3
   135d8:	cmpeq	r0, r2
   135dc:	beq	135fc <__assert_fail@plt+0x2274>
   135e0:	ldr	r3, [r4]
   135e4:	strd	r0, [r4, #80]	; 0x50
   135e8:	mov	r0, r8
   135ec:	bic	r3, r3, #16
   135f0:	str	r3, [r4]
   135f4:	add	sp, sp, #8
   135f8:	pop	{r4, r5, r6, r7, r8, pc}
   135fc:	mvn	r0, #0
   13600:	b	135f4 <__assert_fail@plt+0x226c>
   13604:	push	{r4, r5, r6, r8, r9, lr}
   13608:	mov	r4, r0
   1360c:	mov	r5, r1
   13610:	add	r6, r2, #20
   13614:	mov	r8, #10
   13618:	mov	r9, #0
   1361c:	mov	r3, #0
   13620:	strb	r3, [r2, #20]
   13624:	mov	r0, r4
   13628:	mov	r1, r5
   1362c:	mov	r2, r8
   13630:	mov	r3, r9
   13634:	bl	173d8 <_obstack_memory_used@@Base+0x91c>
   13638:	mov	r0, r4
   1363c:	mov	r1, r5
   13640:	mov	r3, r9
   13644:	add	r2, r2, #48	; 0x30
   13648:	strb	r2, [r6, #-1]!
   1364c:	mov	r2, r8
   13650:	bl	173d8 <_obstack_memory_used@@Base+0x91c>
   13654:	mov	r4, r0
   13658:	mov	r5, r1
   1365c:	orrs	r3, r4, r5
   13660:	bne	13624 <__assert_fail@plt+0x229c>
   13664:	mov	r0, r6
   13668:	pop	{r4, r5, r6, r8, r9, pc}
   1366c:	push	{r4, lr}
   13670:	mov	r4, r0
   13674:	bl	110b8 <wcwidth@plt>
   13678:	cmp	r0, #0
   1367c:	popge	{r4, pc}
   13680:	mov	r0, r4
   13684:	bl	11154 <iswcntrl@plt>
   13688:	clz	r0, r0
   1368c:	lsr	r0, r0, #5
   13690:	pop	{r4, pc}
   13694:	mov	r3, r1
   13698:	push	{r4, r5, r6, lr}
   1369c:	mov	r4, r1
   136a0:	ldr	r1, [r3], #16
   136a4:	mov	r5, r0
   136a8:	cmp	r1, r3
   136ac:	strne	r1, [r0]
   136b0:	beq	136d4 <__assert_fail@plt+0x234c>
   136b4:	ldrb	r3, [r4, #8]
   136b8:	ldr	r2, [r4, #4]
   136bc:	cmp	r3, #0
   136c0:	strb	r3, [r5, #8]
   136c4:	ldrne	r3, [r4, #12]
   136c8:	str	r2, [r5, #4]
   136cc:	strne	r3, [r5, #12]
   136d0:	pop	{r4, r5, r6, pc}
   136d4:	add	r3, r0, #16
   136d8:	mov	r0, r3
   136dc:	ldr	r2, [r4, #4]
   136e0:	bl	110f4 <memcpy@plt>
   136e4:	str	r0, [r5]
   136e8:	b	136b4 <__assert_fail@plt+0x232c>
   136ec:	ldr	r3, [pc, #20]	; 13708 <__assert_fail@plt+0x2380>
   136f0:	lsr	r2, r0, #5
   136f4:	and	r0, r0, #31
   136f8:	ldr	r3, [r3, r2, lsl #2]
   136fc:	lsr	r0, r3, r0
   13700:	and	r0, r0, #1
   13704:	bx	lr
   13708:	andeq	r7, r1, ip, asr lr
   1370c:	push	{r4, r5, r6, r7, lr}
   13710:	subs	r6, r0, #0
   13714:	sub	sp, sp, #12
   13718:	addeq	r6, sp, #4
   1371c:	mov	r0, r6
   13720:	mov	r5, r2
   13724:	mov	r7, r1
   13728:	bl	111b4 <mbrtowc@plt>
   1372c:	cmp	r5, #0
   13730:	cmnne	r0, #3
   13734:	mov	r4, r0
   13738:	bls	13754 <__assert_fail@plt+0x23cc>
   1373c:	mov	r0, #0
   13740:	bl	166fc <__assert_fail@plt+0x5374>
   13744:	cmp	r0, #0
   13748:	moveq	r4, #1
   1374c:	ldrbeq	r3, [r7]
   13750:	streq	r3, [r6]
   13754:	mov	r0, r4
   13758:	add	sp, sp, #12
   1375c:	pop	{r4, r5, r6, r7, pc}
   13760:	push	{lr}		; (str lr, [sp, #-4]!)
   13764:	vpush	{d8}
   13768:	mov	r0, #85	; 0x55
   1376c:	sub	sp, sp, #68	; 0x44
   13770:	bl	11130 <sysconf@plt>
   13774:	vmov	s15, r0
   13778:	mov	r0, #30
   1377c:	vcvt.f64.s32	d8, s15
   13780:	bl	11130 <sysconf@plt>
   13784:	vldr	d7, [pc, #100]	; 137f0 <__assert_fail@plt+0x2468>
   13788:	vcmpe.f64	d8, d7
   1378c:	vmrs	APSR_nzcv, fpscr
   13790:	blt	137b8 <__assert_fail@plt+0x2430>
   13794:	vmov	s13, r0
   13798:	vcvt.f64.s32	d0, s13
   1379c:	vcmpe.f64	d0, d7
   137a0:	vmrs	APSR_nzcv, fpscr
   137a4:	blt	137b8 <__assert_fail@plt+0x2430>
   137a8:	vmul.f64	d0, d0, d8
   137ac:	add	sp, sp, #68	; 0x44
   137b0:	vpop	{d8}
   137b4:	pop	{pc}		; (ldr pc, [sp], #4)
   137b8:	mov	r0, sp
   137bc:	bl	111e4 <sysinfo@plt>
   137c0:	cmp	r0, #0
   137c4:	beq	137d8 <__assert_fail@plt+0x2450>
   137c8:	vldr	d0, [pc, #40]	; 137f8 <__assert_fail@plt+0x2470>
   137cc:	add	sp, sp, #68	; 0x44
   137d0:	vpop	{d8}
   137d4:	pop	{pc}		; (ldr pc, [sp], #4)
   137d8:	vldr	s15, [sp, #16]
   137dc:	vcvt.f64.u32	d0, s15
   137e0:	vldr	s15, [sp, #52]	; 0x34
   137e4:	vcvt.f64.u32	d8, s15
   137e8:	b	137a8 <__assert_fail@plt+0x2420>
   137ec:	nop			; (mov r0, r0)
	...
   137fc:	orrsmi	r0, r0, r0
   13800:	push	{lr}		; (str lr, [sp, #-4]!)
   13804:	vpush	{d8}
   13808:	mov	r0, #86	; 0x56
   1380c:	sub	sp, sp, #68	; 0x44
   13810:	bl	11130 <sysconf@plt>
   13814:	vmov	s15, r0
   13818:	mov	r0, #30
   1381c:	vcvt.f64.s32	d8, s15
   13820:	bl	11130 <sysconf@plt>
   13824:	vldr	d7, [pc, #116]	; 138a0 <__assert_fail@plt+0x2518>
   13828:	vcmpe.f64	d8, d7
   1382c:	vmrs	APSR_nzcv, fpscr
   13830:	blt	13858 <__assert_fail@plt+0x24d0>
   13834:	vmov	s13, r0
   13838:	vcvt.f64.s32	d0, s13
   1383c:	vcmpe.f64	d0, d7
   13840:	vmrs	APSR_nzcv, fpscr
   13844:	blt	13858 <__assert_fail@plt+0x24d0>
   13848:	vmul.f64	d0, d0, d8
   1384c:	add	sp, sp, #68	; 0x44
   13850:	vpop	{d8}
   13854:	pop	{pc}		; (ldr pc, [sp], #4)
   13858:	mov	r0, sp
   1385c:	bl	111e4 <sysinfo@plt>
   13860:	cmp	r0, #0
   13864:	bne	13894 <__assert_fail@plt+0x250c>
   13868:	vldr	s15, [sp, #20]
   1386c:	vldr	s13, [sp, #52]	; 0x34
   13870:	vcvt.f64.u32	d0, s15
   13874:	vldr	s15, [sp, #28]
   13878:	vcvt.f64.u32	d8, s13
   1387c:	vcvt.f64.u32	d7, s15
   13880:	vadd.f64	d0, d0, d7
   13884:	vmul.f64	d0, d0, d8
   13888:	add	sp, sp, #68	; 0x44
   1388c:	vpop	{d8}
   13890:	pop	{pc}		; (ldr pc, [sp], #4)
   13894:	bl	13760 <__assert_fail@plt+0x23d8>
   13898:	vldr	d8, [pc, #8]	; 138a8 <__assert_fail@plt+0x2520>
   1389c:	b	13848 <__assert_fail@plt+0x24c0>
	...
   138ac:	svccc	0x00d00000
   138b0:	push	{r4, r5, r6, lr}
   138b4:	subs	r4, r0, #0
   138b8:	beq	1392c <__assert_fail@plt+0x25a4>
   138bc:	mov	r1, #47	; 0x2f
   138c0:	bl	1131c <strrchr@plt>
   138c4:	subs	r5, r0, #0
   138c8:	beq	13918 <__assert_fail@plt+0x2590>
   138cc:	add	r6, r5, #1
   138d0:	sub	r3, r6, r4
   138d4:	cmp	r3, #6
   138d8:	ble	13918 <__assert_fail@plt+0x2590>
   138dc:	mov	r2, #7
   138e0:	ldr	r1, [pc, #96]	; 13948 <__assert_fail@plt+0x25c0>
   138e4:	sub	r0, r5, #6
   138e8:	bl	11364 <strncmp@plt>
   138ec:	cmp	r0, #0
   138f0:	bne	13918 <__assert_fail@plt+0x2590>
   138f4:	mov	r2, #3
   138f8:	ldr	r1, [pc, #76]	; 1394c <__assert_fail@plt+0x25c4>
   138fc:	mov	r0, r6
   13900:	bl	11364 <strncmp@plt>
   13904:	cmp	r0, #0
   13908:	movne	r4, r6
   1390c:	ldreq	r3, [pc, #60]	; 13950 <__assert_fail@plt+0x25c8>
   13910:	addeq	r4, r5, #4
   13914:	streq	r4, [r3]
   13918:	ldr	r2, [pc, #52]	; 13954 <__assert_fail@plt+0x25cc>
   1391c:	ldr	r3, [pc, #52]	; 13958 <__assert_fail@plt+0x25d0>
   13920:	str	r4, [r2]
   13924:	str	r4, [r3]
   13928:	pop	{r4, r5, r6, pc}
   1392c:	ldr	r3, [pc, #40]	; 1395c <__assert_fail@plt+0x25d4>
   13930:	mov	r2, #55	; 0x37
   13934:	mov	r1, #1
   13938:	ldr	r3, [r3]
   1393c:	ldr	r0, [pc, #28]	; 13960 <__assert_fail@plt+0x25d8>
   13940:	bl	11184 <fwrite@plt>
   13944:	bl	11370 <abort@plt>
   13948:			; <UNDEFINED> instruction: 0x00017eb4
   1394c:			; <UNDEFINED> instruction: 0x00017ebc
   13950:	andeq	r9, r2, r8, ror r1
   13954:	strdeq	r9, [r2], -r0
   13958:	andeq	r9, r2, ip, ror r1
   1395c:	andeq	r9, r2, r8, lsl #3
   13960:	andeq	r7, r1, ip, ror lr
   13964:	push	{r4, r5, r6, lr}
   13968:	mov	r2, #48	; 0x30
   1396c:	mov	r4, r1
   13970:	mov	r1, #0
   13974:	mov	r5, r0
   13978:	bl	112a4 <memset@plt>
   1397c:	cmp	r4, #10
   13980:	beq	13990 <__assert_fail@plt+0x2608>
   13984:	str	r4, [r5]
   13988:	mov	r0, r5
   1398c:	pop	{r4, r5, r6, pc}
   13990:	bl	11370 <abort@plt>
   13994:	push	{r4, r5, r6, lr}
   13998:	mov	r4, r0
   1399c:	mov	r5, r1
   139a0:	bl	16758 <__assert_fail@plt+0x53d0>
   139a4:	ldrb	r3, [r0]
   139a8:	bic	r3, r3, #32
   139ac:	cmp	r3, #85	; 0x55
   139b0:	bne	13a10 <__assert_fail@plt+0x2688>
   139b4:	ldrb	r3, [r0, #1]
   139b8:	bic	r3, r3, #32
   139bc:	cmp	r3, #84	; 0x54
   139c0:	bne	13a4c <__assert_fail@plt+0x26c4>
   139c4:	ldrb	r3, [r0, #2]
   139c8:	bic	r3, r3, #32
   139cc:	cmp	r3, #70	; 0x46
   139d0:	bne	13a4c <__assert_fail@plt+0x26c4>
   139d4:	ldrb	r3, [r0, #3]
   139d8:	cmp	r3, #45	; 0x2d
   139dc:	bne	13a4c <__assert_fail@plt+0x26c4>
   139e0:	ldrb	r3, [r0, #4]
   139e4:	cmp	r3, #56	; 0x38
   139e8:	bne	13a4c <__assert_fail@plt+0x26c4>
   139ec:	ldrb	r3, [r0, #5]
   139f0:	cmp	r3, #0
   139f4:	bne	13a4c <__assert_fail@plt+0x26c4>
   139f8:	ldrb	r2, [r4]
   139fc:	ldr	r3, [pc, #152]	; 13a9c <__assert_fail@plt+0x2714>
   13a00:	ldr	r0, [pc, #152]	; 13aa0 <__assert_fail@plt+0x2718>
   13a04:	cmp	r2, #96	; 0x60
   13a08:	movne	r0, r3
   13a0c:	pop	{r4, r5, r6, pc}
   13a10:	cmp	r3, #71	; 0x47
   13a14:	bne	13a4c <__assert_fail@plt+0x26c4>
   13a18:	ldrb	r3, [r0, #1]
   13a1c:	bic	r3, r3, #32
   13a20:	cmp	r3, #66	; 0x42
   13a24:	bne	13a4c <__assert_fail@plt+0x26c4>
   13a28:	ldrb	r3, [r0, #2]
   13a2c:	cmp	r3, #49	; 0x31
   13a30:	bne	13a4c <__assert_fail@plt+0x26c4>
   13a34:	ldrb	r3, [r0, #3]
   13a38:	cmp	r3, #56	; 0x38
   13a3c:	bne	13a4c <__assert_fail@plt+0x26c4>
   13a40:	ldrb	r3, [r0, #4]
   13a44:	cmp	r3, #48	; 0x30
   13a48:	beq	13a60 <__assert_fail@plt+0x26d8>
   13a4c:	ldr	r3, [pc, #80]	; 13aa4 <__assert_fail@plt+0x271c>
   13a50:	cmp	r5, #9
   13a54:	ldr	r0, [pc, #76]	; 13aa8 <__assert_fail@plt+0x2720>
   13a58:	movne	r0, r3
   13a5c:	pop	{r4, r5, r6, pc}
   13a60:	ldrb	r3, [r0, #5]
   13a64:	cmp	r3, #51	; 0x33
   13a68:	bne	13a4c <__assert_fail@plt+0x26c4>
   13a6c:	ldrb	r3, [r0, #6]
   13a70:	cmp	r3, #48	; 0x30
   13a74:	bne	13a4c <__assert_fail@plt+0x26c4>
   13a78:	ldrb	r3, [r0, #7]
   13a7c:	cmp	r3, #0
   13a80:	bne	13a4c <__assert_fail@plt+0x26c4>
   13a84:	ldrb	r2, [r4]
   13a88:	ldr	r3, [pc, #28]	; 13aac <__assert_fail@plt+0x2724>
   13a8c:	ldr	r0, [pc, #28]	; 13ab0 <__assert_fail@plt+0x2728>
   13a90:	cmp	r2, #96	; 0x60
   13a94:	movne	r0, r3
   13a98:	pop	{r4, r5, r6, pc}
   13a9c:	andeq	r7, r1, r8, lsl pc
   13aa0:	andeq	r7, r1, r4, lsl pc
   13aa4:	andeq	r7, r1, r8, lsr #30
   13aa8:	andeq	r7, r1, r4, lsr #30
   13aac:	andeq	r7, r1, r0, lsr #30
   13ab0:	andeq	r7, r1, ip, lsl pc
   13ab4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13ab8:	sub	sp, sp, #116	; 0x74
   13abc:	mov	sl, r0
   13ac0:	str	r3, [sp, #24]
   13ac4:	mov	r3, #1
   13ac8:	mov	r8, r1
   13acc:	str	r2, [sp, #56]	; 0x38
   13ad0:	str	r3, [sp, #36]	; 0x24
   13ad4:	bl	1119c <__ctype_get_mb_cur_max@plt>
   13ad8:	ldr	r3, [sp, #156]	; 0x9c
   13adc:	mov	fp, r8
   13ae0:	mov	r2, #0
   13ae4:	lsr	r3, r3, #1
   13ae8:	and	r3, r3, #1
   13aec:	str	r2, [sp, #68]	; 0x44
   13af0:	str	r3, [sp, #28]
   13af4:	str	r2, [sp, #40]	; 0x28
   13af8:	str	r2, [sp, #44]	; 0x2c
   13afc:	str	r2, [sp, #52]	; 0x34
   13b00:	str	r2, [sp, #64]	; 0x40
   13b04:	str	r2, [sp, #72]	; 0x48
   13b08:	str	sl, [sp, #32]
   13b0c:	str	r0, [sp, #76]	; 0x4c
   13b10:	ldr	r3, [sp, #152]	; 0x98
   13b14:	cmp	r3, #10
   13b18:	ldrls	pc, [pc, r3, lsl #2]
   13b1c:	b	14cdc <__assert_fail@plt+0x3954>
   13b20:	andeq	r3, r1, ip, asr #22
   13b24:	andeq	r3, r1, r4, lsr lr
   13b28:	andeq	r3, r1, r8, asr lr
   13b2c:	andeq	r3, r1, ip, ror lr
   13b30:	andeq	r3, r1, r8, lsr #31
   13b34:	andeq	r3, r1, ip, ror pc
   13b38:	andeq	r3, r1, r4, asr pc
   13b3c:	muleq	r1, r0, lr
   13b40:	andeq	r3, r1, r8, lsr #29
   13b44:	andeq	r3, r1, r8, lsr #29
   13b48:	andeq	r3, r1, r8, lsr #29
   13b4c:	mov	r3, #0
   13b50:	mov	r7, r3
   13b54:	str	r3, [sp, #28]
   13b58:	ldr	r3, [sp, #44]	; 0x2c
   13b5c:	mov	sl, #0
   13b60:	eor	r3, r3, #1
   13b64:	str	r3, [sp, #60]	; 0x3c
   13b68:	ldr	r3, [sp, #24]
   13b6c:	cmn	r3, #1
   13b70:	beq	140d4 <__assert_fail@plt+0x2d4c>
   13b74:	ldr	r3, [sp, #24]
   13b78:	subs	r5, r3, sl
   13b7c:	movne	r5, #1
   13b80:	cmp	r5, #0
   13b84:	beq	140ec <__assert_fail@plt+0x2d64>
   13b88:	ldr	r3, [sp, #152]	; 0x98
   13b8c:	ldr	r8, [sp, #44]	; 0x2c
   13b90:	cmp	r3, #2
   13b94:	moveq	r8, #0
   13b98:	andne	r8, r8, #1
   13b9c:	ldr	r3, [sp, #52]	; 0x34
   13ba0:	adds	r9, r3, #0
   13ba4:	movne	r9, #1
   13ba8:	ands	r6, r9, r8
   13bac:	beq	14554 <__assert_fail@plt+0x31cc>
   13bb0:	ldr	r2, [sp, #52]	; 0x34
   13bb4:	ldr	r1, [sp, #24]
   13bb8:	cmp	r2, #1
   13bbc:	mov	r3, r2
   13bc0:	movls	r3, #0
   13bc4:	movhi	r3, #1
   13bc8:	cmn	r1, #1
   13bcc:	movne	r3, #0
   13bd0:	cmp	r3, #0
   13bd4:	add	r4, sl, r2
   13bd8:	beq	13be8 <__assert_fail@plt+0x2860>
   13bdc:	ldr	r0, [sp, #56]	; 0x38
   13be0:	bl	1125c <strlen@plt>
   13be4:	str	r0, [sp, #24]
   13be8:	ldr	r3, [sp, #24]
   13bec:	cmp	r3, r4
   13bf0:	ldr	r3, [sp, #56]	; 0x38
   13bf4:	add	r3, r3, sl
   13bf8:	str	r3, [sp, #48]	; 0x30
   13bfc:	bcc	14560 <__assert_fail@plt+0x31d8>
   13c00:	mov	r0, r3
   13c04:	ldr	r2, [sp, #52]	; 0x34
   13c08:	ldr	r1, [sp, #64]	; 0x40
   13c0c:	bl	1110c <memcmp@plt>
   13c10:	cmp	r0, #0
   13c14:	bne	14560 <__assert_fail@plt+0x31d8>
   13c18:	ldr	r3, [sp, #28]
   13c1c:	cmp	r3, #0
   13c20:	bne	14ddc <__assert_fail@plt+0x3a54>
   13c24:	ldr	r3, [sp, #48]	; 0x30
   13c28:	ldrb	r4, [r3]
   13c2c:	cmp	r4, #126	; 0x7e
   13c30:	ldrls	pc, [pc, r4, lsl #2]
   13c34:	b	144f4 <__assert_fail@plt+0x316c>
   13c38:	andeq	r4, r1, r8, lsl r3
   13c3c:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   13c40:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   13c44:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   13c48:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   13c4c:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   13c50:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   13c54:	strdeq	r4, [r1], -ip
   13c58:	andeq	r4, r1, r0, ror #5
   13c5c:	ldrdeq	r4, [r1], -ip
   13c60:	andeq	r4, r1, r0, asr #4
   13c64:	andeq	r4, r1, r4, lsr #4
   13c68:			; <UNDEFINED> instruction: 0x000144b8
   13c6c:	muleq	r1, r4, r4
   13c70:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   13c74:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   13c78:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   13c7c:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   13c80:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   13c84:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   13c88:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   13c8c:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   13c90:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   13c94:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   13c98:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   13c9c:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   13ca0:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   13ca4:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   13ca8:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   13cac:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   13cb0:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   13cb4:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   13cb8:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   13cbc:	andeq	r4, r1, r8, lsl #8
   13cc0:	andeq	r4, r1, r8, lsl #8
   13cc4:	andeq	r4, r1, r8, lsl r0
   13cc8:	andeq	r4, r1, r8, lsl #8
   13ccc:	andeq	r4, r1, r0, lsr #9
   13cd0:	andeq	r4, r1, r8, lsl #8
   13cd4:	andeq	r4, r1, r4, ror r4
   13cd8:	andeq	r4, r1, r8, lsl #8
   13cdc:	andeq	r4, r1, r8, lsl #8
   13ce0:	andeq	r4, r1, r8, lsl #8
   13ce4:	andeq	r4, r1, r0, lsr #9
   13ce8:	andeq	r4, r1, r0, lsr #9
   13cec:	andeq	r4, r1, r0, lsr #9
   13cf0:	andeq	r4, r1, r0, lsr #9
   13cf4:	andeq	r4, r1, r0, lsr #9
   13cf8:	andeq	r4, r1, r0, lsr #9
   13cfc:	andeq	r4, r1, r0, lsr #9
   13d00:	andeq	r4, r1, r0, lsr #9
   13d04:	andeq	r4, r1, r0, lsr #9
   13d08:	andeq	r4, r1, r0, lsr #9
   13d0c:	andeq	r4, r1, r0, lsr #9
   13d10:	andeq	r4, r1, r0, lsr #9
   13d14:	andeq	r4, r1, r0, lsr #9
   13d18:	andeq	r4, r1, r0, lsr #9
   13d1c:	andeq	r4, r1, r0, lsr #9
   13d20:	andeq	r4, r1, r0, lsr #9
   13d24:	andeq	r4, r1, r8, lsl #8
   13d28:	andeq	r4, r1, r8, lsl #8
   13d2c:	andeq	r4, r1, r8, lsl #8
   13d30:	andeq	r4, r1, r8, lsl #8
   13d34:	andeq	r4, r1, r4, asr #8
   13d38:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   13d3c:	andeq	r4, r1, r0, lsr #9
   13d40:	andeq	r4, r1, r0, lsr #9
   13d44:	andeq	r4, r1, r0, lsr #9
   13d48:	andeq	r4, r1, r0, lsr #9
   13d4c:	andeq	r4, r1, r0, lsr #9
   13d50:	andeq	r4, r1, r0, lsr #9
   13d54:	andeq	r4, r1, r0, lsr #9
   13d58:	andeq	r4, r1, r0, lsr #9
   13d5c:	andeq	r4, r1, r0, lsr #9
   13d60:	andeq	r4, r1, r0, lsr #9
   13d64:	andeq	r4, r1, r0, lsr #9
   13d68:	andeq	r4, r1, r0, lsr #9
   13d6c:	andeq	r4, r1, r0, lsr #9
   13d70:	andeq	r4, r1, r0, lsr #9
   13d74:	andeq	r4, r1, r0, lsr #9
   13d78:	andeq	r4, r1, r0, lsr #9
   13d7c:	andeq	r4, r1, r0, lsr #9
   13d80:	andeq	r4, r1, r0, lsr #9
   13d84:	andeq	r4, r1, r0, lsr #9
   13d88:	andeq	r4, r1, r0, lsr #9
   13d8c:	andeq	r4, r1, r0, lsr #9
   13d90:	andeq	r4, r1, r0, lsr #9
   13d94:	andeq	r4, r1, r0, lsr #9
   13d98:	andeq	r4, r1, r0, lsr #9
   13d9c:	andeq	r4, r1, r0, lsr #9
   13da0:	andeq	r4, r1, r0, lsr #9
   13da4:	andeq	r4, r1, r8, lsl #8
   13da8:	andeq	r4, r1, r4, ror #2
   13dac:	andeq	r4, r1, r0, lsr #9
   13db0:	andeq	r4, r1, r8, lsl #8
   13db4:	andeq	r4, r1, r0, lsr #9
   13db8:	andeq	r4, r1, r8, lsl #8
   13dbc:	andeq	r4, r1, r0, lsr #9
   13dc0:	andeq	r4, r1, r0, lsr #9
   13dc4:	andeq	r4, r1, r0, lsr #9
   13dc8:	andeq	r4, r1, r0, lsr #9
   13dcc:	andeq	r4, r1, r0, lsr #9
   13dd0:	andeq	r4, r1, r0, lsr #9
   13dd4:	andeq	r4, r1, r0, lsr #9
   13dd8:	andeq	r4, r1, r0, lsr #9
   13ddc:	andeq	r4, r1, r0, lsr #9
   13de0:	andeq	r4, r1, r0, lsr #9
   13de4:	andeq	r4, r1, r0, lsr #9
   13de8:	andeq	r4, r1, r0, lsr #9
   13dec:	andeq	r4, r1, r0, lsr #9
   13df0:	andeq	r4, r1, r0, lsr #9
   13df4:	andeq	r4, r1, r0, lsr #9
   13df8:	andeq	r4, r1, r0, lsr #9
   13dfc:	andeq	r4, r1, r0, lsr #9
   13e00:	andeq	r4, r1, r0, lsr #9
   13e04:	andeq	r4, r1, r0, lsr #9
   13e08:	andeq	r4, r1, r0, lsr #9
   13e0c:	andeq	r4, r1, r0, lsr #9
   13e10:	andeq	r4, r1, r0, lsr #9
   13e14:	andeq	r4, r1, r0, lsr #9
   13e18:	andeq	r4, r1, r0, lsr #9
   13e1c:	andeq	r4, r1, r0, lsr #9
   13e20:	andeq	r4, r1, r0, lsr #9
   13e24:	strdeq	r3, [r1], -r8
   13e28:	andeq	r4, r1, r8, lsl #8
   13e2c:	strdeq	r3, [r1], -r8
   13e30:	andeq	r4, r1, r8, lsl r0
   13e34:	mov	r3, #1
   13e38:	str	r3, [sp, #28]
   13e3c:	str	r3, [sp, #52]	; 0x34
   13e40:	ldr	r3, [pc, #4000]	; 14de8 <__assert_fail@plt+0x3a60>
   13e44:	mov	r7, #0
   13e48:	str	r3, [sp, #64]	; 0x40
   13e4c:	mov	r3, #2
   13e50:	str	r3, [sp, #152]	; 0x98
   13e54:	b	13b58 <__assert_fail@plt+0x27d0>
   13e58:	ldr	r3, [sp, #28]
   13e5c:	cmp	r3, #0
   13e60:	beq	13fbc <__assert_fail@plt+0x2c34>
   13e64:	mov	r3, #1
   13e68:	str	r3, [sp, #52]	; 0x34
   13e6c:	ldr	r3, [pc, #3956]	; 14de8 <__assert_fail@plt+0x3a60>
   13e70:	mov	r7, #0
   13e74:	str	r3, [sp, #64]	; 0x40
   13e78:	b	13b58 <__assert_fail@plt+0x27d0>
   13e7c:	mov	r3, #1
   13e80:	str	r3, [sp, #44]	; 0x2c
   13e84:	str	r3, [sp, #52]	; 0x34
   13e88:	str	r3, [sp, #28]
   13e8c:	b	13e40 <__assert_fail@plt+0x2ab8>
   13e90:	mov	r3, #0
   13e94:	str	r3, [sp, #28]
   13e98:	mov	r3, #1
   13e9c:	str	r3, [sp, #44]	; 0x2c
   13ea0:	mov	r7, #0
   13ea4:	b	13b58 <__assert_fail@plt+0x27d0>
   13ea8:	ldr	r3, [sp, #152]	; 0x98
   13eac:	cmp	r3, #10
   13eb0:	beq	13ef4 <__assert_fail@plt+0x2b6c>
   13eb4:	mov	r2, #5
   13eb8:	ldr	r1, [pc, #3884]	; 14dec <__assert_fail@plt+0x3a64>
   13ebc:	mov	r0, #0
   13ec0:	bl	11124 <dcgettext@plt>
   13ec4:	ldr	r2, [pc, #3872]	; 14dec <__assert_fail@plt+0x3a64>
   13ec8:	cmp	r0, r2
   13ecc:	str	r0, [sp, #164]	; 0xa4
   13ed0:	beq	14ed8 <__assert_fail@plt+0x3b50>
   13ed4:	mov	r2, #5
   13ed8:	ldr	r1, [pc, #3848]	; 14de8 <__assert_fail@plt+0x3a60>
   13edc:	mov	r0, #0
   13ee0:	bl	11124 <dcgettext@plt>
   13ee4:	ldr	r2, [pc, #3836]	; 14de8 <__assert_fail@plt+0x3a60>
   13ee8:	cmp	r0, r2
   13eec:	str	r0, [sp, #168]	; 0xa8
   13ef0:	beq	14ec8 <__assert_fail@plt+0x3b40>
   13ef4:	ldr	r7, [sp, #28]
   13ef8:	cmp	r7, #0
   13efc:	movne	r7, #0
   13f00:	bne	13f34 <__assert_fail@plt+0x2bac>
   13f04:	ldr	r3, [sp, #164]	; 0xa4
   13f08:	ldrb	r3, [r3]
   13f0c:	cmp	r3, #0
   13f10:	beq	14ee8 <__assert_fail@plt+0x3b60>
   13f14:	ldr	r2, [sp, #164]	; 0xa4
   13f18:	ldr	r1, [sp, #32]
   13f1c:	cmp	fp, r7
   13f20:	strbhi	r3, [r1, r7]
   13f24:	ldrb	r3, [r2, #1]!
   13f28:	add	r7, r7, #1
   13f2c:	cmp	r3, #0
   13f30:	bne	13f1c <__assert_fail@plt+0x2b94>
   13f34:	ldr	r0, [sp, #168]	; 0xa8
   13f38:	bl	1125c <strlen@plt>
   13f3c:	ldr	r3, [sp, #168]	; 0xa8
   13f40:	str	r3, [sp, #64]	; 0x40
   13f44:	mov	r3, #1
   13f48:	str	r3, [sp, #44]	; 0x2c
   13f4c:	str	r0, [sp, #52]	; 0x34
   13f50:	b	13b58 <__assert_fail@plt+0x27d0>
   13f54:	mov	r3, #1
   13f58:	str	r3, [sp, #44]	; 0x2c
   13f5c:	str	r3, [sp, #52]	; 0x34
   13f60:	str	r3, [sp, #28]
   13f64:	ldr	r3, [pc, #3716]	; 14df0 <__assert_fail@plt+0x3a68>
   13f68:	mov	r7, #0
   13f6c:	str	r3, [sp, #64]	; 0x40
   13f70:	mov	r3, #5
   13f74:	str	r3, [sp, #152]	; 0x98
   13f78:	b	13b58 <__assert_fail@plt+0x27d0>
   13f7c:	ldr	r3, [sp, #28]
   13f80:	cmp	r3, #0
   13f84:	beq	14c84 <__assert_fail@plt+0x38fc>
   13f88:	ldr	r3, [sp, #28]
   13f8c:	mov	r7, #0
   13f90:	str	r3, [sp, #44]	; 0x2c
   13f94:	mov	r3, #1
   13f98:	str	r3, [sp, #52]	; 0x34
   13f9c:	ldr	r3, [pc, #3660]	; 14df0 <__assert_fail@plt+0x3a68>
   13fa0:	str	r3, [sp, #64]	; 0x40
   13fa4:	b	13b58 <__assert_fail@plt+0x27d0>
   13fa8:	ldr	r3, [sp, #28]
   13fac:	cmp	r3, #0
   13fb0:	mov	r3, #1
   13fb4:	streq	r3, [sp, #44]	; 0x2c
   13fb8:	bne	13e3c <__assert_fail@plt+0x2ab4>
   13fbc:	cmp	fp, #0
   13fc0:	beq	14cb4 <__assert_fail@plt+0x392c>
   13fc4:	ldr	r3, [sp, #32]
   13fc8:	mov	r2, #39	; 0x27
   13fcc:	mov	r7, #1
   13fd0:	strb	r2, [r3]
   13fd4:	mov	r3, #0
   13fd8:	str	r3, [sp, #28]
   13fdc:	mov	r3, #1
   13fe0:	str	r3, [sp, #52]	; 0x34
   13fe4:	ldr	r3, [pc, #3580]	; 14de8 <__assert_fail@plt+0x3a60>
   13fe8:	str	r3, [sp, #64]	; 0x40
   13fec:	mov	r3, #2
   13ff0:	str	r3, [sp, #152]	; 0x98
   13ff4:	b	13b58 <__assert_fail@plt+0x27d0>
   13ff8:	ldr	r3, [sp, #24]
   13ffc:	cmn	r3, #1
   14000:	beq	14c18 <__assert_fail@plt+0x3890>
   14004:	ldr	r3, [sp, #24]
   14008:	subs	r3, r3, #1
   1400c:	movne	r3, #1
   14010:	cmp	r3, #0
   14014:	bne	14020 <__assert_fail@plt+0x2c98>
   14018:	cmp	sl, #0
   1401c:	beq	1440c <__assert_fail@plt+0x3084>
   14020:	ldr	r3, [sp, #152]	; 0x98
   14024:	mov	r5, #0
   14028:	sub	r2, r3, #2
   1402c:	mov	r8, r5
   14030:	clz	r2, r2
   14034:	lsr	r2, r2, #5
   14038:	ldr	r3, [sp, #60]	; 0x3c
   1403c:	ldr	r1, [sp, #28]
   14040:	orr	r3, r2, r3
   14044:	eor	r3, r3, #1
   14048:	orr	r3, r1, r3
   1404c:	tst	r3, #255	; 0xff
   14050:	bne	1477c <__assert_fail@plt+0x33f4>
   14054:	cmp	r6, #0
   14058:	bne	141a8 <__assert_fail@plt+0x2e20>
   1405c:	ldr	r3, [sp, #40]	; 0x28
   14060:	eor	r8, r8, #1
   14064:	and	r8, r8, r3
   14068:	add	sl, sl, #1
   1406c:	uxtb	r6, r8
   14070:	cmp	r6, #0
   14074:	beq	140a8 <__assert_fail@plt+0x2d20>
   14078:	cmp	fp, r7
   1407c:	movhi	r2, #39	; 0x27
   14080:	ldrhi	r3, [sp, #32]
   14084:	strbhi	r2, [r3, r7]
   14088:	add	r3, r7, #1
   1408c:	cmp	fp, r3
   14090:	movhi	r1, #39	; 0x27
   14094:	ldrhi	r2, [sp, #32]
   14098:	add	r7, r7, #2
   1409c:	strbhi	r1, [r2, r3]
   140a0:	mov	r3, #0
   140a4:	str	r3, [sp, #40]	; 0x28
   140a8:	cmp	r7, fp
   140ac:	ldrcc	r3, [sp, #32]
   140b0:	strbcc	r4, [r3, r7]
   140b4:	ldr	r3, [sp, #36]	; 0x24
   140b8:	cmp	r5, #0
   140bc:	moveq	r3, #0
   140c0:	str	r3, [sp, #36]	; 0x24
   140c4:	ldr	r3, [sp, #24]
   140c8:	add	r7, r7, #1
   140cc:	cmn	r3, #1
   140d0:	bne	13b74 <__assert_fail@plt+0x27ec>
   140d4:	ldr	r3, [sp, #56]	; 0x38
   140d8:	ldrb	r5, [r3, sl]
   140dc:	adds	r5, r5, #0
   140e0:	movne	r5, #1
   140e4:	cmp	r5, #0
   140e8:	bne	13b88 <__assert_fail@plt+0x2800>
   140ec:	ldr	r3, [sp, #152]	; 0x98
   140f0:	ldr	r1, [sp, #28]
   140f4:	sub	r3, r3, #2
   140f8:	clz	r3, r3
   140fc:	lsr	r3, r3, #5
   14100:	and	r9, r1, r3
   14104:	cmp	r7, #0
   14108:	movne	r2, #0
   1410c:	andeq	r2, r9, #1
   14110:	cmp	r2, #0
   14114:	bne	14af0 <__assert_fail@plt+0x3768>
   14118:	eor	r2, r1, #1
   1411c:	ands	r3, r3, r2
   14120:	beq	14fac <__assert_fail@plt+0x3c24>
   14124:	ldr	r2, [sp, #68]	; 0x44
   14128:	cmp	r2, #0
   1412c:	beq	14f98 <__assert_fail@plt+0x3c10>
   14130:	ldr	r3, [sp, #36]	; 0x24
   14134:	cmp	r3, #0
   14138:	bne	14f50 <__assert_fail@plt+0x3bc8>
   1413c:	ldr	r2, [sp, #72]	; 0x48
   14140:	clz	r3, fp
   14144:	cmp	r2, #0
   14148:	lsr	r3, r3, #5
   1414c:	moveq	r3, #0
   14150:	cmp	r3, #0
   14154:	beq	14ef0 <__assert_fail@plt+0x3b68>
   14158:	str	r3, [sp, #68]	; 0x44
   1415c:	ldr	fp, [sp, #72]	; 0x48
   14160:	b	13b10 <__assert_fail@plt+0x2788>
   14164:	ldr	r3, [sp, #152]	; 0x98
   14168:	cmp	r3, #2
   1416c:	beq	147c0 <__assert_fail@plt+0x3438>
   14170:	ldr	r3, [sp, #44]	; 0x2c
   14174:	ldr	r2, [sp, #28]
   14178:	and	r2, r3, r2
   1417c:	ands	r2, r9, r2
   14180:	bne	147cc <__assert_fail@plt+0x3444>
   14184:	mov	r4, #92	; 0x5c
   14188:	mov	r3, r4
   1418c:	ldr	r1, [sp, #44]	; 0x2c
   14190:	cmp	r1, #0
   14194:	moveq	r5, #0
   14198:	moveq	r8, r1
   1419c:	beq	14038 <__assert_fail@plt+0x2cb0>
   141a0:	mov	r4, r3
   141a4:	mov	r5, #0
   141a8:	ldr	r3, [sp, #28]
   141ac:	cmp	r3, #0
   141b0:	bne	147b4 <__assert_fail@plt+0x342c>
   141b4:	ldr	r3, [sp, #40]	; 0x28
   141b8:	eor	r9, r3, #1
   141bc:	and	r9, r9, r2
   141c0:	ands	r9, r9, #255	; 0xff
   141c4:	beq	14208 <__assert_fail@plt+0x2e80>
   141c8:	cmp	fp, r7
   141cc:	movhi	r2, #39	; 0x27
   141d0:	ldrhi	r3, [sp, #32]
   141d4:	str	r9, [sp, #40]	; 0x28
   141d8:	strbhi	r2, [r3, r7]
   141dc:	add	r3, r7, #1
   141e0:	cmp	fp, r3
   141e4:	movhi	r1, #36	; 0x24
   141e8:	ldrhi	r2, [sp, #32]
   141ec:	strbhi	r1, [r2, r3]
   141f0:	add	r3, r7, #2
   141f4:	cmp	fp, r3
   141f8:	add	r7, r7, #3
   141fc:	ldrhi	r2, [sp, #32]
   14200:	movhi	r1, #39	; 0x27
   14204:	strbhi	r1, [r2, r3]
   14208:	cmp	fp, r7
   1420c:	movhi	r2, #92	; 0x5c
   14210:	ldrhi	r3, [sp, #32]
   14214:	add	sl, sl, #1
   14218:	strbhi	r2, [r3, r7]
   1421c:	add	r7, r7, #1
   14220:	b	140a8 <__assert_fail@plt+0x2d20>
   14224:	ldr	r3, [sp, #152]	; 0x98
   14228:	mov	r4, #11
   1422c:	sub	r2, r3, #2
   14230:	mov	r3, #118	; 0x76
   14234:	clz	r2, r2
   14238:	lsr	r2, r2, #5
   1423c:	b	1418c <__assert_fail@plt+0x2e04>
   14240:	mov	r4, #10
   14244:	mov	r3, #110	; 0x6e
   14248:	ldr	r2, [sp, #152]	; 0x98
   1424c:	ldr	r1, [sp, #28]
   14250:	sub	r2, r2, #2
   14254:	clz	r2, r2
   14258:	lsr	r2, r2, #5
   1425c:	ands	r1, r1, r2
   14260:	beq	1418c <__assert_fail@plt+0x2e04>
   14264:	ldr	sl, [sp, #32]
   14268:	mov	r8, fp
   1426c:	mov	r2, r1
   14270:	mov	r3, #2
   14274:	str	r3, [sp, #152]	; 0x98
   14278:	ldr	r9, [sp, #44]	; 0x2c
   1427c:	ldr	r3, [sp, #152]	; 0x98
   14280:	and	r9, r9, r2
   14284:	tst	r9, #255	; 0xff
   14288:	movne	r3, #4
   1428c:	str	r3, [sp, #152]	; 0x98
   14290:	ldr	r3, [sp, #156]	; 0x9c
   14294:	mov	ip, #0
   14298:	bic	r3, r3, #2
   1429c:	str	r3, [sp, #4]
   142a0:	ldr	r3, [sp, #168]	; 0xa8
   142a4:	ldr	r2, [sp, #56]	; 0x38
   142a8:	str	r3, [sp, #16]
   142ac:	ldr	r3, [sp, #164]	; 0xa4
   142b0:	mov	r1, r8
   142b4:	str	r3, [sp, #12]
   142b8:	ldr	r3, [sp, #152]	; 0x98
   142bc:	mov	r0, sl
   142c0:	str	r3, [sp]
   142c4:	str	ip, [sp, #8]
   142c8:	ldr	r3, [sp, #24]
   142cc:	bl	13ab4 <__assert_fail@plt+0x272c>
   142d0:	mov	fp, r0
   142d4:	mov	r0, fp
   142d8:	add	sp, sp, #116	; 0x74
   142dc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   142e0:	ldr	r3, [sp, #152]	; 0x98
   142e4:	mov	r4, #8
   142e8:	sub	r2, r3, #2
   142ec:	mov	r3, #98	; 0x62
   142f0:	clz	r2, r2
   142f4:	lsr	r2, r2, #5
   142f8:	b	1418c <__assert_fail@plt+0x2e04>
   142fc:	ldr	r3, [sp, #152]	; 0x98
   14300:	mov	r4, #7
   14304:	sub	r2, r3, #2
   14308:	mov	r3, #97	; 0x61
   1430c:	clz	r2, r2
   14310:	lsr	r2, r2, #5
   14314:	b	1418c <__assert_fail@plt+0x2e04>
   14318:	ldr	r3, [sp, #44]	; 0x2c
   1431c:	cmp	r3, #0
   14320:	beq	14b04 <__assert_fail@plt+0x377c>
   14324:	ldr	r3, [sp, #28]
   14328:	cmp	r3, #0
   1432c:	bne	14ddc <__assert_fail@plt+0x3a54>
   14330:	ldr	r3, [sp, #152]	; 0x98
   14334:	sub	r2, r3, #2
   14338:	ldr	r3, [sp, #40]	; 0x28
   1433c:	clz	r2, r2
   14340:	eor	r3, r3, #1
   14344:	lsr	r2, r2, #5
   14348:	ands	r3, r2, r3
   1434c:	moveq	r1, r7
   14350:	beq	14394 <__assert_fail@plt+0x300c>
   14354:	cmp	fp, r7
   14358:	movhi	r0, #39	; 0x27
   1435c:	ldrhi	r1, [sp, #32]
   14360:	str	r3, [sp, #40]	; 0x28
   14364:	strbhi	r0, [r1, r7]
   14368:	add	r1, r7, #1
   1436c:	cmp	fp, r1
   14370:	movhi	ip, #36	; 0x24
   14374:	ldrhi	r0, [sp, #32]
   14378:	strbhi	ip, [r0, r1]
   1437c:	add	r1, r7, #2
   14380:	cmp	fp, r1
   14384:	movhi	ip, #39	; 0x27
   14388:	ldrhi	r0, [sp, #32]
   1438c:	strbhi	ip, [r0, r1]
   14390:	add	r1, r7, #3
   14394:	cmp	fp, r1
   14398:	movhi	r0, #92	; 0x5c
   1439c:	ldrhi	r3, [sp, #32]
   143a0:	add	r7, r1, #1
   143a4:	strbhi	r0, [r3, r1]
   143a8:	cmp	r8, #0
   143ac:	beq	14cf0 <__assert_fail@plt+0x3968>
   143b0:	ldr	r0, [sp, #24]
   143b4:	add	r3, sl, #1
   143b8:	cmp	r3, r0
   143bc:	bcs	14c2c <__assert_fail@plt+0x38a4>
   143c0:	ldr	r0, [sp, #56]	; 0x38
   143c4:	ldrb	r3, [r0, r3]
   143c8:	sub	r3, r3, #48	; 0x30
   143cc:	cmp	r3, #9
   143d0:	bhi	14c2c <__assert_fail@plt+0x38a4>
   143d4:	cmp	fp, r7
   143d8:	movhi	r3, #48	; 0x30
   143dc:	ldrhi	r0, [sp, #32]
   143e0:	ldr	r5, [sp, #28]
   143e4:	mov	r4, #48	; 0x30
   143e8:	strbhi	r3, [r0, r7]
   143ec:	add	r3, r1, #2
   143f0:	cmp	fp, r3
   143f4:	movhi	r0, #48	; 0x30
   143f8:	ldrhi	ip, [sp, #32]
   143fc:	add	r7, r1, #3
   14400:	strbhi	r0, [ip, r3]
   14404:	b	14038 <__assert_fail@plt+0x2cb0>
   14408:	mov	r5, #0
   1440c:	ldr	r3, [sp, #152]	; 0x98
   14410:	sub	r2, r3, #2
   14414:	ldr	r3, [sp, #28]
   14418:	clz	r2, r2
   1441c:	lsr	r2, r2, #5
   14420:	ands	r8, r3, r2
   14424:	beq	14038 <__assert_fail@plt+0x2cb0>
   14428:	mov	r3, r8
   1442c:	mov	r2, r3
   14430:	mov	r3, #2
   14434:	ldr	sl, [sp, #32]
   14438:	mov	r8, fp
   1443c:	str	r3, [sp, #152]	; 0x98
   14440:	b	14278 <__assert_fail@plt+0x2ef0>
   14444:	ldr	r3, [sp, #152]	; 0x98
   14448:	cmp	r3, #2
   1444c:	beq	14b70 <__assert_fail@plt+0x37e8>
   14450:	cmp	r3, #5
   14454:	beq	14b30 <__assert_fail@plt+0x37a8>
   14458:	mov	r5, #0
   1445c:	sub	r2, r3, #2
   14460:	mov	r8, r5
   14464:	clz	r2, r2
   14468:	mov	r4, #63	; 0x3f
   1446c:	lsr	r2, r2, #5
   14470:	b	14038 <__assert_fail@plt+0x2cb0>
   14474:	ldr	r3, [sp, #152]	; 0x98
   14478:	cmp	r3, #2
   1447c:	beq	14b90 <__assert_fail@plt+0x3808>
   14480:	mov	r2, #0
   14484:	str	r5, [sp, #68]	; 0x44
   14488:	mov	r8, r2
   1448c:	mov	r4, #39	; 0x27
   14490:	b	14038 <__assert_fail@plt+0x2cb0>
   14494:	mov	r4, #13
   14498:	mov	r3, #114	; 0x72
   1449c:	b	14248 <__assert_fail@plt+0x2ec0>
   144a0:	ldr	r3, [sp, #152]	; 0x98
   144a4:	mov	r8, #0
   144a8:	sub	r2, r3, #2
   144ac:	clz	r2, r2
   144b0:	lsr	r2, r2, #5
   144b4:	b	14038 <__assert_fail@plt+0x2cb0>
   144b8:	ldr	r3, [sp, #152]	; 0x98
   144bc:	mov	r4, #12
   144c0:	sub	r2, r3, #2
   144c4:	mov	r3, #102	; 0x66
   144c8:	clz	r2, r2
   144cc:	lsr	r2, r2, #5
   144d0:	b	1418c <__assert_fail@plt+0x2e04>
   144d4:	mov	r5, r6
   144d8:	b	1440c <__assert_fail@plt+0x3084>
   144dc:	ldr	r3, [sp, #152]	; 0x98
   144e0:	sub	r2, r3, #2
   144e4:	mov	r3, #116	; 0x74
   144e8:	clz	r2, r2
   144ec:	lsr	r2, r2, #5
   144f0:	b	1418c <__assert_fail@plt+0x2e04>
   144f4:	ldr	r8, [sp, #76]	; 0x4c
   144f8:	cmp	r8, #1
   144fc:	bne	149ac <__assert_fail@plt+0x3624>
   14500:	bl	1122c <__ctype_b_loc@plt>
   14504:	sxth	r3, r4
   14508:	mov	ip, r8
   1450c:	lsl	r3, r3, #1
   14510:	ldr	r2, [r0]
   14514:	ldrh	r3, [r2, r3]
   14518:	and	r3, r3, #16384	; 0x4000
   1451c:	cmp	r3, #0
   14520:	movne	r5, #1
   14524:	moveq	r5, #0
   14528:	moveq	r3, #1
   1452c:	movne	r3, #0
   14530:	ldr	r2, [sp, #44]	; 0x2c
   14534:	and	r3, r3, r2
   14538:	ands	r8, r3, #255	; 0xff
   1453c:	bne	14840 <__assert_fail@plt+0x34b8>
   14540:	ldr	r3, [sp, #152]	; 0x98
   14544:	sub	r2, r3, #2
   14548:	clz	r2, r2
   1454c:	lsr	r2, r2, #5
   14550:	b	14038 <__assert_fail@plt+0x2cb0>
   14554:	ldr	r3, [sp, #56]	; 0x38
   14558:	add	r3, r3, sl
   1455c:	str	r3, [sp, #48]	; 0x30
   14560:	ldr	r3, [sp, #48]	; 0x30
   14564:	mov	r6, #0
   14568:	ldrb	r4, [r3]
   1456c:	cmp	r4, #126	; 0x7e
   14570:	ldrls	pc, [pc, r4, lsl #2]
   14574:	b	144f4 <__assert_fail@plt+0x316c>
   14578:	andeq	r4, r1, r8, lsl r3
   1457c:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14580:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14584:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14588:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   1458c:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14590:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14594:	strdeq	r4, [r1], -ip
   14598:	andeq	r4, r1, r0, ror #5
   1459c:	andeq	r4, r1, r4, ror r7
   145a0:	andeq	r4, r1, r0, asr #4
   145a4:	andeq	r4, r1, r4, lsr #4
   145a8:			; <UNDEFINED> instruction: 0x000144b8
   145ac:	muleq	r1, r4, r4
   145b0:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   145b4:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   145b8:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   145bc:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   145c0:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   145c4:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   145c8:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   145cc:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   145d0:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   145d4:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   145d8:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   145dc:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   145e0:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   145e4:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   145e8:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   145ec:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   145f0:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   145f4:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   145f8:	andeq	r4, r1, ip, lsl #8
   145fc:	andeq	r4, r1, r8, lsl #8
   14600:	andeq	r4, r1, r8, lsl #8
   14604:	andeq	r4, r1, r8, lsl r0
   14608:	andeq	r4, r1, r8, lsl #8
   1460c:	andeq	r4, r1, r0, lsr #9
   14610:	andeq	r4, r1, r8, lsl #8
   14614:	andeq	r4, r1, r4, ror r4
   14618:	andeq	r4, r1, r8, lsl #8
   1461c:	andeq	r4, r1, r8, lsl #8
   14620:	andeq	r4, r1, r8, lsl #8
   14624:	andeq	r4, r1, r0, lsr #9
   14628:	andeq	r4, r1, r0, lsr #9
   1462c:	andeq	r4, r1, r0, lsr #9
   14630:	andeq	r4, r1, r0, lsr #9
   14634:	andeq	r4, r1, r0, lsr #9
   14638:	andeq	r4, r1, r0, lsr #9
   1463c:	andeq	r4, r1, r0, lsr #9
   14640:	andeq	r4, r1, r0, lsr #9
   14644:	andeq	r4, r1, r0, lsr #9
   14648:	andeq	r4, r1, r0, lsr #9
   1464c:	andeq	r4, r1, r0, lsr #9
   14650:	andeq	r4, r1, r0, lsr #9
   14654:	andeq	r4, r1, r0, lsr #9
   14658:	andeq	r4, r1, r0, lsr #9
   1465c:	andeq	r4, r1, r0, lsr #9
   14660:	andeq	r4, r1, r0, lsr #9
   14664:	andeq	r4, r1, r8, lsl #8
   14668:	andeq	r4, r1, r8, lsl #8
   1466c:	andeq	r4, r1, r8, lsl #8
   14670:	andeq	r4, r1, r8, lsl #8
   14674:	andeq	r4, r1, r4, asr #8
   14678:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   1467c:	andeq	r4, r1, r0, lsr #9
   14680:	andeq	r4, r1, r0, lsr #9
   14684:	andeq	r4, r1, r0, lsr #9
   14688:	andeq	r4, r1, r0, lsr #9
   1468c:	andeq	r4, r1, r0, lsr #9
   14690:	andeq	r4, r1, r0, lsr #9
   14694:	andeq	r4, r1, r0, lsr #9
   14698:	andeq	r4, r1, r0, lsr #9
   1469c:	andeq	r4, r1, r0, lsr #9
   146a0:	andeq	r4, r1, r0, lsr #9
   146a4:	andeq	r4, r1, r0, lsr #9
   146a8:	andeq	r4, r1, r0, lsr #9
   146ac:	andeq	r4, r1, r0, lsr #9
   146b0:	andeq	r4, r1, r0, lsr #9
   146b4:	andeq	r4, r1, r0, lsr #9
   146b8:	andeq	r4, r1, r0, lsr #9
   146bc:	andeq	r4, r1, r0, lsr #9
   146c0:	andeq	r4, r1, r0, lsr #9
   146c4:	andeq	r4, r1, r0, lsr #9
   146c8:	andeq	r4, r1, r0, lsr #9
   146cc:	andeq	r4, r1, r0, lsr #9
   146d0:	andeq	r4, r1, r0, lsr #9
   146d4:	andeq	r4, r1, r0, lsr #9
   146d8:	andeq	r4, r1, r0, lsr #9
   146dc:	andeq	r4, r1, r0, lsr #9
   146e0:	andeq	r4, r1, r0, lsr #9
   146e4:	andeq	r4, r1, r8, lsl #8
   146e8:	andeq	r4, r1, r4, ror #2
   146ec:	andeq	r4, r1, r0, lsr #9
   146f0:	andeq	r4, r1, r8, lsl #8
   146f4:	andeq	r4, r1, r0, lsr #9
   146f8:	andeq	r4, r1, r8, lsl #8
   146fc:	andeq	r4, r1, r0, lsr #9
   14700:	andeq	r4, r1, r0, lsr #9
   14704:	andeq	r4, r1, r0, lsr #9
   14708:	andeq	r4, r1, r0, lsr #9
   1470c:	andeq	r4, r1, r0, lsr #9
   14710:	andeq	r4, r1, r0, lsr #9
   14714:	andeq	r4, r1, r0, lsr #9
   14718:	andeq	r4, r1, r0, lsr #9
   1471c:	andeq	r4, r1, r0, lsr #9
   14720:	andeq	r4, r1, r0, lsr #9
   14724:	andeq	r4, r1, r0, lsr #9
   14728:	andeq	r4, r1, r0, lsr #9
   1472c:	andeq	r4, r1, r0, lsr #9
   14730:	andeq	r4, r1, r0, lsr #9
   14734:	andeq	r4, r1, r0, lsr #9
   14738:	andeq	r4, r1, r0, lsr #9
   1473c:	andeq	r4, r1, r0, lsr #9
   14740:	andeq	r4, r1, r0, lsr #9
   14744:	andeq	r4, r1, r0, lsr #9
   14748:	andeq	r4, r1, r0, lsr #9
   1474c:	andeq	r4, r1, r0, lsr #9
   14750:	andeq	r4, r1, r0, lsr #9
   14754:	andeq	r4, r1, r0, lsr #9
   14758:	andeq	r4, r1, r0, lsr #9
   1475c:	andeq	r4, r1, r0, lsr #9
   14760:	andeq	r4, r1, r0, lsr #9
   14764:	strdeq	r3, [r1], -r8
   14768:	andeq	r4, r1, r8, lsl #8
   1476c:	strdeq	r3, [r1], -r8
   14770:	andeq	r4, r1, r8, lsl r0
   14774:	mov	r3, #116	; 0x74
   14778:	b	14248 <__assert_fail@plt+0x2ec0>
   1477c:	ldr	r3, [sp, #160]	; 0xa0
   14780:	cmp	r3, #0
   14784:	beq	14054 <__assert_fail@plt+0x2ccc>
   14788:	lsr	r3, r4, #5
   1478c:	ldr	r0, [sp, #160]	; 0xa0
   14790:	uxtb	r3, r3
   14794:	and	r1, r4, #31
   14798:	ldr	r0, [r0, r3, lsl #2]
   1479c:	lsr	r3, r0, r1
   147a0:	tst	r3, #1
   147a4:	beq	14054 <__assert_fail@plt+0x2ccc>
   147a8:	ldr	r3, [sp, #28]
   147ac:	cmp	r3, #0
   147b0:	beq	141b4 <__assert_fail@plt+0x2e2c>
   147b4:	ldr	sl, [sp, #32]
   147b8:	mov	r8, fp
   147bc:	b	14278 <__assert_fail@plt+0x2ef0>
   147c0:	ldr	r3, [sp, #28]
   147c4:	cmp	r3, #0
   147c8:	bne	14d1c <__assert_fail@plt+0x3994>
   147cc:	add	sl, sl, #1
   147d0:	ldr	r6, [sp, #40]	; 0x28
   147d4:	mov	r5, #0
   147d8:	mov	r4, #92	; 0x5c
   147dc:	b	14070 <__assert_fail@plt+0x2ce8>
   147e0:	cmp	r9, r8
   147e4:	bne	14a54 <__assert_fail@plt+0x36cc>
   147e8:	ldr	r0, [sp, #100]	; 0x64
   147ec:	bl	1116c <iswprint@plt>
   147f0:	add	r5, r5, r4
   147f4:	cmp	r0, #0
   147f8:	add	r0, sp, #104	; 0x68
   147fc:	moveq	r6, #0
   14800:	bl	11100 <mbsinit@plt>
   14804:	cmp	r0, #0
   14808:	beq	149e8 <__assert_fail@plt+0x3660>
   1480c:	mov	r2, r6
   14810:	mov	ip, r5
   14814:	eor	r5, r2, #1
   14818:	ldr	r4, [sp, #80]	; 0x50
   1481c:	ldr	r6, [sp, #84]	; 0x54
   14820:	ldr	r7, [sp, #88]	; 0x58
   14824:	uxtb	r5, r5
   14828:	cmp	ip, #1
   1482c:	bls	14d2c <__assert_fail@plt+0x39a4>
   14830:	ldr	r3, [sp, #44]	; 0x2c
   14834:	and	r8, r3, r5
   14838:	mov	r5, r2
   1483c:	uxtb	r8, r8
   14840:	add	r2, sl, ip
   14844:	ldr	r0, [sp, #48]	; 0x30
   14848:	mov	r1, #0
   1484c:	str	r5, [sp, #48]	; 0x30
   14850:	ldr	r9, [sp, #28]
   14854:	ldr	ip, [sp, #40]	; 0x28
   14858:	ldr	r3, [sp, #32]
   1485c:	ldr	r5, [sp, #152]	; 0x98
   14860:	b	1491c <__assert_fail@plt+0x3594>
   14864:	cmp	r9, #0
   14868:	bne	14c40 <__assert_fail@plt+0x38b8>
   1486c:	eor	r1, ip, #1
   14870:	cmp	r5, #2
   14874:	movne	r1, #0
   14878:	andeq	r1, r1, #1
   1487c:	cmp	r1, #0
   14880:	beq	148b8 <__assert_fail@plt+0x3530>
   14884:	cmp	fp, r7
   14888:	movhi	ip, #39	; 0x27
   1488c:	strbhi	ip, [r3, r7]
   14890:	add	ip, r7, #1
   14894:	cmp	fp, ip
   14898:	movhi	lr, #36	; 0x24
   1489c:	strbhi	lr, [r3, ip]
   148a0:	add	ip, r7, #2
   148a4:	cmp	fp, ip
   148a8:	movhi	lr, #39	; 0x27
   148ac:	strbhi	lr, [r3, ip]
   148b0:	add	r7, r7, #3
   148b4:	mov	ip, r1
   148b8:	cmp	fp, r7
   148bc:	movhi	r1, #92	; 0x5c
   148c0:	strbhi	r1, [r3, r7]
   148c4:	add	r1, r7, #1
   148c8:	cmp	fp, r1
   148cc:	lsrhi	lr, r4, #6
   148d0:	addhi	lr, lr, #48	; 0x30
   148d4:	strbhi	lr, [r3, r1]
   148d8:	add	lr, r7, #2
   148dc:	cmp	fp, lr
   148e0:	lsrhi	r1, r4, #3
   148e4:	andhi	r1, r1, #7
   148e8:	addhi	r1, r1, #48	; 0x30
   148ec:	add	sl, sl, #1
   148f0:	strbhi	r1, [r3, lr]
   148f4:	and	r4, r4, #7
   148f8:	cmp	r2, sl
   148fc:	add	r4, r4, #48	; 0x30
   14900:	add	r7, r7, #3
   14904:	bls	14c64 <__assert_fail@plt+0x38dc>
   14908:	mov	r1, r8
   1490c:	cmp	fp, r7
   14910:	strbhi	r4, [r3, r7]
   14914:	ldrb	r4, [r0, #1]!
   14918:	add	r7, r7, #1
   1491c:	cmp	r8, #0
   14920:	bne	14864 <__assert_fail@plt+0x34dc>
   14924:	cmp	r6, #0
   14928:	bne	14978 <__assert_fail@plt+0x35f0>
   1492c:	eor	r6, r1, #1
   14930:	and	r6, r6, ip
   14934:	add	sl, sl, #1
   14938:	cmp	r2, sl
   1493c:	uxtb	r6, r6
   14940:	bls	149a0 <__assert_fail@plt+0x3618>
   14944:	cmp	r6, #0
   14948:	beq	1490c <__assert_fail@plt+0x3584>
   1494c:	cmp	fp, r7
   14950:	movhi	ip, #39	; 0x27
   14954:	strbhi	ip, [r3, r7]
   14958:	add	ip, r7, #1
   1495c:	cmp	fp, ip
   14960:	movhi	lr, #39	; 0x27
   14964:	strbhi	lr, [r3, ip]
   14968:	add	r7, r7, #2
   1496c:	mov	r6, r8
   14970:	mov	ip, r8
   14974:	b	1490c <__assert_fail@plt+0x3584>
   14978:	cmp	fp, r7
   1497c:	eor	r6, r1, #1
   14980:	movhi	lr, #92	; 0x5c
   14984:	and	r6, r6, ip
   14988:	add	sl, sl, #1
   1498c:	strbhi	lr, [r3, r7]
   14990:	cmp	r2, sl
   14994:	add	r7, r7, #1
   14998:	uxtb	r6, r6
   1499c:	bhi	14944 <__assert_fail@plt+0x35bc>
   149a0:	str	ip, [sp, #40]	; 0x28
   149a4:	ldr	r5, [sp, #48]	; 0x30
   149a8:	b	14070 <__assert_fail@plt+0x2ce8>
   149ac:	ldr	r3, [sp, #24]
   149b0:	cmn	r3, #1
   149b4:	mov	r3, #0
   149b8:	str	r3, [sp, #104]	; 0x68
   149bc:	str	r3, [sp, #108]	; 0x6c
   149c0:	beq	14ce0 <__assert_fail@plt+0x3958>
   149c4:	mov	r2, r5
   149c8:	mov	r3, #0
   149cc:	str	r7, [sp, #88]	; 0x58
   149d0:	ldr	r7, [sp, #152]	; 0x98
   149d4:	str	r5, [sp, #92]	; 0x5c
   149d8:	str	r6, [sp, #84]	; 0x54
   149dc:	mov	r5, r3
   149e0:	mov	r6, r2
   149e4:	str	r4, [sp, #80]	; 0x50
   149e8:	ldr	r3, [sp, #56]	; 0x38
   149ec:	add	r9, sl, r5
   149f0:	add	r8, r3, r9
   149f4:	ldr	r3, [sp, #24]
   149f8:	mov	r1, r8
   149fc:	sub	r2, r3, r9
   14a00:	add	r0, sp, #100	; 0x64
   14a04:	add	r3, sp, #104	; 0x68
   14a08:	bl	1370c <__assert_fail@plt+0x2384>
   14a0c:	subs	r4, r0, #0
   14a10:	beq	14db8 <__assert_fail@plt+0x3a30>
   14a14:	cmn	r4, #1
   14a18:	beq	14d98 <__assert_fail@plt+0x3a10>
   14a1c:	cmn	r4, #2
   14a20:	beq	14d38 <__assert_fail@plt+0x39b0>
   14a24:	ldr	r2, [sp, #28]
   14a28:	cmp	r7, #2
   14a2c:	movne	r2, #0
   14a30:	andeq	r2, r2, #1
   14a34:	cmp	r2, #0
   14a38:	beq	147e8 <__assert_fail@plt+0x3460>
   14a3c:	cmp	r4, #1
   14a40:	beq	147e8 <__assert_fail@plt+0x3460>
   14a44:	sub	r3, r4, #1
   14a48:	add	r9, r3, r9
   14a4c:	ldr	r3, [sp, #56]	; 0x38
   14a50:	add	r9, r3, r9
   14a54:	ldrb	r3, [r8, #1]!
   14a58:	sub	r3, r3, #91	; 0x5b
   14a5c:	cmp	r3, #33	; 0x21
   14a60:	ldrls	pc, [pc, r3, lsl #2]
   14a64:	b	147e0 <__assert_fail@plt+0x3458>
   14a68:	strdeq	r4, [r1], -r0
   14a6c:	strdeq	r4, [r1], -r0
   14a70:	andeq	r4, r1, r0, ror #15
   14a74:	strdeq	r4, [r1], -r0
   14a78:	andeq	r4, r1, r0, ror #15
   14a7c:	strdeq	r4, [r1], -r0
   14a80:	andeq	r4, r1, r0, ror #15
   14a84:	andeq	r4, r1, r0, ror #15
   14a88:	andeq	r4, r1, r0, ror #15
   14a8c:	andeq	r4, r1, r0, ror #15
   14a90:	andeq	r4, r1, r0, ror #15
   14a94:	andeq	r4, r1, r0, ror #15
   14a98:	andeq	r4, r1, r0, ror #15
   14a9c:	andeq	r4, r1, r0, ror #15
   14aa0:	andeq	r4, r1, r0, ror #15
   14aa4:	andeq	r4, r1, r0, ror #15
   14aa8:	andeq	r4, r1, r0, ror #15
   14aac:	andeq	r4, r1, r0, ror #15
   14ab0:	andeq	r4, r1, r0, ror #15
   14ab4:	andeq	r4, r1, r0, ror #15
   14ab8:	andeq	r4, r1, r0, ror #15
   14abc:	andeq	r4, r1, r0, ror #15
   14ac0:	andeq	r4, r1, r0, ror #15
   14ac4:	andeq	r4, r1, r0, ror #15
   14ac8:	andeq	r4, r1, r0, ror #15
   14acc:	andeq	r4, r1, r0, ror #15
   14ad0:	andeq	r4, r1, r0, ror #15
   14ad4:	andeq	r4, r1, r0, ror #15
   14ad8:	andeq	r4, r1, r0, ror #15
   14adc:	andeq	r4, r1, r0, ror #15
   14ae0:	andeq	r4, r1, r0, ror #15
   14ae4:	andeq	r4, r1, r0, ror #15
   14ae8:	andeq	r4, r1, r0, ror #15
   14aec:	strdeq	r4, [r1], -r0
   14af0:	mov	r3, #2
   14af4:	ldr	sl, [sp, #32]
   14af8:	mov	r8, fp
   14afc:	str	r3, [sp, #152]	; 0x98
   14b00:	b	14278 <__assert_fail@plt+0x2ef0>
   14b04:	ldr	r3, [sp, #156]	; 0x9c
   14b08:	tst	r3, #1
   14b0c:	bne	14c38 <__assert_fail@plt+0x38b0>
   14b10:	ldr	r3, [sp, #152]	; 0x98
   14b14:	ldr	r4, [sp, #44]	; 0x2c
   14b18:	sub	r2, r3, #2
   14b1c:	mov	r5, #0
   14b20:	clz	r2, r2
   14b24:	mov	r8, r4
   14b28:	lsr	r2, r2, #5
   14b2c:	b	14038 <__assert_fail@plt+0x2cb0>
   14b30:	ldr	r3, [sp, #156]	; 0x9c
   14b34:	ands	r9, r3, #4
   14b38:	beq	14c70 <__assert_fail@plt+0x38e8>
   14b3c:	ldr	r2, [sp, #24]
   14b40:	add	r3, sl, #2
   14b44:	cmp	r3, r2
   14b48:	bcs	14b5c <__assert_fail@plt+0x37d4>
   14b4c:	ldr	r2, [sp, #48]	; 0x30
   14b50:	ldrb	r4, [r2, #1]
   14b54:	cmp	r4, #63	; 0x3f
   14b58:	beq	14df8 <__assert_fail@plt+0x3a70>
   14b5c:	mov	r2, #0
   14b60:	mov	r8, r2
   14b64:	mov	r5, r2
   14b68:	mov	r4, #63	; 0x3f
   14b6c:	b	14038 <__assert_fail@plt+0x2cb0>
   14b70:	ldr	r3, [sp, #28]
   14b74:	cmp	r3, #0
   14b78:	bne	14e9c <__assert_fail@plt+0x3b14>
   14b7c:	mov	r2, r5
   14b80:	mov	r8, r3
   14b84:	mov	r5, #0
   14b88:	mov	r4, #63	; 0x3f
   14b8c:	b	14038 <__assert_fail@plt+0x2cb0>
   14b90:	ldr	r3, [sp, #28]
   14b94:	cmp	r3, #0
   14b98:	bne	14e9c <__assert_fail@plt+0x3b14>
   14b9c:	ldr	r2, [sp, #72]	; 0x48
   14ba0:	adds	r3, fp, #0
   14ba4:	movne	r3, #1
   14ba8:	cmp	r2, #0
   14bac:	movne	r3, #0
   14bb0:	cmp	r3, #0
   14bb4:	strne	fp, [sp, #72]	; 0x48
   14bb8:	movne	fp, #0
   14bbc:	bne	14bf8 <__assert_fail@plt+0x3870>
   14bc0:	cmp	fp, r7
   14bc4:	movhi	r2, #39	; 0x27
   14bc8:	ldrhi	r3, [sp, #32]
   14bcc:	strbhi	r2, [r3, r7]
   14bd0:	add	r3, r7, #1
   14bd4:	cmp	fp, r3
   14bd8:	movhi	r1, #92	; 0x5c
   14bdc:	ldrhi	r2, [sp, #32]
   14be0:	strbhi	r1, [r2, r3]
   14be4:	add	r3, r7, #2
   14be8:	cmp	fp, r3
   14bec:	movhi	r1, #39	; 0x27
   14bf0:	ldrhi	r2, [sp, #32]
   14bf4:	strbhi	r1, [r2, r3]
   14bf8:	ldr	r3, [sp, #28]
   14bfc:	add	r7, r7, #3
   14c00:	mov	r2, r5
   14c04:	mov	r8, r3
   14c08:	str	r5, [sp, #68]	; 0x44
   14c0c:	str	r3, [sp, #40]	; 0x28
   14c10:	mov	r4, #39	; 0x27
   14c14:	b	14038 <__assert_fail@plt+0x2cb0>
   14c18:	ldr	r3, [sp, #56]	; 0x38
   14c1c:	ldrb	r3, [r3, #1]
   14c20:	adds	r3, r3, #0
   14c24:	movne	r3, #1
   14c28:	b	14010 <__assert_fail@plt+0x2c88>
   14c2c:	ldr	r5, [sp, #28]
   14c30:	mov	r4, #48	; 0x30
   14c34:	b	14038 <__assert_fail@plt+0x2cb0>
   14c38:	add	sl, sl, #1
   14c3c:	b	13b68 <__assert_fail@plt+0x27e0>
   14c40:	mov	sl, r3
   14c44:	ldr	r3, [sp, #28]
   14c48:	mov	r8, fp
   14c4c:	str	r3, [sp, #44]	; 0x2c
   14c50:	ldr	r3, [sp, #152]	; 0x98
   14c54:	sub	r2, r3, #2
   14c58:	clz	r2, r2
   14c5c:	lsr	r2, r2, #5
   14c60:	b	14278 <__assert_fail@plt+0x2ef0>
   14c64:	str	ip, [sp, #40]	; 0x28
   14c68:	ldr	r5, [sp, #48]	; 0x30
   14c6c:	b	140a8 <__assert_fail@plt+0x2d20>
   14c70:	mov	r2, r9
   14c74:	mov	r8, r9
   14c78:	mov	r5, #0
   14c7c:	mov	r4, #63	; 0x3f
   14c80:	b	14038 <__assert_fail@plt+0x2cb0>
   14c84:	cmp	fp, #0
   14c88:	beq	14d00 <__assert_fail@plt+0x3978>
   14c8c:	ldr	r1, [sp, #32]
   14c90:	mov	r3, #34	; 0x22
   14c94:	mov	r2, #1
   14c98:	strb	r3, [r1]
   14c9c:	ldr	r3, [pc, #332]	; 14df0 <__assert_fail@plt+0x3a68>
   14ca0:	str	r2, [sp, #52]	; 0x34
   14ca4:	mov	r7, r2
   14ca8:	str	r2, [sp, #44]	; 0x2c
   14cac:	str	r3, [sp, #64]	; 0x40
   14cb0:	b	13b58 <__assert_fail@plt+0x27d0>
   14cb4:	ldr	r3, [pc, #300]	; 14de8 <__assert_fail@plt+0x3a60>
   14cb8:	str	r3, [sp, #64]	; 0x40
   14cbc:	mov	r3, #0
   14cc0:	str	r3, [sp, #28]
   14cc4:	mov	r3, #1
   14cc8:	str	r3, [sp, #52]	; 0x34
   14ccc:	mov	r7, r3
   14cd0:	mov	r3, #2
   14cd4:	str	r3, [sp, #152]	; 0x98
   14cd8:	b	13b58 <__assert_fail@plt+0x27d0>
   14cdc:	bl	11370 <abort@plt>
   14ce0:	ldr	r0, [sp, #56]	; 0x38
   14ce4:	bl	1125c <strlen@plt>
   14ce8:	str	r0, [sp, #24]
   14cec:	b	149c4 <__assert_fail@plt+0x363c>
   14cf0:	mov	r5, r8
   14cf4:	mov	r4, #48	; 0x30
   14cf8:	ldr	r8, [sp, #44]	; 0x2c
   14cfc:	b	14038 <__assert_fail@plt+0x2cb0>
   14d00:	mov	r3, #1
   14d04:	str	r3, [sp, #52]	; 0x34
   14d08:	mov	r7, r3
   14d0c:	str	r3, [sp, #44]	; 0x2c
   14d10:	ldr	r3, [pc, #216]	; 14df0 <__assert_fail@plt+0x3a68>
   14d14:	str	r3, [sp, #64]	; 0x40
   14d18:	b	13b58 <__assert_fail@plt+0x27d0>
   14d1c:	ldr	sl, [sp, #32]
   14d20:	mov	r8, fp
   14d24:	mov	r2, r3
   14d28:	b	14278 <__assert_fail@plt+0x2ef0>
   14d2c:	mov	r3, r5
   14d30:	mov	r5, r2
   14d34:	b	14530 <__assert_fail@plt+0x31a8>
   14d38:	ldr	r1, [sp, #24]
   14d3c:	mov	r2, r5
   14d40:	cmp	r1, r9
   14d44:	mov	ip, r5
   14d48:	ldr	r4, [sp, #80]	; 0x50
   14d4c:	ldr	r5, [sp, #92]	; 0x5c
   14d50:	ldr	r6, [sp, #84]	; 0x54
   14d54:	ldr	r7, [sp, #88]	; 0x58
   14d58:	bls	14d8c <__assert_fail@plt+0x3a04>
   14d5c:	ldrb	r3, [r8]
   14d60:	cmp	r3, #0
   14d64:	bne	14d78 <__assert_fail@plt+0x39f0>
   14d68:	b	14d90 <__assert_fail@plt+0x3a08>
   14d6c:	ldrb	r3, [r8, #1]!
   14d70:	cmp	r3, #0
   14d74:	beq	14e90 <__assert_fail@plt+0x3b08>
   14d78:	add	r2, r2, #1
   14d7c:	add	r3, sl, r2
   14d80:	cmp	r1, r3
   14d84:	bhi	14d6c <__assert_fail@plt+0x39e4>
   14d88:	mov	ip, r2
   14d8c:	mov	r3, #0
   14d90:	mov	r2, r3
   14d94:	b	14828 <__assert_fail@plt+0x34a0>
   14d98:	mov	r3, #0
   14d9c:	mov	ip, r5
   14da0:	ldr	r4, [sp, #80]	; 0x50
   14da4:	ldr	r5, [sp, #92]	; 0x5c
   14da8:	ldr	r6, [sp, #84]	; 0x54
   14dac:	ldr	r7, [sp, #88]	; 0x58
   14db0:	mov	r2, r3
   14db4:	b	14828 <__assert_fail@plt+0x34a0>
   14db8:	mov	r3, r6
   14dbc:	mov	ip, r5
   14dc0:	eor	r5, r3, #1
   14dc4:	mov	r2, r6
   14dc8:	ldr	r4, [sp, #80]	; 0x50
   14dcc:	ldr	r6, [sp, #84]	; 0x54
   14dd0:	ldr	r7, [sp, #88]	; 0x58
   14dd4:	uxtb	r5, r5
   14dd8:	b	14828 <__assert_fail@plt+0x34a0>
   14ddc:	ldr	sl, [sp, #32]
   14de0:	mov	r8, fp
   14de4:	b	14c4c <__assert_fail@plt+0x38c4>
   14de8:	andeq	r7, r1, r8, lsr #30
   14dec:	andeq	r7, r1, ip, lsr #30
   14df0:	andeq	r7, r1, r4, lsr #30
   14df4:	stmdacc	r0, {r0, r6, r7, r8, ip, lr}
   14df8:	ldr	r2, [sp, #56]	; 0x38
   14dfc:	ldrb	r1, [r2, r3]
   14e00:	sub	r2, r1, #33	; 0x21
   14e04:	uxtb	r2, r2
   14e08:	cmp	r2, #29
   14e0c:	bhi	14eac <__assert_fail@plt+0x3b24>
   14e10:	ldr	r0, [pc, #-36]	; 14df4 <__assert_fail@plt+0x3a6c>
   14e14:	mov	ip, #1
   14e18:	ands	r2, r0, ip, lsl r2
   14e1c:	beq	14ebc <__assert_fail@plt+0x3b34>
   14e20:	ldr	r2, [sp, #28]
   14e24:	cmp	r2, #0
   14e28:	bne	14fbc <__assert_fail@plt+0x3c34>
   14e2c:	cmp	fp, r7
   14e30:	ldr	r8, [sp, #28]
   14e34:	ldrhi	r2, [sp, #32]
   14e38:	mov	sl, r3
   14e3c:	mov	r5, r8
   14e40:	strbhi	r4, [r2, r7]
   14e44:	add	r2, r7, #1
   14e48:	cmp	fp, r2
   14e4c:	movhi	r0, #34	; 0x22
   14e50:	ldrhi	ip, [sp, #32]
   14e54:	mov	r4, r1
   14e58:	strbhi	r0, [ip, r2]
   14e5c:	add	r2, r7, #2
   14e60:	cmp	fp, r2
   14e64:	movhi	r0, #34	; 0x22
   14e68:	ldrhi	ip, [sp, #32]
   14e6c:	strbhi	r0, [ip, r2]
   14e70:	add	r2, r7, #3
   14e74:	cmp	fp, r2
   14e78:	movhi	r0, #63	; 0x3f
   14e7c:	ldrhi	ip, [sp, #32]
   14e80:	add	r7, r7, #4
   14e84:	strbhi	r0, [ip, r2]
   14e88:	mov	r2, r8
   14e8c:	b	14038 <__assert_fail@plt+0x2cb0>
   14e90:	mov	ip, r2
   14e94:	mov	r2, r3
   14e98:	b	14828 <__assert_fail@plt+0x34a0>
   14e9c:	ldr	sl, [sp, #32]
   14ea0:	mov	r8, fp
   14ea4:	ldr	r2, [sp, #28]
   14ea8:	b	14278 <__assert_fail@plt+0x2ef0>
   14eac:	mov	r2, #0
   14eb0:	mov	r8, r2
   14eb4:	mov	r5, r2
   14eb8:	b	14038 <__assert_fail@plt+0x2cb0>
   14ebc:	mov	r8, r2
   14ec0:	mov	r5, #0
   14ec4:	b	14038 <__assert_fail@plt+0x2cb0>
   14ec8:	ldr	r1, [sp, #152]	; 0x98
   14ecc:	bl	13994 <__assert_fail@plt+0x260c>
   14ed0:	str	r0, [sp, #168]	; 0xa8
   14ed4:	b	13ef4 <__assert_fail@plt+0x2b6c>
   14ed8:	ldr	r1, [sp, #152]	; 0x98
   14edc:	bl	13994 <__assert_fail@plt+0x260c>
   14ee0:	str	r0, [sp, #164]	; 0xa4
   14ee4:	b	13ed4 <__assert_fail@plt+0x2b4c>
   14ee8:	ldr	r7, [sp, #28]
   14eec:	b	13f34 <__assert_fail@plt+0x2bac>
   14ef0:	ldr	sl, [sp, #32]
   14ef4:	ldr	r2, [sp, #68]	; 0x44
   14ef8:	mov	r8, fp
   14efc:	mov	fp, r7
   14f00:	ldr	r3, [sp, #64]	; 0x40
   14f04:	cmp	r3, #0
   14f08:	moveq	r2, #0
   14f0c:	andne	r2, r2, #1
   14f10:	cmp	r2, #0
   14f14:	beq	14f40 <__assert_fail@plt+0x3bb8>
   14f18:	mov	r2, r3
   14f1c:	ldrb	r3, [r3]
   14f20:	cmp	r3, #0
   14f24:	beq	14f40 <__assert_fail@plt+0x3bb8>
   14f28:	cmp	r8, fp
   14f2c:	strbhi	r3, [sl, fp]
   14f30:	ldrb	r3, [r2, #1]!
   14f34:	add	fp, fp, #1
   14f38:	cmp	r3, #0
   14f3c:	bne	14f28 <__assert_fail@plt+0x3ba0>
   14f40:	cmp	r8, fp
   14f44:	movhi	r3, #0
   14f48:	strbhi	r3, [sl, fp]
   14f4c:	b	142d4 <__assert_fail@plt+0x2f4c>
   14f50:	ldr	r3, [sp, #168]	; 0xa8
   14f54:	ldr	sl, [sp, #32]
   14f58:	str	r3, [sp, #16]
   14f5c:	ldr	r3, [sp, #164]	; 0xa4
   14f60:	mov	ip, #5
   14f64:	str	r3, [sp, #12]
   14f68:	ldr	r3, [sp, #160]	; 0xa0
   14f6c:	ldr	r2, [sp, #56]	; 0x38
   14f70:	str	r3, [sp, #8]
   14f74:	ldr	r3, [sp, #156]	; 0x9c
   14f78:	ldr	r1, [sp, #72]	; 0x48
   14f7c:	str	r3, [sp, #4]
   14f80:	mov	r0, sl
   14f84:	ldr	r3, [sp, #24]
   14f88:	str	ip, [sp]
   14f8c:	bl	13ab4 <__assert_fail@plt+0x272c>
   14f90:	mov	fp, r0
   14f94:	b	142d4 <__assert_fail@plt+0x2f4c>
   14f98:	mov	r8, fp
   14f9c:	ldr	sl, [sp, #32]
   14fa0:	mov	fp, r7
   14fa4:	mov	r2, r3
   14fa8:	b	14f00 <__assert_fail@plt+0x3b78>
   14fac:	mov	r8, fp
   14fb0:	ldr	sl, [sp, #32]
   14fb4:	mov	fp, r7
   14fb8:	b	14f00 <__assert_fail@plt+0x3b78>
   14fbc:	ldr	sl, [sp, #32]
   14fc0:	mov	r8, fp
   14fc4:	b	14290 <__assert_fail@plt+0x2f08>
   14fc8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14fcc:	sub	sp, sp, #52	; 0x34
   14fd0:	mov	r4, r0
   14fd4:	mov	r5, r3
   14fd8:	mov	sl, r1
   14fdc:	mov	fp, r2
   14fe0:	bl	11280 <__errno_location@plt>
   14fe4:	ldr	r7, [pc, #412]	; 15188 <__assert_fail@plt+0x3e00>
   14fe8:	cmn	r4, #-2147483647	; 0x80000001
   14fec:	ldr	r6, [r7]
   14ff0:	mov	r8, r0
   14ff4:	movne	r0, #0
   14ff8:	moveq	r0, #1
   14ffc:	ldr	r3, [r8]
   15000:	orrs	r0, r0, r4, lsr #31
   15004:	str	r3, [sp, #24]
   15008:	bne	15184 <__assert_fail@plt+0x3dfc>
   1500c:	ldr	r2, [r7, #4]
   15010:	cmp	r4, r2
   15014:	blt	15074 <__assert_fail@plt+0x3cec>
   15018:	add	r9, r7, #8
   1501c:	cmp	r6, r9
   15020:	str	r2, [sp, #44]	; 0x2c
   15024:	beq	15154 <__assert_fail@plt+0x3dcc>
   15028:	mov	r3, #8
   1502c:	sub	r2, r4, r2
   15030:	mov	r0, r6
   15034:	str	r3, [sp]
   15038:	add	r2, r2, #1
   1503c:	mvn	r3, #-2147483648	; 0x80000000
   15040:	add	r1, sp, #44	; 0x2c
   15044:	bl	161b4 <__assert_fail@plt+0x4e2c>
   15048:	mov	r6, r0
   1504c:	str	r0, [r7]
   15050:	ldr	r0, [r7, #4]
   15054:	ldr	r2, [sp, #44]	; 0x2c
   15058:	mov	r1, #0
   1505c:	sub	r2, r2, r0
   15060:	add	r0, r6, r0, lsl #3
   15064:	lsl	r2, r2, #3
   15068:	bl	112a4 <memset@plt>
   1506c:	ldr	r3, [sp, #44]	; 0x2c
   15070:	str	r3, [r7, #4]
   15074:	add	r3, r6, r4, lsl #3
   15078:	ldr	r1, [r5, #4]
   1507c:	ldr	r7, [r3, #4]
   15080:	ldr	r9, [r6, r4, lsl #3]
   15084:	ldr	r2, [r5, #40]	; 0x28
   15088:	ldr	ip, [r5, #44]	; 0x2c
   1508c:	add	r0, r5, #8
   15090:	str	r3, [sp, #28]
   15094:	ldr	r3, [r5]
   15098:	orr	r1, r1, #1
   1509c:	mov	lr, r0
   150a0:	str	r1, [sp, #32]
   150a4:	str	r0, [sp, #36]	; 0x24
   150a8:	str	r1, [sp, #4]
   150ac:	str	r2, [sp, #12]
   150b0:	str	r3, [sp]
   150b4:	mov	r0, r7
   150b8:	mov	r1, r9
   150bc:	str	ip, [sp, #16]
   150c0:	str	lr, [sp, #8]
   150c4:	mov	r3, fp
   150c8:	mov	r2, sl
   150cc:	bl	13ab4 <__assert_fail@plt+0x272c>
   150d0:	cmp	r9, r0
   150d4:	bhi	15140 <__assert_fail@plt+0x3db8>
   150d8:	ldr	r3, [pc, #172]	; 1518c <__assert_fail@plt+0x3e04>
   150dc:	add	r9, r0, #1
   150e0:	cmp	r7, r3
   150e4:	str	r9, [r6, r4, lsl #3]
   150e8:	beq	150f4 <__assert_fail@plt+0x3d6c>
   150ec:	mov	r0, r7
   150f0:	bl	1350c <__assert_fail@plt+0x2184>
   150f4:	mov	r0, r9
   150f8:	bl	16050 <__assert_fail@plt+0x4cc8>
   150fc:	ldr	lr, [sp, #28]
   15100:	ldr	ip, [r5, #44]	; 0x2c
   15104:	ldr	r4, [r5, #40]	; 0x28
   15108:	mov	r3, fp
   1510c:	mov	r2, sl
   15110:	mov	r1, r9
   15114:	str	r0, [lr, #4]
   15118:	ldr	lr, [r5]
   1511c:	ldr	r5, [sp, #36]	; 0x24
   15120:	str	ip, [sp, #16]
   15124:	str	r5, [sp, #8]
   15128:	ldr	r5, [sp, #32]
   1512c:	str	r4, [sp, #12]
   15130:	str	r5, [sp, #4]
   15134:	str	lr, [sp]
   15138:	mov	r7, r0
   1513c:	bl	13ab4 <__assert_fail@plt+0x272c>
   15140:	ldr	r3, [sp, #24]
   15144:	mov	r0, r7
   15148:	str	r3, [r8]
   1514c:	add	sp, sp, #52	; 0x34
   15150:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15154:	mov	r3, #8
   15158:	sub	r2, r4, r2
   1515c:	str	r3, [sp]
   15160:	add	r1, sp, #44	; 0x2c
   15164:	add	r2, r2, #1
   15168:	mvn	r3, #-2147483648	; 0x80000000
   1516c:	bl	161b4 <__assert_fail@plt+0x4e2c>
   15170:	mov	r6, r0
   15174:	ldm	r9, {r0, r1}
   15178:	str	r6, [r7]
   1517c:	stm	r6, {r0, r1}
   15180:	b	15050 <__assert_fail@plt+0x3cc8>
   15184:	bl	11370 <abort@plt>
   15188:	andeq	r9, r2, r0, lsr r1
   1518c:	strdeq	r9, [r2], -r4
   15190:	push	{r4, r5, r6, lr}
   15194:	mov	r5, r0
   15198:	bl	11280 <__errno_location@plt>
   1519c:	cmp	r5, #0
   151a0:	mov	r1, #48	; 0x30
   151a4:	mov	r4, r0
   151a8:	ldr	r0, [pc, #16]	; 151c0 <__assert_fail@plt+0x3e38>
   151ac:	ldr	r6, [r4]
   151b0:	movne	r0, r5
   151b4:	bl	164b0 <__assert_fail@plt+0x5128>
   151b8:	str	r6, [r4]
   151bc:	pop	{r4, r5, r6, pc}
   151c0:	strdeq	r9, [r2], -r4
   151c4:	ldr	r3, [pc, #12]	; 151d8 <__assert_fail@plt+0x3e50>
   151c8:	cmp	r0, #0
   151cc:	moveq	r0, r3
   151d0:	ldr	r0, [r0]
   151d4:	bx	lr
   151d8:	strdeq	r9, [r2], -r4
   151dc:	ldr	r3, [pc, #12]	; 151f0 <__assert_fail@plt+0x3e68>
   151e0:	cmp	r0, #0
   151e4:	moveq	r0, r3
   151e8:	str	r1, [r0]
   151ec:	bx	lr
   151f0:	strdeq	r9, [r2], -r4
   151f4:	ldr	r3, [pc, #52]	; 15230 <__assert_fail@plt+0x3ea8>
   151f8:	cmp	r0, #0
   151fc:	moveq	r0, r3
   15200:	add	r3, r0, #8
   15204:	push	{lr}		; (str lr, [sp, #-4]!)
   15208:	lsr	lr, r1, #5
   1520c:	and	r1, r1, #31
   15210:	ldr	ip, [r3, lr, lsl #2]
   15214:	lsr	r0, ip, r1
   15218:	eor	r2, r2, r0
   1521c:	and	r2, r2, #1
   15220:	and	r0, r0, #1
   15224:	eor	r1, ip, r2, lsl r1
   15228:	str	r1, [r3, lr, lsl #2]
   1522c:	pop	{pc}		; (ldr pc, [sp], #4)
   15230:	strdeq	r9, [r2], -r4
   15234:	ldr	r3, [pc, #16]	; 1524c <__assert_fail@plt+0x3ec4>
   15238:	cmp	r0, #0
   1523c:	movne	r3, r0
   15240:	ldr	r0, [r3, #4]
   15244:	str	r1, [r3, #4]
   15248:	bx	lr
   1524c:	strdeq	r9, [r2], -r4
   15250:	ldr	r3, [pc, #44]	; 15284 <__assert_fail@plt+0x3efc>
   15254:	cmp	r0, #0
   15258:	moveq	r0, r3
   1525c:	mov	ip, #10
   15260:	cmp	r2, #0
   15264:	cmpne	r1, #0
   15268:	str	ip, [r0]
   1526c:	beq	1527c <__assert_fail@plt+0x3ef4>
   15270:	str	r1, [r0, #40]	; 0x28
   15274:	str	r2, [r0, #44]	; 0x2c
   15278:	bx	lr
   1527c:	push	{r4, lr}
   15280:	bl	11370 <abort@plt>
   15284:	strdeq	r9, [r2], -r4
   15288:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1528c:	sub	sp, sp, #24
   15290:	ldr	ip, [pc, #108]	; 15304 <__assert_fail@plt+0x3f7c>
   15294:	ldr	r4, [sp, #56]	; 0x38
   15298:	mov	r9, r2
   1529c:	cmp	r4, #0
   152a0:	moveq	r4, ip
   152a4:	mov	sl, r3
   152a8:	mov	r7, r0
   152ac:	mov	r8, r1
   152b0:	bl	11280 <__errno_location@plt>
   152b4:	ldr	r3, [r4, #44]	; 0x2c
   152b8:	mov	r1, r8
   152bc:	ldr	r6, [r0]
   152c0:	str	r3, [sp, #16]
   152c4:	ldr	r2, [r4, #40]	; 0x28
   152c8:	add	r3, r4, #8
   152cc:	str	r3, [sp, #8]
   152d0:	str	r2, [sp, #12]
   152d4:	ldr	r2, [r4, #4]
   152d8:	mov	r5, r0
   152dc:	str	r2, [sp, #4]
   152e0:	ldr	ip, [r4]
   152e4:	mov	r3, sl
   152e8:	mov	r2, r9
   152ec:	mov	r0, r7
   152f0:	str	ip, [sp]
   152f4:	bl	13ab4 <__assert_fail@plt+0x272c>
   152f8:	str	r6, [r5]
   152fc:	add	sp, sp, #24
   15300:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   15304:	strdeq	r9, [r2], -r4
   15308:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1530c:	cmp	r3, #0
   15310:	sub	sp, sp, #44	; 0x2c
   15314:	ldr	r4, [pc, #192]	; 153dc <__assert_fail@plt+0x4054>
   15318:	mov	r6, r2
   1531c:	movne	r4, r3
   15320:	mov	r9, r1
   15324:	mov	r8, r0
   15328:	bl	11280 <__errno_location@plt>
   1532c:	ldr	r3, [r4, #44]	; 0x2c
   15330:	ldr	r5, [r4, #4]
   15334:	add	sl, r4, #8
   15338:	cmp	r6, #0
   1533c:	orreq	r5, r5, #1
   15340:	mov	r1, #0
   15344:	ldr	r2, [r0]
   15348:	str	r3, [sp, #16]
   1534c:	ldr	r3, [r4, #40]	; 0x28
   15350:	stmib	sp, {r5, sl}
   15354:	str	r3, [sp, #12]
   15358:	ldr	r3, [r4]
   1535c:	mov	r7, r0
   15360:	str	r2, [sp, #28]
   15364:	str	r3, [sp]
   15368:	mov	r2, r8
   1536c:	mov	r3, r9
   15370:	mov	r0, r1
   15374:	bl	13ab4 <__assert_fail@plt+0x272c>
   15378:	add	r1, r0, #1
   1537c:	mov	fp, r0
   15380:	mov	r0, r1
   15384:	str	r1, [sp, #36]	; 0x24
   15388:	bl	16050 <__assert_fail@plt+0x4cc8>
   1538c:	ldr	r3, [r4, #44]	; 0x2c
   15390:	mov	r2, r8
   15394:	str	r3, [sp, #16]
   15398:	ldr	r3, [r4, #40]	; 0x28
   1539c:	str	r5, [sp, #4]
   153a0:	str	r3, [sp, #12]
   153a4:	str	sl, [sp, #8]
   153a8:	ldr	ip, [r4]
   153ac:	ldr	r1, [sp, #36]	; 0x24
   153b0:	mov	r3, r9
   153b4:	str	ip, [sp]
   153b8:	str	r0, [sp, #32]
   153bc:	bl	13ab4 <__assert_fail@plt+0x272c>
   153c0:	ldr	r2, [sp, #28]
   153c4:	cmp	r6, #0
   153c8:	str	r2, [r7]
   153cc:	ldr	r0, [sp, #32]
   153d0:	strne	fp, [r6]
   153d4:	add	sp, sp, #44	; 0x2c
   153d8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   153dc:	strdeq	r9, [r2], -r4
   153e0:	mov	r3, r2
   153e4:	mov	r2, #0
   153e8:	b	15308 <__assert_fail@plt+0x3f80>
   153ec:	push	{r4, r5, r6, r7, r8, lr}
   153f0:	ldr	r6, [pc, #116]	; 1546c <__assert_fail@plt+0x40e4>
   153f4:	ldr	r3, [r6, #4]
   153f8:	ldr	r7, [r6]
   153fc:	cmp	r3, #1
   15400:	movgt	r5, r7
   15404:	movgt	r4, #1
   15408:	ble	15428 <__assert_fail@plt+0x40a0>
   1540c:	ldr	r0, [r5, #12]
   15410:	bl	1350c <__assert_fail@plt+0x2184>
   15414:	ldr	r3, [r6, #4]
   15418:	add	r4, r4, #1
   1541c:	cmp	r3, r4
   15420:	add	r5, r5, #8
   15424:	bgt	1540c <__assert_fail@plt+0x4084>
   15428:	ldr	r0, [r7, #4]
   1542c:	ldr	r4, [pc, #60]	; 15470 <__assert_fail@plt+0x40e8>
   15430:	cmp	r0, r4
   15434:	beq	15448 <__assert_fail@plt+0x40c0>
   15438:	bl	1350c <__assert_fail@plt+0x2184>
   1543c:	mov	r3, #256	; 0x100
   15440:	str	r4, [r6, #12]
   15444:	str	r3, [r6, #8]
   15448:	ldr	r4, [pc, #36]	; 15474 <__assert_fail@plt+0x40ec>
   1544c:	cmp	r7, r4
   15450:	beq	15460 <__assert_fail@plt+0x40d8>
   15454:	mov	r0, r7
   15458:	bl	1350c <__assert_fail@plt+0x2184>
   1545c:	str	r4, [r6]
   15460:	mov	r3, #1
   15464:	str	r3, [r6, #4]
   15468:	pop	{r4, r5, r6, r7, r8, pc}
   1546c:	andeq	r9, r2, r0, lsr r1
   15470:	strdeq	r9, [r2], -r4
   15474:	andeq	r9, r2, r8, lsr r1
   15478:	ldr	r3, [pc, #4]	; 15484 <__assert_fail@plt+0x40fc>
   1547c:	mvn	r2, #0
   15480:	b	14fc8 <__assert_fail@plt+0x3c40>
   15484:	strdeq	r9, [r2], -r4
   15488:	ldr	r3, [pc]	; 15490 <__assert_fail@plt+0x4108>
   1548c:	b	14fc8 <__assert_fail@plt+0x3c40>
   15490:	strdeq	r9, [r2], -r4
   15494:	mov	r1, r0
   15498:	ldr	r3, [pc, #8]	; 154a8 <__assert_fail@plt+0x4120>
   1549c:	mvn	r2, #0
   154a0:	mov	r0, #0
   154a4:	b	14fc8 <__assert_fail@plt+0x3c40>
   154a8:	strdeq	r9, [r2], -r4
   154ac:	mov	r2, r1
   154b0:	ldr	r3, [pc, #8]	; 154c0 <__assert_fail@plt+0x4138>
   154b4:	mov	r1, r0
   154b8:	mov	r0, #0
   154bc:	b	14fc8 <__assert_fail@plt+0x3c40>
   154c0:	strdeq	r9, [r2], -r4
   154c4:	push	{r4, r5, lr}
   154c8:	sub	sp, sp, #52	; 0x34
   154cc:	mov	r5, r2
   154d0:	mov	r4, r0
   154d4:	mov	r0, sp
   154d8:	bl	13964 <__assert_fail@plt+0x25dc>
   154dc:	mov	r3, sp
   154e0:	mov	r1, r5
   154e4:	mov	r0, r4
   154e8:	mvn	r2, #0
   154ec:	bl	14fc8 <__assert_fail@plt+0x3c40>
   154f0:	add	sp, sp, #52	; 0x34
   154f4:	pop	{r4, r5, pc}
   154f8:	push	{r4, r5, r6, lr}
   154fc:	sub	sp, sp, #48	; 0x30
   15500:	mov	r5, r2
   15504:	mov	r6, r3
   15508:	mov	r4, r0
   1550c:	mov	r0, sp
   15510:	bl	13964 <__assert_fail@plt+0x25dc>
   15514:	mov	r3, sp
   15518:	mov	r2, r6
   1551c:	mov	r1, r5
   15520:	mov	r0, r4
   15524:	bl	14fc8 <__assert_fail@plt+0x3c40>
   15528:	add	sp, sp, #48	; 0x30
   1552c:	pop	{r4, r5, r6, pc}
   15530:	mov	r2, r1
   15534:	mov	r1, r0
   15538:	mov	r0, #0
   1553c:	b	154c4 <__assert_fail@plt+0x413c>
   15540:	mov	r3, r2
   15544:	mov	r2, r1
   15548:	mov	r1, r0
   1554c:	mov	r0, #0
   15550:	b	154f8 <__assert_fail@plt+0x4170>
   15554:	push	{r4, r5, r6, r7, r8, lr}
   15558:	mov	r7, r0
   1555c:	ldr	lr, [pc, #100]	; 155c8 <__assert_fail@plt+0x4240>
   15560:	mov	r8, r1
   15564:	mov	r4, r2
   15568:	ldm	lr!, {r0, r1, r2, r3}
   1556c:	sub	sp, sp, #48	; 0x30
   15570:	mov	ip, sp
   15574:	lsr	r5, r4, #5
   15578:	stmia	ip!, {r0, r1, r2, r3}
   1557c:	add	r6, sp, #8
   15580:	ldm	lr!, {r0, r1, r2, r3}
   15584:	and	r4, r4, #31
   15588:	stmia	ip!, {r0, r1, r2, r3}
   1558c:	ldm	lr, {r0, r1, r2, r3}
   15590:	stm	ip, {r0, r1, r2, r3}
   15594:	mov	r2, r8
   15598:	ldr	lr, [r6, r5, lsl #2]
   1559c:	mov	r1, r7
   155a0:	mov	r3, sp
   155a4:	lsr	ip, lr, r4
   155a8:	eor	ip, ip, #1
   155ac:	and	ip, ip, #1
   155b0:	mov	r0, #0
   155b4:	eor	r4, lr, ip, lsl r4
   155b8:	str	r4, [r6, r5, lsl #2]
   155bc:	bl	14fc8 <__assert_fail@plt+0x3c40>
   155c0:	add	sp, sp, #48	; 0x30
   155c4:	pop	{r4, r5, r6, r7, r8, pc}
   155c8:	strdeq	r9, [r2], -r4
   155cc:	mov	r2, r1
   155d0:	mvn	r1, #0
   155d4:	b	15554 <__assert_fail@plt+0x41cc>
   155d8:	mov	r2, #58	; 0x3a
   155dc:	mvn	r1, #0
   155e0:	b	15554 <__assert_fail@plt+0x41cc>
   155e4:	mov	r2, #58	; 0x3a
   155e8:	b	15554 <__assert_fail@plt+0x41cc>
   155ec:	push	{r4, r5, r6, r7, lr}
   155f0:	sub	sp, sp, #100	; 0x64
   155f4:	mov	r6, r0
   155f8:	mov	r0, sp
   155fc:	mov	r7, r2
   15600:	bl	13964 <__assert_fail@plt+0x25dc>
   15604:	mov	ip, sp
   15608:	add	lr, sp, #48	; 0x30
   1560c:	ldm	ip!, {r0, r1, r2, r3}
   15610:	stmia	lr!, {r0, r1, r2, r3}
   15614:	ldm	ip!, {r0, r1, r2, r3}
   15618:	ldr	r5, [sp, #60]	; 0x3c
   1561c:	stmia	lr!, {r0, r1, r2, r3}
   15620:	mvn	r4, r5
   15624:	ldm	ip, {r0, r1, r2, r3}
   15628:	and	ip, r4, #67108864	; 0x4000000
   1562c:	eor	ip, ip, r5
   15630:	str	ip, [sp, #60]	; 0x3c
   15634:	stm	lr, {r0, r1, r2, r3}
   15638:	mov	r1, r7
   1563c:	mov	r0, r6
   15640:	add	r3, sp, #48	; 0x30
   15644:	mvn	r2, #0
   15648:	bl	14fc8 <__assert_fail@plt+0x3c40>
   1564c:	add	sp, sp, #100	; 0x64
   15650:	pop	{r4, r5, r6, r7, pc}
   15654:	push	{r4, r5, r6, r7, r8, lr}
   15658:	mov	r5, r1
   1565c:	ldr	lr, [pc, #100]	; 156c8 <__assert_fail@plt+0x4340>
   15660:	mov	r4, r2
   15664:	mov	r7, r0
   15668:	mov	r8, r3
   1566c:	ldm	lr!, {r0, r1, r2, r3}
   15670:	sub	sp, sp, #48	; 0x30
   15674:	mov	ip, sp
   15678:	mov	r6, #10
   1567c:	stmia	ip!, {r0, r1, r2, r3}
   15680:	cmp	r4, #0
   15684:	cmpne	r5, #0
   15688:	ldm	lr!, {r0, r1, r2, r3}
   1568c:	str	r6, [sp]
   15690:	stmia	ip!, {r0, r1, r2, r3}
   15694:	ldm	lr, {r0, r1, r2, r3}
   15698:	stm	ip, {r0, r1, r2, r3}
   1569c:	beq	156c4 <__assert_fail@plt+0x433c>
   156a0:	mov	r3, sp
   156a4:	mov	r1, r8
   156a8:	mov	r0, r7
   156ac:	ldr	r2, [sp, #72]	; 0x48
   156b0:	str	r5, [sp, #40]	; 0x28
   156b4:	str	r4, [sp, #44]	; 0x2c
   156b8:	bl	14fc8 <__assert_fail@plt+0x3c40>
   156bc:	add	sp, sp, #48	; 0x30
   156c0:	pop	{r4, r5, r6, r7, r8, pc}
   156c4:	bl	11370 <abort@plt>
   156c8:	strdeq	r9, [r2], -r4
   156cc:	push	{lr}		; (str lr, [sp, #-4]!)
   156d0:	sub	sp, sp, #12
   156d4:	mvn	ip, #0
   156d8:	str	ip, [sp]
   156dc:	bl	15654 <__assert_fail@plt+0x42cc>
   156e0:	add	sp, sp, #12
   156e4:	pop	{pc}		; (ldr pc, [sp], #4)
   156e8:	push	{lr}		; (str lr, [sp, #-4]!)
   156ec:	sub	sp, sp, #12
   156f0:	mvn	ip, #0
   156f4:	mov	r3, r2
   156f8:	str	ip, [sp]
   156fc:	mov	r2, r1
   15700:	mov	r1, r0
   15704:	mov	r0, #0
   15708:	bl	15654 <__assert_fail@plt+0x42cc>
   1570c:	add	sp, sp, #12
   15710:	pop	{pc}		; (ldr pc, [sp], #4)
   15714:	push	{lr}		; (str lr, [sp, #-4]!)
   15718:	sub	sp, sp, #12
   1571c:	str	r3, [sp]
   15720:	mov	r3, r2
   15724:	mov	r2, r1
   15728:	mov	r1, r0
   1572c:	mov	r0, #0
   15730:	bl	15654 <__assert_fail@plt+0x42cc>
   15734:	add	sp, sp, #12
   15738:	pop	{pc}		; (ldr pc, [sp], #4)
   1573c:	ldr	r3, [pc]	; 15744 <__assert_fail@plt+0x43bc>
   15740:	b	14fc8 <__assert_fail@plt+0x3c40>
   15744:	andeq	r9, r2, r0, asr #2
   15748:	mov	r2, r1
   1574c:	ldr	r3, [pc, #8]	; 1575c <__assert_fail@plt+0x43d4>
   15750:	mov	r1, r0
   15754:	mov	r0, #0
   15758:	b	14fc8 <__assert_fail@plt+0x3c40>
   1575c:	andeq	r9, r2, r0, asr #2
   15760:	ldr	r3, [pc, #4]	; 1576c <__assert_fail@plt+0x43e4>
   15764:	mvn	r2, #0
   15768:	b	14fc8 <__assert_fail@plt+0x3c40>
   1576c:	andeq	r9, r2, r0, asr #2
   15770:	mov	r1, r0
   15774:	ldr	r3, [pc, #8]	; 15784 <__assert_fail@plt+0x43fc>
   15778:	mvn	r2, #0
   1577c:	mov	r0, #0
   15780:	b	14fc8 <__assert_fail@plt+0x3c40>
   15784:	andeq	r9, r2, r0, asr #2
   15788:	push	{r4, r5, r6, lr}
   1578c:	mov	r4, r0
   15790:	ldr	r3, [r0, #24]
   15794:	ldr	r6, [r0, #20]
   15798:	cmp	r3, r6
   1579c:	sub	r5, r3, r6
   157a0:	ldrbeq	r2, [r0, #52]	; 0x34
   157a4:	sub	r5, r5, #1
   157a8:	orreq	r2, r2, #2
   157ac:	strbeq	r2, [r0, #52]	; 0x34
   157b0:	ldr	r0, [r0, #36]	; 0x24
   157b4:	ldr	r1, [r4, #28]
   157b8:	ldr	r2, [r4, #16]
   157bc:	add	r3, r3, r0
   157c0:	bic	r3, r3, r0
   157c4:	sub	r0, r3, r2
   157c8:	sub	r2, r1, r2
   157cc:	cmp	r0, r2
   157d0:	str	r3, [r4, #24]
   157d4:	ldr	r2, [r4, #72]	; 0x48
   157d8:	movhi	r3, r1
   157dc:	strhi	r1, [r4, #24]
   157e0:	ldr	r1, [r4, #68]	; 0x44
   157e4:	str	r3, [r4, #20]
   157e8:	sub	r3, r2, r1
   157ec:	cmp	r3, #3
   157f0:	bls	15848 <__assert_fail@plt+0x44c0>
   157f4:	str	r6, [r1]
   157f8:	ldr	r1, [r4, #112]	; 0x70
   157fc:	ldr	r2, [r4, #116]	; 0x74
   15800:	ldr	r3, [r4, #68]	; 0x44
   15804:	sub	r2, r2, r1
   15808:	add	r3, r3, #4
   1580c:	cmp	r2, #3
   15810:	str	r3, [r4, #68]	; 0x44
   15814:	bhi	15828 <__assert_fail@plt+0x44a0>
   15818:	mov	r1, #4
   1581c:	add	r0, r4, #100	; 0x64
   15820:	bl	168fc <_obstack_newchunk@@Base>
   15824:	ldr	r1, [r4, #112]	; 0x70
   15828:	str	r5, [r1]
   1582c:	ldr	r2, [r4, #112]	; 0x70
   15830:	ldr	r3, [r4]
   15834:	add	r2, r2, #4
   15838:	add	r3, r3, #1
   1583c:	str	r2, [r4, #112]	; 0x70
   15840:	str	r3, [r4]
   15844:	pop	{r4, r5, r6, pc}
   15848:	mov	r1, #4
   1584c:	add	r0, r4, #56	; 0x38
   15850:	bl	168fc <_obstack_newchunk@@Base>
   15854:	ldr	r1, [r4, #68]	; 0x44
   15858:	b	157f4 <__assert_fail@plt+0x446c>
   1585c:	push	{r4, r5, r6, r7, lr}
   15860:	sub	sp, sp, #12
   15864:	ldr	r6, [pc, #100]	; 158d0 <__assert_fail@plt+0x4548>
   15868:	ldr	r7, [pc, #100]	; 158d4 <__assert_fail@plt+0x454c>
   1586c:	mov	r4, #0
   15870:	mov	r5, r0
   15874:	str	r4, [r0]
   15878:	str	r4, [r0, #4]
   1587c:	str	r4, [r0, #8]
   15880:	mov	r2, r4
   15884:	mov	r1, r4
   15888:	mov	r3, r6
   1588c:	str	r7, [sp]
   15890:	add	r0, r0, #12
   15894:	bl	168ac <_obstack_begin@@Base>
   15898:	mov	r3, r6
   1589c:	mov	r2, r4
   158a0:	mov	r1, r4
   158a4:	str	r7, [sp]
   158a8:	add	r0, r5, #56	; 0x38
   158ac:	bl	168ac <_obstack_begin@@Base>
   158b0:	str	r7, [sp]
   158b4:	mov	r3, r6
   158b8:	add	r0, r5, #100	; 0x64
   158bc:	mov	r2, r4
   158c0:	mov	r1, r4
   158c4:	bl	168ac <_obstack_begin@@Base>
   158c8:	add	sp, sp, #12
   158cc:	pop	{r4, r5, r6, r7, pc}
   158d0:	strdeq	r6, [r1], -r8
   158d4:	andeq	r3, r1, ip, lsl #10
   158d8:	push	{r4, lr}
   158dc:	mov	r1, #0
   158e0:	mov	r4, r0
   158e4:	add	r0, r0, #12
   158e8:	bl	16a48 <_obstack_free@@Base>
   158ec:	add	r0, r4, #56	; 0x38
   158f0:	mov	r1, #0
   158f4:	bl	16a48 <_obstack_free@@Base>
   158f8:	add	r0, r4, #100	; 0x64
   158fc:	mov	r1, #0
   15900:	pop	{r4, lr}
   15904:	b	16a48 <_obstack_free@@Base>
   15908:	push	{r4, r5, r6, r7, r8, lr}
   1590c:	mov	r4, r1
   15910:	mov	r6, r0
   15914:	add	r8, r1, #12
   15918:	mov	r7, #1
   1591c:	b	15934 <__assert_fail@plt+0x45ac>
   15920:	add	r2, r3, #1
   15924:	cmp	r5, #0
   15928:	str	r2, [r4, #24]
   1592c:	strb	r5, [r3]
   15930:	beq	15a6c <__assert_fail@plt+0x46e4>
   15934:	mov	r0, r6
   15938:	bl	112bc <fgetc@plt>
   1593c:	ldr	r3, [r4, #24]
   15940:	cmn	r0, #1
   15944:	mov	r5, r0
   15948:	beq	1596c <__assert_fail@plt+0x45e4>
   1594c:	ldr	r2, [r4, #28]
   15950:	cmp	r2, r3
   15954:	bne	15920 <__assert_fail@plt+0x4598>
   15958:	mov	r1, r7
   1595c:	mov	r0, r8
   15960:	bl	168fc <_obstack_newchunk@@Base>
   15964:	ldr	r3, [r4, #24]
   15968:	b	15920 <__assert_fail@plt+0x4598>
   1596c:	ldr	r2, [r4, #20]
   15970:	cmp	r2, r3
   15974:	beq	1599c <__assert_fail@plt+0x4614>
   15978:	ldr	r2, [r4, #28]
   1597c:	cmp	r2, r3
   15980:	beq	15a8c <__assert_fail@plt+0x4704>
   15984:	add	r1, r3, #1
   15988:	mov	r2, #0
   1598c:	str	r1, [r4, #24]
   15990:	mov	r0, r4
   15994:	strb	r2, [r3]
   15998:	bl	15788 <__assert_fail@plt+0x4400>
   1599c:	ldr	r2, [r4, #68]	; 0x44
   159a0:	ldr	r3, [r4, #72]	; 0x48
   159a4:	sub	r3, r3, r2
   159a8:	cmp	r3, #3
   159ac:	bls	15a78 <__assert_fail@plt+0x46f0>
   159b0:	mov	r3, #0
   159b4:	str	r3, [r2]
   159b8:	ldr	r3, [r4, #68]	; 0x44
   159bc:	ldr	r1, [r4, #64]	; 0x40
   159c0:	add	r3, r3, #4
   159c4:	cmp	r3, r1
   159c8:	ldr	r0, [r4, #80]	; 0x50
   159cc:	ldrbeq	r2, [r4, #96]	; 0x60
   159d0:	ldr	ip, [r4, #72]	; 0x48
   159d4:	str	r3, [r4, #68]	; 0x44
   159d8:	orreq	r2, r2, #2
   159dc:	strbeq	r2, [r4, #96]	; 0x60
   159e0:	add	r3, r3, r0
   159e4:	ldr	r2, [r4, #60]	; 0x3c
   159e8:	bic	r3, r3, r0
   159ec:	sub	r0, r3, r2
   159f0:	sub	r2, ip, r2
   159f4:	cmp	r0, r2
   159f8:	ldr	r2, [r4, #112]	; 0x70
   159fc:	ldr	r0, [r4, #108]	; 0x6c
   15a00:	str	r3, [r4, #68]	; 0x44
   15a04:	movhi	r3, ip
   15a08:	strhi	ip, [r4, #68]	; 0x44
   15a0c:	cmp	r0, r2
   15a10:	str	r3, [r4, #64]	; 0x40
   15a14:	ldrbeq	r3, [r4, #140]	; 0x8c
   15a18:	ldr	ip, [r4, #124]	; 0x7c
   15a1c:	str	r1, [r4, #4]
   15a20:	orreq	r3, r3, #2
   15a24:	strbeq	r3, [r4, #140]	; 0x8c
   15a28:	ldr	r1, [r4, #104]	; 0x68
   15a2c:	add	r3, r2, ip
   15a30:	ldr	r2, [r4, #116]	; 0x74
   15a34:	bic	r3, r3, ip
   15a38:	sub	ip, r3, r1
   15a3c:	sub	r1, r2, r1
   15a40:	cmp	ip, r1
   15a44:	str	r3, [r4, #112]	; 0x70
   15a48:	movhi	r3, r2
   15a4c:	str	r0, [r4, #8]
   15a50:	strhi	r2, [r4, #112]	; 0x70
   15a54:	str	r3, [r4, #108]	; 0x6c
   15a58:	mov	r0, r6
   15a5c:	bl	110dc <ferror@plt>
   15a60:	clz	r0, r0
   15a64:	lsr	r0, r0, #5
   15a68:	pop	{r4, r5, r6, r7, r8, pc}
   15a6c:	mov	r0, r4
   15a70:	bl	15788 <__assert_fail@plt+0x4400>
   15a74:	b	15934 <__assert_fail@plt+0x45ac>
   15a78:	mov	r1, #4
   15a7c:	add	r0, r4, #56	; 0x38
   15a80:	bl	168fc <_obstack_newchunk@@Base>
   15a84:	ldr	r2, [r4, #68]	; 0x44
   15a88:	b	159b0 <__assert_fail@plt+0x4628>
   15a8c:	mov	r1, #1
   15a90:	add	r0, r4, #12
   15a94:	bl	168fc <_obstack_newchunk@@Base>
   15a98:	ldr	r3, [r4, #24]
   15a9c:	b	15984 <__assert_fail@plt+0x45fc>
   15aa0:	push	{r4, r5, r6, r7, r8, lr}
   15aa4:	mov	r8, r0
   15aa8:	ldr	r5, [pc, #84]	; 15b04 <__assert_fail@plt+0x477c>
   15aac:	mov	r7, r1
   15ab0:	mov	r4, r2
   15ab4:	mov	r2, r4
   15ab8:	mov	r1, r7
   15abc:	mov	r0, r8
   15ac0:	bl	110a0 <read@plt>
   15ac4:	subs	r6, r0, #0
   15ac8:	bge	15afc <__assert_fail@plt+0x4774>
   15acc:	bl	11280 <__errno_location@plt>
   15ad0:	ldr	r3, [r0]
   15ad4:	cmp	r3, #4
   15ad8:	beq	15ab4 <__assert_fail@plt+0x472c>
   15adc:	cmp	r4, r5
   15ae0:	movls	r2, #0
   15ae4:	movhi	r2, #1
   15ae8:	cmp	r3, #22
   15aec:	movne	r2, #0
   15af0:	cmp	r2, #0
   15af4:	mov	r4, r5
   15af8:	bne	15ab4 <__assert_fail@plt+0x472c>
   15afc:	mov	r0, r6
   15b00:	pop	{r4, r5, r6, r7, r8, pc}
   15b04:	svcvc	0x00f00000	; IMB
   15b08:	push	{r4, r5, r6, lr}
   15b0c:	sub	sp, sp, #32
   15b10:	cmp	r1, #0
   15b14:	mov	r4, r0
   15b18:	ldr	r5, [sp, #48]	; 0x30
   15b1c:	ldr	r6, [sp, #52]	; 0x34
   15b20:	beq	15e38 <__assert_fail@plt+0x4ab0>
   15b24:	stm	sp, {r2, r3}
   15b28:	mov	r3, r1
   15b2c:	ldr	r2, [pc, #808]	; 15e5c <__assert_fail@plt+0x4ad4>
   15b30:	mov	r1, #1
   15b34:	bl	112e0 <__fprintf_chk@plt>
   15b38:	mov	r2, #5
   15b3c:	ldr	r1, [pc, #796]	; 15e60 <__assert_fail@plt+0x4ad8>
   15b40:	mov	r0, #0
   15b44:	bl	11124 <dcgettext@plt>
   15b48:	ldr	r3, [pc, #788]	; 15e64 <__assert_fail@plt+0x4adc>
   15b4c:	ldr	r2, [pc, #788]	; 15e68 <__assert_fail@plt+0x4ae0>
   15b50:	str	r3, [sp]
   15b54:	mov	r1, #1
   15b58:	mov	r3, r0
   15b5c:	mov	r0, r4
   15b60:	bl	112e0 <__fprintf_chk@plt>
   15b64:	mov	r1, r4
   15b68:	mov	r0, #10
   15b6c:	bl	11118 <fputc_unlocked@plt>
   15b70:	mov	r2, #5
   15b74:	ldr	r1, [pc, #752]	; 15e6c <__assert_fail@plt+0x4ae4>
   15b78:	mov	r0, #0
   15b7c:	bl	11124 <dcgettext@plt>
   15b80:	mov	r1, #1
   15b84:	ldr	r3, [pc, #740]	; 15e70 <__assert_fail@plt+0x4ae8>
   15b88:	mov	r2, r0
   15b8c:	mov	r0, r4
   15b90:	bl	112e0 <__fprintf_chk@plt>
   15b94:	mov	r1, r4
   15b98:	mov	r0, #10
   15b9c:	bl	11118 <fputc_unlocked@plt>
   15ba0:	cmp	r6, #9
   15ba4:	ldrls	pc, [pc, r6, lsl #2]
   15ba8:	b	15e50 <__assert_fail@plt+0x4ac8>
   15bac:	andeq	r5, r1, r0, lsr ip
   15bb0:	andeq	r5, r1, r8, lsr ip
   15bb4:	andeq	r5, r1, r4, ror #24
   15bb8:	muleq	r1, r8, ip
   15bbc:	ldrdeq	r5, [r1], -r4
   15bc0:	andeq	r5, r1, r0, lsl sp
   15bc4:	andeq	r5, r1, ip, asr #26
   15bc8:	muleq	r1, r0, sp
   15bcc:	andeq	r5, r1, r0, ror #27
   15bd0:	ldrdeq	r5, [r1], -r4
   15bd4:	ldr	r1, [pc, #664]	; 15e74 <__assert_fail@plt+0x4aec>
   15bd8:	mov	r2, #5
   15bdc:	mov	r0, #0
   15be0:	bl	11124 <dcgettext@plt>
   15be4:	ldr	ip, [r5, #32]
   15be8:	ldr	r1, [r5, #28]
   15bec:	ldr	r2, [r5, #24]
   15bf0:	ldr	r3, [r5]
   15bf4:	ldr	r6, [r5, #20]
   15bf8:	str	ip, [sp, #28]
   15bfc:	ldr	lr, [r5, #16]
   15c00:	str	r1, [sp, #24]
   15c04:	ldr	ip, [r5, #12]
   15c08:	str	r2, [sp, #20]
   15c0c:	ldr	r1, [r5, #8]
   15c10:	ldr	r2, [r5, #4]
   15c14:	str	r6, [sp, #16]
   15c18:	stmib	sp, {r1, ip, lr}
   15c1c:	mov	r1, #1
   15c20:	str	r2, [sp]
   15c24:	mov	r2, r0
   15c28:	mov	r0, r4
   15c2c:	bl	112e0 <__fprintf_chk@plt>
   15c30:	add	sp, sp, #32
   15c34:	pop	{r4, r5, r6, pc}
   15c38:	mov	r2, #5
   15c3c:	ldr	r1, [pc, #564]	; 15e78 <__assert_fail@plt+0x4af0>
   15c40:	mov	r0, #0
   15c44:	bl	11124 <dcgettext@plt>
   15c48:	ldr	r3, [r5]
   15c4c:	mov	r1, #1
   15c50:	mov	r2, r0
   15c54:	mov	r0, r4
   15c58:	add	sp, sp, #32
   15c5c:	pop	{r4, r5, r6, lr}
   15c60:	b	112e0 <__fprintf_chk@plt>
   15c64:	mov	r2, #5
   15c68:	ldr	r1, [pc, #524]	; 15e7c <__assert_fail@plt+0x4af4>
   15c6c:	mov	r0, #0
   15c70:	bl	11124 <dcgettext@plt>
   15c74:	ldr	r2, [r5, #4]
   15c78:	ldr	r3, [r5]
   15c7c:	mov	r1, #1
   15c80:	str	r2, [sp, #48]	; 0x30
   15c84:	mov	r2, r0
   15c88:	mov	r0, r4
   15c8c:	add	sp, sp, #32
   15c90:	pop	{r4, r5, r6, lr}
   15c94:	b	112e0 <__fprintf_chk@plt>
   15c98:	mov	r2, #5
   15c9c:	ldr	r1, [pc, #476]	; 15e80 <__assert_fail@plt+0x4af8>
   15ca0:	mov	r0, #0
   15ca4:	bl	11124 <dcgettext@plt>
   15ca8:	ldr	r1, [r5, #8]
   15cac:	ldr	r2, [r5, #4]
   15cb0:	ldr	r3, [r5]
   15cb4:	str	r1, [sp, #52]	; 0x34
   15cb8:	str	r2, [sp, #48]	; 0x30
   15cbc:	mov	r1, #1
   15cc0:	mov	r2, r0
   15cc4:	mov	r0, r4
   15cc8:	add	sp, sp, #32
   15ccc:	pop	{r4, r5, r6, lr}
   15cd0:	b	112e0 <__fprintf_chk@plt>
   15cd4:	mov	r2, #5
   15cd8:	ldr	r1, [pc, #420]	; 15e84 <__assert_fail@plt+0x4afc>
   15cdc:	mov	r0, #0
   15ce0:	bl	11124 <dcgettext@plt>
   15ce4:	ldr	r1, [r5, #8]
   15ce8:	ldr	ip, [r5, #12]
   15cec:	ldr	r2, [r5, #4]
   15cf0:	ldr	r3, [r5]
   15cf4:	stmib	sp, {r1, ip}
   15cf8:	str	r2, [sp]
   15cfc:	mov	r1, #1
   15d00:	mov	r2, r0
   15d04:	mov	r0, r4
   15d08:	bl	112e0 <__fprintf_chk@plt>
   15d0c:	b	15c30 <__assert_fail@plt+0x48a8>
   15d10:	mov	r2, #5
   15d14:	ldr	r1, [pc, #364]	; 15e88 <__assert_fail@plt+0x4b00>
   15d18:	mov	r0, #0
   15d1c:	bl	11124 <dcgettext@plt>
   15d20:	add	r1, r5, #8
   15d24:	ldr	r2, [r5, #4]
   15d28:	ldm	r1, {r1, ip, lr}
   15d2c:	ldr	r3, [r5]
   15d30:	str	r2, [sp]
   15d34:	stmib	sp, {r1, ip, lr}
   15d38:	mov	r1, #1
   15d3c:	mov	r2, r0
   15d40:	mov	r0, r4
   15d44:	bl	112e0 <__fprintf_chk@plt>
   15d48:	b	15c30 <__assert_fail@plt+0x48a8>
   15d4c:	mov	r2, #5
   15d50:	ldr	r1, [pc, #308]	; 15e8c <__assert_fail@plt+0x4b04>
   15d54:	mov	r0, #0
   15d58:	bl	11124 <dcgettext@plt>
   15d5c:	add	r1, r5, #8
   15d60:	ldr	r2, [r5, #4]
   15d64:	ldm	r1, {r1, ip, lr}
   15d68:	ldr	r6, [r5, #20]
   15d6c:	ldr	r3, [r5]
   15d70:	stmib	sp, {r1, ip, lr}
   15d74:	mov	r1, #1
   15d78:	str	r2, [sp]
   15d7c:	str	r6, [sp, #16]
   15d80:	mov	r2, r0
   15d84:	mov	r0, r4
   15d88:	bl	112e0 <__fprintf_chk@plt>
   15d8c:	b	15c30 <__assert_fail@plt+0x48a8>
   15d90:	mov	r2, #5
   15d94:	ldr	r1, [pc, #244]	; 15e90 <__assert_fail@plt+0x4b08>
   15d98:	mov	r0, #0
   15d9c:	bl	11124 <dcgettext@plt>
   15da0:	ldr	r2, [r5, #24]
   15da4:	ldr	r3, [r5]
   15da8:	ldr	r6, [r5, #20]
   15dac:	ldr	lr, [r5, #16]
   15db0:	ldr	ip, [r5, #12]
   15db4:	str	r2, [sp, #20]
   15db8:	ldr	r1, [r5, #8]
   15dbc:	ldr	r2, [r5, #4]
   15dc0:	str	r6, [sp, #16]
   15dc4:	stmib	sp, {r1, ip, lr}
   15dc8:	mov	r1, #1
   15dcc:	str	r2, [sp]
   15dd0:	mov	r2, r0
   15dd4:	mov	r0, r4
   15dd8:	bl	112e0 <__fprintf_chk@plt>
   15ddc:	b	15c30 <__assert_fail@plt+0x48a8>
   15de0:	mov	r2, #5
   15de4:	ldr	r1, [pc, #168]	; 15e94 <__assert_fail@plt+0x4b0c>
   15de8:	mov	r0, #0
   15dec:	bl	11124 <dcgettext@plt>
   15df0:	ldr	r1, [r5, #28]
   15df4:	ldr	r2, [r5, #24]
   15df8:	ldr	r3, [r5]
   15dfc:	ldr	r6, [r5, #20]
   15e00:	ldr	lr, [r5, #16]
   15e04:	str	r1, [sp, #24]
   15e08:	ldr	ip, [r5, #12]
   15e0c:	str	r2, [sp, #20]
   15e10:	ldr	r1, [r5, #8]
   15e14:	ldr	r2, [r5, #4]
   15e18:	str	r6, [sp, #16]
   15e1c:	stmib	sp, {r1, ip, lr}
   15e20:	mov	r1, #1
   15e24:	str	r2, [sp]
   15e28:	mov	r2, r0
   15e2c:	mov	r0, r4
   15e30:	bl	112e0 <__fprintf_chk@plt>
   15e34:	b	15c30 <__assert_fail@plt+0x48a8>
   15e38:	str	r3, [sp]
   15e3c:	mov	r1, #1
   15e40:	mov	r3, r2
   15e44:	ldr	r2, [pc, #76]	; 15e98 <__assert_fail@plt+0x4b10>
   15e48:	bl	112e0 <__fprintf_chk@plt>
   15e4c:	b	15b38 <__assert_fail@plt+0x47b0>
   15e50:	mov	r2, #5
   15e54:	ldr	r1, [pc, #64]	; 15e9c <__assert_fail@plt+0x4b14>
   15e58:	b	15bdc <__assert_fail@plt+0x4854>
   15e5c:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   15e60:	andeq	r7, r1, ip, lsr #31
   15e64:	andeq	r0, r0, r6, ror #15
   15e68:	andeq	r8, r1, r4, lsl #5
   15e6c:			; <UNDEFINED> instruction: 0x00017fb0
   15e70:	andeq	r8, r1, ip, asr r0
   15e74:	andeq	r8, r1, ip, lsl #3
   15e78:	andeq	r8, r1, r0, lsl #1
   15e7c:	muleq	r1, r0, r0
   15e80:	andeq	r8, r1, r8, lsr #1
   15e84:	andeq	r8, r1, r4, asr #1
   15e88:	andeq	r8, r1, r4, ror #1
   15e8c:	andeq	r8, r1, r8, lsl #2
   15e90:	andeq	r8, r1, r0, lsr r1
   15e94:	andeq	r8, r1, ip, asr r1
   15e98:	andeq	r7, r1, r4, lsr #31
   15e9c:	andeq	r8, r1, r0, asr #3
   15ea0:	push	{r4, r5, lr}
   15ea4:	sub	sp, sp, #12
   15ea8:	ldr	r5, [sp, #24]
   15eac:	ldr	ip, [r5]
   15eb0:	cmp	ip, #0
   15eb4:	beq	15ed0 <__assert_fail@plt+0x4b48>
   15eb8:	mov	lr, r5
   15ebc:	mov	ip, #0
   15ec0:	ldr	r4, [lr, #4]!
   15ec4:	add	ip, ip, #1
   15ec8:	cmp	r4, #0
   15ecc:	bne	15ec0 <__assert_fail@plt+0x4b38>
   15ed0:	stm	sp, {r5, ip}
   15ed4:	bl	15b08 <__assert_fail@plt+0x4780>
   15ed8:	add	sp, sp, #12
   15edc:	pop	{r4, r5, pc}
   15ee0:	push	{r4, r5, lr}
   15ee4:	sub	sp, sp, #52	; 0x34
   15ee8:	add	r5, sp, #4
   15eec:	ldr	r4, [sp, #64]	; 0x40
   15ef0:	mov	ip, #0
   15ef4:	sub	r4, r4, #4
   15ef8:	ldr	lr, [r4, #4]!
   15efc:	cmp	lr, #0
   15f00:	str	lr, [r5, #4]!
   15f04:	beq	15f14 <__assert_fail@plt+0x4b8c>
   15f08:	add	ip, ip, #1
   15f0c:	cmp	ip, #10
   15f10:	bne	15ef8 <__assert_fail@plt+0x4b70>
   15f14:	add	lr, sp, #8
   15f18:	str	ip, [sp, #4]
   15f1c:	str	lr, [sp]
   15f20:	bl	15b08 <__assert_fail@plt+0x4780>
   15f24:	add	sp, sp, #52	; 0x34
   15f28:	pop	{r4, r5, pc}
   15f2c:	push	{r3}		; (str r3, [sp, #-4]!)
   15f30:	push	{r4, lr}
   15f34:	sub	sp, sp, #60	; 0x3c
   15f38:	add	lr, sp, #56	; 0x38
   15f3c:	add	r3, sp, #72	; 0x48
   15f40:	str	r3, [lr, #-44]!	; 0xffffffd4
   15f44:	add	r4, sp, #68	; 0x44
   15f48:	mov	r3, #0
   15f4c:	ldr	ip, [r4, #4]!
   15f50:	cmp	ip, #0
   15f54:	str	ip, [lr, #4]!
   15f58:	beq	15f68 <__assert_fail@plt+0x4be0>
   15f5c:	add	r3, r3, #1
   15f60:	cmp	r3, #10
   15f64:	bne	15f4c <__assert_fail@plt+0x4bc4>
   15f68:	add	ip, sp, #16
   15f6c:	str	r3, [sp, #4]
   15f70:	str	ip, [sp]
   15f74:	ldr	r3, [sp, #68]	; 0x44
   15f78:	bl	15b08 <__assert_fail@plt+0x4780>
   15f7c:	add	sp, sp, #60	; 0x3c
   15f80:	pop	{r4, lr}
   15f84:	add	sp, sp, #4
   15f88:	bx	lr
   15f8c:	ldr	r3, [pc, #116]	; 16008 <__assert_fail@plt+0x4c80>
   15f90:	push	{r4, lr}
   15f94:	mov	r0, #10
   15f98:	ldr	r1, [r3]
   15f9c:	bl	11118 <fputc_unlocked@plt>
   15fa0:	mov	r2, #5
   15fa4:	ldr	r1, [pc, #96]	; 1600c <__assert_fail@plt+0x4c84>
   15fa8:	mov	r0, #0
   15fac:	bl	11124 <dcgettext@plt>
   15fb0:	ldr	r2, [pc, #88]	; 16010 <__assert_fail@plt+0x4c88>
   15fb4:	mov	r1, r0
   15fb8:	mov	r0, #1
   15fbc:	bl	112c8 <__printf_chk@plt>
   15fc0:	mov	r2, #5
   15fc4:	ldr	r1, [pc, #72]	; 16014 <__assert_fail@plt+0x4c8c>
   15fc8:	mov	r0, #0
   15fcc:	bl	11124 <dcgettext@plt>
   15fd0:	ldr	r3, [pc, #64]	; 16018 <__assert_fail@plt+0x4c90>
   15fd4:	ldr	r2, [pc, #64]	; 1601c <__assert_fail@plt+0x4c94>
   15fd8:	mov	r1, r0
   15fdc:	mov	r0, #1
   15fe0:	bl	112c8 <__printf_chk@plt>
   15fe4:	mov	r2, #5
   15fe8:	ldr	r1, [pc, #48]	; 16020 <__assert_fail@plt+0x4c98>
   15fec:	mov	r0, #0
   15ff0:	bl	11124 <dcgettext@plt>
   15ff4:	ldr	r2, [pc, #40]	; 16024 <__assert_fail@plt+0x4c9c>
   15ff8:	pop	{r4, lr}
   15ffc:	mov	r1, r0
   16000:	mov	r0, #1
   16004:	b	112c8 <__printf_chk@plt>
   16008:	muleq	r2, r4, r1
   1600c:	strdeq	r8, [r1], -ip
   16010:	andeq	r8, r1, r0, lsl r2
   16014:	andeq	r8, r1, r8, lsr #4
   16018:	andeq	r7, r1, r0, lsr #22
   1601c:	andeq	r7, r1, r8, asr #22
   16020:	andeq	r8, r1, ip, lsr r2
   16024:	andeq	r8, r1, r4, ror #4
   16028:	push	{r4, lr}
   1602c:	bl	165f8 <__assert_fail@plt+0x5270>
   16030:	cmp	r0, #0
   16034:	popne	{r4, pc}
   16038:	bl	16570 <__assert_fail@plt+0x51e8>
   1603c:	push	{r4, lr}
   16040:	bl	165f8 <__assert_fail@plt+0x5270>
   16044:	cmp	r0, #0
   16048:	popne	{r4, pc}
   1604c:	bl	16570 <__assert_fail@plt+0x51e8>
   16050:	push	{r4, lr}
   16054:	bl	165f8 <__assert_fail@plt+0x5270>
   16058:	cmp	r0, #0
   1605c:	popne	{r4, pc}
   16060:	bl	16570 <__assert_fail@plt+0x51e8>
   16064:	push	{r4, r5, r6, lr}
   16068:	mov	r5, r0
   1606c:	mov	r4, r1
   16070:	bl	16624 <__assert_fail@plt+0x529c>
   16074:	cmp	r0, #0
   16078:	popne	{r4, r5, r6, pc}
   1607c:	adds	r4, r4, #0
   16080:	movne	r4, #1
   16084:	cmp	r5, #0
   16088:	orreq	r4, r4, #1
   1608c:	cmp	r4, #0
   16090:	popeq	{r4, r5, r6, pc}
   16094:	bl	16570 <__assert_fail@plt+0x51e8>
   16098:	push	{r4, lr}
   1609c:	cmp	r1, #0
   160a0:	orreq	r1, r1, #1
   160a4:	bl	16624 <__assert_fail@plt+0x529c>
   160a8:	cmp	r0, #0
   160ac:	popne	{r4, pc}
   160b0:	bl	16570 <__assert_fail@plt+0x51e8>
   160b4:	push	{r4, r5, r6, lr}
   160b8:	mov	r6, r0
   160bc:	mov	r5, r1
   160c0:	mov	r4, r2
   160c4:	bl	16af0 <_obstack_memory_used@@Base+0x34>
   160c8:	cmp	r0, #0
   160cc:	popne	{r4, r5, r6, pc}
   160d0:	cmp	r6, #0
   160d4:	beq	160e4 <__assert_fail@plt+0x4d5c>
   160d8:	cmp	r5, #0
   160dc:	cmpne	r4, #0
   160e0:	popeq	{r4, r5, r6, pc}
   160e4:	bl	16570 <__assert_fail@plt+0x51e8>
   160e8:	b	160b4 <__assert_fail@plt+0x4d2c>
   160ec:	cmp	r2, #0
   160f0:	cmpne	r1, #0
   160f4:	moveq	r2, #1
   160f8:	moveq	r1, r2
   160fc:	push	{r4, lr}
   16100:	bl	16af0 <_obstack_memory_used@@Base+0x34>
   16104:	cmp	r0, #0
   16108:	popne	{r4, pc}
   1610c:	bl	16570 <__assert_fail@plt+0x51e8>
   16110:	mov	r2, r1
   16114:	mov	r1, r0
   16118:	mov	r0, #0
   1611c:	b	160b4 <__assert_fail@plt+0x4d2c>
   16120:	mov	r2, r1
   16124:	mov	r1, r0
   16128:	mov	r0, #0
   1612c:	b	160ec <__assert_fail@plt+0x4d64>
   16130:	push	{r4, r5, r6, lr}
   16134:	subs	r6, r0, #0
   16138:	sub	sp, sp, #8
   1613c:	mov	r5, r1
   16140:	ldr	r4, [r1]
   16144:	beq	16180 <__assert_fail@plt+0x4df8>
   16148:	lsr	r1, r4, #1
   1614c:	add	r3, r1, #1
   16150:	mvn	r3, r3
   16154:	cmp	r4, r3
   16158:	bhi	1617c <__assert_fail@plt+0x4df4>
   1615c:	add	r4, r4, #1
   16160:	add	r4, r4, r1
   16164:	mov	r0, r6
   16168:	mov	r1, r4
   1616c:	bl	160b4 <__assert_fail@plt+0x4d2c>
   16170:	str	r4, [r5]
   16174:	add	sp, sp, #8
   16178:	pop	{r4, r5, r6, pc}
   1617c:	bl	16570 <__assert_fail@plt+0x51e8>
   16180:	cmp	r4, #0
   16184:	bne	16164 <__assert_fail@plt+0x4ddc>
   16188:	mov	r1, r2
   1618c:	mov	r0, #64	; 0x40
   16190:	str	r2, [sp, #4]
   16194:	bl	16bd4 <_obstack_memory_used@@Base+0x118>
   16198:	ldr	r2, [sp, #4]
   1619c:	cmp	r0, #0
   161a0:	movne	r4, r0
   161a4:	addeq	r4, r0, #1
   161a8:	b	16164 <__assert_fail@plt+0x4ddc>
   161ac:	mov	r2, #1
   161b0:	b	16130 <__assert_fail@plt+0x4da8>
   161b4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   161b8:	sub	sp, sp, #12
   161bc:	ldr	r6, [r1]
   161c0:	mov	sl, r1
   161c4:	mov	r9, r0
   161c8:	asrs	r4, r6, #1
   161cc:	mov	r5, r2
   161d0:	mov	fp, r3
   161d4:	ldr	r7, [sp, #48]	; 0x30
   161d8:	bmi	16344 <__assert_fail@plt+0x4fbc>
   161dc:	mvn	r3, #-2147483648	; 0x80000000
   161e0:	sub	r3, r3, r4
   161e4:	cmp	r6, r3
   161e8:	movle	r3, #0
   161ec:	movgt	r3, #1
   161f0:	mvn	r8, fp
   161f4:	cmp	r3, #0
   161f8:	addeq	r4, r4, r6
   161fc:	mvnne	r4, #-2147483648	; 0x80000000
   16200:	lsr	r8, r8, #31
   16204:	cmp	fp, r4
   16208:	movge	r3, #0
   1620c:	andlt	r3, r8, #1
   16210:	cmp	r3, #0
   16214:	beq	162fc <__assert_fail@plt+0x4f74>
   16218:	cmp	r7, #0
   1621c:	blt	163cc <__assert_fail@plt+0x5044>
   16220:	bne	163c4 <__assert_fail@plt+0x503c>
   16224:	mov	r2, #64	; 0x40
   16228:	mov	r1, r7
   1622c:	mov	r0, r2
   16230:	str	r2, [sp, #4]
   16234:	bl	16de0 <_obstack_memory_used@@Base+0x324>
   16238:	ldr	r2, [sp, #4]
   1623c:	mov	r1, r7
   16240:	mov	r4, r0
   16244:	mov	r0, r2
   16248:	bl	17000 <_obstack_memory_used@@Base+0x544>
   1624c:	ldr	r2, [sp, #4]
   16250:	sub	r1, r2, r1
   16254:	cmp	r9, #0
   16258:	sub	r3, r4, r6
   1625c:	streq	r9, [sl]
   16260:	cmp	r3, r5
   16264:	bge	162e8 <__assert_fail@plt+0x4f60>
   16268:	cmp	r5, #0
   1626c:	blt	16358 <__assert_fail@plt+0x4fd0>
   16270:	cmp	r6, #0
   16274:	blt	16294 <__assert_fail@plt+0x4f0c>
   16278:	mvn	r3, #-2147483648	; 0x80000000
   1627c:	sub	r3, r3, r5
   16280:	cmp	r6, r3
   16284:	movle	r3, #0
   16288:	movgt	r3, #1
   1628c:	cmp	r3, #0
   16290:	bne	16454 <__assert_fail@plt+0x50cc>
   16294:	add	r5, r6, r5
   16298:	cmp	fp, r5
   1629c:	movge	r8, #0
   162a0:	andlt	r8, r8, #1
   162a4:	cmp	r8, #0
   162a8:	mov	r4, r5
   162ac:	bne	16454 <__assert_fail@plt+0x50cc>
   162b0:	cmp	r7, #0
   162b4:	blt	1636c <__assert_fail@plt+0x4fe4>
   162b8:	beq	162e4 <__assert_fail@plt+0x4f5c>
   162bc:	cmp	r5, #0
   162c0:	blt	16414 <__assert_fail@plt+0x508c>
   162c4:	mov	r1, r7
   162c8:	mvn	r0, #-2147483648	; 0x80000000
   162cc:	bl	16de0 <_obstack_memory_used@@Base+0x324>
   162d0:	cmp	r5, r0
   162d4:	movle	r0, #0
   162d8:	movgt	r0, #1
   162dc:	cmp	r0, #0
   162e0:	bne	16454 <__assert_fail@plt+0x50cc>
   162e4:	mul	r1, r5, r7
   162e8:	mov	r0, r9
   162ec:	bl	16064 <__assert_fail@plt+0x4cdc>
   162f0:	str	r4, [sl]
   162f4:	add	sp, sp, #12
   162f8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   162fc:	cmp	r7, #0
   16300:	blt	16398 <__assert_fail@plt+0x5010>
   16304:	beq	16224 <__assert_fail@plt+0x4e9c>
   16308:	cmp	r4, #0
   1630c:	blt	163d4 <__assert_fail@plt+0x504c>
   16310:	mov	r1, r7
   16314:	mvn	r0, #-2147483648	; 0x80000000
   16318:	bl	16de0 <_obstack_memory_used@@Base+0x324>
   1631c:	cmp	r0, r4
   16320:	movge	r0, #0
   16324:	movlt	r0, #1
   16328:	cmp	r0, #0
   1632c:	mvnne	r2, #-2147483648	; 0x80000000
   16330:	bne	16228 <__assert_fail@plt+0x4ea0>
   16334:	mul	r1, r7, r4
   16338:	cmp	r1, #63	; 0x3f
   1633c:	bgt	16254 <__assert_fail@plt+0x4ecc>
   16340:	b	16224 <__assert_fail@plt+0x4e9c>
   16344:	rsb	r3, r4, #-2147483648	; 0x80000000
   16348:	cmp	r6, r3
   1634c:	movge	r3, #0
   16350:	movlt	r3, #1
   16354:	b	161f0 <__assert_fail@plt+0x4e68>
   16358:	rsb	r3, r5, #-2147483648	; 0x80000000
   1635c:	cmp	r6, r3
   16360:	movge	r3, #0
   16364:	movlt	r3, #1
   16368:	b	1628c <__assert_fail@plt+0x4f04>
   1636c:	cmp	r5, #0
   16370:	blt	163f8 <__assert_fail@plt+0x5070>
   16374:	cmn	r7, #1
   16378:	beq	162e4 <__assert_fail@plt+0x4f5c>
   1637c:	mov	r1, r7
   16380:	mov	r0, #-2147483648	; 0x80000000
   16384:	bl	16de0 <_obstack_memory_used@@Base+0x324>
   16388:	cmp	r5, r0
   1638c:	movle	r0, #0
   16390:	movgt	r0, #1
   16394:	b	162dc <__assert_fail@plt+0x4f54>
   16398:	cmp	r4, #0
   1639c:	blt	16438 <__assert_fail@plt+0x50b0>
   163a0:	cmn	r7, #1
   163a4:	beq	16334 <__assert_fail@plt+0x4fac>
   163a8:	mov	r1, r7
   163ac:	mov	r0, #-2147483648	; 0x80000000
   163b0:	bl	16de0 <_obstack_memory_used@@Base+0x324>
   163b4:	cmp	r0, r4
   163b8:	movge	r0, #0
   163bc:	movlt	r0, #1
   163c0:	b	16328 <__assert_fail@plt+0x4fa0>
   163c4:	mov	r4, fp
   163c8:	b	16310 <__assert_fail@plt+0x4f88>
   163cc:	mov	r4, fp
   163d0:	b	163a0 <__assert_fail@plt+0x5018>
   163d4:	cmn	r4, #1
   163d8:	beq	16334 <__assert_fail@plt+0x4fac>
   163dc:	mov	r1, r4
   163e0:	mov	r0, #-2147483648	; 0x80000000
   163e4:	bl	16de0 <_obstack_memory_used@@Base+0x324>
   163e8:	cmp	r7, r0
   163ec:	movle	r0, #0
   163f0:	movgt	r0, #1
   163f4:	b	16328 <__assert_fail@plt+0x4fa0>
   163f8:	mov	r1, r7
   163fc:	mvn	r0, #-2147483648	; 0x80000000
   16400:	bl	16de0 <_obstack_memory_used@@Base+0x324>
   16404:	cmp	r5, r0
   16408:	movge	r0, #0
   1640c:	movlt	r0, #1
   16410:	b	162dc <__assert_fail@plt+0x4f54>
   16414:	cmn	r5, #1
   16418:	beq	162e4 <__assert_fail@plt+0x4f5c>
   1641c:	mov	r1, r5
   16420:	mov	r0, #-2147483648	; 0x80000000
   16424:	bl	16de0 <_obstack_memory_used@@Base+0x324>
   16428:	cmp	r7, r0
   1642c:	movle	r0, #0
   16430:	movgt	r0, #1
   16434:	b	162dc <__assert_fail@plt+0x4f54>
   16438:	mov	r1, r7
   1643c:	mvn	r0, #-2147483648	; 0x80000000
   16440:	bl	16de0 <_obstack_memory_used@@Base+0x324>
   16444:	cmp	r0, r4
   16448:	movle	r0, #0
   1644c:	movgt	r0, #1
   16450:	b	16328 <__assert_fail@plt+0x4fa0>
   16454:	bl	16570 <__assert_fail@plt+0x51e8>
   16458:	push	{r4, lr}
   1645c:	mov	r1, #1
   16460:	bl	165b0 <__assert_fail@plt+0x5228>
   16464:	cmp	r0, #0
   16468:	popne	{r4, pc}
   1646c:	bl	16570 <__assert_fail@plt+0x51e8>
   16470:	push	{r4, lr}
   16474:	mov	r1, #1
   16478:	bl	165b0 <__assert_fail@plt+0x5228>
   1647c:	cmp	r0, #0
   16480:	popne	{r4, pc}
   16484:	bl	16570 <__assert_fail@plt+0x51e8>
   16488:	push	{r4, lr}
   1648c:	bl	165b0 <__assert_fail@plt+0x5228>
   16490:	cmp	r0, #0
   16494:	popne	{r4, pc}
   16498:	bl	16570 <__assert_fail@plt+0x51e8>
   1649c:	push	{r4, lr}
   164a0:	bl	165b0 <__assert_fail@plt+0x5228>
   164a4:	cmp	r0, #0
   164a8:	popne	{r4, pc}
   164ac:	bl	16570 <__assert_fail@plt+0x51e8>
   164b0:	push	{r4, r5, r6, lr}
   164b4:	mov	r6, r0
   164b8:	mov	r0, r1
   164bc:	mov	r4, r1
   164c0:	bl	165f8 <__assert_fail@plt+0x5270>
   164c4:	subs	r5, r0, #0
   164c8:	beq	164e0 <__assert_fail@plt+0x5158>
   164cc:	mov	r2, r4
   164d0:	mov	r1, r6
   164d4:	bl	110f4 <memcpy@plt>
   164d8:	mov	r0, r5
   164dc:	pop	{r4, r5, r6, pc}
   164e0:	bl	16570 <__assert_fail@plt+0x51e8>
   164e4:	push	{r4, r5, r6, lr}
   164e8:	mov	r6, r0
   164ec:	mov	r0, r1
   164f0:	mov	r4, r1
   164f4:	bl	165f8 <__assert_fail@plt+0x5270>
   164f8:	subs	r5, r0, #0
   164fc:	beq	16514 <__assert_fail@plt+0x518c>
   16500:	mov	r2, r4
   16504:	mov	r1, r6
   16508:	bl	110f4 <memcpy@plt>
   1650c:	mov	r0, r5
   16510:	pop	{r4, r5, r6, pc}
   16514:	bl	16570 <__assert_fail@plt+0x51e8>
   16518:	push	{r4, r5, r6, lr}
   1651c:	mov	r6, r0
   16520:	add	r0, r1, #1
   16524:	mov	r4, r1
   16528:	bl	165f8 <__assert_fail@plt+0x5270>
   1652c:	subs	r5, r0, #0
   16530:	beq	16550 <__assert_fail@plt+0x51c8>
   16534:	mov	r3, #0
   16538:	mov	r1, r6
   1653c:	strb	r3, [r5, r4]
   16540:	mov	r2, r4
   16544:	bl	110f4 <memcpy@plt>
   16548:	mov	r0, r5
   1654c:	pop	{r4, r5, r6, pc}
   16550:	bl	16570 <__assert_fail@plt+0x51e8>
   16554:	push	{r4, lr}
   16558:	mov	r4, r0
   1655c:	bl	1125c <strlen@plt>
   16560:	add	r1, r0, #1
   16564:	mov	r0, r4
   16568:	pop	{r4, lr}
   1656c:	b	164b0 <__assert_fail@plt+0x5128>
   16570:	ldr	r3, [pc, #44]	; 165a4 <__assert_fail@plt+0x521c>
   16574:	push	{r4, lr}
   16578:	mov	r2, #5
   1657c:	ldr	r1, [pc, #36]	; 165a8 <__assert_fail@plt+0x5220>
   16580:	mov	r0, #0
   16584:	ldr	r4, [r3]
   16588:	bl	11124 <dcgettext@plt>
   1658c:	ldr	r2, [pc, #24]	; 165ac <__assert_fail@plt+0x5224>
   16590:	mov	r1, #0
   16594:	mov	r3, r0
   16598:	mov	r0, r4
   1659c:	bl	111c0 <error@plt>
   165a0:	bl	11370 <abort@plt>
   165a4:	andeq	r9, r2, ip, lsr #2
   165a8:			; <UNDEFINED> instruction: 0x000182b4
   165ac:	andeq	r7, r1, r8, asr lr
   165b0:	cmp	r1, #0
   165b4:	cmpne	r0, #0
   165b8:	moveq	r1, #1
   165bc:	moveq	r0, r1
   165c0:	umull	r2, r3, r0, r1
   165c4:	adds	r3, r3, #0
   165c8:	movne	r3, #1
   165cc:	cmp	r2, #0
   165d0:	blt	165e0 <__assert_fail@plt+0x5258>
   165d4:	cmp	r3, #0
   165d8:	bne	165e0 <__assert_fail@plt+0x5258>
   165dc:	b	11064 <calloc@plt>
   165e0:	push	{r4, lr}
   165e4:	bl	11280 <__errno_location@plt>
   165e8:	mov	r3, #12
   165ec:	str	r3, [r0]
   165f0:	mov	r0, #0
   165f4:	pop	{r4, pc}
   165f8:	cmp	r0, #0
   165fc:	moveq	r0, #1
   16600:	cmp	r0, #0
   16604:	blt	1660c <__assert_fail@plt+0x5284>
   16608:	b	111f0 <malloc@plt>
   1660c:	push	{r4, lr}
   16610:	bl	11280 <__errno_location@plt>
   16614:	mov	r3, #12
   16618:	str	r3, [r0]
   1661c:	mov	r0, #0
   16620:	pop	{r4, pc}
   16624:	cmp	r0, #0
   16628:	beq	1664c <__assert_fail@plt+0x52c4>
   1662c:	cmp	r1, #0
   16630:	push	{lr}		; (str lr, [sp, #-4]!)
   16634:	sub	sp, sp, #12
   16638:	beq	16654 <__assert_fail@plt+0x52cc>
   1663c:	blt	1666c <__assert_fail@plt+0x52e4>
   16640:	add	sp, sp, #12
   16644:	pop	{lr}		; (ldr lr, [sp], #4)
   16648:	b	1113c <realloc@plt>
   1664c:	mov	r0, r1
   16650:	b	165f8 <__assert_fail@plt+0x5270>
   16654:	str	r1, [sp, #4]
   16658:	bl	1350c <__assert_fail@plt+0x2184>
   1665c:	ldr	r3, [sp, #4]
   16660:	mov	r0, r3
   16664:	add	sp, sp, #12
   16668:	pop	{pc}		; (ldr pc, [sp], #4)
   1666c:	bl	11280 <__errno_location@plt>
   16670:	mov	r2, #12
   16674:	mov	r3, #0
   16678:	str	r2, [r0]
   1667c:	b	16660 <__assert_fail@plt+0x52d8>
   16680:	push	{r4, r5, r6, lr}
   16684:	mov	r4, r0
   16688:	bl	111a8 <__fpending@plt>
   1668c:	ldr	r5, [r4]
   16690:	and	r5, r5, #32
   16694:	mov	r6, r0
   16698:	mov	r0, r4
   1669c:	bl	1340c <__assert_fail@plt+0x2084>
   166a0:	cmp	r5, #0
   166a4:	mov	r4, r0
   166a8:	bne	166c8 <__assert_fail@plt+0x5340>
   166ac:	cmp	r0, #0
   166b0:	beq	166c0 <__assert_fail@plt+0x5338>
   166b4:	cmp	r6, #0
   166b8:	beq	166e4 <__assert_fail@plt+0x535c>
   166bc:	mvn	r4, #0
   166c0:	mov	r0, r4
   166c4:	pop	{r4, r5, r6, pc}
   166c8:	cmp	r0, #0
   166cc:	bne	166bc <__assert_fail@plt+0x5334>
   166d0:	bl	11280 <__errno_location@plt>
   166d4:	str	r4, [r0]
   166d8:	mvn	r4, #0
   166dc:	mov	r0, r4
   166e0:	pop	{r4, r5, r6, pc}
   166e4:	bl	11280 <__errno_location@plt>
   166e8:	ldr	r4, [r0]
   166ec:	subs	r4, r4, #9
   166f0:	mvnne	r4, #0
   166f4:	mov	r0, r4
   166f8:	pop	{r4, r5, r6, pc}
   166fc:	push	{lr}		; (str lr, [sp, #-4]!)
   16700:	sub	sp, sp, #268	; 0x10c
   16704:	add	r1, sp, #4
   16708:	ldr	r2, [pc, #60]	; 1674c <__assert_fail@plt+0x53c4>
   1670c:	bl	16b3c <_obstack_memory_used@@Base+0x80>
   16710:	cmp	r0, #0
   16714:	movne	r0, #0
   16718:	bne	16744 <__assert_fail@plt+0x53bc>
   1671c:	ldr	r1, [pc, #44]	; 16750 <__assert_fail@plt+0x53c8>
   16720:	add	r0, sp, #4
   16724:	bl	11088 <strcmp@plt>
   16728:	cmp	r0, #0
   1672c:	beq	16744 <__assert_fail@plt+0x53bc>
   16730:	add	r0, sp, #4
   16734:	ldr	r1, [pc, #24]	; 16754 <__assert_fail@plt+0x53cc>
   16738:	bl	11088 <strcmp@plt>
   1673c:	adds	r0, r0, #0
   16740:	movne	r0, #1
   16744:	add	sp, sp, #268	; 0x10c
   16748:	pop	{pc}		; (ldr pc, [sp], #4)
   1674c:	andeq	r0, r0, r1, lsl #2
   16750:	andeq	r8, r1, r8, asr #5
   16754:	andeq	r8, r1, ip, asr #5
   16758:	push	{r4, lr}
   1675c:	mov	r0, #14
   16760:	bl	11328 <nl_langinfo@plt>
   16764:	cmp	r0, #0
   16768:	beq	16780 <__assert_fail@plt+0x53f8>
   1676c:	ldrb	r2, [r0]
   16770:	ldr	r3, [pc, #16]	; 16788 <__assert_fail@plt+0x5400>
   16774:	cmp	r2, #0
   16778:	moveq	r0, r3
   1677c:	pop	{r4, pc}
   16780:	ldr	r0, [pc]	; 16788 <__assert_fail@plt+0x5400>
   16784:	pop	{r4, pc}
   16788:	ldrdeq	r8, [r1], -r4
   1678c:	ldr	r3, [pc, #52]	; 167c8 <__assert_fail@plt+0x5440>
   16790:	push	{r4, lr}
   16794:	mov	r2, #5
   16798:	ldr	r1, [pc, #44]	; 167cc <__assert_fail@plt+0x5444>
   1679c:	mov	r0, #0
   167a0:	ldr	r4, [r3]
   167a4:	bl	11124 <dcgettext@plt>
   167a8:	ldr	r2, [pc, #32]	; 167d0 <__assert_fail@plt+0x5448>
   167ac:	mov	r1, #1
   167b0:	mov	r3, r0
   167b4:	mov	r0, r4
   167b8:	bl	112e0 <__fprintf_chk@plt>
   167bc:	ldr	r3, [pc, #16]	; 167d4 <__assert_fail@plt+0x544c>
   167c0:	ldr	r0, [r3]
   167c4:	bl	11238 <exit@plt>
   167c8:	andeq	r9, r2, r8, lsl #3
   167cc:			; <UNDEFINED> instruction: 0x000182b4
   167d0:	andeq	r7, r1, r0, lsr #31
   167d4:	andeq	r9, r2, ip, lsr #2
   167d8:	ldrb	r3, [r0, #40]	; 0x28
   167dc:	tst	r3, #1
   167e0:	ldr	r3, [r0, #28]
   167e4:	bne	167f0 <__assert_fail@plt+0x5468>
   167e8:	mov	r0, r1
   167ec:	bx	r3
   167f0:	ldr	r0, [r0, #36]	; 0x24
   167f4:	bx	r3
   167f8:	ldrb	r3, [r0, #40]	; 0x28
   167fc:	tst	r3, #1
   16800:	ldr	r3, [r0, #32]
   16804:	bne	16810 <__assert_fail@plt+0x5488>
   16808:	mov	r0, r1
   1680c:	bx	r3
   16810:	ldr	r0, [r0, #36]	; 0x24
   16814:	bx	r3
   16818:	push	{r4, r5, r6, lr}
   1681c:	subs	r5, r2, #0
   16820:	ldr	r3, [pc, #124]	; 168a4 <__assert_fail@plt+0x551c>
   16824:	subne	r6, r5, #1
   16828:	moveq	r6, #7
   1682c:	moveq	r5, #8
   16830:	cmp	r1, #0
   16834:	moveq	r1, r3
   16838:	str	r6, [r0, #24]
   1683c:	str	r1, [r0]
   16840:	mov	r4, r0
   16844:	bl	167d8 <__assert_fail@plt+0x5450>
   16848:	cmp	r0, #0
   1684c:	str	r0, [r4, #4]
   16850:	beq	16898 <__assert_fail@plt+0x5510>
   16854:	ldr	r3, [r4]
   16858:	add	r2, r0, #8
   1685c:	rsb	r5, r5, #0
   16860:	add	r2, r2, r6
   16864:	add	r3, r0, r3
   16868:	and	r2, r2, r5
   1686c:	mov	r1, #0
   16870:	str	r2, [r4, #8]
   16874:	str	r2, [r4, #12]
   16878:	str	r3, [r0]
   1687c:	str	r3, [r4, #16]
   16880:	str	r1, [r0, #4]
   16884:	ldrb	r3, [r4, #40]	; 0x28
   16888:	mov	r0, #1
   1688c:	and	r3, r3, #249	; 0xf9
   16890:	strb	r3, [r4, #40]	; 0x28
   16894:	pop	{r4, r5, r6, pc}
   16898:	ldr	r3, [pc, #8]	; 168a8 <__assert_fail@plt+0x5520>
   1689c:	ldr	r3, [r3]
   168a0:	blx	r3
   168a4:	andeq	r0, r0, r8, ror #31
   168a8:	andeq	r9, r2, r0, ror r1

000168ac <_obstack_begin@@Base>:
   168ac:	push	{r4, lr}
   168b0:	ldrb	lr, [r0, #40]	; 0x28
   168b4:	ldr	r4, [sp, #8]
   168b8:	str	r3, [r0, #28]
   168bc:	bic	lr, lr, #1
   168c0:	str	r4, [r0, #32]
   168c4:	strb	lr, [r0, #40]	; 0x28
   168c8:	pop	{r4, lr}
   168cc:	b	16818 <__assert_fail@plt+0x5490>

000168d0 <_obstack_begin_1@@Base>:
   168d0:	push	{r4, r5, lr}
   168d4:	ldrb	lr, [r0, #40]	; 0x28
   168d8:	ldr	r5, [sp, #12]
   168dc:	ldr	r4, [sp, #16]
   168e0:	orr	lr, lr, #1
   168e4:	str	r3, [r0, #28]
   168e8:	str	r5, [r0, #32]
   168ec:	str	r4, [r0, #36]	; 0x24
   168f0:	strb	lr, [r0, #40]	; 0x28
   168f4:	pop	{r4, r5, lr}
   168f8:	b	16818 <__assert_fail@plt+0x5490>

000168fc <_obstack_newchunk@@Base>:
   168fc:	ldr	r2, [r0, #8]
   16900:	push	{r4, r5, r6, r7, r8, lr}
   16904:	ldr	r6, [r0, #12]
   16908:	ldr	r3, [r0, #24]
   1690c:	sub	r6, r6, r2
   16910:	add	r1, r6, r1
   16914:	adds	r3, r1, r3
   16918:	movcc	r2, #1
   1691c:	movcs	r2, #0
   16920:	cmp	r6, r1
   16924:	movhi	r1, #0
   16928:	andls	r1, r2, #1
   1692c:	cmp	r1, #0
   16930:	bne	16940 <_obstack_newchunk@@Base+0x44>
   16934:	ldr	r3, [pc, #204]	; 16a08 <_obstack_newchunk@@Base+0x10c>
   16938:	ldr	r3, [r3]
   1693c:	blx	r3
   16940:	ldr	r5, [r0]
   16944:	add	r1, r3, r6, lsr #3
   16948:	cmp	r3, r5
   1694c:	movcc	r3, r5
   16950:	add	r1, r1, #100	; 0x64
   16954:	cmp	r3, r1
   16958:	movcs	r5, r3
   1695c:	movcc	r5, r1
   16960:	mov	r1, r5
   16964:	mov	r4, r0
   16968:	ldr	r7, [r0, #4]
   1696c:	bl	167d8 <__assert_fail@plt+0x5450>
   16970:	subs	r8, r0, #0
   16974:	beq	16934 <_obstack_newchunk@@Base+0x38>
   16978:	ldr	r2, [r4, #24]
   1697c:	mov	r3, r8
   16980:	add	r1, r8, r5
   16984:	str	r8, [r4, #4]
   16988:	str	r7, [r8, #4]
   1698c:	str	r1, [r4, #16]
   16990:	str	r1, [r3], #8
   16994:	add	r3, r3, r2
   16998:	bic	r5, r3, r2
   1699c:	mov	r0, r5
   169a0:	mov	r2, r6
   169a4:	ldr	r1, [r4, #8]
   169a8:	bl	110f4 <memcpy@plt>
   169ac:	ldrb	r3, [r4, #40]	; 0x28
   169b0:	tst	r3, #2
   169b4:	bne	169d4 <_obstack_newchunk@@Base+0xd8>
   169b8:	ldr	r2, [r4, #24]
   169bc:	add	r3, r7, #8
   169c0:	add	r3, r3, r2
   169c4:	ldr	r1, [r4, #8]
   169c8:	bic	r3, r3, r2
   169cc:	cmp	r1, r3
   169d0:	beq	169f0 <_obstack_newchunk@@Base+0xf4>
   169d4:	ldrb	r3, [r4, #40]	; 0x28
   169d8:	add	r2, r5, r6
   169dc:	str	r2, [r4, #12]
   169e0:	bic	r3, r3, #2
   169e4:	str	r5, [r4, #8]
   169e8:	strb	r3, [r4, #40]	; 0x28
   169ec:	pop	{r4, r5, r6, r7, r8, pc}
   169f0:	ldr	r3, [r7, #4]
   169f4:	mov	r1, r7
   169f8:	str	r3, [r8, #4]
   169fc:	mov	r0, r4
   16a00:	bl	167f8 <__assert_fail@plt+0x5470>
   16a04:	b	169d4 <_obstack_newchunk@@Base+0xd8>
   16a08:	andeq	r9, r2, r0, ror r1

00016a0c <_obstack_allocated_p@@Base>:
   16a0c:	ldr	r0, [r0, #4]
   16a10:	cmp	r0, #0
   16a14:	bne	16a28 <_obstack_allocated_p@@Base+0x1c>
   16a18:	b	16a44 <_obstack_allocated_p@@Base+0x38>
   16a1c:	ldr	r0, [r0, #4]
   16a20:	cmp	r0, #0
   16a24:	bxeq	lr
   16a28:	cmp	r1, r0
   16a2c:	bls	16a1c <_obstack_allocated_p@@Base+0x10>
   16a30:	ldr	r3, [r0]
   16a34:	cmp	r1, r3
   16a38:	bhi	16a1c <_obstack_allocated_p@@Base+0x10>
   16a3c:	mov	r0, #1
   16a40:	bx	lr
   16a44:	bx	lr

00016a48 <_obstack_free@@Base>:
   16a48:	push	{r4, r5, r6, lr}
   16a4c:	mov	r6, r1
   16a50:	ldr	r4, [r0, #4]
   16a54:	cmp	r4, #0
   16a58:	movne	r5, r0
   16a5c:	beq	16a98 <_obstack_free@@Base+0x50>
   16a60:	cmp	r6, r4
   16a64:	bls	16a74 <_obstack_free@@Base+0x2c>
   16a68:	ldr	r2, [r4]
   16a6c:	cmp	r6, r2
   16a70:	bls	16aa4 <_obstack_free@@Base+0x5c>
   16a74:	mov	r1, r4
   16a78:	mov	r0, r5
   16a7c:	ldr	r4, [r4, #4]
   16a80:	bl	167f8 <__assert_fail@plt+0x5470>
   16a84:	ldrb	r2, [r5, #40]	; 0x28
   16a88:	cmp	r4, #0
   16a8c:	orr	r2, r2, #2
   16a90:	strb	r2, [r5, #40]	; 0x28
   16a94:	bne	16a60 <_obstack_free@@Base+0x18>
   16a98:	cmp	r6, #0
   16a9c:	bne	16ab8 <_obstack_free@@Base+0x70>
   16aa0:	pop	{r4, r5, r6, pc}
   16aa4:	str	r6, [r5, #12]
   16aa8:	str	r6, [r5, #8]
   16aac:	str	r2, [r5, #16]
   16ab0:	str	r4, [r5, #4]
   16ab4:	pop	{r4, r5, r6, pc}
   16ab8:	bl	11370 <abort@plt>

00016abc <_obstack_memory_used@@Base>:
   16abc:	ldr	r3, [r0, #4]
   16ac0:	cmp	r3, #0
   16ac4:	beq	16ae8 <_obstack_memory_used@@Base+0x2c>
   16ac8:	mov	r0, #0
   16acc:	ldr	r2, [r3]
   16ad0:	sub	r2, r2, r3
   16ad4:	ldr	r3, [r3, #4]
   16ad8:	add	r0, r0, r2
   16adc:	cmp	r3, #0
   16ae0:	bne	16acc <_obstack_memory_used@@Base+0x10>
   16ae4:	bx	lr
   16ae8:	mov	r0, r3
   16aec:	bx	lr
   16af0:	push	{r4, r5, r6, lr}
   16af4:	subs	r4, r2, #0
   16af8:	mov	r6, r0
   16afc:	mov	r5, r1
   16b00:	beq	16b2c <_obstack_memory_used@@Base+0x70>
   16b04:	mov	r1, r4
   16b08:	mvn	r0, #0
   16b0c:	bl	16bd4 <_obstack_memory_used@@Base+0x118>
   16b10:	cmp	r0, r5
   16b14:	bcs	16b2c <_obstack_memory_used@@Base+0x70>
   16b18:	bl	11280 <__errno_location@plt>
   16b1c:	mov	r3, #12
   16b20:	str	r3, [r0]
   16b24:	mov	r0, #0
   16b28:	pop	{r4, r5, r6, pc}
   16b2c:	mul	r1, r5, r4
   16b30:	mov	r0, r6
   16b34:	pop	{r4, r5, r6, lr}
   16b38:	b	16624 <__assert_fail@plt+0x529c>
   16b3c:	push	{r4, r5, r6, lr}
   16b40:	mov	r5, r1
   16b44:	mov	r1, #0
   16b48:	mov	r4, r2
   16b4c:	bl	11310 <setlocale@plt>
   16b50:	subs	r6, r0, #0
   16b54:	beq	16bb0 <_obstack_memory_used@@Base+0xf4>
   16b58:	bl	1125c <strlen@plt>
   16b5c:	cmp	r4, r0
   16b60:	bhi	16b98 <_obstack_memory_used@@Base+0xdc>
   16b64:	cmp	r4, #0
   16b68:	bne	16b74 <_obstack_memory_used@@Base+0xb8>
   16b6c:	mov	r0, #34	; 0x22
   16b70:	pop	{r4, r5, r6, pc}
   16b74:	sub	r4, r4, #1
   16b78:	mov	r1, r6
   16b7c:	mov	r2, r4
   16b80:	mov	r0, r5
   16b84:	bl	110f4 <memcpy@plt>
   16b88:	mov	r3, #0
   16b8c:	strb	r3, [r5, r4]
   16b90:	mov	r0, #34	; 0x22
   16b94:	pop	{r4, r5, r6, pc}
   16b98:	add	r2, r0, #1
   16b9c:	mov	r1, r6
   16ba0:	mov	r0, r5
   16ba4:	bl	110f4 <memcpy@plt>
   16ba8:	mov	r0, #0
   16bac:	pop	{r4, r5, r6, pc}
   16bb0:	cmp	r4, #0
   16bb4:	beq	16bc4 <_obstack_memory_used@@Base+0x108>
   16bb8:	strb	r6, [r5]
   16bbc:	mov	r0, #22
   16bc0:	pop	{r4, r5, r6, pc}
   16bc4:	mov	r0, #22
   16bc8:	pop	{r4, r5, r6, pc}
   16bcc:	mov	r1, #0
   16bd0:	b	11310 <setlocale@plt>
   16bd4:	subs	r2, r1, #1
   16bd8:	bxeq	lr
   16bdc:	bcc	16db4 <_obstack_memory_used@@Base+0x2f8>
   16be0:	cmp	r0, r1
   16be4:	bls	16d98 <_obstack_memory_used@@Base+0x2dc>
   16be8:	tst	r1, r2
   16bec:	beq	16da4 <_obstack_memory_used@@Base+0x2e8>
   16bf0:	clz	r3, r0
   16bf4:	clz	r2, r1
   16bf8:	sub	r3, r2, r3
   16bfc:	rsbs	r3, r3, #31
   16c00:	addne	r3, r3, r3, lsl #1
   16c04:	mov	r2, #0
   16c08:	addne	pc, pc, r3, lsl #2
   16c0c:	nop			; (mov r0, r0)
   16c10:	cmp	r0, r1, lsl #31
   16c14:	adc	r2, r2, r2
   16c18:	subcs	r0, r0, r1, lsl #31
   16c1c:	cmp	r0, r1, lsl #30
   16c20:	adc	r2, r2, r2
   16c24:	subcs	r0, r0, r1, lsl #30
   16c28:	cmp	r0, r1, lsl #29
   16c2c:	adc	r2, r2, r2
   16c30:	subcs	r0, r0, r1, lsl #29
   16c34:	cmp	r0, r1, lsl #28
   16c38:	adc	r2, r2, r2
   16c3c:	subcs	r0, r0, r1, lsl #28
   16c40:	cmp	r0, r1, lsl #27
   16c44:	adc	r2, r2, r2
   16c48:	subcs	r0, r0, r1, lsl #27
   16c4c:	cmp	r0, r1, lsl #26
   16c50:	adc	r2, r2, r2
   16c54:	subcs	r0, r0, r1, lsl #26
   16c58:	cmp	r0, r1, lsl #25
   16c5c:	adc	r2, r2, r2
   16c60:	subcs	r0, r0, r1, lsl #25
   16c64:	cmp	r0, r1, lsl #24
   16c68:	adc	r2, r2, r2
   16c6c:	subcs	r0, r0, r1, lsl #24
   16c70:	cmp	r0, r1, lsl #23
   16c74:	adc	r2, r2, r2
   16c78:	subcs	r0, r0, r1, lsl #23
   16c7c:	cmp	r0, r1, lsl #22
   16c80:	adc	r2, r2, r2
   16c84:	subcs	r0, r0, r1, lsl #22
   16c88:	cmp	r0, r1, lsl #21
   16c8c:	adc	r2, r2, r2
   16c90:	subcs	r0, r0, r1, lsl #21
   16c94:	cmp	r0, r1, lsl #20
   16c98:	adc	r2, r2, r2
   16c9c:	subcs	r0, r0, r1, lsl #20
   16ca0:	cmp	r0, r1, lsl #19
   16ca4:	adc	r2, r2, r2
   16ca8:	subcs	r0, r0, r1, lsl #19
   16cac:	cmp	r0, r1, lsl #18
   16cb0:	adc	r2, r2, r2
   16cb4:	subcs	r0, r0, r1, lsl #18
   16cb8:	cmp	r0, r1, lsl #17
   16cbc:	adc	r2, r2, r2
   16cc0:	subcs	r0, r0, r1, lsl #17
   16cc4:	cmp	r0, r1, lsl #16
   16cc8:	adc	r2, r2, r2
   16ccc:	subcs	r0, r0, r1, lsl #16
   16cd0:	cmp	r0, r1, lsl #15
   16cd4:	adc	r2, r2, r2
   16cd8:	subcs	r0, r0, r1, lsl #15
   16cdc:	cmp	r0, r1, lsl #14
   16ce0:	adc	r2, r2, r2
   16ce4:	subcs	r0, r0, r1, lsl #14
   16ce8:	cmp	r0, r1, lsl #13
   16cec:	adc	r2, r2, r2
   16cf0:	subcs	r0, r0, r1, lsl #13
   16cf4:	cmp	r0, r1, lsl #12
   16cf8:	adc	r2, r2, r2
   16cfc:	subcs	r0, r0, r1, lsl #12
   16d00:	cmp	r0, r1, lsl #11
   16d04:	adc	r2, r2, r2
   16d08:	subcs	r0, r0, r1, lsl #11
   16d0c:	cmp	r0, r1, lsl #10
   16d10:	adc	r2, r2, r2
   16d14:	subcs	r0, r0, r1, lsl #10
   16d18:	cmp	r0, r1, lsl #9
   16d1c:	adc	r2, r2, r2
   16d20:	subcs	r0, r0, r1, lsl #9
   16d24:	cmp	r0, r1, lsl #8
   16d28:	adc	r2, r2, r2
   16d2c:	subcs	r0, r0, r1, lsl #8
   16d30:	cmp	r0, r1, lsl #7
   16d34:	adc	r2, r2, r2
   16d38:	subcs	r0, r0, r1, lsl #7
   16d3c:	cmp	r0, r1, lsl #6
   16d40:	adc	r2, r2, r2
   16d44:	subcs	r0, r0, r1, lsl #6
   16d48:	cmp	r0, r1, lsl #5
   16d4c:	adc	r2, r2, r2
   16d50:	subcs	r0, r0, r1, lsl #5
   16d54:	cmp	r0, r1, lsl #4
   16d58:	adc	r2, r2, r2
   16d5c:	subcs	r0, r0, r1, lsl #4
   16d60:	cmp	r0, r1, lsl #3
   16d64:	adc	r2, r2, r2
   16d68:	subcs	r0, r0, r1, lsl #3
   16d6c:	cmp	r0, r1, lsl #2
   16d70:	adc	r2, r2, r2
   16d74:	subcs	r0, r0, r1, lsl #2
   16d78:	cmp	r0, r1, lsl #1
   16d7c:	adc	r2, r2, r2
   16d80:	subcs	r0, r0, r1, lsl #1
   16d84:	cmp	r0, r1
   16d88:	adc	r2, r2, r2
   16d8c:	subcs	r0, r0, r1
   16d90:	mov	r0, r2
   16d94:	bx	lr
   16d98:	moveq	r0, #1
   16d9c:	movne	r0, #0
   16da0:	bx	lr
   16da4:	clz	r2, r1
   16da8:	rsb	r2, r2, #31
   16dac:	lsr	r0, r0, r2
   16db0:	bx	lr
   16db4:	cmp	r0, #0
   16db8:	mvnne	r0, #0
   16dbc:	b	17414 <_obstack_memory_used@@Base+0x958>
   16dc0:	cmp	r1, #0
   16dc4:	beq	16db4 <_obstack_memory_used@@Base+0x2f8>
   16dc8:	push	{r0, r1, lr}
   16dcc:	bl	16bd4 <_obstack_memory_used@@Base+0x118>
   16dd0:	pop	{r1, r2, lr}
   16dd4:	mul	r3, r2, r0
   16dd8:	sub	r1, r1, r3
   16ddc:	bx	lr
   16de0:	cmp	r1, #0
   16de4:	beq	16ff0 <_obstack_memory_used@@Base+0x534>
   16de8:	eor	ip, r0, r1
   16dec:	rsbmi	r1, r1, #0
   16df0:	subs	r2, r1, #1
   16df4:	beq	16fbc <_obstack_memory_used@@Base+0x500>
   16df8:	movs	r3, r0
   16dfc:	rsbmi	r3, r0, #0
   16e00:	cmp	r3, r1
   16e04:	bls	16fc8 <_obstack_memory_used@@Base+0x50c>
   16e08:	tst	r1, r2
   16e0c:	beq	16fd8 <_obstack_memory_used@@Base+0x51c>
   16e10:	clz	r2, r3
   16e14:	clz	r0, r1
   16e18:	sub	r2, r0, r2
   16e1c:	rsbs	r2, r2, #31
   16e20:	addne	r2, r2, r2, lsl #1
   16e24:	mov	r0, #0
   16e28:	addne	pc, pc, r2, lsl #2
   16e2c:	nop			; (mov r0, r0)
   16e30:	cmp	r3, r1, lsl #31
   16e34:	adc	r0, r0, r0
   16e38:	subcs	r3, r3, r1, lsl #31
   16e3c:	cmp	r3, r1, lsl #30
   16e40:	adc	r0, r0, r0
   16e44:	subcs	r3, r3, r1, lsl #30
   16e48:	cmp	r3, r1, lsl #29
   16e4c:	adc	r0, r0, r0
   16e50:	subcs	r3, r3, r1, lsl #29
   16e54:	cmp	r3, r1, lsl #28
   16e58:	adc	r0, r0, r0
   16e5c:	subcs	r3, r3, r1, lsl #28
   16e60:	cmp	r3, r1, lsl #27
   16e64:	adc	r0, r0, r0
   16e68:	subcs	r3, r3, r1, lsl #27
   16e6c:	cmp	r3, r1, lsl #26
   16e70:	adc	r0, r0, r0
   16e74:	subcs	r3, r3, r1, lsl #26
   16e78:	cmp	r3, r1, lsl #25
   16e7c:	adc	r0, r0, r0
   16e80:	subcs	r3, r3, r1, lsl #25
   16e84:	cmp	r3, r1, lsl #24
   16e88:	adc	r0, r0, r0
   16e8c:	subcs	r3, r3, r1, lsl #24
   16e90:	cmp	r3, r1, lsl #23
   16e94:	adc	r0, r0, r0
   16e98:	subcs	r3, r3, r1, lsl #23
   16e9c:	cmp	r3, r1, lsl #22
   16ea0:	adc	r0, r0, r0
   16ea4:	subcs	r3, r3, r1, lsl #22
   16ea8:	cmp	r3, r1, lsl #21
   16eac:	adc	r0, r0, r0
   16eb0:	subcs	r3, r3, r1, lsl #21
   16eb4:	cmp	r3, r1, lsl #20
   16eb8:	adc	r0, r0, r0
   16ebc:	subcs	r3, r3, r1, lsl #20
   16ec0:	cmp	r3, r1, lsl #19
   16ec4:	adc	r0, r0, r0
   16ec8:	subcs	r3, r3, r1, lsl #19
   16ecc:	cmp	r3, r1, lsl #18
   16ed0:	adc	r0, r0, r0
   16ed4:	subcs	r3, r3, r1, lsl #18
   16ed8:	cmp	r3, r1, lsl #17
   16edc:	adc	r0, r0, r0
   16ee0:	subcs	r3, r3, r1, lsl #17
   16ee4:	cmp	r3, r1, lsl #16
   16ee8:	adc	r0, r0, r0
   16eec:	subcs	r3, r3, r1, lsl #16
   16ef0:	cmp	r3, r1, lsl #15
   16ef4:	adc	r0, r0, r0
   16ef8:	subcs	r3, r3, r1, lsl #15
   16efc:	cmp	r3, r1, lsl #14
   16f00:	adc	r0, r0, r0
   16f04:	subcs	r3, r3, r1, lsl #14
   16f08:	cmp	r3, r1, lsl #13
   16f0c:	adc	r0, r0, r0
   16f10:	subcs	r3, r3, r1, lsl #13
   16f14:	cmp	r3, r1, lsl #12
   16f18:	adc	r0, r0, r0
   16f1c:	subcs	r3, r3, r1, lsl #12
   16f20:	cmp	r3, r1, lsl #11
   16f24:	adc	r0, r0, r0
   16f28:	subcs	r3, r3, r1, lsl #11
   16f2c:	cmp	r3, r1, lsl #10
   16f30:	adc	r0, r0, r0
   16f34:	subcs	r3, r3, r1, lsl #10
   16f38:	cmp	r3, r1, lsl #9
   16f3c:	adc	r0, r0, r0
   16f40:	subcs	r3, r3, r1, lsl #9
   16f44:	cmp	r3, r1, lsl #8
   16f48:	adc	r0, r0, r0
   16f4c:	subcs	r3, r3, r1, lsl #8
   16f50:	cmp	r3, r1, lsl #7
   16f54:	adc	r0, r0, r0
   16f58:	subcs	r3, r3, r1, lsl #7
   16f5c:	cmp	r3, r1, lsl #6
   16f60:	adc	r0, r0, r0
   16f64:	subcs	r3, r3, r1, lsl #6
   16f68:	cmp	r3, r1, lsl #5
   16f6c:	adc	r0, r0, r0
   16f70:	subcs	r3, r3, r1, lsl #5
   16f74:	cmp	r3, r1, lsl #4
   16f78:	adc	r0, r0, r0
   16f7c:	subcs	r3, r3, r1, lsl #4
   16f80:	cmp	r3, r1, lsl #3
   16f84:	adc	r0, r0, r0
   16f88:	subcs	r3, r3, r1, lsl #3
   16f8c:	cmp	r3, r1, lsl #2
   16f90:	adc	r0, r0, r0
   16f94:	subcs	r3, r3, r1, lsl #2
   16f98:	cmp	r3, r1, lsl #1
   16f9c:	adc	r0, r0, r0
   16fa0:	subcs	r3, r3, r1, lsl #1
   16fa4:	cmp	r3, r1
   16fa8:	adc	r0, r0, r0
   16fac:	subcs	r3, r3, r1
   16fb0:	cmp	ip, #0
   16fb4:	rsbmi	r0, r0, #0
   16fb8:	bx	lr
   16fbc:	teq	ip, r0
   16fc0:	rsbmi	r0, r0, #0
   16fc4:	bx	lr
   16fc8:	movcc	r0, #0
   16fcc:	asreq	r0, ip, #31
   16fd0:	orreq	r0, r0, #1
   16fd4:	bx	lr
   16fd8:	clz	r2, r1
   16fdc:	rsb	r2, r2, #31
   16fe0:	cmp	ip, #0
   16fe4:	lsr	r0, r3, r2
   16fe8:	rsbmi	r0, r0, #0
   16fec:	bx	lr
   16ff0:	cmp	r0, #0
   16ff4:	mvngt	r0, #-2147483648	; 0x80000000
   16ff8:	movlt	r0, #-2147483648	; 0x80000000
   16ffc:	b	17414 <_obstack_memory_used@@Base+0x958>
   17000:	cmp	r1, #0
   17004:	beq	16ff0 <_obstack_memory_used@@Base+0x534>
   17008:	push	{r0, r1, lr}
   1700c:	bl	16de8 <_obstack_memory_used@@Base+0x32c>
   17010:	pop	{r1, r2, lr}
   17014:	mul	r3, r2, r0
   17018:	sub	r1, r1, r3
   1701c:	bx	lr
   17020:	eor	r1, r1, #-2147483648	; 0x80000000
   17024:	b	1702c <_obstack_memory_used@@Base+0x570>
   17028:	eor	r3, r3, #-2147483648	; 0x80000000
   1702c:	push	{r4, r5, lr}
   17030:	lsl	r4, r1, #1
   17034:	lsl	r5, r3, #1
   17038:	teq	r4, r5
   1703c:	teqeq	r0, r2
   17040:	orrsne	ip, r4, r0
   17044:	orrsne	ip, r5, r2
   17048:	mvnsne	ip, r4, asr #21
   1704c:	mvnsne	ip, r5, asr #21
   17050:	beq	1723c <_obstack_memory_used@@Base+0x780>
   17054:	lsr	r4, r4, #21
   17058:	rsbs	r5, r4, r5, lsr #21
   1705c:	rsblt	r5, r5, #0
   17060:	ble	17080 <_obstack_memory_used@@Base+0x5c4>
   17064:	add	r4, r4, r5
   17068:	eor	r2, r0, r2
   1706c:	eor	r3, r1, r3
   17070:	eor	r0, r2, r0
   17074:	eor	r1, r3, r1
   17078:	eor	r2, r0, r2
   1707c:	eor	r3, r1, r3
   17080:	cmp	r5, #54	; 0x36
   17084:	pophi	{r4, r5, pc}
   17088:	tst	r1, #-2147483648	; 0x80000000
   1708c:	lsl	r1, r1, #12
   17090:	mov	ip, #1048576	; 0x100000
   17094:	orr	r1, ip, r1, lsr #12
   17098:	beq	170a4 <_obstack_memory_used@@Base+0x5e8>
   1709c:	rsbs	r0, r0, #0
   170a0:	rsc	r1, r1, #0
   170a4:	tst	r3, #-2147483648	; 0x80000000
   170a8:	lsl	r3, r3, #12
   170ac:	orr	r3, ip, r3, lsr #12
   170b0:	beq	170bc <_obstack_memory_used@@Base+0x600>
   170b4:	rsbs	r2, r2, #0
   170b8:	rsc	r3, r3, #0
   170bc:	teq	r4, r5
   170c0:	beq	17224 <_obstack_memory_used@@Base+0x768>
   170c4:	sub	r4, r4, #1
   170c8:	rsbs	lr, r5, #32
   170cc:	blt	170e8 <_obstack_memory_used@@Base+0x62c>
   170d0:	lsl	ip, r2, lr
   170d4:	adds	r0, r0, r2, lsr r5
   170d8:	adc	r1, r1, #0
   170dc:	adds	r0, r0, r3, lsl lr
   170e0:	adcs	r1, r1, r3, asr r5
   170e4:	b	17104 <_obstack_memory_used@@Base+0x648>
   170e8:	sub	r5, r5, #32
   170ec:	add	lr, lr, #32
   170f0:	cmp	r2, #1
   170f4:	lsl	ip, r3, lr
   170f8:	orrcs	ip, ip, #2
   170fc:	adds	r0, r0, r3, asr r5
   17100:	adcs	r1, r1, r3, asr #31
   17104:	and	r5, r1, #-2147483648	; 0x80000000
   17108:	bpl	17118 <_obstack_memory_used@@Base+0x65c>
   1710c:	rsbs	ip, ip, #0
   17110:	rscs	r0, r0, #0
   17114:	rsc	r1, r1, #0
   17118:	cmp	r1, #1048576	; 0x100000
   1711c:	bcc	1715c <_obstack_memory_used@@Base+0x6a0>
   17120:	cmp	r1, #2097152	; 0x200000
   17124:	bcc	17144 <_obstack_memory_used@@Base+0x688>
   17128:	lsrs	r1, r1, #1
   1712c:	rrxs	r0, r0
   17130:	rrx	ip, ip
   17134:	add	r4, r4, #1
   17138:	lsl	r2, r4, #21
   1713c:	cmn	r2, #4194304	; 0x400000
   17140:	bcs	1729c <_obstack_memory_used@@Base+0x7e0>
   17144:	cmp	ip, #-2147483648	; 0x80000000
   17148:	lsrseq	ip, r0, #1
   1714c:	adcs	r0, r0, #0
   17150:	adc	r1, r1, r4, lsl #20
   17154:	orr	r1, r1, r5
   17158:	pop	{r4, r5, pc}
   1715c:	lsls	ip, ip, #1
   17160:	adcs	r0, r0, r0
   17164:	adc	r1, r1, r1
   17168:	tst	r1, #1048576	; 0x100000
   1716c:	sub	r4, r4, #1
   17170:	bne	17144 <_obstack_memory_used@@Base+0x688>
   17174:	teq	r1, #0
   17178:	moveq	r1, r0
   1717c:	moveq	r0, #0
   17180:	clz	r3, r1
   17184:	addeq	r3, r3, #32
   17188:	sub	r3, r3, #11
   1718c:	subs	r2, r3, #32
   17190:	bge	171b4 <_obstack_memory_used@@Base+0x6f8>
   17194:	adds	r2, r2, #12
   17198:	ble	171b0 <_obstack_memory_used@@Base+0x6f4>
   1719c:	add	ip, r2, #20
   171a0:	rsb	r2, r2, #12
   171a4:	lsl	r0, r1, ip
   171a8:	lsr	r1, r1, r2
   171ac:	b	171c4 <_obstack_memory_used@@Base+0x708>
   171b0:	add	r2, r2, #20
   171b4:	rsble	ip, r2, #32
   171b8:	lsl	r1, r1, r2
   171bc:	orrle	r1, r1, r0, lsr ip
   171c0:	lslle	r0, r0, r2
   171c4:	subs	r4, r4, r3
   171c8:	addge	r1, r1, r4, lsl #20
   171cc:	orrge	r1, r1, r5
   171d0:	popge	{r4, r5, pc}
   171d4:	mvn	r4, r4
   171d8:	subs	r4, r4, #31
   171dc:	bge	17218 <_obstack_memory_used@@Base+0x75c>
   171e0:	adds	r4, r4, #12
   171e4:	bgt	17200 <_obstack_memory_used@@Base+0x744>
   171e8:	add	r4, r4, #20
   171ec:	rsb	r2, r4, #32
   171f0:	lsr	r0, r0, r4
   171f4:	orr	r0, r0, r1, lsl r2
   171f8:	orr	r1, r5, r1, lsr r4
   171fc:	pop	{r4, r5, pc}
   17200:	rsb	r4, r4, #12
   17204:	rsb	r2, r4, #32
   17208:	lsr	r0, r0, r2
   1720c:	orr	r0, r0, r1, lsl r4
   17210:	mov	r1, r5
   17214:	pop	{r4, r5, pc}
   17218:	lsr	r0, r1, r4
   1721c:	mov	r1, r5
   17220:	pop	{r4, r5, pc}
   17224:	teq	r4, #0
   17228:	eor	r3, r3, #1048576	; 0x100000
   1722c:	eoreq	r1, r1, #1048576	; 0x100000
   17230:	addeq	r4, r4, #1
   17234:	subne	r5, r5, #1
   17238:	b	170c4 <_obstack_memory_used@@Base+0x608>
   1723c:	mvns	ip, r4, asr #21
   17240:	mvnsne	ip, r5, asr #21
   17244:	beq	172ac <_obstack_memory_used@@Base+0x7f0>
   17248:	teq	r4, r5
   1724c:	teqeq	r0, r2
   17250:	beq	17264 <_obstack_memory_used@@Base+0x7a8>
   17254:	orrs	ip, r4, r0
   17258:	moveq	r1, r3
   1725c:	moveq	r0, r2
   17260:	pop	{r4, r5, pc}
   17264:	teq	r1, r3
   17268:	movne	r1, #0
   1726c:	movne	r0, #0
   17270:	popne	{r4, r5, pc}
   17274:	lsrs	ip, r4, #21
   17278:	bne	1728c <_obstack_memory_used@@Base+0x7d0>
   1727c:	lsls	r0, r0, #1
   17280:	adcs	r1, r1, r1
   17284:	orrcs	r1, r1, #-2147483648	; 0x80000000
   17288:	pop	{r4, r5, pc}
   1728c:	adds	r4, r4, #4194304	; 0x400000
   17290:	addcc	r1, r1, #1048576	; 0x100000
   17294:	popcc	{r4, r5, pc}
   17298:	and	r5, r1, #-2147483648	; 0x80000000
   1729c:	orr	r1, r5, #2130706432	; 0x7f000000
   172a0:	orr	r1, r1, #15728640	; 0xf00000
   172a4:	mov	r0, #0
   172a8:	pop	{r4, r5, pc}
   172ac:	mvns	ip, r4, asr #21
   172b0:	movne	r1, r3
   172b4:	movne	r0, r2
   172b8:	mvnseq	ip, r5, asr #21
   172bc:	movne	r3, r1
   172c0:	movne	r2, r0
   172c4:	orrs	r4, r0, r1, lsl #12
   172c8:	orrseq	r5, r2, r3, lsl #12
   172cc:	teqeq	r1, r3
   172d0:	orrne	r1, r1, #524288	; 0x80000
   172d4:	pop	{r4, r5, pc}
   172d8:	teq	r0, #0
   172dc:	moveq	r1, #0
   172e0:	bxeq	lr
   172e4:	push	{r4, r5, lr}
   172e8:	mov	r4, #1024	; 0x400
   172ec:	add	r4, r4, #50	; 0x32
   172f0:	mov	r5, #0
   172f4:	mov	r1, #0
   172f8:	b	17174 <_obstack_memory_used@@Base+0x6b8>
   172fc:	teq	r0, #0
   17300:	moveq	r1, #0
   17304:	bxeq	lr
   17308:	push	{r4, r5, lr}
   1730c:	mov	r4, #1024	; 0x400
   17310:	add	r4, r4, #50	; 0x32
   17314:	ands	r5, r0, #-2147483648	; 0x80000000
   17318:	rsbmi	r0, r0, #0
   1731c:	mov	r1, #0
   17320:	b	17174 <_obstack_memory_used@@Base+0x6b8>
   17324:	lsls	r2, r0, #1
   17328:	asr	r1, r2, #3
   1732c:	rrx	r1, r1
   17330:	lsl	r0, r2, #28
   17334:	andsne	r3, r2, #-16777216	; 0xff000000
   17338:	teqne	r3, #-16777216	; 0xff000000
   1733c:	eorne	r1, r1, #939524096	; 0x38000000
   17340:	bxne	lr
   17344:	teq	r2, #0
   17348:	teqne	r3, #-16777216	; 0xff000000
   1734c:	bxeq	lr
   17350:	push	{r4, r5, lr}
   17354:	mov	r4, #896	; 0x380
   17358:	and	r5, r1, #-2147483648	; 0x80000000
   1735c:	bic	r1, r1, #-2147483648	; 0x80000000
   17360:	b	17174 <_obstack_memory_used@@Base+0x6b8>
   17364:	orrs	r2, r0, r1
   17368:	bxeq	lr
   1736c:	push	{r4, r5, lr}
   17370:	mov	r5, #0
   17374:	b	17394 <_obstack_memory_used@@Base+0x8d8>
   17378:	orrs	r2, r0, r1
   1737c:	bxeq	lr
   17380:	push	{r4, r5, lr}
   17384:	ands	r5, r1, #-2147483648	; 0x80000000
   17388:	bpl	17394 <_obstack_memory_used@@Base+0x8d8>
   1738c:	rsbs	r0, r0, #0
   17390:	rsc	r1, r1, #0
   17394:	mov	r4, #1024	; 0x400
   17398:	add	r4, r4, #50	; 0x32
   1739c:	lsrs	ip, r1, #22
   173a0:	beq	17118 <_obstack_memory_used@@Base+0x65c>
   173a4:	mov	r2, #3
   173a8:	lsrs	ip, ip, #3
   173ac:	addne	r2, r2, #3
   173b0:	lsrs	ip, ip, #3
   173b4:	addne	r2, r2, #3
   173b8:	add	r2, r2, ip, lsr #3
   173bc:	rsb	r3, r2, #32
   173c0:	lsl	ip, r0, r3
   173c4:	lsr	r0, r0, r2
   173c8:	orr	r0, r0, r1, lsl r3
   173cc:	lsr	r1, r1, r2
   173d0:	add	r4, r4, r2
   173d4:	b	17118 <_obstack_memory_used@@Base+0x65c>
   173d8:	cmp	r3, #0
   173dc:	cmpeq	r2, #0
   173e0:	bne	173f8 <_obstack_memory_used@@Base+0x93c>
   173e4:	cmp	r1, #0
   173e8:	cmpeq	r0, #0
   173ec:	mvnne	r1, #0
   173f0:	mvnne	r0, #0
   173f4:	b	17414 <_obstack_memory_used@@Base+0x958>
   173f8:	sub	sp, sp, #8
   173fc:	push	{sp, lr}
   17400:	bl	17424 <_obstack_memory_used@@Base+0x968>
   17404:	ldr	lr, [sp, #4]
   17408:	add	sp, sp, #8
   1740c:	pop	{r2, r3}
   17410:	bx	lr
   17414:	push	{r1, lr}
   17418:	mov	r0, #8
   1741c:	bl	1107c <raise@plt>
   17420:	pop	{r1, pc}
   17424:	cmp	r1, r3
   17428:	push	{r4, r5, r6, r7, r8, r9, lr}
   1742c:	cmpeq	r0, r2
   17430:	mov	r4, r0
   17434:	mov	r5, r1
   17438:	ldr	r9, [sp, #28]
   1743c:	movcc	r0, #0
   17440:	movcc	r1, #0
   17444:	bcc	1753c <_obstack_memory_used@@Base+0xa80>
   17448:	cmp	r3, #0
   1744c:	clzeq	ip, r2
   17450:	clzne	ip, r3
   17454:	addeq	ip, ip, #32
   17458:	cmp	r5, #0
   1745c:	clzeq	r1, r4
   17460:	addeq	r1, r1, #32
   17464:	clzne	r1, r5
   17468:	sub	ip, ip, r1
   1746c:	sub	lr, ip, #32
   17470:	lsl	r7, r3, ip
   17474:	rsb	r8, ip, #32
   17478:	orr	r7, r7, r2, lsl lr
   1747c:	orr	r7, r7, r2, lsr r8
   17480:	lsl	r6, r2, ip
   17484:	cmp	r5, r7
   17488:	cmpeq	r4, r6
   1748c:	movcc	r0, #0
   17490:	movcc	r1, #0
   17494:	bcc	174b0 <_obstack_memory_used@@Base+0x9f4>
   17498:	mov	r3, #1
   1749c:	subs	r4, r4, r6
   174a0:	lsl	r1, r3, lr
   174a4:	lsl	r0, r3, ip
   174a8:	orr	r1, r1, r3, lsr r8
   174ac:	sbc	r5, r5, r7
   174b0:	cmp	ip, #0
   174b4:	beq	1753c <_obstack_memory_used@@Base+0xa80>
   174b8:	lsrs	r3, r7, #1
   174bc:	rrx	r2, r6
   174c0:	mov	r6, ip
   174c4:	b	174e8 <_obstack_memory_used@@Base+0xa2c>
   174c8:	subs	r4, r4, r2
   174cc:	sbc	r5, r5, r3
   174d0:	adds	r4, r4, r4
   174d4:	adc	r5, r5, r5
   174d8:	adds	r4, r4, #1
   174dc:	adc	r5, r5, #0
   174e0:	subs	r6, r6, #1
   174e4:	beq	17504 <_obstack_memory_used@@Base+0xa48>
   174e8:	cmp	r5, r3
   174ec:	cmpeq	r4, r2
   174f0:	bcs	174c8 <_obstack_memory_used@@Base+0xa0c>
   174f4:	adds	r4, r4, r4
   174f8:	adc	r5, r5, r5
   174fc:	subs	r6, r6, #1
   17500:	bne	174e8 <_obstack_memory_used@@Base+0xa2c>
   17504:	lsr	r6, r4, ip
   17508:	lsr	r7, r5, ip
   1750c:	orr	r6, r6, r5, lsl r8
   17510:	adds	r2, r0, r4
   17514:	orr	r6, r6, r5, lsr lr
   17518:	adc	r3, r1, r5
   1751c:	lsl	r1, r7, ip
   17520:	orr	r1, r1, r6, lsl lr
   17524:	lsl	r0, r6, ip
   17528:	orr	r1, r1, r6, lsr r8
   1752c:	subs	r0, r2, r0
   17530:	mov	r4, r6
   17534:	mov	r5, r7
   17538:	sbc	r1, r3, r1
   1753c:	cmp	r9, #0
   17540:	popeq	{r4, r5, r6, r7, r8, r9, pc}
   17544:	strd	r4, [r9]
   17548:	pop	{r4, r5, r6, r7, r8, r9, pc}
   1754c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   17550:	mov	r7, r0
   17554:	ldr	r6, [pc, #72]	; 175a4 <_obstack_memory_used@@Base+0xae8>
   17558:	ldr	r5, [pc, #72]	; 175a8 <_obstack_memory_used@@Base+0xaec>
   1755c:	add	r6, pc, r6
   17560:	add	r5, pc, r5
   17564:	sub	r6, r6, r5
   17568:	mov	r8, r1
   1756c:	mov	r9, r2
   17570:	bl	11044 <calloc@plt-0x20>
   17574:	asrs	r6, r6, #2
   17578:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   1757c:	mov	r4, #0
   17580:	add	r4, r4, #1
   17584:	ldr	r3, [r5], #4
   17588:	mov	r2, r9
   1758c:	mov	r1, r8
   17590:	mov	r0, r7
   17594:	blx	r3
   17598:	cmp	r6, r4
   1759c:	bne	17580 <_obstack_memory_used@@Base+0xac4>
   175a0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   175a4:	andeq	r1, r1, ip, lsr #19
   175a8:	andeq	r1, r1, r4, lsr #19
   175ac:	bx	lr
   175b0:	ldr	r3, [pc, #12]	; 175c4 <_obstack_memory_used@@Base+0xb08>
   175b4:	mov	r1, #0
   175b8:	add	r3, pc, r3
   175bc:	ldr	r2, [r3]
   175c0:	b	1128c <__cxa_atexit@plt>
   175c4:	andeq	r1, r1, r4, ror #22

Disassembly of section .fini:

000175c8 <.fini>:
   175c8:	push	{r3, lr}
   175cc:	pop	{r3, pc}
