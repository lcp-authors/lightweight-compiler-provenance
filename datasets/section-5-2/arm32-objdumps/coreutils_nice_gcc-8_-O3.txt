
../repos/coreutils/src/nice:     file format elf32-littlearm


Disassembly of section .init:

00010ba0 <.init>:
   10ba0:	push	{r3, lr}
   10ba4:	bl	1122c <__assert_fail@plt+0x438>
   10ba8:	pop	{r3, pc}

Disassembly of section .plt:

00010bac <calloc@plt-0x14>:
   10bac:	push	{lr}		; (str lr, [sp, #-4]!)
   10bb0:	ldr	lr, [pc, #4]	; 10bbc <calloc@plt-0x4>
   10bb4:	add	lr, pc, lr
   10bb8:	ldr	pc, [lr, #8]!
   10bbc:	andeq	r7, r1, r4, asr #8

00010bc0 <calloc@plt>:
   10bc0:	add	ip, pc, #0, 12
   10bc4:	add	ip, ip, #94208	; 0x17000
   10bc8:	ldr	pc, [ip, #1092]!	; 0x444

00010bcc <fputs_unlocked@plt>:
   10bcc:	add	ip, pc, #0, 12
   10bd0:	add	ip, ip, #94208	; 0x17000
   10bd4:	ldr	pc, [ip, #1084]!	; 0x43c

00010bd8 <strcmp@plt>:
   10bd8:	add	ip, pc, #0, 12
   10bdc:	add	ip, ip, #94208	; 0x17000
   10be0:	ldr	pc, [ip, #1076]!	; 0x434

00010be4 <strtol@plt>:
   10be4:	add	ip, pc, #0, 12
   10be8:	add	ip, ip, #94208	; 0x17000
   10bec:	ldr	pc, [ip, #1068]!	; 0x42c

00010bf0 <fflush@plt>:
   10bf0:	add	ip, pc, #0, 12
   10bf4:	add	ip, ip, #94208	; 0x17000
   10bf8:	ldr	pc, [ip, #1060]!	; 0x424

00010bfc <free@plt>:
   10bfc:	add	ip, pc, #0, 12
   10c00:	add	ip, ip, #94208	; 0x17000
   10c04:	ldr	pc, [ip, #1052]!	; 0x41c

00010c08 <_exit@plt>:
   10c08:	add	ip, pc, #0, 12
   10c0c:	add	ip, ip, #94208	; 0x17000
   10c10:	ldr	pc, [ip, #1044]!	; 0x414

00010c14 <memcpy@plt>:
   10c14:	add	ip, pc, #0, 12
   10c18:	add	ip, ip, #94208	; 0x17000
   10c1c:	ldr	pc, [ip, #1036]!	; 0x40c

00010c20 <execvp@plt>:
   10c20:	add	ip, pc, #0, 12
   10c24:	add	ip, ip, #94208	; 0x17000
   10c28:	ldr	pc, [ip, #1028]!	; 0x404

00010c2c <mbsinit@plt>:
   10c2c:	add	ip, pc, #0, 12
   10c30:	add	ip, ip, #94208	; 0x17000
   10c34:	ldr	pc, [ip, #1020]!	; 0x3fc

00010c38 <memcmp@plt>:
   10c38:	add	ip, pc, #0, 12
   10c3c:	add	ip, ip, #94208	; 0x17000
   10c40:	ldr	pc, [ip, #1012]!	; 0x3f4

00010c44 <fputc_unlocked@plt>:
   10c44:	add	ip, pc, #0, 12
   10c48:	add	ip, ip, #94208	; 0x17000
   10c4c:	ldr	pc, [ip, #1004]!	; 0x3ec

00010c50 <dcgettext@plt>:
   10c50:	add	ip, pc, #0, 12
   10c54:	add	ip, ip, #94208	; 0x17000
   10c58:	ldr	pc, [ip, #996]!	; 0x3e4

00010c5c <realloc@plt>:
   10c5c:	add	ip, pc, #0, 12
   10c60:	add	ip, ip, #94208	; 0x17000
   10c64:	ldr	pc, [ip, #988]!	; 0x3dc

00010c68 <getpriority@plt>:
   10c68:	add	ip, pc, #0, 12
   10c6c:	add	ip, ip, #94208	; 0x17000
   10c70:	ldr	pc, [ip, #980]!	; 0x3d4

00010c74 <textdomain@plt>:
   10c74:	add	ip, pc, #0, 12
   10c78:	add	ip, ip, #94208	; 0x17000
   10c7c:	ldr	pc, [ip, #972]!	; 0x3cc

00010c80 <iswprint@plt>:
   10c80:	add	ip, pc, #0, 12
   10c84:	add	ip, ip, #94208	; 0x17000
   10c88:	ldr	pc, [ip, #964]!	; 0x3c4

00010c8c <fwrite@plt>:
   10c8c:	add	ip, pc, #0, 12
   10c90:	add	ip, ip, #94208	; 0x17000
   10c94:	ldr	pc, [ip, #956]!	; 0x3bc

00010c98 <lseek64@plt>:
   10c98:	add	ip, pc, #0, 12
   10c9c:	add	ip, ip, #94208	; 0x17000
   10ca0:	ldr	pc, [ip, #948]!	; 0x3b4

00010ca4 <__ctype_get_mb_cur_max@plt>:
   10ca4:	add	ip, pc, #0, 12
   10ca8:	add	ip, ip, #94208	; 0x17000
   10cac:	ldr	pc, [ip, #940]!	; 0x3ac

00010cb0 <__fpending@plt>:
   10cb0:	add	ip, pc, #0, 12
   10cb4:	add	ip, ip, #94208	; 0x17000
   10cb8:	ldr	pc, [ip, #932]!	; 0x3a4

00010cbc <mbrtowc@plt>:
   10cbc:	add	ip, pc, #0, 12
   10cc0:	add	ip, ip, #94208	; 0x17000
   10cc4:	ldr	pc, [ip, #924]!	; 0x39c

00010cc8 <error@plt>:
   10cc8:	add	ip, pc, #0, 12
   10ccc:	add	ip, ip, #94208	; 0x17000
   10cd0:	ldr	pc, [ip, #916]!	; 0x394

00010cd4 <setpriority@plt>:
   10cd4:	add	ip, pc, #0, 12
   10cd8:	add	ip, ip, #94208	; 0x17000
   10cdc:	ldr	pc, [ip, #908]!	; 0x38c

00010ce0 <malloc@plt>:
   10ce0:	add	ip, pc, #0, 12
   10ce4:	add	ip, ip, #94208	; 0x17000
   10ce8:	ldr	pc, [ip, #900]!	; 0x384

00010cec <__libc_start_main@plt>:
   10cec:	add	ip, pc, #0, 12
   10cf0:	add	ip, ip, #94208	; 0x17000
   10cf4:	ldr	pc, [ip, #892]!	; 0x37c

00010cf8 <__freading@plt>:
   10cf8:	add	ip, pc, #0, 12
   10cfc:	add	ip, ip, #94208	; 0x17000
   10d00:	ldr	pc, [ip, #884]!	; 0x374

00010d04 <__gmon_start__@plt>:
   10d04:	add	ip, pc, #0, 12
   10d08:	add	ip, ip, #94208	; 0x17000
   10d0c:	ldr	pc, [ip, #876]!	; 0x36c

00010d10 <getopt_long@plt>:
   10d10:	add	ip, pc, #0, 12
   10d14:	add	ip, ip, #94208	; 0x17000
   10d18:	ldr	pc, [ip, #868]!	; 0x364

00010d1c <__ctype_b_loc@plt>:
   10d1c:	add	ip, pc, #0, 12
   10d20:	add	ip, ip, #94208	; 0x17000
   10d24:	ldr	pc, [ip, #860]!	; 0x35c

00010d28 <exit@plt>:
   10d28:	add	ip, pc, #0, 12
   10d2c:	add	ip, ip, #94208	; 0x17000
   10d30:	ldr	pc, [ip, #852]!	; 0x354

00010d34 <strlen@plt>:
   10d34:	add	ip, pc, #0, 12
   10d38:	add	ip, ip, #94208	; 0x17000
   10d3c:	ldr	pc, [ip, #844]!	; 0x34c

00010d40 <strchr@plt>:
   10d40:	add	ip, pc, #0, 12
   10d44:	add	ip, ip, #94208	; 0x17000
   10d48:	ldr	pc, [ip, #836]!	; 0x344

00010d4c <__errno_location@plt>:
   10d4c:	add	ip, pc, #0, 12
   10d50:	add	ip, ip, #94208	; 0x17000
   10d54:	ldr	pc, [ip, #828]!	; 0x33c

00010d58 <__cxa_atexit@plt>:
   10d58:	add	ip, pc, #0, 12
   10d5c:	add	ip, ip, #94208	; 0x17000
   10d60:	ldr	pc, [ip, #820]!	; 0x334

00010d64 <memset@plt>:
   10d64:	add	ip, pc, #0, 12
   10d68:	add	ip, ip, #94208	; 0x17000
   10d6c:	ldr	pc, [ip, #812]!	; 0x32c

00010d70 <__printf_chk@plt>:
   10d70:	add	ip, pc, #0, 12
   10d74:	add	ip, ip, #94208	; 0x17000
   10d78:	ldr	pc, [ip, #804]!	; 0x324

00010d7c <fileno@plt>:
   10d7c:	add	ip, pc, #0, 12
   10d80:	add	ip, ip, #94208	; 0x17000
   10d84:	ldr	pc, [ip, #796]!	; 0x31c

00010d88 <__fprintf_chk@plt>:
   10d88:	add	ip, pc, #0, 12
   10d8c:	add	ip, ip, #94208	; 0x17000
   10d90:	ldr	pc, [ip, #788]!	; 0x314

00010d94 <fclose@plt>:
   10d94:	add	ip, pc, #0, 12
   10d98:	add	ip, ip, #94208	; 0x17000
   10d9c:	ldr	pc, [ip, #780]!	; 0x30c

00010da0 <fseeko64@plt>:
   10da0:	add	ip, pc, #0, 12
   10da4:	add	ip, ip, #94208	; 0x17000
   10da8:	ldr	pc, [ip, #772]!	; 0x304

00010dac <setlocale@plt>:
   10dac:	add	ip, pc, #0, 12
   10db0:	add	ip, ip, #94208	; 0x17000
   10db4:	ldr	pc, [ip, #764]!	; 0x2fc

00010db8 <strrchr@plt>:
   10db8:	add	ip, pc, #0, 12
   10dbc:	add	ip, ip, #94208	; 0x17000
   10dc0:	ldr	pc, [ip, #756]!	; 0x2f4

00010dc4 <nl_langinfo@plt>:
   10dc4:	add	ip, pc, #0, 12
   10dc8:	add	ip, ip, #94208	; 0x17000
   10dcc:	ldr	pc, [ip, #748]!	; 0x2ec

00010dd0 <bindtextdomain@plt>:
   10dd0:	add	ip, pc, #0, 12
   10dd4:	add	ip, ip, #94208	; 0x17000
   10dd8:	ldr	pc, [ip, #740]!	; 0x2e4

00010ddc <strncmp@plt>:
   10ddc:	add	ip, pc, #0, 12
   10de0:	add	ip, ip, #94208	; 0x17000
   10de4:	ldr	pc, [ip, #732]!	; 0x2dc

00010de8 <abort@plt>:
   10de8:	add	ip, pc, #0, 12
   10dec:	add	ip, ip, #94208	; 0x17000
   10df0:	ldr	pc, [ip, #724]!	; 0x2d4

00010df4 <__assert_fail@plt>:
   10df4:	add	ip, pc, #0, 12
   10df8:	add	ip, ip, #94208	; 0x17000
   10dfc:	ldr	pc, [ip, #716]!	; 0x2cc

Disassembly of section .text:

00010e00 <.text>:
   10e00:	strd	r4, [sp, #-36]!	; 0xffffffdc
   10e04:	mov	r5, r1
   10e08:	strd	r6, [sp, #8]
   10e0c:	mov	r7, r0
   10e10:	strd	r8, [sp, #16]
   10e14:	strd	sl, [sp, #24]
   10e18:	str	lr, [sp, #32]
   10e1c:	sub	sp, sp, #20
   10e20:	ldr	r0, [r1]
   10e24:	bl	11770 <__assert_fail@plt+0x97c>
   10e28:	movw	r1, #28376	; 0x6ed8
   10e2c:	movt	r1, #1
   10e30:	mov	r0, #6
   10e34:	bl	10dac <setlocale@plt>
   10e38:	movw	r1, #28864	; 0x70c0
   10e3c:	movt	r1, #1
   10e40:	movw	r0, #28696	; 0x7018
   10e44:	movt	r0, #1
   10e48:	bl	10dd0 <bindtextdomain@plt>
   10e4c:	movw	r0, #28696	; 0x7018
   10e50:	movt	r0, #1
   10e54:	bl	10c74 <textdomain@plt>
   10e58:	mov	r2, #125	; 0x7d
   10e5c:	movw	r3, #32988	; 0x80dc
   10e60:	movt	r3, #2
   10e64:	movw	r0, #5764	; 0x1684
   10e68:	movt	r0, #1
   10e6c:	str	r2, [r3]
   10e70:	bl	16c48 <__assert_fail@plt+0x5e54>
   10e74:	cmp	r7, #1
   10e78:	ble	11038 <__assert_fail@plt+0x244>
   10e7c:	ldr	r9, [pc, #872]	; 111ec <__assert_fail@plt+0x3f8>
   10e80:	movw	r6, #33064	; 0x8128
   10e84:	movt	r6, #2
   10e88:	movw	r8, #28888	; 0x70d8
   10e8c:	movt	r8, #1
   10e90:	mov	r4, #1
   10e94:	mov	sl, #0
   10e98:	ldr	r2, [r5, r4, lsl #2]
   10e9c:	lsl	ip, r4, #2
   10ea0:	ldrb	r3, [r2]
   10ea4:	cmp	r3, #45	; 0x2d
   10ea8:	bne	10edc <__assert_fail@plt+0xe8>
   10eac:	ldrb	r3, [r2, #1]
   10eb0:	sub	r3, r3, #43	; 0x2b
   10eb4:	and	r3, r3, #253	; 0xfd
   10eb8:	cmp	r3, #0
   10ebc:	movne	r3, r2
   10ec0:	addeq	r3, r2, #1
   10ec4:	ldrb	r3, [r3, #1]
   10ec8:	sub	r3, r3, #48	; 0x30
   10ecc:	cmp	r3, #9
   10ed0:	addls	sl, r2, #1
   10ed4:	addls	r4, r4, #1
   10ed8:	bls	1102c <__assert_fail@plt+0x238>
   10edc:	ldr	lr, [r5]
   10ee0:	sub	ip, ip, #4
   10ee4:	mov	fp, #0
   10ee8:	sub	r0, r4, #1
   10eec:	mov	r3, r9
   10ef0:	add	r1, r5, ip
   10ef4:	sub	r0, r7, r0
   10ef8:	str	fp, [sp]
   10efc:	mov	r2, r8
   10f00:	str	lr, [r5, ip]
   10f04:	str	fp, [r6]
   10f08:	bl	10d10 <getopt_long@plt>
   10f0c:	ldr	r3, [r6]
   10f10:	cmn	r0, #2
   10f14:	sub	r3, r3, #1
   10f18:	add	r4, r4, r3
   10f1c:	beq	11184 <__assert_fail@plt+0x390>
   10f20:	ble	10fd0 <__assert_fail@plt+0x1dc>
   10f24:	cmn	r0, #1
   10f28:	bne	11018 <__assert_fail@plt+0x224>
   10f2c:	cmp	sl, #0
   10f30:	beq	1103c <__assert_fail@plt+0x248>
   10f34:	movw	r0, #28376	; 0x6ed8
   10f38:	movt	r0, #1
   10f3c:	add	r3, sp, #12
   10f40:	mov	r2, #10
   10f44:	mov	r1, #0
   10f48:	str	r0, [sp]
   10f4c:	mov	r0, sl
   10f50:	bl	15fb0 <__assert_fail@plt+0x51bc>
   10f54:	cmp	r0, #1
   10f58:	bhi	111b8 <__assert_fail@plt+0x3c4>
   10f5c:	ldr	r6, [sp, #12]
   10f60:	mvn	r3, #38	; 0x26
   10f64:	cmp	r6, #39	; 0x27
   10f68:	movge	r6, #39	; 0x27
   10f6c:	cmp	r6, r3
   10f70:	movlt	r6, r3
   10f74:	cmp	r4, r7
   10f78:	beq	1118c <__assert_fail@plt+0x398>
   10f7c:	bl	10d4c <__errno_location@plt>
   10f80:	mov	r7, #0
   10f84:	mov	r8, r0
   10f88:	mov	r1, r7
   10f8c:	mov	r0, r7
   10f90:	str	r7, [r8]
   10f94:	bl	10c68 <getpriority@plt>
   10f98:	cmn	r0, #1
   10f9c:	bne	110a0 <__assert_fail@plt+0x2ac>
   10fa0:	ldr	r9, [r8]
   10fa4:	cmp	r9, r7
   10fa8:	beq	110a0 <__assert_fail@plt+0x2ac>
   10fac:	mov	r2, #5
   10fb0:	mov	r0, r7
   10fb4:	movw	r1, #28976	; 0x7130
   10fb8:	movt	r1, #1
   10fbc:	bl	10c50 <dcgettext@plt>
   10fc0:	mov	r2, r0
   10fc4:	mov	r1, r9
   10fc8:	mov	r0, #125	; 0x7d
   10fcc:	bl	10cc8 <error@plt>
   10fd0:	cmn	r0, #3
   10fd4:	bne	111b0 <__assert_fail@plt+0x3bc>
   10fd8:	movw	r2, #28892	; 0x70dc
   10fdc:	movt	r2, #1
   10fe0:	movw	r3, #32984	; 0x80d8
   10fe4:	movt	r3, #2
   10fe8:	movw	r0, #33076	; 0x8134
   10fec:	movt	r0, #2
   10ff0:	stm	sp, {r2, fp}
   10ff4:	movw	r1, #27876	; 0x6ce4
   10ff8:	movt	r1, #1
   10ffc:	ldr	r0, [r0]
   11000:	movw	r2, #28692	; 0x7014
   11004:	movt	r2, #1
   11008:	ldr	r3, [r3]
   1100c:	bl	157a4 <__assert_fail@plt+0x49b0>
   11010:	mov	r0, fp
   11014:	bl	10d28 <exit@plt>
   11018:	cmp	r0, #110	; 0x6e
   1101c:	bne	111b0 <__assert_fail@plt+0x3bc>
   11020:	movw	r3, #33080	; 0x8138
   11024:	movt	r3, #2
   11028:	ldr	sl, [r3]
   1102c:	cmp	r4, r7
   11030:	blt	10e98 <__assert_fail@plt+0xa4>
   11034:	b	10f2c <__assert_fail@plt+0x138>
   11038:	mov	r4, #1
   1103c:	bl	10d4c <__errno_location@plt>
   11040:	cmp	r4, r7
   11044:	mov	r6, r0
   11048:	movne	r6, #10
   1104c:	bne	10f7c <__assert_fail@plt+0x188>
   11050:	mov	r4, #0
   11054:	mov	r1, r4
   11058:	mov	r0, r4
   1105c:	str	r4, [r6]
   11060:	bl	10c68 <getpriority@plt>
   11064:	cmn	r0, #1
   11068:	mov	r2, r0
   1106c:	bne	11150 <__assert_fail@plt+0x35c>
   11070:	ldr	r5, [r6]
   11074:	cmp	r5, r4
   11078:	beq	11150 <__assert_fail@plt+0x35c>
   1107c:	mov	r2, #5
   11080:	mov	r0, r4
   11084:	movw	r1, #28976	; 0x7130
   11088:	movt	r1, #1
   1108c:	bl	10c50 <dcgettext@plt>
   11090:	mov	r2, r0
   11094:	mov	r1, r5
   11098:	mov	r0, #125	; 0x7d
   1109c:	bl	10cc8 <error@plt>
   110a0:	mov	r1, #0
   110a4:	add	r2, r0, r6
   110a8:	mov	r0, r1
   110ac:	bl	10cd4 <setpriority@plt>
   110b0:	cmp	r0, #0
   110b4:	beq	1110c <__assert_fail@plt+0x318>
   110b8:	ldr	r6, [r8]
   110bc:	mov	r2, #5
   110c0:	mov	r0, #0
   110c4:	movw	r1, #29000	; 0x7148
   110c8:	movt	r1, #1
   110cc:	cmp	r6, #1
   110d0:	cmpne	r6, #13
   110d4:	movne	r7, #125	; 0x7d
   110d8:	moveq	r7, r0
   110dc:	bl	10c50 <dcgettext@plt>
   110e0:	mov	r2, r0
   110e4:	mov	r1, r6
   110e8:	mov	r0, r7
   110ec:	bl	10cc8 <error@plt>
   110f0:	movw	r3, #33072	; 0x8130
   110f4:	movt	r3, #2
   110f8:	ldr	r3, [r3]
   110fc:	ldr	r3, [r3]
   11100:	tst	r3, #32
   11104:	movne	r4, #125	; 0x7d
   11108:	bne	11164 <__assert_fail@plt+0x370>
   1110c:	lsl	r7, r4, #2
   11110:	ldr	r0, [r5, r4, lsl #2]
   11114:	add	r1, r5, r7
   11118:	bl	10c20 <execvp@plt>
   1111c:	ldr	r6, [r8]
   11120:	ldr	r0, [r5, r7]
   11124:	cmp	r6, #2
   11128:	moveq	r4, #127	; 0x7f
   1112c:	movne	r4, #126	; 0x7e
   11130:	bl	150e0 <__assert_fail@plt+0x42ec>
   11134:	mov	r3, r0
   11138:	mov	r1, r6
   1113c:	movw	r2, #29176	; 0x71f8
   11140:	movt	r2, #1
   11144:	mov	r0, #0
   11148:	bl	10cc8 <error@plt>
   1114c:	b	11164 <__assert_fail@plt+0x370>
   11150:	movw	r1, #28996	; 0x7144
   11154:	movt	r1, #1
   11158:	mov	r0, #1
   1115c:	mov	r4, #0
   11160:	bl	10d70 <__printf_chk@plt>
   11164:	mov	r0, r4
   11168:	add	sp, sp, #20
   1116c:	ldrd	r4, [sp]
   11170:	ldrd	r6, [sp, #8]
   11174:	ldrd	r8, [sp, #16]
   11178:	ldrd	sl, [sp, #24]
   1117c:	add	sp, sp, #32
   11180:	pop	{pc}		; (ldr pc, [sp], #4)
   11184:	mov	r0, fp
   11188:	bl	112e0 <__assert_fail@plt+0x4ec>
   1118c:	mov	r2, #5
   11190:	movw	r1, #28932	; 0x7104
   11194:	movt	r1, #1
   11198:	mov	r0, #0
   1119c:	bl	10c50 <dcgettext@plt>
   111a0:	mov	r1, #0
   111a4:	mov	r2, r0
   111a8:	mov	r0, r1
   111ac:	bl	10cc8 <error@plt>
   111b0:	mov	r0, #125	; 0x7d
   111b4:	bl	112e0 <__assert_fail@plt+0x4ec>
   111b8:	mov	r2, #5
   111bc:	movw	r1, #28908	; 0x70ec
   111c0:	movt	r1, #1
   111c4:	mov	r0, #0
   111c8:	bl	10c50 <dcgettext@plt>
   111cc:	mov	r4, r0
   111d0:	mov	r0, sl
   111d4:	bl	150e0 <__assert_fail@plt+0x42ec>
   111d8:	mov	r3, r0
   111dc:	mov	r2, r4
   111e0:	mov	r1, #0
   111e4:	mov	r0, #125	; 0x7d
   111e8:	bl	10cc8 <error@plt>
   111ec:	andeq	r6, r1, r4, lsr #25
   111f0:	mov	fp, #0
   111f4:	mov	lr, #0
   111f8:	pop	{r1}		; (ldr r1, [sp], #4)
   111fc:	mov	r2, sp
   11200:	push	{r2}		; (str r2, [sp, #-4]!)
   11204:	push	{r0}		; (str r0, [sp, #-4]!)
   11208:	ldr	ip, [pc, #16]	; 11220 <__assert_fail@plt+0x42c>
   1120c:	push	{ip}		; (str ip, [sp, #-4]!)
   11210:	ldr	r0, [pc, #12]	; 11224 <__assert_fail@plt+0x430>
   11214:	ldr	r3, [pc, #12]	; 11228 <__assert_fail@plt+0x434>
   11218:	bl	10cec <__libc_start_main@plt>
   1121c:	bl	10de8 <abort@plt>
   11220:	andeq	r6, r1, r4, asr #24
   11224:	andeq	r0, r1, r0, lsl #28
   11228:	andeq	r6, r1, r4, ror #23
   1122c:	ldr	r3, [pc, #20]	; 11248 <__assert_fail@plt+0x454>
   11230:	ldr	r2, [pc, #20]	; 1124c <__assert_fail@plt+0x458>
   11234:	add	r3, pc, r3
   11238:	ldr	r2, [r3, r2]
   1123c:	cmp	r2, #0
   11240:	bxeq	lr
   11244:	b	10d04 <__gmon_start__@plt>
   11248:	andeq	r6, r1, r4, asr #27
   1124c:	andeq	r0, r0, ip, asr #1
   11250:	ldr	r0, [pc, #24]	; 11270 <__assert_fail@plt+0x47c>
   11254:	ldr	r3, [pc, #24]	; 11274 <__assert_fail@plt+0x480>
   11258:	cmp	r3, r0
   1125c:	bxeq	lr
   11260:	ldr	r3, [pc, #16]	; 11278 <__assert_fail@plt+0x484>
   11264:	cmp	r3, #0
   11268:	bxeq	lr
   1126c:	bx	r3
   11270:	andeq	r8, r2, r0, lsr #2
   11274:	andeq	r8, r2, r0, lsr #2
   11278:	andeq	r0, r0, r0
   1127c:	ldr	r0, [pc, #36]	; 112a8 <__assert_fail@plt+0x4b4>
   11280:	ldr	r1, [pc, #36]	; 112ac <__assert_fail@plt+0x4b8>
   11284:	sub	r1, r1, r0
   11288:	asr	r1, r1, #2
   1128c:	add	r1, r1, r1, lsr #31
   11290:	asrs	r1, r1, #1
   11294:	bxeq	lr
   11298:	ldr	r3, [pc, #16]	; 112b0 <__assert_fail@plt+0x4bc>
   1129c:	cmp	r3, #0
   112a0:	bxeq	lr
   112a4:	bx	r3
   112a8:	andeq	r8, r2, r0, lsr #2
   112ac:	andeq	r8, r2, r0, lsr #2
   112b0:	andeq	r0, r0, r0
   112b4:	push	{r4, lr}
   112b8:	ldr	r4, [pc, #24]	; 112d8 <__assert_fail@plt+0x4e4>
   112bc:	ldrb	r3, [r4]
   112c0:	cmp	r3, #0
   112c4:	popne	{r4, pc}
   112c8:	bl	11250 <__assert_fail@plt+0x45c>
   112cc:	mov	r3, #1
   112d0:	strb	r3, [r4]
   112d4:	pop	{r4, pc}
   112d8:	andeq	r8, r2, ip, lsr r1
   112dc:	b	1127c <__assert_fail@plt+0x488>
   112e0:	subs	r6, r0, #0
   112e4:	str	r7, [sp, #-8]!
   112e8:	str	lr, [sp, #4]
   112ec:	sub	sp, sp, #56	; 0x38
   112f0:	beq	11338 <__assert_fail@plt+0x544>
   112f4:	movw	r3, #33072	; 0x8130
   112f8:	movt	r3, #2
   112fc:	ldr	r4, [r3]
   11300:	mov	r2, #5
   11304:	movw	r1, #27884	; 0x6cec
   11308:	movt	r1, #1
   1130c:	mov	r0, #0
   11310:	bl	10c50 <dcgettext@plt>
   11314:	movw	r3, #33096	; 0x8148
   11318:	movt	r3, #2
   1131c:	mov	r2, r0
   11320:	mov	r1, #1
   11324:	ldr	r3, [r3]
   11328:	mov	r0, r4
   1132c:	bl	10d88 <__fprintf_chk@plt>
   11330:	mov	r0, r6
   11334:	bl	10d28 <exit@plt>
   11338:	mov	r2, #5
   1133c:	movw	r1, #27924	; 0x6d14
   11340:	movt	r1, #1
   11344:	movw	r7, #33076	; 0x8134
   11348:	movt	r7, #2
   1134c:	bl	10c50 <dcgettext@plt>
   11350:	movw	r3, #33096	; 0x8148
   11354:	movt	r3, #2
   11358:	mov	r1, r0
   1135c:	mov	r0, #1
   11360:	ldr	r2, [r3]
   11364:	bl	10d70 <__printf_chk@plt>
   11368:	mov	r2, #5
   1136c:	movw	r1, #27964	; 0x6d3c
   11370:	movt	r1, #1
   11374:	mov	r0, r6
   11378:	bl	10c50 <dcgettext@plt>
   1137c:	mov	r1, r0
   11380:	mov	r3, #19
   11384:	mvn	r2, #19
   11388:	mov	r0, #1
   1138c:	bl	10d70 <__printf_chk@plt>
   11390:	mov	r2, #5
   11394:	movw	r1, #28188	; 0x6e1c
   11398:	movt	r1, #1
   1139c:	mov	r0, r6
   113a0:	bl	10c50 <dcgettext@plt>
   113a4:	ldr	r1, [r7]
   113a8:	bl	10bcc <fputs_unlocked@plt>
   113ac:	mov	r2, #5
   113b0:	movw	r1, #28264	; 0x6e68
   113b4:	movt	r1, #1
   113b8:	mov	r0, r6
   113bc:	bl	10c50 <dcgettext@plt>
   113c0:	ldr	r1, [r7]
   113c4:	bl	10bcc <fputs_unlocked@plt>
   113c8:	mov	r2, #5
   113cc:	movw	r1, #28332	; 0x6eac
   113d0:	movt	r1, #1
   113d4:	mov	r0, r6
   113d8:	bl	10c50 <dcgettext@plt>
   113dc:	ldr	r1, [r7]
   113e0:	bl	10bcc <fputs_unlocked@plt>
   113e4:	mov	r2, #5
   113e8:	movw	r1, #28380	; 0x6edc
   113ec:	movt	r1, #1
   113f0:	mov	r0, r6
   113f4:	bl	10c50 <dcgettext@plt>
   113f8:	ldr	r1, [r7]
   113fc:	bl	10bcc <fputs_unlocked@plt>
   11400:	mov	r2, #5
   11404:	movw	r1, #28436	; 0x6f14
   11408:	movt	r1, #1
   1140c:	mov	r0, r6
   11410:	bl	10c50 <dcgettext@plt>
   11414:	mov	r1, r0
   11418:	movw	r2, #27876	; 0x6ce4
   1141c:	movt	r2, #1
   11420:	mov	r0, #1
   11424:	bl	10d70 <__printf_chk@plt>
   11428:	movw	lr, #27756	; 0x6c6c
   1142c:	movt	lr, #1
   11430:	ldr	ip, [lr]
   11434:	ldr	r4, [lr, #4]
   11438:	ldrd	r8, [lr, #8]
   1143c:	subs	r1, ip, #0
   11440:	str	ip, [sp]
   11444:	ldrd	r2, [lr, #16]
   11448:	str	r4, [sp, #4]
   1144c:	ldrd	r4, [lr, #24]
   11450:	strd	r8, [sp, #8]
   11454:	ldrd	r8, [lr, #32]
   11458:	strd	r2, [sp, #16]
   1145c:	ldrd	r2, [lr, #40]	; 0x28
   11460:	strd	r4, [sp, #24]
   11464:	ldrd	r4, [lr, #48]	; 0x30
   11468:	strd	r8, [sp, #32]
   1146c:	strd	r2, [sp, #40]	; 0x28
   11470:	strd	r4, [sp, #48]	; 0x30
   11474:	movwne	r5, #27876	; 0x6ce4
   11478:	mov	r4, sp
   1147c:	movtne	r5, #1
   11480:	bne	11578 <__assert_fail@plt+0x784>
   11484:	ldr	r4, [r4, #4]
   11488:	movw	r1, #28628	; 0x6fd4
   1148c:	movt	r1, #1
   11490:	mov	r2, #5
   11494:	cmp	r4, #0
   11498:	beq	1158c <__assert_fail@plt+0x798>
   1149c:	mov	r0, #0
   114a0:	bl	10c50 <dcgettext@plt>
   114a4:	mov	r1, r0
   114a8:	movw	r3, #28652	; 0x6fec
   114ac:	movt	r3, #1
   114b0:	movw	r2, #28692	; 0x7014
   114b4:	movt	r2, #1
   114b8:	mov	r0, #1
   114bc:	bl	10d70 <__printf_chk@plt>
   114c0:	mov	r1, #0
   114c4:	mov	r0, #5
   114c8:	bl	10dac <setlocale@plt>
   114cc:	cmp	r0, #0
   114d0:	movweq	r5, #27876	; 0x6ce4
   114d4:	movteq	r5, #1
   114d8:	beq	114fc <__assert_fail@plt+0x708>
   114dc:	movw	r1, #28708	; 0x7024
   114e0:	movt	r1, #1
   114e4:	mov	r2, #3
   114e8:	movw	r5, #27876	; 0x6ce4
   114ec:	movt	r5, #1
   114f0:	bl	10ddc <strncmp@plt>
   114f4:	cmp	r0, #0
   114f8:	bne	11644 <__assert_fail@plt+0x850>
   114fc:	mov	r2, #5
   11500:	movw	r1, #28784	; 0x7070
   11504:	movt	r1, #1
   11508:	mov	r0, #0
   1150c:	bl	10c50 <dcgettext@plt>
   11510:	mov	r1, r0
   11514:	movw	r3, #27876	; 0x6ce4
   11518:	movt	r3, #1
   1151c:	movw	r2, #28652	; 0x6fec
   11520:	movt	r2, #1
   11524:	mov	r0, #1
   11528:	bl	10d70 <__printf_chk@plt>
   1152c:	mov	r2, #5
   11530:	movw	r1, #28812	; 0x708c
   11534:	movt	r1, #1
   11538:	mov	r0, #0
   1153c:	bl	10c50 <dcgettext@plt>
   11540:	movw	r2, #29028	; 0x7164
   11544:	movt	r2, #1
   11548:	cmp	r4, r5
   1154c:	movw	r3, #28376	; 0x6ed8
   11550:	movt	r3, #1
   11554:	mov	r1, r0
   11558:	moveq	r3, r2
   1155c:	mov	r2, r4
   11560:	mov	r0, #1
   11564:	bl	10d70 <__printf_chk@plt>
   11568:	b	11330 <__assert_fail@plt+0x53c>
   1156c:	ldr	r1, [r4, #8]!
   11570:	cmp	r1, #0
   11574:	beq	11484 <__assert_fail@plt+0x690>
   11578:	mov	r0, r5
   1157c:	bl	10bd8 <strcmp@plt>
   11580:	cmp	r0, #0
   11584:	bne	1156c <__assert_fail@plt+0x778>
   11588:	b	11484 <__assert_fail@plt+0x690>
   1158c:	mov	r0, r4
   11590:	bl	10c50 <dcgettext@plt>
   11594:	mov	r1, r0
   11598:	movw	r3, #28652	; 0x6fec
   1159c:	movt	r3, #1
   115a0:	movw	r2, #28692	; 0x7014
   115a4:	movt	r2, #1
   115a8:	mov	r0, #1
   115ac:	bl	10d70 <__printf_chk@plt>
   115b0:	mov	r1, r4
   115b4:	mov	r0, #5
   115b8:	bl	10dac <setlocale@plt>
   115bc:	cmp	r0, #0
   115c0:	beq	115dc <__assert_fail@plt+0x7e8>
   115c4:	movw	r1, #28708	; 0x7024
   115c8:	movt	r1, #1
   115cc:	mov	r2, #3
   115d0:	bl	10ddc <strncmp@plt>
   115d4:	cmp	r0, #0
   115d8:	bne	11638 <__assert_fail@plt+0x844>
   115dc:	mov	r2, #5
   115e0:	movw	r1, #28784	; 0x7070
   115e4:	movt	r1, #1
   115e8:	mov	r0, #0
   115ec:	bl	10c50 <dcgettext@plt>
   115f0:	mov	r1, r0
   115f4:	movw	r3, #27876	; 0x6ce4
   115f8:	movt	r3, #1
   115fc:	movw	r2, #28652	; 0x6fec
   11600:	movt	r2, #1
   11604:	mov	r0, #1
   11608:	bl	10d70 <__printf_chk@plt>
   1160c:	movw	r1, #28812	; 0x708c
   11610:	movt	r1, #1
   11614:	mov	r2, #5
   11618:	mov	r0, #0
   1161c:	bl	10c50 <dcgettext@plt>
   11620:	movw	r4, #27876	; 0x6ce4
   11624:	movt	r4, #1
   11628:	movw	r3, #29028	; 0x7164
   1162c:	movt	r3, #1
   11630:	mov	r1, r0
   11634:	b	1155c <__assert_fail@plt+0x768>
   11638:	movw	r5, #27876	; 0x6ce4
   1163c:	movt	r5, #1
   11640:	mov	r4, r5
   11644:	mov	r2, #5
   11648:	movw	r1, #28712	; 0x7028
   1164c:	movt	r1, #1
   11650:	mov	r0, #0
   11654:	bl	10c50 <dcgettext@plt>
   11658:	ldr	r1, [r7]
   1165c:	bl	10bcc <fputs_unlocked@plt>
   11660:	b	114fc <__assert_fail@plt+0x708>
   11664:	movw	r3, #33088	; 0x8140
   11668:	movt	r3, #2
   1166c:	str	r0, [r3]
   11670:	bx	lr
   11674:	movw	r3, #33088	; 0x8140
   11678:	movt	r3, #2
   1167c:	strb	r0, [r3, #4]
   11680:	bx	lr
   11684:	movw	r3, #33076	; 0x8134
   11688:	movt	r3, #2
   1168c:	strd	r4, [sp, #-16]!
   11690:	ldr	r0, [r3]
   11694:	str	r6, [sp, #8]
   11698:	str	lr, [sp, #12]
   1169c:	sub	sp, sp, #8
   116a0:	bl	16708 <__assert_fail@plt+0x5914>
   116a4:	cmp	r0, #0
   116a8:	beq	116d4 <__assert_fail@plt+0x8e0>
   116ac:	movw	r4, #33088	; 0x8140
   116b0:	movt	r4, #2
   116b4:	ldrb	r6, [r4, #4]
   116b8:	bl	10d4c <__errno_location@plt>
   116bc:	mov	r5, r0
   116c0:	cmp	r6, #0
   116c4:	beq	11700 <__assert_fail@plt+0x90c>
   116c8:	ldr	r3, [r0]
   116cc:	cmp	r3, #32
   116d0:	bne	11700 <__assert_fail@plt+0x90c>
   116d4:	movw	r3, #33072	; 0x8130
   116d8:	movt	r3, #2
   116dc:	ldr	r0, [r3]
   116e0:	bl	16708 <__assert_fail@plt+0x5914>
   116e4:	cmp	r0, #0
   116e8:	bne	11748 <__assert_fail@plt+0x954>
   116ec:	add	sp, sp, #8
   116f0:	ldrd	r4, [sp]
   116f4:	ldr	r6, [sp, #8]
   116f8:	add	sp, sp, #12
   116fc:	pop	{pc}		; (ldr pc, [sp], #4)
   11700:	movw	r1, #29160	; 0x71e8
   11704:	movt	r1, #1
   11708:	mov	r2, #5
   1170c:	mov	r0, #0
   11710:	bl	10c50 <dcgettext@plt>
   11714:	mov	r6, r0
   11718:	ldr	r0, [r4]
   1171c:	cmp	r0, #0
   11720:	beq	11758 <__assert_fail@plt+0x964>
   11724:	ldr	r4, [r5]
   11728:	bl	14564 <__assert_fail@plt+0x3770>
   1172c:	mov	r3, r0
   11730:	movw	r2, #29172	; 0x71f4
   11734:	movt	r2, #1
   11738:	mov	r0, #0
   1173c:	str	r6, [sp]
   11740:	mov	r1, r4
   11744:	bl	10cc8 <error@plt>
   11748:	movw	r3, #32988	; 0x80dc
   1174c:	movt	r3, #2
   11750:	ldr	r0, [r3]
   11754:	bl	10c08 <_exit@plt>
   11758:	mov	r3, r6
   1175c:	movw	r2, #29176	; 0x71f8
   11760:	movt	r2, #1
   11764:	ldr	r1, [r5]
   11768:	bl	10cc8 <error@plt>
   1176c:	b	11748 <__assert_fail@plt+0x954>
   11770:	strd	r4, [sp, #-16]!
   11774:	subs	r4, r0, #0
   11778:	str	r6, [sp, #8]
   1177c:	str	lr, [sp, #12]
   11780:	beq	11818 <__assert_fail@plt+0xa24>
   11784:	mov	r1, #47	; 0x2f
   11788:	bl	10db8 <strrchr@plt>
   1178c:	subs	r5, r0, #0
   11790:	beq	117f0 <__assert_fail@plt+0x9fc>
   11794:	add	r6, r5, #1
   11798:	sub	r3, r6, r4
   1179c:	cmp	r3, #6
   117a0:	ble	117f0 <__assert_fail@plt+0x9fc>
   117a4:	movw	r1, #29236	; 0x7234
   117a8:	movt	r1, #1
   117ac:	mov	r2, #7
   117b0:	sub	r0, r5, #6
   117b4:	bl	10ddc <strncmp@plt>
   117b8:	cmp	r0, #0
   117bc:	bne	117f0 <__assert_fail@plt+0x9fc>
   117c0:	movw	r1, #29244	; 0x723c
   117c4:	movt	r1, #1
   117c8:	mov	r2, #3
   117cc:	mov	r0, r6
   117d0:	bl	10ddc <strncmp@plt>
   117d4:	cmp	r0, #0
   117d8:	movne	r4, r6
   117dc:	bne	117f0 <__assert_fail@plt+0x9fc>
   117e0:	add	r4, r5, #4
   117e4:	movw	r3, #33056	; 0x8120
   117e8:	movt	r3, #2
   117ec:	str	r4, [r3]
   117f0:	movw	r2, #33096	; 0x8148
   117f4:	movt	r2, #2
   117f8:	ldr	r6, [sp, #8]
   117fc:	movw	r3, #33060	; 0x8124
   11800:	movt	r3, #2
   11804:	str	r4, [r2]
   11808:	str	r4, [r3]
   1180c:	ldrd	r4, [sp]
   11810:	add	sp, sp, #12
   11814:	pop	{pc}		; (ldr pc, [sp], #4)
   11818:	movw	r3, #33072	; 0x8130
   1181c:	movt	r3, #2
   11820:	movw	r0, #29180	; 0x71fc
   11824:	movt	r0, #1
   11828:	ldr	r3, [r3]
   1182c:	mov	r2, #55	; 0x37
   11830:	mov	r1, #1
   11834:	bl	10c8c <fwrite@plt>
   11838:	bl	10de8 <abort@plt>
   1183c:	mov	r2, #5
   11840:	strd	r4, [sp, #-16]!
   11844:	mov	r5, r0
   11848:	str	r6, [sp, #8]
   1184c:	mov	r6, r1
   11850:	mov	r1, r0
   11854:	mov	r0, #0
   11858:	str	lr, [sp, #12]
   1185c:	bl	10c50 <dcgettext@plt>
   11860:	cmp	r5, r0
   11864:	mov	r4, r0
   11868:	beq	11880 <__assert_fail@plt+0xa8c>
   1186c:	mov	r0, r4
   11870:	ldrd	r4, [sp]
   11874:	ldr	r6, [sp, #8]
   11878:	add	sp, sp, #12
   1187c:	pop	{pc}		; (ldr pc, [sp], #4)
   11880:	bl	169d4 <__assert_fail@plt+0x5be0>
   11884:	ldrb	r3, [r0]
   11888:	bic	r3, r3, #32
   1188c:	cmp	r3, #85	; 0x55
   11890:	bne	118f8 <__assert_fail@plt+0xb04>
   11894:	ldrb	r3, [r0, #1]
   11898:	bic	r3, r3, #32
   1189c:	cmp	r3, #84	; 0x54
   118a0:	bne	11978 <__assert_fail@plt+0xb84>
   118a4:	ldrb	r3, [r0, #2]
   118a8:	bic	r3, r3, #32
   118ac:	cmp	r3, #70	; 0x46
   118b0:	bne	11978 <__assert_fail@plt+0xb84>
   118b4:	ldrb	r3, [r0, #3]
   118b8:	cmp	r3, #45	; 0x2d
   118bc:	bne	11978 <__assert_fail@plt+0xb84>
   118c0:	ldrb	r3, [r0, #4]
   118c4:	cmp	r3, #56	; 0x38
   118c8:	bne	11978 <__assert_fail@plt+0xb84>
   118cc:	ldrb	r3, [r0, #5]
   118d0:	cmp	r3, #0
   118d4:	bne	11978 <__assert_fail@plt+0xb84>
   118d8:	ldrb	r2, [r4]
   118dc:	movw	r3, #29336	; 0x7298
   118e0:	movt	r3, #1
   118e4:	movw	r4, #29348	; 0x72a4
   118e8:	movt	r4, #1
   118ec:	cmp	r2, #96	; 0x60
   118f0:	movne	r4, r3
   118f4:	b	1186c <__assert_fail@plt+0xa78>
   118f8:	cmp	r3, #71	; 0x47
   118fc:	bne	11978 <__assert_fail@plt+0xb84>
   11900:	ldrb	r3, [r0, #1]
   11904:	bic	r3, r3, #32
   11908:	cmp	r3, #66	; 0x42
   1190c:	bne	11978 <__assert_fail@plt+0xb84>
   11910:	ldrb	r3, [r0, #2]
   11914:	cmp	r3, #49	; 0x31
   11918:	bne	11978 <__assert_fail@plt+0xb84>
   1191c:	ldrb	r3, [r0, #3]
   11920:	cmp	r3, #56	; 0x38
   11924:	bne	11978 <__assert_fail@plt+0xb84>
   11928:	ldrb	r3, [r0, #4]
   1192c:	cmp	r3, #48	; 0x30
   11930:	bne	11978 <__assert_fail@plt+0xb84>
   11934:	ldrb	r3, [r0, #5]
   11938:	cmp	r3, #51	; 0x33
   1193c:	bne	11978 <__assert_fail@plt+0xb84>
   11940:	ldrb	r3, [r0, #6]
   11944:	cmp	r3, #48	; 0x30
   11948:	bne	11978 <__assert_fail@plt+0xb84>
   1194c:	ldrb	r3, [r0, #7]
   11950:	cmp	r3, #0
   11954:	bne	11978 <__assert_fail@plt+0xb84>
   11958:	ldrb	r2, [r4]
   1195c:	movw	r3, #29340	; 0x729c
   11960:	movt	r3, #1
   11964:	movw	r4, #29344	; 0x72a0
   11968:	movt	r4, #1
   1196c:	cmp	r2, #96	; 0x60
   11970:	movne	r4, r3
   11974:	b	1186c <__assert_fail@plt+0xa78>
   11978:	movw	r3, #29352	; 0x72a8
   1197c:	movt	r3, #1
   11980:	cmp	r6, #9
   11984:	movw	r4, #29332	; 0x7294
   11988:	movt	r4, #1
   1198c:	movne	r4, r3
   11990:	b	1186c <__assert_fail@plt+0xa78>
   11994:	strd	r4, [sp, #-36]!	; 0xffffffdc
   11998:	strd	r6, [sp, #8]
   1199c:	strd	r8, [sp, #16]
   119a0:	mov	r8, r3
   119a4:	strd	sl, [sp, #24]
   119a8:	mov	fp, r0
   119ac:	mov	sl, r1
   119b0:	str	lr, [sp, #32]
   119b4:	sub	sp, sp, #140	; 0x8c
   119b8:	ldr	r3, [sp, #180]	; 0xb4
   119bc:	str	r2, [sp, #28]
   119c0:	and	r4, r3, #2
   119c4:	ubfx	r3, r3, #1, #1
   119c8:	str	r3, [sp, #44]	; 0x2c
   119cc:	bl	10ca4 <__ctype_get_mb_cur_max@plt>
   119d0:	ldr	r3, [sp, #176]	; 0xb0
   119d4:	str	r0, [sp, #76]	; 0x4c
   119d8:	cmp	r3, #10
   119dc:	ldrls	pc, [pc, r3, lsl #2]
   119e0:	b	1337c <__assert_fail@plt+0x2588>
   119e4:	andeq	r1, r1, r4, ror #28
   119e8:	andeq	r1, r1, r0, lsl #31
   119ec:	strdeq	r2, [r1], -ip
   119f0:	andeq	r1, r1, ip, ror #31
   119f4:	andeq	r1, r1, ip, ror #26
   119f8:	andeq	r1, r1, r8, ror #27
   119fc:	andeq	r1, r1, r0, asr #29
   11a00:	andeq	r1, r1, r8, lsr #30
   11a04:	andeq	r1, r1, r0, lsl sl
   11a08:	andeq	r1, r1, r0, lsl sl
   11a0c:	andeq	r1, r1, r0, lsl sl
   11a10:	ldr	r3, [sp, #176]	; 0xb0
   11a14:	cmp	r3, #10
   11a18:	beq	11a44 <__assert_fail@plt+0xc50>
   11a1c:	mov	r1, r3
   11a20:	movw	r0, #29356	; 0x72ac
   11a24:	movt	r0, #1
   11a28:	bl	1183c <__assert_fail@plt+0xa48>
   11a2c:	str	r0, [sp, #188]	; 0xbc
   11a30:	movw	r0, #29352	; 0x72a8
   11a34:	movt	r0, #1
   11a38:	ldr	r1, [sp, #176]	; 0xb0
   11a3c:	bl	1183c <__assert_fail@plt+0xa48>
   11a40:	str	r0, [sp, #192]	; 0xc0
   11a44:	cmp	r4, #0
   11a48:	movne	r4, #0
   11a4c:	beq	13108 <__assert_fail@plt+0x2314>
   11a50:	mov	r5, #0
   11a54:	ldr	r0, [sp, #192]	; 0xc0
   11a58:	mov	r9, r5
   11a5c:	str	r5, [sp, #64]	; 0x40
   11a60:	bl	10d34 <strlen@plt>
   11a64:	mov	r3, #1
   11a68:	ldr	r2, [sp, #44]	; 0x2c
   11a6c:	cmp	r0, r5
   11a70:	moveq	r2, r5
   11a74:	str	r3, [sp, #32]
   11a78:	str	r3, [sp, #48]	; 0x30
   11a7c:	str	r5, [sp, #52]	; 0x34
   11a80:	str	r3, [sp, #60]	; 0x3c
   11a84:	ldr	r3, [sp, #180]	; 0xb4
   11a88:	str	r0, [sp, #56]	; 0x38
   11a8c:	str	r5, [sp, #68]	; 0x44
   11a90:	str	r5, [sp, #80]	; 0x50
   11a94:	str	r5, [sp, #84]	; 0x54
   11a98:	and	r3, r3, #1
   11a9c:	str	r2, [sp, #88]	; 0x58
   11aa0:	str	r3, [sp, #92]	; 0x5c
   11aa4:	ldr	r3, [sp, #180]	; 0xb4
   11aa8:	and	r3, r3, #4
   11aac:	str	r3, [sp, #96]	; 0x60
   11ab0:	ldr	r3, [sp, #192]	; 0xc0
   11ab4:	str	r3, [sp, #72]	; 0x48
   11ab8:	mov	r3, fp
   11abc:	mov	r7, #0
   11ac0:	mov	fp, r9
   11ac4:	mov	r9, r3
   11ac8:	cmn	r8, #1
   11acc:	beq	120d0 <__assert_fail@plt+0x12dc>
   11ad0:	subs	r6, r8, r7
   11ad4:	movne	r6, #1
   11ad8:	cmp	r6, #0
   11adc:	beq	120e8 <__assert_fail@plt+0x12f4>
   11ae0:	ldr	r0, [sp, #28]
   11ae4:	ldr	r3, [sp, #48]	; 0x30
   11ae8:	cmp	r3, #0
   11aec:	add	r3, r0, r7
   11af0:	str	r3, [sp, #36]	; 0x24
   11af4:	beq	12574 <__assert_fail@plt+0x1780>
   11af8:	ldr	r2, [sp, #56]	; 0x38
   11afc:	cmp	r2, #0
   11b00:	beq	12a74 <__assert_fail@plt+0x1c80>
   11b04:	cmp	r2, #1
   11b08:	mov	r3, r2
   11b0c:	movls	r3, #0
   11b10:	movhi	r3, #1
   11b14:	cmn	r8, #1
   11b18:	add	r5, r7, r2
   11b1c:	movne	r3, #0
   11b20:	cmp	r3, #0
   11b24:	beq	11b30 <__assert_fail@plt+0xd3c>
   11b28:	bl	10d34 <strlen@plt>
   11b2c:	mov	r8, r0
   11b30:	cmp	r5, r8
   11b34:	bhi	12a74 <__assert_fail@plt+0x1c80>
   11b38:	ldr	r0, [sp, #36]	; 0x24
   11b3c:	ldr	r2, [sp, #56]	; 0x38
   11b40:	ldr	r1, [sp, #72]	; 0x48
   11b44:	bl	10c38 <memcmp@plt>
   11b48:	cmp	r0, #0
   11b4c:	bne	12a74 <__assert_fail@plt+0x1c80>
   11b50:	ldr	r3, [sp, #44]	; 0x2c
   11b54:	cmp	r3, #0
   11b58:	bne	13220 <__assert_fail@plt+0x242c>
   11b5c:	ldr	r3, [sp, #36]	; 0x24
   11b60:	ldrb	r5, [r3]
   11b64:	cmp	r5, #126	; 0x7e
   11b68:	ldrls	pc, [pc, r5, lsl #2]
   11b6c:	b	13008 <__assert_fail@plt+0x2214>
   11b70:	andeq	r2, r1, r4, asr #4
   11b74:	andeq	r3, r1, r8
   11b78:	andeq	r3, r1, r8
   11b7c:	andeq	r3, r1, r8
   11b80:	andeq	r3, r1, r8
   11b84:	andeq	r3, r1, r8
   11b88:	andeq	r3, r1, r8
   11b8c:	muleq	r1, ip, r1
   11b90:	muleq	r1, r4, r1
   11b94:	andeq	r2, r1, r4, lsr #3
   11b98:	andeq	r2, r1, r8, lsr #6
   11b9c:	andeq	r2, r1, r8, lsl r3
   11ba0:	andeq	r2, r1, r0, asr #32
   11ba4:	strdeq	r2, [r1], -r4
   11ba8:	andeq	r3, r1, r8
   11bac:	andeq	r3, r1, r8
   11bb0:	andeq	r3, r1, r8
   11bb4:	andeq	r3, r1, r8
   11bb8:	andeq	r3, r1, r8
   11bbc:	andeq	r3, r1, r8
   11bc0:	andeq	r3, r1, r8
   11bc4:	andeq	r3, r1, r8
   11bc8:	andeq	r3, r1, r8
   11bcc:	andeq	r3, r1, r8
   11bd0:	andeq	r3, r1, r8
   11bd4:	andeq	r3, r1, r8
   11bd8:	andeq	r3, r1, r8
   11bdc:	andeq	r3, r1, r8
   11be0:	andeq	r3, r1, r8
   11be4:	andeq	r3, r1, r8
   11be8:	andeq	r3, r1, r8
   11bec:	andeq	r3, r1, r8
   11bf0:	andeq	r2, r1, r0, lsr #7
   11bf4:	muleq	r1, r4, r3
   11bf8:	muleq	r1, r4, r3
   11bfc:	andeq	r2, r1, r8, lsl #7
   11c00:	muleq	r1, r4, r3
   11c04:	andeq	r2, r1, ip, ror #8
   11c08:	muleq	r1, r4, r3
   11c0c:	ldrdeq	r2, [r1], -ip
   11c10:	muleq	r1, r4, r3
   11c14:	muleq	r1, r4, r3
   11c18:	muleq	r1, r4, r3
   11c1c:	andeq	r2, r1, ip, ror #8
   11c20:	andeq	r2, r1, ip, ror #8
   11c24:	andeq	r2, r1, ip, ror #8
   11c28:	andeq	r2, r1, ip, ror #8
   11c2c:	andeq	r2, r1, ip, ror #8
   11c30:	andeq	r2, r1, ip, ror #8
   11c34:	andeq	r2, r1, ip, ror #8
   11c38:	andeq	r2, r1, ip, ror #8
   11c3c:	andeq	r2, r1, ip, ror #8
   11c40:	andeq	r2, r1, ip, ror #8
   11c44:	andeq	r2, r1, ip, ror #8
   11c48:	andeq	r2, r1, ip, ror #8
   11c4c:	andeq	r2, r1, ip, ror #8
   11c50:	andeq	r2, r1, ip, ror #8
   11c54:	andeq	r2, r1, ip, ror #8
   11c58:	andeq	r2, r1, ip, ror #8
   11c5c:	muleq	r1, r4, r3
   11c60:	muleq	r1, r4, r3
   11c64:	muleq	r1, r4, r3
   11c68:	muleq	r1, r4, r3
   11c6c:	andeq	r2, r1, ip, lsl #9
   11c70:	andeq	r3, r1, r8
   11c74:	andeq	r2, r1, ip, ror #8
   11c78:	andeq	r2, r1, ip, ror #8
   11c7c:	andeq	r2, r1, ip, ror #8
   11c80:	andeq	r2, r1, ip, ror #8
   11c84:	andeq	r2, r1, ip, ror #8
   11c88:	andeq	r2, r1, ip, ror #8
   11c8c:	andeq	r2, r1, ip, ror #8
   11c90:	andeq	r2, r1, ip, ror #8
   11c94:	andeq	r2, r1, ip, ror #8
   11c98:	andeq	r2, r1, ip, ror #8
   11c9c:	andeq	r2, r1, ip, ror #8
   11ca0:	andeq	r2, r1, ip, ror #8
   11ca4:	andeq	r2, r1, ip, ror #8
   11ca8:	andeq	r2, r1, ip, ror #8
   11cac:	andeq	r2, r1, ip, ror #8
   11cb0:	andeq	r2, r1, ip, ror #8
   11cb4:	andeq	r2, r1, ip, ror #8
   11cb8:	andeq	r2, r1, ip, ror #8
   11cbc:	andeq	r2, r1, ip, ror #8
   11cc0:	andeq	r2, r1, ip, ror #8
   11cc4:	andeq	r2, r1, ip, ror #8
   11cc8:	andeq	r2, r1, ip, ror #8
   11ccc:	andeq	r2, r1, ip, ror #8
   11cd0:	andeq	r2, r1, ip, ror #8
   11cd4:	andeq	r2, r1, ip, ror #8
   11cd8:	andeq	r2, r1, ip, ror #8
   11cdc:	muleq	r1, r4, r3
   11ce0:	andeq	r2, r1, r0, lsr r4
   11ce4:	andeq	r2, r1, ip, ror #8
   11ce8:	muleq	r1, r4, r3
   11cec:	andeq	r2, r1, ip, ror #8
   11cf0:	muleq	r1, r4, r3
   11cf4:	andeq	r2, r1, ip, ror #8
   11cf8:	andeq	r2, r1, ip, ror #8
   11cfc:	andeq	r2, r1, ip, ror #8
   11d00:	andeq	r2, r1, ip, ror #8
   11d04:	andeq	r2, r1, ip, ror #8
   11d08:	andeq	r2, r1, ip, ror #8
   11d0c:	andeq	r2, r1, ip, ror #8
   11d10:	andeq	r2, r1, ip, ror #8
   11d14:	andeq	r2, r1, ip, ror #8
   11d18:	andeq	r2, r1, ip, ror #8
   11d1c:	andeq	r2, r1, ip, ror #8
   11d20:	andeq	r2, r1, ip, ror #8
   11d24:	andeq	r2, r1, ip, ror #8
   11d28:	andeq	r2, r1, ip, ror #8
   11d2c:	andeq	r2, r1, ip, ror #8
   11d30:	andeq	r2, r1, ip, ror #8
   11d34:	andeq	r2, r1, ip, ror #8
   11d38:	andeq	r2, r1, ip, ror #8
   11d3c:	andeq	r2, r1, ip, ror #8
   11d40:	andeq	r2, r1, ip, ror #8
   11d44:	andeq	r2, r1, ip, ror #8
   11d48:	andeq	r2, r1, ip, ror #8
   11d4c:	andeq	r2, r1, ip, ror #8
   11d50:	andeq	r2, r1, ip, ror #8
   11d54:	andeq	r2, r1, ip, ror #8
   11d58:	andeq	r2, r1, ip, ror #8
   11d5c:	andeq	r2, r1, ip, lsr r3
   11d60:	muleq	r1, r4, r3
   11d64:	andeq	r2, r1, ip, lsr r3
   11d68:	andeq	r2, r1, r8, lsl #7
   11d6c:	ldr	r3, [sp, #180]	; 0xb4
   11d70:	cmp	r4, #0
   11d74:	and	r3, r3, #1
   11d78:	str	r3, [sp, #92]	; 0x5c
   11d7c:	ldr	r3, [sp, #180]	; 0xb4
   11d80:	and	r3, r3, #4
   11d84:	str	r3, [sp, #96]	; 0x60
   11d88:	moveq	r3, #1
   11d8c:	streq	r3, [sp, #60]	; 0x3c
   11d90:	beq	12520 <__assert_fail@plt+0x172c>
   11d94:	mov	r3, #0
   11d98:	mov	r2, #1
   11d9c:	mov	r4, r3
   11da0:	mov	r9, r3
   11da4:	str	r2, [sp, #32]
   11da8:	str	r2, [sp, #44]	; 0x2c
   11dac:	str	r3, [sp, #48]	; 0x30
   11db0:	str	r2, [sp, #52]	; 0x34
   11db4:	str	r2, [sp, #56]	; 0x38
   11db8:	str	r3, [sp, #60]	; 0x3c
   11dbc:	str	r2, [sp, #64]	; 0x40
   11dc0:	str	r2, [sp, #68]	; 0x44
   11dc4:	str	r3, [sp, #80]	; 0x50
   11dc8:	str	r3, [sp, #84]	; 0x54
   11dcc:	str	r3, [sp, #88]	; 0x58
   11dd0:	movw	r3, #29352	; 0x72a8
   11dd4:	movt	r3, #1
   11dd8:	str	r3, [sp, #72]	; 0x48
   11ddc:	mov	r3, #2
   11de0:	str	r3, [sp, #176]	; 0xb0
   11de4:	b	11ab8 <__assert_fail@plt+0xcc4>
   11de8:	ldr	r3, [sp, #180]	; 0xb4
   11dec:	cmp	r4, #0
   11df0:	and	r3, r3, #1
   11df4:	str	r3, [sp, #92]	; 0x5c
   11df8:	ldr	r3, [sp, #180]	; 0xb4
   11dfc:	and	r3, r3, #4
   11e00:	str	r3, [sp, #96]	; 0x60
   11e04:	bne	131d8 <__assert_fail@plt+0x23e4>
   11e08:	cmp	sl, #0
   11e0c:	beq	12f84 <__assert_fail@plt+0x2190>
   11e10:	mov	r3, #34	; 0x22
   11e14:	mov	r2, r4
   11e18:	mov	r1, #1
   11e1c:	mov	r9, r2
   11e20:	strb	r3, [fp]
   11e24:	movw	r3, #29332	; 0x7294
   11e28:	movt	r3, #1
   11e2c:	mov	r4, r1
   11e30:	str	r1, [sp, #32]
   11e34:	str	r2, [sp, #44]	; 0x2c
   11e38:	str	r1, [sp, #48]	; 0x30
   11e3c:	str	r2, [sp, #52]	; 0x34
   11e40:	str	r1, [sp, #56]	; 0x38
   11e44:	str	r1, [sp, #60]	; 0x3c
   11e48:	str	r2, [sp, #64]	; 0x40
   11e4c:	str	r2, [sp, #68]	; 0x44
   11e50:	str	r3, [sp, #72]	; 0x48
   11e54:	str	r2, [sp, #80]	; 0x50
   11e58:	str	r2, [sp, #84]	; 0x54
   11e5c:	str	r2, [sp, #88]	; 0x58
   11e60:	b	11ab8 <__assert_fail@plt+0xcc4>
   11e64:	mov	r3, #0
   11e68:	mov	r2, #1
   11e6c:	mov	r9, r3
   11e70:	str	r2, [sp, #32]
   11e74:	str	r3, [sp, #44]	; 0x2c
   11e78:	str	r3, [sp, #48]	; 0x30
   11e7c:	str	r3, [sp, #52]	; 0x34
   11e80:	str	r3, [sp, #60]	; 0x3c
   11e84:	strd	r2, [sp, #64]	; 0x40
   11e88:	str	r3, [sp, #72]	; 0x48
   11e8c:	str	r3, [sp, #80]	; 0x50
   11e90:	str	r3, [sp, #88]	; 0x58
   11e94:	ldr	r3, [sp, #180]	; 0xb4
   11e98:	and	r3, r3, r2
   11e9c:	str	r3, [sp, #92]	; 0x5c
   11ea0:	ldr	r3, [sp, #180]	; 0xb4
   11ea4:	and	r3, r3, #4
   11ea8:	str	r3, [sp, #96]	; 0x60
   11eac:	ldr	r3, [sp, #176]	; 0xb0
   11eb0:	mov	r4, r3
   11eb4:	str	r3, [sp, #56]	; 0x38
   11eb8:	str	r3, [sp, #84]	; 0x54
   11ebc:	b	11ab8 <__assert_fail@plt+0xcc4>
   11ec0:	mov	r3, #1
   11ec4:	mov	r4, #0
   11ec8:	mov	r9, r4
   11ecc:	str	r3, [sp, #32]
   11ed0:	str	r3, [sp, #44]	; 0x2c
   11ed4:	str	r3, [sp, #48]	; 0x30
   11ed8:	str	r4, [sp, #52]	; 0x34
   11edc:	str	r3, [sp, #56]	; 0x38
   11ee0:	str	r3, [sp, #60]	; 0x3c
   11ee4:	str	r3, [sp, #88]	; 0x58
   11ee8:	movw	r3, #29332	; 0x7294
   11eec:	movt	r3, #1
   11ef0:	str	r4, [sp, #64]	; 0x40
   11ef4:	str	r4, [sp, #68]	; 0x44
   11ef8:	str	r3, [sp, #72]	; 0x48
   11efc:	ldr	r3, [sp, #180]	; 0xb4
   11f00:	str	r4, [sp, #80]	; 0x50
   11f04:	str	r4, [sp, #84]	; 0x54
   11f08:	and	r3, r3, #1
   11f0c:	str	r3, [sp, #92]	; 0x5c
   11f10:	ldr	r3, [sp, #180]	; 0xb4
   11f14:	and	r3, r3, #4
   11f18:	str	r3, [sp, #96]	; 0x60
   11f1c:	mov	r3, #5
   11f20:	str	r3, [sp, #176]	; 0xb0
   11f24:	b	11ab8 <__assert_fail@plt+0xcc4>
   11f28:	mov	r3, #1
   11f2c:	mov	r4, #0
   11f30:	mov	r9, r4
   11f34:	str	r3, [sp, #32]
   11f38:	str	r4, [sp, #44]	; 0x2c
   11f3c:	str	r3, [sp, #48]	; 0x30
   11f40:	str	r3, [sp, #60]	; 0x3c
   11f44:	ldr	r3, [sp, #180]	; 0xb4
   11f48:	str	r4, [sp, #52]	; 0x34
   11f4c:	str	r4, [sp, #56]	; 0x38
   11f50:	str	r4, [sp, #64]	; 0x40
   11f54:	str	r4, [sp, #68]	; 0x44
   11f58:	and	r3, r3, #1
   11f5c:	str	r4, [sp, #72]	; 0x48
   11f60:	str	r4, [sp, #80]	; 0x50
   11f64:	str	r4, [sp, #84]	; 0x54
   11f68:	str	r3, [sp, #92]	; 0x5c
   11f6c:	ldr	r3, [sp, #180]	; 0xb4
   11f70:	str	r4, [sp, #88]	; 0x58
   11f74:	and	r3, r3, #4
   11f78:	str	r3, [sp, #96]	; 0x60
   11f7c:	b	11ab8 <__assert_fail@plt+0xcc4>
   11f80:	mov	r3, #0
   11f84:	mov	r2, #1
   11f88:	ldr	r1, [sp, #176]	; 0xb0
   11f8c:	mov	r4, r3
   11f90:	mov	r9, r3
   11f94:	movw	r3, #29352	; 0x72a8
   11f98:	movt	r3, #1
   11f9c:	str	r2, [sp, #32]
   11fa0:	str	r2, [sp, #44]	; 0x2c
   11fa4:	str	r4, [sp, #48]	; 0x30
   11fa8:	strd	r2, [sp, #68]	; 0x44
   11fac:	ldr	r3, [sp, #180]	; 0xb4
   11fb0:	str	r2, [sp, #52]	; 0x34
   11fb4:	str	r1, [sp, #56]	; 0x38
   11fb8:	str	r4, [sp, #60]	; 0x3c
   11fbc:	str	r2, [sp, #64]	; 0x40
   11fc0:	and	r3, r3, r2
   11fc4:	str	r4, [sp, #80]	; 0x50
   11fc8:	str	r4, [sp, #84]	; 0x54
   11fcc:	str	r4, [sp, #88]	; 0x58
   11fd0:	str	r3, [sp, #92]	; 0x5c
   11fd4:	ldr	r3, [sp, #180]	; 0xb4
   11fd8:	and	r3, r3, #4
   11fdc:	str	r3, [sp, #96]	; 0x60
   11fe0:	mov	r3, #2
   11fe4:	str	r3, [sp, #176]	; 0xb0
   11fe8:	b	11ab8 <__assert_fail@plt+0xcc4>
   11fec:	mov	r3, #1
   11ff0:	mov	r2, #0
   11ff4:	mov	r4, r2
   11ff8:	mov	r9, r2
   11ffc:	str	r3, [sp, #32]
   12000:	str	r3, [sp, #44]	; 0x2c
   12004:	str	r2, [sp, #48]	; 0x30
   12008:	str	r3, [sp, #52]	; 0x34
   1200c:	str	r3, [sp, #56]	; 0x38
   12010:	str	r3, [sp, #60]	; 0x3c
   12014:	str	r3, [sp, #64]	; 0x40
   12018:	str	r3, [sp, #68]	; 0x44
   1201c:	str	r3, [sp, #88]	; 0x58
   12020:	movw	r3, #29352	; 0x72a8
   12024:	movt	r3, #1
   12028:	str	r3, [sp, #72]	; 0x48
   1202c:	ldr	r3, [sp, #180]	; 0xb4
   12030:	str	r2, [sp, #80]	; 0x50
   12034:	str	r2, [sp, #84]	; 0x54
   12038:	and	r3, r3, #1
   1203c:	b	11fd0 <__assert_fail@plt+0x11dc>
   12040:	mov	r5, #102	; 0x66
   12044:	mov	r6, #0
   12048:	ldr	r3, [sp, #44]	; 0x2c
   1204c:	cmp	r3, #0
   12050:	bne	12f00 <__assert_fail@plt+0x210c>
   12054:	ldr	r2, [sp, #52]	; 0x34
   12058:	eor	r3, fp, #1
   1205c:	ands	r3, r2, r3
   12060:	beq	12098 <__assert_fail@plt+0x12a4>
   12064:	cmp	sl, r4
   12068:	mov	fp, r3
   1206c:	movhi	r2, #39	; 0x27
   12070:	strbhi	r2, [r9, r4]
   12074:	add	r2, r4, #1
   12078:	cmp	sl, r2
   1207c:	movhi	r1, #36	; 0x24
   12080:	strbhi	r1, [r9, r2]
   12084:	add	r2, r4, #2
   12088:	add	r4, r4, #3
   1208c:	cmp	sl, r2
   12090:	movhi	r1, #39	; 0x27
   12094:	strbhi	r1, [r9, r2]
   12098:	cmp	sl, r4
   1209c:	add	r7, r7, #1
   120a0:	movhi	r3, #92	; 0x5c
   120a4:	strbhi	r3, [r9, r4]
   120a8:	add	r4, r4, #1
   120ac:	cmp	r4, sl
   120b0:	ldr	r3, [sp, #32]
   120b4:	strbcc	r5, [r9, r4]
   120b8:	cmp	r6, #0
   120bc:	add	r4, r4, #1
   120c0:	moveq	r3, #0
   120c4:	cmn	r8, #1
   120c8:	str	r3, [sp, #32]
   120cc:	bne	11ad0 <__assert_fail@plt+0xcdc>
   120d0:	ldr	r3, [sp, #28]
   120d4:	ldrb	r6, [r3, r7]
   120d8:	adds	r6, r6, #0
   120dc:	movne	r6, #1
   120e0:	cmp	r6, #0
   120e4:	bne	11ae0 <__assert_fail@plt+0xcec>
   120e8:	mov	r3, r9
   120ec:	mov	r9, fp
   120f0:	mov	fp, r3
   120f4:	ldr	r3, [sp, #68]	; 0x44
   120f8:	cmp	r4, #0
   120fc:	movne	r3, #0
   12100:	cmp	r3, #0
   12104:	bne	132f8 <__assert_fail@plt+0x2504>
   12108:	ldr	r3, [sp, #44]	; 0x2c
   1210c:	ldr	r2, [sp, #52]	; 0x34
   12110:	eor	r3, r3, #1
   12114:	ands	r2, r3, r2
   12118:	beq	13230 <__assert_fail@plt+0x243c>
   1211c:	ldr	r3, [sp, #80]	; 0x50
   12120:	cmp	r3, #0
   12124:	beq	13234 <__assert_fail@plt+0x2440>
   12128:	ldr	r3, [sp, #32]
   1212c:	cmp	r3, #0
   12130:	bne	132a8 <__assert_fail@plt+0x24b4>
   12134:	ldr	r3, [sp, #84]	; 0x54
   12138:	adds	r3, r3, #0
   1213c:	movne	r3, #1
   12140:	cmp	sl, #0
   12144:	movne	r3, #0
   12148:	cmp	r3, #0
   1214c:	ldreq	r2, [sp, #80]	; 0x50
   12150:	beq	13234 <__assert_fail@plt+0x2440>
   12154:	ldr	r2, [sp, #84]	; 0x54
   12158:	mov	sl, r2
   1215c:	mov	r0, #0
   12160:	mov	r4, #1
   12164:	mov	r1, #39	; 0x27
   12168:	str	r0, [sp, #44]	; 0x2c
   1216c:	strb	r1, [fp]
   12170:	str	r0, [sp, #48]	; 0x30
   12174:	str	r4, [sp, #52]	; 0x34
   12178:	str	r4, [sp, #56]	; 0x38
   1217c:	str	r4, [sp, #64]	; 0x40
   12180:	str	r0, [sp, #68]	; 0x44
   12184:	str	r3, [sp, #80]	; 0x50
   12188:	str	r2, [sp, #84]	; 0x54
   1218c:	str	r0, [sp, #88]	; 0x58
   12190:	b	11dd0 <__assert_fail@plt+0xfdc>
   12194:	mov	r5, #98	; 0x62
   12198:	b	12044 <__assert_fail@plt+0x1250>
   1219c:	mov	r5, #97	; 0x61
   121a0:	b	12044 <__assert_fail@plt+0x1250>
   121a4:	ldr	r3, [sp, #48]	; 0x30
   121a8:	str	r3, [sp, #40]	; 0x28
   121ac:	mov	r3, #116	; 0x74
   121b0:	ldr	r2, [sp, #68]	; 0x44
   121b4:	cmp	r2, #0
   121b8:	bne	123b4 <__assert_fail@plt+0x15c0>
   121bc:	ldr	r2, [sp, #60]	; 0x3c
   121c0:	cmp	r2, #0
   121c4:	bne	12310 <__assert_fail@plt+0x151c>
   121c8:	ldr	r3, [sp, #44]	; 0x2c
   121cc:	mov	r6, #0
   121d0:	cmp	r3, #0
   121d4:	beq	12380 <__assert_fail@plt+0x158c>
   121d8:	mov	r3, fp
   121dc:	ldr	r2, [sp, #184]	; 0xb8
   121e0:	cmp	r2, #0
   121e4:	beq	12204 <__assert_fail@plt+0x1410>
   121e8:	ubfx	r1, r5, #5, #8
   121ec:	mov	r0, r2
   121f0:	and	r2, r5, #31
   121f4:	ldr	r1, [r0, r1, lsl #2]
   121f8:	lsr	r2, r1, r2
   121fc:	tst	r2, #1
   12200:	bne	12048 <__assert_fail@plt+0x1254>
   12204:	ldr	r2, [sp, #40]	; 0x28
   12208:	cmp	r2, #0
   1220c:	addeq	r7, r7, #1
   12210:	bne	12048 <__assert_fail@plt+0x1254>
   12214:	cmp	r3, #0
   12218:	beq	120ac <__assert_fail@plt+0x12b8>
   1221c:	cmp	sl, r4
   12220:	mov	fp, #0
   12224:	movhi	r3, #39	; 0x27
   12228:	strbhi	r3, [r9, r4]
   1222c:	add	r3, r4, #1
   12230:	add	r4, r4, #2
   12234:	cmp	sl, r3
   12238:	movhi	r2, #39	; 0x27
   1223c:	strbhi	r2, [r9, r3]
   12240:	b	120ac <__assert_fail@plt+0x12b8>
   12244:	ldr	r3, [sp, #48]	; 0x30
   12248:	str	r3, [sp, #40]	; 0x28
   1224c:	eor	r3, fp, #1
   12250:	ldr	r2, [sp, #52]	; 0x34
   12254:	ands	r2, r2, r3
   12258:	beq	12f18 <__assert_fail@plt+0x2124>
   1225c:	cmp	sl, r4
   12260:	movhi	r3, #39	; 0x27
   12264:	strbhi	r3, [r9, r4]
   12268:	add	r3, r4, #1
   1226c:	cmp	sl, r3
   12270:	movhi	r1, #36	; 0x24
   12274:	strbhi	r1, [r9, r3]
   12278:	add	r3, r4, #2
   1227c:	cmp	sl, r3
   12280:	movhi	r1, #39	; 0x27
   12284:	strbhi	r1, [r9, r3]
   12288:	add	r3, r4, #3
   1228c:	cmp	sl, r3
   12290:	bls	12f64 <__assert_fail@plt+0x2170>
   12294:	mov	r4, r3
   12298:	mov	r3, #92	; 0x5c
   1229c:	mov	fp, r2
   122a0:	mov	r2, r4
   122a4:	strb	r3, [r9, r4]
   122a8:	ldr	r3, [sp, #176]	; 0xb0
   122ac:	add	r4, r4, #1
   122b0:	cmp	r3, #2
   122b4:	beq	12fcc <__assert_fail@plt+0x21d8>
   122b8:	add	r3, r7, #1
   122bc:	cmp	r3, r8
   122c0:	bcs	122d8 <__assert_fail@plt+0x14e4>
   122c4:	ldr	r1, [sp, #28]
   122c8:	ldrb	r3, [r1, r3]
   122cc:	sub	r3, r3, #48	; 0x30
   122d0:	cmp	r3, #9
   122d4:	bls	12fdc <__assert_fail@plt+0x21e8>
   122d8:	mov	r3, #0
   122dc:	mov	r5, #48	; 0x30
   122e0:	ldr	r6, [sp, #64]	; 0x40
   122e4:	cmp	r6, #0
   122e8:	beq	121dc <__assert_fail@plt+0x13e8>
   122ec:	mov	r6, #0
   122f0:	b	12204 <__assert_fail@plt+0x1410>
   122f4:	ldr	r3, [sp, #48]	; 0x30
   122f8:	str	r3, [sp, #40]	; 0x28
   122fc:	ldr	r2, [sp, #60]	; 0x3c
   12300:	mov	r5, #13
   12304:	mov	r3, #114	; 0x72
   12308:	cmp	r2, #0
   1230c:	beq	121c8 <__assert_fail@plt+0x13d4>
   12310:	mov	r5, r3
   12314:	b	12044 <__assert_fail@plt+0x1250>
   12318:	ldr	r3, [sp, #48]	; 0x30
   1231c:	str	r3, [sp, #40]	; 0x28
   12320:	mov	r3, #118	; 0x76
   12324:	b	121bc <__assert_fail@plt+0x13c8>
   12328:	ldr	r3, [sp, #48]	; 0x30
   1232c:	str	r3, [sp, #40]	; 0x28
   12330:	mov	r5, #10
   12334:	mov	r3, #110	; 0x6e
   12338:	b	121bc <__assert_fail@plt+0x13c8>
   1233c:	ldr	r3, [sp, #48]	; 0x30
   12340:	cmn	r8, #1
   12344:	str	r3, [sp, #40]	; 0x28
   12348:	beq	12790 <__assert_fail@plt+0x199c>
   1234c:	subs	r3, r8, #1
   12350:	movne	r3, #1
   12354:	cmp	r3, #0
   12358:	bne	12364 <__assert_fail@plt+0x1570>
   1235c:	cmp	r7, #0
   12360:	beq	123a8 <__assert_fail@plt+0x15b4>
   12364:	mov	r6, #0
   12368:	ldr	r3, [sp, #64]	; 0x40
   1236c:	cmp	r3, #0
   12370:	beq	121d8 <__assert_fail@plt+0x13e4>
   12374:	ldr	r3, [sp, #44]	; 0x2c
   12378:	cmp	r3, #0
   1237c:	bne	121d8 <__assert_fail@plt+0x13e4>
   12380:	mov	r3, fp
   12384:	b	12204 <__assert_fail@plt+0x1410>
   12388:	ldr	r3, [sp, #48]	; 0x30
   1238c:	str	r3, [sp, #40]	; 0x28
   12390:	b	1235c <__assert_fail@plt+0x1568>
   12394:	ldr	r3, [sp, #48]	; 0x30
   12398:	str	r3, [sp, #40]	; 0x28
   1239c:	b	12364 <__assert_fail@plt+0x1570>
   123a0:	ldr	r6, [sp, #48]	; 0x30
   123a4:	str	r6, [sp, #40]	; 0x28
   123a8:	ldr	r3, [sp, #68]	; 0x44
   123ac:	cmp	r3, #0
   123b0:	beq	12368 <__assert_fail@plt+0x1574>
   123b4:	mov	r3, #2
   123b8:	mov	fp, r9
   123bc:	str	r3, [sp, #176]	; 0xb0
   123c0:	ldr	r3, [sp, #60]	; 0x3c
   123c4:	cmp	r3, #0
   123c8:	ldr	r3, [sp, #176]	; 0xb0
   123cc:	movne	r3, #4
   123d0:	str	r3, [sp, #176]	; 0xb0
   123d4:	mov	lr, #0
   123d8:	mov	r0, fp
   123dc:	ldr	r2, [sp, #28]
   123e0:	ldr	r3, [sp, #180]	; 0xb4
   123e4:	ldr	r1, [sp, #188]	; 0xbc
   123e8:	bic	ip, r3, #2
   123ec:	ldr	r3, [sp, #176]	; 0xb0
   123f0:	stm	sp, {r3, ip, lr}
   123f4:	mov	r3, r8
   123f8:	ldr	ip, [sp, #192]	; 0xc0
   123fc:	str	r1, [sp, #12]
   12400:	mov	r1, sl
   12404:	str	ip, [sp, #16]
   12408:	bl	11994 <__assert_fail@plt+0xba0>
   1240c:	mov	r4, r0
   12410:	mov	r0, r4
   12414:	add	sp, sp, #140	; 0x8c
   12418:	ldrd	r4, [sp]
   1241c:	ldrd	r6, [sp, #8]
   12420:	ldrd	r8, [sp, #16]
   12424:	ldrd	sl, [sp, #24]
   12428:	add	sp, sp, #32
   1242c:	pop	{pc}		; (ldr pc, [sp], #4)
   12430:	ldr	r3, [sp, #48]	; 0x30
   12434:	str	r3, [sp, #40]	; 0x28
   12438:	ldr	r3, [sp, #176]	; 0xb0
   1243c:	cmp	r3, #2
   12440:	beq	127b8 <__assert_fail@plt+0x19c4>
   12444:	ldr	r3, [sp, #88]	; 0x58
   12448:	cmp	r3, #0
   1244c:	moveq	r5, #92	; 0x5c
   12450:	moveq	r3, r5
   12454:	beq	121bc <__assert_fail@plt+0x13c8>
   12458:	add	r7, r7, #1
   1245c:	mov	r3, fp
   12460:	mov	r6, #0
   12464:	mov	r5, #92	; 0x5c
   12468:	b	12214 <__assert_fail@plt+0x1420>
   1246c:	ldr	r3, [sp, #64]	; 0x40
   12470:	cmp	r3, #0
   12474:	bne	132ec <__assert_fail@plt+0x24f8>
   12478:	ldr	r2, [sp, #48]	; 0x30
   1247c:	mov	r3, fp
   12480:	mov	r6, r2
   12484:	str	r2, [sp, #40]	; 0x28
   12488:	b	121dc <__assert_fail@plt+0x13e8>
   1248c:	ldr	r3, [sp, #176]	; 0xb0
   12490:	cmp	r3, #2
   12494:	beq	13228 <__assert_fail@plt+0x2434>
   12498:	cmp	r3, #5
   1249c:	ldr	r3, [sp, #48]	; 0x30
   124a0:	str	r3, [sp, #40]	; 0x28
   124a4:	bne	124d0 <__assert_fail@plt+0x16dc>
   124a8:	ldr	r3, [sp, #96]	; 0x60
   124ac:	cmp	r3, #0
   124b0:	beq	12f2c <__assert_fail@plt+0x2138>
   124b4:	add	r3, r7, #2
   124b8:	cmp	r3, r8
   124bc:	bcs	124d0 <__assert_fail@plt+0x16dc>
   124c0:	ldr	r2, [sp, #36]	; 0x24
   124c4:	ldrb	r5, [r2, #1]
   124c8:	cmp	r5, #63	; 0x3f
   124cc:	beq	13014 <__assert_fail@plt+0x2220>
   124d0:	mov	r6, #0
   124d4:	mov	r5, #63	; 0x3f
   124d8:	b	12368 <__assert_fail@plt+0x1574>
   124dc:	ldr	r3, [sp, #176]	; 0xb0
   124e0:	cmp	r3, #2
   124e4:	ldr	r3, [sp, #48]	; 0x30
   124e8:	beq	12cd0 <__assert_fail@plt+0x1edc>
   124ec:	mov	r5, #39	; 0x27
   124f0:	str	r3, [sp, #40]	; 0x28
   124f4:	str	r6, [sp, #80]	; 0x50
   124f8:	b	12368 <__assert_fail@plt+0x1574>
   124fc:	ldr	r3, [sp, #180]	; 0xb4
   12500:	cmp	r4, #0
   12504:	and	r3, r3, #1
   12508:	str	r3, [sp, #92]	; 0x5c
   1250c:	ldr	r3, [sp, #180]	; 0xb4
   12510:	and	r3, r3, #4
   12514:	str	r3, [sp, #96]	; 0x60
   12518:	bne	13338 <__assert_fail@plt+0x2544>
   1251c:	str	r4, [sp, #60]	; 0x3c
   12520:	cmp	sl, #0
   12524:	bne	1331c <__assert_fail@plt+0x2528>
   12528:	mov	r3, #1
   1252c:	movw	r2, #29352	; 0x72a8
   12530:	movt	r2, #1
   12534:	mov	r4, r3
   12538:	mov	r3, #2
   1253c:	mov	r9, sl
   12540:	str	r4, [sp, #32]
   12544:	str	sl, [sp, #44]	; 0x2c
   12548:	str	sl, [sp, #48]	; 0x30
   1254c:	str	r4, [sp, #52]	; 0x34
   12550:	str	r4, [sp, #56]	; 0x38
   12554:	str	r4, [sp, #64]	; 0x40
   12558:	str	sl, [sp, #68]	; 0x44
   1255c:	str	r2, [sp, #72]	; 0x48
   12560:	str	sl, [sp, #80]	; 0x50
   12564:	str	sl, [sp, #84]	; 0x54
   12568:	str	sl, [sp, #88]	; 0x58
   1256c:	str	r3, [sp, #176]	; 0xb0
   12570:	b	11ab8 <__assert_fail@plt+0xcc4>
   12574:	ldrb	r5, [r0, r7]
   12578:	cmp	r5, #126	; 0x7e
   1257c:	ldrls	pc, [pc, r5, lsl #2]
   12580:	b	128e4 <__assert_fail@plt+0x1af0>
   12584:			; <UNDEFINED> instruction: 0x000128b0
   12588:	andeq	r2, r1, r4, ror #17
   1258c:	andeq	r2, r1, r4, ror #17
   12590:	andeq	r2, r1, r4, ror #17
   12594:	andeq	r2, r1, r4, ror #17
   12598:	andeq	r2, r1, r4, ror #17
   1259c:	andeq	r2, r1, r4, ror #17
   125a0:	andeq	r2, r1, r0, lsr #17
   125a4:	muleq	r1, r0, r8
   125a8:	andeq	r2, r1, r4, lsl r8
   125ac:	andeq	r2, r1, r0, lsl #17
   125b0:	strdeq	r2, [r1], -r4
   125b4:	ldrdeq	r2, [r1], -r4
   125b8:	andeq	r2, r1, r0, ror #16
   125bc:	andeq	r2, r1, r4, ror #17
   125c0:	andeq	r2, r1, r4, ror #17
   125c4:	andeq	r2, r1, r4, ror #17
   125c8:	andeq	r2, r1, r4, ror #17
   125cc:	andeq	r2, r1, r4, ror #17
   125d0:	andeq	r2, r1, r4, ror #17
   125d4:	andeq	r2, r1, r4, ror #17
   125d8:	andeq	r2, r1, r4, ror #17
   125dc:	andeq	r2, r1, r4, ror #17
   125e0:	andeq	r2, r1, r4, ror #17
   125e4:	andeq	r2, r1, r4, ror #17
   125e8:	andeq	r2, r1, r4, ror #17
   125ec:	andeq	r2, r1, r4, ror #17
   125f0:	andeq	r2, r1, r4, ror #17
   125f4:	andeq	r2, r1, r4, ror #17
   125f8:	andeq	r2, r1, r4, ror #17
   125fc:	andeq	r2, r1, r4, ror #17
   12600:	andeq	r2, r1, r4, ror #17
   12604:	andeq	r2, r1, r8, lsl #16
   12608:	andeq	r2, r1, r0, ror r8
   1260c:	andeq	r2, r1, r0, ror r8
   12610:	andeq	r2, r1, r8, ror #15
   12614:	andeq	r2, r1, r0, ror r8
   12618:	ldrdeq	r2, [r1], -ip
   1261c:	andeq	r2, r1, r0, ror r8
   12620:	andeq	r2, r1, ip, asr #16
   12624:	andeq	r2, r1, r0, ror r8
   12628:	andeq	r2, r1, r0, ror r8
   1262c:	andeq	r2, r1, r0, ror r8
   12630:	ldrdeq	r2, [r1], -ip
   12634:	ldrdeq	r2, [r1], -ip
   12638:	ldrdeq	r2, [r1], -ip
   1263c:	ldrdeq	r2, [r1], -ip
   12640:	ldrdeq	r2, [r1], -ip
   12644:	ldrdeq	r2, [r1], -ip
   12648:	ldrdeq	r2, [r1], -ip
   1264c:	ldrdeq	r2, [r1], -ip
   12650:	ldrdeq	r2, [r1], -ip
   12654:	ldrdeq	r2, [r1], -ip
   12658:	ldrdeq	r2, [r1], -ip
   1265c:	ldrdeq	r2, [r1], -ip
   12660:	ldrdeq	r2, [r1], -ip
   12664:	ldrdeq	r2, [r1], -ip
   12668:	ldrdeq	r2, [r1], -ip
   1266c:	ldrdeq	r2, [r1], -ip
   12670:	andeq	r2, r1, r0, ror r8
   12674:	andeq	r2, r1, r0, ror r8
   12678:	andeq	r2, r1, r0, ror r8
   1267c:	andeq	r2, r1, r0, ror r8
   12680:	andeq	r2, r1, r4, lsr #16
   12684:	andeq	r2, r1, r4, ror #17
   12688:	ldrdeq	r2, [r1], -ip
   1268c:	ldrdeq	r2, [r1], -ip
   12690:	ldrdeq	r2, [r1], -ip
   12694:	ldrdeq	r2, [r1], -ip
   12698:	ldrdeq	r2, [r1], -ip
   1269c:	ldrdeq	r2, [r1], -ip
   126a0:	ldrdeq	r2, [r1], -ip
   126a4:	ldrdeq	r2, [r1], -ip
   126a8:	ldrdeq	r2, [r1], -ip
   126ac:	ldrdeq	r2, [r1], -ip
   126b0:	ldrdeq	r2, [r1], -ip
   126b4:	ldrdeq	r2, [r1], -ip
   126b8:	ldrdeq	r2, [r1], -ip
   126bc:	ldrdeq	r2, [r1], -ip
   126c0:	ldrdeq	r2, [r1], -ip
   126c4:	ldrdeq	r2, [r1], -ip
   126c8:	ldrdeq	r2, [r1], -ip
   126cc:	ldrdeq	r2, [r1], -ip
   126d0:	ldrdeq	r2, [r1], -ip
   126d4:	ldrdeq	r2, [r1], -ip
   126d8:	ldrdeq	r2, [r1], -ip
   126dc:	ldrdeq	r2, [r1], -ip
   126e0:	ldrdeq	r2, [r1], -ip
   126e4:	ldrdeq	r2, [r1], -ip
   126e8:	ldrdeq	r2, [r1], -ip
   126ec:	ldrdeq	r2, [r1], -ip
   126f0:	andeq	r2, r1, r0, ror r8
   126f4:	andeq	r2, r1, r4, lsr #15
   126f8:	ldrdeq	r2, [r1], -ip
   126fc:	andeq	r2, r1, r0, ror r8
   12700:	ldrdeq	r2, [r1], -ip
   12704:	andeq	r2, r1, r0, ror r8
   12708:	ldrdeq	r2, [r1], -ip
   1270c:	ldrdeq	r2, [r1], -ip
   12710:	ldrdeq	r2, [r1], -ip
   12714:	ldrdeq	r2, [r1], -ip
   12718:	ldrdeq	r2, [r1], -ip
   1271c:	ldrdeq	r2, [r1], -ip
   12720:	ldrdeq	r2, [r1], -ip
   12724:	ldrdeq	r2, [r1], -ip
   12728:	ldrdeq	r2, [r1], -ip
   1272c:	ldrdeq	r2, [r1], -ip
   12730:	ldrdeq	r2, [r1], -ip
   12734:	ldrdeq	r2, [r1], -ip
   12738:	ldrdeq	r2, [r1], -ip
   1273c:	ldrdeq	r2, [r1], -ip
   12740:	ldrdeq	r2, [r1], -ip
   12744:	ldrdeq	r2, [r1], -ip
   12748:	ldrdeq	r2, [r1], -ip
   1274c:	ldrdeq	r2, [r1], -ip
   12750:	ldrdeq	r2, [r1], -ip
   12754:	ldrdeq	r2, [r1], -ip
   12758:	ldrdeq	r2, [r1], -ip
   1275c:	ldrdeq	r2, [r1], -ip
   12760:	ldrdeq	r2, [r1], -ip
   12764:	ldrdeq	r2, [r1], -ip
   12768:	ldrdeq	r2, [r1], -ip
   1276c:	ldrdeq	r2, [r1], -ip
   12770:	andeq	r2, r1, r0, lsl #15
   12774:	andeq	r2, r1, r0, ror r8
   12778:	andeq	r2, r1, r0, lsl #15
   1277c:	andeq	r2, r1, r8, ror #15
   12780:	mov	r3, #0
   12784:	cmn	r8, #1
   12788:	str	r3, [sp, #40]	; 0x28
   1278c:	bne	1234c <__assert_fail@plt+0x1558>
   12790:	ldr	r3, [sp, #28]
   12794:	ldrb	r3, [r3, #1]
   12798:	adds	r3, r3, #0
   1279c:	movne	r3, #1
   127a0:	b	12354 <__assert_fail@plt+0x1560>
   127a4:	mov	r3, #0
   127a8:	str	r3, [sp, #40]	; 0x28
   127ac:	ldr	r3, [sp, #176]	; 0xb0
   127b0:	cmp	r3, #2
   127b4:	bne	12444 <__assert_fail@plt+0x1650>
   127b8:	ldr	r3, [sp, #44]	; 0x2c
   127bc:	cmp	r3, #0
   127c0:	bne	13100 <__assert_fail@plt+0x230c>
   127c4:	mov	r6, r3
   127c8:	add	r7, r7, #1
   127cc:	mov	r3, fp
   127d0:	mov	r5, #92	; 0x5c
   127d4:	b	12214 <__assert_fail@plt+0x1420>
   127d8:	ldr	r6, [sp, #48]	; 0x30
   127dc:	mov	r3, #0
   127e0:	str	r3, [sp, #40]	; 0x28
   127e4:	b	12368 <__assert_fail@plt+0x1574>
   127e8:	mov	r3, #0
   127ec:	str	r3, [sp, #40]	; 0x28
   127f0:	b	1235c <__assert_fail@plt+0x1568>
   127f4:	mov	r3, #0
   127f8:	str	r3, [sp, #40]	; 0x28
   127fc:	mov	r3, #118	; 0x76
   12800:	b	121bc <__assert_fail@plt+0x13c8>
   12804:	ldr	r6, [sp, #48]	; 0x30
   12808:	mov	r3, #0
   1280c:	str	r3, [sp, #40]	; 0x28
   12810:	b	123a8 <__assert_fail@plt+0x15b4>
   12814:	mov	r3, #0
   12818:	str	r3, [sp, #40]	; 0x28
   1281c:	mov	r3, #116	; 0x74
   12820:	b	121b0 <__assert_fail@plt+0x13bc>
   12824:	ldr	r3, [sp, #176]	; 0xb0
   12828:	cmp	r3, #2
   1282c:	beq	12d3c <__assert_fail@plt+0x1f48>
   12830:	cmp	r3, #5
   12834:	mov	r3, #0
   12838:	str	r3, [sp, #40]	; 0x28
   1283c:	beq	124a8 <__assert_fail@plt+0x16b4>
   12840:	mov	r6, #0
   12844:	mov	r5, #63	; 0x3f
   12848:	b	12368 <__assert_fail@plt+0x1574>
   1284c:	ldr	r3, [sp, #176]	; 0xb0
   12850:	cmp	r3, #2
   12854:	beq	12cc4 <__assert_fail@plt+0x1ed0>
   12858:	mov	r3, #0
   1285c:	b	124ec <__assert_fail@plt+0x16f8>
   12860:	mov	r3, #0
   12864:	str	r3, [sp, #40]	; 0x28
   12868:	mov	r3, #114	; 0x72
   1286c:	b	121b0 <__assert_fail@plt+0x13bc>
   12870:	mov	r3, #0
   12874:	mov	r6, r3
   12878:	str	r3, [sp, #40]	; 0x28
   1287c:	b	123a8 <__assert_fail@plt+0x15b4>
   12880:	mov	r3, #0
   12884:	str	r3, [sp, #40]	; 0x28
   12888:	mov	r3, #110	; 0x6e
   1288c:	b	121b0 <__assert_fail@plt+0x13bc>
   12890:	mov	r3, #0
   12894:	str	r3, [sp, #40]	; 0x28
   12898:	mov	r3, #98	; 0x62
   1289c:	b	121bc <__assert_fail@plt+0x13c8>
   128a0:	mov	r3, #0
   128a4:	str	r3, [sp, #40]	; 0x28
   128a8:	mov	r3, #97	; 0x61
   128ac:	b	121bc <__assert_fail@plt+0x13c8>
   128b0:	ldr	r3, [sp, #60]	; 0x3c
   128b4:	cmp	r3, #0
   128b8:	bne	12ca8 <__assert_fail@plt+0x1eb4>
   128bc:	ldr	r3, [sp, #92]	; 0x5c
   128c0:	cmp	r3, #0
   128c4:	addne	r7, r7, #1
   128c8:	bne	11ac8 <__assert_fail@plt+0xcd4>
   128cc:	str	r3, [sp, #40]	; 0x28
   128d0:	b	121c8 <__assert_fail@plt+0x13d4>
   128d4:	mov	r3, #0
   128d8:	str	r3, [sp, #40]	; 0x28
   128dc:	mov	r3, #102	; 0x66
   128e0:	b	121bc <__assert_fail@plt+0x13c8>
   128e4:	mov	r3, #0
   128e8:	str	r3, [sp, #40]	; 0x28
   128ec:	ldr	r3, [sp, #76]	; 0x4c
   128f0:	cmp	r3, #1
   128f4:	bne	12d5c <__assert_fail@plt+0x1f68>
   128f8:	bl	10d1c <__ctype_b_loc@plt>
   128fc:	ldr	r2, [r0]
   12900:	sxth	r3, r5
   12904:	lsl	r3, r3, #1
   12908:	ldr	r1, [sp, #76]	; 0x4c
   1290c:	ldrh	r3, [r2, r3]
   12910:	mov	r0, r1
   12914:	and	r3, r3, #16384	; 0x4000
   12918:	cmp	r3, #0
   1291c:	ldr	r3, [sp, #60]	; 0x3c
   12920:	movne	r6, #1
   12924:	moveq	r6, #0
   12928:	movne	r2, #0
   1292c:	andeq	r2, r3, #1
   12930:	cmp	r2, #0
   12934:	beq	12368 <__assert_fail@plt+0x1574>
   12938:	ldr	r2, [sp, #60]	; 0x3c
   1293c:	mov	r6, #0
   12940:	add	r1, r0, r7
   12944:	mov	ip, #39	; 0x27
   12948:	str	r6, [sp, #100]	; 0x64
   1294c:	mov	r0, #0
   12950:	ldr	lr, [sp, #36]	; 0x24
   12954:	str	r8, [sp, #36]	; 0x24
   12958:	ldr	r6, [sp, #40]	; 0x28
   1295c:	ldr	r8, [sp, #44]	; 0x2c
   12960:	b	12a10 <__assert_fail@plt+0x1c1c>
   12964:	cmp	r8, #0
   12968:	bne	12f44 <__assert_fail@plt+0x2150>
   1296c:	ldr	r0, [sp, #52]	; 0x34
   12970:	eor	r3, fp, #1
   12974:	ands	r3, r0, r3
   12978:	beq	129a8 <__assert_fail@plt+0x1bb4>
   1297c:	cmp	sl, r4
   12980:	add	r0, r4, #1
   12984:	strbhi	ip, [r9, r4]
   12988:	cmp	sl, r0
   1298c:	movhi	fp, #36	; 0x24
   12990:	strbhi	fp, [r9, r0]
   12994:	add	r0, r4, #2
   12998:	mov	fp, r3
   1299c:	cmp	sl, r0
   129a0:	add	r4, r4, #3
   129a4:	strbhi	ip, [r9, r0]
   129a8:	cmp	sl, r4
   129ac:	movhi	r3, #92	; 0x5c
   129b0:	strbhi	r3, [r9, r4]
   129b4:	add	r3, r4, #1
   129b8:	cmp	sl, r3
   129bc:	bls	129cc <__assert_fail@plt+0x1bd8>
   129c0:	lsr	r0, r5, #6
   129c4:	add	r0, r0, #48	; 0x30
   129c8:	strb	r0, [r9, r3]
   129cc:	add	r3, r4, #2
   129d0:	cmp	sl, r3
   129d4:	bls	129e4 <__assert_fail@plt+0x1bf0>
   129d8:	ubfx	r0, r5, #3, #3
   129dc:	add	r0, r0, #48	; 0x30
   129e0:	strb	r0, [r9, r3]
   129e4:	add	r7, r7, #1
   129e8:	and	r5, r5, #7
   129ec:	cmp	r1, r7
   129f0:	add	r5, r5, #48	; 0x30
   129f4:	add	r4, r4, #3
   129f8:	bls	12f58 <__assert_fail@plt+0x2164>
   129fc:	mov	r0, r2
   12a00:	cmp	sl, r4
   12a04:	strbhi	r5, [r9, r4]
   12a08:	add	r4, r4, #1
   12a0c:	ldrb	r5, [lr, #1]!
   12a10:	cmp	r2, #0
   12a14:	bne	12964 <__assert_fail@plt+0x1b70>
   12a18:	eor	r3, r0, #1
   12a1c:	cmp	r6, #0
   12a20:	and	r3, r3, fp
   12a24:	uxtb	r3, r3
   12a28:	beq	12a3c <__assert_fail@plt+0x1c48>
   12a2c:	cmp	sl, r4
   12a30:	movhi	r6, #92	; 0x5c
   12a34:	strbhi	r6, [r9, r4]
   12a38:	add	r4, r4, #1
   12a3c:	add	r7, r7, #1
   12a40:	cmp	r7, r1
   12a44:	bcs	12f38 <__assert_fail@plt+0x2144>
   12a48:	cmp	r3, #0
   12a4c:	beq	12f7c <__assert_fail@plt+0x2188>
   12a50:	cmp	sl, r4
   12a54:	add	r3, r4, #1
   12a58:	mov	r6, #0
   12a5c:	strbhi	ip, [r9, r4]
   12a60:	cmp	sl, r3
   12a64:	add	r4, r4, #2
   12a68:	mov	fp, r6
   12a6c:	strbhi	ip, [r9, r3]
   12a70:	b	12a00 <__assert_fail@plt+0x1c0c>
   12a74:	ldr	r3, [sp, #36]	; 0x24
   12a78:	ldrb	r5, [r3]
   12a7c:	cmp	r5, #126	; 0x7e
   12a80:	ldrls	pc, [pc, r5, lsl #2]
   12a84:	b	128e4 <__assert_fail@plt+0x1af0>
   12a88:	andeq	r2, r1, r8, lsr #25
   12a8c:	andeq	r2, r1, r4, ror #17
   12a90:	andeq	r2, r1, r4, ror #17
   12a94:	andeq	r2, r1, r4, ror #17
   12a98:	andeq	r2, r1, r4, ror #17
   12a9c:	andeq	r2, r1, r4, ror #17
   12aa0:	andeq	r2, r1, r4, ror #17
   12aa4:	muleq	r1, ip, r1
   12aa8:	muleq	r1, r4, r1
   12aac:	andeq	r2, r1, r4, lsl r8
   12ab0:	muleq	r1, ip, ip
   12ab4:	strdeq	r2, [r1], -r4
   12ab8:	andeq	r2, r1, r0, asr #32
   12abc:	muleq	r1, r0, ip
   12ac0:	andeq	r2, r1, r4, ror #17
   12ac4:	andeq	r2, r1, r4, ror #17
   12ac8:	andeq	r2, r1, r4, ror #17
   12acc:	andeq	r2, r1, r4, ror #17
   12ad0:	andeq	r2, r1, r4, ror #17
   12ad4:	andeq	r2, r1, r4, ror #17
   12ad8:	andeq	r2, r1, r4, ror #17
   12adc:	andeq	r2, r1, r4, ror #17
   12ae0:	andeq	r2, r1, r4, ror #17
   12ae4:	andeq	r2, r1, r4, ror #17
   12ae8:	andeq	r2, r1, r4, ror #17
   12aec:	andeq	r2, r1, r4, ror #17
   12af0:	andeq	r2, r1, r4, ror #17
   12af4:	andeq	r2, r1, r4, ror #17
   12af8:	andeq	r2, r1, r4, ror #17
   12afc:	andeq	r2, r1, r4, ror #17
   12b00:	andeq	r2, r1, r4, ror #17
   12b04:	andeq	r2, r1, r4, ror #17
   12b08:	andeq	r2, r1, r4, lsl #16
   12b0c:	andeq	r2, r1, r4, lsl #25
   12b10:	andeq	r2, r1, r4, lsl #25
   12b14:	andeq	r2, r1, r8, ror #15
   12b18:	andeq	r2, r1, r4, lsl #25
   12b1c:	ldrdeq	r2, [r1], -r8
   12b20:	andeq	r2, r1, r4, lsl #25
   12b24:	andeq	r2, r1, ip, asr #16
   12b28:	andeq	r2, r1, r4, lsl #25
   12b2c:	andeq	r2, r1, r4, lsl #25
   12b30:	andeq	r2, r1, r4, lsl #25
   12b34:	ldrdeq	r2, [r1], -r8
   12b38:	ldrdeq	r2, [r1], -r8
   12b3c:	ldrdeq	r2, [r1], -r8
   12b40:	ldrdeq	r2, [r1], -r8
   12b44:	ldrdeq	r2, [r1], -r8
   12b48:	ldrdeq	r2, [r1], -r8
   12b4c:	ldrdeq	r2, [r1], -r8
   12b50:	ldrdeq	r2, [r1], -r8
   12b54:	ldrdeq	r2, [r1], -r8
   12b58:	ldrdeq	r2, [r1], -r8
   12b5c:	ldrdeq	r2, [r1], -r8
   12b60:	ldrdeq	r2, [r1], -r8
   12b64:	ldrdeq	r2, [r1], -r8
   12b68:	ldrdeq	r2, [r1], -r8
   12b6c:	ldrdeq	r2, [r1], -r8
   12b70:	ldrdeq	r2, [r1], -r8
   12b74:	andeq	r2, r1, r4, lsl #25
   12b78:	andeq	r2, r1, r4, lsl #25
   12b7c:	andeq	r2, r1, r4, lsl #25
   12b80:	andeq	r2, r1, r4, lsl #25
   12b84:	andeq	r2, r1, r4, lsr #16
   12b88:	andeq	r2, r1, r4, ror #17
   12b8c:	ldrdeq	r2, [r1], -r8
   12b90:	ldrdeq	r2, [r1], -r8
   12b94:	ldrdeq	r2, [r1], -r8
   12b98:	ldrdeq	r2, [r1], -r8
   12b9c:	ldrdeq	r2, [r1], -r8
   12ba0:	ldrdeq	r2, [r1], -r8
   12ba4:	ldrdeq	r2, [r1], -r8
   12ba8:	ldrdeq	r2, [r1], -r8
   12bac:	ldrdeq	r2, [r1], -r8
   12bb0:	ldrdeq	r2, [r1], -r8
   12bb4:	ldrdeq	r2, [r1], -r8
   12bb8:	ldrdeq	r2, [r1], -r8
   12bbc:	ldrdeq	r2, [r1], -r8
   12bc0:	ldrdeq	r2, [r1], -r8
   12bc4:	ldrdeq	r2, [r1], -r8
   12bc8:	ldrdeq	r2, [r1], -r8
   12bcc:	ldrdeq	r2, [r1], -r8
   12bd0:	ldrdeq	r2, [r1], -r8
   12bd4:	ldrdeq	r2, [r1], -r8
   12bd8:	ldrdeq	r2, [r1], -r8
   12bdc:	ldrdeq	r2, [r1], -r8
   12be0:	ldrdeq	r2, [r1], -r8
   12be4:	ldrdeq	r2, [r1], -r8
   12be8:	ldrdeq	r2, [r1], -r8
   12bec:	ldrdeq	r2, [r1], -r8
   12bf0:	ldrdeq	r2, [r1], -r8
   12bf4:	andeq	r2, r1, r4, lsl #25
   12bf8:	andeq	r2, r1, r4, lsr #15
   12bfc:	ldrdeq	r2, [r1], -r8
   12c00:	andeq	r2, r1, r4, lsl #25
   12c04:	ldrdeq	r2, [r1], -r8
   12c08:	andeq	r2, r1, r4, lsl #25
   12c0c:	ldrdeq	r2, [r1], -r8
   12c10:	ldrdeq	r2, [r1], -r8
   12c14:	ldrdeq	r2, [r1], -r8
   12c18:	ldrdeq	r2, [r1], -r8
   12c1c:	ldrdeq	r2, [r1], -r8
   12c20:	ldrdeq	r2, [r1], -r8
   12c24:	ldrdeq	r2, [r1], -r8
   12c28:	ldrdeq	r2, [r1], -r8
   12c2c:	ldrdeq	r2, [r1], -r8
   12c30:	ldrdeq	r2, [r1], -r8
   12c34:	ldrdeq	r2, [r1], -r8
   12c38:	ldrdeq	r2, [r1], -r8
   12c3c:	ldrdeq	r2, [r1], -r8
   12c40:	ldrdeq	r2, [r1], -r8
   12c44:	ldrdeq	r2, [r1], -r8
   12c48:	ldrdeq	r2, [r1], -r8
   12c4c:	ldrdeq	r2, [r1], -r8
   12c50:	ldrdeq	r2, [r1], -r8
   12c54:	ldrdeq	r2, [r1], -r8
   12c58:	ldrdeq	r2, [r1], -r8
   12c5c:	ldrdeq	r2, [r1], -r8
   12c60:	ldrdeq	r2, [r1], -r8
   12c64:	ldrdeq	r2, [r1], -r8
   12c68:	ldrdeq	r2, [r1], -r8
   12c6c:	ldrdeq	r2, [r1], -r8
   12c70:	ldrdeq	r2, [r1], -r8
   12c74:	andeq	r2, r1, r0, lsl #15
   12c78:	andeq	r2, r1, r4, lsl #25
   12c7c:	andeq	r2, r1, r0, lsl #15
   12c80:	andeq	r2, r1, r8, ror #15
   12c84:	mov	r3, #0
   12c88:	str	r3, [sp, #40]	; 0x28
   12c8c:	b	12364 <__assert_fail@plt+0x1570>
   12c90:	mov	r3, #0
   12c94:	str	r3, [sp, #40]	; 0x28
   12c98:	b	122fc <__assert_fail@plt+0x1508>
   12c9c:	mov	r3, #0
   12ca0:	str	r3, [sp, #40]	; 0x28
   12ca4:	b	12330 <__assert_fail@plt+0x153c>
   12ca8:	ldr	r3, [sp, #44]	; 0x2c
   12cac:	cmp	r3, #0
   12cb0:	beq	12248 <__assert_fail@plt+0x1454>
   12cb4:	ldr	r3, [sp, #52]	; 0x34
   12cb8:	mov	fp, r9
   12cbc:	str	r3, [sp, #60]	; 0x3c
   12cc0:	b	123c0 <__assert_fail@plt+0x15cc>
   12cc4:	ldr	r3, [sp, #44]	; 0x2c
   12cc8:	cmp	r3, #0
   12ccc:	bne	13100 <__assert_fail@plt+0x230c>
   12cd0:	str	r3, [sp, #40]	; 0x28
   12cd4:	cmp	sl, #0
   12cd8:	ldr	r3, [sp, #84]	; 0x54
   12cdc:	clz	r3, r3
   12ce0:	lsr	r3, r3, #5
   12ce4:	moveq	r3, #0
   12ce8:	cmp	r3, #0
   12cec:	strne	sl, [sp, #84]	; 0x54
   12cf0:	movne	sl, #0
   12cf4:	bne	12d24 <__assert_fail@plt+0x1f30>
   12cf8:	cmp	sl, r4
   12cfc:	movhi	r3, #39	; 0x27
   12d00:	strbhi	r3, [r9, r4]
   12d04:	add	r3, r4, #1
   12d08:	cmp	sl, r3
   12d0c:	movhi	r2, #92	; 0x5c
   12d10:	strbhi	r2, [r9, r3]
   12d14:	add	r3, r4, #2
   12d18:	cmp	sl, r3
   12d1c:	movhi	r2, #39	; 0x27
   12d20:	strbhi	r2, [r9, r3]
   12d24:	mov	r3, #0
   12d28:	add	r4, r4, #3
   12d2c:	str	r6, [sp, #80]	; 0x50
   12d30:	mov	fp, r3
   12d34:	mov	r5, #39	; 0x27
   12d38:	b	12204 <__assert_fail@plt+0x1410>
   12d3c:	ldr	r3, [sp, #44]	; 0x2c
   12d40:	cmp	r3, #0
   12d44:	bne	13100 <__assert_fail@plt+0x230c>
   12d48:	mov	r6, #0
   12d4c:	mov	r5, #63	; 0x3f
   12d50:	str	r3, [sp, #40]	; 0x28
   12d54:	mov	r3, fp
   12d58:	b	12204 <__assert_fail@plt+0x1410>
   12d5c:	mov	r2, #0
   12d60:	mov	r3, #0
   12d64:	cmn	r8, #1
   12d68:	strd	r2, [sp, #128]	; 0x80
   12d6c:	bne	12d7c <__assert_fail@plt+0x1f88>
   12d70:	ldr	r0, [sp, #28]
   12d74:	bl	10d34 <strlen@plt>
   12d78:	mov	r8, r0
   12d7c:	str	r9, [sp, #100]	; 0x64
   12d80:	mov	r3, #0
   12d84:	strd	sl, [sp, #104]	; 0x68
   12d88:	ldr	sl, [sp, #28]
   12d8c:	str	r5, [sp, #112]	; 0x70
   12d90:	mov	r5, r3
   12d94:	ldr	r9, [sp, #68]	; 0x44
   12d98:	str	r4, [sp, #116]	; 0x74
   12d9c:	add	r4, r7, r5
   12da0:	add	r3, sp, #128	; 0x80
   12da4:	add	fp, sl, r4
   12da8:	sub	r2, r8, r4
   12dac:	mov	r1, fp
   12db0:	add	r0, sp, #124	; 0x7c
   12db4:	bl	16a20 <__assert_fail@plt+0x5c2c>
   12db8:	subs	r1, r0, #0
   12dbc:	beq	12dfc <__assert_fail@plt+0x2008>
   12dc0:	cmn	r1, #1
   12dc4:	beq	13154 <__assert_fail@plt+0x2360>
   12dc8:	cmn	r1, #2
   12dcc:	beq	13174 <__assert_fail@plt+0x2380>
   12dd0:	cmp	r9, #0
   12dd4:	bne	12e2c <__assert_fail@plt+0x2038>
   12dd8:	ldr	r0, [sp, #124]	; 0x7c
   12ddc:	add	r5, r5, r1
   12de0:	bl	10c80 <iswprint@plt>
   12de4:	cmp	r0, #0
   12de8:	add	r0, sp, #128	; 0x80
   12dec:	moveq	r6, #0
   12df0:	bl	10c2c <mbsinit@plt>
   12df4:	cmp	r0, #0
   12df8:	beq	12d9c <__assert_fail@plt+0x1fa8>
   12dfc:	ldr	r3, [sp, #60]	; 0x3c
   12e00:	add	r9, sp, #100	; 0x64
   12e04:	mov	r0, r5
   12e08:	ldm	r9, {r9, sl, fp}
   12e0c:	eor	r2, r6, #1
   12e10:	ldr	r5, [sp, #112]	; 0x70
   12e14:	and	r2, r2, r3
   12e18:	uxtb	r2, r2
   12e1c:	ldr	r4, [sp, #116]	; 0x74
   12e20:	cmp	r0, #1
   12e24:	bhi	12940 <__assert_fail@plt+0x1b4c>
   12e28:	b	12930 <__assert_fail@plt+0x1b3c>
   12e2c:	cmp	r1, #1
   12e30:	beq	12dd8 <__assert_fail@plt+0x1fe4>
   12e34:	add	r2, r4, #1
   12e38:	add	r3, sl, r1
   12e3c:	add	r2, sl, r2
   12e40:	add	r4, r3, r4
   12e44:	ldrb	r3, [r2], #1
   12e48:	sub	r3, r3, #91	; 0x5b
   12e4c:	cmp	r3, #33	; 0x21
   12e50:	ldrls	pc, [pc, r3, lsl #2]
   12e54:	b	12ee0 <__assert_fail@plt+0x20ec>
   12e58:	andeq	r2, r1, ip, ror #29
   12e5c:	andeq	r2, r1, ip, ror #29
   12e60:	andeq	r2, r1, r0, ror #29
   12e64:	andeq	r2, r1, ip, ror #29
   12e68:	andeq	r2, r1, r0, ror #29
   12e6c:	andeq	r2, r1, ip, ror #29
   12e70:	andeq	r2, r1, r0, ror #29
   12e74:	andeq	r2, r1, r0, ror #29
   12e78:	andeq	r2, r1, r0, ror #29
   12e7c:	andeq	r2, r1, r0, ror #29
   12e80:	andeq	r2, r1, r0, ror #29
   12e84:	andeq	r2, r1, r0, ror #29
   12e88:	andeq	r2, r1, r0, ror #29
   12e8c:	andeq	r2, r1, r0, ror #29
   12e90:	andeq	r2, r1, r0, ror #29
   12e94:	andeq	r2, r1, r0, ror #29
   12e98:	andeq	r2, r1, r0, ror #29
   12e9c:	andeq	r2, r1, r0, ror #29
   12ea0:	andeq	r2, r1, r0, ror #29
   12ea4:	andeq	r2, r1, r0, ror #29
   12ea8:	andeq	r2, r1, r0, ror #29
   12eac:	andeq	r2, r1, r0, ror #29
   12eb0:	andeq	r2, r1, r0, ror #29
   12eb4:	andeq	r2, r1, r0, ror #29
   12eb8:	andeq	r2, r1, r0, ror #29
   12ebc:	andeq	r2, r1, r0, ror #29
   12ec0:	andeq	r2, r1, r0, ror #29
   12ec4:	andeq	r2, r1, r0, ror #29
   12ec8:	andeq	r2, r1, r0, ror #29
   12ecc:	andeq	r2, r1, r0, ror #29
   12ed0:	andeq	r2, r1, r0, ror #29
   12ed4:	andeq	r2, r1, r0, ror #29
   12ed8:	andeq	r2, r1, r0, ror #29
   12edc:	andeq	r2, r1, ip, ror #29
   12ee0:	cmp	r4, r2
   12ee4:	bne	12e44 <__assert_fail@plt+0x2050>
   12ee8:	b	12dd8 <__assert_fail@plt+0x1fe4>
   12eec:	mov	r3, #2
   12ef0:	ldr	fp, [sp, #100]	; 0x64
   12ef4:	str	r3, [sp, #176]	; 0xb0
   12ef8:	ldr	sl, [sp, #104]	; 0x68
   12efc:	b	123c0 <__assert_fail@plt+0x15cc>
   12f00:	ldr	r2, [sp, #52]	; 0x34
   12f04:	mov	fp, r9
   12f08:	ldr	r3, [sp, #60]	; 0x3c
   12f0c:	and	r3, r3, r2
   12f10:	str	r3, [sp, #60]	; 0x3c
   12f14:	b	123c0 <__assert_fail@plt+0x15cc>
   12f18:	cmp	sl, r4
   12f1c:	movhi	r2, fp
   12f20:	bhi	12298 <__assert_fail@plt+0x14a4>
   12f24:	mov	r2, r4
   12f28:	b	122a8 <__assert_fail@plt+0x14b4>
   12f2c:	mov	r6, r3
   12f30:	mov	r5, #63	; 0x3f
   12f34:	b	12368 <__assert_fail@plt+0x1574>
   12f38:	ldr	r8, [sp, #36]	; 0x24
   12f3c:	ldr	r6, [sp, #100]	; 0x64
   12f40:	b	12214 <__assert_fail@plt+0x1420>
   12f44:	mov	fp, r9
   12f48:	ldr	r8, [sp, #36]	; 0x24
   12f4c:	ldr	r3, [sp, #52]	; 0x34
   12f50:	str	r3, [sp, #60]	; 0x3c
   12f54:	b	123c0 <__assert_fail@plt+0x15cc>
   12f58:	ldr	r8, [sp, #36]	; 0x24
   12f5c:	ldr	r6, [sp, #100]	; 0x64
   12f60:	b	120ac <__assert_fail@plt+0x12b8>
   12f64:	mov	r3, #0
   12f68:	add	r4, r4, #4
   12f6c:	mov	fp, r2
   12f70:	mov	r6, r3
   12f74:	mov	r5, #48	; 0x30
   12f78:	b	12204 <__assert_fail@plt+0x1410>
   12f7c:	mov	r6, r3
   12f80:	b	12a00 <__assert_fail@plt+0x1c0c>
   12f84:	mov	r3, #1
   12f88:	movw	r2, #29332	; 0x7294
   12f8c:	movt	r2, #1
   12f90:	mov	r4, r3
   12f94:	mov	r9, sl
   12f98:	str	r3, [sp, #32]
   12f9c:	str	sl, [sp, #44]	; 0x2c
   12fa0:	str	r3, [sp, #48]	; 0x30
   12fa4:	str	sl, [sp, #52]	; 0x34
   12fa8:	str	r3, [sp, #56]	; 0x38
   12fac:	str	r3, [sp, #60]	; 0x3c
   12fb0:	str	sl, [sp, #64]	; 0x40
   12fb4:	str	sl, [sp, #68]	; 0x44
   12fb8:	str	r2, [sp, #72]	; 0x48
   12fbc:	str	sl, [sp, #80]	; 0x50
   12fc0:	str	sl, [sp, #84]	; 0x54
   12fc4:	str	sl, [sp, #88]	; 0x58
   12fc8:	b	11ab8 <__assert_fail@plt+0xcc4>
   12fcc:	mov	r3, #0
   12fd0:	mov	r5, #48	; 0x30
   12fd4:	mov	r6, r3
   12fd8:	b	12204 <__assert_fail@plt+0x1410>
   12fdc:	cmp	sl, r4
   12fe0:	mov	r5, #48	; 0x30
   12fe4:	movhi	r3, #48	; 0x30
   12fe8:	strbhi	r3, [r9, r4]
   12fec:	add	r3, r2, #2
   12ff0:	add	r4, r2, #3
   12ff4:	cmp	sl, r3
   12ff8:	movhi	r1, #48	; 0x30
   12ffc:	strbhi	r1, [r9, r3]
   13000:	mov	r3, #0
   13004:	b	122e0 <__assert_fail@plt+0x14ec>
   13008:	ldr	r3, [sp, #48]	; 0x30
   1300c:	str	r3, [sp, #40]	; 0x28
   13010:	b	128ec <__assert_fail@plt+0x1af8>
   13014:	ldr	r2, [sp, #28]
   13018:	ldrb	r2, [r2, r3]
   1301c:	sub	r1, r2, #33	; 0x21
   13020:	cmp	r1, #29
   13024:	ldrls	pc, [pc, r1, lsl #2]
   13028:	b	12364 <__assert_fail@plt+0x1570>
   1302c:	andeq	r3, r1, r4, lsr #1
   13030:	andeq	r2, r1, r4, ror #6
   13034:	andeq	r2, r1, r4, ror #6
   13038:	andeq	r2, r1, r4, ror #6
   1303c:	andeq	r2, r1, r4, ror #6
   13040:	andeq	r2, r1, r4, ror #6
   13044:	andeq	r3, r1, r4, lsr #1
   13048:	andeq	r3, r1, r4, lsr #1
   1304c:	andeq	r3, r1, r4, lsr #1
   13050:	andeq	r2, r1, r4, ror #6
   13054:	andeq	r2, r1, r4, ror #6
   13058:	andeq	r2, r1, r4, ror #6
   1305c:	andeq	r3, r1, r4, lsr #1
   13060:	andeq	r2, r1, r4, ror #6
   13064:	andeq	r3, r1, r4, lsr #1
   13068:	andeq	r2, r1, r4, ror #6
   1306c:	andeq	r2, r1, r4, ror #6
   13070:	andeq	r2, r1, r4, ror #6
   13074:	andeq	r2, r1, r4, ror #6
   13078:	andeq	r2, r1, r4, ror #6
   1307c:	andeq	r2, r1, r4, ror #6
   13080:	andeq	r2, r1, r4, ror #6
   13084:	andeq	r2, r1, r4, ror #6
   13088:	andeq	r2, r1, r4, ror #6
   1308c:	andeq	r2, r1, r4, ror #6
   13090:	andeq	r2, r1, r4, ror #6
   13094:	andeq	r2, r1, r4, ror #6
   13098:	andeq	r3, r1, r4, lsr #1
   1309c:	andeq	r3, r1, r4, lsr #1
   130a0:	andeq	r3, r1, r4, lsr #1
   130a4:	ldr	r1, [sp, #44]	; 0x2c
   130a8:	cmp	r1, #0
   130ac:	bne	1330c <__assert_fail@plt+0x2518>
   130b0:	cmp	sl, r4
   130b4:	mov	r7, r3
   130b8:	movhi	r1, #63	; 0x3f
   130bc:	mov	r5, r2
   130c0:	mov	r3, fp
   130c4:	strbhi	r1, [r9, r4]
   130c8:	add	r1, r4, #1
   130cc:	cmp	sl, r1
   130d0:	movhi	r0, #34	; 0x22
   130d4:	strbhi	r0, [r9, r1]
   130d8:	add	r1, r4, #2
   130dc:	cmp	sl, r1
   130e0:	movhi	r0, #34	; 0x22
   130e4:	strbhi	r0, [r9, r1]
   130e8:	add	r1, r4, #3
   130ec:	add	r4, r4, #4
   130f0:	cmp	sl, r1
   130f4:	movhi	r0, #63	; 0x3f
   130f8:	strbhi	r0, [r9, r1]
   130fc:	b	122e0 <__assert_fail@plt+0x14ec>
   13100:	mov	fp, r9
   13104:	b	123c0 <__assert_fail@plt+0x15cc>
   13108:	ldr	r3, [sp, #188]	; 0xbc
   1310c:	ldrb	r3, [r3]
   13110:	cmp	r3, #0
   13114:	beq	11a50 <__assert_fail@plt+0xc5c>
   13118:	ldr	r2, [sp, #188]	; 0xbc
   1311c:	cmp	sl, r4
   13120:	bls	13140 <__assert_fail@plt+0x234c>
   13124:	strb	r3, [fp, r4]
   13128:	add	r4, r4, #1
   1312c:	ldrb	r3, [r2, #1]!
   13130:	cmp	r3, #0
   13134:	beq	11a50 <__assert_fail@plt+0xc5c>
   13138:	cmp	sl, r4
   1313c:	bhi	13124 <__assert_fail@plt+0x2330>
   13140:	ldrb	r3, [r2, #1]!
   13144:	add	r4, r4, #1
   13148:	cmp	r3, #0
   1314c:	bne	1311c <__assert_fail@plt+0x2328>
   13150:	b	11a50 <__assert_fail@plt+0xc5c>
   13154:	add	r9, sp, #100	; 0x64
   13158:	mov	r0, r5
   1315c:	ldr	r2, [sp, #60]	; 0x3c
   13160:	mov	r6, #0
   13164:	ldm	r9, {r9, sl, fp}
   13168:	ldr	r5, [sp, #112]	; 0x70
   1316c:	ldr	r4, [sp, #116]	; 0x74
   13170:	b	12e20 <__assert_fail@plt+0x202c>
   13174:	cmp	r4, r8
   13178:	add	r9, sp, #100	; 0x64
   1317c:	mov	r1, r4
   13180:	mov	r2, fp
   13184:	ldm	r9, {r9, sl, fp}
   13188:	mov	r3, r5
   1318c:	mov	r0, r5
   13190:	ldr	r5, [sp, #112]	; 0x70
   13194:	ldr	r4, [sp, #116]	; 0x74
   13198:	bcs	131cc <__assert_fail@plt+0x23d8>
   1319c:	ldrb	r6, [r2]
   131a0:	cmp	r6, #0
   131a4:	bne	131b8 <__assert_fail@plt+0x23c4>
   131a8:	b	13304 <__assert_fail@plt+0x2510>
   131ac:	ldrb	r6, [r2, #1]!
   131b0:	cmp	r6, #0
   131b4:	beq	1329c <__assert_fail@plt+0x24a8>
   131b8:	add	r3, r3, #1
   131bc:	add	r1, r7, r3
   131c0:	cmp	r8, r1
   131c4:	bhi	131ac <__assert_fail@plt+0x23b8>
   131c8:	mov	r0, r3
   131cc:	mov	r6, #0
   131d0:	ldr	r2, [sp, #60]	; 0x3c
   131d4:	b	12e20 <__assert_fail@plt+0x202c>
   131d8:	mov	r3, #1
   131dc:	mov	r4, #0
   131e0:	mov	r9, r4
   131e4:	str	r3, [sp, #32]
   131e8:	str	r3, [sp, #44]	; 0x2c
   131ec:	str	r3, [sp, #48]	; 0x30
   131f0:	str	r4, [sp, #52]	; 0x34
   131f4:	str	r3, [sp, #56]	; 0x38
   131f8:	str	r3, [sp, #60]	; 0x3c
   131fc:	str	r3, [sp, #88]	; 0x58
   13200:	movw	r3, #29332	; 0x7294
   13204:	movt	r3, #1
   13208:	str	r4, [sp, #64]	; 0x40
   1320c:	str	r4, [sp, #68]	; 0x44
   13210:	str	r3, [sp, #72]	; 0x48
   13214:	str	r4, [sp, #80]	; 0x50
   13218:	str	r4, [sp, #84]	; 0x54
   1321c:	b	11ab8 <__assert_fail@plt+0xcc4>
   13220:	mov	fp, r9
   13224:	b	123d4 <__assert_fail@plt+0x15e0>
   13228:	ldr	r3, [sp, #48]	; 0x30
   1322c:	b	12d48 <__assert_fail@plt+0x1f54>
   13230:	mov	r2, r3
   13234:	ldr	r3, [sp, #72]	; 0x48
   13238:	cmp	r3, #0
   1323c:	moveq	r2, #0
   13240:	andne	r2, r2, #1
   13244:	cmp	r2, #0
   13248:	beq	13278 <__assert_fail@plt+0x2484>
   1324c:	mov	r2, r3
   13250:	ldrb	r3, [r3]
   13254:	cmp	r3, #0
   13258:	beq	13278 <__assert_fail@plt+0x2484>
   1325c:	cmp	sl, r4
   13260:	bls	13288 <__assert_fail@plt+0x2494>
   13264:	strb	r3, [fp, r4]
   13268:	add	r4, r4, #1
   1326c:	ldrb	r3, [r2, #1]!
   13270:	cmp	r3, #0
   13274:	bne	1325c <__assert_fail@plt+0x2468>
   13278:	cmp	sl, r4
   1327c:	movhi	r3, #0
   13280:	strbhi	r3, [fp, r4]
   13284:	b	12410 <__assert_fail@plt+0x161c>
   13288:	ldrb	r3, [r2, #1]!
   1328c:	add	r4, r4, #1
   13290:	cmp	r3, #0
   13294:	bne	1325c <__assert_fail@plt+0x2468>
   13298:	b	13278 <__assert_fail@plt+0x2484>
   1329c:	mov	r0, r3
   132a0:	ldr	r2, [sp, #60]	; 0x3c
   132a4:	b	12e20 <__assert_fail@plt+0x202c>
   132a8:	mov	ip, #5
   132ac:	mov	r3, r8
   132b0:	ldr	r1, [sp, #84]	; 0x54
   132b4:	str	ip, [sp]
   132b8:	ldr	r2, [sp, #180]	; 0xb4
   132bc:	ldr	ip, [sp, #188]	; 0xbc
   132c0:	ldr	r0, [sp, #184]	; 0xb8
   132c4:	str	r2, [sp, #4]
   132c8:	ldr	r2, [sp, #28]
   132cc:	str	ip, [sp, #12]
   132d0:	ldr	ip, [sp, #192]	; 0xc0
   132d4:	str	r0, [sp, #8]
   132d8:	mov	r0, fp
   132dc:	str	ip, [sp, #16]
   132e0:	bl	11994 <__assert_fail@plt+0xba0>
   132e4:	mov	r4, r0
   132e8:	b	12410 <__assert_fail@plt+0x161c>
   132ec:	mov	r6, r3
   132f0:	str	r3, [sp, #40]	; 0x28
   132f4:	b	12380 <__assert_fail@plt+0x158c>
   132f8:	mov	r3, #2
   132fc:	str	r3, [sp, #176]	; 0xb0
   13300:	b	123c0 <__assert_fail@plt+0x15cc>
   13304:	ldr	r2, [sp, #60]	; 0x3c
   13308:	b	12e20 <__assert_fail@plt+0x202c>
   1330c:	mov	r3, #5
   13310:	mov	fp, r9
   13314:	str	r3, [sp, #176]	; 0xb0
   13318:	b	123d4 <__assert_fail@plt+0x15e0>
   1331c:	mov	r1, #1
   13320:	mov	r9, #0
   13324:	mov	r3, r9
   13328:	mov	r2, r9
   1332c:	str	r1, [sp, #32]
   13330:	str	sl, [sp, #84]	; 0x54
   13334:	b	1215c <__assert_fail@plt+0x1368>
   13338:	mov	r3, #0
   1333c:	mov	r2, #1
   13340:	mov	r9, r3
   13344:	mov	r4, r3
   13348:	str	r2, [sp, #32]
   1334c:	strd	r2, [sp, #44]	; 0x2c
   13350:	strd	r2, [sp, #56]	; 0x38
   13354:	str	r3, [sp, #80]	; 0x50
   13358:	str	r3, [sp, #84]	; 0x54
   1335c:	str	r3, [sp, #88]	; 0x58
   13360:	movw	r3, #29352	; 0x72a8
   13364:	movt	r3, #1
   13368:	str	r2, [sp, #52]	; 0x34
   1336c:	str	r2, [sp, #64]	; 0x40
   13370:	str	r2, [sp, #68]	; 0x44
   13374:	str	r3, [sp, #72]	; 0x48
   13378:	b	11ab8 <__assert_fail@plt+0xcc4>
   1337c:	bl	10de8 <abort@plt>
   13380:	strd	r4, [sp, #-36]!	; 0xffffffdc
   13384:	mov	r4, r0
   13388:	mov	r5, r3
   1338c:	strd	r6, [sp, #8]
   13390:	movw	r7, #32992	; 0x80e0
   13394:	movt	r7, #2
   13398:	strd	r8, [sp, #16]
   1339c:	strd	sl, [sp, #24]
   133a0:	mov	sl, r1
   133a4:	mov	fp, r2
   133a8:	str	lr, [sp, #32]
   133ac:	sub	sp, sp, #60	; 0x3c
   133b0:	bl	10d4c <__errno_location@plt>
   133b4:	mov	r8, r0
   133b8:	cmn	r4, #-2147483647	; 0x80000001
   133bc:	ldr	r6, [r7]
   133c0:	movne	r0, #0
   133c4:	moveq	r0, #1
   133c8:	ldr	r3, [r8]
   133cc:	orrs	r0, r0, r4, lsr #31
   133d0:	str	r3, [sp, #28]
   133d4:	bne	13564 <__assert_fail@plt+0x2770>
   133d8:	ldr	r3, [r7, #4]
   133dc:	cmp	r3, r4
   133e0:	bgt	13440 <__assert_fail@plt+0x264c>
   133e4:	add	r1, r7, #8
   133e8:	sub	r2, r4, r3
   133ec:	str	r3, [sp, #52]	; 0x34
   133f0:	cmp	r6, r1
   133f4:	add	r2, r2, #1
   133f8:	beq	1353c <__assert_fail@plt+0x2748>
   133fc:	mov	r1, #8
   13400:	mov	r0, r6
   13404:	mvn	r3, #-2147483648	; 0x80000000
   13408:	str	r1, [sp]
   1340c:	add	r1, sp, #52	; 0x34
   13410:	bl	15ca0 <__assert_fail@plt+0x4eac>
   13414:	mov	r6, r0
   13418:	str	r0, [r7]
   1341c:	ldr	r0, [r7, #4]
   13420:	mov	r1, #0
   13424:	ldr	r2, [sp, #52]	; 0x34
   13428:	sub	r2, r2, r0
   1342c:	add	r0, r6, r0, lsl #3
   13430:	lsl	r2, r2, #3
   13434:	bl	10d64 <memset@plt>
   13438:	ldr	r3, [sp, #52]	; 0x34
   1343c:	str	r3, [r7, #4]
   13440:	ldr	r1, [r5, #4]
   13444:	add	r0, r6, r4, lsl #3
   13448:	add	ip, r5, #8
   1344c:	mov	r3, fp
   13450:	mov	r2, sl
   13454:	ldr	r7, [r0, #4]
   13458:	str	r0, [sp, #36]	; 0x24
   1345c:	str	ip, [sp, #40]	; 0x28
   13460:	orr	r0, r1, #1
   13464:	ldr	r9, [r6, r4, lsl #3]
   13468:	str	ip, [sp, #8]
   1346c:	ldr	lr, [r5, #44]	; 0x2c
   13470:	str	r0, [sp, #4]
   13474:	ldr	ip, [r5]
   13478:	mov	r1, r9
   1347c:	str	ip, [sp, #32]
   13480:	ldr	ip, [r5, #40]	; 0x28
   13484:	str	ip, [sp, #12]
   13488:	ldr	ip, [sp, #32]
   1348c:	str	lr, [sp, #16]
   13490:	str	r0, [sp, #44]	; 0x2c
   13494:	mov	r0, r7
   13498:	str	ip, [sp]
   1349c:	bl	11994 <__assert_fail@plt+0xba0>
   134a0:	cmp	r9, r0
   134a4:	bhi	13514 <__assert_fail@plt+0x2720>
   134a8:	add	r9, r0, #1
   134ac:	movw	r3, #33100	; 0x814c
   134b0:	movt	r3, #2
   134b4:	cmp	r7, r3
   134b8:	str	r9, [r6, r4, lsl #3]
   134bc:	beq	134c8 <__assert_fail@plt+0x26d4>
   134c0:	mov	r0, r7
   134c4:	bl	168a4 <__assert_fail@plt+0x5ab0>
   134c8:	mov	r0, r9
   134cc:	bl	159fc <__assert_fail@plt+0x4c08>
   134d0:	ldr	ip, [r5]
   134d4:	mov	r3, fp
   134d8:	mov	r2, sl
   134dc:	mov	r1, r9
   134e0:	mov	r7, r0
   134e4:	ldr	lr, [sp, #36]	; 0x24
   134e8:	ldr	r4, [r5, #40]	; 0x28
   134ec:	str	r0, [lr, #4]
   134f0:	ldr	lr, [r5, #44]	; 0x2c
   134f4:	str	ip, [sp]
   134f8:	ldr	ip, [sp, #44]	; 0x2c
   134fc:	str	ip, [sp, #4]
   13500:	ldr	ip, [sp, #40]	; 0x28
   13504:	str	r4, [sp, #12]
   13508:	str	lr, [sp, #16]
   1350c:	str	ip, [sp, #8]
   13510:	bl	11994 <__assert_fail@plt+0xba0>
   13514:	ldr	r3, [sp, #28]
   13518:	mov	r0, r7
   1351c:	str	r3, [r8]
   13520:	add	sp, sp, #60	; 0x3c
   13524:	ldrd	r4, [sp]
   13528:	ldrd	r6, [sp, #8]
   1352c:	ldrd	r8, [sp, #16]
   13530:	ldrd	sl, [sp, #24]
   13534:	add	sp, sp, #32
   13538:	pop	{pc}		; (ldr pc, [sp], #4)
   1353c:	mov	r1, #8
   13540:	mvn	r3, #-2147483648	; 0x80000000
   13544:	str	r1, [sp]
   13548:	add	r1, sp, #52	; 0x34
   1354c:	bl	15ca0 <__assert_fail@plt+0x4eac>
   13550:	ldrd	r2, [r7, #8]
   13554:	mov	r6, r0
   13558:	str	r0, [r7]
   1355c:	strd	r2, [r0]
   13560:	b	1341c <__assert_fail@plt+0x2628>
   13564:	bl	10de8 <abort@plt>
   13568:	strd	r4, [sp, #-16]!
   1356c:	mov	r5, r0
   13570:	str	r6, [sp, #8]
   13574:	str	lr, [sp, #12]
   13578:	bl	10d4c <__errno_location@plt>
   1357c:	mov	r4, r0
   13580:	cmp	r5, #0
   13584:	ldr	r0, [pc, #32]	; 135ac <__assert_fail@plt+0x27b8>
   13588:	mov	r1, #48	; 0x30
   1358c:	movne	r0, r5
   13590:	ldr	r6, [r4]
   13594:	bl	15e40 <__assert_fail@plt+0x504c>
   13598:	str	r6, [r4]
   1359c:	ldrd	r4, [sp]
   135a0:	ldr	r6, [sp, #8]
   135a4:	add	sp, sp, #12
   135a8:	pop	{pc}		; (ldr pc, [sp], #4)
   135ac:	andeq	r8, r2, ip, asr #4
   135b0:	ldr	r3, [pc, #12]	; 135c4 <__assert_fail@plt+0x27d0>
   135b4:	cmp	r0, #0
   135b8:	moveq	r0, r3
   135bc:	ldr	r0, [r0]
   135c0:	bx	lr
   135c4:	andeq	r8, r2, ip, asr #4
   135c8:	ldr	r3, [pc, #12]	; 135dc <__assert_fail@plt+0x27e8>
   135cc:	cmp	r0, #0
   135d0:	moveq	r0, r3
   135d4:	str	r1, [r0]
   135d8:	bx	lr
   135dc:	andeq	r8, r2, ip, asr #4
   135e0:	ldr	r3, [pc, #52]	; 1361c <__assert_fail@plt+0x2828>
   135e4:	cmp	r0, #0
   135e8:	push	{lr}		; (str lr, [sp, #-4]!)
   135ec:	lsr	lr, r1, #5
   135f0:	and	r1, r1, #31
   135f4:	moveq	r0, r3
   135f8:	add	r3, r0, #8
   135fc:	ldr	ip, [r3, lr, lsl #2]
   13600:	lsr	r0, ip, r1
   13604:	eor	r2, r2, r0
   13608:	and	r0, r0, #1
   1360c:	and	r2, r2, #1
   13610:	eor	r1, ip, r2, lsl r1
   13614:	str	r1, [r3, lr, lsl #2]
   13618:	pop	{pc}		; (ldr pc, [sp], #4)
   1361c:	andeq	r8, r2, ip, asr #4
   13620:	ldr	r3, [pc, #16]	; 13638 <__assert_fail@plt+0x2844>
   13624:	cmp	r0, #0
   13628:	movne	r3, r0
   1362c:	ldr	r0, [r3, #4]
   13630:	str	r1, [r3, #4]
   13634:	bx	lr
   13638:	andeq	r8, r2, ip, asr #4
   1363c:	ldr	r3, [pc, #48]	; 13674 <__assert_fail@plt+0x2880>
   13640:	cmp	r0, #0
   13644:	mov	ip, #10
   13648:	moveq	r0, r3
   1364c:	cmp	r2, #0
   13650:	cmpne	r1, #0
   13654:	str	ip, [r0]
   13658:	beq	13668 <__assert_fail@plt+0x2874>
   1365c:	str	r1, [r0, #40]	; 0x28
   13660:	str	r2, [r0, #44]	; 0x2c
   13664:	bx	lr
   13668:	str	r4, [sp, #-8]!
   1366c:	str	lr, [sp, #4]
   13670:	bl	10de8 <abort@plt>
   13674:	andeq	r8, r2, ip, asr #4
   13678:	strd	r4, [sp, #-28]!	; 0xffffffe4
   1367c:	strd	r6, [sp, #8]
   13680:	mov	r7, r0
   13684:	mov	r6, r1
   13688:	strd	r8, [sp, #16]
   1368c:	mov	r8, r2
   13690:	mov	r9, r3
   13694:	str	lr, [sp, #24]
   13698:	sub	sp, sp, #28
   1369c:	ldr	r4, [sp, #56]	; 0x38
   136a0:	ldr	ip, [pc, #104]	; 13710 <__assert_fail@plt+0x291c>
   136a4:	cmp	r4, #0
   136a8:	moveq	r4, ip
   136ac:	bl	10d4c <__errno_location@plt>
   136b0:	ldr	ip, [r4, #44]	; 0x2c
   136b4:	mov	r5, r0
   136b8:	mov	r1, r6
   136bc:	add	lr, r4, #8
   136c0:	mov	r3, r9
   136c4:	ldr	r6, [r5]
   136c8:	mov	r2, r8
   136cc:	mov	r0, r7
   136d0:	str	ip, [sp, #16]
   136d4:	ldr	ip, [r4, #40]	; 0x28
   136d8:	str	lr, [sp, #8]
   136dc:	str	ip, [sp, #12]
   136e0:	ldr	ip, [r4, #4]
   136e4:	str	ip, [sp, #4]
   136e8:	ldr	ip, [r4]
   136ec:	str	ip, [sp]
   136f0:	bl	11994 <__assert_fail@plt+0xba0>
   136f4:	str	r6, [r5]
   136f8:	add	sp, sp, #28
   136fc:	ldrd	r4, [sp]
   13700:	ldrd	r6, [sp, #8]
   13704:	ldrd	r8, [sp, #16]
   13708:	add	sp, sp, #24
   1370c:	pop	{pc}		; (ldr pc, [sp], #4)
   13710:	andeq	r8, r2, ip, asr #4
   13714:	strd	r4, [sp, #-36]!	; 0xffffffdc
   13718:	cmp	r2, #0
   1371c:	ldr	r4, [pc, #192]	; 137e4 <__assert_fail@plt+0x29f0>
   13720:	movne	r4, r2
   13724:	strd	r6, [sp, #8]
   13728:	strd	r8, [sp, #16]
   1372c:	mov	r9, r1
   13730:	mov	r8, r0
   13734:	strd	sl, [sp, #24]
   13738:	str	lr, [sp, #32]
   1373c:	sub	sp, sp, #36	; 0x24
   13740:	bl	10d4c <__errno_location@plt>
   13744:	ldr	r5, [r4, #4]
   13748:	mov	r6, r0
   1374c:	add	r7, r4, #8
   13750:	mov	r1, #0
   13754:	mov	r3, r9
   13758:	ldr	ip, [r4, #44]	; 0x2c
   1375c:	mov	r2, r8
   13760:	mov	r0, r1
   13764:	ldr	sl, [r6]
   13768:	orr	r5, r5, #1
   1376c:	str	ip, [sp, #16]
   13770:	ldr	ip, [r4, #40]	; 0x28
   13774:	stmib	sp, {r5, r7, ip}
   13778:	ldr	ip, [r4]
   1377c:	str	ip, [sp]
   13780:	bl	11994 <__assert_fail@plt+0xba0>
   13784:	add	r1, r0, #1
   13788:	mov	r0, r1
   1378c:	str	r1, [sp, #28]
   13790:	bl	159fc <__assert_fail@plt+0x4c08>
   13794:	ldr	ip, [r4, #44]	; 0x2c
   13798:	mov	fp, r0
   1379c:	mov	r3, r9
   137a0:	mov	r2, r8
   137a4:	ldr	r1, [sp, #28]
   137a8:	str	ip, [sp, #16]
   137ac:	ldr	ip, [r4, #40]	; 0x28
   137b0:	stmib	sp, {r5, r7, ip}
   137b4:	ldr	ip, [r4]
   137b8:	str	ip, [sp]
   137bc:	bl	11994 <__assert_fail@plt+0xba0>
   137c0:	mov	r0, fp
   137c4:	str	sl, [r6]
   137c8:	add	sp, sp, #36	; 0x24
   137cc:	ldrd	r4, [sp]
   137d0:	ldrd	r6, [sp, #8]
   137d4:	ldrd	r8, [sp, #16]
   137d8:	ldrd	sl, [sp, #24]
   137dc:	add	sp, sp, #32
   137e0:	pop	{pc}		; (ldr pc, [sp], #4)
   137e4:	andeq	r8, r2, ip, asr #4
   137e8:	strd	r4, [sp, #-36]!	; 0xffffffdc
   137ec:	cmp	r3, #0
   137f0:	ldr	r4, [pc, #220]	; 138d4 <__assert_fail@plt+0x2ae0>
   137f4:	movne	r4, r3
   137f8:	strd	r6, [sp, #8]
   137fc:	mov	r6, r2
   13800:	strd	r8, [sp, #16]
   13804:	mov	r9, r0
   13808:	strd	sl, [sp, #24]
   1380c:	mov	sl, r1
   13810:	str	lr, [sp, #32]
   13814:	sub	sp, sp, #44	; 0x2c
   13818:	bl	10d4c <__errno_location@plt>
   1381c:	ldr	r5, [r4, #4]
   13820:	mov	r7, r0
   13824:	mov	r1, #0
   13828:	add	r8, r4, #8
   1382c:	mov	r3, sl
   13830:	ldr	ip, [r4, #44]	; 0x2c
   13834:	mov	r2, r9
   13838:	mov	r0, r1
   1383c:	ldr	lr, [r7]
   13840:	cmp	r6, r1
   13844:	orreq	r5, r5, #1
   13848:	str	ip, [sp, #16]
   1384c:	ldr	ip, [r4, #40]	; 0x28
   13850:	stmib	sp, {r5, r8, ip}
   13854:	ldr	ip, [r4]
   13858:	str	lr, [sp, #28]
   1385c:	str	ip, [sp]
   13860:	bl	11994 <__assert_fail@plt+0xba0>
   13864:	add	r1, r0, #1
   13868:	mov	fp, r0
   1386c:	mov	r0, r1
   13870:	str	r1, [sp, #36]	; 0x24
   13874:	bl	159fc <__assert_fail@plt+0x4c08>
   13878:	ldr	ip, [r4, #44]	; 0x2c
   1387c:	mov	r3, sl
   13880:	mov	r2, r9
   13884:	ldr	r1, [sp, #36]	; 0x24
   13888:	str	ip, [sp, #16]
   1388c:	ldr	ip, [r4, #40]	; 0x28
   13890:	str	r0, [sp, #32]
   13894:	stmib	sp, {r5, r8, ip}
   13898:	ldr	ip, [r4]
   1389c:	str	ip, [sp]
   138a0:	bl	11994 <__assert_fail@plt+0xba0>
   138a4:	ldr	lr, [sp, #28]
   138a8:	cmp	r6, #0
   138ac:	ldr	r0, [sp, #32]
   138b0:	str	lr, [r7]
   138b4:	strne	fp, [r6]
   138b8:	add	sp, sp, #44	; 0x2c
   138bc:	ldrd	r4, [sp]
   138c0:	ldrd	r6, [sp, #8]
   138c4:	ldrd	r8, [sp, #16]
   138c8:	ldrd	sl, [sp, #24]
   138cc:	add	sp, sp, #32
   138d0:	pop	{pc}		; (ldr pc, [sp], #4)
   138d4:	andeq	r8, r2, ip, asr #4
   138d8:	strd	r4, [sp, #-24]!	; 0xffffffe8
   138dc:	movw	r5, #32992	; 0x80e0
   138e0:	movt	r5, #2
   138e4:	ldr	r3, [r5, #4]
   138e8:	strd	r6, [sp, #8]
   138ec:	str	r8, [sp, #16]
   138f0:	str	lr, [sp, #20]
   138f4:	ldr	r7, [r5]
   138f8:	cmp	r3, #1
   138fc:	ble	13920 <__assert_fail@plt+0x2b2c>
   13900:	mov	r4, #1
   13904:	add	r6, r7, #4
   13908:	ldr	r0, [r6, r4, lsl #3]
   1390c:	add	r4, r4, #1
   13910:	bl	168a4 <__assert_fail@plt+0x5ab0>
   13914:	ldr	r3, [r5, #4]
   13918:	cmp	r3, r4
   1391c:	bgt	13908 <__assert_fail@plt+0x2b14>
   13920:	ldr	r0, [r7, #4]
   13924:	movw	r4, #33100	; 0x814c
   13928:	movt	r4, #2
   1392c:	cmp	r0, r4
   13930:	beq	13944 <__assert_fail@plt+0x2b50>
   13934:	bl	168a4 <__assert_fail@plt+0x5ab0>
   13938:	mov	r3, #256	; 0x100
   1393c:	str	r3, [r5, #8]
   13940:	str	r4, [r5, #12]
   13944:	ldr	r4, [pc, #44]	; 13978 <__assert_fail@plt+0x2b84>
   13948:	cmp	r7, r4
   1394c:	beq	1395c <__assert_fail@plt+0x2b68>
   13950:	mov	r0, r7
   13954:	bl	168a4 <__assert_fail@plt+0x5ab0>
   13958:	str	r4, [r5]
   1395c:	mov	r3, #1
   13960:	ldrd	r6, [sp, #8]
   13964:	str	r3, [r5, #4]
   13968:	ldrd	r4, [sp]
   1396c:	ldr	r8, [sp, #16]
   13970:	add	sp, sp, #20
   13974:	pop	{pc}		; (ldr pc, [sp], #4)
   13978:	andeq	r8, r2, r8, ror #1
   1397c:	ldr	r3, [pc, #4]	; 13988 <__assert_fail@plt+0x2b94>
   13980:	mvn	r2, #0
   13984:	b	13380 <__assert_fail@plt+0x258c>
   13988:	andeq	r8, r2, ip, asr #4
   1398c:	ldr	r3, [pc]	; 13994 <__assert_fail@plt+0x2ba0>
   13990:	b	13380 <__assert_fail@plt+0x258c>
   13994:	andeq	r8, r2, ip, asr #4
   13998:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1399c:	movw	r4, #32992	; 0x80e0
   139a0:	movt	r4, #2
   139a4:	strd	r6, [sp, #8]
   139a8:	strd	r8, [sp, #16]
   139ac:	strd	sl, [sp, #24]
   139b0:	mov	sl, r0
   139b4:	str	lr, [sp, #32]
   139b8:	sub	sp, sp, #44	; 0x2c
   139bc:	bl	10d4c <__errno_location@plt>
   139c0:	ldr	r3, [r0]
   139c4:	mov	r8, r0
   139c8:	ldr	r2, [r4, #4]
   139cc:	ldr	r5, [r4]
   139d0:	str	r3, [sp, #28]
   139d4:	cmp	r2, #0
   139d8:	bgt	13a34 <__assert_fail@plt+0x2c40>
   139dc:	add	r3, r4, #8
   139e0:	str	r2, [sp, #36]	; 0x24
   139e4:	rsb	r2, r2, #1
   139e8:	cmp	r5, r3
   139ec:	beq	13b00 <__assert_fail@plt+0x2d0c>
   139f0:	mov	r1, #8
   139f4:	mov	r0, r5
   139f8:	mvn	r3, #-2147483648	; 0x80000000
   139fc:	str	r1, [sp]
   13a00:	add	r1, sp, #36	; 0x24
   13a04:	bl	15ca0 <__assert_fail@plt+0x4eac>
   13a08:	mov	r5, r0
   13a0c:	str	r0, [r4]
   13a10:	ldr	r0, [r4, #4]
   13a14:	mov	r1, #0
   13a18:	ldr	r2, [sp, #36]	; 0x24
   13a1c:	sub	r2, r2, r0
   13a20:	add	r0, r5, r0, lsl #3
   13a24:	lsl	r2, r2, #3
   13a28:	bl	10d64 <memset@plt>
   13a2c:	ldr	r3, [sp, #36]	; 0x24
   13a30:	str	r3, [r4, #4]
   13a34:	movw	r4, #33100	; 0x814c
   13a38:	movt	r4, #2
   13a3c:	ldr	r9, [r5]
   13a40:	add	fp, r4, #264	; 0x108
   13a44:	mvn	r3, #0
   13a48:	ldr	r7, [r4, #260]	; 0x104
   13a4c:	mov	r2, sl
   13a50:	ldr	r6, [r5, #4]
   13a54:	str	fp, [sp, #8]
   13a58:	mov	r1, r9
   13a5c:	ldr	ip, [r4, #256]	; 0x100
   13a60:	orr	r7, r7, #1
   13a64:	ldr	lr, [r4, #300]	; 0x12c
   13a68:	mov	r0, r6
   13a6c:	str	ip, [sp]
   13a70:	str	r7, [sp, #4]
   13a74:	str	lr, [sp, #16]
   13a78:	ldr	ip, [r4, #296]	; 0x128
   13a7c:	str	ip, [sp, #12]
   13a80:	bl	11994 <__assert_fail@plt+0xba0>
   13a84:	cmp	r9, r0
   13a88:	bhi	13ad8 <__assert_fail@plt+0x2ce4>
   13a8c:	add	r9, r0, #1
   13a90:	cmp	r6, r4
   13a94:	str	r9, [r5]
   13a98:	beq	13aa4 <__assert_fail@plt+0x2cb0>
   13a9c:	mov	r0, r6
   13aa0:	bl	168a4 <__assert_fail@plt+0x5ab0>
   13aa4:	mov	r0, r9
   13aa8:	bl	159fc <__assert_fail@plt+0x4c08>
   13aac:	ldr	r3, [r4, #256]	; 0x100
   13ab0:	mov	r2, sl
   13ab4:	mov	r1, r9
   13ab8:	mov	r6, r0
   13abc:	ldr	lr, [r4, #296]	; 0x128
   13ac0:	ldr	ip, [r4, #300]	; 0x12c
   13ac4:	str	r0, [r5, #4]
   13ac8:	stm	sp, {r3, r7, fp, lr}
   13acc:	mvn	r3, #0
   13ad0:	str	ip, [sp, #16]
   13ad4:	bl	11994 <__assert_fail@plt+0xba0>
   13ad8:	ldr	r3, [sp, #28]
   13adc:	mov	r0, r6
   13ae0:	str	r3, [r8]
   13ae4:	add	sp, sp, #44	; 0x2c
   13ae8:	ldrd	r4, [sp]
   13aec:	ldrd	r6, [sp, #8]
   13af0:	ldrd	r8, [sp, #16]
   13af4:	ldrd	sl, [sp, #24]
   13af8:	add	sp, sp, #32
   13afc:	pop	{pc}		; (ldr pc, [sp], #4)
   13b00:	mov	r0, #8
   13b04:	mvn	r3, #-2147483648	; 0x80000000
   13b08:	add	r1, sp, #36	; 0x24
   13b0c:	str	r0, [sp]
   13b10:	mov	r0, #0
   13b14:	bl	15ca0 <__assert_fail@plt+0x4eac>
   13b18:	ldrd	r2, [r4, #8]
   13b1c:	mov	r5, r0
   13b20:	str	r0, [r4]
   13b24:	strd	r2, [r0]
   13b28:	b	13a10 <__assert_fail@plt+0x2c1c>
   13b2c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   13b30:	movw	r4, #32992	; 0x80e0
   13b34:	movt	r4, #2
   13b38:	strd	r6, [sp, #8]
   13b3c:	strd	r8, [sp, #16]
   13b40:	strd	sl, [sp, #24]
   13b44:	mov	sl, r0
   13b48:	mov	fp, r1
   13b4c:	str	lr, [sp, #32]
   13b50:	sub	sp, sp, #44	; 0x2c
   13b54:	bl	10d4c <__errno_location@plt>
   13b58:	ldr	r3, [r0]
   13b5c:	mov	r8, r0
   13b60:	ldr	r2, [r4, #4]
   13b64:	ldr	r5, [r4]
   13b68:	str	r3, [sp, #28]
   13b6c:	cmp	r2, #0
   13b70:	bgt	13bcc <__assert_fail@plt+0x2dd8>
   13b74:	add	r3, r4, #8
   13b78:	str	r2, [sp, #36]	; 0x24
   13b7c:	rsb	r2, r2, #1
   13b80:	cmp	r5, r3
   13b84:	beq	13ca8 <__assert_fail@plt+0x2eb4>
   13b88:	mov	r1, #8
   13b8c:	mov	r0, r5
   13b90:	mvn	r3, #-2147483648	; 0x80000000
   13b94:	str	r1, [sp]
   13b98:	add	r1, sp, #36	; 0x24
   13b9c:	bl	15ca0 <__assert_fail@plt+0x4eac>
   13ba0:	mov	r5, r0
   13ba4:	str	r0, [r4]
   13ba8:	ldr	r0, [r4, #4]
   13bac:	mov	r1, #0
   13bb0:	ldr	r2, [sp, #36]	; 0x24
   13bb4:	sub	r2, r2, r0
   13bb8:	add	r0, r5, r0, lsl #3
   13bbc:	lsl	r2, r2, #3
   13bc0:	bl	10d64 <memset@plt>
   13bc4:	ldr	r3, [sp, #36]	; 0x24
   13bc8:	str	r3, [r4, #4]
   13bcc:	movw	r4, #33100	; 0x814c
   13bd0:	movt	r4, #2
   13bd4:	ldr	r9, [r5]
   13bd8:	add	r0, r4, #264	; 0x108
   13bdc:	mov	r3, fp
   13be0:	ldr	r7, [r4, #260]	; 0x104
   13be4:	mov	r2, sl
   13be8:	ldr	r6, [r5, #4]
   13bec:	str	r0, [sp, #8]
   13bf0:	mov	r1, r9
   13bf4:	ldr	ip, [r4, #256]	; 0x100
   13bf8:	orr	r7, r7, #1
   13bfc:	ldr	lr, [r4, #300]	; 0x12c
   13c00:	mov	r0, r6
   13c04:	str	ip, [sp]
   13c08:	str	r7, [sp, #4]
   13c0c:	str	lr, [sp, #16]
   13c10:	ldr	ip, [r4, #296]	; 0x128
   13c14:	str	ip, [sp, #12]
   13c18:	bl	11994 <__assert_fail@plt+0xba0>
   13c1c:	cmp	r9, r0
   13c20:	bhi	13c80 <__assert_fail@plt+0x2e8c>
   13c24:	add	r9, r0, #1
   13c28:	cmp	r6, r4
   13c2c:	str	r9, [r5]
   13c30:	beq	13c3c <__assert_fail@plt+0x2e48>
   13c34:	mov	r0, r6
   13c38:	bl	168a4 <__assert_fail@plt+0x5ab0>
   13c3c:	mov	r0, r9
   13c40:	bl	159fc <__assert_fail@plt+0x4c08>
   13c44:	ldr	ip, [r4, #256]	; 0x100
   13c48:	mov	r1, r9
   13c4c:	mov	r3, fp
   13c50:	mov	r2, sl
   13c54:	mov	r6, r0
   13c58:	ldr	r9, [r4, #296]	; 0x128
   13c5c:	ldr	lr, [r4, #300]	; 0x12c
   13c60:	str	r0, [r5, #4]
   13c64:	str	ip, [sp]
   13c68:	ldr	ip, [pc, #100]	; 13cd4 <__assert_fail@plt+0x2ee0>
   13c6c:	str	r7, [sp, #4]
   13c70:	str	ip, [sp, #8]
   13c74:	str	r9, [sp, #12]
   13c78:	str	lr, [sp, #16]
   13c7c:	bl	11994 <__assert_fail@plt+0xba0>
   13c80:	ldr	r3, [sp, #28]
   13c84:	mov	r0, r6
   13c88:	str	r3, [r8]
   13c8c:	add	sp, sp, #44	; 0x2c
   13c90:	ldrd	r4, [sp]
   13c94:	ldrd	r6, [sp, #8]
   13c98:	ldrd	r8, [sp, #16]
   13c9c:	ldrd	sl, [sp, #24]
   13ca0:	add	sp, sp, #32
   13ca4:	pop	{pc}		; (ldr pc, [sp], #4)
   13ca8:	mov	r0, #8
   13cac:	mvn	r3, #-2147483648	; 0x80000000
   13cb0:	add	r1, sp, #36	; 0x24
   13cb4:	str	r0, [sp]
   13cb8:	mov	r0, #0
   13cbc:	bl	15ca0 <__assert_fail@plt+0x4eac>
   13cc0:	ldrd	r2, [r4, #8]
   13cc4:	mov	r5, r0
   13cc8:	str	r0, [r4]
   13ccc:	strd	r2, [r0]
   13cd0:	b	13ba8 <__assert_fail@plt+0x2db4>
   13cd4:	andeq	r8, r2, r4, asr r2
   13cd8:	strd	r4, [sp, #-20]!	; 0xffffffec
   13cdc:	mov	r4, #0
   13ce0:	mov	r5, #0
   13ce4:	strd	r6, [sp, #8]
   13ce8:	cmp	r1, #10
   13cec:	str	lr, [sp, #16]
   13cf0:	sub	sp, sp, #100	; 0x64
   13cf4:	strd	r4, [sp, #48]	; 0x30
   13cf8:	beq	13d40 <__assert_fail@plt+0x2f4c>
   13cfc:	mov	r3, sp
   13d00:	strd	r4, [sp, #8]
   13d04:	str	r1, [sp, #48]	; 0x30
   13d08:	mov	r1, r2
   13d0c:	mvn	r2, #0
   13d10:	ldrd	r6, [sp, #48]	; 0x30
   13d14:	strd	r6, [sp]
   13d18:	strd	r4, [sp, #16]
   13d1c:	strd	r4, [sp, #24]
   13d20:	strd	r4, [sp, #32]
   13d24:	strd	r4, [sp, #40]	; 0x28
   13d28:	bl	13380 <__assert_fail@plt+0x258c>
   13d2c:	add	sp, sp, #100	; 0x64
   13d30:	ldrd	r4, [sp]
   13d34:	ldrd	r6, [sp, #8]
   13d38:	add	sp, sp, #16
   13d3c:	pop	{pc}		; (ldr pc, [sp], #4)
   13d40:	bl	10de8 <abort@plt>
   13d44:	strd	r4, [sp, #-20]!	; 0xffffffec
   13d48:	mov	r4, #0
   13d4c:	mov	r5, #0
   13d50:	strd	r6, [sp, #8]
   13d54:	cmp	r1, #10
   13d58:	str	lr, [sp, #16]
   13d5c:	sub	sp, sp, #100	; 0x64
   13d60:	strd	r4, [sp, #48]	; 0x30
   13d64:	beq	13db0 <__assert_fail@plt+0x2fbc>
   13d68:	mov	ip, r2
   13d6c:	mov	r2, r3
   13d70:	strd	r4, [sp, #8]
   13d74:	str	r1, [sp, #48]	; 0x30
   13d78:	mov	r3, sp
   13d7c:	mov	r1, ip
   13d80:	ldrd	r6, [sp, #48]	; 0x30
   13d84:	strd	r6, [sp]
   13d88:	strd	r4, [sp, #16]
   13d8c:	strd	r4, [sp, #24]
   13d90:	strd	r4, [sp, #32]
   13d94:	strd	r4, [sp, #40]	; 0x28
   13d98:	bl	13380 <__assert_fail@plt+0x258c>
   13d9c:	add	sp, sp, #100	; 0x64
   13da0:	ldrd	r4, [sp]
   13da4:	ldrd	r6, [sp, #8]
   13da8:	add	sp, sp, #16
   13dac:	pop	{pc}		; (ldr pc, [sp], #4)
   13db0:	bl	10de8 <abort@plt>
   13db4:	mov	r2, #0
   13db8:	mov	r3, #0
   13dbc:	strd	r4, [sp, #-36]!	; 0xffffffdc
   13dc0:	strd	r6, [sp, #8]
   13dc4:	cmp	r0, #10
   13dc8:	strd	r8, [sp, #16]
   13dcc:	strd	sl, [sp, #24]
   13dd0:	str	lr, [sp, #32]
   13dd4:	sub	sp, sp, #124	; 0x7c
   13dd8:	strd	r2, [sp, #72]	; 0x48
   13ddc:	strd	r2, [sp, #80]	; 0x50
   13de0:	strd	r2, [sp, #88]	; 0x58
   13de4:	strd	r2, [sp, #96]	; 0x60
   13de8:	strd	r2, [sp, #104]	; 0x68
   13dec:	strd	r2, [sp, #112]	; 0x70
   13df0:	beq	13f94 <__assert_fail@plt+0x31a0>
   13df4:	mov	r6, r1
   13df8:	movw	r4, #32992	; 0x80e0
   13dfc:	movt	r4, #2
   13e00:	str	r0, [sp, #72]	; 0x48
   13e04:	ldrd	r0, [sp, #72]	; 0x48
   13e08:	strd	r0, [sp, #24]
   13e0c:	strd	r2, [sp, #32]
   13e10:	strd	r2, [sp, #40]	; 0x28
   13e14:	strd	r2, [sp, #48]	; 0x30
   13e18:	strd	r2, [sp, #56]	; 0x38
   13e1c:	strd	r2, [sp, #64]	; 0x40
   13e20:	bl	10d4c <__errno_location@plt>
   13e24:	mov	r8, r0
   13e28:	ldr	r5, [r4]
   13e2c:	ldr	r2, [r4, #4]
   13e30:	ldr	r9, [r0]
   13e34:	cmp	r2, #0
   13e38:	bgt	13e94 <__assert_fail@plt+0x30a0>
   13e3c:	add	r3, r4, #8
   13e40:	str	r2, [sp, #72]	; 0x48
   13e44:	rsb	r2, r2, #1
   13e48:	cmp	r5, r3
   13e4c:	beq	13f68 <__assert_fail@plt+0x3174>
   13e50:	mov	r3, #8
   13e54:	mov	r0, r5
   13e58:	add	r1, sp, #72	; 0x48
   13e5c:	str	r3, [sp]
   13e60:	mvn	r3, #-2147483648	; 0x80000000
   13e64:	bl	15ca0 <__assert_fail@plt+0x4eac>
   13e68:	mov	r5, r0
   13e6c:	str	r0, [r4]
   13e70:	ldr	r0, [r4, #4]
   13e74:	mov	r1, #0
   13e78:	ldr	r2, [sp, #72]	; 0x48
   13e7c:	sub	r2, r2, r0
   13e80:	add	r0, r5, r0, lsl #3
   13e84:	lsl	r2, r2, #3
   13e88:	bl	10d64 <memset@plt>
   13e8c:	ldr	r3, [sp, #72]	; 0x48
   13e90:	str	r3, [r4, #4]
   13e94:	ldr	sl, [r5]
   13e98:	add	r0, sp, #32
   13e9c:	mvn	r3, #0
   13ea0:	mov	r2, r6
   13ea4:	ldr	r7, [sp, #28]
   13ea8:	ldr	r4, [r5, #4]
   13eac:	mov	r1, sl
   13eb0:	str	r0, [sp, #8]
   13eb4:	ldr	lr, [sp, #24]
   13eb8:	orr	r7, r7, #1
   13ebc:	ldr	ip, [sp, #64]	; 0x40
   13ec0:	mov	r0, r4
   13ec4:	ldr	fp, [sp, #68]	; 0x44
   13ec8:	str	lr, [sp]
   13ecc:	str	r7, [sp, #4]
   13ed0:	str	ip, [sp, #12]
   13ed4:	str	fp, [sp, #16]
   13ed8:	bl	11994 <__assert_fail@plt+0xba0>
   13edc:	cmp	sl, r0
   13ee0:	bhi	13f44 <__assert_fail@plt+0x3150>
   13ee4:	add	sl, r0, #1
   13ee8:	movw	r3, #33100	; 0x814c
   13eec:	movt	r3, #2
   13ef0:	cmp	r4, r3
   13ef4:	str	sl, [r5]
   13ef8:	beq	13f04 <__assert_fail@plt+0x3110>
   13efc:	mov	r0, r4
   13f00:	bl	168a4 <__assert_fail@plt+0x5ab0>
   13f04:	mov	r0, sl
   13f08:	bl	159fc <__assert_fail@plt+0x4c08>
   13f0c:	ldr	r3, [sp, #24]
   13f10:	mov	r2, r6
   13f14:	mov	r1, sl
   13f18:	mov	r4, r0
   13f1c:	ldr	lr, [sp, #64]	; 0x40
   13f20:	ldr	ip, [sp, #68]	; 0x44
   13f24:	str	r0, [r5, #4]
   13f28:	add	r5, sp, #32
   13f2c:	stm	sp, {r3, r7}
   13f30:	mvn	r3, #0
   13f34:	str	r5, [sp, #8]
   13f38:	str	lr, [sp, #12]
   13f3c:	str	ip, [sp, #16]
   13f40:	bl	11994 <__assert_fail@plt+0xba0>
   13f44:	mov	r0, r4
   13f48:	str	r9, [r8]
   13f4c:	add	sp, sp, #124	; 0x7c
   13f50:	ldrd	r4, [sp]
   13f54:	ldrd	r6, [sp, #8]
   13f58:	ldrd	r8, [sp, #16]
   13f5c:	ldrd	sl, [sp, #24]
   13f60:	add	sp, sp, #32
   13f64:	pop	{pc}		; (ldr pc, [sp], #4)
   13f68:	mov	r0, #8
   13f6c:	mvn	r3, #-2147483648	; 0x80000000
   13f70:	add	r1, sp, #72	; 0x48
   13f74:	str	r0, [sp]
   13f78:	mov	r0, #0
   13f7c:	bl	15ca0 <__assert_fail@plt+0x4eac>
   13f80:	ldrd	r2, [r4, #8]
   13f84:	mov	r5, r0
   13f88:	str	r0, [r4]
   13f8c:	strd	r2, [r0]
   13f90:	b	13e70 <__assert_fail@plt+0x307c>
   13f94:	bl	10de8 <abort@plt>
   13f98:	strd	r4, [sp, #-36]!	; 0xffffffdc
   13f9c:	cmp	r0, #10
   13fa0:	strd	r6, [sp, #8]
   13fa4:	mov	r6, #0
   13fa8:	mov	r7, #0
   13fac:	strd	r8, [sp, #16]
   13fb0:	strd	sl, [sp, #24]
   13fb4:	str	lr, [sp, #32]
   13fb8:	sub	sp, sp, #124	; 0x7c
   13fbc:	strd	r6, [sp, #72]	; 0x48
   13fc0:	strd	r6, [sp, #80]	; 0x50
   13fc4:	strd	r6, [sp, #88]	; 0x58
   13fc8:	strd	r6, [sp, #96]	; 0x60
   13fcc:	strd	r6, [sp, #104]	; 0x68
   13fd0:	strd	r6, [sp, #112]	; 0x70
   13fd4:	beq	14180 <__assert_fail@plt+0x338c>
   13fd8:	mov	sl, r2
   13fdc:	movw	r5, #32992	; 0x80e0
   13fe0:	movt	r5, #2
   13fe4:	str	r0, [sp, #72]	; 0x48
   13fe8:	mov	r9, r1
   13fec:	ldrd	r2, [sp, #72]	; 0x48
   13ff0:	strd	r2, [sp, #24]
   13ff4:	strd	r6, [sp, #32]
   13ff8:	strd	r6, [sp, #40]	; 0x28
   13ffc:	strd	r6, [sp, #48]	; 0x30
   14000:	strd	r6, [sp, #56]	; 0x38
   14004:	strd	r6, [sp, #64]	; 0x40
   14008:	bl	10d4c <__errno_location@plt>
   1400c:	mov	r7, r0
   14010:	ldr	r4, [r5]
   14014:	ldr	r2, [r5, #4]
   14018:	ldr	fp, [r0]
   1401c:	cmp	r2, #0
   14020:	bgt	1407c <__assert_fail@plt+0x3288>
   14024:	add	r3, r5, #8
   14028:	str	r2, [sp, #72]	; 0x48
   1402c:	rsb	r2, r2, #1
   14030:	cmp	r4, r3
   14034:	beq	14154 <__assert_fail@plt+0x3360>
   14038:	mov	r3, #8
   1403c:	mov	r0, r4
   14040:	add	r1, sp, #72	; 0x48
   14044:	str	r3, [sp]
   14048:	mvn	r3, #-2147483648	; 0x80000000
   1404c:	bl	15ca0 <__assert_fail@plt+0x4eac>
   14050:	mov	r4, r0
   14054:	str	r0, [r5]
   14058:	ldr	r0, [r5, #4]
   1405c:	mov	r1, #0
   14060:	ldr	r2, [sp, #72]	; 0x48
   14064:	sub	r2, r2, r0
   14068:	add	r0, r4, r0, lsl #3
   1406c:	lsl	r2, r2, #3
   14070:	bl	10d64 <memset@plt>
   14074:	ldr	r3, [sp, #72]	; 0x48
   14078:	str	r3, [r5, #4]
   1407c:	ldr	ip, [sp, #24]
   14080:	add	r0, sp, #32
   14084:	mov	r3, sl
   14088:	mov	r2, r9
   1408c:	ldr	r6, [sp, #28]
   14090:	ldr	r8, [r4]
   14094:	ldr	r5, [r4, #4]
   14098:	str	ip, [sp]
   1409c:	orr	r6, r6, #1
   140a0:	ldr	ip, [sp, #64]	; 0x40
   140a4:	mov	r1, r8
   140a8:	str	r6, [sp, #4]
   140ac:	ldr	lr, [sp, #68]	; 0x44
   140b0:	str	r0, [sp, #8]
   140b4:	mov	r0, r5
   140b8:	str	ip, [sp, #12]
   140bc:	str	lr, [sp, #16]
   140c0:	bl	11994 <__assert_fail@plt+0xba0>
   140c4:	cmp	r8, r0
   140c8:	bhi	14130 <__assert_fail@plt+0x333c>
   140cc:	add	r8, r0, #1
   140d0:	movw	r3, #33100	; 0x814c
   140d4:	movt	r3, #2
   140d8:	cmp	r5, r3
   140dc:	str	r8, [r4]
   140e0:	beq	140ec <__assert_fail@plt+0x32f8>
   140e4:	mov	r0, r5
   140e8:	bl	168a4 <__assert_fail@plt+0x5ab0>
   140ec:	mov	r0, r8
   140f0:	bl	159fc <__assert_fail@plt+0x4c08>
   140f4:	ldr	lr, [sp, #24]
   140f8:	mov	r1, r8
   140fc:	mov	r3, sl
   14100:	mov	r2, r9
   14104:	mov	r5, r0
   14108:	ldr	r8, [sp, #64]	; 0x40
   1410c:	ldr	ip, [sp, #68]	; 0x44
   14110:	str	r0, [r4, #4]
   14114:	str	lr, [sp]
   14118:	add	lr, sp, #32
   1411c:	str	r6, [sp, #4]
   14120:	str	lr, [sp, #8]
   14124:	str	r8, [sp, #12]
   14128:	str	ip, [sp, #16]
   1412c:	bl	11994 <__assert_fail@plt+0xba0>
   14130:	mov	r0, r5
   14134:	str	fp, [r7]
   14138:	add	sp, sp, #124	; 0x7c
   1413c:	ldrd	r4, [sp]
   14140:	ldrd	r6, [sp, #8]
   14144:	ldrd	r8, [sp, #16]
   14148:	ldrd	sl, [sp, #24]
   1414c:	add	sp, sp, #32
   14150:	pop	{pc}		; (ldr pc, [sp], #4)
   14154:	mov	r0, #8
   14158:	mvn	r3, #-2147483648	; 0x80000000
   1415c:	add	r1, sp, #72	; 0x48
   14160:	str	r0, [sp]
   14164:	mov	r0, #0
   14168:	bl	15ca0 <__assert_fail@plt+0x4eac>
   1416c:	ldrd	r2, [r5, #8]
   14170:	mov	r4, r0
   14174:	str	r0, [r5]
   14178:	strd	r2, [r0]
   1417c:	b	14058 <__assert_fail@plt+0x3264>
   14180:	bl	10de8 <abort@plt>
   14184:	ldr	r3, [pc, #492]	; 14378 <__assert_fail@plt+0x3584>
   14188:	lsr	ip, r2, #5
   1418c:	and	r2, r2, #31
   14190:	strd	r4, [sp, #-36]!	; 0xffffffdc
   14194:	movw	r5, #32992	; 0x80e0
   14198:	movt	r5, #2
   1419c:	strd	r6, [sp, #8]
   141a0:	strd	r8, [sp, #16]
   141a4:	strd	sl, [sp, #24]
   141a8:	mov	sl, r0
   141ac:	mov	fp, r1
   141b0:	ldrd	r0, [r3]
   141b4:	str	lr, [sp, #32]
   141b8:	sub	sp, sp, #92	; 0x5c
   141bc:	ldrd	r8, [r3, #8]
   141c0:	add	r6, sp, #48	; 0x30
   141c4:	strd	r0, [sp, #40]	; 0x28
   141c8:	ldrd	r0, [r3, #16]
   141cc:	strd	r8, [sp, #48]	; 0x30
   141d0:	ldrd	r8, [r3, #24]
   141d4:	strd	r0, [sp, #56]	; 0x38
   141d8:	ldrd	r0, [r3, #32]
   141dc:	strd	r8, [sp, #64]	; 0x40
   141e0:	ldrd	r8, [r3, #40]	; 0x28
   141e4:	strd	r0, [sp, #72]	; 0x48
   141e8:	strd	r8, [sp, #80]	; 0x50
   141ec:	ldr	r3, [r6, ip, lsl #2]
   141f0:	mvn	r1, r3, lsr r2
   141f4:	and	r1, r1, #1
   141f8:	eor	r2, r3, r1, lsl r2
   141fc:	str	r2, [r6, ip, lsl #2]
   14200:	bl	10d4c <__errno_location@plt>
   14204:	ldr	r3, [r0]
   14208:	mov	r8, r0
   1420c:	ldr	r2, [r5, #4]
   14210:	ldr	r4, [r5]
   14214:	str	r3, [sp, #28]
   14218:	cmp	r2, #0
   1421c:	bgt	14278 <__assert_fail@plt+0x3484>
   14220:	add	r3, r5, #8
   14224:	str	r2, [sp, #36]	; 0x24
   14228:	rsb	r2, r2, #1
   1422c:	cmp	r4, r3
   14230:	beq	1434c <__assert_fail@plt+0x3558>
   14234:	mov	r1, #8
   14238:	mov	r0, r4
   1423c:	mvn	r3, #-2147483648	; 0x80000000
   14240:	str	r1, [sp]
   14244:	add	r1, sp, #36	; 0x24
   14248:	bl	15ca0 <__assert_fail@plt+0x4eac>
   1424c:	mov	r4, r0
   14250:	str	r0, [r5]
   14254:	ldr	r0, [r5, #4]
   14258:	mov	r1, #0
   1425c:	ldr	r2, [sp, #36]	; 0x24
   14260:	sub	r2, r2, r0
   14264:	add	r0, r4, r0, lsl #3
   14268:	lsl	r2, r2, #3
   1426c:	bl	10d64 <memset@plt>
   14270:	ldr	r3, [sp, #36]	; 0x24
   14274:	str	r3, [r5, #4]
   14278:	ldr	ip, [sp, #40]	; 0x28
   1427c:	mov	r3, fp
   14280:	mov	r2, sl
   14284:	ldr	r7, [sp, #44]	; 0x2c
   14288:	ldr	r9, [r4]
   1428c:	ldr	r5, [r4, #4]
   14290:	str	ip, [sp]
   14294:	orr	r7, r7, #1
   14298:	ldr	ip, [sp, #80]	; 0x50
   1429c:	mov	r1, r9
   142a0:	str	r7, [sp, #4]
   142a4:	ldr	lr, [sp, #84]	; 0x54
   142a8:	mov	r0, r5
   142ac:	str	r6, [sp, #8]
   142b0:	str	ip, [sp, #12]
   142b4:	str	lr, [sp, #16]
   142b8:	bl	11994 <__assert_fail@plt+0xba0>
   142bc:	cmp	r9, r0
   142c0:	bhi	14324 <__assert_fail@plt+0x3530>
   142c4:	add	r9, r0, #1
   142c8:	movw	r3, #33100	; 0x814c
   142cc:	movt	r3, #2
   142d0:	cmp	r5, r3
   142d4:	str	r9, [r4]
   142d8:	beq	142e4 <__assert_fail@plt+0x34f0>
   142dc:	mov	r0, r5
   142e0:	bl	168a4 <__assert_fail@plt+0x5ab0>
   142e4:	mov	r0, r9
   142e8:	bl	159fc <__assert_fail@plt+0x4c08>
   142ec:	mov	r1, r9
   142f0:	ldr	ip, [sp, #40]	; 0x28
   142f4:	mov	r3, fp
   142f8:	mov	r2, sl
   142fc:	mov	r5, r0
   14300:	ldr	r9, [sp, #80]	; 0x50
   14304:	ldr	lr, [sp, #84]	; 0x54
   14308:	str	r0, [r4, #4]
   1430c:	str	ip, [sp]
   14310:	str	r7, [sp, #4]
   14314:	str	r6, [sp, #8]
   14318:	str	r9, [sp, #12]
   1431c:	str	lr, [sp, #16]
   14320:	bl	11994 <__assert_fail@plt+0xba0>
   14324:	ldr	r3, [sp, #28]
   14328:	mov	r0, r5
   1432c:	str	r3, [r8]
   14330:	add	sp, sp, #92	; 0x5c
   14334:	ldrd	r4, [sp]
   14338:	ldrd	r6, [sp, #8]
   1433c:	ldrd	r8, [sp, #16]
   14340:	ldrd	sl, [sp, #24]
   14344:	add	sp, sp, #32
   14348:	pop	{pc}		; (ldr pc, [sp], #4)
   1434c:	mov	r0, #8
   14350:	mvn	r3, #-2147483648	; 0x80000000
   14354:	add	r1, sp, #36	; 0x24
   14358:	str	r0, [sp]
   1435c:	mov	r0, #0
   14360:	bl	15ca0 <__assert_fail@plt+0x4eac>
   14364:	ldrd	r2, [r5, #8]
   14368:	mov	r4, r0
   1436c:	str	r0, [r5]
   14370:	strd	r2, [r0]
   14374:	b	14254 <__assert_fail@plt+0x3460>
   14378:	andeq	r8, r2, ip, asr #4
   1437c:	ldr	ip, [pc, #476]	; 14560 <__assert_fail@plt+0x376c>
   14380:	strd	r4, [sp, #-36]!	; 0xffffffdc
   14384:	movw	r4, #32992	; 0x80e0
   14388:	movt	r4, #2
   1438c:	ldrd	r2, [ip, #8]
   14390:	strd	r6, [sp, #8]
   14394:	lsr	r7, r1, #5
   14398:	mov	r6, r0
   1439c:	strd	r8, [sp, #16]
   143a0:	str	lr, [sp, #32]
   143a4:	and	lr, r1, #31
   143a8:	ldrd	r0, [ip]
   143ac:	strd	sl, [sp, #24]
   143b0:	sub	sp, sp, #84	; 0x54
   143b4:	add	r5, sp, #40	; 0x28
   143b8:	strd	r0, [sp, #32]
   143bc:	strd	r2, [sp, #40]	; 0x28
   143c0:	ldrd	r0, [ip, #16]
   143c4:	ldrd	r2, [ip, #24]
   143c8:	strd	r0, [sp, #48]	; 0x30
   143cc:	ldrd	r0, [ip, #32]
   143d0:	strd	r2, [sp, #56]	; 0x38
   143d4:	ldrd	r2, [ip, #40]	; 0x28
   143d8:	strd	r0, [sp, #64]	; 0x40
   143dc:	strd	r2, [sp, #72]	; 0x48
   143e0:	ldr	r1, [r5, r7, lsl #2]
   143e4:	mvn	r3, r1, lsr lr
   143e8:	and	r3, r3, #1
   143ec:	eor	r1, r1, r3, lsl lr
   143f0:	str	r1, [r5, r7, lsl #2]
   143f4:	bl	10d4c <__errno_location@plt>
   143f8:	mov	r9, r0
   143fc:	ldr	sl, [r0]
   14400:	ldr	r2, [r4, #4]
   14404:	ldr	r7, [r4]
   14408:	cmp	r2, #0
   1440c:	bgt	14468 <__assert_fail@plt+0x3674>
   14410:	add	r3, r4, #8
   14414:	str	r2, [sp, #28]
   14418:	rsb	r2, r2, #1
   1441c:	cmp	r7, r3
   14420:	beq	14534 <__assert_fail@plt+0x3740>
   14424:	mov	r1, #8
   14428:	mov	r0, r7
   1442c:	mvn	r3, #-2147483648	; 0x80000000
   14430:	str	r1, [sp]
   14434:	add	r1, sp, #28
   14438:	bl	15ca0 <__assert_fail@plt+0x4eac>
   1443c:	mov	r7, r0
   14440:	str	r0, [r4]
   14444:	ldr	r0, [r4, #4]
   14448:	mov	r1, #0
   1444c:	ldr	r2, [sp, #28]
   14450:	sub	r2, r2, r0
   14454:	add	r0, r7, r0, lsl #3
   14458:	lsl	r2, r2, #3
   1445c:	bl	10d64 <memset@plt>
   14460:	ldr	r3, [sp, #28]
   14464:	str	r3, [r4, #4]
   14468:	ldr	ip, [sp, #32]
   1446c:	mvn	r3, #0
   14470:	mov	r2, r6
   14474:	ldr	r8, [sp, #36]	; 0x24
   14478:	ldr	fp, [r7]
   1447c:	ldr	r4, [r7, #4]
   14480:	str	ip, [sp]
   14484:	orr	r8, r8, #1
   14488:	ldr	ip, [sp, #72]	; 0x48
   1448c:	mov	r1, fp
   14490:	str	r8, [sp, #4]
   14494:	ldr	lr, [sp, #76]	; 0x4c
   14498:	mov	r0, r4
   1449c:	str	r5, [sp, #8]
   144a0:	str	ip, [sp, #12]
   144a4:	str	lr, [sp, #16]
   144a8:	bl	11994 <__assert_fail@plt+0xba0>
   144ac:	cmp	fp, r0
   144b0:	bhi	14510 <__assert_fail@plt+0x371c>
   144b4:	add	fp, r0, #1
   144b8:	movw	r3, #33100	; 0x814c
   144bc:	movt	r3, #2
   144c0:	cmp	r4, r3
   144c4:	str	fp, [r7]
   144c8:	beq	144d4 <__assert_fail@plt+0x36e0>
   144cc:	mov	r0, r4
   144d0:	bl	168a4 <__assert_fail@plt+0x5ab0>
   144d4:	mov	r0, fp
   144d8:	bl	159fc <__assert_fail@plt+0x4c08>
   144dc:	ldr	r3, [sp, #32]
   144e0:	mov	r2, r6
   144e4:	mov	r1, fp
   144e8:	mov	r4, r0
   144ec:	ldr	lr, [sp, #72]	; 0x48
   144f0:	ldr	ip, [sp, #76]	; 0x4c
   144f4:	str	r0, [r7, #4]
   144f8:	stm	sp, {r3, r8}
   144fc:	mvn	r3, #0
   14500:	str	r5, [sp, #8]
   14504:	str	lr, [sp, #12]
   14508:	str	ip, [sp, #16]
   1450c:	bl	11994 <__assert_fail@plt+0xba0>
   14510:	mov	r0, r4
   14514:	str	sl, [r9]
   14518:	add	sp, sp, #84	; 0x54
   1451c:	ldrd	r4, [sp]
   14520:	ldrd	r6, [sp, #8]
   14524:	ldrd	r8, [sp, #16]
   14528:	ldrd	sl, [sp, #24]
   1452c:	add	sp, sp, #32
   14530:	pop	{pc}		; (ldr pc, [sp], #4)
   14534:	mov	r0, #8
   14538:	mvn	r3, #-2147483648	; 0x80000000
   1453c:	add	r1, sp, #28
   14540:	str	r0, [sp]
   14544:	mov	r0, #0
   14548:	bl	15ca0 <__assert_fail@plt+0x4eac>
   1454c:	ldrd	r2, [r4, #8]
   14550:	mov	r7, r0
   14554:	str	r0, [r4]
   14558:	strd	r2, [r0]
   1455c:	b	14444 <__assert_fail@plt+0x3650>
   14560:	andeq	r8, r2, ip, asr #4
   14564:	ldr	ip, [pc, #472]	; 14744 <__assert_fail@plt+0x3950>
   14568:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1456c:	mov	r5, r0
   14570:	movw	r4, #32992	; 0x80e0
   14574:	movt	r4, #2
   14578:	ldrd	r2, [ip]
   1457c:	ldrd	r0, [ip, #8]
   14580:	strd	r6, [sp, #8]
   14584:	strd	r8, [sp, #16]
   14588:	strd	sl, [sp, #24]
   1458c:	str	lr, [sp, #32]
   14590:	sub	sp, sp, #84	; 0x54
   14594:	strd	r2, [sp, #32]
   14598:	strd	r0, [sp, #40]	; 0x28
   1459c:	ldr	r6, [sp, #44]	; 0x2c
   145a0:	ldrd	r2, [ip, #16]
   145a4:	ldrd	r0, [ip, #24]
   145a8:	mvn	lr, r6
   145ac:	and	lr, lr, #67108864	; 0x4000000
   145b0:	eor	lr, lr, r6
   145b4:	ldrd	r6, [ip, #40]	; 0x28
   145b8:	strd	r2, [sp, #48]	; 0x30
   145bc:	ldrd	r2, [ip, #32]
   145c0:	str	lr, [sp, #44]	; 0x2c
   145c4:	strd	r0, [sp, #56]	; 0x38
   145c8:	strd	r2, [sp, #64]	; 0x40
   145cc:	strd	r6, [sp, #72]	; 0x48
   145d0:	bl	10d4c <__errno_location@plt>
   145d4:	mov	r8, r0
   145d8:	ldr	r9, [r0]
   145dc:	ldr	r2, [r4, #4]
   145e0:	ldr	r6, [r4]
   145e4:	cmp	r2, #0
   145e8:	bgt	14644 <__assert_fail@plt+0x3850>
   145ec:	add	r3, r4, #8
   145f0:	str	r2, [sp, #28]
   145f4:	rsb	r2, r2, #1
   145f8:	cmp	r6, r3
   145fc:	beq	14718 <__assert_fail@plt+0x3924>
   14600:	mov	r1, #8
   14604:	mov	r0, r6
   14608:	mvn	r3, #-2147483648	; 0x80000000
   1460c:	str	r1, [sp]
   14610:	add	r1, sp, #28
   14614:	bl	15ca0 <__assert_fail@plt+0x4eac>
   14618:	mov	r6, r0
   1461c:	str	r0, [r4]
   14620:	ldr	r0, [r4, #4]
   14624:	mov	r1, #0
   14628:	ldr	r2, [sp, #28]
   1462c:	sub	r2, r2, r0
   14630:	add	r0, r6, r0, lsl #3
   14634:	lsl	r2, r2, #3
   14638:	bl	10d64 <memset@plt>
   1463c:	ldr	r3, [sp, #28]
   14640:	str	r3, [r4, #4]
   14644:	ldr	sl, [r6]
   14648:	add	r0, sp, #40	; 0x28
   1464c:	mvn	r3, #0
   14650:	mov	r2, r5
   14654:	ldr	r7, [sp, #36]	; 0x24
   14658:	ldr	r4, [r6, #4]
   1465c:	mov	r1, sl
   14660:	str	r0, [sp, #8]
   14664:	ldr	lr, [sp, #32]
   14668:	orr	r7, r7, #1
   1466c:	ldr	ip, [sp, #72]	; 0x48
   14670:	mov	r0, r4
   14674:	ldr	fp, [sp, #76]	; 0x4c
   14678:	str	lr, [sp]
   1467c:	str	r7, [sp, #4]
   14680:	str	ip, [sp, #12]
   14684:	str	fp, [sp, #16]
   14688:	bl	11994 <__assert_fail@plt+0xba0>
   1468c:	cmp	sl, r0
   14690:	bhi	146f4 <__assert_fail@plt+0x3900>
   14694:	add	sl, r0, #1
   14698:	movw	r3, #33100	; 0x814c
   1469c:	movt	r3, #2
   146a0:	cmp	r4, r3
   146a4:	str	sl, [r6]
   146a8:	beq	146b4 <__assert_fail@plt+0x38c0>
   146ac:	mov	r0, r4
   146b0:	bl	168a4 <__assert_fail@plt+0x5ab0>
   146b4:	mov	r0, sl
   146b8:	bl	159fc <__assert_fail@plt+0x4c08>
   146bc:	ldr	r3, [sp, #32]
   146c0:	mov	r2, r5
   146c4:	add	r5, sp, #40	; 0x28
   146c8:	mov	r1, sl
   146cc:	mov	r4, r0
   146d0:	ldr	lr, [sp, #72]	; 0x48
   146d4:	ldr	ip, [sp, #76]	; 0x4c
   146d8:	str	r0, [r6, #4]
   146dc:	stm	sp, {r3, r7}
   146e0:	mvn	r3, #0
   146e4:	str	r5, [sp, #8]
   146e8:	str	lr, [sp, #12]
   146ec:	str	ip, [sp, #16]
   146f0:	bl	11994 <__assert_fail@plt+0xba0>
   146f4:	mov	r0, r4
   146f8:	str	r9, [r8]
   146fc:	add	sp, sp, #84	; 0x54
   14700:	ldrd	r4, [sp]
   14704:	ldrd	r6, [sp, #8]
   14708:	ldrd	r8, [sp, #16]
   1470c:	ldrd	sl, [sp, #24]
   14710:	add	sp, sp, #32
   14714:	pop	{pc}		; (ldr pc, [sp], #4)
   14718:	mov	r0, #8
   1471c:	mvn	r3, #-2147483648	; 0x80000000
   14720:	add	r1, sp, #28
   14724:	str	r0, [sp]
   14728:	mov	r0, #0
   1472c:	bl	15ca0 <__assert_fail@plt+0x4eac>
   14730:	ldrd	r2, [r4, #8]
   14734:	mov	r6, r0
   14738:	str	r0, [r4]
   1473c:	strd	r2, [r0]
   14740:	b	14620 <__assert_fail@plt+0x382c>
   14744:	andeq	r8, r2, ip, asr #4
   14748:	ldr	ip, [pc, #480]	; 14930 <__assert_fail@plt+0x3b3c>
   1474c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   14750:	mov	r5, r0
   14754:	movw	r4, #32992	; 0x80e0
   14758:	movt	r4, #2
   1475c:	ldrd	r2, [ip]
   14760:	strd	r6, [sp, #8]
   14764:	mov	r6, r1
   14768:	ldrd	r0, [ip, #8]
   1476c:	strd	r8, [sp, #16]
   14770:	strd	sl, [sp, #24]
   14774:	str	lr, [sp, #32]
   14778:	sub	sp, sp, #84	; 0x54
   1477c:	ldrd	r8, [ip, #40]	; 0x28
   14780:	strd	r2, [sp, #32]
   14784:	strd	r0, [sp, #40]	; 0x28
   14788:	ldrd	r2, [ip, #16]
   1478c:	ldr	r7, [sp, #44]	; 0x2c
   14790:	ldrd	r0, [ip, #24]
   14794:	strd	r2, [sp, #48]	; 0x30
   14798:	ldrd	r2, [ip, #32]
   1479c:	mvn	lr, r7
   147a0:	and	lr, lr, #67108864	; 0x4000000
   147a4:	eor	lr, lr, r7
   147a8:	str	lr, [sp, #44]	; 0x2c
   147ac:	strd	r0, [sp, #56]	; 0x38
   147b0:	strd	r2, [sp, #64]	; 0x40
   147b4:	strd	r8, [sp, #72]	; 0x48
   147b8:	bl	10d4c <__errno_location@plt>
   147bc:	mov	r9, r0
   147c0:	ldr	sl, [r0]
   147c4:	ldr	r2, [r4, #4]
   147c8:	ldr	r7, [r4]
   147cc:	cmp	r2, #0
   147d0:	bgt	1482c <__assert_fail@plt+0x3a38>
   147d4:	add	r3, r4, #8
   147d8:	str	r2, [sp, #28]
   147dc:	rsb	r2, r2, #1
   147e0:	cmp	r7, r3
   147e4:	beq	14904 <__assert_fail@plt+0x3b10>
   147e8:	mov	r1, #8
   147ec:	mov	r0, r7
   147f0:	mvn	r3, #-2147483648	; 0x80000000
   147f4:	str	r1, [sp]
   147f8:	add	r1, sp, #28
   147fc:	bl	15ca0 <__assert_fail@plt+0x4eac>
   14800:	mov	r7, r0
   14804:	str	r0, [r4]
   14808:	ldr	r0, [r4, #4]
   1480c:	mov	r1, #0
   14810:	ldr	r2, [sp, #28]
   14814:	sub	r2, r2, r0
   14818:	add	r0, r7, r0, lsl #3
   1481c:	lsl	r2, r2, #3
   14820:	bl	10d64 <memset@plt>
   14824:	ldr	r3, [sp, #28]
   14828:	str	r3, [r4, #4]
   1482c:	ldr	ip, [sp, #32]
   14830:	add	r0, sp, #40	; 0x28
   14834:	mov	r3, r6
   14838:	mov	r2, r5
   1483c:	ldr	r8, [sp, #36]	; 0x24
   14840:	ldr	fp, [r7]
   14844:	ldr	r4, [r7, #4]
   14848:	str	ip, [sp]
   1484c:	orr	r8, r8, #1
   14850:	ldr	ip, [sp, #72]	; 0x48
   14854:	mov	r1, fp
   14858:	str	r8, [sp, #4]
   1485c:	ldr	lr, [sp, #76]	; 0x4c
   14860:	str	r0, [sp, #8]
   14864:	mov	r0, r4
   14868:	str	ip, [sp, #12]
   1486c:	str	lr, [sp, #16]
   14870:	bl	11994 <__assert_fail@plt+0xba0>
   14874:	cmp	fp, r0
   14878:	bhi	148e0 <__assert_fail@plt+0x3aec>
   1487c:	add	fp, r0, #1
   14880:	movw	r3, #33100	; 0x814c
   14884:	movt	r3, #2
   14888:	cmp	r4, r3
   1488c:	str	fp, [r7]
   14890:	beq	1489c <__assert_fail@plt+0x3aa8>
   14894:	mov	r0, r4
   14898:	bl	168a4 <__assert_fail@plt+0x5ab0>
   1489c:	mov	r0, fp
   148a0:	bl	159fc <__assert_fail@plt+0x4c08>
   148a4:	ldr	lr, [sp, #32]
   148a8:	mov	r2, r5
   148ac:	mov	r3, r6
   148b0:	mov	r1, fp
   148b4:	mov	r4, r0
   148b8:	ldr	r5, [sp, #72]	; 0x48
   148bc:	ldr	ip, [sp, #76]	; 0x4c
   148c0:	str	r0, [r7, #4]
   148c4:	str	lr, [sp]
   148c8:	add	lr, sp, #40	; 0x28
   148cc:	str	r8, [sp, #4]
   148d0:	str	lr, [sp, #8]
   148d4:	str	r5, [sp, #12]
   148d8:	str	ip, [sp, #16]
   148dc:	bl	11994 <__assert_fail@plt+0xba0>
   148e0:	mov	r0, r4
   148e4:	str	sl, [r9]
   148e8:	add	sp, sp, #84	; 0x54
   148ec:	ldrd	r4, [sp]
   148f0:	ldrd	r6, [sp, #8]
   148f4:	ldrd	r8, [sp, #16]
   148f8:	ldrd	sl, [sp, #24]
   148fc:	add	sp, sp, #32
   14900:	pop	{pc}		; (ldr pc, [sp], #4)
   14904:	mov	r0, #8
   14908:	mvn	r3, #-2147483648	; 0x80000000
   1490c:	add	r1, sp, #28
   14910:	str	r0, [sp]
   14914:	mov	r0, #0
   14918:	bl	15ca0 <__assert_fail@plt+0x4eac>
   1491c:	ldrd	r2, [r4, #8]
   14920:	mov	r7, r0
   14924:	str	r0, [r4]
   14928:	strd	r2, [r0]
   1492c:	b	14808 <__assert_fail@plt+0x3a14>
   14930:	andeq	r8, r2, ip, asr #4
   14934:	strd	r4, [sp, #-12]!
   14938:	mov	r4, #0
   1493c:	mov	r5, #0
   14940:	str	lr, [sp, #8]
   14944:	sub	sp, sp, #100	; 0x64
   14948:	cmp	r1, #10
   1494c:	strd	r4, [sp]
   14950:	strd	r4, [sp, #8]
   14954:	strd	r4, [sp, #16]
   14958:	strd	r4, [sp, #24]
   1495c:	strd	r4, [sp, #32]
   14960:	strd	r4, [sp, #40]	; 0x28
   14964:	beq	14994 <__assert_fail@plt+0x3ba0>
   14968:	mov	ip, #67108864	; 0x4000000
   1496c:	mov	r3, sp
   14970:	str	r1, [sp]
   14974:	mov	r1, r2
   14978:	mvn	r2, #0
   1497c:	str	ip, [sp, #12]
   14980:	bl	13380 <__assert_fail@plt+0x258c>
   14984:	add	sp, sp, #100	; 0x64
   14988:	ldrd	r4, [sp]
   1498c:	add	sp, sp, #8
   14990:	pop	{pc}		; (ldr pc, [sp], #4)
   14994:	bl	10de8 <abort@plt>
   14998:	ldr	ip, [pc, #156]	; 14a3c <__assert_fail@plt+0x3c48>
   1499c:	cmp	r2, #0
   149a0:	cmpne	r1, #0
   149a4:	strd	r4, [sp, #-32]!	; 0xffffffe0
   149a8:	strd	r6, [sp, #8]
   149ac:	mov	r6, r2
   149b0:	str	r8, [sp, #16]
   149b4:	mov	r8, r3
   149b8:	strd	sl, [sp, #20]
   149bc:	ldrd	r4, [ip]
   149c0:	str	lr, [sp, #28]
   149c4:	sub	sp, sp, #48	; 0x30
   149c8:	mov	lr, #10
   149cc:	ldrd	r2, [ip, #8]
   149d0:	ldrd	sl, [ip, #16]
   149d4:	strd	r4, [sp]
   149d8:	ldrd	r4, [ip, #32]
   149dc:	str	lr, [sp]
   149e0:	strd	r2, [sp, #8]
   149e4:	strd	sl, [sp, #16]
   149e8:	ldrd	r2, [ip, #24]
   149ec:	ldrd	sl, [ip, #40]	; 0x28
   149f0:	strd	r2, [sp, #24]
   149f4:	strd	r4, [sp, #32]
   149f8:	strd	sl, [sp, #40]	; 0x28
   149fc:	beq	14a38 <__assert_fail@plt+0x3c44>
   14a00:	mov	r7, r1
   14a04:	mov	r3, sp
   14a08:	mov	r1, r8
   14a0c:	mvn	r2, #0
   14a10:	str	r7, [sp, #40]	; 0x28
   14a14:	str	r6, [sp, #44]	; 0x2c
   14a18:	bl	13380 <__assert_fail@plt+0x258c>
   14a1c:	add	sp, sp, #48	; 0x30
   14a20:	ldrd	r4, [sp]
   14a24:	ldrd	r6, [sp, #8]
   14a28:	ldr	r8, [sp, #16]
   14a2c:	ldrd	sl, [sp, #20]
   14a30:	add	sp, sp, #28
   14a34:	pop	{pc}		; (ldr pc, [sp], #4)
   14a38:	bl	10de8 <abort@plt>
   14a3c:	andeq	r8, r2, ip, asr #4
   14a40:	ldr	ip, [pc, #156]	; 14ae4 <__assert_fail@plt+0x3cf0>
   14a44:	cmp	r2, #0
   14a48:	cmpne	r1, #0
   14a4c:	strd	r4, [sp, #-32]!	; 0xffffffe0
   14a50:	strd	r6, [sp, #8]
   14a54:	mov	r6, r2
   14a58:	str	r8, [sp, #16]
   14a5c:	mov	r8, r3
   14a60:	strd	sl, [sp, #20]
   14a64:	ldrd	r4, [ip]
   14a68:	str	lr, [sp, #28]
   14a6c:	sub	sp, sp, #48	; 0x30
   14a70:	mov	lr, #10
   14a74:	ldrd	r2, [ip, #8]
   14a78:	ldrd	sl, [ip, #16]
   14a7c:	strd	r4, [sp]
   14a80:	ldrd	r4, [ip, #32]
   14a84:	str	lr, [sp]
   14a88:	strd	r2, [sp, #8]
   14a8c:	strd	sl, [sp, #16]
   14a90:	ldrd	r2, [ip, #24]
   14a94:	ldrd	sl, [ip, #40]	; 0x28
   14a98:	strd	r2, [sp, #24]
   14a9c:	strd	r4, [sp, #32]
   14aa0:	strd	sl, [sp, #40]	; 0x28
   14aa4:	beq	14ae0 <__assert_fail@plt+0x3cec>
   14aa8:	ldr	r2, [sp, #80]	; 0x50
   14aac:	mov	r7, r1
   14ab0:	mov	r3, sp
   14ab4:	mov	r1, r8
   14ab8:	str	r7, [sp, #40]	; 0x28
   14abc:	str	r6, [sp, #44]	; 0x2c
   14ac0:	bl	13380 <__assert_fail@plt+0x258c>
   14ac4:	add	sp, sp, #48	; 0x30
   14ac8:	ldrd	r4, [sp]
   14acc:	ldrd	r6, [sp, #8]
   14ad0:	ldr	r8, [sp, #16]
   14ad4:	ldrd	sl, [sp, #20]
   14ad8:	add	sp, sp, #28
   14adc:	pop	{pc}		; (ldr pc, [sp], #4)
   14ae0:	bl	10de8 <abort@plt>
   14ae4:	andeq	r8, r2, ip, asr #4
   14ae8:	ldr	ip, [pc, #512]	; 14cf0 <__assert_fail@plt+0x3efc>
   14aec:	cmp	r0, #0
   14af0:	strd	r4, [sp, #-36]!	; 0xffffffdc
   14af4:	ldrd	r4, [ip, #16]
   14af8:	strd	r6, [sp, #8]
   14afc:	clz	r6, r1
   14b00:	mov	r7, r1
   14b04:	strd	r8, [sp, #16]
   14b08:	mov	r8, r0
   14b0c:	lsr	r6, r6, #5
   14b10:	strd	sl, [sp, #24]
   14b14:	mov	fp, r2
   14b18:	mov	sl, #10
   14b1c:	ldrd	r2, [ip]
   14b20:	moveq	r6, #1
   14b24:	str	lr, [sp, #32]
   14b28:	sub	sp, sp, #92	; 0x5c
   14b2c:	cmp	r6, #0
   14b30:	ldrd	r0, [ip, #8]
   14b34:	strd	r2, [sp, #40]	; 0x28
   14b38:	strd	r4, [sp, #56]	; 0x38
   14b3c:	ldrd	r2, [ip, #24]
   14b40:	strd	r0, [sp, #48]	; 0x30
   14b44:	ldrd	r0, [ip, #32]
   14b48:	str	sl, [sp, #40]	; 0x28
   14b4c:	ldrd	r4, [ip, #40]	; 0x28
   14b50:	strd	r2, [sp, #64]	; 0x40
   14b54:	strd	r0, [sp, #72]	; 0x48
   14b58:	strd	r4, [sp, #80]	; 0x50
   14b5c:	bne	14cec <__assert_fail@plt+0x3ef8>
   14b60:	movw	r5, #32992	; 0x80e0
   14b64:	movt	r5, #2
   14b68:	str	r8, [sp, #80]	; 0x50
   14b6c:	str	r7, [sp, #84]	; 0x54
   14b70:	bl	10d4c <__errno_location@plt>
   14b74:	ldr	r3, [r0]
   14b78:	mov	r9, r0
   14b7c:	ldr	r2, [r5, #4]
   14b80:	ldr	r4, [r5]
   14b84:	str	r3, [sp, #28]
   14b88:	cmp	r2, #0
   14b8c:	movgt	r1, sl
   14b90:	bgt	14bf8 <__assert_fail@plt+0x3e04>
   14b94:	add	r3, r5, #8
   14b98:	str	r2, [sp, #36]	; 0x24
   14b9c:	rsb	r2, r2, #1
   14ba0:	cmp	r4, r3
   14ba4:	beq	14cc0 <__assert_fail@plt+0x3ecc>
   14ba8:	mov	r1, #8
   14bac:	mov	r0, r4
   14bb0:	mvn	r3, #-2147483648	; 0x80000000
   14bb4:	str	r1, [sp]
   14bb8:	add	r1, sp, #36	; 0x24
   14bbc:	bl	15ca0 <__assert_fail@plt+0x4eac>
   14bc0:	mov	r4, r0
   14bc4:	str	r0, [r5]
   14bc8:	ldr	r0, [r5, #4]
   14bcc:	mov	r1, #0
   14bd0:	ldr	r2, [sp, #36]	; 0x24
   14bd4:	sub	r2, r2, r0
   14bd8:	add	r0, r4, r0, lsl #3
   14bdc:	lsl	r2, r2, #3
   14be0:	bl	10d64 <memset@plt>
   14be4:	ldr	r3, [sp, #36]	; 0x24
   14be8:	ldr	r1, [sp, #40]	; 0x28
   14bec:	ldr	r8, [sp, #80]	; 0x50
   14bf0:	str	r3, [r5, #4]
   14bf4:	ldr	r7, [sp, #84]	; 0x54
   14bf8:	mvn	r3, #0
   14bfc:	mov	r2, fp
   14c00:	ldr	r6, [sp, #44]	; 0x2c
   14c04:	ldr	sl, [r4]
   14c08:	ldr	r5, [r4, #4]
   14c0c:	orr	r6, r6, #1
   14c10:	stm	sp, {r1, r6}
   14c14:	add	r1, sp, #48	; 0x30
   14c18:	str	r8, [sp, #12]
   14c1c:	mov	r0, r5
   14c20:	str	r1, [sp, #8]
   14c24:	mov	r1, sl
   14c28:	str	r7, [sp, #16]
   14c2c:	bl	11994 <__assert_fail@plt+0xba0>
   14c30:	cmp	sl, r0
   14c34:	bhi	14c98 <__assert_fail@plt+0x3ea4>
   14c38:	add	r7, r0, #1
   14c3c:	movw	r3, #33100	; 0x814c
   14c40:	movt	r3, #2
   14c44:	cmp	r5, r3
   14c48:	str	r7, [r4]
   14c4c:	beq	14c58 <__assert_fail@plt+0x3e64>
   14c50:	mov	r0, r5
   14c54:	bl	168a4 <__assert_fail@plt+0x5ab0>
   14c58:	mov	r0, r7
   14c5c:	bl	159fc <__assert_fail@plt+0x4c08>
   14c60:	ldr	r3, [sp, #40]	; 0x28
   14c64:	mov	r2, fp
   14c68:	mov	r1, r7
   14c6c:	mov	r5, r0
   14c70:	ldr	lr, [sp, #80]	; 0x50
   14c74:	ldr	ip, [sp, #84]	; 0x54
   14c78:	str	r0, [r4, #4]
   14c7c:	add	r4, sp, #48	; 0x30
   14c80:	stm	sp, {r3, r6}
   14c84:	mvn	r3, #0
   14c88:	str	r4, [sp, #8]
   14c8c:	str	lr, [sp, #12]
   14c90:	str	ip, [sp, #16]
   14c94:	bl	11994 <__assert_fail@plt+0xba0>
   14c98:	ldr	r3, [sp, #28]
   14c9c:	mov	r0, r5
   14ca0:	str	r3, [r9]
   14ca4:	add	sp, sp, #92	; 0x5c
   14ca8:	ldrd	r4, [sp]
   14cac:	ldrd	r6, [sp, #8]
   14cb0:	ldrd	r8, [sp, #16]
   14cb4:	ldrd	sl, [sp, #24]
   14cb8:	add	sp, sp, #32
   14cbc:	pop	{pc}		; (ldr pc, [sp], #4)
   14cc0:	mov	r1, #8
   14cc4:	mvn	r3, #-2147483648	; 0x80000000
   14cc8:	mov	r0, r6
   14ccc:	str	r1, [sp]
   14cd0:	add	r1, sp, #36	; 0x24
   14cd4:	bl	15ca0 <__assert_fail@plt+0x4eac>
   14cd8:	ldrd	r2, [r5, #8]
   14cdc:	mov	r4, r0
   14ce0:	str	r0, [r5]
   14ce4:	strd	r2, [r0]
   14ce8:	b	14bc8 <__assert_fail@plt+0x3dd4>
   14cec:	bl	10de8 <abort@plt>
   14cf0:	andeq	r8, r2, ip, asr #4
   14cf4:	ldr	ip, [pc, #536]	; 14f14 <__assert_fail@plt+0x4120>
   14cf8:	cmp	r0, #0
   14cfc:	strd	r4, [sp, #-36]!	; 0xffffffdc
   14d00:	ldrd	r4, [ip, #16]
   14d04:	strd	r6, [sp, #8]
   14d08:	mov	r6, r1
   14d0c:	mov	r7, r0
   14d10:	strd	r8, [sp, #16]
   14d14:	mov	r9, #10
   14d18:	strd	sl, [sp, #24]
   14d1c:	mov	sl, r2
   14d20:	mov	fp, r3
   14d24:	str	lr, [sp, #32]
   14d28:	clz	lr, r1
   14d2c:	sub	sp, sp, #92	; 0x5c
   14d30:	ldrd	r2, [ip]
   14d34:	lsr	lr, lr, #5
   14d38:	moveq	lr, #1
   14d3c:	ldrd	r0, [ip, #8]
   14d40:	cmp	lr, #0
   14d44:	strd	r4, [sp, #56]	; 0x38
   14d48:	ldrd	r4, [ip, #40]	; 0x28
   14d4c:	str	lr, [sp, #28]
   14d50:	strd	r2, [sp, #40]	; 0x28
   14d54:	ldrd	r2, [ip, #24]
   14d58:	strd	r0, [sp, #48]	; 0x30
   14d5c:	ldrd	r0, [ip, #32]
   14d60:	str	r9, [sp, #40]	; 0x28
   14d64:	strd	r2, [sp, #64]	; 0x40
   14d68:	strd	r4, [sp, #80]	; 0x50
   14d6c:	strd	r0, [sp, #72]	; 0x48
   14d70:	bne	14f10 <__assert_fail@plt+0x411c>
   14d74:	movw	r5, #32992	; 0x80e0
   14d78:	movt	r5, #2
   14d7c:	str	r7, [sp, #80]	; 0x50
   14d80:	str	r6, [sp, #84]	; 0x54
   14d84:	bl	10d4c <__errno_location@plt>
   14d88:	ldr	r3, [r0]
   14d8c:	mov	r8, r0
   14d90:	ldr	r2, [r5, #4]
   14d94:	ldr	r4, [r5]
   14d98:	str	r3, [sp, #24]
   14d9c:	cmp	r2, #0
   14da0:	movgt	r1, r9
   14da4:	bgt	14e0c <__assert_fail@plt+0x4018>
   14da8:	add	r3, r5, #8
   14dac:	str	r2, [sp, #36]	; 0x24
   14db0:	rsb	r2, r2, #1
   14db4:	cmp	r4, r3
   14db8:	beq	14ee4 <__assert_fail@plt+0x40f0>
   14dbc:	mov	r1, #8
   14dc0:	mov	r0, r4
   14dc4:	mvn	r3, #-2147483648	; 0x80000000
   14dc8:	str	r1, [sp]
   14dcc:	add	r1, sp, #36	; 0x24
   14dd0:	bl	15ca0 <__assert_fail@plt+0x4eac>
   14dd4:	mov	r4, r0
   14dd8:	str	r0, [r5]
   14ddc:	ldr	r0, [r5, #4]
   14de0:	mov	r1, #0
   14de4:	ldr	r2, [sp, #36]	; 0x24
   14de8:	sub	r2, r2, r0
   14dec:	add	r0, r4, r0, lsl #3
   14df0:	lsl	r2, r2, #3
   14df4:	bl	10d64 <memset@plt>
   14df8:	ldr	r3, [sp, #36]	; 0x24
   14dfc:	ldr	r1, [sp, #40]	; 0x28
   14e00:	ldr	r7, [sp, #80]	; 0x50
   14e04:	str	r3, [r5, #4]
   14e08:	ldr	r6, [sp, #84]	; 0x54
   14e0c:	mov	r3, fp
   14e10:	mov	r2, sl
   14e14:	ldr	r0, [sp, #44]	; 0x2c
   14e18:	ldr	r9, [r4]
   14e1c:	ldr	r5, [r4, #4]
   14e20:	orr	r0, r0, #1
   14e24:	str	r1, [sp]
   14e28:	add	r1, sp, #48	; 0x30
   14e2c:	str	r0, [sp, #4]
   14e30:	str	r1, [sp, #8]
   14e34:	mov	r1, r9
   14e38:	str	r7, [sp, #12]
   14e3c:	str	r6, [sp, #16]
   14e40:	str	r0, [sp, #28]
   14e44:	mov	r0, r5
   14e48:	bl	11994 <__assert_fail@plt+0xba0>
   14e4c:	cmp	r9, r0
   14e50:	bhi	14ebc <__assert_fail@plt+0x40c8>
   14e54:	add	r6, r0, #1
   14e58:	movw	r3, #33100	; 0x814c
   14e5c:	movt	r3, #2
   14e60:	cmp	r5, r3
   14e64:	str	r6, [r4]
   14e68:	beq	14e74 <__assert_fail@plt+0x4080>
   14e6c:	mov	r0, r5
   14e70:	bl	168a4 <__assert_fail@plt+0x5ab0>
   14e74:	mov	r0, r6
   14e78:	bl	159fc <__assert_fail@plt+0x4c08>
   14e7c:	ldr	lr, [sp, #40]	; 0x28
   14e80:	mov	r1, r6
   14e84:	mov	r3, fp
   14e88:	mov	r2, sl
   14e8c:	mov	r5, r0
   14e90:	ldr	r6, [sp, #80]	; 0x50
   14e94:	ldr	ip, [sp, #84]	; 0x54
   14e98:	str	r0, [r4, #4]
   14e9c:	str	lr, [sp]
   14ea0:	ldr	lr, [sp, #28]
   14ea4:	str	lr, [sp, #4]
   14ea8:	add	lr, sp, #48	; 0x30
   14eac:	str	r6, [sp, #12]
   14eb0:	str	lr, [sp, #8]
   14eb4:	str	ip, [sp, #16]
   14eb8:	bl	11994 <__assert_fail@plt+0xba0>
   14ebc:	ldr	r3, [sp, #24]
   14ec0:	mov	r0, r5
   14ec4:	str	r3, [r8]
   14ec8:	add	sp, sp, #92	; 0x5c
   14ecc:	ldrd	r4, [sp]
   14ed0:	ldrd	r6, [sp, #8]
   14ed4:	ldrd	r8, [sp, #16]
   14ed8:	ldrd	sl, [sp, #24]
   14edc:	add	sp, sp, #32
   14ee0:	pop	{pc}		; (ldr pc, [sp], #4)
   14ee4:	mov	r1, #8
   14ee8:	mvn	r3, #-2147483648	; 0x80000000
   14eec:	ldr	r0, [sp, #28]
   14ef0:	str	r1, [sp]
   14ef4:	add	r1, sp, #36	; 0x24
   14ef8:	bl	15ca0 <__assert_fail@plt+0x4eac>
   14efc:	ldrd	r2, [r5, #8]
   14f00:	mov	r4, r0
   14f04:	str	r0, [r5]
   14f08:	strd	r2, [r0]
   14f0c:	b	14ddc <__assert_fail@plt+0x3fe8>
   14f10:	bl	10de8 <abort@plt>
   14f14:	andeq	r8, r2, ip, asr #4
   14f18:	ldr	r3, [pc]	; 14f20 <__assert_fail@plt+0x412c>
   14f1c:	b	13380 <__assert_fail@plt+0x258c>
   14f20:	strdeq	r8, [r2], -r0
   14f24:	strd	r4, [sp, #-36]!	; 0xffffffdc
   14f28:	movw	r4, #32992	; 0x80e0
   14f2c:	movt	r4, #2
   14f30:	strd	r6, [sp, #8]
   14f34:	strd	r8, [sp, #16]
   14f38:	strd	sl, [sp, #24]
   14f3c:	mov	sl, r0
   14f40:	mov	fp, r1
   14f44:	str	lr, [sp, #32]
   14f48:	sub	sp, sp, #44	; 0x2c
   14f4c:	bl	10d4c <__errno_location@plt>
   14f50:	ldr	r3, [r0]
   14f54:	mov	r8, r0
   14f58:	ldr	r2, [r4, #4]
   14f5c:	ldr	r5, [r4]
   14f60:	str	r3, [sp, #28]
   14f64:	cmp	r2, #0
   14f68:	bgt	14fc4 <__assert_fail@plt+0x41d0>
   14f6c:	add	r3, r4, #8
   14f70:	str	r2, [sp, #36]	; 0x24
   14f74:	rsb	r2, r2, #1
   14f78:	cmp	r5, r3
   14f7c:	beq	150a0 <__assert_fail@plt+0x42ac>
   14f80:	mov	r1, #8
   14f84:	mov	r0, r5
   14f88:	mvn	r3, #-2147483648	; 0x80000000
   14f8c:	str	r1, [sp]
   14f90:	add	r1, sp, #36	; 0x24
   14f94:	bl	15ca0 <__assert_fail@plt+0x4eac>
   14f98:	mov	r5, r0
   14f9c:	str	r0, [r4]
   14fa0:	ldr	r0, [r4, #4]
   14fa4:	mov	r1, #0
   14fa8:	ldr	r2, [sp, #36]	; 0x24
   14fac:	sub	r2, r2, r0
   14fb0:	add	r0, r5, r0, lsl #3
   14fb4:	lsl	r2, r2, #3
   14fb8:	bl	10d64 <memset@plt>
   14fbc:	ldr	r3, [sp, #36]	; 0x24
   14fc0:	str	r3, [r4, #4]
   14fc4:	ldr	ip, [r4, #16]
   14fc8:	mov	r3, fp
   14fcc:	mov	r2, sl
   14fd0:	ldr	r7, [r4, #20]
   14fd4:	ldr	r0, [pc, #240]	; 150cc <__assert_fail@plt+0x42d8>
   14fd8:	ldr	r9, [r5]
   14fdc:	orr	r7, r7, #1
   14fe0:	ldr	r6, [r5, #4]
   14fe4:	str	ip, [sp]
   14fe8:	ldr	ip, [r4, #56]	; 0x38
   14fec:	mov	r1, r9
   14ff0:	str	r7, [sp, #4]
   14ff4:	ldr	lr, [r4, #60]	; 0x3c
   14ff8:	str	r0, [sp, #8]
   14ffc:	mov	r0, r6
   15000:	str	ip, [sp, #12]
   15004:	str	lr, [sp, #16]
   15008:	bl	11994 <__assert_fail@plt+0xba0>
   1500c:	cmp	r9, r0
   15010:	bhi	15078 <__assert_fail@plt+0x4284>
   15014:	add	r9, r0, #1
   15018:	movw	r3, #33100	; 0x814c
   1501c:	movt	r3, #2
   15020:	cmp	r6, r3
   15024:	str	r9, [r5]
   15028:	beq	15034 <__assert_fail@plt+0x4240>
   1502c:	mov	r0, r6
   15030:	bl	168a4 <__assert_fail@plt+0x5ab0>
   15034:	mov	r0, r9
   15038:	bl	159fc <__assert_fail@plt+0x4c08>
   1503c:	ldr	ip, [r4, #16]
   15040:	mov	r1, r9
   15044:	mov	r3, fp
   15048:	mov	r2, sl
   1504c:	mov	r6, r0
   15050:	ldr	r9, [r4, #56]	; 0x38
   15054:	ldr	lr, [r4, #60]	; 0x3c
   15058:	str	r0, [r5, #4]
   1505c:	str	ip, [sp]
   15060:	ldr	ip, [pc, #100]	; 150cc <__assert_fail@plt+0x42d8>
   15064:	str	r7, [sp, #4]
   15068:	str	ip, [sp, #8]
   1506c:	str	r9, [sp, #12]
   15070:	str	lr, [sp, #16]
   15074:	bl	11994 <__assert_fail@plt+0xba0>
   15078:	ldr	r3, [sp, #28]
   1507c:	mov	r0, r6
   15080:	str	r3, [r8]
   15084:	add	sp, sp, #44	; 0x2c
   15088:	ldrd	r4, [sp]
   1508c:	ldrd	r6, [sp, #8]
   15090:	ldrd	r8, [sp, #16]
   15094:	ldrd	sl, [sp, #24]
   15098:	add	sp, sp, #32
   1509c:	pop	{pc}		; (ldr pc, [sp], #4)
   150a0:	mov	r0, #8
   150a4:	mvn	r3, #-2147483648	; 0x80000000
   150a8:	add	r1, sp, #36	; 0x24
   150ac:	str	r0, [sp]
   150b0:	mov	r0, #0
   150b4:	bl	15ca0 <__assert_fail@plt+0x4eac>
   150b8:	ldrd	r2, [r4, #8]
   150bc:	mov	r5, r0
   150c0:	str	r0, [r4]
   150c4:	strd	r2, [r0]
   150c8:	b	14fa0 <__assert_fail@plt+0x41ac>
   150cc:	strdeq	r8, [r2], -r8	; <UNPREDICTABLE>
   150d0:	ldr	r3, [pc, #4]	; 150dc <__assert_fail@plt+0x42e8>
   150d4:	mvn	r2, #0
   150d8:	b	13380 <__assert_fail@plt+0x258c>
   150dc:	strdeq	r8, [r2], -r0
   150e0:	strd	r4, [sp, #-36]!	; 0xffffffdc
   150e4:	movw	r4, #32992	; 0x80e0
   150e8:	movt	r4, #2
   150ec:	strd	r6, [sp, #8]
   150f0:	strd	r8, [sp, #16]
   150f4:	strd	sl, [sp, #24]
   150f8:	mov	sl, r0
   150fc:	str	lr, [sp, #32]
   15100:	sub	sp, sp, #44	; 0x2c
   15104:	bl	10d4c <__errno_location@plt>
   15108:	ldr	r3, [r0]
   1510c:	mov	r8, r0
   15110:	ldr	r2, [r4, #4]
   15114:	ldr	r5, [r4]
   15118:	str	r3, [sp, #28]
   1511c:	cmp	r2, #0
   15120:	bgt	1517c <__assert_fail@plt+0x4388>
   15124:	add	r3, r4, #8
   15128:	str	r2, [sp, #36]	; 0x24
   1512c:	rsb	r2, r2, #1
   15130:	cmp	r5, r3
   15134:	beq	15244 <__assert_fail@plt+0x4450>
   15138:	mov	r1, #8
   1513c:	mov	r0, r5
   15140:	mvn	r3, #-2147483648	; 0x80000000
   15144:	str	r1, [sp]
   15148:	add	r1, sp, #36	; 0x24
   1514c:	bl	15ca0 <__assert_fail@plt+0x4eac>
   15150:	mov	r5, r0
   15154:	str	r0, [r4]
   15158:	ldr	r0, [r4, #4]
   1515c:	mov	r1, #0
   15160:	ldr	r2, [sp, #36]	; 0x24
   15164:	sub	r2, r2, r0
   15168:	add	r0, r5, r0, lsl #3
   1516c:	lsl	r2, r2, #3
   15170:	bl	10d64 <memset@plt>
   15174:	ldr	r3, [sp, #36]	; 0x24
   15178:	str	r3, [r4, #4]
   1517c:	ldr	ip, [r4, #16]
   15180:	mvn	r3, #0
   15184:	mov	r2, sl
   15188:	ldr	r7, [r4, #20]
   1518c:	ldr	fp, [pc, #220]	; 15270 <__assert_fail@plt+0x447c>
   15190:	ldr	r9, [r5]
   15194:	orr	r7, r7, #1
   15198:	ldr	r6, [r5, #4]
   1519c:	str	ip, [sp]
   151a0:	ldr	ip, [r4, #56]	; 0x38
   151a4:	mov	r1, r9
   151a8:	stmib	sp, {r7, fp}
   151ac:	ldr	lr, [r4, #60]	; 0x3c
   151b0:	mov	r0, r6
   151b4:	str	ip, [sp, #12]
   151b8:	str	lr, [sp, #16]
   151bc:	bl	11994 <__assert_fail@plt+0xba0>
   151c0:	cmp	r9, r0
   151c4:	bhi	1521c <__assert_fail@plt+0x4428>
   151c8:	add	r9, r0, #1
   151cc:	movw	r3, #33100	; 0x814c
   151d0:	movt	r3, #2
   151d4:	cmp	r6, r3
   151d8:	str	r9, [r5]
   151dc:	beq	151e8 <__assert_fail@plt+0x43f4>
   151e0:	mov	r0, r6
   151e4:	bl	168a4 <__assert_fail@plt+0x5ab0>
   151e8:	mov	r0, r9
   151ec:	bl	159fc <__assert_fail@plt+0x4c08>
   151f0:	ldr	r3, [r4, #16]
   151f4:	mov	r2, sl
   151f8:	mov	r1, r9
   151fc:	mov	r6, r0
   15200:	ldr	lr, [r4, #56]	; 0x38
   15204:	ldr	ip, [r4, #60]	; 0x3c
   15208:	str	r0, [r5, #4]
   1520c:	stm	sp, {r3, r7, fp, lr}
   15210:	mvn	r3, #0
   15214:	str	ip, [sp, #16]
   15218:	bl	11994 <__assert_fail@plt+0xba0>
   1521c:	ldr	r3, [sp, #28]
   15220:	mov	r0, r6
   15224:	str	r3, [r8]
   15228:	add	sp, sp, #44	; 0x2c
   1522c:	ldrd	r4, [sp]
   15230:	ldrd	r6, [sp, #8]
   15234:	ldrd	r8, [sp, #16]
   15238:	ldrd	sl, [sp, #24]
   1523c:	add	sp, sp, #32
   15240:	pop	{pc}		; (ldr pc, [sp], #4)
   15244:	mov	r0, #8
   15248:	mvn	r3, #-2147483648	; 0x80000000
   1524c:	add	r1, sp, #36	; 0x24
   15250:	str	r0, [sp]
   15254:	mov	r0, #0
   15258:	bl	15ca0 <__assert_fail@plt+0x4eac>
   1525c:	ldrd	r2, [r4, #8]
   15260:	mov	r5, r0
   15264:	str	r0, [r4]
   15268:	strd	r2, [r0]
   1526c:	b	15158 <__assert_fail@plt+0x4364>
   15270:	strdeq	r8, [r2], -r8	; <UNPREDICTABLE>
   15274:	cmp	r1, #0
   15278:	strd	r4, [sp, #-16]!
   1527c:	mov	ip, r3
   15280:	str	r6, [sp, #8]
   15284:	mov	r4, r0
   15288:	str	lr, [sp, #12]
   1528c:	sub	sp, sp, #32
   15290:	ldr	r5, [sp, #48]	; 0x30
   15294:	ldr	r6, [sp, #52]	; 0x34
   15298:	beq	153dc <__assert_fail@plt+0x45e8>
   1529c:	mov	r3, r1
   152a0:	mov	r1, #1
   152a4:	stm	sp, {r2, ip}
   152a8:	movw	r2, #29460	; 0x7314
   152ac:	movt	r2, #1
   152b0:	bl	10d88 <__fprintf_chk@plt>
   152b4:	mov	r2, #5
   152b8:	movw	r1, #29480	; 0x7328
   152bc:	movt	r1, #1
   152c0:	mov	r0, #0
   152c4:	bl	10c50 <dcgettext@plt>
   152c8:	movw	ip, #2022	; 0x7e6
   152cc:	mov	r3, r0
   152d0:	mov	r1, #1
   152d4:	movw	r2, #30208	; 0x7600
   152d8:	movt	r2, #1
   152dc:	mov	r0, r4
   152e0:	str	ip, [sp]
   152e4:	bl	10d88 <__fprintf_chk@plt>
   152e8:	mov	r1, r4
   152ec:	mov	r0, #10
   152f0:	bl	10c44 <fputc_unlocked@plt>
   152f4:	mov	r2, #5
   152f8:	movw	r1, #29484	; 0x732c
   152fc:	movt	r1, #1
   15300:	mov	r0, #0
   15304:	bl	10c50 <dcgettext@plt>
   15308:	mov	r2, r0
   1530c:	mov	r1, #1
   15310:	movw	r3, #29656	; 0x73d8
   15314:	movt	r3, #1
   15318:	mov	r0, r4
   1531c:	bl	10d88 <__fprintf_chk@plt>
   15320:	mov	r1, r4
   15324:	mov	r0, #10
   15328:	bl	10c44 <fputc_unlocked@plt>
   1532c:	cmp	r6, #9
   15330:	ldrls	pc, [pc, r6, lsl #2]
   15334:	b	15648 <__assert_fail@plt+0x4854>
   15338:	andeq	r5, r1, r8, asr #7
   1533c:	strdeq	r5, [r1], -r8
   15340:	andeq	r5, r1, r4, lsr r4
   15344:	andeq	r5, r1, r4, ror r4
   15348:			; <UNDEFINED> instruction: 0x000154bc
   1534c:	strdeq	r5, [r1], -r4
   15350:	andeq	r5, r1, ip, lsr r5
   15354:	muleq	r1, r0, r5
   15358:	andeq	r5, r1, r8, ror #11
   1535c:	andeq	r5, r1, r0, ror #6
   15360:	movw	r1, #29960	; 0x7508
   15364:	movt	r1, #1
   15368:	mov	r2, #5
   1536c:	mov	r0, #0
   15370:	bl	10c50 <dcgettext@plt>
   15374:	ldr	lr, [r5, #4]
   15378:	mov	r2, r0
   1537c:	mov	r1, #1
   15380:	mov	r0, r4
   15384:	ldr	r3, [r5, #8]
   15388:	ldr	ip, [r5, #32]
   1538c:	str	lr, [sp]
   15390:	ldr	lr, [r5, #12]
   15394:	str	ip, [sp, #28]
   15398:	ldr	ip, [r5, #28]
   1539c:	str	r3, [sp, #4]
   153a0:	ldr	r3, [r5, #16]
   153a4:	str	lr, [sp, #8]
   153a8:	ldr	lr, [r5, #20]
   153ac:	str	ip, [sp, #24]
   153b0:	ldr	ip, [r5, #24]
   153b4:	str	r3, [sp, #12]
   153b8:	ldr	r3, [r5]
   153bc:	str	lr, [sp, #16]
   153c0:	str	ip, [sp, #20]
   153c4:	bl	10d88 <__fprintf_chk@plt>
   153c8:	add	sp, sp, #32
   153cc:	ldrd	r4, [sp]
   153d0:	ldr	r6, [sp, #8]
   153d4:	add	sp, sp, #12
   153d8:	pop	{pc}		; (ldr pc, [sp], #4)
   153dc:	mov	r3, r2
   153e0:	mov	r1, #1
   153e4:	str	ip, [sp]
   153e8:	movw	r2, #29472	; 0x7320
   153ec:	movt	r2, #1
   153f0:	bl	10d88 <__fprintf_chk@plt>
   153f4:	b	152b4 <__assert_fail@plt+0x44c0>
   153f8:	mov	r2, #5
   153fc:	movw	r1, #29692	; 0x73fc
   15400:	movt	r1, #1
   15404:	mov	r0, #0
   15408:	bl	10c50 <dcgettext@plt>
   1540c:	ldr	r3, [r5]
   15410:	mov	r2, r0
   15414:	mov	r1, #1
   15418:	mov	r0, r4
   1541c:	add	sp, sp, #32
   15420:	ldrd	r4, [sp]
   15424:	ldr	r6, [sp, #8]
   15428:	ldr	lr, [sp, #12]
   1542c:	add	sp, sp, #16
   15430:	b	10d88 <__fprintf_chk@plt>
   15434:	mov	r2, #5
   15438:	movw	r1, #29708	; 0x740c
   1543c:	movt	r1, #1
   15440:	mov	r0, #0
   15444:	bl	10c50 <dcgettext@plt>
   15448:	ldm	r5, {r3, ip}
   1544c:	mov	r2, r0
   15450:	mov	r1, #1
   15454:	mov	r0, r4
   15458:	str	ip, [sp, #48]	; 0x30
   1545c:	add	sp, sp, #32
   15460:	ldrd	r4, [sp]
   15464:	ldr	r6, [sp, #8]
   15468:	ldr	lr, [sp, #12]
   1546c:	add	sp, sp, #16
   15470:	b	10d88 <__fprintf_chk@plt>
   15474:	mov	r2, #5
   15478:	movw	r1, #29732	; 0x7424
   1547c:	movt	r1, #1
   15480:	mov	r0, #0
   15484:	bl	10c50 <dcgettext@plt>
   15488:	ldm	r5, {r3, lr}
   1548c:	mov	r2, r0
   15490:	mov	r1, #1
   15494:	mov	r0, r4
   15498:	ldr	ip, [r5, #8]
   1549c:	str	lr, [sp, #48]	; 0x30
   154a0:	str	ip, [sp, #52]	; 0x34
   154a4:	add	sp, sp, #32
   154a8:	ldrd	r4, [sp]
   154ac:	ldr	r6, [sp, #8]
   154b0:	ldr	lr, [sp, #12]
   154b4:	add	sp, sp, #16
   154b8:	b	10d88 <__fprintf_chk@plt>
   154bc:	mov	r2, #5
   154c0:	movw	r1, #29760	; 0x7440
   154c4:	movt	r1, #1
   154c8:	mov	r0, #0
   154cc:	bl	10c50 <dcgettext@plt>
   154d0:	ldmib	r5, {r3, ip, lr}
   154d4:	mov	r2, r0
   154d8:	mov	r1, #1
   154dc:	mov	r0, r4
   154e0:	str	r3, [sp]
   154e4:	ldr	r3, [r5]
   154e8:	stmib	sp, {ip, lr}
   154ec:	bl	10d88 <__fprintf_chk@plt>
   154f0:	b	153c8 <__assert_fail@plt+0x45d4>
   154f4:	mov	r2, #5
   154f8:	movw	r1, #29792	; 0x7460
   154fc:	movt	r1, #1
   15500:	mov	r0, #0
   15504:	bl	10c50 <dcgettext@plt>
   15508:	ldmib	r5, {ip, lr}
   1550c:	mov	r2, r0
   15510:	mov	r1, #1
   15514:	mov	r0, r4
   15518:	ldr	r3, [r5, #16]
   1551c:	str	ip, [sp]
   15520:	ldr	ip, [r5, #12]
   15524:	str	r3, [sp, #12]
   15528:	ldr	r3, [r5]
   1552c:	str	lr, [sp, #4]
   15530:	str	ip, [sp, #8]
   15534:	bl	10d88 <__fprintf_chk@plt>
   15538:	b	153c8 <__assert_fail@plt+0x45d4>
   1553c:	mov	r2, #5
   15540:	movw	r1, #29828	; 0x7484
   15544:	movt	r1, #1
   15548:	mov	r0, #0
   1554c:	bl	10c50 <dcgettext@plt>
   15550:	ldr	lr, [r5, #4]
   15554:	mov	r2, r0
   15558:	mov	r1, #1
   1555c:	mov	r0, r4
   15560:	ldr	r3, [r5, #8]
   15564:	ldr	ip, [r5, #20]
   15568:	str	lr, [sp]
   1556c:	ldr	lr, [r5, #12]
   15570:	str	ip, [sp, #16]
   15574:	ldr	ip, [r5, #16]
   15578:	str	r3, [sp, #4]
   1557c:	ldr	r3, [r5]
   15580:	str	lr, [sp, #8]
   15584:	str	ip, [sp, #12]
   15588:	bl	10d88 <__fprintf_chk@plt>
   1558c:	b	153c8 <__assert_fail@plt+0x45d4>
   15590:	mov	r2, #5
   15594:	movw	r1, #29868	; 0x74ac
   15598:	movt	r1, #1
   1559c:	mov	r0, #0
   155a0:	bl	10c50 <dcgettext@plt>
   155a4:	ldmib	r5, {r3, ip}
   155a8:	mov	r2, r0
   155ac:	mov	r1, #1
   155b0:	mov	r0, r4
   155b4:	ldr	lr, [r5, #24]
   155b8:	str	r3, [sp]
   155bc:	ldr	r3, [r5, #12]
   155c0:	str	lr, [sp, #20]
   155c4:	ldr	lr, [r5, #20]
   155c8:	str	ip, [sp, #4]
   155cc:	ldr	ip, [r5, #16]
   155d0:	str	r3, [sp, #8]
   155d4:	ldr	r3, [r5]
   155d8:	str	ip, [sp, #12]
   155dc:	str	lr, [sp, #16]
   155e0:	bl	10d88 <__fprintf_chk@plt>
   155e4:	b	153c8 <__assert_fail@plt+0x45d4>
   155e8:	mov	r2, #5
   155ec:	movw	r1, #29912	; 0x74d8
   155f0:	movt	r1, #1
   155f4:	mov	r0, #0
   155f8:	bl	10c50 <dcgettext@plt>
   155fc:	ldmib	r5, {ip, lr}
   15600:	mov	r2, r0
   15604:	mov	r1, #1
   15608:	mov	r0, r4
   1560c:	ldr	r3, [r5, #28]
   15610:	str	ip, [sp]
   15614:	ldr	ip, [r5, #12]
   15618:	str	r3, [sp, #24]
   1561c:	ldr	r3, [r5, #24]
   15620:	str	lr, [sp, #4]
   15624:	ldr	lr, [r5, #16]
   15628:	str	ip, [sp, #8]
   1562c:	ldr	ip, [r5, #20]
   15630:	str	r3, [sp, #20]
   15634:	ldr	r3, [r5]
   15638:	str	lr, [sp, #12]
   1563c:	str	ip, [sp, #16]
   15640:	bl	10d88 <__fprintf_chk@plt>
   15644:	b	153c8 <__assert_fail@plt+0x45d4>
   15648:	movw	r1, #30012	; 0x753c
   1564c:	movt	r1, #1
   15650:	b	15368 <__assert_fail@plt+0x4574>
   15654:	strd	r4, [sp, #-12]!
   15658:	str	lr, [sp, #8]
   1565c:	sub	sp, sp, #12
   15660:	ldr	r5, [sp, #24]
   15664:	ldr	ip, [r5]
   15668:	cmp	ip, #0
   1566c:	beq	15688 <__assert_fail@plt+0x4894>
   15670:	mov	lr, r5
   15674:	mov	ip, #0
   15678:	ldr	r4, [lr, #4]!
   1567c:	add	ip, ip, #1
   15680:	cmp	r4, #0
   15684:	bne	15678 <__assert_fail@plt+0x4884>
   15688:	stm	sp, {r5, ip}
   1568c:	bl	15274 <__assert_fail@plt+0x4480>
   15690:	add	sp, sp, #12
   15694:	ldrd	r4, [sp]
   15698:	add	sp, sp, #8
   1569c:	pop	{pc}		; (ldr pc, [sp], #4)
   156a0:	push	{lr}		; (str lr, [sp, #-4]!)
   156a4:	sub	sp, sp, #52	; 0x34
   156a8:	ldr	ip, [sp, #56]	; 0x38
   156ac:	ldr	lr, [ip]
   156b0:	cmp	lr, #0
   156b4:	str	lr, [sp, #8]
   156b8:	beq	15750 <__assert_fail@plt+0x495c>
   156bc:	ldr	lr, [ip, #4]
   156c0:	cmp	lr, #0
   156c4:	str	lr, [sp, #12]
   156c8:	beq	15764 <__assert_fail@plt+0x4970>
   156cc:	ldr	lr, [ip, #8]
   156d0:	cmp	lr, #0
   156d4:	str	lr, [sp, #16]
   156d8:	beq	1576c <__assert_fail@plt+0x4978>
   156dc:	ldr	lr, [ip, #12]
   156e0:	cmp	lr, #0
   156e4:	str	lr, [sp, #20]
   156e8:	beq	15774 <__assert_fail@plt+0x4980>
   156ec:	ldr	lr, [ip, #16]
   156f0:	cmp	lr, #0
   156f4:	str	lr, [sp, #24]
   156f8:	beq	1577c <__assert_fail@plt+0x4988>
   156fc:	ldr	lr, [ip, #20]
   15700:	cmp	lr, #0
   15704:	str	lr, [sp, #28]
   15708:	beq	15784 <__assert_fail@plt+0x4990>
   1570c:	ldr	lr, [ip, #24]
   15710:	cmp	lr, #0
   15714:	str	lr, [sp, #32]
   15718:	beq	1578c <__assert_fail@plt+0x4998>
   1571c:	ldr	lr, [ip, #28]
   15720:	cmp	lr, #0
   15724:	str	lr, [sp, #36]	; 0x24
   15728:	beq	15794 <__assert_fail@plt+0x49a0>
   1572c:	ldr	lr, [ip, #32]
   15730:	cmp	lr, #0
   15734:	str	lr, [sp, #40]	; 0x28
   15738:	beq	1579c <__assert_fail@plt+0x49a8>
   1573c:	ldr	ip, [ip, #36]	; 0x24
   15740:	cmp	ip, #0
   15744:	str	ip, [sp, #44]	; 0x2c
   15748:	movne	lr, #10
   1574c:	moveq	lr, #9
   15750:	add	ip, sp, #8
   15754:	stm	sp, {ip, lr}
   15758:	bl	15274 <__assert_fail@plt+0x4480>
   1575c:	add	sp, sp, #52	; 0x34
   15760:	pop	{pc}		; (ldr pc, [sp], #4)
   15764:	mov	lr, #1
   15768:	b	15750 <__assert_fail@plt+0x495c>
   1576c:	mov	lr, #2
   15770:	b	15750 <__assert_fail@plt+0x495c>
   15774:	mov	lr, #3
   15778:	b	15750 <__assert_fail@plt+0x495c>
   1577c:	mov	lr, #4
   15780:	b	15750 <__assert_fail@plt+0x495c>
   15784:	mov	lr, #5
   15788:	b	15750 <__assert_fail@plt+0x495c>
   1578c:	mov	lr, #6
   15790:	b	15750 <__assert_fail@plt+0x495c>
   15794:	mov	lr, #7
   15798:	b	15750 <__assert_fail@plt+0x495c>
   1579c:	mov	lr, #8
   157a0:	b	15750 <__assert_fail@plt+0x495c>
   157a4:	push	{r3}		; (str r3, [sp, #-4]!)
   157a8:	push	{lr}		; (str lr, [sp, #-4]!)
   157ac:	sub	sp, sp, #56	; 0x38
   157b0:	ldr	ip, [sp, #64]	; 0x40
   157b4:	add	r3, sp, #64	; 0x40
   157b8:	str	r3, [sp, #12]
   157bc:	cmp	ip, #0
   157c0:	str	ip, [sp, #16]
   157c4:	beq	1585c <__assert_fail@plt+0x4a68>
   157c8:	ldr	ip, [sp, #68]	; 0x44
   157cc:	cmp	ip, #0
   157d0:	str	ip, [sp, #20]
   157d4:	beq	15880 <__assert_fail@plt+0x4a8c>
   157d8:	ldr	ip, [sp, #72]	; 0x48
   157dc:	cmp	ip, #0
   157e0:	str	ip, [sp, #24]
   157e4:	beq	15888 <__assert_fail@plt+0x4a94>
   157e8:	ldr	ip, [sp, #76]	; 0x4c
   157ec:	cmp	ip, #0
   157f0:	str	ip, [sp, #28]
   157f4:	beq	15890 <__assert_fail@plt+0x4a9c>
   157f8:	ldr	ip, [sp, #80]	; 0x50
   157fc:	cmp	ip, #0
   15800:	str	ip, [sp, #32]
   15804:	beq	15898 <__assert_fail@plt+0x4aa4>
   15808:	ldr	ip, [sp, #84]	; 0x54
   1580c:	cmp	ip, #0
   15810:	str	ip, [sp, #36]	; 0x24
   15814:	beq	158a0 <__assert_fail@plt+0x4aac>
   15818:	ldr	ip, [sp, #88]	; 0x58
   1581c:	cmp	ip, #0
   15820:	str	ip, [sp, #40]	; 0x28
   15824:	beq	158a8 <__assert_fail@plt+0x4ab4>
   15828:	ldr	ip, [sp, #92]	; 0x5c
   1582c:	cmp	ip, #0
   15830:	str	ip, [sp, #44]	; 0x2c
   15834:	beq	158b0 <__assert_fail@plt+0x4abc>
   15838:	ldr	ip, [sp, #96]	; 0x60
   1583c:	cmp	ip, #0
   15840:	str	ip, [sp, #48]	; 0x30
   15844:	beq	158b8 <__assert_fail@plt+0x4ac4>
   15848:	ldr	r3, [sp, #100]	; 0x64
   1584c:	cmp	r3, #0
   15850:	str	r3, [sp, #52]	; 0x34
   15854:	movne	ip, #10
   15858:	moveq	ip, #9
   1585c:	ldr	r3, [sp, #60]	; 0x3c
   15860:	add	lr, sp, #16
   15864:	str	lr, [sp]
   15868:	str	ip, [sp, #4]
   1586c:	bl	15274 <__assert_fail@plt+0x4480>
   15870:	add	sp, sp, #56	; 0x38
   15874:	pop	{lr}		; (ldr lr, [sp], #4)
   15878:	add	sp, sp, #4
   1587c:	bx	lr
   15880:	mov	ip, #1
   15884:	b	1585c <__assert_fail@plt+0x4a68>
   15888:	mov	ip, #2
   1588c:	b	1585c <__assert_fail@plt+0x4a68>
   15890:	mov	ip, #3
   15894:	b	1585c <__assert_fail@plt+0x4a68>
   15898:	mov	ip, #4
   1589c:	b	1585c <__assert_fail@plt+0x4a68>
   158a0:	mov	ip, #5
   158a4:	b	1585c <__assert_fail@plt+0x4a68>
   158a8:	mov	ip, #6
   158ac:	b	1585c <__assert_fail@plt+0x4a68>
   158b0:	mov	ip, #7
   158b4:	b	1585c <__assert_fail@plt+0x4a68>
   158b8:	mov	ip, #8
   158bc:	b	1585c <__assert_fail@plt+0x4a68>
   158c0:	movw	r3, #33076	; 0x8134
   158c4:	movt	r3, #2
   158c8:	str	r4, [sp, #-8]!
   158cc:	mov	r0, #10
   158d0:	ldr	r1, [r3]
   158d4:	str	lr, [sp, #4]
   158d8:	bl	10c44 <fputc_unlocked@plt>
   158dc:	mov	r2, #5
   158e0:	movw	r1, #30072	; 0x7578
   158e4:	movt	r1, #1
   158e8:	mov	r0, #0
   158ec:	bl	10c50 <dcgettext@plt>
   158f0:	mov	r1, r0
   158f4:	movw	r2, #30092	; 0x758c
   158f8:	movt	r2, #1
   158fc:	mov	r0, #1
   15900:	bl	10d70 <__printf_chk@plt>
   15904:	mov	r2, #5
   15908:	movw	r1, #30116	; 0x75a4
   1590c:	movt	r1, #1
   15910:	mov	r0, #0
   15914:	bl	10c50 <dcgettext@plt>
   15918:	mov	r1, r0
   1591c:	movw	r3, #28652	; 0x6fec
   15920:	movt	r3, #1
   15924:	movw	r2, #28692	; 0x7014
   15928:	movt	r2, #1
   1592c:	mov	r0, #1
   15930:	bl	10d70 <__printf_chk@plt>
   15934:	mov	r2, #5
   15938:	movw	r1, #30136	; 0x75b8
   1593c:	movt	r1, #1
   15940:	mov	r0, #0
   15944:	bl	10c50 <dcgettext@plt>
   15948:	mov	r1, r0
   1594c:	movw	r2, #30176	; 0x75e0
   15950:	movt	r2, #1
   15954:	mov	r0, #1
   15958:	ldr	r4, [sp]
   1595c:	ldr	lr, [sp, #4]
   15960:	add	sp, sp, #8
   15964:	b	10d70 <__printf_chk@plt>
   15968:	strd	r4, [sp, #-16]!
   1596c:	mov	r4, r0
   15970:	mov	r5, r2
   15974:	str	r6, [sp, #8]
   15978:	mov	r6, r1
   1597c:	str	lr, [sp, #12]
   15980:	bl	16a90 <__assert_fail@plt+0x5c9c>
   15984:	cmp	r0, #0
   15988:	beq	1599c <__assert_fail@plt+0x4ba8>
   1598c:	ldrd	r4, [sp]
   15990:	ldr	r6, [sp, #8]
   15994:	add	sp, sp, #12
   15998:	pop	{pc}		; (ldr pc, [sp], #4)
   1599c:	cmp	r4, #0
   159a0:	beq	159b0 <__assert_fail@plt+0x4bbc>
   159a4:	cmp	r6, #0
   159a8:	cmpne	r5, #0
   159ac:	beq	1598c <__assert_fail@plt+0x4b98>
   159b0:	bl	15f6c <__assert_fail@plt+0x5178>
   159b4:	str	r4, [sp, #-8]!
   159b8:	str	lr, [sp, #4]
   159bc:	bl	16674 <__assert_fail@plt+0x5880>
   159c0:	cmp	r0, #0
   159c4:	beq	159d4 <__assert_fail@plt+0x4be0>
   159c8:	ldr	r4, [sp]
   159cc:	add	sp, sp, #4
   159d0:	pop	{pc}		; (ldr pc, [sp], #4)
   159d4:	bl	15f6c <__assert_fail@plt+0x5178>
   159d8:	str	r4, [sp, #-8]!
   159dc:	str	lr, [sp, #4]
   159e0:	bl	16674 <__assert_fail@plt+0x5880>
   159e4:	cmp	r0, #0
   159e8:	beq	159f8 <__assert_fail@plt+0x4c04>
   159ec:	ldr	r4, [sp]
   159f0:	add	sp, sp, #4
   159f4:	pop	{pc}		; (ldr pc, [sp], #4)
   159f8:	bl	15f6c <__assert_fail@plt+0x5178>
   159fc:	str	r4, [sp, #-8]!
   15a00:	str	lr, [sp, #4]
   15a04:	bl	16674 <__assert_fail@plt+0x5880>
   15a08:	cmp	r0, #0
   15a0c:	beq	15a1c <__assert_fail@plt+0x4c28>
   15a10:	ldr	r4, [sp]
   15a14:	add	sp, sp, #4
   15a18:	pop	{pc}		; (ldr pc, [sp], #4)
   15a1c:	bl	15f6c <__assert_fail@plt+0x5178>
   15a20:	strd	r4, [sp, #-16]!
   15a24:	mov	r5, r0
   15a28:	mov	r4, r1
   15a2c:	str	r6, [sp, #8]
   15a30:	str	lr, [sp, #12]
   15a34:	bl	166b0 <__assert_fail@plt+0x58bc>
   15a38:	cmp	r0, #0
   15a3c:	beq	15a50 <__assert_fail@plt+0x4c5c>
   15a40:	ldrd	r4, [sp]
   15a44:	ldr	r6, [sp, #8]
   15a48:	add	sp, sp, #12
   15a4c:	pop	{pc}		; (ldr pc, [sp], #4)
   15a50:	adds	r4, r4, #0
   15a54:	movne	r4, #1
   15a58:	cmp	r5, #0
   15a5c:	moveq	r4, #1
   15a60:	cmp	r4, #0
   15a64:	beq	15a40 <__assert_fail@plt+0x4c4c>
   15a68:	bl	15f6c <__assert_fail@plt+0x5178>
   15a6c:	cmp	r1, #0
   15a70:	orreq	r1, r1, #1
   15a74:	str	r4, [sp, #-8]!
   15a78:	str	lr, [sp, #4]
   15a7c:	bl	166b0 <__assert_fail@plt+0x58bc>
   15a80:	cmp	r0, #0
   15a84:	beq	15a94 <__assert_fail@plt+0x4ca0>
   15a88:	ldr	r4, [sp]
   15a8c:	add	sp, sp, #4
   15a90:	pop	{pc}		; (ldr pc, [sp], #4)
   15a94:	bl	15f6c <__assert_fail@plt+0x5178>
   15a98:	strd	r4, [sp, #-16]!
   15a9c:	mov	r4, r0
   15aa0:	mov	r5, r2
   15aa4:	str	r6, [sp, #8]
   15aa8:	mov	r6, r1
   15aac:	str	lr, [sp, #12]
   15ab0:	bl	16a90 <__assert_fail@plt+0x5c9c>
   15ab4:	cmp	r0, #0
   15ab8:	beq	15acc <__assert_fail@plt+0x4cd8>
   15abc:	ldrd	r4, [sp]
   15ac0:	ldr	r6, [sp, #8]
   15ac4:	add	sp, sp, #12
   15ac8:	pop	{pc}		; (ldr pc, [sp], #4)
   15acc:	cmp	r4, #0
   15ad0:	beq	15ae0 <__assert_fail@plt+0x4cec>
   15ad4:	cmp	r6, #0
   15ad8:	cmpne	r5, #0
   15adc:	beq	15abc <__assert_fail@plt+0x4cc8>
   15ae0:	bl	15f6c <__assert_fail@plt+0x5178>
   15ae4:	cmp	r2, #0
   15ae8:	cmpne	r1, #0
   15aec:	str	r4, [sp, #-8]!
   15af0:	moveq	r2, #1
   15af4:	str	lr, [sp, #4]
   15af8:	moveq	r1, r2
   15afc:	bl	16a90 <__assert_fail@plt+0x5c9c>
   15b00:	cmp	r0, #0
   15b04:	beq	15b14 <__assert_fail@plt+0x4d20>
   15b08:	ldr	r4, [sp]
   15b0c:	add	sp, sp, #4
   15b10:	pop	{pc}		; (ldr pc, [sp], #4)
   15b14:	bl	15f6c <__assert_fail@plt+0x5178>
   15b18:	mov	r2, r1
   15b1c:	mov	r1, r0
   15b20:	str	r4, [sp, #-8]!
   15b24:	mov	r0, #0
   15b28:	str	lr, [sp, #4]
   15b2c:	bl	16a90 <__assert_fail@plt+0x5c9c>
   15b30:	cmp	r0, #0
   15b34:	beq	15b44 <__assert_fail@plt+0x4d50>
   15b38:	ldr	r4, [sp]
   15b3c:	add	sp, sp, #4
   15b40:	pop	{pc}		; (ldr pc, [sp], #4)
   15b44:	bl	15f6c <__assert_fail@plt+0x5178>
   15b48:	cmp	r1, #0
   15b4c:	cmpne	r0, #0
   15b50:	str	r4, [sp, #-8]!
   15b54:	moveq	r2, #1
   15b58:	movne	r2, r1
   15b5c:	str	lr, [sp, #4]
   15b60:	movne	r1, r0
   15b64:	moveq	r1, r2
   15b68:	mov	r0, #0
   15b6c:	bl	16a90 <__assert_fail@plt+0x5c9c>
   15b70:	cmp	r0, #0
   15b74:	beq	15b84 <__assert_fail@plt+0x4d90>
   15b78:	ldr	r4, [sp]
   15b7c:	add	sp, sp, #4
   15b80:	pop	{pc}		; (ldr pc, [sp], #4)
   15b84:	bl	15f6c <__assert_fail@plt+0x5178>
   15b88:	cmp	r0, #0
   15b8c:	strd	r4, [sp, #-16]!
   15b90:	mov	r5, r1
   15b94:	ldr	r4, [r1]
   15b98:	str	r6, [sp, #8]
   15b9c:	str	lr, [sp, #12]
   15ba0:	beq	15be8 <__assert_fail@plt+0x4df4>
   15ba4:	lsr	r3, r4, #1
   15ba8:	add	r3, r3, #1
   15bac:	adds	r4, r4, r3
   15bb0:	bcs	15be4 <__assert_fail@plt+0x4df0>
   15bb4:	mov	r2, #1
   15bb8:	mov	r1, r4
   15bbc:	bl	16a90 <__assert_fail@plt+0x5c9c>
   15bc0:	cmp	r0, #0
   15bc4:	beq	15bdc <__assert_fail@plt+0x4de8>
   15bc8:	ldr	r6, [sp, #8]
   15bcc:	str	r4, [r5]
   15bd0:	ldrd	r4, [sp]
   15bd4:	add	sp, sp, #12
   15bd8:	pop	{pc}		; (ldr pc, [sp], #4)
   15bdc:	cmp	r4, #0
   15be0:	beq	15bc8 <__assert_fail@plt+0x4dd4>
   15be4:	bl	15f6c <__assert_fail@plt+0x5178>
   15be8:	cmp	r4, #0
   15bec:	mov	r2, #1
   15bf0:	moveq	r4, #64	; 0x40
   15bf4:	mov	r1, r4
   15bf8:	bl	16a90 <__assert_fail@plt+0x5c9c>
   15bfc:	cmp	r0, #0
   15c00:	bne	15bc8 <__assert_fail@plt+0x4dd4>
   15c04:	b	15be4 <__assert_fail@plt+0x4df0>
   15c08:	cmp	r0, #0
   15c0c:	strd	r4, [sp, #-16]!
   15c10:	mov	r5, r1
   15c14:	ldr	r4, [r1]
   15c18:	str	r6, [sp, #8]
   15c1c:	mov	r6, r2
   15c20:	str	lr, [sp, #12]
   15c24:	beq	15c6c <__assert_fail@plt+0x4e78>
   15c28:	lsr	r3, r4, #1
   15c2c:	add	r3, r3, #1
   15c30:	adds	r4, r4, r3
   15c34:	bcs	15c68 <__assert_fail@plt+0x4e74>
   15c38:	mov	r1, r4
   15c3c:	bl	16a90 <__assert_fail@plt+0x5c9c>
   15c40:	cmp	r0, #0
   15c44:	beq	15c5c <__assert_fail@plt+0x4e68>
   15c48:	ldr	r6, [sp, #8]
   15c4c:	str	r4, [r5]
   15c50:	ldrd	r4, [sp]
   15c54:	add	sp, sp, #12
   15c58:	pop	{pc}		; (ldr pc, [sp], #4)
   15c5c:	cmp	r4, #0
   15c60:	cmpne	r6, #0
   15c64:	beq	15c48 <__assert_fail@plt+0x4e54>
   15c68:	bl	15f6c <__assert_fail@plt+0x5178>
   15c6c:	cmp	r4, #0
   15c70:	bne	15c84 <__assert_fail@plt+0x4e90>
   15c74:	mov	r4, #64	; 0x40
   15c78:	udiv	r4, r4, r2
   15c7c:	cmp	r2, #64	; 0x40
   15c80:	addhi	r4, r4, #1
   15c84:	mov	r2, r6
   15c88:	mov	r1, r4
   15c8c:	mov	r0, #0
   15c90:	bl	16a90 <__assert_fail@plt+0x5c9c>
   15c94:	cmp	r0, #0
   15c98:	bne	15c48 <__assert_fail@plt+0x4e54>
   15c9c:	b	15c68 <__assert_fail@plt+0x4e74>
   15ca0:	ldr	ip, [r1]
   15ca4:	strd	r4, [sp, #-24]!	; 0xffffffe8
   15ca8:	strd	r6, [sp, #8]
   15cac:	mov	r7, r1
   15cb0:	mov	r6, r0
   15cb4:	str	r8, [sp, #16]
   15cb8:	mvn	r8, r3
   15cbc:	lsr	r8, r8, #31
   15cc0:	str	lr, [sp, #20]
   15cc4:	asr	r1, ip, #1
   15cc8:	ldr	lr, [sp, #24]
   15ccc:	adds	r4, ip, r1
   15cd0:	mvnvs	r4, #-2147483648	; 0x80000000
   15cd4:	cmp	r3, r4
   15cd8:	movge	r1, #0
   15cdc:	andlt	r1, r8, #1
   15ce0:	cmp	r1, #0
   15ce4:	movne	r4, r3
   15ce8:	smull	r0, r1, r4, lr
   15cec:	cmp	r1, r0, asr #31
   15cf0:	bne	15da0 <__assert_fail@plt+0x4fac>
   15cf4:	cmp	r0, #63	; 0x3f
   15cf8:	mov	r5, r0
   15cfc:	ble	15d6c <__assert_fail@plt+0x4f78>
   15d00:	cmp	r6, #0
   15d04:	sub	r1, r4, ip
   15d08:	streq	r6, [r7]
   15d0c:	cmp	r1, r2
   15d10:	bge	15d40 <__assert_fail@plt+0x4f4c>
   15d14:	adds	r4, ip, r2
   15d18:	bvs	15d9c <__assert_fail@plt+0x4fa8>
   15d1c:	cmp	r4, r3
   15d20:	movle	r3, #0
   15d24:	andgt	r3, r8, #1
   15d28:	cmp	r3, #0
   15d2c:	bne	15d9c <__assert_fail@plt+0x4fa8>
   15d30:	smull	r0, r1, r4, lr
   15d34:	cmp	r1, r0, asr #31
   15d38:	mov	r5, r0
   15d3c:	bne	15d9c <__assert_fail@plt+0x4fa8>
   15d40:	mov	r1, r5
   15d44:	mov	r0, r6
   15d48:	bl	166b0 <__assert_fail@plt+0x58bc>
   15d4c:	cmp	r0, #0
   15d50:	beq	15d80 <__assert_fail@plt+0x4f8c>
   15d54:	ldr	r8, [sp, #16]
   15d58:	str	r4, [r7]
   15d5c:	ldrd	r4, [sp]
   15d60:	ldrd	r6, [sp, #8]
   15d64:	add	sp, sp, #20
   15d68:	pop	{pc}		; (ldr pc, [sp], #4)
   15d6c:	mov	r0, #64	; 0x40
   15d70:	sdiv	r4, r0, lr
   15d74:	mls	r5, lr, r4, r0
   15d78:	sub	r5, r0, r5
   15d7c:	b	15d00 <__assert_fail@plt+0x4f0c>
   15d80:	adds	r5, r5, #0
   15d84:	movne	r5, #1
   15d88:	cmp	r6, #0
   15d8c:	movne	r6, r5
   15d90:	moveq	r6, #1
   15d94:	cmp	r6, #0
   15d98:	beq	15d54 <__assert_fail@plt+0x4f60>
   15d9c:	bl	15f6c <__assert_fail@plt+0x5178>
   15da0:	mvn	r0, #-2147483648	; 0x80000000
   15da4:	b	15d70 <__assert_fail@plt+0x4f7c>
   15da8:	mov	r1, #1
   15dac:	str	r4, [sp, #-8]!
   15db0:	str	lr, [sp, #4]
   15db4:	bl	16600 <__assert_fail@plt+0x580c>
   15db8:	cmp	r0, #0
   15dbc:	beq	15dcc <__assert_fail@plt+0x4fd8>
   15dc0:	ldr	r4, [sp]
   15dc4:	add	sp, sp, #4
   15dc8:	pop	{pc}		; (ldr pc, [sp], #4)
   15dcc:	bl	15f6c <__assert_fail@plt+0x5178>
   15dd0:	mov	r1, #1
   15dd4:	str	r4, [sp, #-8]!
   15dd8:	str	lr, [sp, #4]
   15ddc:	bl	16600 <__assert_fail@plt+0x580c>
   15de0:	cmp	r0, #0
   15de4:	beq	15df4 <__assert_fail@plt+0x5000>
   15de8:	ldr	r4, [sp]
   15dec:	add	sp, sp, #4
   15df0:	pop	{pc}		; (ldr pc, [sp], #4)
   15df4:	bl	15f6c <__assert_fail@plt+0x5178>
   15df8:	str	r4, [sp, #-8]!
   15dfc:	str	lr, [sp, #4]
   15e00:	bl	16600 <__assert_fail@plt+0x580c>
   15e04:	cmp	r0, #0
   15e08:	beq	15e18 <__assert_fail@plt+0x5024>
   15e0c:	ldr	r4, [sp]
   15e10:	add	sp, sp, #4
   15e14:	pop	{pc}		; (ldr pc, [sp], #4)
   15e18:	bl	15f6c <__assert_fail@plt+0x5178>
   15e1c:	str	r4, [sp, #-8]!
   15e20:	str	lr, [sp, #4]
   15e24:	bl	16600 <__assert_fail@plt+0x580c>
   15e28:	cmp	r0, #0
   15e2c:	beq	15e3c <__assert_fail@plt+0x5048>
   15e30:	ldr	r4, [sp]
   15e34:	add	sp, sp, #4
   15e38:	pop	{pc}		; (ldr pc, [sp], #4)
   15e3c:	bl	15f6c <__assert_fail@plt+0x5178>
   15e40:	strd	r4, [sp, #-16]!
   15e44:	mov	r4, r1
   15e48:	str	r6, [sp, #8]
   15e4c:	mov	r6, r0
   15e50:	mov	r0, r1
   15e54:	str	lr, [sp, #12]
   15e58:	bl	16674 <__assert_fail@plt+0x5880>
   15e5c:	subs	r5, r0, #0
   15e60:	beq	15e84 <__assert_fail@plt+0x5090>
   15e64:	mov	r2, r4
   15e68:	mov	r1, r6
   15e6c:	bl	10c14 <memcpy@plt>
   15e70:	mov	r0, r5
   15e74:	ldrd	r4, [sp]
   15e78:	ldr	r6, [sp, #8]
   15e7c:	add	sp, sp, #12
   15e80:	pop	{pc}		; (ldr pc, [sp], #4)
   15e84:	bl	15f6c <__assert_fail@plt+0x5178>
   15e88:	strd	r4, [sp, #-16]!
   15e8c:	mov	r4, r1
   15e90:	str	r6, [sp, #8]
   15e94:	mov	r6, r0
   15e98:	mov	r0, r1
   15e9c:	str	lr, [sp, #12]
   15ea0:	bl	16674 <__assert_fail@plt+0x5880>
   15ea4:	subs	r5, r0, #0
   15ea8:	beq	15ecc <__assert_fail@plt+0x50d8>
   15eac:	mov	r2, r4
   15eb0:	mov	r1, r6
   15eb4:	bl	10c14 <memcpy@plt>
   15eb8:	mov	r0, r5
   15ebc:	ldrd	r4, [sp]
   15ec0:	ldr	r6, [sp, #8]
   15ec4:	add	sp, sp, #12
   15ec8:	pop	{pc}		; (ldr pc, [sp], #4)
   15ecc:	bl	15f6c <__assert_fail@plt+0x5178>
   15ed0:	strd	r4, [sp, #-16]!
   15ed4:	mov	r4, r1
   15ed8:	str	r6, [sp, #8]
   15edc:	mov	r6, r0
   15ee0:	add	r0, r1, #1
   15ee4:	str	lr, [sp, #12]
   15ee8:	bl	16674 <__assert_fail@plt+0x5880>
   15eec:	subs	r5, r0, #0
   15ef0:	beq	15f1c <__assert_fail@plt+0x5128>
   15ef4:	mov	r3, #0
   15ef8:	mov	r1, r6
   15efc:	mov	r2, r4
   15f00:	strb	r3, [r5, r4]
   15f04:	bl	10c14 <memcpy@plt>
   15f08:	mov	r0, r5
   15f0c:	ldrd	r4, [sp]
   15f10:	ldr	r6, [sp, #8]
   15f14:	add	sp, sp, #12
   15f18:	pop	{pc}		; (ldr pc, [sp], #4)
   15f1c:	bl	15f6c <__assert_fail@plt+0x5178>
   15f20:	strd	r4, [sp, #-16]!
   15f24:	str	r6, [sp, #8]
   15f28:	mov	r6, r0
   15f2c:	str	lr, [sp, #12]
   15f30:	bl	10d34 <strlen@plt>
   15f34:	add	r4, r0, #1
   15f38:	mov	r0, r4
   15f3c:	bl	16674 <__assert_fail@plt+0x5880>
   15f40:	subs	r5, r0, #0
   15f44:	beq	15f68 <__assert_fail@plt+0x5174>
   15f48:	mov	r2, r4
   15f4c:	mov	r1, r6
   15f50:	bl	10c14 <memcpy@plt>
   15f54:	mov	r0, r5
   15f58:	ldrd	r4, [sp]
   15f5c:	ldr	r6, [sp, #8]
   15f60:	add	sp, sp, #12
   15f64:	pop	{pc}		; (ldr pc, [sp], #4)
   15f68:	bl	15f6c <__assert_fail@plt+0x5178>
   15f6c:	movw	r3, #32988	; 0x80dc
   15f70:	movt	r3, #2
   15f74:	str	r4, [sp, #-8]!
   15f78:	ldr	r4, [r3]
   15f7c:	mov	r2, #5
   15f80:	movw	r1, #30256	; 0x7630
   15f84:	movt	r1, #1
   15f88:	mov	r0, #0
   15f8c:	str	lr, [sp, #4]
   15f90:	bl	10c50 <dcgettext@plt>
   15f94:	mov	r3, r0
   15f98:	movw	r2, #29176	; 0x71f8
   15f9c:	movt	r2, #1
   15fa0:	mov	r1, #0
   15fa4:	mov	r0, r4
   15fa8:	bl	10cc8 <error@plt>
   15fac:	bl	10de8 <abort@plt>
   15fb0:	cmp	r2, #36	; 0x24
   15fb4:	strd	r4, [sp, #-36]!	; 0xffffffdc
   15fb8:	strd	r6, [sp, #8]
   15fbc:	strd	r8, [sp, #16]
   15fc0:	strd	sl, [sp, #24]
   15fc4:	str	lr, [sp, #32]
   15fc8:	sub	sp, sp, #12
   15fcc:	bhi	165cc <__assert_fail@plt+0x57d8>
   15fd0:	cmp	r1, #0
   15fd4:	mov	r5, r1
   15fd8:	mov	r6, r2
   15fdc:	addeq	r5, sp, #4
   15fe0:	mov	r9, r0
   15fe4:	mov	r8, r3
   15fe8:	bl	10d4c <__errno_location@plt>
   15fec:	mov	sl, r0
   15ff0:	mov	r4, #0
   15ff4:	mov	r2, r6
   15ff8:	mov	r1, r5
   15ffc:	mov	r0, r9
   16000:	str	r4, [sl]
   16004:	bl	10be4 <strtol@plt>
   16008:	ldr	r6, [r5]
   1600c:	mov	r7, r0
   16010:	cmp	r6, r9
   16014:	beq	1606c <__assert_fail@plt+0x5278>
   16018:	ldr	r4, [sl]
   1601c:	cmp	r4, #0
   16020:	beq	16030 <__assert_fail@plt+0x523c>
   16024:	cmp	r4, #34	; 0x22
   16028:	bne	1616c <__assert_fail@plt+0x5378>
   1602c:	mov	r4, #1
   16030:	ldr	r3, [sp, #48]	; 0x30
   16034:	cmp	r3, #0
   16038:	beq	16048 <__assert_fail@plt+0x5254>
   1603c:	ldrb	r9, [r6]
   16040:	cmp	r9, #0
   16044:	bne	16270 <__assert_fail@plt+0x547c>
   16048:	str	r7, [r8]
   1604c:	mov	r0, r4
   16050:	add	sp, sp, #12
   16054:	ldrd	r4, [sp]
   16058:	ldrd	r6, [sp, #8]
   1605c:	ldrd	r8, [sp, #16]
   16060:	ldrd	sl, [sp, #24]
   16064:	add	sp, sp, #32
   16068:	pop	{pc}		; (ldr pc, [sp], #4)
   1606c:	ldr	r3, [sp, #48]	; 0x30
   16070:	cmp	r3, r4
   16074:	beq	1616c <__assert_fail@plt+0x5378>
   16078:	ldrb	r9, [r9]
   1607c:	cmp	r9, r4
   16080:	beq	1616c <__assert_fail@plt+0x5378>
   16084:	mov	r1, r9
   16088:	mov	r0, r3
   1608c:	bl	10d40 <strchr@plt>
   16090:	cmp	r0, r4
   16094:	movne	r7, #1
   16098:	beq	1616c <__assert_fail@plt+0x5378>
   1609c:	sub	sl, r9, #69	; 0x45
   160a0:	cmp	sl, #47	; 0x2f
   160a4:	ldrls	pc, [pc, sl, lsl #2]
   160a8:	b	1628c <__assert_fail@plt+0x5498>
   160ac:	andeq	r6, r1, r4, ror r1
   160b0:	andeq	r6, r1, ip, lsl #5
   160b4:	andeq	r6, r1, r4, ror r1
   160b8:	andeq	r6, r1, ip, lsl #5
   160bc:	andeq	r6, r1, ip, lsl #5
   160c0:	andeq	r6, r1, ip, lsl #5
   160c4:	andeq	r6, r1, r4, ror r1
   160c8:	andeq	r6, r1, ip, lsl #5
   160cc:	andeq	r6, r1, r4, ror r1
   160d0:	andeq	r6, r1, ip, lsl #5
   160d4:	andeq	r6, r1, ip, lsl #5
   160d8:	andeq	r6, r1, r4, ror r1
   160dc:	andeq	r6, r1, ip, lsl #5
   160e0:	andeq	r6, r1, ip, lsl #5
   160e4:	andeq	r6, r1, ip, lsl #5
   160e8:	andeq	r6, r1, r4, ror r1
   160ec:	andeq	r6, r1, ip, lsl #5
   160f0:	andeq	r6, r1, ip, lsl #5
   160f4:	andeq	r6, r1, ip, lsl #5
   160f8:	andeq	r6, r1, ip, lsl #5
   160fc:	andeq	r6, r1, r4, ror r1
   16100:	andeq	r6, r1, r4, ror r1
   16104:	andeq	r6, r1, ip, lsl #5
   16108:	andeq	r6, r1, ip, lsl #5
   1610c:	andeq	r6, r1, ip, lsl #5
   16110:	andeq	r6, r1, ip, lsl #5
   16114:	andeq	r6, r1, ip, lsl #5
   16118:	andeq	r6, r1, ip, lsl #5
   1611c:	andeq	r6, r1, ip, lsl #5
   16120:	andeq	r6, r1, ip, lsl #5
   16124:	andeq	r6, r1, ip, lsl #5
   16128:	andeq	r6, r1, ip, lsl #5
   1612c:	andeq	r6, r1, ip, lsl #5
   16130:	andeq	r6, r1, ip, lsl #5
   16134:	andeq	r6, r1, r4, ror r1
   16138:	andeq	r6, r1, ip, lsl #5
   1613c:	andeq	r6, r1, ip, lsl #5
   16140:	andeq	r6, r1, ip, lsl #5
   16144:	andeq	r6, r1, r4, ror r1
   16148:	andeq	r6, r1, ip, lsl #5
   1614c:	andeq	r6, r1, r4, ror r1
   16150:	andeq	r6, r1, ip, lsl #5
   16154:	andeq	r6, r1, ip, lsl #5
   16158:	andeq	r6, r1, ip, lsl #5
   1615c:	andeq	r6, r1, ip, lsl #5
   16160:	andeq	r6, r1, ip, lsl #5
   16164:	andeq	r6, r1, ip, lsl #5
   16168:	andeq	r6, r1, r4, ror r1
   1616c:	mov	r4, #4
   16170:	b	1604c <__assert_fail@plt+0x5258>
   16174:	mov	r1, #48	; 0x30
   16178:	ldr	r0, [sp, #48]	; 0x30
   1617c:	bl	10d40 <strchr@plt>
   16180:	cmp	r0, #0
   16184:	beq	1628c <__assert_fail@plt+0x5498>
   16188:	ldrb	r3, [r6, #1]
   1618c:	cmp	r3, #68	; 0x44
   16190:	beq	165a8 <__assert_fail@plt+0x57b4>
   16194:	cmp	r3, #105	; 0x69
   16198:	beq	165b4 <__assert_fail@plt+0x57c0>
   1619c:	cmp	r3, #66	; 0x42
   161a0:	beq	165a8 <__assert_fail@plt+0x57b4>
   161a4:	cmp	sl, #47	; 0x2f
   161a8:	ldrls	pc, [pc, sl, lsl #2]
   161ac:	b	16284 <__assert_fail@plt+0x5490>
   161b0:	andeq	r6, r1, ip, ror #10
   161b4:	andeq	r6, r1, r4, lsl #5
   161b8:	andeq	r6, r1, r4, asr r5
   161bc:	andeq	r6, r1, r4, lsl #5
   161c0:	andeq	r6, r1, r4, lsl #5
   161c4:	andeq	r6, r1, r4, lsl #5
   161c8:	strdeq	r6, [r1], -ip
   161cc:	andeq	r6, r1, r4, lsl #5
   161d0:	andeq	r6, r1, r0, lsr #10
   161d4:	andeq	r6, r1, r4, lsl #5
   161d8:	andeq	r6, r1, r4, lsl #5
   161dc:	andeq	r6, r1, r8, lsl #10
   161e0:	andeq	r6, r1, r4, lsl #5
   161e4:	andeq	r6, r1, r4, lsl #5
   161e8:	andeq	r6, r1, r4, lsl #5
   161ec:	andeq	r6, r1, r0, ror #9
   161f0:	andeq	r6, r1, r4, lsl #5
   161f4:	andeq	r6, r1, r4, lsl #5
   161f8:	andeq	r6, r1, r4, lsl #5
   161fc:	andeq	r6, r1, r4, lsl #5
   16200:	andeq	r6, r1, r4, ror #8
   16204:	andeq	r6, r1, ip, ror r3
   16208:	andeq	r6, r1, r4, lsl #5
   1620c:	andeq	r6, r1, r4, lsl #5
   16210:	andeq	r6, r1, r4, lsl #5
   16214:	andeq	r6, r1, r4, lsl #5
   16218:	andeq	r6, r1, r4, lsl #5
   1621c:	andeq	r6, r1, r4, lsl #5
   16220:	andeq	r6, r1, r4, lsl #5
   16224:	andeq	r6, r1, r0, asr #8
   16228:	andeq	r6, r1, r0, lsr #11
   1622c:	andeq	r6, r1, r4, lsl #5
   16230:	andeq	r6, r1, r4, lsl #5
   16234:	andeq	r6, r1, r4, lsl #5
   16238:	andeq	r6, r1, r4, asr r5
   1623c:	andeq	r6, r1, r4, lsl #5
   16240:	andeq	r6, r1, r4, lsl #5
   16244:	andeq	r6, r1, r4, lsl #5
   16248:	strdeq	r6, [r1], -ip
   1624c:	andeq	r6, r1, r4, lsl #5
   16250:	andeq	r6, r1, r0, lsr #10
   16254:	andeq	r6, r1, r4, lsl #5
   16258:	andeq	r6, r1, r4, lsl #5
   1625c:	andeq	r6, r1, r4, lsl #5
   16260:	andeq	r6, r1, r4, lsl #5
   16264:	andeq	r6, r1, r4, lsl #5
   16268:	andeq	r6, r1, r4, lsl #5
   1626c:	andeq	r6, r1, r0, ror #9
   16270:	mov	r0, r3
   16274:	mov	r1, r9
   16278:	bl	10d40 <strchr@plt>
   1627c:	cmp	r0, #0
   16280:	bne	1609c <__assert_fail@plt+0x52a8>
   16284:	orr	r4, r4, #2
   16288:	b	16048 <__assert_fail@plt+0x5254>
   1628c:	mov	ip, #1
   16290:	mov	r2, #1024	; 0x400
   16294:	sub	r9, r9, #66	; 0x42
   16298:	cmp	r9, #53	; 0x35
   1629c:	ldrls	pc, [pc, r9, lsl #2]
   162a0:	b	16284 <__assert_fail@plt+0x5490>
   162a4:	andeq	r6, r1, r4, lsl #11
   162a8:	andeq	r6, r1, r4, lsl #5
   162ac:	andeq	r6, r1, r4, lsl #5
   162b0:	andeq	r6, r1, r4, ror r5
   162b4:	andeq	r6, r1, r4, lsl #5
   162b8:	andeq	r6, r1, ip, asr r5
   162bc:	andeq	r6, r1, r4, lsl #5
   162c0:	andeq	r6, r1, r4, lsl #5
   162c4:	andeq	r6, r1, r4, lsl #5
   162c8:	andeq	r6, r1, r4, lsl #8
   162cc:	andeq	r6, r1, r4, lsl #5
   162d0:	andeq	r6, r1, r8, lsr #10
   162d4:	andeq	r6, r1, r4, lsl #5
   162d8:	andeq	r6, r1, r4, lsl #5
   162dc:	andeq	r6, r1, r0, lsl r5
   162e0:	andeq	r6, r1, r4, lsl #5
   162e4:	andeq	r6, r1, r4, lsl #5
   162e8:	andeq	r6, r1, r4, lsl #5
   162ec:	andeq	r6, r1, r8, ror #9
   162f0:	andeq	r6, r1, r4, lsl #5
   162f4:	andeq	r6, r1, r4, lsl #5
   162f8:	andeq	r6, r1, r4, lsl #5
   162fc:	andeq	r6, r1, r4, lsl #5
   16300:	andeq	r6, r1, ip, ror #8
   16304:	andeq	r6, r1, r4, lsl #7
   16308:	andeq	r6, r1, r4, lsl #5
   1630c:	andeq	r6, r1, r4, lsl #5
   16310:	andeq	r6, r1, r4, lsl #5
   16314:	andeq	r6, r1, r4, lsl #5
   16318:	andeq	r6, r1, r4, lsl #5
   1631c:	andeq	r6, r1, r4, lsl #5
   16320:	andeq	r6, r1, r4, lsl #5
   16324:	andeq	r6, r1, r4, asr #8
   16328:	andeq	r6, r1, r4, ror #7
   1632c:	andeq	r6, r1, r4, lsl #5
   16330:	andeq	r6, r1, r4, lsl #5
   16334:	andeq	r6, r1, r4, lsl #5
   16338:	andeq	r6, r1, ip, asr r5
   1633c:	andeq	r6, r1, r4, lsl #5
   16340:	andeq	r6, r1, r4, lsl #5
   16344:	andeq	r6, r1, r4, lsl #5
   16348:	andeq	r6, r1, r4, lsl #8
   1634c:	andeq	r6, r1, r4, lsl #5
   16350:	andeq	r6, r1, r8, lsr #10
   16354:	andeq	r6, r1, r4, lsl #5
   16358:	andeq	r6, r1, r4, lsl #5
   1635c:	andeq	r6, r1, r4, lsl #5
   16360:	andeq	r6, r1, r4, lsl #5
   16364:	andeq	r6, r1, r4, lsl #5
   16368:	andeq	r6, r1, r4, lsl #5
   1636c:	andeq	r6, r1, r8, ror #9
   16370:	andeq	r6, r1, r4, lsl #5
   16374:	andeq	r6, r1, r4, lsl #5
   16378:	andeq	r6, r1, r8, lsl r4
   1637c:	mov	ip, #1
   16380:	mov	r2, #1024	; 0x400
   16384:	smull	sl, fp, r7, r2
   16388:	cmp	fp, sl, asr #31
   1638c:	bne	164f4 <__assert_fail@plt+0x5700>
   16390:	smull	r0, r1, sl, r2
   16394:	cmp	r1, r0, asr #31
   16398:	bne	164cc <__assert_fail@plt+0x56d8>
   1639c:	smull	sl, fp, r0, r2
   163a0:	cmp	fp, sl, asr #31
   163a4:	bne	165ec <__assert_fail@plt+0x57f8>
   163a8:	smull	r0, r1, sl, r2
   163ac:	cmp	r1, r0, asr #31
   163b0:	bne	164cc <__assert_fail@plt+0x56d8>
   163b4:	smull	sl, fp, r0, r2
   163b8:	cmp	fp, sl, asr #31
   163bc:	bne	165ec <__assert_fail@plt+0x57f8>
   163c0:	smull	r0, r1, sl, r2
   163c4:	cmp	r1, r0, asr #31
   163c8:	bne	164cc <__assert_fail@plt+0x56d8>
   163cc:	smull	r2, r3, r0, r2
   163d0:	cmp	r3, r2, asr #31
   163d4:	bne	165ec <__assert_fail@plt+0x57f8>
   163d8:	mov	r7, r2
   163dc:	mov	r3, #0
   163e0:	orr	r4, r4, r3
   163e4:	add	r3, r6, ip
   163e8:	str	r3, [r5]
   163ec:	ldrb	r3, [r6, ip]
   163f0:	cmp	r3, #0
   163f4:	beq	16048 <__assert_fail@plt+0x5254>
   163f8:	b	16284 <__assert_fail@plt+0x5490>
   163fc:	mov	ip, #1
   16400:	mov	r2, #1024	; 0x400
   16404:	smull	r2, r3, r7, r2
   16408:	cmp	r3, r2, asr #31
   1640c:	bne	1642c <__assert_fail@plt+0x5638>
   16410:	mov	r7, r2
   16414:	b	163e4 <__assert_fail@plt+0x55f0>
   16418:	asr	r1, r7, #31
   1641c:	adds	r2, r7, r7
   16420:	adc	r3, r1, r1
   16424:	cmp	r3, r2, asr #31
   16428:	beq	16410 <__assert_fail@plt+0x561c>
   1642c:	cmp	r7, #0
   16430:	mov	r4, #1
   16434:	mvnge	r7, #-2147483648	; 0x80000000
   16438:	movlt	r7, #-2147483648	; 0x80000000
   1643c:	b	163e4 <__assert_fail@plt+0x55f0>
   16440:	mov	ip, #1
   16444:	asr	r3, r7, #31
   16448:	lsl	r1, r7, #9
   1644c:	lsl	r3, r3, #9
   16450:	orr	r3, r3, r7, lsr #23
   16454:	cmp	r3, r1, asr #31
   16458:	bne	1642c <__assert_fail@plt+0x5638>
   1645c:	mov	r7, r1
   16460:	b	163e4 <__assert_fail@plt+0x55f0>
   16464:	mov	ip, #1
   16468:	mov	r2, #1024	; 0x400
   1646c:	smull	sl, fp, r7, r2
   16470:	cmp	fp, sl, asr #31
   16474:	bne	164f4 <__assert_fail@plt+0x5700>
   16478:	smull	r0, r1, sl, r2
   1647c:	cmp	r1, r0, asr #31
   16480:	bne	164cc <__assert_fail@plt+0x56d8>
   16484:	smull	sl, fp, r0, r2
   16488:	cmp	fp, sl, asr #31
   1648c:	bne	165ec <__assert_fail@plt+0x57f8>
   16490:	smull	r0, r1, sl, r2
   16494:	cmp	r1, r0, asr #31
   16498:	bne	164cc <__assert_fail@plt+0x56d8>
   1649c:	smull	sl, fp, r0, r2
   164a0:	cmp	fp, sl, asr #31
   164a4:	bne	165ec <__assert_fail@plt+0x57f8>
   164a8:	smull	r0, r1, sl, r2
   164ac:	cmp	r1, r0, asr #31
   164b0:	bne	164cc <__assert_fail@plt+0x56d8>
   164b4:	smull	sl, fp, r0, r2
   164b8:	cmp	fp, sl, asr #31
   164bc:	bne	165ec <__assert_fail@plt+0x57f8>
   164c0:	smull	r2, r3, sl, r2
   164c4:	cmp	r3, r2, asr #31
   164c8:	beq	163d8 <__assert_fail@plt+0x55e4>
   164cc:	cmp	sl, #0
   164d0:	mov	r3, #1
   164d4:	movlt	r7, #-2147483648	; 0x80000000
   164d8:	mvnge	r7, #-2147483648	; 0x80000000
   164dc:	b	163e0 <__assert_fail@plt+0x55ec>
   164e0:	mov	ip, #1
   164e4:	mov	r2, #1024	; 0x400
   164e8:	smull	sl, fp, r7, r2
   164ec:	cmp	fp, sl, asr #31
   164f0:	beq	164a8 <__assert_fail@plt+0x56b4>
   164f4:	cmp	r7, #0
   164f8:	mov	r3, #1
   164fc:	mvnge	r7, #-2147483648	; 0x80000000
   16500:	movlt	r7, #-2147483648	; 0x80000000
   16504:	b	163e0 <__assert_fail@plt+0x55ec>
   16508:	mov	ip, #1
   1650c:	mov	r2, #1024	; 0x400
   16510:	smull	sl, fp, r7, r2
   16514:	cmp	fp, sl, asr #31
   16518:	beq	163a8 <__assert_fail@plt+0x55b4>
   1651c:	b	164f4 <__assert_fail@plt+0x5700>
   16520:	mov	ip, #1
   16524:	mov	r2, #1024	; 0x400
   16528:	smull	r0, r1, r7, r2
   1652c:	cmp	r1, r0, asr #31
   16530:	bne	1642c <__assert_fail@plt+0x5638>
   16534:	smull	r2, r3, r0, r2
   16538:	cmp	r3, r2, asr #31
   1653c:	beq	16410 <__assert_fail@plt+0x561c>
   16540:	cmp	r0, #0
   16544:	mov	r4, #1
   16548:	movlt	r7, #-2147483648	; 0x80000000
   1654c:	mvnge	r7, #-2147483648	; 0x80000000
   16550:	b	163e4 <__assert_fail@plt+0x55f0>
   16554:	mov	ip, #1
   16558:	mov	r2, #1024	; 0x400
   1655c:	smull	r0, r1, r7, r2
   16560:	cmp	r1, r0, asr #31
   16564:	beq	164b4 <__assert_fail@plt+0x56c0>
   16568:	b	164f4 <__assert_fail@plt+0x5700>
   1656c:	mov	ip, #1
   16570:	mov	r2, #1024	; 0x400
   16574:	smull	sl, fp, r7, r2
   16578:	cmp	fp, sl, asr #31
   1657c:	beq	16490 <__assert_fail@plt+0x569c>
   16580:	b	164f4 <__assert_fail@plt+0x5700>
   16584:	asr	r3, r7, #31
   16588:	lsl	r1, r7, #10
   1658c:	lsl	r3, r3, #10
   16590:	orr	r3, r3, r7, lsr #22
   16594:	cmp	r3, r1, asr #31
   16598:	beq	1645c <__assert_fail@plt+0x5668>
   1659c:	b	1642c <__assert_fail@plt+0x5638>
   165a0:	mov	ip, #1
   165a4:	b	163e4 <__assert_fail@plt+0x55f0>
   165a8:	mov	ip, #2
   165ac:	mov	r2, #1000	; 0x3e8
   165b0:	b	16294 <__assert_fail@plt+0x54a0>
   165b4:	ldrb	r3, [r6, #2]
   165b8:	mov	r2, #1024	; 0x400
   165bc:	cmp	r3, #66	; 0x42
   165c0:	movne	ip, #1
   165c4:	moveq	ip, #3
   165c8:	b	16294 <__assert_fail@plt+0x54a0>
   165cc:	movw	r3, #30276	; 0x7644
   165d0:	movt	r3, #1
   165d4:	movw	r1, #30284	; 0x764c
   165d8:	movt	r1, #1
   165dc:	movw	r0, #30300	; 0x765c
   165e0:	movt	r0, #1
   165e4:	mov	r2, #85	; 0x55
   165e8:	bl	10df4 <__assert_fail@plt>
   165ec:	cmp	r0, #0
   165f0:	mov	r3, #1
   165f4:	movlt	r7, #-2147483648	; 0x80000000
   165f8:	mvnge	r7, #-2147483648	; 0x80000000
   165fc:	b	163e0 <__assert_fail@plt+0x55ec>
   16600:	cmp	r1, #0
   16604:	cmpne	r0, #0
   16608:	beq	16654 <__assert_fail@plt+0x5860>
   1660c:	strd	r4, [sp, #-16]!
   16610:	umull	r4, r5, r0, r1
   16614:	str	r6, [sp, #8]
   16618:	str	lr, [sp, #12]
   1661c:	adds	r3, r5, #0
   16620:	movne	r3, #1
   16624:	cmp	r4, #0
   16628:	blt	16634 <__assert_fail@plt+0x5840>
   1662c:	cmp	r3, #0
   16630:	beq	16660 <__assert_fail@plt+0x586c>
   16634:	bl	10d4c <__errno_location@plt>
   16638:	mov	r3, #12
   1663c:	ldrd	r4, [sp]
   16640:	ldr	r6, [sp, #8]
   16644:	add	sp, sp, #12
   16648:	str	r3, [r0]
   1664c:	mov	r0, #0
   16650:	pop	{pc}		; (ldr pc, [sp], #4)
   16654:	mov	r1, #1
   16658:	mov	r0, r1
   1665c:	b	10bc0 <calloc@plt>
   16660:	ldrd	r4, [sp]
   16664:	ldr	r6, [sp, #8]
   16668:	ldr	lr, [sp, #12]
   1666c:	add	sp, sp, #16
   16670:	b	10bc0 <calloc@plt>
   16674:	cmp	r0, #0
   16678:	beq	16684 <__assert_fail@plt+0x5890>
   1667c:	blt	1668c <__assert_fail@plt+0x5898>
   16680:	b	10ce0 <malloc@plt>
   16684:	mov	r0, #1
   16688:	b	10ce0 <malloc@plt>
   1668c:	str	r4, [sp, #-8]!
   16690:	str	lr, [sp, #4]
   16694:	bl	10d4c <__errno_location@plt>
   16698:	mov	r3, #12
   1669c:	ldr	r4, [sp]
   166a0:	add	sp, sp, #4
   166a4:	str	r3, [r0]
   166a8:	mov	r0, #0
   166ac:	pop	{pc}		; (ldr pc, [sp], #4)
   166b0:	cmp	r0, #0
   166b4:	beq	166dc <__assert_fail@plt+0x58e8>
   166b8:	cmp	r1, #0
   166bc:	str	r4, [sp, #-8]!
   166c0:	str	lr, [sp, #4]
   166c4:	beq	166e4 <__assert_fail@plt+0x58f0>
   166c8:	blt	166f8 <__assert_fail@plt+0x5904>
   166cc:	ldr	r4, [sp]
   166d0:	ldr	lr, [sp, #4]
   166d4:	add	sp, sp, #8
   166d8:	b	10c5c <realloc@plt>
   166dc:	mov	r0, r1
   166e0:	b	16674 <__assert_fail@plt+0x5880>
   166e4:	bl	168a4 <__assert_fail@plt+0x5ab0>
   166e8:	ldr	r4, [sp]
   166ec:	add	sp, sp, #4
   166f0:	mov	r0, #0
   166f4:	pop	{pc}		; (ldr pc, [sp], #4)
   166f8:	bl	10d4c <__errno_location@plt>
   166fc:	mov	r3, #12
   16700:	str	r3, [r0]
   16704:	b	166e8 <__assert_fail@plt+0x58f4>
   16708:	strd	r4, [sp, #-16]!
   1670c:	mov	r4, r0
   16710:	str	r6, [sp, #8]
   16714:	str	lr, [sp, #12]
   16718:	bl	10cb0 <__fpending@plt>
   1671c:	ldr	r5, [r4]
   16720:	mov	r6, r0
   16724:	mov	r0, r4
   16728:	bl	16790 <__assert_fail@plt+0x599c>
   1672c:	mov	r4, r0
   16730:	and	r5, r5, #32
   16734:	cmp	r5, #0
   16738:	bne	16770 <__assert_fail@plt+0x597c>
   1673c:	cmp	r0, #0
   16740:	beq	1675c <__assert_fail@plt+0x5968>
   16744:	cmp	r6, #0
   16748:	bne	16788 <__assert_fail@plt+0x5994>
   1674c:	bl	10d4c <__errno_location@plt>
   16750:	ldr	r4, [r0]
   16754:	subs	r4, r4, #9
   16758:	mvnne	r4, #0
   1675c:	mov	r0, r4
   16760:	ldrd	r4, [sp]
   16764:	ldr	r6, [sp, #8]
   16768:	add	sp, sp, #12
   1676c:	pop	{pc}		; (ldr pc, [sp], #4)
   16770:	cmp	r0, #0
   16774:	bne	16788 <__assert_fail@plt+0x5994>
   16778:	bl	10d4c <__errno_location@plt>
   1677c:	str	r4, [r0]
   16780:	mvn	r4, #0
   16784:	b	1675c <__assert_fail@plt+0x5968>
   16788:	mvn	r4, #0
   1678c:	b	1675c <__assert_fail@plt+0x5968>
   16790:	strd	r4, [sp, #-12]!
   16794:	mov	r4, r0
   16798:	str	lr, [sp, #8]
   1679c:	sub	sp, sp, #12
   167a0:	bl	10d7c <fileno@plt>
   167a4:	cmp	r0, #0
   167a8:	mov	r0, r4
   167ac:	blt	16830 <__assert_fail@plt+0x5a3c>
   167b0:	bl	10cf8 <__freading@plt>
   167b4:	cmp	r0, #0
   167b8:	bne	167fc <__assert_fail@plt+0x5a08>
   167bc:	mov	r0, r4
   167c0:	bl	16844 <__assert_fail@plt+0x5a50>
   167c4:	cmp	r0, #0
   167c8:	beq	1682c <__assert_fail@plt+0x5a38>
   167cc:	bl	10d4c <__errno_location@plt>
   167d0:	mov	r5, r0
   167d4:	mov	r0, r4
   167d8:	ldr	r4, [r5]
   167dc:	bl	10d94 <fclose@plt>
   167e0:	cmp	r4, #0
   167e4:	mvnne	r0, #0
   167e8:	strne	r4, [r5]
   167ec:	add	sp, sp, #12
   167f0:	ldrd	r4, [sp]
   167f4:	add	sp, sp, #8
   167f8:	pop	{pc}		; (ldr pc, [sp], #4)
   167fc:	mov	r0, r4
   16800:	bl	10d7c <fileno@plt>
   16804:	mov	r1, #1
   16808:	mov	r2, #0
   1680c:	mov	r3, #0
   16810:	str	r1, [sp]
   16814:	bl	10c98 <lseek64@plt>
   16818:	mvn	r3, #0
   1681c:	mvn	r2, #0
   16820:	cmp	r1, r3
   16824:	cmpeq	r0, r2
   16828:	bne	167bc <__assert_fail@plt+0x59c8>
   1682c:	mov	r0, r4
   16830:	add	sp, sp, #12
   16834:	ldrd	r4, [sp]
   16838:	ldr	lr, [sp, #8]
   1683c:	add	sp, sp, #12
   16840:	b	10d94 <fclose@plt>
   16844:	str	r4, [sp, #-8]!
   16848:	subs	r4, r0, #0
   1684c:	str	lr, [sp, #4]
   16850:	sub	sp, sp, #8
   16854:	beq	16870 <__assert_fail@plt+0x5a7c>
   16858:	bl	10cf8 <__freading@plt>
   1685c:	cmp	r0, #0
   16860:	beq	16870 <__assert_fail@plt+0x5a7c>
   16864:	ldr	r3, [r4]
   16868:	tst	r3, #256	; 0x100
   1686c:	bne	16888 <__assert_fail@plt+0x5a94>
   16870:	mov	r0, r4
   16874:	add	sp, sp, #8
   16878:	ldr	r4, [sp]
   1687c:	ldr	lr, [sp, #4]
   16880:	add	sp, sp, #8
   16884:	b	10bf0 <fflush@plt>
   16888:	mov	r1, #1
   1688c:	mov	r2, #0
   16890:	mov	r3, #0
   16894:	mov	r0, r4
   16898:	str	r1, [sp]
   1689c:	bl	16904 <__assert_fail@plt+0x5b10>
   168a0:	b	16870 <__assert_fail@plt+0x5a7c>
   168a4:	strd	r4, [sp, #-12]!
   168a8:	mov	r5, r0
   168ac:	str	lr, [sp, #8]
   168b0:	sub	sp, sp, #12
   168b4:	bl	10d4c <__errno_location@plt>
   168b8:	mov	r4, r0
   168bc:	mov	r2, #0
   168c0:	ldr	r3, [r4]
   168c4:	mov	r0, r5
   168c8:	str	r2, [r4]
   168cc:	str	r3, [sp]
   168d0:	str	r3, [sp, #4]
   168d4:	bl	10bfc <free@plt>
   168d8:	ldr	r3, [r4]
   168dc:	add	r2, sp, #8
   168e0:	clz	r3, r3
   168e4:	lsr	r3, r3, #5
   168e8:	add	r3, r2, r3, lsl #2
   168ec:	ldr	r3, [r3, #-8]
   168f0:	str	r3, [r4]
   168f4:	add	sp, sp, #12
   168f8:	ldrd	r4, [sp]
   168fc:	add	sp, sp, #8
   16900:	pop	{pc}		; (ldr pc, [sp], #4)
   16904:	strd	r4, [sp, #-24]!	; 0xffffffe8
   16908:	mov	r4, r0
   1690c:	ldr	ip, [r0, #4]
   16910:	strd	r6, [sp, #8]
   16914:	str	lr, [sp, #20]
   16918:	ldr	lr, [r0, #8]
   1691c:	str	r8, [sp, #16]
   16920:	sub	sp, sp, #8
   16924:	ldr	r5, [sp, #32]
   16928:	cmp	lr, ip
   1692c:	beq	16954 <__assert_fail@plt+0x5b60>
   16930:	mov	r0, r4
   16934:	str	r5, [sp, #32]
   16938:	add	sp, sp, #8
   1693c:	ldrd	r4, [sp]
   16940:	ldrd	r6, [sp, #8]
   16944:	ldr	r8, [sp, #16]
   16948:	ldr	lr, [sp, #20]
   1694c:	add	sp, sp, #24
   16950:	b	10da0 <fseeko64@plt>
   16954:	ldr	ip, [r0, #16]
   16958:	ldr	lr, [r0, #20]
   1695c:	cmp	lr, ip
   16960:	bne	16930 <__assert_fail@plt+0x5b3c>
   16964:	ldr	r8, [r0, #36]	; 0x24
   16968:	cmp	r8, #0
   1696c:	bne	16930 <__assert_fail@plt+0x5b3c>
   16970:	mov	r6, r2
   16974:	mov	r7, r3
   16978:	bl	10d7c <fileno@plt>
   1697c:	mov	r2, r6
   16980:	mov	r3, r7
   16984:	str	r5, [sp]
   16988:	bl	10c98 <lseek64@plt>
   1698c:	mvn	r3, #0
   16990:	mvn	r2, #0
   16994:	cmp	r1, r3
   16998:	cmpeq	r0, r2
   1699c:	beq	169cc <__assert_fail@plt+0x5bd8>
   169a0:	ldr	r3, [r4]
   169a4:	strd	r0, [r4, #80]	; 0x50
   169a8:	bic	r3, r3, #16
   169ac:	str	r3, [r4]
   169b0:	mov	r0, r8
   169b4:	add	sp, sp, #8
   169b8:	ldrd	r4, [sp]
   169bc:	ldrd	r6, [sp, #8]
   169c0:	ldr	r8, [sp, #16]
   169c4:	add	sp, sp, #20
   169c8:	pop	{pc}		; (ldr pc, [sp], #4)
   169cc:	mvn	r8, #0
   169d0:	b	169b0 <__assert_fail@plt+0x5bbc>
   169d4:	mov	r0, #14
   169d8:	str	r4, [sp, #-8]!
   169dc:	str	lr, [sp, #4]
   169e0:	bl	10dc4 <nl_langinfo@plt>
   169e4:	cmp	r0, #0
   169e8:	beq	16a0c <__assert_fail@plt+0x5c18>
   169ec:	ldrb	r2, [r0]
   169f0:	movw	r3, #30340	; 0x7684
   169f4:	movt	r3, #1
   169f8:	ldr	r4, [sp]
   169fc:	add	sp, sp, #4
   16a00:	cmp	r2, #0
   16a04:	moveq	r0, r3
   16a08:	pop	{pc}		; (ldr pc, [sp], #4)
   16a0c:	ldr	r4, [sp]
   16a10:	add	sp, sp, #4
   16a14:	movw	r0, #30340	; 0x7684
   16a18:	movt	r0, #1
   16a1c:	pop	{pc}		; (ldr pc, [sp], #4)
   16a20:	strd	r4, [sp, #-20]!	; 0xffffffec
   16a24:	mov	r5, r2
   16a28:	strd	r6, [sp, #8]
   16a2c:	subs	r6, r0, #0
   16a30:	mov	r7, r1
   16a34:	str	lr, [sp, #16]
   16a38:	sub	sp, sp, #12
   16a3c:	addeq	r6, sp, #4
   16a40:	mov	r0, r6
   16a44:	bl	10cbc <mbrtowc@plt>
   16a48:	cmp	r5, #0
   16a4c:	cmnne	r0, #3
   16a50:	mov	r4, r0
   16a54:	bhi	16a70 <__assert_fail@plt+0x5c7c>
   16a58:	mov	r0, r4
   16a5c:	add	sp, sp, #12
   16a60:	ldrd	r4, [sp]
   16a64:	ldrd	r6, [sp, #8]
   16a68:	add	sp, sp, #16
   16a6c:	pop	{pc}		; (ldr pc, [sp], #4)
   16a70:	mov	r0, #0
   16a74:	bl	16ac8 <__assert_fail@plt+0x5cd4>
   16a78:	cmp	r0, #0
   16a7c:	bne	16a58 <__assert_fail@plt+0x5c64>
   16a80:	ldrb	r3, [r7]
   16a84:	mov	r4, #1
   16a88:	str	r3, [r6]
   16a8c:	b	16a58 <__assert_fail@plt+0x5c64>
   16a90:	umull	r2, r3, r1, r2
   16a94:	cmp	r3, #0
   16a98:	bne	16aa4 <__assert_fail@plt+0x5cb0>
   16a9c:	mov	r1, r2
   16aa0:	b	166b0 <__assert_fail@plt+0x58bc>
   16aa4:	str	r4, [sp, #-8]!
   16aa8:	str	lr, [sp, #4]
   16aac:	bl	10d4c <__errno_location@plt>
   16ab0:	mov	r3, #12
   16ab4:	ldr	r4, [sp]
   16ab8:	add	sp, sp, #4
   16abc:	str	r3, [r0]
   16ac0:	mov	r0, #0
   16ac4:	pop	{pc}		; (ldr pc, [sp], #4)
   16ac8:	push	{lr}		; (str lr, [sp, #-4]!)
   16acc:	sub	sp, sp, #268	; 0x10c
   16ad0:	movw	r2, #257	; 0x101
   16ad4:	add	r1, sp, #4
   16ad8:	bl	16b20 <__assert_fail@plt+0x5d2c>
   16adc:	cmp	r0, #0
   16ae0:	movne	r0, #0
   16ae4:	bne	16b18 <__assert_fail@plt+0x5d24>
   16ae8:	movw	r1, #30348	; 0x768c
   16aec:	movt	r1, #1
   16af0:	add	r0, sp, #4
   16af4:	bl	10bd8 <strcmp@plt>
   16af8:	cmp	r0, #0
   16afc:	beq	16b18 <__assert_fail@plt+0x5d24>
   16b00:	add	r0, sp, #4
   16b04:	movw	r1, #30352	; 0x7690
   16b08:	movt	r1, #1
   16b0c:	bl	10bd8 <strcmp@plt>
   16b10:	adds	r0, r0, #0
   16b14:	movne	r0, #1
   16b18:	add	sp, sp, #268	; 0x10c
   16b1c:	pop	{pc}		; (ldr pc, [sp], #4)
   16b20:	strd	r4, [sp, #-16]!
   16b24:	mov	r5, r1
   16b28:	mov	r1, #0
   16b2c:	mov	r4, r2
   16b30:	str	r6, [sp, #8]
   16b34:	str	lr, [sp, #12]
   16b38:	bl	10dac <setlocale@plt>
   16b3c:	subs	r6, r0, #0
   16b40:	beq	16bc0 <__assert_fail@plt+0x5dcc>
   16b44:	bl	10d34 <strlen@plt>
   16b48:	cmp	r4, r0
   16b4c:	bhi	16b6c <__assert_fail@plt+0x5d78>
   16b50:	cmp	r4, #0
   16b54:	moveq	r0, #34	; 0x22
   16b58:	bne	16b90 <__assert_fail@plt+0x5d9c>
   16b5c:	ldrd	r4, [sp]
   16b60:	ldr	r6, [sp, #8]
   16b64:	add	sp, sp, #12
   16b68:	pop	{pc}		; (ldr pc, [sp], #4)
   16b6c:	add	r2, r0, #1
   16b70:	mov	r1, r6
   16b74:	mov	r0, r5
   16b78:	bl	10c14 <memcpy@plt>
   16b7c:	ldrd	r4, [sp]
   16b80:	mov	r0, #0
   16b84:	ldr	r6, [sp, #8]
   16b88:	add	sp, sp, #12
   16b8c:	pop	{pc}		; (ldr pc, [sp], #4)
   16b90:	sub	r4, r4, #1
   16b94:	mov	r1, r6
   16b98:	mov	r2, r4
   16b9c:	mov	r0, r5
   16ba0:	bl	10c14 <memcpy@plt>
   16ba4:	mov	r3, #0
   16ba8:	mov	r0, #34	; 0x22
   16bac:	strb	r3, [r5, r4]
   16bb0:	ldrd	r4, [sp]
   16bb4:	ldr	r6, [sp, #8]
   16bb8:	add	sp, sp, #12
   16bbc:	pop	{pc}		; (ldr pc, [sp], #4)
   16bc0:	cmp	r4, #0
   16bc4:	mov	r0, #22
   16bc8:	strbne	r6, [r5]
   16bcc:	ldrd	r4, [sp]
   16bd0:	ldr	r6, [sp, #8]
   16bd4:	add	sp, sp, #12
   16bd8:	pop	{pc}		; (ldr pc, [sp], #4)
   16bdc:	mov	r1, #0
   16be0:	b	10dac <setlocale@plt>
   16be4:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   16be8:	mov	r7, r0
   16bec:	ldr	r6, [pc, #72]	; 16c3c <__assert_fail@plt+0x5e48>
   16bf0:	ldr	r5, [pc, #72]	; 16c40 <__assert_fail@plt+0x5e4c>
   16bf4:	add	r6, pc, r6
   16bf8:	add	r5, pc, r5
   16bfc:	sub	r6, r6, r5
   16c00:	mov	r8, r1
   16c04:	mov	r9, r2
   16c08:	bl	10ba0 <calloc@plt-0x20>
   16c0c:	asrs	r6, r6, #2
   16c10:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   16c14:	mov	r4, #0
   16c18:	add	r4, r4, #1
   16c1c:	ldr	r3, [r5], #4
   16c20:	mov	r2, r9
   16c24:	mov	r1, r8
   16c28:	mov	r0, r7
   16c2c:	blx	r3
   16c30:	cmp	r6, r4
   16c34:	bne	16c18 <__assert_fail@plt+0x5e24>
   16c38:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   16c3c:	andeq	r1, r1, r8, lsl r3
   16c40:	andeq	r1, r1, r0, lsl r3
   16c44:	bx	lr
   16c48:	ldr	r3, [pc, #12]	; 16c5c <__assert_fail@plt+0x5e68>
   16c4c:	mov	r1, #0
   16c50:	add	r3, pc, r3
   16c54:	ldr	r2, [r3]
   16c58:	b	10d58 <__cxa_atexit@plt>
   16c5c:	andeq	r1, r1, ip, ror r4

Disassembly of section .fini:

00016c60 <.fini>:
   16c60:	push	{r3, lr}
   16c64:	pop	{r3, pc}
