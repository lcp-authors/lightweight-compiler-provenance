
../repos/charybdis/modules/.libs/m_alias.so:     file format elf32-littlearm


Disassembly of section .init:

0000081c <_init>:
 81c:	push	{r3, lr}
 820:	bl	950 <call_weak_fn>
 824:	pop	{r3, pc}

Disassembly of section .plt:

00000828 <.plt>:
 828:	push	{lr}		; (str lr, [sp, #-4]!)
 82c:	ldr	lr, [pc, #4]	; 838 <.plt+0x10>
 830:	add	lr, pc, lr
 834:	ldr	pc, [lr, #8]!
 838:	.word	0x000117c8

0000083c <calloc@plt>:
 83c:	add	ip, pc, #0, 12
 840:	add	ip, ip, #69632	; 0x11000
 844:	ldr	pc, [ip, #1992]!	; 0x7c8

00000848 <mod_del_cmd@plt>:
 848:	add	ip, pc, #0, 12
 84c:	add	ip, ip, #69632	; 0x11000
 850:	ldr	pc, [ip, #1984]!	; 0x7c0

00000854 <__cxa_finalize@plt>:
 854:	add	ip, pc, #0, 12
 858:	add	ip, ip, #69632	; 0x11000
 85c:	ldr	pc, [ip, #1976]!	; 0x7b8

00000860 <sendto_one@plt>:
 860:	add	ip, pc, #0, 12
 864:	add	ip, ip, #69632	; 0x11000
 868:	ldr	pc, [ip, #1968]!	; 0x7b0

0000086c <free@plt>:
 86c:	add	ip, pc, #0, 12
 870:	add	ip, ip, #69632	; 0x11000
 874:	ldr	pc, [ip, #1960]!	; 0x7a8

00000878 <rb_outofmemory@plt>:
 878:	add	ip, pc, #0, 12
 87c:	add	ip, ip, #69632	; 0x11000
 880:	ldr	pc, [ip, #1952]!	; 0x7a0

00000884 <rb_free_rb_dlink_node@plt>:
 884:	add	ip, pc, #0, 12
 888:	add	ip, ip, #69632	; 0x11000
 88c:	ldr	pc, [ip, #1944]!	; 0x798

00000890 <strcpy@plt>:
 890:	add	ip, pc, #0, 12
 894:	add	ip, ip, #69632	; 0x11000
 898:	ldr	pc, [ip, #1936]!	; 0x790

0000089c <rb_dictionary_foreach_start@plt>:
 89c:	add	ip, pc, #0, 12
 8a0:	add	ip, ip, #69632	; 0x11000
 8a4:	ldr	pc, [ip, #1928]!	; 0x788

000008a8 <msgbuf_reconstruct_tail@plt>:
 8a8:	add	ip, pc, #0, 12
 8ac:	add	ip, ip, #69632	; 0x11000
 8b0:	ldr	pc, [ip, #1920]!	; 0x780

000008b4 <__gmon_start__@plt>:
 8b4:	add	ip, pc, #0, 12
 8b8:	add	ip, ip, #69632	; 0x11000
 8bc:	ldr	pc, [ip, #1912]!	; 0x778

000008c0 <rb_make_rb_dlink_node@plt>:
 8c0:	add	ip, pc, #0, 12
 8c4:	add	ip, ip, #69632	; 0x11000
 8c8:	ldr	pc, [ip, #1904]!	; 0x770

000008cc <sendto_one_numeric@plt>:
 8cc:	add	ip, pc, #0, 12
 8d0:	add	ip, ip, #69632	; 0x11000
 8d4:	ldr	pc, [ip, #1896]!	; 0x768

000008d8 <strlen@plt>:
 8d8:	add	ip, pc, #0, 12
 8dc:	add	ip, ip, #69632	; 0x11000
 8e0:	ldr	pc, [ip, #1888]!	; 0x760

000008e4 <strchr@plt>:
 8e4:	add	ip, pc, #0, 12
 8e8:	add	ip, ip, #69632	; 0x11000
 8ec:	ldr	pc, [ip, #1880]!	; 0x758

000008f0 <find_server@plt>:
 8f0:	add	ip, pc, #0, 12
 8f4:	add	ip, ip, #69632	; 0x11000
 8f8:	ldr	pc, [ip, #1872]!	; 0x750

000008fc <rb_dictionary_foreach_cur@plt>:
 8fc:	add	ip, pc, #0, 12
 900:	add	ip, ip, #69632	; 0x11000
 904:	ldr	pc, [ip, #1864]!	; 0x748

00000908 <find_named_person@plt>:
 908:	add	ip, pc, #0, 12
 90c:	add	ip, ip, #69632	; 0x11000
 910:	ldr	pc, [ip, #1856]!	; 0x740

00000914 <flood_endgrace@plt>:
 914:	add	ip, pc, #0, 12
 918:	add	ip, ip, #69632	; 0x11000
 91c:	ldr	pc, [ip, #1848]!	; 0x738

00000920 <rb_dictionary_foreach_next@plt>:
 920:	add	ip, pc, #0, 12
 924:	add	ip, ip, #69632	; 0x11000
 928:	ldr	pc, [ip, #1840]!	; 0x730

0000092c <mod_add_cmd@plt>:
 92c:	add	ip, pc, #0, 12
 930:	add	ip, ip, #69632	; 0x11000
 934:	ldr	pc, [ip, #1832]!	; 0x728

00000938 <rb_dictionary_retrieve@plt>:
 938:	add	ip, pc, #0, 12
 93c:	add	ip, ip, #69632	; 0x11000
 940:	ldr	pc, [ip, #1824]!	; 0x720

00000944 <__assert_fail@plt>:
 944:	add	ip, pc, #0, 12
 948:	add	ip, ip, #69632	; 0x11000
 94c:	ldr	pc, [ip, #1816]!	; 0x718

Disassembly of section .text:

00000950 <call_weak_fn>:
 950:	ldr	r3, [pc, #20]	; 96c <call_weak_fn+0x1c>
 954:	ldr	r2, [pc, #20]	; 970 <call_weak_fn+0x20>
 958:	add	r3, pc, r3
 95c:	ldr	r2, [r3, r2]
 960:	cmp	r2, #0
 964:	bxeq	lr
 968:	b	8b4 <__gmon_start__@plt>
 96c:	.word	0x000116a0
 970:	.word	0x00000074

00000974 <deregister_tm_clones>:
 974:	ldr	r0, [pc, #44]	; 9a8 <deregister_tm_clones+0x34>
 978:	ldr	r3, [pc, #44]	; 9ac <deregister_tm_clones+0x38>
 97c:	add	r0, pc, r0
 980:	add	r3, pc, r3
 984:	cmp	r3, r0
 988:	ldr	r3, [pc, #32]	; 9b0 <deregister_tm_clones+0x3c>
 98c:	add	r3, pc, r3
 990:	bxeq	lr
 994:	ldr	r2, [pc, #24]	; 9b4 <deregister_tm_clones+0x40>
 998:	ldr	r3, [r3, r2]
 99c:	cmp	r3, #0
 9a0:	bxeq	lr
 9a4:	bx	r3
 9a8:	.word	0x00011740
 9ac:	.word	0x0001173c
 9b0:	.word	0x0001166c
 9b4:	.word	0x0000006c

000009b8 <register_tm_clones>:
 9b8:	ldr	r0, [pc, #56]	; 9f8 <register_tm_clones+0x40>
 9bc:	ldr	r3, [pc, #56]	; 9fc <register_tm_clones+0x44>
 9c0:	add	r0, pc, r0
 9c4:	add	r3, pc, r3
 9c8:	sub	r1, r3, r0
 9cc:	ldr	r3, [pc, #44]	; a00 <register_tm_clones+0x48>
 9d0:	asr	r1, r1, #2
 9d4:	add	r3, pc, r3
 9d8:	add	r1, r1, r1, lsr #31
 9dc:	asrs	r1, r1, #1
 9e0:	bxeq	lr
 9e4:	ldr	r2, [pc, #24]	; a04 <register_tm_clones+0x4c>
 9e8:	ldr	r3, [r3, r2]
 9ec:	cmp	r3, #0
 9f0:	bxeq	lr
 9f4:	bx	r3
 9f8:	.word	0x000116fc
 9fc:	.word	0x000116f8
 a00:	.word	0x00011624
 a04:	.word	0x00000078

00000a08 <__do_global_dtors_aux>:
 a08:	ldr	r3, [pc, #76]	; a5c <__do_global_dtors_aux+0x54>
 a0c:	ldr	r2, [pc, #76]	; a60 <__do_global_dtors_aux+0x58>
 a10:	add	r3, pc, r3
 a14:	add	r2, pc, r2
 a18:	ldrb	r3, [r3]
 a1c:	cmp	r3, #0
 a20:	bxne	lr
 a24:	ldr	r3, [pc, #56]	; a64 <__do_global_dtors_aux+0x5c>
 a28:	push	{r4, lr}
 a2c:	ldr	r3, [r2, r3]
 a30:	cmp	r3, #0
 a34:	beq	a44 <__do_global_dtors_aux+0x3c>
 a38:	ldr	r3, [pc, #40]	; a68 <__do_global_dtors_aux+0x60>
 a3c:	ldr	r0, [pc, r3]
 a40:	bl	854 <__cxa_finalize@plt>
 a44:	bl	974 <deregister_tm_clones>
 a48:	ldr	r3, [pc, #28]	; a6c <__do_global_dtors_aux+0x64>
 a4c:	mov	r2, #1
 a50:	add	r3, pc, r3
 a54:	strb	r2, [r3]
 a58:	pop	{r4, pc}
 a5c:	.word	0x000116ac
 a60:	.word	0x000115e4
 a64:	.word	0x00000068
 a68:	.word	0x0001163c
 a6c:	.word	0x0001166c

00000a70 <frame_dummy>:
 a70:	b	9b8 <register_tm_clones>

00000a74 <reload_aliases>:
 a74:	push	{fp, lr}
 a78:	mov	fp, sp
 a7c:	bl	e98 <destroy_aliases>
 a80:	bl	aa4 <create_aliases>
 a84:	mov	r0, #0
 a88:	pop	{fp, pc}

00000a8c <_modinit>:
 a8c:	push	{fp, lr}
 a90:	mov	fp, sp
 a94:	bl	aa4 <create_aliases>
 a98:	mov	r0, #0
 a9c:	pop	{fp, pc}

00000aa0 <_moddeinit>:
 aa0:	b	e98 <destroy_aliases>

00000aa4 <create_aliases>:
 aa4:	push	{r4, r5, r6, r7, fp, lr}
 aa8:	add	fp, sp, #16
 aac:	vpush	{d8-d13}
 ab0:	sub	sp, sp, #8
 ab4:	ldr	r7, [pc, #204]	; b88 <create_aliases+0xe4>
 ab8:	ldr	r7, [pc, r7]
 abc:	ldr	r0, [r7]
 ac0:	mov	r4, sp
 ac4:	mov	r1, r4
 ac8:	bl	89c <rb_dictionary_foreach_start@plt>
 acc:	ldr	r0, [r7]
 ad0:	mov	r1, r4
 ad4:	bl	8fc <rb_dictionary_foreach_cur@plt>
 ad8:	cmp	r0, #0
 adc:	beq	b7c <create_aliases+0xd8>
 ae0:	mov	r5, r0
 ae4:	ldr	r0, [pc, #160]	; b8c <create_aliases+0xe8>
 ae8:	add	r0, pc, r0
 aec:	add	r1, r0, #16
 af0:	mov	r2, #32
 af4:	vld1.64	{d8-d9}, [r0], r2
 af8:	vld1.64	{d10-d11}, [r1]
 afc:	vld1.64	{d12-d13}, [r0]
 b00:	mov	r4, sp
 b04:	ldr	r0, [r5]
 b08:	bl	8d8 <strlen@plt>
 b0c:	add	r0, r0, #69	; 0x45
 b10:	bl	b90 <rb_malloc>
 b14:	mov	r6, r0
 b18:	ldr	r1, [r5]
 b1c:	add	r0, r0, #68	; 0x44
 b20:	bl	890 <strcpy@plt>
 b24:	mov	r1, r6
 b28:	str	r0, [r1], #36	; 0x24
 b2c:	add	r0, r6, #20
 b30:	vst1.32	{d8-d9}, [r0]
 b34:	vst1.32	{d10-d11}, [r1]
 b38:	add	r0, r6, #52	; 0x34
 b3c:	vst1.32	{d12-d13}, [r0]
 b40:	mov	r0, r6
 b44:	bl	92c <mod_add_cmd@plt>
 b48:	bl	8c0 <rb_make_rb_dlink_node@plt>
 b4c:	mov	r1, r0
 b50:	mov	r0, r6
 b54:	bl	bb0 <rb_dlinkAdd>
 b58:	ldr	r0, [r7]
 b5c:	mov	r1, r4
 b60:	bl	920 <rb_dictionary_foreach_next@plt>
 b64:	ldr	r0, [r7]
 b68:	mov	r1, r4
 b6c:	bl	8fc <rb_dictionary_foreach_cur@plt>
 b70:	mov	r5, r0
 b74:	cmp	r0, #0
 b78:	bne	b04 <create_aliases+0x60>
 b7c:	sub	sp, fp, #64	; 0x40
 b80:	vpop	{d8-d13}
 b84:	pop	{r4, r5, r6, r7, fp, pc}
 b88:	.word	0x000115b0
 b8c:	.word	0x000113d8

00000b90 <rb_malloc>:
 b90:	push	{fp, lr}
 b94:	mov	fp, sp
 b98:	mov	r1, r0
 b9c:	mov	r0, #1
 ba0:	bl	83c <calloc@plt>
 ba4:	cmp	r0, #0
 ba8:	popne	{fp, pc}
 bac:	bl	878 <rb_outofmemory@plt>

00000bb0 <rb_dlinkAdd>:
 bb0:	push	{fp, lr}
 bb4:	mov	fp, sp
 bb8:	cmp	r0, #0
 bbc:	beq	c1c <rb_dlinkAdd+0x6c>
 bc0:	cmp	r1, #0
 bc4:	beq	c3c <rb_dlinkAdd+0x8c>
 bc8:	mov	r2, #0
 bcc:	stm	r1, {r0, r2}
 bd0:	ldr	r2, [pc, #132]	; c5c <rb_dlinkAdd+0xac>
 bd4:	ldr	r2, [pc, r2]
 bd8:	str	r2, [r1, #8]
 bdc:	cmp	r2, #0
 be0:	ldr	r0, [pc, #120]	; c60 <rb_dlinkAdd+0xb0>
 be4:	add	r0, pc, r0
 be8:	beq	bf8 <rb_dlinkAdd+0x48>
 bec:	add	r2, r2, #4
 bf0:	str	r1, [r2]
 bf4:	b	c08 <rb_dlinkAdd+0x58>
 bf8:	mov	r2, r0
 bfc:	ldr	r3, [r2, #4]!
 c00:	cmp	r3, #0
 c04:	streq	r1, [r2]
 c08:	str	r1, [r0]
 c0c:	ldr	r1, [r0, #8]
 c10:	add	r1, r1, #1
 c14:	str	r1, [r0, #8]
 c18:	pop	{fp, pc}
 c1c:	ldr	r0, [pc, #64]	; c64 <rb_dlinkAdd+0xb4>
 c20:	add	r0, pc, r0
 c24:	ldr	r1, [pc, #60]	; c68 <rb_dlinkAdd+0xb8>
 c28:	add	r1, pc, r1
 c2c:	ldr	r3, [pc, #56]	; c6c <rb_dlinkAdd+0xbc>
 c30:	add	r3, pc, r3
 c34:	mov	r2, #143	; 0x8f
 c38:	bl	944 <__assert_fail@plt>
 c3c:	ldr	r0, [pc, #44]	; c70 <rb_dlinkAdd+0xc0>
 c40:	add	r0, pc, r0
 c44:	ldr	r1, [pc, #40]	; c74 <rb_dlinkAdd+0xc4>
 c48:	add	r1, pc, r1
 c4c:	ldr	r3, [pc, #36]	; c78 <rb_dlinkAdd+0xc8>
 c50:	add	r3, pc, r3
 c54:	mov	r2, #144	; 0x90
 c58:	bl	944 <__assert_fail@plt>
 c5c:	.word	0x000114ec
 c60:	.word	0x000114dc
 c64:	.word	0x000003e4
 c68:	.word	0x000003e9
 c6c:	.word	0x000003fd
 c70:	.word	0x00000428
 c74:	.word	0x000003c9
 c78:	.word	0x000003dd

00000c7c <m_alias>:
 c7c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
 c80:	add	fp, sp, #28
 c84:	sub	sp, sp, #4
 c88:	mov	r4, r1
 c8c:	mov	r7, r0
 c90:	ldr	r1, [r0, #192]	; 0xc0
 c94:	ldr	r0, [pc, #480]	; e7c <m_alias+0x200>
 c98:	ldr	r0, [pc, r0]
 c9c:	ldr	r0, [r0]
 ca0:	bl	938 <rb_dictionary_retrieve@plt>
 ca4:	cmp	r0, #0
 ca8:	beq	d1c <m_alias+0xa0>
 cac:	mov	r5, r0
 cb0:	ldr	sl, [fp, #8]
 cb4:	ldrb	r0, [r4, #65]	; 0x41
 cb8:	tst	r0, #1
 cbc:	bne	cd8 <m_alias+0x5c>
 cc0:	ldr	r0, [r4, #432]	; 0x1b0
 cc4:	ldr	r0, [r0, #116]	; 0x74
 cc8:	cmp	r0, #21
 ccc:	bcc	cd8 <m_alias+0x5c>
 cd0:	mov	r0, r4
 cd4:	bl	914 <flood_endgrace@plt>
 cd8:	ldr	r6, [r5, #4]
 cdc:	mov	r0, r6
 ce0:	mov	r1, #64	; 0x40
 ce4:	bl	8e4 <strchr@plt>
 ce8:	mov	r9, r0
 cec:	cmp	r0, #0
 cf0:	beq	d5c <m_alias+0xe0>
 cf4:	add	r1, r9, #1
 cf8:	mov	r0, #0
 cfc:	bl	8f0 <find_server@plt>
 d00:	cmp	r0, #0
 d04:	beq	d7c <m_alias+0x100>
 d08:	mov	r8, r0
 d0c:	ldrh	r0, [r0, #80]	; 0x50
 d10:	cmp	r0, #4
 d14:	beq	d7c <m_alias+0x100>
 d18:	b	d9c <m_alias+0x120>
 d1c:	ldrh	r0, [r4, #80]	; 0x50
 d20:	cmp	r0, #64	; 0x40
 d24:	bne	e74 <m_alias+0x1f8>
 d28:	ldr	r0, [r4, #24]
 d2c:	cmp	r0, #0
 d30:	beq	e74 <m_alias+0x1f8>
 d34:	ldr	r0, [r7, #192]	; 0xc0
 d38:	str	r0, [sp]
 d3c:	add	r3, r4, #88	; 0x58
 d40:	ldr	r0, [pc, #312]	; e80 <m_alias+0x204>
 d44:	ldr	r0, [pc, r0]
 d48:	add	r2, r0, #88	; 0x58
 d4c:	ldr	r1, [pc, #304]	; e84 <m_alias+0x208>
 d50:	add	r1, pc, r1
 d54:	mov	r0, r4
 d58:	b	e70 <m_alias+0x1f4>
 d5c:	mov	r0, r6
 d60:	bl	908 <find_named_person@plt>
 d64:	cmp	r0, #0
 d68:	beq	d7c <m_alias+0x100>
 d6c:	mov	r8, r0
 d70:	ldrb	r0, [r0, #56]	; 0x38
 d74:	tst	r0, #64	; 0x40
 d78:	bne	d9c <m_alias+0x120>
 d7c:	ldr	r3, [r5, #4]
 d80:	ldr	r2, [pc, #256]	; e88 <m_alias+0x20c>
 d84:	add	r2, pc, r2
 d88:	mov	r0, r4
 d8c:	mov	r1, #440	; 0x1b8
 d90:	sub	sp, fp, #28
 d94:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
 d98:	b	8cc <sendto_one_numeric@plt>
 d9c:	mov	r0, r7
 da0:	mov	r1, #1
 da4:	bl	8a8 <msgbuf_reconstruct_tail@plt>
 da8:	ldr	r0, [sl, #4]
 dac:	cmp	r0, #0
 db0:	beq	df4 <m_alias+0x178>
 db4:	ldrb	r1, [r0]
 db8:	cmp	r1, #0
 dbc:	beq	df4 <m_alias+0x178>
 dc0:	ldr	r1, [r8, #36]	; 0x24
 dc4:	ldrh	r2, [r1, #80]	; 0x50
 dc8:	cmp	r2, #32
 dcc:	bne	e1c <m_alias+0x1a0>
 dd0:	ldrb	r3, [r1, #396]	; 0x18c
 dd4:	cmp	r3, #0
 dd8:	beq	e1c <m_alias+0x1a0>
 ddc:	ldrb	r3, [r4, #396]!	; 0x18c
 de0:	cmp	r3, #0
 de4:	subeq	r4, r4, #308	; 0x134
 de8:	cmp	r9, #0
 dec:	bne	e28 <m_alias+0x1ac>
 df0:	b	e30 <m_alias+0x1b4>
 df4:	add	r3, r8, #88	; 0x58
 df8:	ldr	r0, [pc, #144]	; e90 <m_alias+0x214>
 dfc:	ldr	r0, [pc, r0]
 e00:	add	r2, r0, #88	; 0x58
 e04:	ldr	r1, [pc, #136]	; e94 <m_alias+0x218>
 e08:	add	r1, pc, r1
 e0c:	mov	r0, r4
 e10:	sub	sp, fp, #28
 e14:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
 e18:	b	860 <sendto_one@plt>
 e1c:	add	r4, r4, #88	; 0x58
 e20:	cmp	r9, #0
 e24:	beq	e30 <m_alias+0x1b4>
 e28:	ldr	r3, [r5, #4]
 e2c:	b	e5c <m_alias+0x1e0>
 e30:	cmp	r2, #32
 e34:	bne	e58 <m_alias+0x1dc>
 e38:	ldrb	r1, [r1, #396]	; 0x18c
 e3c:	cmp	r1, #0
 e40:	beq	e58 <m_alias+0x1dc>
 e44:	mov	r3, r8
 e48:	ldrb	r1, [r3, #396]!	; 0x18c
 e4c:	cmp	r1, #0
 e50:	subeq	r3, r3, #308	; 0x134
 e54:	b	e5c <m_alias+0x1e0>
 e58:	add	r3, r8, #88	; 0x58
 e5c:	str	r0, [sp]
 e60:	ldr	r1, [pc, #36]	; e8c <m_alias+0x210>
 e64:	add	r1, pc, r1
 e68:	mov	r0, r8
 e6c:	mov	r2, r4
 e70:	bl	860 <sendto_one@plt>
 e74:	sub	sp, fp, #28
 e78:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
 e7c:	.word	0x000113d0
 e80:	.word	0x00011330
 e84:	.word	0x0000023f
 e88:	.word	0x0000022a
 e8c:	.word	0x0000018d
 e90:	.word	0x00011278
 e94:	.word	0x000001cd

00000e98 <destroy_aliases>:
 e98:	push	{r4, r5, fp, lr}
 e9c:	add	fp, sp, #8
 ea0:	ldr	r4, [pc, #60]	; ee4 <destroy_aliases+0x4c>
 ea4:	ldr	r4, [pc, r4]
 ea8:	cmp	r4, #0
 eac:	popeq	{r4, r5, fp, pc}
 eb0:	ldr	r0, [r4]
 eb4:	ldr	r5, [r4, #8]
 eb8:	bl	848 <mod_del_cmd@plt>
 ebc:	ldr	r0, [r4]
 ec0:	bl	ee8 <rb_free>
 ec4:	mov	r0, r4
 ec8:	bl	ef4 <rb_dlinkDelete>
 ecc:	mov	r0, r4
 ed0:	bl	884 <rb_free_rb_dlink_node@plt>
 ed4:	cmp	r5, #0
 ed8:	mov	r4, r5
 edc:	bne	eb0 <destroy_aliases+0x18>
 ee0:	pop	{r4, r5, fp, pc}
 ee4:	.word	0x0001121c

00000ee8 <rb_free>:
 ee8:	cmp	r0, #0
 eec:	bxeq	lr
 ef0:	b	86c <free@plt>

00000ef4 <rb_dlinkDelete>:
 ef4:	push	{fp, lr}
 ef8:	mov	fp, sp
 efc:	cmp	r0, #0
 f00:	beq	f58 <rb_dlinkDelete+0x64>
 f04:	ldmib	r0, {r2, r3}
 f08:	cmp	r3, #0
 f0c:	ldr	r1, [pc, #100]	; f78 <rb_dlinkDelete+0x84>
 f10:	add	r1, pc, r1
 f14:	beq	f24 <rb_dlinkDelete+0x30>
 f18:	str	r2, [r3, #4]
 f1c:	ldr	r2, [r0, #4]
 f20:	b	f28 <rb_dlinkDelete+0x34>
 f24:	str	r2, [r1, #4]
 f28:	cmp	r2, #0
 f2c:	mov	r3, r1
 f30:	addne	r3, r2, #8
 f34:	ldr	r2, [r0, #8]
 f38:	str	r2, [r3]
 f3c:	mov	r2, #0
 f40:	str	r2, [r0, #4]
 f44:	str	r2, [r0, #8]
 f48:	ldr	r0, [r1, #8]
 f4c:	sub	r0, r0, #1
 f50:	str	r0, [r1, #8]
 f54:	pop	{fp, pc}
 f58:	ldr	r0, [pc, #28]	; f7c <rb_dlinkDelete+0x88>
 f5c:	add	r0, pc, r0
 f60:	ldr	r1, [pc, #24]	; f80 <rb_dlinkDelete+0x8c>
 f64:	add	r1, pc, r1
 f68:	ldr	r3, [pc, #20]	; f84 <rb_dlinkDelete+0x90>
 f6c:	add	r3, pc, r3
 f70:	mov	r2, #235	; 0xeb
 f74:	bl	944 <__assert_fail@plt>
 f78:	.word	0x000111b0
 f7c:	.word	0x0000010c
 f80:	.word	0x000000ad
 f84:	.word	0x00000106

Disassembly of section .fini:

00000f88 <_fini>:
 f88:	push	{r3, lr}
 f8c:	pop	{r3, pc}
