
../repos/coreutils/src/mknod:     file format elf32-littlearm


Disassembly of section .init:

000114e0 <.init>:
   114e0:	push	{r3, lr}
   114e4:	bl	12054 <__assert_fail@plt+0x6ec>
   114e8:	pop	{r3, pc}

Disassembly of section .plt:

000114ec <fstatfs64@plt-0x14>:
   114ec:	push	{lr}		; (str lr, [sp, #-4]!)
   114f0:	ldr	lr, [pc, #4]	; 114fc <fstatfs64@plt-0x4>
   114f4:	add	lr, pc, lr
   114f8:	ldr	pc, [lr, #8]!
   114fc:	andeq	r9, r1, r4, lsl #22

00011500 <fstatfs64@plt>:
   11500:	add	ip, pc, #0, 12
   11504:	add	ip, ip, #102400	; 0x19000
   11508:	ldr	pc, [ip, #2820]!	; 0xb04

0001150c <selabel_lookup@plt>:
   1150c:	add	ip, pc, #0, 12
   11510:	add	ip, ip, #102400	; 0x19000
   11514:	ldr	pc, [ip, #2812]!	; 0xafc

00011518 <calloc@plt>:
   11518:	add	ip, pc, #0, 12
   1151c:	add	ip, ip, #102400	; 0x19000
   11520:	ldr	pc, [ip, #2804]!	; 0xaf4

00011524 <fputs_unlocked@plt>:
   11524:	add	ip, pc, #0, 12
   11528:	add	ip, ip, #102400	; 0x19000
   1152c:	ldr	pc, [ip, #2796]!	; 0xaec

00011530 <raise@plt>:
   11530:	add	ip, pc, #0, 12
   11534:	add	ip, ip, #102400	; 0x19000
   11538:	ldr	pc, [ip, #2788]!	; 0xae4

0001153c <is_selinux_enabled@plt>:
   1153c:	add	ip, pc, #0, 12
   11540:	add	ip, ip, #102400	; 0x19000
   11544:	ldr	pc, [ip, #2780]!	; 0xadc

00011548 <strcmp@plt>:
   11548:	add	ip, pc, #0, 12
   1154c:	add	ip, ip, #102400	; 0x19000
   11550:	ldr	pc, [ip, #2772]!	; 0xad4

00011554 <gnu_dev_makedev@plt>:
   11554:	add	ip, pc, #0, 12
   11558:	add	ip, ip, #102400	; 0x19000
   1155c:	ldr	pc, [ip, #2764]!	; 0xacc

00011560 <context_type_get@plt>:
   11560:	add	ip, pc, #0, 12
   11564:	add	ip, ip, #102400	; 0x19000
   11568:	ldr	pc, [ip, #2756]!	; 0xac4

0001156c <fflush@plt>:
   1156c:	add	ip, pc, #0, 12
   11570:	add	ip, ip, #102400	; 0x19000
   11574:	ldr	pc, [ip, #2748]!	; 0xabc

00011578 <lsetfilecon@plt>:
   11578:	add	ip, pc, #0, 12
   1157c:	add	ip, ip, #102400	; 0x19000
   11580:	ldr	pc, [ip, #2740]!	; 0xab4

00011584 <memmove@plt>:
   11584:	add	ip, pc, #0, 12
   11588:	add	ip, ip, #102400	; 0x19000
   1158c:	ldr	pc, [ip, #2732]!	; 0xaac

00011590 <free@plt>:
   11590:	add	ip, pc, #0, 12
   11594:	add	ip, ip, #102400	; 0x19000
   11598:	ldr	pc, [ip, #2724]!	; 0xaa4

0001159c <faccessat@plt>:
   1159c:	add	ip, pc, #0, 12
   115a0:	add	ip, ip, #102400	; 0x19000
   115a4:	ldr	pc, [ip, #2716]!	; 0xa9c

000115a8 <_exit@plt>:
   115a8:	add	ip, pc, #0, 12
   115ac:	add	ip, ip, #102400	; 0x19000
   115b0:	ldr	pc, [ip, #2708]!	; 0xa94

000115b4 <memcpy@plt>:
   115b4:	add	ip, pc, #0, 12
   115b8:	add	ip, ip, #102400	; 0x19000
   115bc:	ldr	pc, [ip, #2700]!	; 0xa8c

000115c0 <mbsinit@plt>:
   115c0:	add	ip, pc, #0, 12
   115c4:	add	ip, ip, #102400	; 0x19000
   115c8:	ldr	pc, [ip, #2692]!	; 0xa84

000115cc <context_new@plt>:
   115cc:	add	ip, pc, #0, 12
   115d0:	add	ip, ip, #102400	; 0x19000
   115d4:	ldr	pc, [ip, #2684]!	; 0xa7c

000115d8 <memcmp@plt>:
   115d8:	add	ip, pc, #0, 12
   115dc:	add	ip, ip, #102400	; 0x19000
   115e0:	ldr	pc, [ip, #2676]!	; 0xa74

000115e4 <fputc_unlocked@plt>:
   115e4:	add	ip, pc, #0, 12
   115e8:	add	ip, ip, #102400	; 0x19000
   115ec:	ldr	pc, [ip, #2668]!	; 0xa6c

000115f0 <dcgettext@plt>:
   115f0:	add	ip, pc, #0, 12
   115f4:	add	ip, ip, #102400	; 0x19000
   115f8:	ldr	pc, [ip, #2660]!	; 0xa64

000115fc <context_type_set@plt>:
   115fc:	add	ip, pc, #0, 12
   11600:	add	ip, ip, #102400	; 0x19000
   11604:	ldr	pc, [ip, #2652]!	; 0xa5c

00011608 <realloc@plt>:
   11608:	add	ip, pc, #0, 12
   1160c:	add	ip, ip, #102400	; 0x19000
   11610:	ldr	pc, [ip, #2644]!	; 0xa54

00011614 <fgetfilecon@plt>:
   11614:	add	ip, pc, #0, 12
   11618:	add	ip, ip, #102400	; 0x19000
   1161c:	ldr	pc, [ip, #2636]!	; 0xa4c

00011620 <textdomain@plt>:
   11620:	add	ip, pc, #0, 12
   11624:	add	ip, ip, #102400	; 0x19000
   11628:	ldr	pc, [ip, #2628]!	; 0xa44

0001162c <rawmemchr@plt>:
   1162c:	add	ip, pc, #0, 12
   11630:	add	ip, ip, #102400	; 0x19000
   11634:	ldr	pc, [ip, #2620]!	; 0xa3c

00011638 <__fxstatat64@plt>:
   11638:	add	ip, pc, #0, 12
   1163c:	add	ip, ip, #102400	; 0x19000
   11640:	ldr	pc, [ip, #2612]!	; 0xa34

00011644 <iswprint@plt>:
   11644:	add	ip, pc, #0, 12
   11648:	add	ip, ip, #102400	; 0x19000
   1164c:	ldr	pc, [ip, #2604]!	; 0xa2c

00011650 <__fxstat64@plt>:
   11650:	add	ip, pc, #0, 12
   11654:	add	ip, ip, #102400	; 0x19000
   11658:	ldr	pc, [ip, #2596]!	; 0xa24

0001165c <readlink@plt>:
   1165c:	add	ip, pc, #0, 12
   11660:	add	ip, ip, #102400	; 0x19000
   11664:	ldr	pc, [ip, #2588]!	; 0xa1c

00011668 <lseek64@plt>:
   11668:	add	ip, pc, #0, 12
   1166c:	add	ip, ip, #102400	; 0x19000
   11670:	ldr	pc, [ip, #2580]!	; 0xa14

00011674 <__ctype_get_mb_cur_max@plt>:
   11674:	add	ip, pc, #0, 12
   11678:	add	ip, ip, #102400	; 0x19000
   1167c:	ldr	pc, [ip, #2572]!	; 0xa0c

00011680 <strcpy@plt>:
   11680:	add	ip, pc, #0, 12
   11684:	add	ip, ip, #102400	; 0x19000
   11688:	ldr	pc, [ip, #2564]!	; 0xa04

0001168c <getcon@plt>:
   1168c:	add	ip, pc, #0, 12
   11690:	add	ip, ip, #102400	; 0x19000
   11694:	ldr	pc, [ip, #2556]!	; 0x9fc

00011698 <__fpending@plt>:
   11698:	add	ip, pc, #0, 12
   1169c:	add	ip, ip, #102400	; 0x19000
   116a0:	ldr	pc, [ip, #2548]!	; 0x9f4

000116a4 <ferror_unlocked@plt>:
   116a4:	add	ip, pc, #0, 12
   116a8:	add	ip, ip, #102400	; 0x19000
   116ac:	ldr	pc, [ip, #2540]!	; 0x9ec

000116b0 <mbrtowc@plt>:
   116b0:	add	ip, pc, #0, 12
   116b4:	add	ip, ip, #102400	; 0x19000
   116b8:	ldr	pc, [ip, #2532]!	; 0x9e4

000116bc <error@plt>:
   116bc:	add	ip, pc, #0, 12
   116c0:	add	ip, ip, #102400	; 0x19000
   116c4:	ldr	pc, [ip, #2524]!	; 0x9dc

000116c8 <open64@plt>:
   116c8:	add	ip, pc, #0, 12
   116cc:	add	ip, ip, #102400	; 0x19000
   116d0:	ldr	pc, [ip, #2516]!	; 0x9d4

000116d4 <lgetfilecon@plt>:
   116d4:	add	ip, pc, #0, 12
   116d8:	add	ip, ip, #102400	; 0x19000
   116dc:	ldr	pc, [ip, #2508]!	; 0x9cc

000116e0 <malloc@plt>:
   116e0:	add	ip, pc, #0, 12
   116e4:	add	ip, ip, #102400	; 0x19000
   116e8:	ldr	pc, [ip, #2500]!	; 0x9c4

000116ec <__libc_start_main@plt>:
   116ec:	add	ip, pc, #0, 12
   116f0:	add	ip, ip, #102400	; 0x19000
   116f4:	ldr	pc, [ip, #2492]!	; 0x9bc

000116f8 <__freading@plt>:
   116f8:	add	ip, pc, #0, 12
   116fc:	add	ip, ip, #102400	; 0x19000
   11700:	ldr	pc, [ip, #2484]!	; 0x9b4

00011704 <__gmon_start__@plt>:
   11704:	add	ip, pc, #0, 12
   11708:	add	ip, ip, #102400	; 0x19000
   1170c:	ldr	pc, [ip, #2476]!	; 0x9ac

00011710 <context_free@plt>:
   11710:	add	ip, pc, #0, 12
   11714:	add	ip, ip, #102400	; 0x19000
   11718:	ldr	pc, [ip, #2468]!	; 0x9a4

0001171c <mempcpy@plt>:
   1171c:	add	ip, pc, #0, 12
   11720:	add	ip, ip, #102400	; 0x19000
   11724:	ldr	pc, [ip, #2460]!	; 0x99c

00011728 <getopt_long@plt>:
   11728:	add	ip, pc, #0, 12
   1172c:	add	ip, ip, #102400	; 0x19000
   11730:	ldr	pc, [ip, #2452]!	; 0x994

00011734 <__ctype_b_loc@plt>:
   11734:	add	ip, pc, #0, 12
   11738:	add	ip, ip, #102400	; 0x19000
   1173c:	ldr	pc, [ip, #2444]!	; 0x98c

00011740 <getcwd@plt>:
   11740:	add	ip, pc, #0, 12
   11744:	add	ip, ip, #102400	; 0x19000
   11748:	ldr	pc, [ip, #2436]!	; 0x984

0001174c <exit@plt>:
   1174c:	add	ip, pc, #0, 12
   11750:	add	ip, ip, #102400	; 0x19000
   11754:	ldr	pc, [ip, #2428]!	; 0x97c

00011758 <getfilecon@plt>:
   11758:	add	ip, pc, #0, 12
   1175c:	add	ip, ip, #102400	; 0x19000
   11760:	ldr	pc, [ip, #2420]!	; 0x974

00011764 <strlen@plt>:
   11764:	add	ip, pc, #0, 12
   11768:	add	ip, ip, #102400	; 0x19000
   1176c:	ldr	pc, [ip, #2412]!	; 0x96c

00011770 <selabel_open@plt>:
   11770:	add	ip, pc, #0, 12
   11774:	add	ip, ip, #102400	; 0x19000
   11778:	ldr	pc, [ip, #2404]!	; 0x964

0001177c <strchr@plt>:
   1177c:	add	ip, pc, #0, 12
   11780:	add	ip, ip, #102400	; 0x19000
   11784:	ldr	pc, [ip, #2396]!	; 0x95c

00011788 <openat64@plt>:
   11788:	add	ip, pc, #0, 12
   1178c:	add	ip, ip, #102400	; 0x19000
   11790:	ldr	pc, [ip, #2388]!	; 0x954

00011794 <setfscreatecon@plt>:
   11794:	add	ip, pc, #0, 12
   11798:	add	ip, ip, #102400	; 0x19000
   1179c:	ldr	pc, [ip, #2380]!	; 0x94c

000117a0 <__errno_location@plt>:
   117a0:	add	ip, pc, #0, 12
   117a4:	add	ip, ip, #102400	; 0x19000
   117a8:	ldr	pc, [ip, #2372]!	; 0x944

000117ac <__sprintf_chk@plt>:
   117ac:	add	ip, pc, #0, 12
   117b0:	add	ip, ip, #102400	; 0x19000
   117b4:	ldr	pc, [ip, #2364]!	; 0x93c

000117b8 <__cxa_atexit@plt>:
   117b8:	add	ip, pc, #0, 12
   117bc:	add	ip, ip, #102400	; 0x19000
   117c0:	ldr	pc, [ip, #2356]!	; 0x934

000117c4 <memset@plt>:
   117c4:	add	ip, pc, #0, 12
   117c8:	add	ip, ip, #102400	; 0x19000
   117cc:	ldr	pc, [ip, #2348]!	; 0x92c

000117d0 <__printf_chk@plt>:
   117d0:	add	ip, pc, #0, 12
   117d4:	add	ip, ip, #102400	; 0x19000
   117d8:	ldr	pc, [ip, #2340]!	; 0x924

000117dc <fileno@plt>:
   117dc:	add	ip, pc, #0, 12
   117e0:	add	ip, ip, #102400	; 0x19000
   117e4:	ldr	pc, [ip, #2332]!	; 0x91c

000117e8 <strtoumax@plt>:
   117e8:	add	ip, pc, #0, 12
   117ec:	add	ip, ip, #102400	; 0x19000
   117f0:	ldr	pc, [ip, #2324]!	; 0x914

000117f4 <__fprintf_chk@plt>:
   117f4:	add	ip, pc, #0, 12
   117f8:	add	ip, ip, #102400	; 0x19000
   117fc:	ldr	pc, [ip, #2316]!	; 0x90c

00011800 <fclose@plt>:
   11800:	add	ip, pc, #0, 12
   11804:	add	ip, ip, #102400	; 0x19000
   11808:	ldr	pc, [ip, #2308]!	; 0x904

0001180c <fseeko64@plt>:
   1180c:	add	ip, pc, #0, 12
   11810:	add	ip, ip, #102400	; 0x19000
   11814:	ldr	pc, [ip, #2300]!	; 0x8fc

00011818 <fcntl64@plt>:
   11818:	add	ip, pc, #0, 12
   1181c:	add	ip, ip, #102400	; 0x19000
   11820:	ldr	pc, [ip, #2292]!	; 0x8f4

00011824 <setlocale@plt>:
   11824:	add	ip, pc, #0, 12
   11828:	add	ip, ip, #102400	; 0x19000
   1182c:	ldr	pc, [ip, #2284]!	; 0x8ec

00011830 <fsetfilecon@plt>:
   11830:	add	ip, pc, #0, 12
   11834:	add	ip, ip, #102400	; 0x19000
   11838:	ldr	pc, [ip, #2276]!	; 0x8e4

0001183c <strrchr@plt>:
   1183c:	add	ip, pc, #0, 12
   11840:	add	ip, ip, #102400	; 0x19000
   11844:	ldr	pc, [ip, #2268]!	; 0x8dc

00011848 <nl_langinfo@plt>:
   11848:	add	ip, pc, #0, 12
   1184c:	add	ip, ip, #102400	; 0x19000
   11850:	ldr	pc, [ip, #2260]!	; 0x8d4

00011854 <readdir64@plt>:
   11854:	add	ip, pc, #0, 12
   11858:	add	ip, ip, #102400	; 0x19000
   1185c:	ldr	pc, [ip, #2252]!	; 0x8cc

00011860 <fdopendir@plt>:
   11860:	add	ip, pc, #0, 12
   11864:	add	ip, ip, #102400	; 0x19000
   11868:	ldr	pc, [ip, #2244]!	; 0x8c4

0001186c <security_compute_create@plt>:
   1186c:	add	ip, pc, #0, 12
   11870:	add	ip, ip, #102400	; 0x19000
   11874:	ldr	pc, [ip, #2236]!	; 0x8bc

00011878 <dirfd@plt>:
   11878:	add	ip, pc, #0, 12
   1187c:	add	ip, ip, #102400	; 0x19000
   11880:	ldr	pc, [ip, #2228]!	; 0x8b4

00011884 <fchdir@plt>:
   11884:	add	ip, pc, #0, 12
   11888:	add	ip, ip, #102400	; 0x19000
   1188c:	ldr	pc, [ip, #2220]!	; 0x8ac

00011890 <qsort@plt>:
   11890:	add	ip, pc, #0, 12
   11894:	add	ip, ip, #102400	; 0x19000
   11898:	ldr	pc, [ip, #2212]!	; 0x8a4

0001189c <freecon@plt>:
   1189c:	add	ip, pc, #0, 12
   118a0:	add	ip, ip, #102400	; 0x19000
   118a4:	ldr	pc, [ip, #2204]!	; 0x89c

000118a8 <bindtextdomain@plt>:
   118a8:	add	ip, pc, #0, 12
   118ac:	add	ip, ip, #102400	; 0x19000
   118b0:	ldr	pc, [ip, #2196]!	; 0x894

000118b4 <getfscreatecon@plt>:
   118b4:	add	ip, pc, #0, 12
   118b8:	add	ip, ip, #102400	; 0x19000
   118bc:	ldr	pc, [ip, #2188]!	; 0x88c

000118c0 <umask@plt>:
   118c0:	add	ip, pc, #0, 12
   118c4:	add	ip, ip, #102400	; 0x19000
   118c8:	ldr	pc, [ip, #2180]!	; 0x884

000118cc <context_str@plt>:
   118cc:	add	ip, pc, #0, 12
   118d0:	add	ip, ip, #102400	; 0x19000
   118d4:	ldr	pc, [ip, #2172]!	; 0x87c

000118d8 <chmod@plt>:
   118d8:	add	ip, pc, #0, 12
   118dc:	add	ip, ip, #102400	; 0x19000
   118e0:	ldr	pc, [ip, #2164]!	; 0x874

000118e4 <__xstat64@plt>:
   118e4:	add	ip, pc, #0, 12
   118e8:	add	ip, ip, #102400	; 0x19000
   118ec:	ldr	pc, [ip, #2156]!	; 0x86c

000118f0 <__xmknod@plt>:
   118f0:	add	ip, pc, #0, 12
   118f4:	add	ip, ip, #102400	; 0x19000
   118f8:	ldr	pc, [ip, #2148]!	; 0x864

000118fc <fputs@plt>:
   118fc:	add	ip, pc, #0, 12
   11900:	add	ip, ip, #102400	; 0x19000
   11904:	ldr	pc, [ip, #2140]!	; 0x85c

00011908 <strncmp@plt>:
   11908:	add	ip, pc, #0, 12
   1190c:	add	ip, ip, #102400	; 0x19000
   11910:	ldr	pc, [ip, #2132]!	; 0x854

00011914 <abort@plt>:
   11914:	add	ip, pc, #0, 12
   11918:	add	ip, ip, #102400	; 0x19000
   1191c:	ldr	pc, [ip, #2124]!	; 0x84c

00011920 <close@plt>:
   11920:	add	ip, pc, #0, 12
   11924:	add	ip, ip, #102400	; 0x19000
   11928:	ldr	pc, [ip, #2116]!	; 0x844

0001192c <__lxstat64@plt>:
   1192c:	add	ip, pc, #0, 12
   11930:	add	ip, ip, #102400	; 0x19000
   11934:	ldr	pc, [ip, #2108]!	; 0x83c

00011938 <mkfifo@plt>:
   11938:	add	ip, pc, #0, 12
   1193c:	add	ip, ip, #102400	; 0x19000
   11940:	ldr	pc, [ip, #2100]!	; 0x834

00011944 <mode_to_security_class@plt>:
   11944:	add	ip, pc, #0, 12
   11948:	add	ip, ip, #102400	; 0x19000
   1194c:	ldr	pc, [ip, #2092]!	; 0x82c

00011950 <closedir@plt>:
   11950:	add	ip, pc, #0, 12
   11954:	add	ip, ip, #102400	; 0x19000
   11958:	ldr	pc, [ip, #2084]!	; 0x824

0001195c <strspn@plt>:
   1195c:	add	ip, pc, #0, 12
   11960:	add	ip, ip, #102400	; 0x19000
   11964:	ldr	pc, [ip, #2076]!	; 0x81c

00011968 <__assert_fail@plt>:
   11968:	add	ip, pc, #0, 12
   1196c:	add	ip, ip, #102400	; 0x19000
   11970:	ldr	pc, [ip, #2068]!	; 0x814

Disassembly of section .text:

00011978 <lchmod@@Base-0x44ac>:
   11978:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1197c:	mov	r8, r0
   11980:	sub	sp, sp, #44	; 0x2c
   11984:	ldr	r0, [r1]
   11988:	mov	r4, r1
   1198c:	bl	16410 <lchmod@@Base+0x5ec>
   11990:	ldr	r1, [pc, #1536]	; 11f98 <__assert_fail@plt+0x630>
   11994:	mov	r0, #6
   11998:	bl	11824 <setlocale@plt>
   1199c:	ldr	r1, [pc, #1528]	; 11f9c <__assert_fail@plt+0x634>
   119a0:	ldr	r0, [pc, #1528]	; 11fa0 <__assert_fail@plt+0x638>
   119a4:	bl	118a8 <bindtextdomain@plt>
   119a8:	ldr	r0, [pc, #1520]	; 11fa0 <__assert_fail@plt+0x638>
   119ac:	bl	11620 <textdomain@plt>
   119b0:	ldr	r0, [pc, #1516]	; 11fa4 <__assert_fail@plt+0x63c>
   119b4:	bl	19920 <lchmod@@Base+0x3afc>
   119b8:	mov	r6, #0
   119bc:	ldr	r9, [pc, #1508]	; 11fa8 <__assert_fail@plt+0x640>
   119c0:	ldr	r7, [pc, #1508]	; 11fac <__assert_fail@plt+0x644>
   119c4:	mov	fp, r6
   119c8:	mov	sl, r6
   119cc:	mov	r5, r6
   119d0:	str	r5, [sp]
   119d4:	mov	r3, r9
   119d8:	ldr	r2, [pc, #1488]	; 11fb0 <__assert_fail@plt+0x648>
   119dc:	mov	r1, r4
   119e0:	mov	r0, r8
   119e4:	bl	11728 <getopt_long@plt>
   119e8:	cmn	r0, #1
   119ec:	bne	11a74 <__assert_fail@plt+0x10c>
   119f0:	cmp	sl, #0
   119f4:	beq	11b70 <__assert_fail@plt+0x208>
   119f8:	mov	r0, sl
   119fc:	bl	15f1c <lchmod@@Base+0xf8>
   11a00:	subs	r9, r0, #0
   11a04:	moveq	r2, #5
   11a08:	ldreq	r1, [pc, #1444]	; 11fb4 <__assert_fail@plt+0x64c>
   11a0c:	beq	11a60 <__assert_fail@plt+0xf8>
   11a10:	mov	r0, #0
   11a14:	bl	118c0 <umask@plt>
   11a18:	mov	r7, r0
   11a1c:	bl	118c0 <umask@plt>
   11a20:	mov	r3, r9
   11a24:	mov	r2, r7
   11a28:	mov	r1, #0
   11a2c:	str	r5, [sp]
   11a30:	ldr	r0, [pc, #1408]	; 11fb8 <__assert_fail@plt+0x650>
   11a34:	bl	16280 <lchmod@@Base+0x45c>
   11a38:	mov	r7, r0
   11a3c:	mov	r0, r9
   11a40:	bl	13188 <__assert_fail@plt+0x1820>
   11a44:	bic	r3, r7, #508	; 0x1fc
   11a48:	bic	r3, r3, #3
   11a4c:	cmp	r3, #0
   11a50:	beq	11b74 <__assert_fail@plt+0x20c>
   11a54:	ldr	r1, [pc, #1376]	; 11fbc <__assert_fail@plt+0x654>
   11a58:	mov	r2, #5
   11a5c:	mov	r0, #0
   11a60:	bl	115f0 <dcgettext@plt>
   11a64:	mov	r1, #0
   11a68:	mov	r2, r0
   11a6c:	mov	r0, #1
   11a70:	bl	116bc <error@plt>
   11a74:	cmn	r0, #2
   11a78:	beq	11b38 <__assert_fail@plt+0x1d0>
   11a7c:	bgt	11a90 <__assert_fail@plt+0x128>
   11a80:	cmn	r0, #3
   11a84:	beq	11b40 <__assert_fail@plt+0x1d8>
   11a88:	mov	r0, #1
   11a8c:	b	11b3c <__assert_fail@plt+0x1d4>
   11a90:	cmp	r0, #90	; 0x5a
   11a94:	beq	11aa8 <__assert_fail@plt+0x140>
   11a98:	cmp	r0, #109	; 0x6d
   11a9c:	bne	11a88 <__assert_fail@plt+0x120>
   11aa0:	ldr	sl, [r7]
   11aa4:	b	119d0 <__assert_fail@plt+0x68>
   11aa8:	bl	1153c <is_selinux_enabled@plt>
   11aac:	cmp	r0, #0
   11ab0:	ble	11b0c <__assert_fail@plt+0x1a4>
   11ab4:	ldr	r1, [r7]
   11ab8:	cmp	r1, #0
   11abc:	movne	fp, r1
   11ac0:	bne	119d0 <__assert_fail@plt+0x68>
   11ac4:	mov	r2, r5
   11ac8:	mov	r0, r1
   11acc:	bl	11770 <selabel_open@plt>
   11ad0:	subs	r6, r0, #0
   11ad4:	bne	119d0 <__assert_fail@plt+0x68>
   11ad8:	bl	117a0 <__errno_location@plt>
   11adc:	mov	r2, #5
   11ae0:	ldr	r1, [pc, #1240]	; 11fc0 <__assert_fail@plt+0x658>
   11ae4:	ldr	r3, [r0]
   11ae8:	mov	r0, r5
   11aec:	str	r3, [sp, #12]
   11af0:	bl	115f0 <dcgettext@plt>
   11af4:	ldr	r3, [sp, #12]
   11af8:	mov	r1, r3
   11afc:	mov	r2, r0
   11b00:	mov	r0, r5
   11b04:	bl	116bc <error@plt>
   11b08:	b	119d0 <__assert_fail@plt+0x68>
   11b0c:	ldr	r3, [r7]
   11b10:	cmp	r3, #0
   11b14:	beq	119d0 <__assert_fail@plt+0x68>
   11b18:	mov	r2, #5
   11b1c:	ldr	r1, [pc, #1184]	; 11fc4 <__assert_fail@plt+0x65c>
   11b20:	mov	r0, r5
   11b24:	bl	115f0 <dcgettext@plt>
   11b28:	mov	r1, r5
   11b2c:	mov	r2, r0
   11b30:	mov	r0, #0
   11b34:	b	11b04 <__assert_fail@plt+0x19c>
   11b38:	mov	r0, #0
   11b3c:	bl	12140 <__assert_fail@plt+0x7d8>
   11b40:	ldr	r3, [pc, #1152]	; 11fc8 <__assert_fail@plt+0x660>
   11b44:	ldr	r0, [pc, #1152]	; 11fcc <__assert_fail@plt+0x664>
   11b48:	str	r3, [sp]
   11b4c:	ldr	r3, [pc, #1148]	; 11fd0 <__assert_fail@plt+0x668>
   11b50:	str	r5, [sp, #4]
   11b54:	ldr	r2, [pc, #1144]	; 11fd4 <__assert_fail@plt+0x66c>
   11b58:	ldr	r0, [r0]
   11b5c:	ldr	r3, [r3]
   11b60:	ldr	r1, [pc, #1136]	; 11fd8 <__assert_fail@plt+0x670>
   11b64:	bl	180c8 <lchmod@@Base+0x22a4>
   11b68:	mov	r0, #0
   11b6c:	bl	1174c <exit@plt>
   11b70:	ldr	r7, [pc, #1088]	; 11fb8 <__assert_fail@plt+0x650>
   11b74:	ldr	r5, [pc, #1120]	; 11fdc <__assert_fail@plt+0x674>
   11b78:	ldr	r3, [r5]
   11b7c:	cmp	r8, r3
   11b80:	movle	r9, #2
   11b84:	ble	11bac <__assert_fail@plt+0x244>
   11b88:	add	r2, r3, #1
   11b8c:	cmp	r8, r2
   11b90:	movle	r9, #4
   11b94:	ble	11bac <__assert_fail@plt+0x244>
   11b98:	ldr	r2, [r4, r2, lsl #2]
   11b9c:	ldrb	r9, [r2]
   11ba0:	cmp	r9, #112	; 0x70
   11ba4:	movne	r9, #4
   11ba8:	moveq	r9, #2
   11bac:	sub	r2, r8, r3
   11bb0:	cmp	r9, r2
   11bb4:	bls	11c5c <__assert_fail@plt+0x2f4>
   11bb8:	cmp	r8, r3
   11bbc:	mov	r2, #5
   11bc0:	bgt	11c28 <__assert_fail@plt+0x2c0>
   11bc4:	ldr	r1, [pc, #1044]	; 11fe0 <__assert_fail@plt+0x678>
   11bc8:	mov	r0, #0
   11bcc:	bl	115f0 <dcgettext@plt>
   11bd0:	mov	r1, #0
   11bd4:	mov	r2, r0
   11bd8:	mov	r0, r1
   11bdc:	bl	116bc <error@plt>
   11be0:	cmp	r9, #4
   11be4:	bne	11a88 <__assert_fail@plt+0x120>
   11be8:	ldr	r3, [r5]
   11bec:	sub	r8, r8, r3
   11bf0:	cmp	r8, #2
   11bf4:	bne	11a88 <__assert_fail@plt+0x120>
   11bf8:	ldr	r3, [pc, #996]	; 11fe4 <__assert_fail@plt+0x67c>
   11bfc:	ldr	r1, [pc, #996]	; 11fe8 <__assert_fail@plt+0x680>
   11c00:	mov	r2, #5
   11c04:	ldr	r4, [r3]
   11c08:	mov	r0, #0
   11c0c:	bl	115f0 <dcgettext@plt>
   11c10:	ldr	r2, [pc, #980]	; 11fec <__assert_fail@plt+0x684>
   11c14:	mov	r1, #1
   11c18:	mov	r3, r0
   11c1c:	mov	r0, r4
   11c20:	bl	117f4 <__fprintf_chk@plt>
   11c24:	b	11a88 <__assert_fail@plt+0x120>
   11c28:	ldr	r1, [pc, #960]	; 11ff0 <__assert_fail@plt+0x688>
   11c2c:	mov	r0, #0
   11c30:	bl	115f0 <dcgettext@plt>
   11c34:	sub	r3, r8, #-1073741823	; 0xc0000001
   11c38:	mov	r6, r0
   11c3c:	ldr	r0, [r4, r3, lsl #2]
   11c40:	bl	17a40 <lchmod@@Base+0x1c1c>
   11c44:	mov	r1, #0
   11c48:	mov	r2, r6
   11c4c:	mov	r3, r0
   11c50:	mov	r0, r1
   11c54:	bl	116bc <error@plt>
   11c58:	b	11be0 <__assert_fail@plt+0x278>
   11c5c:	bcs	11cc4 <__assert_fail@plt+0x35c>
   11c60:	mov	r2, #5
   11c64:	ldr	r1, [pc, #904]	; 11ff4 <__assert_fail@plt+0x68c>
   11c68:	mov	r0, #0
   11c6c:	bl	115f0 <dcgettext@plt>
   11c70:	ldr	r3, [r5]
   11c74:	add	r3, r9, r3
   11c78:	mov	r6, r0
   11c7c:	ldr	r0, [r4, r3, lsl #2]
   11c80:	bl	17a40 <lchmod@@Base+0x1c1c>
   11c84:	mov	r1, #0
   11c88:	mov	r2, r6
   11c8c:	mov	r3, r0
   11c90:	mov	r0, r1
   11c94:	bl	116bc <error@plt>
   11c98:	cmp	r9, #2
   11c9c:	bne	11a88 <__assert_fail@plt+0x120>
   11ca0:	ldr	r3, [r5]
   11ca4:	sub	r8, r8, r3
   11ca8:	cmp	r8, #4
   11cac:	bne	11a88 <__assert_fail@plt+0x120>
   11cb0:	ldr	r3, [pc, #812]	; 11fe4 <__assert_fail@plt+0x67c>
   11cb4:	mov	r2, #5
   11cb8:	ldr	r1, [pc, #824]	; 11ff8 <__assert_fail@plt+0x690>
   11cbc:	ldr	r4, [r3]
   11cc0:	b	11c08 <__assert_fail@plt+0x2a0>
   11cc4:	cmp	fp, #0
   11cc8:	beq	11d14 <__assert_fail@plt+0x3ac>
   11ccc:	mov	r0, fp
   11cd0:	bl	11794 <setfscreatecon@plt>
   11cd4:	cmp	r0, #0
   11cd8:	bge	11d14 <__assert_fail@plt+0x3ac>
   11cdc:	bl	117a0 <__errno_location@plt>
   11ce0:	mov	r2, #5
   11ce4:	ldr	r1, [pc, #784]	; 11ffc <__assert_fail@plt+0x694>
   11ce8:	ldr	r4, [r0]
   11cec:	mov	r0, #0
   11cf0:	bl	115f0 <dcgettext@plt>
   11cf4:	mov	r5, r0
   11cf8:	mov	r0, fp
   11cfc:	bl	17a40 <lchmod@@Base+0x1c1c>
   11d00:	mov	r2, r5
   11d04:	mov	r1, r4
   11d08:	mov	r3, r0
   11d0c:	mov	r0, #1
   11d10:	bl	116bc <error@plt>
   11d14:	ldr	r2, [r5]
   11d18:	add	r2, r2, #1
   11d1c:	lsl	r3, r2, #2
   11d20:	ldr	r2, [r4, r2, lsl #2]
   11d24:	ldrb	r2, [r2]
   11d28:	cmp	r2, #99	; 0x63
   11d2c:	beq	11d8c <__assert_fail@plt+0x424>
   11d30:	bhi	11d7c <__assert_fail@plt+0x414>
   11d34:	cmp	r2, #98	; 0x62
   11d38:	moveq	r9, #24576	; 0x6000
   11d3c:	beq	11d90 <__assert_fail@plt+0x428>
   11d40:	mov	r2, #5
   11d44:	ldr	r1, [pc, #692]	; 12000 <__assert_fail@plt+0x698>
   11d48:	mov	r0, #0
   11d4c:	bl	115f0 <dcgettext@plt>
   11d50:	ldr	r3, [r5]
   11d54:	add	r3, r3, #1
   11d58:	mov	r6, r0
   11d5c:	ldr	r0, [r4, r3, lsl #2]
   11d60:	bl	17a40 <lchmod@@Base+0x1c1c>
   11d64:	mov	r1, #0
   11d68:	mov	r2, r6
   11d6c:	mov	r3, r0
   11d70:	mov	r0, r1
   11d74:	bl	116bc <error@plt>
   11d78:	b	11a88 <__assert_fail@plt+0x120>
   11d7c:	cmp	r2, #112	; 0x70
   11d80:	beq	11f04 <__assert_fail@plt+0x59c>
   11d84:	cmp	r2, #117	; 0x75
   11d88:	bne	11d40 <__assert_fail@plt+0x3d8>
   11d8c:	mov	r9, #8192	; 0x2000
   11d90:	add	r3, r4, r3
   11d94:	mov	r2, #0
   11d98:	ldmib	r3, {r8, fp}
   11d9c:	ldr	r3, [pc, #500]	; 11f98 <__assert_fail@plt+0x630>
   11da0:	mov	r1, r2
   11da4:	str	r3, [sp]
   11da8:	mov	r0, r8
   11dac:	add	r3, sp, #24
   11db0:	bl	187b4 <lchmod@@Base+0x2990>
   11db4:	subs	ip, r0, #0
   11db8:	bne	11dd0 <__assert_fail@plt+0x468>
   11dbc:	ldrd	r0, [sp, #24]
   11dc0:	mov	r3, #0
   11dc4:	cmp	r3, r1
   11dc8:	cmpeq	r0, r0
   11dcc:	beq	11dfc <__assert_fail@plt+0x494>
   11dd0:	mov	r2, #5
   11dd4:	ldr	r1, [pc, #552]	; 12004 <__assert_fail@plt+0x69c>
   11dd8:	mov	r0, #0
   11ddc:	bl	115f0 <dcgettext@plt>
   11de0:	mov	r4, r0
   11de4:	mov	r0, r8
   11de8:	bl	17a40 <lchmod@@Base+0x1c1c>
   11dec:	mov	r2, r4
   11df0:	mov	r1, #0
   11df4:	mov	r3, r0
   11df8:	b	11d0c <__assert_fail@plt+0x3a4>
   11dfc:	ldr	r3, [pc, #404]	; 11f98 <__assert_fail@plt+0x630>
   11e00:	mov	r2, ip
   11e04:	str	r3, [sp]
   11e08:	mov	r1, ip
   11e0c:	add	r3, sp, #32
   11e10:	mov	r0, fp
   11e14:	bl	187b4 <lchmod@@Base+0x2990>
   11e18:	subs	r3, r0, #0
   11e1c:	str	r3, [sp, #12]
   11e20:	bne	11e38 <__assert_fail@plt+0x4d0>
   11e24:	ldrd	r0, [sp, #32]
   11e28:	mov	r3, #0
   11e2c:	cmp	r3, r1
   11e30:	cmpeq	r0, r0
   11e34:	beq	11e54 <__assert_fail@plt+0x4ec>
   11e38:	mov	r2, #5
   11e3c:	ldr	r1, [pc, #452]	; 12008 <__assert_fail@plt+0x6a0>
   11e40:	mov	r0, #0
   11e44:	bl	115f0 <dcgettext@plt>
   11e48:	mov	r4, r0
   11e4c:	mov	r0, fp
   11e50:	b	11de8 <__assert_fail@plt+0x480>
   11e54:	mov	r1, r0
   11e58:	ldr	r0, [sp, #24]
   11e5c:	bl	11554 <gnu_dev_makedev@plt>
   11e60:	mvn	r3, #0
   11e64:	mvn	r2, #0
   11e68:	cmp	r1, r3
   11e6c:	cmpeq	r0, r2
   11e70:	strd	r0, [sp, #16]
   11e74:	bne	11ea0 <__assert_fail@plt+0x538>
   11e78:	mov	r2, #5
   11e7c:	ldr	r1, [pc, #392]	; 1200c <__assert_fail@plt+0x6a4>
   11e80:	ldr	r0, [sp, #12]
   11e84:	bl	115f0 <dcgettext@plt>
   11e88:	str	fp, [sp]
   11e8c:	mov	r3, r8
   11e90:	ldr	r1, [sp, #12]
   11e94:	mov	r2, r0
   11e98:	mov	r0, #1
   11e9c:	bl	116bc <error@plt>
   11ea0:	cmp	r6, #0
   11ea4:	beq	11ebc <__assert_fail@plt+0x554>
   11ea8:	ldr	r3, [r5]
   11eac:	mov	r2, r9
   11eb0:	mov	r0, r6
   11eb4:	ldr	r1, [r4, r3, lsl #2]
   11eb8:	bl	12648 <__assert_fail@plt+0xce0>
   11ebc:	ldr	r0, [r5]
   11ec0:	ldrd	r2, [sp, #16]
   11ec4:	orr	r1, r7, r9
   11ec8:	ldr	r0, [r4, r0, lsl #2]
   11ecc:	bl	19990 <lchmod@@Base+0x3b6c>
   11ed0:	cmp	r0, #0
   11ed4:	beq	11f34 <__assert_fail@plt+0x5cc>
   11ed8:	bl	117a0 <__errno_location@plt>
   11edc:	ldr	r3, [r5]
   11ee0:	mov	r1, #3
   11ee4:	ldr	r2, [r4, r3, lsl #2]
   11ee8:	ldr	r6, [r0]
   11eec:	mov	r0, #0
   11ef0:	bl	17900 <lchmod@@Base+0x1adc>
   11ef4:	ldr	r2, [pc, #276]	; 12010 <__assert_fail@plt+0x6a8>
   11ef8:	mov	r3, r0
   11efc:	mov	r1, r6
   11f00:	b	11d0c <__assert_fail@plt+0x3a4>
   11f04:	cmp	r6, #0
   11f08:	beq	11f20 <__assert_fail@plt+0x5b8>
   11f0c:	add	r3, r4, r3
   11f10:	mov	r2, #4096	; 0x1000
   11f14:	ldr	r1, [r3, #-4]
   11f18:	mov	r0, r6
   11f1c:	bl	12648 <__assert_fail@plt+0xce0>
   11f20:	ldr	r3, [r5]
   11f24:	mov	r1, r7
   11f28:	ldr	r0, [r4, r3, lsl #2]
   11f2c:	bl	11938 <mkfifo@plt>
   11f30:	b	11ed0 <__assert_fail@plt+0x568>
   11f34:	cmp	sl, #0
   11f38:	beq	11f8c <__assert_fail@plt+0x624>
   11f3c:	ldr	r3, [r5]
   11f40:	mov	r1, r7
   11f44:	ldr	r0, [r4, r3, lsl #2]
   11f48:	bl	15e24 <lchmod@@Base>
   11f4c:	cmp	r0, #0
   11f50:	beq	11f8c <__assert_fail@plt+0x624>
   11f54:	bl	117a0 <__errno_location@plt>
   11f58:	mov	r2, #5
   11f5c:	ldr	r1, [pc, #176]	; 12014 <__assert_fail@plt+0x6ac>
   11f60:	ldr	r6, [r0]
   11f64:	mov	r0, #0
   11f68:	bl	115f0 <dcgettext@plt>
   11f6c:	ldr	r3, [r5]
   11f70:	ldr	r1, [r4, r3, lsl #2]
   11f74:	mov	r7, r0
   11f78:	mov	r0, #4
   11f7c:	bl	1785c <lchmod@@Base+0x1a38>
   11f80:	mov	r2, r7
   11f84:	mov	r3, r0
   11f88:	b	11efc <__assert_fail@plt+0x594>
   11f8c:	mov	r0, #0
   11f90:	add	sp, sp, #44	; 0x2c
   11f94:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11f98:	andeq	r9, r1, r7, asr #31
   11f9c:	andeq	r9, r1, r8, asr #31
   11fa0:	andeq	r9, r1, r5, lsr #30
   11fa4:	andeq	r2, r1, r8, asr #30
   11fa8:	strdeq	r9, [r1], -ip
   11fac:	strdeq	fp, [r2], -r8
   11fb0:	andeq	sl, r1, r5, asr r0
   11fb4:	andeq	sl, r1, r9, asr r0
   11fb8:			; <UNDEFINED> instruction: 0x000001b6
   11fbc:	andeq	sl, r1, r6, rrx
   11fc0:	andeq	r9, r1, r0, ror #31
   11fc4:	strdeq	r9, [r1], -ip
   11fc8:	andeq	sl, r1, r5, asr #32
   11fcc:	strdeq	fp, [r2], -r4
   11fd0:	muleq	r2, r4, r1
   11fd4:	andeq	r9, r1, r1, lsr #30
   11fd8:	andeq	r9, r1, ip, asr #20
   11fdc:	andeq	fp, r2, r8, ror #3
   11fe0:	muleq	r1, r2, r0
   11fe4:	strdeq	fp, [r2], -r0
   11fe8:	strheq	sl, [r1], -fp
   11fec:	andeq	sl, r1, r7, lsr r4
   11ff0:	andeq	sl, r1, r2, lsr #1
   11ff4:	strdeq	sl, [r1], -r1
   11ff8:	andeq	sl, r1, r2, lsl #2
   11ffc:	andeq	sl, r1, r4, lsr r1
   12000:			; <UNDEFINED> instruction: 0x0001a1b9
   12004:	andeq	sl, r1, r6, ror #2
   12008:	andeq	sl, r1, r5, lsl #3
   1200c:	andeq	sl, r1, r4, lsr #3
   12010:	andeq	sl, r1, sl, ror r2
   12014:	ldrdeq	sl, [r1], -r0
   12018:	mov	fp, #0
   1201c:	mov	lr, #0
   12020:	pop	{r1}		; (ldr r1, [sp], #4)
   12024:	mov	r2, sp
   12028:	push	{r2}		; (str r2, [sp, #-4]!)
   1202c:	push	{r0}		; (str r0, [sp, #-4]!)
   12030:	ldr	ip, [pc, #16]	; 12048 <__assert_fail@plt+0x6e0>
   12034:	push	{ip}		; (str ip, [sp, #-4]!)
   12038:	ldr	r0, [pc, #12]	; 1204c <__assert_fail@plt+0x6e4>
   1203c:	ldr	r3, [pc, #12]	; 12050 <__assert_fail@plt+0x6e8>
   12040:	bl	116ec <__libc_start_main@plt>
   12044:	bl	11914 <abort@plt>
   12048:	andeq	r9, r1, ip, lsl r9
   1204c:	andeq	r1, r1, r8, ror r9
   12050:			; <UNDEFINED> instruction: 0x000198bc
   12054:	ldr	r3, [pc, #20]	; 12070 <__assert_fail@plt+0x708>
   12058:	ldr	r2, [pc, #20]	; 12074 <__assert_fail@plt+0x70c>
   1205c:	add	r3, pc, r3
   12060:	ldr	r2, [r3, r2]
   12064:	cmp	r2, #0
   12068:	bxeq	lr
   1206c:	b	11704 <__gmon_start__@plt>
   12070:	muleq	r1, ip, pc	; <UNPREDICTABLE>
   12074:	andeq	r0, r0, r8, lsl #3
   12078:	ldr	r3, [pc, #28]	; 1209c <__assert_fail@plt+0x734>
   1207c:	ldr	r0, [pc, #28]	; 120a0 <__assert_fail@plt+0x738>
   12080:	sub	r3, r3, r0
   12084:	cmp	r3, #6
   12088:	bxls	lr
   1208c:	ldr	r3, [pc, #16]	; 120a4 <__assert_fail@plt+0x73c>
   12090:	cmp	r3, #0
   12094:	bxeq	lr
   12098:	bx	r3
   1209c:	ldrdeq	fp, [r2], -pc	; <UNPREDICTABLE>
   120a0:	ldrdeq	fp, [r2], -ip
   120a4:	andeq	r0, r0, r0
   120a8:	ldr	r1, [pc, #36]	; 120d4 <__assert_fail@plt+0x76c>
   120ac:	ldr	r0, [pc, #36]	; 120d8 <__assert_fail@plt+0x770>
   120b0:	sub	r1, r1, r0
   120b4:	asr	r1, r1, #2
   120b8:	add	r1, r1, r1, lsr #31
   120bc:	asrs	r1, r1, #1
   120c0:	bxeq	lr
   120c4:	ldr	r3, [pc, #16]	; 120dc <__assert_fail@plt+0x774>
   120c8:	cmp	r3, #0
   120cc:	bxeq	lr
   120d0:	bx	r3
   120d4:	ldrdeq	fp, [r2], -ip
   120d8:	ldrdeq	fp, [r2], -ip
   120dc:	andeq	r0, r0, r0
   120e0:	push	{r4, lr}
   120e4:	ldr	r4, [pc, #24]	; 12104 <__assert_fail@plt+0x79c>
   120e8:	ldrb	r3, [r4]
   120ec:	cmp	r3, #0
   120f0:	popne	{r4, pc}
   120f4:	bl	12078 <__assert_fail@plt+0x710>
   120f8:	mov	r3, #1
   120fc:	strb	r3, [r4]
   12100:	pop	{r4, pc}
   12104:	strdeq	fp, [r2], -ip
   12108:	ldr	r0, [pc, #40]	; 12138 <__assert_fail@plt+0x7d0>
   1210c:	ldr	r3, [r0]
   12110:	cmp	r3, #0
   12114:	bne	1211c <__assert_fail@plt+0x7b4>
   12118:	b	120a8 <__assert_fail@plt+0x740>
   1211c:	ldr	r3, [pc, #24]	; 1213c <__assert_fail@plt+0x7d4>
   12120:	cmp	r3, #0
   12124:	beq	12118 <__assert_fail@plt+0x7b0>
   12128:	push	{r4, lr}
   1212c:	blx	r3
   12130:	pop	{r4, lr}
   12134:	b	120a8 <__assert_fail@plt+0x740>
   12138:	andeq	sl, r2, ip, lsl #30
   1213c:	andeq	r0, r0, r0
   12140:	subs	r4, r0, #0
   12144:	push	{r7, lr}
   12148:	sub	sp, sp, #56	; 0x38
   1214c:	ldr	r5, [pc, #604]	; 123b0 <__assert_fail@plt+0xa48>
   12150:	beq	12188 <__assert_fail@plt+0x820>
   12154:	ldr	r3, [pc, #600]	; 123b4 <__assert_fail@plt+0xa4c>
   12158:	mov	r2, #5
   1215c:	ldr	r1, [pc, #596]	; 123b8 <__assert_fail@plt+0xa50>
   12160:	mov	r0, #0
   12164:	ldr	r6, [r3]
   12168:	bl	115f0 <dcgettext@plt>
   1216c:	ldr	r3, [r5]
   12170:	mov	r1, #1
   12174:	mov	r2, r0
   12178:	mov	r0, r6
   1217c:	bl	117f4 <__fprintf_chk@plt>
   12180:	mov	r0, r4
   12184:	bl	1174c <exit@plt>
   12188:	mov	r2, #5
   1218c:	ldr	r1, [pc, #552]	; 123bc <__assert_fail@plt+0xa54>
   12190:	bl	115f0 <dcgettext@plt>
   12194:	ldr	r2, [r5]
   12198:	ldr	r5, [pc, #544]	; 123c0 <__assert_fail@plt+0xa58>
   1219c:	ldr	r8, [pc, #544]	; 123c4 <__assert_fail@plt+0xa5c>
   121a0:	mov	r6, r4
   121a4:	mov	r1, r0
   121a8:	mov	r0, #1
   121ac:	bl	117d0 <__printf_chk@plt>
   121b0:	mov	r2, #5
   121b4:	ldr	r1, [pc, #524]	; 123c8 <__assert_fail@plt+0xa60>
   121b8:	mov	r0, r4
   121bc:	bl	115f0 <dcgettext@plt>
   121c0:	ldr	r1, [r5]
   121c4:	bl	11524 <fputs_unlocked@plt>
   121c8:	mov	r2, #5
   121cc:	ldr	r1, [pc, #504]	; 123cc <__assert_fail@plt+0xa64>
   121d0:	mov	r0, r4
   121d4:	bl	115f0 <dcgettext@plt>
   121d8:	ldr	r1, [r5]
   121dc:	bl	11524 <fputs_unlocked@plt>
   121e0:	mov	r2, #5
   121e4:	ldr	r1, [pc, #484]	; 123d0 <__assert_fail@plt+0xa68>
   121e8:	mov	r0, r4
   121ec:	bl	115f0 <dcgettext@plt>
   121f0:	ldr	r1, [r5]
   121f4:	bl	11524 <fputs_unlocked@plt>
   121f8:	mov	r2, #5
   121fc:	ldr	r1, [pc, #464]	; 123d4 <__assert_fail@plt+0xa6c>
   12200:	mov	r0, r4
   12204:	bl	115f0 <dcgettext@plt>
   12208:	ldr	r1, [r5]
   1220c:	bl	11524 <fputs_unlocked@plt>
   12210:	mov	r2, #5
   12214:	ldr	r1, [pc, #444]	; 123d8 <__assert_fail@plt+0xa70>
   12218:	mov	r0, r4
   1221c:	bl	115f0 <dcgettext@plt>
   12220:	ldr	r1, [r5]
   12224:	bl	11524 <fputs_unlocked@plt>
   12228:	mov	r2, #5
   1222c:	ldr	r1, [pc, #424]	; 123dc <__assert_fail@plt+0xa74>
   12230:	mov	r0, r4
   12234:	bl	115f0 <dcgettext@plt>
   12238:	ldr	r1, [r5]
   1223c:	bl	11524 <fputs_unlocked@plt>
   12240:	mov	r2, #5
   12244:	ldr	r1, [pc, #404]	; 123e0 <__assert_fail@plt+0xa78>
   12248:	mov	r0, r4
   1224c:	bl	115f0 <dcgettext@plt>
   12250:	ldr	r1, [r5]
   12254:	bl	11524 <fputs_unlocked@plt>
   12258:	mov	r2, #5
   1225c:	ldr	r1, [pc, #384]	; 123e4 <__assert_fail@plt+0xa7c>
   12260:	mov	r0, r4
   12264:	bl	115f0 <dcgettext@plt>
   12268:	ldr	r1, [r5]
   1226c:	bl	11524 <fputs_unlocked@plt>
   12270:	mov	r2, #5
   12274:	ldr	r1, [pc, #364]	; 123e8 <__assert_fail@plt+0xa80>
   12278:	mov	r0, r4
   1227c:	bl	115f0 <dcgettext@plt>
   12280:	ldr	r2, [pc, #316]	; 123c4 <__assert_fail@plt+0xa5c>
   12284:	mov	r1, r0
   12288:	mov	r0, #1
   1228c:	bl	117d0 <__printf_chk@plt>
   12290:	ldr	lr, [pc, #340]	; 123ec <__assert_fail@plt+0xa84>
   12294:	mov	ip, sp
   12298:	ldm	lr!, {r0, r1, r2, r3}
   1229c:	stmia	ip!, {r0, r1, r2, r3}
   122a0:	ldm	lr!, {r0, r1, r2, r3}
   122a4:	stmia	ip!, {r0, r1, r2, r3}
   122a8:	ldm	lr!, {r0, r1, r2, r3}
   122ac:	stmia	ip!, {r0, r1, r2, r3}
   122b0:	ldm	lr, {r0, r1}
   122b4:	stm	ip, {r0, r1}
   122b8:	ldr	r1, [sp, r6]
   122bc:	add	r7, sp, r6
   122c0:	cmp	r1, #0
   122c4:	bne	12368 <__assert_fail@plt+0xa00>
   122c8:	ldr	r6, [r7, #4]
   122cc:	ldr	r7, [pc, #240]	; 123c4 <__assert_fail@plt+0xa5c>
   122d0:	cmp	r6, #0
   122d4:	mov	r2, #5
   122d8:	ldr	r1, [pc, #272]	; 123f0 <__assert_fail@plt+0xa88>
   122dc:	mov	r0, #0
   122e0:	moveq	r6, r7
   122e4:	bl	115f0 <dcgettext@plt>
   122e8:	ldr	r3, [pc, #260]	; 123f4 <__assert_fail@plt+0xa8c>
   122ec:	ldr	r2, [pc, #260]	; 123f8 <__assert_fail@plt+0xa90>
   122f0:	mov	r1, r0
   122f4:	mov	r0, #1
   122f8:	bl	117d0 <__printf_chk@plt>
   122fc:	mov	r1, #0
   12300:	mov	r0, #5
   12304:	bl	11824 <setlocale@plt>
   12308:	cmp	r0, #0
   1230c:	bne	12380 <__assert_fail@plt+0xa18>
   12310:	mov	r2, #5
   12314:	ldr	r1, [pc, #224]	; 123fc <__assert_fail@plt+0xa94>
   12318:	mov	r0, #0
   1231c:	bl	115f0 <dcgettext@plt>
   12320:	ldr	r3, [pc, #156]	; 123c4 <__assert_fail@plt+0xa5c>
   12324:	ldr	r2, [pc, #200]	; 123f4 <__assert_fail@plt+0xa8c>
   12328:	mov	r1, r0
   1232c:	mov	r0, #1
   12330:	bl	117d0 <__printf_chk@plt>
   12334:	mov	r2, #5
   12338:	ldr	r1, [pc, #192]	; 12400 <__assert_fail@plt+0xa98>
   1233c:	mov	r0, #0
   12340:	bl	115f0 <dcgettext@plt>
   12344:	ldr	r2, [pc, #184]	; 12404 <__assert_fail@plt+0xa9c>
   12348:	cmp	r6, r7
   1234c:	ldr	r3, [pc, #180]	; 12408 <__assert_fail@plt+0xaa0>
   12350:	moveq	r3, r2
   12354:	mov	r2, r6
   12358:	mov	r1, r0
   1235c:	mov	r0, #1
   12360:	bl	117d0 <__printf_chk@plt>
   12364:	b	12180 <__assert_fail@plt+0x818>
   12368:	mov	r0, r8
   1236c:	bl	11548 <strcmp@plt>
   12370:	add	r6, r6, #8
   12374:	cmp	r0, #0
   12378:	bne	122b8 <__assert_fail@plt+0x950>
   1237c:	b	122c8 <__assert_fail@plt+0x960>
   12380:	mov	r2, #3
   12384:	ldr	r1, [pc, #128]	; 1240c <__assert_fail@plt+0xaa4>
   12388:	bl	11908 <strncmp@plt>
   1238c:	cmp	r0, #0
   12390:	beq	12310 <__assert_fail@plt+0x9a8>
   12394:	mov	r2, #5
   12398:	ldr	r1, [pc, #112]	; 12410 <__assert_fail@plt+0xaa8>
   1239c:	mov	r0, #0
   123a0:	bl	115f0 <dcgettext@plt>
   123a4:	ldr	r1, [r5]
   123a8:	bl	11524 <fputs_unlocked@plt>
   123ac:	b	12310 <__assert_fail@plt+0x9a8>
   123b0:	andeq	fp, r2, r8, lsl #4
   123b4:	strdeq	fp, [r2], -r0
   123b8:	andeq	r9, r1, r2, asr sl
   123bc:	andeq	r9, r1, r9, ror sl
   123c0:	strdeq	fp, [r2], -r4
   123c4:	andeq	r9, r1, ip, asr #20
   123c8:	andeq	r9, r1, r8, lsr #21
   123cc:	ldrdeq	r9, [r1], -r9	; <UNPREDICTABLE>
   123d0:	andeq	r9, r1, r4, lsr #22
   123d4:	andeq	r9, r1, sp, ror #22
   123d8:	andeq	r9, r1, ip, lsr ip
   123dc:	andeq	r9, r1, r9, ror #24
   123e0:	muleq	r1, pc, ip	; <UNPREDICTABLE>
   123e4:	andeq	r9, r1, r4, lsr #27
   123e8:	andeq	r9, r1, r3, lsr #28
   123ec:	andeq	r9, r1, r4, asr #19
   123f0:	andeq	r9, r1, r2, ror #29
   123f4:	strdeq	r9, [r1], -r9	; <UNPREDICTABLE>
   123f8:	andeq	r9, r1, r1, lsr #30
   123fc:	andeq	r9, r1, sl, ror pc
   12400:	muleq	r1, r5, pc	; <UNPREDICTABLE>
   12404:	andeq	sl, r1, r9, lsl #4
   12408:	andeq	r9, r1, r7, asr #31
   1240c:	andeq	r9, r1, pc, lsr #30
   12410:	andeq	r9, r1, r3, lsr pc
   12414:	push	{r4, r5, r6, r7, r8, r9, lr}
   12418:	sub	sp, sp, #116	; 0x74
   1241c:	mov	r4, #0
   12420:	subs	r6, r0, #0
   12424:	mov	r5, r1
   12428:	str	r4, [sp]
   1242c:	str	r4, [sp, #4]
   12430:	bne	12494 <__assert_fail@plt+0xb2c>
   12434:	add	r0, sp, #4
   12438:	bl	118b4 <getfscreatecon@plt>
   1243c:	cmp	r0, r4
   12440:	blt	1245c <__assert_fail@plt+0xaf4>
   12444:	ldr	r1, [sp, #4]
   12448:	cmp	r1, r4
   1244c:	bne	12464 <__assert_fail@plt+0xafc>
   12450:	bl	117a0 <__errno_location@plt>
   12454:	mov	r3, #61	; 0x3d
   12458:	str	r3, [r0]
   1245c:	mvn	r5, #0
   12460:	b	12488 <__assert_fail@plt+0xb20>
   12464:	mov	r0, r5
   12468:	bl	11578 <lsetfilecon@plt>
   1246c:	mov	r5, r0
   12470:	bl	117a0 <__errno_location@plt>
   12474:	ldr	r6, [r0]
   12478:	mov	r4, r0
   1247c:	ldr	r0, [sp, #4]
   12480:	bl	1189c <freecon@plt>
   12484:	str	r6, [r4]
   12488:	mov	r0, r5
   1248c:	add	sp, sp, #116	; 0x74
   12490:	pop	{r4, r5, r6, r7, r8, r9, pc}
   12494:	mov	r1, #32768	; 0x8000
   12498:	mov	r0, r5
   1249c:	bl	116c8 <open64@plt>
   124a0:	cmn	r0, #1
   124a4:	mov	r7, r0
   124a8:	bne	124ec <__assert_fail@plt+0xb84>
   124ac:	bl	117a0 <__errno_location@plt>
   124b0:	ldr	r3, [r0]
   124b4:	cmp	r3, #40	; 0x28
   124b8:	bne	124d0 <__assert_fail@plt+0xb68>
   124bc:	add	r1, sp, #8
   124c0:	mov	r0, r5
   124c4:	bl	19958 <lchmod@@Base+0x3b34>
   124c8:	cmp	r0, #0
   124cc:	bge	124fc <__assert_fail@plt+0xb94>
   124d0:	bl	117a0 <__errno_location@plt>
   124d4:	mov	r4, #0
   124d8:	mov	r5, r7
   124dc:	mov	r8, r4
   124e0:	mov	r6, r0
   124e4:	ldr	r9, [r0]
   124e8:	b	125d8 <__assert_fail@plt+0xc70>
   124ec:	add	r1, sp, #8
   124f0:	bl	19948 <lchmod@@Base+0x3b24>
   124f4:	cmp	r0, #0
   124f8:	blt	12630 <__assert_fail@plt+0xcc8>
   124fc:	ldr	r3, [sp, #24]
   12500:	mov	r2, r5
   12504:	mov	r1, sp
   12508:	mov	r0, r6
   1250c:	bl	1150c <selabel_lookup@plt>
   12510:	cmp	r0, #0
   12514:	bge	1253c <__assert_fail@plt+0xbd4>
   12518:	bl	117a0 <__errno_location@plt>
   1251c:	ldr	r3, [r0]
   12520:	cmp	r3, #2
   12524:	moveq	r3, #61	; 0x3d
   12528:	streq	r3, [r0]
   1252c:	mov	r4, #0
   12530:	mov	r8, r4
   12534:	mvn	r5, #0
   12538:	b	125bc <__assert_fail@plt+0xc54>
   1253c:	ldr	r0, [sp]
   12540:	bl	115cc <context_new@plt>
   12544:	subs	r8, r0, #0
   12548:	beq	1252c <__assert_fail@plt+0xbc4>
   1254c:	cmn	r7, #1
   12550:	add	r1, sp, #4
   12554:	beq	12600 <__assert_fail@plt+0xc98>
   12558:	mov	r0, r7
   1255c:	bl	17c30 <lchmod@@Base+0x1e0c>
   12560:	cmp	r0, #0
   12564:	blt	12628 <__assert_fail@plt+0xcc0>
   12568:	ldr	r0, [sp, #4]
   1256c:	bl	115cc <context_new@plt>
   12570:	subs	r4, r0, #0
   12574:	beq	12534 <__assert_fail@plt+0xbcc>
   12578:	mov	r0, r8
   1257c:	bl	11560 <context_type_get@plt>
   12580:	subs	r1, r0, #0
   12584:	beq	12534 <__assert_fail@plt+0xbcc>
   12588:	mov	r0, r4
   1258c:	bl	115fc <context_type_set@plt>
   12590:	cmp	r0, #0
   12594:	bne	12534 <__assert_fail@plt+0xbcc>
   12598:	mov	r0, r4
   1259c:	bl	118cc <context_str@plt>
   125a0:	subs	r1, r0, #0
   125a4:	beq	12534 <__assert_fail@plt+0xbcc>
   125a8:	cmn	r7, #1
   125ac:	beq	1261c <__assert_fail@plt+0xcb4>
   125b0:	mov	r0, r7
   125b4:	bl	11830 <fsetfilecon@plt>
   125b8:	mov	r5, r0
   125bc:	bl	117a0 <__errno_location@plt>
   125c0:	cmn	r7, #1
   125c4:	mov	r6, r0
   125c8:	ldr	r9, [r0]
   125cc:	beq	125d8 <__assert_fail@plt+0xc70>
   125d0:	mov	r0, r7
   125d4:	bl	11920 <close@plt>
   125d8:	mov	r0, r8
   125dc:	bl	11710 <context_free@plt>
   125e0:	mov	r0, r4
   125e4:	bl	11710 <context_free@plt>
   125e8:	ldr	r0, [sp]
   125ec:	bl	1189c <freecon@plt>
   125f0:	ldr	r0, [sp, #4]
   125f4:	bl	1189c <freecon@plt>
   125f8:	str	r9, [r6]
   125fc:	b	12488 <__assert_fail@plt+0xb20>
   12600:	mov	r0, r5
   12604:	bl	17c18 <lchmod@@Base+0x1df4>
   12608:	cmp	r0, #0
   1260c:	bge	12568 <__assert_fail@plt+0xc00>
   12610:	mov	r5, r7
   12614:	mov	r4, #0
   12618:	b	125bc <__assert_fail@plt+0xc54>
   1261c:	mov	r0, r5
   12620:	bl	11578 <lsetfilecon@plt>
   12624:	b	125b8 <__assert_fail@plt+0xc50>
   12628:	mov	r4, #0
   1262c:	b	12534 <__assert_fail@plt+0xbcc>
   12630:	bl	117a0 <__errno_location@plt>
   12634:	mov	r8, r4
   12638:	mvn	r5, #0
   1263c:	mov	r6, r0
   12640:	ldr	r9, [r0]
   12644:	b	125d0 <__assert_fail@plt+0xc68>
   12648:	push	{r4, r5, r6, r7, r8, r9, lr}
   1264c:	sub	sp, sp, #20
   12650:	ldrb	r3, [r1]
   12654:	mov	r6, #0
   12658:	mov	r7, r0
   1265c:	cmp	r3, #47	; 0x2f
   12660:	mov	r4, r1
   12664:	mov	r5, r2
   12668:	str	r6, [sp]
   1266c:	str	r6, [sp, #4]
   12670:	beq	1268c <__assert_fail@plt+0xd24>
   12674:	mov	r0, r4
   12678:	mov	r1, #2
   1267c:	bl	12928 <__assert_fail@plt+0xfc0>
   12680:	subs	r6, r0, #0
   12684:	mov	r4, r6
   12688:	beq	127fc <__assert_fail@plt+0xe94>
   1268c:	mov	r3, r5
   12690:	mov	r2, r4
   12694:	mov	r1, sp
   12698:	mov	r0, r7
   1269c:	bl	1150c <selabel_lookup@plt>
   126a0:	cmp	r0, #0
   126a4:	bge	126c8 <__assert_fail@plt+0xd60>
   126a8:	bl	117a0 <__errno_location@plt>
   126ac:	ldr	r3, [r0]
   126b0:	cmp	r3, #2
   126b4:	moveq	r3, #61	; 0x3d
   126b8:	streq	r3, [r0]
   126bc:	mov	r4, #0
   126c0:	mov	r7, r4
   126c4:	b	12800 <__assert_fail@plt+0xe98>
   126c8:	mov	r3, #0
   126cc:	mov	r0, r4
   126d0:	str	r3, [sp, #8]
   126d4:	str	r3, [sp, #12]
   126d8:	bl	1302c <__assert_fail@plt+0x16c4>
   126dc:	mov	r7, r0
   126e0:	add	r0, sp, #8
   126e4:	bl	1168c <getcon@plt>
   126e8:	cmp	r0, #0
   126ec:	bge	127c0 <__assert_fail@plt+0xe58>
   126f0:	mvn	r4, #0
   126f4:	bl	117a0 <__errno_location@plt>
   126f8:	ldr	r8, [r0]
   126fc:	mov	r5, r0
   12700:	mov	r0, r7
   12704:	bl	13188 <__assert_fail@plt+0x1820>
   12708:	ldr	r0, [sp, #8]
   1270c:	bl	1189c <freecon@plt>
   12710:	ldr	r0, [sp, #12]
   12714:	bl	1189c <freecon@plt>
   12718:	cmp	r4, #0
   1271c:	str	r8, [r5]
   12720:	blt	126bc <__assert_fail@plt+0xd54>
   12724:	ldr	r0, [sp]
   12728:	bl	115cc <context_new@plt>
   1272c:	subs	r7, r0, #0
   12730:	beq	12808 <__assert_fail@plt+0xea0>
   12734:	ldr	r0, [sp, #4]
   12738:	bl	115cc <context_new@plt>
   1273c:	subs	r4, r0, #0
   12740:	beq	12800 <__assert_fail@plt+0xe98>
   12744:	mov	r0, r7
   12748:	bl	11560 <context_type_get@plt>
   1274c:	subs	r1, r0, #0
   12750:	beq	12800 <__assert_fail@plt+0xe98>
   12754:	mov	r0, r4
   12758:	bl	115fc <context_type_set@plt>
   1275c:	cmp	r0, #0
   12760:	bne	12800 <__assert_fail@plt+0xe98>
   12764:	mov	r0, r4
   12768:	bl	118cc <context_str@plt>
   1276c:	cmp	r0, #0
   12770:	beq	12800 <__assert_fail@plt+0xe98>
   12774:	bl	11794 <setfscreatecon@plt>
   12778:	mov	r5, r0
   1277c:	bl	117a0 <__errno_location@plt>
   12780:	ldr	r9, [r0]
   12784:	mov	r8, r0
   12788:	mov	r0, r7
   1278c:	bl	11710 <context_free@plt>
   12790:	mov	r0, r4
   12794:	bl	11710 <context_free@plt>
   12798:	ldr	r0, [sp]
   1279c:	bl	1189c <freecon@plt>
   127a0:	ldr	r0, [sp, #4]
   127a4:	bl	1189c <freecon@plt>
   127a8:	mov	r0, r6
   127ac:	bl	13188 <__assert_fail@plt+0x1820>
   127b0:	mov	r0, r5
   127b4:	str	r9, [r8]
   127b8:	add	sp, sp, #20
   127bc:	pop	{r4, r5, r6, r7, r8, r9, pc}
   127c0:	add	r1, sp, #12
   127c4:	mov	r0, r7
   127c8:	bl	17c00 <lchmod@@Base+0x1ddc>
   127cc:	cmp	r0, #0
   127d0:	blt	126f0 <__assert_fail@plt+0xd88>
   127d4:	mov	r0, r5
   127d8:	bl	11944 <mode_to_security_class@plt>
   127dc:	subs	r2, r0, #0
   127e0:	beq	126f0 <__assert_fail@plt+0xd88>
   127e4:	add	r3, sp, #4
   127e8:	ldr	r1, [sp, #12]
   127ec:	ldr	r0, [sp, #8]
   127f0:	bl	1186c <security_compute_create@plt>
   127f4:	mov	r4, r0
   127f8:	b	126f4 <__assert_fail@plt+0xd8c>
   127fc:	mov	r7, r6
   12800:	mvn	r5, #0
   12804:	b	1277c <__assert_fail@plt+0xe14>
   12808:	mov	r4, r7
   1280c:	b	12800 <__assert_fail@plt+0xe98>
   12810:	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   12814:	mov	r7, r0
   12818:	ldrb	r3, [r1]
   1281c:	mov	r0, r1
   12820:	mov	r4, r2
   12824:	cmp	r3, #47	; 0x2f
   12828:	beq	12848 <__assert_fail@plt+0xee0>
   1282c:	mov	r1, #2
   12830:	bl	12928 <__assert_fail@plt+0xfc0>
   12834:	subs	r5, r0, #0
   12838:	movne	r0, r5
   1283c:	bne	1284c <__assert_fail@plt+0xee4>
   12840:	mov	r4, r5
   12844:	b	12880 <__assert_fail@plt+0xf18>
   12848:	mov	r5, #0
   1284c:	cmp	r4, #0
   12850:	bne	1288c <__assert_fail@plt+0xf24>
   12854:	mov	r1, r0
   12858:	mov	r0, r7
   1285c:	bl	12414 <__assert_fail@plt+0xaac>
   12860:	adds	r4, r0, #1
   12864:	movne	r4, #1
   12868:	bl	117a0 <__errno_location@plt>
   1286c:	ldr	r7, [r0]
   12870:	mov	r6, r0
   12874:	mov	r0, r5
   12878:	bl	13188 <__assert_fail@plt+0x1820>
   1287c:	str	r7, [r6]
   12880:	mov	r0, r4
   12884:	add	sp, sp, #12
   12888:	pop	{r4, r5, r6, r7, pc}
   1288c:	mov	r4, #0
   12890:	str	r0, [sp]
   12894:	mov	r2, r4
   12898:	mov	r1, #16
   1289c:	mov	r0, sp
   128a0:	str	r4, [sp, #4]
   128a4:	bl	18664 <lchmod@@Base+0x2840>
   128a8:	mov	r6, r0
   128ac:	mov	r0, r6
   128b0:	bl	14804 <__assert_fail@plt+0x2e9c>
   128b4:	cmp	r0, #0
   128b8:	bne	128f4 <__assert_fail@plt+0xf8c>
   128bc:	bl	117a0 <__errno_location@plt>
   128c0:	ldr	r3, [r0]
   128c4:	mov	r7, r0
   128c8:	cmp	r3, #0
   128cc:	mov	r0, r6
   128d0:	movne	r4, r3
   128d4:	bl	146ec <__assert_fail@plt+0x2d84>
   128d8:	cmp	r0, #0
   128dc:	mov	r0, r5
   128e0:	ldrne	r4, [r7]
   128e4:	bl	13188 <__assert_fail@plt+0x1820>
   128e8:	clz	r4, r4
   128ec:	lsr	r4, r4, #5
   128f0:	b	12880 <__assert_fail@plt+0xf18>
   128f4:	ldr	r1, [r6, #24]
   128f8:	mov	r0, r7
   128fc:	bl	12414 <__assert_fail@plt+0xaac>
   12900:	cmp	r0, #0
   12904:	bge	128ac <__assert_fail@plt+0xf44>
   12908:	bl	117a0 <__errno_location@plt>
   1290c:	ldr	r4, [r0]
   12910:	b	128ac <__assert_fail@plt+0xf44>
   12914:	mov	r3, r0
   12918:	ldr	r0, [r3], #8
   1291c:	cmp	r0, r3
   12920:	bxeq	lr
   12924:	b	13188 <__assert_fail@plt+0x1820>
   12928:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1292c:	sub	sp, sp, #3232	; 0xca0
   12930:	sub	sp, sp, #4
   12934:	and	r3, r1, #3
   12938:	str	r3, [sp, #16]
   1293c:	and	r2, r1, #3
   12940:	sub	r3, r3, #1
   12944:	tst	r3, r2
   12948:	beq	12968 <__assert_fail@plt+0x1000>
   1294c:	bl	117a0 <__errno_location@plt>
   12950:	mov	r3, #22
   12954:	str	r3, [r0]
   12958:	mov	r0, #0
   1295c:	add	sp, sp, #3232	; 0xca0
   12960:	add	sp, sp, #4
   12964:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12968:	cmp	r0, #0
   1296c:	mov	r5, r0
   12970:	beq	1294c <__assert_fail@plt+0xfe4>
   12974:	ldrb	r4, [r0]
   12978:	cmp	r4, #0
   1297c:	bne	1298c <__assert_fail@plt+0x1024>
   12980:	bl	117a0 <__errno_location@plt>
   12984:	mov	r3, #2
   12988:	b	12954 <__assert_fail@plt+0xfec>
   1298c:	add	r3, sp, #1168	; 0x490
   12990:	add	r3, r3, #8
   12994:	add	r6, sp, #144	; 0x90
   12998:	str	r3, [sp, #1168]	; 0x490
   1299c:	add	r2, sp, #2208	; 0x8a0
   129a0:	mov	r3, #1024	; 0x400
   129a4:	cmp	r4, #47	; 0x2f
   129a8:	mov	r7, r1
   129ac:	str	r3, [sp, #1172]	; 0x494
   129b0:	str	r2, [sp, #2200]	; 0x898
   129b4:	str	r3, [sp, #2204]	; 0x89c
   129b8:	str	r6, [sp, #136]	; 0x88
   129bc:	str	r3, [sp, #140]	; 0x8c
   129c0:	subne	r4, r6, #8
   129c4:	bne	12a04 <__assert_fail@plt+0x109c>
   129c8:	strb	r4, [sp, #144]	; 0x90
   129cc:	add	r0, r6, #1
   129d0:	b	12a24 <__assert_fail@plt+0x10bc>
   129d4:	bl	117a0 <__errno_location@plt>
   129d8:	ldr	r3, [r0]
   129dc:	cmp	r3, #12
   129e0:	beq	129fc <__assert_fail@plt+0x1094>
   129e4:	cmp	r3, #34	; 0x22
   129e8:	bne	12ec8 <__assert_fail@plt+0x1560>
   129ec:	mov	r0, r4
   129f0:	bl	17a9c <lchmod@@Base+0x1c78>
   129f4:	cmp	r0, #0
   129f8:	bne	12a00 <__assert_fail@plt+0x1098>
   129fc:	bl	18624 <lchmod@@Base+0x2800>
   12a00:	ldr	r6, [sp, #136]	; 0x88
   12a04:	ldr	r1, [sp, #140]	; 0x8c
   12a08:	mov	r0, r6
   12a0c:	bl	11740 <getcwd@plt>
   12a10:	cmp	r0, #0
   12a14:	beq	129d4 <__assert_fail@plt+0x106c>
   12a18:	mov	r1, #0
   12a1c:	mov	r0, r6
   12a20:	bl	1162c <rawmemchr@plt>
   12a24:	mov	r4, r6
   12a28:	mov	r6, r0
   12a2c:	mov	r9, #0
   12a30:	and	r3, r7, #4
   12a34:	str	r3, [sp, #24]
   12a38:	str	r9, [sp, #8]
   12a3c:	str	r9, [sp, #20]
   12a40:	ldrb	r3, [r5]
   12a44:	cmp	r3, #0
   12a48:	beq	12e40 <__assert_fail@plt+0x14d8>
   12a4c:	mov	r8, r5
   12a50:	b	12a58 <__assert_fail@plt+0x10f0>
   12a54:	mov	r8, r2
   12a58:	mov	r2, r8
   12a5c:	ldrb	r3, [r2], #1
   12a60:	cmp	r3, #47	; 0x2f
   12a64:	beq	12a54 <__assert_fail@plt+0x10ec>
   12a68:	mov	r7, r8
   12a6c:	mov	r2, r7
   12a70:	mov	r5, r7
   12a74:	ldrb	r1, [r2], #1
   12a78:	cmp	r1, #0
   12a7c:	cmpne	r1, #47	; 0x2f
   12a80:	bne	12b3c <__assert_fail@plt+0x11d4>
   12a84:	subs	fp, r7, r8
   12a88:	beq	12e40 <__assert_fail@plt+0x14d8>
   12a8c:	cmp	fp, #1
   12a90:	bne	12b44 <__assert_fail@plt+0x11dc>
   12a94:	cmp	r3, #46	; 0x2e
   12a98:	beq	12a40 <__assert_fail@plt+0x10d8>
   12a9c:	ldrb	r3, [r6, #-1]
   12aa0:	add	sl, fp, #2
   12aa4:	cmp	r3, #47	; 0x2f
   12aa8:	movne	r3, #47	; 0x2f
   12aac:	strbne	r3, [r6]
   12ab0:	addne	r6, r6, #1
   12ab4:	ldr	r3, [sp, #140]	; 0x8c
   12ab8:	add	r3, r4, r3
   12abc:	sub	r3, r3, r6
   12ac0:	cmp	r3, sl
   12ac4:	bcc	12b88 <__assert_fail@plt+0x1220>
   12ac8:	mov	r0, r6
   12acc:	mov	r2, fp
   12ad0:	mov	r1, r8
   12ad4:	bl	1171c <mempcpy@plt>
   12ad8:	mov	r3, #0
   12adc:	strb	r3, [r0]
   12ae0:	ldr	r3, [sp, #24]
   12ae4:	mov	r6, r0
   12ae8:	cmp	r3, #0
   12aec:	bne	12d34 <__assert_fail@plt+0x13cc>
   12af0:	ldr	r3, [sp, #2200]	; 0x898
   12af4:	mov	r0, r4
   12af8:	str	r3, [sp, #12]
   12afc:	ldr	r3, [sp, #2204]	; 0x89c
   12b00:	ldr	r1, [sp, #12]
   12b04:	sub	r3, r3, #1
   12b08:	mov	r2, r3
   12b0c:	str	r3, [sp, #28]
   12b10:	bl	1165c <readlink@plt>
   12b14:	ldr	r3, [sp, #28]
   12b18:	cmp	r3, r0
   12b1c:	mov	sl, r0
   12b20:	bgt	12ba8 <__assert_fail@plt+0x1240>
   12b24:	add	r0, sp, #2192	; 0x890
   12b28:	add	r0, r0, #8
   12b2c:	bl	17a9c <lchmod@@Base+0x1c78>
   12b30:	cmp	r0, #0
   12b34:	bne	12af0 <__assert_fail@plt+0x1188>
   12b38:	b	129fc <__assert_fail@plt+0x1094>
   12b3c:	mov	r7, r2
   12b40:	b	12a6c <__assert_fail@plt+0x1104>
   12b44:	cmp	fp, #2
   12b48:	cmpeq	r3, #46	; 0x2e
   12b4c:	bne	12a9c <__assert_fail@plt+0x1134>
   12b50:	ldrb	r3, [r8, #1]
   12b54:	cmp	r3, #46	; 0x2e
   12b58:	bne	12a9c <__assert_fail@plt+0x1134>
   12b5c:	add	r3, r4, #1
   12b60:	cmp	r6, r3
   12b64:	bls	12a40 <__assert_fail@plt+0x10d8>
   12b68:	sub	r3, r6, #1
   12b6c:	cmp	r4, r3
   12b70:	mov	r6, r3
   12b74:	beq	12a40 <__assert_fail@plt+0x10d8>
   12b78:	ldrb	r2, [r3, #-1]!
   12b7c:	cmp	r2, #47	; 0x2f
   12b80:	bne	12b6c <__assert_fail@plt+0x1204>
   12b84:	b	12a40 <__assert_fail@plt+0x10d8>
   12b88:	add	r0, sp, #136	; 0x88
   12b8c:	bl	17b0c <lchmod@@Base+0x1ce8>
   12b90:	sub	r6, r6, r4
   12b94:	cmp	r0, #0
   12b98:	beq	129fc <__assert_fail@plt+0x1094>
   12b9c:	ldr	r4, [sp, #136]	; 0x88
   12ba0:	add	r6, r4, r6
   12ba4:	b	12ab4 <__assert_fail@plt+0x114c>
   12ba8:	cmp	r0, #0
   12bac:	blt	12d34 <__assert_fail@plt+0x13cc>
   12bb0:	ldr	r3, [sp, #20]
   12bb4:	cmp	r3, #19
   12bb8:	addle	r3, r3, #1
   12bbc:	strle	r3, [sp, #20]
   12bc0:	ble	12c5c <__assert_fail@plt+0x12f4>
   12bc4:	ldrb	r3, [r8]
   12bc8:	cmp	r3, #0
   12bcc:	beq	12c5c <__assert_fail@plt+0x12f4>
   12bd0:	rsb	fp, fp, #0
   12bd4:	mov	r3, #0
   12bd8:	strb	r3, [r6, fp]
   12bdc:	ldrb	r0, [r4]
   12be0:	ldr	r3, [pc, #808]	; 12f10 <__assert_fail@plt+0x15a8>
   12be4:	add	r1, sp, #32
   12be8:	cmp	r0, #0
   12bec:	movne	r0, r4
   12bf0:	moveq	r0, r3
   12bf4:	bl	19938 <lchmod@@Base+0x3b14>
   12bf8:	cmp	r0, #0
   12bfc:	bne	12eec <__assert_fail@plt+0x1584>
   12c00:	ldrb	r3, [r8]
   12c04:	cmp	r9, #0
   12c08:	strb	r3, [r6, fp]
   12c0c:	bne	12c34 <__assert_fail@plt+0x12cc>
   12c10:	ldr	r3, [pc, #764]	; 12f14 <__assert_fail@plt+0x15ac>
   12c14:	mov	r1, r9
   12c18:	str	r3, [sp]
   12c1c:	ldr	r2, [pc, #756]	; 12f18 <__assert_fail@plt+0x15b0>
   12c20:	ldr	r3, [pc, #756]	; 12f1c <__assert_fail@plt+0x15b4>
   12c24:	mov	r0, #7
   12c28:	bl	156c4 <__assert_fail@plt+0x3d5c>
   12c2c:	subs	r9, r0, #0
   12c30:	beq	129fc <__assert_fail@plt+0x1094>
   12c34:	add	r2, sp, #32
   12c38:	mov	r1, r8
   12c3c:	mov	r0, r9
   12c40:	bl	13144 <__assert_fail@plt+0x17dc>
   12c44:	cmp	r0, #0
   12c48:	bne	12ed4 <__assert_fail@plt+0x156c>
   12c4c:	add	r2, sp, #32
   12c50:	mov	r1, r8
   12c54:	mov	r0, r9
   12c58:	bl	130dc <__assert_fail@plt+0x1774>
   12c5c:	ldr	r2, [sp, #12]
   12c60:	mov	r3, #0
   12c64:	mov	r0, r7
   12c68:	strb	r3, [r2, sl]
   12c6c:	ldr	r3, [sp, #8]
   12c70:	ldr	fp, [sp, #1168]	; 0x490
   12c74:	cmp	r3, #0
   12c78:	subne	r8, r7, fp
   12c7c:	ldreq	r8, [sp, #8]
   12c80:	bl	11764 <strlen@plt>
   12c84:	adds	r3, sl, r0
   12c88:	mov	r7, r0
   12c8c:	bcs	129fc <__assert_fail@plt+0x1094>
   12c90:	ldr	r2, [sp, #1172]	; 0x494
   12c94:	cmp	r3, r2
   12c98:	bcs	12d14 <__assert_fail@plt+0x13ac>
   12c9c:	ldr	r3, [sp, #8]
   12ca0:	add	r2, r7, #1
   12ca4:	cmp	r3, #0
   12ca8:	addne	r5, fp, r8
   12cac:	mov	r1, r5
   12cb0:	add	r0, fp, sl
   12cb4:	bl	11584 <memmove@plt>
   12cb8:	ldr	r1, [sp, #12]
   12cbc:	mov	r2, sl
   12cc0:	mov	r0, fp
   12cc4:	bl	115b4 <memcpy@plt>
   12cc8:	ldr	r3, [sp, #12]
   12ccc:	add	r1, r4, #1
   12cd0:	ldrb	r3, [r3]
   12cd4:	cmp	r3, #47	; 0x2f
   12cd8:	moveq	r6, r1
   12cdc:	strbeq	r3, [r4]
   12ce0:	mov	r5, r0
   12ce4:	beq	12d08 <__assert_fail@plt+0x13a0>
   12ce8:	cmp	r6, r1
   12cec:	bls	12d08 <__assert_fail@plt+0x13a0>
   12cf0:	sub	r6, r6, #1
   12cf4:	cmp	r4, r6
   12cf8:	beq	12e38 <__assert_fail@plt+0x14d0>
   12cfc:	ldrb	r3, [r6, #-1]
   12d00:	cmp	r3, #47	; 0x2f
   12d04:	bne	12cf0 <__assert_fail@plt+0x1388>
   12d08:	mov	r3, #1
   12d0c:	str	r3, [sp, #8]
   12d10:	b	12a40 <__assert_fail@plt+0x10d8>
   12d14:	add	r0, sp, #1168	; 0x490
   12d18:	str	r3, [sp, #28]
   12d1c:	bl	17b0c <lchmod@@Base+0x1ce8>
   12d20:	cmp	r0, #0
   12d24:	beq	129fc <__assert_fail@plt+0x1094>
   12d28:	ldr	fp, [sp, #1168]	; 0x490
   12d2c:	ldr	r3, [sp, #28]
   12d30:	b	12c90 <__assert_fail@plt+0x1328>
   12d34:	ldr	r3, [sp, #16]
   12d38:	cmp	r3, #2
   12d3c:	movne	r3, r7
   12d40:	beq	12a40 <__assert_fail@plt+0x10d8>
   12d44:	ldrb	r2, [r3]
   12d48:	cmp	r2, #47	; 0x2f
   12d4c:	beq	12db4 <__assert_fail@plt+0x144c>
   12d50:	ldr	r3, [sp, #24]
   12d54:	cmp	r3, #0
   12d58:	beq	12e24 <__assert_fail@plt+0x14bc>
   12d5c:	ldrb	r2, [r7]
   12d60:	cmp	r2, #0
   12d64:	moveq	r3, #512	; 0x200
   12d68:	beq	12e10 <__assert_fail@plt+0x14a8>
   12d6c:	mov	r0, #0
   12d70:	cmp	r0, #0
   12d74:	beq	12a40 <__assert_fail@plt+0x10d8>
   12d78:	ldr	r3, [sp, #16]
   12d7c:	cmp	r3, #1
   12d80:	bne	12eec <__assert_fail@plt+0x1584>
   12d84:	bl	117a0 <__errno_location@plt>
   12d88:	ldr	r3, [r0]
   12d8c:	cmp	r3, #2
   12d90:	bne	12eec <__assert_fail@plt+0x1584>
   12d94:	ldr	r1, [pc, #388]	; 12f20 <__assert_fail@plt+0x15b8>
   12d98:	mov	r0, r7
   12d9c:	bl	1195c <strspn@plt>
   12da0:	ldrb	r3, [r7, r0]
   12da4:	cmp	r3, #0
   12da8:	beq	12a40 <__assert_fail@plt+0x10d8>
   12dac:	b	12eec <__assert_fail@plt+0x1584>
   12db0:	mov	r3, r2
   12db4:	ldrb	r1, [r3, #1]
   12db8:	add	r2, r3, #1
   12dbc:	cmp	r1, #47	; 0x2f
   12dc0:	beq	12db0 <__assert_fail@plt+0x1448>
   12dc4:	cmp	r1, #0
   12dc8:	add	r3, r3, #2
   12dcc:	beq	12dfc <__assert_fail@plt+0x1494>
   12dd0:	cmp	r1, #46	; 0x2e
   12dd4:	bne	12d50 <__assert_fail@plt+0x13e8>
   12dd8:	ldrb	r1, [r2, #1]
   12ddc:	cmp	r1, #0
   12de0:	beq	12dfc <__assert_fail@plt+0x1494>
   12de4:	cmp	r1, #46	; 0x2e
   12de8:	bne	12d44 <__assert_fail@plt+0x13dc>
   12dec:	ldrb	r2, [r2, #2]
   12df0:	cmp	r2, #47	; 0x2f
   12df4:	cmpne	r2, #0
   12df8:	bne	12d44 <__assert_fail@plt+0x13dc>
   12dfc:	ldr	r1, [pc, #288]	; 12f24 <__assert_fail@plt+0x15bc>
   12e00:	mov	r0, r6
   12e04:	bl	11680 <strcpy@plt>
   12e08:	mov	r3, #512	; 0x200
   12e0c:	mov	r2, #0
   12e10:	mov	r1, r4
   12e14:	mvn	r0, #99	; 0x63
   12e18:	bl	1159c <faccessat@plt>
   12e1c:	adds	r0, r0, #0
   12e20:	b	12e30 <__assert_fail@plt+0x14c8>
   12e24:	bl	117a0 <__errno_location@plt>
   12e28:	ldr	r0, [r0]
   12e2c:	subs	r0, r0, #22
   12e30:	movne	r0, #1
   12e34:	b	12d70 <__assert_fail@plt+0x1408>
   12e38:	mov	r6, r4
   12e3c:	b	12d08 <__assert_fail@plt+0x13a0>
   12e40:	add	r3, r4, #1
   12e44:	cmp	r6, r3
   12e48:	bls	12e58 <__assert_fail@plt+0x14f0>
   12e4c:	ldrb	r3, [r6, #-1]
   12e50:	cmp	r3, #47	; 0x2f
   12e54:	subeq	r6, r6, #1
   12e58:	cmp	r9, #0
   12e5c:	movne	r5, #0
   12e60:	bne	12e98 <__assert_fail@plt+0x1530>
   12e64:	add	r0, sp, #1168	; 0x490
   12e68:	bl	12914 <__assert_fail@plt+0xfac>
   12e6c:	add	r0, sp, #2192	; 0x890
   12e70:	add	r0, r0, #8
   12e74:	bl	12914 <__assert_fail@plt+0xfac>
   12e78:	mov	r3, #0
   12e7c:	strb	r3, [r6], #1
   12e80:	add	r0, sp, #136	; 0x88
   12e84:	sub	r1, r6, r4
   12e88:	bl	17a4c <lchmod@@Base+0x1c28>
   12e8c:	cmp	r0, #0
   12e90:	bne	1295c <__assert_fail@plt+0xff4>
   12e94:	b	129fc <__assert_fail@plt+0x1094>
   12e98:	mov	r0, r9
   12e9c:	bl	15830 <__assert_fail@plt+0x3ec8>
   12ea0:	add	r0, sp, #1168	; 0x490
   12ea4:	bl	12914 <__assert_fail@plt+0xfac>
   12ea8:	add	r0, sp, #2192	; 0x890
   12eac:	add	r0, r0, #8
   12eb0:	bl	12914 <__assert_fail@plt+0xfac>
   12eb4:	cmp	r5, #0
   12eb8:	beq	12e78 <__assert_fail@plt+0x1510>
   12ebc:	add	r0, sp, #136	; 0x88
   12ec0:	bl	12914 <__assert_fail@plt+0xfac>
   12ec4:	b	12958 <__assert_fail@plt+0xff0>
   12ec8:	mov	r4, r6
   12ecc:	mov	r5, #1
   12ed0:	b	12ea0 <__assert_fail@plt+0x1538>
   12ed4:	ldr	r3, [sp, #16]
   12ed8:	cmp	r3, #2
   12edc:	beq	12a40 <__assert_fail@plt+0x10d8>
   12ee0:	bl	117a0 <__errno_location@plt>
   12ee4:	mov	r3, #40	; 0x28
   12ee8:	str	r3, [r0]
   12eec:	cmp	r9, #0
   12ef0:	movne	r5, #1
   12ef4:	bne	12e98 <__assert_fail@plt+0x1530>
   12ef8:	add	r0, sp, #1168	; 0x490
   12efc:	bl	12914 <__assert_fail@plt+0xfac>
   12f00:	add	r0, sp, #2192	; 0x890
   12f04:	add	r0, r0, #8
   12f08:	bl	12914 <__assert_fail@plt+0xfac>
   12f0c:	b	12ebc <__assert_fail@plt+0x1554>
   12f10:	muleq	r1, r7, r2
   12f14:	andeq	r5, r1, r8, asr #26
   12f18:	andeq	r5, r1, r4, asr #25
   12f1c:	strdeq	r5, [r1], -ip
   12f20:	andeq	sl, r1, lr, lsl #14
   12f24:	andeq	sl, r1, r8, ror #4
   12f28:	ldr	r3, [pc, #4]	; 12f34 <__assert_fail@plt+0x15cc>
   12f2c:	str	r0, [r3]
   12f30:	bx	lr
   12f34:	andeq	fp, r2, r0, lsl #4
   12f38:	ldr	r3, [pc, #4]	; 12f44 <__assert_fail@plt+0x15dc>
   12f3c:	strb	r0, [r3, #4]
   12f40:	bx	lr
   12f44:	andeq	fp, r2, r0, lsl #4
   12f48:	ldr	r3, [pc, #192]	; 13010 <__assert_fail@plt+0x16a8>
   12f4c:	push	{r0, r1, r4, r5, r6, lr}
   12f50:	ldr	r0, [r3]
   12f54:	bl	18c54 <lchmod@@Base+0x2e30>
   12f58:	cmp	r0, #0
   12f5c:	beq	12ff4 <__assert_fail@plt+0x168c>
   12f60:	ldr	r3, [pc, #172]	; 13014 <__assert_fail@plt+0x16ac>
   12f64:	mov	r4, r3
   12f68:	ldrb	r2, [r3, #4]
   12f6c:	cmp	r2, #0
   12f70:	beq	12f84 <__assert_fail@plt+0x161c>
   12f74:	bl	117a0 <__errno_location@plt>
   12f78:	ldr	r3, [r0]
   12f7c:	cmp	r3, #32
   12f80:	beq	12ff4 <__assert_fail@plt+0x168c>
   12f84:	mov	r2, #5
   12f88:	ldr	r1, [pc, #136]	; 13018 <__assert_fail@plt+0x16b0>
   12f8c:	mov	r0, #0
   12f90:	bl	115f0 <dcgettext@plt>
   12f94:	ldr	r4, [r4]
   12f98:	cmp	r4, #0
   12f9c:	mov	r5, r0
   12fa0:	beq	12fd8 <__assert_fail@plt+0x1670>
   12fa4:	bl	117a0 <__errno_location@plt>
   12fa8:	ldr	r6, [r0]
   12fac:	mov	r0, r4
   12fb0:	bl	178f0 <lchmod@@Base+0x1acc>
   12fb4:	str	r5, [sp]
   12fb8:	ldr	r2, [pc, #92]	; 1301c <__assert_fail@plt+0x16b4>
   12fbc:	mov	r1, r6
   12fc0:	mov	r3, r0
   12fc4:	mov	r0, #0
   12fc8:	bl	116bc <error@plt>
   12fcc:	ldr	r3, [pc, #76]	; 13020 <__assert_fail@plt+0x16b8>
   12fd0:	ldr	r0, [r3]
   12fd4:	bl	115a8 <_exit@plt>
   12fd8:	bl	117a0 <__errno_location@plt>
   12fdc:	mov	r3, r5
   12fe0:	ldr	r2, [pc, #60]	; 13024 <__assert_fail@plt+0x16bc>
   12fe4:	ldr	r1, [r0]
   12fe8:	mov	r0, r4
   12fec:	bl	116bc <error@plt>
   12ff0:	b	12fcc <__assert_fail@plt+0x1664>
   12ff4:	ldr	r3, [pc, #44]	; 13028 <__assert_fail@plt+0x16c0>
   12ff8:	ldr	r0, [r3]
   12ffc:	bl	18c54 <lchmod@@Base+0x2e30>
   13000:	cmp	r0, #0
   13004:	bne	12fcc <__assert_fail@plt+0x1664>
   13008:	add	sp, sp, #8
   1300c:	pop	{r4, r5, r6, pc}
   13010:	strdeq	fp, [r2], -r4
   13014:	andeq	fp, r2, r0, lsl #4
   13018:	andeq	sl, r1, sl, ror #4
   1301c:	andeq	sl, r1, r6, ror r2
   13020:	muleq	r2, r8, r1
   13024:	andeq	sl, r1, sl, ror r2
   13028:	strdeq	fp, [r2], -r0
   1302c:	push	{r4, lr}
   13030:	bl	13084 <__assert_fail@plt+0x171c>
   13034:	cmp	r0, #0
   13038:	popne	{r4, pc}
   1303c:	bl	18624 <lchmod@@Base+0x2800>
   13040:	push	{r4, r5, r6, lr}
   13044:	mov	r5, r0
   13048:	ldrb	r4, [r0]
   1304c:	bl	18bc4 <lchmod@@Base+0x2da0>
   13050:	sub	r4, r4, #47	; 0x2f
   13054:	clz	r4, r4
   13058:	lsr	r4, r4, #5
   1305c:	sub	r0, r0, r5
   13060:	cmp	r0, r4
   13064:	bhi	1306c <__assert_fail@plt+0x1704>
   13068:	pop	{r4, r5, r6, pc}
   1306c:	sub	r3, r0, #1
   13070:	ldrb	r2, [r5, r3]
   13074:	cmp	r2, #47	; 0x2f
   13078:	popne	{r4, r5, r6, pc}
   1307c:	mov	r0, r3
   13080:	b	13060 <__assert_fail@plt+0x16f8>
   13084:	push	{r4, r5, r6, lr}
   13088:	mov	r6, r0
   1308c:	bl	13040 <__assert_fail@plt+0x16d8>
   13090:	add	r3, r0, #1
   13094:	mov	r4, r0
   13098:	cmp	r0, #0
   1309c:	movne	r0, r3
   130a0:	addeq	r0, r3, #1
   130a4:	bl	18b28 <lchmod@@Base+0x2d04>
   130a8:	subs	r5, r0, #0
   130ac:	beq	130d4 <__assert_fail@plt+0x176c>
   130b0:	mov	r2, r4
   130b4:	mov	r1, r6
   130b8:	bl	115b4 <memcpy@plt>
   130bc:	cmp	r4, #0
   130c0:	moveq	r3, #46	; 0x2e
   130c4:	moveq	r4, #1
   130c8:	strbeq	r3, [r5]
   130cc:	mov	r3, #0
   130d0:	strb	r3, [r5, r4]
   130d4:	mov	r0, r5
   130d8:	pop	{r4, r5, r6, pc}
   130dc:	push	{r4, r5, r6, r7, r8, lr}
   130e0:	subs	r6, r0, #0
   130e4:	popeq	{r4, r5, r6, r7, r8, pc}
   130e8:	mov	r0, #24
   130ec:	mov	r5, r2
   130f0:	mov	r7, r1
   130f4:	bl	18190 <lchmod@@Base+0x236c>
   130f8:	mov	r4, r0
   130fc:	mov	r0, r7
   13100:	bl	18608 <lchmod@@Base+0x27e4>
   13104:	ldrd	r2, [r5, #96]	; 0x60
   13108:	mov	r1, r4
   1310c:	strd	r2, [r4, #8]
   13110:	ldrd	r2, [r5]
   13114:	strd	r2, [r4, #16]
   13118:	str	r0, [r4]
   1311c:	mov	r0, r6
   13120:	bl	15b98 <__assert_fail@plt+0x4230>
   13124:	cmp	r0, #0
   13128:	bne	13130 <__assert_fail@plt+0x17c8>
   1312c:	bl	18624 <lchmod@@Base+0x2800>
   13130:	cmp	r4, r0
   13134:	popeq	{r4, r5, r6, r7, r8, pc}
   13138:	mov	r0, r4
   1313c:	pop	{r4, r5, r6, r7, r8, lr}
   13140:	b	15d48 <__assert_fail@plt+0x43e0>
   13144:	subs	r3, r0, #0
   13148:	beq	13180 <__assert_fail@plt+0x1818>
   1314c:	push	{r4, r5, lr}
   13150:	sub	sp, sp, #28
   13154:	ldrd	r4, [r2, #96]	; 0x60
   13158:	ldrd	r2, [r2]
   1315c:	str	r1, [sp]
   13160:	mov	r1, sp
   13164:	strd	r4, [sp, #8]
   13168:	strd	r2, [sp, #16]
   1316c:	bl	154a0 <__assert_fail@plt+0x3b38>
   13170:	adds	r0, r0, #0
   13174:	movne	r0, #1
   13178:	add	sp, sp, #28
   1317c:	pop	{r4, r5, pc}
   13180:	mov	r0, r3
   13184:	bx	lr
   13188:	push	{r0, r1, r2, r4, r5, lr}
   1318c:	mov	r5, r0
   13190:	bl	117a0 <__errno_location@plt>
   13194:	ldr	r3, [r0]
   13198:	mov	r4, r0
   1319c:	str	r3, [sp]
   131a0:	str	r3, [sp, #4]
   131a4:	mov	r3, #0
   131a8:	str	r3, [r0]
   131ac:	mov	r0, r5
   131b0:	bl	11590 <free@plt>
   131b4:	ldr	r3, [r4]
   131b8:	add	r2, sp, #8
   131bc:	cmp	r3, #0
   131c0:	moveq	r3, #4
   131c4:	movne	r3, #0
   131c8:	add	r3, r2, r3
   131cc:	ldr	r3, [r3, #-8]
   131d0:	str	r3, [r4]
   131d4:	add	sp, sp, #12
   131d8:	pop	{r4, r5, pc}
   131dc:	ldrd	r2, [r1, #8]
   131e0:	push	{r4, r5, lr}
   131e4:	ldrd	r4, [r0, #8]
   131e8:	cmp	r5, r3
   131ec:	cmpeq	r4, r2
   131f0:	bne	13210 <__assert_fail@plt+0x18a8>
   131f4:	ldrd	r4, [r0]
   131f8:	ldrd	r2, [r1]
   131fc:	cmp	r5, r3
   13200:	cmpeq	r4, r2
   13204:	moveq	r0, #1
   13208:	movne	r0, #0
   1320c:	pop	{r4, r5, pc}
   13210:	mov	r0, #0
   13214:	pop	{r4, r5, pc}
   13218:	push	{r4, lr}
   1321c:	mov	r2, r1
   13220:	mov	r3, #0
   13224:	ldrd	r0, [r0, #8]
   13228:	bl	19748 <lchmod@@Base+0x3924>
   1322c:	mov	r0, r2
   13230:	pop	{r4, pc}
   13234:	push	{r4, lr}
   13238:	mov	r2, r1
   1323c:	mov	r3, #0
   13240:	ldrd	r0, [r0]
   13244:	bl	19748 <lchmod@@Base+0x3924>
   13248:	mov	r0, r2
   1324c:	pop	{r4, pc}
   13250:	ldrd	r2, [r1]
   13254:	push	{r4, r5, lr}
   13258:	ldrd	r4, [r0]
   1325c:	cmp	r5, r3
   13260:	cmpeq	r4, r2
   13264:	moveq	r0, #1
   13268:	movne	r0, #0
   1326c:	pop	{r4, r5, pc}
   13270:	ldr	r3, [r0]
   13274:	push	{r4, r5, lr}
   13278:	ldrd	r4, [r3, #160]	; 0xa0
   1327c:	ldr	r3, [r1]
   13280:	ldrd	r2, [r3, #160]	; 0xa0
   13284:	cmp	r5, r3
   13288:	cmpeq	r4, r2
   1328c:	movhi	r0, #1
   13290:	movls	r0, #0
   13294:	movcc	r3, #1
   13298:	movcs	r3, #0
   1329c:	sub	r0, r0, r3
   132a0:	pop	{r4, r5, pc}
   132a4:	ldr	r3, [r1, #48]	; 0x30
   132a8:	push	{r4, r5, r6, lr}
   132ac:	cmp	r3, #0
   132b0:	mov	r4, r1
   132b4:	add	r5, r1, #64	; 0x40
   132b8:	ldr	r3, [r0, #48]	; 0x30
   132bc:	bne	132c8 <__assert_fail@plt+0x1960>
   132c0:	tst	r3, #1
   132c4:	movne	r2, #1
   132c8:	lsl	r3, r3, #30
   132cc:	orrs	r3, r2, r3, lsr #31
   132d0:	beq	1333c <__assert_fail@plt+0x19d4>
   132d4:	mov	r1, r5
   132d8:	ldr	r0, [r4, #24]
   132dc:	bl	19938 <lchmod@@Base+0x3b14>
   132e0:	cmp	r0, #0
   132e4:	beq	13364 <__assert_fail@plt+0x19fc>
   132e8:	bl	117a0 <__errno_location@plt>
   132ec:	ldr	r3, [r0]
   132f0:	mov	r6, r0
   132f4:	cmp	r3, #2
   132f8:	bne	1331c <__assert_fail@plt+0x19b4>
   132fc:	mov	r1, r5
   13300:	ldr	r0, [r4, #24]
   13304:	bl	19958 <lchmod@@Base+0x3b34>
   13308:	cmp	r0, #0
   1330c:	bne	1331c <__assert_fail@plt+0x19b4>
   13310:	str	r0, [r6]
   13314:	mov	r0, #13
   13318:	pop	{r4, r5, r6, pc}
   1331c:	ldr	r3, [r6]
   13320:	str	r3, [r4, #32]
   13324:	mov	r2, #104	; 0x68
   13328:	mov	r1, #0
   1332c:	mov	r0, r5
   13330:	bl	117c4 <memset@plt>
   13334:	mov	r0, #10
   13338:	pop	{r4, r5, r6, pc}
   1333c:	mov	r3, #256	; 0x100
   13340:	mov	r2, r5
   13344:	ldr	r1, [r4, #24]
   13348:	ldr	r0, [r0, #32]
   1334c:	bl	19968 <lchmod@@Base+0x3b44>
   13350:	cmp	r0, #0
   13354:	beq	13364 <__assert_fail@plt+0x19fc>
   13358:	bl	117a0 <__errno_location@plt>
   1335c:	ldr	r3, [r0]
   13360:	b	13320 <__assert_fail@plt+0x19b8>
   13364:	ldr	r0, [r4, #80]	; 0x50
   13368:	and	r0, r0, #61440	; 0xf000
   1336c:	cmp	r0, #16384	; 0x4000
   13370:	bne	133b4 <__assert_fail@plt+0x1a4c>
   13374:	ldrb	r3, [r4, #168]	; 0xa8
   13378:	cmp	r3, #46	; 0x2e
   1337c:	bne	133cc <__assert_fail@plt+0x1a64>
   13380:	ldrb	r3, [r4, #169]	; 0xa9
   13384:	cmp	r3, #0
   13388:	beq	133a0 <__assert_fail@plt+0x1a38>
   1338c:	ldr	r3, [r4, #168]	; 0xa8
   13390:	bic	r3, r3, #-16777216	; 0xff000000
   13394:	bic	r3, r3, #255	; 0xff
   13398:	cmp	r3, #11776	; 0x2e00
   1339c:	bne	133cc <__assert_fail@plt+0x1a64>
   133a0:	ldr	r0, [r4, #48]	; 0x30
   133a4:	cmp	r0, #0
   133a8:	moveq	r0, #1
   133ac:	movne	r0, #5
   133b0:	pop	{r4, r5, r6, pc}
   133b4:	cmp	r0, #40960	; 0xa000
   133b8:	beq	133d4 <__assert_fail@plt+0x1a6c>
   133bc:	cmp	r0, #32768	; 0x8000
   133c0:	moveq	r0, #8
   133c4:	movne	r0, #3
   133c8:	pop	{r4, r5, r6, pc}
   133cc:	mov	r0, #1
   133d0:	pop	{r4, r5, r6, pc}
   133d4:	mov	r0, #12
   133d8:	pop	{r4, r5, r6, pc}
   133dc:	ldr	r3, [r0, #40]	; 0x28
   133e0:	push	{r4, r5, r6, r7, r8, lr}
   133e4:	cmp	r3, r2
   133e8:	mov	r4, r0
   133ec:	mov	r6, r1
   133f0:	mov	r5, r2
   133f4:	ldr	r7, [r0, #44]	; 0x2c
   133f8:	bcs	13440 <__assert_fail@plt+0x1ad8>
   133fc:	add	r1, r2, #40	; 0x28
   13400:	cmn	r1, #-1073741823	; 0xc0000001
   13404:	str	r1, [r0, #40]	; 0x28
   13408:	bls	13428 <__assert_fail@plt+0x1ac0>
   1340c:	ldr	r0, [r4, #8]
   13410:	bl	13188 <__assert_fail@plt+0x1820>
   13414:	mov	r3, #0
   13418:	str	r3, [r4, #8]
   1341c:	str	r3, [r4, #40]	; 0x28
   13420:	mov	r0, r6
   13424:	pop	{r4, r5, r6, r7, r8, pc}
   13428:	lsl	r1, r1, #2
   1342c:	ldr	r0, [r0, #8]
   13430:	bl	18b68 <lchmod@@Base+0x2d44>
   13434:	cmp	r0, #0
   13438:	beq	1340c <__assert_fail@plt+0x1aa4>
   1343c:	str	r0, [r4, #8]
   13440:	ldr	r0, [r4, #8]
   13444:	mov	r2, r0
   13448:	cmp	r6, #0
   1344c:	bne	13488 <__assert_fail@plt+0x1b20>
   13450:	mov	r3, r7
   13454:	mov	r2, #4
   13458:	mov	r1, r5
   1345c:	bl	11890 <qsort@plt>
   13460:	ldr	r2, [r4, #8]
   13464:	mov	r3, r5
   13468:	mov	r1, r2
   1346c:	ldr	r6, [r2]
   13470:	subs	r3, r3, #1
   13474:	bne	13494 <__assert_fail@plt+0x1b2c>
   13478:	sub	r5, r5, #-1073741823	; 0xc0000001
   1347c:	ldr	r2, [r2, r5, lsl #2]
   13480:	str	r3, [r2, #8]
   13484:	b	13420 <__assert_fail@plt+0x1ab8>
   13488:	str	r6, [r2], #4
   1348c:	ldr	r6, [r6, #8]
   13490:	b	13448 <__assert_fail@plt+0x1ae0>
   13494:	ldr	r0, [r1]
   13498:	ldr	ip, [r1, #4]!
   1349c:	str	ip, [r0, #8]
   134a0:	b	13470 <__assert_fail@plt+0x1b08>
   134a4:	push	{r4, r5, r6, r7, r8, lr}
   134a8:	mov	r6, r0
   134ac:	add	r0, r2, #176	; 0xb0
   134b0:	bic	r0, r0, #7
   134b4:	mov	r7, r1
   134b8:	mov	r5, r2
   134bc:	bl	18b28 <lchmod@@Base+0x2d04>
   134c0:	subs	r4, r0, #0
   134c4:	beq	13510 <__assert_fail@plt+0x1ba8>
   134c8:	mov	r2, r5
   134cc:	mov	r1, r7
   134d0:	add	r0, r4, #168	; 0xa8
   134d4:	bl	115b4 <memcpy@plt>
   134d8:	add	r2, r4, r5
   134dc:	mov	r3, #0
   134e0:	strb	r3, [r2, #168]	; 0xa8
   134e4:	ldr	r2, [r6, #24]
   134e8:	str	r5, [r4, #52]	; 0x34
   134ec:	str	r2, [r4, #28]
   134f0:	mov	r2, #3
   134f4:	str	r6, [r4, #44]	; 0x2c
   134f8:	str	r3, [r4, #32]
   134fc:	str	r3, [r4, #12]
   13500:	strh	r3, [r4, #58]	; 0x3a
   13504:	strh	r2, [r4, #60]	; 0x3c
   13508:	str	r3, [r4, #16]
   1350c:	str	r3, [r4, #20]
   13510:	mov	r0, r4
   13514:	pop	{r4, r5, r6, r7, r8, pc}
   13518:	ldr	ip, [r0, #48]	; 0x30
   1351c:	push	{lr}		; (str lr, [sp, #-4]!)
   13520:	tst	ip, #16
   13524:	ldr	lr, [pc, #40]	; 13554 <__assert_fail@plt+0x1bec>
   13528:	ldr	r2, [pc, #40]	; 13558 <__assert_fail@plt+0x1bf0>
   1352c:	moveq	r2, lr
   13530:	tst	ip, #512	; 0x200
   13534:	beq	13544 <__assert_fail@plt+0x1bdc>
   13538:	ldr	r0, [r0, #32]
   1353c:	pop	{lr}		; (ldr lr, [sp], #4)
   13540:	b	1638c <lchmod@@Base+0x568>
   13544:	mov	r0, r1
   13548:	pop	{lr}		; (ldr lr, [sp], #4)
   1354c:	mov	r1, r2
   13550:	b	18ffc <lchmod@@Base+0x31d8>
   13554:	andeq	r4, r8, r0, lsl #18
   13558:	andeq	ip, r8, r0, lsl #18
   1355c:	push	{r4, r5, r6, lr}
   13560:	mov	r4, r0
   13564:	cmp	r4, #0
   13568:	bne	13570 <__assert_fail@plt+0x1c08>
   1356c:	pop	{r4, r5, r6, pc}
   13570:	ldr	r0, [r4, #12]
   13574:	ldr	r5, [r4, #8]
   13578:	cmp	r0, #0
   1357c:	beq	13584 <__assert_fail@plt+0x1c1c>
   13580:	bl	11950 <closedir@plt>
   13584:	mov	r0, r4
   13588:	bl	13188 <__assert_fail@plt+0x1820>
   1358c:	mov	r4, r5
   13590:	b	13564 <__assert_fail@plt+0x1bfc>
   13594:	ldr	r2, [r0, #48]	; 0x30
   13598:	ldr	r3, [pc, #28]	; 135bc <__assert_fail@plt+0x1c54>
   1359c:	ldr	r0, [r0, #56]	; 0x38
   135a0:	and	r3, r3, r2
   135a4:	cmp	r3, #0
   135a8:	beq	135b8 <__assert_fail@plt+0x1c50>
   135ac:	cmp	r0, #0
   135b0:	bxeq	lr
   135b4:	b	15830 <__assert_fail@plt+0x3ec8>
   135b8:	b	13188 <__assert_fail@plt+0x1820>
   135bc:	andeq	r0, r0, r2, lsl #2
   135c0:	push	{r4, lr}
   135c4:	mov	r4, r0
   135c8:	mov	r0, r4
   135cc:	bl	15d90 <__assert_fail@plt+0x4428>
   135d0:	cmp	r0, #0
   135d4:	beq	135dc <__assert_fail@plt+0x1c74>
   135d8:	pop	{r4, pc}
   135dc:	mov	r0, r4
   135e0:	bl	15ddc <__assert_fail@plt+0x4474>
   135e4:	cmp	r0, #0
   135e8:	blt	135c8 <__assert_fail@plt+0x1c60>
   135ec:	bl	11920 <close@plt>
   135f0:	b	135c8 <__assert_fail@plt+0x1c60>
   135f4:	push	{r4, r5, r6, r7, lr}
   135f8:	sub	sp, sp, #100	; 0x64
   135fc:	ldr	r5, [r0, #44]	; 0x2c
   13600:	ldr	r3, [r5, #48]	; 0x30
   13604:	tst	r3, #512	; 0x200
   13608:	bne	13618 <__assert_fail@plt+0x1cb0>
   1360c:	mov	r0, #0
   13610:	add	sp, sp, #100	; 0x64
   13614:	pop	{r4, r5, r6, r7, pc}
   13618:	ldr	r4, [r5, #52]	; 0x34
   1361c:	mov	r7, r1
   13620:	cmp	r4, #0
   13624:	mov	r6, r0
   13628:	bne	13658 <__assert_fail@plt+0x1cf0>
   1362c:	ldr	r3, [pc, #184]	; 136ec <__assert_fail@plt+0x1d84>
   13630:	mov	r1, r4
   13634:	str	r3, [sp]
   13638:	ldr	r2, [pc, #176]	; 136f0 <__assert_fail@plt+0x1d88>
   1363c:	ldr	r3, [pc, #176]	; 136f4 <__assert_fail@plt+0x1d8c>
   13640:	mov	r0, #13
   13644:	bl	156c4 <__assert_fail@plt+0x3d5c>
   13648:	cmp	r0, #0
   1364c:	mov	r4, r0
   13650:	str	r0, [r5, #52]	; 0x34
   13654:	beq	13678 <__assert_fail@plt+0x1d10>
   13658:	ldrd	r2, [r6, #64]	; 0x40
   1365c:	add	r1, sp, #96	; 0x60
   13660:	mov	r0, r4
   13664:	strd	r2, [r1, #-88]!	; 0xffffffa8
   13668:	bl	154a0 <__assert_fail@plt+0x3b38>
   1366c:	cmp	r0, #0
   13670:	ldrne	r0, [r0, #8]
   13674:	bne	13610 <__assert_fail@plt+0x1ca8>
   13678:	cmp	r7, #0
   1367c:	blt	1360c <__assert_fail@plt+0x1ca4>
   13680:	add	r1, sp, #8
   13684:	mov	r0, r7
   13688:	bl	11500 <fstatfs64@plt>
   1368c:	cmp	r0, #0
   13690:	bne	1360c <__assert_fail@plt+0x1ca4>
   13694:	cmp	r4, #0
   13698:	beq	136e4 <__assert_fail@plt+0x1d7c>
   1369c:	mov	r0, #16
   136a0:	bl	18b28 <lchmod@@Base+0x2d04>
   136a4:	subs	r5, r0, #0
   136a8:	beq	136e4 <__assert_fail@plt+0x1d7c>
   136ac:	ldrd	r2, [r6, #64]	; 0x40
   136b0:	mov	r1, r5
   136b4:	mov	r0, r4
   136b8:	strd	r2, [r5]
   136bc:	ldr	r3, [sp, #8]
   136c0:	str	r3, [r5, #8]
   136c4:	bl	15b98 <__assert_fail@plt+0x4230>
   136c8:	cmp	r0, #0
   136cc:	beq	136dc <__assert_fail@plt+0x1d74>
   136d0:	cmp	r5, r0
   136d4:	beq	136e4 <__assert_fail@plt+0x1d7c>
   136d8:	bl	11914 <abort@plt>
   136dc:	mov	r0, r5
   136e0:	bl	13188 <__assert_fail@plt+0x1820>
   136e4:	ldr	r0, [sp, #8]
   136e8:	b	13610 <__assert_fail@plt+0x1ca8>
   136ec:	andeq	r3, r1, r8, lsl #3
   136f0:	andeq	r3, r1, r4, lsr r2
   136f4:	andeq	r3, r1, r0, asr r2
   136f8:	push	{r4, r5, r6, lr}
   136fc:	mov	r5, r1
   13700:	ldr	r1, [r0, #32]
   13704:	cmn	r1, #100	; 0x64
   13708:	sub	r3, r1, r5
   1370c:	clz	r3, r3
   13710:	lsr	r3, r3, #5
   13714:	moveq	r3, #0
   13718:	cmp	r3, #0
   1371c:	beq	13724 <__assert_fail@plt+0x1dbc>
   13720:	bl	11914 <abort@plt>
   13724:	cmp	r2, #0
   13728:	mov	r4, r0
   1372c:	beq	1374c <__assert_fail@plt+0x1de4>
   13730:	add	r0, r0, #60	; 0x3c
   13734:	bl	15d98 <__assert_fail@plt+0x4430>
   13738:	cmp	r0, #0
   1373c:	blt	13744 <__assert_fail@plt+0x1ddc>
   13740:	bl	11920 <close@plt>
   13744:	str	r5, [r4, #32]
   13748:	pop	{r4, r5, r6, pc}
   1374c:	ldr	r3, [r0, #48]	; 0x30
   13750:	lsr	r3, r3, #2
   13754:	eor	r3, r3, #1
   13758:	cmp	r1, #0
   1375c:	movlt	r3, #0
   13760:	andge	r3, r3, #1
   13764:	cmp	r3, #0
   13768:	beq	13744 <__assert_fail@plt+0x1ddc>
   1376c:	mov	r0, r1
   13770:	b	13740 <__assert_fail@plt+0x1dd8>
   13774:	ldr	r3, [r0, #48]	; 0x30
   13778:	push	{r4, r5, r6, lr}
   1377c:	ands	r4, r3, #4
   13780:	mov	r5, r0
   13784:	movne	r4, #0
   13788:	bne	137a0 <__assert_fail@plt+0x1e38>
   1378c:	tst	r3, #512	; 0x200
   13790:	beq	137b0 <__assert_fail@plt+0x1e48>
   13794:	mov	r2, #1
   13798:	mvn	r1, #99	; 0x63
   1379c:	bl	136f8 <__assert_fail@plt+0x1d90>
   137a0:	add	r0, r5, #60	; 0x3c
   137a4:	bl	135c0 <__assert_fail@plt+0x1c58>
   137a8:	mov	r0, r4
   137ac:	pop	{r4, r5, r6, pc}
   137b0:	ldr	r0, [r0, #28]
   137b4:	bl	11884 <fchdir@plt>
   137b8:	adds	r4, r0, #0
   137bc:	movne	r4, #1
   137c0:	b	137a0 <__assert_fail@plt+0x1e38>
   137c4:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   137c8:	subs	sl, r3, #0
   137cc:	sub	sp, sp, #104	; 0x68
   137d0:	mov	r7, r0
   137d4:	mov	r8, r1
   137d8:	mov	r6, r2
   137dc:	moveq	r9, sl
   137e0:	beq	137f8 <__assert_fail@plt+0x1e90>
   137e4:	ldr	r1, [pc, #368]	; 1395c <__assert_fail@plt+0x1ff4>
   137e8:	mov	r0, sl
   137ec:	bl	11548 <strcmp@plt>
   137f0:	clz	r9, r0
   137f4:	lsr	r9, r9, #5
   137f8:	ldr	r3, [r7, #48]	; 0x30
   137fc:	ands	r4, r3, #4
   13800:	beq	1382c <__assert_fail@plt+0x1ec4>
   13804:	mvn	r4, r6
   13808:	lsr	r4, r4, #31
   1380c:	ands	r4, r4, r3, lsr #9
   13810:	beq	13820 <__assert_fail@plt+0x1eb8>
   13814:	mov	r0, r6
   13818:	bl	11920 <close@plt>
   1381c:	mov	r4, #0
   13820:	mov	r0, r4
   13824:	add	sp, sp, #104	; 0x68
   13828:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1382c:	ands	r2, r9, r6, lsr #31
   13830:	beq	1391c <__assert_fail@plt+0x1fb4>
   13834:	tst	r3, #512	; 0x200
   13838:	bne	13858 <__assert_fail@plt+0x1ef0>
   1383c:	mov	r1, sl
   13840:	mov	r0, r7
   13844:	bl	13518 <__assert_fail@plt+0x1bb0>
   13848:	subs	r5, r0, #0
   1384c:	bge	13884 <__assert_fail@plt+0x1f1c>
   13850:	mvn	r4, #0
   13854:	b	13820 <__assert_fail@plt+0x1eb8>
   13858:	add	r5, r7, #60	; 0x3c
   1385c:	mov	r0, r5
   13860:	bl	15d90 <__assert_fail@plt+0x4428>
   13864:	cmp	r0, #0
   13868:	bne	1383c <__assert_fail@plt+0x1ed4>
   1386c:	mov	r0, r5
   13870:	bl	15ddc <__assert_fail@plt+0x4474>
   13874:	subs	r5, r0, #0
   13878:	movge	r6, r5
   1387c:	movge	sl, r4
   13880:	blt	1383c <__assert_fail@plt+0x1ed4>
   13884:	ldr	r3, [r7, #48]	; 0x30
   13888:	tst	r3, #2
   1388c:	bne	138ac <__assert_fail@plt+0x1f44>
   13890:	cmp	sl, #0
   13894:	beq	1392c <__assert_fail@plt+0x1fc4>
   13898:	ldr	r1, [pc, #188]	; 1395c <__assert_fail@plt+0x1ff4>
   1389c:	mov	r0, sl
   138a0:	bl	11548 <strcmp@plt>
   138a4:	cmp	r0, #0
   138a8:	bne	1392c <__assert_fail@plt+0x1fc4>
   138ac:	mov	r1, sp
   138b0:	mov	r0, r5
   138b4:	bl	19948 <lchmod@@Base+0x3b24>
   138b8:	cmp	r0, #0
   138bc:	bne	138f4 <__assert_fail@plt+0x1f8c>
   138c0:	ldrd	r0, [r8, #64]	; 0x40
   138c4:	ldrd	r2, [sp]
   138c8:	cmp	r1, r3
   138cc:	cmpeq	r0, r2
   138d0:	bne	138e8 <__assert_fail@plt+0x1f80>
   138d4:	ldrd	r0, [r8, #160]	; 0xa0
   138d8:	ldrd	r2, [sp, #96]	; 0x60
   138dc:	cmp	r1, r3
   138e0:	cmpeq	r0, r2
   138e4:	beq	1392c <__assert_fail@plt+0x1fc4>
   138e8:	bl	117a0 <__errno_location@plt>
   138ec:	mov	r3, #2
   138f0:	str	r3, [r0]
   138f4:	mvn	r4, #0
   138f8:	cmp	r6, #0
   138fc:	bge	13820 <__assert_fail@plt+0x1eb8>
   13900:	bl	117a0 <__errno_location@plt>
   13904:	ldr	r7, [r0]
   13908:	mov	r6, r0
   1390c:	mov	r0, r5
   13910:	bl	11920 <close@plt>
   13914:	str	r7, [r6]
   13918:	b	13820 <__assert_fail@plt+0x1eb8>
   1391c:	cmp	r6, #0
   13920:	movge	r5, r6
   13924:	bge	13884 <__assert_fail@plt+0x1f1c>
   13928:	b	1383c <__assert_fail@plt+0x1ed4>
   1392c:	ldr	r3, [r7, #48]	; 0x30
   13930:	tst	r3, #512	; 0x200
   13934:	beq	1394c <__assert_fail@plt+0x1fe4>
   13938:	eor	r2, r9, #1
   1393c:	mov	r1, r5
   13940:	mov	r0, r7
   13944:	bl	136f8 <__assert_fail@plt+0x1d90>
   13948:	b	13820 <__assert_fail@plt+0x1eb8>
   1394c:	mov	r0, r5
   13950:	bl	11884 <fchdir@plt>
   13954:	mov	r4, r0
   13958:	b	138f8 <__assert_fail@plt+0x1f90>
   1395c:	muleq	r1, r6, r2
   13960:	ldr	r2, [r0, #48]	; 0x30
   13964:	ldr	r3, [pc, #164]	; 13a10 <__assert_fail@plt+0x20a8>
   13968:	push	{r4, r5, r6, r7, lr}
   1396c:	and	r3, r3, r2
   13970:	cmp	r3, #0
   13974:	sub	sp, sp, #28
   13978:	beq	139b0 <__assert_fail@plt+0x2048>
   1397c:	ldrd	r4, [r1, #64]	; 0x40
   13980:	ldrd	r2, [r1, #160]	; 0xa0
   13984:	ldr	r0, [r0, #56]	; 0x38
   13988:	mov	r1, sp
   1398c:	strd	r4, [sp]
   13990:	strd	r2, [sp, #8]
   13994:	bl	15bc8 <__assert_fail@plt+0x4260>
   13998:	cmp	r0, #0
   1399c:	bne	139a4 <__assert_fail@plt+0x203c>
   139a0:	bl	11914 <abort@plt>
   139a4:	bl	13188 <__assert_fail@plt+0x1820>
   139a8:	add	sp, sp, #28
   139ac:	pop	{r4, r5, r6, r7, pc}
   139b0:	ldr	ip, [r1, #4]
   139b4:	cmp	ip, #0
   139b8:	beq	139a8 <__assert_fail@plt+0x2040>
   139bc:	ldr	r3, [ip, #48]	; 0x30
   139c0:	cmp	r3, #0
   139c4:	blt	139a8 <__assert_fail@plt+0x2040>
   139c8:	ldr	r3, [r0, #56]	; 0x38
   139cc:	ldrd	r4, [r3, #16]
   139d0:	orrs	r2, r4, r5
   139d4:	beq	139a0 <__assert_fail@plt+0x2038>
   139d8:	ldrd	r4, [r3]
   139dc:	ldrd	r6, [r1, #160]	; 0xa0
   139e0:	cmp	r5, r7
   139e4:	cmpeq	r4, r6
   139e8:	bne	139a8 <__assert_fail@plt+0x2040>
   139ec:	ldrd	r6, [r3, #8]
   139f0:	ldrd	r4, [r1, #64]	; 0x40
   139f4:	cmp	r7, r5
   139f8:	cmpeq	r6, r4
   139fc:	ldrdeq	r0, [ip, #64]	; 0x40
   13a00:	strdeq	r0, [r3, #8]
   13a04:	ldrdeq	r0, [ip, #160]	; 0xa0
   13a08:	strdeq	r0, [r3]
   13a0c:	b	139a8 <__assert_fail@plt+0x2040>
   13a10:	andeq	r0, r0, r2, lsl #2
   13a14:	ldr	r3, [r0, #36]	; 0x24
   13a18:	add	r1, r1, #256	; 0x100
   13a1c:	adds	r1, r1, r3
   13a20:	push	{r4, r5, r6, lr}
   13a24:	mov	r5, r0
   13a28:	bcc	13a50 <__assert_fail@plt+0x20e8>
   13a2c:	ldr	r0, [r0, #24]
   13a30:	mov	r4, #0
   13a34:	bl	13188 <__assert_fail@plt+0x1820>
   13a38:	str	r4, [r5, #24]
   13a3c:	bl	117a0 <__errno_location@plt>
   13a40:	mov	r3, #36	; 0x24
   13a44:	str	r3, [r0]
   13a48:	mov	r0, r4
   13a4c:	pop	{r4, r5, r6, pc}
   13a50:	str	r1, [r0, #36]	; 0x24
   13a54:	ldr	r0, [r0, #24]
   13a58:	bl	18b68 <lchmod@@Base+0x2d44>
   13a5c:	subs	r4, r0, #0
   13a60:	bne	13a74 <__assert_fail@plt+0x210c>
   13a64:	ldr	r0, [r5, #24]
   13a68:	bl	13188 <__assert_fail@plt+0x1820>
   13a6c:	str	r4, [r5, #24]
   13a70:	b	13a48 <__assert_fail@plt+0x20e0>
   13a74:	str	r4, [r5, #24]
   13a78:	mov	r0, #1
   13a7c:	pop	{r4, r5, r6, pc}
   13a80:	ldr	r2, [r0, #48]	; 0x30
   13a84:	ldr	r3, [pc, #96]	; 13aec <__assert_fail@plt+0x2184>
   13a88:	push	{r0, r1, r4, lr}
   13a8c:	and	r3, r3, r2
   13a90:	cmp	r3, #0
   13a94:	mov	r4, r0
   13a98:	beq	13acc <__assert_fail@plt+0x2164>
   13a9c:	ldr	r3, [pc, #76]	; 13af0 <__assert_fail@plt+0x2188>
   13aa0:	ldr	r2, [pc, #76]	; 13af4 <__assert_fail@plt+0x218c>
   13aa4:	str	r3, [sp]
   13aa8:	mov	r1, #0
   13aac:	ldr	r3, [pc, #68]	; 13af8 <__assert_fail@plt+0x2190>
   13ab0:	mov	r0, #31
   13ab4:	bl	156c4 <__assert_fail@plt+0x3d5c>
   13ab8:	str	r0, [r4, #56]	; 0x38
   13abc:	adds	r0, r0, #0
   13ac0:	movne	r0, #1
   13ac4:	add	sp, sp, #8
   13ac8:	pop	{r4, pc}
   13acc:	mov	r0, #32
   13ad0:	bl	18b28 <lchmod@@Base+0x2d04>
   13ad4:	cmp	r0, #0
   13ad8:	str	r0, [r4, #56]	; 0x38
   13adc:	beq	13ac4 <__assert_fail@plt+0x215c>
   13ae0:	bl	18cc4 <lchmod@@Base+0x2ea0>
   13ae4:	mov	r0, #1
   13ae8:	b	13ac4 <__assert_fail@plt+0x215c>
   13aec:	andeq	r0, r0, r2, lsl #2
   13af0:	andeq	r3, r1, r8, lsl #3
   13af4:	andeq	r3, r1, r8, lsl r2
   13af8:	ldrdeq	r3, [r1], -ip
   13afc:	ldr	r2, [r0, #48]	; 0x30
   13b00:	ldr	r3, [pc, #168]	; 13bb0 <__assert_fail@plt+0x2248>
   13b04:	push	{r4, r5, r6, lr}
   13b08:	and	r3, r3, r2
   13b0c:	cmp	r3, #0
   13b10:	mov	r6, r0
   13b14:	mov	r4, r1
   13b18:	beq	13b8c <__assert_fail@plt+0x2224>
   13b1c:	mov	r0, #24
   13b20:	bl	18b28 <lchmod@@Base+0x2d04>
   13b24:	subs	r5, r0, #0
   13b28:	bne	13b34 <__assert_fail@plt+0x21cc>
   13b2c:	mov	r0, #0
   13b30:	pop	{r4, r5, r6, pc}
   13b34:	ldrd	r2, [r4, #64]	; 0x40
   13b38:	ldr	r0, [r6, #56]	; 0x38
   13b3c:	str	r4, [r5, #16]
   13b40:	strd	r2, [r5]
   13b44:	ldrd	r2, [r4, #160]	; 0xa0
   13b48:	mov	r1, r5
   13b4c:	strd	r2, [r5, #8]
   13b50:	bl	15b98 <__assert_fail@plt+0x4230>
   13b54:	cmp	r5, r0
   13b58:	mov	r6, r0
   13b5c:	bne	13b68 <__assert_fail@plt+0x2200>
   13b60:	mov	r0, #1
   13b64:	pop	{r4, r5, r6, pc}
   13b68:	mov	r0, r5
   13b6c:	bl	13188 <__assert_fail@plt+0x1820>
   13b70:	cmp	r6, #0
   13b74:	beq	13b2c <__assert_fail@plt+0x21c4>
   13b78:	ldr	r3, [r6, #16]
   13b7c:	str	r3, [r4]
   13b80:	mov	r3, #2
   13b84:	strh	r3, [r4, #56]	; 0x38
   13b88:	b	13b60 <__assert_fail@plt+0x21f8>
   13b8c:	add	r1, r1, #64	; 0x40
   13b90:	ldr	r0, [r0, #56]	; 0x38
   13b94:	bl	18ce0 <lchmod@@Base+0x2ebc>
   13b98:	cmp	r0, #0
   13b9c:	beq	13b60 <__assert_fail@plt+0x21f8>
   13ba0:	mov	r3, #2
   13ba4:	str	r4, [r4]
   13ba8:	strh	r3, [r4, #56]	; 0x38
   13bac:	pop	{r4, r5, r6, pc}
   13bb0:	andeq	r0, r0, r2, lsl #2
   13bb4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13bb8:	sub	sp, sp, #60	; 0x3c
   13bbc:	ldr	r5, [r0]
   13bc0:	mov	r4, r0
   13bc4:	str	r1, [sp, #8]
   13bc8:	ldr	r3, [r5, #12]
   13bcc:	cmp	r3, #0
   13bd0:	str	r3, [sp, #4]
   13bd4:	beq	13c28 <__assert_fail@plt+0x22c0>
   13bd8:	mov	r0, r3
   13bdc:	bl	11878 <dirfd@plt>
   13be0:	cmp	r0, #0
   13be4:	str	r0, [sp, #52]	; 0x34
   13be8:	bge	13c9c <__assert_fail@plt+0x2334>
   13bec:	ldr	r0, [r5, #12]
   13bf0:	mov	r6, #0
   13bf4:	bl	11950 <closedir@plt>
   13bf8:	str	r6, [r5, #12]
   13bfc:	ldr	r3, [sp, #8]
   13c00:	cmp	r3, #3
   13c04:	bne	13dc8 <__assert_fail@plt+0x2460>
   13c08:	mov	r3, #4
   13c0c:	strh	r3, [r5, #56]	; 0x38
   13c10:	bl	117a0 <__errno_location@plt>
   13c14:	ldr	r3, [r0]
   13c18:	str	r3, [r5, #32]
   13c1c:	mov	r0, r6
   13c20:	add	sp, sp, #60	; 0x3c
   13c24:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13c28:	ldr	r3, [r0, #48]	; 0x30
   13c2c:	ldr	r1, [r5, #24]
   13c30:	and	r2, r3, #516	; 0x204
   13c34:	cmp	r2, #512	; 0x200
   13c38:	mvnne	r0, #99	; 0x63
   13c3c:	ldreq	r0, [r0, #32]
   13c40:	ands	r2, r3, #16
   13c44:	beq	13c64 <__assert_fail@plt+0x22fc>
   13c48:	tst	r3, #1
   13c4c:	moveq	r2, #32768	; 0x8000
   13c50:	beq	13c64 <__assert_fail@plt+0x22fc>
   13c54:	ldr	r2, [r5, #48]	; 0x30
   13c58:	cmp	r2, #0
   13c5c:	movne	r2, #32768	; 0x8000
   13c60:	moveq	r2, #0
   13c64:	add	r3, sp, #52	; 0x34
   13c68:	bl	163c0 <lchmod@@Base+0x59c>
   13c6c:	cmp	r0, #0
   13c70:	mov	r6, r0
   13c74:	str	r0, [r5, #12]
   13c78:	beq	13bfc <__assert_fail@plt+0x2294>
   13c7c:	ldrh	r3, [r5, #56]	; 0x38
   13c80:	cmp	r3, #11
   13c84:	bne	13dd0 <__assert_fail@plt+0x2468>
   13c88:	mov	r2, #0
   13c8c:	mov	r1, r5
   13c90:	mov	r0, r4
   13c94:	bl	132a4 <__assert_fail@plt+0x193c>
   13c98:	strh	r0, [r5, #56]	; 0x38
   13c9c:	ldr	r3, [r4, #44]	; 0x2c
   13ca0:	cmp	r3, #0
   13ca4:	ldr	r3, [pc, #1824]	; 143cc <__assert_fail@plt+0x2a64>
   13ca8:	mvnne	r3, #0
   13cac:	str	r3, [sp, #36]	; 0x24
   13cb0:	ldr	r3, [sp, #4]
   13cb4:	cmp	r3, #0
   13cb8:	beq	13e1c <__assert_fail@plt+0x24b4>
   13cbc:	mov	r3, #1
   13cc0:	str	r3, [sp, #20]
   13cc4:	ldr	fp, [r5, #40]	; 0x28
   13cc8:	ldr	r2, [r5, #28]
   13ccc:	sub	r3, fp, #1
   13cd0:	mov	r9, #0
   13cd4:	ldrb	r2, [r2, r3]
   13cd8:	mov	r8, r9
   13cdc:	mov	r6, r9
   13ce0:	cmp	r2, #47	; 0x2f
   13ce4:	moveq	fp, r3
   13ce8:	ldr	r3, [r4, #48]	; 0x30
   13cec:	str	r9, [sp, #24]
   13cf0:	ands	r3, r3, #4
   13cf4:	streq	r3, [sp]
   13cf8:	ldrne	r3, [r4, #24]
   13cfc:	str	r9, [sp, #32]
   13d00:	addne	r2, r3, fp
   13d04:	addne	r2, r2, #1
   13d08:	strne	r2, [sp]
   13d0c:	movne	r2, #47	; 0x2f
   13d10:	strbne	r2, [r3, fp]
   13d14:	add	r3, fp, #1
   13d18:	str	r3, [sp, #16]
   13d1c:	ldr	r3, [r4, #36]	; 0x24
   13d20:	add	r2, fp, #1
   13d24:	sub	r3, r3, r2
   13d28:	str	r3, [sp, #28]
   13d2c:	ldr	r3, [r5, #48]	; 0x30
   13d30:	add	r3, r3, #1
   13d34:	str	r3, [sp, #40]	; 0x28
   13d38:	ldr	r7, [r5, #12]
   13d3c:	cmp	r7, #0
   13d40:	bne	13f60 <__assert_fail@plt+0x25f8>
   13d44:	ldr	r3, [sp, #24]
   13d48:	cmp	r3, #0
   13d4c:	bne	1428c <__assert_fail@plt+0x2924>
   13d50:	ldr	r3, [r4, #48]	; 0x30
   13d54:	tst	r3, #4
   13d58:	bne	14308 <__assert_fail@plt+0x29a0>
   13d5c:	ldr	r3, [sp, #20]
   13d60:	ldr	r2, [sp, #4]
   13d64:	cmp	r2, #0
   13d68:	movne	r3, #0
   13d6c:	andeq	r3, r3, #1
   13d70:	cmp	r3, #0
   13d74:	beq	1434c <__assert_fail@plt+0x29e4>
   13d78:	ldr	r3, [sp, #8]
   13d7c:	cmp	r8, #0
   13d80:	cmpne	r3, #1
   13d84:	bne	14378 <__assert_fail@plt+0x2a10>
   13d88:	ldr	r3, [r5, #48]	; 0x30
   13d8c:	cmp	r3, #0
   13d90:	bne	14334 <__assert_fail@plt+0x29cc>
   13d94:	mov	r0, r4
   13d98:	bl	13774 <__assert_fail@plt+0x1e0c>
   13d9c:	adds	r0, r0, #0
   13da0:	movne	r0, #1
   13da4:	cmp	r0, #0
   13da8:	beq	1434c <__assert_fail@plt+0x29e4>
   13dac:	mov	r3, #7
   13db0:	strh	r3, [r5, #56]	; 0x38
   13db4:	ldr	r3, [r4, #48]	; 0x30
   13db8:	orr	r3, r3, #8192	; 0x2000
   13dbc:	str	r3, [r4, #48]	; 0x30
   13dc0:	mov	r0, r6
   13dc4:	bl	1355c <__assert_fail@plt+0x1bf4>
   13dc8:	mov	r6, #0
   13dcc:	b	13c1c <__assert_fail@plt+0x22b4>
   13dd0:	ldr	r3, [r4, #48]	; 0x30
   13dd4:	tst	r3, #256	; 0x100
   13dd8:	beq	13c9c <__assert_fail@plt+0x2334>
   13ddc:	mov	r1, r5
   13de0:	mov	r0, r4
   13de4:	bl	13960 <__assert_fail@plt+0x1ff8>
   13de8:	mov	r2, #0
   13dec:	mov	r1, r5
   13df0:	mov	r0, r4
   13df4:	bl	132a4 <__assert_fail@plt+0x193c>
   13df8:	mov	r1, r5
   13dfc:	mov	r0, r4
   13e00:	bl	13afc <__assert_fail@plt+0x2194>
   13e04:	subs	r6, r0, #0
   13e08:	bne	13c9c <__assert_fail@plt+0x2334>
   13e0c:	bl	117a0 <__errno_location@plt>
   13e10:	mov	r3, #12
   13e14:	str	r3, [r0]
   13e18:	b	13c1c <__assert_fail@plt+0x22b4>
   13e1c:	ldr	r3, [sp, #8]
   13e20:	cmp	r3, #2
   13e24:	beq	13e74 <__assert_fail@plt+0x250c>
   13e28:	ldr	r3, [r4, #48]	; 0x30
   13e2c:	and	r3, r3, #56	; 0x38
   13e30:	cmp	r3, #24
   13e34:	bne	13f2c <__assert_fail@plt+0x25c4>
   13e38:	ldr	r3, [r5, #84]	; 0x54
   13e3c:	cmp	r3, #2
   13e40:	bne	13f2c <__assert_fail@plt+0x25c4>
   13e44:	ldr	r1, [sp, #52]	; 0x34
   13e48:	mov	r0, r5
   13e4c:	bl	135f4 <__assert_fail@plt+0x1c8c>
   13e50:	ldr	r3, [pc, #1400]	; 143d0 <__assert_fail@plt+0x2a68>
   13e54:	cmp	r0, r3
   13e58:	beq	13f2c <__assert_fail@plt+0x25c4>
   13e5c:	bgt	13f14 <__assert_fail@plt+0x25ac>
   13e60:	ldr	r3, [pc, #1388]	; 143d4 <__assert_fail@plt+0x2a6c>
   13e64:	cmp	r0, r3
   13e68:	beq	13f2c <__assert_fail@plt+0x25c4>
   13e6c:	cmp	r0, #0
   13e70:	beq	13f2c <__assert_fail@plt+0x25c4>
   13e74:	mov	r3, #0
   13e78:	mov	r6, r3
   13e7c:	ldr	r3, [sp, #8]
   13e80:	sub	r7, r3, #3
   13e84:	clz	r7, r7
   13e88:	lsr	r7, r7, #5
   13e8c:	orrs	r3, r6, r7
   13e90:	str	r3, [sp, #20]
   13e94:	beq	13cc4 <__assert_fail@plt+0x235c>
   13e98:	ldr	r3, [r4, #48]	; 0x30
   13e9c:	tst	r3, #512	; 0x200
   13ea0:	beq	13eb8 <__assert_fail@plt+0x2550>
   13ea4:	mov	r2, #3
   13ea8:	ldr	r1, [pc, #1320]	; 143d8 <__assert_fail@plt+0x2a70>
   13eac:	ldr	r0, [sp, #52]	; 0x34
   13eb0:	bl	18e38 <lchmod@@Base+0x3014>
   13eb4:	str	r0, [sp, #52]	; 0x34
   13eb8:	ldr	r2, [sp, #52]	; 0x34
   13ebc:	cmp	r2, #0
   13ec0:	bge	13f34 <__assert_fail@plt+0x25cc>
   13ec4:	tst	r6, r7
   13ec8:	bne	13f50 <__assert_fail@plt+0x25e8>
   13ecc:	ldrh	r3, [r5, #58]	; 0x3a
   13ed0:	ldr	r0, [r5, #12]
   13ed4:	orr	r3, r3, #1
   13ed8:	strh	r3, [r5, #58]	; 0x3a
   13edc:	bl	11950 <closedir@plt>
   13ee0:	ldr	r2, [r4, #48]	; 0x30
   13ee4:	mov	r3, #0
   13ee8:	tst	r2, #512	; 0x200
   13eec:	str	r3, [r5, #12]
   13ef0:	mov	r6, r3
   13ef4:	beq	13f08 <__assert_fail@plt+0x25a0>
   13ef8:	ldr	r0, [sp, #52]	; 0x34
   13efc:	cmp	r0, r3
   13f00:	blt	13f08 <__assert_fail@plt+0x25a0>
   13f04:	bl	11920 <close@plt>
   13f08:	str	r6, [r5, #12]
   13f0c:	mov	r3, #0
   13f10:	b	13cc0 <__assert_fail@plt+0x2358>
   13f14:	ldr	r3, [pc, #1216]	; 143dc <__assert_fail@plt+0x2a74>
   13f18:	cmp	r0, r3
   13f1c:	beq	13f2c <__assert_fail@plt+0x25c4>
   13f20:	ldr	r3, [pc, #1208]	; 143e0 <__assert_fail@plt+0x2a78>
   13f24:	cmp	r0, r3
   13f28:	b	13e70 <__assert_fail@plt+0x2508>
   13f2c:	mov	r3, #1
   13f30:	b	13e78 <__assert_fail@plt+0x2510>
   13f34:	mov	r3, #0
   13f38:	mov	r1, r5
   13f3c:	mov	r0, r4
   13f40:	bl	137c4 <__assert_fail@plt+0x1e5c>
   13f44:	cmp	r0, #0
   13f48:	bne	13ec4 <__assert_fail@plt+0x255c>
   13f4c:	b	13cbc <__assert_fail@plt+0x2354>
   13f50:	bl	117a0 <__errno_location@plt>
   13f54:	ldr	r3, [r0]
   13f58:	str	r3, [r5, #32]
   13f5c:	b	13ecc <__assert_fail@plt+0x2564>
   13f60:	bl	117a0 <__errno_location@plt>
   13f64:	mov	r3, #0
   13f68:	str	r0, [sp, #12]
   13f6c:	str	r3, [r0]
   13f70:	mov	r0, r7
   13f74:	bl	11854 <readdir64@plt>
   13f78:	subs	sl, r0, #0
   13f7c:	bne	13fc8 <__assert_fail@plt+0x2660>
   13f80:	ldr	r3, [sp, #12]
   13f84:	ldr	r3, [r3]
   13f88:	cmp	r3, #0
   13f8c:	beq	13fac <__assert_fail@plt+0x2644>
   13f90:	str	r3, [r5, #32]
   13f94:	ldr	r3, [sp, #4]
   13f98:	cmp	r8, #0
   13f9c:	cmpeq	r3, #0
   13fa0:	moveq	r3, #4
   13fa4:	movne	r3, #7
   13fa8:	strh	r3, [r5, #56]	; 0x38
   13fac:	ldr	r0, [r5, #12]
   13fb0:	cmp	r0, #0
   13fb4:	beq	13d44 <__assert_fail@plt+0x23dc>
   13fb8:	bl	11950 <closedir@plt>
   13fbc:	mov	r3, #0
   13fc0:	str	r3, [r5, #12]
   13fc4:	b	13d44 <__assert_fail@plt+0x23dc>
   13fc8:	ldr	r3, [r4, #48]	; 0x30
   13fcc:	tst	r3, #32
   13fd0:	bne	13ff8 <__assert_fail@plt+0x2690>
   13fd4:	ldrb	r3, [sl, #19]
   13fd8:	cmp	r3, #46	; 0x2e
   13fdc:	bne	13ff8 <__assert_fail@plt+0x2690>
   13fe0:	ldrb	r3, [sl, #20]
   13fe4:	cmp	r3, #0
   13fe8:	beq	13d38 <__assert_fail@plt+0x23d0>
   13fec:	ldrh	r3, [sl, #20]
   13ff0:	cmp	r3, #46	; 0x2e
   13ff4:	beq	13d38 <__assert_fail@plt+0x23d0>
   13ff8:	add	r7, sl, #19
   13ffc:	mov	r0, r7
   14000:	bl	11764 <strlen@plt>
   14004:	mov	r1, r7
   14008:	mov	r2, r0
   1400c:	str	r0, [sp, #44]	; 0x2c
   14010:	mov	r0, r4
   14014:	bl	134a4 <__assert_fail@plt+0x1b3c>
   14018:	subs	r7, r0, #0
   1401c:	beq	1405c <__assert_fail@plt+0x26f4>
   14020:	ldr	r2, [sp, #28]
   14024:	ldr	r3, [sp, #44]	; 0x2c
   14028:	cmp	r2, r3
   1402c:	bhi	140dc <__assert_fail@plt+0x2774>
   14030:	ldr	r2, [r4, #24]
   14034:	add	r1, fp, #2
   14038:	add	r1, r1, r3
   1403c:	mov	r0, r4
   14040:	str	r2, [sp, #44]	; 0x2c
   14044:	str	r3, [sp, #28]
   14048:	bl	13a14 <__assert_fail@plt+0x20ac>
   1404c:	ldr	r3, [sp, #28]
   14050:	ldr	r2, [sp, #44]	; 0x2c
   14054:	cmp	r0, #0
   14058:	bne	140a4 <__assert_fail@plt+0x273c>
   1405c:	ldr	r3, [sp, #12]
   14060:	mov	r0, r7
   14064:	ldr	r8, [r3]
   14068:	bl	13188 <__assert_fail@plt+0x1820>
   1406c:	mov	r0, r6
   14070:	bl	1355c <__assert_fail@plt+0x1bf4>
   14074:	ldr	r0, [r5, #12]
   14078:	bl	11950 <closedir@plt>
   1407c:	mov	r3, #7
   14080:	strh	r3, [r5, #56]	; 0x38
   14084:	ldr	r3, [r4, #48]	; 0x30
   14088:	mov	r6, #0
   1408c:	orr	r3, r3, #8192	; 0x2000
   14090:	str	r6, [r5, #12]
   14094:	str	r3, [r4, #48]	; 0x30
   14098:	ldr	r3, [sp, #12]
   1409c:	str	r8, [r3]
   140a0:	b	13c1c <__assert_fail@plt+0x22b4>
   140a4:	ldr	r1, [r4, #24]
   140a8:	cmp	r2, r1
   140ac:	ldreq	r0, [sp, #24]
   140b0:	beq	140c8 <__assert_fail@plt+0x2760>
   140b4:	ldr	r2, [r4, #48]	; 0x30
   140b8:	tst	r2, #4
   140bc:	ldrne	r2, [sp, #16]
   140c0:	addne	r2, r1, r2
   140c4:	strne	r2, [sp]
   140c8:	ldr	r2, [r4, #36]	; 0x24
   140cc:	ldr	r1, [sp, #16]
   140d0:	str	r0, [sp, #24]
   140d4:	sub	r2, r2, r1
   140d8:	str	r2, [sp, #28]
   140dc:	ldr	r2, [sp, #16]
   140e0:	adds	r3, r2, r3
   140e4:	bcc	1412c <__assert_fail@plt+0x27c4>
   140e8:	mov	r0, r7
   140ec:	bl	13188 <__assert_fail@plt+0x1820>
   140f0:	mov	r0, r6
   140f4:	bl	1355c <__assert_fail@plt+0x1bf4>
   140f8:	ldr	r0, [r5, #12]
   140fc:	bl	11950 <closedir@plt>
   14100:	mov	r3, #7
   14104:	strh	r3, [r5, #56]	; 0x38
   14108:	ldr	r3, [r4, #48]	; 0x30
   1410c:	ldr	r2, [sp, #12]
   14110:	orr	r3, r3, #8192	; 0x2000
   14114:	mov	r6, #0
   14118:	str	r6, [r5, #12]
   1411c:	str	r3, [r4, #48]	; 0x30
   14120:	mov	r3, #36	; 0x24
   14124:	str	r3, [r2]
   14128:	b	13c1c <__assert_fail@plt+0x22b4>
   1412c:	ldr	r2, [sp, #40]	; 0x28
   14130:	str	r2, [r7, #48]	; 0x30
   14134:	ldr	r2, [r4]
   14138:	str	r3, [r7, #40]	; 0x28
   1413c:	str	r2, [r7, #4]
   14140:	ldrd	r2, [sl]
   14144:	strd	r2, [r7, #160]	; 0xa0
   14148:	ldr	r3, [r4, #48]	; 0x30
   1414c:	tst	r3, #4
   14150:	addeq	r3, r7, #168	; 0xa8
   14154:	streq	r3, [r7, #24]
   14158:	beq	14178 <__assert_fail@plt+0x2810>
   1415c:	ldr	r3, [r7, #28]
   14160:	ldr	r2, [r7, #52]	; 0x34
   14164:	str	r3, [r7, #24]
   14168:	add	r2, r2, #1
   1416c:	add	r1, r7, #168	; 0xa8
   14170:	ldr	r0, [sp]
   14174:	bl	11584 <memmove@plt>
   14178:	ldr	r3, [r4, #44]	; 0x2c
   1417c:	cmp	r3, #0
   14180:	beq	14190 <__assert_fail@plt+0x2828>
   14184:	ldr	r2, [r4, #48]	; 0x30
   14188:	ands	r2, r2, #1024	; 0x400
   1418c:	beq	14278 <__assert_fail@plt+0x2910>
   14190:	ldr	r3, [r4, #48]	; 0x30
   14194:	ands	r1, r3, #8
   14198:	beq	141bc <__assert_fail@plt+0x2854>
   1419c:	ldrb	r2, [sl, #18]
   141a0:	ands	r1, r2, #251	; 0xfb
   141a4:	beq	141bc <__assert_fail@plt+0x2854>
   141a8:	lsr	r3, r3, #4
   141ac:	and	r3, r3, #1
   141b0:	cmp	r2, #10
   141b4:	moveq	r1, r3
   141b8:	orrne	r1, r3, #1
   141bc:	mov	r3, #11
   141c0:	strh	r3, [r7, #56]	; 0x38
   141c4:	ldrb	r2, [sl, #18]
   141c8:	sub	r2, r2, #1
   141cc:	cmp	r2, r3
   141d0:	lslls	r2, r2, #1
   141d4:	ldrls	r3, [pc, #520]	; 143e4 <__assert_fail@plt+0x2a7c>
   141d8:	movhi	r3, #0
   141dc:	ldrhls	r3, [r3, r2]
   141e0:	cmp	r1, #0
   141e4:	movne	r2, #1
   141e8:	str	r3, [r7, #80]	; 0x50
   141ec:	moveq	r2, #2
   141f0:	mov	r3, #0
   141f4:	strd	r2, [r7, #112]	; 0x70
   141f8:	mov	r3, #0
   141fc:	cmp	r6, r3
   14200:	str	r3, [r7, #8]
   14204:	ldrne	r3, [sp, #32]
   14208:	moveq	r6, r7
   1420c:	strne	r7, [r3, #8]
   14210:	ldr	r3, [pc, #464]	; 143e8 <__assert_fail@plt+0x2a80>
   14214:	cmp	r8, r3
   14218:	bne	14260 <__assert_fail@plt+0x28f8>
   1421c:	ldr	r3, [r4, #44]	; 0x2c
   14220:	cmp	r3, #0
   14224:	bne	14260 <__assert_fail@plt+0x28f8>
   14228:	ldr	r1, [sp, #52]	; 0x34
   1422c:	mov	r0, r5
   14230:	bl	135f4 <__assert_fail@plt+0x1c8c>
   14234:	ldr	r3, [pc, #404]	; 143d0 <__assert_fail@plt+0x2a68>
   14238:	cmp	r0, r3
   1423c:	beq	1425c <__assert_fail@plt+0x28f4>
   14240:	ldr	r3, [pc, #420]	; 143ec <__assert_fail@plt+0x2a84>
   14244:	cmp	r0, r3
   14248:	beq	1425c <__assert_fail@plt+0x28f4>
   1424c:	ldr	r3, [pc, #384]	; 143d4 <__assert_fail@plt+0x2a6c>
   14250:	cmp	r0, r3
   14254:	movne	r9, #1
   14258:	bne	14260 <__assert_fail@plt+0x28f8>
   1425c:	mov	r9, #0
   14260:	ldr	r3, [sp, #36]	; 0x24
   14264:	add	r8, r8, #1
   14268:	cmp	r3, r8
   1426c:	bls	13d44 <__assert_fail@plt+0x23dc>
   14270:	str	r7, [sp, #32]
   14274:	b	13d38 <__assert_fail@plt+0x23d0>
   14278:	mov	r1, r7
   1427c:	mov	r0, r4
   14280:	bl	132a4 <__assert_fail@plt+0x193c>
   14284:	strh	r0, [r7, #56]	; 0x38
   14288:	b	141f8 <__assert_fail@plt+0x2890>
   1428c:	ldr	r1, [r4, #24]
   14290:	ldr	r3, [r4, #4]
   14294:	cmp	r3, #0
   14298:	bne	142e0 <__assert_fail@plt+0x2978>
   1429c:	mov	r3, r6
   142a0:	ldr	r2, [r3, #48]	; 0x30
   142a4:	cmp	r2, #0
   142a8:	blt	13d50 <__assert_fail@plt+0x23e8>
   142ac:	ldr	r2, [r3, #24]
   142b0:	add	r0, r3, #168	; 0xa8
   142b4:	cmp	r2, r0
   142b8:	ldrne	r0, [r3, #28]
   142bc:	str	r1, [r3, #28]
   142c0:	subne	r2, r2, r0
   142c4:	addne	r2, r1, r2
   142c8:	strne	r2, [r3, #24]
   142cc:	ldr	r2, [r3, #8]
   142d0:	cmp	r2, #0
   142d4:	ldreq	r2, [r3, #4]
   142d8:	mov	r3, r2
   142dc:	b	142a0 <__assert_fail@plt+0x2938>
   142e0:	ldr	r2, [r3, #24]
   142e4:	add	r0, r3, #168	; 0xa8
   142e8:	cmp	r2, r0
   142ec:	ldrne	r0, [r3, #28]
   142f0:	str	r1, [r3, #28]
   142f4:	subne	r2, r2, r0
   142f8:	addne	r2, r1, r2
   142fc:	strne	r2, [r3, #24]
   14300:	ldr	r3, [r3, #8]
   14304:	b	14294 <__assert_fail@plt+0x292c>
   14308:	ldr	r3, [r4, #36]	; 0x24
   1430c:	ldr	r2, [sp, #16]
   14310:	cmp	r8, #0
   14314:	cmpne	r3, r2
   14318:	ldreq	r3, [sp]
   1431c:	subeq	r3, r3, #1
   14320:	streq	r3, [sp]
   14324:	ldr	r2, [sp]
   14328:	mov	r3, #0
   1432c:	strb	r3, [r2]
   14330:	b	13d5c <__assert_fail@plt+0x23f4>
   14334:	ldr	r3, [pc, #180]	; 143f0 <__assert_fail@plt+0x2a88>
   14338:	mvn	r2, #0
   1433c:	ldr	r1, [r5, #4]
   14340:	mov	r0, r4
   14344:	bl	137c4 <__assert_fail@plt+0x1e5c>
   14348:	b	13d9c <__assert_fail@plt+0x2434>
   1434c:	cmp	r8, #0
   14350:	bne	14378 <__assert_fail@plt+0x2a10>
   14354:	ldr	r3, [sp, #8]
   14358:	cmp	r3, #3
   1435c:	bne	13dc0 <__assert_fail@plt+0x2458>
   14360:	ldrh	r3, [r5, #56]	; 0x38
   14364:	cmp	r3, #4
   14368:	cmpne	r3, #7
   1436c:	movne	r3, #6
   14370:	strhne	r3, [r5, #56]	; 0x38
   14374:	b	13dc0 <__assert_fail@plt+0x2458>
   14378:	cmp	r9, #0
   1437c:	beq	143a4 <__assert_fail@plt+0x2a3c>
   14380:	ldr	r3, [pc, #108]	; 143f4 <__assert_fail@plt+0x2a8c>
   14384:	mov	r1, r6
   14388:	str	r3, [r4, #44]	; 0x2c
   1438c:	mov	r2, r8
   14390:	mov	r0, r4
   14394:	bl	133dc <__assert_fail@plt+0x1a74>
   14398:	mov	r3, #0
   1439c:	str	r3, [r4, #44]	; 0x2c
   143a0:	mov	r6, r0
   143a4:	ldr	r3, [r4, #44]	; 0x2c
   143a8:	cmp	r3, #0
   143ac:	cmpne	r8, #1
   143b0:	bls	13c1c <__assert_fail@plt+0x22b4>
   143b4:	mov	r1, r6
   143b8:	mov	r2, r8
   143bc:	mov	r0, r4
   143c0:	bl	133dc <__assert_fail@plt+0x1a74>
   143c4:	mov	r6, r0
   143c8:	b	13c1c <__assert_fail@plt+0x22b4>
   143cc:	andeq	r8, r1, r0, lsr #13
   143d0:	andeq	r6, r0, r9, ror #18
   143d4:			; <UNDEFINED> instruction: 0xff534d42
   143d8:	andeq	r0, r0, r6, lsl #8
   143dc:	andeq	r9, r0, r0, lsr #31
   143e0:	movtpl	r4, #24911	; 0x614f
   143e4:	andeq	sl, r1, lr, ror r2
   143e8:	andeq	r2, r0, r0, lsl r7
   143ec:			; <UNDEFINED> instruction: 0x01021994
   143f0:	muleq	r1, r6, r2
   143f4:	andeq	r3, r1, r0, ror r2
   143f8:	push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   143fc:	bic	r4, r1, #4080	; 0xff0
   14400:	bic	r4, r4, #15
   14404:	cmp	r4, #0
   14408:	beq	14420 <__assert_fail@plt+0x2ab8>
   1440c:	bl	117a0 <__errno_location@plt>
   14410:	mov	r3, #22
   14414:	str	r3, [r0]
   14418:	mov	r4, #0
   1441c:	b	1443c <__assert_fail@plt+0x2ad4>
   14420:	and	r3, r1, #516	; 0x204
   14424:	cmp	r3, #516	; 0x204
   14428:	mov	r5, r1
   1442c:	bne	14448 <__assert_fail@plt+0x2ae0>
   14430:	bl	117a0 <__errno_location@plt>
   14434:	mov	r3, #22
   14438:	str	r3, [r0]
   1443c:	mov	r0, r4
   14440:	add	sp, sp, #12
   14444:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14448:	ands	r4, r1, #18
   1444c:	beq	14430 <__assert_fail@plt+0x2ac8>
   14450:	mov	fp, r0
   14454:	mov	r1, #96	; 0x60
   14458:	mov	r0, #1
   1445c:	mov	sl, r2
   14460:	bl	18ae0 <lchmod@@Base+0x2cbc>
   14464:	subs	r4, r0, #0
   14468:	beq	1443c <__assert_fail@plt+0x2ad4>
   1446c:	tst	r5, #2
   14470:	bicne	r3, r5, #512	; 0x200
   14474:	orrne	r3, r3, #4
   14478:	sub	r7, fp, #4
   1447c:	mov	r6, #0
   14480:	strne	r3, [r4, #48]	; 0x30
   14484:	mvn	r3, #99	; 0x63
   14488:	str	sl, [r4, #44]	; 0x2c
   1448c:	streq	r5, [r4, #48]	; 0x30
   14490:	str	r3, [r4, #32]
   14494:	ldr	r9, [r7, #4]!
   14498:	cmp	r9, #0
   1449c:	bne	145c4 <__assert_fail@plt+0x2c5c>
   144a0:	add	r1, r6, #1
   144a4:	cmp	r1, #4096	; 0x1000
   144a8:	movcc	r1, #4096	; 0x1000
   144ac:	mov	r0, r4
   144b0:	bl	13a14 <__assert_fail@plt+0x20ac>
   144b4:	subs	r3, r0, #0
   144b8:	str	r3, [sp]
   144bc:	beq	146d8 <__assert_fail@plt+0x2d70>
   144c0:	ldr	r7, [fp]
   144c4:	cmp	r7, #0
   144c8:	beq	144ec <__assert_fail@plt+0x2b84>
   144cc:	mov	r2, r9
   144d0:	ldr	r1, [pc, #524]	; 146e4 <__assert_fail@plt+0x2d7c>
   144d4:	mov	r0, r4
   144d8:	bl	134a4 <__assert_fail@plt+0x1b3c>
   144dc:	subs	r7, r0, #0
   144e0:	beq	146d0 <__assert_fail@plt+0x2d68>
   144e4:	mvn	r3, #0
   144e8:	str	r3, [r7, #48]	; 0x30
   144ec:	cmp	sl, #0
   144f0:	lsr	r5, r5, #11
   144f4:	ldrne	r8, [r4, #48]	; 0x30
   144f8:	eor	r5, r5, #1
   144fc:	lsrne	r8, r8, #10
   14500:	andne	r3, r8, #1
   14504:	mov	r8, #0
   14508:	mov	r9, r8
   1450c:	mov	r6, r8
   14510:	strne	r3, [sp]
   14514:	and	r3, r5, #1
   14518:	str	r3, [sp, #4]
   1451c:	ldr	r5, [fp, r9, lsl #2]
   14520:	cmp	r5, #0
   14524:	bne	145d8 <__assert_fail@plt+0x2c70>
   14528:	cmp	sl, #0
   1452c:	cmpne	r9, #1
   14530:	bls	14548 <__assert_fail@plt+0x2be0>
   14534:	mov	r1, r6
   14538:	mov	r2, r9
   1453c:	mov	r0, r4
   14540:	bl	133dc <__assert_fail@plt+0x1a74>
   14544:	mov	r6, r0
   14548:	mov	r2, #0
   1454c:	ldr	r1, [pc, #400]	; 146e4 <__assert_fail@plt+0x2d7c>
   14550:	mov	r0, r4
   14554:	bl	134a4 <__assert_fail@plt+0x1b3c>
   14558:	cmp	r0, #0
   1455c:	str	r0, [r4]
   14560:	beq	146c0 <__assert_fail@plt+0x2d58>
   14564:	mov	r3, #9
   14568:	strh	r3, [r0, #56]	; 0x38
   1456c:	mov	r3, #1
   14570:	str	r6, [r0, #8]
   14574:	str	r3, [r0, #48]	; 0x30
   14578:	mov	r0, r4
   1457c:	bl	13a80 <__assert_fail@plt+0x2118>
   14580:	cmp	r0, #0
   14584:	beq	146c0 <__assert_fail@plt+0x2d58>
   14588:	ldr	r3, [r4, #48]	; 0x30
   1458c:	tst	r3, #516	; 0x204
   14590:	bne	145b4 <__assert_fail@plt+0x2c4c>
   14594:	ldr	r1, [pc, #332]	; 146e8 <__assert_fail@plt+0x2d80>
   14598:	mov	r0, r4
   1459c:	bl	13518 <__assert_fail@plt+0x1bb0>
   145a0:	cmp	r0, #0
   145a4:	str	r0, [r4, #28]
   145a8:	ldrlt	r3, [r4, #48]	; 0x30
   145ac:	orrlt	r3, r3, #4
   145b0:	strlt	r3, [r4, #48]	; 0x30
   145b4:	mvn	r1, #0
   145b8:	add	r0, r4, #60	; 0x3c
   145bc:	bl	15d64 <__assert_fail@plt+0x43fc>
   145c0:	b	1443c <__assert_fail@plt+0x2ad4>
   145c4:	mov	r0, r9
   145c8:	bl	11764 <strlen@plt>
   145cc:	cmp	r6, r0
   145d0:	movcc	r6, r0
   145d4:	b	14494 <__assert_fail@plt+0x2b2c>
   145d8:	mov	r0, r5
   145dc:	bl	11764 <strlen@plt>
   145e0:	ldr	r1, [sp, #4]
   145e4:	cmp	r0, #2
   145e8:	movls	r1, #0
   145ec:	andhi	r1, r1, #1
   145f0:	cmp	r1, #0
   145f4:	mov	r2, r0
   145f8:	beq	14628 <__assert_fail@plt+0x2cc0>
   145fc:	sub	r0, r0, #1
   14600:	add	r1, r5, r0
   14604:	ldrb	r0, [r5, r0]
   14608:	cmp	r0, #47	; 0x2f
   1460c:	bne	14628 <__assert_fail@plt+0x2cc0>
   14610:	ldrb	r0, [r1, #-1]!
   14614:	cmp	r0, #47	; 0x2f
   14618:	bne	14628 <__assert_fail@plt+0x2cc0>
   1461c:	sub	r2, r2, #1
   14620:	cmp	r2, #1
   14624:	bne	14610 <__assert_fail@plt+0x2ca8>
   14628:	mov	r1, r5
   1462c:	mov	r0, r4
   14630:	bl	134a4 <__assert_fail@plt+0x1b3c>
   14634:	subs	r5, r0, #0
   14638:	beq	146c0 <__assert_fail@plt+0x2d58>
   1463c:	mov	r2, #0
   14640:	str	r2, [r5, #48]	; 0x30
   14644:	add	r2, r5, #168	; 0xa8
   14648:	str	r2, [r5, #24]
   1464c:	ldr	r2, [sp]
   14650:	str	r7, [r5, #4]
   14654:	cmp	r6, #0
   14658:	moveq	r2, #0
   1465c:	andne	r2, r2, #1
   14660:	cmp	r2, #0
   14664:	beq	146ac <__assert_fail@plt+0x2d44>
   14668:	mov	r0, #2
   1466c:	mov	r1, #0
   14670:	mov	r2, #11
   14674:	strh	r2, [r5, #56]	; 0x38
   14678:	strd	r0, [r5, #112]	; 0x70
   1467c:	cmp	sl, #0
   14680:	strne	r6, [r5, #8]
   14684:	bne	146a0 <__assert_fail@plt+0x2d38>
   14688:	cmp	r6, #0
   1468c:	str	sl, [r5, #8]
   14690:	moveq	r8, r5
   14694:	strne	r5, [r8, #8]
   14698:	movne	r8, r5
   1469c:	movne	r5, r6
   146a0:	add	r9, r9, #1
   146a4:	mov	r6, r5
   146a8:	b	1451c <__assert_fail@plt+0x2bb4>
   146ac:	mov	r1, r5
   146b0:	mov	r0, r4
   146b4:	bl	132a4 <__assert_fail@plt+0x193c>
   146b8:	strh	r0, [r5, #56]	; 0x38
   146bc:	b	1467c <__assert_fail@plt+0x2d14>
   146c0:	mov	r0, r6
   146c4:	bl	1355c <__assert_fail@plt+0x1bf4>
   146c8:	mov	r0, r7
   146cc:	bl	13188 <__assert_fail@plt+0x1820>
   146d0:	ldr	r0, [r4, #24]
   146d4:	bl	13188 <__assert_fail@plt+0x1820>
   146d8:	mov	r0, r4
   146dc:	bl	13188 <__assert_fail@plt+0x1820>
   146e0:	b	14418 <__assert_fail@plt+0x2ab0>
   146e4:	andeq	r9, r1, r7, asr #31
   146e8:	muleq	r1, r7, r2
   146ec:	push	{r4, r5, r6, lr}
   146f0:	mov	r4, r0
   146f4:	ldr	r0, [r0]
   146f8:	cmp	r0, #0
   146fc:	bne	14794 <__assert_fail@plt+0x2e2c>
   14700:	ldr	r0, [r4, #4]
   14704:	cmp	r0, #0
   14708:	beq	14710 <__assert_fail@plt+0x2da8>
   1470c:	bl	1355c <__assert_fail@plt+0x1bf4>
   14710:	ldr	r0, [r4, #8]
   14714:	bl	13188 <__assert_fail@plt+0x1820>
   14718:	ldr	r0, [r4, #24]
   1471c:	bl	13188 <__assert_fail@plt+0x1820>
   14720:	ldr	r3, [r4, #48]	; 0x30
   14724:	tst	r3, #512	; 0x200
   14728:	beq	147c0 <__assert_fail@plt+0x2e58>
   1472c:	ldr	r0, [r4, #32]
   14730:	cmp	r0, #0
   14734:	bge	147a8 <__assert_fail@plt+0x2e40>
   14738:	mov	r5, #0
   1473c:	add	r0, r4, #60	; 0x3c
   14740:	bl	135c0 <__assert_fail@plt+0x1c58>
   14744:	ldr	r0, [r4, #52]	; 0x34
   14748:	cmp	r0, #0
   1474c:	beq	14754 <__assert_fail@plt+0x2dec>
   14750:	bl	15830 <__assert_fail@plt+0x3ec8>
   14754:	mov	r0, r4
   14758:	bl	13594 <__assert_fail@plt+0x1c2c>
   1475c:	mov	r0, r4
   14760:	bl	13188 <__assert_fail@plt+0x1820>
   14764:	cmp	r5, #0
   14768:	beq	14778 <__assert_fail@plt+0x2e10>
   1476c:	bl	117a0 <__errno_location@plt>
   14770:	str	r5, [r0]
   14774:	mvn	r5, #0
   14778:	mov	r0, r5
   1477c:	pop	{r4, r5, r6, pc}
   14780:	ldr	r5, [r0, #8]
   14784:	cmp	r5, #0
   14788:	ldreq	r5, [r0, #4]
   1478c:	bl	13188 <__assert_fail@plt+0x1820>
   14790:	mov	r0, r5
   14794:	ldr	r3, [r0, #48]	; 0x30
   14798:	cmp	r3, #0
   1479c:	bge	14780 <__assert_fail@plt+0x2e18>
   147a0:	bl	13188 <__assert_fail@plt+0x1820>
   147a4:	b	14700 <__assert_fail@plt+0x2d98>
   147a8:	bl	11920 <close@plt>
   147ac:	cmp	r0, #0
   147b0:	beq	14738 <__assert_fail@plt+0x2dd0>
   147b4:	bl	117a0 <__errno_location@plt>
   147b8:	ldr	r5, [r0]
   147bc:	b	1473c <__assert_fail@plt+0x2dd4>
   147c0:	tst	r3, #4
   147c4:	bne	14738 <__assert_fail@plt+0x2dd0>
   147c8:	ldr	r0, [r4, #28]
   147cc:	bl	11884 <fchdir@plt>
   147d0:	subs	r5, r0, #0
   147d4:	beq	147e0 <__assert_fail@plt+0x2e78>
   147d8:	bl	117a0 <__errno_location@plt>
   147dc:	ldr	r5, [r0]
   147e0:	ldr	r0, [r4, #28]
   147e4:	bl	11920 <close@plt>
   147e8:	clz	r3, r5
   147ec:	lsr	r3, r3, #5
   147f0:	cmp	r0, #0
   147f4:	moveq	r3, #0
   147f8:	cmp	r3, #0
   147fc:	beq	1473c <__assert_fail@plt+0x2dd4>
   14800:	b	147b4 <__assert_fail@plt+0x2e4c>
   14804:	push	{r4, r5, r6, r7, r8, lr}
   14808:	ldr	r4, [r0]
   1480c:	cmp	r4, #0
   14810:	beq	14b10 <__assert_fail@plt+0x31a8>
   14814:	ldr	r1, [r0, #48]	; 0x30
   14818:	mov	r5, r0
   1481c:	ands	r2, r1, #8192	; 0x2000
   14820:	bne	14b10 <__assert_fail@plt+0x31a8>
   14824:	ldrh	r3, [r4, #60]	; 0x3c
   14828:	mov	ip, #3
   1482c:	strh	ip, [r4, #60]	; 0x3c
   14830:	cmp	r3, #1
   14834:	bne	1484c <__assert_fail@plt+0x2ee4>
   14838:	mov	r1, r4
   1483c:	bl	132a4 <__assert_fail@plt+0x193c>
   14840:	strh	r0, [r4, #56]	; 0x38
   14844:	mov	r0, r4
   14848:	pop	{r4, r5, r6, r7, r8, pc}
   1484c:	cmp	r3, #2
   14850:	ldrh	r2, [r4, #56]	; 0x38
   14854:	bne	14934 <__assert_fail@plt+0x2fcc>
   14858:	sub	ip, r2, #12
   1485c:	cmp	ip, #1
   14860:	bhi	14934 <__assert_fail@plt+0x2fcc>
   14864:	mov	r2, #1
   14868:	mov	r1, r4
   1486c:	bl	132a4 <__assert_fail@plt+0x193c>
   14870:	cmp	r0, #1
   14874:	strh	r0, [r4, #56]	; 0x38
   14878:	bne	148c0 <__assert_fail@plt+0x2f58>
   1487c:	ldr	r3, [r5, #48]	; 0x30
   14880:	tst	r3, #4
   14884:	bne	148c0 <__assert_fail@plt+0x2f58>
   14888:	ldr	r1, [pc, #1332]	; 14dc4 <__assert_fail@plt+0x345c>
   1488c:	mov	r0, r5
   14890:	bl	13518 <__assert_fail@plt+0x1bb0>
   14894:	cmp	r0, #0
   14898:	str	r0, [r4, #36]	; 0x24
   1489c:	ldrhge	r3, [r4, #58]	; 0x3a
   148a0:	orrge	r3, r3, #2
   148a4:	strhge	r3, [r4, #58]	; 0x3a
   148a8:	bge	148c0 <__assert_fail@plt+0x2f58>
   148ac:	bl	117a0 <__errno_location@plt>
   148b0:	ldr	r3, [r0]
   148b4:	str	r3, [r4, #32]
   148b8:	mov	r3, #7
   148bc:	strh	r3, [r4, #56]	; 0x38
   148c0:	ldrh	r3, [r4, #56]	; 0x38
   148c4:	str	r4, [r5]
   148c8:	cmp	r3, #11
   148cc:	bne	148f4 <__assert_fail@plt+0x2f8c>
   148d0:	ldrd	r2, [r4, #112]	; 0x70
   148d4:	cmp	r3, #0
   148d8:	cmpeq	r2, #2
   148dc:	bne	14c64 <__assert_fail@plt+0x32fc>
   148e0:	mov	r2, #0
   148e4:	mov	r1, r4
   148e8:	mov	r0, r5
   148ec:	bl	132a4 <__assert_fail@plt+0x193c>
   148f0:	strh	r0, [r4, #56]	; 0x38
   148f4:	ldrh	r3, [r4, #56]	; 0x38
   148f8:	cmp	r3, #1
   148fc:	bne	14844 <__assert_fail@plt+0x2edc>
   14900:	ldr	r3, [r4, #48]	; 0x30
   14904:	cmp	r3, #0
   14908:	ldrdeq	r2, [r4, #64]	; 0x40
   1490c:	strdeq	r2, [r5, #16]
   14910:	mov	r0, r5
   14914:	mov	r1, r4
   14918:	bl	13afc <__assert_fail@plt+0x2194>
   1491c:	subs	r5, r0, #0
   14920:	bne	14844 <__assert_fail@plt+0x2edc>
   14924:	bl	117a0 <__errno_location@plt>
   14928:	mov	r3, #12
   1492c:	str	r3, [r0]
   14930:	b	14b10 <__assert_fail@plt+0x31a8>
   14934:	cmp	r2, #1
   14938:	movne	r6, r4
   1493c:	bne	14ac4 <__assert_fail@plt+0x315c>
   14940:	cmp	r3, #4
   14944:	beq	14964 <__assert_fail@plt+0x2ffc>
   14948:	tst	r1, #64	; 0x40
   1494c:	beq	149a8 <__assert_fail@plt+0x3040>
   14950:	ldrd	r6, [r4, #64]	; 0x40
   14954:	ldrd	r2, [r5, #16]
   14958:	cmp	r7, r3
   1495c:	cmpeq	r6, r2
   14960:	beq	149a8 <__assert_fail@plt+0x3040>
   14964:	ldrh	r3, [r4, #58]	; 0x3a
   14968:	tst	r3, #2
   1496c:	beq	14978 <__assert_fail@plt+0x3010>
   14970:	ldr	r0, [r4, #36]	; 0x24
   14974:	bl	11920 <close@plt>
   14978:	ldr	r0, [r5, #4]
   1497c:	cmp	r0, #0
   14980:	beq	14990 <__assert_fail@plt+0x3028>
   14984:	bl	1355c <__assert_fail@plt+0x1bf4>
   14988:	mov	r3, #0
   1498c:	str	r3, [r5, #4]
   14990:	mov	r3, #6
   14994:	strh	r3, [r4, #56]	; 0x38
   14998:	mov	r1, r4
   1499c:	mov	r0, r5
   149a0:	bl	13960 <__assert_fail@plt+0x1ff8>
   149a4:	b	14844 <__assert_fail@plt+0x2edc>
   149a8:	ldr	r0, [r5, #4]
   149ac:	cmp	r0, #0
   149b0:	beq	149d0 <__assert_fail@plt+0x3068>
   149b4:	tst	r1, #4096	; 0x1000
   149b8:	beq	149d0 <__assert_fail@plt+0x3068>
   149bc:	bic	r1, r1, #4096	; 0x1000
   149c0:	str	r1, [r5, #48]	; 0x30
   149c4:	bl	1355c <__assert_fail@plt+0x1bf4>
   149c8:	mov	r3, #0
   149cc:	str	r3, [r5, #4]
   149d0:	ldr	r3, [r5, #4]
   149d4:	cmp	r3, #0
   149d8:	beq	14a80 <__assert_fail@plt+0x3118>
   149dc:	ldr	r3, [r4, #24]
   149e0:	mvn	r2, #0
   149e4:	mov	r1, r4
   149e8:	mov	r0, r5
   149ec:	bl	137c4 <__assert_fail@plt+0x1e5c>
   149f0:	cmp	r0, #0
   149f4:	beq	14a1c <__assert_fail@plt+0x30b4>
   149f8:	bl	117a0 <__errno_location@plt>
   149fc:	ldr	r3, [r0]
   14a00:	str	r3, [r4, #32]
   14a04:	ldrh	r3, [r4, #58]	; 0x3a
   14a08:	orr	r3, r3, #1
   14a0c:	strh	r3, [r4, #58]	; 0x3a
   14a10:	ldr	r3, [r5, #4]
   14a14:	cmp	r3, #0
   14a18:	bne	14a6c <__assert_fail@plt+0x3104>
   14a1c:	mov	r3, #0
   14a20:	ldr	r4, [r5, #4]
   14a24:	str	r3, [r5, #4]
   14a28:	ldr	r0, [r4, #4]
   14a2c:	ldr	r2, [r5, #24]
   14a30:	ldr	r1, [r0, #40]	; 0x28
   14a34:	ldr	r0, [r0, #28]
   14a38:	sub	r3, r1, #1
   14a3c:	ldrb	r0, [r0, r3]
   14a40:	cmp	r0, #47	; 0x2f
   14a44:	movne	r3, r1
   14a48:	mov	r1, #47	; 0x2f
   14a4c:	add	r0, r2, r3
   14a50:	strb	r1, [r2, r3]
   14a54:	ldr	r2, [r4, #52]	; 0x34
   14a58:	add	r1, r4, #168	; 0xa8
   14a5c:	add	r2, r2, #1
   14a60:	add	r0, r0, #1
   14a64:	bl	11584 <memmove@plt>
   14a68:	b	148c0 <__assert_fail@plt+0x2f58>
   14a6c:	ldr	r2, [r3, #4]
   14a70:	ldr	r2, [r2, #24]
   14a74:	str	r2, [r3, #24]
   14a78:	ldr	r3, [r3, #8]
   14a7c:	b	14a14 <__assert_fail@plt+0x30ac>
   14a80:	mov	r1, #3
   14a84:	mov	r0, r5
   14a88:	bl	13bb4 <__assert_fail@plt+0x224c>
   14a8c:	cmp	r0, #0
   14a90:	str	r0, [r5, #4]
   14a94:	bne	14a1c <__assert_fail@plt+0x30b4>
   14a98:	ldr	r3, [r5, #48]	; 0x30
   14a9c:	tst	r3, #8192	; 0x2000
   14aa0:	bne	14b10 <__assert_fail@plt+0x31a8>
   14aa4:	ldr	r3, [r4, #32]
   14aa8:	cmp	r3, #0
   14aac:	beq	14998 <__assert_fail@plt+0x3030>
   14ab0:	ldrh	r3, [r4, #56]	; 0x38
   14ab4:	cmp	r3, #4
   14ab8:	beq	14998 <__assert_fail@plt+0x3030>
   14abc:	mov	r3, #7
   14ac0:	b	14994 <__assert_fail@plt+0x302c>
   14ac4:	ldr	r4, [r4, #8]
   14ac8:	cmp	r4, #0
   14acc:	bne	14b24 <__assert_fail@plt+0x31bc>
   14ad0:	ldr	r3, [r6, #4]
   14ad4:	ldr	r2, [r3, #12]
   14ad8:	cmp	r2, #0
   14adc:	beq	14c74 <__assert_fail@plt+0x330c>
   14ae0:	str	r3, [r5]
   14ae4:	ldr	r2, [r5, #24]
   14ae8:	ldr	r3, [r3, #40]	; 0x28
   14aec:	mov	r1, #3
   14af0:	mov	r0, r5
   14af4:	strb	r4, [r2, r3]
   14af8:	bl	13bb4 <__assert_fail@plt+0x224c>
   14afc:	subs	r4, r0, #0
   14b00:	bne	14b18 <__assert_fail@plt+0x31b0>
   14b04:	ldr	r3, [r5, #48]	; 0x30
   14b08:	tst	r3, #8192	; 0x2000
   14b0c:	beq	14c74 <__assert_fail@plt+0x330c>
   14b10:	mov	r4, #0
   14b14:	b	14844 <__assert_fail@plt+0x2edc>
   14b18:	mov	r0, r6
   14b1c:	bl	13188 <__assert_fail@plt+0x1820>
   14b20:	b	14a28 <__assert_fail@plt+0x30c0>
   14b24:	mov	r0, r6
   14b28:	str	r4, [r5]
   14b2c:	bl	13188 <__assert_fail@plt+0x1820>
   14b30:	ldr	r6, [r4, #48]	; 0x30
   14b34:	cmp	r6, #0
   14b38:	bne	14be0 <__assert_fail@plt+0x3278>
   14b3c:	mov	r0, r5
   14b40:	bl	13774 <__assert_fail@plt+0x1e0c>
   14b44:	cmp	r0, #0
   14b48:	ldrne	r3, [r5, #48]	; 0x30
   14b4c:	orrne	r3, r3, #8192	; 0x2000
   14b50:	strne	r3, [r5, #48]	; 0x30
   14b54:	bne	14b10 <__assert_fail@plt+0x31a8>
   14b58:	mov	r0, r5
   14b5c:	bl	13594 <__assert_fail@plt+0x1c2c>
   14b60:	ldr	r2, [r4, #52]	; 0x34
   14b64:	add	r7, r4, #168	; 0xa8
   14b68:	str	r2, [r4, #40]	; 0x28
   14b6c:	mov	r1, r7
   14b70:	add	r2, r2, #1
   14b74:	ldr	r0, [r5, #24]
   14b78:	bl	11584 <memmove@plt>
   14b7c:	mov	r1, #47	; 0x2f
   14b80:	mov	r0, r7
   14b84:	bl	1183c <strrchr@plt>
   14b88:	cmp	r0, #0
   14b8c:	beq	14bc8 <__assert_fail@plt+0x3260>
   14b90:	cmp	r7, r0
   14b94:	bne	14ba4 <__assert_fail@plt+0x323c>
   14b98:	ldrb	r3, [r4, #169]	; 0xa9
   14b9c:	cmp	r3, #0
   14ba0:	beq	14bc8 <__assert_fail@plt+0x3260>
   14ba4:	add	r6, r0, #1
   14ba8:	mov	r0, r6
   14bac:	bl	11764 <strlen@plt>
   14bb0:	mov	r1, r6
   14bb4:	mov	r8, r0
   14bb8:	add	r2, r0, #1
   14bbc:	mov	r0, r7
   14bc0:	bl	11584 <memmove@plt>
   14bc4:	str	r8, [r4, #52]	; 0x34
   14bc8:	ldr	r3, [r5, #24]
   14bcc:	mov	r0, r5
   14bd0:	str	r3, [r4, #28]
   14bd4:	str	r3, [r4, #24]
   14bd8:	bl	13a80 <__assert_fail@plt+0x2118>
   14bdc:	b	148c0 <__assert_fail@plt+0x2f58>
   14be0:	ldrh	r3, [r4, #60]	; 0x3c
   14be4:	mov	r6, r4
   14be8:	cmp	r3, #4
   14bec:	beq	14ac4 <__assert_fail@plt+0x315c>
   14bf0:	cmp	r3, #2
   14bf4:	bne	14a28 <__assert_fail@plt+0x30c0>
   14bf8:	mov	r2, #1
   14bfc:	mov	r1, r4
   14c00:	mov	r0, r5
   14c04:	bl	132a4 <__assert_fail@plt+0x193c>
   14c08:	cmp	r0, #1
   14c0c:	strh	r0, [r4, #56]	; 0x38
   14c10:	bne	14c58 <__assert_fail@plt+0x32f0>
   14c14:	ldr	r3, [r5, #48]	; 0x30
   14c18:	tst	r3, #4
   14c1c:	bne	14c58 <__assert_fail@plt+0x32f0>
   14c20:	ldr	r1, [pc, #412]	; 14dc4 <__assert_fail@plt+0x345c>
   14c24:	mov	r0, r5
   14c28:	bl	13518 <__assert_fail@plt+0x1bb0>
   14c2c:	cmp	r0, #0
   14c30:	str	r0, [r4, #36]	; 0x24
   14c34:	ldrhge	r3, [r4, #58]	; 0x3a
   14c38:	orrge	r3, r3, #2
   14c3c:	strhge	r3, [r4, #58]	; 0x3a
   14c40:	bge	14c58 <__assert_fail@plt+0x32f0>
   14c44:	bl	117a0 <__errno_location@plt>
   14c48:	ldr	r3, [r0]
   14c4c:	str	r3, [r4, #32]
   14c50:	mov	r3, #7
   14c54:	strh	r3, [r4, #56]	; 0x38
   14c58:	mov	r3, #3
   14c5c:	strh	r3, [r4, #60]	; 0x3c
   14c60:	b	14a28 <__assert_fail@plt+0x30c0>
   14c64:	cmp	r3, #0
   14c68:	cmpeq	r2, #1
   14c6c:	beq	148f4 <__assert_fail@plt+0x2f8c>
   14c70:	bl	11914 <abort@plt>
   14c74:	ldr	r4, [r6, #4]
   14c78:	mov	r0, r6
   14c7c:	str	r4, [r5]
   14c80:	bl	13188 <__assert_fail@plt+0x1820>
   14c84:	ldr	r3, [r4, #48]	; 0x30
   14c88:	cmn	r3, #1
   14c8c:	bne	14cac <__assert_fail@plt+0x3344>
   14c90:	mov	r0, r4
   14c94:	bl	13188 <__assert_fail@plt+0x1820>
   14c98:	bl	117a0 <__errno_location@plt>
   14c9c:	mov	r4, #0
   14ca0:	str	r4, [r0]
   14ca4:	str	r4, [r5]
   14ca8:	b	14844 <__assert_fail@plt+0x2edc>
   14cac:	ldrh	r3, [r4, #56]	; 0x38
   14cb0:	cmp	r3, #11
   14cb4:	beq	14c70 <__assert_fail@plt+0x3308>
   14cb8:	ldr	r3, [r4, #40]	; 0x28
   14cbc:	ldr	r2, [r5, #24]
   14cc0:	mov	r1, #0
   14cc4:	strb	r1, [r2, r3]
   14cc8:	ldr	r3, [r4, #48]	; 0x30
   14ccc:	cmp	r3, r1
   14cd0:	bne	14d00 <__assert_fail@plt+0x3398>
   14cd4:	mov	r0, r5
   14cd8:	bl	13774 <__assert_fail@plt+0x1e0c>
   14cdc:	cmp	r0, #0
   14ce0:	beq	14d38 <__assert_fail@plt+0x33d0>
   14ce4:	bl	117a0 <__errno_location@plt>
   14ce8:	ldr	r3, [r0]
   14cec:	str	r3, [r4, #32]
   14cf0:	ldr	r3, [r5, #48]	; 0x30
   14cf4:	orr	r3, r3, #8192	; 0x2000
   14cf8:	str	r3, [r5, #48]	; 0x30
   14cfc:	b	14d38 <__assert_fail@plt+0x33d0>
   14d00:	ldrh	r3, [r4, #58]	; 0x3a
   14d04:	tst	r3, #2
   14d08:	beq	14da4 <__assert_fail@plt+0x343c>
   14d0c:	ldr	r3, [r5, #48]	; 0x30
   14d10:	tst	r3, #4
   14d14:	bne	14d30 <__assert_fail@plt+0x33c8>
   14d18:	tst	r3, #512	; 0x200
   14d1c:	beq	14d78 <__assert_fail@plt+0x3410>
   14d20:	mov	r2, #1
   14d24:	ldr	r1, [r4, #36]	; 0x24
   14d28:	mov	r0, r5
   14d2c:	bl	136f8 <__assert_fail@plt+0x1d90>
   14d30:	ldr	r0, [r4, #36]	; 0x24
   14d34:	bl	11920 <close@plt>
   14d38:	ldrh	r3, [r4, #56]	; 0x38
   14d3c:	cmp	r3, #2
   14d40:	beq	14d68 <__assert_fail@plt+0x3400>
   14d44:	ldr	r3, [r4, #32]
   14d48:	cmp	r3, #0
   14d4c:	movne	r3, #7
   14d50:	moveq	r3, #6
   14d54:	strh	r3, [r4, #56]	; 0x38
   14d58:	bne	14d68 <__assert_fail@plt+0x3400>
   14d5c:	mov	r1, r4
   14d60:	mov	r0, r5
   14d64:	bl	13960 <__assert_fail@plt+0x1ff8>
   14d68:	ldr	r3, [r5, #48]	; 0x30
   14d6c:	tst	r3, #8192	; 0x2000
   14d70:	beq	14844 <__assert_fail@plt+0x2edc>
   14d74:	b	14b10 <__assert_fail@plt+0x31a8>
   14d78:	ldr	r0, [r4, #36]	; 0x24
   14d7c:	bl	11884 <fchdir@plt>
   14d80:	cmp	r0, #0
   14d84:	beq	14d30 <__assert_fail@plt+0x33c8>
   14d88:	bl	117a0 <__errno_location@plt>
   14d8c:	ldr	r3, [r0]
   14d90:	str	r3, [r4, #32]
   14d94:	ldr	r3, [r5, #48]	; 0x30
   14d98:	orr	r3, r3, #8192	; 0x2000
   14d9c:	str	r3, [r5, #48]	; 0x30
   14da0:	b	14d30 <__assert_fail@plt+0x33c8>
   14da4:	tst	r3, #1
   14da8:	bne	14d38 <__assert_fail@plt+0x33d0>
   14dac:	ldr	r3, [pc, #20]	; 14dc8 <__assert_fail@plt+0x3460>
   14db0:	mvn	r2, #0
   14db4:	ldr	r1, [r4, #4]
   14db8:	mov	r0, r5
   14dbc:	bl	137c4 <__assert_fail@plt+0x1e5c>
   14dc0:	b	14cdc <__assert_fail@plt+0x3374>
   14dc4:	muleq	r1, r7, r2
   14dc8:	muleq	r1, r6, r2
   14dcc:	cmp	r2, #4
   14dd0:	bls	14dec <__assert_fail@plt+0x3484>
   14dd4:	push	{r4, lr}
   14dd8:	bl	117a0 <__errno_location@plt>
   14ddc:	mov	r3, #22
   14de0:	str	r3, [r0]
   14de4:	mov	r0, #1
   14de8:	pop	{r4, pc}
   14dec:	strh	r2, [r1, #60]	; 0x3c
   14df0:	mov	r0, #0
   14df4:	bx	lr
   14df8:	push	{r4, r5, r6, r7, r8, lr}
   14dfc:	bics	r8, r1, #4096	; 0x1000
   14e00:	beq	14e18 <__assert_fail@plt+0x34b0>
   14e04:	bl	117a0 <__errno_location@plt>
   14e08:	mov	r3, #22
   14e0c:	str	r3, [r0]
   14e10:	mov	r0, #0
   14e14:	pop	{r4, r5, r6, r7, r8, pc}
   14e18:	mov	r5, r0
   14e1c:	ldr	r4, [r0]
   14e20:	mov	r7, r1
   14e24:	bl	117a0 <__errno_location@plt>
   14e28:	mov	r6, r0
   14e2c:	str	r8, [r0]
   14e30:	ldr	r0, [r5, #48]	; 0x30
   14e34:	ands	r0, r0, #8192	; 0x2000
   14e38:	bne	14e10 <__assert_fail@plt+0x34a8>
   14e3c:	ldrh	r3, [r4, #56]	; 0x38
   14e40:	cmp	r3, #9
   14e44:	bne	14e50 <__assert_fail@plt+0x34e8>
   14e48:	ldr	r0, [r4, #8]
   14e4c:	pop	{r4, r5, r6, r7, r8, pc}
   14e50:	cmp	r3, #1
   14e54:	popne	{r4, r5, r6, r7, r8, pc}
   14e58:	ldr	r0, [r5, #4]
   14e5c:	cmp	r0, #0
   14e60:	beq	14e68 <__assert_fail@plt+0x3500>
   14e64:	bl	1355c <__assert_fail@plt+0x1bf4>
   14e68:	cmp	r7, #4096	; 0x1000
   14e6c:	moveq	r8, #2
   14e70:	ldreq	r3, [r5, #48]	; 0x30
   14e74:	movne	r8, #1
   14e78:	orreq	r3, r3, #4096	; 0x1000
   14e7c:	streq	r3, [r5, #48]	; 0x30
   14e80:	ldr	r3, [r4, #48]	; 0x30
   14e84:	cmp	r3, #0
   14e88:	bne	14ea8 <__assert_fail@plt+0x3540>
   14e8c:	ldr	r3, [r4, #24]
   14e90:	ldrb	r3, [r3]
   14e94:	cmp	r3, #47	; 0x2f
   14e98:	beq	14ea8 <__assert_fail@plt+0x3540>
   14e9c:	ldr	r0, [r5, #48]	; 0x30
   14ea0:	ands	r4, r0, #4
   14ea4:	beq	14ebc <__assert_fail@plt+0x3554>
   14ea8:	mov	r1, r8
   14eac:	mov	r0, r5
   14eb0:	bl	13bb4 <__assert_fail@plt+0x224c>
   14eb4:	str	r0, [r5, #4]
   14eb8:	pop	{r4, r5, r6, r7, r8, pc}
   14ebc:	ldr	r1, [pc, #116]	; 14f38 <__assert_fail@plt+0x35d0>
   14ec0:	mov	r0, r5
   14ec4:	bl	13518 <__assert_fail@plt+0x1bb0>
   14ec8:	subs	r7, r0, #0
   14ecc:	strlt	r4, [r5, #4]
   14ed0:	blt	14e10 <__assert_fail@plt+0x34a8>
   14ed4:	mov	r1, r8
   14ed8:	mov	r0, r5
   14edc:	bl	13bb4 <__assert_fail@plt+0x224c>
   14ee0:	str	r0, [r5, #4]
   14ee4:	ldr	r0, [r5, #48]	; 0x30
   14ee8:	ands	r4, r0, #512	; 0x200
   14eec:	beq	14f08 <__assert_fail@plt+0x35a0>
   14ef0:	mov	r2, #1
   14ef4:	mov	r1, r7
   14ef8:	mov	r0, r5
   14efc:	bl	136f8 <__assert_fail@plt+0x1d90>
   14f00:	ldr	r0, [r5, #4]
   14f04:	pop	{r4, r5, r6, r7, r8, pc}
   14f08:	mov	r0, r7
   14f0c:	bl	11884 <fchdir@plt>
   14f10:	cmp	r0, #0
   14f14:	beq	14f2c <__assert_fail@plt+0x35c4>
   14f18:	ldr	r5, [r6]
   14f1c:	mov	r0, r7
   14f20:	bl	11920 <close@plt>
   14f24:	str	r5, [r6]
   14f28:	b	14e10 <__assert_fail@plt+0x34a8>
   14f2c:	mov	r0, r7
   14f30:	bl	11920 <close@plt>
   14f34:	b	14f00 <__assert_fail@plt+0x3598>
   14f38:	muleq	r1, r7, r2
   14f3c:	andeq	r0, r0, r0
   14f40:	push	{r4, lr}
   14f44:	ror	r0, r0, #3
   14f48:	bl	194e8 <lchmod@@Base+0x36c4>
   14f4c:	mov	r0, r1
   14f50:	pop	{r4, pc}
   14f54:	sub	r0, r1, r0
   14f58:	clz	r0, r0
   14f5c:	lsr	r0, r0, #5
   14f60:	bx	lr
   14f64:	push	{r4, lr}
   14f68:	mov	r4, r0
   14f6c:	mov	r0, r1
   14f70:	ldr	r3, [r4, #24]
   14f74:	ldr	r1, [r4, #8]
   14f78:	blx	r3
   14f7c:	ldr	r3, [r4, #8]
   14f80:	cmp	r0, r3
   14f84:	bcc	14f8c <__assert_fail@plt+0x3624>
   14f88:	bl	11914 <abort@plt>
   14f8c:	ldr	r3, [r4]
   14f90:	add	r0, r3, r0, lsl #3
   14f94:	pop	{r4, pc}
   14f98:	push	{r4, r5, r6, r7, r8, lr}
   14f9c:	mov	r6, r1
   14fa0:	mov	r8, r2
   14fa4:	mov	r5, r0
   14fa8:	mov	r7, r3
   14fac:	bl	14f64 <__assert_fail@plt+0x35fc>
   14fb0:	str	r0, [r8]
   14fb4:	ldr	r1, [r0]
   14fb8:	cmp	r1, #0
   14fbc:	bne	14fcc <__assert_fail@plt+0x3664>
   14fc0:	mov	r2, #0
   14fc4:	mov	r0, r2
   14fc8:	pop	{r4, r5, r6, r7, r8, pc}
   14fcc:	cmp	r6, r1
   14fd0:	mov	r4, r0
   14fd4:	bne	15014 <__assert_fail@plt+0x36ac>
   14fd8:	cmp	r7, #0
   14fdc:	ldr	r2, [r4]
   14fe0:	beq	14fc4 <__assert_fail@plt+0x365c>
   14fe4:	ldr	r3, [r4, #4]
   14fe8:	cmp	r3, #0
   14fec:	streq	r3, [r4]
   14ff0:	beq	14fc4 <__assert_fail@plt+0x365c>
   14ff4:	ldm	r3, {r0, r1}
   14ff8:	stm	r4, {r0, r1}
   14ffc:	mov	r1, #0
   15000:	str	r1, [r3]
   15004:	ldr	r1, [r5, #36]	; 0x24
   15008:	str	r1, [r3, #4]
   1500c:	str	r3, [r5, #36]	; 0x24
   15010:	b	14fc4 <__assert_fail@plt+0x365c>
   15014:	ldr	r3, [r5, #28]
   15018:	mov	r0, r6
   1501c:	blx	r3
   15020:	cmp	r0, #0
   15024:	bne	14fd8 <__assert_fail@plt+0x3670>
   15028:	ldr	r3, [r4, #4]
   1502c:	cmp	r3, #0
   15030:	beq	14fc0 <__assert_fail@plt+0x3658>
   15034:	ldr	r1, [r3]
   15038:	cmp	r6, r1
   1503c:	bne	1505c <__assert_fail@plt+0x36f4>
   15040:	ldr	r3, [r4, #4]
   15044:	cmp	r7, #0
   15048:	ldr	r2, [r3]
   1504c:	beq	14fc4 <__assert_fail@plt+0x365c>
   15050:	ldr	r1, [r3, #4]
   15054:	str	r1, [r4, #4]
   15058:	b	14ffc <__assert_fail@plt+0x3694>
   1505c:	ldr	r3, [r5, #28]
   15060:	mov	r0, r6
   15064:	blx	r3
   15068:	cmp	r0, #0
   1506c:	bne	15040 <__assert_fail@plt+0x36d8>
   15070:	ldr	r4, [r4, #4]
   15074:	b	15028 <__assert_fail@plt+0x36c0>
   15078:	push	{r4, r5, r6, lr}
   1507c:	ldrb	r4, [r1, #16]
   15080:	cmp	r4, #0
   15084:	bne	150b0 <__assert_fail@plt+0x3748>
   15088:	vmov	s15, r0
   1508c:	vldr	s14, [r1, #8]
   15090:	vcvt.f32.u32	s13, s15
   15094:	vdiv.f32	s15, s13, s14
   15098:	vldr	s14, [pc, #156]	; 1513c <__assert_fail@plt+0x37d4>
   1509c:	vcmpe.f32	s15, s14
   150a0:	vmrs	APSR_nzcv, fpscr
   150a4:	bge	15108 <__assert_fail@plt+0x37a0>
   150a8:	vcvt.u32.f32	s15, s15
   150ac:	vmov	r0, s15
   150b0:	cmp	r0, #10
   150b4:	movcc	r0, #10
   150b8:	orr	r4, r0, #1
   150bc:	cmn	r4, #1
   150c0:	beq	150e8 <__assert_fail@plt+0x3780>
   150c4:	mov	r6, #9
   150c8:	mov	r5, #3
   150cc:	cmp	r4, r6
   150d0:	bhi	15118 <__assert_fail@plt+0x37b0>
   150d4:	mov	r1, r5
   150d8:	mov	r0, r4
   150dc:	bl	194e8 <lchmod@@Base+0x36c4>
   150e0:	cmp	r1, #0
   150e4:	beq	15110 <__assert_fail@plt+0x37a8>
   150e8:	lsrs	r3, r4, #30
   150ec:	movne	r3, #1
   150f0:	moveq	r3, #0
   150f4:	tst	r4, #536870912	; 0x20000000
   150f8:	bne	15104 <__assert_fail@plt+0x379c>
   150fc:	cmp	r3, #0
   15100:	beq	15108 <__assert_fail@plt+0x37a0>
   15104:	mov	r4, #0
   15108:	mov	r0, r4
   1510c:	pop	{r4, r5, r6, pc}
   15110:	add	r4, r4, #2
   15114:	b	150bc <__assert_fail@plt+0x3754>
   15118:	mov	r1, r5
   1511c:	mov	r0, r4
   15120:	bl	194e8 <lchmod@@Base+0x36c4>
   15124:	cmp	r1, #0
   15128:	beq	150d4 <__assert_fail@plt+0x376c>
   1512c:	add	r3, r5, #1
   15130:	add	r5, r5, #2
   15134:	add	r6, r6, r3, lsl #2
   15138:	b	150cc <__assert_fail@plt+0x3764>
   1513c:	svcmi	0x00800000
   15140:	ldr	r3, [r0]
   15144:	ldr	r2, [pc, #160]	; 151ec <__assert_fail@plt+0x3884>
   15148:	cmp	r3, r2
   1514c:	beq	151d4 <__assert_fail@plt+0x386c>
   15150:	vldr	s14, [r3, #8]
   15154:	vldr	s13, [pc, #128]	; 151dc <__assert_fail@plt+0x3874>
   15158:	vcmpe.f32	s14, s13
   1515c:	vmrs	APSR_nzcv, fpscr
   15160:	ble	151c8 <__assert_fail@plt+0x3860>
   15164:	vldr	s15, [pc, #116]	; 151e0 <__assert_fail@plt+0x3878>
   15168:	vcmpe.f32	s14, s15
   1516c:	vmrs	APSR_nzcv, fpscr
   15170:	bpl	151c8 <__assert_fail@plt+0x3860>
   15174:	vldr	s12, [r3, #12]
   15178:	vldr	s15, [pc, #100]	; 151e4 <__assert_fail@plt+0x387c>
   1517c:	vcmpe.f32	s12, s15
   15180:	vmrs	APSR_nzcv, fpscr
   15184:	ble	151c8 <__assert_fail@plt+0x3860>
   15188:	vldr	s15, [r3]
   1518c:	vcmpe.f32	s15, #0.0
   15190:	vmrs	APSR_nzcv, fpscr
   15194:	blt	151c8 <__assert_fail@plt+0x3860>
   15198:	vadd.f32	s15, s15, s13
   1519c:	vldr	s13, [r3, #4]
   151a0:	vcmpe.f32	s15, s13
   151a4:	vmrs	APSR_nzcv, fpscr
   151a8:	bpl	151c8 <__assert_fail@plt+0x3860>
   151ac:	vldr	s12, [pc, #52]	; 151e8 <__assert_fail@plt+0x3880>
   151b0:	vcmpe.f32	s13, s12
   151b4:	vmrs	APSR_nzcv, fpscr
   151b8:	bhi	151c8 <__assert_fail@plt+0x3860>
   151bc:	vcmpe.f32	s14, s15
   151c0:	vmrs	APSR_nzcv, fpscr
   151c4:	bgt	151d4 <__assert_fail@plt+0x386c>
   151c8:	str	r2, [r0]
   151cc:	mov	r0, #0
   151d0:	bx	lr
   151d4:	mov	r0, #1
   151d8:	bx	lr
   151dc:	stclcc	12, cr12, [ip, #820]	; 0x334
   151e0:	svccc	0x00666666
   151e4:	svccc	0x008ccccd
   151e8:	svccc	0x00800000
   151ec:	muleq	r1, ip, r2
   151f0:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   151f4:	mov	r5, r0
   151f8:	ldr	r4, [r1]
   151fc:	mov	r7, r1
   15200:	mov	r8, r2
   15204:	add	r4, r4, #8
   15208:	mov	r9, #0
   1520c:	mov	sl, #8
   15210:	ldr	r2, [r7, #4]
   15214:	sub	r3, r4, #8
   15218:	cmp	r2, r3
   1521c:	bhi	1522c <__assert_fail@plt+0x38c4>
   15220:	mov	r8, #1
   15224:	mov	r0, r8
   15228:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1522c:	ldr	r3, [r4, #-8]
   15230:	cmp	r3, #0
   15234:	ldrne	r6, [r4, #-4]
   15238:	bne	15290 <__assert_fail@plt+0x3928>
   1523c:	add	r4, r4, #8
   15240:	b	15210 <__assert_fail@plt+0x38a8>
   15244:	ldr	fp, [r6]
   15248:	mov	r0, r5
   1524c:	mov	r1, fp
   15250:	bl	14f64 <__assert_fail@plt+0x35fc>
   15254:	ldr	r1, [r6, #4]
   15258:	ldr	r2, [r0]
   1525c:	cmp	r2, #0
   15260:	streq	fp, [r0]
   15264:	ldreq	r3, [r5, #12]
   15268:	ldrne	r3, [r0, #4]
   1526c:	addeq	r3, r3, #1
   15270:	streq	r3, [r5, #12]
   15274:	streq	r2, [r6]
   15278:	ldreq	r3, [r5, #36]	; 0x24
   1527c:	strne	r3, [r6, #4]
   15280:	streq	r3, [r6, #4]
   15284:	strne	r6, [r0, #4]
   15288:	streq	r6, [r5, #36]	; 0x24
   1528c:	mov	r6, r1
   15290:	cmp	r6, #0
   15294:	bne	15244 <__assert_fail@plt+0x38dc>
   15298:	cmp	r8, #0
   1529c:	ldr	fp, [r4, #-8]
   152a0:	str	r6, [r4, #-4]
   152a4:	bne	1523c <__assert_fail@plt+0x38d4>
   152a8:	mov	r1, fp
   152ac:	mov	r0, r5
   152b0:	bl	14f64 <__assert_fail@plt+0x35fc>
   152b4:	ldr	r3, [r0]
   152b8:	mov	r6, r0
   152bc:	cmp	r3, #0
   152c0:	beq	1530c <__assert_fail@plt+0x39a4>
   152c4:	ldr	r0, [r5, #36]	; 0x24
   152c8:	cmp	r0, #0
   152cc:	ldrne	r3, [r0, #4]
   152d0:	strne	r3, [r5, #36]	; 0x24
   152d4:	bne	152e8 <__assert_fail@plt+0x3980>
   152d8:	mov	r0, sl
   152dc:	bl	18b28 <lchmod@@Base+0x2d04>
   152e0:	cmp	r0, #0
   152e4:	beq	15224 <__assert_fail@plt+0x38bc>
   152e8:	ldr	r3, [r6, #4]
   152ec:	str	fp, [r0]
   152f0:	str	r3, [r0, #4]
   152f4:	str	r0, [r6, #4]
   152f8:	ldr	r3, [r7, #12]
   152fc:	str	r9, [r4, #-8]
   15300:	sub	r3, r3, #1
   15304:	str	r3, [r7, #12]
   15308:	b	1523c <__assert_fail@plt+0x38d4>
   1530c:	ldr	r3, [r5, #12]
   15310:	str	fp, [r0]
   15314:	add	r3, r3, #1
   15318:	str	r3, [r5, #12]
   1531c:	b	152f8 <__assert_fail@plt+0x3990>
   15320:	ldr	r0, [r0, #8]
   15324:	bx	lr
   15328:	ldr	r0, [r0, #12]
   1532c:	bx	lr
   15330:	ldr	r0, [r0, #16]
   15334:	bx	lr
   15338:	ldm	r0, {r3, ip}
   1533c:	mov	r0, #0
   15340:	cmp	r3, ip
   15344:	bcc	1534c <__assert_fail@plt+0x39e4>
   15348:	bx	lr
   1534c:	ldr	r2, [r3]
   15350:	cmp	r2, #0
   15354:	movne	r1, r3
   15358:	movne	r2, #1
   1535c:	bne	1536c <__assert_fail@plt+0x3a04>
   15360:	add	r3, r3, #8
   15364:	b	15340 <__assert_fail@plt+0x39d8>
   15368:	add	r2, r2, #1
   1536c:	ldr	r1, [r1, #4]
   15370:	cmp	r1, #0
   15374:	bne	15368 <__assert_fail@plt+0x3a00>
   15378:	cmp	r0, r2
   1537c:	movcc	r0, r2
   15380:	b	15360 <__assert_fail@plt+0x39f8>
   15384:	push	{lr}		; (str lr, [sp, #-4]!)
   15388:	mov	r3, #0
   1538c:	ldm	r0, {r2, lr}
   15390:	mov	r1, r3
   15394:	cmp	r2, lr
   15398:	bcc	153bc <__assert_fail@plt+0x3a54>
   1539c:	ldr	r2, [r0, #12]
   153a0:	cmp	r1, r2
   153a4:	ldreq	r0, [r0, #16]
   153a8:	subeq	r0, r0, r3
   153ac:	clzeq	r0, r0
   153b0:	lsreq	r0, r0, #5
   153b4:	movne	r0, #0
   153b8:	pop	{pc}		; (ldr pc, [sp], #4)
   153bc:	ldr	ip, [r2]
   153c0:	cmp	ip, #0
   153c4:	addne	r1, r1, #1
   153c8:	addne	r3, r3, #1
   153cc:	movne	ip, r2
   153d0:	bne	153e0 <__assert_fail@plt+0x3a78>
   153d4:	add	r2, r2, #8
   153d8:	b	15394 <__assert_fail@plt+0x3a2c>
   153dc:	add	r3, r3, #1
   153e0:	ldr	ip, [ip, #4]
   153e4:	cmp	ip, #0
   153e8:	bne	153dc <__assert_fail@plt+0x3a74>
   153ec:	b	153d4 <__assert_fail@plt+0x3a6c>
   153f0:	push	{r0, r1, r4, r5, r6, r7, r8, lr}
   153f4:	mov	r4, r1
   153f8:	ldr	r5, [r0, #8]
   153fc:	ldr	r7, [r0, #12]
   15400:	mov	r6, r0
   15404:	bl	15338 <__assert_fail@plt+0x39d0>
   15408:	ldr	r3, [r6, #16]
   1540c:	ldr	r2, [pc, #124]	; 15490 <__assert_fail@plt+0x3b28>
   15410:	mov	r1, #1
   15414:	mov	r8, r0
   15418:	mov	r0, r4
   1541c:	bl	117f4 <__fprintf_chk@plt>
   15420:	mov	r3, r5
   15424:	ldr	r2, [pc, #104]	; 15494 <__assert_fail@plt+0x3b2c>
   15428:	mov	r1, #1
   1542c:	mov	r0, r4
   15430:	bl	117f4 <__fprintf_chk@plt>
   15434:	vmov	s15, r7
   15438:	mov	r3, r7
   1543c:	ldr	r2, [pc, #84]	; 15498 <__assert_fail@plt+0x3b30>
   15440:	mov	r1, #1
   15444:	vcvt.f64.u32	d6, s15
   15448:	vldr	d7, [pc, #56]	; 15488 <__assert_fail@plt+0x3b20>
   1544c:	mov	r0, r4
   15450:	vmul.f64	d6, d6, d7
   15454:	vmov	s15, r5
   15458:	vcvt.f64.u32	d7, s15
   1545c:	vdiv.f64	d5, d6, d7
   15460:	vstr	d5, [sp]
   15464:	bl	117f4 <__fprintf_chk@plt>
   15468:	mov	r3, r8
   1546c:	ldr	r2, [pc, #40]	; 1549c <__assert_fail@plt+0x3b34>
   15470:	mov	r1, #1
   15474:	mov	r0, r4
   15478:	add	sp, sp, #8
   1547c:	pop	{r4, r5, r6, r7, r8, lr}
   15480:	b	117f4 <__fprintf_chk@plt>
   15484:	nop			; (mov r0, r0)
   15488:	andeq	r0, r0, r0
   1548c:	subsmi	r0, r9, r0
   15490:			; <UNDEFINED> instruction: 0x0001a2b0
   15494:	andeq	sl, r1, r8, asr #5
   15498:	andeq	sl, r1, r0, ror #5
   1549c:	andeq	sl, r1, r1, lsl #6
   154a0:	push	{r4, r5, r6, lr}
   154a4:	mov	r6, r0
   154a8:	mov	r5, r1
   154ac:	bl	14f64 <__assert_fail@plt+0x35fc>
   154b0:	ldr	r3, [r0]
   154b4:	cmp	r3, #0
   154b8:	movne	r4, r0
   154bc:	bne	154e8 <__assert_fail@plt+0x3b80>
   154c0:	mov	r0, #0
   154c4:	pop	{r4, r5, r6, pc}
   154c8:	ldr	r3, [r6, #28]
   154cc:	mov	r0, r5
   154d0:	blx	r3
   154d4:	cmp	r0, #0
   154d8:	bne	154f4 <__assert_fail@plt+0x3b8c>
   154dc:	ldr	r4, [r4, #4]
   154e0:	cmp	r4, #0
   154e4:	beq	154c0 <__assert_fail@plt+0x3b58>
   154e8:	ldr	r1, [r4]
   154ec:	cmp	r5, r1
   154f0:	bne	154c8 <__assert_fail@plt+0x3b60>
   154f4:	ldr	r0, [r4]
   154f8:	pop	{r4, r5, r6, pc}
   154fc:	ldr	r3, [r0, #16]
   15500:	cmp	r3, #0
   15504:	beq	15534 <__assert_fail@plt+0x3bcc>
   15508:	ldr	r3, [r0]
   1550c:	ldr	r2, [r0, #4]
   15510:	cmp	r3, r2
   15514:	bcc	15520 <__assert_fail@plt+0x3bb8>
   15518:	push	{r4, lr}
   1551c:	bl	11914 <abort@plt>
   15520:	ldr	r0, [r3]
   15524:	cmp	r0, #0
   15528:	bne	15538 <__assert_fail@plt+0x3bd0>
   1552c:	add	r3, r3, #8
   15530:	b	15510 <__assert_fail@plt+0x3ba8>
   15534:	mov	r0, r3
   15538:	bx	lr
   1553c:	push	{r4, r5, r6, lr}
   15540:	mov	r4, r0
   15544:	mov	r5, r1
   15548:	bl	14f64 <__assert_fail@plt+0x35fc>
   1554c:	mov	r2, r0
   15550:	mov	r3, r0
   15554:	ldr	r1, [r3]
   15558:	ldr	r3, [r3, #4]
   1555c:	cmp	r5, r1
   15560:	bne	15574 <__assert_fail@plt+0x3c0c>
   15564:	cmp	r3, #0
   15568:	beq	15574 <__assert_fail@plt+0x3c0c>
   1556c:	ldr	r0, [r3]
   15570:	pop	{r4, r5, r6, pc}
   15574:	cmp	r3, #0
   15578:	bne	15554 <__assert_fail@plt+0x3bec>
   1557c:	ldr	r3, [r4, #4]
   15580:	add	r2, r2, #8
   15584:	cmp	r2, r3
   15588:	bcc	15594 <__assert_fail@plt+0x3c2c>
   1558c:	mov	r0, #0
   15590:	pop	{r4, r5, r6, pc}
   15594:	ldr	r0, [r2]
   15598:	cmp	r0, #0
   1559c:	beq	15580 <__assert_fail@plt+0x3c18>
   155a0:	pop	{r4, r5, r6, pc}
   155a4:	ldr	ip, [r0]
   155a8:	mov	r3, #0
   155ac:	push	{r4, r5, lr}
   155b0:	ldr	lr, [r0, #4]
   155b4:	cmp	ip, lr
   155b8:	bcc	155c4 <__assert_fail@plt+0x3c5c>
   155bc:	mov	r0, r3
   155c0:	pop	{r4, r5, pc}
   155c4:	ldr	lr, [ip]
   155c8:	cmp	lr, #0
   155cc:	beq	155f8 <__assert_fail@plt+0x3c90>
   155d0:	add	r4, r1, r3, lsl #2
   155d4:	mov	lr, ip
   155d8:	cmp	r2, r3
   155dc:	bls	155bc <__assert_fail@plt+0x3c54>
   155e0:	ldr	r5, [lr]
   155e4:	add	r3, r3, #1
   155e8:	str	r5, [r4], #4
   155ec:	ldr	lr, [lr, #4]
   155f0:	cmp	lr, #0
   155f4:	bne	155d8 <__assert_fail@plt+0x3c70>
   155f8:	add	ip, ip, #8
   155fc:	b	155b0 <__assert_fail@plt+0x3c48>
   15600:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   15604:	mov	r7, r0
   15608:	ldr	r4, [r0]
   1560c:	mov	r8, r1
   15610:	mov	r9, r2
   15614:	mov	r6, #0
   15618:	ldr	r3, [r7, #4]
   1561c:	cmp	r4, r3
   15620:	bcc	1562c <__assert_fail@plt+0x3cc4>
   15624:	mov	r0, r6
   15628:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1562c:	ldr	r3, [r4]
   15630:	cmp	r3, #0
   15634:	beq	15660 <__assert_fail@plt+0x3cf8>
   15638:	mov	r5, r4
   1563c:	mov	r1, r9
   15640:	ldr	r0, [r5]
   15644:	blx	r8
   15648:	cmp	r0, #0
   1564c:	beq	15624 <__assert_fail@plt+0x3cbc>
   15650:	ldr	r5, [r5, #4]
   15654:	add	r6, r6, #1
   15658:	cmp	r5, #0
   1565c:	bne	1563c <__assert_fail@plt+0x3cd4>
   15660:	add	r4, r4, #8
   15664:	b	15618 <__assert_fail@plt+0x3cb0>
   15668:	push	{r4, r5, r6, lr}
   1566c:	sub	r4, r0, #1
   15670:	mov	r5, r1
   15674:	mov	r0, #0
   15678:	mov	r6, #31
   1567c:	ldrb	r3, [r4, #1]!
   15680:	cmp	r3, #0
   15684:	bne	1568c <__assert_fail@plt+0x3d24>
   15688:	pop	{r4, r5, r6, pc}
   1568c:	mov	r1, r5
   15690:	mla	r0, r6, r0, r3
   15694:	bl	194e8 <lchmod@@Base+0x36c4>
   15698:	mov	r0, r1
   1569c:	b	1567c <__assert_fail@plt+0x3d14>
   156a0:	push	{lr}		; (str lr, [sp, #-4]!)
   156a4:	mov	ip, r0
   156a8:	ldr	lr, [pc, #16]	; 156c0 <__assert_fail@plt+0x3d58>
   156ac:	ldm	lr!, {r0, r1, r2, r3}
   156b0:	stmia	ip!, {r0, r1, r2, r3}
   156b4:	ldr	r3, [lr]
   156b8:	str	r3, [ip]
   156bc:	pop	{pc}		; (ldr pc, [sp], #4)
   156c0:	muleq	r1, ip, r2
   156c4:	cmp	r2, #0
   156c8:	push	{r4, r5, r6, r7, r8, lr}
   156cc:	mov	r8, r0
   156d0:	ldr	r7, [pc, #176]	; 15788 <__assert_fail@plt+0x3e20>
   156d4:	mov	r0, #40	; 0x28
   156d8:	movne	r7, r2
   156dc:	cmp	r3, #0
   156e0:	mov	r5, r1
   156e4:	ldr	r6, [pc, #160]	; 1578c <__assert_fail@plt+0x3e24>
   156e8:	movne	r6, r3
   156ec:	bl	18b28 <lchmod@@Base+0x2d04>
   156f0:	subs	r4, r0, #0
   156f4:	beq	15770 <__assert_fail@plt+0x3e08>
   156f8:	ldr	r3, [pc, #144]	; 15790 <__assert_fail@plt+0x3e28>
   156fc:	cmp	r5, #0
   15700:	mov	r0, r4
   15704:	moveq	r5, r3
   15708:	str	r5, [r0, #20]!
   1570c:	bl	15140 <__assert_fail@plt+0x37d8>
   15710:	cmp	r0, #0
   15714:	beq	15778 <__assert_fail@plt+0x3e10>
   15718:	mov	r1, r5
   1571c:	mov	r0, r8
   15720:	bl	15078 <__assert_fail@plt+0x3710>
   15724:	cmp	r0, #0
   15728:	str	r0, [r4, #8]
   1572c:	beq	15778 <__assert_fail@plt+0x3e10>
   15730:	mov	r1, #8
   15734:	bl	18ae0 <lchmod@@Base+0x2cbc>
   15738:	cmp	r0, #0
   1573c:	str	r0, [r4]
   15740:	beq	15778 <__assert_fail@plt+0x3e10>
   15744:	ldr	r3, [r4, #8]
   15748:	ldr	r2, [sp, #24]
   1574c:	str	r7, [r4, #24]
   15750:	add	r0, r0, r3, lsl #3
   15754:	mov	r3, #0
   15758:	str	r0, [r4, #4]
   1575c:	str	r3, [r4, #12]
   15760:	str	r3, [r4, #16]
   15764:	str	r6, [r4, #28]
   15768:	str	r2, [r4, #32]
   1576c:	str	r3, [r4, #36]	; 0x24
   15770:	mov	r0, r4
   15774:	pop	{r4, r5, r6, r7, r8, pc}
   15778:	mov	r0, r4
   1577c:	bl	13188 <__assert_fail@plt+0x1820>
   15780:	mov	r4, #0
   15784:	b	15770 <__assert_fail@plt+0x3e08>
   15788:	andeq	r4, r1, r0, asr #30
   1578c:	andeq	r4, r1, r4, asr pc
   15790:	muleq	r1, ip, r2
   15794:	push	{r4, r5, r6, r7, r8, lr}
   15798:	mov	r5, r0
   1579c:	ldr	r4, [r0]
   157a0:	mov	r7, #0
   157a4:	add	r4, r4, #8
   157a8:	ldr	r2, [r5, #4]
   157ac:	sub	r3, r4, #8
   157b0:	cmp	r2, r3
   157b4:	bhi	157c8 <__assert_fail@plt+0x3e60>
   157b8:	mov	r3, #0
   157bc:	str	r3, [r5, #12]
   157c0:	str	r3, [r5, #16]
   157c4:	pop	{r4, r5, r6, r7, r8, pc}
   157c8:	ldr	r3, [r4, #-8]
   157cc:	cmp	r3, #0
   157d0:	ldrne	r6, [r4, #-4]
   157d4:	bne	15808 <__assert_fail@plt+0x3ea0>
   157d8:	add	r4, r4, #8
   157dc:	b	157a8 <__assert_fail@plt+0x3e40>
   157e0:	cmp	r3, #0
   157e4:	beq	157f0 <__assert_fail@plt+0x3e88>
   157e8:	ldr	r0, [r6]
   157ec:	blx	r3
   157f0:	ldr	r3, [r6, #4]
   157f4:	ldr	r2, [r5, #36]	; 0x24
   157f8:	str	r7, [r6]
   157fc:	str	r2, [r6, #4]
   15800:	str	r6, [r5, #36]	; 0x24
   15804:	mov	r6, r3
   15808:	cmp	r6, #0
   1580c:	ldr	r3, [r5, #32]
   15810:	bne	157e0 <__assert_fail@plt+0x3e78>
   15814:	cmp	r3, #0
   15818:	beq	15824 <__assert_fail@plt+0x3ebc>
   1581c:	ldr	r0, [r4, #-8]
   15820:	blx	r3
   15824:	str	r7, [r4, #-8]
   15828:	str	r7, [r4, #-4]
   1582c:	b	157d8 <__assert_fail@plt+0x3e70>
   15830:	ldr	r3, [r0, #32]
   15834:	push	{r4, r5, r6, lr}
   15838:	cmp	r3, #0
   1583c:	mov	r4, r0
   15840:	bne	15874 <__assert_fail@plt+0x3f0c>
   15844:	ldr	r5, [r4]
   15848:	ldr	r3, [r4, #4]
   1584c:	cmp	r5, r3
   15850:	bcc	158c4 <__assert_fail@plt+0x3f5c>
   15854:	ldr	r0, [r4, #36]	; 0x24
   15858:	cmp	r0, #0
   1585c:	bne	158e4 <__assert_fail@plt+0x3f7c>
   15860:	ldr	r0, [r4]
   15864:	bl	13188 <__assert_fail@plt+0x1820>
   15868:	mov	r0, r4
   1586c:	pop	{r4, r5, r6, lr}
   15870:	b	13188 <__assert_fail@plt+0x1820>
   15874:	ldr	r3, [r0, #16]
   15878:	cmp	r3, #0
   1587c:	ldrne	r5, [r0]
   15880:	beq	15844 <__assert_fail@plt+0x3edc>
   15884:	ldr	r3, [r4, #4]
   15888:	cmp	r5, r3
   1588c:	bcs	15844 <__assert_fail@plt+0x3edc>
   15890:	ldr	r3, [r5]
   15894:	cmp	r3, #0
   15898:	movne	r6, r5
   1589c:	bne	158a8 <__assert_fail@plt+0x3f40>
   158a0:	add	r5, r5, #8
   158a4:	b	15884 <__assert_fail@plt+0x3f1c>
   158a8:	ldr	r0, [r6]
   158ac:	ldr	r3, [r4, #32]
   158b0:	blx	r3
   158b4:	ldr	r6, [r6, #4]
   158b8:	cmp	r6, #0
   158bc:	bne	158a8 <__assert_fail@plt+0x3f40>
   158c0:	b	158a0 <__assert_fail@plt+0x3f38>
   158c4:	ldr	r0, [r5, #4]
   158c8:	cmp	r0, #0
   158cc:	addeq	r5, r5, #8
   158d0:	beq	15848 <__assert_fail@plt+0x3ee0>
   158d4:	ldr	r6, [r0, #4]
   158d8:	bl	13188 <__assert_fail@plt+0x1820>
   158dc:	mov	r0, r6
   158e0:	b	158c8 <__assert_fail@plt+0x3f60>
   158e4:	ldr	r5, [r0, #4]
   158e8:	bl	13188 <__assert_fail@plt+0x1820>
   158ec:	mov	r0, r5
   158f0:	b	15858 <__assert_fail@plt+0x3ef0>
   158f4:	push	{r4, r5, lr}
   158f8:	mov	r4, r0
   158fc:	sub	sp, sp, #44	; 0x2c
   15900:	mov	r0, r1
   15904:	ldr	r1, [r4, #20]
   15908:	bl	15078 <__assert_fail@plt+0x3710>
   1590c:	subs	r5, r0, #0
   15910:	bne	15924 <__assert_fail@plt+0x3fbc>
   15914:	mov	r5, #0
   15918:	mov	r0, r5
   1591c:	add	sp, sp, #44	; 0x2c
   15920:	pop	{r4, r5, pc}
   15924:	ldr	r3, [r4, #8]
   15928:	cmp	r5, r3
   1592c:	beq	15a14 <__assert_fail@plt+0x40ac>
   15930:	mov	r1, #8
   15934:	bl	18ae0 <lchmod@@Base+0x2cbc>
   15938:	cmp	r0, #0
   1593c:	str	r0, [sp]
   15940:	beq	15914 <__assert_fail@plt+0x3fac>
   15944:	ldr	r3, [r4, #20]
   15948:	add	r0, r0, r5, lsl #3
   1594c:	str	r3, [sp, #20]
   15950:	ldr	r3, [r4, #24]
   15954:	mov	r2, #0
   15958:	str	r3, [sp, #24]
   1595c:	ldr	r3, [r4, #28]
   15960:	str	r0, [sp, #4]
   15964:	str	r3, [sp, #28]
   15968:	ldr	r3, [r4, #32]
   1596c:	mov	r1, r4
   15970:	str	r3, [sp, #32]
   15974:	ldr	r3, [r4, #36]	; 0x24
   15978:	mov	r0, sp
   1597c:	str	r5, [sp, #8]
   15980:	str	r2, [sp, #12]
   15984:	str	r2, [sp, #16]
   15988:	str	r3, [sp, #36]	; 0x24
   1598c:	bl	151f0 <__assert_fail@plt+0x3888>
   15990:	subs	r5, r0, #0
   15994:	beq	159cc <__assert_fail@plt+0x4064>
   15998:	ldr	r0, [r4]
   1599c:	bl	13188 <__assert_fail@plt+0x1820>
   159a0:	ldr	r3, [sp]
   159a4:	str	r3, [r4]
   159a8:	ldr	r3, [sp, #4]
   159ac:	str	r3, [r4, #4]
   159b0:	ldr	r3, [sp, #8]
   159b4:	str	r3, [r4, #8]
   159b8:	ldr	r3, [sp, #12]
   159bc:	str	r3, [r4, #12]
   159c0:	ldr	r3, [sp, #36]	; 0x24
   159c4:	str	r3, [r4, #36]	; 0x24
   159c8:	b	15918 <__assert_fail@plt+0x3fb0>
   159cc:	ldr	r3, [sp, #36]	; 0x24
   159d0:	mov	r2, #1
   159d4:	str	r3, [r4, #36]	; 0x24
   159d8:	mov	r1, sp
   159dc:	mov	r0, r4
   159e0:	bl	151f0 <__assert_fail@plt+0x3888>
   159e4:	cmp	r0, #0
   159e8:	bne	159f0 <__assert_fail@plt+0x4088>
   159ec:	bl	11914 <abort@plt>
   159f0:	mov	r2, r5
   159f4:	mov	r1, sp
   159f8:	mov	r0, r4
   159fc:	bl	151f0 <__assert_fail@plt+0x3888>
   15a00:	cmp	r0, #0
   15a04:	beq	159ec <__assert_fail@plt+0x4084>
   15a08:	ldr	r0, [sp]
   15a0c:	bl	13188 <__assert_fail@plt+0x1820>
   15a10:	b	15918 <__assert_fail@plt+0x3fb0>
   15a14:	mov	r5, #1
   15a18:	b	15918 <__assert_fail@plt+0x3fb0>
   15a1c:	push	{r0, r1, r4, r5, r6, lr}
   15a20:	subs	r6, r1, #0
   15a24:	bne	15a2c <__assert_fail@plt+0x40c4>
   15a28:	bl	11914 <abort@plt>
   15a2c:	mov	r5, r2
   15a30:	mov	r3, #0
   15a34:	add	r2, sp, #4
   15a38:	mov	r4, r0
   15a3c:	bl	14f98 <__assert_fail@plt+0x3630>
   15a40:	cmp	r0, #0
   15a44:	beq	15a5c <__assert_fail@plt+0x40f4>
   15a48:	cmp	r5, #0
   15a4c:	strne	r0, [r5]
   15a50:	movne	r0, #0
   15a54:	moveq	r0, r5
   15a58:	b	15adc <__assert_fail@plt+0x4174>
   15a5c:	vldr	s15, [r4, #12]
   15a60:	ldr	r3, [r4, #20]
   15a64:	vcvt.f32.u32	s14, s15
   15a68:	vldr	s15, [r4, #8]
   15a6c:	vldr	s13, [r3, #8]
   15a70:	vcvt.f32.u32	s15, s15
   15a74:	vmul.f32	s15, s15, s13
   15a78:	vcmpe.f32	s14, s15
   15a7c:	vmrs	APSR_nzcv, fpscr
   15a80:	ble	15b18 <__assert_fail@plt+0x41b0>
   15a84:	add	r0, r4, #20
   15a88:	bl	15140 <__assert_fail@plt+0x37d8>
   15a8c:	vldr	s15, [r4, #8]
   15a90:	ldr	r3, [r4, #20]
   15a94:	vldr	s14, [r4, #12]
   15a98:	vcvt.f32.u32	s15, s15
   15a9c:	vldr	s13, [r3, #8]
   15aa0:	vcvt.f32.u32	s14, s14
   15aa4:	vmul.f32	s12, s13, s15
   15aa8:	vcmpe.f32	s14, s12
   15aac:	vmrs	APSR_nzcv, fpscr
   15ab0:	ble	15b18 <__assert_fail@plt+0x41b0>
   15ab4:	vldr	s14, [r3, #12]
   15ab8:	ldrb	r2, [r3, #16]
   15abc:	vmul.f32	s15, s15, s14
   15ac0:	cmp	r2, #0
   15ac4:	vldr	s14, [pc, #200]	; 15b94 <__assert_fail@plt+0x422c>
   15ac8:	vmuleq.f32	s15, s15, s13
   15acc:	vcmpe.f32	s15, s14
   15ad0:	vmrs	APSR_nzcv, fpscr
   15ad4:	blt	15ae4 <__assert_fail@plt+0x417c>
   15ad8:	mvn	r0, #0
   15adc:	add	sp, sp, #8
   15ae0:	pop	{r4, r5, r6, pc}
   15ae4:	vcvt.u32.f32	s15, s15
   15ae8:	mov	r0, r4
   15aec:	vmov	r1, s15
   15af0:	bl	158f4 <__assert_fail@plt+0x3f8c>
   15af4:	cmp	r0, #0
   15af8:	beq	15ad8 <__assert_fail@plt+0x4170>
   15afc:	mov	r3, #0
   15b00:	add	r2, sp, #4
   15b04:	mov	r1, r6
   15b08:	mov	r0, r4
   15b0c:	bl	14f98 <__assert_fail@plt+0x3630>
   15b10:	cmp	r0, #0
   15b14:	bne	15a28 <__assert_fail@plt+0x40c0>
   15b18:	ldr	r3, [sp, #4]
   15b1c:	ldr	r2, [r3]
   15b20:	cmp	r2, #0
   15b24:	beq	15b74 <__assert_fail@plt+0x420c>
   15b28:	ldr	r0, [r4, #36]	; 0x24
   15b2c:	cmp	r0, #0
   15b30:	ldrne	r3, [r0, #4]
   15b34:	strne	r3, [r4, #36]	; 0x24
   15b38:	bne	15b4c <__assert_fail@plt+0x41e4>
   15b3c:	mov	r0, #8
   15b40:	bl	18b28 <lchmod@@Base+0x2d04>
   15b44:	cmp	r0, #0
   15b48:	beq	15ad8 <__assert_fail@plt+0x4170>
   15b4c:	ldr	r3, [sp, #4]
   15b50:	str	r6, [r0]
   15b54:	ldr	r2, [r3, #4]
   15b58:	str	r2, [r0, #4]
   15b5c:	str	r0, [r3, #4]
   15b60:	ldr	r3, [r4, #16]
   15b64:	add	r3, r3, #1
   15b68:	str	r3, [r4, #16]
   15b6c:	mov	r0, #1
   15b70:	b	15adc <__assert_fail@plt+0x4174>
   15b74:	str	r6, [r3]
   15b78:	ldr	r3, [r4, #16]
   15b7c:	add	r3, r3, #1
   15b80:	str	r3, [r4, #16]
   15b84:	ldr	r3, [r4, #12]
   15b88:	add	r3, r3, #1
   15b8c:	str	r3, [r4, #12]
   15b90:	b	15b6c <__assert_fail@plt+0x4204>
   15b94:	svcmi	0x00800000
   15b98:	push	{r0, r1, r4, lr}
   15b9c:	add	r2, sp, #4
   15ba0:	mov	r4, r1
   15ba4:	bl	15a1c <__assert_fail@plt+0x40b4>
   15ba8:	cmn	r0, #1
   15bac:	moveq	r0, #0
   15bb0:	beq	15bc0 <__assert_fail@plt+0x4258>
   15bb4:	cmp	r0, #0
   15bb8:	movne	r0, r4
   15bbc:	ldreq	r0, [sp, #4]
   15bc0:	add	sp, sp, #8
   15bc4:	pop	{r4, pc}
   15bc8:	push	{r0, r1, r4, r5, r6, lr}
   15bcc:	mov	r3, #1
   15bd0:	add	r2, sp, #4
   15bd4:	mov	r4, r0
   15bd8:	bl	14f98 <__assert_fail@plt+0x3630>
   15bdc:	subs	r5, r0, #0
   15be0:	beq	15c98 <__assert_fail@plt+0x4330>
   15be4:	ldr	r3, [r4, #16]
   15be8:	sub	r3, r3, #1
   15bec:	str	r3, [r4, #16]
   15bf0:	ldr	r3, [sp, #4]
   15bf4:	ldr	r3, [r3]
   15bf8:	cmp	r3, #0
   15bfc:	bne	15c98 <__assert_fail@plt+0x4330>
   15c00:	vldr	s14, [r4, #8]
   15c04:	ldr	r3, [r4, #12]
   15c08:	sub	r3, r3, #1
   15c0c:	vcvt.f32.u32	s14, s14
   15c10:	vmov	s15, r3
   15c14:	str	r3, [r4, #12]
   15c18:	ldr	r3, [r4, #20]
   15c1c:	vcvt.f32.u32	s15, s15
   15c20:	vldr	s13, [r3]
   15c24:	vmul.f32	s14, s14, s13
   15c28:	vcmpe.f32	s15, s14
   15c2c:	vmrs	APSR_nzcv, fpscr
   15c30:	bpl	15c98 <__assert_fail@plt+0x4330>
   15c34:	add	r0, r4, #20
   15c38:	bl	15140 <__assert_fail@plt+0x37d8>
   15c3c:	vldr	s15, [r4, #8]
   15c40:	vldr	s14, [r4, #12]
   15c44:	ldr	r3, [r4, #20]
   15c48:	vcvt.f32.u32	s15, s15
   15c4c:	vcvt.f32.u32	s13, s14
   15c50:	vldr	s14, [r3]
   15c54:	vmul.f32	s14, s15, s14
   15c58:	vcmpe.f32	s13, s14
   15c5c:	vmrs	APSR_nzcv, fpscr
   15c60:	bpl	15c98 <__assert_fail@plt+0x4330>
   15c64:	vldr	s14, [r3, #4]
   15c68:	ldrb	r2, [r3, #16]
   15c6c:	mov	r0, r4
   15c70:	vmul.f32	s15, s15, s14
   15c74:	cmp	r2, #0
   15c78:	vldreq	s14, [r3, #8]
   15c7c:	vmuleq.f32	s15, s15, s14
   15c80:	vcvt.u32.f32	s15, s15
   15c84:	vmov	r1, s15
   15c88:	bl	158f4 <__assert_fail@plt+0x3f8c>
   15c8c:	cmp	r0, #0
   15c90:	ldreq	r0, [r4, #36]	; 0x24
   15c94:	beq	15cb0 <__assert_fail@plt+0x4348>
   15c98:	mov	r0, r5
   15c9c:	add	sp, sp, #8
   15ca0:	pop	{r4, r5, r6, pc}
   15ca4:	ldr	r6, [r0, #4]
   15ca8:	bl	13188 <__assert_fail@plt+0x1820>
   15cac:	mov	r0, r6
   15cb0:	cmp	r0, #0
   15cb4:	bne	15ca4 <__assert_fail@plt+0x433c>
   15cb8:	str	r0, [r4, #36]	; 0x24
   15cbc:	b	15c98 <__assert_fail@plt+0x4330>
   15cc0:	b	15bc8 <__assert_fail@plt+0x4260>
   15cc4:	push	{r4, r5, r6, lr}
   15cc8:	mov	r4, r0
   15ccc:	ldr	r0, [r0]
   15cd0:	mov	r6, r1
   15cd4:	bl	19114 <lchmod@@Base+0x32f0>
   15cd8:	ldrd	r4, [r4, #8]
   15cdc:	mov	r2, r6
   15ce0:	mov	r3, #0
   15ce4:	eor	r4, r4, r0
   15ce8:	mov	r0, r4
   15cec:	mov	r1, r5
   15cf0:	bl	19748 <lchmod@@Base+0x3924>
   15cf4:	mov	r0, r2
   15cf8:	pop	{r4, r5, r6, pc}
   15cfc:	ldrd	r2, [r1, #8]
   15d00:	push	{r4, r5, r6, lr}
   15d04:	ldrd	r4, [r0, #8]
   15d08:	cmp	r5, r3
   15d0c:	cmpeq	r4, r2
   15d10:	bne	15d40 <__assert_fail@plt+0x43d8>
   15d14:	ldrd	r4, [r0, #16]
   15d18:	ldrd	r2, [r1, #16]
   15d1c:	cmp	r5, r3
   15d20:	cmpeq	r4, r2
   15d24:	bne	15d40 <__assert_fail@plt+0x43d8>
   15d28:	ldr	r1, [r1]
   15d2c:	ldr	r0, [r0]
   15d30:	bl	11548 <strcmp@plt>
   15d34:	clz	r0, r0
   15d38:	lsr	r0, r0, #5
   15d3c:	pop	{r4, r5, r6, pc}
   15d40:	mov	r0, #0
   15d44:	pop	{r4, r5, r6, pc}
   15d48:	push	{r4, lr}
   15d4c:	mov	r4, r0
   15d50:	ldr	r0, [r0]
   15d54:	bl	13188 <__assert_fail@plt+0x1820>
   15d58:	mov	r0, r4
   15d5c:	pop	{r4, lr}
   15d60:	b	13188 <__assert_fail@plt+0x1820>
   15d64:	mov	r3, #1
   15d68:	strb	r3, [r0, #28]
   15d6c:	mov	r3, #0
   15d70:	str	r3, [r0, #20]
   15d74:	str	r3, [r0, #24]
   15d78:	str	r1, [r0]
   15d7c:	str	r1, [r0, #4]
   15d80:	str	r1, [r0, #8]
   15d84:	str	r1, [r0, #12]
   15d88:	str	r1, [r0, #16]
   15d8c:	bx	lr
   15d90:	ldrb	r0, [r0, #28]
   15d94:	bx	lr
   15d98:	ldrb	ip, [r0, #28]
   15d9c:	ldr	r3, [r0, #20]
   15da0:	mov	r2, r0
   15da4:	eor	ip, ip, #1
   15da8:	add	r3, ip, r3
   15dac:	and	r3, r3, #3
   15db0:	ldr	r0, [r0, r3, lsl #2]
   15db4:	str	r1, [r2, r3, lsl #2]
   15db8:	ldr	r1, [r2, #24]
   15dbc:	str	r3, [r2, #20]
   15dc0:	cmp	r3, r1
   15dc4:	addeq	r3, ip, r3
   15dc8:	andeq	r3, r3, #3
   15dcc:	streq	r3, [r2, #24]
   15dd0:	mov	r3, #0
   15dd4:	strb	r3, [r2, #28]
   15dd8:	bx	lr
   15ddc:	ldrb	r2, [r0, #28]
   15de0:	cmp	r2, #0
   15de4:	beq	15df0 <__assert_fail@plt+0x4488>
   15de8:	push	{r4, lr}
   15dec:	bl	11914 <abort@plt>
   15df0:	mov	r3, r0
   15df4:	ldr	r2, [r0, #20]
   15df8:	ldr	r1, [r3, #16]
   15dfc:	ldr	r0, [r0, r2, lsl #2]
   15e00:	str	r1, [r3, r2, lsl #2]
   15e04:	ldr	r1, [r3, #24]
   15e08:	cmp	r2, r1
   15e0c:	addne	r2, r2, #3
   15e10:	moveq	r2, #1
   15e14:	andne	r2, r2, #3
   15e18:	strbeq	r2, [r3, #28]
   15e1c:	strne	r2, [r3, #20]
   15e20:	bx	lr

00015e24 <lchmod@@Base>:
   15e24:	push	{r4, r5, r6, r7, r8, r9, lr}
   15e28:	mov	r6, r1
   15e2c:	sub	sp, sp, #148	; 0x94
   15e30:	mov	r1, #2654208	; 0x288000
   15e34:	mov	r9, r0
   15e38:	bl	116c8 <open64@plt>
   15e3c:	subs	r5, r0, #0
   15e40:	movlt	r4, r5
   15e44:	blt	15e7c <lchmod@@Base+0x58>
   15e48:	mov	r3, #4096	; 0x1000
   15e4c:	add	r2, sp, #40	; 0x28
   15e50:	ldr	r1, [pc, #188]	; 15f14 <lchmod@@Base+0xf0>
   15e54:	bl	19968 <lchmod@@Base+0x3b44>
   15e58:	cmp	r0, #0
   15e5c:	beq	15e88 <lchmod@@Base+0x64>
   15e60:	bl	117a0 <__errno_location@plt>
   15e64:	ldr	r6, [r0]
   15e68:	mov	r4, r0
   15e6c:	mov	r0, r5
   15e70:	bl	11920 <close@plt>
   15e74:	str	r6, [r4]
   15e78:	mvn	r4, #0
   15e7c:	mov	r0, r4
   15e80:	add	sp, sp, #148	; 0x94
   15e84:	pop	{r4, r5, r6, r7, r8, r9, pc}
   15e88:	ldr	r3, [sp, #56]	; 0x38
   15e8c:	and	r3, r3, #61440	; 0xf000
   15e90:	cmp	r3, #40960	; 0xa000
   15e94:	bne	15eb0 <lchmod@@Base+0x8c>
   15e98:	mov	r0, r5
   15e9c:	bl	11920 <close@plt>
   15ea0:	bl	117a0 <__errno_location@plt>
   15ea4:	mov	r3, #95	; 0x5f
   15ea8:	str	r3, [r0]
   15eac:	b	15e78 <lchmod@@Base+0x54>
   15eb0:	ldr	r3, [pc, #96]	; 15f18 <lchmod@@Base+0xf4>
   15eb4:	mov	r2, #26
   15eb8:	mov	r1, #1
   15ebc:	str	r5, [sp]
   15ec0:	add	r0, sp, #12
   15ec4:	bl	117ac <__sprintf_chk@plt>
   15ec8:	mov	r1, r6
   15ecc:	add	r0, sp, #12
   15ed0:	bl	118d8 <chmod@plt>
   15ed4:	mov	r4, r0
   15ed8:	bl	117a0 <__errno_location@plt>
   15edc:	ldr	r8, [r0]
   15ee0:	mov	r7, r0
   15ee4:	mov	r0, r5
   15ee8:	bl	11920 <close@plt>
   15eec:	cmp	r4, #0
   15ef0:	beq	15e7c <lchmod@@Base+0x58>
   15ef4:	cmp	r8, #2
   15ef8:	strne	r8, [r7]
   15efc:	bne	15e7c <lchmod@@Base+0x58>
   15f00:	mov	r1, r6
   15f04:	mov	r0, r9
   15f08:	bl	118d8 <chmod@plt>
   15f0c:	mov	r4, r0
   15f10:	b	15e7c <lchmod@@Base+0x58>
   15f14:	andeq	r9, r1, r7, asr #31
   15f18:	andeq	sl, r1, r9, lsl r3
   15f1c:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15f20:	mov	r4, r0
   15f24:	ldrb	r3, [r0]
   15f28:	sub	r3, r3, #48	; 0x30
   15f2c:	cmp	r3, #7
   15f30:	subhi	r3, r0, #1
   15f34:	movhi	r0, #1
   15f38:	bhi	15fd8 <lchmod@@Base+0x1b4>
   15f3c:	ldr	r0, [pc, #740]	; 16228 <lchmod@@Base+0x404>
   15f40:	mov	r2, r4
   15f44:	mov	r5, #0
   15f48:	ldrb	r3, [r2], #1
   15f4c:	lsl	r5, r5, #3
   15f50:	sub	r5, r5, #48	; 0x30
   15f54:	add	r5, r3, r5
   15f58:	cmp	r5, r0
   15f5c:	bhi	16220 <lchmod@@Base+0x3fc>
   15f60:	ldrb	r3, [r2]
   15f64:	sub	r1, r3, #48	; 0x30
   15f68:	cmp	r1, #7
   15f6c:	bls	15f48 <lchmod@@Base+0x124>
   15f70:	cmp	r3, #0
   15f74:	bne	16220 <lchmod@@Base+0x3fc>
   15f78:	sub	r2, r2, r4
   15f7c:	cmp	r2, #4
   15f80:	andle	r4, r5, #3072	; 0xc00
   15f84:	mov	r0, #32
   15f88:	mvnle	r4, r4, lsr #10
   15f8c:	ldrgt	r4, [pc, #660]	; 16228 <lchmod@@Base+0x404>
   15f90:	mvnle	r4, r4, lsl #10
   15f94:	bl	18190 <lchmod@@Base+0x236c>
   15f98:	mov	r3, #61	; 0x3d
   15f9c:	strb	r3, [r0]
   15fa0:	mov	r3, #1
   15fa4:	strb	r3, [r0, #1]
   15fa8:	ldr	r3, [pc, #632]	; 16228 <lchmod@@Base+0x404>
   15fac:	str	r4, [r0, #12]
   15fb0:	stmib	r0, {r3, r5}
   15fb4:	mov	r3, #0
   15fb8:	strb	r3, [r0, #17]
   15fbc:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15fc0:	and	ip, r5, #239	; 0xef
   15fc4:	cmp	r5, #43	; 0x2b
   15fc8:	cmpne	ip, #45	; 0x2d
   15fcc:	moveq	ip, #1
   15fd0:	movne	ip, #0
   15fd4:	add	r0, r0, ip
   15fd8:	ldrb	r5, [r3, #1]!
   15fdc:	cmp	r5, #0
   15fe0:	bne	15fc0 <lchmod@@Base+0x19c>
   15fe4:	mov	r1, #16
   15fe8:	ldr	sl, [pc, #568]	; 16228 <lchmod@@Base+0x404>
   15fec:	bl	18268 <lchmod@@Base+0x2444>
   15ff0:	mov	ip, r5
   15ff4:	mov	r1, #0
   15ff8:	mov	r2, r4
   15ffc:	add	r4, r4, #1
   16000:	ldrb	r3, [r2]
   16004:	cmp	r3, #97	; 0x61
   16008:	beq	160d4 <lchmod@@Base+0x2b0>
   1600c:	bhi	1609c <lchmod@@Base+0x278>
   16010:	cmp	r3, #45	; 0x2d
   16014:	beq	16028 <lchmod@@Base+0x204>
   16018:	cmp	r3, #61	; 0x3d
   1601c:	beq	16028 <lchmod@@Base+0x204>
   16020:	cmp	r3, #43	; 0x2b
   16024:	bne	1621c <lchmod@@Base+0x3f8>
   16028:	add	lr, r0, ip, lsl #4
   1602c:	mov	r8, #3
   16030:	mov	r7, #0
   16034:	mov	r9, #1
   16038:	ldrb	r3, [r2, #1]
   1603c:	add	r5, r2, #1
   16040:	ldrb	fp, [r2]
   16044:	cmp	r3, #103	; 0x67
   16048:	beq	16198 <lchmod@@Base+0x374>
   1604c:	bhi	160dc <lchmod@@Base+0x2b8>
   16050:	sub	r3, r3, #48	; 0x30
   16054:	cmp	r3, #7
   16058:	movls	r3, #0
   1605c:	movls	r2, r5
   16060:	bls	16100 <lchmod@@Base+0x2dc>
   16064:	mov	r4, r9
   16068:	mov	r3, #0
   1606c:	mov	r2, r5
   16070:	add	r5, r5, #1
   16074:	ldrb	r6, [r2]
   16078:	cmp	r6, #115	; 0x73
   1607c:	beq	161f8 <lchmod@@Base+0x3d4>
   16080:	bhi	161c0 <lchmod@@Base+0x39c>
   16084:	cmp	r6, #88	; 0x58
   16088:	beq	16200 <lchmod@@Base+0x3dc>
   1608c:	cmp	r6, #114	; 0x72
   16090:	beq	161e0 <lchmod@@Base+0x3bc>
   16094:	mov	r5, r7
   16098:	b	16148 <lchmod@@Base+0x324>
   1609c:	cmp	r3, #111	; 0x6f
   160a0:	beq	160c8 <lchmod@@Base+0x2a4>
   160a4:	cmp	r3, #117	; 0x75
   160a8:	beq	160c0 <lchmod@@Base+0x29c>
   160ac:	cmp	r3, #103	; 0x67
   160b0:	bne	1621c <lchmod@@Base+0x3f8>
   160b4:	orr	r1, r1, #1072	; 0x430
   160b8:	orr	r1, r1, #8
   160bc:	b	15ff8 <lchmod@@Base+0x1d4>
   160c0:	orr	r1, r1, #2496	; 0x9c0
   160c4:	b	15ff8 <lchmod@@Base+0x1d4>
   160c8:	orr	r1, r1, #516	; 0x204
   160cc:	orr	r1, r1, #3
   160d0:	b	15ff8 <lchmod@@Base+0x1d4>
   160d4:	ldr	r1, [pc, #332]	; 16228 <lchmod@@Base+0x404>
   160d8:	b	15ff8 <lchmod@@Base+0x1d4>
   160dc:	cmp	r3, #111	; 0x6f
   160e0:	beq	161ac <lchmod@@Base+0x388>
   160e4:	cmp	r3, #117	; 0x75
   160e8:	bne	16064 <lchmod@@Base+0x240>
   160ec:	add	r2, r2, #2
   160f0:	mov	r4, r8
   160f4:	mov	r5, r7
   160f8:	mov	r3, #448	; 0x1c0
   160fc:	b	16148 <lchmod@@Base+0x324>
   16100:	ldrb	r4, [r2], #1
   16104:	lsl	r3, r3, #3
   16108:	sub	r3, r3, #48	; 0x30
   1610c:	add	r3, r4, r3
   16110:	cmp	r3, sl
   16114:	bhi	1621c <lchmod@@Base+0x3f8>
   16118:	ldrb	r4, [r2]
   1611c:	sub	r5, r4, #48	; 0x30
   16120:	cmp	r5, #7
   16124:	bls	16100 <lchmod@@Base+0x2dc>
   16128:	cmp	r1, #0
   1612c:	bne	1621c <lchmod@@Base+0x3f8>
   16130:	cmp	r4, #0
   16134:	cmpne	r4, #44	; 0x2c
   16138:	bne	1621c <lchmod@@Base+0x3f8>
   1613c:	ldr	r1, [pc, #228]	; 16228 <lchmod@@Base+0x404>
   16140:	mov	r4, r9
   16144:	mov	r5, r1
   16148:	cmp	r5, #0
   1614c:	stmib	lr, {r1, r3}
   16150:	add	ip, ip, #1
   16154:	strb	fp, [lr]
   16158:	strb	r4, [lr, #1]
   1615c:	movne	r3, r5
   16160:	bne	1616c <lchmod@@Base+0x348>
   16164:	cmp	r1, #0
   16168:	andne	r3, r3, r1
   1616c:	str	r3, [lr, #12]
   16170:	ldrb	r3, [r2]
   16174:	add	lr, lr, #16
   16178:	and	r4, r3, #239	; 0xef
   1617c:	cmp	r3, #43	; 0x2b
   16180:	cmpne	r4, #45	; 0x2d
   16184:	beq	16038 <lchmod@@Base+0x214>
   16188:	cmp	r3, #44	; 0x2c
   1618c:	bne	16208 <lchmod@@Base+0x3e4>
   16190:	add	r4, r2, #1
   16194:	b	15ff4 <lchmod@@Base+0x1d0>
   16198:	add	r2, r2, #2
   1619c:	mov	r4, r8
   161a0:	mov	r5, r7
   161a4:	mov	r3, #56	; 0x38
   161a8:	b	16148 <lchmod@@Base+0x324>
   161ac:	add	r2, r2, #2
   161b0:	mov	r4, r8
   161b4:	mov	r5, r7
   161b8:	mov	r3, #7
   161bc:	b	16148 <lchmod@@Base+0x324>
   161c0:	cmp	r6, #119	; 0x77
   161c4:	beq	161e8 <lchmod@@Base+0x3c4>
   161c8:	cmp	r6, #120	; 0x78
   161cc:	beq	161f0 <lchmod@@Base+0x3cc>
   161d0:	cmp	r6, #116	; 0x74
   161d4:	bne	16094 <lchmod@@Base+0x270>
   161d8:	orr	r3, r3, #512	; 0x200
   161dc:	b	1606c <lchmod@@Base+0x248>
   161e0:	orr	r3, r3, #292	; 0x124
   161e4:	b	1606c <lchmod@@Base+0x248>
   161e8:	orr	r3, r3, #146	; 0x92
   161ec:	b	1606c <lchmod@@Base+0x248>
   161f0:	orr	r3, r3, #73	; 0x49
   161f4:	b	1606c <lchmod@@Base+0x248>
   161f8:	orr	r3, r3, #3072	; 0xc00
   161fc:	b	1606c <lchmod@@Base+0x248>
   16200:	mov	r4, #2
   16204:	b	1606c <lchmod@@Base+0x248>
   16208:	cmp	r3, #0
   1620c:	bne	1621c <lchmod@@Base+0x3f8>
   16210:	add	ip, r0, ip, lsl #4
   16214:	strb	r3, [ip, #1]
   16218:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1621c:	bl	13188 <__assert_fail@plt+0x1820>
   16220:	mov	r0, #0
   16224:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16228:	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   1622c:	push	{r4, r5, lr}
   16230:	sub	sp, sp, #108	; 0x6c
   16234:	mov	r1, sp
   16238:	bl	19938 <lchmod@@Base+0x3b14>
   1623c:	subs	r4, r0, #0
   16240:	movne	r0, #0
   16244:	bne	16274 <lchmod@@Base+0x450>
   16248:	mov	r0, #32
   1624c:	ldr	r5, [sp, #16]
   16250:	bl	18190 <lchmod@@Base+0x236c>
   16254:	mov	r3, #61	; 0x3d
   16258:	strb	r3, [r0]
   1625c:	mov	r3, #1
   16260:	strb	r3, [r0, #1]
   16264:	ldr	r3, [pc, #16]	; 1627c <lchmod@@Base+0x458>
   16268:	strb	r4, [r0, #17]
   1626c:	str	r3, [r0, #12]
   16270:	stmib	r0, {r3, r5}
   16274:	add	sp, sp, #108	; 0x6c
   16278:	pop	{r4, r5, pc}
   1627c:	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   16280:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   16284:	cmp	r1, #0
   16288:	ldr	r7, [pc, #248]	; 16388 <lchmod@@Base+0x564>
   1628c:	ldr	r5, [sp, #32]
   16290:	and	r0, r0, r7
   16294:	movne	r6, #3072	; 0xc00
   16298:	moveq	r6, #0
   1629c:	add	r3, r3, #16
   162a0:	mov	r4, #0
   162a4:	mvn	r2, r2
   162a8:	ldrb	r9, [r3, #-15]
   162ac:	cmp	r9, #0
   162b0:	bne	162c0 <lchmod@@Base+0x49c>
   162b4:	cmp	r5, #0
   162b8:	strne	r4, [r5]
   162bc:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   162c0:	ldr	r8, [r3, #-4]
   162c4:	cmp	r9, #2
   162c8:	ldr	ip, [r3, #-12]
   162cc:	bic	r8, r6, r8
   162d0:	ldr	lr, [r3, #-8]
   162d4:	beq	16354 <lchmod@@Base+0x530>
   162d8:	cmp	r9, #3
   162dc:	bne	16314 <lchmod@@Base+0x4f0>
   162e0:	and	lr, lr, r0
   162e4:	tst	lr, #292	; 0x124
   162e8:	movne	r9, #292	; 0x124
   162ec:	moveq	r9, #0
   162f0:	tst	lr, #146	; 0x92
   162f4:	movne	sl, #146	; 0x92
   162f8:	moveq	sl, #0
   162fc:	tst	lr, #73	; 0x49
   16300:	orr	sl, r9, sl
   16304:	movne	r9, #73	; 0x49
   16308:	moveq	r9, #0
   1630c:	orr	r9, r9, sl
   16310:	orr	lr, r9, lr
   16314:	cmp	ip, #0
   16318:	movne	r9, ip
   1631c:	moveq	r9, r2
   16320:	bic	lr, lr, r8
   16324:	and	lr, lr, r9
   16328:	ldrb	r9, [r3, #-16]
   1632c:	cmp	r9, #45	; 0x2d
   16330:	orreq	r4, r4, lr
   16334:	biceq	r0, r0, lr
   16338:	beq	16380 <lchmod@@Base+0x55c>
   1633c:	cmp	r9, #61	; 0x3d
   16340:	beq	16364 <lchmod@@Base+0x540>
   16344:	cmp	r9, #43	; 0x2b
   16348:	orreq	r4, r4, lr
   1634c:	orreq	r0, r0, lr
   16350:	b	16380 <lchmod@@Base+0x55c>
   16354:	and	r9, r0, #73	; 0x49
   16358:	orrs	r9, r9, r1
   1635c:	orrne	lr, lr, #73	; 0x49
   16360:	b	16314 <lchmod@@Base+0x4f0>
   16364:	cmp	ip, #0
   16368:	mvnne	ip, ip
   1636c:	orr	ip, ip, r8
   16370:	bic	r8, r7, ip
   16374:	and	ip, ip, r0
   16378:	orr	r4, r4, r8
   1637c:	orr	r0, lr, ip
   16380:	add	r3, r3, #16
   16384:	b	162a8 <lchmod@@Base+0x484>
   16388:	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   1638c:	push	{r2, r3}
   16390:	push	{r0, r1, r2, lr}
   16394:	ldr	r2, [sp, #16]
   16398:	ands	r3, r2, #64	; 0x40
   1639c:	addne	r3, sp, #20
   163a0:	strne	r3, [sp, #4]
   163a4:	ldrne	r3, [sp, #20]
   163a8:	bl	11788 <openat64@plt>
   163ac:	bl	17c48 <lchmod@@Base+0x1e24>
   163b0:	add	sp, sp, #12
   163b4:	pop	{lr}		; (ldr lr, [sp], #4)
   163b8:	add	sp, sp, #8
   163bc:	bx	lr
   163c0:	orr	r2, r2, #540672	; 0x84000
   163c4:	push	{r4, r5, r6, r7, r8, lr}
   163c8:	orr	r2, r2, #2304	; 0x900
   163cc:	mov	r5, r3
   163d0:	bl	1638c <lchmod@@Base+0x568>
   163d4:	subs	r6, r0, #0
   163d8:	movlt	r4, #0
   163dc:	blt	16408 <lchmod@@Base+0x5e4>
   163e0:	bl	11860 <fdopendir@plt>
   163e4:	subs	r4, r0, #0
   163e8:	strne	r6, [r5]
   163ec:	bne	16408 <lchmod@@Base+0x5e4>
   163f0:	bl	117a0 <__errno_location@plt>
   163f4:	ldr	r7, [r0]
   163f8:	mov	r5, r0
   163fc:	mov	r0, r6
   16400:	bl	11920 <close@plt>
   16404:	str	r7, [r5]
   16408:	mov	r0, r4
   1640c:	pop	{r4, r5, r6, r7, r8, pc}
   16410:	push	{r4, r5, r6, lr}
   16414:	subs	r5, r0, #0
   16418:	bne	16430 <lchmod@@Base+0x60c>
   1641c:	ldr	r3, [pc, #124]	; 164a0 <lchmod@@Base+0x67c>
   16420:	ldr	r0, [pc, #124]	; 164a4 <lchmod@@Base+0x680>
   16424:	ldr	r1, [r3]
   16428:	bl	118fc <fputs@plt>
   1642c:	bl	11914 <abort@plt>
   16430:	mov	r1, #47	; 0x2f
   16434:	bl	1183c <strrchr@plt>
   16438:	cmp	r0, #0
   1643c:	addne	r4, r0, #1
   16440:	moveq	r4, r5
   16444:	sub	r3, r4, r5
   16448:	cmp	r3, #6
   1644c:	ble	1648c <lchmod@@Base+0x668>
   16450:	mov	r2, #7
   16454:	ldr	r1, [pc, #76]	; 164a8 <lchmod@@Base+0x684>
   16458:	sub	r0, r4, #7
   1645c:	bl	11908 <strncmp@plt>
   16460:	cmp	r0, #0
   16464:	bne	1648c <lchmod@@Base+0x668>
   16468:	mov	r2, #3
   1646c:	ldr	r1, [pc, #56]	; 164ac <lchmod@@Base+0x688>
   16470:	mov	r0, r4
   16474:	bl	11908 <strncmp@plt>
   16478:	cmp	r0, #0
   1647c:	movne	r5, r4
   16480:	ldreq	r3, [pc, #40]	; 164b0 <lchmod@@Base+0x68c>
   16484:	addeq	r5, r4, #3
   16488:	streq	r5, [r3]
   1648c:	ldr	r3, [pc, #32]	; 164b4 <lchmod@@Base+0x690>
   16490:	str	r5, [r3]
   16494:	ldr	r3, [pc, #28]	; 164b8 <lchmod@@Base+0x694>
   16498:	str	r5, [r3]
   1649c:	pop	{r4, r5, r6, pc}
   164a0:	strdeq	fp, [r2], -r0
   164a4:	andeq	sl, r1, sl, lsr #6
   164a8:	andeq	sl, r1, r2, ror #6
   164ac:	andeq	sl, r1, sl, ror #6
   164b0:	andeq	fp, r2, r0, ror #3
   164b4:	andeq	fp, r2, r8, lsl #4
   164b8:	andeq	fp, r2, r4, ror #3
   164bc:	push	{r4, r5, r6, lr}
   164c0:	mov	r2, #48	; 0x30
   164c4:	mov	r5, r1
   164c8:	mov	r1, #0
   164cc:	mov	r4, r0
   164d0:	bl	117c4 <memset@plt>
   164d4:	cmp	r5, #10
   164d8:	bne	164e0 <lchmod@@Base+0x6bc>
   164dc:	bl	11914 <abort@plt>
   164e0:	str	r5, [r4]
   164e4:	mov	r0, r4
   164e8:	pop	{r4, r5, r6, pc}
   164ec:	push	{r4, r5, r6, lr}
   164f0:	mov	r4, r0
   164f4:	mov	r5, r1
   164f8:	bl	19140 <lchmod@@Base+0x331c>
   164fc:	ldrb	r3, [r0]
   16500:	bic	r3, r3, #32
   16504:	cmp	r3, #85	; 0x55
   16508:	bne	16578 <lchmod@@Base+0x754>
   1650c:	ldrb	r3, [r0, #1]
   16510:	bic	r3, r3, #32
   16514:	cmp	r3, #84	; 0x54
   16518:	bne	16550 <lchmod@@Base+0x72c>
   1651c:	ldrb	r3, [r0, #2]
   16520:	bic	r3, r3, #32
   16524:	cmp	r3, #70	; 0x46
   16528:	bne	16550 <lchmod@@Base+0x72c>
   1652c:	ldrb	r3, [r0, #3]
   16530:	cmp	r3, #45	; 0x2d
   16534:	bne	16550 <lchmod@@Base+0x72c>
   16538:	ldrb	r3, [r0, #4]
   1653c:	cmp	r3, #56	; 0x38
   16540:	bne	16550 <lchmod@@Base+0x72c>
   16544:	ldrb	r3, [r0, #5]
   16548:	cmp	r3, #0
   1654c:	beq	16564 <lchmod@@Base+0x740>
   16550:	ldr	r1, [pc, #144]	; 165e8 <lchmod@@Base+0x7c4>
   16554:	ldr	r0, [pc, #144]	; 165ec <lchmod@@Base+0x7c8>
   16558:	cmp	r5, #9
   1655c:	movne	r0, r1
   16560:	pop	{r4, r5, r6, pc}
   16564:	ldrb	r3, [r4]
   16568:	ldr	r1, [pc, #128]	; 165f0 <lchmod@@Base+0x7cc>
   1656c:	ldr	r0, [pc, #128]	; 165f4 <lchmod@@Base+0x7d0>
   16570:	cmp	r3, #96	; 0x60
   16574:	b	1655c <lchmod@@Base+0x738>
   16578:	cmp	r3, #71	; 0x47
   1657c:	bne	16550 <lchmod@@Base+0x72c>
   16580:	ldrb	r3, [r0, #1]
   16584:	bic	r3, r3, #32
   16588:	cmp	r3, #66	; 0x42
   1658c:	bne	16550 <lchmod@@Base+0x72c>
   16590:	ldrb	r3, [r0, #2]
   16594:	cmp	r3, #49	; 0x31
   16598:	bne	16550 <lchmod@@Base+0x72c>
   1659c:	ldrb	r3, [r0, #3]
   165a0:	cmp	r3, #56	; 0x38
   165a4:	bne	16550 <lchmod@@Base+0x72c>
   165a8:	ldrb	r3, [r0, #4]
   165ac:	cmp	r3, #48	; 0x30
   165b0:	bne	16550 <lchmod@@Base+0x72c>
   165b4:	ldrb	r3, [r0, #5]
   165b8:	cmp	r3, #51	; 0x33
   165bc:	bne	16550 <lchmod@@Base+0x72c>
   165c0:	ldrb	r3, [r0, #6]
   165c4:	cmp	r3, #48	; 0x30
   165c8:	bne	16550 <lchmod@@Base+0x72c>
   165cc:	ldrb	r3, [r0, #7]
   165d0:	cmp	r3, #0
   165d4:	bne	16550 <lchmod@@Base+0x72c>
   165d8:	ldrb	r3, [r4]
   165dc:	ldr	r1, [pc, #20]	; 165f8 <lchmod@@Base+0x7d4>
   165e0:	ldr	r0, [pc, #20]	; 165fc <lchmod@@Base+0x7d8>
   165e4:	b	16570 <lchmod@@Base+0x74c>
   165e8:	ldrdeq	sl, [r1], -r5
   165ec:	ldrdeq	sl, [r1], -r3
   165f0:	andeq	sl, r1, r8, asr #7
   165f4:	andeq	sl, r1, r4, asr #7
   165f8:	ldrdeq	sl, [r1], -r0
   165fc:	andeq	sl, r1, ip, asr #7
   16600:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16604:	sub	sp, sp, #108	; 0x6c
   16608:	mov	r8, r0
   1660c:	str	r3, [sp, #36]	; 0x24
   16610:	mov	r5, r1
   16614:	str	r2, [sp, #44]	; 0x2c
   16618:	ldr	sl, [sp, #144]	; 0x90
   1661c:	bl	11674 <__ctype_get_mb_cur_max@plt>
   16620:	ldr	r3, [sp, #148]	; 0x94
   16624:	mov	r7, #0
   16628:	str	r7, [sp, #48]	; 0x30
   1662c:	lsr	r6, r3, #1
   16630:	and	r6, r6, #1
   16634:	mov	r3, #1
   16638:	str	r3, [sp, #72]	; 0x48
   1663c:	str	r7, [sp, #24]
   16640:	str	r7, [sp, #32]
   16644:	str	r7, [sp, #40]	; 0x28
   16648:	str	r7, [sp, #60]	; 0x3c
   1664c:	str	r0, [sp, #76]	; 0x4c
   16650:	cmp	sl, #10
   16654:	ldrls	pc, [pc, sl, lsl #2]
   16658:	b	16894 <lchmod@@Base+0xa70>
   1665c:	andeq	r6, r1, r8, lsl #13
   16660:	andeq	r7, r1, ip, lsl r3
   16664:	andeq	r6, r1, r0, ror #16
   16668:	andeq	r6, r1, ip, lsr #17
   1666c:	andeq	r6, r1, ip, lsr r8
   16670:	muleq	r1, r4, r6
   16674:	strdeq	r7, [r1], -ip
   16678:	muleq	r1, r8, r8
   1667c:	andeq	r6, r1, ip, lsl #15
   16680:	andeq	r6, r1, ip, lsl #15
   16684:	andeq	r6, r1, ip, lsl #15
   16688:	mov	r6, #0
   1668c:	mov	r4, #0
   16690:	b	166c0 <lchmod@@Base+0x89c>
   16694:	cmp	r6, #0
   16698:	bne	168bc <lchmod@@Base+0xa98>
   1669c:	cmp	r5, #0
   166a0:	movne	r3, #34	; 0x22
   166a4:	strbne	r3, [r8]
   166a8:	mov	r3, #1
   166ac:	str	r3, [sp, #24]
   166b0:	str	r3, [sp, #32]
   166b4:	mov	r4, #1
   166b8:	ldr	r3, [pc, #3172]	; 17324 <lchmod@@Base+0x1500>
   166bc:	str	r3, [sp, #40]	; 0x28
   166c0:	mov	r9, r5
   166c4:	mov	r3, #0
   166c8:	str	r7, [sp, #68]	; 0x44
   166cc:	str	r3, [sp, #28]
   166d0:	ldr	r3, [sp, #36]	; 0x24
   166d4:	cmn	r3, #1
   166d8:	bne	17268 <lchmod@@Base+0x1444>
   166dc:	ldr	r3, [sp, #44]	; 0x2c
   166e0:	ldr	r2, [sp, #28]
   166e4:	ldrb	r3, [r3, r2]
   166e8:	adds	r3, r3, #0
   166ec:	movne	r3, #1
   166f0:	str	r3, [sp, #52]	; 0x34
   166f4:	ldr	r3, [sp, #52]	; 0x34
   166f8:	cmp	r3, #0
   166fc:	bne	168e4 <lchmod@@Base+0xac0>
   16700:	sub	r2, sl, #2
   16704:	clz	r2, r2
   16708:	lsr	r2, r2, #5
   1670c:	and	r3, r6, r2
   16710:	cmp	r4, #0
   16714:	movne	r3, #0
   16718:	andeq	r3, r3, #1
   1671c:	cmp	r3, #0
   16720:	bne	16aac <lchmod@@Base+0xc88>
   16724:	eor	r3, r6, #1
   16728:	ands	r2, r2, r3
   1672c:	beq	172a0 <lchmod@@Base+0x147c>
   16730:	ldr	r3, [sp, #68]	; 0x44
   16734:	cmp	r3, #0
   16738:	beq	172d8 <lchmod@@Base+0x14b4>
   1673c:	ldr	r3, [sp, #72]	; 0x48
   16740:	cmp	r3, #0
   16744:	beq	1727c <lchmod@@Base+0x1458>
   16748:	ldr	r3, [sp, #160]	; 0xa0
   1674c:	ldr	r2, [sp, #44]	; 0x2c
   16750:	str	r3, [sp, #16]
   16754:	ldr	r3, [sp, #156]	; 0x9c
   16758:	ldr	r1, [sp, #60]	; 0x3c
   1675c:	str	r3, [sp, #12]
   16760:	ldr	r3, [sp, #152]	; 0x98
   16764:	str	r3, [sp, #8]
   16768:	ldr	r3, [sp, #148]	; 0x94
   1676c:	str	r3, [sp, #4]
   16770:	mov	r3, #5
   16774:	str	r3, [sp]
   16778:	ldr	r3, [sp, #36]	; 0x24
   1677c:	mov	r0, r8
   16780:	bl	16600 <lchmod@@Base+0x7dc>
   16784:	mov	r4, r0
   16788:	b	172cc <lchmod@@Base+0x14a8>
   1678c:	cmp	sl, #10
   16790:	beq	167ec <lchmod@@Base+0x9c8>
   16794:	ldr	r4, [pc, #2956]	; 17328 <lchmod@@Base+0x1504>
   16798:	mov	r2, #5
   1679c:	mov	r1, r4
   167a0:	mov	r0, #0
   167a4:	bl	115f0 <dcgettext@plt>
   167a8:	cmp	r0, r4
   167ac:	str	r0, [sp, #156]	; 0x9c
   167b0:	bne	167c0 <lchmod@@Base+0x99c>
   167b4:	mov	r1, sl
   167b8:	bl	164ec <lchmod@@Base+0x6c8>
   167bc:	str	r0, [sp, #156]	; 0x9c
   167c0:	ldr	r4, [pc, #2916]	; 1732c <lchmod@@Base+0x1508>
   167c4:	mov	r2, #5
   167c8:	mov	r1, r4
   167cc:	mov	r0, #0
   167d0:	bl	115f0 <dcgettext@plt>
   167d4:	cmp	r0, r4
   167d8:	str	r0, [sp, #160]	; 0xa0
   167dc:	bne	167ec <lchmod@@Base+0x9c8>
   167e0:	mov	r1, sl
   167e4:	bl	164ec <lchmod@@Base+0x6c8>
   167e8:	str	r0, [sp, #160]	; 0xa0
   167ec:	cmp	r6, #0
   167f0:	moveq	r4, r6
   167f4:	beq	1680c <lchmod@@Base+0x9e8>
   167f8:	mov	r4, #0
   167fc:	b	1681c <lchmod@@Base+0x9f8>
   16800:	cmp	r5, r4
   16804:	strbhi	r3, [r8, r4]
   16808:	add	r4, r4, #1
   1680c:	ldr	r3, [sp, #156]	; 0x9c
   16810:	ldrb	r3, [r3, r4]
   16814:	cmp	r3, #0
   16818:	bne	16800 <lchmod@@Base+0x9dc>
   1681c:	ldr	r0, [sp, #160]	; 0xa0
   16820:	bl	11764 <strlen@plt>
   16824:	ldr	r3, [sp, #160]	; 0xa0
   16828:	str	r3, [sp, #40]	; 0x28
   1682c:	mov	r3, #1
   16830:	str	r3, [sp, #24]
   16834:	str	r0, [sp, #32]
   16838:	b	166c0 <lchmod@@Base+0x89c>
   1683c:	mov	r3, #1
   16840:	cmp	r6, #0
   16844:	streq	r3, [sp, #24]
   16848:	beq	16868 <lchmod@@Base+0xa44>
   1684c:	str	r3, [sp, #32]
   16850:	ldr	r3, [pc, #2772]	; 1732c <lchmod@@Base+0x1508>
   16854:	mov	r4, #0
   16858:	str	r3, [sp, #40]	; 0x28
   1685c:	b	1688c <lchmod@@Base+0xa68>
   16860:	cmp	r6, #0
   16864:	bne	168d4 <lchmod@@Base+0xab0>
   16868:	cmp	r5, #0
   1686c:	movne	r3, #39	; 0x27
   16870:	strbne	r3, [r8]
   16874:	mov	r3, #1
   16878:	str	r3, [sp, #32]
   1687c:	mov	r6, #0
   16880:	ldr	r3, [pc, #2724]	; 1732c <lchmod@@Base+0x1508>
   16884:	mov	r4, #1
   16888:	str	r3, [sp, #40]	; 0x28
   1688c:	mov	sl, #2
   16890:	b	166c0 <lchmod@@Base+0x89c>
   16894:	bl	11914 <abort@plt>
   16898:	mov	r6, #0
   1689c:	mov	r3, #1
   168a0:	str	r3, [sp, #24]
   168a4:	mov	r4, r6
   168a8:	b	166c0 <lchmod@@Base+0x89c>
   168ac:	mov	r6, #1
   168b0:	str	r6, [sp, #24]
   168b4:	str	r6, [sp, #32]
   168b8:	b	16850 <lchmod@@Base+0xa2c>
   168bc:	mov	r3, #1
   168c0:	str	r3, [sp, #32]
   168c4:	ldr	r3, [pc, #2648]	; 17324 <lchmod@@Base+0x1500>
   168c8:	str	r6, [sp, #24]
   168cc:	str	r3, [sp, #40]	; 0x28
   168d0:	b	1668c <lchmod@@Base+0x868>
   168d4:	mov	r3, #1
   168d8:	str	r3, [sp, #32]
   168dc:	ldr	r3, [pc, #2632]	; 1732c <lchmod@@Base+0x1508>
   168e0:	b	168cc <lchmod@@Base+0xaa8>
   168e4:	ldr	r3, [sp, #32]
   168e8:	ldr	fp, [sp, #24]
   168ec:	cmp	sl, #2
   168f0:	moveq	fp, #0
   168f4:	andne	fp, fp, #1
   168f8:	adds	r5, r3, #0
   168fc:	movne	r5, #1
   16900:	ands	r3, r5, fp
   16904:	str	r3, [sp, #64]	; 0x40
   16908:	beq	169d8 <lchmod@@Base+0xbb4>
   1690c:	ldr	r2, [sp, #32]
   16910:	ldr	r3, [sp, #28]
   16914:	add	r7, r3, r2
   16918:	mov	r3, r2
   1691c:	ldr	r2, [sp, #36]	; 0x24
   16920:	cmp	r3, #1
   16924:	movls	r3, #0
   16928:	movhi	r3, #1
   1692c:	cmn	r2, #1
   16930:	movne	r3, #0
   16934:	cmp	r3, #0
   16938:	beq	16948 <lchmod@@Base+0xb24>
   1693c:	ldr	r0, [sp, #44]	; 0x2c
   16940:	bl	11764 <strlen@plt>
   16944:	str	r0, [sp, #36]	; 0x24
   16948:	ldr	r3, [sp, #36]	; 0x24
   1694c:	cmp	r3, r7
   16950:	bcc	169d0 <lchmod@@Base+0xbac>
   16954:	ldr	r3, [sp, #44]	; 0x2c
   16958:	ldr	r0, [sp, #28]
   1695c:	ldr	r2, [sp, #32]
   16960:	ldr	r1, [sp, #40]	; 0x28
   16964:	add	r0, r3, r0
   16968:	bl	115d8 <memcmp@plt>
   1696c:	cmp	r0, #0
   16970:	bne	169d0 <lchmod@@Base+0xbac>
   16974:	cmp	r6, #0
   16978:	beq	169d8 <lchmod@@Base+0xbb4>
   1697c:	str	r6, [sp, #24]
   16980:	ldr	r3, [sp, #24]
   16984:	ldr	r2, [sp, #44]	; 0x2c
   16988:	cmp	sl, #2
   1698c:	movne	r3, #0
   16990:	andeq	r3, r3, #1
   16994:	cmp	r3, #0
   16998:	ldr	r3, [sp, #160]	; 0xa0
   1699c:	movne	sl, #4
   169a0:	str	r3, [sp, #16]
   169a4:	ldr	r3, [sp, #156]	; 0x9c
   169a8:	str	sl, [sp]
   169ac:	str	r3, [sp, #12]
   169b0:	mov	r3, #0
   169b4:	str	r3, [sp, #8]
   169b8:	ldr	r3, [sp, #148]	; 0x94
   169bc:	mov	r1, r9
   169c0:	bic	r3, r3, #2
   169c4:	str	r3, [sp, #4]
   169c8:	ldr	r3, [sp, #36]	; 0x24
   169cc:	b	1677c <lchmod@@Base+0x958>
   169d0:	mov	r3, #0
   169d4:	str	r3, [sp, #64]	; 0x40
   169d8:	ldr	r2, [sp, #28]
   169dc:	ldr	r3, [sp, #44]	; 0x2c
   169e0:	add	r3, r3, r2
   169e4:	str	r3, [sp, #80]	; 0x50
   169e8:	ldr	r3, [sp, #44]	; 0x2c
   169ec:	ldrb	r7, [r3, r2]
   169f0:	cmp	r7, #58	; 0x3a
   169f4:	bhi	16b5c <lchmod@@Base+0xd38>
   169f8:	cmp	r7, #43	; 0x2b
   169fc:	bcs	16bb0 <lchmod@@Base+0xd8c>
   16a00:	cmp	r7, #32
   16a04:	beq	16c08 <lchmod@@Base+0xde4>
   16a08:	bhi	16ab4 <lchmod@@Base+0xc90>
   16a0c:	cmp	r7, #9
   16a10:	beq	16ebc <lchmod@@Base+0x1098>
   16a14:	bhi	16a78 <lchmod@@Base+0xc54>
   16a18:	cmp	r7, #7
   16a1c:	beq	16f68 <lchmod@@Base+0x1144>
   16a20:	bhi	16c24 <lchmod@@Base+0xe00>
   16a24:	cmp	r7, #0
   16a28:	beq	16c40 <lchmod@@Base+0xe1c>
   16a2c:	ldr	r3, [sp, #76]	; 0x4c
   16a30:	cmp	r3, #1
   16a34:	bne	16fac <lchmod@@Base+0x1188>
   16a38:	bl	11734 <__ctype_b_loc@plt>
   16a3c:	sxth	r3, r7
   16a40:	lsl	r3, r3, #1
   16a44:	ldr	r2, [r0]
   16a48:	ldrh	r5, [r2, r3]
   16a4c:	ldr	r3, [sp, #76]	; 0x4c
   16a50:	str	r3, [sp, #56]	; 0x38
   16a54:	lsr	r5, r5, #14
   16a58:	and	r5, r5, #1
   16a5c:	ldr	r3, [sp, #24]
   16a60:	eor	fp, r5, #1
   16a64:	and	fp, fp, r3
   16a68:	ands	fp, fp, #255	; 0xff
   16a6c:	beq	16df4 <lchmod@@Base+0xfd0>
   16a70:	mov	r5, #0
   16a74:	b	17058 <lchmod@@Base+0x1234>
   16a78:	cmp	r7, #11
   16a7c:	beq	16ec4 <lchmod@@Base+0x10a0>
   16a80:	bcc	16f60 <lchmod@@Base+0x113c>
   16a84:	cmp	r7, #12
   16a88:	beq	16f70 <lchmod@@Base+0x114c>
   16a8c:	cmp	r7, #13
   16a90:	moveq	r3, #114	; 0x72
   16a94:	bne	16a2c <lchmod@@Base+0xc08>
   16a98:	cmp	sl, #2
   16a9c:	movne	r2, #0
   16aa0:	andeq	r2, r6, #1
   16aa4:	cmp	r2, #0
   16aa8:	beq	16c28 <lchmod@@Base+0xe04>
   16aac:	mov	sl, #2
   16ab0:	b	16980 <lchmod@@Base+0xb5c>
   16ab4:	cmp	r7, #37	; 0x25
   16ab8:	beq	16bb0 <lchmod@@Base+0xd8c>
   16abc:	bhi	16ad0 <lchmod@@Base+0xcac>
   16ac0:	cmp	r7, #35	; 0x23
   16ac4:	beq	16bfc <lchmod@@Base+0xdd8>
   16ac8:	mov	r5, #0
   16acc:	b	16c0c <lchmod@@Base+0xde8>
   16ad0:	cmp	r7, #39	; 0x27
   16ad4:	bne	16ac8 <lchmod@@Base+0xca4>
   16ad8:	cmp	sl, #2
   16adc:	ldrne	r5, [sp, #52]	; 0x34
   16ae0:	movne	r3, r5
   16ae4:	strne	r3, [sp, #68]	; 0x44
   16ae8:	bne	16bb4 <lchmod@@Base+0xd90>
   16aec:	cmp	r6, #0
   16af0:	bne	16980 <lchmod@@Base+0xb5c>
   16af4:	ldr	r2, [sp, #60]	; 0x3c
   16af8:	adds	r3, r9, #0
   16afc:	movne	r3, #1
   16b00:	cmp	r2, #0
   16b04:	movne	r3, #0
   16b08:	cmp	r3, #0
   16b0c:	strne	r9, [sp, #60]	; 0x3c
   16b10:	movne	r9, #0
   16b14:	bne	16b24 <lchmod@@Base+0xd00>
   16b18:	cmp	r9, r4
   16b1c:	movhi	r3, #39	; 0x27
   16b20:	strbhi	r3, [r8, r4]
   16b24:	add	r3, r4, #1
   16b28:	cmp	r3, r9
   16b2c:	movcc	r2, #92	; 0x5c
   16b30:	strbcc	r2, [r8, r3]
   16b34:	add	r3, r4, #2
   16b38:	cmp	r3, r9
   16b3c:	ldr	r5, [sp, #52]	; 0x34
   16b40:	movcc	r2, #39	; 0x27
   16b44:	strbcc	r2, [r8, r3]
   16b48:	add	r4, r4, #3
   16b4c:	mov	fp, r6
   16b50:	str	r5, [sp, #68]	; 0x44
   16b54:	str	r6, [sp, #48]	; 0x30
   16b58:	b	16df4 <lchmod@@Base+0xfd0>
   16b5c:	cmp	r7, #94	; 0x5e
   16b60:	beq	16ac8 <lchmod@@Base+0xca4>
   16b64:	bhi	16bbc <lchmod@@Base+0xd98>
   16b68:	cmp	r7, #90	; 0x5a
   16b6c:	bhi	16ba4 <lchmod@@Base+0xd80>
   16b70:	cmp	r7, #65	; 0x41
   16b74:	bcs	16bb0 <lchmod@@Base+0xd8c>
   16b78:	cmp	r7, #62	; 0x3e
   16b7c:	bls	16ac8 <lchmod@@Base+0xca4>
   16b80:	cmp	r7, #63	; 0x3f
   16b84:	bne	16a2c <lchmod@@Base+0xc08>
   16b88:	cmp	sl, #2
   16b8c:	beq	16d30 <lchmod@@Base+0xf0c>
   16b90:	cmp	sl, #5
   16b94:	beq	16d40 <lchmod@@Base+0xf1c>
   16b98:	mov	fp, #0
   16b9c:	mov	r5, fp
   16ba0:	b	16df4 <lchmod@@Base+0xfd0>
   16ba4:	cmp	r7, #92	; 0x5c
   16ba8:	beq	16ecc <lchmod@@Base+0x10a8>
   16bac:	bls	16ac8 <lchmod@@Base+0xca4>
   16bb0:	ldr	r5, [sp, #52]	; 0x34
   16bb4:	mov	fp, #0
   16bb8:	b	16df4 <lchmod@@Base+0xfd0>
   16bbc:	cmp	r7, #122	; 0x7a
   16bc0:	bhi	16be0 <lchmod@@Base+0xdbc>
   16bc4:	cmp	r7, #97	; 0x61
   16bc8:	bcs	16bb0 <lchmod@@Base+0xd8c>
   16bcc:	cmp	r7, #95	; 0x5f
   16bd0:	beq	16bb0 <lchmod@@Base+0xd8c>
   16bd4:	cmp	r7, #96	; 0x60
   16bd8:	bne	16a2c <lchmod@@Base+0xc08>
   16bdc:	b	16ac8 <lchmod@@Base+0xca4>
   16be0:	cmp	r7, #124	; 0x7c
   16be4:	beq	16ac8 <lchmod@@Base+0xca4>
   16be8:	bcc	16f78 <lchmod@@Base+0x1154>
   16bec:	cmp	r7, #125	; 0x7d
   16bf0:	beq	16f78 <lchmod@@Base+0x1154>
   16bf4:	cmp	r7, #126	; 0x7e
   16bf8:	bne	16a2c <lchmod@@Base+0xc08>
   16bfc:	ldr	r3, [sp, #28]
   16c00:	cmp	r3, #0
   16c04:	bne	16d38 <lchmod@@Base+0xf14>
   16c08:	ldr	r5, [sp, #52]	; 0x34
   16c0c:	cmp	sl, #2
   16c10:	movne	fp, #0
   16c14:	andeq	fp, r6, #1
   16c18:	cmp	fp, #0
   16c1c:	beq	16df4 <lchmod@@Base+0xfd0>
   16c20:	b	16aac <lchmod@@Base+0xc88>
   16c24:	mov	r3, #98	; 0x62
   16c28:	ldr	r2, [sp, #24]
   16c2c:	cmp	r2, #0
   16c30:	beq	16d38 <lchmod@@Base+0xf14>
   16c34:	mov	r7, r3
   16c38:	mov	r5, #0
   16c3c:	b	16e4c <lchmod@@Base+0x1028>
   16c40:	ldr	r3, [sp, #24]
   16c44:	cmp	r3, #0
   16c48:	beq	16d14 <lchmod@@Base+0xef0>
   16c4c:	cmp	r6, #0
   16c50:	bne	1697c <lchmod@@Base+0xb58>
   16c54:	ldr	r3, [sp, #48]	; 0x30
   16c58:	eor	r2, r3, #1
   16c5c:	cmp	sl, #2
   16c60:	movne	r2, #0
   16c64:	andeq	r2, r2, #1
   16c68:	cmp	r2, #0
   16c6c:	moveq	r3, r4
   16c70:	beq	16ca8 <lchmod@@Base+0xe84>
   16c74:	cmp	r9, r4
   16c78:	movhi	r3, #39	; 0x27
   16c7c:	strbhi	r3, [r8, r4]
   16c80:	add	r3, r4, #1
   16c84:	cmp	r9, r3
   16c88:	movhi	r1, #36	; 0x24
   16c8c:	strbhi	r1, [r8, r3]
   16c90:	add	r3, r4, #2
   16c94:	cmp	r9, r3
   16c98:	movhi	r1, #39	; 0x27
   16c9c:	strbhi	r1, [r8, r3]
   16ca0:	add	r3, r4, #3
   16ca4:	str	r2, [sp, #48]	; 0x30
   16ca8:	cmp	r9, r3
   16cac:	movhi	r2, #92	; 0x5c
   16cb0:	strbhi	r2, [r8, r3]
   16cb4:	cmp	fp, #0
   16cb8:	add	r4, r3, #1
   16cbc:	beq	1724c <lchmod@@Base+0x1428>
   16cc0:	ldr	r2, [sp, #28]
   16cc4:	ldr	r1, [sp, #36]	; 0x24
   16cc8:	add	r2, r2, #1
   16ccc:	cmp	r1, r2
   16cd0:	bls	16d0c <lchmod@@Base+0xee8>
   16cd4:	ldr	r1, [sp, #44]	; 0x2c
   16cd8:	mov	r7, #48	; 0x30
   16cdc:	ldrb	r2, [r1, r2]
   16ce0:	sub	r2, r2, #48	; 0x30
   16ce4:	cmp	r2, #9
   16ce8:	movhi	r5, r6
   16cec:	bhi	16df4 <lchmod@@Base+0xfd0>
   16cf0:	cmp	r9, r4
   16cf4:	add	r2, r3, #2
   16cf8:	strbhi	r7, [r8, r4]
   16cfc:	cmp	r9, r2
   16d00:	add	r4, r3, #3
   16d04:	movhi	r1, #48	; 0x30
   16d08:	strbhi	r1, [r8, r2]
   16d0c:	mov	r5, r6
   16d10:	b	17254 <lchmod@@Base+0x1430>
   16d14:	ldr	r3, [sp, #148]	; 0x94
   16d18:	tst	r3, #1
   16d1c:	ldreq	r5, [sp, #24]
   16d20:	beq	17260 <lchmod@@Base+0x143c>
   16d24:	ldr	r3, [sp, #28]
   16d28:	add	r3, r3, #1
   16d2c:	b	166cc <lchmod@@Base+0x8a8>
   16d30:	cmp	r6, #0
   16d34:	bne	16980 <lchmod@@Base+0xb5c>
   16d38:	mov	r5, #0
   16d3c:	b	16bb4 <lchmod@@Base+0xd90>
   16d40:	ldr	r3, [sp, #148]	; 0x94
   16d44:	tst	r3, #4
   16d48:	beq	16d38 <lchmod@@Base+0xf14>
   16d4c:	ldr	r3, [sp, #28]
   16d50:	add	r2, r3, #2
   16d54:	ldr	r3, [sp, #36]	; 0x24
   16d58:	cmp	r3, r2
   16d5c:	bls	16d38 <lchmod@@Base+0xf14>
   16d60:	ldr	r3, [sp, #44]	; 0x2c
   16d64:	ldr	r1, [sp, #28]
   16d68:	add	r3, r3, r1
   16d6c:	ldrb	r0, [r3, #1]
   16d70:	cmp	r0, #63	; 0x3f
   16d74:	bne	16d38 <lchmod@@Base+0xf14>
   16d78:	ldr	r3, [sp, #44]	; 0x2c
   16d7c:	ldrb	r1, [r3, r2]
   16d80:	sub	r3, r1, #33	; 0x21
   16d84:	uxtb	r3, r3
   16d88:	cmp	r3, #29
   16d8c:	bhi	1725c <lchmod@@Base+0x1438>
   16d90:	mov	ip, #1
   16d94:	ldr	r5, [pc, #1428]	; 17330 <lchmod@@Base+0x150c>
   16d98:	ands	r5, r5, ip, lsl r3
   16d9c:	beq	16bb4 <lchmod@@Base+0xd90>
   16da0:	cmp	r6, #0
   16da4:	bne	16980 <lchmod@@Base+0xb5c>
   16da8:	add	r3, r4, #1
   16dac:	cmp	r9, r4
   16db0:	strbhi	r0, [r8, r4]
   16db4:	cmp	r9, r3
   16db8:	movhi	r0, #34	; 0x22
   16dbc:	strbhi	r0, [r8, r3]
   16dc0:	add	r3, r4, #2
   16dc4:	cmp	r9, r3
   16dc8:	movhi	r0, #34	; 0x22
   16dcc:	strbhi	r0, [r8, r3]
   16dd0:	add	r3, r4, #3
   16dd4:	cmp	r9, r3
   16dd8:	add	r4, r4, #4
   16ddc:	mov	r5, r6
   16de0:	mov	fp, r6
   16de4:	mov	r7, r1
   16de8:	movhi	r0, #63	; 0x3f
   16dec:	strbhi	r0, [r8, r3]
   16df0:	str	r2, [sp, #28]
   16df4:	ldr	r3, [sp, #24]
   16df8:	eor	r3, r3, #1
   16dfc:	cmp	sl, #2
   16e00:	orreq	r3, r3, #1
   16e04:	eor	r3, r3, #1
   16e08:	orr	r3, r6, r3
   16e0c:	tst	r3, #255	; 0xff
   16e10:	beq	16e40 <lchmod@@Base+0x101c>
   16e14:	ldr	r3, [sp, #152]	; 0x98
   16e18:	cmp	r3, #0
   16e1c:	beq	16e40 <lchmod@@Base+0x101c>
   16e20:	lsr	r2, r7, #5
   16e24:	ldr	r1, [sp, #152]	; 0x98
   16e28:	uxtb	r2, r2
   16e2c:	and	r3, r7, #31
   16e30:	ldr	r2, [r1, r2, lsl #2]
   16e34:	lsr	r3, r2, r3
   16e38:	tst	r3, #1
   16e3c:	bne	16e4c <lchmod@@Base+0x1028>
   16e40:	ldr	r3, [sp, #64]	; 0x40
   16e44:	cmp	r3, #0
   16e48:	beq	16ee4 <lchmod@@Base+0x10c0>
   16e4c:	cmp	r6, #0
   16e50:	bne	16980 <lchmod@@Base+0xb5c>
   16e54:	ldr	r3, [sp, #48]	; 0x30
   16e58:	eor	r3, r3, #1
   16e5c:	cmp	sl, #2
   16e60:	movne	r3, #0
   16e64:	andeq	r3, r3, #1
   16e68:	cmp	r3, #0
   16e6c:	beq	16ea4 <lchmod@@Base+0x1080>
   16e70:	cmp	r9, r4
   16e74:	movhi	r2, #39	; 0x27
   16e78:	strbhi	r2, [r8, r4]
   16e7c:	add	r2, r4, #1
   16e80:	cmp	r9, r2
   16e84:	movhi	r1, #36	; 0x24
   16e88:	strbhi	r1, [r8, r2]
   16e8c:	add	r2, r4, #2
   16e90:	cmp	r9, r2
   16e94:	add	r4, r4, #3
   16e98:	movhi	r1, #39	; 0x27
   16e9c:	strbhi	r1, [r8, r2]
   16ea0:	str	r3, [sp, #48]	; 0x30
   16ea4:	cmp	r9, r4
   16ea8:	movhi	r3, #92	; 0x5c
   16eac:	strbhi	r3, [r8, r4]
   16eb0:	ldr	fp, [sp, #52]	; 0x34
   16eb4:	add	r4, r4, #1
   16eb8:	b	16ee4 <lchmod@@Base+0x10c0>
   16ebc:	mov	r3, #116	; 0x74
   16ec0:	b	16a98 <lchmod@@Base+0xc74>
   16ec4:	mov	r3, #118	; 0x76
   16ec8:	b	16c28 <lchmod@@Base+0xe04>
   16ecc:	cmp	sl, #2
   16ed0:	bne	16f40 <lchmod@@Base+0x111c>
   16ed4:	cmp	r6, #0
   16ed8:	bne	16980 <lchmod@@Base+0xb5c>
   16edc:	mov	r5, r6
   16ee0:	mov	fp, r6
   16ee4:	ldr	r3, [sp, #48]	; 0x30
   16ee8:	eor	fp, fp, #1
   16eec:	and	fp, fp, r3
   16ef0:	tst	fp, #255	; 0xff
   16ef4:	beq	16f20 <lchmod@@Base+0x10fc>
   16ef8:	cmp	r9, r4
   16efc:	movhi	r3, #39	; 0x27
   16f00:	strbhi	r3, [r8, r4]
   16f04:	add	r3, r4, #1
   16f08:	cmp	r9, r3
   16f0c:	movhi	r2, #39	; 0x27
   16f10:	add	r4, r4, #2
   16f14:	strbhi	r2, [r8, r3]
   16f18:	mov	r3, #0
   16f1c:	str	r3, [sp, #48]	; 0x30
   16f20:	cmp	r9, r4
   16f24:	strbhi	r7, [r8, r4]
   16f28:	ldr	r3, [sp, #72]	; 0x48
   16f2c:	cmp	r5, #0
   16f30:	moveq	r3, #0
   16f34:	add	r4, r4, #1
   16f38:	str	r3, [sp, #72]	; 0x48
   16f3c:	b	16d24 <lchmod@@Base+0xf00>
   16f40:	ldr	r3, [sp, #24]
   16f44:	and	r3, r3, r6
   16f48:	tst	r5, r3
   16f4c:	moveq	r3, r7
   16f50:	beq	16a98 <lchmod@@Base+0xc74>
   16f54:	mov	fp, #0
   16f58:	mov	r5, fp
   16f5c:	b	16ee4 <lchmod@@Base+0x10c0>
   16f60:	mov	r3, #110	; 0x6e
   16f64:	b	16a98 <lchmod@@Base+0xc74>
   16f68:	mov	r3, #97	; 0x61
   16f6c:	b	16c28 <lchmod@@Base+0xe04>
   16f70:	mov	r3, #102	; 0x66
   16f74:	b	16c28 <lchmod@@Base+0xe04>
   16f78:	ldr	r3, [sp, #36]	; 0x24
   16f7c:	cmn	r3, #1
   16f80:	bne	16fa0 <lchmod@@Base+0x117c>
   16f84:	ldr	r3, [sp, #44]	; 0x2c
   16f88:	ldrb	r3, [r3, #1]
   16f8c:	adds	r3, r3, #0
   16f90:	movne	r3, #1
   16f94:	cmp	r3, #0
   16f98:	bne	16d38 <lchmod@@Base+0xf14>
   16f9c:	b	16bfc <lchmod@@Base+0xdd8>
   16fa0:	ldr	r3, [sp, #36]	; 0x24
   16fa4:	subs	r3, r3, #1
   16fa8:	b	16f90 <lchmod@@Base+0x116c>
   16fac:	mov	r3, #0
   16fb0:	str	r3, [sp, #96]	; 0x60
   16fb4:	str	r3, [sp, #100]	; 0x64
   16fb8:	ldr	r3, [sp, #36]	; 0x24
   16fbc:	cmn	r3, #1
   16fc0:	bne	16fd0 <lchmod@@Base+0x11ac>
   16fc4:	ldr	r0, [sp, #44]	; 0x2c
   16fc8:	bl	11764 <strlen@plt>
   16fcc:	str	r0, [sp, #36]	; 0x24
   16fd0:	ldr	r5, [sp, #52]	; 0x34
   16fd4:	mov	r3, #0
   16fd8:	str	r3, [sp, #56]	; 0x38
   16fdc:	ldr	r3, [sp, #28]
   16fe0:	ldr	r2, [sp, #56]	; 0x38
   16fe4:	ldr	r1, [sp, #36]	; 0x24
   16fe8:	add	r2, r3, r2
   16fec:	ldr	r3, [sp, #44]	; 0x2c
   16ff0:	add	r0, sp, #92	; 0x5c
   16ff4:	add	fp, r3, r2
   16ff8:	sub	r2, r1, r2
   16ffc:	add	r3, sp, #96	; 0x60
   17000:	mov	r1, fp
   17004:	bl	19174 <lchmod@@Base+0x3350>
   17008:	subs	r2, r0, #0
   1700c:	beq	1704c <lchmod@@Base+0x1228>
   17010:	cmn	r2, #1
   17014:	beq	17224 <lchmod@@Base+0x1400>
   17018:	cmn	r2, #2
   1701c:	bne	17194 <lchmod@@Base+0x1370>
   17020:	ldr	r2, [sp, #56]	; 0x38
   17024:	ldr	r3, [sp, #28]
   17028:	add	r3, r3, r2
   1702c:	ldr	r2, [sp, #36]	; 0x24
   17030:	cmp	r2, r3
   17034:	bls	17224 <lchmod@@Base+0x1400>
   17038:	ldr	r3, [sp, #80]	; 0x50
   1703c:	ldr	r2, [sp, #56]	; 0x38
   17040:	ldrb	r5, [r3, r2]
   17044:	cmp	r5, #0
   17048:	bne	17184 <lchmod@@Base+0x1360>
   1704c:	ldr	r3, [sp, #56]	; 0x38
   17050:	cmp	r3, #1
   17054:	bls	16a5c <lchmod@@Base+0xc38>
   17058:	ldr	r2, [sp, #56]	; 0x38
   1705c:	ldr	r3, [sp, #28]
   17060:	mov	fp, #0
   17064:	add	r3, r3, r2
   17068:	ldr	r2, [sp, #24]
   1706c:	str	r3, [sp, #52]	; 0x34
   17070:	eor	r3, r5, #1
   17074:	and	r3, r3, r2
   17078:	mov	ip, #92	; 0x5c
   1707c:	uxtb	r3, r3
   17080:	mov	r2, #39	; 0x27
   17084:	cmp	r3, #0
   17088:	beq	1722c <lchmod@@Base+0x1408>
   1708c:	cmp	r6, #0
   17090:	bne	1697c <lchmod@@Base+0xb58>
   17094:	ldr	r1, [sp, #48]	; 0x30
   17098:	eor	r1, r1, #1
   1709c:	cmp	sl, #2
   170a0:	movne	r1, #0
   170a4:	andeq	r1, r1, #1
   170a8:	cmp	r1, #0
   170ac:	beq	170dc <lchmod@@Base+0x12b8>
   170b0:	add	r0, r4, #1
   170b4:	cmp	r9, r4
   170b8:	strbhi	r2, [r8, r4]
   170bc:	cmp	r9, r0
   170c0:	movhi	lr, #36	; 0x24
   170c4:	strbhi	lr, [r8, r0]
   170c8:	add	r0, r4, #2
   170cc:	add	r4, r4, #3
   170d0:	cmp	r9, r0
   170d4:	strbhi	r2, [r8, r0]
   170d8:	str	r1, [sp, #48]	; 0x30
   170dc:	add	r0, r4, #1
   170e0:	cmp	r9, r4
   170e4:	strbhi	ip, [r8, r4]
   170e8:	cmp	r9, r0
   170ec:	lsrhi	r1, r7, #6
   170f0:	addhi	r1, r1, #48	; 0x30
   170f4:	strbhi	r1, [r8, r0]
   170f8:	add	r0, r4, #2
   170fc:	cmp	r9, r0
   17100:	lsrhi	r1, r7, #3
   17104:	and	r7, r7, #7
   17108:	andhi	r1, r1, #7
   1710c:	add	r4, r4, #3
   17110:	add	r7, r7, #48	; 0x30
   17114:	mov	fp, r3
   17118:	addhi	r1, r1, #48	; 0x30
   1711c:	strbhi	r1, [r8, r0]
   17120:	ldr	r1, [sp, #28]
   17124:	ldr	r0, [sp, #52]	; 0x34
   17128:	add	r1, r1, #1
   1712c:	cmp	r0, r1
   17130:	bls	16ee4 <lchmod@@Base+0x10c0>
   17134:	ldr	lr, [sp, #48]	; 0x30
   17138:	eor	r0, fp, #1
   1713c:	and	r0, r0, lr
   17140:	tst	r0, #255	; 0xff
   17144:	beq	17168 <lchmod@@Base+0x1344>
   17148:	add	r0, r4, #1
   1714c:	cmp	r9, r4
   17150:	strbhi	r2, [r8, r4]
   17154:	cmp	r9, r0
   17158:	add	r4, r4, #2
   1715c:	strbhi	r2, [r8, r0]
   17160:	mov	r0, #0
   17164:	str	r0, [sp, #48]	; 0x30
   17168:	ldr	r0, [sp, #44]	; 0x2c
   1716c:	cmp	r9, r4
   17170:	strbhi	r7, [r8, r4]
   17174:	str	r1, [sp, #28]
   17178:	add	r4, r4, #1
   1717c:	ldrb	r7, [r0, r1]
   17180:	b	17084 <lchmod@@Base+0x1260>
   17184:	ldr	r3, [sp, #56]	; 0x38
   17188:	add	r3, r3, #1
   1718c:	str	r3, [sp, #56]	; 0x38
   17190:	b	17020 <lchmod@@Base+0x11fc>
   17194:	cmp	sl, #2
   17198:	movne	r3, #0
   1719c:	andeq	r3, r6, #1
   171a0:	cmp	r3, #0
   171a4:	movne	r1, #1
   171a8:	bne	17204 <lchmod@@Base+0x13e0>
   171ac:	ldr	r0, [sp, #92]	; 0x5c
   171b0:	str	r2, [sp, #84]	; 0x54
   171b4:	bl	11644 <iswprint@plt>
   171b8:	ldr	r3, [sp, #56]	; 0x38
   171bc:	ldr	r2, [sp, #84]	; 0x54
   171c0:	add	r3, r3, r2
   171c4:	str	r3, [sp, #56]	; 0x38
   171c8:	cmp	r0, #0
   171cc:	add	r0, sp, #96	; 0x60
   171d0:	moveq	r5, #0
   171d4:	bl	115c0 <mbsinit@plt>
   171d8:	cmp	r0, #0
   171dc:	beq	16fdc <lchmod@@Base+0x11b8>
   171e0:	b	1704c <lchmod@@Base+0x1228>
   171e4:	ldrb	r3, [fp, r1]
   171e8:	cmp	r3, #94	; 0x5e
   171ec:	beq	16aac <lchmod@@Base+0xc88>
   171f0:	bhi	17210 <lchmod@@Base+0x13ec>
   171f4:	sub	r3, r3, #91	; 0x5b
   171f8:	cmp	r3, #1
   171fc:	bls	16aac <lchmod@@Base+0xc88>
   17200:	add	r1, r1, #1
   17204:	cmp	r1, r2
   17208:	bne	171e4 <lchmod@@Base+0x13c0>
   1720c:	b	171ac <lchmod@@Base+0x1388>
   17210:	cmp	r3, #96	; 0x60
   17214:	beq	16aac <lchmod@@Base+0xc88>
   17218:	cmp	r3, #124	; 0x7c
   1721c:	bne	17200 <lchmod@@Base+0x13dc>
   17220:	b	16aac <lchmod@@Base+0xc88>
   17224:	mov	r5, #0
   17228:	b	1704c <lchmod@@Base+0x1228>
   1722c:	ldr	r1, [sp, #64]	; 0x40
   17230:	cmp	r1, #0
   17234:	beq	17120 <lchmod@@Base+0x12fc>
   17238:	cmp	r9, r4
   1723c:	strbhi	ip, [r8, r4]
   17240:	str	r3, [sp, #64]	; 0x40
   17244:	add	r4, r4, #1
   17248:	b	17120 <lchmod@@Base+0x12fc>
   1724c:	mov	r5, fp
   17250:	ldr	fp, [sp, #24]
   17254:	mov	r7, #48	; 0x30
   17258:	b	16df4 <lchmod@@Base+0xfd0>
   1725c:	mov	r5, #0
   17260:	mov	fp, r5
   17264:	b	16df4 <lchmod@@Base+0xfd0>
   17268:	ldr	r3, [sp, #36]	; 0x24
   1726c:	ldr	r2, [sp, #28]
   17270:	subs	r3, r3, r2
   17274:	movne	r3, #1
   17278:	b	166f0 <lchmod@@Base+0x8cc>
   1727c:	ldr	r3, [sp, #60]	; 0x3c
   17280:	clz	r7, r9
   17284:	cmp	r3, #0
   17288:	lsr	r7, r7, #5
   1728c:	moveq	r7, #0
   17290:	cmp	r7, #0
   17294:	mov	r5, r3
   17298:	bne	16650 <lchmod@@Base+0x82c>
   1729c:	ldr	r3, [sp, #68]	; 0x44
   172a0:	ldr	r2, [sp, #40]	; 0x28
   172a4:	cmp	r2, #0
   172a8:	moveq	r3, #0
   172ac:	andne	r3, r3, #1
   172b0:	cmp	r3, #0
   172b4:	movne	r3, r2
   172b8:	subne	r2, r3, #1
   172bc:	bne	172ec <lchmod@@Base+0x14c8>
   172c0:	cmp	r9, r4
   172c4:	movhi	r3, #0
   172c8:	strbhi	r3, [r8, r4]
   172cc:	mov	r0, r4
   172d0:	add	sp, sp, #108	; 0x6c
   172d4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   172d8:	mov	r3, r2
   172dc:	b	172a0 <lchmod@@Base+0x147c>
   172e0:	cmp	r9, r4
   172e4:	strbhi	r3, [r8, r4]
   172e8:	add	r4, r4, #1
   172ec:	ldrb	r3, [r2, #1]!
   172f0:	cmp	r3, #0
   172f4:	bne	172e0 <lchmod@@Base+0x14bc>
   172f8:	b	172c0 <lchmod@@Base+0x149c>
   172fc:	ldr	r3, [pc, #32]	; 17324 <lchmod@@Base+0x1500>
   17300:	mov	r6, #1
   17304:	str	r6, [sp, #24]
   17308:	str	r6, [sp, #32]
   1730c:	str	r3, [sp, #40]	; 0x28
   17310:	mov	r4, #0
   17314:	mov	sl, #5
   17318:	b	166c0 <lchmod@@Base+0x89c>
   1731c:	mov	r6, #1
   17320:	b	168b4 <lchmod@@Base+0xa90>
   17324:	ldrdeq	sl, [r1], -r3
   17328:	ldrdeq	sl, [r1], -r7
   1732c:	ldrdeq	sl, [r1], -r5
   17330:	stmdacc	r0, {r0, r6, r7, r8, ip, lr}
   17334:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17338:	sub	sp, sp, #52	; 0x34
   1733c:	mov	r6, r0
   17340:	mov	r5, r3
   17344:	mov	r8, r1
   17348:	mov	r9, r2
   1734c:	bl	117a0 <__errno_location@plt>
   17350:	ldr	r7, [pc, #380]	; 174d4 <lchmod@@Base+0x16b0>
   17354:	cmn	r6, #-2147483647	; 0x80000001
   17358:	ldr	r4, [r7]
   1735c:	ldr	r3, [r0]
   17360:	str	r0, [sp, #24]
   17364:	str	r3, [sp, #32]
   17368:	movne	r3, #0
   1736c:	moveq	r3, #1
   17370:	orrs	r3, r3, r6, lsr #31
   17374:	beq	1737c <lchmod@@Base+0x1558>
   17378:	bl	11914 <abort@plt>
   1737c:	ldr	r2, [r7, #4]
   17380:	cmp	r6, r2
   17384:	blt	173f4 <lchmod@@Base+0x15d0>
   17388:	add	r1, sp, #48	; 0x30
   1738c:	add	sl, r7, #8
   17390:	str	r2, [r1, #-4]!
   17394:	cmp	r4, sl
   17398:	mov	r3, #8
   1739c:	sub	r2, r6, r2
   173a0:	movne	r0, r4
   173a4:	str	r3, [sp]
   173a8:	add	r2, r2, #1
   173ac:	mvn	r3, #-2147483648	; 0x80000000
   173b0:	moveq	r0, #0
   173b4:	bl	18300 <lchmod@@Base+0x24dc>
   173b8:	cmp	r4, sl
   173bc:	ldr	r2, [sp, #44]	; 0x2c
   173c0:	mov	fp, r0
   173c4:	str	r0, [r7]
   173c8:	ldmeq	r4, {r0, r1}
   173cc:	mov	r4, fp
   173d0:	stmeq	fp, {r0, r1}
   173d4:	ldr	r0, [r7, #4]
   173d8:	mov	r1, #0
   173dc:	sub	r2, r2, r0
   173e0:	add	r0, fp, r0, lsl #3
   173e4:	lsl	r2, r2, #3
   173e8:	bl	117c4 <memset@plt>
   173ec:	ldr	r3, [sp, #44]	; 0x2c
   173f0:	str	r3, [r7, #4]
   173f4:	ldr	r3, [r5, #4]
   173f8:	add	sl, r4, r6, lsl #3
   173fc:	orr	r3, r3, #1
   17400:	str	r3, [sp, #28]
   17404:	add	r3, r5, #8
   17408:	str	r3, [sp, #36]	; 0x24
   1740c:	ldr	r3, [r5, #44]	; 0x2c
   17410:	ldr	fp, [r4, r6, lsl #3]
   17414:	ldr	r7, [sl, #4]
   17418:	str	r3, [sp, #16]
   1741c:	ldr	r3, [r5, #40]	; 0x28
   17420:	mov	r2, r8
   17424:	str	r3, [sp, #12]
   17428:	add	r3, r5, #8
   1742c:	str	r3, [sp, #8]
   17430:	ldr	r3, [sp, #28]
   17434:	mov	r1, fp
   17438:	str	r3, [sp, #4]
   1743c:	ldr	r3, [r5]
   17440:	mov	r0, r7
   17444:	str	r3, [sp]
   17448:	mov	r3, r9
   1744c:	bl	16600 <lchmod@@Base+0x7dc>
   17450:	cmp	fp, r0
   17454:	bhi	174bc <lchmod@@Base+0x1698>
   17458:	ldr	r3, [pc, #120]	; 174d8 <lchmod@@Base+0x16b4>
   1745c:	add	fp, r0, #1
   17460:	cmp	r7, r3
   17464:	str	fp, [r4, r6, lsl #3]
   17468:	beq	17474 <lchmod@@Base+0x1650>
   1746c:	mov	r0, r7
   17470:	bl	13188 <__assert_fail@plt+0x1820>
   17474:	mov	r0, fp
   17478:	bl	181b8 <lchmod@@Base+0x2394>
   1747c:	ldr	r3, [r5, #44]	; 0x2c
   17480:	mov	r2, r8
   17484:	mov	r1, fp
   17488:	str	r0, [sl, #4]
   1748c:	str	r3, [sp, #16]
   17490:	ldr	r3, [r5, #40]	; 0x28
   17494:	mov	r7, r0
   17498:	str	r3, [sp, #12]
   1749c:	add	r3, r5, #8
   174a0:	str	r3, [sp, #8]
   174a4:	ldr	r3, [sp, #28]
   174a8:	str	r3, [sp, #4]
   174ac:	ldr	r3, [r5]
   174b0:	str	r3, [sp]
   174b4:	mov	r3, r9
   174b8:	bl	16600 <lchmod@@Base+0x7dc>
   174bc:	ldr	r3, [sp, #24]
   174c0:	ldr	r2, [sp, #32]
   174c4:	mov	r0, r7
   174c8:	str	r2, [r3]
   174cc:	add	sp, sp, #52	; 0x34
   174d0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   174d4:	muleq	r2, ip, r1
   174d8:	andeq	fp, r2, ip, lsl #4
   174dc:	push	{r4, r5, r6, lr}
   174e0:	mov	r5, r0
   174e4:	bl	117a0 <__errno_location@plt>
   174e8:	cmp	r5, #0
   174ec:	mov	r1, #48	; 0x30
   174f0:	ldr	r6, [r0]
   174f4:	mov	r4, r0
   174f8:	ldr	r0, [pc, #12]	; 1750c <lchmod@@Base+0x16e8>
   174fc:	movne	r0, r5
   17500:	bl	18594 <lchmod@@Base+0x2770>
   17504:	str	r6, [r4]
   17508:	pop	{r4, r5, r6, pc}
   1750c:	andeq	fp, r2, ip, lsl #6
   17510:	ldr	r3, [pc, #12]	; 17524 <lchmod@@Base+0x1700>
   17514:	cmp	r0, #0
   17518:	moveq	r0, r3
   1751c:	ldr	r0, [r0]
   17520:	bx	lr
   17524:	andeq	fp, r2, ip, lsl #6
   17528:	ldr	r3, [pc, #12]	; 1753c <lchmod@@Base+0x1718>
   1752c:	cmp	r0, #0
   17530:	moveq	r0, r3
   17534:	str	r1, [r0]
   17538:	bx	lr
   1753c:	andeq	fp, r2, ip, lsl #6
   17540:	ldr	r3, [pc, #52]	; 1757c <lchmod@@Base+0x1758>
   17544:	cmp	r0, #0
   17548:	moveq	r0, r3
   1754c:	add	r3, r0, #8
   17550:	push	{lr}		; (str lr, [sp, #-4]!)
   17554:	lsr	lr, r1, #5
   17558:	and	r1, r1, #31
   1755c:	ldr	ip, [r3, lr, lsl #2]
   17560:	lsr	r0, ip, r1
   17564:	eor	r2, r2, r0
   17568:	and	r2, r2, #1
   1756c:	and	r0, r0, #1
   17570:	eor	r1, ip, r2, lsl r1
   17574:	str	r1, [r3, lr, lsl #2]
   17578:	pop	{pc}		; (ldr pc, [sp], #4)
   1757c:	andeq	fp, r2, ip, lsl #6
   17580:	ldr	r3, [pc, #16]	; 17598 <lchmod@@Base+0x1774>
   17584:	cmp	r0, #0
   17588:	movne	r3, r0
   1758c:	ldr	r0, [r3, #4]
   17590:	str	r1, [r3, #4]
   17594:	bx	lr
   17598:	andeq	fp, r2, ip, lsl #6
   1759c:	ldr	r3, [pc, #44]	; 175d0 <lchmod@@Base+0x17ac>
   175a0:	cmp	r0, #0
   175a4:	moveq	r0, r3
   175a8:	mov	r3, #10
   175ac:	cmp	r2, #0
   175b0:	cmpne	r1, #0
   175b4:	str	r3, [r0]
   175b8:	bne	175c4 <lchmod@@Base+0x17a0>
   175bc:	push	{r4, lr}
   175c0:	bl	11914 <abort@plt>
   175c4:	str	r1, [r0, #40]	; 0x28
   175c8:	str	r2, [r0, #44]	; 0x2c
   175cc:	bx	lr
   175d0:	andeq	fp, r2, ip, lsl #6
   175d4:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   175d8:	sub	sp, sp, #24
   175dc:	mov	sl, r3
   175e0:	ldr	r4, [sp, #56]	; 0x38
   175e4:	ldr	r3, [pc, #100]	; 17650 <lchmod@@Base+0x182c>
   175e8:	cmp	r4, #0
   175ec:	moveq	r4, r3
   175f0:	mov	r7, r0
   175f4:	mov	r8, r1
   175f8:	mov	r9, r2
   175fc:	bl	117a0 <__errno_location@plt>
   17600:	ldr	r3, [r4, #44]	; 0x2c
   17604:	mov	r2, r9
   17608:	mov	r1, r8
   1760c:	ldr	r6, [r0]
   17610:	str	r3, [sp, #16]
   17614:	ldr	r3, [r4, #40]	; 0x28
   17618:	mov	r5, r0
   1761c:	str	r3, [sp, #12]
   17620:	add	r3, r4, #8
   17624:	str	r3, [sp, #8]
   17628:	ldr	r3, [r4, #4]
   1762c:	mov	r0, r7
   17630:	str	r3, [sp, #4]
   17634:	ldr	r3, [r4]
   17638:	str	r3, [sp]
   1763c:	mov	r3, sl
   17640:	bl	16600 <lchmod@@Base+0x7dc>
   17644:	str	r6, [r5]
   17648:	add	sp, sp, #24
   1764c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   17650:	andeq	fp, r2, ip, lsl #6
   17654:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17658:	cmp	r3, #0
   1765c:	sub	sp, sp, #44	; 0x2c
   17660:	ldr	r4, [pc, #188]	; 17724 <lchmod@@Base+0x1900>
   17664:	mov	r6, r2
   17668:	movne	r4, r3
   1766c:	mov	sl, r1
   17670:	mov	r9, r0
   17674:	bl	117a0 <__errno_location@plt>
   17678:	ldr	r5, [r4, #4]
   1767c:	add	fp, r4, #8
   17680:	cmp	r6, #0
   17684:	orreq	r5, r5, #1
   17688:	mov	r1, #0
   1768c:	mov	r2, r9
   17690:	ldr	r3, [r0]
   17694:	mov	r8, r0
   17698:	str	r3, [sp, #28]
   1769c:	ldr	r3, [r4, #44]	; 0x2c
   176a0:	mov	r0, r1
   176a4:	str	r3, [sp, #16]
   176a8:	ldr	r3, [r4, #40]	; 0x28
   176ac:	stmib	sp, {r5, fp}
   176b0:	str	r3, [sp, #12]
   176b4:	ldr	r3, [r4]
   176b8:	str	r3, [sp]
   176bc:	mov	r3, sl
   176c0:	bl	16600 <lchmod@@Base+0x7dc>
   176c4:	add	r1, r0, #1
   176c8:	mov	r7, r0
   176cc:	mov	r0, r1
   176d0:	str	r1, [sp, #36]	; 0x24
   176d4:	bl	181b8 <lchmod@@Base+0x2394>
   176d8:	ldr	r3, [r4, #44]	; 0x2c
   176dc:	mov	r2, r9
   176e0:	str	r3, [sp, #16]
   176e4:	ldr	r3, [r4, #40]	; 0x28
   176e8:	stmib	sp, {r5, fp}
   176ec:	str	r3, [sp, #12]
   176f0:	ldr	r3, [r4]
   176f4:	ldr	r1, [sp, #36]	; 0x24
   176f8:	str	r3, [sp]
   176fc:	mov	r3, sl
   17700:	str	r0, [sp, #32]
   17704:	bl	16600 <lchmod@@Base+0x7dc>
   17708:	ldr	r3, [sp, #28]
   1770c:	cmp	r6, #0
   17710:	str	r3, [r8]
   17714:	ldr	r0, [sp, #32]
   17718:	strne	r7, [r6]
   1771c:	add	sp, sp, #44	; 0x2c
   17720:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17724:	andeq	fp, r2, ip, lsl #6
   17728:	mov	r3, r2
   1772c:	mov	r2, #0
   17730:	b	17654 <lchmod@@Base+0x1830>
   17734:	push	{r4, r5, r6, r7, r8, lr}
   17738:	mov	r6, #1
   1773c:	ldr	r4, [pc, #104]	; 177ac <lchmod@@Base+0x1988>
   17740:	ldr	r5, [r4]
   17744:	add	r7, r5, #12
   17748:	ldr	r3, [r4, #4]
   1774c:	add	r7, r7, #8
   17750:	cmp	r6, r3
   17754:	blt	1779c <lchmod@@Base+0x1978>
   17758:	ldr	r0, [r5, #4]
   1775c:	ldr	r6, [pc, #76]	; 177b0 <lchmod@@Base+0x198c>
   17760:	cmp	r0, r6
   17764:	beq	17778 <lchmod@@Base+0x1954>
   17768:	bl	13188 <__assert_fail@plt+0x1820>
   1776c:	mov	r3, #256	; 0x100
   17770:	str	r3, [r4, #8]
   17774:	str	r6, [r4, #12]
   17778:	ldr	r6, [pc, #52]	; 177b4 <lchmod@@Base+0x1990>
   1777c:	cmp	r5, r6
   17780:	beq	17790 <lchmod@@Base+0x196c>
   17784:	mov	r0, r5
   17788:	bl	13188 <__assert_fail@plt+0x1820>
   1778c:	str	r6, [r4]
   17790:	mov	r3, #1
   17794:	str	r3, [r4, #4]
   17798:	pop	{r4, r5, r6, r7, r8, pc}
   1779c:	ldr	r0, [r7, #-8]
   177a0:	bl	13188 <__assert_fail@plt+0x1820>
   177a4:	add	r6, r6, #1
   177a8:	b	17748 <lchmod@@Base+0x1924>
   177ac:	muleq	r2, ip, r1
   177b0:	andeq	fp, r2, ip, lsl #4
   177b4:	andeq	fp, r2, r4, lsr #3
   177b8:	ldr	r3, [pc, #4]	; 177c4 <lchmod@@Base+0x19a0>
   177bc:	mvn	r2, #0
   177c0:	b	17334 <lchmod@@Base+0x1510>
   177c4:	andeq	fp, r2, ip, lsl #6
   177c8:	ldr	r3, [pc]	; 177d0 <lchmod@@Base+0x19ac>
   177cc:	b	17334 <lchmod@@Base+0x1510>
   177d0:	andeq	fp, r2, ip, lsl #6
   177d4:	mov	r1, r0
   177d8:	mov	r0, #0
   177dc:	b	177b8 <lchmod@@Base+0x1994>
   177e0:	mov	r2, r1
   177e4:	mov	r1, r0
   177e8:	mov	r0, #0
   177ec:	b	177c8 <lchmod@@Base+0x19a4>
   177f0:	push	{r4, r5, lr}
   177f4:	sub	sp, sp, #52	; 0x34
   177f8:	mov	r5, r2
   177fc:	mov	r4, r0
   17800:	mov	r0, sp
   17804:	bl	164bc <lchmod@@Base+0x698>
   17808:	mov	r3, sp
   1780c:	mvn	r2, #0
   17810:	mov	r1, r5
   17814:	mov	r0, r4
   17818:	bl	17334 <lchmod@@Base+0x1510>
   1781c:	add	sp, sp, #52	; 0x34
   17820:	pop	{r4, r5, pc}
   17824:	push	{r4, r5, r6, lr}
   17828:	sub	sp, sp, #48	; 0x30
   1782c:	mov	r5, r2
   17830:	mov	r6, r3
   17834:	mov	r4, r0
   17838:	mov	r0, sp
   1783c:	bl	164bc <lchmod@@Base+0x698>
   17840:	mov	r3, sp
   17844:	mov	r2, r6
   17848:	mov	r1, r5
   1784c:	mov	r0, r4
   17850:	bl	17334 <lchmod@@Base+0x1510>
   17854:	add	sp, sp, #48	; 0x30
   17858:	pop	{r4, r5, r6, pc}
   1785c:	mov	r2, r1
   17860:	mov	r1, r0
   17864:	mov	r0, #0
   17868:	b	177f0 <lchmod@@Base+0x19cc>
   1786c:	mov	r3, r2
   17870:	mov	r2, r1
   17874:	mov	r1, r0
   17878:	mov	r0, #0
   1787c:	b	17824 <lchmod@@Base+0x1a00>
   17880:	push	{r4, r5, r6, lr}
   17884:	mov	r4, r0
   17888:	ldr	lr, [pc, #80]	; 178e0 <lchmod@@Base+0x1abc>
   1788c:	mov	r5, r1
   17890:	mov	r6, r2
   17894:	ldm	lr!, {r0, r1, r2, r3}
   17898:	sub	sp, sp, #48	; 0x30
   1789c:	mov	ip, sp
   178a0:	stmia	ip!, {r0, r1, r2, r3}
   178a4:	ldm	lr!, {r0, r1, r2, r3}
   178a8:	stmia	ip!, {r0, r1, r2, r3}
   178ac:	ldm	lr, {r0, r1, r2, r3}
   178b0:	stm	ip, {r0, r1, r2, r3}
   178b4:	mov	r1, r6
   178b8:	mov	r2, #1
   178bc:	mov	r0, sp
   178c0:	bl	17540 <lchmod@@Base+0x171c>
   178c4:	mov	r3, sp
   178c8:	mov	r2, r5
   178cc:	mov	r1, r4
   178d0:	mov	r0, #0
   178d4:	bl	17334 <lchmod@@Base+0x1510>
   178d8:	add	sp, sp, #48	; 0x30
   178dc:	pop	{r4, r5, r6, pc}
   178e0:	andeq	fp, r2, ip, lsl #6
   178e4:	mov	r2, r1
   178e8:	mvn	r1, #0
   178ec:	b	17880 <lchmod@@Base+0x1a5c>
   178f0:	mov	r1, #58	; 0x3a
   178f4:	b	178e4 <lchmod@@Base+0x1ac0>
   178f8:	mov	r2, #58	; 0x3a
   178fc:	b	17880 <lchmod@@Base+0x1a5c>
   17900:	push	{r4, r5, lr}
   17904:	sub	sp, sp, #100	; 0x64
   17908:	mov	r4, r0
   1790c:	mov	r0, sp
   17910:	mov	r5, r2
   17914:	bl	164bc <lchmod@@Base+0x698>
   17918:	mov	ip, sp
   1791c:	add	lr, sp, #48	; 0x30
   17920:	ldm	ip!, {r0, r1, r2, r3}
   17924:	stmia	lr!, {r0, r1, r2, r3}
   17928:	ldm	ip!, {r0, r1, r2, r3}
   1792c:	stmia	lr!, {r0, r1, r2, r3}
   17930:	ldm	ip, {r0, r1, r2, r3}
   17934:	stm	lr, {r0, r1, r2, r3}
   17938:	mov	r2, #1
   1793c:	mov	r1, #58	; 0x3a
   17940:	add	r0, sp, #48	; 0x30
   17944:	bl	17540 <lchmod@@Base+0x171c>
   17948:	add	r3, sp, #48	; 0x30
   1794c:	mvn	r2, #0
   17950:	mov	r1, r5
   17954:	mov	r0, r4
   17958:	bl	17334 <lchmod@@Base+0x1510>
   1795c:	add	sp, sp, #100	; 0x64
   17960:	pop	{r4, r5, pc}
   17964:	push	{r4, r5, r6, r7, lr}
   17968:	mov	r4, r0
   1796c:	ldr	lr, [pc, #84]	; 179c8 <lchmod@@Base+0x1ba4>
   17970:	mov	r6, r1
   17974:	mov	r7, r2
   17978:	mov	r5, r3
   1797c:	ldm	lr!, {r0, r1, r2, r3}
   17980:	sub	sp, sp, #52	; 0x34
   17984:	mov	ip, sp
   17988:	stmia	ip!, {r0, r1, r2, r3}
   1798c:	ldm	lr!, {r0, r1, r2, r3}
   17990:	stmia	ip!, {r0, r1, r2, r3}
   17994:	ldm	lr, {r0, r1, r2, r3}
   17998:	stm	ip, {r0, r1, r2, r3}
   1799c:	mov	r2, r7
   179a0:	mov	r1, r6
   179a4:	mov	r0, sp
   179a8:	bl	1759c <lchmod@@Base+0x1778>
   179ac:	mov	r3, sp
   179b0:	ldr	r2, [sp, #72]	; 0x48
   179b4:	mov	r1, r5
   179b8:	mov	r0, r4
   179bc:	bl	17334 <lchmod@@Base+0x1510>
   179c0:	add	sp, sp, #52	; 0x34
   179c4:	pop	{r4, r5, r6, r7, pc}
   179c8:	andeq	fp, r2, ip, lsl #6
   179cc:	mvn	ip, #0
   179d0:	push	{r0, r1, r2, lr}
   179d4:	str	ip, [sp]
   179d8:	bl	17964 <lchmod@@Base+0x1b40>
   179dc:	add	sp, sp, #12
   179e0:	pop	{pc}		; (ldr pc, [sp], #4)
   179e4:	mov	r3, r2
   179e8:	mov	r2, r1
   179ec:	mov	r1, r0
   179f0:	mov	r0, #0
   179f4:	b	179cc <lchmod@@Base+0x1ba8>
   179f8:	push	{r0, r1, r2, lr}
   179fc:	str	r3, [sp]
   17a00:	mov	r3, r2
   17a04:	mov	r2, r1
   17a08:	mov	r1, r0
   17a0c:	mov	r0, #0
   17a10:	bl	17964 <lchmod@@Base+0x1b40>
   17a14:	add	sp, sp, #12
   17a18:	pop	{pc}		; (ldr pc, [sp], #4)
   17a1c:	ldr	r3, [pc]	; 17a24 <lchmod@@Base+0x1c00>
   17a20:	b	17334 <lchmod@@Base+0x1510>
   17a24:	andeq	fp, r2, ip, lsr #3
   17a28:	mov	r2, r1
   17a2c:	mov	r1, r0
   17a30:	mov	r0, #0
   17a34:	b	17a1c <lchmod@@Base+0x1bf8>
   17a38:	mvn	r2, #0
   17a3c:	b	17a1c <lchmod@@Base+0x1bf8>
   17a40:	mov	r1, r0
   17a44:	mov	r0, #0
   17a48:	b	17a38 <lchmod@@Base+0x1c14>
   17a4c:	push	{r4, r5, r6, lr}
   17a50:	ldr	r4, [r0], #8
   17a54:	cmp	r4, r0
   17a58:	bne	17a80 <lchmod@@Base+0x1c5c>
   17a5c:	mov	r0, r1
   17a60:	mov	r5, r1
   17a64:	bl	18b28 <lchmod@@Base+0x2d04>
   17a68:	subs	r3, r0, #0
   17a6c:	beq	17a94 <lchmod@@Base+0x1c70>
   17a70:	mov	r2, r5
   17a74:	mov	r1, r4
   17a78:	pop	{r4, r5, r6, lr}
   17a7c:	b	115b4 <memcpy@plt>
   17a80:	mov	r0, r4
   17a84:	bl	18b68 <lchmod@@Base+0x2d44>
   17a88:	cmp	r0, #0
   17a8c:	movne	r3, r0
   17a90:	moveq	r3, r4
   17a94:	mov	r0, r3
   17a98:	pop	{r4, r5, r6, pc}
   17a9c:	push	{r4, r5, r6, lr}
   17aa0:	mov	r6, r0
   17aa4:	ldr	r5, [r0, #4]
   17aa8:	mov	r4, r0
   17aac:	ldr	r0, [r6], #8
   17ab0:	lsl	r5, r5, #1
   17ab4:	cmp	r0, r6
   17ab8:	beq	17ac0 <lchmod@@Base+0x1c9c>
   17abc:	bl	13188 <__assert_fail@plt+0x1820>
   17ac0:	ldr	r3, [r4, #4]
   17ac4:	cmp	r5, r3
   17ac8:	bcc	17af0 <lchmod@@Base+0x1ccc>
   17acc:	mov	r0, r5
   17ad0:	bl	18b28 <lchmod@@Base+0x2d04>
   17ad4:	cmp	r0, #0
   17ad8:	bne	17b00 <lchmod@@Base+0x1cdc>
   17adc:	mov	r3, #1024	; 0x400
   17ae0:	str	r6, [r4]
   17ae4:	str	r3, [r4, #4]
   17ae8:	mov	r0, #0
   17aec:	pop	{r4, r5, r6, pc}
   17af0:	bl	117a0 <__errno_location@plt>
   17af4:	mov	r3, #12
   17af8:	str	r3, [r0]
   17afc:	b	17adc <lchmod@@Base+0x1cb8>
   17b00:	stm	r4, {r0, r5}
   17b04:	mov	r0, #1
   17b08:	pop	{r4, r5, r6, pc}
   17b0c:	push	{r4, r5, r6, r7, r8, lr}
   17b10:	mov	r7, r0
   17b14:	ldr	r3, [r0, #4]
   17b18:	ldr	r8, [r7], #8
   17b1c:	mov	r4, r0
   17b20:	cmp	r8, r7
   17b24:	lsl	r6, r3, #1
   17b28:	bne	17b54 <lchmod@@Base+0x1d30>
   17b2c:	mov	r0, r6
   17b30:	bl	18b28 <lchmod@@Base+0x2d04>
   17b34:	subs	r5, r0, #0
   17b38:	beq	17b84 <lchmod@@Base+0x1d60>
   17b3c:	ldr	r2, [r4, #4]
   17b40:	mov	r1, r8
   17b44:	bl	115b4 <memcpy@plt>
   17b48:	stm	r4, {r5, r6}
   17b4c:	mov	r0, #1
   17b50:	pop	{r4, r5, r6, r7, r8, pc}
   17b54:	cmp	r3, r6
   17b58:	bhi	17b8c <lchmod@@Base+0x1d68>
   17b5c:	mov	r1, r6
   17b60:	mov	r0, r8
   17b64:	bl	18b68 <lchmod@@Base+0x2d44>
   17b68:	subs	r5, r0, #0
   17b6c:	bne	17b48 <lchmod@@Base+0x1d24>
   17b70:	ldr	r0, [r4]
   17b74:	bl	13188 <__assert_fail@plt+0x1820>
   17b78:	mov	r3, #1024	; 0x400
   17b7c:	str	r7, [r4]
   17b80:	str	r3, [r4, #4]
   17b84:	mov	r0, #0
   17b88:	pop	{r4, r5, r6, r7, r8, pc}
   17b8c:	bl	117a0 <__errno_location@plt>
   17b90:	mov	r3, #12
   17b94:	str	r3, [r0]
   17b98:	b	17b70 <lchmod@@Base+0x1d4c>
   17b9c:	push	{r4, r5, r6, r7, r8, lr}
   17ba0:	subs	r4, r0, #0
   17ba4:	bne	17bc0 <lchmod@@Base+0x1d9c>
   17ba8:	bl	117a0 <__errno_location@plt>
   17bac:	mov	r3, #95	; 0x5f
   17bb0:	mvn	r4, #0
   17bb4:	str	r3, [r0]
   17bb8:	mov	r0, r4
   17bbc:	pop	{r4, r5, r6, r7, r8, pc}
   17bc0:	cmp	r4, #10
   17bc4:	bne	17bb8 <lchmod@@Base+0x1d94>
   17bc8:	ldr	r6, [r1]
   17bcc:	mov	r5, r1
   17bd0:	mov	r0, r6
   17bd4:	ldr	r1, [pc, #32]	; 17bfc <lchmod@@Base+0x1dd8>
   17bd8:	bl	11548 <strcmp@plt>
   17bdc:	subs	r7, r0, #0
   17be0:	bne	17bb8 <lchmod@@Base+0x1d94>
   17be4:	mov	r0, r6
   17be8:	bl	1189c <freecon@plt>
   17bec:	str	r7, [r5]
   17bf0:	bl	117a0 <__errno_location@plt>
   17bf4:	mov	r3, #61	; 0x3d
   17bf8:	b	17bb0 <lchmod@@Base+0x1d8c>
   17bfc:	andeq	sl, r1, r5, lsr #8
   17c00:	push	{r4, lr}
   17c04:	mov	r4, r1
   17c08:	bl	11758 <getfilecon@plt>
   17c0c:	mov	r1, r4
   17c10:	pop	{r4, lr}
   17c14:	b	17b9c <lchmod@@Base+0x1d78>
   17c18:	push	{r4, lr}
   17c1c:	mov	r4, r1
   17c20:	bl	116d4 <lgetfilecon@plt>
   17c24:	mov	r1, r4
   17c28:	pop	{r4, lr}
   17c2c:	b	17b9c <lchmod@@Base+0x1d78>
   17c30:	push	{r4, lr}
   17c34:	mov	r4, r1
   17c38:	bl	11614 <fgetfilecon@plt>
   17c3c:	mov	r1, r4
   17c40:	pop	{r4, lr}
   17c44:	b	17b9c <lchmod@@Base+0x1d78>
   17c48:	cmp	r0, #2
   17c4c:	push	{r4, r5, r6, r7, r8, lr}
   17c50:	mov	r4, r0
   17c54:	bhi	17c7c <lchmod@@Base+0x1e58>
   17c58:	bl	19210 <lchmod@@Base+0x33ec>
   17c5c:	mov	r6, r0
   17c60:	bl	117a0 <__errno_location@plt>
   17c64:	ldr	r7, [r0]
   17c68:	mov	r5, r0
   17c6c:	mov	r0, r4
   17c70:	mov	r4, r6
   17c74:	bl	11920 <close@plt>
   17c78:	str	r7, [r5]
   17c7c:	mov	r0, r4
   17c80:	pop	{r4, r5, r6, r7, r8, pc}
   17c84:	push	{r4, r5, r6, lr}
   17c88:	sub	sp, sp, #32
   17c8c:	cmp	r1, #0
   17c90:	mov	r5, r0
   17c94:	ldr	r4, [sp, #48]	; 0x30
   17c98:	ldr	r6, [sp, #52]	; 0x34
   17c9c:	beq	17d50 <lchmod@@Base+0x1f2c>
   17ca0:	stm	sp, {r2, r3}
   17ca4:	mov	r3, r1
   17ca8:	ldr	r2, [pc, #860]	; 1800c <lchmod@@Base+0x21e8>
   17cac:	mov	r1, #1
   17cb0:	bl	117f4 <__fprintf_chk@plt>
   17cb4:	mov	r2, #5
   17cb8:	ldr	r1, [pc, #848]	; 18010 <lchmod@@Base+0x21ec>
   17cbc:	mov	r0, #0
   17cc0:	bl	115f0 <dcgettext@plt>
   17cc4:	ldr	r3, [pc, #840]	; 18014 <lchmod@@Base+0x21f0>
   17cc8:	ldr	r2, [pc, #840]	; 18018 <lchmod@@Base+0x21f4>
   17ccc:	str	r3, [sp]
   17cd0:	mov	r1, #1
   17cd4:	mov	r3, r0
   17cd8:	mov	r0, r5
   17cdc:	bl	117f4 <__fprintf_chk@plt>
   17ce0:	mov	r1, r5
   17ce4:	mov	r0, #10
   17ce8:	bl	115e4 <fputc_unlocked@plt>
   17cec:	mov	r2, #5
   17cf0:	ldr	r1, [pc, #804]	; 1801c <lchmod@@Base+0x21f8>
   17cf4:	mov	r0, #0
   17cf8:	bl	115f0 <dcgettext@plt>
   17cfc:	mov	r1, #1
   17d00:	ldr	r3, [pc, #792]	; 18020 <lchmod@@Base+0x21fc>
   17d04:	mov	r2, r0
   17d08:	mov	r0, r5
   17d0c:	bl	117f4 <__fprintf_chk@plt>
   17d10:	mov	r1, r5
   17d14:	mov	r0, #10
   17d18:	bl	115e4 <fputc_unlocked@plt>
   17d1c:	cmp	r6, #9
   17d20:	ldrls	pc, [pc, r6, lsl #2]
   17d24:	b	18000 <lchmod@@Base+0x21dc>
   17d28:	andeq	r7, r1, r0, asr #28
   17d2c:	andeq	r7, r1, r8, ror #26
   17d30:	muleq	r1, r4, sp
   17d34:	andeq	r7, r1, r8, asr #27
   17d38:	andeq	r7, r1, r4, lsl #28
   17d3c:	andeq	r7, r1, r8, asr #28
   17d40:	muleq	r1, r0, lr
   17d44:	andeq	r7, r1, r0, ror #29
   17d48:	andeq	r7, r1, r8, lsr pc
   17d4c:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   17d50:	str	r3, [sp]
   17d54:	mov	r1, #1
   17d58:	mov	r3, r2
   17d5c:	ldr	r2, [pc, #704]	; 18024 <lchmod@@Base+0x2200>
   17d60:	bl	117f4 <__fprintf_chk@plt>
   17d64:	b	17cb4 <lchmod@@Base+0x1e90>
   17d68:	mov	r2, #5
   17d6c:	ldr	r1, [pc, #692]	; 18028 <lchmod@@Base+0x2204>
   17d70:	mov	r0, #0
   17d74:	bl	115f0 <dcgettext@plt>
   17d78:	ldr	r3, [r4]
   17d7c:	mov	r1, #1
   17d80:	mov	r2, r0
   17d84:	mov	r0, r5
   17d88:	add	sp, sp, #32
   17d8c:	pop	{r4, r5, r6, lr}
   17d90:	b	117f4 <__fprintf_chk@plt>
   17d94:	mov	r2, #5
   17d98:	ldr	r1, [pc, #652]	; 1802c <lchmod@@Base+0x2208>
   17d9c:	mov	r0, #0
   17da0:	bl	115f0 <dcgettext@plt>
   17da4:	ldr	r3, [r4, #4]
   17da8:	mov	r1, #1
   17dac:	str	r3, [sp, #48]	; 0x30
   17db0:	ldr	r3, [r4]
   17db4:	mov	r2, r0
   17db8:	mov	r0, r5
   17dbc:	add	sp, sp, #32
   17dc0:	pop	{r4, r5, r6, lr}
   17dc4:	b	117f4 <__fprintf_chk@plt>
   17dc8:	mov	r2, #5
   17dcc:	ldr	r1, [pc, #604]	; 18030 <lchmod@@Base+0x220c>
   17dd0:	mov	r0, #0
   17dd4:	bl	115f0 <dcgettext@plt>
   17dd8:	ldr	r3, [r4, #8]
   17ddc:	mov	r1, #1
   17de0:	str	r3, [sp, #52]	; 0x34
   17de4:	ldr	r3, [r4, #4]
   17de8:	str	r3, [sp, #48]	; 0x30
   17dec:	ldr	r3, [r4]
   17df0:	mov	r2, r0
   17df4:	mov	r0, r5
   17df8:	add	sp, sp, #32
   17dfc:	pop	{r4, r5, r6, lr}
   17e00:	b	117f4 <__fprintf_chk@plt>
   17e04:	mov	r2, #5
   17e08:	ldr	r1, [pc, #548]	; 18034 <lchmod@@Base+0x2210>
   17e0c:	mov	r0, #0
   17e10:	bl	115f0 <dcgettext@plt>
   17e14:	ldr	r3, [r4, #12]
   17e18:	mov	r1, #1
   17e1c:	str	r3, [sp, #8]
   17e20:	ldr	r3, [r4, #8]
   17e24:	str	r3, [sp, #4]
   17e28:	ldr	r3, [r4, #4]
   17e2c:	str	r3, [sp]
   17e30:	ldr	r3, [r4]
   17e34:	mov	r2, r0
   17e38:	mov	r0, r5
   17e3c:	bl	117f4 <__fprintf_chk@plt>
   17e40:	add	sp, sp, #32
   17e44:	pop	{r4, r5, r6, pc}
   17e48:	mov	r2, #5
   17e4c:	ldr	r1, [pc, #484]	; 18038 <lchmod@@Base+0x2214>
   17e50:	mov	r0, #0
   17e54:	bl	115f0 <dcgettext@plt>
   17e58:	ldr	r3, [r4, #16]
   17e5c:	mov	r1, #1
   17e60:	str	r3, [sp, #12]
   17e64:	ldr	r3, [r4, #12]
   17e68:	str	r3, [sp, #8]
   17e6c:	ldr	r3, [r4, #8]
   17e70:	str	r3, [sp, #4]
   17e74:	ldr	r3, [r4, #4]
   17e78:	str	r3, [sp]
   17e7c:	ldr	r3, [r4]
   17e80:	mov	r2, r0
   17e84:	mov	r0, r5
   17e88:	bl	117f4 <__fprintf_chk@plt>
   17e8c:	b	17e40 <lchmod@@Base+0x201c>
   17e90:	mov	r2, #5
   17e94:	ldr	r1, [pc, #416]	; 1803c <lchmod@@Base+0x2218>
   17e98:	mov	r0, #0
   17e9c:	bl	115f0 <dcgettext@plt>
   17ea0:	ldr	r3, [r4, #20]
   17ea4:	mov	r1, #1
   17ea8:	str	r3, [sp, #16]
   17eac:	ldr	r3, [r4, #16]
   17eb0:	str	r3, [sp, #12]
   17eb4:	ldr	r3, [r4, #12]
   17eb8:	str	r3, [sp, #8]
   17ebc:	ldr	r3, [r4, #8]
   17ec0:	str	r3, [sp, #4]
   17ec4:	ldr	r3, [r4, #4]
   17ec8:	str	r3, [sp]
   17ecc:	ldr	r3, [r4]
   17ed0:	mov	r2, r0
   17ed4:	mov	r0, r5
   17ed8:	bl	117f4 <__fprintf_chk@plt>
   17edc:	b	17e40 <lchmod@@Base+0x201c>
   17ee0:	mov	r2, #5
   17ee4:	ldr	r1, [pc, #340]	; 18040 <lchmod@@Base+0x221c>
   17ee8:	mov	r0, #0
   17eec:	bl	115f0 <dcgettext@plt>
   17ef0:	ldr	r3, [r4, #24]
   17ef4:	mov	r1, #1
   17ef8:	str	r3, [sp, #20]
   17efc:	ldr	r3, [r4, #20]
   17f00:	str	r3, [sp, #16]
   17f04:	ldr	r3, [r4, #16]
   17f08:	str	r3, [sp, #12]
   17f0c:	ldr	r3, [r4, #12]
   17f10:	str	r3, [sp, #8]
   17f14:	ldr	r3, [r4, #8]
   17f18:	str	r3, [sp, #4]
   17f1c:	ldr	r3, [r4, #4]
   17f20:	str	r3, [sp]
   17f24:	ldr	r3, [r4]
   17f28:	mov	r2, r0
   17f2c:	mov	r0, r5
   17f30:	bl	117f4 <__fprintf_chk@plt>
   17f34:	b	17e40 <lchmod@@Base+0x201c>
   17f38:	mov	r2, #5
   17f3c:	ldr	r1, [pc, #256]	; 18044 <lchmod@@Base+0x2220>
   17f40:	mov	r0, #0
   17f44:	bl	115f0 <dcgettext@plt>
   17f48:	ldr	r3, [r4, #28]
   17f4c:	mov	r1, #1
   17f50:	str	r3, [sp, #24]
   17f54:	ldr	r3, [r4, #24]
   17f58:	str	r3, [sp, #20]
   17f5c:	ldr	r3, [r4, #20]
   17f60:	str	r3, [sp, #16]
   17f64:	ldr	r3, [r4, #16]
   17f68:	str	r3, [sp, #12]
   17f6c:	ldr	r3, [r4, #12]
   17f70:	str	r3, [sp, #8]
   17f74:	ldr	r3, [r4, #8]
   17f78:	str	r3, [sp, #4]
   17f7c:	ldr	r3, [r4, #4]
   17f80:	str	r3, [sp]
   17f84:	ldr	r3, [r4]
   17f88:	mov	r2, r0
   17f8c:	mov	r0, r5
   17f90:	bl	117f4 <__fprintf_chk@plt>
   17f94:	b	17e40 <lchmod@@Base+0x201c>
   17f98:	ldr	r1, [pc, #168]	; 18048 <lchmod@@Base+0x2224>
   17f9c:	mov	r2, #5
   17fa0:	mov	r0, #0
   17fa4:	bl	115f0 <dcgettext@plt>
   17fa8:	ldr	r3, [r4, #32]
   17fac:	mov	r1, #1
   17fb0:	str	r3, [sp, #28]
   17fb4:	ldr	r3, [r4, #28]
   17fb8:	str	r3, [sp, #24]
   17fbc:	ldr	r3, [r4, #24]
   17fc0:	str	r3, [sp, #20]
   17fc4:	ldr	r3, [r4, #20]
   17fc8:	str	r3, [sp, #16]
   17fcc:	ldr	r3, [r4, #16]
   17fd0:	str	r3, [sp, #12]
   17fd4:	ldr	r3, [r4, #12]
   17fd8:	str	r3, [sp, #8]
   17fdc:	ldr	r3, [r4, #8]
   17fe0:	str	r3, [sp, #4]
   17fe4:	ldr	r3, [r4, #4]
   17fe8:	str	r3, [sp]
   17fec:	ldr	r3, [r4]
   17ff0:	mov	r2, r0
   17ff4:	mov	r0, r5
   17ff8:	bl	117f4 <__fprintf_chk@plt>
   17ffc:	b	17e40 <lchmod@@Base+0x201c>
   18000:	mov	r2, #5
   18004:	ldr	r1, [pc, #64]	; 1804c <lchmod@@Base+0x2228>
   18008:	b	17fa0 <lchmod@@Base+0x217c>
   1800c:	andeq	sl, r1, pc, lsr #8
   18010:	andeq	sl, r1, r2, asr #8
   18014:	andeq	r0, r0, r6, ror #15
   18018:	andeq	sl, r1, r0, lsl r7
   1801c:	andeq	sl, r1, r6, asr #8
   18020:	strdeq	sl, [r1], -r1
   18024:	andeq	sl, r1, fp, lsr r4
   18028:	andeq	sl, r1, r3, lsl r5
   1802c:	andeq	sl, r1, r3, lsr #10
   18030:	andeq	sl, r1, sl, lsr r5
   18034:	andeq	sl, r1, r6, asr r5
   18038:	andeq	sl, r1, r6, ror r5
   1803c:	muleq	r1, sl, r5
   18040:	andeq	sl, r1, r2, asr #11
   18044:	andeq	sl, r1, lr, ror #11
   18048:	andeq	sl, r1, lr, lsl r6
   1804c:	andeq	sl, r1, r2, asr r6
   18050:	push	{r0, r1, r4, lr}
   18054:	mov	ip, #0
   18058:	ldr	lr, [sp, #16]
   1805c:	ldr	r4, [lr, ip, lsl #2]
   18060:	cmp	r4, #0
   18064:	bne	1807c <lchmod@@Base+0x2258>
   18068:	str	ip, [sp, #4]
   1806c:	str	lr, [sp]
   18070:	bl	17c84 <lchmod@@Base+0x1e60>
   18074:	add	sp, sp, #8
   18078:	pop	{r4, pc}
   1807c:	add	ip, ip, #1
   18080:	b	1805c <lchmod@@Base+0x2238>
   18084:	push	{r4, r5, lr}
   18088:	sub	sp, sp, #52	; 0x34
   1808c:	mov	ip, #0
   18090:	ldr	r5, [sp, #64]	; 0x40
   18094:	add	lr, sp, #8
   18098:	ldr	r4, [r5, ip, lsl #2]
   1809c:	cmp	r4, #0
   180a0:	str	r4, [lr, ip, lsl #2]
   180a4:	beq	180b4 <lchmod@@Base+0x2290>
   180a8:	add	ip, ip, #1
   180ac:	cmp	ip, #10
   180b0:	bne	18098 <lchmod@@Base+0x2274>
   180b4:	str	ip, [sp, #4]
   180b8:	str	lr, [sp]
   180bc:	bl	17c84 <lchmod@@Base+0x1e60>
   180c0:	add	sp, sp, #52	; 0x34
   180c4:	pop	{r4, r5, pc}
   180c8:	push	{r3}		; (str r3, [sp, #-4]!)
   180cc:	push	{r0, r1, r2, r3, lr}
   180d0:	add	r3, sp, #24
   180d4:	str	r3, [sp, #12]
   180d8:	str	r3, [sp]
   180dc:	ldr	r3, [sp, #20]
   180e0:	bl	18084 <lchmod@@Base+0x2260>
   180e4:	add	sp, sp, #16
   180e8:	pop	{lr}		; (ldr lr, [sp], #4)
   180ec:	add	sp, sp, #4
   180f0:	bx	lr
   180f4:	ldr	r3, [pc, #116]	; 18170 <lchmod@@Base+0x234c>
   180f8:	push	{r4, lr}
   180fc:	mov	r0, #10
   18100:	ldr	r1, [r3]
   18104:	bl	115e4 <fputc_unlocked@plt>
   18108:	mov	r2, #5
   1810c:	ldr	r1, [pc, #96]	; 18174 <lchmod@@Base+0x2350>
   18110:	mov	r0, #0
   18114:	bl	115f0 <dcgettext@plt>
   18118:	ldr	r2, [pc, #88]	; 18178 <lchmod@@Base+0x2354>
   1811c:	mov	r1, r0
   18120:	mov	r0, #1
   18124:	bl	117d0 <__printf_chk@plt>
   18128:	mov	r2, #5
   1812c:	ldr	r1, [pc, #72]	; 1817c <lchmod@@Base+0x2358>
   18130:	mov	r0, #0
   18134:	bl	115f0 <dcgettext@plt>
   18138:	ldr	r3, [pc, #64]	; 18180 <lchmod@@Base+0x235c>
   1813c:	ldr	r2, [pc, #64]	; 18184 <lchmod@@Base+0x2360>
   18140:	mov	r1, r0
   18144:	mov	r0, #1
   18148:	bl	117d0 <__printf_chk@plt>
   1814c:	mov	r2, #5
   18150:	ldr	r1, [pc, #48]	; 18188 <lchmod@@Base+0x2364>
   18154:	mov	r0, #0
   18158:	bl	115f0 <dcgettext@plt>
   1815c:	ldr	r2, [pc, #40]	; 1818c <lchmod@@Base+0x2368>
   18160:	pop	{r4, lr}
   18164:	mov	r1, r0
   18168:	mov	r0, #1
   1816c:	b	117d0 <__printf_chk@plt>
   18170:	strdeq	fp, [r2], -r4
   18174:	andeq	sl, r1, lr, lsl #13
   18178:	andeq	sl, r1, r2, lsr #13
   1817c:			; <UNDEFINED> instruction: 0x0001a6b8
   18180:	strdeq	r9, [r1], -r9	; <UNPREDICTABLE>
   18184:	andeq	r9, r1, r1, lsr #30
   18188:	andeq	sl, r1, ip, asr #13
   1818c:	strdeq	sl, [r1], -r3
   18190:	push	{r4, lr}
   18194:	bl	18b28 <lchmod@@Base+0x2d04>
   18198:	cmp	r0, #0
   1819c:	popne	{r4, pc}
   181a0:	bl	18624 <lchmod@@Base+0x2800>
   181a4:	push	{r4, lr}
   181a8:	bl	18b28 <lchmod@@Base+0x2d04>
   181ac:	cmp	r0, #0
   181b0:	popne	{r4, pc}
   181b4:	bl	18624 <lchmod@@Base+0x2800>
   181b8:	b	18190 <lchmod@@Base+0x236c>
   181bc:	push	{r4, r5, r6, lr}
   181c0:	mov	r5, r0
   181c4:	mov	r4, r1
   181c8:	bl	18b68 <lchmod@@Base+0x2d44>
   181cc:	cmp	r0, #0
   181d0:	popne	{r4, r5, r6, pc}
   181d4:	adds	r4, r4, #0
   181d8:	movne	r4, #1
   181dc:	cmp	r5, #0
   181e0:	orreq	r4, r4, #1
   181e4:	cmp	r4, #0
   181e8:	popeq	{r4, r5, r6, pc}
   181ec:	bl	18624 <lchmod@@Base+0x2800>
   181f0:	push	{r4, lr}
   181f4:	cmp	r1, #0
   181f8:	orreq	r1, r1, #1
   181fc:	bl	18b68 <lchmod@@Base+0x2d44>
   18200:	cmp	r0, #0
   18204:	popne	{r4, pc}
   18208:	bl	18624 <lchmod@@Base+0x2800>
   1820c:	push	{r4, r5, r6, lr}
   18210:	mov	r6, r0
   18214:	mov	r5, r1
   18218:	mov	r4, r2
   1821c:	bl	191c4 <lchmod@@Base+0x33a0>
   18220:	cmp	r0, #0
   18224:	popne	{r4, r5, r6, pc}
   18228:	cmp	r6, #0
   1822c:	beq	1823c <lchmod@@Base+0x2418>
   18230:	cmp	r5, #0
   18234:	cmpne	r4, #0
   18238:	popeq	{r4, r5, r6, pc}
   1823c:	bl	18624 <lchmod@@Base+0x2800>
   18240:	b	1820c <lchmod@@Base+0x23e8>
   18244:	cmp	r2, #0
   18248:	cmpne	r1, #0
   1824c:	moveq	r2, #1
   18250:	moveq	r1, r2
   18254:	push	{r4, lr}
   18258:	bl	191c4 <lchmod@@Base+0x33a0>
   1825c:	cmp	r0, #0
   18260:	popne	{r4, pc}
   18264:	bl	18624 <lchmod@@Base+0x2800>
   18268:	mov	r2, r1
   1826c:	mov	r1, r0
   18270:	mov	r0, #0
   18274:	b	1820c <lchmod@@Base+0x23e8>
   18278:	mov	r2, r1
   1827c:	mov	r1, r0
   18280:	mov	r0, #0
   18284:	b	18244 <lchmod@@Base+0x2420>
   18288:	push	{r4, r5, r6, r7, r8, lr}
   1828c:	subs	r7, r0, #0
   18290:	mov	r5, r1
   18294:	mov	r6, r2
   18298:	ldr	r4, [r1]
   1829c:	bne	182d8 <lchmod@@Base+0x24b4>
   182a0:	cmp	r4, #0
   182a4:	bne	182c0 <lchmod@@Base+0x249c>
   182a8:	mov	r1, r2
   182ac:	mov	r0, #64	; 0x40
   182b0:	bl	192fc <lchmod@@Base+0x34d8>
   182b4:	cmp	r0, #0
   182b8:	movne	r4, r0
   182bc:	addeq	r4, r0, #1
   182c0:	mov	r2, r6
   182c4:	mov	r1, r4
   182c8:	mov	r0, r7
   182cc:	bl	1820c <lchmod@@Base+0x23e8>
   182d0:	str	r4, [r5]
   182d4:	pop	{r4, r5, r6, r7, r8, pc}
   182d8:	lsr	r2, r4, #1
   182dc:	add	r3, r2, #1
   182e0:	mvn	r3, r3
   182e4:	cmp	r4, r3
   182e8:	addls	r4, r4, #1
   182ec:	addls	r4, r4, r2
   182f0:	bls	182c0 <lchmod@@Base+0x249c>
   182f4:	bl	18624 <lchmod@@Base+0x2800>
   182f8:	mov	r2, #1
   182fc:	b	18288 <lchmod@@Base+0x2464>
   18300:	push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18304:	mov	sl, r0
   18308:	ldr	r8, [r1]
   1830c:	mov	fp, r1
   18310:	mov	r5, r2
   18314:	asrs	r4, r8, #1
   18318:	mov	r9, r3
   1831c:	ldr	r7, [sp, #48]	; 0x30
   18320:	bpl	183bc <lchmod@@Base+0x2598>
   18324:	rsb	r2, r4, #-2147483648	; 0x80000000
   18328:	cmp	r8, r2
   1832c:	movge	r2, #0
   18330:	movlt	r2, #1
   18334:	mvn	r3, r9
   18338:	cmp	r2, #0
   1833c:	lsr	r3, r3, #31
   18340:	addeq	r4, r4, r8
   18344:	mvnne	r4, #-2147483648	; 0x80000000
   18348:	mov	r0, r3
   1834c:	cmp	r9, r4
   18350:	movge	r0, #0
   18354:	andlt	r0, r0, #1
   18358:	cmp	r0, #0
   1835c:	str	r3, [sp, #4]
   18360:	bne	18530 <lchmod@@Base+0x270c>
   18364:	cmp	r7, #0
   18368:	bge	1847c <lchmod@@Base+0x2658>
   1836c:	cmp	r4, #0
   18370:	bge	183d4 <lchmod@@Base+0x25b0>
   18374:	mov	r1, r7
   18378:	mvn	r0, #-2147483648	; 0x80000000
   1837c:	bl	19508 <lchmod@@Base+0x36e4>
   18380:	cmp	r0, r4
   18384:	movle	r0, #0
   18388:	movgt	r0, #1
   1838c:	cmp	r0, #0
   18390:	mvnne	r6, #-2147483648	; 0x80000000
   18394:	beq	183e4 <lchmod@@Base+0x25c0>
   18398:	mov	r1, r7
   1839c:	mov	r0, r6
   183a0:	bl	19508 <lchmod@@Base+0x36e4>
   183a4:	mov	r1, r7
   183a8:	mov	r4, r0
   183ac:	mov	r0, r6
   183b0:	bl	19728 <lchmod@@Base+0x3904>
   183b4:	sub	r1, r6, r1
   183b8:	b	183f4 <lchmod@@Base+0x25d0>
   183bc:	mvn	r2, #-2147483648	; 0x80000000
   183c0:	sub	r2, r2, r4
   183c4:	cmp	r8, r2
   183c8:	movle	r2, #0
   183cc:	movgt	r2, #1
   183d0:	b	18334 <lchmod@@Base+0x2510>
   183d4:	cmn	r7, #1
   183d8:	movne	r1, r7
   183dc:	movne	r0, #-2147483648	; 0x80000000
   183e0:	bne	18548 <lchmod@@Base+0x2724>
   183e4:	mul	r1, r7, r4
   183e8:	cmp	r1, #63	; 0x3f
   183ec:	movle	r6, #64	; 0x40
   183f0:	ble	18398 <lchmod@@Base+0x2574>
   183f4:	cmp	sl, #0
   183f8:	sub	r2, r4, r8
   183fc:	streq	sl, [fp]
   18400:	cmp	r2, r5
   18404:	bge	184d8 <lchmod@@Base+0x26b4>
   18408:	cmp	r5, #0
   1840c:	bge	184a4 <lchmod@@Base+0x2680>
   18410:	rsb	r2, r5, #-2147483648	; 0x80000000
   18414:	cmp	r8, r2
   18418:	movge	r2, #0
   1841c:	movlt	r2, #1
   18420:	cmp	r2, #0
   18424:	bne	18478 <lchmod@@Base+0x2654>
   18428:	ldr	r0, [sp, #4]
   1842c:	add	r5, r8, r5
   18430:	cmp	r9, r5
   18434:	movge	r0, #0
   18438:	andlt	r0, r0, #1
   1843c:	cmp	r0, #0
   18440:	mov	r4, r5
   18444:	bne	18478 <lchmod@@Base+0x2654>
   18448:	cmp	r7, #0
   1844c:	bge	184ec <lchmod@@Base+0x26c8>
   18450:	cmp	r5, #0
   18454:	bge	184c4 <lchmod@@Base+0x26a0>
   18458:	mov	r1, r7
   1845c:	mvn	r0, #-2147483648	; 0x80000000
   18460:	bl	19508 <lchmod@@Base+0x36e4>
   18464:	cmp	r5, r0
   18468:	movge	r0, #0
   1846c:	movlt	r0, #1
   18470:	cmp	r0, #0
   18474:	beq	184d4 <lchmod@@Base+0x26b0>
   18478:	bl	18624 <lchmod@@Base+0x2800>
   1847c:	beq	183e4 <lchmod@@Base+0x25c0>
   18480:	cmp	r4, #0
   18484:	bge	18540 <lchmod@@Base+0x271c>
   18488:	cmn	r4, #1
   1848c:	beq	183e4 <lchmod@@Base+0x25c0>
   18490:	mov	r1, r4
   18494:	mov	r0, #-2147483648	; 0x80000000
   18498:	bl	19508 <lchmod@@Base+0x36e4>
   1849c:	cmp	r7, r0
   184a0:	b	18384 <lchmod@@Base+0x2560>
   184a4:	cmp	r8, #0
   184a8:	blt	18428 <lchmod@@Base+0x2604>
   184ac:	mvn	r2, #-2147483648	; 0x80000000
   184b0:	sub	r2, r2, r5
   184b4:	cmp	r8, r2
   184b8:	movle	r2, #0
   184bc:	movgt	r2, #1
   184c0:	b	18420 <lchmod@@Base+0x25fc>
   184c4:	cmn	r7, #1
   184c8:	movne	r1, r7
   184cc:	movne	r0, #-2147483648	; 0x80000000
   184d0:	bne	18524 <lchmod@@Base+0x2700>
   184d4:	mul	r1, r5, r7
   184d8:	mov	r0, sl
   184dc:	bl	181bc <lchmod@@Base+0x2398>
   184e0:	str	r4, [fp]
   184e4:	add	sp, sp, #12
   184e8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   184ec:	beq	184d4 <lchmod@@Base+0x26b0>
   184f0:	cmp	r5, #0
   184f4:	movge	r1, r7
   184f8:	mvnge	r0, #-2147483648	; 0x80000000
   184fc:	bge	18524 <lchmod@@Base+0x2700>
   18500:	cmn	r5, #1
   18504:	beq	184d4 <lchmod@@Base+0x26b0>
   18508:	mov	r1, r5
   1850c:	mov	r0, #-2147483648	; 0x80000000
   18510:	bl	19508 <lchmod@@Base+0x36e4>
   18514:	cmp	r7, r0
   18518:	movle	r0, #0
   1851c:	movgt	r0, #1
   18520:	b	18470 <lchmod@@Base+0x264c>
   18524:	bl	19508 <lchmod@@Base+0x36e4>
   18528:	cmp	r5, r0
   1852c:	b	18518 <lchmod@@Base+0x26f4>
   18530:	cmp	r7, #0
   18534:	mov	r4, r9
   18538:	blt	183d4 <lchmod@@Base+0x25b0>
   1853c:	beq	183e4 <lchmod@@Base+0x25c0>
   18540:	mov	r1, r7
   18544:	mvn	r0, #-2147483648	; 0x80000000
   18548:	bl	19508 <lchmod@@Base+0x36e4>
   1854c:	cmp	r0, r4
   18550:	movge	r0, #0
   18554:	movlt	r0, #1
   18558:	b	1838c <lchmod@@Base+0x2568>
   1855c:	push	{r4, lr}
   18560:	bl	18ae0 <lchmod@@Base+0x2cbc>
   18564:	cmp	r0, #0
   18568:	popne	{r4, pc}
   1856c:	bl	18624 <lchmod@@Base+0x2800>
   18570:	mov	r1, #1
   18574:	b	1855c <lchmod@@Base+0x2738>
   18578:	push	{r4, lr}
   1857c:	bl	18ae0 <lchmod@@Base+0x2cbc>
   18580:	cmp	r0, #0
   18584:	popne	{r4, pc}
   18588:	bl	18624 <lchmod@@Base+0x2800>
   1858c:	mov	r1, #1
   18590:	b	18578 <lchmod@@Base+0x2754>
   18594:	push	{r4, r5, r6, lr}
   18598:	mov	r4, r1
   1859c:	mov	r5, r0
   185a0:	mov	r0, r1
   185a4:	bl	18190 <lchmod@@Base+0x236c>
   185a8:	mov	r2, r4
   185ac:	mov	r1, r5
   185b0:	pop	{r4, r5, r6, lr}
   185b4:	b	115b4 <memcpy@plt>
   185b8:	push	{r4, r5, r6, lr}
   185bc:	mov	r4, r1
   185c0:	mov	r5, r0
   185c4:	mov	r0, r1
   185c8:	bl	181a4 <lchmod@@Base+0x2380>
   185cc:	mov	r2, r4
   185d0:	mov	r1, r5
   185d4:	pop	{r4, r5, r6, lr}
   185d8:	b	115b4 <memcpy@plt>
   185dc:	push	{r4, r5, r6, lr}
   185e0:	mov	r5, r0
   185e4:	add	r0, r1, #1
   185e8:	mov	r4, r1
   185ec:	bl	181a4 <lchmod@@Base+0x2380>
   185f0:	mov	r2, #0
   185f4:	mov	r1, r5
   185f8:	strb	r2, [r0, r4]
   185fc:	mov	r2, r4
   18600:	pop	{r4, r5, r6, lr}
   18604:	b	115b4 <memcpy@plt>
   18608:	push	{r4, lr}
   1860c:	mov	r4, r0
   18610:	bl	11764 <strlen@plt>
   18614:	add	r1, r0, #1
   18618:	mov	r0, r4
   1861c:	pop	{r4, lr}
   18620:	b	18594 <lchmod@@Base+0x2770>
   18624:	ldr	r3, [pc, #44]	; 18658 <lchmod@@Base+0x2834>
   18628:	push	{r4, lr}
   1862c:	mov	r2, #5
   18630:	ldr	r1, [pc, #36]	; 1865c <lchmod@@Base+0x2838>
   18634:	mov	r0, #0
   18638:	ldr	r4, [r3]
   1863c:	bl	115f0 <dcgettext@plt>
   18640:	ldr	r2, [pc, #24]	; 18660 <lchmod@@Base+0x283c>
   18644:	mov	r1, #0
   18648:	mov	r3, r0
   1864c:	mov	r0, r4
   18650:	bl	116bc <error@plt>
   18654:	bl	11914 <abort@plt>
   18658:	muleq	r2, r8, r1
   1865c:	andeq	sl, r1, pc, lsr r7
   18660:	andeq	sl, r1, sl, ror r2
   18664:	push	{r4, lr}
   18668:	orr	r1, r1, #512	; 0x200
   1866c:	bl	143f8 <__assert_fail@plt+0x2a90>
   18670:	cmp	r0, #0
   18674:	popne	{r4, pc}
   18678:	bl	117a0 <__errno_location@plt>
   1867c:	ldr	r3, [r0]
   18680:	cmp	r3, #22
   18684:	bne	1869c <lchmod@@Base+0x2878>
   18688:	ldr	r3, [pc, #16]	; 186a0 <lchmod@@Base+0x287c>
   1868c:	mov	r2, #41	; 0x29
   18690:	ldr	r1, [pc, #12]	; 186a4 <lchmod@@Base+0x2880>
   18694:	ldr	r0, [pc, #12]	; 186a8 <lchmod@@Base+0x2884>
   18698:	bl	11968 <__assert_fail@plt>
   1869c:	bl	18624 <lchmod@@Base+0x2800>
   186a0:	andeq	sl, r1, r0, asr r7
   186a4:	andeq	sl, r1, sl, asr r7
   186a8:	andeq	sl, r1, r5, ror #14
   186ac:	ldr	r3, [r0, #48]	; 0x30
   186b0:	and	r3, r3, #17
   186b4:	cmp	r3, #16
   186b8:	beq	186d4 <lchmod@@Base+0x28b0>
   186bc:	cmp	r3, #17
   186c0:	bne	186dc <lchmod@@Base+0x28b8>
   186c4:	ldr	r0, [r1, #48]	; 0x30
   186c8:	adds	r0, r0, #0
   186cc:	movne	r0, #1
   186d0:	bx	lr
   186d4:	mov	r0, #1
   186d8:	bx	lr
   186dc:	mov	r0, #0
   186e0:	bx	lr
   186e4:	push	{r4, r5, r6, lr}
   186e8:	subs	r5, r1, #0
   186ec:	mov	r4, r0
   186f0:	bge	18730 <lchmod@@Base+0x290c>
   186f4:	ldm	r0, {r0, r3}
   186f8:	orr	r0, r0, r3
   186fc:	adds	r0, r0, #0
   18700:	movne	r0, #1
   18704:	cmp	r0, #0
   18708:	bne	18764 <lchmod@@Base+0x2940>
   1870c:	ldr	r2, [r4]
   18710:	asr	r3, r5, #31
   18714:	ldr	r1, [r4, #4]
   18718:	mul	r3, r3, r2
   1871c:	mla	r1, r5, r1, r3
   18720:	umull	r2, r3, r2, r5
   18724:	add	r3, r1, r3
   18728:	strd	r2, [r4]
   1872c:	pop	{r4, r5, r6, pc}
   18730:	moveq	r0, r5
   18734:	beq	18704 <lchmod@@Base+0x28e0>
   18738:	mov	r2, r5
   1873c:	asr	r3, r5, #31
   18740:	mvn	r0, #0
   18744:	mvn	r1, #0
   18748:	bl	19748 <lchmod@@Base+0x3924>
   1874c:	ldrd	r2, [r4]
   18750:	cmp	r1, r3
   18754:	cmpeq	r0, r2
   18758:	movcc	r0, #1
   1875c:	movcs	r0, #0
   18760:	b	18704 <lchmod@@Base+0x28e0>
   18764:	mvn	r2, #0
   18768:	mvn	r3, #0
   1876c:	mov	r0, #1
   18770:	strd	r2, [r4]
   18774:	pop	{r4, r5, r6, pc}
   18778:	push	{r4, r5, r6, r7, r8, lr}
   1877c:	mov	r6, r0
   18780:	mov	r7, r1
   18784:	mov	r5, r2
   18788:	mov	r4, #0
   1878c:	cmp	r5, #0
   18790:	bne	1879c <lchmod@@Base+0x2978>
   18794:	mov	r0, r4
   18798:	pop	{r4, r5, r6, r7, r8, pc}
   1879c:	mov	r1, r7
   187a0:	mov	r0, r6
   187a4:	bl	186e4 <lchmod@@Base+0x28c0>
   187a8:	sub	r5, r5, #1
   187ac:	orr	r4, r4, r0
   187b0:	b	1878c <lchmod@@Base+0x2968>
   187b4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   187b8:	sub	sp, sp, #20
   187bc:	cmp	r2, #36	; 0x24
   187c0:	ldr	r9, [sp, #56]	; 0x38
   187c4:	bls	187dc <lchmod@@Base+0x29b8>
   187c8:	ldr	r3, [pc, #772]	; 18ad4 <lchmod@@Base+0x2cb0>
   187cc:	mov	r2, #85	; 0x55
   187d0:	ldr	r1, [pc, #768]	; 18ad8 <lchmod@@Base+0x2cb4>
   187d4:	ldr	r0, [pc, #768]	; 18adc <lchmod@@Base+0x2cb8>
   187d8:	bl	11968 <__assert_fail@plt>
   187dc:	cmp	r1, #0
   187e0:	mov	r7, r1
   187e4:	mov	r4, r0
   187e8:	mov	fp, r2
   187ec:	mov	r8, r3
   187f0:	addeq	r7, sp, #4
   187f4:	bl	117a0 <__errno_location@plt>
   187f8:	mov	r3, #0
   187fc:	str	r3, [r0]
   18800:	mov	sl, r0
   18804:	bl	11734 <__ctype_b_loc@plt>
   18808:	ldrb	r6, [r4]
   1880c:	mov	r3, r4
   18810:	ldr	r1, [r0]
   18814:	lsl	r2, r6, #1
   18818:	ldrh	r5, [r1, r2]
   1881c:	ands	r5, r5, #8192	; 0x2000
   18820:	bne	1883c <lchmod@@Base+0x2a18>
   18824:	cmp	r6, #45	; 0x2d
   18828:	bne	18844 <lchmod@@Base+0x2a20>
   1882c:	mov	r5, #4
   18830:	mov	r0, r5
   18834:	add	sp, sp, #20
   18838:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1883c:	ldrb	r6, [r3, #1]!
   18840:	b	18814 <lchmod@@Base+0x29f0>
   18844:	mov	r2, fp
   18848:	mov	r1, r7
   1884c:	mov	r0, r4
   18850:	bl	117e8 <strtoumax@plt>
   18854:	ldr	r6, [r7]
   18858:	cmp	r4, r6
   1885c:	strd	r0, [sp, #8]
   18860:	bne	188c4 <lchmod@@Base+0x2aa0>
   18864:	cmp	r9, #0
   18868:	beq	1882c <lchmod@@Base+0x2a08>
   1886c:	ldrb	r1, [r6]
   18870:	cmp	r1, #0
   18874:	beq	1882c <lchmod@@Base+0x2a08>
   18878:	mov	r0, r9
   1887c:	bl	1177c <strchr@plt>
   18880:	cmp	r0, #0
   18884:	beq	1882c <lchmod@@Base+0x2a08>
   18888:	mov	r2, #1
   1888c:	mov	r3, #0
   18890:	strd	r2, [sp, #8]
   18894:	ldrb	r4, [r6]
   18898:	cmp	r4, #0
   1889c:	beq	189d4 <lchmod@@Base+0x2bb0>
   188a0:	mov	r1, r4
   188a4:	mov	r0, r9
   188a8:	bl	1177c <strchr@plt>
   188ac:	cmp	r0, #0
   188b0:	bne	188ec <lchmod@@Base+0x2ac8>
   188b4:	ldrd	r2, [sp, #8]
   188b8:	orr	r5, r5, #2
   188bc:	strd	r2, [r8]
   188c0:	b	18830 <lchmod@@Base+0x2a0c>
   188c4:	ldr	r5, [sl]
   188c8:	cmp	r5, #0
   188cc:	beq	188dc <lchmod@@Base+0x2ab8>
   188d0:	cmp	r5, #34	; 0x22
   188d4:	bne	1882c <lchmod@@Base+0x2a08>
   188d8:	mov	r5, #1
   188dc:	cmp	r9, #0
   188e0:	bne	18894 <lchmod@@Base+0x2a70>
   188e4:	strd	r0, [r8]
   188e8:	b	18830 <lchmod@@Base+0x2a0c>
   188ec:	cmp	r4, #84	; 0x54
   188f0:	beq	18944 <lchmod@@Base+0x2b20>
   188f4:	bhi	1892c <lchmod@@Base+0x2b08>
   188f8:	cmp	r4, #75	; 0x4b
   188fc:	beq	18944 <lchmod@@Base+0x2b20>
   18900:	bhi	1891c <lchmod@@Base+0x2af8>
   18904:	cmp	r4, #69	; 0x45
   18908:	beq	18944 <lchmod@@Base+0x2b20>
   1890c:	cmp	r4, #71	; 0x47
   18910:	beq	18944 <lchmod@@Base+0x2b20>
   18914:	mov	r6, #1
   18918:	b	18a08 <lchmod@@Base+0x2be4>
   1891c:	cmp	r4, #77	; 0x4d
   18920:	beq	18944 <lchmod@@Base+0x2b20>
   18924:	cmp	r4, #80	; 0x50
   18928:	b	18910 <lchmod@@Base+0x2aec>
   1892c:	cmp	r4, #103	; 0x67
   18930:	beq	18944 <lchmod@@Base+0x2b20>
   18934:	bhi	189e0 <lchmod@@Base+0x2bbc>
   18938:	sub	r3, r4, #89	; 0x59
   1893c:	cmp	r3, #1
   18940:	bhi	18914 <lchmod@@Base+0x2af0>
   18944:	mov	r1, #48	; 0x30
   18948:	mov	r0, r9
   1894c:	bl	1177c <strchr@plt>
   18950:	cmp	r0, #0
   18954:	beq	18914 <lchmod@@Base+0x2af0>
   18958:	ldrb	r3, [r6, #1]
   1895c:	cmp	r3, #68	; 0x44
   18960:	beq	18974 <lchmod@@Base+0x2b50>
   18964:	cmp	r3, #105	; 0x69
   18968:	beq	189f8 <lchmod@@Base+0x2bd4>
   1896c:	cmp	r3, #66	; 0x42
   18970:	bne	18914 <lchmod@@Base+0x2af0>
   18974:	mov	r6, #2
   18978:	mov	r1, #1000	; 0x3e8
   1897c:	cmp	r4, #89	; 0x59
   18980:	beq	18abc <lchmod@@Base+0x2c98>
   18984:	bhi	18a30 <lchmod@@Base+0x2c0c>
   18988:	cmp	r4, #75	; 0x4b
   1898c:	beq	18a70 <lchmod@@Base+0x2c4c>
   18990:	bhi	18a10 <lchmod@@Base+0x2bec>
   18994:	cmp	r4, #69	; 0x45
   18998:	beq	18a98 <lchmod@@Base+0x2c74>
   1899c:	cmp	r4, #71	; 0x47
   189a0:	beq	18aa4 <lchmod@@Base+0x2c80>
   189a4:	cmp	r4, #66	; 0x42
   189a8:	moveq	r1, #1024	; 0x400
   189ac:	bne	188b4 <lchmod@@Base+0x2a90>
   189b0:	add	r0, sp, #8
   189b4:	bl	186e4 <lchmod@@Base+0x28c0>
   189b8:	ldr	r3, [r7]
   189bc:	orr	r5, r5, r0
   189c0:	add	r2, r3, r6
   189c4:	str	r2, [r7]
   189c8:	ldrb	r3, [r3, r6]
   189cc:	cmp	r3, #0
   189d0:	orrne	r5, r5, #2
   189d4:	ldrd	r2, [sp, #8]
   189d8:	strd	r2, [r8]
   189dc:	b	18830 <lchmod@@Base+0x2a0c>
   189e0:	cmp	r4, #109	; 0x6d
   189e4:	beq	18944 <lchmod@@Base+0x2b20>
   189e8:	cmp	r4, #116	; 0x74
   189ec:	beq	18944 <lchmod@@Base+0x2b20>
   189f0:	cmp	r4, #107	; 0x6b
   189f4:	b	18910 <lchmod@@Base+0x2aec>
   189f8:	ldrb	r6, [r6, #2]
   189fc:	cmp	r6, #66	; 0x42
   18a00:	movne	r6, #1
   18a04:	moveq	r6, #3
   18a08:	mov	r1, #1024	; 0x400
   18a0c:	b	1897c <lchmod@@Base+0x2b58>
   18a10:	cmp	r4, #80	; 0x50
   18a14:	beq	18aac <lchmod@@Base+0x2c88>
   18a18:	cmp	r4, #84	; 0x54
   18a1c:	beq	18ab4 <lchmod@@Base+0x2c90>
   18a20:	cmp	r4, #77	; 0x4d
   18a24:	bne	188b4 <lchmod@@Base+0x2a90>
   18a28:	mov	r2, #2
   18a2c:	b	18a9c <lchmod@@Base+0x2c78>
   18a30:	cmp	r4, #103	; 0x67
   18a34:	beq	18aa4 <lchmod@@Base+0x2c80>
   18a38:	bhi	18a5c <lchmod@@Base+0x2c38>
   18a3c:	cmp	r4, #98	; 0x62
   18a40:	beq	18a90 <lchmod@@Base+0x2c6c>
   18a44:	cmp	r4, #99	; 0x63
   18a48:	beq	18acc <lchmod@@Base+0x2ca8>
   18a4c:	cmp	r4, #90	; 0x5a
   18a50:	bne	188b4 <lchmod@@Base+0x2a90>
   18a54:	mov	r2, #7
   18a58:	b	18a9c <lchmod@@Base+0x2c78>
   18a5c:	cmp	r4, #109	; 0x6d
   18a60:	beq	18a28 <lchmod@@Base+0x2c04>
   18a64:	bhi	18a78 <lchmod@@Base+0x2c54>
   18a68:	cmp	r4, #107	; 0x6b
   18a6c:	bne	188b4 <lchmod@@Base+0x2a90>
   18a70:	mov	r2, #1
   18a74:	b	18a9c <lchmod@@Base+0x2c78>
   18a78:	cmp	r4, #116	; 0x74
   18a7c:	beq	18ab4 <lchmod@@Base+0x2c90>
   18a80:	cmp	r4, #119	; 0x77
   18a84:	moveq	r1, #2
   18a88:	beq	189b0 <lchmod@@Base+0x2b8c>
   18a8c:	b	188b4 <lchmod@@Base+0x2a90>
   18a90:	mov	r1, #512	; 0x200
   18a94:	b	189b0 <lchmod@@Base+0x2b8c>
   18a98:	mov	r2, #6
   18a9c:	add	r0, sp, #8
   18aa0:	b	18ac4 <lchmod@@Base+0x2ca0>
   18aa4:	mov	r2, #3
   18aa8:	b	18a9c <lchmod@@Base+0x2c78>
   18aac:	mov	r2, #5
   18ab0:	b	18a9c <lchmod@@Base+0x2c78>
   18ab4:	mov	r2, #4
   18ab8:	b	18a9c <lchmod@@Base+0x2c78>
   18abc:	mov	r2, #8
   18ac0:	add	r0, sp, r2
   18ac4:	bl	18778 <lchmod@@Base+0x2954>
   18ac8:	b	189b8 <lchmod@@Base+0x2b94>
   18acc:	mov	r0, #0
   18ad0:	b	189b8 <lchmod@@Base+0x2b94>
   18ad4:	andeq	sl, r1, r5, ror r7
   18ad8:	andeq	sl, r1, r0, lsl #15
   18adc:	andeq	sl, r1, lr, lsl #15
   18ae0:	cmp	r1, #0
   18ae4:	cmpne	r0, #0
   18ae8:	moveq	r1, #1
   18aec:	moveq	r0, r1
   18af0:	umull	r2, r3, r0, r1
   18af4:	adds	r3, r3, #0
   18af8:	movne	r3, #1
   18afc:	cmp	r2, #0
   18b00:	blt	18b10 <lchmod@@Base+0x2cec>
   18b04:	cmp	r3, #0
   18b08:	bne	18b10 <lchmod@@Base+0x2cec>
   18b0c:	b	11518 <calloc@plt>
   18b10:	push	{r4, lr}
   18b14:	bl	117a0 <__errno_location@plt>
   18b18:	mov	r3, #12
   18b1c:	str	r3, [r0]
   18b20:	mov	r0, #0
   18b24:	pop	{r4, pc}
   18b28:	cmp	r0, #0
   18b2c:	mov	r3, #0
   18b30:	moveq	r0, #1
   18b34:	adds	r3, r3, #0
   18b38:	movne	r3, #1
   18b3c:	cmp	r0, #0
   18b40:	blt	18b50 <lchmod@@Base+0x2d2c>
   18b44:	cmp	r3, #0
   18b48:	bne	18b50 <lchmod@@Base+0x2d2c>
   18b4c:	b	116e0 <malloc@plt>
   18b50:	push	{r4, lr}
   18b54:	bl	117a0 <__errno_location@plt>
   18b58:	mov	r3, #12
   18b5c:	str	r3, [r0]
   18b60:	mov	r0, #0
   18b64:	pop	{r4, pc}
   18b68:	cmp	r0, #0
   18b6c:	push	{r4, lr}
   18b70:	mov	r4, r1
   18b74:	bne	18b84 <lchmod@@Base+0x2d60>
   18b78:	mov	r0, r1
   18b7c:	pop	{r4, lr}
   18b80:	b	18b28 <lchmod@@Base+0x2d04>
   18b84:	cmp	r1, #0
   18b88:	bne	18b98 <lchmod@@Base+0x2d74>
   18b8c:	bl	13188 <__assert_fail@plt+0x1820>
   18b90:	mov	r0, #0
   18b94:	pop	{r4, pc}
   18b98:	cmp	r1, #0
   18b9c:	blt	18bac <lchmod@@Base+0x2d88>
   18ba0:	mov	r3, #0
   18ba4:	cmp	r3, r3
   18ba8:	beq	18bbc <lchmod@@Base+0x2d98>
   18bac:	bl	117a0 <__errno_location@plt>
   18bb0:	mov	r3, #12
   18bb4:	str	r3, [r0]
   18bb8:	b	18b90 <lchmod@@Base+0x2d6c>
   18bbc:	pop	{r4, lr}
   18bc0:	b	11608 <realloc@plt>
   18bc4:	mov	r2, r0
   18bc8:	push	{r4, lr}
   18bcc:	mov	r0, r2
   18bd0:	ldrb	r3, [r2]
   18bd4:	add	r1, r2, #1
   18bd8:	cmp	r3, #47	; 0x2f
   18bdc:	beq	18c00 <lchmod@@Base+0x2ddc>
   18be0:	mov	r3, #0
   18be4:	mov	lr, #1
   18be8:	mov	r4, r3
   18bec:	mov	ip, r2
   18bf0:	ldrb	r1, [r2], #1
   18bf4:	cmp	r1, #0
   18bf8:	bne	18c08 <lchmod@@Base+0x2de4>
   18bfc:	pop	{r4, pc}
   18c00:	mov	r2, r1
   18c04:	b	18bcc <lchmod@@Base+0x2da8>
   18c08:	cmp	r1, #47	; 0x2f
   18c0c:	moveq	r3, lr
   18c10:	beq	18bec <lchmod@@Base+0x2dc8>
   18c14:	cmp	r3, #0
   18c18:	movne	r0, ip
   18c1c:	movne	r3, r4
   18c20:	b	18bec <lchmod@@Base+0x2dc8>
   18c24:	push	{r4, lr}
   18c28:	mov	r4, r0
   18c2c:	bl	11764 <strlen@plt>
   18c30:	cmp	r0, #1
   18c34:	popls	{r4, pc}
   18c38:	sub	r3, r0, #1
   18c3c:	ldrb	r2, [r4, r3]
   18c40:	cmp	r2, #47	; 0x2f
   18c44:	beq	18c4c <lchmod@@Base+0x2e28>
   18c48:	pop	{r4, pc}
   18c4c:	mov	r0, r3
   18c50:	b	18c30 <lchmod@@Base+0x2e0c>
   18c54:	push	{r4, r5, r6, lr}
   18c58:	mov	r4, r0
   18c5c:	bl	11698 <__fpending@plt>
   18c60:	mov	r5, r0
   18c64:	mov	r0, r4
   18c68:	bl	116a4 <ferror_unlocked@plt>
   18c6c:	mov	r6, r0
   18c70:	mov	r0, r4
   18c74:	bl	18d90 <lchmod@@Base+0x2f6c>
   18c78:	cmp	r6, #0
   18c7c:	mov	r4, r0
   18c80:	bne	18cac <lchmod@@Base+0x2e88>
   18c84:	cmp	r0, #0
   18c88:	beq	18ca4 <lchmod@@Base+0x2e80>
   18c8c:	cmp	r5, #0
   18c90:	bne	18cbc <lchmod@@Base+0x2e98>
   18c94:	bl	117a0 <__errno_location@plt>
   18c98:	ldr	r4, [r0]
   18c9c:	subs	r4, r4, #9
   18ca0:	mvnne	r4, #0
   18ca4:	mov	r0, r4
   18ca8:	pop	{r4, r5, r6, pc}
   18cac:	cmp	r0, #0
   18cb0:	bne	18cbc <lchmod@@Base+0x2e98>
   18cb4:	bl	117a0 <__errno_location@plt>
   18cb8:	str	r4, [r0]
   18cbc:	mvn	r4, #0
   18cc0:	b	18ca4 <lchmod@@Base+0x2e80>
   18cc4:	mov	r3, #0
   18cc8:	mov	r2, #0
   18ccc:	strd	r2, [r0, #16]
   18cd0:	ldr	r3, [pc, #4]	; 18cdc <lchmod@@Base+0x2eb8>
   18cd4:	str	r3, [r0, #24]
   18cd8:	bx	lr
   18cdc:	addseq	pc, r5, r6, lsl r6	; <UNPREDICTABLE>
   18ce0:	ldr	r2, [r0, #24]
   18ce4:	ldr	r3, [pc, #148]	; 18d80 <lchmod@@Base+0x2f5c>
   18ce8:	push	{r4, r5, r6, r7, r8, lr}
   18cec:	cmp	r2, r3
   18cf0:	beq	18d08 <lchmod@@Base+0x2ee4>
   18cf4:	ldr	r3, [pc, #136]	; 18d84 <lchmod@@Base+0x2f60>
   18cf8:	mov	r2, #60	; 0x3c
   18cfc:	ldr	r1, [pc, #132]	; 18d88 <lchmod@@Base+0x2f64>
   18d00:	ldr	r0, [pc, #132]	; 18d8c <lchmod@@Base+0x2f68>
   18d04:	bl	11968 <__assert_fail@plt>
   18d08:	ldrd	r6, [r0, #16]
   18d0c:	orrs	r3, r6, r7
   18d10:	beq	18d44 <lchmod@@Base+0x2f20>
   18d14:	ldrd	r4, [r1, #96]	; 0x60
   18d18:	ldrd	r2, [r0]
   18d1c:	cmp	r5, r3
   18d20:	cmpeq	r4, r2
   18d24:	bne	18d44 <lchmod@@Base+0x2f20>
   18d28:	ldrd	r4, [r1]
   18d2c:	ldrd	r2, [r0, #8]
   18d30:	cmp	r5, r3
   18d34:	cmpeq	r4, r2
   18d38:	bne	18d44 <lchmod@@Base+0x2f20>
   18d3c:	mov	r0, #1
   18d40:	pop	{r4, r5, r6, r7, r8, pc}
   18d44:	adds	r2, r6, #1
   18d48:	adc	r3, r7, #0
   18d4c:	and	r6, r6, r2
   18d50:	and	r7, r7, r3
   18d54:	orrs	ip, r6, r7
   18d58:	strd	r2, [r0, #16]
   18d5c:	bne	18d78 <lchmod@@Base+0x2f54>
   18d60:	orrs	r3, r2, r3
   18d64:	beq	18d3c <lchmod@@Base+0x2f18>
   18d68:	ldrd	r2, [r1]
   18d6c:	strd	r2, [r0, #8]
   18d70:	ldrd	r2, [r1, #96]	; 0x60
   18d74:	strd	r2, [r0]
   18d78:	mov	r0, #0
   18d7c:	pop	{r4, r5, r6, r7, r8, pc}
   18d80:	addseq	pc, r5, r6, lsl r6	; <UNPREDICTABLE>
   18d84:			; <UNDEFINED> instruction: 0x0001a7b4
   18d88:	andeq	sl, r1, r0, asr #15
   18d8c:	ldrdeq	sl, [r1], -r2
   18d90:	push	{r0, r1, r2, r4, r5, lr}
   18d94:	mov	r4, r0
   18d98:	bl	117dc <fileno@plt>
   18d9c:	cmp	r0, #0
   18da0:	mov	r0, r4
   18da4:	bge	18db4 <lchmod@@Base+0x2f90>
   18da8:	add	sp, sp, #12
   18dac:	pop	{r4, r5, lr}
   18db0:	b	11800 <fclose@plt>
   18db4:	bl	116f8 <__freading@plt>
   18db8:	cmp	r0, #0
   18dbc:	bne	18df8 <lchmod@@Base+0x2fd4>
   18dc0:	mov	r0, r4
   18dc4:	bl	19030 <lchmod@@Base+0x320c>
   18dc8:	cmp	r0, #0
   18dcc:	bne	18e2c <lchmod@@Base+0x3008>
   18dd0:	mov	r5, #0
   18dd4:	mov	r0, r4
   18dd8:	bl	11800 <fclose@plt>
   18ddc:	cmp	r5, #0
   18de0:	beq	18df0 <lchmod@@Base+0x2fcc>
   18de4:	bl	117a0 <__errno_location@plt>
   18de8:	str	r5, [r0]
   18dec:	mvn	r0, #0
   18df0:	add	sp, sp, #12
   18df4:	pop	{r4, r5, pc}
   18df8:	mov	r0, r4
   18dfc:	bl	117dc <fileno@plt>
   18e00:	mov	r3, #1
   18e04:	str	r3, [sp]
   18e08:	mov	r2, #0
   18e0c:	mov	r3, #0
   18e10:	bl	11668 <lseek64@plt>
   18e14:	mvn	r3, #0
   18e18:	mvn	r2, #0
   18e1c:	cmp	r1, r3
   18e20:	cmpeq	r0, r2
   18e24:	bne	18dc0 <lchmod@@Base+0x2f9c>
   18e28:	b	18dd0 <lchmod@@Base+0x2fac>
   18e2c:	bl	117a0 <__errno_location@plt>
   18e30:	ldr	r5, [r0]
   18e34:	b	18dd4 <lchmod@@Base+0x2fb0>
   18e38:	push	{r1, r2, r3}
   18e3c:	push	{r0, r1, r4, r5, r6, r7, lr}
   18e40:	add	r2, sp, #32
   18e44:	ldr	r1, [sp, #28]
   18e48:	str	r2, [sp, #4]
   18e4c:	cmp	r1, #0
   18e50:	beq	18e94 <lchmod@@Base+0x3070>
   18e54:	ldr	r3, [pc, #396]	; 18fe8 <lchmod@@Base+0x31c4>
   18e58:	mov	r6, r0
   18e5c:	cmp	r1, r3
   18e60:	beq	18ea0 <lchmod@@Base+0x307c>
   18e64:	cmp	r1, #11
   18e68:	beq	18e84 <lchmod@@Base+0x3060>
   18e6c:	bgt	18fb0 <lchmod@@Base+0x318c>
   18e70:	cmp	r1, #3
   18e74:	beq	18e84 <lchmod@@Base+0x3060>
   18e78:	bgt	18f8c <lchmod@@Base+0x3168>
   18e7c:	cmp	r1, #1
   18e80:	bne	18f98 <lchmod@@Base+0x3174>
   18e84:	mov	r0, r6
   18e88:	bl	11818 <fcntl64@plt>
   18e8c:	mov	r4, r0
   18e90:	b	18f4c <lchmod@@Base+0x3128>
   18e94:	ldr	r2, [sp, #32]
   18e98:	bl	11818 <fcntl64@plt>
   18e9c:	b	18e8c <lchmod@@Base+0x3068>
   18ea0:	ldr	r5, [pc, #324]	; 18fec <lchmod@@Base+0x31c8>
   18ea4:	add	r3, sp, #36	; 0x24
   18ea8:	str	r3, [sp, #4]
   18eac:	ldr	r3, [r5]
   18eb0:	ldr	r7, [r2]
   18eb4:	cmp	r3, #0
   18eb8:	mov	r2, r7
   18ebc:	blt	18f60 <lchmod@@Base+0x313c>
   18ec0:	bl	11818 <fcntl64@plt>
   18ec4:	subs	r4, r0, #0
   18ec8:	bge	18edc <lchmod@@Base+0x30b8>
   18ecc:	bl	117a0 <__errno_location@plt>
   18ed0:	ldr	r3, [r0]
   18ed4:	cmp	r3, #22
   18ed8:	beq	18f2c <lchmod@@Base+0x3108>
   18edc:	mov	r3, #1
   18ee0:	str	r3, [r5]
   18ee4:	cmp	r4, #0
   18ee8:	blt	18f4c <lchmod@@Base+0x3128>
   18eec:	ldr	r5, [r5]
   18ef0:	cmn	r5, #1
   18ef4:	bne	18f4c <lchmod@@Base+0x3128>
   18ef8:	mov	r1, #1
   18efc:	mov	r0, r4
   18f00:	bl	11818 <fcntl64@plt>
   18f04:	subs	r2, r0, #0
   18f08:	bge	18f70 <lchmod@@Base+0x314c>
   18f0c:	bl	117a0 <__errno_location@plt>
   18f10:	ldr	r7, [r0]
   18f14:	mov	r6, r0
   18f18:	mov	r0, r4
   18f1c:	bl	11920 <close@plt>
   18f20:	mov	r4, r5
   18f24:	str	r7, [r6]
   18f28:	b	18f4c <lchmod@@Base+0x3128>
   18f2c:	mov	r2, r7
   18f30:	mov	r1, #0
   18f34:	mov	r0, r6
   18f38:	bl	11818 <fcntl64@plt>
   18f3c:	subs	r4, r0, #0
   18f40:	mvnge	r3, #0
   18f44:	strge	r3, [r5]
   18f48:	bge	18eec <lchmod@@Base+0x30c8>
   18f4c:	mov	r0, r4
   18f50:	add	sp, sp, #8
   18f54:	pop	{r4, r5, r6, r7, lr}
   18f58:	add	sp, sp, #12
   18f5c:	bx	lr
   18f60:	mov	r1, #0
   18f64:	bl	11818 <fcntl64@plt>
   18f68:	mov	r4, r0
   18f6c:	b	18ee4 <lchmod@@Base+0x30c0>
   18f70:	orr	r2, r2, #1
   18f74:	mov	r1, #2
   18f78:	mov	r0, r4
   18f7c:	bl	11818 <fcntl64@plt>
   18f80:	cmn	r0, #1
   18f84:	bne	18f4c <lchmod@@Base+0x3128>
   18f88:	b	18f0c <lchmod@@Base+0x30e8>
   18f8c:	cmp	r1, #8
   18f90:	beq	18f98 <lchmod@@Base+0x3174>
   18f94:	bgt	18fa8 <lchmod@@Base+0x3184>
   18f98:	ldr	r3, [sp, #4]
   18f9c:	mov	r0, r6
   18fa0:	ldr	r2, [r3]
   18fa4:	b	18e98 <lchmod@@Base+0x3074>
   18fa8:	cmp	r1, #9
   18fac:	b	18e80 <lchmod@@Base+0x305c>
   18fb0:	ldr	r2, [pc, #56]	; 18ff0 <lchmod@@Base+0x31cc>
   18fb4:	cmp	r1, r2
   18fb8:	bgt	18fd0 <lchmod@@Base+0x31ac>
   18fbc:	cmp	r1, r3
   18fc0:	ldrlt	r3, [pc, #44]	; 18ff4 <lchmod@@Base+0x31d0>
   18fc4:	bge	18f98 <lchmod@@Base+0x3174>
   18fc8:	cmp	r1, r3
   18fcc:	b	18e80 <lchmod@@Base+0x305c>
   18fd0:	ldr	r3, [pc, #32]	; 18ff8 <lchmod@@Base+0x31d4>
   18fd4:	cmp	r1, r3
   18fd8:	beq	18f98 <lchmod@@Base+0x3174>
   18fdc:	blt	18e84 <lchmod@@Base+0x3060>
   18fe0:	add	r3, r3, #1
   18fe4:	b	18fc8 <lchmod@@Base+0x31a4>
   18fe8:	andeq	r0, r0, r6, lsl #8
   18fec:	andeq	fp, r2, ip, lsr r3
   18ff0:	andeq	r0, r0, r7, lsl #8
   18ff4:	andeq	r0, r0, r1, lsl #8
   18ff8:	andeq	r0, r0, r9, lsl #8
   18ffc:	push	{r1, r2, r3}
   19000:	push	{r0, r1, lr}
   19004:	ldr	r1, [sp, #12]
   19008:	ands	r2, r1, #64	; 0x40
   1900c:	addne	r3, sp, #16
   19010:	ldrne	r2, [sp, #16]
   19014:	strne	r3, [sp, #4]
   19018:	bl	116c8 <open64@plt>
   1901c:	bl	17c48 <lchmod@@Base+0x1e24>
   19020:	add	sp, sp, #8
   19024:	pop	{lr}		; (ldr lr, [sp], #4)
   19028:	add	sp, sp, #12
   1902c:	bx	lr
   19030:	push	{r0, r1, r4, lr}
   19034:	subs	r4, r0, #0
   19038:	bne	1904c <lchmod@@Base+0x3228>
   1903c:	mov	r0, r4
   19040:	add	sp, sp, #8
   19044:	pop	{r4, lr}
   19048:	b	1156c <fflush@plt>
   1904c:	bl	116f8 <__freading@plt>
   19050:	cmp	r0, #0
   19054:	beq	1903c <lchmod@@Base+0x3218>
   19058:	ldr	r3, [r4]
   1905c:	tst	r3, #256	; 0x100
   19060:	beq	1903c <lchmod@@Base+0x3218>
   19064:	mov	r3, #1
   19068:	str	r3, [sp]
   1906c:	mov	r2, #0
   19070:	mov	r3, #0
   19074:	mov	r0, r4
   19078:	bl	19080 <lchmod@@Base+0x325c>
   1907c:	b	1903c <lchmod@@Base+0x3218>
   19080:	push	{r0, r1, r4, r5, r6, r7, r8, lr}
   19084:	mov	r4, r0
   19088:	ldmib	r0, {ip, lr}
   1908c:	ldr	r8, [sp, #32]
   19090:	cmp	lr, ip
   19094:	bne	19100 <lchmod@@Base+0x32dc>
   19098:	ldr	lr, [r0, #20]
   1909c:	ldr	ip, [r0, #16]
   190a0:	cmp	lr, ip
   190a4:	bne	19100 <lchmod@@Base+0x32dc>
   190a8:	ldr	r5, [r0, #36]	; 0x24
   190ac:	cmp	r5, #0
   190b0:	bne	19100 <lchmod@@Base+0x32dc>
   190b4:	mov	r6, r2
   190b8:	mov	r7, r3
   190bc:	bl	117dc <fileno@plt>
   190c0:	mov	r2, r6
   190c4:	mov	r3, r7
   190c8:	str	r8, [sp]
   190cc:	bl	11668 <lseek64@plt>
   190d0:	mvn	r3, #0
   190d4:	mvn	r2, #0
   190d8:	cmp	r1, r3
   190dc:	cmpeq	r0, r2
   190e0:	mvneq	r0, #0
   190e4:	ldrne	r3, [r4]
   190e8:	strdne	r0, [r4, #80]	; 0x50
   190ec:	movne	r0, r5
   190f0:	bicne	r3, r3, #16
   190f4:	strne	r3, [r4]
   190f8:	add	sp, sp, #8
   190fc:	pop	{r4, r5, r6, r7, r8, pc}
   19100:	str	r8, [sp, #32]
   19104:	mov	r0, r4
   19108:	add	sp, sp, #8
   1910c:	pop	{r4, r5, r6, r7, r8, lr}
   19110:	b	1180c <fseeko64@plt>
   19114:	sub	r2, r0, #1
   19118:	mov	r0, #0
   1911c:	push	{r4, lr}
   19120:	ldrb	r3, [r2, #1]!
   19124:	cmp	r3, #0
   19128:	bne	19138 <lchmod@@Base+0x3314>
   1912c:	bl	194e8 <lchmod@@Base+0x36c4>
   19130:	mov	r0, r1
   19134:	pop	{r4, pc}
   19138:	add	r0, r3, r0, ror #23
   1913c:	b	19120 <lchmod@@Base+0x32fc>
   19140:	push	{r4, lr}
   19144:	mov	r0, #14
   19148:	bl	11848 <nl_langinfo@plt>
   1914c:	ldr	r3, [pc, #24]	; 1916c <lchmod@@Base+0x3348>
   19150:	cmp	r0, #0
   19154:	moveq	r0, r3
   19158:	ldr	r3, [pc, #16]	; 19170 <lchmod@@Base+0x334c>
   1915c:	ldrb	r2, [r0]
   19160:	cmp	r2, #0
   19164:	moveq	r0, r3
   19168:	pop	{r4, pc}
   1916c:	andeq	r9, r1, r7, asr #31
   19170:	andeq	sl, r1, sl, ror #15
   19174:	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   19178:	subs	r5, r0, #0
   1917c:	addeq	r5, sp, #4
   19180:	mov	r0, r5
   19184:	mov	r7, r2
   19188:	mov	r6, r1
   1918c:	bl	116b0 <mbrtowc@plt>
   19190:	cmp	r7, #0
   19194:	cmnne	r0, #3
   19198:	mov	r4, r0
   1919c:	bls	191b8 <lchmod@@Base+0x3394>
   191a0:	mov	r0, #0
   191a4:	bl	1921c <lchmod@@Base+0x33f8>
   191a8:	cmp	r0, #0
   191ac:	moveq	r4, #1
   191b0:	ldrbeq	r3, [r6]
   191b4:	streq	r3, [r5]
   191b8:	mov	r0, r4
   191bc:	add	sp, sp, #12
   191c0:	pop	{r4, r5, r6, r7, pc}
   191c4:	push	{r4, r5, r6, lr}
   191c8:	subs	r4, r2, #0
   191cc:	mov	r6, r0
   191d0:	mov	r5, r1
   191d4:	beq	191ec <lchmod@@Base+0x33c8>
   191d8:	mov	r1, r4
   191dc:	mvn	r0, #0
   191e0:	bl	192fc <lchmod@@Base+0x34d8>
   191e4:	cmp	r0, r5
   191e8:	bcc	191fc <lchmod@@Base+0x33d8>
   191ec:	mul	r1, r5, r4
   191f0:	mov	r0, r6
   191f4:	pop	{r4, r5, r6, lr}
   191f8:	b	18b68 <lchmod@@Base+0x2d44>
   191fc:	bl	117a0 <__errno_location@plt>
   19200:	mov	r3, #12
   19204:	str	r3, [r0]
   19208:	mov	r0, #0
   1920c:	pop	{r4, r5, r6, pc}
   19210:	mov	r2, #3
   19214:	mov	r1, #0
   19218:	b	18e38 <lchmod@@Base+0x3014>
   1921c:	push	{lr}		; (str lr, [sp, #-4]!)
   19220:	sub	sp, sp, #268	; 0x10c
   19224:	ldr	r2, [pc, #64]	; 1926c <lchmod@@Base+0x3448>
   19228:	add	r1, sp, #4
   1922c:	bl	19278 <lchmod@@Base+0x3454>
   19230:	cmp	r0, #0
   19234:	movne	r0, #0
   19238:	bne	19264 <lchmod@@Base+0x3440>
   1923c:	ldr	r1, [pc, #44]	; 19270 <lchmod@@Base+0x344c>
   19240:	add	r0, sp, #4
   19244:	bl	11548 <strcmp@plt>
   19248:	cmp	r0, #0
   1924c:	beq	19264 <lchmod@@Base+0x3440>
   19250:	ldr	r1, [pc, #28]	; 19274 <lchmod@@Base+0x3450>
   19254:	add	r0, sp, #4
   19258:	bl	11548 <strcmp@plt>
   1925c:	adds	r0, r0, #0
   19260:	movne	r0, #1
   19264:	add	sp, sp, #268	; 0x10c
   19268:	pop	{pc}		; (ldr pc, [sp], #4)
   1926c:	andeq	r0, r0, r1, lsl #2
   19270:	strdeq	sl, [r1], -r0
   19274:	strdeq	sl, [r1], -r2
   19278:	push	{r4, r5, r6, lr}
   1927c:	mov	r5, r1
   19280:	mov	r1, #0
   19284:	mov	r4, r2
   19288:	bl	11824 <setlocale@plt>
   1928c:	subs	r6, r0, #0
   19290:	bne	192a4 <lchmod@@Base+0x3480>
   19294:	cmp	r4, #0
   19298:	strbne	r6, [r5]
   1929c:	mov	r0, #22
   192a0:	pop	{r4, r5, r6, pc}
   192a4:	bl	11764 <strlen@plt>
   192a8:	cmp	r4, r0
   192ac:	bls	192c8 <lchmod@@Base+0x34a4>
   192b0:	add	r2, r0, #1
   192b4:	mov	r1, r6
   192b8:	mov	r0, r5
   192bc:	bl	115b4 <memcpy@plt>
   192c0:	mov	r0, #0
   192c4:	pop	{r4, r5, r6, pc}
   192c8:	cmp	r4, #0
   192cc:	beq	192ec <lchmod@@Base+0x34c8>
   192d0:	sub	r4, r4, #1
   192d4:	mov	r2, r4
   192d8:	mov	r1, r6
   192dc:	mov	r0, r5
   192e0:	bl	115b4 <memcpy@plt>
   192e4:	mov	r3, #0
   192e8:	strb	r3, [r5, r4]
   192ec:	mov	r0, #34	; 0x22
   192f0:	pop	{r4, r5, r6, pc}
   192f4:	mov	r1, #0
   192f8:	b	11824 <setlocale@plt>
   192fc:	subs	r2, r1, #1
   19300:	bxeq	lr
   19304:	bcc	194dc <lchmod@@Base+0x36b8>
   19308:	cmp	r0, r1
   1930c:	bls	194c0 <lchmod@@Base+0x369c>
   19310:	tst	r1, r2
   19314:	beq	194cc <lchmod@@Base+0x36a8>
   19318:	clz	r3, r0
   1931c:	clz	r2, r1
   19320:	sub	r3, r2, r3
   19324:	rsbs	r3, r3, #31
   19328:	addne	r3, r3, r3, lsl #1
   1932c:	mov	r2, #0
   19330:	addne	pc, pc, r3, lsl #2
   19334:	nop			; (mov r0, r0)
   19338:	cmp	r0, r1, lsl #31
   1933c:	adc	r2, r2, r2
   19340:	subcs	r0, r0, r1, lsl #31
   19344:	cmp	r0, r1, lsl #30
   19348:	adc	r2, r2, r2
   1934c:	subcs	r0, r0, r1, lsl #30
   19350:	cmp	r0, r1, lsl #29
   19354:	adc	r2, r2, r2
   19358:	subcs	r0, r0, r1, lsl #29
   1935c:	cmp	r0, r1, lsl #28
   19360:	adc	r2, r2, r2
   19364:	subcs	r0, r0, r1, lsl #28
   19368:	cmp	r0, r1, lsl #27
   1936c:	adc	r2, r2, r2
   19370:	subcs	r0, r0, r1, lsl #27
   19374:	cmp	r0, r1, lsl #26
   19378:	adc	r2, r2, r2
   1937c:	subcs	r0, r0, r1, lsl #26
   19380:	cmp	r0, r1, lsl #25
   19384:	adc	r2, r2, r2
   19388:	subcs	r0, r0, r1, lsl #25
   1938c:	cmp	r0, r1, lsl #24
   19390:	adc	r2, r2, r2
   19394:	subcs	r0, r0, r1, lsl #24
   19398:	cmp	r0, r1, lsl #23
   1939c:	adc	r2, r2, r2
   193a0:	subcs	r0, r0, r1, lsl #23
   193a4:	cmp	r0, r1, lsl #22
   193a8:	adc	r2, r2, r2
   193ac:	subcs	r0, r0, r1, lsl #22
   193b0:	cmp	r0, r1, lsl #21
   193b4:	adc	r2, r2, r2
   193b8:	subcs	r0, r0, r1, lsl #21
   193bc:	cmp	r0, r1, lsl #20
   193c0:	adc	r2, r2, r2
   193c4:	subcs	r0, r0, r1, lsl #20
   193c8:	cmp	r0, r1, lsl #19
   193cc:	adc	r2, r2, r2
   193d0:	subcs	r0, r0, r1, lsl #19
   193d4:	cmp	r0, r1, lsl #18
   193d8:	adc	r2, r2, r2
   193dc:	subcs	r0, r0, r1, lsl #18
   193e0:	cmp	r0, r1, lsl #17
   193e4:	adc	r2, r2, r2
   193e8:	subcs	r0, r0, r1, lsl #17
   193ec:	cmp	r0, r1, lsl #16
   193f0:	adc	r2, r2, r2
   193f4:	subcs	r0, r0, r1, lsl #16
   193f8:	cmp	r0, r1, lsl #15
   193fc:	adc	r2, r2, r2
   19400:	subcs	r0, r0, r1, lsl #15
   19404:	cmp	r0, r1, lsl #14
   19408:	adc	r2, r2, r2
   1940c:	subcs	r0, r0, r1, lsl #14
   19410:	cmp	r0, r1, lsl #13
   19414:	adc	r2, r2, r2
   19418:	subcs	r0, r0, r1, lsl #13
   1941c:	cmp	r0, r1, lsl #12
   19420:	adc	r2, r2, r2
   19424:	subcs	r0, r0, r1, lsl #12
   19428:	cmp	r0, r1, lsl #11
   1942c:	adc	r2, r2, r2
   19430:	subcs	r0, r0, r1, lsl #11
   19434:	cmp	r0, r1, lsl #10
   19438:	adc	r2, r2, r2
   1943c:	subcs	r0, r0, r1, lsl #10
   19440:	cmp	r0, r1, lsl #9
   19444:	adc	r2, r2, r2
   19448:	subcs	r0, r0, r1, lsl #9
   1944c:	cmp	r0, r1, lsl #8
   19450:	adc	r2, r2, r2
   19454:	subcs	r0, r0, r1, lsl #8
   19458:	cmp	r0, r1, lsl #7
   1945c:	adc	r2, r2, r2
   19460:	subcs	r0, r0, r1, lsl #7
   19464:	cmp	r0, r1, lsl #6
   19468:	adc	r2, r2, r2
   1946c:	subcs	r0, r0, r1, lsl #6
   19470:	cmp	r0, r1, lsl #5
   19474:	adc	r2, r2, r2
   19478:	subcs	r0, r0, r1, lsl #5
   1947c:	cmp	r0, r1, lsl #4
   19480:	adc	r2, r2, r2
   19484:	subcs	r0, r0, r1, lsl #4
   19488:	cmp	r0, r1, lsl #3
   1948c:	adc	r2, r2, r2
   19490:	subcs	r0, r0, r1, lsl #3
   19494:	cmp	r0, r1, lsl #2
   19498:	adc	r2, r2, r2
   1949c:	subcs	r0, r0, r1, lsl #2
   194a0:	cmp	r0, r1, lsl #1
   194a4:	adc	r2, r2, r2
   194a8:	subcs	r0, r0, r1, lsl #1
   194ac:	cmp	r0, r1
   194b0:	adc	r2, r2, r2
   194b4:	subcs	r0, r0, r1
   194b8:	mov	r0, r2
   194bc:	bx	lr
   194c0:	moveq	r0, #1
   194c4:	movne	r0, #0
   194c8:	bx	lr
   194cc:	clz	r2, r1
   194d0:	rsb	r2, r2, #31
   194d4:	lsr	r0, r0, r2
   194d8:	bx	lr
   194dc:	cmp	r0, #0
   194e0:	mvnne	r0, #0
   194e4:	b	19784 <lchmod@@Base+0x3960>
   194e8:	cmp	r1, #0
   194ec:	beq	194dc <lchmod@@Base+0x36b8>
   194f0:	push	{r0, r1, lr}
   194f4:	bl	192fc <lchmod@@Base+0x34d8>
   194f8:	pop	{r1, r2, lr}
   194fc:	mul	r3, r2, r0
   19500:	sub	r1, r1, r3
   19504:	bx	lr
   19508:	cmp	r1, #0
   1950c:	beq	19718 <lchmod@@Base+0x38f4>
   19510:	eor	ip, r0, r1
   19514:	rsbmi	r1, r1, #0
   19518:	subs	r2, r1, #1
   1951c:	beq	196e4 <lchmod@@Base+0x38c0>
   19520:	movs	r3, r0
   19524:	rsbmi	r3, r0, #0
   19528:	cmp	r3, r1
   1952c:	bls	196f0 <lchmod@@Base+0x38cc>
   19530:	tst	r1, r2
   19534:	beq	19700 <lchmod@@Base+0x38dc>
   19538:	clz	r2, r3
   1953c:	clz	r0, r1
   19540:	sub	r2, r0, r2
   19544:	rsbs	r2, r2, #31
   19548:	addne	r2, r2, r2, lsl #1
   1954c:	mov	r0, #0
   19550:	addne	pc, pc, r2, lsl #2
   19554:	nop			; (mov r0, r0)
   19558:	cmp	r3, r1, lsl #31
   1955c:	adc	r0, r0, r0
   19560:	subcs	r3, r3, r1, lsl #31
   19564:	cmp	r3, r1, lsl #30
   19568:	adc	r0, r0, r0
   1956c:	subcs	r3, r3, r1, lsl #30
   19570:	cmp	r3, r1, lsl #29
   19574:	adc	r0, r0, r0
   19578:	subcs	r3, r3, r1, lsl #29
   1957c:	cmp	r3, r1, lsl #28
   19580:	adc	r0, r0, r0
   19584:	subcs	r3, r3, r1, lsl #28
   19588:	cmp	r3, r1, lsl #27
   1958c:	adc	r0, r0, r0
   19590:	subcs	r3, r3, r1, lsl #27
   19594:	cmp	r3, r1, lsl #26
   19598:	adc	r0, r0, r0
   1959c:	subcs	r3, r3, r1, lsl #26
   195a0:	cmp	r3, r1, lsl #25
   195a4:	adc	r0, r0, r0
   195a8:	subcs	r3, r3, r1, lsl #25
   195ac:	cmp	r3, r1, lsl #24
   195b0:	adc	r0, r0, r0
   195b4:	subcs	r3, r3, r1, lsl #24
   195b8:	cmp	r3, r1, lsl #23
   195bc:	adc	r0, r0, r0
   195c0:	subcs	r3, r3, r1, lsl #23
   195c4:	cmp	r3, r1, lsl #22
   195c8:	adc	r0, r0, r0
   195cc:	subcs	r3, r3, r1, lsl #22
   195d0:	cmp	r3, r1, lsl #21
   195d4:	adc	r0, r0, r0
   195d8:	subcs	r3, r3, r1, lsl #21
   195dc:	cmp	r3, r1, lsl #20
   195e0:	adc	r0, r0, r0
   195e4:	subcs	r3, r3, r1, lsl #20
   195e8:	cmp	r3, r1, lsl #19
   195ec:	adc	r0, r0, r0
   195f0:	subcs	r3, r3, r1, lsl #19
   195f4:	cmp	r3, r1, lsl #18
   195f8:	adc	r0, r0, r0
   195fc:	subcs	r3, r3, r1, lsl #18
   19600:	cmp	r3, r1, lsl #17
   19604:	adc	r0, r0, r0
   19608:	subcs	r3, r3, r1, lsl #17
   1960c:	cmp	r3, r1, lsl #16
   19610:	adc	r0, r0, r0
   19614:	subcs	r3, r3, r1, lsl #16
   19618:	cmp	r3, r1, lsl #15
   1961c:	adc	r0, r0, r0
   19620:	subcs	r3, r3, r1, lsl #15
   19624:	cmp	r3, r1, lsl #14
   19628:	adc	r0, r0, r0
   1962c:	subcs	r3, r3, r1, lsl #14
   19630:	cmp	r3, r1, lsl #13
   19634:	adc	r0, r0, r0
   19638:	subcs	r3, r3, r1, lsl #13
   1963c:	cmp	r3, r1, lsl #12
   19640:	adc	r0, r0, r0
   19644:	subcs	r3, r3, r1, lsl #12
   19648:	cmp	r3, r1, lsl #11
   1964c:	adc	r0, r0, r0
   19650:	subcs	r3, r3, r1, lsl #11
   19654:	cmp	r3, r1, lsl #10
   19658:	adc	r0, r0, r0
   1965c:	subcs	r3, r3, r1, lsl #10
   19660:	cmp	r3, r1, lsl #9
   19664:	adc	r0, r0, r0
   19668:	subcs	r3, r3, r1, lsl #9
   1966c:	cmp	r3, r1, lsl #8
   19670:	adc	r0, r0, r0
   19674:	subcs	r3, r3, r1, lsl #8
   19678:	cmp	r3, r1, lsl #7
   1967c:	adc	r0, r0, r0
   19680:	subcs	r3, r3, r1, lsl #7
   19684:	cmp	r3, r1, lsl #6
   19688:	adc	r0, r0, r0
   1968c:	subcs	r3, r3, r1, lsl #6
   19690:	cmp	r3, r1, lsl #5
   19694:	adc	r0, r0, r0
   19698:	subcs	r3, r3, r1, lsl #5
   1969c:	cmp	r3, r1, lsl #4
   196a0:	adc	r0, r0, r0
   196a4:	subcs	r3, r3, r1, lsl #4
   196a8:	cmp	r3, r1, lsl #3
   196ac:	adc	r0, r0, r0
   196b0:	subcs	r3, r3, r1, lsl #3
   196b4:	cmp	r3, r1, lsl #2
   196b8:	adc	r0, r0, r0
   196bc:	subcs	r3, r3, r1, lsl #2
   196c0:	cmp	r3, r1, lsl #1
   196c4:	adc	r0, r0, r0
   196c8:	subcs	r3, r3, r1, lsl #1
   196cc:	cmp	r3, r1
   196d0:	adc	r0, r0, r0
   196d4:	subcs	r3, r3, r1
   196d8:	cmp	ip, #0
   196dc:	rsbmi	r0, r0, #0
   196e0:	bx	lr
   196e4:	teq	ip, r0
   196e8:	rsbmi	r0, r0, #0
   196ec:	bx	lr
   196f0:	movcc	r0, #0
   196f4:	asreq	r0, ip, #31
   196f8:	orreq	r0, r0, #1
   196fc:	bx	lr
   19700:	clz	r2, r1
   19704:	rsb	r2, r2, #31
   19708:	cmp	ip, #0
   1970c:	lsr	r0, r3, r2
   19710:	rsbmi	r0, r0, #0
   19714:	bx	lr
   19718:	cmp	r0, #0
   1971c:	mvngt	r0, #-2147483648	; 0x80000000
   19720:	movlt	r0, #-2147483648	; 0x80000000
   19724:	b	19784 <lchmod@@Base+0x3960>
   19728:	cmp	r1, #0
   1972c:	beq	19718 <lchmod@@Base+0x38f4>
   19730:	push	{r0, r1, lr}
   19734:	bl	19510 <lchmod@@Base+0x36ec>
   19738:	pop	{r1, r2, lr}
   1973c:	mul	r3, r2, r0
   19740:	sub	r1, r1, r3
   19744:	bx	lr
   19748:	cmp	r3, #0
   1974c:	cmpeq	r2, #0
   19750:	bne	19768 <lchmod@@Base+0x3944>
   19754:	cmp	r1, #0
   19758:	cmpeq	r0, #0
   1975c:	mvnne	r1, #0
   19760:	mvnne	r0, #0
   19764:	b	19784 <lchmod@@Base+0x3960>
   19768:	sub	sp, sp, #8
   1976c:	push	{sp, lr}
   19770:	bl	19794 <lchmod@@Base+0x3970>
   19774:	ldr	lr, [sp, #4]
   19778:	add	sp, sp, #8
   1977c:	pop	{r2, r3}
   19780:	bx	lr
   19784:	push	{r1, lr}
   19788:	mov	r0, #8
   1978c:	bl	11530 <raise@plt>
   19790:	pop	{r1, pc}
   19794:	cmp	r1, r3
   19798:	push	{r4, r5, r6, r7, r8, r9, lr}
   1979c:	cmpeq	r0, r2
   197a0:	mov	r4, r0
   197a4:	mov	r5, r1
   197a8:	ldr	r9, [sp, #28]
   197ac:	movcc	r0, #0
   197b0:	movcc	r1, #0
   197b4:	bcc	198ac <lchmod@@Base+0x3a88>
   197b8:	cmp	r3, #0
   197bc:	clzeq	ip, r2
   197c0:	clzne	ip, r3
   197c4:	addeq	ip, ip, #32
   197c8:	cmp	r5, #0
   197cc:	clzeq	r1, r4
   197d0:	addeq	r1, r1, #32
   197d4:	clzne	r1, r5
   197d8:	sub	ip, ip, r1
   197dc:	sub	lr, ip, #32
   197e0:	lsl	r7, r3, ip
   197e4:	rsb	r8, ip, #32
   197e8:	orr	r7, r7, r2, lsl lr
   197ec:	orr	r7, r7, r2, lsr r8
   197f0:	lsl	r6, r2, ip
   197f4:	cmp	r5, r7
   197f8:	cmpeq	r4, r6
   197fc:	movcc	r0, #0
   19800:	movcc	r1, #0
   19804:	bcc	19820 <lchmod@@Base+0x39fc>
   19808:	mov	r3, #1
   1980c:	subs	r4, r4, r6
   19810:	lsl	r1, r3, lr
   19814:	lsl	r0, r3, ip
   19818:	orr	r1, r1, r3, lsr r8
   1981c:	sbc	r5, r5, r7
   19820:	cmp	ip, #0
   19824:	beq	198ac <lchmod@@Base+0x3a88>
   19828:	lsrs	r3, r7, #1
   1982c:	rrx	r2, r6
   19830:	mov	r6, ip
   19834:	b	19858 <lchmod@@Base+0x3a34>
   19838:	subs	r4, r4, r2
   1983c:	sbc	r5, r5, r3
   19840:	adds	r4, r4, r4
   19844:	adc	r5, r5, r5
   19848:	adds	r4, r4, #1
   1984c:	adc	r5, r5, #0
   19850:	subs	r6, r6, #1
   19854:	beq	19874 <lchmod@@Base+0x3a50>
   19858:	cmp	r5, r3
   1985c:	cmpeq	r4, r2
   19860:	bcs	19838 <lchmod@@Base+0x3a14>
   19864:	adds	r4, r4, r4
   19868:	adc	r5, r5, r5
   1986c:	subs	r6, r6, #1
   19870:	bne	19858 <lchmod@@Base+0x3a34>
   19874:	lsr	r6, r4, ip
   19878:	lsr	r7, r5, ip
   1987c:	orr	r6, r6, r5, lsl r8
   19880:	adds	r2, r0, r4
   19884:	orr	r6, r6, r5, lsr lr
   19888:	adc	r3, r1, r5
   1988c:	lsl	r1, r7, ip
   19890:	orr	r1, r1, r6, lsl lr
   19894:	lsl	r0, r6, ip
   19898:	orr	r1, r1, r6, lsr r8
   1989c:	subs	r0, r2, r0
   198a0:	mov	r4, r6
   198a4:	mov	r5, r7
   198a8:	sbc	r1, r3, r1
   198ac:	cmp	r9, #0
   198b0:	popeq	{r4, r5, r6, r7, r8, r9, pc}
   198b4:	strd	r4, [r9]
   198b8:	pop	{r4, r5, r6, r7, r8, r9, pc}
   198bc:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   198c0:	mov	r7, r0
   198c4:	ldr	r6, [pc, #72]	; 19914 <lchmod@@Base+0x3af0>
   198c8:	ldr	r5, [pc, #72]	; 19918 <lchmod@@Base+0x3af4>
   198cc:	add	r6, pc, r6
   198d0:	add	r5, pc, r5
   198d4:	sub	r6, r6, r5
   198d8:	mov	r8, r1
   198dc:	mov	r9, r2
   198e0:	bl	114e0 <fstatfs64@plt-0x20>
   198e4:	asrs	r6, r6, #2
   198e8:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   198ec:	mov	r4, #0
   198f0:	add	r4, r4, #1
   198f4:	ldr	r3, [r5], #4
   198f8:	mov	r2, r9
   198fc:	mov	r1, r8
   19900:	mov	r0, r7
   19904:	blx	r3
   19908:	cmp	r6, r4
   1990c:	bne	198f0 <lchmod@@Base+0x3acc>
   19910:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   19914:	andeq	r1, r1, r4, lsr r6
   19918:	andeq	r1, r1, ip, lsr #12
   1991c:	bx	lr
   19920:	ldr	r3, [pc, #12]	; 19934 <lchmod@@Base+0x3b10>
   19924:	mov	r1, #0
   19928:	add	r3, pc, r3
   1992c:	ldr	r2, [r3]
   19930:	b	117b8 <__cxa_atexit@plt>
   19934:	andeq	r1, r1, r0, ror #16
   19938:	mov	r2, r1
   1993c:	mov	r1, r0
   19940:	mov	r0, #3
   19944:	b	118e4 <__xstat64@plt>
   19948:	mov	r2, r1
   1994c:	mov	r1, r0
   19950:	mov	r0, #3
   19954:	b	11650 <__fxstat64@plt>
   19958:	mov	r2, r1
   1995c:	mov	r1, r0
   19960:	mov	r0, #3
   19964:	b	1192c <__lxstat64@plt>
   19968:	push	{lr}		; (str lr, [sp, #-4]!)
   1996c:	sub	sp, sp, #12
   19970:	str	r3, [sp]
   19974:	mov	r3, r2
   19978:	mov	r2, r1
   1997c:	mov	r1, r0
   19980:	mov	r0, #3
   19984:	bl	11638 <__fxstatat64@plt>
   19988:	add	sp, sp, #12
   1998c:	pop	{pc}		; (ldr pc, [sp], #4)
   19990:	push	{lr}		; (str lr, [sp, #-4]!)
   19994:	sub	sp, sp, #12
   19998:	strd	r2, [sp]
   1999c:	mov	r2, r1
   199a0:	mov	r3, sp
   199a4:	mov	r1, r0
   199a8:	mov	r0, #1
   199ac:	bl	118f0 <__xmknod@plt>
   199b0:	add	sp, sp, #12
   199b4:	pop	{pc}		; (ldr pc, [sp], #4)

Disassembly of section .fini:

000199b8 <.fini>:
   199b8:	push	{r3, lr}
   199bc:	pop	{r3, pc}
