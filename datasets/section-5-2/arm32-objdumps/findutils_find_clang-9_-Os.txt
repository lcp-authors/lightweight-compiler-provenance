
../repos/findutils/find/find:     file format elf32-littlearm


Disassembly of section .init:

00012438 <.init>:
   12438:	push	{r3, lr}
   1243c:	bl	12c3c <__assert_fail@plt+0x4c>
   12440:	pop	{r3, pc}

Disassembly of section .plt:

00012444 <pthread_mutex_unlock@plt-0x14>:
   12444:	push	{lr}		; (str lr, [sp, #-4]!)
   12448:	ldr	lr, [pc, #4]	; 12454 <pthread_mutex_unlock@plt-0x4>
   1244c:	add	lr, pc, lr
   12450:	ldr	pc, [lr, #8]!
   12454:	andeq	r1, r4, ip, lsr #23

00012458 <pthread_mutex_unlock@plt>:
   12458:	add	ip, pc, #0, 12
   1245c:	add	ip, ip, #266240	; 0x41000
   12460:	ldr	pc, [ip, #2988]!	; 0xbac

00012464 <fdopen@plt>:
   12464:	add	ip, pc, #0, 12
   12468:	add	ip, ip, #266240	; 0x41000
   1246c:	ldr	pc, [ip, #2980]!	; 0xba4

00012470 <fstatfs64@plt>:
   12470:	add	ip, pc, #0, 12
   12474:	add	ip, ip, #266240	; 0x41000
   12478:	ldr	pc, [ip, #2972]!	; 0xb9c

0001247c <calloc@plt>:
   1247c:	add	ip, pc, #0, 12
   12480:	add	ip, ip, #266240	; 0x41000
   12484:	ldr	pc, [ip, #2964]!	; 0xb94

00012488 <endgrent@plt>:
   12488:	add	ip, pc, #0, 12
   1248c:	add	ip, ip, #266240	; 0x41000
   12490:	ldr	pc, [ip, #2956]!	; 0xb8c

00012494 <wctype@plt>:
   12494:	add	ip, pc, #0, 12
   12498:	add	ip, ip, #266240	; 0x41000
   1249c:	ldr	pc, [ip, #2948]!	; 0xb84

000124a0 <gnu_dev_major@plt>:
   124a0:	add	ip, pc, #0, 12
   124a4:	add	ip, ip, #266240	; 0x41000
   124a8:	ldr	pc, [ip, #2940]!	; 0xb7c

000124ac <raise@plt>:
   124ac:	add	ip, pc, #0, 12
   124b0:	add	ip, ip, #266240	; 0x41000
   124b4:	ldr	pc, [ip, #2932]!	; 0xb74

000124b8 <wcrtomb@plt>:
   124b8:	add	ip, pc, #0, 12
   124bc:	add	ip, ip, #266240	; 0x41000
   124c0:	ldr	pc, [ip, #2924]!	; 0xb6c

000124c4 <gmtime_r@plt>:
   124c4:	add	ip, pc, #0, 12
   124c8:	add	ip, ip, #266240	; 0x41000
   124cc:	ldr	pc, [ip, #2916]!	; 0xb64

000124d0 <getpwnam@plt>:
   124d0:	add	ip, pc, #0, 12
   124d4:	add	ip, ip, #266240	; 0x41000
   124d8:	ldr	pc, [ip, #2908]!	; 0xb5c

000124dc <is_selinux_enabled@plt>:
   124dc:	add	ip, pc, #0, 12
   124e0:	add	ip, ip, #266240	; 0x41000
   124e4:	ldr	pc, [ip, #2900]!	; 0xb54

000124e8 <iswctype@plt>:
   124e8:	add	ip, pc, #0, 12
   124ec:	add	ip, ip, #266240	; 0x41000
   124f0:	ldr	pc, [ip, #2892]!	; 0xb4c

000124f4 <strcmp@plt>:
   124f4:	add	ip, pc, #0, 12
   124f8:	add	ip, ip, #266240	; 0x41000
   124fc:	ldr	pc, [ip, #2884]!	; 0xb44

00012500 <strtol@plt>:
   12500:	add	ip, pc, #0, 12
   12504:	add	ip, ip, #266240	; 0x41000
   12508:	ldr	pc, [ip, #2876]!	; 0xb3c

0001250c <getpwuid@plt>:
   1250c:	add	ip, pc, #0, 12
   12510:	add	ip, ip, #266240	; 0x41000
   12514:	ldr	pc, [ip, #2868]!	; 0xb34

00012518 <gnu_dev_makedev@plt>:
   12518:	add	ip, pc, #0, 12
   1251c:	add	ip, ip, #266240	; 0x41000
   12520:	ldr	pc, [ip, #2860]!	; 0xb2c

00012524 <printf@plt>:
   12524:	add	ip, pc, #0, 12
   12528:	add	ip, ip, #266240	; 0x41000
   1252c:	ldr	pc, [ip, #2852]!	; 0xb24

00012530 <gnu_dev_minor@plt>:
   12530:	add	ip, pc, #0, 12
   12534:	add	ip, ip, #266240	; 0x41000
   12538:	ldr	pc, [ip, #2844]!	; 0xb1c

0001253c <pthread_mutex_destroy@plt>:
   1253c:	add	ip, pc, #0, 12
   12540:	add	ip, ip, #266240	; 0x41000
   12544:	ldr	pc, [ip, #2836]!	; 0xb14

00012548 <mktime@plt>:
   12548:	add	ip, pc, #0, 12
   1254c:	add	ip, ip, #266240	; 0x41000
   12550:	ldr	pc, [ip, #2828]!	; 0xb0c

00012554 <fflush@plt>:
   12554:	add	ip, pc, #0, 12
   12558:	add	ip, ip, #266240	; 0x41000
   1255c:	ldr	pc, [ip, #2820]!	; 0xb04

00012560 <unlinkat@plt>:
   12560:	add	ip, pc, #0, 12
   12564:	add	ip, ip, #266240	; 0x41000
   12568:	ldr	pc, [ip, #2812]!	; 0xafc

0001256c <wcwidth@plt>:
   1256c:	add	ip, pc, #0, 12
   12570:	add	ip, ip, #266240	; 0x41000
   12574:	ldr	pc, [ip, #2804]!	; 0xaf4

00012578 <lsetfilecon@plt>:
   12578:	add	ip, pc, #0, 12
   1257c:	add	ip, ip, #266240	; 0x41000
   12580:	ldr	pc, [ip, #2796]!	; 0xaec

00012584 <memmove@plt>:
   12584:	add	ip, pc, #0, 12
   12588:	add	ip, ip, #266240	; 0x41000
   1258c:	ldr	pc, [ip, #2788]!	; 0xae4

00012590 <free@plt>:
   12590:	add	ip, pc, #0, 12
   12594:	add	ip, ip, #266240	; 0x41000
   12598:	ldr	pc, [ip, #2780]!	; 0xadc

0001259c <pthread_mutex_lock@plt>:
   1259c:	add	ip, pc, #0, 12
   125a0:	add	ip, ip, #266240	; 0x41000
   125a4:	ldr	pc, [ip, #2772]!	; 0xad4

000125a8 <faccessat@plt>:
   125a8:	add	ip, pc, #0, 12
   125ac:	add	ip, ip, #266240	; 0x41000
   125b0:	ldr	pc, [ip, #2764]!	; 0xacc

000125b4 <ferror@plt>:
   125b4:	add	ip, pc, #0, 12
   125b8:	add	ip, ip, #266240	; 0x41000
   125bc:	ldr	pc, [ip, #2756]!	; 0xac4

000125c0 <thrd_exit@plt>:
   125c0:	add	ip, pc, #0, 12
   125c4:	add	ip, ip, #266240	; 0x41000
   125c8:	ldr	pc, [ip, #2748]!	; 0xabc

000125cc <strndup@plt>:
   125cc:	add	ip, pc, #0, 12
   125d0:	add	ip, ip, #266240	; 0x41000
   125d4:	ldr	pc, [ip, #2740]!	; 0xab4

000125d8 <clock_gettime@plt>:
   125d8:	add	ip, pc, #0, 12
   125dc:	add	ip, ip, #266240	; 0x41000
   125e0:	ldr	pc, [ip, #2732]!	; 0xaac

000125e4 <_exit@plt>:
   125e4:	add	ip, pc, #0, 12
   125e8:	add	ip, ip, #266240	; 0x41000
   125ec:	ldr	pc, [ip, #2724]!	; 0xaa4

000125f0 <memcpy@plt>:
   125f0:	add	ip, pc, #0, 12
   125f4:	add	ip, ip, #266240	; 0x41000
   125f8:	ldr	pc, [ip, #2716]!	; 0xa9c

000125fc <execvp@plt>:
   125fc:	add	ip, pc, #0, 12
   12600:	add	ip, ip, #266240	; 0x41000
   12604:	ldr	pc, [ip, #2708]!	; 0xa94

00012608 <tolower@plt>:
   12608:	add	ip, pc, #0, 12
   1260c:	add	ip, ip, #266240	; 0x41000
   12610:	ldr	pc, [ip, #2700]!	; 0xa8c

00012614 <pthread_mutex_init@plt>:
   12614:	add	ip, pc, #0, 12
   12618:	add	ip, ip, #266240	; 0x41000
   1261c:	ldr	pc, [ip, #2692]!	; 0xa84

00012620 <towlower@plt>:
   12620:	add	ip, pc, #0, 12
   12624:	add	ip, ip, #266240	; 0x41000
   12628:	ldr	pc, [ip, #2684]!	; 0xa7c

0001262c <mbsinit@plt>:
   1262c:	add	ip, pc, #0, 12
   12630:	add	ip, ip, #266240	; 0x41000
   12634:	ldr	pc, [ip, #2676]!	; 0xa74

00012638 <signal@plt>:
   12638:	add	ip, pc, #0, 12
   1263c:	add	ip, ip, #266240	; 0x41000
   12640:	ldr	pc, [ip, #2668]!	; 0xa6c

00012644 <time@plt>:
   12644:	add	ip, pc, #0, 12
   12648:	add	ip, ip, #266240	; 0x41000
   1264c:	ldr	pc, [ip, #2660]!	; 0xa64

00012650 <memcmp@plt>:
   12650:	add	ip, pc, #0, 12
   12654:	add	ip, ip, #266240	; 0x41000
   12658:	ldr	pc, [ip, #2652]!	; 0xa5c

0001265c <uname@plt>:
   1265c:	add	ip, pc, #0, 12
   12660:	add	ip, ip, #266240	; 0x41000
   12664:	ldr	pc, [ip, #2644]!	; 0xa54

00012668 <ctime@plt>:
   12668:	add	ip, pc, #0, 12
   1266c:	add	ip, ip, #266240	; 0x41000
   12670:	ldr	pc, [ip, #2636]!	; 0xa4c

00012674 <dcgettext@plt>:
   12674:	add	ip, pc, #0, 12
   12678:	add	ip, ip, #266240	; 0x41000
   1267c:	ldr	pc, [ip, #2628]!	; 0xa44

00012680 <strdup@plt>:
   12680:	add	ip, pc, #0, 12
   12684:	add	ip, ip, #266240	; 0x41000
   12688:	ldr	pc, [ip, #2620]!	; 0xa3c

0001268c <sysconf@plt>:
   1268c:	add	ip, pc, #0, 12
   12690:	add	ip, ip, #266240	; 0x41000
   12694:	ldr	pc, [ip, #2612]!	; 0xa34

00012698 <getrlimit64@plt>:
   12698:	add	ip, pc, #0, 12
   1269c:	add	ip, ip, #266240	; 0x41000
   126a0:	ldr	pc, [ip, #2604]!	; 0xa2c

000126a4 <realloc@plt>:
   126a4:	add	ip, pc, #0, 12
   126a8:	add	ip, ip, #266240	; 0x41000
   126ac:	ldr	pc, [ip, #2596]!	; 0xa24

000126b0 <fgetfilecon@plt>:
   126b0:	add	ip, pc, #0, 12
   126b4:	add	ip, ip, #266240	; 0x41000
   126b8:	ldr	pc, [ip, #2588]!	; 0xa1c

000126bc <localtime_r@plt>:
   126bc:	add	ip, pc, #0, 12
   126c0:	add	ip, ip, #266240	; 0x41000
   126c4:	ldr	pc, [ip, #2580]!	; 0xa14

000126c8 <textdomain@plt>:
   126c8:	add	ip, pc, #0, 12
   126cc:	add	ip, ip, #266240	; 0x41000
   126d0:	ldr	pc, [ip, #2572]!	; 0xa0c

000126d4 <iswcntrl@plt>:
   126d4:	add	ip, pc, #0, 12
   126d8:	add	ip, ip, #266240	; 0x41000
   126dc:	ldr	pc, [ip, #2564]!	; 0xa04

000126e0 <chdir@plt>:
   126e0:	add	ip, pc, #0, 12
   126e4:	add	ip, ip, #266240	; 0x41000
   126e8:	ldr	pc, [ip, #2556]!	; 0x9fc

000126ec <__fxstatat64@plt>:
   126ec:	add	ip, pc, #0, 12
   126f0:	add	ip, ip, #266240	; 0x41000
   126f4:	ldr	pc, [ip, #2548]!	; 0x9f4

000126f8 <iswprint@plt>:
   126f8:	add	ip, pc, #0, 12
   126fc:	add	ip, ip, #266240	; 0x41000
   12700:	ldr	pc, [ip, #2540]!	; 0x9ec

00012704 <tzset@plt>:
   12704:	add	ip, pc, #0, 12
   12708:	add	ip, ip, #266240	; 0x41000
   1270c:	ldr	pc, [ip, #2532]!	; 0x9e4

00012710 <poll@plt>:
   12710:	add	ip, pc, #0, 12
   12714:	add	ip, ip, #266240	; 0x41000
   12718:	ldr	pc, [ip, #2524]!	; 0x9dc

0001271c <__fxstat64@plt>:
   1271c:	add	ip, pc, #0, 12
   12720:	add	ip, ip, #266240	; 0x41000
   12724:	ldr	pc, [ip, #2516]!	; 0x9d4

00012728 <fwrite@plt>:
   12728:	add	ip, pc, #0, 12
   1272c:	add	ip, ip, #266240	; 0x41000
   12730:	ldr	pc, [ip, #2508]!	; 0x9cc

00012734 <strcat@plt>:
   12734:	add	ip, pc, #0, 12
   12738:	add	ip, ip, #266240	; 0x41000
   1273c:	ldr	pc, [ip, #2500]!	; 0x9c4

00012740 <lseek64@plt>:
   12740:	add	ip, pc, #0, 12
   12744:	add	ip, ip, #266240	; 0x41000
   12748:	ldr	pc, [ip, #2492]!	; 0x9bc

0001274c <waitpid@plt>:
   1274c:	add	ip, pc, #0, 12
   12750:	add	ip, ip, #266240	; 0x41000
   12754:	ldr	pc, [ip, #2484]!	; 0x9b4

00012758 <__ctype_get_mb_cur_max@plt>:
   12758:	add	ip, pc, #0, 12
   1275c:	add	ip, ip, #266240	; 0x41000
   12760:	ldr	pc, [ip, #2476]!	; 0x9ac

00012764 <hasmntopt@plt>:
   12764:	add	ip, pc, #0, 12
   12768:	add	ip, ip, #266240	; 0x41000
   1276c:	ldr	pc, [ip, #2468]!	; 0x9a4

00012770 <strcpy@plt>:
   12770:	add	ip, pc, #0, 12
   12774:	add	ip, ip, #266240	; 0x41000
   12778:	ldr	pc, [ip, #2460]!	; 0x99c

0001277c <gettimeofday@plt>:
   1277c:	add	ip, pc, #0, 12
   12780:	add	ip, ip, #266240	; 0x41000
   12784:	ldr	pc, [ip, #2452]!	; 0x994

00012788 <__fpending@plt>:
   12788:	add	ip, pc, #0, 12
   1278c:	add	ip, ip, #266240	; 0x41000
   12790:	ldr	pc, [ip, #2444]!	; 0x98c

00012794 <ferror_unlocked@plt>:
   12794:	add	ip, pc, #0, 12
   12798:	add	ip, ip, #266240	; 0x41000
   1279c:	ldr	pc, [ip, #2436]!	; 0x984

000127a0 <mbrtowc@plt>:
   127a0:	add	ip, pc, #0, 12
   127a4:	add	ip, ip, #266240	; 0x41000
   127a8:	ldr	pc, [ip, #2428]!	; 0x97c

000127ac <strtok_r@plt>:
   127ac:	add	ip, pc, #0, 12
   127b0:	add	ip, ip, #266240	; 0x41000
   127b4:	ldr	pc, [ip, #2420]!	; 0x974

000127b8 <error@plt>:
   127b8:	add	ip, pc, #0, 12
   127bc:	add	ip, ip, #266240	; 0x41000
   127c0:	ldr	pc, [ip, #2412]!	; 0x96c

000127c4 <getmntent@plt>:
   127c4:	add	ip, pc, #0, 12
   127c8:	add	ip, ip, #266240	; 0x41000
   127cc:	ldr	pc, [ip, #2404]!	; 0x964

000127d0 <opendir@plt>:
   127d0:	add	ip, pc, #0, 12
   127d4:	add	ip, ip, #266240	; 0x41000
   127d8:	ldr	pc, [ip, #2396]!	; 0x95c

000127dc <fnmatch@plt>:
   127dc:	add	ip, pc, #0, 12
   127e0:	add	ip, ip, #266240	; 0x41000
   127e4:	ldr	pc, [ip, #2388]!	; 0x954

000127e8 <open64@plt>:
   127e8:	add	ip, pc, #0, 12
   127ec:	add	ip, ip, #266240	; 0x41000
   127f0:	ldr	pc, [ip, #2380]!	; 0x94c

000127f4 <getenv@plt>:
   127f4:	add	ip, pc, #0, 12
   127f8:	add	ip, ip, #266240	; 0x41000
   127fc:	ldr	pc, [ip, #2372]!	; 0x944

00012800 <lgetfilecon@plt>:
   12800:	add	ip, pc, #0, 12
   12804:	add	ip, ip, #266240	; 0x41000
   12808:	ldr	pc, [ip, #2364]!	; 0x93c

0001280c <malloc@plt>:
   1280c:	add	ip, pc, #0, 12
   12810:	add	ip, ip, #266240	; 0x41000
   12814:	ldr	pc, [ip, #2356]!	; 0x934

00012818 <__libc_start_main@plt>:
   12818:	add	ip, pc, #0, 12
   1281c:	add	ip, ip, #266240	; 0x41000
   12820:	ldr	pc, [ip, #2348]!	; 0x92c

00012824 <readlinkat@plt>:
   12824:	add	ip, pc, #0, 12
   12828:	add	ip, ip, #266240	; 0x41000
   1282c:	ldr	pc, [ip, #2340]!	; 0x924

00012830 <strftime@plt>:
   12830:	add	ip, pc, #0, 12
   12834:	add	ip, ip, #266240	; 0x41000
   12838:	ldr	pc, [ip, #2332]!	; 0x91c

0001283c <__freading@plt>:
   1283c:	add	ip, pc, #0, 12
   12840:	add	ip, ip, #266240	; 0x41000
   12844:	ldr	pc, [ip, #2324]!	; 0x914

00012848 <localtime@plt>:
   12848:	add	ip, pc, #0, 12
   1284c:	add	ip, ip, #266240	; 0x41000
   12850:	ldr	pc, [ip, #2316]!	; 0x90c

00012854 <modf@plt>:
   12854:	add	ip, pc, #0, 12
   12858:	add	ip, ip, #266240	; 0x41000
   1285c:	ldr	pc, [ip, #2308]!	; 0x904

00012860 <__gmon_start__@plt>:
   12860:	add	ip, pc, #0, 12
   12864:	add	ip, ip, #266240	; 0x41000
   12868:	ldr	pc, [ip, #2300]!	; 0x8fc

0001286c <__ctype_b_loc@plt>:
   1286c:	add	ip, pc, #0, 12
   12870:	add	ip, ip, #266240	; 0x41000
   12874:	ldr	pc, [ip, #2292]!	; 0x8f4

00012878 <getcwd@plt>:
   12878:	add	ip, pc, #0, 12
   1287c:	add	ip, ip, #266240	; 0x41000
   12880:	ldr	pc, [ip, #2284]!	; 0x8ec

00012884 <exit@plt>:
   12884:	add	ip, pc, #0, 12
   12888:	add	ip, ip, #266240	; 0x41000
   1288c:	ldr	pc, [ip, #2276]!	; 0x8e4

00012890 <feof@plt>:
   12890:	add	ip, pc, #0, 12
   12894:	add	ip, ip, #266240	; 0x41000
   12898:	ldr	pc, [ip, #2268]!	; 0x8dc

0001289c <getfilecon@plt>:
   1289c:	add	ip, pc, #0, 12
   128a0:	add	ip, ip, #266240	; 0x41000
   128a4:	ldr	pc, [ip, #2260]!	; 0x8d4

000128a8 <bcmp@plt>:
   128a8:	add	ip, pc, #0, 12
   128ac:	add	ip, ip, #266240	; 0x41000
   128b0:	ldr	pc, [ip, #2252]!	; 0x8cc

000128b4 <strtoul@plt>:
   128b4:	add	ip, pc, #0, 12
   128b8:	add	ip, ip, #266240	; 0x41000
   128bc:	ldr	pc, [ip, #2244]!	; 0x8c4

000128c0 <strlen@plt>:
   128c0:	add	ip, pc, #0, 12
   128c4:	add	ip, ip, #266240	; 0x41000
   128c8:	ldr	pc, [ip, #2236]!	; 0x8bc

000128cc <strchr@plt>:
   128cc:	add	ip, pc, #0, 12
   128d0:	add	ip, ip, #266240	; 0x41000
   128d4:	ldr	pc, [ip, #2228]!	; 0x8b4

000128d8 <setenv@plt>:
   128d8:	add	ip, pc, #0, 12
   128dc:	add	ip, ip, #266240	; 0x41000
   128e0:	ldr	pc, [ip, #2220]!	; 0x8ac

000128e4 <openat64@plt>:
   128e4:	add	ip, pc, #0, 12
   128e8:	add	ip, ip, #266240	; 0x41000
   128ec:	ldr	pc, [ip, #2212]!	; 0x8a4

000128f0 <memrchr@plt>:
   128f0:	add	ip, pc, #0, 12
   128f4:	add	ip, ip, #266240	; 0x41000
   128f8:	ldr	pc, [ip, #2204]!	; 0x89c

000128fc <fprintf@plt>:
   128fc:	add	ip, pc, #0, 12
   12900:	add	ip, ip, #266240	; 0x41000
   12904:	ldr	pc, [ip, #2196]!	; 0x894

00012908 <__errno_location@plt>:
   12908:	add	ip, pc, #0, 12
   1290c:	add	ip, ip, #266240	; 0x41000
   12910:	ldr	pc, [ip, #2188]!	; 0x88c

00012914 <iswalnum@plt>:
   12914:	add	ip, pc, #0, 12
   12918:	add	ip, ip, #266240	; 0x41000
   1291c:	ldr	pc, [ip, #2180]!	; 0x884

00012920 <snprintf@plt>:
   12920:	add	ip, pc, #0, 12
   12924:	add	ip, ip, #266240	; 0x41000
   12928:	ldr	pc, [ip, #2172]!	; 0x87c

0001292c <__cxa_atexit@plt>:
   1292c:	add	ip, pc, #0, 12
   12930:	add	ip, ip, #266240	; 0x41000
   12934:	ldr	pc, [ip, #2164]!	; 0x874

00012938 <memset@plt>:
   12938:	add	ip, pc, #0, 12
   1293c:	add	ip, ip, #266240	; 0x41000
   12940:	ldr	pc, [ip, #2156]!	; 0x86c

00012944 <bsearch@plt>:
   12944:	add	ip, pc, #0, 12
   12948:	add	ip, ip, #266240	; 0x41000
   1294c:	ldr	pc, [ip, #2148]!	; 0x864

00012950 <putchar@plt>:
   12950:	add	ip, pc, #0, 12
   12954:	add	ip, ip, #266240	; 0x41000
   12958:	ldr	pc, [ip, #2140]!	; 0x85c

0001295c <strncpy@plt>:
   1295c:	add	ip, pc, #0, 12
   12960:	add	ip, ip, #266240	; 0x41000
   12964:	ldr	pc, [ip, #2132]!	; 0x854

00012968 <pthread_mutexattr_gettype@plt>:
   12968:	add	ip, pc, #0, 12
   1296c:	add	ip, ip, #266240	; 0x41000
   12970:	ldr	pc, [ip, #2124]!	; 0x84c

00012974 <btowc@plt>:
   12974:	add	ip, pc, #0, 12
   12978:	add	ip, ip, #266240	; 0x41000
   1297c:	ldr	pc, [ip, #2116]!	; 0x844

00012980 <strtod@plt>:
   12980:	add	ip, pc, #0, 12
   12984:	add	ip, ip, #266240	; 0x41000
   12988:	ldr	pc, [ip, #2108]!	; 0x83c

0001298c <fileno@plt>:
   1298c:	add	ip, pc, #0, 12
   12990:	add	ip, ip, #266240	; 0x41000
   12994:	ldr	pc, [ip, #2100]!	; 0x834

00012998 <difftime@plt>:
   12998:	add	ip, pc, #0, 12
   1299c:	add	ip, ip, #266240	; 0x41000
   129a0:	ldr	pc, [ip, #2092]!	; 0x82c

000129a4 <strtoumax@plt>:
   129a4:	add	ip, pc, #0, 12
   129a8:	add	ip, ip, #266240	; 0x41000
   129ac:	ldr	pc, [ip, #2084]!	; 0x824

000129b0 <memchr@plt>:
   129b0:	add	ip, pc, #0, 12
   129b4:	add	ip, ip, #266240	; 0x41000
   129b8:	ldr	pc, [ip, #2076]!	; 0x81c

000129bc <setfilecon@plt>:
   129bc:	add	ip, pc, #0, 12
   129c0:	add	ip, ip, #266240	; 0x41000
   129c4:	ldr	pc, [ip, #2068]!	; 0x814

000129c8 <access@plt>:
   129c8:	add	ip, pc, #0, 12
   129cc:	add	ip, ip, #266240	; 0x41000
   129d0:	ldr	pc, [ip, #2060]!	; 0x80c

000129d4 <fclose@plt>:
   129d4:	add	ip, pc, #0, 12
   129d8:	add	ip, ip, #266240	; 0x41000
   129dc:	ldr	pc, [ip, #2052]!	; 0x804

000129e0 <strnlen@plt>:
   129e0:	add	ip, pc, #0, 12
   129e4:	add	ip, ip, #266240	; 0x41000
   129e8:	ldr	pc, [ip, #2044]!	; 0x7fc

000129ec <fseeko64@plt>:
   129ec:	add	ip, pc, #0, 12
   129f0:	add	ip, ip, #266240	; 0x41000
   129f4:	ldr	pc, [ip, #2036]!	; 0x7f4

000129f8 <endmntent@plt>:
   129f8:	add	ip, pc, #0, 12
   129fc:	add	ip, ip, #266240	; 0x41000
   12a00:	ldr	pc, [ip, #2028]!	; 0x7ec

00012a04 <fcntl64@plt>:
   12a04:	add	ip, pc, #0, 12
   12a08:	add	ip, ip, #266240	; 0x41000
   12a0c:	ldr	pc, [ip, #2020]!	; 0x7e4

00012a10 <rpmatch@plt>:
   12a10:	add	ip, pc, #0, 12
   12a14:	add	ip, ip, #266240	; 0x41000
   12a18:	ldr	pc, [ip, #2012]!	; 0x7dc

00012a1c <setlocale@plt>:
   12a1c:	add	ip, pc, #0, 12
   12a20:	add	ip, ip, #266240	; 0x41000
   12a24:	ldr	pc, [ip, #2004]!	; 0x7d4

00012a28 <fork@plt>:
   12a28:	add	ip, pc, #0, 12
   12a2c:	add	ip, ip, #266240	; 0x41000
   12a30:	ldr	pc, [ip, #1996]!	; 0x7cc

00012a34 <endpwent@plt>:
   12a34:	add	ip, pc, #0, 12
   12a38:	add	ip, ip, #266240	; 0x41000
   12a3c:	ldr	pc, [ip, #1988]!	; 0x7c4

00012a40 <toupper@plt>:
   12a40:	add	ip, pc, #0, 12
   12a44:	add	ip, ip, #266240	; 0x41000
   12a48:	ldr	pc, [ip, #1980]!	; 0x7bc

00012a4c <strrchr@plt>:
   12a4c:	add	ip, pc, #0, 12
   12a50:	add	ip, ip, #266240	; 0x41000
   12a54:	ldr	pc, [ip, #1972]!	; 0x7b4

00012a58 <vfprintf@plt>:
   12a58:	add	ip, pc, #0, 12
   12a5c:	add	ip, ip, #266240	; 0x41000
   12a60:	ldr	pc, [ip, #1964]!	; 0x7ac

00012a64 <nl_langinfo@plt>:
   12a64:	add	ip, pc, #0, 12
   12a68:	add	ip, ip, #266240	; 0x41000
   12a6c:	ldr	pc, [ip, #1956]!	; 0x7a4

00012a70 <fputc@plt>:
   12a70:	add	ip, pc, #0, 12
   12a74:	add	ip, ip, #266240	; 0x41000
   12a78:	ldr	pc, [ip, #1948]!	; 0x79c

00012a7c <sscanf@plt>:
   12a7c:	add	ip, pc, #0, 12
   12a80:	add	ip, ip, #266240	; 0x41000
   12a84:	ldr	pc, [ip, #1940]!	; 0x794

00012a88 <localeconv@plt>:
   12a88:	add	ip, pc, #0, 12
   12a8c:	add	ip, ip, #266240	; 0x41000
   12a90:	ldr	pc, [ip, #1932]!	; 0x78c

00012a94 <sprintf@plt>:
   12a94:	add	ip, pc, #0, 12
   12a98:	add	ip, ip, #266240	; 0x41000
   12a9c:	ldr	pc, [ip, #1924]!	; 0x784

00012aa0 <readdir64@plt>:
   12aa0:	add	ip, pc, #0, 12
   12aa4:	add	ip, ip, #266240	; 0x41000
   12aa8:	ldr	pc, [ip, #1916]!	; 0x77c

00012aac <fdopendir@plt>:
   12aac:	add	ip, pc, #0, 12
   12ab0:	add	ip, ip, #266240	; 0x41000
   12ab4:	ldr	pc, [ip, #1908]!	; 0x774

00012ab8 <timegm@plt>:
   12ab8:	add	ip, pc, #0, 12
   12abc:	add	ip, ip, #266240	; 0x41000
   12ac0:	ldr	pc, [ip, #1900]!	; 0x76c

00012ac4 <putc@plt>:
   12ac4:	add	ip, pc, #0, 12
   12ac8:	add	ip, ip, #266240	; 0x41000
   12acc:	ldr	pc, [ip, #1892]!	; 0x764

00012ad0 <dirfd@plt>:
   12ad0:	add	ip, pc, #0, 12
   12ad4:	add	ip, ip, #266240	; 0x41000
   12ad8:	ldr	pc, [ip, #1884]!	; 0x75c

00012adc <fchdir@plt>:
   12adc:	add	ip, pc, #0, 12
   12ae0:	add	ip, ip, #266240	; 0x41000
   12ae4:	ldr	pc, [ip, #1876]!	; 0x754

00012ae8 <fopen64@plt>:
   12ae8:	add	ip, pc, #0, 12
   12aec:	add	ip, ip, #266240	; 0x41000
   12af0:	ldr	pc, [ip, #1868]!	; 0x74c

00012af4 <qsort@plt>:
   12af4:	add	ip, pc, #0, 12
   12af8:	add	ip, ip, #266240	; 0x41000
   12afc:	ldr	pc, [ip, #1860]!	; 0x744

00012b00 <freecon@plt>:
   12b00:	add	ip, pc, #0, 12
   12b04:	add	ip, ip, #266240	; 0x41000
   12b08:	ldr	pc, [ip, #1852]!	; 0x73c

00012b0c <strpbrk@plt>:
   12b0c:	add	ip, pc, #0, 12
   12b10:	add	ip, ip, #266240	; 0x41000
   12b14:	ldr	pc, [ip, #1844]!	; 0x734

00012b18 <setmntent@plt>:
   12b18:	add	ip, pc, #0, 12
   12b1c:	add	ip, ip, #266240	; 0x41000
   12b20:	ldr	pc, [ip, #1836]!	; 0x72c

00012b24 <bindtextdomain@plt>:
   12b24:	add	ip, pc, #0, 12
   12b28:	add	ip, ip, #266240	; 0x41000
   12b2c:	ldr	pc, [ip, #1828]!	; 0x724

00012b30 <atof@plt>:
   12b30:	add	ip, pc, #0, 12
   12b34:	add	ip, ip, #266240	; 0x41000
   12b38:	ldr	pc, [ip, #1820]!	; 0x71c

00012b3c <getline@plt>:
   12b3c:	add	ip, pc, #0, 12
   12b40:	add	ip, ip, #266240	; 0x41000
   12b44:	ldr	pc, [ip, #1812]!	; 0x714

00012b48 <getdelim@plt>:
   12b48:	add	ip, pc, #0, 12
   12b4c:	add	ip, ip, #266240	; 0x41000
   12b50:	ldr	pc, [ip, #1804]!	; 0x70c

00012b54 <__xstat64@plt>:
   12b54:	add	ip, pc, #0, 12
   12b58:	add	ip, ip, #266240	; 0x41000
   12b5c:	ldr	pc, [ip, #1796]!	; 0x704

00012b60 <isatty@plt>:
   12b60:	add	ip, pc, #0, 12
   12b64:	add	ip, ip, #266240	; 0x41000
   12b68:	ldr	pc, [ip, #1788]!	; 0x6fc

00012b6c <unsetenv@plt>:
   12b6c:	add	ip, pc, #0, 12
   12b70:	add	ip, ip, #266240	; 0x41000
   12b74:	ldr	pc, [ip, #1780]!	; 0x6f4

00012b78 <towupper@plt>:
   12b78:	add	ip, pc, #0, 12
   12b7c:	add	ip, ip, #266240	; 0x41000
   12b80:	ldr	pc, [ip, #1772]!	; 0x6ec

00012b84 <fputs@plt>:
   12b84:	add	ip, pc, #0, 12
   12b88:	add	ip, ip, #266240	; 0x41000
   12b8c:	ldr	pc, [ip, #1764]!	; 0x6e4

00012b90 <strncmp@plt>:
   12b90:	add	ip, pc, #0, 12
   12b94:	add	ip, ip, #266240	; 0x41000
   12b98:	ldr	pc, [ip, #1756]!	; 0x6dc

00012b9c <abort@plt>:
   12b9c:	add	ip, pc, #0, 12
   12ba0:	add	ip, ip, #266240	; 0x41000
   12ba4:	ldr	pc, [ip, #1748]!	; 0x6d4

00012ba8 <close@plt>:
   12ba8:	add	ip, pc, #0, 12
   12bac:	add	ip, ip, #266240	; 0x41000
   12bb0:	ldr	pc, [ip, #1740]!	; 0x6cc

00012bb4 <__lxstat64@plt>:
   12bb4:	add	ip, pc, #0, 12
   12bb8:	add	ip, ip, #266240	; 0x41000
   12bbc:	ldr	pc, [ip, #1732]!	; 0x6c4

00012bc0 <closedir@plt>:
   12bc0:	add	ip, pc, #0, 12
   12bc4:	add	ip, ip, #266240	; 0x41000
   12bc8:	ldr	pc, [ip, #1724]!	; 0x6bc

00012bcc <getgrgid@plt>:
   12bcc:	add	ip, pc, #0, 12
   12bd0:	add	ip, ip, #266240	; 0x41000
   12bd4:	ldr	pc, [ip, #1716]!	; 0x6b4

00012bd8 <getgrnam@plt>:
   12bd8:	add	ip, pc, #0, 12
   12bdc:	add	ip, ip, #266240	; 0x41000
   12be0:	ldr	pc, [ip, #1708]!	; 0x6ac

00012be4 <strspn@plt>:
   12be4:	add	ip, pc, #0, 12
   12be8:	add	ip, ip, #266240	; 0x41000
   12bec:	ldr	pc, [ip, #1700]!	; 0x6a4

00012bf0 <__assert_fail@plt>:
   12bf0:	add	ip, pc, #0, 12
   12bf4:	add	ip, ip, #266240	; 0x41000
   12bf8:	ldr	pc, [ip, #1692]!	; 0x69c

Disassembly of section .text:

00012c00 <.text>:
   12c00:	mov	fp, #0
   12c04:	mov	lr, #0
   12c08:	pop	{r1}		; (ldr r1, [sp], #4)
   12c0c:	mov	r2, sp
   12c10:	push	{r2}		; (str r2, [sp, #-4]!)
   12c14:	push	{r0}		; (str r0, [sp, #-4]!)
   12c18:	ldr	ip, [pc, #16]	; 12c30 <__assert_fail@plt+0x40>
   12c1c:	push	{ip}		; (str ip, [sp, #-4]!)
   12c20:	ldr	r0, [pc, #12]	; 12c34 <__assert_fail@plt+0x44>
   12c24:	ldr	r3, [pc, #12]	; 12c38 <__assert_fail@plt+0x48>
   12c28:	bl	12818 <__libc_start_main@plt>
   12c2c:	bl	12b9c <abort@plt>
   12c30:	andeq	sp, r3, r0, ror #3
   12c34:	strdeq	r2, [r1], -r0
   12c38:	andeq	sp, r3, r0, lsl #3
   12c3c:	ldr	r3, [pc, #20]	; 12c58 <__assert_fail@plt+0x68>
   12c40:	ldr	r2, [pc, #20]	; 12c5c <__assert_fail@plt+0x6c>
   12c44:	add	r3, pc, r3
   12c48:	ldr	r2, [r3, r2]
   12c4c:	cmp	r2, #0
   12c50:	bxeq	lr
   12c54:	b	12860 <__gmon_start__@plt>
   12c58:			; <UNDEFINED> instruction: 0x000413b4
   12c5c:	muleq	r0, r8, r2
   12c60:	ldr	r0, [pc, #24]	; 12c80 <__assert_fail@plt+0x90>
   12c64:	ldr	r3, [pc, #24]	; 12c84 <__assert_fail@plt+0x94>
   12c68:	cmp	r3, r0
   12c6c:	bxeq	lr
   12c70:	ldr	r3, [pc, #16]	; 12c88 <__assert_fail@plt+0x98>
   12c74:	cmp	r3, #0
   12c78:	bxeq	lr
   12c7c:	bx	r3
   12c80:	andeq	r4, r5, r4, asr r5
   12c84:	andeq	r4, r5, r4, asr r5
   12c88:	andeq	r0, r0, r0
   12c8c:	ldr	r0, [pc, #36]	; 12cb8 <__assert_fail@plt+0xc8>
   12c90:	ldr	r1, [pc, #36]	; 12cbc <__assert_fail@plt+0xcc>
   12c94:	sub	r1, r1, r0
   12c98:	asr	r1, r1, #2
   12c9c:	add	r1, r1, r1, lsr #31
   12ca0:	asrs	r1, r1, #1
   12ca4:	bxeq	lr
   12ca8:	ldr	r3, [pc, #16]	; 12cc0 <__assert_fail@plt+0xd0>
   12cac:	cmp	r3, #0
   12cb0:	bxeq	lr
   12cb4:	bx	r3
   12cb8:	andeq	r4, r5, r4, asr r5
   12cbc:	andeq	r4, r5, r4, asr r5
   12cc0:	andeq	r0, r0, r0
   12cc4:	push	{r4, lr}
   12cc8:	ldr	r4, [pc, #24]	; 12ce8 <__assert_fail@plt+0xf8>
   12ccc:	ldrb	r3, [r4]
   12cd0:	cmp	r3, #0
   12cd4:	popne	{r4, pc}
   12cd8:	bl	12c60 <__assert_fail@plt+0x70>
   12cdc:	mov	r3, #1
   12ce0:	strb	r3, [r4]
   12ce4:	pop	{r4, pc}
   12ce8:	andeq	r4, r5, r8, ror r5
   12cec:	b	12c8c <__assert_fail@plt+0x9c>
   12cf0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12cf4:	add	fp, sp, #28
   12cf8:	sub	sp, sp, #236	; 0xec
   12cfc:	mov	r5, r0
   12d00:	ldr	r0, [r1]
   12d04:	mov	r6, r1
   12d08:	cmp	r0, #0
   12d0c:	movweq	r0, #53860	; 0xd264
   12d10:	movteq	r0, #3
   12d14:	bl	27eb4 <__assert_fail@plt+0x152c4>
   12d18:	bl	1818c <__assert_fail@plt+0x559c>
   12d1c:	movw	r8, #20064	; 0x4e60
   12d20:	mov	r0, #0
   12d24:	movt	r8, #5
   12d28:	strb	r0, [r8, #32]
   12d2c:	str	r0, [r8, #28]
   12d30:	strb	r0, [r8, #40]	; 0x28
   12d34:	mvn	r0, #99	; 0x63
   12d38:	str	r0, [r8, #16]
   12d3c:	bl	1fbb8 <__assert_fail@plt+0xcfc8>
   12d40:	cmp	r0, #0
   12d44:	beq	12d4c <__assert_fail@plt+0x15c>
   12d48:	bl	1f7b0 <__assert_fail@plt+0xcbc0>
   12d4c:	movw	r0, #506	; 0x1fa
   12d50:	movt	r0, #4
   12d54:	bl	19074 <__assert_fail@plt+0x6484>
   12d58:	cmp	r0, #0
   12d5c:	str	r0, [r8, #36]	; 0x24
   12d60:	beq	13198 <__assert_fail@plt+0x5a8>
   12d64:	movw	r4, #20108	; 0x4e8c
   12d68:	movt	r4, #5
   12d6c:	mov	r0, r4
   12d70:	bl	18cb0 <__assert_fail@plt+0x60c0>
   12d74:	movw	r1, #61759	; 0xf13f
   12d78:	mov	r0, #6
   12d7c:	movt	r1, #3
   12d80:	bl	12a1c <setlocale@plt>
   12d84:	movw	r7, #6505	; 0x1969
   12d88:	movw	r1, #53909	; 0xd295
   12d8c:	movt	r7, #4
   12d90:	movt	r1, #3
   12d94:	mov	r0, r7
   12d98:	bl	12b24 <bindtextdomain@plt>
   12d9c:	mov	r0, r7
   12da0:	bl	126c8 <textdomain@plt>
   12da4:	movw	r0, #4616	; 0x1208
   12da8:	movt	r0, #2
   12dac:	bl	3d1e4 <__assert_fail@plt+0x2a5f4>
   12db0:	cmp	r0, #0
   12db4:	bne	131ac <__assert_fail@plt+0x5bc>
   12db8:	mov	r0, r5
   12dbc:	mov	r1, r6
   12dc0:	bl	1893c <__assert_fail@plt+0x5d4c>
   12dc4:	mov	r7, r0
   12dc8:	ldr	r0, [r4, #44]	; 0x2c
   12dcc:	tst	r0, #2
   12dd0:	movwne	r1, #34436	; 0x8684
   12dd4:	movtne	r1, #1
   12dd8:	strne	r1, [r4, #52]	; 0x34
   12ddc:	tst	r0, #128	; 0x80
   12de0:	bne	13160 <__assert_fail@plt+0x570>
   12de4:	mov	r0, r5
   12de8:	mov	r1, r6
   12dec:	mov	r2, r7
   12df0:	bl	15fc0 <__assert_fail@plt+0x33d0>
   12df4:	add	r6, r6, r7, lsl #2
   12df8:	mov	r9, r0
   12dfc:	mov	r0, #0
   12e00:	cmp	r7, r5
   12e04:	bge	12e18 <__assert_fail@plt+0x228>
   12e08:	ldr	r0, [r6]
   12e0c:	mov	r1, #1
   12e10:	bl	188c4 <__assert_fail@plt+0x5cd4>
   12e14:	eor	r0, r0, #1
   12e18:	ldr	r5, [r4, #76]	; 0x4c
   12e1c:	cmp	r5, #0
   12e20:	beq	12f04 <__assert_fail@plt+0x314>
   12e24:	cmp	r0, #0
   12e28:	bne	131d8 <__assert_fail@plt+0x5e8>
   12e2c:	movw	r1, #62122	; 0xf2aa
   12e30:	mov	r0, r5
   12e34:	movt	r1, #3
   12e38:	bl	124f4 <strcmp@plt>
   12e3c:	cmp	r0, #0
   12e40:	beq	12f28 <__assert_fail@plt+0x338>
   12e44:	mov	r0, #0
   12e48:	mov	r1, r5
   12e4c:	bl	18f7c <__assert_fail@plt+0x638c>
   12e50:	str	r0, [sp, #20]
   12e54:	ldr	r0, [r4, #76]	; 0x4c
   12e58:	movw	r1, #6672	; 0x1a10
   12e5c:	movt	r1, #4
   12e60:	bl	12ae8 <fopen64@plt>
   12e64:	cmp	r0, #0
   12e68:	beq	1326c <__assert_fail@plt+0x67c>
   12e6c:	mov	r6, r0
   12e70:	bl	1298c <fileno@plt>
   12e74:	cmn	r0, #1
   12e78:	ble	1329c <__assert_fail@plt+0x6ac>
   12e7c:	mov	r5, r0
   12e80:	ldrb	r0, [r4, #80]	; 0x50
   12e84:	cmp	r0, #0
   12e88:	beq	12ef4 <__assert_fail@plt+0x304>
   12e8c:	add	r1, sp, #128	; 0x80
   12e90:	mov	r0, r5
   12e94:	bl	3d20c <__assert_fail@plt+0x2a61c>
   12e98:	cmp	r0, #0
   12e9c:	bne	12ef4 <__assert_fail@plt+0x304>
   12ea0:	add	r1, sp, #24
   12ea4:	mov	r0, #0
   12ea8:	bl	3d20c <__assert_fail@plt+0x2a61c>
   12eac:	cmp	r0, #0
   12eb0:	bne	12ef4 <__assert_fail@plt+0x304>
   12eb4:	ldr	r0, [sp, #120]	; 0x78
   12eb8:	ldr	r2, [sp, #224]	; 0xe0
   12ebc:	ldr	r1, [sp, #124]	; 0x7c
   12ec0:	ldr	r3, [sp, #228]	; 0xe4
   12ec4:	eor	r1, r3, r1
   12ec8:	eor	r0, r2, r0
   12ecc:	orrs	r0, r0, r1
   12ed0:	bne	12ef4 <__assert_fail@plt+0x304>
   12ed4:	ldr	r0, [sp, #24]
   12ed8:	ldr	r2, [sp, #128]	; 0x80
   12edc:	ldr	r1, [sp, #28]
   12ee0:	ldr	r3, [sp, #132]	; 0x84
   12ee4:	eor	r1, r3, r1
   12ee8:	eor	r0, r2, r0
   12eec:	orrs	r0, r0, r1
   12ef0:	beq	132e8 <__assert_fail@plt+0x6f8>
   12ef4:	mov	r0, r5
   12ef8:	mov	r1, #1
   12efc:	bl	2117c <__assert_fail@plt+0xe58c>
   12f00:	b	12f64 <__assert_fail@plt+0x374>
   12f04:	cmp	r0, #0
   12f08:	beq	130dc <__assert_fail@plt+0x4ec>
   12f0c:	mov	r0, r6
   12f10:	bl	20e74 <__assert_fail@plt+0xe284>
   12f14:	mov	r5, r0
   12f18:	mov	r0, #0
   12f1c:	mov	r6, #0
   12f20:	str	r0, [sp, #20]
   12f24:	b	12f70 <__assert_fail@plt+0x380>
   12f28:	ldrb	r0, [r4, #80]	; 0x50
   12f2c:	cmp	r0, #0
   12f30:	bne	132bc <__assert_fail@plt+0x6cc>
   12f34:	movw	r1, #54139	; 0xd37b
   12f38:	mov	r0, #0
   12f3c:	mov	r2, #5
   12f40:	movt	r1, #3
   12f44:	bl	12674 <dcgettext@plt>
   12f48:	mov	r1, r0
   12f4c:	mov	r0, #0
   12f50:	bl	18f7c <__assert_fail@plt+0x638c>
   12f54:	str	r0, [sp, #20]
   12f58:	movw	r0, #17776	; 0x4570
   12f5c:	movt	r0, #5
   12f60:	ldr	r6, [r0]
   12f64:	mov	r0, r6
   12f68:	bl	20ea4 <__assert_fail@plt+0xe2b4>
   12f6c:	mov	r5, r0
   12f70:	cmp	r5, #0
   12f74:	beq	13194 <__assert_fail@plt+0x5a4>
   12f78:	add	r1, sp, #128	; 0x80
   12f7c:	mov	r0, r5
   12f80:	str	r6, [sp, #12]
   12f84:	str	r9, [sp, #16]
   12f88:	bl	20edc <__assert_fail@plt+0xe2ec>
   12f8c:	cmp	r0, #0
   12f90:	beq	13080 <__assert_fail@plt+0x490>
   12f94:	mov	sl, r0
   12f98:	mov	r6, #1
   12f9c:	add	r9, sp, #128	; 0x80
   12fa0:	mov	r7, #1
   12fa4:	ldrb	r1, [sl]
   12fa8:	ldr	r0, [r4, #76]	; 0x4c
   12fac:	cmp	r1, #0
   12fb0:	beq	12ff0 <__assert_fail@plt+0x400>
   12fb4:	cmp	r0, #0
   12fb8:	bne	12fd0 <__assert_fail@plt+0x3e0>
   12fbc:	mov	r0, sl
   12fc0:	mov	r1, #1
   12fc4:	bl	188c4 <__assert_fail@plt+0x5cd4>
   12fc8:	cmp	r0, #0
   12fcc:	bne	130fc <__assert_fail@plt+0x50c>
   12fd0:	mov	r0, sl
   12fd4:	bl	128c0 <strlen@plt>
   12fd8:	str	r0, [r8, #20]
   12fdc:	mov	r0, sl
   12fe0:	bl	1332c <__assert_fail@plt+0x73c>
   12fe4:	cmp	r0, #0
   12fe8:	bne	13064 <__assert_fail@plt+0x474>
   12fec:	b	130f8 <__assert_fail@plt+0x508>
   12ff0:	cmp	r0, #0
   12ff4:	beq	13038 <__assert_fail@plt+0x448>
   12ff8:	mov	r0, r5
   12ffc:	bl	20f88 <__assert_fail@plt+0xe398>
   13000:	movw	r1, #54410	; 0xd48a
   13004:	mov	r7, r0
   13008:	mov	r0, #0
   1300c:	mov	r2, #5
   13010:	movt	r1, #3
   13014:	bl	12674 <dcgettext@plt>
   13018:	ldr	r3, [sp, #20]
   1301c:	movw	r2, #54399	; 0xd47f
   13020:	str	r0, [sp, #4]
   13024:	mov	r0, #0
   13028:	mov	r1, #0
   1302c:	str	r7, [sp]
   13030:	movt	r2, #3
   13034:	b	13058 <__assert_fail@plt+0x468>
   13038:	mov	r0, #0
   1303c:	mov	r1, sl
   13040:	bl	18f7c <__assert_fail@plt+0x638c>
   13044:	movw	r2, #13527	; 0x34d7
   13048:	mov	r3, r0
   1304c:	mov	r0, #0
   13050:	mov	r1, #2
   13054:	movt	r2, #4
   13058:	bl	127b8 <error@plt>
   1305c:	mov	r7, #0
   13060:	str	r6, [r8, #28]
   13064:	mov	r0, r5
   13068:	mov	r1, r9
   1306c:	bl	20edc <__assert_fail@plt+0xe2ec>
   13070:	mov	sl, r0
   13074:	cmp	r0, #0
   13078:	bne	12fa4 <__assert_fail@plt+0x3b4>
   1307c:	b	13084 <__assert_fail@plt+0x494>
   13080:	mov	r7, #1
   13084:	ldr	r0, [sp, #128]	; 0x80
   13088:	ldr	r9, [sp, #16]
   1308c:	cmp	r0, #2
   13090:	beq	13100 <__assert_fail@plt+0x510>
   13094:	cmp	r0, #4
   13098:	bne	1318c <__assert_fail@plt+0x59c>
   1309c:	bl	12908 <__errno_location@plt>
   130a0:	movw	r1, #54344	; 0xd448
   130a4:	ldr	r6, [r0]
   130a8:	mov	r0, #0
   130ac:	mov	r2, #5
   130b0:	mov	r7, #0
   130b4:	movt	r1, #3
   130b8:	bl	12674 <dcgettext@plt>
   130bc:	ldr	r3, [sp, #20]
   130c0:	mov	r2, r0
   130c4:	mov	r0, #0
   130c8:	mov	r1, r6
   130cc:	bl	127b8 <error@plt>
   130d0:	mov	r0, #1
   130d4:	str	r0, [r8, #28]
   130d8:	b	13100 <__assert_fail@plt+0x510>
   130dc:	mov	r0, #46	; 0x2e
   130e0:	strh	r0, [sp, #128]	; 0x80
   130e4:	add	r0, sp, #128	; 0x80
   130e8:	bl	1332c <__assert_fail@plt+0x73c>
   130ec:	cmp	r0, #0
   130f0:	bne	13148 <__assert_fail@plt+0x558>
   130f4:	b	13154 <__assert_fail@plt+0x564>
   130f8:	mov	r7, #0
   130fc:	ldr	r9, [sp, #16]
   13100:	mov	r0, r5
   13104:	bl	20fac <__assert_fail@plt+0xe3bc>
   13108:	tst	r7, #1
   1310c:	ldrne	r0, [r4, #76]	; 0x4c
   13110:	cmpne	r0, #0
   13114:	bne	13124 <__assert_fail@plt+0x534>
   13118:	tst	r7, #1
   1311c:	bne	13148 <__assert_fail@plt+0x558>
   13120:	b	13154 <__assert_fail@plt+0x564>
   13124:	ldr	r4, [sp, #12]
   13128:	mov	r0, r4
   1312c:	bl	125b4 <ferror@plt>
   13130:	cmp	r0, #0
   13134:	bne	1324c <__assert_fail@plt+0x65c>
   13138:	mov	r0, r4
   1313c:	bl	129d4 <fclose@plt>
   13140:	cmp	r0, #0
   13144:	bne	1324c <__assert_fail@plt+0x65c>
   13148:	mov	r0, r9
   1314c:	bl	1530c <__assert_fail@plt+0x271c>
   13150:	bl	1822c <__assert_fail@plt+0x563c>
   13154:	ldr	r0, [r8, #28]
   13158:	sub	sp, fp, #28
   1315c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13160:	movw	r0, #17768	; 0x4568
   13164:	movt	r0, #5
   13168:	ldr	r9, [r0]
   1316c:	add	r0, r4, #28
   13170:	bl	12668 <ctime@plt>
   13174:	movw	r1, #53968	; 0xd2d0
   13178:	mov	r2, r0
   1317c:	mov	r0, r9
   13180:	movt	r1, #3
   13184:	bl	128fc <fprintf@plt>
   13188:	b	12de4 <__assert_fail@plt+0x1f4>
   1318c:	cmp	r0, #3
   13190:	bne	13234 <__assert_fail@plt+0x644>
   13194:	bl	2aab4 <__assert_fail@plt+0x17ec4>
   13198:	bl	12908 <__errno_location@plt>
   1319c:	ldr	r4, [r0]
   131a0:	movw	r1, #53865	; 0xd269
   131a4:	movt	r1, #3
   131a8:	b	131bc <__assert_fail@plt+0x5cc>
   131ac:	bl	12908 <__errno_location@plt>
   131b0:	ldr	r4, [r0]
   131b4:	movw	r1, #53933	; 0xd2ad
   131b8:	movt	r1, #3
   131bc:	mov	r0, #0
   131c0:	mov	r2, #5
   131c4:	bl	12674 <dcgettext@plt>
   131c8:	mov	r2, r0
   131cc:	mov	r0, #1
   131d0:	mov	r1, r4
   131d4:	bl	127b8 <error@plt>
   131d8:	movw	r1, #53987	; 0xd2e3
   131dc:	mov	r0, #0
   131e0:	mov	r2, #5
   131e4:	movt	r1, #3
   131e8:	bl	12674 <dcgettext@plt>
   131ec:	ldr	r1, [r6]
   131f0:	mov	r4, r0
   131f4:	mov	r0, #0
   131f8:	bl	18f7c <__assert_fail@plt+0x638c>
   131fc:	mov	r3, r0
   13200:	mov	r0, #0
   13204:	mov	r1, #0
   13208:	mov	r2, r4
   1320c:	bl	127b8 <error@plt>
   13210:	movw	r1, #54004	; 0xd2f4
   13214:	mov	r0, #0
   13218:	mov	r2, #5
   1321c:	movt	r1, #3
   13220:	bl	12674 <dcgettext@plt>
   13224:	movw	r2, #13527	; 0x34d7
   13228:	mov	r3, r0
   1322c:	movt	r2, #4
   13230:	b	132dc <__assert_fail@plt+0x6ec>
   13234:	movw	r0, #54359	; 0xd457
   13238:	movw	r1, #54183	; 0xd3a7
   1323c:	movw	r3, #54193	; 0xd3b1
   13240:	movw	r2, #675	; 0x2a3
   13244:	movt	r0, #3
   13248:	b	132b0 <__assert_fail@plt+0x6c0>
   1324c:	movw	r1, #54440	; 0xd4a8
   13250:	mov	r0, #0
   13254:	mov	r2, #5
   13258:	movt	r1, #3
   1325c:	bl	12674 <dcgettext@plt>
   13260:	ldr	r3, [sp, #20]
   13264:	mov	r2, r0
   13268:	b	132dc <__assert_fail@plt+0x6ec>
   1326c:	bl	12908 <__errno_location@plt>
   13270:	movw	r1, #54156	; 0xd38c
   13274:	ldr	r4, [r0]
   13278:	mov	r0, #0
   1327c:	mov	r2, #5
   13280:	movt	r1, #3
   13284:	bl	12674 <dcgettext@plt>
   13288:	ldr	r3, [sp, #20]
   1328c:	mov	r2, r0
   13290:	mov	r0, #1
   13294:	mov	r1, r4
   13298:	bl	127b8 <error@plt>
   1329c:	movw	r0, #54662	; 0xd586
   132a0:	movw	r1, #54183	; 0xd3a7
   132a4:	movw	r3, #54193	; 0xd3b1
   132a8:	movw	r2, #610	; 0x262
   132ac:	movt	r0, #3
   132b0:	movt	r1, #3
   132b4:	movt	r3, #3
   132b8:	bl	12bf0 <__assert_fail@plt>
   132bc:	movw	r1, #54055	; 0xd327
   132c0:	mov	r0, #0
   132c4:	mov	r2, #5
   132c8:	movt	r1, #3
   132cc:	bl	12674 <dcgettext@plt>
   132d0:	movw	r2, #11436	; 0x2cac
   132d4:	mov	r3, r0
   132d8:	movt	r2, #4
   132dc:	mov	r0, #1
   132e0:	mov	r1, #0
   132e4:	bl	127b8 <error@plt>
   132e8:	movw	r1, #54245	; 0xd3e5
   132ec:	mov	r0, #0
   132f0:	mov	r2, #5
   132f4:	movt	r1, #3
   132f8:	bl	12674 <dcgettext@plt>
   132fc:	mov	r3, r0
   13300:	ldr	r0, [sp, #20]
   13304:	movw	r2, #54237	; 0xd3dd
   13308:	movt	r2, #3
   1330c:	str	r0, [sp]
   13310:	b	132dc <__assert_fail@plt+0x6ec>
   13314:	movw	r1, #17064	; 0x42a8
   13318:	movt	r1, #5
   1331c:	ldr	r1, [r1]
   13320:	str	r1, [r0]
   13324:	mov	r0, #1
   13328:	bx	lr
   1332c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13330:	add	fp, sp, #28
   13334:	sub	sp, sp, #268	; 0x10c
   13338:	mov	r7, r0
   1333c:	bl	128c0 <strlen@plt>
   13340:	movw	r5, #17064	; 0x42a8
   13344:	movw	sl, #20064	; 0x4e60
   13348:	movt	r5, #5
   1334c:	movt	sl, #5
   13350:	ldr	r1, [r5]
   13354:	str	r0, [sl, #20]
   13358:	tst	r1, #512	; 0x200
   1335c:	beq	1337c <__assert_fail@plt+0x78c>
   13360:	movw	r2, #17068	; 0x42ac
   13364:	mvn	r0, #99	; 0x63
   13368:	movt	r2, #5
   1336c:	str	r0, [sl, #16]
   13370:	ldr	r3, [r2]
   13374:	cmn	r3, #1
   13378:	strle	r0, [r2]
   1337c:	mov	r0, #0
   13380:	str	r0, [sp, #52]	; 0x34
   13384:	movw	r0, #20108	; 0x4e8c
   13388:	str	r7, [sp, #48]	; 0x30
   1338c:	movt	r0, #5
   13390:	ldr	r0, [r0, #48]	; 0x30
   13394:	cmp	r0, #0
   13398:	beq	133bc <__assert_fail@plt+0x7cc>
   1339c:	cmp	r0, #1
   133a0:	beq	133b4 <__assert_fail@plt+0x7c4>
   133a4:	cmp	r0, #2
   133a8:	bne	133c8 <__assert_fail@plt+0x7d8>
   133ac:	mov	r0, #17
   133b0:	b	133c0 <__assert_fail@plt+0x7d0>
   133b4:	mov	r0, #3
   133b8:	b	133c0 <__assert_fail@plt+0x7d0>
   133bc:	mov	r0, #16
   133c0:	orr	r1, r1, r0
   133c4:	str	r1, [r5]
   133c8:	movw	r0, #20108	; 0x4e8c
   133cc:	mov	r2, #0
   133d0:	mov	r4, #0
   133d4:	movt	r0, #5
   133d8:	ldrb	r0, [r0, #13]
   133dc:	cmp	r0, #0
   133e0:	add	r0, sp, #48	; 0x30
   133e4:	orrne	r1, r1, #64	; 0x40
   133e8:	strne	r1, [r5]
   133ec:	bl	2bd88 <__assert_fail@plt+0x19198>
   133f0:	mov	r6, r0
   133f4:	bl	12908 <__errno_location@plt>
   133f8:	mov	r9, r0
   133fc:	cmp	r6, #0
   13400:	beq	13b0c <__assert_fail@plt+0xf1c>
   13404:	mov	r0, r6
   13408:	str	r7, [sp, #16]
   1340c:	str	r4, [r9]
   13410:	bl	2c658 <__assert_fail@plt+0x19a68>
   13414:	movw	r7, #20108	; 0x4e8c
   13418:	cmp	r0, #0
   1341c:	movt	r7, #5
   13420:	beq	13ad8 <__assert_fail@plt+0xee8>
   13424:	mov	r8, r0
   13428:	add	r0, sp, #56	; 0x38
   1342c:	mov	r4, #0
   13430:	str	r9, [sp, #36]	; 0x24
   13434:	str	r6, [sp, #32]
   13438:	add	r0, r0, #96	; 0x60
   1343c:	str	r0, [sp, #40]	; 0x28
   13440:	mov	r0, #-2147483648	; 0x80000000
   13444:	str	r0, [sp, #44]	; 0x2c
   13448:	ldrb	r0, [sl, #32]
   1344c:	cmp	r0, #0
   13450:	beq	13468 <__assert_fail@plt+0x878>
   13454:	ldr	r0, [r8, #48]	; 0x30
   13458:	ldr	r1, [sp, #44]	; 0x2c
   1345c:	cmp	r0, r1
   13460:	beq	13468 <__assert_fail@plt+0x878>
   13464:	bl	18008 <__assert_fail@plt+0x5418>
   13468:	ldr	r0, [r8, #48]	; 0x30
   1346c:	strb	r4, [sl, #4]
   13470:	strb	r4, [sl, #40]	; 0x28
   13474:	str	r0, [sp, #44]	; 0x2c
   13478:	ldr	r0, [r8, #80]	; 0x50
   1347c:	cmp	r0, #0
   13480:	str	r0, [sl, #8]
   13484:	movwne	r0, #1
   13488:	strb	r0, [sl, #5]
   1348c:	ldrb	r0, [r7, #44]	; 0x2c
   13490:	tst	r0, #4
   13494:	bne	1396c <__assert_fail@plt+0xd7c>
   13498:	ldrh	r0, [r8, #56]	; 0x38
   1349c:	cmp	r0, #6
   134a0:	bne	134dc <__assert_fail@plt+0x8ec>
   134a4:	ldrb	r0, [r5, #1]
   134a8:	tst	r0, #2
   134ac:	beq	134fc <__assert_fail@plt+0x90c>
   134b0:	movw	r0, #17068	; 0x42ac
   134b4:	movt	r0, #5
   134b8:	ldr	r0, [r0]
   134bc:	cmp	r0, #0
   134c0:	bmi	134fc <__assert_fail@plt+0x90c>
   134c4:	bl	12ba8 <close@plt>
   134c8:	movw	r0, #17068	; 0x42ac
   134cc:	mvn	r1, #0
   134d0:	movt	r0, #5
   134d4:	str	r1, [r0]
   134d8:	b	134fc <__assert_fail@plt+0x90c>
   134dc:	ldr	r0, [r8, #48]	; 0x30
   134e0:	cmp	r0, #0
   134e4:	beq	134a4 <__assert_fail@plt+0x8b4>
   134e8:	movw	r1, #17072	; 0x42b0
   134ec:	movt	r1, #5
   134f0:	ldr	r1, [r1]
   134f4:	cmp	r0, r1
   134f8:	bgt	134a4 <__assert_fail@plt+0x8b4>
   134fc:	ldrb	r0, [r5, #1]
   13500:	tst	r0, #2
   13504:	beq	13568 <__assert_fail@plt+0x978>
   13508:	ldr	r0, [r6, #32]
   1350c:	cmn	r0, #100	; 0x64
   13510:	beq	1351c <__assert_fail@plt+0x92c>
   13514:	cmn	r0, #1
   13518:	ble	13bb0 <__assert_fail@plt+0xfc0>
   1351c:	movw	r1, #17068	; 0x42ac
   13520:	str	r0, [sl, #16]
   13524:	movt	r1, #5
   13528:	ldr	r1, [r1]
   1352c:	cmn	r1, #1
   13530:	bgt	13568 <__assert_fail@plt+0x978>
   13534:	cmn	r0, #100	; 0x64
   13538:	bne	13550 <__assert_fail@plt+0x960>
   1353c:	movw	r0, #17068	; 0x42ac
   13540:	mvn	r1, #99	; 0x63
   13544:	movt	r0, #5
   13548:	str	r1, [r0]
   1354c:	b	13568 <__assert_fail@plt+0x978>
   13550:	cmp	r0, #0
   13554:	bmi	13c08 <__assert_fail@plt+0x1018>
   13558:	bl	211dc <__assert_fail@plt+0xe5ec>
   1355c:	movw	r1, #17068	; 0x42ac
   13560:	movt	r1, #5
   13564:	str	r0, [r1]
   13568:	ldr	r0, [r8, #48]	; 0x30
   1356c:	movw	r1, #17072	; 0x42b0
   13570:	movt	r1, #5
   13574:	str	r0, [r1]
   13578:	ldr	r1, [sp, #40]	; 0x28
   1357c:	ldrd	r2, [r8, #160]	; 0xa0
   13580:	strd	r2, [r1]
   13584:	ldrh	r1, [r8, #56]	; 0x38
   13588:	sub	r1, r1, #2
   1358c:	cmp	r1, #11
   13590:	bhi	136b0 <__assert_fail@plt+0xac0>
   13594:	add	r2, pc, #0
   13598:	ldr	pc, [r2, r1, lsl #2]
   1359c:	andeq	r3, r1, ip, asr #11
   135a0:			; <UNDEFINED> instruction: 0x000136b0
   135a4:	andeq	r3, r1, r8, lsl r6
   135a8:			; <UNDEFINED> instruction: 0x000136b0
   135ac:			; <UNDEFINED> instruction: 0x000136b0
   135b0:	andeq	r3, r1, r0, ror r6
   135b4:			; <UNDEFINED> instruction: 0x000136b0
   135b8:			; <UNDEFINED> instruction: 0x000136b0
   135bc:	andeq	r3, r1, r4, lsr r6
   135c0:			; <UNDEFINED> instruction: 0x000136b0
   135c4:			; <UNDEFINED> instruction: 0x000136b0
   135c8:	andeq	r3, r1, ip, ror r6
   135cc:	ldr	r0, [r8, #80]	; 0x50
   135d0:	and	r0, r0, #61440	; 0xf000
   135d4:	cmp	r0, #40960	; 0xa000
   135d8:	bne	1371c <__assert_fail@plt+0xb2c>
   135dc:	movw	r1, #55127	; 0xd757
   135e0:	mov	r0, #0
   135e4:	mov	r2, #5
   135e8:	movt	r1, #3
   135ec:	bl	12674 <dcgettext@plt>
   135f0:	ldr	r1, [r8, #28]
   135f4:	mov	r4, r0
   135f8:	mov	r0, #0
   135fc:	bl	18f7c <__assert_fail@plt+0x638c>
   13600:	mov	r3, r0
   13604:	mov	r0, #0
   13608:	mov	r1, #0
   1360c:	mov	r2, r4
   13610:	bl	127b8 <error@plt>
   13614:	b	13a48 <__assert_fail@plt+0xe58>
   13618:	ldr	r1, [r8, #28]
   1361c:	ldr	r0, [r8, #32]
   13620:	bl	17f3c <__assert_fail@plt+0x534c>
   13624:	ldrb	r0, [r7]
   13628:	cmp	r0, #0
   1362c:	bne	13a54 <__assert_fail@plt+0xe64>
   13630:	b	136b0 <__assert_fail@plt+0xac0>
   13634:	cmp	r0, #0
   13638:	beq	13670 <__assert_fail@plt+0xa80>
   1363c:	ldr	r0, [r8, #24]
   13640:	ldr	r2, [r7, #52]	; 0x34
   13644:	sub	r1, fp, #136	; 0x88
   13648:	blx	r2
   1364c:	cmp	r0, #0
   13650:	beq	13660 <__assert_fail@plt+0xa70>
   13654:	ldr	r0, [r9]
   13658:	cmp	r0, #40	; 0x28
   1365c:	beq	136a0 <__assert_fail@plt+0xab0>
   13660:	ldr	r1, [r8, #28]
   13664:	ldr	r0, [r8, #32]
   13668:	bl	17f3c <__assert_fail@plt+0x534c>
   1366c:	b	136b0 <__assert_fail@plt+0xac0>
   13670:	ldr	r1, [r8, #28]
   13674:	ldr	r0, [r8, #32]
   13678:	b	136a8 <__assert_fail@plt+0xab8>
   1367c:	ldr	r0, [r8, #24]
   13680:	ldr	r2, [r7, #52]	; 0x34
   13684:	sub	r1, fp, #136	; 0x88
   13688:	blx	r2
   1368c:	cmp	r0, #0
   13690:	beq	136b0 <__assert_fail@plt+0xac0>
   13694:	ldr	r0, [r9]
   13698:	cmp	r0, #40	; 0x28
   1369c:	bne	136b0 <__assert_fail@plt+0xac0>
   136a0:	ldr	r1, [r8, #28]
   136a4:	mov	r0, #40	; 0x28
   136a8:	bl	17f3c <__assert_fail@plt+0x534c>
   136ac:	b	13a54 <__assert_fail@plt+0xe64>
   136b0:	ldrh	r1, [r8, #56]	; 0x38
   136b4:	bic	r0, r1, #1
   136b8:	cmp	r0, #10
   136bc:	bne	136e4 <__assert_fail@plt+0xaf4>
   136c0:	ldrb	r0, [sl, #4]
   136c4:	cmp	r0, #0
   136c8:	bne	13bd0 <__assert_fail@plt+0xfe0>
   136cc:	ldr	r0, [sl, #8]
   136d0:	cmp	r1, #11
   136d4:	cmpne	r0, #0
   136d8:	bne	13be8 <__assert_fail@plt+0xff8>
   136dc:	str	r0, [fp, #-136]	; 0xffffff78
   136e0:	b	137d0 <__assert_fail@plt+0xbe0>
   136e4:	movw	r0, #257	; 0x101
   136e8:	add	r1, r8, #64	; 0x40
   136ec:	mov	r2, #104	; 0x68
   136f0:	strh	r0, [sl, #4]
   136f4:	add	r0, sp, #56	; 0x38
   136f8:	bl	125f0 <memcpy@plt>
   136fc:	ldr	r0, [sp, #72]	; 0x48
   13700:	cmp	r0, #0
   13704:	str	r0, [sl, #8]
   13708:	str	r0, [fp, #-136]	; 0xffffff78
   1370c:	beq	1378c <__assert_fail@plt+0xb9c>
   13710:	ldr	r0, [r8, #48]	; 0x30
   13714:	str	r0, [sl]
   13718:	b	137e0 <__assert_fail@plt+0xbf0>
   1371c:	movw	r1, #55248	; 0xd7d0
   13720:	mov	r0, #0
   13724:	mov	r2, #5
   13728:	movt	r1, #3
   1372c:	bl	12674 <dcgettext@plt>
   13730:	ldr	r1, [r8, #28]
   13734:	mov	r4, r0
   13738:	mov	r0, #0
   1373c:	bl	18f7c <__assert_fail@plt+0x638c>
   13740:	mov	r9, r0
   13744:	ldr	r0, [r8]
   13748:	ldr	r1, [r7, #72]	; 0x48
   1374c:	ldr	r5, [r0, #40]	; 0x28
   13750:	cmp	r5, #0
   13754:	beq	13a10 <__assert_fail@plt+0xe20>
   13758:	mov	r6, r4
   1375c:	ldr	r4, [r0, #28]
   13760:	mov	r0, #0
   13764:	ldrb	r7, [r4, r5]
   13768:	strb	r0, [r4, r5]
   1376c:	mov	r0, #1
   13770:	mov	r2, r4
   13774:	bl	294c0 <__assert_fail@plt+0x168d0>
   13778:	strb	r7, [r4, r5]
   1377c:	movw	r7, #20108	; 0x4e8c
   13780:	mov	r4, r6
   13784:	movt	r7, #5
   13788:	b	13a20 <__assert_fail@plt+0xe30>
   1378c:	movw	r1, #54876	; 0xd65c
   13790:	mov	r0, #0
   13794:	mov	r2, #5
   13798:	movt	r1, #3
   1379c:	bl	12674 <dcgettext@plt>
   137a0:	ldr	r1, [r7, #72]	; 0x48
   137a4:	ldr	r2, [r8, #28]
   137a8:	mov	r4, r0
   137ac:	mov	r0, #0
   137b0:	bl	294c0 <__assert_fail@plt+0x168d0>
   137b4:	mov	r3, r0
   137b8:	mov	r2, r4
   137bc:	mov	r0, #0
   137c0:	mov	r1, #0
   137c4:	mov	r4, #0
   137c8:	bl	127b8 <error@plt>
   137cc:	ldr	r0, [fp, #-136]	; 0xffffff78
   137d0:	ldr	r1, [r8, #48]	; 0x30
   137d4:	cmp	r0, #0
   137d8:	str	r1, [sl]
   137dc:	beq	13838 <__assert_fail@plt+0xc48>
   137e0:	ldr	r1, [r8, #28]
   137e4:	add	r2, r8, #168	; 0xa8
   137e8:	sub	r0, fp, #136	; 0x88
   137ec:	add	r3, sp, #56	; 0x38
   137f0:	str	r4, [sp]
   137f4:	bl	18778 <__assert_fail@plt+0x5b88>
   137f8:	cmp	r0, #0
   137fc:	beq	13a54 <__assert_fail@plt+0xe64>
   13800:	ldr	r1, [fp, #-136]	; 0xffffff78
   13804:	ldrh	r0, [r8, #56]	; 0x38
   13808:	and	r1, r1, #61440	; 0xf000
   1380c:	cmp	r1, #16384	; 0x4000
   13810:	bne	1383c <__assert_fail@plt+0xc4c>
   13814:	mov	r4, #1
   13818:	cmp	r0, #11
   1381c:	bne	13858 <__assert_fail@plt+0xc68>
   13820:	mov	r0, r6
   13824:	mov	r1, r8
   13828:	mov	r2, #1
   1382c:	bl	2da30 <__assert_fail@plt+0x1ae40>
   13830:	mov	r4, #0
   13834:	b	13a54 <__assert_fail@plt+0xe64>
   13838:	ldrh	r0, [r8, #56]	; 0x38
   1383c:	cmp	r0, #6
   13840:	bhi	13a70 <__assert_fail@plt+0xe80>
   13844:	mov	r1, #1
   13848:	mov	r2, #70	; 0x46
   1384c:	mov	r4, #1
   13850:	tst	r2, r1, lsl r0
   13854:	moveq	r4, #0
   13858:	ldr	r2, [r7, #4]
   1385c:	mov	r1, #0
   13860:	cmp	r2, #0
   13864:	bmi	1389c <__assert_fail@plt+0xcac>
   13868:	ldr	r3, [r8, #48]	; 0x30
   1386c:	cmp	r3, r2
   13870:	blt	1389c <__assert_fail@plt+0xcac>
   13874:	mov	r0, r6
   13878:	mov	r1, r8
   1387c:	mov	r2, #4
   13880:	bl	2da30 <__assert_fail@plt+0x1ae40>
   13884:	ldr	r0, [r7, #4]
   13888:	ldr	r1, [r8, #48]	; 0x30
   1388c:	cmp	r1, r0
   13890:	ldrh	r0, [r8, #56]	; 0x38
   13894:	mov	r1, #0
   13898:	movwgt	r1, #1
   1389c:	ldrb	r3, [r7]
   138a0:	subs	r2, r0, #6
   138a4:	sub	r0, r0, #1
   138a8:	mov	r9, #1
   138ac:	clz	r0, r0
   138b0:	movwne	r2, #1
   138b4:	lsr	r0, r0, #5
   138b8:	clz	r3, r3
   138bc:	lsr	r3, r3, #5
   138c0:	orr	r2, r2, r3
   138c4:	and	r0, r0, r3
   138c8:	eor	r0, r0, r2
   138cc:	cmp	r0, #1
   138d0:	bne	138e8 <__assert_fail@plt+0xcf8>
   138d4:	ldr	r0, [r7, #8]
   138d8:	ldr	r2, [r8, #48]	; 0x30
   138dc:	cmp	r2, r0
   138e0:	movwlt	r1, #1
   138e4:	mov	r9, r1
   138e8:	ldrb	r0, [r7, #44]	; 0x2c
   138ec:	tst	r0, #4
   138f0:	bne	13a78 <__assert_fail@plt+0xe88>
   138f4:	ldr	r6, [sp, #32]
   138f8:	cmp	r9, #0
   138fc:	bne	13954 <__assert_fail@plt+0xd64>
   13900:	ldrh	r0, [r8, #56]	; 0x38
   13904:	orr	r0, r0, #1
   13908:	subs	r0, r0, #11
   1390c:	movwne	r0, #1
   13910:	strb	r0, [sl, #4]
   13914:	ldr	r0, [r8, #24]
   13918:	ldr	r1, [r6, #32]
   1391c:	str	r0, [sl, #12]
   13920:	str	r1, [sl, #16]
   13924:	bl	15d40 <__assert_fail@plt+0x3150>
   13928:	mov	r2, r0
   1392c:	ldr	r0, [r8, #28]
   13930:	add	r1, sp, #56	; 0x38
   13934:	bl	18e28 <__assert_fail@plt+0x6238>
   13938:	ldrb	r0, [sl, #24]
   1393c:	cmp	r0, #0
   13940:	beq	13954 <__assert_fail@plt+0xd64>
   13944:	mov	r0, r6
   13948:	mov	r1, r8
   1394c:	mov	r2, #4
   13950:	bl	2da30 <__assert_fail@plt+0x1ae40>
   13954:	ldrh	r0, [r8, #56]	; 0x38
   13958:	ldr	r9, [sp, #36]	; 0x24
   1395c:	mov	r4, #0
   13960:	cmp	r0, #6
   13964:	strbeq	r4, [sl, #24]
   13968:	b	13a54 <__assert_fail@plt+0xe64>
   1396c:	movw	r0, #17768	; 0x4568
   13970:	ldr	r2, [r8, #28]
   13974:	ldr	r1, [r7, #72]	; 0x48
   13978:	movt	r0, #5
   1397c:	ldr	r0, [r0]
   13980:	str	r0, [sp, #28]
   13984:	mov	r0, #0
   13988:	bl	294c0 <__assert_fail@plt+0x168d0>
   1398c:	str	r0, [sp, #24]
   13990:	ldrh	r0, [r8, #56]	; 0x38
   13994:	bl	13c20 <__assert_fail@plt+0x1030>
   13998:	str	r0, [sp, #20]
   1399c:	movw	r0, #17072	; 0x42b0
   139a0:	ldr	r1, [r7, #72]	; 0x48
   139a4:	ldr	r2, [r8, #28]
   139a8:	ldr	r4, [r8, #48]	; 0x30
   139ac:	movt	r0, #5
   139b0:	ldr	r9, [r0]
   139b4:	mov	r0, #1
   139b8:	bl	294c0 <__assert_fail@plt+0x168d0>
   139bc:	ldr	r1, [r7, #72]	; 0x48
   139c0:	ldr	r2, [r8, #24]
   139c4:	mov	r5, r0
   139c8:	mov	r0, #2
   139cc:	bl	294c0 <__assert_fail@plt+0x168d0>
   139d0:	str	r0, [sp, #12]
   139d4:	ldr	r0, [sp, #28]
   139d8:	ldr	r2, [sp, #24]
   139dc:	ldr	r3, [sp, #20]
   139e0:	movw	r1, #54670	; 0xd58e
   139e4:	str	r9, [sp, #4]
   139e8:	ldr	r6, [sp, #32]
   139ec:	ldr	r9, [sp, #36]	; 0x24
   139f0:	str	r5, [sp, #8]
   139f4:	movw	r5, #17064	; 0x42a8
   139f8:	str	r4, [sp]
   139fc:	mov	r4, #0
   13a00:	movt	r1, #3
   13a04:	movt	r5, #5
   13a08:	bl	128fc <fprintf@plt>
   13a0c:	b	13498 <__assert_fail@plt+0x8a8>
   13a10:	movw	r2, #61759	; 0xf13f
   13a14:	mov	r0, #1
   13a18:	movt	r2, #3
   13a1c:	bl	294c0 <__assert_fail@plt+0x168d0>
   13a20:	str	r0, [sp]
   13a24:	mov	r0, #0
   13a28:	mov	r1, #0
   13a2c:	mov	r2, r4
   13a30:	mov	r3, r9
   13a34:	bl	127b8 <error@plt>
   13a38:	ldr	r9, [sp, #36]	; 0x24
   13a3c:	ldr	r6, [sp, #32]
   13a40:	movw	r5, #17064	; 0x42a8
   13a44:	movt	r5, #5
   13a48:	mov	r0, #1
   13a4c:	mov	r4, #0
   13a50:	str	r0, [sl, #28]
   13a54:	mov	r0, r6
   13a58:	str	r4, [r9]
   13a5c:	bl	2c658 <__assert_fail@plt+0x19a68>
   13a60:	mov	r8, r0
   13a64:	cmp	r0, #0
   13a68:	bne	13448 <__assert_fail@plt+0x858>
   13a6c:	b	13ad8 <__assert_fail@plt+0xee8>
   13a70:	mov	r4, #0
   13a74:	b	13858 <__assert_fail@plt+0xc68>
   13a78:	movw	r0, #17768	; 0x4568
   13a7c:	ldr	r2, [r8, #28]
   13a80:	ldr	r1, [r7, #72]	; 0x48
   13a84:	movt	r0, #5
   13a88:	ldr	r6, [r0]
   13a8c:	mov	r0, #0
   13a90:	bl	294c0 <__assert_fail@plt+0x168d0>
   13a94:	mov	r5, r0
   13a98:	ldrh	r0, [r8, #56]	; 0x38
   13a9c:	bl	13c20 <__assert_fail@plt+0x1030>
   13aa0:	ldrb	r1, [sl, #5]
   13aa4:	mov	r3, r0
   13aa8:	ldrb	r0, [sl, #4]
   13aac:	stm	sp, {r4, r9}
   13ab0:	mov	r2, r5
   13ab4:	movw	r5, #17064	; 0x42a8
   13ab8:	movt	r5, #5
   13abc:	str	r1, [sp, #12]
   13ac0:	movw	r1, #54919	; 0xd687
   13ac4:	str	r0, [sp, #8]
   13ac8:	mov	r0, r6
   13acc:	movt	r1, #3
   13ad0:	bl	128fc <fprintf@plt>
   13ad4:	b	138f4 <__assert_fail@plt+0xd04>
   13ad8:	ldr	r7, [r9]
   13adc:	cmp	r7, #0
   13ae0:	beq	13b50 <__assert_fail@plt+0xf60>
   13ae4:	ldr	r1, [sp, #16]
   13ae8:	mov	r0, #0
   13aec:	mov	r4, #0
   13af0:	bl	18f7c <__assert_fail@plt+0x638c>
   13af4:	movw	r2, #54474	; 0xd4ca
   13af8:	mov	r3, r0
   13afc:	mov	r0, #0
   13b00:	mov	r1, r7
   13b04:	movt	r2, #3
   13b08:	b	13b90 <__assert_fail@plt+0xfa0>
   13b0c:	movw	r1, #54457	; 0xd4b9
   13b10:	ldr	r4, [r9]
   13b14:	mov	r0, #0
   13b18:	mov	r2, #5
   13b1c:	movt	r1, #3
   13b20:	bl	12674 <dcgettext@plt>
   13b24:	mov	r5, r0
   13b28:	mov	r0, #0
   13b2c:	mov	r1, r7
   13b30:	bl	18f7c <__assert_fail@plt+0x638c>
   13b34:	mov	r3, r0
   13b38:	mov	r0, #0
   13b3c:	mov	r1, r4
   13b40:	mov	r2, r5
   13b44:	bl	127b8 <error@plt>
   13b48:	mov	r4, #1
   13b4c:	b	13b94 <__assert_fail@plt+0xfa4>
   13b50:	mov	r0, r6
   13b54:	bl	2c4d0 <__assert_fail@plt+0x198e0>
   13b58:	ldr	r7, [sp, #16]
   13b5c:	cmp	r0, #0
   13b60:	beq	13ba8 <__assert_fail@plt+0xfb8>
   13b64:	movw	r1, #54532	; 0xd504
   13b68:	ldr	r5, [r9]
   13b6c:	mov	r0, #0
   13b70:	mov	r2, #5
   13b74:	mov	r4, #0
   13b78:	movt	r1, #3
   13b7c:	bl	12674 <dcgettext@plt>
   13b80:	mov	r2, r0
   13b84:	mov	r0, #0
   13b88:	mov	r1, r5
   13b8c:	mov	r3, r7
   13b90:	bl	127b8 <error@plt>
   13b94:	mov	r0, #1
   13b98:	str	r0, [sl, #28]
   13b9c:	mov	r0, r4
   13ba0:	sub	sp, fp, #28
   13ba4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13ba8:	mov	r4, #1
   13bac:	b	13b9c <__assert_fail@plt+0xfac>
   13bb0:	movw	r0, #54587	; 0xd53b
   13bb4:	movw	r1, #54183	; 0xd3a7
   13bb8:	movw	r3, #54621	; 0xd55d
   13bbc:	mov	r2, #107	; 0x6b
   13bc0:	movt	r0, #3
   13bc4:	movt	r1, #3
   13bc8:	movt	r3, #3
   13bcc:	bl	12bf0 <__assert_fail@plt>
   13bd0:	movw	r0, #54774	; 0xd5f6
   13bd4:	movw	r1, #54183	; 0xd3a7
   13bd8:	movw	r3, #54791	; 0xd607
   13bdc:	mov	r2, #380	; 0x17c
   13be0:	movt	r0, #3
   13be4:	b	13bfc <__assert_fail@plt+0x100c>
   13be8:	movw	r0, #54831	; 0xd62f
   13bec:	movw	r1, #54183	; 0xd3a7
   13bf0:	movw	r3, #54791	; 0xd607
   13bf4:	movw	r2, #381	; 0x17d
   13bf8:	movt	r0, #3
   13bfc:	movt	r1, #3
   13c00:	movt	r3, #3
   13c04:	bl	12bf0 <__assert_fail@plt>
   13c08:	movw	r0, #54642	; 0xd572
   13c0c:	movw	r1, #54183	; 0xd3a7
   13c10:	movw	r3, #54621	; 0xd55d
   13c14:	mov	r2, #125	; 0x7d
   13c18:	movt	r0, #3
   13c1c:	b	13bc4 <__assert_fail@plt+0xfd4>
   13c20:	push	{r4, sl, fp, lr}
   13c24:	add	fp, sp, #8
   13c28:	mov	r2, r0
   13c2c:	sub	r0, r0, #1
   13c30:	cmp	r0, #14
   13c34:	bcs	13c48 <__assert_fail@plt+0x1058>
   13c38:	movw	r1, #55324	; 0xd81c
   13c3c:	movt	r1, #3
   13c40:	ldr	r0, [r1, r0, lsl #2]
   13c44:	pop	{r4, sl, fp, pc}
   13c48:	movw	r4, #17785	; 0x4579
   13c4c:	movw	r1, #55122	; 0xd752
   13c50:	movt	r4, #5
   13c54:	movt	r1, #3
   13c58:	mov	r0, r4
   13c5c:	bl	12a94 <sprintf@plt>
   13c60:	mov	r0, r4
   13c64:	pop	{r4, sl, fp, pc}
   13c68:	ldrd	r0, [r1, #72]	; 0x48
   13c6c:	mov	r3, #60	; 0x3c
   13c70:	b	13c78 <__assert_fail@plt+0x1088>
   13c74:	nop	{0}
   13c78:	push	{r4, r5, r7, sl, fp, lr}
   13c7c:	add	fp, sp, #16
   13c80:	mov	r4, r1
   13c84:	ldr	r1, [r2, #44]	; 0x2c
   13c88:	cmp	r1, #2
   13c8c:	beq	13cd4 <__assert_fail@plt+0x10e4>
   13c90:	cmp	r1, #1
   13c94:	beq	13cc0 <__assert_fail@plt+0x10d0>
   13c98:	cmp	r1, #0
   13c9c:	bne	13d2c <__assert_fail@plt+0x113c>
   13ca0:	ldrd	r2, [r2, #48]	; 0x30
   13ca4:	mov	r1, r4
   13ca8:	bl	13e00 <__assert_fail@plt+0x1210>
   13cac:	mov	r1, r0
   13cb0:	mov	r0, #0
   13cb4:	cmp	r1, #0
   13cb8:	movwgt	r0, #1
   13cbc:	pop	{r4, r5, r7, sl, fp, pc}
   13cc0:	ldrd	r2, [r2, #48]	; 0x30
   13cc4:	mov	r1, r4
   13cc8:	bl	13e00 <__assert_fail@plt+0x1210>
   13ccc:	lsr	r0, r0, #31
   13cd0:	pop	{r4, r5, r7, sl, fp, pc}
   13cd4:	ldr	r7, [r2, #52]	; 0x34
   13cd8:	ldr	r2, [r2, #48]	; 0x30
   13cdc:	mov	r5, r3
   13ce0:	mov	r1, r2
   13ce4:	bl	12998 <difftime@plt>
   13ce8:	sub	r0, r4, r7
   13cec:	vldr	d16, [pc, #92]	; 13d50 <__assert_fail@plt+0x1160>
   13cf0:	vmov	s4, r5
   13cf4:	mov	r1, #0
   13cf8:	vmov	s2, r0
   13cfc:	mov	r0, #0
   13d00:	vcvt.f64.s32	d17, s2
   13d04:	vcvt.f64.s32	d18, s4
   13d08:	vmla.f64	d0, d17, d16
   13d0c:	vcmpe.f64	d0, d18
   13d10:	vmrs	APSR_nzcv, fpscr
   13d14:	vcmpe.f64	d0, #0.0
   13d18:	movwls	r1, #1
   13d1c:	vmrs	APSR_nzcv, fpscr
   13d20:	movwgt	r0, #1
   13d24:	and	r0, r0, r1
   13d28:	pop	{r4, r5, r7, sl, fp, pc}
   13d2c:	movw	r0, #58985	; 0xe669
   13d30:	movw	r1, #55419	; 0xd87b
   13d34:	movw	r3, #56398	; 0xdc4e
   13d38:	mov	r2, #138	; 0x8a
   13d3c:	movt	r0, #3
   13d40:	movt	r1, #3
   13d44:	movt	r3, #3
   13d48:	bl	12bf0 <__assert_fail@plt>
   13d4c:	nop	{0}
   13d50:	stmda	r6!, {r0, r2, r4, r7, r9, sl, ip, lr, pc}
   13d54:	cdpcc	14, 1, cr2, cr1, cr11, {0}
   13d58:	push	{r4, r5, r6, sl, fp, lr}
   13d5c:	add	fp, sp, #16
   13d60:	mov	r5, r2
   13d64:	ldr	r2, [r2, #156]	; 0x9c
   13d68:	mov	r4, r1
   13d6c:	mov	r6, r0
   13d70:	cmp	r2, #0
   13d74:	beq	13d8c <__assert_fail@plt+0x119c>
   13d78:	mov	r0, r6
   13d7c:	mov	r1, r4
   13d80:	bl	18e28 <__assert_fail@plt+0x6238>
   13d84:	cmp	r0, #0
   13d88:	beq	13da0 <__assert_fail@plt+0x11b0>
   13d8c:	ldr	r2, [r5, #160]	; 0xa0
   13d90:	mov	r0, r6
   13d94:	mov	r1, r4
   13d98:	pop	{r4, r5, r6, sl, fp, lr}
   13d9c:	b	18e28 <__assert_fail@plt+0x6238>
   13da0:	mov	r0, #0
   13da4:	pop	{r4, r5, r6, sl, fp, pc}
   13da8:	push	{fp, lr}
   13dac:	mov	fp, sp
   13db0:	ldr	r0, [r2, #44]	; 0x2c
   13db4:	cmp	r0, #0
   13db8:	bne	13ddc <__assert_fail@plt+0x11ec>
   13dbc:	ldrd	r0, [r1, #72]	; 0x48
   13dc0:	ldrd	r2, [r2, #48]	; 0x30
   13dc4:	bl	13e00 <__assert_fail@plt+0x1210>
   13dc8:	cmp	r0, #0
   13dcc:	mov	r1, #0
   13dd0:	movwgt	r1, #1
   13dd4:	mov	r0, r1
   13dd8:	pop	{fp, pc}
   13ddc:	movw	r0, #55380	; 0xd854
   13de0:	movw	r1, #55419	; 0xd87b
   13de4:	movw	r3, #55426	; 0xd882
   13de8:	mov	r2, #166	; 0xa6
   13dec:	movt	r0, #3
   13df0:	movt	r1, #3
   13df4:	movt	r3, #3
   13df8:	bl	12bf0 <__assert_fail@plt>
   13dfc:	nop	{0}
   13e00:	push	{r4, r5, fp, lr}
   13e04:	add	fp, sp, #8
   13e08:	mov	r4, r3
   13e0c:	mov	r5, r1
   13e10:	cmp	r0, r2
   13e14:	moveq	r1, #0
   13e18:	cmpeq	r5, r4
   13e1c:	beq	13e4c <__assert_fail@plt+0x125c>
   13e20:	mov	r1, r2
   13e24:	bl	12998 <difftime@plt>
   13e28:	sub	r0, r5, r4
   13e2c:	vldr	d16, [pc, #36]	; 13e58 <__assert_fail@plt+0x1268>
   13e30:	mov	r1, #1
   13e34:	vmov	s2, r0
   13e38:	vcvt.f64.s32	d17, s2
   13e3c:	vmla.f64	d0, d17, d16
   13e40:	vcmpe.f64	d0, #0.0
   13e44:	vmrs	APSR_nzcv, fpscr
   13e48:	mvnmi	r1, #0
   13e4c:	mov	r0, r1
   13e50:	pop	{r4, r5, fp, pc}
   13e54:	nop	{0}
   13e58:	stmda	r6!, {r0, r2, r4, r7, r9, sl, ip, lr, pc}
   13e5c:	cdpcc	14, 1, cr2, cr1, cr11, {0}
   13e60:	ldrd	r0, [r1, #72]	; 0x48
   13e64:	movw	r3, #20864	; 0x5180
   13e68:	movt	r3, #1
   13e6c:	b	13c78 <__assert_fail@plt+0x1088>
   13e70:	mov	r0, #1
   13e74:	bx	lr
   13e78:	ldrd	r0, [r1, #88]	; 0x58
   13e7c:	mov	r3, #60	; 0x3c
   13e80:	b	13c78 <__assert_fail@plt+0x1088>
   13e84:	push	{fp, lr}
   13e88:	mov	fp, sp
   13e8c:	ldr	r0, [r2, #44]	; 0x2c
   13e90:	cmp	r0, #0
   13e94:	bne	13eb8 <__assert_fail@plt+0x12c8>
   13e98:	ldrd	r0, [r1, #88]	; 0x58
   13e9c:	ldrd	r2, [r2, #48]	; 0x30
   13ea0:	bl	13e00 <__assert_fail@plt+0x1210>
   13ea4:	cmp	r0, #0
   13ea8:	mov	r1, #0
   13eac:	movwgt	r1, #1
   13eb0:	mov	r0, r1
   13eb4:	pop	{fp, pc}
   13eb8:	movw	r0, #55380	; 0xd854
   13ebc:	movw	r1, #55419	; 0xd87b
   13ec0:	movw	r3, #55493	; 0xd8c5
   13ec4:	mov	r2, #199	; 0xc7
   13ec8:	movt	r0, #3
   13ecc:	movt	r1, #3
   13ed0:	movt	r3, #3
   13ed4:	bl	12bf0 <__assert_fail@plt>
   13ed8:	push	{r4, r5, r6, sl, fp, lr}
   13edc:	add	fp, sp, #16
   13ee0:	mov	r5, r2
   13ee4:	ldr	r2, [r2, #156]	; 0x9c
   13ee8:	mov	r4, r1
   13eec:	mov	r6, r0
   13ef0:	cmp	r2, #0
   13ef4:	beq	13f04 <__assert_fail@plt+0x1314>
   13ef8:	mov	r0, r6
   13efc:	mov	r1, r4
   13f00:	bl	18e28 <__assert_fail@plt+0x6238>
   13f04:	ldr	r2, [r5, #160]	; 0xa0
   13f08:	mov	r0, r6
   13f0c:	mov	r1, r4
   13f10:	pop	{r4, r5, r6, sl, fp, lr}
   13f14:	b	18e28 <__assert_fail@plt+0x6238>
   13f18:	ldrd	r0, [r1, #88]	; 0x58
   13f1c:	movw	r3, #20864	; 0x5180
   13f20:	movt	r3, #1
   13f24:	b	13c78 <__assert_fail@plt+0x1088>
   13f28:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   13f2c:	add	fp, sp, #24
   13f30:	movw	r9, #20064	; 0x4e60
   13f34:	mov	r5, r1
   13f38:	movw	r1, #58388	; 0xe414
   13f3c:	mov	r8, r0
   13f40:	movt	r9, #5
   13f44:	movt	r1, #3
   13f48:	ldr	r6, [r9, #12]
   13f4c:	mov	r0, r6
   13f50:	bl	124f4 <strcmp@plt>
   13f54:	mov	r4, #1
   13f58:	cmp	r0, #0
   13f5c:	beq	14028 <__assert_fail@plt+0x1438>
   13f60:	ldrb	r0, [r9, #4]
   13f64:	cmp	r0, #0
   13f68:	beq	13f88 <__assert_fail@plt+0x1398>
   13f6c:	ldr	r0, [r5, #16]
   13f70:	and	r0, r0, #61440	; 0xf000
   13f74:	sub	r0, r0, #16384	; 0x4000
   13f78:	clz	r0, r0
   13f7c:	lsr	r0, r0, #5
   13f80:	lsl	r5, r0, #9
   13f84:	b	13f8c <__assert_fail@plt+0x139c>
   13f88:	mov	r5, #0
   13f8c:	ldr	r0, [r9, #16]
   13f90:	mov	r1, r6
   13f94:	mov	r2, r5
   13f98:	bl	12560 <unlinkat@plt>
   13f9c:	cmp	r0, #0
   13fa0:	beq	14028 <__assert_fail@plt+0x1438>
   13fa4:	bl	12908 <__errno_location@plt>
   13fa8:	ldr	r6, [r0]
   13fac:	mov	r7, r0
   13fb0:	cmp	r6, #2
   13fb4:	bne	13fd8 <__assert_fail@plt+0x13e8>
   13fb8:	movw	r0, #20108	; 0x4e8c
   13fbc:	movt	r0, #5
   13fc0:	ldrb	r0, [r0, #14]
   13fc4:	cmp	r0, #0
   13fc8:	beq	13fd8 <__assert_fail@plt+0x13e8>
   13fcc:	mov	r0, #0
   13fd0:	str	r0, [r7]
   13fd4:	b	14028 <__assert_fail@plt+0x1438>
   13fd8:	cmp	r5, #0
   13fdc:	cmpeq	r6, #21
   13fe0:	beq	14030 <__assert_fail@plt+0x1440>
   13fe4:	movw	r1, #55560	; 0xd908
   13fe8:	mov	r0, #0
   13fec:	mov	r2, #5
   13ff0:	mov	r4, #0
   13ff4:	movt	r1, #3
   13ff8:	bl	12674 <dcgettext@plt>
   13ffc:	mov	r5, r0
   14000:	mov	r0, #0
   14004:	mov	r1, r8
   14008:	bl	18f7c <__assert_fail@plt+0x638c>
   1400c:	mov	r3, r0
   14010:	mov	r0, #0
   14014:	mov	r1, r6
   14018:	mov	r2, r5
   1401c:	bl	127b8 <error@plt>
   14020:	mov	r0, #1
   14024:	str	r0, [r9, #28]
   14028:	mov	r0, r4
   1402c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   14030:	ldr	r1, [r9, #12]
   14034:	ldr	r0, [r9, #16]
   14038:	mov	r2, #512	; 0x200
   1403c:	bl	12560 <unlinkat@plt>
   14040:	cmp	r0, #0
   14044:	beq	14028 <__assert_fail@plt+0x1438>
   14048:	ldr	r6, [r7]
   1404c:	b	13fe4 <__assert_fail@plt+0x13f4>
   14050:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   14054:	add	fp, sp, #24
   14058:	mov	r8, r0
   1405c:	ldr	r0, [r1, #16]
   14060:	and	r0, r0, #61440	; 0xf000
   14064:	cmp	r0, #32768	; 0x8000
   14068:	beq	14160 <__assert_fail@plt+0x1570>
   1406c:	mov	r4, #0
   14070:	cmp	r0, #16384	; 0x4000
   14074:	bne	14200 <__assert_fail@plt+0x1610>
   14078:	bl	12908 <__errno_location@plt>
   1407c:	movw	r9, #20064	; 0x4e60
   14080:	mov	r4, #0
   14084:	mov	r6, r0
   14088:	movw	r2, #18688	; 0x4900
   1408c:	movt	r9, #5
   14090:	str	r4, [r0]
   14094:	movt	r2, #10
   14098:	ldr	r1, [r9, #12]
   1409c:	ldr	r0, [r9, #16]
   140a0:	bl	249f4 <__assert_fail@plt+0x11e04>
   140a4:	cmn	r0, #1
   140a8:	ble	14174 <__assert_fail@plt+0x1584>
   140ac:	mov	r5, r0
   140b0:	bl	12aac <fdopendir@plt>
   140b4:	cmp	r0, #0
   140b8:	beq	1417c <__assert_fail@plt+0x158c>
   140bc:	mov	r7, r0
   140c0:	mov	r0, #0
   140c4:	str	r0, [r6]
   140c8:	mov	r0, r7
   140cc:	bl	12aa0 <readdir64@plt>
   140d0:	cmp	r0, #0
   140d4:	beq	14114 <__assert_fail@plt+0x1524>
   140d8:	mov	r4, #0
   140dc:	ldrb	r1, [r0, #19]
   140e0:	cmp	r1, #46	; 0x2e
   140e4:	bne	14118 <__assert_fail@plt+0x1528>
   140e8:	ldrb	r1, [r0, #20]
   140ec:	cmp	r1, #0
   140f0:	beq	14104 <__assert_fail@plt+0x1514>
   140f4:	cmp	r1, #46	; 0x2e
   140f8:	ldrbeq	r0, [r0, #21]
   140fc:	cmpeq	r0, #0
   14100:	bne	14118 <__assert_fail@plt+0x1528>
   14104:	mov	r0, r7
   14108:	bl	12aa0 <readdir64@plt>
   1410c:	cmp	r0, #0
   14110:	bne	140dc <__assert_fail@plt+0x14ec>
   14114:	mov	r4, #1
   14118:	ldr	r5, [r6]
   1411c:	cmp	r5, #0
   14120:	beq	141bc <__assert_fail@plt+0x15cc>
   14124:	mov	r0, #0
   14128:	mov	r1, r8
   1412c:	mov	r4, #0
   14130:	bl	18f7c <__assert_fail@plt+0x638c>
   14134:	movw	r2, #13527	; 0x34d7
   14138:	mov	r3, r0
   1413c:	mov	r0, #0
   14140:	mov	r1, r5
   14144:	movt	r2, #4
   14148:	bl	127b8 <error@plt>
   1414c:	mov	r0, #1
   14150:	str	r0, [r9, #28]
   14154:	mov	r0, r7
   14158:	bl	12bc0 <closedir@plt>
   1415c:	b	14200 <__assert_fail@plt+0x1610>
   14160:	ldrd	r0, [r1, #48]	; 0x30
   14164:	orr	r0, r0, r1
   14168:	clz	r0, r0
   1416c:	lsr	r4, r0, #5
   14170:	b	14200 <__assert_fail@plt+0x1610>
   14174:	ldr	r5, [r6]
   14178:	b	141d4 <__assert_fail@plt+0x15e4>
   1417c:	ldr	r6, [r6]
   14180:	mov	r0, #0
   14184:	mov	r1, r8
   14188:	mov	r4, #0
   1418c:	bl	18f7c <__assert_fail@plt+0x638c>
   14190:	movw	r2, #13527	; 0x34d7
   14194:	mov	r3, r0
   14198:	mov	r0, #0
   1419c:	mov	r1, r6
   141a0:	movt	r2, #4
   141a4:	bl	127b8 <error@plt>
   141a8:	mov	r0, #1
   141ac:	str	r0, [r9, #28]
   141b0:	mov	r0, r5
   141b4:	bl	12ba8 <close@plt>
   141b8:	b	14200 <__assert_fail@plt+0x1610>
   141bc:	mov	r0, r7
   141c0:	bl	12bc0 <closedir@plt>
   141c4:	cmp	r0, #0
   141c8:	beq	14200 <__assert_fail@plt+0x1610>
   141cc:	ldr	r5, [r6]
   141d0:	mov	r4, #0
   141d4:	mov	r0, #0
   141d8:	mov	r1, r8
   141dc:	bl	18f7c <__assert_fail@plt+0x638c>
   141e0:	movw	r2, #13527	; 0x34d7
   141e4:	mov	r3, r0
   141e8:	mov	r0, #0
   141ec:	mov	r1, r5
   141f0:	movt	r2, #4
   141f4:	bl	127b8 <error@plt>
   141f8:	mov	r0, #1
   141fc:	str	r0, [r9, #28]
   14200:	mov	r0, r4
   14204:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   14208:	b	15510 <__assert_fail@plt+0x2920>
   1420c:	movw	r0, #20064	; 0x4e60
   14210:	movt	r0, #5
   14214:	ldr	r0, [r0, #12]
   14218:	b	15510 <__assert_fail@plt+0x2920>
   1421c:	mov	r0, #0
   14220:	bx	lr
   14224:	push	{r4, r5, fp, lr}
   14228:	add	fp, sp, #8
   1422c:	sub	sp, sp, #16
   14230:	movw	r3, #20108	; 0x4e8c
   14234:	mov	ip, r1
   14238:	movw	r1, #20064	; 0x4e60
   1423c:	ldrb	r5, [r2, #32]
   14240:	ldr	r2, [r2, #44]	; 0x2c
   14244:	movt	r1, #5
   14248:	movt	r3, #5
   1424c:	ldr	r4, [r3, #20]
   14250:	ldr	lr, [r1, #12]
   14254:	ldr	r3, [r3, #40]	; 0x28
   14258:	ldr	r1, [r1, #16]
   1425c:	str	r4, [sp]
   14260:	stmib	sp, {r3, r5}
   14264:	str	r2, [sp, #12]
   14268:	mov	r2, lr
   1426c:	mov	r3, ip
   14270:	bl	1fd9c <__assert_fail@plt+0xd1ac>
   14274:	mov	r0, #1
   14278:	sub	sp, fp, #8
   1427c:	pop	{r4, r5, fp, pc}
   14280:	push	{fp, lr}
   14284:	mov	fp, sp
   14288:	sub	sp, sp, #8
   1428c:	ldrb	ip, [r2, #52]	; 0x34
   14290:	ldr	r1, [r2, #56]	; 0x38
   14294:	ldr	r2, [r2, #44]	; 0x2c
   14298:	movw	r3, #11436	; 0x2cac
   1429c:	str	r0, [sp]
   142a0:	movt	r3, #4
   142a4:	mov	r0, r2
   142a8:	mov	r2, ip
   142ac:	bl	206a4 <__assert_fail@plt+0xdab4>
   142b0:	mov	r0, #1
   142b4:	mov	sp, fp
   142b8:	pop	{fp, pc}
   142bc:	push	{r4, sl, fp, lr}
   142c0:	add	fp, sp, #8
   142c4:	ldr	r4, [r2, #44]	; 0x2c
   142c8:	mov	r1, r4
   142cc:	bl	12b84 <fputs@plt>
   142d0:	mov	r0, #0
   142d4:	mov	r1, r4
   142d8:	bl	12ac4 <putc@plt>
   142dc:	mov	r0, #1
   142e0:	pop	{r4, sl, fp, pc}
   142e4:	push	{r4, sl, fp, lr}
   142e8:	add	fp, sp, #8
   142ec:	mov	r4, r2
   142f0:	mov	r2, r0
   142f4:	mov	r0, r1
   142f8:	mov	r1, r2
   142fc:	bl	1ab4c <__assert_fail@plt+0x7f5c>
   14300:	ldr	r1, [r4, #40]	; 0x28
   14304:	bl	124f4 <strcmp@plt>
   14308:	clz	r0, r0
   1430c:	lsr	r0, r0, #5
   14310:	pop	{r4, sl, fp, pc}
   14314:	ldr	r0, [r2, #40]	; 0x28
   14318:	cmp	r0, #2
   1431c:	beq	1434c <__assert_fail@plt+0x175c>
   14320:	cmp	r0, #1
   14324:	beq	1436c <__assert_fail@plt+0x177c>
   14328:	cmp	r0, #0
   1432c:	bne	14364 <__assert_fail@plt+0x1774>
   14330:	ldr	r1, [r1, #28]
   14334:	ldrd	r2, [r2, #48]	; 0x30
   14338:	mov	r0, #1
   1433c:	subs	r1, r2, r1
   14340:	sbcs	r1, r3, #0
   14344:	bcs	14364 <__assert_fail@plt+0x1774>
   14348:	bx	lr
   1434c:	ldr	r0, [r1, #28]
   14350:	ldrd	r2, [r2, #48]	; 0x30
   14354:	eor	r0, r2, r0
   14358:	orrs	r0, r0, r3
   1435c:	mov	r0, #1
   14360:	bxeq	lr
   14364:	mov	r0, #0
   14368:	bx	lr
   1436c:	ldrd	r2, [r2, #48]	; 0x30
   14370:	ldr	r1, [r1, #28]
   14374:	mov	r0, #1
   14378:	subs	r1, r1, r2
   1437c:	rscs	r1, r3, #0
   14380:	movcs	r0, #0
   14384:	bx	lr
   14388:	ldr	r0, [r1, #28]
   1438c:	ldr	r1, [r2, #40]	; 0x28
   14390:	sub	r0, r1, r0
   14394:	clz	r0, r0
   14398:	lsr	r0, r0, #5
   1439c:	bx	lr
   143a0:	mov	r3, #1
   143a4:	b	143a8 <__assert_fail@plt+0x17b8>
   143a8:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   143ac:	add	fp, sp, #24
   143b0:	mov	r8, r0
   143b4:	ldr	r0, [r1, #16]
   143b8:	mov	r6, #0
   143bc:	and	r0, r0, #61440	; 0xf000
   143c0:	cmp	r0, #40960	; 0xa000
   143c4:	bne	14438 <__assert_fail@plt+0x1848>
   143c8:	movw	r6, #20064	; 0x4e60
   143cc:	mov	r5, r3
   143d0:	mov	r7, r2
   143d4:	movt	r6, #5
   143d8:	ldr	r1, [r6, #12]
   143dc:	ldr	r0, [r6, #16]
   143e0:	bl	20e40 <__assert_fail@plt+0xe250>
   143e4:	mov	r4, r0
   143e8:	cmp	r0, #0
   143ec:	beq	14414 <__assert_fail@plt+0x1824>
   143f0:	ldr	r0, [r7, #40]	; 0x28
   143f4:	cmp	r5, #0
   143f8:	mov	r1, r4
   143fc:	movwne	r5, #16
   14400:	mov	r2, r5
   14404:	bl	127dc <fnmatch@plt>
   14408:	clz	r0, r0
   1440c:	lsr	r6, r0, #5
   14410:	b	14430 <__assert_fail@plt+0x1840>
   14414:	bl	12908 <__errno_location@plt>
   14418:	ldr	r0, [r0]
   1441c:	mov	r1, r8
   14420:	bl	17f3c <__assert_fail@plt+0x534c>
   14424:	mov	r0, #1
   14428:	str	r0, [r6, #28]
   1442c:	mov	r6, #0
   14430:	mov	r0, r4
   14434:	bl	2bcbc <__assert_fail@plt+0x190cc>
   14438:	mov	r0, r6
   1443c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14440:	ldr	r1, [r2, #40]	; 0x28
   14444:	mov	r2, #16
   14448:	b	1444c <__assert_fail@plt+0x185c>
   1444c:	push	{r4, r5, r6, sl, fp, lr}
   14450:	add	fp, sp, #16
   14454:	mov	r4, r2
   14458:	mov	r5, r1
   1445c:	bl	21388 <__assert_fail@plt+0xe798>
   14460:	mov	r6, r0
   14464:	bl	214a4 <__assert_fail@plt+0xe8b4>
   14468:	mov	r0, r5
   1446c:	mov	r1, r6
   14470:	mov	r2, r4
   14474:	bl	127dc <fnmatch@plt>
   14478:	mov	r4, r0
   1447c:	mov	r0, r6
   14480:	bl	2bcbc <__assert_fail@plt+0x190cc>
   14484:	clz	r0, r4
   14488:	lsr	r0, r0, #5
   1448c:	pop	{r4, r5, r6, sl, fp, pc}
   14490:	push	{r4, r5, fp, lr}
   14494:	add	fp, sp, #8
   14498:	ldr	r0, [r2, #40]	; 0x28
   1449c:	cmp	r0, #2
   144a0:	beq	144d0 <__assert_fail@plt+0x18e0>
   144a4:	cmp	r0, #1
   144a8:	beq	144fc <__assert_fail@plt+0x190c>
   144ac:	cmp	r0, #0
   144b0:	bne	144f4 <__assert_fail@plt+0x1904>
   144b4:	ldrd	r4, [r1, #96]	; 0x60
   144b8:	ldrd	r2, [r2, #48]	; 0x30
   144bc:	mov	r0, #1
   144c0:	subs	r1, r2, r4
   144c4:	sbcs	r1, r3, r5
   144c8:	bcs	144f4 <__assert_fail@plt+0x1904>
   144cc:	pop	{r4, r5, fp, pc}
   144d0:	ldr	r0, [r2, #48]	; 0x30
   144d4:	ldr	r3, [r2, #52]	; 0x34
   144d8:	ldr	r2, [r1, #96]	; 0x60
   144dc:	ldr	r1, [r1, #100]	; 0x64
   144e0:	eor	r1, r1, r3
   144e4:	eor	r0, r2, r0
   144e8:	orrs	r0, r0, r1
   144ec:	mov	r0, #1
   144f0:	popeq	{r4, r5, fp, pc}
   144f4:	mov	r0, #0
   144f8:	pop	{r4, r5, fp, pc}
   144fc:	ldrd	r2, [r2, #48]	; 0x30
   14500:	ldrd	r4, [r1, #96]	; 0x60
   14504:	mov	r0, #1
   14508:	subs	r1, r4, r2
   1450c:	sbcs	r1, r5, r3
   14510:	movcs	r0, #0
   14514:	pop	{r4, r5, fp, pc}
   14518:	push	{fp, lr}
   1451c:	mov	fp, sp
   14520:	mov	r1, r0
   14524:	ldr	r0, [r2, #40]	; 0x28
   14528:	mov	r2, #16
   1452c:	bl	127dc <fnmatch@plt>
   14530:	clz	r0, r0
   14534:	lsr	r0, r0, #5
   14538:	pop	{fp, pc}
   1453c:	ldr	r0, [r2, #40]	; 0x28
   14540:	cmp	r0, #2
   14544:	beq	14574 <__assert_fail@plt+0x1984>
   14548:	cmp	r0, #1
   1454c:	beq	14594 <__assert_fail@plt+0x19a4>
   14550:	cmp	r0, #0
   14554:	bne	1458c <__assert_fail@plt+0x199c>
   14558:	ldr	r1, [r1, #20]
   1455c:	ldrd	r2, [r2, #48]	; 0x30
   14560:	mov	r0, #1
   14564:	subs	r1, r2, r1
   14568:	sbcs	r1, r3, #0
   1456c:	bcs	1458c <__assert_fail@plt+0x199c>
   14570:	bx	lr
   14574:	ldr	r0, [r1, #20]
   14578:	ldrd	r2, [r2, #48]	; 0x30
   1457c:	eor	r0, r2, r0
   14580:	orrs	r0, r0, r3
   14584:	mov	r0, #1
   14588:	bxeq	lr
   1458c:	mov	r0, #0
   14590:	bx	lr
   14594:	ldrd	r2, [r2, #48]	; 0x30
   14598:	ldr	r1, [r1, #20]
   1459c:	mov	r0, #1
   145a0:	subs	r1, r1, r2
   145a4:	rscs	r1, r3, #0
   145a8:	movcs	r0, #0
   145ac:	bx	lr
   145b0:	mov	r3, #0
   145b4:	b	143a8 <__assert_fail@plt+0x17b8>
   145b8:	push	{r4, r5, fp, lr}
   145bc:	add	fp, sp, #8
   145c0:	sub	sp, sp, #16
   145c4:	movw	r3, #20108	; 0x4e8c
   145c8:	mov	ip, r1
   145cc:	movw	r1, #20064	; 0x4e60
   145d0:	ldrb	r5, [r2, #32]
   145d4:	ldr	r2, [r2, #44]	; 0x2c
   145d8:	movt	r1, #5
   145dc:	movt	r3, #5
   145e0:	ldr	r4, [r3, #20]
   145e4:	ldr	lr, [r1, #12]
   145e8:	ldr	r3, [r3, #40]	; 0x28
   145ec:	ldr	r1, [r1, #16]
   145f0:	str	r4, [sp]
   145f4:	stmib	sp, {r3, r5}
   145f8:	str	r2, [sp, #12]
   145fc:	mov	r2, lr
   14600:	mov	r3, ip
   14604:	bl	1fd9c <__assert_fail@plt+0xd1ac>
   14608:	mov	r0, #1
   1460c:	sub	sp, fp, #8
   14610:	pop	{r4, r5, fp, pc}
   14614:	ldrd	r0, [r1, #80]	; 0x50
   14618:	mov	r3, #60	; 0x3c
   1461c:	b	13c78 <__assert_fail@plt+0x1088>
   14620:	ldrd	r0, [r1, #80]	; 0x50
   14624:	movw	r3, #20864	; 0x5180
   14628:	movt	r3, #1
   1462c:	b	13c78 <__assert_fail@plt+0x1088>
   14630:	ldr	r1, [r2, #40]	; 0x28
   14634:	mov	r2, #0
   14638:	b	1444c <__assert_fail@plt+0x185c>
   1463c:	push	{fp, lr}
   14640:	mov	fp, sp
   14644:	ldr	r2, [r2, #160]	; 0xa0
   14648:	bl	18e28 <__assert_fail@plt+0x6238>
   1464c:	eor	r0, r0, #1
   14650:	pop	{fp, pc}
   14654:	push	{fp, lr}
   14658:	mov	fp, sp
   1465c:	ldr	r0, [r2, #44]	; 0x2c
   14660:	cmp	r0, #0
   14664:	bne	14688 <__assert_fail@plt+0x1a98>
   14668:	ldrd	r0, [r1, #80]	; 0x50
   1466c:	ldrd	r2, [r2, #48]	; 0x30
   14670:	bl	13e00 <__assert_fail@plt+0x1210>
   14674:	cmp	r0, #0
   14678:	mov	r1, #0
   1467c:	movwgt	r1, #1
   14680:	mov	r0, r1
   14684:	pop	{fp, pc}
   14688:	movw	r0, #55380	; 0xd854
   1468c:	movw	r1, #55419	; 0xd87b
   14690:	movw	r3, #55577	; 0xd919
   14694:	movw	r2, #621	; 0x26d
   14698:	movt	r0, #3
   1469c:	movt	r1, #3
   146a0:	movt	r3, #3
   146a4:	bl	12bf0 <__assert_fail@plt>
   146a8:	push	{r4, r5, r6, sl, fp, lr}
   146ac:	add	fp, sp, #16
   146b0:	mov	r5, r0
   146b4:	ldr	r0, [r2, #44]	; 0x2c
   146b8:	cmp	r0, #0
   146bc:	bne	1475c <__assert_fail@plt+0x1b6c>
   146c0:	ldr	r0, [r2, #40]	; 0x28
   146c4:	cmp	r0, #4
   146c8:	bhi	14774 <__assert_fail@plt+0x1b84>
   146cc:	add	r3, pc, #0
   146d0:	ldr	pc, [r3, r0, lsl #2]
   146d4:	andeq	r4, r1, r8, ror #13
   146d8:	andeq	r4, r1, r8, lsl r7
   146dc:	strdeq	r4, [r1], -r0
   146e0:	strdeq	r4, [r1], -r8
   146e4:	andeq	r4, r1, ip, lsl #15
   146e8:	add	r0, r1, #72	; 0x48
   146ec:	b	146fc <__assert_fail@plt+0x1b0c>
   146f0:	add	r0, r1, #88	; 0x58
   146f4:	b	146fc <__assert_fail@plt+0x1b0c>
   146f8:	add	r0, r1, #80	; 0x50
   146fc:	ldrd	r0, [r0]
   14700:	ldrd	r2, [r2, #48]	; 0x30
   14704:	bl	13e00 <__assert_fail@plt+0x1210>
   14708:	cmp	r0, #0
   1470c:	mov	r4, #0
   14710:	movwgt	r4, #1
   14714:	b	14754 <__assert_fail@plt+0x1b64>
   14718:	movw	r1, #55752	; 0xd9c8
   1471c:	mov	r0, #0
   14720:	mov	r2, #5
   14724:	mov	r4, #0
   14728:	movt	r1, #3
   1472c:	bl	12674 <dcgettext@plt>
   14730:	mov	r6, r0
   14734:	mov	r0, #0
   14738:	mov	r1, r5
   1473c:	bl	18f7c <__assert_fail@plt+0x638c>
   14740:	mov	r3, r0
   14744:	mov	r0, #0
   14748:	mov	r1, #0
   1474c:	mov	r2, r6
   14750:	bl	127b8 <error@plt>
   14754:	mov	r0, r4
   14758:	pop	{r4, r5, r6, sl, fp, pc}
   1475c:	movw	r0, #55380	; 0xd854
   14760:	movw	r1, #55419	; 0xd87b
   14764:	movw	r3, #55643	; 0xd95b
   14768:	movw	r2, #631	; 0x277
   1476c:	movt	r0, #3
   14770:	b	147a0 <__assert_fail@plt+0x1bb0>
   14774:	movw	r0, #55800	; 0xd9f8
   14778:	movw	r1, #55419	; 0xd87b
   1477c:	movw	r3, #55643	; 0xd95b
   14780:	movw	r2, #667	; 0x29b
   14784:	movt	r0, #3
   14788:	b	147a0 <__assert_fail@plt+0x1bb0>
   1478c:	movw	r0, #55711	; 0xd99f
   14790:	movw	r1, #55419	; 0xd87b
   14794:	movw	r3, #55643	; 0xd95b
   14798:	mov	r2, #636	; 0x27c
   1479c:	movt	r0, #3
   147a0:	movt	r1, #3
   147a4:	movt	r3, #3
   147a8:	bl	12bf0 <__assert_fail@plt>
   147ac:	push	{fp, lr}
   147b0:	mov	fp, sp
   147b4:	ldr	r0, [r1, #28]
   147b8:	bl	12bcc <getgrgid@plt>
   147bc:	clz	r0, r0
   147c0:	lsr	r0, r0, #5
   147c4:	pop	{fp, pc}
   147c8:	push	{fp, lr}
   147cc:	mov	fp, sp
   147d0:	ldr	r0, [r1, #24]
   147d4:	bl	1250c <getpwuid@plt>
   147d8:	clz	r0, r0
   147dc:	lsr	r0, r0, #5
   147e0:	pop	{fp, pc}
   147e4:	push	{r4, r5, r6, sl, fp, lr}
   147e8:	add	fp, sp, #16
   147ec:	mov	r6, r0
   147f0:	ldr	r0, [r2, #132]	; 0x84
   147f4:	mov	r5, r1
   147f8:	mov	r4, r2
   147fc:	mov	r1, r6
   14800:	ldr	r0, [r0]
   14804:	bl	1482c <__assert_fail@plt+0x1c3c>
   14808:	cmp	r0, #0
   1480c:	beq	14824 <__assert_fail@plt+0x1c34>
   14810:	mov	r0, r6
   14814:	mov	r1, r5
   14818:	mov	r2, r4
   1481c:	pop	{r4, r5, r6, sl, fp, lr}
   14820:	b	15510 <__assert_fail@plt+0x2920>
   14824:	mov	r0, #0
   14828:	pop	{r4, r5, r6, sl, fp, pc}
   1482c:	push	{r4, r5, r6, r7, fp, lr}
   14830:	add	fp, sp, #16
   14834:	mov	r5, r0
   14838:	movw	r0, #17780	; 0x4574
   1483c:	mov	r4, r1
   14840:	movt	r0, #5
   14844:	ldr	r0, [r0]
   14848:	bl	2bc60 <__assert_fail@plt+0x19070>
   1484c:	movw	r7, #17768	; 0x4568
   14850:	movw	r1, #56468	; 0xdc94
   14854:	mov	r0, #0
   14858:	mov	r2, #5
   1485c:	movt	r7, #5
   14860:	movt	r1, #3
   14864:	ldr	r6, [r7]
   14868:	bl	12674 <dcgettext@plt>
   1486c:	mov	r1, r0
   14870:	mov	r0, r6
   14874:	mov	r2, r5
   14878:	mov	r3, r4
   1487c:	bl	128fc <fprintf@plt>
   14880:	cmn	r0, #1
   14884:	ble	14898 <__assert_fail@plt+0x1ca8>
   14888:	ldr	r0, [r7]
   1488c:	bl	2bc60 <__assert_fail@plt+0x19070>
   14890:	pop	{r4, r5, r6, r7, fp, lr}
   14894:	b	2b6b8 <__assert_fail@plt+0x18ac8>
   14898:	bl	12908 <__errno_location@plt>
   1489c:	movw	r1, #56485	; 0xdca5
   148a0:	ldr	r4, [r0]
   148a4:	mov	r0, #0
   148a8:	mov	r2, #5
   148ac:	movt	r1, #3
   148b0:	bl	12674 <dcgettext@plt>
   148b4:	mov	r2, r0
   148b8:	mov	r0, #1
   148bc:	mov	r1, r4
   148c0:	bl	127b8 <error@plt>
   148c4:	push	{r4, r5, fp, lr}
   148c8:	add	fp, sp, #8
   148cc:	mov	r5, r1
   148d0:	mov	r1, r0
   148d4:	ldr	r0, [r2, #132]	; 0x84
   148d8:	mov	r4, r2
   148dc:	ldr	r0, [r0]
   148e0:	bl	1482c <__assert_fail@plt+0x1c3c>
   148e4:	cmp	r0, #0
   148e8:	beq	14908 <__assert_fail@plt+0x1d18>
   148ec:	movw	r0, #20064	; 0x4e60
   148f0:	mov	r1, r5
   148f4:	mov	r2, r4
   148f8:	movt	r0, #5
   148fc:	ldr	r0, [r0, #12]
   14900:	pop	{r4, r5, fp, lr}
   14904:	b	15510 <__assert_fail@plt+0x2920>
   14908:	mov	r0, #0
   1490c:	pop	{r4, r5, fp, pc}
   14910:	mov	r0, #1
   14914:	bx	lr
   14918:	push	{r4, r5, r6, sl, fp, lr}
   1491c:	add	fp, sp, #16
   14920:	mov	r5, r2
   14924:	ldr	r2, [r2, #156]	; 0x9c
   14928:	mov	r4, r1
   1492c:	mov	r6, r0
   14930:	cmp	r2, #0
   14934:	beq	14954 <__assert_fail@plt+0x1d64>
   14938:	mov	r0, r6
   1493c:	mov	r1, r4
   14940:	bl	18e28 <__assert_fail@plt+0x6238>
   14944:	cmp	r0, #0
   14948:	beq	14954 <__assert_fail@plt+0x1d64>
   1494c:	mov	r0, #1
   14950:	pop	{r4, r5, r6, sl, fp, pc}
   14954:	ldr	r2, [r5, #160]	; 0xa0
   14958:	mov	r0, r6
   1495c:	mov	r1, r4
   14960:	pop	{r4, r5, r6, sl, fp, lr}
   14964:	b	18e28 <__assert_fail@plt+0x6238>
   14968:	push	{fp, lr}
   1496c:	mov	fp, sp
   14970:	mov	r1, r0
   14974:	ldr	r0, [r2, #40]	; 0x28
   14978:	mov	r2, #0
   1497c:	bl	127dc <fnmatch@plt>
   14980:	clz	r0, r0
   14984:	lsr	r0, r0, #5
   14988:	pop	{fp, pc}
   1498c:	push	{fp, lr}
   14990:	mov	fp, sp
   14994:	ldr	r0, [r1, #16]
   14998:	ldr	r3, [r2, #40]!	; 0x28
   1499c:	and	r1, r0, #61440	; 0xf000
   149a0:	cmp	r3, #2
   149a4:	sub	r1, r1, #16384	; 0x4000
   149a8:	clz	r1, r1
   149ac:	lsr	r1, r1, #5
   149b0:	add	r1, r2, r1, lsl #2
   149b4:	ldr	r1, [r1, #4]
   149b8:	beq	149e8 <__assert_fail@plt+0x1df8>
   149bc:	cmp	r3, #1
   149c0:	beq	149d4 <__assert_fail@plt+0x1de4>
   149c4:	cmp	r3, #0
   149c8:	bne	14a04 <__assert_fail@plt+0x1e14>
   149cc:	and	r0, r1, r0
   149d0:	b	149ec <__assert_fail@plt+0x1dfc>
   149d4:	cmp	r1, #0
   149d8:	beq	149fc <__assert_fail@plt+0x1e0c>
   149dc:	ands	r0, r1, r0
   149e0:	movwne	r0, #1
   149e4:	pop	{fp, pc}
   149e8:	bfc	r0, #12, #20
   149ec:	sub	r0, r0, r1
   149f0:	clz	r0, r0
   149f4:	lsr	r0, r0, #5
   149f8:	pop	{fp, pc}
   149fc:	mov	r0, #1
   14a00:	pop	{fp, pc}
   14a04:	bl	12b9c <abort@plt>
   14a08:	push	{fp, lr}
   14a0c:	mov	fp, sp
   14a10:	movw	r0, #20064	; 0x4e60
   14a14:	mov	r2, #1
   14a18:	mov	r3, #0
   14a1c:	movt	r0, #5
   14a20:	ldr	r1, [r0, #12]
   14a24:	ldr	r0, [r0, #16]
   14a28:	bl	125a8 <faccessat@plt>
   14a2c:	clz	r0, r0
   14a30:	lsr	r0, r0, #5
   14a34:	pop	{fp, pc}
   14a38:	push	{fp, lr}
   14a3c:	mov	fp, sp
   14a40:	movw	r0, #20064	; 0x4e60
   14a44:	mov	r2, #4
   14a48:	mov	r3, #0
   14a4c:	movt	r0, #5
   14a50:	ldr	r1, [r0, #12]
   14a54:	ldr	r0, [r0, #16]
   14a58:	bl	125a8 <faccessat@plt>
   14a5c:	clz	r0, r0
   14a60:	lsr	r0, r0, #5
   14a64:	pop	{fp, pc}
   14a68:	push	{fp, lr}
   14a6c:	mov	fp, sp
   14a70:	movw	r0, #20064	; 0x4e60
   14a74:	mov	r2, #2
   14a78:	mov	r3, #0
   14a7c:	movt	r0, #5
   14a80:	ldr	r1, [r0, #12]
   14a84:	ldr	r0, [r0, #16]
   14a88:	bl	125a8 <faccessat@plt>
   14a8c:	clz	r0, r0
   14a90:	lsr	r0, r0, #5
   14a94:	pop	{fp, pc}
   14a98:	push	{fp, lr}
   14a9c:	mov	fp, sp
   14aa0:	sub	sp, sp, #8
   14aa4:	ldrb	ip, [r2, #52]	; 0x34
   14aa8:	ldr	r1, [r2, #56]	; 0x38
   14aac:	ldr	r2, [r2, #44]	; 0x2c
   14ab0:	movw	r3, #11436	; 0x2cac
   14ab4:	str	r0, [sp]
   14ab8:	movt	r3, #4
   14abc:	mov	r0, r2
   14ac0:	mov	r2, ip
   14ac4:	bl	206a4 <__assert_fail@plt+0xdab4>
   14ac8:	mov	r0, #1
   14acc:	mov	sp, fp
   14ad0:	pop	{fp, pc}
   14ad4:	push	{r4, sl, fp, lr}
   14ad8:	add	fp, sp, #8
   14adc:	ldr	r4, [r2, #44]	; 0x2c
   14ae0:	mov	r1, r4
   14ae4:	bl	12b84 <fputs@plt>
   14ae8:	mov	r0, #0
   14aec:	mov	r1, r4
   14af0:	bl	12ac4 <putc@plt>
   14af4:	mov	r0, #1
   14af8:	pop	{r4, sl, fp, pc}
   14afc:	push	{fp, lr}
   14b00:	mov	fp, sp
   14b04:	movw	r0, #20108	; 0x4e8c
   14b08:	movt	r0, #5
   14b0c:	ldrb	r0, [r0]
   14b10:	cmp	r0, #0
   14b14:	beq	14b48 <__assert_fail@plt+0x1f58>
   14b18:	movw	r0, #20064	; 0x4e60
   14b1c:	movt	r0, #5
   14b20:	ldrb	r2, [r0, #4]
   14b24:	cmp	r2, #0
   14b28:	beq	14b50 <__assert_fail@plt+0x1f60>
   14b2c:	cmp	r1, #0
   14b30:	beq	14b48 <__assert_fail@plt+0x1f58>
   14b34:	ldr	r1, [r1, #16]
   14b38:	and	r1, r1, #61440	; 0xf000
   14b3c:	cmp	r1, #16384	; 0x4000
   14b40:	moveq	r1, #1
   14b44:	strbeq	r1, [r0, #24]
   14b48:	mov	r0, #1
   14b4c:	pop	{fp, pc}
   14b50:	movw	r0, #54775	; 0xd5f7
   14b54:	movw	r1, #55419	; 0xd87b
   14b58:	movw	r3, #55810	; 0xda02
   14b5c:	movw	r2, #853	; 0x355
   14b60:	movt	r0, #3
   14b64:	movt	r1, #3
   14b68:	movt	r3, #3
   14b6c:	bl	12bf0 <__assert_fail@plt>
   14b70:	push	{fp, lr}
   14b74:	mov	fp, sp
   14b78:	bl	1822c <__assert_fail@plt+0x563c>
   14b7c:	movw	r0, #20064	; 0x4e60
   14b80:	movt	r0, #5
   14b84:	ldr	r0, [r0, #28]
   14b88:	bl	12884 <exit@plt>
   14b8c:	push	{r4, r5, r6, sl, fp, lr}
   14b90:	add	fp, sp, #16
   14b94:	sub	sp, sp, #8
   14b98:	mov	r4, r2
   14b9c:	mov	r5, r0
   14ba0:	bl	128c0 <strlen@plt>
   14ba4:	mov	r6, r0
   14ba8:	ldr	r0, [r4, #40]	; 0x28
   14bac:	mov	r1, #0
   14bb0:	mov	r3, #0
   14bb4:	str	r1, [sp]
   14bb8:	mov	r1, r5
   14bbc:	mov	r2, r6
   14bc0:	bl	31798 <__assert_fail@plt+0x1eba8>
   14bc4:	sub	r0, r0, r6
   14bc8:	clz	r0, r0
   14bcc:	lsr	r0, r0, #5
   14bd0:	sub	sp, fp, #16
   14bd4:	pop	{r4, r5, r6, sl, fp, pc}
   14bd8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14bdc:	add	fp, sp, #28
   14be0:	sub	sp, sp, #4
   14be4:	ldrd	r6, [r2, #40]	; 0x28
   14be8:	ldrd	r8, [r1, #48]	; 0x30
   14bec:	mov	sl, r2
   14bf0:	asr	r5, r7, #31
   14bf4:	mov	r0, r8
   14bf8:	mov	r1, r9
   14bfc:	mov	r2, r7
   14c00:	mov	r3, r5
   14c04:	bl	3cef4 <__assert_fail@plt+0x2a304>
   14c08:	umull	r4, r2, r0, r7
   14c0c:	mla	r2, r0, r5, r2
   14c10:	mla	r7, r1, r7, r2
   14c14:	adds	r2, r0, #1
   14c18:	adc	r3, r1, #0
   14c1c:	subs	r5, r8, r4
   14c20:	sbc	r7, r9, r7
   14c24:	orrs	r7, r5, r7
   14c28:	moveq	r3, r1
   14c2c:	moveq	r2, r0
   14c30:	cmp	r6, #2
   14c34:	beq	14c60 <__assert_fail@plt+0x2070>
   14c38:	cmp	r6, #1
   14c3c:	beq	14c80 <__assert_fail@plt+0x2090>
   14c40:	cmp	r6, #0
   14c44:	bne	14c78 <__assert_fail@plt+0x2088>
   14c48:	ldrd	r4, [sl, #48]	; 0x30
   14c4c:	mov	r0, #1
   14c50:	subs	r1, r4, r2
   14c54:	sbcs	r1, r5, r3
   14c58:	bcs	14c78 <__assert_fail@plt+0x2088>
   14c5c:	b	14c94 <__assert_fail@plt+0x20a4>
   14c60:	ldrd	r0, [sl, #48]	; 0x30
   14c64:	eor	r1, r3, r1
   14c68:	eor	r0, r2, r0
   14c6c:	orrs	r0, r0, r1
   14c70:	mov	r0, #1
   14c74:	beq	14c94 <__assert_fail@plt+0x20a4>
   14c78:	mov	r0, #0
   14c7c:	b	14c94 <__assert_fail@plt+0x20a4>
   14c80:	ldrd	r4, [sl, #48]	; 0x30
   14c84:	mov	r0, #1
   14c88:	subs	r1, r2, r4
   14c8c:	sbcs	r1, r3, r5
   14c90:	movcs	r0, #0
   14c94:	sub	sp, fp, #28
   14c98:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14c9c:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   14ca0:	add	fp, sp, #24
   14ca4:	mov	r6, r1
   14ca8:	mov	r5, r2
   14cac:	mov	r2, r0
   14cb0:	mov	r4, r1
   14cb4:	ldr	r0, [r6, #96]!	; 0x60
   14cb8:	add	r7, r5, #40	; 0x28
   14cbc:	ldr	r1, [r6, #4]
   14cc0:	orrs	r3, r0, r1
   14cc4:	beq	14ce0 <__assert_fail@plt+0x20f0>
   14cc8:	ldrd	r8, [r7]
   14ccc:	eor	r1, r1, r9
   14cd0:	eor	r0, r0, r8
   14cd4:	orrs	r0, r0, r1
   14cd8:	mov	r0, #0
   14cdc:	bne	14d40 <__assert_fail@plt+0x2150>
   14ce0:	movw	r0, #20064	; 0x4e60
   14ce4:	movt	r0, #5
   14ce8:	ldr	r1, [r0, #12]
   14cec:	mov	r0, r2
   14cf0:	mov	r2, r4
   14cf4:	bl	17e48 <__assert_fail@plt+0x5258>
   14cf8:	mov	r1, r0
   14cfc:	mov	r0, #0
   14d00:	cmp	r1, #0
   14d04:	bne	14d40 <__assert_fail@plt+0x2150>
   14d08:	ldrd	r2, [r7]
   14d0c:	ldrd	r6, [r6]
   14d10:	eor	r1, r7, r3
   14d14:	eor	r2, r6, r2
   14d18:	orrs	r1, r2, r1
   14d1c:	bne	14d40 <__assert_fail@plt+0x2150>
   14d20:	add	r0, r5, #48	; 0x30
   14d24:	ldrd	r2, [r4]
   14d28:	ldrd	r0, [r0]
   14d2c:	eor	r1, r3, r1
   14d30:	eor	r0, r2, r0
   14d34:	orr	r0, r0, r1
   14d38:	clz	r0, r0
   14d3c:	lsr	r0, r0, #5
   14d40:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   14d44:	mov	r0, #1
   14d48:	bx	lr
   14d4c:	push	{fp, lr}
   14d50:	mov	fp, sp
   14d54:	movw	ip, #20064	; 0x4e60
   14d58:	movt	ip, #5
   14d5c:	ldrb	r0, [ip, #5]
   14d60:	cmp	r0, #0
   14d64:	beq	14dd8 <__assert_fail@plt+0x21e8>
   14d68:	ldr	r3, [ip, #8]
   14d6c:	mov	r0, #0
   14d70:	cmp	r3, #0
   14d74:	popeq	{fp, pc}
   14d78:	ldrb	r0, [ip, #4]
   14d7c:	cmp	r0, #0
   14d80:	ldrne	r3, [r1, #16]
   14d84:	and	r0, r3, #61440	; 0xf000
   14d88:	sub	r0, r0, #4096	; 0x1000
   14d8c:	lsr	r1, r0, #14
   14d90:	cmp	r1, #2
   14d94:	bhi	14db0 <__assert_fail@plt+0x21c0>
   14d98:	lsr	r1, r0, #12
   14d9c:	movw	ip, #2731	; 0xaab
   14da0:	mov	r0, #1
   14da4:	uxth	r3, r1
   14da8:	tst	r0, ip, lsr r3
   14dac:	bne	14db8 <__assert_fail@plt+0x21c8>
   14db0:	mov	r0, #0
   14db4:	pop	{fp, pc}
   14db8:	movw	r3, #56524	; 0xdccc
   14dbc:	movt	r3, #3
   14dc0:	ldr	r1, [r3, r1, lsl #2]
   14dc4:	add	r1, r2, r1
   14dc8:	ldrb	r1, [r1, #40]	; 0x28
   14dcc:	cmp	r1, #0
   14dd0:	moveq	r0, #0
   14dd4:	pop	{fp, pc}
   14dd8:	movw	r0, #55876	; 0xda44
   14ddc:	movw	r1, #55419	; 0xd87b
   14de0:	movw	r3, #55892	; 0xda54
   14de4:	movw	r2, #977	; 0x3d1
   14de8:	movt	r0, #3
   14dec:	movt	r1, #3
   14df0:	movt	r3, #3
   14df4:	bl	12bf0 <__assert_fail@plt>
   14df8:	ldr	r0, [r2, #40]	; 0x28
   14dfc:	cmp	r0, #2
   14e00:	beq	14e30 <__assert_fail@plt+0x2240>
   14e04:	cmp	r0, #1
   14e08:	beq	14e50 <__assert_fail@plt+0x2260>
   14e0c:	cmp	r0, #0
   14e10:	bne	14e48 <__assert_fail@plt+0x2258>
   14e14:	ldr	r1, [r1, #24]
   14e18:	ldrd	r2, [r2, #48]	; 0x30
   14e1c:	mov	r0, #1
   14e20:	subs	r1, r2, r1
   14e24:	sbcs	r1, r3, #0
   14e28:	bcs	14e48 <__assert_fail@plt+0x2258>
   14e2c:	bx	lr
   14e30:	ldr	r0, [r1, #24]
   14e34:	ldrd	r2, [r2, #48]	; 0x30
   14e38:	eor	r0, r2, r0
   14e3c:	orrs	r0, r0, r3
   14e40:	mov	r0, #1
   14e44:	bxeq	lr
   14e48:	mov	r0, #0
   14e4c:	bx	lr
   14e50:	ldrd	r2, [r2, #48]	; 0x30
   14e54:	ldr	r1, [r1, #24]
   14e58:	mov	r0, #1
   14e5c:	subs	r1, r1, r2
   14e60:	rscs	r1, r3, #0
   14e64:	movcs	r0, #0
   14e68:	bx	lr
   14e6c:	push	{r4, r6, r7, r8, r9, sl, fp, lr}
   14e70:	add	fp, sp, #24
   14e74:	ldrd	r6, [r1, #72]	; 0x48
   14e78:	ldrd	r8, [r1, #88]	; 0x58
   14e7c:	mov	r4, r2
   14e80:	mov	r0, r6
   14e84:	mov	r1, r7
   14e88:	mov	r2, r8
   14e8c:	mov	r3, r9
   14e90:	bl	13e00 <__assert_fail@plt+0x1210>
   14e94:	cmp	r0, #0
   14e98:	bmi	14ec8 <__assert_fail@plt+0x22d8>
   14e9c:	movw	r2, #51712	; 0xca00
   14ea0:	movw	r3, #20864	; 0x5180
   14ea4:	subs	r1, r9, r7
   14ea8:	sub	r0, r8, r6
   14eac:	movt	r2, #15258	; 0x3b9a
   14eb0:	add	r0, r0, r1, asr #31
   14eb4:	movt	r3, #1
   14eb8:	addmi	r1, r1, r2
   14ebc:	mov	r2, r4
   14ec0:	pop	{r4, r6, r7, r8, r9, sl, fp, lr}
   14ec4:	b	13c78 <__assert_fail@plt+0x1088>
   14ec8:	mov	r0, #0
   14ecc:	pop	{r4, r6, r7, r8, r9, sl, fp, pc}
   14ed0:	ldr	r0, [r1, #24]
   14ed4:	ldr	r1, [r2, #40]	; 0x28
   14ed8:	sub	r0, r1, r0
   14edc:	clz	r0, r0
   14ee0:	lsr	r0, r0, #5
   14ee4:	bx	lr
   14ee8:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   14eec:	add	fp, sp, #24
   14ef0:	sub	sp, sp, #104	; 0x68
   14ef4:	mov	r4, r2
   14ef8:	mov	r8, r1
   14efc:	mov	r5, r0
   14f00:	bl	1873c <__assert_fail@plt+0x5b4c>
   14f04:	mov	r6, sp
   14f08:	mov	r7, r0
   14f0c:	mov	r0, r6
   14f10:	bl	17e44 <__assert_fail@plt+0x5254>
   14f14:	movw	r0, #34348	; 0x862c
   14f18:	cmp	r7, #0
   14f1c:	movw	r7, #20064	; 0x4e60
   14f20:	movw	r2, #34220	; 0x85ac
   14f24:	mov	r1, r6
   14f28:	movt	r0, #1
   14f2c:	movt	r7, #5
   14f30:	movt	r2, #1
   14f34:	movne	r2, r0
   14f38:	ldr	r0, [r7, #12]
   14f3c:	blx	r2
   14f40:	cmp	r0, #0
   14f44:	beq	14fa8 <__assert_fail@plt+0x23b8>
   14f48:	bl	1873c <__assert_fail@plt+0x5b4c>
   14f4c:	mov	r6, r0
   14f50:	bl	12908 <__errno_location@plt>
   14f54:	cmp	r6, #0
   14f58:	beq	14f70 <__assert_fail@plt+0x2380>
   14f5c:	ldr	r1, [r0]
   14f60:	cmp	r1, #2
   14f64:	bne	14f70 <__assert_fail@plt+0x2380>
   14f68:	mov	r1, r8
   14f6c:	b	14fac <__assert_fail@plt+0x23bc>
   14f70:	ldr	r6, [r0]
   14f74:	mov	r0, #0
   14f78:	mov	r1, r5
   14f7c:	mov	r4, #0
   14f80:	bl	18f7c <__assert_fail@plt+0x638c>
   14f84:	movw	r2, #13527	; 0x34d7
   14f88:	mov	r3, r0
   14f8c:	mov	r0, #0
   14f90:	mov	r1, r6
   14f94:	movt	r2, #4
   14f98:	bl	127b8 <error@plt>
   14f9c:	mov	r0, #1
   14fa0:	str	r0, [r7, #28]
   14fa4:	b	14fb8 <__assert_fail@plt+0x23c8>
   14fa8:	mov	r1, sp
   14fac:	mov	r2, r4
   14fb0:	bl	14d4c <__assert_fail@plt+0x215c>
   14fb4:	mov	r4, r0
   14fb8:	mov	r0, r4
   14fbc:	sub	sp, fp, #24
   14fc0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14fc4:	push	{r4, r5, r6, r7, fp, lr}
   14fc8:	add	fp, sp, #16
   14fcc:	sub	sp, sp, #8
   14fd0:	mov	r4, r0
   14fd4:	movw	r0, #20108	; 0x4e8c
   14fd8:	mov	r5, r2
   14fdc:	add	r2, sp, #4
   14fe0:	movt	r0, #5
   14fe4:	ldr	r3, [r0, #64]	; 0x40
   14fe8:	movw	r0, #20064	; 0x4e60
   14fec:	movt	r0, #5
   14ff0:	ldr	r1, [r0, #12]
   14ff4:	ldr	r0, [r0, #16]
   14ff8:	blx	r3
   14ffc:	cmn	r0, #1
   15000:	ble	1502c <__assert_fail@plt+0x243c>
   15004:	ldr	r0, [r5, #40]	; 0x28
   15008:	ldr	r1, [sp, #4]
   1500c:	mov	r2, #0
   15010:	bl	127dc <fnmatch@plt>
   15014:	mov	r4, r0
   15018:	ldr	r0, [sp, #4]
   1501c:	bl	12b00 <freecon@plt>
   15020:	clz	r0, r4
   15024:	lsr	r5, r0, #5
   15028:	b	15070 <__assert_fail@plt+0x2480>
   1502c:	bl	12908 <__errno_location@plt>
   15030:	movw	r1, #55957	; 0xda95
   15034:	ldr	r6, [r0]
   15038:	mov	r0, #0
   1503c:	mov	r2, #5
   15040:	mov	r5, #0
   15044:	movt	r1, #3
   15048:	bl	12674 <dcgettext@plt>
   1504c:	mov	r7, r0
   15050:	mov	r0, #0
   15054:	mov	r1, r4
   15058:	bl	18f7c <__assert_fail@plt+0x638c>
   1505c:	mov	r3, r0
   15060:	mov	r0, #0
   15064:	mov	r1, r6
   15068:	mov	r2, r7
   1506c:	bl	127b8 <error@plt>
   15070:	mov	r0, r5
   15074:	sub	sp, fp, #16
   15078:	pop	{r4, r5, r6, r7, fp, pc}
   1507c:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   15080:	add	fp, sp, #24
   15084:	sub	sp, sp, #264	; 0x108
   15088:	mov	r4, r0
   1508c:	cmp	r1, #0
   15090:	beq	1511c <__assert_fail@plt+0x252c>
   15094:	movw	r8, #55979	; 0xdaab
   15098:	add	r6, sp, #4
   1509c:	mov	r5, r1
   150a0:	mov	r9, #0
   150a4:	movt	r8, #3
   150a8:	sub	r7, r6, #1
   150ac:	ldr	r1, [r5, #4]
   150b0:	mov	r2, #0
   150b4:	cmp	r1, #0
   150b8:	beq	15104 <__assert_fail@plt+0x2514>
   150bc:	mov	r0, r6
   150c0:	bl	12770 <strcpy@plt>
   150c4:	bl	128c0 <strlen@plt>
   150c8:	subs	r1, r0, #1
   150cc:	bmi	150f8 <__assert_fail@plt+0x2508>
   150d0:	ldrb	r1, [r7, r0]
   150d4:	cmp	r1, #32
   150d8:	cmpne	r1, #9
   150dc:	bne	150f8 <__assert_fail@plt+0x2508>
   150e0:	sub	r1, r0, #1
   150e4:	sub	r0, r0, #2
   150e8:	cmn	r0, #1
   150ec:	mov	r0, r1
   150f0:	bgt	150d0 <__assert_fail@plt+0x24e0>
   150f4:	b	150fc <__assert_fail@plt+0x250c>
   150f8:	mov	r1, r0
   150fc:	mov	r2, r6
   15100:	strb	r9, [r6, r1]
   15104:	mov	r0, r4
   15108:	mov	r1, r8
   1510c:	bl	128fc <fprintf@plt>
   15110:	ldr	r5, [r5, #152]	; 0x98
   15114:	cmp	r5, #0
   15118:	bne	150ac <__assert_fail@plt+0x24bc>
   1511c:	mov	r0, #10
   15120:	mov	r1, r4
   15124:	bl	12a70 <fputc@plt>
   15128:	sub	sp, fp, #24
   1512c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   15130:	cmp	r1, #0
   15134:	bxeq	lr
   15138:	push	{r4, r5, fp, lr}
   1513c:	add	fp, sp, #8
   15140:	sub	sp, sp, #8
   15144:	mov	r5, r1
   15148:	ldr	r1, [r1, #156]	; 0x9c
   1514c:	mov	r4, r0
   15150:	bl	15264 <__assert_fail@plt+0x2674>
   15154:	ldrb	r2, [r5, #20]
   15158:	ldrb	r0, [r5, #18]
   1515c:	movw	ip, #61759	; 0xf13f
   15160:	ldrb	r1, [r5, #19]
   15164:	movw	r3, #56018	; 0xdad2
   15168:	movt	ip, #3
   1516c:	movt	r3, #3
   15170:	cmp	r2, #0
   15174:	movw	r2, #55992	; 0xdab8
   15178:	moveq	r3, ip
   1517c:	cmp	r0, #0
   15180:	movt	r2, #3
   15184:	mov	r0, r4
   15188:	moveq	r2, ip
   1518c:	cmp	r1, #0
   15190:	movw	r1, #55985	; 0xdab1
   15194:	str	r3, [sp]
   15198:	movw	r3, #56005	; 0xdac5
   1519c:	movt	r1, #3
   151a0:	movt	r3, #3
   151a4:	moveq	r3, ip
   151a8:	bl	128fc <fprintf@plt>
   151ac:	mov	r0, r4
   151b0:	mov	r1, r5
   151b4:	bl	15d10 <__assert_fail@plt+0x3120>
   151b8:	vldr	s0, [r5, #28]
   151bc:	movw	r1, #56031	; 0xdadf
   151c0:	mov	r0, r4
   151c4:	movt	r1, #3
   151c8:	vcvt.f64.f32	d16, s0
   151cc:	vmov	r2, r3, d16
   151d0:	bl	128fc <fprintf@plt>
   151d4:	movw	r0, #20108	; 0x4e8c
   151d8:	movt	r0, #5
   151dc:	ldrb	r0, [r0, #44]	; 0x2c
   151e0:	tst	r0, #64	; 0x40
   151e4:	beq	15250 <__assert_fail@plt+0x2660>
   151e8:	ldr	r3, [r5, #164]	; 0xa4
   151ec:	ldr	r2, [r5, #168]	; 0xa8
   151f0:	movw	r1, #56057	; 0xdaf9
   151f4:	mov	r0, r4
   151f8:	movt	r1, #3
   151fc:	bl	128fc <fprintf@plt>
   15200:	ldr	r0, [r5, #164]	; 0xa4
   15204:	cmp	r0, #0
   15208:	beq	15238 <__assert_fail@plt+0x2648>
   1520c:	vmov	s2, r0
   15210:	vldr	s0, [r5, #168]	; 0xa8
   15214:	movw	r1, #56084	; 0xdb14
   15218:	mov	r0, r4
   1521c:	movt	r1, #3
   15220:	vcvt.f64.u32	d16, s2
   15224:	vcvt.f64.u32	d17, s0
   15228:	vdiv.f64	d16, d17, d16
   1522c:	vmov	r2, r3, d16
   15230:	bl	128fc <fprintf@plt>
   15234:	b	15250 <__assert_fail@plt+0x2660>
   15238:	movw	r0, #56092	; 0xdb1c
   1523c:	mov	r1, #4
   15240:	mov	r2, #1
   15244:	mov	r3, r4
   15248:	movt	r0, #3
   1524c:	bl	12728 <fwrite@plt>
   15250:	ldr	r1, [r5, #160]	; 0xa0
   15254:	mov	r0, r4
   15258:	sub	sp, fp, #8
   1525c:	pop	{r4, r5, fp, lr}
   15260:	b	15264 <__assert_fail@plt+0x2674>
   15264:	push	{r4, r5, fp, lr}
   15268:	add	fp, sp, #8
   1526c:	cmp	r1, #0
   15270:	popeq	{r4, r5, fp, pc}
   15274:	mov	r5, r1
   15278:	movw	r1, #15704	; 0x3d58
   1527c:	mov	r4, r0
   15280:	movw	r0, #18712	; 0x4918
   15284:	movt	r0, #1
   15288:	movt	r1, #1
   1528c:	ldr	r3, [r5]
   15290:	ldr	r2, [r5, #156]	; 0x9c
   15294:	cmp	r3, r0
   15298:	cmpne	r3, r1
   1529c:	bne	152b8 <__assert_fail@plt+0x26c8>
   152a0:	cmp	r2, #0
   152a4:	bne	152cc <__assert_fail@plt+0x26dc>
   152a8:	ldr	r5, [r5, #160]	; 0xa0
   152ac:	cmp	r5, #0
   152b0:	bne	1528c <__assert_fail@plt+0x269c>
   152b4:	pop	{r4, r5, fp, pc}
   152b8:	cmp	r2, #0
   152bc:	bne	152cc <__assert_fail@plt+0x26dc>
   152c0:	ldr	r0, [r5, #160]	; 0xa0
   152c4:	cmp	r0, #0
   152c8:	beq	152fc <__assert_fail@plt+0x270c>
   152cc:	movw	r0, #56516	; 0xdcc4
   152d0:	mov	r1, r4
   152d4:	movt	r0, #3
   152d8:	bl	12b84 <fputs@plt>
   152dc:	mov	r0, r4
   152e0:	mov	r1, r5
   152e4:	bl	15130 <__assert_fail@plt+0x2540>
   152e8:	movw	r0, #56520	; 0xdcc8
   152ec:	mov	r1, r4
   152f0:	movt	r0, #3
   152f4:	pop	{r4, r5, fp, lr}
   152f8:	b	12b84 <fputs@plt>
   152fc:	mov	r0, r4
   15300:	mov	r1, r5
   15304:	pop	{r4, r5, fp, lr}
   15308:	b	15130 <__assert_fail@plt+0x2540>
   1530c:	push	{r4, r5, fp, lr}
   15310:	add	fp, sp, #8
   15314:	mov	r4, r0
   15318:	movw	r0, #20108	; 0x4e8c
   1531c:	movt	r0, #5
   15320:	ldrb	r0, [r0, #44]	; 0x2c
   15324:	tst	r0, #64	; 0x40
   15328:	popeq	{r4, r5, fp, pc}
   1532c:	movw	r5, #17768	; 0x4568
   15330:	movw	r0, #56097	; 0xdb21
   15334:	mov	r1, #42	; 0x2a
   15338:	mov	r2, #1
   1533c:	movt	r5, #5
   15340:	movt	r0, #3
   15344:	ldr	r3, [r5]
   15348:	bl	12728 <fwrite@plt>
   1534c:	ldr	r0, [r5]
   15350:	mov	r1, r4
   15354:	bl	15130 <__assert_fail@plt+0x2540>
   15358:	ldr	r1, [r5]
   1535c:	mov	r0, #10
   15360:	pop	{r4, r5, fp, lr}
   15364:	b	12a70 <fputc@plt>
   15368:	push	{fp, lr}
   1536c:	mov	fp, sp
   15370:	cmp	r0, #0
   15374:	popeq	{fp, pc}
   15378:	movw	lr, #19196	; 0x4afc
   1537c:	movw	ip, #19312	; 0x4b70
   15380:	movt	lr, #1
   15384:	movt	ip, #1
   15388:	ldr	r3, [r0]
   1538c:	cmp	r3, #0
   15390:	beq	15460 <__assert_fail@plt+0x2870>
   15394:	ldr	r2, [r0, #172]	; 0xac
   15398:	cmp	r2, #0
   1539c:	beq	15478 <__assert_fail@plt+0x2888>
   153a0:	ldr	r1, [r2, #12]
   153a4:	cmp	r1, #0
   153a8:	cmpne	r1, r3
   153ac:	bne	15448 <__assert_fail@plt+0x2858>
   153b0:	ldr	r1, [r2]
   153b4:	cmp	r1, #6
   153b8:	bhi	153f8 <__assert_fail@plt+0x2808>
   153bc:	add	r2, pc, #0
   153c0:	ldr	pc, [r2, r1, lsl #2]
   153c4:	muleq	r1, r0, r4
   153c8:	andeq	r5, r1, r0, ror #7
   153cc:	andeq	r5, r1, r8, lsr #9
   153d0:	andeq	r5, r1, r0, ror #7
   153d4:	andeq	r5, r1, r0, ror #7
   153d8:	andeq	r5, r1, r0, ror #7
   153dc:	andeq	r5, r1, r8, lsl #8
   153e0:	ldrb	r1, [r0, #17]
   153e4:	cmp	r1, #0
   153e8:	bne	154c0 <__assert_fail@plt+0x28d0>
   153ec:	ldrb	r1, [r0, #16]
   153f0:	cmp	r1, #0
   153f4:	bne	154d8 <__assert_fail@plt+0x28e8>
   153f8:	ldr	r0, [r0, #152]	; 0x98
   153fc:	cmp	r0, #0
   15400:	bne	15388 <__assert_fail@plt+0x2798>
   15404:	b	15444 <__assert_fail@plt+0x2854>
   15408:	ldrb	r1, [r0, #16]
   1540c:	cmp	r1, #0
   15410:	beq	154f0 <__assert_fail@plt+0x2900>
   15414:	cmp	r3, lr
   15418:	cmpne	r3, ip
   1541c:	beq	153f8 <__assert_fail@plt+0x2808>
   15420:	ldrb	r1, [r0, #17]
   15424:	cmp	r1, #0
   15428:	bne	153f8 <__assert_fail@plt+0x2808>
   1542c:	movw	r0, #56361	; 0xdc29
   15430:	movw	r1, #55419	; 0xd87b
   15434:	movw	r3, #56161	; 0xdb61
   15438:	movw	r2, #1349	; 0x545
   1543c:	movt	r0, #3
   15440:	b	15504 <__assert_fail@plt+0x2914>
   15444:	pop	{fp, pc}
   15448:	movw	r0, #56234	; 0xdbaa
   1544c:	movw	r1, #55419	; 0xd87b
   15450:	movw	r3, #56161	; 0xdb61
   15454:	movw	r2, #1322	; 0x52a
   15458:	movt	r0, #3
   1545c:	b	15504 <__assert_fail@plt+0x2914>
   15460:	movw	r0, #56140	; 0xdb4c
   15464:	movw	r1, #55419	; 0xd87b
   15468:	movw	r3, #56161	; 0xdb61
   1546c:	movw	r2, #1310	; 0x51e
   15470:	movt	r0, #3
   15474:	b	15504 <__assert_fail@plt+0x2914>
   15478:	movw	r0, #56210	; 0xdb92
   1547c:	movw	r1, #55419	; 0xd87b
   15480:	movw	r3, #56161	; 0xdb61
   15484:	movw	r2, #1313	; 0x521
   15488:	movt	r0, #3
   1548c:	b	15504 <__assert_fail@plt+0x2914>
   15490:	movw	r0, #56277	; 0xdbd5
   15494:	movw	r1, #55419	; 0xd87b
   15498:	movw	r3, #56161	; 0xdb61
   1549c:	movw	r2, #1338	; 0x53a
   154a0:	movt	r0, #3
   154a4:	b	15504 <__assert_fail@plt+0x2914>
   154a8:	movw	r0, #56313	; 0xdbf9
   154ac:	movw	r1, #55419	; 0xd87b
   154b0:	movw	r3, #56161	; 0xdb61
   154b4:	movw	r2, #1339	; 0x53b
   154b8:	movt	r0, #3
   154bc:	b	15504 <__assert_fail@plt+0x2914>
   154c0:	movw	r0, #56360	; 0xdc28
   154c4:	movw	r1, #55419	; 0xd87b
   154c8:	movw	r3, #56161	; 0xdb61
   154cc:	movw	r2, #1363	; 0x553
   154d0:	movt	r0, #3
   154d4:	b	15504 <__assert_fail@plt+0x2914>
   154d8:	movw	r0, #56381	; 0xdc3d
   154dc:	movw	r1, #55419	; 0xd87b
   154e0:	movw	r3, #56161	; 0xdb61
   154e4:	movw	r2, #1364	; 0x554
   154e8:	movt	r0, #3
   154ec:	b	15504 <__assert_fail@plt+0x2914>
   154f0:	movw	r0, #56382	; 0xdc3e
   154f4:	movw	r1, #55419	; 0xd87b
   154f8:	movw	r3, #56161	; 0xdb61
   154fc:	movw	r2, #1343	; 0x53f
   15500:	movt	r0, #3
   15504:	movt	r1, #3
   15508:	movt	r3, #3
   1550c:	bl	12bf0 <__assert_fail@plt>
   15510:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15514:	add	fp, sp, #28
   15518:	sub	sp, sp, #36	; 0x24
   1551c:	mov	r4, r2
   15520:	mov	r9, r0
   15524:	mov	sl, r2
   15528:	ldr	r0, [r4], #40	; 0x28
   1552c:	bl	18f4c <__assert_fail@plt+0x635c>
   15530:	mov	r8, r0
   15534:	cmp	r0, #0
   15538:	beq	155d8 <__assert_fail@plt+0x29e8>
   1553c:	ldr	r0, [sl, #116]	; 0x74
   15540:	cmp	r0, #0
   15544:	bne	155a0 <__assert_fail@plt+0x29b0>
   15548:	movw	r5, #20064	; 0x4e60
   1554c:	mov	r1, #47	; 0x2f
   15550:	movt	r5, #5
   15554:	ldr	r6, [r5, #12]
   15558:	mov	r0, r6
   1555c:	bl	128cc <strchr@plt>
   15560:	cmp	r0, #0
   15564:	beq	15740 <__assert_fail@plt+0x2b50>
   15568:	mov	r0, r6
   1556c:	bl	21444 <__assert_fail@plt+0xe854>
   15570:	ldr	r1, [r5, #16]
   15574:	mov	r7, sl
   15578:	mov	sl, r0
   1557c:	mov	r0, r4
   15580:	mov	r2, sl
   15584:	bl	15c20 <__assert_fail@plt+0x3030>
   15588:	mov	r6, r0
   1558c:	mov	r0, sl
   15590:	mov	sl, r7
   15594:	bl	2bcbc <__assert_fail@plt+0x190cc>
   15598:	cmp	r6, #0
   1559c:	beq	1575c <__assert_fail@plt+0x2b6c>
   155a0:	movw	r0, #20064	; 0x4e60
   155a4:	movt	r0, #5
   155a8:	ldr	r0, [r0, #12]
   155ac:	bl	21388 <__assert_fail@plt+0xe798>
   155b0:	mov	r9, r0
   155b4:	ldrb	r0, [r0]
   155b8:	movw	r6, #56637	; 0xdd3d
   155bc:	movt	r6, #3
   155c0:	mov	r7, r9
   155c4:	subs	r0, r0, #47	; 0x2f
   155c8:	moveq	r6, r0
   155cc:	movwne	r0, #1
   155d0:	lsl	r5, r0, #1
   155d4:	b	155fc <__assert_fail@plt+0x2a0c>
   155d8:	movw	r0, #17800	; 0x4588
   155dc:	ldr	r1, [sl, #144]	; 0x90
   155e0:	mov	r7, #0
   155e4:	mov	r6, #0
   155e8:	mov	r5, #0
   155ec:	movt	r0, #5
   155f0:	ldr	r0, [r0]
   155f4:	cmp	r1, r0
   155f8:	bne	157b4 <__assert_fail@plt+0x2bc4>
   155fc:	ldrb	r0, [r4]
   15600:	cmp	r0, #0
   15604:	beq	15658 <__assert_fail@plt+0x2a68>
   15608:	mov	r0, r9
   1560c:	bl	128c0 <strlen@plt>
   15610:	mov	r1, #0
   15614:	add	r2, r4, #4
   15618:	add	r3, r0, #1
   1561c:	str	r6, [sp]
   15620:	str	r5, [sp, #4]
   15624:	str	r1, [sp, #8]
   15628:	mov	r0, r2
   1562c:	add	r1, sl, #88	; 0x58
   15630:	mov	r2, r9
   15634:	bl	1ecb8 <__assert_fail@plt+0xc0c8>
   15638:	ldr	r0, [sl, #116]	; 0x74
   1563c:	cmp	r0, #0
   15640:	beq	15718 <__assert_fail@plt+0x2b28>
   15644:	movw	r0, #20064	; 0x4e60
   15648:	mov	r4, #1
   1564c:	movt	r0, #5
   15650:	strb	r4, [r0, #32]
   15654:	b	1571c <__assert_fail@plt+0x2b2c>
   15658:	add	r0, sl, #88	; 0x58
   1565c:	str	r7, [sp, #20]
   15660:	mov	r7, sl
   15664:	str	r8, [sp, #24]
   15668:	str	r0, [sp, #32]
   1566c:	add	r0, r4, #4
   15670:	str	r0, [sp, #28]
   15674:	ldr	r0, [sl, #136]	; 0x88
   15678:	cmp	r0, #1
   1567c:	blt	156e0 <__assert_fail@plt+0x2af0>
   15680:	mov	r4, r5
   15684:	mov	r5, r6
   15688:	mov	sl, #0
   1568c:	ldr	r0, [r7, #132]	; 0x84
   15690:	ldr	r6, [r0, sl, lsl #2]
   15694:	mov	r0, r6
   15698:	bl	128c0 <strlen@plt>
   1569c:	mov	r8, r0
   156a0:	mov	r0, r9
   156a4:	bl	128c0 <strlen@plt>
   156a8:	str	r5, [sp]
   156ac:	stmib	sp, {r4, r9}
   156b0:	str	r0, [sp, #12]
   156b4:	mov	r0, #0
   156b8:	ldr	r1, [sp, #32]
   156bc:	mov	r2, r6
   156c0:	mov	r3, r8
   156c4:	str	r0, [sp, #16]
   156c8:	ldr	r0, [sp, #28]
   156cc:	bl	1eb3c <__assert_fail@plt+0xbf4c>
   156d0:	ldr	r0, [r7, #136]	; 0x88
   156d4:	add	sl, sl, #1
   156d8:	cmp	sl, r0
   156dc:	blt	1568c <__assert_fail@plt+0x2a9c>
   156e0:	ldr	r0, [sp, #28]
   156e4:	ldr	r1, [sp, #32]
   156e8:	bl	1ef28 <__assert_fail@plt+0xc338>
   156ec:	ldrh	r0, [r7, #148]	; 0x94
   156f0:	ldr	r8, [sp, #24]
   156f4:	bic	r0, r0, #128	; 0x80
   156f8:	cmp	r8, #0
   156fc:	clz	r0, r0
   15700:	lsr	r4, r0, #5
   15704:	beq	15710 <__assert_fail@plt+0x2b20>
   15708:	ldr	r0, [r7, #144]	; 0x90
   1570c:	bl	29a5c <__assert_fail@plt+0x16e6c>
   15710:	ldr	r7, [sp, #20]
   15714:	b	1571c <__assert_fail@plt+0x2b2c>
   15718:	mov	r4, #1
   1571c:	cmp	r7, #0
   15720:	beq	15734 <__assert_fail@plt+0x2b44>
   15724:	cmp	r8, #0
   15728:	beq	1579c <__assert_fail@plt+0x2bac>
   1572c:	mov	r0, r7
   15730:	bl	2bcbc <__assert_fail@plt+0x190cc>
   15734:	mov	r0, r4
   15738:	sub	sp, fp, #28
   1573c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15740:	ldr	r1, [r5, #16]
   15744:	movw	r2, #58388	; 0xe414
   15748:	mov	r0, r4
   1574c:	movt	r2, #3
   15750:	bl	15c20 <__assert_fail@plt+0x3030>
   15754:	cmp	r0, #0
   15758:	bne	155a0 <__assert_fail@plt+0x29b0>
   1575c:	bl	12908 <__errno_location@plt>
   15760:	movw	r1, #56572	; 0xdcfc
   15764:	ldr	r4, [r0]
   15768:	mov	r0, #0
   1576c:	mov	r2, #5
   15770:	movt	r1, #3
   15774:	bl	12674 <dcgettext@plt>
   15778:	mov	r5, r0
   1577c:	mov	r0, #0
   15780:	mov	r1, r9
   15784:	bl	18f7c <__assert_fail@plt+0x638c>
   15788:	mov	r3, r0
   1578c:	mov	r0, #1
   15790:	mov	r1, r4
   15794:	mov	r2, r5
   15798:	bl	127b8 <error@plt>
   1579c:	movw	r0, #56750	; 0xddae
   157a0:	movw	r1, #56673	; 0xdd61
   157a4:	movw	r3, #56680	; 0xdd68
   157a8:	mov	r2, #208	; 0xd0
   157ac:	movt	r0, #3
   157b0:	b	157c8 <__assert_fail@plt+0x2bd8>
   157b4:	movw	r0, #56640	; 0xdd40
   157b8:	movw	r1, #56673	; 0xdd61
   157bc:	movw	r3, #56680	; 0xdd68
   157c0:	mov	r2, #148	; 0x94
   157c4:	movt	r0, #3
   157c8:	movt	r1, #3
   157cc:	movt	r3, #3
   157d0:	bl	12bf0 <__assert_fail@plt>
   157d4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   157d8:	add	fp, sp, #28
   157dc:	sub	sp, sp, #20
   157e0:	movw	r9, #20108	; 0x4e8c
   157e4:	movw	sl, #17768	; 0x4568
   157e8:	mov	r8, r3
   157ec:	mov	r5, r1
   157f0:	movt	r9, #5
   157f4:	movt	sl, #5
   157f8:	ldrb	r0, [r9, #44]	; 0x2c
   157fc:	tst	r0, #32
   15800:	bne	15990 <__assert_fail@plt+0x2da0>
   15804:	movw	r0, #17780	; 0x4574
   15808:	movt	r0, #5
   1580c:	ldr	r0, [r0]
   15810:	bl	2bc60 <__assert_fail@plt+0x19070>
   15814:	ldr	r0, [sl]
   15818:	bl	2bc60 <__assert_fail@plt+0x19070>
   1581c:	movw	r0, #17804	; 0x458c
   15820:	movt	r0, #5
   15824:	ldrb	r1, [r0]
   15828:	cmp	r1, #0
   1582c:	bne	15844 <__assert_fail@plt+0x2c54>
   15830:	mov	r1, #1
   15834:	strb	r1, [r0]
   15838:	mov	r0, #17
   1583c:	mov	r1, #0
   15840:	bl	12638 <signal@plt>
   15844:	bl	12a28 <fork@plt>
   15848:	cmn	r0, #1
   1584c:	beq	15a2c <__assert_fail@plt+0x2e3c>
   15850:	mov	r6, r0
   15854:	cmp	r0, #0
   15858:	beq	15a58 <__assert_fail@plt+0x2e68>
   1585c:	add	r7, r5, #108	; 0x6c
   15860:	mov	r0, r6
   15864:	mov	r1, r7
   15868:	mov	r2, #0
   1586c:	bl	1274c <waitpid@plt>
   15870:	cmn	r0, #1
   15874:	bne	158d8 <__assert_fail@plt+0x2ce8>
   15878:	bl	12908 <__errno_location@plt>
   1587c:	ldr	r4, [r0]
   15880:	cmp	r4, #4
   15884:	beq	15860 <__assert_fail@plt+0x2c70>
   15888:	movw	r1, #56897	; 0xde41
   1588c:	mov	r0, #0
   15890:	mov	r2, #5
   15894:	mov	r6, #0
   15898:	movt	r1, #3
   1589c:	bl	12674 <dcgettext@plt>
   158a0:	ldr	r1, [r8]
   158a4:	mov	r5, r0
   158a8:	mov	r0, #0
   158ac:	bl	18f7c <__assert_fail@plt+0x638c>
   158b0:	mov	r3, r0
   158b4:	mov	r0, #0
   158b8:	mov	r1, r4
   158bc:	mov	r2, r5
   158c0:	bl	127b8 <error@plt>
   158c4:	movw	r0, #20064	; 0x4e60
   158c8:	mov	r1, #1
   158cc:	movt	r0, #5
   158d0:	str	r1, [r0, #28]
   158d4:	b	15984 <__assert_fail@plt+0x2d94>
   158d8:	ldr	r0, [r7]
   158dc:	mov	r1, #2130706432	; 0x7f000000
   158e0:	and	r1, r1, r0, lsl #24
   158e4:	add	r1, r1, #16777216	; 0x1000000
   158e8:	cmp	r1, #33554432	; 0x2000000
   158ec:	blt	1594c <__assert_fail@plt+0x2d5c>
   158f0:	movw	r1, #56918	; 0xde56
   158f4:	mov	r0, #0
   158f8:	mov	r2, #5
   158fc:	movt	r1, #3
   15900:	bl	12674 <dcgettext@plt>
   15904:	ldr	r1, [r9, #72]	; 0x48
   15908:	ldr	r2, [r8]
   1590c:	mov	r4, r0
   15910:	mov	r0, #0
   15914:	bl	294c0 <__assert_fail@plt+0x168d0>
   15918:	mov	r3, r0
   1591c:	ldr	r0, [r5, #108]	; 0x6c
   15920:	mov	r1, #0
   15924:	mov	r2, r4
   15928:	and	r0, r0, #127	; 0x7f
   1592c:	str	r0, [sp]
   15930:	mov	r0, #0
   15934:	bl	127b8 <error@plt>
   15938:	ldrb	r0, [r5]
   1593c:	cmp	r0, #0
   15940:	bne	15974 <__assert_fail@plt+0x2d84>
   15944:	mov	r6, #1
   15948:	b	15984 <__assert_fail@plt+0x2d94>
   1594c:	ldrb	r1, [r9, #44]	; 0x2c
   15950:	ubfx	r4, r0, #8, #8
   15954:	tst	r1, #32
   15958:	bne	15a10 <__assert_fail@plt+0x2e20>
   1595c:	mov	r6, #1
   15960:	cmp	r4, #0
   15964:	beq	15984 <__assert_fail@plt+0x2d94>
   15968:	ldrb	r0, [r5]
   1596c:	cmp	r0, #0
   15970:	beq	15984 <__assert_fail@plt+0x2d94>
   15974:	movw	r0, #20064	; 0x4e60
   15978:	mov	r6, #1
   1597c:	movt	r0, #5
   15980:	str	r6, [r0, #28]
   15984:	mov	r0, r6
   15988:	sub	sp, fp, #28
   1598c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15990:	ldr	r0, [r5, #48]	; 0x30
   15994:	movw	r1, #56756	; 0xddb4
   15998:	mov	r4, #0
   1599c:	movt	r1, #3
   159a0:	subs	r2, r0, #1
   159a4:	ldr	r0, [sl]
   159a8:	sbc	r3, r4, #0
   159ac:	bl	128fc <fprintf@plt>
   159b0:	ldr	r0, [r5, #48]	; 0x30
   159b4:	ldr	r6, [sl]
   159b8:	cmp	r0, #1
   159bc:	beq	15a00 <__assert_fail@plt+0x2e10>
   159c0:	movw	r7, #13526	; 0x34d6
   159c4:	movt	r7, #4
   159c8:	ldr	r0, [r5, #52]	; 0x34
   159cc:	ldr	r1, [r0, r4, lsl #2]
   159d0:	mov	r0, #0
   159d4:	bl	18f7c <__assert_fail@plt+0x638c>
   159d8:	mov	r2, r0
   159dc:	mov	r0, r6
   159e0:	mov	r1, r7
   159e4:	bl	128fc <fprintf@plt>
   159e8:	ldr	r0, [r5, #48]	; 0x30
   159ec:	ldr	r6, [sl]
   159f0:	add	r4, r4, #1
   159f4:	sub	r0, r0, #1
   159f8:	cmp	r4, r0
   159fc:	bcc	159c8 <__assert_fail@plt+0x2dd8>
   15a00:	mov	r0, #10
   15a04:	mov	r1, r6
   15a08:	bl	12a70 <fputc@plt>
   15a0c:	b	15804 <__assert_fail@plt+0x2c14>
   15a10:	ldr	r0, [sl]
   15a14:	movw	r1, #56945	; 0xde71
   15a18:	mov	r2, r6
   15a1c:	mov	r3, r4
   15a20:	movt	r1, #3
   15a24:	bl	128fc <fprintf@plt>
   15a28:	b	1595c <__assert_fail@plt+0x2d6c>
   15a2c:	bl	12908 <__errno_location@plt>
   15a30:	movw	r1, #56798	; 0xddde
   15a34:	ldr	r4, [r0]
   15a38:	mov	r0, #0
   15a3c:	mov	r2, #5
   15a40:	movt	r1, #3
   15a44:	bl	12674 <dcgettext@plt>
   15a48:	mov	r2, r0
   15a4c:	mov	r0, #1
   15a50:	mov	r1, r4
   15a54:	bl	127b8 <error@plt>
   15a58:	ldr	r6, [r5, #104]	; 0x68
   15a5c:	cmp	r6, #0
   15a60:	bne	15a84 <__assert_fail@plt+0x2e94>
   15a64:	movw	r0, #56810	; 0xddea
   15a68:	movw	r1, #56673	; 0xdd61
   15a6c:	movw	r3, #56837	; 0xde05
   15a70:	movw	r2, #321	; 0x141
   15a74:	movt	r0, #3
   15a78:	movt	r1, #3
   15a7c:	movt	r3, #3
   15a80:	bl	12bf0 <__assert_fail@plt>
   15a84:	ldrb	r0, [r5, #100]	; 0x64
   15a88:	mov	r5, #1
   15a8c:	cmp	r0, #0
   15a90:	beq	15b34 <__assert_fail@plt+0x2f44>
   15a94:	movw	r0, #57072	; 0xdef0
   15a98:	mov	r5, #0
   15a9c:	movt	r0, #3
   15aa0:	vldr	d16, [r0]
   15aa4:	mov	r0, #108	; 0x6c
   15aa8:	strh	r0, [sp, #16]
   15aac:	mov	r0, #0
   15ab0:	vstr	d16, [sp, #8]
   15ab4:	bl	12ba8 <close@plt>
   15ab8:	cmn	r0, #1
   15abc:	bgt	15af0 <__assert_fail@plt+0x2f00>
   15ac0:	bl	12908 <__errno_location@plt>
   15ac4:	movw	r1, #57007	; 0xdeaf
   15ac8:	ldr	r4, [r0]
   15acc:	mov	r0, #0
   15ad0:	mov	r2, #5
   15ad4:	movt	r1, #3
   15ad8:	bl	12674 <dcgettext@plt>
   15adc:	mov	r2, r0
   15ae0:	mov	r0, #0
   15ae4:	mov	r1, r4
   15ae8:	bl	127b8 <error@plt>
   15aec:	b	15b34 <__assert_fail@plt+0x2f44>
   15af0:	add	r0, sp, #8
   15af4:	mov	r1, #131072	; 0x20000
   15af8:	bl	214e8 <__assert_fail@plt+0xe8f8>
   15afc:	mov	r5, #1
   15b00:	cmn	r0, #1
   15b04:	bgt	15b34 <__assert_fail@plt+0x2f44>
   15b08:	bl	12908 <__errno_location@plt>
   15b0c:	ldr	r4, [r0]
   15b10:	add	r1, sp, #8
   15b14:	mov	r0, #0
   15b18:	bl	18f7c <__assert_fail@plt+0x638c>
   15b1c:	movw	r2, #13527	; 0x34d7
   15b20:	mov	r3, r0
   15b24:	mov	r0, #0
   15b28:	mov	r1, r4
   15b2c:	movt	r2, #4
   15b30:	bl	127b8 <error@plt>
   15b34:	mov	r0, r6
   15b38:	bl	29a40 <__assert_fail@plt+0x16e50>
   15b3c:	cmp	r0, #0
   15b40:	bne	15b7c <__assert_fail@plt+0x2f8c>
   15b44:	cmp	r5, #0
   15b48:	beq	15c18 <__assert_fail@plt+0x3028>
   15b4c:	bl	1fbb8 <__assert_fail@plt+0xcfc8>
   15b50:	cmp	r0, #0
   15b54:	beq	15b5c <__assert_fail@plt+0x2f6c>
   15b58:	bl	1fbd8 <__assert_fail@plt+0xcfe8>
   15b5c:	mov	r0, r8
   15b60:	bl	1f410 <__assert_fail@plt+0xc820>
   15b64:	cmp	r0, #0
   15b68:	beq	15be0 <__assert_fail@plt+0x2ff0>
   15b6c:	bl	12908 <__errno_location@plt>
   15b70:	mov	r1, #7
   15b74:	str	r1, [r0]
   15b78:	b	15bf0 <__assert_fail@plt+0x3000>
   15b7c:	bl	12908 <__errno_location@plt>
   15b80:	movw	r1, #57035	; 0xdecb
   15b84:	ldr	r4, [r0]
   15b88:	mov	r0, #0
   15b8c:	mov	r2, #5
   15b90:	movt	r1, #3
   15b94:	bl	12674 <dcgettext@plt>
   15b98:	mov	r2, r0
   15b9c:	ldr	r0, [r6]
   15ba0:	cmn	r0, #1
   15ba4:	bgt	15bcc <__assert_fail@plt+0x2fdc>
   15ba8:	ldr	r0, [r6, #4]
   15bac:	movw	r1, #61759	; 0xf13f
   15bb0:	movw	r3, #3732	; 0xe94
   15bb4:	movt	r1, #3
   15bb8:	movt	r3, #4
   15bbc:	cmp	r0, #0
   15bc0:	moveq	r3, r1
   15bc4:	moveq	r0, r1
   15bc8:	b	15bd8 <__assert_fail@plt+0x2fe8>
   15bcc:	movw	r3, #61759	; 0xf13f
   15bd0:	movt	r3, #3
   15bd4:	mov	r0, r3
   15bd8:	str	r0, [sp]
   15bdc:	b	15c0c <__assert_fail@plt+0x301c>
   15be0:	ldr	r0, [r8]
   15be4:	mov	r1, r8
   15be8:	bl	125fc <execvp@plt>
   15bec:	bl	12908 <__errno_location@plt>
   15bf0:	ldr	r1, [r8]
   15bf4:	ldr	r4, [r0]
   15bf8:	mov	r0, #0
   15bfc:	bl	18f7c <__assert_fail@plt+0x638c>
   15c00:	movw	r2, #13527	; 0x34d7
   15c04:	mov	r3, r0
   15c08:	movt	r2, #4
   15c0c:	mov	r0, #0
   15c10:	mov	r1, r4
   15c14:	bl	127b8 <error@plt>
   15c18:	mov	r0, #1
   15c1c:	bl	125e4 <_exit@plt>
   15c20:	push	{r4, r5, r6, r7, fp, lr}
   15c24:	add	fp, sp, #16
   15c28:	mov	r7, r0
   15c2c:	mov	r0, #8
   15c30:	mov	r5, r2
   15c34:	mov	r6, r1
   15c38:	bl	2a688 <__assert_fail@plt+0x17a98>
   15c3c:	mov	r4, #0
   15c40:	str	r0, [r7, #104]	; 0x68
   15c44:	mov	r1, r5
   15c48:	mov	r2, #0
   15c4c:	str	r4, [r0, #4]
   15c50:	mov	r0, r6
   15c54:	bl	249f4 <__assert_fail@plt+0x11e04>
   15c58:	ldr	r1, [r7, #104]	; 0x68
   15c5c:	cmp	r0, #0
   15c60:	str	r0, [r1]
   15c64:	bmi	15c74 <__assert_fail@plt+0x3084>
   15c68:	mov	r1, #1
   15c6c:	mov	r4, #1
   15c70:	bl	2117c <__assert_fail@plt+0xe58c>
   15c74:	mov	r0, r4
   15c78:	pop	{r4, r5, r6, r7, fp, pc}
   15c7c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   15c80:	add	fp, sp, #24
   15c84:	movw	r8, #17808	; 0x4590
   15c88:	mov	r5, r0
   15c8c:	cmp	r1, #0
   15c90:	mov	r4, r1
   15c94:	movt	r8, #5
   15c98:	movwne	r4, #16
   15c9c:	ldr	r0, [r8]
   15ca0:	cmp	r0, #0
   15ca4:	beq	15ce8 <__assert_fail@plt+0x30f8>
   15ca8:	movw	r6, #17812	; 0x4594
   15cac:	mov	r7, #0
   15cb0:	movt	r6, #5
   15cb4:	ldr	r0, [r6]
   15cb8:	mov	r2, r4
   15cbc:	ldr	r1, [r0, r7, lsl #2]
   15cc0:	mov	r0, r5
   15cc4:	bl	127dc <fnmatch@plt>
   15cc8:	cmp	r0, #0
   15ccc:	beq	15d08 <__assert_fail@plt+0x3118>
   15cd0:	ldr	r0, [r8]
   15cd4:	add	r7, r7, #1
   15cd8:	cmp	r7, r0
   15cdc:	bcc	15cb4 <__assert_fail@plt+0x30c4>
   15ce0:	mov	r0, #0
   15ce4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   15ce8:	movw	r1, #58388	; 0xe414
   15cec:	mov	r0, r5
   15cf0:	mov	r2, r4
   15cf4:	movt	r1, #3
   15cf8:	bl	127dc <fnmatch@plt>
   15cfc:	clz	r0, r0
   15d00:	lsr	r0, r0, #5
   15d04:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   15d08:	mov	r0, #1
   15d0c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   15d10:	ldr	r3, [r1, #36]	; 0x24
   15d14:	ldr	r2, [r1, #4]
   15d18:	mov	ip, r0
   15d1c:	cmp	r3, #0
   15d20:	beq	15d34 <__assert_fail@plt+0x3144>
   15d24:	movw	r1, #57082	; 0xdefa
   15d28:	mov	r0, ip
   15d2c:	movt	r1, #3
   15d30:	b	128fc <fprintf@plt>
   15d34:	mov	r0, r2
   15d38:	mov	r1, ip
   15d3c:	b	12b84 <fputs@plt>
   15d40:	movw	r0, #17816	; 0x4598
   15d44:	movt	r0, #5
   15d48:	ldr	r0, [r0]
   15d4c:	bx	lr
   15d50:	push	{r4, sl, fp, lr}
   15d54:	add	fp, sp, #8
   15d58:	cmp	r0, #0
   15d5c:	beq	15ed0 <__assert_fail@plt+0x32e0>
   15d60:	mov	r4, r0
   15d64:	ldr	r0, [r0, #160]	; 0xa0
   15d68:	cmp	r0, #0
   15d6c:	blne	15d50 <__assert_fail@plt+0x3160>
   15d70:	ldr	r0, [r4, #156]	; 0x9c
   15d74:	cmp	r0, #0
   15d78:	blne	15d50 <__assert_fail@plt+0x3160>
   15d7c:	ldr	r0, [r4, #8]
   15d80:	cmp	r0, #5
   15d84:	bhi	15ee8 <__assert_fail@plt+0x32f8>
   15d88:	add	r1, pc, #0
   15d8c:	ldr	pc, [r1, r0, lsl #2]
   15d90:	andeq	r5, r1, r8, lsr #27
   15d94:	andeq	r5, r1, r4, ror #28
   15d98:	ldrdeq	r5, [r1], -r4
   15d9c:	andeq	r5, r1, r8, lsl #28
   15da0:	andeq	r5, r1, r0, lsl #30
   15da4:	andeq	r5, r1, r8, lsl pc
   15da8:	ldr	r0, [r4, #160]	; 0xa0
   15dac:	cmp	r0, #0
   15db0:	bne	15f30 <__assert_fail@plt+0x3340>
   15db4:	ldr	r0, [r4, #156]	; 0x9c
   15db8:	cmp	r0, #0
   15dbc:	beq	15e7c <__assert_fail@plt+0x328c>
   15dc0:	movw	r0, #57226	; 0xdf8a
   15dc4:	movw	r1, #57098	; 0xdf0a
   15dc8:	movw	r3, #57105	; 0xdf11
   15dcc:	movw	r2, #1170	; 0x492
   15dd0:	b	15f98 <__assert_fail@plt+0x33a8>
   15dd4:	ldr	r0, [r4]
   15dd8:	movw	r1, #17980	; 0x463c
   15ddc:	movt	r1, #1
   15de0:	cmp	r0, r1
   15de4:	bne	15f44 <__assert_fail@plt+0x3354>
   15de8:	ldr	r0, [r4, #156]	; 0x9c
   15dec:	cmp	r0, #0
   15df0:	bne	15f5c <__assert_fail@plt+0x336c>
   15df4:	ldr	r0, [r4, #160]	; 0xa0
   15df8:	vmov.f32	s2, #112	; 0x3f800000  1.0
   15dfc:	vldr	s0, [r0, #28]
   15e00:	vsub.f32	s0, s2, s0
   15e04:	b	15ec8 <__assert_fail@plt+0x32d8>
   15e08:	ldr	r0, [r4]
   15e0c:	movw	r1, #15704	; 0x3d58
   15e10:	movt	r1, #1
   15e14:	cmp	r0, r1
   15e18:	beq	15e84 <__assert_fail@plt+0x3294>
   15e1c:	movw	r1, #16088	; 0x3ed8
   15e20:	movt	r1, #1
   15e24:	cmp	r0, r1
   15e28:	beq	15eac <__assert_fail@plt+0x32bc>
   15e2c:	movw	r1, #18712	; 0x4918
   15e30:	movt	r1, #1
   15e34:	cmp	r0, r1
   15e38:	bne	15fa8 <__assert_fail@plt+0x33b8>
   15e3c:	ldr	r0, [r4, #160]	; 0xa0
   15e40:	vmov.f32	s0, #112	; 0x3f800000  1.0
   15e44:	vmov.f32	s2, s0
   15e48:	cmp	r0, #0
   15e4c:	vldrne	s2, [r0, #28]
   15e50:	ldr	r0, [r4, #156]	; 0x9c
   15e54:	cmp	r0, #0
   15e58:	vldrne	s0, [r0, #28]
   15e5c:	vadd.f32	s0, s2, s0
   15e60:	b	15eb0 <__assert_fail@plt+0x32c0>
   15e64:	ldr	r0, [r4, #160]	; 0xa0
   15e68:	cmp	r0, #0
   15e6c:	bne	15f70 <__assert_fail@plt+0x3380>
   15e70:	ldr	r0, [r4, #156]	; 0x9c
   15e74:	cmp	r0, #0
   15e78:	bne	15f88 <__assert_fail@plt+0x3398>
   15e7c:	vldr	s0, [r4, #28]
   15e80:	pop	{r4, sl, fp, pc}
   15e84:	ldr	r0, [r4, #160]	; 0xa0
   15e88:	vmov.f32	s0, #112	; 0x3f800000  1.0
   15e8c:	vmov.f32	s2, s0
   15e90:	cmp	r0, #0
   15e94:	vldrne	s2, [r0, #28]
   15e98:	ldr	r0, [r4, #156]	; 0x9c
   15e9c:	cmp	r0, #0
   15ea0:	vldrne	s0, [r0, #28]
   15ea4:	vmul.f32	s0, s2, s0
   15ea8:	b	15eb0 <__assert_fail@plt+0x32c0>
   15eac:	vmov.f32	s0, #112	; 0x3f800000  1.0
   15eb0:	vldr	s2, [pc, #260]	; 15fbc <__assert_fail@plt+0x33cc>
   15eb4:	vmov.f32	s4, #112	; 0x3f800000  1.0
   15eb8:	vcmpe.f32	s0, s4
   15ebc:	vmax.f32	d1, d0, d1
   15ec0:	vmrs	APSR_nzcv, fpscr
   15ec4:	vselgt.f32	s0, s4, s2
   15ec8:	vstr	s0, [r4, #28]
   15ecc:	pop	{r4, sl, fp, pc}
   15ed0:	movw	r0, #57088	; 0xdf00
   15ed4:	movw	r1, #57098	; 0xdf0a
   15ed8:	movw	r3, #57105	; 0xdf11
   15edc:	movw	r2, #1156	; 0x484
   15ee0:	movt	r0, #3
   15ee4:	b	15f9c <__assert_fail@plt+0x33ac>
   15ee8:	movw	r0, #58985	; 0xe669
   15eec:	movw	r1, #57098	; 0xdf0a
   15ef0:	movw	r3, #57105	; 0xdf11
   15ef4:	mov	r2, #1216	; 0x4c0
   15ef8:	movt	r0, #3
   15efc:	b	15f9c <__assert_fail@plt+0x33ac>
   15f00:	movw	r0, #57180	; 0xdf5c
   15f04:	movw	r1, #57098	; 0xdf0a
   15f08:	movw	r3, #57105	; 0xdf11
   15f0c:	movw	r2, #1164	; 0x48c
   15f10:	movt	r0, #3
   15f14:	b	15f9c <__assert_fail@plt+0x33ac>
   15f18:	movw	r0, #57155	; 0xdf43
   15f1c:	movw	r1, #57098	; 0xdf0a
   15f20:	movw	r3, #57105	; 0xdf11
   15f24:	movw	r2, #1163	; 0x48b
   15f28:	movt	r0, #3
   15f2c:	b	15f9c <__assert_fail@plt+0x33ac>
   15f30:	movw	r0, #57204	; 0xdf74
   15f34:	movw	r1, #57098	; 0xdf0a
   15f38:	movw	r3, #57105	; 0xdf11
   15f3c:	movw	r2, #1169	; 0x491
   15f40:	b	15f80 <__assert_fail@plt+0x3390>
   15f44:	movw	r0, #57247	; 0xdf9f
   15f48:	movw	r1, #57098	; 0xdf0a
   15f4c:	movw	r3, #57105	; 0xdf11
   15f50:	movw	r2, #1180	; 0x49c
   15f54:	movt	r0, #3
   15f58:	b	15f9c <__assert_fail@plt+0x33ac>
   15f5c:	movw	r0, #57226	; 0xdf8a
   15f60:	movw	r1, #57098	; 0xdf0a
   15f64:	movw	r3, #57105	; 0xdf11
   15f68:	movw	r2, #1181	; 0x49d
   15f6c:	b	15f98 <__assert_fail@plt+0x33a8>
   15f70:	movw	r0, #57204	; 0xdf74
   15f74:	movw	r1, #57098	; 0xdf0a
   15f78:	movw	r3, #57105	; 0xdf11
   15f7c:	movw	r2, #1174	; 0x496
   15f80:	movt	r0, #3
   15f84:	b	15f9c <__assert_fail@plt+0x33ac>
   15f88:	movw	r0, #57226	; 0xdf8a
   15f8c:	movw	r1, #57098	; 0xdf0a
   15f90:	movw	r3, #57105	; 0xdf11
   15f94:	movw	r2, #1175	; 0x497
   15f98:	movt	r0, #3
   15f9c:	movt	r1, #3
   15fa0:	movt	r3, #3
   15fa4:	bl	12bf0 <__assert_fail@plt>
   15fa8:	movw	r0, #58985	; 0xe669
   15fac:	movw	r1, #57098	; 0xdf0a
   15fb0:	movw	r3, #57105	; 0xdf11
   15fb4:	movw	r2, #1204	; 0x4b4
   15fb8:	b	15ef8 <__assert_fail@plt+0x3308>
   15fbc:	andeq	r0, r0, r0
   15fc0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15fc4:	add	fp, sp, #28
   15fc8:	sub	sp, sp, #28
   15fcc:	movw	r7, #17820	; 0x459c
   15fd0:	mov	r6, r0
   15fd4:	mov	r0, #0
   15fd8:	mov	r4, r1
   15fdc:	str	r2, [sp, #16]
   15fe0:	movt	r7, #5
   15fe4:	cmp	r6, r2
   15fe8:	str	r6, [sp, #24]
   15fec:	str	r0, [r7]
   15ff0:	add	r0, r1, r2, lsl #2
   15ff4:	movw	r1, #17812	; 0x4594
   15ff8:	movt	r1, #5
   15ffc:	str	r0, [r1]
   16000:	ble	16040 <__assert_fail@plt+0x3450>
   16004:	movw	r8, #17808	; 0x4590
   16008:	mov	r5, r2
   1600c:	movt	r8, #5
   16010:	ldr	r0, [r4, r5, lsl #2]
   16014:	mov	r1, #1
   16018:	bl	188c4 <__assert_fail@plt+0x5cd4>
   1601c:	cmp	r0, #0
   16020:	bne	16040 <__assert_fail@plt+0x3450>
   16024:	ldr	r0, [r8]
   16028:	add	r5, r5, #1
   1602c:	cmp	r5, r6
   16030:	str	r5, [sp, #16]
   16034:	add	r0, r0, #1
   16038:	str	r0, [r8]
   1603c:	blt	16010 <__assert_fail@plt+0x3420>
   16040:	movw	r8, #3807	; 0xedf
   16044:	movt	r8, #4
   16048:	mov	r0, r8
   1604c:	bl	1b0e4 <__assert_fail@plt+0x84f4>
   16050:	mov	r6, r0
   16054:	movw	r0, #59065	; 0xe6b9
   16058:	movt	r0, #3
   1605c:	bl	1b0e4 <__assert_fail@plt+0x84f4>
   16060:	mov	r5, r0
   16064:	movw	r0, #57576	; 0xe0e8
   16068:	movt	r0, #3
   1606c:	bl	1b0e4 <__assert_fail@plt+0x84f4>
   16070:	cmp	r6, #0
   16074:	beq	164f0 <__assert_fail@plt+0x3900>
   16078:	cmp	r5, #0
   1607c:	beq	16508 <__assert_fail@plt+0x3918>
   16080:	cmp	r0, #0
   16084:	str	r5, [sp, #8]
   16088:	str	r0, [sp, #12]
   1608c:	beq	16520 <__assert_fail@plt+0x3930>
   16090:	add	r2, sp, #24
   16094:	mov	r0, r6
   16098:	mov	r1, r4
   1609c:	bl	1b28c <__assert_fail@plt+0x869c>
   160a0:	movw	sl, #17824	; 0x45a0
   160a4:	mov	r0, #1
   160a8:	movt	sl, #5
   160ac:	ldr	r2, [sl]
   160b0:	str	r8, [r2, #4]
   160b4:	ldr	r3, [r7]
   160b8:	strb	r0, [r3, #33]	; 0x21
   160bc:	mov	r0, r4
   160c0:	ldr	r1, [sp, #24]
   160c4:	bl	1b0cc <__assert_fail@plt+0x84dc>
   160c8:	ldr	r0, [sl]
   160cc:	bl	15368 <__assert_fail@plt+0x2778>
   160d0:	ldr	r1, [sp, #24]
   160d4:	ldr	r0, [sp, #16]
   160d8:	cmp	r0, r1
   160dc:	bge	16190 <__assert_fail@plt+0x35a0>
   160e0:	mov	r8, #0
   160e4:	movw	r1, #20064	; 0x4e60
   160e8:	movt	r1, #5
   160ec:	strb	r8, [r1, #40]	; 0x28
   160f0:	mov	r1, #0
   160f4:	ldr	r0, [r4, r0, lsl #2]
   160f8:	bl	188c4 <__assert_fail@plt+0x5cd4>
   160fc:	cmp	r0, #0
   16100:	beq	163e8 <__assert_fail@plt+0x37f8>
   16104:	ldr	r0, [sp, #16]
   16108:	ldr	r6, [r4, r0, lsl #2]
   1610c:	mov	r0, r6
   16110:	bl	1b0e4 <__assert_fail@plt+0x84f4>
   16114:	cmp	r0, #0
   16118:	beq	1647c <__assert_fail@plt+0x388c>
   1611c:	mov	r5, r0
   16120:	ldr	r0, [r0]
   16124:	ldr	r9, [sp, #16]
   16128:	mov	r1, r4
   1612c:	add	r2, sp, #16
   16130:	cmp	r0, #4
   16134:	mov	r0, r5
   16138:	addne	r9, r9, #1
   1613c:	strne	r9, [sp, #16]
   16140:	ldr	r3, [r5, #8]
   16144:	blx	r3
   16148:	cmp	r0, #0
   1614c:	beq	16460 <__assert_fail@plt+0x3870>
   16150:	ldr	r0, [sl]
   16154:	str	r6, [r0, #4]
   16158:	ldr	r1, [sp, #16]
   1615c:	cmp	r1, r9
   16160:	bne	1616c <__assert_fail@plt+0x357c>
   16164:	str	r8, [r0, #36]	; 0x24
   16168:	b	16174 <__assert_fail@plt+0x3584>
   1616c:	ldr	r1, [r4, r9, lsl #2]
   16170:	str	r1, [r0, #36]	; 0x24
   16174:	bl	15368 <__assert_fail@plt+0x2778>
   16178:	ldr	r0, [r7]
   1617c:	bl	15368 <__assert_fail@plt+0x2778>
   16180:	ldr	r1, [sp, #24]
   16184:	ldr	r0, [sp, #16]
   16188:	cmp	r0, r1
   1618c:	blt	160e4 <__assert_fail@plt+0x34f4>
   16190:	ldr	r3, [r7]
   16194:	ldr	r2, [sl]
   16198:	mov	r0, r4
   1619c:	bl	1b0e0 <__assert_fail@plt+0x84f0>
   161a0:	ldr	r0, [r7]
   161a4:	ldr	r1, [r0, #152]	; 0x98
   161a8:	cmp	r1, #0
   161ac:	beq	16218 <__assert_fail@plt+0x3628>
   161b0:	mov	r0, r1
   161b4:	bl	18898 <__assert_fail@plt+0x5ca8>
   161b8:	cmp	r0, #0
   161bc:	beq	16258 <__assert_fail@plt+0x3668>
   161c0:	ldr	r0, [sp, #8]
   161c4:	add	r8, sp, #24
   161c8:	mov	r1, r4
   161cc:	mov	r2, r8
   161d0:	bl	1b258 <__assert_fail@plt+0x8668>
   161d4:	ldr	r0, [sl]
   161d8:	movw	r1, #59065	; 0xe6b9
   161dc:	mov	r6, #1
   161e0:	movt	r1, #3
   161e4:	str	r1, [r0, #4]
   161e8:	strb	r6, [r0, #33]	; 0x21
   161ec:	bl	15368 <__assert_fail@plt+0x2778>
   161f0:	ldr	r0, [sp, #12]
   161f4:	mov	r1, r4
   161f8:	mov	r2, r8
   161fc:	bl	1b2c0 <__assert_fail@plt+0x86d0>
   16200:	ldr	r0, [sl]
   16204:	movw	r1, #57575	; 0xe0e7
   16208:	movt	r1, #3
   1620c:	str	r1, [r0, #4]
   16210:	strb	r6, [r0, #33]	; 0x21
   16214:	b	16248 <__assert_fail@plt+0x3658>
   16218:	str	r1, [sl]
   1621c:	str	r1, [r7]
   16220:	str	r0, [sp, #20]
   16224:	bl	2bcbc <__assert_fail@plt+0x190cc>
   16228:	ldr	r0, [sp, #12]
   1622c:	add	r2, sp, #24
   16230:	mov	r1, r4
   16234:	bl	1b2c0 <__assert_fail@plt+0x86d0>
   16238:	ldr	r0, [sl]
   1623c:	movw	r1, #57575	; 0xe0e7
   16240:	movt	r1, #3
   16244:	str	r1, [r0, #4]
   16248:	bl	15368 <__assert_fail@plt+0x2778>
   1624c:	ldr	r0, [r7]
   16250:	bl	15368 <__assert_fail@plt+0x2778>
   16254:	b	16274 <__assert_fail@plt+0x3684>
   16258:	ldr	r0, [r7]
   1625c:	str	r0, [sp, #20]
   16260:	ldr	r0, [r0, #152]	; 0x98
   16264:	str	r0, [r7]
   16268:	bl	15368 <__assert_fail@plt+0x2778>
   1626c:	ldr	r0, [sp, #20]
   16270:	bl	2bcbc <__assert_fail@plt+0x190cc>
   16274:	movw	r5, #20108	; 0x4e8c
   16278:	movt	r5, #5
   1627c:	ldrb	r0, [r5, #44]	; 0x2c
   16280:	tst	r0, #9
   16284:	bne	16320 <__assert_fail@plt+0x3730>
   16288:	ldr	r0, [r7]
   1628c:	bl	1aef0 <__assert_fail@plt+0x8300>
   16290:	ldr	r0, [r7]
   16294:	bl	15368 <__assert_fail@plt+0x2778>
   16298:	ldr	r0, [r7]
   1629c:	mov	r1, #0
   162a0:	mov	r2, #0
   162a4:	str	r0, [sp, #20]
   162a8:	add	r0, sp, #20
   162ac:	bl	165b4 <__assert_fail@plt+0x39c4>
   162b0:	movw	r4, #17816	; 0x4598
   162b4:	movt	r4, #5
   162b8:	str	r0, [r4]
   162bc:	bl	15d50 <__assert_fail@plt+0x3160>
   162c0:	ldr	r0, [sp, #20]
   162c4:	cmp	r0, #0
   162c8:	bne	16540 <__assert_fail@plt+0x3950>
   162cc:	ldrb	r0, [r5, #44]	; 0x2c
   162d0:	tst	r0, #9
   162d4:	bne	16350 <__assert_fail@plt+0x3760>
   162d8:	ldr	r0, [r4]
   162dc:	bl	16bd0 <__assert_fail@plt+0x3fe0>
   162e0:	mov	r0, r4
   162e4:	bl	16dcc <__assert_fail@plt+0x41dc>
   162e8:	ldr	r0, [r4]
   162ec:	mov	r1, #1
   162f0:	bl	172b8 <__assert_fail@plt+0x46c8>
   162f4:	ldr	r0, [r4]
   162f8:	bl	17344 <__assert_fail@plt+0x4754>
   162fc:	ldr	r0, [r4]
   16300:	mov	r1, #1
   16304:	bl	172b8 <__assert_fail@plt+0x46c8>
   16308:	ldrb	r0, [r5, #44]	; 0x2c
   1630c:	tst	r0, #9
   16310:	bne	16384 <__assert_fail@plt+0x3794>
   16314:	ldr	r0, [r4]
   16318:	sub	sp, fp, #28
   1631c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16320:	movw	r4, #17768	; 0x4568
   16324:	movw	r0, #57582	; 0xe0ee
   16328:	mov	r1, #16
   1632c:	mov	r2, #1
   16330:	movt	r4, #5
   16334:	movt	r0, #3
   16338:	ldr	r3, [r4]
   1633c:	bl	12728 <fwrite@plt>
   16340:	ldr	r0, [r4]
   16344:	ldr	r1, [r7]
   16348:	bl	1507c <__assert_fail@plt+0x248c>
   1634c:	b	16288 <__assert_fail@plt+0x3698>
   16350:	movw	r6, #17768	; 0x4568
   16354:	movw	r0, #59078	; 0xe6c6
   16358:	mov	r1, #11
   1635c:	mov	r2, #1
   16360:	movt	r6, #5
   16364:	movt	r0, #3
   16368:	ldr	r3, [r6]
   1636c:	bl	12728 <fwrite@plt>
   16370:	ldr	r0, [r6]
   16374:	ldr	r1, [r4]
   16378:	mov	r2, #0
   1637c:	bl	16858 <__assert_fail@plt+0x3c68>
   16380:	b	162d8 <__assert_fail@plt+0x36e8>
   16384:	movw	r5, #17768	; 0x4568
   16388:	movw	r0, #57658	; 0xe13a
   1638c:	mov	r1, #21
   16390:	mov	r2, #1
   16394:	movt	r5, #5
   16398:	movt	r0, #3
   1639c:	ldr	r3, [r5]
   163a0:	bl	12728 <fwrite@plt>
   163a4:	ldr	r0, [r5]
   163a8:	ldr	r1, [r4]
   163ac:	mov	r2, #0
   163b0:	bl	16858 <__assert_fail@plt+0x3c68>
   163b4:	ldr	r3, [r5]
   163b8:	movw	r0, #57680	; 0xe150
   163bc:	mov	r1, #24
   163c0:	mov	r2, #1
   163c4:	movt	r0, #3
   163c8:	bl	12728 <fwrite@plt>
   163cc:	ldr	r0, [r5]
   163d0:	ldr	r1, [r4]
   163d4:	bl	15130 <__assert_fail@plt+0x2540>
   163d8:	ldr	r1, [r5]
   163dc:	mov	r0, #10
   163e0:	bl	12a70 <fputc@plt>
   163e4:	b	16314 <__assert_fail@plt+0x3724>
   163e8:	movw	r1, #57390	; 0xe02e
   163ec:	mov	r0, #0
   163f0:	mov	r2, #5
   163f4:	movt	r1, #3
   163f8:	bl	12674 <dcgettext@plt>
   163fc:	mov	r2, r0
   16400:	ldr	r0, [sp, #16]
   16404:	mov	r1, #0
   16408:	ldr	r3, [r4, r0, lsl #2]
   1640c:	mov	r0, #0
   16410:	bl	127b8 <error@plt>
   16414:	ldr	r0, [sp, #16]
   16418:	mov	r1, #0
   1641c:	ldr	r0, [r4, r0, lsl #2]
   16420:	bl	129c8 <access@plt>
   16424:	cmp	r0, #0
   16428:	bne	16458 <__assert_fail@plt+0x3868>
   1642c:	movw	r1, #57426	; 0xe052
   16430:	mov	r0, #0
   16434:	mov	r2, #5
   16438:	movt	r1, #3
   1643c:	bl	12674 <dcgettext@plt>
   16440:	mov	r2, r0
   16444:	ldr	r0, [sl]
   16448:	mov	r1, #0
   1644c:	ldr	r3, [r0, #4]
   16450:	mov	r0, #0
   16454:	bl	127b8 <error@plt>
   16458:	mov	r0, #1
   1645c:	bl	12884 <exit@plt>
   16460:	ldr	r0, [sp, #16]
   16464:	ldr	r1, [r4, r0, lsl #2]
   16468:	cmp	r1, #0
   1646c:	bne	164a4 <__assert_fail@plt+0x38b4>
   16470:	movw	r1, #57550	; 0xe0ce
   16474:	movt	r1, #3
   16478:	b	16484 <__assert_fail@plt+0x3894>
   1647c:	movw	r1, #57474	; 0xe082
   16480:	movt	r1, #3
   16484:	mov	r0, #0
   16488:	mov	r2, #5
   1648c:	bl	12674 <dcgettext@plt>
   16490:	mov	r2, r0
   16494:	mov	r0, #1
   16498:	mov	r1, #0
   1649c:	mov	r3, r6
   164a0:	bl	127b8 <error@plt>
   164a4:	cmp	r0, r9
   164a8:	ldreq	r0, [r5]
   164ac:	cmpeq	r0, #4
   164b0:	beq	164e4 <__assert_fail@plt+0x38f4>
   164b4:	movw	r1, #57520	; 0xe0b0
   164b8:	mov	r0, #0
   164bc:	mov	r2, #5
   164c0:	movt	r1, #3
   164c4:	bl	12674 <dcgettext@plt>
   164c8:	mov	r2, r0
   164cc:	ldr	r0, [sp, #16]
   164d0:	ldr	r3, [r4, r0, lsl #2]
   164d4:	str	r6, [sp]
   164d8:	mov	r0, #1
   164dc:	mov	r1, #0
   164e0:	bl	127b8 <error@plt>
   164e4:	movw	r1, #57497	; 0xe099
   164e8:	movt	r1, #3
   164ec:	b	16484 <__assert_fail@plt+0x3894>
   164f0:	movw	r0, #57272	; 0xdfb8
   164f4:	movw	r1, #57098	; 0xdf0a
   164f8:	movw	r3, #57291	; 0xdfcb
   164fc:	movw	r2, #1270	; 0x4f6
   16500:	movt	r0, #3
   16504:	b	16534 <__assert_fail@plt+0x3944>
   16508:	movw	r0, #57350	; 0xe006
   1650c:	movw	r1, #57098	; 0xdf0a
   16510:	movw	r3, #57291	; 0xdfcb
   16514:	movw	r2, #1271	; 0x4f7
   16518:	movt	r0, #3
   1651c:	b	16534 <__assert_fail@plt+0x3944>
   16520:	movw	r0, #57370	; 0xe01a
   16524:	movw	r1, #57098	; 0xdf0a
   16528:	movw	r3, #57291	; 0xdfcb
   1652c:	movw	r2, #1272	; 0x4f8
   16530:	movt	r0, #3
   16534:	movt	r1, #3
   16538:	movt	r3, #3
   1653c:	bl	12bf0 <__assert_fail@plt>
   16540:	ldr	r1, [r0]
   16544:	movw	r2, #15984	; 0x3e70
   16548:	movt	r2, #1
   1654c:	cmp	r1, r2
   16550:	bne	16560 <__assert_fail@plt+0x3970>
   16554:	movw	r1, #58488	; 0xe478
   16558:	movt	r1, #3
   1655c:	b	16574 <__assert_fail@plt+0x3984>
   16560:	ldr	r0, [r0, #4]
   16564:	cmp	r0, #0
   16568:	bne	16590 <__assert_fail@plt+0x39a0>
   1656c:	movw	r1, #57631	; 0xe11f
   16570:	movt	r1, #3
   16574:	mov	r0, #0
   16578:	mov	r2, #5
   1657c:	bl	12674 <dcgettext@plt>
   16580:	mov	r2, r0
   16584:	mov	r0, #1
   16588:	mov	r1, #0
   1658c:	bl	127b8 <error@plt>
   16590:	movw	r1, #57599	; 0xe0ff
   16594:	mov	r0, #0
   16598:	mov	r2, #5
   1659c:	movt	r1, #3
   165a0:	bl	12674 <dcgettext@plt>
   165a4:	mov	r2, r0
   165a8:	ldr	r0, [sp, #20]
   165ac:	ldr	r3, [r0, #4]
   165b0:	b	164d8 <__assert_fail@plt+0x38e8>
   165b4:	push	{r4, r5, r6, r7, fp, lr}
   165b8:	add	fp, sp, #16
   165bc:	ldr	r4, [r0]
   165c0:	cmp	r4, #0
   165c4:	beq	16718 <__assert_fail@plt+0x3b28>
   165c8:	mov	r5, r0
   165cc:	ldr	r0, [r4, #8]
   165d0:	cmp	r0, #5
   165d4:	bhi	1673c <__assert_fail@plt+0x3b4c>
   165d8:	mov	r6, r1
   165dc:	add	r1, pc, #0
   165e0:	ldr	pc, [r1, r0, lsl #2]
   165e4:	andeq	r6, r1, r8, lsl r7
   165e8:	strdeq	r6, [r1], -ip
   165ec:	andeq	r6, r1, r4, lsl #12
   165f0:	andeq	r6, r1, r0, ror #14
   165f4:	andeq	r6, r1, r8, lsr #12
   165f8:	andeq	r6, r1, r8, asr #14
   165fc:	ldr	r2, [r4, #152]	; 0x98
   16600:	b	16680 <__assert_fail@plt+0x3a90>
   16604:	ldr	r0, [r4, #152]	; 0x98
   16608:	mov	r1, #4
   1660c:	mov	r2, r4
   16610:	str	r0, [r5]
   16614:	mov	r0, r5
   16618:	bl	165b4 <__assert_fail@plt+0x39c4>
   1661c:	str	r0, [r4, #160]	; 0xa0
   16620:	ldr	r2, [r5]
   16624:	b	16684 <__assert_fail@plt+0x3a94>
   16628:	ldr	r0, [r4, #152]	; 0x98
   1662c:	cmp	r0, #0
   16630:	beq	1676c <__assert_fail@plt+0x3b7c>
   16634:	ldrb	r1, [r0, #33]	; 0x21
   16638:	cmp	r1, #0
   1663c:	bne	1676c <__assert_fail@plt+0x3b7c>
   16640:	str	r0, [r5]
   16644:	ldr	r0, [r0, #8]
   16648:	cmp	r0, #5
   1664c:	beq	167ec <__assert_fail@plt+0x3bfc>
   16650:	mov	r0, r5
   16654:	mov	r1, #0
   16658:	mov	r2, r4
   1665c:	bl	165b4 <__assert_fail@plt+0x39c4>
   16660:	mov	r4, r0
   16664:	ldr	r0, [r5]
   16668:	cmp	r0, #0
   1666c:	beq	16794 <__assert_fail@plt+0x3ba4>
   16670:	ldr	r1, [r0, #8]
   16674:	cmp	r1, #5
   16678:	bne	16794 <__assert_fail@plt+0x3ba4>
   1667c:	ldr	r2, [r0, #152]	; 0x98
   16680:	str	r2, [r5]
   16684:	cmp	r2, #0
   16688:	beq	16710 <__assert_fail@plt+0x3b20>
   1668c:	ldr	r0, [r2, #12]
   16690:	cmp	r0, r6
   16694:	ble	16710 <__assert_fail@plt+0x3b20>
   16698:	ldr	r0, [r2, #8]
   1669c:	cmp	r0, #5
   166a0:	beq	16718 <__assert_fail@plt+0x3b28>
   166a4:	ldr	r0, [r2, #12]
   166a8:	cmp	r0, r6
   166ac:	ble	16708 <__assert_fail@plt+0x3b18>
   166b0:	ldr	r0, [r2, #8]
   166b4:	cmp	r0, #5
   166b8:	bhi	167a0 <__assert_fail@plt+0x3bb0>
   166bc:	add	r1, pc, #0
   166c0:	ldr	pc, [r1, r0, lsl #2]
   166c4:	andeq	r6, r1, r8, lsl r7
   166c8:	andeq	r6, r1, r8, lsl r7
   166cc:	andeq	r6, r1, r8, lsl r7
   166d0:	ldrdeq	r6, [r1], -ip
   166d4:	andeq	r6, r1, r8, lsl r7
   166d8:	andeq	r6, r1, r8, lsl #14
   166dc:	str	r4, [r2, #156]	; 0x9c
   166e0:	ldr	r4, [r5]
   166e4:	ldr	r0, [r4, #152]	; 0x98
   166e8:	str	r0, [r5]
   166ec:	mov	r0, r5
   166f0:	ldrsh	r1, [r4, #12]
   166f4:	bl	165b4 <__assert_fail@plt+0x39c4>
   166f8:	str	r0, [r4, #160]	; 0xa0
   166fc:	ldr	r2, [r5]
   16700:	cmp	r2, #0
   16704:	bne	166a4 <__assert_fail@plt+0x3ab4>
   16708:	cmp	r4, #0
   1670c:	beq	16718 <__assert_fail@plt+0x3b28>
   16710:	mov	r0, r4
   16714:	pop	{r4, r5, r6, r7, fp, pc}
   16718:	movw	r1, #58217	; 0xe369
   1671c:	movt	r1, #3
   16720:	mov	r0, #0
   16724:	mov	r2, #5
   16728:	bl	12674 <dcgettext@plt>
   1672c:	mov	r2, r0
   16730:	mov	r0, #1
   16734:	mov	r1, #0
   16738:	bl	127b8 <error@plt>
   1673c:	movw	r1, #58756	; 0xe584
   16740:	movt	r1, #3
   16744:	b	16720 <__assert_fail@plt+0x3b30>
   16748:	mov	r7, r2
   1674c:	cmp	r2, #0
   16750:	bne	167c4 <__assert_fail@plt+0x3bd4>
   16754:	movw	r1, #58317	; 0xe3cd
   16758:	movt	r1, #3
   1675c:	b	16774 <__assert_fail@plt+0x3b84>
   16760:	movw	r1, #58236	; 0xe37c
   16764:	movt	r1, #3
   16768:	b	16774 <__assert_fail@plt+0x3b84>
   1676c:	movw	r1, #58510	; 0xe48e
   16770:	movt	r1, #3
   16774:	mov	r0, #0
   16778:	mov	r2, #5
   1677c:	bl	12674 <dcgettext@plt>
   16780:	ldr	r3, [r4, #4]
   16784:	mov	r2, r0
   16788:	mov	r0, #1
   1678c:	mov	r1, #0
   16790:	bl	127b8 <error@plt>
   16794:	movw	r1, #58675	; 0xe533
   16798:	movt	r1, #3
   1679c:	b	16720 <__assert_fail@plt+0x3b30>
   167a0:	movw	r1, #58789	; 0xe5a5
   167a4:	mov	r0, #0
   167a8:	mov	r2, #5
   167ac:	movt	r1, #3
   167b0:	bl	12674 <dcgettext@plt>
   167b4:	mov	r2, r0
   167b8:	ldr	r0, [r5]
   167bc:	ldr	r3, [r0, #8]
   167c0:	b	16788 <__assert_fail@plt+0x3b98>
   167c4:	ldr	r1, [r7, #8]
   167c8:	ldrb	r0, [r4, #33]	; 0x21
   167cc:	bic	r1, r1, #1
   167d0:	cmp	r1, #2
   167d4:	bne	16804 <__assert_fail@plt+0x3c14>
   167d8:	cmp	r0, #0
   167dc:	bne	16818 <__assert_fail@plt+0x3c28>
   167e0:	movw	r1, #58390	; 0xe416
   167e4:	movt	r1, #3
   167e8:	b	16820 <__assert_fail@plt+0x3c30>
   167ec:	ldrb	r0, [r4, #33]	; 0x21
   167f0:	cmp	r0, #0
   167f4:	bne	16834 <__assert_fail@plt+0x3c44>
   167f8:	movw	r1, #58620	; 0xe4fc
   167fc:	movt	r1, #3
   16800:	b	16720 <__assert_fail@plt+0x3b30>
   16804:	cmp	r0, #0
   16808:	bne	16818 <__assert_fail@plt+0x3c28>
   1680c:	movw	r1, #58468	; 0xe464
   16810:	movt	r1, #3
   16814:	b	16720 <__assert_fail@plt+0x3b30>
   16818:	movw	r1, #58434	; 0xe442
   1681c:	movt	r1, #3
   16820:	mov	r0, #0
   16824:	mov	r2, #5
   16828:	bl	12674 <dcgettext@plt>
   1682c:	ldr	r3, [r7, #4]
   16830:	b	16784 <__assert_fail@plt+0x3b94>
   16834:	movw	r1, #58317	; 0xe3cd
   16838:	mov	r0, #0
   1683c:	mov	r2, #5
   16840:	movt	r1, #3
   16844:	bl	12674 <dcgettext@plt>
   16848:	mov	r2, r0
   1684c:	ldr	r0, [r5]
   16850:	ldr	r3, [r0, #4]
   16854:	b	16788 <__assert_fail@plt+0x3b98>
   16858:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1685c:	add	fp, sp, #28
   16860:	sub	sp, sp, #12
   16864:	cmp	r1, #0
   16868:	beq	16b98 <__assert_fail@plt+0x3fa8>
   1686c:	movw	r7, #58061	; 0xe2cd
   16870:	movw	r6, #59776	; 0xe980
   16874:	mov	r8, r2
   16878:	mov	sl, r1
   1687c:	mov	r4, r0
   16880:	movt	r7, #3
   16884:	movt	r6, #3
   16888:	cmp	r8, #1
   1688c:	blt	168b0 <__assert_fail@plt+0x3cc0>
   16890:	mov	r5, r8
   16894:	mov	r0, r7
   16898:	mov	r1, #4
   1689c:	mov	r2, #1
   168a0:	mov	r3, r4
   168a4:	bl	12728 <fwrite@plt>
   168a8:	subs	r5, r5, #1
   168ac:	bne	16894 <__assert_fail@plt+0x3ca4>
   168b0:	movw	r0, #58066	; 0xe2d2
   168b4:	mov	r1, #6
   168b8:	mov	r2, #1
   168bc:	mov	r3, r4
   168c0:	movt	r0, #3
   168c4:	bl	12728 <fwrite@plt>
   168c8:	mov	r0, r4
   168cc:	mov	r1, sl
   168d0:	bl	15d10 <__assert_fail@plt+0x3120>
   168d4:	ldr	r1, [sl, #8]
   168d8:	mov	r0, #0
   168dc:	mov	r2, r6
   168e0:	ldrh	r3, [r2]
   168e4:	uxth	r5, r1
   168e8:	cmp	r3, r5
   168ec:	beq	16904 <__assert_fail@plt+0x3d14>
   168f0:	add	r0, r0, #1
   168f4:	add	r2, r2, #8
   168f8:	cmp	r0, #6
   168fc:	bne	168e0 <__assert_fail@plt+0x3cf0>
   16900:	mov	r0, #6
   16904:	add	r0, r6, r0, lsl #3
   16908:	ldr	r1, [sl, #12]
   1690c:	movw	r3, #59832	; 0xe9b8
   16910:	mov	r9, r6
   16914:	movt	r3, #3
   16918:	ldr	r2, [r0, #4]
   1691c:	mov	r0, #0
   16920:	ldrh	r5, [r3]
   16924:	uxth	r6, r1
   16928:	cmp	r5, r6
   1692c:	beq	16944 <__assert_fail@plt+0x3d54>
   16930:	add	r0, r0, #1
   16934:	add	r3, r3, #8
   16938:	cmp	r0, #6
   1693c:	bne	16920 <__assert_fail@plt+0x3d30>
   16940:	mov	r0, #6
   16944:	movw	r1, #59832	; 0xe9b8
   16948:	movw	r5, #17076	; 0x42b4
   1694c:	movt	r1, #3
   16950:	movt	r5, #5
   16954:	add	r0, r1, r0, lsl #3
   16958:	movw	r1, #58073	; 0xe2d9
   1695c:	movt	r1, #3
   16960:	ldr	r3, [r0, #4]
   16964:	mov	r0, r4
   16968:	bl	128fc <fprintf@plt>
   1696c:	ldr	r1, [sl, #24]
   16970:	mov	r0, #0
   16974:	ldr	r2, [r5, r0, lsl #3]
   16978:	cmp	r2, r1
   1697c:	beq	16998 <__assert_fail@plt+0x3da8>
   16980:	add	r0, r0, #1
   16984:	cmp	r0, #11
   16988:	bne	16974 <__assert_fail@plt+0x3d84>
   1698c:	movw	r2, #59740	; 0xe95c
   16990:	movt	r2, #3
   16994:	b	169a0 <__assert_fail@plt+0x3db0>
   16998:	add	r0, r5, r0, lsl #3
   1699c:	ldr	r2, [r0, #4]
   169a0:	vldr	s0, [sl, #28]
   169a4:	ldrb	r0, [sl, #16]
   169a8:	movw	r5, #61759	; 0xf13f
   169ac:	movw	r1, #58139	; 0xe31b
   169b0:	mov	r6, r9
   169b4:	movt	r5, #3
   169b8:	movt	r1, #3
   169bc:	cmp	r0, #0
   169c0:	mov	r0, r5
   169c4:	vcvt.f64.f32	d16, s0
   169c8:	moveq	r0, r1
   169cc:	movw	r1, #58091	; 0xe2eb
   169d0:	movt	r1, #3
   169d4:	str	r0, [sp, #8]
   169d8:	mov	r0, r4
   169dc:	vstr	d16, [sp]
   169e0:	bl	128fc <fprintf@plt>
   169e4:	ldrb	r0, [sl, #18]
   169e8:	cmp	r0, #0
   169ec:	bne	16a08 <__assert_fail@plt+0x3e18>
   169f0:	ldrb	r0, [sl, #19]
   169f4:	cmp	r0, #0
   169f8:	bne	16a08 <__assert_fail@plt+0x3e18>
   169fc:	ldrb	r0, [sl, #20]
   16a00:	cmp	r0, #0
   16a04:	beq	16aac <__assert_fail@plt+0x3ebc>
   16a08:	movw	r0, #58143	; 0xe31f
   16a0c:	mov	r1, #6
   16a10:	mov	r2, #1
   16a14:	mov	r3, r4
   16a18:	movt	r0, #3
   16a1c:	bl	12728 <fwrite@plt>
   16a20:	ldrb	r0, [sl, #18]
   16a24:	cmp	r0, #0
   16a28:	beq	16a4c <__assert_fail@plt+0x3e5c>
   16a2c:	movw	r0, #352	; 0x160
   16a30:	mov	r1, #4
   16a34:	mov	r2, #1
   16a38:	mov	r3, r4
   16a3c:	mov	r9, #1
   16a40:	movt	r0, #4
   16a44:	bl	12728 <fwrite@plt>
   16a48:	b	16a50 <__assert_fail@plt+0x3e60>
   16a4c:	mov	r9, #0
   16a50:	ldrb	r0, [sl, #20]
   16a54:	cmp	r0, #0
   16a58:	beq	16a80 <__assert_fail@plt+0x3e90>
   16a5c:	movw	r1, #58150	; 0xe326
   16a60:	movw	r2, #58158	; 0xe32e
   16a64:	cmp	r9, #0
   16a68:	mov	r0, r4
   16a6c:	movt	r1, #3
   16a70:	movt	r2, #3
   16a74:	moveq	r2, r5
   16a78:	bl	128fc <fprintf@plt>
   16a7c:	mov	r9, #1
   16a80:	ldrb	r0, [sl, #19]
   16a84:	cmp	r0, #0
   16a88:	beq	16aac <__assert_fail@plt+0x3ebc>
   16a8c:	movw	r1, #58160	; 0xe330
   16a90:	movw	r2, #58158	; 0xe32e
   16a94:	cmp	r9, #0
   16a98:	mov	r0, r4
   16a9c:	movt	r1, #3
   16aa0:	movt	r2, #3
   16aa4:	moveq	r2, r5
   16aa8:	bl	128fc <fprintf@plt>
   16aac:	mov	r0, #10
   16ab0:	mov	r1, r4
   16ab4:	bl	12a70 <fputc@plt>
   16ab8:	cmp	r8, #1
   16abc:	blt	16ae0 <__assert_fail@plt+0x3ef0>
   16ac0:	mov	r5, r8
   16ac4:	mov	r0, r7
   16ac8:	mov	r1, #4
   16acc:	mov	r2, #1
   16ad0:	mov	r3, r4
   16ad4:	bl	12728 <fwrite@plt>
   16ad8:	subs	r5, r5, #1
   16adc:	bne	16ac4 <__assert_fail@plt+0x3ed4>
   16ae0:	ldr	r0, [sl, #156]	; 0x9c
   16ae4:	cmp	r0, #0
   16ae8:	beq	16b18 <__assert_fail@plt+0x3f28>
   16aec:	movw	r0, #58181	; 0xe345
   16af0:	mov	r1, #6
   16af4:	mov	r2, #1
   16af8:	mov	r3, r4
   16afc:	movt	r0, #3
   16b00:	bl	12728 <fwrite@plt>
   16b04:	ldr	r1, [sl, #156]	; 0x9c
   16b08:	add	r2, r8, #1
   16b0c:	mov	r0, r4
   16b10:	bl	16858 <__assert_fail@plt+0x3c68>
   16b14:	b	16b3c <__assert_fail@plt+0x3f4c>
   16b18:	ldr	r0, [sl, #160]	; 0xa0
   16b1c:	cmp	r0, #0
   16b20:	beq	16bb0 <__assert_fail@plt+0x3fc0>
   16b24:	movw	r0, #58188	; 0xe34c
   16b28:	mov	r1, #9
   16b2c:	mov	r2, #1
   16b30:	mov	r3, r4
   16b34:	movt	r0, #3
   16b38:	bl	12728 <fwrite@plt>
   16b3c:	cmp	r8, #1
   16b40:	blt	16b64 <__assert_fail@plt+0x3f74>
   16b44:	mov	r5, r8
   16b48:	mov	r0, r7
   16b4c:	mov	r1, #4
   16b50:	mov	r2, #1
   16b54:	mov	r3, r4
   16b58:	bl	12728 <fwrite@plt>
   16b5c:	subs	r5, r5, #1
   16b60:	bne	16b48 <__assert_fail@plt+0x3f58>
   16b64:	ldr	r0, [sl, #160]	; 0xa0
   16b68:	cmp	r0, #0
   16b6c:	beq	16ba0 <__assert_fail@plt+0x3fb0>
   16b70:	movw	r0, #58198	; 0xe356
   16b74:	mov	r1, #7
   16b78:	mov	r2, #1
   16b7c:	mov	r3, r4
   16b80:	movt	r0, #3
   16b84:	bl	12728 <fwrite@plt>
   16b88:	ldr	sl, [sl, #160]	; 0xa0
   16b8c:	add	r8, r8, #1
   16b90:	cmp	sl, #0
   16b94:	bne	16888 <__assert_fail@plt+0x3c98>
   16b98:	sub	sp, fp, #28
   16b9c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16ba0:	movw	r0, #58206	; 0xe35e
   16ba4:	mov	r1, #10
   16ba8:	movt	r0, #3
   16bac:	b	16bbc <__assert_fail@plt+0x3fcc>
   16bb0:	movw	r0, #58167	; 0xe337
   16bb4:	mov	r1, #13
   16bb8:	movt	r0, #3
   16bbc:	mov	r2, #1
   16bc0:	mov	r3, r4
   16bc4:	sub	sp, fp, #28
   16bc8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16bcc:	b	12728 <fwrite@plt>
   16bd0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16bd4:	add	fp, sp, #28
   16bd8:	sub	sp, sp, #20
   16bdc:	cmp	r0, #0
   16be0:	beq	16d90 <__assert_fail@plt+0x41a0>
   16be4:	mov	r4, r0
   16be8:	ldr	r0, [r0, #160]	; 0xa0
   16bec:	bl	16bd0 <__assert_fail@plt+0x3fe0>
   16bf0:	ldr	r0, [r4, #156]	; 0x9c
   16bf4:	bl	16bd0 <__assert_fail@plt+0x3fe0>
   16bf8:	ldrb	r0, [r4, #18]
   16bfc:	mov	r5, #3
   16c00:	cmp	r0, #0
   16c04:	bne	16c20 <__assert_fail@plt+0x4030>
   16c08:	ldrb	r0, [r4, #20]
   16c0c:	mov	r5, #1
   16c10:	cmp	r0, #0
   16c14:	bne	16c20 <__assert_fail@plt+0x4030>
   16c18:	ldrb	r0, [r4, #19]
   16c1c:	lsl	r5, r0, #1
   16c20:	ldr	r0, [r4]
   16c24:	movw	r1, #16904	; 0x4208
   16c28:	movt	r1, #1
   16c2c:	cmp	r0, r1
   16c30:	movwne	r1, #16908	; 0x420c
   16c34:	movtne	r1, #1
   16c38:	cmpne	r0, r1
   16c3c:	bne	16c54 <__assert_fail@plt+0x4064>
   16c40:	ldrb	r1, [r4, #40]	; 0x28
   16c44:	mov	r0, #7
   16c48:	cmp	r1, #0
   16c4c:	movweq	r0, #8
   16c50:	b	16d84 <__assert_fail@plt+0x4194>
   16c54:	movw	r1, #39680	; 0x9b00
   16c58:	movt	r1, #1
   16c5c:	cmp	r0, r1
   16c60:	beq	16d50 <__assert_fail@plt+0x4160>
   16c64:	movw	r1, #17832	; 0x45a8
   16c68:	movt	r1, #5
   16c6c:	ldrb	r1, [r1]
   16c70:	cmp	r1, #0
   16c74:	bne	16d18 <__assert_fail@plt+0x4128>
   16c78:	movw	sl, #17164	; 0x430c
   16c7c:	movw	r3, #30620	; 0x779c
   16c80:	mov	r1, #59	; 0x3b
   16c84:	mov	r2, #8
   16c88:	str	r5, [sp, #4]
   16c8c:	movt	sl, #5
   16c90:	movt	r3, #1
   16c94:	mov	r0, sl
   16c98:	bl	12af4 <qsort@plt>
   16c9c:	mov	r5, #0
   16ca0:	add	r6, sp, #8
   16ca4:	add	r7, sp, #16
   16ca8:	mov	r0, sl
   16cac:	mov	r1, r7
   16cb0:	mov	r2, #4
   16cb4:	ldr	r9, [r0, r5, lsl #3]!
   16cb8:	ldr	r8, [r0, #8]
   16cbc:	mov	r0, r6
   16cc0:	str	r9, [sp, #16]
   16cc4:	str	r8, [sp, #8]
   16cc8:	bl	12650 <memcmp@plt>
   16ccc:	cmp	r0, #0
   16cd0:	bmi	16d98 <__assert_fail@plt+0x41a8>
   16cd4:	mov	r0, r6
   16cd8:	mov	r1, r7
   16cdc:	mov	r2, #4
   16ce0:	str	r9, [sp, #8]
   16ce4:	str	r8, [sp, #16]
   16ce8:	bl	12650 <memcmp@plt>
   16cec:	cmp	r0, #1
   16cf0:	bge	16dac <__assert_fail@plt+0x41bc>
   16cf4:	add	r5, r5, #1
   16cf8:	cmp	r5, #58	; 0x3a
   16cfc:	bne	16ca8 <__assert_fail@plt+0x40b8>
   16d00:	movw	r1, #17832	; 0x45a8
   16d04:	mov	r0, #1
   16d08:	ldr	r5, [sp, #4]
   16d0c:	movt	r1, #5
   16d10:	strb	r0, [r1]
   16d14:	ldr	r0, [r4]
   16d18:	movw	r1, #30620	; 0x779c
   16d1c:	str	r0, [sp, #8]
   16d20:	add	r0, sp, #8
   16d24:	mov	r2, #59	; 0x3b
   16d28:	mov	r3, #8
   16d2c:	movt	r1, #1
   16d30:	str	r1, [sp]
   16d34:	movw	r1, #17164	; 0x430c
   16d38:	movt	r1, #5
   16d3c:	bl	12944 <bsearch@plt>
   16d40:	cmp	r0, #0
   16d44:	beq	16d58 <__assert_fail@plt+0x4168>
   16d48:	ldr	r0, [r0, #4]
   16d4c:	b	16d84 <__assert_fail@plt+0x4194>
   16d50:	ldr	r0, [r4, #24]
   16d54:	b	16d84 <__assert_fail@plt+0x4194>
   16d58:	movw	r1, #58863	; 0xe5ef
   16d5c:	mov	r0, #0
   16d60:	mov	r2, #5
   16d64:	movt	r1, #3
   16d68:	bl	12674 <dcgettext@plt>
   16d6c:	ldr	r3, [r4, #4]
   16d70:	mov	r2, r0
   16d74:	mov	r0, #0
   16d78:	mov	r1, #0
   16d7c:	bl	127b8 <error@plt>
   16d80:	mov	r0, #10
   16d84:	cmp	r0, r5
   16d88:	movhi	r5, r0
   16d8c:	str	r5, [r4, #24]
   16d90:	sub	sp, fp, #28
   16d94:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16d98:	movw	r2, #58827	; 0xe5cb
   16d9c:	mov	r0, #1
   16da0:	mov	r1, #0
   16da4:	movt	r2, #3
   16da8:	bl	127b8 <error@plt>
   16dac:	movw	r0, #58975	; 0xe65f
   16db0:	movw	r1, #57098	; 0xdf0a
   16db4:	movw	r3, #58987	; 0xe66b
   16db8:	movw	r2, #1013	; 0x3f5
   16dbc:	movt	r0, #3
   16dc0:	movt	r1, #3
   16dc4:	movt	r3, #3
   16dc8:	bl	12bf0 <__assert_fail@plt>
   16dcc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16dd0:	add	fp, sp, #28
   16dd4:	sub	sp, sp, #124	; 0x7c
   16dd8:	mov	r5, #0
   16ddc:	cmp	r0, #0
   16de0:	str	r5, [fp, #-36]	; 0xffffffdc
   16de4:	str	r5, [fp, #-40]	; 0xffffffd8
   16de8:	str	r5, [fp, #-44]	; 0xffffffd4
   16dec:	str	r5, [fp, #-48]	; 0xffffffd0
   16df0:	beq	17254 <__assert_fail@plt+0x4664>
   16df4:	ldr	r4, [r0]
   16df8:	mov	sl, r0
   16dfc:	cmp	r4, #0
   16e00:	beq	17254 <__assert_fail@plt+0x4664>
   16e04:	add	r6, sp, #16
   16e08:	mov	r1, #0
   16e0c:	mov	r2, #88	; 0x58
   16e10:	mov	r0, r6
   16e14:	bl	12938 <memset@plt>
   16e18:	mov	r0, r4
   16e1c:	ldr	r1, [r0, #156]!	; 0x9c
   16e20:	cmp	r1, #0
   16e24:	beq	16e4c <__assert_fail@plt+0x425c>
   16e28:	mov	r2, r0
   16e2c:	mov	r0, r1
   16e30:	mov	r3, r4
   16e34:	mov	r4, r1
   16e38:	ldr	r1, [r0, #156]!	; 0x9c
   16e3c:	cmp	r1, #0
   16e40:	bne	16e28 <__assert_fail@plt+0x4238>
   16e44:	ldr	r1, [r3, #12]
   16e48:	b	16e54 <__assert_fail@plt+0x4264>
   16e4c:	mov	r1, #3
   16e50:	mov	r2, sl
   16e54:	ldr	r0, [r4, #8]
   16e58:	cmp	r0, #3
   16e5c:	movne	r0, r4
   16e60:	blne	177d0 <__assert_fail@plt+0x4be0>
   16e64:	movw	r0, #20108	; 0x4e8c
   16e68:	movt	r0, #5
   16e6c:	ldrb	r0, [r0, #44]	; 0x2c
   16e70:	tst	r0, #9
   16e74:	bne	17260 <__assert_fail@plt+0x4670>
   16e78:	ldr	r0, [sl]
   16e7c:	cmp	r0, #0
   16e80:	beq	17224 <__assert_fail@plt+0x4634>
   16e84:	ldr	r1, [r0, #8]
   16e88:	mov	r7, #0
   16e8c:	mov	lr, #0
   16e90:	mov	r9, #0
   16e94:	cmp	r1, #3
   16e98:	mov	r1, #0
   16e9c:	ldreq	r7, [r0, #12]
   16ea0:	str	r1, [sp, #4]
   16ea4:	str	r7, [sp, #12]
   16ea8:	mov	r5, lr
   16eac:	mov	r8, r0
   16eb0:	str	r9, [sp, #8]
   16eb4:	ldr	r0, [r8, #8]
   16eb8:	cmp	r0, #3
   16ebc:	bne	16eec <__assert_fail@plt+0x42fc>
   16ec0:	ldr	r0, [r8, #12]
   16ec4:	cmp	r0, r7
   16ec8:	beq	16eec <__assert_fail@plt+0x42fc>
   16ecc:	mov	r0, r8
   16ed0:	mov	r1, r7
   16ed4:	mov	r2, sl
   16ed8:	mov	r4, lr
   16edc:	bl	177d0 <__assert_fail@plt+0x4be0>
   16ee0:	ldr	r7, [sp, #12]
   16ee4:	mov	lr, r4
   16ee8:	mov	r8, r0
   16eec:	mov	r4, r8
   16ef0:	ldr	r1, [r4, #160]!	; 0xa0
   16ef4:	ldr	r0, [r1, #8]
   16ef8:	cmp	r0, #2
   16efc:	bcs	17190 <__assert_fail@plt+0x45a0>
   16f00:	ldrb	r0, [r1, #16]
   16f04:	cmp	r7, #1
   16f08:	beq	17208 <__assert_fail@plt+0x4618>
   16f0c:	cmp	r0, #0
   16f10:	bne	17210 <__assert_fail@plt+0x4620>
   16f14:	ldr	r0, [r1]
   16f18:	movw	r2, #17688	; 0x4518
   16f1c:	movt	r2, #1
   16f20:	cmp	r0, r2
   16f24:	movwne	r2, #17472	; 0x4440
   16f28:	movtne	r2, #1
   16f2c:	cmpne	r0, r2
   16f30:	beq	16f50 <__assert_fail@plt+0x4360>
   16f34:	movw	r2, #17968	; 0x4630
   16f38:	movt	r2, #1
   16f3c:	cmp	r0, r2
   16f40:	movwne	r2, #18792	; 0x4968
   16f44:	movtne	r2, #1
   16f48:	cmpne	r0, r2
   16f4c:	bne	16f90 <__assert_fail@plt+0x43a0>
   16f50:	movw	r0, #20108	; 0x4e8c
   16f54:	movt	r0, #5
   16f58:	ldrb	r0, [r0, #44]	; 0x2c
   16f5c:	tst	r0, #8
   16f60:	bne	170a8 <__assert_fail@plt+0x44b8>
   16f64:	ldr	r0, [r8, #156]	; 0x9c
   16f68:	cmp	r5, #0
   16f6c:	moveq	r5, r8
   16f70:	str	r0, [sl]
   16f74:	ldr	r0, [fp, #-48]	; 0xffffffd0
   16f78:	str	r0, [r8, #156]	; 0x9c
   16f7c:	str	r8, [fp, #-48]	; 0xffffffd0
   16f80:	ldr	r8, [sl]
   16f84:	cmp	r8, #0
   16f88:	bne	16eb4 <__assert_fail@plt+0x42c4>
   16f8c:	b	17234 <__assert_fail@plt+0x4644>
   16f90:	movw	r2, #20108	; 0x4e8c
   16f94:	movt	r2, #5
   16f98:	ldrh	r2, [r2, #68]	; 0x44
   16f9c:	cmp	r2, #0
   16fa0:	beq	16fe8 <__assert_fail@plt+0x43f8>
   16fa4:	movw	r3, #18712	; 0x4918
   16fa8:	movt	r3, #1
   16fac:	cmp	r0, r3
   16fb0:	movwne	r3, #16088	; 0x3ed8
   16fb4:	movtne	r3, #1
   16fb8:	cmpne	r0, r3
   16fbc:	beq	16fe8 <__assert_fail@plt+0x43f8>
   16fc0:	movw	r3, #15704	; 0x3d58
   16fc4:	movt	r3, #1
   16fc8:	cmp	r0, r3
   16fcc:	movwne	r3, #17980	; 0x463c
   16fd0:	movtne	r3, #1
   16fd4:	cmpne	r0, r3
   16fd8:	beq	16fe8 <__assert_fail@plt+0x43f8>
   16fdc:	ldr	r3, [r1, #24]
   16fe0:	cmp	r3, #0
   16fe4:	beq	16f50 <__assert_fail@plt+0x4360>
   16fe8:	movw	r3, #19340	; 0x4b8c
   16fec:	movt	r3, #1
   16ff0:	cmp	r0, r3
   16ff4:	beq	1703c <__assert_fail@plt+0x444c>
   16ff8:	mov	r0, #0
   16ffc:	cmp	r2, #2
   17000:	bcc	17214 <__assert_fail@plt+0x4624>
   17004:	ldr	r3, [r1, #24]
   17008:	movw	ip, #20108	; 0x4e8c
   1700c:	mov	r7, r6
   17010:	movt	ip, #5
   17014:	sub	r6, r3, #1
   17018:	cmp	r6, #1
   1701c:	bhi	1705c <__assert_fail@plt+0x446c>
   17020:	cmp	r2, #2
   17024:	mov	r6, r7
   17028:	bhi	17068 <__assert_fail@plt+0x4478>
   1702c:	ldrb	r1, [r1, #18]
   17030:	cmp	r1, #0
   17034:	beq	17068 <__assert_fail@plt+0x4478>
   17038:	b	17214 <__assert_fail@plt+0x4624>
   1703c:	ldr	r0, [r8, #156]	; 0x9c
   17040:	cmp	r9, #0
   17044:	moveq	r9, r8
   17048:	str	r0, [sl]
   1704c:	ldr	r0, [fp, #-40]	; 0xffffffd8
   17050:	str	r0, [r8, #156]	; 0x9c
   17054:	str	r8, [fp, #-40]	; 0xffffffd8
   17058:	b	16f80 <__assert_fail@plt+0x4390>
   1705c:	cmp	r2, #3
   17060:	mov	r6, r7
   17064:	bcc	17214 <__assert_fail@plt+0x4624>
   17068:	mov	r0, ip
   1706c:	ldrb	r0, [ip, #44]	; 0x2c
   17070:	tst	r0, #8
   17074:	bne	17104 <__assert_fail@plt+0x4514>
   17078:	ldr	r0, [r8, #156]	; 0x9c
   1707c:	ldr	r7, [sp, #12]
   17080:	str	r0, [sl]
   17084:	ldr	r0, [r6, r3, lsl #3]
   17088:	str	r0, [r8, #156]	; 0x9c
   1708c:	add	r0, r6, r3, lsl #3
   17090:	str	r8, [r6, r3, lsl #3]
   17094:	ldr	r1, [r0, #4]
   17098:	cmp	r1, #0
   1709c:	orreq	r0, r0, #4
   170a0:	streq	r8, [r0]
   170a4:	b	16f80 <__assert_fail@plt+0x4390>
   170a8:	movw	r0, #20108	; 0x4e8c
   170ac:	movw	r1, #59090	; 0xe6d2
   170b0:	str	lr, [sp]
   170b4:	movt	r0, #5
   170b8:	movt	r1, #3
   170bc:	ldrh	r2, [r0, #68]	; 0x44
   170c0:	movw	r0, #17768	; 0x4568
   170c4:	movt	r0, #5
   170c8:	mov	r7, r0
   170cc:	ldr	r0, [r0]
   170d0:	bl	128fc <fprintf@plt>
   170d4:	ldr	r0, [r7]
   170d8:	ldr	r1, [r4]
   170dc:	bl	15d10 <__assert_fail@plt+0x3120>
   170e0:	ldr	r3, [r7]
   170e4:	movw	r0, #59123	; 0xe6f3
   170e8:	mov	r1, #16
   170ec:	mov	r2, #1
   170f0:	movt	r0, #3
   170f4:	bl	12728 <fwrite@plt>
   170f8:	ldr	lr, [sp]
   170fc:	ldr	r7, [sp, #12]
   17100:	b	16f64 <__assert_fail@plt+0x4374>
   17104:	movw	r0, #17768	; 0x4568
   17108:	movw	r1, #59140	; 0xe704
   1710c:	str	lr, [sp]
   17110:	movt	r0, #5
   17114:	movt	r1, #3
   17118:	mov	r7, r0
   1711c:	ldr	r0, [r0]
   17120:	bl	128fc <fprintf@plt>
   17124:	ldr	r0, [r7]
   17128:	ldr	r1, [r4]
   1712c:	bl	15d10 <__assert_fail@plt+0x3120>
   17130:	ldr	r1, [r4]
   17134:	ldr	r0, [r7]
   17138:	movw	r7, #17076	; 0x42b4
   1713c:	movt	r7, #5
   17140:	ldr	r2, [r1, #24]
   17144:	mov	r1, #0
   17148:	ldr	r3, [r7, r1, lsl #3]
   1714c:	cmp	r3, r2
   17150:	beq	1716c <__assert_fail@plt+0x457c>
   17154:	add	r1, r1, #1
   17158:	cmp	r1, #11
   1715c:	bne	17148 <__assert_fail@plt+0x4558>
   17160:	movw	r2, #59740	; 0xe95c
   17164:	movt	r2, #3
   17168:	b	17174 <__assert_fail@plt+0x4584>
   1716c:	add	r1, r7, r1, lsl #3
   17170:	ldr	r2, [r1, #4]
   17174:	movw	r1, #59170	; 0xe722
   17178:	movt	r1, #3
   1717c:	bl	128fc <fprintf@plt>
   17180:	ldr	r0, [r4]
   17184:	ldr	lr, [sp]
   17188:	ldr	r3, [r0, #24]
   1718c:	b	17078 <__assert_fail@plt+0x4488>
   17190:	beq	171ac <__assert_fail@plt+0x45bc>
   17194:	cmp	r0, #3
   17198:	bne	17294 <__assert_fail@plt+0x46a4>
   1719c:	str	r5, [fp, #-44]	; 0xffffffd4
   171a0:	str	r9, [fp, #-36]	; 0xffffffdc
   171a4:	mov	r0, r4
   171a8:	b	171b8 <__assert_fail@plt+0x45c8>
   171ac:	add	r0, r1, #160	; 0xa0
   171b0:	str	r5, [fp, #-44]	; 0xffffffd4
   171b4:	str	r9, [fp, #-36]	; 0xffffffdc
   171b8:	bl	16dcc <__assert_fail@plt+0x41dc>
   171bc:	ldr	r1, [r4]
   171c0:	strb	r0, [r1, #16]
   171c4:	cmp	r0, #0
   171c8:	beq	171e8 <__assert_fail@plt+0x45f8>
   171cc:	mov	r0, r6
   171d0:	sub	r1, fp, #48	; 0x30
   171d4:	sub	r2, fp, #40	; 0x28
   171d8:	mov	r3, sl
   171dc:	bl	17890 <__assert_fail@plt+0x4ca0>
   171e0:	mov	r0, #1
   171e4:	str	r0, [sp, #4]
   171e8:	ldr	r0, [r8, #156]!	; 0x9c
   171ec:	cmp	r0, #0
   171f0:	beq	1722c <__assert_fail@plt+0x463c>
   171f4:	ldr	lr, [fp, #-44]	; 0xffffffd4
   171f8:	ldr	r9, [fp, #-36]	; 0xffffffdc
   171fc:	ldr	r7, [sp, #12]
   17200:	mov	sl, r8
   17204:	b	16ea8 <__assert_fail@plt+0x42b8>
   17208:	ldr	r9, [sp, #8]
   1720c:	b	17218 <__assert_fail@plt+0x4628>
   17210:	mov	r0, #1
   17214:	mov	lr, r5
   17218:	str	lr, [fp, #-44]	; 0xffffffd4
   1721c:	str	r9, [fp, #-36]	; 0xffffffdc
   17220:	b	171c4 <__assert_fail@plt+0x45d4>
   17224:	mov	r5, #0
   17228:	b	17240 <__assert_fail@plt+0x4650>
   1722c:	mov	sl, r8
   17230:	b	1723c <__assert_fail@plt+0x464c>
   17234:	str	r5, [fp, #-44]	; 0xffffffd4
   17238:	str	r9, [fp, #-36]	; 0xffffffdc
   1723c:	ldr	r5, [sp, #4]
   17240:	add	r0, sp, #16
   17244:	sub	r1, fp, #48	; 0x30
   17248:	sub	r2, fp, #40	; 0x28
   1724c:	mov	r3, sl
   17250:	bl	17890 <__assert_fail@plt+0x4ca0>
   17254:	and	r0, r5, #1
   17258:	sub	sp, fp, #28
   1725c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17260:	movw	r4, #17768	; 0x4568
   17264:	movw	r0, #59067	; 0xe6bb
   17268:	mov	r1, #22
   1726c:	mov	r2, #1
   17270:	movt	r4, #5
   17274:	movt	r0, #3
   17278:	ldr	r3, [r4]
   1727c:	bl	12728 <fwrite@plt>
   17280:	ldr	r0, [r4]
   17284:	ldr	r1, [sl]
   17288:	mov	r2, #0
   1728c:	bl	16858 <__assert_fail@plt+0x3c68>
   17290:	b	16e78 <__assert_fail@plt+0x4288>
   17294:	movw	r1, #58756	; 0xe584
   17298:	mov	r0, #0
   1729c:	mov	r2, #5
   172a0:	movt	r1, #3
   172a4:	bl	12674 <dcgettext@plt>
   172a8:	mov	r2, r0
   172ac:	mov	r0, #1
   172b0:	mov	r1, #0
   172b4:	bl	127b8 <error@plt>
   172b8:	push	{r4, sl, fp, lr}
   172bc:	add	fp, sp, #8
   172c0:	mov	r4, r0
   172c4:	tst	r1, #1
   172c8:	beq	172d8 <__assert_fail@plt+0x46e8>
   172cc:	ldr	r0, [r4, #8]
   172d0:	cmp	r0, #3
   172d4:	bne	17324 <__assert_fail@plt+0x4734>
   172d8:	ldr	r0, [r4, #156]	; 0x9c
   172dc:	cmp	r0, #0
   172e0:	beq	172f8 <__assert_fail@plt+0x4708>
   172e4:	ldr	r1, [r0, #8]
   172e8:	cmp	r1, #3
   172ec:	bne	1730c <__assert_fail@plt+0x471c>
   172f0:	mov	r1, #0
   172f4:	bl	172b8 <__assert_fail@plt+0x46c8>
   172f8:	ldr	r4, [r4, #160]	; 0xa0
   172fc:	mov	r1, #0
   17300:	cmp	r4, #0
   17304:	bne	172c4 <__assert_fail@plt+0x46d4>
   17308:	pop	{r4, sl, fp, pc}
   1730c:	movw	r0, #59317	; 0xe7b5
   17310:	movw	r1, #57098	; 0xdf0a
   17314:	movw	r3, #59265	; 0xe781
   17318:	movw	r2, #1235	; 0x4d3
   1731c:	movt	r0, #3
   17320:	b	17338 <__assert_fail@plt+0x4748>
   17324:	movw	r0, #59246	; 0xe76e
   17328:	movw	r1, #57098	; 0xdf0a
   1732c:	movw	r3, #59265	; 0xe781
   17330:	movw	r2, #1230	; 0x4ce
   17334:	movt	r0, #3
   17338:	movt	r1, #3
   1733c:	movt	r3, #3
   17340:	bl	12bf0 <__assert_fail@plt>
   17344:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17348:	add	fp, sp, #28
   1734c:	sub	sp, sp, #4
   17350:	vpush	{d8-d9}
   17354:	sub	sp, sp, #8
   17358:	cmp	r0, #0
   1735c:	beq	17584 <__assert_fail@plt+0x4994>
   17360:	movw	r8, #59347	; 0xe7d3
   17364:	movw	sl, #20108	; 0x4e8c
   17368:	movw	r9, #18712	; 0x4918
   1736c:	mov	r4, r0
   17370:	movt	r8, #3
   17374:	movt	sl, #5
   17378:	movt	r9, #1
   1737c:	ldr	r0, [r4, #8]
   17380:	mov	r2, r8
   17384:	cmp	r0, #3
   17388:	bne	17530 <__assert_fail@plt+0x4940>
   1738c:	ldr	r0, [r4, #156]	; 0x9c
   17390:	cmp	r0, #0
   17394:	ldrne	r5, [r4, #160]	; 0xa0
   17398:	cmpne	r5, #0
   1739c:	beq	174cc <__assert_fail@plt+0x48dc>
   173a0:	ldr	r7, [r0, #160]	; 0xa0
   173a4:	cmp	r7, #0
   173a8:	beq	174d8 <__assert_fail@plt+0x48e8>
   173ac:	mov	r0, r7
   173b0:	bl	17a8c <__assert_fail@plt+0x4e9c>
   173b4:	cmp	r0, #0
   173b8:	bne	174e4 <__assert_fail@plt+0x48f4>
   173bc:	mov	r0, r5
   173c0:	bl	17a8c <__assert_fail@plt+0x4e9c>
   173c4:	cmp	r0, #0
   173c8:	bne	174f0 <__assert_fail@plt+0x4900>
   173cc:	mov	r0, r7
   173d0:	bl	17ad8 <__assert_fail@plt+0x4ee8>
   173d4:	mov	r6, r0
   173d8:	mov	r0, r5
   173dc:	bl	17ad8 <__assert_fail@plt+0x4ee8>
   173e0:	cmp	r6, r0
   173e4:	blt	174fc <__assert_fail@plt+0x490c>
   173e8:	bne	17438 <__assert_fail@plt+0x4848>
   173ec:	ldrb	r0, [sl, #44]	; 0x2c
   173f0:	vldr	s16, [r5, #28]
   173f4:	vldr	s18, [r7, #28]
   173f8:	tst	r0, #8
   173fc:	bne	174a0 <__assert_fail@plt+0x48b0>
   17400:	ldr	r0, [r4]
   17404:	cmp	r0, r9
   17408:	beq	1742c <__assert_fail@plt+0x483c>
   1740c:	movw	r1, #15704	; 0x3d58
   17410:	movt	r1, #1
   17414:	cmp	r0, r1
   17418:	bne	17510 <__assert_fail@plt+0x4920>
   1741c:	vcmpe.f32	s16, s18
   17420:	vmrs	APSR_nzcv, fpscr
   17424:	bgt	17438 <__assert_fail@plt+0x4848>
   17428:	b	1751c <__assert_fail@plt+0x492c>
   1742c:	vcmpe.f32	s16, s18
   17430:	vmrs	APSR_nzcv, fpscr
   17434:	bpl	17528 <__assert_fail@plt+0x4938>
   17438:	ldrb	r0, [sl, #44]	; 0x2c
   1743c:	tst	r0, #8
   17440:	bne	17468 <__assert_fail@plt+0x4878>
   17444:	ldr	r0, [r4, #156]	; 0x9c
   17448:	ldr	r1, [r4, #160]	; 0xa0
   1744c:	ldr	r2, [r0, #160]	; 0xa0
   17450:	str	r1, [r0, #160]	; 0xa0
   17454:	str	r2, [r4, #160]	; 0xa0
   17458:	ldr	r1, [r4, #8]
   1745c:	cmp	r1, #3
   17460:	beq	17390 <__assert_fail@plt+0x47a0>
   17464:	b	17508 <__assert_fail@plt+0x4918>
   17468:	movw	r0, #17768	; 0x4568
   1746c:	mov	r1, #24
   17470:	mov	r2, #1
   17474:	movt	r0, #5
   17478:	ldr	r3, [r0]
   1747c:	mov	r5, r0
   17480:	movw	r0, #59632	; 0xe8f0
   17484:	movt	r0, #3
   17488:	bl	12728 <fwrite@plt>
   1748c:	ldr	r0, [r5]
   17490:	mov	r1, r4
   17494:	mov	r2, #0
   17498:	bl	16858 <__assert_fail@plt+0x3c68>
   1749c:	b	17444 <__assert_fail@plt+0x4854>
   174a0:	vcvt.f64.f32	d17, s18
   174a4:	movw	r0, #17768	; 0x4568
   174a8:	vcvt.f64.f32	d16, s16
   174ac:	movw	r1, #59498	; 0xe86a
   174b0:	movt	r0, #5
   174b4:	movt	r1, #3
   174b8:	ldr	r0, [r0]
   174bc:	vmov	r2, r3, d17
   174c0:	vstr	d16, [sp]
   174c4:	bl	128fc <fprintf@plt>
   174c8:	b	17400 <__assert_fail@plt+0x4810>
   174cc:	movw	r2, #59370	; 0xe7ea
   174d0:	movt	r2, #3
   174d4:	b	17530 <__assert_fail@plt+0x4940>
   174d8:	movw	r2, #59392	; 0xe800
   174dc:	movt	r2, #3
   174e0:	b	17530 <__assert_fail@plt+0x4940>
   174e4:	movw	r2, #59421	; 0xe81d
   174e8:	movt	r2, #3
   174ec:	b	17530 <__assert_fail@plt+0x4940>
   174f0:	movw	r2, #59451	; 0xe83b
   174f4:	movt	r2, #3
   174f8:	b	17530 <__assert_fail@plt+0x4940>
   174fc:	movw	r2, #59482	; 0xe85a
   17500:	movt	r2, #3
   17504:	b	17530 <__assert_fail@plt+0x4940>
   17508:	mov	r2, r8
   1750c:	b	17530 <__assert_fail@plt+0x4940>
   17510:	movw	r2, #59614	; 0xe8de
   17514:	movt	r2, #3
   17518:	b	17530 <__assert_fail@plt+0x4940>
   1751c:	movw	r2, #59569	; 0xe8b1
   17520:	movt	r2, #3
   17524:	b	17530 <__assert_fail@plt+0x4940>
   17528:	movw	r2, #59525	; 0xe885
   1752c:	movt	r2, #3
   17530:	ldrb	r0, [sl, #44]	; 0x2c
   17534:	tst	r0, #8
   17538:	bne	17554 <__assert_fail@plt+0x4964>
   1753c:	ldr	r0, [r4, #156]	; 0x9c
   17540:	bl	17344 <__assert_fail@plt+0x4754>
   17544:	ldr	r4, [r4, #160]	; 0xa0
   17548:	cmp	r4, #0
   1754c:	bne	1737c <__assert_fail@plt+0x478c>
   17550:	b	17584 <__assert_fail@plt+0x4994>
   17554:	movw	r0, #17768	; 0x4568
   17558:	movw	r1, #59657	; 0xe909
   1755c:	movt	r0, #5
   17560:	movt	r1, #3
   17564:	mov	r5, r0
   17568:	ldr	r0, [r0]
   1756c:	bl	128fc <fprintf@plt>
   17570:	ldr	r0, [r5]
   17574:	mov	r1, r4
   17578:	mov	r2, #0
   1757c:	bl	16858 <__assert_fail@plt+0x3c68>
   17580:	b	1753c <__assert_fail@plt+0x494c>
   17584:	sub	sp, fp, #48	; 0x30
   17588:	vpop	{d8-d9}
   1758c:	add	sp, sp, #4
   17590:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17594:	push	{fp, lr}
   17598:	mov	fp, sp
   1759c:	bl	175b0 <__assert_fail@plt+0x49c0>
   175a0:	cmp	r0, #0
   175a4:	movne	r1, #0
   175a8:	strne	r1, [r0, #36]	; 0x24
   175ac:	pop	{fp, pc}
   175b0:	push	{r4, sl, fp, lr}
   175b4:	add	fp, sp, #8
   175b8:	mov	r4, r0
   175bc:	ldr	r0, [r0]
   175c0:	cmp	r0, #2
   175c4:	beq	17658 <__assert_fail@plt+0x4a68>
   175c8:	cmp	r0, #0
   175cc:	beq	17670 <__assert_fail@plt+0x4a80>
   175d0:	mov	r0, #176	; 0xb0
   175d4:	bl	2a970 <__assert_fail@plt+0x17d80>
   175d8:	movw	r2, #17820	; 0x459c
   175dc:	movt	r2, #5
   175e0:	ldr	r1, [r2]
   175e4:	cmp	r1, #0
   175e8:	movw	r1, #17824	; 0x45a0
   175ec:	movt	r1, #5
   175f0:	beq	17600 <__assert_fail@plt+0x4a10>
   175f4:	ldr	r2, [r1]
   175f8:	str	r0, [r2, #152]	; 0x98
   175fc:	b	17604 <__assert_fail@plt+0x4a14>
   17600:	str	r0, [r2]
   17604:	movw	r2, #20108	; 0x4e8c
   17608:	str	r0, [r1]
   1760c:	movw	r1, #57765	; 0xe1a5
   17610:	mov	r3, #1065353216	; 0x3f800000
   17614:	movt	r2, #5
   17618:	movt	r1, #3
   1761c:	ldrb	r2, [r2, #15]
   17620:	str	r1, [r0, #36]	; 0x24
   17624:	mov	r1, #10
   17628:	str	r1, [r0, #24]
   1762c:	movw	r1, #257	; 0x101
   17630:	strh	r1, [r0, #18]
   17634:	mov	r1, #0
   17638:	str	r1, [r0, #8]
   1763c:	str	r1, [r0, #12]
   17640:	str	r3, [r0, #28]
   17644:	str	r1, [r0, #164]	; 0xa4
   17648:	str	r1, [r0, #168]	; 0xa8
   1764c:	str	r4, [r0, #172]	; 0xac
   17650:	strb	r2, [r0, #32]
   17654:	pop	{r4, sl, fp, pc}
   17658:	movw	r0, #56323	; 0xdc03
   1765c:	movw	r1, #57098	; 0xdf0a
   17660:	movw	r3, #57705	; 0xe169
   17664:	movw	r2, #1486	; 0x5ce
   17668:	movt	r0, #3
   1766c:	b	17684 <__assert_fail@plt+0x4a94>
   17670:	movw	r0, #56287	; 0xdbdf
   17674:	movw	r1, #57098	; 0xdf0a
   17678:	movw	r3, #57705	; 0xe169
   1767c:	movw	r2, #1485	; 0x5cd
   17680:	movt	r0, #3
   17684:	movt	r1, #3
   17688:	movt	r3, #3
   1768c:	bl	12bf0 <__assert_fail@plt>
   17690:	push	{r4, r5, r6, sl, fp, lr}
   17694:	add	fp, sp, #16
   17698:	movw	r6, #17828	; 0x45a4
   1769c:	mov	r5, r0
   176a0:	mov	r4, r1
   176a4:	movt	r6, #5
   176a8:	ldr	r0, [r6]
   176ac:	cmp	r0, #0
   176b0:	bne	176cc <__assert_fail@plt+0x4adc>
   176b4:	movw	r0, #57796	; 0xe1c4
   176b8:	movt	r0, #3
   176bc:	bl	1b0e4 <__assert_fail@plt+0x84f4>
   176c0:	cmp	r0, #0
   176c4:	str	r0, [r6]
   176c8:	beq	1777c <__assert_fail@plt+0x4b8c>
   176cc:	movw	r1, #17824	; 0x45a0
   176d0:	movt	r1, #5
   176d4:	ldr	r1, [r1]
   176d8:	cmp	r1, #0
   176dc:	beq	17744 <__assert_fail@plt+0x4b54>
   176e0:	ldr	r1, [r1, #8]
   176e4:	cmp	r1, #1
   176e8:	cmpne	r1, #5
   176ec:	bne	1773c <__assert_fail@plt+0x4b4c>
   176f0:	bl	175b0 <__assert_fail@plt+0x49c0>
   176f4:	movw	r3, #57941	; 0xe255
   176f8:	movw	r6, #15704	; 0x3d58
   176fc:	cmp	r0, #0
   17700:	mov	r2, #3
   17704:	movne	r1, #0
   17708:	movt	r3, #3
   1770c:	movt	r6, #1
   17710:	strne	r1, [r0, #36]	; 0x24
   17714:	mov	r1, #0
   17718:	str	r1, [r0, #36]	; 0x24
   1771c:	str	r1, [r0, #40]	; 0x28
   17720:	str	r6, [r0]
   17724:	str	r3, [r0, #4]
   17728:	str	r2, [r0, #8]
   1772c:	str	r2, [r0, #12]
   17730:	str	r1, [r0, #16]
   17734:	strb	r1, [r0, #20]
   17738:	b	17744 <__assert_fail@plt+0x4b54>
   1773c:	cmp	r1, #0
   17740:	beq	17758 <__assert_fail@plt+0x4b68>
   17744:	mov	r0, r5
   17748:	bl	175b0 <__assert_fail@plt+0x49c0>
   1774c:	str	r5, [r0, #172]	; 0xac
   17750:	str	r4, [r0, #36]	; 0x24
   17754:	pop	{r4, r5, r6, sl, fp, pc}
   17758:	movw	r1, #57899	; 0xe22b
   1775c:	mov	r0, #0
   17760:	mov	r2, #5
   17764:	movt	r1, #3
   17768:	bl	12674 <dcgettext@plt>
   1776c:	mov	r2, r0
   17770:	mov	r0, #1
   17774:	mov	r1, #0
   17778:	bl	127b8 <error@plt>
   1777c:	movw	r0, #57800	; 0xe1c8
   17780:	movw	r1, #57098	; 0xdf0a
   17784:	movw	r3, #57818	; 0xe1da
   17788:	movw	r2, #1528	; 0x5f8
   1778c:	movt	r0, #3
   17790:	movt	r1, #3
   17794:	movt	r3, #3
   17798:	bl	12bf0 <__assert_fail@plt>
   1779c:	push	{fp, lr}
   177a0:	mov	fp, sp
   177a4:	sub	sp, sp, #8
   177a8:	ldr	r0, [r0]
   177ac:	mov	r2, #4
   177b0:	str	r0, [sp, #4]
   177b4:	ldr	r0, [r1]
   177b8:	mov	r1, sp
   177bc:	str	r0, [sp]
   177c0:	add	r0, sp, #4
   177c4:	bl	12650 <memcmp@plt>
   177c8:	mov	sp, fp
   177cc:	pop	{fp, pc}
   177d0:	push	{r4, r5, r6, r7, fp, lr}
   177d4:	add	fp, sp, #16
   177d8:	mov	r5, r0
   177dc:	mov	r0, #176	; 0xb0
   177e0:	mov	r4, r2
   177e4:	mov	r7, r1
   177e8:	bl	2a970 <__assert_fail@plt+0x17d80>
   177ec:	mov	r1, #0
   177f0:	cmp	r7, #3
   177f4:	mov	r6, #3
   177f8:	str	r1, [r0, #24]
   177fc:	strd	r6, [r0, #8]
   17800:	beq	17834 <__assert_fail@plt+0x4c44>
   17804:	cmp	r7, #2
   17808:	beq	17848 <__assert_fail@plt+0x4c58>
   1780c:	cmp	r7, #1
   17810:	bne	17880 <__assert_fail@plt+0x4c90>
   17814:	movw	r1, #58158	; 0xe32e
   17818:	movw	r2, #16088	; 0x3ed8
   1781c:	vmov.f32	s0, #112	; 0x3f800000  1.0
   17820:	movt	r2, #1
   17824:	movt	r1, #3
   17828:	str	r2, [r0]
   1782c:	str	r1, [r0, #4]
   17830:	b	1787c <__assert_fail@plt+0x4c8c>
   17834:	movw	r1, #57941	; 0xe255
   17838:	movw	r2, #15704	; 0x3d58
   1783c:	movt	r1, #3
   17840:	movt	r2, #1
   17844:	b	17858 <__assert_fail@plt+0x4c68>
   17848:	movw	r1, #59185	; 0xe731
   1784c:	movw	r2, #18712	; 0x4918
   17850:	movt	r1, #3
   17854:	movt	r2, #1
   17858:	str	r2, [r0]
   1785c:	str	r1, [r0, #4]
   17860:	vldr	s0, [pc, #36]	; 1788c <__assert_fail@plt+0x4c9c>
   17864:	vmov.f32	s4, #112	; 0x3f800000  1.0
   17868:	vldr	s2, [r5, #28]
   1786c:	vmax.f32	d0, d1, d0
   17870:	vcmpe.f32	s2, s4
   17874:	vmrs	APSR_nzcv, fpscr
   17878:	vselgt.f32	s0, s4, s0
   1787c:	vstr	s0, [r0, #28]
   17880:	str	r5, [r0, #160]	; 0xa0
   17884:	str	r0, [r4]
   17888:	pop	{r4, r5, r6, r7, fp, pc}
   1788c:	andeq	r0, r0, r0
   17890:	push	{r4, r5, r6, sl, fp, lr}
   17894:	add	fp, sp, #16
   17898:	mov	r5, r0
   1789c:	mov	r0, r1
   178a0:	mov	r1, r3
   178a4:	mov	r4, r3
   178a8:	mov	r6, r2
   178ac:	bl	178dc <__assert_fail@plt+0x4cec>
   178b0:	mov	r0, r6
   178b4:	mov	r1, r4
   178b8:	bl	178dc <__assert_fail@plt+0x4cec>
   178bc:	mov	r6, #0
   178c0:	add	r0, r5, r6
   178c4:	mov	r1, r4
   178c8:	bl	178dc <__assert_fail@plt+0x4cec>
   178cc:	add	r6, r6, #8
   178d0:	cmp	r6, #88	; 0x58
   178d4:	bne	178c0 <__assert_fail@plt+0x4cd0>
   178d8:	pop	{r4, r5, r6, sl, fp, pc}
   178dc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   178e0:	add	fp, sp, #28
   178e4:	sub	sp, sp, #4
   178e8:	mov	sl, r0
   178ec:	ldr	r0, [r0]
   178f0:	cmp	r0, #0
   178f4:	beq	17a18 <__assert_fail@plt+0x4e28>
   178f8:	movw	r5, #20108	; 0x4e8c
   178fc:	mov	r9, r1
   17900:	movt	r5, #5
   17904:	ldrb	r1, [r5, #44]	; 0x2c
   17908:	tst	r1, #8
   1790c:	bne	17a20 <__assert_fail@plt+0x4e30>
   17910:	bl	15d50 <__assert_fail@plt+0x3160>
   17914:	ldr	r1, [sl]
   17918:	cmp	r1, #0
   1791c:	beq	179e4 <__assert_fail@plt+0x4df4>
   17920:	mov	lr, r5
   17924:	mov	ip, #0
   17928:	mov	r6, #0
   1792c:	mov	r8, #0
   17930:	ldr	r2, [r1, #156]	; 0x9c
   17934:	cmp	r6, #0
   17938:	str	ip, [r1, #156]	; 0x9c
   1793c:	beq	179a8 <__assert_fail@plt+0x4db8>
   17940:	ldr	r5, [r1, #160]	; 0xa0
   17944:	mov	r3, r6
   17948:	ldr	r4, [r5, #24]
   1794c:	ldr	r0, [r3, #160]	; 0xa0
   17950:	ldr	r7, [r0, #24]
   17954:	cmp	r7, r4
   17958:	bne	1798c <__assert_fail@plt+0x4d9c>
   1795c:	vldr	s0, [r5, #28]
   17960:	vldr	s2, [r0, #28]
   17964:	vcmp.f32	s2, s0
   17968:	vmrs	APSR_nzcv, fpscr
   1796c:	beq	179b8 <__assert_fail@plt+0x4dc8>
   17970:	ldr	r0, [r3, #12]
   17974:	vcmpe.f32	s2, s0
   17978:	cmp	r0, #2
   1797c:	bne	17994 <__assert_fail@plt+0x4da4>
   17980:	vmrs	APSR_nzcv, fpscr
   17984:	bpl	1799c <__assert_fail@plt+0x4dac>
   17988:	b	179b8 <__assert_fail@plt+0x4dc8>
   1798c:	bcc	1799c <__assert_fail@plt+0x4dac>
   17990:	b	179b8 <__assert_fail@plt+0x4dc8>
   17994:	vmrs	APSR_nzcv, fpscr
   17998:	bpl	179b8 <__assert_fail@plt+0x4dc8>
   1799c:	ldr	r3, [r3, #156]	; 0x9c
   179a0:	cmp	r3, #0
   179a4:	bne	1794c <__assert_fail@plt+0x4d5c>
   179a8:	cmp	r8, #0
   179ac:	str	r6, [r1, #156]	; 0x9c
   179b0:	mov	r6, r1
   179b4:	b	179c8 <__assert_fail@plt+0x4dd8>
   179b8:	ldr	r0, [r3, #156]	; 0x9c
   179bc:	cmp	r0, #0
   179c0:	str	r0, [r1, #156]	; 0x9c
   179c4:	str	r1, [r3, #156]	; 0x9c
   179c8:	moveq	r8, r1
   179cc:	cmp	r2, #0
   179d0:	mov	r1, r2
   179d4:	bne	17930 <__assert_fail@plt+0x4d40>
   179d8:	mov	r5, lr
   179dc:	str	r2, [sl]
   179e0:	b	179ec <__assert_fail@plt+0x4dfc>
   179e4:	mov	r8, #0
   179e8:	mov	r6, #0
   179ec:	ldrb	r0, [r5, #44]	; 0x2c
   179f0:	tst	r0, #8
   179f4:	bne	17a58 <__assert_fail@plt+0x4e68>
   179f8:	mov	r0, r6
   179fc:	bl	15d50 <__assert_fail@plt+0x3160>
   17a00:	ldr	r0, [r9]
   17a04:	str	r0, [r8, #156]	; 0x9c
   17a08:	mov	r0, #0
   17a0c:	str	r6, [r9]
   17a10:	str	r0, [sl]
   17a14:	str	r0, [sl, #4]
   17a18:	sub	sp, fp, #28
   17a1c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17a20:	movw	r4, #17768	; 0x4568
   17a24:	movw	r1, #59188	; 0xe734
   17a28:	movw	r2, #59193	; 0xe739
   17a2c:	movt	r4, #5
   17a30:	movt	r1, #3
   17a34:	movt	r2, #3
   17a38:	ldr	r0, [r4]
   17a3c:	bl	128fc <fprintf@plt>
   17a40:	ldr	r0, [r4]
   17a44:	ldr	r1, [sl]
   17a48:	mov	r2, #2
   17a4c:	bl	16858 <__assert_fail@plt+0x3c68>
   17a50:	ldr	r0, [sl]
   17a54:	b	17910 <__assert_fail@plt+0x4d20>
   17a58:	movw	r4, #17768	; 0x4568
   17a5c:	movw	r1, #59188	; 0xe734
   17a60:	movw	r2, #59220	; 0xe754
   17a64:	movt	r4, #5
   17a68:	movt	r1, #3
   17a6c:	movt	r2, #3
   17a70:	ldr	r0, [r4]
   17a74:	bl	128fc <fprintf@plt>
   17a78:	ldr	r0, [r4]
   17a7c:	mov	r1, r6
   17a80:	mov	r2, #2
   17a84:	bl	16858 <__assert_fail@plt+0x3c68>
   17a88:	b	179f8 <__assert_fail@plt+0x4e08>
   17a8c:	push	{r4, r5, fp, lr}
   17a90:	add	fp, sp, #8
   17a94:	cmp	r0, #0
   17a98:	beq	17acc <__assert_fail@plt+0x4edc>
   17a9c:	mov	r4, r0
   17aa0:	mov	r5, #1
   17aa4:	ldrb	r0, [r4, #16]
   17aa8:	cmp	r0, #0
   17aac:	bne	17ad0 <__assert_fail@plt+0x4ee0>
   17ab0:	ldr	r0, [r4, #156]	; 0x9c
   17ab4:	bl	17a8c <__assert_fail@plt+0x4e9c>
   17ab8:	cmp	r0, #0
   17abc:	bne	17ad0 <__assert_fail@plt+0x4ee0>
   17ac0:	ldr	r4, [r4, #160]	; 0xa0
   17ac4:	cmp	r4, #0
   17ac8:	bne	17aa4 <__assert_fail@plt+0x4eb4>
   17acc:	mov	r5, #0
   17ad0:	mov	r0, r5
   17ad4:	pop	{r4, r5, fp, pc}
   17ad8:	cmp	r0, #0
   17adc:	moveq	r0, #0
   17ae0:	bxeq	lr
   17ae4:	push	{r4, r5, fp, lr}
   17ae8:	add	fp, sp, #8
   17aec:	mov	r4, r0
   17af0:	ldr	r0, [r0, #156]	; 0x9c
   17af4:	bl	17ad8 <__assert_fail@plt+0x4ee8>
   17af8:	mov	r5, r0
   17afc:	ldr	r0, [r4, #160]	; 0xa0
   17b00:	bl	17ad8 <__assert_fail@plt+0x4ee8>
   17b04:	ldr	r1, [r4, #24]
   17b08:	cmp	r5, r0
   17b0c:	movhi	r0, r5
   17b10:	cmp	r0, r1
   17b14:	movcc	r0, r1
   17b18:	pop	{r4, r5, fp, pc}
   17b1c:	push	{r4, r5, fp, lr}
   17b20:	add	fp, sp, #8
   17b24:	mov	r4, r1
   17b28:	mov	r1, r2
   17b2c:	mov	r5, r0
   17b30:	bl	17690 <__assert_fail@plt+0x4aa0>
   17b34:	str	r4, [r0]
   17b38:	mov	r2, #1
   17b3c:	ldr	r1, [r5, #4]
   17b40:	str	r2, [r0, #8]
   17b44:	mov	r2, #0
   17b48:	str	r2, [r0, #12]
   17b4c:	str	r2, [r0, #40]	; 0x28
   17b50:	str	r1, [r0, #4]
   17b54:	pop	{r4, r5, fp, pc}
   17b58:	push	{r4, r5, fp, lr}
   17b5c:	add	fp, sp, #8
   17b60:	ldr	r5, [r0, #12]
   17b64:	cmp	r5, #0
   17b68:	beq	17b98 <__assert_fail@plt+0x4fa8>
   17b6c:	mov	r4, r0
   17b70:	bl	17690 <__assert_fail@plt+0x4aa0>
   17b74:	str	r5, [r0]
   17b78:	mov	r2, #1
   17b7c:	ldr	r1, [r4, #4]
   17b80:	str	r2, [r0, #8]
   17b84:	mov	r2, #0
   17b88:	str	r2, [r0, #12]
   17b8c:	str	r2, [r0, #40]	; 0x28
   17b90:	str	r1, [r0, #4]
   17b94:	pop	{r4, r5, fp, pc}
   17b98:	movw	r0, #59888	; 0xe9f0
   17b9c:	movw	r1, #59913	; 0xea09
   17ba0:	movw	r3, #59920	; 0xea10
   17ba4:	mov	r2, #123	; 0x7b
   17ba8:	movt	r0, #3
   17bac:	movt	r1, #3
   17bb0:	movt	r3, #3
   17bb4:	bl	12bf0 <__assert_fail@plt>
   17bb8:	mov	r1, #0
   17bbc:	b	17b58 <__assert_fail@plt+0x4f68>
   17bc0:	push	{fp, lr}
   17bc4:	mov	fp, sp
   17bc8:	cmp	r0, #0
   17bcc:	bne	17d3c <__assert_fail@plt+0x514c>
   17bd0:	movw	r5, #17780	; 0x4574
   17bd4:	movw	r1, #60035	; 0xea83
   17bd8:	mov	r0, #0
   17bdc:	mov	r2, #5
   17be0:	movt	r5, #5
   17be4:	movt	r1, #3
   17be8:	ldr	r4, [r5]
   17bec:	bl	12674 <dcgettext@plt>
   17bf0:	movw	r6, #19748	; 0x4d24
   17bf4:	mov	r1, r0
   17bf8:	mov	r0, r4
   17bfc:	movt	r6, #5
   17c00:	ldr	r2, [r6]
   17c04:	bl	128fc <fprintf@plt>
   17c08:	movw	r1, #60109	; 0xeacd
   17c0c:	mov	r0, #0
   17c10:	mov	r2, #5
   17c14:	movt	r1, #3
   17c18:	bl	12674 <dcgettext@plt>
   17c1c:	ldr	r1, [r5]
   17c20:	bl	12b84 <fputs@plt>
   17c24:	movw	r1, #60247	; 0xeb57
   17c28:	mov	r0, #0
   17c2c:	mov	r2, #5
   17c30:	movt	r1, #3
   17c34:	bl	12674 <dcgettext@plt>
   17c38:	ldr	r1, [r5]
   17c3c:	bl	12b84 <fputs@plt>
   17c40:	movw	r1, #60455	; 0xec27
   17c44:	mov	r0, #0
   17c48:	mov	r2, #5
   17c4c:	movt	r1, #3
   17c50:	bl	12674 <dcgettext@plt>
   17c54:	ldr	r1, [r5]
   17c58:	bl	12b84 <fputs@plt>
   17c5c:	movw	r1, #60540	; 0xec7c
   17c60:	mov	r0, #0
   17c64:	mov	r2, #5
   17c68:	movt	r1, #3
   17c6c:	bl	12674 <dcgettext@plt>
   17c70:	ldr	r1, [r5]
   17c74:	bl	12b84 <fputs@plt>
   17c78:	movw	r1, #60745	; 0xed49
   17c7c:	mov	r0, #0
   17c80:	mov	r2, #5
   17c84:	movt	r1, #3
   17c88:	bl	12674 <dcgettext@plt>
   17c8c:	ldr	r1, [r5]
   17c90:	bl	12b84 <fputs@plt>
   17c94:	movw	r1, #61286	; 0xef66
   17c98:	mov	r0, #0
   17c9c:	mov	r2, #5
   17ca0:	movt	r1, #3
   17ca4:	bl	12674 <dcgettext@plt>
   17ca8:	ldr	r1, [r5]
   17cac:	bl	12b84 <fputs@plt>
   17cb0:	movw	r1, #61542	; 0xf066
   17cb4:	mov	r0, #0
   17cb8:	mov	r2, #5
   17cbc:	movt	r1, #3
   17cc0:	bl	12674 <dcgettext@plt>
   17cc4:	ldr	r1, [r5]
   17cc8:	bl	12b84 <fputs@plt>
   17ccc:	movw	r1, #61566	; 0xf07e
   17cd0:	mov	r0, #0
   17cd4:	mov	r2, #5
   17cd8:	movt	r1, #3
   17cdc:	bl	12674 <dcgettext@plt>
   17ce0:	ldr	r1, [r5]
   17ce4:	bl	12b84 <fputs@plt>
   17ce8:	movw	r1, #61625	; 0xf0b9
   17cec:	mov	r0, #0
   17cf0:	mov	r2, #5
   17cf4:	movt	r1, #3
   17cf8:	bl	12674 <dcgettext@plt>
   17cfc:	ldr	r1, [r5]
   17d00:	bl	12b84 <fputs@plt>
   17d04:	mov	r0, #0
   17d08:	bl	17d80 <__assert_fail@plt+0x5190>
   17d0c:	movw	r1, #61694	; 0xf0fe
   17d10:	mov	r0, #0
   17d14:	mov	r2, #5
   17d18:	movt	r1, #3
   17d1c:	bl	12674 <dcgettext@plt>
   17d20:	ldr	r1, [r5]
   17d24:	bl	12b84 <fputs@plt>
   17d28:	ldr	r0, [r5]
   17d2c:	ldr	r1, [r6]
   17d30:	bl	20dd4 <__assert_fail@plt+0xe1e4>
   17d34:	mov	r0, #0
   17d38:	bl	12884 <exit@plt>
   17d3c:	mov	r4, r0
   17d40:	movw	r0, #17768	; 0x4568
   17d44:	movw	r1, #59996	; 0xea5c
   17d48:	mov	r2, #5
   17d4c:	movt	r0, #5
   17d50:	movt	r1, #3
   17d54:	ldr	r5, [r0]
   17d58:	mov	r0, #0
   17d5c:	bl	12674 <dcgettext@plt>
   17d60:	mov	r1, r0
   17d64:	movw	r0, #19748	; 0x4d24
   17d68:	movt	r0, #5
   17d6c:	ldr	r2, [r0]
   17d70:	mov	r0, r5
   17d74:	bl	128fc <fprintf@plt>
   17d78:	mov	r0, r4
   17d7c:	bl	12884 <exit@plt>
   17d80:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   17d84:	add	fp, sp, #24
   17d88:	movw	r1, #62343	; 0xf387
   17d8c:	mov	r4, r0
   17d90:	mov	r0, #0
   17d94:	mov	r2, #5
   17d98:	mov	r6, #0
   17d9c:	movt	r1, #3
   17da0:	bl	12674 <dcgettext@plt>
   17da4:	movw	r5, #17780	; 0x4574
   17da8:	movt	r5, #5
   17dac:	ldr	r1, [r5]
   17db0:	bl	12b84 <fputs@plt>
   17db4:	cmp	r4, #0
   17db8:	beq	17df4 <__assert_fail@plt+0x5204>
   17dbc:	movw	r7, #63368	; 0xf788
   17dc0:	movw	r4, #62368	; 0xf3a0
   17dc4:	movt	r7, #3
   17dc8:	movt	r4, #3
   17dcc:	mov	r0, r7
   17dd0:	mov	r1, r4
   17dd4:	ldr	r2, [r0, r6]!
   17dd8:	ldr	r3, [r0, #8]
   17ddc:	ldr	r0, [r5]
   17de0:	bl	128fc <fprintf@plt>
   17de4:	add	r6, r6, #12
   17de8:	cmp	r6, #108	; 0x6c
   17dec:	bne	17dcc <__assert_fail@plt+0x51dc>
   17df0:	b	17e40 <__assert_fail@plt+0x5250>
   17df4:	movw	r8, #61759	; 0xf13f
   17df8:	movw	r9, #62378	; 0xf3aa
   17dfc:	movw	r7, #63368	; 0xf788
   17e00:	movw	r4, #55987	; 0xdab3
   17e04:	mov	r6, #0
   17e08:	movt	r8, #3
   17e0c:	movt	r9, #3
   17e10:	movt	r7, #3
   17e14:	movt	r4, #3
   17e18:	ldr	r3, [r7, -r6]
   17e1c:	ldr	r0, [r5]
   17e20:	cmp	r6, #0
   17e24:	mov	r2, r9
   17e28:	mov	r1, r4
   17e2c:	moveq	r2, r8
   17e30:	bl	128fc <fprintf@plt>
   17e34:	sub	r6, r6, #12
   17e38:	cmn	r6, #108	; 0x6c
   17e3c:	bne	17e18 <__assert_fail@plt+0x5228>
   17e40:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   17e44:	bx	lr
   17e48:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   17e4c:	add	fp, sp, #24
   17e50:	movw	r7, #20064	; 0x4e60
   17e54:	mov	r5, r0
   17e58:	mov	r4, r2
   17e5c:	movt	r7, #5
   17e60:	ldrb	r0, [r7, #4]
   17e64:	cmp	r0, #0
   17e68:	beq	17e88 <__assert_fail@plt+0x5298>
   17e6c:	movw	r0, #257	; 0x101
   17e70:	mov	r1, #0
   17e74:	strh	r0, [r7, #4]
   17e78:	ldr	r0, [r4, #16]
   17e7c:	str	r0, [r7, #8]
   17e80:	mov	r0, r1
   17e84:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   17e88:	movw	r8, #20108	; 0x4e8c
   17e8c:	mov	r6, r1
   17e90:	mov	r0, r1
   17e94:	mov	r1, r4
   17e98:	movt	r8, #5
   17e9c:	ldr	r2, [r8, #52]	; 0x34
   17ea0:	blx	r2
   17ea4:	cmp	r0, #0
   17ea8:	beq	17ee8 <__assert_fail@plt+0x52f8>
   17eac:	ldrb	r4, [r8, #14]
   17eb0:	bl	12908 <__errno_location@plt>
   17eb4:	cmp	r4, #0
   17eb8:	beq	17ecc <__assert_fail@plt+0x52dc>
   17ebc:	ldr	r2, [r0]
   17ec0:	mvn	r1, #0
   17ec4:	cmp	r2, #2
   17ec8:	beq	17e80 <__assert_fail@plt+0x5290>
   17ecc:	ldr	r1, [r0]
   17ed0:	mov	r0, #0
   17ed4:	mov	r2, #1
   17ed8:	mov	r3, r5
   17edc:	bl	18f90 <__assert_fail@plt+0x63a0>
   17ee0:	mvn	r1, #0
   17ee4:	b	17e80 <__assert_fail@plt+0x5290>
   17ee8:	ldr	r0, [r4, #16]
   17eec:	cmp	r0, #0
   17ef0:	bne	17e6c <__assert_fail@plt+0x527c>
   17ef4:	movw	r1, #54876	; 0xd65c
   17ef8:	mov	r0, #0
   17efc:	mov	r2, #5
   17f00:	movt	r1, #3
   17f04:	bl	12674 <dcgettext@plt>
   17f08:	ldr	r1, [r8, #72]	; 0x48
   17f0c:	mov	r5, r0
   17f10:	mov	r0, #0
   17f14:	mov	r2, r6
   17f18:	bl	294c0 <__assert_fail@plt+0x168d0>
   17f1c:	mov	r3, r0
   17f20:	mov	r0, #0
   17f24:	mov	r1, #0
   17f28:	mov	r2, r5
   17f2c:	bl	127b8 <error@plt>
   17f30:	mov	r0, #1
   17f34:	str	r0, [r7, #28]
   17f38:	b	17e6c <__assert_fail@plt+0x527c>
   17f3c:	mov	r3, r1
   17f40:	mov	r1, r0
   17f44:	mov	r0, #0
   17f48:	mov	r2, #1
   17f4c:	b	18f90 <__assert_fail@plt+0x63a0>
   17f50:	push	{r4, sl, fp, lr}
   17f54:	add	fp, sp, #8
   17f58:	vpush	{d8}
   17f5c:	sub	sp, sp, #392	; 0x188
   17f60:	mov	r4, sp
   17f64:	mov	r0, r4
   17f68:	bl	1265c <uname@plt>
   17f6c:	cmp	r0, #0
   17f70:	beq	17f7c <__assert_fail@plt+0x538c>
   17f74:	mov	r0, #1
   17f78:	b	17ff4 <__assert_fail@plt+0x5404>
   17f7c:	add	r0, r4, #130	; 0x82
   17f80:	bl	12b30 <atof@plt>
   17f84:	movw	r0, #61760	; 0xf140
   17f88:	mov	r1, r4
   17f8c:	mov	r2, #6
   17f90:	vmov.f64	d8, d0
   17f94:	movt	r0, #3
   17f98:	bl	128a8 <bcmp@plt>
   17f9c:	vcvt.f32.f64	s16, d8
   17fa0:	cmp	r0, #0
   17fa4:	beq	17fe0 <__assert_fail@plt+0x53f0>
   17fa8:	movw	r0, #61766	; 0xf146
   17fac:	mov	r1, sp
   17fb0:	mov	r2, #8
   17fb4:	movt	r0, #3
   17fb8:	bl	128a8 <bcmp@plt>
   17fbc:	vldr	s0, [pc, #60]	; 18000 <__assert_fail@plt+0x5410>
   17fc0:	mov	r1, r0
   17fc4:	mov	r0, #0
   17fc8:	vcmpe.f32	s16, s0
   17fcc:	vmrs	APSR_nzcv, fpscr
   17fd0:	movwge	r0, #1
   17fd4:	cmp	r1, #0
   17fd8:	movne	r0, #1
   17fdc:	b	17ff4 <__assert_fail@plt+0x5404>
   17fe0:	vldr	s0, [pc, #28]	; 18004 <__assert_fail@plt+0x5414>
   17fe4:	mov	r0, #0
   17fe8:	vcmpe.f32	s16, s0
   17fec:	vmrs	APSR_nzcv, fpscr
   17ff0:	movwge	r0, #1
   17ff4:	sub	sp, fp, #16
   17ff8:	vpop	{d8}
   17ffc:	pop	{r4, sl, fp, pc}
   18000:	submi	r6, r6, r6, ror #12
   18004:	andmi	ip, ip, sp, asr #25
   18008:	push	{r4, sl, fp, lr}
   1800c:	add	fp, sp, #8
   18010:	movw	r4, #20064	; 0x4e60
   18014:	movt	r4, #5
   18018:	ldrb	r0, [r4, #32]
   1801c:	cmp	r0, #0
   18020:	popeq	{r4, sl, fp, pc}
   18024:	bl	15d40 <__assert_fail@plt+0x3150>
   18028:	bl	18038 <__assert_fail@plt+0x5448>
   1802c:	mov	r0, #0
   18030:	strb	r0, [r4, #32]
   18034:	pop	{r4, sl, fp, pc}
   18038:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1803c:	add	fp, sp, #28
   18040:	sub	sp, sp, #4
   18044:	cmp	r0, #0
   18048:	beq	180f4 <__assert_fail@plt+0x5504>
   1804c:	movw	r6, #20064	; 0x4e60
   18050:	movw	r7, #16908	; 0x420c
   18054:	movw	r8, #36948	; 0x9054
   18058:	movw	sl, #17800	; 0x4588
   1805c:	movw	r5, #18628	; 0x48c4
   18060:	mov	r4, r0
   18064:	mov	r9, #0
   18068:	movt	r6, #5
   1806c:	movt	r7, #1
   18070:	movt	r8, #1
   18074:	movt	sl, #5
   18078:	movt	r5, #1
   1807c:	ldrb	r0, [r6, #32]
   18080:	cmp	r0, #0
   18084:	beq	180fc <__assert_fail@plt+0x550c>
   18088:	ldr	r0, [r4, #156]	; 0x9c
   1808c:	bl	18038 <__assert_fail@plt+0x5448>
   18090:	ldr	r0, [r4]
   18094:	cmp	r0, r7
   18098:	cmpne	r0, r5
   1809c:	bne	180e8 <__assert_fail@plt+0x54f8>
   180a0:	mov	r2, r4
   180a4:	ldrb	r0, [r2, #40]!	; 0x28
   180a8:	cmp	r0, #0
   180ac:	beq	180e8 <__assert_fail@plt+0x54f8>
   180b0:	ldr	r0, [r4, #116]	; 0x74
   180b4:	cmp	r0, #0
   180b8:	beq	180e8 <__assert_fail@plt+0x54f8>
   180bc:	ldr	r0, [r4, #144]	; 0x90
   180c0:	mov	r1, r8
   180c4:	bl	1f524 <__assert_fail@plt+0xc934>
   180c8:	ldr	r0, [r4, #144]	; 0x90
   180cc:	ldr	r1, [sl]
   180d0:	cmp	r0, r1
   180d4:	beq	180e8 <__assert_fail@plt+0x54f8>
   180d8:	bl	29a5c <__assert_fail@plt+0x16e6c>
   180dc:	ldr	r0, [r4, #144]	; 0x90
   180e0:	bl	2bcbc <__assert_fail@plt+0x190cc>
   180e4:	str	r9, [r4, #144]	; 0x90
   180e8:	ldr	r4, [r4, #160]	; 0xa0
   180ec:	cmp	r4, #0
   180f0:	bne	1807c <__assert_fail@plt+0x548c>
   180f4:	sub	sp, fp, #28
   180f8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   180fc:	movw	r0, #62816	; 0xf560
   18100:	movw	r1, #59913	; 0xea09
   18104:	movw	r3, #62843	; 0xf57b
   18108:	mov	r2, #396	; 0x18c
   1810c:	movt	r0, #3
   18110:	movt	r1, #3
   18114:	movt	r3, #3
   18118:	bl	12bf0 <__assert_fail@plt>
   1811c:	push	{r4, r5, fp, lr}
   18120:	add	fp, sp, #8
   18124:	cmp	r0, #0
   18128:	popeq	{r4, r5, fp, pc}
   1812c:	movw	r5, #16904	; 0x4208
   18130:	mov	r4, r0
   18134:	movt	r5, #1
   18138:	ldr	r0, [r4, #156]	; 0x9c
   1813c:	bl	1811c <__assert_fail@plt+0x552c>
   18140:	ldr	r0, [r4]
   18144:	cmp	r0, r5
   18148:	beq	1815c <__assert_fail@plt+0x556c>
   1814c:	ldr	r4, [r4, #160]	; 0xa0
   18150:	cmp	r4, #0
   18154:	bne	18138 <__assert_fail@plt+0x5548>
   18158:	b	18188 <__assert_fail@plt+0x5598>
   1815c:	mov	r0, r4
   18160:	ldrb	r1, [r0, #40]!	; 0x28
   18164:	cmp	r1, #0
   18168:	beq	1814c <__assert_fail@plt+0x555c>
   1816c:	ldr	r1, [r4, #116]	; 0x74
   18170:	cmp	r1, #0
   18174:	beq	1814c <__assert_fail@plt+0x555c>
   18178:	add	r0, r0, #4
   1817c:	add	r1, r4, #88	; 0x58
   18180:	bl	1ef28 <__assert_fail@plt+0xc338>
   18184:	b	1814c <__assert_fail@plt+0x555c>
   18188:	pop	{r4, r5, fp, pc}
   1818c:	push	{r4, r5, fp, lr}
   18190:	add	fp, sp, #8
   18194:	sub	sp, sp, #8
   18198:	mov	r0, #8
   1819c:	bl	2a688 <__assert_fail@plt+0x17a98>
   181a0:	movw	r5, #17800	; 0x4588
   181a4:	movt	r5, #5
   181a8:	str	r0, [r5]
   181ac:	bl	299ec <__assert_fail@plt+0x16dfc>
   181b0:	cmp	r0, #0
   181b4:	subeq	sp, fp, #8
   181b8:	popeq	{r4, r5, fp, pc}
   181bc:	bl	12908 <__errno_location@plt>
   181c0:	movw	r1, #61774	; 0xf14e
   181c4:	ldr	r4, [r0]
   181c8:	mov	r0, #0
   181cc:	mov	r2, #5
   181d0:	movt	r1, #3
   181d4:	bl	12674 <dcgettext@plt>
   181d8:	mov	r2, r0
   181dc:	ldr	r0, [r5]
   181e0:	ldr	r1, [r0]
   181e4:	cmn	r1, #1
   181e8:	bgt	18210 <__assert_fail@plt+0x5620>
   181ec:	ldr	r0, [r0, #4]
   181f0:	movw	r1, #61759	; 0xf13f
   181f4:	movw	r3, #3732	; 0xe94
   181f8:	movt	r1, #3
   181fc:	movt	r3, #4
   18200:	cmp	r0, #0
   18204:	moveq	r3, r1
   18208:	moveq	r0, r1
   1820c:	b	1821c <__assert_fail@plt+0x562c>
   18210:	movw	r3, #61759	; 0xf13f
   18214:	movt	r3, #3
   18218:	mov	r0, r3
   1821c:	str	r0, [sp]
   18220:	mov	r0, #1
   18224:	mov	r1, r4
   18228:	bl	127b8 <error@plt>
   1822c:	push	{r4, r5, fp, lr}
   18230:	add	fp, sp, #8
   18234:	sub	sp, sp, #8
   18238:	bl	15d40 <__assert_fail@plt+0x3150>
   1823c:	cmp	r0, #0
   18240:	beq	1827c <__assert_fail@plt+0x568c>
   18244:	movw	r1, #33052	; 0x811c
   18248:	mov	r4, r0
   1824c:	movt	r1, #1
   18250:	bl	183b4 <__assert_fail@plt+0x57c4>
   18254:	bl	18008 <__assert_fail@plt+0x5418>
   18258:	movw	r0, #20064	; 0x4e60
   1825c:	movt	r0, #5
   18260:	ldr	r0, [r0, #36]	; 0x24
   18264:	bl	191d4 <__assert_fail@plt+0x65e4>
   18268:	movw	r1, #33772	; 0x83ec
   1826c:	mov	r0, r4
   18270:	movt	r1, #1
   18274:	bl	183b4 <__assert_fail@plt+0x57c4>
   18278:	b	1828c <__assert_fail@plt+0x569c>
   1827c:	movw	r0, #20064	; 0x4e60
   18280:	movt	r0, #5
   18284:	ldr	r0, [r0, #36]	; 0x24
   18288:	bl	191d4 <__assert_fail@plt+0x65e4>
   1828c:	movw	r5, #17800	; 0x4588
   18290:	movt	r5, #5
   18294:	ldr	r0, [r5]
   18298:	bl	29a40 <__assert_fail@plt+0x16e50>
   1829c:	cmp	r0, #0
   182a0:	bne	1833c <__assert_fail@plt+0x574c>
   182a4:	ldr	r0, [r5]
   182a8:	bl	29a5c <__assert_fail@plt+0x16e6c>
   182ac:	ldr	r0, [r5]
   182b0:	bl	2bcbc <__assert_fail@plt+0x190cc>
   182b4:	mov	r0, #0
   182b8:	str	r0, [r5]
   182bc:	bl	1fbb8 <__assert_fail@plt+0xcfc8>
   182c0:	cmp	r0, #0
   182c4:	beq	182d0 <__assert_fail@plt+0x56e0>
   182c8:	bl	1fbd8 <__assert_fail@plt+0xcfe8>
   182cc:	bl	1fb88 <__assert_fail@plt+0xcf98>
   182d0:	movw	r0, #17780	; 0x4574
   182d4:	movt	r0, #5
   182d8:	ldr	r0, [r0]
   182dc:	bl	2bc60 <__assert_fail@plt+0x19070>
   182e0:	cmn	r0, #1
   182e4:	bne	18334 <__assert_fail@plt+0x5744>
   182e8:	bl	12908 <__errno_location@plt>
   182ec:	ldr	r4, [r0]
   182f0:	movw	r0, #20108	; 0x4e8c
   182f4:	movw	r2, #61819	; 0xf17b
   182f8:	movt	r0, #5
   182fc:	movt	r2, #3
   18300:	ldr	r1, [r0, #72]	; 0x48
   18304:	mov	r0, #0
   18308:	bl	294c0 <__assert_fail@plt+0x168d0>
   1830c:	movw	r2, #13527	; 0x34d7
   18310:	mov	r3, r0
   18314:	mov	r0, #0
   18318:	mov	r1, r4
   1831c:	movt	r2, #4
   18320:	bl	127b8 <error@plt>
   18324:	movw	r0, #20064	; 0x4e60
   18328:	mov	r1, #1
   1832c:	movt	r0, #5
   18330:	str	r1, [r0, #28]
   18334:	sub	sp, fp, #8
   18338:	pop	{r4, r5, fp, pc}
   1833c:	bl	12908 <__errno_location@plt>
   18340:	movw	r1, #62897	; 0xf5b1
   18344:	ldr	r4, [r0]
   18348:	mov	r0, #0
   1834c:	mov	r2, #5
   18350:	movt	r1, #3
   18354:	bl	12674 <dcgettext@plt>
   18358:	mov	r2, r0
   1835c:	ldr	r0, [r5]
   18360:	ldr	r1, [r0]
   18364:	cmn	r1, #1
   18368:	bgt	18390 <__assert_fail@plt+0x57a0>
   1836c:	ldr	r0, [r0, #4]
   18370:	movw	r1, #61759	; 0xf13f
   18374:	movw	r3, #3732	; 0xe94
   18378:	movt	r1, #3
   1837c:	movt	r3, #4
   18380:	cmp	r0, #0
   18384:	moveq	r3, r1
   18388:	moveq	r0, r1
   1838c:	b	1839c <__assert_fail@plt+0x57ac>
   18390:	movw	r3, #61759	; 0xf13f
   18394:	movt	r3, #3
   18398:	mov	r0, r3
   1839c:	str	r0, [sp]
   183a0:	mov	r0, #0
   183a4:	mov	r1, r4
   183a8:	bl	127b8 <error@plt>
   183ac:	mov	r0, #1
   183b0:	bl	125e4 <_exit@plt>
   183b4:	push	{r4, r5, fp, lr}
   183b8:	add	fp, sp, #8
   183bc:	mov	r4, r1
   183c0:	mov	r5, r0
   183c4:	ldr	r0, [r5, #156]	; 0x9c
   183c8:	cmp	r0, #0
   183cc:	movne	r1, r4
   183d0:	blne	183b4 <__assert_fail@plt+0x57c4>
   183d4:	mov	r0, r5
   183d8:	blx	r4
   183dc:	ldr	r5, [r5, #160]	; 0xa0
   183e0:	cmp	r5, #0
   183e4:	bne	183c4 <__assert_fail@plt+0x57d4>
   183e8:	pop	{r4, r5, fp, pc}
   183ec:	ldr	r1, [r0]
   183f0:	movw	r2, #17084	; 0x42bc
   183f4:	movt	r2, #1
   183f8:	cmp	r1, r2
   183fc:	beq	1842c <__assert_fail@plt+0x583c>
   18400:	movw	r2, #16932	; 0x4224
   18404:	movt	r2, #1
   18408:	cmp	r1, r2
   1840c:	movwne	r2, #17024	; 0x4280
   18410:	movtne	r2, #1
   18414:	cmpne	r1, r2
   18418:	beq	1842c <__assert_fail@plt+0x583c>
   1841c:	movw	r2, #39680	; 0x9b00
   18420:	movt	r2, #1
   18424:	cmp	r1, r2
   18428:	bxne	lr
   1842c:	mov	r1, #0
   18430:	str	r1, [r0, #44]	; 0x2c
   18434:	bx	lr
   18438:	push	{r4, sl, fp, lr}
   1843c:	add	fp, sp, #8
   18440:	mov	r4, r0
   18444:	movw	r0, #20108	; 0x4e8c
   18448:	mov	r2, r1
   1844c:	movt	r0, #5
   18450:	ldr	r1, [r0, #72]	; 0x48
   18454:	mov	r0, #0
   18458:	bl	294c0 <__assert_fail@plt+0x168d0>
   1845c:	movw	r2, #13527	; 0x34d7
   18460:	mov	r3, r0
   18464:	mov	r0, #0
   18468:	mov	r1, r4
   1846c:	movt	r2, #4
   18470:	bl	127b8 <error@plt>
   18474:	movw	r0, #20064	; 0x4e60
   18478:	mov	r1, #1
   1847c:	movt	r0, #5
   18480:	str	r1, [r0, #28]
   18484:	pop	{r4, sl, fp, pc}
   18488:	push	{r4, r5, fp, lr}
   1848c:	add	fp, sp, #8
   18490:	mov	r4, r1
   18494:	movw	r1, #20064	; 0x4e60
   18498:	mov	r5, r0
   1849c:	movt	r1, #5
   184a0:	ldr	r0, [r1, #16]
   184a4:	cmn	r0, #100	; 0x64
   184a8:	beq	184b4 <__assert_fail@plt+0x58c4>
   184ac:	cmn	r0, #1
   184b0:	ble	18508 <__assert_fail@plt+0x5918>
   184b4:	ldr	r1, [r1]
   184b8:	cmp	r1, #0
   184bc:	beq	184d4 <__assert_fail@plt+0x58e4>
   184c0:	mov	r1, r5
   184c4:	mov	r2, r4
   184c8:	mov	r3, #256	; 0x100
   184cc:	pop	{r4, r5, fp, lr}
   184d0:	b	3d22c <__assert_fail@plt+0x2a63c>
   184d4:	mov	r1, r5
   184d8:	mov	r2, r4
   184dc:	mov	r3, #0
   184e0:	bl	3d22c <__assert_fail@plt+0x2a63c>
   184e4:	cmp	r0, #0
   184e8:	beq	18500 <__assert_fail@plt+0x5910>
   184ec:	mov	r2, r0
   184f0:	mov	r0, r5
   184f4:	mov	r1, r4
   184f8:	pop	{r4, r5, fp, lr}
   184fc:	b	18528 <__assert_fail@plt+0x5938>
   18500:	mov	r0, #0
   18504:	pop	{r4, r5, fp, pc}
   18508:	movw	r0, #61835	; 0xf18b
   1850c:	movw	r1, #59913	; 0xea09
   18510:	movw	r3, #61857	; 0xf1a1
   18514:	movw	r2, #605	; 0x25d
   18518:	movt	r0, #3
   1851c:	movt	r1, #3
   18520:	movt	r3, #3
   18524:	bl	12bf0 <__assert_fail@plt>
   18528:	push	{r4, r5, r6, sl, fp, lr}
   1852c:	add	fp, sp, #16
   18530:	mov	r6, r2
   18534:	mov	r4, r1
   18538:	mov	r5, r0
   1853c:	bl	12908 <__errno_location@plt>
   18540:	ldr	r0, [r0]
   18544:	cmp	r0, #20
   18548:	cmpne	r0, #2
   1854c:	bne	18584 <__assert_fail@plt+0x5994>
   18550:	movw	r0, #20108	; 0x4e8c
   18554:	movt	r0, #5
   18558:	ldrb	r0, [r0, #44]	; 0x2c
   1855c:	tst	r0, #2
   18560:	bne	1858c <__assert_fail@plt+0x599c>
   18564:	movw	r0, #20064	; 0x4e60
   18568:	mov	r1, r5
   1856c:	mov	r2, r4
   18570:	mov	r3, #256	; 0x100
   18574:	movt	r0, #5
   18578:	ldr	r0, [r0, #16]
   1857c:	pop	{r4, r5, r6, sl, fp, lr}
   18580:	b	3d22c <__assert_fail@plt+0x2a63c>
   18584:	mov	r0, r6
   18588:	pop	{r4, r5, r6, sl, fp, pc}
   1858c:	movw	r0, #17768	; 0x4568
   18590:	movw	r1, #62945	; 0xf5e1
   18594:	mov	r2, r5
   18598:	movt	r0, #5
   1859c:	movt	r1, #3
   185a0:	ldr	r0, [r0]
   185a4:	bl	128fc <fprintf@plt>
   185a8:	b	18564 <__assert_fail@plt+0x5974>
   185ac:	push	{r4, r5, fp, lr}
   185b0:	add	fp, sp, #8
   185b4:	mov	r5, r0
   185b8:	movw	r0, #20064	; 0x4e60
   185bc:	mov	r4, r1
   185c0:	movt	r0, #5
   185c4:	ldr	r0, [r0, #16]
   185c8:	cmn	r0, #100	; 0x64
   185cc:	beq	185d8 <__assert_fail@plt+0x59e8>
   185d0:	cmn	r0, #1
   185d4:	ble	1860c <__assert_fail@plt+0x5a1c>
   185d8:	mov	r1, r5
   185dc:	mov	r2, r4
   185e0:	mov	r3, #0
   185e4:	bl	3d22c <__assert_fail@plt+0x2a63c>
   185e8:	cmp	r0, #0
   185ec:	beq	18604 <__assert_fail@plt+0x5a14>
   185f0:	mov	r2, r0
   185f4:	mov	r0, r5
   185f8:	mov	r1, r4
   185fc:	pop	{r4, r5, fp, lr}
   18600:	b	18528 <__assert_fail@plt+0x5938>
   18604:	mov	r0, #0
   18608:	pop	{r4, r5, fp, pc}
   1860c:	movw	r0, #61835	; 0xf18b
   18610:	movw	r1, #59913	; 0xea09
   18614:	movw	r3, #61903	; 0xf1cf
   18618:	mov	r2, #636	; 0x27c
   1861c:	movt	r0, #3
   18620:	movt	r1, #3
   18624:	movt	r3, #3
   18628:	bl	12bf0 <__assert_fail@plt>
   1862c:	push	{fp, lr}
   18630:	mov	fp, sp
   18634:	mov	r2, r1
   18638:	mov	r1, r0
   1863c:	movw	r0, #20064	; 0x4e60
   18640:	movt	r0, #5
   18644:	ldr	r0, [r0, #16]
   18648:	cmn	r0, #1
   1864c:	bgt	18658 <__assert_fail@plt+0x5a68>
   18650:	cmn	r0, #100	; 0x64
   18654:	bne	18664 <__assert_fail@plt+0x5a74>
   18658:	mov	r3, #256	; 0x100
   1865c:	pop	{fp, lr}
   18660:	b	3d22c <__assert_fail@plt+0x2a63c>
   18664:	movw	r0, #61949	; 0xf1fd
   18668:	movw	r1, #59913	; 0xea09
   1866c:	movw	r3, #62005	; 0xf235
   18670:	movw	r2, #653	; 0x28d
   18674:	movt	r0, #3
   18678:	movt	r1, #3
   1867c:	movt	r3, #3
   18680:	bl	12bf0 <__assert_fail@plt>
   18684:	push	{r4, r5, fp, lr}
   18688:	add	fp, sp, #8
   1868c:	mov	r5, r0
   18690:	movw	r0, #17840	; 0x45b0
   18694:	mov	r4, r1
   18698:	movw	r1, #62051	; 0xf263
   1869c:	movt	r0, #5
   186a0:	movt	r1, #3
   186a4:	ldrd	r2, [r0]
   186a8:	adds	r2, r2, #1
   186ac:	adc	r3, r3, #0
   186b0:	strd	r2, [r0]
   186b4:	movw	r0, #17768	; 0x4568
   186b8:	mov	r2, r5
   186bc:	movt	r0, #5
   186c0:	ldr	r0, [r0]
   186c4:	bl	128fc <fprintf@plt>
   186c8:	movw	r0, #20108	; 0x4e8c
   186cc:	movt	r0, #5
   186d0:	ldr	r0, [r0, #48]	; 0x30
   186d4:	cmp	r0, #0
   186d8:	beq	1870c <__assert_fail@plt+0x5b1c>
   186dc:	cmp	r0, #2
   186e0:	beq	186fc <__assert_fail@plt+0x5b0c>
   186e4:	cmp	r0, #1
   186e8:	bne	1871c <__assert_fail@plt+0x5b2c>
   186ec:	mov	r0, r5
   186f0:	mov	r1, r4
   186f4:	pop	{r4, r5, fp, lr}
   186f8:	b	185ac <__assert_fail@plt+0x59bc>
   186fc:	mov	r0, r5
   18700:	mov	r1, r4
   18704:	pop	{r4, r5, fp, lr}
   18708:	b	18488 <__assert_fail@plt+0x5898>
   1870c:	mov	r0, r5
   18710:	mov	r1, r4
   18714:	pop	{r4, r5, fp, lr}
   18718:	b	1862c <__assert_fail@plt+0x5a3c>
   1871c:	movw	r0, #58985	; 0xe669
   18720:	movw	r1, #59913	; 0xea09
   18724:	movw	r3, #62068	; 0xf274
   18728:	movw	r2, #677	; 0x2a5
   1872c:	movt	r0, #3
   18730:	movt	r1, #3
   18734:	movt	r3, #3
   18738:	bl	12bf0 <__assert_fail@plt>
   1873c:	movw	r0, #20108	; 0x4e8c
   18740:	movt	r0, #5
   18744:	ldr	r0, [r0, #48]	; 0x30
   18748:	cmp	r0, #1
   1874c:	moveq	r0, #1
   18750:	bxeq	lr
   18754:	cmp	r0, #2
   18758:	movne	r0, #0
   1875c:	bxne	lr
   18760:	movw	r0, #20064	; 0x4e60
   18764:	movt	r0, #5
   18768:	ldr	r0, [r0]
   1876c:	clz	r0, r0
   18770:	lsr	r0, r0, #5
   18774:	bx	lr
   18778:	push	{r4, r5, fp, lr}
   1877c:	add	fp, sp, #8
   18780:	mov	r4, r3
   18784:	ldr	r3, [r0]
   18788:	mov	r5, r0
   1878c:	cmp	r3, #0
   18790:	beq	187ec <__assert_fail@plt+0x5bfc>
   18794:	and	r0, r3, #61440	; 0xf000
   18798:	cmp	r0, #40960	; 0xa000
   1879c:	bne	187d0 <__assert_fail@plt+0x5be0>
   187a0:	movw	r0, #20108	; 0x4e8c
   187a4:	movt	r0, #5
   187a8:	ldr	r0, [r0, #48]	; 0x30
   187ac:	cmp	r0, #1
   187b0:	beq	18854 <__assert_fail@plt+0x5c64>
   187b4:	cmp	r0, #2
   187b8:	bne	187d0 <__assert_fail@plt+0x5be0>
   187bc:	movw	r0, #20064	; 0x4e60
   187c0:	movt	r0, #5
   187c4:	ldr	r0, [r0]
   187c8:	cmp	r0, #0
   187cc:	beq	18854 <__assert_fail@plt+0x5c64>
   187d0:	movw	r1, #20064	; 0x4e60
   187d4:	mov	r0, #1
   187d8:	movt	r1, #5
   187dc:	str	r3, [r1, #8]
   187e0:	strb	r0, [r1, #5]
   187e4:	str	r3, [r4, #16]
   187e8:	pop	{r4, r5, fp, pc}
   187ec:	ldr	r0, [fp, #8]
   187f0:	cmp	r0, #0
   187f4:	beq	18814 <__assert_fail@plt+0x5c24>
   187f8:	movw	r0, #20064	; 0x4e60
   187fc:	mov	r1, #0
   18800:	movt	r0, #5
   18804:	str	r1, [r0, #8]
   18808:	strh	r1, [r0, #4]
   1880c:	mov	r0, #1
   18810:	pop	{r4, r5, fp, pc}
   18814:	mov	r0, r1
   18818:	mov	r1, r2
   1881c:	mov	r2, r4
   18820:	bl	17e48 <__assert_fail@plt+0x5258>
   18824:	mov	r1, r0
   18828:	mov	r0, #0
   1882c:	cmp	r1, #0
   18830:	popne	{r4, r5, fp, pc}
   18834:	ldr	r1, [r4, #16]
   18838:	movw	r2, #20064	; 0x4e60
   1883c:	mov	r0, #1
   18840:	movt	r2, #5
   18844:	str	r1, [r5]
   18848:	strb	r0, [r2, #5]
   1884c:	str	r1, [r2, #8]
   18850:	pop	{r4, r5, fp, pc}
   18854:	mov	r0, r1
   18858:	mov	r1, r2
   1885c:	mov	r2, r4
   18860:	bl	17e48 <__assert_fail@plt+0x5258>
   18864:	mov	r1, r0
   18868:	mov	r0, #0
   1886c:	cmp	r1, #0
   18870:	beq	18878 <__assert_fail@plt+0x5c88>
   18874:	pop	{r4, r5, fp, pc}
   18878:	ldr	r0, [r4, #16]
   1887c:	movw	r1, #20064	; 0x4e60
   18880:	movt	r1, #5
   18884:	str	r0, [r1, #8]
   18888:	str	r0, [r5]
   1888c:	mov	r0, #1
   18890:	strb	r0, [r1, #5]
   18894:	pop	{r4, r5, fp, pc}
   18898:	mov	r1, r0
   1889c:	mov	r0, #1
   188a0:	cmp	r1, #0
   188a4:	bxeq	lr
   188a8:	ldrb	r2, [r1, #17]
   188ac:	cmp	r2, #0
   188b0:	bne	188bc <__assert_fail@plt+0x5ccc>
   188b4:	ldr	r1, [r1, #152]	; 0x98
   188b8:	b	188a0 <__assert_fail@plt+0x5cb0>
   188bc:	mov	r0, #0
   188c0:	bx	lr
   188c4:	ldrb	r2, [r0]
   188c8:	mov	ip, r0
   188cc:	mov	r0, #0
   188d0:	sub	r3, r2, #40	; 0x28
   188d4:	cmp	r3, #5
   188d8:	bhi	18914 <__assert_fail@plt+0x5d24>
   188dc:	add	r2, pc, #0
   188e0:	ldr	pc, [r2, r3, lsl #2]
   188e4:	andeq	r8, r1, ip, lsl r9
   188e8:	strdeq	r8, [r1], -ip
   188ec:	andeq	r8, r1, r8, lsr #18
   188f0:	andeq	r8, r1, r8, lsr #18
   188f4:	strdeq	r8, [r1], -ip
   188f8:	andeq	r8, r1, ip, lsr #18
   188fc:	eor	r0, r1, #1
   18900:	ldrb	r1, [ip, #1]
   18904:	clz	r1, r1
   18908:	lsr	r1, r1, #5
   1890c:	and	r0, r1, r0
   18910:	bx	lr
   18914:	cmp	r2, #33	; 0x21
   18918:	bxne	lr
   1891c:	ldrb	r0, [ip, #1]
   18920:	clz	r0, r0
   18924:	lsr	r0, r0, #5
   18928:	bx	lr
   1892c:	ldrb	r0, [ip, #1]
   18930:	cmp	r0, #0
   18934:	movwne	r0, #1
   18938:	bx	lr
   1893c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18940:	add	fp, sp, #28
   18944:	sub	sp, sp, #28
   18948:	mov	r4, #1
   1894c:	cmp	r0, #2
   18950:	blt	18ba4 <__assert_fail@plt+0x5fb4>
   18954:	movw	r6, #63368	; 0xf788
   18958:	movw	sl, #20108	; 0x4e8c
   1895c:	mov	r8, r1
   18960:	mov	r5, r0
   18964:	mov	r4, #1
   18968:	add	r9, sp, #20
   1896c:	stmib	sp, {r0, r1}
   18970:	movt	r6, #3
   18974:	movt	sl, #5
   18978:	ldr	r7, [r8, r4, lsl #2]
   1897c:	movw	r0, #62112	; 0xf2a0
   18980:	movt	r0, #3
   18984:	mov	r1, r7
   18988:	bl	124f4 <strcmp@plt>
   1898c:	cmp	r0, #0
   18990:	beq	18a9c <__assert_fail@plt+0x5eac>
   18994:	movw	r0, #62115	; 0xf2a3
   18998:	mov	r1, r7
   1899c:	movt	r0, #3
   189a0:	bl	124f4 <strcmp@plt>
   189a4:	cmp	r0, #0
   189a8:	beq	18aa4 <__assert_fail@plt+0x5eb4>
   189ac:	movw	r0, #62118	; 0xf2a6
   189b0:	mov	r1, r7
   189b4:	movt	r0, #3
   189b8:	bl	124f4 <strcmp@plt>
   189bc:	cmp	r0, #0
   189c0:	beq	18aac <__assert_fail@plt+0x5ebc>
   189c4:	movw	r0, #62121	; 0xf2a9
   189c8:	mov	r1, r7
   189cc:	movt	r0, #3
   189d0:	bl	124f4 <strcmp@plt>
   189d4:	cmp	r0, #0
   189d8:	beq	18bb0 <__assert_fail@plt+0x5fc0>
   189dc:	movw	r0, #62124	; 0xf2ac
   189e0:	mov	r1, r7
   189e4:	movt	r0, #3
   189e8:	bl	124f4 <strcmp@plt>
   189ec:	cmp	r0, #0
   189f0:	beq	18ab8 <__assert_fail@plt+0x5ec8>
   189f4:	movw	r0, #63187	; 0xf6d3
   189f8:	mov	r1, r7
   189fc:	mov	r2, #2
   18a00:	movt	r0, #3
   18a04:	bl	12b90 <strncmp@plt>
   18a08:	cmp	r0, #0
   18a0c:	bne	18ba4 <__assert_fail@plt+0x5fb4>
   18a10:	ldrb	r5, [r7, #2]!
   18a14:	cmp	r5, #0
   18a18:	beq	18bc4 <__assert_fail@plt+0x5fd4>
   18a1c:	bl	1286c <__ctype_b_loc@plt>
   18a20:	ldr	r0, [r0]
   18a24:	add	r0, r0, r5, lsl #1
   18a28:	ldrb	r0, [r0, #1]
   18a2c:	tst	r0, #8
   18a30:	beq	18bb8 <__assert_fail@plt+0x5fc8>
   18a34:	bl	12908 <__errno_location@plt>
   18a38:	mov	r5, r0
   18a3c:	ldr	r0, [r0]
   18a40:	add	r1, sp, #24
   18a44:	mov	r2, #10
   18a48:	str	r0, [sp, #12]
   18a4c:	mov	r0, #0
   18a50:	str	r0, [r5]
   18a54:	mov	r0, r7
   18a58:	bl	128b4 <strtoul@plt>
   18a5c:	mov	r8, r0
   18a60:	ldr	r0, [sp, #24]
   18a64:	cmp	r8, #0
   18a68:	cmpeq	r0, r7
   18a6c:	beq	18bb8 <__assert_fail@plt+0x5fc8>
   18a70:	ldrb	r0, [r0]
   18a74:	cmp	r0, #0
   18a78:	bne	18be8 <__assert_fail@plt+0x5ff8>
   18a7c:	cmn	r8, #1
   18a80:	beq	18c0c <__assert_fail@plt+0x601c>
   18a84:	cmp	r8, #65536	; 0x10000
   18a88:	bcs	18c18 <__assert_fail@plt+0x6028>
   18a8c:	ldr	r0, [sp, #12]
   18a90:	strh	r8, [sl, #68]	; 0x44
   18a94:	str	r0, [r5]
   18a98:	b	18b94 <__assert_fail@plt+0x5fa4>
   18a9c:	mov	r0, #2
   18aa0:	b	18ab0 <__assert_fail@plt+0x5ec0>
   18aa4:	mov	r0, #1
   18aa8:	b	18ab0 <__assert_fail@plt+0x5ec0>
   18aac:	mov	r0, #0
   18ab0:	bl	1af84 <__assert_fail@plt+0x8394>
   18ab4:	b	18b98 <__assert_fail@plt+0x5fa8>
   18ab8:	add	r4, r4, #1
   18abc:	cmp	r4, r5
   18ac0:	bge	18c68 <__assert_fail@plt+0x6078>
   18ac4:	ldr	r8, [r8, r4, lsl #2]
   18ac8:	mov	r0, #0
   18acc:	add	r1, sp, #18
   18ad0:	mov	r2, r9
   18ad4:	str	r0, [sp, #20]
   18ad8:	mov	r0, #44	; 0x2c
   18adc:	strh	r0, [sp, #18]
   18ae0:	mov	r0, r8
   18ae4:	bl	127ac <strtok_r@plt>
   18ae8:	cmp	r0, #0
   18aec:	beq	18c74 <__assert_fail@plt+0x6084>
   18af0:	mov	r5, r0
   18af4:	mov	r7, #0
   18af8:	ldr	r0, [r6, r7]
   18afc:	mov	r1, r5
   18b00:	bl	124f4 <strcmp@plt>
   18b04:	cmp	r0, #0
   18b08:	beq	18b58 <__assert_fail@plt+0x5f68>
   18b0c:	add	r7, r7, #12
   18b10:	cmp	r7, #108	; 0x6c
   18b14:	bne	18af8 <__assert_fail@plt+0x5f08>
   18b18:	movw	r1, #63004	; 0xf61c
   18b1c:	mov	r0, #0
   18b20:	mov	r2, #5
   18b24:	movt	r1, #3
   18b28:	bl	12674 <dcgettext@plt>
   18b2c:	ldr	r1, [sl, #72]	; 0x48
   18b30:	mov	r5, r0
   18b34:	mov	r0, #0
   18b38:	mov	r2, r8
   18b3c:	bl	294c0 <__assert_fail@plt+0x168d0>
   18b40:	mov	r3, r0
   18b44:	mov	r0, #0
   18b48:	mov	r1, #0
   18b4c:	mov	r2, r5
   18b50:	bl	127b8 <error@plt>
   18b54:	b	18b6c <__assert_fail@plt+0x5f7c>
   18b58:	add	r0, r6, r7
   18b5c:	ldr	r1, [sl, #44]	; 0x2c
   18b60:	ldr	r0, [r0, #4]
   18b64:	orr	r0, r1, r0
   18b68:	str	r0, [sl, #44]	; 0x2c
   18b6c:	mov	r0, #0
   18b70:	add	r1, sp, #18
   18b74:	mov	r2, r9
   18b78:	bl	127ac <strtok_r@plt>
   18b7c:	mov	r5, r0
   18b80:	cmp	r0, #0
   18b84:	bne	18af4 <__assert_fail@plt+0x5f04>
   18b88:	ldrb	r0, [sl, #44]	; 0x2c
   18b8c:	tst	r0, #16
   18b90:	bne	18ca0 <__assert_fail@plt+0x60b0>
   18b94:	ldmib	sp, {r5, r8}
   18b98:	add	r4, r4, #1
   18b9c:	cmp	r4, r5
   18ba0:	blt	18978 <__assert_fail@plt+0x5d88>
   18ba4:	mov	r0, r4
   18ba8:	sub	sp, fp, #28
   18bac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18bb0:	add	r4, r4, #1
   18bb4:	b	18ba4 <__assert_fail@plt+0x5fb4>
   18bb8:	movw	r1, #63137	; 0xf6a1
   18bbc:	movt	r1, #3
   18bc0:	b	18bcc <__assert_fail@plt+0x5fdc>
   18bc4:	movw	r1, #63073	; 0xf661
   18bc8:	movt	r1, #3
   18bcc:	mov	r0, #0
   18bd0:	mov	r2, #5
   18bd4:	bl	12674 <dcgettext@plt>
   18bd8:	mov	r2, r0
   18bdc:	mov	r0, #1
   18be0:	mov	r1, #0
   18be4:	bl	127b8 <error@plt>
   18be8:	movw	r1, #63190	; 0xf6d6
   18bec:	mov	r0, #0
   18bf0:	mov	r2, #5
   18bf4:	movt	r1, #3
   18bf8:	bl	12674 <dcgettext@plt>
   18bfc:	mov	r2, r0
   18c00:	mov	r0, #1
   18c04:	mov	r1, #0
   18c08:	b	18c60 <__assert_fail@plt+0x6070>
   18c0c:	ldr	r4, [r5]
   18c10:	cmp	r4, #0
   18c14:	bne	18c40 <__assert_fail@plt+0x6050>
   18c18:	movw	r1, #63220	; 0xf6f4
   18c1c:	mov	r0, #0
   18c20:	mov	r2, #5
   18c24:	movt	r1, #3
   18c28:	bl	12674 <dcgettext@plt>
   18c2c:	mov	r2, r0
   18c30:	mov	r0, #1
   18c34:	mov	r1, #0
   18c38:	mov	r3, r8
   18c3c:	bl	127b8 <error@plt>
   18c40:	movw	r1, #63190	; 0xf6d6
   18c44:	mov	r0, #0
   18c48:	mov	r2, #5
   18c4c:	movt	r1, #3
   18c50:	bl	12674 <dcgettext@plt>
   18c54:	mov	r2, r0
   18c58:	mov	r0, #1
   18c5c:	mov	r1, r4
   18c60:	mov	r3, r7
   18c64:	bl	127b8 <error@plt>
   18c68:	movw	r1, #62127	; 0xf2af
   18c6c:	movt	r1, #3
   18c70:	b	18c7c <__assert_fail@plt+0x608c>
   18c74:	movw	r1, #63040	; 0xf640
   18c78:	movt	r1, #3
   18c7c:	mov	r0, #0
   18c80:	mov	r2, #5
   18c84:	bl	12674 <dcgettext@plt>
   18c88:	mov	r2, r0
   18c8c:	mov	r0, #0
   18c90:	mov	r1, #0
   18c94:	bl	127b8 <error@plt>
   18c98:	mov	r0, #1
   18c9c:	bl	17bc0 <__assert_fail@plt+0x4fd0>
   18ca0:	mov	r0, #1
   18ca4:	bl	17d80 <__assert_fail@plt+0x5190>
   18ca8:	mov	r0, #0
   18cac:	bl	12884 <exit@plt>
   18cb0:	push	{r4, r5, fp, lr}
   18cb4:	add	fp, sp, #8
   18cb8:	sub	sp, sp, #8
   18cbc:	mov	r4, r0
   18cc0:	movw	r0, #62165	; 0xf2d5
   18cc4:	movt	r0, #3
   18cc8:	bl	127f4 <getenv@plt>
   18ccc:	cmp	r0, #0
   18cd0:	movwne	r0, #1
   18cd4:	strb	r0, [r4, #17]
   18cd8:	bl	17f50 <__assert_fail@plt+0x5360>
   18cdc:	mov	r5, #0
   18ce0:	str	r5, [r4, #60]	; 0x3c
   18ce4:	strb	r0, [r4, #56]	; 0x38
   18ce8:	mov	r0, #0
   18cec:	bl	12b60 <isatty@plt>
   18cf0:	cmp	r0, #0
   18cf4:	strb	r5, [r4, #15]
   18cf8:	mov	r1, #1
   18cfc:	movwne	r0, #1
   18d00:	strb	r0, [r4, #16]
   18d04:	ldrb	r0, [r4, #17]
   18d08:	cmp	r0, #0
   18d0c:	mvn	r0, #0
   18d10:	strbne	r5, [r4, #16]
   18d14:	strh	r1, [r4]
   18d18:	str	r0, [r4, #4]
   18d1c:	str	r0, [r4, #8]
   18d20:	mov	r0, sp
   18d24:	mov	r1, #0
   18d28:	mov	r5, #0
   18d2c:	bl	1277c <gettimeofday@plt>
   18d30:	cmp	r0, #0
   18d34:	beq	18d50 <__assert_fail@plt+0x6160>
   18d38:	mov	r0, #0
   18d3c:	bl	12644 <time@plt>
   18d40:	cmn	r0, #1
   18d44:	beq	18e08 <__assert_fail@plt+0x6218>
   18d48:	mov	r1, #0
   18d4c:	b	18d60 <__assert_fail@plt+0x6170>
   18d50:	mov	r2, #1000	; 0x3e8
   18d54:	ldm	sp, {r0, r1}
   18d58:	mov	r5, #0
   18d5c:	mul	r1, r1, r2
   18d60:	orr	r3, r5, r0
   18d64:	sub	r0, r0, #4480	; 0x1180
   18d68:	add	r2, r4, #20
   18d6c:	mov	r5, #0
   18d70:	sub	r0, r0, #81920	; 0x14000
   18d74:	str	r3, [r2]
   18d78:	str	r1, [r2, #4]
   18d7c:	strb	r5, [r4, #36]	; 0x24
   18d80:	str	r0, [r4, #28]
   18d84:	mov	r0, #2
   18d88:	str	r1, [r4, #32]
   18d8c:	strh	r5, [r4, #13]
   18d90:	mov	r1, #512	; 0x200
   18d94:	strh	r0, [r4, #68]	; 0x44
   18d98:	ldrb	r0, [r4, #17]
   18d9c:	cmp	r0, #0
   18da0:	movw	r0, #62181	; 0xf2e5
   18da4:	movt	r0, #3
   18da8:	movweq	r1, #1024	; 0x400
   18dac:	str	r1, [r4, #40]	; 0x28
   18db0:	str	r5, [r4, #44]	; 0x2c
   18db4:	bl	127f4 <getenv@plt>
   18db8:	cmp	r0, #0
   18dbc:	bne	18de4 <__assert_fail@plt+0x61f4>
   18dc0:	mov	r0, #0
   18dc4:	strb	r5, [r4, #12]
   18dc8:	bl	1af84 <__assert_fail@plt+0x8394>
   18dcc:	mov	r0, #8
   18dd0:	strb	r5, [r4, #80]	; 0x50
   18dd4:	str	r0, [r4, #72]	; 0x48
   18dd8:	str	r5, [r4, #76]	; 0x4c
   18ddc:	sub	sp, fp, #8
   18de0:	pop	{r4, r5, fp, pc}
   18de4:	movw	r1, #62197	; 0xf2f5
   18de8:	mov	r0, #0
   18dec:	mov	r2, #5
   18df0:	movt	r1, #3
   18df4:	bl	12674 <dcgettext@plt>
   18df8:	mov	r2, r0
   18dfc:	mov	r0, #1
   18e00:	mov	r1, #0
   18e04:	bl	127b8 <error@plt>
   18e08:	movw	r0, #63324	; 0xf75c
   18e0c:	movw	r1, #59913	; 0xea09
   18e10:	movw	r3, #63340	; 0xf76c
   18e14:	movw	r2, #978	; 0x3d2
   18e18:	movt	r0, #3
   18e1c:	movt	r1, #3
   18e20:	movt	r3, #3
   18e24:	bl	12bf0 <__assert_fail@plt>
   18e28:	push	{r4, r5, r6, sl, fp, lr}
   18e2c:	add	fp, sp, #16
   18e30:	mov	r6, r0
   18e34:	ldr	r0, [r2, #164]	; 0xa4
   18e38:	mov	r4, r2
   18e3c:	mov	r5, r1
   18e40:	add	r0, r0, #1
   18e44:	str	r0, [r2, #164]	; 0xa4
   18e48:	ldrb	r0, [r2, #18]
   18e4c:	cmp	r0, #0
   18e50:	movw	r0, #20064	; 0x4e60
   18e54:	movt	r0, #5
   18e58:	beq	18e78 <__assert_fail@plt+0x6288>
   18e5c:	ldrb	r1, [r0, #4]
   18e60:	cmp	r1, #0
   18e64:	beq	18ef4 <__assert_fail@plt+0x6304>
   18e68:	ldrb	r2, [r4, #19]
   18e6c:	cmp	r2, #0
   18e70:	movwne	r2, #1
   18e74:	b	18e88 <__assert_fail@plt+0x6298>
   18e78:	ldrb	r1, [r4, #19]
   18e7c:	mov	r2, #1
   18e80:	cmp	r1, #0
   18e84:	beq	18ea8 <__assert_fail@plt+0x62b8>
   18e88:	ldrb	r3, [r0, #5]
   18e8c:	cmp	r2, #0
   18e90:	clz	r1, r3
   18e94:	lsr	r1, r1, #5
   18e98:	beq	18ec0 <__assert_fail@plt+0x62d0>
   18e9c:	cmp	r3, #0
   18ea0:	beq	18ef4 <__assert_fail@plt+0x6304>
   18ea4:	b	18ec0 <__assert_fail@plt+0x62d0>
   18ea8:	ldrb	r1, [r4, #20]
   18eac:	cmp	r1, #0
   18eb0:	beq	18f14 <__assert_fail@plt+0x6324>
   18eb4:	ldrb	r1, [r0, #5]
   18eb8:	clz	r1, r1
   18ebc:	lsr	r1, r1, #5
   18ec0:	ldrb	r2, [r4, #20]
   18ec4:	cmp	r2, #0
   18ec8:	beq	18f14 <__assert_fail@plt+0x6324>
   18ecc:	ldrd	r2, [r5, #96]	; 0x60
   18ed0:	orr	r2, r2, r3
   18ed4:	clz	r2, r2
   18ed8:	lsr	r2, r2, #5
   18edc:	orrs	r1, r1, r2
   18ee0:	bne	18ef4 <__assert_fail@plt+0x6304>
   18ee4:	ldr	r1, [r5, #16]
   18ee8:	and	r1, r1, #61440	; 0xf000
   18eec:	cmp	r1, #16384	; 0x4000
   18ef0:	bne	18f14 <__assert_fail@plt+0x6324>
   18ef4:	ldr	r1, [r0, #12]
   18ef8:	mov	r0, r6
   18efc:	mov	r2, r5
   18f00:	bl	17e48 <__assert_fail@plt+0x5258>
   18f04:	mov	r1, r0
   18f08:	mov	r0, #0
   18f0c:	cmp	r1, #0
   18f10:	popne	{r4, r5, r6, sl, fp, pc}
   18f14:	ldr	r3, [r4]
   18f18:	mov	r0, r6
   18f1c:	mov	r1, r5
   18f20:	mov	r2, r4
   18f24:	blx	r3
   18f28:	mov	r1, r0
   18f2c:	mov	r0, #0
   18f30:	cmp	r1, #0
   18f34:	beq	18f48 <__assert_fail@plt+0x6358>
   18f38:	ldr	r0, [r4, #168]	; 0xa8
   18f3c:	add	r0, r0, #1
   18f40:	str	r0, [r4, #168]	; 0xa8
   18f44:	mov	r0, #1
   18f48:	pop	{r4, r5, r6, sl, fp, pc}
   18f4c:	movw	r1, #18628	; 0x48c4
   18f50:	movw	r2, #16908	; 0x420c
   18f54:	movt	r1, #1
   18f58:	movt	r2, #1
   18f5c:	sub	r1, r0, r1
   18f60:	sub	r0, r0, r2
   18f64:	clz	r1, r1
   18f68:	clz	r0, r0
   18f6c:	lsr	r1, r1, #5
   18f70:	lsr	r0, r0, #5
   18f74:	orr	r0, r0, r1
   18f78:	bx	lr
   18f7c:	mov	r2, r1
   18f80:	movw	r1, #20108	; 0x4e8c
   18f84:	movt	r1, #5
   18f88:	ldr	r1, [r1, #72]	; 0x48
   18f8c:	b	294c0 <__assert_fail@plt+0x168d0>
   18f90:	push	{r4, r5, r6, r7, fp, lr}
   18f94:	add	fp, sp, #16
   18f98:	movw	r7, #20064	; 0x4e60
   18f9c:	mov	r6, r0
   18fa0:	mov	r4, r2
   18fa4:	mov	r5, r1
   18fa8:	movt	r7, #5
   18fac:	ldrb	r0, [r7, #40]	; 0x28
   18fb0:	cmp	r0, #0
   18fb4:	cmpne	r4, #0
   18fb8:	bne	18ff4 <__assert_fail@plt+0x6404>
   18fbc:	movw	r0, #20108	; 0x4e8c
   18fc0:	mov	r2, r3
   18fc4:	movt	r0, #5
   18fc8:	ldr	r1, [r0, #72]	; 0x48
   18fcc:	mov	r0, #0
   18fd0:	bl	294c0 <__assert_fail@plt+0x168d0>
   18fd4:	movw	r2, #13527	; 0x34d7
   18fd8:	mov	r3, r0
   18fdc:	mov	r0, r6
   18fe0:	mov	r1, r5
   18fe4:	movt	r2, #4
   18fe8:	bl	127b8 <error@plt>
   18fec:	mov	r0, #1
   18ff0:	str	r0, [r7, #28]
   18ff4:	cmp	r4, #0
   18ff8:	movne	r0, #1
   18ffc:	strbne	r0, [r7, #40]	; 0x28
   19000:	pop	{r4, r5, r6, r7, fp, pc}
   19004:	push	{fp, lr}
   19008:	mov	fp, sp
   1900c:	mov	r3, r1
   19010:	mov	r1, r0
   19014:	mov	r0, #1
   19018:	mov	r2, #1
   1901c:	bl	18f90 <__assert_fail@plt+0x63a0>
   19020:	bl	12b9c <abort@plt>
   19024:	push	{fp, lr}
   19028:	mov	fp, sp
   1902c:	mov	r3, r1
   19030:	mov	r1, r0
   19034:	movw	r0, #20064	; 0x4e60
   19038:	mov	r2, #0
   1903c:	movt	r0, #5
   19040:	strb	r2, [r0, #40]	; 0x28
   19044:	mov	r0, #1
   19048:	mov	r2, #0
   1904c:	bl	18f90 <__assert_fail@plt+0x63a0>
   19050:	bl	12b9c <abort@plt>
   19054:	push	{fp, lr}
   19058:	mov	fp, sp
   1905c:	add	r2, r0, #4
   19060:	add	r1, r0, #48	; 0x30
   19064:	mov	r0, r2
   19068:	bl	1ef28 <__assert_fail@plt+0xc338>
   1906c:	mov	r0, #0
   19070:	pop	{fp, pc}
   19074:	push	{r4, r5, r6, sl, fp, lr}
   19078:	add	fp, sp, #16
   1907c:	sub	sp, sp, #8
   19080:	mov	r6, r0
   19084:	mov	r0, #8
   19088:	bl	2de8c <__assert_fail@plt+0x1b29c>
   1908c:	mov	r4, #0
   19090:	cmp	r0, #0
   19094:	beq	19100 <__assert_fail@plt+0x6510>
   19098:	mov	r5, r0
   1909c:	mov	r0, r6
   190a0:	bl	12680 <strdup@plt>
   190a4:	cmp	r0, #0
   190a8:	str	r0, [r5]
   190ac:	beq	190f8 <__assert_fail@plt+0x6508>
   190b0:	movw	r0, #37260	; 0x918c
   190b4:	movw	r2, #37132	; 0x910c
   190b8:	movw	r3, #37188	; 0x9144
   190bc:	mov	r1, #0
   190c0:	mov	r4, #0
   190c4:	movt	r0, #1
   190c8:	movt	r2, #1
   190cc:	movt	r3, #1
   190d0:	str	r0, [sp]
   190d4:	mov	r0, #11
   190d8:	bl	21bb4 <__assert_fail@plt+0xefc4>
   190dc:	cmp	r0, #0
   190e0:	str	r0, [r5, #4]
   190e4:	beq	190f0 <__assert_fail@plt+0x6500>
   190e8:	mov	r4, r5
   190ec:	b	19100 <__assert_fail@plt+0x6510>
   190f0:	ldr	r0, [r5]
   190f4:	bl	2bcbc <__assert_fail@plt+0x190cc>
   190f8:	mov	r0, r5
   190fc:	bl	2bcbc <__assert_fail@plt+0x190cc>
   19100:	mov	r0, r4
   19104:	sub	sp, fp, #16
   19108:	pop	{r4, r5, r6, sl, fp, pc}
   1910c:	push	{fp, lr}
   19110:	mov	fp, sp
   19114:	mov	ip, r1
   19118:	ldr	lr, [r0]
   1911c:	ldr	r3, [r0, #4]
   19120:	ldr	r1, [r0, #12]
   19124:	ldr	r2, [r0, #8]
   19128:	eor	r0, r2, lr
   1912c:	eor	r1, r1, r3
   19130:	mov	r2, ip
   19134:	mov	r3, #0
   19138:	bl	3cfc8 <__assert_fail@plt+0x2a3d8>
   1913c:	mov	r0, r2
   19140:	pop	{fp, pc}
   19144:	push	{r4, r5, fp, lr}
   19148:	add	fp, sp, #8
   1914c:	ldrd	r2, [r1, #8]
   19150:	ldrd	r4, [r0, #8]
   19154:	eor	r3, r5, r3
   19158:	eor	r2, r4, r2
   1915c:	orrs	r2, r2, r3
   19160:	mov	r2, #0
   19164:	bne	19184 <__assert_fail@plt+0x6594>
   19168:	ldrd	r2, [r1]
   1916c:	ldrd	r0, [r0]
   19170:	eor	r1, r1, r3
   19174:	eor	r0, r0, r2
   19178:	orr	r0, r0, r1
   1917c:	clz	r0, r0
   19180:	lsr	r2, r0, #5
   19184:	mov	r0, r2
   19188:	pop	{r4, r5, fp, pc}
   1918c:	push	{r4, sl, fp, lr}
   19190:	add	fp, sp, #8
   19194:	mov	r4, r0
   19198:	ldr	r0, [r0, #20]
   1919c:	cmp	r0, #0
   191a0:	beq	191b0 <__assert_fail@plt+0x65c0>
   191a4:	bl	129d4 <fclose@plt>
   191a8:	cmp	r0, #0
   191ac:	bne	191c4 <__assert_fail@plt+0x65d4>
   191b0:	ldr	r0, [r4, #16]
   191b4:	bl	2bcbc <__assert_fail@plt+0x190cc>
   191b8:	mov	r0, r4
   191bc:	pop	{r4, sl, fp, lr}
   191c0:	b	2bcbc <__assert_fail@plt+0x190cc>
   191c4:	bl	12908 <__errno_location@plt>
   191c8:	ldr	r0, [r0]
   191cc:	ldr	r1, [r4, #16]
   191d0:	bl	19024 <__assert_fail@plt+0x6434>
   191d4:	push	{r4, sl, fp, lr}
   191d8:	add	fp, sp, #8
   191dc:	mov	r4, r0
   191e0:	ldr	r0, [r0]
   191e4:	bl	2bcbc <__assert_fail@plt+0x190cc>
   191e8:	ldr	r0, [r4, #4]
   191ec:	pop	{r4, sl, fp, lr}
   191f0:	b	21ee0 <__assert_fail@plt+0xf2f0>
   191f4:	push	{r4, r5, r6, r7, fp, lr}
   191f8:	add	fp, sp, #16
   191fc:	sub	sp, sp, #104	; 0x68
   19200:	mov	r5, r0
   19204:	mov	r0, #24
   19208:	mov	r7, r1
   1920c:	bl	2de8c <__assert_fail@plt+0x1b29c>
   19210:	mov	r6, #0
   19214:	cmp	r0, #0
   19218:	beq	192f0 <__assert_fail@plt+0x6700>
   1921c:	mov	r4, r0
   19220:	mov	r0, r7
   19224:	bl	12680 <strdup@plt>
   19228:	cmp	r0, #0
   1922c:	str	r0, [r4, #16]
   19230:	beq	192b0 <__assert_fail@plt+0x66c0>
   19234:	ldr	r1, [r5]
   19238:	mov	r0, r7
   1923c:	bl	21688 <__assert_fail@plt+0xea98>
   19240:	cmp	r0, #0
   19244:	str	r0, [r4, #20]
   19248:	beq	192bc <__assert_fail@plt+0x66cc>
   1924c:	bl	1298c <fileno@plt>
   19250:	cmn	r0, #1
   19254:	ble	19318 <__assert_fail@plt+0x6728>
   19258:	mov	r1, #1
   1925c:	mov	r6, r0
   19260:	bl	2117c <__assert_fail@plt+0xe58c>
   19264:	mov	r1, sp
   19268:	mov	r0, r6
   1926c:	bl	3d20c <__assert_fail@plt+0x2a61c>
   19270:	cmn	r0, #1
   19274:	ble	192c8 <__assert_fail@plt+0x66d8>
   19278:	ldm	sp, {r0, r1}
   1927c:	ldr	r2, [sp, #96]	; 0x60
   19280:	ldr	r3, [sp, #100]	; 0x64
   19284:	stm	r4, {r0, r1, r2, r3}
   19288:	mov	r1, r4
   1928c:	ldr	r0, [r5, #4]
   19290:	bl	21900 <__assert_fail@plt+0xed10>
   19294:	cmp	r0, #0
   19298:	beq	192d8 <__assert_fail@plt+0x66e8>
   1929c:	mov	r6, r0
   192a0:	mov	r0, r4
   192a4:	bl	1918c <__assert_fail@plt+0x659c>
   192a8:	ldr	r6, [r6, #20]
   192ac:	b	192f0 <__assert_fail@plt+0x6700>
   192b0:	mov	r0, r4
   192b4:	bl	2bcbc <__assert_fail@plt+0x190cc>
   192b8:	b	192f0 <__assert_fail@plt+0x6700>
   192bc:	mov	r0, r4
   192c0:	bl	1918c <__assert_fail@plt+0x659c>
   192c4:	b	192f0 <__assert_fail@plt+0x6700>
   192c8:	mov	r0, r4
   192cc:	bl	1918c <__assert_fail@plt+0x659c>
   192d0:	mov	r6, #0
   192d4:	b	192f0 <__assert_fail@plt+0x6700>
   192d8:	ldr	r0, [r5, #4]
   192dc:	mov	r1, r4
   192e0:	bl	22530 <__assert_fail@plt+0xf940>
   192e4:	cmp	r0, #0
   192e8:	beq	192fc <__assert_fail@plt+0x670c>
   192ec:	ldr	r6, [r4, #20]
   192f0:	mov	r0, r6
   192f4:	sub	sp, fp, #16
   192f8:	pop	{r4, r5, r6, r7, fp, pc}
   192fc:	bl	12908 <__errno_location@plt>
   19300:	ldr	r6, [r0]
   19304:	mov	r5, r0
   19308:	mov	r0, r4
   1930c:	bl	1918c <__assert_fail@plt+0x659c>
   19310:	str	r6, [r5]
   19314:	b	192d0 <__assert_fail@plt+0x66e0>
   19318:	movw	r0, #54662	; 0xd586
   1931c:	movw	r1, #63476	; 0xf7f4
   19320:	movw	r3, #63488	; 0xf800
   19324:	mov	r2, #166	; 0xa6
   19328:	movt	r0, #3
   1932c:	movt	r1, #3
   19330:	movt	r3, #3
   19334:	bl	12bf0 <__assert_fail@plt>
   19338:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1933c:	add	fp, sp, #24
   19340:	ldr	r4, [fp, #8]
   19344:	cmp	r4, #40	; 0x28
   19348:	beq	195ac <__assert_fail@plt+0x69bc>
   1934c:	cmp	r4, #91	; 0x5b
   19350:	beq	195c4 <__assert_fail@plt+0x69d4>
   19354:	cmp	r4, #123	; 0x7b
   19358:	beq	195dc <__assert_fail@plt+0x69ec>
   1935c:	ldr	r9, [fp, #12]
   19360:	mov	r8, r0
   19364:	mov	r0, #20
   19368:	mov	r5, r3
   1936c:	mov	r6, r2
   19370:	mov	r7, r1
   19374:	bl	2a688 <__assert_fail@plt+0x17a98>
   19378:	mov	r1, #0
   1937c:	str	r0, [r8]
   19380:	str	r5, [r0]
   19384:	str	r6, [r0, #12]
   19388:	str	r1, [r0, #16]
   1938c:	strb	r9, [r0, #5]
   19390:	strb	r4, [r0, #4]
   19394:	add	r0, r6, #2
   19398:	bl	2a688 <__assert_fail@plt+0x17a98>
   1939c:	ldr	r1, [r8]
   193a0:	mov	r2, r6
   193a4:	str	r0, [r1, #8]
   193a8:	mov	r1, r7
   193ac:	bl	1295c <strncpy@plt>
   193b0:	add	r0, r0, r6
   193b4:	cmp	r5, #1
   193b8:	bhi	193d8 <__assert_fail@plt+0x67e8>
   193bc:	cmp	r4, #0
   193c0:	bne	195f4 <__assert_fail@plt+0x6a04>
   193c4:	cmp	r9, #0
   193c8:	bne	1960c <__assert_fail@plt+0x6a1c>
   193cc:	mov	r1, #0
   193d0:	strb	r1, [r0]
   193d4:	b	19504 <__assert_fail@plt+0x6914>
   193d8:	cmp	r5, #2
   193dc:	bne	19624 <__assert_fail@plt+0x6a34>
   193e0:	sub	r2, r4, #65	; 0x41
   193e4:	cmp	r2, #56	; 0x38
   193e8:	bhi	1951c <__assert_fail@plt+0x692c>
   193ec:	ldr	r1, [fp, #16]
   193f0:	add	r3, pc, #0
   193f4:	ldr	pc, [r3, r2, lsl #2]
   193f8:	ldrdeq	r9, [r1], -ip
   193fc:	ldrdeq	r9, [r1], -ip
   19400:	ldrdeq	r9, [r1], -ip
   19404:	ldrdeq	r9, [r1], -ip
   19408:	andeq	r9, r1, ip, asr #7
   1940c:	ldrdeq	r9, [r1], -ip
   19410:	ldrdeq	r9, [r1], -ip
   19414:	andeq	r9, r1, r0, lsl r5
   19418:	andeq	r9, r1, ip, asr #7
   1941c:	andeq	r9, r1, ip, asr #7
   19420:	andeq	r9, r1, ip, asr #7
   19424:	andeq	r9, r1, ip, asr #7
   19428:	ldrdeq	r9, [r1], -ip
   1942c:	andeq	r9, r1, ip, asr #7
   19430:	andeq	r9, r1, ip, asr #7
   19434:	andeq	r9, r1, r0, lsl r5
   19438:	andeq	r9, r1, ip, asr #7
   1943c:	andeq	r9, r1, ip, asr #7
   19440:	andeq	r9, r1, ip, asr #10
   19444:	ldrdeq	r9, [r1], -ip
   19448:	ldrdeq	r9, [r1], -ip
   1944c:	andeq	r9, r1, ip, asr #7
   19450:	andeq	r9, r1, ip, asr #7
   19454:	andeq	r9, r1, ip, asr #7
   19458:	andeq	r9, r1, ip, ror r5
   1945c:	andeq	r9, r1, r8, lsr #10
   19460:	andeq	r9, r1, ip, asr #7
   19464:	andeq	r9, r1, ip, asr #7
   19468:	andeq	r9, r1, ip, asr #7
   1946c:	andeq	r9, r1, ip, asr #7
   19470:	andeq	r9, r1, ip, asr #7
   19474:	andeq	r9, r1, ip, asr #7
   19478:	ldrdeq	r9, [r1], -ip
   1947c:	ldrdeq	r9, [r1], -ip
   19480:	ldrdeq	r9, [r1], -ip
   19484:	andeq	r9, r1, r4, lsl r5
   19488:	andeq	r9, r1, ip, asr #7
   1948c:	andeq	r9, r1, r0, lsl r5
   19490:	ldrdeq	r9, [r1], -ip
   19494:	andeq	r9, r1, r0, lsl r5
   19498:	andeq	r9, r1, r8, lsr r5
   1949c:	andeq	r9, r1, ip, asr #7
   194a0:	ldrdeq	r9, [r1], -ip
   194a4:	muleq	r1, r4, r5
   194a8:	andeq	r9, r1, ip, asr r5
   194ac:	ldrdeq	r9, [r1], -ip
   194b0:	andeq	r9, r1, ip, asr #7
   194b4:	andeq	r9, r1, r0, lsl r5
   194b8:	andeq	r9, r1, ip, asr #7
   194bc:	andeq	r9, r1, ip, asr #7
   194c0:	ldrdeq	r9, [r1], -ip
   194c4:	ldrdeq	r9, [r1], -ip
   194c8:	ldrdeq	r9, [r1], -ip
   194cc:	andeq	r9, r1, ip, asr #7
   194d0:	andeq	r9, r1, ip, asr #7
   194d4:	andeq	r9, r1, ip, asr #7
   194d8:	andeq	r9, r1, r0, ror r5
   194dc:	mov	r2, #1
   194e0:	strb	r2, [r1, #18]
   194e4:	mov	r2, #115	; 0x73
   194e8:	strb	r2, [r0]
   194ec:	mov	r2, #3
   194f0:	mov	r3, #0
   194f4:	strb	r3, [r0, #1]
   194f8:	ldr	r0, [r1, #24]
   194fc:	cmp	r2, r0
   19500:	strhi	r2, [r1, #24]
   19504:	ldr	r0, [r8]
   19508:	add	r0, r0, #16
   1950c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   19510:	mov	r4, #115	; 0x73
   19514:	strb	r4, [r0], #1
   19518:	b	193cc <__assert_fail@plt+0x67dc>
   1951c:	cmp	r4, #37	; 0x25
   19520:	strbeq	r4, [r0], #1
   19524:	b	193cc <__assert_fail@plt+0x67dc>
   19528:	mov	r2, #115	; 0x73
   1952c:	strb	r2, [r0]
   19530:	mov	r2, #5
   19534:	b	194f0 <__assert_fail@plt+0x6900>
   19538:	mov	r2, #1
   1953c:	mov	r3, #115	; 0x73
   19540:	strb	r2, [r1, #20]
   19544:	strb	r3, [r0]
   19548:	b	194f0 <__assert_fail@plt+0x6900>
   1954c:	mov	r2, #1
   19550:	strb	r2, [r1, #18]
   19554:	mov	r2, #103	; 0x67
   19558:	b	194e8 <__assert_fail@plt+0x68f8>
   1955c:	mov	r2, #111	; 0x6f
   19560:	strb	r2, [r0]
   19564:	mov	r2, #1
   19568:	strb	r2, [r1, #18]
   1956c:	b	194ec <__assert_fail@plt+0x68fc>
   19570:	mov	r2, #1
   19574:	strb	r2, [r1, #19]
   19578:	b	19584 <__assert_fail@plt+0x6994>
   1957c:	mov	r2, #1
   19580:	strb	r2, [r1, #18]
   19584:	mov	r2, #115	; 0x73
   19588:	strb	r2, [r0]
   1958c:	mov	r2, #2
   19590:	b	194f0 <__assert_fail@plt+0x6900>
   19594:	mov	r2, #1
   19598:	strb	r2, [r1, #18]
   1959c:	mov	r2, #115	; 0x73
   195a0:	strb	r2, [r0]
   195a4:	mov	r2, #4
   195a8:	b	194f0 <__assert_fail@plt+0x6900>
   195ac:	movw	r0, #63687	; 0xf8c7
   195b0:	movw	r1, #63561	; 0xf849
   195b4:	movw	r3, #63569	; 0xf851
   195b8:	mov	r2, #80	; 0x50
   195bc:	movt	r0, #3
   195c0:	b	19638 <__assert_fail@plt+0x6a48>
   195c4:	movw	r0, #63668	; 0xf8b4
   195c8:	movw	r1, #63561	; 0xf849
   195cc:	movw	r3, #63569	; 0xf851
   195d0:	mov	r2, #79	; 0x4f
   195d4:	movt	r0, #3
   195d8:	b	19638 <__assert_fail@plt+0x6a48>
   195dc:	movw	r0, #63542	; 0xf836
   195e0:	movw	r1, #63561	; 0xf849
   195e4:	movw	r3, #63569	; 0xf851
   195e8:	mov	r2, #78	; 0x4e
   195ec:	movt	r0, #3
   195f0:	b	19638 <__assert_fail@plt+0x6a48>
   195f4:	movw	r0, #63706	; 0xf8da
   195f8:	movw	r1, #63561	; 0xf849
   195fc:	movw	r3, #63569	; 0xf851
   19600:	mov	r2, #97	; 0x61
   19604:	movt	r0, #3
   19608:	b	19638 <__assert_fail@plt+0x6a48>
   1960c:	movw	r0, #63723	; 0xf8eb
   19610:	movw	r1, #63561	; 0xf849
   19614:	movw	r3, #63569	; 0xf851
   19618:	mov	r2, #98	; 0x62
   1961c:	movt	r0, #3
   19620:	b	19638 <__assert_fail@plt+0x6a48>
   19624:	movw	r0, #63744	; 0xf900
   19628:	movw	r1, #63561	; 0xf849
   1962c:	movw	r3, #63569	; 0xf851
   19630:	mov	r2, #105	; 0x69
   19634:	movt	r0, #3
   19638:	movt	r1, #3
   1963c:	movt	r3, #3
   19640:	bl	12bf0 <__assert_fail@plt>
   19644:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19648:	add	fp, sp, #28
   1964c:	sub	sp, sp, #12
   19650:	mov	r8, r2
   19654:	mov	r2, r1
   19658:	movw	r1, #39680	; 0x9b00
   1965c:	mov	r6, r0
   19660:	movt	r1, #1
   19664:	mov	r0, r2
   19668:	mov	r2, r8
   1966c:	bl	17b1c <__assert_fail@plt+0x4f2c>
   19670:	mov	r7, r0
   19674:	movw	r0, #257	; 0x101
   19678:	mov	r1, #0
   1967c:	mov	r9, r8
   19680:	strh	r0, [r7, #16]
   19684:	add	r5, r7, #40	; 0x28
   19688:	vld1.32	{d16-d17}, [r6]!
   1968c:	vst1.32	{d16-d17}, [r5]
   19690:	ldr	r0, [r6]
   19694:	str	r1, [r7, #40]	; 0x28
   19698:	strh	r1, [r7, #18]
   1969c:	str	r1, [r7, #24]
   196a0:	str	r0, [r7, #56]	; 0x38
   196a4:	ldrb	r0, [r8]
   196a8:	cmp	r0, #37	; 0x25
   196ac:	beq	19734 <__assert_fail@plt+0x6b44>
   196b0:	cmp	r0, #92	; 0x5c
   196b4:	beq	196c8 <__assert_fail@plt+0x6ad8>
   196b8:	cmp	r0, #0
   196bc:	beq	19a3c <__assert_fail@plt+0x6e4c>
   196c0:	mov	r6, r8
   196c4:	b	19a34 <__assert_fail@plt+0x6e44>
   196c8:	mov	r6, r8
   196cc:	ldrb	r0, [r6, #1]!
   196d0:	cmp	r0, #0
   196d4:	beq	19868 <__assert_fail@plt+0x6c78>
   196d8:	cmp	r0, #99	; 0x63
   196dc:	beq	19a68 <__assert_fail@plt+0x6e78>
   196e0:	and	r1, r0, #248	; 0xf8
   196e4:	cmp	r1, #48	; 0x30
   196e8:	bne	19894 <__assert_fail@plt+0x6ca4>
   196ec:	mov	r1, #0
   196f0:	mov	r4, #0
   196f4:	bne	19994 <__assert_fail@plt+0x6da4>
   196f8:	add	r2, r8, #2
   196fc:	mov	r1, #0
   19700:	mov	r3, #0
   19704:	lsl	r1, r1, #3
   19708:	cmp	r3, #2
   1970c:	uxtab	r0, r1, r0
   19710:	sub	r1, r0, #48	; 0x30
   19714:	beq	19990 <__assert_fail@plt+0x6da0>
   19718:	ldrb	r0, [r2, r3]
   1971c:	add	r4, r3, #1
   19720:	and	r3, r0, #248	; 0xf8
   19724:	cmp	r3, #48	; 0x30
   19728:	mov	r3, r4
   1972c:	beq	19704 <__assert_fail@plt+0x6b14>
   19730:	b	19994 <__assert_fail@plt+0x6da4>
   19734:	ldrb	sl, [r8, #1]
   19738:	mov	r6, #1
   1973c:	mov	r4, #1
   19740:	cmp	sl, #37	; 0x25
   19744:	beq	197e0 <__assert_fail@plt+0x6bf0>
   19748:	cmp	sl, #0
   1974c:	beq	19ab0 <__assert_fail@plt+0x6ec0>
   19750:	mov	r1, #1
   19754:	ldrb	sl, [r8, r1]
   19758:	mov	r4, r1
   1975c:	cmp	sl, #0
   19760:	beq	19784 <__assert_fail@plt+0x6b94>
   19764:	movw	r0, #64133	; 0xfa85
   19768:	mov	r1, sl
   1976c:	mov	r2, #5
   19770:	movt	r0, #3
   19774:	bl	129b0 <memchr@plt>
   19778:	add	r1, r4, #1
   1977c:	cmp	r0, #0
   19780:	bne	19754 <__assert_fail@plt+0x6b64>
   19784:	bl	1286c <__ctype_b_loc@plt>
   19788:	ldr	r0, [r0]
   1978c:	add	r1, r0, sl, lsl #1
   19790:	ldrb	r1, [r1, #1]
   19794:	tst	r1, #8
   19798:	beq	197bc <__assert_fail@plt+0x6bcc>
   1979c:	add	r1, r4, #1
   197a0:	ldrb	sl, [r8, r1]
   197a4:	add	r1, r1, #1
   197a8:	add	r2, r0, sl, lsl #1
   197ac:	ldrb	r2, [r2, #1]
   197b0:	tst	r2, #8
   197b4:	bne	197a0 <__assert_fail@plt+0x6bb0>
   197b8:	sub	r4, r1, #1
   197bc:	cmp	sl, #46	; 0x2e
   197c0:	bne	197e0 <__assert_fail@plt+0x6bf0>
   197c4:	add	r1, r8, #1
   197c8:	ldrb	sl, [r1, r4]
   197cc:	add	r4, r4, #1
   197d0:	add	r2, r0, sl, lsl #1
   197d4:	ldrb	r2, [r2, #1]
   197d8:	tst	r2, #8
   197dc:	bne	197c8 <__assert_fail@plt+0x6bd8>
   197e0:	movw	r0, #64138	; 0xfa8a
   197e4:	mov	r1, sl
   197e8:	mov	r2, #29
   197ec:	movt	r0, #3
   197f0:	bl	129b0 <memchr@plt>
   197f4:	cmp	r0, #0
   197f8:	add	r4, r8, r4
   197fc:	mov	r0, sl
   19800:	bne	19828 <__assert_fail@plt+0x6c38>
   19804:	movw	r0, #64167	; 0xfaa7
   19808:	mov	r1, sl
   1980c:	mov	r2, #5
   19810:	movt	r0, #3
   19814:	bl	129b0 <memchr@plt>
   19818:	cmp	r0, #0
   1981c:	beq	198bc <__assert_fail@plt+0x6ccc>
   19820:	ldrb	r0, [r4, #1]
   19824:	mov	r6, #2
   19828:	cmp	r0, #0
   1982c:	beq	198c0 <__assert_fail@plt+0x6cd0>
   19830:	cmp	r6, #2
   19834:	mov	r0, #0
   19838:	add	r1, r6, r4
   1983c:	sub	r2, r4, r9
   19840:	mov	r3, #2
   19844:	ldrbeq	r0, [r4, #1]
   19848:	sub	r6, r1, #1
   1984c:	str	sl, [sp]
   19850:	mov	r1, r9
   19854:	stmib	sp, {r0, r7}
   19858:	mov	r0, r5
   1985c:	bl	19338 <__assert_fail@plt+0x6748>
   19860:	mov	r5, r0
   19864:	b	19a30 <__assert_fail@plt+0x6e40>
   19868:	movw	r1, #63764	; 0xf914
   1986c:	mov	r0, #0
   19870:	mov	r2, #5
   19874:	mov	r4, #0
   19878:	movt	r1, #3
   1987c:	bl	12674 <dcgettext@plt>
   19880:	mov	r2, r0
   19884:	mov	r0, #0
   19888:	mov	r1, #0
   1988c:	bl	127b8 <error@plt>
   19890:	b	19a04 <__assert_fail@plt+0x6e14>
   19894:	cmp	r0, #101	; 0x65
   19898:	bgt	19950 <__assert_fail@plt+0x6d60>
   1989c:	cmp	r0, #92	; 0x5c
   198a0:	beq	1999c <__assert_fail@plt+0x6dac>
   198a4:	cmp	r0, #97	; 0x61
   198a8:	beq	199a4 <__assert_fail@plt+0x6db4>
   198ac:	cmp	r0, #98	; 0x62
   198b0:	bne	199bc <__assert_fail@plt+0x6dcc>
   198b4:	mov	r0, #8
   198b8:	b	199fc <__assert_fail@plt+0x6e0c>
   198bc:	mov	r6, #0
   198c0:	movw	r0, #63880	; 0xf988
   198c4:	mov	r1, sl
   198c8:	mov	r2, #4
   198cc:	movt	r0, #3
   198d0:	bl	129b0 <memchr@plt>
   198d4:	cmp	r0, #0
   198d8:	bne	19ad8 <__assert_fail@plt+0x6ee8>
   198dc:	cmp	r6, #2
   198e0:	bne	198f8 <__assert_fail@plt+0x6d08>
   198e4:	ldrb	r0, [r4, #1]
   198e8:	movw	r1, #63946	; 0xf9ca
   198ec:	movt	r1, #3
   198f0:	cmp	r0, #0
   198f4:	beq	19900 <__assert_fail@plt+0x6d10>
   198f8:	movw	r1, #64019	; 0xfa13
   198fc:	movt	r1, #3
   19900:	mov	r0, #0
   19904:	mov	r2, #5
   19908:	bl	12674 <dcgettext@plt>
   1990c:	mov	r6, r4
   19910:	mov	r2, r0
   19914:	mov	r0, #0
   19918:	mov	r1, #0
   1991c:	ldrb	r3, [r6], -r9
   19920:	bl	127b8 <error@plt>
   19924:	mov	r0, #0
   19928:	add	r2, r6, #1
   1992c:	mov	r1, r9
   19930:	mov	r3, #0
   19934:	str	r0, [sp]
   19938:	stmib	sp, {r0, r7}
   1993c:	mov	r0, r5
   19940:	bl	19338 <__assert_fail@plt+0x6748>
   19944:	mov	r5, r0
   19948:	mov	r6, r4
   1994c:	b	19a30 <__assert_fail@plt+0x6e40>
   19950:	sub	r1, r0, #110	; 0x6e
   19954:	cmp	r1, #8
   19958:	bhi	199ac <__assert_fail@plt+0x6dbc>
   1995c:	add	r0, pc, #0
   19960:	ldr	pc, [r0, r1, lsl #2]
   19964:	andeq	r9, r1, r8, lsl #19
   19968:			; <UNDEFINED> instruction: 0x000199bc
   1996c:			; <UNDEFINED> instruction: 0x000199bc
   19970:			; <UNDEFINED> instruction: 0x000199bc
   19974:	andeq	r9, r1, r8, ror #19
   19978:			; <UNDEFINED> instruction: 0x000199bc
   1997c:	strdeq	r9, [r1], -r8
   19980:			; <UNDEFINED> instruction: 0x000199bc
   19984:	strdeq	r9, [r1], -r0
   19988:	mov	r0, #10
   1998c:	b	199fc <__assert_fail@plt+0x6e0c>
   19990:	mov	r4, #3
   19994:	strb	r1, [r8]
   19998:	b	19a04 <__assert_fail@plt+0x6e14>
   1999c:	mov	r0, #92	; 0x5c
   199a0:	b	199fc <__assert_fail@plt+0x6e0c>
   199a4:	mov	r0, #7
   199a8:	b	199fc <__assert_fail@plt+0x6e0c>
   199ac:	cmp	r0, #102	; 0x66
   199b0:	bne	199bc <__assert_fail@plt+0x6dcc>
   199b4:	mov	r0, #12
   199b8:	b	199fc <__assert_fail@plt+0x6e0c>
   199bc:	movw	r1, #63811	; 0xf943
   199c0:	mov	r0, #0
   199c4:	mov	r2, #5
   199c8:	movt	r1, #3
   199cc:	bl	12674 <dcgettext@plt>
   199d0:	ldrb	r3, [r6]
   199d4:	mov	r2, r0
   199d8:	mov	r0, #0
   199dc:	mov	r1, #0
   199e0:	bl	127b8 <error@plt>
   199e4:	b	19a34 <__assert_fail@plt+0x6e44>
   199e8:	mov	r0, #13
   199ec:	b	199fc <__assert_fail@plt+0x6e0c>
   199f0:	mov	r0, #11
   199f4:	b	199fc <__assert_fail@plt+0x6e0c>
   199f8:	mov	r0, #9
   199fc:	strb	r0, [r8]
   19a00:	mov	r4, #1
   19a04:	mov	r0, #0
   19a08:	mov	r1, r9
   19a0c:	mov	r3, #0
   19a10:	str	r0, [sp]
   19a14:	stmib	sp, {r0, r7}
   19a18:	sub	r0, r8, r9
   19a1c:	add	r2, r0, #1
   19a20:	mov	r0, r5
   19a24:	bl	19338 <__assert_fail@plt+0x6748>
   19a28:	mov	r5, r0
   19a2c:	add	r6, r8, r4
   19a30:	add	r9, r6, #1
   19a34:	add	r8, r6, #1
   19a38:	b	196a4 <__assert_fail@plt+0x6ab4>
   19a3c:	cmp	r8, r9
   19a40:	bls	19aa4 <__assert_fail@plt+0x6eb4>
   19a44:	mov	r0, #0
   19a48:	sub	r2, r8, r9
   19a4c:	mov	r1, r9
   19a50:	mov	r3, #0
   19a54:	str	r0, [sp]
   19a58:	stmib	sp, {r0, r7}
   19a5c:	mov	r0, r5
   19a60:	bl	19338 <__assert_fail@plt+0x6748>
   19a64:	b	19aa4 <__assert_fail@plt+0x6eb4>
   19a68:	mov	r0, #0
   19a6c:	sub	r2, r8, r9
   19a70:	mov	r1, r9
   19a74:	mov	r3, #1
   19a78:	str	r0, [sp]
   19a7c:	stmib	sp, {r0, r7}
   19a80:	mov	r0, r5
   19a84:	bl	19338 <__assert_fail@plt+0x6748>
   19a88:	ldrb	r0, [r7, #18]
   19a8c:	cmp	r0, #0
   19a90:	beq	19aa4 <__assert_fail@plt+0x6eb4>
   19a94:	ldr	r0, [r7, #24]
   19a98:	cmp	r0, #2
   19a9c:	movls	r0, #3
   19aa0:	strls	r0, [r7, #24]
   19aa4:	mov	r0, #1
   19aa8:	sub	sp, fp, #28
   19aac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19ab0:	movw	r1, #63846	; 0xf966
   19ab4:	mov	r0, #0
   19ab8:	mov	r2, #5
   19abc:	movt	r1, #3
   19ac0:	bl	12674 <dcgettext@plt>
   19ac4:	mov	r2, r0
   19ac8:	mov	r0, #1
   19acc:	mov	r1, #0
   19ad0:	mov	r3, r8
   19ad4:	bl	127b8 <error@plt>
   19ad8:	movw	r1, #63884	; 0xf98c
   19adc:	mov	r0, #0
   19ae0:	mov	r2, #5
   19ae4:	movt	r1, #3
   19ae8:	bl	12674 <dcgettext@plt>
   19aec:	ldrb	r3, [r4]
   19af0:	mov	r2, r0
   19af4:	mov	r0, #1
   19af8:	mov	r1, #0
   19afc:	bl	127b8 <error@plt>
   19b00:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19b04:	add	fp, sp, #28
   19b08:	sub	sp, sp, #4
   19b0c:	vpush	{d8-d9}
   19b10:	sub	sp, sp, #808	; 0x328
   19b14:	mov	r7, r2
   19b18:	ldr	r8, [r7, #40]!	; 0x28
   19b1c:	cmp	r8, #0
   19b20:	beq	1a2ec <__assert_fail@plt+0x76fc>
   19b24:	mov	sl, r0
   19b28:	add	r0, r1, #48	; 0x30
   19b2c:	vldr	d8, [pc, #1004]	; 19f20 <__assert_fail@plt+0x7330>
   19b30:	mov	r5, r2
   19b34:	mov	r9, r1
   19b38:	str	r0, [sp, #28]
   19b3c:	add	r0, r1, #64	; 0x40
   19b40:	str	r0, [sp, #32]
   19b44:	add	r0, r1, #72	; 0x48
   19b48:	str	r0, [sp, #44]	; 0x2c
   19b4c:	add	r0, r1, #80	; 0x50
   19b50:	str	r0, [sp, #40]	; 0x28
   19b54:	add	r0, r1, #88	; 0x58
   19b58:	str	r0, [sp, #36]	; 0x24
   19b5c:	add	r0, r1, #96	; 0x60
   19b60:	str	r0, [sp, #24]
   19b64:	ldr	r0, [r8]
   19b68:	cmp	r0, #2
   19b6c:	bne	19b98 <__assert_fail@plt+0x6fa8>
   19b70:	ldrb	r2, [r8, #5]
   19b74:	cmp	r2, #0
   19b78:	beq	19bbc <__assert_fail@plt+0x6fcc>
   19b7c:	ldrb	r0, [r8, #4]
   19b80:	cmp	r0, #66	; 0x42
   19b84:	bgt	19cf4 <__assert_fail@plt+0x7104>
   19b88:	cmp	r0, #65	; 0x41
   19b8c:	bne	19d04 <__assert_fail@plt+0x7114>
   19b90:	ldr	r0, [sp, #44]	; 0x2c
   19b94:	b	19d3c <__assert_fail@plt+0x714c>
   19b98:	cmp	r0, #1
   19b9c:	beq	19cc0 <__assert_fail@plt+0x70d0>
   19ba0:	cmp	r0, #0
   19ba4:	bne	19d58 <__assert_fail@plt+0x7168>
   19ba8:	ldr	r0, [r8, #8]
   19bac:	ldr	r1, [r8, #12]
   19bb0:	mov	r2, r7
   19bb4:	bl	1a8b0 <__assert_fail@plt+0x7cc0>
   19bb8:	b	19d58 <__assert_fail@plt+0x7168>
   19bbc:	ldrb	r0, [r8, #4]
   19bc0:	sub	r1, r0, #68	; 0x44
   19bc4:	cmp	r1, #53	; 0x35
   19bc8:	bhi	19d68 <__assert_fail@plt+0x7178>
   19bcc:	add	r0, pc, #0
   19bd0:	ldr	pc, [r0, r1, lsl #2]
   19bd4:	andeq	r9, r1, ip, lsr #25
   19bd8:	andeq	r9, r1, r8, asr sp
   19bdc:	strdeq	r9, [r1], -ip
   19be0:	andeq	r9, r1, r8, ror #28
   19be4:	ldrdeq	r9, [r1], -r4
   19be8:	andeq	r9, r1, r8, asr sp
   19bec:	andeq	r9, r1, r8, asr sp
   19bf0:	andeq	r9, r1, r8, asr sp
   19bf4:	andeq	r9, r1, r8, asr sp
   19bf8:	andeq	r9, r1, r8, lsl lr
   19bfc:	andeq	r9, r1, r8, asr sp
   19c00:	andeq	r9, r1, r8, asr sp
   19c04:	andeq	r9, r1, ip, lsl #27
   19c08:	andeq	r9, r1, r8, asr sp
   19c0c:	andeq	r9, r1, r8, asr sp
   19c10:	ldrdeq	r9, [r1], -r0
   19c14:	andeq	r9, r1, r8, asr sp
   19c18:	muleq	r1, r8, r1
   19c1c:	andeq	r9, r1, r8, asr sp
   19c20:	andeq	r9, r1, r8, asr sp
   19c24:	andeq	r9, r1, r8, asr sp
   19c28:	andeq	r9, r1, r8, lsr #30
   19c2c:	andeq	sl, r1, ip, lsr r0
   19c30:	andeq	r9, r1, r8, asr sp
   19c34:	andeq	r9, r1, r8, asr sp
   19c38:	andeq	r9, r1, r8, asr sp
   19c3c:	andeq	r9, r1, r8, asr sp
   19c40:	andeq	r9, r1, r8, asr sp
   19c44:	andeq	r9, r1, r8, asr sp
   19c48:	andeq	sl, r1, r4, lsl #1
   19c4c:	andeq	r9, r1, r4, lsl #31
   19c50:	andeq	r9, r1, r0, asr #28
   19c54:	andeq	r9, r1, ip, asr #28
   19c58:	andeq	r9, r1, r8, asr sp
   19c5c:	muleq	r1, r8, r0
   19c60:	andeq	r9, r1, r8, asr lr
   19c64:	andeq	sl, r1, r8, lsr #1
   19c68:			; <UNDEFINED> instruction: 0x00019fb4
   19c6c:	andeq	r9, r1, r8, asr sp
   19c70:	andeq	sl, r1, ip, lsr r1
   19c74:	muleq	r1, r0, lr
   19c78:	andeq	sl, r1, ip, lsr #2
   19c7c:	andeq	r9, r1, r8, asr #27
   19c80:	andeq	r9, r1, r8, asr sp
   19c84:	andeq	sl, r1, r4, lsl r0
   19c88:	andeq	r9, r1, r8, asr sp
   19c8c:	andeq	r9, r1, r8, asr sp
   19c90:	strdeq	r9, [r1], -r0
   19c94:	andeq	sl, r1, r8, lsr #32
   19c98:	andeq	sl, r1, r8, ror #2
   19c9c:	andeq	r9, r1, r8, asr sp
   19ca0:	andeq	r9, r1, r8, asr sp
   19ca4:	andeq	r9, r1, r8, asr sp
   19ca8:	andeq	r9, r1, ip, ror sp
   19cac:	ldr	r6, [r8, #8]
   19cb0:	ldrd	r0, [r9]
   19cb4:	mov	r2, #0
   19cb8:	mov	r3, #1
   19cbc:	b	19f98 <__assert_fail@plt+0x73a8>
   19cc0:	ldr	r0, [r8, #8]
   19cc4:	ldr	r1, [r8, #12]
   19cc8:	mov	r2, r7
   19ccc:	bl	1a8b0 <__assert_fail@plt+0x7cc0>
   19cd0:	ldr	r0, [r7, #4]
   19cd4:	bl	2bc60 <__assert_fail@plt+0x19070>
   19cd8:	cmp	r0, #0
   19cdc:	beq	19d58 <__assert_fail@plt+0x7168>
   19ce0:	bl	12908 <__errno_location@plt>
   19ce4:	ldr	r0, [r0]
   19ce8:	ldr	r1, [r5, #48]	; 0x30
   19cec:	bl	18438 <__assert_fail@plt+0x5848>
   19cf0:	b	19d58 <__assert_fail@plt+0x7168>
   19cf4:	cmp	r0, #67	; 0x43
   19cf8:	bne	19d30 <__assert_fail@plt+0x7140>
   19cfc:	ldr	r0, [sp, #36]	; 0x24
   19d00:	b	19d3c <__assert_fail@plt+0x714c>
   19d04:	cmp	r0, #66	; 0x42
   19d08:	bne	1a300 <__assert_fail@plt+0x7710>
   19d0c:	mvn	r1, #0
   19d10:	cmp	r2, #64	; 0x40
   19d14:	mvn	r0, #0
   19d18:	beq	19d40 <__assert_fail@plt+0x7150>
   19d1c:	ldr	r1, [r8, #8]
   19d20:	movw	r2, #61759	; 0xf13f
   19d24:	mov	r0, r7
   19d28:	movt	r2, #3
   19d2c:	b	19d54 <__assert_fail@plt+0x7164>
   19d30:	cmp	r0, #84	; 0x54
   19d34:	bne	1a300 <__assert_fail@plt+0x7710>
   19d38:	ldr	r0, [sp, #40]	; 0x28
   19d3c:	ldrd	r0, [r0]
   19d40:	ldr	r6, [r8, #8]
   19d44:	bl	1a3b4 <__assert_fail@plt+0x77c4>
   19d48:	mov	r2, r0
   19d4c:	mov	r0, r7
   19d50:	mov	r1, r6
   19d54:	bl	1a360 <__assert_fail@plt+0x7770>
   19d58:	ldr	r8, [r8, #16]
   19d5c:	cmp	r8, #0
   19d60:	bne	19b64 <__assert_fail@plt+0x6f74>
   19d64:	b	1a2ec <__assert_fail@plt+0x76fc>
   19d68:	cmp	r0, #37	; 0x25
   19d6c:	beq	19ba8 <__assert_fail@plt+0x6fb8>
   19d70:	cmp	r0, #0
   19d74:	bne	19d58 <__assert_fail@plt+0x7168>
   19d78:	b	1a320 <__assert_fail@plt+0x7730>
   19d7c:	ldr	r4, [r8, #8]
   19d80:	ldr	r0, [r9, #16]
   19d84:	and	r0, r0, #61440	; 0xf000
   19d88:	b	1a1cc <__assert_fail@plt+0x75dc>
   19d8c:	movw	r0, #20064	; 0x4e60
   19d90:	movw	r2, #61759	; 0xf13f
   19d94:	movt	r0, #5
   19d98:	movt	r2, #3
   19d9c:	ldr	r1, [r0]
   19da0:	cmp	r1, #1
   19da4:	blt	19dbc <__assert_fail@plt+0x71cc>
   19da8:	ldr	r0, [r0, #20]
   19dac:	mov	r2, sl
   19db0:	ldrb	r0, [r2, r0]!
   19db4:	cmp	r0, #47	; 0x2f
   19db8:	addeq	r2, r2, #1
   19dbc:	ldr	r1, [r8, #8]
   19dc0:	mov	r0, r7
   19dc4:	b	1a020 <__assert_fail@plt+0x7430>
   19dc8:	ldr	r4, [r8, #8]
   19dcc:	ldr	r0, [r9, #20]
   19dd0:	b	1a1a0 <__assert_fail@plt+0x75b0>
   19dd4:	movw	r4, #20064	; 0x4e60
   19dd8:	movt	r4, #5
   19ddc:	ldr	r0, [r4, #20]
   19de0:	add	r0, r0, #1
   19de4:	bl	2a688 <__assert_fail@plt+0x17a98>
   19de8:	ldr	r4, [r4, #20]
   19dec:	mov	r1, sl
   19df0:	mov	r6, r0
   19df4:	mov	r2, r4
   19df8:	bl	125f0 <memcpy@plt>
   19dfc:	mov	r0, #0
   19e00:	mov	r2, r6
   19e04:	strb	r0, [r6, r4]
   19e08:	mov	r0, r7
   19e0c:	ldr	r1, [r8, #8]
   19e10:	bl	1a360 <__assert_fail@plt+0x7770>
   19e14:	b	1a120 <__assert_fail@plt+0x7530>
   19e18:	add	r4, sp, #48	; 0x30
   19e1c:	mov	r0, r9
   19e20:	mov	r1, r4
   19e24:	bl	21680 <__assert_fail@plt+0xea90>
   19e28:	mov	r0, #0
   19e2c:	mov	r2, r4
   19e30:	strb	r0, [sp, #58]	; 0x3a
   19e34:	mov	r0, r7
   19e38:	ldr	r1, [r8, #8]
   19e3c:	b	19d54 <__assert_fail@plt+0x7164>
   19e40:	ldr	r6, [r8, #8]
   19e44:	ldr	r0, [sp, #36]	; 0x24
   19e48:	b	1a08c <__assert_fail@plt+0x749c>
   19e4c:	movw	r0, #20064	; 0x4e60
   19e50:	movt	r0, #5
   19e54:	b	1a188 <__assert_fail@plt+0x7598>
   19e58:	ldr	r0, [r9, #28]
   19e5c:	bl	12bcc <getgrgid@plt>
   19e60:	cmp	r0, #0
   19e64:	bne	1a178 <__assert_fail@plt+0x7588>
   19e68:	ldr	r6, [r8, #8]
   19e6c:	ldr	r0, [r9, #28]
   19e70:	mov	r2, #1
   19e74:	mov	r1, #0
   19e78:	str	r2, [sp]
   19e7c:	stmib	sp, {r1, r2}
   19e80:	str	r1, [sp, #12]
   19e84:	add	r2, sp, #152	; 0x98
   19e88:	mov	r1, #0
   19e8c:	b	19fa8 <__assert_fail@plt+0x73b8>
   19e90:	ldr	r0, [r9, #16]
   19e94:	and	r0, r0, #61440	; 0xf000
   19e98:	cmp	r0, #40960	; 0xa000
   19e9c:	bne	19ed4 <__assert_fail@plt+0x72e4>
   19ea0:	movw	r4, #20064	; 0x4e60
   19ea4:	movt	r4, #5
   19ea8:	ldr	r1, [r4, #12]
   19eac:	ldr	r0, [r4, #16]
   19eb0:	bl	20e40 <__assert_fail@plt+0xe250>
   19eb4:	cmp	r0, #0
   19eb8:	bne	1a0a0 <__assert_fail@plt+0x74b0>
   19ebc:	bl	12908 <__errno_location@plt>
   19ec0:	ldr	r0, [r0]
   19ec4:	mov	r1, sl
   19ec8:	bl	17f3c <__assert_fail@plt+0x534c>
   19ecc:	mov	r0, #1
   19ed0:	str	r0, [r4, #28]
   19ed4:	ldr	r1, [r8, #8]
   19ed8:	movw	r2, #61759	; 0xf13f
   19edc:	mov	r0, r7
   19ee0:	movt	r2, #3
   19ee4:	bl	1aad0 <__assert_fail@plt+0x7ee0>
   19ee8:	mov	r6, #0
   19eec:	b	1a120 <__assert_fail@plt+0x7530>
   19ef0:	ldr	r4, [r8, #8]
   19ef4:	ldr	r0, [sp, #28]
   19ef8:	b	19fbc <__assert_fail@plt+0x73cc>
   19efc:	ldr	r6, [r8, #8]
   19f00:	mov	r0, r9
   19f04:	mov	r1, sl
   19f08:	bl	1ab4c <__assert_fail@plt+0x7f5c>
   19f0c:	mov	r2, r0
   19f10:	mov	r0, r7
   19f14:	mov	r1, r6
   19f18:	b	1a020 <__assert_fail@plt+0x7430>
   19f1c:	nop	{0}
   19f20:	andeq	r0, r0, r0
   19f24:	addmi	r0, r0, r0
   19f28:	ldr	r0, [r9, #16]
   19f2c:	and	r0, r0, #61440	; 0xf000
   19f30:	cmp	r0, #40960	; 0xa000
   19f34:	bne	1a1c8 <__assert_fail@plt+0x75d8>
   19f38:	movw	r0, #20064	; 0x4e60
   19f3c:	add	r2, sp, #48	; 0x30
   19f40:	mov	r3, #0
   19f44:	movt	r0, #5
   19f48:	ldr	r1, [r0, #12]
   19f4c:	ldr	r0, [r0, #16]
   19f50:	bl	3d22c <__assert_fail@plt+0x2a63c>
   19f54:	cmp	r0, #0
   19f58:	beq	1a270 <__assert_fail@plt+0x7680>
   19f5c:	bl	12908 <__errno_location@plt>
   19f60:	mov	r6, r0
   19f64:	ldr	r0, [r0]
   19f68:	cmp	r0, #20
   19f6c:	cmpne	r0, #2
   19f70:	bne	1a298 <__assert_fail@plt+0x76a8>
   19f74:	ldr	r1, [r8, #8]
   19f78:	movw	r2, #64731	; 0xfcdb
   19f7c:	movt	r2, #3
   19f80:	b	1a190 <__assert_fail@plt+0x75a0>
   19f84:	ldr	r0, [sp, #32]
   19f88:	ldr	r6, [r8, #8]
   19f8c:	mov	r2, #0
   19f90:	mov	r3, #512	; 0x200
   19f94:	ldrd	r0, [r0]
   19f98:	str	r3, [sp]
   19f9c:	stmib	sp, {r2, r3}
   19fa0:	str	r2, [sp, #12]
   19fa4:	add	r2, sp, #152	; 0x98
   19fa8:	mov	r3, #0
   19fac:	bl	22688 <__assert_fail@plt+0xfa98>
   19fb0:	b	19d48 <__assert_fail@plt+0x7158>
   19fb4:	ldr	r4, [r8, #8]
   19fb8:	ldr	r0, [sp, #24]
   19fbc:	ldrd	r0, [r0]
   19fc0:	mov	r3, #1
   19fc4:	mov	r2, #0
   19fc8:	str	r3, [sp]
   19fcc:	b	1a158 <__assert_fail@plt+0x7568>
   19fd0:	ldr	r2, [sp, #28]
   19fd4:	ldr	r0, [sp, #32]
   19fd8:	str	r5, [sp, #20]
   19fdc:	ldr	r6, [r8, #8]
   19fe0:	ldrd	r4, [r2]
   19fe4:	ldrd	r0, [r0]
   19fe8:	orrs	r2, r4, r5
   19fec:	beq	1a1e0 <__assert_fail@plt+0x75f0>
   19ff0:	bl	3ce94 <__assert_fail@plt+0x2a2a4>
   19ff4:	vmov	d9, r0, r1
   19ff8:	mov	r0, r4
   19ffc:	mov	r1, r5
   1a000:	bl	3ce94 <__assert_fail@plt+0x2a2a4>
   1a004:	vmov	d16, r0, r1
   1a008:	vmul.f64	d17, d9, d8
   1a00c:	vdiv.f64	d16, d17, d16
   1a010:	b	1a280 <__assert_fail@plt+0x7690>
   1a014:	ldr	r1, [r8, #8]
   1a018:	mov	r0, r7
   1a01c:	mov	r2, sl
   1a020:	bl	1aad0 <__assert_fail@plt+0x7ee0>
   1a024:	b	19d58 <__assert_fail@plt+0x7168>
   1a028:	ldr	r0, [sp, #40]	; 0x28
   1a02c:	ldr	r4, [r8, #8]
   1a030:	ldrd	r0, [r0]
   1a034:	bl	1a8ec <__assert_fail@plt+0x7cfc>
   1a038:	b	1a1d0 <__assert_fail@plt+0x75e0>
   1a03c:	movw	r0, #20108	; 0x4e8c
   1a040:	movw	r4, #20064	; 0x4e60
   1a044:	add	r2, sp, #48	; 0x30
   1a048:	movt	r0, #5
   1a04c:	movt	r4, #5
   1a050:	ldr	r3, [r0, #64]	; 0x40
   1a054:	ldr	r1, [r4, #12]
   1a058:	ldr	r0, [r4, #16]
   1a05c:	blx	r3
   1a060:	ldr	r1, [r8, #8]
   1a064:	cmn	r0, #1
   1a068:	ble	1a1fc <__assert_fail@plt+0x760c>
   1a06c:	ldr	r2, [sp, #48]	; 0x30
   1a070:	mov	r0, r7
   1a074:	bl	1a360 <__assert_fail@plt+0x7770>
   1a078:	ldr	r0, [sp, #48]	; 0x30
   1a07c:	bl	12b00 <freecon@plt>
   1a080:	b	19d58 <__assert_fail@plt+0x7168>
   1a084:	ldr	r6, [r8, #8]
   1a088:	ldr	r0, [sp, #44]	; 0x2c
   1a08c:	ldrd	r0, [r0]
   1a090:	bl	1a8ec <__assert_fail@plt+0x7cfc>
   1a094:	b	19d48 <__assert_fail@plt+0x7158>
   1a098:	mov	r0, sl
   1a09c:	bl	21388 <__assert_fail@plt+0xe798>
   1a0a0:	mov	r6, r0
   1a0a4:	b	1a110 <__assert_fail@plt+0x7520>
   1a0a8:	mov	r0, sl
   1a0ac:	bl	2aa7c <__assert_fail@plt+0x17e8c>
   1a0b0:	mov	r6, r0
   1a0b4:	bl	128c0 <strlen@plt>
   1a0b8:	add	r0, r6, r0
   1a0bc:	sub	r1, r0, #1
   1a0c0:	mov	r0, r1
   1a0c4:	cmp	r6, r1
   1a0c8:	bhi	1a0dc <__assert_fail@plt+0x74ec>
   1a0cc:	mov	r1, r0
   1a0d0:	ldrb	r2, [r1], #-1
   1a0d4:	cmp	r2, #47	; 0x2f
   1a0d8:	beq	1a0c0 <__assert_fail@plt+0x74d0>
   1a0dc:	cmp	r6, r0
   1a0e0:	bcs	1a0f4 <__assert_fail@plt+0x7504>
   1a0e4:	ldrb	r1, [r0, #1]
   1a0e8:	cmp	r1, #47	; 0x2f
   1a0ec:	moveq	r1, #0
   1a0f0:	strbeq	r1, [r0, #1]
   1a0f4:	mov	r0, r6
   1a0f8:	mov	r1, #47	; 0x2f
   1a0fc:	bl	12a4c <strrchr@plt>
   1a100:	cmp	r0, #0
   1a104:	beq	1a25c <__assert_fail@plt+0x766c>
   1a108:	mov	r1, #0
   1a10c:	strb	r1, [r0]
   1a110:	ldr	r1, [r8, #8]
   1a114:	mov	r0, r7
   1a118:	mov	r2, r6
   1a11c:	bl	1aad0 <__assert_fail@plt+0x7ee0>
   1a120:	mov	r0, r6
   1a124:	bl	2bcbc <__assert_fail@plt+0x190cc>
   1a128:	b	19d58 <__assert_fail@plt+0x7168>
   1a12c:	ldr	r2, [r9, #16]
   1a130:	ldr	r1, [r8, #8]
   1a134:	bfc	r2, #12, #20
   1a138:	b	1a190 <__assert_fail@plt+0x75a0>
   1a13c:	ldr	r0, [sp, #32]
   1a140:	ldr	r4, [r8, #8]
   1a144:	mov	r6, #512	; 0x200
   1a148:	mov	r2, #0
   1a14c:	mov	r3, #1024	; 0x400
   1a150:	ldrd	r0, [r0]
   1a154:	str	r6, [sp]
   1a158:	stmib	sp, {r2, r3}
   1a15c:	str	r2, [sp, #12]
   1a160:	add	r2, sp, #152	; 0x98
   1a164:	b	1a1bc <__assert_fail@plt+0x75cc>
   1a168:	ldr	r0, [r9, #24]
   1a16c:	bl	1250c <getpwuid@plt>
   1a170:	cmp	r0, #0
   1a174:	beq	1a198 <__assert_fail@plt+0x75a8>
   1a178:	ldr	r1, [r8, #8]
   1a17c:	ldr	r2, [r8, #12]
   1a180:	mov	r3, #115	; 0x73
   1a184:	strb	r3, [r1, r2]
   1a188:	ldr	r2, [r0]
   1a18c:	ldr	r1, [r8, #8]
   1a190:	mov	r0, r7
   1a194:	b	19d54 <__assert_fail@plt+0x7164>
   1a198:	ldr	r4, [r8, #8]
   1a19c:	ldr	r0, [r9, #24]
   1a1a0:	mov	r2, #1
   1a1a4:	mov	r1, #0
   1a1a8:	str	r2, [sp]
   1a1ac:	stmib	sp, {r1, r2}
   1a1b0:	str	r1, [sp, #12]
   1a1b4:	add	r2, sp, #152	; 0x98
   1a1b8:	mov	r1, #0
   1a1bc:	mov	r3, #0
   1a1c0:	bl	22688 <__assert_fail@plt+0xfa98>
   1a1c4:	b	1a1d0 <__assert_fail@plt+0x75e0>
   1a1c8:	ldr	r4, [r8, #8]
   1a1cc:	bl	1ab24 <__assert_fail@plt+0x7f34>
   1a1d0:	mov	r2, r0
   1a1d4:	mov	r0, r7
   1a1d8:	mov	r1, r4
   1a1dc:	b	19d54 <__assert_fail@plt+0x7164>
   1a1e0:	orrs	r0, r0, r1
   1a1e4:	beq	1a27c <__assert_fail@plt+0x768c>
   1a1e8:	add	r0, pc, #352	; 0x160
   1a1ec:	cmp	r1, #0
   1a1f0:	addmi	r0, r0, #8
   1a1f4:	vldr	d16, [r0]
   1a1f8:	b	1a280 <__assert_fail@plt+0x7690>
   1a1fc:	movw	r2, #61759	; 0xf13f
   1a200:	mov	r0, r7
   1a204:	movt	r2, #3
   1a208:	bl	1a360 <__assert_fail@plt+0x7770>
   1a20c:	bl	12908 <__errno_location@plt>
   1a210:	ldr	r0, [r0]
   1a214:	movw	r1, #55957	; 0xda95
   1a218:	mov	r2, #5
   1a21c:	movt	r1, #3
   1a220:	str	r0, [sp, #20]
   1a224:	mov	r0, #0
   1a228:	bl	12674 <dcgettext@plt>
   1a22c:	mov	r6, r0
   1a230:	mov	r0, #0
   1a234:	mov	r1, sl
   1a238:	bl	18f7c <__assert_fail@plt+0x638c>
   1a23c:	ldr	r1, [sp, #20]
   1a240:	mov	r3, r0
   1a244:	mov	r0, #0
   1a248:	mov	r2, r6
   1a24c:	bl	127b8 <error@plt>
   1a250:	mov	r0, #1
   1a254:	str	r0, [r4, #28]
   1a258:	b	19d58 <__assert_fail@plt+0x7168>
   1a25c:	ldr	r1, [r8, #8]
   1a260:	movw	r2, #58388	; 0xe414
   1a264:	mov	r0, r7
   1a268:	movt	r2, #3
   1a26c:	b	1a11c <__assert_fail@plt+0x752c>
   1a270:	ldr	r4, [r8, #8]
   1a274:	ldr	r0, [sp, #64]	; 0x40
   1a278:	b	19d84 <__assert_fail@plt+0x7194>
   1a27c:	vmov.f64	d16, #112	; 0x3f800000  1.0
   1a280:	vmov	r2, r3, d16
   1a284:	mov	r0, r7
   1a288:	mov	r1, r6
   1a28c:	bl	1a360 <__assert_fail@plt+0x7770>
   1a290:	ldr	r5, [sp, #20]
   1a294:	b	19d58 <__assert_fail@plt+0x7168>
   1a298:	ldr	r1, [r8, #8]
   1a29c:	cmp	r0, #40	; 0x28
   1a2a0:	bne	1a2b0 <__assert_fail@plt+0x76c0>
   1a2a4:	movw	r2, #62116	; 0xf2a4
   1a2a8:	movt	r2, #3
   1a2ac:	b	1a190 <__assert_fail@plt+0x75a0>
   1a2b0:	movw	r2, #1062	; 0x426
   1a2b4:	mov	r0, r7
   1a2b8:	movt	r2, #4
   1a2bc:	bl	1a360 <__assert_fail@plt+0x7770>
   1a2c0:	ldr	r4, [r6]
   1a2c4:	mov	r0, #0
   1a2c8:	mov	r1, sl
   1a2cc:	bl	18f7c <__assert_fail@plt+0x638c>
   1a2d0:	movw	r2, #13527	; 0x34d7
   1a2d4:	mov	r3, r0
   1a2d8:	mov	r0, #0
   1a2dc:	mov	r1, r4
   1a2e0:	movt	r2, #4
   1a2e4:	bl	127b8 <error@plt>
   1a2e8:	b	19d58 <__assert_fail@plt+0x7168>
   1a2ec:	mov	r0, #1
   1a2f0:	sub	sp, fp, #48	; 0x30
   1a2f4:	vpop	{d8-d9}
   1a2f8:	add	sp, sp, #4
   1a2fc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a300:	movw	r0, #58985	; 0xe669
   1a304:	movw	r1, #63561	; 0xf849
   1a308:	movw	r3, #64065	; 0xfa41
   1a30c:	movw	r2, #1304	; 0x518
   1a310:	movt	r0, #3
   1a314:	movt	r1, #3
   1a318:	movt	r3, #3
   1a31c:	bl	12bf0 <__assert_fail@plt>
   1a320:	movw	r1, #63846	; 0xf966
   1a324:	mov	r0, #0
   1a328:	mov	r2, #5
   1a32c:	movt	r1, #3
   1a330:	bl	12674 <dcgettext@plt>
   1a334:	movw	r3, #64165	; 0xfaa5
   1a338:	mov	r2, r0
   1a33c:	mov	r0, #1
   1a340:	mov	r1, #0
   1a344:	movt	r3, #3
   1a348:	bl	127b8 <error@plt>
   1a34c:	nop	{0}
   1a350:	andeq	r0, r0, r0
   1a354:	svcvc	0x00f00000	; IMB
   1a358:	andeq	r0, r0, r0
   1a35c:			; <UNDEFINED> instruction: 0xfff00000	; IMB
   1a360:	sub	sp, sp, #8
   1a364:	push	{r4, sl, fp, lr}
   1a368:	add	fp, sp, #8
   1a36c:	sub	sp, sp, #8
   1a370:	str	r2, [fp, #8]
   1a374:	add	r2, fp, #8
   1a378:	str	r3, [fp, #12]
   1a37c:	mov	r4, r0
   1a380:	str	r2, [sp, #4]
   1a384:	ldr	r0, [r0, #4]
   1a388:	bl	12a58 <vfprintf@plt>
   1a38c:	cmn	r0, #1
   1a390:	bgt	1a3a4 <__assert_fail@plt+0x77b4>
   1a394:	bl	12908 <__errno_location@plt>
   1a398:	ldr	r0, [r0]
   1a39c:	ldr	r1, [r4, #8]
   1a3a0:	bl	18438 <__assert_fail@plt+0x5848>
   1a3a4:	sub	sp, fp, #8
   1a3a8:	pop	{r4, sl, fp, lr}
   1a3ac:	add	sp, sp, #8
   1a3b0:	bx	lr
   1a3b4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a3b8:	add	fp, sp, #28
   1a3bc:	sub	sp, sp, #148	; 0x94
   1a3c0:	mov	r4, r2
   1a3c4:	mov	r3, r1
   1a3c8:	cmp	r2, #43	; 0x2b
   1a3cc:	str	r1, [fp, #-76]	; 0xffffffb4
   1a3d0:	str	r0, [fp, #-80]	; 0xffffffb0
   1a3d4:	bne	1a3f8 <__assert_fail@plt+0x7808>
   1a3d8:	movw	r0, #64816	; 0xfd30
   1a3dc:	movt	r0, #3
   1a3e0:	vldr	d16, [r0]
   1a3e4:	movw	r0, #9515	; 0x252b
   1a3e8:	movt	r0, #84	; 0x54
   1a3ec:	str	r0, [sp, #56]	; 0x38
   1a3f0:	vstr	d16, [sp, #48]	; 0x30
   1a3f4:	b	1a42c <__assert_fail@plt+0x783c>
   1a3f8:	mov	r5, #0
   1a3fc:	mov	r0, #37	; 0x25
   1a400:	strb	r5, [sp, #50]	; 0x32
   1a404:	strb	r4, [sp, #49]	; 0x31
   1a408:	strb	r0, [sp, #48]	; 0x30
   1a40c:	sub	r0, r4, #64	; 0x40
   1a410:	cmp	r0, #24
   1a414:	bhi	1a60c <__assert_fail@plt+0x7a1c>
   1a418:	movw	r2, #1
   1a41c:	mov	r1, #1
   1a420:	movt	r2, #280	; 0x118
   1a424:	tst	r2, r1, lsl r0
   1a428:	beq	1a60c <__assert_fail@plt+0x7a1c>
   1a42c:	movw	r2, #64172	; 0xfaac
   1a430:	add	r0, sp, #64	; 0x40
   1a434:	mov	r1, #32
   1a438:	movt	r2, #3
   1a43c:	bl	12920 <snprintf@plt>
   1a440:	cmp	r0, #32
   1a444:	bge	1a618 <__assert_fail@plt+0x7a28>
   1a448:	mov	r8, r0
   1a44c:	mov	r5, #1
   1a450:	cmp	r4, #64	; 0x40
   1a454:	beq	1a51c <__assert_fail@plt+0x792c>
   1a458:	sub	r0, fp, #80	; 0x50
   1a45c:	bl	12848 <localtime@plt>
   1a460:	cmp	r0, #0
   1a464:	beq	1a51c <__assert_fail@plt+0x792c>
   1a468:	add	r6, sp, #48	; 0x30
   1a46c:	mov	r4, r0
   1a470:	mov	r0, r6
   1a474:	bl	128c0 <strlen@plt>
   1a478:	mov	r7, r0
   1a47c:	add	r0, r0, #2
   1a480:	bl	2a688 <__assert_fail@plt+0x17a98>
   1a484:	mov	r1, #95	; 0x5f
   1a488:	mov	r9, r0
   1a48c:	add	r2, r7, #1
   1a490:	strb	r1, [r0], #1
   1a494:	mov	r1, r6
   1a498:	bl	125f0 <memcpy@plt>
   1a49c:	mov	r1, r4
   1a4a0:	sub	ip, fp, #72	; 0x48
   1a4a4:	ldm	r1!, {r2, r3, r5, r6, r7}
   1a4a8:	stmia	ip!, {r2, r3, r5, r6, r7}
   1a4ac:	ldm	r1, {r0, r2, r3, r5, r6, r7}
   1a4b0:	mov	r1, #11
   1a4b4:	stm	ip, {r0, r2, r3, r5, r6, r7}
   1a4b8:	movw	r5, #18640	; 0x48d0
   1a4bc:	movw	r7, #18644	; 0x48d4
   1a4c0:	ldr	r0, [fp, #-72]	; 0xffffffb8
   1a4c4:	movt	r5, #5
   1a4c8:	movt	r7, #5
   1a4cc:	cmp	r0, #10
   1a4d0:	mvngt	r1, #10
   1a4d4:	add	r0, r1, r0
   1a4d8:	str	r0, [fp, #-72]	; 0xffffffb8
   1a4dc:	ldr	r0, [r5]
   1a4e0:	cmp	r0, #0
   1a4e4:	bne	1a4fc <__assert_fail@plt+0x790c>
   1a4e8:	mov	r0, #1
   1a4ec:	str	r0, [r7]
   1a4f0:	mov	r0, #1
   1a4f4:	bl	2a688 <__assert_fail@plt+0x17a98>
   1a4f8:	str	r0, [r5]
   1a4fc:	ldr	r1, [r7]
   1a500:	mov	r2, r9
   1a504:	mov	r3, r4
   1a508:	bl	12830 <strftime@plt>
   1a50c:	cmp	r0, #0
   1a510:	beq	1a6a0 <__assert_fail@plt+0x7ab0>
   1a514:	ldr	r1, [r7]
   1a518:	b	1a698 <__assert_fail@plt+0x7aa8>
   1a51c:	ldr	r2, [fp, #-80]	; 0xffffffb0
   1a520:	movw	r6, #17848	; 0x45b8
   1a524:	mov	r0, #1
   1a528:	mov	r1, #0
   1a52c:	stm	sp, {r0, r1}
   1a530:	str	r0, [sp, #8]
   1a534:	movt	r6, #5
   1a538:	str	r1, [sp, #12]
   1a53c:	rsbs	r0, r2, #0
   1a540:	asr	r3, r2, #31
   1a544:	sbc	r1, r1, r2, asr #31
   1a548:	cmp	r3, #0
   1a54c:	movpl	r0, r2
   1a550:	movpl	r1, r3
   1a554:	add	r2, r6, #1
   1a558:	mov	r3, #0
   1a55c:	bl	22688 <__assert_fail@plt+0xfa98>
   1a560:	cmp	r0, r6
   1a564:	bls	1a630 <__assert_fail@plt+0x7a40>
   1a568:	mov	r4, r0
   1a56c:	movw	r0, #791	; 0x317
   1a570:	add	r0, r6, r0
   1a574:	cmp	r4, r0
   1a578:	bcs	1a648 <__assert_fail@plt+0x7a58>
   1a57c:	ldr	r0, [fp, #-80]	; 0xffffffb0
   1a580:	cmn	r0, #1
   1a584:	movle	r0, #45	; 0x2d
   1a588:	strble	r0, [r4, #-1]!
   1a58c:	cmp	r5, #0
   1a590:	beq	1a810 <__assert_fail@plt+0x7c20>
   1a594:	mov	r0, r4
   1a598:	sub	r5, r4, r6
   1a59c:	bl	128c0 <strlen@plt>
   1a5a0:	add	r0, r0, r5
   1a5a4:	movw	r1, #791	; 0x317
   1a5a8:	cmp	r0, r1
   1a5ac:	bcs	1a660 <__assert_fail@plt+0x7a70>
   1a5b0:	movw	r1, #790	; 0x316
   1a5b4:	add	r5, sp, #64	; 0x40
   1a5b8:	sub	r6, r1, r0
   1a5bc:	mov	r0, r5
   1a5c0:	bl	128c0 <strlen@plt>
   1a5c4:	cmp	r0, r6
   1a5c8:	bcc	1a5ec <__assert_fail@plt+0x79fc>
   1a5cc:	movw	r2, #64297	; 0xfb29
   1a5d0:	mov	r0, #0
   1a5d4:	mov	r1, #0
   1a5d8:	mov	r3, r8
   1a5dc:	str	r6, [sp]
   1a5e0:	str	r5, [sp, #4]
   1a5e4:	movt	r2, #3
   1a5e8:	bl	127b8 <error@plt>
   1a5ec:	add	r0, sp, #64	; 0x40
   1a5f0:	bl	128c0 <strlen@plt>
   1a5f4:	cmp	r0, r6
   1a5f8:	bcs	1a678 <__assert_fail@plt+0x7a88>
   1a5fc:	add	r1, sp, #64	; 0x40
   1a600:	mov	r0, r4
   1a604:	bl	12734 <strcat@plt>
   1a608:	b	1a810 <__assert_fail@plt+0x7c20>
   1a60c:	mov	r8, #0
   1a610:	strb	r5, [sp, #64]	; 0x40
   1a614:	b	1a450 <__assert_fail@plt+0x7860>
   1a618:	movw	r0, #64180	; 0xfab4
   1a61c:	movw	r1, #63561	; 0xf849
   1a620:	movw	r3, #64206	; 0xface
   1a624:	movw	r2, #665	; 0x299
   1a628:	movt	r0, #3
   1a62c:	b	1a68c <__assert_fail@plt+0x7a9c>
   1a630:	movw	r0, #64246	; 0xfaf6
   1a634:	movw	r1, #63561	; 0xf849
   1a638:	movw	r3, #64206	; 0xface
   1a63c:	movw	r2, #697	; 0x2b9
   1a640:	movt	r0, #3
   1a644:	b	1a68c <__assert_fail@plt+0x7a9c>
   1a648:	movw	r0, #64254	; 0xfafe
   1a64c:	movw	r1, #63561	; 0xf849
   1a650:	movw	r3, #64206	; 0xface
   1a654:	movw	r2, #698	; 0x2ba
   1a658:	movt	r0, #3
   1a65c:	b	1a68c <__assert_fail@plt+0x7a9c>
   1a660:	movw	r0, #64279	; 0xfb17
   1a664:	movw	r1, #63561	; 0xf849
   1a668:	movw	r3, #64206	; 0xface
   1a66c:	movw	r2, #711	; 0x2c7
   1a670:	movt	r0, #3
   1a674:	b	1a68c <__assert_fail@plt+0x7a9c>
   1a678:	movw	r0, #64343	; 0xfb57
   1a67c:	movw	r1, #63561	; 0xf849
   1a680:	movw	r3, #64206	; 0xface
   1a684:	mov	r2, #720	; 0x2d0
   1a688:	movt	r0, #3
   1a68c:	movt	r1, #3
   1a690:	movt	r3, #3
   1a694:	bl	12bf0 <__assert_fail@plt>
   1a698:	cmp	r0, r1
   1a69c:	bcc	1a6d4 <__assert_fail@plt+0x7ae4>
   1a6a0:	ldr	r0, [r5]
   1a6a4:	mov	r1, r7
   1a6a8:	mov	r2, #1
   1a6ac:	bl	2a794 <__assert_fail@plt+0x17ba4>
   1a6b0:	ldr	r1, [r7]
   1a6b4:	mov	r2, r9
   1a6b8:	mov	r3, r4
   1a6bc:	str	r0, [r5]
   1a6c0:	bl	12830 <strftime@plt>
   1a6c4:	ldr	r1, [r7]
   1a6c8:	cmp	r0, #0
   1a6cc:	bne	1a698 <__assert_fail@plt+0x7aa8>
   1a6d0:	b	1a6a0 <__assert_fail@plt+0x7ab0>
   1a6d4:	str	r0, [sp, #20]
   1a6d8:	add	r0, r8, r0
   1a6dc:	str	r8, [sp, #28]
   1a6e0:	add	r4, r0, #1
   1a6e4:	ldr	r0, [r5]
   1a6e8:	mov	r1, r4
   1a6ec:	bl	2a6d0 <__assert_fail@plt+0x17ae0>
   1a6f0:	str	r0, [r5]
   1a6f4:	mov	r0, r4
   1a6f8:	str	r4, [r7]
   1a6fc:	str	r4, [sp, #24]
   1a700:	bl	2a688 <__assert_fail@plt+0x17a98>
   1a704:	ldr	r1, [r7]
   1a708:	sub	r3, fp, #72	; 0x48
   1a70c:	mov	r2, r9
   1a710:	str	r0, [sp, #40]	; 0x28
   1a714:	str	r9, [sp, #36]	; 0x24
   1a718:	bl	12830 <strftime@plt>
   1a71c:	ldr	r0, [r5]
   1a720:	ldrb	r1, [r0]
   1a724:	str	r0, [sp, #32]
   1a728:	cmp	r1, #0
   1a72c:	beq	1a7f0 <__assert_fail@plt+0x7c00>
   1a730:	ldr	r2, [sp, #40]	; 0x28
   1a734:	ldr	r3, [sp, #32]
   1a738:	mov	sl, #0
   1a73c:	mov	r7, #0
   1a740:	mov	r6, #0
   1a744:	ldrb	r0, [r2]
   1a748:	add	r8, r2, #1
   1a74c:	add	r5, r3, #1
   1a750:	mov	r3, #0
   1a754:	str	r3, [sp, #44]	; 0x2c
   1a758:	clz	r2, r0
   1a75c:	lsr	r2, r2, #5
   1a760:	tst	r2, #1
   1a764:	bne	1a7f0 <__assert_fail@plt+0x7c00>
   1a768:	uxtb	r4, r1
   1a76c:	uxtb	r9, r0
   1a770:	cmp	r4, r9
   1a774:	beq	1a7c8 <__assert_fail@plt+0x7bd8>
   1a778:	bl	1286c <__ctype_b_loc@plt>
   1a77c:	ldr	r0, [r0]
   1a780:	add	r1, r0, r4, lsl #1
   1a784:	ldrb	r1, [r1, #1]
   1a788:	tst	r1, #8
   1a78c:	addne	r0, r0, r9, lsl #1
   1a790:	ldrbne	r0, [r0, #1]
   1a794:	tstne	r0, #8
   1a798:	beq	1a7f0 <__assert_fail@plt+0x7c00>
   1a79c:	tst	r6, #1
   1a7a0:	beq	1a7bc <__assert_fail@plt+0x7bcc>
   1a7a4:	ldr	r0, [sp, #44]	; 0x2c
   1a7a8:	sub	r0, r7, r0
   1a7ac:	cmp	r0, sl
   1a7b0:	bne	1a7f0 <__assert_fail@plt+0x7c00>
   1a7b4:	add	sl, sl, #1
   1a7b8:	b	1a7c4 <__assert_fail@plt+0x7bd4>
   1a7bc:	str	r7, [sp, #44]	; 0x2c
   1a7c0:	mov	sl, #1
   1a7c4:	mov	r6, #1
   1a7c8:	ldrb	r0, [r8, r7]
   1a7cc:	ldrb	r1, [r5, r7]
   1a7d0:	add	r7, r7, #1
   1a7d4:	clz	r2, r0
   1a7d8:	cmp	r1, #0
   1a7dc:	lsr	r2, r2, #5
   1a7e0:	bne	1a760 <__assert_fail@plt+0x7b70>
   1a7e4:	cmp	sl, #2
   1a7e8:	cmpeq	r0, #0
   1a7ec:	beq	1a81c <__assert_fail@plt+0x7c2c>
   1a7f0:	ldr	r0, [sp, #36]	; 0x24
   1a7f4:	bl	2bcbc <__assert_fail@plt+0x190cc>
   1a7f8:	ldr	r0, [sp, #40]	; 0x28
   1a7fc:	bl	2bcbc <__assert_fail@plt+0x190cc>
   1a800:	movw	r0, #18640	; 0x48d0
   1a804:	movt	r0, #5
   1a808:	ldr	r0, [r0]
   1a80c:	add	r4, r0, #1
   1a810:	mov	r0, r4
   1a814:	sub	sp, fp, #28
   1a818:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a81c:	ldr	r0, [sp, #44]	; 0x2c
   1a820:	add	r4, r0, #2
   1a824:	bl	1286c <__ctype_b_loc@plt>
   1a828:	ldr	r1, [sp, #32]
   1a82c:	ldr	r0, [r0]
   1a830:	ldrb	r2, [r1, r4]!
   1a834:	add	r0, r0, r2, lsl #1
   1a838:	ldrb	r0, [r0, #1]
   1a83c:	tst	r0, #8
   1a840:	bne	1a7f0 <__assert_fail@plt+0x7c00>
   1a844:	ldr	r2, [sp, #20]
   1a848:	ldr	r7, [sp, #28]
   1a84c:	ldr	r3, [sp, #24]
   1a850:	sub	r2, r2, r4
   1a854:	add	r0, r4, r7
   1a858:	add	r2, r2, #1
   1a85c:	add	r0, r0, r2
   1a860:	cmp	r0, r3
   1a864:	bne	1a890 <__assert_fail@plt+0x7ca0>
   1a868:	add	r0, r1, r7
   1a86c:	bl	12584 <memmove@plt>
   1a870:	ldr	r0, [sp, #32]
   1a874:	ldr	r1, [sp, #44]	; 0x2c
   1a878:	mov	r2, r7
   1a87c:	add	r0, r0, r1
   1a880:	add	r1, sp, #64	; 0x40
   1a884:	add	r0, r0, #2
   1a888:	bl	125f0 <memcpy@plt>
   1a88c:	b	1a7f0 <__assert_fail@plt+0x7c00>
   1a890:	movw	r0, #64371	; 0xfb73
   1a894:	movw	r1, #63561	; 0xf849
   1a898:	movw	r3, #64422	; 0xfba6
   1a89c:	movw	r2, #549	; 0x225
   1a8a0:	movt	r0, #3
   1a8a4:	movt	r1, #3
   1a8a8:	movt	r3, #3
   1a8ac:	bl	12bf0 <__assert_fail@plt>
   1a8b0:	push	{r4, r5, fp, lr}
   1a8b4:	add	fp, sp, #8
   1a8b8:	ldr	r3, [r2, #4]
   1a8bc:	mov	r5, r1
   1a8c0:	mov	r4, r2
   1a8c4:	mov	r1, #1
   1a8c8:	mov	r2, r5
   1a8cc:	bl	12728 <fwrite@plt>
   1a8d0:	cmp	r0, r5
   1a8d4:	popcs	{r4, r5, fp, pc}
   1a8d8:	bl	12908 <__errno_location@plt>
   1a8dc:	ldr	r0, [r0]
   1a8e0:	ldr	r1, [r4, #8]
   1a8e4:	pop	{r4, r5, fp, lr}
   1a8e8:	b	18438 <__assert_fail@plt+0x5848>
   1a8ec:	push	{r4, r5, fp, lr}
   1a8f0:	add	fp, sp, #8
   1a8f4:	sub	sp, sp, #40	; 0x28
   1a8f8:	str	r1, [fp, #-12]
   1a8fc:	str	r0, [fp, #-16]
   1a900:	sub	r0, fp, #16
   1a904:	bl	12848 <localtime@plt>
   1a908:	cmp	r0, #0
   1a90c:	beq	1a9e8 <__assert_fail@plt+0x7df8>
   1a910:	ldr	ip, [r0, #24]
   1a914:	cmn	ip, #1
   1a918:	ble	1aa08 <__assert_fail@plt+0x7e18>
   1a91c:	cmp	ip, #7
   1a920:	bge	1aa20 <__assert_fail@plt+0x7e30>
   1a924:	ldr	r2, [r0, #16]
   1a928:	cmn	r2, #1
   1a92c:	ble	1aa38 <__assert_fail@plt+0x7e48>
   1a930:	cmp	r2, #12
   1a934:	bge	1aa50 <__assert_fail@plt+0x7e60>
   1a938:	ldr	r3, [r0, #8]
   1a93c:	cmn	r3, #1
   1a940:	ble	1aa68 <__assert_fail@plt+0x7e78>
   1a944:	cmp	r3, #24
   1a948:	bge	1aa80 <__assert_fail@plt+0x7e90>
   1a94c:	ldr	r4, [r0, #4]
   1a950:	cmp	r4, #60	; 0x3c
   1a954:	bge	1aa98 <__assert_fail@plt+0x7ea8>
   1a958:	ldr	r1, [r0]
   1a95c:	cmp	r1, #62	; 0x3e
   1a960:	bge	1aab0 <__assert_fail@plt+0x7ec0>
   1a964:	ldr	lr, [r0, #12]
   1a968:	ldr	r0, [r0, #20]
   1a96c:	str	r1, [sp, #16]
   1a970:	movw	r1, #64860	; 0xfd5c
   1a974:	ldr	r5, [fp, #-12]
   1a978:	str	r4, [sp, #12]
   1a97c:	movw	r4, #18648	; 0x48d8
   1a980:	str	r3, [sp, #8]
   1a984:	movt	r1, #3
   1a988:	movt	r4, #5
   1a98c:	ldr	r1, [r1, r2, lsl #2]
   1a990:	movw	r2, #64674	; 0xfca2
   1a994:	movt	r2, #3
   1a998:	str	r5, [sp, #20]
   1a99c:	str	lr, [sp, #4]
   1a9a0:	str	r1, [sp]
   1a9a4:	movw	r1, #1900	; 0x76c
   1a9a8:	add	r0, r0, r1
   1a9ac:	mov	r1, #1024	; 0x400
   1a9b0:	str	r0, [sp, #24]
   1a9b4:	movw	r0, #64832	; 0xfd40
   1a9b8:	movt	r0, #3
   1a9bc:	ldr	r3, [r0, ip, lsl #2]
   1a9c0:	mov	r0, r4
   1a9c4:	bl	12920 <snprintf@plt>
   1a9c8:	cmp	r0, #1024	; 0x400
   1a9cc:	blt	1a9fc <__assert_fail@plt+0x7e0c>
   1a9d0:	movw	r0, #64713	; 0xfcc9
   1a9d4:	movw	r1, #63561	; 0xf849
   1a9d8:	movw	r3, #64516	; 0xfc04
   1a9dc:	movw	r2, #770	; 0x302
   1a9e0:	movt	r0, #3
   1a9e4:	b	1aac4 <__assert_fail@plt+0x7ed4>
   1a9e8:	ldr	r0, [fp, #-16]
   1a9ec:	ldr	r1, [fp, #-12]
   1a9f0:	mov	r2, #64	; 0x40
   1a9f4:	bl	1a3b4 <__assert_fail@plt+0x77c4>
   1a9f8:	mov	r4, r0
   1a9fc:	mov	r0, r4
   1aa00:	sub	sp, fp, #8
   1aa04:	pop	{r4, r5, fp, pc}
   1aa08:	movw	r0, #64498	; 0xfbf2
   1aa0c:	movw	r1, #63561	; 0xf849
   1aa10:	movw	r3, #64516	; 0xfc04
   1aa14:	movw	r2, #749	; 0x2ed
   1aa18:	movt	r0, #3
   1aa1c:	b	1aac4 <__assert_fail@plt+0x7ed4>
   1aa20:	movw	r0, #64552	; 0xfc28
   1aa24:	movw	r1, #63561	; 0xf849
   1aa28:	movw	r3, #64516	; 0xfc04
   1aa2c:	movw	r2, #750	; 0x2ee
   1aa30:	movt	r0, #3
   1aa34:	b	1aac4 <__assert_fail@plt+0x7ed4>
   1aa38:	movw	r0, #64569	; 0xfc39
   1aa3c:	movw	r1, #63561	; 0xf849
   1aa40:	movw	r3, #64516	; 0xfc04
   1aa44:	movw	r2, #751	; 0x2ef
   1aa48:	movt	r0, #3
   1aa4c:	b	1aac4 <__assert_fail@plt+0x7ed4>
   1aa50:	movw	r0, #64586	; 0xfc4a
   1aa54:	movw	r1, #63561	; 0xf849
   1aa58:	movw	r3, #64516	; 0xfc04
   1aa5c:	mov	r2, #752	; 0x2f0
   1aa60:	movt	r0, #3
   1aa64:	b	1aac4 <__assert_fail@plt+0x7ed4>
   1aa68:	movw	r0, #64603	; 0xfc5b
   1aa6c:	movw	r1, #63561	; 0xf849
   1aa70:	movw	r3, #64516	; 0xfc04
   1aa74:	movw	r2, #753	; 0x2f1
   1aa78:	movt	r0, #3
   1aa7c:	b	1aac4 <__assert_fail@plt+0x7ed4>
   1aa80:	movw	r0, #64621	; 0xfc6d
   1aa84:	movw	r1, #63561	; 0xf849
   1aa88:	movw	r3, #64516	; 0xfc04
   1aa8c:	movw	r2, #754	; 0x2f2
   1aa90:	movt	r0, #3
   1aa94:	b	1aac4 <__assert_fail@plt+0x7ed4>
   1aa98:	movw	r0, #64639	; 0xfc7f
   1aa9c:	movw	r1, #63561	; 0xf849
   1aaa0:	movw	r3, #64516	; 0xfc04
   1aaa4:	movw	r2, #755	; 0x2f3
   1aaa8:	movt	r0, #3
   1aaac:	b	1aac4 <__assert_fail@plt+0x7ed4>
   1aab0:	movw	r0, #64656	; 0xfc90
   1aab4:	movw	r1, #63561	; 0xf849
   1aab8:	movw	r3, #64516	; 0xfc04
   1aabc:	mov	r2, #756	; 0x2f4
   1aac0:	movt	r0, #3
   1aac4:	movt	r1, #3
   1aac8:	movt	r3, #3
   1aacc:	bl	12bf0 <__assert_fail@plt>
   1aad0:	push	{r4, sl, fp, lr}
   1aad4:	add	fp, sp, #8
   1aad8:	sub	sp, sp, #8
   1aadc:	ldrb	r3, [r0, #12]
   1aae0:	mov	ip, r1
   1aae4:	mov	r4, r0
   1aae8:	ldr	r1, [r0, #16]
   1aaec:	ldr	r0, [r0, #4]
   1aaf0:	str	r2, [sp]
   1aaf4:	mov	r2, r3
   1aaf8:	mov	r3, ip
   1aafc:	bl	206a4 <__assert_fail@plt+0xdab4>
   1ab00:	cmn	r0, #1
   1ab04:	subgt	sp, fp, #8
   1ab08:	popgt	{r4, sl, fp, pc}
   1ab0c:	bl	12908 <__errno_location@plt>
   1ab10:	ldr	r0, [r0]
   1ab14:	ldr	r1, [r4, #8]
   1ab18:	sub	sp, fp, #8
   1ab1c:	pop	{r4, sl, fp, lr}
   1ab20:	b	18438 <__assert_fail@plt+0x5848>
   1ab24:	sub	r0, r0, #4096	; 0x1000
   1ab28:	ror	r0, r0, #12
   1ab2c:	cmp	r0, #11
   1ab30:	movwhi	r0, #64809	; 0xfd29
   1ab34:	movthi	r0, #3
   1ab38:	bxhi	lr
   1ab3c:	movw	r1, #64908	; 0xfd8c
   1ab40:	movt	r1, #3
   1ab44:	ldr	r0, [r1, r0, lsl #2]
   1ab48:	bx	lr
   1ab4c:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1ab50:	add	fp, sp, #24
   1ab54:	movw	r8, #19676	; 0x4cdc
   1ab58:	mov	r4, r0
   1ab5c:	movw	r5, #19680	; 0x4ce0
   1ab60:	movw	r9, #19672	; 0x4cd8
   1ab64:	movt	r8, #5
   1ab68:	movt	r5, #5
   1ab6c:	movt	r9, #5
   1ab70:	ldr	r0, [r8]
   1ab74:	cmp	r0, #0
   1ab78:	beq	1aba4 <__assert_fail@plt+0x7fb4>
   1ab7c:	ldrb	r1, [r9]
   1ab80:	cmp	r1, #1
   1ab84:	bne	1aba0 <__assert_fail@plt+0x7fb0>
   1ab88:	ldrd	r2, [r5]
   1ab8c:	ldrd	r6, [r4]
   1ab90:	eor	r1, r7, r3
   1ab94:	eor	r2, r6, r2
   1ab98:	orrs	r1, r2, r1
   1ab9c:	beq	1ac54 <__assert_fail@plt+0x8064>
   1aba0:	bl	2bcbc <__assert_fail@plt+0x190cc>
   1aba4:	ldrd	r0, [r4]
   1aba8:	strd	r0, [r5]
   1abac:	mov	r0, #1
   1abb0:	bl	1ad0c <__assert_fail@plt+0x811c>
   1abb4:	cmp	r0, #0
   1abb8:	beq	1ac58 <__assert_fail@plt+0x8068>
   1abbc:	movw	r6, #64997	; 0xfde5
   1abc0:	mov	r5, r0
   1abc4:	mov	r7, #0
   1abc8:	movt	r6, #3
   1abcc:	ldr	r0, [r5, #12]
   1abd0:	mov	r1, r6
   1abd4:	bl	124f4 <strcmp@plt>
   1abd8:	cmp	r0, #0
   1abdc:	beq	1ac08 <__assert_fail@plt+0x8018>
   1abe0:	mov	r0, r5
   1abe4:	bl	1ae78 <__assert_fail@plt+0x8288>
   1abe8:	cmp	r0, #0
   1abec:	bne	1ac08 <__assert_fail@plt+0x8018>
   1abf0:	ldrd	r0, [r4]
   1abf4:	ldrd	r2, [r5, #16]
   1abf8:	eor	r1, r3, r1
   1abfc:	eor	r0, r2, r0
   1ac00:	orrs	r0, r0, r1
   1ac04:	moveq	r7, r5
   1ac08:	ldr	r5, [r5, #28]
   1ac0c:	cmp	r5, #0
   1ac10:	bne	1abcc <__assert_fail@plt+0x7fdc>
   1ac14:	cmp	r7, #0
   1ac18:	beq	1ac30 <__assert_fail@plt+0x8040>
   1ac1c:	ldr	r0, [r7, #12]
   1ac20:	bl	2aa7c <__assert_fail@plt+0x17e8c>
   1ac24:	mov	r1, #1
   1ac28:	strb	r1, [r9]
   1ac2c:	b	1ac50 <__assert_fail@plt+0x8060>
   1ac30:	movw	r1, #59740	; 0xe95c
   1ac34:	mov	r0, #0
   1ac38:	mov	r2, #5
   1ac3c:	movt	r1, #3
   1ac40:	strb	r0, [r9]
   1ac44:	mov	r0, #0
   1ac48:	bl	12674 <dcgettext@plt>
   1ac4c:	bl	2aa7c <__assert_fail@plt+0x17e8c>
   1ac50:	str	r0, [r8]
   1ac54:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1ac58:	movw	r1, #64960	; 0xfdc0
   1ac5c:	mov	r0, #0
   1ac60:	mov	r2, #5
   1ac64:	movt	r1, #3
   1ac68:	bl	12674 <dcgettext@plt>
   1ac6c:	mov	r2, r0
   1ac70:	mov	r0, #1
   1ac74:	mov	r1, #0
   1ac78:	bl	127b8 <error@plt>
   1ac7c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1ac80:	add	fp, sp, #24
   1ac84:	mov	r5, r0
   1ac88:	movw	r0, #64956	; 0xfdbc
   1ac8c:	movt	r0, #3
   1ac90:	mov	r1, r5
   1ac94:	bl	124f4 <strcmp@plt>
   1ac98:	mov	r4, #1
   1ac9c:	cmp	r0, #0
   1aca0:	beq	1ad04 <__assert_fail@plt+0x8114>
   1aca4:	movw	r7, #19688	; 0x4ce8
   1aca8:	movt	r7, #5
   1acac:	ldr	r6, [r7]
   1acb0:	cmp	r6, #0
   1acb4:	bne	1ace0 <__assert_fail@plt+0x80f0>
   1acb8:	mov	r0, #0
   1acbc:	mov	r8, #0
   1acc0:	bl	2df20 <__assert_fail@plt+0x1b330>
   1acc4:	mov	r6, r0
   1acc8:	str	r0, [r7]
   1accc:	movw	r0, #19692	; 0x4cec
   1acd0:	movt	r0, #5
   1acd4:	cmp	r6, #0
   1acd8:	strb	r8, [r0]
   1acdc:	beq	1ad04 <__assert_fail@plt+0x8114>
   1ace0:	ldr	r1, [r6, #12]
   1ace4:	mov	r0, r5
   1ace8:	bl	124f4 <strcmp@plt>
   1acec:	cmp	r0, #0
   1acf0:	beq	1ad04 <__assert_fail@plt+0x8114>
   1acf4:	ldr	r6, [r6, #28]
   1acf8:	cmp	r6, #0
   1acfc:	bne	1ace0 <__assert_fail@plt+0x80f0>
   1ad00:	mov	r4, #0
   1ad04:	mov	r0, r4
   1ad08:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1ad0c:	push	{r4, r5, r6, r7, fp, lr}
   1ad10:	add	fp, sp, #16
   1ad14:	movw	r6, #19688	; 0x4ce8
   1ad18:	mov	r4, r0
   1ad1c:	movw	r5, #19692	; 0x4cec
   1ad20:	movt	r6, #5
   1ad24:	movt	r5, #5
   1ad28:	ldr	r0, [r6]
   1ad2c:	cmp	r0, #0
   1ad30:	beq	1ad68 <__assert_fail@plt+0x8178>
   1ad34:	ldrb	r1, [r5]
   1ad38:	cmp	r1, #0
   1ad3c:	bne	1ad68 <__assert_fail@plt+0x8178>
   1ad40:	cmp	r4, #0
   1ad44:	beq	1ad68 <__assert_fail@plt+0x8178>
   1ad48:	ldr	r7, [r0, #28]
   1ad4c:	bl	2e940 <__assert_fail@plt+0x1bd50>
   1ad50:	cmp	r7, #0
   1ad54:	mov	r0, r7
   1ad58:	bne	1ad48 <__assert_fail@plt+0x8158>
   1ad5c:	mov	r0, #0
   1ad60:	str	r0, [r6]
   1ad64:	b	1ad70 <__assert_fail@plt+0x8180>
   1ad68:	cmp	r0, #0
   1ad6c:	popne	{r4, r5, r6, r7, fp, pc}
   1ad70:	mov	r0, r4
   1ad74:	bl	2df20 <__assert_fail@plt+0x1b330>
   1ad78:	str	r0, [r6]
   1ad7c:	strb	r4, [r5]
   1ad80:	pop	{r4, r5, r6, r7, fp, pc}
   1ad84:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ad88:	add	fp, sp, #28
   1ad8c:	sub	sp, sp, #12
   1ad90:	mov	r4, r0
   1ad94:	mov	r6, #0
   1ad98:	mov	r0, #0
   1ad9c:	str	r6, [sp, #8]
   1ada0:	bl	2df20 <__assert_fail@plt+0x1b330>
   1ada4:	cmp	r0, #0
   1ada8:	beq	1ae6c <__assert_fail@plt+0x827c>
   1adac:	str	r4, [sp, #4]
   1adb0:	mov	r5, r0
   1adb4:	mov	r8, #0
   1adb8:	add	r9, sp, #8
   1adbc:	mov	r4, #0
   1adc0:	mov	r7, r0
   1adc4:	add	sl, r8, #1
   1adc8:	mov	r0, r4
   1adcc:	mov	r2, r9
   1add0:	mov	r6, r4
   1add4:	lsl	r1, sl, #3
   1add8:	bl	1f6a4 <__assert_fail@plt+0xcab4>
   1addc:	mov	r4, r0
   1ade0:	cmp	r0, #0
   1ade4:	beq	1ae00 <__assert_fail@plt+0x8210>
   1ade8:	mov	r0, r7
   1adec:	bl	1ae78 <__assert_fail@plt+0x8288>
   1adf0:	cmp	r0, #0
   1adf4:	beq	1ae10 <__assert_fail@plt+0x8220>
   1adf8:	mov	r6, r4
   1adfc:	b	1ae28 <__assert_fail@plt+0x8238>
   1ae00:	mov	r0, r6
   1ae04:	bl	2bcbc <__assert_fail@plt+0x190cc>
   1ae08:	mov	r6, #0
   1ae0c:	b	1ae28 <__assert_fail@plt+0x8238>
   1ae10:	ldrd	r0, [r7, #16]
   1ae14:	mov	r2, r4
   1ae18:	mov	r6, r4
   1ae1c:	str	r0, [r2, r8, lsl #3]!
   1ae20:	mov	r8, sl
   1ae24:	str	r1, [r2, #4]
   1ae28:	ldr	r7, [r7, #28]
   1ae2c:	cmp	r7, #0
   1ae30:	bne	1adc4 <__assert_fail@plt+0x81d4>
   1ae34:	cmp	r5, #0
   1ae38:	beq	1ae54 <__assert_fail@plt+0x8264>
   1ae3c:	ldr	r4, [r5, #28]
   1ae40:	mov	r0, r5
   1ae44:	bl	2e940 <__assert_fail@plt+0x1bd50>
   1ae48:	cmp	r4, #0
   1ae4c:	mov	r5, r4
   1ae50:	bne	1ae3c <__assert_fail@plt+0x824c>
   1ae54:	cmp	r6, #0
   1ae58:	beq	1ae68 <__assert_fail@plt+0x8278>
   1ae5c:	ldr	r0, [sp, #4]
   1ae60:	str	r8, [r0]
   1ae64:	b	1ae6c <__assert_fail@plt+0x827c>
   1ae68:	mov	r6, #0
   1ae6c:	mov	r0, r6
   1ae70:	sub	sp, fp, #28
   1ae74:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ae78:	push	{r4, r5, r6, sl, fp, lr}
   1ae7c:	add	fp, sp, #16
   1ae80:	sub	sp, sp, #104	; 0x68
   1ae84:	mov	r6, r0
   1ae88:	mov	r4, r0
   1ae8c:	ldr	r0, [r6, #16]!
   1ae90:	ldr	r1, [r6, #4]
   1ae94:	and	r1, r0, r1
   1ae98:	mov	r0, #0
   1ae9c:	cmn	r1, #1
   1aea0:	bne	1aee4 <__assert_fail@plt+0x82f4>
   1aea4:	mov	r5, sp
   1aea8:	mov	r0, r5
   1aeac:	bl	17e44 <__assert_fail@plt+0x5254>
   1aeb0:	movw	r1, #20108	; 0x4e8c
   1aeb4:	ldr	r0, [r4, #4]
   1aeb8:	movt	r1, #5
   1aebc:	ldr	r2, [r1, #52]	; 0x34
   1aec0:	mov	r1, r5
   1aec4:	blx	r2
   1aec8:	mov	r1, r0
   1aecc:	mvn	r0, #0
   1aed0:	cmp	r1, #0
   1aed4:	bne	1aee4 <__assert_fail@plt+0x82f4>
   1aed8:	ldm	sp, {r0, r1}
   1aedc:	strd	r0, [r6]
   1aee0:	mov	r0, #0
   1aee4:	sub	sp, fp, #16
   1aee8:	pop	{r4, r5, r6, sl, fp, pc}
   1aeec:	andeq	r0, r0, r0
   1aef0:	push	{fp, lr}
   1aef4:	mov	fp, sp
   1aef8:	cmp	r0, #0
   1aefc:	beq	1af5c <__assert_fail@plt+0x836c>
   1af00:	movw	r2, #16168	; 0x3f28
   1af04:	movw	ip, #19196	; 0x4afc
   1af08:	mov	r1, #0
   1af0c:	movt	r2, #1
   1af10:	movt	ip, #1
   1af14:	ldr	r3, [r0]
   1af18:	cmp	r3, r2
   1af1c:	beq	1af2c <__assert_fail@plt+0x833c>
   1af20:	cmp	r3, ip
   1af24:	orreq	r1, r1, #2
   1af28:	b	1af30 <__assert_fail@plt+0x8340>
   1af2c:	orr	r1, r1, #1
   1af30:	ldr	r0, [r0, #152]	; 0x98
   1af34:	cmp	r0, #0
   1af38:	bne	1af14 <__assert_fail@plt+0x8324>
   1af3c:	and	r0, r1, #3
   1af40:	cmp	r0, #3
   1af44:	popne	{fp, pc}
   1af48:	movw	r0, #20108	; 0x4e8c
   1af4c:	movt	r0, #5
   1af50:	ldrb	r0, [r0, #1]
   1af54:	cmp	r0, #0
   1af58:	beq	1af60 <__assert_fail@plt+0x8370>
   1af5c:	pop	{fp, pc}
   1af60:	movw	r1, #65004	; 0xfdec
   1af64:	mov	r0, #0
   1af68:	mov	r2, #5
   1af6c:	movt	r1, #3
   1af70:	bl	12674 <dcgettext@plt>
   1af74:	mov	r2, r0
   1af78:	mov	r0, #1
   1af7c:	mov	r1, #0
   1af80:	bl	127b8 <error@plt>
   1af84:	movw	r1, #20108	; 0x4e8c
   1af88:	cmp	r0, #0
   1af8c:	movt	r1, #5
   1af90:	beq	1afbc <__assert_fail@plt+0x83cc>
   1af94:	cmp	r0, #2
   1af98:	beq	1afd8 <__assert_fail@plt+0x83e8>
   1af9c:	cmp	r0, #1
   1afa0:	bne	1aff8 <__assert_fail@plt+0x8408>
   1afa4:	movw	r2, #45076	; 0xb014
   1afa8:	movt	r2, #1
   1afac:	str	r2, [r1, #64]	; 0x40
   1afb0:	movw	r2, #34220	; 0x85ac
   1afb4:	movt	r2, #1
   1afb8:	b	1afec <__assert_fail@plt+0x83fc>
   1afbc:	movw	r2, #45140	; 0xb054
   1afc0:	movt	r2, #1
   1afc4:	str	r2, [r1, #64]	; 0x40
   1afc8:	movw	r2, #34348	; 0x862c
   1afcc:	movt	r2, #1
   1afd0:	str	r2, [r1, #52]	; 0x34
   1afd4:	b	1aff8 <__assert_fail@plt+0x8408>
   1afd8:	movw	r2, #45144	; 0xb058
   1afdc:	movt	r2, #1
   1afe0:	str	r2, [r1, #64]	; 0x40
   1afe4:	movw	r2, #33928	; 0x8488
   1afe8:	movt	r2, #1
   1afec:	str	r2, [r1, #52]	; 0x34
   1aff0:	mov	r2, #1
   1aff4:	strb	r2, [r1, #12]
   1aff8:	str	r0, [r1, #48]	; 0x30
   1affc:	ldrb	r0, [r1, #44]	; 0x2c
   1b000:	tst	r0, #2
   1b004:	movwne	r0, #34436	; 0x8684
   1b008:	movtne	r0, #1
   1b00c:	strne	r0, [r1, #52]	; 0x34
   1b010:	bx	lr
   1b014:	push	{r4, r5, r6, sl, fp, lr}
   1b018:	add	fp, sp, #16
   1b01c:	mov	r4, r2
   1b020:	mov	r5, r1
   1b024:	mov	r6, r0
   1b028:	bl	29a84 <__assert_fail@plt+0x16e94>
   1b02c:	cmp	r0, #0
   1b030:	beq	1b04c <__assert_fail@plt+0x845c>
   1b034:	mov	r3, r0
   1b038:	mov	r0, r6
   1b03c:	mov	r1, r5
   1b040:	mov	r2, r4
   1b044:	pop	{r4, r5, r6, sl, fp, lr}
   1b048:	b	1b2ec <__assert_fail@plt+0x86fc>
   1b04c:	mov	r0, #0
   1b050:	pop	{r4, r5, r6, sl, fp, pc}
   1b054:	b	29c3c <__assert_fail@plt+0x1704c>
   1b058:	push	{r4, r5, r6, sl, fp, lr}
   1b05c:	add	fp, sp, #16
   1b060:	mov	r6, r0
   1b064:	movw	r0, #20064	; 0x4e60
   1b068:	mov	r4, r2
   1b06c:	mov	r5, r1
   1b070:	movt	r0, #5
   1b074:	ldr	r0, [r0]
   1b078:	cmp	r0, #0
   1b07c:	beq	1b094 <__assert_fail@plt+0x84a4>
   1b080:	mov	r0, r6
   1b084:	mov	r1, r5
   1b088:	mov	r2, r4
   1b08c:	pop	{r4, r5, r6, sl, fp, lr}
   1b090:	b	29c3c <__assert_fail@plt+0x1704c>
   1b094:	mov	r0, r6
   1b098:	mov	r1, r5
   1b09c:	mov	r2, r4
   1b0a0:	bl	29a84 <__assert_fail@plt+0x16e94>
   1b0a4:	cmp	r0, #0
   1b0a8:	beq	1b0c4 <__assert_fail@plt+0x84d4>
   1b0ac:	mov	r3, r0
   1b0b0:	mov	r0, r6
   1b0b4:	mov	r1, r5
   1b0b8:	mov	r2, r4
   1b0bc:	pop	{r4, r5, r6, sl, fp, lr}
   1b0c0:	b	1b2ec <__assert_fail@plt+0x86fc>
   1b0c4:	mov	r0, #0
   1b0c8:	pop	{r4, r5, r6, sl, fp, pc}
   1b0cc:	movw	r0, #19696	; 0x4cf0
   1b0d0:	mov	r1, #0
   1b0d4:	movt	r0, #5
   1b0d8:	str	r1, [r0]
   1b0dc:	bx	lr
   1b0e0:	bx	lr
   1b0e4:	push	{r4, r5, r6, r7, fp, lr}
   1b0e8:	add	fp, sp, #16
   1b0ec:	mov	r4, r0
   1b0f0:	movw	r0, #65176	; 0xfe98
   1b0f4:	mov	r2, #6
   1b0f8:	movt	r0, #3
   1b0fc:	mov	r1, r4
   1b100:	bl	12b90 <strncmp@plt>
   1b104:	cmp	r0, #0
   1b108:	bne	1b128 <__assert_fail@plt+0x8538>
   1b10c:	mov	r0, r4
   1b110:	bl	128c0 <strlen@plt>
   1b114:	cmp	r0, #8
   1b118:	bne	1b128 <__assert_fail@plt+0x8538>
   1b11c:	movw	r1, #3836	; 0xefc
   1b120:	movt	r1, #4
   1b124:	b	1b190 <__assert_fail@plt+0x85a0>
   1b128:	mov	r5, r4
   1b12c:	ldrb	r0, [r5], #1
   1b130:	cmp	r0, #45	; 0x2d
   1b134:	movw	r0, #58825	; 0xe5c9
   1b138:	movne	r5, r4
   1b13c:	movt	r0, #3
   1b140:	mov	r1, r5
   1b144:	bl	124f4 <strcmp@plt>
   1b148:	cmp	r0, #0
   1b14c:	beq	1b188 <__assert_fail@plt+0x8598>
   1b150:	movw	r7, #3852	; 0xf0c
   1b154:	mov	r6, #0
   1b158:	movt	r7, #4
   1b15c:	cmn	r6, #1360	; 0x550
   1b160:	beq	1b19c <__assert_fail@plt+0x85ac>
   1b164:	sub	r0, r7, r6
   1b168:	mov	r1, r5
   1b16c:	ldr	r0, [r0, #20]
   1b170:	bl	124f4 <strcmp@plt>
   1b174:	sub	r6, r6, #16
   1b178:	cmp	r0, #0
   1b17c:	bne	1b15c <__assert_fail@plt+0x856c>
   1b180:	sub	r1, r7, r6
   1b184:	b	1b190 <__assert_fail@plt+0x85a0>
   1b188:	movw	r1, #3852	; 0xf0c
   1b18c:	movt	r1, #4
   1b190:	mov	r0, r4
   1b194:	pop	{r4, r5, r6, r7, fp, lr}
   1b198:	b	1b1a4 <__assert_fail@plt+0x85b4>
   1b19c:	mov	r0, #0
   1b1a0:	pop	{r4, r5, r6, r7, fp, pc}
   1b1a4:	push	{r4, r5, r6, sl, fp, lr}
   1b1a8:	add	fp, sp, #16
   1b1ac:	sub	sp, sp, #8
   1b1b0:	mov	r5, r0
   1b1b4:	ldr	r0, [r1]
   1b1b8:	cmp	r0, #1
   1b1bc:	beq	1b1ec <__assert_fail@plt+0x85fc>
   1b1c0:	mov	r4, r1
   1b1c4:	cmp	r0, #2
   1b1c8:	beq	1b1f0 <__assert_fail@plt+0x8600>
   1b1cc:	movw	r6, #19696	; 0x4cf0
   1b1d0:	cmp	r0, #0
   1b1d4:	movt	r6, #5
   1b1d8:	ldr	r1, [r6]
   1b1dc:	beq	1b1fc <__assert_fail@plt+0x860c>
   1b1e0:	cmp	r1, #0
   1b1e4:	streq	r5, [r6]
   1b1e8:	b	1b1f0 <__assert_fail@plt+0x8600>
   1b1ec:	mov	r4, #0
   1b1f0:	mov	r0, r4
   1b1f4:	sub	sp, fp, #16
   1b1f8:	pop	{r4, r5, r6, sl, fp, pc}
   1b1fc:	cmp	r1, #0
   1b200:	beq	1b1f0 <__assert_fail@plt+0x8600>
   1b204:	movw	r0, #20108	; 0x4e8c
   1b208:	movt	r0, #5
   1b20c:	ldrb	r1, [r0, #17]
   1b210:	cmp	r1, #0
   1b214:	bne	1b1f0 <__assert_fail@plt+0x8600>
   1b218:	ldrb	r0, [r0, #16]
   1b21c:	cmp	r0, #0
   1b220:	beq	1b1f0 <__assert_fail@plt+0x8600>
   1b224:	movw	r1, #65260	; 0xfeec
   1b228:	mov	r0, #0
   1b22c:	mov	r2, #5
   1b230:	movt	r1, #3
   1b234:	bl	12674 <dcgettext@plt>
   1b238:	mov	r2, r0
   1b23c:	ldr	r0, [r6]
   1b240:	mov	r1, #0
   1b244:	mov	r3, r5
   1b248:	stm	sp, {r0, r5}
   1b24c:	mov	r0, #0
   1b250:	bl	127b8 <error@plt>
   1b254:	b	1b1f0 <__assert_fail@plt+0x8600>
   1b258:	push	{fp, lr}
   1b25c:	mov	fp, sp
   1b260:	bl	17594 <__assert_fail@plt+0x49a4>
   1b264:	mov	r2, #5
   1b268:	mov	r1, #0
   1b26c:	str	r2, [r0, #8]
   1b270:	movw	r2, #15984	; 0x3e70
   1b274:	str	r1, [r0, #12]
   1b278:	movt	r2, #1
   1b27c:	str	r2, [r0]
   1b280:	strh	r1, [r0, #18]
   1b284:	mov	r0, #1
   1b288:	pop	{fp, pc}
   1b28c:	push	{r4, r5, fp, lr}
   1b290:	add	fp, sp, #8
   1b294:	mov	r1, #0
   1b298:	mov	r5, #0
   1b29c:	bl	17690 <__assert_fail@plt+0x4aa0>
   1b2a0:	movw	r1, #18704	; 0x4910
   1b2a4:	mov	r4, #4
   1b2a8:	movt	r1, #1
   1b2ac:	strd	r4, [r0, #8]
   1b2b0:	str	r1, [r0]
   1b2b4:	strh	r5, [r0, #18]
   1b2b8:	mov	r0, #1
   1b2bc:	pop	{r4, r5, fp, pc}
   1b2c0:	push	{fp, lr}
   1b2c4:	mov	fp, sp
   1b2c8:	bl	17bb8 <__assert_fail@plt+0x4fc8>
   1b2cc:	movw	r1, #257	; 0x101
   1b2d0:	str	r1, [r0, #16]
   1b2d4:	add	r1, r0, #40	; 0x28
   1b2d8:	movw	r0, #2148	; 0x864
   1b2dc:	movt	r0, #4
   1b2e0:	bl	1e0b4 <__assert_fail@plt+0xb4c4>
   1b2e4:	mov	r0, #1
   1b2e8:	pop	{fp, pc}
   1b2ec:	push	{r4, r5, r6, r7, fp, lr}
   1b2f0:	add	fp, sp, #16
   1b2f4:	mov	r7, r3
   1b2f8:	mov	r4, r2
   1b2fc:	mov	r5, r1
   1b300:	mov	r6, r0
   1b304:	bl	12908 <__errno_location@plt>
   1b308:	ldr	r0, [r0]
   1b30c:	cmp	r0, #20
   1b310:	cmpne	r0, #2
   1b314:	bne	1b340 <__assert_fail@plt+0x8750>
   1b318:	movw	r0, #20108	; 0x4e8c
   1b31c:	movt	r0, #5
   1b320:	ldrb	r0, [r0, #44]	; 0x2c
   1b324:	tst	r0, #2
   1b328:	bne	1b348 <__assert_fail@plt+0x8758>
   1b32c:	mov	r0, r6
   1b330:	mov	r1, r5
   1b334:	mov	r2, r4
   1b338:	pop	{r4, r5, r6, r7, fp, lr}
   1b33c:	b	29c3c <__assert_fail@plt+0x1704c>
   1b340:	mov	r0, r7
   1b344:	pop	{r4, r5, r6, r7, fp, pc}
   1b348:	movw	r0, #17768	; 0x4568
   1b34c:	movw	r1, #65183	; 0xfe9f
   1b350:	mov	r2, r5
   1b354:	movt	r0, #5
   1b358:	movt	r1, #3
   1b35c:	ldr	r0, [r0]
   1b360:	bl	128fc <fprintf@plt>
   1b364:	b	1b32c <__assert_fail@plt+0x873c>
   1b368:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b36c:	add	fp, sp, #28
   1b370:	sub	sp, sp, #116	; 0x74
   1b374:	mov	r6, #0
   1b378:	cmp	r1, #0
   1b37c:	beq	1b41c <__assert_fail@plt+0x882c>
   1b380:	ldr	r8, [r2]
   1b384:	mov	sl, r2
   1b388:	mov	r5, r1
   1b38c:	ldr	r4, [r1, r8, lsl #2]
   1b390:	cmp	r4, #0
   1b394:	beq	1b41c <__assert_fail@plt+0x882c>
   1b398:	mov	r7, r0
   1b39c:	mov	r0, r4
   1b3a0:	bl	128c0 <strlen@plt>
   1b3a4:	cmp	r0, #8
   1b3a8:	bne	1b41c <__assert_fail@plt+0x882c>
   1b3ac:	mov	r0, #116	; 0x74
   1b3b0:	mov	r1, r4
   1b3b4:	mov	r2, #6
   1b3b8:	strh	r0, [fp, #-32]	; 0xffffffe0
   1b3bc:	movw	r0, #16993	; 0x4261
   1b3c0:	movt	r0, #28003	; 0x6d63
   1b3c4:	str	r0, [fp, #-36]	; 0xffffffdc
   1b3c8:	movw	r0, #65176	; 0xfe98
   1b3cc:	movt	r0, #3
   1b3d0:	bl	12b90 <strncmp@plt>
   1b3d4:	cmp	r0, #0
   1b3d8:	bne	1b5f4 <__assert_fail@plt+0x8a04>
   1b3dc:	ldrb	r9, [r4, #6]
   1b3e0:	cmp	r9, #66	; 0x42
   1b3e4:	beq	1b3f4 <__assert_fail@plt+0x8804>
   1b3e8:	ldrb	r4, [r4, #7]
   1b3ec:	cmp	r4, #66	; 0x42
   1b3f0:	bne	1b428 <__assert_fail@plt+0x8838>
   1b3f4:	movw	r1, #93	; 0x5d
   1b3f8:	mov	r0, #0
   1b3fc:	mov	r2, #5
   1b400:	mov	r6, #0
   1b404:	movt	r1, #4
   1b408:	bl	12674 <dcgettext@plt>
   1b40c:	mov	r2, r0
   1b410:	mov	r0, #0
   1b414:	mov	r1, #0
   1b418:	bl	127b8 <error@plt>
   1b41c:	mov	r0, r6
   1b420:	sub	sp, fp, #28
   1b424:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b428:	mov	r6, #0
   1b42c:	cmp	r9, #116	; 0x74
   1b430:	beq	1b41c <__assert_fail@plt+0x882c>
   1b434:	sub	r0, fp, #36	; 0x24
   1b438:	mov	r1, r9
   1b43c:	bl	128cc <strchr@plt>
   1b440:	cmp	r0, #0
   1b444:	beq	1b41c <__assert_fail@plt+0x882c>
   1b448:	sub	r0, fp, #36	; 0x24
   1b44c:	mov	r1, r4
   1b450:	bl	128cc <strchr@plt>
   1b454:	cmp	r0, #0
   1b458:	beq	1b41c <__assert_fail@plt+0x882c>
   1b45c:	add	r0, r8, #1
   1b460:	ldr	r1, [r5, r0, lsl #2]
   1b464:	cmp	r1, #0
   1b468:	beq	1b614 <__assert_fail@plt+0x8a24>
   1b46c:	str	r0, [sl]
   1b470:	mov	r0, r7
   1b474:	bl	17b58 <__assert_fail@plt+0x4f68>
   1b478:	mov	r6, r0
   1b47c:	cmp	r9, #97	; 0x61
   1b480:	beq	1b4a4 <__assert_fail@plt+0x88b4>
   1b484:	cmp	r9, #109	; 0x6d
   1b488:	beq	1b49c <__assert_fail@plt+0x88ac>
   1b48c:	cmp	r9, #99	; 0x63
   1b490:	bne	1b65c <__assert_fail@plt+0x8a6c>
   1b494:	mov	r0, #2
   1b498:	b	1b4a8 <__assert_fail@plt+0x88b8>
   1b49c:	mov	r0, #3
   1b4a0:	b	1b4a8 <__assert_fail@plt+0x88b8>
   1b4a4:	mov	r0, #0
   1b4a8:	movw	r8, #20108	; 0x4e8c
   1b4ac:	cmp	r4, #116	; 0x74
   1b4b0:	str	r0, [r6, #40]	; 0x28
   1b4b4:	movt	r8, #5
   1b4b8:	bne	1b500 <__assert_fail@plt+0x8910>
   1b4bc:	ldr	r0, [sl]
   1b4c0:	add	r2, r8, #20
   1b4c4:	ldr	r1, [r5, r0, lsl #2]
   1b4c8:	add	r0, r6, #48	; 0x30
   1b4cc:	bl	26d88 <__assert_fail@plt+0x14198>
   1b4d0:	cmp	r0, #0
   1b4d4:	bne	1b560 <__assert_fail@plt+0x8970>
   1b4d8:	movw	r1, #215	; 0xd7
   1b4dc:	mov	r0, #0
   1b4e0:	mov	r2, #5
   1b4e4:	movt	r1, #4
   1b4e8:	bl	12674 <dcgettext@plt>
   1b4ec:	mov	r4, r0
   1b4f0:	ldr	r0, [sl]
   1b4f4:	ldr	r1, [r8, #72]	; 0x48
   1b4f8:	ldr	r2, [r5, r0, lsl #2]
   1b4fc:	b	1b640 <__assert_fail@plt+0x8a50>
   1b500:	mov	r7, sp
   1b504:	mov	r0, r7
   1b508:	bl	17e44 <__assert_fail@plt+0x5254>
   1b50c:	ldr	r0, [sl]
   1b510:	ldr	r2, [r8, #52]	; 0x34
   1b514:	mov	r1, r7
   1b518:	ldr	r0, [r5, r0, lsl #2]
   1b51c:	blx	r2
   1b520:	cmp	r0, #0
   1b524:	bne	1b6b8 <__assert_fail@plt+0x8ac8>
   1b528:	cmp	r4, #109	; 0x6d
   1b52c:	beq	1b550 <__assert_fail@plt+0x8960>
   1b530:	cmp	r4, #99	; 0x63
   1b534:	beq	1b548 <__assert_fail@plt+0x8958>
   1b538:	cmp	r4, #97	; 0x61
   1b53c:	bne	1b6cc <__assert_fail@plt+0x8adc>
   1b540:	add	r0, r7, #72	; 0x48
   1b544:	b	1b554 <__assert_fail@plt+0x8964>
   1b548:	add	r0, r7, #88	; 0x58
   1b54c:	b	1b554 <__assert_fail@plt+0x8964>
   1b550:	add	r0, r7, #80	; 0x50
   1b554:	ldm	r0, {r0, r3}
   1b558:	add	r1, r6, #48	; 0x30
   1b55c:	stm	r1, {r0, r3}
   1b560:	mov	r0, #0
   1b564:	movw	r2, #10111	; 0x277f
   1b568:	vldr	s0, [pc, #412]	; 1b70c <__assert_fail@plt+0x8b1c>
   1b56c:	str	r0, [r6, #44]	; 0x2c
   1b570:	movt	r2, #133	; 0x85
   1b574:	ldr	r0, [r6, #48]	; 0x30
   1b578:	ldr	r1, [r8, #28]
   1b57c:	sub	r0, r1, r0
   1b580:	add	r1, pc, #380	; 0x17c
   1b584:	cmp	r0, r2
   1b588:	addgt	r1, r1, #4
   1b58c:	vldr	s2, [r1]
   1b590:	movw	r1, #20864	; 0x5180
   1b594:	movt	r1, #1
   1b598:	cmp	r0, r1
   1b59c:	vselge.f32	s0, s2, s0
   1b5a0:	vstr	s0, [r6, #28]
   1b5a4:	ldr	r0, [sl]
   1b5a8:	add	r0, r0, #1
   1b5ac:	str	r0, [sl]
   1b5b0:	ldr	r0, [r6]
   1b5b4:	cmp	r0, #0
   1b5b8:	beq	1b688 <__assert_fail@plt+0x8a98>
   1b5bc:	movw	r1, #18088	; 0x46a8
   1b5c0:	movt	r1, #1
   1b5c4:	cmp	r0, r1
   1b5c8:	bne	1b6a0 <__assert_fail@plt+0x8ab0>
   1b5cc:	ldrb	r0, [r6, #18]
   1b5d0:	mov	r6, #1
   1b5d4:	cmp	r0, #0
   1b5d8:	bne	1b41c <__assert_fail@plt+0x882c>
   1b5dc:	movw	r0, #337	; 0x151
   1b5e0:	movw	r1, #19
   1b5e4:	movw	r3, #28
   1b5e8:	movw	r2, #1649	; 0x671
   1b5ec:	movt	r0, #4
   1b5f0:	b	1b608 <__assert_fail@plt+0x8a18>
   1b5f4:	movw	r0, #65512	; 0xffe8
   1b5f8:	movw	r1, #19
   1b5fc:	movw	r3, #28
   1b600:	movw	r2, #1555	; 0x613
   1b604:	movt	r0, #3
   1b608:	movt	r1, #4
   1b60c:	movt	r3, #4
   1b610:	bl	12bf0 <__assert_fail@plt>
   1b614:	movw	r1, #162	; 0xa2
   1b618:	mov	r0, #0
   1b61c:	mov	r2, #5
   1b620:	movt	r1, #4
   1b624:	bl	12674 <dcgettext@plt>
   1b628:	mov	r4, r0
   1b62c:	ldr	r0, [sl]
   1b630:	ldr	r2, [r5, r0, lsl #2]
   1b634:	movw	r0, #20108	; 0x4e8c
   1b638:	movt	r0, #5
   1b63c:	ldr	r1, [r0, #72]	; 0x48
   1b640:	mov	r0, #0
   1b644:	bl	294c0 <__assert_fail@plt+0x168d0>
   1b648:	mov	r3, r0
   1b64c:	mov	r0, #1
   1b650:	mov	r1, #0
   1b654:	mov	r2, r4
   1b658:	bl	127b8 <error@plt>
   1b65c:	sub	r0, fp, #36	; 0x24
   1b660:	mov	r1, r9
   1b664:	bl	128cc <strchr@plt>
   1b668:	cmp	r0, #0
   1b66c:	bne	1b6ec <__assert_fail@plt+0x8afc>
   1b670:	movw	r0, #192	; 0xc0
   1b674:	movw	r1, #19
   1b678:	movw	r3, #28
   1b67c:	movw	r2, #1611	; 0x64b
   1b680:	movt	r0, #4
   1b684:	b	1b608 <__assert_fail@plt+0x8a18>
   1b688:	movw	r0, #273	; 0x111
   1b68c:	movw	r1, #19
   1b690:	movw	r3, #28
   1b694:	movw	r2, #1647	; 0x66f
   1b698:	movt	r0, #4
   1b69c:	b	1b608 <__assert_fail@plt+0x8a18>
   1b6a0:	movw	r0, #301	; 0x12d
   1b6a4:	movw	r1, #19
   1b6a8:	movw	r3, #28
   1b6ac:	mov	r2, #1648	; 0x670
   1b6b0:	movt	r0, #4
   1b6b4:	b	1b608 <__assert_fail@plt+0x8a18>
   1b6b8:	bl	12908 <__errno_location@plt>
   1b6bc:	ldr	r1, [sl]
   1b6c0:	ldr	r0, [r0]
   1b6c4:	ldr	r1, [r5, r1, lsl #2]
   1b6c8:	bl	19004 <__assert_fail@plt+0x6414>
   1b6cc:	movw	r0, #58985	; 0xe669
   1b6d0:	movw	r1, #19
   1b6d4:	movw	r3, #357	; 0x165
   1b6d8:	movw	r2, #498	; 0x1f2
   1b6dc:	movt	r0, #3
   1b6e0:	movt	r1, #4
   1b6e4:	movt	r3, #4
   1b6e8:	bl	12bf0 <__assert_fail@plt>
   1b6ec:	movw	r0, #58985	; 0xe669
   1b6f0:	movw	r1, #19
   1b6f4:	movw	r3, #28
   1b6f8:	movw	r2, #1612	; 0x64c
   1b6fc:	movt	r0, #3
   1b700:	b	1b608 <__assert_fail@plt+0x8a18>
   1b704:	mcrcc	14, 6, sl, cr7, cr4, {0}
   1b708:			; <UNDEFINED> instruction: 0x3e99999a
   1b70c:	stccc	7, cr13, [r3], #-40	; 0xffffffd8
   1b710:	push	{r4, sl, fp, lr}
   1b714:	add	fp, sp, #8
   1b718:	mov	r1, #0
   1b71c:	mov	r4, #0
   1b720:	bl	17690 <__assert_fail@plt+0x4aa0>
   1b724:	mov	r2, #2
   1b728:	mov	r1, #4
   1b72c:	str	r2, [r0, #8]
   1b730:	str	r1, [r0, #12]
   1b734:	movw	r1, #17980	; 0x463c
   1b738:	movt	r1, #1
   1b73c:	str	r1, [r0]
   1b740:	strh	r4, [r0, #18]
   1b744:	mov	r0, #1
   1b748:	pop	{r4, sl, fp, pc}
   1b74c:	push	{fp, lr}
   1b750:	mov	fp, sp
   1b754:	bl	17594 <__assert_fail@plt+0x49a4>
   1b758:	mov	r2, #3
   1b75c:	mov	r1, #1
   1b760:	str	r2, [r0, #8]
   1b764:	str	r1, [r0, #12]
   1b768:	movw	r1, #16088	; 0x3ed8
   1b76c:	movt	r1, #1
   1b770:	str	r1, [r0]
   1b774:	mov	r1, #1065353216	; 0x3f800000
   1b778:	str	r1, [r0, #28]
   1b77c:	mov	r1, #0
   1b780:	strh	r1, [r0, #18]
   1b784:	mov	r0, #1
   1b788:	pop	{fp, pc}
   1b78c:	push	{fp, lr}
   1b790:	mov	fp, sp
   1b794:	bl	17594 <__assert_fail@plt+0x49a4>
   1b798:	mov	r1, #3
   1b79c:	str	r1, [r0, #8]
   1b7a0:	str	r1, [r0, #12]
   1b7a4:	movw	r1, #15704	; 0x3d58
   1b7a8:	movt	r1, #1
   1b7ac:	str	r1, [r0]
   1b7b0:	mov	r1, #0
   1b7b4:	strh	r1, [r0, #18]
   1b7b8:	mov	r0, #1
   1b7bc:	pop	{fp, pc}
   1b7c0:	mov	r3, #0
   1b7c4:	b	1d770 <__assert_fail@plt+0xab80>
   1b7c8:	push	{r4, r5, r6, r7, fp, lr}
   1b7cc:	add	fp, sp, #16
   1b7d0:	sub	sp, sp, #112	; 0x70
   1b7d4:	add	r7, sp, #8
   1b7d8:	mov	r4, r0
   1b7dc:	mov	r5, r2
   1b7e0:	mov	r6, r1
   1b7e4:	mov	r0, r7
   1b7e8:	bl	17e44 <__assert_fail@plt+0x5254>
   1b7ec:	add	r3, sp, #4
   1b7f0:	mov	r0, r6
   1b7f4:	mov	r1, r5
   1b7f8:	mov	r2, r7
   1b7fc:	bl	1d9e8 <__assert_fail@plt+0xadf8>
   1b800:	mov	r1, r0
   1b804:	mov	r0, #0
   1b808:	cmp	r1, #0
   1b80c:	beq	1b87c <__assert_fail@plt+0x8c8c>
   1b810:	ldr	r1, [sp, #4]
   1b814:	mov	r0, r4
   1b818:	bl	17b58 <__assert_fail@plt+0x4f68>
   1b81c:	mov	r1, #0
   1b820:	add	ip, r0, #44	; 0x2c
   1b824:	vldr	s0, [pc, #96]	; 1b88c <__assert_fail@plt+0x8c9c>
   1b828:	str	r1, [r0, #40]	; 0x28
   1b82c:	ldr	r2, [sp, #88]	; 0x58
   1b830:	ldr	r3, [sp, #92]	; 0x5c
   1b834:	stm	ip, {r1, r2, r3}
   1b838:	movw	r1, #20108	; 0x4e8c
   1b83c:	movw	r3, #10111	; 0x277f
   1b840:	movt	r1, #5
   1b844:	ldr	r2, [sp, #88]	; 0x58
   1b848:	movt	r3, #133	; 0x85
   1b84c:	ldr	r1, [r1, #28]
   1b850:	sub	r1, r1, r2
   1b854:	add	r2, pc, #40	; 0x28
   1b858:	cmp	r1, r3
   1b85c:	addgt	r2, r2, #4
   1b860:	vldr	s2, [r2]
   1b864:	movw	r2, #20864	; 0x5180
   1b868:	movt	r2, #1
   1b86c:	cmp	r1, r2
   1b870:	vselge.f32	s0, s2, s0
   1b874:	vstr	s0, [r0, #28]
   1b878:	mov	r0, #1
   1b87c:	sub	sp, fp, #16
   1b880:	pop	{r4, r5, r6, r7, fp, pc}
   1b884:	mcrcc	14, 6, sl, cr7, cr4, {0}
   1b888:			; <UNDEFINED> instruction: 0x3e99999a
   1b88c:	stccc	7, cr13, [r3], #-40	; 0xffffffd8
   1b890:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b894:	add	fp, sp, #28
   1b898:	sub	sp, sp, #28
   1b89c:	mov	r4, r1
   1b8a0:	movw	r1, #943	; 0x3af
   1b8a4:	mov	r5, r2
   1b8a8:	mov	r6, r0
   1b8ac:	mov	r0, #0
   1b8b0:	mov	r2, #5
   1b8b4:	mov	r8, #0
   1b8b8:	movt	r1, #4
   1b8bc:	bl	12674 <dcgettext@plt>
   1b8c0:	cmp	r4, #0
   1b8c4:	beq	1b9e0 <__assert_fail@plt+0x8df0>
   1b8c8:	ldr	r9, [r5]
   1b8cc:	ldr	r7, [r4, r9, lsl #2]
   1b8d0:	cmp	r7, #0
   1b8d4:	beq	1b9e0 <__assert_fail@plt+0x8df0>
   1b8d8:	movw	sl, #20108	; 0x4e8c
   1b8dc:	add	r1, r9, #1
   1b8e0:	vldr	d0, [pc, #456]	; 1bab0 <__assert_fail@plt+0x8ec0>
   1b8e4:	add	r4, sp, #8
   1b8e8:	str	r1, [r5]
   1b8ec:	movt	sl, #5
   1b8f0:	ldrb	r1, [r7]
   1b8f4:	str	r0, [sp]
   1b8f8:	movw	r0, #20863	; 0x517f
   1b8fc:	ldr	r2, [sl, #28]
   1b900:	ldr	r3, [sl, #32]
   1b904:	movt	r0, #1
   1b908:	cmp	r1, #45	; 0x2d
   1b90c:	mov	r1, r4
   1b910:	addeq	r2, r2, r0
   1b914:	mov	r0, r7
   1b918:	bl	1d878 <__assert_fail@plt+0xac88>
   1b91c:	cmp	r0, #0
   1b920:	beq	1b9dc <__assert_fail@plt+0x8dec>
   1b924:	mov	r0, r6
   1b928:	mov	r1, r7
   1b92c:	bl	17b58 <__assert_fail@plt+0x4f68>
   1b930:	mov	r5, r0
   1b934:	mov	r0, #8
   1b938:	movw	r2, #10111	; 0x277f
   1b93c:	movw	r7, #20863	; 0x517f
   1b940:	vldr	s0, [pc, #376]	; 1bac0 <__assert_fail@plt+0x8ed0>
   1b944:	mov	r8, #1
   1b948:	vld1.64	{d16-d17}, [r4], r0
   1b94c:	add	r0, r5, #40	; 0x28
   1b950:	movt	r2, #133	; 0x85
   1b954:	movt	r7, #1
   1b958:	vst1.64	{d16-d17}, [r0]
   1b95c:	ldr	r0, [r4]
   1b960:	ldr	r1, [sl, #28]
   1b964:	sub	r0, r1, r0
   1b968:	add	r1, pc, #328	; 0x148
   1b96c:	cmp	r0, r2
   1b970:	addgt	r1, r1, #4
   1b974:	vldr	s2, [r1]
   1b978:	add	r1, r7, #1
   1b97c:	cmp	r0, r1
   1b980:	vselge.f32	s0, s2, s0
   1b984:	vstr	s0, [r5, #28]
   1b988:	ldrb	r0, [sl, #44]	; 0x2c
   1b98c:	tst	r0, #1
   1b990:	beq	1b9e0 <__assert_fail@plt+0x8df0>
   1b994:	movw	sl, #17768	; 0x4568
   1b998:	ldr	r2, [r5, #4]
   1b99c:	movw	r1, #1011	; 0x3f3
   1b9a0:	movt	sl, #5
   1b9a4:	movt	r1, #4
   1b9a8:	ldr	r0, [sl]
   1b9ac:	bl	128fc <fprintf@plt>
   1b9b0:	ldr	r9, [sp, #12]
   1b9b4:	ldr	r0, [sl]
   1b9b8:	cmp	r9, #0
   1b9bc:	beq	1b9ec <__assert_fail@plt+0x8dfc>
   1b9c0:	cmp	r9, #1
   1b9c4:	bne	1ba00 <__assert_fail@plt+0x8e10>
   1b9c8:	movw	r3, #1055	; 0x41f
   1b9cc:	movw	r2, #6919	; 0x1b07
   1b9d0:	movt	r3, #4
   1b9d4:	movt	r2, #4
   1b9d8:	b	1ba2c <__assert_fail@plt+0x8e3c>
   1b9dc:	str	r9, [r5]
   1b9e0:	mov	r0, r8
   1b9e4:	sub	sp, fp, #28
   1b9e8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b9ec:	movw	r3, #1052	; 0x41c
   1b9f0:	movw	r2, #1046	; 0x416
   1b9f4:	movt	r3, #4
   1b9f8:	movt	r2, #4
   1b9fc:	b	1ba2c <__assert_fail@plt+0x8e3c>
   1ba00:	movw	r1, #1058	; 0x422
   1ba04:	movw	r3, #1061	; 0x425
   1ba08:	cmp	r9, #2
   1ba0c:	movw	r2, #1062	; 0x426
   1ba10:	movt	r1, #4
   1ba14:	movt	r3, #4
   1ba18:	movt	r2, #4
   1ba1c:	moveq	r3, r1
   1ba20:	movw	r1, #1049	; 0x419
   1ba24:	movt	r1, #4
   1ba28:	moveq	r2, r1
   1ba2c:	movw	r1, #1025	; 0x401
   1ba30:	movt	r1, #4
   1ba34:	bl	128fc <fprintf@plt>
   1ba38:	ldr	r4, [r5, #48]	; 0x30
   1ba3c:	ldr	r6, [sl]
   1ba40:	add	r0, sp, #4
   1ba44:	str	r4, [sp, #4]
   1ba48:	bl	12668 <ctime@plt>
   1ba4c:	movw	r1, #1084	; 0x43c
   1ba50:	str	r0, [sp]
   1ba54:	asr	r3, r4, #31
   1ba58:	mov	r0, r6
   1ba5c:	mov	r2, r4
   1ba60:	movt	r1, #4
   1ba64:	bl	128fc <fprintf@plt>
   1ba68:	cmp	r9, #2
   1ba6c:	bne	1b9e0 <__assert_fail@plt+0x8df0>
   1ba70:	ldr	r0, [r5, #48]	; 0x30
   1ba74:	ldr	r5, [sl]
   1ba78:	add	r0, r7, r0
   1ba7c:	add	r4, r0, #1
   1ba80:	add	r0, sp, #4
   1ba84:	str	r4, [sp, #4]
   1ba88:	bl	12668 <ctime@plt>
   1ba8c:	movw	r1, #1064	; 0x428
   1ba90:	str	r0, [sp]
   1ba94:	asr	r3, r4, #31
   1ba98:	mov	r0, r5
   1ba9c:	mov	r2, r4
   1baa0:	movt	r1, #4
   1baa4:	bl	128fc <fprintf@plt>
   1baa8:	b	1b9e0 <__assert_fail@plt+0x8df0>
   1baac:	nop	{0}
   1bab0:	andeq	r0, r0, r0
   1bab4:	rscsmi	r1, r5, r0, lsl #16
   1bab8:	mcrcc	14, 6, sl, cr7, cr4, {0}
   1babc:			; <UNDEFINED> instruction: 0x3e99999a
   1bac0:	stccc	7, cr13, [r3], #-40	; 0xffffffd8
   1bac4:	mov	r3, #2
   1bac8:	b	1d770 <__assert_fail@plt+0xab80>
   1bacc:	push	{r4, r5, r6, r7, fp, lr}
   1bad0:	add	fp, sp, #16
   1bad4:	sub	sp, sp, #112	; 0x70
   1bad8:	add	r7, sp, #8
   1badc:	mov	r4, r0
   1bae0:	mov	r5, r2
   1bae4:	mov	r6, r1
   1bae8:	mov	r0, r7
   1baec:	bl	17e44 <__assert_fail@plt+0x5254>
   1baf0:	add	r3, sp, #4
   1baf4:	mov	r0, r6
   1baf8:	mov	r1, r5
   1bafc:	mov	r2, r7
   1bb00:	bl	1d9e8 <__assert_fail@plt+0xadf8>
   1bb04:	mov	r1, r0
   1bb08:	mov	r0, #0
   1bb0c:	cmp	r1, #0
   1bb10:	beq	1bb88 <__assert_fail@plt+0x8f98>
   1bb14:	ldr	r1, [sp, #4]
   1bb18:	mov	r0, r4
   1bb1c:	bl	17b58 <__assert_fail@plt+0x4f68>
   1bb20:	mov	r1, #2
   1bb24:	mov	r3, #0
   1bb28:	vldr	s0, [pc, #104]	; 1bb98 <__assert_fail@plt+0x8fa8>
   1bb2c:	str	r1, [r0, #40]	; 0x28
   1bb30:	ldr	r1, [sp, #88]	; 0x58
   1bb34:	ldr	r2, [sp, #92]	; 0x5c
   1bb38:	str	r3, [r0, #44]	; 0x2c
   1bb3c:	movw	r3, #10111	; 0x277f
   1bb40:	movt	r3, #133	; 0x85
   1bb44:	str	r1, [r0, #48]	; 0x30
   1bb48:	movw	r1, #20108	; 0x4e8c
   1bb4c:	str	r2, [r0, #52]	; 0x34
   1bb50:	movt	r1, #5
   1bb54:	ldr	r2, [sp, #88]	; 0x58
   1bb58:	ldr	r1, [r1, #28]
   1bb5c:	sub	r1, r1, r2
   1bb60:	add	r2, pc, #40	; 0x28
   1bb64:	cmp	r1, r3
   1bb68:	addgt	r2, r2, #4
   1bb6c:	vldr	s2, [r2]
   1bb70:	movw	r2, #20864	; 0x5180
   1bb74:	movt	r2, #1
   1bb78:	cmp	r1, r2
   1bb7c:	vselge.f32	s0, s2, s0
   1bb80:	vstr	s0, [r0, #28]
   1bb84:	mov	r0, #1
   1bb88:	sub	sp, fp, #16
   1bb8c:	pop	{r4, r5, r6, r7, fp, pc}
   1bb90:	mcrcc	14, 6, sl, cr7, cr4, {0}
   1bb94:			; <UNDEFINED> instruction: 0x3e99999a
   1bb98:	stccc	7, cr13, [r3], #-40	; 0xffffffd8
   1bb9c:	push	{r4, r5, r6, r7, fp, lr}
   1bba0:	add	fp, sp, #16
   1bba4:	mov	r6, r0
   1bba8:	mov	r0, #0
   1bbac:	cmp	r1, #0
   1bbb0:	beq	1bc14 <__assert_fail@plt+0x9024>
   1bbb4:	mov	r5, r1
   1bbb8:	ldr	r1, [r2]
   1bbbc:	mov	r4, r2
   1bbc0:	ldr	r1, [r5, r1, lsl #2]
   1bbc4:	cmp	r1, #0
   1bbc8:	beq	1bc14 <__assert_fail@plt+0x9024>
   1bbcc:	bl	124dc <is_selinux_enabled@plt>
   1bbd0:	cmp	r0, #0
   1bbd4:	ble	1bc18 <__assert_fail@plt+0x9028>
   1bbd8:	mov	r0, r6
   1bbdc:	mov	r1, #0
   1bbe0:	mov	r7, #0
   1bbe4:	bl	17b58 <__assert_fail@plt+0x4f68>
   1bbe8:	movw	r1, #55050	; 0xd70a
   1bbec:	movt	r1, #15395	; 0x3c23
   1bbf0:	str	r1, [r0, #28]
   1bbf4:	strb	r7, [r0, #18]
   1bbf8:	ldr	r1, [r4]
   1bbfc:	ldr	r1, [r5, r1, lsl #2]
   1bc00:	str	r1, [r0, #40]	; 0x28
   1bc04:	ldr	r0, [r4]
   1bc08:	add	r0, r0, #1
   1bc0c:	str	r0, [r4]
   1bc10:	mov	r0, #1
   1bc14:	pop	{r4, r5, r6, r7, fp, pc}
   1bc18:	movw	r1, #1092	; 0x444
   1bc1c:	mov	r0, #0
   1bc20:	mov	r2, #5
   1bc24:	movt	r1, #4
   1bc28:	bl	12674 <dcgettext@plt>
   1bc2c:	mov	r2, r0
   1bc30:	mov	r0, #1
   1bc34:	mov	r1, #0
   1bc38:	bl	127b8 <error@plt>
   1bc3c:	push	{r4, sl, fp, lr}
   1bc40:	add	fp, sp, #8
   1bc44:	movw	r4, #20108	; 0x4e8c
   1bc48:	movt	r4, #5
   1bc4c:	ldrb	r0, [r4, #36]	; 0x24
   1bc50:	cmp	r0, #0
   1bc54:	bne	1bcd0 <__assert_fail@plt+0x90e0>
   1bc58:	mov	r0, r4
   1bc5c:	mov	r2, #0
   1bc60:	ldr	r1, [r0, #28]!
   1bc64:	add	r1, r1, #4480	; 0x1180
   1bc68:	add	r1, r1, #81920	; 0x14000
   1bc6c:	stm	r0, {r1, r2}
   1bc70:	bl	12848 <localtime@plt>
   1bc74:	cmp	r0, #0
   1bc78:	beq	1bc9c <__assert_fail@plt+0x90ac>
   1bc7c:	ldm	r0, {r1, r2}
   1bc80:	rsb	r2, r2, r2, lsl #4
   1bc84:	ldr	r0, [r0, #8]
   1bc88:	add	r1, r1, r2, lsl #2
   1bc8c:	mov	r2, #3600	; 0xe10
   1bc90:	mla	r1, r0, r2, r1
   1bc94:	ldr	r0, [r4, #28]
   1bc98:	b	1bcc0 <__assert_fail@plt+0x90d0>
   1bc9c:	ldr	r0, [r4, #28]
   1bca0:	movw	r1, #17671	; 0x4507
   1bca4:	movt	r1, #49710	; 0xc22e
   1bca8:	smmla	r1, r0, r1, r0
   1bcac:	asr	r2, r1, #16
   1bcb0:	add	r1, r2, r1, lsr #31
   1bcb4:	movw	r2, #675	; 0x2a3
   1bcb8:	mul	r1, r1, r2
   1bcbc:	sub	r1, r0, r1, lsl #7
   1bcc0:	mov	r2, #1
   1bcc4:	sub	r0, r0, r1
   1bcc8:	strb	r2, [r4, #36]	; 0x24
   1bccc:	str	r0, [r4, #28]
   1bcd0:	mov	r0, #1
   1bcd4:	pop	{r4, sl, fp, pc}
   1bcd8:	push	{fp, lr}
   1bcdc:	mov	fp, sp
   1bce0:	bl	17bb8 <__assert_fail@plt+0x4fc8>
   1bce4:	movw	r1, #257	; 0x101
   1bce8:	mov	r2, #0
   1bcec:	strh	r1, [r0, #16]
   1bcf0:	movw	r1, #20108	; 0x4e8c
   1bcf4:	movt	r1, #5
   1bcf8:	strb	r2, [r1]
   1bcfc:	mov	r1, #1065353216	; 0x3f800000
   1bd00:	strh	r2, [r0, #18]
   1bd04:	str	r1, [r0, #28]
   1bd08:	mov	r0, #1
   1bd0c:	pop	{fp, pc}
   1bd10:	push	{r4, sl, fp, lr}
   1bd14:	add	fp, sp, #8
   1bd18:	movw	r4, #20108	; 0x4e8c
   1bd1c:	movt	r4, #5
   1bd20:	ldrb	r0, [r4, #17]
   1bd24:	cmp	r0, #0
   1bd28:	bne	1bd5c <__assert_fail@plt+0x916c>
   1bd2c:	ldrb	r0, [r4, #16]
   1bd30:	cmp	r0, #0
   1bd34:	beq	1bd5c <__assert_fail@plt+0x916c>
   1bd38:	movw	r1, #1144	; 0x478
   1bd3c:	mov	r0, #0
   1bd40:	mov	r2, #5
   1bd44:	movt	r1, #4
   1bd48:	bl	12674 <dcgettext@plt>
   1bd4c:	mov	r2, r0
   1bd50:	mov	r0, #0
   1bd54:	mov	r1, #0
   1bd58:	bl	127b8 <error@plt>
   1bd5c:	movw	r1, #19700	; 0x4cf4
   1bd60:	mov	r0, #256	; 0x100
   1bd64:	movt	r1, #5
   1bd68:	strh	r0, [r4]
   1bd6c:	ldr	r0, [r1]
   1bd70:	cmp	r0, #0
   1bd74:	bne	1bd88 <__assert_fail@plt+0x9198>
   1bd78:	movw	r0, #3852	; 0xf0c
   1bd7c:	movt	r0, #4
   1bd80:	add	r0, r0, #1296	; 0x510
   1bd84:	str	r0, [r1]
   1bd88:	bl	17bb8 <__assert_fail@plt+0x4fc8>
   1bd8c:	mov	r1, #1065353216	; 0x3f800000
   1bd90:	str	r1, [r0, #28]
   1bd94:	mov	r1, #0
   1bd98:	strh	r1, [r0, #18]
   1bd9c:	mov	r0, #1
   1bda0:	pop	{r4, sl, fp, pc}
   1bda4:	push	{fp, lr}
   1bda8:	mov	fp, sp
   1bdac:	movw	r0, #20108	; 0x4e8c
   1bdb0:	mov	r1, #256	; 0x100
   1bdb4:	movt	r0, #5
   1bdb8:	strh	r1, [r0]
   1bdbc:	movw	r1, #19700	; 0x4cf4
   1bdc0:	movt	r1, #5
   1bdc4:	ldr	r0, [r1]
   1bdc8:	cmp	r0, #0
   1bdcc:	bne	1bde0 <__assert_fail@plt+0x91f0>
   1bdd0:	movw	r0, #3852	; 0xf0c
   1bdd4:	movt	r0, #4
   1bdd8:	add	r0, r0, #1296	; 0x510
   1bddc:	str	r0, [r1]
   1bde0:	bl	17bb8 <__assert_fail@plt+0x4fc8>
   1bde4:	mov	r1, #1065353216	; 0x3f800000
   1bde8:	str	r1, [r0, #28]
   1bdec:	mov	r1, #0
   1bdf0:	strh	r1, [r0, #18]
   1bdf4:	mov	r0, #1
   1bdf8:	pop	{fp, pc}
   1bdfc:	push	{fp, lr}
   1be00:	mov	fp, sp
   1be04:	bl	17bb8 <__assert_fail@plt+0x4fc8>
   1be08:	movw	r1, #55050	; 0xd70a
   1be0c:	movt	r1, #15395	; 0x3c23
   1be10:	str	r1, [r0, #28]
   1be14:	mov	r0, #1
   1be18:	pop	{fp, pc}
   1be1c:	mov	r3, r2
   1be20:	mov	r2, r1
   1be24:	mov	r1, r0
   1be28:	movw	r0, #1258	; 0x4ea
   1be2c:	movt	r0, #4
   1be30:	b	1da58 <__assert_fail@plt+0xae68>
   1be34:	push	{fp, lr}
   1be38:	mov	fp, sp
   1be3c:	bl	17bb8 <__assert_fail@plt+0x4fc8>
   1be40:	mov	r1, #0
   1be44:	movw	r3, #18952	; 0x4a08
   1be48:	str	r1, [r0, #16]
   1be4c:	movt	r3, #1
   1be50:	ldr	r1, [r0]
   1be54:	add	r2, pc, #20
   1be58:	cmp	r1, r3
   1be5c:	addeq	r2, r2, #4
   1be60:	ldr	r1, [r2]
   1be64:	str	r1, [r0, #28]
   1be68:	mov	r0, #1
   1be6c:	pop	{fp, pc}
   1be70:	svccc	0x00666666
   1be74:	cdpcc	12, 4, cr12, cr12, cr13, {6}
   1be78:	mov	r3, r2
   1be7c:	mov	r2, r1
   1be80:	mov	r1, r0
   1be84:	movw	r0, #2112	; 0x840
   1be88:	movt	r0, #4
   1be8c:	b	1da58 <__assert_fail@plt+0xae68>
   1be90:	mov	r0, #0
   1be94:	cmp	r1, #0
   1be98:	beq	1bec4 <__assert_fail@plt+0x92d4>
   1be9c:	ldr	r3, [r2]
   1bea0:	ldr	r1, [r1, r3, lsl #2]
   1bea4:	cmp	r1, #0
   1bea8:	bxeq	lr
   1beac:	add	r0, r3, #1
   1beb0:	str	r0, [r2]
   1beb4:	movw	r0, #20108	; 0x4e8c
   1beb8:	movt	r0, #5
   1bebc:	str	r1, [r0, #76]	; 0x4c
   1bec0:	mov	r0, #1
   1bec4:	bx	lr
   1bec8:	push	{fp, lr}
   1becc:	mov	fp, sp
   1bed0:	mov	ip, r0
   1bed4:	mov	r0, #0
   1bed8:	cmp	r1, #0
   1bedc:	beq	1bf04 <__assert_fail@plt+0x9314>
   1bee0:	ldr	r3, [r2]
   1bee4:	ldr	r1, [r1, r3, lsl #2]
   1bee8:	cmp	r1, #0
   1beec:	popeq	{fp, pc}
   1bef0:	add	r0, r3, #1
   1bef4:	str	r0, [r2]
   1bef8:	mov	r0, ip
   1befc:	bl	1e06c <__assert_fail@plt+0xb47c>
   1bf00:	mov	r0, #1
   1bf04:	pop	{fp, pc}
   1bf08:	push	{fp, lr}
   1bf0c:	mov	fp, sp
   1bf10:	movw	r0, #20108	; 0x4e8c
   1bf14:	movw	r1, #45076	; 0xb014
   1bf18:	mov	r2, #1
   1bf1c:	movt	r0, #5
   1bf20:	movt	r1, #1
   1bf24:	str	r1, [r0, #64]	; 0x40
   1bf28:	movw	r1, #34220	; 0x85ac
   1bf2c:	str	r2, [r0, #48]	; 0x30
   1bf30:	movt	r1, #1
   1bf34:	str	r1, [r0, #52]	; 0x34
   1bf38:	strb	r2, [r0, #12]
   1bf3c:	ldrb	r1, [r0, #44]	; 0x2c
   1bf40:	tst	r1, #2
   1bf44:	movwne	r1, #34436	; 0x8684
   1bf48:	movtne	r1, #1
   1bf4c:	strne	r1, [r0, #52]	; 0x34
   1bf50:	movw	r1, #19700	; 0x4cf4
   1bf54:	movt	r1, #5
   1bf58:	ldr	r0, [r1]
   1bf5c:	cmp	r0, #0
   1bf60:	bne	1bf74 <__assert_fail@plt+0x9384>
   1bf64:	movw	r0, #3852	; 0xf0c
   1bf68:	movt	r0, #4
   1bf6c:	add	r0, r0, #1296	; 0x510
   1bf70:	str	r0, [r1]
   1bf74:	bl	17bb8 <__assert_fail@plt+0x4fc8>
   1bf78:	mov	r1, #1065353216	; 0x3f800000
   1bf7c:	str	r1, [r0, #28]
   1bf80:	mov	r1, #0
   1bf84:	strh	r1, [r0, #18]
   1bf88:	mov	r0, #1
   1bf8c:	pop	{fp, pc}
   1bf90:	push	{r4, r5, fp, lr}
   1bf94:	add	fp, sp, #8
   1bf98:	mov	r3, r0
   1bf9c:	mov	r0, #0
   1bfa0:	cmp	r1, #0
   1bfa4:	beq	1bff8 <__assert_fail@plt+0x9408>
   1bfa8:	ldr	r5, [r2]
   1bfac:	ldr	r4, [r1, r5, lsl #2]
   1bfb0:	cmp	r4, #0
   1bfb4:	beq	1bff8 <__assert_fail@plt+0x9408>
   1bfb8:	add	r0, r5, #1
   1bfbc:	mov	r1, r4
   1bfc0:	str	r0, [r2]
   1bfc4:	mov	r0, r3
   1bfc8:	bl	17b58 <__assert_fail@plt+0x4f68>
   1bfcc:	mov	r5, r0
   1bfd0:	add	r1, r0, #40	; 0x28
   1bfd4:	mov	r0, r4
   1bfd8:	bl	1e0b4 <__assert_fail@plt+0xb4c4>
   1bfdc:	mov	r0, #0
   1bfe0:	mov	r1, #1065353216	; 0x3f800000
   1bfe4:	strb	r0, [r5, #19]
   1bfe8:	mov	r0, #1
   1bfec:	strb	r0, [r5, #16]
   1bff0:	strh	r0, [r5, #17]
   1bff4:	str	r1, [r5, #28]
   1bff8:	pop	{r4, r5, fp, pc}
   1bffc:	push	{fp, lr}
   1c000:	mov	fp, sp
   1c004:	mov	ip, r0
   1c008:	mov	r0, #0
   1c00c:	cmp	r1, #0
   1c010:	beq	1c038 <__assert_fail@plt+0x9448>
   1c014:	ldr	r3, [r2]
   1c018:	ldr	r1, [r1, r3, lsl #2]
   1c01c:	cmp	r1, #0
   1c020:	popeq	{fp, pc}
   1c024:	add	r0, r3, #1
   1c028:	str	r0, [r2]
   1c02c:	mov	r0, ip
   1c030:	bl	1e1a0 <__assert_fail@plt+0xb5b0>
   1c034:	mov	r0, #1
   1c038:	pop	{fp, pc}
   1c03c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1c040:	add	fp, sp, #24
   1c044:	sub	sp, sp, #24
   1c048:	ldr	r7, [r2]
   1c04c:	mov	r4, r2
   1c050:	cmp	r1, #0
   1c054:	beq	1c0b4 <__assert_fail@plt+0x94c4>
   1c058:	mov	r5, r0
   1c05c:	ldr	r0, [r1, r7, lsl #2]
   1c060:	cmp	r0, #0
   1c064:	beq	1c0b4 <__assert_fail@plt+0x94c4>
   1c068:	add	r2, r7, #1
   1c06c:	str	r2, [r4]
   1c070:	ldr	r6, [r1, r2, lsl #2]
   1c074:	cmp	r6, #0
   1c078:	beq	1c0b4 <__assert_fail@plt+0x94c4>
   1c07c:	add	r1, r7, #2
   1c080:	add	r8, sp, #4
   1c084:	str	r1, [r4]
   1c088:	mov	r1, r8
   1c08c:	bl	1e0b4 <__assert_fail@plt+0xb4c4>
   1c090:	ldr	r7, [r4]
   1c094:	mov	r0, r8
   1c098:	mov	r1, r5
   1c09c:	mov	r2, r6
   1c0a0:	bl	19644 <__assert_fail@plt+0x6a54>
   1c0a4:	mov	r1, r0
   1c0a8:	mov	r0, #1
   1c0ac:	cmp	r1, #0
   1c0b0:	bne	1c0bc <__assert_fail@plt+0x94cc>
   1c0b4:	mov	r0, #0
   1c0b8:	str	r7, [r4]
   1c0bc:	sub	sp, fp, #24
   1c0c0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1c0c4:	push	{r4, r5, r6, sl, fp, lr}
   1c0c8:	add	fp, sp, #16
   1c0cc:	sub	sp, sp, #104	; 0x68
   1c0d0:	mov	r5, r0
   1c0d4:	mov	r0, #0
   1c0d8:	cmp	r1, #0
   1c0dc:	beq	1c1b0 <__assert_fail@plt+0x95c0>
   1c0e0:	ldr	r3, [r2]
   1c0e4:	ldr	r4, [r1, r3, lsl #2]
   1c0e8:	cmp	r4, #0
   1c0ec:	beq	1c1b0 <__assert_fail@plt+0x95c0>
   1c0f0:	movw	r6, #20108	; 0x4e8c
   1c0f4:	add	r0, r3, #1
   1c0f8:	movt	r6, #5
   1c0fc:	str	r0, [r2]
   1c100:	ldrh	r0, [r6, #68]	; 0x44
   1c104:	cmp	r0, #2
   1c108:	bcc	1c11c <__assert_fail@plt+0x952c>
   1c10c:	mov	r0, r4
   1c110:	bl	1ac7c <__assert_fail@plt+0x808c>
   1c114:	cmp	r0, #0
   1c118:	beq	1c184 <__assert_fail@plt+0x9594>
   1c11c:	mov	r0, r5
   1c120:	mov	r1, r4
   1c124:	bl	17b58 <__assert_fail@plt+0x4f68>
   1c128:	mov	r5, r0
   1c12c:	str	r4, [r0, #40]	; 0x28
   1c130:	movw	r0, #56638	; 0xdd3e
   1c134:	mov	r1, sp
   1c138:	movt	r0, #3
   1c13c:	bl	3d1fc <__assert_fail@plt+0x2a60c>
   1c140:	cmp	r0, #0
   1c144:	beq	1c150 <__assert_fail@plt+0x9560>
   1c148:	vmov.f32	s0, #112	; 0x3f800000  1.0
   1c14c:	b	1c17c <__assert_fail@plt+0x958c>
   1c150:	movw	r1, #56638	; 0xdd3e
   1c154:	mov	r0, sp
   1c158:	movt	r1, #3
   1c15c:	bl	1ab4c <__assert_fail@plt+0x7f5c>
   1c160:	mov	r1, r0
   1c164:	mov	r0, r4
   1c168:	bl	124f4 <strcmp@plt>
   1c16c:	add	r1, pc, #100	; 0x64
   1c170:	cmp	r0, #0
   1c174:	addeq	r1, r1, #4
   1c178:	vldr	s0, [r1]
   1c17c:	vstr	s0, [r5, #28]
   1c180:	b	1c1ac <__assert_fail@plt+0x95bc>
   1c184:	ldrb	r0, [r6, #44]	; 0x2c
   1c188:	tst	r0, #8
   1c18c:	bne	1c1b8 <__assert_fail@plt+0x95c8>
   1c190:	movw	r0, #712	; 0x2c8
   1c194:	movt	r0, #4
   1c198:	bl	1b0e4 <__assert_fail@plt+0x84f4>
   1c19c:	bl	17bb8 <__assert_fail@plt+0x4fc8>
   1c1a0:	mov	r1, #0
   1c1a4:	str	r1, [r0, #28]
   1c1a8:	str	r1, [r0, #16]
   1c1ac:	mov	r0, #1
   1c1b0:	sub	sp, fp, #16
   1c1b4:	pop	{r4, r5, r6, sl, fp, pc}
   1c1b8:	movw	r0, #17768	; 0x4568
   1c1bc:	movw	r1, #2160	; 0x870
   1c1c0:	mov	r2, r4
   1c1c4:	movt	r0, #5
   1c1c8:	movt	r1, #4
   1c1cc:	ldr	r0, [r0]
   1c1d0:	bl	128fc <fprintf@plt>
   1c1d4:	b	1c190 <__assert_fail@plt+0x95a0>
   1c1d8:			; <UNDEFINED> instruction: 0x3e99999a
   1c1dc:	svccc	0x00333333
   1c1e0:	push	{r4, sl, fp, lr}
   1c1e4:	add	fp, sp, #8
   1c1e8:	mov	r4, r2
   1c1ec:	mov	r2, r0
   1c1f0:	mov	r0, r1
   1c1f4:	mov	r1, r4
   1c1f8:	bl	1e1f4 <__assert_fail@plt+0xb604>
   1c1fc:	cmp	r0, #0
   1c200:	beq	1c228 <__assert_fail@plt+0x9638>
   1c204:	add	r1, pc, #48	; 0x30
   1c208:	ldrd	r2, [r0, #48]	; 0x30
   1c20c:	subs	r2, r2, #100	; 0x64
   1c210:	sbcs	r2, r3, #0
   1c214:	addcc	r1, r1, #4
   1c218:	ldr	r1, [r1]
   1c21c:	str	r1, [r0, #28]
   1c220:	mov	r0, #1
   1c224:	pop	{r4, sl, fp, pc}
   1c228:	ldr	r0, [r4]
   1c22c:	sub	r0, r0, #1
   1c230:	str	r0, [r4]
   1c234:	mov	r0, #0
   1c238:	pop	{r4, sl, fp, pc}
   1c23c:	cdpcc	12, 4, cr12, cr12, cr13, {6}
   1c240:	svccc	0x007d70a4
   1c244:	push	{r4, r5, r6, r7, fp, lr}
   1c248:	add	fp, sp, #16
   1c24c:	sub	sp, sp, #8
   1c250:	mov	r5, r0
   1c254:	mov	r0, #0
   1c258:	cmp	r1, #0
   1c25c:	beq	1c308 <__assert_fail@plt+0x9718>
   1c260:	ldr	r3, [r2]
   1c264:	ldr	r4, [r1, r3, lsl #2]
   1c268:	cmp	r4, #0
   1c26c:	beq	1c308 <__assert_fail@plt+0x9718>
   1c270:	add	r0, r3, #1
   1c274:	str	r0, [r2]
   1c278:	mov	r0, r4
   1c27c:	bl	12bd8 <getgrnam@plt>
   1c280:	mov	r6, r0
   1c284:	bl	12488 <endgrent@plt>
   1c288:	cmp	r6, #0
   1c28c:	beq	1c298 <__assert_fail@plt+0x96a8>
   1c290:	ldr	r6, [r6, #8]
   1c294:	b	1c2d8 <__assert_fail@plt+0x96e8>
   1c298:	movw	r1, #2220	; 0x8ac
   1c29c:	mov	r0, r4
   1c2a0:	movt	r1, #4
   1c2a4:	bl	12be4 <strspn@plt>
   1c2a8:	cmp	r0, #0
   1c2ac:	beq	1c310 <__assert_fail@plt+0x9720>
   1c2b0:	mov	r6, r4
   1c2b4:	ldrb	r0, [r6, r0]!
   1c2b8:	cmp	r0, #0
   1c2bc:	bne	1c340 <__assert_fail@plt+0x9750>
   1c2c0:	movw	r0, #20108	; 0x4e8c
   1c2c4:	movt	r0, #5
   1c2c8:	ldr	r1, [r0, #72]	; 0x48
   1c2cc:	mov	r0, r4
   1c2d0:	bl	20c38 <__assert_fail@plt+0xe048>
   1c2d4:	mov	r6, r0
   1c2d8:	mov	r0, r5
   1c2dc:	mov	r1, r4
   1c2e0:	bl	17b58 <__assert_fail@plt+0x4f68>
   1c2e4:	str	r6, [r0, #40]	; 0x28
   1c2e8:	ldrd	r2, [r0, #48]	; 0x30
   1c2ec:	add	r1, pc, #236	; 0xec
   1c2f0:	subs	r2, r2, #100	; 0x64
   1c2f4:	sbcs	r2, r3, #0
   1c2f8:	addcc	r1, r1, #4
   1c2fc:	ldr	r1, [r1]
   1c300:	str	r1, [r0, #28]
   1c304:	mov	r0, #1
   1c308:	sub	sp, fp, #16
   1c30c:	pop	{r4, r5, r6, r7, fp, pc}
   1c310:	ldrb	r0, [r4]
   1c314:	cmp	r0, #0
   1c318:	bne	1c39c <__assert_fail@plt+0x97ac>
   1c31c:	movw	r1, #2396	; 0x95c
   1c320:	mov	r0, #0
   1c324:	mov	r2, #5
   1c328:	movt	r1, #4
   1c32c:	bl	12674 <dcgettext@plt>
   1c330:	mov	r2, r0
   1c334:	mov	r0, #1
   1c338:	mov	r1, #0
   1c33c:	bl	127b8 <error@plt>
   1c340:	movw	r1, #2231	; 0x8b7
   1c344:	mov	r0, #0
   1c348:	mov	r2, #5
   1c34c:	movt	r1, #4
   1c350:	bl	12674 <dcgettext@plt>
   1c354:	movw	r7, #20108	; 0x4e8c
   1c358:	mov	r5, r0
   1c35c:	mov	r0, #0
   1c360:	mov	r2, r4
   1c364:	movt	r7, #5
   1c368:	ldr	r1, [r7, #72]	; 0x48
   1c36c:	bl	294c0 <__assert_fail@plt+0x168d0>
   1c370:	ldr	r1, [r7, #72]	; 0x48
   1c374:	mov	r4, r0
   1c378:	mov	r0, #1
   1c37c:	mov	r2, r6
   1c380:	bl	294c0 <__assert_fail@plt+0x168d0>
   1c384:	str	r0, [sp]
   1c388:	mov	r0, #1
   1c38c:	mov	r1, #0
   1c390:	mov	r2, r5
   1c394:	mov	r3, r4
   1c398:	bl	127b8 <error@plt>
   1c39c:	movw	r1, #2356	; 0x934
   1c3a0:	mov	r0, #0
   1c3a4:	mov	r2, #5
   1c3a8:	movt	r1, #4
   1c3ac:	bl	12674 <dcgettext@plt>
   1c3b0:	mov	r5, r0
   1c3b4:	movw	r0, #20108	; 0x4e8c
   1c3b8:	mov	r2, r4
   1c3bc:	movt	r0, #5
   1c3c0:	ldr	r1, [r0, #72]	; 0x48
   1c3c4:	mov	r0, #0
   1c3c8:	bl	294c0 <__assert_fail@plt+0x168d0>
   1c3cc:	mov	r3, r0
   1c3d0:	mov	r0, #1
   1c3d4:	mov	r1, #0
   1c3d8:	mov	r2, r5
   1c3dc:	bl	127b8 <error@plt>
   1c3e0:	cdpcc	12, 4, cr12, cr12, cr13, {6}
   1c3e4:	svccc	0x007d70a4
   1c3e8:	push	{fp, lr}
   1c3ec:	mov	fp, sp
   1c3f0:	movw	r0, #20108	; 0x4e8c
   1c3f4:	mov	r1, #1
   1c3f8:	movt	r0, #5
   1c3fc:	strb	r1, [r0, #14]
   1c400:	movw	r1, #19700	; 0x4cf4
   1c404:	movt	r1, #5
   1c408:	ldr	r0, [r1]
   1c40c:	cmp	r0, #0
   1c410:	bne	1c424 <__assert_fail@plt+0x9834>
   1c414:	movw	r0, #3852	; 0xf0c
   1c418:	movt	r0, #4
   1c41c:	add	r0, r0, #1296	; 0x510
   1c420:	str	r0, [r1]
   1c424:	bl	17bb8 <__assert_fail@plt+0x4fc8>
   1c428:	mov	r1, #1065353216	; 0x3f800000
   1c42c:	str	r1, [r0, #28]
   1c430:	mov	r1, #0
   1c434:	strh	r1, [r0, #18]
   1c438:	mov	r0, #1
   1c43c:	pop	{fp, pc}
   1c440:	push	{r4, r5, fp, lr}
   1c444:	add	fp, sp, #8
   1c448:	mov	r3, r0
   1c44c:	mov	r0, #0
   1c450:	cmp	r1, #0
   1c454:	beq	1c4ac <__assert_fail@plt+0x98bc>
   1c458:	ldr	r5, [r2]
   1c45c:	ldr	r4, [r1, r5, lsl #2]
   1c460:	cmp	r4, #0
   1c464:	beq	1c4ac <__assert_fail@plt+0x98bc>
   1c468:	add	r0, r5, #1
   1c46c:	mov	r1, r4
   1c470:	str	r0, [r2]
   1c474:	mov	r0, r3
   1c478:	bl	17b58 <__assert_fail@plt+0x4f68>
   1c47c:	movw	r1, #2452	; 0x994
   1c480:	mov	r5, r0
   1c484:	str	r4, [r0, #40]	; 0x28
   1c488:	mov	r0, r4
   1c48c:	movt	r1, #4
   1c490:	bl	12b0c <strpbrk@plt>
   1c494:	add	r1, pc, #20
   1c498:	cmp	r0, #0
   1c49c:	addeq	r1, r1, #4
   1c4a0:	ldr	r0, [r1]
   1c4a4:	str	r0, [r5, #28]
   1c4a8:	mov	r0, #1
   1c4ac:	pop	{r4, r5, fp, pc}
   1c4b0:	stccc	7, cr13, [r3, #44]!	; 0x2c
   1c4b4:	stccc	7, cr13, [r3], #-44	; 0xffffffd4
   1c4b8:	push	{r4, r5, r6, sl, fp, lr}
   1c4bc:	add	fp, sp, #16
   1c4c0:	mov	r6, r2
   1c4c4:	mov	r4, r1
   1c4c8:	mov	r5, r0
   1c4cc:	bl	1e418 <__assert_fail@plt+0xb828>
   1c4d0:	mov	r0, #0
   1c4d4:	cmp	r4, #0
   1c4d8:	beq	1c550 <__assert_fail@plt+0x9960>
   1c4dc:	ldr	r1, [r6]
   1c4e0:	ldr	r4, [r4, r1, lsl #2]
   1c4e4:	cmp	r4, #0
   1c4e8:	beq	1c550 <__assert_fail@plt+0x9960>
   1c4ec:	add	r0, r1, #1
   1c4f0:	movw	r1, #2463	; 0x99f
   1c4f4:	mov	r2, r4
   1c4f8:	str	r0, [r6]
   1c4fc:	movw	r0, #2456	; 0x998
   1c500:	movt	r1, #4
   1c504:	movt	r0, #4
   1c508:	bl	1e4c0 <__assert_fail@plt+0xb8d0>
   1c50c:	mov	r0, r5
   1c510:	mov	r1, r4
   1c514:	bl	17b58 <__assert_fail@plt+0x4f68>
   1c518:	movw	r1, #2452	; 0x994
   1c51c:	mov	r5, r0
   1c520:	str	r4, [r0, #40]	; 0x28
   1c524:	mov	r0, #0
   1c528:	movt	r1, #4
   1c52c:	strh	r0, [r5, #18]
   1c530:	mov	r0, r4
   1c534:	bl	12b0c <strpbrk@plt>
   1c538:	add	r1, pc, #20
   1c53c:	cmp	r0, #0
   1c540:	addeq	r1, r1, #4
   1c544:	ldr	r0, [r1]
   1c548:	str	r0, [r5, #28]
   1c54c:	mov	r0, #1
   1c550:	pop	{r4, r5, r6, sl, fp, pc}
   1c554:	svccc	0x004ccccd
   1c558:	stclcc	12, cr12, [ip, #820]	; 0x334
   1c55c:	push	{r4, sl, fp, lr}
   1c560:	add	fp, sp, #8
   1c564:	mov	r4, r2
   1c568:	mov	r2, r0
   1c56c:	mov	r0, r1
   1c570:	mov	r1, r4
   1c574:	bl	1e1f4 <__assert_fail@plt+0xb604>
   1c578:	cmp	r0, #0
   1c57c:	beq	1c5a4 <__assert_fail@plt+0x99b4>
   1c580:	movw	r2, #14269	; 0x37bd
   1c584:	mov	r1, r0
   1c588:	mov	r0, #1
   1c58c:	movt	r2, #13702	; 0x3586
   1c590:	strb	r0, [r1, #20]
   1c594:	str	r2, [r1, #28]
   1c598:	mov	r2, #0
   1c59c:	strh	r2, [r1, #18]
   1c5a0:	pop	{r4, sl, fp, pc}
   1c5a4:	ldr	r0, [r4]
   1c5a8:	sub	r0, r0, #1
   1c5ac:	str	r0, [r4]
   1c5b0:	mov	r0, #0
   1c5b4:	pop	{r4, sl, fp, pc}
   1c5b8:	push	{fp, lr}
   1c5bc:	mov	fp, sp
   1c5c0:	sub	sp, sp, #8
   1c5c4:	movw	r3, #17688	; 0x4518
   1c5c8:	movt	r3, #1
   1c5cc:	str	r3, [sp]
   1c5d0:	movw	r3, #554	; 0x22a
   1c5d4:	movt	r3, #4
   1c5d8:	bl	1e574 <__assert_fail@plt+0xb984>
   1c5dc:	mov	sp, fp
   1c5e0:	pop	{fp, pc}
   1c5e4:	mov	ip, r2
   1c5e8:	mov	r2, r0
   1c5ec:	movw	r0, #20108	; 0x4e8c
   1c5f0:	movt	r0, #5
   1c5f4:	ldr	r0, [r0, #60]	; 0x3c
   1c5f8:	orr	r3, r0, #4194304	; 0x400000
   1c5fc:	mov	r0, r1
   1c600:	mov	r1, ip
   1c604:	b	1e6ac <__assert_fail@plt+0xbabc>
   1c608:	push	{fp, lr}
   1c60c:	mov	fp, sp
   1c610:	sub	sp, sp, #8
   1c614:	movw	r3, #17688	; 0x4518
   1c618:	movt	r3, #1
   1c61c:	str	r3, [sp]
   1c620:	movw	r3, #2464	; 0x9a0
   1c624:	movt	r3, #4
   1c628:	bl	1e574 <__assert_fail@plt+0xb984>
   1c62c:	mov	sp, fp
   1c630:	pop	{fp, pc}
   1c634:	push	{r4, sl, fp, lr}
   1c638:	add	fp, sp, #8
   1c63c:	mov	r4, r2
   1c640:	mov	r2, r0
   1c644:	mov	r0, r1
   1c648:	mov	r1, r4
   1c64c:	bl	1e1f4 <__assert_fail@plt+0xb604>
   1c650:	cmp	r0, #0
   1c654:	beq	1c678 <__assert_fail@plt+0x9a88>
   1c658:	ldr	r2, [r0, #48]	; 0x30
   1c65c:	ldr	r1, [r0, #52]	; 0x34
   1c660:	eor	r3, r2, #1
   1c664:	orrs	r3, r3, r1
   1c668:	bne	1c68c <__assert_fail@plt+0x9a9c>
   1c66c:	movw	r1, #28836	; 0x70a4
   1c670:	movt	r1, #16253	; 0x3f7d
   1c674:	b	1c6ac <__assert_fail@plt+0x9abc>
   1c678:	ldr	r0, [r4]
   1c67c:	sub	r0, r0, #1
   1c680:	str	r0, [r4]
   1c684:	mov	r0, #0
   1c688:	pop	{r4, sl, fp, pc}
   1c68c:	eor	r2, r2, #2
   1c690:	orrs	r1, r2, r1
   1c694:	bne	1c6a4 <__assert_fail@plt+0x9ab4>
   1c698:	movw	r1, #55050	; 0xd70a
   1c69c:	movt	r1, #15395	; 0x3c23
   1c6a0:	b	1c6ac <__assert_fail@plt+0x9abc>
   1c6a4:	movw	r1, #4719	; 0x126f
   1c6a8:	movt	r1, #14979	; 0x3a83
   1c6ac:	str	r1, [r0, #28]
   1c6b0:	mov	r0, #1
   1c6b4:	pop	{r4, sl, fp, pc}
   1c6b8:	push	{r4, r5, r6, sl, fp, lr}
   1c6bc:	add	fp, sp, #16
   1c6c0:	mov	r5, r2
   1c6c4:	mov	r6, r1
   1c6c8:	mov	r4, r0
   1c6cc:	bl	1e418 <__assert_fail@plt+0xb828>
   1c6d0:	mov	r0, #0
   1c6d4:	cmp	r6, #0
   1c6d8:	beq	1c730 <__assert_fail@plt+0x9b40>
   1c6dc:	ldr	r1, [r5]
   1c6e0:	ldr	r6, [r6, r1, lsl #2]
   1c6e4:	cmp	r6, #0
   1c6e8:	beq	1c730 <__assert_fail@plt+0x9b40>
   1c6ec:	add	r0, r1, #1
   1c6f0:	mov	r1, r6
   1c6f4:	str	r0, [r5]
   1c6f8:	mov	r0, r4
   1c6fc:	bl	17b58 <__assert_fail@plt+0x4f68>
   1c700:	movw	r1, #2452	; 0x994
   1c704:	mov	r4, r0
   1c708:	str	r6, [r0, #40]	; 0x28
   1c70c:	mov	r0, r6
   1c710:	movt	r1, #4
   1c714:	bl	12b0c <strpbrk@plt>
   1c718:	add	r1, pc, #20
   1c71c:	cmp	r0, #0
   1c720:	addeq	r1, r1, #4
   1c724:	ldr	r0, [r1]
   1c728:	str	r0, [r4, #28]
   1c72c:	mov	r0, #1
   1c730:	pop	{r4, r5, r6, sl, fp, pc}
   1c734:	stccc	7, cr13, [r3, #44]!	; 0x2c
   1c738:	stccc	7, cr13, [r3], #-44	; 0xffffffd4
   1c73c:	push	{r4, sl, fp, lr}
   1c740:	add	fp, sp, #8
   1c744:	bl	17bb8 <__assert_fail@plt+0x4fc8>
   1c748:	mov	r4, r0
   1c74c:	add	r1, r0, #40	; 0x28
   1c750:	movw	r0, #2148	; 0x864
   1c754:	movt	r0, #4
   1c758:	bl	1e0b4 <__assert_fail@plt+0xb4c4>
   1c75c:	mov	r0, #1065353216	; 0x3f800000
   1c760:	str	r0, [r4, #28]
   1c764:	movw	r0, #257	; 0x101
   1c768:	strh	r0, [r4, #16]
   1c76c:	mov	r0, #1
   1c770:	pop	{r4, sl, fp, pc}
   1c774:	mov	r0, r1
   1c778:	movw	r1, #20108	; 0x4e8c
   1c77c:	mov	r3, r2
   1c780:	movt	r1, #5
   1c784:	add	r2, r1, #4
   1c788:	mov	r1, r3
   1c78c:	b	1e7a8 <__assert_fail@plt+0xbbb8>
   1c790:	mov	r0, r1
   1c794:	movw	r1, #20108	; 0x4e8c
   1c798:	mov	r3, r2
   1c79c:	movt	r1, #5
   1c7a0:	add	r2, r1, #8
   1c7a4:	mov	r1, r3
   1c7a8:	b	1e7a8 <__assert_fail@plt+0xbbb8>
   1c7ac:	mov	r3, #3
   1c7b0:	b	1d770 <__assert_fail@plt+0xab80>
   1c7b4:	push	{fp, lr}
   1c7b8:	mov	fp, sp
   1c7bc:	movw	r0, #20108	; 0x4e8c
   1c7c0:	mov	r1, #1
   1c7c4:	movt	r0, #5
   1c7c8:	strb	r1, [r0, #13]
   1c7cc:	movw	r1, #19700	; 0x4cf4
   1c7d0:	movt	r1, #5
   1c7d4:	ldr	r0, [r1]
   1c7d8:	cmp	r0, #0
   1c7dc:	bne	1c7f0 <__assert_fail@plt+0x9c00>
   1c7e0:	movw	r0, #3852	; 0xf0c
   1c7e4:	movt	r0, #4
   1c7e8:	add	r0, r0, #1296	; 0x510
   1c7ec:	str	r0, [r1]
   1c7f0:	bl	17bb8 <__assert_fail@plt+0x4fc8>
   1c7f4:	mov	r1, #1065353216	; 0x3f800000
   1c7f8:	str	r1, [r0, #28]
   1c7fc:	mov	r1, #0
   1c800:	strh	r1, [r0, #18]
   1c804:	mov	r0, #1
   1c808:	pop	{fp, pc}
   1c80c:	push	{r4, r5, fp, lr}
   1c810:	add	fp, sp, #8
   1c814:	mov	r5, r0
   1c818:	mov	r0, #0
   1c81c:	cmp	r1, #0
   1c820:	beq	1c89c <__assert_fail@plt+0x9cac>
   1c824:	ldr	r3, [r2]
   1c828:	ldr	r4, [r1, r3, lsl #2]
   1c82c:	cmp	r4, #0
   1c830:	beq	1c89c <__assert_fail@plt+0x9cac>
   1c834:	add	r0, r3, #1
   1c838:	str	r0, [r2]
   1c83c:	bl	1e418 <__assert_fail@plt+0xb828>
   1c840:	movw	r0, #2889	; 0xb49
   1c844:	movw	r1, #2895	; 0xb4f
   1c848:	mov	r2, r4
   1c84c:	movt	r0, #4
   1c850:	movt	r1, #4
   1c854:	bl	1e4c0 <__assert_fail@plt+0xb8d0>
   1c858:	mov	r0, r5
   1c85c:	mov	r1, r4
   1c860:	bl	17b58 <__assert_fail@plt+0x4f68>
   1c864:	movw	r1, #2452	; 0x994
   1c868:	mov	r5, r0
   1c86c:	str	r4, [r0, #40]	; 0x28
   1c870:	mov	r0, #0
   1c874:	movt	r1, #4
   1c878:	strh	r0, [r5, #18]
   1c87c:	mov	r0, r4
   1c880:	bl	12b0c <strpbrk@plt>
   1c884:	add	r1, pc, #20
   1c888:	cmp	r0, #0
   1c88c:	addeq	r1, r1, #4
   1c890:	ldr	r0, [r1]
   1c894:	str	r0, [r5, #28]
   1c898:	mov	r0, #1
   1c89c:	pop	{r4, r5, fp, pc}
   1c8a0:	svccc	0x004ccccd
   1c8a4:	stclcc	12, cr12, [ip, #820]	; 0x334
   1c8a8:	push	{r4, r5, r6, r7, fp, lr}
   1c8ac:	add	fp, sp, #16
   1c8b0:	sub	sp, sp, #112	; 0x70
   1c8b4:	add	r7, sp, #8
   1c8b8:	mov	r4, r0
   1c8bc:	mov	r5, r2
   1c8c0:	mov	r6, r1
   1c8c4:	mov	r0, r7
   1c8c8:	bl	17e44 <__assert_fail@plt+0x5254>
   1c8cc:	add	r3, sp, #4
   1c8d0:	mov	r0, r6
   1c8d4:	mov	r1, r5
   1c8d8:	mov	r2, r7
   1c8dc:	bl	1d9e8 <__assert_fail@plt+0xadf8>
   1c8e0:	mov	r1, r0
   1c8e4:	mov	r0, #0
   1c8e8:	cmp	r1, #0
   1c8ec:	beq	1c964 <__assert_fail@plt+0x9d74>
   1c8f0:	ldr	r1, [sp, #4]
   1c8f4:	mov	r0, r4
   1c8f8:	bl	17b58 <__assert_fail@plt+0x4f68>
   1c8fc:	ldr	r1, [sp, #88]	; 0x58
   1c900:	ldr	r2, [sp, #92]	; 0x5c
   1c904:	mov	r3, #3
   1c908:	mov	r7, #0
   1c90c:	vldr	s0, [pc, #96]	; 1c974 <__assert_fail@plt+0x9d84>
   1c910:	str	r3, [r0, #40]	; 0x28
   1c914:	str	r7, [r0, #44]	; 0x2c
   1c918:	movw	r3, #10111	; 0x277f
   1c91c:	movt	r3, #133	; 0x85
   1c920:	str	r1, [r0, #48]	; 0x30
   1c924:	movw	r1, #20108	; 0x4e8c
   1c928:	str	r2, [r0, #52]	; 0x34
   1c92c:	movt	r1, #5
   1c930:	ldr	r2, [sp, #88]	; 0x58
   1c934:	ldr	r1, [r1, #28]
   1c938:	sub	r1, r1, r2
   1c93c:	add	r2, pc, #40	; 0x28
   1c940:	cmp	r1, r3
   1c944:	addgt	r2, r2, #4
   1c948:	vldr	s2, [r2]
   1c94c:	movw	r2, #20864	; 0x5180
   1c950:	movt	r2, #1
   1c954:	cmp	r1, r2
   1c958:	vselge.f32	s0, s2, s0
   1c95c:	vstr	s0, [r0, #28]
   1c960:	mov	r0, #1
   1c964:	sub	sp, fp, #16
   1c968:	pop	{r4, r5, r6, r7, fp, pc}
   1c96c:	mcrcc	14, 6, sl, cr7, cr4, {0}
   1c970:			; <UNDEFINED> instruction: 0x3e99999a
   1c974:	stccc	7, cr13, [r3], #-40	; 0xffffffd8
   1c978:	push	{fp, lr}
   1c97c:	mov	fp, sp
   1c980:	movw	r0, #20108	; 0x4e8c
   1c984:	mov	r1, #1
   1c988:	movt	r0, #5
   1c98c:	strb	r1, [r0, #12]
   1c990:	movw	r1, #19700	; 0x4cf4
   1c994:	movt	r1, #5
   1c998:	ldr	r0, [r1]
   1c99c:	cmp	r0, #0
   1c9a0:	bne	1c9b4 <__assert_fail@plt+0x9dc4>
   1c9a4:	movw	r0, #3852	; 0xf0c
   1c9a8:	movt	r0, #4
   1c9ac:	add	r0, r0, #1296	; 0x510
   1c9b0:	str	r0, [r1]
   1c9b4:	bl	17bb8 <__assert_fail@plt+0x4fc8>
   1c9b8:	mov	r1, #1065353216	; 0x3f800000
   1c9bc:	str	r1, [r0, #28]
   1c9c0:	mov	r1, #0
   1c9c4:	strh	r1, [r0, #18]
   1c9c8:	mov	r0, #1
   1c9cc:	pop	{fp, pc}
   1c9d0:	push	{fp, lr}
   1c9d4:	mov	fp, sp
   1c9d8:	mov	r1, #0
   1c9dc:	bl	17b58 <__assert_fail@plt+0x4f68>
   1c9e0:	movw	r1, #46871	; 0xb717
   1c9e4:	movt	r1, #14545	; 0x38d1
   1c9e8:	str	r1, [r0, #28]
   1c9ec:	mov	r0, #1
   1c9f0:	pop	{fp, pc}
   1c9f4:	push	{fp, lr}
   1c9f8:	mov	fp, sp
   1c9fc:	bl	17bb8 <__assert_fail@plt+0x4fc8>
   1ca00:	movw	r1, #4719	; 0x126f
   1ca04:	movt	r1, #14979	; 0x3a83
   1ca08:	str	r1, [r0, #28]
   1ca0c:	mov	r0, #1
   1ca10:	pop	{fp, pc}
   1ca14:	push	{r4, sl, fp, lr}
   1ca18:	add	fp, sp, #8
   1ca1c:	movw	r0, #20108	; 0x4e8c
   1ca20:	movw	r1, #19700	; 0x4cf4
   1ca24:	mov	r4, #0
   1ca28:	movt	r0, #5
   1ca2c:	movt	r1, #5
   1ca30:	strb	r4, [r0, #14]
   1ca34:	ldr	r0, [r1]
   1ca38:	cmp	r0, #0
   1ca3c:	bne	1ca50 <__assert_fail@plt+0x9e60>
   1ca40:	movw	r0, #3852	; 0xf0c
   1ca44:	movt	r0, #4
   1ca48:	add	r0, r0, #1296	; 0x510
   1ca4c:	str	r0, [r1]
   1ca50:	bl	17bb8 <__assert_fail@plt+0x4fc8>
   1ca54:	mov	r1, #1065353216	; 0x3f800000
   1ca58:	str	r1, [r0, #28]
   1ca5c:	strh	r4, [r0, #18]
   1ca60:	mov	r0, #1
   1ca64:	pop	{r4, sl, fp, pc}
   1ca68:	push	{r4, sl, fp, lr}
   1ca6c:	add	fp, sp, #8
   1ca70:	movw	r0, #20108	; 0x4e8c
   1ca74:	movw	r1, #19700	; 0x4cf4
   1ca78:	mov	r4, #0
   1ca7c:	movt	r0, #5
   1ca80:	movt	r1, #5
   1ca84:	strb	r4, [r0, #16]
   1ca88:	ldr	r0, [r1]
   1ca8c:	cmp	r0, #0
   1ca90:	bne	1caa4 <__assert_fail@plt+0x9eb4>
   1ca94:	movw	r0, #3852	; 0xf0c
   1ca98:	movt	r0, #4
   1ca9c:	add	r0, r0, #1296	; 0x510
   1caa0:	str	r0, [r1]
   1caa4:	bl	17bb8 <__assert_fail@plt+0x4fc8>
   1caa8:	mov	r1, #1065353216	; 0x3f800000
   1caac:	str	r1, [r0, #28]
   1cab0:	strh	r4, [r0, #18]
   1cab4:	mov	r0, #1
   1cab8:	pop	{r4, sl, fp, pc}
   1cabc:	push	{fp, lr}
   1cac0:	mov	fp, sp
   1cac4:	movw	r0, #20108	; 0x4e8c
   1cac8:	mov	r1, #1
   1cacc:	movt	r0, #5
   1cad0:	strb	r1, [r0, #16]
   1cad4:	movw	r1, #19700	; 0x4cf4
   1cad8:	movt	r1, #5
   1cadc:	ldr	r0, [r1]
   1cae0:	cmp	r0, #0
   1cae4:	bne	1caf8 <__assert_fail@plt+0x9f08>
   1cae8:	movw	r0, #3852	; 0xf0c
   1caec:	movt	r0, #4
   1caf0:	add	r0, r0, #1296	; 0x510
   1caf4:	str	r0, [r1]
   1caf8:	bl	17bb8 <__assert_fail@plt+0x4fc8>
   1cafc:	mov	r1, #1065353216	; 0x3f800000
   1cb00:	str	r1, [r0, #28]
   1cb04:	mov	r1, #0
   1cb08:	strh	r1, [r0, #18]
   1cb0c:	mov	r0, #1
   1cb10:	pop	{fp, pc}
   1cb14:	push	{fp, lr}
   1cb18:	mov	fp, sp
   1cb1c:	bl	17594 <__assert_fail@plt+0x49a4>
   1cb20:	mov	r2, #3
   1cb24:	mov	r1, #2
   1cb28:	str	r2, [r0, #8]
   1cb2c:	str	r1, [r0, #12]
   1cb30:	movw	r1, #18712	; 0x4918
   1cb34:	movt	r1, #1
   1cb38:	str	r1, [r0]
   1cb3c:	mov	r1, #0
   1cb40:	strh	r1, [r0, #18]
   1cb44:	mov	r0, #1
   1cb48:	pop	{fp, pc}
   1cb4c:	mov	r3, r2
   1cb50:	mov	r2, r1
   1cb54:	mov	r1, r0
   1cb58:	movw	r0, #56512	; 0xdcc0
   1cb5c:	movt	r0, #3
   1cb60:	b	1da58 <__assert_fail@plt+0xae68>
   1cb64:	mov	r3, r2
   1cb68:	mov	r2, r1
   1cb6c:	mov	r1, r0
   1cb70:	movw	r0, #54132	; 0xd374
   1cb74:	movt	r0, #3
   1cb78:	b	1da58 <__assert_fail@plt+0xae68>
   1cb7c:	push	{fp, lr}
   1cb80:	mov	fp, sp
   1cb84:	sub	sp, sp, #8
   1cb88:	movw	r3, #18792	; 0x4968
   1cb8c:	movt	r3, #1
   1cb90:	str	r3, [sp]
   1cb94:	movw	r3, #555	; 0x22b
   1cb98:	movt	r3, #4
   1cb9c:	bl	1e574 <__assert_fail@plt+0xb984>
   1cba0:	mov	sp, fp
   1cba4:	pop	{fp, pc}
   1cba8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1cbac:	add	fp, sp, #28
   1cbb0:	sub	sp, sp, #4
   1cbb4:	vpush	{d8}
   1cbb8:	sub	sp, sp, #8
   1cbbc:	mov	r6, #0
   1cbc0:	cmp	r1, #0
   1cbc4:	beq	1ccf8 <__assert_fail@plt+0xa108>
   1cbc8:	mov	r8, r0
   1cbcc:	ldr	r0, [r2]
   1cbd0:	ldr	r4, [r1, r0, lsl #2]
   1cbd4:	cmp	r4, #0
   1cbd8:	beq	1ccf8 <__assert_fail@plt+0xa108>
   1cbdc:	add	r0, r0, #1
   1cbe0:	str	r0, [r2]
   1cbe4:	ldrb	r0, [r4]
   1cbe8:	cmp	r0, #45	; 0x2d
   1cbec:	beq	1cc08 <__assert_fail@plt+0xa018>
   1cbf0:	cmp	r0, #47	; 0x2f
   1cbf4:	bne	1cc18 <__assert_fail@plt+0xa028>
   1cbf8:	vldr	s16, [pc, #340]	; 1cd54 <__assert_fail@plt+0xa164>
   1cbfc:	mov	r0, #1
   1cc00:	mov	sl, #1
   1cc04:	b	1cc24 <__assert_fail@plt+0xa034>
   1cc08:	vldr	s16, [pc, #320]	; 1cd50 <__assert_fail@plt+0xa160>
   1cc0c:	mov	sl, #0
   1cc10:	mov	r0, #1
   1cc14:	b	1cc24 <__assert_fail@plt+0xa034>
   1cc18:	vldr	s16, [pc, #312]	; 1cd58 <__assert_fail@plt+0xa168>
   1cc1c:	mov	sl, #2
   1cc20:	mov	r0, #0
   1cc24:	add	r0, r4, r0
   1cc28:	bl	244cc <__assert_fail@plt+0x118dc>
   1cc2c:	cmp	r0, #0
   1cc30:	beq	1cd0c <__assert_fail@plt+0xa11c>
   1cc34:	mov	r7, r0
   1cc38:	ldrb	r0, [r4]
   1cc3c:	cmp	r0, #43	; 0x2b
   1cc40:	bne	1cc54 <__assert_fail@plt+0xa064>
   1cc44:	ldrb	r0, [r4, #1]
   1cc48:	and	r0, r0, #248	; 0xf8
   1cc4c:	cmp	r0, #48	; 0x30
   1cc50:	beq	1cd0c <__assert_fail@plt+0xa11c>
   1cc54:	mov	r5, #0
   1cc58:	mov	r0, #0
   1cc5c:	mov	r1, #0
   1cc60:	mov	r2, #0
   1cc64:	mov	r3, r7
   1cc68:	str	r5, [sp]
   1cc6c:	bl	2486c <__assert_fail@plt+0x11c7c>
   1cc70:	mov	r9, r0
   1cc74:	mov	r0, #0
   1cc78:	mov	r1, #1
   1cc7c:	mov	r2, #0
   1cc80:	mov	r3, r7
   1cc84:	str	r5, [sp]
   1cc88:	mov	r6, #1
   1cc8c:	bl	2486c <__assert_fail@plt+0x11c7c>
   1cc90:	mov	r5, r0
   1cc94:	mov	r0, r7
   1cc98:	bl	2bcbc <__assert_fail@plt+0x190cc>
   1cc9c:	orrs	r0, r5, r9
   1cca0:	ldrbeq	r0, [r4]
   1cca4:	cmpeq	r0, #47	; 0x2f
   1cca8:	bne	1ccdc <__assert_fail@plt+0xa0ec>
   1ccac:	movw	r1, #2922	; 0xb6a
   1ccb0:	mov	r0, #0
   1ccb4:	mov	r2, #5
   1ccb8:	mov	sl, #0
   1ccbc:	movt	r1, #4
   1ccc0:	bl	12674 <dcgettext@plt>
   1ccc4:	mov	r2, r0
   1ccc8:	mov	r0, #0
   1cccc:	mov	r1, #0
   1ccd0:	mov	r3, r4
   1ccd4:	bl	127b8 <error@plt>
   1ccd8:	vldr	s16, [pc, #124]	; 1cd5c <__assert_fail@plt+0xa16c>
   1ccdc:	mov	r0, r8
   1cce0:	mov	r1, r4
   1cce4:	bl	17b58 <__assert_fail@plt+0x4f68>
   1cce8:	str	sl, [r0, #40]	; 0x28
   1ccec:	str	r9, [r0, #44]	; 0x2c
   1ccf0:	str	r5, [r0, #48]	; 0x30
   1ccf4:	vstr	s16, [r0, #28]
   1ccf8:	mov	r0, r6
   1ccfc:	sub	sp, fp, #40	; 0x28
   1cd00:	vpop	{d8}
   1cd04:	add	sp, sp, #4
   1cd08:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1cd0c:	movw	r1, #2906	; 0xb5a
   1cd10:	mov	r0, #0
   1cd14:	mov	r2, #5
   1cd18:	movt	r1, #4
   1cd1c:	bl	12674 <dcgettext@plt>
   1cd20:	mov	r5, r0
   1cd24:	movw	r0, #20108	; 0x4e8c
   1cd28:	mov	r2, r4
   1cd2c:	movt	r0, #5
   1cd30:	ldr	r1, [r0, #72]	; 0x48
   1cd34:	mov	r0, #0
   1cd38:	bl	294c0 <__assert_fail@plt+0x168d0>
   1cd3c:	mov	r3, r0
   1cd40:	mov	r0, #1
   1cd44:	mov	r1, #0
   1cd48:	mov	r2, r5
   1cd4c:	bl	127b8 <error@plt>
   1cd50:	cdpcc	12, 4, cr12, cr12, cr13, {6}
   1cd54:			; <UNDEFINED> instruction: 0x3e99999a
   1cd58:	stccc	7, cr13, [r3], #-40	; 0xffffffd8
   1cd5c:	svccc	0x007fa440
   1cd60:	push	{r4, r5, fp, lr}
   1cd64:	add	fp, sp, #8
   1cd68:	mov	r1, #0
   1cd6c:	mov	r5, #0
   1cd70:	bl	17b58 <__assert_fail@plt+0x4f68>
   1cd74:	mov	r4, r0
   1cd78:	add	r1, r0, #40	; 0x28
   1cd7c:	movw	r0, #2148	; 0x864
   1cd80:	movt	r0, #4
   1cd84:	bl	1e0b4 <__assert_fail@plt+0xb4c4>
   1cd88:	mov	r0, #1
   1cd8c:	strb	r5, [r4, #19]
   1cd90:	strb	r0, [r4, #16]
   1cd94:	strh	r0, [r4, #17]
   1cd98:	mov	r0, #1065353216	; 0x3f800000
   1cd9c:	str	r0, [r4, #28]
   1cda0:	mov	r0, #1
   1cda4:	pop	{r4, r5, fp, pc}
   1cda8:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1cdac:	add	fp, sp, #24
   1cdb0:	sub	sp, sp, #24
   1cdb4:	mov	r5, r0
   1cdb8:	mov	r0, #0
   1cdbc:	cmp	r1, #0
   1cdc0:	beq	1ce18 <__assert_fail@plt+0xa228>
   1cdc4:	ldr	r7, [r2]
   1cdc8:	mov	r4, r2
   1cdcc:	ldr	r6, [r1, r7, lsl #2]
   1cdd0:	cmp	r6, #0
   1cdd4:	beq	1ce18 <__assert_fail@plt+0xa228>
   1cdd8:	add	r0, r7, #1
   1cddc:	add	r8, sp, #4
   1cde0:	str	r0, [r4]
   1cde4:	movw	r0, #2148	; 0x864
   1cde8:	mov	r1, r8
   1cdec:	movt	r0, #4
   1cdf0:	bl	1e0b4 <__assert_fail@plt+0xb4c4>
   1cdf4:	mov	r0, r8
   1cdf8:	mov	r1, r5
   1cdfc:	mov	r2, r6
   1ce00:	bl	19644 <__assert_fail@plt+0x6a54>
   1ce04:	mov	r1, r0
   1ce08:	mov	r0, #1
   1ce0c:	cmp	r1, #0
   1ce10:	moveq	r0, #0
   1ce14:	streq	r7, [r4]
   1ce18:	sub	sp, fp, #24
   1ce1c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1ce20:	push	{fp, lr}
   1ce24:	mov	fp, sp
   1ce28:	bl	17bb8 <__assert_fail@plt+0x4fc8>
   1ce2c:	movw	r1, #20108	; 0x4e8c
   1ce30:	movt	r1, #5
   1ce34:	ldrb	r1, [r1]
   1ce38:	cmp	r1, #0
   1ce3c:	moveq	r1, #0
   1ce40:	strheq	r1, [r0, #18]
   1ce44:	mov	r1, #1
   1ce48:	strh	r1, [r0, #16]
   1ce4c:	mov	r0, #1
   1ce50:	pop	{fp, pc}
   1ce54:	push	{fp, lr}
   1ce58:	mov	fp, sp
   1ce5c:	bl	17bb8 <__assert_fail@plt+0x4fc8>
   1ce60:	mov	r1, #1065353216	; 0x3f800000
   1ce64:	str	r1, [r0, #28]
   1ce68:	mov	r1, #1
   1ce6c:	str	r1, [r0, #16]
   1ce70:	mov	r0, #1
   1ce74:	pop	{fp, pc}
   1ce78:	mov	ip, r2
   1ce7c:	mov	r2, r0
   1ce80:	movw	r0, #20108	; 0x4e8c
   1ce84:	movt	r0, #5
   1ce88:	ldr	r3, [r0, #60]	; 0x3c
   1ce8c:	mov	r0, r1
   1ce90:	mov	r1, ip
   1ce94:	b	1e6ac <__assert_fail@plt+0xbabc>
   1ce98:	push	{fp, lr}
   1ce9c:	mov	fp, sp
   1cea0:	mov	r0, #0
   1cea4:	cmp	r1, #0
   1cea8:	beq	1cf14 <__assert_fail@plt+0xa324>
   1ceac:	ldr	r3, [r2]
   1ceb0:	ldr	r1, [r1, r3, lsl #2]
   1ceb4:	cmp	r1, #0
   1ceb8:	popeq	{fp, pc}
   1cebc:	add	r0, r3, #1
   1cec0:	str	r0, [r2]
   1cec4:	mov	r0, r1
   1cec8:	bl	20a50 <__assert_fail@plt+0xde60>
   1cecc:	movw	r1, #20108	; 0x4e8c
   1ced0:	movt	r1, #5
   1ced4:	str	r0, [r1, #60]	; 0x3c
   1ced8:	movw	r1, #19700	; 0x4cf4
   1cedc:	movt	r1, #5
   1cee0:	ldr	r0, [r1]
   1cee4:	cmp	r0, #0
   1cee8:	bne	1cefc <__assert_fail@plt+0xa30c>
   1ceec:	movw	r0, #3852	; 0xf0c
   1cef0:	movt	r0, #4
   1cef4:	add	r0, r0, #1296	; 0x510
   1cef8:	str	r0, [r1]
   1cefc:	bl	17bb8 <__assert_fail@plt+0x4fc8>
   1cf00:	mov	r1, #1065353216	; 0x3f800000
   1cf04:	str	r1, [r0, #28]
   1cf08:	mov	r1, #0
   1cf0c:	strh	r1, [r0, #18]
   1cf10:	mov	r0, #1
   1cf14:	pop	{fp, pc}
   1cf18:	push	{r4, r5, r6, r7, fp, lr}
   1cf1c:	add	fp, sp, #16
   1cf20:	sub	sp, sp, #216	; 0xd8
   1cf24:	add	r7, sp, #112	; 0x70
   1cf28:	mov	r4, r0
   1cf2c:	mov	r5, r2
   1cf30:	mov	r6, r1
   1cf34:	mov	r0, r7
   1cf38:	bl	17e44 <__assert_fail@plt+0x5254>
   1cf3c:	add	r3, sp, #4
   1cf40:	mov	r0, r6
   1cf44:	mov	r1, r5
   1cf48:	mov	r2, r7
   1cf4c:	bl	1d9e8 <__assert_fail@plt+0xadf8>
   1cf50:	mov	r1, r0
   1cf54:	mov	r0, #0
   1cf58:	cmp	r1, #0
   1cf5c:	beq	1d0c0 <__assert_fail@plt+0xa4d0>
   1cf60:	add	r0, sp, #8
   1cf64:	bl	17e44 <__assert_fail@plt+0x5254>
   1cf68:	movw	r7, #20108	; 0x4e8c
   1cf6c:	mov	r1, #0
   1cf70:	movt	r7, #5
   1cf74:	ldr	r0, [r7, #48]	; 0x30
   1cf78:	cmp	r0, #0
   1cf7c:	bne	1cfb0 <__assert_fail@plt+0xa3c0>
   1cf80:	ldrb	r0, [r7, #56]	; 0x38
   1cf84:	mov	r1, #32768	; 0x8000
   1cf88:	cmp	r0, #0
   1cf8c:	bne	1cfb0 <__assert_fail@plt+0xa3c0>
   1cf90:	ldr	r0, [sp, #128]	; 0x80
   1cf94:	mov	r1, #0
   1cf98:	and	r0, r0, #61440	; 0xf000
   1cf9c:	cmp	r0, #40960	; 0xa000
   1cfa0:	bne	1cfb0 <__assert_fail@plt+0xa3c0>
   1cfa4:	ldr	r5, [sp, #4]
   1cfa8:	mvn	r6, #1
   1cfac:	b	1d078 <__assert_fail@plt+0xa488>
   1cfb0:	ldr	r5, [sp, #4]
   1cfb4:	mov	r0, r5
   1cfb8:	bl	1fab0 <__assert_fail@plt+0xcec0>
   1cfbc:	mov	r6, r0
   1cfc0:	cmp	r0, #0
   1cfc4:	bmi	1d078 <__assert_fail@plt+0xa488>
   1cfc8:	add	r1, sp, #8
   1cfcc:	mov	r0, r6
   1cfd0:	bl	3d20c <__assert_fail@plt+0x2a61c>
   1cfd4:	cmp	r0, #0
   1cfd8:	bne	1d0c8 <__assert_fail@plt+0xa4d8>
   1cfdc:	ldr	r2, [r7, #52]	; 0x34
   1cfe0:	add	r1, sp, #112	; 0x70
   1cfe4:	mov	r0, r5
   1cfe8:	blx	r2
   1cfec:	cmp	r0, #0
   1cff0:	bne	1d0c8 <__assert_fail@plt+0xa4d8>
   1cff4:	ldr	r0, [r7, #48]	; 0x30
   1cff8:	cmp	r0, #0
   1cffc:	ldrbeq	r0, [r7, #56]	; 0x38
   1d000:	cmpeq	r0, #0
   1d004:	beq	1d01c <__assert_fail@plt+0xa42c>
   1d008:	add	r0, sp, #112	; 0x70
   1d00c:	add	r1, sp, #8
   1d010:	mov	r2, #104	; 0x68
   1d014:	bl	125f0 <memcpy@plt>
   1d018:	b	1d078 <__assert_fail@plt+0xa488>
   1d01c:	ldr	r0, [sp, #128]	; 0x80
   1d020:	and	r0, r0, #61440	; 0xf000
   1d024:	cmp	r0, #40960	; 0xa000
   1d028:	beq	1d06c <__assert_fail@plt+0xa47c>
   1d02c:	ldr	r0, [sp, #8]
   1d030:	ldr	r2, [sp, #112]	; 0x70
   1d034:	ldr	r1, [sp, #12]
   1d038:	ldr	r3, [sp, #116]	; 0x74
   1d03c:	eor	r1, r3, r1
   1d040:	eor	r0, r2, r0
   1d044:	orrs	r0, r0, r1
   1d048:	bne	1d06c <__assert_fail@plt+0xa47c>
   1d04c:	ldr	r0, [sp, #104]	; 0x68
   1d050:	ldr	r2, [sp, #208]	; 0xd0
   1d054:	ldr	r1, [sp, #108]	; 0x6c
   1d058:	ldr	r3, [sp, #212]	; 0xd4
   1d05c:	eor	r1, r3, r1
   1d060:	eor	r0, r2, r0
   1d064:	orrs	r0, r0, r1
   1d068:	beq	1d078 <__assert_fail@plt+0xa488>
   1d06c:	mov	r0, r6
   1d070:	bl	12ba8 <close@plt>
   1d074:	mvn	r6, #0
   1d078:	mov	r0, r4
   1d07c:	mov	r1, r5
   1d080:	bl	17b58 <__assert_fail@plt+0x4f68>
   1d084:	mov	r1, r0
   1d088:	ldr	r0, [sp, #208]	; 0xd0
   1d08c:	ldr	r2, [sp, #212]	; 0xd4
   1d090:	movw	r7, #55050	; 0xd70a
   1d094:	movt	r7, #15395	; 0x3c23
   1d098:	str	r0, [r1, #40]	; 0x28
   1d09c:	str	r2, [r1, #44]	; 0x2c
   1d0a0:	mov	r0, #1
   1d0a4:	ldr	r2, [sp, #112]	; 0x70
   1d0a8:	ldr	r3, [sp, #116]	; 0x74
   1d0ac:	str	r6, [r1, #56]	; 0x38
   1d0b0:	strh	r0, [r1, #18]
   1d0b4:	str	r7, [r1, #28]
   1d0b8:	str	r2, [r1, #48]	; 0x30
   1d0bc:	str	r3, [r1, #52]	; 0x34
   1d0c0:	sub	sp, fp, #16
   1d0c4:	pop	{r4, r5, r6, r7, fp, pc}
   1d0c8:	bl	12908 <__errno_location@plt>
   1d0cc:	ldr	r0, [r0]
   1d0d0:	mov	r1, r5
   1d0d4:	bl	19004 <__assert_fail@plt+0x6414>
   1d0d8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d0dc:	add	fp, sp, #28
   1d0e0:	sub	sp, sp, #28
   1d0e4:	mov	r8, r0
   1d0e8:	mov	r0, #0
   1d0ec:	cmp	r1, #0
   1d0f0:	beq	1d278 <__assert_fail@plt+0xa688>
   1d0f4:	mov	r7, r1
   1d0f8:	ldr	r1, [r2]
   1d0fc:	mov	r4, r2
   1d100:	ldr	r5, [r7, r1, lsl #2]
   1d104:	cmp	r5, #0
   1d108:	beq	1d278 <__assert_fail@plt+0xa688>
   1d10c:	mov	r0, r5
   1d110:	bl	128c0 <strlen@plt>
   1d114:	cmp	r0, #0
   1d118:	beq	1d280 <__assert_fail@plt+0xa690>
   1d11c:	sub	r9, r0, #1
   1d120:	mov	r6, #512	; 0x200
   1d124:	ldrb	r0, [r5, r9]
   1d128:	cmp	r0, #70	; 0x46
   1d12c:	bgt	1d144 <__assert_fail@plt+0xa554>
   1d130:	sub	r0, r0, #48	; 0x30
   1d134:	mov	sl, #0
   1d138:	cmp	r0, #10
   1d13c:	bcc	1d1d8 <__assert_fail@plt+0xa5e8>
   1d140:	b	1d2dc <__assert_fail@plt+0xa6ec>
   1d144:	cmp	r0, #98	; 0x62
   1d148:	bgt	1d16c <__assert_fail@plt+0xa57c>
   1d14c:	cmp	r0, #71	; 0x47
   1d150:	beq	1d18c <__assert_fail@plt+0xa59c>
   1d154:	cmp	r0, #77	; 0x4d
   1d158:	bne	1d1ac <__assert_fail@plt+0xa5bc>
   1d15c:	mov	r0, #0
   1d160:	mov	r6, #1048576	; 0x100000
   1d164:	mov	sl, #77	; 0x4d
   1d168:	b	1d1d4 <__assert_fail@plt+0xa5e4>
   1d16c:	cmp	r0, #99	; 0x63
   1d170:	beq	1d19c <__assert_fail@plt+0xa5ac>
   1d174:	cmp	r0, #107	; 0x6b
   1d178:	bne	1d1c0 <__assert_fail@plt+0xa5d0>
   1d17c:	mov	r0, #0
   1d180:	mov	r6, #1024	; 0x400
   1d184:	mov	sl, #107	; 0x6b
   1d188:	b	1d1d4 <__assert_fail@plt+0xa5e4>
   1d18c:	mov	r0, #0
   1d190:	mov	r6, #1073741824	; 0x40000000
   1d194:	mov	sl, #71	; 0x47
   1d198:	b	1d1d4 <__assert_fail@plt+0xa5e4>
   1d19c:	mov	r0, #0
   1d1a0:	mov	r6, #1
   1d1a4:	mov	sl, #99	; 0x63
   1d1a8:	b	1d1d4 <__assert_fail@plt+0xa5e4>
   1d1ac:	cmp	r0, #98	; 0x62
   1d1b0:	bne	1d2dc <__assert_fail@plt+0xa6ec>
   1d1b4:	mov	r0, #0
   1d1b8:	mov	sl, #98	; 0x62
   1d1bc:	b	1d1d4 <__assert_fail@plt+0xa5e4>
   1d1c0:	cmp	r0, #119	; 0x77
   1d1c4:	bne	1d2dc <__assert_fail@plt+0xa6ec>
   1d1c8:	mov	r0, #0
   1d1cc:	mov	r6, #2
   1d1d0:	mov	sl, #119	; 0x77
   1d1d4:	strb	r0, [r5, r9]
   1d1d8:	add	r1, sp, #16
   1d1dc:	add	r2, sp, #12
   1d1e0:	mov	r0, r5
   1d1e4:	bl	1e338 <__assert_fail@plt+0xb748>
   1d1e8:	cmp	r0, #0
   1d1ec:	beq	1d2a4 <__assert_fail@plt+0xa6b4>
   1d1f0:	mov	r0, r8
   1d1f4:	mov	r1, r5
   1d1f8:	bl	17b58 <__assert_fail@plt+0x4f68>
   1d1fc:	ldr	r3, [sp, #12]
   1d200:	ldr	r2, [sp, #16]
   1d204:	ldr	r1, [sp, #20]
   1d208:	mov	r7, #1
   1d20c:	strh	r7, [r0, #18]
   1d210:	cmp	r3, #1
   1d214:	str	r3, [r0, #40]	; 0x28
   1d218:	str	r6, [r0, #44]	; 0x2c
   1d21c:	str	r2, [r0, #48]	; 0x30
   1d220:	str	r1, [r0, #52]	; 0x34
   1d224:	beq	1d240 <__assert_fail@plt+0xa650>
   1d228:	cmp	r3, #0
   1d22c:	bne	1d260 <__assert_fail@plt+0xa670>
   1d230:	umull	r2, r3, r2, r6
   1d234:	mla	r1, r1, r6, r3
   1d238:	add	r3, pc, #216	; 0xd8
   1d23c:	b	1d24c <__assert_fail@plt+0xa65c>
   1d240:	umull	r2, r3, r2, r6
   1d244:	mla	r1, r1, r6, r3
   1d248:	add	r3, pc, #192	; 0xc0
   1d24c:	rsbs	r2, r2, #20480	; 0x5000
   1d250:	rscs	r1, r1, #0
   1d254:	addcc	r3, r3, #4
   1d258:	vldr	s0, [r3]
   1d25c:	b	1d264 <__assert_fail@plt+0xa674>
   1d260:	vldr	s0, [pc, #164]	; 1d30c <__assert_fail@plt+0xa71c>
   1d264:	vstr	s0, [r0, #28]
   1d268:	ldr	r0, [r4]
   1d26c:	add	r0, r0, #1
   1d270:	str	r0, [r4]
   1d274:	mov	r0, #1
   1d278:	sub	sp, fp, #28
   1d27c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d280:	movw	r1, #3148	; 0xc4c
   1d284:	mov	r0, #0
   1d288:	mov	r2, #5
   1d28c:	movt	r1, #4
   1d290:	bl	12674 <dcgettext@plt>
   1d294:	mov	r2, r0
   1d298:	mov	r0, #1
   1d29c:	mov	r1, #0
   1d2a0:	bl	127b8 <error@plt>
   1d2a4:	movw	r1, #3203	; 0xc83
   1d2a8:	mov	r0, #0
   1d2ac:	mov	r2, #5
   1d2b0:	movt	r1, #4
   1d2b4:	strb	r0, [sp, #11]
   1d2b8:	mov	r0, #0
   1d2bc:	strb	sl, [sp, #10]
   1d2c0:	bl	12674 <dcgettext@plt>
   1d2c4:	mov	r2, r0
   1d2c8:	add	r0, sp, #10
   1d2cc:	mov	r1, #0
   1d2d0:	mov	r3, r5
   1d2d4:	str	r0, [sp]
   1d2d8:	b	1d304 <__assert_fail@plt+0xa714>
   1d2dc:	movw	r1, #3179	; 0xc6b
   1d2e0:	mov	r0, #0
   1d2e4:	mov	r2, #5
   1d2e8:	movt	r1, #4
   1d2ec:	bl	12674 <dcgettext@plt>
   1d2f0:	mov	r2, r0
   1d2f4:	ldr	r0, [r4]
   1d2f8:	mov	r1, #0
   1d2fc:	ldr	r0, [r7, r0, lsl #2]
   1d300:	ldrb	r3, [r0, r9]
   1d304:	mov	r0, #1
   1d308:	bl	127b8 <error@plt>
   1d30c:	stccc	7, cr13, [r3], #-40	; 0xffffffd8
   1d310:	stclcc	12, cr12, [ip, #820]	; 0x334
   1d314:	svccc	0x00666666
   1d318:	svccc	0x00666666
   1d31c:	stclcc	12, cr12, [ip, #820]	; 0x334
   1d320:	movw	r3, #19788	; 0x4d4c
   1d324:	mov	ip, r2
   1d328:	mov	r2, r0
   1d32c:	mov	r0, r1
   1d330:	movt	r3, #1
   1d334:	mov	r1, ip
   1d338:	b	1e8b0 <__assert_fail@plt+0xbcc0>
   1d33c:	push	{r4, sl, fp, lr}
   1d340:	add	fp, sp, #8
   1d344:	mov	r4, r2
   1d348:	mov	r2, r0
   1d34c:	mov	r0, r1
   1d350:	mov	r1, r4
   1d354:	bl	1e1f4 <__assert_fail@plt+0xb604>
   1d358:	cmp	r0, #0
   1d35c:	beq	1d384 <__assert_fail@plt+0xa794>
   1d360:	add	r1, pc, #48	; 0x30
   1d364:	ldrd	r2, [r0, #48]	; 0x30
   1d368:	subs	r2, r2, #100	; 0x64
   1d36c:	sbcs	r2, r3, #0
   1d370:	addcc	r1, r1, #4
   1d374:	ldr	r1, [r1]
   1d378:	str	r1, [r0, #28]
   1d37c:	mov	r0, #1
   1d380:	pop	{r4, sl, fp, pc}
   1d384:	ldr	r0, [r4]
   1d388:	sub	r0, r0, #1
   1d38c:	str	r0, [r4]
   1d390:	mov	r0, #0
   1d394:	pop	{r4, sl, fp, pc}
   1d398:	cdpcc	12, 4, cr12, cr12, cr13, {6}
   1d39c:	svccc	0x007d70a4
   1d3a0:	push	{r4, r5, r6, sl, fp, lr}
   1d3a4:	add	fp, sp, #16
   1d3a8:	sub	sp, sp, #24
   1d3ac:	mov	r5, r0
   1d3b0:	mov	r0, #0
   1d3b4:	cmp	r1, #0
   1d3b8:	beq	1d458 <__assert_fail@plt+0xa868>
   1d3bc:	ldr	r3, [r2]
   1d3c0:	ldr	r4, [r1, r3, lsl #2]
   1d3c4:	cmp	r4, #0
   1d3c8:	beq	1d458 <__assert_fail@plt+0xa868>
   1d3cc:	add	r0, r3, #1
   1d3d0:	vldr	d0, [pc, #176]	; 1d488 <__assert_fail@plt+0xa898>
   1d3d4:	add	r6, sp, #8
   1d3d8:	mov	r3, #0
   1d3dc:	str	r0, [r2]
   1d3e0:	movw	r0, #943	; 0x3af
   1d3e4:	mov	r1, r6
   1d3e8:	mov	r2, #0
   1d3ec:	movt	r0, #4
   1d3f0:	str	r0, [sp]
   1d3f4:	mov	r0, r4
   1d3f8:	bl	1d878 <__assert_fail@plt+0xac88>
   1d3fc:	cmp	r0, #0
   1d400:	beq	1d460 <__assert_fail@plt+0xa870>
   1d404:	mov	r0, r5
   1d408:	mov	r1, r4
   1d40c:	bl	17b58 <__assert_fail@plt+0x4f68>
   1d410:	mov	r1, #8
   1d414:	movw	r3, #10111	; 0x277f
   1d418:	vldr	s0, [pc, #120]	; 1d498 <__assert_fail@plt+0xa8a8>
   1d41c:	vld1.64	{d16-d17}, [r6], r1
   1d420:	add	r1, r0, #40	; 0x28
   1d424:	movt	r3, #133	; 0x85
   1d428:	vst1.64	{d16-d17}, [r1]
   1d42c:	ldr	r1, [r6]
   1d430:	add	r2, pc, #88	; 0x58
   1d434:	cmp	r1, r3
   1d438:	addgt	r2, r2, #4
   1d43c:	vldr	s2, [r2]
   1d440:	movw	r2, #20864	; 0x5180
   1d444:	movt	r2, #1
   1d448:	cmp	r1, r2
   1d44c:	vselge.f32	s0, s2, s0
   1d450:	vstr	s0, [r0, #28]
   1d454:	mov	r0, #1
   1d458:	sub	sp, fp, #16
   1d45c:	pop	{r4, r5, r6, sl, fp, pc}
   1d460:	movw	r1, #3610	; 0xe1a
   1d464:	mov	r0, #0
   1d468:	mov	r2, #5
   1d46c:	movt	r1, #4
   1d470:	bl	12674 <dcgettext@plt>
   1d474:	mov	r2, r0
   1d478:	mov	r0, #1
   1d47c:	mov	r1, #0
   1d480:	mov	r3, r4
   1d484:	bl	127b8 <error@plt>
   1d488:	andeq	r0, r0, r0
   1d48c:	rscsmi	r1, r5, r0, lsl #16
   1d490:	mcrcc	14, 6, sl, cr7, cr4, {0}
   1d494:			; <UNDEFINED> instruction: 0x3e99999a
   1d498:	stccc	7, cr13, [r3], #-40	; 0xffffffd8
   1d49c:	push	{r4, r5, r6, sl, fp, lr}
   1d4a0:	add	fp, sp, #16
   1d4a4:	mov	r5, r0
   1d4a8:	mov	r0, #0
   1d4ac:	cmp	r1, #0
   1d4b0:	beq	1d550 <__assert_fail@plt+0xa960>
   1d4b4:	ldr	r3, [r2]
   1d4b8:	ldr	r4, [r1, r3, lsl #2]
   1d4bc:	cmp	r4, #0
   1d4c0:	beq	1d550 <__assert_fail@plt+0xa960>
   1d4c4:	add	r0, r3, #1
   1d4c8:	str	r0, [r2]
   1d4cc:	mov	r0, r4
   1d4d0:	bl	124d0 <getpwnam@plt>
   1d4d4:	mov	r6, r0
   1d4d8:	bl	12a34 <endpwent@plt>
   1d4dc:	cmp	r6, #0
   1d4e0:	beq	1d4ec <__assert_fail@plt+0xa8fc>
   1d4e4:	ldr	r6, [r6, #8]
   1d4e8:	b	1d528 <__assert_fail@plt+0xa938>
   1d4ec:	movw	r1, #2220	; 0x8ac
   1d4f0:	mov	r0, r4
   1d4f4:	movt	r1, #4
   1d4f8:	bl	12be4 <strspn@plt>
   1d4fc:	cmp	r0, #0
   1d500:	beq	1d554 <__assert_fail@plt+0xa964>
   1d504:	ldrb	r0, [r4, r0]
   1d508:	cmp	r0, #0
   1d50c:	bne	1d554 <__assert_fail@plt+0xa964>
   1d510:	movw	r0, #20108	; 0x4e8c
   1d514:	movt	r0, #5
   1d518:	ldr	r1, [r0, #72]	; 0x48
   1d51c:	mov	r0, r4
   1d520:	bl	20c38 <__assert_fail@plt+0xe048>
   1d524:	mov	r6, r0
   1d528:	mov	r0, r5
   1d52c:	mov	r1, r4
   1d530:	bl	17b58 <__assert_fail@plt+0x4f68>
   1d534:	str	r6, [r0, #40]	; 0x28
   1d538:	add	r1, pc, #136	; 0x88
   1d53c:	cmp	r6, #100	; 0x64
   1d540:	addcc	r1, r1, #4
   1d544:	ldr	r1, [r1]
   1d548:	str	r1, [r0, #28]
   1d54c:	mov	r0, #1
   1d550:	pop	{r4, r5, r6, sl, fp, pc}
   1d554:	ldrb	r0, [r4]
   1d558:	cmp	r0, #0
   1d55c:	bne	1d584 <__assert_fail@plt+0xa994>
   1d560:	movw	r1, #3674	; 0xe5a
   1d564:	mov	r0, #0
   1d568:	mov	r2, #5
   1d56c:	movt	r1, #4
   1d570:	bl	12674 <dcgettext@plt>
   1d574:	mov	r2, r0
   1d578:	mov	r0, #1
   1d57c:	mov	r1, #0
   1d580:	bl	127b8 <error@plt>
   1d584:	movw	r1, #3639	; 0xe37
   1d588:	mov	r0, #0
   1d58c:	mov	r2, #5
   1d590:	movt	r1, #4
   1d594:	bl	12674 <dcgettext@plt>
   1d598:	mov	r5, r0
   1d59c:	movw	r0, #20108	; 0x4e8c
   1d5a0:	mov	r2, r4
   1d5a4:	movt	r0, #5
   1d5a8:	ldr	r1, [r0, #72]	; 0x48
   1d5ac:	mov	r0, #0
   1d5b0:	bl	294c0 <__assert_fail@plt+0x168d0>
   1d5b4:	mov	r3, r0
   1d5b8:	mov	r0, #1
   1d5bc:	mov	r1, #0
   1d5c0:	mov	r2, r5
   1d5c4:	bl	127b8 <error@plt>
   1d5c8:	cdpcc	12, 4, cr12, cr12, cr13, {6}
   1d5cc:	svccc	0x007d70a4
   1d5d0:	push	{fp, lr}
   1d5d4:	mov	fp, sp
   1d5d8:	sub	sp, sp, #8
   1d5dc:	movw	r3, #18792	; 0x4968
   1d5e0:	movt	r3, #1
   1d5e4:	str	r3, [sp]
   1d5e8:	movw	r3, #2896	; 0xb50
   1d5ec:	movt	r3, #4
   1d5f0:	bl	1e574 <__assert_fail@plt+0xb984>
   1d5f4:	mov	sp, fp
   1d5f8:	pop	{fp, pc}
   1d5fc:	movw	r3, #20200	; 0x4ee8
   1d600:	mov	ip, r2
   1d604:	mov	r2, r0
   1d608:	mov	r0, r1
   1d60c:	movt	r3, #1
   1d610:	mov	r1, ip
   1d614:	b	1e8b0 <__assert_fail@plt+0xbcc0>
   1d618:	push	{fp, lr}
   1d61c:	mov	fp, sp
   1d620:	movw	r0, #712	; 0x2c8
   1d624:	movt	r0, #4
   1d628:	bl	1b0e4 <__assert_fail@plt+0x84f4>
   1d62c:	bl	17bb8 <__assert_fail@plt+0x4fc8>
   1d630:	mov	r1, #0
   1d634:	str	r1, [r0, #28]
   1d638:	str	r1, [r0, #16]
   1d63c:	mov	r0, #1
   1d640:	pop	{fp, pc}
   1d644:	push	{fp, lr}
   1d648:	mov	fp, sp
   1d64c:	bl	17bb8 <__assert_fail@plt+0x4fc8>
   1d650:	mov	r1, #1065353216	; 0x3f800000
   1d654:	str	r1, [r0, #28]
   1d658:	mov	r1, #0
   1d65c:	strh	r1, [r0, #18]
   1d660:	mov	r0, #1
   1d664:	pop	{fp, pc}
   1d668:	push	{fp, lr}
   1d66c:	mov	fp, sp
   1d670:	mov	r0, #0
   1d674:	bl	17bc0 <__assert_fail@plt+0x4fd0>
   1d678:	push	{fp, lr}
   1d67c:	mov	fp, sp
   1d680:	sub	sp, sp, #8
   1d684:	movw	r0, #53860	; 0xd264
   1d688:	movt	r0, #3
   1d68c:	bl	1fcec <__assert_fail@plt+0xd0fc>
   1d690:	movw	r1, #3716	; 0xe84
   1d694:	mov	r0, #0
   1d698:	mov	r2, #5
   1d69c:	mov	r5, #0
   1d6a0:	movt	r1, #4
   1d6a4:	bl	12674 <dcgettext@plt>
   1d6a8:	bl	12524 <printf@plt>
   1d6ac:	movw	r0, #3735	; 0xe97
   1d6b0:	movt	r0, #4
   1d6b4:	bl	12524 <printf@plt>
   1d6b8:	movw	r4, #20108	; 0x4e8c
   1d6bc:	movw	r2, #3767	; 0xeb7
   1d6c0:	movw	r1, #3759	; 0xeaf
   1d6c4:	movt	r4, #5
   1d6c8:	movt	r2, #4
   1d6cc:	movt	r1, #4
   1d6d0:	ldrb	r0, [r4, #56]	; 0x38
   1d6d4:	cmp	r0, #0
   1d6d8:	movw	r0, #3743	; 0xe9f
   1d6dc:	movt	r0, #4
   1d6e0:	moveq	r1, r2
   1d6e4:	bl	12524 <printf@plt>
   1d6e8:	movw	r0, #3776	; 0xec0
   1d6ec:	movt	r0, #4
   1d6f0:	bl	12524 <printf@plt>
   1d6f4:	bl	124dc <is_selinux_enabled@plt>
   1d6f8:	cmp	r0, #1
   1d6fc:	blt	1d70c <__assert_fail@plt+0xab1c>
   1d700:	movw	r0, #3795	; 0xed3
   1d704:	movt	r0, #4
   1d708:	bl	12524 <printf@plt>
   1d70c:	add	r0, sp, #4
   1d710:	str	r5, [sp, #4]
   1d714:	bl	13314 <__assert_fail@plt+0x724>
   1d718:	cmp	r0, #0
   1d71c:	beq	1d750 <__assert_fail@plt+0xab60>
   1d720:	movw	r0, #3804	; 0xedc
   1d724:	movt	r0, #4
   1d728:	bl	12524 <printf@plt>
   1d72c:	ldrb	r0, [sp, #5]
   1d730:	tst	r0, #2
   1d734:	beq	1d744 <__assert_fail@plt+0xab54>
   1d738:	movw	r0, #3809	; 0xee1
   1d73c:	movt	r0, #4
   1d740:	bl	12524 <printf@plt>
   1d744:	movw	r0, #56521	; 0xdcc9
   1d748:	movt	r0, #3
   1d74c:	bl	12524 <printf@plt>
   1d750:	ldrh	r1, [r4, #68]	; 0x44
   1d754:	movw	r0, #3819	; 0xeeb
   1d758:	movt	r0, #4
   1d75c:	bl	12524 <printf@plt>
   1d760:	mov	r0, #10
   1d764:	bl	12950 <putchar@plt>
   1d768:	mov	r0, #0
   1d76c:	bl	12884 <exit@plt>
   1d770:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d774:	add	fp, sp, #28
   1d778:	sub	sp, sp, #28
   1d77c:	mov	r4, #0
   1d780:	cmp	r1, #0
   1d784:	beq	1d854 <__assert_fail@plt+0xac64>
   1d788:	ldr	r9, [r2]
   1d78c:	mov	r5, r2
   1d790:	ldr	r7, [r1, r9, lsl #2]
   1d794:	cmp	r7, #0
   1d798:	beq	1d854 <__assert_fail@plt+0xac64>
   1d79c:	movw	sl, #20108	; 0x4e8c
   1d7a0:	movw	r1, #745	; 0x2e9
   1d7a4:	mov	r8, r0
   1d7a8:	add	r0, r9, #1
   1d7ac:	vldr	d0, [pc, #172]	; 1d860 <__assert_fail@plt+0xac70>
   1d7b0:	add	r6, sp, #8
   1d7b4:	movt	sl, #5
   1d7b8:	str	r0, [r5]
   1d7bc:	movt	r1, #4
   1d7c0:	str	r3, [sp, #8]
   1d7c4:	ldr	r0, [sl, #28]
   1d7c8:	str	r1, [sp]
   1d7cc:	movw	r1, #20864	; 0x5180
   1d7d0:	ldr	r3, [sl, #32]
   1d7d4:	movt	r1, #1
   1d7d8:	add	r2, r0, r1
   1d7dc:	mov	r0, r7
   1d7e0:	mov	r1, r6
   1d7e4:	bl	1d878 <__assert_fail@plt+0xac88>
   1d7e8:	cmp	r0, #0
   1d7ec:	beq	1d850 <__assert_fail@plt+0xac60>
   1d7f0:	mov	r0, r8
   1d7f4:	mov	r1, r7
   1d7f8:	bl	17b58 <__assert_fail@plt+0x4f68>
   1d7fc:	mov	r1, #8
   1d800:	movw	r3, #10111	; 0x277f
   1d804:	vldr	s0, [pc, #100]	; 1d870 <__assert_fail@plt+0xac80>
   1d808:	mov	r4, #1
   1d80c:	vld1.64	{d16-d17}, [r6], r1
   1d810:	add	r1, r0, #40	; 0x28
   1d814:	movt	r3, #133	; 0x85
   1d818:	vst1.64	{d16-d17}, [r1]
   1d81c:	ldr	r1, [r6]
   1d820:	ldr	r2, [sl, #28]
   1d824:	sub	r1, r2, r1
   1d828:	add	r2, pc, #56	; 0x38
   1d82c:	cmp	r1, r3
   1d830:	addgt	r2, r2, #4
   1d834:	vldr	s2, [r2]
   1d838:	movw	r2, #20864	; 0x5180
   1d83c:	movt	r2, #1
   1d840:	cmp	r1, r2
   1d844:	vselge.f32	s0, s2, s0
   1d848:	vstr	s0, [r0, #28]
   1d84c:	b	1d854 <__assert_fail@plt+0xac64>
   1d850:	str	r9, [r5]
   1d854:	mov	r0, r4
   1d858:	sub	sp, fp, #28
   1d85c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d860:	andeq	r0, r0, r0
   1d864:	submi	r0, lr, r0
   1d868:	mcrcc	14, 6, sl, cr7, cr4, {0}
   1d86c:			; <UNDEFINED> instruction: 0x3e99999a
   1d870:	stccc	7, cr13, [r3], #-40	; 0xffffffd8
   1d874:	nop	{0}
   1d878:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1d87c:	add	fp, sp, #24
   1d880:	vpush	{d8}
   1d884:	sub	sp, sp, #16
   1d888:	mov	r4, r1
   1d88c:	ldrb	r1, [r0]
   1d890:	vmov.f64	d8, d0
   1d894:	mov	r8, r3
   1d898:	mov	r7, r2
   1d89c:	mov	r5, r0
   1d8a0:	cmp	r1, #43	; 0x2b
   1d8a4:	beq	1d8bc <__assert_fail@plt+0xaccc>
   1d8a8:	cmp	r1, #45	; 0x2d
   1d8ac:	mov	r0, #2
   1d8b0:	addeq	r5, r5, #1
   1d8b4:	moveq	r0, #0
   1d8b8:	b	1d8c4 <__assert_fail@plt+0xacd4>
   1d8bc:	add	r5, r5, #1
   1d8c0:	mov	r0, #1
   1d8c4:	movw	r3, #10624	; 0x2980
   1d8c8:	str	r0, [r4, #4]
   1d8cc:	add	r2, sp, #8
   1d8d0:	mov	r0, r5
   1d8d4:	mov	r1, #0
   1d8d8:	mov	r6, #0
   1d8dc:	movt	r3, #1
   1d8e0:	bl	2aaf8 <__assert_fail@plt+0x17f08>
   1d8e4:	cmp	r0, #0
   1d8e8:	beq	1d998 <__assert_fail@plt+0xada8>
   1d8ec:	vldr	d16, [sp, #8]
   1d8f0:	mov	r0, sp
   1d8f4:	vmul.f64	d0, d16, d8
   1d8f8:	bl	12854 <modf@plt>
   1d8fc:	vldr	d17, [pc, #220]	; 1d9e0 <__assert_fail@plt+0xadf0>
   1d900:	vmul.f64	d16, d0, d17
   1d904:	vcmpe.f64	d16, d17
   1d908:	vmrs	APSR_nzcv, fpscr
   1d90c:	bpl	1d9a8 <__assert_fail@plt+0xadb8>
   1d910:	vmov	s0, r7
   1d914:	vldr	d17, [sp]
   1d918:	mov	r1, #0
   1d91c:	mov	r2, #0
   1d920:	vcvt.f64.s32	d18, s0
   1d924:	vcmpe.f64	d17, #0.0
   1d928:	vsub.f64	d18, d18, d17
   1d92c:	vcvt.s32.f64	s0, d18
   1d930:	vcvt.s32.f64	s2, d18
   1d934:	vmov	r0, s2
   1d938:	vstr	s0, [r4, #8]
   1d93c:	cmp	r7, r0
   1d940:	movwlt	r2, #1
   1d944:	vmrs	APSR_nzcv, fpscr
   1d948:	movwmi	r1, #1
   1d94c:	cmp	r1, r2
   1d950:	bne	1d9c8 <__assert_fail@plt+0xadd8>
   1d954:	vmov	s0, r8
   1d958:	mov	r6, #1
   1d95c:	vcvt.f64.s32	d17, s0
   1d960:	vsub.f64	d18, d17, d16
   1d964:	vcmpe.f64	d16, d17
   1d968:	vmrs	APSR_nzcv, fpscr
   1d96c:	vcvt.s32.f64	s2, d18
   1d970:	vcvt.s32.f64	s0, d18
   1d974:	vstr	s2, [r4, #12]
   1d978:	ble	1d998 <__assert_fail@plt+0xada8>
   1d97c:	vmov	r1, s0
   1d980:	movw	r2, #51712	; 0xca00
   1d984:	sub	r0, r0, #1
   1d988:	movt	r2, #15258	; 0x3b9a
   1d98c:	str	r0, [r4, #8]
   1d990:	add	r1, r1, r2
   1d994:	str	r1, [r4, #12]
   1d998:	mov	r0, r6
   1d99c:	sub	sp, fp, #32
   1d9a0:	vpop	{d8}
   1d9a4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1d9a8:	movw	r0, #816	; 0x330
   1d9ac:	movw	r1, #19
   1d9b0:	movw	r3, #842	; 0x34a
   1d9b4:	movw	r2, #3149	; 0xc4d
   1d9b8:	movt	r0, #4
   1d9bc:	movt	r1, #4
   1d9c0:	movt	r3, #4
   1d9c4:	bl	12bf0 <__assert_fail@plt>
   1d9c8:	ldr	r2, [fp, #8]
   1d9cc:	mov	r0, #1
   1d9d0:	mov	r1, #0
   1d9d4:	mov	r3, r5
   1d9d8:	bl	127b8 <error@plt>
   1d9dc:	nop	{0}
   1d9e0:	andeq	r0, r0, r0
   1d9e4:	bicmi	ip, sp, r5, ror #26
   1d9e8:	push	{r4, r5, fp, lr}
   1d9ec:	add	fp, sp, #8
   1d9f0:	cmp	r0, #0
   1d9f4:	beq	1da4c <__assert_fail@plt+0xae5c>
   1d9f8:	ldr	r4, [r1]
   1d9fc:	ldr	r5, [r0, r4, lsl #2]
   1da00:	cmp	r5, #0
   1da04:	beq	1da4c <__assert_fail@plt+0xae5c>
   1da08:	add	r0, r4, #1
   1da0c:	str	r0, [r1]
   1da10:	movw	r0, #20108	; 0x4e8c
   1da14:	str	r5, [r3]
   1da18:	mov	r1, r2
   1da1c:	movt	r0, #5
   1da20:	ldr	r3, [r0, #52]	; 0x34
   1da24:	mov	r0, r5
   1da28:	blx	r3
   1da2c:	mov	r1, r0
   1da30:	mov	r0, #1
   1da34:	cmp	r1, #0
   1da38:	popeq	{r4, r5, fp, pc}
   1da3c:	bl	12908 <__errno_location@plt>
   1da40:	ldr	r0, [r0]
   1da44:	mov	r1, r5
   1da48:	bl	19004 <__assert_fail@plt+0x6414>
   1da4c:	mov	r0, #0
   1da50:	str	r0, [r3]
   1da54:	pop	{r4, r5, fp, pc}
   1da58:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1da5c:	add	fp, sp, #28
   1da60:	sub	sp, sp, #60	; 0x3c
   1da64:	mov	r6, r0
   1da68:	mov	r0, #0
   1da6c:	cmp	r2, #0
   1da70:	beq	1de2c <__assert_fail@plt+0xb23c>
   1da74:	mov	r7, r2
   1da78:	ldr	r2, [r3]
   1da7c:	mov	sl, r3
   1da80:	ldr	r2, [r7, r2, lsl #2]
   1da84:	cmp	r2, #0
   1da88:	beq	1de2c <__assert_fail@plt+0xb23c>
   1da8c:	ldr	r4, [r1, #12]
   1da90:	movw	r2, #1264	; 0x4f0
   1da94:	mov	r0, r1
   1da98:	movt	r2, #4
   1da9c:	mov	r1, r4
   1daa0:	bl	17b1c <__assert_fail@plt+0x4f2c>
   1daa4:	mov	r3, r0
   1daa8:	mov	r0, #0
   1daac:	movw	r1, #257	; 0x101
   1dab0:	movw	ip, #20108	; 0x4e8c
   1dab4:	str	r0, [r3, #144]	; 0x90
   1dab8:	str	r1, [r3, #16]
   1dabc:	movw	r1, #18628	; 0x48c4
   1dac0:	movt	ip, #5
   1dac4:	movt	r1, #1
   1dac8:	cmp	r4, r1
   1dacc:	movwne	r2, #18404	; 0x47e4
   1dad0:	movne	r5, #1
   1dad4:	movtne	r2, #1
   1dad8:	cmpne	r4, r2
   1dadc:	bne	1daec <__assert_fail@plt+0xaefc>
   1dae0:	mov	r0, #1
   1dae4:	mov	r5, #0
   1dae8:	strb	r0, [ip, #80]	; 0x50
   1daec:	strb	r0, [r3, #140]	; 0x8c
   1daf0:	sub	r0, r4, r1
   1daf4:	movw	r1, #16908	; 0x420c
   1daf8:	str	r3, [sp, #32]
   1dafc:	str	r4, [sp, #20]
   1db00:	movt	r1, #1
   1db04:	clz	r0, r0
   1db08:	lsr	r0, r0, #5
   1db0c:	sub	r1, r4, r1
   1db10:	clz	r1, r1
   1db14:	lsr	r1, r1, #5
   1db18:	orr	r9, r1, r0
   1db1c:	cmp	r9, #1
   1db20:	bne	1dbd8 <__assert_fail@plt+0xafe8>
   1db24:	mov	r0, #0
   1db28:	str	r5, [sp, #28]
   1db2c:	str	r6, [sp, #24]
   1db30:	str	r0, [r3, #144]	; 0x90
   1db34:	strb	r0, [ip, #14]
   1db38:	movw	r0, #2107	; 0x83b
   1db3c:	movt	r0, #4
   1db40:	bl	127f4 <getenv@plt>
   1db44:	cmp	r0, #0
   1db48:	beq	1dbcc <__assert_fail@plt+0xafdc>
   1db4c:	movw	r5, #56796	; 0xdddc
   1db50:	add	r8, sp, #36	; 0x24
   1db54:	sub	r6, fp, #32
   1db58:	mov	r2, #1
   1db5c:	mov	r4, r0
   1db60:	movt	r5, #3
   1db64:	mov	r3, r8
   1db68:	str	r6, [sp]
   1db6c:	mov	r1, r5
   1db70:	bl	20d44 <__assert_fail@plt+0xe154>
   1db74:	ldr	r1, [fp, #-32]	; 0xffffffe0
   1db78:	cmp	r1, #1
   1db7c:	beq	1db94 <__assert_fail@plt+0xafa4>
   1db80:	cmp	r1, #0
   1db84:	beq	1dec0 <__assert_fail@plt+0xb2d0>
   1db88:	ldr	r0, [sp, #36]	; 0x24
   1db8c:	ldrb	r2, [r4, r0]
   1db90:	b	1dba4 <__assert_fail@plt+0xafb4>
   1db94:	ldr	r0, [sp, #36]	; 0x24
   1db98:	ldrb	r2, [r4, r0]
   1db9c:	cmp	r2, #46	; 0x2e
   1dba0:	beq	1dec0 <__assert_fail@plt+0xb2d0>
   1dba4:	cmp	r2, #47	; 0x2f
   1dba8:	bne	1dee8 <__assert_fail@plt+0xb2f8>
   1dbac:	mov	r0, r4
   1dbb0:	mov	r1, r5
   1dbb4:	mov	r2, #0
   1dbb8:	mov	r3, r8
   1dbbc:	str	r6, [sp]
   1dbc0:	bl	20d44 <__assert_fail@plt+0xe154>
   1dbc4:	cmp	r0, #0
   1dbc8:	bne	1db74 <__assert_fail@plt+0xaf84>
   1dbcc:	ldr	r3, [sp, #32]
   1dbd0:	ldr	r5, [sp, #28]
   1dbd4:	b	1dbf0 <__assert_fail@plt+0xb000>
   1dbd8:	movw	r0, #17800	; 0x4588
   1dbdc:	movt	r0, #5
   1dbe0:	ldr	r0, [r0]
   1dbe4:	cmp	r0, #0
   1dbe8:	beq	1df64 <__assert_fail@plt+0xb374>
   1dbec:	str	r0, [r3, #144]	; 0x90
   1dbf0:	add	r2, r3, #40	; 0x28
   1dbf4:	mov	r0, #0
   1dbf8:	str	sl, [sp, #28]
   1dbfc:	str	r7, [sp, #16]
   1dc00:	strb	r0, [r2]
   1dc04:	ldr	r1, [sl]
   1dc08:	mov	sl, r7
   1dc0c:	ldr	r4, [sl, r1, lsl #2]!
   1dc10:	cmp	r4, #0
   1dc14:	beq	1de18 <__assert_fail@plt+0xb228>
   1dc18:	eor	r6, r9, #1
   1dc1c:	eor	r5, r5, #1
   1dc20:	mov	r9, r1
   1dc24:	mov	r8, #0
   1dc28:	mov	r7, #0
   1dc2c:	str	r2, [sp, #12]
   1dc30:	str	r1, [sp, #24]
   1dc34:	ldrb	r1, [r4]
   1dc38:	cmp	r1, #59	; 0x3b
   1dc3c:	bne	1dc50 <__assert_fail@plt+0xb060>
   1dc40:	ldrb	r0, [r4, #1]
   1dc44:	cmp	r0, #0
   1dc48:	bne	1dc74 <__assert_fail@plt+0xb084>
   1dc4c:	b	1dccc <__assert_fail@plt+0xb0dc>
   1dc50:	subs	r1, r1, #43	; 0x2b
   1dc54:	movwne	r1, #1
   1dc58:	orrs	r1, r5, r1
   1dc5c:	bne	1dc74 <__assert_fail@plt+0xb084>
   1dc60:	cmp	r0, #0
   1dc64:	beq	1dc74 <__assert_fail@plt+0xb084>
   1dc68:	ldrb	r0, [r4, #1]
   1dc6c:	cmp	r0, #0
   1dc70:	beq	1dcd4 <__assert_fail@plt+0xb0e4>
   1dc74:	movw	r1, #1387	; 0x56b
   1dc78:	mov	r0, r4
   1dc7c:	movt	r1, #4
   1dc80:	bl	23508 <__assert_fail@plt+0x10918>
   1dc84:	mov	r1, #0
   1dc88:	cmp	r0, #0
   1dc8c:	beq	1dcb4 <__assert_fail@plt+0xb0c4>
   1dc90:	cmp	r9, #0
   1dc94:	mov	r0, r9
   1dc98:	movwne	r0, #1
   1dc9c:	orrs	r0, r0, r6
   1dca0:	beq	1df40 <__assert_fail@plt+0xb350>
   1dca4:	add	r7, r7, #1
   1dca8:	mov	r0, #1
   1dcac:	mov	r8, r4
   1dcb0:	b	1dcb8 <__assert_fail@plt+0xb0c8>
   1dcb4:	mov	r0, #0
   1dcb8:	ldr	r4, [sl, #4]!
   1dcbc:	add	r9, r9, #1
   1dcc0:	cmp	r4, #0
   1dcc4:	bne	1dc34 <__assert_fail@plt+0xb044>
   1dcc8:	b	1dce0 <__assert_fail@plt+0xb0f0>
   1dccc:	mov	r1, #0
   1dcd0:	b	1dce0 <__assert_fail@plt+0xb0f0>
   1dcd4:	ldr	r0, [sp, #12]
   1dcd8:	mov	r1, #1
   1dcdc:	strb	r1, [r0]
   1dce0:	ldr	r0, [sp, #24]
   1dce4:	cmp	r9, r0
   1dce8:	beq	1de10 <__assert_fail@plt+0xb220>
   1dcec:	ldr	r0, [sl]
   1dcf0:	cmp	r0, #0
   1dcf4:	beq	1de10 <__assert_fail@plt+0xb220>
   1dcf8:	cmp	r1, #0
   1dcfc:	beq	1dd3c <__assert_fail@plt+0xb14c>
   1dd00:	ldr	r1, [sp, #20]
   1dd04:	movw	r2, #16908	; 0x420c
   1dd08:	movw	r0, #2117	; 0x845
   1dd0c:	movw	r4, #61759	; 0xf13f
   1dd10:	movt	r2, #1
   1dd14:	movt	r0, #4
   1dd18:	movt	r4, #3
   1dd1c:	cmp	r1, r2
   1dd20:	moveq	r4, r0
   1dd24:	cmp	r7, #2
   1dd28:	bge	1df90 <__assert_fail@plt+0xb3a0>
   1dd2c:	mov	r0, r8
   1dd30:	bl	128c0 <strlen@plt>
   1dd34:	cmp	r0, #2
   1dd38:	bne	1dfb8 <__assert_fail@plt+0xb3c8>
   1dd3c:	ldr	r8, [sp, #12]
   1dd40:	mov	r1, #2048	; 0x800
   1dd44:	add	r7, r8, #4
   1dd48:	mov	r0, r7
   1dd4c:	bl	1f294 <__assert_fail@plt+0xc6a4>
   1dd50:	sub	r0, r0, #1
   1dd54:	cmp	r0, #1
   1dd58:	bls	1df84 <__assert_fail@plt+0xb394>
   1dd5c:	mov	r0, r7
   1dd60:	bl	1f364 <__assert_fail@plt+0xc774>
   1dd64:	ldr	r5, [sp, #32]
   1dd68:	movw	r0, #22484	; 0x57d4
   1dd6c:	ldr	r6, [sp, #24]
   1dd70:	movt	r0, #1
   1dd74:	str	r0, [r5, #76]	; 0x4c
   1dd78:	ldrb	r0, [r5, #40]	; 0x28
   1dd7c:	cmp	r0, #0
   1dd80:	beq	1de34 <__assert_fail@plt+0xb244>
   1dd84:	mvn	r1, r6
   1dd88:	mov	r2, #0
   1dd8c:	mov	r0, r7
   1dd90:	add	r4, r9, r1
   1dd94:	str	r2, [r5, #132]	; 0x84
   1dd98:	str	r2, [r5, #80]	; 0x50
   1dd9c:	str	r2, [r5, #84]	; 0x54
   1dda0:	str	r2, [r5, #64]	; 0x40
   1dda4:	str	r2, [r5, #68]	; 0x44
   1dda8:	mov	r2, r8
   1ddac:	str	r4, [r5, #72]	; 0x48
   1ddb0:	add	r5, r5, #88	; 0x58
   1ddb4:	mov	r1, r5
   1ddb8:	bl	1f388 <__assert_fail@plt+0xc798>
   1ddbc:	sub	r0, r9, #1
   1ddc0:	cmp	r6, r0
   1ddc4:	bge	1dea4 <__assert_fail@plt+0xb2b4>
   1ddc8:	ldr	r0, [sp, #16]
   1ddcc:	add	r8, r0, r6, lsl #2
   1ddd0:	ldr	r6, [r8], #4
   1ddd4:	mov	r0, r6
   1ddd8:	bl	128c0 <strlen@plt>
   1dddc:	mov	r1, #0
   1dde0:	add	r3, r0, #1
   1dde4:	mov	r0, r7
   1dde8:	mov	r2, r6
   1ddec:	str	r1, [sp]
   1ddf0:	str	r1, [sp, #4]
   1ddf4:	mov	r1, #1
   1ddf8:	str	r1, [sp, #8]
   1ddfc:	mov	r1, r5
   1de00:	bl	1ecb8 <__assert_fail@plt+0xc0c8>
   1de04:	subs	r4, r4, #1
   1de08:	bne	1ddd0 <__assert_fail@plt+0xb1e0>
   1de0c:	b	1dea4 <__assert_fail@plt+0xb2b4>
   1de10:	ldr	r3, [sp, #32]
   1de14:	mov	r1, r9
   1de18:	ldr	r0, [sp, #28]
   1de1c:	str	r1, [r0]
   1de20:	mov	r0, r3
   1de24:	bl	2bcbc <__assert_fail@plt+0x190cc>
   1de28:	mov	r0, #0
   1de2c:	sub	sp, fp, #28
   1de30:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1de34:	mov	r4, #0
   1de38:	mov	r0, #2
   1de3c:	str	r4, [r5, #80]	; 0x50
   1de40:	str	r4, [r5, #84]	; 0x54
   1de44:	str	r0, [r5, #64]	; 0x40
   1de48:	movw	r0, #1387	; 0x56b
   1de4c:	movt	r0, #4
   1de50:	str	r0, [r5, #68]	; 0x44
   1de54:	sub	r0, r9, r6
   1de58:	str	r0, [r5, #136]	; 0x88
   1de5c:	lsl	r0, r0, #2
   1de60:	bl	2a688 <__assert_fail@plt+0x17a98>
   1de64:	str	r0, [r5, #132]	; 0x84
   1de68:	add	r1, r5, #88	; 0x58
   1de6c:	mov	r0, r7
   1de70:	mov	r2, r8
   1de74:	bl	1f388 <__assert_fail@plt+0xc798>
   1de78:	ldr	r0, [r5, #136]	; 0x88
   1de7c:	cmp	r0, #1
   1de80:	blt	1dea4 <__assert_fail@plt+0xb2b4>
   1de84:	ldr	r1, [sp, #16]
   1de88:	add	r1, r1, r6, lsl #2
   1de8c:	ldr	r2, [r1, r4, lsl #2]
   1de90:	ldr	r3, [r5, #132]	; 0x84
   1de94:	str	r2, [r3, r4, lsl #2]
   1de98:	add	r4, r4, #1
   1de9c:	cmp	r4, r0
   1dea0:	blt	1de8c <__assert_fail@plt+0xb29c>
   1dea4:	ldr	r0, [sl]
   1dea8:	cmp	r0, #0
   1deac:	ldr	r0, [sp, #28]
   1deb0:	addne	r9, r9, #1
   1deb4:	str	r9, [r0]
   1deb8:	mov	r0, #1
   1debc:	b	1de2c <__assert_fail@plt+0xb23c>
   1dec0:	movw	r1, #1696	; 0x6a0
   1dec4:	mov	r0, #0
   1dec8:	mov	r2, #5
   1decc:	movt	r1, #4
   1ded0:	bl	12674 <dcgettext@plt>
   1ded4:	ldr	r3, [sp, #24]
   1ded8:	mov	r2, r0
   1dedc:	mov	r0, #1
   1dee0:	mov	r1, #0
   1dee4:	bl	127b8 <error@plt>
   1dee8:	add	r0, r4, r0
   1deec:	bl	125cc <strndup@plt>
   1def0:	movw	r1, #1947	; 0x79b
   1def4:	mov	r5, r0
   1def8:	mov	r0, #0
   1defc:	mov	r2, #5
   1df00:	movt	r1, #4
   1df04:	bl	12674 <dcgettext@plt>
   1df08:	mov	r6, r0
   1df0c:	ldr	r0, [sp, #36]	; 0x24
   1df10:	cmp	r5, #0
   1df14:	addeq	r5, r4, r0
   1df18:	mov	r0, #0
   1df1c:	mov	r1, r5
   1df20:	bl	18f7c <__assert_fail@plt+0x638c>
   1df24:	mov	r3, r0
   1df28:	ldr	r0, [sp, #24]
   1df2c:	mov	r1, #0
   1df30:	mov	r2, r6
   1df34:	str	r0, [sp]
   1df38:	mov	r0, #1
   1df3c:	bl	127b8 <error@plt>
   1df40:	movw	r1, #1390	; 0x56e
   1df44:	movt	r1, #4
   1df48:	mov	r0, #0
   1df4c:	mov	r2, #5
   1df50:	bl	12674 <dcgettext@plt>
   1df54:	mov	r2, r0
   1df58:	mov	r0, #1
   1df5c:	mov	r1, #0
   1df60:	bl	127b8 <error@plt>
   1df64:	movw	r0, #1288	; 0x508
   1df68:	movw	r1, #19
   1df6c:	movw	r3, #1307	; 0x51b
   1df70:	movw	r2, #2937	; 0xb79
   1df74:	movt	r0, #4
   1df78:	movt	r1, #4
   1df7c:	movt	r3, #4
   1df80:	bl	12bf0 <__assert_fail@plt>
   1df84:	movw	r1, #1655	; 0x677
   1df88:	movt	r1, #4
   1df8c:	b	1df48 <__assert_fail@plt+0xb358>
   1df90:	movw	r1, #1504	; 0x5e0
   1df94:	mov	r0, #0
   1df98:	mov	r2, #5
   1df9c:	movt	r1, #4
   1dfa0:	bl	12674 <dcgettext@plt>
   1dfa4:	mov	r2, r0
   1dfa8:	mov	r0, #1
   1dfac:	mov	r1, #0
   1dfb0:	mov	r3, r4
   1dfb4:	bl	127b8 <error@plt>
   1dfb8:	movw	r2, #1560	; 0x618
   1dfbc:	add	r0, sp, #36	; 0x24
   1dfc0:	mov	r1, #19
   1dfc4:	mov	r3, r4
   1dfc8:	movt	r2, #4
   1dfcc:	bl	12920 <snprintf@plt>
   1dfd0:	cmp	r0, #20
   1dfd4:	bcs	1e054 <__assert_fail@plt+0xb464>
   1dfd8:	movw	r1, #1598	; 0x63e
   1dfdc:	mov	r0, #0
   1dfe0:	mov	r2, #5
   1dfe4:	movt	r1, #4
   1dfe8:	bl	12674 <dcgettext@plt>
   1dfec:	mov	r4, r0
   1dff0:	movw	r0, #20108	; 0x4e8c
   1dff4:	add	r2, sp, #36	; 0x24
   1dff8:	movt	r0, #5
   1dffc:	ldr	r1, [r0, #72]	; 0x48
   1e000:	mov	r7, r0
   1e004:	mov	r0, #0
   1e008:	bl	294c0 <__assert_fail@plt+0x168d0>
   1e00c:	ldr	r1, [r7, #72]	; 0x48
   1e010:	movw	r2, #1387	; 0x56b
   1e014:	mov	r5, r0
   1e018:	mov	r0, #1
   1e01c:	movt	r2, #4
   1e020:	bl	294c0 <__assert_fail@plt+0x168d0>
   1e024:	ldr	r1, [r7, #72]	; 0x48
   1e028:	mov	r6, r0
   1e02c:	mov	r0, #2
   1e030:	mov	r2, r8
   1e034:	bl	294c0 <__assert_fail@plt+0x168d0>
   1e038:	str	r0, [sp, #4]
   1e03c:	mov	r0, #1
   1e040:	mov	r1, #0
   1e044:	mov	r2, r4
   1e048:	mov	r3, r5
   1e04c:	str	r6, [sp]
   1e050:	bl	127b8 <error@plt>
   1e054:	movw	r0, #1577	; 0x629
   1e058:	movw	r1, #19
   1e05c:	movw	r3, #1307	; 0x51b
   1e060:	movw	r2, #3014	; 0xbc6
   1e064:	movt	r0, #4
   1e068:	b	1df78 <__assert_fail@plt+0xb388>
   1e06c:	push	{r4, r5, fp, lr}
   1e070:	add	fp, sp, #8
   1e074:	mov	r5, r1
   1e078:	bl	17bb8 <__assert_fail@plt+0x4fc8>
   1e07c:	mov	r4, r0
   1e080:	add	r1, r0, #40	; 0x28
   1e084:	cmp	r5, #0
   1e088:	beq	1e094 <__assert_fail@plt+0xb4a4>
   1e08c:	mov	r0, r5
   1e090:	b	1e09c <__assert_fail@plt+0xb4ac>
   1e094:	movw	r0, #2148	; 0x864
   1e098:	movt	r0, #4
   1e09c:	bl	1e0b4 <__assert_fail@plt+0xb4c4>
   1e0a0:	mov	r0, #1065353216	; 0x3f800000
   1e0a4:	str	r0, [r4, #28]
   1e0a8:	movw	r0, #257	; 0x101
   1e0ac:	strh	r0, [r4, #16]
   1e0b0:	pop	{r4, r5, fp, pc}
   1e0b4:	push	{r4, r5, fp, lr}
   1e0b8:	add	fp, sp, #8
   1e0bc:	mov	r5, r0
   1e0c0:	mov	r0, #0
   1e0c4:	mov	r4, r1
   1e0c8:	str	r0, [r1]
   1e0cc:	mov	r0, #0
   1e0d0:	bl	27f70 <__assert_fail@plt+0x15380>
   1e0d4:	movw	r1, #2121	; 0x849
   1e0d8:	str	r0, [r4, #16]
   1e0dc:	mov	r0, r5
   1e0e0:	movt	r1, #4
   1e0e4:	bl	124f4 <strcmp@plt>
   1e0e8:	cmp	r0, #0
   1e0ec:	beq	1e138 <__assert_fail@plt+0xb548>
   1e0f0:	movw	r1, #2148	; 0x864
   1e0f4:	mov	r0, r5
   1e0f8:	movt	r1, #4
   1e0fc:	bl	124f4 <strcmp@plt>
   1e100:	cmp	r0, #0
   1e104:	beq	1e14c <__assert_fail@plt+0xb55c>
   1e108:	movw	r0, #20064	; 0x4e60
   1e10c:	mov	r1, r5
   1e110:	movt	r0, #5
   1e114:	ldr	r0, [r0, #36]	; 0x24
   1e118:	bl	191f4 <__assert_fail@plt+0x6604>
   1e11c:	cmp	r0, #0
   1e120:	stmib	r4, {r0, r5}
   1e124:	bne	1e174 <__assert_fail@plt+0xb584>
   1e128:	bl	12908 <__errno_location@plt>
   1e12c:	ldr	r0, [r0]
   1e130:	mov	r1, r5
   1e134:	bl	19024 <__assert_fail@plt+0x6434>
   1e138:	movw	r1, #2133	; 0x855
   1e13c:	movw	r0, #17768	; 0x4568
   1e140:	movt	r1, #4
   1e144:	movt	r0, #5
   1e148:	b	1e15c <__assert_fail@plt+0xb56c>
   1e14c:	movw	r1, #61819	; 0xf17b
   1e150:	movw	r0, #17780	; 0x4574
   1e154:	movt	r1, #3
   1e158:	movt	r0, #5
   1e15c:	ldr	r0, [r0]
   1e160:	mov	r2, #5
   1e164:	str	r0, [r4, #4]
   1e168:	mov	r0, #0
   1e16c:	bl	12674 <dcgettext@plt>
   1e170:	str	r0, [r4, #8]
   1e174:	ldr	r0, [r4, #4]
   1e178:	bl	1298c <fileno@plt>
   1e17c:	cmn	r0, #1
   1e180:	beq	1e194 <__assert_fail@plt+0xb5a4>
   1e184:	bl	12b60 <isatty@plt>
   1e188:	cmp	r0, #0
   1e18c:	movwne	r0, #1
   1e190:	b	1e198 <__assert_fail@plt+0xb5a8>
   1e194:	mov	r0, #0
   1e198:	strb	r0, [r4, #12]
   1e19c:	pop	{r4, r5, fp, pc}
   1e1a0:	push	{r4, r5, fp, lr}
   1e1a4:	add	fp, sp, #8
   1e1a8:	mov	r5, r1
   1e1ac:	bl	17b58 <__assert_fail@plt+0x4f68>
   1e1b0:	mov	r4, r0
   1e1b4:	add	r1, r0, #40	; 0x28
   1e1b8:	cmp	r5, #0
   1e1bc:	beq	1e1c8 <__assert_fail@plt+0xb5d8>
   1e1c0:	mov	r0, r5
   1e1c4:	b	1e1d0 <__assert_fail@plt+0xb5e0>
   1e1c8:	movw	r0, #2148	; 0x864
   1e1cc:	movt	r0, #4
   1e1d0:	bl	1e0b4 <__assert_fail@plt+0xb4c4>
   1e1d4:	mov	r0, #0
   1e1d8:	strb	r0, [r4, #19]
   1e1dc:	mov	r0, #1
   1e1e0:	strb	r0, [r4, #16]
   1e1e4:	strh	r0, [r4, #17]
   1e1e8:	mov	r0, #1065353216	; 0x3f800000
   1e1ec:	str	r0, [r4, #28]
   1e1f0:	pop	{r4, r5, fp, pc}
   1e1f4:	push	{r4, r5, r6, sl, fp, lr}
   1e1f8:	add	fp, sp, #16
   1e1fc:	sub	sp, sp, #16
   1e200:	mov	r4, #0
   1e204:	cmp	r0, #0
   1e208:	beq	1e280 <__assert_fail@plt+0xb690>
   1e20c:	mov	r5, r2
   1e210:	ldr	r2, [r1]
   1e214:	ldr	r6, [r0, r2, lsl #2]
   1e218:	cmp	r6, #0
   1e21c:	beq	1e280 <__assert_fail@plt+0xb690>
   1e220:	add	r0, r2, #1
   1e224:	add	r2, sp, #4
   1e228:	str	r0, [r1]
   1e22c:	add	r1, sp, #8
   1e230:	mov	r0, r6
   1e234:	bl	1e338 <__assert_fail@plt+0xb748>
   1e238:	cmp	r0, #0
   1e23c:	beq	1e280 <__assert_fail@plt+0xb690>
   1e240:	mov	r0, r5
   1e244:	mov	r1, r6
   1e248:	bl	17b58 <__assert_fail@plt+0x4f68>
   1e24c:	mov	r4, r0
   1e250:	ldr	r0, [sp, #4]
   1e254:	mov	r5, r4
   1e258:	str	r0, [r4, #40]	; 0x28
   1e25c:	ldr	r0, [sp, #8]
   1e260:	ldr	r1, [sp, #12]
   1e264:	str	r0, [r5, #48]!	; 0x30
   1e268:	movw	r0, #20108	; 0x4e8c
   1e26c:	str	r1, [r4, #52]	; 0x34
   1e270:	movt	r0, #5
   1e274:	ldrb	r0, [r0, #44]	; 0x2c
   1e278:	tst	r0, #1
   1e27c:	bne	1e28c <__assert_fail@plt+0xb69c>
   1e280:	mov	r0, r4
   1e284:	sub	sp, fp, #16
   1e288:	pop	{r4, r5, r6, sl, fp, pc}
   1e28c:	movw	r6, #17768	; 0x4568
   1e290:	ldr	r2, [r4, #4]
   1e294:	movw	r1, #1011	; 0x3f3
   1e298:	movt	r6, #5
   1e29c:	movt	r1, #4
   1e2a0:	ldr	r0, [r6]
   1e2a4:	bl	128fc <fprintf@plt>
   1e2a8:	ldr	r1, [sp, #4]
   1e2ac:	ldr	r0, [r6]
   1e2b0:	cmp	r1, #0
   1e2b4:	beq	1e2d4 <__assert_fail@plt+0xb6e4>
   1e2b8:	cmp	r1, #1
   1e2bc:	bne	1e2e8 <__assert_fail@plt+0xb6f8>
   1e2c0:	movw	r3, #1055	; 0x41f
   1e2c4:	movw	r2, #6919	; 0x1b07
   1e2c8:	movt	r3, #4
   1e2cc:	movt	r2, #4
   1e2d0:	b	1e314 <__assert_fail@plt+0xb724>
   1e2d4:	movw	r3, #1052	; 0x41c
   1e2d8:	movw	r2, #1046	; 0x416
   1e2dc:	movt	r3, #4
   1e2e0:	movt	r2, #4
   1e2e4:	b	1e314 <__assert_fail@plt+0xb724>
   1e2e8:	movw	r2, #2211	; 0x8a3
   1e2ec:	cmp	r1, #2
   1e2f0:	movw	r1, #1049	; 0x419
   1e2f4:	movw	r3, #1061	; 0x425
   1e2f8:	movt	r2, #4
   1e2fc:	movt	r1, #4
   1e300:	movt	r3, #4
   1e304:	moveq	r3, r2
   1e308:	movw	r2, #1062	; 0x426
   1e30c:	movt	r2, #4
   1e310:	moveq	r2, r1
   1e314:	movw	r1, #1025	; 0x401
   1e318:	movt	r1, #4
   1e31c:	bl	128fc <fprintf@plt>
   1e320:	ldrd	r2, [r5]
   1e324:	ldr	r0, [r6]
   1e328:	movw	r1, #2214	; 0x8a6
   1e32c:	movt	r1, #4
   1e330:	bl	128fc <fprintf@plt>
   1e334:	b	1e280 <__assert_fail@plt+0xb690>
   1e338:	cmp	r0, #0
   1e33c:	moveq	r0, #0
   1e340:	bxeq	lr
   1e344:	push	{fp, lr}
   1e348:	mov	fp, sp
   1e34c:	sub	sp, sp, #8
   1e350:	mov	r3, r1
   1e354:	cmp	r2, #0
   1e358:	beq	1e390 <__assert_fail@plt+0xb7a0>
   1e35c:	ldrb	r1, [r0]
   1e360:	cmp	r1, #45	; 0x2d
   1e364:	beq	1e378 <__assert_fail@plt+0xb788>
   1e368:	cmp	r1, #43	; 0x2b
   1e36c:	bne	1e388 <__assert_fail@plt+0xb798>
   1e370:	mov	r1, #0
   1e374:	b	1e37c <__assert_fail@plt+0xb78c>
   1e378:	mov	r1, #1
   1e37c:	str	r1, [r2]
   1e380:	add	r0, r0, #1
   1e384:	b	1e390 <__assert_fail@plt+0xb7a0>
   1e388:	mov	r1, #2
   1e38c:	str	r1, [r2]
   1e390:	movw	r1, #61759	; 0xf13f
   1e394:	mov	r2, #10
   1e398:	movt	r1, #3
   1e39c:	str	r1, [sp]
   1e3a0:	add	r1, sp, #4
   1e3a4:	bl	2affc <__assert_fail@plt+0x1840c>
   1e3a8:	clz	r0, r0
   1e3ac:	lsr	r0, r0, #5
   1e3b0:	mov	sp, fp
   1e3b4:	pop	{fp, pc}
   1e3b8:	push	{r4, r5, fp, lr}
   1e3bc:	add	fp, sp, #8
   1e3c0:	vpush	{d8}
   1e3c4:	mov	r5, r1
   1e3c8:	movw	r1, #2452	; 0x994
   1e3cc:	mov	r4, r0
   1e3d0:	movt	r1, #4
   1e3d4:	bl	12b0c <strpbrk@plt>
   1e3d8:	vldr	s16, [pc, #48]	; 1e410 <__assert_fail@plt+0xb820>
   1e3dc:	cmp	r0, #0
   1e3e0:	bne	1e404 <__assert_fail@plt+0xb814>
   1e3e4:	cmp	r5, #0
   1e3e8:	beq	1e400 <__assert_fail@plt+0xb810>
   1e3ec:	mov	r0, r4
   1e3f0:	mov	r1, #46	; 0x2e
   1e3f4:	bl	128cc <strchr@plt>
   1e3f8:	cmp	r0, #0
   1e3fc:	bne	1e404 <__assert_fail@plt+0xb814>
   1e400:	vldr	s16, [pc, #12]	; 1e414 <__assert_fail@plt+0xb824>
   1e404:	vmov.f32	s0, s16
   1e408:	vpop	{d8}
   1e40c:	pop	{r4, r5, fp, pc}
   1e410:	svccc	0x004ccccd
   1e414:	stclcc	12, cr12, [ip, #820]	; 0x334
   1e418:	push	{r4, sl, fp, lr}
   1e41c:	add	fp, sp, #8
   1e420:	movw	r4, #19704	; 0x4cf8
   1e424:	movt	r4, #5
   1e428:	ldrb	r0, [r4]
   1e42c:	cmp	r0, #0
   1e430:	popne	{r4, sl, fp, pc}
   1e434:	movw	r0, #2475	; 0x9ab
   1e438:	mov	r2, #0
   1e43c:	movt	r0, #4
   1e440:	mov	r1, r0
   1e444:	bl	127dc <fnmatch@plt>
   1e448:	cmp	r0, #0
   1e44c:	bne	1e49c <__assert_fail@plt+0xb8ac>
   1e450:	movw	r0, #2479	; 0x9af
   1e454:	movw	r1, #2475	; 0x9ab
   1e458:	mov	r2, #0
   1e45c:	movt	r0, #4
   1e460:	movt	r1, #4
   1e464:	bl	127dc <fnmatch@plt>
   1e468:	cmp	r0, #0
   1e46c:	beq	1e49c <__assert_fail@plt+0xb8ac>
   1e470:	movw	r0, #2479	; 0x9af
   1e474:	movw	r1, #2475	; 0x9ab
   1e478:	mov	r2, #16
   1e47c:	movt	r0, #4
   1e480:	movt	r1, #4
   1e484:	bl	127dc <fnmatch@plt>
   1e488:	cmp	r0, #0
   1e48c:	bne	1e49c <__assert_fail@plt+0xb8ac>
   1e490:	mov	r0, #1
   1e494:	strb	r0, [r4]
   1e498:	pop	{r4, sl, fp, pc}
   1e49c:	movw	r1, #2483	; 0x9b3
   1e4a0:	mov	r0, #0
   1e4a4:	mov	r2, #5
   1e4a8:	movt	r1, #4
   1e4ac:	bl	12674 <dcgettext@plt>
   1e4b0:	mov	r2, r0
   1e4b4:	mov	r0, #1
   1e4b8:	mov	r1, #0
   1e4bc:	bl	127b8 <error@plt>
   1e4c0:	push	{r4, r5, r6, r7, fp, lr}
   1e4c4:	add	fp, sp, #16
   1e4c8:	sub	sp, sp, #8
   1e4cc:	mov	r5, r0
   1e4d0:	movw	r0, #20108	; 0x4e8c
   1e4d4:	mov	r4, r1
   1e4d8:	movt	r0, #5
   1e4dc:	ldrb	r1, [r0, #17]
   1e4e0:	cmp	r1, #0
   1e4e4:	bne	1e56c <__assert_fail@plt+0xb97c>
   1e4e8:	ldrb	r0, [r0, #16]
   1e4ec:	cmp	r0, #0
   1e4f0:	beq	1e56c <__assert_fail@plt+0xb97c>
   1e4f4:	mov	r0, r2
   1e4f8:	mov	r1, #47	; 0x2f
   1e4fc:	bl	128cc <strchr@plt>
   1e500:	cmp	r0, #0
   1e504:	beq	1e56c <__assert_fail@plt+0xb97c>
   1e508:	movw	r1, #2538	; 0x9ea
   1e50c:	mov	r0, #0
   1e510:	mov	r2, #5
   1e514:	movt	r1, #4
   1e518:	bl	12674 <dcgettext@plt>
   1e51c:	mov	r6, r0
   1e520:	mov	r0, #0
   1e524:	mov	r1, r5
   1e528:	bl	18f7c <__assert_fail@plt+0x638c>
   1e52c:	movw	r1, #56638	; 0xdd3e
   1e530:	mov	r5, r0
   1e534:	mov	r0, #1
   1e538:	movt	r1, #3
   1e53c:	bl	18f7c <__assert_fail@plt+0x638c>
   1e540:	mov	r7, r0
   1e544:	mov	r0, #2
   1e548:	mov	r1, r4
   1e54c:	bl	18f7c <__assert_fail@plt+0x638c>
   1e550:	str	r0, [sp, #4]
   1e554:	mov	r0, #0
   1e558:	mov	r1, #0
   1e55c:	mov	r2, r6
   1e560:	mov	r3, r5
   1e564:	str	r7, [sp]
   1e568:	bl	127b8 <error@plt>
   1e56c:	sub	sp, fp, #16
   1e570:	pop	{r4, r5, r6, r7, fp, pc}
   1e574:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1e578:	add	fp, sp, #24
   1e57c:	sub	sp, sp, #8
   1e580:	mov	r9, r3
   1e584:	mov	r4, r2
   1e588:	mov	r6, r1
   1e58c:	mov	r7, r0
   1e590:	bl	1e418 <__assert_fail@plt+0xb828>
   1e594:	mov	r5, #0
   1e598:	cmp	r6, #0
   1e59c:	beq	1e618 <__assert_fail@plt+0xba28>
   1e5a0:	ldr	r0, [r4]
   1e5a4:	ldr	r6, [r6, r0, lsl #2]
   1e5a8:	cmp	r6, #0
   1e5ac:	beq	1e618 <__assert_fail@plt+0xba28>
   1e5b0:	ldr	r8, [fp, #8]
   1e5b4:	add	r0, r0, #1
   1e5b8:	mov	r2, r6
   1e5bc:	str	r0, [r4]
   1e5c0:	mov	r0, r7
   1e5c4:	mov	r1, r8
   1e5c8:	bl	17b1c <__assert_fail@plt+0x4f2c>
   1e5cc:	movw	r1, #2452	; 0x994
   1e5d0:	mov	r7, r0
   1e5d4:	str	r6, [r0, #40]	; 0x28
   1e5d8:	mov	r0, #0
   1e5dc:	movt	r1, #4
   1e5e0:	strh	r0, [r7, #18]
   1e5e4:	mov	r0, r6
   1e5e8:	bl	12b0c <strpbrk@plt>
   1e5ec:	add	r1, pc, #176	; 0xb0
   1e5f0:	cmp	r0, #0
   1e5f4:	mov	r5, #1
   1e5f8:	addeq	r1, r1, #4
   1e5fc:	ldr	r0, [r1]
   1e600:	str	r0, [r7, #28]
   1e604:	movw	r0, #20108	; 0x4e8c
   1e608:	movt	r0, #5
   1e60c:	ldrb	r0, [r0, #17]
   1e610:	cmp	r0, #0
   1e614:	beq	1e624 <__assert_fail@plt+0xba34>
   1e618:	mov	r0, r5
   1e61c:	sub	sp, fp, #24
   1e620:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1e624:	mov	r0, r6
   1e628:	mov	r1, #47	; 0x2f
   1e62c:	bl	12a4c <strrchr@plt>
   1e630:	cmp	r0, #0
   1e634:	beq	1e618 <__assert_fail@plt+0xba28>
   1e638:	ldrb	r0, [r0, #1]
   1e63c:	cmp	r0, #0
   1e640:	bne	1e618 <__assert_fail@plt+0xba28>
   1e644:	movw	r0, #17688	; 0x4518
   1e648:	movt	r0, #1
   1e64c:	sub	r0, r8, r0
   1e650:	clz	r0, r0
   1e654:	lsr	r1, r0, #5
   1e658:	mov	r0, r6
   1e65c:	bl	15c7c <__assert_fail@plt+0x308c>
   1e660:	cmp	r0, #0
   1e664:	bne	1e618 <__assert_fail@plt+0xba28>
   1e668:	movw	r1, #2716	; 0xa9c
   1e66c:	mov	r0, #0
   1e670:	mov	r2, #5
   1e674:	movt	r1, #4
   1e678:	bl	12674 <dcgettext@plt>
   1e67c:	mov	r2, r0
   1e680:	mov	r0, #0
   1e684:	mov	r1, #0
   1e688:	mov	r3, r9
   1e68c:	str	r6, [sp]
   1e690:	bl	127b8 <error@plt>
   1e694:	movw	r0, #52343	; 0xcc77
   1e698:	movt	r0, #12843	; 0x322b
   1e69c:	str	r0, [r7, #28]
   1e6a0:	b	1e618 <__assert_fail@plt+0xba28>
   1e6a4:	svccc	0x004ccccd
   1e6a8:	stclcc	12, cr12, [ip, #820]	; 0x334
   1e6ac:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1e6b0:	add	fp, sp, #24
   1e6b4:	sub	sp, sp, #8
   1e6b8:	mov	r7, #0
   1e6bc:	cmp	r0, #0
   1e6c0:	beq	1e76c <__assert_fail@plt+0xbb7c>
   1e6c4:	mov	r6, r3
   1e6c8:	ldr	r3, [r1]
   1e6cc:	ldr	r4, [r0, r3, lsl #2]
   1e6d0:	cmp	r4, #0
   1e6d4:	beq	1e76c <__assert_fail@plt+0xbb7c>
   1e6d8:	add	r0, r3, #1
   1e6dc:	str	r0, [r1]
   1e6e0:	movw	r1, #19340	; 0x4b8c
   1e6e4:	mov	r0, r2
   1e6e8:	mov	r2, r4
   1e6ec:	movt	r1, #1
   1e6f0:	bl	17b1c <__assert_fail@plt+0x4f2c>
   1e6f4:	mov	r8, #0
   1e6f8:	mov	r5, r0
   1e6fc:	strh	r8, [r0, #18]
   1e700:	mov	r0, #32
   1e704:	bl	2a688 <__assert_fail@plt+0x17a98>
   1e708:	mov	r7, r0
   1e70c:	str	r0, [r5, #40]	; 0x28
   1e710:	mov	r0, #100	; 0x64
   1e714:	str	r0, [r7, #4]
   1e718:	mov	r0, #100	; 0x64
   1e71c:	bl	2a688 <__assert_fail@plt+0x17a98>
   1e720:	str	r8, [r7, #16]
   1e724:	str	r0, [r7]
   1e728:	mov	r0, r6
   1e72c:	bl	2f6d4 <__assert_fail@plt+0x1cae4>
   1e730:	mov	r0, r4
   1e734:	str	r8, [r7, #20]
   1e738:	str	r6, [r7, #12]
   1e73c:	bl	128c0 <strlen@plt>
   1e740:	mov	r1, r0
   1e744:	mov	r0, r4
   1e748:	mov	r2, r7
   1e74c:	bl	2ea10 <__assert_fail@plt+0x1be20>
   1e750:	cmp	r0, #0
   1e754:	bne	1e778 <__assert_fail@plt+0xbb88>
   1e758:	mov	r0, r4
   1e75c:	mov	r1, #1
   1e760:	mov	r7, #1
   1e764:	bl	1e3b8 <__assert_fail@plt+0xb7c8>
   1e768:	vstr	s0, [r5, #28]
   1e76c:	mov	r0, r7
   1e770:	sub	sp, fp, #24
   1e774:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1e778:	movw	r1, #2780	; 0xadc
   1e77c:	mov	r6, r0
   1e780:	mov	r0, #0
   1e784:	mov	r2, #5
   1e788:	movt	r1, #4
   1e78c:	bl	12674 <dcgettext@plt>
   1e790:	mov	r2, r0
   1e794:	mov	r0, #1
   1e798:	mov	r1, #0
   1e79c:	mov	r3, r4
   1e7a0:	str	r6, [sp]
   1e7a4:	bl	127b8 <error@plt>
   1e7a8:	push	{r4, r5, r6, r7, fp, lr}
   1e7ac:	add	fp, sp, #16
   1e7b0:	sub	sp, sp, #8
   1e7b4:	mov	r6, r2
   1e7b8:	mov	r2, r0
   1e7bc:	mov	r0, #0
   1e7c0:	cmp	r2, #0
   1e7c4:	beq	1e868 <__assert_fail@plt+0xbc78>
   1e7c8:	ldr	r3, [r1]
   1e7cc:	ldr	r5, [r2, r3, lsl #2]
   1e7d0:	cmp	r5, #0
   1e7d4:	beq	1e868 <__assert_fail@plt+0xbc78>
   1e7d8:	add	r0, r2, r3, lsl #2
   1e7dc:	ldr	r4, [r0, #-4]
   1e7e0:	add	r0, r3, #1
   1e7e4:	str	r0, [r1]
   1e7e8:	movw	r1, #2220	; 0x8ac
   1e7ec:	mov	r0, r5
   1e7f0:	movt	r1, #4
   1e7f4:	bl	12be4 <strspn@plt>
   1e7f8:	movw	r7, #20108	; 0x4e8c
   1e7fc:	cmp	r0, #1
   1e800:	movt	r7, #5
   1e804:	blt	1e870 <__assert_fail@plt+0xbc80>
   1e808:	ldrb	r0, [r5, r0]
   1e80c:	cmp	r0, #0
   1e810:	bne	1e870 <__assert_fail@plt+0xbc80>
   1e814:	ldr	r1, [r7, #72]	; 0x48
   1e818:	mov	r0, r5
   1e81c:	bl	20c38 <__assert_fail@plt+0xe048>
   1e820:	cmp	r0, #0
   1e824:	str	r0, [r6]
   1e828:	bmi	1e870 <__assert_fail@plt+0xbc80>
   1e82c:	movw	r1, #19700	; 0x4cf4
   1e830:	movt	r1, #5
   1e834:	ldr	r0, [r1]
   1e838:	cmp	r0, #0
   1e83c:	bne	1e850 <__assert_fail@plt+0xbc60>
   1e840:	movw	r0, #3852	; 0xf0c
   1e844:	movt	r0, #4
   1e848:	add	r0, r0, #1296	; 0x510
   1e84c:	str	r0, [r1]
   1e850:	bl	17bb8 <__assert_fail@plt+0x4fc8>
   1e854:	mov	r1, #1065353216	; 0x3f800000
   1e858:	str	r1, [r0, #28]
   1e85c:	mov	r1, #0
   1e860:	strh	r1, [r0, #18]
   1e864:	mov	r0, #1
   1e868:	sub	sp, fp, #16
   1e86c:	pop	{r4, r5, r6, r7, fp, pc}
   1e870:	movw	r1, #2826	; 0xb0a
   1e874:	mov	r0, #0
   1e878:	mov	r2, #5
   1e87c:	movt	r1, #4
   1e880:	bl	12674 <dcgettext@plt>
   1e884:	ldr	r1, [r7, #72]	; 0x48
   1e888:	mov	r6, r0
   1e88c:	mov	r0, #0
   1e890:	mov	r2, r5
   1e894:	bl	294c0 <__assert_fail@plt+0x168d0>
   1e898:	str	r0, [sp]
   1e89c:	mov	r0, #1
   1e8a0:	mov	r1, #0
   1e8a4:	mov	r2, r6
   1e8a8:	mov	r3, r4
   1e8ac:	bl	127b8 <error@plt>
   1e8b0:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1e8b4:	add	fp, sp, #24
   1e8b8:	sub	sp, sp, #8
   1e8bc:	movw	r7, #20200	; 0x4ee8
   1e8c0:	mov	r6, r3
   1e8c4:	mov	r3, r0
   1e8c8:	movw	r0, #3236	; 0xca4
   1e8cc:	movw	r8, #3243	; 0xcab
   1e8d0:	movt	r7, #1
   1e8d4:	movt	r0, #4
   1e8d8:	movt	r8, #4
   1e8dc:	cmp	r6, r7
   1e8e0:	moveq	r8, r0
   1e8e4:	mov	r0, #0
   1e8e8:	cmp	r3, #0
   1e8ec:	beq	1ea80 <__assert_fail@plt+0xbe90>
   1e8f0:	ldr	r4, [r1]
   1e8f4:	ldr	r5, [r3, r4, lsl #2]
   1e8f8:	cmp	r5, #0
   1e8fc:	beq	1ea80 <__assert_fail@plt+0xbe90>
   1e900:	add	r0, r4, #1
   1e904:	str	r0, [r1]
   1e908:	ldrb	r0, [r5]
   1e90c:	cmp	r0, #0
   1e910:	beq	1eb14 <__assert_fail@plt+0xbf24>
   1e914:	mov	r0, r2
   1e918:	mov	r1, r6
   1e91c:	mov	r2, r5
   1e920:	bl	17b1c <__assert_fail@plt+0x4f2c>
   1e924:	mov	r1, #0
   1e928:	vldr	s0, [pc, #496]	; 1eb20 <__assert_fail@plt+0xbf30>
   1e92c:	vldr	s2, [pc, #496]	; 1eb24 <__assert_fail@plt+0xbf34>
   1e930:	vldr	s4, [pc, #496]	; 1eb28 <__assert_fail@plt+0xbf38>
   1e934:	vldr	s6, [pc, #508]	; 1eb38 <__assert_fail@plt+0xbf48>
   1e938:	vldr	s8, [pc, #500]	; 1eb34 <__assert_fail@plt+0xbf44>
   1e93c:	vldr	s12, [pc, #492]	; 1eb30 <__assert_fail@plt+0xbf40>
   1e940:	vldr	s14, [pc, #484]	; 1eb2c <__assert_fail@plt+0xbf3c>
   1e944:	vmov.f32	s10, #108	; 0x3f600000  0.875
   1e948:	mov	r2, #1
   1e94c:	str	r1, [r0, #28]
   1e950:	subs	r1, r6, r7
   1e954:	movwne	r1, #1
   1e958:	strb	r1, [r0, #19]
   1e95c:	sub	r1, r6, r7
   1e960:	clz	r1, r1
   1e964:	lsr	r1, r1, #5
   1e968:	strb	r1, [r0, #18]
   1e96c:	add	r1, r0, #40	; 0x28
   1e970:	ldrb	r3, [r5]
   1e974:	uxtb	r3, r3
   1e978:	mov	r6, r5
   1e97c:	cmp	r3, #97	; 0x61
   1e980:	ble	1ea74 <__assert_fail@plt+0xbe84>
   1e984:	sub	r7, r3, #98	; 0x62
   1e988:	cmp	r7, #14
   1e98c:	bhi	1ea0c <__assert_fail@plt+0xbe1c>
   1e990:	add	r5, pc, #8
   1e994:	mov	r3, #0
   1e998:	vmov.f32	s1, s2
   1e99c:	ldr	pc, [r5, r7, lsl #2]
   1e9a0:	andeq	lr, r1, r8, lsr #20
   1e9a4:	ldrdeq	lr, [r1], -ip
   1e9a8:	strdeq	lr, [r1], -r4
   1e9ac:	muleq	r1, ip, sl
   1e9b0:	andeq	lr, r1, r8, ror #19
   1e9b4:	muleq	r1, ip, sl
   1e9b8:	muleq	r1, ip, sl
   1e9bc:	muleq	r1, ip, sl
   1e9c0:	muleq	r1, ip, sl
   1e9c4:	muleq	r1, ip, sl
   1e9c8:	andeq	lr, r1, r0, lsr #20
   1e9cc:	muleq	r1, ip, sl
   1e9d0:	muleq	r1, ip, sl
   1e9d4:	muleq	r1, ip, sl
   1e9d8:	andeq	lr, r1, r0, lsl #20
   1e9dc:	vmov.f32	s1, s6
   1e9e0:	mov	r3, #1
   1e9e4:	b	1ea28 <__assert_fail@plt+0xbe38>
   1e9e8:	mov	r3, #3
   1e9ec:	vmov.f32	s1, s10
   1e9f0:	b	1ea28 <__assert_fail@plt+0xbe38>
   1e9f4:	mov	r3, #2
   1e9f8:	vmov.f32	s1, s8
   1e9fc:	b	1ea28 <__assert_fail@plt+0xbe38>
   1ea00:	mov	r3, #5
   1ea04:	vmov.f32	s1, s14
   1ea08:	b	1ea28 <__assert_fail@plt+0xbe38>
   1ea0c:	cmp	r3, #115	; 0x73
   1ea10:	bne	1ea9c <__assert_fail@plt+0xbeac>
   1ea14:	mov	r3, #6
   1ea18:	vmov.f32	s1, s4
   1ea1c:	b	1ea28 <__assert_fail@plt+0xbe38>
   1ea20:	mov	r3, #4
   1ea24:	vmov.f32	s1, s12
   1ea28:	ldrb	r7, [r1, r3]
   1ea2c:	cmp	r7, #0
   1ea30:	bne	1eac0 <__assert_fail@plt+0xbed0>
   1ea34:	vadd.f32	s0, s1, s0
   1ea38:	mov	r5, r6
   1ea3c:	vstr	s0, [r0, #28]
   1ea40:	strb	r2, [r1, r3]
   1ea44:	ldrb	r3, [r5, #1]!
   1ea48:	cmp	r3, #0
   1ea4c:	beq	1e974 <__assert_fail@plt+0xbd84>
   1ea50:	cmp	r3, #44	; 0x2c
   1ea54:	bne	1eaec <__assert_fail@plt+0xbefc>
   1ea58:	ldrb	r3, [r6, #2]!
   1ea5c:	mov	r5, r6
   1ea60:	cmp	r3, #0
   1ea64:	bne	1e974 <__assert_fail@plt+0xbd84>
   1ea68:	movw	r1, #3531	; 0xdcb
   1ea6c:	movt	r1, #4
   1ea70:	b	1eaf4 <__assert_fail@plt+0xbf04>
   1ea74:	cmp	r3, #0
   1ea78:	bne	1ea88 <__assert_fail@plt+0xbe98>
   1ea7c:	mov	r0, #1
   1ea80:	sub	sp, fp, #24
   1ea84:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1ea88:	cmp	r3, #68	; 0x44
   1ea8c:	bne	1ea9c <__assert_fail@plt+0xbeac>
   1ea90:	movw	r1, #3300	; 0xce4
   1ea94:	movt	r1, #4
   1ea98:	b	1eaa4 <__assert_fail@plt+0xbeb4>
   1ea9c:	movw	r1, #3401	; 0xd49
   1eaa0:	movt	r1, #4
   1eaa4:	mov	r0, #0
   1eaa8:	mov	r2, #5
   1eaac:	bl	12674 <dcgettext@plt>
   1eab0:	mov	r2, r0
   1eab4:	ldrb	r0, [r6]
   1eab8:	str	r0, [sp]
   1eabc:	b	1eb04 <__assert_fail@plt+0xbf14>
   1eac0:	movw	r1, #3428	; 0xd64
   1eac4:	mov	r0, #0
   1eac8:	mov	r2, #5
   1eacc:	movt	r1, #4
   1ead0:	bl	12674 <dcgettext@plt>
   1ead4:	ldrb	r3, [r6]
   1ead8:	mov	r2, r0
   1eadc:	mov	r0, #1
   1eae0:	mov	r1, #0
   1eae4:	str	r8, [sp]
   1eae8:	bl	127b8 <error@plt>
   1eaec:	movw	r1, #3481	; 0xd99
   1eaf0:	movt	r1, #4
   1eaf4:	mov	r0, #0
   1eaf8:	mov	r2, #5
   1eafc:	bl	12674 <dcgettext@plt>
   1eb00:	mov	r2, r0
   1eb04:	mov	r0, #1
   1eb08:	mov	r1, #0
   1eb0c:	mov	r3, r8
   1eb10:	bl	127b8 <error@plt>
   1eb14:	movw	r1, #3249	; 0xcb1
   1eb18:	movt	r1, #4
   1eb1c:	b	1eaf4 <__assert_fail@plt+0xbf04>
   1eb20:	andeq	r0, r0, r0
   1eb24:	bcc	1a50ddc <stdout@@GLIBC_2.4+0x19fc868>
   1eb28:			; <UNDEFINED> instruction: 0x378560fd
   1eb2c:	usatcc	r7, #29, lr, asr #16
   1eb30:	cfldr64cc	mvdx12, [lr], #436	; 0x1b4
   1eb34:	ldccc	3, cr13, [ip, #364]!	; 0x16c
   1eb38:	stmibcc	r8!, {r2, r4, r5, r6, r9, lr}^
   1eb3c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1eb40:	add	fp, sp, #28
   1eb44:	sub	sp, sp, #20
   1eb48:	movw	r5, #19708	; 0x4cfc
   1eb4c:	str	r1, [sp, #12]
   1eb50:	str	r0, [sp, #16]
   1eb54:	ldr	r4, [r0, #12]
   1eb58:	ldr	r0, [fp, #20]
   1eb5c:	ldr	r1, [fp, #12]
   1eb60:	mov	r9, r3
   1eb64:	mov	r7, r2
   1eb68:	movt	r5, #5
   1eb6c:	ldr	r6, [r5]
   1eb70:	cmp	r6, #0
   1eb74:	bne	1eb94 <__assert_fail@plt+0xbfa4>
   1eb78:	mov	r8, r0
   1eb7c:	add	r0, r4, #1
   1eb80:	bl	2a688 <__assert_fail@plt+0x17a98>
   1eb84:	ldr	r1, [fp, #12]
   1eb88:	mov	r6, r0
   1eb8c:	mov	r0, r8
   1eb90:	str	r6, [r5]
   1eb94:	sub	sl, r4, #1
   1eb98:	add	r5, r0, r1
   1eb9c:	ldr	r0, [sp, #16]
   1eba0:	ldr	r1, [r0, #24]
   1eba4:	mov	r0, r7
   1eba8:	bl	23508 <__assert_fail@plt+0x10918>
   1ebac:	cmp	r0, #0
   1ebb0:	mov	r4, r9
   1ebb4:	subne	r4, r0, r7
   1ebb8:	cmp	sl, r4
   1ebbc:	bls	1ec48 <__assert_fail@plt+0xc058>
   1ebc0:	mov	r8, r0
   1ebc4:	mov	r0, r6
   1ebc8:	mov	r1, r7
   1ebcc:	mov	r2, r4
   1ebd0:	bl	1295c <strncpy@plt>
   1ebd4:	sub	r9, r9, r4
   1ebd8:	add	r7, r7, r4
   1ebdc:	add	r6, r6, r4
   1ebe0:	sub	sl, sl, r4
   1ebe4:	cmp	r8, #0
   1ebe8:	beq	1ec38 <__assert_fail@plt+0xc048>
   1ebec:	ldr	r4, [fp, #12]
   1ebf0:	ldr	r1, [fp, #8]
   1ebf4:	cmp	sl, r5
   1ebf8:	bls	1ec48 <__assert_fail@plt+0xc058>
   1ebfc:	cmp	r1, #0
   1ec00:	beq	1ec10 <__assert_fail@plt+0xc020>
   1ec04:	mov	r0, r6
   1ec08:	bl	12770 <strcpy@plt>
   1ec0c:	add	r6, r6, r4
   1ec10:	ldr	r1, [fp, #16]
   1ec14:	mov	r0, r6
   1ec18:	sub	sl, sl, r5
   1ec1c:	bl	12770 <strcpy@plt>
   1ec20:	ldr	r0, [fp, #20]
   1ec24:	add	r6, r6, r0
   1ec28:	ldr	r0, [sp, #16]
   1ec2c:	ldr	r0, [r0, #20]
   1ec30:	sub	r9, r9, r0
   1ec34:	add	r7, r7, r0
   1ec38:	ldrb	r0, [r7]
   1ec3c:	cmp	r0, #0
   1ec40:	bne	1eb9c <__assert_fail@plt+0xbfac>
   1ec44:	b	1ec54 <__assert_fail@plt+0xc064>
   1ec48:	ldrb	r0, [r7]
   1ec4c:	cmp	r0, #0
   1ec50:	bne	1ec94 <__assert_fail@plt+0xc0a4>
   1ec54:	movw	r1, #19708	; 0x4cfc
   1ec58:	mov	r0, #0
   1ec5c:	movt	r1, #5
   1ec60:	strb	r0, [r6]
   1ec64:	str	r0, [sp]
   1ec68:	str	r0, [sp, #4]
   1ec6c:	ldr	r0, [fp, #24]
   1ec70:	ldr	r2, [r1]
   1ec74:	ldr	r1, [sp, #12]
   1ec78:	str	r0, [sp, #8]
   1ec7c:	sub	r0, r6, r2
   1ec80:	add	r3, r0, #1
   1ec84:	ldr	r0, [sp, #16]
   1ec88:	bl	1ecb8 <__assert_fail@plt+0xc0c8>
   1ec8c:	sub	sp, fp, #28
   1ec90:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ec94:	movw	r1, #5244	; 0x147c
   1ec98:	mov	r0, #0
   1ec9c:	mov	r2, #5
   1eca0:	movt	r1, #4
   1eca4:	bl	12674 <dcgettext@plt>
   1eca8:	mov	r2, r0
   1ecac:	mov	r0, #1
   1ecb0:	mov	r1, #0
   1ecb4:	bl	127b8 <error@plt>
   1ecb8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ecbc:	add	fp, sp, #28
   1ecc0:	sub	sp, sp, #4
   1ecc4:	cmp	r2, #0
   1ecc8:	beq	1eed8 <__assert_fail@plt+0xc2e8>
   1eccc:	movw	sl, #6083	; 0x17c3
   1ecd0:	mov	r5, r0
   1ecd4:	ldr	r6, [fp, #16]
   1ecd8:	ldr	r0, [fp, #12]
   1ecdc:	mov	r9, r3
   1ece0:	mov	r8, r2
   1ece4:	mov	r4, r1
   1ece8:	movt	sl, #4
   1ecec:	cmp	r2, sl
   1ecf0:	beq	1eda4 <__assert_fail@plt+0xc1b4>
   1ecf4:	ldr	r1, [r4, #16]
   1ecf8:	add	r0, r0, r9
   1ecfc:	add	r0, r0, r1
   1ed00:	ldr	r1, [r5, #12]
   1ed04:	cmp	r0, r1
   1ed08:	bls	1ed60 <__assert_fail@plt+0xc170>
   1ed0c:	cmp	r6, #0
   1ed10:	bne	1eef8 <__assert_fail@plt+0xc308>
   1ed14:	ldr	r0, [r5, #28]
   1ed18:	ldr	r1, [r4]
   1ed1c:	cmp	r1, r0
   1ed20:	beq	1eef8 <__assert_fail@plt+0xc308>
   1ed24:	ldr	r0, [r5, #24]
   1ed28:	cmp	r0, #0
   1ed2c:	bne	1ef04 <__assert_fail@plt+0xc314>
   1ed30:	ldr	r0, [r5]
   1ed34:	cmp	r0, #0
   1ed38:	beq	1ed50 <__assert_fail@plt+0xc160>
   1ed3c:	ldr	r0, [r5, #36]	; 0x24
   1ed40:	cmp	r0, #0
   1ed44:	ldreq	r0, [r5, #40]	; 0x28
   1ed48:	cmpeq	r0, #0
   1ed4c:	bne	1ef04 <__assert_fail@plt+0xc314>
   1ed50:	mov	r0, r5
   1ed54:	mov	r1, r4
   1ed58:	bl	1ef28 <__assert_fail@plt+0xc338>
   1ed5c:	b	1ed68 <__assert_fail@plt+0xc178>
   1ed60:	cmp	r6, #0
   1ed64:	bne	1ed88 <__assert_fail@plt+0xc198>
   1ed68:	ldr	r0, [r5, #40]	; 0x28
   1ed6c:	cmp	r0, #0
   1ed70:	beq	1ed88 <__assert_fail@plt+0xc198>
   1ed74:	ldr	r1, [r5, #28]
   1ed78:	ldr	r2, [r4]
   1ed7c:	sub	r1, r2, r1
   1ed80:	cmp	r1, r0
   1ed84:	beq	1ed98 <__assert_fail@plt+0xc1a8>
   1ed88:	ldr	r0, [r5, #16]
   1ed8c:	ldr	r1, [r4]
   1ed90:	cmp	r1, r0
   1ed94:	bne	1eda4 <__assert_fail@plt+0xc1b4>
   1ed98:	mov	r0, r5
   1ed9c:	mov	r1, r4
   1eda0:	bl	1ef28 <__assert_fail@plt+0xc338>
   1eda4:	cmp	r6, #0
   1eda8:	moveq	r0, #1
   1edac:	streq	r0, [r4, #28]
   1edb0:	ldr	r0, [r4]
   1edb4:	ldr	r1, [r4, #8]
   1edb8:	cmp	r0, r1
   1edbc:	bcc	1edf4 <__assert_fail@plt+0xc204>
   1edc0:	ldr	r0, [r4, #4]
   1edc4:	cmp	r0, #0
   1edc8:	beq	1ede0 <__assert_fail@plt+0xc1f0>
   1edcc:	lsl	r2, r1, #1
   1edd0:	lsl	r1, r1, #3
   1edd4:	str	r2, [r4, #8]
   1edd8:	bl	2a6d0 <__assert_fail@plt+0x17ae0>
   1eddc:	b	1edf0 <__assert_fail@plt+0xc200>
   1ede0:	mov	r0, #64	; 0x40
   1ede4:	str	r0, [r4, #8]
   1ede8:	mov	r0, #256	; 0x100
   1edec:	bl	2a688 <__assert_fail@plt+0x17a98>
   1edf0:	str	r0, [r4, #4]
   1edf4:	cmp	r8, sl
   1edf8:	beq	1ee80 <__assert_fail@plt+0xc290>
   1edfc:	mov	sl, r6
   1ee00:	ldr	r1, [fp, #8]
   1ee04:	ldm	r4, {r2, r3}
   1ee08:	ldr	r6, [r4, #12]
   1ee0c:	ldr	r0, [r4, #16]
   1ee10:	add	r7, r2, #1
   1ee14:	str	r7, [r4]
   1ee18:	add	r7, r6, r0
   1ee1c:	cmp	r1, #0
   1ee20:	str	r7, [r3, r2, lsl #2]
   1ee24:	beq	1ee44 <__assert_fail@plt+0xc254>
   1ee28:	ldr	r2, [r4, #12]
   1ee2c:	add	r0, r2, r0
   1ee30:	bl	12770 <strcpy@plt>
   1ee34:	ldr	r0, [r4, #16]
   1ee38:	ldr	r1, [fp, #12]
   1ee3c:	add	r0, r0, r1
   1ee40:	str	r0, [r4, #16]
   1ee44:	ldr	r1, [r4, #12]
   1ee48:	mov	r6, sl
   1ee4c:	add	r0, r1, r0
   1ee50:	mov	r1, r8
   1ee54:	bl	12770 <strcpy@plt>
   1ee58:	ldr	r0, [r4, #16]
   1ee5c:	cmp	sl, #0
   1ee60:	add	r0, r0, r9
   1ee64:	str	r0, [r4, #16]
   1ee68:	beq	1ee98 <__assert_fail@plt+0xc2a8>
   1ee6c:	ldr	r0, [r5, #16]
   1ee70:	ldr	r1, [r4]
   1ee74:	cmp	r1, r0
   1ee78:	beq	1eeb8 <__assert_fail@plt+0xc2c8>
   1ee7c:	b	1eec4 <__assert_fail@plt+0xc2d4>
   1ee80:	ldm	r4, {r0, r1}
   1ee84:	add	r2, r0, #1
   1ee88:	str	r2, [r4]
   1ee8c:	mov	r2, #0
   1ee90:	str	r2, [r1, r0, lsl #2]
   1ee94:	b	1eec4 <__assert_fail@plt+0xc2d4>
   1ee98:	ldr	r0, [r5, #40]	; 0x28
   1ee9c:	cmp	r0, #0
   1eea0:	beq	1ee6c <__assert_fail@plt+0xc27c>
   1eea4:	ldr	r1, [r5, #28]
   1eea8:	ldr	r2, [r4]
   1eeac:	sub	r1, r2, r1
   1eeb0:	cmp	r1, r0
   1eeb4:	bne	1ee6c <__assert_fail@plt+0xc27c>
   1eeb8:	mov	r0, r5
   1eebc:	mov	r1, r4
   1eec0:	bl	1ef28 <__assert_fail@plt+0xc338>
   1eec4:	cmp	r6, #0
   1eec8:	ldrne	r0, [r4, #16]
   1eecc:	strne	r0, [r4, #20]
   1eed0:	sub	sp, fp, #28
   1eed4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1eed8:	movw	r0, #5455	; 0x154f
   1eedc:	movw	r1, #5281	; 0x14a1
   1eee0:	movw	r3, #5467	; 0x155b
   1eee4:	movw	r2, #341	; 0x155
   1eee8:	movt	r0, #4
   1eeec:	movt	r1, #4
   1eef0:	movt	r3, #4
   1eef4:	bl	12bf0 <__assert_fail@plt>
   1eef8:	movw	r1, #5585	; 0x15d1
   1eefc:	movt	r1, #4
   1ef00:	b	1ef0c <__assert_fail@plt+0xc31c>
   1ef04:	movw	r1, #5644	; 0x160c
   1ef08:	movt	r1, #4
   1ef0c:	mov	r0, #0
   1ef10:	mov	r2, #5
   1ef14:	bl	12674 <dcgettext@plt>
   1ef18:	mov	r2, r0
   1ef1c:	mov	r0, #1
   1ef20:	mov	r1, #0
   1ef24:	bl	127b8 <error@plt>
   1ef28:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ef2c:	add	fp, sp, #28
   1ef30:	sub	sp, sp, #12
   1ef34:	movw	r2, #6083	; 0x17c3
   1ef38:	mov	sl, r0
   1ef3c:	mov	r0, #0
   1ef40:	mov	r3, #0
   1ef44:	mov	r8, r1
   1ef48:	movt	r2, #4
   1ef4c:	str	r0, [sp]
   1ef50:	str	r0, [sp, #4]
   1ef54:	str	r0, [sp, #8]
   1ef58:	mov	r0, sl
   1ef5c:	bl	1ecb8 <__assert_fail@plt+0xc0c8>
   1ef60:	ldr	r0, [r8]
   1ef64:	cmp	r0, #0
   1ef68:	beq	1f118 <__assert_fail@plt+0xc528>
   1ef6c:	ldr	r1, [r8, #4]
   1ef70:	add	r1, r1, r0, lsl #2
   1ef74:	ldr	r1, [r1, #-4]
   1ef78:	cmp	r1, #0
   1ef7c:	bne	1f130 <__assert_fail@plt+0xc540>
   1ef80:	mov	r1, #4
   1ef84:	add	r0, r1, r0, lsl #2
   1ef88:	bl	2a688 <__assert_fail@plt+0x17a98>
   1ef8c:	ldr	r1, [r8]
   1ef90:	mov	r9, r0
   1ef94:	ldr	r0, [sl, #28]
   1ef98:	mov	r5, #0
   1ef9c:	mov	r7, r1
   1efa0:	cmp	r0, #0
   1efa4:	beq	1efc4 <__assert_fail@plt+0xc3d4>
   1efa8:	ldr	r2, [r8, #4]
   1efac:	mov	r3, r0
   1efb0:	mov	r6, r9
   1efb4:	ldr	r4, [r2], #4
   1efb8:	subs	r3, r3, #1
   1efbc:	str	r4, [r6], #4
   1efc0:	bne	1efb4 <__assert_fail@plt+0xc3c4>
   1efc4:	cmp	r0, r7
   1efc8:	mov	r4, r0
   1efcc:	bcs	1f00c <__assert_fail@plt+0xc41c>
   1efd0:	add	r2, r0, r5
   1efd4:	mov	r4, r0
   1efd8:	cmp	r2, r1
   1efdc:	bcs	1f00c <__assert_fail@plt+0xc41c>
   1efe0:	ldr	r2, [r8, #4]
   1efe4:	add	r3, r5, #1
   1efe8:	mov	r4, r0
   1efec:	add	r2, r2, r5, lsl #2
   1eff0:	ldr	r6, [r2, r4, lsl #2]
   1eff4:	str	r6, [r9, r4, lsl #2]
   1eff8:	add	r6, r3, r4
   1effc:	add	r4, r4, #1
   1f000:	cmp	r6, r1
   1f004:	cmpcc	r4, r7
   1f008:	bcc	1eff0 <__assert_fail@plt+0xc400>
   1f00c:	cmp	r4, r0
   1f010:	bcc	1f0d4 <__assert_fail@plt+0xc4e4>
   1f014:	mov	r0, #0
   1f018:	mov	r2, r4
   1f01c:	mov	r3, r9
   1f020:	str	r0, [r9, r4, lsl #2]
   1f024:	mov	r0, sl
   1f028:	ldr	r1, [r8, #24]
   1f02c:	ldr	r6, [sl, #32]
   1f030:	blx	r6
   1f034:	cmp	r0, #0
   1f038:	beq	1f064 <__assert_fail@plt+0xc474>
   1f03c:	mov	r0, sl
   1f040:	mov	r1, r8
   1f044:	mov	r2, #1
   1f048:	mov	r3, r7
   1f04c:	bl	1f150 <__assert_fail@plt+0xc560>
   1f050:	mov	r7, r0
   1f054:	ldr	r0, [sl, #28]
   1f058:	add	r1, r4, r5
   1f05c:	sub	r5, r1, r0
   1f060:	b	1f090 <__assert_fail@plt+0xc4a0>
   1f064:	ldr	r0, [sl, #28]
   1f068:	add	r0, r0, #1
   1f06c:	cmp	r7, r0
   1f070:	bls	1f0f4 <__assert_fail@plt+0xc504>
   1f074:	mov	r0, sl
   1f078:	mov	r1, r8
   1f07c:	mov	r2, #0
   1f080:	mov	r3, r7
   1f084:	bl	1f150 <__assert_fail@plt+0xc560>
   1f088:	mov	r7, r0
   1f08c:	ldr	r0, [sl, #28]
   1f090:	ldr	r1, [r8]
   1f094:	add	r3, r5, #1
   1f098:	sub	r2, r1, r0
   1f09c:	cmp	r3, r2
   1f0a0:	bcc	1efa0 <__assert_fail@plt+0xc3b0>
   1f0a4:	mov	r0, r9
   1f0a8:	bl	2bcbc <__assert_fail@plt+0x190cc>
   1f0ac:	ldr	r0, [sl, #28]
   1f0b0:	mov	r2, #0
   1f0b4:	mvn	r1, #0
   1f0b8:	str	r2, [r8, #28]
   1f0bc:	str	r1, [r8, #32]
   1f0c0:	str	r0, [r8]
   1f0c4:	ldr	r0, [r8, #20]
   1f0c8:	str	r0, [r8, #16]
   1f0cc:	sub	sp, fp, #28
   1f0d0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f0d4:	movw	r0, #5960	; 0x1748
   1f0d8:	movw	r1, #5281	; 0x14a1
   1f0dc:	movw	r3, #5989	; 0x1765
   1f0e0:	mov	r2, #242	; 0xf2
   1f0e4:	movt	r0, #4
   1f0e8:	movt	r1, #4
   1f0ec:	movt	r3, #4
   1f0f0:	bl	12bf0 <__assert_fail@plt>
   1f0f4:	movw	r1, #5403	; 0x151b
   1f0f8:	mov	r0, #0
   1f0fc:	mov	r2, #5
   1f100:	movt	r1, #4
   1f104:	bl	12674 <dcgettext@plt>
   1f108:	mov	r2, r0
   1f10c:	mov	r0, #1
   1f110:	mov	r1, #0
   1f114:	bl	127b8 <error@plt>
   1f118:	movw	r0, #5261	; 0x148d
   1f11c:	movw	r1, #5281	; 0x14a1
   1f120:	movw	r3, #5292	; 0x14ac
   1f124:	movw	r2, #261	; 0x105
   1f128:	movt	r0, #4
   1f12c:	b	1f144 <__assert_fail@plt+0xc554>
   1f130:	movw	r0, #5360	; 0x14f0
   1f134:	movw	r1, #5281	; 0x14a1
   1f138:	movw	r3, #5292	; 0x14ac
   1f13c:	movw	r2, #262	; 0x106
   1f140:	movt	r0, #4
   1f144:	movt	r1, #4
   1f148:	movt	r3, #4
   1f14c:	bl	12bf0 <__assert_fail@plt>
   1f150:	cmp	r2, #0
   1f154:	beq	1f168 <__assert_fail@plt+0xc578>
   1f158:	ldr	ip, [r1, #36]	; 0x24
   1f15c:	cmp	ip, r3
   1f160:	strcc	r3, [r1, #36]	; 0x24
   1f164:	b	1f178 <__assert_fail@plt+0xc588>
   1f168:	ldr	ip, [r1, #40]	; 0x28
   1f16c:	sub	ip, ip, #1
   1f170:	cmp	ip, r3
   1f174:	strcs	r3, [r1, #40]	; 0x28
   1f178:	ldr	ip, [r1, #36]	; 0x24
   1f17c:	cmp	ip, #0
   1f180:	beq	1f1b0 <__assert_fail@plt+0xc5c0>
   1f184:	ldr	r1, [r1, #40]	; 0x28
   1f188:	cmp	r1, ip
   1f18c:	bls	1f1b0 <__assert_fail@plt+0xc5c0>
   1f190:	sub	r1, r1, ip
   1f194:	cmp	r2, #0
   1f198:	lsr	r1, r1, #1
   1f19c:	beq	1f1cc <__assert_fail@plt+0xc5dc>
   1f1a0:	cmp	r1, #0
   1f1a4:	addeq	r1, r3, #1
   1f1a8:	addne	r1, r1, r3
   1f1ac:	b	1f1d8 <__assert_fail@plt+0xc5e8>
   1f1b0:	cmp	r2, #0
   1f1b4:	beq	1f1c4 <__assert_fail@plt+0xc5d4>
   1f1b8:	adds	r1, r3, #1
   1f1bc:	mvncs	r1, #0
   1f1c0:	b	1f1d8 <__assert_fail@plt+0xc5e8>
   1f1c4:	lsr	r1, r3, #1
   1f1c8:	b	1f1d8 <__assert_fail@plt+0xc5e8>
   1f1cc:	cmp	r1, #0
   1f1d0:	subeq	r1, r3, #1
   1f1d4:	subne	r1, r3, r1
   1f1d8:	ldr	r0, [r0, #28]
   1f1dc:	cmp	r0, #0
   1f1e0:	beq	1f1f4 <__assert_fail@plt+0xc604>
   1f1e4:	add	r0, r0, #1
   1f1e8:	cmp	r1, r0
   1f1ec:	movhi	r0, r1
   1f1f0:	b	1f1f8 <__assert_fail@plt+0xc608>
   1f1f4:	mov	r0, r1
   1f1f8:	cmp	r0, #0
   1f1fc:	movweq	r0, #1
   1f200:	bx	lr
   1f204:	ldr	r0, [r0, #28]
   1f208:	mov	r3, #0
   1f20c:	mvn	r2, #0
   1f210:	str	r3, [r1, #28]
   1f214:	str	r2, [r1, #32]
   1f218:	str	r0, [r1]
   1f21c:	ldr	r0, [r1, #20]
   1f220:	str	r0, [r1, #16]
   1f224:	bx	lr
   1f228:	push	{fp, lr}
   1f22c:	mov	fp, sp
   1f230:	mov	r0, #0
   1f234:	bl	1268c <sysconf@plt>
   1f238:	cmp	r0, #0
   1f23c:	mvnle	r0, #-2147483648	; 0x80000000
   1f240:	pop	{fp, pc}
   1f244:	push	{r4, r5, fp, lr}
   1f248:	add	fp, sp, #8
   1f24c:	movw	r0, #17756	; 0x455c
   1f250:	movt	r0, #5
   1f254:	ldr	r1, [r0]
   1f258:	ldr	r0, [r1]
   1f25c:	cmp	r0, #0
   1f260:	beq	1f288 <__assert_fail@plt+0xc698>
   1f264:	add	r5, r1, #4
   1f268:	mov	r4, #0
   1f26c:	bl	128c0 <strlen@plt>
   1f270:	add	r0, r4, r0
   1f274:	add	r4, r0, #1
   1f278:	ldr	r0, [r5], #4
   1f27c:	cmp	r0, #0
   1f280:	bne	1f26c <__assert_fail@plt+0xc67c>
   1f284:	b	1f28c <__assert_fail@plt+0xc69c>
   1f288:	mov	r4, #0
   1f28c:	mov	r0, r4
   1f290:	pop	{r4, r5, fp, pc}
   1f294:	push	{r4, r5, r6, r7, fp, lr}
   1f298:	add	fp, sp, #16
   1f29c:	mov	r5, r1
   1f2a0:	mov	r4, r0
   1f2a4:	bl	1f244 <__assert_fail@plt+0xc654>
   1f2a8:	mov	r6, r0
   1f2ac:	mov	r0, #4096	; 0x1000
   1f2b0:	mov	r7, #0
   1f2b4:	str	r0, [r4, #8]
   1f2b8:	mov	r0, #0
   1f2bc:	bl	1268c <sysconf@plt>
   1f2c0:	cmp	r0, #0
   1f2c4:	mov	r1, r0
   1f2c8:	mov	r0, #1
   1f2cc:	str	r7, [r4]
   1f2d0:	mvnle	r1, #-2147483648	; 0x80000000
   1f2d4:	cmp	r1, r6
   1f2d8:	str	r1, [r4, #4]
   1f2dc:	bcc	1f338 <__assert_fail@plt+0xc748>
   1f2e0:	add	r2, r6, r5
   1f2e4:	mov	r0, #2
   1f2e8:	cmp	r2, r1
   1f2ec:	bcs	1f338 <__assert_fail@plt+0xc748>
   1f2f0:	sub	r0, r1, r6
   1f2f4:	sub	r1, r0, r5
   1f2f8:	mvn	r0, #1
   1f2fc:	add	r0, r0, r1, lsr #2
   1f300:	str	r1, [r4, #4]
   1f304:	cmp	r0, #0
   1f308:	str	r0, [r4, #16]
   1f30c:	beq	1f33c <__assert_fail@plt+0xc74c>
   1f310:	movw	r2, #62300	; 0xf35c
   1f314:	mov	r0, #0
   1f318:	movt	r2, #1
   1f31c:	str	r0, [r4, #20]
   1f320:	str	r0, [r4, #24]
   1f324:	str	r0, [r4, #28]
   1f328:	str	r2, [r4, #32]
   1f32c:	str	r0, [r4, #36]	; 0x24
   1f330:	str	r0, [r4, #40]	; 0x28
   1f334:	str	r1, [r4, #12]
   1f338:	pop	{r4, r5, r6, r7, fp, pc}
   1f33c:	movw	r0, #5667	; 0x1623
   1f340:	movw	r1, #5281	; 0x14a1
   1f344:	movw	r3, #5690	; 0x163a
   1f348:	movw	r2, #518	; 0x206
   1f34c:	movt	r0, #4
   1f350:	movt	r1, #4
   1f354:	movt	r3, #4
   1f358:	bl	12bf0 <__assert_fail@plt>
   1f35c:	mov	r0, #0
   1f360:	bx	lr
   1f364:	ldr	r1, [r0, #4]
   1f368:	mov	r2, #0
   1f36c:	cmp	r2, r1, lsr #17
   1f370:	beq	1f380 <__assert_fail@plt+0xc790>
   1f374:	ldr	r1, [r0, #8]
   1f378:	cmp	r1, #131072	; 0x20000
   1f37c:	movls	r1, #131072	; 0x20000
   1f380:	str	r1, [r0, #12]
   1f384:	bx	lr
   1f388:	push	{r4, r5, r6, sl, fp, lr}
   1f38c:	add	fp, sp, #16
   1f390:	mov	r6, #0
   1f394:	mov	r4, r1
   1f398:	str	r6, [r1, #16]
   1f39c:	str	r6, [r1, #36]	; 0x24
   1f3a0:	str	r6, [r1, #40]	; 0x28
   1f3a4:	str	r6, [r1]
   1f3a8:	str	r6, [r1, #4]
   1f3ac:	str	r6, [r1, #8]
   1f3b0:	movw	r1, #63488	; 0xf800
   1f3b4:	ldr	r0, [r0, #12]
   1f3b8:	movt	r1, #32767	; 0x7fff
   1f3bc:	cmp	r0, r1
   1f3c0:	bcs	1f3f0 <__assert_fail@plt+0xc800>
   1f3c4:	add	r0, r0, #1
   1f3c8:	mov	r5, r2
   1f3cc:	bl	2a688 <__assert_fail@plt+0x17a98>
   1f3d0:	mvn	r1, #0
   1f3d4:	str	r0, [r4, #12]
   1f3d8:	str	r6, [r4, #16]
   1f3dc:	str	r6, [r4, #20]
   1f3e0:	str	r5, [r4, #24]
   1f3e4:	str	r6, [r4, #28]
   1f3e8:	str	r1, [r4, #32]
   1f3ec:	pop	{r4, r5, r6, sl, fp, pc}
   1f3f0:	movw	r0, #5765	; 0x1685
   1f3f4:	movw	r1, #5281	; 0x14a1
   1f3f8:	movw	r3, #5800	; 0x16a8
   1f3fc:	mov	r2, #572	; 0x23c
   1f400:	movt	r0, #4
   1f404:	movt	r1, #4
   1f408:	movt	r3, #4
   1f40c:	bl	12bf0 <__assert_fail@plt>
   1f410:	push	{r4, r5, r6, sl, fp, lr}
   1f414:	add	fp, sp, #16
   1f418:	mov	r1, r0
   1f41c:	ldr	r0, [r0]
   1f420:	cmp	r0, #0
   1f424:	beq	1f450 <__assert_fail@plt+0xc860>
   1f428:	add	r6, r1, #4
   1f42c:	mov	r5, #0
   1f430:	mov	r4, #0
   1f434:	bl	128c0 <strlen@plt>
   1f438:	add	r4, r0, r4
   1f43c:	ldr	r0, [r6, r5, lsl #2]
   1f440:	add	r5, r5, #1
   1f444:	cmp	r0, #0
   1f448:	bne	1f434 <__assert_fail@plt+0xc844>
   1f44c:	b	1f458 <__assert_fail@plt+0xc868>
   1f450:	mov	r4, #0
   1f454:	mov	r5, #0
   1f458:	movw	r0, #5885	; 0x16fd
   1f45c:	mov	r1, r5
   1f460:	movt	r0, #4
   1f464:	bl	1f494 <__assert_fail@plt+0xc8a4>
   1f468:	mov	r1, r0
   1f46c:	mov	r0, #1
   1f470:	cmp	r1, #0
   1f474:	popne	{r4, r5, r6, sl, fp, pc}
   1f478:	movw	r0, #5922	; 0x1722
   1f47c:	mov	r1, r4
   1f480:	movt	r0, #4
   1f484:	bl	1f494 <__assert_fail@plt+0xc8a4>
   1f488:	cmp	r0, #0
   1f48c:	movwne	r0, #1
   1f490:	pop	{r4, r5, r6, sl, fp, pc}
   1f494:	push	{r4, r5, fp, lr}
   1f498:	add	fp, sp, #8
   1f49c:	sub	sp, sp, #16
   1f4a0:	mov	r5, r1
   1f4a4:	mov	r4, r0
   1f4a8:	bl	127f4 <getenv@plt>
   1f4ac:	cmp	r0, #0
   1f4b0:	beq	1f4e8 <__assert_fail@plt+0xc8f8>
   1f4b4:	mov	r1, #0
   1f4b8:	add	r3, sp, #8
   1f4bc:	mov	r2, #10
   1f4c0:	str	r1, [sp]
   1f4c4:	add	r1, sp, #12
   1f4c8:	bl	2ab90 <__assert_fail@plt+0x17fa0>
   1f4cc:	cmp	r0, #0
   1f4d0:	bne	1f4f4 <__assert_fail@plt+0xc904>
   1f4d4:	ldr	r1, [sp, #8]
   1f4d8:	mov	r0, #1
   1f4dc:	cmp	r1, r5
   1f4e0:	movcs	r0, #0
   1f4e4:	b	1f4ec <__assert_fail@plt+0xc8fc>
   1f4e8:	mov	r0, #0
   1f4ec:	sub	sp, fp, #8
   1f4f0:	pop	{r4, r5, fp, pc}
   1f4f4:	bl	12908 <__errno_location@plt>
   1f4f8:	movw	r1, #6095	; 0x17cf
   1f4fc:	ldr	r5, [r0]
   1f500:	mov	r0, #0
   1f504:	mov	r2, #5
   1f508:	movt	r1, #4
   1f50c:	bl	12674 <dcgettext@plt>
   1f510:	mov	r2, r0
   1f514:	mov	r0, #1
   1f518:	mov	r1, r5
   1f51c:	mov	r3, r4
   1f520:	bl	127b8 <error@plt>
   1f524:	push	{r4, r5, r6, sl, fp, lr}
   1f528:	add	fp, sp, #16
   1f52c:	sub	sp, sp, #8
   1f530:	mov	r6, r0
   1f534:	mov	r0, sp
   1f538:	mov	r5, r2
   1f53c:	mov	r4, r1
   1f540:	bl	299ec <__assert_fail@plt+0x16dfc>
   1f544:	cmp	r0, #0
   1f548:	bne	1f5bc <__assert_fail@plt+0xc9cc>
   1f54c:	mov	r0, r6
   1f550:	bl	29a40 <__assert_fail@plt+0x16e50>
   1f554:	cmp	r0, #0
   1f558:	bne	1f5b0 <__assert_fail@plt+0xc9c0>
   1f55c:	mov	r0, r5
   1f560:	blx	r4
   1f564:	mov	r4, r0
   1f568:	mov	r5, #0
   1f56c:	cmn	r0, #1
   1f570:	bgt	1f57c <__assert_fail@plt+0xc98c>
   1f574:	bl	12908 <__errno_location@plt>
   1f578:	ldr	r5, [r0]
   1f57c:	mov	r0, sp
   1f580:	bl	29a40 <__assert_fail@plt+0x16e50>
   1f584:	cmp	r0, #0
   1f588:	bne	1f5b0 <__assert_fail@plt+0xc9c0>
   1f58c:	mov	r0, sp
   1f590:	bl	29a5c <__assert_fail@plt+0x16e6c>
   1f594:	cmp	r5, #0
   1f598:	beq	1f5a4 <__assert_fail@plt+0xc9b4>
   1f59c:	bl	12908 <__errno_location@plt>
   1f5a0:	str	r5, [r0]
   1f5a4:	mov	r0, r4
   1f5a8:	sub	sp, fp, #16
   1f5ac:	pop	{r4, r5, r6, sl, fp, pc}
   1f5b0:	bl	12908 <__errno_location@plt>
   1f5b4:	ldr	r0, [r0]
   1f5b8:	bl	249b4 <__assert_fail@plt+0x11dc4>
   1f5bc:	bl	12908 <__errno_location@plt>
   1f5c0:	ldr	r0, [r0]
   1f5c4:	bl	24974 <__assert_fail@plt+0x11d84>
   1f5c8:	push	{r4, r5, r6, sl, fp, lr}
   1f5cc:	add	fp, sp, #16
   1f5d0:	sub	sp, sp, #8
   1f5d4:	mov	r4, r2
   1f5d8:	cmn	r0, #100	; 0x64
   1f5dc:	bne	1f5f0 <__assert_fail@plt+0xca00>
   1f5e0:	mov	r0, r4
   1f5e4:	sub	sp, fp, #16
   1f5e8:	pop	{r4, r5, r6, sl, fp, lr}
   1f5ec:	bx	r1
   1f5f0:	mov	r5, r0
   1f5f4:	mov	r0, sp
   1f5f8:	mov	r6, r1
   1f5fc:	bl	299ec <__assert_fail@plt+0x16dfc>
   1f600:	cmp	r0, #0
   1f604:	bne	1f68c <__assert_fail@plt+0xca9c>
   1f608:	mov	r0, r5
   1f60c:	bl	12adc <fchdir@plt>
   1f610:	cmp	r0, #0
   1f614:	beq	1f638 <__assert_fail@plt+0xca48>
   1f618:	bl	12908 <__errno_location@plt>
   1f61c:	ldr	r5, [r0]
   1f620:	mov	r4, r0
   1f624:	mov	r0, sp
   1f628:	bl	29a5c <__assert_fail@plt+0x16e6c>
   1f62c:	str	r5, [r4]
   1f630:	mvn	r4, #0
   1f634:	b	1f680 <__assert_fail@plt+0xca90>
   1f638:	mov	r0, r4
   1f63c:	blx	r6
   1f640:	mov	r4, r0
   1f644:	mov	r5, #0
   1f648:	cmn	r0, #1
   1f64c:	bgt	1f658 <__assert_fail@plt+0xca68>
   1f650:	bl	12908 <__errno_location@plt>
   1f654:	ldr	r5, [r0]
   1f658:	mov	r0, sp
   1f65c:	bl	29a40 <__assert_fail@plt+0x16e50>
   1f660:	cmp	r0, #0
   1f664:	bne	1f698 <__assert_fail@plt+0xcaa8>
   1f668:	mov	r0, sp
   1f66c:	bl	29a5c <__assert_fail@plt+0x16e6c>
   1f670:	cmp	r5, #0
   1f674:	beq	1f680 <__assert_fail@plt+0xca90>
   1f678:	bl	12908 <__errno_location@plt>
   1f67c:	str	r5, [r0]
   1f680:	mov	r0, r4
   1f684:	sub	sp, fp, #16
   1f688:	pop	{r4, r5, r6, sl, fp, pc}
   1f68c:	bl	12908 <__errno_location@plt>
   1f690:	ldr	r0, [r0]
   1f694:	bl	24974 <__assert_fail@plt+0x11d84>
   1f698:	bl	12908 <__errno_location@plt>
   1f69c:	ldr	r0, [r0]
   1f6a0:	bl	249b4 <__assert_fail@plt+0x11dc4>
   1f6a4:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1f6a8:	add	fp, sp, #24
   1f6ac:	mov	r6, r2
   1f6b0:	mov	r7, r1
   1f6b4:	mov	r4, r0
   1f6b8:	bl	12908 <__errno_location@plt>
   1f6bc:	cmp	r7, #0
   1f6c0:	beq	1f754 <__assert_fail@plt+0xcb64>
   1f6c4:	mov	r5, r0
   1f6c8:	ldr	r8, [r0]
   1f6cc:	ldr	r0, [r6]
   1f6d0:	cmp	r0, #0
   1f6d4:	mov	r1, r0
   1f6d8:	movweq	r1, #16
   1f6dc:	cmp	r1, r7
   1f6e0:	bcs	1f6f8 <__assert_fail@plt+0xcb08>
   1f6e4:	lsl	r2, r1, #1
   1f6e8:	cmp	r1, r1, lsl #1
   1f6ec:	mov	r1, r2
   1f6f0:	bls	1f6dc <__assert_fail@plt+0xcaec>
   1f6f4:	mov	r1, r7
   1f6f8:	cmp	r0, #0
   1f6fc:	beq	1f728 <__assert_fail@plt+0xcb38>
   1f700:	cmp	r1, r0
   1f704:	beq	1f740 <__assert_fail@plt+0xcb50>
   1f708:	mov	r0, r4
   1f70c:	str	r1, [r6]
   1f710:	bl	2e984 <__assert_fail@plt+0x1bd94>
   1f714:	mov	r4, r0
   1f718:	cmp	r0, #0
   1f71c:	bne	1f748 <__assert_fail@plt+0xcb58>
   1f720:	mov	r4, #0
   1f724:	b	1f74c <__assert_fail@plt+0xcb5c>
   1f728:	cmp	r4, #0
   1f72c:	bne	1f76c <__assert_fail@plt+0xcb7c>
   1f730:	mov	r0, r1
   1f734:	str	r1, [r6]
   1f738:	bl	2de8c <__assert_fail@plt+0x1b29c>
   1f73c:	mov	r4, r0
   1f740:	cmp	r4, #0
   1f744:	beq	1f720 <__assert_fail@plt+0xcb30>
   1f748:	str	r8, [r5]
   1f74c:	mov	r0, r4
   1f750:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1f754:	movw	r0, #6156	; 0x180c
   1f758:	movw	r1, #6168	; 0x1818
   1f75c:	movw	r3, #6180	; 0x1824
   1f760:	mov	r2, #71	; 0x47
   1f764:	movt	r0, #4
   1f768:	b	1f780 <__assert_fail@plt+0xcb90>
   1f76c:	movw	r0, #6222	; 0x184e
   1f770:	movw	r1, #6168	; 0x1818
   1f774:	movw	r3, #6180	; 0x1824
   1f778:	mov	r2, #79	; 0x4f
   1f77c:	movt	r0, #4
   1f780:	movt	r1, #4
   1f784:	movt	r3, #4
   1f788:	bl	12bf0 <__assert_fail@plt>
   1f78c:	push	{r4, sl, fp, lr}
   1f790:	add	fp, sp, #8
   1f794:	mov	r4, r0
   1f798:	bl	1f6a4 <__assert_fail@plt+0xcab4>
   1f79c:	cmp	r0, #0
   1f7a0:	popne	{r4, sl, fp, pc}
   1f7a4:	mov	r0, r4
   1f7a8:	bl	2bcbc <__assert_fail@plt+0x190cc>
   1f7ac:	bl	2aab4 <__assert_fail@plt+0x17ec4>
   1f7b0:	push	{fp, lr}
   1f7b4:	mov	fp, sp
   1f7b8:	sub	sp, sp, #16
   1f7bc:	bl	1f80c <__assert_fail@plt+0xcc1c>
   1f7c0:	mov	r1, #0
   1f7c4:	cmn	r0, #-2147483647	; 0x80000001
   1f7c8:	add	r2, sp, #4
   1f7cc:	str	r1, [sp, #12]
   1f7d0:	str	r1, [sp, #4]
   1f7d4:	str	r1, [sp, #8]
   1f7d8:	movw	r1, #64072	; 0xfa48
   1f7dc:	addne	r0, r0, #1
   1f7e0:	movt	r1, #1
   1f7e4:	bl	1f960 <__assert_fail@plt+0xcd70>
   1f7e8:	movw	r2, #19712	; 0x4d00
   1f7ec:	ldmib	sp, {r0, r1}
   1f7f0:	movt	r2, #5
   1f7f4:	str	r0, [r2]
   1f7f8:	movw	r0, #19716	; 0x4d04
   1f7fc:	movt	r0, #5
   1f800:	str	r1, [r0]
   1f804:	mov	sp, fp
   1f808:	pop	{fp, pc}
   1f80c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1f810:	add	fp, sp, #24
   1f814:	sub	sp, sp, #16
   1f818:	movw	r0, #6473	; 0x1949
   1f81c:	movt	r0, #4
   1f820:	bl	212f0 <__assert_fail@plt+0xe700>
   1f824:	cmp	r0, #0
   1f828:	beq	1f900 <__assert_fail@plt+0xcd10>
   1f82c:	mov	r4, r0
   1f830:	bl	12908 <__errno_location@plt>
   1f834:	mov	r7, #0
   1f838:	mov	r6, r0
   1f83c:	str	r7, [r0]
   1f840:	mov	r0, r4
   1f844:	bl	12aa0 <readdir64@plt>
   1f848:	cmp	r0, #0
   1f84c:	beq	1f8bc <__assert_fail@plt+0xcccc>
   1f850:	mov	r8, #0
   1f854:	mvn	r5, #0
   1f858:	mov	r7, #0
   1f85c:	mov	r1, r0
   1f860:	ldrb	r2, [r1, #19]!
   1f864:	cmp	r2, #46	; 0x2e
   1f868:	bne	1f88c <__assert_fail@plt+0xcc9c>
   1f86c:	ldrb	r2, [r0, #20]
   1f870:	cmp	r2, #0
   1f874:	beq	1f8a4 <__assert_fail@plt+0xccb4>
   1f878:	cmp	r2, #46	; 0x2e
   1f87c:	bne	1f88c <__assert_fail@plt+0xcc9c>
   1f880:	ldrb	r0, [r0, #21]
   1f884:	cmp	r0, #0
   1f888:	beq	1f8a4 <__assert_fail@plt+0xccb4>
   1f88c:	mov	r0, r1
   1f890:	mov	r1, #0
   1f894:	bl	20c38 <__assert_fail@plt+0xe048>
   1f898:	cmp	r0, r5
   1f89c:	mov	r7, #1
   1f8a0:	movgt	r5, r0
   1f8a4:	mov	r0, r4
   1f8a8:	str	r8, [r6]
   1f8ac:	bl	12aa0 <readdir64@plt>
   1f8b0:	cmp	r0, #0
   1f8b4:	bne	1f85c <__assert_fail@plt+0xcc6c>
   1f8b8:	b	1f8c0 <__assert_fail@plt+0xccd0>
   1f8bc:	mvn	r5, #0
   1f8c0:	ldr	r6, [r6]
   1f8c4:	cmp	r6, #0
   1f8c8:	beq	1f93c <__assert_fail@plt+0xcd4c>
   1f8cc:	movw	r2, #6473	; 0x1949
   1f8d0:	mov	r0, #0
   1f8d4:	mov	r1, #8
   1f8d8:	movt	r2, #4
   1f8dc:	bl	294c0 <__assert_fail@plt+0x168d0>
   1f8e0:	movw	r2, #13527	; 0x34d7
   1f8e4:	mov	r3, r0
   1f8e8:	mov	r0, #0
   1f8ec:	mov	r1, r6
   1f8f0:	movt	r2, #4
   1f8f4:	bl	127b8 <error@plt>
   1f8f8:	mov	r0, r4
   1f8fc:	bl	12bc0 <closedir@plt>
   1f900:	mov	r0, #4
   1f904:	bl	1268c <sysconf@plt>
   1f908:	mov	r5, r0
   1f90c:	mov	r1, sp
   1f910:	mov	r0, #7
   1f914:	bl	12698 <getrlimit64@plt>
   1f918:	cmn	r5, #1
   1f91c:	movweq	r5, #20
   1f920:	cmp	r0, #0
   1f924:	bne	1f954 <__assert_fail@plt+0xcd64>
   1f928:	ldm	sp, {r0, r1}
   1f92c:	and	r1, r0, r1
   1f930:	cmn	r1, #1
   1f934:	movne	r5, r0
   1f938:	b	1f954 <__assert_fail@plt+0xcd64>
   1f93c:	mov	r0, r4
   1f940:	bl	12bc0 <closedir@plt>
   1f944:	cmp	r7, #0
   1f948:	beq	1f900 <__assert_fail@plt+0xcd10>
   1f94c:	cmn	r5, #1
   1f950:	ble	1f900 <__assert_fail@plt+0xcd10>
   1f954:	mov	r0, r5
   1f958:	sub	sp, fp, #24
   1f95c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1f960:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f964:	add	fp, sp, #28
   1f968:	sub	sp, sp, #532	; 0x214
   1f96c:	cmp	r0, #1
   1f970:	str	r2, [sp, #12]
   1f974:	str	r0, [sp, #8]
   1f978:	blt	1fa40 <__assert_fail@plt+0xce50>
   1f97c:	add	r0, sp, #16
   1f980:	mov	r5, r1
   1f984:	mov	r9, #0
   1f988:	mov	r8, #5
   1f98c:	add	r1, r0, #6
   1f990:	add	r0, r0, #4
   1f994:	str	r1, [sp]
   1f998:	str	r0, [sp, #4]
   1f99c:	ldr	r0, [sp, #8]
   1f9a0:	sub	sl, r0, r9
   1f9a4:	cmp	sl, #64	; 0x40
   1f9a8:	mov	r7, sl
   1f9ac:	movge	r7, #64	; 0x40
   1f9b0:	cmp	sl, #1
   1f9b4:	blt	1f9d8 <__assert_fail@plt+0xcde8>
   1f9b8:	ldr	r1, [sp, #4]
   1f9bc:	mov	r0, #0
   1f9c0:	add	r2, r9, r0
   1f9c4:	add	r0, r0, #1
   1f9c8:	stmda	r1, {r2, r8}
   1f9cc:	add	r1, r1, #8
   1f9d0:	cmp	r0, r7
   1f9d4:	blt	1f9c0 <__assert_fail@plt+0xcdd0>
   1f9d8:	add	r0, sp, #16
   1f9dc:	mov	r1, r7
   1f9e0:	mov	r2, #0
   1f9e4:	bl	12710 <poll@plt>
   1f9e8:	cmn	r0, #1
   1f9ec:	beq	1fa40 <__assert_fail@plt+0xce50>
   1f9f0:	cmp	sl, #1
   1f9f4:	blt	1fa30 <__assert_fail@plt+0xce40>
   1f9f8:	ldr	r4, [sp]
   1f9fc:	mov	r6, #0
   1fa00:	ldrh	r0, [r4]
   1fa04:	cmp	r0, #32
   1fa08:	beq	1fa20 <__assert_fail@plt+0xce30>
   1fa0c:	ldr	r0, [r4, #-6]
   1fa10:	ldr	r1, [sp, #12]
   1fa14:	blx	r5
   1fa18:	cmp	r0, #0
   1fa1c:	bne	1fa40 <__assert_fail@plt+0xce50>
   1fa20:	add	r6, r6, #1
   1fa24:	add	r4, r4, #8
   1fa28:	cmp	r6, r7
   1fa2c:	blt	1fa00 <__assert_fail@plt+0xce10>
   1fa30:	ldr	r0, [sp, #8]
   1fa34:	add	r9, r7, r9
   1fa38:	cmp	r9, r0
   1fa3c:	blt	1f99c <__assert_fail@plt+0xcdac>
   1fa40:	sub	sp, fp, #28
   1fa44:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1fa48:	push	{r4, r5, r6, sl, fp, lr}
   1fa4c:	add	fp, sp, #16
   1fa50:	mov	r5, r1
   1fa54:	mov	r1, #1
   1fa58:	mov	r6, r0
   1fa5c:	bl	2ba88 <__assert_fail@plt+0x18e98>
   1fa60:	mov	r4, #0
   1fa64:	tst	r0, #1
   1fa68:	bne	1faa8 <__assert_fail@plt+0xceb8>
   1fa6c:	ldm	r5, {r0, r1}
   1fa70:	mov	r2, #4
   1fa74:	add	r1, r2, r1, lsl #2
   1fa78:	add	r2, r5, #8
   1fa7c:	bl	1f6a4 <__assert_fail@plt+0xcab4>
   1fa80:	cmp	r0, #0
   1fa84:	beq	1faa4 <__assert_fail@plt+0xceb4>
   1fa88:	str	r0, [r5]
   1fa8c:	ldr	r1, [r5, #4]
   1fa90:	str	r6, [r0, r1, lsl #2]
   1fa94:	ldr	r0, [r5, #4]
   1fa98:	add	r0, r0, #1
   1fa9c:	str	r0, [r5, #4]
   1faa0:	b	1faa8 <__assert_fail@plt+0xceb8>
   1faa4:	mvn	r4, #0
   1faa8:	mov	r0, r4
   1faac:	pop	{r4, r5, r6, sl, fp, pc}
   1fab0:	sub	sp, sp, #8
   1fab4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1fab8:	add	fp, sp, #28
   1fabc:	sub	sp, sp, #4
   1fac0:	movw	sl, #19721	; 0x4d09
   1fac4:	mov	r4, r0
   1fac8:	str	r2, [fp, #8]
   1facc:	str	r3, [fp, #12]
   1fad0:	tst	r1, #64	; 0x40
   1fad4:	mov	r6, #0
   1fad8:	movw	r9, #19720	; 0x4d08
   1fadc:	mov	r5, r1
   1fae0:	movt	sl, #5
   1fae4:	ldrne	r6, [fp, #8]
   1fae8:	movt	r9, #5
   1faec:	ldrb	r0, [sl]
   1faf0:	cmp	r0, #0
   1faf4:	bne	1fb40 <__assert_fail@plt+0xcf50>
   1faf8:	movw	r0, #56638	; 0xdd3e
   1fafc:	mov	r1, #524288	; 0x80000
   1fb00:	movt	r0, #3
   1fb04:	bl	214e8 <__assert_fail@plt+0xe8f8>
   1fb08:	cmp	r0, #0
   1fb0c:	bmi	1fb30 <__assert_fail@plt+0xcf40>
   1fb10:	mov	r1, #1
   1fb14:	mov	r7, r0
   1fb18:	bl	2ba88 <__assert_fail@plt+0x18e98>
   1fb1c:	mov	r8, r0
   1fb20:	mov	r0, r7
   1fb24:	bl	12ba8 <close@plt>
   1fb28:	and	r0, r8, #1
   1fb2c:	b	1fb34 <__assert_fail@plt+0xcf44>
   1fb30:	mov	r0, #0
   1fb34:	mov	r1, #1
   1fb38:	strb	r0, [r9]
   1fb3c:	strb	r1, [sl]
   1fb40:	orr	r1, r5, #524288	; 0x80000
   1fb44:	mov	r0, r4
   1fb48:	mov	r2, r6
   1fb4c:	bl	214e8 <__assert_fail@plt+0xe8f8>
   1fb50:	mov	r4, r0
   1fb54:	cmp	r0, #0
   1fb58:	bmi	1fb74 <__assert_fail@plt+0xcf84>
   1fb5c:	ldrb	r0, [r9]
   1fb60:	cmp	r0, #0
   1fb64:	bne	1fb74 <__assert_fail@plt+0xcf84>
   1fb68:	mov	r0, r4
   1fb6c:	mov	r1, #1
   1fb70:	bl	2117c <__assert_fail@plt+0xe58c>
   1fb74:	mov	r0, r4
   1fb78:	sub	sp, fp, #28
   1fb7c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1fb80:	add	sp, sp, #8
   1fb84:	bx	lr
   1fb88:	push	{r4, sl, fp, lr}
   1fb8c:	add	fp, sp, #8
   1fb90:	movw	r4, #19712	; 0x4d00
   1fb94:	movt	r4, #5
   1fb98:	ldr	r0, [r4]
   1fb9c:	bl	2bcbc <__assert_fail@plt+0x190cc>
   1fba0:	movw	r0, #19716	; 0x4d04
   1fba4:	mov	r1, #0
   1fba8:	movt	r0, #5
   1fbac:	str	r1, [r4]
   1fbb0:	str	r1, [r0]
   1fbb4:	pop	{r4, sl, fp, pc}
   1fbb8:	push	{fp, lr}
   1fbbc:	mov	fp, sp
   1fbc0:	movw	r0, #6239	; 0x185f
   1fbc4:	movt	r0, #4
   1fbc8:	bl	127f4 <getenv@plt>
   1fbcc:	cmp	r0, #0
   1fbd0:	movwne	r0, #1
   1fbd4:	pop	{fp, pc}
   1fbd8:	push	{r4, r5, fp, lr}
   1fbdc:	add	fp, sp, #8
   1fbe0:	sub	sp, sp, #16
   1fbe4:	movw	r0, #19712	; 0x4d00
   1fbe8:	movt	r0, #5
   1fbec:	ldr	r4, [r0]
   1fbf0:	movw	r0, #19716	; 0x4d04
   1fbf4:	movt	r0, #5
   1fbf8:	ldr	r5, [r0]
   1fbfc:	bl	1f80c <__assert_fail@plt+0xcc1c>
   1fc00:	mvn	r1, #0
   1fc04:	cmn	r0, #-2147483647	; 0x80000001
   1fc08:	mov	r2, sp
   1fc0c:	str	r1, [sp, #12]
   1fc10:	mov	r1, #0
   1fc14:	addne	r0, r0, #1
   1fc18:	str	r1, [sp, #8]
   1fc1c:	movw	r1, #64644	; 0xfc84
   1fc20:	stm	sp, {r4, r5}
   1fc24:	movt	r1, #1
   1fc28:	bl	1f960 <__assert_fail@plt+0xcd70>
   1fc2c:	ldr	r4, [sp, #12]
   1fc30:	cmp	r4, #0
   1fc34:	submi	sp, fp, #8
   1fc38:	popmi	{r4, r5, fp, pc}
   1fc3c:	movw	r1, #6267	; 0x187b
   1fc40:	mov	r0, #0
   1fc44:	mov	r2, #5
   1fc48:	movt	r1, #4
   1fc4c:	bl	12674 <dcgettext@plt>
   1fc50:	mov	r2, r0
   1fc54:	mov	r0, #0
   1fc58:	mov	r1, #0
   1fc5c:	mov	r3, r4
   1fc60:	bl	127b8 <error@plt>
   1fc64:	movw	r0, #6419	; 0x1913
   1fc68:	movw	r1, #6428	; 0x191c
   1fc6c:	movw	r3, #6437	; 0x1925
   1fc70:	mov	r2, #396	; 0x18c
   1fc74:	movt	r0, #4
   1fc78:	movt	r1, #4
   1fc7c:	movt	r3, #4
   1fc80:	bl	12bf0 <__assert_fail@plt>
   1fc84:	push	{r4, r5, r6, sl, fp, lr}
   1fc88:	add	fp, sp, #16
   1fc8c:	mov	r6, r1
   1fc90:	mov	r1, #1
   1fc94:	mov	r5, r0
   1fc98:	bl	2ba88 <__assert_fail@plt+0x18e98>
   1fc9c:	mov	r1, r0
   1fca0:	mov	r0, #0
   1fca4:	tst	r1, #1
   1fca8:	bne	1fce8 <__assert_fail@plt+0xd0f8>
   1fcac:	ldmib	r6, {r1, r2}
   1fcb0:	cmp	r2, r1
   1fcb4:	bcs	1fce0 <__assert_fail@plt+0xd0f0>
   1fcb8:	ldr	r3, [r6]
   1fcbc:	ldr	r4, [r3, r2, lsl #2]
   1fcc0:	cmp	r4, r5
   1fcc4:	bge	1fcdc <__assert_fail@plt+0xd0ec>
   1fcc8:	add	r2, r2, #1
   1fccc:	cmp	r2, r1
   1fcd0:	str	r2, [r6, #8]
   1fcd4:	bcc	1fcbc <__assert_fail@plt+0xd0cc>
   1fcd8:	b	1fce0 <__assert_fail@plt+0xd0f0>
   1fcdc:	beq	1fce8 <__assert_fail@plt+0xd0f8>
   1fce0:	mvn	r0, #0
   1fce4:	str	r5, [r6, #12]
   1fce8:	pop	{r4, r5, r6, sl, fp, pc}
   1fcec:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1fcf0:	add	fp, sp, #24
   1fcf4:	sub	sp, sp, #16
   1fcf8:	mov	r8, r0
   1fcfc:	movw	r0, #17768	; 0x4568
   1fd00:	movt	r0, #5
   1fd04:	ldr	r0, [r0]
   1fd08:	bl	2bc60 <__assert_fail@plt+0x19070>
   1fd0c:	movw	r0, #17780	; 0x4574
   1fd10:	movw	r1, #6515	; 0x1973
   1fd14:	mov	r2, #5
   1fd18:	mov	r9, #0
   1fd1c:	movt	r0, #5
   1fd20:	movt	r1, #4
   1fd24:	ldr	r6, [r0]
   1fd28:	movw	r0, #17636	; 0x44e4
   1fd2c:	movt	r0, #5
   1fd30:	ldr	r5, [r0]
   1fd34:	mov	r0, #0
   1fd38:	bl	12674 <dcgettext@plt>
   1fd3c:	movw	r1, #6530	; 0x1982
   1fd40:	mov	r7, r0
   1fd44:	mov	r0, #0
   1fd48:	mov	r2, #5
   1fd4c:	movt	r1, #4
   1fd50:	bl	12674 <dcgettext@plt>
   1fd54:	movw	r1, #6545	; 0x1991
   1fd58:	mov	r4, r0
   1fd5c:	mov	r0, #0
   1fd60:	mov	r2, #5
   1fd64:	movt	r1, #4
   1fd68:	bl	12674 <dcgettext@plt>
   1fd6c:	movw	r2, #6501	; 0x1965
   1fd70:	str	r0, [sp, #8]
   1fd74:	mov	r0, r6
   1fd78:	mov	r1, r8
   1fd7c:	mov	r3, r5
   1fd80:	str	r7, [sp]
   1fd84:	str	r4, [sp, #4]
   1fd88:	str	r9, [sp, #12]
   1fd8c:	movt	r2, #4
   1fd90:	bl	2a598 <__assert_fail@plt+0x179a8>
   1fd94:	sub	sp, fp, #24
   1fd98:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1fd9c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1fda0:	add	fp, sp, #28
   1fda4:	sub	sp, sp, #948	; 0x3b4
   1fda8:	mov	sl, r0
   1fdac:	ldr	r0, [r3, #16]
   1fdb0:	str	r1, [fp, #-964]	; 0xfffffc3c
   1fdb4:	sub	r1, fp, #44	; 0x2c
   1fdb8:	mov	r6, r3
   1fdbc:	str	r2, [fp, #-960]	; 0xfffffc40
   1fdc0:	bl	21524 <__assert_fail@plt+0xe934>
   1fdc4:	movw	r5, #17640	; 0x44e8
   1fdc8:	ldrd	r0, [r6, #96]	; 0x60
   1fdcc:	movt	r5, #5
   1fdd0:	ldr	r4, [r5]
   1fdd4:	sub	sp, sp, #16
   1fdd8:	mov	r3, #1
   1fddc:	mov	r2, #0
   1fde0:	str	r3, [sp]
   1fde4:	stmib	sp, {r2, r3}
   1fde8:	str	r2, [sp, #12]
   1fdec:	sub	r2, fp, #696	; 0x2b8
   1fdf0:	mov	r3, #0
   1fdf4:	bl	22688 <__assert_fail@plt+0xfa98>
   1fdf8:	add	sp, sp, #16
   1fdfc:	ldr	r7, [fp, #20]
   1fe00:	movw	r1, #6558	; 0x199e
   1fe04:	mov	r3, r0
   1fe08:	mov	r2, r4
   1fe0c:	movt	r1, #4
   1fe10:	mov	r0, r7
   1fe14:	bl	128fc <fprintf@plt>
   1fe18:	cmp	r0, #0
   1fe1c:	bmi	20480 <__assert_fail@plt+0xd890>
   1fe20:	ldr	r1, [r5]
   1fe24:	ldr	r8, [fp, #12]
   1fe28:	str	r6, [fp, #-956]	; 0xfffffc44
   1fe2c:	add	r6, r6, #64	; 0x40
   1fe30:	cmp	r0, r1
   1fe34:	mov	r1, r7
   1fe38:	strgt	r0, [r5]
   1fe3c:	mov	r0, #32
   1fe40:	bl	12ac4 <putc@plt>
   1fe44:	movw	r9, #17644	; 0x44ec
   1fe48:	mov	r5, r0
   1fe4c:	ldrd	r0, [r6]
   1fe50:	movt	r9, #5
   1fe54:	ldr	r4, [r9]
   1fe58:	sub	sp, sp, #16
   1fe5c:	asr	r2, r8, #31
   1fe60:	mov	r3, #512	; 0x200
   1fe64:	mov	r6, #0
   1fe68:	stm	sp, {r3, r6, r8}
   1fe6c:	str	r2, [sp, #12]
   1fe70:	sub	r2, fp, #696	; 0x2b8
   1fe74:	mov	r3, #0
   1fe78:	bl	22688 <__assert_fail@plt+0xfa98>
   1fe7c:	add	sp, sp, #16
   1fe80:	movw	r1, #6558	; 0x199e
   1fe84:	mov	r3, r0
   1fe88:	mov	r0, r7
   1fe8c:	mov	r2, r4
   1fe90:	movt	r1, #4
   1fe94:	bl	128fc <fprintf@plt>
   1fe98:	cmn	r5, #1
   1fe9c:	movweq	r6, #150	; 0x96
   1fea0:	cmp	r0, #0
   1fea4:	bmi	20488 <__assert_fail@plt+0xd898>
   1fea8:	ldr	r1, [r9]
   1feac:	mov	r2, r6
   1feb0:	ldr	r6, [fp, #-956]	; 0xfffffc44
   1feb4:	cmp	r0, r1
   1feb8:	strgt	r0, [r9]
   1febc:	cmn	r5, #1
   1fec0:	mov	r9, r2
   1fec4:	beq	20490 <__assert_fail@plt+0xd8a0>
   1fec8:	mov	r0, #32
   1fecc:	mov	r1, r7
   1fed0:	bl	12ac4 <putc@plt>
   1fed4:	cmn	r0, #1
   1fed8:	beq	20498 <__assert_fail@plt+0xd8a8>
   1fedc:	sub	r0, fp, #44	; 0x2c
   1fee0:	mov	r1, r7
   1fee4:	bl	12b84 <fputs@plt>
   1fee8:	cmp	r0, #0
   1feec:	movwmi	r9, #275	; 0x113
   1fef0:	bmi	204a0 <__assert_fail@plt+0xd8b0>
   1fef4:	movw	r4, #17648	; 0x44f0
   1fef8:	ldr	r3, [r6, #20]
   1fefc:	movw	r1, #6562	; 0x19a2
   1ff00:	mov	r0, r7
   1ff04:	movt	r4, #5
   1ff08:	movt	r1, #4
   1ff0c:	ldr	r2, [r4]
   1ff10:	bl	128fc <fprintf@plt>
   1ff14:	cmp	r0, #0
   1ff18:	bmi	204a8 <__assert_fail@plt+0xd8b8>
   1ff1c:	ldr	r1, [r4]
   1ff20:	cmp	r0, r1
   1ff24:	mov	r1, r7
   1ff28:	strgt	r0, [r4]
   1ff2c:	mov	r0, #32
   1ff30:	bl	12ac4 <putc@plt>
   1ff34:	cmn	r0, #1
   1ff38:	ldr	r0, [r6, #24]
   1ff3c:	movweq	r9, #250	; 0xfa
   1ff40:	bl	231e0 <__assert_fail@plt+0x105f0>
   1ff44:	movw	r4, #17652	; 0x44f4
   1ff48:	cmp	r0, #0
   1ff4c:	movt	r4, #5
   1ff50:	beq	1ff94 <__assert_fail@plt+0xd3a4>
   1ff54:	mov	r1, #0
   1ff58:	mov	r5, r0
   1ff5c:	bl	23f40 <__assert_fail@plt+0x11350>
   1ff60:	ldr	r2, [r4]
   1ff64:	movw	r1, #6567	; 0x19a7
   1ff68:	mov	r3, r5
   1ff6c:	movt	r1, #4
   1ff70:	cmp	r0, r2
   1ff74:	strgt	r0, [r4]
   1ff78:	movgt	r2, r0
   1ff7c:	mov	r0, r7
   1ff80:	bl	128fc <fprintf@plt>
   1ff84:	cmn	r0, #1
   1ff88:	bgt	1ffbc <__assert_fail@plt+0xd3cc>
   1ff8c:	mov	r9, #400	; 0x190
   1ff90:	b	203d0 <__assert_fail@plt+0xd7e0>
   1ff94:	ldr	r2, [r6, #24]
   1ff98:	movw	r1, #6573	; 0x19ad
   1ff9c:	mov	r0, r7
   1ffa0:	movt	r1, #4
   1ffa4:	bl	128fc <fprintf@plt>
   1ffa8:	ldr	r1, [r4]
   1ffac:	cmp	r0, r1
   1ffb0:	strgt	r0, [r4]
   1ffb4:	cmp	r0, #1
   1ffb8:	blt	204d8 <__assert_fail@plt+0xd8e8>
   1ffbc:	ldr	r0, [r6, #28]
   1ffc0:	bl	23374 <__assert_fail@plt+0x10784>
   1ffc4:	cmp	r0, #0
   1ffc8:	beq	20014 <__assert_fail@plt+0xd424>
   1ffcc:	mov	r1, #0
   1ffd0:	mov	r5, r0
   1ffd4:	bl	23f40 <__assert_fail@plt+0x11350>
   1ffd8:	movw	r1, #17656	; 0x44f8
   1ffdc:	mov	r3, r5
   1ffe0:	movt	r1, #5
   1ffe4:	ldr	r2, [r1]
   1ffe8:	cmp	r0, r2
   1ffec:	strgt	r0, [r1]
   1fff0:	movw	r1, #6567	; 0x19a7
   1fff4:	movgt	r2, r0
   1fff8:	mov	r0, r7
   1fffc:	movt	r1, #4
   20000:	bl	128fc <fprintf@plt>
   20004:	cmn	r0, #1
   20008:	bgt	2005c <__assert_fail@plt+0xd46c>
   2000c:	mov	r9, #500	; 0x1f4
   20010:	b	203d0 <__assert_fail@plt+0xd7e0>
   20014:	movw	r4, #17656	; 0x44f8
   20018:	ldr	r3, [r6, #28]
   2001c:	movw	r1, #6580	; 0x19b4
   20020:	mov	r0, r7
   20024:	movt	r4, #5
   20028:	movt	r1, #4
   2002c:	ldr	r2, [r4]
   20030:	bl	128fc <fprintf@plt>
   20034:	ldr	r1, [r4]
   20038:	cmp	r0, r1
   2003c:	strgt	r0, [r4]
   20040:	cmp	r0, #0
   20044:	bmi	204e0 <__assert_fail@plt+0xd8f0>
   20048:	mov	r0, #32
   2004c:	mov	r1, r7
   20050:	bl	12ac4 <putc@plt>
   20054:	cmn	r0, #1
   20058:	beq	204e8 <__assert_fail@plt+0xd8f8>
   2005c:	ldr	r0, [r6, #16]
   20060:	and	r0, r0, #45056	; 0xb000
   20064:	orr	r0, r0, #16384	; 0x4000
   20068:	cmp	r0, #24576	; 0x6000
   2006c:	bne	20108 <__assert_fail@plt+0xd518>
   20070:	add	r4, r6, #32
   20074:	ldrd	r0, [r4]
   20078:	bl	124a0 <gnu_dev_major@plt>
   2007c:	movw	r5, #17660	; 0x44fc
   20080:	movw	r1, #6562	; 0x19a2
   20084:	mov	r3, r0
   20088:	mov	r0, r7
   2008c:	movt	r5, #5
   20090:	movt	r1, #4
   20094:	ldr	r2, [r5]
   20098:	bl	128fc <fprintf@plt>
   2009c:	cmp	r0, #0
   200a0:	bmi	204c0 <__assert_fail@plt+0xd8d0>
   200a4:	ldr	r1, [r5]
   200a8:	cmp	r1, r0
   200ac:	movw	r1, #62378	; 0xf3aa
   200b0:	movt	r1, #3
   200b4:	strlt	r0, [r5]
   200b8:	mov	r0, r7
   200bc:	bl	128fc <fprintf@plt>
   200c0:	cmp	r0, #0
   200c4:	bmi	204c8 <__assert_fail@plt+0xd8d8>
   200c8:	ldrd	r0, [r4]
   200cc:	bl	12530 <gnu_dev_minor@plt>
   200d0:	movw	r4, #17664	; 0x4500
   200d4:	movw	r1, #6562	; 0x19a2
   200d8:	mov	r3, r0
   200dc:	mov	r0, r7
   200e0:	movt	r4, #5
   200e4:	movt	r1, #4
   200e8:	ldr	r2, [r4]
   200ec:	bl	128fc <fprintf@plt>
   200f0:	cmp	r0, #0
   200f4:	bmi	204d0 <__assert_fail@plt+0xd8e0>
   200f8:	ldr	r1, [r4]
   200fc:	cmp	r1, r0
   20100:	strlt	r0, [r4]
   20104:	b	2017c <__assert_fail@plt+0xd58c>
   20108:	movw	r5, #17668	; 0x4504
   2010c:	add	r0, r6, #48	; 0x30
   20110:	mov	r1, #1
   20114:	cmp	r8, #0
   20118:	movt	r5, #5
   2011c:	ldm	r0, {r0, r3}
   20120:	movpl	r8, r1
   20124:	asr	r2, r8, #31
   20128:	ldr	r4, [r5]
   2012c:	sub	sp, sp, #16
   20130:	mov	r6, #0
   20134:	stm	sp, {r1, r6, r8}
   20138:	str	r2, [sp, #12]
   2013c:	mov	r1, r3
   20140:	sub	r2, fp, #696	; 0x2b8
   20144:	mov	r3, #0
   20148:	bl	22688 <__assert_fail@plt+0xfa98>
   2014c:	add	sp, sp, #16
   20150:	movw	r1, #6558	; 0x199e
   20154:	mov	r3, r0
   20158:	mov	r0, r7
   2015c:	mov	r2, r4
   20160:	movt	r1, #4
   20164:	bl	128fc <fprintf@plt>
   20168:	cmp	r0, #0
   2016c:	bmi	204f0 <__assert_fail@plt+0xd900>
   20170:	ldr	r1, [r5]
   20174:	cmp	r0, r1
   20178:	strgt	r0, [r5]
   2017c:	mov	r0, #32
   20180:	mov	r1, r7
   20184:	bl	12ac4 <putc@plt>
   20188:	mvn	r1, #0
   2018c:	subs	r6, r0, r1
   20190:	movwne	r6, #1
   20194:	cmn	r0, #1
   20198:	movweq	r9, #850	; 0x352
   2019c:	beq	204b0 <__assert_fail@plt+0xd8c0>
   201a0:	ldr	r0, [fp, #-956]	; 0xfffffc44
   201a4:	add	r4, r0, #80	; 0x50
   201a8:	mov	r0, r4
   201ac:	bl	12848 <localtime@plt>
   201b0:	cmp	r0, #0
   201b4:	beq	201e8 <__assert_fail@plt+0xd5f8>
   201b8:	mov	r5, r0
   201bc:	ldr	r0, [fp, #8]
   201c0:	str	sl, [fp, #-968]	; 0xfffffc38
   201c4:	str	r9, [fp, #-972]	; 0xfffffc34
   201c8:	sub	r1, r0, #19968	; 0x4e00
   201cc:	sub	r2, r1, #15532032	; 0xed0000
   201d0:	ldr	r1, [r4]
   201d4:	cmp	r2, r1
   201d8:	ble	20258 <__assert_fail@plt+0xd668>
   201dc:	movw	r8, #6598	; 0x19c6
   201e0:	movt	r8, #4
   201e4:	b	20274 <__assert_fail@plt+0xd684>
   201e8:	ldr	r0, [r4]
   201ec:	sub	sp, sp, #16
   201f0:	cmn	r0, #1
   201f4:	ble	20400 <__assert_fail@plt+0xd810>
   201f8:	mov	r1, #1
   201fc:	mov	r4, #0
   20200:	sub	r2, fp, #696	; 0x2b8
   20204:	mov	r3, #0
   20208:	stm	sp, {r1, r4}
   2020c:	str	r1, [sp, #8]
   20210:	asr	r1, r0, #31
   20214:	str	r4, [sp, #12]
   20218:	bl	22688 <__assert_fail@plt+0xfa98>
   2021c:	add	sp, sp, #16
   20220:	movw	r1, #6615	; 0x19d7
   20224:	mov	r3, r0
   20228:	mov	r0, r7
   2022c:	mov	r2, #12
   20230:	movt	r1, #4
   20234:	bl	128fc <fprintf@plt>
   20238:	cmp	r0, #0
   2023c:	movwmi	r9, #1100	; 0x44c
   20240:	cmn	r0, #1
   20244:	movwgt	r4, #1
   20248:	and	r0, r6, r4
   2024c:	cmp	r0, #1
   20250:	beq	20304 <__assert_fail@plt+0xd714>
   20254:	b	203d0 <__assert_fail@plt+0xd7e0>
   20258:	movw	r2, #6598	; 0x19c6
   2025c:	add	r0, r0, #3600	; 0xe10
   20260:	movw	r8, #6586	; 0x19ba
   20264:	movt	r2, #4
   20268:	cmp	r1, r0
   2026c:	movt	r8, #4
   20270:	movgt	r8, r2
   20274:	sub	sl, fp, #952	; 0x3b8
   20278:	mov	r1, #256	; 0x100
   2027c:	mov	r2, r8
   20280:	mov	r3, r5
   20284:	mov	r9, #256	; 0x100
   20288:	mov	r0, sl
   2028c:	bl	12830 <strftime@plt>
   20290:	cmp	r0, #0
   20294:	bne	202cc <__assert_fail@plt+0xd6dc>
   20298:	mov	r4, #7
   2029c:	add	r0, r4, r9, lsl #1
   202a0:	bic	r0, r0, #7
   202a4:	sub	sl, sp, r0
   202a8:	mov	sp, sl
   202ac:	lsl	r9, r9, #1
   202b0:	mov	r0, sl
   202b4:	mov	r2, r8
   202b8:	mov	r3, r5
   202bc:	mov	r1, r9
   202c0:	bl	12830 <strftime@plt>
   202c4:	cmp	r0, #0
   202c8:	beq	2029c <__assert_fail@plt+0xd6ac>
   202cc:	movw	r1, #6611	; 0x19d3
   202d0:	mov	r0, r7
   202d4:	mov	r2, sl
   202d8:	movt	r1, #4
   202dc:	bl	128fc <fprintf@plt>
   202e0:	cmp	r0, #0
   202e4:	ldr	sl, [fp, #-968]	; 0xfffffc38
   202e8:	ldr	r9, [fp, #-972]	; 0xfffffc34
   202ec:	mov	r1, #0
   202f0:	movwmi	r9, #900	; 0x384
   202f4:	cmn	r0, #1
   202f8:	movwgt	r1, #1
   202fc:	tst	r6, r1
   20300:	beq	203d0 <__assert_fail@plt+0xd7e0>
   20304:	ldr	r5, [fp, #16]
   20308:	mov	r0, sl
   2030c:	mov	r1, r7
   20310:	mov	r2, r5
   20314:	bl	20508 <__assert_fail@plt+0xd918>
   20318:	cmp	r0, #0
   2031c:	ldr	r0, [fp, #-956]	; 0xfffffc44
   20320:	beq	204b8 <__assert_fail@plt+0xd8c8>
   20324:	ldr	r0, [r0, #16]
   20328:	and	r0, r0, #61440	; 0xf000
   2032c:	cmp	r0, #40960	; 0xa000
   20330:	bne	203b4 <__assert_fail@plt+0xd7c4>
   20334:	ldr	r0, [fp, #-964]	; 0xfffffc3c
   20338:	ldr	r1, [fp, #-960]	; 0xfffffc40
   2033c:	bl	20e40 <__assert_fail@plt+0xe250>
   20340:	cmp	r0, #0
   20344:	beq	20390 <__assert_fail@plt+0xd7a0>
   20348:	mov	r6, r0
   2034c:	movw	r0, #6620	; 0x19dc
   20350:	mov	r1, r7
   20354:	movt	r0, #4
   20358:	bl	12b84 <fputs@plt>
   2035c:	cmn	r0, #1
   20360:	ble	204f8 <__assert_fail@plt+0xd908>
   20364:	mov	r0, r6
   20368:	mov	r1, r7
   2036c:	mov	r2, r5
   20370:	bl	20508 <__assert_fail@plt+0xd918>
   20374:	mov	r4, r0
   20378:	mov	r0, r6
   2037c:	bl	2bcbc <__assert_fail@plt+0x190cc>
   20380:	cmp	r4, #0
   20384:	bne	203b4 <__assert_fail@plt+0xd7c4>
   20388:	movw	r9, #1350	; 0x546
   2038c:	b	203d0 <__assert_fail@plt+0xd7e0>
   20390:	bl	12908 <__errno_location@plt>
   20394:	ldr	r1, [r0]
   20398:	movw	r2, #13527	; 0x34d7
   2039c:	mov	r0, #0
   203a0:	mov	r3, sl
   203a4:	movt	r2, #4
   203a8:	bl	127b8 <error@plt>
   203ac:	mov	r0, #0
   203b0:	bl	2bcbc <__assert_fail@plt+0x190cc>
   203b4:	mov	r0, #10
   203b8:	mov	r1, r7
   203bc:	bl	12ac4 <putc@plt>
   203c0:	cmn	r0, #1
   203c4:	subne	sp, fp, #28
   203c8:	popne	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   203cc:	movw	r9, #1400	; 0x578
   203d0:	bl	12908 <__errno_location@plt>
   203d4:	movw	r1, #6625	; 0x19e1
   203d8:	ldr	r4, [r0]
   203dc:	mov	r0, #0
   203e0:	mov	r2, #5
   203e4:	movt	r1, #4
   203e8:	bl	12674 <dcgettext@plt>
   203ec:	mov	r2, r0
   203f0:	mov	r0, #1
   203f4:	mov	r1, r4
   203f8:	mov	r3, r9
   203fc:	bl	127b8 <error@plt>
   20400:	mov	r5, #0
   20404:	mov	r1, #1
   20408:	rsbs	r3, r0, #0
   2040c:	sub	r2, fp, #696	; 0x2b8
   20410:	stm	sp, {r1, r5}
   20414:	str	r1, [sp, #8]
   20418:	sbc	r1, r5, r0, asr #31
   2041c:	mov	r0, r3
   20420:	mov	r3, #0
   20424:	str	r5, [sp, #12]
   20428:	bl	22688 <__assert_fail@plt+0xfa98>
   2042c:	add	sp, sp, #16
   20430:	mov	r4, r0
   20434:	bl	128c0 <strlen@plt>
   20438:	sub	sp, sp, #8
   2043c:	movw	r1, #6608	; 0x19d0
   20440:	movw	r3, #62122	; 0xf2aa
   20444:	rsb	r0, r0, #12
   20448:	str	r4, [sp]
   2044c:	bic	r2, r0, r0, asr #31
   20450:	movt	r1, #4
   20454:	movt	r3, #3
   20458:	mov	r0, r7
   2045c:	bl	128fc <fprintf@plt>
   20460:	add	sp, sp, #8
   20464:	cmp	r0, #0
   20468:	movwmi	r9, #1000	; 0x3e8
   2046c:	cmn	r0, #1
   20470:	movwgt	r5, #1
   20474:	tst	r6, r5
   20478:	bne	20304 <__assert_fail@plt+0xd714>
   2047c:	b	203d0 <__assert_fail@plt+0xd7e0>
   20480:	mov	r9, #100	; 0x64
   20484:	b	203d0 <__assert_fail@plt+0xd7e0>
   20488:	mov	r9, #200	; 0xc8
   2048c:	b	203d0 <__assert_fail@plt+0xd7e0>
   20490:	mov	r9, #150	; 0x96
   20494:	b	203d0 <__assert_fail@plt+0xd7e0>
   20498:	mov	r9, #250	; 0xfa
   2049c:	b	203d0 <__assert_fail@plt+0xd7e0>
   204a0:	movw	r9, #275	; 0x113
   204a4:	b	203d0 <__assert_fail@plt+0xd7e0>
   204a8:	mov	r9, #300	; 0x12c
   204ac:	b	203d0 <__assert_fail@plt+0xd7e0>
   204b0:	movw	r9, #850	; 0x352
   204b4:	b	203d0 <__assert_fail@plt+0xd7e0>
   204b8:	mov	r9, #1200	; 0x4b0
   204bc:	b	203d0 <__assert_fail@plt+0xd7e0>
   204c0:	mov	r9, #600	; 0x258
   204c4:	b	203d0 <__assert_fail@plt+0xd7e0>
   204c8:	movw	r9, #625	; 0x271
   204cc:	b	203d0 <__assert_fail@plt+0xd7e0>
   204d0:	movw	r9, #650	; 0x28a
   204d4:	b	203d0 <__assert_fail@plt+0xd7e0>
   204d8:	movw	r9, #450	; 0x1c2
   204dc:	b	203d0 <__assert_fail@plt+0xd7e0>
   204e0:	movw	r9, #550	; 0x226
   204e4:	b	203d0 <__assert_fail@plt+0xd7e0>
   204e8:	movw	r9, #525	; 0x20d
   204ec:	b	203d0 <__assert_fail@plt+0xd7e0>
   204f0:	mov	r9, #800	; 0x320
   204f4:	b	203d0 <__assert_fail@plt+0xd7e0>
   204f8:	mov	r0, r6
   204fc:	bl	2bcbc <__assert_fail@plt+0x190cc>
   20500:	movw	r9, #1300	; 0x514
   20504:	b	203d0 <__assert_fail@plt+0xd7e0>
   20508:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2050c:	add	fp, sp, #28
   20510:	sub	sp, sp, #4
   20514:	mov	r5, r1
   20518:	mov	r4, r0
   2051c:	cmp	r2, #0
   20520:	beq	2054c <__assert_fail@plt+0xd95c>
   20524:	movw	r1, #13527	; 0x34d7
   20528:	mov	r0, r5
   2052c:	mov	r2, r4
   20530:	movt	r1, #4
   20534:	bl	128fc <fprintf@plt>
   20538:	mov	r1, r0
   2053c:	mov	r0, #0
   20540:	cmn	r1, #1
   20544:	movwgt	r0, #1
   20548:	b	2069c <__assert_fail@plt+0xdaac>
   2054c:	movw	r7, #6677	; 0x1a15
   20550:	movw	r6, #6671	; 0x1a0f
   20554:	movw	r8, #6680	; 0x1a18
   20558:	movw	r9, #6683	; 0x1a1b
   2055c:	movw	sl, #6662	; 0x1a06
   20560:	movt	r7, #4
   20564:	movt	r6, #4
   20568:	movt	r8, #4
   2056c:	movt	r9, #4
   20570:	movt	sl, #4
   20574:	ldrb	r2, [r4], #1
   20578:	cmp	r2, #31
   2057c:	bgt	205dc <__assert_fail@plt+0xd9ec>
   20580:	cmp	r2, #13
   20584:	bhi	2065c <__assert_fail@plt+0xda6c>
   20588:	add	r1, pc, #4
   2058c:	mov	r0, #1
   20590:	ldr	pc, [r1, r2, lsl #2]
   20594:	muleq	r2, ip, r6
   20598:	andeq	r0, r2, ip, asr r6
   2059c:	andeq	r0, r2, ip, asr r6
   205a0:	andeq	r0, r2, ip, asr r6
   205a4:	andeq	r0, r2, ip, asr r6
   205a8:	andeq	r0, r2, ip, asr r6
   205ac:	andeq	r0, r2, ip, asr r6
   205b0:	andeq	r0, r2, ip, asr r6
   205b4:	andeq	r0, r2, ip, asr #11
   205b8:	andeq	r0, r2, r0, lsl #12
   205bc:	andeq	r0, r2, r0, lsl r6
   205c0:	andeq	r0, r2, ip, asr r6
   205c4:	andeq	r0, r2, r0, lsr #12
   205c8:	andeq	r0, r2, ip, lsr #12
   205cc:	movw	r1, #6668	; 0x1a0c
   205d0:	mov	r0, r5
   205d4:	movt	r1, #4
   205d8:	b	2064c <__assert_fail@plt+0xda5c>
   205dc:	cmp	r2, #32
   205e0:	beq	20638 <__assert_fail@plt+0xda48>
   205e4:	cmp	r2, #34	; 0x22
   205e8:	beq	20644 <__assert_fail@plt+0xda54>
   205ec:	cmp	r2, #92	; 0x5c
   205f0:	bne	2065c <__assert_fail@plt+0xda6c>
   205f4:	mov	r0, r5
   205f8:	mov	r1, sl
   205fc:	b	2064c <__assert_fail@plt+0xda5c>
   20600:	movw	r1, #6674	; 0x1a12
   20604:	mov	r0, r5
   20608:	movt	r1, #4
   2060c:	b	2064c <__assert_fail@plt+0xda5c>
   20610:	movw	r1, #6665	; 0x1a09
   20614:	mov	r0, r5
   20618:	movt	r1, #4
   2061c:	b	2064c <__assert_fail@plt+0xda5c>
   20620:	mov	r0, r5
   20624:	mov	r1, r7
   20628:	b	2064c <__assert_fail@plt+0xda5c>
   2062c:	mov	r0, r5
   20630:	mov	r1, r6
   20634:	b	2064c <__assert_fail@plt+0xda5c>
   20638:	mov	r0, r5
   2063c:	mov	r1, r8
   20640:	b	2064c <__assert_fail@plt+0xda5c>
   20644:	mov	r0, r5
   20648:	mov	r1, r9
   2064c:	bl	128fc <fprintf@plt>
   20650:	cmn	r0, #1
   20654:	bgt	20574 <__assert_fail@plt+0xd984>
   20658:	b	20698 <__assert_fail@plt+0xdaa8>
   2065c:	sub	r0, r2, #33	; 0x21
   20660:	uxtb	r0, r0
   20664:	cmp	r0, #93	; 0x5d
   20668:	bhi	20684 <__assert_fail@plt+0xda94>
   2066c:	mov	r0, r2
   20670:	mov	r1, r5
   20674:	bl	12ac4 <putc@plt>
   20678:	cmn	r0, #1
   2067c:	bne	20574 <__assert_fail@plt+0xd984>
   20680:	b	20698 <__assert_fail@plt+0xdaa8>
   20684:	movw	r1, #6686	; 0x1a1e
   20688:	mov	r0, r5
   2068c:	movt	r1, #4
   20690:	bl	128fc <fprintf@plt>
   20694:	b	20650 <__assert_fail@plt+0xda60>
   20698:	mov	r0, #0
   2069c:	sub	sp, fp, #28
   206a0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   206a4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   206a8:	add	fp, sp, #28
   206ac:	sub	sp, sp, #12
   206b0:	sub	sp, sp, #8192	; 0x2000
   206b4:	ldr	r7, [fp, #8]
   206b8:	mov	r9, r3
   206bc:	mov	sl, r0
   206c0:	cmp	r2, #0
   206c4:	beq	20764 <__assert_fail@plt+0xdb74>
   206c8:	add	r4, sp, #8
   206cc:	mov	r8, r1
   206d0:	str	r1, [sp]
   206d4:	mov	r1, #8192	; 0x2000
   206d8:	mov	r2, r7
   206dc:	mvn	r3, #0
   206e0:	mov	r0, r4
   206e4:	bl	28070 <__assert_fail@plt+0x15480>
   206e8:	mov	r5, r0
   206ec:	cmp	r0, #8192	; 0x2000
   206f0:	mov	r6, r4
   206f4:	bcc	20720 <__assert_fail@plt+0xdb30>
   206f8:	add	r4, r5, #1
   206fc:	mov	r0, r4
   20700:	bl	2a688 <__assert_fail@plt+0x17a98>
   20704:	mov	r1, r4
   20708:	mov	r2, r7
   2070c:	mvn	r3, #0
   20710:	mov	r6, r0
   20714:	str	r8, [sp]
   20718:	add	r4, sp, #8
   2071c:	bl	28070 <__assert_fail@plt+0x15480>
   20720:	mov	r0, r6
   20724:	mov	r1, r5
   20728:	bl	2077c <__assert_fail@plt+0xdb8c>
   2072c:	mov	r1, #0
   20730:	mov	r2, r6
   20734:	strb	r1, [r6, r0]
   20738:	mov	r0, sl
   2073c:	mov	r1, r9
   20740:	bl	128fc <fprintf@plt>
   20744:	mov	r5, r0
   20748:	cmp	r6, r4
   2074c:	beq	20758 <__assert_fail@plt+0xdb68>
   20750:	mov	r0, r6
   20754:	bl	2bcbc <__assert_fail@plt+0x190cc>
   20758:	mov	r0, r5
   2075c:	sub	sp, fp, #28
   20760:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20764:	mov	r0, sl
   20768:	mov	r1, r9
   2076c:	mov	r2, r7
   20770:	sub	sp, fp, #28
   20774:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20778:	b	128fc <fprintf@plt>
   2077c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20780:	add	fp, sp, #28
   20784:	sub	sp, sp, #20
   20788:	mov	r5, r1
   2078c:	mov	r6, r0
   20790:	add	sl, r0, r1
   20794:	bl	12758 <__ctype_get_mb_cur_max@plt>
   20798:	cmp	r0, #2
   2079c:	bcs	207d8 <__assert_fail@plt+0xdbe8>
   207a0:	cmp	r5, #1
   207a4:	blt	20a44 <__assert_fail@plt+0xde54>
   207a8:	bl	1286c <__ctype_b_loc@plt>
   207ac:	mov	r1, #63	; 0x3f
   207b0:	ldrb	r2, [r6]
   207b4:	ldr	r3, [r0]
   207b8:	add	r2, r3, r2, lsl #1
   207bc:	ldrb	r2, [r2, #1]
   207c0:	tst	r2, #64	; 0x40
   207c4:	strbeq	r1, [r6]
   207c8:	add	r6, r6, #1
   207cc:	cmp	r6, sl
   207d0:	bcc	207b0 <__assert_fail@plt+0xdbc0>
   207d4:	b	20a44 <__assert_fail@plt+0xde54>
   207d8:	cmp	r5, #1
   207dc:	mov	r4, r6
   207e0:	blt	20a40 <__assert_fail@plt+0xde50>
   207e4:	mov	r3, #0
   207e8:	add	r8, sp, #4
   207ec:	add	r9, sp, #8
   207f0:	mov	r4, r6
   207f4:	mov	r7, r6
   207f8:	ldrb	r0, [r7]
   207fc:	sub	r1, r0, #32
   20800:	cmp	r1, #94	; 0x5e
   20804:	bhi	209a0 <__assert_fail@plt+0xddb0>
   20808:	add	r2, pc, #0
   2080c:	ldr	pc, [r2, r1, lsl #2]
   20810:	andeq	r0, r2, ip, lsl #19
   20814:	andeq	r0, r2, ip, lsl #19
   20818:	andeq	r0, r2, ip, lsl #19
   2081c:	andeq	r0, r2, ip, lsl #19
   20820:	andeq	r0, r2, r0, lsr #19
   20824:	andeq	r0, r2, ip, lsl #19
   20828:	andeq	r0, r2, ip, lsl #19
   2082c:	andeq	r0, r2, ip, lsl #19
   20830:	andeq	r0, r2, ip, lsl #19
   20834:	andeq	r0, r2, ip, lsl #19
   20838:	andeq	r0, r2, ip, lsl #19
   2083c:	andeq	r0, r2, ip, lsl #19
   20840:	andeq	r0, r2, ip, lsl #19
   20844:	andeq	r0, r2, ip, lsl #19
   20848:	andeq	r0, r2, ip, lsl #19
   2084c:	andeq	r0, r2, ip, lsl #19
   20850:	andeq	r0, r2, ip, lsl #19
   20854:	andeq	r0, r2, ip, lsl #19
   20858:	andeq	r0, r2, ip, lsl #19
   2085c:	andeq	r0, r2, ip, lsl #19
   20860:	andeq	r0, r2, ip, lsl #19
   20864:	andeq	r0, r2, ip, lsl #19
   20868:	andeq	r0, r2, ip, lsl #19
   2086c:	andeq	r0, r2, ip, lsl #19
   20870:	andeq	r0, r2, ip, lsl #19
   20874:	andeq	r0, r2, ip, lsl #19
   20878:	andeq	r0, r2, ip, lsl #19
   2087c:	andeq	r0, r2, ip, lsl #19
   20880:	andeq	r0, r2, ip, lsl #19
   20884:	andeq	r0, r2, ip, lsl #19
   20888:	andeq	r0, r2, ip, lsl #19
   2088c:	andeq	r0, r2, ip, lsl #19
   20890:	andeq	r0, r2, r0, lsr #19
   20894:	andeq	r0, r2, ip, lsl #19
   20898:	andeq	r0, r2, ip, lsl #19
   2089c:	andeq	r0, r2, ip, lsl #19
   208a0:	andeq	r0, r2, ip, lsl #19
   208a4:	andeq	r0, r2, ip, lsl #19
   208a8:	andeq	r0, r2, ip, lsl #19
   208ac:	andeq	r0, r2, ip, lsl #19
   208b0:	andeq	r0, r2, ip, lsl #19
   208b4:	andeq	r0, r2, ip, lsl #19
   208b8:	andeq	r0, r2, ip, lsl #19
   208bc:	andeq	r0, r2, ip, lsl #19
   208c0:	andeq	r0, r2, ip, lsl #19
   208c4:	andeq	r0, r2, ip, lsl #19
   208c8:	andeq	r0, r2, ip, lsl #19
   208cc:	andeq	r0, r2, ip, lsl #19
   208d0:	andeq	r0, r2, ip, lsl #19
   208d4:	andeq	r0, r2, ip, lsl #19
   208d8:	andeq	r0, r2, ip, lsl #19
   208dc:	andeq	r0, r2, ip, lsl #19
   208e0:	andeq	r0, r2, ip, lsl #19
   208e4:	andeq	r0, r2, ip, lsl #19
   208e8:	andeq	r0, r2, ip, lsl #19
   208ec:	andeq	r0, r2, ip, lsl #19
   208f0:	andeq	r0, r2, ip, lsl #19
   208f4:	andeq	r0, r2, ip, lsl #19
   208f8:	andeq	r0, r2, ip, lsl #19
   208fc:	andeq	r0, r2, ip, lsl #19
   20900:	andeq	r0, r2, ip, lsl #19
   20904:	andeq	r0, r2, ip, lsl #19
   20908:	andeq	r0, r2, ip, lsl #19
   2090c:	andeq	r0, r2, ip, lsl #19
   20910:	andeq	r0, r2, r0, lsr #19
   20914:	andeq	r0, r2, ip, lsl #19
   20918:	andeq	r0, r2, ip, lsl #19
   2091c:	andeq	r0, r2, ip, lsl #19
   20920:	andeq	r0, r2, ip, lsl #19
   20924:	andeq	r0, r2, ip, lsl #19
   20928:	andeq	r0, r2, ip, lsl #19
   2092c:	andeq	r0, r2, ip, lsl #19
   20930:	andeq	r0, r2, ip, lsl #19
   20934:	andeq	r0, r2, ip, lsl #19
   20938:	andeq	r0, r2, ip, lsl #19
   2093c:	andeq	r0, r2, ip, lsl #19
   20940:	andeq	r0, r2, ip, lsl #19
   20944:	andeq	r0, r2, ip, lsl #19
   20948:	andeq	r0, r2, ip, lsl #19
   2094c:	andeq	r0, r2, ip, lsl #19
   20950:	andeq	r0, r2, ip, lsl #19
   20954:	andeq	r0, r2, ip, lsl #19
   20958:	andeq	r0, r2, ip, lsl #19
   2095c:	andeq	r0, r2, ip, lsl #19
   20960:	andeq	r0, r2, ip, lsl #19
   20964:	andeq	r0, r2, ip, lsl #19
   20968:	andeq	r0, r2, ip, lsl #19
   2096c:	andeq	r0, r2, ip, lsl #19
   20970:	andeq	r0, r2, ip, lsl #19
   20974:	andeq	r0, r2, ip, lsl #19
   20978:	andeq	r0, r2, ip, lsl #19
   2097c:	andeq	r0, r2, ip, lsl #19
   20980:	andeq	r0, r2, ip, lsl #19
   20984:	andeq	r0, r2, ip, lsl #19
   20988:	andeq	r0, r2, ip, lsl #19
   2098c:	strb	r0, [r4], #1
   20990:	add	r7, r7, #1
   20994:	cmp	r7, sl
   20998:	bcc	207f8 <__assert_fail@plt+0xdc08>
   2099c:	b	20a40 <__assert_fail@plt+0xde50>
   209a0:	str	r3, [sp, #12]
   209a4:	str	r3, [sp, #8]
   209a8:	sub	r2, sl, r7
   209ac:	mov	r0, r8
   209b0:	mov	r1, r7
   209b4:	mov	r3, r9
   209b8:	bl	2debc <__assert_fail@plt+0x1b2cc>
   209bc:	cmp	r0, #0
   209c0:	beq	209dc <__assert_fail@plt+0xddec>
   209c4:	mov	r5, r0
   209c8:	cmn	r0, #2
   209cc:	beq	20a24 <__assert_fail@plt+0xde34>
   209d0:	cmn	r5, #1
   209d4:	bne	209e0 <__assert_fail@plt+0xddf0>
   209d8:	b	20a2c <__assert_fail@plt+0xde3c>
   209dc:	mov	r5, #1
   209e0:	ldr	r0, [sp, #4]
   209e4:	bl	1256c <wcwidth@plt>
   209e8:	cmp	r0, #0
   209ec:	bmi	20a04 <__assert_fail@plt+0xde14>
   209f0:	ldrb	r0, [r7], #1
   209f4:	subs	r5, r5, #1
   209f8:	strb	r0, [r4], #1
   209fc:	bne	209f0 <__assert_fail@plt+0xde00>
   20a00:	b	20a10 <__assert_fail@plt+0xde20>
   20a04:	mov	r0, #63	; 0x3f
   20a08:	add	r7, r7, r5
   20a0c:	strb	r0, [r4], #1
   20a10:	mov	r0, r9
   20a14:	bl	1262c <mbsinit@plt>
   20a18:	cmp	r0, #0
   20a1c:	beq	209a8 <__assert_fail@plt+0xddb8>
   20a20:	b	20a38 <__assert_fail@plt+0xde48>
   20a24:	mov	r7, sl
   20a28:	b	20a30 <__assert_fail@plt+0xde40>
   20a2c:	add	r7, r7, #1
   20a30:	mov	r0, #63	; 0x3f
   20a34:	strb	r0, [r4], #1
   20a38:	mov	r3, #0
   20a3c:	b	20994 <__assert_fail@plt+0xdda4>
   20a40:	sub	r5, r4, r6
   20a44:	mov	r0, r5
   20a48:	sub	sp, fp, #28
   20a4c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20a50:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20a54:	add	fp, sp, #28
   20a58:	sub	sp, sp, #12
   20a5c:	movw	sl, #6692	; 0x1a24
   20a60:	mov	r7, r0
   20a64:	mov	r4, #0
   20a68:	mov	r6, #0
   20a6c:	movt	sl, #4
   20a70:	ldr	r5, [sl, r4]
   20a74:	mov	r1, r7
   20a78:	mov	r0, r5
   20a7c:	bl	124f4 <strcmp@plt>
   20a80:	cmp	r0, #0
   20a84:	beq	20b44 <__assert_fail@plt+0xdf54>
   20a88:	mov	r0, r5
   20a8c:	bl	298a0 <__assert_fail@plt+0x16cb0>
   20a90:	bl	128c0 <strlen@plt>
   20a94:	add	r0, r6, r0
   20a98:	add	r4, r4, #12
   20a9c:	add	r6, r0, #2
   20aa0:	cmp	r4, #156	; 0x9c
   20aa4:	bne	20a70 <__assert_fail@plt+0xde80>
   20aa8:	add	r0, r6, #1
   20aac:	str	r7, [sp, #8]
   20ab0:	bl	2a688 <__assert_fail@plt+0x17a98>
   20ab4:	mov	r6, r0
   20ab8:	mov	r4, #0
   20abc:	movw	r8, #8236	; 0x202c
   20ac0:	mov	r9, #0
   20ac4:	str	r0, [sp, #4]
   20ac8:	ldr	r0, [sl, -r9]
   20acc:	cmp	r9, #0
   20ad0:	strhne	r8, [r6]
   20ad4:	strbne	r4, [r6, #2]!
   20ad8:	bl	298a0 <__assert_fail@plt+0x16cb0>
   20adc:	mov	r7, r0
   20ae0:	bl	128c0 <strlen@plt>
   20ae4:	mov	r5, r0
   20ae8:	add	r2, r0, #1
   20aec:	mov	r0, r6
   20af0:	mov	r1, r7
   20af4:	bl	125f0 <memcpy@plt>
   20af8:	sub	r9, r9, #12
   20afc:	add	r6, r6, r5
   20b00:	cmn	r9, #156	; 0x9c
   20b04:	bne	20ac8 <__assert_fail@plt+0xded8>
   20b08:	movw	r1, #6848	; 0x1ac0
   20b0c:	mov	r0, #0
   20b10:	mov	r2, #5
   20b14:	movt	r1, #4
   20b18:	bl	12674 <dcgettext@plt>
   20b1c:	mov	r5, r0
   20b20:	ldr	r0, [sp, #8]
   20b24:	bl	298a0 <__assert_fail@plt+0x16cb0>
   20b28:	mov	r3, r0
   20b2c:	ldr	r0, [sp, #4]
   20b30:	mov	r1, #0
   20b34:	mov	r2, r5
   20b38:	str	r0, [sp]
   20b3c:	mov	r0, #1
   20b40:	bl	127b8 <error@plt>
   20b44:	add	r0, sl, r4
   20b48:	ldr	r0, [r0, #8]
   20b4c:	sub	sp, fp, #28
   20b50:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20b54:	mov	r1, r0
   20b58:	mov	r0, #0
   20b5c:	cmp	r1, #12
   20b60:	bxhi	lr
   20b64:	add	r0, r1, r1, lsl #1
   20b68:	movw	r1, #6692	; 0x1a24
   20b6c:	movt	r1, #4
   20b70:	ldr	r0, [r1, r0, lsl #2]
   20b74:	bx	lr
   20b78:	mov	r1, r0
   20b7c:	mvn	r0, #0
   20b80:	cmp	r1, #12
   20b84:	bxhi	lr
   20b88:	add	r0, r1, r1, lsl #1
   20b8c:	movw	r1, #6692	; 0x1a24
   20b90:	movt	r1, #4
   20b94:	add	r0, r1, r0, lsl #2
   20b98:	ldr	r0, [r0, #8]
   20b9c:	bx	lr
   20ba0:	mov	r1, r0
   20ba4:	mov	r0, #0
   20ba8:	cmp	r1, #12
   20bac:	bxhi	lr
   20bb0:	add	r0, r1, r1, lsl #1
   20bb4:	movw	r1, #6692	; 0x1a24
   20bb8:	movt	r1, #4
   20bbc:	add	r0, r1, r0, lsl #2
   20bc0:	ldr	r0, [r0, #4]
   20bc4:	bx	lr
   20bc8:	push	{r4, sl, fp, lr}
   20bcc:	add	fp, sp, #8
   20bd0:	mov	lr, r0
   20bd4:	mvn	r0, #0
   20bd8:	cmp	lr, #12
   20bdc:	pophi	{r4, sl, fp, pc}
   20be0:	cmp	lr, #0
   20be4:	beq	20c2c <__assert_fail@plt+0xe03c>
   20be8:	movw	r3, #6692	; 0x1a24
   20bec:	add	r2, lr, lr, lsl #1
   20bf0:	movt	r3, #4
   20bf4:	add	r2, r3, r2, lsl #2
   20bf8:	ldr	ip, [r2, #8]
   20bfc:	add	r2, r3, #4
   20c00:	mov	r3, #0
   20c04:	ldr	r4, [r2]
   20c08:	tst	r4, r1
   20c0c:	beq	20c1c <__assert_fail@plt+0xe02c>
   20c10:	ldr	r4, [r2, #4]
   20c14:	cmp	ip, r4
   20c18:	beq	20c30 <__assert_fail@plt+0xe040>
   20c1c:	add	r3, r3, #1
   20c20:	add	r2, r2, #12
   20c24:	cmp	lr, r3
   20c28:	bne	20c04 <__assert_fail@plt+0xe014>
   20c2c:	pop	{r4, sl, fp, pc}
   20c30:	mov	r0, r3
   20c34:	pop	{r4, sl, fp, pc}
   20c38:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   20c3c:	add	fp, sp, #24
   20c40:	sub	sp, sp, #8
   20c44:	mov	r5, r1
   20c48:	mov	r4, r0
   20c4c:	bl	12908 <__errno_location@plt>
   20c50:	mov	r6, r0
   20c54:	mov	r0, #0
   20c58:	add	r1, sp, #4
   20c5c:	mov	r2, #10
   20c60:	str	r0, [r6]
   20c64:	mov	r0, r4
   20c68:	bl	12500 <strtol@plt>
   20c6c:	add	r1, r0, #-2147483647	; 0x80000001
   20c70:	cmp	r1, #1
   20c74:	bls	20cd4 <__assert_fail@plt+0xe0e4>
   20c78:	ldr	r7, [sp, #4]
   20c7c:	ldrb	r1, [r7]
   20c80:	cmp	r1, #0
   20c84:	bne	20cec <__assert_fail@plt+0xe0fc>
   20c88:	cmp	r7, r4
   20c8c:	subne	sp, fp, #24
   20c90:	popne	{r4, r5, r6, r7, r8, sl, fp, pc}
   20c94:	movw	r1, #7032	; 0x1b78
   20c98:	ldr	r6, [r6]
   20c9c:	mov	r0, #0
   20ca0:	mov	r2, #5
   20ca4:	movt	r1, #4
   20ca8:	bl	12674 <dcgettext@plt>
   20cac:	mov	r7, r0
   20cb0:	mov	r0, #0
   20cb4:	mov	r1, r5
   20cb8:	mov	r2, r4
   20cbc:	bl	294c0 <__assert_fail@plt+0x168d0>
   20cc0:	mov	r3, r0
   20cc4:	mov	r0, #1
   20cc8:	mov	r1, r6
   20ccc:	mov	r2, r7
   20cd0:	bl	127b8 <error@plt>
   20cd4:	ldr	r1, [r6]
   20cd8:	movw	r2, #13527	; 0x34d7
   20cdc:	mov	r0, #1
   20ce0:	mov	r3, r4
   20ce4:	movt	r2, #4
   20ce8:	bl	127b8 <error@plt>
   20cec:	movw	r1, #7005	; 0x1b5d
   20cf0:	ldr	r8, [r6]
   20cf4:	mov	r0, #0
   20cf8:	mov	r2, #5
   20cfc:	movt	r1, #4
   20d00:	bl	12674 <dcgettext@plt>
   20d04:	mov	r6, r0
   20d08:	mov	r0, #0
   20d0c:	mov	r1, r5
   20d10:	mov	r2, r7
   20d14:	bl	294c0 <__assert_fail@plt+0x168d0>
   20d18:	mov	r7, r0
   20d1c:	mov	r0, #1
   20d20:	mov	r1, r5
   20d24:	mov	r2, r4
   20d28:	bl	294c0 <__assert_fail@plt+0x168d0>
   20d2c:	str	r0, [sp]
   20d30:	mov	r0, #1
   20d34:	mov	r1, r8
   20d38:	mov	r2, r6
   20d3c:	mov	r3, r7
   20d40:	bl	127b8 <error@plt>
   20d44:	push	{r4, r5, fp, lr}
   20d48:	add	fp, sp, #8
   20d4c:	ldr	r5, [fp, #8]
   20d50:	cmp	r2, #0
   20d54:	beq	20d6c <__assert_fail@plt+0xe17c>
   20d58:	mov	r2, #0
   20d5c:	str	r2, [r3]
   20d60:	str	r2, [r5]
   20d64:	ldr	r2, [r3]
   20d68:	b	20d90 <__assert_fail@plt+0xe1a0>
   20d6c:	ldr	r2, [r5]
   20d70:	ldr	r4, [r3]
   20d74:	add	r2, r4, r2
   20d78:	str	r2, [r3]
   20d7c:	ldrb	r4, [r0, r2]
   20d80:	cmp	r4, #0
   20d84:	beq	20dcc <__assert_fail@plt+0xe1dc>
   20d88:	add	r2, r2, #1
   20d8c:	str	r2, [r3]
   20d90:	add	r4, r0, r2
   20d94:	ldrb	r0, [r1]
   20d98:	cmp	r0, #0
   20d9c:	beq	20db8 <__assert_fail@plt+0xe1c8>
   20da0:	mov	r0, r4
   20da4:	bl	12b0c <strpbrk@plt>
   20da8:	cmp	r0, #0
   20dac:	beq	20db8 <__assert_fail@plt+0xe1c8>
   20db0:	sub	r0, r0, r4
   20db4:	b	20dc0 <__assert_fail@plt+0xe1d0>
   20db8:	mov	r0, r4
   20dbc:	bl	128c0 <strlen@plt>
   20dc0:	str	r0, [r5]
   20dc4:	mov	r0, #1
   20dc8:	pop	{r4, r5, fp, pc}
   20dcc:	mov	r0, #0
   20dd0:	pop	{r4, r5, fp, pc}
   20dd4:	push	{r4, r5, fp, lr}
   20dd8:	add	fp, sp, #8
   20ddc:	sub	sp, sp, #16
   20de0:	mov	r4, r1
   20de4:	movw	r1, #7056	; 0x1b90
   20de8:	mov	r5, r0
   20dec:	mov	r0, #0
   20df0:	mov	r2, #5
   20df4:	movt	r1, #4
   20df8:	bl	12674 <dcgettext@plt>
   20dfc:	movw	r2, #7301	; 0x1c85
   20e00:	movw	r3, #6501	; 0x1965
   20e04:	mov	r1, r0
   20e08:	movw	r0, #7348	; 0x1cb4
   20e0c:	movt	r2, #4
   20e10:	movt	r0, #4
   20e14:	movt	r3, #4
   20e18:	str	r2, [sp, #4]
   20e1c:	movw	r2, #7262	; 0x1c5e
   20e20:	str	r3, [sp]
   20e24:	str	r0, [sp, #8]
   20e28:	mov	r0, r5
   20e2c:	mov	r3, r4
   20e30:	movt	r2, #4
   20e34:	bl	128fc <fprintf@plt>
   20e38:	sub	sp, fp, #8
   20e3c:	pop	{r4, r5, fp, pc}
   20e40:	push	{fp, lr}
   20e44:	mov	fp, sp
   20e48:	sub	sp, sp, #8
   20e4c:	movw	r2, #10276	; 0x2824
   20e50:	mov	r3, #0
   20e54:	movt	r2, #1
   20e58:	str	r3, [sp]
   20e5c:	mov	r3, #0
   20e60:	str	r2, [sp, #4]
   20e64:	mov	r2, #0
   20e68:	bl	20fd8 <__assert_fail@plt+0xe3e8>
   20e6c:	mov	sp, fp
   20e70:	pop	{fp, pc}
   20e74:	push	{r4, sl, fp, lr}
   20e78:	add	fp, sp, #8
   20e7c:	mov	r4, r0
   20e80:	mov	r0, #24
   20e84:	bl	2de8c <__assert_fail@plt+0x1b29c>
   20e88:	cmp	r0, #0
   20e8c:	moveq	r0, #0
   20e90:	movne	r1, #0
   20e94:	strne	r4, [r0, #16]
   20e98:	strne	r4, [r0, #20]
   20e9c:	strne	r1, [r0]
   20ea0:	pop	{r4, sl, fp, pc}
   20ea4:	push	{r4, sl, fp, lr}
   20ea8:	add	fp, sp, #8
   20eac:	mov	r4, r0
   20eb0:	mov	r0, #24
   20eb4:	bl	2de8c <__assert_fail@plt+0x1b29c>
   20eb8:	cmp	r0, #0
   20ebc:	beq	20ed4 <__assert_fail@plt+0xe2e4>
   20ec0:	vmov.i32	q8, #0	; 0x00000000
   20ec4:	mov	r1, r0
   20ec8:	str	r4, [r1], #4
   20ecc:	vst1.32	{d16-d17}, [r1]
   20ed0:	pop	{r4, sl, fp, pc}
   20ed4:	mov	r0, #0
   20ed8:	pop	{r4, sl, fp, pc}
   20edc:	push	{r4, r5, r6, sl, fp, lr}
   20ee0:	add	fp, sp, #16
   20ee4:	ldr	r3, [r0]
   20ee8:	mov	r4, r1
   20eec:	mov	r5, r0
   20ef0:	cmp	r3, #0
   20ef4:	beq	20f2c <__assert_fail@plt+0xe33c>
   20ef8:	add	r0, r5, #8
   20efc:	add	r1, r5, #12
   20f00:	mov	r2, #0
   20f04:	mov	r6, #0
   20f08:	bl	12b48 <getdelim@plt>
   20f0c:	cmn	r0, #1
   20f10:	ble	20f58 <__assert_fail@plt+0xe368>
   20f14:	mov	r0, #1
   20f18:	str	r0, [r4]
   20f1c:	ldmib	r5, {r0, r6}
   20f20:	add	r0, r0, #1
   20f24:	str	r0, [r5, #4]
   20f28:	b	20f80 <__assert_fail@plt+0xe390>
   20f2c:	ldr	r0, [r5, #20]
   20f30:	ldr	r0, [r0]
   20f34:	cmp	r0, #0
   20f38:	beq	20f74 <__assert_fail@plt+0xe384>
   20f3c:	mov	r0, #1
   20f40:	str	r0, [r4]
   20f44:	ldr	r0, [r5, #20]
   20f48:	add	r1, r0, #4
   20f4c:	str	r1, [r5, #20]
   20f50:	ldr	r6, [r0]
   20f54:	b	20f80 <__assert_fail@plt+0xe390>
   20f58:	ldr	r0, [r5]
   20f5c:	bl	12890 <feof@plt>
   20f60:	cmp	r0, #0
   20f64:	mov	r1, #2
   20f68:	movweq	r1, #4
   20f6c:	str	r1, [r4]
   20f70:	b	20f80 <__assert_fail@plt+0xe390>
   20f74:	mov	r0, #2
   20f78:	mov	r6, #0
   20f7c:	str	r0, [r4]
   20f80:	mov	r0, r6
   20f84:	pop	{r4, r5, r6, sl, fp, pc}
   20f88:	ldr	r1, [r0]
   20f8c:	cmp	r1, #0
   20f90:	ldrne	r0, [r0, #4]
   20f94:	bxne	lr
   20f98:	ldr	r1, [r0, #16]
   20f9c:	ldr	r0, [r0, #20]
   20fa0:	sub	r0, r0, r1
   20fa4:	asr	r0, r0, #2
   20fa8:	bx	lr
   20fac:	push	{r4, sl, fp, lr}
   20fb0:	add	fp, sp, #8
   20fb4:	mov	r4, r0
   20fb8:	ldr	r0, [r0]
   20fbc:	cmp	r0, #0
   20fc0:	beq	20fcc <__assert_fail@plt+0xe3dc>
   20fc4:	ldr	r0, [r4, #8]
   20fc8:	bl	2bcbc <__assert_fail@plt+0x190cc>
   20fcc:	mov	r0, r4
   20fd0:	pop	{r4, sl, fp, lr}
   20fd4:	b	2bcbc <__assert_fail@plt+0x190cc>
   20fd8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20fdc:	add	fp, sp, #28
   20fe0:	sub	sp, sp, #4
   20fe4:	sub	sp, sp, #1024	; 0x400
   20fe8:	mov	r9, r0
   20fec:	mov	r0, sp
   20ff0:	cmp	r2, #0
   20ff4:	mov	r5, r2
   20ff8:	mov	r4, r3
   20ffc:	ldr	sl, [fp, #12]
   21000:	movw	r7, #13424	; 0x3470
   21004:	mov	r8, r1
   21008:	moveq	r5, r0
   2100c:	ldr	r0, [fp, #8]
   21010:	movweq	r4, #1024	; 0x400
   21014:	movt	r7, #4
   21018:	cmn	r4, #-2147483647	; 0x80000001
   2101c:	mov	r6, r5
   21020:	mvncs	r4, #-2147483648	; 0x80000000
   21024:	cmp	r0, #0
   21028:	movne	r7, r0
   2102c:	mov	r0, r9
   21030:	mov	r1, r8
   21034:	mov	r2, r6
   21038:	mov	r3, r4
   2103c:	blx	sl
   21040:	cmn	r0, #1
   21044:	ble	210ac <__assert_fail@plt+0xe4bc>
   21048:	cmp	r0, r4
   2104c:	blt	210d8 <__assert_fail@plt+0xe4e8>
   21050:	cmp	r6, r5
   21054:	beq	21064 <__assert_fail@plt+0xe474>
   21058:	ldr	r1, [r7, #8]
   2105c:	mov	r0, r6
   21060:	blx	r1
   21064:	cmn	r4, #-1073741823	; 0xc0000001
   21068:	bge	21128 <__assert_fail@plt+0xe538>
   2106c:	mov	r0, #1
   21070:	ldr	r1, [r7]
   21074:	orr	r4, r0, r4, lsl #1
   21078:	mov	r0, r4
   2107c:	blx	r1
   21080:	mov	r6, r0
   21084:	cmp	r0, #0
   21088:	bne	2102c <__assert_fail@plt+0xe43c>
   2108c:	ldr	r1, [r7, #12]
   21090:	cmp	r1, #0
   21094:	beq	210a0 <__assert_fail@plt+0xe4b0>
   21098:	mov	r0, r4
   2109c:	blx	r1
   210a0:	bl	12908 <__errno_location@plt>
   210a4:	mov	r1, #12
   210a8:	b	21130 <__assert_fail@plt+0xe540>
   210ac:	mov	r4, #0
   210b0:	cmp	r6, r5
   210b4:	beq	21138 <__assert_fail@plt+0xe548>
   210b8:	bl	12908 <__errno_location@plt>
   210bc:	ldr	r1, [r7, #8]
   210c0:	ldr	r8, [r0]
   210c4:	mov	r5, r0
   210c8:	mov	r0, r6
   210cc:	blx	r1
   210d0:	str	r8, [r5]
   210d4:	b	21138 <__assert_fail@plt+0xe548>
   210d8:	mov	r1, #0
   210dc:	add	r8, r0, #1
   210e0:	strb	r1, [r6, r0]
   210e4:	mov	r0, sp
   210e8:	cmp	r6, r0
   210ec:	beq	2114c <__assert_fail@plt+0xe55c>
   210f0:	cmp	r6, r5
   210f4:	beq	21144 <__assert_fail@plt+0xe554>
   210f8:	cmp	r8, r4
   210fc:	bge	21144 <__assert_fail@plt+0xe554>
   21100:	ldr	r2, [r7, #4]
   21104:	cmp	r2, #0
   21108:	beq	21144 <__assert_fail@plt+0xe554>
   2110c:	mov	r0, r6
   21110:	mov	r1, r8
   21114:	blx	r2
   21118:	cmp	r0, #0
   2111c:	mov	r4, r0
   21120:	moveq	r4, r6
   21124:	b	21138 <__assert_fail@plt+0xe548>
   21128:	bl	12908 <__errno_location@plt>
   2112c:	mov	r1, #36	; 0x24
   21130:	mov	r4, #0
   21134:	str	r1, [r0]
   21138:	mov	r0, r4
   2113c:	sub	sp, fp, #28
   21140:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21144:	mov	r4, r6
   21148:	b	21138 <__assert_fail@plt+0xe548>
   2114c:	ldr	r1, [r7]
   21150:	mov	r0, r8
   21154:	blx	r1
   21158:	cmp	r0, #0
   2115c:	beq	21174 <__assert_fail@plt+0xe584>
   21160:	mov	r1, sp
   21164:	mov	r2, r8
   21168:	mov	r4, r0
   2116c:	bl	125f0 <memcpy@plt>
   21170:	b	21138 <__assert_fail@plt+0xe548>
   21174:	mov	r4, r8
   21178:	b	2108c <__assert_fail@plt+0xe49c>
   2117c:	push	{r4, r5, r6, sl, fp, lr}
   21180:	add	fp, sp, #16
   21184:	mov	r6, r1
   21188:	mov	r1, #1
   2118c:	mov	r2, #0
   21190:	mov	r4, r0
   21194:	mov	r5, #0
   21198:	bl	2ba88 <__assert_fail@plt+0x18e98>
   2119c:	cmp	r0, #0
   211a0:	bmi	211d0 <__assert_fail@plt+0xe5e0>
   211a4:	cmp	r6, #0
   211a8:	bic	r2, r0, #1
   211ac:	orrne	r2, r0, #1
   211b0:	cmp	r0, r2
   211b4:	beq	211d4 <__assert_fail@plt+0xe5e4>
   211b8:	mov	r0, r4
   211bc:	mov	r1, #2
   211c0:	bl	2ba88 <__assert_fail@plt+0x18e98>
   211c4:	cmn	r0, #1
   211c8:	movwne	r0, #0
   211cc:	pop	{r4, r5, r6, sl, fp, pc}
   211d0:	mvn	r5, #0
   211d4:	mov	r0, r5
   211d8:	pop	{r4, r5, r6, sl, fp, pc}
   211dc:	movw	r1, #1030	; 0x406
   211e0:	mov	r2, #0
   211e4:	b	2ba88 <__assert_fail@plt+0x18e98>
   211e8:	movw	r1, #19724	; 0x4d0c
   211ec:	movt	r1, #5
   211f0:	str	r0, [r1]
   211f4:	bx	lr
   211f8:	movw	r1, #19728	; 0x4d10
   211fc:	movt	r1, #5
   21200:	strb	r0, [r1]
   21204:	bx	lr
   21208:	push	{r4, r5, r6, sl, fp, lr}
   2120c:	add	fp, sp, #16
   21210:	sub	sp, sp, #8
   21214:	movw	r0, #17780	; 0x4574
   21218:	movt	r0, #5
   2121c:	ldr	r0, [r0]
   21220:	bl	3c488 <__assert_fail@plt+0x29898>
   21224:	cmp	r0, #0
   21228:	beq	21250 <__assert_fail@plt+0xe660>
   2122c:	movw	r0, #19728	; 0x4d10
   21230:	movt	r0, #5
   21234:	ldrb	r0, [r0]
   21238:	cmp	r0, #0
   2123c:	beq	21270 <__assert_fail@plt+0xe680>
   21240:	bl	12908 <__errno_location@plt>
   21244:	ldr	r0, [r0]
   21248:	cmp	r0, #32
   2124c:	bne	21270 <__assert_fail@plt+0xe680>
   21250:	movw	r0, #17768	; 0x4568
   21254:	movt	r0, #5
   21258:	ldr	r0, [r0]
   2125c:	bl	3c488 <__assert_fail@plt+0x29898>
   21260:	cmp	r0, #0
   21264:	subeq	sp, fp, #16
   21268:	popeq	{r4, r5, r6, sl, fp, pc}
   2126c:	b	212e0 <__assert_fail@plt+0xe6f0>
   21270:	movw	r1, #7370	; 0x1cca
   21274:	mov	r0, #0
   21278:	mov	r2, #5
   2127c:	movt	r1, #4
   21280:	bl	12674 <dcgettext@plt>
   21284:	mov	r4, r0
   21288:	movw	r0, #19724	; 0x4d0c
   2128c:	movt	r0, #5
   21290:	ldr	r6, [r0]
   21294:	bl	12908 <__errno_location@plt>
   21298:	ldr	r5, [r0]
   2129c:	cmp	r6, #0
   212a0:	bne	212bc <__assert_fail@plt+0xe6cc>
   212a4:	movw	r2, #13527	; 0x34d7
   212a8:	mov	r0, #0
   212ac:	mov	r1, r5
   212b0:	mov	r3, r4
   212b4:	movt	r2, #4
   212b8:	b	212dc <__assert_fail@plt+0xe6ec>
   212bc:	mov	r0, r6
   212c0:	bl	29660 <__assert_fail@plt+0x16a70>
   212c4:	movw	r2, #7382	; 0x1cd6
   212c8:	mov	r3, r0
   212cc:	str	r4, [sp]
   212d0:	mov	r0, #0
   212d4:	mov	r1, r5
   212d8:	movt	r2, #4
   212dc:	bl	127b8 <error@plt>
   212e0:	movw	r0, #17672	; 0x4508
   212e4:	movt	r0, #5
   212e8:	ldr	r0, [r0]
   212ec:	bl	125e4 <_exit@plt>
   212f0:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   212f4:	add	fp, sp, #24
   212f8:	bl	127d0 <opendir@plt>
   212fc:	cmp	r0, #0
   21300:	beq	21354 <__assert_fail@plt+0xe764>
   21304:	mov	r4, r0
   21308:	bl	12ad0 <dirfd@plt>
   2130c:	cmp	r0, #2
   21310:	bhi	2135c <__assert_fail@plt+0xe76c>
   21314:	movw	r1, #1030	; 0x406
   21318:	mov	r2, #3
   2131c:	bl	2ba88 <__assert_fail@plt+0x18e98>
   21320:	cmn	r0, #1
   21324:	ble	21364 <__assert_fail@plt+0xe774>
   21328:	mov	r7, r0
   2132c:	bl	12aac <fdopendir@plt>
   21330:	mov	r5, r0
   21334:	bl	12908 <__errno_location@plt>
   21338:	ldr	r8, [r0]
   2133c:	mov	r6, r0
   21340:	cmp	r5, #0
   21344:	bne	21374 <__assert_fail@plt+0xe784>
   21348:	mov	r0, r7
   2134c:	bl	12ba8 <close@plt>
   21350:	b	21370 <__assert_fail@plt+0xe780>
   21354:	mov	r5, #0
   21358:	b	21380 <__assert_fail@plt+0xe790>
   2135c:	mov	r5, r4
   21360:	b	21380 <__assert_fail@plt+0xe790>
   21364:	bl	12908 <__errno_location@plt>
   21368:	ldr	r8, [r0]
   2136c:	mov	r6, r0
   21370:	mov	r5, #0
   21374:	mov	r0, r4
   21378:	bl	12bc0 <closedir@plt>
   2137c:	str	r8, [r6]
   21380:	mov	r0, r5
   21384:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   21388:	push	{r4, r5, r6, sl, fp, lr}
   2138c:	add	fp, sp, #16
   21390:	mov	r6, r0
   21394:	bl	3c408 <__assert_fail@plt+0x29818>
   21398:	mov	r4, r0
   2139c:	ldrb	r0, [r0]
   213a0:	cmp	r0, #0
   213a4:	beq	213c4 <__assert_fail@plt+0xe7d4>
   213a8:	mov	r0, r4
   213ac:	bl	3c450 <__assert_fail@plt+0x29860>
   213b0:	mov	r5, r0
   213b4:	ldrb	r0, [r4, r0]
   213b8:	cmp	r0, #47	; 0x2f
   213bc:	addeq	r5, r5, #1
   213c0:	b	213d4 <__assert_fail@plt+0xe7e4>
   213c4:	mov	r0, r6
   213c8:	bl	3c450 <__assert_fail@plt+0x29860>
   213cc:	mov	r5, r0
   213d0:	mov	r4, r6
   213d4:	add	r0, r5, #1
   213d8:	bl	2a6a0 <__assert_fail@plt+0x17ab0>
   213dc:	mov	r1, r4
   213e0:	mov	r2, r5
   213e4:	mov	r6, r0
   213e8:	bl	125f0 <memcpy@plt>
   213ec:	mov	r0, #0
   213f0:	strb	r0, [r6, r5]
   213f4:	mov	r0, r6
   213f8:	pop	{r4, r5, r6, sl, fp, pc}
   213fc:	push	{r4, r5, r6, sl, fp, lr}
   21400:	add	fp, sp, #16
   21404:	mov	r5, r0
   21408:	mov	r4, r0
   2140c:	ldrb	r6, [r5], #-1
   21410:	bl	3c408 <__assert_fail@plt+0x29818>
   21414:	sub	r2, r0, r4
   21418:	sub	r0, r6, #47	; 0x2f
   2141c:	clz	r0, r0
   21420:	lsr	r1, r0, #5
   21424:	mov	r0, r2
   21428:	cmp	r2, r1
   2142c:	bls	21440 <__assert_fail@plt+0xe850>
   21430:	ldrb	r3, [r5, r0]
   21434:	sub	r2, r0, #1
   21438:	cmp	r3, #47	; 0x2f
   2143c:	beq	21424 <__assert_fail@plt+0xe834>
   21440:	pop	{r4, r5, r6, sl, fp, pc}
   21444:	push	{r4, r5, r6, sl, fp, lr}
   21448:	add	fp, sp, #16
   2144c:	mov	r6, r0
   21450:	bl	213fc <__assert_fail@plt+0xe80c>
   21454:	cmp	r0, #0
   21458:	mov	r4, r0
   2145c:	addeq	r0, r0, #1
   21460:	add	r0, r0, #1
   21464:	bl	2de8c <__assert_fail@plt+0x1b29c>
   21468:	mov	r5, r0
   2146c:	cmp	r0, #0
   21470:	beq	2149c <__assert_fail@plt+0xe8ac>
   21474:	mov	r0, r5
   21478:	mov	r1, r6
   2147c:	mov	r2, r4
   21480:	bl	125f0 <memcpy@plt>
   21484:	cmp	r4, #0
   21488:	moveq	r0, #46	; 0x2e
   2148c:	moveq	r4, #1
   21490:	strbeq	r0, [r5]
   21494:	mov	r0, #0
   21498:	strb	r0, [r5, r4]
   2149c:	mov	r0, r5
   214a0:	pop	{r4, r5, r6, sl, fp, pc}
   214a4:	push	{r4, r5, fp, lr}
   214a8:	add	fp, sp, #8
   214ac:	mov	r4, r0
   214b0:	bl	3c408 <__assert_fail@plt+0x29818>
   214b4:	mov	r5, r0
   214b8:	ldrb	r0, [r0]
   214bc:	cmp	r0, #0
   214c0:	moveq	r5, r4
   214c4:	mov	r0, r5
   214c8:	bl	3c450 <__assert_fail@plt+0x29860>
   214cc:	ldrb	r1, [r5, r0]
   214d0:	mov	r2, #0
   214d4:	strb	r2, [r5, r0]
   214d8:	cmp	r1, #0
   214dc:	movwne	r1, #1
   214e0:	mov	r0, r1
   214e4:	pop	{r4, r5, fp, pc}
   214e8:	sub	sp, sp, #8
   214ec:	push	{fp, lr}
   214f0:	mov	fp, sp
   214f4:	sub	sp, sp, #8
   214f8:	str	r2, [fp, #8]
   214fc:	str	r3, [fp, #12]
   21500:	tst	r1, #64	; 0x40
   21504:	mov	r2, #0
   21508:	ldrne	r2, [fp, #8]
   2150c:	bl	127e8 <open64@plt>
   21510:	bl	2a1a0 <__assert_fail@plt+0x175b0>
   21514:	mov	sp, fp
   21518:	pop	{fp, lr}
   2151c:	add	sp, sp, #8
   21520:	bx	lr
   21524:	push	{fp, lr}
   21528:	mov	fp, sp
   2152c:	and	r2, r0, #61440	; 0xf000
   21530:	sub	r2, r2, #4096	; 0x1000
   21534:	lsr	r3, r2, #12
   21538:	cmp	r3, #11
   2153c:	bhi	2158c <__assert_fail@plt+0xe99c>
   21540:	add	r2, pc, #4
   21544:	mov	ip, #45	; 0x2d
   21548:	ldr	pc, [r2, r3, lsl #2]
   2154c:	andeq	r1, r2, ip, ror r5
   21550:	andeq	r1, r2, r4, lsl #11
   21554:	andeq	r1, r2, ip, lsl #11
   21558:	muleq	r2, r4, r5
   2155c:	andeq	r1, r2, ip, lsl #11
   21560:	andeq	r1, r2, ip, lsr #11
   21564:	andeq	r1, r2, ip, lsl #11
   21568:			; <UNDEFINED> instruction: 0x000215b0
   2156c:	andeq	r1, r2, ip, lsl #11
   21570:	muleq	r2, ip, r5
   21574:	andeq	r1, r2, ip, lsl #11
   21578:	andeq	r1, r2, r4, lsr #11
   2157c:	mov	ip, #112	; 0x70
   21580:	b	215b0 <__assert_fail@plt+0xe9c0>
   21584:	mov	ip, #99	; 0x63
   21588:	b	215b0 <__assert_fail@plt+0xe9c0>
   2158c:	mov	ip, #63	; 0x3f
   21590:	b	215b0 <__assert_fail@plt+0xe9c0>
   21594:	mov	ip, #100	; 0x64
   21598:	b	215b0 <__assert_fail@plt+0xe9c0>
   2159c:	mov	ip, #108	; 0x6c
   215a0:	b	215b0 <__assert_fail@plt+0xe9c0>
   215a4:	mov	ip, #115	; 0x73
   215a8:	b	215b0 <__assert_fail@plt+0xe9c0>
   215ac:	mov	ip, #98	; 0x62
   215b0:	tst	r0, #2
   215b4:	mov	r3, #119	; 0x77
   215b8:	mov	r2, #32
   215bc:	mov	lr, #45	; 0x2d
   215c0:	movweq	r3, #45	; 0x2d
   215c4:	tst	r0, #4
   215c8:	strh	r2, [r1, #10]
   215cc:	mov	r2, #114	; 0x72
   215d0:	strb	ip, [r1]
   215d4:	mov	ip, #119	; 0x77
   215d8:	movweq	r2, #45	; 0x2d
   215dc:	tst	r0, #16
   215e0:	strb	r3, [r1, #8]
   215e4:	mov	r3, #114	; 0x72
   215e8:	strb	r2, [r1, #7]
   215ec:	mov	r2, #119	; 0x77
   215f0:	movweq	r2, #45	; 0x2d
   215f4:	tst	r0, #32
   215f8:	strb	r2, [r1, #5]
   215fc:	mov	r2, #114	; 0x72
   21600:	movweq	r2, #45	; 0x2d
   21604:	tst	r0, #128	; 0x80
   21608:	movweq	ip, #45	; 0x2d
   2160c:	tst	r0, #256	; 0x100
   21610:	strb	r2, [r1, #4]
   21614:	movweq	r3, #45	; 0x2d
   21618:	ands	r2, r0, #1
   2161c:	strb	ip, [r1, #2]
   21620:	mov	r2, #84	; 0x54
   21624:	mov	ip, #45	; 0x2d
   21628:	strb	r3, [r1, #1]
   2162c:	mov	r3, #45	; 0x2d
   21630:	movwne	r3, #120	; 0x78
   21634:	movwne	r2, #116	; 0x74
   21638:	tst	r0, #512	; 0x200
   2163c:	moveq	r2, r3
   21640:	mov	r3, #83	; 0x53
   21644:	strb	r2, [r1, #9]
   21648:	ands	r2, r0, #8
   2164c:	mov	r2, #83	; 0x53
   21650:	movwne	lr, #120	; 0x78
   21654:	movwne	r2, #115	; 0x73
   21658:	tst	r0, #1024	; 0x400
   2165c:	moveq	r2, lr
   21660:	strb	r2, [r1, #6]
   21664:	ands	r2, r0, #64	; 0x40
   21668:	movwne	ip, #120	; 0x78
   2166c:	movwne	r3, #115	; 0x73
   21670:	tst	r0, #2048	; 0x800
   21674:	moveq	r3, ip
   21678:	strb	r3, [r1, #3]
   2167c:	pop	{fp, pc}
   21680:	ldr	r0, [r0, #16]
   21684:	b	21524 <__assert_fail@plt+0xe934>
   21688:	push	{r4, r5, r6, r7, fp, lr}
   2168c:	add	fp, sp, #16
   21690:	mov	r5, r1
   21694:	bl	12ae8 <fopen64@plt>
   21698:	mov	r4, #0
   2169c:	cmp	r0, #0
   216a0:	beq	2172c <__assert_fail@plt+0xeb3c>
   216a4:	mov	r6, r0
   216a8:	bl	1298c <fileno@plt>
   216ac:	cmp	r0, #2
   216b0:	bhi	2170c <__assert_fail@plt+0xeb1c>
   216b4:	bl	2a194 <__assert_fail@plt+0x175a4>
   216b8:	cmn	r0, #1
   216bc:	ble	21714 <__assert_fail@plt+0xeb24>
   216c0:	mov	r7, r0
   216c4:	mov	r0, r6
   216c8:	bl	129d4 <fclose@plt>
   216cc:	cmp	r0, #0
   216d0:	bne	216ec <__assert_fail@plt+0xeafc>
   216d4:	mov	r0, r7
   216d8:	mov	r1, r5
   216dc:	bl	12464 <fdopen@plt>
   216e0:	mov	r4, r0
   216e4:	cmp	r0, #0
   216e8:	bne	2172c <__assert_fail@plt+0xeb3c>
   216ec:	bl	12908 <__errno_location@plt>
   216f0:	ldr	r5, [r0]
   216f4:	mov	r4, r0
   216f8:	mov	r0, r7
   216fc:	bl	12ba8 <close@plt>
   21700:	str	r5, [r4]
   21704:	mov	r4, #0
   21708:	b	2172c <__assert_fail@plt+0xeb3c>
   2170c:	mov	r4, r6
   21710:	b	2172c <__assert_fail@plt+0xeb3c>
   21714:	bl	12908 <__errno_location@plt>
   21718:	ldr	r7, [r0]
   2171c:	mov	r5, r0
   21720:	mov	r0, r6
   21724:	bl	129d4 <fclose@plt>
   21728:	str	r7, [r5]
   2172c:	mov	r0, r4
   21730:	pop	{r4, r5, r6, r7, fp, pc}
   21734:	andeq	r0, r0, r0
   21738:	ldr	r0, [r0, #8]
   2173c:	bx	lr
   21740:	ldr	r0, [r0, #12]
   21744:	bx	lr
   21748:	ldr	r0, [r0, #16]
   2174c:	bx	lr
   21750:	ldm	r0, {r2, ip}
   21754:	mov	r0, #0
   21758:	cmp	r2, ip
   2175c:	bxcs	lr
   21760:	mov	r0, #0
   21764:	ldr	r1, [r2]
   21768:	cmp	r1, #0
   2176c:	beq	21790 <__assert_fail@plt+0xeba0>
   21770:	mov	r3, #0
   21774:	mov	r1, r2
   21778:	ldr	r1, [r1, #4]
   2177c:	add	r3, r3, #1
   21780:	cmp	r1, #0
   21784:	bne	21778 <__assert_fail@plt+0xeb88>
   21788:	cmp	r3, r0
   2178c:	movhi	r0, r3
   21790:	add	r2, r2, #8
   21794:	cmp	r2, ip
   21798:	bcc	21764 <__assert_fail@plt+0xeb74>
   2179c:	bx	lr
   217a0:	push	{fp, lr}
   217a4:	mov	fp, sp
   217a8:	ldm	r0, {r3, ip}
   217ac:	mov	lr, #0
   217b0:	mov	r1, #0
   217b4:	cmp	r3, ip
   217b8:	bcs	217f4 <__assert_fail@plt+0xec04>
   217bc:	mov	r1, #0
   217c0:	mov	lr, #0
   217c4:	ldr	r2, [r3]
   217c8:	cmp	r2, #0
   217cc:	beq	217e8 <__assert_fail@plt+0xebf8>
   217d0:	mov	r2, r3
   217d4:	ldr	r2, [r2, #4]
   217d8:	add	r1, r1, #1
   217dc:	cmp	r2, #0
   217e0:	bne	217d4 <__assert_fail@plt+0xebe4>
   217e4:	add	lr, lr, #1
   217e8:	add	r3, r3, #8
   217ec:	cmp	r3, ip
   217f0:	bcc	217c4 <__assert_fail@plt+0xebd4>
   217f4:	ldr	r2, [r0, #12]
   217f8:	cmp	lr, r2
   217fc:	bne	21814 <__assert_fail@plt+0xec24>
   21800:	ldr	r2, [r0, #16]
   21804:	mov	r0, #1
   21808:	cmp	r1, r2
   2180c:	movne	r0, #0
   21810:	pop	{fp, pc}
   21814:	mov	r0, #0
   21818:	pop	{fp, pc}
   2181c:	nop	{0}
   21820:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   21824:	add	fp, sp, #24
   21828:	sub	sp, sp, #8
   2182c:	ldr	r6, [r0]
   21830:	ldmib	r0, {r3, r7, r8}
   21834:	ldr	r2, [r0, #16]
   21838:	mov	r4, r1
   2183c:	mov	r5, #0
   21840:	cmp	r6, r3
   21844:	bcs	21884 <__assert_fail@plt+0xec94>
   21848:	mov	r5, #0
   2184c:	ldr	r0, [r6]
   21850:	cmp	r0, #0
   21854:	beq	21878 <__assert_fail@plt+0xec88>
   21858:	mov	r0, #0
   2185c:	mov	r1, r6
   21860:	ldr	r1, [r1, #4]
   21864:	add	r0, r0, #1
   21868:	cmp	r1, #0
   2186c:	bne	21860 <__assert_fail@plt+0xec70>
   21870:	cmp	r0, r5
   21874:	movhi	r5, r0
   21878:	add	r6, r6, #8
   2187c:	cmp	r6, r3
   21880:	bcc	2184c <__assert_fail@plt+0xec5c>
   21884:	movw	r1, #7389	; 0x1cdd
   21888:	mov	r0, r4
   2188c:	movt	r1, #4
   21890:	bl	128fc <fprintf@plt>
   21894:	movw	r1, #7413	; 0x1cf5
   21898:	mov	r0, r4
   2189c:	mov	r2, r7
   218a0:	movt	r1, #4
   218a4:	bl	128fc <fprintf@plt>
   218a8:	vmov	s0, r8
   218ac:	vldr	d16, [pc, #68]	; 218f8 <__assert_fail@plt+0xed08>
   218b0:	movw	r1, #7437	; 0x1d0d
   218b4:	mov	r0, r4
   218b8:	mov	r2, r8
   218bc:	movt	r1, #4
   218c0:	vcvt.f64.u32	d17, s0
   218c4:	vmov	s0, r7
   218c8:	vcvt.f64.u32	d18, s0
   218cc:	vmul.f64	d16, d17, d16
   218d0:	vdiv.f64	d16, d16, d18
   218d4:	vstr	d16, [sp]
   218d8:	bl	128fc <fprintf@plt>
   218dc:	movw	r1, #7470	; 0x1d2e
   218e0:	mov	r0, r4
   218e4:	mov	r2, r5
   218e8:	movt	r1, #4
   218ec:	sub	sp, fp, #24
   218f0:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   218f4:	b	128fc <fprintf@plt>
   218f8:	andeq	r0, r0, r0
   218fc:	subsmi	r0, r9, r0
   21900:	push	{r4, r5, r6, r7, fp, lr}
   21904:	add	fp, sp, #16
   21908:	mov	r4, r1
   2190c:	ldr	r1, [r0, #8]
   21910:	ldr	r2, [r0, #24]
   21914:	mov	r5, r0
   21918:	mov	r0, r4
   2191c:	blx	r2
   21920:	ldr	r1, [r5, #8]
   21924:	cmp	r0, r1
   21928:	bcs	21988 <__assert_fail@plt+0xed98>
   2192c:	ldr	r7, [r5]
   21930:	mov	r6, #0
   21934:	ldr	r1, [r7, r0, lsl #3]!
   21938:	cmp	r1, #0
   2193c:	cmpne	r7, #0
   21940:	bne	21970 <__assert_fail@plt+0xed80>
   21944:	mov	r0, r6
   21948:	pop	{r4, r5, r6, r7, fp, pc}
   2194c:	ldr	r2, [r5, #28]
   21950:	mov	r0, r4
   21954:	blx	r2
   21958:	cmp	r0, #0
   2195c:	bne	21980 <__assert_fail@plt+0xed90>
   21960:	ldr	r7, [r7, #4]
   21964:	cmp	r7, #0
   21968:	beq	21944 <__assert_fail@plt+0xed54>
   2196c:	ldr	r1, [r7]
   21970:	cmp	r1, r4
   21974:	bne	2194c <__assert_fail@plt+0xed5c>
   21978:	mov	r6, r4
   2197c:	b	21944 <__assert_fail@plt+0xed54>
   21980:	ldr	r6, [r7]
   21984:	b	21944 <__assert_fail@plt+0xed54>
   21988:	bl	12b9c <abort@plt>
   2198c:	push	{fp, lr}
   21990:	mov	fp, sp
   21994:	ldr	r1, [r0, #16]
   21998:	cmp	r1, #0
   2199c:	beq	219bc <__assert_fail@plt+0xedcc>
   219a0:	ldm	r0, {r1, r2}
   219a4:	cmp	r1, r2
   219a8:	bcs	219c4 <__assert_fail@plt+0xedd4>
   219ac:	ldr	r0, [r1], #8
   219b0:	cmp	r0, #0
   219b4:	beq	219a4 <__assert_fail@plt+0xedb4>
   219b8:	pop	{fp, pc}
   219bc:	mov	r0, #0
   219c0:	pop	{fp, pc}
   219c4:	bl	12b9c <abort@plt>
   219c8:	push	{r4, r5, fp, lr}
   219cc:	add	fp, sp, #8
   219d0:	mov	r5, r1
   219d4:	ldr	r1, [r0, #8]
   219d8:	ldr	r2, [r0, #24]
   219dc:	mov	r4, r0
   219e0:	mov	r0, r5
   219e4:	blx	r2
   219e8:	ldr	r1, [r4, #8]
   219ec:	cmp	r0, r1
   219f0:	bcs	21a54 <__assert_fail@plt+0xee64>
   219f4:	ldr	r1, [r4]
   219f8:	add	r2, r1, r0, lsl #3
   219fc:	ldr	r3, [r2]
   21a00:	ldr	r2, [r2, #4]
   21a04:	cmp	r3, r5
   21a08:	beq	21a18 <__assert_fail@plt+0xee28>
   21a0c:	cmp	r2, #0
   21a10:	bne	219fc <__assert_fail@plt+0xee0c>
   21a14:	b	21a28 <__assert_fail@plt+0xee38>
   21a18:	cmp	r2, #0
   21a1c:	beq	21a28 <__assert_fail@plt+0xee38>
   21a20:	ldr	r0, [r2]
   21a24:	pop	{r4, r5, fp, pc}
   21a28:	ldr	r2, [r4, #4]
   21a2c:	add	r0, r1, r0, lsl #3
   21a30:	add	r1, r0, #8
   21a34:	cmp	r1, r2
   21a38:	bcs	21a4c <__assert_fail@plt+0xee5c>
   21a3c:	ldr	r0, [r1], #8
   21a40:	cmp	r0, #0
   21a44:	beq	21a34 <__assert_fail@plt+0xee44>
   21a48:	pop	{r4, r5, fp, pc}
   21a4c:	mov	r0, #0
   21a50:	pop	{r4, r5, fp, pc}
   21a54:	bl	12b9c <abort@plt>
   21a58:	push	{r4, r5, fp, lr}
   21a5c:	add	fp, sp, #8
   21a60:	ldm	r0, {r5, lr}
   21a64:	mov	ip, r0
   21a68:	mov	r0, #0
   21a6c:	cmp	r5, lr
   21a70:	popcs	{r4, r5, fp, pc}
   21a74:	mov	r0, #0
   21a78:	ldr	r3, [r5]
   21a7c:	cmp	r3, #0
   21a80:	cmpne	r5, #0
   21a84:	bne	21a98 <__assert_fail@plt+0xeea8>
   21a88:	add	r5, r5, #8
   21a8c:	cmp	r5, lr
   21a90:	bcc	21a78 <__assert_fail@plt+0xee88>
   21a94:	b	21ac4 <__assert_fail@plt+0xeed4>
   21a98:	mov	r3, r5
   21a9c:	cmp	r0, r2
   21aa0:	bcs	21ac4 <__assert_fail@plt+0xeed4>
   21aa4:	ldr	r4, [r3]
   21aa8:	str	r4, [r1, r0, lsl #2]
   21aac:	add	r0, r0, #1
   21ab0:	ldr	r3, [r3, #4]
   21ab4:	cmp	r3, #0
   21ab8:	bne	21a9c <__assert_fail@plt+0xeeac>
   21abc:	ldr	lr, [ip, #4]
   21ac0:	b	21a88 <__assert_fail@plt+0xee98>
   21ac4:	pop	{r4, r5, fp, pc}
   21ac8:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   21acc:	add	fp, sp, #24
   21ad0:	mov	r5, r1
   21ad4:	ldr	r4, [r0]
   21ad8:	ldr	r1, [r0, #4]
   21adc:	mov	r6, #0
   21ae0:	cmp	r4, r1
   21ae4:	bcs	21b58 <__assert_fail@plt+0xef68>
   21ae8:	mov	r9, r2
   21aec:	mov	r8, r0
   21af0:	mov	r6, #0
   21af4:	ldr	r0, [r4]
   21af8:	cmp	r0, #0
   21afc:	cmpne	r4, #0
   21b00:	bne	21b14 <__assert_fail@plt+0xef24>
   21b04:	add	r4, r4, #8
   21b08:	cmp	r4, r1
   21b0c:	bcc	21af4 <__assert_fail@plt+0xef04>
   21b10:	b	21b58 <__assert_fail@plt+0xef68>
   21b14:	mov	r1, r9
   21b18:	blx	r5
   21b1c:	cmp	r0, #0
   21b20:	beq	21b58 <__assert_fail@plt+0xef68>
   21b24:	mov	r7, r4
   21b28:	ldr	r7, [r7, #4]
   21b2c:	add	r6, r6, #1
   21b30:	cmp	r7, #0
   21b34:	beq	21b50 <__assert_fail@plt+0xef60>
   21b38:	ldr	r0, [r7]
   21b3c:	mov	r1, r9
   21b40:	blx	r5
   21b44:	cmp	r0, #0
   21b48:	bne	21b28 <__assert_fail@plt+0xef38>
   21b4c:	b	21b58 <__assert_fail@plt+0xef68>
   21b50:	ldr	r1, [r8, #4]
   21b54:	b	21b04 <__assert_fail@plt+0xef14>
   21b58:	mov	r0, r6
   21b5c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   21b60:	ldrb	r2, [r0]
   21b64:	cmp	r2, #0
   21b68:	moveq	r0, #0
   21b6c:	bxeq	lr
   21b70:	add	r3, r0, #1
   21b74:	mov	r0, #0
   21b78:	rsb	r0, r0, r0, lsl #5
   21b7c:	uxtab	r0, r0, r2
   21b80:	udiv	r2, r0, r1
   21b84:	mls	r0, r2, r1, r0
   21b88:	ldrb	r2, [r3], #1
   21b8c:	cmp	r2, #0
   21b90:	bne	21b78 <__assert_fail@plt+0xef88>
   21b94:	bx	lr
   21b98:	movw	r1, #7496	; 0x1d48
   21b9c:	movt	r1, #4
   21ba0:	vld1.32	{d16-d17}, [r1]!
   21ba4:	ldr	r1, [r1]
   21ba8:	vst1.32	{d16-d17}, [r0]!
   21bac:	str	r1, [r0]
   21bb0:	bx	lr
   21bb4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21bb8:	add	fp, sp, #28
   21bbc:	sub	sp, sp, #4
   21bc0:	movw	sl, #7336	; 0x1ca8
   21bc4:	cmp	r3, #0
   21bc8:	movw	r5, #7316	; 0x1c94
   21bcc:	mov	r8, r0
   21bd0:	mov	r0, #40	; 0x28
   21bd4:	mov	r7, r1
   21bd8:	movt	sl, #2
   21bdc:	movne	sl, r3
   21be0:	cmp	r2, #0
   21be4:	movt	r5, #2
   21be8:	movne	r5, r2
   21bec:	bl	2de8c <__assert_fail@plt+0x1b29c>
   21bf0:	mov	r9, #0
   21bf4:	cmp	r0, #0
   21bf8:	beq	21c88 <__assert_fail@plt+0xf098>
   21bfc:	movw	r6, #7496	; 0x1d48
   21c00:	cmp	r7, #0
   21c04:	mov	r4, r0
   21c08:	movt	r6, #4
   21c0c:	movne	r6, r7
   21c10:	str	r6, [r0, #20]
   21c14:	bl	21cb8 <__assert_fail@plt+0xf0c8>
   21c18:	cmp	r0, #0
   21c1c:	beq	21c80 <__assert_fail@plt+0xf090>
   21c20:	mov	r0, r8
   21c24:	mov	r1, r6
   21c28:	bl	21d64 <__assert_fail@plt+0xf174>
   21c2c:	cmp	r0, #0
   21c30:	str	r0, [r4, #8]
   21c34:	beq	21c80 <__assert_fail@plt+0xf090>
   21c38:	mov	r1, #8
   21c3c:	bl	2b734 <__assert_fail@plt+0x18b44>
   21c40:	cmp	r0, #0
   21c44:	str	r0, [r4]
   21c48:	beq	21c80 <__assert_fail@plt+0xf090>
   21c4c:	ldr	r1, [fp, #8]
   21c50:	mov	r2, #0
   21c54:	str	r5, [r4, #24]
   21c58:	str	sl, [r4, #28]
   21c5c:	mov	r9, r4
   21c60:	str	r1, [r4, #32]
   21c64:	str	r2, [r4, #36]	; 0x24
   21c68:	str	r2, [r4, #12]
   21c6c:	str	r2, [r4, #16]
   21c70:	ldr	r1, [r4, #8]
   21c74:	add	r0, r0, r1, lsl #3
   21c78:	str	r0, [r4, #4]
   21c7c:	b	21c88 <__assert_fail@plt+0xf098>
   21c80:	mov	r0, r4
   21c84:	bl	2bcbc <__assert_fail@plt+0x190cc>
   21c88:	mov	r0, r9
   21c8c:	sub	sp, fp, #28
   21c90:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21c94:	ror	r2, r0, #3
   21c98:	udiv	r2, r2, r1
   21c9c:	mul	r1, r2, r1
   21ca0:	rsb	r0, r1, r0, ror #3
   21ca4:	bx	lr
   21ca8:	sub	r0, r0, r1
   21cac:	clz	r0, r0
   21cb0:	lsr	r0, r0, #5
   21cb4:	bx	lr
   21cb8:	ldr	r3, [r0, #20]
   21cbc:	movw	r2, #7496	; 0x1d48
   21cc0:	mov	r1, r0
   21cc4:	mov	r0, #1
   21cc8:	movt	r2, #4
   21ccc:	cmp	r3, r2
   21cd0:	beq	21d54 <__assert_fail@plt+0xf164>
   21cd4:	vldr	s2, [pc, #124]	; 21d58 <__assert_fail@plt+0xf168>
   21cd8:	vldr	s0, [r3, #8]
   21cdc:	vcmpe.f32	s0, s2
   21ce0:	vmrs	APSR_nzcv, fpscr
   21ce4:	ble	21d4c <__assert_fail@plt+0xf15c>
   21ce8:	vldr	s4, [pc, #108]	; 21d5c <__assert_fail@plt+0xf16c>
   21cec:	vcmpe.f32	s0, s4
   21cf0:	vmrs	APSR_nzcv, fpscr
   21cf4:	bpl	21d4c <__assert_fail@plt+0xf15c>
   21cf8:	vldr	s4, [pc, #96]	; 21d60 <__assert_fail@plt+0xf170>
   21cfc:	vldr	s6, [r3, #12]
   21d00:	vcmpe.f32	s6, s4
   21d04:	vmrs	APSR_nzcv, fpscr
   21d08:	ble	21d4c <__assert_fail@plt+0xf15c>
   21d0c:	vldr	s4, [r3]
   21d10:	vcmpe.f32	s4, #0.0
   21d14:	vmrs	APSR_nzcv, fpscr
   21d18:	blt	21d4c <__assert_fail@plt+0xf15c>
   21d1c:	vadd.f32	s2, s4, s2
   21d20:	vcmpe.f32	s2, s0
   21d24:	vmrs	APSR_nzcv, fpscr
   21d28:	bpl	21d4c <__assert_fail@plt+0xf15c>
   21d2c:	vldr	s0, [r3, #4]
   21d30:	vmov.f32	s4, #112	; 0x3f800000  1.0
   21d34:	vcmpe.f32	s0, s4
   21d38:	vmrs	APSR_nzcv, fpscr
   21d3c:	bhi	21d4c <__assert_fail@plt+0xf15c>
   21d40:	vcmpe.f32	s2, s0
   21d44:	vmrs	APSR_nzcv, fpscr
   21d48:	bxmi	lr
   21d4c:	mov	r0, #0
   21d50:	str	r2, [r1, #20]
   21d54:	bx	lr
   21d58:	stclcc	12, cr12, [ip, #820]	; 0x334
   21d5c:	svccc	0x00666666
   21d60:	svccc	0x008ccccd
   21d64:	ldrb	r2, [r1, #16]
   21d68:	cmp	r2, #0
   21d6c:	bne	21d9c <__assert_fail@plt+0xf1ac>
   21d70:	vmov	s2, r0
   21d74:	vldr	s0, [r1, #8]
   21d78:	vldr	s4, [pc, #156]	; 21e1c <__assert_fail@plt+0xf22c>
   21d7c:	mov	r0, #0
   21d80:	vcvt.f32.u32	s2, s2
   21d84:	vdiv.f32	s2, s2, s0
   21d88:	vcmpe.f32	s2, s4
   21d8c:	vcvt.u32.f32	s0, s2
   21d90:	vmrs	APSR_nzcv, fpscr
   21d94:	bxge	lr
   21d98:	vmov	r0, s0
   21d9c:	cmp	r0, #10
   21da0:	movls	r0, #10
   21da4:	orr	r0, r0, #1
   21da8:	cmn	r0, #1
   21dac:	beq	21e08 <__assert_fail@plt+0xf218>
   21db0:	mov	r1, #3
   21db4:	cmp	r0, #10
   21db8:	bcc	21df0 <__assert_fail@plt+0xf200>
   21dbc:	mov	r1, #3
   21dc0:	mov	ip, #9
   21dc4:	mov	r2, #12
   21dc8:	udiv	r3, r0, r1
   21dcc:	mls	r3, r3, r1, r0
   21dd0:	cmp	r3, #0
   21dd4:	beq	21df0 <__assert_fail@plt+0xf200>
   21dd8:	add	r3, ip, r2
   21ddc:	add	r2, r2, #8
   21de0:	add	r1, r1, #2
   21de4:	add	ip, r3, #4
   21de8:	cmp	ip, r0
   21dec:	bcc	21dc8 <__assert_fail@plt+0xf1d8>
   21df0:	udiv	r2, r0, r1
   21df4:	mls	r1, r2, r1, r0
   21df8:	cmp	r1, #0
   21dfc:	bne	21e10 <__assert_fail@plt+0xf220>
   21e00:	add	r0, r0, #2
   21e04:	b	21da8 <__assert_fail@plt+0xf1b8>
   21e08:	mov	r0, #0
   21e0c:	bx	lr
   21e10:	cmp	r0, #536870912	; 0x20000000
   21e14:	movcs	r0, #0
   21e18:	bx	lr
   21e1c:	svcmi	0x00800000
   21e20:	push	{r4, r5, r6, r7, fp, lr}
   21e24:	add	fp, sp, #16
   21e28:	mov	r4, r0
   21e2c:	ldr	r5, [r0]
   21e30:	ldr	r0, [r0, #4]
   21e34:	cmp	r5, r0
   21e38:	bcs	21ed0 <__assert_fail@plt+0xf2e0>
   21e3c:	mov	r6, #0
   21e40:	ldr	r1, [r5]
   21e44:	cmp	r1, #0
   21e48:	beq	21ec4 <__assert_fail@plt+0xf2d4>
   21e4c:	ldr	r1, [r4, #32]
   21e50:	ldr	r7, [r5, #4]
   21e54:	cmp	r1, #0
   21e58:	mov	r0, r1
   21e5c:	movwne	r0, #1
   21e60:	cmp	r7, #0
   21e64:	beq	21ea8 <__assert_fail@plt+0xf2b8>
   21e68:	tst	r0, #1
   21e6c:	beq	21e7c <__assert_fail@plt+0xf28c>
   21e70:	ldr	r0, [r7]
   21e74:	blx	r1
   21e78:	ldr	r1, [r4, #32]
   21e7c:	str	r6, [r7]
   21e80:	cmp	r1, #0
   21e84:	ldr	r2, [r7, #4]
   21e88:	ldr	r0, [r4, #36]	; 0x24
   21e8c:	str	r0, [r7, #4]
   21e90:	mov	r0, r1
   21e94:	str	r7, [r4, #36]	; 0x24
   21e98:	movwne	r0, #1
   21e9c:	cmp	r2, #0
   21ea0:	mov	r7, r2
   21ea4:	bne	21e68 <__assert_fail@plt+0xf278>
   21ea8:	cmp	r0, #0
   21eac:	beq	21eb8 <__assert_fail@plt+0xf2c8>
   21eb0:	ldr	r0, [r5]
   21eb4:	blx	r1
   21eb8:	str	r6, [r5]
   21ebc:	str	r6, [r5, #4]
   21ec0:	ldr	r0, [r4, #4]
   21ec4:	add	r5, r5, #8
   21ec8:	cmp	r5, r0
   21ecc:	bcc	21e40 <__assert_fail@plt+0xf250>
   21ed0:	mov	r0, #0
   21ed4:	str	r0, [r4, #12]
   21ed8:	str	r0, [r4, #16]
   21edc:	pop	{r4, r5, r6, r7, fp, pc}
   21ee0:	push	{r4, r5, r6, sl, fp, lr}
   21ee4:	add	fp, sp, #16
   21ee8:	mov	r4, r0
   21eec:	ldr	r0, [r0, #32]
   21ef0:	cmp	r0, #0
   21ef4:	beq	21f58 <__assert_fail@plt+0xf368>
   21ef8:	ldr	r0, [r4, #16]
   21efc:	cmp	r0, #0
   21f00:	beq	21f58 <__assert_fail@plt+0xf368>
   21f04:	ldr	r5, [r4]
   21f08:	ldr	r1, [r4, #4]
   21f0c:	cmp	r5, r1
   21f10:	bcs	21f58 <__assert_fail@plt+0xf368>
   21f14:	ldr	r0, [r5]
   21f18:	cmp	r0, #0
   21f1c:	cmpne	r5, #0
   21f20:	beq	21f50 <__assert_fail@plt+0xf360>
   21f24:	ldr	r1, [r4, #32]
   21f28:	blx	r1
   21f2c:	ldr	r6, [r5, #4]
   21f30:	cmp	r6, #0
   21f34:	beq	21f4c <__assert_fail@plt+0xf35c>
   21f38:	ldr	r1, [r4, #32]
   21f3c:	ldr	r0, [r6]
   21f40:	blx	r1
   21f44:	ldr	r6, [r6, #4]
   21f48:	b	21f30 <__assert_fail@plt+0xf340>
   21f4c:	ldr	r1, [r4, #4]
   21f50:	add	r5, r5, #8
   21f54:	b	21f0c <__assert_fail@plt+0xf31c>
   21f58:	ldr	r5, [r4]
   21f5c:	ldr	r1, [r4, #4]
   21f60:	cmp	r5, r1
   21f64:	bcs	21f94 <__assert_fail@plt+0xf3a4>
   21f68:	ldr	r0, [r5, #4]
   21f6c:	cmp	r0, #0
   21f70:	beq	21f8c <__assert_fail@plt+0xf39c>
   21f74:	ldr	r6, [r0, #4]
   21f78:	bl	2bcbc <__assert_fail@plt+0x190cc>
   21f7c:	cmp	r6, #0
   21f80:	mov	r0, r6
   21f84:	bne	21f74 <__assert_fail@plt+0xf384>
   21f88:	ldr	r1, [r4, #4]
   21f8c:	add	r5, r5, #8
   21f90:	b	21f60 <__assert_fail@plt+0xf370>
   21f94:	ldr	r0, [r4, #36]	; 0x24
   21f98:	cmp	r0, #0
   21f9c:	beq	21fb4 <__assert_fail@plt+0xf3c4>
   21fa0:	ldr	r5, [r0, #4]
   21fa4:	bl	2bcbc <__assert_fail@plt+0x190cc>
   21fa8:	cmp	r5, #0
   21fac:	mov	r0, r5
   21fb0:	bne	21fa0 <__assert_fail@plt+0xf3b0>
   21fb4:	ldr	r0, [r4]
   21fb8:	bl	2bcbc <__assert_fail@plt+0x190cc>
   21fbc:	mov	r0, r4
   21fc0:	pop	{r4, r5, r6, sl, fp, lr}
   21fc4:	b	2bcbc <__assert_fail@plt+0x190cc>
   21fc8:	push	{r4, r5, r6, r7, fp, lr}
   21fcc:	add	fp, sp, #16
   21fd0:	sub	sp, sp, #40	; 0x28
   21fd4:	mov	r7, r0
   21fd8:	mov	r2, r1
   21fdc:	mov	r4, r0
   21fe0:	ldr	r1, [r7, #20]!
   21fe4:	mov	r0, r2
   21fe8:	bl	21d64 <__assert_fail@plt+0xf174>
   21fec:	mov	r5, #0
   21ff0:	cmp	r0, #0
   21ff4:	beq	22088 <__assert_fail@plt+0xf498>
   21ff8:	mov	r6, r0
   21ffc:	ldr	r0, [r4, #8]
   22000:	cmp	r6, r0
   22004:	beq	22084 <__assert_fail@plt+0xf494>
   22008:	mov	r0, r6
   2200c:	mov	r1, #8
   22010:	bl	2b734 <__assert_fail@plt+0x18b44>
   22014:	cmp	r0, #0
   22018:	str	r0, [sp]
   2201c:	beq	22088 <__assert_fail@plt+0xf498>
   22020:	add	r0, r0, r6, lsl #3
   22024:	mov	r1, #0
   22028:	mov	r5, sp
   2202c:	mov	r2, #0
   22030:	str	r1, [sp, #16]
   22034:	str	r1, [sp, #12]
   22038:	str	r6, [sp, #8]
   2203c:	mov	r1, r4
   22040:	str	r0, [sp, #4]
   22044:	add	r0, r5, #20
   22048:	vld1.32	{d16-d17}, [r7]
   2204c:	vst1.32	{d16-d17}, [r0]
   22050:	ldr	r0, [r4, #36]	; 0x24
   22054:	str	r0, [sp, #36]	; 0x24
   22058:	mov	r0, r5
   2205c:	bl	220e0 <__assert_fail@plt+0xf4f0>
   22060:	cmp	r0, #0
   22064:	beq	22094 <__assert_fail@plt+0xf4a4>
   22068:	ldr	r0, [r4]
   2206c:	bl	2bcbc <__assert_fail@plt+0x190cc>
   22070:	mov	r0, #36	; 0x24
   22074:	vld1.32	{d16-d17}, [r5], r0
   22078:	vst1.32	{d16-d17}, [r4], r0
   2207c:	ldr	r0, [r5]
   22080:	str	r0, [r4]
   22084:	mov	r5, #1
   22088:	mov	r0, r5
   2208c:	sub	sp, fp, #16
   22090:	pop	{r4, r5, r6, r7, fp, pc}
   22094:	ldr	r0, [sp, #36]	; 0x24
   22098:	mov	r1, sp
   2209c:	mov	r2, #1
   220a0:	str	r0, [r4, #36]	; 0x24
   220a4:	mov	r0, r4
   220a8:	bl	220e0 <__assert_fail@plt+0xf4f0>
   220ac:	cmp	r0, #0
   220b0:	beq	220dc <__assert_fail@plt+0xf4ec>
   220b4:	mov	r1, sp
   220b8:	mov	r0, r4
   220bc:	mov	r2, #0
   220c0:	mov	r5, #0
   220c4:	bl	220e0 <__assert_fail@plt+0xf4f0>
   220c8:	cmp	r0, #0
   220cc:	beq	220dc <__assert_fail@plt+0xf4ec>
   220d0:	ldr	r0, [sp]
   220d4:	bl	2bcbc <__assert_fail@plt+0x190cc>
   220d8:	b	22088 <__assert_fail@plt+0xf498>
   220dc:	bl	12b9c <abort@plt>
   220e0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   220e4:	add	fp, sp, #28
   220e8:	sub	sp, sp, #12
   220ec:	ldr	sl, [r1]
   220f0:	str	r1, [sp, #8]
   220f4:	ldr	r1, [r1, #4]
   220f8:	mov	r7, r0
   220fc:	mov	r0, #1
   22100:	str	r2, [sp, #4]
   22104:	cmp	sl, r1
   22108:	bcs	2225c <__assert_fail@plt+0xf66c>
   2210c:	add	r8, r7, #36	; 0x24
   22110:	mov	r9, #0
   22114:	ldr	r4, [sl]
   22118:	cmp	r4, #0
   2211c:	beq	22244 <__assert_fail@plt+0xf654>
   22120:	ldr	r5, [sl, #4]
   22124:	cmp	r5, #0
   22128:	beq	221a0 <__assert_fail@plt+0xf5b0>
   2212c:	ldr	r1, [r7, #8]
   22130:	ldr	r4, [r5]
   22134:	ldr	r2, [r7, #24]
   22138:	mov	r0, r4
   2213c:	blx	r2
   22140:	ldr	r1, [r7, #8]
   22144:	cmp	r0, r1
   22148:	bcs	2226c <__assert_fail@plt+0xf67c>
   2214c:	ldr	r3, [r7]
   22150:	ldr	r2, [r5, #4]
   22154:	ldr	r6, [r3, r0, lsl #3]
   22158:	cmp	r6, #0
   2215c:	beq	2216c <__assert_fail@plt+0xf57c>
   22160:	add	r0, r3, r0, lsl #3
   22164:	add	r0, r0, #4
   22168:	b	22184 <__assert_fail@plt+0xf594>
   2216c:	str	r4, [r3, r0, lsl #3]
   22170:	ldr	r0, [r7, #12]
   22174:	add	r0, r0, #1
   22178:	str	r0, [r7, #12]
   2217c:	mov	r0, r8
   22180:	str	r9, [r5]
   22184:	ldr	r3, [r0]
   22188:	cmp	r2, #0
   2218c:	str	r3, [r5, #4]
   22190:	str	r5, [r0]
   22194:	mov	r5, r2
   22198:	bne	22130 <__assert_fail@plt+0xf540>
   2219c:	ldr	r4, [sl]
   221a0:	ldr	r0, [sp, #4]
   221a4:	str	r9, [sl, #4]
   221a8:	cmp	r0, #0
   221ac:	bne	22244 <__assert_fail@plt+0xf654>
   221b0:	ldr	r1, [r7, #8]
   221b4:	ldr	r2, [r7, #24]
   221b8:	mov	r0, r4
   221bc:	blx	r2
   221c0:	mov	r5, r0
   221c4:	ldr	r0, [r7, #8]
   221c8:	cmp	r5, r0
   221cc:	bcs	2226c <__assert_fail@plt+0xf67c>
   221d0:	ldr	r6, [r7]
   221d4:	ldr	r0, [r6, r5, lsl #3]
   221d8:	cmp	r0, #0
   221dc:	beq	221f8 <__assert_fail@plt+0xf608>
   221e0:	ldr	r0, [r8]
   221e4:	cmp	r0, #0
   221e8:	beq	2220c <__assert_fail@plt+0xf61c>
   221ec:	ldr	r1, [r0, #4]
   221f0:	str	r1, [r8]
   221f4:	b	2221c <__assert_fail@plt+0xf62c>
   221f8:	str	r4, [r6, r5, lsl #3]
   221fc:	ldr	r0, [r7, #12]
   22200:	add	r0, r0, #1
   22204:	str	r0, [r7, #12]
   22208:	b	22230 <__assert_fail@plt+0xf640>
   2220c:	mov	r0, #8
   22210:	bl	2de8c <__assert_fail@plt+0x1b29c>
   22214:	cmp	r0, #0
   22218:	beq	22264 <__assert_fail@plt+0xf674>
   2221c:	add	r1, r6, r5, lsl #3
   22220:	str	r4, [r0]
   22224:	ldr	r2, [r1, #4]
   22228:	str	r2, [r0, #4]
   2222c:	str	r0, [r1, #4]
   22230:	ldr	r1, [sp, #8]
   22234:	str	r9, [sl]
   22238:	ldr	r0, [r1, #12]
   2223c:	sub	r0, r0, #1
   22240:	str	r0, [r1, #12]
   22244:	ldr	r0, [sp, #8]
   22248:	add	sl, sl, #8
   2224c:	ldr	r0, [r0, #4]
   22250:	cmp	sl, r0
   22254:	bcc	22114 <__assert_fail@plt+0xf524>
   22258:	mov	r0, #1
   2225c:	sub	sp, fp, #28
   22260:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   22264:	mov	r0, #0
   22268:	b	2225c <__assert_fail@plt+0xf66c>
   2226c:	bl	12b9c <abort@plt>
   22270:	push	{r4, r5, r6, r7, fp, lr}
   22274:	add	fp, sp, #16
   22278:	sub	sp, sp, #8
   2227c:	cmp	r1, #0
   22280:	beq	223f8 <__assert_fail@plt+0xf808>
   22284:	mov	r7, r2
   22288:	add	r2, sp, #4
   2228c:	mov	r3, #0
   22290:	mov	r5, r1
   22294:	mov	r4, r0
   22298:	mov	r6, #0
   2229c:	bl	22400 <__assert_fail@plt+0xf810>
   222a0:	cmp	r0, #0
   222a4:	beq	222b4 <__assert_fail@plt+0xf6c4>
   222a8:	cmp	r7, #0
   222ac:	strne	r0, [r7]
   222b0:	b	223e4 <__assert_fail@plt+0xf7f4>
   222b4:	vldr	s0, [r4, #8]
   222b8:	ldr	r0, [r4, #20]
   222bc:	vldr	s2, [r4, #12]
   222c0:	vldr	s4, [r0, #8]
   222c4:	vcvt.f32.u32	s0, s0
   222c8:	vcvt.f32.u32	s2, s2
   222cc:	vmul.f32	s0, s4, s0
   222d0:	vcmpe.f32	s0, s2
   222d4:	vmrs	APSR_nzcv, fpscr
   222d8:	bpl	2236c <__assert_fail@plt+0xf77c>
   222dc:	mov	r0, r4
   222e0:	bl	21cb8 <__assert_fail@plt+0xf0c8>
   222e4:	vldr	s0, [r4, #8]
   222e8:	ldr	r0, [r4, #20]
   222ec:	vldr	s4, [r4, #12]
   222f0:	vcvt.f32.u32	s2, s0
   222f4:	vldr	s0, [r0, #8]
   222f8:	vcvt.f32.u32	s4, s4
   222fc:	vmul.f32	s6, s0, s2
   22300:	vcmpe.f32	s6, s4
   22304:	vmrs	APSR_nzcv, fpscr
   22308:	bpl	2236c <__assert_fail@plt+0xf77c>
   2230c:	vldr	s4, [r0, #12]
   22310:	ldrb	r0, [r0, #16]
   22314:	mvn	r6, #0
   22318:	cmp	r0, #0
   2231c:	vmul.f32	s2, s4, s2
   22320:	vldr	s4, [pc, #212]	; 223fc <__assert_fail@plt+0xf80c>
   22324:	vmul.f32	s0, s0, s2
   22328:	vseleq.f32	s0, s0, s2
   2232c:	vcmpe.f32	s0, s4
   22330:	vmrs	APSR_nzcv, fpscr
   22334:	bge	223e4 <__assert_fail@plt+0xf7f4>
   22338:	vcvt.u32.f32	s0, s0
   2233c:	mov	r0, r4
   22340:	vmov	r1, s0
   22344:	bl	21fc8 <__assert_fail@plt+0xf3d8>
   22348:	cmp	r0, #0
   2234c:	beq	223e4 <__assert_fail@plt+0xf7f4>
   22350:	add	r2, sp, #4
   22354:	mov	r0, r4
   22358:	mov	r1, r5
   2235c:	mov	r3, #0
   22360:	bl	22400 <__assert_fail@plt+0xf810>
   22364:	cmp	r0, #0
   22368:	bne	223f8 <__assert_fail@plt+0xf808>
   2236c:	ldr	r6, [sp, #4]
   22370:	ldr	r0, [r6]
   22374:	cmp	r0, #0
   22378:	beq	22394 <__assert_fail@plt+0xf7a4>
   2237c:	ldr	r0, [r4, #36]	; 0x24
   22380:	cmp	r0, #0
   22384:	beq	223b4 <__assert_fail@plt+0xf7c4>
   22388:	ldr	r1, [r0, #4]
   2238c:	str	r1, [r4, #36]	; 0x24
   22390:	b	223c4 <__assert_fail@plt+0xf7d4>
   22394:	str	r5, [r6]
   22398:	ldr	r0, [r4, #12]
   2239c:	ldr	r1, [r4, #16]
   223a0:	add	r0, r0, #1
   223a4:	add	r1, r1, #1
   223a8:	str	r0, [r4, #12]
   223ac:	str	r1, [r4, #16]
   223b0:	b	223e0 <__assert_fail@plt+0xf7f0>
   223b4:	mov	r0, #8
   223b8:	bl	2de8c <__assert_fail@plt+0x1b29c>
   223bc:	cmp	r0, #0
   223c0:	beq	223f0 <__assert_fail@plt+0xf800>
   223c4:	str	r5, [r0]
   223c8:	ldr	r1, [r6, #4]
   223cc:	str	r1, [r0, #4]
   223d0:	str	r0, [r6, #4]
   223d4:	ldr	r0, [r4, #16]
   223d8:	add	r0, r0, #1
   223dc:	str	r0, [r4, #16]
   223e0:	mov	r6, #1
   223e4:	mov	r0, r6
   223e8:	sub	sp, fp, #16
   223ec:	pop	{r4, r5, r6, r7, fp, pc}
   223f0:	mvn	r6, #0
   223f4:	b	223e4 <__assert_fail@plt+0xf7f4>
   223f8:	bl	12b9c <abort@plt>
   223fc:	svcmi	0x00800000
   22400:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   22404:	add	fp, sp, #24
   22408:	mov	r7, r2
   2240c:	mov	r4, r1
   22410:	ldr	r1, [r0, #8]
   22414:	ldr	r2, [r0, #24]
   22418:	mov	r5, r0
   2241c:	mov	r8, r3
   22420:	mov	r0, r4
   22424:	blx	r2
   22428:	ldr	r1, [r5, #8]
   2242c:	cmp	r0, r1
   22430:	bcs	2252c <__assert_fail@plt+0xf93c>
   22434:	ldr	r1, [r5]
   22438:	add	r6, r1, r0, lsl #3
   2243c:	str	r6, [r7]
   22440:	ldr	r1, [r1, r0, lsl #3]
   22444:	cmp	r1, #0
   22448:	beq	224e0 <__assert_fail@plt+0xf8f0>
   2244c:	cmp	r1, r4
   22450:	beq	2246c <__assert_fail@plt+0xf87c>
   22454:	ldr	r2, [r5, #28]
   22458:	mov	r0, r4
   2245c:	blx	r2
   22460:	cmp	r0, #0
   22464:	beq	224a0 <__assert_fail@plt+0xf8b0>
   22468:	ldr	r4, [r6]
   2246c:	cmp	r8, #0
   22470:	beq	224e4 <__assert_fail@plt+0xf8f4>
   22474:	ldr	r0, [r6, #4]
   22478:	cmp	r0, #0
   2247c:	beq	224ec <__assert_fail@plt+0xf8fc>
   22480:	ldm	r0, {r1, r2}
   22484:	stm	r6, {r1, r2}
   22488:	mov	r1, #0
   2248c:	str	r1, [r0]
   22490:	ldr	r1, [r5, #36]	; 0x24
   22494:	str	r1, [r0, #4]
   22498:	str	r0, [r5, #36]	; 0x24
   2249c:	b	224e4 <__assert_fail@plt+0xf8f4>
   224a0:	ldr	r0, [r6, #4]!
   224a4:	cmp	r0, #0
   224a8:	beq	224e0 <__assert_fail@plt+0xf8f0>
   224ac:	ldr	r1, [r0]
   224b0:	cmp	r1, r4
   224b4:	beq	224f8 <__assert_fail@plt+0xf908>
   224b8:	ldr	r2, [r5, #28]
   224bc:	mov	r0, r4
   224c0:	blx	r2
   224c4:	ldr	r1, [r6]
   224c8:	cmp	r0, #0
   224cc:	bne	22500 <__assert_fail@plt+0xf910>
   224d0:	ldr	r0, [r1, #4]!
   224d4:	mov	r6, r1
   224d8:	cmp	r0, #0
   224dc:	bne	224ac <__assert_fail@plt+0xf8bc>
   224e0:	mov	r4, #0
   224e4:	mov	r0, r4
   224e8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   224ec:	mov	r0, #0
   224f0:	str	r0, [r6]
   224f4:	b	224e4 <__assert_fail@plt+0xf8f4>
   224f8:	mov	r1, r0
   224fc:	b	22504 <__assert_fail@plt+0xf914>
   22500:	ldr	r4, [r1]
   22504:	cmp	r8, #0
   22508:	beq	224e4 <__assert_fail@plt+0xf8f4>
   2250c:	ldr	r0, [r1, #4]
   22510:	str	r0, [r6]
   22514:	mov	r0, #0
   22518:	str	r0, [r1]
   2251c:	ldr	r0, [r5, #36]	; 0x24
   22520:	str	r0, [r1, #4]
   22524:	str	r1, [r5, #36]	; 0x24
   22528:	b	224e4 <__assert_fail@plt+0xf8f4>
   2252c:	bl	12b9c <abort@plt>
   22530:	push	{r4, sl, fp, lr}
   22534:	add	fp, sp, #8
   22538:	sub	sp, sp, #8
   2253c:	add	r2, sp, #4
   22540:	mov	r4, r1
   22544:	bl	22270 <__assert_fail@plt+0xf680>
   22548:	cmn	r0, #1
   2254c:	beq	22560 <__assert_fail@plt+0xf970>
   22550:	ldr	r1, [sp, #4]
   22554:	cmp	r0, #0
   22558:	moveq	r4, r1
   2255c:	b	22564 <__assert_fail@plt+0xf974>
   22560:	mov	r4, #0
   22564:	mov	r0, r4
   22568:	sub	sp, fp, #8
   2256c:	pop	{r4, sl, fp, pc}
   22570:	push	{r4, r5, r6, sl, fp, lr}
   22574:	add	fp, sp, #16
   22578:	sub	sp, sp, #8
   2257c:	add	r2, sp, #4
   22580:	mov	r3, #1
   22584:	mov	r4, r0
   22588:	bl	22400 <__assert_fail@plt+0xf810>
   2258c:	mov	r5, r0
   22590:	cmp	r0, #0
   22594:	beq	22674 <__assert_fail@plt+0xfa84>
   22598:	ldr	r0, [r4, #16]
   2259c:	sub	r0, r0, #1
   225a0:	str	r0, [r4, #16]
   225a4:	ldr	r0, [sp, #4]
   225a8:	ldr	r0, [r0]
   225ac:	cmp	r0, #0
   225b0:	bne	22674 <__assert_fail@plt+0xfa84>
   225b4:	ldr	r0, [r4, #12]
   225b8:	vldr	s0, [r4, #8]
   225bc:	sub	r0, r0, #1
   225c0:	str	r0, [r4, #12]
   225c4:	vmov	s4, r0
   225c8:	ldr	r1, [r4, #20]
   225cc:	vldr	s2, [r1]
   225d0:	vcvt.f32.u32	s0, s0
   225d4:	vcvt.f32.u32	s4, s4
   225d8:	vmul.f32	s0, s2, s0
   225dc:	vcmpe.f32	s0, s4
   225e0:	vmrs	APSR_nzcv, fpscr
   225e4:	ble	22674 <__assert_fail@plt+0xfa84>
   225e8:	mov	r0, r4
   225ec:	bl	21cb8 <__assert_fail@plt+0xf0c8>
   225f0:	vldr	s0, [r4, #8]
   225f4:	ldr	r0, [r4, #20]
   225f8:	vldr	s2, [r4, #12]
   225fc:	vcvt.f32.u32	s0, s0
   22600:	vldr	s4, [r0]
   22604:	vcvt.f32.u32	s2, s2
   22608:	vmul.f32	s4, s4, s0
   2260c:	vcmpe.f32	s4, s2
   22610:	vmrs	APSR_nzcv, fpscr
   22614:	ble	22674 <__assert_fail@plt+0xfa84>
   22618:	vldr	s2, [r0, #4]
   2261c:	ldrb	r1, [r0, #16]
   22620:	cmp	r1, #0
   22624:	vmul.f32	s0, s2, s0
   22628:	bne	22634 <__assert_fail@plt+0xfa44>
   2262c:	vldr	s2, [r0, #8]
   22630:	vmul.f32	s0, s0, s2
   22634:	vcvt.u32.f32	s0, s0
   22638:	mov	r0, r4
   2263c:	vmov	r1, s0
   22640:	bl	21fc8 <__assert_fail@plt+0xf3d8>
   22644:	cmp	r0, #0
   22648:	bne	22674 <__assert_fail@plt+0xfa84>
   2264c:	ldr	r0, [r4, #36]	; 0x24
   22650:	cmp	r0, #0
   22654:	beq	2266c <__assert_fail@plt+0xfa7c>
   22658:	ldr	r6, [r0, #4]
   2265c:	bl	2bcbc <__assert_fail@plt+0x190cc>
   22660:	cmp	r6, #0
   22664:	mov	r0, r6
   22668:	bne	22658 <__assert_fail@plt+0xfa68>
   2266c:	mov	r0, #0
   22670:	str	r0, [r4, #36]	; 0x24
   22674:	mov	r0, r5
   22678:	sub	sp, fp, #16
   2267c:	pop	{r4, r5, r6, sl, fp, pc}
   22680:	b	22570 <__assert_fail@plt+0xf980>
   22684:	andeq	r0, r0, r0
   22688:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2268c:	add	fp, sp, #28
   22690:	sub	sp, sp, #4
   22694:	vpush	{d8-d9}
   22698:	sub	sp, sp, #96	; 0x60
   2269c:	mov	r7, r3
   226a0:	mov	r6, r2
   226a4:	mov	r9, r1
   226a8:	str	r0, [sp, #36]	; 0x24
   226ac:	bl	12a88 <localeconv@plt>
   226b0:	ldr	r5, [r0]
   226b4:	mov	r4, r0
   226b8:	mov	r0, r5
   226bc:	bl	128c0 <strlen@plt>
   226c0:	sub	r1, r0, #1
   226c4:	movw	r2, #58388	; 0xe414
   226c8:	cmp	r1, #16
   226cc:	movt	r2, #3
   226d0:	movcc	r2, r5
   226d4:	ldr	r5, [r4, #4]
   226d8:	ldr	r4, [r4, #8]
   226dc:	movcs	r0, #1
   226e0:	str	r0, [sp, #8]
   226e4:	str	r2, [sp, #4]
   226e8:	mov	r0, r5
   226ec:	bl	128c0 <strlen@plt>
   226f0:	movw	r3, #61759	; 0xf13f
   226f4:	cmp	r0, #17
   226f8:	movw	r0, #647	; 0x287
   226fc:	ldr	r2, [fp, #16]
   22700:	ldr	sl, [fp, #8]
   22704:	ldr	r8, [fp, #12]
   22708:	str	r6, [sp, #20]
   2270c:	str	r7, [sp, #28]
   22710:	str	r4, [sp, #12]
   22714:	movt	r3, #3
   22718:	movcc	r3, r5
   2271c:	add	r1, r6, r0
   22720:	ands	r0, r7, #32
   22724:	ldr	r5, [fp, #20]
   22728:	str	r0, [sp, #16]
   2272c:	mov	r0, #1000	; 0x3e8
   22730:	movwne	r0, #1024	; 0x400
   22734:	str	r1, [sp, #24]
   22738:	str	r3, [sp, #44]	; 0x2c
   2273c:	str	r0, [sp, #32]
   22740:	and	r0, r7, #3
   22744:	str	r0, [sp, #40]	; 0x28
   22748:	subs	r0, sl, r2
   2274c:	sbcs	r0, r8, r5
   22750:	bcs	22844 <__assert_fail@plt+0xfc54>
   22754:	orrs	r0, sl, r8
   22758:	mov	r4, r9
   2275c:	beq	2292c <__assert_fail@plt+0xfd3c>
   22760:	ldr	r5, [fp, #20]
   22764:	mov	r0, r2
   22768:	mov	r2, sl
   2276c:	mov	r3, r8
   22770:	mov	r1, r5
   22774:	bl	3cfc8 <__assert_fail@plt+0x2a3d8>
   22778:	mov	r6, r0
   2277c:	mov	r3, r1
   22780:	umull	r0, r1, r0, sl
   22784:	ldr	r2, [fp, #16]
   22788:	mla	r1, r6, r8, r1
   2278c:	mla	r1, r3, sl, r1
   22790:	subs	r0, r2, r0
   22794:	sbc	r1, r5, r1
   22798:	orrs	r0, r0, r1
   2279c:	bne	2292c <__assert_fail@plt+0xfd3c>
   227a0:	ldr	r5, [sp, #36]	; 0x24
   227a4:	mov	r1, r4
   227a8:	mov	r2, r6
   227ac:	mov	r8, r3
   227b0:	mov	r0, r5
   227b4:	bl	3cfc8 <__assert_fail@plt+0x2a3d8>
   227b8:	mov	r7, r0
   227bc:	mov	r9, r1
   227c0:	umull	r0, r1, r0, r6
   227c4:	mov	r2, #10
   227c8:	mov	r3, r8
   227cc:	mla	r1, r7, r8, r1
   227d0:	mla	r1, r9, r6, r1
   227d4:	subs	r0, r5, r0
   227d8:	umull	sl, r0, r0, r2
   227dc:	mov	r2, r6
   227e0:	sbc	r1, r4, r1
   227e4:	add	r1, r1, r1, lsl #2
   227e8:	add	r5, r0, r1, lsl #1
   227ec:	mov	r0, sl
   227f0:	mov	r1, r5
   227f4:	bl	3cfc8 <__assert_fail@plt+0x2a3d8>
   227f8:	mov	r4, r0
   227fc:	umull	r0, r2, r0, r6
   22800:	mla	r2, r4, r8, r2
   22804:	mla	r1, r1, r6, r2
   22808:	mov	r2, #2
   2280c:	subs	r0, sl, r0
   22810:	sbc	r1, r5, r1
   22814:	subs	r3, r6, r0, lsl #1
   22818:	lsl	r1, r1, #1
   2281c:	orr	r1, r1, r0, lsr #31
   22820:	orr	r5, r1, r0, lsl #1
   22824:	sbcs	r3, r8, r1
   22828:	movwcc	r2, #3
   2282c:	cmp	r5, #0
   22830:	movwne	r5, #1
   22834:	rsbs	r0, r6, r0, lsl #1
   22838:	sbcs	r0, r1, r8
   2283c:	movcs	r5, r2
   22840:	b	228bc <__assert_fail@plt+0xfccc>
   22844:	mov	r0, sl
   22848:	mov	r1, r8
   2284c:	mov	r3, r5
   22850:	bl	3cfc8 <__assert_fail@plt+0x2a3d8>
   22854:	ldr	r2, [fp, #16]
   22858:	mov	r6, r0
   2285c:	mov	r3, r1
   22860:	mov	r4, r9
   22864:	umull	r0, r1, r0, r2
   22868:	mla	r1, r6, r5, r1
   2286c:	mla	r1, r3, r2, r1
   22870:	subs	r0, sl, r0
   22874:	sbc	r1, r8, r1
   22878:	orrs	r0, r0, r1
   2287c:	bne	2292c <__assert_fail@plt+0xfd3c>
   22880:	ldr	r5, [sp, #36]	; 0x24
   22884:	mov	r2, r6
   22888:	umull	r7, r0, r6, r5
   2288c:	mla	r0, r6, r4, r0
   22890:	mla	r9, r3, r5, r0
   22894:	mov	r0, r7
   22898:	mov	r1, r9
   2289c:	bl	3cfc8 <__assert_fail@plt+0x2a3d8>
   228a0:	ldr	r2, [fp, #16]
   228a4:	eor	r1, r1, r4
   228a8:	eor	r0, r0, r5
   228ac:	orrs	r0, r0, r1
   228b0:	bne	2292c <__assert_fail@plt+0xfd3c>
   228b4:	mov	r5, #0
   228b8:	mov	r4, #0
   228bc:	ldr	r0, [sp, #28]
   228c0:	ldr	r2, [sp, #32]
   228c4:	mvn	r6, #0
   228c8:	ands	r8, r0, #16
   228cc:	beq	228e0 <__assert_fail@plt+0xfcf0>
   228d0:	subs	r0, r7, r2
   228d4:	mov	r6, #0
   228d8:	sbcs	r0, r9, #0
   228dc:	bcs	22e44 <__assert_fail@plt+0x10254>
   228e0:	ldr	r0, [sp, #24]
   228e4:	mov	sl, r7
   228e8:	str	r0, [sp, #36]	; 0x24
   228ec:	ldr	r0, [sp, #40]	; 0x28
   228f0:	cmp	r0, #0
   228f4:	beq	22c04 <__assert_fail@plt+0x10014>
   228f8:	cmp	r0, #1
   228fc:	bne	22c74 <__assert_fail@plt+0x10084>
   22900:	rsbs	r1, r5, #0
   22904:	mov	r0, #0
   22908:	and	r3, sl, #1
   2290c:	ldr	r5, [sp, #36]	; 0x24
   22910:	sbc	r0, r0, #0
   22914:	eor	r1, r3, r1
   22918:	orrs	r0, r1, r0
   2291c:	addne	r4, r4, #1
   22920:	cmp	r4, #5
   22924:	bgt	22c14 <__assert_fail@plt+0x10024>
   22928:	b	22c6c <__assert_fail@plt+0x1007c>
   2292c:	ldr	r9, [fp, #20]
   22930:	mov	r0, r2
   22934:	mov	r1, r9
   22938:	bl	3ce80 <__assert_fail@plt+0x2a290>
   2293c:	vmov	d8, r0, r1
   22940:	ldr	r0, [sp, #36]	; 0x24
   22944:	mov	r1, r4
   22948:	bl	3ce80 <__assert_fail@plt+0x2a290>
   2294c:	mov	r6, r0
   22950:	mov	r7, r1
   22954:	mov	r0, sl
   22958:	mov	r1, r8
   2295c:	bl	3ce80 <__assert_fail@plt+0x2a290>
   22960:	vmov	d16, r0, r1
   22964:	vmov	d17, r6, r7
   22968:	ldr	r7, [sp, #28]
   2296c:	tst	r7, #16
   22970:	vdiv.f64	d16, d16, d8
   22974:	vmul.f64	d8, d16, d17
   22978:	bne	229fc <__assert_fail@plt+0xfe0c>
   2297c:	ldr	r0, [sp, #40]	; 0x28
   22980:	ldr	sl, [sp, #20]
   22984:	cmp	r0, #1
   22988:	beq	22bc0 <__assert_fail@plt+0xffd0>
   2298c:	vldr	d16, [pc, #836]	; 22cd8 <__assert_fail@plt+0x100e8>
   22990:	ldr	r8, [sp, #24]
   22994:	vcmpe.f64	d8, d16
   22998:	vmrs	APSR_nzcv, fpscr
   2299c:	bpl	22bc4 <__assert_fail@plt+0xffd4>
   229a0:	mov	r6, r0
   229a4:	vmov	r0, r1, d8
   229a8:	bl	3d018 <__assert_fail@plt+0x2a428>
   229ac:	mov	r4, r0
   229b0:	mov	r5, r1
   229b4:	mov	r0, #0
   229b8:	cmp	r6, #0
   229bc:	mov	r2, #0
   229c0:	bne	229e8 <__assert_fail@plt+0xfdf8>
   229c4:	mov	r0, r4
   229c8:	mov	r1, r5
   229cc:	bl	3ce80 <__assert_fail@plt+0x2a290>
   229d0:	vmov	d16, r0, r1
   229d4:	mov	r2, #0
   229d8:	mov	r0, #0
   229dc:	vcmp.f64	d8, d16
   229e0:	vmrs	APSR_nzcv, fpscr
   229e4:	movwne	r0, #1
   229e8:	adds	r0, r0, r4
   229ec:	adc	r1, r2, r5
   229f0:	bl	3ce80 <__assert_fail@plt+0x2a290>
   229f4:	vmov	d8, r0, r1
   229f8:	b	22bc4 <__assert_fail@plt+0xffd4>
   229fc:	ldr	r0, [sp, #32]
   22a00:	vmov.f64	d16, #112	; 0x3f800000  1.0
   22a04:	mov	r6, #0
   22a08:	vmov	s0, r0
   22a0c:	vcvt.f64.u32	d17, s0
   22a10:	ldr	sl, [sp, #20]
   22a14:	vmul.f64	d16, d16, d17
   22a18:	add	r6, r6, #1
   22a1c:	cmp	r6, #7
   22a20:	vmulls.f64	d18, d16, d17
   22a24:	vcmpels.f64	d18, d8
   22a28:	vmrsls	APSR_nzcv, fpscr
   22a2c:	bls	22a14 <__assert_fail@plt+0xfe24>
   22a30:	vdiv.f64	d8, d8, d16
   22a34:	ldr	r0, [sp, #40]	; 0x28
   22a38:	ldr	r8, [sp, #24]
   22a3c:	ldr	r5, [sp, #8]
   22a40:	cmp	r0, #1
   22a44:	vmov.f64	d16, d8
   22a48:	beq	22abc <__assert_fail@plt+0xfecc>
   22a4c:	vldr	d16, [pc, #644]	; 22cd8 <__assert_fail@plt+0x100e8>
   22a50:	vcmpe.f64	d8, d16
   22a54:	vmov.f64	d16, d8
   22a58:	vmrs	APSR_nzcv, fpscr
   22a5c:	bpl	22abc <__assert_fail@plt+0xfecc>
   22a60:	vmov	r0, r1, d8
   22a64:	bl	3d018 <__assert_fail@plt+0x2a428>
   22a68:	mov	r5, r1
   22a6c:	ldr	r1, [sp, #40]	; 0x28
   22a70:	mov	r4, r0
   22a74:	mov	r0, #0
   22a78:	mov	r2, #0
   22a7c:	cmp	r1, #0
   22a80:	bne	22aa8 <__assert_fail@plt+0xfeb8>
   22a84:	mov	r0, r4
   22a88:	mov	r1, r5
   22a8c:	bl	3ce80 <__assert_fail@plt+0x2a290>
   22a90:	vmov	d16, r0, r1
   22a94:	mov	r2, #0
   22a98:	mov	r0, #0
   22a9c:	vcmp.f64	d8, d16
   22aa0:	vmrs	APSR_nzcv, fpscr
   22aa4:	movwne	r0, #1
   22aa8:	adds	r0, r0, r4
   22aac:	adc	r1, r2, r5
   22ab0:	bl	3ce80 <__assert_fail@plt+0x2a290>
   22ab4:	vmov	d16, r0, r1
   22ab8:	ldr	r5, [sp, #8]
   22abc:	vmov	r2, r3, d16
   22ac0:	movw	r1, #7522	; 0x1d62
   22ac4:	mov	r0, sl
   22ac8:	movt	r1, #4
   22acc:	bl	12a94 <sprintf@plt>
   22ad0:	ldr	r1, [sp, #16]
   22ad4:	mov	r0, #3
   22ad8:	cmp	r1, #0
   22adc:	movwne	r0, #2
   22ae0:	add	r4, r0, r5
   22ae4:	mov	r0, sl
   22ae8:	bl	128c0 <strlen@plt>
   22aec:	cmp	r4, r0
   22af0:	bcc	22b14 <__assert_fail@plt+0xff24>
   22af4:	mov	r2, r0
   22af8:	add	r5, r5, #1
   22afc:	tst	r7, #8
   22b00:	beq	22bec <__assert_fail@plt+0xfffc>
   22b04:	add	r0, r2, sl
   22b08:	ldrb	r0, [r0, #-1]
   22b0c:	cmp	r0, #48	; 0x30
   22b10:	bne	22bec <__assert_fail@plt+0xfffc>
   22b14:	vmov.f64	d9, #36	; 0x41200000  10.0
   22b18:	ldr	r4, [sp, #40]	; 0x28
   22b1c:	vmul.f64	d8, d8, d9
   22b20:	cmp	r4, #1
   22b24:	beq	22b94 <__assert_fail@plt+0xffa4>
   22b28:	vldr	d16, [pc, #424]	; 22cd8 <__assert_fail@plt+0x100e8>
   22b2c:	vcmpe.f64	d8, d16
   22b30:	vmrs	APSR_nzcv, fpscr
   22b34:	bpl	22b94 <__assert_fail@plt+0xffa4>
   22b38:	vmov	r0, r1, d8
   22b3c:	bl	3d018 <__assert_fail@plt+0x2a428>
   22b40:	mov	r3, r0
   22b44:	mov	r5, r1
   22b48:	mov	r0, #0
   22b4c:	cmp	r4, #0
   22b50:	mov	r2, #0
   22b54:	bne	22b84 <__assert_fail@plt+0xff94>
   22b58:	mov	r0, r3
   22b5c:	mov	r1, r5
   22b60:	mov	r4, r3
   22b64:	bl	3ce80 <__assert_fail@plt+0x2a290>
   22b68:	vmov	d16, r0, r1
   22b6c:	mov	r3, r4
   22b70:	mov	r2, #0
   22b74:	mov	r0, #0
   22b78:	vcmp.f64	d8, d16
   22b7c:	vmrs	APSR_nzcv, fpscr
   22b80:	movwne	r0, #1
   22b84:	adds	r0, r0, r3
   22b88:	adc	r1, r2, r5
   22b8c:	bl	3ce80 <__assert_fail@plt+0x2a290>
   22b90:	vmov	d8, r0, r1
   22b94:	vdiv.f64	d16, d8, d9
   22b98:	movw	r1, #7516	; 0x1d5c
   22b9c:	mov	r0, sl
   22ba0:	movt	r1, #4
   22ba4:	vmov	r2, r3, d16
   22ba8:	bl	12a94 <sprintf@plt>
   22bac:	mov	r0, sl
   22bb0:	bl	128c0 <strlen@plt>
   22bb4:	mov	r2, r0
   22bb8:	mov	r5, #0
   22bbc:	b	22bec <__assert_fail@plt+0xfffc>
   22bc0:	ldr	r8, [sp, #24]
   22bc4:	vmov	r2, r3, d8
   22bc8:	movw	r1, #7516	; 0x1d5c
   22bcc:	mov	r0, sl
   22bd0:	movt	r1, #4
   22bd4:	bl	12a94 <sprintf@plt>
   22bd8:	mov	r0, sl
   22bdc:	bl	128c0 <strlen@plt>
   22be0:	mov	r2, r0
   22be4:	mov	r5, #0
   22be8:	mvn	r6, #0
   22bec:	sub	r4, r8, r2
   22bf0:	mov	r1, sl
   22bf4:	mov	r0, r4
   22bf8:	bl	12584 <memmove@plt>
   22bfc:	sub	r5, r8, r5
   22c00:	b	22cc4 <__assert_fail@plt+0x100d4>
   22c04:	add	r0, r4, r5
   22c08:	ldr	r5, [sp, #36]	; 0x24
   22c0c:	cmp	r0, #1
   22c10:	blt	22c6c <__assert_fail@plt+0x1007c>
   22c14:	adds	sl, sl, #1
   22c18:	adc	r9, r9, #0
   22c1c:	cmp	r6, #7
   22c20:	bgt	22c6c <__assert_fail@plt+0x1007c>
   22c24:	cmp	r8, #0
   22c28:	beq	22c6c <__assert_fail@plt+0x1007c>
   22c2c:	eor	r0, sl, r2
   22c30:	orrs	r0, r0, r9
   22c34:	bne	22c6c <__assert_fail@plt+0x1007c>
   22c38:	ldr	r0, [sp, #28]
   22c3c:	add	r6, r6, #1
   22c40:	mov	r9, #0
   22c44:	mov	sl, #1
   22c48:	tst	r0, #8
   22c4c:	bne	22c6c <__assert_fail@plt+0x1007c>
   22c50:	ldr	r2, [sp, #8]
   22c54:	mov	r0, #48	; 0x30
   22c58:	ldr	r1, [sp, #4]
   22c5c:	strb	r0, [r5, #-1]!
   22c60:	sub	r5, r5, r2
   22c64:	mov	r0, r5
   22c68:	bl	125f0 <memcpy@plt>
   22c6c:	ldr	r8, [sp, #24]
   22c70:	b	22c7c <__assert_fail@plt+0x1008c>
   22c74:	ldr	r8, [sp, #24]
   22c78:	ldr	r5, [sp, #36]	; 0x24
   22c7c:	mov	r4, r5
   22c80:	mov	r0, sl
   22c84:	mov	r1, r9
   22c88:	mov	r2, #10
   22c8c:	mov	r3, #0
   22c90:	bl	3cfc8 <__assert_fail@plt+0x2a3d8>
   22c94:	add	r2, r0, r0, lsl #2
   22c98:	sub	r2, sl, r2, lsl #1
   22c9c:	orr	r2, r2, #48	; 0x30
   22ca0:	strb	r2, [r4, #-1]!
   22ca4:	rsbs	r2, sl, #9
   22ca8:	mov	sl, r0
   22cac:	rscs	r2, r9, #0
   22cb0:	mov	r9, r1
   22cb4:	bcc	22c80 <__assert_fail@plt+0x10090>
   22cb8:	ldr	r7, [sp, #28]
   22cbc:	ldr	r9, [fp, #20]
   22cc0:	ldr	sl, [sp, #20]
   22cc4:	tst	r7, #4
   22cc8:	bne	22ce0 <__assert_fail@plt+0x100f0>
   22ccc:	ldr	r3, [sp, #32]
   22cd0:	ldr	r5, [fp, #16]
   22cd4:	b	22df4 <__assert_fail@plt+0x10204>
   22cd8:	andeq	r0, r0, r0
   22cdc:	mvnsmi	r0, #0
   22ce0:	ldr	r0, [sp, #44]	; 0x2c
   22ce4:	mov	r7, r5
   22ce8:	str	r6, [sp, #8]
   22cec:	sub	r5, r5, r4
   22cf0:	bl	128c0 <strlen@plt>
   22cf4:	add	r8, sp, #48	; 0x30
   22cf8:	str	r0, [sp, #40]	; 0x28
   22cfc:	mov	r1, r4
   22d00:	mov	r2, r5
   22d04:	mov	r0, r8
   22d08:	bl	125f0 <memcpy@plt>
   22d0c:	ldr	r0, [sp, #12]
   22d10:	ldrb	r6, [r0]
   22d14:	cmp	r6, #255	; 0xff
   22d18:	mov	r9, r6
   22d1c:	moveq	r9, r5
   22d20:	cmp	r6, #0
   22d24:	mvneq	r9, #0
   22d28:	cmp	r9, r5
   22d2c:	movhi	r9, r5
   22d30:	sub	r4, r7, r9
   22d34:	sub	r7, r5, r9
   22d38:	mov	r2, r9
   22d3c:	add	r1, r8, r7
   22d40:	mov	r0, r4
   22d44:	bl	125f0 <memcpy@plt>
   22d48:	cmp	r7, #0
   22d4c:	beq	22dd8 <__assert_fail@plt+0x101e8>
   22d50:	clz	r0, r6
   22d54:	ldr	r8, [sp, #12]
   22d58:	lsr	sl, r0, #5
   22d5c:	ldr	r0, [sp, #40]	; 0x28
   22d60:	rsb	r0, r0, #0
   22d64:	str	r0, [sp, #36]	; 0x24
   22d68:	ldr	r0, [sp, #36]	; 0x24
   22d6c:	ldr	r1, [sp, #44]	; 0x2c
   22d70:	ldr	r2, [sp, #40]	; 0x28
   22d74:	add	r4, r4, r0
   22d78:	mov	r0, r4
   22d7c:	bl	125f0 <memcpy@plt>
   22d80:	tst	sl, #1
   22d84:	add	r0, sp, #48	; 0x30
   22d88:	addeq	r8, r8, #1
   22d8c:	ldrb	r6, [r8]
   22d90:	cmp	r6, #255	; 0xff
   22d94:	mov	r5, r6
   22d98:	moveq	r5, r7
   22d9c:	cmp	r6, #0
   22da0:	moveq	r5, r9
   22da4:	cmp	r7, r5
   22da8:	movcc	r5, r7
   22dac:	sub	r7, r7, r5
   22db0:	sub	r4, r4, r5
   22db4:	mov	r2, r5
   22db8:	add	r1, r0, r7
   22dbc:	mov	r0, r4
   22dc0:	bl	125f0 <memcpy@plt>
   22dc4:	clz	r0, r6
   22dc8:	cmp	r7, #0
   22dcc:	mov	r9, r5
   22dd0:	lsr	sl, r0, #5
   22dd4:	bne	22d68 <__assert_fail@plt+0x10178>
   22dd8:	ldr	r8, [sp, #24]
   22ddc:	ldr	sl, [sp, #20]
   22de0:	ldr	r7, [sp, #28]
   22de4:	ldr	r3, [sp, #32]
   22de8:	ldr	r9, [fp, #20]
   22dec:	ldr	r5, [fp, #16]
   22df0:	ldr	r6, [sp, #8]
   22df4:	tst	r7, #128	; 0x80
   22df8:	beq	22f5c <__assert_fail@plt+0x1036c>
   22dfc:	cmn	r6, #1
   22e00:	bgt	22ef4 <__assert_fail@plt+0x10304>
   22e04:	subs	r0, r5, #2
   22e08:	mov	r6, #0
   22e0c:	sbcs	r0, r9, #0
   22e10:	bcc	22ef4 <__assert_fail@plt+0x10304>
   22e14:	mov	r0, #0
   22e18:	mov	r1, #1
   22e1c:	mov	r6, #0
   22e20:	cmp	r6, #7
   22e24:	beq	22ef0 <__assert_fail@plt+0x10300>
   22e28:	umull	r1, r2, r1, r3
   22e2c:	add	r6, r6, #1
   22e30:	mla	r0, r0, r3, r2
   22e34:	subs	r2, r1, r5
   22e38:	sbcs	r2, r0, r9
   22e3c:	bcc	22e20 <__assert_fail@plt+0x10230>
   22e40:	b	22ef4 <__assert_fail@plt+0x10304>
   22e44:	mov	r6, #0
   22e48:	mov	r0, r7
   22e4c:	mov	r1, r9
   22e50:	mov	r3, #0
   22e54:	bl	3cfc8 <__assert_fail@plt+0x2a3d8>
   22e58:	ldr	r2, [sp, #32]
   22e5c:	mov	sl, r0
   22e60:	mov	r9, r1
   22e64:	mls	r0, r0, r2, r7
   22e68:	add	r0, r0, r0, lsl #2
   22e6c:	add	r0, r4, r0, lsl #1
   22e70:	udiv	r4, r0, r2
   22e74:	mls	r0, r4, r2, r0
   22e78:	lsl	r0, r0, #1
   22e7c:	add	r0, r0, r5, lsr #1
   22e80:	cmp	r0, r2
   22e84:	bcs	22e98 <__assert_fail@plt+0x102a8>
   22e88:	rsb	r1, r5, #0
   22e8c:	subs	r5, r0, r1
   22e90:	movwne	r5, #1
   22e94:	b	22ea8 <__assert_fail@plt+0x102b8>
   22e98:	add	r0, r0, r5
   22e9c:	mov	r5, #2
   22ea0:	cmp	r2, r0
   22ea4:	movwcc	r5, #3
   22ea8:	add	r6, r6, #1
   22eac:	cmp	r6, #7
   22eb0:	bhi	22ec4 <__assert_fail@plt+0x102d4>
   22eb4:	subs	r0, sl, r2
   22eb8:	mov	r7, sl
   22ebc:	sbcs	r0, r9, #0
   22ec0:	bcs	22e48 <__assert_fail@plt+0x10258>
   22ec4:	rsbs	r0, sl, #9
   22ec8:	rscs	r0, r9, #0
   22ecc:	bcc	22f78 <__assert_fail@plt+0x10388>
   22ed0:	ldr	r0, [sp, #40]	; 0x28
   22ed4:	cmp	r0, #1
   22ed8:	bne	22f80 <__assert_fail@plt+0x10390>
   22edc:	and	r0, r4, #1
   22ee0:	add	r0, r5, r0
   22ee4:	cmp	r0, #2
   22ee8:	bhi	22f90 <__assert_fail@plt+0x103a0>
   22eec:	b	22fc4 <__assert_fail@plt+0x103d4>
   22ef0:	mov	r6, #8
   22ef4:	and	r0, r7, #256	; 0x100
   22ef8:	tst	r7, #64	; 0x40
   22efc:	orrsne	r1, r6, r0
   22f00:	movne	r1, #32
   22f04:	addne	r8, sl, #648	; 0x288
   22f08:	strbne	r1, [sl, #647]	; 0x287
   22f0c:	cmp	r6, #0
   22f10:	beq	22f38 <__assert_fail@plt+0x10348>
   22f14:	ldr	r1, [sp, #16]
   22f18:	cmp	r1, #0
   22f1c:	moveq	r1, #107	; 0x6b
   22f20:	cmpeq	r6, #1
   22f24:	beq	22f34 <__assert_fail@plt+0x10344>
   22f28:	movw	r1, #7576	; 0x1d98
   22f2c:	movt	r1, #4
   22f30:	ldrb	r1, [r1, r6]
   22f34:	strb	r1, [r8], #1
   22f38:	cmp	r0, #0
   22f3c:	beq	22f5c <__assert_fail@plt+0x1036c>
   22f40:	ldr	r0, [sp, #16]
   22f44:	cmp	r0, #0
   22f48:	cmpne	r6, #0
   22f4c:	movne	r0, #105	; 0x69
   22f50:	strbne	r0, [r8], #1
   22f54:	mov	r0, #66	; 0x42
   22f58:	strb	r0, [r8], #1
   22f5c:	mov	r0, #0
   22f60:	strb	r0, [r8]
   22f64:	mov	r0, r4
   22f68:	sub	sp, fp, #48	; 0x30
   22f6c:	vpop	{d8-d9}
   22f70:	add	sp, sp, #4
   22f74:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   22f78:	ldr	r0, [sp, #24]
   22f7c:	b	228e8 <__assert_fail@plt+0xfcf8>
   22f80:	cmp	r0, #0
   22f84:	bne	22fc4 <__assert_fail@plt+0x103d4>
   22f88:	cmp	r5, #0
   22f8c:	beq	22fc4 <__assert_fail@plt+0x103d4>
   22f90:	adds	r0, sl, #1
   22f94:	add	r4, r4, #1
   22f98:	mov	r5, #0
   22f9c:	adc	r1, r9, #0
   22fa0:	cmp	r4, #10
   22fa4:	bne	22fc4 <__assert_fail@plt+0x103d4>
   22fa8:	rsbs	r3, r0, #9
   22fac:	mov	r4, #0
   22fb0:	mov	sl, r0
   22fb4:	mov	r9, r1
   22fb8:	mov	r5, #0
   22fbc:	rscs	r3, r1, #0
   22fc0:	bcc	23014 <__assert_fail@plt+0x10424>
   22fc4:	ldr	r0, [sp, #28]
   22fc8:	tst	r0, #8
   22fcc:	beq	22fe4 <__assert_fail@plt+0x103f4>
   22fd0:	cmp	r4, #0
   22fd4:	bne	22fe4 <__assert_fail@plt+0x103f4>
   22fd8:	ldr	r0, [sp, #24]
   22fdc:	str	r0, [sp, #36]	; 0x24
   22fe0:	b	2300c <__assert_fail@plt+0x1041c>
   22fe4:	ldr	r1, [sp, #20]
   22fe8:	ldr	r2, [sp, #8]
   22fec:	add	r0, r4, #48	; 0x30
   22ff0:	strb	r0, [r1, #646]!	; 0x286
   22ff4:	sub	r0, r1, r2
   22ff8:	ldr	r1, [sp, #4]
   22ffc:	str	r0, [sp, #36]	; 0x24
   23000:	bl	125f0 <memcpy@plt>
   23004:	ldr	r2, [sp, #32]
   23008:	mov	r5, #0
   2300c:	mov	r4, #0
   23010:	b	228ec <__assert_fail@plt+0xfcfc>
   23014:	ldr	r0, [sp, #24]
   23018:	mov	r5, #0
   2301c:	mov	sl, #10
   23020:	mov	r9, #0
   23024:	b	228e8 <__assert_fail@plt+0xfcf8>
   23028:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   2302c:	add	fp, sp, #24
   23030:	sub	sp, sp, #8
   23034:	mov	r4, r2
   23038:	mov	r8, r1
   2303c:	cmp	r0, #0
   23040:	bne	2306c <__assert_fail@plt+0x1047c>
   23044:	movw	r0, #62186	; 0xf2ea
   23048:	movt	r0, #3
   2304c:	bl	127f4 <getenv@plt>
   23050:	cmp	r0, #0
   23054:	bne	2306c <__assert_fail@plt+0x1047c>
   23058:	movw	r0, #7528	; 0x1d68
   2305c:	movt	r0, #4
   23060:	bl	127f4 <getenv@plt>
   23064:	cmp	r0, #0
   23068:	beq	23188 <__assert_fail@plt+0x10598>
   2306c:	mov	r6, r0
   23070:	movw	r7, #7600	; 0x1db0
   23074:	movw	r1, #7588	; 0x1da4
   23078:	mov	r3, #4
   2307c:	ldrb	r5, [r6], #1
   23080:	movt	r7, #4
   23084:	movt	r1, #4
   23088:	mov	r2, r7
   2308c:	cmp	r5, #39	; 0x27
   23090:	movne	r6, r0
   23094:	mov	r0, r6
   23098:	bl	3bf8c <__assert_fail@plt+0x2939c>
   2309c:	sub	r1, r5, #39	; 0x27
   230a0:	cmp	r0, #0
   230a4:	clz	r1, r1
   230a8:	lsr	r1, r1, #5
   230ac:	lsl	r5, r1, #2
   230b0:	bmi	230d8 <__assert_fail@plt+0x104e8>
   230b4:	ldr	r0, [r7, r0, lsl #2]
   230b8:	mov	r2, #1
   230bc:	mov	r1, #0
   230c0:	str	r2, [r4]
   230c4:	str	r1, [r4, #4]
   230c8:	orr	r1, r0, r5
   230cc:	mov	r0, #0
   230d0:	str	r1, [r8]
   230d4:	b	23108 <__assert_fail@plt+0x10518>
   230d8:	movw	r0, #7538	; 0x1d72
   230dc:	add	r1, sp, #4
   230e0:	mov	r2, #0
   230e4:	mov	r3, r4
   230e8:	mov	r7, #0
   230ec:	movt	r0, #4
   230f0:	str	r0, [sp]
   230f4:	mov	r0, r6
   230f8:	bl	2affc <__assert_fail@plt+0x1840c>
   230fc:	cmp	r0, #0
   23100:	beq	23144 <__assert_fail@plt+0x10554>
   23104:	str	r7, [r8]
   23108:	ldrd	r2, [r4]
   2310c:	orrs	r1, r2, r3
   23110:	bne	2313c <__assert_fail@plt+0x1054c>
   23114:	movw	r0, #62165	; 0xf2d5
   23118:	movt	r0, #3
   2311c:	bl	127f4 <getenv@plt>
   23120:	cmp	r0, #0
   23124:	mov	r2, #512	; 0x200
   23128:	mov	r0, #4
   2312c:	mov	r1, #0
   23130:	movweq	r2, #1024	; 0x400
   23134:	str	r2, [r4]
   23138:	str	r1, [r4, #4]
   2313c:	sub	sp, fp, #24
   23140:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   23144:	ldrb	r0, [r6]
   23148:	sub	r0, r0, #48	; 0x30
   2314c:	uxtb	r0, r0
   23150:	cmp	r0, #10
   23154:	bcc	23180 <__assert_fail@plt+0x10590>
   23158:	ldr	r0, [sp, #4]
   2315c:	cmp	r0, r6
   23160:	beq	231b0 <__assert_fail@plt+0x105c0>
   23164:	ldrb	r2, [r6, #1]
   23168:	add	r1, r6, #1
   2316c:	mov	r6, r1
   23170:	sub	r2, r2, #48	; 0x30
   23174:	uxtb	r2, r2
   23178:	cmp	r2, #10
   2317c:	bcs	2315c <__assert_fail@plt+0x1056c>
   23180:	mov	r1, r5
   23184:	b	230cc <__assert_fail@plt+0x104dc>
   23188:	movw	r0, #62165	; 0xf2d5
   2318c:	movt	r0, #3
   23190:	bl	127f4 <getenv@plt>
   23194:	cmp	r0, #0
   23198:	mov	r2, #512	; 0x200
   2319c:	mov	r1, #0
   231a0:	movweq	r2, #1024	; 0x400
   231a4:	str	r2, [r4]
   231a8:	str	r1, [r4, #4]
   231ac:	b	230cc <__assert_fail@plt+0x104dc>
   231b0:	ldrb	r2, [r0, #-1]
   231b4:	orr	r1, r5, #384	; 0x180
   231b8:	cmp	r2, #66	; 0x42
   231bc:	mov	r2, r1
   231c0:	orrne	r2, r5, #128	; 0x80
   231c4:	bne	231d8 <__assert_fail@plt+0x105e8>
   231c8:	ldrb	r0, [r0, #-2]
   231cc:	cmp	r0, #105	; 0x69
   231d0:	orreq	r1, r2, #32
   231d4:	b	230cc <__assert_fail@plt+0x104dc>
   231d8:	orr	r1, r2, #32
   231dc:	b	230cc <__assert_fail@plt+0x104dc>
   231e0:	push	{r4, r5, r6, r7, fp, lr}
   231e4:	add	fp, sp, #16
   231e8:	movw	r7, #19732	; 0x4d14
   231ec:	mov	r4, r0
   231f0:	movt	r7, #5
   231f4:	ldr	r5, [r7]
   231f8:	cmp	r5, #0
   231fc:	beq	23214 <__assert_fail@plt+0x10624>
   23200:	ldr	r0, [r5]
   23204:	cmp	r0, r4
   23208:	beq	23268 <__assert_fail@plt+0x10678>
   2320c:	ldr	r5, [r5, #4]
   23210:	b	231f8 <__assert_fail@plt+0x10608>
   23214:	mov	r0, r4
   23218:	bl	1250c <getpwuid@plt>
   2321c:	cmp	r0, #0
   23220:	beq	2322c <__assert_fail@plt+0x1063c>
   23224:	ldr	r6, [r0]
   23228:	b	23234 <__assert_fail@plt+0x10644>
   2322c:	movw	r6, #61759	; 0xf13f
   23230:	movt	r6, #3
   23234:	mov	r0, r6
   23238:	bl	128c0 <strlen@plt>
   2323c:	add	r0, r0, #12
   23240:	bic	r0, r0, #3
   23244:	bl	2a688 <__assert_fail@plt+0x17a98>
   23248:	mov	r5, r0
   2324c:	str	r4, [r0]
   23250:	add	r0, r0, #8
   23254:	mov	r1, r6
   23258:	bl	12770 <strcpy@plt>
   2325c:	ldr	r0, [r7]
   23260:	str	r5, [r7]
   23264:	str	r0, [r5, #4]
   23268:	ldrb	r0, [r5, #8]!
   2326c:	cmp	r0, #0
   23270:	moveq	r5, r0
   23274:	mov	r0, r5
   23278:	pop	{r4, r5, r6, r7, fp, pc}
   2327c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   23280:	add	fp, sp, #24
   23284:	movw	r8, #19732	; 0x4d14
   23288:	mov	r4, r0
   2328c:	movt	r8, #5
   23290:	ldr	r5, [r8]
   23294:	cmp	r5, #0
   23298:	beq	232cc <__assert_fail@plt+0x106dc>
   2329c:	ldrb	r6, [r4]
   232a0:	mov	r0, r5
   232a4:	ldrb	r1, [r0, #8]!
   232a8:	cmp	r1, r6
   232ac:	bne	232c0 <__assert_fail@plt+0x106d0>
   232b0:	mov	r1, r4
   232b4:	bl	124f4 <strcmp@plt>
   232b8:	cmp	r0, #0
   232bc:	beq	2336c <__assert_fail@plt+0x1077c>
   232c0:	ldr	r5, [r5, #4]
   232c4:	cmp	r5, #0
   232c8:	bne	232a0 <__assert_fail@plt+0x106b0>
   232cc:	movw	r7, #19736	; 0x4d18
   232d0:	movt	r7, #5
   232d4:	ldr	r5, [r7]
   232d8:	cmp	r5, #0
   232dc:	beq	23310 <__assert_fail@plt+0x10720>
   232e0:	ldrb	r6, [r4]
   232e4:	mov	r0, r5
   232e8:	ldrb	r1, [r0, #8]!
   232ec:	cmp	r1, r6
   232f0:	bne	23304 <__assert_fail@plt+0x10714>
   232f4:	mov	r1, r4
   232f8:	bl	124f4 <strcmp@plt>
   232fc:	cmp	r0, #0
   23300:	beq	23368 <__assert_fail@plt+0x10778>
   23304:	ldr	r5, [r5, #4]
   23308:	cmp	r5, #0
   2330c:	bne	232e4 <__assert_fail@plt+0x106f4>
   23310:	mov	r0, r4
   23314:	bl	124d0 <getpwnam@plt>
   23318:	mov	r6, r0
   2331c:	mov	r0, r4
   23320:	bl	128c0 <strlen@plt>
   23324:	add	r0, r0, #12
   23328:	bic	r0, r0, #3
   2332c:	bl	2a688 <__assert_fail@plt+0x17a98>
   23330:	mov	r5, r0
   23334:	add	r0, r0, #8
   23338:	mov	r1, r4
   2333c:	bl	12770 <strcpy@plt>
   23340:	cmp	r6, #0
   23344:	beq	2335c <__assert_fail@plt+0x1076c>
   23348:	ldr	r0, [r6, #8]
   2334c:	ldr	r1, [r8]
   23350:	str	r5, [r8]
   23354:	stm	r5, {r0, r1}
   23358:	b	2336c <__assert_fail@plt+0x1077c>
   2335c:	ldr	r0, [r7]
   23360:	str	r5, [r7]
   23364:	str	r0, [r5, #4]
   23368:	mov	r5, #0
   2336c:	mov	r0, r5
   23370:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   23374:	push	{r4, r5, r6, r7, fp, lr}
   23378:	add	fp, sp, #16
   2337c:	movw	r7, #19740	; 0x4d1c
   23380:	mov	r4, r0
   23384:	movt	r7, #5
   23388:	ldr	r5, [r7]
   2338c:	cmp	r5, #0
   23390:	beq	233a8 <__assert_fail@plt+0x107b8>
   23394:	ldr	r0, [r5]
   23398:	cmp	r0, r4
   2339c:	beq	233fc <__assert_fail@plt+0x1080c>
   233a0:	ldr	r5, [r5, #4]
   233a4:	b	2338c <__assert_fail@plt+0x1079c>
   233a8:	mov	r0, r4
   233ac:	bl	12bcc <getgrgid@plt>
   233b0:	cmp	r0, #0
   233b4:	beq	233c0 <__assert_fail@plt+0x107d0>
   233b8:	ldr	r6, [r0]
   233bc:	b	233c8 <__assert_fail@plt+0x107d8>
   233c0:	movw	r6, #61759	; 0xf13f
   233c4:	movt	r6, #3
   233c8:	mov	r0, r6
   233cc:	bl	128c0 <strlen@plt>
   233d0:	add	r0, r0, #12
   233d4:	bic	r0, r0, #3
   233d8:	bl	2a688 <__assert_fail@plt+0x17a98>
   233dc:	mov	r5, r0
   233e0:	str	r4, [r0]
   233e4:	add	r0, r0, #8
   233e8:	mov	r1, r6
   233ec:	bl	12770 <strcpy@plt>
   233f0:	ldr	r0, [r7]
   233f4:	str	r5, [r7]
   233f8:	str	r0, [r5, #4]
   233fc:	ldrb	r0, [r5, #8]!
   23400:	cmp	r0, #0
   23404:	moveq	r5, r0
   23408:	mov	r0, r5
   2340c:	pop	{r4, r5, r6, r7, fp, pc}
   23410:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   23414:	add	fp, sp, #24
   23418:	movw	r8, #19740	; 0x4d1c
   2341c:	mov	r4, r0
   23420:	movt	r8, #5
   23424:	ldr	r5, [r8]
   23428:	cmp	r5, #0
   2342c:	beq	23460 <__assert_fail@plt+0x10870>
   23430:	ldrb	r6, [r4]
   23434:	mov	r0, r5
   23438:	ldrb	r1, [r0, #8]!
   2343c:	cmp	r1, r6
   23440:	bne	23454 <__assert_fail@plt+0x10864>
   23444:	mov	r1, r4
   23448:	bl	124f4 <strcmp@plt>
   2344c:	cmp	r0, #0
   23450:	beq	23500 <__assert_fail@plt+0x10910>
   23454:	ldr	r5, [r5, #4]
   23458:	cmp	r5, #0
   2345c:	bne	23434 <__assert_fail@plt+0x10844>
   23460:	movw	r7, #19744	; 0x4d20
   23464:	movt	r7, #5
   23468:	ldr	r5, [r7]
   2346c:	cmp	r5, #0
   23470:	beq	234a4 <__assert_fail@plt+0x108b4>
   23474:	ldrb	r6, [r4]
   23478:	mov	r0, r5
   2347c:	ldrb	r1, [r0, #8]!
   23480:	cmp	r1, r6
   23484:	bne	23498 <__assert_fail@plt+0x108a8>
   23488:	mov	r1, r4
   2348c:	bl	124f4 <strcmp@plt>
   23490:	cmp	r0, #0
   23494:	beq	234fc <__assert_fail@plt+0x1090c>
   23498:	ldr	r5, [r5, #4]
   2349c:	cmp	r5, #0
   234a0:	bne	23478 <__assert_fail@plt+0x10888>
   234a4:	mov	r0, r4
   234a8:	bl	12bd8 <getgrnam@plt>
   234ac:	mov	r6, r0
   234b0:	mov	r0, r4
   234b4:	bl	128c0 <strlen@plt>
   234b8:	add	r0, r0, #12
   234bc:	bic	r0, r0, #3
   234c0:	bl	2a688 <__assert_fail@plt+0x17a98>
   234c4:	mov	r5, r0
   234c8:	add	r0, r0, #8
   234cc:	mov	r1, r4
   234d0:	bl	12770 <strcpy@plt>
   234d4:	cmp	r6, #0
   234d8:	beq	234f0 <__assert_fail@plt+0x10900>
   234dc:	ldr	r0, [r6, #8]
   234e0:	ldr	r1, [r8]
   234e4:	str	r5, [r8]
   234e8:	stm	r5, {r0, r1}
   234ec:	b	23500 <__assert_fail@plt+0x10910>
   234f0:	ldr	r0, [r7]
   234f4:	str	r5, [r7]
   234f8:	str	r0, [r5, #4]
   234fc:	mov	r5, #0
   23500:	mov	r0, r5
   23504:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   23508:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2350c:	add	fp, sp, #28
   23510:	sub	sp, sp, #308	; 0x134
   23514:	mov	r7, r1
   23518:	mov	sl, r0
   2351c:	bl	12758 <__ctype_get_mb_cur_max@plt>
   23520:	cmp	r0, #2
   23524:	bcc	238b0 <__assert_fail@plt+0x10cc0>
   23528:	mov	r4, #0
   2352c:	sub	r0, fp, #88	; 0x58
   23530:	str	r4, [fp, #-80]	; 0xffffffb0
   23534:	str	r4, [fp, #-84]	; 0xffffffac
   23538:	strb	r4, [fp, #-76]	; 0xffffffb4
   2353c:	strb	r4, [fp, #-88]	; 0xffffffa8
   23540:	str	r7, [fp, #-72]	; 0xffffffb8
   23544:	bl	242a8 <__assert_fail@plt+0x116b8>
   23548:	ldrb	r0, [fp, #-64]	; 0xffffffc0
   2354c:	cmp	r0, #0
   23550:	beq	23560 <__assert_fail@plt+0x10970>
   23554:	ldr	r0, [fp, #-60]	; 0xffffffc4
   23558:	cmp	r0, #0
   2355c:	beq	239cc <__assert_fail@plt+0x10ddc>
   23560:	add	r0, sp, #136	; 0x88
   23564:	str	r4, [fp, #-136]	; 0xffffff78
   23568:	str	r4, [fp, #-140]	; 0xffffff74
   2356c:	str	r7, [fp, #-128]	; 0xffffff80
   23570:	strb	r4, [fp, #-132]	; 0xffffff7c
   23574:	str	r7, [sp, #12]
   23578:	strb	r4, [fp, #-144]	; 0xffffff70
   2357c:	str	r4, [sp, #144]	; 0x90
   23580:	str	r4, [sp, #140]	; 0x8c
   23584:	str	sl, [sp, #152]	; 0x98
   23588:	strb	r4, [sp, #148]	; 0x94
   2358c:	strb	r4, [sp, #136]	; 0x88
   23590:	bl	242a8 <__assert_fail@plt+0x116b8>
   23594:	ldrb	r0, [sp, #160]	; 0xa0
   23598:	cmp	r0, #0
   2359c:	beq	235ac <__assert_fail@plt+0x109bc>
   235a0:	ldr	r0, [sp, #164]	; 0xa4
   235a4:	cmp	r0, #0
   235a8:	beq	239d8 <__assert_fail@plt+0x10de8>
   235ac:	add	r0, sp, #24
   235b0:	mov	r5, #0
   235b4:	sub	r7, fp, #144	; 0x90
   235b8:	mov	r1, #0
   235bc:	mov	r6, #0
   235c0:	mov	r9, #0
   235c4:	add	r0, r0, #4
   235c8:	str	r0, [sp, #8]
   235cc:	mov	r0, #1
   235d0:	str	r0, [sp, #16]
   235d4:	add	r0, r9, r9, lsl #2
   235d8:	mov	r8, r6
   235dc:	cmp	r6, r0
   235e0:	bcc	23690 <__assert_fail@plt+0x10aa0>
   235e4:	ldr	r0, [sp, #16]
   235e8:	tst	r0, #1
   235ec:	beq	23690 <__assert_fail@plt+0x10aa0>
   235f0:	cmp	r9, #10
   235f4:	bcc	23690 <__assert_fail@plt+0x10aa0>
   235f8:	subs	r0, r8, r1
   235fc:	beq	23640 <__assert_fail@plt+0x10a50>
   23600:	sub	r6, r1, r8
   23604:	mov	r0, r7
   23608:	bl	242a8 <__assert_fail@plt+0x116b8>
   2360c:	ldrb	r0, [fp, #-120]	; 0xffffff88
   23610:	cmp	r0, #0
   23614:	beq	23624 <__assert_fail@plt+0x10a34>
   23618:	ldr	r0, [fp, #-116]	; 0xffffff8c
   2361c:	cmp	r0, #0
   23620:	beq	23640 <__assert_fail@plt+0x10a50>
   23624:	strb	r5, [fp, #-132]	; 0xffffff7c
   23628:	adds	r6, r6, #1
   2362c:	ldr	r0, [fp, #-128]	; 0xffffff80
   23630:	ldr	r1, [fp, #-124]	; 0xffffff84
   23634:	add	r0, r0, r1
   23638:	str	r0, [fp, #-128]	; 0xffffff80
   2363c:	bcc	23604 <__assert_fail@plt+0x10a14>
   23640:	mov	r0, r7
   23644:	bl	242a8 <__assert_fail@plt+0x116b8>
   23648:	ldrb	r0, [fp, #-120]	; 0xffffff88
   2364c:	cmp	r0, #0
   23650:	beq	2368c <__assert_fail@plt+0x10a9c>
   23654:	ldr	r0, [fp, #-116]	; 0xffffff8c
   23658:	mov	r1, r8
   2365c:	cmp	r0, #0
   23660:	bne	23690 <__assert_fail@plt+0x10aa0>
   23664:	ldr	r1, [sp, #12]
   23668:	mov	r0, sl
   2366c:	add	r2, sp, #80	; 0x50
   23670:	bl	23a00 <__assert_fail@plt+0x10e10>
   23674:	mov	r1, #0
   23678:	cmp	r0, #0
   2367c:	str	r1, [sp, #16]
   23680:	mov	r1, r8
   23684:	beq	23690 <__assert_fail@plt+0x10aa0>
   23688:	b	239f4 <__assert_fail@plt+0x10e04>
   2368c:	mov	r1, r8
   23690:	ldrb	r0, [sp, #160]	; 0xa0
   23694:	add	r6, r8, #1
   23698:	str	r1, [sp, #20]
   2369c:	cmp	r0, #0
   236a0:	ldrbne	r0, [fp, #-64]	; 0xffffffc0
   236a4:	cmpne	r0, #0
   236a8:	bne	236d4 <__assert_fail@plt+0x10ae4>
   236ac:	ldr	r2, [sp, #156]	; 0x9c
   236b0:	ldr	r0, [fp, #-68]	; 0xffffffbc
   236b4:	cmp	r2, r0
   236b8:	bne	2386c <__assert_fail@plt+0x10c7c>
   236bc:	ldr	r1, [fp, #-72]	; 0xffffffb8
   236c0:	ldr	r0, [sp, #152]	; 0x98
   236c4:	bl	128a8 <bcmp@plt>
   236c8:	cmp	r0, #0
   236cc:	bne	2386c <__assert_fail@plt+0x10c7c>
   236d0:	b	236e4 <__assert_fail@plt+0x10af4>
   236d4:	ldr	r0, [fp, #-60]	; 0xffffffc4
   236d8:	ldr	r1, [sp, #164]	; 0xa4
   236dc:	cmp	r1, r0
   236e0:	bne	2386c <__assert_fail@plt+0x10c7c>
   236e4:	str	r9, [sp, #4]
   236e8:	add	r1, sp, #136	; 0x88
   236ec:	add	r0, sp, #80	; 0x50
   236f0:	mov	ip, #0
   236f4:	ldm	r1!, {r2, r3, r5, r6}
   236f8:	stmia	r0!, {r2, r3, r5, r6}
   236fc:	ldm	r1!, {r2, r3, r4, r5, r6}
   23700:	stmia	r0!, {r2, r3, r4, r5, r6}
   23704:	ldm	r1, {r2, r3, r4, r5, r6}
   23708:	stm	r0, {r2, r3, r4, r5, r6}
   2370c:	strb	ip, [sp, #92]	; 0x5c
   23710:	mov	r4, #0
   23714:	ldr	r0, [sp, #12]
   23718:	ldr	r1, [sp, #100]	; 0x64
   2371c:	str	r0, [sp, #40]	; 0x28
   23720:	ldr	r0, [sp, #96]	; 0x60
   23724:	strb	ip, [sp, #24]
   23728:	add	r0, r0, r1
   2372c:	str	r0, [sp, #96]	; 0x60
   23730:	ldr	r0, [sp, #8]
   23734:	str	ip, [r0]
   23738:	str	ip, [r0, #4]
   2373c:	add	r0, sp, #24
   23740:	strb	ip, [sp, #36]	; 0x24
   23744:	bl	242a8 <__assert_fail@plt+0x116b8>
   23748:	ldrb	r0, [sp, #48]	; 0x30
   2374c:	cmp	r0, #0
   23750:	beq	23760 <__assert_fail@plt+0x10b70>
   23754:	ldr	r0, [sp, #52]	; 0x34
   23758:	cmp	r0, #0
   2375c:	beq	239fc <__assert_fail@plt+0x10e0c>
   23760:	strb	r4, [sp, #36]	; 0x24
   23764:	ldr	r0, [sp, #40]	; 0x28
   23768:	ldr	r1, [sp, #44]	; 0x2c
   2376c:	add	r0, r0, r1
   23770:	str	r0, [sp, #40]	; 0x28
   23774:	add	r0, sp, #24
   23778:	bl	242a8 <__assert_fail@plt+0x116b8>
   2377c:	ldrb	r0, [sp, #48]	; 0x30
   23780:	add	r5, sp, #80	; 0x50
   23784:	cmp	r0, #0
   23788:	beq	23798 <__assert_fail@plt+0x10ba8>
   2378c:	ldr	r0, [sp, #52]	; 0x34
   23790:	cmp	r0, #0
   23794:	beq	239e4 <__assert_fail@plt+0x10df4>
   23798:	add	r6, r8, #2
   2379c:	mov	r0, r5
   237a0:	bl	242a8 <__assert_fail@plt+0x116b8>
   237a4:	ldr	r0, [sp, #108]	; 0x6c
   237a8:	ldrb	r1, [sp, #104]	; 0x68
   237ac:	cmp	r0, #0
   237b0:	bne	237bc <__assert_fail@plt+0x10bcc>
   237b4:	cmp	r1, #0
   237b8:	bne	239d4 <__assert_fail@plt+0x10de4>
   237bc:	cmp	r1, #0
   237c0:	ldrbne	r1, [sp, #48]	; 0x30
   237c4:	cmpne	r1, #0
   237c8:	bne	23804 <__assert_fail@plt+0x10c14>
   237cc:	ldr	r4, [sp, #100]	; 0x64
   237d0:	ldr	r0, [sp, #44]	; 0x2c
   237d4:	cmp	r4, r0
   237d8:	bne	23864 <__assert_fail@plt+0x10c74>
   237dc:	ldr	r8, [sp, #40]	; 0x28
   237e0:	ldr	r9, [sp, #96]	; 0x60
   237e4:	mov	r2, r4
   237e8:	mov	r0, r9
   237ec:	mov	r1, r8
   237f0:	bl	128a8 <bcmp@plt>
   237f4:	cmp	r0, #0
   237f8:	mov	r0, r4
   237fc:	beq	23820 <__assert_fail@plt+0x10c30>
   23800:	b	23864 <__assert_fail@plt+0x10c74>
   23804:	ldr	r1, [sp, #52]	; 0x34
   23808:	cmp	r0, r1
   2380c:	bne	23864 <__assert_fail@plt+0x10c74>
   23810:	ldr	r8, [sp, #40]	; 0x28
   23814:	ldr	r4, [sp, #44]	; 0x2c
   23818:	ldr	r9, [sp, #96]	; 0x60
   2381c:	ldr	r0, [sp, #100]	; 0x64
   23820:	mov	r1, #0
   23824:	add	r0, r9, r0
   23828:	strb	r1, [sp, #92]	; 0x5c
   2382c:	str	r0, [sp, #96]	; 0x60
   23830:	add	r0, r8, r4
   23834:	strb	r1, [sp, #36]	; 0x24
   23838:	str	r0, [sp, #40]	; 0x28
   2383c:	add	r0, sp, #24
   23840:	bl	242a8 <__assert_fail@plt+0x116b8>
   23844:	ldrb	r0, [sp, #48]	; 0x30
   23848:	add	r6, r6, #1
   2384c:	cmp	r0, #0
   23850:	beq	2379c <__assert_fail@plt+0x10bac>
   23854:	ldr	r0, [sp, #52]	; 0x34
   23858:	cmp	r0, #0
   2385c:	bne	2379c <__assert_fail@plt+0x10bac>
   23860:	b	239e4 <__assert_fail@plt+0x10df4>
   23864:	ldr	r9, [sp, #4]
   23868:	mov	r5, #0
   2386c:	mov	r4, #0
   23870:	add	r9, r9, #1
   23874:	strb	r4, [sp, #148]	; 0x94
   23878:	ldr	r0, [sp, #152]	; 0x98
   2387c:	ldr	r1, [sp, #156]	; 0x9c
   23880:	add	r0, r0, r1
   23884:	str	r0, [sp, #152]	; 0x98
   23888:	add	r0, sp, #136	; 0x88
   2388c:	bl	242a8 <__assert_fail@plt+0x116b8>
   23890:	ldrb	r0, [sp, #160]	; 0xa0
   23894:	ldr	r1, [sp, #20]
   23898:	cmp	r0, #0
   2389c:	beq	235d4 <__assert_fail@plt+0x109e4>
   238a0:	ldr	r0, [sp, #164]	; 0xa4
   238a4:	cmp	r0, #0
   238a8:	bne	235d4 <__assert_fail@plt+0x109e4>
   238ac:	b	239d8 <__assert_fail@plt+0x10de8>
   238b0:	ldrb	r5, [r7]
   238b4:	cmp	r5, #0
   238b8:	beq	239cc <__assert_fail@plt+0x10ddc>
   238bc:	ldrb	r9, [sl]
   238c0:	cmp	r9, #0
   238c4:	beq	239d4 <__assert_fail@plt+0x10de4>
   238c8:	mov	lr, #1
   238cc:	mov	ip, #0
   238d0:	mov	r3, r7
   238d4:	mov	r6, #0
   238d8:	mov	r8, #0
   238dc:	add	r0, r8, r8, lsl #2
   238e0:	cmp	r6, r0
   238e4:	bcc	23974 <__assert_fail@plt+0x10d84>
   238e8:	tst	lr, #1
   238ec:	beq	23974 <__assert_fail@plt+0x10d84>
   238f0:	cmp	r8, #10
   238f4:	bcc	23974 <__assert_fail@plt+0x10d84>
   238f8:	cmp	r3, #0
   238fc:	beq	2393c <__assert_fail@plt+0x10d4c>
   23900:	sub	r1, r6, ip
   23904:	mov	r0, r3
   23908:	str	r6, [sp, #20]
   2390c:	mov	r6, r5
   23910:	mov	r4, lr
   23914:	mov	r5, r3
   23918:	bl	129e0 <strnlen@plt>
   2391c:	mov	r3, r5
   23920:	mov	r5, r6
   23924:	ldr	r6, [sp, #20]
   23928:	mov	lr, r4
   2392c:	ldrb	r0, [r3, r0]!
   23930:	mov	ip, r6
   23934:	cmp	r0, #0
   23938:	bne	23974 <__assert_fail@plt+0x10d84>
   2393c:	mov	r0, r7
   23940:	mov	r4, ip
   23944:	bl	128c0 <strlen@plt>
   23948:	mov	r2, r0
   2394c:	mov	r0, sl
   23950:	mov	r1, r7
   23954:	sub	r3, fp, #88	; 0x58
   23958:	bl	23df8 <__assert_fail@plt+0x11208>
   2395c:	cmp	r0, #0
   23960:	bne	239ec <__assert_fail@plt+0x10dfc>
   23964:	ldrb	r9, [sl]
   23968:	mov	lr, #0
   2396c:	mov	r3, #0
   23970:	mov	ip, r4
   23974:	uxtb	r0, r9
   23978:	cmp	r0, r5
   2397c:	bne	239b0 <__assert_fail@plt+0x10dc0>
   23980:	mov	r0, #1
   23984:	ldrb	r1, [r7, r0]
   23988:	cmp	r1, #0
   2398c:	beq	239cc <__assert_fail@plt+0x10ddc>
   23990:	ldrb	r2, [sl, r0]
   23994:	cmp	r2, #0
   23998:	beq	239d4 <__assert_fail@plt+0x10de4>
   2399c:	add	r0, r0, #1
   239a0:	cmp	r2, r1
   239a4:	beq	23984 <__assert_fail@plt+0x10d94>
   239a8:	add	r6, r6, r0
   239ac:	b	239b4 <__assert_fail@plt+0x10dc4>
   239b0:	add	r6, r6, #1
   239b4:	ldrb	r9, [sl, #1]!
   239b8:	add	r8, r8, #1
   239bc:	mov	r4, #0
   239c0:	cmp	r9, #0
   239c4:	bne	238dc <__assert_fail@plt+0x10cec>
   239c8:	b	239d8 <__assert_fail@plt+0x10de8>
   239cc:	mov	r4, sl
   239d0:	b	239d8 <__assert_fail@plt+0x10de8>
   239d4:	mov	r4, #0
   239d8:	mov	r0, r4
   239dc:	sub	sp, fp, #28
   239e0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   239e4:	ldr	r4, [sp, #152]	; 0x98
   239e8:	b	239d8 <__assert_fail@plt+0x10de8>
   239ec:	ldr	r4, [fp, #-88]	; 0xffffffa8
   239f0:	b	239d8 <__assert_fail@plt+0x10de8>
   239f4:	ldr	r4, [sp, #80]	; 0x50
   239f8:	b	239d8 <__assert_fail@plt+0x10de8>
   239fc:	bl	12b9c <abort@plt>
   23a00:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   23a04:	add	fp, sp, #28
   23a08:	sub	sp, sp, #132	; 0x84
   23a0c:	mov	r4, r0
   23a10:	mov	r0, r1
   23a14:	mov	r8, r2
   23a18:	mov	r7, r1
   23a1c:	bl	3c98c <__assert_fail@plt+0x29d9c>
   23a20:	mov	sl, r0
   23a24:	movw	r0, #47662	; 0xba2e
   23a28:	mov	r5, #0
   23a2c:	movt	r0, #744	; 0x2e8
   23a30:	cmp	sl, r0
   23a34:	bhi	23de8 <__assert_fail@plt+0x111f8>
   23a38:	mov	r0, #44	; 0x2c
   23a3c:	mul	r0, sl, r0
   23a40:	cmp	r0, #4016	; 0xfb0
   23a44:	bhi	23a64 <__assert_fail@plt+0x10e74>
   23a48:	add	r0, r0, #22
   23a4c:	bic	r0, r0, #7
   23a50:	sub	r0, sp, r0
   23a54:	add	r1, r0, #15
   23a58:	bic	r9, r1, #15
   23a5c:	mov	sp, r0
   23a60:	b	23a6c <__assert_fail@plt+0x10e7c>
   23a64:	bl	3c848 <__assert_fail@plt+0x29c58>
   23a68:	mov	r9, r0
   23a6c:	cmp	r9, #0
   23a70:	beq	23de8 <__assert_fail@plt+0x111f8>
   23a74:	sub	r6, fp, #88	; 0x58
   23a78:	str	r4, [fp, #-160]	; 0xffffff60
   23a7c:	mov	r4, #0
   23a80:	mov	r0, r6
   23a84:	str	r4, [fp, #-80]	; 0xffffffb0
   23a88:	str	r4, [fp, #-84]	; 0xffffffac
   23a8c:	strb	r4, [fp, #-76]	; 0xffffffb4
   23a90:	strb	r4, [fp, #-88]	; 0xffffffa8
   23a94:	str	r7, [fp, #-72]	; 0xffffffb8
   23a98:	bl	242a8 <__assert_fail@plt+0x116b8>
   23a9c:	add	r0, sl, sl, lsl #2
   23aa0:	add	r3, r9, r0, lsl #3
   23aa4:	ldrb	r0, [fp, #-64]	; 0xffffffc0
   23aa8:	str	r3, [fp, #-148]	; 0xffffff6c
   23aac:	cmp	r0, #0
   23ab0:	beq	23ac0 <__assert_fail@plt+0x10ed0>
   23ab4:	ldr	r0, [fp, #-60]	; 0xffffffc4
   23ab8:	cmp	r0, #0
   23abc:	beq	23b44 <__assert_fail@plt+0x10f54>
   23ac0:	add	r7, r9, #16
   23ac4:	add	r5, r6, #32
   23ac8:	ldr	r0, [fp, #-72]	; 0xffffffb8
   23acc:	cmp	r0, r5
   23ad0:	bne	23ae8 <__assert_fail@plt+0x10ef8>
   23ad4:	ldr	r2, [fp, #-68]	; 0xffffffbc
   23ad8:	mov	r0, r7
   23adc:	mov	r1, r5
   23ae0:	bl	125f0 <memcpy@plt>
   23ae4:	mov	r0, r7
   23ae8:	str	r0, [r7, #-16]
   23aec:	ldr	r0, [fp, #-68]	; 0xffffffbc
   23af0:	str	r0, [r7, #-12]
   23af4:	ldrb	r0, [fp, #-64]	; 0xffffffc0
   23af8:	strb	r0, [r7, #-8]
   23afc:	cmp	r0, #0
   23b00:	ldrne	r0, [fp, #-60]	; 0xffffffc4
   23b04:	strne	r0, [r7, #-4]
   23b08:	strb	r4, [fp, #-76]	; 0xffffffb4
   23b0c:	ldr	r0, [fp, #-72]	; 0xffffffb8
   23b10:	ldr	r1, [fp, #-68]	; 0xffffffbc
   23b14:	add	r0, r0, r1
   23b18:	str	r0, [fp, #-72]	; 0xffffffb8
   23b1c:	mov	r0, r6
   23b20:	bl	242a8 <__assert_fail@plt+0x116b8>
   23b24:	ldrb	r1, [fp, #-64]	; 0xffffffc0
   23b28:	ldr	r0, [fp, #-60]	; 0xffffffc4
   23b2c:	ldr	r3, [fp, #-148]	; 0xffffff6c
   23b30:	add	r7, r7, #40	; 0x28
   23b34:	cmp	r1, #0
   23b38:	beq	23ac8 <__assert_fail@plt+0x10ed8>
   23b3c:	cmp	r0, #0
   23b40:	bne	23ac8 <__assert_fail@plt+0x10ed8>
   23b44:	mov	r0, #1
   23b48:	cmp	sl, #3
   23b4c:	str	r8, [fp, #-156]	; 0xffffff64
   23b50:	str	sl, [fp, #-152]	; 0xffffff68
   23b54:	str	r0, [r3, #4]
   23b58:	bcc	23c18 <__assert_fail@plt+0x11028>
   23b5c:	mov	r4, #2
   23b60:	mov	r5, #0
   23b64:	add	r0, r4, r4, lsl #2
   23b68:	add	r0, r9, r0, lsl #3
   23b6c:	ldrb	r8, [r0, #-32]	; 0xffffffe0
   23b70:	sub	sl, r0, #40	; 0x28
   23b74:	sub	r6, r0, #36	; 0x24
   23b78:	sub	r7, r0, #28
   23b7c:	cmp	r8, #0
   23b80:	beq	23bac <__assert_fail@plt+0x10fbc>
   23b84:	add	r0, r5, r5, lsl #2
   23b88:	add	r0, r9, r0, lsl #3
   23b8c:	ldrb	r1, [r0, #8]
   23b90:	cmp	r1, #0
   23b94:	beq	23bac <__assert_fail@plt+0x10fbc>
   23b98:	ldr	r0, [r0, #12]
   23b9c:	ldr	r1, [r7]
   23ba0:	cmp	r1, r0
   23ba4:	bne	23bdc <__assert_fail@plt+0x10fec>
   23ba8:	b	23bfc <__assert_fail@plt+0x1100c>
   23bac:	add	r0, r5, r5, lsl #2
   23bb0:	ldr	r2, [r6]
   23bb4:	add	r1, r9, r0, lsl #3
   23bb8:	ldr	r1, [r1, #4]
   23bbc:	cmp	r2, r1
   23bc0:	bne	23bdc <__assert_fail@plt+0x10fec>
   23bc4:	ldr	r1, [r9, r0, lsl #3]
   23bc8:	ldr	r0, [sl]
   23bcc:	bl	128a8 <bcmp@plt>
   23bd0:	ldr	r3, [fp, #-148]	; 0xffffff6c
   23bd4:	cmp	r0, #0
   23bd8:	beq	23bfc <__assert_fail@plt+0x1100c>
   23bdc:	cmp	r5, #0
   23be0:	beq	23bf0 <__assert_fail@plt+0x11000>
   23be4:	ldr	r0, [r3, r5, lsl #2]
   23be8:	sub	r5, r5, r0
   23bec:	b	23b7c <__assert_fail@plt+0x10f8c>
   23bf0:	mov	r5, #0
   23bf4:	mov	r0, r4
   23bf8:	b	23c04 <__assert_fail@plt+0x11014>
   23bfc:	add	r5, r5, #1
   23c00:	sub	r0, r4, r5
   23c04:	str	r0, [r3, r4, lsl #2]
   23c08:	ldr	r0, [fp, #-152]	; 0xffffff68
   23c0c:	add	r4, r4, #1
   23c10:	cmp	r4, r0
   23c14:	bne	23b64 <__assert_fail@plt+0x10f74>
   23c18:	ldr	r8, [fp, #-156]	; 0xffffff64
   23c1c:	ldr	r0, [fp, #-160]	; 0xffffff60
   23c20:	mov	r6, #0
   23c24:	str	r6, [r8]
   23c28:	str	r6, [fp, #-80]	; 0xffffffb0
   23c2c:	str	r6, [fp, #-84]	; 0xffffffac
   23c30:	strb	r6, [fp, #-76]	; 0xffffffb4
   23c34:	strb	r6, [fp, #-88]	; 0xffffffa8
   23c38:	str	r6, [fp, #-136]	; 0xffffff78
   23c3c:	str	r6, [fp, #-140]	; 0xffffff74
   23c40:	str	r0, [fp, #-128]	; 0xffffff80
   23c44:	str	r0, [fp, #-72]	; 0xffffffb8
   23c48:	sub	r0, fp, #144	; 0x90
   23c4c:	strb	r6, [fp, #-132]	; 0xffffff7c
   23c50:	strb	r6, [fp, #-144]	; 0xffffff70
   23c54:	bl	242a8 <__assert_fail@plt+0x116b8>
   23c58:	ldr	r0, [fp, #-116]	; 0xffffff8c
   23c5c:	ldrb	r1, [fp, #-120]	; 0xffffff88
   23c60:	cmp	r0, #0
   23c64:	bne	23c70 <__assert_fail@plt+0x11080>
   23c68:	cmp	r1, #0
   23c6c:	bne	23ddc <__assert_fail@plt+0x111ec>
   23c70:	clz	r1, r1
   23c74:	sub	r4, fp, #88	; 0x58
   23c78:	mov	sl, #0
   23c7c:	lsr	r1, r1, #5
   23c80:	add	r2, sl, sl, lsl #2
   23c84:	tst	r1, #1
   23c88:	add	r3, r9, r2, lsl #3
   23c8c:	bne	23cb4 <__assert_fail@plt+0x110c4>
   23c90:	ldrb	r1, [r3, #8]
   23c94:	cmp	r1, #0
   23c98:	beq	23cb4 <__assert_fail@plt+0x110c4>
   23c9c:	ldr	r1, [r3, #12]
   23ca0:	cmp	r1, r0
   23ca4:	bne	23ce0 <__assert_fail@plt+0x110f0>
   23ca8:	ldr	r7, [fp, #-128]	; 0xffffff80
   23cac:	ldr	r5, [fp, #-124]	; 0xffffff84
   23cb0:	b	23d3c <__assert_fail@plt+0x1114c>
   23cb4:	ldr	r5, [r3, #4]
   23cb8:	ldr	r0, [fp, #-124]	; 0xffffff84
   23cbc:	cmp	r5, r0
   23cc0:	bne	23ce0 <__assert_fail@plt+0x110f0>
   23cc4:	ldr	r0, [r9, r2, lsl #3]
   23cc8:	ldr	r7, [fp, #-128]	; 0xffffff80
   23ccc:	mov	r2, r5
   23cd0:	mov	r1, r7
   23cd4:	bl	128a8 <bcmp@plt>
   23cd8:	cmp	r0, #0
   23cdc:	beq	23d3c <__assert_fail@plt+0x1114c>
   23ce0:	cmp	sl, #0
   23ce4:	beq	23d5c <__assert_fail@plt+0x1116c>
   23ce8:	ldr	r0, [fp, #-148]	; 0xffffff6c
   23cec:	ldr	r5, [r0, sl, lsl #2]
   23cf0:	sub	sl, sl, r5
   23cf4:	cmp	r5, #0
   23cf8:	beq	23da8 <__assert_fail@plt+0x111b8>
   23cfc:	mov	r0, r4
   23d00:	bl	242a8 <__assert_fail@plt+0x116b8>
   23d04:	ldrb	r0, [fp, #-64]	; 0xffffffc0
   23d08:	cmp	r0, #0
   23d0c:	beq	23d1c <__assert_fail@plt+0x1112c>
   23d10:	ldr	r0, [fp, #-60]	; 0xffffffc4
   23d14:	cmp	r0, #0
   23d18:	beq	23df4 <__assert_fail@plt+0x11204>
   23d1c:	strb	r6, [fp, #-76]	; 0xffffffb4
   23d20:	subs	r5, r5, #1
   23d24:	ldr	r0, [fp, #-72]	; 0xffffffb8
   23d28:	ldr	r1, [fp, #-68]	; 0xffffffbc
   23d2c:	add	r0, r0, r1
   23d30:	str	r0, [fp, #-72]	; 0xffffffb8
   23d34:	bne	23cfc <__assert_fail@plt+0x1110c>
   23d38:	b	23da8 <__assert_fail@plt+0x111b8>
   23d3c:	add	r0, r7, r5
   23d40:	strb	r6, [fp, #-132]	; 0xffffff7c
   23d44:	add	sl, sl, #1
   23d48:	str	r0, [fp, #-128]	; 0xffffff80
   23d4c:	ldr	r0, [fp, #-152]	; 0xffffff68
   23d50:	cmp	sl, r0
   23d54:	bne	23da8 <__assert_fail@plt+0x111b8>
   23d58:	b	23dd4 <__assert_fail@plt+0x111e4>
   23d5c:	mov	r0, r4
   23d60:	bl	242a8 <__assert_fail@plt+0x116b8>
   23d64:	ldrb	r0, [fp, #-64]	; 0xffffffc0
   23d68:	cmp	r0, #0
   23d6c:	beq	23d7c <__assert_fail@plt+0x1118c>
   23d70:	ldr	r0, [fp, #-60]	; 0xffffffc4
   23d74:	cmp	r0, #0
   23d78:	beq	23df4 <__assert_fail@plt+0x11204>
   23d7c:	mov	sl, #0
   23d80:	strb	sl, [fp, #-76]	; 0xffffffb4
   23d84:	strb	sl, [fp, #-132]	; 0xffffff7c
   23d88:	ldr	r0, [fp, #-72]	; 0xffffffb8
   23d8c:	ldr	r1, [fp, #-68]	; 0xffffffbc
   23d90:	add	r0, r0, r1
   23d94:	ldr	r1, [fp, #-124]	; 0xffffff84
   23d98:	str	r0, [fp, #-72]	; 0xffffffb8
   23d9c:	ldr	r0, [fp, #-128]	; 0xffffff80
   23da0:	add	r0, r0, r1
   23da4:	str	r0, [fp, #-128]	; 0xffffff80
   23da8:	sub	r0, fp, #144	; 0x90
   23dac:	bl	242a8 <__assert_fail@plt+0x116b8>
   23db0:	ldrb	r2, [fp, #-120]	; 0xffffff88
   23db4:	clz	r0, r2
   23db8:	lsr	r1, r0, #5
   23dbc:	ldr	r0, [fp, #-116]	; 0xffffff8c
   23dc0:	cmp	r0, #0
   23dc4:	bne	23c80 <__assert_fail@plt+0x11090>
   23dc8:	cmp	r2, #0
   23dcc:	beq	23c80 <__assert_fail@plt+0x11090>
   23dd0:	b	23ddc <__assert_fail@plt+0x111ec>
   23dd4:	ldr	r0, [fp, #-72]	; 0xffffffb8
   23dd8:	str	r0, [r8]
   23ddc:	mov	r0, r9
   23de0:	bl	3c8b0 <__assert_fail@plt+0x29cc0>
   23de4:	mov	r5, #1
   23de8:	mov	r0, r5
   23dec:	sub	sp, fp, #28
   23df0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   23df4:	bl	12b9c <abort@plt>
   23df8:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   23dfc:	add	fp, sp, #24
   23e00:	mov	r4, #0
   23e04:	cmn	r2, #-536870911	; 0xe0000001
   23e08:	bhi	23f34 <__assert_fail@plt+0x11344>
   23e0c:	mov	r7, r0
   23e10:	lsl	r0, r2, #2
   23e14:	mov	r8, r3
   23e18:	mov	r5, r2
   23e1c:	mov	r6, r1
   23e20:	cmp	r0, #4016	; 0xfb0
   23e24:	bhi	23e44 <__assert_fail@plt+0x11254>
   23e28:	add	r0, r0, #22
   23e2c:	bic	r0, r0, #7
   23e30:	sub	r1, sp, r0
   23e34:	add	r0, r1, #15
   23e38:	bic	r0, r0, #15
   23e3c:	mov	sp, r1
   23e40:	b	23e48 <__assert_fail@plt+0x11258>
   23e44:	bl	3c848 <__assert_fail@plt+0x29c58>
   23e48:	cmp	r0, #0
   23e4c:	beq	23f34 <__assert_fail@plt+0x11344>
   23e50:	mov	r1, #1
   23e54:	cmp	r5, #3
   23e58:	str	r1, [r0, #4]
   23e5c:	bcc	23eb8 <__assert_fail@plt+0x112c8>
   23e60:	mov	r1, #2
   23e64:	mov	r2, #0
   23e68:	add	r3, r1, r6
   23e6c:	ldrb	r4, [r6, r2]
   23e70:	ldrb	r3, [r3, #-1]
   23e74:	cmp	r3, r4
   23e78:	beq	23e94 <__assert_fail@plt+0x112a4>
   23e7c:	cmp	r2, #0
   23e80:	beq	23ea0 <__assert_fail@plt+0x112b0>
   23e84:	ldr	r4, [r0, r2, lsl #2]
   23e88:	sub	r2, r2, r4
   23e8c:	ldrb	r4, [r6, r2]
   23e90:	b	23e74 <__assert_fail@plt+0x11284>
   23e94:	add	r2, r2, #1
   23e98:	sub	r3, r1, r2
   23e9c:	b	23ea8 <__assert_fail@plt+0x112b8>
   23ea0:	mov	r2, #0
   23ea4:	mov	r3, r1
   23ea8:	str	r3, [r0, r1, lsl #2]
   23eac:	add	r1, r1, #1
   23eb0:	cmp	r1, r5
   23eb4:	bne	23e68 <__assert_fail@plt+0x11278>
   23eb8:	mov	r1, #0
   23ebc:	str	r1, [r8]
   23ec0:	ldrb	r3, [r7]
   23ec4:	cmp	r3, #0
   23ec8:	beq	23f2c <__assert_fail@plt+0x1133c>
   23ecc:	mov	r2, r7
   23ed0:	ldrb	r4, [r6, r1]
   23ed4:	uxtb	r3, r3
   23ed8:	cmp	r4, r3
   23edc:	bne	23ef4 <__assert_fail@plt+0x11304>
   23ee0:	add	r1, r1, #1
   23ee4:	cmp	r1, r5
   23ee8:	beq	23f28 <__assert_fail@plt+0x11338>
   23eec:	add	r7, r7, #1
   23ef0:	b	23f18 <__assert_fail@plt+0x11328>
   23ef4:	cmp	r1, #0
   23ef8:	beq	23f0c <__assert_fail@plt+0x1131c>
   23efc:	ldr	r3, [r0, r1, lsl #2]
   23f00:	sub	r1, r1, r3
   23f04:	add	r2, r2, r3
   23f08:	b	23f18 <__assert_fail@plt+0x11328>
   23f0c:	add	r7, r7, #1
   23f10:	add	r2, r2, #1
   23f14:	mov	r1, #0
   23f18:	ldrb	r3, [r7]
   23f1c:	cmp	r3, #0
   23f20:	bne	23ed0 <__assert_fail@plt+0x112e0>
   23f24:	b	23f2c <__assert_fail@plt+0x1133c>
   23f28:	str	r2, [r8]
   23f2c:	bl	3c8b0 <__assert_fail@plt+0x29cc0>
   23f30:	mov	r4, #1
   23f34:	mov	r0, r4
   23f38:	sub	sp, fp, #24
   23f3c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   23f40:	push	{r4, r5, fp, lr}
   23f44:	add	fp, sp, #8
   23f48:	mov	r4, r1
   23f4c:	mov	r5, r0
   23f50:	bl	128c0 <strlen@plt>
   23f54:	mov	r1, r0
   23f58:	mov	r0, r5
   23f5c:	mov	r2, r4
   23f60:	pop	{r4, r5, fp, lr}
   23f64:	b	23f68 <__assert_fail@plt+0x11378>
   23f68:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   23f6c:	add	fp, sp, #28
   23f70:	sub	sp, sp, #20
   23f74:	mov	r5, r2
   23f78:	mov	r6, r1
   23f7c:	mov	r4, r0
   23f80:	add	r7, r0, r1
   23f84:	bl	12758 <__ctype_get_mb_cur_max@plt>
   23f88:	cmp	r0, #1
   23f8c:	bls	24234 <__assert_fail@plt+0x11644>
   23f90:	cmp	r6, #1
   23f94:	blt	24288 <__assert_fail@plt+0x11698>
   23f98:	and	r2, r5, #1
   23f9c:	and	sl, r5, #2
   23fa0:	mov	r3, #0
   23fa4:	add	r8, sp, #4
   23fa8:	add	r9, sp, #8
   23fac:	mov	r5, #0
   23fb0:	ldrb	r0, [r4]
   23fb4:	sub	r0, r0, #32
   23fb8:	cmp	r0, #94	; 0x5e
   23fbc:	bhi	24158 <__assert_fail@plt+0x11568>
   23fc0:	add	r1, pc, #0
   23fc4:	ldr	pc, [r1, r0, lsl #2]
   23fc8:	andeq	r4, r2, r4, asr #2
   23fcc:	andeq	r4, r2, r4, asr #2
   23fd0:	andeq	r4, r2, r4, asr #2
   23fd4:	andeq	r4, r2, r4, asr #2
   23fd8:	andeq	r4, r2, r8, asr r1
   23fdc:	andeq	r4, r2, r4, asr #2
   23fe0:	andeq	r4, r2, r4, asr #2
   23fe4:	andeq	r4, r2, r4, asr #2
   23fe8:	andeq	r4, r2, r4, asr #2
   23fec:	andeq	r4, r2, r4, asr #2
   23ff0:	andeq	r4, r2, r4, asr #2
   23ff4:	andeq	r4, r2, r4, asr #2
   23ff8:	andeq	r4, r2, r4, asr #2
   23ffc:	andeq	r4, r2, r4, asr #2
   24000:	andeq	r4, r2, r4, asr #2
   24004:	andeq	r4, r2, r4, asr #2
   24008:	andeq	r4, r2, r4, asr #2
   2400c:	andeq	r4, r2, r4, asr #2
   24010:	andeq	r4, r2, r4, asr #2
   24014:	andeq	r4, r2, r4, asr #2
   24018:	andeq	r4, r2, r4, asr #2
   2401c:	andeq	r4, r2, r4, asr #2
   24020:	andeq	r4, r2, r4, asr #2
   24024:	andeq	r4, r2, r4, asr #2
   24028:	andeq	r4, r2, r4, asr #2
   2402c:	andeq	r4, r2, r4, asr #2
   24030:	andeq	r4, r2, r4, asr #2
   24034:	andeq	r4, r2, r4, asr #2
   24038:	andeq	r4, r2, r4, asr #2
   2403c:	andeq	r4, r2, r4, asr #2
   24040:	andeq	r4, r2, r4, asr #2
   24044:	andeq	r4, r2, r4, asr #2
   24048:	andeq	r4, r2, r8, asr r1
   2404c:	andeq	r4, r2, r4, asr #2
   24050:	andeq	r4, r2, r4, asr #2
   24054:	andeq	r4, r2, r4, asr #2
   24058:	andeq	r4, r2, r4, asr #2
   2405c:	andeq	r4, r2, r4, asr #2
   24060:	andeq	r4, r2, r4, asr #2
   24064:	andeq	r4, r2, r4, asr #2
   24068:	andeq	r4, r2, r4, asr #2
   2406c:	andeq	r4, r2, r4, asr #2
   24070:	andeq	r4, r2, r4, asr #2
   24074:	andeq	r4, r2, r4, asr #2
   24078:	andeq	r4, r2, r4, asr #2
   2407c:	andeq	r4, r2, r4, asr #2
   24080:	andeq	r4, r2, r4, asr #2
   24084:	andeq	r4, r2, r4, asr #2
   24088:	andeq	r4, r2, r4, asr #2
   2408c:	andeq	r4, r2, r4, asr #2
   24090:	andeq	r4, r2, r4, asr #2
   24094:	andeq	r4, r2, r4, asr #2
   24098:	andeq	r4, r2, r4, asr #2
   2409c:	andeq	r4, r2, r4, asr #2
   240a0:	andeq	r4, r2, r4, asr #2
   240a4:	andeq	r4, r2, r4, asr #2
   240a8:	andeq	r4, r2, r4, asr #2
   240ac:	andeq	r4, r2, r4, asr #2
   240b0:	andeq	r4, r2, r4, asr #2
   240b4:	andeq	r4, r2, r4, asr #2
   240b8:	andeq	r4, r2, r4, asr #2
   240bc:	andeq	r4, r2, r4, asr #2
   240c0:	andeq	r4, r2, r4, asr #2
   240c4:	andeq	r4, r2, r4, asr #2
   240c8:	andeq	r4, r2, r8, asr r1
   240cc:	andeq	r4, r2, r4, asr #2
   240d0:	andeq	r4, r2, r4, asr #2
   240d4:	andeq	r4, r2, r4, asr #2
   240d8:	andeq	r4, r2, r4, asr #2
   240dc:	andeq	r4, r2, r4, asr #2
   240e0:	andeq	r4, r2, r4, asr #2
   240e4:	andeq	r4, r2, r4, asr #2
   240e8:	andeq	r4, r2, r4, asr #2
   240ec:	andeq	r4, r2, r4, asr #2
   240f0:	andeq	r4, r2, r4, asr #2
   240f4:	andeq	r4, r2, r4, asr #2
   240f8:	andeq	r4, r2, r4, asr #2
   240fc:	andeq	r4, r2, r4, asr #2
   24100:	andeq	r4, r2, r4, asr #2
   24104:	andeq	r4, r2, r4, asr #2
   24108:	andeq	r4, r2, r4, asr #2
   2410c:	andeq	r4, r2, r4, asr #2
   24110:	andeq	r4, r2, r4, asr #2
   24114:	andeq	r4, r2, r4, asr #2
   24118:	andeq	r4, r2, r4, asr #2
   2411c:	andeq	r4, r2, r4, asr #2
   24120:	andeq	r4, r2, r4, asr #2
   24124:	andeq	r4, r2, r4, asr #2
   24128:	andeq	r4, r2, r4, asr #2
   2412c:	andeq	r4, r2, r4, asr #2
   24130:	andeq	r4, r2, r4, asr #2
   24134:	andeq	r4, r2, r4, asr #2
   24138:	andeq	r4, r2, r4, asr #2
   2413c:	andeq	r4, r2, r4, asr #2
   24140:	andeq	r4, r2, r4, asr #2
   24144:	add	r5, r5, #1
   24148:	add	r4, r4, #1
   2414c:	cmp	r4, r7
   24150:	bcc	23fb0 <__assert_fail@plt+0x113c0>
   24154:	b	2429c <__assert_fail@plt+0x116ac>
   24158:	str	r2, [sp]
   2415c:	str	r3, [sp, #12]
   24160:	str	r3, [sp, #8]
   24164:	sub	r2, r7, r4
   24168:	mov	r0, r8
   2416c:	mov	r1, r4
   24170:	mov	r3, r9
   24174:	bl	2debc <__assert_fail@plt+0x1b2cc>
   24178:	cmp	r0, #0
   2417c:	beq	24198 <__assert_fail@plt+0x115a8>
   24180:	mov	r6, r0
   24184:	cmn	r0, #2
   24188:	beq	24200 <__assert_fail@plt+0x11610>
   2418c:	cmn	r6, #1
   24190:	bne	2419c <__assert_fail@plt+0x115ac>
   24194:	b	24214 <__assert_fail@plt+0x11624>
   24198:	mov	r6, #1
   2419c:	ldr	r0, [sp, #4]
   241a0:	bl	1256c <wcwidth@plt>
   241a4:	cmp	r0, #0
   241a8:	bmi	241c4 <__assert_fail@plt+0x115d4>
   241ac:	mvn	r1, #-2147483648	; 0x80000000
   241b0:	sub	r1, r1, r5
   241b4:	cmp	r0, r1
   241b8:	bgt	24290 <__assert_fail@plt+0x116a0>
   241bc:	add	r5, r0, r5
   241c0:	b	241e8 <__assert_fail@plt+0x115f8>
   241c4:	cmp	sl, #0
   241c8:	bne	24298 <__assert_fail@plt+0x116a8>
   241cc:	ldr	r0, [sp, #4]
   241d0:	bl	126d4 <iswcntrl@plt>
   241d4:	cmp	r0, #0
   241d8:	bne	241e8 <__assert_fail@plt+0x115f8>
   241dc:	cmn	r5, #-2147483647	; 0x80000001
   241e0:	beq	24290 <__assert_fail@plt+0x116a0>
   241e4:	add	r5, r5, #1
   241e8:	mov	r0, r9
   241ec:	add	r4, r4, r6
   241f0:	bl	1262c <mbsinit@plt>
   241f4:	cmp	r0, #0
   241f8:	beq	24164 <__assert_fail@plt+0x11574>
   241fc:	b	24228 <__assert_fail@plt+0x11638>
   24200:	ldr	r0, [sp]
   24204:	mov	r4, r7
   24208:	cmp	r0, #0
   2420c:	beq	24224 <__assert_fail@plt+0x11634>
   24210:	b	24298 <__assert_fail@plt+0x116a8>
   24214:	ldr	r0, [sp]
   24218:	cmp	r0, #0
   2421c:	bne	24298 <__assert_fail@plt+0x116a8>
   24220:	add	r4, r4, #1
   24224:	add	r5, r5, #1
   24228:	ldr	r2, [sp]
   2422c:	mov	r3, #0
   24230:	b	2414c <__assert_fail@plt+0x1155c>
   24234:	cmp	r6, #1
   24238:	blt	24288 <__assert_fail@plt+0x11698>
   2423c:	and	r6, r5, #2
   24240:	bl	1286c <__ctype_b_loc@plt>
   24244:	ldr	r0, [r0]
   24248:	mov	r5, #0
   2424c:	ldrb	r1, [r4], #1
   24250:	add	r1, r0, r1, lsl #1
   24254:	ldrh	r1, [r1]
   24258:	tst	r1, #16384	; 0x4000
   2425c:	bne	24270 <__assert_fail@plt+0x11680>
   24260:	cmp	r6, #0
   24264:	bne	24298 <__assert_fail@plt+0x116a8>
   24268:	tst	r1, #2
   2426c:	bne	2427c <__assert_fail@plt+0x1168c>
   24270:	cmn	r5, #-2147483647	; 0x80000001
   24274:	beq	24290 <__assert_fail@plt+0x116a0>
   24278:	add	r5, r5, #1
   2427c:	cmp	r4, r7
   24280:	bcc	2424c <__assert_fail@plt+0x1165c>
   24284:	b	2429c <__assert_fail@plt+0x116ac>
   24288:	mov	r5, #0
   2428c:	b	2429c <__assert_fail@plt+0x116ac>
   24290:	mvn	r5, #-2147483648	; 0x80000000
   24294:	b	2429c <__assert_fail@plt+0x116ac>
   24298:	mvn	r5, #0
   2429c:	mov	r0, r5
   242a0:	sub	sp, fp, #28
   242a4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   242a8:	push	{r4, r5, r6, r7, fp, lr}
   242ac:	add	fp, sp, #16
   242b0:	mov	r4, r0
   242b4:	ldrb	r0, [r0, #12]
   242b8:	cmp	r0, #0
   242bc:	popne	{r4, r5, r6, r7, fp, pc}
   242c0:	ldrb	r0, [r4]
   242c4:	ldr	r5, [r4, #16]
   242c8:	cmp	r0, #0
   242cc:	beq	24328 <__assert_fail@plt+0x11738>
   242d0:	bl	12758 <__ctype_get_mb_cur_max@plt>
   242d4:	mov	r1, r0
   242d8:	mov	r0, r5
   242dc:	bl	2a164 <__assert_fail@plt+0x17574>
   242e0:	add	r6, r4, #4
   242e4:	add	r7, r4, #28
   242e8:	mov	r2, r0
   242ec:	mov	r1, r5
   242f0:	mov	r0, r7
   242f4:	mov	r3, r6
   242f8:	bl	2debc <__assert_fail@plt+0x1b2cc>
   242fc:	cmn	r0, #2
   24300:	str	r0, [r4, #20]
   24304:	beq	243a4 <__assert_fail@plt+0x117b4>
   24308:	cmp	r0, #0
   2430c:	beq	24360 <__assert_fail@plt+0x11770>
   24310:	cmn	r0, #1
   24314:	bne	24384 <__assert_fail@plt+0x11794>
   24318:	mov	r0, #0
   2431c:	strb	r0, [r4, #24]
   24320:	mov	r0, #1
   24324:	b	243b4 <__assert_fail@plt+0x117c4>
   24328:	ldrb	r0, [r5]
   2432c:	movw	r2, #13688	; 0x3578
   24330:	movt	r2, #4
   24334:	ubfx	r1, r0, #5, #3
   24338:	ldr	r1, [r2, r1, lsl #2]
   2433c:	and	r2, r0, #31
   24340:	mov	r0, #1
   24344:	tst	r1, r0, lsl r2
   24348:	beq	243c4 <__assert_fail@plt+0x117d4>
   2434c:	str	r0, [r4, #20]
   24350:	ldrb	r1, [r5]
   24354:	strb	r0, [r4, #24]
   24358:	str	r1, [r4, #28]
   2435c:	b	243b8 <__assert_fail@plt+0x117c8>
   24360:	mov	r0, #1
   24364:	str	r0, [r4, #20]
   24368:	ldr	r0, [r4, #16]
   2436c:	ldrb	r0, [r0]
   24370:	cmp	r0, #0
   24374:	bne	243e0 <__assert_fail@plt+0x117f0>
   24378:	ldr	r0, [r7]
   2437c:	cmp	r0, #0
   24380:	bne	243f8 <__assert_fail@plt+0x11808>
   24384:	mov	r0, #1
   24388:	strb	r0, [r4, #24]
   2438c:	mov	r0, r6
   24390:	bl	1262c <mbsinit@plt>
   24394:	cmp	r0, #0
   24398:	movne	r0, #0
   2439c:	strbne	r0, [r4]
   243a0:	b	243b8 <__assert_fail@plt+0x117c8>
   243a4:	ldr	r0, [r4, #16]
   243a8:	bl	128c0 <strlen@plt>
   243ac:	mov	r1, #0
   243b0:	strb	r1, [r4, #24]
   243b4:	str	r0, [r4, #20]
   243b8:	mov	r0, #1
   243bc:	strb	r0, [r4, #12]
   243c0:	pop	{r4, r5, r6, r7, fp, pc}
   243c4:	add	r0, r4, #4
   243c8:	bl	1262c <mbsinit@plt>
   243cc:	cmp	r0, #0
   243d0:	beq	24410 <__assert_fail@plt+0x11820>
   243d4:	mov	r0, #1
   243d8:	strb	r0, [r4]
   243dc:	b	242d0 <__assert_fail@plt+0x116e0>
   243e0:	movw	r0, #7691	; 0x1e0b
   243e4:	movw	r1, #7631	; 0x1dcf
   243e8:	movw	r3, #7643	; 0x1ddb
   243ec:	mov	r2, #171	; 0xab
   243f0:	movt	r0, #4
   243f4:	b	24424 <__assert_fail@plt+0x11834>
   243f8:	movw	r0, #7714	; 0x1e22
   243fc:	movw	r1, #7631	; 0x1dcf
   24400:	movw	r3, #7643	; 0x1ddb
   24404:	mov	r2, #172	; 0xac
   24408:	movt	r0, #4
   2440c:	b	24424 <__assert_fail@plt+0x11834>
   24410:	movw	r0, #7608	; 0x1db8
   24414:	movw	r1, #7631	; 0x1dcf
   24418:	movw	r3, #7643	; 0x1ddb
   2441c:	mov	r2, #143	; 0x8f
   24420:	movt	r0, #4
   24424:	movt	r1, #4
   24428:	movt	r3, #4
   2442c:	bl	12bf0 <__assert_fail@plt>
   24430:	ldr	r2, [r0, #16]
   24434:	add	r1, r2, r1
   24438:	str	r1, [r0, #16]
   2443c:	bx	lr
   24440:	push	{r4, r5, r6, sl, fp, lr}
   24444:	add	fp, sp, #16
   24448:	mov	r5, r1
   2444c:	ldrb	r1, [r1]
   24450:	mov	r4, r0
   24454:	strb	r1, [r0], #4
   24458:	cmp	r1, #0
   2445c:	beq	2446c <__assert_fail@plt+0x1187c>
   24460:	ldmib	r5, {r1, r2}
   24464:	stm	r0, {r1, r2}
   24468:	b	24478 <__assert_fail@plt+0x11888>
   2446c:	mov	r1, #0
   24470:	str	r1, [r0]
   24474:	str	r1, [r0, #4]
   24478:	ldrb	r0, [r5, #12]
   2447c:	strb	r0, [r4, #12]
   24480:	add	r0, r5, #32
   24484:	ldr	r1, [r5, #16]
   24488:	cmp	r1, r0
   2448c:	beq	24498 <__assert_fail@plt+0x118a8>
   24490:	mov	r6, r1
   24494:	b	244a8 <__assert_fail@plt+0x118b8>
   24498:	ldr	r2, [r5, #20]
   2449c:	add	r6, r4, #32
   244a0:	mov	r0, r6
   244a4:	bl	125f0 <memcpy@plt>
   244a8:	str	r6, [r4, #16]
   244ac:	ldr	r0, [r5, #20]
   244b0:	str	r0, [r4, #20]
   244b4:	ldrb	r0, [r5, #24]
   244b8:	strb	r0, [r4, #24]
   244bc:	cmp	r0, #0
   244c0:	ldrne	r0, [r5, #28]
   244c4:	strne	r0, [r4, #28]
   244c8:	pop	{r4, r5, r6, sl, fp, pc}
   244cc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   244d0:	add	fp, sp, #28
   244d4:	sub	sp, sp, #4
   244d8:	ldrb	r1, [r0]
   244dc:	mov	r4, r0
   244e0:	and	r0, r1, #248	; 0xf8
   244e4:	cmp	r0, #48	; 0x30
   244e8:	bne	2456c <__assert_fail@plt+0x1197c>
   244ec:	mov	r0, #0
   244f0:	mov	r5, #0
   244f4:	mov	r2, r4
   244f8:	lsl	r3, r5, #3
   244fc:	uxtab	r1, r3, r1
   24500:	sub	r5, r1, #48	; 0x30
   24504:	cmp	r0, r5, lsr #12
   24508:	bne	24800 <__assert_fail@plt+0x11c10>
   2450c:	ldrb	r1, [r2, #1]
   24510:	add	r6, r2, #1
   24514:	and	r2, r1, #248	; 0xf8
   24518:	cmp	r2, #48	; 0x30
   2451c:	mov	r2, r6
   24520:	beq	244f8 <__assert_fail@plt+0x11908>
   24524:	cmp	r1, #0
   24528:	bne	24800 <__assert_fail@plt+0x11c10>
   2452c:	mov	r0, #32
   24530:	bl	2a688 <__assert_fail@plt+0x17a98>
   24534:	mov	r1, #0
   24538:	movw	r2, #317	; 0x13d
   2453c:	and	r3, r5, #3072	; 0xc00
   24540:	movw	r7, #1023	; 0x3ff
   24544:	strb	r1, [r0, #17]
   24548:	strh	r2, [r0]
   2454c:	sub	r2, r6, r4
   24550:	movw	r1, #4095	; 0xfff
   24554:	cmp	r2, #5
   24558:	str	r1, [r0, #4]
   2455c:	str	r5, [r0, #8]
   24560:	orrlt	r1, r3, r7
   24564:	str	r1, [r0, #12]
   24568:	b	24800 <__assert_fail@plt+0x11c10>
   2456c:	movw	r5, #5
   24570:	mov	r2, #1
   24574:	mvn	r3, #42	; 0x2a
   24578:	mov	r7, #1
   2457c:	mov	r0, #1
   24580:	movt	r5, #4
   24584:	uxtab	r6, r3, r1
   24588:	uxtb	r1, r1
   2458c:	cmp	r6, #18
   24590:	bhi	245a0 <__assert_fail@plt+0x119b0>
   24594:	tst	r5, r2, lsl r6
   24598:	mov	r6, #1
   2459c:	bne	245ac <__assert_fail@plt+0x119bc>
   245a0:	cmp	r1, #0
   245a4:	beq	245bc <__assert_fail@plt+0x119cc>
   245a8:	mov	r6, #0
   245ac:	ldrb	r1, [r4, r7]
   245b0:	add	r0, r6, r0
   245b4:	add	r7, r7, #1
   245b8:	b	24584 <__assert_fail@plt+0x11994>
   245bc:	mov	r1, #16
   245c0:	bl	2a758 <__assert_fail@plt+0x17b68>
   245c4:	mov	sl, #0
   245c8:	mov	ip, #1
   245cc:	mvn	lr, #113	; 0x71
   245d0:	mov	r9, #0
   245d4:	mov	r2, #0
   245d8:	ldrb	r6, [r4]
   245dc:	cmp	r6, #110	; 0x6e
   245e0:	bgt	245fc <__assert_fail@plt+0x11a0c>
   245e4:	cmp	r6, #97	; 0x61
   245e8:	beq	24614 <__assert_fail@plt+0x11a24>
   245ec:	cmp	r6, #103	; 0x67
   245f0:	bne	2462c <__assert_fail@plt+0x11a3c>
   245f4:	movw	r3, #1080	; 0x438
   245f8:	b	24620 <__assert_fail@plt+0x11a30>
   245fc:	cmp	r6, #111	; 0x6f
   24600:	beq	2461c <__assert_fail@plt+0x11a2c>
   24604:	mov	r3, #2496	; 0x9c0
   24608:	cmp	r6, #117	; 0x75
   2460c:	beq	24620 <__assert_fail@plt+0x11a30>
   24610:	b	247f8 <__assert_fail@plt+0x11c08>
   24614:	movw	r3, #4095	; 0xfff
   24618:	b	24620 <__assert_fail@plt+0x11a30>
   2461c:	movw	r3, #519	; 0x207
   24620:	orr	r2, r2, r3
   24624:	add	r4, r4, #1
   24628:	b	245d8 <__assert_fail@plt+0x119e8>
   2462c:	sub	r1, r6, #43	; 0x2b
   24630:	cmp	r1, #18
   24634:	bhi	247f8 <__assert_fail@plt+0x11c08>
   24638:	tst	r5, ip, lsl r1
   2463c:	beq	247f8 <__assert_fail@plt+0x11c08>
   24640:	ldrb	r3, [r4, #1]
   24644:	add	r4, r4, #2
   24648:	sub	r1, r3, #48	; 0x30
   2464c:	cmp	r1, #8
   24650:	bcs	246a8 <__assert_fail@plt+0x11ab8>
   24654:	mov	r7, #0
   24658:	lsl	r1, r7, #3
   2465c:	uxtab	r1, r1, r3
   24660:	sub	r7, r1, #48	; 0x30
   24664:	cmp	sl, r7, lsr #12
   24668:	bne	247f8 <__assert_fail@plt+0x11c08>
   2466c:	ldrb	r3, [r4], #1
   24670:	and	r1, r3, #248	; 0xf8
   24674:	cmp	r1, #48	; 0x30
   24678:	beq	24658 <__assert_fail@plt+0x11a68>
   2467c:	cmp	r2, #0
   24680:	bne	247f8 <__assert_fail@plt+0x11c08>
   24684:	sub	r4, r4, #1
   24688:	mov	r8, #1
   2468c:	movw	r2, #4095	; 0xfff
   24690:	cmp	r3, #0
   24694:	beq	246d0 <__assert_fail@plt+0x11ae0>
   24698:	cmp	r3, #44	; 0x2c
   2469c:	movw	r3, #4095	; 0xfff
   246a0:	beq	24778 <__assert_fail@plt+0x11b88>
   246a4:	b	247f8 <__assert_fail@plt+0x11c08>
   246a8:	cmp	r3, #103	; 0x67
   246ac:	beq	246d8 <__assert_fail@plt+0x11ae8>
   246b0:	cmp	r3, #111	; 0x6f
   246b4:	beq	246e8 <__assert_fail@plt+0x11af8>
   246b8:	cmp	r3, #117	; 0x75
   246bc:	bne	246f8 <__assert_fail@plt+0x11b08>
   246c0:	mov	r8, #3
   246c4:	mov	r3, #0
   246c8:	mov	r7, #448	; 0x1c0
   246cc:	b	24778 <__assert_fail@plt+0x11b88>
   246d0:	movw	r3, #4095	; 0xfff
   246d4:	b	24778 <__assert_fail@plt+0x11b88>
   246d8:	mov	r8, #3
   246dc:	mov	r3, #0
   246e0:	mov	r7, #56	; 0x38
   246e4:	b	24778 <__assert_fail@plt+0x11b88>
   246e8:	mov	r8, #3
   246ec:	mov	r3, #0
   246f0:	mov	r7, #7
   246f4:	b	24778 <__assert_fail@plt+0x11b88>
   246f8:	mov	r8, #1
   246fc:	mov	r7, #0
   24700:	uxtab	r1, lr, r3
   24704:	cmp	r1, #6
   24708:	bhi	24738 <__assert_fail@plt+0x11b48>
   2470c:	add	r3, pc, #0
   24710:	ldr	pc, [r3, r1, lsl #2]
   24714:	andeq	r4, r2, r0, lsr r7
   24718:	andeq	r4, r2, ip, asr #14
   2471c:	andeq	r4, r2, r4, asr r7
   24720:	andeq	r4, r2, r0, ror r7
   24724:	andeq	r4, r2, r0, ror r7
   24728:	andeq	r4, r2, ip, asr r7
   2472c:	andeq	r4, r2, r4, ror #14
   24730:	orr	r7, r7, #292	; 0x124
   24734:	b	24768 <__assert_fail@plt+0x11b78>
   24738:	uxtb	r1, r3
   2473c:	cmp	r1, #88	; 0x58
   24740:	bne	24770 <__assert_fail@plt+0x11b80>
   24744:	mov	r8, #2
   24748:	b	24768 <__assert_fail@plt+0x11b78>
   2474c:	orr	r7, r7, #3072	; 0xc00
   24750:	b	24768 <__assert_fail@plt+0x11b78>
   24754:	orr	r7, r7, #512	; 0x200
   24758:	b	24768 <__assert_fail@plt+0x11b78>
   2475c:	orr	r7, r7, #146	; 0x92
   24760:	b	24768 <__assert_fail@plt+0x11b78>
   24764:	orr	r7, r7, #73	; 0x49
   24768:	ldrb	r3, [r4], #1
   2476c:	b	24700 <__assert_fail@plt+0x11b10>
   24770:	sub	r4, r4, #1
   24774:	mov	r3, #0
   24778:	mov	r1, r0
   2477c:	cmp	r3, #0
   24780:	strb	r6, [r1, r9, lsl #4]!
   24784:	stmib	r1, {r2, r7}
   24788:	strb	r8, [r1, #1]
   2478c:	bne	2479c <__assert_fail@plt+0x11bac>
   24790:	cmp	r2, #0
   24794:	andne	r7, r7, r2
   24798:	mov	r3, r7
   2479c:	add	r1, r0, r9, lsl #4
   247a0:	add	r7, r9, #1
   247a4:	str	r3, [r1, #12]
   247a8:	ldrb	r6, [r4]
   247ac:	cmp	r6, #44	; 0x2c
   247b0:	ble	247d0 <__assert_fail@plt+0x11be0>
   247b4:	cmp	r6, #45	; 0x2d
   247b8:	mov	r9, r7
   247bc:	beq	24640 <__assert_fail@plt+0x11a50>
   247c0:	cmp	r6, #61	; 0x3d
   247c4:	mov	r9, r7
   247c8:	beq	24640 <__assert_fail@plt+0x11a50>
   247cc:	b	247f8 <__assert_fail@plt+0x11c08>
   247d0:	cmp	r6, #43	; 0x2b
   247d4:	mov	r9, r7
   247d8:	beq	24640 <__assert_fail@plt+0x11a50>
   247dc:	cmp	r6, #0
   247e0:	beq	24808 <__assert_fail@plt+0x11c18>
   247e4:	cmp	r6, #44	; 0x2c
   247e8:	bne	247f8 <__assert_fail@plt+0x11c08>
   247ec:	add	r4, r4, #1
   247f0:	mov	r9, r7
   247f4:	b	245d4 <__assert_fail@plt+0x119e4>
   247f8:	bl	2bcbc <__assert_fail@plt+0x190cc>
   247fc:	mov	r0, #0
   24800:	sub	sp, fp, #28
   24804:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   24808:	add	r1, r0, r7, lsl #4
   2480c:	mov	r2, #0
   24810:	strb	r2, [r1, #1]
   24814:	b	24800 <__assert_fail@plt+0x11c10>
   24818:	push	{r4, sl, fp, lr}
   2481c:	add	fp, sp, #8
   24820:	sub	sp, sp, #104	; 0x68
   24824:	mov	r1, sp
   24828:	bl	3d1fc <__assert_fail@plt+0x2a60c>
   2482c:	mov	r1, r0
   24830:	mov	r0, #0
   24834:	cmp	r1, #0
   24838:	bne	24864 <__assert_fail@plt+0x11c74>
   2483c:	ldr	r4, [sp, #16]
   24840:	mov	r0, #32
   24844:	bl	2a688 <__assert_fail@plt+0x17a98>
   24848:	mov	r1, #0
   2484c:	strb	r1, [r0, #17]
   24850:	movw	r1, #4095	; 0xfff
   24854:	stmib	r0, {r1, r4}
   24858:	str	r1, [r0, #12]
   2485c:	movw	r1, #317	; 0x13d
   24860:	strh	r1, [r0]
   24864:	sub	sp, fp, #8
   24868:	pop	{r4, sl, fp, pc}
   2486c:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   24870:	add	fp, sp, #24
   24874:	ldrb	r4, [r3, #1]
   24878:	ldr	ip, [fp, #8]
   2487c:	bfc	r0, #12, #20
   24880:	cmp	r4, #0
   24884:	beq	24964 <__assert_fail@plt+0x11d74>
   24888:	cmp	r1, #0
   2488c:	mov	lr, r1
   24890:	add	r3, r3, #8
   24894:	mov	r9, #0
   24898:	movw	r8, #4095	; 0xfff
   2489c:	movwne	lr, #3072	; 0xc00
   248a0:	mov	r5, r3
   248a4:	ldr	r7, [r3, #-4]
   248a8:	ldr	r3, [r3]
   248ac:	uxtb	r4, r4
   248b0:	ldr	r6, [r5, #4]
   248b4:	cmp	r4, #2
   248b8:	bic	r6, lr, r6
   248bc:	beq	248e8 <__assert_fail@plt+0x11cf8>
   248c0:	cmp	r4, #3
   248c4:	bne	248f4 <__assert_fail@plt+0x11d04>
   248c8:	and	r4, r3, r0
   248cc:	tst	r4, #146	; 0x92
   248d0:	mov	r3, r4
   248d4:	orrne	r3, r3, #146	; 0x92
   248d8:	tst	r4, #292	; 0x124
   248dc:	orrne	r3, r3, #292	; 0x124
   248e0:	tst	r4, #73	; 0x49
   248e4:	b	248f0 <__assert_fail@plt+0x11d00>
   248e8:	and	r4, r0, #73	; 0x49
   248ec:	orrs	r4, r4, r1
   248f0:	orrne	r3, r3, #73	; 0x49
   248f4:	cmp	r7, #0
   248f8:	mov	r4, r7
   248fc:	mvneq	r4, r2
   24900:	bic	r4, r4, r6
   24904:	and	r3, r4, r3
   24908:	ldrb	r4, [r5, #-8]
   2490c:	cmp	r4, #43	; 0x2b
   24910:	beq	24940 <__assert_fail@plt+0x11d50>
   24914:	cmp	r4, #45	; 0x2d
   24918:	beq	24948 <__assert_fail@plt+0x11d58>
   2491c:	cmp	r4, #61	; 0x3d
   24920:	bne	24950 <__assert_fail@plt+0x11d60>
   24924:	mvn	r4, r7
   24928:	cmp	r7, #0
   2492c:	orrne	r6, r6, r4
   24930:	and	r0, r6, r0
   24934:	orr	r0, r3, r0
   24938:	bic	r3, r8, r6
   2493c:	b	2494c <__assert_fail@plt+0x11d5c>
   24940:	orr	r0, r3, r0
   24944:	b	2494c <__assert_fail@plt+0x11d5c>
   24948:	bic	r0, r0, r3
   2494c:	orr	r9, r3, r9
   24950:	ldrb	r4, [r5, #9]
   24954:	add	r3, r5, #16
   24958:	cmp	r4, #0
   2495c:	bne	248a0 <__assert_fail@plt+0x11cb0>
   24960:	b	24968 <__assert_fail@plt+0x11d78>
   24964:	mov	r9, #0
   24968:	cmp	ip, #0
   2496c:	strne	r9, [ip]
   24970:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   24974:	push	{fp, lr}
   24978:	mov	fp, sp
   2497c:	mov	r4, r0
   24980:	movw	r0, #17672	; 0x4508
   24984:	movw	r1, #7732	; 0x1e34
   24988:	mov	r2, #5
   2498c:	movt	r0, #5
   24990:	movt	r1, #4
   24994:	ldr	r5, [r0]
   24998:	mov	r0, #0
   2499c:	bl	12674 <dcgettext@plt>
   249a0:	mov	r2, r0
   249a4:	mov	r0, r5
   249a8:	mov	r1, r4
   249ac:	bl	127b8 <error@plt>
   249b0:	bl	12b9c <abort@plt>
   249b4:	push	{fp, lr}
   249b8:	mov	fp, sp
   249bc:	mov	r4, r0
   249c0:	movw	r0, #17672	; 0x4508
   249c4:	movw	r1, #7775	; 0x1e5f
   249c8:	mov	r2, #5
   249cc:	movt	r0, #5
   249d0:	movt	r1, #4
   249d4:	ldr	r5, [r0]
   249d8:	mov	r0, #0
   249dc:	bl	12674 <dcgettext@plt>
   249e0:	mov	r2, r0
   249e4:	mov	r0, r5
   249e8:	mov	r1, r4
   249ec:	bl	127b8 <error@plt>
   249f0:	bl	12b9c <abort@plt>
   249f4:	sub	sp, sp, #4
   249f8:	push	{fp, lr}
   249fc:	mov	fp, sp
   24a00:	sub	sp, sp, #4
   24a04:	str	r3, [fp, #8]
   24a08:	tst	r2, #64	; 0x40
   24a0c:	mov	r3, #0
   24a10:	ldrne	r3, [fp, #8]
   24a14:	bl	128e4 <openat64@plt>
   24a18:	bl	2a1a0 <__assert_fail@plt+0x175b0>
   24a1c:	mov	sp, fp
   24a20:	pop	{fp, lr}
   24a24:	add	sp, sp, #4
   24a28:	bx	lr
   24a2c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   24a30:	add	fp, sp, #28
   24a34:	sub	sp, sp, #372	; 0x174
   24a38:	sub	sp, sp, #1024	; 0x400
   24a3c:	mov	r4, r0
   24a40:	add	r0, r0, #32
   24a44:	mvn	lr, #1
   24a48:	add	r5, sp, #208	; 0xd0
   24a4c:	sub	ip, fp, #92	; 0x5c
   24a50:	mov	r8, #0
   24a54:	mov	sl, #0
   24a58:	mov	r6, #0
   24a5c:	str	r0, [sp, #92]	; 0x5c
   24a60:	sub	r0, fp, #52	; 0x34
   24a64:	add	r1, r0, #1
   24a68:	add	r0, r0, #19
   24a6c:	str	r0, [sp, #140]	; 0x8c
   24a70:	add	r0, r4, #8
   24a74:	str	r1, [sp, #80]	; 0x50
   24a78:	str	r0, [sp, #88]	; 0x58
   24a7c:	add	r0, r4, #40	; 0x28
   24a80:	str	r0, [sp, #76]	; 0x4c
   24a84:	add	r0, r4, #56	; 0x38
   24a88:	str	r0, [sp, #136]	; 0x88
   24a8c:	add	r0, r4, #64	; 0x40
   24a90:	str	r0, [sp, #132]	; 0x84
   24a94:	add	r0, r4, #72	; 0x48
   24a98:	str	r0, [sp, #104]	; 0x68
   24a9c:	add	r0, r4, #80	; 0x50
   24aa0:	str	r0, [sp, #100]	; 0x64
   24aa4:	add	r0, r4, #88	; 0x58
   24aa8:	str	r0, [sp, #68]	; 0x44
   24aac:	mov	r0, #0
   24ab0:	strh	r0, [fp, #-92]	; 0xffffffa4
   24ab4:	movw	r0, #7824	; 0x1e90
   24ab8:	movt	r0, #4
   24abc:	add	r0, r0, #20
   24ac0:	str	r0, [sp, #96]	; 0x60
   24ac4:	mov	r0, #0
   24ac8:	str	r0, [sp, #108]	; 0x6c
   24acc:	mov	r0, #0
   24ad0:	str	r0, [sp, #112]	; 0x70
   24ad4:	mov	r0, #0
   24ad8:	str	r0, [sp, #116]	; 0x74
   24adc:	mov	r0, #0
   24ae0:	str	r0, [sp, #124]	; 0x7c
   24ae4:	mov	r0, #0
   24ae8:	str	r0, [sp, #128]	; 0x80
   24aec:	cmp	r8, #12
   24af0:	beq	264a8 <__assert_fail@plt+0x138b8>
   24af4:	movw	r0, #7880	; 0x1ec8
   24af8:	movt	r0, #4
   24afc:	add	r0, r0, r8
   24b00:	ldrsb	r9, [r0]
   24b04:	cmn	r9, #93	; 0x5d
   24b08:	beq	252c4 <__assert_fail@plt+0x126d4>
   24b0c:	cmn	lr, #2
   24b10:	bne	25250 <__assert_fail@plt+0x12660>
   24b14:	ldr	r0, [r4]
   24b18:	ldrb	r2, [r0]
   24b1c:	sub	r1, r2, #9
   24b20:	cmp	r1, #5
   24b24:	bcs	24b34 <__assert_fail@plt+0x11f44>
   24b28:	add	r0, r0, #1
   24b2c:	str	r0, [r4]
   24b30:	b	24b18 <__assert_fail@plt+0x11f28>
   24b34:	cmp	r2, #32
   24b38:	beq	24b28 <__assert_fail@plt+0x11f38>
   24b3c:	sub	r1, r2, #48	; 0x30
   24b40:	cmp	r1, #10
   24b44:	bcs	24b58 <__assert_fail@plt+0x11f68>
   24b48:	cmp	r2, #45	; 0x2d
   24b4c:	cmpne	r2, #43	; 0x2b
   24b50:	beq	24cb8 <__assert_fail@plt+0x120c8>
   24b54:	b	24d44 <__assert_fail@plt+0x12154>
   24b58:	sub	r1, r2, #40	; 0x28
   24b5c:	cmp	r1, #82	; 0x52
   24b60:	bhi	25220 <__assert_fail@plt+0x12630>
   24b64:	add	r3, pc, #0
   24b68:	ldr	pc, [r3, r1, lsl #2]
   24b6c:	andeq	r4, r2, r8, ror #25
   24b70:	andeq	r5, r2, r0, lsr #4
   24b74:	andeq	r5, r2, r0, lsr #4
   24b78:			; <UNDEFINED> instruction: 0x00024cb8
   24b7c:	andeq	r5, r2, r0, lsr #4
   24b80:			; <UNDEFINED> instruction: 0x00024cb8
   24b84:	andeq	r5, r2, r0, lsr #4
   24b88:	andeq	r5, r2, r0, lsr #4
   24b8c:	andeq	r5, r2, r0, lsr #4
   24b90:	andeq	r5, r2, r0, lsr #4
   24b94:	andeq	r5, r2, r0, lsr #4
   24b98:	andeq	r5, r2, r0, lsr #4
   24b9c:	andeq	r5, r2, r0, lsr #4
   24ba0:	andeq	r5, r2, r0, lsr #4
   24ba4:	andeq	r5, r2, r0, lsr #4
   24ba8:	andeq	r5, r2, r0, lsr #4
   24bac:	andeq	r5, r2, r0, lsr #4
   24bb0:	andeq	r5, r2, r0, lsr #4
   24bb4:	andeq	r5, r2, r0, lsr #4
   24bb8:	andeq	r5, r2, r0, lsr #4
   24bbc:	andeq	r5, r2, r0, lsr #4
   24bc0:	andeq	r5, r2, r0, lsr #4
   24bc4:	andeq	r5, r2, r0, lsr #4
   24bc8:	andeq	r5, r2, r0, lsr #4
   24bcc:	andeq	r5, r2, r0, lsr #4
   24bd0:	andeq	r4, r2, r0, asr #28
   24bd4:	andeq	r4, r2, r0, asr #28
   24bd8:	andeq	r4, r2, r0, asr #28
   24bdc:	andeq	r4, r2, r0, asr #28
   24be0:	andeq	r4, r2, r0, asr #28
   24be4:	andeq	r4, r2, r0, asr #28
   24be8:	andeq	r4, r2, r0, asr #28
   24bec:	andeq	r4, r2, r0, asr #28
   24bf0:	andeq	r4, r2, r0, asr #28
   24bf4:	andeq	r4, r2, r0, asr #28
   24bf8:	andeq	r4, r2, r0, asr #28
   24bfc:	andeq	r4, r2, r0, asr #28
   24c00:	andeq	r4, r2, r0, asr #28
   24c04:	andeq	r4, r2, r0, asr #28
   24c08:	andeq	r4, r2, r0, asr #28
   24c0c:	andeq	r4, r2, r0, asr #28
   24c10:	andeq	r4, r2, r0, asr #28
   24c14:	andeq	r4, r2, r0, asr #28
   24c18:	andeq	r4, r2, r0, asr #28
   24c1c:	andeq	r4, r2, r0, asr #28
   24c20:	andeq	r4, r2, r0, asr #28
   24c24:	andeq	r4, r2, r0, asr #28
   24c28:	andeq	r4, r2, r0, asr #28
   24c2c:	andeq	r4, r2, r0, asr #28
   24c30:	andeq	r4, r2, r0, asr #28
   24c34:	andeq	r4, r2, r0, asr #28
   24c38:	andeq	r5, r2, r0, lsr #4
   24c3c:	andeq	r5, r2, r0, lsr #4
   24c40:	andeq	r5, r2, r0, lsr #4
   24c44:	andeq	r5, r2, r0, lsr #4
   24c48:	andeq	r5, r2, r0, lsr #4
   24c4c:	andeq	r5, r2, r0, lsr #4
   24c50:	andeq	r4, r2, r0, asr #28
   24c54:	andeq	r4, r2, r0, asr #28
   24c58:	andeq	r4, r2, r0, asr #28
   24c5c:	andeq	r4, r2, r0, asr #28
   24c60:	andeq	r4, r2, r0, asr #28
   24c64:	andeq	r4, r2, r0, asr #28
   24c68:	andeq	r4, r2, r0, asr #28
   24c6c:	andeq	r4, r2, r0, asr #28
   24c70:	andeq	r4, r2, r0, asr #28
   24c74:	andeq	r4, r2, r0, asr #28
   24c78:	andeq	r4, r2, r0, asr #28
   24c7c:	andeq	r4, r2, r0, asr #28
   24c80:	andeq	r4, r2, r0, asr #28
   24c84:	andeq	r4, r2, r0, asr #28
   24c88:	andeq	r4, r2, r0, asr #28
   24c8c:	andeq	r4, r2, r0, asr #28
   24c90:	andeq	r4, r2, r0, asr #28
   24c94:	andeq	r4, r2, r0, asr #28
   24c98:	andeq	r4, r2, r0, asr #28
   24c9c:	andeq	r4, r2, r0, asr #28
   24ca0:	andeq	r4, r2, r0, asr #28
   24ca4:	andeq	r4, r2, r0, asr #28
   24ca8:	andeq	r4, r2, r0, asr #28
   24cac:	andeq	r4, r2, r0, asr #28
   24cb0:	andeq	r4, r2, r0, asr #28
   24cb4:	andeq	r4, r2, r0, asr #28
   24cb8:	add	r0, r0, #1
   24cbc:	str	r0, [r4]
   24cc0:	ldrb	r3, [r0]
   24cc4:	sub	r1, r3, #9
   24cc8:	cmp	r1, #5
   24ccc:	bcc	24cb8 <__assert_fail@plt+0x120c8>
   24cd0:	cmp	r3, #32
   24cd4:	beq	24cb8 <__assert_fail@plt+0x120c8>
   24cd8:	sub	r1, r3, #48	; 0x30
   24cdc:	cmp	r1, #9
   24ce0:	bhi	24b18 <__assert_fail@plt+0x11f28>
   24ce4:	b	24d30 <__assert_fail@plt+0x12140>
   24ce8:	mov	r1, #0
   24cec:	mov	r2, r0
   24cf0:	add	r0, r0, #1
   24cf4:	str	r0, [r4]
   24cf8:	ldrb	r2, [r2]
   24cfc:	cmp	r2, #40	; 0x28
   24d00:	beq	24d18 <__assert_fail@plt+0x12128>
   24d04:	cmp	r2, #41	; 0x29
   24d08:	beq	24d20 <__assert_fail@plt+0x12130>
   24d0c:	cmp	r2, #0
   24d10:	bne	24d24 <__assert_fail@plt+0x12134>
   24d14:	b	25278 <__assert_fail@plt+0x12688>
   24d18:	add	r1, r1, #1
   24d1c:	b	24d24 <__assert_fail@plt+0x12134>
   24d20:	sub	r1, r1, #1
   24d24:	cmp	r1, #0
   24d28:	bne	24cec <__assert_fail@plt+0x120fc>
   24d2c:	b	24b18 <__assert_fail@plt+0x11f28>
   24d30:	cmp	r2, #45	; 0x2d
   24d34:	mov	ip, #1
   24d38:	mov	lr, r6
   24d3c:	mvneq	ip, #0
   24d40:	b	24d50 <__assert_fail@plt+0x12160>
   24d44:	mov	lr, r6
   24d48:	mov	ip, #0
   24d4c:	mov	r3, r2
   24d50:	mov	r2, #0
   24d54:	mov	r7, r0
   24d58:	cmn	r2, #1
   24d5c:	ble	24d74 <__assert_fail@plt+0x12184>
   24d60:	movw	r1, #52428	; 0xcccc
   24d64:	movt	r1, #3276	; 0xccc
   24d68:	cmp	r2, r1
   24d6c:	ble	24d88 <__assert_fail@plt+0x12198>
   24d70:	b	251d0 <__assert_fail@plt+0x125e0>
   24d74:	beq	24d88 <__assert_fail@plt+0x12198>
   24d78:	mov	r1, #-2147483648	; 0x80000000
   24d7c:	sdiv	r6, r1, r2
   24d80:	cmp	r6, #10
   24d84:	blt	251d0 <__assert_fail@plt+0x125e0>
   24d88:	mvn	r1, #47	; 0x2f
   24d8c:	cmp	ip, #0
   24d90:	uxtab	r6, r1, r3
   24d94:	uxtb	r3, r3
   24d98:	rsbmi	r6, r3, #48	; 0x30
   24d9c:	add	r3, r2, r2, lsl #2
   24da0:	add	r2, r6, r3, lsl #1
   24da4:	cmp	r2, r3, lsl #1
   24da8:	bvs	251d0 <__assert_fail@plt+0x125e0>
   24dac:	ldrb	r3, [r7, #1]!
   24db0:	sub	r6, r3, #48	; 0x30
   24db4:	cmp	r6, #10
   24db8:	bcc	24d58 <__assert_fail@plt+0x12168>
   24dbc:	orr	r3, r3, #2
   24dc0:	cmp	r3, #46	; 0x2e
   24dc4:	bne	24f38 <__assert_fail@plt+0x12348>
   24dc8:	ldrb	r3, [r7, #1]
   24dcc:	sub	r3, r3, #48	; 0x30
   24dd0:	cmp	r3, #9
   24dd4:	bhi	24f38 <__assert_fail@plt+0x12348>
   24dd8:	add	r6, r7, #2
   24ddc:	mov	r7, #8
   24de0:	mov	r0, r6
   24de4:	ldrb	r1, [r0], #1
   24de8:	sub	r1, r1, #48	; 0x30
   24dec:	cmp	r1, #10
   24df0:	movcc	r6, r0
   24df4:	add	r0, r3, r3, lsl #2
   24df8:	lsl	r3, r0, #1
   24dfc:	addcc	r3, r1, r0, lsl #1
   24e00:	subs	r7, r7, #1
   24e04:	bne	24de0 <__assert_fail@plt+0x121f0>
   24e08:	cmn	ip, #1
   24e0c:	bgt	251a0 <__assert_fail@plt+0x125b0>
   24e10:	ldrb	r7, [r6]
   24e14:	sub	r0, r7, #48	; 0x30
   24e18:	cmp	r0, #9
   24e1c:	bhi	251a0 <__assert_fail@plt+0x125b0>
   24e20:	uxtb	r0, r7
   24e24:	cmp	r0, #48	; 0x30
   24e28:	bne	2519c <__assert_fail@plt+0x125ac>
   24e2c:	ldrb	r7, [r6, #1]!
   24e30:	sub	r0, r7, #48	; 0x30
   24e34:	cmp	r0, #10
   24e38:	bcc	24e20 <__assert_fail@plt+0x12230>
   24e3c:	b	251a0 <__assert_fail@plt+0x125b0>
   24e40:	ldr	ip, [sp, #80]	; 0x50
   24e44:	str	r6, [sp, #152]	; 0x98
   24e48:	sub	r1, fp, #52	; 0x34
   24e4c:	mvn	r6, #96	; 0x60
   24e50:	ldr	r3, [sp, #140]	; 0x8c
   24e54:	cmp	r1, r3
   24e58:	bcs	24e68 <__assert_fail@plt+0x12278>
   24e5c:	strb	r2, [r1], #1
   24e60:	ldr	r2, [r4]
   24e64:	b	24e6c <__assert_fail@plt+0x1227c>
   24e68:	mov	r2, r0
   24e6c:	add	r0, r2, #1
   24e70:	mov	r3, #1
   24e74:	str	r0, [r4]
   24e78:	ldrb	r2, [r2, #1]
   24e7c:	sub	r7, r2, #65	; 0x41
   24e80:	cmp	r7, #26
   24e84:	subcs	r7, r2, #97	; 0x61
   24e88:	cmpcs	r7, #26
   24e8c:	movcs	r3, #0
   24e90:	cmp	r2, #46	; 0x2e
   24e94:	beq	24e50 <__assert_fail@plt+0x12260>
   24e98:	cmp	r3, #0
   24e9c:	bne	24e50 <__assert_fail@plt+0x12260>
   24ea0:	mov	r0, #0
   24ea4:	strb	r0, [r1]
   24ea8:	ldrb	r0, [fp, #-52]	; 0xffffffcc
   24eac:	cmp	r0, #0
   24eb0:	beq	24ed8 <__assert_fail@plt+0x122e8>
   24eb4:	mov	r1, ip
   24eb8:	uxtab	r2, r6, r0
   24ebc:	cmp	r2, #26
   24ec0:	subcc	r0, r0, #32
   24ec4:	strb	r0, [r1, #-1]
   24ec8:	ldrb	r0, [r1]
   24ecc:	add	r1, r1, #1
   24ed0:	cmp	r0, #0
   24ed4:	bne	24eb8 <__assert_fail@plt+0x122c8>
   24ed8:	movw	r1, #10595	; 0x2963
   24edc:	movw	r7, #8848	; 0x2290
   24ee0:	movt	r1, #4
   24ee4:	movt	r7, #4
   24ee8:	sub	r0, fp, #52	; 0x34
   24eec:	bl	124f4 <strcmp@plt>
   24ef0:	cmp	r0, #0
   24ef4:	beq	25194 <__assert_fail@plt+0x125a4>
   24ef8:	ldr	r1, [r7, #12]!
   24efc:	cmp	r1, #0
   24f00:	bne	24ee8 <__assert_fail@plt+0x122f8>
   24f04:	sub	r0, fp, #52	; 0x34
   24f08:	bl	128c0 <strlen@plt>
   24f0c:	cmp	r0, #3
   24f10:	mov	r6, sl
   24f14:	str	r0, [sp, #204]	; 0xcc
   24f18:	beq	24f68 <__assert_fail@plt+0x12378>
   24f1c:	cmp	r0, #4
   24f20:	bne	24f70 <__assert_fail@plt+0x12380>
   24f24:	ldrb	r0, [fp, #-49]	; 0xffffffcf
   24f28:	sub	r0, r0, #46	; 0x2e
   24f2c:	clz	r0, r0
   24f30:	lsr	sl, r0, #5
   24f34:	b	24f74 <__assert_fail@plt+0x12384>
   24f38:	sub	r0, r7, r0
   24f3c:	cmp	ip, #0
   24f40:	movw	lr, #274	; 0x112
   24f44:	lsr	r6, ip, #31
   24f48:	str	r7, [r4]
   24f4c:	str	r2, [sp, #108]	; 0x6c
   24f50:	sub	ip, fp, #92	; 0x5c
   24f54:	str	r0, [sp, #116]	; 0x74
   24f58:	asr	r0, r2, #31
   24f5c:	movweq	lr, #275	; 0x113
   24f60:	str	r0, [sp, #112]	; 0x70
   24f64:	b	25268 <__assert_fail@plt+0x12678>
   24f68:	mov	sl, #1
   24f6c:	b	24f74 <__assert_fail@plt+0x12384>
   24f70:	mov	sl, #0
   24f74:	movw	r1, #10611	; 0x2973
   24f78:	movw	r7, #8908	; 0x22cc
   24f7c:	sub	r0, fp, #52	; 0x34
   24f80:	movt	r1, #4
   24f84:	movt	r7, #4
   24f88:	cmp	sl, #0
   24f8c:	beq	24f9c <__assert_fail@plt+0x123ac>
   24f90:	mov	r2, #3
   24f94:	bl	12b90 <strncmp@plt>
   24f98:	b	24fa0 <__assert_fail@plt+0x123b0>
   24f9c:	bl	124f4 <strcmp@plt>
   24fa0:	cmp	r0, #0
   24fa4:	sub	ip, fp, #92	; 0x5c
   24fa8:	beq	25234 <__assert_fail@plt+0x12644>
   24fac:	ldr	r1, [r7, #12]!
   24fb0:	sub	r0, fp, #52	; 0x34
   24fb4:	cmp	r1, #0
   24fb8:	bne	24f88 <__assert_fail@plt+0x12398>
   24fbc:	mov	r1, r0
   24fc0:	mov	r0, r4
   24fc4:	bl	27e0c <__assert_fail@plt+0x1521c>
   24fc8:	sub	ip, fp, #92	; 0x5c
   24fcc:	mov	r7, r0
   24fd0:	cmp	r0, #0
   24fd4:	mov	sl, r6
   24fd8:	bne	25238 <__assert_fail@plt+0x12648>
   24fdc:	movw	r1, #10979	; 0x2ae3
   24fe0:	sub	r0, fp, #52	; 0x34
   24fe4:	mov	r2, #4
   24fe8:	movt	r1, #4
   24fec:	bl	128a8 <bcmp@plt>
   24ff0:	movw	r7, #9208	; 0x23f8
   24ff4:	sub	ip, fp, #92	; 0x5c
   24ff8:	cmp	r0, #0
   24ffc:	movt	r7, #4
   25000:	beq	25238 <__assert_fail@plt+0x12648>
   25004:	movw	r1, #10983	; 0x2ae7
   25008:	movw	r7, #9220	; 0x2404
   2500c:	movt	r1, #4
   25010:	movt	r7, #4
   25014:	sub	r0, fp, #52	; 0x34
   25018:	bl	124f4 <strcmp@plt>
   2501c:	cmp	r0, #0
   25020:	beq	25194 <__assert_fail@plt+0x125a4>
   25024:	ldr	r1, [r7, #12]!
   25028:	cmp	r1, #0
   2502c:	bne	25014 <__assert_fail@plt+0x12424>
   25030:	ldr	r0, [sp, #204]	; 0xcc
   25034:	mov	r6, sl
   25038:	sub	r2, fp, #52	; 0x34
   2503c:	sub	sl, r0, #1
   25040:	ldrb	r0, [r2, sl]
   25044:	cmp	r0, #83	; 0x53
   25048:	bne	2508c <__assert_fail@plt+0x1249c>
   2504c:	movw	r1, #10983	; 0x2ae7
   25050:	movw	r7, #9220	; 0x2404
   25054:	mov	r0, #0
   25058:	movt	r1, #4
   2505c:	movt	r7, #4
   25060:	strb	r0, [r2, sl]
   25064:	mov	r0, r2
   25068:	bl	124f4 <strcmp@plt>
   2506c:	cmp	r0, #0
   25070:	beq	25230 <__assert_fail@plt+0x12640>
   25074:	ldr	r1, [r7, #12]!
   25078:	sub	r0, fp, #52	; 0x34
   2507c:	cmp	r1, #0
   25080:	bne	25068 <__assert_fail@plt+0x12478>
   25084:	mov	r1, #83	; 0x53
   25088:	strb	r1, [r0, sl]
   2508c:	mov	sl, r6
   25090:	ldr	r6, [sp, #152]	; 0x98
   25094:	movw	r1, #11036	; 0x2b1c
   25098:	movw	r7, #9352	; 0x2488
   2509c:	movt	r1, #4
   250a0:	movt	r7, #4
   250a4:	sub	r0, fp, #52	; 0x34
   250a8:	bl	124f4 <strcmp@plt>
   250ac:	cmp	r0, #0
   250b0:	beq	25194 <__assert_fail@plt+0x125a4>
   250b4:	ldr	r1, [r7, #12]!
   250b8:	cmp	r1, #0
   250bc:	bne	250a4 <__assert_fail@plt+0x124b4>
   250c0:	ldr	r0, [sp, #204]	; 0xcc
   250c4:	ldrb	r1, [fp, #-52]	; 0xffffffcc
   250c8:	sub	ip, fp, #92	; 0x5c
   250cc:	cmp	r0, #1
   250d0:	bne	250fc <__assert_fail@plt+0x1250c>
   250d4:	movw	r0, #11165	; 0x2b9d
   250d8:	movw	r7, #9604	; 0x2584
   250dc:	movt	r0, #4
   250e0:	movt	r7, #4
   250e4:	ldrb	r0, [r0]
   250e8:	cmp	r1, r0
   250ec:	beq	25238 <__assert_fail@plt+0x12648>
   250f0:	ldr	r0, [r7, #12]!
   250f4:	cmp	r0, #0
   250f8:	bne	250e4 <__assert_fail@plt+0x124f4>
   250fc:	mov	lr, #63	; 0x3f
   25100:	cmp	r1, #0
   25104:	beq	25250 <__assert_fail@plt+0x12660>
   25108:	ldr	r3, [sp, #80]	; 0x50
   2510c:	cmp	r1, #46	; 0x2e
   25110:	sub	r2, fp, #52	; 0x34
   25114:	sub	r1, r1, #46	; 0x2e
   25118:	clz	r1, r1
   2511c:	lsr	r1, r1, #5
   25120:	mov	r0, r3
   25124:	moveq	r0, r2
   25128:	ldrb	r2, [fp, #-51]	; 0xffffffcd
   2512c:	cmp	r2, #0
   25130:	strb	r2, [r0]
   25134:	beq	25168 <__assert_fail@plt+0x12578>
   25138:	mov	r2, r3
   2513c:	ldrb	r3, [r2]
   25140:	ldrb	r7, [r2, #1]!
   25144:	cmp	r3, #46	; 0x2e
   25148:	sub	r3, r3, #46	; 0x2e
   2514c:	clz	r3, r3
   25150:	addne	r0, r0, #1
   25154:	cmp	r7, #0
   25158:	lsr	r3, r3, #5
   2515c:	strb	r7, [r0]
   25160:	orr	r1, r1, r3
   25164:	bne	2513c <__assert_fail@plt+0x1254c>
   25168:	tst	r1, #1
   2516c:	beq	25250 <__assert_fail@plt+0x12660>
   25170:	mov	r0, r4
   25174:	sub	r1, fp, #52	; 0x34
   25178:	bl	27e0c <__assert_fail@plt+0x1521c>
   2517c:	mov	lr, #63	; 0x3f
   25180:	sub	ip, fp, #92	; 0x5c
   25184:	mov	r7, r0
   25188:	cmp	r0, #0
   2518c:	bne	25238 <__assert_fail@plt+0x12648>
   25190:	b	25250 <__assert_fail@plt+0x12660>
   25194:	sub	ip, fp, #92	; 0x5c
   25198:	b	25238 <__assert_fail@plt+0x12648>
   2519c:	add	r3, r3, #1
   251a0:	sub	r0, r6, #1
   251a4:	ldrb	r1, [r0, #1]!
   251a8:	sub	r1, r1, #48	; 0x30
   251ac:	cmp	r1, #10
   251b0:	bcc	251a4 <__assert_fail@plt+0x125b4>
   251b4:	cmn	ip, #1
   251b8:	bgt	251e0 <__assert_fail@plt+0x125f0>
   251bc:	cmp	r3, #0
   251c0:	beq	251e0 <__assert_fail@plt+0x125f0>
   251c4:	sub	r7, r2, #1
   251c8:	cmp	r7, r2
   251cc:	bvc	251ec <__assert_fail@plt+0x125fc>
   251d0:	mov	r6, lr
   251d4:	sub	ip, fp, #92	; 0x5c
   251d8:	mov	lr, #63	; 0x3f
   251dc:	b	25268 <__assert_fail@plt+0x12678>
   251e0:	mov	r6, r2
   251e4:	str	r3, [sp, #124]	; 0x7c
   251e8:	b	25200 <__assert_fail@plt+0x12610>
   251ec:	movw	r1, #51712	; 0xca00
   251f0:	mov	r6, r7
   251f4:	movt	r1, #15258	; 0x3b9a
   251f8:	sub	r1, r1, r3
   251fc:	str	r1, [sp, #124]	; 0x7c
   25200:	str	r0, [r4]
   25204:	cmp	ip, #0
   25208:	lsr	r0, r6, #8
   2520c:	mov	lr, #276	; 0x114
   25210:	sub	ip, fp, #92	; 0x5c
   25214:	movweq	lr, #277	; 0x115
   25218:	str	r0, [sp, #128]	; 0x80
   2521c:	b	25268 <__assert_fail@plt+0x12678>
   25220:	add	r1, r0, #1
   25224:	str	r1, [r4]
   25228:	ldrb	lr, [r0]
   2522c:	b	25250 <__assert_fail@plt+0x12660>
   25230:	sub	ip, fp, #92	; 0x5c
   25234:	mov	sl, r6
   25238:	ldr	r6, [r7, #8]
   2523c:	ldr	lr, [r7, #4]
   25240:	asr	r0, r6, #31
   25244:	str	r0, [sp, #124]	; 0x7c
   25248:	lsr	r0, r6, #8
   2524c:	str	r0, [sp, #128]	; 0x80
   25250:	cmp	lr, #1
   25254:	blt	25278 <__assert_fail@plt+0x12688>
   25258:	lsr	r1, lr, #1
   2525c:	mov	r0, #2
   25260:	cmp	r1, #138	; 0x8a
   25264:	bhi	25280 <__assert_fail@plt+0x12690>
   25268:	movw	r0, #7994	; 0x1f3a
   2526c:	movt	r0, #4
   25270:	ldrb	r0, [r0, lr]
   25274:	b	25280 <__assert_fail@plt+0x12690>
   25278:	mov	r0, #0
   2527c:	mov	lr, #0
   25280:	add	r1, r0, r9
   25284:	cmp	r1, #112	; 0x70
   25288:	bhi	252c4 <__assert_fail@plt+0x126d4>
   2528c:	movw	r2, #8272	; 0x2050
   25290:	movt	r2, #4
   25294:	add	r2, r2, r1
   25298:	ldrsb	r2, [r2]
   2529c:	cmp	r0, r2
   252a0:	bne	252c4 <__assert_fail@plt+0x126d4>
   252a4:	movw	r0, #8385	; 0x20c1
   252a8:	movt	r0, #4
   252ac:	ldrb	r8, [r0, r1]
   252b0:	orr	r0, r1, #4
   252b4:	cmp	r0, #111	; 0x6f
   252b8:	bne	25540 <__assert_fail@plt+0x12950>
   252bc:	rsb	r3, r8, #0
   252c0:	b	252d8 <__assert_fail@plt+0x126e8>
   252c4:	movw	r0, #8498	; 0x2132
   252c8:	movt	r0, #4
   252cc:	ldrb	r3, [r0, r8]
   252d0:	cmp	r3, #0
   252d4:	beq	264b0 <__assert_fail@plt+0x138c0>
   252d8:	movw	r0, #8612	; 0x21a4
   252dc:	mov	r1, r5
   252e0:	str	sl, [sp, #148]	; 0x94
   252e4:	str	r6, [sp, #152]	; 0x98
   252e8:	movt	r0, #4
   252ec:	ldrb	r2, [r0, r3]
   252f0:	rsb	r0, r2, #1
   252f4:	rsb	r0, r0, r0, lsl #3
   252f8:	ldr	r0, [r1, r0, lsl #3]!
   252fc:	ldr	r7, [r1, #52]	; 0x34
   25300:	str	r0, [sp, #204]	; 0xcc
   25304:	ldr	r0, [r1, #44]	; 0x2c
   25308:	str	r7, [sp, #144]	; 0x90
   2530c:	str	r0, [sp, #160]	; 0xa0
   25310:	ldr	r0, [r1, #40]	; 0x28
   25314:	str	r0, [sp, #168]	; 0xa8
   25318:	ldr	r0, [r1, #36]	; 0x24
   2531c:	str	r0, [sp, #164]	; 0xa4
   25320:	ldr	r0, [r1, #4]
   25324:	str	r0, [sp, #200]	; 0xc8
   25328:	ldr	r0, [r1, #8]
   2532c:	str	r0, [sp, #196]	; 0xc4
   25330:	ldr	r0, [r1, #12]
   25334:	str	r0, [sp, #188]	; 0xbc
   25338:	ldr	r0, [r1, #16]
   2533c:	str	r0, [sp, #192]	; 0xc0
   25340:	ldr	r0, [r1, #20]
   25344:	str	r0, [sp, #184]	; 0xb8
   25348:	ldr	r0, [r1, #24]
   2534c:	str	r0, [sp, #180]	; 0xb4
   25350:	ldr	r0, [r1, #28]
   25354:	str	r0, [sp, #176]	; 0xb0
   25358:	ldr	r0, [r1, #32]
   2535c:	ldr	r1, [r1, #48]	; 0x30
   25360:	str	r0, [sp, #172]	; 0xac
   25364:	sub	r0, r3, #4
   25368:	str	r1, [sp, #156]	; 0x9c
   2536c:	cmp	r0, #87	; 0x57
   25370:	bhi	2639c <__assert_fail@plt+0x137ac>
   25374:	add	r1, pc, #20
   25378:	add	r6, r5, #8
   2537c:	add	sl, r5, #16
   25380:	add	r8, r5, #24
   25384:	add	r9, r5, #32
   25388:	add	r7, r5, #40	; 0x28
   2538c:	ldr	pc, [r1, r0, lsl #2]
   25390:	andeq	r5, r2, r8, ror #12
   25394:	muleq	r2, ip, r3
   25398:	muleq	r2, ip, r3
   2539c:	muleq	r2, r0, r6
   253a0:			; <UNDEFINED> instruction: 0x000256b4
   253a4:	andeq	r5, r2, ip, asr #13
   253a8:	andeq	r5, r2, r4, ror #13
   253ac:	strdeq	r5, [r2], -ip
   253b0:	andeq	r5, r2, r4, lsl r7
   253b4:	andeq	r5, r2, ip, lsr #14
   253b8:	andeq	r5, r2, r8, lsr r7
   253bc:	andeq	r5, r2, r4, asr #14
   253c0:	muleq	r2, ip, r3
   253c4:	muleq	r2, ip, r3
   253c8:	andeq	r5, r2, r8, ror r7
   253cc:	muleq	r2, ip, r7
   253d0:	ldrdeq	r5, [r2], -r4
   253d4:	muleq	r2, ip, r3
   253d8:	andeq	r5, r2, r0, lsl r8
   253dc:	andeq	r5, r2, r4, lsr r8
   253e0:	andeq	r5, r2, ip, ror #16
   253e4:	muleq	r2, ip, r3
   253e8:	muleq	r2, ip, r3
   253ec:	andeq	r5, r2, ip, lsr #17
   253f0:	andeq	r5, r2, r0, lsl #18
   253f4:	andeq	r5, r2, ip, lsl #18
   253f8:	andeq	r5, r2, r4, lsr #18
   253fc:	andeq	r5, r2, ip, lsr #18
   25400:	andeq	r5, r2, r8, lsr r9
   25404:	andeq	r5, r2, r0, asr #18
   25408:	andeq	r5, r2, r4, lsr #20
   2540c:	andeq	r5, r2, ip, ror #21
   25410:	strdeq	r5, [r2], -r4
   25414:	andeq	r5, r2, r4, lsl #22
   25418:	andeq	r5, r2, ip, lsl fp
   2541c:	andeq	r5, r2, r4, lsr fp
   25420:	andeq	r5, r2, ip, lsr fp
   25424:	andeq	r5, r2, r4, ror #22
   25428:	andeq	r5, r2, ip, ror #22
   2542c:	muleq	r2, ip, fp
   25430:	andeq	r5, r2, r8, ror #23
   25434:	andeq	r5, r2, ip, asr #24
   25438:	andeq	r5, r2, r0, ror ip
   2543c:	andeq	r5, r2, ip, lsl #25
   25440:			; <UNDEFINED> instruction: 0x00025cb0
   25444:	muleq	r2, ip, r3
   25448:	ldrdeq	r5, [r2], -r8
   2544c:	andeq	r5, r2, r0, asr #26
   25450:	strdeq	r5, [r2], -r0
   25454:	strdeq	r5, [r2], -r0
   25458:	strdeq	r5, [r2], -r8
   2545c:	andeq	r5, r2, r8, lsr #11
   25460:	andeq	r5, r2, r0, ror #28
   25464:	andeq	r5, r2, r4, asr #29
   25468:			; <UNDEFINED> instruction: 0x000255b0
   2546c:	ldrdeq	r5, [r2], -r0
   25470:	strdeq	r5, [r2], -r4
   25474:			; <UNDEFINED> instruction: 0x000255b8
   25478:	andeq	r5, r2, ip, asr #11
   2547c:	andeq	r5, r2, r0, asr #30
   25480:	ldrdeq	r5, [r2], -ip
   25484:	andeq	r5, r2, r0, ror pc
   25488:	muleq	r2, ip, pc	; <UNPREDICTABLE>
   2548c:	andeq	r5, r2, r4, ror #11
   25490:	ldrdeq	r5, [r2], -ip
   25494:	andeq	r6, r2, r8, lsl r0
   25498:	andeq	r5, r2, ip, ror #11
   2549c:	strdeq	r5, [r2], -r4
   254a0:	strdeq	r5, [r2], -r4
   254a4:	andeq	r6, r2, r8, rrx
   254a8:	muleq	r2, ip, r3
   254ac:	andeq	r5, r2, r8, lsr #11
   254b0:			; <UNDEFINED> instruction: 0x000255b0
   254b4:			; <UNDEFINED> instruction: 0x000255b8
   254b8:	ldrdeq	r5, [r2], -ip
   254bc:	andeq	r5, r2, r4, ror #11
   254c0:	andeq	r5, r2, ip, ror #11
   254c4:	andeq	r5, r2, ip, asr #11
   254c8:	muleq	r2, ip, r3
   254cc:	muleq	r2, ip, r3
   254d0:	muleq	r2, ip, r3
   254d4:	andeq	r5, r2, ip, asr #12
   254d8:	muleq	r2, ip, r3
   254dc:	andeq	r5, r2, ip, asr #12
   254e0:	strheq	r6, [r2], -r4
   254e4:	andeq	r6, r2, r4, ror #1
   254e8:			; <UNDEFINED> instruction: 0x000261b4
   254ec:	andeq	r6, r2, r4, asr #3
   254f0:	ldr	r0, [r5, #4]
   254f4:	ldr	r1, [r5]
   254f8:	str	lr, [sp, #84]	; 0x54
   254fc:	ldr	ip, [sl]
   25500:	str	r2, [sp, #120]	; 0x78
   25504:	ldm	r6, {r6, lr}
   25508:	ldr	sl, [sl, #4]
   2550c:	ldr	r2, [r7, #8]
   25510:	str	r3, [sp, #72]	; 0x48
   25514:	str	r0, [sp, #64]	; 0x40
   25518:	ldr	r0, [r8, #4]
   2551c:	str	r1, [sp, #60]	; 0x3c
   25520:	ldr	r8, [r8]
   25524:	ldr	r1, [r7, #4]
   25528:	str	r0, [sp, #52]	; 0x34
   2552c:	ldr	r0, [r9, #4]
   25530:	ldr	r9, [r9]
   25534:	str	r0, [sp, #56]	; 0x38
   25538:	ldr	r0, [r7]
   2553c:	b	26148 <__assert_fail@plt+0x13558>
   25540:	ldr	r0, [sp, #128]	; 0x80
   25544:	uxtb	r2, r6
   25548:	add	ip, r5, #56	; 0x38
   2554c:	add	r1, r5, #64	; 0x40
   25550:	mov	lr, r6
   25554:	orr	r2, r2, r0, lsl #8
   25558:	ldr	r0, [sp, #124]	; 0x7c
   2555c:	str	r2, [ip]
   25560:	ldr	r2, [sp, #108]	; 0x6c
   25564:	str	r0, [ip, #4]
   25568:	ldr	r0, [sp, #112]	; 0x70
   2556c:	str	r2, [r1]
   25570:	ldr	r2, [sp, #96]	; 0x60
   25574:	str	r0, [r1, #4]
   25578:	ldr	r0, [sp, #116]	; 0x74
   2557c:	add	r1, r5, #76	; 0x4c
   25580:	str	r0, [r5, #72]	; 0x48
   25584:	ldm	r2!, {r3, r5, r6, r7}
   25588:	stmia	r1!, {r3, r5, r6, r7}
   2558c:	ldm	r2, {r0, r3, r5, r6, r7}
   25590:	stm	r1, {r0, r3, r5, r6, r7}
   25594:	mov	r6, lr
   25598:	mov	r5, ip
   2559c:	mvn	lr, #1
   255a0:	sub	ip, fp, #92	; 0x5c
   255a4:	b	2648c <__assert_fail@plt+0x1389c>
   255a8:	ldrd	r0, [r5, #-48]	; 0xffffffd0
   255ac:	b	25dfc <__assert_fail@plt+0x1320c>
   255b0:	ldrd	r0, [r5, #-48]	; 0xffffffd0
   255b4:	b	25ec8 <__assert_fail@plt+0x132d8>
   255b8:	ldrd	r8, [r5]
   255bc:	cmn	r9, #1
   255c0:	ble	261d4 <__assert_fail@plt+0x135e4>
   255c4:	ldrd	r6, [r5, #-48]	; 0xffffffd0
   255c8:	b	25f04 <__assert_fail@plt+0x13314>
   255cc:	ldrd	r0, [r5]
   255d0:	str	r1, [sp, #184]	; 0xb8
   255d4:	str	r0, [sp, #192]	; 0xc0
   255d8:	b	26344 <__assert_fail@plt+0x13754>
   255dc:	ldrd	r0, [r5, #-48]	; 0xffffffd0
   255e0:	b	25f44 <__assert_fail@plt+0x13354>
   255e4:	ldrd	r0, [r5, #-48]	; 0xffffffd0
   255e8:	b	25fa0 <__assert_fail@plt+0x133b0>
   255ec:	ldrd	r0, [r5, #-48]	; 0xffffffd0
   255f0:	b	2601c <__assert_fail@plt+0x1342c>
   255f4:	ldrd	r0, [r5, #-56]	; 0xffffffc8
   255f8:	str	r0, [sp, #168]	; 0xa8
   255fc:	asr	r0, r0, #31
   25600:	str	r1, [sp, #156]	; 0x9c
   25604:	str	r0, [sp, #160]	; 0xa0
   25608:	mov	r0, #0
   2560c:	str	r0, [sp, #196]	; 0xc4
   25610:	mov	r0, #0
   25614:	str	r0, [sp, #188]	; 0xbc
   25618:	mov	r0, #0
   2561c:	str	r0, [sp, #192]	; 0xc0
   25620:	mov	r0, #0
   25624:	str	r0, [sp, #184]	; 0xb8
   25628:	mov	r0, #0
   2562c:	str	r0, [sp, #180]	; 0xb4
   25630:	mov	r0, #0
   25634:	str	r0, [sp, #176]	; 0xb0
   25638:	mov	r0, #0
   2563c:	str	r0, [sp, #172]	; 0xac
   25640:	mov	r0, #0
   25644:	str	r0, [sp, #164]	; 0xa4
   25648:	b	2638c <__assert_fail@plt+0x1379c>
   2564c:	ldr	r1, [r6, #4]
   25650:	ldr	r6, [r6]
   25654:	adds	r0, r6, #-2147483648	; 0x80000000
   25658:	adcs	r0, r1, #0
   2565c:	bne	264b0 <__assert_fail@plt+0x138c0>
   25660:	str	r6, [sp, #204]	; 0xcc
   25664:	b	26394 <__assert_fail@plt+0x137a4>
   25668:	mov	r8, r2
   2566c:	ldrd	r0, [r5]
   25670:	ldr	r2, [sp, #68]	; 0x44
   25674:	strd	r0, [r2]
   25678:	movw	r1, #798	; 0x31e
   2567c:	mov	r0, #1
   25680:	strb	r0, [r4, #152]	; 0x98
   25684:	movt	r1, #4
   25688:	mov	r0, #0
   2568c:	b	25754 <__assert_fail@plt+0x12b64>
   25690:	ldr	r1, [r4, #172]	; 0xac
   25694:	ldr	r0, [r4, #156]	; 0x9c
   25698:	add	r1, r1, #1
   2569c:	add	r0, r0, #1
   256a0:	str	r1, [r4, #172]	; 0xac
   256a4:	movw	r1, #10540	; 0x292c
   256a8:	str	r0, [r4, #156]	; 0x9c
   256ac:	movt	r1, #4
   256b0:	b	2574c <__assert_fail@plt+0x12b5c>
   256b4:	ldr	r0, [r4, #172]	; 0xac
   256b8:	movw	r1, #268	; 0x10c
   256bc:	movt	r1, #4
   256c0:	add	r0, r0, #1
   256c4:	str	r0, [r4, #172]	; 0xac
   256c8:	b	2574c <__assert_fail@plt+0x12b5c>
   256cc:	ldr	r0, [r4, #164]	; 0xa4
   256d0:	movw	r1, #10549	; 0x2935
   256d4:	movt	r1, #4
   256d8:	add	r0, r0, #1
   256dc:	str	r0, [r4, #164]	; 0xa4
   256e0:	b	2574c <__assert_fail@plt+0x12b5c>
   256e4:	ldr	r0, [r4, #176]	; 0xb0
   256e8:	movw	r1, #10555	; 0x293b
   256ec:	movt	r1, #4
   256f0:	add	r0, r0, #1
   256f4:	str	r0, [r4, #176]	; 0xb0
   256f8:	b	2574c <__assert_fail@plt+0x12b5c>
   256fc:	ldr	r0, [r4, #156]	; 0x9c
   25700:	movw	r1, #10560	; 0x2940
   25704:	movt	r1, #4
   25708:	add	r0, r0, #1
   2570c:	str	r0, [r4, #156]	; 0x9c
   25710:	b	2574c <__assert_fail@plt+0x12b5c>
   25714:	ldr	r0, [r4, #160]	; 0xa0
   25718:	movw	r1, #10565	; 0x2945
   2571c:	movt	r1, #4
   25720:	add	r0, r0, #1
   25724:	str	r0, [r4, #160]	; 0xa0
   25728:	b	2574c <__assert_fail@plt+0x12b5c>
   2572c:	movw	r1, #10569	; 0x2949
   25730:	movt	r1, #4
   25734:	b	2574c <__assert_fail@plt+0x12b5c>
   25738:	movw	r1, #6149	; 0x1805
   2573c:	movt	r1, #4
   25740:	b	2574c <__assert_fail@plt+0x12b5c>
   25744:	movw	r1, #10578	; 0x2952
   25748:	movt	r1, #4
   2574c:	mov	r0, #0
   25750:	mov	r8, r2
   25754:	mov	r2, #5
   25758:	mov	r6, lr
   2575c:	mov	r7, r3
   25760:	bl	12674 <dcgettext@plt>
   25764:	mov	r2, r8
   25768:	mov	r3, r7
   2576c:	mov	lr, r6
   25770:	sub	ip, fp, #92	; 0x5c
   25774:	b	2639c <__assert_fail@plt+0x137ac>
   25778:	mov	r6, r2
   2577c:	ldrd	r0, [r5, #-48]	; 0xffffffd0
   25780:	ldr	r2, [sp, #104]	; 0x68
   25784:	vmov.i32	q8, #0	; 0x00000000
   25788:	strd	r0, [r2]
   2578c:	mov	r2, r6
   25790:	ldr	r0, [sp, #100]	; 0x64
   25794:	vst1.64	{d16-d17}, [r0]
   25798:	b	25808 <__assert_fail@plt+0x12c18>
   2579c:	ldrd	r0, [r5, #-160]	; 0xffffff60
   257a0:	ldr	r7, [sp, #104]	; 0x68
   257a4:	mov	r8, r3
   257a8:	mov	r6, r2
   257ac:	ldrd	r2, [r5, #-48]	; 0xffffffd0
   257b0:	strd	r0, [r7]
   257b4:	ldr	r0, [sp, #100]	; 0x64
   257b8:	strd	r2, [r0]
   257bc:	mov	r0, #0
   257c0:	mov	r2, r6
   257c4:	mov	r3, r8
   257c8:	str	r0, [r4, #88]	; 0x58
   257cc:	str	r0, [r4, #92]	; 0x5c
   257d0:	b	25808 <__assert_fail@plt+0x12c18>
   257d4:	mov	sl, r2
   257d8:	mov	r1, r3
   257dc:	ldr	r2, [r5, #-272]	; 0xfffffef0
   257e0:	ldr	r3, [r5, #-268]	; 0xfffffef4
   257e4:	ldr	r0, [sp, #104]	; 0x68
   257e8:	ldrd	r8, [r5, #-56]	; 0xffffffc8
   257ec:	ldrd	r6, [r5, #-160]	; 0xffffff60
   257f0:	strd	r2, [r0]
   257f4:	mov	r2, sl
   257f8:	mov	r3, r1
   257fc:	ldr	r0, [sp, #100]	; 0x64
   25800:	strd	r6, [r0]
   25804:	strd	r8, [r4, #88]	; 0x58
   25808:	ldr	r0, [r5]
   2580c:	b	258a4 <__assert_fail@plt+0x12cb4>
   25810:	mov	r6, r2
   25814:	ldrd	r0, [r5, #-48]	; 0xffffffd0
   25818:	ldr	r2, [sp, #104]	; 0x68
   2581c:	vmov.i32	q8, #0	; 0x00000000
   25820:	strd	r0, [r2]
   25824:	mov	r2, r6
   25828:	ldr	r0, [sp, #100]	; 0x64
   2582c:	vst1.64	{d16-d17}, [r0]
   25830:	b	258a0 <__assert_fail@plt+0x12cb0>
   25834:	ldrd	r0, [r5, #-160]	; 0xffffff60
   25838:	ldr	r7, [sp, #104]	; 0x68
   2583c:	mov	r8, r3
   25840:	mov	r6, r2
   25844:	ldrd	r2, [r5, #-48]	; 0xffffffd0
   25848:	strd	r0, [r7]
   2584c:	ldr	r0, [sp, #100]	; 0x64
   25850:	strd	r2, [r0]
   25854:	mov	r0, #0
   25858:	mov	r2, r6
   2585c:	mov	r3, r8
   25860:	str	r0, [r4, #88]	; 0x58
   25864:	str	r0, [r4, #92]	; 0x5c
   25868:	b	258a0 <__assert_fail@plt+0x12cb0>
   2586c:	mov	sl, r2
   25870:	mov	r1, r3
   25874:	ldr	r2, [r5, #-272]	; 0xfffffef0
   25878:	ldr	r3, [r5, #-268]	; 0xfffffef4
   2587c:	ldr	r0, [sp, #104]	; 0x68
   25880:	ldrd	r8, [r5, #-56]	; 0xffffffc8
   25884:	ldrd	r6, [r5, #-160]	; 0xffffff60
   25888:	strd	r2, [r0]
   2588c:	mov	r2, sl
   25890:	mov	r3, r1
   25894:	ldr	r0, [sp, #100]	; 0x64
   25898:	strd	r6, [r0]
   2589c:	strd	r8, [r4, #88]	; 0x58
   258a0:	mov	r0, #2
   258a4:	str	r0, [r4, #28]
   258a8:	b	2639c <__assert_fail@plt+0x137ac>
   258ac:	ldr	r0, [r4, #176]	; 0xb0
   258b0:	sub	r7, r5, #48	; 0x30
   258b4:	str	r2, [sp, #120]	; 0x78
   258b8:	mov	sl, r3
   258bc:	add	r0, r0, #1
   258c0:	str	r0, [r4, #176]	; 0xb0
   258c4:	ldm	r7, {r0, r1, r7}
   258c8:	ldr	r6, [r5, #-36]	; 0xffffffdc
   258cc:	ldr	r2, [r5, #-56]	; 0xffffffc8
   258d0:	ldr	r3, [r5, #-52]	; 0xffffffcc
   258d4:	ldrd	r8, [r5]
   258d8:	stm	sp, {r0, r1, r7}
   258dc:	add	r0, sp, #12
   258e0:	stm	r0, {r6, r8, r9}
   258e4:	mov	r0, r4
   258e8:	mov	r6, lr
   258ec:	bl	264c0 <__assert_fail@plt+0x138d0>
   258f0:	ldr	r2, [sp, #120]	; 0x78
   258f4:	mov	r3, sl
   258f8:	mov	lr, r6
   258fc:	b	25de8 <__assert_fail@plt+0x131f8>
   25900:	ldr	r0, [r5]
   25904:	str	r0, [r4, #20]
   25908:	b	2639c <__assert_fail@plt+0x137ac>
   2590c:	mov	r0, #1
   25910:	str	r0, [r4, #20]
   25914:	ldr	r0, [r4, #168]	; 0xa8
   25918:	add	r0, r0, #1
   2591c:	str	r0, [r4, #168]	; 0xa8
   25920:	b	2639c <__assert_fail@plt+0x137ac>
   25924:	ldr	r0, [r5]
   25928:	b	25afc <__assert_fail@plt+0x12f0c>
   2592c:	movw	r0, #40336	; 0x9d90
   25930:	movt	r0, #65535	; 0xffff
   25934:	b	25afc <__assert_fail@plt+0x12f0c>
   25938:	ldr	r0, [r5, #-56]	; 0xffffffc8
   2593c:	b	25948 <__assert_fail@plt+0x12d58>
   25940:	movw	r0, #40336	; 0x9d90
   25944:	movt	r0, #65535	; 0xffff
   25948:	str	r0, [r4, #24]
   2594c:	str	lr, [sp, #84]	; 0x54
   25950:	ldr	r0, [r5, #4]
   25954:	ldr	r1, [r5]
   25958:	ldm	r6, {r6, lr}
   2595c:	ldr	ip, [sl]
   25960:	ldr	sl, [sl, #4]
   25964:	str	r0, [sp, #120]	; 0x78
   25968:	ldr	r0, [r8, #4]
   2596c:	str	r1, [sp, #72]	; 0x48
   25970:	ldr	r1, [r8]
   25974:	mov	r8, r2
   25978:	ldr	r2, [r7, #8]
   2597c:	str	r0, [sp, #60]	; 0x3c
   25980:	ldr	r0, [r9, #4]
   25984:	str	r1, [sp, #52]	; 0x34
   25988:	ldr	r1, [r9]
   2598c:	mov	r9, r3
   25990:	ldr	r3, [r7, #12]
   25994:	str	r2, [sp, #40]	; 0x28
   25998:	ldr	r2, [sp, #72]	; 0x48
   2599c:	str	r0, [sp, #64]	; 0x40
   259a0:	ldr	r0, [r7]
   259a4:	str	r1, [sp, #56]	; 0x38
   259a8:	ldr	r1, [r7, #4]
   259ac:	mov	r7, #1
   259b0:	str	r3, [sp, #44]	; 0x2c
   259b4:	ldr	r3, [sp, #120]	; 0x78
   259b8:	str	r7, [sp, #48]	; 0x30
   259bc:	str	r0, [sp, #32]
   259c0:	ldr	r0, [sp, #52]	; 0x34
   259c4:	str	r1, [sp, #36]	; 0x24
   259c8:	stm	sp, {r6, lr}
   259cc:	str	ip, [sp, #8]
   259d0:	str	sl, [sp, #12]
   259d4:	str	r0, [sp, #16]
   259d8:	ldr	r0, [sp, #60]	; 0x3c
   259dc:	str	r0, [sp, #20]
   259e0:	ldr	r0, [sp, #56]	; 0x38
   259e4:	str	r0, [sp, #24]
   259e8:	ldr	r0, [sp, #64]	; 0x40
   259ec:	str	r0, [sp, #28]
   259f0:	mov	r0, r4
   259f4:	bl	26698 <__assert_fail@plt+0x13aa8>
   259f8:	cmp	r0, #0
   259fc:	beq	264b4 <__assert_fail@plt+0x138c4>
   25a00:	movw	r1, #10569	; 0x2949
   25a04:	mov	r0, #0
   25a08:	mov	r2, #5
   25a0c:	movt	r1, #4
   25a10:	bl	12674 <dcgettext@plt>
   25a14:	ldr	lr, [sp, #84]	; 0x54
   25a18:	mov	r2, r8
   25a1c:	mov	r3, r9
   25a20:	b	25770 <__assert_fail@plt+0x12b80>
   25a24:	sub	r7, r5, #48	; 0x30
   25a28:	ldr	r6, [r5, #-36]	; 0xffffffdc
   25a2c:	str	r2, [sp, #120]	; 0x78
   25a30:	str	r3, [sp, #72]	; 0x48
   25a34:	ldr	r2, [r5, #-56]	; 0xffffffc8
   25a38:	ldr	r3, [r5, #-52]	; 0xffffffcc
   25a3c:	ldrd	r8, [r5]
   25a40:	mov	sl, lr
   25a44:	ldm	r7, {r0, r1, r7}
   25a48:	stm	sp, {r0, r1, r7}
   25a4c:	add	r0, sp, #12
   25a50:	stm	r0, {r6, r8, r9}
   25a54:	mov	r0, r4
   25a58:	bl	264c0 <__assert_fail@plt+0x138d0>
   25a5c:	mov	r7, #1
   25a60:	cmp	r0, #0
   25a64:	beq	264b4 <__assert_fail@plt+0x138c4>
   25a68:	ldr	r0, [r4, #24]
   25a6c:	ldr	r6, [r5, #-112]	; 0xffffff90
   25a70:	ldr	r9, [r5, #-108]	; 0xffffff94
   25a74:	mov	r3, #0
   25a78:	mov	r2, #0
   25a7c:	asr	r1, r0, #31
   25a80:	cmn	r1, #1
   25a84:	movwgt	r3, #1
   25a88:	adds	r0, r0, r6
   25a8c:	mov	r6, #0
   25a90:	adc	r1, r1, r9
   25a94:	str	r0, [r4, #24]
   25a98:	cmn	r1, #1
   25a9c:	movwgt	r6, #1
   25aa0:	subs	r6, r3, r6
   25aa4:	movwne	r6, #1
   25aa8:	cmn	r9, #1
   25aac:	movwgt	r2, #1
   25ab0:	sub	r2, r3, r2
   25ab4:	clz	r2, r2
   25ab8:	lsr	r2, r2, #5
   25abc:	tst	r2, r6
   25ac0:	bne	264b4 <__assert_fail@plt+0x138c4>
   25ac4:	asr	r2, r0, #31
   25ac8:	ldr	r3, [sp, #72]	; 0x48
   25acc:	eor	r0, r0, r0
   25ad0:	sub	ip, fp, #92	; 0x5c
   25ad4:	mov	lr, sl
   25ad8:	eor	r1, r1, r2
   25adc:	ldr	r2, [sp, #120]	; 0x78
   25ae0:	orrs	r0, r0, r1
   25ae4:	beq	2639c <__assert_fail@plt+0x137ac>
   25ae8:	b	264b4 <__assert_fail@plt+0x138c4>
   25aec:	ldr	r0, [r5]
   25af0:	b	25af8 <__assert_fail@plt+0x12f08>
   25af4:	ldr	r0, [r5, #-56]	; 0xffffffc8
   25af8:	add	r0, r0, #3600	; 0xe10
   25afc:	str	r0, [r4, #24]
   25b00:	b	2639c <__assert_fail@plt+0x137ac>
   25b04:	ldr	r1, [sp, #88]	; 0x58
   25b08:	mov	r0, #0
   25b0c:	str	r0, [r1]
   25b10:	str	r0, [r1, #4]
   25b14:	ldr	r0, [r5]
   25b18:	b	25b5c <__assert_fail@plt+0x12f6c>
   25b1c:	ldr	r1, [sp, #88]	; 0x58
   25b20:	mov	r0, #0
   25b24:	str	r0, [r1]
   25b28:	str	r0, [r1, #4]
   25b2c:	ldr	r0, [r5, #-56]	; 0xffffffc8
   25b30:	b	25b5c <__assert_fail@plt+0x12f6c>
   25b34:	ldrd	r0, [r5, #-56]	; 0xffffffc8
   25b38:	b	25b40 <__assert_fail@plt+0x12f50>
   25b3c:	ldrd	r0, [r5, #-48]	; 0xffffffd0
   25b40:	mov	r6, r2
   25b44:	ldr	r2, [sp, #88]	; 0x58
   25b48:	strd	r0, [r2]
   25b4c:	mov	r1, #1
   25b50:	mov	r2, r6
   25b54:	ldr	r0, [r5]
   25b58:	strb	r1, [r4, #187]	; 0xbb
   25b5c:	str	r0, [r4, #16]
   25b60:	b	2639c <__assert_fail@plt+0x137ac>
   25b64:	ldrd	r0, [r5, #-104]	; 0xffffff98
   25b68:	b	25c50 <__assert_fail@plt+0x13060>
   25b6c:	ldr	r0, [r5, #-208]	; 0xffffff30
   25b70:	mov	r7, r2
   25b74:	cmp	r0, #4
   25b78:	blt	261dc <__assert_fail@plt+0x135ec>
   25b7c:	sub	r0, r5, #224	; 0xe0
   25b80:	vldr	d18, [r5, #-208]	; 0xffffff30
   25b84:	vld1.64	{d16-d17}, [r0]
   25b88:	ldr	r0, [sp, #92]	; 0x5c
   25b8c:	vst1.64	{d16-d17}, [r0]!
   25b90:	vstr	d18, [r0]
   25b94:	ldrd	r0, [r5, #-104]	; 0xffffff98
   25b98:	b	25c54 <__assert_fail@plt+0x13064>
   25b9c:	mov	r8, r2
   25ba0:	ldrd	r0, [r5, #-104]	; 0xffffff98
   25ba4:	ldr	r2, [sp, #132]	; 0x84
   25ba8:	mov	r7, r3
   25bac:	strd	r0, [r2]
   25bb0:	ldrd	r0, [r5, #-56]	; 0xffffffc8
   25bb4:	ldr	r2, [sp, #136]	; 0x88
   25bb8:	strd	r0, [r2]
   25bbc:	ldrd	r0, [r6]
   25bc0:	ldr	r2, [sp, #76]	; 0x4c
   25bc4:	rsbs	r0, r0, #0
   25bc8:	rsc	r3, r1, #0
   25bcc:	stm	r2, {r0, r3}
   25bd0:	ands	r0, r1, r3
   25bd4:	bmi	264b0 <__assert_fail@plt+0x138c0>
   25bd8:	ldr	r0, [r5, #16]
   25bdc:	mov	r3, r7
   25be0:	mov	r2, r8
   25be4:	b	25c44 <__assert_fail@plt+0x13054>
   25be8:	mov	r9, r2
   25bec:	ldrd	r0, [r5, #-112]	; 0xffffff90
   25bf0:	ldr	r2, [sp, #136]	; 0x88
   25bf4:	mov	r8, r3
   25bf8:	mov	r7, #1
   25bfc:	strd	r0, [r2]
   25c00:	ldrd	r0, [r5, #-48]	; 0xffffffd0
   25c04:	ldr	r2, [sp, #132]	; 0x84
   25c08:	rsbs	r0, r0, #0
   25c0c:	rsc	r3, r1, #0
   25c10:	stm	r2, {r0, r3}
   25c14:	ands	r0, r1, r3
   25c18:	bmi	264b4 <__assert_fail@plt+0x138c4>
   25c1c:	ldrd	r0, [r6]
   25c20:	ldr	r2, [sp, #76]	; 0x4c
   25c24:	rsbs	r0, r0, #0
   25c28:	rsc	r3, r1, #0
   25c2c:	stm	r2, {r0, r3}
   25c30:	ands	r0, r1, r3
   25c34:	bmi	264b4 <__assert_fail@plt+0x138c4>
   25c38:	ldr	r0, [r5, #16]
   25c3c:	mov	r3, r8
   25c40:	mov	r2, r9
   25c44:	str	r0, [r4, #48]	; 0x30
   25c48:	b	2639c <__assert_fail@plt+0x137ac>
   25c4c:	ldrd	r0, [r5, #-56]	; 0xffffffc8
   25c50:	mov	r7, r2
   25c54:	ldr	r2, [sp, #136]	; 0x88
   25c58:	strd	r0, [r2]
   25c5c:	ldrd	r0, [r6]
   25c60:	ldr	r2, [sp, #132]	; 0x84
   25c64:	strd	r0, [r2]
   25c68:	mov	r2, r7
   25c6c:	b	2639c <__assert_fail@plt+0x137ac>
   25c70:	mov	r6, r2
   25c74:	ldrd	r0, [r5, #-168]	; 0xffffff58
   25c78:	ldr	r2, [sp, #136]	; 0x88
   25c7c:	strd	r0, [r2]
   25c80:	ldrd	r0, [r5, #-104]	; 0xffffff98
   25c84:	ldr	r2, [sp, #132]	; 0x84
   25c88:	b	25cc8 <__assert_fail@plt+0x130d8>
   25c8c:	mov	r6, r2
   25c90:	ldrd	r0, [r5, #-48]	; 0xffffffd0
   25c94:	ldr	r2, [sp, #132]	; 0x84
   25c98:	strd	r0, [r2]
   25c9c:	ldrd	r0, [r5]
   25ca0:	ldr	r2, [sp, #136]	; 0x88
   25ca4:	strd	r0, [r2]
   25ca8:	mov	r2, r6
   25cac:	b	2639c <__assert_fail@plt+0x137ac>
   25cb0:	mov	r6, r2
   25cb4:	ldrd	r0, [r5, #-104]	; 0xffffff98
   25cb8:	ldr	r2, [sp, #132]	; 0x84
   25cbc:	strd	r0, [r2]
   25cc0:	ldrd	r0, [r5, #-56]	; 0xffffffc8
   25cc4:	ldr	r2, [sp, #136]	; 0x88
   25cc8:	strd	r0, [r2]
   25ccc:	mov	r0, r5
   25cd0:	mov	r2, r6
   25cd4:	b	261fc <__assert_fail@plt+0x1360c>
   25cd8:	sub	r0, r5, #112	; 0x70
   25cdc:	vldr	d18, [r5, #-96]	; 0xffffffa0
   25ce0:	mov	r9, r2
   25ce4:	ldr	r2, [sp, #136]	; 0x88
   25ce8:	mov	r8, r3
   25cec:	mov	r7, #1
   25cf0:	vld1.64	{d16-d17}, [r0]
   25cf4:	ldr	r0, [sp, #92]	; 0x5c
   25cf8:	vst1.64	{d16-d17}, [r0]!
   25cfc:	vstr	d18, [r0]
   25d00:	ldrd	r0, [r5, #-48]	; 0xffffffd0
   25d04:	rsbs	r0, r0, #0
   25d08:	rsc	r3, r1, #0
   25d0c:	stm	r2, {r0, r3}
   25d10:	ands	r0, r1, r3
   25d14:	bmi	264b4 <__assert_fail@plt+0x138c4>
   25d18:	ldrd	r0, [r6]
   25d1c:	ldr	r2, [sp, #132]	; 0x84
   25d20:	rsbs	r0, r0, #0
   25d24:	rsc	r3, r1, #0
   25d28:	stm	r2, {r0, r3}
   25d2c:	mov	r2, r9
   25d30:	ands	r0, r1, r3
   25d34:	mov	r3, r8
   25d38:	bpl	2639c <__assert_fail@plt+0x137ac>
   25d3c:	b	264b4 <__assert_fail@plt+0x138c4>
   25d40:	ldr	r0, [r5, #-56]	; 0xffffffc8
   25d44:	ldr	sl, [r5, #-48]	; 0xffffffd0
   25d48:	ldr	r1, [r5, #-12]
   25d4c:	str	r2, [sp, #120]	; 0x78
   25d50:	ldr	r2, [r5, #-8]
   25d54:	str	r3, [sp, #72]	; 0x48
   25d58:	ldmda	r5, {r3, ip}
   25d5c:	ldr	r7, [r5, #-40]	; 0xffffffd8
   25d60:	str	ip, [sp, #48]	; 0x30
   25d64:	str	lr, [sp, #84]	; 0x54
   25d68:	ldr	r6, [r5, #-36]	; 0xffffffdc
   25d6c:	ldr	lr, [r5, #-28]	; 0xffffffe4
   25d70:	ldr	r8, [r5, #-24]	; 0xffffffe8
   25d74:	ldr	r9, [r5, #-20]	; 0xffffffec
   25d78:	str	r3, [sp, #44]	; 0x2c
   25d7c:	str	r0, [sp, #64]	; 0x40
   25d80:	ldr	r0, [r5, #-52]	; 0xffffffcc
   25d84:	str	r2, [sp, #40]	; 0x28
   25d88:	str	r1, [sp, #36]	; 0x24
   25d8c:	str	sl, [sp]
   25d90:	ldr	r2, [sp, #64]	; 0x40
   25d94:	str	r0, [sp, #60]	; 0x3c
   25d98:	ldr	r0, [r5, #-44]	; 0xffffffd4
   25d9c:	ldr	r3, [sp, #60]	; 0x3c
   25da0:	str	r0, [sp, #56]	; 0x38
   25da4:	ldr	r0, [r5, #-32]	; 0xffffffe0
   25da8:	str	r0, [sp, #52]	; 0x34
   25dac:	ldr	r0, [r5, #-16]
   25db0:	str	r0, [sp, #32]
   25db4:	ldr	r0, [sp, #56]	; 0x38
   25db8:	stmib	sp, {r0, r7}
   25dbc:	ldr	r0, [sp, #52]	; 0x34
   25dc0:	str	r6, [sp, #12]
   25dc4:	str	lr, [sp, #20]
   25dc8:	str	r8, [sp, #24]
   25dcc:	str	r9, [sp, #28]
   25dd0:	str	r0, [sp, #16]
   25dd4:	mov	r0, r4
   25dd8:	bl	26698 <__assert_fail@plt+0x13aa8>
   25ddc:	ldr	r2, [sp, #120]	; 0x78
   25de0:	ldr	r3, [sp, #72]	; 0x48
   25de4:	ldr	lr, [sp, #84]	; 0x54
   25de8:	sub	ip, fp, #92	; 0x5c
   25dec:	cmp	r0, #0
   25df0:	bne	2639c <__assert_fail@plt+0x137ac>
   25df4:	b	264b0 <__assert_fail@plt+0x138c0>
   25df8:	ldrd	r0, [r5, #-56]	; 0xffffffc8
   25dfc:	str	r0, [sp, #204]	; 0xcc
   25e00:	mov	r0, #0
   25e04:	str	r1, [sp, #200]	; 0xc8
   25e08:	str	r0, [sp, #196]	; 0xc4
   25e0c:	mov	r0, #0
   25e10:	str	r0, [sp, #188]	; 0xbc
   25e14:	mov	r0, #0
   25e18:	str	r0, [sp, #192]	; 0xc0
   25e1c:	mov	r0, #0
   25e20:	str	r0, [sp, #184]	; 0xb8
   25e24:	mov	r0, #0
   25e28:	str	r0, [sp, #180]	; 0xb4
   25e2c:	mov	r0, #0
   25e30:	str	r0, [sp, #176]	; 0xb0
   25e34:	mov	r0, #0
   25e38:	str	r0, [sp, #172]	; 0xac
   25e3c:	mov	r0, #0
   25e40:	str	r0, [sp, #164]	; 0xa4
   25e44:	mov	r0, #0
   25e48:	str	r0, [sp, #168]	; 0xa8
   25e4c:	mov	r0, #0
   25e50:	str	r0, [sp, #160]	; 0xa0
   25e54:	mov	r0, #0
   25e58:	str	r0, [sp, #156]	; 0x9c
   25e5c:	b	2639c <__assert_fail@plt+0x137ac>
   25e60:	mov	r0, #0
   25e64:	str	r0, [sp, #196]	; 0xc4
   25e68:	mov	r0, #1
   25e6c:	str	r0, [sp, #204]	; 0xcc
   25e70:	mov	r0, #0
   25e74:	str	r0, [sp, #188]	; 0xbc
   25e78:	mov	r0, #0
   25e7c:	str	r0, [sp, #192]	; 0xc0
   25e80:	mov	r0, #0
   25e84:	str	r0, [sp, #184]	; 0xb8
   25e88:	mov	r0, #0
   25e8c:	str	r0, [sp, #180]	; 0xb4
   25e90:	mov	r0, #0
   25e94:	str	r0, [sp, #176]	; 0xb0
   25e98:	mov	r0, #0
   25e9c:	str	r0, [sp, #172]	; 0xac
   25ea0:	mov	r0, #0
   25ea4:	str	r0, [sp, #164]	; 0xa4
   25ea8:	mov	r0, #0
   25eac:	str	r0, [sp, #168]	; 0xa8
   25eb0:	mov	r0, #0
   25eb4:	str	r0, [sp, #160]	; 0xa0
   25eb8:	mov	r0, #0
   25ebc:	str	r0, [sp, #156]	; 0x9c
   25ec0:	b	26394 <__assert_fail@plt+0x137a4>
   25ec4:	ldrd	r0, [r5, #-56]	; 0xffffffc8
   25ec8:	str	r1, [sp, #188]	; 0xbc
   25ecc:	b	25edc <__assert_fail@plt+0x132ec>
   25ed0:	mov	r0, #0
   25ed4:	str	r0, [sp, #188]	; 0xbc
   25ed8:	mov	r0, #1
   25edc:	str	r0, [sp, #196]	; 0xc4
   25ee0:	mov	r0, #0
   25ee4:	str	r0, [sp, #192]	; 0xc0
   25ee8:	mov	r0, #0
   25eec:	str	r0, [sp, #184]	; 0xb8
   25ef0:	b	26354 <__assert_fail@plt+0x13764>
   25ef4:	ldrd	r8, [r5]
   25ef8:	cmn	r9, #1
   25efc:	ble	26270 <__assert_fail@plt+0x13680>
   25f00:	ldrd	r6, [r5, #-56]	; 0xffffffc8
   25f04:	orrs	r0, r8, r9
   25f08:	beq	26330 <__assert_fail@plt+0x13740>
   25f0c:	cmn	r7, #1
   25f10:	ble	26214 <__assert_fail@plt+0x13624>
   25f14:	str	r2, [sp, #120]	; 0x78
   25f18:	mov	sl, r3
   25f1c:	mvn	r0, #0
   25f20:	mvn	r1, #-2147483648	; 0x80000000
   25f24:	mov	r2, r8
   25f28:	mov	r3, r9
   25f2c:	str	r7, [sp, #204]	; 0xcc
   25f30:	mov	r7, r6
   25f34:	mov	r6, lr
   25f38:	bl	3cfc8 <__assert_fail@plt+0x2a3d8>
   25f3c:	b	262b0 <__assert_fail@plt+0x136c0>
   25f40:	ldrd	r0, [r5, #-56]	; 0xffffffc8
   25f44:	str	r0, [sp, #180]	; 0xb4
   25f48:	mov	r0, #0
   25f4c:	str	r1, [sp, #176]	; 0xb0
   25f50:	str	r0, [sp, #196]	; 0xc4
   25f54:	mov	r0, #0
   25f58:	str	r0, [sp, #188]	; 0xbc
   25f5c:	mov	r0, #0
   25f60:	str	r0, [sp, #192]	; 0xc0
   25f64:	mov	r0, #0
   25f68:	str	r0, [sp, #184]	; 0xb8
   25f6c:	b	26364 <__assert_fail@plt+0x13774>
   25f70:	mov	r0, #0
   25f74:	str	r0, [sp, #196]	; 0xc4
   25f78:	mov	r0, #1
   25f7c:	str	r0, [sp, #180]	; 0xb4
   25f80:	mov	r0, #0
   25f84:	str	r0, [sp, #188]	; 0xbc
   25f88:	mov	r0, #0
   25f8c:	str	r0, [sp, #192]	; 0xc0
   25f90:	mov	r0, #0
   25f94:	str	r0, [sp, #184]	; 0xb8
   25f98:	b	2635c <__assert_fail@plt+0x1376c>
   25f9c:	ldrd	r0, [r5, #-56]	; 0xffffffc8
   25fa0:	str	r0, [sp, #172]	; 0xac
   25fa4:	mov	r0, #0
   25fa8:	str	r1, [sp, #164]	; 0xa4
   25fac:	str	r0, [sp, #196]	; 0xc4
   25fb0:	mov	r0, #0
   25fb4:	str	r0, [sp, #188]	; 0xbc
   25fb8:	mov	r0, #0
   25fbc:	str	r0, [sp, #192]	; 0xc0
   25fc0:	mov	r0, #0
   25fc4:	str	r0, [sp, #184]	; 0xb8
   25fc8:	mov	r0, #0
   25fcc:	str	r0, [sp, #180]	; 0xb4
   25fd0:	mov	r0, #0
   25fd4:	str	r0, [sp, #176]	; 0xb0
   25fd8:	b	26374 <__assert_fail@plt+0x13784>
   25fdc:	mov	r0, #0
   25fe0:	str	r0, [sp, #196]	; 0xc4
   25fe4:	mov	r0, #1
   25fe8:	str	r0, [sp, #172]	; 0xac
   25fec:	mov	r0, #0
   25ff0:	str	r0, [sp, #188]	; 0xbc
   25ff4:	mov	r0, #0
   25ff8:	str	r0, [sp, #192]	; 0xc0
   25ffc:	mov	r0, #0
   26000:	str	r0, [sp, #184]	; 0xb8
   26004:	mov	r0, #0
   26008:	str	r0, [sp, #180]	; 0xb4
   2600c:	mov	r0, #0
   26010:	str	r0, [sp, #176]	; 0xb0
   26014:	b	2636c <__assert_fail@plt+0x1377c>
   26018:	ldrd	r0, [r5, #-56]	; 0xffffffc8
   2601c:	str	r0, [sp, #168]	; 0xa8
   26020:	mov	r0, #0
   26024:	str	r1, [sp, #160]	; 0xa0
   26028:	str	r0, [sp, #196]	; 0xc4
   2602c:	mov	r0, #0
   26030:	str	r0, [sp, #188]	; 0xbc
   26034:	mov	r0, #0
   26038:	str	r0, [sp, #192]	; 0xc0
   2603c:	mov	r0, #0
   26040:	str	r0, [sp, #184]	; 0xb8
   26044:	mov	r0, #0
   26048:	str	r0, [sp, #180]	; 0xb4
   2604c:	mov	r0, #0
   26050:	str	r0, [sp, #176]	; 0xb0
   26054:	mov	r0, #0
   26058:	str	r0, [sp, #172]	; 0xac
   2605c:	mov	r0, #0
   26060:	str	r0, [sp, #164]	; 0xa4
   26064:	b	26384 <__assert_fail@plt+0x13794>
   26068:	mov	r0, #0
   2606c:	str	r0, [sp, #196]	; 0xc4
   26070:	mov	r0, #1
   26074:	str	r0, [sp, #168]	; 0xa8
   26078:	mov	r0, #0
   2607c:	str	r0, [sp, #188]	; 0xbc
   26080:	mov	r0, #0
   26084:	str	r0, [sp, #192]	; 0xc0
   26088:	mov	r0, #0
   2608c:	str	r0, [sp, #184]	; 0xb8
   26090:	mov	r0, #0
   26094:	str	r0, [sp, #180]	; 0xb4
   26098:	mov	r0, #0
   2609c:	str	r0, [sp, #176]	; 0xb0
   260a0:	mov	r0, #0
   260a4:	str	r0, [sp, #172]	; 0xac
   260a8:	mov	r0, #0
   260ac:	str	r0, [sp, #164]	; 0xa4
   260b0:	b	2637c <__assert_fail@plt+0x1378c>
   260b4:	ldrd	r0, [r6]
   260b8:	mov	r8, r3
   260bc:	mov	r9, r2
   260c0:	ldrd	r2, [r5]
   260c4:	ldrd	r6, [sl]
   260c8:	stm	sp, {r0, r1, r6, r7}
   260cc:	mov	r0, r4
   260d0:	mov	r6, lr
   260d4:	bl	26c18 <__assert_fail@plt+0x14028>
   260d8:	mov	r2, r9
   260dc:	mov	r3, r8
   260e0:	b	2576c <__assert_fail@plt+0x12b7c>
   260e4:	sub	ip, r5, #48	; 0x30
   260e8:	str	r2, [sp, #120]	; 0x78
   260ec:	str	r3, [sp, #72]	; 0x48
   260f0:	ldr	r2, [r5, #-56]	; 0xffffffc8
   260f4:	ldr	r3, [r5, #-52]	; 0xffffffcc
   260f8:	str	lr, [sp, #84]	; 0x54
   260fc:	ldr	lr, [r5, #-36]	; 0xffffffdc
   26100:	ldm	ip, {r0, r1, ip}
   26104:	stm	sp, {r0, r1, ip, lr}
   26108:	mov	r0, r4
   2610c:	bl	26c18 <__assert_fail@plt+0x14028>
   26110:	ldr	r0, [r5, #4]
   26114:	ldr	r1, [r5]
   26118:	ldr	ip, [sl]
   2611c:	ldm	r6, {r6, lr}
   26120:	ldr	sl, [sl, #4]
   26124:	str	r0, [sp, #64]	; 0x40
   26128:	ldr	r0, [r8, #4]
   2612c:	str	r1, [sp, #60]	; 0x3c
   26130:	ldr	r8, [r8]
   26134:	str	r0, [sp, #52]	; 0x34
   26138:	ldr	r0, [r9, #4]
   2613c:	ldr	r9, [r9]
   26140:	str	r0, [sp, #56]	; 0x38
   26144:	ldm	r7, {r0, r1, r2}
   26148:	ldr	r3, [r7, #12]
   2614c:	str	r0, [sp, #32]
   26150:	ldr	r0, [sp, #52]	; 0x34
   26154:	mov	r7, #1
   26158:	str	r2, [sp, #40]	; 0x28
   2615c:	str	r1, [sp, #36]	; 0x24
   26160:	ldr	r2, [sp, #60]	; 0x3c
   26164:	str	r7, [sp, #48]	; 0x30
   26168:	str	r3, [sp, #44]	; 0x2c
   2616c:	stm	sp, {r6, lr}
   26170:	str	r0, [sp, #20]
   26174:	ldr	r0, [sp, #56]	; 0x38
   26178:	ldr	r3, [sp, #64]	; 0x40
   2617c:	str	ip, [sp, #8]
   26180:	str	sl, [sp, #12]
   26184:	str	r8, [sp, #16]
   26188:	str	r9, [sp, #24]
   2618c:	str	r0, [sp, #28]
   26190:	mov	r0, r4
   26194:	bl	26698 <__assert_fail@plt+0x13aa8>
   26198:	ldr	r2, [sp, #120]	; 0x78
   2619c:	ldr	r3, [sp, #72]	; 0x48
   261a0:	ldr	lr, [sp, #84]	; 0x54
   261a4:	sub	ip, fp, #92	; 0x5c
   261a8:	cmp	r0, #0
   261ac:	bne	2639c <__assert_fail@plt+0x137ac>
   261b0:	b	264b4 <__assert_fail@plt+0x138c4>
   261b4:	mvn	r0, #0
   261b8:	str	r0, [sp, #204]	; 0xcc
   261bc:	mvn	r0, #0
   261c0:	b	26398 <__assert_fail@plt+0x137a8>
   261c4:	ldrd	r0, [r6]
   261c8:	str	r1, [sp, #200]	; 0xc8
   261cc:	str	r0, [sp, #204]	; 0xcc
   261d0:	b	2639c <__assert_fail@plt+0x137ac>
   261d4:	ldrd	r6, [r5, #-48]	; 0xffffffd0
   261d8:	b	26274 <__assert_fail@plt+0x13684>
   261dc:	ldrd	r0, [r5, #-216]	; 0xffffff28
   261e0:	ldr	r2, [sp, #136]	; 0x88
   261e4:	strd	r0, [r2]
   261e8:	ldrd	r0, [r5, #-104]	; 0xffffff98
   261ec:	ldr	r2, [sp, #132]	; 0x84
   261f0:	strd	r0, [r2]
   261f4:	mov	r0, r5
   261f8:	mov	r2, r7
   261fc:	vld1.64	{d16-d17}, [r0]!
   26200:	vldr	d18, [r0]
   26204:	ldr	r0, [sp, #92]	; 0x5c
   26208:	vst1.64	{d16-d17}, [r0]!
   2620c:	vstr	d18, [r0]
   26210:	b	2639c <__assert_fail@plt+0x137ac>
   26214:	and	r0, r6, r7
   26218:	cmn	r0, #1
   2621c:	beq	26328 <__assert_fail@plt+0x13738>
   26220:	str	r2, [sp, #120]	; 0x78
   26224:	mov	sl, r3
   26228:	mov	r0, #0
   2622c:	mov	r1, #-2147483648	; 0x80000000
   26230:	mov	r2, r6
   26234:	mov	r3, r7
   26238:	str	r7, [sp, #204]	; 0xcc
   2623c:	mov	r7, r6
   26240:	mov	r6, lr
   26244:	bl	3cef4 <__assert_fail@plt+0x2a304>
   26248:	mov	lr, r6
   2624c:	mov	r6, r7
   26250:	ldr	r2, [sp, #120]	; 0x78
   26254:	ldr	r7, [sp, #204]	; 0xcc
   26258:	subs	r0, r0, r8
   2625c:	mov	r3, sl
   26260:	sub	ip, fp, #92	; 0x5c
   26264:	sbcs	r0, r1, r9
   26268:	bge	26330 <__assert_fail@plt+0x13740>
   2626c:	b	264b0 <__assert_fail@plt+0x138c0>
   26270:	ldrd	r6, [r5, #-56]	; 0xffffffc8
   26274:	cmn	r7, #1
   26278:	ble	262d8 <__assert_fail@plt+0x136e8>
   2627c:	and	r0, r8, r9
   26280:	cmn	r0, #1
   26284:	beq	26330 <__assert_fail@plt+0x13740>
   26288:	str	r2, [sp, #120]	; 0x78
   2628c:	mov	sl, r3
   26290:	mov	r0, #0
   26294:	mov	r1, #-2147483648	; 0x80000000
   26298:	mov	r2, r8
   2629c:	mov	r3, r9
   262a0:	str	r7, [sp, #204]	; 0xcc
   262a4:	mov	r7, r6
   262a8:	mov	r6, lr
   262ac:	bl	3cef4 <__assert_fail@plt+0x2a304>
   262b0:	mov	lr, r6
   262b4:	mov	r6, r7
   262b8:	ldr	r7, [sp, #204]	; 0xcc
   262bc:	ldr	r2, [sp, #120]	; 0x78
   262c0:	mov	r3, sl
   262c4:	sub	ip, fp, #92	; 0x5c
   262c8:	subs	r0, r0, r6
   262cc:	sbcs	r0, r1, r7
   262d0:	bge	26330 <__assert_fail@plt+0x13740>
   262d4:	b	264b0 <__assert_fail@plt+0x138c0>
   262d8:	str	r2, [sp, #120]	; 0x78
   262dc:	mov	sl, r3
   262e0:	mvn	r0, #0
   262e4:	mvn	r1, #-2147483648	; 0x80000000
   262e8:	mov	r2, r8
   262ec:	mov	r3, r9
   262f0:	str	r7, [sp, #204]	; 0xcc
   262f4:	mov	r7, r6
   262f8:	mov	r6, lr
   262fc:	bl	3cef4 <__assert_fail@plt+0x2a304>
   26300:	mov	lr, r6
   26304:	mov	r6, r7
   26308:	ldr	r7, [sp, #204]	; 0xcc
   2630c:	ldr	r2, [sp, #120]	; 0x78
   26310:	mov	r3, sl
   26314:	sub	ip, fp, #92	; 0x5c
   26318:	subs	r0, r6, r0
   2631c:	sbcs	r0, r7, r1
   26320:	bge	26330 <__assert_fail@plt+0x13740>
   26324:	b	264b0 <__assert_fail@plt+0x138c0>
   26328:	mvn	r6, #0
   2632c:	mvn	r7, #0
   26330:	umull	r1, r0, r6, r8
   26334:	mla	r0, r6, r9, r0
   26338:	mla	r0, r7, r8, r0
   2633c:	str	r1, [sp, #192]	; 0xc0
   26340:	str	r0, [sp, #184]	; 0xb8
   26344:	mov	r0, #0
   26348:	str	r0, [sp, #196]	; 0xc4
   2634c:	mov	r0, #0
   26350:	str	r0, [sp, #188]	; 0xbc
   26354:	mov	r0, #0
   26358:	str	r0, [sp, #180]	; 0xb4
   2635c:	mov	r0, #0
   26360:	str	r0, [sp, #176]	; 0xb0
   26364:	mov	r0, #0
   26368:	str	r0, [sp, #172]	; 0xac
   2636c:	mov	r0, #0
   26370:	str	r0, [sp, #164]	; 0xa4
   26374:	mov	r0, #0
   26378:	str	r0, [sp, #168]	; 0xa8
   2637c:	mov	r0, #0
   26380:	str	r0, [sp, #160]	; 0xa0
   26384:	mov	r0, #0
   26388:	str	r0, [sp, #156]	; 0x9c
   2638c:	mov	r0, #0
   26390:	str	r0, [sp, #204]	; 0xcc
   26394:	mov	r0, #0
   26398:	str	r0, [sp, #200]	; 0xc8
   2639c:	sub	r0, r2, r2, lsl #3
   263a0:	ldr	sl, [sp, #148]	; 0x94
   263a4:	ldr	r6, [sp, #152]	; 0x98
   263a8:	add	r5, r5, r0, lsl #3
   263ac:	ldr	r0, [sp, #204]	; 0xcc
   263b0:	sub	sl, sl, r2
   263b4:	movw	r2, #8796	; 0x225c
   263b8:	movt	r2, #4
   263bc:	str	r0, [r5, #56]!	; 0x38
   263c0:	ldr	r0, [sp, #200]	; 0xc8
   263c4:	str	r0, [r5, #4]
   263c8:	ldr	r0, [sp, #196]	; 0xc4
   263cc:	str	r0, [r5, #8]
   263d0:	ldr	r0, [sp, #188]	; 0xbc
   263d4:	str	r0, [r5, #12]
   263d8:	ldr	r0, [sp, #192]	; 0xc0
   263dc:	str	r0, [r5, #16]
   263e0:	ldr	r0, [sp, #184]	; 0xb8
   263e4:	str	r0, [r5, #20]
   263e8:	ldr	r0, [sp, #180]	; 0xb4
   263ec:	str	r0, [r5, #24]
   263f0:	ldr	r0, [sp, #176]	; 0xb0
   263f4:	str	r0, [r5, #28]
   263f8:	ldr	r0, [sp, #172]	; 0xac
   263fc:	str	r0, [r5, #32]
   26400:	ldr	r0, [sp, #164]	; 0xa4
   26404:	str	r0, [r5, #36]	; 0x24
   26408:	ldr	r0, [sp, #168]	; 0xa8
   2640c:	str	r0, [r5, #40]	; 0x28
   26410:	ldr	r0, [sp, #160]	; 0xa0
   26414:	str	r0, [r5, #44]	; 0x2c
   26418:	ldr	r0, [sp, #156]	; 0x9c
   2641c:	str	r0, [r5, #48]	; 0x30
   26420:	ldr	r0, [sp, #144]	; 0x90
   26424:	str	r0, [r5, #52]	; 0x34
   26428:	add	r0, ip, sl, lsl #1
   2642c:	ldrsh	r1, [r0]
   26430:	movw	r0, #8704	; 0x2200
   26434:	movt	r0, #4
   26438:	ldrb	r0, [r0, r3]
   2643c:	sub	r0, r0, #28
   26440:	add	r2, r2, r0
   26444:	ldrsb	r2, [r2]
   26448:	add	r2, r1, r2
   2644c:	cmp	r2, #112	; 0x70
   26450:	bhi	2647c <__assert_fail@plt+0x1388c>
   26454:	movw	r3, #8272	; 0x2050
   26458:	movt	r3, #4
   2645c:	add	r3, r3, r2
   26460:	ldrsb	r3, [r3]
   26464:	cmp	r3, r1
   26468:	bne	2647c <__assert_fail@plt+0x1388c>
   2646c:	movw	r0, #8385	; 0x20c1
   26470:	movt	r0, #4
   26474:	ldrb	r8, [r0, r2]
   26478:	b	2648c <__assert_fail@plt+0x1389c>
   2647c:	movw	r1, #8822	; 0x2276
   26480:	movt	r1, #4
   26484:	add	r0, r1, r0
   26488:	ldrsb	r8, [r0]
   2648c:	add	sl, sl, #1
   26490:	add	r0, ip, sl, lsl #1
   26494:	cmp	sl, #18
   26498:	strh	r8, [r0]
   2649c:	ble	24aec <__assert_fail@plt+0x11efc>
   264a0:	mov	r7, #2
   264a4:	b	264b4 <__assert_fail@plt+0x138c4>
   264a8:	mov	r7, #0
   264ac:	b	264b4 <__assert_fail@plt+0x138c4>
   264b0:	mov	r7, #1
   264b4:	mov	r0, r7
   264b8:	sub	sp, fp, #28
   264bc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   264c0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   264c4:	add	fp, sp, #28
   264c8:	sub	sp, sp, #4
   264cc:	mov	r4, r0
   264d0:	ldr	r0, [fp, #16]
   264d4:	ldr	r8, [fp, #28]
   264d8:	mov	r1, #0
   264dc:	ldr	r6, [fp, #12]
   264e0:	mov	r5, #100	; 0x64
   264e4:	cmp	r0, #3
   264e8:	mov	r0, #0
   264ec:	movwlt	r0, #1
   264f0:	cmp	r8, #0
   264f4:	movwmi	r1, #1
   264f8:	ands	r0, r1, r0
   264fc:	ldr	r0, [fp, #8]
   26500:	umull	r7, r1, r0, r5
   26504:	moveq	r7, r0
   26508:	mlane	r6, r6, r5, r1
   2650c:	cmn	r8, #1
   26510:	ble	2654c <__assert_fail@plt+0x1395c>
   26514:	ldr	lr, [fp, #24]
   26518:	mov	sl, r2
   2651c:	cmn	r6, #1
   26520:	str	r4, [sp]
   26524:	ble	26590 <__assert_fail@plt+0x139a0>
   26528:	movw	r1, #8738	; 0x2222
   2652c:	movw	r0, #8738	; 0x2222
   26530:	mov	ip, #1
   26534:	movt	r1, #8738	; 0x2222
   26538:	movt	r0, #546	; 0x222
   2653c:	subs	r1, r1, r7
   26540:	sbcs	r0, r0, r6
   26544:	bge	265cc <__assert_fail@plt+0x139dc>
   26548:	b	265d0 <__assert_fail@plt+0x139e0>
   2654c:	mov	r0, r7
   26550:	mov	r1, r6
   26554:	mov	r2, #100	; 0x64
   26558:	mov	r3, #0
   2655c:	bl	3cef4 <__assert_fail@plt+0x2a304>
   26560:	umull	r2, r3, r0, r5
   26564:	mla	r3, r1, r5, r3
   26568:	rsb	r1, r1, r1, lsl #4
   2656c:	subs	r2, r7, r2
   26570:	mov	r7, #60	; 0x3c
   26574:	umull	r0, r7, r0, r7
   26578:	sbc	r3, r6, r3
   2657c:	add	r7, r7, r1, lsl #2
   26580:	adds	r1, r0, r2
   26584:	mov	r2, #1
   26588:	adc	r0, r7, r3
   2658c:	b	26664 <__assert_fail@plt+0x13a74>
   26590:	and	r0, r7, r6
   26594:	cmn	r0, #1
   26598:	beq	265cc <__assert_fail@plt+0x139dc>
   2659c:	mov	r0, #0
   265a0:	mov	r1, #-2147483648	; 0x80000000
   265a4:	mov	r2, r7
   265a8:	mov	r3, r6
   265ac:	mov	r4, lr
   265b0:	bl	3cef4 <__assert_fail@plt+0x2a304>
   265b4:	subs	r0, r0, #60	; 0x3c
   265b8:	mov	lr, r4
   265bc:	mov	ip, #1
   265c0:	sbcs	r0, r1, #0
   265c4:	movge	ip, #0
   265c8:	b	265d0 <__assert_fail@plt+0x139e0>
   265cc:	mov	ip, #0
   265d0:	mov	r0, #60	; 0x3c
   265d4:	cmn	r8, #1
   265d8:	mov	r5, #0
   265dc:	mov	r4, #0
   265e0:	mov	r3, #0
   265e4:	umull	r1, r0, r7, r0
   265e8:	rsb	r7, r6, r6, lsl #4
   265ec:	movwgt	r5, #1
   265f0:	mov	r6, #0
   265f4:	add	r7, r0, r7, lsl #2
   265f8:	cmn	r7, #1
   265fc:	movwgt	r6, #1
   26600:	subs	r2, r6, r5
   26604:	sub	r5, r6, r5
   26608:	movwne	r2, #1
   2660c:	subs	r9, r1, lr
   26610:	clz	r5, r5
   26614:	sbc	r0, r7, r8
   26618:	lsr	r5, r5, #5
   2661c:	cmn	r0, #1
   26620:	movwgt	r4, #1
   26624:	subs	r4, r6, r4
   26628:	movwne	r4, #1
   2662c:	adds	r1, r1, lr
   26630:	and	r2, r2, r4
   26634:	adc	r4, r7, r8
   26638:	cmn	r4, #1
   2663c:	movwgt	r3, #1
   26640:	subs	r3, r6, r3
   26644:	movwne	r3, #1
   26648:	ands	r6, sl, #1
   2664c:	moveq	r0, r4
   26650:	ldr	r4, [sp]
   26654:	andeq	r2, r5, r3
   26658:	movne	r1, r9
   2665c:	orr	r2, ip, r2
   26660:	eor	r2, r2, #1
   26664:	adds	r3, r1, #1440	; 0x5a0
   26668:	adc	r7, r0, #0
   2666c:	mov	r0, #0
   26670:	cmp	r2, #0
   26674:	beq	26690 <__assert_fail@plt+0x13aa0>
   26678:	rsbs	r2, r3, #2880	; 0xb40
   2667c:	rscs	r2, r7, #0
   26680:	rsbcs	r0, r1, r1, lsl #4
   26684:	lslcs	r0, r0, #2
   26688:	strcs	r0, [r4, #24]
   2668c:	movcs	r0, #1
   26690:	sub	sp, fp, #28
   26694:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   26698:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2669c:	add	fp, sp, #28
   266a0:	sub	sp, sp, #48	; 0x30
   266a4:	ldr	r5, [fp, #56]	; 0x38
   266a8:	ldr	r1, [r0, #144]	; 0x90
   266ac:	ldr	r7, [fp, #40]	; 0x28
   266b0:	ldr	r9, [fp, #36]	; 0x24
   266b4:	ldr	r6, [fp, #48]	; 0x30
   266b8:	str	r3, [fp, #-32]	; 0xffffffe0
   266bc:	add	r8, r0, #96	; 0x60
   266c0:	add	sl, r0, #104	; 0x68
   266c4:	add	lr, r0, #112	; 0x70
   266c8:	add	ip, r0, #120	; 0x78
   266cc:	add	r4, r0, #128	; 0x80
   266d0:	add	r3, r0, #136	; 0x88
   266d4:	str	r0, [sp, #36]	; 0x24
   266d8:	cmn	r5, #1
   266dc:	str	r1, [fp, #-36]	; 0xffffffdc
   266e0:	ble	26988 <__assert_fail@plt+0x13d98>
   266e4:	add	r5, r1, r6
   266e8:	ldr	r6, [fp, #32]
   266ec:	str	r5, [sp, #32]
   266f0:	str	r5, [r0, #144]	; 0x90
   266f4:	ldr	r5, [r3]
   266f8:	ldr	r1, [r3, #4]
   266fc:	adds	r0, r5, r7
   26700:	ldr	r5, [fp, #44]	; 0x2c
   26704:	adc	r5, r1, r5
   26708:	stm	r3, {r0, r5}
   2670c:	ldm	r4, {r0, r3}
   26710:	adds	r0, r0, r6
   26714:	ldr	r6, [fp, #24]
   26718:	adc	r9, r3, r9
   2671c:	stm	r4, {r0, r9}
   26720:	ldm	ip, {r0, r4}
   26724:	adds	r6, r0, r6
   26728:	ldr	r0, [fp, #28]
   2672c:	adc	r7, r4, r0
   26730:	ldr	r0, [fp, #16]
   26734:	strd	r6, [ip]
   26738:	ldm	lr, {r6, ip}
   2673c:	str	ip, [sp, #20]
   26740:	adds	r6, r6, r0
   26744:	ldr	r0, [fp, #20]
   26748:	adc	r0, ip, r0
   2674c:	str	r0, [sp, #24]
   26750:	str	r6, [lr]
   26754:	str	r0, [lr, #4]
   26758:	ldr	r0, [fp, #8]
   2675c:	ldm	sl, {r6, lr}
   26760:	adds	r6, r6, r0
   26764:	ldr	r0, [fp, #12]
   26768:	adc	r0, lr, r0
   2676c:	str	r0, [sp, #28]
   26770:	str	r6, [sl]
   26774:	str	r0, [sl, #4]
   26778:	ldm	r8, {r6, sl}
   2677c:	ldr	ip, [fp, #-32]	; 0xffffffe0
   26780:	adds	r2, r6, r2
   26784:	mov	r6, sl
   26788:	adc	r0, sl, ip
   2678c:	cmn	r1, #1
   26790:	str	r2, [r8]
   26794:	mov	r1, #0
   26798:	mov	r2, #0
   2679c:	mov	sl, #0
   267a0:	str	r0, [r8, #4]
   267a4:	mov	r8, r0
   267a8:	mov	r0, #0
   267ac:	movwgt	r0, #1
   267b0:	cmn	r5, #1
   267b4:	mov	r5, #0
   267b8:	movwgt	r1, #1
   267bc:	str	r0, [sp, #16]
   267c0:	subs	r0, r0, r1
   267c4:	mov	r1, #0
   267c8:	movwne	r0, #1
   267cc:	str	r0, [sp, #12]
   267d0:	ldr	r0, [fp, #44]	; 0x2c
   267d4:	cmn	r0, #1
   267d8:	mov	r0, #0
   267dc:	movwgt	r0, #1
   267e0:	cmn	r3, #1
   267e4:	mov	r3, #0
   267e8:	str	r0, [sp, #8]
   267ec:	ldr	r0, [fp, #36]	; 0x24
   267f0:	movwgt	r1, #1
   267f4:	cmn	r9, #1
   267f8:	mov	r9, #0
   267fc:	movwgt	r2, #1
   26800:	subs	r2, r1, r2
   26804:	movwne	r2, #1
   26808:	cmn	r0, #1
   2680c:	mov	r0, #0
   26810:	movwgt	r0, #1
   26814:	cmn	r4, #1
   26818:	movwgt	r5, #1
   2681c:	cmn	r7, #1
   26820:	str	r0, [sp, #4]
   26824:	mov	r0, #0
   26828:	mov	r7, #0
   2682c:	movwgt	r0, #1
   26830:	subs	r4, r5, r0
   26834:	ldr	r0, [fp, #28]
   26838:	movwne	r4, #1
   2683c:	cmn	r0, #1
   26840:	mov	r0, #0
   26844:	movwgt	r0, #1
   26848:	str	r0, [sp]
   2684c:	ldr	r0, [sp, #20]
   26850:	cmn	r0, #1
   26854:	ldr	r0, [sp, #24]
   26858:	movwgt	sl, #1
   2685c:	cmn	r0, #1
   26860:	mov	r0, #0
   26864:	movwgt	r0, #1
   26868:	subs	r0, sl, r0
   2686c:	movwne	r0, #1
   26870:	str	r0, [sp, #24]
   26874:	ldr	r0, [fp, #20]
   26878:	cmn	r0, #1
   2687c:	ldr	r0, [sp, #28]
   26880:	movwgt	r9, #1
   26884:	cmn	lr, #1
   26888:	mov	lr, #0
   2688c:	movwgt	r3, #1
   26890:	cmn	r0, #1
   26894:	mov	r0, #0
   26898:	movwgt	r0, #1
   2689c:	subs	r0, r3, r0
   268a0:	movwne	r0, #1
   268a4:	str	r0, [sp, #28]
   268a8:	ldr	r0, [fp, #12]
   268ac:	cmn	r0, #1
   268b0:	mov	r0, #0
   268b4:	movwgt	r0, #1
   268b8:	cmn	r6, #1
   268bc:	mov	r6, #0
   268c0:	movwgt	r6, #1
   268c4:	cmn	r8, #1
   268c8:	movwgt	r7, #1
   268cc:	subs	r8, r6, r7
   268d0:	ldr	r7, [sp, #32]
   268d4:	movwne	r8, #1
   268d8:	cmn	ip, #1
   268dc:	ldr	ip, [fp, #-36]	; 0xffffffdc
   268e0:	movwgt	lr, #1
   268e4:	cmp	r7, ip
   268e8:	bvs	26be0 <__assert_fail@plt+0x13ff0>
   268ec:	mov	ip, r4
   268f0:	mov	r4, r2
   268f4:	ldr	r7, [sp, #16]
   268f8:	ldr	r2, [sp, #8]
   268fc:	sub	r7, r7, r2
   26900:	ldr	r2, [sp, #12]
   26904:	clz	r7, r7
   26908:	lsr	r7, r7, #5
   2690c:	ands	r7, r7, r2
   26910:	bne	26be0 <__assert_fail@plt+0x13ff0>
   26914:	ldr	r2, [sp, #4]
   26918:	mov	r7, #0
   2691c:	sub	r1, r1, r2
   26920:	clz	r1, r1
   26924:	lsr	r1, r1, #5
   26928:	ands	r1, r1, r4
   2692c:	bne	26c0c <__assert_fail@plt+0x1401c>
   26930:	ldr	r1, [sp]
   26934:	sub	r1, r5, r1
   26938:	clz	r1, r1
   2693c:	lsr	r1, r1, #5
   26940:	ands	r1, r1, ip
   26944:	ldreq	r2, [sp, #24]
   26948:	subeq	r1, sl, r9
   2694c:	clzeq	r1, r1
   26950:	lsreq	r1, r1, #5
   26954:	andseq	r1, r1, r2
   26958:	bne	26c0c <__assert_fail@plt+0x1401c>
   2695c:	ldr	r1, [sp, #28]
   26960:	sub	r0, r3, r0
   26964:	clz	r0, r0
   26968:	lsr	r0, r0, #5
   2696c:	ands	r0, r0, r1
   26970:	subeq	r0, r6, lr
   26974:	clzeq	r0, r0
   26978:	lsreq	r0, r0, #5
   2697c:	andseq	r0, r0, r8
   26980:	bne	26c0c <__assert_fail@plt+0x1401c>
   26984:	b	26c00 <__assert_fail@plt+0x14010>
   26988:	sub	r5, r1, r6
   2698c:	ldr	r6, [fp, #32]
   26990:	mov	r1, #0
   26994:	str	r5, [r0, #144]	; 0x90
   26998:	ldm	r3, {r5, r9}
   2699c:	subs	r0, r5, r7
   269a0:	ldr	r5, [fp, #44]	; 0x2c
   269a4:	sbc	r5, r9, r5
   269a8:	stm	r3, {r0, r5}
   269ac:	ldm	r4, {r0, r3}
   269b0:	subs	r0, r0, r6
   269b4:	ldr	r6, [fp, #36]	; 0x24
   269b8:	sbc	r6, r3, r6
   269bc:	str	r6, [sp, #8]
   269c0:	stm	r4, {r0, r6}
   269c4:	ldr	r6, [fp, #24]
   269c8:	ldr	r4, [ip]
   269cc:	ldr	r0, [ip, #4]
   269d0:	subs	r6, r4, r6
   269d4:	ldr	r4, [fp, #28]
   269d8:	str	r6, [ip]
   269dc:	sbc	r4, r0, r4
   269e0:	str	r4, [ip, #4]
   269e4:	mov	ip, r4
   269e8:	ldr	r4, [fp, #16]
   269ec:	ldrd	r6, [lr]
   269f0:	subs	r6, r6, r4
   269f4:	ldr	r4, [fp, #20]
   269f8:	str	r7, [sp, #12]
   269fc:	sbc	r7, r7, r4
   26a00:	ldr	r4, [fp, #8]
   26a04:	str	r7, [sp, #16]
   26a08:	strd	r6, [lr]
   26a0c:	ldrd	r6, [sl]
   26a10:	subs	r6, r6, r4
   26a14:	ldr	r4, [fp, #12]
   26a18:	str	r7, [sp, #20]
   26a1c:	sbc	r4, r7, r4
   26a20:	str	r4, [sp, #24]
   26a24:	str	r6, [sl]
   26a28:	str	r4, [sl, #4]
   26a2c:	ldr	r6, [r8]
   26a30:	ldr	r4, [r8, #4]
   26a34:	ldr	r7, [fp, #-32]	; 0xffffffe0
   26a38:	subs	r2, r6, r2
   26a3c:	str	r4, [sp, #28]
   26a40:	sbc	r6, r4, r7
   26a44:	str	r6, [sp, #32]
   26a48:	stm	r8, {r2, r6}
   26a4c:	ldr	r2, [fp, #44]	; 0x2c
   26a50:	mov	r6, #0
   26a54:	cmn	r2, #1
   26a58:	mov	r2, #0
   26a5c:	movwgt	r1, #1
   26a60:	cmn	r9, #1
   26a64:	ldr	r9, [fp, #-36]	; 0xffffffdc
   26a68:	movwgt	r2, #1
   26a6c:	subs	r1, r2, r1
   26a70:	movwne	r1, #1
   26a74:	cmn	r5, #1
   26a78:	str	r1, [sp, #4]
   26a7c:	mov	r1, #0
   26a80:	movwgt	r1, #1
   26a84:	subs	r1, r2, r1
   26a88:	mov	r2, #0
   26a8c:	movwne	r1, #1
   26a90:	str	r1, [sp]
   26a94:	ldr	r1, [fp, #36]	; 0x24
   26a98:	cmn	r1, #1
   26a9c:	mov	r1, #0
   26aa0:	movwgt	r1, #1
   26aa4:	cmn	r3, #1
   26aa8:	movwgt	r2, #1
   26aac:	subs	r8, r2, r1
   26ab0:	ldr	r1, [sp, #8]
   26ab4:	movwne	r8, #1
   26ab8:	cmn	r1, #1
   26abc:	mov	r1, #0
   26ac0:	movwgt	r1, #1
   26ac4:	subs	sl, r2, r1
   26ac8:	ldr	r1, [fp, #28]
   26acc:	mov	r2, #0
   26ad0:	movwne	sl, #1
   26ad4:	cmn	r1, #1
   26ad8:	mov	r1, #0
   26adc:	movwgt	r1, #1
   26ae0:	cmn	r0, #1
   26ae4:	mov	r0, #0
   26ae8:	movwgt	r0, #1
   26aec:	subs	lr, r0, r1
   26af0:	mov	r1, #0
   26af4:	movwne	lr, #1
   26af8:	cmn	ip, #1
   26afc:	movwgt	r1, #1
   26b00:	subs	ip, r0, r1
   26b04:	ldr	r0, [fp, #20]
   26b08:	ldr	r1, [sp, #12]
   26b0c:	movwne	ip, #1
   26b10:	cmn	r0, #1
   26b14:	mov	r0, #0
   26b18:	movwgt	r0, #1
   26b1c:	cmn	r1, #1
   26b20:	ldr	r1, [sp, #20]
   26b24:	movwgt	r2, #1
   26b28:	subs	r3, r2, r0
   26b2c:	ldr	r0, [sp, #16]
   26b30:	movwne	r3, #1
   26b34:	cmn	r0, #1
   26b38:	mov	r0, #0
   26b3c:	movwgt	r0, #1
   26b40:	subs	r5, r2, r0
   26b44:	ldr	r0, [fp, #12]
   26b48:	mov	r2, #0
   26b4c:	movwne	r5, #1
   26b50:	cmn	r0, #1
   26b54:	mov	r0, #0
   26b58:	movwgt	r0, #1
   26b5c:	cmn	r1, #1
   26b60:	ldr	r1, [sp, #24]
   26b64:	movwgt	r2, #1
   26b68:	subs	r0, r2, r0
   26b6c:	movwne	r0, #1
   26b70:	cmn	r1, #1
   26b74:	ldr	r1, [sp, #28]
   26b78:	movwgt	r6, #1
   26b7c:	subs	r4, r2, r6
   26b80:	mov	r2, #0
   26b84:	movwne	r4, #1
   26b88:	cmn	r7, #1
   26b8c:	mov	r7, #0
   26b90:	movwgt	r2, #1
   26b94:	cmn	r1, #1
   26b98:	movwgt	r7, #1
   26b9c:	subs	r6, r7, r2
   26ba0:	ldr	r2, [sp, #32]
   26ba4:	movwne	r6, #1
   26ba8:	cmn	r2, #1
   26bac:	mov	r2, #0
   26bb0:	movwgt	r2, #1
   26bb4:	subs	r2, r7, r2
   26bb8:	ldr	r7, [fp, #48]	; 0x30
   26bbc:	movwne	r2, #1
   26bc0:	cmp	r9, r7
   26bc4:	bvs	26be0 <__assert_fail@plt+0x13ff0>
   26bc8:	ldm	sp, {r1, r7}
   26bcc:	ands	r7, r7, r1
   26bd0:	bne	26be0 <__assert_fail@plt+0x13ff0>
   26bd4:	ands	r7, r8, sl
   26bd8:	andseq	r1, lr, ip
   26bdc:	beq	26be8 <__assert_fail@plt+0x13ff8>
   26be0:	mov	r7, #0
   26be4:	b	26c0c <__assert_fail@plt+0x1401c>
   26be8:	ands	r1, r3, r5
   26bec:	mov	r7, #0
   26bf0:	andseq	r0, r0, r4
   26bf4:	bne	26c0c <__assert_fail@plt+0x1401c>
   26bf8:	ands	r0, r6, r2
   26bfc:	bne	26c0c <__assert_fail@plt+0x1401c>
   26c00:	ldr	r0, [sp, #36]	; 0x24
   26c04:	mov	r7, #1
   26c08:	strb	r7, [r0, #153]	; 0x99
   26c0c:	mov	r0, r7
   26c10:	sub	sp, fp, #28
   26c14:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   26c18:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   26c1c:	add	fp, sp, #28
   26c20:	sub	sp, sp, #4
   26c24:	mov	r4, r0
   26c28:	add	r7, r0, #40	; 0x28
   26c2c:	ldr	r0, [r0, #156]	; 0x9c
   26c30:	ldr	r8, [fp, #16]
   26c34:	ldr	r9, [fp, #12]
   26c38:	ldr	sl, [fp, #8]
   26c3c:	cmp	r0, #0
   26c40:	beq	26c78 <__assert_fail@plt+0x14088>
   26c44:	mov	r1, r3
   26c48:	mov	r3, r7
   26c4c:	ldr	r5, [r3, #8]!
   26c50:	cmp	r5, #0
   26c54:	bne	26c78 <__assert_fail@plt+0x14088>
   26c58:	ldrb	r5, [r4, #153]	; 0x99
   26c5c:	cmp	r5, #0
   26c60:	bne	26c78 <__assert_fail@plt+0x14088>
   26c64:	cmp	r8, #2
   26c68:	bgt	26d60 <__assert_fail@plt+0x14170>
   26c6c:	ldr	r5, [r4, #172]	; 0xac
   26c70:	cmp	r5, #0
   26c74:	bne	26d60 <__assert_fail@plt+0x14170>
   26c78:	cmp	r8, #5
   26c7c:	blt	26ce4 <__assert_fail@plt+0x140f4>
   26c80:	add	r0, r0, #1
   26c84:	mov	r1, r9
   26c88:	mov	r2, #100	; 0x64
   26c8c:	mov	r3, #0
   26c90:	add	r5, r4, #56	; 0x38
   26c94:	add	r6, r4, #64	; 0x40
   26c98:	str	r0, [r4, #156]	; 0x9c
   26c9c:	mov	r0, sl
   26ca0:	bl	3cef4 <__assert_fail@plt+0x2a304>
   26ca4:	strd	r2, [r6]
   26ca8:	mov	r2, #100	; 0x64
   26cac:	mov	r3, #0
   26cb0:	bl	3cef4 <__assert_fail@plt+0x2a304>
   26cb4:	mov	r0, r2
   26cb8:	mov	r1, r3
   26cbc:	movw	r2, #10000	; 0x2710
   26cc0:	mov	r3, #0
   26cc4:	strd	r0, [r5]
   26cc8:	mov	r0, sl
   26ccc:	mov	r1, r9
   26cd0:	bl	3cef4 <__assert_fail@plt+0x2a304>
   26cd4:	strd	r0, [r7]
   26cd8:	sub	r0, r8, #4
   26cdc:	str	r0, [r4, #48]	; 0x30
   26ce0:	b	26d58 <__assert_fail@plt+0x14168>
   26ce4:	ldr	r0, [r4, #172]	; 0xac
   26ce8:	add	r5, r4, #72	; 0x48
   26cec:	add	r7, r4, #80	; 0x50
   26cf0:	mov	r6, #0
   26cf4:	cmp	r8, #3
   26cf8:	add	r0, r0, #1
   26cfc:	str	r0, [r4, #172]	; 0xac
   26d00:	bge	26d18 <__assert_fail@plt+0x14128>
   26d04:	mov	r0, sl
   26d08:	mov	r1, r9
   26d0c:	mov	r2, #0
   26d10:	mov	r3, #0
   26d14:	b	26d40 <__assert_fail@plt+0x14150>
   26d18:	mov	r0, sl
   26d1c:	mov	r1, r9
   26d20:	mov	r2, #100	; 0x64
   26d24:	mov	r3, #0
   26d28:	mov	r8, #100	; 0x64
   26d2c:	bl	3cef4 <__assert_fail@plt+0x2a304>
   26d30:	umull	r2, r3, r0, r8
   26d34:	mla	r3, r1, r8, r3
   26d38:	subs	r2, sl, r2
   26d3c:	sbc	r3, r9, r3
   26d40:	strd	r0, [r5]
   26d44:	mov	r0, #2
   26d48:	strd	r2, [r7]
   26d4c:	str	r6, [r4, #88]	; 0x58
   26d50:	str	r6, [r4, #92]	; 0x5c
   26d54:	str	r0, [r4, #28]
   26d58:	sub	sp, fp, #28
   26d5c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   26d60:	mov	r5, #1
   26d64:	add	r0, r4, #32
   26d68:	ldr	ip, [fp, #20]
   26d6c:	strb	r5, [r4, #180]	; 0xb4
   26d70:	str	r2, [r0]
   26d74:	str	r1, [r0, #4]
   26d78:	str	sl, [r7]
   26d7c:	str	r9, [r7, #4]
   26d80:	stm	r3, {r8, ip}
   26d84:	b	26d58 <__assert_fail@plt+0x14168>
   26d88:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   26d8c:	add	fp, sp, #28
   26d90:	sub	sp, sp, #620	; 0x26c
   26d94:	mov	r9, r0
   26d98:	movw	r0, #10585	; 0x2959
   26d9c:	mov	r6, r2
   26da0:	mov	r4, r1
   26da4:	movt	r0, #4
   26da8:	bl	127f4 <getenv@plt>
   26dac:	bl	3bac0 <__assert_fail@plt+0x28ed0>
   26db0:	cmp	r0, #0
   26db4:	beq	27054 <__assert_fail@plt+0x14464>
   26db8:	mov	r7, r0
   26dbc:	add	sl, sp, #136	; 0x88
   26dc0:	cmp	r6, #0
   26dc4:	bne	26dd4 <__assert_fail@plt+0x141e4>
   26dc8:	sub	r6, fp, #184	; 0xb8
   26dcc:	mov	r0, r6
   26dd0:	bl	3c6b0 <__assert_fail@plt+0x29ac0>
   26dd4:	add	r0, sl, #8
   26dd8:	ldr	r8, [r6]
   26ddc:	add	r5, r4, #4
   26de0:	str	r0, [sp, #20]
   26de4:	add	r0, sl, #40	; 0x28
   26de8:	str	r0, [sp, #64]	; 0x40
   26dec:	add	r0, sl, #56	; 0x38
   26df0:	str	r0, [sp, #60]	; 0x3c
   26df4:	add	r0, sl, #64	; 0x40
   26df8:	str	r0, [sp, #56]	; 0x38
   26dfc:	add	r0, sl, #72	; 0x48
   26e00:	str	r0, [sp, #52]	; 0x34
   26e04:	add	r0, sl, #80	; 0x50
   26e08:	str	r0, [sp, #48]	; 0x30
   26e0c:	add	r0, sl, #88	; 0x58
   26e10:	str	r0, [sp, #32]
   26e14:	add	r0, sl, #96	; 0x60
   26e18:	str	r0, [sp, #44]	; 0x2c
   26e1c:	add	r0, sl, #104	; 0x68
   26e20:	str	r0, [sp, #24]
   26e24:	add	r0, sl, #112	; 0x70
   26e28:	str	r0, [sp, #28]
   26e2c:	add	r0, sl, #120	; 0x78
   26e30:	str	r0, [sp, #16]
   26e34:	add	r0, sl, #128	; 0x80
   26e38:	str	r0, [sp, #12]
   26e3c:	add	r0, sl, #136	; 0x88
   26e40:	str	r0, [sp, #8]
   26e44:	ldr	r0, [r6, #4]
   26e48:	str	r0, [sp, #40]	; 0x28
   26e4c:	ldrb	r0, [r5, #-4]
   26e50:	sub	r1, r0, #9
   26e54:	cmp	r1, #5
   26e58:	bcs	26e64 <__assert_fail@plt+0x14274>
   26e5c:	add	r5, r5, #1
   26e60:	b	26e4c <__assert_fail@plt+0x1425c>
   26e64:	cmp	r0, #32
   26e68:	beq	26e5c <__assert_fail@plt+0x1426c>
   26e6c:	vmov.i32	q8, #0	; 0x00000000
   26e70:	str	r9, [sp, #36]	; 0x24
   26e74:	sub	r9, fp, #240	; 0xf0
   26e78:	mov	r0, #52	; 0x34
   26e7c:	mov	r2, #0
   26e80:	sub	r4, r5, #4
   26e84:	str	r6, [sp, #72]	; 0x48
   26e88:	mov	r1, r9
   26e8c:	str	r2, [fp, #-192]	; 0xffffff40
   26e90:	vst1.64	{d16-d17}, [r1], r0
   26e94:	add	r0, r9, #32
   26e98:	str	r2, [r1]
   26e9c:	movw	r1, #11175	; 0x2ba7
   26ea0:	vst1.64	{d16-d17}, [r0]
   26ea4:	add	r0, r9, #16
   26ea8:	mov	r2, #4
   26eac:	movt	r1, #4
   26eb0:	vst1.64	{d16-d17}, [r0]
   26eb4:	mov	r0, r4
   26eb8:	bl	12b90 <strncmp@plt>
   26ebc:	cmp	r0, #0
   26ec0:	str	r7, [sp, #76]	; 0x4c
   26ec4:	beq	2705c <__assert_fail@plt+0x1446c>
   26ec8:	mov	r0, #0
   26ecc:	mov	r3, r7
   26ed0:	str	r0, [sp, #80]	; 0x50
   26ed4:	mov	r0, #0
   26ed8:	str	r0, [sp, #68]	; 0x44
   26edc:	ldr	r1, [sp, #72]	; 0x48
   26ee0:	sub	r2, fp, #284	; 0x11c
   26ee4:	mov	r0, r3
   26ee8:	str	r3, [sp, #84]	; 0x54
   26eec:	bl	3bb74 <__assert_fail@plt+0x28f84>
   26ef0:	cmp	r0, #0
   26ef4:	beq	27148 <__assert_fail@plt+0x14558>
   26ef8:	ldrb	r0, [r4]
   26efc:	movw	r1, #58985	; 0xe669
   26f00:	ldr	ip, [sp, #64]	; 0x40
   26f04:	movw	r2, #1900	; 0x76c
   26f08:	vmov.i32	q8, #0	; 0x00000000
   26f0c:	add	lr, sp, #256	; 0x100
   26f10:	movt	r1, #3
   26f14:	cmp	r0, #0
   26f18:	ldr	r0, [fp, #-264]	; 0xfffffef8
   26f1c:	movne	r1, r4
   26f20:	str	r1, [sp, #136]	; 0x88
   26f24:	asr	r1, r0, #31
   26f28:	adds	r0, r0, r2
   26f2c:	adc	r1, r1, #0
   26f30:	strd	r0, [ip]
   26f34:	ldr	r1, [fp, #-268]	; 0xfffffef4
   26f38:	mov	r0, #0
   26f3c:	str	r0, [sp, #184]	; 0xb8
   26f40:	add	r2, r1, #1
   26f44:	ldr	r1, [sp, #60]	; 0x3c
   26f48:	asr	r3, r2, #31
   26f4c:	strd	r2, [r1]
   26f50:	ldr	r2, [fp, #-272]	; 0xfffffef0
   26f54:	ldr	r1, [sp, #56]	; 0x38
   26f58:	asr	r3, r2, #31
   26f5c:	strd	r2, [r1]
   26f60:	ldr	r2, [fp, #-276]	; 0xfffffeec
   26f64:	ldr	r1, [sp, #52]	; 0x34
   26f68:	asr	r3, r2, #31
   26f6c:	strd	r2, [r1]
   26f70:	ldr	r2, [fp, #-280]	; 0xfffffee8
   26f74:	ldr	r1, [sp, #48]	; 0x30
   26f78:	asr	r3, r2, #31
   26f7c:	strd	r2, [r1]
   26f80:	ldr	r1, [sp, #40]	; 0x28
   26f84:	ldr	r2, [fp, #-252]	; 0xffffff04
   26f88:	str	r1, [sp, #228]	; 0xe4
   26f8c:	mov	r1, #2
   26f90:	str	r2, [fp, #-44]	; 0xffffffd4
   26f94:	str	r1, [sp, #164]	; 0xa4
   26f98:	ldr	r1, [fp, #-284]	; 0xfffffee4
   26f9c:	str	r1, [sp, #224]	; 0xe0
   26fa0:	ldr	r1, [sp, #44]	; 0x2c
   26fa4:	ldm	r9!, {r3, r5, r6, r7}
   26fa8:	stmia	r1!, {r3, r5, r6, r7}
   26fac:	ldm	r9!, {r3, r4, r5, r6, r7}
   26fb0:	stmia	r1!, {r3, r4, r5, r6, r7}
   26fb4:	ldm	r9, {r3, r4, r5, r6, r7}
   26fb8:	add	r9, sp, #88	; 0x58
   26fbc:	stm	r1, {r3, r4, r5, r6, r7}
   26fc0:	add	r1, sl, #156	; 0x9c
   26fc4:	movw	r6, #42752	; 0xa700
   26fc8:	mov	r5, #3
   26fcc:	add	r4, sp, #132	; 0x84
   26fd0:	vst1.32	{d16-d17}, [r1]
   26fd4:	add	r1, sl, #172	; 0xac
   26fd8:	movt	r6, #118	; 0x76
   26fdc:	add	sl, ip, #8
   26fe0:	vst1.32	{d16-d17}, [r1]
   26fe4:	strh	r0, [lr, #32]
   26fe8:	str	r0, [sp, #336]	; 0x150
   26fec:	movw	r0, #269	; 0x10d
   26ff0:	str	r2, [sp, #332]	; 0x14c
   26ff4:	str	r0, [sp, #328]	; 0x148
   26ff8:	ldr	r0, [fp, #-244]	; 0xffffff0c
   26ffc:	mov	r7, r6
   27000:	str	r0, [sp, #324]	; 0x144
   27004:	adds	r0, r8, r7
   27008:	str	r0, [sp, #132]	; 0x84
   2700c:	bvs	270dc <__assert_fail@plt+0x144ec>
   27010:	ldr	r0, [sp, #84]	; 0x54
   27014:	mov	r1, r4
   27018:	mov	r2, r9
   2701c:	bl	3bb74 <__assert_fail@plt+0x28f84>
   27020:	cmp	r0, #0
   27024:	beq	27044 <__assert_fail@plt+0x14454>
   27028:	ldr	r0, [sp, #128]	; 0x80
   2702c:	cmp	r0, #0
   27030:	beq	27044 <__assert_fail@plt+0x14454>
   27034:	ldr	r1, [sp, #120]	; 0x78
   27038:	ldr	r2, [sp, #332]	; 0x14c
   2703c:	cmp	r1, r2
   27040:	bne	270c4 <__assert_fail@plt+0x144d4>
   27044:	add	r7, r7, r6
   27048:	subs	r5, r5, #1
   2704c:	bne	27004 <__assert_fail@plt+0x14414>
   27050:	b	270dc <__assert_fail@plt+0x144ec>
   27054:	mov	r5, #0
   27058:	b	27174 <__assert_fail@plt+0x14584>
   2705c:	mov	r0, #1
   27060:	mov	r1, r5
   27064:	ldrb	r2, [r1]
   27068:	cmp	r2, #92	; 0x5c
   2706c:	beq	27084 <__assert_fail@plt+0x14494>
   27070:	cmp	r2, #0
   27074:	beq	26ec8 <__assert_fail@plt+0x142d8>
   27078:	cmp	r2, #34	; 0x22
   2707c:	bne	27094 <__assert_fail@plt+0x144a4>
   27080:	b	270a0 <__assert_fail@plt+0x144b0>
   27084:	ldrb	r2, [r1, #1]!
   27088:	cmp	r2, #34	; 0x22
   2708c:	cmpne	r2, #92	; 0x5c
   27090:	bne	26ec8 <__assert_fail@plt+0x142d8>
   27094:	add	r0, r0, #1
   27098:	add	r1, r1, #1
   2709c:	b	27064 <__assert_fail@plt+0x14474>
   270a0:	cmp	r0, #101	; 0x65
   270a4:	bcc	27220 <__assert_fail@plt+0x14630>
   270a8:	bl	2de8c <__assert_fail@plt+0x1b29c>
   270ac:	cmp	r0, #0
   270b0:	mov	r4, r0
   270b4:	bne	27228 <__assert_fail@plt+0x14638>
   270b8:	mov	r5, #0
   270bc:	mov	r4, #0
   270c0:	b	27164 <__assert_fail@plt+0x14574>
   270c4:	mov	r2, #0
   270c8:	str	r2, [sp, #348]	; 0x15c
   270cc:	str	r1, [sp, #344]	; 0x158
   270d0:	movw	r1, #269	; 0x10d
   270d4:	str	r1, [sp, #340]	; 0x154
   270d8:	str	r0, [sp, #336]	; 0x150
   270dc:	ldr	r0, [sp, #324]	; 0x144
   270e0:	cmp	r0, #0
   270e4:	beq	2710c <__assert_fail@plt+0x1451c>
   270e8:	ldr	r1, [sp, #336]	; 0x150
   270ec:	cmp	r1, #0
   270f0:	beq	2710c <__assert_fail@plt+0x1451c>
   270f4:	bl	124f4 <strcmp@plt>
   270f8:	cmp	r0, #0
   270fc:	moveq	r0, #0
   27100:	streq	r0, [sp, #336]	; 0x150
   27104:	mvneq	r0, #0
   27108:	streq	r0, [sp, #332]	; 0x14c
   2710c:	add	r0, sp, #136	; 0x88
   27110:	bl	24a2c <__assert_fail@plt+0x11e3c>
   27114:	cmp	r0, #0
   27118:	beq	27124 <__assert_fail@plt+0x14534>
   2711c:	mov	r0, #0
   27120:	b	27144 <__assert_fail@plt+0x14554>
   27124:	ldrb	r0, [sp, #288]	; 0x120
   27128:	cmp	r0, #0
   2712c:	beq	27180 <__assert_fail@plt+0x14590>
   27130:	ldr	r0, [sp, #32]
   27134:	ldr	r2, [sp, #36]	; 0x24
   27138:	ldrd	r0, [r0]
   2713c:	stm	r2, {r0, r1}
   27140:	mov	r0, #1
   27144:	str	r0, [sp, #80]	; 0x50
   27148:	ldr	r7, [sp, #76]	; 0x4c
   2714c:	ldr	r0, [sp, #84]	; 0x54
   27150:	cmp	r0, r7
   27154:	beq	2715c <__assert_fail@plt+0x1456c>
   27158:	bl	3bb4c <__assert_fail@plt+0x28f5c>
   2715c:	ldr	r4, [sp, #68]	; 0x44
   27160:	ldr	r5, [sp, #80]	; 0x50
   27164:	mov	r0, r4
   27168:	bl	2bcbc <__assert_fail@plt+0x190cc>
   2716c:	mov	r0, r7
   27170:	bl	3bb4c <__assert_fail@plt+0x28f5c>
   27174:	mov	r0, r5
   27178:	sub	sp, fp, #28
   2717c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   27180:	mov	r0, #0
   27184:	ldr	r3, [sp, #312]	; 0x138
   27188:	ldr	r1, [sp, #292]	; 0x124
   2718c:	ldr	r2, [sp, #296]	; 0x128
   27190:	ldr	r7, [sp, #304]	; 0x130
   27194:	str	r0, [sp, #80]	; 0x50
   27198:	ldr	r0, [sp, #300]	; 0x12c
   2719c:	orr	r2, r2, r1
   271a0:	add	r6, r3, r0
   271a4:	ldr	r3, [sp, #308]	; 0x134
   271a8:	orr	r1, r2, r3
   271ac:	orr	r7, r1, r7
   271b0:	orr	r7, r7, r6
   271b4:	cmp	r7, #1
   271b8:	bgt	27148 <__assert_fail@plt+0x14558>
   271bc:	ldr	r7, [sp, #64]	; 0x40
   271c0:	mvn	r4, #0
   271c4:	ldr	r5, [r7, #4]
   271c8:	ldr	r8, [r7]
   271cc:	cmp	r5, #0
   271d0:	bmi	272a8 <__assert_fail@plt+0x146b8>
   271d4:	ldr	r7, [sl]
   271d8:	cmp	r7, #2
   271dc:	bne	2720c <__assert_fail@plt+0x1461c>
   271e0:	subs	r6, r8, #69	; 0x45
   271e4:	mov	r7, #0
   271e8:	sbcs	r6, r5, #0
   271ec:	movw	r6, #1900	; 0x76c
   271f0:	movwlt	r7, #1
   271f4:	cmp	r7, #0
   271f8:	movwne	r6, #2000	; 0x7d0
   271fc:	adds	r8, r6, r8
   27200:	adc	r5, r5, #0
   27204:	cmn	r5, #1
   27208:	ble	272a8 <__assert_fail@plt+0x146b8>
   2720c:	movw	r7, #1900	; 0x76c
   27210:	subs	r8, r8, r7
   27214:	sbc	r7, r5, #0
   27218:	str	r8, [fp, #-56]	; 0xffffffc8
   2721c:	b	272bc <__assert_fail@plt+0x146cc>
   27220:	mov	r4, #0
   27224:	sub	r0, fp, #176	; 0xb0
   27228:	ldrb	r2, [r5]
   2722c:	mov	r1, r0
   27230:	cmp	r2, #34	; 0x22
   27234:	beq	27254 <__assert_fail@plt+0x14664>
   27238:	uxtb	r2, r2
   2723c:	cmp	r2, #92	; 0x5c
   27240:	addeq	r5, r5, #1
   27244:	ldrb	r2, [r5]
   27248:	strb	r2, [r1], #1
   2724c:	ldrb	r2, [r5, #1]!
   27250:	b	27230 <__assert_fail@plt+0x14640>
   27254:	mov	r2, #0
   27258:	strb	r2, [r1]
   2725c:	bl	3bac0 <__assert_fail@plt+0x28ed0>
   27260:	cmp	r0, #0
   27264:	beq	272a0 <__assert_fail@plt+0x146b0>
   27268:	str	r4, [sp, #68]	; 0x44
   2726c:	mov	r3, r0
   27270:	add	r4, r5, #1
   27274:	ldrb	r0, [r4]
   27278:	sub	r1, r0, #9
   2727c:	cmp	r1, #5
   27280:	bcs	2728c <__assert_fail@plt+0x1469c>
   27284:	add	r4, r4, #1
   27288:	b	27274 <__assert_fail@plt+0x14684>
   2728c:	cmp	r0, #32
   27290:	beq	27284 <__assert_fail@plt+0x14694>
   27294:	mov	r0, #0
   27298:	str	r0, [sp, #80]	; 0x50
   2729c:	b	26edc <__assert_fail@plt+0x142ec>
   272a0:	mov	r5, #0
   272a4:	b	27164 <__assert_fail@plt+0x14574>
   272a8:	movw	r7, #63636	; 0xf894
   272ac:	movt	r7, #65535	; 0xffff
   272b0:	subs	r8, r7, r8
   272b4:	str	r8, [fp, #-56]	; 0xffffffc8
   272b8:	sbc	r7, r4, r5
   272bc:	teq	r7, r8, asr #31
   272c0:	bne	27148 <__assert_fail@plt+0x14558>
   272c4:	ldr	r7, [sp, #60]	; 0x3c
   272c8:	mov	r5, #0
   272cc:	mov	r4, #0
   272d0:	str	r5, [sp, #80]	; 0x50
   272d4:	mov	r5, #0
   272d8:	ldrd	r6, [r7]
   272dc:	cmn	r7, #1
   272e0:	movwgt	r5, #1
   272e4:	subs	sl, r6, #1
   272e8:	sbc	r6, r7, #0
   272ec:	str	sl, [fp, #-60]	; 0xffffffc4
   272f0:	cmn	r6, #1
   272f4:	movwgt	r4, #1
   272f8:	subs	r5, r5, r4
   272fc:	movwne	r5, #1
   27300:	cmp	r7, #0
   27304:	mov	r7, #0
   27308:	movwmi	r7, #1
   2730c:	tst	r7, r5
   27310:	asreq	r7, sl, #31
   27314:	eoreq	r5, sl, sl
   27318:	eoreq	r7, r6, r7
   2731c:	orrseq	r7, r5, r7
   27320:	bne	27148 <__assert_fail@plt+0x14558>
   27324:	ldr	r7, [sp, #56]	; 0x38
   27328:	ldrd	r4, [r7]
   2732c:	teq	r5, r4, asr #31
   27330:	str	r4, [fp, #-64]	; 0xffffffc0
   27334:	bne	27148 <__assert_fail@plt+0x14558>
   27338:	cmp	r3, #0
   2733c:	bne	27354 <__assert_fail@plt+0x14764>
   27340:	cmp	r2, #0
   27344:	bne	273f4 <__assert_fail@plt+0x14804>
   27348:	ldrb	r2, [sp, #289]	; 0x121
   2734c:	cmp	r2, #0
   27350:	beq	273f4 <__assert_fail@plt+0x14804>
   27354:	ldr	r2, [sp, #52]	; 0x34
   27358:	ldr	r5, [r2]
   2735c:	ldr	r3, [r2, #4]
   27360:	ldr	r2, [sp, #164]	; 0xa4
   27364:	cmp	r2, #0
   27368:	beq	273a0 <__assert_fail@plt+0x147b0>
   2736c:	cmp	r2, #1
   27370:	bne	273c4 <__assert_fail@plt+0x147d4>
   27374:	eor	r2, r5, #12
   27378:	orrs	r2, r2, r3
   2737c:	mvn	r2, #0
   27380:	movweq	r2, #12
   27384:	subs	r7, r5, #1
   27388:	sbc	r3, r3, #0
   2738c:	subs	r7, r7, #11
   27390:	sbcs	r3, r3, #0
   27394:	addcc	r2, r5, #12
   27398:	mov	r5, r2
   2739c:	b	273d0 <__assert_fail@plt+0x147e0>
   273a0:	eor	r2, r5, #12
   273a4:	orrs	r2, r2, r3
   273a8:	mvnne	r2, #0
   273ac:	subs	r7, r5, #1
   273b0:	sbc	r3, r3, #0
   273b4:	subs	r7, r7, #11
   273b8:	sbcs	r3, r3, #0
   273bc:	movcs	r5, r2
   273c0:	b	273d0 <__assert_fail@plt+0x147e0>
   273c4:	subs	r2, r5, #24
   273c8:	sbcs	r2, r3, #0
   273cc:	mvncs	r5, #0
   273d0:	cmp	r5, #0
   273d4:	str	r5, [fp, #-68]	; 0xffffffbc
   273d8:	bmi	27148 <__assert_fail@plt+0x14558>
   273dc:	ldr	r2, [sp, #48]	; 0x30
   273e0:	ldr	r7, [sp, #224]	; 0xe0
   273e4:	ldr	r6, [r2]
   273e8:	str	r7, [fp, #-76]	; 0xffffffb4
   273ec:	str	r6, [fp, #-72]	; 0xffffffb8
   273f0:	b	27410 <__assert_fail@plt+0x14820>
   273f4:	mov	r5, #0
   273f8:	mov	r6, #0
   273fc:	mov	r7, #0
   27400:	str	r5, [fp, #-68]	; 0xffffffbc
   27404:	str	r5, [fp, #-72]	; 0xffffffb8
   27408:	str	r5, [fp, #-76]	; 0xffffffb4
   2740c:	str	r5, [sp, #228]	; 0xe4
   27410:	cmp	r1, #0
   27414:	mvnne	r1, #0
   27418:	strne	r1, [fp, #-44]	; 0xffffffd4
   2741c:	cmp	r0, #0
   27420:	ldr	r0, [sp, #84]	; 0x54
   27424:	beq	27438 <__assert_fail@plt+0x14848>
   27428:	ldr	r1, [sp, #156]	; 0x9c
   2742c:	str	r1, [sp, #72]	; 0x48
   27430:	str	r1, [fp, #-44]	; 0xffffffd4
   27434:	b	27440 <__assert_fail@plt+0x14850>
   27438:	ldr	r1, [fp, #-44]	; 0xffffffd4
   2743c:	str	r1, [sp, #72]	; 0x48
   27440:	mvn	r1, #0
   27444:	str	r1, [fp, #-52]	; 0xffffffcc
   27448:	sub	r1, fp, #76	; 0x4c
   2744c:	bl	3be44 <__assert_fail@plt+0x29254>
   27450:	mov	ip, r0
   27454:	ldr	r0, [fp, #-52]	; 0xffffffcc
   27458:	cmp	r0, #0
   2745c:	bmi	274a0 <__assert_fail@plt+0x148b0>
   27460:	sub	r3, fp, #76	; 0x4c
   27464:	ldm	r3, {r0, r1, r2, r3}
   27468:	eor	r1, r1, r6
   2746c:	eor	r0, r0, r7
   27470:	orr	r0, r1, r0
   27474:	eor	r1, r2, r5
   27478:	orr	r0, r0, r1
   2747c:	eor	r1, r3, r4
   27480:	orr	r0, r0, r1
   27484:	ldr	r1, [fp, #-60]	; 0xffffffc4
   27488:	eor	r1, r1, sl
   2748c:	orr	r0, r0, r1
   27490:	ldr	r1, [fp, #-56]	; 0xffffffc8
   27494:	eor	r1, r1, r8
   27498:	orrs	r0, r0, r1
   2749c:	beq	276c0 <__assert_fail@plt+0x14ad0>
   274a0:	ldr	r0, [sp, #312]	; 0x138
   274a4:	cmp	r0, #0
   274a8:	beq	27148 <__assert_fail@plt+0x14558>
   274ac:	mov	r0, #88	; 0x58
   274b0:	str	r7, [sp, #64]	; 0x40
   274b4:	ldr	r7, [sp, #160]	; 0xa0
   274b8:	str	r6, [sp, #60]	; 0x3c
   274bc:	add	r9, r9, #3
   274c0:	mov	r2, #43	; 0x2b
   274c4:	strb	r0, [sp, #90]	; 0x5a
   274c8:	movw	r0, #22616	; 0x5858
   274cc:	strh	r0, [sp, #88]	; 0x58
   274d0:	movw	r0, #46021	; 0xb3c5
   274d4:	movt	r0, #37282	; 0x91a2
   274d8:	smmla	r0, r7, r0, r7
   274dc:	asr	r1, r0, #11
   274e0:	add	r6, r1, r0, lsr #31
   274e4:	movw	r1, #10588	; 0x295c
   274e8:	mov	r0, r9
   274ec:	movt	r1, #4
   274f0:	cmp	r6, #0
   274f4:	mov	r3, r6
   274f8:	rsbmi	r3, r6, #0
   274fc:	cmp	r7, #0
   27500:	movwmi	r2, #45	; 0x2d
   27504:	bl	12a94 <sprintf@plt>
   27508:	mov	r1, #3600	; 0xe10
   2750c:	mls	r1, r6, r1, r7
   27510:	cmp	r1, #0
   27514:	beq	275d4 <__assert_fail@plt+0x149e4>
   27518:	add	r0, r9, r0
   2751c:	mov	r2, #58	; 0x3a
   27520:	rsbmi	r1, r1, #0
   27524:	mov	ip, #48	; 0x30
   27528:	mov	lr, r5
   2752c:	strb	r2, [r0]
   27530:	movw	r2, #33205	; 0x81b5
   27534:	uxth	r3, r1
   27538:	movt	r2, #6990	; 0x1b4e
   2753c:	umull	r2, r7, r3, r2
   27540:	add	r7, ip, r7, lsr #6
   27544:	strb	r7, [r0, #1]
   27548:	movw	r7, #34953	; 0x8889
   2754c:	movt	r7, #34952	; 0x8888
   27550:	umull	r3, r7, r3, r7
   27554:	movw	r3, #52429	; 0xcccd
   27558:	movt	r3, #52428	; 0xcccc
   2755c:	ubfx	r6, r7, #5, #8
   27560:	umull	r5, r2, r6, r3
   27564:	lsr	r2, r2, #3
   27568:	add	r2, r2, r2, lsl #2
   2756c:	sub	r2, r6, r2, lsl #1
   27570:	orr	r2, r2, #48	; 0x30
   27574:	strb	r2, [r0, #2]
   27578:	lsr	r2, r7, #5
   2757c:	add	r0, r0, #3
   27580:	lsl	r2, r2, #4
   27584:	sub	r2, r2, r7, lsr #5
   27588:	sub	r1, r1, r2, lsl #2
   2758c:	movw	r2, #65535	; 0xffff
   27590:	tst	r1, r2
   27594:	beq	275c8 <__assert_fail@plt+0x149d8>
   27598:	mov	r2, #58	; 0x3a
   2759c:	strb	r2, [r0]
   275a0:	uxtb	r2, r1
   275a4:	umull	r2, r3, r2, r3
   275a8:	orr	r2, ip, r3, lsr #3
   275ac:	strb	r2, [r0, #1]
   275b0:	lsr	r2, r3, #3
   275b4:	add	r2, r2, r2, lsl #2
   275b8:	sub	r1, r1, r2, lsl #1
   275bc:	orr	r1, r1, #48	; 0x30
   275c0:	strb	r1, [r0, #2]
   275c4:	add	r0, r0, #3
   275c8:	mov	r5, lr
   275cc:	mov	r1, #0
   275d0:	strb	r1, [r0]
   275d4:	add	r0, sp, #88	; 0x58
   275d8:	bl	3bac0 <__assert_fail@plt+0x28ed0>
   275dc:	cmp	r0, #0
   275e0:	beq	27148 <__assert_fail@plt+0x14558>
   275e4:	mov	r6, r0
   275e8:	ldr	r0, [sp, #72]	; 0x48
   275ec:	ldr	r7, [sp, #60]	; 0x3c
   275f0:	ldr	r9, [sp, #64]	; 0x40
   275f4:	sub	r1, fp, #76	; 0x4c
   275f8:	str	r0, [fp, #-44]	; 0xffffffd4
   275fc:	mvn	r0, #0
   27600:	str	r8, [fp, #-56]	; 0xffffffc8
   27604:	str	sl, [fp, #-60]	; 0xffffffc4
   27608:	str	r4, [fp, #-64]	; 0xffffffc0
   2760c:	str	r5, [fp, #-68]	; 0xffffffbc
   27610:	str	r7, [fp, #-72]	; 0xffffffb8
   27614:	str	r9, [fp, #-76]	; 0xffffffb4
   27618:	str	r0, [fp, #-52]	; 0xffffffcc
   2761c:	mov	r0, r6
   27620:	bl	3be44 <__assert_fail@plt+0x29254>
   27624:	ldr	r1, [fp, #-52]	; 0xffffffcc
   27628:	cmn	r1, #1
   2762c:	ble	27710 <__assert_fail@plt+0x14b20>
   27630:	str	r0, [sp]
   27634:	ldr	r0, [fp, #-56]	; 0xffffffc8
   27638:	str	r5, [sp, #56]	; 0x38
   2763c:	ldr	r5, [fp, #-76]	; 0xffffffb4
   27640:	str	r0, [sp, #52]	; 0x34
   27644:	ldr	r0, [fp, #-60]	; 0xffffffc4
   27648:	str	r0, [sp, #48]	; 0x30
   2764c:	ldr	r0, [fp, #-72]	; 0xffffffb8
   27650:	str	r0, [sp, #4]
   27654:	ldr	r0, [fp, #-68]	; 0xffffffbc
   27658:	str	r0, [sp, #32]
   2765c:	ldr	r0, [fp, #-64]	; 0xffffffc0
   27660:	str	r0, [sp, #40]	; 0x28
   27664:	mov	r0, r6
   27668:	bl	3bb4c <__assert_fail@plt+0x28f5c>
   2766c:	ldr	r1, [sp, #4]
   27670:	eor	r0, r5, r9
   27674:	ldr	r5, [sp, #56]	; 0x38
   27678:	eor	r1, r1, r7
   2767c:	orr	r0, r1, r0
   27680:	ldr	r1, [sp, #32]
   27684:	eor	r1, r1, r5
   27688:	orr	r0, r0, r1
   2768c:	ldr	r1, [sp, #40]	; 0x28
   27690:	eor	r1, r1, r4
   27694:	orr	r0, r0, r1
   27698:	ldr	r1, [sp, #48]	; 0x30
   2769c:	eor	r1, r1, sl
   276a0:	orr	r0, r0, r1
   276a4:	ldr	r1, [sp, #52]	; 0x34
   276a8:	eor	r1, r1, r8
   276ac:	orrs	r0, r0, r1
   276b0:	bne	27148 <__assert_fail@plt+0x14558>
   276b4:	mov	r6, r7
   276b8:	ldr	r7, [sp, #64]	; 0x40
   276bc:	ldr	ip, [sp]
   276c0:	mvn	r2, #0
   276c4:	ldr	r0, [sp, #296]	; 0x128
   276c8:	mov	sl, r6
   276cc:	mov	r8, r5
   276d0:	str	r7, [sp, #64]	; 0x40
   276d4:	cmp	r0, #0
   276d8:	beq	27958 <__assert_fail@plt+0x14d68>
   276dc:	ldr	r0, [sp, #292]	; 0x124
   276e0:	cmp	r0, #0
   276e4:	bne	27958 <__assert_fail@plt+0x14d68>
   276e8:	ldr	r0, [sp, #20]
   276ec:	ldrd	r4, [r0]
   276f0:	subs	r0, r4, #1
   276f4:	sbcs	r0, r5, #0
   276f8:	blt	2771c <__assert_fail@plt+0x14b2c>
   276fc:	ldr	r0, [sp, #152]	; 0x98
   27700:	ldr	r1, [fp, #-52]	; 0xffffffcc
   27704:	subs	r0, r1, r0
   27708:	movwne	r0, #1
   2770c:	b	27720 <__assert_fail@plt+0x14b30>
   27710:	mov	r0, r6
   27714:	bl	3bb4c <__assert_fail@plt+0x28f5c>
   27718:	b	27148 <__assert_fail@plt+0x14558>
   2771c:	mov	r0, #0
   27720:	subs	r0, r4, r0
   27724:	sbcs	r0, r5, #0
   27728:	bge	2774c <__assert_fail@plt+0x14b5c>
   2772c:	subs	r0, r4, #1
   27730:	sbcs	r0, r5, #0
   27734:	blt	27770 <__assert_fail@plt+0x14b80>
   27738:	ldr	r0, [sp, #152]	; 0x98
   2773c:	ldr	r1, [fp, #-52]	; 0xffffffcc
   27740:	subs	r0, r1, r0
   27744:	movwne	r0, #1
   27748:	b	27774 <__assert_fail@plt+0x14b84>
   2774c:	subs	r0, r4, #1
   27750:	mov	r2, #0
   27754:	sbcs	r0, r5, #0
   27758:	blt	277b4 <__assert_fail@plt+0x14bc4>
   2775c:	ldr	r0, [sp, #152]	; 0x98
   27760:	ldr	r1, [fp, #-52]	; 0xffffffcc
   27764:	subs	r0, r1, r0
   27768:	movwne	r0, #1
   2776c:	b	277b8 <__assert_fail@plt+0x14bc8>
   27770:	mov	r0, #0
   27774:	subs	r0, r4, r0
   27778:	sbc	r1, r5, #0
   2777c:	eor	r0, r0, r2
   27780:	eor	r1, r1, r2
   27784:	orrs	r0, r0, r1
   27788:	beq	2780c <__assert_fail@plt+0x14c1c>
   2778c:	mov	r0, #0
   27790:	str	r0, [sp, #80]	; 0x50
   27794:	subs	r0, r4, #1
   27798:	sbcs	r0, r5, #0
   2779c:	blt	277e4 <__assert_fail@plt+0x14bf4>
   277a0:	ldr	r0, [sp, #152]	; 0x98
   277a4:	ldr	r1, [fp, #-52]	; 0xffffffcc
   277a8:	subs	r0, r1, r0
   277ac:	movwne	r0, #1
   277b0:	b	277e8 <__assert_fail@plt+0x14bf8>
   277b4:	mov	r0, #0
   277b8:	movw	r3, #37449	; 0x9249
   277bc:	subs	r0, r4, r0
   277c0:	str	r2, [sp, #80]	; 0x50
   277c4:	sbc	r1, r5, r2
   277c8:	movw	r2, #9362	; 0x2492
   277cc:	movt	r3, #18724	; 0x4924
   277d0:	movt	r2, #4681	; 0x1249
   277d4:	subs	r0, r3, r0
   277d8:	sbcs	r0, r2, r1
   277dc:	blt	27148 <__assert_fail@plt+0x14558>
   277e0:	b	2780c <__assert_fail@plt+0x14c1c>
   277e4:	mov	r0, #0
   277e8:	subs	r2, r4, r0
   277ec:	ldr	r0, [sp, #80]	; 0x50
   277f0:	mov	r1, #-2147483648	; 0x80000000
   277f4:	sbc	r3, r5, r0
   277f8:	mov	r0, #0
   277fc:	bl	3cef4 <__assert_fail@plt+0x2a304>
   27800:	subs	r0, r0, #7
   27804:	sbcs	r0, r1, #0
   27808:	blt	27148 <__assert_fail@plt+0x14558>
   2780c:	rsbs	r0, r4, #0
   27810:	rscs	r0, r5, #0
   27814:	bge	2782c <__assert_fail@plt+0x14c3c>
   27818:	ldr	r1, [sp, #152]	; 0x98
   2781c:	ldr	r0, [fp, #-52]	; 0xffffffcc
   27820:	subs	r2, r0, r1
   27824:	movwne	r2, #1
   27828:	b	27838 <__assert_fail@plt+0x14c48>
   2782c:	ldr	r0, [fp, #-52]	; 0xffffffcc
   27830:	ldr	r1, [sp, #152]	; 0x98
   27834:	mov	r2, #0
   27838:	sub	r0, r1, r0
   2783c:	movw	r1, #9363	; 0x2493
   27840:	mov	r7, #7
   27844:	subs	r2, r4, r2
   27848:	mov	r3, #0
   2784c:	movt	r1, #37449	; 0x9249
   27850:	add	r0, r0, #7
   27854:	umull	r2, r7, r2, r7
   27858:	sbc	r3, r5, r3
   2785c:	rsb	r3, r3, r3, lsl #3
   27860:	smmla	r1, r0, r1, r0
   27864:	add	r3, r7, r3
   27868:	asr	r7, r1, #2
   2786c:	add	r1, r7, r1, lsr #31
   27870:	sub	r1, r1, r1, lsl #3
   27874:	add	r0, r0, r1
   27878:	adds	r1, r0, r2
   2787c:	asr	r7, r0, #31
   27880:	mov	r2, #0
   27884:	adc	r0, r7, r3
   27888:	str	r2, [sp, #80]	; 0x50
   2788c:	mov	r2, #0
   27890:	cmn	r0, #1
   27894:	movwgt	r2, #1
   27898:	cmn	r7, #1
   2789c:	mov	r7, #0
   278a0:	movwgt	r7, #1
   278a4:	subs	r2, r7, r2
   278a8:	movwne	r2, #1
   278ac:	cmn	r3, #1
   278b0:	mov	r3, #0
   278b4:	movwgt	r3, #1
   278b8:	sub	r3, r7, r3
   278bc:	clz	r3, r3
   278c0:	lsr	r3, r3, #5
   278c4:	ands	r2, r3, r2
   278c8:	bne	27148 <__assert_fail@plt+0x14558>
   278cc:	ldr	r3, [fp, #-64]	; 0xffffffc0
   278d0:	mov	r2, #0
   278d4:	cmn	r0, #1
   278d8:	mov	r7, #0
   278dc:	str	r2, [sp, #80]	; 0x50
   278e0:	mov	r2, #0
   278e4:	movwgt	r2, #1
   278e8:	adds	r1, r1, r3
   278ec:	adc	r0, r0, r3, asr #31
   278f0:	asr	r3, r3, #31
   278f4:	str	r1, [fp, #-64]	; 0xffffffc0
   278f8:	cmn	r0, #1
   278fc:	movwgt	r7, #1
   27900:	subs	r7, r2, r7
   27904:	movwne	r7, #1
   27908:	cmn	r3, #1
   2790c:	mov	r3, #0
   27910:	movwgt	r3, #1
   27914:	sub	r2, r2, r3
   27918:	clz	r2, r2
   2791c:	lsr	r2, r2, #5
   27920:	tst	r2, r7
   27924:	asreq	r2, r1, #31
   27928:	eoreq	r1, r1, r1
   2792c:	eoreq	r0, r0, r2
   27930:	orrseq	r0, r1, r0
   27934:	bne	27148 <__assert_fail@plt+0x14558>
   27938:	mvn	r0, #0
   2793c:	sub	r1, fp, #76	; 0x4c
   27940:	str	r0, [fp, #-44]	; 0xffffffd4
   27944:	ldr	r0, [sp, #84]	; 0x54
   27948:	bl	3be44 <__assert_fail@plt+0x29254>
   2794c:	mov	ip, r0
   27950:	cmn	r0, #1
   27954:	beq	27148 <__assert_fail@plt+0x14558>
   27958:	ldr	r1, [sp, #24]
   2795c:	ldr	r0, [sp, #44]	; 0x2c
   27960:	ldr	r4, [r1]
   27964:	ldr	r3, [r1, #4]
   27968:	ldr	r1, [sp, #28]
   2796c:	ldm	r0, {r0, r5}
   27970:	ldm	r1, {r2, r9}
   27974:	orr	r7, r3, r5
   27978:	orr	r6, r4, r0
   2797c:	orr	r7, r7, r9
   27980:	orr	r6, r6, r2
   27984:	orrs	r7, r6, r7
   27988:	beq	27b00 <__assert_fail@plt+0x14f10>
   2798c:	ldr	r7, [fp, #-56]	; 0xffffffc8
   27990:	mov	r1, #0
   27994:	str	r1, [sp, #80]	; 0x50
   27998:	mov	r1, #0
   2799c:	asr	r6, r7, #31
   279a0:	cmn	r6, #1
   279a4:	movwgt	r1, #1
   279a8:	adds	r0, r7, r0
   279ac:	adc	r7, r6, r5
   279b0:	mov	r6, #0
   279b4:	cmn	r7, #1
   279b8:	movwgt	r6, #1
   279bc:	subs	r6, r1, r6
   279c0:	movwne	r6, #1
   279c4:	cmn	r5, #1
   279c8:	mov	r5, #0
   279cc:	movwgt	r5, #1
   279d0:	sub	r1, r1, r5
   279d4:	clz	r1, r1
   279d8:	lsr	r1, r1, #5
   279dc:	tst	r1, r6
   279e0:	asreq	r1, r0, #31
   279e4:	eoreq	r6, r0, r0
   279e8:	eoreq	r1, r7, r1
   279ec:	orrseq	r1, r6, r1
   279f0:	bne	27148 <__assert_fail@plt+0x14558>
   279f4:	ldr	r1, [fp, #-60]	; 0xffffffc4
   279f8:	mov	r6, #0
   279fc:	mov	r5, #0
   27a00:	str	r6, [sp, #80]	; 0x50
   27a04:	asr	r7, r1, #31
   27a08:	cmn	r7, #1
   27a0c:	movwgt	r5, #1
   27a10:	adds	r6, r1, r4
   27a14:	mov	r1, #0
   27a18:	adc	r7, r7, r3
   27a1c:	cmn	r7, #1
   27a20:	movwgt	r1, #1
   27a24:	subs	r1, r5, r1
   27a28:	movwne	r1, #1
   27a2c:	cmn	r3, #1
   27a30:	mov	r3, #0
   27a34:	movwgt	r3, #1
   27a38:	sub	r3, r5, r3
   27a3c:	clz	r3, r3
   27a40:	lsr	r3, r3, #5
   27a44:	tst	r3, r1
   27a48:	asreq	r1, r6, #31
   27a4c:	eoreq	r3, r6, r6
   27a50:	eoreq	r1, r7, r1
   27a54:	orrseq	r1, r3, r1
   27a58:	bne	27148 <__assert_fail@plt+0x14558>
   27a5c:	ldr	r1, [fp, #-64]	; 0xffffffc0
   27a60:	mov	r7, #0
   27a64:	mov	r5, #0
   27a68:	str	r7, [sp, #80]	; 0x50
   27a6c:	mov	r7, #0
   27a70:	asr	r3, r1, #31
   27a74:	cmn	r3, #1
   27a78:	movwgt	r7, #1
   27a7c:	adds	r2, r1, r2
   27a80:	mov	r1, #0
   27a84:	adc	r3, r3, r9
   27a88:	cmn	r3, #1
   27a8c:	movwgt	r1, #1
   27a90:	subs	r1, r7, r1
   27a94:	movwne	r1, #1
   27a98:	cmn	r9, #1
   27a9c:	movwgt	r5, #1
   27aa0:	sub	r7, r7, r5
   27aa4:	clz	r7, r7
   27aa8:	lsr	r7, r7, #5
   27aac:	tst	r7, r1
   27ab0:	asreq	r1, r2, #31
   27ab4:	eoreq	r7, r2, r2
   27ab8:	eoreq	r1, r3, r1
   27abc:	orrseq	r1, r7, r1
   27ac0:	bne	27148 <__assert_fail@plt+0x14558>
   27ac4:	str	r6, [fp, #-60]	; 0xffffffc4
   27ac8:	str	r0, [fp, #-56]	; 0xffffffc8
   27acc:	ldr	r0, [sp, #72]	; 0x48
   27ad0:	str	r2, [fp, #-64]	; 0xffffffc0
   27ad4:	str	r8, [fp, #-68]	; 0xffffffbc
   27ad8:	str	sl, [fp, #-72]	; 0xffffffb8
   27adc:	sub	r1, fp, #76	; 0x4c
   27ae0:	str	r0, [fp, #-44]	; 0xffffffd4
   27ae4:	ldr	r0, [sp, #64]	; 0x40
   27ae8:	str	r0, [fp, #-76]	; 0xffffffb4
   27aec:	ldr	r0, [sp, #84]	; 0x54
   27af0:	bl	3be44 <__assert_fail@plt+0x29254>
   27af4:	mov	ip, r0
   27af8:	cmn	r0, #1
   27afc:	beq	27148 <__assert_fail@plt+0x14558>
   27b00:	ldr	r0, [sp, #312]	; 0x138
   27b04:	cmp	r0, #0
   27b08:	beq	27b3c <__assert_fail@plt+0x14f4c>
   27b0c:	ldr	r0, [fp, #-40]	; 0xffffffd8
   27b10:	ldr	r2, [sp, #160]	; 0xa0
   27b14:	asr	r1, r0, #31
   27b18:	subs	r0, r0, r2
   27b1c:	sbc	r1, r1, r2, asr #31
   27b20:	adds	r5, r0, ip
   27b24:	adc	r0, r1, ip, asr #31
   27b28:	teq	r0, r5, asr #31
   27b2c:	mov	r0, #0
   27b30:	str	r0, [sp, #80]	; 0x50
   27b34:	bne	27148 <__assert_fail@plt+0x14558>
   27b38:	b	27b40 <__assert_fail@plt+0x14f50>
   27b3c:	mov	r5, ip
   27b40:	ldr	r1, [sp, #280]	; 0x118
   27b44:	ldr	r0, [sp, #228]	; 0xe4
   27b48:	movw	r7, #51712	; 0xca00
   27b4c:	mov	r3, #0
   27b50:	movt	r7, #15258	; 0x3b9a
   27b54:	asr	r2, r1, #31
   27b58:	adds	r4, r1, r0
   27b5c:	adc	r6, r2, r0, asr #31
   27b60:	mov	r0, #0
   27b64:	mov	r2, r7
   27b68:	str	r0, [sp, #80]	; 0x50
   27b6c:	mov	r0, r4
   27b70:	mov	r1, r6
   27b74:	bl	3cef4 <__assert_fail@plt+0x2a304>
   27b78:	adds	r0, r2, r7
   27b7c:	mov	r2, r7
   27b80:	adc	r1, r3, #0
   27b84:	mov	r3, #0
   27b88:	bl	3cef4 <__assert_fail@plt+0x2a304>
   27b8c:	subs	r0, r4, r2
   27b90:	mov	r9, r2
   27b94:	mov	r3, #0
   27b98:	sbc	r1, r6, r2, asr #31
   27b9c:	mov	r2, r7
   27ba0:	bl	3cef4 <__assert_fail@plt+0x2a304>
   27ba4:	mov	r4, r0
   27ba8:	ldr	r0, [sp, #16]
   27bac:	mov	sl, r1
   27bb0:	ldrd	r6, [r0]
   27bb4:	cmn	r7, #1
   27bb8:	ble	27bdc <__assert_fail@plt+0x14fec>
   27bbc:	movw	r1, #24175	; 0x5e6f
   27bc0:	movw	r0, #6699	; 0x1a2b
   27bc4:	movt	r1, #15437	; 0x3c4d
   27bc8:	movt	r0, #9
   27bcc:	subs	r1, r1, r6
   27bd0:	sbcs	r0, r0, r7
   27bd4:	blt	27148 <__assert_fail@plt+0x14558>
   27bd8:	b	27c18 <__assert_fail@plt+0x15028>
   27bdc:	mvn	r1, #0
   27be0:	eor	r0, r6, r1
   27be4:	eor	r1, r7, r1
   27be8:	orrs	r0, r0, r1
   27bec:	beq	27c18 <__assert_fail@plt+0x15028>
   27bf0:	mov	r0, #0
   27bf4:	mov	r1, #-2147483648	; 0x80000000
   27bf8:	mov	r2, r6
   27bfc:	mov	r3, r7
   27c00:	str	r0, [sp, #80]	; 0x50
   27c04:	mov	r0, #0
   27c08:	bl	3cef4 <__assert_fail@plt+0x2a304>
   27c0c:	subs	r0, r0, #3600	; 0xe10
   27c10:	sbcs	r0, r1, #0
   27c14:	blt	27148 <__assert_fail@plt+0x14558>
   27c18:	mov	r0, #3600	; 0xe10
   27c1c:	umull	r1, r2, r6, r0
   27c20:	mla	r0, r7, r0, r2
   27c24:	asr	r2, r5, #31
   27c28:	adds	r6, r5, r1
   27c2c:	mov	r1, #0
   27c30:	adc	r5, r2, r0
   27c34:	str	r1, [sp, #80]	; 0x50
   27c38:	mov	r1, #0
   27c3c:	cmn	r5, #1
   27c40:	movwgt	r1, #1
   27c44:	cmn	r2, #1
   27c48:	mov	r2, #0
   27c4c:	movwgt	r2, #1
   27c50:	subs	r1, r2, r1
   27c54:	movwne	r1, #1
   27c58:	cmn	r0, #1
   27c5c:	mov	r0, #0
   27c60:	movwgt	r0, #1
   27c64:	sub	r0, r2, r0
   27c68:	clz	r0, r0
   27c6c:	lsr	r0, r0, #5
   27c70:	tst	r0, r1
   27c74:	bne	27148 <__assert_fail@plt+0x14558>
   27c78:	ldr	r0, [sp, #12]
   27c7c:	ldr	r7, [r0, #4]
   27c80:	ldr	r8, [r0]
   27c84:	cmn	r7, #1
   27c88:	ble	27cac <__assert_fail@plt+0x150bc>
   27c8c:	movw	r1, #8738	; 0x2222
   27c90:	movw	r0, #8738	; 0x2222
   27c94:	movt	r1, #8738	; 0x2222
   27c98:	movt	r0, #546	; 0x222
   27c9c:	subs	r1, r1, r8
   27ca0:	sbcs	r0, r0, r7
   27ca4:	blt	27148 <__assert_fail@plt+0x14558>
   27ca8:	b	27ce8 <__assert_fail@plt+0x150f8>
   27cac:	mvn	r1, #0
   27cb0:	eor	r0, r8, r1
   27cb4:	eor	r1, r7, r1
   27cb8:	orrs	r0, r0, r1
   27cbc:	beq	27ce8 <__assert_fail@plt+0x150f8>
   27cc0:	mov	r0, #0
   27cc4:	mov	r1, #-2147483648	; 0x80000000
   27cc8:	mov	r2, r8
   27ccc:	mov	r3, r7
   27cd0:	str	r0, [sp, #80]	; 0x50
   27cd4:	mov	r0, #0
   27cd8:	bl	3cef4 <__assert_fail@plt+0x2a304>
   27cdc:	subs	r0, r0, #60	; 0x3c
   27ce0:	sbcs	r0, r1, #0
   27ce4:	blt	27148 <__assert_fail@plt+0x14558>
   27ce8:	mov	r0, #60	; 0x3c
   27cec:	rsb	r2, r7, r7, lsl #4
   27cf0:	mov	r3, #0
   27cf4:	mov	r7, #0
   27cf8:	umull	r0, r1, r8, r0
   27cfc:	str	r3, [sp, #80]	; 0x50
   27d00:	mov	r3, #0
   27d04:	add	r2, r1, r2, lsl #2
   27d08:	adds	r0, r6, r0
   27d0c:	adc	r1, r5, r2
   27d10:	cmn	r1, #1
   27d14:	movwgt	r3, #1
   27d18:	cmn	r5, #1
   27d1c:	movwgt	r7, #1
   27d20:	subs	r3, r7, r3
   27d24:	movwne	r3, #1
   27d28:	cmn	r2, #1
   27d2c:	mov	r2, #0
   27d30:	movwgt	r2, #1
   27d34:	sub	r2, r7, r2
   27d38:	clz	r2, r2
   27d3c:	lsr	r2, r2, #5
   27d40:	ands	r2, r2, r3
   27d44:	bne	27148 <__assert_fail@plt+0x14558>
   27d48:	ldr	r3, [sp, #8]
   27d4c:	mov	r2, #0
   27d50:	cmn	r1, #1
   27d54:	str	r2, [sp, #80]	; 0x50
   27d58:	mov	r2, #0
   27d5c:	movwgt	r2, #1
   27d60:	ldrd	r6, [r3]
   27d64:	mov	r3, #0
   27d68:	adds	r0, r0, r6
   27d6c:	adc	r1, r1, r7
   27d70:	cmn	r1, #1
   27d74:	movwgt	r3, #1
   27d78:	subs	r3, r2, r3
   27d7c:	movwne	r3, #1
   27d80:	cmn	r7, #1
   27d84:	mov	r7, #0
   27d88:	movwgt	r7, #1
   27d8c:	sub	r2, r2, r7
   27d90:	clz	r2, r2
   27d94:	lsr	r2, r2, #5
   27d98:	ands	r2, r2, r3
   27d9c:	bne	27148 <__assert_fail@plt+0x14558>
   27da0:	mov	r2, #0
   27da4:	cmn	r1, #1
   27da8:	mov	r3, #0
   27dac:	mov	r7, #0
   27db0:	str	r2, [sp, #80]	; 0x50
   27db4:	mov	r2, #0
   27db8:	movwgt	r2, #1
   27dbc:	adds	r0, r0, r4
   27dc0:	adc	r1, r1, sl
   27dc4:	cmn	r1, #1
   27dc8:	movwgt	r3, #1
   27dcc:	subs	r3, r2, r3
   27dd0:	movwne	r3, #1
   27dd4:	cmn	sl, #1
   27dd8:	movwgt	r7, #1
   27ddc:	sub	r2, r2, r7
   27de0:	clz	r2, r2
   27de4:	lsr	r2, r2, #5
   27de8:	tst	r2, r3
   27dec:	asreq	r2, r0, #31
   27df0:	eoreq	r3, r0, r0
   27df4:	eoreq	r1, r1, r2
   27df8:	orrseq	r1, r3, r1
   27dfc:	bne	27148 <__assert_fail@plt+0x14558>
   27e00:	ldr	r1, [sp, #36]	; 0x24
   27e04:	stm	r1, {r0, r9}
   27e08:	b	27140 <__assert_fail@plt+0x14550>
   27e0c:	push	{r4, r5, r6, sl, fp, lr}
   27e10:	add	fp, sp, #16
   27e14:	movw	r5, #9916	; 0x26bc
   27e18:	mov	r4, r1
   27e1c:	movw	r1, #10782	; 0x2a1e
   27e20:	mov	r6, r0
   27e24:	movt	r5, #4
   27e28:	movt	r1, #4
   27e2c:	mov	r0, r4
   27e30:	bl	124f4 <strcmp@plt>
   27e34:	cmp	r0, #0
   27e38:	beq	27eac <__assert_fail@plt+0x152bc>
   27e3c:	ldr	r1, [r5, #12]!
   27e40:	cmp	r1, #0
   27e44:	bne	27e2c <__assert_fail@plt+0x1523c>
   27e48:	ldr	r1, [r6, #188]	; 0xbc
   27e4c:	cmp	r1, #0
   27e50:	beq	27e74 <__assert_fail@plt+0x15284>
   27e54:	add	r5, r6, #200	; 0xc8
   27e58:	mov	r0, r4
   27e5c:	bl	124f4 <strcmp@plt>
   27e60:	cmp	r0, #0
   27e64:	beq	27ea8 <__assert_fail@plt+0x152b8>
   27e68:	ldr	r1, [r5], #12
   27e6c:	cmp	r1, #0
   27e70:	bne	27e58 <__assert_fail@plt+0x15268>
   27e74:	movw	r5, #9964	; 0x26ec
   27e78:	movw	r1, #10793	; 0x2a29
   27e7c:	movt	r5, #4
   27e80:	movt	r1, #4
   27e84:	mov	r0, r4
   27e88:	bl	124f4 <strcmp@plt>
   27e8c:	cmp	r0, #0
   27e90:	beq	27eac <__assert_fail@plt+0x152bc>
   27e94:	ldr	r1, [r5, #12]!
   27e98:	cmp	r1, #0
   27e9c:	bne	27e84 <__assert_fail@plt+0x15294>
   27ea0:	mov	r5, #0
   27ea4:	b	27eac <__assert_fail@plt+0x152bc>
   27ea8:	sub	r5, r5, #12
   27eac:	mov	r0, r5
   27eb0:	pop	{r4, r5, r6, sl, fp, pc}
   27eb4:	push	{r4, r5, fp, lr}
   27eb8:	add	fp, sp, #8
   27ebc:	cmp	r0, #0
   27ec0:	beq	27f54 <__assert_fail@plt+0x15364>
   27ec4:	mov	r1, #47	; 0x2f
   27ec8:	mov	r4, r0
   27ecc:	bl	12a4c <strrchr@plt>
   27ed0:	cmp	r0, #0
   27ed4:	mov	r5, r4
   27ed8:	addne	r5, r0, #1
   27edc:	sub	r0, r5, r4
   27ee0:	cmp	r0, #7
   27ee4:	blt	27f38 <__assert_fail@plt+0x15348>
   27ee8:	movw	r1, #11236	; 0x2be4
   27eec:	sub	r0, r5, #7
   27ef0:	mov	r2, #7
   27ef4:	movt	r1, #4
   27ef8:	bl	12b90 <strncmp@plt>
   27efc:	cmp	r0, #0
   27f00:	bne	27f38 <__assert_fail@plt+0x15348>
   27f04:	movw	r1, #11244	; 0x2bec
   27f08:	mov	r0, r5
   27f0c:	mov	r2, #3
   27f10:	movt	r1, #4
   27f14:	bl	12b90 <strncmp@plt>
   27f18:	cmp	r0, #0
   27f1c:	beq	27f28 <__assert_fail@plt+0x15338>
   27f20:	mov	r4, r5
   27f24:	b	27f38 <__assert_fail@plt+0x15348>
   27f28:	movw	r0, #17752	; 0x4558
   27f2c:	add	r4, r5, #3
   27f30:	movt	r0, #5
   27f34:	str	r4, [r0]
   27f38:	movw	r0, #17760	; 0x4560
   27f3c:	movt	r0, #5
   27f40:	str	r4, [r0]
   27f44:	movw	r0, #19748	; 0x4d24
   27f48:	movt	r0, #5
   27f4c:	str	r4, [r0]
   27f50:	pop	{r4, r5, fp, pc}
   27f54:	movw	r0, #17768	; 0x4568
   27f58:	movt	r0, #5
   27f5c:	ldr	r1, [r0]
   27f60:	movw	r0, #11180	; 0x2bac
   27f64:	movt	r0, #4
   27f68:	bl	12b84 <fputs@plt>
   27f6c:	bl	12b9c <abort@plt>
   27f70:	push	{r4, r5, r6, sl, fp, lr}
   27f74:	add	fp, sp, #16
   27f78:	mov	r4, r0
   27f7c:	movw	r0, #19752	; 0x4d28
   27f80:	movt	r0, #5
   27f84:	cmp	r4, #0
   27f88:	moveq	r4, r0
   27f8c:	bl	12908 <__errno_location@plt>
   27f90:	ldr	r6, [r0]
   27f94:	mov	r5, r0
   27f98:	mov	r0, r4
   27f9c:	mov	r1, #48	; 0x30
   27fa0:	bl	2a9d8 <__assert_fail@plt+0x17de8>
   27fa4:	str	r6, [r5]
   27fa8:	pop	{r4, r5, r6, sl, fp, pc}
   27fac:	movw	r1, #19752	; 0x4d28
   27fb0:	cmp	r0, #0
   27fb4:	movt	r1, #5
   27fb8:	movne	r1, r0
   27fbc:	ldr	r0, [r1]
   27fc0:	bx	lr
   27fc4:	movw	r2, #19752	; 0x4d28
   27fc8:	cmp	r0, #0
   27fcc:	movt	r2, #5
   27fd0:	movne	r2, r0
   27fd4:	str	r1, [r2]
   27fd8:	bx	lr
   27fdc:	movw	r3, #19752	; 0x4d28
   27fe0:	cmp	r0, #0
   27fe4:	and	r2, r2, #1
   27fe8:	movt	r3, #5
   27fec:	movne	r3, r0
   27ff0:	ubfx	r0, r1, #5, #3
   27ff4:	and	r1, r1, #31
   27ff8:	add	ip, r3, r0, lsl #2
   27ffc:	mov	r0, #1
   28000:	ldr	r3, [ip, #8]
   28004:	and	r0, r0, r3, lsr r1
   28008:	eor	r2, r0, r2
   2800c:	eor	r1, r3, r2, lsl r1
   28010:	str	r1, [ip, #8]
   28014:	bx	lr
   28018:	movw	r2, #19752	; 0x4d28
   2801c:	cmp	r0, #0
   28020:	movt	r2, #5
   28024:	movne	r2, r0
   28028:	ldr	r0, [r2, #4]
   2802c:	str	r1, [r2, #4]
   28030:	bx	lr
   28034:	push	{fp, lr}
   28038:	mov	fp, sp
   2803c:	movw	r3, #19752	; 0x4d28
   28040:	cmp	r0, #0
   28044:	movt	r3, #5
   28048:	movne	r3, r0
   2804c:	cmp	r1, #0
   28050:	mov	r0, #10
   28054:	cmpne	r2, #0
   28058:	str	r0, [r3]
   2805c:	bne	28064 <__assert_fail@plt+0x15474>
   28060:	bl	12b9c <abort@plt>
   28064:	str	r1, [r3, #40]	; 0x28
   28068:	str	r2, [r3, #44]	; 0x2c
   2806c:	pop	{fp, pc}
   28070:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   28074:	add	fp, sp, #28
   28078:	sub	sp, sp, #20
   2807c:	mov	r7, r0
   28080:	ldr	r0, [fp, #8]
   28084:	movw	r5, #19752	; 0x4d28
   28088:	mov	r8, r3
   2808c:	mov	r9, r2
   28090:	mov	sl, r1
   28094:	movt	r5, #5
   28098:	cmp	r0, #0
   2809c:	movne	r5, r0
   280a0:	bl	12908 <__errno_location@plt>
   280a4:	ldr	r2, [r5, #40]	; 0x28
   280a8:	ldr	r3, [r5, #44]	; 0x2c
   280ac:	mov	r4, r0
   280b0:	ldm	r5, {r0, r1}
   280b4:	add	r5, r5, #8
   280b8:	ldr	r6, [r4]
   280bc:	stm	sp, {r0, r1, r5}
   280c0:	mov	r0, r7
   280c4:	mov	r1, sl
   280c8:	str	r2, [sp, #12]
   280cc:	str	r3, [sp, #16]
   280d0:	mov	r2, r9
   280d4:	mov	r3, r8
   280d8:	bl	280e8 <__assert_fail@plt+0x154f8>
   280dc:	str	r6, [r4]
   280e0:	sub	sp, fp, #28
   280e4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   280e8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   280ec:	add	fp, sp, #28
   280f0:	sub	sp, sp, #156	; 0x9c
   280f4:	mov	r5, r0
   280f8:	add	r0, r2, #1
   280fc:	mov	r6, r1
   28100:	mov	sl, r3
   28104:	str	r2, [fp, #-80]	; 0xffffffb0
   28108:	str	r0, [sp, #72]	; 0x48
   2810c:	ldr	r0, [fp, #12]
   28110:	and	r1, r0, #1
   28114:	str	r1, [sp, #32]
   28118:	and	r1, r0, #4
   2811c:	str	r1, [sp, #28]
   28120:	ubfx	r9, r0, #1, #1
   28124:	bl	12758 <__ctype_get_mb_cur_max@plt>
   28128:	str	r0, [sp, #40]	; 0x28
   2812c:	ldr	r0, [fp, #24]
   28130:	ldr	r7, [fp, #8]
   28134:	mov	r1, #0
   28138:	mov	lr, #0
   2813c:	str	r5, [fp, #-84]	; 0xffffffac
   28140:	str	r1, [sp, #60]	; 0x3c
   28144:	mov	r1, #1
   28148:	str	r1, [fp, #-48]	; 0xffffffd0
   2814c:	str	r0, [sp, #80]	; 0x50
   28150:	ldr	r0, [fp, #20]
   28154:	str	r0, [sp, #76]	; 0x4c
   28158:	mov	r0, #0
   2815c:	str	r0, [sp, #56]	; 0x38
   28160:	mov	r0, #0
   28164:	str	r0, [fp, #-88]	; 0xffffffa8
   28168:	mov	r0, #0
   2816c:	str	r0, [fp, #-72]	; 0xffffffb8
   28170:	mov	r0, #0
   28174:	cmp	r7, #10
   28178:	bhi	29154 <__assert_fail@plt+0x16564>
   2817c:	add	r1, pc, #24
   28180:	ldr	r4, [fp, #-80]	; 0xffffffb0
   28184:	mov	ip, r6
   28188:	mov	r8, #0
   2818c:	mov	r2, #1
   28190:	mov	r6, #0
   28194:	mov	r3, sl
   28198:	ldr	pc, [r1, r7, lsl #2]
   2819c:	andeq	r8, r2, r8, lsl #5
   281a0:	ldrdeq	r8, [r2], -ip
   281a4:	muleq	r2, ip, r2
   281a8:	andeq	r8, r2, r0, lsl #5
   281ac:	ldrdeq	r8, [r2], -r0
   281b0:	andeq	r8, r2, r4, lsl #6
   281b4:	andeq	r8, r2, ip, lsr #5
   281b8:	andeq	r8, r2, r8, lsl #7
   281bc:	andeq	r8, r2, r8, asr #3
   281c0:	andeq	r8, r2, r8, asr #3
   281c4:	andeq	r8, r2, r8, lsl #4
   281c8:	movw	r0, #11324	; 0x2c3c
   281cc:	mov	r1, r7
   281d0:	mov	r6, r5
   281d4:	mov	r4, ip
   281d8:	mov	r5, lr
   281dc:	movt	r0, #4
   281e0:	bl	298b8 <__assert_fail@plt+0x16cc8>
   281e4:	str	r0, [sp, #76]	; 0x4c
   281e8:	movw	r0, #63704	; 0xf8d8
   281ec:	mov	r1, r7
   281f0:	movt	r0, #3
   281f4:	bl	298b8 <__assert_fail@plt+0x16cc8>
   281f8:	mov	lr, r5
   281fc:	mov	r5, r6
   28200:	mov	ip, r4
   28204:	str	r0, [sp, #80]	; 0x50
   28208:	mov	r8, #0
   2820c:	tst	r9, #1
   28210:	str	lr, [sp, #44]	; 0x2c
   28214:	bne	2824c <__assert_fail@plt+0x1565c>
   28218:	ldr	r0, [sp, #76]	; 0x4c
   2821c:	ldrb	r0, [r0]
   28220:	cmp	r0, #0
   28224:	beq	2824c <__assert_fail@plt+0x1565c>
   28228:	ldr	r1, [sp, #76]	; 0x4c
   2822c:	mov	r8, #0
   28230:	add	r1, r1, #1
   28234:	cmp	r8, ip
   28238:	strbcc	r0, [r5, r8]
   2823c:	ldrb	r0, [r1, r8]
   28240:	add	r8, r8, #1
   28244:	cmp	r0, #0
   28248:	bne	28234 <__assert_fail@plt+0x15644>
   2824c:	ldr	r6, [sp, #80]	; 0x50
   28250:	mov	r4, ip
   28254:	mov	r0, r6
   28258:	bl	128c0 <strlen@plt>
   2825c:	mov	ip, r4
   28260:	ldr	r4, [fp, #-80]	; 0xffffffb0
   28264:	ldr	lr, [sp, #44]	; 0x2c
   28268:	str	r6, [fp, #-88]	; 0xffffffa8
   2826c:	str	r0, [fp, #-72]	; 0xffffffb8
   28270:	mov	r2, #1
   28274:	mov	r6, r9
   28278:	mov	r3, sl
   2827c:	b	28388 <__assert_fail@plt+0x15798>
   28280:	mov	r0, #1
   28284:	b	282dc <__assert_fail@plt+0x156ec>
   28288:	mov	r7, #0
   2828c:	mov	r8, #0
   28290:	mov	r2, r0
   28294:	mov	r6, #0
   28298:	b	28388 <__assert_fail@plt+0x15798>
   2829c:	tst	r9, #1
   282a0:	bne	282dc <__assert_fail@plt+0x156ec>
   282a4:	mov	r2, r0
   282a8:	b	28334 <__assert_fail@plt+0x15744>
   282ac:	mov	r0, #1
   282b0:	mov	r8, #0
   282b4:	mov	r7, #5
   282b8:	mov	r2, #1
   282bc:	str	r0, [fp, #-72]	; 0xffffffb8
   282c0:	movw	r0, #11178	; 0x2baa
   282c4:	movt	r0, #4
   282c8:	str	r0, [fp, #-88]	; 0xffffffa8
   282cc:	b	282fc <__assert_fail@plt+0x1570c>
   282d0:	mov	r2, #1
   282d4:	tst	r9, #1
   282d8:	beq	28334 <__assert_fail@plt+0x15744>
   282dc:	mov	r1, #1
   282e0:	mov	r8, #0
   282e4:	mov	r7, #2
   282e8:	mov	r2, r0
   282ec:	str	r1, [fp, #-72]	; 0xffffffb8
   282f0:	movw	r1, #63704	; 0xf8d8
   282f4:	movt	r1, #3
   282f8:	str	r1, [fp, #-88]	; 0xffffffa8
   282fc:	mov	r6, #1
   28300:	b	28388 <__assert_fail@plt+0x15798>
   28304:	tst	r9, #1
   28308:	beq	28358 <__assert_fail@plt+0x15768>
   2830c:	mov	r0, #1
   28310:	mov	r8, #0
   28314:	mov	r2, #1
   28318:	mov	r6, #1
   2831c:	mov	r7, #5
   28320:	str	r0, [fp, #-72]	; 0xffffffb8
   28324:	movw	r0, #11178	; 0x2baa
   28328:	movt	r0, #4
   2832c:	str	r0, [fp, #-88]	; 0xffffffa8
   28330:	b	28388 <__assert_fail@plt+0x15798>
   28334:	cmp	ip, #0
   28338:	mov	r8, #1
   2833c:	mov	r6, #0
   28340:	mov	r7, #2
   28344:	movne	r0, #39	; 0x27
   28348:	strbne	r0, [r5]
   2834c:	movw	r0, #63704	; 0xf8d8
   28350:	movt	r0, #3
   28354:	b	2837c <__assert_fail@plt+0x1578c>
   28358:	cmp	ip, #0
   2835c:	mov	r8, #1
   28360:	mov	r2, #1
   28364:	mov	r7, #5
   28368:	mov	r6, #0
   2836c:	movne	r0, #34	; 0x22
   28370:	strbne	r0, [r5]
   28374:	movw	r0, #11178	; 0x2baa
   28378:	movt	r0, #4
   2837c:	str	r0, [fp, #-88]	; 0xffffffa8
   28380:	mov	r0, #1
   28384:	str	r0, [fp, #-72]	; 0xffffffb8
   28388:	ldr	r0, [fp, #-72]	; 0xffffffb8
   2838c:	str	r7, [fp, #-68]	; 0xffffffbc
   28390:	str	r6, [fp, #-76]	; 0xffffffb4
   28394:	str	r2, [sp, #84]	; 0x54
   28398:	cmp	r0, #0
   2839c:	movwne	r0, #1
   283a0:	and	r1, r0, r6
   283a4:	and	r1, r2, r1
   283a8:	str	r1, [sp, #48]	; 0x30
   283ac:	sub	r1, r7, #2
   283b0:	clz	r1, r1
   283b4:	lsr	r1, r1, #5
   283b8:	and	r1, r1, r6
   283bc:	str	r1, [sp, #64]	; 0x40
   283c0:	subs	r1, r7, #2
   283c4:	eor	r7, r6, #1
   283c8:	movwne	r1, #1
   283cc:	str	r7, [sp, #92]	; 0x5c
   283d0:	orr	r7, r1, r7
   283d4:	and	r1, r1, r2
   283d8:	and	r0, r0, r1
   283dc:	str	r7, [sp, #68]	; 0x44
   283e0:	mov	r7, #0
   283e4:	str	r0, [fp, #-60]	; 0xffffffc4
   283e8:	orr	r0, r1, r6
   283ec:	ldr	r1, [fp, #16]
   283f0:	eor	r0, r0, #1
   283f4:	clz	r1, r1
   283f8:	lsr	r1, r1, #5
   283fc:	orr	r0, r1, r0
   28400:	str	r0, [fp, #-64]	; 0xffffffc0
   28404:	eor	r0, r2, #1
   28408:	str	r0, [sp, #52]	; 0x34
   2840c:	cmn	r3, #1
   28410:	beq	28420 <__assert_fail@plt+0x15830>
   28414:	cmp	r7, r3
   28418:	bne	2842c <__assert_fail@plt+0x1583c>
   2841c:	b	28f88 <__assert_fail@plt+0x16398>
   28420:	ldrb	r0, [r4, r7]
   28424:	cmp	r0, #0
   28428:	beq	28f90 <__assert_fail@plt+0x163a0>
   2842c:	ldr	r0, [fp, #-60]	; 0xffffffc4
   28430:	cmp	r0, #0
   28434:	beq	2847c <__assert_fail@plt+0x1588c>
   28438:	ldr	r0, [fp, #-72]	; 0xffffffb8
   2843c:	add	r5, r7, r0
   28440:	cmp	r0, #2
   28444:	bcc	28490 <__assert_fail@plt+0x158a0>
   28448:	mov	r0, #0
   2844c:	cmn	r3, #1
   28450:	str	r0, [fp, #-56]	; 0xffffffc8
   28454:	bne	28498 <__assert_fail@plt+0x158a8>
   28458:	mov	r0, r4
   2845c:	mov	r4, ip
   28460:	mov	r6, lr
   28464:	bl	128c0 <strlen@plt>
   28468:	mov	ip, r4
   2846c:	ldr	r4, [fp, #-80]	; 0xffffffb0
   28470:	mov	lr, r6
   28474:	mov	r3, r0
   28478:	b	28498 <__assert_fail@plt+0x158a8>
   2847c:	mov	r0, #0
   28480:	mov	sl, r3
   28484:	str	r0, [fp, #-56]	; 0xffffffc8
   28488:	mov	r0, #0
   2848c:	b	28504 <__assert_fail@plt+0x15914>
   28490:	mov	r0, #0
   28494:	str	r0, [fp, #-56]	; 0xffffffc8
   28498:	cmp	r5, r3
   2849c:	bls	284b0 <__assert_fail@plt+0x158c0>
   284a0:	ldr	r5, [fp, #-84]	; 0xffffffac
   284a4:	mov	r0, #0
   284a8:	mov	sl, r3
   284ac:	b	28504 <__assert_fail@plt+0x15914>
   284b0:	ldr	r1, [fp, #-88]	; 0xffffffa8
   284b4:	ldr	r2, [fp, #-72]	; 0xffffffb8
   284b8:	add	r0, r4, r7
   284bc:	mov	r5, lr
   284c0:	mov	r6, ip
   284c4:	mov	sl, r3
   284c8:	bl	128a8 <bcmp@plt>
   284cc:	ldr	r2, [sp, #92]	; 0x5c
   284d0:	cmp	r0, #0
   284d4:	ldr	r3, [fp, #-84]	; 0xffffffac
   284d8:	mov	r1, r0
   284dc:	movwne	r1, #1
   284e0:	orr	r1, r1, r2
   284e4:	tst	r1, #1
   284e8:	beq	29014 <__assert_fail@plt+0x16424>
   284ec:	ldr	r4, [fp, #-80]	; 0xffffffb0
   284f0:	clz	r0, r0
   284f4:	mov	lr, r5
   284f8:	mov	ip, r6
   284fc:	mov	r5, r3
   28500:	lsr	r0, r0, #5
   28504:	str	r0, [fp, #-52]	; 0xffffffcc
   28508:	ldrb	r6, [r4, r7]
   2850c:	cmp	r6, #126	; 0x7e
   28510:	bhi	28a38 <__assert_fail@plt+0x15e48>
   28514:	add	r3, pc, #16
   28518:	mov	r9, #1
   2851c:	mov	r2, #110	; 0x6e
   28520:	mov	r0, #97	; 0x61
   28524:	mov	r1, #0
   28528:	ldr	pc, [r3, r6, lsl #2]
   2852c:	muleq	r2, ip, r8
   28530:	andeq	r8, r2, r8, lsr sl
   28534:	andeq	r8, r2, r8, lsr sl
   28538:	andeq	r8, r2, r8, lsr sl
   2853c:	andeq	r8, r2, r8, lsr sl
   28540:	andeq	r8, r2, r8, lsr sl
   28544:	andeq	r8, r2, r8, lsr sl
   28548:			; <UNDEFINED> instruction: 0x00028ab8
   2854c:	andeq	r8, r2, ip, ror r8
   28550:	andeq	r8, r2, r4, ror r8
   28554:	andeq	r8, r2, r8, lsl #17
   28558:	andeq	r8, r2, r0, lsr #19
   2855c:	andeq	r8, r2, ip, ror #16
   28560:	andeq	r8, r2, r4, lsl #17
   28564:	andeq	r8, r2, r8, lsr sl
   28568:	andeq	r8, r2, r8, lsr sl
   2856c:	andeq	r8, r2, r8, lsr sl
   28570:	andeq	r8, r2, r8, lsr sl
   28574:	andeq	r8, r2, r8, lsr sl
   28578:	andeq	r8, r2, r8, lsr sl
   2857c:	andeq	r8, r2, r8, lsr sl
   28580:	andeq	r8, r2, r8, lsr sl
   28584:	andeq	r8, r2, r8, lsr sl
   28588:	andeq	r8, r2, r8, lsr sl
   2858c:	andeq	r8, r2, r8, lsr sl
   28590:	andeq	r8, r2, r8, lsr sl
   28594:	andeq	r8, r2, r8, lsr sl
   28598:	andeq	r8, r2, r8, lsr sl
   2859c:	andeq	r8, r2, r8, lsr sl
   285a0:	andeq	r8, r2, r8, lsr sl
   285a4:	andeq	r8, r2, r8, lsr sl
   285a8:	andeq	r8, r2, r8, lsr sl
   285ac:	andeq	r8, r2, ip, lsl r8
   285b0:	andeq	r8, r2, r0, lsr #16
   285b4:	andeq	r8, r2, r0, lsr #16
   285b8:	andeq	r8, r2, r4, lsl #16
   285bc:	andeq	r8, r2, r0, lsr #16
   285c0:	andeq	r8, r2, r8, lsr #14
   285c4:	andeq	r8, r2, r0, lsr #16
   285c8:	andeq	r8, r2, r8, lsr #19
   285cc:	andeq	r8, r2, r0, lsr #16
   285d0:	andeq	r8, r2, r0, lsr #16
   285d4:	andeq	r8, r2, r0, lsr #16
   285d8:	andeq	r8, r2, r8, lsr #14
   285dc:	andeq	r8, r2, r8, lsr #14
   285e0:	andeq	r8, r2, r8, lsr #14
   285e4:	andeq	r8, r2, r8, lsr #14
   285e8:	andeq	r8, r2, r8, lsr #14
   285ec:	andeq	r8, r2, r8, lsr #14
   285f0:	andeq	r8, r2, r8, lsr #14
   285f4:	andeq	r8, r2, r8, lsr #14
   285f8:	andeq	r8, r2, r8, lsr #14
   285fc:	andeq	r8, r2, r8, lsr #14
   28600:	andeq	r8, r2, r8, lsr #14
   28604:	andeq	r8, r2, r8, lsr #14
   28608:	andeq	r8, r2, r8, lsr #14
   2860c:	andeq	r8, r2, r8, lsr #14
   28610:	andeq	r8, r2, r8, lsr #14
   28614:	andeq	r8, r2, r8, lsr #14
   28618:	andeq	r8, r2, r0, lsr #16
   2861c:	andeq	r8, r2, r0, lsr #16
   28620:	andeq	r8, r2, r0, lsr #16
   28624:	andeq	r8, r2, r0, lsr #16
   28628:	andeq	r8, r2, r4, ror r9
   2862c:	andeq	r8, r2, r8, lsr sl
   28630:	andeq	r8, r2, r8, lsr #14
   28634:	andeq	r8, r2, r8, lsr #14
   28638:	andeq	r8, r2, r8, lsr #14
   2863c:	andeq	r8, r2, r8, lsr #14
   28640:	andeq	r8, r2, r8, lsr #14
   28644:	andeq	r8, r2, r8, lsr #14
   28648:	andeq	r8, r2, r8, lsr #14
   2864c:	andeq	r8, r2, r8, lsr #14
   28650:	andeq	r8, r2, r8, lsr #14
   28654:	andeq	r8, r2, r8, lsr #14
   28658:	andeq	r8, r2, r8, lsr #14
   2865c:	andeq	r8, r2, r8, lsr #14
   28660:	andeq	r8, r2, r8, lsr #14
   28664:	andeq	r8, r2, r8, lsr #14
   28668:	andeq	r8, r2, r8, lsr #14
   2866c:	andeq	r8, r2, r8, lsr #14
   28670:	andeq	r8, r2, r8, lsr #14
   28674:	andeq	r8, r2, r8, lsr #14
   28678:	andeq	r8, r2, r8, lsr #14
   2867c:	andeq	r8, r2, r8, lsr #14
   28680:	andeq	r8, r2, r8, lsr #14
   28684:	andeq	r8, r2, r8, lsr #14
   28688:	andeq	r8, r2, r8, lsr #14
   2868c:	andeq	r8, r2, r8, lsr #14
   28690:	andeq	r8, r2, r8, lsr #14
   28694:	andeq	r8, r2, r8, lsr #14
   28698:	andeq	r8, r2, r0, lsr #16
   2869c:	andeq	r8, r2, r8, asr #16
   286a0:	andeq	r8, r2, r8, lsr #14
   286a4:	andeq	r8, r2, r0, lsr #16
   286a8:	andeq	r8, r2, r8, lsr #14
   286ac:	andeq	r8, r2, r0, lsr #16
   286b0:	andeq	r8, r2, r8, lsr #14
   286b4:	andeq	r8, r2, r8, lsr #14
   286b8:	andeq	r8, r2, r8, lsr #14
   286bc:	andeq	r8, r2, r8, lsr #14
   286c0:	andeq	r8, r2, r8, lsr #14
   286c4:	andeq	r8, r2, r8, lsr #14
   286c8:	andeq	r8, r2, r8, lsr #14
   286cc:	andeq	r8, r2, r8, lsr #14
   286d0:	andeq	r8, r2, r8, lsr #14
   286d4:	andeq	r8, r2, r8, lsr #14
   286d8:	andeq	r8, r2, r8, lsr #14
   286dc:	andeq	r8, r2, r8, lsr #14
   286e0:	andeq	r8, r2, r8, lsr #14
   286e4:	andeq	r8, r2, r8, lsr #14
   286e8:	andeq	r8, r2, r8, lsr #14
   286ec:	andeq	r8, r2, r8, lsr #14
   286f0:	andeq	r8, r2, r8, lsr #14
   286f4:	andeq	r8, r2, r8, lsr #14
   286f8:	andeq	r8, r2, r8, lsr #14
   286fc:	andeq	r8, r2, r8, lsr #14
   28700:	andeq	r8, r2, r8, lsr #14
   28704:	andeq	r8, r2, r8, lsr #14
   28708:	andeq	r8, r2, r8, lsr #14
   2870c:	andeq	r8, r2, r8, lsr #14
   28710:	andeq	r8, r2, r8, lsr #14
   28714:	andeq	r8, r2, r8, lsr #14
   28718:	ldrdeq	r8, [r2], -ip
   2871c:	andeq	r8, r2, r0, lsr #16
   28720:	ldrdeq	r8, [r2], -ip
   28724:	andeq	r8, r2, r4, lsl #16
   28728:	ldr	r0, [fp, #-64]	; 0xffffffc0
   2872c:	tst	r0, #1
   28730:	bne	2875c <__assert_fail@plt+0x15b6c>
   28734:	ldr	r1, [fp, #16]
   28738:	ubfx	r0, r6, #5, #3
   2873c:	mov	r2, #1
   28740:	ldr	r0, [r1, r0, lsl #2]
   28744:	and	r1, r6, #31
   28748:	tst	r0, r2, lsl r1
   2874c:	beq	2875c <__assert_fail@plt+0x15b6c>
   28750:	mov	r0, r6
   28754:	mov	r1, r9
   28758:	b	28770 <__assert_fail@plt+0x15b80>
   2875c:	ldr	r0, [fp, #-52]	; 0xffffffcc
   28760:	mov	r1, r9
   28764:	cmp	r0, #0
   28768:	mov	r0, r6
   2876c:	beq	28ebc <__assert_fail@plt+0x162cc>
   28770:	ldr	r2, [fp, #-76]	; 0xffffffb4
   28774:	tst	r2, #1
   28778:	bne	29058 <__assert_fail@plt+0x16468>
   2877c:	ldr	r2, [fp, #-68]	; 0xffffffbc
   28780:	subs	r2, r2, #2
   28784:	movwne	r2, #1
   28788:	orr	r2, r2, lr
   2878c:	tst	r2, #1
   28790:	bne	287c8 <__assert_fail@plt+0x15bd8>
   28794:	cmp	r8, ip
   28798:	mov	lr, #1
   2879c:	movcc	r2, #39	; 0x27
   287a0:	strbcc	r2, [r5, r8]
   287a4:	add	r2, r8, #1
   287a8:	cmp	r2, ip
   287ac:	movcc	r3, #36	; 0x24
   287b0:	strbcc	r3, [r5, r2]
   287b4:	add	r2, r8, #2
   287b8:	add	r8, r8, #3
   287bc:	cmp	r2, ip
   287c0:	movcc	r3, #39	; 0x27
   287c4:	strbcc	r3, [r5, r2]
   287c8:	cmp	r8, ip
   287cc:	movcc	r2, #92	; 0x5c
   287d0:	strbcc	r2, [r5, r8]
   287d4:	add	r8, r8, #1
   287d8:	b	28efc <__assert_fail@plt+0x1630c>
   287dc:	cmp	sl, #1
   287e0:	beq	28804 <__assert_fail@plt+0x15c14>
   287e4:	mov	r9, #0
   287e8:	cmn	sl, #1
   287ec:	bne	28810 <__assert_fail@plt+0x15c20>
   287f0:	ldrb	r0, [r4, #1]
   287f4:	cmp	r0, #0
   287f8:	beq	28804 <__assert_fail@plt+0x15c14>
   287fc:	mvn	sl, #0
   28800:	b	28810 <__assert_fail@plt+0x15c20>
   28804:	mov	r9, #0
   28808:	cmp	r7, #0
   2880c:	beq	2881c <__assert_fail@plt+0x15c2c>
   28810:	mov	r0, #0
   28814:	str	r0, [fp, #-56]	; 0xffffffc8
   28818:	b	28728 <__assert_fail@plt+0x15b38>
   2881c:	mov	r1, #1
   28820:	ldr	r0, [fp, #-68]	; 0xffffffbc
   28824:	cmp	r0, #2
   28828:	bne	28840 <__assert_fail@plt+0x15c50>
   2882c:	ldr	r0, [fp, #-76]	; 0xffffffb4
   28830:	mov	r9, r1
   28834:	tst	r0, #1
   28838:	beq	28728 <__assert_fail@plt+0x15b38>
   2883c:	b	29058 <__assert_fail@plt+0x16468>
   28840:	mov	r9, r1
   28844:	b	28728 <__assert_fail@plt+0x15b38>
   28848:	ldr	r0, [fp, #-68]	; 0xffffffbc
   2884c:	cmp	r0, #2
   28850:	bne	28a94 <__assert_fail@plt+0x15ea4>
   28854:	ldr	r0, [fp, #-76]	; 0xffffffb4
   28858:	tst	r0, #1
   2885c:	bne	29058 <__assert_fail@plt+0x16468>
   28860:	mov	r0, #0
   28864:	str	r0, [fp, #-56]	; 0xffffffc8
   28868:	b	28aac <__assert_fail@plt+0x15ebc>
   2886c:	mov	r0, #102	; 0x66
   28870:	b	28ab8 <__assert_fail@plt+0x15ec8>
   28874:	mov	r2, #116	; 0x74
   28878:	b	28888 <__assert_fail@plt+0x15c98>
   2887c:	mov	r0, #98	; 0x62
   28880:	b	28ab8 <__assert_fail@plt+0x15ec8>
   28884:	mov	r2, #114	; 0x72
   28888:	ldr	r0, [sp, #68]	; 0x44
   2888c:	tst	r0, #1
   28890:	mov	r0, r2
   28894:	bne	28ab8 <__assert_fail@plt+0x15ec8>
   28898:	b	29058 <__assert_fail@plt+0x16468>
   2889c:	ldr	r0, [sp, #84]	; 0x54
   288a0:	tst	r0, #1
   288a4:	beq	28ad8 <__assert_fail@plt+0x15ee8>
   288a8:	ldr	r0, [fp, #-76]	; 0xffffffb4
   288ac:	tst	r0, #1
   288b0:	bne	29144 <__assert_fail@plt+0x16554>
   288b4:	ldr	r0, [fp, #-68]	; 0xffffffbc
   288b8:	mov	r2, sl
   288bc:	subs	r0, r0, #2
   288c0:	movwne	r0, #1
   288c4:	orr	r0, r0, lr
   288c8:	tst	r0, #1
   288cc:	bne	28904 <__assert_fail@plt+0x15d14>
   288d0:	cmp	r8, ip
   288d4:	mov	lr, #1
   288d8:	movcc	r0, #39	; 0x27
   288dc:	strbcc	r0, [r5, r8]
   288e0:	add	r0, r8, #1
   288e4:	cmp	r0, ip
   288e8:	movcc	r1, #36	; 0x24
   288ec:	strbcc	r1, [r5, r0]
   288f0:	add	r0, r8, #2
   288f4:	add	r8, r8, #3
   288f8:	cmp	r0, ip
   288fc:	movcc	r1, #39	; 0x27
   28900:	strbcc	r1, [r5, r0]
   28904:	mov	r1, #1
   28908:	cmp	r8, ip
   2890c:	mov	r9, #0
   28910:	mov	r6, #48	; 0x30
   28914:	str	r1, [fp, #-56]	; 0xffffffc8
   28918:	ldr	r1, [fp, #-68]	; 0xffffffbc
   2891c:	movcc	r0, #92	; 0x5c
   28920:	strbcc	r0, [r5, r8]
   28924:	add	r0, r8, #1
   28928:	cmp	r1, #2
   2892c:	beq	28c34 <__assert_fail@plt+0x16044>
   28930:	add	r1, r7, #1
   28934:	cmp	r1, r2
   28938:	bcs	28c34 <__assert_fail@plt+0x16044>
   2893c:	ldrb	r1, [r4, r1]
   28940:	sub	r1, r1, #48	; 0x30
   28944:	uxtb	r1, r1
   28948:	cmp	r1, #9
   2894c:	bhi	28c34 <__assert_fail@plt+0x16044>
   28950:	cmp	r0, ip
   28954:	movcc	r1, #48	; 0x30
   28958:	strbcc	r1, [r5, r0]
   2895c:	add	r0, r8, #2
   28960:	add	r8, r8, #3
   28964:	cmp	r0, ip
   28968:	movcc	r1, #48	; 0x30
   2896c:	strbcc	r1, [r5, r0]
   28970:	b	28728 <__assert_fail@plt+0x15b38>
   28974:	ldr	r0, [fp, #-68]	; 0xffffffbc
   28978:	mov	r6, #63	; 0x3f
   2897c:	cmp	r0, #5
   28980:	beq	28c3c <__assert_fail@plt+0x1604c>
   28984:	mov	r1, #0
   28988:	cmp	r0, #2
   2898c:	str	r1, [fp, #-56]	; 0xffffffc8
   28990:	bne	28cf0 <__assert_fail@plt+0x16100>
   28994:	ldr	r0, [fp, #-76]	; 0xffffffb4
   28998:	mov	r9, #0
   2899c:	b	28834 <__assert_fail@plt+0x15c44>
   289a0:	mov	r0, #118	; 0x76
   289a4:	b	28ab8 <__assert_fail@plt+0x15ec8>
   289a8:	mov	r0, #1
   289ac:	mov	r6, #39	; 0x27
   289b0:	str	r0, [sp, #60]	; 0x3c
   289b4:	ldr	r0, [fp, #-68]	; 0xffffffbc
   289b8:	cmp	r0, #2
   289bc:	bne	28a30 <__assert_fail@plt+0x15e40>
   289c0:	ldr	r0, [fp, #-76]	; 0xffffffb4
   289c4:	tst	r0, #1
   289c8:	bne	29058 <__assert_fail@plt+0x16468>
   289cc:	ldr	r2, [sp, #56]	; 0x38
   289d0:	clz	r1, ip
   289d4:	mov	lr, #0
   289d8:	lsr	r1, r1, #5
   289dc:	cmp	r2, #0
   289e0:	mov	r0, r2
   289e4:	movwne	r0, #1
   289e8:	orrs	r0, r0, r1
   289ec:	moveq	r2, ip
   289f0:	moveq	ip, r0
   289f4:	cmp	r8, ip
   289f8:	str	r2, [sp, #56]	; 0x38
   289fc:	movcc	r0, #39	; 0x27
   28a00:	strbcc	r0, [r5, r8]
   28a04:	add	r0, r8, #1
   28a08:	cmp	r0, ip
   28a0c:	movcc	r1, #92	; 0x5c
   28a10:	strbcc	r1, [r5, r0]
   28a14:	add	r0, r8, #2
   28a18:	add	r8, r8, #3
   28a1c:	cmp	r0, ip
   28a20:	movcc	r1, #39	; 0x27
   28a24:	strbcc	r1, [r5, r0]
   28a28:	mov	r0, #0
   28a2c:	str	r0, [fp, #-56]	; 0xffffffc8
   28a30:	mov	r9, #1
   28a34:	b	28728 <__assert_fail@plt+0x15b38>
   28a38:	ldr	r0, [sp, #40]	; 0x28
   28a3c:	str	lr, [sp, #44]	; 0x2c
   28a40:	str	ip, [sp, #88]	; 0x58
   28a44:	cmp	r0, #1
   28a48:	bne	28af8 <__assert_fail@plt+0x15f08>
   28a4c:	str	sl, [sp, #36]	; 0x24
   28a50:	bl	1286c <__ctype_b_loc@plt>
   28a54:	ldr	r0, [r0]
   28a58:	ldr	r4, [fp, #-80]	; 0xffffffb0
   28a5c:	mov	r1, #1
   28a60:	add	r0, r0, r6, lsl #1
   28a64:	ldrb	r0, [r0, #1]
   28a68:	ubfx	r9, r0, #6, #1
   28a6c:	ldr	r0, [sp, #52]	; 0x34
   28a70:	ldr	lr, [sp, #44]	; 0x2c
   28a74:	cmp	r1, #1
   28a78:	orr	r3, r9, r0
   28a7c:	bhi	28cf8 <__assert_fail@plt+0x16108>
   28a80:	tst	r3, #1
   28a84:	beq	28cf8 <__assert_fail@plt+0x16108>
   28a88:	ldr	sl, [sp, #36]	; 0x24
   28a8c:	ldr	ip, [sp, #88]	; 0x58
   28a90:	b	28728 <__assert_fail@plt+0x15b38>
   28a94:	ldr	r1, [sp, #48]	; 0x30
   28a98:	mov	r0, #0
   28a9c:	str	r0, [fp, #-56]	; 0xffffffc8
   28aa0:	mov	r0, #92	; 0x5c
   28aa4:	cmp	r1, #0
   28aa8:	beq	28ab8 <__assert_fail@plt+0x15ec8>
   28aac:	mov	r6, #92	; 0x5c
   28ab0:	mov	r9, #0
   28ab4:	b	28ebc <__assert_fail@plt+0x162cc>
   28ab8:	mov	r1, #0
   28abc:	mov	r9, #0
   28ac0:	str	r1, [fp, #-56]	; 0xffffffc8
   28ac4:	ldr	r1, [sp, #84]	; 0x54
   28ac8:	tst	r1, #1
   28acc:	mov	r1, #0
   28ad0:	beq	28728 <__assert_fail@plt+0x15b38>
   28ad4:	b	28770 <__assert_fail@plt+0x15b80>
   28ad8:	ldr	r0, [sp, #32]
   28adc:	mov	r6, #0
   28ae0:	mov	r9, #0
   28ae4:	cmp	r0, #0
   28ae8:	mov	r0, #0
   28aec:	str	r0, [fp, #-56]	; 0xffffffc8
   28af0:	beq	28728 <__assert_fail@plt+0x15b38>
   28af4:	b	28f14 <__assert_fail@plt+0x16324>
   28af8:	mov	r0, #0
   28afc:	cmn	sl, #1
   28b00:	sub	r3, fp, #40	; 0x28
   28b04:	str	r0, [fp, #-36]	; 0xffffffdc
   28b08:	str	r0, [fp, #-40]	; 0xffffffd8
   28b0c:	bne	28b24 <__assert_fail@plt+0x15f34>
   28b10:	mov	r0, r4
   28b14:	bl	128c0 <strlen@plt>
   28b18:	ldr	r4, [fp, #-80]	; 0xffffffb0
   28b1c:	sub	r3, fp, #40	; 0x28
   28b20:	mov	sl, r0
   28b24:	ldr	r0, [sp, #72]	; 0x48
   28b28:	mov	r9, #1
   28b2c:	mov	r1, #0
   28b30:	str	sl, [sp, #36]	; 0x24
   28b34:	add	r0, r0, r7
   28b38:	str	r0, [sp, #20]
   28b3c:	add	r0, r1, r7
   28b40:	str	r1, [sp, #24]
   28b44:	add	r1, r4, r0
   28b48:	mov	r4, r0
   28b4c:	sub	r2, sl, r0
   28b50:	sub	r0, fp, #44	; 0x2c
   28b54:	bl	2debc <__assert_fail@plt+0x1b2cc>
   28b58:	cmp	r0, #0
   28b5c:	beq	28f68 <__assert_fail@plt+0x16378>
   28b60:	cmn	r0, #1
   28b64:	beq	28f20 <__assert_fail@plt+0x16330>
   28b68:	ldr	r2, [sp, #36]	; 0x24
   28b6c:	cmn	r0, #2
   28b70:	beq	28f28 <__assert_fail@plt+0x16338>
   28b74:	ldr	r2, [sp, #64]	; 0x40
   28b78:	ldr	ip, [sp, #88]	; 0x58
   28b7c:	ldr	r4, [sp, #84]	; 0x54
   28b80:	ldr	lr, [fp, #-48]	; 0xffffffd0
   28b84:	cmp	r0, #2
   28b88:	mov	r1, #0
   28b8c:	movwcc	r1, #1
   28b90:	eor	r2, r2, #1
   28b94:	orrs	r1, r2, r1
   28b98:	bne	28be8 <__assert_fail@plt+0x15ff8>
   28b9c:	ldr	r1, [sp, #24]
   28ba0:	ldr	r2, [sp, #20]
   28ba4:	add	r1, r2, r1
   28ba8:	sub	r2, r0, #1
   28bac:	ldrb	r3, [r1]
   28bb0:	sub	r5, r3, #94	; 0x5e
   28bb4:	cmp	r5, #30
   28bb8:	bhi	28bd0 <__assert_fail@plt+0x15fe0>
   28bbc:	mov	r4, #1
   28bc0:	mov	sl, #1073741829	; 0x40000005
   28bc4:	tst	sl, r4, lsl r5
   28bc8:	ldr	r4, [sp, #84]	; 0x54
   28bcc:	bne	29030 <__assert_fail@plt+0x16440>
   28bd0:	sub	r3, r3, #91	; 0x5b
   28bd4:	cmp	r3, #2
   28bd8:	bcc	29030 <__assert_fail@plt+0x16440>
   28bdc:	add	r1, r1, #1
   28be0:	subs	r2, r2, #1
   28be4:	bne	28bac <__assert_fail@plt+0x15fbc>
   28be8:	ldr	r5, [sp, #24]
   28bec:	str	lr, [fp, #-48]	; 0xffffffd0
   28bf0:	add	r5, r0, r5
   28bf4:	ldr	r0, [fp, #-44]	; 0xffffffd4
   28bf8:	bl	126f8 <iswprint@plt>
   28bfc:	cmp	r0, #0
   28c00:	sub	r4, fp, #40	; 0x28
   28c04:	movwne	r0, #1
   28c08:	and	r9, r9, r0
   28c0c:	mov	r0, r4
   28c10:	bl	1262c <mbsinit@plt>
   28c14:	mov	r1, r5
   28c18:	mov	r3, r4
   28c1c:	ldr	sl, [sp, #36]	; 0x24
   28c20:	ldr	r5, [fp, #-84]	; 0xffffffac
   28c24:	ldr	r4, [fp, #-80]	; 0xffffffb0
   28c28:	cmp	r0, #0
   28c2c:	beq	28b3c <__assert_fail@plt+0x15f4c>
   28c30:	b	28a6c <__assert_fail@plt+0x15e7c>
   28c34:	mov	r8, r0
   28c38:	b	28728 <__assert_fail@plt+0x15b38>
   28c3c:	mov	r0, #0
   28c40:	str	r0, [fp, #-56]	; 0xffffffc8
   28c44:	ldr	r0, [sp, #28]
   28c48:	cmp	r0, #0
   28c4c:	beq	28cf0 <__assert_fail@plt+0x16100>
   28c50:	add	r0, r7, #2
   28c54:	mov	r1, sl
   28c58:	cmp	r0, sl
   28c5c:	bcs	28cf0 <__assert_fail@plt+0x16100>
   28c60:	add	r1, r7, r4
   28c64:	ldrb	r1, [r1, #1]
   28c68:	cmp	r1, #63	; 0x3f
   28c6c:	bne	28cf0 <__assert_fail@plt+0x16100>
   28c70:	ldrb	r9, [r4, r0]
   28c74:	sub	r2, r9, #33	; 0x21
   28c78:	cmp	r2, #29
   28c7c:	bhi	28cf0 <__assert_fail@plt+0x16100>
   28c80:	mov	r1, r4
   28c84:	movw	r4, #20929	; 0x51c1
   28c88:	mov	r3, #1
   28c8c:	movt	r4, #14336	; 0x3800
   28c90:	tst	r4, r3, lsl r2
   28c94:	beq	28f7c <__assert_fail@plt+0x1638c>
   28c98:	ldr	r2, [fp, #-76]	; 0xffffffb4
   28c9c:	tst	r2, #1
   28ca0:	bne	2914c <__assert_fail@plt+0x1655c>
   28ca4:	cmp	r8, ip
   28ca8:	mov	r4, r1
   28cac:	mov	r7, r0
   28cb0:	mov	r6, r9
   28cb4:	movcc	r2, #63	; 0x3f
   28cb8:	strbcc	r2, [r5, r8]
   28cbc:	add	r2, r8, #1
   28cc0:	cmp	r2, ip
   28cc4:	movcc	r3, #34	; 0x22
   28cc8:	strbcc	r3, [r5, r2]
   28ccc:	add	r2, r8, #2
   28cd0:	cmp	r2, ip
   28cd4:	movcc	r3, #34	; 0x22
   28cd8:	strbcc	r3, [r5, r2]
   28cdc:	add	r2, r8, #3
   28ce0:	add	r8, r8, #4
   28ce4:	cmp	r2, ip
   28ce8:	movcc	r3, #63	; 0x3f
   28cec:	strbcc	r3, [r5, r2]
   28cf0:	mov	r9, #0
   28cf4:	b	28728 <__assert_fail@plt+0x15b38>
   28cf8:	ldr	sl, [sp, #36]	; 0x24
   28cfc:	add	r0, r1, r7
   28d00:	mov	r2, #0
   28d04:	str	r3, [sp, #24]
   28d08:	str	r0, [fp, #-56]	; 0xffffffc8
   28d0c:	tst	r3, #1
   28d10:	beq	28d3c <__assert_fail@plt+0x1614c>
   28d14:	ldr	r0, [fp, #-52]	; 0xffffffcc
   28d18:	tst	r0, #1
   28d1c:	beq	28e04 <__assert_fail@plt+0x16214>
   28d20:	ldr	r1, [sp, #88]	; 0x58
   28d24:	mov	r0, r3
   28d28:	cmp	r8, r1
   28d2c:	movcc	r1, #92	; 0x5c
   28d30:	strbcc	r1, [r5, r8]
   28d34:	add	r8, r8, #1
   28d38:	b	28e08 <__assert_fail@plt+0x16218>
   28d3c:	ldr	r1, [fp, #-76]	; 0xffffffb4
   28d40:	tst	r1, #1
   28d44:	bne	29054 <__assert_fail@plt+0x16464>
   28d48:	ldr	r1, [fp, #-68]	; 0xffffffbc
   28d4c:	subs	r2, r1, #2
   28d50:	movwne	r2, #1
   28d54:	orr	r2, r2, lr
   28d58:	tst	r2, #1
   28d5c:	bne	28da0 <__assert_fail@plt+0x161b0>
   28d60:	ldr	r1, [sp, #88]	; 0x58
   28d64:	add	r2, r8, #1
   28d68:	mov	lr, #1
   28d6c:	cmp	r8, r1
   28d70:	movcc	r1, #39	; 0x27
   28d74:	strbcc	r1, [r5, r8]
   28d78:	ldr	r1, [sp, #88]	; 0x58
   28d7c:	cmp	r2, r1
   28d80:	movcc	r1, #36	; 0x24
   28d84:	strbcc	r1, [r5, r2]
   28d88:	ldr	r1, [sp, #88]	; 0x58
   28d8c:	add	r2, r8, #2
   28d90:	add	r8, r8, #3
   28d94:	cmp	r2, r1
   28d98:	movcc	r1, #39	; 0x27
   28d9c:	strbcc	r1, [r5, r2]
   28da0:	ldr	r1, [sp, #88]	; 0x58
   28da4:	add	r2, r8, #1
   28da8:	mov	r0, r3
   28dac:	cmp	r8, r1
   28db0:	movcc	r1, #92	; 0x5c
   28db4:	strbcc	r1, [r5, r8]
   28db8:	ldr	r1, [sp, #88]	; 0x58
   28dbc:	cmp	r2, r1
   28dc0:	bcs	28dd4 <__assert_fail@plt+0x161e4>
   28dc4:	uxtb	r3, r6
   28dc8:	mov	r1, #48	; 0x30
   28dcc:	orr	r3, r1, r3, lsr #6
   28dd0:	strb	r3, [r5, r2]
   28dd4:	ldr	r1, [sp, #88]	; 0x58
   28dd8:	add	r2, r8, #2
   28ddc:	add	r8, r8, #3
   28de0:	cmp	r2, r1
   28de4:	lsrcc	r3, r6, #3
   28de8:	movcc	r1, #6
   28dec:	bficc	r3, r1, #3, #29
   28df0:	mov	r1, #6
   28df4:	bfi	r6, r1, #3, #29
   28df8:	strbcc	r3, [r5, r2]
   28dfc:	mov	r2, #1
   28e00:	b	28e10 <__assert_fail@plt+0x16220>
   28e04:	mov	r0, r3
   28e08:	mov	r1, #0
   28e0c:	str	r1, [fp, #-52]	; 0xffffffcc
   28e10:	mov	ip, r2
   28e14:	and	r1, r2, #1
   28e18:	ldr	r2, [fp, #-56]	; 0xffffffc8
   28e1c:	add	r3, r7, #1
   28e20:	cmp	r2, r3
   28e24:	bls	28eac <__assert_fail@plt+0x162bc>
   28e28:	cmp	r1, #0
   28e2c:	mvn	r5, lr
   28e30:	movwne	r1, #1
   28e34:	orr	r5, r5, r1
   28e38:	tst	r5, #1
   28e3c:	bne	28e80 <__assert_fail@plt+0x16290>
   28e40:	ldr	r1, [sp, #88]	; 0x58
   28e44:	ldr	r5, [fp, #-84]	; 0xffffffac
   28e48:	mov	r2, r4
   28e4c:	ldr	r4, [sp, #88]	; 0x58
   28e50:	ldr	r0, [sp, #24]
   28e54:	mov	lr, #0
   28e58:	cmp	r8, r1
   28e5c:	movcc	r1, #39	; 0x27
   28e60:	strbcc	r1, [r5, r8]
   28e64:	add	r1, r8, #1
   28e68:	add	r8, r8, #2
   28e6c:	cmp	r1, r4
   28e70:	movcc	r4, #39	; 0x27
   28e74:	strbcc	r4, [r5, r1]
   28e78:	mov	r4, r2
   28e7c:	b	28e84 <__assert_fail@plt+0x16294>
   28e80:	ldr	r5, [fp, #-84]	; 0xffffffac
   28e84:	ldr	r1, [sp, #88]	; 0x58
   28e88:	mov	r2, ip
   28e8c:	cmp	r8, r1
   28e90:	ldr	r1, [sp, #72]	; 0x48
   28e94:	strbcc	r6, [r5, r8]
   28e98:	add	r8, r8, #1
   28e9c:	ldrb	r6, [r1, r7]
   28ea0:	mov	r7, r3
   28ea4:	mov	r3, r0
   28ea8:	b	28d0c <__assert_fail@plt+0x1611c>
   28eac:	ldr	ip, [sp, #88]	; 0x58
   28eb0:	cmp	r1, #0
   28eb4:	movwne	r1, #1
   28eb8:	str	r1, [fp, #-56]	; 0xffffffc8
   28ebc:	ldr	r0, [fp, #-56]	; 0xffffffc8
   28ec0:	cmp	r0, #0
   28ec4:	bne	28ef4 <__assert_fail@plt+0x16304>
   28ec8:	tst	lr, #1
   28ecc:	beq	28ef4 <__assert_fail@plt+0x16304>
   28ed0:	cmp	r8, ip
   28ed4:	mov	lr, #0
   28ed8:	movcc	r0, #39	; 0x27
   28edc:	strbcc	r0, [r5, r8]
   28ee0:	add	r0, r8, #1
   28ee4:	add	r8, r8, #2
   28ee8:	cmp	r0, ip
   28eec:	movcc	r1, #39	; 0x27
   28ef0:	strbcc	r1, [r5, r0]
   28ef4:	mov	r1, r9
   28ef8:	mov	r0, r6
   28efc:	cmp	r8, ip
   28f00:	strbcc	r0, [r5, r8]
   28f04:	ldr	r0, [fp, #-48]	; 0xffffffd0
   28f08:	add	r8, r8, #1
   28f0c:	and	r0, r0, r1
   28f10:	str	r0, [fp, #-48]	; 0xffffffd0
   28f14:	mov	r3, sl
   28f18:	add	r7, r7, #1
   28f1c:	b	2840c <__assert_fail@plt+0x1581c>
   28f20:	mov	r9, #0
   28f24:	b	28f68 <__assert_fail@plt+0x16378>
   28f28:	mov	r9, #0
   28f2c:	cmp	r2, r4
   28f30:	bls	28f68 <__assert_fail@plt+0x16378>
   28f34:	ldr	r4, [fp, #-80]	; 0xffffffb0
   28f38:	ldr	r1, [sp, #24]
   28f3c:	add	r0, r4, r7
   28f40:	mov	r3, r1
   28f44:	ldrb	r1, [r0, r1]
   28f48:	cmp	r1, #0
   28f4c:	beq	28f74 <__assert_fail@plt+0x16384>
   28f50:	add	r3, r3, #1
   28f54:	add	r1, r7, r3
   28f58:	cmp	r1, r2
   28f5c:	mov	r1, r3
   28f60:	bcc	28f40 <__assert_fail@plt+0x16350>
   28f64:	b	28a6c <__assert_fail@plt+0x15e7c>
   28f68:	ldr	r4, [fp, #-80]	; 0xffffffb0
   28f6c:	ldr	r1, [sp, #24]
   28f70:	b	28a6c <__assert_fail@plt+0x15e7c>
   28f74:	mov	r1, r3
   28f78:	b	28a6c <__assert_fail@plt+0x15e7c>
   28f7c:	mov	r9, #0
   28f80:	mov	r4, r1
   28f84:	b	28728 <__assert_fail@plt+0x15b38>
   28f88:	mov	sl, r7
   28f8c:	b	28f94 <__assert_fail@plt+0x163a4>
   28f90:	mvn	sl, #0
   28f94:	ldr	r1, [fp, #-68]	; 0xffffffbc
   28f98:	ldr	r2, [fp, #-76]	; 0xffffffb4
   28f9c:	eor	r0, r1, #2
   28fa0:	orr	r0, r0, r8
   28fa4:	clz	r0, r0
   28fa8:	lsr	r0, r0, #5
   28fac:	tst	r2, r0
   28fb0:	bne	29058 <__assert_fail@plt+0x16468>
   28fb4:	subs	r0, r1, #2
   28fb8:	movwne	r0, #1
   28fbc:	orr	r0, r2, r0
   28fc0:	tst	r0, #1
   28fc4:	ldreq	r0, [sp, #60]	; 0x3c
   28fc8:	ldreq	r1, [fp, #-48]	; 0xffffffd0
   28fcc:	eoreq	r0, r0, #1
   28fd0:	tsteq	r0, #1
   28fd4:	bne	290ec <__assert_fail@plt+0x164fc>
   28fd8:	tst	r1, #1
   28fdc:	bne	290b8 <__assert_fail@plt+0x164c8>
   28fe0:	ldr	r6, [sp, #56]	; 0x38
   28fe4:	mov	r9, #0
   28fe8:	cmp	r6, #0
   28fec:	beq	290e4 <__assert_fail@plt+0x164f4>
   28ff0:	ldr	r0, [sp, #84]	; 0x54
   28ff4:	mov	r1, #0
   28ff8:	mov	r7, #2
   28ffc:	cmp	ip, #0
   29000:	str	r1, [fp, #-48]	; 0xffffffd0
   29004:	mov	r1, #0
   29008:	str	r1, [fp, #-76]	; 0xffffffb4
   2900c:	beq	28174 <__assert_fail@plt+0x15584>
   29010:	b	290ec <__assert_fail@plt+0x164fc>
   29014:	ldr	r4, [fp, #-80]	; 0xffffffb0
   29018:	ldr	r1, [fp, #12]
   2901c:	ldr	r2, [fp, #-68]	; 0xffffffbc
   29020:	mov	r5, r3
   29024:	mov	ip, r6
   29028:	mov	r3, sl
   2902c:	b	2907c <__assert_fail@plt+0x1648c>
   29030:	tst	r4, #1
   29034:	ldr	r5, [fp, #-84]	; 0xffffffac
   29038:	ldr	r4, [fp, #-80]	; 0xffffffb0
   2903c:	ldr	r1, [fp, #12]
   29040:	ldr	r3, [sp, #36]	; 0x24
   29044:	mov	r0, #2
   29048:	movwne	r0, #4
   2904c:	mov	r2, r0
   29050:	b	2907c <__assert_fail@plt+0x1648c>
   29054:	ldr	ip, [sp, #88]	; 0x58
   29058:	ldr	r1, [sp, #84]	; 0x54
   2905c:	mov	r0, #2
   29060:	tst	r1, #1
   29064:	movwne	r0, #4
   29068:	ldr	r2, [fp, #-68]	; 0xffffffbc
   2906c:	ldr	r1, [fp, #12]
   29070:	mov	r3, sl
   29074:	cmp	r2, #2
   29078:	moveq	r2, r0
   2907c:	mov	r0, #0
   29080:	bic	r1, r1, #2
   29084:	str	r2, [sp]
   29088:	mov	r2, r4
   2908c:	str	r0, [sp, #8]
   29090:	ldr	r0, [sp, #76]	; 0x4c
   29094:	str	r1, [sp, #4]
   29098:	mov	r1, ip
   2909c:	str	r0, [sp, #12]
   290a0:	ldr	r0, [sp, #80]	; 0x50
   290a4:	str	r0, [sp, #16]
   290a8:	mov	r0, r5
   290ac:	bl	280e8 <__assert_fail@plt+0x154f8>
   290b0:	mov	r8, r0
   290b4:	b	29138 <__assert_fail@plt+0x16548>
   290b8:	mov	r0, #5
   290bc:	ldr	r1, [sp, #56]	; 0x38
   290c0:	ldr	r2, [fp, #-80]	; 0xffffffb0
   290c4:	mov	r3, sl
   290c8:	str	r0, [sp]
   290cc:	ldr	r0, [fp, #12]
   290d0:	str	r0, [sp, #4]
   290d4:	ldr	r0, [fp, #16]
   290d8:	str	r0, [sp, #8]
   290dc:	ldr	r0, [sp, #76]	; 0x4c
   290e0:	b	2909c <__assert_fail@plt+0x164ac>
   290e4:	mov	r0, #0
   290e8:	str	r0, [fp, #-76]	; 0xffffffb4
   290ec:	ldr	r1, [fp, #-88]	; 0xffffffa8
   290f0:	cmp	r1, #0
   290f4:	beq	2912c <__assert_fail@plt+0x1653c>
   290f8:	ldr	r0, [fp, #-76]	; 0xffffffb4
   290fc:	tst	r0, #1
   29100:	bne	2912c <__assert_fail@plt+0x1653c>
   29104:	ldrb	r0, [r1]
   29108:	cmp	r0, #0
   2910c:	beq	2912c <__assert_fail@plt+0x1653c>
   29110:	add	r1, r1, #1
   29114:	cmp	r8, ip
   29118:	strbcc	r0, [r5, r8]
   2911c:	add	r8, r8, #1
   29120:	ldrb	r0, [r1], #1
   29124:	cmp	r0, #0
   29128:	bne	29114 <__assert_fail@plt+0x16524>
   2912c:	cmp	r8, ip
   29130:	movcc	r0, #0
   29134:	strbcc	r0, [r5, r8]
   29138:	mov	r0, r8
   2913c:	sub	sp, fp, #28
   29140:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   29144:	mov	r0, #4
   29148:	b	29068 <__assert_fail@plt+0x16478>
   2914c:	mov	r4, r1
   29150:	b	29058 <__assert_fail@plt+0x16468>
   29154:	bl	12b9c <abort@plt>
   29158:	mov	r3, r2
   2915c:	mov	r2, #0
   29160:	b	29164 <__assert_fail@plt+0x16574>
   29164:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   29168:	add	fp, sp, #28
   2916c:	sub	sp, sp, #36	; 0x24
   29170:	movw	r8, #19752	; 0x4d28
   29174:	cmp	r3, #0
   29178:	mov	r4, r2
   2917c:	str	r2, [sp, #24]
   29180:	mov	r5, r1
   29184:	mov	r6, r0
   29188:	str	r0, [sp, #20]
   2918c:	movt	r8, #5
   29190:	movne	r8, r3
   29194:	bl	12908 <__errno_location@plt>
   29198:	str	r0, [sp, #28]
   2919c:	ldr	r1, [r8, #40]	; 0x28
   291a0:	ldr	r2, [r8, #44]	; 0x2c
   291a4:	ldr	r7, [r0]
   291a8:	cmp	r4, #0
   291ac:	add	sl, r8, #8
   291b0:	mov	r0, #0
   291b4:	ldm	r8, {r3, r9}
   291b8:	orreq	r9, r9, #1
   291bc:	stm	sp, {r3, r9, sl}
   291c0:	str	r1, [sp, #12]
   291c4:	str	r2, [sp, #16]
   291c8:	mov	r1, #0
   291cc:	mov	r2, r6
   291d0:	mov	r3, r5
   291d4:	str	r7, [sp, #32]
   291d8:	mov	r7, r5
   291dc:	bl	280e8 <__assert_fail@plt+0x154f8>
   291e0:	add	r4, r0, #1
   291e4:	mov	r5, r0
   291e8:	mov	r0, r4
   291ec:	bl	2a6b8 <__assert_fail@plt+0x17ac8>
   291f0:	mov	r6, r0
   291f4:	ldr	r0, [r8]
   291f8:	ldr	r2, [r8, #44]	; 0x2c
   291fc:	ldr	r1, [r8, #40]	; 0x28
   29200:	mov	r3, r7
   29204:	stm	sp, {r0, r9, sl}
   29208:	str	r2, [sp, #16]
   2920c:	ldr	r2, [sp, #20]
   29210:	str	r1, [sp, #12]
   29214:	mov	r0, r6
   29218:	mov	r1, r4
   2921c:	bl	280e8 <__assert_fail@plt+0x154f8>
   29220:	ldr	r0, [sp, #24]
   29224:	ldr	r1, [sp, #32]
   29228:	ldr	r2, [sp, #28]
   2922c:	cmp	r0, #0
   29230:	str	r1, [r2]
   29234:	strne	r5, [r0]
   29238:	mov	r0, r6
   2923c:	sub	sp, fp, #28
   29240:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   29244:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   29248:	add	fp, sp, #24
   2924c:	movw	r5, #17684	; 0x4514
   29250:	movw	r8, #17680	; 0x4510
   29254:	movt	r5, #5
   29258:	movt	r8, #5
   2925c:	ldr	r0, [r5]
   29260:	ldr	r4, [r8]
   29264:	cmp	r0, #2
   29268:	blt	29294 <__assert_fail@plt+0x166a4>
   2926c:	add	r7, r4, #12
   29270:	mov	r6, #0
   29274:	ldr	r0, [r7, r6, lsl #3]
   29278:	bl	2bcbc <__assert_fail@plt+0x190cc>
   2927c:	ldr	r1, [r5]
   29280:	add	r2, r6, #2
   29284:	add	r0, r6, #1
   29288:	mov	r6, r0
   2928c:	cmp	r2, r1
   29290:	blt	29274 <__assert_fail@plt+0x16684>
   29294:	ldr	r0, [r4, #4]
   29298:	movw	r9, #19800	; 0x4d58
   2929c:	movw	r7, #17688	; 0x4518
   292a0:	movt	r9, #5
   292a4:	movt	r7, #5
   292a8:	cmp	r0, r9
   292ac:	beq	292bc <__assert_fail@plt+0x166cc>
   292b0:	bl	2bcbc <__assert_fail@plt+0x190cc>
   292b4:	mov	r0, #256	; 0x100
   292b8:	stm	r7, {r0, r9}
   292bc:	cmp	r4, r7
   292c0:	beq	292d0 <__assert_fail@plt+0x166e0>
   292c4:	mov	r0, r4
   292c8:	bl	2bcbc <__assert_fail@plt+0x190cc>
   292cc:	str	r7, [r8]
   292d0:	mov	r0, #1
   292d4:	str	r0, [r5]
   292d8:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   292dc:	movw	r3, #19752	; 0x4d28
   292e0:	mvn	r2, #0
   292e4:	movt	r3, #5
   292e8:	b	292ec <__assert_fail@plt+0x166fc>
   292ec:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   292f0:	add	fp, sp, #28
   292f4:	sub	sp, sp, #44	; 0x2c
   292f8:	mov	r7, r3
   292fc:	str	r2, [sp, #36]	; 0x24
   29300:	str	r1, [sp, #32]
   29304:	mov	r5, r0
   29308:	bl	12908 <__errno_location@plt>
   2930c:	cmp	r5, #0
   29310:	bmi	29480 <__assert_fail@plt+0x16890>
   29314:	cmn	r5, #-2147483647	; 0x80000001
   29318:	beq	29480 <__assert_fail@plt+0x16890>
   2931c:	movw	r8, #17684	; 0x4514
   29320:	movw	r4, #17680	; 0x4510
   29324:	str	r0, [sp, #28]
   29328:	ldr	r0, [r0]
   2932c:	movt	r8, #5
   29330:	movt	r4, #5
   29334:	ldr	r1, [r8]
   29338:	ldr	r6, [r4]
   2933c:	str	r0, [sp, #24]
   29340:	cmp	r1, r5
   29344:	ble	29350 <__assert_fail@plt+0x16760>
   29348:	mov	sl, r6
   2934c:	b	293bc <__assert_fail@plt+0x167cc>
   29350:	movw	r9, #17688	; 0x4518
   29354:	mov	r0, #8
   29358:	str	r1, [fp, #-32]	; 0xffffffe0
   2935c:	sub	r1, r5, r1
   29360:	mvn	r3, #-2147483648	; 0x80000000
   29364:	movt	r9, #5
   29368:	str	r0, [sp]
   2936c:	add	r2, r1, #1
   29370:	sub	r1, fp, #32
   29374:	subs	r0, r6, r9
   29378:	movne	r0, r6
   2937c:	bl	2a7e8 <__assert_fail@plt+0x17bf8>
   29380:	mov	sl, r0
   29384:	cmp	r6, r9
   29388:	str	r0, [r4]
   2938c:	bne	29398 <__assert_fail@plt+0x167a8>
   29390:	ldrd	r0, [r9]
   29394:	stm	sl, {r0, r1}
   29398:	ldr	r1, [r8]
   2939c:	ldr	r2, [fp, #-32]	; 0xffffffe0
   293a0:	add	r0, sl, r1, lsl #3
   293a4:	sub	r1, r2, r1
   293a8:	lsl	r2, r1, #3
   293ac:	mov	r1, #0
   293b0:	bl	12938 <memset@plt>
   293b4:	ldr	r0, [fp, #-32]	; 0xffffffe0
   293b8:	str	r0, [r8]
   293bc:	mov	r9, sl
   293c0:	ldm	r7, {r0, r1}
   293c4:	orr	r8, r1, #1
   293c8:	add	r1, r7, #8
   293cc:	ldr	r2, [r7, #40]	; 0x28
   293d0:	ldr	r3, [r7, #44]	; 0x2c
   293d4:	ldr	r6, [r9, r5, lsl #3]!
   293d8:	str	r1, [sp, #20]
   293dc:	ldr	r4, [r9, #4]!
   293e0:	stm	sp, {r0, r8}
   293e4:	add	r0, sp, #8
   293e8:	stm	r0, {r1, r2, r3}
   293ec:	ldr	r2, [sp, #32]
   293f0:	ldr	r3, [sp, #36]	; 0x24
   293f4:	mov	r1, r6
   293f8:	mov	r0, r4
   293fc:	bl	280e8 <__assert_fail@plt+0x154f8>
   29400:	cmp	r6, r0
   29404:	bhi	29468 <__assert_fail@plt+0x16878>
   29408:	add	r6, r0, #1
   2940c:	movw	r0, #19800	; 0x4d58
   29410:	movt	r0, #5
   29414:	str	r6, [sl, r5, lsl #3]
   29418:	cmp	r4, r0
   2941c:	beq	29428 <__assert_fail@plt+0x16838>
   29420:	mov	r0, r4
   29424:	bl	2bcbc <__assert_fail@plt+0x190cc>
   29428:	mov	r0, r6
   2942c:	bl	2a6b8 <__assert_fail@plt+0x17ac8>
   29430:	str	r0, [r9]
   29434:	mov	r4, r0
   29438:	add	r3, sp, #8
   2943c:	ldr	r0, [r7]
   29440:	ldr	r1, [r7, #40]	; 0x28
   29444:	ldr	r2, [r7, #44]	; 0x2c
   29448:	stm	sp, {r0, r8}
   2944c:	ldr	r0, [sp, #20]
   29450:	stm	r3, {r0, r1, r2}
   29454:	ldr	r2, [sp, #32]
   29458:	ldr	r3, [sp, #36]	; 0x24
   2945c:	mov	r0, r4
   29460:	mov	r1, r6
   29464:	bl	280e8 <__assert_fail@plt+0x154f8>
   29468:	ldr	r0, [sp, #28]
   2946c:	ldr	r1, [sp, #24]
   29470:	str	r1, [r0]
   29474:	mov	r0, r4
   29478:	sub	sp, fp, #28
   2947c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   29480:	bl	12b9c <abort@plt>
   29484:	movw	r3, #19752	; 0x4d28
   29488:	movt	r3, #5
   2948c:	b	292ec <__assert_fail@plt+0x166fc>
   29490:	movw	r3, #19752	; 0x4d28
   29494:	mov	r1, r0
   29498:	mov	r0, #0
   2949c:	mvn	r2, #0
   294a0:	movt	r3, #5
   294a4:	b	292ec <__assert_fail@plt+0x166fc>
   294a8:	movw	r3, #19752	; 0x4d28
   294ac:	mov	r2, r1
   294b0:	mov	r1, r0
   294b4:	mov	r0, #0
   294b8:	movt	r3, #5
   294bc:	b	292ec <__assert_fail@plt+0x166fc>
   294c0:	push	{fp, lr}
   294c4:	mov	fp, sp
   294c8:	sub	sp, sp, #48	; 0x30
   294cc:	vmov.i32	q8, #0	; 0x00000000
   294d0:	mov	ip, #32
   294d4:	mov	r3, sp
   294d8:	mov	lr, r2
   294dc:	cmp	r1, #10
   294e0:	add	r2, r3, #16
   294e4:	vst1.64	{d16-d17}, [r3], ip
   294e8:	vst1.64	{d16-d17}, [r2]
   294ec:	vst1.64	{d16-d17}, [r3]
   294f0:	beq	29510 <__assert_fail@plt+0x16920>
   294f4:	str	r1, [sp]
   294f8:	mov	r3, sp
   294fc:	mov	r1, lr
   29500:	mvn	r2, #0
   29504:	bl	292ec <__assert_fail@plt+0x166fc>
   29508:	mov	sp, fp
   2950c:	pop	{fp, pc}
   29510:	bl	12b9c <abort@plt>
   29514:	push	{r4, sl, fp, lr}
   29518:	add	fp, sp, #8
   2951c:	sub	sp, sp, #48	; 0x30
   29520:	vmov.i32	q8, #0	; 0x00000000
   29524:	mov	ip, r3
   29528:	mov	r3, sp
   2952c:	mov	lr, #32
   29530:	cmp	r1, #10
   29534:	add	r4, r3, #16
   29538:	vst1.64	{d16-d17}, [r3], lr
   2953c:	vst1.64	{d16-d17}, [r4]
   29540:	vst1.64	{d16-d17}, [r3]
   29544:	beq	29564 <__assert_fail@plt+0x16974>
   29548:	str	r1, [sp]
   2954c:	mov	r1, r2
   29550:	mov	r3, sp
   29554:	mov	r2, ip
   29558:	bl	292ec <__assert_fail@plt+0x166fc>
   2955c:	sub	sp, fp, #8
   29560:	pop	{r4, sl, fp, pc}
   29564:	bl	12b9c <abort@plt>
   29568:	mov	r2, r1
   2956c:	mov	r1, r0
   29570:	mov	r0, #0
   29574:	b	294c0 <__assert_fail@plt+0x168d0>
   29578:	mov	r3, r2
   2957c:	mov	r2, r1
   29580:	mov	r1, r0
   29584:	mov	r0, #0
   29588:	b	29514 <__assert_fail@plt+0x16924>
   2958c:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   29590:	add	fp, sp, #24
   29594:	sub	sp, sp, #48	; 0x30
   29598:	movw	r8, #19752	; 0x4d28
   2959c:	mov	lr, r0
   295a0:	mov	r3, sp
   295a4:	mov	ip, r1
   295a8:	movt	r8, #5
   295ac:	mov	r1, r3
   295b0:	ldm	r8!, {r0, r4, r5, r6, r7, r9}
   295b4:	stmia	r1!, {r0, r4, r5, r6, r7, r9}
   295b8:	ldm	r8, {r0, r4, r5, r6, r7, r9}
   295bc:	stm	r1, {r0, r4, r5, r6, r7, r9}
   295c0:	ubfx	r0, r2, #5, #3
   295c4:	and	r2, r2, #31
   295c8:	mov	r4, #1
   295cc:	add	r0, r3, r0, lsl #2
   295d0:	ldr	r1, [r0, #8]
   295d4:	bic	r4, r4, r1, lsr r2
   295d8:	eor	r1, r1, r4, lsl r2
   295dc:	mov	r2, ip
   295e0:	str	r1, [r0, #8]
   295e4:	mov	r0, #0
   295e8:	mov	r1, lr
   295ec:	bl	292ec <__assert_fail@plt+0x166fc>
   295f0:	sub	sp, fp, #24
   295f4:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   295f8:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   295fc:	add	fp, sp, #24
   29600:	sub	sp, sp, #48	; 0x30
   29604:	movw	lr, #19752	; 0x4d28
   29608:	mov	ip, r0
   2960c:	mov	r3, sp
   29610:	movt	lr, #5
   29614:	mov	r2, r3
   29618:	ldm	lr!, {r0, r4, r5, r6, r7, r8}
   2961c:	stmia	r2!, {r0, r4, r5, r6, r7, r8}
   29620:	ldm	lr, {r0, r4, r5, r6, r7, r8}
   29624:	stm	r2, {r0, r4, r5, r6, r7, r8}
   29628:	ubfx	r0, r1, #5, #3
   2962c:	and	r1, r1, #31
   29630:	mov	r7, #1
   29634:	add	r0, r3, r0, lsl #2
   29638:	ldr	r2, [r0, #8]
   2963c:	bic	r7, r7, r2, lsr r1
   29640:	eor	r1, r2, r7, lsl r1
   29644:	mvn	r2, #0
   29648:	str	r1, [r0, #8]
   2964c:	mov	r0, #0
   29650:	mov	r1, ip
   29654:	bl	292ec <__assert_fail@plt+0x166fc>
   29658:	sub	sp, fp, #24
   2965c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   29660:	push	{r4, r5, r6, r7, fp, lr}
   29664:	add	fp, sp, #16
   29668:	sub	sp, sp, #48	; 0x30
   2966c:	movw	lr, #19752	; 0x4d28
   29670:	mov	ip, r0
   29674:	mov	r3, sp
   29678:	movt	lr, #5
   2967c:	mov	r2, r3
   29680:	ldm	lr!, {r0, r1, r4, r5, r6, r7}
   29684:	stmia	r2!, {r0, r1, r4, r5, r6, r7}
   29688:	ldm	lr, {r0, r1, r4, r5, r6, r7}
   2968c:	stm	r2, {r0, r1, r4, r5, r6, r7}
   29690:	mov	r1, ip
   29694:	mvn	r2, #0
   29698:	ldr	r0, [sp, #12]
   2969c:	orr	r0, r0, #67108864	; 0x4000000
   296a0:	str	r0, [sp, #12]
   296a4:	mov	r0, #0
   296a8:	bl	292ec <__assert_fail@plt+0x166fc>
   296ac:	sub	sp, fp, #16
   296b0:	pop	{r4, r5, r6, r7, fp, pc}
   296b4:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   296b8:	add	fp, sp, #24
   296bc:	sub	sp, sp, #48	; 0x30
   296c0:	movw	r8, #19752	; 0x4d28
   296c4:	mov	ip, r1
   296c8:	mov	lr, r0
   296cc:	mov	r3, sp
   296d0:	movt	r8, #5
   296d4:	mov	r2, r3
   296d8:	ldm	r8!, {r0, r1, r4, r5, r6, r7}
   296dc:	stmia	r2!, {r0, r1, r4, r5, r6, r7}
   296e0:	ldm	r8, {r0, r1, r4, r5, r6, r7}
   296e4:	stm	r2, {r0, r1, r4, r5, r6, r7}
   296e8:	mov	r1, lr
   296ec:	mov	r2, ip
   296f0:	ldr	r0, [sp, #12]
   296f4:	orr	r0, r0, #67108864	; 0x4000000
   296f8:	str	r0, [sp, #12]
   296fc:	mov	r0, #0
   29700:	bl	292ec <__assert_fail@plt+0x166fc>
   29704:	sub	sp, fp, #24
   29708:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   2970c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   29710:	add	fp, sp, #24
   29714:	sub	sp, sp, #96	; 0x60
   29718:	vmov.i32	q8, #0	; 0x00000000
   2971c:	mov	lr, sp
   29720:	mov	ip, r2
   29724:	cmp	r1, #10
   29728:	add	r3, lr, #16
   2972c:	mov	r2, lr
   29730:	vst1.64	{d16-d17}, [r3]
   29734:	mov	r3, #28
   29738:	vst1.64	{d16-d17}, [r2], r3
   2973c:	vst1.32	{d16-d17}, [r2]
   29740:	beq	29780 <__assert_fail@plt+0x16b90>
   29744:	str	r1, [sp, #48]	; 0x30
   29748:	add	r3, sp, #48	; 0x30
   2974c:	ldm	lr!, {r2, r4, r5, r6, r7}
   29750:	add	r1, r3, #4
   29754:	stmia	r1!, {r2, r4, r5, r6, r7}
   29758:	ldm	lr, {r2, r4, r5, r6, r7, r8}
   2975c:	stm	r1, {r2, r4, r5, r6, r7, r8}
   29760:	mvn	r2, #0
   29764:	ldr	r1, [sp, #60]	; 0x3c
   29768:	orr	r1, r1, #67108864	; 0x4000000
   2976c:	str	r1, [sp, #60]	; 0x3c
   29770:	mov	r1, ip
   29774:	bl	292ec <__assert_fail@plt+0x166fc>
   29778:	sub	sp, fp, #24
   2977c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   29780:	bl	12b9c <abort@plt>
   29784:	push	{fp, lr}
   29788:	mov	fp, sp
   2978c:	sub	sp, sp, #8
   29790:	mvn	ip, #0
   29794:	str	ip, [sp]
   29798:	bl	297a4 <__assert_fail@plt+0x16bb4>
   2979c:	mov	sp, fp
   297a0:	pop	{fp, pc}
   297a4:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   297a8:	add	fp, sp, #24
   297ac:	sub	sp, sp, #48	; 0x30
   297b0:	movw	ip, #19752	; 0x4d28
   297b4:	mov	lr, r3
   297b8:	mov	r3, sp
   297bc:	cmp	r1, #0
   297c0:	movt	ip, #5
   297c4:	cmpne	r2, #0
   297c8:	ldm	ip!, {r4, r5, r6, r7, r8, r9}
   297cc:	stmia	r3!, {r4, r5, r6, r7, r8, r9}
   297d0:	ldm	ip, {r4, r5, r6, r7, r8, r9}
   297d4:	stm	r3, {r4, r5, r6, r7, r8, r9}
   297d8:	mov	r3, #10
   297dc:	str	r3, [sp]
   297e0:	bne	297e8 <__assert_fail@plt+0x16bf8>
   297e4:	bl	12b9c <abort@plt>
   297e8:	ldr	ip, [fp, #8]
   297ec:	str	r2, [sp, #44]	; 0x2c
   297f0:	str	r1, [sp, #40]	; 0x28
   297f4:	mov	r3, sp
   297f8:	mov	r1, lr
   297fc:	mov	r2, ip
   29800:	bl	292ec <__assert_fail@plt+0x166fc>
   29804:	sub	sp, fp, #24
   29808:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   2980c:	push	{fp, lr}
   29810:	mov	fp, sp
   29814:	sub	sp, sp, #8
   29818:	mov	r3, r2
   2981c:	mov	r2, r1
   29820:	mov	r1, r0
   29824:	mvn	r0, #0
   29828:	str	r0, [sp]
   2982c:	mov	r0, #0
   29830:	bl	297a4 <__assert_fail@plt+0x16bb4>
   29834:	mov	sp, fp
   29838:	pop	{fp, pc}
   2983c:	push	{fp, lr}
   29840:	mov	fp, sp
   29844:	sub	sp, sp, #8
   29848:	mov	ip, r2
   2984c:	mov	r2, r1
   29850:	mov	r1, r0
   29854:	str	r3, [sp]
   29858:	mov	r0, #0
   2985c:	mov	r3, ip
   29860:	bl	297a4 <__assert_fail@plt+0x16bb4>
   29864:	mov	sp, fp
   29868:	pop	{fp, pc}
   2986c:	movw	r3, #17696	; 0x4520
   29870:	movt	r3, #5
   29874:	b	292ec <__assert_fail@plt+0x166fc>
   29878:	movw	r3, #17696	; 0x4520
   2987c:	mov	r2, r1
   29880:	mov	r1, r0
   29884:	mov	r0, #0
   29888:	movt	r3, #5
   2988c:	b	292ec <__assert_fail@plt+0x166fc>
   29890:	movw	r3, #17696	; 0x4520
   29894:	mvn	r2, #0
   29898:	movt	r3, #5
   2989c:	b	292ec <__assert_fail@plt+0x166fc>
   298a0:	movw	r3, #17696	; 0x4520
   298a4:	mov	r1, r0
   298a8:	mov	r0, #0
   298ac:	mvn	r2, #0
   298b0:	movt	r3, #5
   298b4:	b	292ec <__assert_fail@plt+0x166fc>
   298b8:	push	{r4, r5, fp, lr}
   298bc:	add	fp, sp, #8
   298c0:	mov	r5, r0
   298c4:	mov	r4, r1
   298c8:	mov	r0, #0
   298cc:	mov	r2, #5
   298d0:	mov	r1, r5
   298d4:	bl	12674 <dcgettext@plt>
   298d8:	cmp	r0, r5
   298dc:	popne	{r4, r5, fp, pc}
   298e0:	bl	3c810 <__assert_fail@plt+0x29c20>
   298e4:	ldrb	r1, [r0]
   298e8:	and	r1, r1, #223	; 0xdf
   298ec:	cmp	r1, #71	; 0x47
   298f0:	beq	29958 <__assert_fail@plt+0x16d68>
   298f4:	cmp	r1, #85	; 0x55
   298f8:	bne	299b0 <__assert_fail@plt+0x16dc0>
   298fc:	ldrb	r1, [r0, #1]
   29900:	and	r1, r1, #223	; 0xdf
   29904:	cmp	r1, #84	; 0x54
   29908:	bne	299b0 <__assert_fail@plt+0x16dc0>
   2990c:	ldrb	r1, [r0, #2]
   29910:	and	r1, r1, #223	; 0xdf
   29914:	cmp	r1, #70	; 0x46
   29918:	bne	299b0 <__assert_fail@plt+0x16dc0>
   2991c:	ldrb	r1, [r0, #3]
   29920:	cmp	r1, #45	; 0x2d
   29924:	bne	299b0 <__assert_fail@plt+0x16dc0>
   29928:	ldrb	r1, [r0, #4]
   2992c:	cmp	r1, #56	; 0x38
   29930:	bne	299b0 <__assert_fail@plt+0x16dc0>
   29934:	ldrb	r0, [r0, #5]
   29938:	cmp	r0, #0
   2993c:	bne	299b0 <__assert_fail@plt+0x16dc0>
   29940:	ldrb	r1, [r5]
   29944:	movw	r2, #11326	; 0x2c3e
   29948:	movw	r0, #11330	; 0x2c42
   2994c:	movt	r2, #4
   29950:	movt	r0, #4
   29954:	b	299e0 <__assert_fail@plt+0x16df0>
   29958:	ldrb	r1, [r0, #1]
   2995c:	and	r1, r1, #223	; 0xdf
   29960:	cmp	r1, #66	; 0x42
   29964:	bne	299b0 <__assert_fail@plt+0x16dc0>
   29968:	ldrb	r1, [r0, #2]
   2996c:	cmp	r1, #49	; 0x31
   29970:	bne	299b0 <__assert_fail@plt+0x16dc0>
   29974:	ldrb	r1, [r0, #3]
   29978:	cmp	r1, #56	; 0x38
   2997c:	bne	299b0 <__assert_fail@plt+0x16dc0>
   29980:	ldrb	r1, [r0, #4]
   29984:	cmp	r1, #48	; 0x30
   29988:	bne	299b0 <__assert_fail@plt+0x16dc0>
   2998c:	ldrb	r1, [r0, #5]
   29990:	cmp	r1, #51	; 0x33
   29994:	bne	299b0 <__assert_fail@plt+0x16dc0>
   29998:	ldrb	r1, [r0, #6]
   2999c:	cmp	r1, #48	; 0x30
   299a0:	bne	299b0 <__assert_fail@plt+0x16dc0>
   299a4:	ldrb	r0, [r0, #7]
   299a8:	cmp	r0, #0
   299ac:	beq	299cc <__assert_fail@plt+0x16ddc>
   299b0:	movw	r1, #11178	; 0x2baa
   299b4:	movw	r0, #63704	; 0xf8d8
   299b8:	cmp	r4, #9
   299bc:	movt	r1, #4
   299c0:	movt	r0, #3
   299c4:	moveq	r0, r1
   299c8:	pop	{r4, r5, fp, pc}
   299cc:	ldrb	r1, [r5]
   299d0:	movw	r2, #11334	; 0x2c46
   299d4:	movw	r0, #11338	; 0x2c4a
   299d8:	movt	r2, #4
   299dc:	movt	r0, #4
   299e0:	cmp	r1, #96	; 0x60
   299e4:	moveq	r0, r2
   299e8:	pop	{r4, r5, fp, pc}
   299ec:	push	{r4, r5, fp, lr}
   299f0:	add	fp, sp, #8
   299f4:	mov	r4, #0
   299f8:	mov	r5, r0
   299fc:	mov	r1, #524288	; 0x80000
   29a00:	str	r4, [r0, #4]
   29a04:	movw	r0, #58388	; 0xe414
   29a08:	movt	r0, #3
   29a0c:	bl	214e8 <__assert_fail@plt+0xe8f8>
   29a10:	cmn	r0, #1
   29a14:	str	r0, [r5]
   29a18:	bgt	29a38 <__assert_fail@plt+0x16e48>
   29a1c:	mov	r0, #0
   29a20:	mov	r1, #0
   29a24:	mov	r4, #0
   29a28:	bl	12878 <getcwd@plt>
   29a2c:	cmp	r0, #0
   29a30:	str	r0, [r5, #4]
   29a34:	mvneq	r4, #0
   29a38:	mov	r0, r4
   29a3c:	pop	{r4, r5, fp, pc}
   29a40:	ldr	r1, [r0]
   29a44:	cmp	r1, #0
   29a48:	bmi	29a54 <__assert_fail@plt+0x16e64>
   29a4c:	mov	r0, r1
   29a50:	b	12adc <fchdir@plt>
   29a54:	ldr	r0, [r0, #4]
   29a58:	b	2b788 <__assert_fail@plt+0x18b98>
   29a5c:	push	{r4, sl, fp, lr}
   29a60:	add	fp, sp, #8
   29a64:	mov	r4, r0
   29a68:	ldr	r0, [r0]
   29a6c:	cmp	r0, #0
   29a70:	bmi	29a78 <__assert_fail@plt+0x16e88>
   29a74:	bl	12ba8 <close@plt>
   29a78:	ldr	r0, [r4, #4]
   29a7c:	pop	{r4, sl, fp, lr}
   29a80:	b	2bcbc <__assert_fail@plt+0x190cc>
   29a84:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   29a88:	add	fp, sp, #28
   29a8c:	sub	sp, sp, #964	; 0x3c4
   29a90:	sub	sp, sp, #3072	; 0xc00
   29a94:	mov	r4, r2
   29a98:	mov	r5, r1
   29a9c:	cmn	r0, #100	; 0x64
   29aa0:	beq	29ab4 <__assert_fail@plt+0x16ec4>
   29aa4:	mov	r7, r0
   29aa8:	ldrb	r0, [r5]
   29aac:	cmp	r0, #47	; 0x2f
   29ab0:	bne	29ac8 <__assert_fail@plt+0x16ed8>
   29ab4:	mov	r0, r5
   29ab8:	mov	r1, r4
   29abc:	sub	sp, fp, #28
   29ac0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   29ac4:	b	2ddc8 <__assert_fail@plt+0x1b1d8>
   29ac8:	mov	sl, sp
   29acc:	mov	r1, r7
   29ad0:	mov	r2, r5
   29ad4:	mov	r0, sl
   29ad8:	bl	3c2f4 <__assert_fail@plt+0x29704>
   29adc:	cmp	r0, #0
   29ae0:	beq	29b5c <__assert_fail@plt+0x16f6c>
   29ae4:	mov	r1, r4
   29ae8:	mov	r6, r0
   29aec:	bl	2ddc8 <__assert_fail@plt+0x1b1d8>
   29af0:	mov	r9, r0
   29af4:	bl	12908 <__errno_location@plt>
   29af8:	ldr	r3, [r0]
   29afc:	mov	r8, r0
   29b00:	cmp	r6, sl
   29b04:	beq	29b18 <__assert_fail@plt+0x16f28>
   29b08:	mov	r0, r6
   29b0c:	mov	r6, r3
   29b10:	bl	2bcbc <__assert_fail@plt+0x190cc>
   29b14:	mov	r3, r6
   29b18:	cmn	r9, #1
   29b1c:	bne	29c18 <__assert_fail@plt+0x17028>
   29b20:	sub	r0, r3, #13
   29b24:	cmp	r0, #25
   29b28:	bls	29b48 <__assert_fail@plt+0x16f58>
   29b2c:	sub	r0, r3, #1
   29b30:	cmp	r0, #2
   29b34:	bcc	29b5c <__assert_fail@plt+0x16f6c>
   29b38:	cmp	r3, #95	; 0x5f
   29b3c:	beq	29b5c <__assert_fail@plt+0x16f6c>
   29b40:	str	r3, [r8]
   29b44:	b	29c18 <__assert_fail@plt+0x17028>
   29b48:	movw	r2, #129	; 0x81
   29b4c:	mov	r1, #1
   29b50:	movt	r2, #512	; 0x200
   29b54:	tst	r2, r1, lsl r0
   29b58:	beq	29b2c <__assert_fail@plt+0x16f3c>
   29b5c:	mov	r0, sp
   29b60:	bl	299ec <__assert_fail@plt+0x16dfc>
   29b64:	cmp	r0, #0
   29b68:	bne	29c24 <__assert_fail@plt+0x17034>
   29b6c:	cmp	r7, #0
   29b70:	bmi	29b9c <__assert_fail@plt+0x16fac>
   29b74:	ldr	r0, [sp]
   29b78:	cmp	r0, r7
   29b7c:	bne	29b9c <__assert_fail@plt+0x16fac>
   29b80:	mov	r0, sp
   29b84:	bl	29a5c <__assert_fail@plt+0x16e6c>
   29b88:	bl	12908 <__errno_location@plt>
   29b8c:	mov	r1, #9
   29b90:	mvn	r9, #0
   29b94:	str	r1, [r0]
   29b98:	b	29c18 <__assert_fail@plt+0x17028>
   29b9c:	mov	r0, r7
   29ba0:	bl	12adc <fchdir@plt>
   29ba4:	cmp	r0, #0
   29ba8:	beq	29bcc <__assert_fail@plt+0x16fdc>
   29bac:	bl	12908 <__errno_location@plt>
   29bb0:	ldr	r5, [r0]
   29bb4:	mov	r4, r0
   29bb8:	mov	r0, sp
   29bbc:	bl	29a5c <__assert_fail@plt+0x16e6c>
   29bc0:	str	r5, [r4]
   29bc4:	mvn	r9, #0
   29bc8:	b	29c18 <__assert_fail@plt+0x17028>
   29bcc:	mov	r0, r5
   29bd0:	mov	r1, r4
   29bd4:	bl	2ddc8 <__assert_fail@plt+0x1b1d8>
   29bd8:	mov	r9, r0
   29bdc:	mov	r4, #0
   29be0:	cmn	r0, #1
   29be4:	bne	29bf0 <__assert_fail@plt+0x17000>
   29be8:	bl	12908 <__errno_location@plt>
   29bec:	ldr	r4, [r0]
   29bf0:	mov	r0, sp
   29bf4:	bl	29a40 <__assert_fail@plt+0x16e50>
   29bf8:	cmp	r0, #0
   29bfc:	bne	29c30 <__assert_fail@plt+0x17040>
   29c00:	mov	r0, sp
   29c04:	bl	29a5c <__assert_fail@plt+0x16e6c>
   29c08:	cmp	r4, #0
   29c0c:	beq	29c18 <__assert_fail@plt+0x17028>
   29c10:	bl	12908 <__errno_location@plt>
   29c14:	str	r4, [r0]
   29c18:	mov	r0, r9
   29c1c:	sub	sp, fp, #28
   29c20:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   29c24:	bl	12908 <__errno_location@plt>
   29c28:	ldr	r0, [r0]
   29c2c:	bl	24974 <__assert_fail@plt+0x11d84>
   29c30:	bl	12908 <__errno_location@plt>
   29c34:	ldr	r0, [r0]
   29c38:	bl	249b4 <__assert_fail@plt+0x11dc4>
   29c3c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   29c40:	add	fp, sp, #28
   29c44:	sub	sp, sp, #964	; 0x3c4
   29c48:	sub	sp, sp, #3072	; 0xc00
   29c4c:	mov	r4, r2
   29c50:	mov	r5, r1
   29c54:	cmn	r0, #100	; 0x64
   29c58:	beq	29c6c <__assert_fail@plt+0x1707c>
   29c5c:	mov	r7, r0
   29c60:	ldrb	r0, [r5]
   29c64:	cmp	r0, #47	; 0x2f
   29c68:	bne	29c80 <__assert_fail@plt+0x17090>
   29c6c:	mov	r0, r5
   29c70:	mov	r1, r4
   29c74:	sub	sp, fp, #28
   29c78:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   29c7c:	b	2de54 <__assert_fail@plt+0x1b264>
   29c80:	mov	sl, sp
   29c84:	mov	r1, r7
   29c88:	mov	r2, r5
   29c8c:	mov	r0, sl
   29c90:	bl	3c2f4 <__assert_fail@plt+0x29704>
   29c94:	cmp	r0, #0
   29c98:	beq	29d14 <__assert_fail@plt+0x17124>
   29c9c:	mov	r1, r4
   29ca0:	mov	r6, r0
   29ca4:	bl	2de54 <__assert_fail@plt+0x1b264>
   29ca8:	mov	r9, r0
   29cac:	bl	12908 <__errno_location@plt>
   29cb0:	ldr	r3, [r0]
   29cb4:	mov	r8, r0
   29cb8:	cmp	r6, sl
   29cbc:	beq	29cd0 <__assert_fail@plt+0x170e0>
   29cc0:	mov	r0, r6
   29cc4:	mov	r6, r3
   29cc8:	bl	2bcbc <__assert_fail@plt+0x190cc>
   29ccc:	mov	r3, r6
   29cd0:	cmn	r9, #1
   29cd4:	bne	29dd0 <__assert_fail@plt+0x171e0>
   29cd8:	sub	r0, r3, #13
   29cdc:	cmp	r0, #25
   29ce0:	bls	29d00 <__assert_fail@plt+0x17110>
   29ce4:	sub	r0, r3, #1
   29ce8:	cmp	r0, #2
   29cec:	bcc	29d14 <__assert_fail@plt+0x17124>
   29cf0:	cmp	r3, #95	; 0x5f
   29cf4:	beq	29d14 <__assert_fail@plt+0x17124>
   29cf8:	str	r3, [r8]
   29cfc:	b	29dd0 <__assert_fail@plt+0x171e0>
   29d00:	movw	r2, #129	; 0x81
   29d04:	mov	r1, #1
   29d08:	movt	r2, #512	; 0x200
   29d0c:	tst	r2, r1, lsl r0
   29d10:	beq	29ce4 <__assert_fail@plt+0x170f4>
   29d14:	mov	r0, sp
   29d18:	bl	299ec <__assert_fail@plt+0x16dfc>
   29d1c:	cmp	r0, #0
   29d20:	bne	29ddc <__assert_fail@plt+0x171ec>
   29d24:	cmp	r7, #0
   29d28:	bmi	29d54 <__assert_fail@plt+0x17164>
   29d2c:	ldr	r0, [sp]
   29d30:	cmp	r0, r7
   29d34:	bne	29d54 <__assert_fail@plt+0x17164>
   29d38:	mov	r0, sp
   29d3c:	bl	29a5c <__assert_fail@plt+0x16e6c>
   29d40:	bl	12908 <__errno_location@plt>
   29d44:	mov	r1, #9
   29d48:	mvn	r9, #0
   29d4c:	str	r1, [r0]
   29d50:	b	29dd0 <__assert_fail@plt+0x171e0>
   29d54:	mov	r0, r7
   29d58:	bl	12adc <fchdir@plt>
   29d5c:	cmp	r0, #0
   29d60:	beq	29d84 <__assert_fail@plt+0x17194>
   29d64:	bl	12908 <__errno_location@plt>
   29d68:	ldr	r5, [r0]
   29d6c:	mov	r4, r0
   29d70:	mov	r0, sp
   29d74:	bl	29a5c <__assert_fail@plt+0x16e6c>
   29d78:	str	r5, [r4]
   29d7c:	mvn	r9, #0
   29d80:	b	29dd0 <__assert_fail@plt+0x171e0>
   29d84:	mov	r0, r5
   29d88:	mov	r1, r4
   29d8c:	bl	2de54 <__assert_fail@plt+0x1b264>
   29d90:	mov	r9, r0
   29d94:	mov	r4, #0
   29d98:	cmn	r0, #1
   29d9c:	bne	29da8 <__assert_fail@plt+0x171b8>
   29da0:	bl	12908 <__errno_location@plt>
   29da4:	ldr	r4, [r0]
   29da8:	mov	r0, sp
   29dac:	bl	29a40 <__assert_fail@plt+0x16e50>
   29db0:	cmp	r0, #0
   29db4:	bne	29de8 <__assert_fail@plt+0x171f8>
   29db8:	mov	r0, sp
   29dbc:	bl	29a5c <__assert_fail@plt+0x16e6c>
   29dc0:	cmp	r4, #0
   29dc4:	beq	29dd0 <__assert_fail@plt+0x171e0>
   29dc8:	bl	12908 <__errno_location@plt>
   29dcc:	str	r4, [r0]
   29dd0:	mov	r0, r9
   29dd4:	sub	sp, fp, #28
   29dd8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   29ddc:	bl	12908 <__errno_location@plt>
   29de0:	ldr	r0, [r0]
   29de4:	bl	24974 <__assert_fail@plt+0x11d84>
   29de8:	bl	12908 <__errno_location@plt>
   29dec:	ldr	r0, [r0]
   29df0:	bl	249b4 <__assert_fail@plt+0x11dc4>
   29df4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   29df8:	add	fp, sp, #28
   29dfc:	sub	sp, sp, #964	; 0x3c4
   29e00:	sub	sp, sp, #3072	; 0xc00
   29e04:	mov	r4, r2
   29e08:	mov	r5, r1
   29e0c:	cmn	r0, #100	; 0x64
   29e10:	beq	29e24 <__assert_fail@plt+0x17234>
   29e14:	mov	r7, r0
   29e18:	ldrb	r0, [r5]
   29e1c:	cmp	r0, #47	; 0x2f
   29e20:	bne	29e38 <__assert_fail@plt+0x17248>
   29e24:	mov	r0, r5
   29e28:	mov	r1, r4
   29e2c:	sub	sp, fp, #28
   29e30:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   29e34:	b	129bc <setfilecon@plt>
   29e38:	mov	sl, sp
   29e3c:	mov	r1, r7
   29e40:	mov	r2, r5
   29e44:	mov	r0, sl
   29e48:	bl	3c2f4 <__assert_fail@plt+0x29704>
   29e4c:	cmp	r0, #0
   29e50:	beq	29ecc <__assert_fail@plt+0x172dc>
   29e54:	mov	r1, r4
   29e58:	mov	r6, r0
   29e5c:	bl	129bc <setfilecon@plt>
   29e60:	mov	r9, r0
   29e64:	bl	12908 <__errno_location@plt>
   29e68:	ldr	r3, [r0]
   29e6c:	mov	r8, r0
   29e70:	cmp	r6, sl
   29e74:	beq	29e88 <__assert_fail@plt+0x17298>
   29e78:	mov	r0, r6
   29e7c:	mov	r6, r3
   29e80:	bl	2bcbc <__assert_fail@plt+0x190cc>
   29e84:	mov	r3, r6
   29e88:	cmn	r9, #1
   29e8c:	bne	29f88 <__assert_fail@plt+0x17398>
   29e90:	sub	r0, r3, #13
   29e94:	cmp	r0, #25
   29e98:	bls	29eb8 <__assert_fail@plt+0x172c8>
   29e9c:	sub	r0, r3, #1
   29ea0:	cmp	r0, #2
   29ea4:	bcc	29ecc <__assert_fail@plt+0x172dc>
   29ea8:	cmp	r3, #95	; 0x5f
   29eac:	beq	29ecc <__assert_fail@plt+0x172dc>
   29eb0:	str	r3, [r8]
   29eb4:	b	29f88 <__assert_fail@plt+0x17398>
   29eb8:	movw	r2, #129	; 0x81
   29ebc:	mov	r1, #1
   29ec0:	movt	r2, #512	; 0x200
   29ec4:	tst	r2, r1, lsl r0
   29ec8:	beq	29e9c <__assert_fail@plt+0x172ac>
   29ecc:	mov	r0, sp
   29ed0:	bl	299ec <__assert_fail@plt+0x16dfc>
   29ed4:	cmp	r0, #0
   29ed8:	bne	29f94 <__assert_fail@plt+0x173a4>
   29edc:	cmp	r7, #0
   29ee0:	bmi	29f0c <__assert_fail@plt+0x1731c>
   29ee4:	ldr	r0, [sp]
   29ee8:	cmp	r0, r7
   29eec:	bne	29f0c <__assert_fail@plt+0x1731c>
   29ef0:	mov	r0, sp
   29ef4:	bl	29a5c <__assert_fail@plt+0x16e6c>
   29ef8:	bl	12908 <__errno_location@plt>
   29efc:	mov	r1, #9
   29f00:	mvn	r9, #0
   29f04:	str	r1, [r0]
   29f08:	b	29f88 <__assert_fail@plt+0x17398>
   29f0c:	mov	r0, r7
   29f10:	bl	12adc <fchdir@plt>
   29f14:	cmp	r0, #0
   29f18:	beq	29f3c <__assert_fail@plt+0x1734c>
   29f1c:	bl	12908 <__errno_location@plt>
   29f20:	ldr	r5, [r0]
   29f24:	mov	r4, r0
   29f28:	mov	r0, sp
   29f2c:	bl	29a5c <__assert_fail@plt+0x16e6c>
   29f30:	str	r5, [r4]
   29f34:	mvn	r9, #0
   29f38:	b	29f88 <__assert_fail@plt+0x17398>
   29f3c:	mov	r0, r5
   29f40:	mov	r1, r4
   29f44:	bl	129bc <setfilecon@plt>
   29f48:	mov	r9, r0
   29f4c:	mov	r4, #0
   29f50:	cmn	r0, #1
   29f54:	bne	29f60 <__assert_fail@plt+0x17370>
   29f58:	bl	12908 <__errno_location@plt>
   29f5c:	ldr	r4, [r0]
   29f60:	mov	r0, sp
   29f64:	bl	29a40 <__assert_fail@plt+0x16e50>
   29f68:	cmp	r0, #0
   29f6c:	bne	29fa0 <__assert_fail@plt+0x173b0>
   29f70:	mov	r0, sp
   29f74:	bl	29a5c <__assert_fail@plt+0x16e6c>
   29f78:	cmp	r4, #0
   29f7c:	beq	29f88 <__assert_fail@plt+0x17398>
   29f80:	bl	12908 <__errno_location@plt>
   29f84:	str	r4, [r0]
   29f88:	mov	r0, r9
   29f8c:	sub	sp, fp, #28
   29f90:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   29f94:	bl	12908 <__errno_location@plt>
   29f98:	ldr	r0, [r0]
   29f9c:	bl	24974 <__assert_fail@plt+0x11d84>
   29fa0:	bl	12908 <__errno_location@plt>
   29fa4:	ldr	r0, [r0]
   29fa8:	bl	249b4 <__assert_fail@plt+0x11dc4>
   29fac:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   29fb0:	add	fp, sp, #28
   29fb4:	sub	sp, sp, #964	; 0x3c4
   29fb8:	sub	sp, sp, #3072	; 0xc00
   29fbc:	mov	r4, r2
   29fc0:	mov	r5, r1
   29fc4:	cmn	r0, #100	; 0x64
   29fc8:	beq	29fdc <__assert_fail@plt+0x173ec>
   29fcc:	mov	r7, r0
   29fd0:	ldrb	r0, [r5]
   29fd4:	cmp	r0, #47	; 0x2f
   29fd8:	bne	29ff0 <__assert_fail@plt+0x17400>
   29fdc:	mov	r0, r5
   29fe0:	mov	r1, r4
   29fe4:	sub	sp, fp, #28
   29fe8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   29fec:	b	12578 <lsetfilecon@plt>
   29ff0:	mov	sl, sp
   29ff4:	mov	r1, r7
   29ff8:	mov	r2, r5
   29ffc:	mov	r0, sl
   2a000:	bl	3c2f4 <__assert_fail@plt+0x29704>
   2a004:	cmp	r0, #0
   2a008:	beq	2a084 <__assert_fail@plt+0x17494>
   2a00c:	mov	r1, r4
   2a010:	mov	r6, r0
   2a014:	bl	12578 <lsetfilecon@plt>
   2a018:	mov	r9, r0
   2a01c:	bl	12908 <__errno_location@plt>
   2a020:	ldr	r3, [r0]
   2a024:	mov	r8, r0
   2a028:	cmp	r6, sl
   2a02c:	beq	2a040 <__assert_fail@plt+0x17450>
   2a030:	mov	r0, r6
   2a034:	mov	r6, r3
   2a038:	bl	2bcbc <__assert_fail@plt+0x190cc>
   2a03c:	mov	r3, r6
   2a040:	cmn	r9, #1
   2a044:	bne	2a140 <__assert_fail@plt+0x17550>
   2a048:	sub	r0, r3, #13
   2a04c:	cmp	r0, #25
   2a050:	bls	2a070 <__assert_fail@plt+0x17480>
   2a054:	sub	r0, r3, #1
   2a058:	cmp	r0, #2
   2a05c:	bcc	2a084 <__assert_fail@plt+0x17494>
   2a060:	cmp	r3, #95	; 0x5f
   2a064:	beq	2a084 <__assert_fail@plt+0x17494>
   2a068:	str	r3, [r8]
   2a06c:	b	2a140 <__assert_fail@plt+0x17550>
   2a070:	movw	r2, #129	; 0x81
   2a074:	mov	r1, #1
   2a078:	movt	r2, #512	; 0x200
   2a07c:	tst	r2, r1, lsl r0
   2a080:	beq	2a054 <__assert_fail@plt+0x17464>
   2a084:	mov	r0, sp
   2a088:	bl	299ec <__assert_fail@plt+0x16dfc>
   2a08c:	cmp	r0, #0
   2a090:	bne	2a14c <__assert_fail@plt+0x1755c>
   2a094:	cmp	r7, #0
   2a098:	bmi	2a0c4 <__assert_fail@plt+0x174d4>
   2a09c:	ldr	r0, [sp]
   2a0a0:	cmp	r0, r7
   2a0a4:	bne	2a0c4 <__assert_fail@plt+0x174d4>
   2a0a8:	mov	r0, sp
   2a0ac:	bl	29a5c <__assert_fail@plt+0x16e6c>
   2a0b0:	bl	12908 <__errno_location@plt>
   2a0b4:	mov	r1, #9
   2a0b8:	mvn	r9, #0
   2a0bc:	str	r1, [r0]
   2a0c0:	b	2a140 <__assert_fail@plt+0x17550>
   2a0c4:	mov	r0, r7
   2a0c8:	bl	12adc <fchdir@plt>
   2a0cc:	cmp	r0, #0
   2a0d0:	beq	2a0f4 <__assert_fail@plt+0x17504>
   2a0d4:	bl	12908 <__errno_location@plt>
   2a0d8:	ldr	r5, [r0]
   2a0dc:	mov	r4, r0
   2a0e0:	mov	r0, sp
   2a0e4:	bl	29a5c <__assert_fail@plt+0x16e6c>
   2a0e8:	str	r5, [r4]
   2a0ec:	mvn	r9, #0
   2a0f0:	b	2a140 <__assert_fail@plt+0x17550>
   2a0f4:	mov	r0, r5
   2a0f8:	mov	r1, r4
   2a0fc:	bl	12578 <lsetfilecon@plt>
   2a100:	mov	r9, r0
   2a104:	mov	r4, #0
   2a108:	cmn	r0, #1
   2a10c:	bne	2a118 <__assert_fail@plt+0x17528>
   2a110:	bl	12908 <__errno_location@plt>
   2a114:	ldr	r4, [r0]
   2a118:	mov	r0, sp
   2a11c:	bl	29a40 <__assert_fail@plt+0x16e50>
   2a120:	cmp	r0, #0
   2a124:	bne	2a158 <__assert_fail@plt+0x17568>
   2a128:	mov	r0, sp
   2a12c:	bl	29a5c <__assert_fail@plt+0x16e6c>
   2a130:	cmp	r4, #0
   2a134:	beq	2a140 <__assert_fail@plt+0x17550>
   2a138:	bl	12908 <__errno_location@plt>
   2a13c:	str	r4, [r0]
   2a140:	mov	r0, r9
   2a144:	sub	sp, fp, #28
   2a148:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2a14c:	bl	12908 <__errno_location@plt>
   2a150:	ldr	r0, [r0]
   2a154:	bl	24974 <__assert_fail@plt+0x11d84>
   2a158:	bl	12908 <__errno_location@plt>
   2a15c:	ldr	r0, [r0]
   2a160:	bl	249b4 <__assert_fail@plt+0x11dc4>
   2a164:	push	{r4, r5, fp, lr}
   2a168:	add	fp, sp, #8
   2a16c:	mov	r4, r1
   2a170:	mov	r1, #0
   2a174:	mov	r5, r0
   2a178:	mov	r2, r4
   2a17c:	bl	129b0 <memchr@plt>
   2a180:	sub	r1, r0, r5
   2a184:	cmp	r0, #0
   2a188:	addne	r4, r1, #1
   2a18c:	mov	r0, r4
   2a190:	pop	{r4, r5, fp, pc}
   2a194:	mov	r1, #0
   2a198:	mov	r2, #3
   2a19c:	b	2ba88 <__assert_fail@plt+0x18e98>
   2a1a0:	push	{r4, r5, r6, r7, fp, lr}
   2a1a4:	add	fp, sp, #16
   2a1a8:	mov	r4, r0
   2a1ac:	cmp	r0, #2
   2a1b0:	bhi	2a1e0 <__assert_fail@plt+0x175f0>
   2a1b4:	mov	r0, r4
   2a1b8:	bl	2a194 <__assert_fail@plt+0x175a4>
   2a1bc:	mov	r5, r0
   2a1c0:	bl	12908 <__errno_location@plt>
   2a1c4:	ldr	r7, [r0]
   2a1c8:	mov	r6, r0
   2a1cc:	mov	r0, r4
   2a1d0:	bl	12ba8 <close@plt>
   2a1d4:	mov	r0, r5
   2a1d8:	str	r7, [r6]
   2a1dc:	pop	{r4, r5, r6, r7, fp, pc}
   2a1e0:	mov	r0, r4
   2a1e4:	pop	{r4, r5, r6, r7, fp, pc}
   2a1e8:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   2a1ec:	add	fp, sp, #24
   2a1f0:	sub	sp, sp, #32
   2a1f4:	ldr	r7, [fp, #12]
   2a1f8:	ldr	r6, [fp, #8]
   2a1fc:	mov	r4, r2
   2a200:	mov	r5, r0
   2a204:	cmp	r1, #0
   2a208:	beq	2a228 <__assert_fail@plt+0x17638>
   2a20c:	mov	r2, r1
   2a210:	movw	r1, #11428	; 0x2ca4
   2a214:	str	r3, [sp]
   2a218:	mov	r0, r5
   2a21c:	mov	r3, r4
   2a220:	movt	r1, #4
   2a224:	b	2a238 <__assert_fail@plt+0x17648>
   2a228:	movw	r1, #11440	; 0x2cb0
   2a22c:	mov	r0, r5
   2a230:	mov	r2, r4
   2a234:	movt	r1, #4
   2a238:	bl	128fc <fprintf@plt>
   2a23c:	movw	r1, #11447	; 0x2cb7
   2a240:	mov	r0, #0
   2a244:	mov	r2, #5
   2a248:	movt	r1, #4
   2a24c:	bl	12674 <dcgettext@plt>
   2a250:	movw	r1, #12143	; 0x2f6f
   2a254:	mov	r2, r0
   2a258:	mov	r0, r5
   2a25c:	movw	r3, #2022	; 0x7e6
   2a260:	movt	r1, #4
   2a264:	bl	128fc <fprintf@plt>
   2a268:	movw	r4, #61758	; 0xf13e
   2a26c:	mov	r1, r5
   2a270:	movt	r4, #3
   2a274:	mov	r0, r4
   2a278:	bl	12b84 <fputs@plt>
   2a27c:	movw	r1, #11451	; 0x2cbb
   2a280:	mov	r0, #0
   2a284:	mov	r2, #5
   2a288:	movt	r1, #4
   2a28c:	bl	12674 <dcgettext@plt>
   2a290:	movw	r2, #11622	; 0x2d66
   2a294:	mov	r1, r0
   2a298:	mov	r0, r5
   2a29c:	movt	r2, #4
   2a2a0:	bl	128fc <fprintf@plt>
   2a2a4:	mov	r0, r4
   2a2a8:	mov	r1, r5
   2a2ac:	bl	12b84 <fputs@plt>
   2a2b0:	cmp	r7, #9
   2a2b4:	bhi	2a314 <__assert_fail@plt+0x17724>
   2a2b8:	add	r0, pc, #0
   2a2bc:	ldr	pc, [r0, r7, lsl #2]
   2a2c0:	andeq	sl, r2, r4, lsl #10
   2a2c4:	andeq	sl, r2, r8, ror #5
   2a2c8:	andeq	sl, r2, r0, lsr #6
   2a2cc:	andeq	sl, r2, ip, asr #6
   2a2d0:	andeq	sl, r2, r4, ror r3
   2a2d4:	andeq	sl, r2, r0, lsr #7
   2a2d8:	ldrdeq	sl, [r2], -r4
   2a2dc:	andeq	sl, r2, r4, lsl r4
   2a2e0:			; <UNDEFINED> instruction: 0x0002a4b0
   2a2e4:	andeq	sl, r2, r8, asr r4
   2a2e8:	movw	r1, #11656	; 0x2d88
   2a2ec:	mov	r0, #0
   2a2f0:	mov	r2, #5
   2a2f4:	movt	r1, #4
   2a2f8:	bl	12674 <dcgettext@plt>
   2a2fc:	ldr	r2, [r6]
   2a300:	mov	r1, r0
   2a304:	mov	r0, r5
   2a308:	sub	sp, fp, #24
   2a30c:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   2a310:	b	128fc <fprintf@plt>
   2a314:	movw	r1, #11975	; 0x2ec7
   2a318:	movt	r1, #4
   2a31c:	b	2a460 <__assert_fail@plt+0x17870>
   2a320:	movw	r1, #11672	; 0x2d98
   2a324:	mov	r0, #0
   2a328:	mov	r2, #5
   2a32c:	movt	r1, #4
   2a330:	bl	12674 <dcgettext@plt>
   2a334:	ldm	r6, {r2, r3}
   2a338:	mov	r1, r0
   2a33c:	mov	r0, r5
   2a340:	sub	sp, fp, #24
   2a344:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   2a348:	b	128fc <fprintf@plt>
   2a34c:	movw	r1, #11695	; 0x2daf
   2a350:	mov	r0, #0
   2a354:	mov	r2, #5
   2a358:	movt	r1, #4
   2a35c:	bl	12674 <dcgettext@plt>
   2a360:	mov	r1, r0
   2a364:	ldr	r0, [r6, #8]
   2a368:	ldm	r6, {r2, r3}
   2a36c:	str	r0, [sp]
   2a370:	b	2a40c <__assert_fail@plt+0x1781c>
   2a374:	movw	r1, #11723	; 0x2dcb
   2a378:	mov	r0, #0
   2a37c:	mov	r2, #5
   2a380:	movt	r1, #4
   2a384:	bl	12674 <dcgettext@plt>
   2a388:	mov	r1, r0
   2a38c:	ldr	r0, [r6, #8]
   2a390:	ldm	r6, {r2, r3}
   2a394:	ldr	r7, [r6, #12]
   2a398:	stm	sp, {r0, r7}
   2a39c:	b	2a40c <__assert_fail@plt+0x1781c>
   2a3a0:	movw	r1, #11755	; 0x2deb
   2a3a4:	mov	r0, #0
   2a3a8:	mov	r2, #5
   2a3ac:	movt	r1, #4
   2a3b0:	bl	12674 <dcgettext@plt>
   2a3b4:	mov	r1, r0
   2a3b8:	ldm	r6, {r2, r3}
   2a3bc:	ldr	r0, [r6, #8]
   2a3c0:	ldr	r7, [r6, #12]
   2a3c4:	ldr	r6, [r6, #16]
   2a3c8:	stm	sp, {r0, r7}
   2a3cc:	str	r6, [sp, #8]
   2a3d0:	b	2a40c <__assert_fail@plt+0x1781c>
   2a3d4:	movw	r1, #11791	; 0x2e0f
   2a3d8:	mov	r0, #0
   2a3dc:	mov	r2, #5
   2a3e0:	movt	r1, #4
   2a3e4:	bl	12674 <dcgettext@plt>
   2a3e8:	mov	r1, r0
   2a3ec:	ldm	r6, {r2, r3}
   2a3f0:	ldr	r0, [r6, #8]
   2a3f4:	ldr	r7, [r6, #12]
   2a3f8:	ldr	r4, [r6, #16]
   2a3fc:	ldr	r6, [r6, #20]
   2a400:	stm	sp, {r0, r7}
   2a404:	str	r4, [sp, #8]
   2a408:	str	r6, [sp, #12]
   2a40c:	mov	r0, r5
   2a410:	b	2a500 <__assert_fail@plt+0x17910>
   2a414:	movw	r1, #11831	; 0x2e37
   2a418:	mov	r0, #0
   2a41c:	mov	r2, #5
   2a420:	movt	r1, #4
   2a424:	bl	12674 <dcgettext@plt>
   2a428:	mov	ip, r0
   2a42c:	ldm	r6, {r2, r3}
   2a430:	ldr	r0, [r6, #8]
   2a434:	ldr	r7, [r6, #12]
   2a438:	ldr	r4, [r6, #16]
   2a43c:	ldr	r1, [r6, #20]
   2a440:	ldr	r6, [r6, #24]
   2a444:	stm	sp, {r0, r7}
   2a448:	str	r4, [sp, #8]
   2a44c:	str	r1, [sp, #12]
   2a450:	str	r6, [sp, #16]
   2a454:	b	2a4f8 <__assert_fail@plt+0x17908>
   2a458:	movw	r1, #11923	; 0x2e93
   2a45c:	movt	r1, #4
   2a460:	mov	r0, #0
   2a464:	mov	r2, #5
   2a468:	bl	12674 <dcgettext@plt>
   2a46c:	mov	ip, r0
   2a470:	ldr	r2, [r6]
   2a474:	ldr	r3, [r6, #4]
   2a478:	ldr	r0, [r6, #8]
   2a47c:	ldr	r7, [r6, #12]
   2a480:	ldr	r4, [r6, #16]
   2a484:	ldr	r1, [r6, #20]
   2a488:	ldr	lr, [r6, #24]
   2a48c:	ldr	r8, [r6, #28]
   2a490:	ldr	r6, [r6, #32]
   2a494:	stm	sp, {r0, r7}
   2a498:	str	r4, [sp, #8]
   2a49c:	str	r1, [sp, #12]
   2a4a0:	str	lr, [sp, #16]
   2a4a4:	str	r8, [sp, #20]
   2a4a8:	str	r6, [sp, #24]
   2a4ac:	b	2a4f8 <__assert_fail@plt+0x17908>
   2a4b0:	movw	r1, #11875	; 0x2e63
   2a4b4:	mov	r0, #0
   2a4b8:	mov	r2, #5
   2a4bc:	movt	r1, #4
   2a4c0:	bl	12674 <dcgettext@plt>
   2a4c4:	mov	ip, r0
   2a4c8:	ldm	r6, {r2, r3}
   2a4cc:	ldr	r0, [r6, #8]
   2a4d0:	ldr	r7, [r6, #12]
   2a4d4:	ldr	r4, [r6, #16]
   2a4d8:	ldr	r1, [r6, #20]
   2a4dc:	ldr	lr, [r6, #24]
   2a4e0:	ldr	r6, [r6, #28]
   2a4e4:	stm	sp, {r0, r7}
   2a4e8:	str	r4, [sp, #8]
   2a4ec:	str	r1, [sp, #12]
   2a4f0:	str	lr, [sp, #16]
   2a4f4:	str	r6, [sp, #20]
   2a4f8:	mov	r0, r5
   2a4fc:	mov	r1, ip
   2a500:	bl	128fc <fprintf@plt>
   2a504:	sub	sp, fp, #24
   2a508:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   2a50c:	push	{r4, sl, fp, lr}
   2a510:	add	fp, sp, #8
   2a514:	sub	sp, sp, #8
   2a518:	ldr	ip, [fp, #8]
   2a51c:	mov	lr, #0
   2a520:	ldr	r4, [ip, lr, lsl #2]
   2a524:	add	lr, lr, #1
   2a528:	cmp	r4, #0
   2a52c:	bne	2a520 <__assert_fail@plt+0x17930>
   2a530:	sub	r4, lr, #1
   2a534:	str	ip, [sp]
   2a538:	str	r4, [sp, #4]
   2a53c:	bl	2a1e8 <__assert_fail@plt+0x175f8>
   2a540:	sub	sp, fp, #8
   2a544:	pop	{r4, sl, fp, pc}
   2a548:	push	{r4, r5, fp, lr}
   2a54c:	add	fp, sp, #8
   2a550:	sub	sp, sp, #48	; 0x30
   2a554:	ldr	r4, [fp, #8]
   2a558:	mov	ip, #0
   2a55c:	add	lr, sp, #8
   2a560:	ldr	r5, [r4]
   2a564:	cmp	r5, #0
   2a568:	str	r5, [lr, ip, lsl #2]
   2a56c:	beq	2a584 <__assert_fail@plt+0x17994>
   2a570:	add	ip, ip, #1
   2a574:	add	r4, r4, #4
   2a578:	cmp	ip, #10
   2a57c:	bne	2a560 <__assert_fail@plt+0x17970>
   2a580:	mov	ip, #10
   2a584:	str	lr, [sp]
   2a588:	str	ip, [sp, #4]
   2a58c:	bl	2a1e8 <__assert_fail@plt+0x175f8>
   2a590:	sub	sp, fp, #8
   2a594:	pop	{r4, r5, fp, pc}
   2a598:	push	{fp, lr}
   2a59c:	mov	fp, sp
   2a5a0:	sub	sp, sp, #8
   2a5a4:	add	ip, fp, #8
   2a5a8:	str	ip, [sp, #4]
   2a5ac:	str	ip, [sp]
   2a5b0:	bl	2a548 <__assert_fail@plt+0x17958>
   2a5b4:	mov	sp, fp
   2a5b8:	pop	{fp, pc}
   2a5bc:	push	{fp, lr}
   2a5c0:	mov	fp, sp
   2a5c4:	movw	r0, #17780	; 0x4574
   2a5c8:	movt	r0, #5
   2a5cc:	ldr	r1, [r0]
   2a5d0:	movw	r0, #61758	; 0xf13e
   2a5d4:	movt	r0, #3
   2a5d8:	bl	12b84 <fputs@plt>
   2a5dc:	movw	r1, #12035	; 0x2f03
   2a5e0:	mov	r0, #0
   2a5e4:	mov	r2, #5
   2a5e8:	movt	r1, #4
   2a5ec:	bl	12674 <dcgettext@plt>
   2a5f0:	movw	r1, #7348	; 0x1cb4
   2a5f4:	movt	r1, #4
   2a5f8:	bl	12524 <printf@plt>
   2a5fc:	movw	r1, #12055	; 0x2f17
   2a600:	mov	r0, #0
   2a604:	mov	r2, #5
   2a608:	movt	r1, #4
   2a60c:	bl	12674 <dcgettext@plt>
   2a610:	movw	r1, #6501	; 0x1965
   2a614:	movw	r2, #7262	; 0x1c5e
   2a618:	movt	r1, #4
   2a61c:	movt	r2, #4
   2a620:	bl	12524 <printf@plt>
   2a624:	movw	r1, #12075	; 0x2f2b
   2a628:	mov	r0, #0
   2a62c:	mov	r2, #5
   2a630:	movt	r1, #4
   2a634:	bl	12674 <dcgettext@plt>
   2a638:	movw	r1, #12114	; 0x2f52
   2a63c:	movt	r1, #4
   2a640:	pop	{fp, lr}
   2a644:	b	12524 <printf@plt>
   2a648:	b	2a64c <__assert_fail@plt+0x17a5c>
   2a64c:	push	{r4, r5, r6, sl, fp, lr}
   2a650:	add	fp, sp, #16
   2a654:	mov	r4, r2
   2a658:	mov	r5, r1
   2a65c:	mov	r6, r0
   2a660:	bl	2e9d4 <__assert_fail@plt+0x1bde4>
   2a664:	cmp	r0, #0
   2a668:	popne	{r4, r5, r6, sl, fp, pc}
   2a66c:	cmp	r6, #0
   2a670:	beq	2a684 <__assert_fail@plt+0x17a94>
   2a674:	cmp	r5, #0
   2a678:	cmpne	r4, #0
   2a67c:	bne	2a684 <__assert_fail@plt+0x17a94>
   2a680:	pop	{r4, r5, r6, sl, fp, pc}
   2a684:	bl	2aab4 <__assert_fail@plt+0x17ec4>
   2a688:	push	{fp, lr}
   2a68c:	mov	fp, sp
   2a690:	bl	2de8c <__assert_fail@plt+0x1b29c>
   2a694:	cmp	r0, #0
   2a698:	popne	{fp, pc}
   2a69c:	bl	2aab4 <__assert_fail@plt+0x17ec4>
   2a6a0:	push	{fp, lr}
   2a6a4:	mov	fp, sp
   2a6a8:	bl	2de8c <__assert_fail@plt+0x1b29c>
   2a6ac:	cmp	r0, #0
   2a6b0:	popne	{fp, pc}
   2a6b4:	bl	2aab4 <__assert_fail@plt+0x17ec4>
   2a6b8:	push	{fp, lr}
   2a6bc:	mov	fp, sp
   2a6c0:	bl	2de8c <__assert_fail@plt+0x1b29c>
   2a6c4:	cmp	r0, #0
   2a6c8:	popne	{fp, pc}
   2a6cc:	bl	2aab4 <__assert_fail@plt+0x17ec4>
   2a6d0:	push	{r4, r5, fp, lr}
   2a6d4:	add	fp, sp, #8
   2a6d8:	mov	r4, r1
   2a6dc:	mov	r5, r0
   2a6e0:	bl	2e984 <__assert_fail@plt+0x1bd94>
   2a6e4:	cmp	r0, #0
   2a6e8:	popne	{r4, r5, fp, pc}
   2a6ec:	cmp	r5, #0
   2a6f0:	beq	2a700 <__assert_fail@plt+0x17b10>
   2a6f4:	cmp	r4, #0
   2a6f8:	bne	2a700 <__assert_fail@plt+0x17b10>
   2a6fc:	pop	{r4, r5, fp, pc}
   2a700:	bl	2aab4 <__assert_fail@plt+0x17ec4>
   2a704:	push	{fp, lr}
   2a708:	mov	fp, sp
   2a70c:	cmp	r1, #0
   2a710:	orreq	r1, r1, #1
   2a714:	bl	2e984 <__assert_fail@plt+0x1bd94>
   2a718:	cmp	r0, #0
   2a71c:	popne	{fp, pc}
   2a720:	bl	2aab4 <__assert_fail@plt+0x17ec4>
   2a724:	push	{fp, lr}
   2a728:	mov	fp, sp
   2a72c:	clz	r3, r2
   2a730:	lsr	ip, r3, #5
   2a734:	clz	r3, r1
   2a738:	lsr	r3, r3, #5
   2a73c:	orrs	r3, r3, ip
   2a740:	movwne	r1, #1
   2a744:	movwne	r2, #1
   2a748:	bl	2e9d4 <__assert_fail@plt+0x1bde4>
   2a74c:	cmp	r0, #0
   2a750:	popne	{fp, pc}
   2a754:	bl	2aab4 <__assert_fail@plt+0x17ec4>
   2a758:	push	{fp, lr}
   2a75c:	mov	fp, sp
   2a760:	mov	r2, r1
   2a764:	mov	r1, r0
   2a768:	mov	r0, #0
   2a76c:	bl	2e9d4 <__assert_fail@plt+0x1bde4>
   2a770:	cmp	r0, #0
   2a774:	popne	{fp, pc}
   2a778:	bl	2aab4 <__assert_fail@plt+0x17ec4>
   2a77c:	mov	r2, r1
   2a780:	mov	r1, r0
   2a784:	mov	r0, #0
   2a788:	b	2a724 <__assert_fail@plt+0x17b34>
   2a78c:	mov	r2, #1
   2a790:	b	2a794 <__assert_fail@plt+0x17ba4>
   2a794:	push	{r4, r5, fp, lr}
   2a798:	add	fp, sp, #8
   2a79c:	ldr	r5, [r1]
   2a7a0:	mov	r4, r1
   2a7a4:	cmp	r0, #0
   2a7a8:	beq	2a7c0 <__assert_fail@plt+0x17bd0>
   2a7ac:	mov	r1, #1
   2a7b0:	add	r1, r1, r5, lsr #1
   2a7b4:	adds	r5, r5, r1
   2a7b8:	bcc	2a7d8 <__assert_fail@plt+0x17be8>
   2a7bc:	bl	2aab4 <__assert_fail@plt+0x17ec4>
   2a7c0:	cmp	r5, #0
   2a7c4:	bne	2a7d8 <__assert_fail@plt+0x17be8>
   2a7c8:	mov	r1, #64	; 0x40
   2a7cc:	cmp	r2, #64	; 0x40
   2a7d0:	udiv	r5, r1, r2
   2a7d4:	addhi	r5, r5, #1
   2a7d8:	mov	r1, r5
   2a7dc:	bl	2a64c <__assert_fail@plt+0x17a5c>
   2a7e0:	str	r5, [r4]
   2a7e4:	pop	{r4, r5, fp, pc}
   2a7e8:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   2a7ec:	add	fp, sp, #24
   2a7f0:	ldr	r6, [r1]
   2a7f4:	mov	r8, r1
   2a7f8:	ldr	r4, [fp, #8]
   2a7fc:	add	r1, r6, r6, asr #1
   2a800:	cmp	r1, r6
   2a804:	mvnvs	r1, #-2147483648	; 0x80000000
   2a808:	cmp	r1, r3
   2a80c:	mov	r5, r1
   2a810:	movgt	r5, r3
   2a814:	cmn	r3, #1
   2a818:	movle	r5, r1
   2a81c:	cmn	r4, #1
   2a820:	ble	2a840 <__assert_fail@plt+0x17c50>
   2a824:	cmp	r4, #0
   2a828:	beq	2a894 <__assert_fail@plt+0x17ca4>
   2a82c:	cmn	r5, #1
   2a830:	ble	2a868 <__assert_fail@plt+0x17c78>
   2a834:	mvn	r7, #-2147483648	; 0x80000000
   2a838:	udiv	r1, r7, r4
   2a83c:	b	2a85c <__assert_fail@plt+0x17c6c>
   2a840:	cmn	r5, #1
   2a844:	ble	2a884 <__assert_fail@plt+0x17c94>
   2a848:	cmn	r4, #1
   2a84c:	beq	2a894 <__assert_fail@plt+0x17ca4>
   2a850:	mov	r1, #-2147483648	; 0x80000000
   2a854:	mvn	r7, #-2147483648	; 0x80000000
   2a858:	sdiv	r1, r1, r4
   2a85c:	cmp	r1, r5
   2a860:	bge	2a894 <__assert_fail@plt+0x17ca4>
   2a864:	b	2a8a4 <__assert_fail@plt+0x17cb4>
   2a868:	beq	2a894 <__assert_fail@plt+0x17ca4>
   2a86c:	mov	r1, #-2147483648	; 0x80000000
   2a870:	mvn	r7, #-2147483648	; 0x80000000
   2a874:	sdiv	r1, r1, r5
   2a878:	cmp	r1, r4
   2a87c:	bge	2a894 <__assert_fail@plt+0x17ca4>
   2a880:	b	2a8a4 <__assert_fail@plt+0x17cb4>
   2a884:	mvn	r7, #-2147483648	; 0x80000000
   2a888:	sdiv	r1, r7, r4
   2a88c:	cmp	r5, r1
   2a890:	blt	2a8a4 <__assert_fail@plt+0x17cb4>
   2a894:	mul	r1, r5, r4
   2a898:	mov	r7, #64	; 0x40
   2a89c:	cmp	r1, #63	; 0x3f
   2a8a0:	bgt	2a8ac <__assert_fail@plt+0x17cbc>
   2a8a4:	sdiv	r5, r7, r4
   2a8a8:	mul	r1, r5, r4
   2a8ac:	cmp	r0, #0
   2a8b0:	moveq	r7, #0
   2a8b4:	streq	r7, [r8]
   2a8b8:	sub	r7, r5, r6
   2a8bc:	cmp	r7, r2
   2a8c0:	bge	2a964 <__assert_fail@plt+0x17d74>
   2a8c4:	add	r5, r6, r2
   2a8c8:	mov	r2, #0
   2a8cc:	mov	r1, #0
   2a8d0:	cmp	r5, r3
   2a8d4:	movwgt	r2, #1
   2a8d8:	cmn	r3, #1
   2a8dc:	movwgt	r1, #1
   2a8e0:	cmp	r5, r6
   2a8e4:	bvs	2a94c <__assert_fail@plt+0x17d5c>
   2a8e8:	ands	r1, r1, r2
   2a8ec:	bne	2a94c <__assert_fail@plt+0x17d5c>
   2a8f0:	cmn	r4, #1
   2a8f4:	ble	2a914 <__assert_fail@plt+0x17d24>
   2a8f8:	cmp	r4, #0
   2a8fc:	beq	2a960 <__assert_fail@plt+0x17d70>
   2a900:	cmn	r5, #1
   2a904:	ble	2a938 <__assert_fail@plt+0x17d48>
   2a908:	mvn	r1, #-2147483648	; 0x80000000
   2a90c:	udiv	r1, r1, r4
   2a910:	b	2a92c <__assert_fail@plt+0x17d3c>
   2a914:	cmn	r5, #1
   2a918:	ble	2a950 <__assert_fail@plt+0x17d60>
   2a91c:	cmn	r4, #1
   2a920:	beq	2a960 <__assert_fail@plt+0x17d70>
   2a924:	mov	r1, #-2147483648	; 0x80000000
   2a928:	sdiv	r1, r1, r4
   2a92c:	cmp	r1, r5
   2a930:	bge	2a960 <__assert_fail@plt+0x17d70>
   2a934:	b	2a94c <__assert_fail@plt+0x17d5c>
   2a938:	beq	2a960 <__assert_fail@plt+0x17d70>
   2a93c:	mov	r1, #-2147483648	; 0x80000000
   2a940:	sdiv	r1, r1, r5
   2a944:	cmp	r1, r4
   2a948:	bge	2a960 <__assert_fail@plt+0x17d70>
   2a94c:	bl	2aab4 <__assert_fail@plt+0x17ec4>
   2a950:	mvn	r1, #-2147483648	; 0x80000000
   2a954:	sdiv	r1, r1, r4
   2a958:	cmp	r5, r1
   2a95c:	blt	2a94c <__assert_fail@plt+0x17d5c>
   2a960:	mul	r1, r5, r4
   2a964:	bl	2a6d0 <__assert_fail@plt+0x17ae0>
   2a968:	str	r5, [r8]
   2a96c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   2a970:	push	{fp, lr}
   2a974:	mov	fp, sp
   2a978:	mov	r1, #1
   2a97c:	bl	2b734 <__assert_fail@plt+0x18b44>
   2a980:	cmp	r0, #0
   2a984:	popne	{fp, pc}
   2a988:	bl	2aab4 <__assert_fail@plt+0x17ec4>
   2a98c:	push	{fp, lr}
   2a990:	mov	fp, sp
   2a994:	bl	2b734 <__assert_fail@plt+0x18b44>
   2a998:	cmp	r0, #0
   2a99c:	popne	{fp, pc}
   2a9a0:	bl	2aab4 <__assert_fail@plt+0x17ec4>
   2a9a4:	push	{fp, lr}
   2a9a8:	mov	fp, sp
   2a9ac:	mov	r1, #1
   2a9b0:	bl	2b734 <__assert_fail@plt+0x18b44>
   2a9b4:	cmp	r0, #0
   2a9b8:	popne	{fp, pc}
   2a9bc:	bl	2aab4 <__assert_fail@plt+0x17ec4>
   2a9c0:	push	{fp, lr}
   2a9c4:	mov	fp, sp
   2a9c8:	bl	2b734 <__assert_fail@plt+0x18b44>
   2a9cc:	cmp	r0, #0
   2a9d0:	popne	{fp, pc}
   2a9d4:	bl	2aab4 <__assert_fail@plt+0x17ec4>
   2a9d8:	push	{r4, r5, fp, lr}
   2a9dc:	add	fp, sp, #8
   2a9e0:	mov	r5, r0
   2a9e4:	mov	r0, r1
   2a9e8:	mov	r4, r1
   2a9ec:	bl	2de8c <__assert_fail@plt+0x1b29c>
   2a9f0:	cmp	r0, #0
   2a9f4:	beq	2aa08 <__assert_fail@plt+0x17e18>
   2a9f8:	mov	r1, r5
   2a9fc:	mov	r2, r4
   2aa00:	pop	{r4, r5, fp, lr}
   2aa04:	b	125f0 <memcpy@plt>
   2aa08:	bl	2aab4 <__assert_fail@plt+0x17ec4>
   2aa0c:	push	{r4, r5, fp, lr}
   2aa10:	add	fp, sp, #8
   2aa14:	mov	r5, r0
   2aa18:	mov	r0, r1
   2aa1c:	mov	r4, r1
   2aa20:	bl	2de8c <__assert_fail@plt+0x1b29c>
   2aa24:	cmp	r0, #0
   2aa28:	beq	2aa3c <__assert_fail@plt+0x17e4c>
   2aa2c:	mov	r1, r5
   2aa30:	mov	r2, r4
   2aa34:	pop	{r4, r5, fp, lr}
   2aa38:	b	125f0 <memcpy@plt>
   2aa3c:	bl	2aab4 <__assert_fail@plt+0x17ec4>
   2aa40:	push	{r4, r5, fp, lr}
   2aa44:	add	fp, sp, #8
   2aa48:	mov	r5, r0
   2aa4c:	add	r0, r1, #1
   2aa50:	mov	r4, r1
   2aa54:	bl	2de8c <__assert_fail@plt+0x1b29c>
   2aa58:	cmp	r0, #0
   2aa5c:	beq	2aa78 <__assert_fail@plt+0x17e88>
   2aa60:	mov	r1, #0
   2aa64:	mov	r2, r4
   2aa68:	strb	r1, [r0, r4]
   2aa6c:	mov	r1, r5
   2aa70:	pop	{r4, r5, fp, lr}
   2aa74:	b	125f0 <memcpy@plt>
   2aa78:	bl	2aab4 <__assert_fail@plt+0x17ec4>
   2aa7c:	push	{r4, r5, fp, lr}
   2aa80:	add	fp, sp, #8
   2aa84:	mov	r4, r0
   2aa88:	bl	128c0 <strlen@plt>
   2aa8c:	add	r5, r0, #1
   2aa90:	mov	r0, r5
   2aa94:	bl	2de8c <__assert_fail@plt+0x1b29c>
   2aa98:	cmp	r0, #0
   2aa9c:	beq	2aab0 <__assert_fail@plt+0x17ec0>
   2aaa0:	mov	r1, r4
   2aaa4:	mov	r2, r5
   2aaa8:	pop	{r4, r5, fp, lr}
   2aaac:	b	125f0 <memcpy@plt>
   2aab0:	bl	2aab4 <__assert_fail@plt+0x17ec4>
   2aab4:	push	{fp, lr}
   2aab8:	mov	fp, sp
   2aabc:	movw	r0, #17672	; 0x4508
   2aac0:	movw	r1, #12190	; 0x2f9e
   2aac4:	mov	r2, #5
   2aac8:	movt	r0, #5
   2aacc:	movt	r1, #4
   2aad0:	ldr	r4, [r0]
   2aad4:	mov	r0, #0
   2aad8:	bl	12674 <dcgettext@plt>
   2aadc:	movw	r2, #13527	; 0x34d7
   2aae0:	mov	r3, r0
   2aae4:	mov	r0, r4
   2aae8:	mov	r1, #0
   2aaec:	movt	r2, #4
   2aaf0:	bl	127b8 <error@plt>
   2aaf4:	bl	12b9c <abort@plt>
   2aaf8:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   2aafc:	add	fp, sp, #24
   2ab00:	sub	sp, sp, #8
   2ab04:	mov	r4, r3
   2ab08:	mov	r8, r2
   2ab0c:	mov	r9, r1
   2ab10:	mov	r5, r0
   2ab14:	bl	12908 <__errno_location@plt>
   2ab18:	mov	r6, #0
   2ab1c:	mov	r7, r0
   2ab20:	add	r1, sp, #4
   2ab24:	str	r6, [r0]
   2ab28:	mov	r0, r5
   2ab2c:	blx	r4
   2ab30:	ldr	r0, [sp, #4]
   2ab34:	cmp	r0, r5
   2ab38:	beq	2ab78 <__assert_fail@plt+0x17f88>
   2ab3c:	cmp	r9, #0
   2ab40:	beq	2ab60 <__assert_fail@plt+0x17f70>
   2ab44:	vcmp.f64	d0, #0.0
   2ab48:	vmrs	APSR_nzcv, fpscr
   2ab4c:	beq	2ab74 <__assert_fail@plt+0x17f84>
   2ab50:	ldr	r1, [r7]
   2ab54:	subs	r6, r1, #34	; 0x22
   2ab58:	movwne	r6, #1
   2ab5c:	b	2ab78 <__assert_fail@plt+0x17f88>
   2ab60:	ldrb	r1, [r0]
   2ab64:	mov	r6, #0
   2ab68:	cmp	r1, #0
   2ab6c:	bne	2ab80 <__assert_fail@plt+0x17f90>
   2ab70:	b	2ab44 <__assert_fail@plt+0x17f54>
   2ab74:	mov	r6, #1
   2ab78:	cmp	r9, #0
   2ab7c:	strne	r0, [r9]
   2ab80:	vstr	d0, [r8]
   2ab84:	mov	r0, r6
   2ab88:	sub	sp, fp, #24
   2ab8c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   2ab90:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2ab94:	add	fp, sp, #28
   2ab98:	sub	sp, sp, #12
   2ab9c:	cmp	r2, #37	; 0x25
   2aba0:	bcs	2afdc <__assert_fail@plt+0x183ec>
   2aba4:	ldr	r9, [fp, #8]
   2aba8:	mov	r7, r2
   2abac:	mov	r6, r1
   2abb0:	mov	r4, r0
   2abb4:	str	r3, [sp, #4]
   2abb8:	bl	12908 <__errno_location@plt>
   2abbc:	mov	r5, r0
   2abc0:	mov	r0, #0
   2abc4:	str	r0, [r5]
   2abc8:	bl	1286c <__ctype_b_loc@plt>
   2abcc:	ldr	r1, [r0]
   2abd0:	mov	r2, r4
   2abd4:	ldrb	r0, [r2], #1
   2abd8:	add	r3, r1, r0, lsl #1
   2abdc:	ldrb	r3, [r3, #1]
   2abe0:	tst	r3, #32
   2abe4:	bne	2abd4 <__assert_fail@plt+0x17fe4>
   2abe8:	cmp	r6, #0
   2abec:	add	r8, sp, #8
   2abf0:	mov	sl, #4
   2abf4:	movne	r8, r6
   2abf8:	cmp	r0, #45	; 0x2d
   2abfc:	beq	2afd0 <__assert_fail@plt+0x183e0>
   2ac00:	mov	r0, r4
   2ac04:	mov	r1, r8
   2ac08:	mov	r2, r7
   2ac0c:	bl	128b4 <strtoul@plt>
   2ac10:	ldr	r6, [r8]
   2ac14:	cmp	r6, r4
   2ac18:	beq	2ac3c <__assert_fail@plt+0x1804c>
   2ac1c:	mov	r7, r0
   2ac20:	ldr	r0, [r5]
   2ac24:	cmp	r0, #0
   2ac28:	beq	2ac6c <__assert_fail@plt+0x1807c>
   2ac2c:	cmp	r0, #34	; 0x22
   2ac30:	bne	2afd0 <__assert_fail@plt+0x183e0>
   2ac34:	mov	sl, #1
   2ac38:	b	2ac70 <__assert_fail@plt+0x18080>
   2ac3c:	cmp	r9, #0
   2ac40:	beq	2afd0 <__assert_fail@plt+0x183e0>
   2ac44:	ldrb	r1, [r4]
   2ac48:	cmp	r1, #0
   2ac4c:	beq	2afd0 <__assert_fail@plt+0x183e0>
   2ac50:	mov	r0, r9
   2ac54:	bl	128cc <strchr@plt>
   2ac58:	cmp	r0, #0
   2ac5c:	beq	2afd0 <__assert_fail@plt+0x183e0>
   2ac60:	mov	r7, #1
   2ac64:	mov	sl, #0
   2ac68:	b	2ac78 <__assert_fail@plt+0x18088>
   2ac6c:	mov	sl, r0
   2ac70:	cmp	r9, #0
   2ac74:	beq	2afc8 <__assert_fail@plt+0x183d8>
   2ac78:	ldrb	r4, [r6]
   2ac7c:	cmp	r4, #0
   2ac80:	beq	2afc8 <__assert_fail@plt+0x183d8>
   2ac84:	mov	r0, r9
   2ac88:	mov	r1, r4
   2ac8c:	bl	128cc <strchr@plt>
   2ac90:	cmp	r0, #0
   2ac94:	beq	2af50 <__assert_fail@plt+0x18360>
   2ac98:	sub	r0, r4, #69	; 0x45
   2ac9c:	mov	r3, #1
   2aca0:	mov	r5, #1024	; 0x400
   2aca4:	cmp	r0, #21
   2aca8:	bhi	2acc0 <__assert_fail@plt+0x180d0>
   2acac:	movw	r2, #35141	; 0x8945
   2acb0:	mov	r1, #1
   2acb4:	movt	r2, #48	; 0x30
   2acb8:	tst	r2, r1, lsl r0
   2acbc:	bne	2acdc <__assert_fail@plt+0x180ec>
   2acc0:	sub	r0, r4, #103	; 0x67
   2acc4:	cmp	r0, #13
   2acc8:	bhi	2ad2c <__assert_fail@plt+0x1813c>
   2accc:	mov	r1, #1
   2acd0:	movw	r2, #8273	; 0x2051
   2acd4:	tst	r2, r1, lsl r0
   2acd8:	beq	2ad2c <__assert_fail@plt+0x1813c>
   2acdc:	mov	r0, r9
   2ace0:	mov	r1, #48	; 0x30
   2ace4:	bl	128cc <strchr@plt>
   2ace8:	cmp	r0, #0
   2acec:	beq	2ad28 <__assert_fail@plt+0x18138>
   2acf0:	ldrb	r0, [r6, #1]
   2acf4:	cmp	r0, #66	; 0x42
   2acf8:	cmpne	r0, #68	; 0x44
   2acfc:	bne	2ad0c <__assert_fail@plt+0x1811c>
   2ad00:	mov	r3, #2
   2ad04:	mov	r5, #1000	; 0x3e8
   2ad08:	b	2ad2c <__assert_fail@plt+0x1813c>
   2ad0c:	cmp	r0, #105	; 0x69
   2ad10:	bne	2ad28 <__assert_fail@plt+0x18138>
   2ad14:	ldrb	r0, [r6, #2]
   2ad18:	mov	r3, #1
   2ad1c:	cmp	r0, #66	; 0x42
   2ad20:	movweq	r3, #3
   2ad24:	b	2ad2c <__assert_fail@plt+0x1813c>
   2ad28:	mov	r3, #1
   2ad2c:	cmp	r4, #89	; 0x59
   2ad30:	bgt	2ada0 <__assert_fail@plt+0x181b0>
   2ad34:	sub	r0, r4, #66	; 0x42
   2ad38:	cmp	r0, #14
   2ad3c:	bhi	2ae14 <__assert_fail@plt+0x18224>
   2ad40:	add	r1, pc, #0
   2ad44:	ldr	pc, [r1, r0, lsl #2]
   2ad48:	andeq	sl, r2, r4, lsl #27
   2ad4c:	andeq	sl, r2, r0, asr pc
   2ad50:	andeq	sl, r2, r0, asr pc
   2ad54:	andeq	sl, r2, ip, asr pc
   2ad58:	andeq	sl, r2, r0, asr pc
   2ad5c:	andeq	sl, r2, r4, ror lr
   2ad60:	andeq	sl, r2, r0, asr pc
   2ad64:	andeq	sl, r2, r0, asr pc
   2ad68:	andeq	sl, r2, r0, asr pc
   2ad6c:	andeq	sl, r2, r0, lsr #29
   2ad70:	andeq	sl, r2, r0, asr pc
   2ad74:	andeq	sl, r2, r4, asr #29
   2ad78:	andeq	sl, r2, r0, asr pc
   2ad7c:	andeq	sl, r2, r0, asr pc
   2ad80:	andeq	sl, r2, r8, lsl #31
   2ad84:	mov	r1, #0
   2ad88:	lsr	r0, r7, #22
   2ad8c:	cmp	r1, r7, lsr #22
   2ad90:	lsl	r7, r7, #10
   2ad94:	movwne	r0, #1
   2ad98:	mvnne	r7, #0
   2ad9c:	b	2afb0 <__assert_fail@plt+0x183c0>
   2ada0:	cmp	r4, #115	; 0x73
   2ada4:	bgt	2ae50 <__assert_fail@plt+0x18260>
   2ada8:	sub	r1, r4, #98	; 0x62
   2adac:	cmp	r1, #11
   2adb0:	bhi	2af1c <__assert_fail@plt+0x1832c>
   2adb4:	add	r2, pc, #4
   2adb8:	mov	r0, #0
   2adbc:	ldr	pc, [r2, r1, lsl #2]
   2adc0:	strdeq	sl, [r2], -r0
   2adc4:			; <UNDEFINED> instruction: 0x0002afb0
   2adc8:	andeq	sl, r2, r0, asr pc
   2adcc:	andeq	sl, r2, r0, asr pc
   2add0:	andeq	sl, r2, r0, asr pc
   2add4:	andeq	sl, r2, r4, ror lr
   2add8:	andeq	sl, r2, r0, asr pc
   2addc:	andeq	sl, r2, r0, asr pc
   2ade0:	andeq	sl, r2, r0, asr pc
   2ade4:	andeq	sl, r2, r0, lsr #29
   2ade8:	andeq	sl, r2, r0, asr pc
   2adec:	andeq	sl, r2, r4, asr #29
   2adf0:	movw	r0, #65535	; 0xffff
   2adf4:	movt	r0, #63	; 0x3f
   2adf8:	orr	r1, r0, #4194304	; 0x400000
   2adfc:	mov	r0, #0
   2ae00:	cmp	r7, r1
   2ae04:	lsl	r7, r7, #9
   2ae08:	movwhi	r0, #1
   2ae0c:	mvnhi	r7, #0
   2ae10:	b	2afb0 <__assert_fail@plt+0x183c0>
   2ae14:	cmp	r4, #84	; 0x54
   2ae18:	beq	2aef0 <__assert_fail@plt+0x18300>
   2ae1c:	cmp	r4, #89	; 0x59
   2ae20:	bne	2af50 <__assert_fail@plt+0x18360>
   2ae24:	mvn	r0, #0
   2ae28:	mvn	r2, #7
   2ae2c:	udiv	r1, r0, r5
   2ae30:	mov	r0, #0
   2ae34:	cmp	r1, r7
   2ae38:	mul	r7, r7, r5
   2ae3c:	orrcc	r0, r0, #1
   2ae40:	mvncc	r7, #0
   2ae44:	adds	r2, r2, #1
   2ae48:	bcc	2ae34 <__assert_fail@plt+0x18244>
   2ae4c:	b	2afb0 <__assert_fail@plt+0x183c0>
   2ae50:	cmp	r4, #116	; 0x74
   2ae54:	beq	2aef0 <__assert_fail@plt+0x18300>
   2ae58:	cmp	r4, #119	; 0x77
   2ae5c:	bne	2af50 <__assert_fail@plt+0x18360>
   2ae60:	cmp	r7, #0
   2ae64:	lsl	r1, r7, #1
   2ae68:	lsr	r0, r7, #31
   2ae6c:	mvnmi	r1, #0
   2ae70:	b	2aebc <__assert_fail@plt+0x182cc>
   2ae74:	mvn	r0, #0
   2ae78:	mvn	r2, #2
   2ae7c:	udiv	r1, r0, r5
   2ae80:	mov	r0, #0
   2ae84:	cmp	r1, r7
   2ae88:	mul	r7, r7, r5
   2ae8c:	orrcc	r0, r0, #1
   2ae90:	mvncc	r7, #0
   2ae94:	adds	r2, r2, #1
   2ae98:	bcc	2ae84 <__assert_fail@plt+0x18294>
   2ae9c:	b	2afb0 <__assert_fail@plt+0x183c0>
   2aea0:	mvn	r0, #0
   2aea4:	mul	r1, r7, r5
   2aea8:	udiv	r0, r0, r5
   2aeac:	cmp	r0, r7
   2aeb0:	mov	r0, #0
   2aeb4:	mvncc	r1, #0
   2aeb8:	movwcc	r0, #1
   2aebc:	mov	r7, r1
   2aec0:	b	2afb0 <__assert_fail@plt+0x183c0>
   2aec4:	mvn	r0, #0
   2aec8:	mvn	r2, #1
   2aecc:	udiv	r1, r0, r5
   2aed0:	mov	r0, #0
   2aed4:	cmp	r1, r7
   2aed8:	mul	r7, r7, r5
   2aedc:	orrcc	r0, r0, #1
   2aee0:	mvncc	r7, #0
   2aee4:	adds	r2, r2, #1
   2aee8:	bcc	2aed4 <__assert_fail@plt+0x182e4>
   2aeec:	b	2afb0 <__assert_fail@plt+0x183c0>
   2aef0:	mvn	r0, #0
   2aef4:	mvn	r2, #3
   2aef8:	udiv	r1, r0, r5
   2aefc:	mov	r0, #0
   2af00:	cmp	r1, r7
   2af04:	mul	r7, r7, r5
   2af08:	orrcc	r0, r0, #1
   2af0c:	mvncc	r7, #0
   2af10:	adds	r2, r2, #1
   2af14:	bcc	2af00 <__assert_fail@plt+0x18310>
   2af18:	b	2afb0 <__assert_fail@plt+0x183c0>
   2af1c:	cmp	r4, #90	; 0x5a
   2af20:	bne	2af50 <__assert_fail@plt+0x18360>
   2af24:	mvn	r0, #0
   2af28:	mvn	r2, #6
   2af2c:	udiv	r1, r0, r5
   2af30:	mov	r0, #0
   2af34:	cmp	r1, r7
   2af38:	mul	r7, r7, r5
   2af3c:	orrcc	r0, r0, #1
   2af40:	mvncc	r7, #0
   2af44:	adds	r2, r2, #1
   2af48:	bcc	2af34 <__assert_fail@plt+0x18344>
   2af4c:	b	2afb0 <__assert_fail@plt+0x183c0>
   2af50:	ldr	r0, [sp, #4]
   2af54:	orr	sl, sl, #2
   2af58:	b	2afcc <__assert_fail@plt+0x183dc>
   2af5c:	mvn	r0, #0
   2af60:	mvn	r2, #5
   2af64:	udiv	r1, r0, r5
   2af68:	mov	r0, #0
   2af6c:	cmp	r1, r7
   2af70:	mul	r7, r7, r5
   2af74:	orrcc	r0, r0, #1
   2af78:	mvncc	r7, #0
   2af7c:	adds	r2, r2, #1
   2af80:	bcc	2af6c <__assert_fail@plt+0x1837c>
   2af84:	b	2afb0 <__assert_fail@plt+0x183c0>
   2af88:	mvn	r0, #0
   2af8c:	mvn	r2, #4
   2af90:	udiv	r1, r0, r5
   2af94:	mov	r0, #0
   2af98:	cmp	r1, r7
   2af9c:	mul	r7, r7, r5
   2afa0:	orrcc	r0, r0, #1
   2afa4:	mvncc	r7, #0
   2afa8:	adds	r2, r2, #1
   2afac:	bcc	2af98 <__assert_fail@plt+0x183a8>
   2afb0:	add	r1, r6, r3
   2afb4:	orr	sl, r0, sl
   2afb8:	str	r1, [r8]
   2afbc:	ldrb	r1, [r6, r3]
   2afc0:	cmp	r1, #0
   2afc4:	orrne	sl, sl, #2
   2afc8:	ldr	r0, [sp, #4]
   2afcc:	str	r7, [r0]
   2afd0:	mov	r0, sl
   2afd4:	sub	sp, fp, #28
   2afd8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2afdc:	movw	r0, #12207	; 0x2faf
   2afe0:	movw	r1, #12245	; 0x2fd5
   2afe4:	movw	r3, #12257	; 0x2fe1
   2afe8:	mov	r2, #84	; 0x54
   2afec:	movt	r0, #4
   2aff0:	movt	r1, #4
   2aff4:	movt	r3, #4
   2aff8:	bl	12bf0 <__assert_fail@plt>
   2affc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2b000:	add	fp, sp, #28
   2b004:	sub	sp, sp, #20
   2b008:	cmp	r2, #37	; 0x25
   2b00c:	bcs	2b698 <__assert_fail@plt+0x18aa8>
   2b010:	mov	r8, r3
   2b014:	mov	r5, r2
   2b018:	mov	r6, r1
   2b01c:	mov	r4, r0
   2b020:	bl	12908 <__errno_location@plt>
   2b024:	mov	r7, r0
   2b028:	mov	r0, #0
   2b02c:	str	r0, [r7]
   2b030:	bl	1286c <__ctype_b_loc@plt>
   2b034:	ldr	r1, [r0]
   2b038:	mov	r2, r4
   2b03c:	ldrb	r0, [r2], #1
   2b040:	add	r3, r1, r0, lsl #1
   2b044:	ldrb	r3, [r3, #1]
   2b048:	tst	r3, #32
   2b04c:	bne	2b03c <__assert_fail@plt+0x1844c>
   2b050:	cmp	r6, #0
   2b054:	add	sl, sp, #16
   2b058:	movne	sl, r6
   2b05c:	mov	r6, #4
   2b060:	cmp	r0, #45	; 0x2d
   2b064:	beq	2b68c <__assert_fail@plt+0x18a9c>
   2b068:	mov	r0, r4
   2b06c:	mov	r1, sl
   2b070:	mov	r2, r5
   2b074:	str	r8, [sp, #12]
   2b078:	bl	129a4 <strtoumax@plt>
   2b07c:	ldr	r5, [sl]
   2b080:	cmp	r5, r4
   2b084:	beq	2b0ac <__assert_fail@plt+0x184bc>
   2b088:	mov	r8, r0
   2b08c:	ldr	r0, [r7]
   2b090:	mov	r9, r1
   2b094:	cmp	r0, #0
   2b098:	beq	2b0e0 <__assert_fail@plt+0x184f0>
   2b09c:	cmp	r0, #34	; 0x22
   2b0a0:	bne	2b68c <__assert_fail@plt+0x18a9c>
   2b0a4:	mov	r6, #1
   2b0a8:	b	2b0e4 <__assert_fail@plt+0x184f4>
   2b0ac:	ldr	r0, [fp, #8]
   2b0b0:	cmp	r0, #0
   2b0b4:	beq	2b68c <__assert_fail@plt+0x18a9c>
   2b0b8:	ldrb	r1, [r4]
   2b0bc:	cmp	r1, #0
   2b0c0:	beq	2b68c <__assert_fail@plt+0x18a9c>
   2b0c4:	bl	128cc <strchr@plt>
   2b0c8:	cmp	r0, #0
   2b0cc:	beq	2b68c <__assert_fail@plt+0x18a9c>
   2b0d0:	mov	r6, #0
   2b0d4:	mov	r8, #1
   2b0d8:	mov	r9, #0
   2b0dc:	b	2b0f0 <__assert_fail@plt+0x18500>
   2b0e0:	mov	r6, r0
   2b0e4:	ldr	r0, [fp, #8]
   2b0e8:	cmp	r0, #0
   2b0ec:	beq	2b684 <__assert_fail@plt+0x18a94>
   2b0f0:	ldrb	r7, [r5]
   2b0f4:	cmp	r7, #0
   2b0f8:	beq	2b684 <__assert_fail@plt+0x18a94>
   2b0fc:	ldr	r0, [fp, #8]
   2b100:	mov	r1, r7
   2b104:	bl	128cc <strchr@plt>
   2b108:	cmp	r0, #0
   2b10c:	beq	2b214 <__assert_fail@plt+0x18624>
   2b110:	sub	r0, r7, #69	; 0x45
   2b114:	mov	r1, #1
   2b118:	mov	r3, #0
   2b11c:	mov	r4, #1024	; 0x400
   2b120:	cmp	r0, #21
   2b124:	str	r1, [sp, #8]
   2b128:	bhi	2b140 <__assert_fail@plt+0x18550>
   2b12c:	movw	r2, #35141	; 0x8945
   2b130:	mov	r1, #1
   2b134:	movt	r2, #48	; 0x30
   2b138:	tst	r2, r1, lsl r0
   2b13c:	bne	2b15c <__assert_fail@plt+0x1856c>
   2b140:	sub	r0, r7, #103	; 0x67
   2b144:	cmp	r0, #13
   2b148:	bhi	2b190 <__assert_fail@plt+0x185a0>
   2b14c:	mov	r1, #1
   2b150:	movw	r2, #8273	; 0x2051
   2b154:	tst	r2, r1, lsl r0
   2b158:	beq	2b190 <__assert_fail@plt+0x185a0>
   2b15c:	ldr	r0, [fp, #8]
   2b160:	mov	r1, #48	; 0x30
   2b164:	bl	128cc <strchr@plt>
   2b168:	cmp	r0, #0
   2b16c:	beq	2b18c <__assert_fail@plt+0x1859c>
   2b170:	ldrb	r0, [r5, #1]
   2b174:	cmp	r0, #66	; 0x42
   2b178:	cmpne	r0, #68	; 0x44
   2b17c:	bne	2b2a4 <__assert_fail@plt+0x186b4>
   2b180:	mov	r4, #1000	; 0x3e8
   2b184:	mov	r0, #2
   2b188:	str	r0, [sp, #8]
   2b18c:	mov	r3, #0
   2b190:	cmp	r7, #89	; 0x59
   2b194:	stm	sp, {r5, r6}
   2b198:	bgt	2b220 <__assert_fail@plt+0x18630>
   2b19c:	sub	r0, r7, #66	; 0x42
   2b1a0:	cmp	r0, #14
   2b1a4:	bhi	2b2c8 <__assert_fail@plt+0x186d8>
   2b1a8:	add	r1, pc, #0
   2b1ac:	ldr	pc, [r1, r0, lsl #2]
   2b1b0:	andeq	fp, r2, ip, ror #3
   2b1b4:	andeq	fp, r2, r8, ror r5
   2b1b8:	andeq	fp, r2, r8, ror r5
   2b1bc:	andeq	fp, r2, ip, lsl #11
   2b1c0:	andeq	fp, r2, r8, ror r5
   2b1c4:	andeq	fp, r2, ip, ror r3
   2b1c8:	andeq	fp, r2, r8, ror r5
   2b1cc:	andeq	fp, r2, r8, ror r5
   2b1d0:	andeq	fp, r2, r8, ror r5
   2b1d4:	andeq	fp, r2, r8, ror #7
   2b1d8:	andeq	fp, r2, r8, ror r5
   2b1dc:	andeq	fp, r2, ip, lsr #8
   2b1e0:	andeq	fp, r2, r8, ror r5
   2b1e4:	andeq	fp, r2, r8, ror r5
   2b1e8:	strdeq	fp, [r2], -r8
   2b1ec:	mov	r1, #0
   2b1f0:	lsl	r3, r9, #10
   2b1f4:	lsl	r0, r8, #10
   2b1f8:	lsr	r2, r9, #22
   2b1fc:	cmp	r1, r9, lsr #22
   2b200:	orr	r3, r3, r8, lsr #22
   2b204:	mvnne	r0, #0
   2b208:	movwne	r2, #1
   2b20c:	cmp	r1, r9, lsr #22
   2b210:	b	2b294 <__assert_fail@plt+0x186a4>
   2b214:	ldr	r0, [sp, #12]
   2b218:	orr	r6, r6, #2
   2b21c:	b	2b688 <__assert_fail@plt+0x18a98>
   2b220:	cmp	r7, #115	; 0x73
   2b224:	bgt	2b344 <__assert_fail@plt+0x18754>
   2b228:	sub	r0, r7, #98	; 0x62
   2b22c:	cmp	r0, #11
   2b230:	bhi	2b504 <__assert_fail@plt+0x18914>
   2b234:	add	r1, pc, #4
   2b238:	mov	r2, #0
   2b23c:	ldr	pc, [r1, r0, lsl #2]
   2b240:	andeq	fp, r2, r0, ror r2
   2b244:	andeq	fp, r2, r0, ror #12
   2b248:	andeq	fp, r2, r8, ror r5
   2b24c:	andeq	fp, r2, r8, ror r5
   2b250:	andeq	fp, r2, r8, ror r5
   2b254:	andeq	fp, r2, ip, ror r3
   2b258:	andeq	fp, r2, r8, ror r5
   2b25c:	andeq	fp, r2, r8, ror r5
   2b260:	andeq	fp, r2, r8, ror r5
   2b264:	andeq	fp, r2, r8, ror #7
   2b268:	andeq	fp, r2, r8, ror r5
   2b26c:	andeq	fp, r2, ip, lsr #8
   2b270:	mov	r1, #0
   2b274:	lsl	r3, r9, #9
   2b278:	lsl	r0, r8, #9
   2b27c:	lsr	r2, r9, #23
   2b280:	cmp	r1, r9, lsr #23
   2b284:	orr	r3, r3, r8, lsr #23
   2b288:	mvnne	r0, #0
   2b28c:	movwne	r2, #1
   2b290:	cmp	r1, r9, lsr #23
   2b294:	mvnne	r3, #0
   2b298:	mov	r8, r0
   2b29c:	mov	r9, r3
   2b2a0:	b	2b660 <__assert_fail@plt+0x18a70>
   2b2a4:	cmp	r0, #105	; 0x69
   2b2a8:	mov	r3, #0
   2b2ac:	bne	2b190 <__assert_fail@plt+0x185a0>
   2b2b0:	ldrb	r0, [r5, #2]
   2b2b4:	mov	r1, #1
   2b2b8:	cmp	r0, #66	; 0x42
   2b2bc:	movweq	r1, #3
   2b2c0:	str	r1, [sp, #8]
   2b2c4:	b	2b190 <__assert_fail@plt+0x185a0>
   2b2c8:	cmp	r7, #84	; 0x54
   2b2cc:	beq	2b498 <__assert_fail@plt+0x188a8>
   2b2d0:	cmp	r7, #89	; 0x59
   2b2d4:	bne	2b578 <__assert_fail@plt+0x18988>
   2b2d8:	mvn	r0, #0
   2b2dc:	mvn	r1, #0
   2b2e0:	mov	r2, r4
   2b2e4:	mov	r5, r3
   2b2e8:	bl	3cfc8 <__assert_fail@plt+0x2a3d8>
   2b2ec:	mov	ip, r5
   2b2f0:	mvn	lr, #0
   2b2f4:	mov	r2, #0
   2b2f8:	mvn	r3, #7
   2b2fc:	mov	r6, r8
   2b300:	mov	r5, r9
   2b304:	umull	r8, r7, r6, r4
   2b308:	mvn	r9, #0
   2b30c:	mla	r7, r6, ip, r7
   2b310:	subs	r6, r0, r6
   2b314:	sbcs	r6, r1, r5
   2b318:	mov	r6, #0
   2b31c:	movwcc	r6, #1
   2b320:	cmp	r6, #0
   2b324:	mlaeq	r9, r5, r4, r7
   2b328:	movne	r8, lr
   2b32c:	orrne	r2, r2, #1
   2b330:	adds	r3, r3, #1
   2b334:	mov	r6, r8
   2b338:	mov	r5, r9
   2b33c:	bcc	2b304 <__assert_fail@plt+0x18714>
   2b340:	b	2b660 <__assert_fail@plt+0x18a70>
   2b344:	cmp	r7, #116	; 0x74
   2b348:	beq	2b498 <__assert_fail@plt+0x188a8>
   2b34c:	cmp	r7, #119	; 0x77
   2b350:	bne	2b578 <__assert_fail@plt+0x18988>
   2b354:	lsl	r1, r9, #1
   2b358:	cmp	r9, #0
   2b35c:	lsl	r0, r8, #1
   2b360:	lsr	r2, r9, #31
   2b364:	orr	r1, r1, r8, lsr #31
   2b368:	mvnmi	r0, #0
   2b36c:	mvnmi	r1, #0
   2b370:	mov	r8, r0
   2b374:	mov	r9, r1
   2b378:	b	2b660 <__assert_fail@plt+0x18a70>
   2b37c:	mvn	r0, #0
   2b380:	mvn	r1, #0
   2b384:	mov	r2, r4
   2b388:	mov	r5, r3
   2b38c:	bl	3cfc8 <__assert_fail@plt+0x2a3d8>
   2b390:	mov	ip, r5
   2b394:	mvn	lr, #0
   2b398:	mov	r2, #0
   2b39c:	mvn	r3, #2
   2b3a0:	mov	r6, r8
   2b3a4:	mov	r5, r9
   2b3a8:	umull	r8, r7, r6, r4
   2b3ac:	mvn	r9, #0
   2b3b0:	mla	r7, r6, ip, r7
   2b3b4:	subs	r6, r0, r6
   2b3b8:	sbcs	r6, r1, r5
   2b3bc:	mov	r6, #0
   2b3c0:	movwcc	r6, #1
   2b3c4:	cmp	r6, #0
   2b3c8:	mlaeq	r9, r5, r4, r7
   2b3cc:	movne	r8, lr
   2b3d0:	orrne	r2, r2, #1
   2b3d4:	adds	r3, r3, #1
   2b3d8:	mov	r6, r8
   2b3dc:	mov	r5, r9
   2b3e0:	bcc	2b3a8 <__assert_fail@plt+0x187b8>
   2b3e4:	b	2b660 <__assert_fail@plt+0x18a70>
   2b3e8:	mvn	r0, #0
   2b3ec:	mvn	r1, #0
   2b3f0:	mov	r2, r4
   2b3f4:	mov	r5, r3
   2b3f8:	bl	3cfc8 <__assert_fail@plt+0x2a3d8>
   2b3fc:	subs	r0, r0, r8
   2b400:	mov	r2, #0
   2b404:	sbcs	r0, r1, r9
   2b408:	umull	r0, r1, r8, r4
   2b40c:	movwcc	r2, #1
   2b410:	cmp	r2, #0
   2b414:	mla	r1, r8, r5, r1
   2b418:	mvnne	r0, #0
   2b41c:	mla	r9, r9, r4, r1
   2b420:	mvnne	r9, #0
   2b424:	mov	r8, r0
   2b428:	b	2b660 <__assert_fail@plt+0x18a70>
   2b42c:	mvn	r0, #0
   2b430:	mvn	r1, #0
   2b434:	mov	r2, r4
   2b438:	mov	r5, r3
   2b43c:	bl	3cfc8 <__assert_fail@plt+0x2a3d8>
   2b440:	mov	ip, r5
   2b444:	mvn	lr, #0
   2b448:	mov	r2, #0
   2b44c:	mvn	r3, #1
   2b450:	mov	r6, r8
   2b454:	mov	r5, r9
   2b458:	umull	r8, r7, r6, r4
   2b45c:	mvn	r9, #0
   2b460:	mla	r7, r6, ip, r7
   2b464:	subs	r6, r0, r6
   2b468:	sbcs	r6, r1, r5
   2b46c:	mov	r6, #0
   2b470:	movwcc	r6, #1
   2b474:	cmp	r6, #0
   2b478:	mlaeq	r9, r5, r4, r7
   2b47c:	movne	r8, lr
   2b480:	orrne	r2, r2, #1
   2b484:	adds	r3, r3, #1
   2b488:	mov	r6, r8
   2b48c:	mov	r5, r9
   2b490:	bcc	2b458 <__assert_fail@plt+0x18868>
   2b494:	b	2b660 <__assert_fail@plt+0x18a70>
   2b498:	mvn	r0, #0
   2b49c:	mvn	r1, #0
   2b4a0:	mov	r2, r4
   2b4a4:	mov	r5, r3
   2b4a8:	bl	3cfc8 <__assert_fail@plt+0x2a3d8>
   2b4ac:	mov	ip, r5
   2b4b0:	mvn	lr, #0
   2b4b4:	mov	r2, #0
   2b4b8:	mvn	r3, #3
   2b4bc:	mov	r6, r8
   2b4c0:	mov	r5, r9
   2b4c4:	umull	r8, r7, r6, r4
   2b4c8:	mvn	r9, #0
   2b4cc:	mla	r7, r6, ip, r7
   2b4d0:	subs	r6, r0, r6
   2b4d4:	sbcs	r6, r1, r5
   2b4d8:	mov	r6, #0
   2b4dc:	movwcc	r6, #1
   2b4e0:	cmp	r6, #0
   2b4e4:	mlaeq	r9, r5, r4, r7
   2b4e8:	movne	r8, lr
   2b4ec:	orrne	r2, r2, #1
   2b4f0:	adds	r3, r3, #1
   2b4f4:	mov	r6, r8
   2b4f8:	mov	r5, r9
   2b4fc:	bcc	2b4c4 <__assert_fail@plt+0x188d4>
   2b500:	b	2b660 <__assert_fail@plt+0x18a70>
   2b504:	cmp	r7, #90	; 0x5a
   2b508:	bne	2b578 <__assert_fail@plt+0x18988>
   2b50c:	mvn	r0, #0
   2b510:	mvn	r1, #0
   2b514:	mov	r2, r4
   2b518:	mov	r5, r3
   2b51c:	bl	3cfc8 <__assert_fail@plt+0x2a3d8>
   2b520:	mov	ip, r5
   2b524:	mvn	lr, #0
   2b528:	mov	r2, #0
   2b52c:	mvn	r3, #6
   2b530:	mov	r6, r8
   2b534:	mov	r5, r9
   2b538:	umull	r8, r7, r6, r4
   2b53c:	mvn	r9, #0
   2b540:	mla	r7, r6, ip, r7
   2b544:	subs	r6, r0, r6
   2b548:	sbcs	r6, r1, r5
   2b54c:	mov	r6, #0
   2b550:	movwcc	r6, #1
   2b554:	cmp	r6, #0
   2b558:	mlaeq	r9, r5, r4, r7
   2b55c:	movne	r8, lr
   2b560:	orrne	r2, r2, #1
   2b564:	adds	r3, r3, #1
   2b568:	mov	r6, r8
   2b56c:	mov	r5, r9
   2b570:	bcc	2b538 <__assert_fail@plt+0x18948>
   2b574:	b	2b660 <__assert_fail@plt+0x18a70>
   2b578:	ldr	r0, [sp, #12]
   2b57c:	strd	r8, [r0]
   2b580:	ldr	r6, [sp, #4]
   2b584:	orr	r6, r6, #2
   2b588:	b	2b68c <__assert_fail@plt+0x18a9c>
   2b58c:	mvn	r0, #0
   2b590:	mvn	r1, #0
   2b594:	mov	r2, r4
   2b598:	mov	r5, r3
   2b59c:	bl	3cfc8 <__assert_fail@plt+0x2a3d8>
   2b5a0:	mov	ip, r5
   2b5a4:	mvn	lr, #0
   2b5a8:	mov	r2, #0
   2b5ac:	mvn	r3, #5
   2b5b0:	mov	r5, r8
   2b5b4:	mov	r7, r9
   2b5b8:	umull	r8, r6, r5, r4
   2b5bc:	mvn	r9, #0
   2b5c0:	mla	r6, r5, ip, r6
   2b5c4:	subs	r5, r0, r5
   2b5c8:	sbcs	r5, r1, r7
   2b5cc:	mov	r5, #0
   2b5d0:	movwcc	r5, #1
   2b5d4:	cmp	r5, #0
   2b5d8:	mlaeq	r9, r7, r4, r6
   2b5dc:	movne	r8, lr
   2b5e0:	orrne	r2, r2, #1
   2b5e4:	adds	r3, r3, #1
   2b5e8:	mov	r5, r8
   2b5ec:	mov	r7, r9
   2b5f0:	bcc	2b5b8 <__assert_fail@plt+0x189c8>
   2b5f4:	b	2b660 <__assert_fail@plt+0x18a70>
   2b5f8:	mvn	r0, #0
   2b5fc:	mvn	r1, #0
   2b600:	mov	r2, r4
   2b604:	mov	r5, r3
   2b608:	bl	3cfc8 <__assert_fail@plt+0x2a3d8>
   2b60c:	mov	ip, r5
   2b610:	mvn	lr, #0
   2b614:	mov	r2, #0
   2b618:	mvn	r3, #4
   2b61c:	mov	r6, r8
   2b620:	mov	r5, r9
   2b624:	umull	r8, r7, r6, r4
   2b628:	mvn	r9, #0
   2b62c:	mla	r7, r6, ip, r7
   2b630:	subs	r6, r0, r6
   2b634:	sbcs	r6, r1, r5
   2b638:	mov	r6, #0
   2b63c:	movwcc	r6, #1
   2b640:	cmp	r6, #0
   2b644:	mlaeq	r9, r5, r4, r7
   2b648:	movne	r8, lr
   2b64c:	orrne	r2, r2, #1
   2b650:	adds	r3, r3, #1
   2b654:	mov	r6, r8
   2b658:	mov	r5, r9
   2b65c:	bcc	2b624 <__assert_fail@plt+0x18a34>
   2b660:	ldr	r1, [sp]
   2b664:	ldr	r3, [sp, #8]
   2b668:	ldr	r6, [sp, #4]
   2b66c:	add	r0, r1, r3
   2b670:	orr	r6, r2, r6
   2b674:	str	r0, [sl]
   2b678:	ldrb	r0, [r1, r3]
   2b67c:	cmp	r0, #0
   2b680:	orrne	r6, r6, #2
   2b684:	ldr	r0, [sp, #12]
   2b688:	strd	r8, [r0]
   2b68c:	mov	r0, r6
   2b690:	sub	sp, fp, #28
   2b694:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2b698:	movw	r0, #12207	; 0x2faf
   2b69c:	movw	r1, #12245	; 0x2fd5
   2b6a0:	movw	r3, #12338	; 0x3032
   2b6a4:	mov	r2, #84	; 0x54
   2b6a8:	movt	r0, #4
   2b6ac:	movt	r1, #4
   2b6b0:	movt	r3, #4
   2b6b4:	bl	12bf0 <__assert_fail@plt>
   2b6b8:	push	{r4, sl, fp, lr}
   2b6bc:	add	fp, sp, #8
   2b6c0:	sub	sp, sp, #8
   2b6c4:	movw	r0, #17776	; 0x4570
   2b6c8:	mov	r4, #0
   2b6cc:	mov	r1, sp
   2b6d0:	movt	r0, #5
   2b6d4:	str	r4, [sp, #4]
   2b6d8:	str	r4, [sp]
   2b6dc:	ldr	r2, [r0]
   2b6e0:	add	r0, sp, #4
   2b6e4:	bl	12b3c <getline@plt>
   2b6e8:	cmp	r0, #1
   2b6ec:	blt	2b720 <__assert_fail@plt+0x18b30>
   2b6f0:	sub	r1, r0, #1
   2b6f4:	ldr	r0, [sp, #4]
   2b6f8:	ldrb	r2, [r0, r1]
   2b6fc:	cmp	r2, #10
   2b700:	bne	2b710 <__assert_fail@plt+0x18b20>
   2b704:	mov	r2, #0
   2b708:	strb	r2, [r0, r1]
   2b70c:	ldr	r0, [sp, #4]
   2b710:	bl	12a10 <rpmatch@plt>
   2b714:	cmp	r0, #0
   2b718:	mov	r4, #0
   2b71c:	movwgt	r4, #1
   2b720:	ldr	r0, [sp, #4]
   2b724:	bl	2bcbc <__assert_fail@plt+0x190cc>
   2b728:	mov	r0, r4
   2b72c:	sub	sp, fp, #8
   2b730:	pop	{r4, sl, fp, pc}
   2b734:	clz	r2, r1
   2b738:	clz	r3, r0
   2b73c:	lsr	r2, r2, #5
   2b740:	lsr	r3, r3, #5
   2b744:	orrs	r2, r3, r2
   2b748:	movwne	r1, #1
   2b74c:	movwne	r0, #1
   2b750:	cmp	r1, #0
   2b754:	beq	2b784 <__assert_fail@plt+0x18b94>
   2b758:	mvn	r2, #-2147483648	; 0x80000000
   2b75c:	udiv	r2, r2, r1
   2b760:	cmp	r2, r0
   2b764:	bcs	2b784 <__assert_fail@plt+0x18b94>
   2b768:	push	{fp, lr}
   2b76c:	mov	fp, sp
   2b770:	bl	12908 <__errno_location@plt>
   2b774:	mov	r1, #12
   2b778:	str	r1, [r0]
   2b77c:	mov	r0, #0
   2b780:	pop	{fp, pc}
   2b784:	b	1247c <calloc@plt>
   2b788:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2b78c:	add	fp, sp, #28
   2b790:	sub	sp, sp, #4
   2b794:	mov	r5, r0
   2b798:	bl	126e0 <chdir@plt>
   2b79c:	cmp	r0, #0
   2b7a0:	beq	2b974 <__assert_fail@plt+0x18d84>
   2b7a4:	mov	r6, r0
   2b7a8:	bl	12908 <__errno_location@plt>
   2b7ac:	mov	r9, r0
   2b7b0:	ldr	r0, [r0]
   2b7b4:	cmp	r0, #36	; 0x24
   2b7b8:	bne	2b978 <__assert_fail@plt+0x18d88>
   2b7bc:	mov	r0, r5
   2b7c0:	bl	128c0 <strlen@plt>
   2b7c4:	mov	r6, r0
   2b7c8:	mvn	r0, #99	; 0x63
   2b7cc:	cmp	r6, #0
   2b7d0:	str	r0, [sp]
   2b7d4:	beq	2b99c <__assert_fail@plt+0x18dac>
   2b7d8:	mov	r0, #0
   2b7dc:	cmp	r0, r6, lsr #12
   2b7e0:	beq	2b9b4 <__assert_fail@plt+0x18dc4>
   2b7e4:	movw	r1, #56638	; 0xdd3e
   2b7e8:	mov	r0, r5
   2b7ec:	movt	r1, #3
   2b7f0:	bl	12be4 <strspn@plt>
   2b7f4:	cmp	r0, #0
   2b7f8:	mov	r7, r5
   2b7fc:	beq	2b884 <__assert_fail@plt+0x18c94>
   2b800:	mov	r4, r0
   2b804:	cmp	r0, #2
   2b808:	bne	2b868 <__assert_fail@plt+0x18c78>
   2b80c:	add	r0, r5, #3
   2b810:	sub	r2, r6, #3
   2b814:	mov	r1, #47	; 0x2f
   2b818:	mov	r7, #47	; 0x2f
   2b81c:	bl	129b0 <memchr@plt>
   2b820:	cmp	r0, #0
   2b824:	beq	2b95c <__assert_fail@plt+0x18d6c>
   2b828:	mov	r4, r0
   2b82c:	mov	r0, #0
   2b830:	mov	r1, r5
   2b834:	strb	r0, [r4]
   2b838:	mov	r0, sp
   2b83c:	bl	2ba04 <__assert_fail@plt+0x18e14>
   2b840:	cmp	r0, #0
   2b844:	strb	r7, [r4]
   2b848:	bne	2b948 <__assert_fail@plt+0x18d58>
   2b84c:	movw	r1, #56638	; 0xdd3e
   2b850:	add	r4, r4, #1
   2b854:	movt	r1, #3
   2b858:	mov	r0, r4
   2b85c:	bl	12be4 <strspn@plt>
   2b860:	add	r7, r4, r0
   2b864:	b	2b884 <__assert_fail@plt+0x18c94>
   2b868:	movw	r1, #56638	; 0xdd3e
   2b86c:	mov	r0, sp
   2b870:	movt	r1, #3
   2b874:	bl	2ba04 <__assert_fail@plt+0x18e14>
   2b878:	cmp	r0, #0
   2b87c:	bne	2b948 <__assert_fail@plt+0x18d58>
   2b880:	add	r7, r5, r4
   2b884:	ldrb	r0, [r7]
   2b888:	cmp	r0, #47	; 0x2f
   2b88c:	beq	2b9cc <__assert_fail@plt+0x18ddc>
   2b890:	add	r5, r5, r6
   2b894:	cmp	r7, r5
   2b898:	bhi	2b9e4 <__assert_fail@plt+0x18df4>
   2b89c:	sub	r0, r5, r7
   2b8a0:	cmp	r0, #4096	; 0x1000
   2b8a4:	blt	2b91c <__assert_fail@plt+0x18d2c>
   2b8a8:	movw	r8, #56638	; 0xdd3e
   2b8ac:	mov	sl, sp
   2b8b0:	movt	r8, #3
   2b8b4:	mov	r0, r7
   2b8b8:	mov	r1, #47	; 0x2f
   2b8bc:	mov	r2, #4096	; 0x1000
   2b8c0:	bl	128f0 <memrchr@plt>
   2b8c4:	cmp	r0, #0
   2b8c8:	beq	2b95c <__assert_fail@plt+0x18d6c>
   2b8cc:	mov	r1, #0
   2b8d0:	mov	r6, r0
   2b8d4:	strb	r1, [r0], -r7
   2b8d8:	cmp	r0, #4096	; 0x1000
   2b8dc:	bge	2b984 <__assert_fail@plt+0x18d94>
   2b8e0:	mov	r0, sl
   2b8e4:	mov	r1, r7
   2b8e8:	bl	2ba04 <__assert_fail@plt+0x18e14>
   2b8ec:	mov	r1, #47	; 0x2f
   2b8f0:	cmp	r0, #0
   2b8f4:	strb	r1, [r6]
   2b8f8:	bne	2b948 <__assert_fail@plt+0x18d58>
   2b8fc:	add	r4, r6, #1
   2b900:	mov	r1, r8
   2b904:	mov	r0, r4
   2b908:	bl	12be4 <strspn@plt>
   2b90c:	add	r7, r4, r0
   2b910:	sub	r0, r5, r7
   2b914:	cmp	r0, #4096	; 0x1000
   2b918:	bge	2b8b4 <__assert_fail@plt+0x18cc4>
   2b91c:	cmp	r7, r5
   2b920:	bcs	2b938 <__assert_fail@plt+0x18d48>
   2b924:	mov	r0, sp
   2b928:	mov	r1, r7
   2b92c:	bl	2ba04 <__assert_fail@plt+0x18e14>
   2b930:	cmp	r0, #0
   2b934:	bne	2b948 <__assert_fail@plt+0x18d58>
   2b938:	ldr	r0, [sp]
   2b93c:	bl	12adc <fchdir@plt>
   2b940:	cmp	r0, #0
   2b944:	beq	2b96c <__assert_fail@plt+0x18d7c>
   2b948:	ldr	r4, [r9]
   2b94c:	mov	r0, sp
   2b950:	bl	2ba44 <__assert_fail@plt+0x18e54>
   2b954:	str	r4, [r9]
   2b958:	b	2b964 <__assert_fail@plt+0x18d74>
   2b95c:	mov	r0, #36	; 0x24
   2b960:	str	r0, [r9]
   2b964:	mvn	r6, #0
   2b968:	b	2b978 <__assert_fail@plt+0x18d88>
   2b96c:	mov	r0, sp
   2b970:	bl	2ba44 <__assert_fail@plt+0x18e54>
   2b974:	mov	r6, #0
   2b978:	mov	r0, r6
   2b97c:	sub	sp, fp, #28
   2b980:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2b984:	movw	r0, #12500	; 0x30d4
   2b988:	movw	r1, #12425	; 0x3089
   2b98c:	movw	r3, #12438	; 0x3096
   2b990:	mov	r2, #179	; 0xb3
   2b994:	movt	r0, #4
   2b998:	b	2b9f8 <__assert_fail@plt+0x18e08>
   2b99c:	movw	r0, #12417	; 0x3081
   2b9a0:	movw	r1, #12425	; 0x3089
   2b9a4:	movw	r3, #12438	; 0x3096
   2b9a8:	mov	r2, #126	; 0x7e
   2b9ac:	movt	r0, #4
   2b9b0:	b	2b9f8 <__assert_fail@plt+0x18e08>
   2b9b4:	movw	r0, #12461	; 0x30ad
   2b9b8:	movw	r1, #12425	; 0x3089
   2b9bc:	movw	r3, #12438	; 0x3096
   2b9c0:	mov	r2, #127	; 0x7f
   2b9c4:	movt	r0, #4
   2b9c8:	b	2b9f8 <__assert_fail@plt+0x18e08>
   2b9cc:	movw	r0, #12473	; 0x30b9
   2b9d0:	movw	r1, #12425	; 0x3089
   2b9d4:	movw	r3, #12438	; 0x3096
   2b9d8:	mov	r2, #162	; 0xa2
   2b9dc:	movt	r0, #4
   2b9e0:	b	2b9f8 <__assert_fail@plt+0x18e08>
   2b9e4:	movw	r0, #12485	; 0x30c5
   2b9e8:	movw	r1, #12425	; 0x3089
   2b9ec:	movw	r3, #12438	; 0x3096
   2b9f0:	mov	r2, #163	; 0xa3
   2b9f4:	movt	r0, #4
   2b9f8:	movt	r1, #4
   2b9fc:	movt	r3, #4
   2ba00:	bl	12bf0 <__assert_fail@plt>
   2ba04:	push	{r4, r5, fp, lr}
   2ba08:	add	fp, sp, #8
   2ba0c:	mov	r4, r0
   2ba10:	ldr	r0, [r0]
   2ba14:	mov	r2, #18688	; 0x4900
   2ba18:	bl	128e4 <openat64@plt>
   2ba1c:	cmp	r0, #0
   2ba20:	bmi	2ba3c <__assert_fail@plt+0x18e4c>
   2ba24:	mov	r5, r0
   2ba28:	mov	r0, r4
   2ba2c:	bl	2ba44 <__assert_fail@plt+0x18e54>
   2ba30:	mov	r0, #0
   2ba34:	str	r5, [r4]
   2ba38:	pop	{r4, r5, fp, pc}
   2ba3c:	mvn	r0, #0
   2ba40:	pop	{r4, r5, fp, pc}
   2ba44:	push	{fp, lr}
   2ba48:	mov	fp, sp
   2ba4c:	ldr	r0, [r0]
   2ba50:	cmp	r0, #0
   2ba54:	popmi	{fp, pc}
   2ba58:	bl	12ba8 <close@plt>
   2ba5c:	cmp	r0, #0
   2ba60:	bne	2ba68 <__assert_fail@plt+0x18e78>
   2ba64:	pop	{fp, pc}
   2ba68:	movw	r0, #12519	; 0x30e7
   2ba6c:	movw	r1, #12425	; 0x3089
   2ba70:	movw	r3, #12532	; 0x30f4
   2ba74:	mov	r2, #64	; 0x40
   2ba78:	movt	r0, #4
   2ba7c:	movt	r1, #4
   2ba80:	movt	r3, #4
   2ba84:	bl	12bf0 <__assert_fail@plt>
   2ba88:	sub	sp, sp, #8
   2ba8c:	push	{r4, r5, r6, r7, fp, lr}
   2ba90:	add	fp, sp, #16
   2ba94:	sub	sp, sp, #8
   2ba98:	mov	r5, r0
   2ba9c:	add	r0, fp, #8
   2baa0:	cmp	r1, #11
   2baa4:	str	r2, [fp, #8]
   2baa8:	str	r3, [fp, #12]
   2baac:	str	r0, [sp, #4]
   2bab0:	bhi	2baec <__assert_fail@plt+0x18efc>
   2bab4:	mov	r0, #1
   2bab8:	movw	r2, #1300	; 0x514
   2babc:	tst	r2, r0, lsl r1
   2bac0:	bne	2bba4 <__assert_fail@plt+0x18fb4>
   2bac4:	movw	r2, #2570	; 0xa0a
   2bac8:	tst	r2, r0, lsl r1
   2bacc:	bne	2bb14 <__assert_fail@plt+0x18f24>
   2bad0:	cmp	r1, #0
   2bad4:	bne	2baec <__assert_fail@plt+0x18efc>
   2bad8:	ldr	r0, [sp, #4]
   2badc:	add	r1, r0, #4
   2bae0:	str	r1, [sp, #4]
   2bae4:	mov	r1, #0
   2bae8:	b	2bbb0 <__assert_fail@plt+0x18fc0>
   2baec:	sub	r0, r1, #1024	; 0x400
   2baf0:	cmp	r0, #10
   2baf4:	bhi	2bba4 <__assert_fail@plt+0x18fb4>
   2baf8:	mov	r2, #1
   2bafc:	movw	r3, #645	; 0x285
   2bb00:	tst	r3, r2, lsl r0
   2bb04:	bne	2bba4 <__assert_fail@plt+0x18fb4>
   2bb08:	movw	r3, #1282	; 0x502
   2bb0c:	tst	r3, r2, lsl r0
   2bb10:	beq	2bb20 <__assert_fail@plt+0x18f30>
   2bb14:	mov	r0, r5
   2bb18:	bl	12a04 <fcntl64@plt>
   2bb1c:	b	2bbbc <__assert_fail@plt+0x18fcc>
   2bb20:	cmp	r0, #6
   2bb24:	bne	2bba4 <__assert_fail@plt+0x18fb4>
   2bb28:	ldr	r0, [sp, #4]
   2bb2c:	movw	r7, #20056	; 0x4e58
   2bb30:	movt	r7, #5
   2bb34:	add	r1, r0, #4
   2bb38:	str	r1, [sp, #4]
   2bb3c:	ldr	r6, [r0]
   2bb40:	ldr	r0, [r7]
   2bb44:	cmp	r0, #0
   2bb48:	bmi	2bbe0 <__assert_fail@plt+0x18ff0>
   2bb4c:	mov	r0, r5
   2bb50:	movw	r1, #1030	; 0x406
   2bb54:	mov	r2, r6
   2bb58:	bl	12a04 <fcntl64@plt>
   2bb5c:	mov	r4, r0
   2bb60:	cmn	r0, #1
   2bb64:	bgt	2bbd4 <__assert_fail@plt+0x18fe4>
   2bb68:	bl	12908 <__errno_location@plt>
   2bb6c:	ldr	r0, [r0]
   2bb70:	cmp	r0, #22
   2bb74:	bne	2bbd4 <__assert_fail@plt+0x18fe4>
   2bb78:	mov	r0, r5
   2bb7c:	mov	r1, #0
   2bb80:	mov	r2, r6
   2bb84:	bl	12a04 <fcntl64@plt>
   2bb88:	mov	r4, r0
   2bb8c:	cmp	r0, #0
   2bb90:	bmi	2bbc0 <__assert_fail@plt+0x18fd0>
   2bb94:	mvn	r0, #0
   2bb98:	str	r0, [r7]
   2bb9c:	mov	r0, #1
   2bba0:	b	2bc04 <__assert_fail@plt+0x19014>
   2bba4:	ldr	r0, [sp, #4]
   2bba8:	add	r2, r0, #4
   2bbac:	str	r2, [sp, #4]
   2bbb0:	ldr	r2, [r0]
   2bbb4:	mov	r0, r5
   2bbb8:	bl	12a04 <fcntl64@plt>
   2bbbc:	mov	r4, r0
   2bbc0:	mov	r0, r4
   2bbc4:	sub	sp, fp, #16
   2bbc8:	pop	{r4, r5, r6, r7, fp, lr}
   2bbcc:	add	sp, sp, #8
   2bbd0:	bx	lr
   2bbd4:	mov	r0, #1
   2bbd8:	str	r0, [r7]
   2bbdc:	b	2bbc0 <__assert_fail@plt+0x18fd0>
   2bbe0:	mov	r0, r5
   2bbe4:	mov	r1, #0
   2bbe8:	mov	r2, r6
   2bbec:	bl	12a04 <fcntl64@plt>
   2bbf0:	mov	r4, r0
   2bbf4:	ldr	r0, [r7]
   2bbf8:	add	r0, r0, #1
   2bbfc:	clz	r0, r0
   2bc00:	lsr	r0, r0, #5
   2bc04:	cmp	r0, #0
   2bc08:	beq	2bbc0 <__assert_fail@plt+0x18fd0>
   2bc0c:	cmp	r4, #0
   2bc10:	bmi	2bbc0 <__assert_fail@plt+0x18fd0>
   2bc14:	mov	r0, r4
   2bc18:	mov	r1, #1
   2bc1c:	bl	12a04 <fcntl64@plt>
   2bc20:	cmp	r0, #0
   2bc24:	bmi	2bc40 <__assert_fail@plt+0x19050>
   2bc28:	orr	r2, r0, #1
   2bc2c:	mov	r0, r4
   2bc30:	mov	r1, #2
   2bc34:	bl	12a04 <fcntl64@plt>
   2bc38:	cmn	r0, #1
   2bc3c:	bne	2bbc0 <__assert_fail@plt+0x18fd0>
   2bc40:	bl	12908 <__errno_location@plt>
   2bc44:	ldr	r6, [r0]
   2bc48:	mov	r5, r0
   2bc4c:	mov	r0, r4
   2bc50:	bl	12ba8 <close@plt>
   2bc54:	str	r6, [r5]
   2bc58:	mvn	r4, #0
   2bc5c:	b	2bbc0 <__assert_fail@plt+0x18fd0>
   2bc60:	push	{r4, sl, fp, lr}
   2bc64:	add	fp, sp, #8
   2bc68:	sub	sp, sp, #8
   2bc6c:	mov	r4, r0
   2bc70:	cmp	r0, #0
   2bc74:	beq	2bcac <__assert_fail@plt+0x190bc>
   2bc78:	mov	r0, r4
   2bc7c:	bl	1283c <__freading@plt>
   2bc80:	cmp	r0, #0
   2bc84:	beq	2bcac <__assert_fail@plt+0x190bc>
   2bc88:	ldrb	r0, [r4, #1]
   2bc8c:	tst	r0, #1
   2bc90:	beq	2bcac <__assert_fail@plt+0x190bc>
   2bc94:	mov	r0, #1
   2bc98:	mov	r2, #0
   2bc9c:	mov	r3, #0
   2bca0:	str	r0, [sp]
   2bca4:	mov	r0, r4
   2bca8:	bl	2bce4 <__assert_fail@plt+0x190f4>
   2bcac:	mov	r0, r4
   2bcb0:	sub	sp, fp, #8
   2bcb4:	pop	{r4, sl, fp, lr}
   2bcb8:	b	12554 <fflush@plt>
   2bcbc:	push	{r4, r5, r6, sl, fp, lr}
   2bcc0:	add	fp, sp, #16
   2bcc4:	mov	r4, r0
   2bcc8:	bl	12908 <__errno_location@plt>
   2bccc:	ldr	r6, [r0]
   2bcd0:	mov	r5, r0
   2bcd4:	mov	r0, r4
   2bcd8:	bl	12590 <free@plt>
   2bcdc:	str	r6, [r5]
   2bce0:	pop	{r4, r5, r6, sl, fp, pc}
   2bce4:	push	{r4, r5, r6, r7, fp, lr}
   2bce8:	add	fp, sp, #16
   2bcec:	sub	sp, sp, #8
   2bcf0:	mov	r4, r0
   2bcf4:	ldr	r0, [r0, #4]
   2bcf8:	mov	r5, r3
   2bcfc:	mov	r6, r2
   2bd00:	ldr	r1, [r4, #8]
   2bd04:	cmp	r1, r0
   2bd08:	bne	2bd24 <__assert_fail@plt+0x19134>
   2bd0c:	ldrd	r0, [r4, #16]
   2bd10:	cmp	r1, r0
   2bd14:	bne	2bd24 <__assert_fail@plt+0x19134>
   2bd18:	ldr	r0, [r4, #36]	; 0x24
   2bd1c:	cmp	r0, #0
   2bd20:	beq	2bd3c <__assert_fail@plt+0x1914c>
   2bd24:	mov	r0, r4
   2bd28:	mov	r2, r6
   2bd2c:	mov	r3, r5
   2bd30:	sub	sp, fp, #16
   2bd34:	pop	{r4, r5, r6, r7, fp, lr}
   2bd38:	b	129ec <fseeko64@plt>
   2bd3c:	ldr	r7, [fp, #8]
   2bd40:	mov	r0, r4
   2bd44:	bl	1298c <fileno@plt>
   2bd48:	mov	r2, r6
   2bd4c:	mov	r3, r5
   2bd50:	str	r7, [sp]
   2bd54:	bl	12740 <lseek64@plt>
   2bd58:	and	r2, r0, r1
   2bd5c:	cmn	r2, #1
   2bd60:	beq	2bd7c <__assert_fail@plt+0x1918c>
   2bd64:	strd	r0, [r4, #80]	; 0x50
   2bd68:	ldr	r0, [r4]
   2bd6c:	bic	r0, r0, #16
   2bd70:	str	r0, [r4]
   2bd74:	mov	r0, #0
   2bd78:	b	2bd80 <__assert_fail@plt+0x19190>
   2bd7c:	mvn	r0, #0
   2bd80:	sub	sp, fp, #16
   2bd84:	pop	{r4, r5, r6, r7, fp, pc}
   2bd88:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2bd8c:	add	fp, sp, #28
   2bd90:	sub	sp, sp, #12
   2bd94:	cmp	r1, #4096	; 0x1000
   2bd98:	bcs	2bdb4 <__assert_fail@plt+0x191c4>
   2bd9c:	mov	r6, r0
   2bda0:	and	r0, r1, #516	; 0x204
   2bda4:	mov	r5, r1
   2bda8:	cmp	r0, #516	; 0x204
   2bdac:	tstne	r5, #18
   2bdb0:	bne	2bdd0 <__assert_fail@plt+0x191e0>
   2bdb4:	bl	12908 <__errno_location@plt>
   2bdb8:	mov	r1, #22
   2bdbc:	str	r1, [r0]
   2bdc0:	mov	r8, #0
   2bdc4:	mov	r0, r8
   2bdc8:	sub	sp, fp, #28
   2bdcc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2bdd0:	mov	r0, #1
   2bdd4:	mov	r1, #96	; 0x60
   2bdd8:	mov	r9, r2
   2bddc:	bl	2b734 <__assert_fail@plt+0x18b44>
   2bde0:	cmp	r0, #0
   2bde4:	beq	2bdc0 <__assert_fail@plt+0x191d0>
   2bde8:	mov	r8, r0
   2bdec:	mvn	r0, #99	; 0x63
   2bdf0:	tst	r5, #2
   2bdf4:	mov	r1, r5
   2bdf8:	str	r0, [r8, #32]
   2bdfc:	bic	r0, r5, #516	; 0x204
   2be00:	str	r9, [r8, #44]	; 0x2c
   2be04:	orrne	r1, r0, #4
   2be08:	str	r1, [r8, #48]	; 0x30
   2be0c:	ldr	r0, [r6]
   2be10:	cmp	r0, #0
   2be14:	beq	2be48 <__assert_fail@plt+0x19258>
   2be18:	add	r4, r6, #4
   2be1c:	mov	r7, #0
   2be20:	bl	128c0 <strlen@plt>
   2be24:	cmp	r0, r7
   2be28:	movhi	r7, r0
   2be2c:	ldr	r0, [r4], #4
   2be30:	cmp	r0, #0
   2be34:	bne	2be20 <__assert_fail@plt+0x19230>
   2be38:	add	r1, r7, #1
   2be3c:	cmp	r1, #4096	; 0x1000
   2be40:	movls	r1, #4096	; 0x1000
   2be44:	b	2be4c <__assert_fail@plt+0x1925c>
   2be48:	mov	r1, #4096	; 0x1000
   2be4c:	mov	r0, r8
   2be50:	bl	2c0b0 <__assert_fail@plt+0x194c0>
   2be54:	cmp	r0, #0
   2be58:	beq	2c0a4 <__assert_fail@plt+0x194b4>
   2be5c:	ldr	r0, [r6]
   2be60:	cmp	r0, #0
   2be64:	beq	2be94 <__assert_fail@plt+0x192a4>
   2be68:	movw	r1, #61759	; 0xf13f
   2be6c:	mov	r0, r8
   2be70:	mov	r2, #0
   2be74:	movt	r1, #3
   2be78:	bl	2c124 <__assert_fail@plt+0x19534>
   2be7c:	cmp	r0, #0
   2be80:	beq	2c09c <__assert_fail@plt+0x194ac>
   2be84:	mov	r4, r0
   2be88:	mvn	r0, #0
   2be8c:	str	r0, [r4, #48]	; 0x30
   2be90:	b	2be98 <__assert_fail@plt+0x192a8>
   2be94:	mov	r4, #0
   2be98:	cmp	r9, #0
   2be9c:	beq	2beac <__assert_fail@plt+0x192bc>
   2bea0:	ldrb	r0, [r8, #49]	; 0x31
   2bea4:	ubfx	r0, r0, #2, #1
   2bea8:	b	2beb0 <__assert_fail@plt+0x192c0>
   2beac:	mov	r0, #1
   2beb0:	ldr	r7, [r6]
   2beb4:	cmp	r7, #0
   2beb8:	beq	2bfd8 <__assert_fail@plt+0x193e8>
   2bebc:	eor	r0, r0, #1
   2bec0:	and	r1, r5, #2048	; 0x800
   2bec4:	mov	sl, #0
   2bec8:	mov	r5, #0
   2becc:	str	r0, [sp, #4]
   2bed0:	mov	r0, #0
   2bed4:	str	r1, [sp, #8]
   2bed8:	str	r0, [sp]
   2bedc:	mov	r0, r7
   2bee0:	bl	128c0 <strlen@plt>
   2bee4:	mov	r2, r0
   2bee8:	ldr	r0, [sp, #8]
   2beec:	cmp	r0, #0
   2bef0:	bne	2bf28 <__assert_fail@plt+0x19338>
   2bef4:	cmp	r2, #3
   2bef8:	bcc	2bf28 <__assert_fail@plt+0x19338>
   2befc:	add	r0, r2, r7
   2bf00:	ldrb	r0, [r0, #-1]
   2bf04:	cmp	r0, #47	; 0x2f
   2bf08:	bne	2bf28 <__assert_fail@plt+0x19338>
   2bf0c:	sub	r0, r7, #2
   2bf10:	ldrb	r1, [r0, r2]
   2bf14:	cmp	r1, #47	; 0x2f
   2bf18:	bne	2bf28 <__assert_fail@plt+0x19338>
   2bf1c:	sub	r2, r2, #1
   2bf20:	cmp	r2, #1
   2bf24:	bhi	2bf10 <__assert_fail@plt+0x19320>
   2bf28:	mov	r0, r8
   2bf2c:	mov	r1, r7
   2bf30:	bl	2c124 <__assert_fail@plt+0x19534>
   2bf34:	cmp	r0, #0
   2bf38:	beq	2c08c <__assert_fail@plt+0x1949c>
   2bf3c:	mov	r1, #0
   2bf40:	ldr	r2, [sp, #4]
   2bf44:	str	r4, [r0, #4]
   2bf48:	mov	r7, r0
   2bf4c:	str	r1, [r0, #48]	; 0x30
   2bf50:	add	r0, r0, #168	; 0xa8
   2bf54:	str	r0, [r7, #24]
   2bf58:	clz	r0, sl
   2bf5c:	lsr	r0, r0, #5
   2bf60:	orrs	r0, r2, r0
   2bf64:	bne	2bf78 <__assert_fail@plt+0x19388>
   2bf68:	mov	r0, #2
   2bf6c:	strd	r0, [r7, #112]	; 0x70
   2bf70:	mov	r0, #11
   2bf74:	b	2bf8c <__assert_fail@plt+0x1939c>
   2bf78:	mov	r0, r8
   2bf7c:	mov	r1, r7
   2bf80:	mov	r2, #0
   2bf84:	bl	2c1a4 <__assert_fail@plt+0x195b4>
   2bf88:	mov	r1, #0
   2bf8c:	cmp	r9, #0
   2bf90:	strh	r0, [r7, #56]	; 0x38
   2bf94:	beq	2bfa4 <__assert_fail@plt+0x193b4>
   2bf98:	str	sl, [r7, #8]
   2bf9c:	mov	sl, r7
   2bfa0:	b	2bfbc <__assert_fail@plt+0x193cc>
   2bfa4:	cmp	sl, #0
   2bfa8:	str	r1, [r7, #8]
   2bfac:	beq	2bfd0 <__assert_fail@plt+0x193e0>
   2bfb0:	ldr	r0, [sp]
   2bfb4:	str	r7, [sp]
   2bfb8:	str	r7, [r0, #8]
   2bfbc:	ldr	r7, [r6, #4]!
   2bfc0:	add	r5, r5, #1
   2bfc4:	cmp	r7, #0
   2bfc8:	bne	2bedc <__assert_fail@plt+0x192ec>
   2bfcc:	b	2bfe0 <__assert_fail@plt+0x193f0>
   2bfd0:	str	r7, [sp]
   2bfd4:	b	2bf9c <__assert_fail@plt+0x193ac>
   2bfd8:	mov	sl, #0
   2bfdc:	b	2c004 <__assert_fail@plt+0x19414>
   2bfe0:	cmp	r9, #0
   2bfe4:	beq	2c004 <__assert_fail@plt+0x19414>
   2bfe8:	cmp	r5, #2
   2bfec:	bcc	2c004 <__assert_fail@plt+0x19414>
   2bff0:	mov	r0, r8
   2bff4:	mov	r1, sl
   2bff8:	mov	r2, r5
   2bffc:	bl	2c2e0 <__assert_fail@plt+0x196f0>
   2c000:	mov	sl, r0
   2c004:	movw	r1, #61759	; 0xf13f
   2c008:	mov	r0, r8
   2c00c:	mov	r2, #0
   2c010:	movt	r1, #3
   2c014:	bl	2c124 <__assert_fail@plt+0x19534>
   2c018:	cmp	r0, #0
   2c01c:	str	r0, [r8]
   2c020:	beq	2c08c <__assert_fail@plt+0x1949c>
   2c024:	mov	r1, #9
   2c028:	strh	r1, [r0, #56]	; 0x38
   2c02c:	mov	r1, #1
   2c030:	str	sl, [r0, #8]
   2c034:	str	r1, [r0, #48]	; 0x30
   2c038:	mov	r0, r8
   2c03c:	bl	2c3d4 <__assert_fail@plt+0x197e4>
   2c040:	cmp	r0, #0
   2c044:	beq	2c08c <__assert_fail@plt+0x1949c>
   2c048:	ldrh	r0, [r8, #48]	; 0x30
   2c04c:	tst	r0, #516	; 0x204
   2c050:	bne	2c07c <__assert_fail@plt+0x1948c>
   2c054:	movw	r1, #58388	; 0xe414
   2c058:	mov	r0, r8
   2c05c:	movt	r1, #3
   2c060:	bl	2c460 <__assert_fail@plt+0x19870>
   2c064:	cmn	r0, #1
   2c068:	str	r0, [r8, #28]
   2c06c:	bgt	2c07c <__assert_fail@plt+0x1948c>
   2c070:	ldr	r0, [r8, #48]	; 0x30
   2c074:	orr	r0, r0, #4
   2c078:	str	r0, [r8, #48]	; 0x30
   2c07c:	add	r0, r8, #60	; 0x3c
   2c080:	mvn	r1, #0
   2c084:	bl	3c740 <__assert_fail@plt+0x29b50>
   2c088:	b	2bdc4 <__assert_fail@plt+0x191d4>
   2c08c:	mov	r0, sl
   2c090:	bl	2c490 <__assert_fail@plt+0x198a0>
   2c094:	mov	r0, r4
   2c098:	bl	2bcbc <__assert_fail@plt+0x190cc>
   2c09c:	ldr	r0, [r8, #24]
   2c0a0:	bl	2bcbc <__assert_fail@plt+0x190cc>
   2c0a4:	mov	r0, r8
   2c0a8:	bl	2bcbc <__assert_fail@plt+0x190cc>
   2c0ac:	b	2bdc0 <__assert_fail@plt+0x191d0>
   2c0b0:	push	{r4, r5, fp, lr}
   2c0b4:	add	fp, sp, #8
   2c0b8:	mov	r4, r0
   2c0bc:	ldr	r0, [r0, #36]	; 0x24
   2c0c0:	add	r1, r1, #256	; 0x100
   2c0c4:	adds	r1, r1, r0
   2c0c8:	bcc	2c0ec <__assert_fail@plt+0x194fc>
   2c0cc:	ldr	r0, [r4, #24]
   2c0d0:	bl	2bcbc <__assert_fail@plt+0x190cc>
   2c0d4:	mov	r5, #0
   2c0d8:	str	r5, [r4, #24]
   2c0dc:	bl	12908 <__errno_location@plt>
   2c0e0:	mov	r1, #36	; 0x24
   2c0e4:	str	r1, [r0]
   2c0e8:	b	2c11c <__assert_fail@plt+0x1952c>
   2c0ec:	str	r1, [r4, #36]	; 0x24
   2c0f0:	ldr	r0, [r4, #24]
   2c0f4:	bl	2e984 <__assert_fail@plt+0x1bd94>
   2c0f8:	cmp	r0, #0
   2c0fc:	beq	2c10c <__assert_fail@plt+0x1951c>
   2c100:	mov	r5, #1
   2c104:	str	r0, [r4, #24]
   2c108:	b	2c11c <__assert_fail@plt+0x1952c>
   2c10c:	ldr	r0, [r4, #24]
   2c110:	bl	2bcbc <__assert_fail@plt+0x190cc>
   2c114:	mov	r5, #0
   2c118:	str	r5, [r4, #24]
   2c11c:	mov	r0, r5
   2c120:	pop	{r4, r5, fp, pc}
   2c124:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   2c128:	add	fp, sp, #24
   2c12c:	mov	r5, r0
   2c130:	add	r0, r2, #176	; 0xb0
   2c134:	mov	r6, r2
   2c138:	mov	r8, r1
   2c13c:	bic	r0, r0, #7
   2c140:	bl	2de8c <__assert_fail@plt+0x1b29c>
   2c144:	cmp	r0, #0
   2c148:	beq	2c198 <__assert_fail@plt+0x195a8>
   2c14c:	add	r7, r0, #168	; 0xa8
   2c150:	mov	r4, r0
   2c154:	mov	r1, r8
   2c158:	mov	r2, r6
   2c15c:	mov	r0, r7
   2c160:	bl	125f0 <memcpy@plt>
   2c164:	mov	r0, #0
   2c168:	mov	r2, #196608	; 0x30000
   2c16c:	strb	r0, [r7, r6]
   2c170:	str	r6, [r4, #52]	; 0x34
   2c174:	str	r5, [r4, #44]	; 0x2c
   2c178:	ldr	r1, [r5, #24]
   2c17c:	str	r0, [r4, #12]
   2c180:	str	r0, [r4, #16]
   2c184:	str	r0, [r4, #20]
   2c188:	str	r2, [r4, #58]	; 0x3a
   2c18c:	str	r1, [r4, #28]
   2c190:	str	r0, [r4, #32]
   2c194:	b	2c19c <__assert_fail@plt+0x195ac>
   2c198:	mov	r4, #0
   2c19c:	mov	r0, r4
   2c1a0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   2c1a4:	push	{r4, r5, r6, sl, fp, lr}
   2c1a8:	add	fp, sp, #16
   2c1ac:	mov	r4, r1
   2c1b0:	ldr	r1, [r0, #48]	; 0x30
   2c1b4:	ldr	r3, [r4, #48]	; 0x30
   2c1b8:	add	r5, r4, #64	; 0x40
   2c1bc:	cmp	r3, #0
   2c1c0:	andeq	r3, r1, #1
   2c1c4:	orreq	r2, r3, r2
   2c1c8:	cmp	r2, #0
   2c1cc:	andseq	r1, r1, #2
   2c1d0:	beq	2c220 <__assert_fail@plt+0x19630>
   2c1d4:	ldr	r0, [r4, #24]
   2c1d8:	mov	r1, r5
   2c1dc:	bl	3d1fc <__assert_fail@plt+0x2a60c>
   2c1e0:	cmp	r0, #0
   2c1e4:	beq	2c264 <__assert_fail@plt+0x19674>
   2c1e8:	bl	12908 <__errno_location@plt>
   2c1ec:	mov	r6, r0
   2c1f0:	ldr	r0, [r0]
   2c1f4:	cmp	r0, #2
   2c1f8:	bne	2c248 <__assert_fail@plt+0x19658>
   2c1fc:	ldr	r0, [r4, #24]
   2c200:	mov	r1, r5
   2c204:	bl	3d21c <__assert_fail@plt+0x2a62c>
   2c208:	cmp	r0, #0
   2c20c:	bne	2c244 <__assert_fail@plt+0x19654>
   2c210:	mov	r0, #0
   2c214:	str	r0, [r6]
   2c218:	mov	r0, #13
   2c21c:	pop	{r4, r5, r6, sl, fp, pc}
   2c220:	ldr	r1, [r4, #24]
   2c224:	ldr	r0, [r0, #32]
   2c228:	mov	r2, r5
   2c22c:	mov	r3, #256	; 0x100
   2c230:	bl	3d22c <__assert_fail@plt+0x2a63c>
   2c234:	cmp	r0, #0
   2c238:	beq	2c264 <__assert_fail@plt+0x19674>
   2c23c:	bl	12908 <__errno_location@plt>
   2c240:	mov	r6, r0
   2c244:	ldr	r0, [r6]
   2c248:	str	r0, [r4, #32]
   2c24c:	mov	r0, r5
   2c250:	mov	r1, #0
   2c254:	mov	r2, #104	; 0x68
   2c258:	bl	12938 <memset@plt>
   2c25c:	mov	r0, #10
   2c260:	pop	{r4, r5, r6, sl, fp, pc}
   2c264:	ldr	r0, [r4, #80]	; 0x50
   2c268:	and	r0, r0, #61440	; 0xf000
   2c26c:	cmp	r0, #40960	; 0xa000
   2c270:	beq	2c2c8 <__assert_fail@plt+0x196d8>
   2c274:	cmp	r0, #32768	; 0x8000
   2c278:	beq	2c2d0 <__assert_fail@plt+0x196e0>
   2c27c:	cmp	r0, #16384	; 0x4000
   2c280:	bne	2c2d8 <__assert_fail@plt+0x196e8>
   2c284:	ldrb	r1, [r4, #168]	; 0xa8
   2c288:	mov	r0, #1
   2c28c:	cmp	r1, #46	; 0x2e
   2c290:	bne	2c2dc <__assert_fail@plt+0x196ec>
   2c294:	ldrb	r1, [r4, #169]	; 0xa9
   2c298:	cmp	r1, #0
   2c29c:	beq	2c2b4 <__assert_fail@plt+0x196c4>
   2c2a0:	cmp	r1, #46	; 0x2e
   2c2a4:	bne	2c2dc <__assert_fail@plt+0x196ec>
   2c2a8:	ldrb	r1, [r4, #170]	; 0xaa
   2c2ac:	cmp	r1, #0
   2c2b0:	popne	{r4, r5, r6, sl, fp, pc}
   2c2b4:	ldr	r1, [r4, #48]	; 0x30
   2c2b8:	mov	r0, #5
   2c2bc:	cmp	r1, #0
   2c2c0:	movweq	r0, #1
   2c2c4:	pop	{r4, r5, r6, sl, fp, pc}
   2c2c8:	mov	r0, #12
   2c2cc:	pop	{r4, r5, r6, sl, fp, pc}
   2c2d0:	mov	r0, #8
   2c2d4:	pop	{r4, r5, r6, sl, fp, pc}
   2c2d8:	mov	r0, #3
   2c2dc:	pop	{r4, r5, r6, sl, fp, pc}
   2c2e0:	push	{r4, r5, r6, r7, fp, lr}
   2c2e4:	add	fp, sp, #16
   2c2e8:	mov	r6, r0
   2c2ec:	ldr	r7, [r0, #44]	; 0x2c
   2c2f0:	ldr	r0, [r0, #40]	; 0x28
   2c2f4:	mov	r5, r2
   2c2f8:	mov	r4, r1
   2c2fc:	cmp	r0, r2
   2c300:	bcs	2c330 <__assert_fail@plt+0x19740>
   2c304:	add	r1, r5, #40	; 0x28
   2c308:	cmn	r1, #-1073741823	; 0xc0000001
   2c30c:	str	r1, [r6, #40]	; 0x28
   2c310:	bhi	2c3a4 <__assert_fail@plt+0x197b4>
   2c314:	ldr	r0, [r6, #8]
   2c318:	lsl	r1, r1, #2
   2c31c:	bl	2e984 <__assert_fail@plt+0x1bd94>
   2c320:	cmp	r0, #0
   2c324:	beq	2c3a4 <__assert_fail@plt+0x197b4>
   2c328:	str	r0, [r6, #8]
   2c32c:	b	2c334 <__assert_fail@plt+0x19744>
   2c330:	ldr	r0, [r6, #8]
   2c334:	cmp	r4, #0
   2c338:	beq	2c350 <__assert_fail@plt+0x19760>
   2c33c:	str	r4, [r0], #4
   2c340:	ldr	r4, [r4, #8]
   2c344:	cmp	r4, #0
   2c348:	bne	2c33c <__assert_fail@plt+0x1974c>
   2c34c:	ldr	r0, [r6, #8]
   2c350:	mov	r1, r5
   2c354:	mov	r2, #4
   2c358:	mov	r3, r7
   2c35c:	bl	12af4 <qsort@plt>
   2c360:	ldr	r0, [r6, #8]
   2c364:	cmp	r5, #1
   2c368:	ldr	r4, [r0]
   2c36c:	mov	r1, r4
   2c370:	beq	2c3c4 <__assert_fail@plt+0x197d4>
   2c374:	ldr	r1, [r0, #4]!
   2c378:	str	r1, [r4, #8]
   2c37c:	subs	r1, r5, #2
   2c380:	beq	2c3bc <__assert_fail@plt+0x197cc>
   2c384:	mov	r2, r0
   2c388:	ldr	r3, [r2, #4]!
   2c38c:	ldr	r0, [r0]
   2c390:	subs	r1, r1, #1
   2c394:	str	r3, [r0, #8]
   2c398:	mov	r0, r2
   2c39c:	bne	2c388 <__assert_fail@plt+0x19798>
   2c3a0:	b	2c3c0 <__assert_fail@plt+0x197d0>
   2c3a4:	ldr	r0, [r6, #8]
   2c3a8:	bl	2bcbc <__assert_fail@plt+0x190cc>
   2c3ac:	mov	r0, #0
   2c3b0:	str	r0, [r6, #40]	; 0x28
   2c3b4:	str	r0, [r6, #8]
   2c3b8:	b	2c3cc <__assert_fail@plt+0x197dc>
   2c3bc:	mov	r2, r0
   2c3c0:	ldr	r1, [r2]
   2c3c4:	mov	r0, #0
   2c3c8:	str	r0, [r1, #8]
   2c3cc:	mov	r0, r4
   2c3d0:	pop	{r4, r5, r6, r7, fp, pc}
   2c3d4:	push	{r4, r5, fp, lr}
   2c3d8:	add	fp, sp, #8
   2c3dc:	sub	sp, sp, #8
   2c3e0:	mov	r4, r0
   2c3e4:	ldrh	r0, [r0, #48]	; 0x30
   2c3e8:	movw	r1, #258	; 0x102
   2c3ec:	tst	r0, r1
   2c3f0:	beq	2c430 <__assert_fail@plt+0x19840>
   2c3f4:	movw	r0, #48316	; 0xbcbc
   2c3f8:	movw	r2, #56264	; 0xdbc8
   2c3fc:	movw	r3, #56296	; 0xdbe8
   2c400:	mov	r1, #0
   2c404:	mov	r5, #0
   2c408:	movt	r0, #2
   2c40c:	movt	r2, #2
   2c410:	movt	r3, #2
   2c414:	str	r0, [sp]
   2c418:	mov	r0, #31
   2c41c:	bl	21bb4 <__assert_fail@plt+0xefc4>
   2c420:	cmp	r0, #0
   2c424:	str	r0, [r4, #56]	; 0x38
   2c428:	movne	r5, #1
   2c42c:	b	2c454 <__assert_fail@plt+0x19864>
   2c430:	mov	r0, #32
   2c434:	bl	2de8c <__assert_fail@plt+0x1b29c>
   2c438:	cmp	r0, #0
   2c43c:	str	r0, [r4, #56]	; 0x38
   2c440:	beq	2c450 <__assert_fail@plt+0x19860>
   2c444:	bl	3c508 <__assert_fail@plt+0x29918>
   2c448:	mov	r5, #1
   2c44c:	b	2c454 <__assert_fail@plt+0x19864>
   2c450:	mov	r5, #0
   2c454:	mov	r0, r5
   2c458:	sub	sp, fp, #8
   2c45c:	pop	{r4, r5, fp, pc}
   2c460:	ldr	r3, [r0, #48]	; 0x30
   2c464:	mov	r2, #32768	; 0x8000
   2c468:	and	r2, r2, r3, lsl #11
   2c46c:	tst	r3, #512	; 0x200
   2c470:	orr	r2, r2, #18688	; 0x4900
   2c474:	orr	r2, r2, #524288	; 0x80000
   2c478:	bne	2c488 <__assert_fail@plt+0x19898>
   2c47c:	mov	r0, r1
   2c480:	mov	r1, r2
   2c484:	b	214e8 <__assert_fail@plt+0xe8f8>
   2c488:	ldr	r0, [r0, #32]
   2c48c:	b	249f4 <__assert_fail@plt+0x11e04>
   2c490:	push	{r4, r6, r7, sl, fp, lr}
   2c494:	add	fp, sp, #16
   2c498:	cmp	r0, #0
   2c49c:	beq	2c4cc <__assert_fail@plt+0x198dc>
   2c4a0:	mov	r4, r0
   2c4a4:	ldrd	r6, [r4, #8]
   2c4a8:	cmp	r7, #0
   2c4ac:	beq	2c4b8 <__assert_fail@plt+0x198c8>
   2c4b0:	mov	r0, r7
   2c4b4:	bl	12bc0 <closedir@plt>
   2c4b8:	mov	r0, r4
   2c4bc:	bl	2bcbc <__assert_fail@plt+0x190cc>
   2c4c0:	cmp	r6, #0
   2c4c4:	mov	r4, r6
   2c4c8:	bne	2c4a4 <__assert_fail@plt+0x198b4>
   2c4cc:	pop	{r4, r6, r7, sl, fp, pc}
   2c4d0:	push	{r4, r5, fp, lr}
   2c4d4:	add	fp, sp, #8
   2c4d8:	mov	r4, r0
   2c4dc:	ldr	r0, [r0]
   2c4e0:	cmp	r0, #0
   2c4e4:	beq	2c524 <__assert_fail@plt+0x19934>
   2c4e8:	ldr	r1, [r0, #48]	; 0x30
   2c4ec:	cmp	r1, #0
   2c4f0:	bmi	2c518 <__assert_fail@plt+0x19928>
   2c4f4:	ldr	r5, [r0, #8]
   2c4f8:	cmp	r5, #0
   2c4fc:	ldreq	r5, [r0, #4]
   2c500:	bl	2bcbc <__assert_fail@plt+0x190cc>
   2c504:	ldr	r0, [r5, #48]	; 0x30
   2c508:	cmn	r0, #1
   2c50c:	mov	r0, r5
   2c510:	bgt	2c4f4 <__assert_fail@plt+0x19904>
   2c514:	b	2c51c <__assert_fail@plt+0x1992c>
   2c518:	mov	r5, r0
   2c51c:	mov	r0, r5
   2c520:	bl	2bcbc <__assert_fail@plt+0x190cc>
   2c524:	ldr	r0, [r4, #4]
   2c528:	cmp	r0, #0
   2c52c:	blne	2c490 <__assert_fail@plt+0x198a0>
   2c530:	ldr	r0, [r4, #8]
   2c534:	bl	2bcbc <__assert_fail@plt+0x190cc>
   2c538:	ldr	r0, [r4, #24]
   2c53c:	bl	2bcbc <__assert_fail@plt+0x190cc>
   2c540:	ldr	r0, [r4, #48]	; 0x30
   2c544:	tst	r0, #512	; 0x200
   2c548:	bne	2c574 <__assert_fail@plt+0x19984>
   2c54c:	mov	r5, #0
   2c550:	tst	r0, #4
   2c554:	bne	2c5b0 <__assert_fail@plt+0x199c0>
   2c558:	ldr	r0, [r4, #28]
   2c55c:	bl	12adc <fchdir@plt>
   2c560:	cmp	r0, #0
   2c564:	beq	2c58c <__assert_fail@plt+0x1999c>
   2c568:	bl	12908 <__errno_location@plt>
   2c56c:	ldr	r5, [r0]
   2c570:	b	2c590 <__assert_fail@plt+0x199a0>
   2c574:	ldr	r0, [r4, #32]
   2c578:	mov	r5, #0
   2c57c:	cmp	r0, #0
   2c580:	bmi	2c5b0 <__assert_fail@plt+0x199c0>
   2c584:	bl	12ba8 <close@plt>
   2c588:	b	2c5a0 <__assert_fail@plt+0x199b0>
   2c58c:	mov	r5, #0
   2c590:	ldr	r0, [r4, #28]
   2c594:	bl	12ba8 <close@plt>
   2c598:	cmp	r5, #0
   2c59c:	bne	2c5b0 <__assert_fail@plt+0x199c0>
   2c5a0:	cmp	r0, #0
   2c5a4:	beq	2c5b0 <__assert_fail@plt+0x199c0>
   2c5a8:	bl	12908 <__errno_location@plt>
   2c5ac:	ldr	r5, [r0]
   2c5b0:	add	r0, r4, #60	; 0x3c
   2c5b4:	bl	2c5f8 <__assert_fail@plt+0x19a08>
   2c5b8:	ldr	r0, [r4, #52]	; 0x34
   2c5bc:	cmp	r0, #0
   2c5c0:	beq	2c5c8 <__assert_fail@plt+0x199d8>
   2c5c4:	bl	21ee0 <__assert_fail@plt+0xf2f0>
   2c5c8:	mov	r0, r4
   2c5cc:	bl	2c630 <__assert_fail@plt+0x19a40>
   2c5d0:	mov	r0, r4
   2c5d4:	bl	2bcbc <__assert_fail@plt+0x190cc>
   2c5d8:	cmp	r5, #0
   2c5dc:	beq	2c5f0 <__assert_fail@plt+0x19a00>
   2c5e0:	bl	12908 <__errno_location@plt>
   2c5e4:	str	r5, [r0]
   2c5e8:	mvn	r0, #0
   2c5ec:	pop	{r4, r5, fp, pc}
   2c5f0:	mov	r0, #0
   2c5f4:	pop	{r4, r5, fp, pc}
   2c5f8:	push	{r4, sl, fp, lr}
   2c5fc:	add	fp, sp, #8
   2c600:	mov	r4, r0
   2c604:	bl	3c764 <__assert_fail@plt+0x29b74>
   2c608:	cmp	r0, #0
   2c60c:	bne	2c62c <__assert_fail@plt+0x19a3c>
   2c610:	mov	r0, r4
   2c614:	bl	3c7b8 <__assert_fail@plt+0x29bc8>
   2c618:	cmp	r0, #0
   2c61c:	bmi	2c624 <__assert_fail@plt+0x19a34>
   2c620:	bl	12ba8 <close@plt>
   2c624:	mov	r0, r4
   2c628:	b	2c604 <__assert_fail@plt+0x19a14>
   2c62c:	pop	{r4, sl, fp, pc}
   2c630:	ldrh	r1, [r0, #48]	; 0x30
   2c634:	movw	r2, #258	; 0x102
   2c638:	tst	r1, r2
   2c63c:	beq	2c650 <__assert_fail@plt+0x19a60>
   2c640:	ldr	r0, [r0, #56]	; 0x38
   2c644:	cmp	r0, #0
   2c648:	bxeq	lr
   2c64c:	b	21ee0 <__assert_fail@plt+0xf2f0>
   2c650:	ldr	r0, [r0, #56]	; 0x38
   2c654:	b	2bcbc <__assert_fail@plt+0x190cc>
   2c658:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   2c65c:	add	fp, sp, #24
   2c660:	ldr	r6, [r0]
   2c664:	mov	r5, #0
   2c668:	cmp	r6, #0
   2c66c:	beq	2cc5c <__assert_fail@plt+0x1a06c>
   2c670:	ldr	r1, [r0, #48]	; 0x30
   2c674:	mov	r4, r0
   2c678:	tst	r1, #8192	; 0x2000
   2c67c:	bne	2cc5c <__assert_fail@plt+0x1a06c>
   2c680:	ldrh	r0, [r6, #60]	; 0x3c
   2c684:	mov	r2, #3
   2c688:	strh	r2, [r6, #60]	; 0x3c
   2c68c:	cmp	r0, #1
   2c690:	beq	2c700 <__assert_fail@plt+0x19b10>
   2c694:	cmp	r0, #2
   2c698:	bne	2c718 <__assert_fail@plt+0x19b28>
   2c69c:	ldrh	r2, [r6, #56]	; 0x38
   2c6a0:	bic	r3, r2, #1
   2c6a4:	cmp	r3, #12
   2c6a8:	bne	2c71c <__assert_fail@plt+0x19b2c>
   2c6ac:	mov	r0, r4
   2c6b0:	mov	r1, r6
   2c6b4:	mov	r2, #1
   2c6b8:	bl	2c1a4 <__assert_fail@plt+0x195b4>
   2c6bc:	cmp	r0, #1
   2c6c0:	strh	r0, [r6, #56]	; 0x38
   2c6c4:	bne	2cab0 <__assert_fail@plt+0x19ec0>
   2c6c8:	ldrb	r0, [r4, #48]	; 0x30
   2c6cc:	tst	r0, #4
   2c6d0:	bne	2cab0 <__assert_fail@plt+0x19ec0>
   2c6d4:	movw	r1, #58388	; 0xe414
   2c6d8:	mov	r0, r4
   2c6dc:	movt	r1, #3
   2c6e0:	bl	2c460 <__assert_fail@plt+0x19870>
   2c6e4:	cmn	r0, #1
   2c6e8:	str	r0, [r6, #36]	; 0x24
   2c6ec:	ble	2ca9c <__assert_fail@plt+0x19eac>
   2c6f0:	ldrh	r0, [r6, #58]	; 0x3a
   2c6f4:	orr	r0, r0, #2
   2c6f8:	strh	r0, [r6, #58]	; 0x3a
   2c6fc:	b	2cab0 <__assert_fail@plt+0x19ec0>
   2c700:	mov	r0, r4
   2c704:	mov	r1, r6
   2c708:	mov	r2, #0
   2c70c:	bl	2c1a4 <__assert_fail@plt+0x195b4>
   2c710:	strh	r0, [r6, #56]	; 0x38
   2c714:	b	2c76c <__assert_fail@plt+0x19b7c>
   2c718:	ldrh	r2, [r6, #56]	; 0x38
   2c71c:	cmp	r2, #1
   2c720:	bne	2c774 <__assert_fail@plt+0x19b84>
   2c724:	cmp	r0, #4
   2c728:	bne	2c804 <__assert_fail@plt+0x19c14>
   2c72c:	ldrb	r0, [r6, #58]	; 0x3a
   2c730:	tst	r0, #2
   2c734:	beq	2c740 <__assert_fail@plt+0x19b50>
   2c738:	ldr	r0, [r6, #36]	; 0x24
   2c73c:	bl	12ba8 <close@plt>
   2c740:	ldr	r0, [r4, #4]
   2c744:	cmp	r0, #0
   2c748:	beq	2c758 <__assert_fail@plt+0x19b68>
   2c74c:	bl	2c490 <__assert_fail@plt+0x198a0>
   2c750:	mov	r0, #0
   2c754:	str	r0, [r4, #4]
   2c758:	mov	r0, #6
   2c75c:	strh	r0, [r6, #56]	; 0x38
   2c760:	mov	r0, r4
   2c764:	mov	r1, r6
   2c768:	bl	2cc68 <__assert_fail@plt+0x1a078>
   2c76c:	mov	r5, r6
   2c770:	b	2cc5c <__assert_fail@plt+0x1a06c>
   2c774:	ldr	r5, [r6, #8]
   2c778:	cmp	r5, #0
   2c77c:	beq	2c89c <__assert_fail@plt+0x19cac>
   2c780:	mov	r0, r6
   2c784:	str	r5, [r4]
   2c788:	bl	2bcbc <__assert_fail@plt+0x190cc>
   2c78c:	ldr	r0, [r5, #48]	; 0x30
   2c790:	cmp	r0, #0
   2c794:	beq	2c8e8 <__assert_fail@plt+0x19cf8>
   2c798:	ldrh	r0, [r5, #60]	; 0x3c
   2c79c:	mov	r6, r5
   2c7a0:	cmp	r0, #4
   2c7a4:	beq	2c774 <__assert_fail@plt+0x19b84>
   2c7a8:	cmp	r0, #2
   2c7ac:	bne	2cb44 <__assert_fail@plt+0x19f54>
   2c7b0:	mov	r0, r4
   2c7b4:	mov	r1, r5
   2c7b8:	mov	r2, #1
   2c7bc:	bl	2c1a4 <__assert_fail@plt+0x195b4>
   2c7c0:	cmp	r0, #1
   2c7c4:	strh	r0, [r5, #56]	; 0x38
   2c7c8:	bne	2cb3c <__assert_fail@plt+0x19f4c>
   2c7cc:	ldrb	r0, [r4, #48]	; 0x30
   2c7d0:	tst	r0, #4
   2c7d4:	bne	2cb3c <__assert_fail@plt+0x19f4c>
   2c7d8:	movw	r1, #58388	; 0xe414
   2c7dc:	mov	r0, r4
   2c7e0:	movt	r1, #3
   2c7e4:	bl	2c460 <__assert_fail@plt+0x19870>
   2c7e8:	cmn	r0, #1
   2c7ec:	str	r0, [r5, #36]	; 0x24
   2c7f0:	ble	2cb28 <__assert_fail@plt+0x19f38>
   2c7f4:	ldrh	r0, [r5, #58]	; 0x3a
   2c7f8:	orr	r0, r0, #2
   2c7fc:	strh	r0, [r5, #58]	; 0x3a
   2c800:	b	2cb3c <__assert_fail@plt+0x19f4c>
   2c804:	tst	r1, #64	; 0x40
   2c808:	beq	2c82c <__assert_fail@plt+0x19c3c>
   2c80c:	ldr	r0, [r4, #16]
   2c810:	ldr	r2, [r6, #64]	; 0x40
   2c814:	ldr	r3, [r4, #20]
   2c818:	ldr	r5, [r6, #68]	; 0x44
   2c81c:	eor	r3, r5, r3
   2c820:	eor	r0, r2, r0
   2c824:	orrs	r0, r0, r3
   2c828:	bne	2c72c <__assert_fail@plt+0x19b3c>
   2c82c:	ldr	r0, [r4, #4]
   2c830:	cmp	r0, #0
   2c834:	beq	2c9a8 <__assert_fail@plt+0x19db8>
   2c838:	tst	r1, #4096	; 0x1000
   2c83c:	bne	2c994 <__assert_fail@plt+0x19da4>
   2c840:	ldr	r3, [r6, #24]
   2c844:	mov	r0, r4
   2c848:	mov	r1, r6
   2c84c:	mvn	r2, #0
   2c850:	bl	2cd40 <__assert_fail@plt+0x1a150>
   2c854:	cmp	r0, #0
   2c858:	beq	2c9c0 <__assert_fail@plt+0x19dd0>
   2c85c:	bl	12908 <__errno_location@plt>
   2c860:	ldr	r0, [r0]
   2c864:	str	r0, [r6, #32]
   2c868:	ldrh	r0, [r6, #58]	; 0x3a
   2c86c:	orr	r0, r0, #1
   2c870:	strh	r0, [r6, #58]	; 0x3a
   2c874:	ldr	r0, [r4, #4]
   2c878:	cmp	r0, #0
   2c87c:	beq	2c9c0 <__assert_fail@plt+0x19dd0>
   2c880:	ldmib	r0, {r1, r2}
   2c884:	cmp	r2, #0
   2c888:	ldr	r1, [r1, #24]
   2c88c:	str	r1, [r0, #24]
   2c890:	mov	r0, r2
   2c894:	bne	2c880 <__assert_fail@plt+0x19c90>
   2c898:	b	2c9c0 <__assert_fail@plt+0x19dd0>
   2c89c:	ldr	r5, [r6, #4]
   2c8a0:	ldr	r0, [r5, #12]
   2c8a4:	cmp	r0, #0
   2c8a8:	beq	2ca10 <__assert_fail@plt+0x19e20>
   2c8ac:	str	r5, [r4]
   2c8b0:	ldr	r1, [r5, #40]	; 0x28
   2c8b4:	ldr	r0, [r4, #24]
   2c8b8:	mov	r5, #0
   2c8bc:	strb	r5, [r0, r1]
   2c8c0:	mov	r0, r4
   2c8c4:	mov	r1, #3
   2c8c8:	bl	2cf20 <__assert_fail@plt+0x1a330>
   2c8cc:	cmp	r0, #0
   2c8d0:	beq	2ca00 <__assert_fail@plt+0x19e10>
   2c8d4:	mov	r7, r0
   2c8d8:	mov	r0, r6
   2c8dc:	bl	2bcbc <__assert_fail@plt+0x190cc>
   2c8e0:	mov	r5, r7
   2c8e4:	b	2cb44 <__assert_fail@plt+0x19f54>
   2c8e8:	mov	r0, r4
   2c8ec:	bl	2d8b0 <__assert_fail@plt+0x1acc0>
   2c8f0:	cmp	r0, #0
   2c8f4:	beq	2c90c <__assert_fail@plt+0x19d1c>
   2c8f8:	ldr	r0, [r4, #48]	; 0x30
   2c8fc:	mov	r5, #0
   2c900:	orr	r0, r0, #8192	; 0x2000
   2c904:	str	r0, [r4, #48]	; 0x30
   2c908:	b	2cc5c <__assert_fail@plt+0x1a06c>
   2c90c:	mov	r0, r4
   2c910:	bl	2c630 <__assert_fail@plt+0x19a40>
   2c914:	ldr	r1, [r5, #52]	; 0x34
   2c918:	add	r6, r5, #168	; 0xa8
   2c91c:	str	r1, [r5, #40]	; 0x28
   2c920:	add	r2, r1, #1
   2c924:	mov	r1, r6
   2c928:	ldr	r0, [r4, #24]
   2c92c:	bl	12584 <memmove@plt>
   2c930:	mov	r0, r6
   2c934:	mov	r1, #47	; 0x2f
   2c938:	bl	12a4c <strrchr@plt>
   2c93c:	cmp	r0, #0
   2c940:	beq	2c97c <__assert_fail@plt+0x19d8c>
   2c944:	cmp	r0, r6
   2c948:	bne	2c958 <__assert_fail@plt+0x19d68>
   2c94c:	ldrb	r1, [r5, #169]	; 0xa9
   2c950:	cmp	r1, #0
   2c954:	beq	2c97c <__assert_fail@plt+0x19d8c>
   2c958:	add	r7, r0, #1
   2c95c:	mov	r0, r7
   2c960:	bl	128c0 <strlen@plt>
   2c964:	mov	r8, r0
   2c968:	add	r2, r0, #1
   2c96c:	mov	r0, r6
   2c970:	mov	r1, r7
   2c974:	bl	12584 <memmove@plt>
   2c978:	str	r8, [r5, #52]	; 0x34
   2c97c:	ldr	r0, [r4, #24]
   2c980:	str	r0, [r5, #24]
   2c984:	str	r0, [r5, #28]
   2c988:	mov	r0, r4
   2c98c:	bl	2c3d4 <__assert_fail@plt+0x197e4>
   2c990:	b	2cb80 <__assert_fail@plt+0x19f90>
   2c994:	bic	r1, r1, #4096	; 0x1000
   2c998:	str	r1, [r4, #48]	; 0x30
   2c99c:	bl	2c490 <__assert_fail@plt+0x198a0>
   2c9a0:	mov	r0, #0
   2c9a4:	str	r0, [r4, #4]
   2c9a8:	mov	r0, r4
   2c9ac:	mov	r1, #3
   2c9b0:	bl	2cf20 <__assert_fail@plt+0x1a330>
   2c9b4:	cmp	r0, #0
   2c9b8:	str	r0, [r4, #4]
   2c9bc:	beq	2c9d0 <__assert_fail@plt+0x19de0>
   2c9c0:	ldr	r5, [r4, #4]
   2c9c4:	mov	r0, #0
   2c9c8:	str	r0, [r4, #4]
   2c9cc:	b	2cb44 <__assert_fail@plt+0x19f54>
   2c9d0:	ldrb	r0, [r4, #49]	; 0x31
   2c9d4:	mov	r5, #0
   2c9d8:	tst	r0, #32
   2c9dc:	bne	2cc5c <__assert_fail@plt+0x1a06c>
   2c9e0:	ldr	r0, [r6, #32]
   2c9e4:	cmp	r0, #0
   2c9e8:	beq	2c760 <__assert_fail@plt+0x19b70>
   2c9ec:	ldrh	r0, [r6, #56]	; 0x38
   2c9f0:	cmp	r0, #4
   2c9f4:	beq	2c760 <__assert_fail@plt+0x19b70>
   2c9f8:	mov	r0, #7
   2c9fc:	b	2c75c <__assert_fail@plt+0x19b6c>
   2ca00:	ldrb	r0, [r4, #49]	; 0x31
   2ca04:	tst	r0, #32
   2ca08:	bne	2cc5c <__assert_fail@plt+0x1a06c>
   2ca0c:	ldr	r5, [r6, #4]
   2ca10:	mov	r0, r6
   2ca14:	str	r5, [r4]
   2ca18:	bl	2bcbc <__assert_fail@plt+0x190cc>
   2ca1c:	ldr	r0, [r5, #48]	; 0x30
   2ca20:	cmn	r0, #1
   2ca24:	beq	2ca80 <__assert_fail@plt+0x19e90>
   2ca28:	ldrh	r0, [r5, #56]	; 0x38
   2ca2c:	cmp	r0, #11
   2ca30:	beq	2cc64 <__assert_fail@plt+0x1a074>
   2ca34:	ldr	r0, [r5, #40]	; 0x28
   2ca38:	ldr	r1, [r4, #24]
   2ca3c:	mov	r2, #0
   2ca40:	strb	r2, [r1, r0]
   2ca44:	ldr	r0, [r5, #48]	; 0x30
   2ca48:	cmp	r0, #0
   2ca4c:	beq	2cab8 <__assert_fail@plt+0x19ec8>
   2ca50:	ldrh	r0, [r5, #58]	; 0x3a
   2ca54:	tst	r0, #2
   2ca58:	bne	2cae4 <__assert_fail@plt+0x19ef4>
   2ca5c:	tst	r0, #1
   2ca60:	bne	2cc20 <__assert_fail@plt+0x1a030>
   2ca64:	ldr	r1, [r5, #4]
   2ca68:	movw	r3, #12569	; 0x3119
   2ca6c:	mov	r0, r4
   2ca70:	mvn	r2, #0
   2ca74:	movt	r3, #4
   2ca78:	bl	2cd40 <__assert_fail@plt+0x1a150>
   2ca7c:	b	2cac0 <__assert_fail@plt+0x19ed0>
   2ca80:	mov	r0, r5
   2ca84:	bl	2bcbc <__assert_fail@plt+0x190cc>
   2ca88:	bl	12908 <__errno_location@plt>
   2ca8c:	mov	r5, #0
   2ca90:	str	r5, [r0]
   2ca94:	str	r5, [r4]
   2ca98:	b	2cc5c <__assert_fail@plt+0x1a06c>
   2ca9c:	bl	12908 <__errno_location@plt>
   2caa0:	ldr	r0, [r0]
   2caa4:	mov	r1, #7
   2caa8:	strh	r1, [r6, #56]	; 0x38
   2caac:	str	r0, [r6, #32]
   2cab0:	mov	r5, r6
   2cab4:	b	2cb80 <__assert_fail@plt+0x19f90>
   2cab8:	mov	r0, r4
   2cabc:	bl	2d8b0 <__assert_fail@plt+0x1acc0>
   2cac0:	cmp	r0, #0
   2cac4:	beq	2cc20 <__assert_fail@plt+0x1a030>
   2cac8:	bl	12908 <__errno_location@plt>
   2cacc:	ldr	r0, [r0]
   2cad0:	str	r0, [r5, #32]
   2cad4:	ldr	r0, [r4, #48]	; 0x30
   2cad8:	orr	r0, r0, #8192	; 0x2000
   2cadc:	str	r0, [r4, #48]	; 0x30
   2cae0:	b	2cc20 <__assert_fail@plt+0x1a030>
   2cae4:	ldr	r0, [r4, #48]	; 0x30
   2cae8:	tst	r0, #4
   2caec:	bne	2cc18 <__assert_fail@plt+0x1a028>
   2caf0:	ldr	r1, [r5, #36]	; 0x24
   2caf4:	tst	r0, #512	; 0x200
   2caf8:	bne	2cc0c <__assert_fail@plt+0x1a01c>
   2cafc:	mov	r0, r1
   2cb00:	bl	12adc <fchdir@plt>
   2cb04:	cmp	r0, #0
   2cb08:	beq	2cc18 <__assert_fail@plt+0x1a028>
   2cb0c:	bl	12908 <__errno_location@plt>
   2cb10:	ldr	r0, [r0]
   2cb14:	str	r0, [r5, #32]
   2cb18:	ldr	r0, [r4, #48]	; 0x30
   2cb1c:	orr	r0, r0, #8192	; 0x2000
   2cb20:	str	r0, [r4, #48]	; 0x30
   2cb24:	b	2cc18 <__assert_fail@plt+0x1a028>
   2cb28:	bl	12908 <__errno_location@plt>
   2cb2c:	ldr	r0, [r0]
   2cb30:	mov	r1, #7
   2cb34:	strh	r1, [r5, #56]	; 0x38
   2cb38:	str	r0, [r5, #32]
   2cb3c:	mov	r0, #3
   2cb40:	strh	r0, [r5, #60]	; 0x3c
   2cb44:	ldr	r0, [r5, #4]
   2cb48:	ldr	r1, [r0, #28]
   2cb4c:	ldr	r0, [r0, #40]	; 0x28
   2cb50:	sub	r2, r0, #1
   2cb54:	ldrb	r1, [r1, r2]
   2cb58:	cmp	r1, #47	; 0x2f
   2cb5c:	ldr	r1, [r4, #24]
   2cb60:	moveq	r0, r2
   2cb64:	mov	r2, #47	; 0x2f
   2cb68:	strb	r2, [r1, r0]!
   2cb6c:	ldr	r2, [r5, #52]	; 0x34
   2cb70:	add	r0, r1, #1
   2cb74:	add	r1, r5, #168	; 0xa8
   2cb78:	add	r2, r2, #1
   2cb7c:	bl	12584 <memmove@plt>
   2cb80:	str	r5, [r4]
   2cb84:	ldrh	r0, [r5, #56]	; 0x38
   2cb88:	cmp	r0, #11
   2cb8c:	bne	2cbc4 <__assert_fail@plt+0x19fd4>
   2cb90:	add	r0, r5, #112	; 0x70
   2cb94:	ldrd	r0, [r0]
   2cb98:	eor	r2, r0, #1
   2cb9c:	orrs	r2, r2, r1
   2cba0:	beq	2cc5c <__assert_fail@plt+0x1a06c>
   2cba4:	eor	r0, r0, #2
   2cba8:	orrs	r0, r0, r1
   2cbac:	bne	2cc64 <__assert_fail@plt+0x1a074>
   2cbb0:	mov	r0, r4
   2cbb4:	mov	r1, r5
   2cbb8:	mov	r2, #0
   2cbbc:	bl	2c1a4 <__assert_fail@plt+0x195b4>
   2cbc0:	strh	r0, [r5, #56]	; 0x38
   2cbc4:	cmp	r0, #1
   2cbc8:	bne	2cc5c <__assert_fail@plt+0x1a06c>
   2cbcc:	ldr	r0, [r5, #48]	; 0x30
   2cbd0:	cmp	r0, #0
   2cbd4:	bne	2cbe4 <__assert_fail@plt+0x19ff4>
   2cbd8:	add	r0, r5, #64	; 0x40
   2cbdc:	ldrd	r0, [r0]
   2cbe0:	strd	r0, [r4, #16]
   2cbe4:	mov	r0, r4
   2cbe8:	mov	r1, r5
   2cbec:	bl	2d90c <__assert_fail@plt+0x1ad1c>
   2cbf0:	cmp	r0, #0
   2cbf4:	bne	2cc5c <__assert_fail@plt+0x1a06c>
   2cbf8:	bl	12908 <__errno_location@plt>
   2cbfc:	mov	r1, #12
   2cc00:	mov	r5, #0
   2cc04:	str	r1, [r0]
   2cc08:	b	2cc5c <__assert_fail@plt+0x1a06c>
   2cc0c:	mov	r0, r4
   2cc10:	mov	r2, #1
   2cc14:	bl	2d9c8 <__assert_fail@plt+0x1add8>
   2cc18:	ldr	r0, [r5, #36]	; 0x24
   2cc1c:	bl	12ba8 <close@plt>
   2cc20:	ldrh	r0, [r5, #56]	; 0x38
   2cc24:	cmp	r0, #2
   2cc28:	beq	2cc50 <__assert_fail@plt+0x1a060>
   2cc2c:	ldr	r0, [r5, #32]
   2cc30:	mov	r1, #7
   2cc34:	cmp	r0, #0
   2cc38:	movweq	r1, #6
   2cc3c:	strh	r1, [r5, #56]	; 0x38
   2cc40:	bne	2cc50 <__assert_fail@plt+0x1a060>
   2cc44:	mov	r0, r4
   2cc48:	mov	r1, r5
   2cc4c:	bl	2cc68 <__assert_fail@plt+0x1a078>
   2cc50:	ldrb	r0, [r4, #49]	; 0x31
   2cc54:	tst	r0, #32
   2cc58:	movne	r5, #0
   2cc5c:	mov	r0, r5
   2cc60:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   2cc64:	bl	12b9c <abort@plt>
   2cc68:	push	{r4, r5, r7, sl, fp, lr}
   2cc6c:	add	fp, sp, #16
   2cc70:	sub	sp, sp, #24
   2cc74:	ldrh	r2, [r0, #48]	; 0x30
   2cc78:	movw	r3, #258	; 0x102
   2cc7c:	add	lr, r1, #64	; 0x40
   2cc80:	add	r4, r1, #160	; 0xa0
   2cc84:	tst	r2, r3
   2cc88:	beq	2ccc0 <__assert_fail@plt+0x1a0d0>
   2cc8c:	ldrd	r2, [lr]
   2cc90:	mov	r1, sp
   2cc94:	stm	sp, {r2, r3}
   2cc98:	ldrd	r2, [r4]
   2cc9c:	str	r3, [sp, #12]
   2cca0:	str	r2, [sp, #8]
   2cca4:	ldr	r0, [r0, #56]	; 0x38
   2cca8:	bl	22570 <__assert_fail@plt+0xf980>
   2ccac:	cmp	r0, #0
   2ccb0:	beq	2cd3c <__assert_fail@plt+0x1a14c>
   2ccb4:	bl	2bcbc <__assert_fail@plt+0x190cc>
   2ccb8:	sub	sp, fp, #16
   2ccbc:	pop	{r4, r5, r7, sl, fp, pc}
   2ccc0:	ldr	r1, [r1, #4]
   2ccc4:	cmp	r1, #0
   2ccc8:	beq	2ccb8 <__assert_fail@plt+0x1a0c8>
   2cccc:	ldr	r2, [r1, #48]	; 0x30
   2ccd0:	cmp	r2, #0
   2ccd4:	bmi	2ccb8 <__assert_fail@plt+0x1a0c8>
   2ccd8:	ldr	ip, [r0, #56]	; 0x38
   2ccdc:	ldrd	r2, [ip, #16]
   2cce0:	orrs	r2, r2, r3
   2cce4:	beq	2cd3c <__assert_fail@plt+0x1a14c>
   2cce8:	ldrd	r2, [r4]
   2ccec:	ldrd	r4, [ip]
   2ccf0:	eor	r3, r5, r3
   2ccf4:	eor	r2, r4, r2
   2ccf8:	orrs	r2, r2, r3
   2ccfc:	bne	2ccb8 <__assert_fail@plt+0x1a0c8>
   2cd00:	add	r3, ip, #8
   2cd04:	ldm	lr, {r2, r5}
   2cd08:	ldm	r3, {r4, r7}
   2cd0c:	eor	r7, r7, r5
   2cd10:	eor	r2, r4, r2
   2cd14:	orrs	r2, r2, r7
   2cd18:	bne	2ccb8 <__assert_fail@plt+0x1a0c8>
   2cd1c:	add	r2, r1, #64	; 0x40
   2cd20:	add	r1, r1, #160	; 0xa0
   2cd24:	ldm	r2, {r2, r5}
   2cd28:	stm	r3, {r2, r5}
   2cd2c:	ldr	r0, [r0, #56]	; 0x38
   2cd30:	ldrd	r2, [r1]
   2cd34:	strd	r2, [r0]
   2cd38:	b	2ccb8 <__assert_fail@plt+0x1a0c8>
   2cd3c:	bl	12b9c <abort@plt>
   2cd40:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2cd44:	add	fp, sp, #28
   2cd48:	sub	sp, sp, #108	; 0x6c
   2cd4c:	mov	r7, r3
   2cd50:	mov	r4, r2
   2cd54:	mov	r8, r1
   2cd58:	mov	sl, r0
   2cd5c:	cmp	r3, #0
   2cd60:	beq	2cd84 <__assert_fail@plt+0x1a194>
   2cd64:	movw	r1, #12569	; 0x3119
   2cd68:	mov	r0, r7
   2cd6c:	movt	r1, #4
   2cd70:	bl	124f4 <strcmp@plt>
   2cd74:	cmp	r0, #0
   2cd78:	mov	r6, r0
   2cd7c:	movwne	r6, #1
   2cd80:	b	2cd88 <__assert_fail@plt+0x1a198>
   2cd84:	mov	r6, #1
   2cd88:	ldr	r0, [sl, #48]	; 0x30
   2cd8c:	tst	r0, #4
   2cd90:	bne	2cde8 <__assert_fail@plt+0x1a1f8>
   2cd94:	cmn	r4, #1
   2cd98:	mov	r1, #0
   2cd9c:	mov	r9, #0
   2cda0:	movwgt	r1, #1
   2cda4:	orrs	r1, r1, r6
   2cda8:	bne	2ce08 <__assert_fail@plt+0x1a218>
   2cdac:	ands	r0, r0, #512	; 0x200
   2cdb0:	beq	2ce08 <__assert_fail@plt+0x1a218>
   2cdb4:	add	r4, sl, #60	; 0x3c
   2cdb8:	mov	r0, r4
   2cdbc:	bl	3c764 <__assert_fail@plt+0x29b74>
   2cdc0:	cmp	r0, #0
   2cdc4:	bne	2ce10 <__assert_fail@plt+0x1a220>
   2cdc8:	mov	r0, r4
   2cdcc:	bl	3c7b8 <__assert_fail@plt+0x29bc8>
   2cdd0:	cmn	r0, #1
   2cdd4:	ble	2ce10 <__assert_fail@plt+0x1a220>
   2cdd8:	mov	r4, r0
   2cddc:	mov	r9, #0
   2cde0:	mov	r7, #0
   2cde4:	b	2ce2c <__assert_fail@plt+0x1a23c>
   2cde8:	mov	r5, #0
   2cdec:	cmp	r4, #0
   2cdf0:	bmi	2cf14 <__assert_fail@plt+0x1a324>
   2cdf4:	ands	r0, r0, #512	; 0x200
   2cdf8:	beq	2cf14 <__assert_fail@plt+0x1a324>
   2cdfc:	mov	r0, r4
   2ce00:	bl	12ba8 <close@plt>
   2ce04:	b	2cf14 <__assert_fail@plt+0x1a324>
   2ce08:	cmn	r4, #1
   2ce0c:	bgt	2ce2c <__assert_fail@plt+0x1a23c>
   2ce10:	mov	r0, sl
   2ce14:	mov	r1, r7
   2ce18:	bl	2c460 <__assert_fail@plt+0x19870>
   2ce1c:	cmp	r0, #0
   2ce20:	bmi	2cec4 <__assert_fail@plt+0x1a2d4>
   2ce24:	mov	r4, r0
   2ce28:	mov	r9, #1
   2ce2c:	ldr	r5, [sl, #48]	; 0x30
   2ce30:	tst	r5, #2
   2ce34:	bne	2ce58 <__assert_fail@plt+0x1a268>
   2ce38:	cmp	r7, #0
   2ce3c:	beq	2ceac <__assert_fail@plt+0x1a2bc>
   2ce40:	movw	r1, #12569	; 0x3119
   2ce44:	mov	r0, r7
   2ce48:	movt	r1, #4
   2ce4c:	bl	124f4 <strcmp@plt>
   2ce50:	cmp	r0, #0
   2ce54:	bne	2ceac <__assert_fail@plt+0x1a2bc>
   2ce58:	mov	r1, sp
   2ce5c:	mov	r0, r4
   2ce60:	bl	3d20c <__assert_fail@plt+0x2a61c>
   2ce64:	cmp	r0, #0
   2ce68:	bne	2cef0 <__assert_fail@plt+0x1a300>
   2ce6c:	add	r0, r8, #64	; 0x40
   2ce70:	ldm	sp, {r2, r3}
   2ce74:	ldrd	r0, [r0]
   2ce78:	eor	r1, r1, r3
   2ce7c:	eor	r0, r0, r2
   2ce80:	orrs	r0, r0, r1
   2ce84:	bne	2cee4 <__assert_fail@plt+0x1a2f4>
   2ce88:	add	r0, r8, #160	; 0xa0
   2ce8c:	ldr	r2, [sp, #96]	; 0x60
   2ce90:	ldr	r3, [sp, #100]	; 0x64
   2ce94:	ldrd	r0, [r0]
   2ce98:	eor	r1, r1, r3
   2ce9c:	eor	r0, r0, r2
   2cea0:	orrs	r0, r0, r1
   2cea4:	bne	2cee4 <__assert_fail@plt+0x1a2f4>
   2cea8:	ldr	r5, [sl, #48]	; 0x30
   2ceac:	tst	r5, #512	; 0x200
   2ceb0:	bne	2cecc <__assert_fail@plt+0x1a2dc>
   2ceb4:	mov	r0, r4
   2ceb8:	bl	12adc <fchdir@plt>
   2cebc:	mov	r5, r0
   2cec0:	b	2cef4 <__assert_fail@plt+0x1a304>
   2cec4:	mvn	r5, #0
   2cec8:	b	2cf14 <__assert_fail@plt+0x1a324>
   2cecc:	mov	r0, sl
   2ced0:	mov	r1, r4
   2ced4:	mov	r2, r6
   2ced8:	bl	2d9c8 <__assert_fail@plt+0x1add8>
   2cedc:	mov	r5, #0
   2cee0:	b	2cf14 <__assert_fail@plt+0x1a324>
   2cee4:	bl	12908 <__errno_location@plt>
   2cee8:	mov	r1, #2
   2ceec:	str	r1, [r0]
   2cef0:	mvn	r5, #0
   2cef4:	cmp	r9, #0
   2cef8:	beq	2cf14 <__assert_fail@plt+0x1a324>
   2cefc:	bl	12908 <__errno_location@plt>
   2cf00:	ldr	r7, [r0]
   2cf04:	mov	r6, r0
   2cf08:	mov	r0, r4
   2cf0c:	bl	12ba8 <close@plt>
   2cf10:	str	r7, [r6]
   2cf14:	mov	r0, r5
   2cf18:	sub	sp, fp, #28
   2cf1c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2cf20:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2cf24:	add	fp, sp, #28
   2cf28:	sub	sp, sp, #68	; 0x44
   2cf2c:	ldr	sl, [r0]
   2cf30:	mov	r4, r1
   2cf34:	str	r0, [fp, #-36]	; 0xffffffdc
   2cf38:	ldr	r9, [sl, #12]
   2cf3c:	cmp	r9, #0
   2cf40:	beq	2cf84 <__assert_fail@plt+0x1a394>
   2cf44:	mov	r0, r9
   2cf48:	bl	12ad0 <dirfd@plt>
   2cf4c:	cmn	r0, #1
   2cf50:	str	r0, [fp, #-32]	; 0xffffffe0
   2cf54:	ble	2cfbc <__assert_fail@plt+0x1a3cc>
   2cf58:	ldr	r7, [fp, #-36]	; 0xffffffdc
   2cf5c:	mov	ip, #0
   2cf60:	mov	r1, r7
   2cf64:	ldr	r0, [r1, #44]!	; 0x2c
   2cf68:	str	r1, [sp, #24]
   2cf6c:	mvn	r1, #0
   2cf70:	cmp	r0, #0
   2cf74:	movweq	r1, #34464	; 0x86a0
   2cf78:	movteq	r1, #1
   2cf7c:	str	r1, [sp, #32]
   2cf80:	b	2d224 <__assert_fail@plt+0x1a634>
   2cf84:	ldr	r3, [r0, #48]	; 0x30
   2cf88:	mov	r2, r0
   2cf8c:	mvn	r0, #99	; 0x63
   2cf90:	and	r1, r3, #516	; 0x204
   2cf94:	cmp	r1, #512	; 0x200
   2cf98:	ldr	r1, [sl, #24]
   2cf9c:	ldreq	r0, [r2, #32]
   2cfa0:	mov	r2, #0
   2cfa4:	tst	r3, #16
   2cfa8:	beq	2cfdc <__assert_fail@plt+0x1a3ec>
   2cfac:	tst	r3, #1
   2cfb0:	bne	2cfd0 <__assert_fail@plt+0x1a3e0>
   2cfb4:	mov	r2, #32768	; 0x8000
   2cfb8:	b	2cfdc <__assert_fail@plt+0x1a3ec>
   2cfbc:	ldr	r0, [sl, #12]
   2cfc0:	bl	12bc0 <closedir@plt>
   2cfc4:	mov	r5, #0
   2cfc8:	str	r5, [sl, #12]
   2cfcc:	b	2d01c <__assert_fail@plt+0x1a42c>
   2cfd0:	ldr	r3, [sl, #48]	; 0x30
   2cfd4:	cmp	r3, #0
   2cfd8:	movne	r2, #32768	; 0x8000
   2cfdc:	sub	r3, fp, #32
   2cfe0:	bl	3ca40 <__assert_fail@plt+0x29e50>
   2cfe4:	cmp	r0, #0
   2cfe8:	str	r0, [sl, #12]
   2cfec:	beq	2d018 <__assert_fail@plt+0x1a428>
   2cff0:	ldrh	r0, [sl, #56]	; 0x38
   2cff4:	cmp	r0, #11
   2cff8:	bne	2d03c <__assert_fail@plt+0x1a44c>
   2cffc:	ldr	r7, [fp, #-36]	; 0xffffffdc
   2d000:	mov	r1, sl
   2d004:	mov	r2, #0
   2d008:	mov	r0, r7
   2d00c:	bl	2c1a4 <__assert_fail@plt+0x195b4>
   2d010:	strh	r0, [sl, #56]	; 0x38
   2d014:	b	2d084 <__assert_fail@plt+0x1a494>
   2d018:	mov	r5, #0
   2d01c:	cmp	r4, #3
   2d020:	bne	2d8a4 <__assert_fail@plt+0x1acb4>
   2d024:	mov	r0, #4
   2d028:	strh	r0, [sl, #56]	; 0x38
   2d02c:	bl	12908 <__errno_location@plt>
   2d030:	ldr	r0, [r0]
   2d034:	str	r0, [sl, #32]
   2d038:	b	2d8a4 <__assert_fail@plt+0x1acb4>
   2d03c:	ldr	r7, [fp, #-36]	; 0xffffffdc
   2d040:	ldrb	r0, [r7, #49]	; 0x31
   2d044:	tst	r0, #1
   2d048:	beq	2d084 <__assert_fail@plt+0x1a494>
   2d04c:	mov	r0, r7
   2d050:	mov	r1, sl
   2d054:	bl	2cc68 <__assert_fail@plt+0x1a078>
   2d058:	ldr	r0, [fp, #-36]	; 0xffffffdc
   2d05c:	mov	r1, sl
   2d060:	mov	r2, #0
   2d064:	mov	r5, #0
   2d068:	bl	2c1a4 <__assert_fail@plt+0x195b4>
   2d06c:	ldr	r0, [fp, #-36]	; 0xffffffdc
   2d070:	mov	r1, sl
   2d074:	bl	2d90c <__assert_fail@plt+0x1ad1c>
   2d078:	ldr	r7, [fp, #-36]	; 0xffffffdc
   2d07c:	cmp	r0, #0
   2d080:	beq	2d128 <__assert_fail@plt+0x1a538>
   2d084:	mov	r1, r7
   2d088:	ldr	r0, [r1, #44]!	; 0x2c
   2d08c:	str	r1, [sp, #24]
   2d090:	mvn	r1, #0
   2d094:	cmp	r0, #0
   2d098:	movweq	r1, #34464	; 0x86a0
   2d09c:	movteq	r1, #1
   2d0a0:	cmp	r4, #2
   2d0a4:	str	r1, [sp, #32]
   2d0a8:	bne	2d0c8 <__assert_fail@plt+0x1a4d8>
   2d0ac:	mov	ip, #1
   2d0b0:	cmp	r4, #3
   2d0b4:	bne	2d224 <__assert_fail@plt+0x1a634>
   2d0b8:	sub	r0, r4, #3
   2d0bc:	mov	r8, r4
   2d0c0:	mov	r5, #0
   2d0c4:	b	2d15c <__assert_fail@plt+0x1a56c>
   2d0c8:	ldr	r0, [r7, #48]	; 0x30
   2d0cc:	and	r0, r0, #56	; 0x38
   2d0d0:	cmp	r0, #24
   2d0d4:	bne	2d150 <__assert_fail@plt+0x1a560>
   2d0d8:	ldr	r0, [sl, #84]	; 0x54
   2d0dc:	cmp	r0, #2
   2d0e0:	bne	2d150 <__assert_fail@plt+0x1a560>
   2d0e4:	ldr	r1, [fp, #-32]	; 0xffffffe0
   2d0e8:	mov	r0, sl
   2d0ec:	bl	2dc68 <__assert_fail@plt+0x1b078>
   2d0f0:	movw	r1, #26984	; 0x6968
   2d0f4:	cmp	r0, r1
   2d0f8:	ble	2d138 <__assert_fail@plt+0x1a548>
   2d0fc:	movw	r1, #26985	; 0x6969
   2d100:	ldr	r7, [fp, #-36]	; 0xffffffdc
   2d104:	cmp	r0, r1
   2d108:	movwne	r1, #16719	; 0x414f
   2d10c:	movtne	r1, #21318	; 0x5346
   2d110:	cmpne	r0, r1
   2d114:	beq	2d150 <__assert_fail@plt+0x1a560>
   2d118:	movw	r1, #40864	; 0x9fa0
   2d11c:	cmp	r0, r1
   2d120:	beq	2d150 <__assert_fail@plt+0x1a560>
   2d124:	b	2d0ac <__assert_fail@plt+0x1a4bc>
   2d128:	bl	12908 <__errno_location@plt>
   2d12c:	mov	r1, #12
   2d130:	str	r1, [r0]
   2d134:	b	2d8a4 <__assert_fail@plt+0x1acb4>
   2d138:	movw	r1, #19778	; 0x4d42
   2d13c:	ldr	r7, [fp, #-36]	; 0xffffffdc
   2d140:	movt	r1, #65363	; 0xff53
   2d144:	cmp	r0, r1
   2d148:	cmpne	r0, #0
   2d14c:	bne	2d0ac <__assert_fail@plt+0x1a4bc>
   2d150:	sub	r0, r4, #3
   2d154:	mov	r8, r4
   2d158:	mov	r5, #1
   2d15c:	clz	r0, r0
   2d160:	lsr	r4, r0, #5
   2d164:	ldrb	r0, [r7, #49]	; 0x31
   2d168:	ldr	r2, [fp, #-32]	; 0xffffffe0
   2d16c:	tst	r0, #2
   2d170:	beq	2d190 <__assert_fail@plt+0x1a5a0>
   2d174:	mov	r0, r2
   2d178:	movw	r1, #1030	; 0x406
   2d17c:	mov	r2, #3
   2d180:	bl	2ba88 <__assert_fail@plt+0x18e98>
   2d184:	ldr	r7, [fp, #-36]	; 0xffffffdc
   2d188:	mov	r2, r0
   2d18c:	str	r0, [fp, #-32]	; 0xffffffe0
   2d190:	cmp	r2, #0
   2d194:	bmi	2d1b4 <__assert_fail@plt+0x1a5c4>
   2d198:	mov	r0, r7
   2d19c:	mov	r1, sl
   2d1a0:	mov	r3, #0
   2d1a4:	bl	2cd40 <__assert_fail@plt+0x1a150>
   2d1a8:	ldr	r7, [fp, #-36]	; 0xffffffdc
   2d1ac:	cmp	r0, #0
   2d1b0:	beq	2d21c <__assert_fail@plt+0x1a62c>
   2d1b4:	and	r0, r4, r5
   2d1b8:	cmp	r0, #1
   2d1bc:	bne	2d1cc <__assert_fail@plt+0x1a5dc>
   2d1c0:	bl	12908 <__errno_location@plt>
   2d1c4:	ldr	r0, [r0]
   2d1c8:	str	r0, [sl, #32]
   2d1cc:	ldrh	r0, [sl, #58]	; 0x3a
   2d1d0:	orr	r0, r0, #1
   2d1d4:	strh	r0, [sl, #58]	; 0x3a
   2d1d8:	ldr	r0, [sl, #12]
   2d1dc:	bl	12bc0 <closedir@plt>
   2d1e0:	ldr	r7, [fp, #-36]	; 0xffffffdc
   2d1e4:	mov	r4, #0
   2d1e8:	str	r4, [sl, #12]
   2d1ec:	ldrb	r0, [r7, #49]	; 0x31
   2d1f0:	tst	r0, #2
   2d1f4:	beq	2d20c <__assert_fail@plt+0x1a61c>
   2d1f8:	ldr	r0, [fp, #-32]	; 0xffffffe0
   2d1fc:	cmp	r0, #0
   2d200:	bmi	2d20c <__assert_fail@plt+0x1a61c>
   2d204:	bl	12ba8 <close@plt>
   2d208:	ldr	r7, [fp, #-36]	; 0xffffffdc
   2d20c:	str	r4, [sl, #12]
   2d210:	mov	ip, #1
   2d214:	mov	r4, r8
   2d218:	b	2d224 <__assert_fail@plt+0x1a634>
   2d21c:	mov	r4, r8
   2d220:	mov	ip, #0
   2d224:	ldr	r0, [sl, #40]	; 0x28
   2d228:	ldr	r1, [sl, #28]
   2d22c:	mov	r5, #0
   2d230:	str	r4, [sp, #12]
   2d234:	sub	r2, r0, #1
   2d238:	ldrb	r1, [r1, r2]
   2d23c:	cmp	r1, #47	; 0x2f
   2d240:	ldrb	r1, [r7, #48]	; 0x30
   2d244:	moveq	r0, r2
   2d248:	tst	r1, #4
   2d24c:	mov	r1, #0
   2d250:	str	r1, [sp, #40]	; 0x28
   2d254:	beq	2d26c <__assert_fail@plt+0x1a67c>
   2d258:	ldr	r1, [r7, #24]
   2d25c:	mov	r2, #47	; 0x2f
   2d260:	strb	r2, [r1, r0]!
   2d264:	add	r1, r1, #1
   2d268:	str	r1, [sp, #40]	; 0x28
   2d26c:	ldr	r4, [sl, #12]
   2d270:	add	r1, r0, #1
   2d274:	str	r1, [sp, #48]	; 0x30
   2d278:	cmp	r4, #0
   2d27c:	beq	2d5c0 <__assert_fail@plt+0x1a9d0>
   2d280:	ldr	r0, [sl, #48]	; 0x30
   2d284:	str	ip, [sp, #4]
   2d288:	str	r9, [sp, #8]
   2d28c:	add	r0, r0, #1
   2d290:	str	r0, [sp, #28]
   2d294:	ldr	r0, [r7, #36]	; 0x24
   2d298:	sub	r0, r0, r1
   2d29c:	str	r0, [fp, #-44]	; 0xffffffd4
   2d2a0:	bl	12908 <__errno_location@plt>
   2d2a4:	str	r0, [sp, #36]	; 0x24
   2d2a8:	mov	r0, #0
   2d2ac:	mov	r1, #0
   2d2b0:	mov	r5, #0
   2d2b4:	mov	r8, #0
   2d2b8:	mov	r9, #0
   2d2bc:	str	r0, [sp, #20]
   2d2c0:	mov	r0, #0
   2d2c4:	str	r0, [sp, #16]
   2d2c8:	ldr	r0, [sp, #36]	; 0x24
   2d2cc:	str	r5, [fp, #-40]	; 0xffffffd8
   2d2d0:	mov	r5, sl
   2d2d4:	str	r1, [r0]
   2d2d8:	mov	r0, r4
   2d2dc:	bl	12aa0 <readdir64@plt>
   2d2e0:	cmp	r0, #0
   2d2e4:	beq	2d61c <__assert_fail@plt+0x1aa2c>
   2d2e8:	ldr	r7, [fp, #-36]	; 0xffffffdc
   2d2ec:	mov	sl, r0
   2d2f0:	ldrb	r0, [r7, #48]	; 0x30
   2d2f4:	tst	r0, #32
   2d2f8:	bne	2d328 <__assert_fail@plt+0x1a738>
   2d2fc:	ldrb	r0, [sl, #19]
   2d300:	cmp	r0, #46	; 0x2e
   2d304:	bne	2d328 <__assert_fail@plt+0x1a738>
   2d308:	ldrb	r0, [sl, #20]
   2d30c:	cmp	r0, #0
   2d310:	beq	2d564 <__assert_fail@plt+0x1a974>
   2d314:	cmp	r0, #46	; 0x2e
   2d318:	bne	2d328 <__assert_fail@plt+0x1a738>
   2d31c:	ldrb	r0, [sl, #21]
   2d320:	cmp	r0, #0
   2d324:	beq	2d564 <__assert_fail@plt+0x1a974>
   2d328:	add	r6, sl, #19
   2d32c:	str	r9, [sp, #44]	; 0x2c
   2d330:	mov	r0, r6
   2d334:	bl	128c0 <strlen@plt>
   2d338:	mov	r4, r0
   2d33c:	mov	r0, r7
   2d340:	mov	r1, r6
   2d344:	mov	r2, r4
   2d348:	bl	2c124 <__assert_fail@plt+0x19534>
   2d34c:	mov	r9, r0
   2d350:	cmp	r0, #0
   2d354:	beq	2d5d4 <__assert_fail@plt+0x1a9e4>
   2d358:	ldr	r0, [fp, #-44]	; 0xffffffd4
   2d35c:	cmp	r4, r0
   2d360:	bcs	2d374 <__assert_fail@plt+0x1a784>
   2d364:	ldr	r2, [sp, #48]	; 0x30
   2d368:	ldr	r7, [fp, #-36]	; 0xffffffdc
   2d36c:	add	r4, r4, r2
   2d370:	b	2d3d4 <__assert_fail@plt+0x1a7e4>
   2d374:	ldr	r7, [fp, #-36]	; 0xffffffdc
   2d378:	ldr	r0, [sp, #48]	; 0x30
   2d37c:	ldr	r6, [r7, #24]
   2d380:	add	r4, r4, r0
   2d384:	mov	r0, r7
   2d388:	add	r1, r4, #1
   2d38c:	bl	2c0b0 <__assert_fail@plt+0x194c0>
   2d390:	cmp	r0, #0
   2d394:	beq	2d5d4 <__assert_fail@plt+0x1a9e4>
   2d398:	ldr	r0, [r7, #24]
   2d39c:	cmp	r6, r0
   2d3a0:	beq	2d3c8 <__assert_fail@plt+0x1a7d8>
   2d3a4:	ldrb	r1, [r7, #48]	; 0x30
   2d3a8:	ldr	r2, [sp, #48]	; 0x30
   2d3ac:	tst	r1, #4
   2d3b0:	ldr	r1, [sp, #40]	; 0x28
   2d3b4:	addne	r1, r0, r2
   2d3b8:	mov	r0, #1
   2d3bc:	str	r1, [sp, #40]	; 0x28
   2d3c0:	str	r0, [sp, #16]
   2d3c4:	b	2d3cc <__assert_fail@plt+0x1a7dc>
   2d3c8:	ldr	r2, [sp, #48]	; 0x30
   2d3cc:	ldr	r0, [r7, #36]	; 0x24
   2d3d0:	sub	r0, r0, r2
   2d3d4:	cmp	r4, r2
   2d3d8:	bcc	2d678 <__assert_fail@plt+0x1aa88>
   2d3dc:	ldr	r1, [sp, #28]
   2d3e0:	str	r0, [fp, #-44]	; 0xffffffd4
   2d3e4:	add	r0, r9, #160	; 0xa0
   2d3e8:	str	r1, [r9, #48]	; 0x30
   2d3ec:	ldr	r1, [r7]
   2d3f0:	str	r4, [r9, #40]	; 0x28
   2d3f4:	str	r1, [r9, #4]
   2d3f8:	ldrd	r2, [sl]
   2d3fc:	strd	r2, [r0]
   2d400:	ldrb	r0, [r7, #48]	; 0x30
   2d404:	tst	r0, #4
   2d408:	bne	2d418 <__assert_fail@plt+0x1a828>
   2d40c:	add	r0, r9, #168	; 0xa8
   2d410:	str	r0, [r9, #24]
   2d414:	b	2d438 <__assert_fail@plt+0x1a848>
   2d418:	ldr	r0, [r9, #28]
   2d41c:	ldr	r2, [r9, #52]	; 0x34
   2d420:	add	r1, r9, #168	; 0xa8
   2d424:	str	r0, [r9, #24]
   2d428:	ldr	r0, [sp, #40]	; 0x28
   2d42c:	add	r2, r2, #1
   2d430:	bl	12584 <memmove@plt>
   2d434:	ldr	r7, [fp, #-36]	; 0xffffffdc
   2d438:	ldr	r0, [r7, #44]	; 0x2c
   2d43c:	ldr	r2, [r7, #48]	; 0x30
   2d440:	cmp	r0, #0
   2d444:	beq	2d478 <__assert_fail@plt+0x1a888>
   2d448:	ands	r0, r2, #1024	; 0x400
   2d44c:	bne	2d478 <__assert_fail@plt+0x1a888>
   2d450:	mov	r0, r7
   2d454:	mov	r1, r9
   2d458:	mov	r2, #0
   2d45c:	bl	2c1a4 <__assert_fail@plt+0x195b4>
   2d460:	mov	sl, r5
   2d464:	ldr	r7, [fp, #-36]	; 0xffffffdc
   2d468:	ldr	r5, [fp, #-40]	; 0xffffffd8
   2d46c:	mov	r1, #0
   2d470:	strh	r0, [r9, #56]	; 0x38
   2d474:	b	2d4f8 <__assert_fail@plt+0x1a908>
   2d478:	ldrb	r3, [sl, #18]
   2d47c:	mov	r0, #0
   2d480:	tst	r2, #8
   2d484:	mov	r1, #0
   2d488:	beq	2d4ac <__assert_fail@plt+0x1a8bc>
   2d48c:	orr	r1, r3, #4
   2d490:	cmp	r1, #4
   2d494:	mov	r1, #0
   2d498:	beq	2d4ac <__assert_fail@plt+0x1a8bc>
   2d49c:	eor	r1, r3, #10
   2d4a0:	and	r2, r2, #16
   2d4a4:	orrs	r1, r2, r1
   2d4a8:	movwne	r1, #1
   2d4ac:	mov	r6, #11
   2d4b0:	mov	sl, r5
   2d4b4:	sub	r3, r3, #1
   2d4b8:	ldr	r5, [fp, #-40]	; 0xffffffd8
   2d4bc:	add	r2, r9, #112	; 0x70
   2d4c0:	strh	r6, [r9, #56]	; 0x38
   2d4c4:	uxtb	r6, r3
   2d4c8:	cmp	r6, #11
   2d4cc:	bhi	2d4e0 <__assert_fail@plt+0x1a8f0>
   2d4d0:	sxtb	r0, r3
   2d4d4:	movw	r3, #12572	; 0x311c
   2d4d8:	movt	r3, #4
   2d4dc:	ldr	r0, [r3, r0, lsl #2]
   2d4e0:	cmp	r1, #0
   2d4e4:	str	r0, [r9, #80]	; 0x50
   2d4e8:	mov	r0, #2
   2d4ec:	mov	r1, #0
   2d4f0:	movwne	r0, #1
   2d4f4:	strd	r0, [r2]
   2d4f8:	cmp	r5, #0
   2d4fc:	str	r1, [r9, #8]
   2d500:	mov	r4, r9
   2d504:	ldrne	r0, [sp, #44]	; 0x2c
   2d508:	movne	r4, r5
   2d50c:	strne	r9, [r0, #8]
   2d510:	movw	r0, #10000	; 0x2710
   2d514:	cmp	r8, r0
   2d518:	bne	2d590 <__assert_fail@plt+0x1a9a0>
   2d51c:	ldr	r0, [sp, #24]
   2d520:	ldr	r0, [r0]
   2d524:	cmp	r0, #0
   2d528:	bne	2d590 <__assert_fail@plt+0x1a9a0>
   2d52c:	ldr	r1, [fp, #-32]	; 0xffffffe0
   2d530:	mov	r0, sl
   2d534:	bl	2dc68 <__assert_fail@plt+0x1b078>
   2d538:	mov	r1, #0
   2d53c:	str	r1, [sp, #20]
   2d540:	movw	r1, #19778	; 0x4d42
   2d544:	movt	r1, #65363	; 0xff53
   2d548:	cmp	r0, r1
   2d54c:	movwne	r1, #26985	; 0x6969
   2d550:	cmpne	r0, r1
   2d554:	bne	2d574 <__assert_fail@plt+0x1a984>
   2d558:	ldr	r7, [fp, #-36]	; 0xffffffdc
   2d55c:	mov	r1, #0
   2d560:	b	2d590 <__assert_fail@plt+0x1a9a0>
   2d564:	mov	sl, r5
   2d568:	ldr	r5, [fp, #-40]	; 0xffffffd8
   2d56c:	mov	r1, #0
   2d570:	b	2d5a4 <__assert_fail@plt+0x1a9b4>
   2d574:	movw	r1, #6548	; 0x1994
   2d578:	ldr	r7, [fp, #-36]	; 0xffffffdc
   2d57c:	movt	r1, #258	; 0x102
   2d580:	cmp	r0, r1
   2d584:	mov	r1, #0
   2d588:	movne	r0, #1
   2d58c:	strne	r0, [sp, #20]
   2d590:	ldr	r0, [sp, #32]
   2d594:	add	r8, r8, #1
   2d598:	cmp	r0, r8
   2d59c:	bls	2d6c0 <__assert_fail@plt+0x1aad0>
   2d5a0:	mov	r5, r4
   2d5a4:	ldr	r4, [sl, #12]
   2d5a8:	cmp	r4, #0
   2d5ac:	bne	2d2c8 <__assert_fail@plt+0x1a6d8>
   2d5b0:	ldr	r0, [sp, #16]
   2d5b4:	ldr	r4, [sp, #12]
   2d5b8:	ldr	r9, [sp, #8]
   2d5bc:	b	2d66c <__assert_fail@plt+0x1aa7c>
   2d5c0:	ldr	r4, [sp, #12]
   2d5c4:	mov	r8, #0
   2d5c8:	mov	r0, #0
   2d5cc:	str	r0, [sp, #20]
   2d5d0:	b	2d768 <__assert_fail@plt+0x1ab78>
   2d5d4:	ldr	r6, [sp, #36]	; 0x24
   2d5d8:	mov	r0, r9
   2d5dc:	ldr	r4, [r6]
   2d5e0:	bl	2bcbc <__assert_fail@plt+0x190cc>
   2d5e4:	ldr	r0, [fp, #-40]	; 0xffffffd8
   2d5e8:	bl	2c490 <__assert_fail@plt+0x198a0>
   2d5ec:	ldr	r0, [r5, #12]
   2d5f0:	mov	r8, r5
   2d5f4:	bl	12bc0 <closedir@plt>
   2d5f8:	mov	r0, #7
   2d5fc:	strh	r0, [r5, #56]	; 0x38
   2d600:	mov	r5, #0
   2d604:	str	r5, [r8, #12]
   2d608:	ldr	r0, [r7, #48]	; 0x30
   2d60c:	orr	r0, r0, #8192	; 0x2000
   2d610:	str	r0, [r7, #48]	; 0x30
   2d614:	str	r4, [r6]
   2d618:	b	2d8a4 <__assert_fail@plt+0x1acb4>
   2d61c:	ldr	r0, [sp, #36]	; 0x24
   2d620:	ldr	r9, [sp, #8]
   2d624:	mov	sl, r5
   2d628:	ldr	r0, [r0]
   2d62c:	cmp	r0, #0
   2d630:	beq	2d648 <__assert_fail@plt+0x1aa58>
   2d634:	str	r0, [sl, #32]
   2d638:	orrs	r0, r9, r8
   2d63c:	mov	r0, #4
   2d640:	movwne	r0, #7
   2d644:	strh	r0, [sl, #56]	; 0x38
   2d648:	ldr	r0, [sl, #12]
   2d64c:	ldr	r4, [sp, #12]
   2d650:	ldr	r5, [fp, #-40]	; 0xffffffd8
   2d654:	cmp	r0, #0
   2d658:	beq	2d668 <__assert_fail@plt+0x1aa78>
   2d65c:	bl	12bc0 <closedir@plt>
   2d660:	mov	r0, #0
   2d664:	str	r0, [sl, #12]
   2d668:	ldr	r0, [sp, #16]
   2d66c:	tst	r0, #1
   2d670:	ldr	r7, [fp, #-36]	; 0xffffffdc
   2d674:	b	2d6d4 <__assert_fail@plt+0x1aae4>
   2d678:	mov	r0, r9
   2d67c:	bl	2bcbc <__assert_fail@plt+0x190cc>
   2d680:	ldr	r0, [fp, #-40]	; 0xffffffd8
   2d684:	bl	2c490 <__assert_fail@plt+0x198a0>
   2d688:	ldr	r0, [r5, #12]
   2d68c:	mov	r8, r5
   2d690:	bl	12bc0 <closedir@plt>
   2d694:	mov	r0, #7
   2d698:	ldr	r1, [sp, #36]	; 0x24
   2d69c:	strh	r0, [r5, #56]	; 0x38
   2d6a0:	mov	r5, #0
   2d6a4:	str	r5, [r8, #12]
   2d6a8:	ldr	r0, [r7, #48]	; 0x30
   2d6ac:	orr	r0, r0, #8192	; 0x2000
   2d6b0:	str	r0, [r7, #48]	; 0x30
   2d6b4:	mov	r0, #36	; 0x24
   2d6b8:	str	r0, [r1]
   2d6bc:	b	2d8a4 <__assert_fail@plt+0x1acb4>
   2d6c0:	ldr	r0, [sp, #16]
   2d6c4:	mov	r5, r4
   2d6c8:	ldr	r4, [sp, #12]
   2d6cc:	ldr	r9, [sp, #8]
   2d6d0:	tst	r0, #1
   2d6d4:	ldr	ip, [sp, #4]
   2d6d8:	beq	2d768 <__assert_fail@plt+0x1ab78>
   2d6dc:	ldr	r1, [r7, #4]
   2d6e0:	ldr	r0, [r7, #24]
   2d6e4:	cmp	r1, #0
   2d6e8:	beq	2d718 <__assert_fail@plt+0x1ab28>
   2d6ec:	ldr	r2, [r1, #24]
   2d6f0:	add	r3, r1, #168	; 0xa8
   2d6f4:	cmp	r2, r3
   2d6f8:	beq	2d70c <__assert_fail@plt+0x1ab1c>
   2d6fc:	ldr	r3, [r1, #28]
   2d700:	sub	r2, r2, r3
   2d704:	add	r2, r0, r2
   2d708:	str	r2, [r1, #24]
   2d70c:	str	r0, [r1, #28]
   2d710:	ldr	r1, [r1, #8]
   2d714:	b	2d6e4 <__assert_fail@plt+0x1aaf4>
   2d718:	ldr	r1, [r5, #48]	; 0x30
   2d71c:	cmp	r1, #0
   2d720:	bmi	2d768 <__assert_fail@plt+0x1ab78>
   2d724:	mov	r1, r5
   2d728:	ldr	r2, [r1, #24]
   2d72c:	add	r3, r1, #168	; 0xa8
   2d730:	cmp	r2, r3
   2d734:	beq	2d748 <__assert_fail@plt+0x1ab58>
   2d738:	ldr	r3, [r1, #28]
   2d73c:	sub	r2, r2, r3
   2d740:	add	r2, r0, r2
   2d744:	str	r2, [r1, #24]
   2d748:	str	r0, [r1, #28]
   2d74c:	ldr	r2, [r1, #8]
   2d750:	cmp	r2, #0
   2d754:	ldreq	r2, [r1, #4]
   2d758:	ldr	r1, [r2, #48]	; 0x30
   2d75c:	cmn	r1, #1
   2d760:	mov	r1, r2
   2d764:	bgt	2d728 <__assert_fail@plt+0x1ab38>
   2d768:	ldrb	r0, [r7, #48]	; 0x30
   2d76c:	tst	r0, #4
   2d770:	beq	2d79c <__assert_fail@plt+0x1abac>
   2d774:	ldr	r2, [sp, #40]	; 0x28
   2d778:	ldr	r0, [r7, #36]	; 0x24
   2d77c:	ldr	r3, [sp, #48]	; 0x30
   2d780:	cmp	r3, r0
   2d784:	sub	r1, r2, #1
   2d788:	mov	r0, #0
   2d78c:	moveq	r2, r1
   2d790:	cmp	r8, #0
   2d794:	moveq	r2, r1
   2d798:	strb	r0, [r2]
   2d79c:	cmp	r9, #0
   2d7a0:	movwne	r9, #1
   2d7a4:	orrs	r0, r9, ip
   2d7a8:	beq	2d7d4 <__assert_fail@plt+0x1abe4>
   2d7ac:	cmp	r8, #0
   2d7b0:	bne	2d808 <__assert_fail@plt+0x1ac18>
   2d7b4:	cmp	r4, #3
   2d7b8:	bne	2d898 <__assert_fail@plt+0x1aca8>
   2d7bc:	ldrh	r0, [sl, #56]	; 0x38
   2d7c0:	cmp	r0, #4
   2d7c4:	cmpne	r0, #7
   2d7c8:	movne	r0, #6
   2d7cc:	strhne	r0, [sl, #56]	; 0x38
   2d7d0:	b	2d898 <__assert_fail@plt+0x1aca8>
   2d7d4:	cmp	r4, #1
   2d7d8:	cmpne	r8, #0
   2d7dc:	bne	2d808 <__assert_fail@plt+0x1ac18>
   2d7e0:	ldr	r0, [sl, #48]	; 0x30
   2d7e4:	cmp	r0, #0
   2d7e8:	beq	2d870 <__assert_fail@plt+0x1ac80>
   2d7ec:	ldr	r1, [sl, #4]
   2d7f0:	movw	r3, #12569	; 0x3119
   2d7f4:	mov	r0, r7
   2d7f8:	mvn	r2, #0
   2d7fc:	movt	r3, #4
   2d800:	bl	2cd40 <__assert_fail@plt+0x1a150>
   2d804:	b	2d878 <__assert_fail@plt+0x1ac88>
   2d808:	ldr	r0, [sp, #20]
   2d80c:	tst	r0, #1
   2d810:	beq	2d840 <__assert_fail@plt+0x1ac50>
   2d814:	movw	r0, #56368	; 0xdc30
   2d818:	mov	r1, r5
   2d81c:	mov	r2, r8
   2d820:	movt	r0, #2
   2d824:	str	r0, [r7, #44]	; 0x2c
   2d828:	mov	r0, r7
   2d82c:	bl	2c2e0 <__assert_fail@plt+0x196f0>
   2d830:	mov	r5, r0
   2d834:	mov	r0, #0
   2d838:	str	r0, [r7, #44]	; 0x2c
   2d83c:	b	2d8a4 <__assert_fail@plt+0x1acb4>
   2d840:	cmp	r8, #2
   2d844:	bcc	2d8a4 <__assert_fail@plt+0x1acb4>
   2d848:	ldr	r0, [sp, #24]
   2d84c:	ldr	r0, [r0]
   2d850:	cmp	r0, #0
   2d854:	beq	2d8a4 <__assert_fail@plt+0x1acb4>
   2d858:	mov	r0, r7
   2d85c:	mov	r1, r5
   2d860:	mov	r2, r8
   2d864:	bl	2c2e0 <__assert_fail@plt+0x196f0>
   2d868:	mov	r5, r0
   2d86c:	b	2d8a4 <__assert_fail@plt+0x1acb4>
   2d870:	mov	r0, r7
   2d874:	bl	2d8b0 <__assert_fail@plt+0x1acc0>
   2d878:	ldr	r7, [fp, #-36]	; 0xffffffdc
   2d87c:	cmp	r0, #0
   2d880:	beq	2d7ac <__assert_fail@plt+0x1abbc>
   2d884:	mov	r0, #7
   2d888:	strh	r0, [sl, #56]	; 0x38
   2d88c:	ldr	r0, [r7, #48]	; 0x30
   2d890:	orr	r0, r0, #8192	; 0x2000
   2d894:	str	r0, [r7, #48]	; 0x30
   2d898:	mov	r0, r5
   2d89c:	bl	2c490 <__assert_fail@plt+0x198a0>
   2d8a0:	mov	r5, #0
   2d8a4:	mov	r0, r5
   2d8a8:	sub	sp, fp, #28
   2d8ac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2d8b0:	push	{r4, r5, fp, lr}
   2d8b4:	add	fp, sp, #8
   2d8b8:	mov	r4, r0
   2d8bc:	ldr	r0, [r0, #48]	; 0x30
   2d8c0:	mov	r5, #0
   2d8c4:	tst	r0, #4
   2d8c8:	bne	2d8fc <__assert_fail@plt+0x1ad0c>
   2d8cc:	tst	r0, #512	; 0x200
   2d8d0:	bne	2d8ec <__assert_fail@plt+0x1acfc>
   2d8d4:	ldr	r0, [r4, #28]
   2d8d8:	bl	12adc <fchdir@plt>
   2d8dc:	cmp	r0, #0
   2d8e0:	mov	r5, r0
   2d8e4:	movwne	r5, #1
   2d8e8:	b	2d8fc <__assert_fail@plt+0x1ad0c>
   2d8ec:	mov	r0, r4
   2d8f0:	mvn	r1, #99	; 0x63
   2d8f4:	mov	r2, #1
   2d8f8:	bl	2d9c8 <__assert_fail@plt+0x1add8>
   2d8fc:	add	r0, r4, #60	; 0x3c
   2d900:	bl	2c5f8 <__assert_fail@plt+0x19a08>
   2d904:	mov	r0, r5
   2d908:	pop	{r4, r5, fp, pc}
   2d90c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   2d910:	add	fp, sp, #24
   2d914:	mov	r6, r0
   2d918:	ldrh	r0, [r0, #48]	; 0x30
   2d91c:	mov	r4, r1
   2d920:	add	r5, r1, #64	; 0x40
   2d924:	movw	r1, #258	; 0x102
   2d928:	tst	r0, r1
   2d92c:	beq	2d9a0 <__assert_fail@plt+0x1adb0>
   2d930:	mov	r0, #24
   2d934:	bl	2de8c <__assert_fail@plt+0x1b29c>
   2d938:	mov	r8, #0
   2d93c:	cmp	r0, #0
   2d940:	beq	2d9c0 <__assert_fail@plt+0x1add0>
   2d944:	ldrd	r2, [r5]
   2d948:	mov	r7, r0
   2d94c:	add	r0, r4, #160	; 0xa0
   2d950:	stm	r7, {r2, r3}
   2d954:	add	r2, r7, #8
   2d958:	ldrd	r0, [r0]
   2d95c:	stm	r2, {r0, r1, r4}
   2d960:	mov	r1, r7
   2d964:	ldr	r0, [r6, #56]	; 0x38
   2d968:	bl	22530 <__assert_fail@plt+0xf940>
   2d96c:	cmp	r0, r7
   2d970:	beq	2d998 <__assert_fail@plt+0x1ada8>
   2d974:	mov	r5, r0
   2d978:	mov	r0, r7
   2d97c:	bl	2bcbc <__assert_fail@plt+0x190cc>
   2d980:	cmp	r5, #0
   2d984:	beq	2d9c0 <__assert_fail@plt+0x1add0>
   2d988:	ldr	r0, [r5, #16]
   2d98c:	mov	r1, #2
   2d990:	strh	r1, [r4, #56]	; 0x38
   2d994:	str	r0, [r4]
   2d998:	mov	r8, #1
   2d99c:	b	2d9c0 <__assert_fail@plt+0x1add0>
   2d9a0:	ldr	r0, [r6, #56]	; 0x38
   2d9a4:	mov	r1, r5
   2d9a8:	bl	3c524 <__assert_fail@plt+0x29934>
   2d9ac:	cmp	r0, #0
   2d9b0:	mov	r8, #1
   2d9b4:	movne	r0, #2
   2d9b8:	strhne	r0, [r4, #56]	; 0x38
   2d9bc:	strne	r4, [r4]
   2d9c0:	mov	r0, r8
   2d9c4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   2d9c8:	push	{r4, r5, fp, lr}
   2d9cc:	add	fp, sp, #8
   2d9d0:	mov	r4, r1
   2d9d4:	ldr	r1, [r0, #32]
   2d9d8:	mov	r5, r0
   2d9dc:	cmp	r1, r4
   2d9e0:	bne	2d9ec <__assert_fail@plt+0x1adfc>
   2d9e4:	cmn	r1, #100	; 0x64
   2d9e8:	bne	2da2c <__assert_fail@plt+0x1ae3c>
   2d9ec:	cmp	r2, #0
   2d9f0:	beq	2da08 <__assert_fail@plt+0x1ae18>
   2d9f4:	add	r0, r5, #60	; 0x3c
   2d9f8:	bl	3c76c <__assert_fail@plt+0x29b7c>
   2d9fc:	cmp	r0, #0
   2da00:	bpl	2da20 <__assert_fail@plt+0x1ae30>
   2da04:	b	2da24 <__assert_fail@plt+0x1ae34>
   2da08:	cmp	r1, #0
   2da0c:	bmi	2da24 <__assert_fail@plt+0x1ae34>
   2da10:	ldr	r0, [r5, #48]	; 0x30
   2da14:	ands	r0, r0, #4
   2da18:	bne	2da24 <__assert_fail@plt+0x1ae34>
   2da1c:	mov	r0, r1
   2da20:	bl	12ba8 <close@plt>
   2da24:	str	r4, [r5, #32]
   2da28:	pop	{r4, r5, fp, pc}
   2da2c:	bl	12b9c <abort@plt>
   2da30:	push	{fp, lr}
   2da34:	mov	fp, sp
   2da38:	cmp	r2, #5
   2da3c:	bcc	2da54 <__assert_fail@plt+0x1ae64>
   2da40:	bl	12908 <__errno_location@plt>
   2da44:	mov	r1, #22
   2da48:	str	r1, [r0]
   2da4c:	mov	r0, #1
   2da50:	pop	{fp, pc}
   2da54:	mov	r0, #0
   2da58:	strh	r2, [r1, #60]	; 0x3c
   2da5c:	pop	{fp, pc}
   2da60:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2da64:	add	fp, sp, #28
   2da68:	sub	sp, sp, #4
   2da6c:	mov	r5, r0
   2da70:	mvn	r0, #4096	; 0x1000
   2da74:	tst	r1, r0
   2da78:	beq	2da90 <__assert_fail@plt+0x1aea0>
   2da7c:	bl	12908 <__errno_location@plt>
   2da80:	mov	r1, #22
   2da84:	mov	r4, #0
   2da88:	str	r1, [r0]
   2da8c:	b	2db8c <__assert_fail@plt+0x1af9c>
   2da90:	ldr	r6, [r5]
   2da94:	mov	r7, r1
   2da98:	bl	12908 <__errno_location@plt>
   2da9c:	mov	r4, #0
   2daa0:	mov	sl, r0
   2daa4:	str	r4, [r0]
   2daa8:	ldrb	r0, [r5, #49]	; 0x31
   2daac:	tst	r0, #32
   2dab0:	bne	2db8c <__assert_fail@plt+0x1af9c>
   2dab4:	ldrh	r0, [r6, #56]	; 0x38
   2dab8:	cmp	r0, #1
   2dabc:	beq	2dacc <__assert_fail@plt+0x1aedc>
   2dac0:	cmp	r0, #9
   2dac4:	ldreq	r4, [r6, #8]
   2dac8:	b	2db8c <__assert_fail@plt+0x1af9c>
   2dacc:	ldr	r0, [r5, #4]
   2dad0:	cmp	r0, #0
   2dad4:	blne	2c490 <__assert_fail@plt+0x198a0>
   2dad8:	mov	r9, #1
   2dadc:	cmp	r7, #4096	; 0x1000
   2dae0:	bne	2daf4 <__assert_fail@plt+0x1af04>
   2dae4:	ldr	r0, [r5, #48]	; 0x30
   2dae8:	mov	r9, #2
   2daec:	orr	r0, r0, #4096	; 0x1000
   2daf0:	str	r0, [r5, #48]	; 0x30
   2daf4:	ldr	r0, [r6, #48]	; 0x30
   2daf8:	cmp	r0, #0
   2dafc:	bne	2db78 <__assert_fail@plt+0x1af88>
   2db00:	ldr	r0, [r6, #24]
   2db04:	ldrb	r0, [r0]
   2db08:	cmp	r0, #47	; 0x2f
   2db0c:	beq	2db78 <__assert_fail@plt+0x1af88>
   2db10:	ldrb	r0, [r5, #48]	; 0x30
   2db14:	tst	r0, #4
   2db18:	bne	2db78 <__assert_fail@plt+0x1af88>
   2db1c:	movw	r1, #58388	; 0xe414
   2db20:	mov	r0, r5
   2db24:	movt	r1, #3
   2db28:	bl	2c460 <__assert_fail@plt+0x19870>
   2db2c:	cmn	r0, #1
   2db30:	ble	2db98 <__assert_fail@plt+0x1afa8>
   2db34:	mov	r8, r0
   2db38:	mov	r0, r5
   2db3c:	mov	r1, r9
   2db40:	bl	2cf20 <__assert_fail@plt+0x1a330>
   2db44:	str	r0, [r5, #4]
   2db48:	ldrb	r0, [r5, #49]	; 0x31
   2db4c:	tst	r0, #2
   2db50:	bne	2dba4 <__assert_fail@plt+0x1afb4>
   2db54:	mov	r0, r8
   2db58:	bl	12adc <fchdir@plt>
   2db5c:	cmp	r0, #0
   2db60:	beq	2dbb8 <__assert_fail@plt+0x1afc8>
   2db64:	ldr	r5, [sl]
   2db68:	mov	r0, r8
   2db6c:	bl	12ba8 <close@plt>
   2db70:	str	r5, [sl]
   2db74:	b	2db8c <__assert_fail@plt+0x1af9c>
   2db78:	mov	r0, r5
   2db7c:	mov	r1, r9
   2db80:	bl	2cf20 <__assert_fail@plt+0x1a330>
   2db84:	mov	r4, r0
   2db88:	str	r0, [r5, #4]
   2db8c:	mov	r0, r4
   2db90:	sub	sp, fp, #28
   2db94:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2db98:	mov	r4, #0
   2db9c:	str	r4, [r5, #4]
   2dba0:	b	2db8c <__assert_fail@plt+0x1af9c>
   2dba4:	mov	r0, r5
   2dba8:	mov	r1, r8
   2dbac:	mov	r2, #1
   2dbb0:	bl	2d9c8 <__assert_fail@plt+0x1add8>
   2dbb4:	b	2dbc0 <__assert_fail@plt+0x1afd0>
   2dbb8:	mov	r0, r8
   2dbbc:	bl	12ba8 <close@plt>
   2dbc0:	ldr	r4, [r5, #4]
   2dbc4:	b	2db8c <__assert_fail@plt+0x1af9c>
   2dbc8:	push	{fp, lr}
   2dbcc:	mov	fp, sp
   2dbd0:	mov	r2, r1
   2dbd4:	ldrd	r0, [r0, #8]
   2dbd8:	mov	r3, #0
   2dbdc:	bl	3cfc8 <__assert_fail@plt+0x2a3d8>
   2dbe0:	mov	r0, r2
   2dbe4:	pop	{fp, pc}
   2dbe8:	push	{r4, r5, fp, lr}
   2dbec:	add	fp, sp, #8
   2dbf0:	ldrd	r2, [r1, #8]
   2dbf4:	ldrd	r4, [r0, #8]
   2dbf8:	eor	r3, r5, r3
   2dbfc:	eor	r2, r4, r2
   2dc00:	orrs	r2, r2, r3
   2dc04:	mov	r2, #0
   2dc08:	bne	2dc28 <__assert_fail@plt+0x1b038>
   2dc0c:	ldrd	r2, [r1]
   2dc10:	ldrd	r0, [r0]
   2dc14:	eor	r1, r1, r3
   2dc18:	eor	r0, r0, r2
   2dc1c:	orr	r0, r0, r1
   2dc20:	clz	r0, r0
   2dc24:	lsr	r2, r0, #5
   2dc28:	mov	r0, r2
   2dc2c:	pop	{r4, r5, fp, pc}
   2dc30:	push	{r4, r5, fp, lr}
   2dc34:	add	fp, sp, #8
   2dc38:	ldr	r0, [r0]
   2dc3c:	ldrd	r2, [r0, #160]	; 0xa0
   2dc40:	ldr	r0, [r1]
   2dc44:	ldrd	r4, [r0, #160]	; 0xa0
   2dc48:	mov	r0, #0
   2dc4c:	subs	r1, r4, r2
   2dc50:	sbcs	r1, r5, r3
   2dc54:	movwcc	r0, #1
   2dc58:	subs	r1, r2, r4
   2dc5c:	sbcs	r1, r3, r5
   2dc60:	subcc	r0, r0, #1
   2dc64:	pop	{r4, r5, fp, pc}
   2dc68:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   2dc6c:	add	fp, sp, #24
   2dc70:	sub	sp, sp, #96	; 0x60
   2dc74:	ldr	r7, [r0, #44]	; 0x2c
   2dc78:	mov	r4, r0
   2dc7c:	mov	r5, #0
   2dc80:	ldrb	r0, [r7, #49]	; 0x31
   2dc84:	tst	r0, #2
   2dc88:	beq	2dd7c <__assert_fail@plt+0x1b18c>
   2dc8c:	ldr	r6, [r7, #52]	; 0x34
   2dc90:	mov	r9, r1
   2dc94:	cmp	r6, #0
   2dc98:	bne	2dcd8 <__assert_fail@plt+0x1b0e8>
   2dc9c:	movw	r0, #48316	; 0xbcbc
   2dca0:	movw	r2, #56712	; 0xdd88
   2dca4:	movw	r3, #56744	; 0xdda8
   2dca8:	mov	r1, #0
   2dcac:	mov	r8, #0
   2dcb0:	movt	r0, #2
   2dcb4:	movt	r2, #2
   2dcb8:	movt	r3, #2
   2dcbc:	str	r0, [sp]
   2dcc0:	mov	r0, #13
   2dcc4:	bl	21bb4 <__assert_fail@plt+0xefc4>
   2dcc8:	mov	r6, r0
   2dccc:	cmp	r0, #0
   2dcd0:	str	r0, [r7, #52]	; 0x34
   2dcd4:	beq	2dd08 <__assert_fail@plt+0x1b118>
   2dcd8:	ldrd	r0, [r4, #64]	; 0x40
   2dcdc:	str	r1, [sp, #12]
   2dce0:	str	r0, [sp, #8]
   2dce4:	add	r1, sp, #8
   2dce8:	mov	r0, r6
   2dcec:	bl	21900 <__assert_fail@plt+0xed10>
   2dcf0:	cmp	r0, #0
   2dcf4:	beq	2dd00 <__assert_fail@plt+0x1b110>
   2dcf8:	ldr	r5, [r0, #8]
   2dcfc:	b	2dd7c <__assert_fail@plt+0x1b18c>
   2dd00:	mov	r8, #1
   2dd04:	b	2dd0c <__assert_fail@plt+0x1b11c>
   2dd08:	mov	r6, #0
   2dd0c:	cmp	r9, #0
   2dd10:	bmi	2dd7c <__assert_fail@plt+0x1b18c>
   2dd14:	add	r1, sp, #8
   2dd18:	mov	r0, r9
   2dd1c:	bl	12470 <fstatfs64@plt>
   2dd20:	cmp	r0, #0
   2dd24:	bne	2dd7c <__assert_fail@plt+0x1b18c>
   2dd28:	cmp	r8, #0
   2dd2c:	beq	2dd78 <__assert_fail@plt+0x1b188>
   2dd30:	mov	r0, #16
   2dd34:	bl	2de8c <__assert_fail@plt+0x1b29c>
   2dd38:	cmp	r0, #0
   2dd3c:	beq	2dd78 <__assert_fail@plt+0x1b188>
   2dd40:	mov	r5, r0
   2dd44:	ldrd	r0, [r4, #64]	; 0x40
   2dd48:	ldr	r2, [sp, #8]
   2dd4c:	stm	r5, {r0, r1, r2}
   2dd50:	mov	r0, r6
   2dd54:	mov	r1, r5
   2dd58:	bl	22530 <__assert_fail@plt+0xf940>
   2dd5c:	cmp	r0, #0
   2dd60:	beq	2dd70 <__assert_fail@plt+0x1b180>
   2dd64:	cmp	r0, r5
   2dd68:	beq	2dd78 <__assert_fail@plt+0x1b188>
   2dd6c:	bl	12b9c <abort@plt>
   2dd70:	mov	r0, r5
   2dd74:	bl	2bcbc <__assert_fail@plt+0x190cc>
   2dd78:	ldr	r5, [sp, #8]
   2dd7c:	mov	r0, r5
   2dd80:	sub	sp, fp, #24
   2dd84:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   2dd88:	push	{fp, lr}
   2dd8c:	mov	fp, sp
   2dd90:	mov	r2, r1
   2dd94:	ldrd	r0, [r0]
   2dd98:	mov	r3, #0
   2dd9c:	bl	3cfc8 <__assert_fail@plt+0x2a3d8>
   2dda0:	mov	r0, r2
   2dda4:	pop	{fp, pc}
   2dda8:	ldrd	r2, [r1]
   2ddac:	ldrd	r0, [r0]
   2ddb0:	eor	r1, r1, r3
   2ddb4:	eor	r0, r0, r2
   2ddb8:	orr	r0, r0, r1
   2ddbc:	clz	r0, r0
   2ddc0:	lsr	r0, r0, #5
   2ddc4:	bx	lr
   2ddc8:	push	{r4, sl, fp, lr}
   2ddcc:	add	fp, sp, #8
   2ddd0:	mov	r4, r1
   2ddd4:	bl	1289c <getfilecon@plt>
   2ddd8:	mov	r1, r4
   2dddc:	pop	{r4, sl, fp, lr}
   2dde0:	b	2dde4 <__assert_fail@plt+0x1b1f4>
   2dde4:	push	{r4, r5, fp, lr}
   2dde8:	add	fp, sp, #8
   2ddec:	cmp	r0, #10
   2ddf0:	beq	2de08 <__assert_fail@plt+0x1b218>
   2ddf4:	cmp	r0, #0
   2ddf8:	bne	2de50 <__assert_fail@plt+0x1b260>
   2ddfc:	bl	12908 <__errno_location@plt>
   2de00:	mov	r1, #95	; 0x5f
   2de04:	b	2de48 <__assert_fail@plt+0x1b258>
   2de08:	ldr	r5, [r1]
   2de0c:	mov	r4, r1
   2de10:	movw	r1, #12620	; 0x314c
   2de14:	movt	r1, #4
   2de18:	mov	r0, r5
   2de1c:	bl	124f4 <strcmp@plt>
   2de20:	mov	r1, r0
   2de24:	mov	r0, #10
   2de28:	cmp	r1, #0
   2de2c:	popne	{r4, r5, fp, pc}
   2de30:	mov	r0, r5
   2de34:	bl	12b00 <freecon@plt>
   2de38:	mov	r0, #0
   2de3c:	str	r0, [r4]
   2de40:	bl	12908 <__errno_location@plt>
   2de44:	mov	r1, #61	; 0x3d
   2de48:	str	r1, [r0]
   2de4c:	mvn	r0, #0
   2de50:	pop	{r4, r5, fp, pc}
   2de54:	push	{r4, sl, fp, lr}
   2de58:	add	fp, sp, #8
   2de5c:	mov	r4, r1
   2de60:	bl	12800 <lgetfilecon@plt>
   2de64:	mov	r1, r4
   2de68:	pop	{r4, sl, fp, lr}
   2de6c:	b	2dde4 <__assert_fail@plt+0x1b1f4>
   2de70:	push	{r4, sl, fp, lr}
   2de74:	add	fp, sp, #8
   2de78:	mov	r4, r1
   2de7c:	bl	126b0 <fgetfilecon@plt>
   2de80:	mov	r1, r4
   2de84:	pop	{r4, sl, fp, lr}
   2de88:	b	2dde4 <__assert_fail@plt+0x1b1f4>
   2de8c:	cmp	r0, #0
   2de90:	movweq	r0, #1
   2de94:	cmn	r0, #1
   2de98:	ble	2dea0 <__assert_fail@plt+0x1b2b0>
   2de9c:	b	1280c <malloc@plt>
   2dea0:	push	{fp, lr}
   2dea4:	mov	fp, sp
   2dea8:	bl	12908 <__errno_location@plt>
   2deac:	mov	r1, #12
   2deb0:	str	r1, [r0]
   2deb4:	mov	r0, #0
   2deb8:	pop	{fp, pc}
   2debc:	push	{r4, r5, r6, r7, fp, lr}
   2dec0:	add	fp, sp, #16
   2dec4:	sub	sp, sp, #8
   2dec8:	cmp	r0, #0
   2decc:	add	r5, sp, #4
   2ded0:	mov	r7, r2
   2ded4:	mov	r4, r1
   2ded8:	movne	r5, r0
   2dedc:	mov	r0, r5
   2dee0:	bl	127a0 <mbrtowc@plt>
   2dee4:	mov	r6, r0
   2dee8:	cmp	r7, #0
   2deec:	beq	2df14 <__assert_fail@plt+0x1b324>
   2def0:	cmn	r6, #2
   2def4:	bcc	2df14 <__assert_fail@plt+0x1b324>
   2def8:	mov	r0, #0
   2defc:	bl	3c6d4 <__assert_fail@plt+0x29ae4>
   2df00:	cmp	r0, #0
   2df04:	bne	2df14 <__assert_fail@plt+0x1b324>
   2df08:	ldrb	r0, [r4]
   2df0c:	mov	r6, #1
   2df10:	str	r0, [r5]
   2df14:	mov	r0, r6
   2df18:	sub	sp, fp, #16
   2df1c:	pop	{r4, r5, r6, r7, fp, pc}
   2df20:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2df24:	add	fp, sp, #28
   2df28:	sub	sp, sp, #36	; 0x24
   2df2c:	movw	r0, #12630	; 0x3156
   2df30:	movw	r1, #6092	; 0x17cc
   2df34:	movt	r0, #4
   2df38:	movt	r1, #4
   2df3c:	bl	12ae8 <fopen64@plt>
   2df40:	cmp	r0, #0
   2df44:	beq	2e48c <__assert_fail@plt+0x1b89c>
   2df48:	mov	r9, r0
   2df4c:	mov	r7, #0
   2df50:	add	r0, sp, #28
   2df54:	add	r1, sp, #24
   2df58:	mov	r2, r9
   2df5c:	str	r7, [sp, #28]
   2df60:	str	r7, [sp, #24]
   2df64:	bl	12b3c <getline@plt>
   2df68:	add	r4, sp, #32
   2df6c:	cmn	r0, #1
   2df70:	beq	2e41c <__assert_fail@plt+0x1b82c>
   2df74:	movw	sl, #12651	; 0x316b
   2df78:	add	r8, sp, #12
   2df7c:	add	r5, sp, #20
   2df80:	add	r6, sp, #16
   2df84:	movt	sl, #4
   2df88:	ldr	r0, [sp, #28]
   2df8c:	mov	r1, sl
   2df90:	mov	r2, r5
   2df94:	mov	r3, r6
   2df98:	str	r8, [sp]
   2df9c:	bl	12a7c <sscanf@plt>
   2dfa0:	orr	r0, r0, #1
   2dfa4:	cmp	r0, #3
   2dfa8:	bne	2e2a4 <__assert_fail@plt+0x1b6b4>
   2dfac:	ldr	r0, [sp, #12]
   2dfb0:	ldr	r1, [sp, #28]
   2dfb4:	add	r5, r1, r0
   2dfb8:	mov	r1, #32
   2dfbc:	mov	r0, r5
   2dfc0:	bl	128cc <strchr@plt>
   2dfc4:	cmp	r0, #0
   2dfc8:	beq	2e29c <__assert_fail@plt+0x1b6ac>
   2dfcc:	mov	r6, r0
   2dfd0:	mov	r1, #32
   2dfd4:	strb	r7, [r6], #1
   2dfd8:	mov	r0, r6
   2dfdc:	bl	128cc <strchr@plt>
   2dfe0:	cmp	r0, #0
   2dfe4:	beq	2e29c <__assert_fail@plt+0x1b6ac>
   2dfe8:	movw	r1, #12668	; 0x317c
   2dfec:	strb	r7, [r0], #1
   2dff0:	movt	r1, #4
   2dff4:	bl	3b344 <__assert_fail@plt+0x28754>
   2dff8:	cmp	r0, #0
   2dffc:	beq	2e29c <__assert_fail@plt+0x1b6ac>
   2e000:	add	r8, r0, #3
   2e004:	mov	r1, #32
   2e008:	mov	r0, r8
   2e00c:	bl	128cc <strchr@plt>
   2e010:	cmp	r0, #0
   2e014:	beq	2e290 <__assert_fail@plt+0x1b6a0>
   2e018:	mov	sl, r0
   2e01c:	mov	r1, #32
   2e020:	strb	r7, [sl], #1
   2e024:	mov	r0, sl
   2e028:	bl	128cc <strchr@plt>
   2e02c:	cmp	r0, #0
   2e030:	beq	2e290 <__assert_fail@plt+0x1b6a0>
   2e034:	strb	r7, [r0]
   2e038:	mov	r0, sl
   2e03c:	str	r4, [sp, #8]
   2e040:	bl	2e8a8 <__assert_fail@plt+0x1bcb8>
   2e044:	mov	r0, r6
   2e048:	bl	2e8a8 <__assert_fail@plt+0x1bcb8>
   2e04c:	mov	r0, r5
   2e050:	bl	2e8a8 <__assert_fail@plt+0x1bcb8>
   2e054:	mov	r0, r8
   2e058:	bl	2e8a8 <__assert_fail@plt+0x1bcb8>
   2e05c:	mov	r0, #32
   2e060:	bl	2a688 <__assert_fail@plt+0x17a98>
   2e064:	mov	r4, r0
   2e068:	mov	r0, sl
   2e06c:	bl	2aa7c <__assert_fail@plt+0x17e8c>
   2e070:	str	r0, [r4]
   2e074:	mov	r0, r6
   2e078:	bl	2aa7c <__assert_fail@plt+0x17e8c>
   2e07c:	str	r0, [r4, #4]
   2e080:	mov	r0, r5
   2e084:	bl	2aa7c <__assert_fail@plt+0x17e8c>
   2e088:	str	r0, [r4, #8]
   2e08c:	mov	r0, r8
   2e090:	bl	2aa7c <__assert_fail@plt+0x17e8c>
   2e094:	str	r0, [r4, #12]
   2e098:	mov	r7, r0
   2e09c:	ldr	r1, [sp, #16]
   2e0a0:	ldrb	r0, [r4, #24]
   2e0a4:	orr	r6, r0, #4
   2e0a8:	ldr	r0, [sp, #20]
   2e0ac:	strb	r6, [r4, #24]
   2e0b0:	bl	12518 <gnu_dev_makedev@plt>
   2e0b4:	strd	r0, [r4, #16]
   2e0b8:	movw	r1, #12672	; 0x3180
   2e0bc:	mov	r0, r7
   2e0c0:	movt	r1, #4
   2e0c4:	bl	124f4 <strcmp@plt>
   2e0c8:	cmp	r0, #0
   2e0cc:	mov	r0, #1
   2e0d0:	beq	2e23c <__assert_fail@plt+0x1b64c>
   2e0d4:	movw	r1, #12679	; 0x3187
   2e0d8:	mov	r0, r7
   2e0dc:	movt	r1, #4
   2e0e0:	bl	124f4 <strcmp@plt>
   2e0e4:	cmp	r0, #0
   2e0e8:	mov	r0, #1
   2e0ec:	beq	2e23c <__assert_fail@plt+0x1b64c>
   2e0f0:	movw	r1, #12684	; 0x318c
   2e0f4:	mov	r0, r7
   2e0f8:	movt	r1, #4
   2e0fc:	bl	124f4 <strcmp@plt>
   2e100:	cmp	r0, #0
   2e104:	mov	r0, #1
   2e108:	beq	2e23c <__assert_fail@plt+0x1b64c>
   2e10c:	movw	r1, #12690	; 0x3192
   2e110:	mov	r0, r7
   2e114:	movt	r1, #4
   2e118:	bl	124f4 <strcmp@plt>
   2e11c:	cmp	r0, #0
   2e120:	mov	r0, #1
   2e124:	beq	2e23c <__assert_fail@plt+0x1b64c>
   2e128:	movw	r1, #12698	; 0x319a
   2e12c:	mov	r0, r7
   2e130:	movt	r1, #4
   2e134:	bl	124f4 <strcmp@plt>
   2e138:	cmp	r0, #0
   2e13c:	mov	r0, #1
   2e140:	beq	2e23c <__assert_fail@plt+0x1b64c>
   2e144:	movw	r1, #12705	; 0x31a1
   2e148:	mov	r0, r7
   2e14c:	movt	r1, #4
   2e150:	bl	124f4 <strcmp@plt>
   2e154:	cmp	r0, #0
   2e158:	mov	r0, #1
   2e15c:	beq	2e23c <__assert_fail@plt+0x1b64c>
   2e160:	movw	r1, #12713	; 0x31a9
   2e164:	mov	r0, r7
   2e168:	movt	r1, #4
   2e16c:	bl	124f4 <strcmp@plt>
   2e170:	cmp	r0, #0
   2e174:	mov	r0, #1
   2e178:	beq	2e23c <__assert_fail@plt+0x1b64c>
   2e17c:	movw	r1, #12725	; 0x31b5
   2e180:	mov	r0, r7
   2e184:	movt	r1, #4
   2e188:	bl	124f4 <strcmp@plt>
   2e18c:	cmp	r0, #0
   2e190:	mov	r0, #1
   2e194:	beq	2e23c <__assert_fail@plt+0x1b64c>
   2e198:	movw	r1, #12732	; 0x31bc
   2e19c:	mov	r0, r7
   2e1a0:	movt	r1, #4
   2e1a4:	bl	124f4 <strcmp@plt>
   2e1a8:	cmp	r0, #0
   2e1ac:	mov	r0, #1
   2e1b0:	beq	2e23c <__assert_fail@plt+0x1b64c>
   2e1b4:	movw	r1, #12743	; 0x31c7
   2e1b8:	mov	r0, r7
   2e1bc:	movt	r1, #4
   2e1c0:	bl	124f4 <strcmp@plt>
   2e1c4:	cmp	r0, #0
   2e1c8:	mov	r0, #1
   2e1cc:	beq	2e23c <__assert_fail@plt+0x1b64c>
   2e1d0:	movw	r1, #12749	; 0x31cd
   2e1d4:	mov	r0, r7
   2e1d8:	movt	r1, #4
   2e1dc:	bl	124f4 <strcmp@plt>
   2e1e0:	cmp	r0, #0
   2e1e4:	mov	r0, #1
   2e1e8:	beq	2e23c <__assert_fail@plt+0x1b64c>
   2e1ec:	movw	r1, #12755	; 0x31d3
   2e1f0:	mov	r0, r7
   2e1f4:	movt	r1, #4
   2e1f8:	bl	124f4 <strcmp@plt>
   2e1fc:	cmp	r0, #0
   2e200:	mov	r0, #1
   2e204:	beq	2e23c <__assert_fail@plt+0x1b64c>
   2e208:	movw	r1, #64997	; 0xfde5
   2e20c:	mov	r0, r7
   2e210:	movt	r1, #3
   2e214:	bl	124f4 <strcmp@plt>
   2e218:	cmp	r0, #0
   2e21c:	mov	r0, #1
   2e220:	beq	2e23c <__assert_fail@plt+0x1b64c>
   2e224:	movw	r1, #12762	; 0x31da
   2e228:	mov	r0, r7
   2e22c:	movt	r1, #4
   2e230:	bl	124f4 <strcmp@plt>
   2e234:	clz	r0, r0
   2e238:	lsr	r0, r0, #5
   2e23c:	bic	r1, r6, #1
   2e240:	orr	r6, r1, r0
   2e244:	mov	r1, #58	; 0x3a
   2e248:	strb	r6, [r4, #24]
   2e24c:	ldr	r5, [r4]
   2e250:	mov	r0, r5
   2e254:	bl	128cc <strchr@plt>
   2e258:	movw	sl, #12651	; 0x316b
   2e25c:	cmp	r0, #0
   2e260:	add	r8, sp, #12
   2e264:	movt	sl, #4
   2e268:	beq	2e2c0 <__assert_fail@plt+0x1b6d0>
   2e26c:	mov	r1, #1
   2e270:	and	r0, r6, #253	; 0xfd
   2e274:	mov	r7, #0
   2e278:	orr	r0, r0, r1, lsl #1
   2e27c:	strb	r0, [r4, #24]
   2e280:	ldr	r0, [sp, #8]
   2e284:	str	r4, [r0]
   2e288:	add	r4, r4, #28
   2e28c:	b	2e29c <__assert_fail@plt+0x1b6ac>
   2e290:	movw	sl, #12651	; 0x316b
   2e294:	add	r8, sp, #12
   2e298:	movt	sl, #4
   2e29c:	add	r5, sp, #20
   2e2a0:	add	r6, sp, #16
   2e2a4:	add	r0, sp, #28
   2e2a8:	add	r1, sp, #24
   2e2ac:	mov	r2, r9
   2e2b0:	bl	12b3c <getline@plt>
   2e2b4:	cmn	r0, #1
   2e2b8:	bne	2df88 <__assert_fail@plt+0x1b398>
   2e2bc:	b	2e41c <__assert_fail@plt+0x1b82c>
   2e2c0:	ldrb	r0, [r5]
   2e2c4:	cmp	r0, #47	; 0x2f
   2e2c8:	bne	2e320 <__assert_fail@plt+0x1b730>
   2e2cc:	ldrb	r0, [r5, #1]
   2e2d0:	cmp	r0, #47	; 0x2f
   2e2d4:	bne	2e320 <__assert_fail@plt+0x1b730>
   2e2d8:	movw	r1, #12767	; 0x31df
   2e2dc:	mov	r0, r7
   2e2e0:	movt	r1, #4
   2e2e4:	bl	124f4 <strcmp@plt>
   2e2e8:	cmp	r0, #0
   2e2ec:	beq	2e26c <__assert_fail@plt+0x1b67c>
   2e2f0:	movw	r1, #12773	; 0x31e5
   2e2f4:	mov	r0, r7
   2e2f8:	movt	r1, #4
   2e2fc:	bl	124f4 <strcmp@plt>
   2e300:	cmp	r0, #0
   2e304:	beq	2e26c <__assert_fail@plt+0x1b67c>
   2e308:	movw	r1, #12778	; 0x31ea
   2e30c:	mov	r0, r7
   2e310:	movt	r1, #4
   2e314:	bl	124f4 <strcmp@plt>
   2e318:	cmp	r0, #0
   2e31c:	beq	2e26c <__assert_fail@plt+0x1b67c>
   2e320:	movw	r1, #12783	; 0x31ef
   2e324:	mov	r0, r7
   2e328:	str	r5, [sp, #4]
   2e32c:	movt	r1, #4
   2e330:	bl	124f4 <strcmp@plt>
   2e334:	cmp	r0, #0
   2e338:	beq	2e26c <__assert_fail@plt+0x1b67c>
   2e33c:	movw	r1, #64956	; 0xfdbc
   2e340:	mov	r0, r7
   2e344:	movt	r1, #3
   2e348:	bl	124f4 <strcmp@plt>
   2e34c:	cmp	r0, #0
   2e350:	beq	2e26c <__assert_fail@plt+0x1b67c>
   2e354:	movw	r1, #12788	; 0x31f4
   2e358:	mov	r0, r7
   2e35c:	movt	r1, #4
   2e360:	bl	124f4 <strcmp@plt>
   2e364:	cmp	r0, #0
   2e368:	beq	2e26c <__assert_fail@plt+0x1b67c>
   2e36c:	movw	r1, #12793	; 0x31f9
   2e370:	mov	r0, r7
   2e374:	movt	r1, #4
   2e378:	bl	124f4 <strcmp@plt>
   2e37c:	cmp	r0, #0
   2e380:	beq	2e26c <__assert_fail@plt+0x1b67c>
   2e384:	movw	r1, #12804	; 0x3204
   2e388:	mov	r0, r7
   2e38c:	movt	r1, #4
   2e390:	bl	124f4 <strcmp@plt>
   2e394:	cmp	r0, #0
   2e398:	beq	2e26c <__assert_fail@plt+0x1b67c>
   2e39c:	movw	r1, #12810	; 0x320a
   2e3a0:	mov	r0, r7
   2e3a4:	movt	r1, #4
   2e3a8:	bl	124f4 <strcmp@plt>
   2e3ac:	cmp	r0, #0
   2e3b0:	beq	2e26c <__assert_fail@plt+0x1b67c>
   2e3b4:	movw	r1, #12815	; 0x320f
   2e3b8:	mov	r0, r7
   2e3bc:	movt	r1, #4
   2e3c0:	bl	124f4 <strcmp@plt>
   2e3c4:	cmp	r0, #0
   2e3c8:	beq	2e26c <__assert_fail@plt+0x1b67c>
   2e3cc:	movw	r1, #12821	; 0x3215
   2e3d0:	mov	r0, r7
   2e3d4:	movt	r1, #4
   2e3d8:	bl	124f4 <strcmp@plt>
   2e3dc:	cmp	r0, #0
   2e3e0:	beq	2e26c <__assert_fail@plt+0x1b67c>
   2e3e4:	movw	r1, #12827	; 0x321b
   2e3e8:	mov	r0, r7
   2e3ec:	movt	r1, #4
   2e3f0:	bl	124f4 <strcmp@plt>
   2e3f4:	cmp	r0, #0
   2e3f8:	mov	r1, #1
   2e3fc:	beq	2e270 <__assert_fail@plt+0x1b680>
   2e400:	ldr	r1, [sp, #4]
   2e404:	movw	r0, #12832	; 0x3220
   2e408:	movt	r0, #4
   2e40c:	bl	124f4 <strcmp@plt>
   2e410:	clz	r0, r0
   2e414:	lsr	r1, r0, #5
   2e418:	b	2e270 <__assert_fail@plt+0x1b680>
   2e41c:	ldr	r0, [sp, #28]
   2e420:	bl	2bcbc <__assert_fail@plt+0x190cc>
   2e424:	mov	r0, r9
   2e428:	bl	12794 <ferror_unlocked@plt>
   2e42c:	cmp	r0, #0
   2e430:	beq	2e860 <__assert_fail@plt+0x1bc70>
   2e434:	bl	12908 <__errno_location@plt>
   2e438:	ldr	r6, [r0]
   2e43c:	mov	r5, r0
   2e440:	mov	r0, r9
   2e444:	bl	129d4 <fclose@plt>
   2e448:	str	r6, [r5]
   2e44c:	bl	12908 <__errno_location@plt>
   2e450:	mov	r6, #0
   2e454:	ldr	r8, [r0]
   2e458:	mov	r5, r0
   2e45c:	str	r6, [r4]
   2e460:	ldr	r0, [sp, #32]
   2e464:	cmp	r0, #0
   2e468:	beq	2e484 <__assert_fail@plt+0x1b894>
   2e46c:	ldr	r7, [r0, #28]
   2e470:	bl	2e940 <__assert_fail@plt+0x1bd50>
   2e474:	cmp	r7, #0
   2e478:	mov	r0, r7
   2e47c:	bne	2e46c <__assert_fail@plt+0x1b87c>
   2e480:	str	r7, [sp, #32]
   2e484:	str	r8, [r5]
   2e488:	b	2e89c <__assert_fail@plt+0x1bcac>
   2e48c:	movw	r0, #12839	; 0x3227
   2e490:	movw	r1, #6672	; 0x1a10
   2e494:	movt	r0, #4
   2e498:	movt	r1, #4
   2e49c:	bl	12b18 <setmntent@plt>
   2e4a0:	cmp	r0, #0
   2e4a4:	beq	2e874 <__assert_fail@plt+0x1bc84>
   2e4a8:	mov	r8, r0
   2e4ac:	bl	127c4 <getmntent@plt>
   2e4b0:	cmp	r0, #0
   2e4b4:	beq	2e87c <__assert_fail@plt+0x1bc8c>
   2e4b8:	mov	r5, r0
   2e4bc:	add	r4, sp, #32
   2e4c0:	movw	r1, #12849	; 0x3231
   2e4c4:	mov	r0, r5
   2e4c8:	mov	sl, r4
   2e4cc:	movt	r1, #4
   2e4d0:	bl	12764 <hasmntopt@plt>
   2e4d4:	str	r0, [sp, #8]
   2e4d8:	mov	r0, #32
   2e4dc:	bl	2a688 <__assert_fail@plt+0x17a98>
   2e4e0:	mov	r9, r0
   2e4e4:	ldr	r0, [r5]
   2e4e8:	bl	2aa7c <__assert_fail@plt+0x17e8c>
   2e4ec:	str	r0, [r9]
   2e4f0:	ldr	r0, [r5, #4]
   2e4f4:	bl	2aa7c <__assert_fail@plt+0x17e8c>
   2e4f8:	str	r0, [r9, #4]
   2e4fc:	mov	r0, #0
   2e500:	str	r0, [r9, #8]
   2e504:	ldr	r0, [r5, #8]
   2e508:	bl	2aa7c <__assert_fail@plt+0x17e8c>
   2e50c:	str	r0, [r9, #12]
   2e510:	mov	r7, r0
   2e514:	movw	r1, #12672	; 0x3180
   2e518:	ldrb	r0, [r9, #24]
   2e51c:	movt	r1, #4
   2e520:	orr	r4, r0, #4
   2e524:	mov	r0, r7
   2e528:	strb	r4, [r9, #24]
   2e52c:	bl	124f4 <strcmp@plt>
   2e530:	cmp	r0, #0
   2e534:	mov	r6, #1
   2e538:	mov	r0, #1
   2e53c:	beq	2e6b0 <__assert_fail@plt+0x1bac0>
   2e540:	movw	r1, #12679	; 0x3187
   2e544:	mov	r0, r7
   2e548:	movt	r1, #4
   2e54c:	bl	124f4 <strcmp@plt>
   2e550:	cmp	r0, #0
   2e554:	mov	r0, #1
   2e558:	beq	2e6b0 <__assert_fail@plt+0x1bac0>
   2e55c:	movw	r1, #12684	; 0x318c
   2e560:	mov	r0, r7
   2e564:	movt	r1, #4
   2e568:	bl	124f4 <strcmp@plt>
   2e56c:	cmp	r0, #0
   2e570:	mov	r0, #1
   2e574:	beq	2e6b0 <__assert_fail@plt+0x1bac0>
   2e578:	movw	r1, #12690	; 0x3192
   2e57c:	mov	r0, r7
   2e580:	movt	r1, #4
   2e584:	bl	124f4 <strcmp@plt>
   2e588:	cmp	r0, #0
   2e58c:	mov	r0, #1
   2e590:	beq	2e6b0 <__assert_fail@plt+0x1bac0>
   2e594:	movw	r1, #12698	; 0x319a
   2e598:	mov	r0, r7
   2e59c:	movt	r1, #4
   2e5a0:	bl	124f4 <strcmp@plt>
   2e5a4:	cmp	r0, #0
   2e5a8:	mov	r0, #1
   2e5ac:	beq	2e6b0 <__assert_fail@plt+0x1bac0>
   2e5b0:	movw	r1, #12705	; 0x31a1
   2e5b4:	mov	r0, r7
   2e5b8:	movt	r1, #4
   2e5bc:	bl	124f4 <strcmp@plt>
   2e5c0:	cmp	r0, #0
   2e5c4:	mov	r0, #1
   2e5c8:	beq	2e6b0 <__assert_fail@plt+0x1bac0>
   2e5cc:	movw	r1, #12713	; 0x31a9
   2e5d0:	mov	r0, r7
   2e5d4:	movt	r1, #4
   2e5d8:	bl	124f4 <strcmp@plt>
   2e5dc:	cmp	r0, #0
   2e5e0:	mov	r0, #1
   2e5e4:	beq	2e6b0 <__assert_fail@plt+0x1bac0>
   2e5e8:	movw	r1, #12725	; 0x31b5
   2e5ec:	mov	r0, r7
   2e5f0:	movt	r1, #4
   2e5f4:	bl	124f4 <strcmp@plt>
   2e5f8:	cmp	r0, #0
   2e5fc:	mov	r0, #1
   2e600:	beq	2e6b0 <__assert_fail@plt+0x1bac0>
   2e604:	movw	r1, #12732	; 0x31bc
   2e608:	mov	r0, r7
   2e60c:	movt	r1, #4
   2e610:	bl	124f4 <strcmp@plt>
   2e614:	cmp	r0, #0
   2e618:	mov	r0, #1
   2e61c:	beq	2e6b0 <__assert_fail@plt+0x1bac0>
   2e620:	movw	r1, #12743	; 0x31c7
   2e624:	mov	r0, r7
   2e628:	movt	r1, #4
   2e62c:	bl	124f4 <strcmp@plt>
   2e630:	cmp	r0, #0
   2e634:	mov	r0, #1
   2e638:	beq	2e6b0 <__assert_fail@plt+0x1bac0>
   2e63c:	movw	r1, #12749	; 0x31cd
   2e640:	mov	r0, r7
   2e644:	movt	r1, #4
   2e648:	bl	124f4 <strcmp@plt>
   2e64c:	cmp	r0, #0
   2e650:	mov	r0, #1
   2e654:	beq	2e6b0 <__assert_fail@plt+0x1bac0>
   2e658:	movw	r1, #12755	; 0x31d3
   2e65c:	mov	r0, r7
   2e660:	movt	r1, #4
   2e664:	bl	124f4 <strcmp@plt>
   2e668:	cmp	r0, #0
   2e66c:	mov	r0, #1
   2e670:	beq	2e6b0 <__assert_fail@plt+0x1bac0>
   2e674:	movw	r1, #64997	; 0xfde5
   2e678:	mov	r0, r7
   2e67c:	movt	r1, #3
   2e680:	bl	124f4 <strcmp@plt>
   2e684:	cmp	r0, #0
   2e688:	mov	r0, #1
   2e68c:	beq	2e6b0 <__assert_fail@plt+0x1bac0>
   2e690:	movw	r1, #12762	; 0x31da
   2e694:	mov	r0, r7
   2e698:	movt	r1, #4
   2e69c:	bl	124f4 <strcmp@plt>
   2e6a0:	ldr	r1, [sp, #8]
   2e6a4:	orr	r0, r1, r0
   2e6a8:	clz	r0, r0
   2e6ac:	lsr	r0, r0, #5
   2e6b0:	bic	r1, r4, #1
   2e6b4:	orr	r4, r1, r0
   2e6b8:	mov	r1, #58	; 0x3a
   2e6bc:	strb	r4, [r9, #24]
   2e6c0:	ldr	r5, [r9]
   2e6c4:	mov	r0, r5
   2e6c8:	bl	128cc <strchr@plt>
   2e6cc:	cmp	r0, #0
   2e6d0:	beq	2e70c <__assert_fail@plt+0x1bb1c>
   2e6d4:	mvn	r0, #0
   2e6d8:	str	r0, [r9, #16]
   2e6dc:	str	r0, [r9, #20]
   2e6e0:	and	r0, r4, #253	; 0xfd
   2e6e4:	add	r4, r9, #28
   2e6e8:	orr	r0, r0, r6, lsl #1
   2e6ec:	strb	r0, [r9, #24]
   2e6f0:	mov	r0, r8
   2e6f4:	str	r9, [sl]
   2e6f8:	bl	127c4 <getmntent@plt>
   2e6fc:	mov	r5, r0
   2e700:	cmp	r0, #0
   2e704:	bne	2e4c0 <__assert_fail@plt+0x1b8d0>
   2e708:	b	2e880 <__assert_fail@plt+0x1bc90>
   2e70c:	ldrb	r0, [r5]
   2e710:	cmp	r0, #47	; 0x2f
   2e714:	bne	2e76c <__assert_fail@plt+0x1bb7c>
   2e718:	ldrb	r0, [r5, #1]
   2e71c:	cmp	r0, #47	; 0x2f
   2e720:	bne	2e76c <__assert_fail@plt+0x1bb7c>
   2e724:	movw	r1, #12767	; 0x31df
   2e728:	mov	r0, r7
   2e72c:	movt	r1, #4
   2e730:	bl	124f4 <strcmp@plt>
   2e734:	cmp	r0, #0
   2e738:	beq	2e6d4 <__assert_fail@plt+0x1bae4>
   2e73c:	movw	r1, #12773	; 0x31e5
   2e740:	mov	r0, r7
   2e744:	movt	r1, #4
   2e748:	bl	124f4 <strcmp@plt>
   2e74c:	cmp	r0, #0
   2e750:	beq	2e6d4 <__assert_fail@plt+0x1bae4>
   2e754:	movw	r1, #12778	; 0x31ea
   2e758:	mov	r0, r7
   2e75c:	movt	r1, #4
   2e760:	bl	124f4 <strcmp@plt>
   2e764:	cmp	r0, #0
   2e768:	beq	2e6d4 <__assert_fail@plt+0x1bae4>
   2e76c:	movw	r1, #12783	; 0x31ef
   2e770:	mov	r0, r7
   2e774:	movt	r1, #4
   2e778:	bl	124f4 <strcmp@plt>
   2e77c:	cmp	r0, #0
   2e780:	beq	2e6d4 <__assert_fail@plt+0x1bae4>
   2e784:	movw	r1, #64956	; 0xfdbc
   2e788:	mov	r0, r7
   2e78c:	movt	r1, #3
   2e790:	bl	124f4 <strcmp@plt>
   2e794:	cmp	r0, #0
   2e798:	beq	2e6d4 <__assert_fail@plt+0x1bae4>
   2e79c:	movw	r1, #12788	; 0x31f4
   2e7a0:	mov	r0, r7
   2e7a4:	movt	r1, #4
   2e7a8:	bl	124f4 <strcmp@plt>
   2e7ac:	cmp	r0, #0
   2e7b0:	beq	2e6d4 <__assert_fail@plt+0x1bae4>
   2e7b4:	movw	r1, #12793	; 0x31f9
   2e7b8:	mov	r0, r7
   2e7bc:	movt	r1, #4
   2e7c0:	bl	124f4 <strcmp@plt>
   2e7c4:	cmp	r0, #0
   2e7c8:	beq	2e6d4 <__assert_fail@plt+0x1bae4>
   2e7cc:	movw	r1, #12804	; 0x3204
   2e7d0:	mov	r0, r7
   2e7d4:	movt	r1, #4
   2e7d8:	bl	124f4 <strcmp@plt>
   2e7dc:	cmp	r0, #0
   2e7e0:	beq	2e6d4 <__assert_fail@plt+0x1bae4>
   2e7e4:	movw	r1, #12810	; 0x320a
   2e7e8:	mov	r0, r7
   2e7ec:	movt	r1, #4
   2e7f0:	bl	124f4 <strcmp@plt>
   2e7f4:	cmp	r0, #0
   2e7f8:	beq	2e6d4 <__assert_fail@plt+0x1bae4>
   2e7fc:	movw	r1, #12815	; 0x320f
   2e800:	mov	r0, r7
   2e804:	movt	r1, #4
   2e808:	bl	124f4 <strcmp@plt>
   2e80c:	cmp	r0, #0
   2e810:	beq	2e6d4 <__assert_fail@plt+0x1bae4>
   2e814:	movw	r1, #12821	; 0x3215
   2e818:	mov	r0, r7
   2e81c:	movt	r1, #4
   2e820:	bl	124f4 <strcmp@plt>
   2e824:	cmp	r0, #0
   2e828:	beq	2e6d4 <__assert_fail@plt+0x1bae4>
   2e82c:	movw	r1, #12827	; 0x321b
   2e830:	mov	r0, r7
   2e834:	movt	r1, #4
   2e838:	bl	124f4 <strcmp@plt>
   2e83c:	cmp	r0, #0
   2e840:	beq	2e6d4 <__assert_fail@plt+0x1bae4>
   2e844:	movw	r0, #12832	; 0x3220
   2e848:	mov	r1, r5
   2e84c:	movt	r0, #4
   2e850:	bl	124f4 <strcmp@plt>
   2e854:	clz	r0, r0
   2e858:	lsr	r6, r0, #5
   2e85c:	b	2e6d4 <__assert_fail@plt+0x1bae4>
   2e860:	mov	r0, r9
   2e864:	bl	129d4 <fclose@plt>
   2e868:	cmn	r0, #1
   2e86c:	bne	2e890 <__assert_fail@plt+0x1bca0>
   2e870:	b	2e44c <__assert_fail@plt+0x1b85c>
   2e874:	mov	r6, #0
   2e878:	b	2e89c <__assert_fail@plt+0x1bcac>
   2e87c:	add	r4, sp, #32
   2e880:	mov	r0, r8
   2e884:	bl	129f8 <endmntent@plt>
   2e888:	cmp	r0, #0
   2e88c:	beq	2e44c <__assert_fail@plt+0x1b85c>
   2e890:	mov	r0, #0
   2e894:	str	r0, [r4]
   2e898:	ldr	r6, [sp, #32]
   2e89c:	mov	r0, r6
   2e8a0:	sub	sp, fp, #28
   2e8a4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2e8a8:	push	{r4, r5, r6, r7, fp, lr}
   2e8ac:	add	fp, sp, #16
   2e8b0:	mov	r7, r0
   2e8b4:	bl	128c0 <strlen@plt>
   2e8b8:	adds	r0, r0, #1
   2e8bc:	popcs	{r4, r5, r6, r7, fp, pc}
   2e8c0:	mov	r2, #0
   2e8c4:	mov	r1, r7
   2e8c8:	ldrb	r3, [r7, r2]
   2e8cc:	add	r6, r2, #4
   2e8d0:	cmp	r6, r0
   2e8d4:	bcs	2e92c <__assert_fail@plt+0x1bd3c>
   2e8d8:	cmp	r3, #92	; 0x5c
   2e8dc:	bne	2e92c <__assert_fail@plt+0x1bd3c>
   2e8e0:	add	r6, r2, r7
   2e8e4:	ldrb	r4, [r6, #1]
   2e8e8:	and	r5, r4, #252	; 0xfc
   2e8ec:	cmp	r5, #48	; 0x30
   2e8f0:	bne	2e92c <__assert_fail@plt+0x1bd3c>
   2e8f4:	ldrb	ip, [r6, #2]
   2e8f8:	and	r6, ip, #248	; 0xf8
   2e8fc:	cmp	r6, #48	; 0x30
   2e900:	bne	2e92c <__assert_fail@plt+0x1bd3c>
   2e904:	add	lr, r2, #3
   2e908:	ldrb	r6, [r7, lr]
   2e90c:	and	r5, r6, #248	; 0xf8
   2e910:	cmp	r5, #48	; 0x30
   2e914:	bne	2e92c <__assert_fail@plt+0x1bd3c>
   2e918:	lsl	r2, r4, #6
   2e91c:	add	r2, r2, ip, lsl #3
   2e920:	add	r2, r2, r6
   2e924:	add	r3, r2, #80	; 0x50
   2e928:	mov	r2, lr
   2e92c:	add	r2, r2, #1
   2e930:	strb	r3, [r1], #1
   2e934:	cmp	r2, r0
   2e938:	bcc	2e8c8 <__assert_fail@plt+0x1bcd8>
   2e93c:	pop	{r4, r5, r6, r7, fp, pc}
   2e940:	push	{r4, sl, fp, lr}
   2e944:	add	fp, sp, #8
   2e948:	mov	r4, r0
   2e94c:	ldr	r0, [r0]
   2e950:	bl	2bcbc <__assert_fail@plt+0x190cc>
   2e954:	ldr	r0, [r4, #4]
   2e958:	bl	2bcbc <__assert_fail@plt+0x190cc>
   2e95c:	ldr	r0, [r4, #8]
   2e960:	bl	2bcbc <__assert_fail@plt+0x190cc>
   2e964:	ldrb	r0, [r4, #24]
   2e968:	tst	r0, #4
   2e96c:	beq	2e978 <__assert_fail@plt+0x1bd88>
   2e970:	ldr	r0, [r4, #12]
   2e974:	bl	2bcbc <__assert_fail@plt+0x190cc>
   2e978:	mov	r0, r4
   2e97c:	pop	{r4, sl, fp, lr}
   2e980:	b	2bcbc <__assert_fail@plt+0x190cc>
   2e984:	push	{fp, lr}
   2e988:	mov	fp, sp
   2e98c:	cmp	r0, #0
   2e990:	beq	2e9ac <__assert_fail@plt+0x1bdbc>
   2e994:	cmp	r1, #0
   2e998:	beq	2e9b8 <__assert_fail@plt+0x1bdc8>
   2e99c:	cmn	r1, #1
   2e9a0:	ble	2e9c0 <__assert_fail@plt+0x1bdd0>
   2e9a4:	pop	{fp, lr}
   2e9a8:	b	126a4 <realloc@plt>
   2e9ac:	mov	r0, r1
   2e9b0:	pop	{fp, lr}
   2e9b4:	b	2de8c <__assert_fail@plt+0x1b29c>
   2e9b8:	bl	2bcbc <__assert_fail@plt+0x190cc>
   2e9bc:	b	2e9cc <__assert_fail@plt+0x1bddc>
   2e9c0:	bl	12908 <__errno_location@plt>
   2e9c4:	mov	r1, #12
   2e9c8:	str	r1, [r0]
   2e9cc:	mov	r0, #0
   2e9d0:	pop	{fp, pc}
   2e9d4:	cmp	r2, #0
   2e9d8:	beq	2ea08 <__assert_fail@plt+0x1be18>
   2e9dc:	mvn	r3, #0
   2e9e0:	udiv	r3, r3, r2
   2e9e4:	cmp	r3, r1
   2e9e8:	bcs	2ea08 <__assert_fail@plt+0x1be18>
   2e9ec:	push	{fp, lr}
   2e9f0:	mov	fp, sp
   2e9f4:	bl	12908 <__errno_location@plt>
   2e9f8:	mov	r1, #12
   2e9fc:	str	r1, [r0]
   2ea00:	mov	r0, #0
   2ea04:	pop	{fp, pc}
   2ea08:	mul	r1, r2, r1
   2ea0c:	b	2e984 <__assert_fail@plt+0x1bd94>
   2ea10:	push	{fp, lr}
   2ea14:	mov	fp, sp
   2ea18:	mov	lr, r0
   2ea1c:	movw	r0, #20192	; 0x4ee0
   2ea20:	mov	ip, r1
   2ea24:	ldrb	r1, [r2, #28]
   2ea28:	movt	r0, #5
   2ea2c:	ldr	r3, [r0]
   2ea30:	mov	r0, #16
   2ea34:	and	r1, r1, #111	; 0x6f
   2ea38:	and	r0, r0, r3, lsr #21
   2ea3c:	orr	r0, r1, r0
   2ea40:	mov	r1, lr
   2ea44:	orr	r0, r0, #128	; 0x80
   2ea48:	strb	r0, [r2, #28]
   2ea4c:	mov	r0, r2
   2ea50:	mov	r2, ip
   2ea54:	bl	2ea90 <__assert_fail@plt+0x1bea0>
   2ea58:	cmp	r0, #0
   2ea5c:	beq	2ea88 <__assert_fail@plt+0x1be98>
   2ea60:	movw	r1, #13240	; 0x33b8
   2ea64:	mov	r2, #5
   2ea68:	movt	r1, #4
   2ea6c:	ldr	r0, [r1, r0, lsl #2]
   2ea70:	movw	r1, #12856	; 0x3238
   2ea74:	movt	r1, #4
   2ea78:	add	r1, r1, r0
   2ea7c:	mov	r0, #0
   2ea80:	pop	{fp, lr}
   2ea84:	b	12674 <dcgettext@plt>
   2ea88:	mov	r0, #0
   2ea8c:	pop	{fp, pc}
   2ea90:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2ea94:	add	fp, sp, #28
   2ea98:	sub	sp, sp, #140	; 0x8c
   2ea9c:	str	r1, [sp, #24]
   2eaa0:	mov	r1, #0
   2eaa4:	str	r0, [sp, #28]
   2eaa8:	mov	sl, r2
   2eaac:	str	r3, [sp, #20]
   2eab0:	str	r1, [fp, #-52]	; 0xffffffcc
   2eab4:	str	r1, [r0, #24]
   2eab8:	str	r1, [r0, #8]
   2eabc:	str	r3, [r0, #12]
   2eac0:	ldrb	r1, [r0, #28]
   2eac4:	and	r1, r1, #144	; 0x90
   2eac8:	strb	r1, [r0, #28]
   2eacc:	ldr	r9, [r0]
   2ead0:	ldr	r0, [r0, #4]
   2ead4:	cmp	r0, #159	; 0x9f
   2ead8:	bls	2f680 <__assert_fail@plt+0x1ca90>
   2eadc:	ldr	r1, [sp, #28]
   2eae0:	mov	r0, #160	; 0xa0
   2eae4:	mov	r2, #160	; 0xa0
   2eae8:	str	r0, [r1, #8]
   2eaec:	mov	r0, r9
   2eaf0:	mov	r1, #0
   2eaf4:	bl	12938 <memset@plt>
   2eaf8:	mov	r0, #31
   2eafc:	str	r0, [r9, #64]	; 0x40
   2eb00:	movw	r0, #43689	; 0xaaa9
   2eb04:	movt	r0, #2730	; 0xaaa
   2eb08:	cmp	sl, r0
   2eb0c:	bhi	2ec84 <__assert_fail@plt+0x1c094>
   2eb10:	add	r0, sl, #1
   2eb14:	str	r0, [r9, #4]
   2eb18:	str	r0, [sp, #12]
   2eb1c:	lsl	r0, r0, #3
   2eb20:	bl	2de8c <__assert_fail@plt+0x1b29c>
   2eb24:	str	r0, [r9]
   2eb28:	mov	r0, #1
   2eb2c:	mov	r4, r0
   2eb30:	lsl	r0, r0, #1
   2eb34:	cmp	r4, sl
   2eb38:	bls	2eb2c <__assert_fail@plt+0x1bf3c>
   2eb3c:	mov	r0, #12
   2eb40:	mov	r1, r4
   2eb44:	bl	2b734 <__assert_fail@plt+0x18b44>
   2eb48:	sub	r1, r4, #1
   2eb4c:	str	r1, [r9, #68]	; 0x44
   2eb50:	str	r0, [r9, #32]
   2eb54:	bl	12758 <__ctype_get_mb_cur_max@plt>
   2eb58:	str	r0, [r9, #92]	; 0x5c
   2eb5c:	mov	r0, #14
   2eb60:	bl	12a64 <nl_langinfo@plt>
   2eb64:	ldrb	r1, [r0]
   2eb68:	orr	r1, r1, #32
   2eb6c:	cmp	r1, #117	; 0x75
   2eb70:	bne	2ebc0 <__assert_fail@plt+0x1bfd0>
   2eb74:	ldrb	r1, [r0, #1]
   2eb78:	orr	r1, r1, #32
   2eb7c:	cmp	r1, #116	; 0x74
   2eb80:	bne	2ebc0 <__assert_fail@plt+0x1bfd0>
   2eb84:	ldrb	r1, [r0, #2]
   2eb88:	orr	r1, r1, #32
   2eb8c:	cmp	r1, #102	; 0x66
   2eb90:	bne	2ebc0 <__assert_fail@plt+0x1bfd0>
   2eb94:	ldrb	r1, [r0, #3]!
   2eb98:	cmp	r1, #45	; 0x2d
   2eb9c:	movw	r1, #13356	; 0x342c
   2eba0:	movt	r1, #4
   2eba4:	addeq	r0, r0, #1
   2eba8:	bl	124f4 <strcmp@plt>
   2ebac:	cmp	r0, #0
   2ebb0:	bne	2ebc0 <__assert_fail@plt+0x1bfd0>
   2ebb4:	ldrb	r0, [r9, #88]	; 0x58
   2ebb8:	orr	r0, r0, #4
   2ebbc:	strb	r0, [r9, #88]	; 0x58
   2ebc0:	ldrb	r0, [r9, #88]	; 0x58
   2ebc4:	and	r1, r0, #247	; 0xf7
   2ebc8:	strb	r1, [r9, #88]	; 0x58
   2ebcc:	ldr	r1, [r9, #92]	; 0x5c
   2ebd0:	cmp	r1, #2
   2ebd4:	blt	2ec70 <__assert_fail@plt+0x1c080>
   2ebd8:	tst	r0, #4
   2ebdc:	bne	2ec64 <__assert_fail@plt+0x1c074>
   2ebe0:	mov	r0, #32
   2ebe4:	mov	r1, #1
   2ebe8:	mov	r8, #1
   2ebec:	bl	2b734 <__assert_fail@plt+0x18b44>
   2ebf0:	cmp	r0, #0
   2ebf4:	str	r0, [r9, #60]	; 0x3c
   2ebf8:	beq	2ec84 <__assert_fail@plt+0x1c094>
   2ebfc:	mov	r7, #0
   2ec00:	mov	r5, #0
   2ec04:	mov	r6, #0
   2ec08:	add	r4, r7, r6
   2ec0c:	mov	r0, r4
   2ec10:	bl	12974 <btowc@plt>
   2ec14:	cmn	r0, #1
   2ec18:	beq	2ec2c <__assert_fail@plt+0x1c03c>
   2ec1c:	ldr	r1, [r9, #60]	; 0x3c
   2ec20:	ldr	r2, [r1, r5, lsl #2]
   2ec24:	orr	r2, r2, r8, lsl r6
   2ec28:	str	r2, [r1, r5, lsl #2]
   2ec2c:	cmp	r4, #127	; 0x7f
   2ec30:	bhi	2ec44 <__assert_fail@plt+0x1c054>
   2ec34:	cmp	r4, r0
   2ec38:	ldrbne	r0, [r9, #88]	; 0x58
   2ec3c:	orrne	r0, r0, #8
   2ec40:	strbne	r0, [r9, #88]	; 0x58
   2ec44:	add	r6, r6, #1
   2ec48:	cmp	r6, #32
   2ec4c:	bne	2ec08 <__assert_fail@plt+0x1c018>
   2ec50:	add	r5, r5, #1
   2ec54:	add	r7, r7, r6
   2ec58:	cmp	r5, #8
   2ec5c:	bne	2ec04 <__assert_fail@plt+0x1c014>
   2ec60:	b	2ec70 <__assert_fail@plt+0x1c080>
   2ec64:	movw	r0, #13308	; 0x33fc
   2ec68:	movt	r0, #4
   2ec6c:	str	r0, [r9, #60]	; 0x3c
   2ec70:	ldr	r0, [r9]
   2ec74:	cmp	r0, #0
   2ec78:	ldrne	r0, [r9, #32]
   2ec7c:	cmpne	r0, #0
   2ec80:	bne	2eca8 <__assert_fail@plt+0x1c0b8>
   2ec84:	mov	r4, #12
   2ec88:	mov	r0, r9
   2ec8c:	str	r4, [fp, #-52]	; 0xffffffcc
   2ec90:	bl	2fcf0 <__assert_fail@plt+0x1d100>
   2ec94:	ldr	r0, [sp, #28]
   2ec98:	mov	r1, #0
   2ec9c:	str	r1, [r0]
   2eca0:	str	r1, [r0, #4]
   2eca4:	b	2f608 <__assert_fail@plt+0x1ca18>
   2eca8:	movw	r0, #9664	; 0x25c0
   2ecac:	movw	r1, #10600	; 0x2968
   2ecb0:	mov	r4, #0
   2ecb4:	movt	r0, #1
   2ecb8:	movt	r1, #1
   2ecbc:	str	r4, [fp, #-52]	; 0xffffffcc
   2ecc0:	orrs	r0, r1, r0
   2ecc4:	str	r0, [sp, #8]
   2ecc8:	beq	2ece0 <__assert_fail@plt+0x1c0f0>
   2eccc:	add	r0, r9, #136	; 0x88
   2ecd0:	mov	r1, #0
   2ecd4:	bl	12614 <pthread_mutex_init@plt>
   2ecd8:	cmp	r0, #0
   2ecdc:	bne	2ec84 <__assert_fail@plt+0x1c094>
   2ece0:	ldr	r0, [sp, #28]
   2ece4:	add	r5, sp, #32
   2ece8:	mov	r1, #0
   2ecec:	mov	r2, #76	; 0x4c
   2ecf0:	ldr	r8, [r0, #20]
   2ecf4:	add	r0, r5, #4
   2ecf8:	bl	12938 <memset@plt>
   2ecfc:	ldr	r1, [sp, #20]
   2ed00:	vdup.32	q8, sl
   2ed04:	add	r3, r5, #44	; 0x2c
   2ed08:	ubfx	r0, r1, #22, #1
   2ed0c:	strb	r0, [sp, #104]	; 0x68
   2ed10:	ldr	r0, [sp, #24]
   2ed14:	str	r8, [sp, #96]	; 0x60
   2ed18:	str	r0, [sp, #32]
   2ed1c:	and	r0, r1, #4194304	; 0x400000
   2ed20:	orrs	r1, r0, r8
   2ed24:	str	r0, [sp, #16]
   2ed28:	movwne	r1, #1
   2ed2c:	cmp	sl, #1
   2ed30:	strb	r1, [sp, #107]	; 0x6b
   2ed34:	ldr	r0, [r9, #92]	; 0x5c
   2ed38:	str	r0, [sp, #112]	; 0x70
   2ed3c:	ldrb	r2, [r9, #88]	; 0x58
   2ed40:	vst1.32	{d16-d17}, [r3]
   2ed44:	ubfx	r3, r2, #2, #1
   2ed48:	strb	r3, [sp, #105]	; 0x69
   2ed4c:	ubfx	r2, r2, #3, #1
   2ed50:	strb	r2, [sp, #106]	; 0x6a
   2ed54:	blt	2ed78 <__assert_fail@plt+0x1c188>
   2ed58:	ldr	r1, [sp, #12]
   2ed5c:	add	r0, sp, #32
   2ed60:	bl	31e28 <__assert_fail@plt+0x1f238>
   2ed64:	cmp	r0, #0
   2ed68:	bne	2ede8 <__assert_fail@plt+0x1c1f8>
   2ed6c:	ldr	r0, [r9, #92]	; 0x5c
   2ed70:	ldr	r4, [sp, #36]	; 0x24
   2ed74:	ldrb	r1, [sp, #107]	; 0x6b
   2ed78:	cmp	r1, #0
   2ed7c:	ldr	r1, [sp, #24]
   2ed80:	moveq	r4, r1
   2ed84:	ldr	r1, [sp, #16]
   2ed88:	str	r4, [sp, #36]	; 0x24
   2ed8c:	cmp	r1, #0
   2ed90:	beq	2edf0 <__assert_fail@plt+0x1c200>
   2ed94:	cmp	r0, #2
   2ed98:	blt	2ee04 <__assert_fail@plt+0x1c214>
   2ed9c:	add	r4, sp, #32
   2eda0:	mov	r0, r4
   2eda4:	bl	31ec8 <__assert_fail@plt+0x1f2d8>
   2eda8:	cmp	r0, #0
   2edac:	bne	2ede8 <__assert_fail@plt+0x1c1f8>
   2edb0:	ldr	r0, [sp, #64]	; 0x40
   2edb4:	cmp	r0, sl
   2edb8:	bge	2ee94 <__assert_fail@plt+0x1c2a4>
   2edbc:	ldr	r1, [r9, #92]	; 0x5c
   2edc0:	ldr	r2, [sp, #60]	; 0x3c
   2edc4:	ldr	r0, [sp, #68]	; 0x44
   2edc8:	add	r1, r1, r2
   2edcc:	cmp	r0, r1
   2edd0:	bgt	2ee94 <__assert_fail@plt+0x1c2a4>
   2edd4:	lsl	r1, r0, #1
   2edd8:	mov	r0, r4
   2eddc:	bl	31e28 <__assert_fail@plt+0x1f238>
   2ede0:	cmp	r0, #0
   2ede4:	beq	2eda0 <__assert_fail@plt+0x1c1b0>
   2ede8:	ldr	sl, [sp, #28]
   2edec:	b	2efe8 <__assert_fail@plt+0x1c3f8>
   2edf0:	cmp	r0, #2
   2edf4:	blt	2ee10 <__assert_fail@plt+0x1c220>
   2edf8:	add	r0, sp, #32
   2edfc:	bl	32504 <__assert_fail@plt+0x1f914>
   2ee00:	b	2ee94 <__assert_fail@plt+0x1c2a4>
   2ee04:	add	r0, sp, #32
   2ee08:	bl	32498 <__assert_fail@plt+0x1f8a8>
   2ee0c:	b	2ee94 <__assert_fail@plt+0x1c2a4>
   2ee10:	ldr	r1, [sp, #68]	; 0x44
   2ee14:	cmp	r8, #0
   2ee18:	beq	2ee8c <__assert_fail@plt+0x1c29c>
   2ee1c:	ldr	r2, [sp, #80]	; 0x50
   2ee20:	ldr	r0, [sp, #60]	; 0x3c
   2ee24:	cmp	r1, r2
   2ee28:	movgt	r1, r2
   2ee2c:	cmp	r0, r1
   2ee30:	bge	2ee80 <__assert_fail@plt+0x1c290>
   2ee34:	ldr	r3, [sp, #56]	; 0x38
   2ee38:	ldr	r2, [sp, #32]
   2ee3c:	ldr	r7, [sp, #96]	; 0x60
   2ee40:	add	r3, r3, r0
   2ee44:	ldrb	r2, [r2, r3]
   2ee48:	ldrb	r2, [r7, r2]
   2ee4c:	strb	r2, [r4, r0]
   2ee50:	add	r0, r0, #1
   2ee54:	cmp	r0, r1
   2ee58:	bge	2ee80 <__assert_fail@plt+0x1c290>
   2ee5c:	ldr	r2, [sp, #32]
   2ee60:	ldr	r7, [sp, #56]	; 0x38
   2ee64:	ldr	r6, [sp, #96]	; 0x60
   2ee68:	ldr	r3, [sp, #36]	; 0x24
   2ee6c:	add	r2, r2, r7
   2ee70:	ldrb	r2, [r2, r0]
   2ee74:	ldrb	r2, [r6, r2]
   2ee78:	strb	r2, [r3, r0]
   2ee7c:	b	2ee50 <__assert_fail@plt+0x1c260>
   2ee80:	str	r0, [sp, #64]	; 0x40
   2ee84:	str	r0, [sp, #60]	; 0x3c
   2ee88:	b	2ee94 <__assert_fail@plt+0x1c2a4>
   2ee8c:	str	r1, [sp, #64]	; 0x40
   2ee90:	str	r1, [sp, #60]	; 0x3c
   2ee94:	ldr	sl, [sp, #28]
   2ee98:	mov	r5, #0
   2ee9c:	ldr	r6, [sp, #20]
   2eea0:	sub	r8, fp, #48	; 0x30
   2eea4:	add	r7, sp, #32
   2eea8:	str	r5, [fp, #-52]	; 0xffffffcc
   2eeac:	mov	r0, r8
   2eeb0:	mov	r1, r7
   2eeb4:	str	r5, [sl, #24]
   2eeb8:	orr	r2, r6, #8388608	; 0x800000
   2eebc:	ldr	r4, [sl]
   2eec0:	str	r6, [r4, #128]	; 0x80
   2eec4:	bl	328f4 <__assert_fail@plt+0x1fd04>
   2eec8:	ldr	r1, [sp, #72]	; 0x48
   2eecc:	mov	r2, r8
   2eed0:	mov	r3, r6
   2eed4:	str	r5, [sp]
   2eed8:	add	r0, r1, r0
   2eedc:	mov	r1, sl
   2eee0:	str	r0, [sp, #72]	; 0x48
   2eee4:	sub	r0, fp, #52	; 0x34
   2eee8:	str	r0, [sp, #4]
   2eeec:	mov	r0, r7
   2eef0:	bl	32744 <__assert_fail@plt+0x1fb54>
   2eef4:	mov	r6, r0
   2eef8:	cmp	r0, #0
   2eefc:	bne	2ef0c <__assert_fail@plt+0x1c31c>
   2ef00:	ldr	r0, [fp, #-52]	; 0xffffffcc
   2ef04:	cmp	r0, #0
   2ef08:	bne	2f6b4 <__assert_fail@plt+0x1cac4>
   2ef0c:	mov	r0, #2
   2ef10:	sub	r3, fp, #40	; 0x28
   2ef14:	mov	r1, #0
   2ef18:	mov	r2, #0
   2ef1c:	str	r0, [fp, #-36]	; 0xffffffdc
   2ef20:	mov	r0, r4
   2ef24:	str	r5, [fp, #-40]	; 0xffffffd8
   2ef28:	bl	34714 <__assert_fail@plt+0x21b24>
   2ef2c:	mov	r7, r0
   2ef30:	cmp	r6, #0
   2ef34:	beq	2ef60 <__assert_fail@plt+0x1c370>
   2ef38:	mov	r0, #16
   2ef3c:	sub	r3, fp, #40	; 0x28
   2ef40:	mov	r1, r6
   2ef44:	mov	r2, r7
   2ef48:	str	r0, [fp, #-36]	; 0xffffffdc
   2ef4c:	mov	r0, #0
   2ef50:	str	r0, [fp, #-40]	; 0xffffffd8
   2ef54:	mov	r0, r4
   2ef58:	bl	34714 <__assert_fail@plt+0x21b24>
   2ef5c:	b	2ef64 <__assert_fail@plt+0x1c374>
   2ef60:	mov	r0, r7
   2ef64:	cmp	r7, #0
   2ef68:	cmpne	r0, #0
   2ef6c:	beq	2f6ac <__assert_fail@plt+0x1cabc>
   2ef70:	str	r0, [r9, #52]	; 0x34
   2ef74:	ldr	r8, [sl]
   2ef78:	ldr	r0, [r8, #4]
   2ef7c:	lsl	r0, r0, #2
   2ef80:	bl	2de8c <__assert_fail@plt+0x1b29c>
   2ef84:	str	r0, [r8, #12]
   2ef88:	ldr	r0, [r8, #4]
   2ef8c:	lsl	r0, r0, #2
   2ef90:	bl	2de8c <__assert_fail@plt+0x1b29c>
   2ef94:	str	r0, [r8, #16]
   2ef98:	ldr	r0, [r8, #4]
   2ef9c:	add	r0, r0, r0, lsl #1
   2efa0:	lsl	r0, r0, #2
   2efa4:	bl	2de8c <__assert_fail@plt+0x1b29c>
   2efa8:	str	r0, [r8, #20]
   2efac:	ldr	r0, [r8, #4]
   2efb0:	add	r0, r0, r0, lsl #1
   2efb4:	lsl	r0, r0, #2
   2efb8:	bl	2de8c <__assert_fail@plt+0x1b29c>
   2efbc:	str	r0, [r8, #24]
   2efc0:	ldr	r1, [r8, #12]
   2efc4:	cmp	r1, #0
   2efc8:	ldrne	r1, [r8, #16]
   2efcc:	cmpne	r1, #0
   2efd0:	beq	2efe4 <__assert_fail@plt+0x1c3f4>
   2efd4:	cmp	r0, #0
   2efd8:	ldrne	r0, [r8, #20]
   2efdc:	cmpne	r0, #0
   2efe0:	bne	2f02c <__assert_fail@plt+0x1c43c>
   2efe4:	mov	r0, #12
   2efe8:	str	r0, [fp, #-52]	; 0xffffffcc
   2efec:	mov	r0, sl
   2eff0:	bl	31da4 <__assert_fail@plt+0x1f1b4>
   2eff4:	add	r0, sp, #32
   2eff8:	bl	31df4 <__assert_fail@plt+0x1f204>
   2effc:	ldr	r0, [sp, #8]
   2f000:	cmp	r0, #0
   2f004:	beq	2f010 <__assert_fail@plt+0x1c420>
   2f008:	add	r0, r9, #136	; 0x88
   2f00c:	bl	1253c <pthread_mutex_destroy@plt>
   2f010:	mov	r0, r9
   2f014:	bl	2fcf0 <__assert_fail@plt+0x1d100>
   2f018:	mov	r0, #0
   2f01c:	str	r0, [sl]
   2f020:	str	r0, [sl, #4]
   2f024:	ldr	r4, [fp, #-52]	; 0xffffffcc
   2f028:	b	2f608 <__assert_fail@plt+0x1ca18>
   2f02c:	ldr	r0, [sl, #24]
   2f030:	lsl	r0, r0, #2
   2f034:	bl	2de8c <__assert_fail@plt+0x1b29c>
   2f038:	cmp	r0, #0
   2f03c:	str	r0, [r8, #132]	; 0x84
   2f040:	beq	2f0c4 <__assert_fail@plt+0x1c4d4>
   2f044:	ldr	r1, [sl, #24]
   2f048:	cmp	r1, #0
   2f04c:	beq	2f064 <__assert_fail@plt+0x1c474>
   2f050:	mov	r2, #0
   2f054:	str	r2, [r0, r2, lsl #2]
   2f058:	add	r2, r2, #1
   2f05c:	cmp	r1, r2
   2f060:	bne	2f054 <__assert_fail@plt+0x1c464>
   2f064:	ldr	r0, [r8, #52]	; 0x34
   2f068:	movw	r1, #22708	; 0x58b4
   2f06c:	mov	r2, r8
   2f070:	movt	r1, #3
   2f074:	bl	35830 <__assert_fail@plt+0x22c40>
   2f078:	ldr	r1, [sl, #24]
   2f07c:	cmp	r1, #0
   2f080:	beq	2f0a8 <__assert_fail@plt+0x1c4b8>
   2f084:	ldr	r0, [r8, #132]	; 0x84
   2f088:	mov	r2, #0
   2f08c:	ldr	r3, [r0, r2, lsl #2]
   2f090:	cmp	r2, r3
   2f094:	bne	2f0b0 <__assert_fail@plt+0x1c4c0>
   2f098:	add	r2, r2, #1
   2f09c:	cmp	r1, r2
   2f0a0:	bne	2f08c <__assert_fail@plt+0x1c49c>
   2f0a4:	b	2f0b8 <__assert_fail@plt+0x1c4c8>
   2f0a8:	ldr	r0, [r8, #132]	; 0x84
   2f0ac:	b	2f0b8 <__assert_fail@plt+0x1c4c8>
   2f0b0:	cmp	r1, r2
   2f0b4:	bne	2f0c4 <__assert_fail@plt+0x1c4d4>
   2f0b8:	bl	2bcbc <__assert_fail@plt+0x190cc>
   2f0bc:	mov	r0, #0
   2f0c0:	str	r0, [r8, #132]	; 0x84
   2f0c4:	ldr	r0, [r8, #52]	; 0x34
   2f0c8:	movw	r1, #22860	; 0x594c
   2f0cc:	mov	r2, sl
   2f0d0:	movt	r1, #3
   2f0d4:	bl	331a0 <__assert_fail@plt+0x205b0>
   2f0d8:	cmp	r0, #0
   2f0dc:	bne	2efe8 <__assert_fail@plt+0x1c3f8>
   2f0e0:	ldr	r0, [r8, #52]	; 0x34
   2f0e4:	movw	r1, #22996	; 0x59d4
   2f0e8:	mov	r2, r8
   2f0ec:	movt	r1, #3
   2f0f0:	bl	331a0 <__assert_fail@plt+0x205b0>
   2f0f4:	cmp	r0, #0
   2f0f8:	bne	2efe8 <__assert_fail@plt+0x1c3f8>
   2f0fc:	ldr	r0, [r8, #52]	; 0x34
   2f100:	movw	r1, #23140	; 0x5a64
   2f104:	mov	r2, r8
   2f108:	movt	r1, #3
   2f10c:	bl	35830 <__assert_fail@plt+0x22c40>
   2f110:	ldr	r0, [r8, #52]	; 0x34
   2f114:	movw	r1, #23236	; 0x5ac4
   2f118:	mov	r2, r8
   2f11c:	movt	r1, #3
   2f120:	bl	35830 <__assert_fail@plt+0x22c40>
   2f124:	cmp	r0, #0
   2f128:	bne	2efe8 <__assert_fail@plt+0x1c3f8>
   2f12c:	mov	r5, #0
   2f130:	sub	r7, fp, #40	; 0x28
   2f134:	mov	r4, #0
   2f138:	ldr	r0, [r8, #24]
   2f13c:	add	r6, r4, r4, lsl #1
   2f140:	add	r0, r0, r6, lsl #2
   2f144:	ldr	r0, [r0, #4]
   2f148:	cmp	r0, #0
   2f14c:	beq	2f158 <__assert_fail@plt+0x1c568>
   2f150:	mov	r1, r5
   2f154:	b	2f198 <__assert_fail@plt+0x1c5a8>
   2f158:	mov	r0, r7
   2f15c:	mov	r1, r8
   2f160:	mov	r2, r4
   2f164:	mov	r3, #1
   2f168:	bl	35f74 <__assert_fail@plt+0x23384>
   2f16c:	cmp	r0, #0
   2f170:	bne	2efe8 <__assert_fail@plt+0x1c3f8>
   2f174:	ldr	r0, [r8, #24]
   2f178:	mov	r1, r5
   2f17c:	add	r0, r0, r6, lsl #2
   2f180:	ldr	r0, [r0, #4]
   2f184:	cmp	r0, #0
   2f188:	bne	2f198 <__assert_fail@plt+0x1c5a8>
   2f18c:	ldr	r0, [fp, #-32]	; 0xffffffe0
   2f190:	bl	2bcbc <__assert_fail@plt+0x190cc>
   2f194:	mov	r1, #1
   2f198:	ldr	r2, [r8, #8]
   2f19c:	add	r0, r4, #1
   2f1a0:	subs	r3, r0, r2
   2f1a4:	mov	r4, r3
   2f1a8:	movwne	r3, #1
   2f1ac:	movne	r4, r0
   2f1b0:	tst	r1, #1
   2f1b4:	and	r5, r1, r3
   2f1b8:	cmpeq	r0, r2
   2f1bc:	bne	2f138 <__assert_fail@plt+0x1c548>
   2f1c0:	ldrb	r1, [sl, #28]
   2f1c4:	tst	r1, #16
   2f1c8:	bne	2f1e4 <__assert_fail@plt+0x1c5f4>
   2f1cc:	ldr	r1, [sl, #24]
   2f1d0:	cmp	r1, #0
   2f1d4:	beq	2f1e4 <__assert_fail@plt+0x1c5f4>
   2f1d8:	ldrb	r1, [r8, #88]	; 0x58
   2f1dc:	tst	r1, #1
   2f1e0:	bne	2f1f0 <__assert_fail@plt+0x1c600>
   2f1e4:	ldr	r1, [r8, #76]	; 0x4c
   2f1e8:	cmp	r1, #0
   2f1ec:	beq	2f2d0 <__assert_fail@plt+0x1c6e0>
   2f1f0:	add	r0, r0, r0, lsl #1
   2f1f4:	lsl	r0, r0, #2
   2f1f8:	bl	2de8c <__assert_fail@plt+0x1b29c>
   2f1fc:	cmp	r0, #0
   2f200:	str	r0, [r8, #28]
   2f204:	beq	2efe4 <__assert_fail@plt+0x1c3f4>
   2f208:	ldr	r1, [r8, #8]
   2f20c:	cmp	r1, #0
   2f210:	beq	2f2d0 <__assert_fail@plt+0x1c6e0>
   2f214:	mov	r1, #0
   2f218:	str	r1, [r0]
   2f21c:	str	r1, [r0, #4]
   2f220:	str	r1, [r0, #8]
   2f224:	ldr	r0, [r8, #8]
   2f228:	cmp	r0, #2
   2f22c:	bcc	2f25c <__assert_fail@plt+0x1c66c>
   2f230:	mov	r2, #1
   2f234:	mov	r3, #12
   2f238:	ldr	r0, [r8, #28]
   2f23c:	add	r2, r2, #1
   2f240:	str	r1, [r0, r3]!
   2f244:	add	r3, r3, #12
   2f248:	str	r1, [r0, #4]
   2f24c:	str	r1, [r0, #8]
   2f250:	ldr	r0, [r8, #8]
   2f254:	cmp	r2, r0
   2f258:	bcc	2f238 <__assert_fail@plt+0x1c648>
   2f25c:	cmp	r0, #0
   2f260:	beq	2f2d0 <__assert_fail@plt+0x1c6e0>
   2f264:	ldr	r1, [r8, #24]
   2f268:	mov	r4, #0
   2f26c:	add	r5, r4, r4, lsl #1
   2f270:	add	r2, r1, r5, lsl #2
   2f274:	ldr	r3, [r2, #4]
   2f278:	cmp	r3, #1
   2f27c:	blt	2f2c4 <__assert_fail@plt+0x1c6d4>
   2f280:	ldr	r7, [r2, #8]
   2f284:	mov	r6, #0
   2f288:	ldr	r0, [r7, r6, lsl #2]
   2f28c:	ldr	r1, [r8, #28]
   2f290:	add	r0, r0, r0, lsl #1
   2f294:	add	r0, r1, r0, lsl #2
   2f298:	mov	r1, r4
   2f29c:	bl	3678c <__assert_fail@plt+0x23b9c>
   2f2a0:	cmp	r0, #0
   2f2a4:	beq	2efe4 <__assert_fail@plt+0x1c3f4>
   2f2a8:	ldr	r1, [r8, #24]
   2f2ac:	add	r6, r6, #1
   2f2b0:	add	r0, r1, r5, lsl #2
   2f2b4:	ldr	r0, [r0, #4]
   2f2b8:	cmp	r6, r0
   2f2bc:	blt	2f288 <__assert_fail@plt+0x1c698>
   2f2c0:	ldr	r0, [r8, #8]
   2f2c4:	add	r4, r4, #1
   2f2c8:	cmp	r4, r0
   2f2cc:	bcc	2f26c <__assert_fail@plt+0x1c67c>
   2f2d0:	mov	r0, #0
   2f2d4:	str	r0, [fp, #-52]	; 0xffffffcc
   2f2d8:	ldr	r0, [sp, #16]
   2f2dc:	cmp	r0, #0
   2f2e0:	bne	2f418 <__assert_fail@plt+0x1c828>
   2f2e4:	ldrb	r2, [r9, #88]	; 0x58
   2f2e8:	ands	r0, r2, #4
   2f2ec:	beq	2f418 <__assert_fail@plt+0x1c828>
   2f2f0:	ldr	r0, [sp, #28]
   2f2f4:	ldr	r0, [r0, #20]
   2f2f8:	cmp	r0, #0
   2f2fc:	bne	2f418 <__assert_fail@plt+0x1c828>
   2f300:	ldr	r7, [r9, #8]
   2f304:	mov	sl, #0
   2f308:	cmp	r7, #0
   2f30c:	beq	2f3ec <__assert_fail@plt+0x1c7fc>
   2f310:	ldr	r3, [r9]
   2f314:	mov	r8, #0
   2f318:	mov	ip, #1
   2f31c:	mov	lr, #139	; 0x8b
   2f320:	mov	r6, #0
   2f324:	mov	r4, #0
   2f328:	add	r1, r3, r4, lsl #3
   2f32c:	ldrb	r5, [r1, #4]
   2f330:	sub	r5, r5, #1
   2f334:	cmp	r5, #11
   2f338:	bhi	2f6d0 <__assert_fail@plt+0x1cae0>
   2f33c:	add	r0, pc, #0
   2f340:	ldr	pc, [r0, r5, lsl #2]
   2f344:	andeq	pc, r2, ip, asr #7
   2f348:	andeq	pc, r2, r4, ror r3	; <UNPREDICTABLE>
   2f34c:	andeq	pc, r2, r4, lsl #7
   2f350:	andeq	pc, r2, r4, ror r3	; <UNPREDICTABLE>
   2f354:	andeq	pc, r2, r4, ror #7
   2f358:	andeq	pc, r2, r8, lsl r4	; <UNPREDICTABLE>
   2f35c:	ldrdeq	pc, [r2], -r0
   2f360:	andeq	pc, r2, r4, ror r3	; <UNPREDICTABLE>
   2f364:	andeq	pc, r2, r4, ror r3	; <UNPREDICTABLE>
   2f368:	andeq	pc, r2, r4, ror r3	; <UNPREDICTABLE>
   2f36c:	andeq	pc, r2, r4, ror r3	; <UNPREDICTABLE>
   2f370:	andeq	pc, r2, ip, lsr #7
   2f374:	add	r4, r4, #1
   2f378:	cmp	r4, r7
   2f37c:	bne	2f328 <__assert_fail@plt+0x1c738>
   2f380:	b	2f614 <__assert_fail@plt+0x1ca24>
   2f384:	ldr	r0, [r3, r4, lsl #3]
   2f388:	mov	r1, #0
   2f38c:	add	r5, r0, #16
   2f390:	ldr	r0, [r5, r1, lsl #2]
   2f394:	cmp	r0, #0
   2f398:	bne	2f418 <__assert_fail@plt+0x1c828>
   2f39c:	add	r1, r1, #1
   2f3a0:	cmp	r1, #4
   2f3a4:	bne	2f390 <__assert_fail@plt+0x1c7a0>
   2f3a8:	b	2f374 <__assert_fail@plt+0x1c784>
   2f3ac:	ldr	r0, [r3, r4, lsl #3]
   2f3b0:	sub	r0, r0, #16
   2f3b4:	ror	r1, r0, #4
   2f3b8:	cmp	r1, #7
   2f3bc:	bhi	2f418 <__assert_fail@plt+0x1c828>
   2f3c0:	tst	lr, ip, lsl r1
   2f3c4:	bne	2f374 <__assert_fail@plt+0x1c784>
   2f3c8:	b	2f418 <__assert_fail@plt+0x1c828>
   2f3cc:	ldrsb	r0, [r1]
   2f3d0:	cmp	r0, #0
   2f3d4:	mov	r0, #0
   2f3d8:	movwmi	r0, #1
   2f3dc:	orr	r6, r6, r0
   2f3e0:	b	2f374 <__assert_fail@plt+0x1c784>
   2f3e4:	mov	r8, #1
   2f3e8:	b	2f374 <__assert_fail@plt+0x1c784>
   2f3ec:	mov	r8, #0
   2f3f0:	mov	r0, #1
   2f3f4:	and	r1, r2, #249	; 0xf9
   2f3f8:	str	r0, [r9, #92]	; 0x5c
   2f3fc:	ldr	r0, [r9, #76]	; 0x4c
   2f400:	cmp	r0, #0
   2f404:	movwgt	sl, #1
   2f408:	orr	r0, r8, sl
   2f40c:	and	r0, r0, #1
   2f410:	orr	r0, r1, r0, lsl #1
   2f414:	strb	r0, [r9, #88]	; 0x58
   2f418:	ldr	r1, [r9, #52]	; 0x34
   2f41c:	ldr	r0, [r9, #24]
   2f420:	ldr	r1, [r1, #12]
   2f424:	ldr	r1, [r1, #28]
   2f428:	str	r1, [r9, #72]	; 0x48
   2f42c:	add	r1, r1, r1, lsl #1
   2f430:	add	r1, r0, r1, lsl #2
   2f434:	sub	r0, fp, #40	; 0x28
   2f438:	bl	367f8 <__assert_fail@plt+0x23c08>
   2f43c:	cmp	r0, #0
   2f440:	str	r0, [fp, #-48]	; 0xffffffd0
   2f444:	bne	2f6c8 <__assert_fail@plt+0x1cad8>
   2f448:	ldr	r0, [r9, #76]	; 0x4c
   2f44c:	ldr	sl, [sp, #28]
   2f450:	cmp	r0, #1
   2f454:	blt	2f528 <__assert_fail@plt+0x1c938>
   2f458:	ldr	r7, [fp, #-36]	; 0xffffffdc
   2f45c:	cmp	r7, #1
   2f460:	blt	2f528 <__assert_fail@plt+0x1c938>
   2f464:	mov	r6, #0
   2f468:	sub	r8, fp, #40	; 0x28
   2f46c:	ldr	r1, [fp, #-32]	; 0xffffffe0
   2f470:	ldr	r2, [r9]
   2f474:	ldr	r0, [r1, r6, lsl #2]
   2f478:	add	r3, r2, r0, lsl #3
   2f47c:	ldrb	r3, [r3, #4]
   2f480:	cmp	r3, #4
   2f484:	bne	2f51c <__assert_fail@plt+0x1c92c>
   2f488:	mov	r3, #0
   2f48c:	cmp	r7, #1
   2f490:	blt	2f4c8 <__assert_fail@plt+0x1c8d8>
   2f494:	ldr	r5, [r1, r3, lsl #2]
   2f498:	add	r4, r2, r5, lsl #3
   2f49c:	ldrb	r4, [r4, #4]
   2f4a0:	cmp	r4, #9
   2f4a4:	bne	2f4b8 <__assert_fail@plt+0x1c8c8>
   2f4a8:	ldr	r4, [r2, r0, lsl #3]
   2f4ac:	ldr	r5, [r2, r5, lsl #3]
   2f4b0:	cmp	r5, r4
   2f4b4:	beq	2f4c8 <__assert_fail@plt+0x1c8d8>
   2f4b8:	add	r3, r3, #1
   2f4bc:	cmp	r7, r3
   2f4c0:	bne	2f494 <__assert_fail@plt+0x1c8a4>
   2f4c4:	b	2f51c <__assert_fail@plt+0x1c92c>
   2f4c8:	cmp	r3, r7
   2f4cc:	beq	2f51c <__assert_fail@plt+0x1c92c>
   2f4d0:	ldr	r1, [r9, #20]
   2f4d4:	add	r0, r0, r0, lsl #1
   2f4d8:	add	r0, r1, r0, lsl #2
   2f4dc:	ldr	r0, [r0, #8]
   2f4e0:	ldr	r4, [r0]
   2f4e4:	mov	r0, r8
   2f4e8:	mov	r1, r4
   2f4ec:	bl	36874 <__assert_fail@plt+0x23c84>
   2f4f0:	cmp	r0, #0
   2f4f4:	bne	2f51c <__assert_fail@plt+0x1c92c>
   2f4f8:	ldr	r0, [r9, #24]
   2f4fc:	add	r1, r4, r4, lsl #1
   2f500:	add	r1, r0, r1, lsl #2
   2f504:	mov	r0, r8
   2f508:	bl	36450 <__assert_fail@plt+0x23860>
   2f50c:	cmp	r0, #0
   2f510:	bne	2f5e4 <__assert_fail@plt+0x1c9f4>
   2f514:	ldr	r7, [fp, #-36]	; 0xffffffdc
   2f518:	mov	r6, #0
   2f51c:	add	r6, r6, #1
   2f520:	cmp	r6, r7
   2f524:	blt	2f46c <__assert_fail@plt+0x1c87c>
   2f528:	sub	r0, fp, #48	; 0x30
   2f52c:	sub	r2, fp, #40	; 0x28
   2f530:	mov	r1, r9
   2f534:	mov	r3, #0
   2f538:	bl	368dc <__assert_fail@plt+0x23cec>
   2f53c:	cmp	r0, #0
   2f540:	str	r0, [r9, #36]	; 0x24
   2f544:	beq	2f5c4 <__assert_fail@plt+0x1c9d4>
   2f548:	ldrsb	r1, [r0, #52]	; 0x34
   2f54c:	cmn	r1, #1
   2f550:	ble	2f564 <__assert_fail@plt+0x1c974>
   2f554:	str	r0, [r9, #40]	; 0x28
   2f558:	str	r0, [r9, #44]	; 0x2c
   2f55c:	str	r0, [r9, #48]	; 0x30
   2f560:	b	2f5d8 <__assert_fail@plt+0x1c9e8>
   2f564:	sub	r4, fp, #48	; 0x30
   2f568:	sub	r6, fp, #40	; 0x28
   2f56c:	mov	r1, r9
   2f570:	mov	r3, #1
   2f574:	mov	r0, r4
   2f578:	mov	r2, r6
   2f57c:	bl	368dc <__assert_fail@plt+0x23cec>
   2f580:	str	r0, [r9, #40]	; 0x28
   2f584:	mov	r0, r4
   2f588:	mov	r1, r9
   2f58c:	mov	r2, r6
   2f590:	mov	r3, #2
   2f594:	bl	368dc <__assert_fail@plt+0x23cec>
   2f598:	str	r0, [r9, #44]	; 0x2c
   2f59c:	mov	r0, r4
   2f5a0:	mov	r1, r9
   2f5a4:	mov	r2, r6
   2f5a8:	mov	r3, #6
   2f5ac:	bl	368dc <__assert_fail@plt+0x23cec>
   2f5b0:	str	r0, [r9, #48]	; 0x30
   2f5b4:	ldr	r1, [r9, #40]	; 0x28
   2f5b8:	cmp	r1, #0
   2f5bc:	cmpne	r0, #0
   2f5c0:	bne	2f5cc <__assert_fail@plt+0x1c9dc>
   2f5c4:	ldr	r0, [fp, #-48]	; 0xffffffd0
   2f5c8:	b	2f5e4 <__assert_fail@plt+0x1c9f4>
   2f5cc:	ldr	r0, [r9, #44]	; 0x2c
   2f5d0:	cmp	r0, #0
   2f5d4:	beq	2f5c4 <__assert_fail@plt+0x1c9d4>
   2f5d8:	ldr	r0, [fp, #-32]	; 0xffffffe0
   2f5dc:	bl	2bcbc <__assert_fail@plt+0x190cc>
   2f5e0:	mov	r0, #0
   2f5e4:	str	r0, [fp, #-52]	; 0xffffffcc
   2f5e8:	mov	r0, sl
   2f5ec:	bl	31da4 <__assert_fail@plt+0x1f1b4>
   2f5f0:	add	r0, sp, #32
   2f5f4:	bl	31df4 <__assert_fail@plt+0x1f204>
   2f5f8:	ldr	r0, [fp, #-52]	; 0xffffffcc
   2f5fc:	mov	r4, #0
   2f600:	cmp	r0, #0
   2f604:	bne	2effc <__assert_fail@plt+0x1c40c>
   2f608:	mov	r0, r4
   2f60c:	sub	sp, fp, #28
   2f610:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2f614:	orr	r0, r6, r8
   2f618:	tst	r0, #1
   2f61c:	beq	2f3f0 <__assert_fail@plt+0x1c800>
   2f620:	mov	r2, #0
   2f624:	mov	r7, #7
   2f628:	add	r3, r3, r2, lsl #3
   2f62c:	ldr	r6, [r3, #4]
   2f630:	uxtb	r1, r6
   2f634:	cmp	r1, #5
   2f638:	beq	2f658 <__assert_fail@plt+0x1ca68>
   2f63c:	cmp	r1, #1
   2f640:	bne	2f660 <__assert_fail@plt+0x1ca70>
   2f644:	ldrsb	r0, [r3]
   2f648:	cmn	r0, #1
   2f64c:	bicle	r0, r6, #2097152	; 0x200000
   2f650:	strle	r0, [r3, #4]
   2f654:	b	2f660 <__assert_fail@plt+0x1ca70>
   2f658:	bfi	r6, r7, #0, #8
   2f65c:	str	r6, [r3, #4]
   2f660:	ldr	r0, [r9, #8]
   2f664:	add	r2, r2, #1
   2f668:	cmp	r2, r0
   2f66c:	bcs	2f678 <__assert_fail@plt+0x1ca88>
   2f670:	ldr	r3, [r9]
   2f674:	b	2f628 <__assert_fail@plt+0x1ca38>
   2f678:	ldrb	r2, [r9, #88]	; 0x58
   2f67c:	b	2f3f0 <__assert_fail@plt+0x1c800>
   2f680:	mov	r0, r9
   2f684:	mov	r1, #160	; 0xa0
   2f688:	mov	r4, #160	; 0xa0
   2f68c:	bl	2e984 <__assert_fail@plt+0x1bd94>
   2f690:	cmp	r0, #0
   2f694:	beq	2f6c0 <__assert_fail@plt+0x1cad0>
   2f698:	mov	r9, r0
   2f69c:	ldr	r0, [sp, #28]
   2f6a0:	str	r9, [r0]
   2f6a4:	str	r4, [r0, #4]
   2f6a8:	b	2eadc <__assert_fail@plt+0x1beec>
   2f6ac:	mov	r0, #12
   2f6b0:	str	r0, [fp, #-52]	; 0xffffffcc
   2f6b4:	mov	r0, #0
   2f6b8:	str	r0, [r9, #52]	; 0x34
   2f6bc:	b	2efec <__assert_fail@plt+0x1c3fc>
   2f6c0:	mov	r4, #12
   2f6c4:	b	2f608 <__assert_fail@plt+0x1ca18>
   2f6c8:	ldr	sl, [sp, #28]
   2f6cc:	b	2f5e4 <__assert_fail@plt+0x1c9f4>
   2f6d0:	bl	12b9c <abort@plt>
   2f6d4:	movw	r2, #20192	; 0x4ee0
   2f6d8:	movt	r2, #5
   2f6dc:	ldr	r1, [r2]
   2f6e0:	str	r0, [r2]
   2f6e4:	mov	r0, r1
   2f6e8:	bx	lr
   2f6ec:	push	{r4, r5, r6, sl, fp, lr}
   2f6f0:	add	fp, sp, #16
   2f6f4:	ldr	r5, [r0, #16]
   2f6f8:	ldr	r6, [r0]
   2f6fc:	mov	r4, r0
   2f700:	mov	r1, #0
   2f704:	mov	r2, #256	; 0x100
   2f708:	mov	r0, r5
   2f70c:	bl	12938 <memset@plt>
   2f710:	ldr	r1, [r6, #36]	; 0x24
   2f714:	mov	r0, r4
   2f718:	mov	r2, r5
   2f71c:	bl	2f784 <__assert_fail@plt+0x1cb94>
   2f720:	ldr	r0, [r6, #36]	; 0x24
   2f724:	ldr	r1, [r6, #40]	; 0x28
   2f728:	cmp	r0, r1
   2f72c:	beq	2f740 <__assert_fail@plt+0x1cb50>
   2f730:	mov	r0, r4
   2f734:	mov	r2, r5
   2f738:	bl	2f784 <__assert_fail@plt+0x1cb94>
   2f73c:	ldr	r0, [r6, #36]	; 0x24
   2f740:	ldr	r1, [r6, #44]	; 0x2c
   2f744:	cmp	r0, r1
   2f748:	beq	2f75c <__assert_fail@plt+0x1cb6c>
   2f74c:	mov	r0, r4
   2f750:	mov	r2, r5
   2f754:	bl	2f784 <__assert_fail@plt+0x1cb94>
   2f758:	ldr	r0, [r6, #36]	; 0x24
   2f75c:	ldr	r1, [r6, #48]	; 0x30
   2f760:	cmp	r0, r1
   2f764:	movne	r0, r4
   2f768:	movne	r2, r5
   2f76c:	blne	2f784 <__assert_fail@plt+0x1cb94>
   2f770:	ldrb	r0, [r4, #28]
   2f774:	orr	r0, r0, #8
   2f778:	strb	r0, [r4, #28]
   2f77c:	mov	r0, #0
   2f780:	pop	{r4, r5, r6, sl, fp, pc}
   2f784:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2f788:	add	fp, sp, #28
   2f78c:	sub	sp, sp, #308	; 0x134
   2f790:	ldr	r8, [r0]
   2f794:	str	r0, [sp, #20]
   2f798:	mov	r5, r2
   2f79c:	mov	r9, #0
   2f7a0:	ldr	r0, [r8, #92]	; 0x5c
   2f7a4:	cmp	r0, #1
   2f7a8:	bne	2f7b8 <__assert_fail@plt+0x1cbc8>
   2f7ac:	ldr	r0, [sp, #20]
   2f7b0:	ldrb	r0, [r0, #14]
   2f7b4:	ubfx	r9, r0, #6, #1
   2f7b8:	ldr	r0, [r1, #8]
   2f7bc:	cmp	r0, #1
   2f7c0:	blt	2fafc <__assert_fail@plt+0x1cf0c>
   2f7c4:	add	r0, sp, #32
   2f7c8:	mov	r7, #1
   2f7cc:	mov	r2, #0
   2f7d0:	str	r1, [sp, #12]
   2f7d4:	str	r8, [sp, #24]
   2f7d8:	add	r0, r0, #1
   2f7dc:	str	r0, [sp, #4]
   2f7e0:	movw	r0, #1
   2f7e4:	movt	r0, #32
   2f7e8:	add	r0, r0, #254	; 0xfe
   2f7ec:	str	r0, [sp, #8]
   2f7f0:	ldr	r0, [r1, #12]
   2f7f4:	str	r2, [sp, #16]
   2f7f8:	ldr	sl, [r0, r2, lsl #2]
   2f7fc:	ldr	r0, [r8]
   2f800:	add	r1, r0, sl, lsl #3
   2f804:	ldrb	r4, [r1, #4]
   2f808:	sub	r1, r4, #1
   2f80c:	cmp	r1, #6
   2f810:	bhi	2fab8 <__assert_fail@plt+0x1cec8>
   2f814:	add	r2, pc, #0
   2f818:	ldr	pc, [r2, r1, lsl #2]
   2f81c:	andeq	pc, r2, r8, lsr r8	; <UNPREDICTABLE>
   2f820:	ldrdeq	pc, [r2], -r4
   2f824:	andeq	pc, r2, ip, lsr #18
   2f828:			; <UNDEFINED> instruction: 0x0002fab8
   2f82c:	ldrdeq	pc, [r2], -r4
   2f830:	muleq	r2, r4, r9
   2f834:	ldrdeq	pc, [r2], -r4
   2f838:	ldrb	r0, [r0, sl, lsl #3]
   2f83c:	cmp	r9, #0
   2f840:	strb	r7, [r5, r0]
   2f844:	beq	2f850 <__assert_fail@plt+0x1cc60>
   2f848:	bl	12608 <tolower@plt>
   2f84c:	strb	r7, [r5, r0]
   2f850:	ldr	r0, [sp, #20]
   2f854:	ldrb	r0, [r0, #14]
   2f858:	tst	r0, #64	; 0x40
   2f85c:	beq	2fab8 <__assert_fail@plt+0x1cec8>
   2f860:	ldr	r0, [r8, #92]	; 0x5c
   2f864:	cmp	r0, #2
   2f868:	blt	2fab8 <__assert_fail@plt+0x1cec8>
   2f86c:	ldr	r0, [r8]
   2f870:	add	r1, sl, #1
   2f874:	movw	r4, #1
   2f878:	add	r6, sp, #32
   2f87c:	movt	r4, #32
   2f880:	ldrb	r0, [r0, sl, lsl #3]
   2f884:	strb	r0, [sp, #32]
   2f888:	ldr	r0, [r8, #8]
   2f88c:	cmp	r1, r0
   2f890:	ldr	r0, [sp, #4]
   2f894:	bcs	2f8d8 <__assert_fail@plt+0x1cce8>
   2f898:	ldr	r0, [sp, #4]
   2f89c:	ldr	r1, [r8]
   2f8a0:	ldr	r3, [sp, #8]
   2f8a4:	add	r1, r1, sl, lsl #3
   2f8a8:	ldr	r2, [r1, #12]
   2f8ac:	and	r2, r2, r3
   2f8b0:	cmp	r2, r4
   2f8b4:	bne	2f8d8 <__assert_fail@plt+0x1cce8>
   2f8b8:	ldrb	r1, [r1, #8]
   2f8bc:	add	r3, sl, #2
   2f8c0:	strb	r1, [r0], #1
   2f8c4:	add	r1, sl, #1
   2f8c8:	ldr	r2, [r8, #8]
   2f8cc:	mov	sl, r1
   2f8d0:	cmp	r3, r2
   2f8d4:	bcc	2f89c <__assert_fail@plt+0x1ccac>
   2f8d8:	mov	r1, #0
   2f8dc:	sub	r4, r0, r6
   2f8e0:	sub	r0, fp, #36	; 0x24
   2f8e4:	sub	r3, fp, #48	; 0x30
   2f8e8:	str	r1, [fp, #-44]	; 0xffffffd4
   2f8ec:	str	r1, [fp, #-48]	; 0xffffffd0
   2f8f0:	mov	r1, r6
   2f8f4:	mov	r2, r4
   2f8f8:	bl	2debc <__assert_fail@plt+0x1b2cc>
   2f8fc:	cmp	r0, r4
   2f900:	bne	2fab8 <__assert_fail@plt+0x1cec8>
   2f904:	ldr	r0, [fp, #-36]	; 0xffffffdc
   2f908:	bl	12620 <towlower@plt>
   2f90c:	mov	r1, r0
   2f910:	mov	r0, r6
   2f914:	sub	r2, fp, #48	; 0x30
   2f918:	bl	124b8 <wcrtomb@plt>
   2f91c:	cmn	r0, #1
   2f920:	ldrbne	r0, [sp, #32]
   2f924:	strbne	r7, [r5, r0]
   2f928:	b	2fab8 <__assert_fail@plt+0x1cec8>
   2f92c:	mov	r4, #0
   2f930:	mov	r6, #0
   2f934:	str	sl, [sp, #28]
   2f938:	ldr	r0, [r0, sl, lsl #3]
   2f93c:	mov	sl, #0
   2f940:	ldr	r8, [r0, r6, lsl #2]
   2f944:	tst	r8, r7, lsl sl
   2f948:	strbne	r7, [r5, r4]
   2f94c:	cmpne	r9, #0
   2f950:	bne	2f968 <__assert_fail@plt+0x1cd78>
   2f954:	add	sl, sl, #1
   2f958:	add	r4, r4, #1
   2f95c:	cmp	sl, #32
   2f960:	bne	2f944 <__assert_fail@plt+0x1cd54>
   2f964:	b	2f978 <__assert_fail@plt+0x1cd88>
   2f968:	mov	r0, r4
   2f96c:	bl	12608 <tolower@plt>
   2f970:	strb	r7, [r5, r0]
   2f974:	b	2f954 <__assert_fail@plt+0x1cd64>
   2f978:	ldr	r8, [sp, #24]
   2f97c:	ldr	sl, [sp, #28]
   2f980:	add	r6, r6, #1
   2f984:	cmp	r6, #8
   2f988:	beq	2fab8 <__assert_fail@plt+0x1cec8>
   2f98c:	ldr	r0, [r8]
   2f990:	b	2f938 <__assert_fail@plt+0x1cd48>
   2f994:	ldr	r4, [r0, sl, lsl #3]
   2f998:	ldr	r0, [r8, #92]	; 0x5c
   2f99c:	cmp	r0, #2
   2f9a0:	blt	2fa14 <__assert_fail@plt+0x1ce24>
   2f9a4:	ldr	r0, [r4, #36]	; 0x24
   2f9a8:	cmp	r0, #0
   2f9ac:	bne	2f9c8 <__assert_fail@plt+0x1cdd8>
   2f9b0:	ldrb	r0, [r4, #16]
   2f9b4:	tst	r0, #1
   2f9b8:	bne	2f9c8 <__assert_fail@plt+0x1cdd8>
   2f9bc:	ldr	r0, [r4, #32]
   2f9c0:	cmp	r0, #0
   2f9c4:	beq	2fa14 <__assert_fail@plt+0x1ce24>
   2f9c8:	mov	r6, #0
   2f9cc:	add	r4, sp, #32
   2f9d0:	strb	r6, [fp, #-48]	; 0xffffffd0
   2f9d4:	mov	r0, #0
   2f9d8:	sub	r1, fp, #48	; 0x30
   2f9dc:	mov	r2, #1
   2f9e0:	mov	r3, r4
   2f9e4:	str	r6, [sp, #36]	; 0x24
   2f9e8:	str	r6, [sp, #32]
   2f9ec:	bl	2debc <__assert_fail@plt+0x1b2cc>
   2f9f0:	ldrb	r1, [fp, #-48]	; 0xffffffd0
   2f9f4:	cmn	r0, #2
   2f9f8:	add	r0, r1, #1
   2f9fc:	strbeq	r7, [r5, r1]
   2fa00:	uxtb	r1, r0
   2fa04:	strb	r0, [fp, #-48]	; 0xffffffd0
   2fa08:	cmp	r1, r0
   2fa0c:	beq	2f9d4 <__assert_fail@plt+0x1cde4>
   2fa10:	b	2fab8 <__assert_fail@plt+0x1cec8>
   2fa14:	ldr	r0, [r4, #20]
   2fa18:	cmp	r0, #1
   2fa1c:	blt	2fab8 <__assert_fail@plt+0x1cec8>
   2fa20:	mov	r6, #0
   2fa24:	mov	r0, #0
   2fa28:	sub	r2, fp, #48	; 0x30
   2fa2c:	str	r0, [fp, #-44]	; 0xffffffd4
   2fa30:	str	r0, [fp, #-48]	; 0xffffffd0
   2fa34:	ldr	r0, [r4]
   2fa38:	ldr	r1, [r0, r6, lsl #2]
   2fa3c:	add	r0, sp, #32
   2fa40:	bl	124b8 <wcrtomb@plt>
   2fa44:	cmn	r0, #1
   2fa48:	beq	2fa64 <__assert_fail@plt+0x1ce74>
   2fa4c:	ldrb	r0, [sp, #32]
   2fa50:	cmp	r9, #0
   2fa54:	strb	r7, [r5, r0]
   2fa58:	beq	2fa64 <__assert_fail@plt+0x1ce74>
   2fa5c:	bl	12608 <tolower@plt>
   2fa60:	strb	r7, [r5, r0]
   2fa64:	ldr	r0, [sp, #20]
   2fa68:	ldrb	r0, [r0, #14]
   2fa6c:	tst	r0, #64	; 0x40
   2fa70:	beq	2faa8 <__assert_fail@plt+0x1ceb8>
   2fa74:	ldr	r0, [r8, #92]	; 0x5c
   2fa78:	cmp	r0, #2
   2fa7c:	blt	2faa8 <__assert_fail@plt+0x1ceb8>
   2fa80:	ldr	r0, [r4]
   2fa84:	ldr	r0, [r0, r6, lsl #2]
   2fa88:	bl	12620 <towlower@plt>
   2fa8c:	mov	r1, r0
   2fa90:	add	r0, sp, #32
   2fa94:	sub	r2, fp, #48	; 0x30
   2fa98:	bl	124b8 <wcrtomb@plt>
   2fa9c:	cmn	r0, #1
   2faa0:	ldrbne	r0, [sp, #32]
   2faa4:	strbne	r7, [r5, r0]
   2faa8:	ldr	r0, [r4, #20]
   2faac:	add	r6, r6, #1
   2fab0:	cmp	r6, r0
   2fab4:	blt	2fa24 <__assert_fail@plt+0x1ce34>
   2fab8:	ldr	r1, [sp, #12]
   2fabc:	ldr	r2, [sp, #16]
   2fac0:	ldr	r0, [r1, #8]
   2fac4:	add	r2, r2, #1
   2fac8:	cmp	r2, r0
   2facc:	blt	2f7f0 <__assert_fail@plt+0x1cc00>
   2fad0:	b	2fafc <__assert_fail@plt+0x1cf0c>
   2fad4:	mov	r0, r5
   2fad8:	mov	r1, #1
   2fadc:	mov	r2, #256	; 0x100
   2fae0:	bl	12938 <memset@plt>
   2fae4:	cmp	r4, #2
   2fae8:	bne	2fafc <__assert_fail@plt+0x1cf0c>
   2faec:	ldr	r1, [sp, #20]
   2faf0:	ldrb	r0, [r1, #28]
   2faf4:	orr	r0, r0, #1
   2faf8:	strb	r0, [r1, #28]
   2fafc:	sub	sp, fp, #28
   2fb00:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2fb04:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   2fb08:	add	fp, sp, #24
   2fb0c:	mov	r4, r0
   2fb10:	mov	r0, #0
   2fb14:	mov	r6, r2
   2fb18:	mov	r8, r1
   2fb1c:	str	r0, [r4]
   2fb20:	str	r0, [r4, #4]
   2fb24:	str	r0, [r4, #8]
   2fb28:	mov	r0, #256	; 0x100
   2fb2c:	bl	2de8c <__assert_fail@plt+0x1b29c>
   2fb30:	cmp	r0, #0
   2fb34:	str	r0, [r4, #16]
   2fb38:	beq	2fbe8 <__assert_fail@plt+0x1cff8>
   2fb3c:	movw	r0, #45820	; 0xb2fc
   2fb40:	tst	r6, #1
   2fb44:	and	r1, r6, #2
   2fb48:	movt	r0, #3
   2fb4c:	movweq	r0, #710	; 0x2c6
   2fb50:	movteq	r0, #257	; 0x101
   2fb54:	tst	r6, #4
   2fb58:	orr	r5, r0, r1, lsl #21
   2fb5c:	bne	2fb70 <__assert_fail@plt+0x1cf80>
   2fb60:	ldrb	r0, [r4, #28]
   2fb64:	and	r0, r0, #127	; 0x7f
   2fb68:	strb	r0, [r4, #28]
   2fb6c:	b	2fb90 <__assert_fail@plt+0x1cfa0>
   2fb70:	ldrb	r0, [r4, #28]
   2fb74:	mvn	r1, #127	; 0x7f
   2fb78:	orr	r0, r0, r1
   2fb7c:	movw	r1, #45758	; 0xb2be
   2fb80:	movt	r1, #323	; 0x143
   2fb84:	strb	r0, [r4, #28]
   2fb88:	and	r1, r5, r1
   2fb8c:	orr	r5, r1, #256	; 0x100
   2fb90:	and	r1, r6, #8
   2fb94:	and	r0, r0, #239	; 0xef
   2fb98:	mov	r7, #0
   2fb9c:	orr	r0, r0, r1, lsl #1
   2fba0:	str	r7, [r4, #20]
   2fba4:	strb	r0, [r4, #28]
   2fba8:	mov	r0, r8
   2fbac:	bl	128c0 <strlen@plt>
   2fbb0:	mov	r2, r0
   2fbb4:	mov	r0, r4
   2fbb8:	mov	r1, r8
   2fbbc:	mov	r3, r5
   2fbc0:	bl	2ea90 <__assert_fail@plt+0x1bea0>
   2fbc4:	cmp	r0, #16
   2fbc8:	mov	r5, r0
   2fbcc:	movweq	r5, #8
   2fbd0:	cmp	r5, #0
   2fbd4:	bne	2fbf0 <__assert_fail@plt+0x1d000>
   2fbd8:	mov	r0, r4
   2fbdc:	bl	2f6ec <__assert_fail@plt+0x1cafc>
   2fbe0:	mov	r0, r7
   2fbe4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   2fbe8:	mov	r7, #12
   2fbec:	b	2fbe0 <__assert_fail@plt+0x1cff0>
   2fbf0:	ldr	r0, [r4, #16]
   2fbf4:	bl	2bcbc <__assert_fail@plt+0x190cc>
   2fbf8:	str	r7, [r4, #16]
   2fbfc:	mov	r7, r5
   2fc00:	b	2fbe0 <__assert_fail@plt+0x1cff0>
   2fc04:	push	{r4, r5, r6, r7, fp, lr}
   2fc08:	add	fp, sp, #16
   2fc0c:	cmp	r0, #17
   2fc10:	bcs	2fc84 <__assert_fail@plt+0x1d094>
   2fc14:	movw	r1, #13240	; 0x33b8
   2fc18:	mov	r4, r2
   2fc1c:	mov	r2, #5
   2fc20:	mov	r5, r3
   2fc24:	movt	r1, #4
   2fc28:	ldr	r0, [r1, r0, lsl #2]
   2fc2c:	movw	r1, #12856	; 0x3238
   2fc30:	movt	r1, #4
   2fc34:	add	r1, r1, r0
   2fc38:	mov	r0, #0
   2fc3c:	bl	12674 <dcgettext@plt>
   2fc40:	mov	r6, r0
   2fc44:	bl	128c0 <strlen@plt>
   2fc48:	add	r7, r0, #1
   2fc4c:	cmp	r5, #0
   2fc50:	beq	2fc6c <__assert_fail@plt+0x1d07c>
   2fc54:	cmp	r7, r5
   2fc58:	mov	r2, r7
   2fc5c:	bhi	2fc74 <__assert_fail@plt+0x1d084>
   2fc60:	mov	r0, r4
   2fc64:	mov	r1, r6
   2fc68:	bl	125f0 <memcpy@plt>
   2fc6c:	mov	r0, r7
   2fc70:	pop	{r4, r5, r6, r7, fp, pc}
   2fc74:	sub	r2, r5, #1
   2fc78:	mov	r0, #0
   2fc7c:	strb	r0, [r4, r2]
   2fc80:	b	2fc60 <__assert_fail@plt+0x1d070>
   2fc84:	bl	12b9c <abort@plt>
   2fc88:	push	{r4, r5, fp, lr}
   2fc8c:	add	fp, sp, #8
   2fc90:	ldr	r5, [r0]
   2fc94:	mov	r4, r0
   2fc98:	cmp	r5, #0
   2fc9c:	beq	2fcc8 <__assert_fail@plt+0x1d0d8>
   2fca0:	movw	r0, #9664	; 0x25c0
   2fca4:	movw	r1, #10600	; 0x2968
   2fca8:	movt	r0, #1
   2fcac:	movt	r1, #1
   2fcb0:	orrs	r0, r1, r0
   2fcb4:	beq	2fcc0 <__assert_fail@plt+0x1d0d0>
   2fcb8:	add	r0, r5, #136	; 0x88
   2fcbc:	bl	1253c <pthread_mutex_destroy@plt>
   2fcc0:	mov	r0, r5
   2fcc4:	bl	2fcf0 <__assert_fail@plt+0x1d100>
   2fcc8:	mov	r5, #0
   2fccc:	str	r5, [r4]
   2fcd0:	str	r5, [r4, #4]
   2fcd4:	ldr	r0, [r4, #16]
   2fcd8:	bl	2bcbc <__assert_fail@plt+0x190cc>
   2fcdc:	str	r5, [r4, #16]
   2fce0:	ldr	r0, [r4, #20]
   2fce4:	bl	2bcbc <__assert_fail@plt+0x190cc>
   2fce8:	str	r5, [r4, #20]
   2fcec:	pop	{r4, r5, fp, pc}
   2fcf0:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   2fcf4:	add	fp, sp, #24
   2fcf8:	mov	r8, r0
   2fcfc:	ldr	r0, [r0]
   2fd00:	cmp	r0, #0
   2fd04:	beq	2fd4c <__assert_fail@plt+0x1d15c>
   2fd08:	ldr	r1, [r8, #8]
   2fd0c:	cmp	r1, #0
   2fd10:	beq	2fd4c <__assert_fail@plt+0x1d15c>
   2fd14:	bl	31cdc <__assert_fail@plt+0x1f0ec>
   2fd18:	ldr	r0, [r8, #8]
   2fd1c:	cmp	r0, #2
   2fd20:	bcc	2fd4c <__assert_fail@plt+0x1d15c>
   2fd24:	mov	r5, #1
   2fd28:	mov	r6, #8
   2fd2c:	ldr	r0, [r8]
   2fd30:	add	r0, r0, r6
   2fd34:	bl	31cdc <__assert_fail@plt+0x1f0ec>
   2fd38:	ldr	r0, [r8, #8]
   2fd3c:	add	r5, r5, #1
   2fd40:	add	r6, r6, #8
   2fd44:	cmp	r5, r0
   2fd48:	bcc	2fd2c <__assert_fail@plt+0x1d13c>
   2fd4c:	ldr	r0, [r8, #12]
   2fd50:	bl	2bcbc <__assert_fail@plt+0x190cc>
   2fd54:	ldr	r0, [r8, #8]
   2fd58:	cmp	r0, #0
   2fd5c:	beq	2fdb8 <__assert_fail@plt+0x1d1c8>
   2fd60:	mov	r5, #0
   2fd64:	mov	r6, #8
   2fd68:	ldr	r0, [r8, #24]
   2fd6c:	cmp	r0, #0
   2fd70:	beq	2fd7c <__assert_fail@plt+0x1d18c>
   2fd74:	ldr	r0, [r0, r6]
   2fd78:	bl	2bcbc <__assert_fail@plt+0x190cc>
   2fd7c:	ldr	r0, [r8, #28]
   2fd80:	cmp	r0, #0
   2fd84:	beq	2fd90 <__assert_fail@plt+0x1d1a0>
   2fd88:	ldr	r0, [r0, r6]
   2fd8c:	bl	2bcbc <__assert_fail@plt+0x190cc>
   2fd90:	ldr	r0, [r8, #20]
   2fd94:	cmp	r0, #0
   2fd98:	beq	2fda4 <__assert_fail@plt+0x1d1b4>
   2fd9c:	ldr	r0, [r0, r6]
   2fda0:	bl	2bcbc <__assert_fail@plt+0x190cc>
   2fda4:	ldr	r0, [r8, #8]
   2fda8:	add	r5, r5, #1
   2fdac:	add	r6, r6, #12
   2fdb0:	cmp	r5, r0
   2fdb4:	bcc	2fd68 <__assert_fail@plt+0x1d178>
   2fdb8:	ldr	r0, [r8, #20]
   2fdbc:	bl	2bcbc <__assert_fail@plt+0x190cc>
   2fdc0:	ldr	r0, [r8, #24]
   2fdc4:	bl	2bcbc <__assert_fail@plt+0x190cc>
   2fdc8:	ldr	r0, [r8, #28]
   2fdcc:	bl	2bcbc <__assert_fail@plt+0x190cc>
   2fdd0:	ldr	r0, [r8]
   2fdd4:	bl	2bcbc <__assert_fail@plt+0x190cc>
   2fdd8:	ldr	r5, [r8, #32]
   2fddc:	cmp	r5, #0
   2fde0:	beq	2fe40 <__assert_fail@plt+0x1d250>
   2fde4:	mov	r6, #0
   2fde8:	add	r0, r6, r6, lsl #1
   2fdec:	ldr	r0, [r5, r0, lsl #2]!
   2fdf0:	add	r7, r5, #8
   2fdf4:	cmp	r0, #1
   2fdf8:	blt	2fe1c <__assert_fail@plt+0x1d22c>
   2fdfc:	mov	r4, #0
   2fe00:	ldr	r0, [r7]
   2fe04:	ldr	r0, [r0, r4, lsl #2]
   2fe08:	bl	31d0c <__assert_fail@plt+0x1f11c>
   2fe0c:	ldr	r0, [r5]
   2fe10:	add	r4, r4, #1
   2fe14:	cmp	r4, r0
   2fe18:	blt	2fe00 <__assert_fail@plt+0x1d210>
   2fe1c:	ldr	r0, [r7]
   2fe20:	bl	2bcbc <__assert_fail@plt+0x190cc>
   2fe24:	ldr	r0, [r8, #68]	; 0x44
   2fe28:	cmp	r6, r0
   2fe2c:	bcs	2fe3c <__assert_fail@plt+0x1d24c>
   2fe30:	ldr	r5, [r8, #32]
   2fe34:	add	r6, r6, #1
   2fe38:	b	2fde8 <__assert_fail@plt+0x1d1f8>
   2fe3c:	ldr	r5, [r8, #32]
   2fe40:	mov	r0, r5
   2fe44:	bl	2bcbc <__assert_fail@plt+0x190cc>
   2fe48:	ldr	r0, [r8, #60]	; 0x3c
   2fe4c:	movw	r1, #13308	; 0x33fc
   2fe50:	movt	r1, #4
   2fe54:	cmp	r0, r1
   2fe58:	beq	2fe60 <__assert_fail@plt+0x1d270>
   2fe5c:	bl	2bcbc <__assert_fail@plt+0x190cc>
   2fe60:	ldr	r0, [r8, #132]	; 0x84
   2fe64:	bl	2bcbc <__assert_fail@plt+0x190cc>
   2fe68:	mov	r0, r8
   2fe6c:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   2fe70:	b	2bcbc <__assert_fail@plt+0x190cc>
   2fe74:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2fe78:	add	fp, sp, #28
   2fe7c:	sub	sp, sp, #28
   2fe80:	ldr	sl, [fp, #8]
   2fe84:	mov	r7, #2
   2fe88:	cmp	sl, #7
   2fe8c:	bhi	2ff60 <__assert_fail@plt+0x1d370>
   2fe90:	mov	r5, r0
   2fe94:	ldr	r0, [r0]
   2fe98:	mov	r6, r3
   2fe9c:	mov	r9, r2
   2fea0:	mov	r4, r1
   2fea4:	tst	sl, #4
   2fea8:	str	r0, [sp, #24]
   2feac:	bne	2fec4 <__assert_fail@plt+0x1d2d4>
   2feb0:	mov	r0, r4
   2feb4:	bl	128c0 <strlen@plt>
   2feb8:	mov	r7, r0
   2febc:	mov	r8, #0
   2fec0:	b	2fecc <__assert_fail@plt+0x1d2dc>
   2fec4:	ldr	r8, [r6]
   2fec8:	ldr	r7, [r6, #4]
   2fecc:	movw	r0, #9664	; 0x25c0
   2fed0:	movw	r1, #10600	; 0x2968
   2fed4:	movt	r0, #1
   2fed8:	movt	r1, #1
   2fedc:	orrs	r0, r1, r0
   2fee0:	str	r0, [sp, #20]
   2fee4:	beq	2fef4 <__assert_fail@plt+0x1d304>
   2fee8:	ldr	r0, [sp, #24]
   2feec:	add	r0, r0, #136	; 0x88
   2fef0:	bl	1259c <pthread_mutex_lock@plt>
   2fef4:	ldrb	r0, [r5, #28]
   2fef8:	tst	r0, #16
   2fefc:	bne	2ff10 <__assert_fail@plt+0x1d320>
   2ff00:	str	r7, [sp]
   2ff04:	stmib	sp, {r7, r9}
   2ff08:	str	r6, [sp, #12]
   2ff0c:	b	2ff24 <__assert_fail@plt+0x1d334>
   2ff10:	mov	r0, #0
   2ff14:	str	r7, [sp]
   2ff18:	str	r7, [sp, #4]
   2ff1c:	str	r0, [sp, #8]
   2ff20:	str	r0, [sp, #12]
   2ff24:	mov	r0, r5
   2ff28:	mov	r1, r4
   2ff2c:	mov	r2, r7
   2ff30:	mov	r3, r8
   2ff34:	str	sl, [sp, #16]
   2ff38:	bl	2ff6c <__assert_fail@plt+0x1d37c>
   2ff3c:	mov	r7, r0
   2ff40:	ldr	r0, [sp, #20]
   2ff44:	cmp	r0, #0
   2ff48:	beq	2ff58 <__assert_fail@plt+0x1d368>
   2ff4c:	ldr	r0, [sp, #24]
   2ff50:	add	r0, r0, #136	; 0x88
   2ff54:	bl	12458 <pthread_mutex_unlock@plt>
   2ff58:	cmp	r7, #0
   2ff5c:	movwne	r7, #1
   2ff60:	mov	r0, r7
   2ff64:	sub	sp, fp, #28
   2ff68:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2ff6c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2ff70:	add	fp, sp, #28
   2ff74:	sub	sp, sp, #436	; 0x1b4
   2ff78:	ldr	r5, [r0]
   2ff7c:	str	r2, [sp, #80]	; 0x50
   2ff80:	mov	r7, r1
   2ff84:	mov	r6, r0
   2ff88:	add	r0, sp, #112	; 0x70
   2ff8c:	mov	r1, #0
   2ff90:	mov	r2, #136	; 0x88
   2ff94:	mov	r4, r3
   2ff98:	mov	r8, #0
   2ff9c:	bl	12938 <memset@plt>
   2ffa0:	str	r5, [sp, #196]	; 0xc4
   2ffa4:	ldr	r9, [fp, #16]
   2ffa8:	ldr	ip, [fp, #8]
   2ffac:	mov	r0, #0
   2ffb0:	ldr	r1, [r6, #16]
   2ffb4:	cmp	r1, #0
   2ffb8:	beq	2ffd4 <__assert_fail@plt+0x1d3e4>
   2ffbc:	ldrb	r2, [r6, #28]
   2ffc0:	and	r2, r2, #9
   2ffc4:	cmp	r2, #8
   2ffc8:	movne	r1, #0
   2ffcc:	subs	r0, r4, ip
   2ffd0:	movne	r0, r1
   2ffd4:	ldr	r2, [r6, #24]
   2ffd8:	ldr	r1, [r6, #8]
   2ffdc:	mov	sl, #1
   2ffe0:	mvn	r3, r2
   2ffe4:	cmp	r2, r9
   2ffe8:	addcc	r8, r3, r9
   2ffec:	cmp	r1, #0
   2fff0:	beq	3173c <__assert_fail@plt+0x1eb4c>
   2fff4:	ldr	r1, [r5, #36]	; 0x24
   2fff8:	cmp	r1, #0
   2fffc:	ldrne	r2, [r5, #40]	; 0x28
   30000:	cmpne	r2, #0
   30004:	beq	3173c <__assert_fail@plt+0x1eb4c>
   30008:	ldr	r3, [r5, #44]	; 0x2c
   3000c:	cmp	r3, #0
   30010:	strne	r7, [sp, #104]	; 0x68
   30014:	ldrne	r7, [r5, #48]	; 0x30
   30018:	cmpne	r7, #0
   3001c:	beq	3173c <__assert_fail@plt+0x1eb4c>
   30020:	ldr	r1, [r1, #8]
   30024:	ldr	r7, [r6, #20]
   30028:	str	r0, [sp, #100]	; 0x64
   3002c:	cmp	r1, #0
   30030:	str	r7, [sp, #108]	; 0x6c
   30034:	beq	30040 <__assert_fail@plt+0x1d450>
   30038:	ldr	lr, [sp, #104]	; 0x68
   3003c:	b	30050 <__assert_fail@plt+0x1d460>
   30040:	ldr	r1, [r2, #8]
   30044:	ldr	lr, [sp, #104]	; 0x68
   30048:	cmp	r1, #0
   3004c:	beq	30fa4 <__assert_fail@plt+0x1e3b4>
   30050:	mov	r0, ip
   30054:	str	r0, [sp, #92]	; 0x5c
   30058:	subs	r9, r9, r8
   3005c:	mov	r0, #1
   30060:	str	r0, [sp, #60]	; 0x3c
   30064:	bne	30078 <__assert_fail@plt+0x1d488>
   30068:	ldr	r0, [r5, #76]	; 0x4c
   3006c:	cmp	r0, #0
   30070:	movwne	r0, #1
   30074:	str	r0, [sp, #60]	; 0x3c
   30078:	ldr	r0, [r6, #12]
   3007c:	ldr	r2, [r5, #92]	; 0x5c
   30080:	ldr	r7, [sp, #108]	; 0x6c
   30084:	ldr	ip, [r5, #8]
   30088:	str	r7, [sp, #176]	; 0xb0
   3008c:	str	lr, [sp, #112]	; 0x70
   30090:	str	r2, [sp, #192]	; 0xc0
   30094:	ubfx	r3, r0, #22, #1
   30098:	and	r0, r0, #4194304	; 0x400000
   3009c:	orrs	r0, r7, r0
   300a0:	ldr	r7, [sp, #80]	; 0x50
   300a4:	strb	r3, [sp, #184]	; 0xb8
   300a8:	movwne	r0, #1
   300ac:	strb	r0, [sp, #187]	; 0xbb
   300b0:	add	r0, sp, #112	; 0x70
   300b4:	ldrb	r1, [r5, #88]	; 0x58
   300b8:	add	r3, r0, #44	; 0x2c
   300bc:	vdup.32	q8, r7
   300c0:	vst1.32	{d16-d17}, [r3]
   300c4:	ubfx	r3, r1, #3, #1
   300c8:	strb	r3, [sp, #186]	; 0xba
   300cc:	ubfx	r1, r1, #2, #1
   300d0:	strb	r1, [sp, #185]	; 0xb9
   300d4:	add	r1, ip, #1
   300d8:	cmp	r2, r1
   300dc:	movgt	r1, r2
   300e0:	add	r2, r7, #1
   300e4:	cmp	r2, r1
   300e8:	movlt	r1, r2
   300ec:	bl	31e28 <__assert_fail@plt+0x1f238>
   300f0:	cmp	r0, #0
   300f4:	str	r5, [sp, #96]	; 0x60
   300f8:	bne	31760 <__assert_fail@plt+0x1eb70>
   300fc:	add	r1, r5, #96	; 0x60
   30100:	str	r9, [sp, #84]	; 0x54
   30104:	str	r8, [sp, #32]
   30108:	ldr	r3, [fp, #24]
   3010c:	ldr	r0, [fp, #12]
   30110:	str	r1, [sp, #180]	; 0xb4
   30114:	ldrb	r1, [r5, #88]	; 0x58
   30118:	ubfx	r1, r1, #4, #1
   3011c:	ldr	r9, [sp, #104]	; 0x68
   30120:	strb	r1, [sp, #190]	; 0xbe
   30124:	mov	r1, #0
   30128:	ldrb	r2, [sp, #187]	; 0xbb
   3012c:	cmp	r2, #0
   30130:	bne	30148 <__assert_fail@plt+0x1d558>
   30134:	str	r9, [sp, #116]	; 0x74
   30138:	ldr	r1, [r5, #92]	; 0x5c
   3013c:	cmp	r1, #1
   30140:	ldr	r1, [sp, #80]	; 0x50
   30144:	movwgt	r1, #0
   30148:	str	r0, [sp, #168]	; 0xa8
   3014c:	str	r1, [sp, #144]	; 0x90
   30150:	str	r1, [sp, #140]	; 0x8c
   30154:	str	r0, [sp, #164]	; 0xa4
   30158:	str	r6, [sp, #68]	; 0x44
   3015c:	ldr	sl, [sp, #108]	; 0x6c
   30160:	ldrb	r0, [r6, #28]
   30164:	ldr	r6, [sp, #100]	; 0x64
   30168:	lsr	r0, r0, #7
   3016c:	strb	r0, [sp, #189]	; 0xbd
   30170:	mvn	r0, #0
   30174:	ldr	r8, [r5, #76]	; 0x4c
   30178:	str	r0, [sp, #204]	; 0xcc
   3017c:	str	r3, [sp, #200]	; 0xc8
   30180:	lsl	r5, r8, #1
   30184:	cmp	r8, #1
   30188:	blt	301dc <__assert_fail@plt+0x1d5ec>
   3018c:	movw	r0, #43690	; 0xaaaa
   30190:	mov	r2, #12
   30194:	movt	r0, #2730	; 0xaaa
   30198:	cmp	r5, r0
   3019c:	bhi	31700 <__assert_fail@plt+0x1eb10>
   301a0:	add	r0, r8, r8, lsl #1
   301a4:	lsl	r0, r0, #4
   301a8:	bl	2de8c <__assert_fail@plt+0x1b29c>
   301ac:	mov	r6, r0
   301b0:	str	r0, [sp, #228]	; 0xe4
   301b4:	lsl	r0, r8, #3
   301b8:	bl	2de8c <__assert_fail@plt+0x1b29c>
   301bc:	cmp	r0, #0
   301c0:	str	r0, [sp, #244]	; 0xf4
   301c4:	beq	31788 <__assert_fail@plt+0x1eb98>
   301c8:	cmp	r6, #0
   301cc:	ldr	sl, [sp, #108]	; 0x6c
   301d0:	ldr	r6, [sp, #100]	; 0x64
   301d4:	mov	r2, #12
   301d8:	beq	31700 <__assert_fail@plt+0x1eb10>
   301dc:	mov	r0, #1
   301e0:	str	r5, [sp, #240]	; 0xf0
   301e4:	str	r0, [sp, #232]	; 0xe8
   301e8:	ldr	r0, [sp, #84]	; 0x54
   301ec:	str	r5, [sp, #224]	; 0xe0
   301f0:	cmp	r0, #1
   301f4:	bhi	30208 <__assert_fail@plt+0x1d618>
   301f8:	ldr	r0, [sp, #96]	; 0x60
   301fc:	ldrb	r0, [r0, #88]	; 0x58
   30200:	tst	r0, #2
   30204:	beq	30238 <__assert_fail@plt+0x1d648>
   30208:	ldr	r0, [sp, #148]	; 0x94
   3020c:	mov	r2, #12
   30210:	cmn	r0, #-1073741822	; 0xc0000002
   30214:	bhi	31700 <__assert_fail@plt+0x1eb10>
   30218:	mov	r1, #4
   3021c:	add	r0, r1, r0, lsl #2
   30220:	bl	2de8c <__assert_fail@plt+0x1b29c>
   30224:	ldr	r6, [sp, #100]	; 0x64
   30228:	mov	r2, #12
   3022c:	cmp	r0, #0
   30230:	str	r0, [sp, #212]	; 0xd4
   30234:	beq	31700 <__assert_fail@plt+0x1eb10>
   30238:	ldr	r1, [fp, #24]
   3023c:	ldr	r2, [sp, #92]	; 0x5c
   30240:	str	r4, [fp, #-212]	; 0xffffff2c
   30244:	mov	r0, #4
   30248:	mov	r8, #1
   3024c:	mov	r7, r4
   30250:	tst	r1, #1
   30254:	mov	r1, #4
   30258:	mov	r5, r2
   3025c:	movweq	r1, #6
   30260:	cmp	r2, r4
   30264:	str	r1, [sp, #172]	; 0xac
   30268:	ldr	r1, [sp, #96]	; 0x60
   3026c:	mvnlt	r8, #0
   30270:	movlt	r5, r4
   30274:	movlt	r7, r2
   30278:	cmp	r6, #0
   3027c:	ldr	r1, [r1, #92]	; 0x5c
   30280:	str	r1, [sp, #64]	; 0x40
   30284:	beq	302c8 <__assert_fail@plt+0x1d6d8>
   30288:	cmp	r1, #1
   3028c:	beq	302ac <__assert_fail@plt+0x1d6bc>
   30290:	ldr	r0, [sp, #68]	; 0x44
   30294:	ldr	r0, [r0, #12]
   30298:	and	r0, r0, #4194304	; 0x400000
   3029c:	orr	r0, sl, r0
   302a0:	clz	r0, r0
   302a4:	lsr	r0, r0, #5
   302a8:	lsl	r0, r0, #2
   302ac:	cmp	sl, #0
   302b0:	mov	r1, sl
   302b4:	movwne	r1, #1
   302b8:	cmp	r2, r4
   302bc:	orrge	r1, r1, #2
   302c0:	orr	r0, r1, r0
   302c4:	b	302cc <__assert_fail@plt+0x1d6dc>
   302c8:	mov	r0, #8
   302cc:	add	r1, sp, #112	; 0x70
   302d0:	cmp	r2, r4
   302d4:	str	r7, [sp, #56]	; 0x38
   302d8:	str	r8, [sp, #76]	; 0x4c
   302dc:	str	r5, [sp, #72]	; 0x48
   302e0:	add	r1, r1, #32
   302e4:	str	r1, [sp, #28]
   302e8:	sub	r1, fp, #212	; 0xd4
   302ec:	movwlt	r1, #0
   302f0:	cmp	r1, #0
   302f4:	str	r1, [sp, #48]	; 0x30
   302f8:	movwne	r1, #1
   302fc:	str	r1, [sp, #52]	; 0x34
   30300:	sub	r1, fp, #208	; 0xd0
   30304:	add	r1, r1, #16
   30308:	str	r1, [sp, #36]	; 0x24
   3030c:	sub	r1, r0, #4
   30310:	str	r1, [sp, #44]	; 0x2c
   30314:	cmp	r1, #4
   30318:	bhi	30400 <__assert_fail@plt+0x1d810>
   3031c:	ldr	r2, [fp, #24]
   30320:	add	r0, pc, #0
   30324:	ldr	pc, [r0, r1, lsl #2]
   30328:	andeq	r0, r3, ip, lsr r3
   3032c:	andeq	r0, r3, ip, lsr r3
   30330:			; <UNDEFINED> instruction: 0x000303b4
   30334:	andeq	r0, r3, ip, lsl #7
   30338:	andeq	r0, r3, ip, lsl #9
   3033c:	mov	r2, #1
   30340:	cmp	r4, r7
   30344:	blt	31700 <__assert_fail@plt+0x1eb10>
   30348:	ldr	r1, [sp, #80]	; 0x50
   3034c:	cmp	r4, r1
   30350:	mov	r0, #0
   30354:	ldrblt	r0, [r9, r4]
   30358:	cmp	sl, #0
   3035c:	ldrbne	r0, [sl, r0]
   30360:	ldrb	r0, [r6, r0]
   30364:	cmp	r0, #0
   30368:	bne	30488 <__assert_fail@plt+0x1d898>
   3036c:	sub	r0, r4, #1
   30370:	cmp	r4, r7
   30374:	mov	r4, r0
   30378:	str	r0, [fp, #-212]	; 0xffffff2c
   3037c:	bgt	3034c <__assert_fail@plt+0x1d75c>
   30380:	b	31700 <__assert_fail@plt+0x1eb10>
   30384:	add	r4, r4, #1
   30388:	str	r4, [fp, #-212]	; 0xffffff2c
   3038c:	cmp	r4, r5
   30390:	bge	303cc <__assert_fail@plt+0x1d7dc>
   30394:	ldrb	r0, [r9, r4]
   30398:	ldrb	r0, [sl, r0]
   3039c:	ldrb	r0, [r6, r0]
   303a0:	cmp	r0, #0
   303a4:	beq	30384 <__assert_fail@plt+0x1d794>
   303a8:	b	303cc <__assert_fail@plt+0x1d7dc>
   303ac:	add	r4, r4, #1
   303b0:	str	r4, [fp, #-212]	; 0xffffff2c
   303b4:	cmp	r4, r5
   303b8:	bge	303cc <__assert_fail@plt+0x1d7dc>
   303bc:	ldrb	r0, [r9, r4]
   303c0:	ldrb	r0, [r6, r0]
   303c4:	cmp	r0, #0
   303c8:	beq	303ac <__assert_fail@plt+0x1d7bc>
   303cc:	cmp	r4, r5
   303d0:	bne	3048c <__assert_fail@plt+0x1d89c>
   303d4:	ldr	r1, [sp, #80]	; 0x50
   303d8:	mov	r0, #0
   303dc:	mov	r4, r5
   303e0:	cmp	r5, r1
   303e4:	ldrblt	r0, [r9, r5]
   303e8:	cmp	sl, #0
   303ec:	ldrbne	r0, [sl, r0]
   303f0:	ldrb	r0, [r6, r0]
   303f4:	cmp	r0, #0
   303f8:	bne	3048c <__assert_fail@plt+0x1d89c>
   303fc:	b	31790 <__assert_fail@plt+0x1eba0>
   30400:	ldr	r0, [sp, #136]	; 0x88
   30404:	ldr	r2, [sp, #144]	; 0x90
   30408:	sub	r1, r4, r0
   3040c:	cmp	r1, r2
   30410:	bcs	30458 <__assert_fail@plt+0x1d868>
   30414:	ldr	r3, [sp, #140]	; 0x8c
   30418:	mov	r2, #0
   3041c:	cmp	r1, r3
   30420:	bcs	3042c <__assert_fail@plt+0x1d83c>
   30424:	ldr	r2, [sp, #116]	; 0x74
   30428:	ldrb	r2, [r2, r1]
   3042c:	ldrb	r1, [r6, r2]
   30430:	cmp	r1, #0
   30434:	bne	30488 <__assert_fail@plt+0x1d898>
   30438:	add	r4, r4, r8
   3043c:	mov	r2, #1
   30440:	cmp	r4, r7
   30444:	str	r4, [fp, #-212]	; 0xffffff2c
   30448:	blt	31700 <__assert_fail@plt+0x1eb10>
   3044c:	cmp	r4, r5
   30450:	ble	30404 <__assert_fail@plt+0x1d814>
   30454:	b	31700 <__assert_fail@plt+0x1eb10>
   30458:	ldr	r2, [fp, #24]
   3045c:	add	r0, sp, #112	; 0x70
   30460:	mov	r1, r4
   30464:	bl	36d1c <__assert_fail@plt+0x2412c>
   30468:	cmp	r0, #0
   3046c:	bne	31760 <__assert_fail@plt+0x1eb70>
   30470:	ldr	r0, [sp, #136]	; 0x88
   30474:	ldr	r4, [fp, #-212]	; 0xffffff2c
   30478:	ldr	r7, [sp, #56]	; 0x38
   3047c:	ldr	r6, [sp, #100]	; 0x64
   30480:	sub	r1, r4, r0
   30484:	b	30414 <__assert_fail@plt+0x1d824>
   30488:	ldr	r2, [fp, #24]
   3048c:	add	r0, sp, #112	; 0x70
   30490:	mov	r1, r4
   30494:	bl	36d1c <__assert_fail@plt+0x2412c>
   30498:	cmp	r0, #0
   3049c:	bne	31760 <__assert_fail@plt+0x1eb70>
   304a0:	ldr	r0, [sp, #64]	; 0x40
   304a4:	cmp	r0, #1
   304a8:	ldrne	r0, [sp, #140]	; 0x8c
   304ac:	cmpne	r0, #0
   304b0:	bne	304e8 <__assert_fail@plt+0x1d8f8>
   304b4:	mov	r0, #0
   304b8:	str	r0, [sp, #220]	; 0xdc
   304bc:	str	r0, [sp, #232]	; 0xe8
   304c0:	str	r0, [sp, #216]	; 0xd8
   304c4:	str	r0, [fp, #-64]	; 0xffffffc0
   304c8:	ldr	r4, [sp, #196]	; 0xc4
   304cc:	ldr	r7, [sp, #152]	; 0x98
   304d0:	ldr	r8, [r4, #36]	; 0x24
   304d4:	ldrsb	r0, [r8, #52]	; 0x34
   304d8:	cmn	r0, #1
   304dc:	ble	304fc <__assert_fail@plt+0x1d90c>
   304e0:	ldr	r5, [sp, #52]	; 0x34
   304e4:	b	30560 <__assert_fail@plt+0x1d970>
   304e8:	ldr	r0, [sp, #120]	; 0x78
   304ec:	ldr	r0, [r0]
   304f0:	cmn	r0, #1
   304f4:	bne	304b4 <__assert_fail@plt+0x1d8c4>
   304f8:	b	30ce8 <__assert_fail@plt+0x1e0f8>
   304fc:	ldr	r2, [sp, #200]	; 0xc8
   30500:	sub	r1, r7, #1
   30504:	add	r0, sp, #112	; 0x70
   30508:	bl	37554 <__assert_fail@plt+0x24964>
   3050c:	ldr	r5, [sp, #52]	; 0x34
   30510:	tst	r0, #1
   30514:	bne	3055c <__assert_fail@plt+0x1d96c>
   30518:	mov	r3, r0
   3051c:	cmp	r0, #0
   30520:	beq	30560 <__assert_fail@plt+0x1d970>
   30524:	ands	r1, r3, #2
   30528:	and	r0, r3, #4
   3052c:	cmpne	r0, #0
   30530:	bne	30d18 <__assert_fail@plt+0x1e128>
   30534:	cmp	r1, #0
   30538:	bne	30d20 <__assert_fail@plt+0x1e130>
   3053c:	cmp	r0, #0
   30540:	beq	30560 <__assert_fail@plt+0x1d970>
   30544:	ldr	r2, [r8, #40]	; 0x28
   30548:	sub	r0, fp, #64	; 0x40
   3054c:	mov	r1, r4
   30550:	bl	368dc <__assert_fail@plt+0x23cec>
   30554:	mov	r8, r0
   30558:	b	30560 <__assert_fail@plt+0x1d970>
   3055c:	ldr	r8, [r4, #40]	; 0x28
   30560:	cmp	r8, #0
   30564:	beq	31788 <__assert_fail@plt+0x1eb98>
   30568:	ldr	r0, [sp, #212]	; 0xd4
   3056c:	mov	r6, r5
   30570:	cmp	r0, #0
   30574:	beq	3058c <__assert_fail@plt+0x1d99c>
   30578:	str	r8, [r0, r7, lsl #2]
   3057c:	mov	r6, r5
   30580:	ldr	r0, [r4, #76]	; 0x4c
   30584:	cmp	r0, #0
   30588:	bne	30d44 <__assert_fail@plt+0x1e154>
   3058c:	ldrb	r0, [r8, #52]	; 0x34
   30590:	tst	r0, #16
   30594:	bne	30d28 <__assert_fail@plt+0x1e138>
   30598:	mvn	r0, #0
   3059c:	mov	r2, #0
   305a0:	str	r0, [sp, #88]	; 0x58
   305a4:	ldr	r0, [sp, #152]	; 0x98
   305a8:	ldr	r1, [sp, #168]	; 0xa8
   305ac:	cmp	r1, r0
   305b0:	ble	309c8 <__assert_fail@plt+0x1ddd8>
   305b4:	ldr	r5, [sp, #48]	; 0x30
   305b8:	str	r2, [sp, #40]	; 0x28
   305bc:	ldr	r2, [sp, #148]	; 0x94
   305c0:	ldr	r1, [sp, #160]	; 0xa0
   305c4:	str	r7, [sp, #92]	; 0x5c
   305c8:	add	r7, r0, #1
   305cc:	mov	r9, r6
   305d0:	mov	r6, r8
   305d4:	cmp	r7, r2
   305d8:	blt	305e4 <__assert_fail@plt+0x1d9f4>
   305dc:	cmp	r2, r1
   305e0:	blt	30980 <__assert_fail@plt+0x1dd90>
   305e4:	ldr	r2, [sp, #140]	; 0x8c
   305e8:	cmp	r7, r2
   305ec:	blt	305f8 <__assert_fail@plt+0x1da08>
   305f0:	cmp	r2, r1
   305f4:	blt	30980 <__assert_fail@plt+0x1dd90>
   305f8:	ldrb	r0, [r6, #52]	; 0x34
   305fc:	tst	r0, #32
   30600:	bne	307a8 <__assert_fail@plt+0x1dbb8>
   30604:	ldr	r1, [sp, #152]	; 0x98
   30608:	ldr	r0, [sp, #116]	; 0x74
   3060c:	add	r2, r1, #1
   30610:	str	r2, [sp, #152]	; 0x98
   30614:	ldrb	r4, [r0, r1]
   30618:	ldr	r0, [r6, #44]	; 0x2c
   3061c:	cmp	r0, #0
   30620:	bne	3064c <__assert_fail@plt+0x1da5c>
   30624:	ldr	r8, [r6, #48]	; 0x30
   30628:	cmp	r8, #0
   3062c:	bne	3099c <__assert_fail@plt+0x1ddac>
   30630:	ldr	r0, [sp, #196]	; 0xc4
   30634:	mov	r1, r6
   30638:	bl	395a0 <__assert_fail@plt+0x269b0>
   3063c:	cmp	r0, #0
   30640:	bne	30618 <__assert_fail@plt+0x1da28>
   30644:	mov	r0, #12
   30648:	b	309bc <__assert_fail@plt+0x1ddcc>
   3064c:	ldr	r8, [r0, r4, lsl #2]
   30650:	ldr	r0, [sp, #212]	; 0xd4
   30654:	cmp	r0, #0
   30658:	beq	30670 <__assert_fail@plt+0x1da80>
   3065c:	sub	r0, fp, #64	; 0x40
   30660:	add	r1, sp, #112	; 0x70
   30664:	mov	r2, r8
   30668:	bl	37f0c <__assert_fail@plt+0x2531c>
   3066c:	mov	r8, r0
   30670:	cmp	r8, #0
   30674:	beq	306b0 <__assert_fail@plt+0x1dac0>
   30678:	sub	r0, r6, r8
   3067c:	mov	r6, r9
   30680:	clz	r0, r0
   30684:	lsr	r0, r0, #5
   30688:	ands	r6, r9, r0
   3068c:	ldr	r0, [sp, #92]	; 0x5c
   30690:	movne	r0, r7
   30694:	mov	r7, r0
   30698:	ldrb	r0, [r8, #52]	; 0x34
   3069c:	tst	r0, #16
   306a0:	bne	3073c <__assert_fail@plt+0x1db4c>
   306a4:	ldr	r9, [sp, #104]	; 0x68
   306a8:	ldr	sl, [sp, #108]	; 0x6c
   306ac:	b	30788 <__assert_fail@plt+0x1db98>
   306b0:	ldr	r0, [fp, #-64]	; 0xffffffc0
   306b4:	cmp	r0, #0
   306b8:	bne	31788 <__assert_fail@plt+0x1eb98>
   306bc:	ldr	r0, [sp, #40]	; 0x28
   306c0:	ldr	r1, [sp, #60]	; 0x3c
   306c4:	cmp	r0, #0
   306c8:	mvn	r1, r1
   306cc:	movwne	r0, #1
   306d0:	tst	r1, r0
   306d4:	bne	309d0 <__assert_fail@plt+0x1dde0>
   306d8:	ldr	r0, [sp, #212]	; 0xd4
   306dc:	cmp	r0, #0
   306e0:	beq	309d0 <__assert_fail@plt+0x1dde0>
   306e4:	ldr	r2, [sp, #152]	; 0x98
   306e8:	ldr	r1, [sp, #216]	; 0xd8
   306ec:	add	r0, r0, #4
   306f0:	cmp	r2, r1
   306f4:	bge	309d0 <__assert_fail@plt+0x1dde0>
   306f8:	add	r3, r2, #1
   306fc:	str	r3, [sp, #152]	; 0x98
   30700:	ldr	r2, [r0, r2, lsl #2]
   30704:	cmp	r2, #0
   30708:	mov	r2, r3
   3070c:	beq	306f0 <__assert_fail@plt+0x1db00>
   30710:	sub	r0, fp, #64	; 0x40
   30714:	add	r1, sp, #112	; 0x70
   30718:	mov	r2, #0
   3071c:	bl	37f0c <__assert_fail@plt+0x2531c>
   30720:	cmp	r0, #0
   30724:	mov	r8, r0
   30728:	ldreq	r0, [fp, #-64]	; 0xffffffc0
   3072c:	cmpeq	r0, #0
   30730:	bne	3079c <__assert_fail@plt+0x1dbac>
   30734:	ldr	r0, [sp, #212]	; 0xd4
   30738:	b	306e4 <__assert_fail@plt+0x1daf4>
   3073c:	ldr	r9, [sp, #104]	; 0x68
   30740:	ldr	sl, [sp, #108]	; 0x6c
   30744:	sxtb	r0, r0
   30748:	cmn	r0, #1
   3074c:	bgt	30768 <__assert_fail@plt+0x1db78>
   30750:	ldr	r2, [sp, #152]	; 0x98
   30754:	add	r0, sp, #112	; 0x70
   30758:	mov	r1, r8
   3075c:	bl	373ec <__assert_fail@plt+0x247fc>
   30760:	cmp	r0, #0
   30764:	beq	30788 <__assert_fail@plt+0x1db98>
   30768:	ldr	r0, [sp, #152]	; 0x98
   3076c:	str	r0, [sp, #88]	; 0x58
   30770:	ldr	r0, [sp, #60]	; 0x3c
   30774:	cmp	r0, #0
   30778:	beq	309f0 <__assert_fail@plt+0x1de00>
   3077c:	mov	r5, #0
   30780:	mov	r0, #1
   30784:	str	r0, [sp, #40]	; 0x28
   30788:	ldr	r0, [sp, #152]	; 0x98
   3078c:	ldr	r1, [sp, #168]	; 0xa8
   30790:	cmp	r1, r0
   30794:	bgt	305bc <__assert_fail@plt+0x1d9cc>
   30798:	b	309dc <__assert_fail@plt+0x1ddec>
   3079c:	cmp	r8, #0
   307a0:	bne	30678 <__assert_fail@plt+0x1da88>
   307a4:	b	309d0 <__assert_fail@plt+0x1dde0>
   307a8:	ldr	r0, [r6, #8]
   307ac:	cmp	r0, #1
   307b0:	blt	30974 <__assert_fail@plt+0x1dd84>
   307b4:	ldr	sl, [sp, #196]	; 0xc4
   307b8:	mov	r4, #0
   307bc:	str	sl, [sp, #20]
   307c0:	ldr	r0, [r6, #12]
   307c4:	ldr	r1, [r0, r4, lsl #2]
   307c8:	ldr	r0, [sl]
   307cc:	add	r0, r0, r1, lsl #3
   307d0:	ldr	r8, [r0, #4]
   307d4:	tst	r8, #1048576	; 0x100000
   307d8:	beq	30964 <__assert_fail@plt+0x1dd74>
   307dc:	movw	r0, #65280	; 0xff00
   307e0:	ldr	r3, [sp, #152]	; 0x98
   307e4:	str	r1, [sp, #24]
   307e8:	movt	r0, #3
   307ec:	tst	r8, r0
   307f0:	beq	30854 <__assert_fail@plt+0x1dc64>
   307f4:	ldr	r2, [sp, #200]	; 0xc8
   307f8:	add	r0, sp, #112	; 0x70
   307fc:	mov	r1, r3
   30800:	mov	sl, r3
   30804:	bl	37554 <__assert_fail@plt+0x24964>
   30808:	mov	r3, sl
   3080c:	ldr	r1, [sp, #24]
   30810:	ldr	sl, [sp, #20]
   30814:	and	r2, r0, #1
   30818:	tst	r8, #1024	; 0x400
   3081c:	beq	30828 <__assert_fail@plt+0x1dc38>
   30820:	cmp	r2, #0
   30824:	beq	30964 <__assert_fail@plt+0x1dd74>
   30828:	tst	r8, #2048	; 0x800
   3082c:	cmpne	r2, #0
   30830:	bne	30964 <__assert_fail@plt+0x1dd74>
   30834:	tst	r8, #8192	; 0x2000
   30838:	beq	30844 <__assert_fail@plt+0x1dc54>
   3083c:	ands	r2, r0, #2
   30840:	beq	30964 <__assert_fail@plt+0x1dd74>
   30844:	tst	r8, #32768	; 0x8000
   30848:	beq	30854 <__assert_fail@plt+0x1dc64>
   3084c:	ands	r0, r0, #8
   30850:	beq	30964 <__assert_fail@plt+0x1dd74>
   30854:	mov	r0, sl
   30858:	add	r2, sp, #112	; 0x70
   3085c:	bl	39174 <__assert_fail@plt+0x26584>
   30860:	cmp	r0, #0
   30864:	beq	30964 <__assert_fail@plt+0x1dd74>
   30868:	ldr	r1, [sp, #152]	; 0x98
   3086c:	ldr	r2, [sp, #232]	; 0xe8
   30870:	cmp	r2, r0
   30874:	add	r8, r1, r0
   30878:	movlt	r2, r0
   3087c:	add	r0, sp, #112	; 0x70
   30880:	mov	r1, r8
   30884:	str	r2, [sp, #232]	; 0xe8
   30888:	bl	382f0 <__assert_fail@plt+0x25700>
   3088c:	cmp	r0, #0
   30890:	str	r0, [fp, #-48]	; 0xffffffd0
   30894:	bne	309bc <__assert_fail@plt+0x1ddcc>
   30898:	ldr	r0, [sp, #212]	; 0xd4
   3089c:	ldr	r2, [sp, #24]
   308a0:	ldr	r1, [sl, #24]
   308a4:	str	r4, [sp, #16]
   308a8:	str	r8, [sp, #12]
   308ac:	ldr	r3, [r0, r8, lsl #2]
   308b0:	ldr	r0, [sl, #12]
   308b4:	ldr	r0, [r0, r2, lsl #2]
   308b8:	cmp	r3, #0
   308bc:	str	r3, [sp, #8]
   308c0:	add	r0, r0, r0, lsl #1
   308c4:	add	r2, r1, r0, lsl #2
   308c8:	beq	308ec <__assert_fail@plt+0x1dcfc>
   308cc:	ldr	r1, [r3, #40]	; 0x28
   308d0:	sub	r4, fp, #208	; 0xd0
   308d4:	mov	r0, r4
   308d8:	bl	38060 <__assert_fail@plt+0x25470>
   308dc:	cmp	r0, #0
   308e0:	str	r0, [fp, #-48]	; 0xffffffd0
   308e4:	beq	30900 <__assert_fail@plt+0x1dd10>
   308e8:	b	309bc <__assert_fail@plt+0x1ddcc>
   308ec:	vldr	d16, [r2]
   308f0:	ldr	r0, [r2, #8]
   308f4:	sub	r4, fp, #208	; 0xd0
   308f8:	str	r0, [fp, #-200]	; 0xffffff38
   308fc:	vstr	d16, [fp, #-208]	; 0xffffff30
   30900:	ldr	r8, [sp, #12]
   30904:	ldr	r2, [sp, #200]	; 0xc8
   30908:	add	r0, sp, #112	; 0x70
   3090c:	sub	r1, r8, #1
   30910:	bl	37554 <__assert_fail@plt+0x24964>
   30914:	mov	r3, r0
   30918:	sub	r0, fp, #48	; 0x30
   3091c:	mov	r1, sl
   30920:	mov	r2, r4
   30924:	bl	368dc <__assert_fail@plt+0x23cec>
   30928:	ldr	r1, [sp, #212]	; 0xd4
   3092c:	str	r0, [r1, r8, lsl #2]
   30930:	ldr	r0, [sp, #8]
   30934:	cmp	r0, #0
   30938:	beq	30944 <__assert_fail@plt+0x1dd54>
   3093c:	ldr	r0, [fp, #-200]	; 0xffffff38
   30940:	bl	2bcbc <__assert_fail@plt+0x190cc>
   30944:	ldr	r0, [sp, #212]	; 0xd4
   30948:	ldr	r4, [sp, #16]
   3094c:	ldr	r0, [r0, r8, lsl #2]
   30950:	cmp	r0, #0
   30954:	bne	30964 <__assert_fail@plt+0x1dd74>
   30958:	ldr	r0, [fp, #-48]	; 0xffffffd0
   3095c:	cmp	r0, #0
   30960:	bne	309bc <__assert_fail@plt+0x1ddcc>
   30964:	ldr	r0, [r6, #8]
   30968:	add	r4, r4, #1
   3096c:	cmp	r4, r0
   30970:	blt	307c0 <__assert_fail@plt+0x1dbd0>
   30974:	mov	r0, #0
   30978:	str	r0, [fp, #-64]	; 0xffffffc0
   3097c:	b	30604 <__assert_fail@plt+0x1da14>
   30980:	add	r1, r0, #2
   30984:	add	r0, sp, #112	; 0x70
   30988:	bl	37e34 <__assert_fail@plt+0x25244>
   3098c:	cmp	r0, #0
   30990:	str	r0, [fp, #-64]	; 0xffffffc0
   30994:	beq	305f8 <__assert_fail@plt+0x1da08>
   30998:	b	31788 <__assert_fail@plt+0x1eb98>
   3099c:	ldr	r0, [sp, #152]	; 0x98
   309a0:	ldr	r2, [sp, #200]	; 0xc8
   309a4:	sub	r1, r0, #1
   309a8:	add	r0, sp, #112	; 0x70
   309ac:	bl	37554 <__assert_fail@plt+0x24964>
   309b0:	bfi	r4, r0, #8, #1
   309b4:	ldr	r8, [r8, r4, lsl #2]
   309b8:	b	30650 <__assert_fail@plt+0x1da60>
   309bc:	mov	r8, #0
   309c0:	str	r0, [fp, #-64]	; 0xffffffc0
   309c4:	b	30650 <__assert_fail@plt+0x1da60>
   309c8:	ldr	r5, [sp, #48]	; 0x30
   309cc:	b	309dc <__assert_fail@plt+0x1ddec>
   309d0:	ldr	r9, [sp, #104]	; 0x68
   309d4:	ldr	sl, [sp, #108]	; 0x6c
   309d8:	ldr	r7, [sp, #92]	; 0x5c
   309dc:	cmp	r5, #0
   309e0:	beq	309f0 <__assert_fail@plt+0x1de00>
   309e4:	ldr	r0, [r5]
   309e8:	add	r0, r0, r7
   309ec:	str	r0, [r5]
   309f0:	ldr	r8, [sp, #76]	; 0x4c
   309f4:	ldr	r5, [sp, #72]	; 0x48
   309f8:	ldr	r7, [sp, #88]	; 0x58
   309fc:	cmn	r7, #1
   30a00:	beq	30ce0 <__assert_fail@plt+0x1e0f0>
   30a04:	mov	r2, #12
   30a08:	cmn	r7, #2
   30a0c:	beq	31700 <__assert_fail@plt+0x1eb10>
   30a10:	ldr	r0, [sp, #68]	; 0x44
   30a14:	str	r7, [sp, #204]	; 0xcc
   30a18:	ldr	r8, [sp, #84]	; 0x54
   30a1c:	ldr	r4, [sp, #96]	; 0x60
   30a20:	ldrb	r0, [r0, #28]
   30a24:	cmp	r8, #2
   30a28:	bcc	30a34 <__assert_fail@plt+0x1de44>
   30a2c:	ands	r1, r0, #16
   30a30:	beq	30a40 <__assert_fail@plt+0x1de50>
   30a34:	ldr	r1, [r4, #76]	; 0x4c
   30a38:	cmp	r1, #0
   30a3c:	beq	30a64 <__assert_fail@plt+0x1de74>
   30a40:	ldr	r0, [sp, #212]	; 0xd4
   30a44:	mov	r2, r7
   30a48:	ldr	r1, [r0, r7, lsl #2]
   30a4c:	add	r0, sp, #112	; 0x70
   30a50:	bl	373ec <__assert_fail@plt+0x247fc>
   30a54:	str	r0, [sp, #208]	; 0xd0
   30a58:	ldr	r0, [sp, #68]	; 0x44
   30a5c:	mov	r2, #12
   30a60:	ldrb	r0, [r0, #28]
   30a64:	cmp	r8, #2
   30a68:	bcc	30a80 <__assert_fail@plt+0x1de90>
   30a6c:	ands	r0, r0, #16
   30a70:	bne	30a80 <__assert_fail@plt+0x1de90>
   30a74:	ldrb	r0, [r4, #88]	; 0x58
   30a78:	tst	r0, #1
   30a7c:	bne	30a8c <__assert_fail@plt+0x1de9c>
   30a80:	ldr	r0, [r4, #76]	; 0x4c
   30a84:	cmp	r0, #0
   30a88:	beq	30e64 <__assert_fail@plt+0x1e274>
   30a8c:	ldr	r6, [sp, #204]	; 0xcc
   30a90:	cmn	r6, #-1073741823	; 0xc0000001
   30a94:	bcs	31700 <__assert_fail@plt+0x1eb10>
   30a98:	mov	r0, #4
   30a9c:	ldr	r7, [sp, #196]	; 0xc4
   30aa0:	ldr	r5, [sp, #208]	; 0xd0
   30aa4:	add	r4, r0, r6, lsl #2
   30aa8:	mov	r0, r4
   30aac:	bl	2de8c <__assert_fail@plt+0x1b29c>
   30ab0:	mov	sl, r0
   30ab4:	cmp	r0, #0
   30ab8:	beq	31778 <__assert_fail@plt+0x1eb88>
   30abc:	ldr	r0, [r7, #76]	; 0x4c
   30ac0:	cmp	r0, #0
   30ac4:	beq	30b74 <__assert_fail@plt+0x1df84>
   30ac8:	mov	r0, r4
   30acc:	bl	2de8c <__assert_fail@plt+0x1b29c>
   30ad0:	cmp	r0, #0
   30ad4:	beq	31778 <__assert_fail@plt+0x1eb88>
   30ad8:	mov	r9, r0
   30adc:	add	r0, r6, #1
   30ae0:	mov	r1, #0
   30ae4:	str	r0, [sp, #92]	; 0x5c
   30ae8:	lsl	r2, r0, #2
   30aec:	mov	r0, r9
   30af0:	bl	12938 <memset@plt>
   30af4:	ldr	r0, [sp, #36]	; 0x24
   30af8:	mov	r1, #0
   30afc:	str	r6, [fp, #-196]	; 0xffffff3c
   30b00:	str	r5, [fp, #-200]	; 0xffffff38
   30b04:	str	r9, [fp, #-204]	; 0xffffff34
   30b08:	str	sl, [fp, #-208]	; 0xffffff30
   30b0c:	str	r1, [r0]
   30b10:	str	r1, [r0, #4]
   30b14:	str	r1, [r0, #8]
   30b18:	add	r0, sp, #112	; 0x70
   30b1c:	sub	r1, fp, #208	; 0xd0
   30b20:	bl	3a09c <__assert_fail@plt+0x274ac>
   30b24:	mov	r4, r0
   30b28:	mov	r0, #0
   30b2c:	bl	2bcbc <__assert_fail@plt+0x190cc>
   30b30:	cmp	r4, #0
   30b34:	bne	30df0 <__assert_fail@plt+0x1e200>
   30b38:	ldr	r0, [sl]
   30b3c:	cmp	r0, #0
   30b40:	beq	30bcc <__assert_fail@plt+0x1dfdc>
   30b44:	ldr	r3, [sp, #92]	; 0x5c
   30b48:	mov	r0, r7
   30b4c:	mov	r1, sl
   30b50:	mov	r2, r9
   30b54:	bl	3a334 <__assert_fail@plt+0x27744>
   30b58:	mov	r4, r0
   30b5c:	mov	r0, r9
   30b60:	bl	2bcbc <__assert_fail@plt+0x190cc>
   30b64:	cmp	r4, #0
   30b68:	beq	30e3c <__assert_fail@plt+0x1e24c>
   30b6c:	mov	r9, #0
   30b70:	b	30dec <__assert_fail@plt+0x1e1fc>
   30b74:	ldr	r0, [sp, #36]	; 0x24
   30b78:	mov	r9, #0
   30b7c:	str	r6, [fp, #-196]	; 0xffffff3c
   30b80:	str	r5, [fp, #-200]	; 0xffffff38
   30b84:	sub	r1, fp, #208	; 0xd0
   30b88:	str	r9, [fp, #-204]	; 0xffffff34
   30b8c:	str	sl, [fp, #-208]	; 0xffffff30
   30b90:	str	r9, [r0]
   30b94:	str	r9, [r0, #4]
   30b98:	str	r9, [r0, #8]
   30b9c:	add	r0, sp, #112	; 0x70
   30ba0:	bl	3a09c <__assert_fail@plt+0x274ac>
   30ba4:	mov	r4, r0
   30ba8:	mov	r0, #0
   30bac:	bl	2bcbc <__assert_fail@plt+0x190cc>
   30bb0:	cmp	r4, #0
   30bb4:	bne	30df0 <__assert_fail@plt+0x1e200>
   30bb8:	ldr	r0, [sl]
   30bbc:	mov	r9, #0
   30bc0:	cmp	r0, #0
   30bc4:	beq	30cc0 <__assert_fail@plt+0x1e0d0>
   30bc8:	b	30e3c <__assert_fail@plt+0x1e24c>
   30bcc:	ldr	r0, [r9]
   30bd0:	cmp	r0, #0
   30bd4:	bne	30b44 <__assert_fail@plt+0x1df54>
   30bd8:	cmp	r6, #1
   30bdc:	blt	30cc0 <__assert_fail@plt+0x1e0d0>
   30be0:	ldr	r0, [sp, #212]	; 0xd4
   30be4:	str	r7, [sp, #88]	; 0x58
   30be8:	lsl	r4, r6, #2
   30bec:	add	r8, r6, #1
   30bf0:	mov	r7, sl
   30bf4:	sub	r0, r0, #4
   30bf8:	ldr	r1, [r0, r4]
   30bfc:	cmp	r1, #0
   30c00:	beq	30c10 <__assert_fail@plt+0x1e020>
   30c04:	ldrb	r2, [r1, #52]	; 0x34
   30c08:	tst	r2, #16
   30c0c:	bne	30c24 <__assert_fail@plt+0x1e034>
   30c10:	sub	r8, r8, #1
   30c14:	sub	r4, r4, #4
   30c18:	cmp	r8, #2
   30c1c:	bge	30bf8 <__assert_fail@plt+0x1e008>
   30c20:	b	30cc0 <__assert_fail@plt+0x1e0d0>
   30c24:	sub	r6, r8, #2
   30c28:	add	r5, sp, #112	; 0x70
   30c2c:	mov	r0, r5
   30c30:	mov	r2, r6
   30c34:	bl	373ec <__assert_fail@plt+0x247fc>
   30c38:	mov	sl, r0
   30c3c:	mov	r0, r9
   30c40:	mov	r1, #0
   30c44:	mov	r2, r4
   30c48:	bl	12938 <memset@plt>
   30c4c:	ldr	r0, [sp, #36]	; 0x24
   30c50:	mov	r1, #0
   30c54:	str	r6, [fp, #-196]	; 0xffffff3c
   30c58:	str	sl, [fp, #-200]	; 0xffffff38
   30c5c:	str	r9, [fp, #-204]	; 0xffffff34
   30c60:	str	r7, [fp, #-208]	; 0xffffff30
   30c64:	mov	r5, sl
   30c68:	mov	sl, r7
   30c6c:	str	r1, [r0]
   30c70:	str	r1, [r0, #4]
   30c74:	str	r1, [r0, #8]
   30c78:	add	r0, sp, #112	; 0x70
   30c7c:	sub	r1, fp, #208	; 0xd0
   30c80:	bl	3a09c <__assert_fail@plt+0x274ac>
   30c84:	mov	r4, r0
   30c88:	mov	r0, #0
   30c8c:	bl	2bcbc <__assert_fail@plt+0x190cc>
   30c90:	cmp	r4, #0
   30c94:	bne	30dec <__assert_fail@plt+0x1e1fc>
   30c98:	sub	r0, r8, #1
   30c9c:	ldr	r7, [sp, #88]	; 0x58
   30ca0:	str	r0, [sp, #92]	; 0x5c
   30ca4:	ldr	r0, [sl]
   30ca8:	cmp	r0, #0
   30cac:	beq	30bcc <__assert_fail@plt+0x1dfdc>
   30cb0:	sub	r6, r8, #2
   30cb4:	sub	r0, r8, #1
   30cb8:	str	r0, [sp, #92]	; 0x5c
   30cbc:	b	30b44 <__assert_fail@plt+0x1df54>
   30cc0:	mov	r0, sl
   30cc4:	bl	2bcbc <__assert_fail@plt+0x190cc>
   30cc8:	mov	r0, r9
   30ccc:	bl	2bcbc <__assert_fail@plt+0x190cc>
   30cd0:	ldr	r9, [sp, #104]	; 0x68
   30cd4:	ldr	sl, [sp, #108]	; 0x6c
   30cd8:	ldr	r8, [sp, #76]	; 0x4c
   30cdc:	ldr	r5, [sp, #72]	; 0x48
   30ce0:	add	r0, sp, #112	; 0x70
   30ce4:	bl	374ac <__assert_fail@plt+0x248bc>
   30ce8:	ldr	r0, [fp, #-212]	; 0xffffff2c
   30cec:	ldr	r7, [sp, #56]	; 0x38
   30cf0:	mov	r2, #1
   30cf4:	add	r4, r0, r8
   30cf8:	cmp	r4, r7
   30cfc:	str	r4, [fp, #-212]	; 0xffffff2c
   30d00:	blt	31700 <__assert_fail@plt+0x1eb10>
   30d04:	ldr	r6, [sp, #100]	; 0x64
   30d08:	ldr	r1, [sp, #44]	; 0x2c
   30d0c:	cmp	r5, r4
   30d10:	bge	30314 <__assert_fail@plt+0x1d724>
   30d14:	b	31700 <__assert_fail@plt+0x1eb10>
   30d18:	ldr	r8, [r4, #48]	; 0x30
   30d1c:	b	30560 <__assert_fail@plt+0x1d970>
   30d20:	ldr	r8, [r4, #44]	; 0x2c
   30d24:	b	30560 <__assert_fail@plt+0x1d970>
   30d28:	sxtb	r0, r0
   30d2c:	cmn	r0, #1
   30d30:	ble	30d7c <__assert_fail@plt+0x1e18c>
   30d34:	ldr	r0, [sp, #60]	; 0x3c
   30d38:	mov	r2, #1
   30d3c:	str	r7, [sp, #88]	; 0x58
   30d40:	b	30db4 <__assert_fail@plt+0x1e1c4>
   30d44:	add	r6, r8, #4
   30d48:	add	r0, sp, #112	; 0x70
   30d4c:	mov	r2, #0
   30d50:	mov	r1, r6
   30d54:	bl	37630 <__assert_fail@plt+0x24a40>
   30d58:	cmp	r0, #0
   30d5c:	str	r0, [fp, #-64]	; 0xffffffc0
   30d60:	bne	30e28 <__assert_fail@plt+0x1e238>
   30d64:	ldrb	r0, [r8, #52]	; 0x34
   30d68:	tst	r0, #64	; 0x40
   30d6c:	bne	30dc8 <__assert_fail@plt+0x1e1d8>
   30d70:	ldr	sl, [sp, #108]	; 0x6c
   30d74:	mov	r6, #0
   30d78:	b	3058c <__assert_fail@plt+0x1d99c>
   30d7c:	add	r0, sp, #112	; 0x70
   30d80:	mov	r1, r8
   30d84:	mov	r2, r7
   30d88:	bl	373ec <__assert_fail@plt+0x247fc>
   30d8c:	cmp	r0, #0
   30d90:	ldr	r1, [sp, #60]	; 0x3c
   30d94:	mov	r2, r0
   30d98:	mov	r0, r7
   30d9c:	mvneq	r0, #0
   30da0:	str	r0, [sp, #88]	; 0x58
   30da4:	clz	r0, r2
   30da8:	movwne	r2, #1
   30dac:	lsr	r0, r0, #5
   30db0:	orr	r0, r1, r0
   30db4:	cmp	r0, #0
   30db8:	bne	305a4 <__assert_fail@plt+0x1d9b4>
   30dbc:	ldr	r8, [sp, #76]	; 0x4c
   30dc0:	ldr	r5, [sp, #72]	; 0x48
   30dc4:	b	309fc <__assert_fail@plt+0x1de0c>
   30dc8:	add	r0, sp, #112	; 0x70
   30dcc:	mov	r1, r6
   30dd0:	bl	37728 <__assert_fail@plt+0x24b38>
   30dd4:	ldr	sl, [sp, #108]	; 0x6c
   30dd8:	cmp	r0, #0
   30ddc:	mov	r6, #0
   30de0:	str	r0, [fp, #-64]	; 0xffffffc0
   30de4:	beq	3058c <__assert_fail@plt+0x1d99c>
   30de8:	b	30e2c <__assert_fail@plt+0x1e23c>
   30dec:	ldr	r8, [sp, #84]	; 0x54
   30df0:	mov	r0, sl
   30df4:	bl	2bcbc <__assert_fail@plt+0x190cc>
   30df8:	mov	r0, r9
   30dfc:	bl	2bcbc <__assert_fail@plt+0x190cc>
   30e00:	ldr	r9, [sp, #104]	; 0x68
   30e04:	cmp	r4, #0
   30e08:	beq	30e64 <__assert_fail@plt+0x1e274>
   30e0c:	ldr	sl, [sp, #108]	; 0x6c
   30e10:	ldr	r8, [sp, #76]	; 0x4c
   30e14:	ldr	r5, [sp, #72]	; 0x48
   30e18:	mov	r2, r4
   30e1c:	cmp	r4, #1
   30e20:	beq	30ce0 <__assert_fail@plt+0x1e0f0>
   30e24:	b	31700 <__assert_fail@plt+0x1eb10>
   30e28:	ldr	sl, [sp, #108]	; 0x6c
   30e2c:	ldr	r8, [sp, #76]	; 0x4c
   30e30:	ldr	r5, [sp, #72]	; 0x48
   30e34:	mov	r7, r0
   30e38:	b	309fc <__assert_fail@plt+0x1de0c>
   30e3c:	ldr	r0, [sp, #212]	; 0xd4
   30e40:	bl	2bcbc <__assert_fail@plt+0x190cc>
   30e44:	mov	r0, #0
   30e48:	str	r5, [sp, #208]	; 0xd0
   30e4c:	str	sl, [sp, #212]	; 0xd4
   30e50:	str	r6, [sp, #204]	; 0xcc
   30e54:	bl	2bcbc <__assert_fail@plt+0x190cc>
   30e58:	mov	r0, #0
   30e5c:	bl	2bcbc <__assert_fail@plt+0x190cc>
   30e60:	ldr	r8, [sp, #84]	; 0x54
   30e64:	cmp	r8, #0
   30e68:	beq	316fc <__assert_fail@plt+0x1eb0c>
   30e6c:	ldr	r4, [fp, #20]
   30e70:	cmp	r8, #1
   30e74:	beq	30e98 <__assert_fail@plt+0x1e2a8>
   30e78:	ldr	r0, [sp, #32]
   30e7c:	ldr	r1, [fp, #16]
   30e80:	mvn	r0, r0
   30e84:	add	r0, r0, r1
   30e88:	mov	r1, #255	; 0xff
   30e8c:	lsl	r2, r0, #3
   30e90:	add	r0, r4, #8
   30e94:	bl	12938 <memset@plt>
   30e98:	cmp	r8, #2
   30e9c:	mov	r0, #0
   30ea0:	ldr	r1, [sp, #204]	; 0xcc
   30ea4:	stm	r4, {r0, r1}
   30ea8:	bcc	315e4 <__assert_fail@plt+0x1e9f4>
   30eac:	ldr	r0, [sp, #68]	; 0x44
   30eb0:	ldrb	r0, [r0, #28]
   30eb4:	ands	r0, r0, #16
   30eb8:	bne	315e4 <__assert_fail@plt+0x1e9f4>
   30ebc:	ldr	r2, [sp, #96]	; 0x60
   30ec0:	mov	r0, #0
   30ec4:	ldrb	r1, [r2, #88]	; 0x58
   30ec8:	tst	r1, #1
   30ecc:	mov	r1, #0
   30ed0:	beq	30ee4 <__assert_fail@plt+0x1e2f4>
   30ed4:	ldr	r2, [r2, #76]	; 0x4c
   30ed8:	mov	r1, #0
   30edc:	cmp	r2, #0
   30ee0:	movwgt	r1, #1
   30ee4:	ldr	r2, [sp, #68]	; 0x44
   30ee8:	ldr	r5, [sp, #84]	; 0x54
   30eec:	ldr	r4, [fp, #20]
   30ef0:	cmp	r1, #0
   30ef4:	mov	r6, #0
   30ef8:	ldr	r8, [r2]
   30efc:	movw	r2, #13344	; 0x3420
   30f00:	movt	r2, #4
   30f04:	vldr	d16, [r2]
   30f08:	ldr	r2, [r2, #8]
   30f0c:	str	r2, [fp, #-56]	; 0xffffffc8
   30f10:	sub	r2, fp, #208	; 0xd0
   30f14:	add	sl, r2, #12
   30f18:	mov	r2, #16
   30f1c:	vstr	d16, [fp, #-64]	; 0xffffffc0
   30f20:	str	sl, [fp, #-200]	; 0xffffff38
   30f24:	str	r2, [fp, #-204]	; 0xffffff34
   30f28:	str	r0, [fp, #-208]	; 0xffffff30
   30f2c:	beq	30f4c <__assert_fail@plt+0x1e35c>
   30f30:	mov	r0, #48	; 0x30
   30f34:	bl	2de8c <__assert_fail@plt+0x1b29c>
   30f38:	cmp	r0, #0
   30f3c:	str	r0, [fp, #-56]	; 0xffffffc8
   30f40:	beq	31750 <__assert_fail@plt+0x1eb60>
   30f44:	ldr	r0, [fp, #-208]	; 0xffffff30
   30f48:	sub	r6, fp, #64	; 0x40
   30f4c:	ldr	r9, [r8, #72]	; 0x48
   30f50:	mov	r1, #0
   30f54:	cmp	r0, r5
   30f58:	str	r1, [fp, #-44]	; 0xffffffd4
   30f5c:	str	r1, [fp, #-48]	; 0xffffffd0
   30f60:	str	r1, [fp, #-40]	; 0xffffffd8
   30f64:	bcs	30fd8 <__assert_fail@plt+0x1e3e8>
   30f68:	sub	r0, fp, #208	; 0xd0
   30f6c:	mov	r1, r5
   30f70:	mov	r2, sl
   30f74:	mov	r3, #8
   30f78:	bl	3c5f4 <__assert_fail@plt+0x29a04>
   30f7c:	cmp	r0, #0
   30f80:	bne	30fdc <__assert_fail@plt+0x1e3ec>
   30f84:	ldr	r0, [fp, #-200]	; 0xffffff38
   30f88:	mov	r4, #12
   30f8c:	mov	r5, sl
   30f90:	cmp	r0, sl
   30f94:	beq	30f9c <__assert_fail@plt+0x1e3ac>
   30f98:	bl	2bcbc <__assert_fail@plt+0x190cc>
   30f9c:	mov	sl, r5
   30fa0:	b	315bc <__assert_fail@plt+0x1e9cc>
   30fa4:	ldr	r1, [r3, #8]
   30fa8:	cmp	r1, #0
   30fac:	beq	30fbc <__assert_fail@plt+0x1e3cc>
   30fb0:	ldrsb	r1, [r6, #28]
   30fb4:	cmp	r1, #0
   30fb8:	bmi	30050 <__assert_fail@plt+0x1d460>
   30fbc:	mov	r0, #0
   30fc0:	cmp	r4, #0
   30fc4:	beq	31748 <__assert_fail@plt+0x1eb58>
   30fc8:	cmp	ip, #0
   30fcc:	mov	r4, #0
   30fd0:	bne	3173c <__assert_fail@plt+0x1eb4c>
   30fd4:	b	30054 <__assert_fail@plt+0x1d464>
   30fd8:	str	r5, [fp, #-208]	; 0xffffff30
   30fdc:	ldr	r7, [fp, #-200]	; 0xffffff38
   30fe0:	lsl	r2, r5, #3
   30fe4:	mov	r1, r4
   30fe8:	str	r2, [sp, #104]	; 0x68
   30fec:	mov	r0, r7
   30ff0:	bl	125f0 <memcpy@plt>
   30ff4:	ldr	r3, [r4]
   30ff8:	ldr	r0, [r4, #4]
   30ffc:	cmp	r3, r0
   31000:	mov	r0, #0
   31004:	str	r3, [fp, #-36]	; 0xffffffdc
   31008:	ble	31018 <__assert_fail@plt+0x1e428>
   3100c:	mov	r4, #0
   31010:	bl	2bcbc <__assert_fail@plt+0x190cc>
   31014:	b	315ac <__assert_fail@plt+0x1e9bc>
   31018:	lsl	r0, r5, #4
   3101c:	str	r6, [sp, #108]	; 0x6c
   31020:	str	r8, [sp, #92]	; 0x5c
   31024:	str	r7, [sp, #100]	; 0x64
   31028:	str	r0, [sp, #88]	; 0x58
   3102c:	ldr	r0, [r8]
   31030:	add	r1, r0, r9, lsl #3
   31034:	ldr	r1, [r1, #4]
   31038:	uxtb	r2, r1
   3103c:	cmp	r2, #9
   31040:	beq	31070 <__assert_fail@plt+0x1e480>
   31044:	cmp	r2, #8
   31048:	bne	310e0 <__assert_fail@plt+0x1e4f0>
   3104c:	ldr	r0, [r0, r9, lsl #3]
   31050:	add	r0, r0, #1
   31054:	cmp	r0, r5
   31058:	bge	310e0 <__assert_fail@plt+0x1e4f0>
   3105c:	mov	r1, r4
   31060:	str	r3, [r1, r0, lsl #3]!
   31064:	mvn	r0, #0
   31068:	str	r0, [r1, #4]
   3106c:	b	310e0 <__assert_fail@plt+0x1e4f0>
   31070:	ldr	r0, [r0, r9, lsl #3]
   31074:	add	r0, r0, #1
   31078:	cmp	r0, r5
   3107c:	bge	310e0 <__assert_fail@plt+0x1e4f0>
   31080:	ldr	r2, [r4, r0, lsl #3]
   31084:	cmp	r2, r3
   31088:	bge	310a0 <__assert_fail@plt+0x1e4b0>
   3108c:	add	r0, r4, r0, lsl #3
   31090:	mov	r1, r4
   31094:	str	r3, [r0, #4]
   31098:	mov	r0, r7
   3109c:	b	310bc <__assert_fail@plt+0x1e4cc>
   310a0:	tst	r1, #524288	; 0x80000
   310a4:	beq	310d8 <__assert_fail@plt+0x1e4e8>
   310a8:	ldr	r1, [r7, r0, lsl #3]
   310ac:	cmn	r1, #1
   310b0:	beq	310d8 <__assert_fail@plt+0x1e4e8>
   310b4:	mov	r0, r4
   310b8:	mov	r1, r7
   310bc:	ldr	r2, [sp, #104]	; 0x68
   310c0:	str	sl, [sp, #80]	; 0x50
   310c4:	mov	sl, r3
   310c8:	bl	125f0 <memcpy@plt>
   310cc:	mov	r3, sl
   310d0:	ldr	sl, [sp, #80]	; 0x50
   310d4:	b	310e0 <__assert_fail@plt+0x1e4f0>
   310d8:	add	r0, r4, r0, lsl #3
   310dc:	str	r3, [r0, #4]
   310e0:	ldr	r0, [r4, #4]
   310e4:	cmp	r3, r0
   310e8:	ldreq	r0, [sp, #208]	; 0xd0
   310ec:	cmpeq	r9, r0
   310f0:	beq	31114 <__assert_fail@plt+0x1e524>
   310f4:	cmp	r6, #0
   310f8:	beq	31178 <__assert_fail@plt+0x1e588>
   310fc:	sub	r0, fp, #48	; 0x30
   31100:	mov	r1, r9
   31104:	bl	36874 <__assert_fail@plt+0x23c84>
   31108:	cmp	r0, #0
   3110c:	bne	3111c <__assert_fail@plt+0x1e52c>
   31110:	b	31178 <__assert_fail@plt+0x1e588>
   31114:	cmp	r6, #0
   31118:	beq	315a0 <__assert_fail@plt+0x1e9b0>
   3111c:	mov	r0, #0
   31120:	ldr	r1, [r4, r0, lsl #3]
   31124:	cmp	r1, #0
   31128:	bmi	3113c <__assert_fail@plt+0x1e54c>
   3112c:	add	r1, r4, r0, lsl #3
   31130:	ldr	r1, [r1, #4]
   31134:	cmn	r1, #1
   31138:	beq	3114c <__assert_fail@plt+0x1e55c>
   3113c:	add	r0, r0, #1
   31140:	cmp	r5, r0
   31144:	bne	31120 <__assert_fail@plt+0x1e530>
   31148:	b	315a0 <__assert_fail@plt+0x1e9b0>
   3114c:	sub	r0, fp, #48	; 0x30
   31150:	sub	r1, fp, #36	; 0x24
   31154:	mov	r2, r5
   31158:	mov	r3, r4
   3115c:	str	r7, [sp]
   31160:	str	r0, [sp, #4]
   31164:	mov	r0, r6
   31168:	bl	3b28c <__assert_fail@plt+0x2869c>
   3116c:	mov	r9, r0
   31170:	cmn	r0, #1
   31174:	ble	315a0 <__assert_fail@plt+0x1e9b0>
   31178:	ldr	r4, [sp, #196]	; 0xc4
   3117c:	ldr	r0, [r4]
   31180:	add	r1, r0, r9, lsl #3
   31184:	ldr	r1, [r1, #4]
   31188:	tst	r1, #8
   3118c:	bne	31248 <__assert_fail@plt+0x1e658>
   31190:	tst	r1, #1048576	; 0x100000
   31194:	bne	312dc <__assert_fail@plt+0x1e6ec>
   31198:	uxtb	r1, r1
   3119c:	cmp	r1, #4
   311a0:	bne	31304 <__assert_fail@plt+0x1e714>
   311a4:	ldr	r0, [r0, r9, lsl #3]
   311a8:	mov	r7, #0
   311ac:	add	r0, r0, #1
   311b0:	cmp	r0, r5
   311b4:	bge	311c8 <__assert_fail@plt+0x1e5d8>
   311b8:	ldr	r1, [fp, #20]
   311bc:	ldr	r2, [r1, r0, lsl #3]!
   311c0:	ldr	r1, [r1, #4]
   311c4:	sub	r7, r1, r2
   311c8:	cmp	r6, #0
   311cc:	beq	313ec <__assert_fail@plt+0x1e7fc>
   311d0:	cmp	r0, r5
   311d4:	bge	31388 <__assert_fail@plt+0x1e798>
   311d8:	ldr	r1, [fp, #20]
   311dc:	ldr	r1, [r1, r0, lsl #3]
   311e0:	cmn	r1, #1
   311e4:	beq	31388 <__assert_fail@plt+0x1e798>
   311e8:	ldr	r2, [fp, #20]
   311ec:	add	r0, r2, r0, lsl #3
   311f0:	ldr	r0, [r0, #4]
   311f4:	cmn	r0, #1
   311f8:	beq	31388 <__assert_fail@plt+0x1e798>
   311fc:	cmp	r7, #0
   31200:	beq	31498 <__assert_fail@plt+0x1e8a8>
   31204:	ldr	r5, [fp, #-36]	; 0xffffffdc
   31208:	ldr	r0, [sp, #140]	; 0x8c
   3120c:	sub	r0, r0, r5
   31210:	cmp	r0, r7
   31214:	blt	31388 <__assert_fail@plt+0x1e798>
   31218:	ldr	r2, [sp, #116]	; 0x74
   3121c:	add	r0, r2, r1
   31220:	add	r1, r2, r5
   31224:	mov	r2, r7
   31228:	bl	128a8 <bcmp@plt>
   3122c:	cmp	r0, #0
   31230:	bne	31388 <__assert_fail@plt+0x1e798>
   31234:	ldr	r0, [r4, #12]
   31238:	add	r3, r5, r7
   3123c:	ldr	r8, [r0, r9, lsl #2]
   31240:	str	r3, [fp, #-36]	; 0xffffffdc
   31244:	b	31350 <__assert_fail@plt+0x1e760>
   31248:	ldr	r1, [fp, #-36]	; 0xffffffdc
   3124c:	ldr	r0, [sp, #212]	; 0xd4
   31250:	ldr	r4, [r4, #20]
   31254:	ldr	r6, [r0, r1, lsl #2]
   31258:	str	r1, [sp, #80]	; 0x50
   3125c:	sub	r0, fp, #48	; 0x30
   31260:	mov	r1, r9
   31264:	bl	36874 <__assert_fail@plt+0x23c84>
   31268:	cmp	r0, #0
   3126c:	bne	31284 <__assert_fail@plt+0x1e694>
   31270:	sub	r0, fp, #48	; 0x30
   31274:	mov	r1, r9
   31278:	bl	3665c <__assert_fail@plt+0x23a6c>
   3127c:	cmp	r0, #0
   31280:	beq	3157c <__assert_fail@plt+0x1e98c>
   31284:	add	r0, r9, r9, lsl #1
   31288:	add	r0, r4, r0, lsl #2
   3128c:	ldr	r5, [r0, #4]
   31290:	cmp	r5, #1
   31294:	blt	31388 <__assert_fail@plt+0x1e798>
   31298:	ldr	r7, [r0, #8]
   3129c:	add	r6, r6, #4
   312a0:	mvn	r4, #0
   312a4:	ldr	r8, [r7]
   312a8:	mov	r0, r6
   312ac:	mov	r1, r8
   312b0:	bl	36874 <__assert_fail@plt+0x23c84>
   312b4:	cmp	r0, #0
   312b8:	beq	312c8 <__assert_fail@plt+0x1e6d8>
   312bc:	cmn	r4, #1
   312c0:	bne	313d0 <__assert_fail@plt+0x1e7e0>
   312c4:	mov	r4, r8
   312c8:	add	r7, r7, #4
   312cc:	subs	r5, r5, #1
   312d0:	bne	312a4 <__assert_fail@plt+0x1e6b4>
   312d4:	mov	r8, r4
   312d8:	b	313e4 <__assert_fail@plt+0x1e7f4>
   312dc:	ldr	r5, [fp, #-36]	; 0xffffffdc
   312e0:	mov	r0, r4
   312e4:	mov	r1, r9
   312e8:	add	r2, sp, #112	; 0x70
   312ec:	mov	r3, r5
   312f0:	bl	39174 <__assert_fail@plt+0x26584>
   312f4:	mov	r3, r5
   312f8:	cmp	r0, #0
   312fc:	bne	31334 <__assert_fail@plt+0x1e744>
   31300:	b	31308 <__assert_fail@plt+0x1e718>
   31304:	ldr	r3, [fp, #-36]	; 0xffffffdc
   31308:	ldr	r0, [r4]
   3130c:	mov	r2, r3
   31310:	mov	r5, r3
   31314:	add	r1, r0, r9, lsl #3
   31318:	add	r0, sp, #112	; 0x70
   3131c:	bl	3946c <__assert_fail@plt+0x2687c>
   31320:	mov	r1, r0
   31324:	mov	r3, r5
   31328:	mov	r0, #1
   3132c:	cmp	r1, #0
   31330:	beq	31388 <__assert_fail@plt+0x1e798>
   31334:	ldr	r1, [r4, #12]
   31338:	add	r3, r0, r3
   3133c:	ldr	r0, [sp, #108]	; 0x6c
   31340:	ldr	r8, [r1, r9, lsl #2]
   31344:	cmp	r0, #0
   31348:	str	r3, [fp, #-36]	; 0xffffffdc
   3134c:	beq	31408 <__assert_fail@plt+0x1e818>
   31350:	ldr	r0, [sp, #204]	; 0xcc
   31354:	cmp	r3, r0
   31358:	bgt	31388 <__assert_fail@plt+0x1e798>
   3135c:	ldr	r0, [sp, #212]	; 0xd4
   31360:	ldr	r0, [r0, r3, lsl #2]
   31364:	cmp	r0, #0
   31368:	beq	31388 <__assert_fail@plt+0x1e798>
   3136c:	add	r0, r0, #4
   31370:	mov	r1, r8
   31374:	mov	r4, r3
   31378:	bl	36874 <__assert_fail@plt+0x23c84>
   3137c:	mov	r3, r4
   31380:	cmp	r0, #0
   31384:	bne	31408 <__assert_fail@plt+0x1e818>
   31388:	ldr	r5, [sp, #84]	; 0x54
   3138c:	ldr	r4, [fp, #20]
   31390:	ldr	r6, [sp, #108]	; 0x6c
   31394:	ldr	r7, [sp, #100]	; 0x64
   31398:	sub	r0, fp, #48	; 0x30
   3139c:	sub	r1, fp, #36	; 0x24
   313a0:	str	r0, [sp, #4]
   313a4:	mov	r0, r6
   313a8:	mov	r2, r5
   313ac:	mov	r3, r4
   313b0:	str	r7, [sp]
   313b4:	bl	3b28c <__assert_fail@plt+0x2869c>
   313b8:	cmp	r0, #0
   313bc:	bmi	31768 <__assert_fail@plt+0x1eb78>
   313c0:	ldr	r3, [fp, #-36]	; 0xffffffdc
   313c4:	ldr	r8, [sp, #92]	; 0x5c
   313c8:	mov	r9, r0
   313cc:	b	31430 <__assert_fail@plt+0x1e840>
   313d0:	sub	r0, fp, #48	; 0x30
   313d4:	mov	r1, r4
   313d8:	bl	36874 <__assert_fail@plt+0x23c84>
   313dc:	cmp	r0, #0
   313e0:	beq	31440 <__assert_fail@plt+0x1e850>
   313e4:	ldr	r3, [sp, #80]	; 0x50
   313e8:	b	31410 <__assert_fail@plt+0x1e820>
   313ec:	cmp	r7, #0
   313f0:	beq	31498 <__assert_fail@plt+0x1e8a8>
   313f4:	ldr	r0, [r4, #12]
   313f8:	ldr	r8, [r0, r9, lsl #2]
   313fc:	ldr	r0, [fp, #-36]	; 0xffffffdc
   31400:	add	r3, r0, r7
   31404:	str	r3, [fp, #-36]	; 0xffffffdc
   31408:	mov	r0, #0
   3140c:	str	r0, [fp, #-44]	; 0xffffffd4
   31410:	cmn	r8, #1
   31414:	ble	31574 <__assert_fail@plt+0x1e984>
   31418:	mov	r9, r8
   3141c:	ldr	r5, [sp, #84]	; 0x54
   31420:	ldr	r4, [fp, #20]
   31424:	ldr	r6, [sp, #108]	; 0x6c
   31428:	ldr	r8, [sp, #92]	; 0x5c
   3142c:	ldr	r7, [sp, #100]	; 0x64
   31430:	ldr	r0, [r4, #4]
   31434:	cmp	r3, r0
   31438:	ble	3102c <__assert_fail@plt+0x1e43c>
   3143c:	b	31758 <__assert_fail@plt+0x1eb68>
   31440:	ldr	r7, [sp, #108]	; 0x6c
   31444:	ldr	r3, [sp, #80]	; 0x50
   31448:	cmp	r7, #0
   3144c:	beq	314e8 <__assert_fail@plt+0x1e8f8>
   31450:	ldr	r5, [r7]
   31454:	ldr	r0, [r7, #4]
   31458:	add	r1, r5, #1
   3145c:	cmp	r1, r0
   31460:	str	r1, [r7]
   31464:	bne	314f0 <__assert_fail@plt+0x1e900>
   31468:	ldr	r0, [r7, #8]
   3146c:	add	r1, r1, r1, lsl #1
   31470:	lsl	r1, r1, #4
   31474:	bl	2e984 <__assert_fail@plt+0x1bd94>
   31478:	cmp	r0, #0
   3147c:	beq	3156c <__assert_fail@plt+0x1e97c>
   31480:	str	r0, [r7, #8]
   31484:	ldr	r3, [sp, #80]	; 0x50
   31488:	ldr	r1, [r7, #4]
   3148c:	lsl	r1, r1, #1
   31490:	str	r1, [r7, #4]
   31494:	b	314f4 <__assert_fail@plt+0x1e904>
   31498:	sub	r0, fp, #48	; 0x30
   3149c:	mov	r1, r9
   314a0:	bl	3665c <__assert_fail@plt+0x23a6c>
   314a4:	cmp	r0, #0
   314a8:	beq	3157c <__assert_fail@plt+0x1e98c>
   314ac:	ldr	r0, [r4, #20]
   314b0:	add	r1, r9, r9, lsl #1
   314b4:	ldr	r5, [fp, #-36]	; 0xffffffdc
   314b8:	add	r0, r0, r1, lsl #2
   314bc:	ldr	r0, [r0, #8]
   314c0:	ldr	r8, [r0]
   314c4:	ldr	r0, [sp, #212]	; 0xd4
   314c8:	ldr	r0, [r0, r5, lsl #2]
   314cc:	mov	r1, r8
   314d0:	add	r0, r0, #4
   314d4:	bl	36874 <__assert_fail@plt+0x23c84>
   314d8:	mov	r3, r5
   314dc:	cmp	r0, #0
   314e0:	bne	31410 <__assert_fail@plt+0x1e820>
   314e4:	b	31308 <__assert_fail@plt+0x1e718>
   314e8:	mov	r8, r4
   314ec:	b	31410 <__assert_fail@plt+0x1e820>
   314f0:	ldr	r0, [r7, #8]
   314f4:	add	r5, r5, r5, lsl #1
   314f8:	str	r3, [r0, r5, lsl #3]!
   314fc:	str	r8, [r0, #4]
   31500:	ldr	r0, [sp, #88]	; 0x58
   31504:	bl	2de8c <__assert_fail@plt+0x1b29c>
   31508:	ldr	r1, [r7, #8]
   3150c:	mvn	r8, #1
   31510:	cmp	r0, #0
   31514:	add	r6, r1, r5, lsl #3
   31518:	str	r0, [r6, #8]!
   3151c:	beq	313e4 <__assert_fail@plt+0x1e7f4>
   31520:	ldr	r9, [sp, #104]	; 0x68
   31524:	ldr	r1, [fp, #20]
   31528:	mov	r2, r9
   3152c:	bl	125f0 <memcpy@plt>
   31530:	ldr	r0, [r6]
   31534:	ldr	r1, [sp, #84]	; 0x54
   31538:	mov	r2, r9
   3153c:	add	r0, r0, r1, lsl #3
   31540:	ldr	r1, [sp, #100]	; 0x64
   31544:	bl	125f0 <memcpy@plt>
   31548:	ldr	r0, [r7, #8]
   3154c:	sub	r1, fp, #48	; 0x30
   31550:	add	r0, r0, r5, lsl #3
   31554:	add	r0, r0, #12
   31558:	bl	367f8 <__assert_fail@plt+0x23c08>
   3155c:	ldr	r3, [sp, #80]	; 0x50
   31560:	cmp	r0, #0
   31564:	moveq	r8, r4
   31568:	b	31410 <__assert_fail@plt+0x1e820>
   3156c:	mvn	r8, #1
   31570:	b	313e4 <__assert_fail@plt+0x1e7f4>
   31574:	cmn	r8, #2
   31578:	bne	31388 <__assert_fail@plt+0x1e798>
   3157c:	ldr	r0, [fp, #-40]	; 0xffffffd8
   31580:	bl	2bcbc <__assert_fail@plt+0x190cc>
   31584:	ldr	r0, [fp, #-200]	; 0xffffff38
   31588:	mov	r4, #12
   3158c:	cmp	r0, sl
   31590:	beq	31598 <__assert_fail@plt+0x1e9a8>
   31594:	bl	2bcbc <__assert_fail@plt+0x190cc>
   31598:	ldr	r6, [sp, #108]	; 0x6c
   3159c:	b	315bc <__assert_fail@plt+0x1e9cc>
   315a0:	ldr	r0, [fp, #-40]	; 0xffffffd8
   315a4:	bl	2bcbc <__assert_fail@plt+0x190cc>
   315a8:	mov	r4, #0
   315ac:	ldr	r0, [fp, #-200]	; 0xffffff38
   315b0:	cmp	r0, sl
   315b4:	beq	315bc <__assert_fail@plt+0x1e9cc>
   315b8:	bl	2bcbc <__assert_fail@plt+0x190cc>
   315bc:	mov	r0, #16
   315c0:	str	sl, [fp, #-200]	; 0xffffff38
   315c4:	str	r0, [fp, #-204]	; 0xffffff34
   315c8:	mov	r0, #0
   315cc:	str	r0, [fp, #-208]	; 0xffffff30
   315d0:	mov	r0, r6
   315d4:	bl	3b224 <__assert_fail@plt+0x28634>
   315d8:	mov	r2, r4
   315dc:	cmp	r2, #0
   315e0:	bne	31700 <__assert_fail@plt+0x1eb10>
   315e4:	ldr	r0, [fp, #20]
   315e8:	ldrb	r1, [sp, #188]	; 0xbc
   315ec:	ldr	r2, [fp, #16]
   315f0:	ldr	r8, [sp, #96]	; 0x60
   315f4:	ldr	r4, [sp, #32]
   315f8:	add	r0, r0, #4
   315fc:	ldr	r3, [r0, #-4]
   31600:	cmn	r3, #1
   31604:	beq	31624 <__assert_fail@plt+0x1ea34>
   31608:	cmp	r1, #0
   3160c:	bne	31638 <__assert_fail@plt+0x1ea48>
   31610:	ldr	r7, [r0]
   31614:	ldr	r6, [fp, #-212]	; 0xffffff2c
   31618:	add	r3, r3, r6
   3161c:	add	r7, r7, r6
   31620:	stmda	r0, {r3, r7}
   31624:	sub	r2, r2, #1
   31628:	add	r0, r0, #8
   3162c:	cmp	r4, r2
   31630:	bne	315fc <__assert_fail@plt+0x1ea0c>
   31634:	b	31670 <__assert_fail@plt+0x1ea80>
   31638:	ldr	r7, [sp, #140]	; 0x8c
   3163c:	ldr	r6, [sp, #28]
   31640:	ldr	ip, [sp, #124]	; 0x7c
   31644:	cmp	r3, r7
   31648:	mov	r5, r6
   3164c:	addne	r5, ip, r3, lsl #2
   31650:	ldr	r3, [r5]
   31654:	str	r3, [r0, #-4]
   31658:	ldr	r5, [r0]
   3165c:	cmp	r5, r7
   31660:	addne	r6, ip, r5, lsl #2
   31664:	ldr	r7, [r6]
   31668:	str	r7, [r0]
   3166c:	b	31614 <__assert_fail@plt+0x1ea24>
   31670:	cmp	r4, #1
   31674:	blt	31690 <__assert_fail@plt+0x1eaa0>
   31678:	ldr	r0, [sp, #84]	; 0x54
   3167c:	ldr	r1, [fp, #20]
   31680:	lsl	r2, r4, #3
   31684:	add	r0, r1, r0, lsl #3
   31688:	mov	r1, #255	; 0xff
   3168c:	bl	12938 <memset@plt>
   31690:	ldr	r0, [r8, #132]	; 0x84
   31694:	mov	r2, #0
   31698:	cmp	r0, #0
   3169c:	beq	31700 <__assert_fail@plt+0x1eb10>
   316a0:	ldr	r1, [sp, #84]	; 0x54
   316a4:	cmp	r1, #2
   316a8:	bcc	31700 <__assert_fail@plt+0x1eb10>
   316ac:	ldr	r1, [sp, #32]
   316b0:	ldr	r2, [fp, #16]
   316b4:	ldr	r6, [fp, #20]
   316b8:	mvn	r1, r1
   316bc:	add	r1, r1, r2
   316c0:	mov	r2, #0
   316c4:	ldr	r3, [r0, r2, lsl #2]
   316c8:	cmp	r2, r3
   316cc:	beq	316f0 <__assert_fail@plt+0x1eb00>
   316d0:	add	r3, r6, r3, lsl #3
   316d4:	add	r7, r6, r2, lsl #3
   316d8:	ldr	r3, [r3, #8]
   316dc:	str	r3, [r7, #8]
   316e0:	ldr	r3, [r0, r2, lsl #2]
   316e4:	add	r3, r6, r3, lsl #3
   316e8:	ldr	r3, [r3, #12]
   316ec:	str	r3, [r7, #12]
   316f0:	add	r2, r2, #1
   316f4:	cmp	r1, r2
   316f8:	bne	316c4 <__assert_fail@plt+0x1ead4>
   316fc:	mov	r2, #0
   31700:	ldr	r0, [sp, #212]	; 0xd4
   31704:	mov	sl, r2
   31708:	bl	2bcbc <__assert_fail@plt+0x190cc>
   3170c:	ldr	r0, [sp, #96]	; 0x60
   31710:	ldr	r0, [r0, #76]	; 0x4c
   31714:	cmp	r0, #0
   31718:	beq	31734 <__assert_fail@plt+0x1eb44>
   3171c:	add	r0, sp, #112	; 0x70
   31720:	bl	374ac <__assert_fail@plt+0x248bc>
   31724:	ldr	r0, [sp, #244]	; 0xf4
   31728:	bl	2bcbc <__assert_fail@plt+0x190cc>
   3172c:	ldr	r0, [sp, #228]	; 0xe4
   31730:	bl	2bcbc <__assert_fail@plt+0x190cc>
   31734:	add	r0, sp, #112	; 0x70
   31738:	bl	31df4 <__assert_fail@plt+0x1f204>
   3173c:	mov	r0, sl
   31740:	sub	sp, fp, #28
   31744:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   31748:	mov	r4, #0
   3174c:	b	30054 <__assert_fail@plt+0x1d464>
   31750:	mov	r2, #12
   31754:	b	315dc <__assert_fail@plt+0x1e9ec>
   31758:	ldr	r0, [fp, #-40]	; 0xffffffd8
   3175c:	b	3100c <__assert_fail@plt+0x1e41c>
   31760:	mov	r2, r0
   31764:	b	31700 <__assert_fail@plt+0x1eb10>
   31768:	ldr	r0, [fp, #-40]	; 0xffffffd8
   3176c:	bl	2bcbc <__assert_fail@plt+0x190cc>
   31770:	mov	r4, #1
   31774:	b	315ac <__assert_fail@plt+0x1e9bc>
   31778:	mov	r0, sl
   3177c:	bl	2bcbc <__assert_fail@plt+0x190cc>
   31780:	mov	r0, #0
   31784:	bl	2bcbc <__assert_fail@plt+0x190cc>
   31788:	mov	r2, #12
   3178c:	b	31700 <__assert_fail@plt+0x1eb10>
   31790:	mov	r2, #1
   31794:	b	31700 <__assert_fail@plt+0x1eb10>
   31798:	push	{fp, lr}
   3179c:	mov	fp, sp
   317a0:	sub	sp, sp, #16
   317a4:	mov	ip, #1
   317a8:	str	r2, [sp, #4]
   317ac:	str	ip, [sp, #12]
   317b0:	mov	ip, #0
   317b4:	str	ip, [sp]
   317b8:	ldr	ip, [fp, #8]
   317bc:	str	ip, [sp, #8]
   317c0:	bl	317cc <__assert_fail@plt+0x1ebdc>
   317c4:	mov	sp, fp
   317c8:	pop	{fp, pc}
   317cc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   317d0:	add	fp, sp, #28
   317d4:	sub	sp, sp, #44	; 0x2c
   317d8:	mvn	r6, #0
   317dc:	cmp	r3, #0
   317e0:	bmi	31a90 <__assert_fail@plt+0x1eea0>
   317e4:	mov	r5, r3
   317e8:	mov	r9, r2
   317ec:	cmp	r3, r2
   317f0:	bgt	31a90 <__assert_fail@plt+0x1eea0>
   317f4:	mov	r7, r0
   317f8:	ldr	r0, [fp, #8]
   317fc:	mov	sl, r1
   31800:	movw	r1, #10600	; 0x2968
   31804:	mov	r8, r9
   31808:	ldr	r6, [r7]
   3180c:	movt	r1, #1
   31810:	add	r0, r0, r5
   31814:	cmp	r0, r9
   31818:	bicle	r8, r0, r0, asr #31
   3181c:	movw	r0, #9664	; 0x25c0
   31820:	movt	r0, #1
   31824:	orrs	r4, r1, r0
   31828:	beq	31834 <__assert_fail@plt+0x1ec44>
   3182c:	add	r0, r6, #136	; 0x88
   31830:	bl	1259c <pthread_mutex_lock@plt>
   31834:	ldrb	r0, [r7, #28]
   31838:	str	r6, [sp, #24]
   3183c:	ldr	r6, [fp, #16]
   31840:	cmp	r8, r5
   31844:	ubfx	r1, r0, #5, #2
   31848:	str	r4, [sp, #36]	; 0x24
   3184c:	str	sl, [sp, #32]
   31850:	str	r1, [sp, #28]
   31854:	ble	31878 <__assert_fail@plt+0x1ec88>
   31858:	tst	r0, #8
   3185c:	bne	31878 <__assert_fail@plt+0x1ec88>
   31860:	ldr	r1, [r7, #16]
   31864:	cmp	r1, #0
   31868:	beq	31878 <__assert_fail@plt+0x1ec88>
   3186c:	mov	r0, r7
   31870:	bl	2f6ec <__assert_fail@plt+0x1cafc>
   31874:	ldrb	r0, [r7, #28]
   31878:	str	r7, [fp, #-32]	; 0xffffffe0
   3187c:	mov	sl, #1
   31880:	mov	r7, #0
   31884:	cmp	r6, #0
   31888:	beq	318d4 <__assert_fail@plt+0x1ece4>
   3188c:	ands	r1, r0, #16
   31890:	bne	318d4 <__assert_fail@plt+0x1ece4>
   31894:	and	r0, r0, #6
   31898:	cmp	r0, #4
   3189c:	bne	318c4 <__assert_fail@plt+0x1ecd4>
   318a0:	ldr	r0, [fp, #-32]	; 0xffffffe0
   318a4:	ldr	sl, [r6]
   318a8:	ldr	r0, [r0, #24]
   318ac:	cmp	sl, r0
   318b0:	bhi	318cc <__assert_fail@plt+0x1ecdc>
   318b4:	cmp	sl, #1
   318b8:	movwlt	r6, #0
   318bc:	movwlt	sl, #1
   318c0:	b	318d0 <__assert_fail@plt+0x1ece0>
   318c4:	ldr	r0, [fp, #-32]	; 0xffffffe0
   318c8:	ldr	r0, [r0, #24]
   318cc:	add	sl, r0, #1
   318d0:	mov	r7, r6
   318d4:	lsl	r0, sl, #3
   318d8:	bl	2de8c <__assert_fail@plt+0x1b29c>
   318dc:	cmp	r0, #0
   318e0:	beq	31a9c <__assert_fail@plt+0x1eeac>
   318e4:	ldr	r1, [fp, #12]
   318e8:	str	r8, [sp]
   318ec:	mov	r8, r0
   318f0:	mov	r2, r9
   318f4:	mov	r3, r5
   318f8:	stmib	sp, {r1, sl}
   318fc:	str	r0, [sp, #12]
   31900:	ldr	r0, [sp, #28]
   31904:	ldr	r1, [sp, #32]
   31908:	str	r0, [sp, #16]
   3190c:	ldr	r0, [fp, #-32]	; 0xffffffe0
   31910:	bl	2ff6c <__assert_fail@plt+0x1d37c>
   31914:	cmp	r0, #0
   31918:	beq	31934 <__assert_fail@plt+0x1ed44>
   3191c:	ldr	r4, [sp, #36]	; 0x24
   31920:	cmp	r0, #1
   31924:	mvn	r6, #1
   31928:	mov	r5, r8
   3192c:	mvneq	r6, #0
   31930:	b	31a74 <__assert_fail@plt+0x1ee84>
   31934:	str	r5, [sp, #32]
   31938:	cmp	r7, #0
   3193c:	mov	r5, r8
   31940:	beq	31a48 <__assert_fail@plt+0x1ee58>
   31944:	ldr	r0, [fp, #-32]	; 0xffffffe0
   31948:	add	r9, sl, #1
   3194c:	ldrb	r0, [r0, #28]
   31950:	ubfx	r0, r0, #1, #2
   31954:	cmp	r0, #1
   31958:	beq	319a4 <__assert_fail@plt+0x1edb4>
   3195c:	cmp	r0, #0
   31960:	bne	319bc <__assert_fail@plt+0x1edcc>
   31964:	lsl	r5, r9, #2
   31968:	mov	r0, r5
   3196c:	bl	2de8c <__assert_fail@plt+0x1b29c>
   31970:	mov	r6, #0
   31974:	cmp	r0, #0
   31978:	str	r0, [r7, #4]
   3197c:	beq	31af4 <__assert_fail@plt+0x1ef04>
   31980:	mov	r0, r5
   31984:	bl	2de8c <__assert_fail@plt+0x1b29c>
   31988:	cmp	r0, #0
   3198c:	str	r0, [r7, #8]
   31990:	beq	31aec <__assert_fail@plt+0x1eefc>
   31994:	str	r9, [r7]
   31998:	mov	r4, #1
   3199c:	mov	r5, r8
   319a0:	b	319c4 <__assert_fail@plt+0x1edd4>
   319a4:	ldr	r0, [r7]
   319a8:	mov	r4, #1
   319ac:	cmp	r9, r0
   319b0:	bhi	31aa8 <__assert_fail@plt+0x1eeb8>
   319b4:	mov	r9, r0
   319b8:	b	319c4 <__assert_fail@plt+0x1edd4>
   319bc:	ldr	r9, [r7]
   319c0:	mov	r4, #2
   319c4:	cmp	sl, #1
   319c8:	blt	319fc <__assert_fail@plt+0x1ee0c>
   319cc:	ldmib	r7, {r1, r2}
   319d0:	add	r0, r5, #4
   319d4:	mov	r3, sl
   319d8:	ldr	r6, [r0, #-4]
   319dc:	subs	r3, r3, #1
   319e0:	str	r6, [r1], #4
   319e4:	ldr	r6, [r0]
   319e8:	add	r0, r0, #8
   319ec:	str	r6, [r2], #4
   319f0:	bne	319d8 <__assert_fail@plt+0x1ede8>
   319f4:	ldr	r9, [r7]
   319f8:	b	31a00 <__assert_fail@plt+0x1ee10>
   319fc:	mov	sl, #0
   31a00:	cmp	sl, r9
   31a04:	bcs	31a28 <__assert_fail@plt+0x1ee38>
   31a08:	ldmib	r7, {r0, r1}
   31a0c:	mvn	r2, #0
   31a10:	str	r2, [r1, sl, lsl #2]
   31a14:	str	r2, [r0, sl, lsl #2]
   31a18:	add	sl, sl, #1
   31a1c:	ldr	r3, [r7]
   31a20:	cmp	sl, r3
   31a24:	bcc	31a10 <__assert_fail@plt+0x1ee20>
   31a28:	mov	r6, r4
   31a2c:	ldr	r1, [fp, #-32]	; 0xffffffe0
   31a30:	cmp	r6, #0
   31a34:	ldrb	r0, [r1, #28]
   31a38:	and	r0, r0, #249	; 0xf9
   31a3c:	orr	r0, r0, r6, lsl #1
   31a40:	strb	r0, [r1, #28]
   31a44:	beq	31a6c <__assert_fail@plt+0x1ee7c>
   31a48:	ldr	r0, [fp, #20]
   31a4c:	cmp	r0, #0
   31a50:	beq	31a64 <__assert_fail@plt+0x1ee74>
   31a54:	ldr	r0, [r5, #4]
   31a58:	ldr	r1, [sp, #32]
   31a5c:	sub	r6, r0, r1
   31a60:	b	31a70 <__assert_fail@plt+0x1ee80>
   31a64:	ldr	r6, [r5]
   31a68:	b	31a70 <__assert_fail@plt+0x1ee80>
   31a6c:	mvn	r6, #1
   31a70:	ldr	r4, [sp, #36]	; 0x24
   31a74:	mov	r0, r5
   31a78:	bl	2bcbc <__assert_fail@plt+0x190cc>
   31a7c:	cmp	r4, #0
   31a80:	beq	31a90 <__assert_fail@plt+0x1eea0>
   31a84:	ldr	r0, [sp, #24]
   31a88:	add	r0, r0, #136	; 0x88
   31a8c:	bl	12458 <pthread_mutex_unlock@plt>
   31a90:	mov	r0, r6
   31a94:	sub	sp, fp, #28
   31a98:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   31a9c:	ldr	r4, [sp, #36]	; 0x24
   31aa0:	mvn	r6, #1
   31aa4:	b	31a7c <__assert_fail@plt+0x1ee8c>
   31aa8:	ldr	r0, [r7, #4]
   31aac:	lsl	r1, r9, #2
   31ab0:	str	r1, [sp, #28]
   31ab4:	bl	2e984 <__assert_fail@plt+0x1bd94>
   31ab8:	mov	r6, #0
   31abc:	cmp	r0, #0
   31ac0:	beq	31af4 <__assert_fail@plt+0x1ef04>
   31ac4:	mov	r5, r0
   31ac8:	ldr	r0, [r7, #8]
   31acc:	ldr	r1, [sp, #28]
   31ad0:	bl	2e984 <__assert_fail@plt+0x1bd94>
   31ad4:	cmp	r0, #0
   31ad8:	beq	31afc <__assert_fail@plt+0x1ef0c>
   31adc:	str	r9, [r7]
   31ae0:	str	r5, [r7, #4]
   31ae4:	str	r0, [r7, #8]
   31ae8:	b	3199c <__assert_fail@plt+0x1edac>
   31aec:	ldr	r0, [r7, #4]
   31af0:	bl	2bcbc <__assert_fail@plt+0x190cc>
   31af4:	mov	r5, r8
   31af8:	b	31a2c <__assert_fail@plt+0x1ee3c>
   31afc:	mov	r0, r5
   31b00:	b	31af0 <__assert_fail@plt+0x1ef00>
   31b04:	push	{fp, lr}
   31b08:	mov	fp, sp
   31b0c:	sub	sp, sp, #16
   31b10:	mov	ip, #0
   31b14:	str	r2, [sp, #4]
   31b18:	str	ip, [sp, #12]
   31b1c:	ldr	ip, [fp, #12]
   31b20:	str	ip, [sp, #8]
   31b24:	ldr	ip, [fp, #8]
   31b28:	str	ip, [sp]
   31b2c:	bl	317cc <__assert_fail@plt+0x1ebdc>
   31b30:	mov	sp, fp
   31b34:	pop	{fp, pc}
   31b38:	push	{fp, lr}
   31b3c:	mov	fp, sp
   31b40:	sub	sp, sp, #24
   31b44:	mov	ip, #1
   31b48:	str	ip, [sp, #20]
   31b4c:	mov	ip, #0
   31b50:	str	ip, [sp, #8]
   31b54:	ldr	ip, [fp, #20]
   31b58:	str	ip, [sp, #16]
   31b5c:	ldr	ip, [fp, #16]
   31b60:	str	ip, [sp, #12]
   31b64:	ldr	ip, [fp, #12]
   31b68:	str	ip, [sp, #4]
   31b6c:	ldr	ip, [fp, #8]
   31b70:	str	ip, [sp]
   31b74:	bl	31b80 <__assert_fail@plt+0x1ef90>
   31b78:	mov	sp, fp
   31b7c:	pop	{fp, pc}
   31b80:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   31b84:	add	fp, sp, #28
   31b88:	sub	sp, sp, #20
   31b8c:	ldr	r4, [fp, #8]
   31b90:	mov	r8, r1
   31b94:	mov	r1, r0
   31b98:	mov	r6, r2
   31b9c:	orr	r0, r4, r2
   31ba0:	ldr	r2, [fp, #24]
   31ba4:	orrs	r0, r0, r2
   31ba8:	bmi	31c5c <__assert_fail@plt+0x1f06c>
   31bac:	adds	sl, r6, r4
   31bb0:	bvs	31c5c <__assert_fail@plt+0x1f06c>
   31bb4:	mov	r5, #0
   31bb8:	cmp	r4, #1
   31bbc:	blt	31c10 <__assert_fail@plt+0x1f020>
   31bc0:	mov	r9, r3
   31bc4:	cmp	r6, #1
   31bc8:	blt	31c18 <__assert_fail@plt+0x1f028>
   31bcc:	mov	r0, sl
   31bd0:	mov	r5, r1
   31bd4:	bl	2de8c <__assert_fail@plt+0x1b29c>
   31bd8:	cmp	r0, #0
   31bdc:	beq	31c5c <__assert_fail@plt+0x1f06c>
   31be0:	mov	r1, r8
   31be4:	mov	r2, r6
   31be8:	mov	r7, r0
   31bec:	bl	125f0 <memcpy@plt>
   31bf0:	add	r0, r7, r6
   31bf4:	mov	r1, r9
   31bf8:	mov	r2, r4
   31bfc:	bl	125f0 <memcpy@plt>
   31c00:	ldr	r2, [fp, #24]
   31c04:	mov	r1, r5
   31c08:	mov	r5, r7
   31c0c:	b	31c1c <__assert_fail@plt+0x1f02c>
   31c10:	mov	r7, r8
   31c14:	b	31c1c <__assert_fail@plt+0x1f02c>
   31c18:	mov	r7, r9
   31c1c:	add	r6, fp, #12
   31c20:	ldr	r0, [fp, #28]
   31c24:	ldm	r6, {r3, r4, r6}
   31c28:	str	r4, [sp]
   31c2c:	stmib	sp, {r2, r6}
   31c30:	mov	r2, sl
   31c34:	str	r0, [sp, #12]
   31c38:	mov	r0, r1
   31c3c:	mov	r1, r7
   31c40:	bl	317cc <__assert_fail@plt+0x1ebdc>
   31c44:	mov	r4, r0
   31c48:	mov	r0, r5
   31c4c:	bl	2bcbc <__assert_fail@plt+0x190cc>
   31c50:	mov	r0, r4
   31c54:	sub	sp, fp, #28
   31c58:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   31c5c:	mvn	r0, #1
   31c60:	b	31c54 <__assert_fail@plt+0x1f064>
   31c64:	push	{fp, lr}
   31c68:	mov	fp, sp
   31c6c:	sub	sp, sp, #24
   31c70:	mov	ip, #0
   31c74:	str	ip, [sp, #20]
   31c78:	ldr	ip, [fp, #24]
   31c7c:	str	ip, [sp, #16]
   31c80:	ldr	ip, [fp, #20]
   31c84:	str	ip, [sp, #12]
   31c88:	ldr	ip, [fp, #16]
   31c8c:	str	ip, [sp, #8]
   31c90:	ldr	ip, [fp, #12]
   31c94:	str	ip, [sp, #4]
   31c98:	ldr	ip, [fp, #8]
   31c9c:	str	ip, [sp]
   31ca0:	bl	31b80 <__assert_fail@plt+0x1ef90>
   31ca4:	mov	sp, fp
   31ca8:	pop	{fp, pc}
   31cac:	ldrb	ip, [r0, #28]
   31cb0:	cmp	r2, #0
   31cb4:	bic	ip, ip, #6
   31cb8:	orrne	ip, ip, #2
   31cbc:	strb	ip, [r0, #28]
   31cc0:	ldr	r0, [sp]
   31cc4:	moveq	r0, r2
   31cc8:	cmp	r2, #0
   31ccc:	moveq	r3, r2
   31cd0:	stm	r1, {r2, r3}
   31cd4:	str	r0, [r1, #8]
   31cd8:	bx	lr
   31cdc:	ldr	r1, [r0, #4]
   31ce0:	movw	r2, #255	; 0xff
   31ce4:	movt	r2, #4
   31ce8:	and	r1, r1, r2
   31cec:	cmp	r1, #3
   31cf0:	beq	31d04 <__assert_fail@plt+0x1f114>
   31cf4:	cmp	r1, #6
   31cf8:	bxne	lr
   31cfc:	ldr	r0, [r0]
   31d00:	b	31d6c <__assert_fail@plt+0x1f17c>
   31d04:	ldr	r0, [r0]
   31d08:	b	2bcbc <__assert_fail@plt+0x190cc>
   31d0c:	push	{r4, sl, fp, lr}
   31d10:	add	fp, sp, #8
   31d14:	mov	r4, r0
   31d18:	ldr	r0, [r0, #24]
   31d1c:	bl	2bcbc <__assert_fail@plt+0x190cc>
   31d20:	ldr	r0, [r4, #36]	; 0x24
   31d24:	bl	2bcbc <__assert_fail@plt+0x190cc>
   31d28:	ldr	r0, [r4, #40]	; 0x28
   31d2c:	add	r1, r4, #4
   31d30:	cmp	r0, r1
   31d34:	beq	31d48 <__assert_fail@plt+0x1f158>
   31d38:	ldr	r0, [r0, #8]
   31d3c:	bl	2bcbc <__assert_fail@plt+0x190cc>
   31d40:	ldr	r0, [r4, #40]	; 0x28
   31d44:	bl	2bcbc <__assert_fail@plt+0x190cc>
   31d48:	ldr	r0, [r4, #12]
   31d4c:	bl	2bcbc <__assert_fail@plt+0x190cc>
   31d50:	ldr	r0, [r4, #48]	; 0x30
   31d54:	bl	2bcbc <__assert_fail@plt+0x190cc>
   31d58:	ldr	r0, [r4, #44]	; 0x2c
   31d5c:	bl	2bcbc <__assert_fail@plt+0x190cc>
   31d60:	mov	r0, r4
   31d64:	pop	{r4, sl, fp, lr}
   31d68:	b	2bcbc <__assert_fail@plt+0x190cc>
   31d6c:	push	{r4, sl, fp, lr}
   31d70:	add	fp, sp, #8
   31d74:	mov	r4, r0
   31d78:	ldr	r0, [r0]
   31d7c:	bl	2bcbc <__assert_fail@plt+0x190cc>
   31d80:	ldr	r0, [r4, #4]
   31d84:	bl	2bcbc <__assert_fail@plt+0x190cc>
   31d88:	ldr	r0, [r4, #8]
   31d8c:	bl	2bcbc <__assert_fail@plt+0x190cc>
   31d90:	ldr	r0, [r4, #12]
   31d94:	bl	2bcbc <__assert_fail@plt+0x190cc>
   31d98:	mov	r0, r4
   31d9c:	pop	{r4, sl, fp, lr}
   31da0:	b	2bcbc <__assert_fail@plt+0x190cc>
   31da4:	push	{r4, r5, fp, lr}
   31da8:	add	fp, sp, #8
   31dac:	ldr	r4, [r0]
   31db0:	ldr	r0, [r4, #56]	; 0x38
   31db4:	cmp	r0, #0
   31db8:	beq	31dd0 <__assert_fail@plt+0x1f1e0>
   31dbc:	ldr	r5, [r0]
   31dc0:	bl	2bcbc <__assert_fail@plt+0x190cc>
   31dc4:	cmp	r5, #0
   31dc8:	mov	r0, r5
   31dcc:	bne	31dbc <__assert_fail@plt+0x1f1cc>
   31dd0:	mov	r0, #31
   31dd4:	mov	r5, #0
   31dd8:	str	r0, [r4, #64]	; 0x40
   31ddc:	str	r5, [r4, #52]	; 0x34
   31de0:	str	r5, [r4, #56]	; 0x38
   31de4:	ldr	r0, [r4, #16]
   31de8:	bl	2bcbc <__assert_fail@plt+0x190cc>
   31dec:	str	r5, [r4, #16]
   31df0:	pop	{r4, r5, fp, pc}
   31df4:	push	{r4, sl, fp, lr}
   31df8:	add	fp, sp, #8
   31dfc:	mov	r4, r0
   31e00:	ldr	r0, [r0, #8]
   31e04:	bl	2bcbc <__assert_fail@plt+0x190cc>
   31e08:	ldr	r0, [r4, #12]
   31e0c:	bl	2bcbc <__assert_fail@plt+0x190cc>
   31e10:	ldrb	r0, [r4, #75]	; 0x4b
   31e14:	cmp	r0, #0
   31e18:	popeq	{r4, sl, fp, pc}
   31e1c:	ldr	r0, [r4, #4]
   31e20:	pop	{r4, sl, fp, lr}
   31e24:	b	2bcbc <__assert_fail@plt+0x190cc>
   31e28:	push	{r4, r5, r6, r7, fp, lr}
   31e2c:	add	fp, sp, #16
   31e30:	mov	r5, r0
   31e34:	ldr	r0, [r0, #80]	; 0x50
   31e38:	mov	r4, r1
   31e3c:	cmp	r0, #2
   31e40:	blt	31e8c <__assert_fail@plt+0x1f29c>
   31e44:	mov	r6, #12
   31e48:	cmn	r4, #-1073741823	; 0xc0000001
   31e4c:	bhi	31eb8 <__assert_fail@plt+0x1f2c8>
   31e50:	ldr	r0, [r5, #8]
   31e54:	lsl	r7, r4, #2
   31e58:	mov	r1, r7
   31e5c:	bl	2e984 <__assert_fail@plt+0x1bd94>
   31e60:	cmp	r0, #0
   31e64:	beq	31eb8 <__assert_fail@plt+0x1f2c8>
   31e68:	str	r0, [r5, #8]
   31e6c:	ldr	r0, [r5, #12]
   31e70:	cmp	r0, #0
   31e74:	beq	31e8c <__assert_fail@plt+0x1f29c>
   31e78:	mov	r1, r7
   31e7c:	bl	2e984 <__assert_fail@plt+0x1bd94>
   31e80:	cmp	r0, #0
   31e84:	beq	31eb8 <__assert_fail@plt+0x1f2c8>
   31e88:	str	r0, [r5, #12]
   31e8c:	ldrb	r0, [r5, #75]	; 0x4b
   31e90:	cmp	r0, #0
   31e94:	beq	31eb0 <__assert_fail@plt+0x1f2c0>
   31e98:	ldr	r0, [r5, #4]
   31e9c:	mov	r1, r4
   31ea0:	bl	2e984 <__assert_fail@plt+0x1bd94>
   31ea4:	cmp	r0, #0
   31ea8:	beq	31ec0 <__assert_fail@plt+0x1f2d0>
   31eac:	str	r0, [r5, #4]
   31eb0:	mov	r6, #0
   31eb4:	str	r4, [r5, #36]	; 0x24
   31eb8:	mov	r0, r6
   31ebc:	pop	{r4, r5, r6, r7, fp, pc}
   31ec0:	mov	r6, #12
   31ec4:	b	31eb8 <__assert_fail@plt+0x1f2c8>
   31ec8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   31ecc:	add	fp, sp, #28
   31ed0:	sub	sp, sp, #92	; 0x5c
   31ed4:	mov	r6, r0
   31ed8:	ldrb	r0, [r0, #74]	; 0x4a
   31edc:	ldr	r8, [r6, #36]	; 0x24
   31ee0:	ldr	r1, [r6, #48]	; 0x30
   31ee4:	ldr	sl, [r6, #28]
   31ee8:	str	r6, [sp]
   31eec:	cmp	r8, r1
   31ef0:	movgt	r8, r1
   31ef4:	cmp	r0, #0
   31ef8:	bne	31f14 <__assert_fail@plt+0x1f324>
   31efc:	ldr	r0, [r6, #64]	; 0x40
   31f00:	cmp	r0, #0
   31f04:	bne	31f14 <__assert_fail@plt+0x1f324>
   31f08:	ldrb	r0, [r6, #76]	; 0x4c
   31f0c:	cmp	r0, #0
   31f10:	beq	31f1c <__assert_fail@plt+0x1f32c>
   31f14:	ldr	r7, [r6, #32]
   31f18:	b	3210c <__assert_fail@plt+0x1f51c>
   31f1c:	cmp	r8, sl
   31f20:	ble	320e0 <__assert_fail@plt+0x1f4f0>
   31f24:	add	r9, r6, #16
   31f28:	str	r8, [sp, #4]
   31f2c:	ldr	r7, [r6, #24]
   31f30:	ldr	r4, [r6]
   31f34:	mov	r5, sl
   31f38:	add	r0, r7, sl
   31f3c:	ldrb	r6, [r4, r0]
   31f40:	tst	r6, #128	; 0x80
   31f44:	bne	31f88 <__assert_fail@plt+0x1f398>
   31f48:	mov	r0, r9
   31f4c:	bl	1262c <mbsinit@plt>
   31f50:	cmp	r0, #0
   31f54:	add	sl, sp, #16
   31f58:	beq	31f9c <__assert_fail@plt+0x1f3ac>
   31f5c:	mov	r0, r6
   31f60:	bl	12b78 <towupper@plt>
   31f64:	cmp	r0, #128	; 0x80
   31f68:	bcs	31f90 <__assert_fail@plt+0x1f3a0>
   31f6c:	ldr	r2, [sp]
   31f70:	add	sl, r5, #1
   31f74:	ldr	r1, [r2, #4]
   31f78:	strb	r0, [r1, r5]
   31f7c:	ldr	r1, [r2, #8]
   31f80:	str	r0, [r1, r5, lsl #2]
   31f84:	b	32078 <__assert_fail@plt+0x1f488>
   31f88:	add	sl, sp, #16
   31f8c:	b	31f9c <__assert_fail@plt+0x1f3ac>
   31f90:	ldr	r0, [sp]
   31f94:	ldr	r4, [r0]
   31f98:	ldr	r7, [r0, #24]
   31f9c:	ldm	r9, {r0, r1}
   31fa0:	str	r1, [fp, #-36]	; 0xffffffdc
   31fa4:	sub	r2, r8, r5
   31fa8:	mov	r3, r9
   31fac:	str	r0, [fp, #-40]	; 0xffffffd8
   31fb0:	add	r0, r4, r7
   31fb4:	mov	r7, r5
   31fb8:	add	r1, r0, r5
   31fbc:	add	r0, sp, #12
   31fc0:	bl	2debc <__assert_fail@plt+0x1b2cc>
   31fc4:	sub	r8, r0, #1
   31fc8:	mov	r4, r0
   31fcc:	cmn	r8, #4
   31fd0:	bhi	32090 <__assert_fail@plt+0x1f4a0>
   31fd4:	ldr	r0, [sp, #12]
   31fd8:	bl	12b78 <towupper@plt>
   31fdc:	mov	r6, r0
   31fe0:	ldr	r0, [sp, #12]
   31fe4:	cmp	r6, r0
   31fe8:	bne	3200c <__assert_fail@plt+0x1f41c>
   31fec:	ldr	r5, [sp]
   31ff0:	ldr	r1, [r5]
   31ff4:	ldr	r2, [r5, #24]
   31ff8:	ldr	r0, [r5, #4]
   31ffc:	add	r1, r1, r2
   32000:	add	r0, r0, r7
   32004:	add	r1, r1, r7
   32008:	b	32034 <__assert_fail@plt+0x1f444>
   3200c:	mov	r0, sl
   32010:	mov	r1, r6
   32014:	sub	r2, fp, #40	; 0x28
   32018:	bl	124b8 <wcrtomb@plt>
   3201c:	cmp	r4, r0
   32020:	bne	320e8 <__assert_fail@plt+0x1f4f8>
   32024:	ldr	r5, [sp]
   32028:	mov	r1, sl
   3202c:	ldr	r0, [r5, #4]
   32030:	add	r0, r0, r7
   32034:	mov	r2, r4
   32038:	bl	125f0 <memcpy@plt>
   3203c:	ldr	r0, [r5, #8]
   32040:	add	sl, r7, #1
   32044:	str	r6, [r0, r7, lsl #2]
   32048:	add	r6, r4, r7
   3204c:	cmp	sl, r6
   32050:	bge	32078 <__assert_fail@plt+0x1f488>
   32054:	add	r0, r0, r7, lsl #2
   32058:	mvn	r1, #3
   3205c:	add	r2, r1, r4, lsl #2
   32060:	mov	r1, #255	; 0xff
   32064:	add	r0, r0, #4
   32068:	bl	12938 <memset@plt>
   3206c:	subs	r8, r8, #1
   32070:	bne	3206c <__assert_fail@plt+0x1f47c>
   32074:	mov	sl, r6
   32078:	ldr	r8, [sp, #4]
   3207c:	ldr	r6, [sp]
   32080:	mov	r7, sl
   32084:	cmp	r8, sl
   32088:	bgt	31f2c <__assert_fail@plt+0x1f33c>
   3208c:	b	32458 <__assert_fail@plt+0x1f868>
   32090:	add	r0, r4, #1
   32094:	cmp	r0, #2
   32098:	bcc	320b0 <__assert_fail@plt+0x1f4c0>
   3209c:	ldr	r1, [sp]
   320a0:	ldr	r0, [r1, #36]	; 0x24
   320a4:	ldr	r1, [r1, #48]	; 0x30
   320a8:	cmp	r0, r1
   320ac:	blt	320f4 <__assert_fail@plt+0x1f504>
   320b0:	ldr	r1, [sp]
   320b4:	add	sl, r7, #1
   320b8:	cmn	r4, #1
   320bc:	ldr	r0, [r1, #4]
   320c0:	strb	r6, [r0, r7]
   320c4:	ldr	r0, [r1, #8]
   320c8:	str	r6, [r0, r7, lsl #2]
   320cc:	bne	32078 <__assert_fail@plt+0x1f488>
   320d0:	ldr	r0, [fp, #-40]	; 0xffffffd8
   320d4:	ldr	r1, [fp, #-36]	; 0xffffffdc
   320d8:	stm	r9, {r0, r1}
   320dc:	b	32078 <__assert_fail@plt+0x1f488>
   320e0:	mov	r7, sl
   320e4:	b	32458 <__assert_fail@plt+0x1f868>
   320e8:	ldm	sp, {r6, r8}
   320ec:	mov	sl, r7
   320f0:	b	32114 <__assert_fail@plt+0x1f524>
   320f4:	ldr	r0, [fp, #-40]	; 0xffffffd8
   320f8:	ldr	r1, [fp, #-36]	; 0xffffffdc
   320fc:	mov	sl, r7
   32100:	stm	r9, {r0, r1}
   32104:	ldr	r6, [sp]
   32108:	b	32458 <__assert_fail@plt+0x1f868>
   3210c:	cmp	sl, r8
   32110:	bge	32458 <__assert_fail@plt+0x1f868>
   32114:	mov	r3, r6
   32118:	ldr	r0, [r6, #16]!
   3211c:	sub	r2, r8, sl
   32120:	str	r7, [sp, #4]
   32124:	ldr	r1, [r6, #4]
   32128:	str	r0, [fp, #-40]	; 0xffffffd8
   3212c:	str	r1, [fp, #-36]	; 0xffffffdc
   32130:	ldr	r0, [r6, #48]	; 0x30
   32134:	cmp	r0, #0
   32138:	bne	32218 <__assert_fail@plt+0x1f628>
   3213c:	ldr	r0, [r3]
   32140:	ldr	r1, [r3, #24]
   32144:	add	r0, r0, r1
   32148:	add	r4, r0, r7
   3214c:	add	r0, sp, #8
   32150:	mov	r1, r4
   32154:	mov	r3, r6
   32158:	mov	r9, r8
   3215c:	bl	2debc <__assert_fail@plt+0x1b2cc>
   32160:	sub	r8, r0, #1
   32164:	mov	r5, r0
   32168:	cmn	r8, #4
   3216c:	bhi	32278 <__assert_fail@plt+0x1f688>
   32170:	ldr	r0, [sp, #8]
   32174:	bl	12b78 <towupper@plt>
   32178:	mov	r7, r0
   3217c:	ldr	r0, [sp, #8]
   32180:	cmp	r7, r0
   32184:	bne	32194 <__assert_fail@plt+0x1f5a4>
   32188:	ldr	r6, [sp]
   3218c:	mov	r1, r4
   32190:	b	321b4 <__assert_fail@plt+0x1f5c4>
   32194:	add	r0, sp, #16
   32198:	sub	r2, fp, #40	; 0x28
   3219c:	mov	r1, r7
   321a0:	bl	124b8 <wcrtomb@plt>
   321a4:	cmp	r0, r5
   321a8:	bne	322f4 <__assert_fail@plt+0x1f704>
   321ac:	ldr	r6, [sp]
   321b0:	add	r1, sp, #16
   321b4:	ldr	r0, [r6, #4]
   321b8:	add	r0, r0, sl
   321bc:	mov	r2, r5
   321c0:	bl	125f0 <memcpy@plt>
   321c4:	ldrb	r0, [r6, #76]	; 0x4c
   321c8:	cmp	r0, #0
   321cc:	bne	32420 <__assert_fail@plt+0x1f830>
   321d0:	ldr	r0, [r6, #8]
   321d4:	add	r4, r5, sl
   321d8:	str	r7, [r0, sl, lsl #2]
   321dc:	ldr	r7, [sp, #4]
   321e0:	add	sl, sl, #1
   321e4:	cmp	sl, r4
   321e8:	add	r7, r5, r7
   321ec:	bge	32210 <__assert_fail@plt+0x1f620>
   321f0:	mvn	r1, #3
   321f4:	add	r0, r0, sl, lsl #2
   321f8:	add	r2, r1, r5, lsl #2
   321fc:	mov	r1, #255	; 0xff
   32200:	bl	12938 <memset@plt>
   32204:	subs	r8, r8, #1
   32208:	bne	32204 <__assert_fail@plt+0x1f614>
   3220c:	mov	sl, r4
   32210:	mov	r8, r9
   32214:	b	3210c <__assert_fail@plt+0x1f51c>
   32218:	add	r4, sp, #16
   3221c:	cmp	r2, #1
   32220:	blt	3214c <__assert_fail@plt+0x1f55c>
   32224:	ldr	r1, [sp]
   32228:	ldr	r1, [r1, #80]	; 0x50
   3222c:	cmp	r1, #1
   32230:	blt	3214c <__assert_fail@plt+0x1f55c>
   32234:	ldr	r4, [sp]
   32238:	mov	r5, r7
   3223c:	ldr	r7, [r4, #24]
   32240:	ldr	r3, [r4]
   32244:	add	r4, sp, #16
   32248:	add	r7, r5, r7
   3224c:	add	r3, r3, r7
   32250:	mov	r7, #0
   32254:	ldrb	r5, [r3, r7]
   32258:	ldrb	r5, [r0, r5]
   3225c:	strb	r5, [r4, r7]
   32260:	add	r7, r7, #1
   32264:	cmp	r7, r2
   32268:	bge	3214c <__assert_fail@plt+0x1f55c>
   3226c:	cmp	r7, r1
   32270:	blt	32254 <__assert_fail@plt+0x1f664>
   32274:	b	3214c <__assert_fail@plt+0x1f55c>
   32278:	ldr	r3, [sp]
   3227c:	add	r0, r5, #1
   32280:	cmp	r0, #2
   32284:	bcc	32298 <__assert_fail@plt+0x1f6a8>
   32288:	ldr	r0, [r3, #36]	; 0x24
   3228c:	ldr	r1, [r3, #48]	; 0x30
   32290:	cmp	r0, r1
   32294:	blt	32444 <__assert_fail@plt+0x1f854>
   32298:	ldr	r2, [r3, #24]
   3229c:	ldr	r7, [sp, #4]
   322a0:	ldr	r0, [r3]
   322a4:	ldr	r1, [r3, #64]	; 0x40
   322a8:	add	r2, r2, r7
   322ac:	cmp	r1, #0
   322b0:	ldrb	r0, [r0, r2]
   322b4:	bne	32474 <__assert_fail@plt+0x1f884>
   322b8:	ldr	r2, [sp]
   322bc:	mov	r8, r9
   322c0:	ldr	r1, [r2, #4]
   322c4:	strb	r0, [r1, sl]
   322c8:	ldrb	r1, [r2, #76]	; 0x4c
   322cc:	cmp	r1, #0
   322d0:	bne	3247c <__assert_fail@plt+0x1f88c>
   322d4:	ldr	r1, [r2, #8]
   322d8:	add	r7, r7, #1
   322dc:	cmn	r5, #1
   322e0:	str	r0, [r1, sl, lsl #2]
   322e4:	add	sl, sl, #1
   322e8:	beq	32488 <__assert_fail@plt+0x1f898>
   322ec:	ldr	r6, [sp]
   322f0:	b	3210c <__assert_fail@plt+0x1f51c>
   322f4:	mov	r2, r0
   322f8:	cmn	r0, #1
   322fc:	beq	32188 <__assert_fail@plt+0x1f598>
   32300:	ldr	r3, [sp]
   32304:	add	r9, r2, sl
   32308:	ldr	r1, [r3, #36]	; 0x24
   3230c:	cmp	r9, r1
   32310:	bhi	32444 <__assert_fail@plt+0x1f854>
   32314:	ldr	r0, [r3, #12]
   32318:	mov	r6, r3
   3231c:	cmp	r0, #0
   32320:	bne	32340 <__assert_fail@plt+0x1f750>
   32324:	lsl	r0, r1, #2
   32328:	mov	r4, r2
   3232c:	bl	2de8c <__assert_fail@plt+0x1b29c>
   32330:	mov	r2, r4
   32334:	cmp	r0, #0
   32338:	str	r0, [r6, #12]
   3233c:	beq	3246c <__assert_fail@plt+0x1f87c>
   32340:	ldrb	r1, [r6, #76]	; 0x4c
   32344:	cmp	r1, #0
   32348:	bne	32370 <__assert_fail@plt+0x1f780>
   3234c:	cmp	sl, #0
   32350:	beq	32368 <__assert_fail@plt+0x1f778>
   32354:	mov	r1, #0
   32358:	str	r1, [r0, r1, lsl #2]
   3235c:	add	r1, r1, #1
   32360:	cmp	sl, r1
   32364:	bne	32358 <__assert_fail@plt+0x1f768>
   32368:	mov	r0, #1
   3236c:	strb	r0, [r6, #76]	; 0x4c
   32370:	ldr	r0, [r6, #4]
   32374:	add	r1, sp, #16
   32378:	mov	r4, r2
   3237c:	add	r0, r0, sl
   32380:	bl	125f0 <memcpy@plt>
   32384:	ldr	r1, [r6, #8]
   32388:	cmp	r4, #2
   3238c:	str	r7, [r1, sl, lsl #2]
   32390:	ldr	r0, [r6, #12]
   32394:	ldr	r6, [sp, #4]
   32398:	str	r6, [r0, sl, lsl #2]
   3239c:	bcc	323d4 <__assert_fail@plt+0x1f7e4>
   323a0:	add	r0, r0, sl, lsl #2
   323a4:	add	r1, r1, sl, lsl #2
   323a8:	mov	r2, #1
   323ac:	mvn	r3, #0
   323b0:	cmp	r2, r5
   323b4:	mov	r7, r8
   323b8:	movcc	r7, r2
   323bc:	add	r7, r7, r6
   323c0:	str	r7, [r0, r2, lsl #2]
   323c4:	str	r3, [r1, r2, lsl #2]
   323c8:	add	r2, r2, #1
   323cc:	cmp	r4, r2
   323d0:	bne	323b0 <__assert_fail@plt+0x1f7c0>
   323d4:	ldr	r3, [sp]
   323d8:	sub	r1, r4, r5
   323dc:	mov	r7, r6
   323e0:	ldr	r0, [r3, #48]	; 0x30
   323e4:	ldr	r2, [r3, #52]	; 0x34
   323e8:	add	r0, r0, r1
   323ec:	cmp	r2, r6
   323f0:	mov	r6, r3
   323f4:	str	r0, [r3, #48]	; 0x30
   323f8:	ble	32408 <__assert_fail@plt+0x1f818>
   323fc:	ldr	r2, [r6, #56]	; 0x38
   32400:	add	r1, r2, r1
   32404:	str	r1, [r6, #56]	; 0x38
   32408:	ldr	r8, [r6, #36]	; 0x24
   3240c:	add	r7, r5, r7
   32410:	mov	sl, r9
   32414:	cmp	r8, r0
   32418:	movgt	r8, r0
   3241c:	b	3210c <__assert_fail@plt+0x1f51c>
   32420:	ldr	r0, [r6, #12]
   32424:	ldr	r1, [sp, #4]
   32428:	mov	r2, r5
   3242c:	add	r0, r0, sl, lsl #2
   32430:	str	r1, [r0], #4
   32434:	add	r1, r1, #1
   32438:	subs	r2, r2, #1
   3243c:	bne	32430 <__assert_fail@plt+0x1f840>
   32440:	b	321d0 <__assert_fail@plt+0x1f5e0>
   32444:	ldr	r0, [fp, #-40]	; 0xffffffd8
   32448:	ldr	r1, [fp, #-36]	; 0xffffffdc
   3244c:	stm	r6, {r0, r1}
   32450:	mov	r6, r3
   32454:	ldr	r7, [sp, #4]
   32458:	mov	r0, #0
   3245c:	str	sl, [r6, #28]
   32460:	str	r7, [r6, #32]
   32464:	sub	sp, fp, #28
   32468:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3246c:	mov	r0, #12
   32470:	b	32464 <__assert_fail@plt+0x1f874>
   32474:	ldrb	r0, [r1, r0]
   32478:	b	322b8 <__assert_fail@plt+0x1f6c8>
   3247c:	ldr	r1, [r2, #12]
   32480:	str	r7, [r1, sl, lsl #2]
   32484:	b	322d4 <__assert_fail@plt+0x1f6e4>
   32488:	ldr	r0, [fp, #-40]	; 0xffffffd8
   3248c:	ldr	r1, [fp, #-36]	; 0xffffffdc
   32490:	stm	r6, {r0, r1}
   32494:	b	322ec <__assert_fail@plt+0x1f6fc>
   32498:	push	{r4, r5, r6, sl, fp, lr}
   3249c:	add	fp, sp, #16
   324a0:	mov	r4, r0
   324a4:	ldr	r5, [r0, #28]
   324a8:	ldr	r6, [r0, #36]	; 0x24
   324ac:	ldr	r0, [r0, #48]	; 0x30
   324b0:	cmp	r6, r0
   324b4:	movgt	r6, r0
   324b8:	cmp	r5, r6
   324bc:	bge	324f8 <__assert_fail@plt+0x1f908>
   324c0:	ldr	r0, [r4]
   324c4:	ldr	r2, [r4, #24]
   324c8:	ldr	r1, [r4, #64]	; 0x40
   324cc:	add	r0, r0, r2
   324d0:	cmp	r1, #0
   324d4:	ldrb	r0, [r0, r5]
   324d8:	bne	324f0 <__assert_fail@plt+0x1f900>
   324dc:	bl	12a40 <toupper@plt>
   324e0:	ldr	r1, [r4, #4]
   324e4:	strb	r0, [r1, r5]
   324e8:	add	r5, r5, #1
   324ec:	b	324b8 <__assert_fail@plt+0x1f8c8>
   324f0:	ldrb	r0, [r1, r0]
   324f4:	b	324dc <__assert_fail@plt+0x1f8ec>
   324f8:	str	r5, [r4, #28]
   324fc:	str	r5, [r4, #32]
   32500:	pop	{r4, r5, r6, sl, fp, pc}
   32504:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   32508:	add	fp, sp, #28
   3250c:	sub	sp, sp, #76	; 0x4c
   32510:	mov	r4, r0
   32514:	ldr	sl, [r0, #28]
   32518:	ldr	r6, [r0, #36]	; 0x24
   3251c:	ldr	r0, [r0, #48]	; 0x30
   32520:	cmp	r6, r0
   32524:	movgt	r6, r0
   32528:	cmp	r6, sl
   3252c:	ble	326dc <__assert_fail@plt+0x1faec>
   32530:	add	r9, r4, #16
   32534:	add	r0, sp, #8
   32538:	ldr	r3, [r4, #64]	; 0x40
   3253c:	ldm	r9, {r1, r5}
   32540:	sub	r2, r6, sl
   32544:	str	r1, [sp, #4]
   32548:	cmp	r3, #0
   3254c:	bne	3261c <__assert_fail@plt+0x1fa2c>
   32550:	ldr	r3, [r4]
   32554:	ldr	r1, [r4, #24]
   32558:	add	r1, r3, r1
   3255c:	add	r1, r1, sl
   32560:	mov	r3, r9
   32564:	mov	r8, r0
   32568:	bl	2debc <__assert_fail@plt+0x1b2cc>
   3256c:	mov	r7, r0
   32570:	add	r0, r0, #1
   32574:	cmp	r0, #2
   32578:	bcc	32594 <__assert_fail@plt+0x1f9a4>
   3257c:	cmn	r7, #2
   32580:	bne	325c4 <__assert_fail@plt+0x1f9d4>
   32584:	ldr	r0, [r4, #36]	; 0x24
   32588:	ldr	r1, [r4, #48]	; 0x30
   3258c:	cmp	r0, r1
   32590:	blt	326d4 <__assert_fail@plt+0x1fae4>
   32594:	ldr	r1, [r4, #24]
   32598:	ldr	r0, [r4]
   3259c:	add	r1, r1, sl
   325a0:	ldrb	r0, [r0, r1]
   325a4:	str	r0, [sp, #8]
   325a8:	ldr	r1, [r4, #64]	; 0x40
   325ac:	cmp	r1, #0
   325b0:	bne	326c8 <__assert_fail@plt+0x1fad8>
   325b4:	ldr	r1, [sp, #4]
   325b8:	mov	r7, #1
   325bc:	stm	r9, {r1, r5}
   325c0:	b	325c8 <__assert_fail@plt+0x1f9d8>
   325c4:	ldr	r0, [sp, #8]
   325c8:	ldr	r1, [r4, #8]
   325cc:	add	r5, r7, sl
   325d0:	add	r2, sl, #1
   325d4:	cmp	r2, r5
   325d8:	str	r0, [r1, sl, lsl #2]
   325dc:	bge	32608 <__assert_fail@plt+0x1fa18>
   325e0:	mvn	r0, #3
   325e4:	add	r2, r0, r7, lsl #2
   325e8:	add	r0, r1, sl, lsl #2
   325ec:	mov	r1, #255	; 0xff
   325f0:	add	r0, r0, #4
   325f4:	bl	12938 <memset@plt>
   325f8:	sub	r0, r7, #1
   325fc:	subs	r0, r0, #1
   32600:	bne	325fc <__assert_fail@plt+0x1fa0c>
   32604:	mov	r2, r5
   32608:	cmp	r6, r2
   3260c:	mov	sl, r2
   32610:	mov	r0, r8
   32614:	bgt	32538 <__assert_fail@plt+0x1f948>
   32618:	b	326e0 <__assert_fail@plt+0x1faf0>
   3261c:	cmp	r2, #1
   32620:	add	r1, sp, #12
   32624:	blt	32560 <__assert_fail@plt+0x1f970>
   32628:	ldr	r1, [r4, #80]	; 0x50
   3262c:	cmp	r1, #1
   32630:	add	r1, sp, #12
   32634:	blt	32560 <__assert_fail@plt+0x1f970>
   32638:	ldr	r7, [r4, #24]
   3263c:	ldm	r4, {r1, ip}
   32640:	cmp	r2, #2
   32644:	add	r7, sl, r7
   32648:	ldrb	r1, [r1, r7]
   3264c:	ldrb	r1, [r3, r1]
   32650:	strb	r1, [ip, sl]
   32654:	strb	r1, [sp, #12]
   32658:	add	r1, sp, #12
   3265c:	blt	32560 <__assert_fail@plt+0x1f970>
   32660:	ldr	r1, [r4, #80]	; 0x50
   32664:	cmp	r1, #2
   32668:	add	r1, sp, #12
   3266c:	blt	32560 <__assert_fail@plt+0x1f970>
   32670:	mov	lr, r0
   32674:	mov	r0, #1
   32678:	ldr	r7, [r4, #24]
   3267c:	ldm	r4, {r1, ip}
   32680:	ldr	r3, [r4, #64]	; 0x40
   32684:	add	r1, r1, r7
   32688:	add	r1, r1, sl
   3268c:	ldrb	r1, [r1, r0]
   32690:	ldrb	r1, [r3, r1]
   32694:	add	r3, ip, sl
   32698:	strb	r1, [r3, r0]
   3269c:	add	r3, sp, #12
   326a0:	strb	r1, [r3, r0]
   326a4:	add	r0, r0, #1
   326a8:	cmp	r0, r2
   326ac:	bge	326bc <__assert_fail@plt+0x1facc>
   326b0:	ldr	r1, [r4, #80]	; 0x50
   326b4:	cmp	r0, r1
   326b8:	blt	32678 <__assert_fail@plt+0x1fa88>
   326bc:	add	r1, sp, #12
   326c0:	mov	r0, lr
   326c4:	b	32560 <__assert_fail@plt+0x1f970>
   326c8:	ldrb	r0, [r1, r0]
   326cc:	str	r0, [sp, #8]
   326d0:	b	325b4 <__assert_fail@plt+0x1f9c4>
   326d4:	ldr	r0, [sp, #4]
   326d8:	stm	r9, {r0, r5}
   326dc:	mov	r2, sl
   326e0:	str	r2, [r4, #28]
   326e4:	str	r2, [r4, #32]
   326e8:	sub	sp, fp, #28
   326ec:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   326f0:	push	{r4, sl, fp, lr}
   326f4:	add	fp, sp, #8
   326f8:	ldr	ip, [r0, #36]	; 0x24
   326fc:	ldr	r3, [r0, #48]	; 0x30
   32700:	ldr	r1, [r0, #28]
   32704:	cmp	ip, r3
   32708:	movgt	ip, r3
   3270c:	cmp	r1, ip
   32710:	bge	32738 <__assert_fail@plt+0x1fb48>
   32714:	ldr	r2, [r0, #24]
   32718:	ldm	r0, {r3, lr}
   3271c:	ldr	r4, [r0, #64]	; 0x40
   32720:	add	r2, r3, r2
   32724:	ldrb	r2, [r2, r1]
   32728:	ldrb	r2, [r4, r2]
   3272c:	strb	r2, [lr, r1]
   32730:	add	r1, r1, #1
   32734:	b	3270c <__assert_fail@plt+0x1fb1c>
   32738:	str	r1, [r0, #28]
   3273c:	str	r1, [r0, #32]
   32740:	pop	{r4, sl, fp, pc}
   32744:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   32748:	add	fp, sp, #28
   3274c:	sub	sp, sp, #28
   32750:	ldr	r9, [r1]
   32754:	mov	r5, r0
   32758:	ldr	r8, [fp, #12]
   3275c:	mov	r6, r2
   32760:	str	r1, [sp, #12]
   32764:	str	r3, [sp, #16]
   32768:	ldr	r0, [r9, #84]	; 0x54
   3276c:	str	r8, [sp, #4]
   32770:	str	r0, [sp, #8]
   32774:	ldr	r0, [fp, #8]
   32778:	str	r0, [sp]
   3277c:	mov	r0, r5
   32780:	bl	32f84 <__assert_fail@plt+0x20394>
   32784:	mov	r4, r0
   32788:	cmp	r0, #0
   3278c:	bne	3279c <__assert_fail@plt+0x1fbac>
   32790:	ldr	r0, [r8]
   32794:	cmp	r0, #0
   32798:	bne	3288c <__assert_fail@plt+0x1fc9c>
   3279c:	ldr	r0, [sp, #16]
   327a0:	ldr	r8, [fp, #8]
   327a4:	mov	r7, #10
   327a8:	orr	sl, r0, #8388608	; 0x800000
   327ac:	ldrb	r0, [r6, #4]
   327b0:	cmp	r0, #10
   327b4:	bne	32890 <__assert_fail@plt+0x1fca0>
   327b8:	mov	r0, r6
   327bc:	mov	r1, r5
   327c0:	mov	r2, sl
   327c4:	bl	328f4 <__assert_fail@plt+0x1fd04>
   327c8:	ldr	r1, [r5, #40]	; 0x28
   327cc:	mov	r2, #0
   327d0:	add	r0, r1, r0
   327d4:	str	r0, [r5, #40]	; 0x28
   327d8:	ldrb	r0, [r6, #4]
   327dc:	orr	r1, r0, #8
   327e0:	cmp	r1, #10
   327e4:	bne	32814 <__assert_fail@plt+0x1fc24>
   327e8:	mov	r0, #0
   327ec:	str	r7, [sp, #24]
   327f0:	mov	r1, r4
   327f4:	add	r3, sp, #20
   327f8:	str	r0, [sp, #20]
   327fc:	mov	r0, r9
   32800:	bl	34714 <__assert_fail@plt+0x21b24>
   32804:	mov	r4, r0
   32808:	cmp	r0, #0
   3280c:	bne	327ac <__assert_fail@plt+0x1fbbc>
   32810:	b	32880 <__assert_fail@plt+0x1fc90>
   32814:	cmp	r8, #0
   32818:	beq	32824 <__assert_fail@plt+0x1fc34>
   3281c:	cmp	r0, #9
   32820:	beq	327e8 <__assert_fail@plt+0x1fbf8>
   32824:	ldr	r0, [sp, #8]
   32828:	ldr	r7, [r9, #84]	; 0x54
   3282c:	ldr	r1, [sp, #12]
   32830:	ldr	r3, [sp, #16]
   32834:	mov	r2, r6
   32838:	str	r0, [r9, #84]	; 0x54
   3283c:	str	r8, [sp]
   32840:	ldr	r8, [fp, #12]
   32844:	mov	r0, r5
   32848:	str	r8, [sp, #4]
   3284c:	bl	32f84 <__assert_fail@plt+0x20394>
   32850:	mov	r2, r0
   32854:	cmp	r0, #0
   32858:	bne	32868 <__assert_fail@plt+0x1fc78>
   3285c:	ldr	r0, [r8]
   32860:	cmp	r0, #0
   32864:	bne	3289c <__assert_fail@plt+0x1fcac>
   32868:	ldr	r0, [r9, #84]	; 0x54
   3286c:	ldr	r8, [fp, #8]
   32870:	orr	r0, r0, r7
   32874:	mov	r7, #10
   32878:	str	r0, [r9, #84]	; 0x54
   3287c:	b	327e8 <__assert_fail@plt+0x1fbf8>
   32880:	ldr	r1, [fp, #12]
   32884:	mov	r0, #12
   32888:	str	r0, [r1]
   3288c:	mov	r4, #0
   32890:	mov	r0, r4
   32894:	sub	sp, fp, #28
   32898:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3289c:	cmp	r4, #0
   328a0:	beq	3288c <__assert_fail@plt+0x1fc9c>
   328a4:	mov	r5, r4
   328a8:	ldr	r4, [r4, #4]
   328ac:	cmp	r4, #0
   328b0:	bne	328a4 <__assert_fail@plt+0x1fcb4>
   328b4:	ldr	r4, [r5, #8]
   328b8:	cmp	r4, #0
   328bc:	bne	328a4 <__assert_fail@plt+0x1fcb4>
   328c0:	add	r0, r5, #20
   328c4:	bl	31cdc <__assert_fail@plt+0x1f0ec>
   328c8:	ldr	r0, [r5]
   328cc:	cmp	r0, #0
   328d0:	beq	3288c <__assert_fail@plt+0x1fc9c>
   328d4:	ldr	r4, [r0, #8]
   328d8:	cmp	r4, r5
   328dc:	mov	r5, r0
   328e0:	beq	328c0 <__assert_fail@plt+0x1fcd0>
   328e4:	cmp	r4, #0
   328e8:	mov	r5, r0
   328ec:	beq	328c0 <__assert_fail@plt+0x1fcd0>
   328f0:	b	328a4 <__assert_fail@plt+0x1fcb4>
   328f4:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   328f8:	add	fp, sp, #24
   328fc:	sub	sp, sp, #8
   32900:	mov	r9, r0
   32904:	mov	r7, r1
   32908:	ldr	r0, [r1, #40]	; 0x28
   3290c:	ldr	r1, [r1, #56]	; 0x38
   32910:	cmp	r1, r0
   32914:	ble	329fc <__assert_fail@plt+0x1fe0c>
   32918:	ldr	r1, [r7, #4]
   3291c:	mov	r5, r9
   32920:	mov	r8, r2
   32924:	ldrb	r6, [r1, r0]
   32928:	strb	r6, [r5], #4
   3292c:	ldr	r0, [r5]
   32930:	bic	r1, r0, #6291456	; 0x600000
   32934:	str	r1, [r5]
   32938:	ldr	r3, [r7, #80]	; 0x50
   3293c:	cmp	r3, #2
   32940:	blt	32964 <__assert_fail@plt+0x1fd74>
   32944:	ldr	r2, [r7, #28]
   32948:	ldr	r1, [r7, #40]	; 0x28
   3294c:	cmp	r1, r2
   32950:	beq	32964 <__assert_fail@plt+0x1fd74>
   32954:	ldr	r2, [r7, #8]
   32958:	ldr	r1, [r2, r1, lsl #2]
   3295c:	cmn	r1, #1
   32960:	beq	32cb8 <__assert_fail@plt+0x200c8>
   32964:	movw	r1, #65280	; 0xff00
   32968:	cmp	r6, #92	; 0x5c
   3296c:	movt	r1, #65439	; 0xff9f
   32970:	bne	32a0c <__assert_fail@plt+0x1fe1c>
   32974:	ldr	r6, [r7, #40]	; 0x28
   32978:	ldr	r4, [r7, #48]	; 0x30
   3297c:	add	r2, r6, #1
   32980:	cmp	r2, r4
   32984:	bge	32a60 <__assert_fail@plt+0x1fe70>
   32988:	ldrb	r4, [r7, #75]	; 0x4b
   3298c:	cmp	r4, #0
   32990:	bne	32f10 <__assert_fail@plt+0x20320>
   32994:	ldr	r3, [r7, #4]
   32998:	ldrb	r6, [r3, r2]
   3299c:	and	r0, r0, r1
   329a0:	strb	r6, [r9]
   329a4:	orr	r4, r0, #1
   329a8:	str	r4, [r9, #4]
   329ac:	ldr	r0, [r7, #80]	; 0x50
   329b0:	cmp	r0, #2
   329b4:	blt	32b70 <__assert_fail@plt+0x1ff80>
   329b8:	ldr	r0, [r7, #8]
   329bc:	ldr	r1, [r7, #40]	; 0x28
   329c0:	add	r0, r0, r1, lsl #2
   329c4:	ldr	r4, [r0, #4]
   329c8:	mov	r0, r4
   329cc:	bl	12914 <iswalnum@plt>
   329d0:	sub	r1, r4, #95	; 0x5f
   329d4:	cmp	r0, #0
   329d8:	clz	r1, r1
   329dc:	movwne	r0, #1
   329e0:	lsr	r1, r1, #5
   329e4:	orr	r0, r1, r0
   329e8:	ldr	r1, [r5]
   329ec:	bic	r1, r1, #4194304	; 0x400000
   329f0:	orr	r0, r1, r0, lsl #22
   329f4:	uxtb	r1, r6
   329f8:	b	32b94 <__assert_fail@plt+0x1ffa4>
   329fc:	mov	r0, #2
   32a00:	mov	r4, #0
   32a04:	strb	r0, [r9, #4]
   32a08:	b	32ee4 <__assert_fail@plt+0x202f4>
   32a0c:	and	r0, r0, r1
   32a10:	orr	r4, r0, #1
   32a14:	str	r4, [r5]
   32a18:	ldr	r0, [r7, #80]	; 0x50
   32a1c:	cmp	r0, #2
   32a20:	blt	32a6c <__assert_fail@plt+0x1fe7c>
   32a24:	ldr	r0, [r7, #8]
   32a28:	ldr	r1, [r7, #40]	; 0x28
   32a2c:	ldr	r4, [r0, r1, lsl #2]
   32a30:	mov	r0, r4
   32a34:	bl	12914 <iswalnum@plt>
   32a38:	sub	r1, r4, #95	; 0x5f
   32a3c:	cmp	r0, #0
   32a40:	clz	r1, r1
   32a44:	movwne	r0, #1
   32a48:	lsr	r1, r1, #5
   32a4c:	orr	r0, r1, r0
   32a50:	ldr	r1, [r5]
   32a54:	bic	r1, r1, #4194304	; 0x400000
   32a58:	orr	r0, r1, r0, lsl #22
   32a5c:	b	32a8c <__assert_fail@plt+0x1fe9c>
   32a60:	and	r0, r0, r1
   32a64:	orr	r0, r0, #36	; 0x24
   32a68:	b	32ccc <__assert_fail@plt+0x200dc>
   32a6c:	bl	1286c <__ctype_b_loc@plt>
   32a70:	ldr	r0, [r0]
   32a74:	cmp	r6, #95	; 0x5f
   32a78:	add	r0, r0, r6, lsl #1
   32a7c:	ldrh	r0, [r0]
   32a80:	ubfx	r0, r0, #3, #1
   32a84:	movweq	r0, #1
   32a88:	orr	r0, r4, r0, lsl #22
   32a8c:	mov	r4, #1
   32a90:	cmp	r6, #62	; 0x3e
   32a94:	str	r0, [r5]
   32a98:	bgt	32b34 <__assert_fail@plt+0x1ff44>
   32a9c:	sub	r1, r6, #36	; 0x24
   32aa0:	cmp	r1, #10
   32aa4:	bhi	32d28 <__assert_fail@plt+0x20138>
   32aa8:	add	r2, pc, #0
   32aac:	ldr	pc, [r2, r1, lsl #2]
   32ab0:	ldrdeq	r2, [r3], -ip
   32ab4:	andeq	r2, r3, r4, ror #29
   32ab8:	andeq	r2, r3, r4, ror #29
   32abc:	andeq	r2, r3, r4, ror #29
   32ac0:	andeq	r2, r3, ip, lsr sp
   32ac4:	andeq	r2, r3, ip, asr #26
   32ac8:	andeq	r2, r3, ip, asr sp
   32acc:	andeq	r2, r3, r4, ror #26
   32ad0:	andeq	r2, r3, r4, ror #29
   32ad4:	andeq	r2, r3, r4, ror #29
   32ad8:	andeq	r2, r3, r4, ror sp
   32adc:	tst	r8, #8
   32ae0:	bne	32b2c <__assert_fail@plt+0x1ff3c>
   32ae4:	ldr	r1, [r7, #40]	; 0x28
   32ae8:	ldr	r2, [r7, #48]	; 0x30
   32aec:	add	r1, r1, #1
   32af0:	cmp	r1, r2
   32af4:	beq	32b2c <__assert_fail@plt+0x1ff3c>
   32af8:	str	r1, [r7, #40]	; 0x28
   32afc:	mov	r0, sp
   32b00:	mov	r1, r7
   32b04:	mov	r2, r8
   32b08:	bl	328f4 <__assert_fail@plt+0x1fd04>
   32b0c:	ldr	r0, [r7, #40]	; 0x28
   32b10:	sub	r0, r0, #1
   32b14:	str	r0, [r7, #40]	; 0x28
   32b18:	ldrb	r0, [sp, #4]
   32b1c:	sub	r0, r0, #9
   32b20:	cmp	r0, #1
   32b24:	bhi	32ee4 <__assert_fail@plt+0x202f4>
   32b28:	ldr	r0, [r5]
   32b2c:	mov	r1, #32
   32b30:	b	32b68 <__assert_fail@plt+0x1ff78>
   32b34:	cmp	r6, #122	; 0x7a
   32b38:	bgt	32c90 <__assert_fail@plt+0x200a0>
   32b3c:	cmp	r6, #63	; 0x3f
   32b40:	beq	32d7c <__assert_fail@plt+0x2018c>
   32b44:	cmp	r6, #91	; 0x5b
   32b48:	beq	32d8c <__assert_fail@plt+0x2019c>
   32b4c:	cmp	r6, #94	; 0x5e
   32b50:	bne	32ee4 <__assert_fail@plt+0x202f4>
   32b54:	movw	r1, #8
   32b58:	movt	r1, #128	; 0x80
   32b5c:	tst	r8, r1
   32b60:	beq	32dd4 <__assert_fail@plt+0x201e4>
   32b64:	mov	r1, #16
   32b68:	mov	r2, #12
   32b6c:	b	32c80 <__assert_fail@plt+0x20090>
   32b70:	bl	1286c <__ctype_b_loc@plt>
   32b74:	ldr	r0, [r0]
   32b78:	uxtb	r1, r6
   32b7c:	cmp	r1, #95	; 0x5f
   32b80:	add	r0, r0, r1, lsl #1
   32b84:	ldrh	r0, [r0]
   32b88:	ubfx	r0, r0, #3, #1
   32b8c:	movweq	r0, #1
   32b90:	orr	r0, r4, r0, lsl #22
   32b94:	uxtb	r2, r6
   32b98:	mov	r4, #2
   32b9c:	str	r0, [r5]
   32ba0:	cmp	r2, #95	; 0x5f
   32ba4:	bgt	32cd8 <__assert_fail@plt+0x200e8>
   32ba8:	sub	r3, r2, #39	; 0x27
   32bac:	cmp	r3, #44	; 0x2c
   32bb0:	bhi	32e00 <__assert_fail@plt+0x20210>
   32bb4:	add	r2, pc, #0
   32bb8:	ldr	pc, [r2, r3, lsl #2]
   32bbc:	andeq	r2, r3, r8, ror #28
   32bc0:	andeq	r2, r3, r8, ror lr
   32bc4:	andeq	r2, r3, r4, lsl #29
   32bc8:	andeq	r2, r3, r4, ror #29
   32bcc:	muleq	r3, r0, lr
   32bd0:	andeq	r2, r3, r4, ror #29
   32bd4:	andeq	r2, r3, r4, ror #29
   32bd8:	andeq	r2, r3, r4, ror #29
   32bdc:	andeq	r2, r3, r4, ror #29
   32be0:	andeq	r2, r3, r4, ror #29
   32be4:	andeq	r2, r3, r0, ror ip
   32be8:	andeq	r2, r3, r0, ror ip
   32bec:	andeq	r2, r3, r0, ror ip
   32bf0:	andeq	r2, r3, r0, ror ip
   32bf4:	andeq	r2, r3, r0, ror ip
   32bf8:	andeq	r2, r3, r0, ror ip
   32bfc:	andeq	r2, r3, r0, ror ip
   32c00:	andeq	r2, r3, r0, ror ip
   32c04:	andeq	r2, r3, r0, ror ip
   32c08:	andeq	r2, r3, r4, ror #29
   32c0c:	andeq	r2, r3, r4, ror #29
   32c10:	andeq	r2, r3, r8, lsr #29
   32c14:	andeq	r2, r3, r4, ror #29
   32c18:			; <UNDEFINED> instruction: 0x00032eb8
   32c1c:	andeq	r2, r3, r8, asr #29
   32c20:	andeq	r2, r3, r4, ror #29
   32c24:	andeq	r2, r3, r4, ror #29
   32c28:	strdeq	r2, [r3], -r0
   32c2c:	andeq	r2, r3, r4, ror #29
   32c30:	andeq	r2, r3, r4, ror #29
   32c34:	andeq	r2, r3, r4, ror #29
   32c38:	andeq	r2, r3, r4, ror #29
   32c3c:	andeq	r2, r3, r4, ror #29
   32c40:	andeq	r2, r3, r4, ror #29
   32c44:	andeq	r2, r3, r4, ror #29
   32c48:	andeq	r2, r3, r4, ror #29
   32c4c:	andeq	r2, r3, r4, ror #29
   32c50:	andeq	r2, r3, r4, ror #29
   32c54:	andeq	r2, r3, r4, ror #29
   32c58:	andeq	r2, r3, r4, ror #29
   32c5c:	andeq	r2, r3, r4, ror #29
   32c60:	andeq	r2, r3, r4, ror #29
   32c64:	andeq	r2, r3, r4, ror #29
   32c68:	andeq	r2, r3, r4, ror #29
   32c6c:	andeq	r2, r3, r0, lsl #30
   32c70:	tst	r8, #16384	; 0x4000
   32c74:	bne	32ee4 <__assert_fail@plt+0x202f4>
   32c78:	sub	r1, r1, #49	; 0x31
   32c7c:	mov	r2, #4
   32c80:	bfi	r0, r2, #0, #8
   32c84:	str	r1, [r9]
   32c88:	str	r0, [r9, #4]
   32c8c:	b	32ee4 <__assert_fail@plt+0x202f4>
   32c90:	cmp	r6, #123	; 0x7b
   32c94:	beq	32d94 <__assert_fail@plt+0x201a4>
   32c98:	cmp	r6, #124	; 0x7c
   32c9c:	beq	32da4 <__assert_fail@plt+0x201b4>
   32ca0:	cmp	r6, #125	; 0x7d
   32ca4:	bne	32ee4 <__assert_fail@plt+0x202f4>
   32ca8:	and	r1, r8, #4608	; 0x1200
   32cac:	cmp	r1, #4608	; 0x1200
   32cb0:	beq	32e50 <__assert_fail@plt+0x20260>
   32cb4:	b	32ee4 <__assert_fail@plt+0x202f4>
   32cb8:	movw	r1, #65280	; 0xff00
   32cbc:	movt	r1, #65439	; 0xff9f
   32cc0:	and	r0, r0, r1
   32cc4:	orr	r0, r0, #1
   32cc8:	orr	r0, r0, #2097152	; 0x200000
   32ccc:	str	r0, [r5]
   32cd0:	mov	r4, #1
   32cd4:	b	32ee4 <__assert_fail@plt+0x202f4>
   32cd8:	sub	r1, r2, #115	; 0x73
   32cdc:	cmp	r1, #10
   32ce0:	bhi	32db8 <__assert_fail@plt+0x201c8>
   32ce4:	add	r2, pc, #0
   32ce8:	ldr	pc, [r2, r1, lsl #2]
   32cec:	andeq	r2, r3, r8, lsl sp
   32cf0:	andeq	r2, r3, r4, ror #29
   32cf4:	andeq	r2, r3, r4, ror #29
   32cf8:	andeq	r2, r3, r4, ror #29
   32cfc:	andeq	r2, r3, r4, lsl lr
   32d00:	andeq	r2, r3, r4, ror #29
   32d04:	andeq	r2, r3, r4, ror #29
   32d08:	andeq	r2, r3, r4, ror #29
   32d0c:	andeq	r2, r3, r4, lsr #28
   32d10:	andeq	r2, r3, r8, lsr lr
   32d14:	andeq	r2, r3, r4, asr #28
   32d18:	tst	r8, #524288	; 0x80000
   32d1c:	bne	32ee4 <__assert_fail@plt+0x202f4>
   32d20:	mov	r1, #34	; 0x22
   32d24:	b	32edc <__assert_fail@plt+0x202ec>
   32d28:	cmp	r6, #10
   32d2c:	bne	32ee4 <__assert_fail@plt+0x202f4>
   32d30:	tst	r8, #2048	; 0x800
   32d34:	bne	32db0 <__assert_fail@plt+0x201c0>
   32d38:	b	32ee4 <__assert_fail@plt+0x202f4>
   32d3c:	tst	r8, #8192	; 0x2000
   32d40:	beq	32ee4 <__assert_fail@plt+0x202f4>
   32d44:	mov	r1, #8
   32d48:	b	32edc <__assert_fail@plt+0x202ec>
   32d4c:	tst	r8, #8192	; 0x2000
   32d50:	beq	32ee4 <__assert_fail@plt+0x202f4>
   32d54:	mov	r1, #9
   32d58:	b	32edc <__assert_fail@plt+0x202ec>
   32d5c:	mov	r1, #11
   32d60:	b	32edc <__assert_fail@plt+0x202ec>
   32d64:	movw	r1, #1026	; 0x402
   32d68:	tst	r8, r1
   32d6c:	bne	32ee4 <__assert_fail@plt+0x202f4>
   32d70:	b	32ea0 <__assert_fail@plt+0x202b0>
   32d74:	mov	r1, #5
   32d78:	b	32edc <__assert_fail@plt+0x202ec>
   32d7c:	movw	r1, #1026	; 0x402
   32d80:	tst	r8, r1
   32d84:	bne	32ee4 <__assert_fail@plt+0x202f4>
   32d88:	b	32ed8 <__assert_fail@plt+0x202e8>
   32d8c:	mov	r1, #20
   32d90:	b	32edc <__assert_fail@plt+0x202ec>
   32d94:	and	r1, r8, #4608	; 0x1200
   32d98:	cmp	r1, #4608	; 0x1200
   32d9c:	beq	32e30 <__assert_fail@plt+0x20240>
   32da0:	b	32ee4 <__assert_fail@plt+0x202f4>
   32da4:	and	r1, r8, #33792	; 0x8400
   32da8:	cmp	r1, #32768	; 0x8000
   32dac:	bne	32ee4 <__assert_fail@plt+0x202f4>
   32db0:	mov	r1, #10
   32db4:	b	32edc <__assert_fail@plt+0x202ec>
   32db8:	cmp	r2, #96	; 0x60
   32dbc:	beq	32e58 <__assert_fail@plt+0x20268>
   32dc0:	cmp	r2, #98	; 0x62
   32dc4:	tsteq	r8, #524288	; 0x80000
   32dc8:	bne	32ee4 <__assert_fail@plt+0x202f4>
   32dcc:	mov	r1, #256	; 0x100
   32dd0:	b	32b68 <__assert_fail@plt+0x1ff78>
   32dd4:	ldr	r1, [r7, #40]	; 0x28
   32dd8:	cmp	r1, #0
   32ddc:	beq	32b64 <__assert_fail@plt+0x1ff74>
   32de0:	tst	r8, #2048	; 0x800
   32de4:	beq	32ee4 <__assert_fail@plt+0x202f4>
   32de8:	ldr	r2, [r7, #4]
   32dec:	add	r1, r1, r2
   32df0:	ldrb	r1, [r1, #-1]
   32df4:	cmp	r1, #10
   32df8:	beq	32b64 <__assert_fail@plt+0x1ff74>
   32dfc:	b	32ee4 <__assert_fail@plt+0x202f4>
   32e00:	cmp	r2, #87	; 0x57
   32e04:	tsteq	r8, #524288	; 0x80000
   32e08:	bne	32ee4 <__assert_fail@plt+0x202f4>
   32e0c:	mov	r1, #33	; 0x21
   32e10:	b	32edc <__assert_fail@plt+0x202ec>
   32e14:	tst	r8, #524288	; 0x80000
   32e18:	bne	32ee4 <__assert_fail@plt+0x202f4>
   32e1c:	mov	r1, #32
   32e20:	b	32edc <__assert_fail@plt+0x202ec>
   32e24:	and	r1, r8, #4608	; 0x1200
   32e28:	cmp	r1, #512	; 0x200
   32e2c:	bne	32ee4 <__assert_fail@plt+0x202f4>
   32e30:	mov	r1, #23
   32e34:	b	32edc <__assert_fail@plt+0x202ec>
   32e38:	tst	r8, #33792	; 0x8400
   32e3c:	bne	32ee4 <__assert_fail@plt+0x202f4>
   32e40:	b	32db0 <__assert_fail@plt+0x201c0>
   32e44:	and	r1, r8, #4608	; 0x1200
   32e48:	cmp	r1, #512	; 0x200
   32e4c:	bne	32ee4 <__assert_fail@plt+0x202f4>
   32e50:	mov	r1, #24
   32e54:	b	32edc <__assert_fail@plt+0x202ec>
   32e58:	tst	r8, #524288	; 0x80000
   32e5c:	bne	32ee4 <__assert_fail@plt+0x202f4>
   32e60:	mov	r1, #64	; 0x40
   32e64:	b	32b68 <__assert_fail@plt+0x1ff78>
   32e68:	tst	r8, #524288	; 0x80000
   32e6c:	bne	32ee4 <__assert_fail@plt+0x202f4>
   32e70:	mov	r1, #128	; 0x80
   32e74:	b	32b68 <__assert_fail@plt+0x1ff78>
   32e78:	tst	r8, #8192	; 0x2000
   32e7c:	beq	32d44 <__assert_fail@plt+0x20154>
   32e80:	b	32ee4 <__assert_fail@plt+0x202f4>
   32e84:	tst	r8, #8192	; 0x2000
   32e88:	beq	32d54 <__assert_fail@plt+0x20164>
   32e8c:	b	32ee4 <__assert_fail@plt+0x202f4>
   32e90:	movw	r1, #1026	; 0x402
   32e94:	and	r1, r8, r1
   32e98:	cmp	r1, #2
   32e9c:	bne	32ee4 <__assert_fail@plt+0x202f4>
   32ea0:	mov	r1, #18
   32ea4:	b	32edc <__assert_fail@plt+0x202ec>
   32ea8:	tst	r8, #524288	; 0x80000
   32eac:	bne	32ee4 <__assert_fail@plt+0x202f4>
   32eb0:	mov	r1, #6
   32eb4:	b	32b68 <__assert_fail@plt+0x1ff78>
   32eb8:	tst	r8, #524288	; 0x80000
   32ebc:	bne	32ee4 <__assert_fail@plt+0x202f4>
   32ec0:	mov	r1, #9
   32ec4:	b	32b68 <__assert_fail@plt+0x1ff78>
   32ec8:	movw	r1, #1026	; 0x402
   32ecc:	and	r1, r8, r1
   32ed0:	cmp	r1, #2
   32ed4:	bne	32ee4 <__assert_fail@plt+0x202f4>
   32ed8:	mov	r1, #19
   32edc:	bfi	r0, r1, #0, #8
   32ee0:	str	r0, [r5]
   32ee4:	mov	r0, r4
   32ee8:	sub	sp, fp, #24
   32eec:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   32ef0:	tst	r8, #524288	; 0x80000
   32ef4:	bne	32ee4 <__assert_fail@plt+0x202f4>
   32ef8:	mov	r1, #512	; 0x200
   32efc:	b	32b68 <__assert_fail@plt+0x1ff78>
   32f00:	tst	r8, #524288	; 0x80000
   32f04:	bne	32ee4 <__assert_fail@plt+0x202f4>
   32f08:	mov	r1, #35	; 0x23
   32f0c:	b	32edc <__assert_fail@plt+0x202ec>
   32f10:	cmp	r3, #2
   32f14:	blt	32f44 <__assert_fail@plt+0x20354>
   32f18:	ldr	r3, [r7, #8]
   32f1c:	ldr	r4, [r3, r2, lsl #2]
   32f20:	cmn	r4, #1
   32f24:	beq	32994 <__assert_fail@plt+0x1fda4>
   32f28:	ldr	r4, [r7, #28]
   32f2c:	add	r6, r6, #2
   32f30:	cmp	r4, r6
   32f34:	beq	32f44 <__assert_fail@plt+0x20354>
   32f38:	ldr	r3, [r3, r6, lsl #2]
   32f3c:	cmn	r3, #1
   32f40:	beq	32994 <__assert_fail@plt+0x1fda4>
   32f44:	ldrb	r3, [r7, #76]	; 0x4c
   32f48:	mov	r6, r2
   32f4c:	cmp	r3, #0
   32f50:	beq	32f5c <__assert_fail@plt+0x2036c>
   32f54:	ldr	r6, [r7, #12]
   32f58:	ldr	r6, [r6, r2, lsl #2]
   32f5c:	ldr	r4, [r7, #24]
   32f60:	ldr	ip, [r7]
   32f64:	cmp	r3, #0
   32f68:	add	r6, r4, r6
   32f6c:	add	r6, ip, r6
   32f70:	ldrsb	r6, [r6]
   32f74:	beq	3299c <__assert_fail@plt+0x1fdac>
   32f78:	cmn	r6, #1
   32f7c:	ble	32994 <__assert_fail@plt+0x1fda4>
   32f80:	b	3299c <__assert_fail@plt+0x1fdac>
   32f84:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   32f88:	add	fp, sp, #28
   32f8c:	sub	sp, sp, #28
   32f90:	mov	r7, r1
   32f94:	mov	r1, r0
   32f98:	ldr	r4, [fp, #12]
   32f9c:	ldr	r5, [fp, #8]
   32fa0:	mov	r6, r2
   32fa4:	str	r3, [sp, #16]
   32fa8:	ldr	r0, [r7]
   32fac:	str	r1, [sp, #12]
   32fb0:	str	r4, [sp, #4]
   32fb4:	str	r5, [sp]
   32fb8:	str	r0, [sp, #8]
   32fbc:	mov	r0, r1
   32fc0:	mov	r1, r7
   32fc4:	bl	33210 <__assert_fail@plt+0x20620>
   32fc8:	cmp	r0, #0
   32fcc:	bne	32fdc <__assert_fail@plt+0x203ec>
   32fd0:	ldr	r1, [r4]
   32fd4:	cmp	r1, #0
   32fd8:	bne	33138 <__assert_fail@plt+0x20548>
   32fdc:	mov	r4, r0
   32fe0:	ldrb	r0, [r6, #4]
   32fe4:	orr	r1, r0, #8
   32fe8:	cmp	r1, #10
   32fec:	beq	3313c <__assert_fail@plt+0x2054c>
   32ff0:	cmp	r5, #0
   32ff4:	beq	33000 <__assert_fail@plt+0x20410>
   32ff8:	cmp	r0, #9
   32ffc:	beq	3313c <__assert_fail@plt+0x2054c>
   33000:	ldr	r8, [fp, #12]
   33004:	ldr	r0, [sp, #12]
   33008:	ldr	r3, [sp, #16]
   3300c:	mov	r1, r7
   33010:	mov	r2, r6
   33014:	mov	r9, r5
   33018:	str	r5, [sp]
   3301c:	str	r8, [sp, #4]
   33020:	bl	33210 <__assert_fail@plt+0x20620>
   33024:	mov	sl, r0
   33028:	cmp	r0, #0
   3302c:	bne	3303c <__assert_fail@plt+0x2044c>
   33030:	ldr	r0, [r8]
   33034:	cmp	r0, #0
   33038:	bne	33148 <__assert_fail@plt+0x20558>
   3303c:	cmp	r4, #0
   33040:	cmpne	sl, #0
   33044:	bne	3305c <__assert_fail@plt+0x2046c>
   33048:	cmp	r4, #0
   3304c:	mov	r5, r9
   33050:	movne	sl, r4
   33054:	mov	r0, sl
   33058:	b	32fdc <__assert_fail@plt+0x203ec>
   3305c:	mov	r0, #16
   33060:	mov	r1, r4
   33064:	mov	r2, sl
   33068:	add	r3, sp, #20
   3306c:	str	r0, [sp, #24]
   33070:	mov	r0, #0
   33074:	str	r0, [sp, #20]
   33078:	ldr	r0, [sp, #8]
   3307c:	bl	34714 <__assert_fail@plt+0x21b24>
   33080:	cmp	r0, #0
   33084:	mov	r5, r9
   33088:	bne	32fdc <__assert_fail@plt+0x203ec>
   3308c:	mov	r5, sl
   33090:	ldr	sl, [sl, #4]
   33094:	cmp	sl, #0
   33098:	bne	3308c <__assert_fail@plt+0x2049c>
   3309c:	ldr	sl, [r5, #8]
   330a0:	cmp	sl, #0
   330a4:	bne	3308c <__assert_fail@plt+0x2049c>
   330a8:	add	r0, r5, #20
   330ac:	bl	31cdc <__assert_fail@plt+0x1f0ec>
   330b0:	ldr	r0, [r5]
   330b4:	cmp	r0, #0
   330b8:	beq	330dc <__assert_fail@plt+0x204ec>
   330bc:	ldr	sl, [r0, #8]
   330c0:	cmp	sl, r5
   330c4:	mov	r5, r0
   330c8:	beq	330a8 <__assert_fail@plt+0x204b8>
   330cc:	cmp	sl, #0
   330d0:	mov	r5, r0
   330d4:	beq	330a8 <__assert_fail@plt+0x204b8>
   330d8:	b	3308c <__assert_fail@plt+0x2049c>
   330dc:	mov	r5, r4
   330e0:	ldr	r4, [r4, #4]
   330e4:	cmp	r4, #0
   330e8:	bne	330dc <__assert_fail@plt+0x204ec>
   330ec:	ldr	r4, [r5, #8]
   330f0:	cmp	r4, #0
   330f4:	bne	330dc <__assert_fail@plt+0x204ec>
   330f8:	add	r0, r5, #20
   330fc:	bl	31cdc <__assert_fail@plt+0x1f0ec>
   33100:	ldr	r0, [r5]
   33104:	cmp	r0, #0
   33108:	beq	3312c <__assert_fail@plt+0x2053c>
   3310c:	ldr	r4, [r0, #8]
   33110:	cmp	r4, r5
   33114:	mov	r5, r0
   33118:	beq	330f8 <__assert_fail@plt+0x20508>
   3311c:	cmp	r4, #0
   33120:	mov	r5, r0
   33124:	beq	330f8 <__assert_fail@plt+0x20508>
   33128:	b	330dc <__assert_fail@plt+0x204ec>
   3312c:	ldr	r1, [fp, #12]
   33130:	mov	r0, #12
   33134:	str	r0, [r1]
   33138:	mov	r4, #0
   3313c:	mov	r0, r4
   33140:	sub	sp, fp, #28
   33144:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   33148:	cmp	r4, #0
   3314c:	beq	33138 <__assert_fail@plt+0x20548>
   33150:	mov	r5, r4
   33154:	ldr	r4, [r4, #4]
   33158:	cmp	r4, #0
   3315c:	bne	33150 <__assert_fail@plt+0x20560>
   33160:	ldr	r4, [r5, #8]
   33164:	cmp	r4, #0
   33168:	bne	33150 <__assert_fail@plt+0x20560>
   3316c:	add	r0, r5, #20
   33170:	bl	31cdc <__assert_fail@plt+0x1f0ec>
   33174:	ldr	r0, [r5]
   33178:	cmp	r0, #0
   3317c:	beq	33138 <__assert_fail@plt+0x20548>
   33180:	ldr	r4, [r0, #8]
   33184:	cmp	r4, r5
   33188:	mov	r5, r0
   3318c:	beq	3316c <__assert_fail@plt+0x2057c>
   33190:	cmp	r4, #0
   33194:	mov	r5, r0
   33198:	beq	3316c <__assert_fail@plt+0x2057c>
   3319c:	b	33150 <__assert_fail@plt+0x20560>
   331a0:	push	{r4, r5, r6, sl, fp, lr}
   331a4:	add	fp, sp, #16
   331a8:	mov	r4, r2
   331ac:	mov	r5, r1
   331b0:	mov	r6, r0
   331b4:	ldr	r0, [r0, #4]
   331b8:	cmp	r0, #0
   331bc:	bne	331b0 <__assert_fail@plt+0x205c0>
   331c0:	ldr	r0, [r6, #8]
   331c4:	cmp	r0, #0
   331c8:	bne	331b0 <__assert_fail@plt+0x205c0>
   331cc:	mov	r0, r4
   331d0:	mov	r1, r6
   331d4:	blx	r5
   331d8:	cmp	r0, #0
   331dc:	bne	3320c <__assert_fail@plt+0x2061c>
   331e0:	ldr	r1, [r6]
   331e4:	cmp	r1, #0
   331e8:	beq	3320c <__assert_fail@plt+0x2061c>
   331ec:	ldr	r0, [r1, #8]
   331f0:	cmp	r0, r6
   331f4:	mov	r6, r1
   331f8:	beq	331cc <__assert_fail@plt+0x205dc>
   331fc:	cmp	r0, #0
   33200:	mov	r6, r1
   33204:	beq	331cc <__assert_fail@plt+0x205dc>
   33208:	b	331b0 <__assert_fail@plt+0x205c0>
   3320c:	pop	{r4, r5, r6, sl, fp, pc}
   33210:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   33214:	add	fp, sp, #28
   33218:	sub	sp, sp, #140	; 0x8c
   3321c:	mov	r5, r1
   33220:	mov	sl, r0
   33224:	mov	r4, r2
   33228:	ldr	r0, [r2, #4]
   3322c:	mvn	r1, #0
   33230:	mov	r8, #0
   33234:	ldr	r2, [r5]
   33238:	uxtab	r1, r1, r0
   3323c:	str	r2, [sp, #44]	; 0x2c
   33240:	ldr	r6, [fp, #12]
   33244:	ldr	r7, [fp, #8]
   33248:	add	r2, pc, #12
   3324c:	str	sl, [sp, #40]	; 0x28
   33250:	str	r3, [sp, #36]	; 0x24
   33254:	str	r4, [sp, #20]
   33258:	ldr	pc, [r2, r1, lsl #2]
   3325c:			; <UNDEFINED> instruction: 0x000334b4
   33260:	andeq	r4, r3, r4, ror #7
   33264:	andeq	r4, r3, r4, lsl r7
   33268:	muleq	r3, ip, r5
   3326c:	strdeq	r3, [r3], -r8
   33270:	andeq	r4, r3, r4, lsl r7
   33274:	andeq	r4, r3, r4, lsl r7
   33278:	andeq	r3, r3, r4, asr #12
   3327c:	strdeq	r3, [r3], -ip
   33280:	andeq	r4, r3, r4, ror #7
   33284:	andeq	r3, r3, ip, ror #5
   33288:			; <UNDEFINED> instruction: 0x000333bc
   3328c:	andeq	r4, r3, r4, lsl r7
   33290:	andeq	r4, r3, r4, lsl r7
   33294:	andeq	r4, r3, r4, lsl r7
   33298:	andeq	r4, r3, r4, lsl r7
   3329c:	andeq	r4, r3, r4, lsl r7
   332a0:	andeq	r3, r3, ip, ror #5
   332a4:	andeq	r3, r3, ip, ror #5
   332a8:	andeq	r3, r3, ip, lsr r4
   332ac:	andeq	r4, r3, r4, lsl r7
   332b0:	andeq	r4, r3, r4, lsl r7
   332b4:	andeq	r3, r3, r4, lsl r7
   332b8:	andeq	r3, r3, ip, lsl #6
   332bc:	andeq	r4, r3, r4, lsl r7
   332c0:	andeq	r4, r3, r4, lsl r7
   332c4:	andeq	r4, r3, r4, lsl r7
   332c8:	andeq	r4, r3, r4, lsl r7
   332cc:	andeq	r4, r3, r4, lsl r7
   332d0:	andeq	r4, r3, r4, lsl r7
   332d4:	andeq	r4, r3, r4, lsl r7
   332d8:	andeq	r3, r3, r8, asr #6
   332dc:	andeq	r3, r3, r8, asr #6
   332e0:	andeq	r3, r3, r8, ror #6
   332e4:	andeq	r3, r3, r8, ror #6
   332e8:	andeq	r3, r3, r4, lsr #14
   332ec:	tst	r3, #32
   332f0:	bne	3371c <__assert_fail@plt+0x20b2c>
   332f4:	tst	r3, #16
   332f8:	bne	3372c <__assert_fail@plt+0x20b3c>
   332fc:	tst	r3, #131072	; 0x20000
   33300:	uxtbeq	r1, r0
   33304:	cmpeq	r1, #9
   33308:	beq	33768 <__assert_fail@plt+0x20b78>
   3330c:	mov	r1, #1
   33310:	mov	r2, #0
   33314:	mov	r3, r4
   33318:	mov	r8, #0
   3331c:	bfi	r0, r1, #0, #8
   33320:	mov	r1, #0
   33324:	str	r0, [r4, #4]
   33328:	ldr	r0, [sp, #44]	; 0x2c
   3332c:	bl	34714 <__assert_fail@plt+0x21b24>
   33330:	ldr	r5, [sp, #20]
   33334:	ldr	r2, [sp, #36]	; 0x24
   33338:	mov	r9, r0
   3333c:	cmp	r0, #0
   33340:	bne	33e3c <__assert_fail@plt+0x2124c>
   33344:	b	34558 <__assert_fail@plt+0x21968>
   33348:	mvn	r2, #32
   3334c:	ldr	r1, [sl, #64]	; 0x40
   33350:	movw	r3, #13364	; 0x3434
   33354:	uxtab	r0, r2, r0
   33358:	movw	r2, #13358	; 0x342e
   3335c:	movt	r3, #4
   33360:	movt	r2, #4
   33364:	b	33384 <__assert_fail@plt+0x20794>
   33368:	mvn	r2, #34	; 0x22
   3336c:	ldr	r1, [sl, #64]	; 0x40
   33370:	movw	r3, #61759	; 0xf13f
   33374:	uxtab	r0, r2, r0
   33378:	movw	r2, #13366	; 0x3436
   3337c:	movt	r3, #3
   33380:	movt	r2, #4
   33384:	clz	r0, r0
   33388:	lsr	r0, r0, #5
   3338c:	stm	sp, {r0, r6}
   33390:	ldr	r0, [sp, #44]	; 0x2c
   33394:	bl	347bc <__assert_fail@plt+0x21bcc>
   33398:	mov	r9, r0
   3339c:	cmp	r0, #0
   333a0:	bne	33638 <__assert_fail@plt+0x20a48>
   333a4:	ldr	r0, [r6]
   333a8:	ldr	r2, [sp, #36]	; 0x24
   333ac:	ldr	r5, [sp, #20]
   333b0:	cmp	r0, #0
   333b4:	beq	33e3c <__assert_fail@plt+0x2124c>
   333b8:	b	343e4 <__assert_fail@plt+0x217f4>
   333bc:	ldr	r0, [r4]
   333c0:	movw	r1, #783	; 0x30f
   333c4:	tst	r0, r1
   333c8:	beq	33418 <__assert_fail@plt+0x20828>
   333cc:	ldr	r0, [sp, #44]	; 0x2c
   333d0:	ldrb	r0, [r0, #88]	; 0x58
   333d4:	tst	r0, #16
   333d8:	bne	33414 <__assert_fail@plt+0x20824>
   333dc:	ldr	r2, [sp, #44]	; 0x2c
   333e0:	orr	r1, r0, #16
   333e4:	tst	r0, #8
   333e8:	strb	r1, [r2, #88]	; 0x58
   333ec:	bne	345b8 <__assert_fail@plt+0x219c8>
   333f0:	add	r1, pc, #896	; 0x380
   333f4:	tst	r0, #4
   333f8:	vld1.64	{d16-d17}, [r1]
   333fc:	add	r1, r2, #96	; 0x60
   33400:	vst1.32	{d16-d17}, [r1]
   33404:	beq	345c8 <__assert_fail@plt+0x219d8>
   33408:	vmov.i32	q8, #0	; 0x00000000
   3340c:	add	r0, r2, #112	; 0x70
   33410:	vst1.32	{d16-d17}, [r0]
   33414:	ldr	r0, [r4]
   33418:	mov	r9, r6
   3341c:	ldr	r6, [sp, #44]	; 0x2c
   33420:	cmp	r0, #256	; 0x100
   33424:	beq	343f0 <__assert_fail@plt+0x21800>
   33428:	cmp	r0, #512	; 0x200
   3342c:	bne	3446c <__assert_fail@plt+0x2187c>
   33430:	mov	r5, #10
   33434:	mov	r0, #5
   33438:	b	343f8 <__assert_fail@plt+0x21808>
   3343c:	mov	r0, #0
   33440:	mov	r1, #1
   33444:	str	r6, [sp, #16]
   33448:	mov	r9, #0
   3344c:	str	r0, [fp, #-32]	; 0xffffffe0
   33450:	mov	r0, #32
   33454:	bl	2b734 <__assert_fail@plt+0x18b44>
   33458:	mov	r4, r0
   3345c:	mov	r0, #40	; 0x28
   33460:	mov	r1, #1
   33464:	bl	2b734 <__assert_fail@plt+0x18b44>
   33468:	mov	r8, r0
   3346c:	cmp	r4, #0
   33470:	cmpne	r8, #0
   33474:	beq	34578 <__assert_fail@plt+0x21988>
   33478:	ldr	r6, [sp, #20]
   3347c:	ldr	r5, [sp, #36]	; 0x24
   33480:	mov	r1, sl
   33484:	mov	r0, r6
   33488:	mov	r2, r5
   3348c:	bl	349e8 <__assert_fail@plt+0x21df8>
   33490:	mov	r3, r0
   33494:	ldr	r0, [r6, #4]
   33498:	uxtb	r1, r0
   3349c:	cmp	r1, #25
   334a0:	beq	33788 <__assert_fail@plt+0x20b98>
   334a4:	cmp	r1, #2
   334a8:	beq	34570 <__assert_fail@plt+0x21980>
   334ac:	mov	r9, #0
   334b0:	b	337e0 <__assert_fail@plt+0x20bf0>
   334b4:	ldr	r5, [sp, #44]	; 0x2c
   334b8:	mov	r1, #0
   334bc:	mov	r2, #0
   334c0:	mov	r3, r4
   334c4:	mov	r8, #0
   334c8:	mov	r0, r5
   334cc:	bl	34714 <__assert_fail@plt+0x21b24>
   334d0:	cmp	r0, #0
   334d4:	beq	34558 <__assert_fail@plt+0x21968>
   334d8:	mov	r9, r0
   334dc:	ldr	r0, [r5, #92]	; 0x5c
   334e0:	cmp	r0, #2
   334e4:	blt	33638 <__assert_fail@plt+0x20a48>
   334e8:	mov	r7, #16
   334ec:	sub	r4, fp, #80	; 0x50
   334f0:	ldr	r0, [sl, #40]	; 0x28
   334f4:	ldr	r1, [sl, #56]	; 0x38
   334f8:	cmp	r1, r0
   334fc:	ble	33638 <__assert_fail@plt+0x20a48>
   33500:	ldr	r1, [sl, #28]
   33504:	ldr	r2, [sp, #36]	; 0x24
   33508:	ldr	r5, [sp, #20]
   3350c:	cmp	r0, r1
   33510:	beq	33e3c <__assert_fail@plt+0x2124c>
   33514:	ldr	r1, [sl, #8]
   33518:	ldr	r0, [r1, r0, lsl #2]
   3351c:	cmn	r0, #1
   33520:	bne	33e3c <__assert_fail@plt+0x2124c>
   33524:	mov	r0, r5
   33528:	mov	r1, sl
   3352c:	bl	328f4 <__assert_fail@plt+0x1fd04>
   33530:	ldr	r1, [sl, #40]	; 0x28
   33534:	mov	r8, r6
   33538:	ldr	r6, [sp, #44]	; 0x2c
   3353c:	mov	r2, #0
   33540:	mov	r3, r5
   33544:	add	r0, r1, r0
   33548:	mov	r1, #0
   3354c:	str	r0, [sl, #40]	; 0x28
   33550:	mov	r0, r6
   33554:	bl	34714 <__assert_fail@plt+0x21b24>
   33558:	mov	r5, r0
   3355c:	mov	r0, #0
   33560:	str	r7, [fp, #-76]	; 0xffffffb4
   33564:	mov	r1, r9
   33568:	mov	r3, r4
   3356c:	str	r0, [fp, #-80]	; 0xffffffb0
   33570:	mov	r0, r6
   33574:	mov	r2, r5
   33578:	mov	r6, r8
   3357c:	bl	34714 <__assert_fail@plt+0x21b24>
   33580:	cmp	r5, #0
   33584:	movne	r9, r0
   33588:	cmpne	r0, #0
   3358c:	bne	334f0 <__assert_fail@plt+0x20900>
   33590:	mov	r0, #12
   33594:	str	r0, [r6]
   33598:	b	343e0 <__assert_fail@plt+0x217f0>
   3359c:	ldr	r5, [sp, #44]	; 0x2c
   335a0:	ldr	r0, [r4]
   335a4:	mov	r1, #1
   335a8:	ldr	r2, [r5, #84]	; 0x54
   335ac:	tst	r2, r1, lsl r0
   335b0:	beq	34598 <__assert_fail@plt+0x219a8>
   335b4:	lsl	r0, r1, r0
   335b8:	ldr	r1, [r5, #80]	; 0x50
   335bc:	mov	r2, #0
   335c0:	mov	r3, r4
   335c4:	mov	r8, #0
   335c8:	orr	r0, r1, r0
   335cc:	mov	r1, #0
   335d0:	str	r0, [r5, #80]	; 0x50
   335d4:	mov	r0, r5
   335d8:	bl	34714 <__assert_fail@plt+0x21b24>
   335dc:	cmp	r0, #0
   335e0:	beq	34558 <__assert_fail@plt+0x21968>
   335e4:	mov	r9, r0
   335e8:	ldr	r0, [r5, #76]	; 0x4c
   335ec:	add	r0, r0, #1
   335f0:	str	r0, [r5, #76]	; 0x4c
   335f4:	b	3362c <__assert_fail@plt+0x20a3c>
   335f8:	ldr	r5, [sp, #44]	; 0x2c
   335fc:	mov	r1, #0
   33600:	mov	r2, #0
   33604:	mov	r3, r4
   33608:	mov	r8, #0
   3360c:	mov	r0, r5
   33610:	bl	34714 <__assert_fail@plt+0x21b24>
   33614:	cmp	r0, #0
   33618:	beq	34558 <__assert_fail@plt+0x21968>
   3361c:	mov	r9, r0
   33620:	ldr	r0, [r5, #92]	; 0x5c
   33624:	cmp	r0, #2
   33628:	blt	33638 <__assert_fail@plt+0x20a48>
   3362c:	ldrb	r0, [r5, #88]	; 0x58
   33630:	orr	r0, r0, #2
   33634:	strb	r0, [r5, #88]	; 0x58
   33638:	ldr	r2, [sp, #36]	; 0x24
   3363c:	ldr	r5, [sp, #20]
   33640:	b	33e3c <__assert_fail@plt+0x2124c>
   33644:	str	r6, [sp, #16]
   33648:	ldr	r6, [r5, #24]
   3364c:	orr	r2, r3, #8388608	; 0x800000
   33650:	mov	r1, sl
   33654:	add	r0, r6, #1
   33658:	str	r0, [r5, #24]
   3365c:	mov	r0, r4
   33660:	bl	328f4 <__assert_fail@plt+0x1fd04>
   33664:	ldr	r1, [sl, #40]	; 0x28
   33668:	ldr	r2, [sp, #20]
   3366c:	add	r0, r1, r0
   33670:	mov	r1, #0
   33674:	str	r0, [sl, #40]	; 0x28
   33678:	ldrb	r0, [r2, #4]
   3367c:	cmp	r0, #9
   33680:	beq	336c8 <__assert_fail@plt+0x20ad8>
   33684:	add	r0, r7, #1
   33688:	mov	r1, r5
   3368c:	mov	r4, r2
   33690:	str	r0, [sp]
   33694:	mov	r0, sl
   33698:	ldr	r7, [sp, #16]
   3369c:	str	r7, [sp, #4]
   336a0:	ldr	r3, [sp, #36]	; 0x24
   336a4:	bl	32744 <__assert_fail@plt+0x1fb54>
   336a8:	mov	r1, r0
   336ac:	ldr	r0, [r7]
   336b0:	mov	r8, #0
   336b4:	cmp	r0, #0
   336b8:	bne	343e4 <__assert_fail@plt+0x217f4>
   336bc:	ldrb	r0, [r4, #4]
   336c0:	cmp	r0, #9
   336c4:	bne	34658 <__assert_fail@plt+0x21a68>
   336c8:	ldr	r0, [sp, #44]	; 0x2c
   336cc:	cmp	r6, #8
   336d0:	bhi	336e4 <__assert_fail@plt+0x20af4>
   336d4:	ldr	r3, [r0, #84]	; 0x54
   336d8:	mov	r2, #1
   336dc:	orr	r2, r3, r2, lsl r6
   336e0:	str	r2, [r0, #84]	; 0x54
   336e4:	mov	r2, #17
   336e8:	mov	r8, #0
   336ec:	sub	r3, fp, #80	; 0x50
   336f0:	str	r2, [fp, #-76]	; 0xffffffb4
   336f4:	mov	r2, #0
   336f8:	str	r8, [fp, #-80]	; 0xffffffb0
   336fc:	bl	34714 <__assert_fail@plt+0x21b24>
   33700:	cmp	r0, #0
   33704:	beq	345a8 <__assert_fail@plt+0x219b8>
   33708:	mov	r9, r0
   3370c:	str	r6, [r0, #20]
   33710:	b	33e30 <__assert_fail@plt+0x21240>
   33714:	tst	r3, #16777216	; 0x1000000
   33718:	beq	332ec <__assert_fail@plt+0x206fc>
   3371c:	mov	r0, #13
   33720:	b	3376c <__assert_fail@plt+0x20b7c>
   33724:	mov	r0, #5
   33728:	b	3376c <__assert_fail@plt+0x20b7c>
   3372c:	mov	r0, r4
   33730:	mov	r1, sl
   33734:	mov	r2, r3
   33738:	mov	r6, r3
   3373c:	bl	328f4 <__assert_fail@plt+0x1fd04>
   33740:	ldr	r1, [sl, #40]	; 0x28
   33744:	mov	r2, r4
   33748:	mov	r3, r6
   3374c:	add	r0, r1, r0
   33750:	mov	r1, r5
   33754:	str	r0, [sl, #40]	; 0x28
   33758:	mov	r0, sl
   3375c:	sub	sp, fp, #28
   33760:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   33764:	b	33210 <__assert_fail@plt+0x20620>
   33768:	mov	r0, #16
   3376c:	str	r0, [r6]
   33770:	b	343e4 <__assert_fail@plt+0x217f4>
   33774:	nop	{0}
   33778:	andeq	r0, r0, r0
   3377c:	mvnseq	r0, #0
   33780:			; <UNDEFINED> instruction: 0x87fffffe
   33784:			; <UNDEFINED> instruction: 0x07fffffe
   33788:	ldrb	r0, [r8, #16]
   3378c:	tst	r5, #256	; 0x100
   33790:	orr	r0, r0, #1
   33794:	strb	r0, [r8, #16]
   33798:	beq	337a8 <__assert_fail@plt+0x20bb8>
   3379c:	ldr	r0, [r4]
   337a0:	orr	r0, r0, #1024	; 0x400
   337a4:	str	r0, [r4]
   337a8:	ldr	r0, [sl, #40]	; 0x28
   337ac:	ldr	r2, [sp, #36]	; 0x24
   337b0:	mov	r1, sl
   337b4:	add	r0, r0, r3
   337b8:	str	r0, [sl, #40]	; 0x28
   337bc:	mov	r0, r6
   337c0:	bl	349e8 <__assert_fail@plt+0x21df8>
   337c4:	ldr	r6, [sp, #20]
   337c8:	mov	r3, r0
   337cc:	ldr	r0, [r6, #4]
   337d0:	uxtb	r1, r0
   337d4:	cmp	r1, #2
   337d8:	beq	34570 <__assert_fail@plt+0x21980>
   337dc:	mov	r9, #1
   337e0:	uxtb	r1, r0
   337e4:	str	r8, [sp, #32]
   337e8:	mov	r2, r6
   337ec:	ldr	r5, [sp, #36]	; 0x24
   337f0:	cmp	r1, #21
   337f4:	moveq	r1, #1
   337f8:	bfieq	r0, r1, #0, #8
   337fc:	mov	r1, sl
   33800:	streq	r0, [r6, #4]
   33804:	sub	r0, fp, #80	; 0x50
   33808:	str	r0, [fp, #-36]	; 0xffffffdc
   3380c:	mov	r0, #3
   33810:	str	r0, [fp, #-40]	; 0xffffffd8
   33814:	mov	r0, #1
   33818:	str	r5, [sp]
   3381c:	str	r0, [sp, #4]
   33820:	sub	r0, fp, #40	; 0x28
   33824:	bl	34b50 <__assert_fail@plt+0x21f60>
   33828:	cmp	r0, #0
   3382c:	bne	34560 <__assert_fail@plt+0x21970>
   33830:	and	r0, r5, #65536	; 0x10000
   33834:	mov	r2, r5
   33838:	str	r0, [sp, #24]
   3383c:	mov	r0, #0
   33840:	str	r0, [sp, #12]
   33844:	mov	r0, #0
   33848:	str	r0, [sp, #8]
   3384c:	ldr	r5, [sp, #20]
   33850:	mov	r0, r5
   33854:	mov	r1, sl
   33858:	bl	349e8 <__assert_fail@plt+0x21df8>
   3385c:	ldr	r7, [fp, #-40]	; 0xffffffd8
   33860:	ldr	r6, [sp, #16]
   33864:	mov	r8, r0
   33868:	cmp	r7, #2
   3386c:	beq	339ec <__assert_fail@plt+0x20dfc>
   33870:	cmp	r7, #4
   33874:	bne	338b0 <__assert_fail@plt+0x20cc0>
   33878:	ldr	r1, [fp, #-36]	; 0xffffffdc
   3387c:	ldr	r0, [sl, #64]	; 0x40
   33880:	sub	r3, fp, #32
   33884:	str	r1, [sp]
   33888:	ldr	r1, [sp, #36]	; 0x24
   3388c:	str	r1, [sp, #4]
   33890:	mov	r1, r4
   33894:	ldr	r2, [sp, #32]
   33898:	bl	34e14 <__assert_fail@plt+0x22224>
   3389c:	ldr	r2, [sp, #20]
   338a0:	cmp	r0, #0
   338a4:	str	r0, [r6]
   338a8:	beq	33a28 <__assert_fail@plt+0x20e38>
   338ac:	b	346cc <__assert_fail@plt+0x21adc>
   338b0:	ldr	r0, [sp, #20]
   338b4:	mov	r6, #7
   338b8:	str	r9, [sp, #28]
   338bc:	ldrb	r0, [r0, #4]
   338c0:	cmp	r0, #22
   338c4:	beq	338d4 <__assert_fail@plt+0x20ce4>
   338c8:	cmp	r0, #2
   338cc:	bne	339cc <__assert_fail@plt+0x20ddc>
   338d0:	b	346c4 <__assert_fail@plt+0x21ad4>
   338d4:	ldr	r0, [sl, #40]	; 0x28
   338d8:	ldr	r2, [sp, #36]	; 0x24
   338dc:	mov	r1, sl
   338e0:	add	r0, r0, r8
   338e4:	str	r0, [sl, #40]	; 0x28
   338e8:	add	r0, sp, #48	; 0x30
   338ec:	bl	349e8 <__assert_fail@plt+0x21df8>
   338f0:	mov	r3, r0
   338f4:	ldrb	r0, [sp, #52]	; 0x34
   338f8:	cmp	r0, #21
   338fc:	beq	339b4 <__assert_fail@plt+0x20dc4>
   33900:	cmp	r0, #2
   33904:	beq	346c4 <__assert_fail@plt+0x21ad4>
   33908:	mov	r0, #3
   3390c:	ldr	r5, [sp, #36]	; 0x24
   33910:	mov	r1, sl
   33914:	add	r2, sp, #48	; 0x30
   33918:	str	r0, [fp, #-48]	; 0xffffffd0
   3391c:	add	r0, sp, #56	; 0x38
   33920:	str	r0, [fp, #-44]	; 0xffffffd4
   33924:	mov	r0, #1
   33928:	str	r0, [sp, #4]
   3392c:	sub	r0, fp, #48	; 0x30
   33930:	str	r5, [sp]
   33934:	bl	34b50 <__assert_fail@plt+0x21f60>
   33938:	cmp	r0, #0
   3393c:	bne	34560 <__assert_fail@plt+0x21970>
   33940:	ldr	r0, [sp, #20]
   33944:	mov	r1, sl
   33948:	mov	r2, r5
   3394c:	bl	349e8 <__assert_fail@plt+0x21df8>
   33950:	ldr	sl, [fp, #-48]	; 0xffffffd0
   33954:	mov	r6, #11
   33958:	cmp	sl, #2
   3395c:	cmpne	sl, #4
   33960:	beq	346c0 <__assert_fail@plt+0x21ad0>
   33964:	mov	r8, r0
   33968:	cmp	r7, #3
   3396c:	bne	33980 <__assert_fail@plt+0x20d90>
   33970:	ldr	r0, [fp, #-36]	; 0xffffffdc
   33974:	bl	128c0 <strlen@plt>
   33978:	cmp	r0, #1
   3397c:	bhi	346bc <__assert_fail@plt+0x21acc>
   33980:	cmp	sl, #3
   33984:	bne	33998 <__assert_fail@plt+0x20da8>
   33988:	ldr	r0, [fp, #-44]	; 0xffffffd4
   3398c:	bl	128c0 <strlen@plt>
   33990:	cmp	r0, #1
   33994:	bhi	346bc <__assert_fail@plt+0x21acc>
   33998:	ldr	r2, [sp, #20]
   3399c:	cmp	r7, #3
   339a0:	beq	33adc <__assert_fail@plt+0x20eec>
   339a4:	cmp	r7, #0
   339a8:	mov	r5, #0
   339ac:	ldrbeq	r5, [fp, #-36]	; 0xffffffdc
   339b0:	b	33ae4 <__assert_fail@plt+0x20ef4>
   339b4:	ldr	r0, [sl, #40]	; 0x28
   339b8:	mov	r1, #1
   339bc:	sub	r0, r0, r8
   339c0:	str	r0, [sl, #40]	; 0x28
   339c4:	ldr	r0, [sp, #20]
   339c8:	strb	r1, [r0, #4]
   339cc:	add	r0, pc, #8
   339d0:	ldr	r6, [sp, #16]
   339d4:	ldr	r9, [sp, #28]
   339d8:	ldr	pc, [r0, r7, lsl #2]
   339dc:	andeq	r3, r3, r0, lsl #21
   339e0:	andeq	r3, r3, r4, lsr #21
   339e4:	andeq	r3, r3, ip, ror #19
   339e8:	andeq	r3, r3, ip, ror #19
   339ec:	ldr	r5, [fp, #-36]	; 0xffffffdc
   339f0:	mov	r0, r5
   339f4:	bl	128c0 <strlen@plt>
   339f8:	cmp	r0, #1
   339fc:	bne	345a0 <__assert_fail@plt+0x219b0>
   33a00:	ldrb	r0, [r5]
   33a04:	mov	r3, #1
   33a08:	ubfx	r1, r0, #5, #3
   33a0c:	and	r0, r0, #31
   33a10:	ldr	r2, [r4, r1, lsl #2]
   33a14:	orr	r0, r2, r3, lsl r0
   33a18:	str	r0, [r4, r1, lsl #2]
   33a1c:	mov	r0, #0
   33a20:	ldr	r2, [sp, #20]
   33a24:	str	r0, [r6]
   33a28:	ldrb	r0, [r2, #4]
   33a2c:	cmp	r0, #21
   33a30:	beq	33cb0 <__assert_fail@plt+0x210c0>
   33a34:	cmp	r0, #2
   33a38:	ldr	r0, [sp, #36]	; 0x24
   33a3c:	beq	34568 <__assert_fail@plt+0x21978>
   33a40:	sub	r1, fp, #80	; 0x50
   33a44:	mov	r3, r8
   33a48:	mov	r5, r2
   33a4c:	str	r1, [fp, #-36]	; 0xffffffdc
   33a50:	mov	r1, #3
   33a54:	str	r1, [fp, #-40]	; 0xffffffd8
   33a58:	str	r0, [sp]
   33a5c:	mov	r0, #0
   33a60:	mov	r1, sl
   33a64:	str	r0, [sp, #4]
   33a68:	sub	r0, fp, #40	; 0x28
   33a6c:	bl	34b50 <__assert_fail@plt+0x21f60>
   33a70:	ldr	r2, [sp, #36]	; 0x24
   33a74:	cmp	r0, #0
   33a78:	beq	33850 <__assert_fail@plt+0x20c60>
   33a7c:	b	34560 <__assert_fail@plt+0x21970>
   33a80:	ldrb	r0, [fp, #-36]	; 0xffffffdc
   33a84:	mov	r3, #1
   33a88:	ubfx	r1, r0, #5, #3
   33a8c:	and	r0, r0, #31
   33a90:	ldr	r2, [r4, r1, lsl #2]
   33a94:	orr	r0, r2, r3, lsl r0
   33a98:	ldr	r2, [sp, #20]
   33a9c:	str	r0, [r4, r1, lsl #2]
   33aa0:	b	33a28 <__assert_fail@plt+0x20e38>
   33aa4:	ldr	r6, [sp, #32]
   33aa8:	ldr	r0, [sp, #12]
   33aac:	mov	r5, r9
   33ab0:	ldr	r1, [r6, #20]
   33ab4:	cmp	r0, r1
   33ab8:	beq	33c18 <__assert_fail@plt+0x21028>
   33abc:	ldr	r0, [r6]
   33ac0:	ldr	r3, [fp, #-36]	; 0xffffffdc
   33ac4:	ldr	r2, [sp, #20]
   33ac8:	add	r7, r1, #1
   33acc:	mov	r9, r5
   33ad0:	str	r7, [r6, #20]
   33ad4:	str	r3, [r0, r1, lsl #2]
   33ad8:	b	33a28 <__assert_fail@plt+0x20e38>
   33adc:	ldr	r0, [fp, #-36]	; 0xffffffdc
   33ae0:	ldrb	r5, [r0]
   33ae4:	cmp	sl, #3
   33ae8:	beq	33afc <__assert_fail@plt+0x20f0c>
   33aec:	cmp	sl, #0
   33af0:	mov	r9, #0
   33af4:	ldrbeq	r9, [fp, #-44]	; 0xffffffd4
   33af8:	b	33b04 <__assert_fail@plt+0x20f14>
   33afc:	ldr	r0, [fp, #-44]	; 0xffffffd4
   33b00:	ldrb	r9, [r0]
   33b04:	cmp	r7, #3
   33b08:	cmpne	r7, #0
   33b0c:	bne	33b34 <__assert_fail@plt+0x20f44>
   33b10:	ldr	r6, [sp, #44]	; 0x2c
   33b14:	ldr	r0, [r6, #92]	; 0x5c
   33b18:	cmp	r0, #2
   33b1c:	blt	33b3c <__assert_fail@plt+0x20f4c>
   33b20:	mov	r0, r5
   33b24:	bl	12974 <btowc@plt>
   33b28:	ldr	r2, [sp, #20]
   33b2c:	mov	r5, r0
   33b30:	b	33b3c <__assert_fail@plt+0x20f4c>
   33b34:	ldr	r5, [fp, #-36]	; 0xffffffdc
   33b38:	ldr	r6, [sp, #44]	; 0x2c
   33b3c:	cmp	sl, #3
   33b40:	cmpne	sl, #0
   33b44:	bne	33b68 <__assert_fail@plt+0x20f78>
   33b48:	ldr	r0, [r6, #92]	; 0x5c
   33b4c:	cmp	r0, #2
   33b50:	blt	33b6c <__assert_fail@plt+0x20f7c>
   33b54:	mov	r0, r9
   33b58:	bl	12974 <btowc@plt>
   33b5c:	ldr	r2, [sp, #20]
   33b60:	mov	r9, r0
   33b64:	b	33b6c <__assert_fail@plt+0x20f7c>
   33b68:	ldr	r9, [fp, #-44]	; 0xffffffd4
   33b6c:	ldr	sl, [sp, #40]	; 0x28
   33b70:	cmn	r5, #1
   33b74:	mov	r6, #3
   33b78:	cmnne	r9, #1
   33b7c:	beq	346c4 <__assert_fail@plt+0x21ad4>
   33b80:	ldr	r0, [sp, #24]
   33b84:	cmp	r0, #0
   33b88:	beq	33b98 <__assert_fail@plt+0x20fa8>
   33b8c:	cmp	r5, r9
   33b90:	mov	r6, #11
   33b94:	bhi	346c4 <__assert_fail@plt+0x21ad4>
   33b98:	ldr	r0, [sp, #44]	; 0x2c
   33b9c:	ldr	r0, [r0, #92]	; 0x5c
   33ba0:	cmp	r0, #2
   33ba4:	blt	33bd4 <__assert_fail@plt+0x20fe4>
   33ba8:	ldr	r7, [sp, #32]
   33bac:	ldr	r1, [sp, #8]
   33bb0:	ldr	r0, [r7, #32]
   33bb4:	cmp	r1, r0
   33bb8:	beq	33c50 <__assert_fail@plt+0x21060>
   33bbc:	ldmib	r7, {r1, r6}
   33bc0:	str	r5, [r1, r0, lsl #2]
   33bc4:	ldr	r0, [r7, #32]
   33bc8:	add	r1, r0, #1
   33bcc:	str	r1, [r7, #32]
   33bd0:	str	r9, [r6, r0, lsl #2]
   33bd4:	mov	r0, #0
   33bd8:	mov	r6, #1
   33bdc:	cmp	r5, r0
   33be0:	cmpls	r0, r9
   33be4:	bhi	33bfc <__assert_fail@plt+0x2100c>
   33be8:	ubfx	r1, r0, #5, #3
   33bec:	and	r3, r0, #31
   33bf0:	ldr	r7, [r4, r1, lsl #2]
   33bf4:	orr	r3, r7, r6, lsl r3
   33bf8:	str	r3, [r4, r1, lsl #2]
   33bfc:	add	r0, r0, #1
   33c00:	cmp	r0, #256	; 0x100
   33c04:	bne	33bdc <__assert_fail@plt+0x20fec>
   33c08:	ldr	r6, [sp, #16]
   33c0c:	ldr	r9, [sp, #28]
   33c10:	mov	r0, #0
   33c14:	b	33a24 <__assert_fail@plt+0x20e34>
   33c18:	ldr	r1, [sp, #12]
   33c1c:	mov	r0, #1
   33c20:	orr	r1, r0, r1, lsl #1
   33c24:	ldr	r0, [r6]
   33c28:	str	r1, [sp, #12]
   33c2c:	lsl	r1, r1, #2
   33c30:	bl	2e984 <__assert_fail@plt+0x1bd94>
   33c34:	cmp	r0, #0
   33c38:	beq	346e8 <__assert_fail@plt+0x21af8>
   33c3c:	ldr	r6, [sp, #32]
   33c40:	ldr	sl, [sp, #40]	; 0x28
   33c44:	str	r0, [r6]
   33c48:	ldr	r1, [r6, #20]
   33c4c:	b	33ac0 <__assert_fail@plt+0x20ed0>
   33c50:	ldr	r1, [sp, #8]
   33c54:	mov	r0, #1
   33c58:	orr	r1, r0, r1, lsl #1
   33c5c:	ldr	r0, [r7, #4]
   33c60:	lsl	r6, r1, #2
   33c64:	str	r1, [sp, #8]
   33c68:	mov	r1, r6
   33c6c:	bl	2e984 <__assert_fail@plt+0x1bd94>
   33c70:	mov	sl, r0
   33c74:	ldr	r0, [r7, #8]
   33c78:	mov	r1, r6
   33c7c:	bl	2e984 <__assert_fail@plt+0x1bd94>
   33c80:	mov	r6, r0
   33c84:	cmp	sl, #0
   33c88:	mov	r0, sl
   33c8c:	cmpne	r6, #0
   33c90:	beq	34700 <__assert_fail@plt+0x21b10>
   33c94:	ldr	r7, [sp, #32]
   33c98:	mov	r1, r0
   33c9c:	stmib	r7, {r0, r6}
   33ca0:	ldr	r0, [r7, #32]
   33ca4:	ldr	sl, [sp, #40]	; 0x28
   33ca8:	ldr	r2, [sp, #20]
   33cac:	b	33bc0 <__assert_fail@plt+0x20fd0>
   33cb0:	ldr	r0, [sl, #40]	; 0x28
   33cb4:	ldr	r2, [sp, #44]	; 0x2c
   33cb8:	cmp	r9, #0
   33cbc:	add	r0, r0, r8
   33cc0:	str	r0, [sl, #40]	; 0x28
   33cc4:	beq	33ce8 <__assert_fail@plt+0x210f8>
   33cc8:	mov	r0, #0
   33ccc:	add	r1, r4, r0
   33cd0:	add	r0, r0, #16
   33cd4:	vld1.32	{d16-d17}, [r1]
   33cd8:	cmp	r0, #32
   33cdc:	vmvn	q8, q8
   33ce0:	vst1.32	{d16-d17}, [r1]
   33ce4:	bne	33ccc <__assert_fail@plt+0x210dc>
   33ce8:	ldr	r0, [r2, #92]	; 0x5c
   33cec:	ldr	r8, [sp, #32]
   33cf0:	cmp	r0, #2
   33cf4:	blt	33d20 <__assert_fail@plt+0x21130>
   33cf8:	ldr	r1, [sp, #44]	; 0x2c
   33cfc:	mov	r2, #0
   33d00:	ldr	r1, [r1, #60]	; 0x3c
   33d04:	ldr	r3, [r1, r2, lsl #2]
   33d08:	ldr	r7, [r4, r2, lsl #2]
   33d0c:	and	r3, r7, r3
   33d10:	str	r3, [r4, r2, lsl #2]
   33d14:	add	r2, r2, #1
   33d18:	cmp	r2, #8
   33d1c:	bne	33d04 <__assert_fail@plt+0x21114>
   33d20:	ldr	r1, [r8, #20]
   33d24:	cmp	r1, #0
   33d28:	bne	33d50 <__assert_fail@plt+0x21160>
   33d2c:	ldr	r1, [r8, #24]
   33d30:	cmp	r1, #0
   33d34:	bne	33d50 <__assert_fail@plt+0x21160>
   33d38:	ldr	r1, [r8, #28]
   33d3c:	cmp	r1, #0
   33d40:	bne	33d50 <__assert_fail@plt+0x21160>
   33d44:	ldr	r1, [r8, #32]
   33d48:	cmp	r1, #0
   33d4c:	beq	34510 <__assert_fail@plt+0x21920>
   33d50:	ldr	r6, [sp, #44]	; 0x2c
   33d54:	add	r3, sp, #56	; 0x38
   33d58:	mov	r1, #0
   33d5c:	mov	r2, #0
   33d60:	mov	r5, #0
   33d64:	ldrb	r0, [r6, #88]	; 0x58
   33d68:	orr	r0, r0, #2
   33d6c:	strb	r0, [r6, #88]	; 0x58
   33d70:	mov	r0, #6
   33d74:	str	r8, [sp, #56]	; 0x38
   33d78:	str	r0, [sp, #60]	; 0x3c
   33d7c:	mov	r0, r6
   33d80:	bl	34714 <__assert_fail@plt+0x21b24>
   33d84:	cmp	r0, #0
   33d88:	beq	346f0 <__assert_fail@plt+0x21b00>
   33d8c:	mov	r9, r0
   33d90:	ldr	r0, [r4, r5, lsl #2]
   33d94:	cmp	r0, #0
   33d98:	bne	33db4 <__assert_fail@plt+0x211c4>
   33d9c:	add	r5, r5, #1
   33da0:	cmp	r5, #8
   33da4:	bne	33d90 <__assert_fail@plt+0x211a0>
   33da8:	mov	r0, r4
   33dac:	bl	2bcbc <__assert_fail@plt+0x190cc>
   33db0:	b	33e0c <__assert_fail@plt+0x2121c>
   33db4:	mov	r0, #3
   33db8:	str	r4, [sp, #56]	; 0x38
   33dbc:	add	r3, sp, #56	; 0x38
   33dc0:	mov	r1, #0
   33dc4:	mov	r2, #0
   33dc8:	mov	r5, #0
   33dcc:	str	r0, [sp, #60]	; 0x3c
   33dd0:	mov	r0, r6
   33dd4:	bl	34714 <__assert_fail@plt+0x21b24>
   33dd8:	cmp	r0, #0
   33ddc:	beq	346f0 <__assert_fail@plt+0x21b00>
   33de0:	mov	r1, r0
   33de4:	mov	r0, #10
   33de8:	sub	r3, fp, #80	; 0x50
   33dec:	mov	r2, r9
   33df0:	str	r0, [fp, #-76]	; 0xffffffb4
   33df4:	str	r5, [fp, #-80]	; 0xffffffb0
   33df8:	mov	r0, r6
   33dfc:	bl	34714 <__assert_fail@plt+0x21b24>
   33e00:	mov	r9, r0
   33e04:	cmp	r0, #0
   33e08:	beq	346f0 <__assert_fail@plt+0x21b00>
   33e0c:	cmp	r9, #0
   33e10:	bne	33e30 <__assert_fail@plt+0x21240>
   33e14:	ldr	r6, [sp, #16]
   33e18:	ldr	r2, [sp, #36]	; 0x24
   33e1c:	ldr	r5, [sp, #20]
   33e20:	ldr	r0, [r6]
   33e24:	cmp	r0, #0
   33e28:	beq	33e3c <__assert_fail@plt+0x2124c>
   33e2c:	b	343e0 <__assert_fail@plt+0x217f0>
   33e30:	ldr	r2, [sp, #36]	; 0x24
   33e34:	ldr	r5, [sp, #20]
   33e38:	ldr	r6, [sp, #16]
   33e3c:	mov	r0, r5
   33e40:	mov	r1, sl
   33e44:	str	r6, [sp, #16]
   33e48:	bl	328f4 <__assert_fail@plt+0x1fd04>
   33e4c:	ldr	r1, [sl, #40]	; 0x28
   33e50:	ldr	r2, [sp, #36]	; 0x24
   33e54:	ldr	r3, [sp, #20]
   33e58:	mov	r7, #0
   33e5c:	sub	r4, fp, #80	; 0x50
   33e60:	add	r0, r1, r0
   33e64:	str	r0, [sl, #40]	; 0x28
   33e68:	and	r0, r2, #16777216	; 0x1000000
   33e6c:	str	r0, [sp, #24]
   33e70:	and	r0, r2, #2097152	; 0x200000
   33e74:	str	r0, [sp, #12]
   33e78:	ldrb	r0, [r3, #4]
   33e7c:	cmp	r0, #23
   33e80:	bhi	34374 <__assert_fail@plt+0x21784>
   33e84:	movw	r6, #2048	; 0x800
   33e88:	mov	r1, #1
   33e8c:	movt	r6, #140	; 0x8c
   33e90:	tst	r6, r1, lsl r0
   33e94:	beq	34374 <__assert_fail@plt+0x21784>
   33e98:	cmp	r0, #23
   33e9c:	bne	33ef8 <__assert_fail@plt+0x21308>
   33ea0:	ldr	r0, [r3]
   33ea4:	ldr	r5, [r3, #4]
   33ea8:	mov	r1, r3
   33eac:	mov	r8, sl
   33eb0:	str	r0, [sp, #32]
   33eb4:	ldr	r0, [sl, #40]	; 0x28
   33eb8:	str	r0, [sp, #28]
   33ebc:	mov	r0, sl
   33ec0:	mov	sl, r3
   33ec4:	bl	356a4 <__assert_fail@plt+0x22ab4>
   33ec8:	cmn	r0, #1
   33ecc:	bne	33f14 <__assert_fail@plt+0x21324>
   33ed0:	ldrb	r0, [sl, #4]
   33ed4:	mov	r3, sl
   33ed8:	cmp	r0, #1
   33edc:	bne	34158 <__assert_fail@plt+0x21568>
   33ee0:	ldrb	r1, [r3]
   33ee4:	cmp	r1, #44	; 0x2c
   33ee8:	bne	34158 <__assert_fail@plt+0x21568>
   33eec:	ldr	r2, [sp, #36]	; 0x24
   33ef0:	mov	r6, #0
   33ef4:	b	33f2c <__assert_fail@plt+0x2133c>
   33ef8:	cmp	r0, #19
   33efc:	sub	r0, r0, #18
   33f00:	mvn	sl, #0
   33f04:	clz	r0, r0
   33f08:	movweq	sl, #1
   33f0c:	lsr	r6, r0, #5
   33f10:	b	33fa0 <__assert_fail@plt+0x213b0>
   33f14:	ldr	r2, [sp, #36]	; 0x24
   33f18:	mov	r6, r0
   33f1c:	cmn	r0, #2
   33f20:	mov	r3, sl
   33f24:	beq	34174 <__assert_fail@plt+0x21584>
   33f28:	ldr	r0, [r3, #4]
   33f2c:	uxtb	r0, r0
   33f30:	mov	sl, r6
   33f34:	cmp	r0, #24
   33f38:	beq	33f70 <__assert_fail@plt+0x21380>
   33f3c:	cmp	r0, #1
   33f40:	bne	34174 <__assert_fail@plt+0x21584>
   33f44:	ldrb	r0, [r3]
   33f48:	cmp	r0, #44	; 0x2c
   33f4c:	bne	34174 <__assert_fail@plt+0x21584>
   33f50:	ldr	r0, [sp, #40]	; 0x28
   33f54:	mov	r1, r3
   33f58:	bl	356a4 <__assert_fail@plt+0x22ab4>
   33f5c:	ldr	r3, [sp, #20]
   33f60:	ldr	r2, [sp, #36]	; 0x24
   33f64:	mov	sl, r0
   33f68:	cmn	r0, #2
   33f6c:	beq	34174 <__assert_fail@plt+0x21584>
   33f70:	cmn	sl, #1
   33f74:	beq	33f80 <__assert_fail@plt+0x21390>
   33f78:	cmp	r6, sl
   33f7c:	bgt	34334 <__assert_fail@plt+0x21744>
   33f80:	ldrb	r0, [r3, #4]
   33f84:	cmp	r0, #24
   33f88:	bne	34334 <__assert_fail@plt+0x21744>
   33f8c:	cmn	sl, #1
   33f90:	mov	r0, sl
   33f94:	moveq	r0, r6
   33f98:	cmp	r0, #32768	; 0x8000
   33f9c:	bge	3435c <__assert_fail@plt+0x2176c>
   33fa0:	ldr	r5, [sp, #40]	; 0x28
   33fa4:	mov	r0, r3
   33fa8:	mov	r1, r5
   33fac:	bl	328f4 <__assert_fail@plt+0x1fd04>
   33fb0:	ldr	r1, [r5, #40]	; 0x28
   33fb4:	cmp	r9, #0
   33fb8:	add	r0, r1, r0
   33fbc:	str	r0, [r5, #40]	; 0x28
   33fc0:	mov	r5, #0
   33fc4:	beq	341b8 <__assert_fail@plt+0x215c8>
   33fc8:	orrs	r0, sl, r6
   33fcc:	beq	341c8 <__assert_fail@plt+0x215d8>
   33fd0:	mov	r0, #0
   33fd4:	cmp	r6, #1
   33fd8:	mov	r8, r9
   33fdc:	str	r0, [sp, #32]
   33fe0:	str	r9, [sp, #28]
   33fe4:	bge	3422c <__assert_fail@plt+0x2163c>
   33fe8:	ldrb	r0, [r8, #24]
   33fec:	cmp	r0, #17
   33ff0:	bne	34064 <__assert_fail@plt+0x21474>
   33ff4:	ldr	r0, [r8, #20]
   33ff8:	mov	r2, r8
   33ffc:	mov	r1, r2
   34000:	ldr	r2, [r2, #4]
   34004:	cmp	r2, #0
   34008:	bne	33ffc <__assert_fail@plt+0x2140c>
   3400c:	ldr	r2, [r1, #8]
   34010:	cmp	r2, #0
   34014:	bne	33ffc <__assert_fail@plt+0x2140c>
   34018:	ldr	r2, [r1, #24]
   3401c:	uxtb	r3, r2
   34020:	cmp	r3, #17
   34024:	bne	34038 <__assert_fail@plt+0x21448>
   34028:	ldr	r3, [r1, #20]
   3402c:	cmp	r3, r0
   34030:	orreq	r2, r2, #524288	; 0x80000
   34034:	streq	r2, [r1, #24]
   34038:	ldr	r3, [r1]
   3403c:	cmp	r3, #0
   34040:	beq	34064 <__assert_fail@plt+0x21474>
   34044:	ldr	r2, [r3, #8]
   34048:	cmp	r2, r1
   3404c:	mov	r1, r3
   34050:	beq	34018 <__assert_fail@plt+0x21428>
   34054:	cmp	r2, #0
   34058:	mov	r1, r3
   3405c:	beq	34018 <__assert_fail@plt+0x21428>
   34060:	b	33ffc <__assert_fail@plt+0x2140c>
   34064:	cmn	sl, #1
   34068:	mov	r0, #10
   3406c:	str	r7, [fp, #-80]	; 0xffffffb0
   34070:	mov	r1, r8
   34074:	mov	r2, #0
   34078:	mov	r3, r4
   3407c:	movweq	r0, #11
   34080:	str	r0, [fp, #-76]	; 0xffffffb4
   34084:	ldr	r0, [sp, #44]	; 0x2c
   34088:	bl	34714 <__assert_fail@plt+0x21b24>
   3408c:	cmp	r0, #0
   34090:	beq	342c8 <__assert_fail@plt+0x216d8>
   34094:	mov	r5, r0
   34098:	add	r0, r6, #2
   3409c:	cmp	r0, sl
   340a0:	ble	340d8 <__assert_fail@plt+0x214e8>
   340a4:	ldr	r1, [sp, #32]
   340a8:	ldr	sl, [sp, #40]	; 0x28
   340ac:	cmp	r1, #0
   340b0:	beq	341a4 <__assert_fail@plt+0x215b4>
   340b4:	mov	r0, #16
   340b8:	mov	r2, r5
   340bc:	mov	r3, r4
   340c0:	str	r0, [fp, #-76]	; 0xffffffb4
   340c4:	ldr	r0, [sp, #44]	; 0x2c
   340c8:	str	r7, [fp, #-80]	; 0xffffffb0
   340cc:	bl	34714 <__assert_fail@plt+0x21b24>
   340d0:	mov	r5, r0
   340d4:	b	342dc <__assert_fail@plt+0x216ec>
   340d8:	add	r6, r6, #1
   340dc:	ldr	r9, [sp, #44]	; 0x2c
   340e0:	mov	r0, r8
   340e4:	mov	r1, r9
   340e8:	bl	35750 <__assert_fail@plt+0x22b60>
   340ec:	mov	r8, r0
   340f0:	mov	r0, #16
   340f4:	mov	r1, r5
   340f8:	mov	r3, r4
   340fc:	str	r0, [fp, #-76]	; 0xffffffb4
   34100:	mov	r0, r9
   34104:	mov	r2, r8
   34108:	str	r7, [fp, #-80]	; 0xffffffb0
   3410c:	bl	34714 <__assert_fail@plt+0x21b24>
   34110:	cmp	r8, #0
   34114:	movne	r1, r0
   34118:	cmpne	r0, #0
   3411c:	beq	342c8 <__assert_fail@plt+0x216d8>
   34120:	mov	r0, #10
   34124:	mov	r2, #0
   34128:	mov	r3, r4
   3412c:	str	r0, [fp, #-76]	; 0xffffffb4
   34130:	ldr	r0, [sp, #44]	; 0x2c
   34134:	str	r7, [fp, #-80]	; 0xffffffb0
   34138:	bl	34714 <__assert_fail@plt+0x21b24>
   3413c:	cmp	r0, #0
   34140:	beq	342c8 <__assert_fail@plt+0x216d8>
   34144:	add	r6, r6, #1
   34148:	mov	r5, r0
   3414c:	cmp	r6, sl
   34150:	blt	340dc <__assert_fail@plt+0x214ec>
   34154:	b	340a4 <__assert_fail@plt+0x214b4>
   34158:	ldr	r0, [sp, #16]
   3415c:	ldr	r2, [sp, #36]	; 0x24
   34160:	mov	r1, #10
   34164:	mov	r5, #0
   34168:	mov	sl, r8
   3416c:	str	r1, [r0]
   34170:	b	342e8 <__assert_fail@plt+0x216f8>
   34174:	ldr	r0, [sp, #12]
   34178:	cmp	r0, #0
   3417c:	beq	34340 <__assert_fail@plt+0x21750>
   34180:	ldr	sl, [sp, #40]	; 0x28
   34184:	ldr	r0, [sp, #28]
   34188:	str	r0, [sl, #40]	; 0x28
   3418c:	mov	r0, #1
   34190:	bfi	r5, r0, #0, #8
   34194:	ldr	r0, [sp, #32]
   34198:	stm	r3, {r0, r5}
   3419c:	mov	r5, r9
   341a0:	b	342e8 <__assert_fail@plt+0x216f8>
   341a4:	ldr	r2, [sp, #36]	; 0x24
   341a8:	ldr	r3, [sp, #20]
   341ac:	clz	r0, r5
   341b0:	lsr	r0, r0, #5
   341b4:	b	34308 <__assert_fail@plt+0x21718>
   341b8:	ldr	sl, [sp, #40]	; 0x28
   341bc:	ldr	r2, [sp, #36]	; 0x24
   341c0:	ldr	r3, [sp, #20]
   341c4:	b	342e8 <__assert_fail@plt+0x216f8>
   341c8:	ldr	sl, [sp, #40]	; 0x28
   341cc:	mov	r0, r9
   341d0:	mov	r5, r0
   341d4:	ldr	r0, [r0, #4]
   341d8:	cmp	r0, #0
   341dc:	bne	341d0 <__assert_fail@plt+0x215e0>
   341e0:	ldr	r0, [r5, #8]
   341e4:	cmp	r0, #0
   341e8:	bne	341d0 <__assert_fail@plt+0x215e0>
   341ec:	add	r0, r5, #20
   341f0:	bl	31cdc <__assert_fail@plt+0x1f0ec>
   341f4:	ldr	r1, [r5]
   341f8:	cmp	r1, #0
   341fc:	beq	34220 <__assert_fail@plt+0x21630>
   34200:	ldr	r0, [r1, #8]
   34204:	cmp	r0, r5
   34208:	mov	r5, r1
   3420c:	beq	341ec <__assert_fail@plt+0x215fc>
   34210:	cmp	r0, #0
   34214:	mov	r5, r1
   34218:	beq	341ec <__assert_fail@plt+0x215fc>
   3421c:	b	341d0 <__assert_fail@plt+0x215e0>
   34220:	ldr	r2, [sp, #36]	; 0x24
   34224:	ldr	r3, [sp, #20]
   34228:	b	3436c <__assert_fail@plt+0x2177c>
   3422c:	ldr	r9, [sp, #28]
   34230:	str	r9, [sp, #32]
   34234:	beq	34298 <__assert_fail@plt+0x216a8>
   34238:	ldr	r0, [sp, #28]
   3423c:	sub	r5, r6, #1
   34240:	mov	r9, r0
   34244:	str	r0, [sp, #32]
   34248:	ldr	r8, [sp, #44]	; 0x2c
   3424c:	mov	r0, r9
   34250:	mov	r1, r8
   34254:	bl	35750 <__assert_fail@plt+0x22b60>
   34258:	ldr	r1, [sp, #32]
   3425c:	mov	r9, r0
   34260:	mov	r0, #16
   34264:	mov	r3, r4
   34268:	str	r0, [fp, #-76]	; 0xffffffb4
   3426c:	mov	r0, r8
   34270:	mov	r2, r9
   34274:	str	r7, [fp, #-80]	; 0xffffffb0
   34278:	bl	34714 <__assert_fail@plt+0x21b24>
   3427c:	str	r0, [sp, #32]
   34280:	cmp	r9, #0
   34284:	ldrne	r0, [sp, #32]
   34288:	cmpne	r0, #0
   3428c:	beq	342c8 <__assert_fail@plt+0x216d8>
   34290:	subs	r5, r5, #1
   34294:	bne	34248 <__assert_fail@plt+0x21658>
   34298:	cmp	r6, sl
   3429c:	bne	342b0 <__assert_fail@plt+0x216c0>
   342a0:	ldr	sl, [sp, #40]	; 0x28
   342a4:	ldr	r2, [sp, #36]	; 0x24
   342a8:	ldr	r5, [sp, #32]
   342ac:	b	341a8 <__assert_fail@plt+0x215b8>
   342b0:	ldr	r1, [sp, #44]	; 0x2c
   342b4:	mov	r0, r9
   342b8:	bl	35750 <__assert_fail@plt+0x22b60>
   342bc:	mov	r8, r0
   342c0:	cmp	r0, #0
   342c4:	bne	33fe8 <__assert_fail@plt+0x213f8>
   342c8:	ldr	r0, [sp, #16]
   342cc:	ldr	sl, [sp, #40]	; 0x28
   342d0:	mov	r1, #12
   342d4:	mov	r5, #0
   342d8:	str	r1, [r0]
   342dc:	ldr	r2, [sp, #36]	; 0x24
   342e0:	ldr	r3, [sp, #20]
   342e4:	ldr	r9, [sp, #28]
   342e8:	clz	r0, r5
   342ec:	cmp	r5, #0
   342f0:	lsr	r0, r0, #5
   342f4:	bne	34308 <__assert_fail@plt+0x21718>
   342f8:	ldr	r1, [sp, #16]
   342fc:	ldr	r1, [r1]
   34300:	cmp	r1, #0
   34304:	bne	344b4 <__assert_fail@plt+0x218c4>
   34308:	ldr	r1, [sp, #24]
   3430c:	mov	r9, r5
   34310:	cmp	r1, #0
   34314:	beq	33e78 <__assert_fail@plt+0x21288>
   34318:	ldrb	r1, [r3, #4]
   3431c:	cmp	r1, #23
   34320:	beq	3437c <__assert_fail@plt+0x2178c>
   34324:	cmp	r1, #11
   34328:	mov	r9, r5
   3432c:	bne	33e78 <__assert_fail@plt+0x21288>
   34330:	b	3437c <__assert_fail@plt+0x2178c>
   34334:	ldr	r0, [sp, #16]
   34338:	mov	r1, #10
   3433c:	b	34364 <__assert_fail@plt+0x21774>
   34340:	ldrb	r0, [r3, #4]
   34344:	ldr	r1, [sp, #16]
   34348:	cmp	r0, #2
   3434c:	mov	r0, #10
   34350:	movweq	r0, #9
   34354:	str	r0, [r1]
   34358:	b	34368 <__assert_fail@plt+0x21778>
   3435c:	ldr	r0, [sp, #16]
   34360:	mov	r1, #15
   34364:	str	r1, [r0]
   34368:	ldr	sl, [sp, #40]	; 0x28
   3436c:	mov	r5, #0
   34370:	b	342e8 <__assert_fail@plt+0x216f8>
   34374:	mov	r8, r9
   34378:	b	343e4 <__assert_fail@plt+0x217f4>
   3437c:	cmp	r0, #0
   34380:	bne	343d4 <__assert_fail@plt+0x217e4>
   34384:	mov	r4, r5
   34388:	ldr	r5, [r5, #4]
   3438c:	cmp	r5, #0
   34390:	bne	34384 <__assert_fail@plt+0x21794>
   34394:	ldr	r5, [r4, #8]
   34398:	cmp	r5, #0
   3439c:	bne	34384 <__assert_fail@plt+0x21794>
   343a0:	add	r0, r4, #20
   343a4:	bl	31cdc <__assert_fail@plt+0x1f0ec>
   343a8:	ldr	r0, [r4]
   343ac:	cmp	r0, #0
   343b0:	beq	343d4 <__assert_fail@plt+0x217e4>
   343b4:	ldr	r5, [r0, #8]
   343b8:	cmp	r5, r4
   343bc:	mov	r4, r0
   343c0:	beq	343a0 <__assert_fail@plt+0x217b0>
   343c4:	cmp	r5, #0
   343c8:	mov	r4, r0
   343cc:	beq	343a0 <__assert_fail@plt+0x217b0>
   343d0:	b	34384 <__assert_fail@plt+0x21794>
   343d4:	ldr	r1, [sp, #16]
   343d8:	mov	r0, #13
   343dc:	str	r0, [r1]
   343e0:	mov	r8, #0
   343e4:	mov	r0, r8
   343e8:	sub	sp, fp, #28
   343ec:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   343f0:	mov	r5, #9
   343f4:	mov	r0, #6
   343f8:	str	r0, [r4]
   343fc:	mov	r0, r6
   34400:	mov	r1, #0
   34404:	mov	r2, #0
   34408:	mov	r3, r4
   3440c:	mov	r8, #0
   34410:	bl	34714 <__assert_fail@plt+0x21b24>
   34414:	mov	r7, r0
   34418:	mov	r0, r6
   3441c:	mov	r1, #0
   34420:	mov	r2, #0
   34424:	mov	r3, r4
   34428:	str	r5, [r4]
   3442c:	bl	34714 <__assert_fail@plt+0x21b24>
   34430:	mov	r4, r0
   34434:	mov	r0, #10
   34438:	sub	r3, fp, #80	; 0x50
   3443c:	mov	r1, r7
   34440:	str	r0, [fp, #-76]	; 0xffffffb4
   34444:	mov	r0, r6
   34448:	mov	r2, r4
   3444c:	str	r8, [fp, #-80]	; 0xffffffb0
   34450:	bl	34714 <__assert_fail@plt+0x21b24>
   34454:	cmp	r7, #0
   34458:	cmpne	r4, #0
   3445c:	bne	34484 <__assert_fail@plt+0x21894>
   34460:	mov	r0, #12
   34464:	str	r0, [r9]
   34468:	b	343e4 <__assert_fail@plt+0x217f4>
   3446c:	mov	r0, r6
   34470:	mov	r1, #0
   34474:	mov	r2, #0
   34478:	mov	r3, r4
   3447c:	mov	r8, #0
   34480:	bl	34714 <__assert_fail@plt+0x21b24>
   34484:	mov	r5, r0
   34488:	cmp	r0, #0
   3448c:	beq	34460 <__assert_fail@plt+0x21870>
   34490:	ldr	r0, [sp, #20]
   34494:	ldr	r2, [sp, #36]	; 0x24
   34498:	mov	r1, sl
   3449c:	bl	328f4 <__assert_fail@plt+0x1fd04>
   344a0:	ldr	r1, [sl, #40]	; 0x28
   344a4:	mov	r8, r5
   344a8:	add	r0, r1, r0
   344ac:	str	r0, [sl, #40]	; 0x28
   344b0:	b	343e4 <__assert_fail@plt+0x217f4>
   344b4:	mov	r8, #0
   344b8:	cmp	r9, #0
   344bc:	beq	343e4 <__assert_fail@plt+0x217f4>
   344c0:	mov	r5, r9
   344c4:	ldr	r9, [r9, #4]
   344c8:	cmp	r9, #0
   344cc:	bne	344c0 <__assert_fail@plt+0x218d0>
   344d0:	ldr	r9, [r5, #8]
   344d4:	cmp	r9, #0
   344d8:	bne	344c0 <__assert_fail@plt+0x218d0>
   344dc:	add	r0, r5, #20
   344e0:	bl	31cdc <__assert_fail@plt+0x1f0ec>
   344e4:	ldr	r0, [r5]
   344e8:	cmp	r0, #0
   344ec:	beq	343e4 <__assert_fail@plt+0x217f4>
   344f0:	ldr	r9, [r0, #8]
   344f4:	cmp	r9, r5
   344f8:	mov	r5, r0
   344fc:	beq	344dc <__assert_fail@plt+0x218ec>
   34500:	cmp	r9, #0
   34504:	mov	r5, r0
   34508:	beq	344dc <__assert_fail@plt+0x218ec>
   3450c:	b	344c0 <__assert_fail@plt+0x218d0>
   34510:	cmp	r0, #2
   34514:	blt	34530 <__assert_fail@plt+0x21940>
   34518:	ldr	r0, [r8, #36]	; 0x24
   3451c:	cmp	r0, #0
   34520:	bne	33d50 <__assert_fail@plt+0x21160>
   34524:	ldrb	r0, [r8, #16]
   34528:	tst	r0, #1
   3452c:	bne	33d50 <__assert_fail@plt+0x21160>
   34530:	mov	r0, r8
   34534:	bl	31d6c <__assert_fail@plt+0x1f17c>
   34538:	mov	r0, #3
   3453c:	str	r4, [sp, #56]	; 0x38
   34540:	add	r3, sp, #56	; 0x38
   34544:	mov	r1, #0
   34548:	mov	r2, #0
   3454c:	str	r0, [sp, #60]	; 0x3c
   34550:	ldr	r0, [sp, #44]	; 0x2c
   34554:	b	33dfc <__assert_fail@plt+0x2120c>
   34558:	mov	r0, #12
   3455c:	b	3376c <__assert_fail@plt+0x20b7c>
   34560:	mov	r6, r0
   34564:	b	346c4 <__assert_fail@plt+0x21ad4>
   34568:	mov	r6, #7
   3456c:	b	346c4 <__assert_fail@plt+0x21ad4>
   34570:	mov	r0, #2
   34574:	b	346f4 <__assert_fail@plt+0x21b04>
   34578:	mov	r0, r4
   3457c:	bl	2bcbc <__assert_fail@plt+0x190cc>
   34580:	mov	r0, r8
   34584:	bl	2bcbc <__assert_fail@plt+0x190cc>
   34588:	ldr	r1, [sp, #16]
   3458c:	mov	r0, #12
   34590:	str	r0, [r1]
   34594:	b	33e0c <__assert_fail@plt+0x2121c>
   34598:	mov	r0, #6
   3459c:	b	3376c <__assert_fail@plt+0x20b7c>
   345a0:	mov	r6, #3
   345a4:	b	346c4 <__assert_fail@plt+0x21ad4>
   345a8:	ldr	r1, [sp, #16]
   345ac:	mov	r0, #12
   345b0:	str	r0, [r1]
   345b4:	b	343e4 <__assert_fail@plt+0x217f4>
   345b8:	mov	r9, r6
   345bc:	mov	r5, #0
   345c0:	mov	r8, #0
   345c4:	b	345d4 <__assert_fail@plt+0x219e4>
   345c8:	mov	r9, r6
   345cc:	mov	r8, #4
   345d0:	mov	r5, #128	; 0x80
   345d4:	bl	1286c <__ctype_b_loc@plt>
   345d8:	ldr	r0, [r0]
   345dc:	ldr	sl, [sp, #40]	; 0x28
   345e0:	ldr	r4, [sp, #20]
   345e4:	mov	r1, #1
   345e8:	mov	r6, r9
   345ec:	add	r7, r0, r5, lsl #1
   345f0:	ldr	r0, [sp, #44]	; 0x2c
   345f4:	mov	ip, r6
   345f8:	mov	r3, #0
   345fc:	add	r0, r0, r8, lsl #2
   34600:	add	r2, r0, #96	; 0x60
   34604:	mov	r0, r7
   34608:	add	r6, r5, r3
   3460c:	cmp	r6, #95	; 0x5f
   34610:	beq	34620 <__assert_fail@plt+0x21a30>
   34614:	ldrh	r6, [r0]
   34618:	ands	r6, r6, #8
   3461c:	beq	3462c <__assert_fail@plt+0x21a3c>
   34620:	ldr	r6, [r2]
   34624:	orr	r6, r6, r1, lsl r3
   34628:	str	r6, [r2]
   3462c:	add	r3, r3, #1
   34630:	add	r0, r0, #2
   34634:	cmp	r3, #32
   34638:	bne	34608 <__assert_fail@plt+0x21a18>
   3463c:	add	r8, r8, #1
   34640:	add	r7, r7, #64	; 0x40
   34644:	add	r5, r5, #32
   34648:	mov	r6, ip
   3464c:	cmp	r8, #8
   34650:	bne	345f0 <__assert_fail@plt+0x21a00>
   34654:	b	33414 <__assert_fail@plt+0x20824>
   34658:	ldr	r9, [sp, #16]
   3465c:	cmp	r1, #0
   34660:	beq	346b4 <__assert_fail@plt+0x21ac4>
   34664:	mov	r5, r1
   34668:	ldr	r1, [r1, #4]
   3466c:	cmp	r1, #0
   34670:	bne	34664 <__assert_fail@plt+0x21a74>
   34674:	ldr	r1, [r5, #8]
   34678:	cmp	r1, #0
   3467c:	bne	34664 <__assert_fail@plt+0x21a74>
   34680:	add	r0, r5, #20
   34684:	bl	31cdc <__assert_fail@plt+0x1f0ec>
   34688:	ldr	r0, [r5]
   3468c:	cmp	r0, #0
   34690:	beq	346b4 <__assert_fail@plt+0x21ac4>
   34694:	ldr	r1, [r0, #8]
   34698:	cmp	r1, r5
   3469c:	mov	r5, r0
   346a0:	beq	34680 <__assert_fail@plt+0x21a90>
   346a4:	cmp	r1, #0
   346a8:	mov	r5, r0
   346ac:	beq	34680 <__assert_fail@plt+0x21a90>
   346b0:	b	34664 <__assert_fail@plt+0x21a74>
   346b4:	mov	r0, #8
   346b8:	b	34464 <__assert_fail@plt+0x21874>
   346bc:	mov	r6, #3
   346c0:	ldr	sl, [sp, #40]	; 0x28
   346c4:	ldr	r0, [sp, #16]
   346c8:	str	r6, [r0]
   346cc:	ldr	r8, [sp, #32]
   346d0:	mov	r0, r4
   346d4:	bl	2bcbc <__assert_fail@plt+0x190cc>
   346d8:	mov	r0, r8
   346dc:	bl	31d6c <__assert_fail@plt+0x1f17c>
   346e0:	mov	r9, #0
   346e4:	b	33e0c <__assert_fail@plt+0x2121c>
   346e8:	ldr	sl, [sp, #40]	; 0x28
   346ec:	ldr	r8, [sp, #32]
   346f0:	mov	r0, #12
   346f4:	ldr	r1, [sp, #16]
   346f8:	str	r0, [r1]
   346fc:	b	346d0 <__assert_fail@plt+0x21ae0>
   34700:	bl	2bcbc <__assert_fail@plt+0x190cc>
   34704:	mov	r0, r6
   34708:	bl	2bcbc <__assert_fail@plt+0x190cc>
   3470c:	mov	r6, #12
   34710:	b	346c0 <__assert_fail@plt+0x21ad0>
   34714:	push	{r4, r5, r6, r7, fp, lr}
   34718:	add	fp, sp, #16
   3471c:	mov	r5, r1
   34720:	ldr	r1, [r0, #64]	; 0x40
   34724:	mov	r6, r3
   34728:	mov	r4, r2
   3472c:	mov	r7, r0
   34730:	cmp	r1, #31
   34734:	beq	3478c <__assert_fail@plt+0x21b9c>
   34738:	ldr	r0, [r7, #56]	; 0x38
   3473c:	add	r0, r0, r1, lsl #5
   34740:	add	r2, r1, #1
   34744:	mov	r1, #0
   34748:	cmp	r5, #0
   3474c:	str	r2, [r7, #64]	; 0x40
   34750:	mvn	r7, #0
   34754:	str	r1, [r0, #4]!
   34758:	str	r4, [r0, #8]
   3475c:	str	r5, [r0, #4]
   34760:	ldm	r6, {r2, r3}
   34764:	str	r7, [r0, #28]
   34768:	str	r1, [r0, #16]
   3476c:	str	r1, [r0, #12]
   34770:	bic	r1, r3, #786432	; 0xc0000
   34774:	str	r2, [r0, #20]
   34778:	str	r1, [r0, #24]
   3477c:	strne	r0, [r5]
   34780:	cmp	r4, #0
   34784:	strne	r0, [r4]
   34788:	pop	{r4, r5, r6, r7, fp, pc}
   3478c:	mov	r0, #996	; 0x3e4
   34790:	bl	2de8c <__assert_fail@plt+0x1b29c>
   34794:	cmp	r0, #0
   34798:	beq	347b4 <__assert_fail@plt+0x21bc4>
   3479c:	ldr	r1, [r7, #56]	; 0x38
   347a0:	str	r1, [r0]
   347a4:	mov	r1, #0
   347a8:	str	r1, [r7, #64]	; 0x40
   347ac:	str	r0, [r7, #56]	; 0x38
   347b0:	b	3473c <__assert_fail@plt+0x21b4c>
   347b4:	mov	r0, #0
   347b8:	pop	{r4, r5, r6, r7, fp, pc}
   347bc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   347c0:	add	fp, sp, #28
   347c4:	sub	sp, sp, #28
   347c8:	mov	sl, r1
   347cc:	mov	r9, r0
   347d0:	mov	r7, #0
   347d4:	mov	r0, #32
   347d8:	mov	r1, #1
   347dc:	mov	r8, r3
   347e0:	mov	r4, r2
   347e4:	str	r7, [sp, #16]
   347e8:	bl	2b734 <__assert_fail@plt+0x18b44>
   347ec:	ldr	r1, [fp, #12]
   347f0:	cmp	r0, #0
   347f4:	beq	349a4 <__assert_fail@plt+0x21db4>
   347f8:	mov	r5, r0
   347fc:	mov	r0, #40	; 0x28
   34800:	mov	r1, #1
   34804:	bl	2b734 <__assert_fail@plt+0x18b44>
   34808:	cmp	r0, #0
   3480c:	beq	349ac <__assert_fail@plt+0x21dbc>
   34810:	mov	r6, r0
   34814:	ldrb	r0, [r0, #16]
   34818:	ldr	r1, [fp, #8]
   3481c:	add	r3, sp, #16
   34820:	mov	r7, #0
   34824:	stm	sp, {r4, r7}
   34828:	mov	r2, r6
   3482c:	and	r0, r0, #254	; 0xfe
   34830:	orr	r0, r0, r1
   34834:	mov	r1, r5
   34838:	strb	r0, [r6, #16]
   3483c:	mov	r0, sl
   34840:	bl	34e14 <__assert_fail@plt+0x22224>
   34844:	cmp	r0, #0
   34848:	bne	349c8 <__assert_fail@plt+0x21dd8>
   3484c:	ldrb	r0, [r8]
   34850:	cmp	r0, #0
   34854:	beq	34880 <__assert_fail@plt+0x21c90>
   34858:	add	r1, r8, #1
   3485c:	mov	r2, #1
   34860:	ubfx	r3, r0, #5, #3
   34864:	and	r0, r0, #31
   34868:	ldr	r7, [r5, r3, lsl #2]
   3486c:	orr	r0, r7, r2, lsl r0
   34870:	str	r0, [r5, r3, lsl #2]
   34874:	ldrb	r0, [r1], #1
   34878:	cmp	r0, #0
   3487c:	bne	34860 <__assert_fail@plt+0x21c70>
   34880:	ldr	r0, [fp, #8]
   34884:	cmp	r0, #0
   34888:	beq	348ac <__assert_fail@plt+0x21cbc>
   3488c:	mov	r0, #0
   34890:	add	r1, r5, r0
   34894:	add	r0, r0, #16
   34898:	vld1.32	{d16-d17}, [r1]
   3489c:	cmp	r0, #32
   348a0:	vmvn	q8, q8
   348a4:	vst1.32	{d16-d17}, [r1]
   348a8:	bne	34890 <__assert_fail@plt+0x21ca0>
   348ac:	ldr	r0, [r9, #92]	; 0x5c
   348b0:	cmp	r0, #2
   348b4:	blt	348dc <__assert_fail@plt+0x21cec>
   348b8:	ldr	r0, [r9, #60]	; 0x3c
   348bc:	mov	r1, #0
   348c0:	ldr	r2, [r0, r1, lsl #2]
   348c4:	ldr	r3, [r5, r1, lsl #2]
   348c8:	and	r2, r3, r2
   348cc:	str	r2, [r5, r1, lsl #2]
   348d0:	add	r1, r1, #1
   348d4:	cmp	r1, #8
   348d8:	bne	348c0 <__assert_fail@plt+0x21cd0>
   348dc:	mov	r0, #3
   348e0:	add	r3, sp, #8
   348e4:	mov	r1, #0
   348e8:	mov	r2, #0
   348ec:	mov	r7, #0
   348f0:	str	r0, [sp, #12]
   348f4:	mov	r0, r9
   348f8:	str	r5, [sp, #8]
   348fc:	bl	34714 <__assert_fail@plt+0x21b24>
   34900:	cmp	r0, #0
   34904:	beq	34990 <__assert_fail@plt+0x21da0>
   34908:	mov	r4, r0
   3490c:	ldr	r0, [r9, #92]	; 0x5c
   34910:	cmp	r0, #2
   34914:	blt	34978 <__assert_fail@plt+0x21d88>
   34918:	mov	r0, #6
   3491c:	str	r6, [sp, #8]
   34920:	add	r3, sp, #8
   34924:	mov	r1, #0
   34928:	mov	r2, #0
   3492c:	mov	r8, #0
   34930:	str	r0, [sp, #12]
   34934:	ldrb	r0, [r9, #88]	; 0x58
   34938:	orr	r0, r0, #2
   3493c:	strb	r0, [r9, #88]	; 0x58
   34940:	mov	r0, r9
   34944:	bl	34714 <__assert_fail@plt+0x21b24>
   34948:	cmp	r0, #0
   3494c:	beq	34990 <__assert_fail@plt+0x21da0>
   34950:	mov	r2, r0
   34954:	mov	r0, #10
   34958:	add	r3, sp, #20
   3495c:	mov	r1, r4
   34960:	str	r0, [sp, #24]
   34964:	mov	r0, r9
   34968:	str	r8, [sp, #20]
   3496c:	bl	34714 <__assert_fail@plt+0x21b24>
   34970:	mov	r7, r0
   34974:	b	34984 <__assert_fail@plt+0x21d94>
   34978:	mov	r0, r6
   3497c:	bl	31d6c <__assert_fail@plt+0x1f17c>
   34980:	mov	r7, r4
   34984:	mov	r0, r7
   34988:	sub	sp, fp, #28
   3498c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   34990:	mov	r0, r5
   34994:	bl	2bcbc <__assert_fail@plt+0x190cc>
   34998:	mov	r0, r6
   3499c:	bl	31d6c <__assert_fail@plt+0x1f17c>
   349a0:	ldr	r1, [fp, #12]
   349a4:	mov	r0, #12
   349a8:	b	349c0 <__assert_fail@plt+0x21dd0>
   349ac:	mov	r0, r5
   349b0:	bl	2bcbc <__assert_fail@plt+0x190cc>
   349b4:	ldr	r1, [fp, #12]
   349b8:	mov	r0, #12
   349bc:	mov	r7, #0
   349c0:	str	r0, [r1]
   349c4:	b	34984 <__assert_fail@plt+0x21d94>
   349c8:	mov	r4, r0
   349cc:	mov	r0, r5
   349d0:	bl	2bcbc <__assert_fail@plt+0x190cc>
   349d4:	mov	r0, r6
   349d8:	bl	31d6c <__assert_fail@plt+0x1f17c>
   349dc:	ldr	r0, [fp, #12]
   349e0:	str	r4, [r0]
   349e4:	b	34984 <__assert_fail@plt+0x21d94>
   349e8:	push	{fp, lr}
   349ec:	mov	fp, sp
   349f0:	ldr	ip, [r1, #40]	; 0x28
   349f4:	ldr	r3, [r1, #56]	; 0x38
   349f8:	cmp	r3, ip
   349fc:	ble	34a78 <__assert_fail@plt+0x21e88>
   34a00:	ldr	r3, [r1, #4]
   34a04:	ldrb	lr, [r3, ip]
   34a08:	strb	lr, [r0]
   34a0c:	ldr	r3, [r1, #80]	; 0x50
   34a10:	cmp	r3, #2
   34a14:	blt	34a38 <__assert_fail@plt+0x21e48>
   34a18:	ldr	r3, [r1, #28]
   34a1c:	ldr	ip, [r1, #40]	; 0x28
   34a20:	cmp	ip, r3
   34a24:	beq	34a38 <__assert_fail@plt+0x21e48>
   34a28:	ldr	r3, [r1, #8]
   34a2c:	ldr	r3, [r3, ip, lsl #2]
   34a30:	cmn	r3, #1
   34a34:	beq	34b20 <__assert_fail@plt+0x21f30>
   34a38:	tst	r2, #1
   34a3c:	beq	34a88 <__assert_fail@plt+0x21e98>
   34a40:	cmp	lr, #92	; 0x5c
   34a44:	bne	34a88 <__assert_fail@plt+0x21e98>
   34a48:	ldr	r2, [r1, #40]	; 0x28
   34a4c:	ldr	r3, [r1, #48]	; 0x30
   34a50:	add	r2, r2, #1
   34a54:	cmp	r2, r3
   34a58:	bge	34b20 <__assert_fail@plt+0x21f30>
   34a5c:	str	r2, [r1, #40]	; 0x28
   34a60:	ldr	r1, [r1, #4]
   34a64:	ldrb	r2, [r1, r2]
   34a68:	mov	r1, #1
   34a6c:	strb	r1, [r0, #4]
   34a70:	strb	r2, [r0]
   34a74:	b	34b28 <__assert_fail@plt+0x21f38>
   34a78:	mov	r1, #2
   34a7c:	strb	r1, [r0, #4]
   34a80:	mov	r1, #0
   34a84:	b	34b28 <__assert_fail@plt+0x21f38>
   34a88:	cmp	lr, #92	; 0x5c
   34a8c:	bgt	34ae0 <__assert_fail@plt+0x21ef0>
   34a90:	cmp	lr, #45	; 0x2d
   34a94:	beq	34af8 <__assert_fail@plt+0x21f08>
   34a98:	cmp	lr, #91	; 0x5b
   34a9c:	bne	34b20 <__assert_fail@plt+0x21f30>
   34aa0:	ldr	r3, [r1, #40]	; 0x28
   34aa4:	ldr	ip, [r1, #48]	; 0x30
   34aa8:	add	r3, r3, #1
   34aac:	cmp	r3, ip
   34ab0:	bge	34b10 <__assert_fail@plt+0x21f20>
   34ab4:	ldr	r1, [r1, #4]
   34ab8:	ldrb	r1, [r1, r3]
   34abc:	cmp	r1, #61	; 0x3d
   34ac0:	strb	r1, [r0]
   34ac4:	beq	34b30 <__assert_fail@plt+0x21f40>
   34ac8:	cmp	r1, #58	; 0x3a
   34acc:	beq	34b38 <__assert_fail@plt+0x21f48>
   34ad0:	cmp	r1, #46	; 0x2e
   34ad4:	bne	34b18 <__assert_fail@plt+0x21f28>
   34ad8:	mov	r1, #26
   34adc:	b	34b44 <__assert_fail@plt+0x21f54>
   34ae0:	cmp	lr, #93	; 0x5d
   34ae4:	beq	34b00 <__assert_fail@plt+0x21f10>
   34ae8:	cmp	lr, #94	; 0x5e
   34aec:	bne	34b20 <__assert_fail@plt+0x21f30>
   34af0:	mov	r1, #25
   34af4:	b	34b04 <__assert_fail@plt+0x21f14>
   34af8:	mov	r1, #22
   34afc:	b	34b04 <__assert_fail@plt+0x21f14>
   34b00:	mov	r1, #21
   34b04:	strb	r1, [r0, #4]
   34b08:	mov	r1, #1
   34b0c:	b	34b28 <__assert_fail@plt+0x21f38>
   34b10:	mov	r1, #0
   34b14:	strb	r1, [r0]
   34b18:	mov	r1, #91	; 0x5b
   34b1c:	strb	r1, [r0]
   34b20:	mov	r1, #1
   34b24:	strb	r1, [r0, #4]
   34b28:	mov	r0, r1
   34b2c:	pop	{fp, pc}
   34b30:	mov	r1, #28
   34b34:	b	34b44 <__assert_fail@plt+0x21f54>
   34b38:	tst	r2, #4
   34b3c:	beq	34b18 <__assert_fail@plt+0x21f28>
   34b40:	mov	r1, #30
   34b44:	strb	r1, [r0, #4]
   34b48:	mov	r1, #2
   34b4c:	b	34b28 <__assert_fail@plt+0x21f38>
   34b50:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   34b54:	add	fp, sp, #24
   34b58:	sub	sp, sp, #8
   34b5c:	mov	r5, r2
   34b60:	ldr	r2, [r1, #80]	; 0x50
   34b64:	mov	r9, r0
   34b68:	ldr	r0, [r1, #40]	; 0x28
   34b6c:	cmp	r2, #1
   34b70:	beq	34be4 <__assert_fail@plt+0x21ff4>
   34b74:	ldr	r2, [r1, #28]
   34b78:	add	r6, r0, #1
   34b7c:	cmp	r6, r2
   34b80:	bge	34be4 <__assert_fail@plt+0x21ff4>
   34b84:	ldr	lr, [r1, #8]
   34b88:	sub	r4, r0, r2
   34b8c:	sub	ip, r2, r0
   34b90:	mvn	r2, #0
   34b94:	add	r6, lr, r0, lsl #2
   34b98:	ldr	r7, [r6, -r2, lsl #2]
   34b9c:	cmn	r7, #1
   34ba0:	bne	34bb4 <__assert_fail@plt+0x21fc4>
   34ba4:	sub	r2, r2, #1
   34ba8:	cmp	r4, r2
   34bac:	bne	34b98 <__assert_fail@plt+0x21fa8>
   34bb0:	b	34bc0 <__assert_fail@plt+0x21fd0>
   34bb4:	rsb	ip, r2, #0
   34bb8:	cmp	ip, #2
   34bbc:	bcc	34be4 <__assert_fail@plt+0x21ff4>
   34bc0:	mov	r2, #1
   34bc4:	str	r2, [r9]
   34bc8:	ldr	r0, [lr, r0, lsl #2]
   34bcc:	str	r0, [r9, #4]
   34bd0:	ldr	r0, [r1, #40]	; 0x28
   34bd4:	add	r0, r0, ip
   34bd8:	str	r0, [r1, #40]	; 0x28
   34bdc:	mov	r0, #0
   34be0:	b	34e0c <__assert_fail@plt+0x2221c>
   34be4:	add	r2, r0, r3
   34be8:	str	r2, [r1, #40]	; 0x28
   34bec:	ldrb	r6, [r5, #4]
   34bf0:	sub	r0, r6, #22
   34bf4:	cmp	r0, #8
   34bf8:	bhi	34dfc <__assert_fail@plt+0x2220c>
   34bfc:	add	r3, pc, #0
   34c00:	ldr	pc, [r3, r0, lsl #2]
   34c04:	ldrdeq	r4, [r3], -r4	; <UNPREDICTABLE>
   34c08:	strdeq	r4, [r3], -ip
   34c0c:	strdeq	r4, [r3], -ip
   34c10:	strdeq	r4, [r3], -ip
   34c14:	andeq	r4, r3, r8, lsr #24
   34c18:	strdeq	r4, [r3], -ip
   34c1c:	andeq	r4, r3, r8, lsr #24
   34c20:	strdeq	r4, [r3], -ip
   34c24:	andeq	r4, r3, r8, lsr #24
   34c28:	ldr	r3, [r1, #56]	; 0x38
   34c2c:	mov	r0, #7
   34c30:	cmp	r3, r2
   34c34:	ble	34e0c <__assert_fail@plt+0x2221c>
   34c38:	ldrb	r3, [r5]
   34c3c:	mov	r2, #0
   34c40:	uxtb	r7, r6
   34c44:	cmp	r7, #30
   34c48:	bne	34c58 <__assert_fail@plt+0x22068>
   34c4c:	ldrb	r7, [r1, #75]	; 0x4b
   34c50:	cmp	r7, #0
   34c54:	bne	34cb0 <__assert_fail@plt+0x220c0>
   34c58:	ldr	r4, [r1, #40]	; 0x28
   34c5c:	ldr	r7, [r1, #4]
   34c60:	add	r6, r4, #1
   34c64:	str	r6, [r1, #40]	; 0x28
   34c68:	ldrb	r4, [r7, r4]
   34c6c:	ldr	r7, [r1, #56]	; 0x38
   34c70:	cmp	r7, r6
   34c74:	ble	34e0c <__assert_fail@plt+0x2221c>
   34c78:	uxtb	r7, r4
   34c7c:	cmp	r7, r3
   34c80:	bne	34c94 <__assert_fail@plt+0x220a4>
   34c84:	ldr	r7, [r1, #4]
   34c88:	ldrb	r7, [r7, r6]
   34c8c:	cmp	r7, #93	; 0x5d
   34c90:	beq	34d88 <__assert_fail@plt+0x22198>
   34c94:	ldr	r7, [r9, #4]
   34c98:	strb	r4, [r7, r2]
   34c9c:	add	r2, r2, #1
   34ca0:	cmp	r2, #32
   34ca4:	beq	34e0c <__assert_fail@plt+0x2221c>
   34ca8:	ldrb	r6, [r5, #4]
   34cac:	b	34c40 <__assert_fail@plt+0x22050>
   34cb0:	ldrb	r7, [r1, #76]	; 0x4c
   34cb4:	cmp	r7, #0
   34cb8:	beq	34d54 <__assert_fail@plt+0x22164>
   34cbc:	ldr	lr, [r1, #28]
   34cc0:	ldr	ip, [r1, #40]	; 0x28
   34cc4:	cmp	lr, ip
   34cc8:	beq	34cdc <__assert_fail@plt+0x220ec>
   34ccc:	ldr	r4, [r1, #8]
   34cd0:	ldr	r4, [r4, ip, lsl #2]
   34cd4:	cmn	r4, #1
   34cd8:	beq	34d74 <__assert_fail@plt+0x22184>
   34cdc:	ldr	r6, [r1, #12]
   34ce0:	ldr	r7, [r1, #24]
   34ce4:	ldr	r4, [r1]
   34ce8:	ldr	r6, [r6, ip, lsl #2]
   34cec:	add	r6, r7, r6
   34cf0:	add	r4, r4, r6
   34cf4:	ldrsb	r4, [r4]
   34cf8:	cmn	r4, #1
   34cfc:	ble	34d74 <__assert_fail@plt+0x22184>
   34d00:	ldr	r7, [r1, #80]	; 0x50
   34d04:	mov	r6, #1
   34d08:	cmp	r7, #1
   34d0c:	beq	34d48 <__assert_fail@plt+0x22158>
   34d10:	add	r7, ip, #1
   34d14:	cmp	r7, lr
   34d18:	bge	34d48 <__assert_fail@plt+0x22158>
   34d1c:	ldr	r6, [r1, #8]
   34d20:	sub	lr, lr, ip
   34d24:	add	r8, r6, ip, lsl #2
   34d28:	mov	r6, #1
   34d2c:	ldr	r7, [r8, r6, lsl #2]
   34d30:	cmn	r7, #1
   34d34:	bne	34d48 <__assert_fail@plt+0x22158>
   34d38:	add	r6, r6, #1
   34d3c:	cmp	lr, r6
   34d40:	bne	34d2c <__assert_fail@plt+0x2213c>
   34d44:	mov	r6, lr
   34d48:	add	r6, r6, ip
   34d4c:	str	r6, [r1, #40]	; 0x28
   34d50:	b	34c6c <__assert_fail@plt+0x2207c>
   34d54:	ldr	r7, [r1, #40]	; 0x28
   34d58:	ldr	r4, [r1, #24]
   34d5c:	ldr	ip, [r1]
   34d60:	add	r6, r7, #1
   34d64:	add	r7, r7, r4
   34d68:	str	r6, [r1, #40]	; 0x28
   34d6c:	ldrb	r4, [ip, r7]
   34d70:	b	34c6c <__assert_fail@plt+0x2207c>
   34d74:	add	r6, ip, #1
   34d78:	str	r6, [r1, #40]	; 0x28
   34d7c:	ldr	r7, [r1, #4]
   34d80:	ldrb	r4, [r7, ip]
   34d84:	b	34c6c <__assert_fail@plt+0x2207c>
   34d88:	add	r0, r6, #1
   34d8c:	str	r0, [r1, #40]	; 0x28
   34d90:	mov	r0, #0
   34d94:	ldr	r1, [r9, #4]
   34d98:	strb	r0, [r1, r2]
   34d9c:	ldrb	r1, [r5, #4]
   34da0:	cmp	r1, #30
   34da4:	beq	34dc0 <__assert_fail@plt+0x221d0>
   34da8:	cmp	r1, #28
   34dac:	beq	34dc8 <__assert_fail@plt+0x221d8>
   34db0:	cmp	r1, #26
   34db4:	moveq	r1, #3
   34db8:	streq	r1, [r9]
   34dbc:	b	34e0c <__assert_fail@plt+0x2221c>
   34dc0:	mov	r1, #4
   34dc4:	b	34dcc <__assert_fail@plt+0x221dc>
   34dc8:	mov	r1, #2
   34dcc:	str	r1, [r9]
   34dd0:	b	34e0c <__assert_fail@plt+0x2221c>
   34dd4:	ldr	r0, [fp, #12]
   34dd8:	cmp	r0, #0
   34ddc:	bne	34dfc <__assert_fail@plt+0x2220c>
   34de0:	ldr	r2, [fp, #8]
   34de4:	mov	r0, sp
   34de8:	bl	349e8 <__assert_fail@plt+0x21df8>
   34dec:	ldrb	r1, [sp, #4]
   34df0:	mov	r0, #11
   34df4:	cmp	r1, #21
   34df8:	bne	34e0c <__assert_fail@plt+0x2221c>
   34dfc:	mov	r0, #0
   34e00:	str	r0, [r9]
   34e04:	ldrb	r1, [r5]
   34e08:	strb	r1, [r9, #4]
   34e0c:	sub	sp, fp, #24
   34e10:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   34e14:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   34e18:	add	fp, sp, #24
   34e1c:	mov	r8, r0
   34e20:	ldrb	r0, [fp, #14]
   34e24:	ldr	r6, [fp, #8]
   34e28:	mov	r5, r3
   34e2c:	mov	r7, r2
   34e30:	mov	r4, r1
   34e34:	tst	r0, #64	; 0x40
   34e38:	beq	34e74 <__assert_fail@plt+0x22284>
   34e3c:	movw	r1, #13372	; 0x343c
   34e40:	mov	r0, r6
   34e44:	movt	r1, #4
   34e48:	bl	124f4 <strcmp@plt>
   34e4c:	cmp	r0, #0
   34e50:	beq	34e6c <__assert_fail@plt+0x2227c>
   34e54:	movw	r1, #13378	; 0x3442
   34e58:	mov	r0, r6
   34e5c:	movt	r1, #4
   34e60:	bl	124f4 <strcmp@plt>
   34e64:	cmp	r0, #0
   34e68:	bne	34e74 <__assert_fail@plt+0x22284>
   34e6c:	movw	r6, #13384	; 0x3448
   34e70:	movt	r6, #4
   34e74:	ldr	r0, [r5]
   34e78:	ldr	r1, [r7, #36]	; 0x24
   34e7c:	cmp	r0, r1
   34e80:	beq	35374 <__assert_fail@plt+0x22784>
   34e84:	mov	r0, r6
   34e88:	bl	12494 <wctype@plt>
   34e8c:	ldr	r2, [r7, #36]	; 0x24
   34e90:	ldr	r1, [r7, #12]
   34e94:	add	r3, r2, #1
   34e98:	str	r3, [r7, #36]	; 0x24
   34e9c:	str	r0, [r1, r2, lsl #2]
   34ea0:	movw	r1, #13358	; 0x342e
   34ea4:	mov	r0, r6
   34ea8:	movt	r1, #4
   34eac:	bl	124f4 <strcmp@plt>
   34eb0:	cmp	r0, #0
   34eb4:	beq	35018 <__assert_fail@plt+0x22428>
   34eb8:	movw	r1, #13390	; 0x344e
   34ebc:	mov	r0, r6
   34ec0:	movt	r1, #4
   34ec4:	bl	124f4 <strcmp@plt>
   34ec8:	cmp	r0, #0
   34ecc:	beq	35064 <__assert_fail@plt+0x22474>
   34ed0:	movw	r1, #13378	; 0x3442
   34ed4:	mov	r0, r6
   34ed8:	movt	r1, #4
   34edc:	bl	124f4 <strcmp@plt>
   34ee0:	cmp	r0, #0
   34ee4:	beq	350b0 <__assert_fail@plt+0x224c0>
   34ee8:	movw	r1, #13366	; 0x3436
   34eec:	mov	r0, r6
   34ef0:	movt	r1, #4
   34ef4:	bl	124f4 <strcmp@plt>
   34ef8:	cmp	r0, #0
   34efc:	beq	350fc <__assert_fail@plt+0x2250c>
   34f00:	movw	r1, #13384	; 0x3448
   34f04:	mov	r0, r6
   34f08:	movt	r1, #4
   34f0c:	bl	124f4 <strcmp@plt>
   34f10:	cmp	r0, #0
   34f14:	beq	35148 <__assert_fail@plt+0x22558>
   34f18:	movw	r1, #13415	; 0x3467
   34f1c:	mov	r0, r6
   34f20:	movt	r1, #4
   34f24:	bl	124f4 <strcmp@plt>
   34f28:	cmp	r0, #0
   34f2c:	beq	35194 <__assert_fail@plt+0x225a4>
   34f30:	movw	r1, #57576	; 0xe0e8
   34f34:	mov	r0, r6
   34f38:	movt	r1, #3
   34f3c:	bl	124f4 <strcmp@plt>
   34f40:	cmp	r0, #0
   34f44:	beq	351e4 <__assert_fail@plt+0x225f4>
   34f48:	movw	r1, #13372	; 0x343c
   34f4c:	mov	r0, r6
   34f50:	movt	r1, #4
   34f54:	bl	124f4 <strcmp@plt>
   34f58:	cmp	r0, #0
   34f5c:	beq	35234 <__assert_fail@plt+0x22644>
   34f60:	movw	r1, #13396	; 0x3454
   34f64:	mov	r0, r6
   34f68:	movt	r1, #4
   34f6c:	bl	124f4 <strcmp@plt>
   34f70:	cmp	r0, #0
   34f74:	beq	35284 <__assert_fail@plt+0x22694>
   34f78:	movw	r1, #13402	; 0x345a
   34f7c:	mov	r0, r6
   34f80:	movt	r1, #4
   34f84:	bl	124f4 <strcmp@plt>
   34f88:	cmp	r0, #0
   34f8c:	beq	352d4 <__assert_fail@plt+0x226e4>
   34f90:	movw	r1, #13408	; 0x3460
   34f94:	mov	r0, r6
   34f98:	movt	r1, #4
   34f9c:	bl	124f4 <strcmp@plt>
   34fa0:	cmp	r0, #0
   34fa4:	beq	35324 <__assert_fail@plt+0x22734>
   34fa8:	movw	r1, #13414	; 0x3466
   34fac:	mov	r0, r6
   34fb0:	movt	r1, #4
   34fb4:	bl	124f4 <strcmp@plt>
   34fb8:	mov	r1, r0
   34fbc:	mov	r0, #4
   34fc0:	cmp	r1, #0
   34fc4:	bne	35370 <__assert_fail@plt+0x22780>
   34fc8:	bl	1286c <__ctype_b_loc@plt>
   34fcc:	ldr	r1, [r0]
   34fd0:	mov	r2, #0
   34fd4:	mov	r3, #1
   34fd8:	cmp	r8, #0
   34fdc:	bne	355d8 <__assert_fail@plt+0x229e8>
   34fe0:	ldrb	r0, [r1, #1]
   34fe4:	tst	r0, #16
   34fe8:	beq	35000 <__assert_fail@plt+0x22410>
   34fec:	ubfx	r0, r2, #5, #3
   34ff0:	and	r6, r2, #31
   34ff4:	ldr	r7, [r4, r0, lsl #2]
   34ff8:	orr	r7, r7, r3, lsl r6
   34ffc:	str	r7, [r4, r0, lsl #2]
   35000:	add	r2, r2, #1
   35004:	add	r1, r1, #2
   35008:	mov	r0, #0
   3500c:	cmp	r2, #256	; 0x100
   35010:	bne	34fe0 <__assert_fail@plt+0x223f0>
   35014:	b	35370 <__assert_fail@plt+0x22780>
   35018:	bl	1286c <__ctype_b_loc@plt>
   3501c:	ldr	r1, [r0]
   35020:	cmp	r8, #0
   35024:	bne	35414 <__assert_fail@plt+0x22824>
   35028:	mov	r0, #0
   3502c:	mov	r2, #1
   35030:	ldrb	r3, [r1]
   35034:	tst	r3, #8
   35038:	beq	35050 <__assert_fail@plt+0x22460>
   3503c:	ubfx	r3, r0, #5, #3
   35040:	and	r6, r0, #31
   35044:	ldr	r7, [r4, r3, lsl #2]
   35048:	orr	r7, r7, r2, lsl r6
   3504c:	str	r7, [r4, r3, lsl #2]
   35050:	add	r0, r0, #1
   35054:	add	r1, r1, #2
   35058:	cmp	r0, #256	; 0x100
   3505c:	bne	35030 <__assert_fail@plt+0x22440>
   35060:	b	351dc <__assert_fail@plt+0x225ec>
   35064:	bl	1286c <__ctype_b_loc@plt>
   35068:	ldr	r1, [r0]
   3506c:	cmp	r8, #0
   35070:	bne	35494 <__assert_fail@plt+0x228a4>
   35074:	mov	r0, #0
   35078:	mov	r2, #1
   3507c:	ldrb	r3, [r1]
   35080:	tst	r3, #2
   35084:	beq	3509c <__assert_fail@plt+0x224ac>
   35088:	ubfx	r3, r0, #5, #3
   3508c:	and	r6, r0, #31
   35090:	ldr	r7, [r4, r3, lsl #2]
   35094:	orr	r7, r7, r2, lsl r6
   35098:	str	r7, [r4, r3, lsl #2]
   3509c:	add	r0, r0, #1
   350a0:	add	r1, r1, #2
   350a4:	cmp	r0, #256	; 0x100
   350a8:	bne	3507c <__assert_fail@plt+0x2248c>
   350ac:	b	351dc <__assert_fail@plt+0x225ec>
   350b0:	bl	1286c <__ctype_b_loc@plt>
   350b4:	ldr	r1, [r0]
   350b8:	cmp	r8, #0
   350bc:	bne	35514 <__assert_fail@plt+0x22924>
   350c0:	mov	r0, #0
   350c4:	mov	r2, #1
   350c8:	ldrb	r3, [r1, #1]
   350cc:	tst	r3, #2
   350d0:	beq	350e8 <__assert_fail@plt+0x224f8>
   350d4:	ubfx	r3, r0, #5, #3
   350d8:	and	r6, r0, #31
   350dc:	ldr	r7, [r4, r3, lsl #2]
   350e0:	orr	r7, r7, r2, lsl r6
   350e4:	str	r7, [r4, r3, lsl #2]
   350e8:	add	r0, r0, #1
   350ec:	add	r1, r1, #2
   350f0:	cmp	r0, #256	; 0x100
   350f4:	bne	350c8 <__assert_fail@plt+0x224d8>
   350f8:	b	351dc <__assert_fail@plt+0x225ec>
   350fc:	bl	1286c <__ctype_b_loc@plt>
   35100:	ldr	r1, [r0]
   35104:	cmp	r8, #0
   35108:	bne	35594 <__assert_fail@plt+0x229a4>
   3510c:	mov	r0, #0
   35110:	mov	r2, #1
   35114:	ldrb	r3, [r1, #1]
   35118:	tst	r3, #32
   3511c:	beq	35134 <__assert_fail@plt+0x22544>
   35120:	ubfx	r3, r0, #5, #3
   35124:	and	r6, r0, #31
   35128:	ldr	r7, [r4, r3, lsl #2]
   3512c:	orr	r7, r7, r2, lsl r6
   35130:	str	r7, [r4, r3, lsl #2]
   35134:	add	r0, r0, #1
   35138:	add	r1, r1, #2
   3513c:	cmp	r0, #256	; 0x100
   35140:	bne	35114 <__assert_fail@plt+0x22524>
   35144:	b	351dc <__assert_fail@plt+0x225ec>
   35148:	bl	1286c <__ctype_b_loc@plt>
   3514c:	ldr	r1, [r0]
   35150:	cmp	r8, #0
   35154:	bne	35614 <__assert_fail@plt+0x22a24>
   35158:	mov	r0, #0
   3515c:	mov	r2, #1
   35160:	ldrb	r3, [r1, #1]
   35164:	tst	r3, #4
   35168:	beq	35180 <__assert_fail@plt+0x22590>
   3516c:	ubfx	r3, r0, #5, #3
   35170:	and	r6, r0, #31
   35174:	ldr	r7, [r4, r3, lsl #2]
   35178:	orr	r7, r7, r2, lsl r6
   3517c:	str	r7, [r4, r3, lsl #2]
   35180:	add	r0, r0, #1
   35184:	add	r1, r1, #2
   35188:	cmp	r0, #256	; 0x100
   3518c:	bne	35160 <__assert_fail@plt+0x22570>
   35190:	b	351dc <__assert_fail@plt+0x225ec>
   35194:	bl	1286c <__ctype_b_loc@plt>
   35198:	ldr	r1, [r0]
   3519c:	cmp	r8, #0
   351a0:	bne	35658 <__assert_fail@plt+0x22a68>
   351a4:	mov	r0, #0
   351a8:	mov	r2, #1
   351ac:	ldrb	r3, [r1, #1]
   351b0:	tst	r3, #8
   351b4:	beq	351cc <__assert_fail@plt+0x225dc>
   351b8:	ubfx	r3, r0, #5, #3
   351bc:	and	r6, r0, #31
   351c0:	ldr	r7, [r4, r3, lsl #2]
   351c4:	orr	r7, r7, r2, lsl r6
   351c8:	str	r7, [r4, r3, lsl #2]
   351cc:	add	r0, r0, #1
   351d0:	add	r1, r1, #2
   351d4:	cmp	r0, #256	; 0x100
   351d8:	bne	351ac <__assert_fail@plt+0x225bc>
   351dc:	mov	r0, #0
   351e0:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   351e4:	bl	1286c <__ctype_b_loc@plt>
   351e8:	ldr	r1, [r0]
   351ec:	mov	r2, #0
   351f0:	mov	r3, #1
   351f4:	cmp	r8, #0
   351f8:	bne	3539c <__assert_fail@plt+0x227ac>
   351fc:	ldrb	r0, [r1, #1]
   35200:	tst	r0, #64	; 0x40
   35204:	beq	3521c <__assert_fail@plt+0x2262c>
   35208:	ubfx	r0, r2, #5, #3
   3520c:	and	r6, r2, #31
   35210:	ldr	r7, [r4, r0, lsl #2]
   35214:	orr	r7, r7, r3, lsl r6
   35218:	str	r7, [r4, r0, lsl #2]
   3521c:	add	r2, r2, #1
   35220:	add	r1, r1, #2
   35224:	mov	r0, #0
   35228:	cmp	r2, #256	; 0x100
   3522c:	bne	351fc <__assert_fail@plt+0x2260c>
   35230:	b	35370 <__assert_fail@plt+0x22780>
   35234:	bl	1286c <__ctype_b_loc@plt>
   35238:	ldr	r1, [r0]
   3523c:	mov	r2, #0
   35240:	mov	r3, #1
   35244:	cmp	r8, #0
   35248:	bne	353d8 <__assert_fail@plt+0x227e8>
   3524c:	ldrb	r0, [r1, #1]
   35250:	tst	r0, #1
   35254:	beq	3526c <__assert_fail@plt+0x2267c>
   35258:	ubfx	r0, r2, #5, #3
   3525c:	and	r6, r2, #31
   35260:	ldr	r7, [r4, r0, lsl #2]
   35264:	orr	r7, r7, r3, lsl r6
   35268:	str	r7, [r4, r0, lsl #2]
   3526c:	add	r2, r2, #1
   35270:	add	r1, r1, #2
   35274:	mov	r0, #0
   35278:	cmp	r2, #256	; 0x100
   3527c:	bne	3524c <__assert_fail@plt+0x2265c>
   35280:	b	35370 <__assert_fail@plt+0x22780>
   35284:	bl	1286c <__ctype_b_loc@plt>
   35288:	ldr	r1, [r0]
   3528c:	mov	r2, #0
   35290:	mov	r3, #1
   35294:	cmp	r8, #0
   35298:	bne	35458 <__assert_fail@plt+0x22868>
   3529c:	ldrb	r0, [r1]
   352a0:	tst	r0, #1
   352a4:	beq	352bc <__assert_fail@plt+0x226cc>
   352a8:	ubfx	r0, r2, #5, #3
   352ac:	and	r6, r2, #31
   352b0:	ldr	r7, [r4, r0, lsl #2]
   352b4:	orr	r7, r7, r3, lsl r6
   352b8:	str	r7, [r4, r0, lsl #2]
   352bc:	add	r2, r2, #1
   352c0:	add	r1, r1, #2
   352c4:	mov	r0, #0
   352c8:	cmp	r2, #256	; 0x100
   352cc:	bne	3529c <__assert_fail@plt+0x226ac>
   352d0:	b	35370 <__assert_fail@plt+0x22780>
   352d4:	bl	1286c <__ctype_b_loc@plt>
   352d8:	ldr	r1, [r0]
   352dc:	mov	r2, #0
   352e0:	mov	r3, #1
   352e4:	cmp	r8, #0
   352e8:	bne	354d8 <__assert_fail@plt+0x228e8>
   352ec:	ldrsh	r0, [r1]
   352f0:	cmn	r0, #1
   352f4:	bgt	3530c <__assert_fail@plt+0x2271c>
   352f8:	ubfx	r0, r2, #5, #3
   352fc:	and	r6, r2, #31
   35300:	ldr	r7, [r4, r0, lsl #2]
   35304:	orr	r7, r7, r3, lsl r6
   35308:	str	r7, [r4, r0, lsl #2]
   3530c:	add	r2, r2, #1
   35310:	add	r1, r1, #2
   35314:	mov	r0, #0
   35318:	cmp	r2, #256	; 0x100
   3531c:	bne	352ec <__assert_fail@plt+0x226fc>
   35320:	b	35370 <__assert_fail@plt+0x22780>
   35324:	bl	1286c <__ctype_b_loc@plt>
   35328:	ldr	r1, [r0]
   3532c:	mov	r2, #0
   35330:	mov	r3, #1
   35334:	cmp	r8, #0
   35338:	bne	35558 <__assert_fail@plt+0x22968>
   3533c:	ldrb	r0, [r1]
   35340:	tst	r0, #4
   35344:	beq	3535c <__assert_fail@plt+0x2276c>
   35348:	ubfx	r0, r2, #5, #3
   3534c:	and	r6, r2, #31
   35350:	ldr	r7, [r4, r0, lsl #2]
   35354:	orr	r7, r7, r3, lsl r6
   35358:	str	r7, [r4, r0, lsl #2]
   3535c:	add	r2, r2, #1
   35360:	add	r1, r1, #2
   35364:	mov	r0, #0
   35368:	cmp	r2, #256	; 0x100
   3536c:	bne	3533c <__assert_fail@plt+0x2274c>
   35370:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   35374:	mov	r1, #1
   35378:	orr	r9, r1, r0, lsl #1
   3537c:	ldr	r0, [r7, #12]
   35380:	lsl	r1, r9, #2
   35384:	bl	2e984 <__assert_fail@plt+0x1bd94>
   35388:	cmp	r0, #0
   3538c:	beq	3569c <__assert_fail@plt+0x22aac>
   35390:	str	r0, [r7, #12]
   35394:	str	r9, [r5]
   35398:	b	34e84 <__assert_fail@plt+0x22294>
   3539c:	ldrb	r0, [r1, #1]
   353a0:	tst	r0, #64	; 0x40
   353a4:	beq	353c0 <__assert_fail@plt+0x227d0>
   353a8:	ldrb	r0, [r8, r2]
   353ac:	ubfx	r7, r0, #5, #3
   353b0:	and	r0, r0, #31
   353b4:	ldr	r6, [r4, r7, lsl #2]
   353b8:	orr	r0, r6, r3, lsl r0
   353bc:	str	r0, [r4, r7, lsl #2]
   353c0:	add	r2, r2, #1
   353c4:	add	r1, r1, #2
   353c8:	mov	r0, #0
   353cc:	cmp	r2, #256	; 0x100
   353d0:	bne	3539c <__assert_fail@plt+0x227ac>
   353d4:	b	35370 <__assert_fail@plt+0x22780>
   353d8:	ldrb	r0, [r1, #1]
   353dc:	tst	r0, #1
   353e0:	beq	353fc <__assert_fail@plt+0x2280c>
   353e4:	ldrb	r0, [r8, r2]
   353e8:	ubfx	r7, r0, #5, #3
   353ec:	and	r0, r0, #31
   353f0:	ldr	r6, [r4, r7, lsl #2]
   353f4:	orr	r0, r6, r3, lsl r0
   353f8:	str	r0, [r4, r7, lsl #2]
   353fc:	add	r2, r2, #1
   35400:	add	r1, r1, #2
   35404:	mov	r0, #0
   35408:	cmp	r2, #256	; 0x100
   3540c:	bne	353d8 <__assert_fail@plt+0x227e8>
   35410:	b	35370 <__assert_fail@plt+0x22780>
   35414:	mov	r2, #0
   35418:	mov	r3, #1
   3541c:	ldrb	r0, [r1]
   35420:	tst	r0, #8
   35424:	beq	35440 <__assert_fail@plt+0x22850>
   35428:	ldrb	r0, [r8, r2]
   3542c:	ubfx	r7, r0, #5, #3
   35430:	and	r0, r0, #31
   35434:	ldr	r6, [r4, r7, lsl #2]
   35438:	orr	r0, r6, r3, lsl r0
   3543c:	str	r0, [r4, r7, lsl #2]
   35440:	add	r2, r2, #1
   35444:	add	r1, r1, #2
   35448:	mov	r0, #0
   3544c:	cmp	r2, #256	; 0x100
   35450:	bne	3541c <__assert_fail@plt+0x2282c>
   35454:	b	35370 <__assert_fail@plt+0x22780>
   35458:	ldrb	r0, [r1]
   3545c:	tst	r0, #1
   35460:	beq	3547c <__assert_fail@plt+0x2288c>
   35464:	ldrb	r0, [r8, r2]
   35468:	ubfx	r7, r0, #5, #3
   3546c:	and	r0, r0, #31
   35470:	ldr	r6, [r4, r7, lsl #2]
   35474:	orr	r0, r6, r3, lsl r0
   35478:	str	r0, [r4, r7, lsl #2]
   3547c:	add	r2, r2, #1
   35480:	add	r1, r1, #2
   35484:	mov	r0, #0
   35488:	cmp	r2, #256	; 0x100
   3548c:	bne	35458 <__assert_fail@plt+0x22868>
   35490:	b	35370 <__assert_fail@plt+0x22780>
   35494:	mov	r2, #0
   35498:	mov	r3, #1
   3549c:	ldrb	r0, [r1]
   354a0:	tst	r0, #2
   354a4:	beq	354c0 <__assert_fail@plt+0x228d0>
   354a8:	ldrb	r0, [r8, r2]
   354ac:	ubfx	r7, r0, #5, #3
   354b0:	and	r0, r0, #31
   354b4:	ldr	r6, [r4, r7, lsl #2]
   354b8:	orr	r0, r6, r3, lsl r0
   354bc:	str	r0, [r4, r7, lsl #2]
   354c0:	add	r2, r2, #1
   354c4:	add	r1, r1, #2
   354c8:	mov	r0, #0
   354cc:	cmp	r2, #256	; 0x100
   354d0:	bne	3549c <__assert_fail@plt+0x228ac>
   354d4:	b	35370 <__assert_fail@plt+0x22780>
   354d8:	ldrsh	r0, [r1]
   354dc:	cmn	r0, #1
   354e0:	bgt	354fc <__assert_fail@plt+0x2290c>
   354e4:	ldrb	r0, [r8, r2]
   354e8:	ubfx	r7, r0, #5, #3
   354ec:	and	r0, r0, #31
   354f0:	ldr	r6, [r4, r7, lsl #2]
   354f4:	orr	r0, r6, r3, lsl r0
   354f8:	str	r0, [r4, r7, lsl #2]
   354fc:	add	r2, r2, #1
   35500:	add	r1, r1, #2
   35504:	mov	r0, #0
   35508:	cmp	r2, #256	; 0x100
   3550c:	bne	354d8 <__assert_fail@plt+0x228e8>
   35510:	b	35370 <__assert_fail@plt+0x22780>
   35514:	mov	r2, #0
   35518:	mov	r3, #1
   3551c:	ldrb	r0, [r1, #1]
   35520:	tst	r0, #2
   35524:	beq	35540 <__assert_fail@plt+0x22950>
   35528:	ldrb	r0, [r8, r2]
   3552c:	ubfx	r7, r0, #5, #3
   35530:	and	r0, r0, #31
   35534:	ldr	r6, [r4, r7, lsl #2]
   35538:	orr	r0, r6, r3, lsl r0
   3553c:	str	r0, [r4, r7, lsl #2]
   35540:	add	r2, r2, #1
   35544:	add	r1, r1, #2
   35548:	mov	r0, #0
   3554c:	cmp	r2, #256	; 0x100
   35550:	bne	3551c <__assert_fail@plt+0x2292c>
   35554:	b	35370 <__assert_fail@plt+0x22780>
   35558:	ldrb	r0, [r1]
   3555c:	tst	r0, #4
   35560:	beq	3557c <__assert_fail@plt+0x2298c>
   35564:	ldrb	r0, [r8, r2]
   35568:	ubfx	r7, r0, #5, #3
   3556c:	and	r0, r0, #31
   35570:	ldr	r6, [r4, r7, lsl #2]
   35574:	orr	r0, r6, r3, lsl r0
   35578:	str	r0, [r4, r7, lsl #2]
   3557c:	add	r2, r2, #1
   35580:	add	r1, r1, #2
   35584:	mov	r0, #0
   35588:	cmp	r2, #256	; 0x100
   3558c:	bne	35558 <__assert_fail@plt+0x22968>
   35590:	b	35370 <__assert_fail@plt+0x22780>
   35594:	mov	r2, #0
   35598:	mov	r3, #1
   3559c:	ldrb	r0, [r1, #1]
   355a0:	tst	r0, #32
   355a4:	beq	355c0 <__assert_fail@plt+0x229d0>
   355a8:	ldrb	r0, [r8, r2]
   355ac:	ubfx	r7, r0, #5, #3
   355b0:	and	r0, r0, #31
   355b4:	ldr	r6, [r4, r7, lsl #2]
   355b8:	orr	r0, r6, r3, lsl r0
   355bc:	str	r0, [r4, r7, lsl #2]
   355c0:	add	r2, r2, #1
   355c4:	add	r1, r1, #2
   355c8:	mov	r0, #0
   355cc:	cmp	r2, #256	; 0x100
   355d0:	bne	3559c <__assert_fail@plt+0x229ac>
   355d4:	b	35370 <__assert_fail@plt+0x22780>
   355d8:	ldrb	r0, [r1, #1]
   355dc:	tst	r0, #16
   355e0:	beq	355fc <__assert_fail@plt+0x22a0c>
   355e4:	ldrb	r0, [r8, r2]
   355e8:	ubfx	r7, r0, #5, #3
   355ec:	and	r0, r0, #31
   355f0:	ldr	r6, [r4, r7, lsl #2]
   355f4:	orr	r0, r6, r3, lsl r0
   355f8:	str	r0, [r4, r7, lsl #2]
   355fc:	add	r2, r2, #1
   35600:	add	r1, r1, #2
   35604:	mov	r0, #0
   35608:	cmp	r2, #256	; 0x100
   3560c:	bne	355d8 <__assert_fail@plt+0x229e8>
   35610:	b	35370 <__assert_fail@plt+0x22780>
   35614:	mov	r2, #0
   35618:	mov	r3, #1
   3561c:	ldrb	r0, [r1, #1]
   35620:	tst	r0, #4
   35624:	beq	35640 <__assert_fail@plt+0x22a50>
   35628:	ldrb	r0, [r8, r2]
   3562c:	ubfx	r7, r0, #5, #3
   35630:	and	r0, r0, #31
   35634:	ldr	r6, [r4, r7, lsl #2]
   35638:	orr	r0, r6, r3, lsl r0
   3563c:	str	r0, [r4, r7, lsl #2]
   35640:	add	r2, r2, #1
   35644:	add	r1, r1, #2
   35648:	mov	r0, #0
   3564c:	cmp	r2, #256	; 0x100
   35650:	bne	3561c <__assert_fail@plt+0x22a2c>
   35654:	b	35370 <__assert_fail@plt+0x22780>
   35658:	mov	r2, #0
   3565c:	mov	r3, #1
   35660:	ldrb	r0, [r1, #1]
   35664:	tst	r0, #8
   35668:	beq	35684 <__assert_fail@plt+0x22a94>
   3566c:	ldrb	r0, [r8, r2]
   35670:	ubfx	r7, r0, #5, #3
   35674:	and	r0, r0, #31
   35678:	ldr	r6, [r4, r7, lsl #2]
   3567c:	orr	r0, r6, r3, lsl r0
   35680:	str	r0, [r4, r7, lsl #2]
   35684:	add	r2, r2, #1
   35688:	add	r1, r1, #2
   3568c:	mov	r0, #0
   35690:	cmp	r2, #256	; 0x100
   35694:	bne	35660 <__assert_fail@plt+0x22a70>
   35698:	b	35370 <__assert_fail@plt+0x22780>
   3569c:	mov	r0, #12
   356a0:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   356a4:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   356a8:	add	fp, sp, #24
   356ac:	mov	r5, r1
   356b0:	mov	r4, r2
   356b4:	mov	r6, r0
   356b8:	mvn	r1, #0
   356bc:	movw	r8, #32816	; 0x8030
   356c0:	mov	r7, r1
   356c4:	mov	r0, r5
   356c8:	mov	r1, r6
   356cc:	mov	r2, r4
   356d0:	bl	328f4 <__assert_fail@plt+0x1fd04>
   356d4:	ldr	r1, [r6, #40]	; 0x28
   356d8:	add	r0, r1, r0
   356dc:	str	r0, [r6, #40]	; 0x28
   356e0:	ldrb	r2, [r5, #4]
   356e4:	cmp	r2, #24
   356e8:	beq	35748 <__assert_fail@plt+0x22b58>
   356ec:	cmp	r2, #2
   356f0:	beq	35744 <__assert_fail@plt+0x22b54>
   356f4:	ldrb	r0, [r5]
   356f8:	cmp	r0, #44	; 0x2c
   356fc:	beq	35748 <__assert_fail@plt+0x22b58>
   35700:	mvn	r1, #1
   35704:	cmp	r0, #48	; 0x30
   35708:	bcc	356c0 <__assert_fail@plt+0x22ad0>
   3570c:	cmp	r2, #1
   35710:	bne	356c0 <__assert_fail@plt+0x22ad0>
   35714:	cmn	r7, #2
   35718:	beq	356c0 <__assert_fail@plt+0x22ad0>
   3571c:	cmp	r0, #57	; 0x39
   35720:	bhi	356c0 <__assert_fail@plt+0x22ad0>
   35724:	cmn	r7, #1
   35728:	beq	3573c <__assert_fail@plt+0x22b4c>
   3572c:	add	r1, r7, r7, lsl #2
   35730:	add	r0, r0, r1, lsl #1
   35734:	cmp	r0, r8
   35738:	movge	r0, r8
   3573c:	sub	r1, r0, #48	; 0x30
   35740:	b	356c0 <__assert_fail@plt+0x22ad0>
   35744:	mvn	r7, #1
   35748:	mov	r0, r7
   3574c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   35750:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   35754:	add	fp, sp, #24
   35758:	sub	sp, sp, #8
   3575c:	mov	r3, r0
   35760:	mov	r5, r0
   35764:	mov	r8, r1
   35768:	mov	r0, r1
   3576c:	mov	r1, #0
   35770:	mov	r2, #0
   35774:	mov	r7, #0
   35778:	ldr	r4, [r3], #20
   3577c:	bl	34714 <__assert_fail@plt+0x21b24>
   35780:	cmp	r0, #0
   35784:	str	r0, [sp, #4]
   35788:	beq	35824 <__assert_fail@plt+0x22c34>
   3578c:	mov	r9, r0
   35790:	add	r6, sp, #4
   35794:	mov	r7, #0
   35798:	str	r4, [r0]
   3579c:	ldr	r0, [r6]
   357a0:	ldr	r1, [r0, #24]
   357a4:	orr	r1, r1, #262144	; 0x40000
   357a8:	str	r1, [r0, #24]
   357ac:	ldr	r0, [r5, #4]
   357b0:	ldr	r4, [r6]
   357b4:	cmp	r0, #0
   357b8:	beq	357c8 <__assert_fail@plt+0x22bd8>
   357bc:	add	r6, r4, #4
   357c0:	mov	r5, r0
   357c4:	b	357fc <__assert_fail@plt+0x22c0c>
   357c8:	mov	r1, #0
   357cc:	mov	r0, r5
   357d0:	ldr	r5, [r5, #8]
   357d4:	cmp	r5, r1
   357d8:	cmpne	r5, #0
   357dc:	bne	357f8 <__assert_fail@plt+0x22c08>
   357e0:	ldr	r5, [r0]
   357e4:	ldr	r4, [r4]
   357e8:	mov	r1, r0
   357ec:	cmp	r5, #0
   357f0:	bne	357cc <__assert_fail@plt+0x22bdc>
   357f4:	b	35820 <__assert_fail@plt+0x22c30>
   357f8:	add	r6, r4, #8
   357fc:	add	r3, r5, #20
   35800:	mov	r0, r8
   35804:	mov	r1, #0
   35808:	mov	r2, #0
   3580c:	bl	34714 <__assert_fail@plt+0x21b24>
   35810:	cmp	r0, #0
   35814:	str	r0, [r6]
   35818:	bne	35798 <__assert_fail@plt+0x22ba8>
   3581c:	b	35824 <__assert_fail@plt+0x22c34>
   35820:	mov	r7, r9
   35824:	mov	r0, r7
   35828:	sub	sp, fp, #24
   3582c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   35830:	push	{r4, r5, r6, r7, fp, lr}
   35834:	add	fp, sp, #16
   35838:	mov	r6, r0
   3583c:	mov	r5, r1
   35840:	mov	r0, r2
   35844:	mov	r4, r2
   35848:	mov	r1, r6
   3584c:	blx	r5
   35850:	cmp	r0, #0
   35854:	bne	358a8 <__assert_fail@plt+0x22cb8>
   35858:	ldr	r7, [r6, #4]
   3585c:	cmp	r7, #0
   35860:	bne	35890 <__assert_fail@plt+0x22ca0>
   35864:	mov	r1, #0
   35868:	ldr	r7, [r6, #8]
   3586c:	mov	r0, r6
   35870:	cmp	r7, r1
   35874:	cmpne	r7, #0
   35878:	bne	35890 <__assert_fail@plt+0x22ca0>
   3587c:	ldr	r6, [r0]
   35880:	mov	r1, r0
   35884:	cmp	r6, #0
   35888:	bne	35868 <__assert_fail@plt+0x22c78>
   3588c:	b	358ac <__assert_fail@plt+0x22cbc>
   35890:	mov	r0, r4
   35894:	mov	r1, r7
   35898:	blx	r5
   3589c:	cmp	r0, #0
   358a0:	mov	r6, r7
   358a4:	beq	35858 <__assert_fail@plt+0x22c68>
   358a8:	pop	{r4, r5, r6, r7, fp, pc}
   358ac:	mov	r0, #0
   358b0:	pop	{r4, r5, r6, r7, fp, pc}
   358b4:	ldrb	r2, [r1, #24]
   358b8:	cmp	r2, #17
   358bc:	beq	358f0 <__assert_fail@plt+0x22d00>
   358c0:	cmp	r2, #4
   358c4:	bne	35944 <__assert_fail@plt+0x22d54>
   358c8:	ldr	r2, [r0, #132]	; 0x84
   358cc:	cmp	r2, #0
   358d0:	beq	35944 <__assert_fail@plt+0x22d54>
   358d4:	ldr	r3, [r1, #20]
   358d8:	ldr	r2, [r2, r3, lsl #2]
   358dc:	mov	r3, #1
   358e0:	str	r2, [r1, #20]
   358e4:	ldr	r1, [r0, #80]	; 0x50
   358e8:	orr	r1, r1, r3, lsl r2
   358ec:	b	35940 <__assert_fail@plt+0x22d50>
   358f0:	ldr	r2, [r1, #4]
   358f4:	cmp	r2, #0
   358f8:	beq	35944 <__assert_fail@plt+0x22d54>
   358fc:	ldrb	r3, [r2, #24]
   35900:	cmp	r3, #17
   35904:	bne	35944 <__assert_fail@plt+0x22d54>
   35908:	ldr	r3, [r2, #4]
   3590c:	ldr	r2, [r2, #20]
   35910:	cmp	r3, #0
   35914:	str	r3, [r1, #4]
   35918:	strne	r1, [r3]
   3591c:	cmp	r2, #31
   35920:	ldr	r1, [r1, #20]
   35924:	ldr	r3, [r0, #132]	; 0x84
   35928:	ldr	r1, [r3, r1, lsl #2]
   3592c:	str	r1, [r3, r2, lsl #2]
   35930:	bgt	35944 <__assert_fail@plt+0x22d54>
   35934:	ldr	r1, [r0, #80]	; 0x50
   35938:	mov	r3, #1
   3593c:	bic	r1, r1, r3, lsl r2
   35940:	str	r1, [r0, #80]	; 0x50
   35944:	mov	r0, #0
   35948:	bx	lr
   3594c:	push	{r4, r5, fp, lr}
   35950:	add	fp, sp, #8
   35954:	sub	sp, sp, #8
   35958:	mov	r5, r0
   3595c:	mov	r0, #0
   35960:	mov	r4, r1
   35964:	str	r0, [sp, #4]
   35968:	ldr	r2, [r1, #4]
   3596c:	cmp	r2, #0
   35970:	beq	35998 <__assert_fail@plt+0x22da8>
   35974:	ldrb	r0, [r2, #24]
   35978:	cmp	r0, #17
   3597c:	bne	35998 <__assert_fail@plt+0x22da8>
   35980:	add	r0, sp, #4
   35984:	mov	r1, r5
   35988:	bl	35c50 <__assert_fail@plt+0x23060>
   3598c:	cmp	r0, #0
   35990:	str	r0, [r4, #4]
   35994:	strne	r4, [r0]
   35998:	ldr	r2, [r4, #8]
   3599c:	cmp	r2, #0
   359a0:	beq	359c8 <__assert_fail@plt+0x22dd8>
   359a4:	ldrb	r0, [r2, #24]
   359a8:	cmp	r0, #17
   359ac:	bne	359c8 <__assert_fail@plt+0x22dd8>
   359b0:	add	r0, sp, #4
   359b4:	mov	r1, r5
   359b8:	bl	35c50 <__assert_fail@plt+0x23060>
   359bc:	cmp	r0, #0
   359c0:	str	r0, [r4, #8]
   359c4:	strne	r4, [r0]
   359c8:	ldr	r0, [sp, #4]
   359cc:	sub	sp, fp, #8
   359d0:	pop	{r4, r5, fp, pc}
   359d4:	push	{r4, r5, fp, lr}
   359d8:	add	fp, sp, #8
   359dc:	ldr	r2, [r1, #24]
   359e0:	mov	r5, r0
   359e4:	mov	r4, r1
   359e8:	uxtb	r0, r2
   359ec:	cmp	r0, #16
   359f0:	bne	35a10 <__assert_fail@plt+0x22e20>
   359f4:	ldr	r0, [r4, #4]
   359f8:	ldr	r1, [r0, #12]
   359fc:	str	r1, [r4, #12]
   35a00:	ldr	r0, [r0, #28]
   35a04:	str	r0, [r4, #28]
   35a08:	mov	r0, #0
   35a0c:	pop	{r4, r5, fp, pc}
   35a10:	str	r4, [r4, #12]
   35a14:	mov	r0, r5
   35a18:	ldr	r1, [r4, #20]
   35a1c:	bl	35da4 <__assert_fail@plt+0x231b4>
   35a20:	cmn	r0, #1
   35a24:	str	r0, [r4, #28]
   35a28:	beq	35a5c <__assert_fail@plt+0x22e6c>
   35a2c:	ldrb	r2, [r4, #24]
   35a30:	mov	r1, r0
   35a34:	mov	r0, #0
   35a38:	cmp	r2, #12
   35a3c:	popne	{r4, r5, fp, pc}
   35a40:	ldr	r2, [r5]
   35a44:	ldr	r3, [r4, #20]
   35a48:	add	r1, r2, r1, lsl #3
   35a4c:	ldr	r2, [r1, #4]
   35a50:	bfi	r2, r3, #8, #10
   35a54:	str	r2, [r1, #4]
   35a58:	pop	{r4, r5, fp, pc}
   35a5c:	mov	r0, #12
   35a60:	pop	{r4, r5, fp, pc}
   35a64:	ldrb	r0, [r1, #24]
   35a68:	cmp	r0, #16
   35a6c:	beq	35a80 <__assert_fail@plt+0x22e90>
   35a70:	cmp	r0, #11
   35a74:	bne	35a98 <__assert_fail@plt+0x22ea8>
   35a78:	ldr	r0, [r1, #4]
   35a7c:	b	35ab8 <__assert_fail@plt+0x22ec8>
   35a80:	ldmib	r1, {r0, r2}
   35a84:	ldr	r3, [r2, #12]
   35a88:	str	r3, [r0, #16]
   35a8c:	ldr	r0, [r1, #16]
   35a90:	str	r0, [r2, #16]
   35a94:	b	35abc <__assert_fail@plt+0x22ecc>
   35a98:	ldr	r0, [r1, #4]
   35a9c:	cmp	r0, #0
   35aa0:	ldrne	r2, [r1, #16]
   35aa4:	strne	r2, [r0, #16]
   35aa8:	ldr	r0, [r1, #8]
   35aac:	cmp	r0, #0
   35ab0:	beq	35abc <__assert_fail@plt+0x22ecc>
   35ab4:	ldr	r1, [r1, #16]
   35ab8:	str	r1, [r0, #16]
   35abc:	mov	r0, #0
   35ac0:	bx	lr
   35ac4:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   35ac8:	add	fp, sp, #24
   35acc:	ldr	r3, [r1, #24]
   35ad0:	mvn	r7, #1
   35ad4:	ldr	r2, [r1, #28]
   35ad8:	mov	r4, #0
   35adc:	uxtab	r3, r7, r3
   35ae0:	cmp	r3, #14
   35ae4:	bhi	35bec <__assert_fail@plt+0x22ffc>
   35ae8:	add	r7, pc, #0
   35aec:	ldr	pc, [r7, r3, lsl #2]
   35af0:	andeq	r5, r3, r4, lsr ip
   35af4:	andeq	r5, r3, ip, ror #23
   35af8:	andeq	r5, r3, r0, lsl #24
   35afc:	andeq	r5, r3, ip, ror #23
   35b00:	andeq	r5, r3, ip, ror #23
   35b04:	andeq	r5, r3, ip, ror #23
   35b08:	andeq	r5, r3, ip, lsr #22
   35b0c:	andeq	r5, r3, ip, lsr #22
   35b10:	andeq	r5, r3, r8, ror #22
   35b14:	andeq	r5, r3, r8, ror #22
   35b18:	andeq	r5, r3, ip, lsr #22
   35b1c:	andeq	r5, r3, ip, ror #23
   35b20:	andeq	r5, r3, ip, ror #23
   35b24:	andeq	r5, r3, ip, ror #23
   35b28:	andeq	r5, r3, r4, lsr ip
   35b2c:	ldr	r1, [r1, #16]
   35b30:	ldr	r5, [r1, #28]
   35b34:	ldr	r6, [r0, #20]
   35b38:	add	r0, r2, r2, lsl #1
   35b3c:	mov	r1, #1
   35b40:	str	r1, [r6, r0, lsl #2]!
   35b44:	mov	r0, #4
   35b48:	mov	r7, r6
   35b4c:	str	r1, [r7, #4]!
   35b50:	bl	2de8c <__assert_fail@plt+0x1b29c>
   35b54:	cmp	r0, #0
   35b58:	str	r0, [r6, #8]
   35b5c:	beq	35c3c <__assert_fail@plt+0x2304c>
   35b60:	str	r5, [r0]
   35b64:	b	35c34 <__assert_fail@plt+0x23044>
   35b68:	ldrb	r3, [r0, #88]	; 0x58
   35b6c:	add	r6, r1, #16
   35b70:	add	r5, r2, r2, lsl #1
   35b74:	orr	r3, r3, #1
   35b78:	strb	r3, [r0, #88]	; 0x58
   35b7c:	mov	r3, r6
   35b80:	ldr	r7, [r1, #4]
   35b84:	ldr	r1, [r1, #8]
   35b88:	cmp	r1, #0
   35b8c:	addne	r3, r1, #12
   35b90:	cmp	r7, #0
   35b94:	ldr	r1, [r3]
   35b98:	addne	r6, r7, #12
   35b9c:	ldr	r8, [r1, #28]
   35ba0:	ldr	r1, [r6]
   35ba4:	ldr	r6, [r0, #20]
   35ba8:	mov	r0, #2
   35bac:	ldr	r9, [r1, #28]
   35bb0:	mov	r7, r6
   35bb4:	str	r0, [r7, r5, lsl #2]!
   35bb8:	mov	r0, #8
   35bbc:	bl	2de8c <__assert_fail@plt+0x1b29c>
   35bc0:	cmp	r0, #0
   35bc4:	str	r0, [r7, #8]
   35bc8:	beq	35c48 <__assert_fail@plt+0x23058>
   35bcc:	add	r1, r6, r5, lsl #2
   35bd0:	cmp	r9, r8
   35bd4:	add	r1, r1, #4
   35bd8:	bne	35c20 <__assert_fail@plt+0x23030>
   35bdc:	mov	r2, #1
   35be0:	str	r2, [r1]
   35be4:	str	r9, [r0]
   35be8:	b	35c34 <__assert_fail@plt+0x23044>
   35bec:	ldr	r1, [r1, #16]
   35bf0:	ldr	r0, [r0, #12]
   35bf4:	ldr	r1, [r1, #28]
   35bf8:	str	r1, [r0, r2, lsl #2]
   35bfc:	b	35c34 <__assert_fail@plt+0x23044>
   35c00:	ldr	r7, [r1, #16]
   35c04:	ldr	r3, [r0, #12]
   35c08:	ldr	r5, [r7, #28]
   35c0c:	str	r5, [r3, r2, lsl #2]
   35c10:	ldrb	r1, [r1, #24]
   35c14:	cmp	r1, #4
   35c18:	beq	35b34 <__assert_fail@plt+0x22f44>
   35c1c:	b	35c34 <__assert_fail@plt+0x23044>
   35c20:	mov	r2, #2
   35c24:	str	r2, [r1]
   35c28:	stmcs	r0, {r8, r9}
   35c2c:	strcc	r9, [r0]
   35c30:	strcc	r8, [r0, #4]
   35c34:	mov	r0, r4
   35c38:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   35c3c:	mov	r0, #0
   35c40:	str	r0, [r7]
   35c44:	str	r0, [r6]
   35c48:	mov	r4, #12
   35c4c:	b	35c34 <__assert_fail@plt+0x23044>
   35c50:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   35c54:	add	fp, sp, #28
   35c58:	sub	sp, sp, #12
   35c5c:	ldr	r5, [r2, #4]
   35c60:	ldr	sl, [r1]
   35c64:	mov	r9, r2
   35c68:	cmp	r5, #0
   35c6c:	ldrbne	r1, [r1, #28]
   35c70:	andsne	r1, r1, #16
   35c74:	bne	35d7c <__assert_fail@plt+0x2318c>
   35c78:	str	r0, [sp]
   35c7c:	mov	r0, #8
   35c80:	mov	r8, #0
   35c84:	add	r3, sp, #4
   35c88:	mov	r1, #0
   35c8c:	mov	r2, #0
   35c90:	str	r0, [sp, #8]
   35c94:	mov	r0, sl
   35c98:	str	r8, [sp, #4]
   35c9c:	bl	34714 <__assert_fail@plt+0x21b24>
   35ca0:	mov	r7, r0
   35ca4:	mov	r0, #9
   35ca8:	add	r3, sp, #4
   35cac:	mov	r1, #0
   35cb0:	mov	r2, #0
   35cb4:	str	r0, [sp, #8]
   35cb8:	mov	r0, sl
   35cbc:	str	r8, [sp, #4]
   35cc0:	bl	34714 <__assert_fail@plt+0x21b24>
   35cc4:	mov	r4, r0
   35cc8:	cmp	r5, #0
   35ccc:	mov	r6, r0
   35cd0:	beq	35cf8 <__assert_fail@plt+0x23108>
   35cd4:	mov	r0, #16
   35cd8:	add	r3, sp, #4
   35cdc:	mov	r1, r5
   35ce0:	mov	r2, r4
   35ce4:	str	r0, [sp, #8]
   35ce8:	mov	r0, sl
   35cec:	str	r8, [sp, #4]
   35cf0:	bl	34714 <__assert_fail@plt+0x21b24>
   35cf4:	mov	r6, r0
   35cf8:	mov	r0, #16
   35cfc:	add	r3, sp, #4
   35d00:	mov	r1, r7
   35d04:	mov	r2, r6
   35d08:	str	r0, [sp, #8]
   35d0c:	mov	r0, sl
   35d10:	str	r8, [sp, #4]
   35d14:	bl	34714 <__assert_fail@plt+0x21b24>
   35d18:	cmp	r4, #0
   35d1c:	beq	35d2c <__assert_fail@plt+0x2313c>
   35d20:	cmp	r7, #0
   35d24:	cmpne	r6, #0
   35d28:	bne	35d40 <__assert_fail@plt+0x23150>
   35d2c:	ldr	r1, [sp]
   35d30:	mov	r0, #12
   35d34:	mov	r5, #0
   35d38:	str	r0, [r1]
   35d3c:	b	35d98 <__assert_fail@plt+0x231a8>
   35d40:	mov	r5, r0
   35d44:	cmp	r0, #0
   35d48:	beq	35d2c <__assert_fail@plt+0x2313c>
   35d4c:	ldr	r0, [r9, #20]
   35d50:	str	r0, [r4, #20]
   35d54:	str	r0, [r7, #20]
   35d58:	ldr	r1, [r9, #24]
   35d5c:	ldr	r0, [r4, #24]
   35d60:	lsr	r1, r1, #19
   35d64:	bfi	r0, r1, #19, #1
   35d68:	str	r0, [r4, #24]
   35d6c:	ldr	r0, [r7, #24]
   35d70:	bfi	r0, r1, #19, #1
   35d74:	str	r0, [r7, #24]
   35d78:	b	35d98 <__assert_fail@plt+0x231a8>
   35d7c:	ldr	r3, [r9, #20]
   35d80:	cmp	r3, #31
   35d84:	bgt	35d98 <__assert_fail@plt+0x231a8>
   35d88:	ldr	r1, [sl, #80]	; 0x50
   35d8c:	mov	r2, #1
   35d90:	tst	r1, r2, lsl r3
   35d94:	bne	35c78 <__assert_fail@plt+0x23088>
   35d98:	mov	r0, r5
   35d9c:	sub	sp, fp, #28
   35da0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   35da4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   35da8:	add	fp, sp, #28
   35dac:	sub	sp, sp, #12
   35db0:	mov	r4, r0
   35db4:	ldr	r7, [r0, #4]
   35db8:	ldr	r0, [r0, #8]
   35dbc:	mov	r5, r2
   35dc0:	mov	r9, r1
   35dc4:	cmp	r0, r7
   35dc8:	bcs	35e94 <__assert_fail@plt+0x232a4>
   35dcc:	ldr	r1, [r4]
   35dd0:	str	r9, [r1, r0, lsl #3]!
   35dd4:	str	r5, [r1, #4]
   35dd8:	ldr	r0, [r4]
   35ddc:	ldr	r1, [r4, #8]
   35de0:	add	r0, r0, r1, lsl #3
   35de4:	ldr	r1, [r0, #4]
   35de8:	bfc	r1, #8, #10
   35dec:	str	r1, [r0, #4]
   35df0:	uxtb	r1, r5
   35df4:	cmp	r1, #5
   35df8:	bne	35e0c <__assert_fail@plt+0x2321c>
   35dfc:	ldr	r2, [r4, #92]	; 0x5c
   35e00:	mov	r0, #1048576	; 0x100000
   35e04:	cmp	r2, #1
   35e08:	bgt	35e1c <__assert_fail@plt+0x2322c>
   35e0c:	sub	r0, r1, #6
   35e10:	clz	r0, r0
   35e14:	lsr	r0, r0, #5
   35e18:	lsl	r0, r0, #20
   35e1c:	ldr	r1, [r4]
   35e20:	ldr	r2, [r4, #8]
   35e24:	add	r1, r1, r2, lsl #3
   35e28:	ldr	r2, [r1, #4]
   35e2c:	bic	r2, r2, #1048576	; 0x100000
   35e30:	orr	r0, r2, r0
   35e34:	mvn	r2, #0
   35e38:	str	r0, [r1, #4]
   35e3c:	ldr	r0, [r4, #8]
   35e40:	ldr	r1, [r4, #12]
   35e44:	str	r2, [r1, r0, lsl #2]
   35e48:	mov	r2, #0
   35e4c:	ldr	r0, [r4, #8]
   35e50:	ldr	r1, [r4, #20]
   35e54:	add	r0, r0, r0, lsl #1
   35e58:	str	r2, [r1, r0, lsl #2]!
   35e5c:	str	r2, [r1, #4]
   35e60:	str	r2, [r1, #8]
   35e64:	ldr	r0, [r4, #8]
   35e68:	ldr	r1, [r4, #24]
   35e6c:	add	r0, r0, r0, lsl #1
   35e70:	str	r2, [r1, r0, lsl #2]!
   35e74:	str	r2, [r1, #4]
   35e78:	str	r2, [r1, #8]
   35e7c:	ldr	r6, [r4, #8]
   35e80:	add	r0, r6, #1
   35e84:	str	r0, [r4, #8]
   35e88:	mov	r0, r6
   35e8c:	sub	sp, fp, #28
   35e90:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   35e94:	movw	r0, #21845	; 0x5555
   35e98:	lsl	r1, r7, #1
   35e9c:	mvn	r6, #0
   35ea0:	movt	r0, #5461	; 0x1555
   35ea4:	cmp	r1, r0
   35ea8:	bhi	35e88 <__assert_fail@plt+0x23298>
   35eac:	ldr	r0, [r4]
   35eb0:	str	r1, [sp, #8]
   35eb4:	lsl	r1, r7, #4
   35eb8:	bl	2e984 <__assert_fail@plt+0x1bd94>
   35ebc:	cmp	r0, #0
   35ec0:	beq	35e88 <__assert_fail@plt+0x23298>
   35ec4:	str	r0, [r4]
   35ec8:	lsl	r8, r7, #3
   35ecc:	ldr	r0, [r4, #12]
   35ed0:	mov	r1, r8
   35ed4:	bl	2e984 <__assert_fail@plt+0x1bd94>
   35ed8:	str	r0, [sp, #4]
   35edc:	ldr	r0, [r4, #16]
   35ee0:	mov	r1, r8
   35ee4:	bl	2e984 <__assert_fail@plt+0x1bd94>
   35ee8:	mov	r2, r0
   35eec:	add	r1, r7, r7, lsl #1
   35ef0:	ldr	r0, [r4, #20]
   35ef4:	mov	r7, r2
   35ef8:	lsl	r8, r1, #3
   35efc:	mov	r1, r8
   35f00:	bl	2e984 <__assert_fail@plt+0x1bd94>
   35f04:	mov	sl, r0
   35f08:	ldr	r0, [r4, #24]
   35f0c:	mov	r1, r8
   35f10:	bl	2e984 <__assert_fail@plt+0x1bd94>
   35f14:	mov	r8, r0
   35f18:	ldr	r0, [sp, #4]
   35f1c:	cmp	r0, #0
   35f20:	beq	35f30 <__assert_fail@plt+0x23340>
   35f24:	cmp	r7, #0
   35f28:	cmpne	sl, #0
   35f2c:	bne	35f50 <__assert_fail@plt+0x23360>
   35f30:	bl	2bcbc <__assert_fail@plt+0x190cc>
   35f34:	mov	r0, r7
   35f38:	bl	2bcbc <__assert_fail@plt+0x190cc>
   35f3c:	mov	r0, sl
   35f40:	bl	2bcbc <__assert_fail@plt+0x190cc>
   35f44:	mov	r0, r8
   35f48:	bl	2bcbc <__assert_fail@plt+0x190cc>
   35f4c:	b	35e88 <__assert_fail@plt+0x23298>
   35f50:	cmp	r8, #0
   35f54:	beq	35f30 <__assert_fail@plt+0x23340>
   35f58:	add	r1, r4, #12
   35f5c:	stm	r1, {r0, r7, sl}
   35f60:	str	r8, [r4, #24]
   35f64:	ldr	r0, [sp, #8]
   35f68:	str	r0, [r4, #4]
   35f6c:	ldr	r0, [r4, #8]
   35f70:	b	35dcc <__assert_fail@plt+0x231dc>
   35f74:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   35f78:	add	fp, sp, #28
   35f7c:	sub	sp, sp, #44	; 0x2c
   35f80:	mov	r8, r0
   35f84:	ldr	r0, [r1, #20]
   35f88:	add	r4, r2, r2, lsl #1
   35f8c:	mov	r5, r1
   35f90:	mov	r1, #0
   35f94:	mov	r9, r3
   35f98:	mov	r6, r2
   35f9c:	add	r0, r0, r4, lsl #2
   35fa0:	ldr	r0, [r0, #4]
   35fa4:	str	r1, [sp, #36]	; 0x24
   35fa8:	add	r0, r0, #1
   35fac:	str	r0, [sp, #32]
   35fb0:	lsl	r0, r0, #2
   35fb4:	bl	2de8c <__assert_fail@plt+0x1b29c>
   35fb8:	cmp	r0, #0
   35fbc:	str	r0, [sp, #40]	; 0x28
   35fc0:	beq	36188 <__assert_fail@plt+0x23598>
   35fc4:	mov	r1, #1
   35fc8:	str	r6, [r0]
   35fcc:	str	r1, [sp, #36]	; 0x24
   35fd0:	mvn	r1, #0
   35fd4:	ldr	r0, [r5, #24]
   35fd8:	add	r0, r0, r4, lsl #2
   35fdc:	str	r1, [r0, #4]
   35fe0:	ldr	r2, [r5]
   35fe4:	add	r0, r2, r6, lsl #3
   35fe8:	ldr	r0, [r0, #4]
   35fec:	ubfx	r1, r0, #8, #10
   35ff0:	cmp	r1, #0
   35ff4:	beq	36050 <__assert_fail@plt+0x23460>
   35ff8:	ldr	r3, [r5, #20]
   35ffc:	add	r3, r3, r4, lsl #2
   36000:	ldr	r7, [r3, #4]
   36004:	cmp	r7, #0
   36008:	beq	36050 <__assert_fail@plt+0x23460>
   3600c:	ldr	r3, [r3, #8]
   36010:	ldr	r3, [r3]
   36014:	add	r2, r2, r3, lsl #3
   36018:	ldrb	r2, [r2, #6]
   3601c:	tst	r2, #4
   36020:	bne	36050 <__assert_fail@plt+0x23460>
   36024:	str	r1, [sp]
   36028:	mov	r0, r5
   3602c:	mov	r1, r6
   36030:	mov	r2, r6
   36034:	mov	r3, r6
   36038:	bl	36190 <__assert_fail@plt+0x235a0>
   3603c:	cmp	r0, #0
   36040:	bne	36180 <__assert_fail@plt+0x23590>
   36044:	ldr	r0, [r5]
   36048:	add	r0, r0, r6, lsl #3
   3604c:	ldr	r0, [r0, #4]
   36050:	tst	r0, #8
   36054:	beq	36154 <__assert_fail@plt+0x23564>
   36058:	ldr	r0, [r5, #20]
   3605c:	add	r1, r0, r4, lsl #2
   36060:	ldr	r1, [r1, #4]
   36064:	cmp	r1, #1
   36068:	blt	36154 <__assert_fail@plt+0x23564>
   3606c:	str	r8, [sp, #12]
   36070:	mov	r8, #0
   36074:	add	r7, sp, #16
   36078:	add	sl, sp, #32
   3607c:	mov	r6, #0
   36080:	str	r9, [sp, #8]
   36084:	add	r0, r0, r4, lsl #2
   36088:	ldr	r0, [r0, #8]
   3608c:	ldr	r2, [r0, r6, lsl #2]
   36090:	ldr	r0, [r5, #24]
   36094:	add	r9, r2, r2, lsl #1
   36098:	add	r0, r0, r9, lsl #2
   3609c:	ldr	r1, [r0, #4]
   360a0:	cmn	r1, #1
   360a4:	beq	3610c <__assert_fail@plt+0x2351c>
   360a8:	cmp	r1, #0
   360ac:	bne	360cc <__assert_fail@plt+0x234dc>
   360b0:	mov	r0, r7
   360b4:	mov	r1, r5
   360b8:	mov	r3, #0
   360bc:	bl	35f74 <__assert_fail@plt+0x23384>
   360c0:	cmp	r0, #0
   360c4:	beq	360dc <__assert_fail@plt+0x234ec>
   360c8:	b	36180 <__assert_fail@plt+0x23590>
   360cc:	vldr	d16, [r0]
   360d0:	ldr	r0, [r0, #8]
   360d4:	str	r0, [sp, #24]
   360d8:	vstr	d16, [sp, #16]
   360dc:	mov	r0, sl
   360e0:	mov	r1, r7
   360e4:	bl	36450 <__assert_fail@plt+0x23860>
   360e8:	cmp	r0, #0
   360ec:	bne	36180 <__assert_fail@plt+0x23590>
   360f0:	ldr	r0, [r5, #24]
   360f4:	add	r0, r0, r9, lsl #2
   360f8:	ldr	r0, [r0, #4]
   360fc:	cmp	r0, #0
   36100:	bne	36110 <__assert_fail@plt+0x23520>
   36104:	ldr	r0, [sp, #24]
   36108:	bl	2bcbc <__assert_fail@plt+0x190cc>
   3610c:	mov	r8, #1
   36110:	ldr	r0, [r5, #20]
   36114:	add	r6, r6, #1
   36118:	add	r1, r0, r4, lsl #2
   3611c:	ldr	r1, [r1, #4]
   36120:	cmp	r6, r1
   36124:	blt	36084 <__assert_fail@plt+0x23494>
   36128:	tst	r8, #1
   3612c:	ldr	r8, [sp, #12]
   36130:	ldr	r0, [sp, #8]
   36134:	beq	36154 <__assert_fail@plt+0x23564>
   36138:	cmp	r0, #0
   3613c:	bne	36154 <__assert_fail@plt+0x23564>
   36140:	ldr	r0, [r5, #24]
   36144:	mov	r1, #0
   36148:	add	r0, r0, r4, lsl #2
   3614c:	str	r1, [r0, #4]
   36150:	b	3616c <__assert_fail@plt+0x2357c>
   36154:	ldr	r0, [r5, #24]
   36158:	vldr	d16, [sp, #32]
   3615c:	ldr	r1, [sp, #40]	; 0x28
   36160:	add	r0, r0, r4, lsl #2
   36164:	str	r1, [r0, #8]
   36168:	vstr	d16, [r0]
   3616c:	ldr	r0, [sp, #40]	; 0x28
   36170:	vldr	d16, [sp, #32]
   36174:	str	r0, [r8, #8]
   36178:	mov	r0, #0
   3617c:	vstr	d16, [r8]
   36180:	sub	sp, fp, #28
   36184:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   36188:	mov	r0, #12
   3618c:	b	36180 <__assert_fail@plt+0x23590>
   36190:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   36194:	add	fp, sp, #28
   36198:	sub	sp, sp, #20
   3619c:	mov	sl, r0
   361a0:	ldr	r0, [fp, #8]
   361a4:	mov	r8, r2
   361a8:	mov	r5, r1
   361ac:	str	r3, [sp, #8]
   361b0:	str	r0, [sp, #16]
   361b4:	ldr	r2, [sl]
   361b8:	add	r1, r2, r5, lsl #3
   361bc:	ldrb	r0, [r1, #4]!
   361c0:	cmp	r0, #4
   361c4:	bne	36234 <__assert_fail@plt+0x23644>
   361c8:	ldr	r0, [sl, #12]
   361cc:	ldr	r1, [sl, #20]
   361d0:	add	r6, r8, r8, lsl #1
   361d4:	ldr	r2, [sp, #16]
   361d8:	ldr	r7, [r0, r5, lsl #2]
   361dc:	add	r0, r1, r6, lsl #2
   361e0:	mov	r1, #0
   361e4:	str	r1, [r0, #4]
   361e8:	mov	r0, sl
   361ec:	mov	r1, r7
   361f0:	bl	365d4 <__assert_fail@plt+0x239e4>
   361f4:	mov	r9, #12
   361f8:	cmn	r0, #1
   361fc:	beq	3641c <__assert_fail@plt+0x2382c>
   36200:	mov	r4, r0
   36204:	ldr	r0, [sl, #12]
   36208:	ldr	r1, [r0, r5, lsl #2]
   3620c:	str	r1, [r0, r8, lsl #2]
   36210:	mov	r1, r4
   36214:	ldr	r0, [sl, #20]
   36218:	add	r0, r0, r6, lsl #2
   3621c:	bl	3665c <__assert_fail@plt+0x23a6c>
   36220:	cmp	r0, #0
   36224:	mov	r5, r7
   36228:	mov	r8, r4
   3622c:	bne	361b4 <__assert_fail@plt+0x235c4>
   36230:	b	3641c <__assert_fail@plt+0x2382c>
   36234:	ldr	r0, [sl, #20]
   36238:	add	ip, r5, r5, lsl #1
   3623c:	add	r7, r0, ip, lsl #2
   36240:	ldr	r3, [r7, #4]
   36244:	cmp	r3, #0
   36248:	beq	36404 <__assert_fail@plt+0x23814>
   3624c:	ldr	r7, [r7, #8]
   36250:	add	r6, r8, r8, lsl #1
   36254:	cmp	r3, #1
   36258:	add	r0, r0, r6, lsl #2
   3625c:	str	r6, [sp, #12]
   36260:	mov	r6, #0
   36264:	ldr	r7, [r7]
   36268:	str	r6, [r0, #4]
   3626c:	beq	3639c <__assert_fail@plt+0x237ac>
   36270:	ldr	r1, [sl, #8]
   36274:	ldr	r4, [sp, #16]
   36278:	sub	r3, r1, #1
   3627c:	cmp	r3, #1
   36280:	blt	362d0 <__assert_fail@plt+0x236e0>
   36284:	add	r3, r2, r3, lsl #3
   36288:	ldr	r6, [r3, #4]
   3628c:	ands	r3, r6, #262144	; 0x40000
   36290:	beq	362d0 <__assert_fail@plt+0x236e0>
   36294:	ldr	r3, [sl, #16]
   36298:	sub	r2, r2, #12
   3629c:	sub	r3, r3, #4
   362a0:	ldr	r5, [r3, r1, lsl #2]
   362a4:	cmp	r5, r7
   362a8:	ubfxeq	r6, r6, #8, #10
   362ac:	cmpeq	r6, r4
   362b0:	beq	36380 <__assert_fail@plt+0x23790>
   362b4:	sub	r6, r1, #2
   362b8:	cmp	r6, #1
   362bc:	blt	362d0 <__assert_fail@plt+0x236e0>
   362c0:	ldr	r6, [r2, r1, lsl #3]
   362c4:	sub	r1, r1, #1
   362c8:	ands	r5, r6, #262144	; 0x40000
   362cc:	bne	362a0 <__assert_fail@plt+0x236b0>
   362d0:	mov	r0, sl
   362d4:	mov	r1, r7
   362d8:	mov	r2, r4
   362dc:	mov	r8, ip
   362e0:	bl	365d4 <__assert_fail@plt+0x239e4>
   362e4:	mov	r9, #12
   362e8:	cmn	r0, #1
   362ec:	beq	3641c <__assert_fail@plt+0x2382c>
   362f0:	mov	r5, r0
   362f4:	ldr	r0, [sl, #20]
   362f8:	ldr	r6, [sp, #12]
   362fc:	mov	r1, r5
   36300:	add	r0, r0, r6, lsl #2
   36304:	bl	3665c <__assert_fail@plt+0x23a6c>
   36308:	cmp	r0, #0
   3630c:	beq	3641c <__assert_fail@plt+0x2382c>
   36310:	ldr	r4, [sp, #16]
   36314:	ldr	r3, [sp, #8]
   36318:	mov	r0, sl
   3631c:	mov	r1, r7
   36320:	mov	r2, r5
   36324:	str	r4, [sp]
   36328:	bl	36190 <__assert_fail@plt+0x235a0>
   3632c:	cmp	r0, #0
   36330:	bne	36418 <__assert_fail@plt+0x23828>
   36334:	ldr	r0, [sl, #20]
   36338:	mov	r2, r4
   3633c:	add	r0, r0, r8, lsl #2
   36340:	ldr	r0, [r0, #8]
   36344:	ldr	r5, [r0, #4]
   36348:	mov	r0, sl
   3634c:	mov	r1, r5
   36350:	bl	365d4 <__assert_fail@plt+0x239e4>
   36354:	mov	r9, #12
   36358:	cmn	r0, #1
   3635c:	beq	3641c <__assert_fail@plt+0x2382c>
   36360:	mov	r8, r0
   36364:	ldr	r0, [sl, #20]
   36368:	mov	r1, r8
   3636c:	add	r0, r0, r6, lsl #2
   36370:	bl	3665c <__assert_fail@plt+0x23a6c>
   36374:	cmp	r0, #0
   36378:	bne	361b4 <__assert_fail@plt+0x235c4>
   3637c:	b	3641c <__assert_fail@plt+0x2382c>
   36380:	sub	r1, r1, #1
   36384:	mov	r8, ip
   36388:	bl	3665c <__assert_fail@plt+0x23a6c>
   3638c:	ldr	r6, [sp, #12]
   36390:	cmp	r0, #0
   36394:	bne	36334 <__assert_fail@plt+0x23744>
   36398:	b	36448 <__assert_fail@plt+0x23858>
   3639c:	ldr	r2, [sp, #8]
   363a0:	cmp	r5, r2
   363a4:	bne	363b0 <__assert_fail@plt+0x237c0>
   363a8:	cmp	r8, r5
   363ac:	bne	36428 <__assert_fail@plt+0x23838>
   363b0:	ldr	r0, [r1]
   363b4:	mov	r1, r7
   363b8:	ubfx	r0, r0, #8, #10
   363bc:	ldr	r2, [sp, #16]
   363c0:	orr	r2, r0, r2
   363c4:	mov	r0, sl
   363c8:	str	r2, [sp, #16]
   363cc:	bl	365d4 <__assert_fail@plt+0x239e4>
   363d0:	mov	r9, #12
   363d4:	cmn	r0, #1
   363d8:	beq	3641c <__assert_fail@plt+0x2382c>
   363dc:	mov	r8, r0
   363e0:	ldr	r0, [sl, #20]
   363e4:	ldr	r1, [sp, #12]
   363e8:	add	r0, r0, r1, lsl #2
   363ec:	mov	r1, r8
   363f0:	bl	3665c <__assert_fail@plt+0x23a6c>
   363f4:	cmp	r0, #0
   363f8:	mov	r5, r7
   363fc:	bne	361b4 <__assert_fail@plt+0x235c4>
   36400:	b	3641c <__assert_fail@plt+0x2382c>
   36404:	ldr	r0, [sl, #12]
   36408:	ldr	r1, [r0, r5, lsl #2]
   3640c:	str	r1, [r0, r8, lsl #2]
   36410:	mov	r0, #0
   36414:	b	36420 <__assert_fail@plt+0x23830>
   36418:	mov	r9, r0
   3641c:	mov	r0, r9
   36420:	sub	sp, fp, #28
   36424:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   36428:	mov	r1, r7
   3642c:	bl	3665c <__assert_fail@plt+0x23a6c>
   36430:	mov	r1, r0
   36434:	mov	r9, #12
   36438:	mov	r0, #0
   3643c:	cmp	r1, #0
   36440:	moveq	r0, r9
   36444:	b	36420 <__assert_fail@plt+0x23830>
   36448:	mov	r9, #12
   3644c:	b	3641c <__assert_fail@plt+0x2382c>
   36450:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   36454:	add	fp, sp, #24
   36458:	mov	r8, #0
   3645c:	cmp	r1, #0
   36460:	beq	365ac <__assert_fail@plt+0x239bc>
   36464:	mov	r6, r1
   36468:	ldr	r1, [r1, #4]
   3646c:	cmp	r1, #0
   36470:	beq	365ac <__assert_fail@plt+0x239bc>
   36474:	mov	r9, r0
   36478:	ldr	r2, [r0]
   3647c:	ldr	r0, [r0, #4]
   36480:	add	r3, r0, r1, lsl #1
   36484:	cmp	r2, r3
   36488:	bge	364b4 <__assert_fail@plt+0x238c4>
   3648c:	ldr	r0, [r9, #8]
   36490:	add	r7, r2, r1
   36494:	lsl	r1, r7, #3
   36498:	bl	2e984 <__assert_fail@plt+0x1bd94>
   3649c:	cmp	r0, #0
   364a0:	beq	365cc <__assert_fail@plt+0x239dc>
   364a4:	str	r0, [r9, #8]
   364a8:	lsl	r0, r7, #1
   364ac:	str	r0, [r9]
   364b0:	ldr	r0, [r9, #4]
   364b4:	cmp	r0, #0
   364b8:	beq	365b4 <__assert_fail@plt+0x239c4>
   364bc:	ldr	r2, [r6, #4]
   364c0:	sub	r1, r0, #1
   364c4:	add	r7, r0, r2, lsl #1
   364c8:	sub	r0, r2, #1
   364cc:	orrs	r2, r0, r1
   364d0:	bmi	36514 <__assert_fail@plt+0x23924>
   364d4:	ldr	r2, [r6, #8]
   364d8:	ldr	r3, [r9, #8]
   364dc:	ldr	r4, [r2, r0, lsl #2]
   364e0:	ldr	r5, [r3, r1, lsl #2]
   364e4:	cmp	r5, r4
   364e8:	bne	364f8 <__assert_fail@plt+0x23908>
   364ec:	sub	r1, r1, #1
   364f0:	sub	r0, r0, #1
   364f4:	b	36508 <__assert_fail@plt+0x23918>
   364f8:	sublt	r7, r7, #1
   364fc:	subge	r1, r1, #1
   36500:	sublt	r0, r0, #1
   36504:	strlt	r4, [r3, r7, lsl #2]
   36508:	orr	r5, r0, r1
   3650c:	cmn	r5, #1
   36510:	bgt	364dc <__assert_fail@plt+0x238ec>
   36514:	cmp	r0, #0
   36518:	bmi	36538 <__assert_fail@plt+0x23948>
   3651c:	add	r2, r0, #1
   36520:	ldr	r0, [r9, #8]
   36524:	ldr	r1, [r6, #8]
   36528:	sub	r7, r7, r2
   3652c:	lsl	r2, r2, #2
   36530:	add	r0, r0, r7, lsl #2
   36534:	bl	125f0 <memcpy@plt>
   36538:	ldr	r0, [r9, #4]
   3653c:	ldr	r2, [r6, #4]
   36540:	sub	r1, r0, #1
   36544:	add	r3, r1, r2, lsl #1
   36548:	sub	r2, r3, r7
   3654c:	adds	r2, r2, #1
   36550:	bcs	365ac <__assert_fail@plt+0x239bc>
   36554:	add	r0, r2, r0
   36558:	str	r0, [r9, #4]
   3655c:	ldr	r0, [r9, #8]
   36560:	ldr	r6, [r0, r1, lsl #2]
   36564:	ldr	r5, [r0, r3, lsl #2]
   36568:	cmp	r5, r6
   3656c:	ble	36588 <__assert_fail@plt+0x23998>
   36570:	add	r6, r2, r1
   36574:	subs	r2, r2, #1
   36578:	sub	r3, r3, #1
   3657c:	str	r5, [r0, r6, lsl #2]
   36580:	bne	36560 <__assert_fail@plt+0x23970>
   36584:	b	365ac <__assert_fail@plt+0x239bc>
   36588:	add	r5, r2, r1
   3658c:	cmp	r1, #0
   36590:	str	r6, [r0, r5, lsl #2]
   36594:	sub	r6, r1, #1
   36598:	mov	r1, r6
   3659c:	bgt	36560 <__assert_fail@plt+0x23970>
   365a0:	add	r1, r0, r7, lsl #2
   365a4:	lsl	r2, r2, #2
   365a8:	bl	125f0 <memcpy@plt>
   365ac:	mov	r0, r8
   365b0:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   365b4:	ldr	r0, [r6, #4]
   365b8:	str	r0, [r9, #4]
   365bc:	ldr	r0, [r9, #8]
   365c0:	ldr	r2, [r6, #4]
   365c4:	ldr	r1, [r6, #8]
   365c8:	b	365a4 <__assert_fail@plt+0x239b4>
   365cc:	mov	r8, #12
   365d0:	b	365ac <__assert_fail@plt+0x239bc>
   365d4:	push	{r4, r5, r6, sl, fp, lr}
   365d8:	add	fp, sp, #16
   365dc:	mov	r5, r0
   365e0:	ldr	r0, [r0]
   365e4:	mov	r4, r1
   365e8:	mov	r6, r2
   365ec:	ldr	r1, [r0, r1, lsl #3]!
   365f0:	ldr	r2, [r0, #4]
   365f4:	mov	r0, r5
   365f8:	bl	35da4 <__assert_fail@plt+0x231b4>
   365fc:	cmn	r0, #1
   36600:	ldrne	r1, [r5]
   36604:	movwne	r3, #65280	; 0xff00
   36608:	movtne	r3, #3
   3660c:	addne	r1, r1, r0, lsl #3
   36610:	ldrne	r2, [r1, #4]
   36614:	bfine	r2, r6, #8, #10
   36618:	strne	r2, [r1, #4]
   3661c:	ldrne	r1, [r5]
   36620:	addne	r2, r1, r4, lsl #3
   36624:	addne	r1, r1, r0, lsl #3
   36628:	ldrne	r2, [r2, #4]
   3662c:	andne	r2, r2, r3
   36630:	ldrne	r3, [r1, #4]
   36634:	orrne	r2, r2, r3
   36638:	strne	r2, [r1, #4]
   3663c:	ldrne	r1, [r5]
   36640:	addne	r1, r1, r0, lsl #3
   36644:	ldrne	r2, [r1, #4]
   36648:	orrne	r2, r2, #262144	; 0x40000
   3664c:	strne	r2, [r1, #4]
   36650:	ldrne	r1, [r5, #16]
   36654:	strne	r4, [r1, r0, lsl #2]
   36658:	pop	{r4, r5, r6, sl, fp, pc}
   3665c:	push	{r4, r5, r6, sl, fp, lr}
   36660:	add	fp, sp, #16
   36664:	ldr	r2, [r0]
   36668:	mov	r5, r1
   3666c:	mov	r4, r0
   36670:	cmp	r2, #0
   36674:	beq	366a0 <__assert_fail@plt+0x23ab0>
   36678:	ldr	r1, [r4, #4]
   3667c:	cmp	r1, #0
   36680:	bne	366cc <__assert_fail@plt+0x23adc>
   36684:	ldr	r0, [r4, #8]
   36688:	str	r5, [r0]
   3668c:	ldr	r0, [r4, #4]
   36690:	mov	r6, #1
   36694:	add	r0, r0, #1
   36698:	str	r0, [r4, #4]
   3669c:	b	366c4 <__assert_fail@plt+0x23ad4>
   366a0:	mov	r6, #1
   366a4:	mov	r0, #4
   366a8:	str	r6, [r4]
   366ac:	str	r6, [r4, #4]
   366b0:	bl	2de8c <__assert_fail@plt+0x1b29c>
   366b4:	cmp	r0, #0
   366b8:	str	r0, [r4, #8]
   366bc:	beq	366fc <__assert_fail@plt+0x23b0c>
   366c0:	str	r5, [r0]
   366c4:	mov	r0, r6
   366c8:	pop	{r4, r5, r6, sl, fp, pc}
   366cc:	cmp	r2, r1
   366d0:	bne	3670c <__assert_fail@plt+0x23b1c>
   366d4:	lsl	r0, r2, #1
   366d8:	lsl	r1, r2, #3
   366dc:	str	r0, [r4]
   366e0:	ldr	r0, [r4, #8]
   366e4:	bl	2e984 <__assert_fail@plt+0x1bd94>
   366e8:	cmp	r0, #0
   366ec:	beq	36784 <__assert_fail@plt+0x23b94>
   366f0:	str	r0, [r4, #8]
   366f4:	ldr	r1, [r4, #4]
   366f8:	b	36710 <__assert_fail@plt+0x23b20>
   366fc:	mov	r6, #0
   36700:	str	r6, [r4]
   36704:	str	r6, [r4, #4]
   36708:	b	366c4 <__assert_fail@plt+0x23ad4>
   3670c:	ldr	r0, [r4, #8]
   36710:	ldr	r2, [r0]
   36714:	cmp	r2, r5
   36718:	ble	3674c <__assert_fail@plt+0x23b5c>
   3671c:	cmp	r1, #1
   36720:	blt	3677c <__assert_fail@plt+0x23b8c>
   36724:	add	r3, r0, r1, lsl #2
   36728:	mov	r2, r3
   3672c:	ldr	r6, [r2, #-4]!
   36730:	sub	r1, r1, #1
   36734:	cmp	r1, #0
   36738:	str	r6, [r3]
   3673c:	mov	r3, r2
   36740:	bgt	3672c <__assert_fail@plt+0x23b3c>
   36744:	mov	r1, #0
   36748:	b	3677c <__assert_fail@plt+0x23b8c>
   3674c:	add	r2, r0, r1, lsl #2
   36750:	ldr	r3, [r2, #-4]
   36754:	cmp	r3, r5
   36758:	ble	3677c <__assert_fail@plt+0x23b8c>
   3675c:	sub	r1, r1, #2
   36760:	str	r3, [r2]
   36764:	sub	r1, r1, #1
   36768:	ldr	r3, [r2, #-8]
   3676c:	sub	r2, r2, #4
   36770:	cmp	r3, r5
   36774:	bgt	36760 <__assert_fail@plt+0x23b70>
   36778:	add	r1, r1, #2
   3677c:	str	r5, [r0, r1, lsl #2]
   36780:	b	3668c <__assert_fail@plt+0x23a9c>
   36784:	mov	r6, #0
   36788:	b	366c4 <__assert_fail@plt+0x23ad4>
   3678c:	push	{r4, r5, fp, lr}
   36790:	add	fp, sp, #8
   36794:	mov	r5, r0
   36798:	mov	r4, r1
   3679c:	ldr	r0, [r0]
   367a0:	ldr	r1, [r5, #4]
   367a4:	cmp	r0, r1
   367a8:	bne	367d8 <__assert_fail@plt+0x23be8>
   367ac:	mov	r1, #2
   367b0:	add	r0, r1, r0, lsl #1
   367b4:	str	r0, [r5]
   367b8:	lsl	r1, r0, #2
   367bc:	ldr	r0, [r5, #8]
   367c0:	bl	2e984 <__assert_fail@plt+0x1bd94>
   367c4:	cmp	r0, #0
   367c8:	beq	367f0 <__assert_fail@plt+0x23c00>
   367cc:	str	r0, [r5, #8]
   367d0:	ldr	r1, [r5, #4]
   367d4:	b	367dc <__assert_fail@plt+0x23bec>
   367d8:	ldr	r0, [r5, #8]
   367dc:	add	r2, r1, #1
   367e0:	str	r2, [r5, #4]
   367e4:	str	r4, [r0, r1, lsl #2]
   367e8:	mov	r0, #1
   367ec:	pop	{r4, r5, fp, pc}
   367f0:	mov	r0, #0
   367f4:	pop	{r4, r5, fp, pc}
   367f8:	push	{r4, r5, fp, lr}
   367fc:	add	fp, sp, #8
   36800:	mov	r4, r0
   36804:	ldr	r0, [r1, #4]
   36808:	mov	r5, r1
   3680c:	str	r0, [r4, #4]
   36810:	ldr	r1, [r1, #4]
   36814:	cmp	r1, #1
   36818:	blt	3684c <__assert_fail@plt+0x23c5c>
   3681c:	str	r0, [r4]
   36820:	lsl	r0, r0, #2
   36824:	bl	2de8c <__assert_fail@plt+0x1b29c>
   36828:	cmp	r0, #0
   3682c:	str	r0, [r4, #8]
   36830:	beq	36860 <__assert_fail@plt+0x23c70>
   36834:	ldr	r2, [r5, #4]
   36838:	ldr	r1, [r5, #8]
   3683c:	lsl	r2, r2, #2
   36840:	bl	125f0 <memcpy@plt>
   36844:	mov	r0, #0
   36848:	pop	{r4, r5, fp, pc}
   3684c:	mov	r0, #0
   36850:	str	r0, [r4]
   36854:	str	r0, [r4, #4]
   36858:	str	r0, [r4, #8]
   3685c:	pop	{r4, r5, fp, pc}
   36860:	mov	r0, #0
   36864:	str	r0, [r4]
   36868:	str	r0, [r4, #4]
   3686c:	mov	r0, #12
   36870:	pop	{r4, r5, fp, pc}
   36874:	push	{r4, r5, r6, sl, fp, lr}
   36878:	add	fp, sp, #16
   3687c:	ldr	r2, [r0, #4]
   36880:	cmp	r2, #1
   36884:	blt	368d4 <__assert_fail@plt+0x23ce4>
   36888:	ldr	ip, [r0, #8]
   3688c:	subs	r2, r2, #1
   36890:	mov	r0, #0
   36894:	mov	r3, #0
   36898:	beq	368c4 <__assert_fail@plt+0x23cd4>
   3689c:	mov	r3, #0
   368a0:	mov	lr, #1
   368a4:	add	r4, r2, r3
   368a8:	lsr	r5, r4, #1
   368ac:	ldr	r6, [ip, r5, lsl #2]
   368b0:	cmp	r6, r1
   368b4:	addlt	r3, lr, r4, lsr #1
   368b8:	movge	r2, r5
   368bc:	cmp	r3, r2
   368c0:	bcc	368a4 <__assert_fail@plt+0x23cb4>
   368c4:	ldr	r2, [ip, r3, lsl #2]
   368c8:	cmp	r2, r1
   368cc:	addeq	r0, r3, #1
   368d0:	pop	{r4, r5, r6, sl, fp, pc}
   368d4:	mov	r0, #0
   368d8:	pop	{r4, r5, r6, sl, fp, pc}
   368dc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   368e0:	add	fp, sp, #28
   368e4:	sub	sp, sp, #20
   368e8:	ldr	lr, [r2, #4]
   368ec:	cmp	lr, #0
   368f0:	beq	36bf4 <__assert_fail@plt+0x24004>
   368f4:	mov	r8, r3
   368f8:	mov	sl, r2
   368fc:	add	r7, lr, r3
   36900:	cmp	lr, #1
   36904:	str	r0, [sp, #4]
   36908:	blt	36924 <__assert_fail@plt+0x23d34>
   3690c:	ldr	r3, [sl, #8]
   36910:	mov	r2, lr
   36914:	ldr	r0, [r3], #4
   36918:	subs	r2, r2, #1
   3691c:	add	r7, r0, r7
   36920:	bne	36914 <__assert_fail@plt+0x23d24>
   36924:	ldr	r0, [r1, #32]
   36928:	str	r1, [sp, #12]
   3692c:	ldr	r1, [r1, #68]	; 0x44
   36930:	and	r1, r1, r7
   36934:	add	r2, r1, r1, lsl #1
   36938:	ldr	r1, [r0, r2, lsl #2]
   3693c:	cmp	r1, #1
   36940:	blt	369d0 <__assert_fail@plt+0x23de0>
   36944:	add	r0, r0, r2, lsl #2
   36948:	sub	ip, lr, #1
   3694c:	mov	r3, #0
   36950:	ldr	r9, [r0, #8]
   36954:	ldr	r4, [r9, r3, lsl #2]
   36958:	ldr	r0, [r4]
   3695c:	cmp	r0, r7
   36960:	bne	36984 <__assert_fail@plt+0x23d94>
   36964:	ldrb	r0, [r4, #52]	; 0x34
   36968:	and	r0, r0, #15
   3696c:	cmp	r0, r8
   36970:	bne	36984 <__assert_fail@plt+0x23d94>
   36974:	cmp	sl, #0
   36978:	ldrne	r5, [r4, #40]	; 0x28
   3697c:	cmpne	r5, #0
   36980:	bne	36994 <__assert_fail@plt+0x23da4>
   36984:	add	r3, r3, #1
   36988:	cmp	r3, r1
   3698c:	blt	36954 <__assert_fail@plt+0x23d64>
   36990:	b	369d0 <__assert_fail@plt+0x23de0>
   36994:	ldr	r0, [r5, #4]
   36998:	cmp	r0, lr
   3699c:	bne	36984 <__assert_fail@plt+0x23d94>
   369a0:	mov	r0, ip
   369a4:	add	r6, r0, #1
   369a8:	cmp	r6, #1
   369ac:	blt	36bfc <__assert_fail@plt+0x2400c>
   369b0:	ldr	r6, [sl, #8]
   369b4:	ldr	r2, [r5, #8]
   369b8:	ldr	r6, [r6, r0, lsl #2]
   369bc:	ldr	r2, [r2, r0, lsl #2]
   369c0:	sub	r0, r0, #1
   369c4:	cmp	r2, r6
   369c8:	beq	369a4 <__assert_fail@plt+0x23db4>
   369cc:	b	36984 <__assert_fail@plt+0x23d94>
   369d0:	mov	r0, #56	; 0x38
   369d4:	mov	r1, #1
   369d8:	bl	2b734 <__assert_fail@plt+0x18b44>
   369dc:	cmp	r0, #0
   369e0:	beq	36be0 <__assert_fail@plt+0x23ff0>
   369e4:	add	r5, r0, #4
   369e8:	mov	r4, r0
   369ec:	mov	r1, sl
   369f0:	mov	r0, r5
   369f4:	bl	367f8 <__assert_fail@plt+0x23c08>
   369f8:	cmp	r0, #0
   369fc:	bne	36c08 <__assert_fail@plt+0x24018>
   36a00:	str	r5, [r4, #40]	; 0x28
   36a04:	and	r0, r8, #15
   36a08:	ldr	r6, [sp, #12]
   36a0c:	ldrb	r1, [r4, #52]	; 0x34
   36a10:	and	r1, r1, #240	; 0xf0
   36a14:	orr	r0, r1, r0
   36a18:	strb	r0, [r4, #52]	; 0x34
   36a1c:	ldr	r0, [sl, #4]
   36a20:	cmp	r0, #1
   36a24:	blt	36bc0 <__assert_fail@plt+0x23fd0>
   36a28:	movw	r9, #65280	; 0xff00
   36a2c:	and	r0, r8, #4
   36a30:	mov	ip, r5
   36a34:	and	lr, r8, #1
   36a38:	movt	r9, #3
   36a3c:	str	r0, [sp]
   36a40:	and	r0, r8, #2
   36a44:	mov	r8, #0
   36a48:	str	r0, [sp, #8]
   36a4c:	mov	r0, #0
   36a50:	add	r3, r9, #255	; 0xff
   36a54:	str	r3, [sp, #16]
   36a58:	ldr	r1, [sl, #8]
   36a5c:	ldr	r2, [r6]
   36a60:	ldr	r1, [r1, r8, lsl #2]
   36a64:	add	r1, r2, r1, lsl #3
   36a68:	ldr	r5, [r1, #4]
   36a6c:	and	r1, r5, r3
   36a70:	cmp	r1, #1
   36a74:	beq	36b88 <__assert_fail@plt+0x23f98>
   36a78:	ldrb	r3, [r4, #52]	; 0x34
   36a7c:	mov	r2, #32
   36a80:	and	r1, r5, r9
   36a84:	and	r2, r2, r5, lsr #15
   36a88:	orr	r2, r3, r2
   36a8c:	uxtb	r3, r5
   36a90:	strb	r2, [r4, #52]	; 0x34
   36a94:	cmp	r3, #2
   36a98:	beq	36aac <__assert_fail@plt+0x23ebc>
   36a9c:	cmp	r3, #4
   36aa0:	bne	36ab8 <__assert_fail@plt+0x23ec8>
   36aa4:	mov	r3, #64	; 0x40
   36aa8:	b	36ab0 <__assert_fail@plt+0x23ec0>
   36aac:	mov	r3, #16
   36ab0:	orr	r2, r2, r3
   36ab4:	strb	r2, [r4, #52]	; 0x34
   36ab8:	cmp	r1, #0
   36abc:	beq	36b84 <__assert_fail@plt+0x23f94>
   36ac0:	ldr	r1, [r4, #40]	; 0x28
   36ac4:	cmp	r1, ip
   36ac8:	bne	36b1c <__assert_fail@plt+0x23f2c>
   36acc:	mov	r0, #12
   36ad0:	mov	r6, lr
   36ad4:	mov	r9, ip
   36ad8:	bl	2de8c <__assert_fail@plt+0x1b29c>
   36adc:	cmp	r0, #0
   36ae0:	beq	36bd8 <__assert_fail@plt+0x23fe8>
   36ae4:	mov	r1, sl
   36ae8:	str	r0, [r4, #40]	; 0x28
   36aec:	bl	367f8 <__assert_fail@plt+0x23c08>
   36af0:	cmp	r0, #0
   36af4:	bne	36bd8 <__assert_fail@plt+0x23fe8>
   36af8:	ldrb	r0, [r4, #52]	; 0x34
   36afc:	mov	lr, r6
   36b00:	ldr	r6, [sp, #12]
   36b04:	mov	ip, r9
   36b08:	movw	r9, #65280	; 0xff00
   36b0c:	movt	r9, #3
   36b10:	orr	r0, r0, #128	; 0x80
   36b14:	strb	r0, [r4, #52]	; 0x34
   36b18:	mov	r0, #0
   36b1c:	cmp	lr, #0
   36b20:	bne	36b2c <__assert_fail@plt+0x23f3c>
   36b24:	ands	r1, r5, #256	; 0x100
   36b28:	bne	36b60 <__assert_fail@plt+0x23f70>
   36b2c:	cmp	lr, #0
   36b30:	andsne	r1, r5, #512	; 0x200
   36b34:	bne	36b60 <__assert_fail@plt+0x23f70>
   36b38:	ldr	r1, [sp, #8]
   36b3c:	cmp	r1, #0
   36b40:	bne	36b4c <__assert_fail@plt+0x23f5c>
   36b44:	ands	r1, r5, #4096	; 0x1000
   36b48:	bne	36b60 <__assert_fail@plt+0x23f70>
   36b4c:	ldr	r1, [sp]
   36b50:	cmp	r1, #0
   36b54:	bne	36b84 <__assert_fail@plt+0x23f94>
   36b58:	ands	r1, r5, #16384	; 0x4000
   36b5c:	beq	36b84 <__assert_fail@plt+0x23f94>
   36b60:	subs	r1, r8, r0
   36b64:	bmi	36b80 <__assert_fail@plt+0x23f90>
   36b68:	ldr	r2, [r4, #8]
   36b6c:	cmp	r2, r1
   36b70:	subgt	r2, r2, #1
   36b74:	strgt	r2, [r4, #8]
   36b78:	cmpgt	r2, r1
   36b7c:	bgt	36b9c <__assert_fail@plt+0x23fac>
   36b80:	add	r0, r0, #1
   36b84:	ldr	r3, [sp, #16]
   36b88:	ldr	r1, [sl, #4]
   36b8c:	add	r8, r8, #1
   36b90:	cmp	r8, r1
   36b94:	blt	36a58 <__assert_fail@plt+0x23e68>
   36b98:	b	36bc0 <__assert_fail@plt+0x23fd0>
   36b9c:	ldr	r2, [r4, #12]
   36ba0:	add	r3, r2, r1, lsl #2
   36ba4:	ldr	r3, [r3, #4]
   36ba8:	str	r3, [r2, r1, lsl #2]
   36bac:	add	r1, r1, #1
   36bb0:	ldr	r3, [r4, #8]
   36bb4:	cmp	r1, r3
   36bb8:	blt	36ba0 <__assert_fail@plt+0x23fb0>
   36bbc:	b	36b80 <__assert_fail@plt+0x23f90>
   36bc0:	mov	r0, r6
   36bc4:	mov	r1, r4
   36bc8:	mov	r2, r7
   36bcc:	bl	36c14 <__assert_fail@plt+0x24024>
   36bd0:	cmp	r0, #0
   36bd4:	beq	36bfc <__assert_fail@plt+0x2400c>
   36bd8:	mov	r0, r4
   36bdc:	bl	31d0c <__assert_fail@plt+0x1f11c>
   36be0:	ldr	r1, [sp, #4]
   36be4:	mov	r0, #12
   36be8:	mov	r4, #0
   36bec:	str	r0, [r1]
   36bf0:	b	36bfc <__assert_fail@plt+0x2400c>
   36bf4:	mov	r4, #0
   36bf8:	str	r4, [r0]
   36bfc:	mov	r0, r4
   36c00:	sub	sp, fp, #28
   36c04:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   36c08:	mov	r0, r4
   36c0c:	bl	2bcbc <__assert_fail@plt+0x190cc>
   36c10:	b	36be0 <__assert_fail@plt+0x23ff0>
   36c14:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   36c18:	add	fp, sp, #24
   36c1c:	mov	r7, r0
   36c20:	mov	r0, #0
   36c24:	str	r2, [r1]
   36c28:	mov	r5, r1
   36c2c:	mov	r9, r2
   36c30:	mov	r4, r1
   36c34:	str	r0, [r1, #20]
   36c38:	ldr	r0, [r1, #8]
   36c3c:	str	r0, [r5, #16]!
   36c40:	lsl	r0, r0, #2
   36c44:	bl	2de8c <__assert_fail@plt+0x1b29c>
   36c48:	mov	r8, #12
   36c4c:	cmp	r0, #0
   36c50:	str	r0, [r4, #24]
   36c54:	beq	36ce4 <__assert_fail@plt+0x240f4>
   36c58:	ldr	r0, [r4, #8]
   36c5c:	cmp	r0, #1
   36c60:	blt	36ca4 <__assert_fail@plt+0x240b4>
   36c64:	mov	r6, #0
   36c68:	ldr	r1, [r4, #12]
   36c6c:	ldr	r2, [r7]
   36c70:	ldr	r1, [r1, r6, lsl #2]
   36c74:	add	r2, r2, r1, lsl #3
   36c78:	ldrb	r2, [r2, #4]
   36c7c:	tst	r2, #8
   36c80:	bne	36c98 <__assert_fail@plt+0x240a8>
   36c84:	mov	r0, r5
   36c88:	bl	3678c <__assert_fail@plt+0x23b9c>
   36c8c:	cmp	r0, #0
   36c90:	beq	36ce4 <__assert_fail@plt+0x240f4>
   36c94:	ldr	r0, [r4, #8]
   36c98:	add	r6, r6, #1
   36c9c:	cmp	r6, r0
   36ca0:	blt	36c68 <__assert_fail@plt+0x24078>
   36ca4:	ldr	r1, [r7, #68]	; 0x44
   36ca8:	ldr	r0, [r7, #32]
   36cac:	and	r1, r1, r9
   36cb0:	mov	r5, r0
   36cb4:	add	r2, r1, r1, lsl #1
   36cb8:	ldr	r1, [r5, r2, lsl #2]!
   36cbc:	mov	r6, r5
   36cc0:	ldr	r3, [r6, #4]!
   36cc4:	cmp	r3, r1
   36cc8:	ble	36cec <__assert_fail@plt+0x240fc>
   36ccc:	add	r0, r0, r2, lsl #2
   36cd0:	ldr	r0, [r0, #8]
   36cd4:	add	r2, r1, #1
   36cd8:	mov	r8, #0
   36cdc:	str	r2, [r5]
   36ce0:	str	r4, [r0, r1, lsl #2]
   36ce4:	mov	r0, r8
   36ce8:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   36cec:	add	r7, r0, r2, lsl #2
   36cf0:	mov	r2, #2
   36cf4:	add	r9, r2, r1, lsl #1
   36cf8:	ldr	r0, [r7, #8]!
   36cfc:	lsl	r1, r9, #2
   36d00:	bl	2e984 <__assert_fail@plt+0x1bd94>
   36d04:	cmp	r0, #0
   36d08:	beq	36ce4 <__assert_fail@plt+0x240f4>
   36d0c:	str	r0, [r7]
   36d10:	str	r9, [r6]
   36d14:	ldr	r1, [r5]
   36d18:	b	36cd4 <__assert_fail@plt+0x240e4>
   36d1c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   36d20:	add	fp, sp, #28
   36d24:	sub	sp, sp, #36	; 0x24
   36d28:	mov	r4, r0
   36d2c:	ldr	r0, [r0, #24]
   36d30:	mov	r6, r2
   36d34:	mov	r9, r1
   36d38:	cmp	r0, r1
   36d3c:	ble	36ea4 <__assert_fail@plt+0x242b4>
   36d40:	ldr	r0, [r4, #80]	; 0x50
   36d44:	mov	r1, #4
   36d48:	cmp	r0, #2
   36d4c:	movge	r0, #0
   36d50:	strge	r0, [r4, #16]
   36d54:	strge	r0, [r4, #20]
   36d58:	mov	r0, #0
   36d5c:	tst	r6, #1
   36d60:	strb	r0, [r4, #76]	; 0x4c
   36d64:	str	r0, [r4, #24]
   36d68:	str	r0, [r4, #28]
   36d6c:	str	r0, [r4, #32]
   36d70:	movweq	r1, #6
   36d74:	ldr	r2, [r4, #44]	; 0x2c
   36d78:	ldr	r3, [r4, #52]	; 0x34
   36d7c:	str	r2, [r4, #48]	; 0x30
   36d80:	str	r3, [r4, #56]	; 0x38
   36d84:	str	r1, [r4, #60]	; 0x3c
   36d88:	ldrb	r1, [r4, #75]	; 0x4b
   36d8c:	cmp	r1, #0
   36d90:	bne	36d9c <__assert_fail@plt+0x241ac>
   36d94:	ldr	r1, [r4]
   36d98:	str	r1, [r4, #4]
   36d9c:	mov	r5, r9
   36da0:	cmp	r5, #0
   36da4:	beq	36e30 <__assert_fail@plt+0x24240>
   36da8:	ldr	r1, [r4, #32]
   36dac:	cmp	r5, r1
   36db0:	bge	36eac <__assert_fail@plt+0x242bc>
   36db4:	ldrb	r0, [r4, #76]	; 0x4c
   36db8:	cmp	r0, #0
   36dbc:	bne	37024 <__assert_fail@plt+0x24434>
   36dc0:	sub	r1, r5, #1
   36dc4:	mov	r0, r4
   36dc8:	mov	r2, r6
   36dcc:	bl	37554 <__assert_fail@plt+0x24964>
   36dd0:	str	r0, [r4, #60]	; 0x3c
   36dd4:	ldr	r0, [r4, #80]	; 0x50
   36dd8:	cmp	r0, #2
   36ddc:	blt	36df8 <__assert_fail@plt+0x24208>
   36de0:	ldr	r2, [r4, #28]
   36de4:	ldr	r0, [r4, #8]
   36de8:	sub	r2, r2, r5
   36dec:	add	r1, r0, r5, lsl #2
   36df0:	lsl	r2, r2, #2
   36df4:	bl	12584 <memmove@plt>
   36df8:	ldrb	r0, [r4, #75]	; 0x4b
   36dfc:	cmp	r0, #0
   36e00:	bne	37114 <__assert_fail@plt+0x24524>
   36e04:	ldr	r0, [r4, #28]
   36e08:	ldr	r1, [r4, #32]
   36e0c:	sub	r0, r0, r5
   36e10:	sub	r1, r1, r5
   36e14:	str	r0, [r4, #28]
   36e18:	str	r1, [r4, #32]
   36e1c:	ldrb	r0, [r4, #75]	; 0x4b
   36e20:	cmp	r0, #0
   36e24:	ldreq	r0, [r4, #4]
   36e28:	addeq	r0, r0, r5
   36e2c:	streq	r0, [r4, #4]
   36e30:	str	r9, [r4, #24]
   36e34:	ldr	r0, [r4, #48]	; 0x30
   36e38:	ldr	r1, [r4, #56]	; 0x38
   36e3c:	ldr	r2, [r4, #80]	; 0x50
   36e40:	sub	r0, r0, r5
   36e44:	cmp	r2, #2
   36e48:	sub	r1, r1, r5
   36e4c:	str	r0, [r4, #48]	; 0x30
   36e50:	str	r1, [r4, #56]	; 0x38
   36e54:	blt	36e78 <__assert_fail@plt+0x24288>
   36e58:	ldrb	r0, [r4, #72]	; 0x48
   36e5c:	cmp	r0, #0
   36e60:	beq	36e8c <__assert_fail@plt+0x2429c>
   36e64:	mov	r0, r4
   36e68:	bl	31ec8 <__assert_fail@plt+0x1f2d8>
   36e6c:	cmp	r0, #0
   36e70:	bne	36e9c <__assert_fail@plt+0x242ac>
   36e74:	b	36e94 <__assert_fail@plt+0x242a4>
   36e78:	ldrb	r1, [r4, #75]	; 0x4b
   36e7c:	cmp	r1, #0
   36e80:	bne	371ac <__assert_fail@plt+0x245bc>
   36e84:	str	r0, [r4, #28]
   36e88:	b	36e94 <__assert_fail@plt+0x242a4>
   36e8c:	mov	r0, r4
   36e90:	bl	32504 <__assert_fail@plt+0x1f914>
   36e94:	mov	r0, #0
   36e98:	str	r0, [r4, #40]	; 0x28
   36e9c:	sub	sp, fp, #28
   36ea0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   36ea4:	sub	r5, r9, r0
   36ea8:	b	36da0 <__assert_fail@plt+0x241b0>
   36eac:	ldrb	r2, [r4, #76]	; 0x4c
   36eb0:	ldr	lr, [r4, #28]
   36eb4:	cmp	r2, #0
   36eb8:	bne	3730c <__assert_fail@plt+0x2471c>
   36ebc:	mov	r2, #0
   36ec0:	str	r2, [r4, #28]
   36ec4:	ldr	r3, [r4, #80]	; 0x50
   36ec8:	cmp	r3, #2
   36ecc:	blt	371c4 <__assert_fail@plt+0x245d4>
   36ed0:	ldrb	r2, [r4, #73]	; 0x49
   36ed4:	cmp	r2, #0
   36ed8:	beq	36f94 <__assert_fail@plt+0x243a4>
   36edc:	ldr	r7, [r4]
   36ee0:	sub	r3, r5, r3
   36ee4:	add	ip, r7, r0
   36ee8:	add	r3, ip, r3
   36eec:	add	r8, ip, r5
   36ef0:	cmp	r3, r7
   36ef4:	movcc	r3, r7
   36ef8:	mov	r7, r8
   36efc:	sub	r7, r7, #1
   36f00:	cmp	r7, r3
   36f04:	bcc	36f94 <__assert_fail@plt+0x243a4>
   36f08:	ldrb	r2, [r7]
   36f0c:	and	r2, r2, #192	; 0xc0
   36f10:	cmp	r2, #128	; 0x80
   36f14:	beq	36efc <__assert_fail@plt+0x2430c>
   36f18:	ldr	r0, [r4, #48]	; 0x30
   36f1c:	mov	sl, lr
   36f20:	mov	r1, r7
   36f24:	add	r0, ip, r0
   36f28:	sub	r2, r0, r7
   36f2c:	ldr	r0, [r4, #64]	; 0x40
   36f30:	cmp	r0, #0
   36f34:	bne	373a8 <__assert_fail@plt+0x247b8>
   36f38:	mov	r0, #0
   36f3c:	add	r3, sp, #24
   36f40:	str	r0, [sp, #28]
   36f44:	str	r0, [sp, #24]
   36f48:	add	r0, sp, #20
   36f4c:	bl	2debc <__assert_fail@plt+0x1b2cc>
   36f50:	sub	r1, r8, r7
   36f54:	mvn	r2, #0
   36f58:	cmp	r0, r1
   36f5c:	bcc	36f80 <__assert_fail@plt+0x24390>
   36f60:	cmn	r0, #3
   36f64:	bhi	36f80 <__assert_fail@plt+0x24390>
   36f68:	mov	r2, #0
   36f6c:	sub	r0, r0, r1
   36f70:	str	r2, [r4, #16]
   36f74:	str	r2, [r4, #20]
   36f78:	str	r0, [r4, #28]
   36f7c:	ldr	r2, [sp, #20]
   36f80:	cmn	r2, #1
   36f84:	bne	3727c <__assert_fail@plt+0x2468c>
   36f88:	ldr	r0, [r4, #24]
   36f8c:	ldr	r1, [r4, #32]
   36f90:	mov	lr, sl
   36f94:	add	r8, r1, r0
   36f98:	cmp	r8, r9
   36f9c:	bge	3725c <__assert_fail@plt+0x2466c>
   36fa0:	add	sl, r4, #16
   36fa4:	str	lr, [sp]
   36fa8:	ldr	r0, [r4]
   36fac:	ldr	r2, [r4, #44]	; 0x2c
   36fb0:	mov	r3, sl
   36fb4:	add	r1, r0, r8
   36fb8:	ldr	r0, [sl]
   36fbc:	sub	r7, r2, r8
   36fc0:	mov	r2, r7
   36fc4:	str	r0, [sp, #8]
   36fc8:	ldr	r0, [sl, #4]
   36fcc:	str	r0, [sp, #4]
   36fd0:	add	r0, sp, #24
   36fd4:	bl	2debc <__assert_fail@plt+0x1b2cc>
   36fd8:	sub	r1, r0, #1
   36fdc:	cmn	r1, #3
   36fe0:	bcs	36ff8 <__assert_fail@plt+0x24408>
   36fe4:	ldr	r2, [sp, #24]
   36fe8:	add	r8, r0, r8
   36fec:	cmp	r8, r9
   36ff0:	blt	36fa8 <__assert_fail@plt+0x243b8>
   36ff4:	b	37268 <__assert_fail@plt+0x24678>
   36ff8:	ldr	r3, [sp, #4]
   36ffc:	ldr	r1, [sp, #8]
   37000:	cmp	r7, #0
   37004:	mov	r2, #0
   37008:	cmpne	r0, #0
   3700c:	beq	37018 <__assert_fail@plt+0x24428>
   37010:	ldr	r0, [r4]
   37014:	ldrb	r2, [r0, r8]
   37018:	stm	sl, {r1, r3}
   3701c:	mov	r0, #1
   37020:	b	36fe8 <__assert_fail@plt+0x243f8>
   37024:	ldr	r8, [r4, #28]
   37028:	ldr	sl, [r4, #12]
   3702c:	mov	r0, #0
   37030:	mov	r1, r8
   37034:	add	r2, r0, r1
   37038:	add	r2, r2, r2, lsr #31
   3703c:	asr	r7, r2, #1
   37040:	ldr	r2, [sl, r7, lsl #2]
   37044:	mov	r3, r7
   37048:	cmp	r2, r5
   3704c:	bgt	3705c <__assert_fail@plt+0x2446c>
   37050:	bge	37068 <__assert_fail@plt+0x24478>
   37054:	add	r0, r7, #1
   37058:	mov	r3, r1
   3705c:	cmp	r0, r3
   37060:	mov	r1, r3
   37064:	blt	37034 <__assert_fail@plt+0x24444>
   37068:	cmp	r2, r5
   3706c:	mov	r0, r4
   37070:	mov	r2, r6
   37074:	addlt	r7, r7, #1
   37078:	sub	r1, r7, #1
   3707c:	bl	37554 <__assert_fail@plt+0x24964>
   37080:	cmp	r8, r5
   37084:	str	r0, [r4, #60]	; 0x3c
   37088:	ble	3712c <__assert_fail@plt+0x2453c>
   3708c:	cmp	r7, r5
   37090:	bne	3712c <__assert_fail@plt+0x2453c>
   37094:	ldr	r0, [sl, r5, lsl #2]
   37098:	cmp	r0, r5
   3709c:	bne	3712c <__assert_fail@plt+0x2453c>
   370a0:	ldr	r0, [r4, #8]
   370a4:	sub	r2, r8, r5
   370a8:	lsl	r2, r2, #2
   370ac:	add	r1, r0, r5, lsl #2
   370b0:	bl	12584 <memmove@plt>
   370b4:	ldr	r2, [r4, #28]
   370b8:	ldr	r0, [r4, #4]
   370bc:	add	r1, r0, r5
   370c0:	sub	r2, r2, r5
   370c4:	bl	12584 <memmove@plt>
   370c8:	ldr	r0, [r4, #28]
   370cc:	ldr	r1, [r4, #32]
   370d0:	sub	r0, r0, r5
   370d4:	sub	r1, r1, r5
   370d8:	cmp	r0, #1
   370dc:	str	r0, [r4, #28]
   370e0:	str	r1, [r4, #32]
   370e4:	blt	36e1c <__assert_fail@plt+0x2422c>
   370e8:	ldr	r0, [r4, #12]
   370ec:	mov	r2, #0
   370f0:	add	r1, r0, r5, lsl #2
   370f4:	ldr	r3, [r1, r2, lsl #2]
   370f8:	sub	r3, r3, r5
   370fc:	str	r3, [r0, r2, lsl #2]
   37100:	add	r2, r2, #1
   37104:	ldr	r3, [r4, #28]
   37108:	cmp	r2, r3
   3710c:	blt	370f4 <__assert_fail@plt+0x24504>
   37110:	b	36e1c <__assert_fail@plt+0x2422c>
   37114:	ldr	r2, [r4, #28]
   37118:	ldr	r0, [r4, #4]
   3711c:	add	r1, r0, r5
   37120:	sub	r2, r2, r5
   37124:	bl	12584 <memmove@plt>
   37128:	b	36e04 <__assert_fail@plt+0x24214>
   3712c:	mov	r0, #0
   37130:	strb	r0, [r4, #76]	; 0x4c
   37134:	sub	r0, r5, r9
   37138:	ldr	r1, [r4, #44]	; 0x2c
   3713c:	ldr	r2, [r4, #52]	; 0x34
   37140:	add	r1, r0, r1
   37144:	add	r0, r0, r2
   37148:	str	r1, [r4, #48]	; 0x30
   3714c:	sub	r1, sl, #4
   37150:	str	r0, [r4, #56]	; 0x38
   37154:	mov	r0, r7
   37158:	cmp	r7, #1
   3715c:	blt	37170 <__assert_fail@plt+0x24580>
   37160:	ldr	r2, [r1, r0, lsl #2]
   37164:	sub	r7, r0, #1
   37168:	cmp	r2, r5
   3716c:	beq	37154 <__assert_fail@plt+0x24564>
   37170:	cmp	r0, r8
   37174:	bge	37198 <__assert_fail@plt+0x245a8>
   37178:	ldr	r1, [r4, #8]
   3717c:	ldr	r2, [r1, r0, lsl #2]
   37180:	cmn	r2, #1
   37184:	bne	37198 <__assert_fail@plt+0x245a8>
   37188:	add	r0, r0, #1
   3718c:	cmp	r8, r0
   37190:	bne	3717c <__assert_fail@plt+0x2458c>
   37194:	b	371a0 <__assert_fail@plt+0x245b0>
   37198:	cmp	r0, r8
   3719c:	bne	37210 <__assert_fail@plt+0x24620>
   371a0:	mov	r0, #0
   371a4:	str	r0, [r4, #28]
   371a8:	b	372d0 <__assert_fail@plt+0x246e0>
   371ac:	ldrb	r0, [r4, #72]	; 0x48
   371b0:	cmp	r0, #0
   371b4:	beq	372d8 <__assert_fail@plt+0x246e8>
   371b8:	mov	r0, r4
   371bc:	bl	32498 <__assert_fail@plt+0x1f8a8>
   371c0:	b	36e94 <__assert_fail@plt+0x242a4>
   371c4:	ldr	r3, [r4]
   371c8:	add	r0, r5, r0
   371cc:	ldr	r1, [r4, #64]	; 0x40
   371d0:	add	r0, r0, r3
   371d4:	cmp	r1, #0
   371d8:	ldrb	r0, [r0, #-1]
   371dc:	str	r2, [r4, #32]
   371e0:	ldrbne	r0, [r1, r0]
   371e4:	ldr	r1, [r4, #68]	; 0x44
   371e8:	ubfx	r2, r0, #5, #3
   371ec:	and	r3, r0, #31
   371f0:	ldr	r2, [r1, r2, lsl #2]
   371f4:	mov	r1, #1
   371f8:	tst	r2, r1, lsl r3
   371fc:	moveq	r1, #0
   37200:	cmpeq	r0, #10
   37204:	beq	372f8 <__assert_fail@plt+0x24708>
   37208:	str	r1, [r4, #60]	; 0x3c
   3720c:	b	36e1c <__assert_fail@plt+0x2422c>
   37210:	ldr	r0, [sl, r0, lsl #2]
   37214:	subs	r2, r0, r5
   37218:	str	r2, [r4, #28]
   3721c:	beq	372f0 <__assert_fail@plt+0x24700>
   37220:	cmp	r2, #1
   37224:	blt	37248 <__assert_fail@plt+0x24658>
   37228:	ldr	r0, [r4, #8]
   3722c:	mov	r1, #0
   37230:	mvn	r3, #0
   37234:	str	r3, [r0, r1, lsl #2]
   37238:	add	r1, r1, #1
   3723c:	ldr	r2, [r4, #28]
   37240:	cmp	r1, r2
   37244:	blt	37234 <__assert_fail@plt+0x24644>
   37248:	ldr	r0, [r4, #4]
   3724c:	mov	r1, #255	; 0xff
   37250:	bl	12938 <memset@plt>
   37254:	ldr	r0, [r4, #28]
   37258:	b	372d0 <__assert_fail@plt+0x246e0>
   3725c:	sub	r7, r8, r9
   37260:	str	r7, [r4, #28]
   37264:	b	372b0 <__assert_fail@plt+0x246c0>
   37268:	ldr	lr, [sp]
   3726c:	sub	r7, r8, r9
   37270:	cmn	r2, #1
   37274:	str	r7, [r4, #28]
   37278:	beq	372b0 <__assert_fail@plt+0x246c0>
   3727c:	ldrb	r0, [r4, #78]	; 0x4e
   37280:	cmp	r0, #0
   37284:	bne	37378 <__assert_fail@plt+0x24788>
   37288:	mov	r1, #0
   3728c:	cmp	r2, #10
   37290:	bne	372a4 <__assert_fail@plt+0x246b4>
   37294:	ldrb	r0, [r4, #77]	; 0x4d
   37298:	cmp	r0, #0
   3729c:	movwne	r0, #1
   372a0:	lsl	r1, r0, #1
   372a4:	str	r1, [r4, #60]	; 0x3c
   372a8:	ldr	r7, [r4, #28]
   372ac:	b	372c4 <__assert_fail@plt+0x246d4>
   372b0:	sub	r1, lr, #1
   372b4:	mov	r0, r4
   372b8:	mov	r2, r6
   372bc:	bl	37554 <__assert_fail@plt+0x24964>
   372c0:	str	r0, [r4, #60]	; 0x3c
   372c4:	mov	r0, #0
   372c8:	cmp	r7, #0
   372cc:	bne	37334 <__assert_fail@plt+0x24744>
   372d0:	str	r0, [r4, #32]
   372d4:	b	36e1c <__assert_fail@plt+0x2422c>
   372d8:	ldr	r0, [r4, #64]	; 0x40
   372dc:	cmp	r0, #0
   372e0:	beq	36e94 <__assert_fail@plt+0x242a4>
   372e4:	mov	r0, r4
   372e8:	bl	326f0 <__assert_fail@plt+0x1fb00>
   372ec:	b	36e94 <__assert_fail@plt+0x242a4>
   372f0:	mov	r0, #0
   372f4:	b	372d0 <__assert_fail@plt+0x246e0>
   372f8:	ldrb	r0, [r4, #77]	; 0x4d
   372fc:	cmp	r0, #0
   37300:	movwne	r0, #1
   37304:	lsl	r1, r0, #1
   37308:	b	37208 <__assert_fail@plt+0x24618>
   3730c:	mov	r2, #0
   37310:	strb	r2, [r4, #76]	; 0x4c
   37314:	sub	r2, r5, r9
   37318:	ldr	r3, [r4, #44]	; 0x2c
   3731c:	ldr	r7, [r4, #52]	; 0x34
   37320:	add	r3, r2, r3
   37324:	add	r2, r2, r7
   37328:	str	r3, [r4, #48]	; 0x30
   3732c:	str	r2, [r4, #56]	; 0x38
   37330:	b	36ebc <__assert_fail@plt+0x242cc>
   37334:	cmp	r7, #1
   37338:	blt	3735c <__assert_fail@plt+0x2476c>
   3733c:	ldr	r0, [r4, #8]
   37340:	mov	r1, #0
   37344:	mvn	r2, #0
   37348:	str	r2, [r0, r1, lsl #2]
   3734c:	add	r1, r1, #1
   37350:	ldr	r7, [r4, #28]
   37354:	cmp	r1, r7
   37358:	blt	37348 <__assert_fail@plt+0x24758>
   3735c:	ldrb	r0, [r4, #75]	; 0x4b
   37360:	cmp	r0, #0
   37364:	beq	373a0 <__assert_fail@plt+0x247b0>
   37368:	ldr	r0, [r4, #4]
   3736c:	mov	r1, #255	; 0xff
   37370:	mov	r2, r7
   37374:	b	37250 <__assert_fail@plt+0x24660>
   37378:	mov	r0, r2
   3737c:	mov	r6, r2
   37380:	bl	12914 <iswalnum@plt>
   37384:	mov	r1, #1
   37388:	cmp	r6, #95	; 0x5f
   3738c:	beq	372a4 <__assert_fail@plt+0x246b4>
   37390:	mov	r2, r6
   37394:	cmp	r0, #0
   37398:	beq	37288 <__assert_fail@plt+0x24698>
   3739c:	b	372a4 <__assert_fail@plt+0x246b4>
   373a0:	mov	r0, r7
   373a4:	b	372d0 <__assert_fail@plt+0x246e0>
   373a8:	cmp	r2, #1
   373ac:	blt	373e4 <__assert_fail@plt+0x247f4>
   373b0:	cmp	r2, #6
   373b4:	mov	r1, r2
   373b8:	movge	r1, #6
   373bc:	sub	ip, r1, #1
   373c0:	add	r1, sp, #14
   373c4:	ldrb	r3, [r7, ip]
   373c8:	cmp	ip, #0
   373cc:	ldrb	r3, [r0, r3]
   373d0:	strb	r3, [r1, ip]
   373d4:	sub	r3, ip, #1
   373d8:	mov	ip, r3
   373dc:	bgt	373c4 <__assert_fail@plt+0x247d4>
   373e0:	b	36f38 <__assert_fail@plt+0x24348>
   373e4:	add	r1, sp, #14
   373e8:	b	36f38 <__assert_fail@plt+0x24348>
   373ec:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   373f0:	add	fp, sp, #24
   373f4:	mov	r3, r2
   373f8:	ldr	r2, [r0, #88]	; 0x58
   373fc:	mov	r5, r1
   37400:	mov	r4, r0
   37404:	mov	r1, r3
   37408:	bl	37554 <__assert_fail@plt+0x24964>
   3740c:	ldr	r1, [r5, #8]
   37410:	cmp	r1, #1
   37414:	blt	374a4 <__assert_fail@plt+0x248b4>
   37418:	and	ip, r0, #8
   3741c:	and	lr, r0, #2
   37420:	and	r2, r0, #1
   37424:	ldr	r0, [r4, #84]	; 0x54
   37428:	ldr	r5, [r5, #12]
   3742c:	movw	r8, #65280	; 0xff00
   37430:	mov	r3, #0
   37434:	movt	r8, #3
   37438:	ldr	r4, [r0]
   3743c:	ldr	r0, [r5, r3, lsl #2]
   37440:	add	r7, r4, r0, lsl #3
   37444:	ldr	r7, [r7, #4]
   37448:	uxtb	r6, r7
   3744c:	cmp	r6, #2
   37450:	bne	37498 <__assert_fail@plt+0x248a8>
   37454:	tst	r7, r8
   37458:	beq	374a8 <__assert_fail@plt+0x248b8>
   3745c:	cmp	r2, #0
   37460:	bne	3746c <__assert_fail@plt+0x2487c>
   37464:	ands	r6, r7, #1024	; 0x400
   37468:	bne	37498 <__assert_fail@plt+0x248a8>
   3746c:	cmp	r2, #0
   37470:	andsne	r6, r7, #2048	; 0x800
   37474:	bne	37498 <__assert_fail@plt+0x248a8>
   37478:	cmp	lr, #0
   3747c:	bne	37488 <__assert_fail@plt+0x24898>
   37480:	ands	r6, r7, #8192	; 0x2000
   37484:	bne	37498 <__assert_fail@plt+0x248a8>
   37488:	cmp	ip, #0
   3748c:	bne	374a8 <__assert_fail@plt+0x248b8>
   37490:	ands	r6, r7, #32768	; 0x8000
   37494:	beq	374a8 <__assert_fail@plt+0x248b8>
   37498:	add	r3, r3, #1
   3749c:	cmp	r3, r1
   374a0:	blt	3743c <__assert_fail@plt+0x2484c>
   374a4:	mov	r0, #0
   374a8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   374ac:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   374b0:	add	fp, sp, #24
   374b4:	mov	r8, r0
   374b8:	ldr	r0, [r0, #124]	; 0x7c
   374bc:	cmp	r0, #1
   374c0:	blt	37544 <__assert_fail@plt+0x24954>
   374c4:	mov	r7, #0
   374c8:	ldr	r0, [r8, #132]	; 0x84
   374cc:	ldr	r5, [r0, r7, lsl #2]
   374d0:	ldr	r0, [r5, #16]
   374d4:	cmp	r0, #1
   374d8:	blt	37508 <__assert_fail@plt+0x24918>
   374dc:	mov	r4, #0
   374e0:	ldr	r0, [r5, #20]
   374e4:	ldr	r6, [r0, r4, lsl #2]
   374e8:	ldr	r0, [r6, #16]
   374ec:	bl	2bcbc <__assert_fail@plt+0x190cc>
   374f0:	mov	r0, r6
   374f4:	bl	2bcbc <__assert_fail@plt+0x190cc>
   374f8:	ldr	r0, [r5, #16]
   374fc:	add	r4, r4, #1
   37500:	cmp	r4, r0
   37504:	blt	374e0 <__assert_fail@plt+0x248f0>
   37508:	ldr	r0, [r5, #20]
   3750c:	bl	2bcbc <__assert_fail@plt+0x190cc>
   37510:	ldr	r0, [r5, #8]
   37514:	cmp	r0, #0
   37518:	beq	3752c <__assert_fail@plt+0x2493c>
   3751c:	ldr	r0, [r0, #8]
   37520:	bl	2bcbc <__assert_fail@plt+0x190cc>
   37524:	ldr	r0, [r5, #8]
   37528:	bl	2bcbc <__assert_fail@plt+0x190cc>
   3752c:	mov	r0, r5
   37530:	bl	2bcbc <__assert_fail@plt+0x190cc>
   37534:	ldr	r0, [r8, #124]	; 0x7c
   37538:	add	r7, r7, #1
   3753c:	cmp	r7, r0
   37540:	blt	374c8 <__assert_fail@plt+0x248d8>
   37544:	mov	r0, #0
   37548:	str	r0, [r8, #108]	; 0x6c
   3754c:	str	r0, [r8, #124]	; 0x7c
   37550:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   37554:	push	{r4, r5, fp, lr}
   37558:	add	fp, sp, #8
   3755c:	mov	r4, r0
   37560:	cmn	r1, #1
   37564:	ble	3759c <__assert_fail@plt+0x249ac>
   37568:	ldr	r0, [r4, #48]	; 0x30
   3756c:	cmp	r0, r1
   37570:	beq	37600 <__assert_fail@plt+0x24a10>
   37574:	ldr	r0, [r4, #80]	; 0x50
   37578:	cmp	r0, #2
   3757c:	blt	375a4 <__assert_fail@plt+0x249b4>
   37580:	ldr	r0, [r4, #8]
   37584:	ldr	r5, [r0, r1, lsl #2]
   37588:	cmn	r5, #1
   3758c:	bne	375d4 <__assert_fail@plt+0x249e4>
   37590:	sub	r1, r1, #1
   37594:	cmn	r1, #1
   37598:	bne	37584 <__assert_fail@plt+0x24994>
   3759c:	ldr	r0, [r4, #60]	; 0x3c
   375a0:	pop	{r4, r5, fp, pc}
   375a4:	ldr	r0, [r4, #4]
   375a8:	ldr	r2, [r4, #68]	; 0x44
   375ac:	ldrb	r1, [r0, r1]
   375b0:	ubfx	r0, r1, #5, #3
   375b4:	and	r3, r1, #31
   375b8:	ldr	r2, [r2, r0, lsl #2]
   375bc:	mov	r0, #1
   375c0:	tst	r2, r0, lsl r3
   375c4:	moveq	r0, #0
   375c8:	cmpeq	r1, #10
   375cc:	bne	375fc <__assert_fail@plt+0x24a0c>
   375d0:	b	375ec <__assert_fail@plt+0x249fc>
   375d4:	ldrb	r0, [r4, #78]	; 0x4e
   375d8:	cmp	r0, #0
   375dc:	bne	3760c <__assert_fail@plt+0x24a1c>
   375e0:	mov	r0, #0
   375e4:	cmp	r5, #10
   375e8:	popne	{r4, r5, fp, pc}
   375ec:	ldrb	r0, [r4, #77]	; 0x4d
   375f0:	cmp	r0, #0
   375f4:	movwne	r0, #1
   375f8:	lsl	r0, r0, #1
   375fc:	pop	{r4, r5, fp, pc}
   37600:	and	r0, r2, #2
   37604:	eor	r0, r0, #10
   37608:	pop	{r4, r5, fp, pc}
   3760c:	mov	r0, r5
   37610:	bl	12914 <iswalnum@plt>
   37614:	mov	r1, r0
   37618:	mov	r0, #1
   3761c:	cmp	r5, #95	; 0x5f
   37620:	beq	375fc <__assert_fail@plt+0x24a0c>
   37624:	cmp	r1, #0
   37628:	beq	375e0 <__assert_fail@plt+0x249f0>
   3762c:	b	375fc <__assert_fail@plt+0x24a0c>
   37630:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   37634:	add	fp, sp, #28
   37638:	sub	sp, sp, #4
   3763c:	mov	sl, r0
   37640:	ldr	r0, [r1, #4]
   37644:	cmp	r0, #1
   37648:	blt	37714 <__assert_fail@plt+0x24b24>
   3764c:	ldr	r7, [sl, #84]	; 0x54
   37650:	mov	r8, r2
   37654:	mov	r5, r1
   37658:	mov	r4, #0
   3765c:	ldr	r1, [r5, #8]
   37660:	ldr	r6, [r1, r4, lsl #2]
   37664:	ldr	r1, [r7]
   37668:	add	r2, r1, r6, lsl #3
   3766c:	ldrb	r2, [r2, #4]
   37670:	cmp	r2, #8
   37674:	bne	376e0 <__assert_fail@plt+0x24af0>
   37678:	ldr	r1, [r1, r6, lsl #3]
   3767c:	cmp	r1, #31
   37680:	bgt	376e0 <__assert_fail@plt+0x24af0>
   37684:	ldr	r2, [r7, #80]	; 0x50
   37688:	mov	r3, #1
   3768c:	tst	r2, r3, lsl r1
   37690:	beq	376e0 <__assert_fail@plt+0x24af0>
   37694:	ldr	r0, [sl, #124]	; 0x7c
   37698:	ldr	r9, [sl, #128]	; 0x80
   3769c:	cmp	r0, r9
   376a0:	beq	376f0 <__assert_fail@plt+0x24b00>
   376a4:	mov	r0, #1
   376a8:	mov	r1, #24
   376ac:	bl	2b734 <__assert_fail@plt+0x18b44>
   376b0:	ldr	r1, [sl, #124]	; 0x7c
   376b4:	ldr	r2, [sl, #132]	; 0x84
   376b8:	str	r0, [r2, r1, lsl #2]
   376bc:	ldr	r0, [sl, #132]	; 0x84
   376c0:	ldr	r0, [r0, r1, lsl #2]
   376c4:	cmp	r0, #0
   376c8:	beq	37720 <__assert_fail@plt+0x24b30>
   376cc:	add	r1, r1, #1
   376d0:	str	r6, [r0, #4]
   376d4:	str	r1, [sl, #124]	; 0x7c
   376d8:	str	r8, [r0]
   376dc:	ldr	r0, [r5, #4]
   376e0:	add	r4, r4, #1
   376e4:	cmp	r4, r0
   376e8:	blt	3765c <__assert_fail@plt+0x24a6c>
   376ec:	b	37714 <__assert_fail@plt+0x24b24>
   376f0:	ldr	r0, [sl, #132]	; 0x84
   376f4:	lsl	r1, r9, #3
   376f8:	bl	2e984 <__assert_fail@plt+0x1bd94>
   376fc:	cmp	r0, #0
   37700:	beq	37720 <__assert_fail@plt+0x24b30>
   37704:	lsl	r1, r9, #1
   37708:	str	r1, [sl, #128]	; 0x80
   3770c:	str	r0, [sl, #132]	; 0x84
   37710:	b	376a4 <__assert_fail@plt+0x24ab4>
   37714:	mov	r0, #0
   37718:	sub	sp, fp, #28
   3771c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   37720:	mov	r0, #12
   37724:	b	37718 <__assert_fail@plt+0x24b28>
   37728:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3772c:	add	fp, sp, #28
   37730:	sub	sp, sp, #76	; 0x4c
   37734:	mov	r7, r0
   37738:	ldr	r0, [r1, #4]
   3773c:	cmp	r0, #1
   37740:	blt	37df4 <__assert_fail@plt+0x25204>
   37744:	ldr	r2, [r7, #84]	; 0x54
   37748:	ldr	r0, [r7, #40]	; 0x28
   3774c:	mov	r3, #0
   37750:	str	r7, [sp, #40]	; 0x28
   37754:	str	r1, [sp, #12]
   37758:	str	r0, [sp, #52]	; 0x34
   3775c:	str	r2, [sp, #24]
   37760:	ldr	r0, [r1, #8]
   37764:	str	r3, [sp, #20]
   37768:	ldr	r3, [r0, r3, lsl #2]
   3776c:	ldr	r0, [r2]
   37770:	add	r0, r0, r3, lsl #3
   37774:	mov	r1, r3
   37778:	str	r3, [sp, #48]	; 0x30
   3777c:	ldr	r4, [r0, #4]
   37780:	uxtb	r0, r4
   37784:	cmp	r0, #4
   37788:	bne	37dd8 <__assert_fail@plt+0x251e8>
   3778c:	movw	r0, #65280	; 0xff00
   37790:	movt	r0, #3
   37794:	tst	r4, r0
   37798:	beq	377ec <__assert_fail@plt+0x24bfc>
   3779c:	ldr	r2, [r7, #88]	; 0x58
   377a0:	ldr	r1, [sp, #52]	; 0x34
   377a4:	mov	r0, r7
   377a8:	bl	37554 <__assert_fail@plt+0x24964>
   377ac:	and	r1, r0, #1
   377b0:	tst	r4, #1024	; 0x400
   377b4:	beq	377c0 <__assert_fail@plt+0x24bd0>
   377b8:	cmp	r1, #0
   377bc:	beq	37dd8 <__assert_fail@plt+0x251e8>
   377c0:	tst	r4, #2048	; 0x800
   377c4:	cmpne	r1, #0
   377c8:	bne	37dd8 <__assert_fail@plt+0x251e8>
   377cc:	tst	r4, #8192	; 0x2000
   377d0:	beq	377dc <__assert_fail@plt+0x24bec>
   377d4:	ands	r1, r0, #2
   377d8:	beq	37dd8 <__assert_fail@plt+0x251e8>
   377dc:	tst	r4, #32768	; 0x8000
   377e0:	beq	377ec <__assert_fail@plt+0x24bfc>
   377e4:	ands	r0, r0, #8
   377e8:	beq	37dd8 <__assert_fail@plt+0x251e8>
   377ec:	ldr	r0, [r7, #84]	; 0x54
   377f0:	ldr	r1, [sp, #52]	; 0x34
   377f4:	ldr	r4, [r7, #4]
   377f8:	ldr	r8, [r7, #108]	; 0x6c
   377fc:	str	r0, [sp, #36]	; 0x24
   37800:	mov	r0, r7
   37804:	bl	38268 <__assert_fail@plt+0x25678>
   37808:	cmn	r0, #1
   3780c:	beq	3783c <__assert_fail@plt+0x24c4c>
   37810:	ldr	r1, [r7, #116]	; 0x74
   37814:	add	r0, r0, r0, lsl #1
   37818:	add	r0, r1, r0, lsl #3
   3781c:	ldr	r1, [r0]
   37820:	ldr	r2, [sp, #48]	; 0x30
   37824:	cmp	r1, r2
   37828:	beq	37bc8 <__assert_fail@plt+0x24fd8>
   3782c:	ldrb	r1, [r0, #20]
   37830:	add	r0, r0, #24
   37834:	cmp	r1, #0
   37838:	bne	3781c <__assert_fail@plt+0x24c2c>
   3783c:	ldr	r0, [r7, #124]	; 0x7c
   37840:	cmp	r0, #1
   37844:	mov	r0, r8
   37848:	blt	37bcc <__assert_fail@plt+0x24fdc>
   3784c:	ldr	r0, [sp, #36]	; 0x24
   37850:	ldr	r1, [sp, #48]	; 0x30
   37854:	mov	r3, #0
   37858:	mov	ip, r4
   3785c:	str	r8, [sp, #16]
   37860:	ldr	r0, [r0]
   37864:	ldr	r2, [r0, r1, lsl #3]
   37868:	str	r2, [sp, #32]
   3786c:	ldr	r1, [r7, #132]	; 0x84
   37870:	str	r3, [sp, #28]
   37874:	ldr	r4, [r1, r3, lsl #2]
   37878:	ldr	r1, [r4, #4]
   3787c:	ldr	r0, [r0, r1, lsl #3]
   37880:	cmp	r0, r2
   37884:	bne	37994 <__assert_fail@plt+0x24da4>
   37888:	ldr	r0, [r4, #16]
   3788c:	ldr	r2, [r4]
   37890:	mov	r8, #0
   37894:	str	r4, [sp, #44]	; 0x2c
   37898:	cmp	r0, #1
   3789c:	blt	37964 <__assert_fail@plt+0x24d74>
   378a0:	ldr	r6, [sp, #52]	; 0x34
   378a4:	mov	r5, r2
   378a8:	ldr	r1, [r4, #20]
   378ac:	ldr	sl, [r1, r8, lsl #2]
   378b0:	ldr	r1, [sl, #4]
   378b4:	sub	r9, r1, r5
   378b8:	str	r1, [fp, #-48]	; 0xffffffd0
   378bc:	cmp	r9, #1
   378c0:	blt	378f8 <__assert_fail@plt+0x24d08>
   378c4:	ldr	r2, [r7, #28]
   378c8:	add	r1, r9, r6
   378cc:	cmp	r1, r2
   378d0:	bgt	37940 <__assert_fail@plt+0x24d50>
   378d4:	add	r0, ip, r6
   378d8:	add	r1, ip, r5
   378dc:	mov	r2, r9
   378e0:	mov	r4, ip
   378e4:	bl	128a8 <bcmp@plt>
   378e8:	mov	ip, r4
   378ec:	ldr	r4, [sp, #44]	; 0x2c
   378f0:	cmp	r0, #0
   378f4:	bne	3796c <__assert_fail@plt+0x24d7c>
   378f8:	ldr	r0, [sp, #52]	; 0x34
   378fc:	ldr	r3, [sp, #48]	; 0x30
   37900:	mov	r1, r4
   37904:	mov	r2, sl
   37908:	str	r0, [sp]
   3790c:	mov	r0, r7
   37910:	bl	38384 <__assert_fail@plt+0x25794>
   37914:	cmp	r0, #1
   37918:	bhi	37e04 <__assert_fail@plt+0x25214>
   3791c:	ldr	r2, [fp, #-48]	; 0xffffffd0
   37920:	ldr	r0, [r4, #16]
   37924:	ldr	ip, [r7, #4]
   37928:	add	r8, r8, #1
   3792c:	add	r6, r9, r6
   37930:	cmp	r8, r0
   37934:	mov	r5, r2
   37938:	blt	378a8 <__assert_fail@plt+0x24cb8>
   3793c:	b	37974 <__assert_fail@plt+0x24d84>
   37940:	ldr	r2, [r7, #48]	; 0x30
   37944:	cmp	r1, r2
   37948:	bgt	37970 <__assert_fail@plt+0x24d80>
   3794c:	mov	r0, r7
   37950:	bl	382f0 <__assert_fail@plt+0x25700>
   37954:	cmp	r0, #0
   37958:	bne	37e04 <__assert_fail@plt+0x25214>
   3795c:	ldr	ip, [r7, #4]
   37960:	b	378d4 <__assert_fail@plt+0x24ce4>
   37964:	ldr	r6, [sp, #52]	; 0x34
   37968:	b	37974 <__assert_fail@plt+0x24d84>
   3796c:	ldr	r0, [r4, #16]
   37970:	mov	r2, r5
   37974:	cmp	r8, r0
   37978:	blt	37990 <__assert_fail@plt+0x24da0>
   3797c:	ldr	r0, [sp, #52]	; 0x34
   37980:	cmp	r8, #0
   37984:	addne	r2, r2, #1
   37988:	cmp	r2, r0
   3798c:	ble	379b8 <__assert_fail@plt+0x24dc8>
   37990:	ldr	r8, [sp, #16]
   37994:	ldr	r3, [sp, #28]
   37998:	ldr	r0, [r7, #124]	; 0x7c
   3799c:	add	r3, r3, #1
   379a0:	cmp	r3, r0
   379a4:	bge	37bc0 <__assert_fail@plt+0x24fd0>
   379a8:	ldr	r0, [sp, #36]	; 0x24
   379ac:	ldr	r2, [sp, #32]
   379b0:	ldr	r0, [r0]
   379b4:	b	3786c <__assert_fail@plt+0x24c7c>
   379b8:	ldr	r8, [sp, #16]
   379bc:	ldr	r0, [r4]
   379c0:	mov	sl, r2
   379c4:	cmp	r2, r0
   379c8:	ble	379f4 <__assert_fail@plt+0x24e04>
   379cc:	ldr	r0, [r7, #28]
   379d0:	cmp	r6, r0
   379d4:	bge	37b60 <__assert_fail@plt+0x24f70>
   379d8:	add	r5, r6, #1
   379dc:	add	r1, sl, ip
   379e0:	ldrb	r0, [ip, r6]
   379e4:	ldrb	r1, [r1, #-1]
   379e8:	cmp	r0, r1
   379ec:	beq	379f8 <__assert_fail@plt+0x24e08>
   379f0:	b	37994 <__assert_fail@plt+0x24da4>
   379f4:	mov	r5, r6
   379f8:	ldr	r0, [r7, #100]	; 0x64
   379fc:	mov	r6, r5
   37a00:	ldr	r2, [r0, sl, lsl #2]
   37a04:	cmp	r2, #0
   37a08:	beq	37a54 <__assert_fail@plt+0x24e64>
   37a0c:	ldr	r0, [r2, #8]
   37a10:	cmp	r0, #1
   37a14:	blt	37a54 <__assert_fail@plt+0x24e64>
   37a18:	ldr	r1, [sp, #36]	; 0x24
   37a1c:	ldr	r2, [r2, #12]
   37a20:	ldr	r7, [sp, #32]
   37a24:	ldr	r1, [r1]
   37a28:	ldr	r5, [r2]
   37a2c:	add	r3, r1, r5, lsl #3
   37a30:	ldrb	r3, [r3, #4]
   37a34:	cmp	r3, #9
   37a38:	bne	37a48 <__assert_fail@plt+0x24e58>
   37a3c:	ldr	r3, [r1, r5, lsl #3]
   37a40:	cmp	r3, r7
   37a44:	beq	37a6c <__assert_fail@plt+0x24e7c>
   37a48:	add	r2, r2, #4
   37a4c:	subs	r0, r0, #1
   37a50:	bne	37a28 <__assert_fail@plt+0x24e38>
   37a54:	ldr	r0, [sp, #52]	; 0x34
   37a58:	ldr	r7, [sp, #40]	; 0x28
   37a5c:	add	r2, sl, #1
   37a60:	cmp	sl, r0
   37a64:	blt	379bc <__assert_fail@plt+0x24dcc>
   37a68:	b	37994 <__assert_fail@plt+0x24da4>
   37a6c:	cmn	r5, #1
   37a70:	beq	37a54 <__assert_fail@plt+0x24e64>
   37a74:	ldr	r1, [r4, #8]
   37a78:	mov	r9, r6
   37a7c:	mov	r6, ip
   37a80:	cmp	r1, #0
   37a84:	bne	37ab4 <__assert_fail@plt+0x24ec4>
   37a88:	ldr	r0, [r4]
   37a8c:	mov	r7, #12
   37a90:	sub	r0, sl, r0
   37a94:	add	r1, r0, #1
   37a98:	mov	r0, #12
   37a9c:	bl	2b734 <__assert_fail@plt+0x18b44>
   37aa0:	ldr	r4, [sp, #44]	; 0x2c
   37aa4:	mov	r1, r0
   37aa8:	cmp	r0, #0
   37aac:	str	r0, [r4, #8]
   37ab0:	beq	37e08 <__assert_fail@plt+0x25218>
   37ab4:	mov	r0, #9
   37ab8:	ldr	r3, [r4]
   37abc:	ldr	r2, [r4, #4]
   37ac0:	stm	sp, {r5, sl}
   37ac4:	str	r0, [sp, #8]
   37ac8:	ldr	r0, [sp, #40]	; 0x28
   37acc:	bl	384d4 <__assert_fail@plt+0x258e4>
   37ad0:	ldr	r4, [sp, #44]	; 0x2c
   37ad4:	mov	ip, r6
   37ad8:	cmp	r0, #1
   37adc:	mov	r6, r9
   37ae0:	beq	37a54 <__assert_fail@plt+0x24e64>
   37ae4:	cmp	r0, #0
   37ae8:	bne	37e04 <__assert_fail@plt+0x25214>
   37aec:	ldr	r1, [r4, #12]
   37af0:	ldr	r0, [r4, #16]
   37af4:	ldr	r7, [sp, #40]	; 0x28
   37af8:	cmp	r0, r1
   37afc:	beq	37b98 <__assert_fail@plt+0x24fa8>
   37b00:	mov	r0, #1
   37b04:	mov	r1, #20
   37b08:	bl	2b734 <__assert_fail@plt+0x18b44>
   37b0c:	cmp	r0, #0
   37b10:	beq	37e2c <__assert_fail@plt+0x2523c>
   37b14:	ldr	r1, [sp, #44]	; 0x2c
   37b18:	mov	r2, r0
   37b1c:	ldr	r0, [r1, #16]
   37b20:	ldr	r3, [r1, #20]
   37b24:	str	r2, [r3, r0, lsl #2]
   37b28:	add	r0, r0, #1
   37b2c:	stm	r2, {r5, sl}
   37b30:	ldr	r3, [sp, #48]	; 0x30
   37b34:	str	r0, [r1, #16]
   37b38:	ldr	r0, [sp, #52]	; 0x34
   37b3c:	str	r0, [sp]
   37b40:	mov	r0, r7
   37b44:	bl	38384 <__assert_fail@plt+0x25794>
   37b48:	cmp	r0, #1
   37b4c:	bhi	37e04 <__assert_fail@plt+0x25214>
   37b50:	ldr	ip, [r7, #4]
   37b54:	ldr	r4, [sp, #44]	; 0x2c
   37b58:	mov	r6, r9
   37b5c:	b	37a54 <__assert_fail@plt+0x24e64>
   37b60:	ldr	r0, [r7, #48]	; 0x30
   37b64:	cmp	r6, r0
   37b68:	bge	37994 <__assert_fail@plt+0x24da4>
   37b6c:	add	r5, r6, #1
   37b70:	mov	r0, r7
   37b74:	mov	r9, r6
   37b78:	mov	r1, r5
   37b7c:	bl	37e34 <__assert_fail@plt+0x25244>
   37b80:	cmp	r0, #0
   37b84:	bne	37e04 <__assert_fail@plt+0x25214>
   37b88:	ldr	ip, [r7, #4]
   37b8c:	ldr	r4, [sp, #44]	; 0x2c
   37b90:	mov	r6, r9
   37b94:	b	379dc <__assert_fail@plt+0x24dec>
   37b98:	mov	r1, #1
   37b9c:	orr	r6, r1, r0, lsl #1
   37ba0:	ldr	r0, [r4, #20]
   37ba4:	lsl	r1, r6, #2
   37ba8:	bl	2e984 <__assert_fail@plt+0x1bd94>
   37bac:	cmp	r0, #0
   37bb0:	beq	37e2c <__assert_fail@plt+0x2523c>
   37bb4:	str	r6, [r4, #12]
   37bb8:	str	r0, [r4, #20]
   37bbc:	b	37b00 <__assert_fail@plt+0x24f10>
   37bc0:	ldr	r0, [r7, #108]	; 0x6c
   37bc4:	b	37bcc <__assert_fail@plt+0x24fdc>
   37bc8:	mov	r0, r8
   37bcc:	mov	r1, #0
   37bd0:	cmp	r8, r0
   37bd4:	str	r1, [fp, #-32]	; 0xffffffe0
   37bd8:	bge	37dd8 <__assert_fail@plt+0x251e8>
   37bdc:	add	r0, r8, r8, lsl #1
   37be0:	lsl	r4, r0, #3
   37be4:	ldr	r0, [r7, #116]	; 0x74
   37be8:	ldr	r2, [sp, #48]	; 0x30
   37bec:	ldr	r1, [r0, r4]
   37bf0:	cmp	r1, r2
   37bf4:	bne	37dc0 <__assert_fail@plt+0x251d0>
   37bf8:	add	r0, r0, r4
   37bfc:	ldr	r2, [sp, #52]	; 0x34
   37c00:	ldr	r1, [r0, #4]
   37c04:	cmp	r1, r2
   37c08:	bne	37dc0 <__assert_fail@plt+0x251d0>
   37c0c:	ldr	r2, [r0, #8]
   37c10:	ldr	r3, [r0, #12]
   37c14:	ldr	r0, [sp, #24]
   37c18:	mov	r9, r8
   37c1c:	ldr	r6, [r0, #24]
   37c20:	cmp	r3, r2
   37c24:	bne	37c40 <__assert_fail@plt+0x25050>
   37c28:	ldr	r1, [sp, #48]	; 0x30
   37c2c:	ldr	r0, [r0, #20]
   37c30:	add	r1, r1, r1, lsl #1
   37c34:	add	r0, r0, r1, lsl #2
   37c38:	ldr	r0, [r0, #8]
   37c3c:	b	37c4c <__assert_fail@plt+0x2505c>
   37c40:	ldr	r0, [r0, #12]
   37c44:	ldr	r1, [sp, #48]	; 0x30
   37c48:	add	r0, r0, r1, lsl #2
   37c4c:	ldr	r0, [r0]
   37c50:	ldr	r8, [sp, #52]	; 0x34
   37c54:	ldr	r5, [sp, #40]	; 0x28
   37c58:	str	r2, [fp, #-48]	; 0xffffffd0
   37c5c:	str	r3, [sp, #44]	; 0x2c
   37c60:	add	r7, r0, r0, lsl #1
   37c64:	add	r0, r3, r8
   37c68:	sub	sl, r0, r2
   37c6c:	ldr	r2, [r5, #88]	; 0x58
   37c70:	mov	r0, r5
   37c74:	sub	r1, sl, #1
   37c78:	bl	37554 <__assert_fail@plt+0x24964>
   37c7c:	mov	r3, r0
   37c80:	ldr	r0, [r5, #100]	; 0x64
   37c84:	ldr	r1, [r0, r8, lsl #2]
   37c88:	ldr	r2, [r0, sl, lsl #2]
   37c8c:	cmp	r1, #0
   37c90:	beq	37c9c <__assert_fail@plt+0x250ac>
   37c94:	ldr	r0, [r1, #8]
   37c98:	b	37ca0 <__assert_fail@plt+0x250b0>
   37c9c:	mov	r0, #0
   37ca0:	add	r7, r6, r7, lsl #2
   37ca4:	str	r0, [sp, #36]	; 0x24
   37ca8:	sub	r0, fp, #44	; 0x2c
   37cac:	cmp	r2, #0
   37cb0:	mov	r8, r9
   37cb4:	beq	37d20 <__assert_fail@plt+0x25130>
   37cb8:	ldr	r1, [r2, #40]	; 0x28
   37cbc:	mov	r2, r7
   37cc0:	mov	r6, r3
   37cc4:	mov	r5, r0
   37cc8:	bl	38060 <__assert_fail@plt+0x25470>
   37ccc:	cmp	r0, #0
   37cd0:	str	r0, [fp, #-32]	; 0xffffffe0
   37cd4:	bne	37e14 <__assert_fail@plt+0x25224>
   37cd8:	ldr	r1, [sp, #24]
   37cdc:	sub	r0, fp, #32
   37ce0:	mov	r2, r5
   37ce4:	mov	r3, r6
   37ce8:	bl	368dc <__assert_fail@plt+0x23cec>
   37cec:	ldr	r5, [sp, #40]	; 0x28
   37cf0:	ldr	r1, [r5, #100]	; 0x64
   37cf4:	str	r0, [r1, sl, lsl #2]
   37cf8:	ldr	r0, [fp, #-36]	; 0xffffffdc
   37cfc:	bl	2bcbc <__assert_fail@plt+0x190cc>
   37d00:	ldr	r3, [r5, #100]	; 0x64
   37d04:	ldr	r1, [r3, sl, lsl #2]
   37d08:	cmp	r1, #0
   37d0c:	bne	37d60 <__assert_fail@plt+0x25170>
   37d10:	ldr	r0, [fp, #-32]	; 0xffffffe0
   37d14:	cmp	r0, #0
   37d18:	beq	37d60 <__assert_fail@plt+0x25170>
   37d1c:	b	37dfc <__assert_fail@plt+0x2520c>
   37d20:	ldr	r1, [sp, #24]
   37d24:	sub	r0, fp, #32
   37d28:	mov	r2, r7
   37d2c:	bl	368dc <__assert_fail@plt+0x23cec>
   37d30:	ldr	r1, [r5, #100]	; 0x64
   37d34:	str	r0, [r1, sl, lsl #2]
   37d38:	ldr	r3, [r5, #100]	; 0x64
   37d3c:	ldr	r1, [r3, sl, lsl #2]
   37d40:	cmp	r1, #0
   37d44:	bne	37d60 <__assert_fail@plt+0x25170>
   37d48:	ldr	r0, [fp, #-32]	; 0xffffffe0
   37d4c:	ldr	r1, [fp, #-48]	; 0xffffffd0
   37d50:	ldr	r2, [sp, #44]	; 0x2c
   37d54:	cmp	r0, #0
   37d58:	beq	37d68 <__assert_fail@plt+0x25178>
   37d5c:	b	37dfc <__assert_fail@plt+0x2520c>
   37d60:	ldr	r1, [fp, #-48]	; 0xffffffd0
   37d64:	ldr	r2, [sp, #44]	; 0x2c
   37d68:	cmp	r2, r1
   37d6c:	bne	37dc0 <__assert_fail@plt+0x251d0>
   37d70:	ldr	r1, [sp, #52]	; 0x34
   37d74:	ldr	r0, [r3, r1, lsl #2]
   37d78:	ldr	r1, [sp, #36]	; 0x24
   37d7c:	ldr	r0, [r0, #8]
   37d80:	cmp	r0, r1
   37d84:	ble	37dc0 <__assert_fail@plt+0x251d0>
   37d88:	ldr	r5, [sp, #40]	; 0x28
   37d8c:	ldr	r2, [sp, #52]	; 0x34
   37d90:	mov	r1, r7
   37d94:	mov	r0, r5
   37d98:	bl	37630 <__assert_fail@plt+0x24a40>
   37d9c:	cmp	r0, #0
   37da0:	str	r0, [fp, #-32]	; 0xffffffe0
   37da4:	bne	37dfc <__assert_fail@plt+0x2520c>
   37da8:	mov	r0, r5
   37dac:	mov	r1, r7
   37db0:	bl	37728 <__assert_fail@plt+0x24b38>
   37db4:	cmp	r0, #0
   37db8:	str	r0, [fp, #-32]	; 0xffffffe0
   37dbc:	bne	37dfc <__assert_fail@plt+0x2520c>
   37dc0:	ldr	r7, [sp, #40]	; 0x28
   37dc4:	add	r8, r8, #1
   37dc8:	add	r4, r4, #24
   37dcc:	ldr	r0, [r7, #108]	; 0x6c
   37dd0:	cmp	r8, r0
   37dd4:	blt	37be4 <__assert_fail@plt+0x24ff4>
   37dd8:	ldr	r1, [sp, #12]
   37ddc:	ldr	r3, [sp, #20]
   37de0:	ldr	r2, [sp, #24]
   37de4:	ldr	r0, [r1, #4]
   37de8:	add	r3, r3, #1
   37dec:	cmp	r3, r0
   37df0:	blt	37760 <__assert_fail@plt+0x24b70>
   37df4:	mov	r0, #0
   37df8:	str	r0, [fp, #-32]	; 0xffffffe0
   37dfc:	sub	sp, fp, #28
   37e00:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   37e04:	mov	r7, r0
   37e08:	str	r7, [fp, #-32]	; 0xffffffe0
   37e0c:	mov	r0, r7
   37e10:	b	37dfc <__assert_fail@plt+0x2520c>
   37e14:	mov	r1, r0
   37e18:	ldr	r0, [fp, #-36]	; 0xffffffdc
   37e1c:	mov	r4, r1
   37e20:	bl	2bcbc <__assert_fail@plt+0x190cc>
   37e24:	mov	r0, r4
   37e28:	b	37dfc <__assert_fail@plt+0x2520c>
   37e2c:	mov	r7, #12
   37e30:	b	37e08 <__assert_fail@plt+0x25218>
   37e34:	push	{r4, r5, fp, lr}
   37e38:	add	fp, sp, #8
   37e3c:	mov	r4, r0
   37e40:	ldr	r0, [r0, #36]	; 0x24
   37e44:	mov	r5, #12
   37e48:	cmn	r0, #-536870910	; 0xe0000002
   37e4c:	bhi	37f04 <__assert_fail@plt+0x25314>
   37e50:	ldr	r2, [r4, #48]	; 0x30
   37e54:	cmp	r2, r0, lsl #1
   37e58:	lslge	r2, r0, #1
   37e5c:	mov	r0, r4
   37e60:	cmp	r2, r1
   37e64:	movle	r2, r1
   37e68:	mov	r1, r2
   37e6c:	bl	31e28 <__assert_fail@plt+0x1f238>
   37e70:	cmp	r0, #0
   37e74:	bne	37ec8 <__assert_fail@plt+0x252d8>
   37e78:	ldr	r0, [r4, #100]	; 0x64
   37e7c:	cmp	r0, #0
   37e80:	beq	37ea0 <__assert_fail@plt+0x252b0>
   37e84:	ldr	r1, [r4, #36]	; 0x24
   37e88:	mov	r2, #4
   37e8c:	add	r1, r2, r1, lsl #2
   37e90:	bl	2e984 <__assert_fail@plt+0x1bd94>
   37e94:	cmp	r0, #0
   37e98:	beq	37f04 <__assert_fail@plt+0x25314>
   37e9c:	str	r0, [r4, #100]	; 0x64
   37ea0:	ldrb	r1, [r4, #72]	; 0x48
   37ea4:	ldr	r0, [r4, #80]	; 0x50
   37ea8:	cmp	r1, #0
   37eac:	beq	37ed0 <__assert_fail@plt+0x252e0>
   37eb0:	cmp	r0, #2
   37eb4:	blt	37ee4 <__assert_fail@plt+0x252f4>
   37eb8:	mov	r0, r4
   37ebc:	bl	31ec8 <__assert_fail@plt+0x1f2d8>
   37ec0:	cmp	r0, #0
   37ec4:	beq	37f00 <__assert_fail@plt+0x25310>
   37ec8:	mov	r5, r0
   37ecc:	b	37f04 <__assert_fail@plt+0x25314>
   37ed0:	cmp	r0, #2
   37ed4:	blt	37ef0 <__assert_fail@plt+0x25300>
   37ed8:	mov	r0, r4
   37edc:	bl	32504 <__assert_fail@plt+0x1f914>
   37ee0:	b	37f00 <__assert_fail@plt+0x25310>
   37ee4:	mov	r0, r4
   37ee8:	bl	32498 <__assert_fail@plt+0x1f8a8>
   37eec:	b	37f00 <__assert_fail@plt+0x25310>
   37ef0:	ldr	r0, [r4, #64]	; 0x40
   37ef4:	cmp	r0, #0
   37ef8:	movne	r0, r4
   37efc:	blne	326f0 <__assert_fail@plt+0x1fb00>
   37f00:	mov	r5, #0
   37f04:	mov	r0, r5
   37f08:	pop	{r4, r5, fp, pc}
   37f0c:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   37f10:	add	fp, sp, #24
   37f14:	sub	sp, sp, #16
   37f18:	mov	r8, r0
   37f1c:	mov	r4, r1
   37f20:	ldr	r5, [r1, #40]	; 0x28
   37f24:	ldr	r7, [r1, #84]	; 0x54
   37f28:	ldr	r0, [r1, #100]	; 0x64
   37f2c:	ldr	r1, [r1, #104]	; 0x68
   37f30:	mov	r6, r2
   37f34:	cmp	r5, r1
   37f38:	ble	37f48 <__assert_fail@plt+0x25358>
   37f3c:	str	r6, [r0, r5, lsl #2]
   37f40:	str	r5, [r4, #104]	; 0x68
   37f44:	b	37fec <__assert_fail@plt+0x253fc>
   37f48:	ldr	r1, [r0, r5, lsl #2]
   37f4c:	cmp	r1, #0
   37f50:	beq	37f8c <__assert_fail@plt+0x2539c>
   37f54:	ldr	r2, [r1, #40]	; 0x28
   37f58:	cmp	r6, #0
   37f5c:	beq	37f94 <__assert_fail@plt+0x253a4>
   37f60:	ldr	r6, [r6, #40]	; 0x28
   37f64:	mov	r0, sp
   37f68:	mov	r1, r6
   37f6c:	bl	38060 <__assert_fail@plt+0x25470>
   37f70:	cmp	r0, #0
   37f74:	str	r0, [r8]
   37f78:	bne	38058 <__assert_fail@plt+0x25468>
   37f7c:	ldr	r0, [r4, #40]	; 0x28
   37f80:	clz	r1, r6
   37f84:	lsr	r9, r1, #5
   37f88:	b	37fac <__assert_fail@plt+0x253bc>
   37f8c:	str	r6, [r0, r5, lsl #2]
   37f90:	b	37fec <__assert_fail@plt+0x253fc>
   37f94:	vldr	d16, [r2]
   37f98:	ldr	r0, [r2, #8]
   37f9c:	mov	r9, #1
   37fa0:	str	r0, [sp, #8]
   37fa4:	mov	r0, r5
   37fa8:	vstr	d16, [sp]
   37fac:	ldr	r2, [r4, #88]	; 0x58
   37fb0:	sub	r1, r0, #1
   37fb4:	mov	r0, r4
   37fb8:	bl	37554 <__assert_fail@plt+0x24964>
   37fbc:	mov	r3, r0
   37fc0:	mov	r2, sp
   37fc4:	mov	r0, r8
   37fc8:	mov	r1, r7
   37fcc:	bl	368dc <__assert_fail@plt+0x23cec>
   37fd0:	mov	r6, r0
   37fd4:	ldr	r0, [r4, #100]	; 0x64
   37fd8:	cmp	r9, #0
   37fdc:	str	r6, [r0, r5, lsl #2]
   37fe0:	bne	37fec <__assert_fail@plt+0x253fc>
   37fe4:	ldr	r0, [sp, #8]
   37fe8:	bl	2bcbc <__assert_fail@plt+0x190cc>
   37fec:	cmp	r6, #0
   37ff0:	ldrne	r0, [r7, #76]	; 0x4c
   37ff4:	cmpne	r0, #0
   37ff8:	bne	38008 <__assert_fail@plt+0x25418>
   37ffc:	mov	r0, r6
   38000:	sub	sp, fp, #24
   38004:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   38008:	add	r7, r6, #4
   3800c:	mov	r0, r4
   38010:	mov	r2, r5
   38014:	mov	r1, r7
   38018:	bl	37630 <__assert_fail@plt+0x24a40>
   3801c:	cmp	r0, #0
   38020:	str	r0, [r8]
   38024:	bne	38058 <__assert_fail@plt+0x25468>
   38028:	ldrb	r0, [r6, #52]	; 0x34
   3802c:	tst	r0, #64	; 0x40
   38030:	beq	37ffc <__assert_fail@plt+0x2540c>
   38034:	mov	r0, r4
   38038:	mov	r1, r7
   3803c:	bl	37728 <__assert_fail@plt+0x24b38>
   38040:	str	r0, [r8]
   38044:	cmp	r0, #0
   38048:	mov	r6, #0
   3804c:	ldreq	r0, [r4, #100]	; 0x64
   38050:	ldreq	r6, [r0, r5, lsl #2]
   38054:	b	37ffc <__assert_fail@plt+0x2540c>
   38058:	mov	r6, #0
   3805c:	b	37ffc <__assert_fail@plt+0x2540c>
   38060:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   38064:	add	fp, sp, #28
   38068:	sub	sp, sp, #20
   3806c:	mov	r8, r2
   38070:	cmp	r1, #0
   38074:	str	r0, [sp, #16]
   38078:	beq	381b4 <__assert_fail@plt+0x255c4>
   3807c:	ldr	r0, [r1, #4]
   38080:	mov	r6, r1
   38084:	cmp	r8, #0
   38088:	beq	381a0 <__assert_fail@plt+0x255b0>
   3808c:	cmp	r0, #1
   38090:	blt	381a0 <__assert_fail@plt+0x255b0>
   38094:	ldr	r1, [r8, #4]
   38098:	cmp	r1, #1
   3809c:	blt	381a0 <__assert_fail@plt+0x255b0>
   380a0:	ldr	r4, [sp, #16]
   380a4:	add	r0, r1, r0
   380a8:	str	r0, [r4]
   380ac:	lsl	r0, r0, #2
   380b0:	bl	2de8c <__assert_fail@plt+0x1b29c>
   380b4:	cmp	r0, #0
   380b8:	str	r0, [r4, #8]
   380bc:	beq	38260 <__assert_fail@plt+0x25670>
   380c0:	ldr	r9, [r8, #4]
   380c4:	ldr	lr, [r6, #4]
   380c8:	mov	r7, #0
   380cc:	mov	r1, #0
   380d0:	cmp	r9, #0
   380d4:	movwgt	r1, #1
   380d8:	cmp	lr, #1
   380dc:	blt	381f4 <__assert_fail@plt+0x25604>
   380e0:	mov	r2, #0
   380e4:	mov	ip, #0
   380e8:	str	r2, [sp, #8]
   380ec:	mov	r2, #0
   380f0:	str	r2, [sp, #12]
   380f4:	mov	r2, #0
   380f8:	ldr	r4, [sp, #12]
   380fc:	mov	r7, ip
   38100:	tst	r1, #1
   38104:	beq	38224 <__assert_fail@plt+0x25634>
   38108:	ldr	r1, [r8, #8]
   3810c:	ldr	r3, [r1, r7, lsl #2]
   38110:	ldr	r1, [r6, #8]
   38114:	ldr	sl, [r1, r2, lsl #2]
   38118:	cmp	sl, r3
   3811c:	ble	38144 <__assert_fail@plt+0x25554>
   38120:	add	r7, r7, #1
   38124:	str	r3, [r0, r4, lsl #2]
   38128:	mov	r1, #0
   3812c:	add	r4, r4, #1
   38130:	cmp	r9, r7
   38134:	movwgt	r1, #1
   38138:	cmp	lr, r2
   3813c:	bgt	38100 <__assert_fail@plt+0x25510>
   38140:	b	381f8 <__assert_fail@plt+0x25608>
   38144:	add	r1, r7, #1
   38148:	str	sl, [r0, r4, lsl #2]
   3814c:	mov	ip, r7
   38150:	add	r2, r2, #1
   38154:	str	r1, [sp, #4]
   38158:	ldr	r9, [r8, #4]
   3815c:	ldr	lr, [r6, #4]
   38160:	moveq	ip, r1
   38164:	mov	r1, #0
   38168:	ldr	r5, [sp, #8]
   3816c:	cmp	r9, ip
   38170:	sub	r5, r5, #1
   38174:	movwgt	r1, #1
   38178:	cmp	lr, r2
   3817c:	str	r5, [sp, #8]
   38180:	add	r5, r4, #1
   38184:	str	r5, [sp, #12]
   38188:	bgt	380f8 <__assert_fail@plt+0x25508>
   3818c:	ldr	r2, [sp, #4]
   38190:	cmp	sl, r3
   38194:	add	r4, r4, #1
   38198:	moveq	r7, r2
   3819c:	b	381f8 <__assert_fail@plt+0x25608>
   381a0:	cmp	r0, #1
   381a4:	blt	381b4 <__assert_fail@plt+0x255c4>
   381a8:	ldr	r0, [sp, #16]
   381ac:	mov	r1, r6
   381b0:	b	381d0 <__assert_fail@plt+0x255e0>
   381b4:	cmp	r8, #0
   381b8:	beq	381dc <__assert_fail@plt+0x255ec>
   381bc:	ldr	r0, [r8, #4]
   381c0:	cmp	r0, #1
   381c4:	blt	381dc <__assert_fail@plt+0x255ec>
   381c8:	ldr	r0, [sp, #16]
   381cc:	mov	r1, r8
   381d0:	sub	sp, fp, #28
   381d4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   381d8:	b	367f8 <__assert_fail@plt+0x23c08>
   381dc:	ldr	r1, [sp, #16]
   381e0:	mov	r0, #0
   381e4:	str	r0, [r1]
   381e8:	str	r0, [r1, #4]
   381ec:	str	r0, [r1, #8]
   381f0:	b	38258 <__assert_fail@plt+0x25668>
   381f4:	mov	r4, #0
   381f8:	cmp	r1, #0
   381fc:	beq	3824c <__assert_fail@plt+0x2565c>
   38200:	ldr	r1, [r8, #8]
   38204:	sub	r2, r9, r7
   38208:	add	r0, r0, r4, lsl #2
   3820c:	lsl	r2, r2, #2
   38210:	add	r1, r1, r7, lsl #2
   38214:	bl	125f0 <memcpy@plt>
   38218:	sub	r0, r4, r7
   3821c:	add	r4, r0, r9
   38220:	b	3824c <__assert_fail@plt+0x2565c>
   38224:	ldr	r1, [r6, #8]
   38228:	add	r0, r0, r4, lsl #2
   3822c:	add	r1, r1, r2, lsl #2
   38230:	sub	r2, lr, r2
   38234:	lsl	r2, r2, #2
   38238:	bl	125f0 <memcpy@plt>
   3823c:	ldr	r0, [r6, #4]
   38240:	ldr	r1, [sp, #8]
   38244:	add	r0, r0, r1
   38248:	add	r4, r0, r4
   3824c:	ldr	r0, [sp, #16]
   38250:	str	r4, [r0, #4]
   38254:	mov	r0, #0
   38258:	sub	sp, fp, #28
   3825c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   38260:	mov	r0, #12
   38264:	b	38258 <__assert_fail@plt+0x25668>
   38268:	push	{r4, r5, r6, r7, fp, lr}
   3826c:	add	fp, sp, #16
   38270:	ldr	lr, [r0, #108]	; 0x6c
   38274:	mov	ip, r0
   38278:	cmp	lr, #1
   3827c:	blt	382c0 <__assert_fail@plt+0x256d0>
   38280:	ldr	r2, [ip, #116]	; 0x74
   38284:	mov	r0, #0
   38288:	mov	r3, #1
   3828c:	mov	r4, lr
   38290:	add	r5, r0, r4
   38294:	add	r5, r5, r5, lsr #31
   38298:	asr	r6, r5, #1
   3829c:	add	r7, r6, r6, lsl #1
   382a0:	add	r7, r2, r7, lsl #3
   382a4:	ldr	r7, [r7, #4]
   382a8:	cmp	r7, r1
   382ac:	addlt	r0, r3, r5, asr #1
   382b0:	movge	r4, r6
   382b4:	cmp	r0, r4
   382b8:	blt	38290 <__assert_fail@plt+0x256a0>
   382bc:	b	382c4 <__assert_fail@plt+0x256d4>
   382c0:	mov	r0, #0
   382c4:	cmp	r0, lr
   382c8:	bge	382e8 <__assert_fail@plt+0x256f8>
   382cc:	ldr	r2, [ip, #116]	; 0x74
   382d0:	add	r3, r0, r0, lsl #1
   382d4:	add	r2, r2, r3, lsl #3
   382d8:	ldr	r2, [r2, #4]
   382dc:	cmp	r2, r1
   382e0:	mvnne	r0, #0
   382e4:	pop	{r4, r5, r6, r7, fp, pc}
   382e8:	mvn	r0, #0
   382ec:	pop	{r4, r5, r6, r7, fp, pc}
   382f0:	push	{r4, r5, r6, r7, fp, lr}
   382f4:	add	fp, sp, #16
   382f8:	mov	r5, r0
   382fc:	ldr	r0, [r0, #36]	; 0x24
   38300:	mov	r4, r1
   38304:	ldr	r7, [r5, #104]	; 0x68
   38308:	cmp	r0, r1
   3830c:	bgt	3831c <__assert_fail@plt+0x2572c>
   38310:	ldr	r1, [r5, #48]	; 0x30
   38314:	cmp	r0, r1
   38318:	blt	38334 <__assert_fail@plt+0x25744>
   3831c:	ldr	r0, [r5, #28]
   38320:	cmp	r0, r4
   38324:	bgt	3834c <__assert_fail@plt+0x2575c>
   38328:	ldr	r1, [r5, #48]	; 0x30
   3832c:	cmp	r0, r1
   38330:	bge	3834c <__assert_fail@plt+0x2575c>
   38334:	add	r1, r4, #1
   38338:	mov	r0, r5
   3833c:	bl	37e34 <__assert_fail@plt+0x25244>
   38340:	mov	r6, r0
   38344:	cmp	r0, #0
   38348:	bne	3837c <__assert_fail@plt+0x2578c>
   3834c:	mov	r6, #0
   38350:	cmp	r7, r4
   38354:	bge	3837c <__assert_fail@plt+0x2578c>
   38358:	sub	r0, r4, r7
   3835c:	mov	r1, #0
   38360:	mov	r6, #0
   38364:	lsl	r2, r0, #2
   38368:	ldr	r0, [r5, #100]	; 0x64
   3836c:	add	r0, r0, r7, lsl #2
   38370:	add	r0, r0, #4
   38374:	bl	12938 <memset@plt>
   38378:	str	r4, [r5, #104]	; 0x68
   3837c:	mov	r0, r6
   38380:	pop	{r4, r5, r6, r7, fp, pc}
   38384:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   38388:	add	fp, sp, #28
   3838c:	sub	sp, sp, #12
   38390:	mov	r6, r2
   38394:	mov	r4, r0
   38398:	mov	r0, #8
   3839c:	mov	r7, r3
   383a0:	ldr	r2, [r2]
   383a4:	mov	r8, r1
   383a8:	ldr	r3, [r6, #4]
   383ac:	str	r0, [sp, #8]
   383b0:	add	r1, r6, #8
   383b4:	mov	r0, r4
   383b8:	ldr	r5, [fp, #8]
   383bc:	str	r7, [sp]
   383c0:	str	r5, [sp, #4]
   383c4:	bl	384d4 <__assert_fail@plt+0x258e4>
   383c8:	cmp	r0, #0
   383cc:	beq	383d8 <__assert_fail@plt+0x257e8>
   383d0:	sub	sp, fp, #28
   383d4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   383d8:	ldr	r0, [r4, #108]	; 0x6c
   383dc:	ldr	r1, [r4, #112]	; 0x70
   383e0:	ldr	r9, [r6, #4]
   383e4:	ldr	sl, [r8]
   383e8:	cmp	r0, r1
   383ec:	blt	3843c <__assert_fail@plt+0x2584c>
   383f0:	ldr	r0, [r4, #116]	; 0x74
   383f4:	add	r1, r1, r1, lsl #1
   383f8:	lsl	r1, r1, #4
   383fc:	bl	2e984 <__assert_fail@plt+0x1bd94>
   38400:	cmp	r0, #0
   38404:	beq	384c4 <__assert_fail@plt+0x258d4>
   38408:	str	r0, [r4, #116]	; 0x74
   3840c:	ldr	r1, [r4, #108]	; 0x6c
   38410:	ldr	r2, [r4, #112]	; 0x70
   38414:	add	r1, r1, r1, lsl #1
   38418:	add	r0, r0, r1, lsl #3
   3841c:	add	r1, r2, r2, lsl #1
   38420:	lsl	r2, r1, #3
   38424:	mov	r1, #0
   38428:	bl	12938 <memset@plt>
   3842c:	ldr	r1, [r4, #112]	; 0x70
   38430:	ldr	r0, [r4, #108]	; 0x6c
   38434:	lsl	r1, r1, #1
   38438:	str	r1, [r4, #112]	; 0x70
   3843c:	ldr	r1, [r4, #116]	; 0x74
   38440:	cmp	r0, #1
   38444:	blt	38464 <__assert_fail@plt+0x25874>
   38448:	sub	r2, r0, #1
   3844c:	add	r2, r2, r2, lsl #1
   38450:	add	r2, r1, r2, lsl #3
   38454:	ldr	r3, [r2, #4]
   38458:	cmp	r3, r5
   3845c:	moveq	r3, #1
   38460:	strbeq	r3, [r2, #20]
   38464:	add	r2, r0, r0, lsl #1
   38468:	cmp	r9, sl
   3846c:	mov	r3, #0
   38470:	mov	ip, #0
   38474:	add	r0, r0, #1
   38478:	mvneq	r3, #0
   3847c:	str	r7, [r1, r2, lsl #3]!
   38480:	stmib	r1, {r5, sl}
   38484:	str	r9, [r1, #12]
   38488:	str	r3, [r1, #16]
   3848c:	str	r0, [r4, #108]	; 0x6c
   38490:	strb	ip, [r1, #20]
   38494:	sub	r0, r9, sl
   38498:	ldr	r1, [r4, #120]	; 0x78
   3849c:	cmp	r1, r0
   384a0:	strlt	r0, [r4, #120]	; 0x78
   384a4:	ldr	r0, [r6, #4]
   384a8:	ldr	r1, [r8]
   384ac:	add	r0, r0, r5
   384b0:	sub	r1, r0, r1
   384b4:	mov	r0, r4
   384b8:	sub	sp, fp, #28
   384bc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   384c0:	b	382f0 <__assert_fail@plt+0x25700>
   384c4:	ldr	r0, [r4, #116]	; 0x74
   384c8:	bl	2bcbc <__assert_fail@plt+0x190cc>
   384cc:	mov	r0, #12
   384d0:	b	383d0 <__assert_fail@plt+0x257e0>
   384d4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   384d8:	add	fp, sp, #28
   384dc:	sub	sp, sp, #84	; 0x54
   384e0:	ldr	sl, [r0, #84]	; 0x54
   384e4:	mov	r6, r3
   384e8:	mov	r3, r1
   384ec:	mov	r1, #0
   384f0:	ldr	r5, [fp, #12]
   384f4:	mov	r8, r2
   384f8:	str	r0, [sp, #36]	; 0x24
   384fc:	str	r1, [fp, #-52]	; 0xffffffcc
   38500:	ldr	r4, [r3, #4]
   38504:	ldr	r1, [sl]
   38508:	str	sl, [sp, #20]
   3850c:	ldr	r7, [r1, r2, lsl #3]
   38510:	ldr	r1, [r0, #120]	; 0x78
   38514:	add	r2, r1, r5
   38518:	cmp	r4, r2
   3851c:	str	r7, [sp, #24]
   38520:	ble	389dc <__assert_fail@plt+0x25dec>
   38524:	ldr	r1, [r0, #40]	; 0x28
   38528:	ldr	r4, [r3]
   3852c:	ldr	r2, [r0, #88]	; 0x58
   38530:	ldr	r9, [r3, #8]
   38534:	str	r3, [sp, #16]
   38538:	str	r1, [sp, #12]
   3853c:	ldr	r1, [r0, #100]	; 0x64
   38540:	cmp	r4, #0
   38544:	str	r9, [r0, #100]	; 0x64
   38548:	moveq	r4, r6
   3854c:	str	r4, [r0, #40]	; 0x28
   38550:	str	r1, [sp, #8]
   38554:	sub	r1, r4, #1
   38558:	bl	37554 <__assert_fail@plt+0x24964>
   3855c:	cmp	r4, r6
   38560:	bne	38628 <__assert_fail@plt+0x25a38>
   38564:	str	r0, [sp, #44]	; 0x2c
   38568:	mov	r0, #1
   3856c:	str	r0, [sp, #52]	; 0x34
   38570:	str	r0, [sp, #48]	; 0x30
   38574:	mov	r0, #4
   38578:	bl	2de8c <__assert_fail@plt+0x1b29c>
   3857c:	cmp	r0, #0
   38580:	str	r0, [sp, #56]	; 0x38
   38584:	beq	38a58 <__assert_fail@plt+0x25e68>
   38588:	ldr	r3, [fp, #16]
   3858c:	str	r8, [r0]
   38590:	mov	r0, #0
   38594:	add	r1, sp, #48	; 0x30
   38598:	mov	r2, r7
   3859c:	str	r0, [fp, #-52]	; 0xffffffcc
   385a0:	mov	r0, sl
   385a4:	bl	38a78 <__assert_fail@plt+0x25e88>
   385a8:	ldr	r8, [sp, #36]	; 0x24
   385ac:	cmp	r0, #0
   385b0:	mov	r9, r5
   385b4:	str	r0, [fp, #-52]	; 0xffffffcc
   385b8:	bne	38a48 <__assert_fail@plt+0x25e58>
   385bc:	ldr	r0, [sp, #52]	; 0x34
   385c0:	cmp	r0, #0
   385c4:	beq	385f0 <__assert_fail@plt+0x25a00>
   385c8:	ldr	r0, [fp, #16]
   385cc:	ldr	r3, [sp, #24]
   385d0:	add	r1, sp, #48	; 0x30
   385d4:	mov	r2, r4
   385d8:	str	r0, [sp]
   385dc:	mov	r0, r8
   385e0:	bl	38ba8 <__assert_fail@plt+0x25fb8>
   385e4:	cmp	r0, #0
   385e8:	str	r0, [fp, #-52]	; 0xffffffcc
   385ec:	bne	38a48 <__assert_fail@plt+0x25e58>
   385f0:	ldr	r3, [sp, #44]	; 0x2c
   385f4:	sub	r0, fp, #52	; 0x34
   385f8:	add	r2, sp, #48	; 0x30
   385fc:	mov	r1, sl
   38600:	bl	368dc <__assert_fail@plt+0x23cec>
   38604:	mov	r6, r0
   38608:	cmp	r0, #0
   3860c:	bne	3861c <__assert_fail@plt+0x25a2c>
   38610:	ldr	r0, [fp, #-52]	; 0xffffffcc
   38614:	cmp	r0, #0
   38618:	bne	389c4 <__assert_fail@plt+0x25dd4>
   3861c:	ldr	r0, [r8, #100]	; 0x64
   38620:	str	r6, [r0, r4, lsl #2]
   38624:	b	386a0 <__assert_fail@plt+0x25ab0>
   38628:	ldr	r6, [r9, r4, lsl #2]
   3862c:	cmp	r6, #0
   38630:	beq	3865c <__assert_fail@plt+0x25a6c>
   38634:	ldrb	r1, [r6, #52]	; 0x34
   38638:	ldr	r8, [sp, #36]	; 0x24
   3863c:	mov	r9, r5
   38640:	tst	r1, #64	; 0x40
   38644:	bne	38678 <__assert_fail@plt+0x25a88>
   38648:	mov	r0, #0
   3864c:	str	r0, [sp, #52]	; 0x34
   38650:	str	r0, [sp, #48]	; 0x30
   38654:	str	r0, [sp, #56]	; 0x38
   38658:	b	386a0 <__assert_fail@plt+0x25ab0>
   3865c:	ldr	r8, [sp, #36]	; 0x24
   38660:	mov	r6, #0
   38664:	mov	r9, r5
   38668:	str	r6, [sp, #52]	; 0x34
   3866c:	str	r6, [sp, #48]	; 0x30
   38670:	str	r6, [sp, #56]	; 0x38
   38674:	b	386a0 <__assert_fail@plt+0x25ab0>
   38678:	str	r0, [sp, #44]	; 0x2c
   3867c:	add	r1, r6, #4
   38680:	add	r0, sp, #48	; 0x30
   38684:	bl	367f8 <__assert_fail@plt+0x23c08>
   38688:	cmp	r0, #0
   3868c:	str	r0, [fp, #-52]	; 0xffffffcc
   38690:	bne	38a70 <__assert_fail@plt+0x25e80>
   38694:	ldrb	r0, [r6, #52]	; 0x34
   38698:	tst	r0, #64	; 0x40
   3869c:	bne	385bc <__assert_fail@plt+0x259cc>
   386a0:	cmp	r4, r9
   386a4:	bge	38958 <__assert_fail@plt+0x25d68>
   386a8:	str	r4, [sp, #44]	; 0x2c
   386ac:	ldr	r4, [sp, #24]
   386b0:	add	r5, sp, #48	; 0x30
   386b4:	mov	r1, #0
   386b8:	ldr	r0, [r8, #120]	; 0x78
   386bc:	cmp	r1, r0
   386c0:	bgt	38954 <__assert_fail@plt+0x25d64>
   386c4:	mov	r0, #0
   386c8:	str	r1, [sp, #32]
   386cc:	ldr	r1, [sp, #44]	; 0x2c
   386d0:	str	r0, [sp, #52]	; 0x34
   386d4:	ldr	r0, [r8, #100]	; 0x64
   386d8:	add	r7, r1, #1
   386dc:	ldr	r0, [r0, r7, lsl #2]
   386e0:	cmp	r0, #0
   386e4:	beq	38700 <__assert_fail@plt+0x25b10>
   386e8:	add	r1, r0, #4
   386ec:	mov	r0, r5
   386f0:	bl	36450 <__assert_fail@plt+0x23860>
   386f4:	cmp	r0, #0
   386f8:	str	r0, [fp, #-52]	; 0xffffffcc
   386fc:	bne	389c4 <__assert_fail@plt+0x25dd4>
   38700:	cmp	r6, #0
   38704:	beq	3888c <__assert_fail@plt+0x25c9c>
   38708:	mov	r0, #0
   3870c:	str	r7, [sp, #28]
   38710:	ldr	r7, [r8, #84]	; 0x54
   38714:	str	r0, [fp, #-32]	; 0xffffffe0
   38718:	str	r0, [fp, #-44]	; 0xffffffd4
   3871c:	str	r0, [fp, #-48]	; 0xffffffd0
   38720:	str	r0, [fp, #-40]	; 0xffffffd8
   38724:	ldr	r1, [r6, #20]
   38728:	cmp	r1, #1
   3872c:	blt	38878 <__assert_fail@plt+0x25c88>
   38730:	ldr	r4, [sp, #44]	; 0x2c
   38734:	mov	r5, #0
   38738:	str	r6, [sp, #40]	; 0x28
   3873c:	ldr	r0, [r6, #24]
   38740:	ldr	sl, [r0, r5, lsl #2]
   38744:	ldr	r0, [r7]
   38748:	add	r1, r0, sl, lsl #3
   3874c:	ldrb	r1, [r1, #6]
   38750:	tst	r1, #16
   38754:	bne	38774 <__assert_fail@plt+0x25b84>
   38758:	add	r1, r0, sl, lsl #3
   3875c:	mov	r0, r8
   38760:	mov	r2, r4
   38764:	bl	3946c <__assert_fail@plt+0x2687c>
   38768:	cmp	r0, #0
   3876c:	bne	38830 <__assert_fail@plt+0x25c40>
   38770:	b	38848 <__assert_fail@plt+0x25c58>
   38774:	mov	r0, r7
   38778:	mov	r1, sl
   3877c:	mov	r2, r8
   38780:	mov	r3, r4
   38784:	bl	39174 <__assert_fail@plt+0x26584>
   38788:	cmp	r0, #2
   3878c:	blt	38828 <__assert_fail@plt+0x25c38>
   38790:	add	r4, r0, r4
   38794:	ldr	r0, [r8, #100]	; 0x64
   38798:	ldr	r1, [r7, #12]
   3879c:	sub	r8, fp, #48	; 0x30
   387a0:	ldr	r0, [r0, r4, lsl #2]
   387a4:	ldr	r6, [r1, sl, lsl #2]
   387a8:	mov	r1, #0
   387ac:	str	r1, [fp, #-44]	; 0xffffffd4
   387b0:	cmp	r0, #0
   387b4:	beq	387d0 <__assert_fail@plt+0x25be0>
   387b8:	add	r1, r0, #4
   387bc:	mov	r0, r8
   387c0:	bl	36450 <__assert_fail@plt+0x23860>
   387c4:	cmp	r0, #0
   387c8:	str	r0, [fp, #-32]	; 0xffffffe0
   387cc:	bne	389d4 <__assert_fail@plt+0x25de4>
   387d0:	mov	r0, r8
   387d4:	mov	r1, r6
   387d8:	bl	3665c <__assert_fail@plt+0x23a6c>
   387dc:	cmp	r0, #0
   387e0:	beq	389b4 <__assert_fail@plt+0x25dc4>
   387e4:	sub	r0, fp, #32
   387e8:	mov	r1, r7
   387ec:	mov	r2, r8
   387f0:	bl	38f7c <__assert_fail@plt+0x2638c>
   387f4:	ldr	r8, [sp, #36]	; 0x24
   387f8:	ldr	r6, [sp, #40]	; 0x28
   387fc:	ldr	r1, [r8, #100]	; 0x64
   38800:	str	r0, [r1, r4, lsl #2]
   38804:	ldr	r0, [r8, #100]	; 0x64
   38808:	ldr	r0, [r0, r4, lsl #2]
   3880c:	ldr	r4, [sp, #44]	; 0x2c
   38810:	cmp	r0, #0
   38814:	bne	38830 <__assert_fail@plt+0x25c40>
   38818:	ldr	r9, [fp, #-32]	; 0xffffffe0
   3881c:	cmp	r9, #0
   38820:	beq	38830 <__assert_fail@plt+0x25c40>
   38824:	b	389b8 <__assert_fail@plt+0x25dc8>
   38828:	cmp	r0, #0
   3882c:	beq	3885c <__assert_fail@plt+0x25c6c>
   38830:	ldr	r0, [r7, #12]
   38834:	ldr	r1, [r0, sl, lsl #2]
   38838:	add	r0, sp, #48	; 0x30
   3883c:	bl	3665c <__assert_fail@plt+0x23a6c>
   38840:	cmp	r0, #0
   38844:	beq	389b4 <__assert_fail@plt+0x25dc4>
   38848:	ldr	r0, [r6, #20]
   3884c:	add	r5, r5, #1
   38850:	cmp	r5, r0
   38854:	blt	3873c <__assert_fail@plt+0x25b4c>
   38858:	b	38864 <__assert_fail@plt+0x25c74>
   3885c:	ldr	r0, [r7]
   38860:	b	38758 <__assert_fail@plt+0x25b68>
   38864:	ldr	r5, [fp, #12]
   38868:	ldr	r0, [fp, #-40]	; 0xffffffd8
   3886c:	ldr	sl, [sp, #20]
   38870:	mov	r9, r5
   38874:	add	r5, sp, #48	; 0x30
   38878:	bl	2bcbc <__assert_fail@plt+0x190cc>
   3887c:	ldr	r4, [sp, #24]
   38880:	ldr	r7, [sp, #28]
   38884:	mov	r0, #0
   38888:	str	r0, [fp, #-52]	; 0xffffffcc
   3888c:	ldr	r0, [sp, #52]	; 0x34
   38890:	cmp	r0, #0
   38894:	beq	388e8 <__assert_fail@plt+0x25cf8>
   38898:	mov	r6, r7
   3889c:	ldr	r7, [fp, #16]
   388a0:	mov	r0, sl
   388a4:	mov	r1, r5
   388a8:	mov	r2, r4
   388ac:	mov	r3, r7
   388b0:	bl	38a78 <__assert_fail@plt+0x25e88>
   388b4:	cmp	r0, #0
   388b8:	str	r0, [fp, #-52]	; 0xffffffcc
   388bc:	bne	389c4 <__assert_fail@plt+0x25dd4>
   388c0:	mov	r0, r8
   388c4:	mov	r1, r5
   388c8:	mov	r2, r6
   388cc:	mov	r3, r4
   388d0:	str	r7, [sp]
   388d4:	mov	r7, r6
   388d8:	bl	38ba8 <__assert_fail@plt+0x25fb8>
   388dc:	cmp	r0, #0
   388e0:	str	r0, [fp, #-52]	; 0xffffffcc
   388e4:	bne	389c4 <__assert_fail@plt+0x25dd4>
   388e8:	ldr	r2, [r8, #88]	; 0x58
   388ec:	ldr	r1, [sp, #44]	; 0x2c
   388f0:	mov	r0, r8
   388f4:	bl	37554 <__assert_fail@plt+0x24964>
   388f8:	mov	r3, r0
   388fc:	sub	r0, fp, #52	; 0x34
   38900:	mov	r1, sl
   38904:	mov	r2, r5
   38908:	bl	368dc <__assert_fail@plt+0x23cec>
   3890c:	mov	r6, r0
   38910:	cmp	r0, #0
   38914:	bne	38924 <__assert_fail@plt+0x25d34>
   38918:	ldr	r0, [fp, #-52]	; 0xffffffcc
   3891c:	cmp	r0, #0
   38920:	bne	389c4 <__assert_fail@plt+0x25dd4>
   38924:	ldr	r0, [r8, #100]	; 0x64
   38928:	ldr	r1, [sp, #32]
   3892c:	cmp	r6, #0
   38930:	str	r7, [sp, #44]	; 0x2c
   38934:	str	r6, [r0, r7, lsl #2]
   38938:	mov	r0, #0
   3893c:	addeq	r0, r1, #1
   38940:	cmp	r7, r9
   38944:	mov	r1, r0
   38948:	bne	386b8 <__assert_fail@plt+0x25ac8>
   3894c:	mov	r4, r9
   38950:	b	38958 <__assert_fail@plt+0x25d68>
   38954:	ldr	r4, [sp, #44]	; 0x2c
   38958:	ldr	r0, [sp, #56]	; 0x38
   3895c:	bl	2bcbc <__assert_fail@plt+0x190cc>
   38960:	ldr	r0, [r8, #100]	; 0x64
   38964:	ldr	r1, [sp, #16]
   38968:	ldr	r0, [r0, r9, lsl #2]
   3896c:	str	r4, [r1]
   38970:	ldr	r1, [sp, #12]
   38974:	str	r1, [r8, #40]	; 0x28
   38978:	ldr	r1, [sp, #8]
   3897c:	cmp	r0, #0
   38980:	str	r1, [r8, #100]	; 0x64
   38984:	beq	389a4 <__assert_fail@plt+0x25db4>
   38988:	ldr	r1, [fp, #8]
   3898c:	add	r0, r0, #4
   38990:	bl	36874 <__assert_fail@plt+0x23c84>
   38994:	cmp	r0, #0
   38998:	mov	r7, #0
   3899c:	moveq	r7, #1
   389a0:	b	389a8 <__assert_fail@plt+0x25db8>
   389a4:	mov	r7, #1
   389a8:	mov	r0, r7
   389ac:	sub	sp, fp, #28
   389b0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   389b4:	mov	r9, #12
   389b8:	ldr	r0, [fp, #-40]	; 0xffffffd8
   389bc:	bl	2bcbc <__assert_fail@plt+0x190cc>
   389c0:	str	r9, [fp, #-52]	; 0xffffffcc
   389c4:	ldr	r0, [sp, #56]	; 0x38
   389c8:	bl	2bcbc <__assert_fail@plt+0x190cc>
   389cc:	ldr	r7, [fp, #-52]	; 0xffffffcc
   389d0:	b	389a8 <__assert_fail@plt+0x25db8>
   389d4:	mov	r9, r0
   389d8:	b	389b8 <__assert_fail@plt+0x25dc8>
   389dc:	mvn	r1, #-2147483648	; 0x80000000
   389e0:	mov	r7, #12
   389e4:	sub	r1, r1, r4
   389e8:	cmp	r1, r2
   389ec:	ble	389a8 <__assert_fail@plt+0x25db8>
   389f0:	add	r9, r2, #1
   389f4:	add	r5, r9, r4
   389f8:	cmn	r5, #-1073741823	; 0xc0000001
   389fc:	bhi	389a8 <__assert_fail@plt+0x25db8>
   38a00:	ldr	r0, [r3, #8]
   38a04:	lsl	r1, r5, #2
   38a08:	mov	sl, r3
   38a0c:	bl	2e984 <__assert_fail@plt+0x1bd94>
   38a10:	cmp	r0, #0
   38a14:	beq	389a8 <__assert_fail@plt+0x25db8>
   38a18:	str	r5, [sl, #4]
   38a1c:	str	r0, [sl, #8]
   38a20:	add	r0, r0, r4, lsl #2
   38a24:	lsl	r2, r9, #2
   38a28:	mov	r1, #0
   38a2c:	bl	12938 <memset@plt>
   38a30:	mov	r3, sl
   38a34:	ldr	r0, [sp, #36]	; 0x24
   38a38:	ldr	r5, [fp, #12]
   38a3c:	ldr	sl, [sp, #20]
   38a40:	ldr	r7, [sp, #24]
   38a44:	b	38524 <__assert_fail@plt+0x25934>
   38a48:	mov	r7, r0
   38a4c:	ldr	r0, [sp, #56]	; 0x38
   38a50:	bl	2bcbc <__assert_fail@plt+0x190cc>
   38a54:	b	389a8 <__assert_fail@plt+0x25db8>
   38a58:	mov	r0, #0
   38a5c:	mov	r7, #12
   38a60:	str	r0, [sp, #48]	; 0x30
   38a64:	str	r0, [sp, #52]	; 0x34
   38a68:	str	r7, [fp, #-52]	; 0xffffffcc
   38a6c:	b	389a8 <__assert_fail@plt+0x25db8>
   38a70:	mov	r7, r0
   38a74:	b	389a8 <__assert_fail@plt+0x25db8>
   38a78:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   38a7c:	add	fp, sp, #28
   38a80:	sub	sp, sp, #20
   38a84:	str	r0, [sp, #4]
   38a88:	ldr	r0, [r1, #4]
   38a8c:	mov	sl, r1
   38a90:	mov	r1, #0
   38a94:	mov	r5, r3
   38a98:	mov	r8, r2
   38a9c:	str	r1, [sp, #12]
   38aa0:	str	r0, [sp, #8]
   38aa4:	lsl	r0, r0, #2
   38aa8:	bl	2de8c <__assert_fail@plt+0x1b29c>
   38aac:	cmp	r0, #0
   38ab0:	str	r0, [sp, #16]
   38ab4:	beq	38ba0 <__assert_fail@plt+0x25fb0>
   38ab8:	ldr	r0, [sl, #4]
   38abc:	cmp	r0, #1
   38ac0:	blt	38b68 <__assert_fail@plt+0x25f78>
   38ac4:	mov	r9, #0
   38ac8:	ldr	r0, [sl, #8]
   38acc:	ldr	r1, [sp, #4]
   38ad0:	ldr	r2, [r0, r9, lsl #2]
   38ad4:	ldr	r1, [r1, #24]
   38ad8:	add	r0, r2, r2, lsl #1
   38adc:	add	r1, r1, r0, lsl #2
   38ae0:	ldr	r0, [r1, #4]
   38ae4:	cmp	r0, #1
   38ae8:	blt	38b24 <__assert_fail@plt+0x25f34>
   38aec:	ldr	r7, [sp, #4]
   38af0:	ldr	r3, [r1, #8]
   38af4:	ldr	r7, [r7]
   38af8:	ldr	r6, [r3]
   38afc:	add	r4, r7, r6, lsl #3
   38b00:	ldrb	r4, [r4, #4]
   38b04:	cmp	r4, r5
   38b08:	bne	38b18 <__assert_fail@plt+0x25f28>
   38b0c:	ldr	r4, [r7, r6, lsl #3]
   38b10:	cmp	r4, r8
   38b14:	beq	38b48 <__assert_fail@plt+0x25f58>
   38b18:	add	r3, r3, #4
   38b1c:	subs	r0, r0, #1
   38b20:	bne	38af8 <__assert_fail@plt+0x25f08>
   38b24:	add	r0, sp, #8
   38b28:	bl	36450 <__assert_fail@plt+0x23860>
   38b2c:	cmp	r0, #0
   38b30:	bne	38b90 <__assert_fail@plt+0x25fa0>
   38b34:	ldr	r0, [sl, #4]
   38b38:	add	r9, r9, #1
   38b3c:	cmp	r9, r0
   38b40:	blt	38ac8 <__assert_fail@plt+0x25ed8>
   38b44:	b	38b68 <__assert_fail@plt+0x25f78>
   38b48:	cmn	r6, #1
   38b4c:	beq	38b24 <__assert_fail@plt+0x25f34>
   38b50:	ldr	r0, [sp, #4]
   38b54:	add	r1, sp, #8
   38b58:	mov	r3, r8
   38b5c:	str	r5, [sp]
   38b60:	bl	38e74 <__assert_fail@plt+0x26284>
   38b64:	b	38b2c <__assert_fail@plt+0x25f3c>
   38b68:	ldr	r0, [sl, #8]
   38b6c:	bl	2bcbc <__assert_fail@plt+0x190cc>
   38b70:	vldr	d16, [sp, #8]
   38b74:	ldr	r0, [sp, #16]
   38b78:	mov	r7, #0
   38b7c:	str	r0, [sl, #8]
   38b80:	vstr	d16, [sl]
   38b84:	mov	r0, r7
   38b88:	sub	sp, fp, #28
   38b8c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   38b90:	mov	r7, r0
   38b94:	ldr	r0, [sp, #16]
   38b98:	bl	2bcbc <__assert_fail@plt+0x190cc>
   38b9c:	b	38b84 <__assert_fail@plt+0x25f94>
   38ba0:	mov	r7, #12
   38ba4:	b	38b84 <__assert_fail@plt+0x25f94>
   38ba8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   38bac:	add	fp, sp, #28
   38bb0:	sub	sp, sp, #36	; 0x24
   38bb4:	mov	r6, r1
   38bb8:	ldr	r1, [r0, #84]	; 0x54
   38bbc:	str	r3, [sp, #4]
   38bc0:	mov	r4, r2
   38bc4:	str	r0, [sp, #12]
   38bc8:	str	r1, [sp, #16]
   38bcc:	mov	r1, r2
   38bd0:	bl	38268 <__assert_fail@plt+0x25678>
   38bd4:	cmn	r0, #1
   38bd8:	beq	38e60 <__assert_fail@plt+0x26270>
   38bdc:	add	r1, r0, r0, lsl #1
   38be0:	str	r1, [sp]
   38be4:	ldr	r0, [sp, #12]
   38be8:	ldr	r0, [r0, #116]	; 0x74
   38bec:	add	r0, r0, r1, lsl #3
   38bf0:	add	r0, r0, #8
   38bf4:	ldr	r7, [r0, #-8]
   38bf8:	mov	sl, r0
   38bfc:	mov	r0, r6
   38c00:	mov	r1, r7
   38c04:	bl	36874 <__assert_fail@plt+0x23c84>
   38c08:	cmp	r0, #0
   38c0c:	beq	38e08 <__assert_fail@plt+0x26218>
   38c10:	ldm	sl, {r0, r1}
   38c14:	add	r1, r1, r4
   38c18:	sub	r9, r1, r0
   38c1c:	cmp	r9, r4
   38c20:	bne	38ce4 <__assert_fail@plt+0x260f4>
   38c24:	ldr	r0, [sp, #16]
   38c28:	add	r1, r7, r7, lsl #1
   38c2c:	ldr	r0, [r0, #20]
   38c30:	add	r0, r0, r1, lsl #2
   38c34:	ldr	r0, [r0, #8]
   38c38:	ldr	r7, [r0]
   38c3c:	mov	r0, r6
   38c40:	mov	r1, r7
   38c44:	bl	36874 <__assert_fail@plt+0x23c84>
   38c48:	mov	r1, #4
   38c4c:	cmp	r0, #0
   38c50:	bne	38dfc <__assert_fail@plt+0x2620c>
   38c54:	mov	r0, #1
   38c58:	str	r0, [sp, #24]
   38c5c:	str	r0, [sp, #20]
   38c60:	mov	r0, #4
   38c64:	bl	2de8c <__assert_fail@plt+0x1b29c>
   38c68:	cmp	r0, #0
   38c6c:	str	r0, [sp, #28]
   38c70:	beq	38e1c <__assert_fail@plt+0x2622c>
   38c74:	mov	r5, #0
   38c78:	str	r7, [r0]
   38c7c:	ldr	r0, [sp, #16]
   38c80:	ldr	r2, [sp, #4]
   38c84:	ldr	r3, [fp, #8]
   38c88:	add	r7, sp, #20
   38c8c:	str	r5, [sp, #32]
   38c90:	mov	r1, r7
   38c94:	bl	38a78 <__assert_fail@plt+0x25e88>
   38c98:	mov	r9, r0
   38c9c:	mov	r0, r6
   38ca0:	mov	r1, r7
   38ca4:	bl	36450 <__assert_fail@plt+0x23860>
   38ca8:	mov	r8, r0
   38cac:	ldr	r0, [sp, #28]
   38cb0:	bl	2bcbc <__assert_fail@plt+0x190cc>
   38cb4:	orr	r0, r9, r5
   38cb8:	mov	r1, #2
   38cbc:	orrs	r0, r0, r8
   38cc0:	beq	38dfc <__assert_fail@plt+0x2620c>
   38cc4:	cmp	r9, #0
   38cc8:	mov	r1, #1
   38ccc:	movne	r8, r9
   38cd0:	cmp	r5, #0
   38cd4:	movne	r8, r5
   38cd8:	str	r8, [sp, #32]
   38cdc:	str	r8, [sp, #8]
   38ce0:	b	38dfc <__assert_fail@plt+0x2620c>
   38ce4:	ldr	r0, [sp, #12]
   38ce8:	ldr	r1, [sp, #16]
   38cec:	mov	r5, r4
   38cf0:	ldr	r0, [r0, #100]	; 0x64
   38cf4:	ldr	r1, [r1, #12]
   38cf8:	ldr	r0, [r0, r9, lsl #2]
   38cfc:	ldr	r8, [r1, r7, lsl #2]
   38d00:	cmp	r0, #0
   38d04:	beq	38d78 <__assert_fail@plt+0x26188>
   38d08:	add	r4, r0, #4
   38d0c:	mov	r1, r8
   38d10:	mov	r0, r4
   38d14:	bl	36874 <__assert_fail@plt+0x23c84>
   38d18:	mov	r1, #4
   38d1c:	cmp	r0, #0
   38d20:	bne	38df8 <__assert_fail@plt+0x26208>
   38d24:	add	r7, sp, #20
   38d28:	mov	r1, r4
   38d2c:	mov	r0, r7
   38d30:	bl	367f8 <__assert_fail@plt+0x23c08>
   38d34:	mov	r4, r0
   38d38:	str	r0, [sp, #32]
   38d3c:	mov	r0, r7
   38d40:	mov	r1, r8
   38d44:	bl	3665c <__assert_fail@plt+0x23a6c>
   38d48:	cmp	r4, #0
   38d4c:	bne	38d58 <__assert_fail@plt+0x26168>
   38d50:	cmp	r0, #0
   38d54:	bne	38da4 <__assert_fail@plt+0x261b4>
   38d58:	ldr	r0, [sp, #28]
   38d5c:	bl	2bcbc <__assert_fail@plt+0x190cc>
   38d60:	cmp	r4, #0
   38d64:	mov	r1, #1
   38d68:	movweq	r4, #12
   38d6c:	str	r4, [sp, #32]
   38d70:	str	r4, [sp, #8]
   38d74:	b	38df8 <__assert_fail@plt+0x26208>
   38d78:	mov	r0, #1
   38d7c:	str	r0, [sp, #24]
   38d80:	str	r0, [sp, #20]
   38d84:	mov	r0, #4
   38d88:	bl	2de8c <__assert_fail@plt+0x1b29c>
   38d8c:	cmp	r0, #0
   38d90:	str	r0, [sp, #28]
   38d94:	beq	38e30 <__assert_fail@plt+0x26240>
   38d98:	str	r8, [r0]
   38d9c:	mov	r0, #0
   38da0:	str	r0, [sp, #32]
   38da4:	ldr	r1, [sp, #16]
   38da8:	add	r0, sp, #32
   38dac:	add	r2, sp, #20
   38db0:	bl	38f7c <__assert_fail@plt+0x2638c>
   38db4:	ldr	r4, [sp, #12]
   38db8:	ldr	r1, [r4, #100]	; 0x64
   38dbc:	str	r0, [r1, r9, lsl #2]
   38dc0:	ldr	r0, [sp, #28]
   38dc4:	bl	2bcbc <__assert_fail@plt+0x190cc>
   38dc8:	ldr	r0, [r4, #100]	; 0x64
   38dcc:	ldr	r2, [sp, #32]
   38dd0:	ldr	r0, [r0, r9, lsl #2]
   38dd4:	cmp	r2, #0
   38dd8:	mov	r1, r2
   38ddc:	movwne	r1, #1
   38de0:	clz	r0, r0
   38de4:	lsr	r0, r0, #5
   38de8:	ands	r1, r0, r1
   38dec:	ldr	r0, [sp, #8]
   38df0:	movne	r0, r2
   38df4:	str	r0, [sp, #8]
   38df8:	mov	r4, r5
   38dfc:	cmp	r1, #0
   38e00:	cmpne	r1, #4
   38e04:	bne	38e50 <__assert_fail@plt+0x26260>
   38e08:	ldrb	r1, [sl, #12]
   38e0c:	add	r0, sl, #24
   38e10:	cmp	r1, #0
   38e14:	bne	38bf4 <__assert_fail@plt+0x26004>
   38e18:	b	38e60 <__assert_fail@plt+0x26270>
   38e1c:	mov	r0, #0
   38e20:	mov	r5, #12
   38e24:	str	r0, [sp, #20]
   38e28:	str	r0, [sp, #24]
   38e2c:	b	38c7c <__assert_fail@plt+0x2608c>
   38e30:	mov	r0, #0
   38e34:	mov	r1, #12
   38e38:	str	r0, [sp, #20]
   38e3c:	str	r0, [sp, #24]
   38e40:	mov	r0, #12
   38e44:	str	r1, [sp, #32]
   38e48:	mov	r1, #1
   38e4c:	b	38df4 <__assert_fail@plt+0x26204>
   38e50:	cmp	r1, #2
   38e54:	bne	38e6c <__assert_fail@plt+0x2627c>
   38e58:	ldr	r1, [sp]
   38e5c:	b	38be4 <__assert_fail@plt+0x25ff4>
   38e60:	mov	r0, #0
   38e64:	sub	sp, fp, #28
   38e68:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   38e6c:	ldr	r0, [sp, #8]
   38e70:	b	38e64 <__assert_fail@plt+0x26274>
   38e74:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   38e78:	add	fp, sp, #24
   38e7c:	sub	sp, sp, #8
   38e80:	mov	r6, r0
   38e84:	mov	r4, r1
   38e88:	mov	r0, r1
   38e8c:	mov	r1, r2
   38e90:	mov	r5, r3
   38e94:	mov	r7, r2
   38e98:	bl	36874 <__assert_fail@plt+0x23c84>
   38e9c:	cmp	r0, #0
   38ea0:	beq	38eb0 <__assert_fail@plt+0x262c0>
   38ea4:	mov	r0, #0
   38ea8:	sub	sp, fp, #24
   38eac:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   38eb0:	ldr	r8, [fp, #8]
   38eb4:	ldr	r0, [r6]
   38eb8:	add	r1, r0, r7, lsl #3
   38ebc:	ldrb	r1, [r1, #4]
   38ec0:	cmp	r1, r8
   38ec4:	bne	38ed4 <__assert_fail@plt+0x262e4>
   38ec8:	ldr	r0, [r0, r7, lsl #3]
   38ecc:	cmp	r0, r5
   38ed0:	beq	38f58 <__assert_fail@plt+0x26368>
   38ed4:	mov	r0, r4
   38ed8:	mov	r1, r7
   38edc:	bl	3665c <__assert_fail@plt+0x23a6c>
   38ee0:	cmp	r0, #0
   38ee4:	beq	38f74 <__assert_fail@plt+0x26384>
   38ee8:	ldr	r0, [r6, #20]
   38eec:	add	r7, r7, r7, lsl #1
   38ef0:	add	r1, r0, r7, lsl #2
   38ef4:	ldr	r2, [r1, #4]
   38ef8:	cmp	r2, #2
   38efc:	beq	38f0c <__assert_fail@plt+0x2631c>
   38f00:	cmp	r2, #0
   38f04:	bne	38f34 <__assert_fail@plt+0x26344>
   38f08:	b	38ea4 <__assert_fail@plt+0x262b4>
   38f0c:	ldr	r0, [r1, #8]
   38f10:	mov	r1, r4
   38f14:	mov	r3, r5
   38f18:	ldr	r2, [r0, #4]
   38f1c:	mov	r0, r6
   38f20:	str	r8, [sp]
   38f24:	bl	38e74 <__assert_fail@plt+0x26284>
   38f28:	cmp	r0, #0
   38f2c:	bne	38ea8 <__assert_fail@plt+0x262b8>
   38f30:	ldr	r0, [r6, #20]
   38f34:	add	r0, r0, r7, lsl #2
   38f38:	ldr	r0, [r0, #8]
   38f3c:	ldr	r7, [r0]
   38f40:	mov	r0, r4
   38f44:	mov	r1, r7
   38f48:	bl	36874 <__assert_fail@plt+0x23c84>
   38f4c:	cmp	r0, #0
   38f50:	beq	38eb4 <__assert_fail@plt+0x262c4>
   38f54:	b	38ea4 <__assert_fail@plt+0x262b4>
   38f58:	cmp	r8, #9
   38f5c:	bne	38ea4 <__assert_fail@plt+0x262b4>
   38f60:	mov	r0, r4
   38f64:	mov	r1, r7
   38f68:	bl	3665c <__assert_fail@plt+0x23a6c>
   38f6c:	cmp	r0, #0
   38f70:	bne	38ea4 <__assert_fail@plt+0x262b4>
   38f74:	mov	r0, #12
   38f78:	b	38ea8 <__assert_fail@plt+0x262b8>
   38f7c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   38f80:	add	fp, sp, #28
   38f84:	sub	sp, sp, #4
   38f88:	ldr	sl, [r2, #4]
   38f8c:	cmp	sl, #0
   38f90:	beq	39140 <__assert_fail@plt+0x26550>
   38f94:	mov	r4, r2
   38f98:	mov	r9, r1
   38f9c:	cmp	sl, #1
   38fa0:	mov	r6, sl
   38fa4:	str	r0, [sp]
   38fa8:	blt	38fc8 <__assert_fail@plt+0x263d8>
   38fac:	ldr	r1, [r4, #8]
   38fb0:	mov	r2, sl
   38fb4:	mov	r6, sl
   38fb8:	ldr	r3, [r1], #4
   38fbc:	subs	r2, r2, #1
   38fc0:	add	r6, r3, r6
   38fc4:	bne	38fb8 <__assert_fail@plt+0x263c8>
   38fc8:	ldr	r1, [r9, #68]	; 0x44
   38fcc:	ldr	r2, [r9, #32]
   38fd0:	and	r1, r1, r6
   38fd4:	add	r3, r1, r1, lsl #1
   38fd8:	ldr	r1, [r2, r3, lsl #2]
   38fdc:	cmp	r1, #1
   38fe0:	blt	39050 <__assert_fail@plt+0x26460>
   38fe4:	add	r2, r2, r3, lsl #2
   38fe8:	sub	ip, sl, #1
   38fec:	mov	r5, #0
   38ff0:	ldr	lr, [r2, #8]
   38ff4:	cmp	r4, #0
   38ff8:	beq	39044 <__assert_fail@plt+0x26454>
   38ffc:	ldr	r7, [lr, r5, lsl #2]
   39000:	ldr	r3, [r7]
   39004:	cmp	r6, r3
   39008:	bne	39044 <__assert_fail@plt+0x26454>
   3900c:	ldr	r3, [r7, #8]
   39010:	cmp	r3, sl
   39014:	bne	39044 <__assert_fail@plt+0x26454>
   39018:	mov	r3, ip
   3901c:	add	r2, r3, #1
   39020:	cmp	r2, #1
   39024:	blt	39134 <__assert_fail@plt+0x26544>
   39028:	ldr	r2, [r4, #8]
   3902c:	ldr	r0, [r7, #12]
   39030:	ldr	r2, [r2, r3, lsl #2]
   39034:	ldr	r0, [r0, r3, lsl #2]
   39038:	sub	r3, r3, #1
   3903c:	cmp	r0, r2
   39040:	beq	3901c <__assert_fail@plt+0x2642c>
   39044:	add	r5, r5, #1
   39048:	cmp	r5, r1
   3904c:	blt	38ff4 <__assert_fail@plt+0x26404>
   39050:	mov	r0, #56	; 0x38
   39054:	mov	r1, #1
   39058:	bl	2b734 <__assert_fail@plt+0x18b44>
   3905c:	cmp	r0, #0
   39060:	beq	39160 <__assert_fail@plt+0x26570>
   39064:	add	r5, r0, #4
   39068:	mov	r7, r0
   3906c:	mov	r1, r4
   39070:	mov	r0, r5
   39074:	bl	367f8 <__assert_fail@plt+0x23c08>
   39078:	cmp	r0, #0
   3907c:	bne	3914c <__assert_fail@plt+0x2655c>
   39080:	str	r5, [r7, #40]	; 0x28
   39084:	ldr	r0, [r4, #4]
   39088:	cmp	r0, #1
   3908c:	blt	3911c <__assert_fail@plt+0x2652c>
   39090:	movw	ip, #65280	; 0xff00
   39094:	ldr	r1, [r4, #8]
   39098:	ldr	sl, [r9]
   3909c:	mov	lr, #32
   390a0:	movt	ip, #3
   390a4:	add	r5, ip, #255	; 0xff
   390a8:	ldr	r2, [r1]
   390ac:	add	r3, sl, r2, lsl #3
   390b0:	ldr	r2, [r3, #4]!
   390b4:	and	r4, r2, r5
   390b8:	cmp	r4, #1
   390bc:	beq	39110 <__assert_fail@plt+0x26520>
   390c0:	ldrb	r8, [r7, #52]	; 0x34
   390c4:	and	r4, lr, r2, lsr #15
   390c8:	uxtb	r2, r2
   390cc:	cmp	r2, #12
   390d0:	orr	r4, r8, r4
   390d4:	strb	r4, [r7, #52]	; 0x34
   390d8:	beq	39108 <__assert_fail@plt+0x26518>
   390dc:	cmp	r2, #4
   390e0:	beq	390f4 <__assert_fail@plt+0x26504>
   390e4:	cmp	r2, #2
   390e8:	bne	390fc <__assert_fail@plt+0x2650c>
   390ec:	orr	r2, r4, #16
   390f0:	b	3910c <__assert_fail@plt+0x2651c>
   390f4:	orr	r2, r4, #64	; 0x40
   390f8:	b	3910c <__assert_fail@plt+0x2651c>
   390fc:	ldr	r2, [r3]
   39100:	tst	r2, ip
   39104:	beq	39110 <__assert_fail@plt+0x26520>
   39108:	orr	r2, r4, #128	; 0x80
   3910c:	strb	r2, [r7, #52]	; 0x34
   39110:	add	r1, r1, #4
   39114:	subs	r0, r0, #1
   39118:	bne	390a8 <__assert_fail@plt+0x264b8>
   3911c:	mov	r0, r9
   39120:	mov	r1, r7
   39124:	mov	r2, r6
   39128:	bl	36c14 <__assert_fail@plt+0x24024>
   3912c:	cmp	r0, #0
   39130:	bne	39158 <__assert_fail@plt+0x26568>
   39134:	mov	r0, r7
   39138:	sub	sp, fp, #28
   3913c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   39140:	mov	r7, #0
   39144:	str	r7, [r0]
   39148:	b	39134 <__assert_fail@plt+0x26544>
   3914c:	mov	r0, r7
   39150:	bl	2bcbc <__assert_fail@plt+0x190cc>
   39154:	b	39160 <__assert_fail@plt+0x26570>
   39158:	mov	r0, r7
   3915c:	bl	31d0c <__assert_fail@plt+0x1f11c>
   39160:	ldr	r1, [sp]
   39164:	mov	r0, #12
   39168:	mov	r7, #0
   3916c:	str	r0, [r1]
   39170:	b	39134 <__assert_fail@plt+0x26544>
   39174:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   39178:	add	fp, sp, #24
   3917c:	ldr	lr, [r0]
   39180:	add	r7, lr, r1, lsl #3
   39184:	ldrb	r9, [r7, #4]
   39188:	cmp	r9, #7
   3918c:	beq	39360 <__assert_fail@plt+0x26770>
   39190:	ldr	ip, [r2, #80]	; 0x50
   39194:	mov	r6, #1
   39198:	cmp	ip, #1
   3919c:	beq	391dc <__assert_fail@plt+0x265ec>
   391a0:	ldr	r5, [r2, #28]
   391a4:	add	r7, r3, #1
   391a8:	cmp	r7, r5
   391ac:	bge	391dc <__assert_fail@plt+0x265ec>
   391b0:	ldr	r6, [r2, #8]
   391b4:	sub	r5, r5, r3
   391b8:	add	r7, r6, r3, lsl #2
   391bc:	mov	r6, #1
   391c0:	ldr	r4, [r7, r6, lsl #2]
   391c4:	cmn	r4, #1
   391c8:	bne	391dc <__assert_fail@plt+0x265ec>
   391cc:	add	r6, r6, #1
   391d0:	cmp	r5, r6
   391d4:	bne	391c0 <__assert_fail@plt+0x265d0>
   391d8:	mov	r6, r5
   391dc:	mov	r8, #0
   391e0:	cmp	r9, #5
   391e4:	bne	39228 <__assert_fail@plt+0x26638>
   391e8:	cmp	r6, #2
   391ec:	blt	39350 <__assert_fail@plt+0x26760>
   391f0:	ldr	r0, [r0, #128]	; 0x80
   391f4:	tst	r0, #64	; 0x40
   391f8:	bne	3920c <__assert_fail@plt+0x2661c>
   391fc:	ldr	r1, [r2, #4]
   39200:	ldrb	r1, [r1, r3]
   39204:	cmp	r1, #10
   39208:	beq	39350 <__assert_fail@plt+0x26760>
   3920c:	tst	r0, #128	; 0x80
   39210:	beq	3934c <__assert_fail@plt+0x2675c>
   39214:	ldr	r0, [r2, #4]
   39218:	ldrb	r0, [r0, r3]
   3921c:	cmp	r0, #0
   39220:	movne	r8, r6
   39224:	b	39350 <__assert_fail@plt+0x26760>
   39228:	cmp	r9, #6
   3922c:	bne	39350 <__assert_fail@plt+0x26760>
   39230:	cmp	r6, #2
   39234:	blt	39350 <__assert_fail@plt+0x26760>
   39238:	ldr	r7, [lr, r1, lsl #3]
   3923c:	ldr	r0, [r7, #32]
   39240:	cmp	r0, #0
   39244:	bne	39260 <__assert_fail@plt+0x26670>
   39248:	ldr	r1, [r7, #36]	; 0x24
   3924c:	cmp	r1, #0
   39250:	bne	39260 <__assert_fail@plt+0x26670>
   39254:	ldr	r1, [r7, #20]
   39258:	cmp	r1, #0
   3925c:	beq	39358 <__assert_fail@plt+0x26768>
   39260:	cmp	ip, #1
   39264:	bne	39274 <__assert_fail@plt+0x26684>
   39268:	ldr	r1, [r2, #4]
   3926c:	ldrb	r5, [r1, r3]
   39270:	b	3927c <__assert_fail@plt+0x2668c>
   39274:	ldr	r1, [r2, #8]
   39278:	ldr	r5, [r1, r3, lsl #2]
   3927c:	ldr	r1, [r7, #20]
   39280:	cmp	r1, #1
   39284:	blt	392a8 <__assert_fail@plt+0x266b8>
   39288:	ldr	r2, [r7]
   3928c:	mov	r3, #0
   39290:	ldr	r4, [r2, r3, lsl #2]
   39294:	cmp	r5, r4
   39298:	beq	39324 <__assert_fail@plt+0x26734>
   3929c:	add	r3, r3, #1
   392a0:	cmp	r3, r1
   392a4:	blt	39290 <__assert_fail@plt+0x266a0>
   392a8:	ldr	r1, [r7, #36]	; 0x24
   392ac:	cmp	r1, #1
   392b0:	blt	392e4 <__assert_fail@plt+0x266f4>
   392b4:	mov	r4, #0
   392b8:	ldr	r0, [r7, #12]
   392bc:	ldr	r1, [r0, r4, lsl #2]
   392c0:	mov	r0, r5
   392c4:	bl	124e8 <iswctype@plt>
   392c8:	cmp	r0, #0
   392cc:	bne	39324 <__assert_fail@plt+0x26734>
   392d0:	ldr	r0, [r7, #36]	; 0x24
   392d4:	add	r4, r4, #1
   392d8:	cmp	r4, r0
   392dc:	blt	392b8 <__assert_fail@plt+0x266c8>
   392e0:	ldr	r0, [r7, #32]
   392e4:	cmp	r0, #1
   392e8:	blt	3931c <__assert_fail@plt+0x2672c>
   392ec:	ldr	r1, [r7, #4]
   392f0:	mov	r2, #0
   392f4:	ldr	r3, [r1, r2, lsl #2]
   392f8:	cmp	r3, r5
   392fc:	bhi	39310 <__assert_fail@plt+0x26720>
   39300:	ldr	r3, [r7, #8]
   39304:	ldr	r3, [r3, r2, lsl #2]
   39308:	cmp	r5, r3
   3930c:	bls	39324 <__assert_fail@plt+0x26734>
   39310:	add	r2, r2, #1
   39314:	cmp	r2, r0
   39318:	blt	392f4 <__assert_fail@plt+0x26704>
   3931c:	mov	r0, #0
   39320:	b	39328 <__assert_fail@plt+0x26738>
   39324:	mov	r0, r6
   39328:	ldrb	r1, [r7, #16]
   3932c:	tst	r1, #1
   39330:	bne	3933c <__assert_fail@plt+0x2674c>
   39334:	mov	r8, r0
   39338:	b	39350 <__assert_fail@plt+0x26760>
   3933c:	cmp	r0, #0
   39340:	bgt	39350 <__assert_fail@plt+0x26760>
   39344:	cmp	r6, #1
   39348:	movle	r6, #1
   3934c:	mov	r8, r6
   39350:	mov	r0, r8
   39354:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   39358:	mov	r5, #0
   3935c:	b	3927c <__assert_fail@plt+0x2668c>
   39360:	ldr	r0, [r2, #4]
   39364:	mov	r8, #0
   39368:	ldrb	r6, [r0, r3]
   3936c:	cmp	r6, #194	; 0xc2
   39370:	bcc	39350 <__assert_fail@plt+0x26760>
   39374:	ldr	r1, [r2, #48]	; 0x30
   39378:	add	r2, r3, #2
   3937c:	cmp	r2, r1
   39380:	bgt	39350 <__assert_fail@plt+0x26760>
   39384:	add	r0, r3, r0
   39388:	cmp	r6, #223	; 0xdf
   3938c:	ldrb	r7, [r0, #1]
   39390:	bhi	393b4 <__assert_fail@plt+0x267c4>
   39394:	cmp	r7, #192	; 0xc0
   39398:	mov	r0, #0
   3939c:	movwcc	r0, #1
   393a0:	lsl	r8, r0, #1
   393a4:	sxtb	r0, r7
   393a8:	cmn	r0, #1
   393ac:	movwgt	r8, #0
   393b0:	b	39350 <__assert_fail@plt+0x26760>
   393b4:	cmp	r6, #239	; 0xef
   393b8:	bhi	393d4 <__assert_fail@plt+0x267e4>
   393bc:	mov	r2, #3
   393c0:	cmp	r6, #224	; 0xe0
   393c4:	bne	39430 <__assert_fail@plt+0x26840>
   393c8:	cmp	r7, #160	; 0xa0
   393cc:	bcc	39350 <__assert_fail@plt+0x26760>
   393d0:	b	39430 <__assert_fail@plt+0x26840>
   393d4:	cmp	r6, #247	; 0xf7
   393d8:	bhi	393f4 <__assert_fail@plt+0x26804>
   393dc:	mov	r2, #4
   393e0:	cmp	r6, #240	; 0xf0
   393e4:	bne	39430 <__assert_fail@plt+0x26840>
   393e8:	cmp	r7, #144	; 0x90
   393ec:	bcc	39350 <__assert_fail@plt+0x26760>
   393f0:	b	39430 <__assert_fail@plt+0x26840>
   393f4:	cmp	r6, #251	; 0xfb
   393f8:	bhi	39414 <__assert_fail@plt+0x26824>
   393fc:	mov	r2, #5
   39400:	cmp	r6, #248	; 0xf8
   39404:	bne	39430 <__assert_fail@plt+0x26840>
   39408:	cmp	r7, #136	; 0x88
   3940c:	bcc	39350 <__assert_fail@plt+0x26760>
   39410:	b	39430 <__assert_fail@plt+0x26840>
   39414:	cmp	r6, #253	; 0xfd
   39418:	bhi	39350 <__assert_fail@plt+0x26760>
   3941c:	mov	r2, #6
   39420:	cmp	r6, #252	; 0xfc
   39424:	bne	39430 <__assert_fail@plt+0x26840>
   39428:	cmp	r7, #132	; 0x84
   3942c:	bcc	39350 <__assert_fail@plt+0x26760>
   39430:	add	r3, r2, r3
   39434:	cmp	r3, r1
   39438:	bgt	39350 <__assert_fail@plt+0x26760>
   3943c:	mov	r1, #1
   39440:	ldrb	r3, [r0, r1]
   39444:	sxtb	r7, r3
   39448:	cmn	r7, #1
   3944c:	bgt	39350 <__assert_fail@plt+0x26760>
   39450:	cmp	r3, #191	; 0xbf
   39454:	bhi	39350 <__assert_fail@plt+0x26760>
   39458:	add	r1, r1, #1
   3945c:	cmp	r2, r1
   39460:	bne	39440 <__assert_fail@plt+0x26850>
   39464:	mov	r8, r2
   39468:	b	39350 <__assert_fail@plt+0x26760>
   3946c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   39470:	add	fp, sp, #24
   39474:	ldr	r5, [r1, #4]
   39478:	mvn	r3, #0
   3947c:	mov	r8, #0
   39480:	uxtab	r4, r3, r5
   39484:	cmp	r4, #6
   39488:	bhi	39598 <__assert_fail@plt+0x269a8>
   3948c:	ldr	r3, [r0, #4]
   39490:	ldrb	r3, [r3, r2]
   39494:	add	r7, pc, #4
   39498:	sxtb	r6, r3
   3949c:	ldr	pc, [r7, r4, lsl #2]
   394a0:			; <UNDEFINED> instruction: 0x000394bc
   394a4:	muleq	r3, r8, r5
   394a8:	ldrdeq	r9, [r3], -r0
   394ac:	muleq	r3, r8, r5
   394b0:	strdeq	r9, [r3], -r8
   394b4:	muleq	r3, r8, r5
   394b8:	strdeq	r9, [r3], -r0
   394bc:	ldrb	r1, [r1]
   394c0:	uxtb	r3, r6
   394c4:	cmp	r1, r3
   394c8:	beq	3952c <__assert_fail@plt+0x2693c>
   394cc:	b	39598 <__assert_fail@plt+0x269a8>
   394d0:	ldr	r1, [r1]
   394d4:	ubfx	r7, r3, #5, #3
   394d8:	and	r3, r3, #31
   394dc:	ldr	r1, [r1, r7, lsl #2]
   394e0:	mov	r7, #1
   394e4:	tst	r1, r7, lsl r3
   394e8:	bne	3952c <__assert_fail@plt+0x2693c>
   394ec:	b	39598 <__assert_fail@plt+0x269a8>
   394f0:	cmp	r6, #0
   394f4:	bmi	39598 <__assert_fail@plt+0x269a8>
   394f8:	cmp	r3, #0
   394fc:	beq	3951c <__assert_fail@plt+0x2692c>
   39500:	cmp	r3, #10
   39504:	bne	3952c <__assert_fail@plt+0x2693c>
   39508:	ldr	r1, [r0, #84]	; 0x54
   3950c:	ldrb	r1, [r1, #128]	; 0x80
   39510:	tst	r1, #64	; 0x40
   39514:	bne	3952c <__assert_fail@plt+0x2693c>
   39518:	b	39598 <__assert_fail@plt+0x269a8>
   3951c:	ldr	r1, [r0, #84]	; 0x54
   39520:	ldrb	r1, [r1, #128]	; 0x80
   39524:	tst	r1, #128	; 0x80
   39528:	bne	39598 <__assert_fail@plt+0x269a8>
   3952c:	movw	r1, #65280	; 0xff00
   39530:	movt	r1, #3
   39534:	tst	r5, r1
   39538:	beq	39594 <__assert_fail@plt+0x269a4>
   3953c:	ldr	r3, [r0, #88]	; 0x58
   39540:	mov	r1, r2
   39544:	mov	r2, r3
   39548:	bl	37554 <__assert_fail@plt+0x24964>
   3954c:	and	r1, r0, #1
   39550:	tst	r5, #1024	; 0x400
   39554:	beq	39560 <__assert_fail@plt+0x26970>
   39558:	cmp	r1, #0
   3955c:	beq	39598 <__assert_fail@plt+0x269a8>
   39560:	tst	r5, #2048	; 0x800
   39564:	cmpne	r1, #0
   39568:	bne	39598 <__assert_fail@plt+0x269a8>
   3956c:	tst	r5, #8192	; 0x2000
   39570:	beq	3957c <__assert_fail@plt+0x2698c>
   39574:	ands	r1, r0, #2
   39578:	beq	39598 <__assert_fail@plt+0x269a8>
   3957c:	uxth	r1, r5
   39580:	mov	r2, #1
   39584:	and	r0, r0, #8
   39588:	eor	r1, r2, r1, lsr #15
   3958c:	orr	r0, r1, r0, lsr #3
   39590:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   39594:	mov	r8, #1
   39598:	mov	r0, r8
   3959c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   395a0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   395a4:	add	fp, sp, #28
   395a8:	sub	sp, sp, #4
   395ac:	vpush	{d8-d11}
   395b0:	sub	sp, sp, #88	; 0x58
   395b4:	sub	sp, sp, #14336	; 0x3800
   395b8:	sub	lr, fp, #1024	; 0x400
   395bc:	vmov.i32	q4, #0	; 0x00000000
   395c0:	mov	sl, r1
   395c4:	mov	r1, #0
   395c8:	mov	ip, r0
   395cc:	sub	r9, lr, #72	; 0x48
   395d0:	str	r1, [sl, #44]	; 0x2c
   395d4:	str	r1, [sl, #48]	; 0x30
   395d8:	mov	r0, r9
   395dc:	vst1.64	{d8-d9}, [r0]!
   395e0:	vst1.64	{d8-d9}, [r0]
   395e4:	ldr	r0, [sl, #8]
   395e8:	cmp	r0, #0
   395ec:	ble	39f98 <__assert_fail@plt+0x273a8>
   395f0:	sub	lr, fp, #2048	; 0x800
   395f4:	add	r0, ip, #96	; 0x60
   395f8:	mov	r6, #0
   395fc:	str	ip, [sp, #28]
   39600:	str	sl, [sp, #16]
   39604:	sub	r4, lr, #72	; 0x48
   39608:	sub	lr, fp, #3072	; 0xc00
   3960c:	str	r0, [sp, #4]
   39610:	sub	r8, lr, #72	; 0x48
   39614:	sub	lr, fp, #6144	; 0x1800
   39618:	sub	r5, lr, #120	; 0x78
   3961c:	ldr	r0, [sl, #12]
   39620:	str	r1, [sp, #24]
   39624:	ldr	lr, [r0, r1, lsl #2]
   39628:	ldr	r1, [ip]
   3962c:	add	r0, r1, lr, lsl #3
   39630:	str	lr, [sp, #12]
   39634:	ldr	r7, [r0, #4]
   39638:	uxtb	r0, r7
   3963c:	cmp	r0, #1
   39640:	str	r0, [sp, #20]
   39644:	bne	39720 <__assert_fail@plt+0x26b30>
   39648:	ldrb	r0, [r1, lr, lsl #3]
   3964c:	str	r1, [sp, #8]
   39650:	mov	r3, #1
   39654:	ubfx	r1, r0, #5, #3
   39658:	and	r0, r0, #31
   3965c:	ldr	r2, [r9, r1, lsl #2]
   39660:	orr	r0, r2, r3, lsl r0
   39664:	str	r0, [r9, r1, lsl #2]
   39668:	movw	r0, #65280	; 0xff00
   3966c:	ldr	r3, [sp, #20]
   39670:	movt	r0, #3
   39674:	ands	r0, r7, r0
   39678:	beq	39960 <__assert_fail@plt+0x26d70>
   3967c:	tst	r7, #8192	; 0x2000
   39680:	beq	396a4 <__assert_fail@plt+0x26ab4>
   39684:	ldr	r0, [fp, #-1096]	; 0xfffffbb8
   39688:	mov	r1, r9
   3968c:	vst1.64	{d8-d9}, [r1]!
   39690:	vst1.64	{d8-d9}, [r1]
   39694:	tst	r0, #1024	; 0x400
   39698:	beq	39b90 <__assert_fail@plt+0x26fa0>
   3969c:	mov	r0, #1024	; 0x400
   396a0:	str	r0, [fp, #-1096]	; 0xfffffbb8
   396a4:	tst	r7, #32768	; 0x8000
   396a8:	bne	398b4 <__assert_fail@plt+0x26cc4>
   396ac:	tst	r7, #1024	; 0x400
   396b0:	beq	3989c <__assert_fail@plt+0x26cac>
   396b4:	movw	r0, #255	; 0xff
   396b8:	movt	r0, #64	; 0x40
   396bc:	and	r0, r7, r0
   396c0:	cmp	r0, #1
   396c4:	beq	398b4 <__assert_fail@plt+0x26cc4>
   396c8:	ldr	r0, [ip, #92]	; 0x5c
   396cc:	vmov.i32	q8, #0	; 0x00000000
   396d0:	mov	lr, r5
   396d4:	cmp	r0, #1
   396d8:	ble	39844 <__assert_fail@plt+0x26c54>
   396dc:	ldr	r0, [ip, #60]	; 0x3c
   396e0:	ldr	r5, [sp, #4]
   396e4:	mov	r1, #0
   396e8:	add	r2, r5, r1
   396ec:	add	r3, r0, r1
   396f0:	vld1.32	{d20-d21}, [r2]
   396f4:	vld1.32	{d18-d19}, [r3]
   396f8:	add	r2, r9, r1
   396fc:	add	r1, r1, #16
   39700:	vld1.32	{d22-d23}, [r2]
   39704:	cmp	r1, #32
   39708:	vorn	q9, q10, q9
   3970c:	vand	q9, q11, q9
   39710:	vorr	q8, q9, q8
   39714:	vst1.32	{d18-d19}, [r2]
   39718:	bne	396e8 <__assert_fail@plt+0x26af8>
   3971c:	b	39874 <__assert_fail@plt+0x26c84>
   39720:	cmp	r0, #7
   39724:	beq	3976c <__assert_fail@plt+0x26b7c>
   39728:	cmp	r0, #5
   3972c:	beq	397bc <__assert_fail@plt+0x26bcc>
   39730:	cmp	r0, #3
   39734:	bne	39b90 <__assert_fail@plt+0x26fa0>
   39738:	ldr	r0, [r1, lr, lsl #3]
   3973c:	str	r1, [sp, #8]
   39740:	mov	r1, #0
   39744:	add	r2, r9, r1
   39748:	add	r3, r0, r1
   3974c:	add	r1, r1, #16
   39750:	vld1.32	{d16-d17}, [r3]
   39754:	vld1.32	{d18-d19}, [r2]
   39758:	cmp	r1, #32
   3975c:	vorr	q8, q9, q8
   39760:	vst1.32	{d16-d17}, [r2]
   39764:	bne	39744 <__assert_fail@plt+0x26b54>
   39768:	b	39668 <__assert_fail@plt+0x26a78>
   3976c:	mvn	r0, #0
   39770:	str	r1, [sp, #8]
   39774:	str	r0, [fp, #-1084]	; 0xfffffbc4
   39778:	str	r0, [fp, #-1088]	; 0xfffffbc0
   3977c:	str	r0, [fp, #-1092]	; 0xfffffbbc
   39780:	str	r0, [fp, #-1096]	; 0xfffffbb8
   39784:	ldr	r1, [ip, #128]	; 0x80
   39788:	and	r0, r1, #128	; 0x80
   3978c:	ands	r1, r1, #64	; 0x40
   39790:	beq	3979c <__assert_fail@plt+0x26bac>
   39794:	cmp	r0, #0
   39798:	beq	39668 <__assert_fail@plt+0x26a78>
   3979c:	cmp	r1, #0
   397a0:	mvn	r1, #1
   397a4:	movweq	r1, #64510	; 0xfbfe
   397a8:	movteq	r1, #65535	; 0xffff
   397ac:	cmp	r0, #0
   397b0:	mvneq	r1, #1024	; 0x400
   397b4:	str	r1, [fp, #-1096]	; 0xfffffbb8
   397b8:	b	39668 <__assert_fail@plt+0x26a78>
   397bc:	ldr	r0, [ip, #92]	; 0x5c
   397c0:	str	r1, [sp, #8]
   397c4:	cmp	r0, #2
   397c8:	blt	397fc <__assert_fail@plt+0x26c0c>
   397cc:	ldr	r0, [ip, #60]	; 0x3c
   397d0:	mov	r1, #0
   397d4:	add	r2, r9, r1
   397d8:	add	r3, r0, r1
   397dc:	add	r1, r1, #16
   397e0:	vld1.32	{d16-d17}, [r3]
   397e4:	vld1.32	{d18-d19}, [r2]
   397e8:	cmp	r1, #32
   397ec:	vorr	q8, q9, q8
   397f0:	vst1.32	{d16-d17}, [r2]
   397f4:	bne	397d4 <__assert_fail@plt+0x26be4>
   397f8:	b	39814 <__assert_fail@plt+0x26c24>
   397fc:	mov	r0, r9
   39800:	mov	r1, #255	; 0xff
   39804:	mov	r2, #32
   39808:	bl	12938 <memset@plt>
   3980c:	ldr	lr, [sp, #12]
   39810:	ldr	ip, [sp, #28]
   39814:	ldr	r0, [ip, #128]	; 0x80
   39818:	tst	r0, #64	; 0x40
   3981c:	bne	3982c <__assert_fail@plt+0x26c3c>
   39820:	ldr	r1, [fp, #-1096]	; 0xfffffbb8
   39824:	bic	r1, r1, #1024	; 0x400
   39828:	str	r1, [fp, #-1096]	; 0xfffffbb8
   3982c:	tst	r0, #128	; 0x80
   39830:	beq	39668 <__assert_fail@plt+0x26a78>
   39834:	ldr	r0, [fp, #-1096]	; 0xfffffbb8
   39838:	bic	r0, r0, #1
   3983c:	str	r0, [fp, #-1096]	; 0xfffffbb8
   39840:	b	39668 <__assert_fail@plt+0x26a78>
   39844:	ldr	r3, [sp, #4]
   39848:	mov	r0, #0
   3984c:	add	r1, r9, r0
   39850:	add	r2, r3, r0
   39854:	add	r0, r0, #16
   39858:	vld1.32	{d18-d19}, [r2]
   3985c:	vld1.32	{d20-d21}, [r1]
   39860:	cmp	r0, #32
   39864:	vand	q9, q10, q9
   39868:	vorr	q8, q9, q8
   3986c:	vst1.32	{d18-d19}, [r1]
   39870:	bne	3984c <__assert_fail@plt+0x26c5c>
   39874:	vext.8	q9, q8, q8, #8
   39878:	mov	r5, lr
   3987c:	ldr	lr, [sp, #12]
   39880:	ldr	r3, [sp, #20]
   39884:	vorr	q8, q8, q9
   39888:	vdup.32	q9, d16[1]
   3988c:	vorr	q8, q8, q9
   39890:	vmov.32	r0, d16[0]
   39894:	cmp	r0, #0
   39898:	beq	39b90 <__assert_fail@plt+0x26fa0>
   3989c:	tst	r7, #2048	; 0x800
   398a0:	beq	39960 <__assert_fail@plt+0x26d70>
   398a4:	tst	r7, #4194304	; 0x400000
   398a8:	beq	398c0 <__assert_fail@plt+0x26cd0>
   398ac:	cmp	r3, #1
   398b0:	bne	398c0 <__assert_fail@plt+0x26cd0>
   398b4:	mov	r0, r9
   398b8:	vst1.64	{d8-d9}, [r0]!
   398bc:	b	39b8c <__assert_fail@plt+0x26f9c>
   398c0:	ldr	r0, [ip, #92]	; 0x5c
   398c4:	ldr	r7, [sp, #4]
   398c8:	vmov.i32	q8, #0	; 0x00000000
   398cc:	cmp	r0, #1
   398d0:	ble	39914 <__assert_fail@plt+0x26d24>
   398d4:	ldr	r0, [ip, #60]	; 0x3c
   398d8:	mov	r1, #0
   398dc:	add	r2, r0, r1
   398e0:	add	r3, r7, r1
   398e4:	vld1.32	{d20-d21}, [r2]
   398e8:	vld1.32	{d18-d19}, [r3]
   398ec:	add	r2, r9, r1
   398f0:	add	r1, r1, #16
   398f4:	vld1.32	{d22-d23}, [r2]
   398f8:	cmp	r1, #32
   398fc:	vand	q9, q10, q9
   39900:	vbic	q9, q11, q9
   39904:	vorr	q8, q9, q8
   39908:	vst1.32	{d18-d19}, [r2]
   3990c:	bne	398dc <__assert_fail@plt+0x26cec>
   39910:	b	39940 <__assert_fail@plt+0x26d50>
   39914:	mov	r0, #0
   39918:	add	r1, r9, r0
   3991c:	add	r2, r7, r0
   39920:	add	r0, r0, #16
   39924:	vld1.32	{d18-d19}, [r2]
   39928:	vld1.32	{d20-d21}, [r1]
   3992c:	cmp	r0, #32
   39930:	vbic	q9, q10, q9
   39934:	vorr	q8, q9, q8
   39938:	vst1.32	{d18-d19}, [r1]
   3993c:	bne	39918 <__assert_fail@plt+0x26d28>
   39940:	vext.8	q9, q8, q8, #8
   39944:	ldr	r3, [sp, #20]
   39948:	vorr	q8, q8, q9
   3994c:	vdup.32	q9, d16[1]
   39950:	vorr	q8, q8, q9
   39954:	vmov.32	r0, d16[0]
   39958:	cmp	r0, #0
   3995c:	beq	39b90 <__assert_fail@plt+0x26fa0>
   39960:	mov	r7, #0
   39964:	cmp	r6, #1
   39968:	blt	39b0c <__assert_fail@plt+0x26f1c>
   3996c:	add	sl, sp, #32
   39970:	cmp	r3, #1
   39974:	bne	399a0 <__assert_fail@plt+0x26db0>
   39978:	ldr	r1, [sp, #8]
   3997c:	add	r0, sp, #32
   39980:	add	r0, r0, r7, lsl #5
   39984:	ldrb	r1, [r1, lr, lsl #3]
   39988:	ubfx	r2, r1, #5, #3
   3998c:	and	r1, r1, #31
   39990:	ldr	r0, [r0, r2, lsl #2]
   39994:	mov	r2, #1
   39998:	tst	r0, r2, lsl r1
   3999c:	beq	39af4 <__assert_fail@plt+0x26f04>
   399a0:	vmov.i32	q8, #0	; 0x00000000
   399a4:	mov	r0, #0
   399a8:	add	r1, sl, r0
   399ac:	add	r2, r9, r0
   399b0:	vld1.32	{d20-d21}, [r1]
   399b4:	vld1.32	{d18-d19}, [r2]
   399b8:	add	r1, r4, r0
   399bc:	add	r0, r0, #16
   399c0:	cmp	r0, #32
   399c4:	vand	q9, q10, q9
   399c8:	vorr	q8, q9, q8
   399cc:	vst1.32	{d18-d19}, [r1]
   399d0:	bne	399a8 <__assert_fail@plt+0x26db8>
   399d4:	vext.8	q9, q8, q8, #8
   399d8:	vorr	q8, q8, q9
   399dc:	vdup.32	q9, d16[1]
   399e0:	vorr	q8, q8, q9
   399e4:	vmov.32	r0, d16[0]
   399e8:	cmp	r0, #0
   399ec:	beq	39af4 <__assert_fail@plt+0x26f04>
   399f0:	vmov.i32	q5, #0	; 0x00000000
   399f4:	vmov.i32	q8, #0	; 0x00000000
   399f8:	mov	r0, #0
   399fc:	add	r1, r9, r0
   39a00:	add	r2, sl, r0
   39a04:	vld1.32	{d18-d19}, [r2]
   39a08:	vld1.32	{d20-d21}, [r1]
   39a0c:	add	r2, r8, r0
   39a10:	add	r0, r0, #16
   39a14:	cmp	r0, #32
   39a18:	vbic	q11, q10, q9
   39a1c:	vbic	q9, q9, q10
   39a20:	vorr	q5, q11, q5
   39a24:	vorr	q8, q9, q8
   39a28:	vst1.32	{d18-d19}, [r2]
   39a2c:	vst1.32	{d22-d23}, [r1]
   39a30:	bne	399fc <__assert_fail@plt+0x26e0c>
   39a34:	vext.8	q9, q8, q8, #8
   39a38:	vorr	q8, q8, q9
   39a3c:	vdup.32	q9, d16[1]
   39a40:	vorr	q8, q8, q9
   39a44:	vmov.32	r0, d16[0]
   39a48:	cmp	r0, #0
   39a4c:	beq	39aa8 <__assert_fail@plt+0x26eb8>
   39a50:	mov	r0, r8
   39a54:	add	r2, sp, #32
   39a58:	mov	r1, r4
   39a5c:	vld1.32	{d16-d17}, [r0]!
   39a60:	mov	r3, r2
   39a64:	add	r2, r2, r6, lsl #5
   39a68:	vld1.32	{d18-d19}, [r1]!
   39a6c:	vld1.64	{d20-d21}, [r0]
   39a70:	add	r0, r3, r7, lsl #5
   39a74:	vst1.32	{d16-d17}, [r2]!
   39a78:	vld1.64	{d16-d17}, [r1]
   39a7c:	add	r1, r7, r7, lsl #1
   39a80:	vst1.32	{d20-d21}, [r2]
   39a84:	vst1.32	{d18-d19}, [r0]!
   39a88:	add	r1, r5, r1, lsl #2
   39a8c:	vst1.32	{d16-d17}, [r0]
   39a90:	add	r0, r6, r6, lsl #1
   39a94:	add	r0, r5, r0, lsl #2
   39a98:	bl	367f8 <__assert_fail@plt+0x23c08>
   39a9c:	cmp	r0, #0
   39aa0:	bne	39f54 <__assert_fail@plt+0x27364>
   39aa4:	add	r6, r6, #1
   39aa8:	ldr	r0, [sp, #16]
   39aac:	ldr	r1, [sp, #24]
   39ab0:	ldr	r0, [r0, #12]
   39ab4:	ldr	r1, [r0, r1, lsl #2]
   39ab8:	add	r0, r7, r7, lsl #1
   39abc:	add	r0, r5, r0, lsl #2
   39ac0:	bl	3665c <__assert_fail@plt+0x23a6c>
   39ac4:	cmp	r0, #0
   39ac8:	beq	39f54 <__assert_fail@plt+0x27364>
   39acc:	vext.8	q8, q5, q8, #8
   39ad0:	vorr	q8, q5, q8
   39ad4:	vdup.32	q9, d16[1]
   39ad8:	vorr	q8, q8, q9
   39adc:	vmov.32	r0, d16[0]
   39ae0:	cmp	r0, #0
   39ae4:	beq	39b08 <__assert_fail@plt+0x26f18>
   39ae8:	ldr	ip, [sp, #28]
   39aec:	ldr	lr, [sp, #12]
   39af0:	ldr	r3, [sp, #20]
   39af4:	add	r7, r7, #1
   39af8:	add	sl, sl, #32
   39afc:	cmp	r7, r6
   39b00:	blt	39970 <__assert_fail@plt+0x26d80>
   39b04:	b	39b0c <__assert_fail@plt+0x26f1c>
   39b08:	ldr	ip, [sp, #28]
   39b0c:	ldr	sl, [sp, #16]
   39b10:	cmp	r7, r6
   39b14:	bne	39b90 <__assert_fail@plt+0x26fa0>
   39b18:	mov	r0, r9
   39b1c:	ldr	r1, [sp, #24]
   39b20:	vld1.32	{d16-d17}, [r0]!
   39b24:	vld1.64	{d18-d19}, [r0]
   39b28:	add	r0, sp, #32
   39b2c:	add	r0, r0, r7, lsl #5
   39b30:	vst1.32	{d16-d17}, [r0]!
   39b34:	vst1.32	{d18-d19}, [r0]
   39b38:	ldr	r0, [sl, #12]
   39b3c:	ldr	sl, [r0, r1, lsl #2]
   39b40:	add	r0, r7, r7, lsl #1
   39b44:	mov	r1, #1
   39b48:	str	r1, [r5, r0, lsl #2]
   39b4c:	add	r5, r5, r0, lsl #2
   39b50:	mov	r0, #4
   39b54:	mov	r6, r5
   39b58:	str	r1, [r6, #4]!
   39b5c:	bl	2de8c <__assert_fail@plt+0x1b29c>
   39b60:	cmp	r0, #0
   39b64:	str	r0, [r5, #8]
   39b68:	beq	39f7c <__assert_fail@plt+0x2738c>
   39b6c:	str	sl, [r0]
   39b70:	ldr	ip, [sp, #28]
   39b74:	ldr	sl, [sp, #16]
   39b78:	mov	r0, r9
   39b7c:	sub	lr, fp, #6144	; 0x1800
   39b80:	add	r6, r7, #1
   39b84:	vst1.64	{d8-d9}, [r0]!
   39b88:	sub	r5, lr, #120	; 0x78
   39b8c:	vst1.64	{d8-d9}, [r0]
   39b90:	ldr	r1, [sp, #24]
   39b94:	ldr	r0, [sl, #8]
   39b98:	add	r1, r1, #1
   39b9c:	cmp	r1, r0
   39ba0:	blt	3961c <__assert_fail@plt+0x26a2c>
   39ba4:	mov	r0, #0
   39ba8:	cmp	r6, #0
   39bac:	ble	39f94 <__assert_fail@plt+0x273a4>
   39bb0:	str	r0, [fp, #-3152]	; 0xfffff3b0
   39bb4:	add	r0, r6, #1
   39bb8:	str	r6, [sp, #20]
   39bbc:	str	r0, [fp, #-3156]	; 0xfffff3ac
   39bc0:	lsl	r0, r0, #2
   39bc4:	bl	2de8c <__assert_fail@plt+0x1b29c>
   39bc8:	cmp	r0, #0
   39bcc:	str	r0, [fp, #-3148]	; 0xfffff3b4
   39bd0:	mov	r0, #0
   39bd4:	movweq	r0, #12
   39bd8:	str	r0, [fp, #-72]	; 0xffffffb8
   39bdc:	beq	39fc0 <__assert_fail@plt+0x273d0>
   39be0:	vmov.i32	q8, #0	; 0x00000000
   39be4:	sub	lr, fp, #3072	; 0xc00
   39be8:	ldr	r1, [sp, #28]
   39bec:	add	r7, sp, #32
   39bf0:	mov	r4, #0
   39bf4:	mov	r2, #0
   39bf8:	sub	r0, lr, #120	; 0x78
   39bfc:	vst1.64	{d16-d17}, [r0]!
   39c00:	vst1.64	{d16-d17}, [r0]
   39c04:	mov	r0, #0
   39c08:	str	r0, [sp, #12]
   39c0c:	mov	r0, #0
   39c10:	str	r2, [sp, #24]
   39c14:	str	r0, [fp, #-3152]	; 0xfffff3b0
   39c18:	add	r0, r2, r2, lsl #1
   39c1c:	add	r0, r5, r0, lsl #2
   39c20:	ldr	r6, [r0, #4]
   39c24:	cmp	r6, #1
   39c28:	blt	39c8c <__assert_fail@plt+0x2709c>
   39c2c:	ldr	sl, [r0, #8]
   39c30:	mov	r5, #0
   39c34:	ldr	r0, [sl, r5, lsl #2]
   39c38:	ldr	r2, [r1, #12]
   39c3c:	ldr	r0, [r2, r0, lsl #2]
   39c40:	cmn	r0, #1
   39c44:	beq	39c70 <__assert_fail@plt+0x27080>
   39c48:	ldr	r1, [r1, #24]
   39c4c:	add	r0, r0, r0, lsl #1
   39c50:	sub	lr, fp, #3072	; 0xc00
   39c54:	add	r1, r1, r0, lsl #2
   39c58:	sub	r0, lr, #84	; 0x54
   39c5c:	bl	36450 <__assert_fail@plt+0x23860>
   39c60:	ldr	r1, [sp, #28]
   39c64:	mov	r4, #0
   39c68:	cmp	r0, #0
   39c6c:	bne	39f14 <__assert_fail@plt+0x27324>
   39c70:	add	r5, r5, #1
   39c74:	cmp	r5, r6
   39c78:	blt	39c34 <__assert_fail@plt+0x27044>
   39c7c:	ldr	sl, [sp, #16]
   39c80:	sub	lr, fp, #6144	; 0x1800
   39c84:	str	r4, [fp, #-72]	; 0xffffffb8
   39c88:	sub	r5, lr, #120	; 0x78
   39c8c:	sub	lr, fp, #3072	; 0xc00
   39c90:	sub	r0, fp, #72	; 0x48
   39c94:	mov	r3, #0
   39c98:	sub	r2, lr, #84	; 0x54
   39c9c:	bl	368dc <__assert_fail@plt+0x23cec>
   39ca0:	ldr	r1, [sp, #24]
   39ca4:	ldr	r4, [fp, #-72]	; 0xffffffb8
   39ca8:	mov	r6, r0
   39cac:	cmp	r0, #0
   39cb0:	str	r0, [r9, r1, lsl #2]
   39cb4:	bne	39cc0 <__assert_fail@plt+0x270d0>
   39cb8:	cmp	r4, #0
   39cbc:	bne	39f20 <__assert_fail@plt+0x27330>
   39cc0:	ldrsb	r0, [r6, #52]	; 0x34
   39cc4:	cmn	r0, #1
   39cc8:	ble	39ce0 <__assert_fail@plt+0x270f0>
   39ccc:	sub	lr, fp, #2048	; 0x800
   39cd0:	str	r6, [r8, r1, lsl #2]
   39cd4:	sub	r0, lr, #72	; 0x48
   39cd8:	str	r6, [r0, r1, lsl #2]
   39cdc:	b	39d7c <__assert_fail@plt+0x2718c>
   39ce0:	ldr	r1, [sp, #28]
   39ce4:	sub	lr, fp, #3072	; 0xc00
   39ce8:	sub	r0, fp, #72	; 0x48
   39cec:	mov	r3, #1
   39cf0:	sub	r2, lr, #84	; 0x54
   39cf4:	bl	368dc <__assert_fail@plt+0x23cec>
   39cf8:	ldr	r2, [sp, #24]
   39cfc:	sub	lr, fp, #2048	; 0x800
   39d00:	cmp	r0, #0
   39d04:	sub	r1, lr, #72	; 0x48
   39d08:	str	r0, [r1, r2, lsl #2]
   39d0c:	bne	39d1c <__assert_fail@plt+0x2712c>
   39d10:	ldr	r1, [fp, #-72]	; 0xffffffb8
   39d14:	cmp	r1, #0
   39d18:	bne	39f20 <__assert_fail@plt+0x27330>
   39d1c:	cmp	r6, r0
   39d20:	beq	39d48 <__assert_fail@plt+0x27158>
   39d24:	ldr	r1, [sp, #28]
   39d28:	ldr	r2, [sp, #12]
   39d2c:	ldr	r0, [r1, #92]	; 0x5c
   39d30:	cmp	r0, #1
   39d34:	mov	r0, #0
   39d38:	movwgt	r0, #1
   39d3c:	orr	r2, r2, r0
   39d40:	str	r2, [sp, #12]
   39d44:	b	39d4c <__assert_fail@plt+0x2715c>
   39d48:	ldr	r1, [sp, #28]
   39d4c:	sub	lr, fp, #3072	; 0xc00
   39d50:	sub	r0, fp, #72	; 0x48
   39d54:	mov	r3, #2
   39d58:	sub	r2, lr, #84	; 0x54
   39d5c:	bl	368dc <__assert_fail@plt+0x23cec>
   39d60:	ldr	r1, [sp, #24]
   39d64:	ldr	r4, [fp, #-72]	; 0xffffffb8
   39d68:	cmp	r0, #0
   39d6c:	str	r0, [r8, r1, lsl #2]
   39d70:	bne	39d7c <__assert_fail@plt+0x2718c>
   39d74:	cmp	r4, #0
   39d78:	bne	39f20 <__assert_fail@plt+0x27330>
   39d7c:	sub	lr, fp, #3072	; 0xc00
   39d80:	mov	r0, #0
   39d84:	sub	r1, lr, #120	; 0x78
   39d88:	add	r2, r1, r0
   39d8c:	add	r3, r7, r0
   39d90:	add	r0, r0, #16
   39d94:	vld1.32	{d16-d17}, [r3]
   39d98:	vld1.32	{d18-d19}, [r2]
   39d9c:	cmp	r0, #32
   39da0:	vorr	q8, q9, q8
   39da4:	vst1.32	{d16-d17}, [r2]
   39da8:	bne	39d88 <__assert_fail@plt+0x27198>
   39dac:	ldr	r2, [sp, #24]
   39db0:	ldr	r0, [sp, #20]
   39db4:	ldr	r1, [sp, #28]
   39db8:	add	r7, r7, #32
   39dbc:	add	r2, r2, #1
   39dc0:	cmp	r2, r0
   39dc4:	bne	39c0c <__assert_fail@plt+0x2701c>
   39dc8:	ldr	r0, [sp, #12]
   39dcc:	tst	r0, #1
   39dd0:	bne	39fd0 <__assert_fail@plt+0x273e0>
   39dd4:	mov	r0, #4
   39dd8:	mov	r1, #256	; 0x100
   39ddc:	bl	2b734 <__assert_fail@plt+0x18b44>
   39de0:	cmp	r0, #0
   39de4:	str	r0, [sl, #44]	; 0x2c
   39de8:	beq	39f20 <__assert_fail@plt+0x27330>
   39dec:	ldr	r4, [sp, #28]
   39df0:	mov	sl, r0
   39df4:	mov	r1, #0
   39df8:	add	ip, sp, #32
   39dfc:	mov	r3, #0
   39e00:	sub	lr, fp, #3072	; 0xc00
   39e04:	sub	r0, lr, #120	; 0x78
   39e08:	ldr	r7, [r0, r3, lsl #2]
   39e0c:	cmp	r7, #0
   39e10:	beq	39e8c <__assert_fail@plt+0x2729c>
   39e14:	add	r6, r4, r3, lsl #2
   39e18:	lsl	r5, r3, #5
   39e1c:	add	r0, r6, #96	; 0x60
   39e20:	mov	r6, #1
   39e24:	tst	r7, #1
   39e28:	bne	39e48 <__assert_fail@plt+0x27258>
   39e2c:	lsr	r2, r7, #1
   39e30:	cmp	r1, r7, lsr #1
   39e34:	add	r5, r5, #1
   39e38:	lsl	r6, r6, #1
   39e3c:	mov	r7, r2
   39e40:	bne	39e24 <__assert_fail@plt+0x27234>
   39e44:	b	39e8c <__assert_fail@plt+0x2729c>
   39e48:	mov	r4, sl
   39e4c:	mov	lr, #0
   39e50:	ldr	sl, [ip, lr, lsl #3]
   39e54:	add	lr, lr, #4
   39e58:	tst	sl, r6
   39e5c:	beq	39e50 <__assert_fail@plt+0x27260>
   39e60:	ldr	r2, [r0]
   39e64:	mov	sl, r4
   39e68:	tst	r2, r6
   39e6c:	sub	r2, fp, #2048	; 0x800
   39e70:	sub	r2, r2, #72	; 0x48
   39e74:	moveq	r2, r9
   39e78:	add	r2, r2, lr
   39e7c:	ldr	r2, [r2, #-4]
   39e80:	str	r2, [r4, r5, lsl #2]
   39e84:	ldr	r4, [sp, #28]
   39e88:	b	39e2c <__assert_fail@plt+0x2723c>
   39e8c:	add	r3, r3, #1
   39e90:	add	ip, ip, #4
   39e94:	cmp	r3, #8
   39e98:	bne	39e00 <__assert_fail@plt+0x27210>
   39e9c:	ldrb	r0, [fp, #-3191]	; 0xfffff389
   39ea0:	ldr	r5, [sp, #20]
   39ea4:	sub	lr, fp, #6144	; 0x1800
   39ea8:	sub	r4, lr, #120	; 0x78
   39eac:	tst	r0, #4
   39eb0:	beq	39ef0 <__assert_fail@plt+0x27300>
   39eb4:	add	r1, sp, #32
   39eb8:	mov	r2, r5
   39ebc:	ldrb	r0, [r1, #1]
   39ec0:	tst	r0, #4
   39ec4:	bne	39edc <__assert_fail@plt+0x272ec>
   39ec8:	add	r1, r1, #32
   39ecc:	subs	r2, r2, #1
   39ed0:	add	r8, r8, #4
   39ed4:	bne	39ebc <__assert_fail@plt+0x272cc>
   39ed8:	b	39ef0 <__assert_fail@plt+0x27300>
   39edc:	ldr	r0, [sp, #12]
   39ee0:	ldr	r1, [r8]
   39ee4:	tst	r0, #1
   39ee8:	str	r1, [sl, #40]	; 0x28
   39eec:	strne	r1, [sl, #1064]	; 0x428
   39ef0:	ldr	r0, [fp, #-3148]	; 0xfffff3b4
   39ef4:	bl	2bcbc <__assert_fail@plt+0x190cc>
   39ef8:	add	r4, r4, #8
   39efc:	ldr	r0, [r4], #12
   39f00:	bl	2bcbc <__assert_fail@plt+0x190cc>
   39f04:	subs	r5, r5, #1
   39f08:	bne	39efc <__assert_fail@plt+0x2730c>
   39f0c:	mov	r0, #1
   39f10:	b	39fb0 <__assert_fail@plt+0x273c0>
   39f14:	sub	lr, fp, #6144	; 0x1800
   39f18:	str	r0, [fp, #-72]	; 0xffffffb8
   39f1c:	sub	r5, lr, #120	; 0x78
   39f20:	ldr	r0, [fp, #-3148]	; 0xfffff3b4
   39f24:	bl	2bcbc <__assert_fail@plt+0x190cc>
   39f28:	ldr	r1, [sp, #20]
   39f2c:	cmp	r1, #1
   39f30:	blt	39f74 <__assert_fail@plt+0x27384>
   39f34:	add	r4, r5, #8
   39f38:	ldr	r0, [r4], #12
   39f3c:	mov	r5, r1
   39f40:	bl	2bcbc <__assert_fail@plt+0x190cc>
   39f44:	mov	r1, r5
   39f48:	subs	r1, r5, #1
   39f4c:	bne	39f38 <__assert_fail@plt+0x27348>
   39f50:	b	39f74 <__assert_fail@plt+0x27384>
   39f54:	mov	r7, r6
   39f58:	cmp	r7, #1
   39f5c:	blt	39f74 <__assert_fail@plt+0x27384>
   39f60:	add	r4, r5, #8
   39f64:	ldr	r0, [r4], #12
   39f68:	bl	2bcbc <__assert_fail@plt+0x190cc>
   39f6c:	subs	r7, r7, #1
   39f70:	bne	39f64 <__assert_fail@plt+0x27374>
   39f74:	mov	r0, #0
   39f78:	b	39fb0 <__assert_fail@plt+0x273c0>
   39f7c:	mov	r0, #0
   39f80:	sub	lr, fp, #6144	; 0x1800
   39f84:	str	r0, [r6]
   39f88:	str	r0, [r5]
   39f8c:	sub	r5, lr, #120	; 0x78
   39f90:	b	39f58 <__assert_fail@plt+0x27368>
   39f94:	bne	39fb0 <__assert_fail@plt+0x273c0>
   39f98:	mov	r0, #4
   39f9c:	mov	r1, #256	; 0x100
   39fa0:	bl	2b734 <__assert_fail@plt+0x18b44>
   39fa4:	cmp	r0, #0
   39fa8:	str	r0, [sl, #44]	; 0x2c
   39fac:	movwne	r0, #1
   39fb0:	sub	sp, fp, #64	; 0x40
   39fb4:	vpop	{d8-d11}
   39fb8:	add	sp, sp, #4
   39fbc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   39fc0:	ldr	r0, [fp, #-3148]	; 0xfffff3b4
   39fc4:	bl	2bcbc <__assert_fail@plt+0x190cc>
   39fc8:	ldr	r1, [sp, #20]
   39fcc:	b	39f34 <__assert_fail@plt+0x27344>
   39fd0:	mov	r0, #4
   39fd4:	mov	r1, #512	; 0x200
   39fd8:	bl	2b734 <__assert_fail@plt+0x18b44>
   39fdc:	cmp	r0, #0
   39fe0:	str	r0, [sl, #48]	; 0x30
   39fe4:	beq	39f20 <__assert_fail@plt+0x27330>
   39fe8:	sub	lr, fp, #2048	; 0x800
   39fec:	mov	sl, r0
   39ff0:	sub	ip, r9, #4
   39ff4:	mov	r3, #0
   39ff8:	add	r7, sp, #32
   39ffc:	mov	r6, #0
   3a000:	sub	r0, lr, #72	; 0x48
   3a004:	sub	lr, r0, #4
   3a008:	sub	r0, fp, #3072	; 0xc00
   3a00c:	sub	r0, r0, #120	; 0x78
   3a010:	ldr	r5, [r0, r6, lsl #2]
   3a014:	cmp	r5, #0
   3a018:	beq	3a088 <__assert_fail@plt+0x27498>
   3a01c:	lsl	r4, r6, #5
   3a020:	mov	r1, #1
   3a024:	tst	r5, #1
   3a028:	bne	3a048 <__assert_fail@plt+0x27458>
   3a02c:	lsr	r0, r5, #1
   3a030:	cmp	r3, r5, lsr #1
   3a034:	add	r4, r4, #1
   3a038:	lsl	r1, r1, #1
   3a03c:	mov	r5, r0
   3a040:	bne	3a024 <__assert_fail@plt+0x27434>
   3a044:	b	3a088 <__assert_fail@plt+0x27498>
   3a048:	str	sl, [sp, #28]
   3a04c:	mov	r2, r7
   3a050:	mov	sl, ip
   3a054:	mov	r9, lr
   3a058:	ldr	r0, [r2], #32
   3a05c:	add	sl, sl, #4
   3a060:	add	r9, r9, #4
   3a064:	tst	r0, r1
   3a068:	beq	3a058 <__assert_fail@plt+0x27468>
   3a06c:	ldr	r0, [sl]
   3a070:	ldr	sl, [sp, #28]
   3a074:	mov	r2, sl
   3a078:	str	r0, [r2, r4, lsl #2]!
   3a07c:	ldr	r0, [r9]
   3a080:	str	r0, [r2, #1024]	; 0x400
   3a084:	b	3a02c <__assert_fail@plt+0x2743c>
   3a088:	add	r6, r6, #1
   3a08c:	add	r7, r7, #4
   3a090:	cmp	r6, #8
   3a094:	bne	3a008 <__assert_fail@plt+0x27418>
   3a098:	b	39e9c <__assert_fail@plt+0x272ac>
   3a09c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3a0a0:	add	fp, sp, #28
   3a0a4:	sub	sp, sp, #44	; 0x2c
   3a0a8:	ldr	r4, [r1, #8]
   3a0ac:	ldr	r6, [r1, #12]
   3a0b0:	mov	r9, r0
   3a0b4:	mov	r0, #1
   3a0b8:	mov	sl, r1
   3a0bc:	str	r0, [sp, #36]	; 0x24
   3a0c0:	str	r0, [sp, #32]
   3a0c4:	mov	r0, #4
   3a0c8:	bl	2de8c <__assert_fail@plt+0x1b29c>
   3a0cc:	cmp	r0, #0
   3a0d0:	str	r0, [sp, #40]	; 0x28
   3a0d4:	beq	3a320 <__assert_fail@plt+0x27730>
   3a0d8:	str	r4, [r0]
   3a0dc:	add	r3, sp, #32
   3a0e0:	mov	r0, r9
   3a0e4:	mov	r1, sl
   3a0e8:	mov	r2, r6
   3a0ec:	bl	3a3e0 <__assert_fail@plt+0x277f0>
   3a0f0:	cmp	r0, #0
   3a0f4:	bne	3a2e4 <__assert_fail@plt+0x276f4>
   3a0f8:	add	r0, sl, #16
   3a0fc:	mov	r1, #0
   3a100:	str	r0, [sp, #12]
   3a104:	cmp	r6, #1
   3a108:	blt	3a2f4 <__assert_fail@plt+0x27704>
   3a10c:	ldr	r0, [sl]
   3a110:	ldr	r2, [r0, r6, lsl #2]
   3a114:	cmp	r2, #0
   3a118:	mov	r2, #0
   3a11c:	addeq	r2, r1, #1
   3a120:	ldr	r1, [r9, #120]	; 0x78
   3a124:	cmp	r2, r1
   3a128:	bgt	3a2fc <__assert_fail@plt+0x2770c>
   3a12c:	mov	r0, #0
   3a130:	str	r6, [sp, #16]
   3a134:	sub	r6, r6, #1
   3a138:	str	r2, [sp, #8]
   3a13c:	str	r0, [sp, #36]	; 0x24
   3a140:	ldr	r0, [r9, #100]	; 0x64
   3a144:	ldr	r1, [r0, r6, lsl #2]
   3a148:	cmp	r1, #0
   3a14c:	beq	3a2c4 <__assert_fail@plt+0x276d4>
   3a150:	ldr	r0, [r1, #20]
   3a154:	cmp	r0, #1
   3a158:	blt	3a2c4 <__assert_fail@plt+0x276d4>
   3a15c:	ldr	r0, [r9, #84]	; 0x54
   3a160:	mov	r5, #0
   3a164:	str	r1, [sp, #24]
   3a168:	str	r0, [sp, #28]
   3a16c:	ldr	r0, [r1, #24]
   3a170:	ldr	r7, [r0, r5, lsl #2]
   3a174:	ldr	r0, [sp, #28]
   3a178:	ldr	r0, [r0]
   3a17c:	add	r0, r0, r7, lsl #3
   3a180:	ldrb	r0, [r0, #6]
   3a184:	tst	r0, #16
   3a188:	bne	3a1e4 <__assert_fail@plt+0x275f4>
   3a18c:	ldr	r0, [sp, #28]
   3a190:	mov	r2, r6
   3a194:	ldr	r0, [r0]
   3a198:	add	r1, r0, r7, lsl #3
   3a19c:	mov	r0, r9
   3a1a0:	bl	3946c <__assert_fail@plt+0x2687c>
   3a1a4:	cmp	r0, #0
   3a1a8:	beq	3a2b0 <__assert_fail@plt+0x276c0>
   3a1ac:	ldr	r0, [sl]
   3a1b0:	ldr	r1, [sp, #16]
   3a1b4:	ldr	r0, [r0, r1, lsl #2]
   3a1b8:	cmp	r0, #0
   3a1bc:	beq	3a2b0 <__assert_fail@plt+0x276c0>
   3a1c0:	ldr	r1, [sp, #28]
   3a1c4:	add	r0, r0, #4
   3a1c8:	ldr	r1, [r1, #12]
   3a1cc:	ldr	r1, [r1, r7, lsl #2]
   3a1d0:	bl	36874 <__assert_fail@plt+0x23c84>
   3a1d4:	mov	r4, #1
   3a1d8:	cmp	r0, #0
   3a1dc:	bne	3a264 <__assert_fail@plt+0x27674>
   3a1e0:	b	3a2b0 <__assert_fail@plt+0x276c0>
   3a1e4:	ldr	r0, [sl, #12]
   3a1e8:	ldr	r8, [r9, #84]	; 0x54
   3a1ec:	mov	r2, r9
   3a1f0:	mov	r1, r7
   3a1f4:	mov	r3, r6
   3a1f8:	str	r0, [sp, #20]
   3a1fc:	mov	r0, r8
   3a200:	bl	39174 <__assert_fail@plt+0x26584>
   3a204:	mov	r4, r0
   3a208:	cmp	r0, #1
   3a20c:	blt	3a22c <__assert_fail@plt+0x2763c>
   3a210:	ldr	r1, [sp, #20]
   3a214:	add	r0, r4, r6
   3a218:	mov	r2, r6
   3a21c:	cmp	r0, r1
   3a220:	ble	3a238 <__assert_fail@plt+0x27648>
   3a224:	mov	r6, r2
   3a228:	b	3a264 <__assert_fail@plt+0x27674>
   3a22c:	cmp	r4, #0
   3a230:	bne	3a264 <__assert_fail@plt+0x27674>
   3a234:	b	3a18c <__assert_fail@plt+0x2759c>
   3a238:	ldr	r1, [sl]
   3a23c:	mov	r6, r2
   3a240:	ldr	r0, [r1, r0, lsl #2]
   3a244:	cmp	r0, #0
   3a248:	beq	3a18c <__assert_fail@plt+0x2759c>
   3a24c:	ldr	r1, [r8, #12]
   3a250:	add	r0, r0, #4
   3a254:	ldr	r1, [r1, r7, lsl #2]
   3a258:	bl	36874 <__assert_fail@plt+0x23c84>
   3a25c:	cmp	r0, #0
   3a260:	beq	3a18c <__assert_fail@plt+0x2759c>
   3a264:	ldr	r0, [sl, #20]
   3a268:	cmp	r0, #0
   3a26c:	beq	3a29c <__assert_fail@plt+0x276ac>
   3a270:	ldr	r0, [sp, #28]
   3a274:	ldr	r1, [sp, #12]
   3a278:	add	r3, r4, r6
   3a27c:	ldr	r0, [r0, #12]
   3a280:	ldr	r2, [r0, r7, lsl #2]
   3a284:	mov	r0, r9
   3a288:	str	r7, [sp]
   3a28c:	str	r6, [sp, #4]
   3a290:	bl	3aed4 <__assert_fail@plt+0x282e4>
   3a294:	cmp	r0, #0
   3a298:	bne	3a2b0 <__assert_fail@plt+0x276c0>
   3a29c:	add	r0, sp, #32
   3a2a0:	mov	r1, r7
   3a2a4:	bl	3665c <__assert_fail@plt+0x23a6c>
   3a2a8:	cmp	r0, #0
   3a2ac:	beq	3a2ec <__assert_fail@plt+0x276fc>
   3a2b0:	ldr	r1, [sp, #24]
   3a2b4:	add	r5, r5, #1
   3a2b8:	ldr	r0, [r1, #20]
   3a2bc:	cmp	r5, r0
   3a2c0:	blt	3a16c <__assert_fail@plt+0x2757c>
   3a2c4:	mov	r0, r9
   3a2c8:	mov	r1, sl
   3a2cc:	mov	r2, r6
   3a2d0:	add	r3, sp, #32
   3a2d4:	bl	3a3e0 <__assert_fail@plt+0x277f0>
   3a2d8:	ldr	r1, [sp, #8]
   3a2dc:	cmp	r0, #0
   3a2e0:	beq	3a104 <__assert_fail@plt+0x27514>
   3a2e4:	mov	r4, r0
   3a2e8:	b	3a30c <__assert_fail@plt+0x2771c>
   3a2ec:	mov	r4, #12
   3a2f0:	b	3a30c <__assert_fail@plt+0x2771c>
   3a2f4:	mov	r4, #0
   3a2f8:	b	3a30c <__assert_fail@plt+0x2771c>
   3a2fc:	lsl	r2, r6, #2
   3a300:	mov	r1, #0
   3a304:	mov	r4, #0
   3a308:	bl	12938 <memset@plt>
   3a30c:	ldr	r0, [sp, #40]	; 0x28
   3a310:	bl	2bcbc <__assert_fail@plt+0x190cc>
   3a314:	mov	r0, r4
   3a318:	sub	sp, fp, #28
   3a31c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3a320:	mov	r0, #0
   3a324:	mov	r4, #12
   3a328:	str	r0, [sp, #32]
   3a32c:	str	r0, [sp, #36]	; 0x24
   3a330:	b	3a314 <__assert_fail@plt+0x27724>
   3a334:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   3a338:	add	fp, sp, #24
   3a33c:	sub	sp, sp, #16
   3a340:	cmp	r3, #1
   3a344:	blt	3a3d4 <__assert_fail@plt+0x277e4>
   3a348:	mov	r4, r3
   3a34c:	mov	r5, r2
   3a350:	mov	r6, r1
   3a354:	mov	r7, r0
   3a358:	mov	r8, sp
   3a35c:	add	r9, sp, #12
   3a360:	ldr	r1, [r6]
   3a364:	ldr	r0, [r5]
   3a368:	cmp	r1, #0
   3a36c:	beq	3a3c0 <__assert_fail@plt+0x277d0>
   3a370:	cmp	r0, #0
   3a374:	beq	3a3c4 <__assert_fail@plt+0x277d4>
   3a378:	add	r2, r0, #4
   3a37c:	add	r1, r1, #4
   3a380:	mov	r0, r8
   3a384:	bl	38060 <__assert_fail@plt+0x25470>
   3a388:	cmp	r0, #0
   3a38c:	str	r0, [sp, #12]
   3a390:	bne	3a3d8 <__assert_fail@plt+0x277e8>
   3a394:	mov	r0, r9
   3a398:	mov	r1, r7
   3a39c:	mov	r2, r8
   3a3a0:	bl	38f7c <__assert_fail@plt+0x2638c>
   3a3a4:	str	r0, [r6]
   3a3a8:	ldr	r0, [sp, #8]
   3a3ac:	bl	2bcbc <__assert_fail@plt+0x190cc>
   3a3b0:	ldr	r0, [sp, #12]
   3a3b4:	cmp	r0, #0
   3a3b8:	beq	3a3c4 <__assert_fail@plt+0x277d4>
   3a3bc:	b	3a3d8 <__assert_fail@plt+0x277e8>
   3a3c0:	str	r0, [r6]
   3a3c4:	add	r6, r6, #4
   3a3c8:	add	r5, r5, #4
   3a3cc:	subs	r4, r4, #1
   3a3d0:	bne	3a360 <__assert_fail@plt+0x27770>
   3a3d4:	mov	r0, #0
   3a3d8:	sub	sp, fp, #24
   3a3dc:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   3a3e0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3a3e4:	add	fp, sp, #28
   3a3e8:	sub	sp, sp, #84	; 0x54
   3a3ec:	mov	r6, r3
   3a3f0:	mov	r3, #0
   3a3f4:	ldr	r7, [r0, #84]	; 0x54
   3a3f8:	mov	r4, r2
   3a3fc:	str	r0, [sp, #44]	; 0x2c
   3a400:	str	r1, [sp, #48]	; 0x30
   3a404:	str	r3, [sp, #52]	; 0x34
   3a408:	str	r4, [sp, #40]	; 0x28
   3a40c:	ldr	r2, [r0, #100]	; 0x64
   3a410:	ldr	r8, [r2, r4, lsl #2]
   3a414:	ldr	r2, [r6, #4]
   3a418:	cmp	r8, #0
   3a41c:	mov	r0, r8
   3a420:	addne	r0, r0, #4
   3a424:	cmp	r2, #0
   3a428:	str	r0, [sp, #36]	; 0x24
   3a42c:	beq	3a7a8 <__assert_fail@plt+0x27bb8>
   3a430:	cmp	r8, #0
   3a434:	beq	3a77c <__assert_fail@plt+0x27b8c>
   3a438:	mov	r0, #0
   3a43c:	mov	r1, r7
   3a440:	mov	r2, r6
   3a444:	str	r7, [sp, #28]
   3a448:	str	r6, [sp, #20]
   3a44c:	str	r0, [sp, #56]	; 0x38
   3a450:	add	r0, sp, #56	; 0x38
   3a454:	bl	38f7c <__assert_fail@plt+0x2638c>
   3a458:	ldr	r9, [sp, #56]	; 0x38
   3a45c:	cmp	r9, #0
   3a460:	bne	3aac4 <__assert_fail@plt+0x27ed4>
   3a464:	mov	r6, r0
   3a468:	mov	r5, r0
   3a46c:	ldr	r2, [sp, #20]
   3a470:	ldr	r0, [r6, #28]!
   3a474:	cmp	r0, #0
   3a478:	bne	3a50c <__assert_fail@plt+0x2791c>
   3a47c:	ldr	r0, [r2, #4]
   3a480:	mov	r4, #0
   3a484:	mov	r7, r2
   3a488:	str	r0, [r5, #28]
   3a48c:	lsl	r0, r0, #2
   3a490:	str	r4, [r5, #32]
   3a494:	bl	2de8c <__assert_fail@plt+0x1b29c>
   3a498:	cmp	r0, #0
   3a49c:	mov	r9, #12
   3a4a0:	str	r0, [r5, #36]	; 0x24
   3a4a4:	movweq	r4, #12
   3a4a8:	str	r4, [sp, #56]	; 0x38
   3a4ac:	beq	3aac4 <__assert_fail@plt+0x27ed4>
   3a4b0:	ldr	r0, [r7, #4]
   3a4b4:	mov	r2, r7
   3a4b8:	cmp	r0, #1
   3a4bc:	blt	3a50c <__assert_fail@plt+0x2791c>
   3a4c0:	mov	r5, #0
   3a4c4:	ldr	r0, [r2, #8]
   3a4c8:	ldr	r1, [sp, #28]
   3a4cc:	mov	r4, r2
   3a4d0:	ldr	r0, [r0, r5, lsl #2]
   3a4d4:	ldr	r1, [r1, #28]
   3a4d8:	add	r0, r0, r0, lsl #1
   3a4dc:	add	r1, r1, r0, lsl #2
   3a4e0:	mov	r0, r6
   3a4e4:	bl	36450 <__assert_fail@plt+0x23860>
   3a4e8:	cmp	r0, #0
   3a4ec:	bne	3aad4 <__assert_fail@plt+0x27ee4>
   3a4f0:	ldr	r0, [r4, #4]
   3a4f4:	add	r5, r5, #1
   3a4f8:	mov	r2, r4
   3a4fc:	cmp	r5, r0
   3a500:	blt	3a4c4 <__assert_fail@plt+0x278d4>
   3a504:	mov	r0, #0
   3a508:	str	r0, [sp, #56]	; 0x38
   3a50c:	ldr	r1, [sp, #36]	; 0x24
   3a510:	mov	r0, r2
   3a514:	mov	r2, r6
   3a518:	bl	3aaf0 <__assert_fail@plt+0x27f00>
   3a51c:	cmp	r0, #0
   3a520:	str	r0, [sp, #52]	; 0x34
   3a524:	bne	3aae8 <__assert_fail@plt+0x27ef8>
   3a528:	ldr	ip, [sp, #48]	; 0x30
   3a52c:	ldr	r4, [sp, #40]	; 0x28
   3a530:	ldr	r7, [sp, #28]
   3a534:	ldr	r6, [sp, #20]
   3a538:	ldr	r0, [ip, #20]
   3a53c:	cmp	r0, #0
   3a540:	beq	3a77c <__assert_fail@plt+0x27b8c>
   3a544:	cmp	r0, #1
   3a548:	str	r8, [sp, #12]
   3a54c:	blt	3a770 <__assert_fail@plt+0x27b80>
   3a550:	ldr	r0, [sp, #44]	; 0x2c
   3a554:	mov	r8, #0
   3a558:	ldr	r0, [r0, #116]	; 0x74
   3a55c:	str	r0, [sp, #24]
   3a560:	ldr	r0, [ip, #24]
   3a564:	ldr	r1, [sp, #24]
   3a568:	ldr	r0, [r0, r8, lsl #2]
   3a56c:	add	r0, r0, r0, lsl #1
   3a570:	add	r1, r1, r0, lsl #3
   3a574:	ldr	r2, [r1, #8]
   3a578:	cmp	r2, r4
   3a57c:	bge	3a760 <__assert_fail@plt+0x27b70>
   3a580:	ldr	r1, [r1, #4]
   3a584:	cmp	r1, r4
   3a588:	blt	3a760 <__assert_fail@plt+0x27b70>
   3a58c:	ldr	r1, [sp, #24]
   3a590:	ldr	r2, [r7]
   3a594:	ldr	r0, [r1, r0, lsl #3]!
   3a598:	ldr	r1, [r1, #12]
   3a59c:	ldr	sl, [r2, r0, lsl #3]
   3a5a0:	ldr	r0, [r6, #4]
   3a5a4:	cmp	r1, r4
   3a5a8:	bne	3a6f0 <__assert_fail@plt+0x27b00>
   3a5ac:	cmp	r0, #1
   3a5b0:	blt	3a760 <__assert_fail@plt+0x27b70>
   3a5b4:	ldr	r3, [r6, #8]
   3a5b8:	mvn	r1, #0
   3a5bc:	str	r1, [sp, #32]
   3a5c0:	mvn	r1, #0
   3a5c4:	ldr	r5, [r3]
   3a5c8:	add	r4, r2, r5, lsl #3
   3a5cc:	ldrb	r4, [r4, #4]
   3a5d0:	cmp	r4, #9
   3a5d4:	beq	3a5f0 <__assert_fail@plt+0x27a00>
   3a5d8:	cmp	r4, #8
   3a5dc:	bne	3a604 <__assert_fail@plt+0x27a14>
   3a5e0:	ldr	r4, [r2, r5, lsl #3]
   3a5e4:	cmp	sl, r4
   3a5e8:	moveq	r1, r5
   3a5ec:	b	3a604 <__assert_fail@plt+0x27a14>
   3a5f0:	ldr	r4, [r2, r5, lsl #3]
   3a5f4:	cmp	sl, r4
   3a5f8:	ldr	r4, [sp, #32]
   3a5fc:	moveq	r4, r5
   3a600:	str	r4, [sp, #32]
   3a604:	add	r3, r3, #4
   3a608:	subs	r0, r0, #1
   3a60c:	bne	3a5c4 <__assert_fail@plt+0x279d4>
   3a610:	cmp	r1, #0
   3a614:	bmi	3a63c <__assert_fail@plt+0x27a4c>
   3a618:	ldr	r3, [sp, #36]	; 0x24
   3a61c:	mov	r0, r7
   3a620:	mov	r2, r6
   3a624:	bl	3acd0 <__assert_fail@plt+0x280e0>
   3a628:	ldr	r6, [sp, #20]
   3a62c:	ldr	r7, [sp, #28]
   3a630:	ldr	ip, [sp, #48]	; 0x30
   3a634:	cmp	r0, #0
   3a638:	bne	3aac0 <__assert_fail@plt+0x27ed0>
   3a63c:	ldr	sl, [sp, #32]
   3a640:	ldr	r4, [sp, #40]	; 0x28
   3a644:	cmp	sl, #0
   3a648:	bmi	3a760 <__assert_fail@plt+0x27b70>
   3a64c:	ldr	r0, [r6, #4]
   3a650:	cmp	r0, #1
   3a654:	str	r0, [sp, #16]
   3a658:	blt	3a760 <__assert_fail@plt+0x27b70>
   3a65c:	mov	r5, #0
   3a660:	ldr	r0, [r6, #8]
   3a664:	mov	r1, sl
   3a668:	ldr	r6, [r0, r5, lsl #2]
   3a66c:	ldr	r0, [r7, #28]
   3a670:	add	r9, r6, r6, lsl #1
   3a674:	add	r0, r0, r9, lsl #2
   3a678:	bl	36874 <__assert_fail@plt+0x23c84>
   3a67c:	cmp	r0, #0
   3a680:	bne	3a69c <__assert_fail@plt+0x27aac>
   3a684:	ldr	r0, [r7, #24]
   3a688:	mov	r1, sl
   3a68c:	add	r0, r0, r9, lsl #2
   3a690:	bl	36874 <__assert_fail@plt+0x23c84>
   3a694:	cmp	r0, #0
   3a698:	beq	3a6bc <__assert_fail@plt+0x27acc>
   3a69c:	ldr	r6, [sp, #20]
   3a6a0:	ldr	r0, [sp, #16]
   3a6a4:	ldr	r4, [sp, #40]	; 0x28
   3a6a8:	ldr	ip, [sp, #48]	; 0x30
   3a6ac:	add	r5, r5, #1
   3a6b0:	cmp	r5, r0
   3a6b4:	blt	3a660 <__assert_fail@plt+0x27a70>
   3a6b8:	b	3a760 <__assert_fail@plt+0x27b70>
   3a6bc:	mov	r1, r6
   3a6c0:	ldr	r6, [sp, #20]
   3a6c4:	ldr	r3, [sp, #36]	; 0x24
   3a6c8:	mov	r0, r7
   3a6cc:	mov	r2, r6
   3a6d0:	bl	3acd0 <__assert_fail@plt+0x280e0>
   3a6d4:	cmp	r0, #0
   3a6d8:	bne	3aac0 <__assert_fail@plt+0x27ed0>
   3a6dc:	ldr	r0, [r6, #4]
   3a6e0:	ldr	r7, [sp, #28]
   3a6e4:	sub	r5, r5, #1
   3a6e8:	str	r0, [sp, #16]
   3a6ec:	b	3a6a0 <__assert_fail@plt+0x27ab0>
   3a6f0:	cmp	r0, #1
   3a6f4:	blt	3a760 <__assert_fail@plt+0x27b70>
   3a6f8:	mov	r5, #0
   3a6fc:	ldr	r1, [r6, #8]
   3a700:	ldr	r1, [r1, r5, lsl #2]
   3a704:	add	r3, r2, r1, lsl #3
   3a708:	ldrb	r3, [r3, #4]
   3a70c:	orr	r3, r3, #1
   3a710:	cmp	r3, #9
   3a714:	bne	3a74c <__assert_fail@plt+0x27b5c>
   3a718:	ldr	r2, [r2, r1, lsl #3]
   3a71c:	cmp	sl, r2
   3a720:	bne	3a74c <__assert_fail@plt+0x27b5c>
   3a724:	ldr	r3, [sp, #36]	; 0x24
   3a728:	mov	r0, r7
   3a72c:	mov	r2, r6
   3a730:	bl	3acd0 <__assert_fail@plt+0x280e0>
   3a734:	cmp	r0, #0
   3a738:	bne	3aac0 <__assert_fail@plt+0x27ed0>
   3a73c:	ldr	r0, [r6, #4]
   3a740:	ldr	r4, [sp, #40]	; 0x28
   3a744:	ldr	ip, [sp, #48]	; 0x30
   3a748:	ldr	r7, [sp, #28]
   3a74c:	add	r5, r5, #1
   3a750:	cmp	r5, r0
   3a754:	bge	3a760 <__assert_fail@plt+0x27b70>
   3a758:	ldr	r2, [r7]
   3a75c:	b	3a6fc <__assert_fail@plt+0x27b0c>
   3a760:	ldr	r0, [ip, #20]
   3a764:	add	r8, r8, #1
   3a768:	cmp	r8, r0
   3a76c:	blt	3a560 <__assert_fail@plt+0x27970>
   3a770:	ldr	r8, [sp, #12]
   3a774:	mov	r0, #0
   3a778:	str	r0, [sp, #52]	; 0x34
   3a77c:	add	r0, sp, #52	; 0x34
   3a780:	mov	r1, r7
   3a784:	mov	r2, r6
   3a788:	bl	38f7c <__assert_fail@plt+0x2638c>
   3a78c:	ldr	r1, [sp, #48]	; 0x30
   3a790:	ldr	r1, [r1]
   3a794:	str	r0, [r1, r4, lsl #2]
   3a798:	ldr	r9, [sp, #52]	; 0x34
   3a79c:	cmp	r9, #0
   3a7a0:	beq	3a7b0 <__assert_fail@plt+0x27bc0>
   3a7a4:	b	3aab4 <__assert_fail@plt+0x27ec4>
   3a7a8:	ldr	r1, [r1]
   3a7ac:	str	r3, [r1, r4, lsl #2]
   3a7b0:	cmp	r8, #0
   3a7b4:	beq	3aab0 <__assert_fail@plt+0x27ec0>
   3a7b8:	ldr	r0, [sp, #44]	; 0x2c
   3a7bc:	ldr	r1, [sp, #40]	; 0x28
   3a7c0:	ldr	r0, [r0, #100]	; 0x64
   3a7c4:	ldr	r0, [r0, r1, lsl #2]
   3a7c8:	ldrb	r0, [r0, #52]	; 0x34
   3a7cc:	tst	r0, #64	; 0x40
   3a7d0:	beq	3aab0 <__assert_fail@plt+0x27ec0>
   3a7d4:	ldr	r0, [sp, #44]	; 0x2c
   3a7d8:	ldr	r9, [sp, #40]	; 0x28
   3a7dc:	ldr	r8, [r0, #84]	; 0x54
   3a7e0:	mov	r1, r9
   3a7e4:	bl	38268 <__assert_fail@plt+0x25678>
   3a7e8:	cmn	r0, #1
   3a7ec:	str	r0, [sp, #16]
   3a7f0:	beq	3aaa0 <__assert_fail@plt+0x27eb0>
   3a7f4:	ldr	r0, [sp, #36]	; 0x24
   3a7f8:	mov	r6, #0
   3a7fc:	str	r6, [sp, #56]	; 0x38
   3a800:	ldr	r0, [r0, #4]
   3a804:	cmp	r0, #0
   3a808:	ble	3aaac <__assert_fail@plt+0x27ebc>
   3a80c:	ldr	r3, [sp, #48]	; 0x30
   3a810:	add	r1, r9, #1
   3a814:	mov	r7, #0
   3a818:	str	r1, [sp, #8]
   3a81c:	add	r1, sp, #56	; 0x38
   3a820:	add	r1, r1, #16
   3a824:	str	r1, [sp, #24]
   3a828:	add	r1, r3, #16
   3a82c:	str	r1, [sp, #28]
   3a830:	ldr	r1, [sp, #16]
   3a834:	add	r1, r1, r1, lsl #1
   3a838:	str	r1, [sp, #12]
   3a83c:	ldr	r1, [sp, #36]	; 0x24
   3a840:	ldr	r2, [r3, #8]
   3a844:	ldr	r1, [r1, #8]
   3a848:	ldr	sl, [r1, r7, lsl #2]
   3a84c:	ldr	r1, [r8]
   3a850:	add	r1, r1, sl, lsl #3
   3a854:	cmp	sl, r2
   3a858:	ldrb	r1, [r1, #4]
   3a85c:	bne	3a878 <__assert_fail@plt+0x27c88>
   3a860:	cmp	r1, #4
   3a864:	bne	3aa70 <__assert_fail@plt+0x27e80>
   3a868:	ldr	r1, [r3, #12]
   3a86c:	cmp	r1, r9
   3a870:	bne	3a880 <__assert_fail@plt+0x27c90>
   3a874:	b	3aa70 <__assert_fail@plt+0x27e80>
   3a878:	cmp	r1, #4
   3a87c:	bne	3aa70 <__assert_fail@plt+0x27e80>
   3a880:	ldr	r0, [sp, #44]	; 0x2c
   3a884:	ldr	r1, [sp, #12]
   3a888:	str	r7, [sp, #20]
   3a88c:	ldr	r7, [sp, #16]
   3a890:	str	r6, [sp, #32]
   3a894:	ldr	r0, [r0, #116]	; 0x74
   3a898:	add	r5, r0, r1, lsl #3
   3a89c:	ldr	r0, [r5]
   3a8a0:	cmp	r0, sl
   3a8a4:	bne	3a934 <__assert_fail@plt+0x27d44>
   3a8a8:	ldr	r0, [r5, #8]
   3a8ac:	ldr	r1, [r5, #12]
   3a8b0:	subs	r0, r1, r0
   3a8b4:	add	r6, r0, r9
   3a8b8:	beq	3a8c8 <__assert_fail@plt+0x27cd8>
   3a8bc:	ldr	r0, [r8, #12]
   3a8c0:	add	r0, r0, sl, lsl #2
   3a8c4:	b	3a8d8 <__assert_fail@plt+0x27ce8>
   3a8c8:	ldr	r0, [r8, #20]
   3a8cc:	add	r1, sl, sl, lsl #1
   3a8d0:	add	r0, r0, r1, lsl #2
   3a8d4:	ldr	r0, [r0, #8]
   3a8d8:	ldr	r1, [r3, #12]
   3a8dc:	cmp	r6, r1
   3a8e0:	bgt	3a934 <__assert_fail@plt+0x27d44>
   3a8e4:	ldr	r1, [r3]
   3a8e8:	ldr	r1, [r1, r6, lsl #2]
   3a8ec:	cmp	r1, #0
   3a8f0:	beq	3a934 <__assert_fail@plt+0x27d44>
   3a8f4:	ldr	r4, [r0]
   3a8f8:	add	r0, r1, #4
   3a8fc:	mov	r1, r4
   3a900:	bl	36874 <__assert_fail@plt+0x23c84>
   3a904:	cmp	r0, #0
   3a908:	beq	3a92c <__assert_fail@plt+0x27d3c>
   3a90c:	ldr	r0, [sp, #44]	; 0x2c
   3a910:	ldr	r1, [sp, #28]
   3a914:	mov	r2, sl
   3a918:	mov	r3, r9
   3a91c:	stm	sp, {r4, r6}
   3a920:	bl	3aed4 <__assert_fail@plt+0x282e4>
   3a924:	cmp	r0, #0
   3a928:	beq	3a950 <__assert_fail@plt+0x27d60>
   3a92c:	mov	r0, r5
   3a930:	b	3aa34 <__assert_fail@plt+0x27e44>
   3a934:	mov	r0, r5
   3a938:	add	r5, r0, #24
   3a93c:	ldrb	r0, [r0, #20]
   3a940:	add	r7, r7, #1
   3a944:	cmp	r0, #0
   3a948:	bne	3a89c <__assert_fail@plt+0x27cac>
   3a94c:	b	3aa60 <__assert_fail@plt+0x27e70>
   3a950:	ldr	r0, [sp, #32]
   3a954:	cmp	r0, #0
   3a958:	bne	3a98c <__assert_fail@plt+0x27d9c>
   3a95c:	ldr	r0, [sp, #48]	; 0x30
   3a960:	mov	r1, #12
   3a964:	vld1.32	{d16-d17}, [r0], r1
   3a968:	vld1.32	{d18-d19}, [r0]
   3a96c:	add	r0, sp, #56	; 0x38
   3a970:	vst1.64	{d16-d17}, [r0], r1
   3a974:	ldr	r1, [sp, #28]
   3a978:	vst1.32	{d18-d19}, [r0]
   3a97c:	ldr	r0, [sp, #24]
   3a980:	bl	367f8 <__assert_fail@plt+0x23c08>
   3a984:	cmp	r0, #0
   3a988:	bne	3aacc <__assert_fail@plt+0x27edc>
   3a98c:	ldr	r4, [sp, #40]	; 0x28
   3a990:	ldr	r0, [sp, #24]
   3a994:	mov	r1, r7
   3a998:	str	r4, [sp, #68]	; 0x44
   3a99c:	str	sl, [sp, #64]	; 0x40
   3a9a0:	bl	3665c <__assert_fail@plt+0x23a6c>
   3a9a4:	cmp	r0, #0
   3a9a8:	beq	3aadc <__assert_fail@plt+0x27eec>
   3a9ac:	ldr	r5, [sp, #56]	; 0x38
   3a9b0:	ldr	r0, [sp, #44]	; 0x2c
   3a9b4:	add	r1, sp, #56	; 0x38
   3a9b8:	ldr	r4, [r5, r4, lsl #2]
   3a9bc:	bl	3a09c <__assert_fail@plt+0x274ac>
   3a9c0:	cmp	r0, #0
   3a9c4:	bne	3aacc <__assert_fail@plt+0x27edc>
   3a9c8:	ldr	r0, [sp, #48]	; 0x30
   3a9cc:	ldr	r1, [r0, #4]
   3a9d0:	cmp	r1, #0
   3a9d4:	beq	3a9f0 <__assert_fail@plt+0x27e00>
   3a9d8:	ldr	r3, [sp, #8]
   3a9dc:	mov	r0, r8
   3a9e0:	mov	r2, r5
   3a9e4:	bl	3a334 <__assert_fail@plt+0x27744>
   3a9e8:	cmp	r0, #0
   3a9ec:	bne	3aacc <__assert_fail@plt+0x27edc>
   3a9f0:	ldr	r9, [sp, #40]	; 0x28
   3a9f4:	ldr	r0, [sp, #24]
   3a9f8:	mov	r1, r7
   3a9fc:	str	r5, [sp, #32]
   3aa00:	str	r4, [r5, r9, lsl #2]
   3aa04:	bl	36874 <__assert_fail@plt+0x23c84>
   3aa08:	subs	r1, r0, #1
   3aa0c:	blt	3aa24 <__assert_fail@plt+0x27e34>
   3aa10:	ldr	r2, [sp, #76]	; 0x4c
   3aa14:	cmp	r2, r0
   3aa18:	subge	r2, r2, #1
   3aa1c:	strge	r2, [sp, #76]	; 0x4c
   3aa20:	bgt	3aa3c <__assert_fail@plt+0x27e4c>
   3aa24:	ldr	r0, [sp, #44]	; 0x2c
   3aa28:	add	r1, r7, r7, lsl #1
   3aa2c:	ldr	r0, [r0, #116]	; 0x74
   3aa30:	add	r0, r0, r1, lsl #3
   3aa34:	ldr	r3, [sp, #48]	; 0x30
   3aa38:	b	3a938 <__assert_fail@plt+0x27d48>
   3aa3c:	ldr	r3, [sp, #80]	; 0x50
   3aa40:	add	r0, r3, r0, lsl #2
   3aa44:	ldr	r3, [r0]
   3aa48:	add	r1, r1, #1
   3aa4c:	cmp	r1, r2
   3aa50:	str	r3, [r0, #-4]
   3aa54:	add	r0, r0, #4
   3aa58:	blt	3aa44 <__assert_fail@plt+0x27e54>
   3aa5c:	b	3aa24 <__assert_fail@plt+0x27e34>
   3aa60:	ldr	r0, [sp, #36]	; 0x24
   3aa64:	ldr	r7, [sp, #20]
   3aa68:	ldr	r6, [sp, #32]
   3aa6c:	ldr	r0, [r0, #4]
   3aa70:	add	r7, r7, #1
   3aa74:	cmp	r7, r0
   3aa78:	blt	3a83c <__assert_fail@plt+0x27c4c>
   3aa7c:	mov	r9, #0
   3aa80:	cmp	r6, #0
   3aa84:	beq	3aa90 <__assert_fail@plt+0x27ea0>
   3aa88:	ldr	r0, [sp, #80]	; 0x50
   3aa8c:	bl	2bcbc <__assert_fail@plt+0x190cc>
   3aa90:	cmp	r9, #0
   3aa94:	str	r9, [sp, #52]	; 0x34
   3aa98:	moveq	r9, #0
   3aa9c:	b	3aab4 <__assert_fail@plt+0x27ec4>
   3aaa0:	mov	r0, #0
   3aaa4:	str	r0, [sp, #52]	; 0x34
   3aaa8:	b	3aab0 <__assert_fail@plt+0x27ec0>
   3aaac:	str	r6, [sp, #52]	; 0x34
   3aab0:	mov	r9, #0
   3aab4:	mov	r0, r9
   3aab8:	sub	sp, fp, #28
   3aabc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3aac0:	mov	r9, r0
   3aac4:	str	r9, [sp, #52]	; 0x34
   3aac8:	b	3aab4 <__assert_fail@plt+0x27ec4>
   3aacc:	mov	r9, r0
   3aad0:	b	3aae0 <__assert_fail@plt+0x27ef0>
   3aad4:	str	r0, [sp, #56]	; 0x38
   3aad8:	b	3aac4 <__assert_fail@plt+0x27ed4>
   3aadc:	mov	r9, #12
   3aae0:	ldr	r6, [sp, #56]	; 0x38
   3aae4:	b	3aa80 <__assert_fail@plt+0x27e90>
   3aae8:	mov	r9, r0
   3aaec:	b	3aab4 <__assert_fail@plt+0x27ec4>
   3aaf0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3aaf4:	add	fp, sp, #28
   3aaf8:	sub	sp, sp, #4
   3aafc:	mov	r9, r0
   3ab00:	ldr	r0, [r1, #4]
   3ab04:	mov	r8, #0
   3ab08:	cmp	r0, #0
   3ab0c:	beq	3acbc <__assert_fail@plt+0x280cc>
   3ab10:	mov	r5, r2
   3ab14:	ldr	r2, [r2, #4]
   3ab18:	cmp	r2, #0
   3ab1c:	beq	3acbc <__assert_fail@plt+0x280cc>
   3ab20:	mov	sl, r1
   3ab24:	ldr	r1, [r9, #4]
   3ab28:	ldr	r7, [r9]
   3ab2c:	add	r3, r2, r0
   3ab30:	add	r6, r1, r3
   3ab34:	cmp	r6, r7
   3ab38:	ble	3ab68 <__assert_fail@plt+0x27f78>
   3ab3c:	ldr	r0, [r9, #8]
   3ab40:	add	r4, r7, r3
   3ab44:	lsl	r1, r4, #2
   3ab48:	bl	2e984 <__assert_fail@plt+0x1bd94>
   3ab4c:	cmp	r0, #0
   3ab50:	beq	3acc8 <__assert_fail@plt+0x280d8>
   3ab54:	str	r4, [r9]
   3ab58:	str	r0, [r9, #8]
   3ab5c:	ldr	r1, [r9, #4]
   3ab60:	ldr	r2, [r5, #4]
   3ab64:	ldr	r0, [sl, #4]
   3ab68:	ldr	lr, [r5, #8]
   3ab6c:	ldr	r4, [sl, #8]
   3ab70:	add	r3, r0, r1
   3ab74:	sub	r7, r1, #1
   3ab78:	add	ip, r3, r2
   3ab7c:	sub	r0, r0, #1
   3ab80:	sub	r3, r2, #1
   3ab84:	ldr	r1, [lr, r3, lsl #2]
   3ab88:	ldr	r6, [r4, r0, lsl #2]
   3ab8c:	cmp	r6, r1
   3ab90:	beq	3abbc <__assert_fail@plt+0x27fcc>
   3ab94:	blt	3abac <__assert_fail@plt+0x27fbc>
   3ab98:	sub	r6, r0, #1
   3ab9c:	cmp	r0, #0
   3aba0:	mov	r0, r6
   3aba4:	bgt	3ab88 <__assert_fail@plt+0x27f98>
   3aba8:	b	3ac20 <__assert_fail@plt+0x28030>
   3abac:	cmp	r2, #2
   3abb0:	mov	r2, r3
   3abb4:	bge	3ab80 <__assert_fail@plt+0x27f90>
   3abb8:	b	3ac20 <__assert_fail@plt+0x28030>
   3abbc:	cmp	r7, #0
   3abc0:	bmi	3abfc <__assert_fail@plt+0x2800c>
   3abc4:	ldr	r8, [r9, #8]
   3abc8:	mov	r1, r7
   3abcc:	ldr	r7, [r8, r1, lsl #2]
   3abd0:	cmp	r7, r6
   3abd4:	ble	3abec <__assert_fail@plt+0x27ffc>
   3abd8:	sub	r7, r1, #1
   3abdc:	cmp	r1, #0
   3abe0:	mov	r1, r7
   3abe4:	bgt	3abcc <__assert_fail@plt+0x27fdc>
   3abe8:	b	3abfc <__assert_fail@plt+0x2800c>
   3abec:	mov	r7, r1
   3abf0:	bne	3abfc <__assert_fail@plt+0x2800c>
   3abf4:	mov	r7, r1
   3abf8:	b	3ac08 <__assert_fail@plt+0x28018>
   3abfc:	ldr	r1, [r9, #8]
   3ac00:	sub	ip, ip, #1
   3ac04:	str	r6, [r1, ip, lsl #2]
   3ac08:	cmp	r0, #1
   3ac0c:	mov	r8, #0
   3ac10:	blt	3ac20 <__assert_fail@plt+0x28030>
   3ac14:	cmp	r2, #2
   3ac18:	mov	r2, r3
   3ac1c:	bge	3ab7c <__assert_fail@plt+0x27f8c>
   3ac20:	ldr	r2, [r9, #4]
   3ac24:	ldr	lr, [sl, #4]
   3ac28:	ldr	r4, [r5, #4]
   3ac2c:	ldr	r0, [r9, #8]
   3ac30:	subs	r1, r2, #1
   3ac34:	add	r3, r1, lr
   3ac38:	add	r3, r3, r4
   3ac3c:	sub	r7, r3, ip
   3ac40:	add	r6, r7, #1
   3ac44:	add	r5, r6, r2
   3ac48:	str	r5, [r9, #4]
   3ac4c:	blt	3acac <__assert_fail@plt+0x280bc>
   3ac50:	cmp	r7, #0
   3ac54:	bmi	3acac <__assert_fail@plt+0x280bc>
   3ac58:	add	r2, r2, r4
   3ac5c:	add	r2, r2, lr
   3ac60:	sub	r2, r2, ip
   3ac64:	add	r7, r0, r2, lsl #2
   3ac68:	ldr	r2, [r0, r1, lsl #2]
   3ac6c:	ldr	r5, [r0, r3, lsl #2]
   3ac70:	cmp	r5, r2
   3ac74:	bgt	3ac90 <__assert_fail@plt+0x280a0>
   3ac78:	str	r2, [r7, r1, lsl #2]
   3ac7c:	sub	r2, r1, #1
   3ac80:	cmp	r1, #0
   3ac84:	mov	r1, r2
   3ac88:	bgt	3ac68 <__assert_fail@plt+0x28078>
   3ac8c:	b	3acac <__assert_fail@plt+0x280bc>
   3ac90:	str	r5, [r7, r1, lsl #2]
   3ac94:	sub	r7, r7, #4
   3ac98:	subs	r6, r6, #1
   3ac9c:	sub	r3, r3, #1
   3aca0:	mov	r2, #0
   3aca4:	bne	3ac68 <__assert_fail@plt+0x28078>
   3aca8:	b	3acb0 <__assert_fail@plt+0x280c0>
   3acac:	mov	r2, r6
   3acb0:	add	r1, r0, ip, lsl #2
   3acb4:	lsl	r2, r2, #2
   3acb8:	bl	125f0 <memcpy@plt>
   3acbc:	mov	r0, r8
   3acc0:	sub	sp, fp, #28
   3acc4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3acc8:	mov	r8, #12
   3accc:	b	3acbc <__assert_fail@plt+0x280cc>
   3acd0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3acd4:	add	fp, sp, #28
   3acd8:	sub	sp, sp, #36	; 0x24
   3acdc:	mov	r4, r2
   3ace0:	mov	r2, r0
   3ace4:	ldr	r0, [r0, #28]
   3ace8:	str	r1, [sp, #20]
   3acec:	add	r1, r1, r1, lsl #1
   3acf0:	mov	r5, #0
   3acf4:	str	r3, [sp, #4]
   3acf8:	str	r5, [sp, #28]
   3acfc:	str	r5, [sp, #24]
   3ad00:	str	r5, [sp, #32]
   3ad04:	add	r1, r0, r1, lsl #2
   3ad08:	mov	r0, r1
   3ad0c:	ldr	r7, [r0, #4]!
   3ad10:	cmp	r7, #1
   3ad14:	blt	3aeb8 <__assert_fail@plt+0x282c8>
   3ad18:	add	r8, r1, #8
   3ad1c:	mov	sl, #0
   3ad20:	str	r0, [sp, #8]
   3ad24:	str	r1, [sp, #16]
   3ad28:	ldr	r0, [r8]
   3ad2c:	ldr	r1, [sp, #20]
   3ad30:	ldr	r0, [r0, sl, lsl #2]
   3ad34:	cmp	r0, r1
   3ad38:	beq	3ae10 <__assert_fail@plt+0x28220>
   3ad3c:	ldr	r1, [r2]
   3ad40:	add	r1, r1, r0, lsl #3
   3ad44:	ldrb	r1, [r1, #4]
   3ad48:	tst	r1, #8
   3ad4c:	beq	3ae10 <__assert_fail@plt+0x28220>
   3ad50:	ldr	r1, [r2, #20]
   3ad54:	add	r0, r0, r0, lsl #1
   3ad58:	mvn	r5, #0
   3ad5c:	mov	r6, r2
   3ad60:	str	r0, [sp, #12]
   3ad64:	add	r0, r1, r0, lsl #2
   3ad68:	ldr	r1, [r0, #4]
   3ad6c:	ldr	r0, [r0, #8]
   3ad70:	cmp	r1, #2
   3ad74:	ldr	r9, [r0]
   3ad78:	ldrge	r5, [r0, #4]
   3ad7c:	ldr	r0, [sp, #16]
   3ad80:	mov	r1, r9
   3ad84:	bl	36874 <__assert_fail@plt+0x23c84>
   3ad88:	cmp	r0, #0
   3ad8c:	mov	r2, r6
   3ad90:	beq	3adcc <__assert_fail@plt+0x281dc>
   3ad94:	cmp	r5, #1
   3ad98:	blt	3ae10 <__assert_fail@plt+0x28220>
   3ad9c:	ldr	r0, [sp, #16]
   3ada0:	mov	r1, r5
   3ada4:	bl	36874 <__assert_fail@plt+0x23c84>
   3ada8:	cmp	r0, #0
   3adac:	bne	3ae0c <__assert_fail@plt+0x2821c>
   3adb0:	mov	r0, r4
   3adb4:	mov	r1, r5
   3adb8:	bl	36874 <__assert_fail@plt+0x23c84>
   3adbc:	cmp	r0, #0
   3adc0:	mov	r2, r6
   3adc4:	bne	3ade4 <__assert_fail@plt+0x281f4>
   3adc8:	b	3ae10 <__assert_fail@plt+0x28220>
   3adcc:	mov	r0, r4
   3add0:	mov	r1, r9
   3add4:	bl	36874 <__assert_fail@plt+0x23c84>
   3add8:	mov	r2, r6
   3addc:	cmp	r0, #0
   3ade0:	beq	3ad94 <__assert_fail@plt+0x281a4>
   3ade4:	ldr	r0, [r2, #28]
   3ade8:	ldr	r1, [sp, #12]
   3adec:	add	r2, r0, r1, lsl #2
   3adf0:	ldr	r1, [sp, #4]
   3adf4:	add	r0, sp, #24
   3adf8:	bl	3aaf0 <__assert_fail@plt+0x27f00>
   3adfc:	cmp	r0, #0
   3ae00:	bne	3aecc <__assert_fail@plt+0x282dc>
   3ae04:	ldr	r0, [sp, #8]
   3ae08:	ldr	r7, [r0]
   3ae0c:	mov	r2, r6
   3ae10:	add	sl, sl, #1
   3ae14:	cmp	sl, r7
   3ae18:	blt	3ad28 <__assert_fail@plt+0x28138>
   3ae1c:	cmp	r7, #1
   3ae20:	blt	3aeb4 <__assert_fail@plt+0x282c4>
   3ae24:	ldr	r0, [sp, #16]
   3ae28:	ldr	r7, [sp, #8]
   3ae2c:	mov	r5, #0
   3ae30:	add	r8, sp, #24
   3ae34:	ldr	r9, [r0, #8]
   3ae38:	ldr	r6, [r9, r5, lsl #2]
   3ae3c:	mov	r0, r8
   3ae40:	mov	r1, r6
   3ae44:	bl	36874 <__assert_fail@plt+0x23c84>
   3ae48:	cmp	r0, #0
   3ae4c:	bne	3ae78 <__assert_fail@plt+0x28288>
   3ae50:	mov	r0, r4
   3ae54:	mov	r1, r6
   3ae58:	bl	36874 <__assert_fail@plt+0x23c84>
   3ae5c:	subs	r1, r0, #1
   3ae60:	blt	3ae78 <__assert_fail@plt+0x28288>
   3ae64:	ldr	r2, [r4, #4]
   3ae68:	cmp	r2, r0
   3ae6c:	subge	r2, r2, #1
   3ae70:	strge	r2, [r4, #4]
   3ae74:	bgt	3ae8c <__assert_fail@plt+0x2829c>
   3ae78:	ldr	r0, [r7]
   3ae7c:	add	r5, r5, #1
   3ae80:	cmp	r5, r0
   3ae84:	blt	3ae38 <__assert_fail@plt+0x28248>
   3ae88:	b	3aeb4 <__assert_fail@plt+0x282c4>
   3ae8c:	ldr	r2, [r4, #8]
   3ae90:	add	r0, r2, r0, lsl #2
   3ae94:	ldr	r2, [r0]
   3ae98:	add	r1, r1, #1
   3ae9c:	str	r2, [r0, #-4]
   3aea0:	add	r0, r0, #4
   3aea4:	ldr	r2, [r4, #4]
   3aea8:	cmp	r1, r2
   3aeac:	blt	3ae94 <__assert_fail@plt+0x282a4>
   3aeb0:	b	3ae78 <__assert_fail@plt+0x28288>
   3aeb4:	mov	r5, #0
   3aeb8:	ldr	r0, [sp, #32]
   3aebc:	bl	2bcbc <__assert_fail@plt+0x190cc>
   3aec0:	mov	r0, r5
   3aec4:	sub	sp, fp, #28
   3aec8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3aecc:	mov	r5, r0
   3aed0:	b	3aeb8 <__assert_fail@plt+0x282c8>
   3aed4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3aed8:	add	fp, sp, #28
   3aedc:	sub	sp, sp, #20
   3aee0:	mov	r6, r1
   3aee4:	mov	r1, r3
   3aee8:	str	r2, [sp, #12]
   3aeec:	mov	r7, r0
   3aef0:	str	r3, [sp, #16]
   3aef4:	bl	38268 <__assert_fail@plt+0x25678>
   3aef8:	ldr	r1, [fp, #12]
   3aefc:	str	r0, [sp, #8]
   3af00:	mov	r0, r7
   3af04:	bl	38268 <__assert_fail@plt+0x25678>
   3af08:	mov	r4, r0
   3af0c:	ldr	r0, [r6, #4]
   3af10:	cmp	r0, #1
   3af14:	blt	3af98 <__assert_fail@plt+0x283a8>
   3af18:	ldr	sl, [r7, #84]	; 0x54
   3af1c:	mov	r5, #0
   3af20:	ldr	r0, [r6, #8]
   3af24:	ldr	r2, [r7, #116]	; 0x74
   3af28:	ldr	r3, [sp, #12]
   3af2c:	ldr	r1, [r0, r5, lsl #2]
   3af30:	add	r0, r1, r1, lsl #1
   3af34:	ldr	r0, [r2, r0, lsl #3]
   3af38:	ldr	r2, [sl]
   3af3c:	ldr	r9, [r2, r0, lsl #3]
   3af40:	ldr	r0, [sp, #16]
   3af44:	str	r0, [sp]
   3af48:	ldr	r0, [sp, #8]
   3af4c:	mov	r2, r9
   3af50:	str	r0, [sp, #4]
   3af54:	mov	r0, r7
   3af58:	bl	3afac <__assert_fail@plt+0x283bc>
   3af5c:	mov	r8, r0
   3af60:	ldr	r0, [r6, #8]
   3af64:	ldr	r3, [fp, #8]
   3af68:	mov	r2, r9
   3af6c:	ldr	r1, [r0, r5, lsl #2]
   3af70:	ldr	r0, [fp, #12]
   3af74:	stm	sp, {r0, r4}
   3af78:	mov	r0, r7
   3af7c:	bl	3afac <__assert_fail@plt+0x283bc>
   3af80:	cmp	r0, r8
   3af84:	bne	3afa0 <__assert_fail@plt+0x283b0>
   3af88:	ldr	r0, [r6, #4]
   3af8c:	add	r5, r5, #1
   3af90:	cmp	r5, r0
   3af94:	blt	3af20 <__assert_fail@plt+0x28330>
   3af98:	mov	r0, #0
   3af9c:	b	3afa4 <__assert_fail@plt+0x283b4>
   3afa0:	mov	r0, #1
   3afa4:	sub	sp, fp, #28
   3afa8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3afac:	push	{r4, r5, fp, lr}
   3afb0:	add	fp, sp, #8
   3afb4:	sub	sp, sp, #8
   3afb8:	ldr	r4, [r0, #116]	; 0x74
   3afbc:	add	r1, r1, r1, lsl #1
   3afc0:	ldr	lr, [fp, #8]
   3afc4:	add	r4, r4, r1, lsl #3
   3afc8:	mvn	r1, #0
   3afcc:	ldr	ip, [r4, #8]
   3afd0:	cmp	ip, lr
   3afd4:	bgt	3b020 <__assert_fail@plt+0x28430>
   3afd8:	ldr	r4, [r4, #12]
   3afdc:	mov	r1, #1
   3afe0:	cmp	r4, lr
   3afe4:	blt	3b020 <__assert_fail@plt+0x28430>
   3afe8:	sub	r1, r4, lr
   3afec:	mov	r5, #1
   3aff0:	cmp	ip, lr
   3aff4:	clz	r1, r1
   3aff8:	lsr	r4, r1, #5
   3affc:	lsl	r1, r4, #1
   3b000:	orreq	r1, r5, r4, lsl #1
   3b004:	cmp	r1, #0
   3b008:	beq	3b01c <__assert_fail@plt+0x2842c>
   3b00c:	ldr	r5, [fp, #12]
   3b010:	str	r5, [sp]
   3b014:	bl	3b02c <__assert_fail@plt+0x2843c>
   3b018:	b	3b024 <__assert_fail@plt+0x28434>
   3b01c:	mov	r1, #0
   3b020:	mov	r0, r1
   3b024:	sub	sp, fp, #8
   3b028:	pop	{r4, r5, fp, pc}
   3b02c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3b030:	add	fp, sp, #28
   3b034:	sub	sp, sp, #36	; 0x24
   3b038:	ldr	r4, [r0, #84]	; 0x54
   3b03c:	mov	r7, r0
   3b040:	mov	r5, r1
   3b044:	add	r1, r3, r3, lsl #1
   3b048:	str	r3, [sp, #32]
   3b04c:	ldr	r0, [r4, #24]
   3b050:	add	r1, r0, r1, lsl #2
   3b054:	mov	lr, r1
   3b058:	ldr	r0, [lr, #4]!
   3b05c:	cmp	r0, #1
   3b060:	blt	3b1fc <__assert_fail@plt+0x2860c>
   3b064:	mov	ip, #1
   3b068:	mov	r6, r2
   3b06c:	and	r3, r5, #2
   3b070:	mov	sl, #0
   3b074:	mvn	r2, ip, lsl r2
   3b078:	cmp	r6, #31
   3b07c:	str	r3, [sp, #16]
   3b080:	str	r2, [sp, #24]
   3b084:	lsl	r2, ip, r6
   3b088:	and	ip, r5, #1
   3b08c:	str	r2, [sp, #28]
   3b090:	mov	r2, #0
   3b094:	movwgt	r2, #1
   3b098:	str	ip, [sp, #12]
   3b09c:	orr	r2, r2, r3, lsr #1
   3b0a0:	add	r3, r1, #8
   3b0a4:	stmib	sp, {r3, lr}
   3b0a8:	str	r2, [sp, #20]
   3b0ac:	ldr	r1, [r3]
   3b0b0:	ldr	r9, [r1, sl, lsl #2]
   3b0b4:	ldr	r1, [r4]
   3b0b8:	add	r2, r1, r9, lsl #3
   3b0bc:	ldrb	r2, [r2, #4]
   3b0c0:	cmp	r2, #9
   3b0c4:	beq	3b1c0 <__assert_fail@plt+0x285d0>
   3b0c8:	cmp	r2, #8
   3b0cc:	beq	3b1dc <__assert_fail@plt+0x285ec>
   3b0d0:	cmp	r2, #4
   3b0d4:	bne	3b1f0 <__assert_fail@plt+0x28600>
   3b0d8:	ldr	r1, [fp, #8]
   3b0dc:	cmn	r1, #1
   3b0e0:	beq	3b1f0 <__assert_fail@plt+0x28600>
   3b0e4:	ldr	r1, [fp, #8]
   3b0e8:	ldr	r0, [r7, #116]	; 0x74
   3b0ec:	add	r1, r1, r1, lsl #1
   3b0f0:	add	r0, r0, r1, lsl #3
   3b0f4:	add	r8, r0, #16
   3b0f8:	ldr	r0, [r8, #-16]
   3b0fc:	cmp	r0, r9
   3b100:	bne	3b19c <__assert_fail@plt+0x285ac>
   3b104:	cmp	r6, #31
   3b108:	bgt	3b11c <__assert_fail@plt+0x2852c>
   3b10c:	ldr	r0, [r8]
   3b110:	ldr	r1, [sp, #28]
   3b114:	tst	r0, r1
   3b118:	beq	3b19c <__assert_fail@plt+0x285ac>
   3b11c:	ldr	r0, [r4, #20]
   3b120:	add	r1, r9, r9, lsl #1
   3b124:	add	r0, r0, r1, lsl #2
   3b128:	ldr	r0, [r0, #8]
   3b12c:	ldr	r3, [r0]
   3b130:	ldr	r0, [sp, #32]
   3b134:	cmp	r3, r0
   3b138:	beq	3b204 <__assert_fail@plt+0x28614>
   3b13c:	ldr	r0, [fp, #8]
   3b140:	mov	r1, r5
   3b144:	mov	r2, r6
   3b148:	str	r0, [sp]
   3b14c:	mov	r0, r7
   3b150:	bl	3b02c <__assert_fail@plt+0x2843c>
   3b154:	cmp	r0, #0
   3b158:	beq	3b170 <__assert_fail@plt+0x28580>
   3b15c:	cmn	r0, #1
   3b160:	beq	3b21c <__assert_fail@plt+0x2862c>
   3b164:	cmp	r6, #31
   3b168:	ble	3b18c <__assert_fail@plt+0x2859c>
   3b16c:	b	3b19c <__assert_fail@plt+0x285ac>
   3b170:	ldr	r0, [sp, #20]
   3b174:	cmp	r0, #0
   3b178:	beq	3b18c <__assert_fail@plt+0x2859c>
   3b17c:	ldr	r0, [sp, #16]
   3b180:	cmp	r0, #0
   3b184:	beq	3b19c <__assert_fail@plt+0x285ac>
   3b188:	b	3b210 <__assert_fail@plt+0x28620>
   3b18c:	ldr	r0, [r8]
   3b190:	ldr	r1, [sp, #24]
   3b194:	and	r0, r0, r1
   3b198:	str	r0, [r8]
   3b19c:	ldrb	r0, [r8, #4]
   3b1a0:	add	r8, r8, #24
   3b1a4:	cmp	r0, #0
   3b1a8:	bne	3b0f8 <__assert_fail@plt+0x28508>
   3b1ac:	ldr	lr, [sp, #8]
   3b1b0:	ldr	ip, [sp, #12]
   3b1b4:	ldr	r3, [sp, #4]
   3b1b8:	ldr	r0, [lr]
   3b1bc:	b	3b1f0 <__assert_fail@plt+0x28600>
   3b1c0:	ldr	r2, [sp, #16]
   3b1c4:	cmp	r2, #0
   3b1c8:	beq	3b1f0 <__assert_fail@plt+0x28600>
   3b1cc:	ldr	r1, [r1, r9, lsl #3]
   3b1d0:	cmp	r1, r6
   3b1d4:	bne	3b1f0 <__assert_fail@plt+0x28600>
   3b1d8:	b	3b210 <__assert_fail@plt+0x28620>
   3b1dc:	cmp	ip, #0
   3b1e0:	beq	3b1f0 <__assert_fail@plt+0x28600>
   3b1e4:	ldr	r1, [r1, r9, lsl #3]
   3b1e8:	cmp	r1, r6
   3b1ec:	beq	3b218 <__assert_fail@plt+0x28628>
   3b1f0:	add	sl, sl, #1
   3b1f4:	cmp	sl, r0
   3b1f8:	blt	3b0ac <__assert_fail@plt+0x284bc>
   3b1fc:	ubfx	r0, r5, #1, #1
   3b200:	b	3b21c <__assert_fail@plt+0x2862c>
   3b204:	ldr	r0, [sp, #12]
   3b208:	rsb	r0, r0, #0
   3b20c:	b	3b21c <__assert_fail@plt+0x2862c>
   3b210:	mov	r0, #0
   3b214:	b	3b21c <__assert_fail@plt+0x2862c>
   3b218:	mvn	r0, #0
   3b21c:	sub	sp, fp, #28
   3b220:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3b224:	cmp	r0, #0
   3b228:	bxeq	lr
   3b22c:	push	{r4, r5, r6, sl, fp, lr}
   3b230:	add	fp, sp, #16
   3b234:	ldr	r1, [r0]
   3b238:	mov	r4, r0
   3b23c:	ldr	r0, [r0, #8]
   3b240:	cmp	r1, #1
   3b244:	blt	3b284 <__assert_fail@plt+0x28694>
   3b248:	mov	r5, #0
   3b24c:	mov	r6, #0
   3b250:	add	r0, r0, r5
   3b254:	ldr	r0, [r0, #20]
   3b258:	bl	2bcbc <__assert_fail@plt+0x190cc>
   3b25c:	ldr	r0, [r4, #8]
   3b260:	add	r0, r0, r5
   3b264:	ldr	r0, [r0, #8]
   3b268:	bl	2bcbc <__assert_fail@plt+0x190cc>
   3b26c:	ldr	r1, [r4]
   3b270:	ldr	r0, [r4, #8]
   3b274:	add	r6, r6, #1
   3b278:	add	r5, r5, #24
   3b27c:	cmp	r6, r1
   3b280:	blt	3b250 <__assert_fail@plt+0x28660>
   3b284:	pop	{r4, r5, r6, sl, fp, lr}
   3b288:	b	2bcbc <__assert_fail@plt+0x190cc>
   3b28c:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   3b290:	add	fp, sp, #24
   3b294:	mov	r4, r0
   3b298:	mvn	r0, #0
   3b29c:	cmp	r4, #0
   3b2a0:	beq	3b340 <__assert_fail@plt+0x28750>
   3b2a4:	mov	r5, r2
   3b2a8:	ldr	r2, [r4]
   3b2ac:	cmp	r2, #0
   3b2b0:	beq	3b340 <__assert_fail@plt+0x28750>
   3b2b4:	sub	r0, r2, #1
   3b2b8:	ldr	r9, [fp, #12]
   3b2bc:	ldr	r8, [fp, #8]
   3b2c0:	lsl	r7, r5, #3
   3b2c4:	str	r0, [r4]
   3b2c8:	add	r6, r0, r0, lsl #1
   3b2cc:	ldr	r2, [r4, #8]
   3b2d0:	ldr	r0, [r2, r6, lsl #3]!
   3b2d4:	str	r0, [r1]
   3b2d8:	mov	r0, r3
   3b2dc:	ldr	r1, [r2, #8]
   3b2e0:	mov	r2, r7
   3b2e4:	bl	125f0 <memcpy@plt>
   3b2e8:	ldr	r0, [r4, #8]
   3b2ec:	mov	r2, r7
   3b2f0:	add	r0, r0, r6, lsl #3
   3b2f4:	ldr	r0, [r0, #8]
   3b2f8:	add	r1, r0, r5, lsl #3
   3b2fc:	mov	r0, r8
   3b300:	bl	125f0 <memcpy@plt>
   3b304:	ldr	r0, [r9, #8]
   3b308:	bl	2bcbc <__assert_fail@plt+0x190cc>
   3b30c:	ldr	r0, [r4, #8]
   3b310:	add	r0, r0, r6, lsl #3
   3b314:	ldr	r0, [r0, #8]
   3b318:	bl	2bcbc <__assert_fail@plt+0x190cc>
   3b31c:	ldr	r0, [r4, #8]
   3b320:	add	r0, r0, r6, lsl #3
   3b324:	vldr	d16, [r0, #12]
   3b328:	ldr	r0, [r0, #20]
   3b32c:	str	r0, [r9, #8]
   3b330:	vstr	d16, [r9]
   3b334:	ldr	r0, [r4, #8]
   3b338:	add	r0, r0, r6, lsl #3
   3b33c:	ldr	r0, [r0, #4]
   3b340:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   3b344:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3b348:	add	fp, sp, #28
   3b34c:	sub	sp, sp, #36	; 0x24
   3b350:	sub	sp, sp, #1024	; 0x400
   3b354:	ldrb	r2, [r0]
   3b358:	mov	r7, r1
   3b35c:	mov	r6, r0
   3b360:	cmp	r2, #0
   3b364:	beq	3b548 <__assert_fail@plt+0x28958>
   3b368:	mov	r0, #1
   3b36c:	mov	r1, #0
   3b370:	ldrb	r3, [r7, r1]
   3b374:	cmp	r3, #0
   3b378:	uxtbne	r2, r2
   3b37c:	subne	r2, r2, r3
   3b380:	clzne	r2, r2
   3b384:	lsrne	r2, r2, #5
   3b388:	andne	r0, r0, r2
   3b38c:	addne	r2, r6, r1
   3b390:	addne	r1, r1, #1
   3b394:	ldrbne	r2, [r2, #1]
   3b398:	cmpne	r2, #0
   3b39c:	bne	3b370 <__assert_fail@plt+0x28780>
   3b3a0:	add	r8, r7, r1
   3b3a4:	mov	r5, r6
   3b3a8:	ldrb	r1, [r8]
   3b3ac:	cmp	r1, #0
   3b3b0:	movwne	r5, #0
   3b3b4:	tst	r0, #1
   3b3b8:	cmpeq	r1, #0
   3b3bc:	bne	3b558 <__assert_fail@plt+0x28968>
   3b3c0:	ldrb	r1, [r7]
   3b3c4:	add	r0, r6, #1
   3b3c8:	sub	r4, r8, r7
   3b3cc:	bl	128cc <strchr@plt>
   3b3d0:	cmp	r4, #1
   3b3d4:	beq	3b564 <__assert_fail@plt+0x28974>
   3b3d8:	cmp	r0, #0
   3b3dc:	mov	r5, r0
   3b3e0:	beq	3b558 <__assert_fail@plt+0x28968>
   3b3e4:	add	r2, r6, r4
   3b3e8:	mov	r1, r4
   3b3ec:	sub	r6, r8, r4
   3b3f0:	str	r0, [sp, #24]
   3b3f4:	str	r4, [sp, #20]
   3b3f8:	subs	r5, r2, r0
   3b3fc:	movwcc	r5, #1
   3b400:	cmp	r4, #31
   3b404:	bhi	3b56c <__assert_fail@plt+0x2897c>
   3b408:	add	r2, sp, #28
   3b40c:	mov	r0, r6
   3b410:	mov	r4, r1
   3b414:	bl	3b990 <__assert_fail@plt+0x28da0>
   3b418:	ldr	r9, [sp, #28]
   3b41c:	mov	sl, r0
   3b420:	mov	r0, r6
   3b424:	mov	r2, sl
   3b428:	add	r1, r6, r9
   3b42c:	bl	128a8 <bcmp@plt>
   3b430:	cmp	r0, #0
   3b434:	beq	3b714 <__assert_fail@plt+0x28b24>
   3b438:	sub	r0, r4, sl
   3b43c:	sub	r2, r4, r5
   3b440:	mov	r1, #0
   3b444:	cmp	sl, r0
   3b448:	movcs	r0, sl
   3b44c:	add	r0, r0, #1
   3b450:	str	r0, [sp, #12]
   3b454:	str	r0, [sp, #28]
   3b458:	ldr	r0, [sp, #24]
   3b45c:	add	r0, r0, r5
   3b460:	mov	r5, #0
   3b464:	bl	129b0 <memchr@plt>
   3b468:	cmp	r4, #0
   3b46c:	beq	3b558 <__assert_fail@plt+0x28968>
   3b470:	ldr	lr, [sp, #24]
   3b474:	cmp	r0, #0
   3b478:	bne	3b558 <__assert_fail@plt+0x28968>
   3b47c:	add	r0, lr, sl
   3b480:	mov	r1, r4
   3b484:	add	r9, sl, r7
   3b488:	mov	r4, #0
   3b48c:	str	r0, [sp, #4]
   3b490:	sub	r0, r8, sl
   3b494:	mov	ip, r1
   3b498:	sub	r7, r0, r7
   3b49c:	rsb	r0, sl, #1
   3b4a0:	str	r0, [sp, #8]
   3b4a4:	cmp	r1, sl
   3b4a8:	bls	3b4d4 <__assert_fail@plt+0x288e4>
   3b4ac:	ldr	r0, [sp, #4]
   3b4b0:	add	r2, r0, r4
   3b4b4:	mov	r0, #0
   3b4b8:	ldrb	r3, [r2, r0]
   3b4bc:	ldrb	r5, [r9, r0]
   3b4c0:	cmp	r5, r3
   3b4c4:	bne	3b500 <__assert_fail@plt+0x28910>
   3b4c8:	add	r0, r0, #1
   3b4cc:	cmp	r7, r0
   3b4d0:	bne	3b4b8 <__assert_fail@plt+0x288c8>
   3b4d4:	ldr	r0, [sp, #8]
   3b4d8:	add	r5, lr, r4
   3b4dc:	cmp	r0, #1
   3b4e0:	beq	3b558 <__assert_fail@plt+0x28968>
   3b4e4:	ldrb	r2, [r5, -r0]
   3b4e8:	ldrb	r3, [r6, -r0]
   3b4ec:	add	r0, r0, #1
   3b4f0:	cmp	r3, r2
   3b4f4:	beq	3b4dc <__assert_fail@plt+0x288ec>
   3b4f8:	ldr	r2, [sp, #12]
   3b4fc:	b	3b504 <__assert_fail@plt+0x28914>
   3b500:	add	r2, r0, #1
   3b504:	add	r4, r2, r4
   3b508:	add	r0, lr, ip
   3b50c:	mov	r5, #0
   3b510:	add	r8, r4, r1
   3b514:	mov	r1, #0
   3b518:	str	r4, [sp, #16]
   3b51c:	sub	r2, r8, ip
   3b520:	bl	129b0 <memchr@plt>
   3b524:	cmp	r0, #0
   3b528:	bne	3b558 <__assert_fail@plt+0x28968>
   3b52c:	ldr	lr, [sp, #24]
   3b530:	ldr	r1, [sp, #20]
   3b534:	ldr	r4, [sp, #16]
   3b538:	cmp	r8, #0
   3b53c:	mov	ip, r8
   3b540:	bne	3b4a4 <__assert_fail@plt+0x288b4>
   3b544:	b	3b558 <__assert_fail@plt+0x28968>
   3b548:	ldrb	r0, [r7]
   3b54c:	cmp	r0, #0
   3b550:	movne	r6, #0
   3b554:	mov	r5, r6
   3b558:	mov	r0, r5
   3b55c:	sub	sp, fp, #28
   3b560:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3b564:	mov	r5, r0
   3b568:	b	3b558 <__assert_fail@plt+0x28968>
   3b56c:	sub	r2, fp, #36	; 0x24
   3b570:	mov	r0, r6
   3b574:	bl	3b990 <__assert_fail@plt+0x28da0>
   3b578:	ldr	r2, [sp, #20]
   3b57c:	mov	r4, r0
   3b580:	mov	r0, #0
   3b584:	add	r3, sp, #28
   3b588:	vdup.32	q8, r2
   3b58c:	add	r1, r3, r0
   3b590:	add	r0, r0, #16
   3b594:	cmp	r0, #1024	; 0x400
   3b598:	vst1.32	{d16-d17}, [r1]
   3b59c:	bne	3b58c <__assert_fail@plt+0x2899c>
   3b5a0:	cmp	r2, #0
   3b5a4:	beq	3b5bc <__assert_fail@plt+0x289cc>
   3b5a8:	mov	r0, r2
   3b5ac:	ldrb	r1, [r8, -r0]
   3b5b0:	subs	r0, r0, #1
   3b5b4:	str	r0, [r3, r1, lsl #2]
   3b5b8:	bne	3b5ac <__assert_fail@plt+0x289bc>
   3b5bc:	ldr	r9, [fp, #-36]	; 0xffffffdc
   3b5c0:	mov	r0, r6
   3b5c4:	mov	r2, r4
   3b5c8:	add	r1, r6, r9
   3b5cc:	bl	128a8 <bcmp@plt>
   3b5d0:	cmp	r0, #0
   3b5d4:	str	r4, [sp, #8]
   3b5d8:	beq	3b82c <__assert_fail@plt+0x28c3c>
   3b5dc:	ldr	r9, [sp, #20]
   3b5e0:	mov	r1, #0
   3b5e4:	sub	r0, r9, r4
   3b5e8:	sub	r2, r9, r5
   3b5ec:	cmp	r4, r0
   3b5f0:	movcs	r0, r4
   3b5f4:	add	r0, r0, #1
   3b5f8:	str	r0, [sp, #12]
   3b5fc:	str	r0, [fp, #-36]	; 0xffffffdc
   3b600:	ldr	r0, [sp, #24]
   3b604:	add	r0, r0, r5
   3b608:	mov	r5, #0
   3b60c:	bl	129b0 <memchr@plt>
   3b610:	cmp	r9, #0
   3b614:	beq	3b558 <__assert_fail@plt+0x28968>
   3b618:	ldr	r4, [sp, #24]
   3b61c:	cmp	r0, #0
   3b620:	bne	3b558 <__assert_fail@plt+0x28968>
   3b624:	ldr	r1, [sp, #8]
   3b628:	mov	ip, r9
   3b62c:	add	r0, r4, r1
   3b630:	add	sl, r1, r7
   3b634:	str	r0, [sp]
   3b638:	sub	r0, sl, r8
   3b63c:	add	r8, r0, #1
   3b640:	rsb	r0, r1, #1
   3b644:	mov	r1, ip
   3b648:	str	r0, [sp, #4]
   3b64c:	sub	r0, r9, #1
   3b650:	mov	r9, #0
   3b654:	str	r0, [sp, #16]
   3b658:	add	r0, r1, r4
   3b65c:	add	r3, sp, #28
   3b660:	ldrb	r2, [r0, #-1]
   3b664:	ldr	r2, [r3, r2, lsl #2]
   3b668:	cmp	r2, #0
   3b66c:	beq	3b6a8 <__assert_fail@plt+0x28ab8>
   3b670:	add	r9, r2, r9
   3b674:	mov	r5, #0
   3b678:	add	r7, r9, ip
   3b67c:	sub	r2, r7, r1
   3b680:	mov	r1, #0
   3b684:	bl	129b0 <memchr@plt>
   3b688:	cmp	r0, #0
   3b68c:	bne	3b558 <__assert_fail@plt+0x28968>
   3b690:	ldr	r4, [sp, #24]
   3b694:	ldr	ip, [sp, #20]
   3b698:	cmp	r7, #0
   3b69c:	mov	r1, r7
   3b6a0:	bne	3b658 <__assert_fail@plt+0x28a68>
   3b6a4:	b	3b558 <__assert_fail@plt+0x28968>
   3b6a8:	ldr	r2, [sp, #8]
   3b6ac:	ldr	r3, [sp, #16]
   3b6b0:	cmp	r2, r3
   3b6b4:	bcs	3b6e0 <__assert_fail@plt+0x28af0>
   3b6b8:	ldr	r2, [sp]
   3b6bc:	add	r3, r2, r9
   3b6c0:	mov	r2, #0
   3b6c4:	ldrb	r7, [r3, -r2]
   3b6c8:	ldrb	r5, [sl, -r2]
   3b6cc:	cmp	r5, r7
   3b6d0:	bne	3b70c <__assert_fail@plt+0x28b1c>
   3b6d4:	sub	r2, r2, #1
   3b6d8:	cmp	r8, r2
   3b6dc:	bne	3b6c4 <__assert_fail@plt+0x28ad4>
   3b6e0:	ldr	r2, [sp, #4]
   3b6e4:	add	r5, r4, r9
   3b6e8:	cmp	r2, #1
   3b6ec:	beq	3b558 <__assert_fail@plt+0x28968>
   3b6f0:	ldrb	r3, [r5, -r2]
   3b6f4:	ldrb	r7, [r6, -r2]
   3b6f8:	add	r2, r2, #1
   3b6fc:	cmp	r7, r3
   3b700:	beq	3b6e8 <__assert_fail@plt+0x28af8>
   3b704:	ldr	r2, [sp, #12]
   3b708:	b	3b670 <__assert_fail@plt+0x28a80>
   3b70c:	rsb	r2, r2, #1
   3b710:	b	3b670 <__assert_fail@plt+0x28a80>
   3b714:	ldr	r0, [sp, #24]
   3b718:	sub	r2, r4, r5
   3b71c:	mov	r1, #0
   3b720:	add	r0, r0, r5
   3b724:	mov	r5, #0
   3b728:	bl	129b0 <memchr@plt>
   3b72c:	cmp	r4, #0
   3b730:	beq	3b558 <__assert_fail@plt+0x28968>
   3b734:	mov	r1, r4
   3b738:	ldr	r4, [sp, #24]
   3b73c:	cmp	r0, #0
   3b740:	str	r9, [sp, #16]
   3b744:	bne	3b558 <__assert_fail@plt+0x28968>
   3b748:	ldr	r0, [sp, #16]
   3b74c:	mov	r8, #0
   3b750:	mov	ip, r1
   3b754:	mov	r9, #0
   3b758:	sub	r0, r1, r0
   3b75c:	str	r0, [sp, #12]
   3b760:	sub	r0, sl, #1
   3b764:	str	r0, [sp, #8]
   3b768:	rsb	r0, sl, #1
   3b76c:	str	r0, [sp, #4]
   3b770:	cmp	sl, r8
   3b774:	mov	r0, sl
   3b778:	movcc	r0, r8
   3b77c:	cmp	r0, r1
   3b780:	bcs	3b7a4 <__assert_fail@plt+0x28bb4>
   3b784:	add	r2, r4, r9
   3b788:	ldrb	r3, [r2, r0]
   3b78c:	ldrb	r7, [r6, r0]
   3b790:	cmp	r7, r3
   3b794:	bne	3b7e4 <__assert_fail@plt+0x28bf4>
   3b798:	add	r0, r0, #1
   3b79c:	cmp	r0, r1
   3b7a0:	bcc	3b788 <__assert_fail@plt+0x28b98>
   3b7a4:	ldr	r0, [sp, #8]
   3b7a8:	add	r5, r4, r9
   3b7ac:	add	r2, r0, #1
   3b7b0:	cmp	r8, r2
   3b7b4:	bcs	3b7cc <__assert_fail@plt+0x28bdc>
   3b7b8:	ldrb	r3, [r5, r0]
   3b7bc:	ldrb	r7, [r6, r0]
   3b7c0:	sub	r0, r0, #1
   3b7c4:	cmp	r7, r3
   3b7c8:	beq	3b7ac <__assert_fail@plt+0x28bbc>
   3b7cc:	add	r0, r8, #1
   3b7d0:	ldr	r8, [sp, #12]
   3b7d4:	cmp	r2, r0
   3b7d8:	ldr	r2, [sp, #16]
   3b7dc:	bcs	3b7f0 <__assert_fail@plt+0x28c00>
   3b7e0:	b	3b558 <__assert_fail@plt+0x28968>
   3b7e4:	ldr	r2, [sp, #4]
   3b7e8:	mov	r8, #0
   3b7ec:	add	r2, r2, r0
   3b7f0:	add	r9, r2, r9
   3b7f4:	add	r0, r4, ip
   3b7f8:	mov	r5, #0
   3b7fc:	add	r7, r9, r1
   3b800:	mov	r1, #0
   3b804:	sub	r2, r7, ip
   3b808:	bl	129b0 <memchr@plt>
   3b80c:	cmp	r7, #0
   3b810:	beq	3b558 <__assert_fail@plt+0x28968>
   3b814:	ldr	r4, [sp, #24]
   3b818:	ldr	r1, [sp, #20]
   3b81c:	cmp	r0, #0
   3b820:	mov	ip, r7
   3b824:	beq	3b770 <__assert_fail@plt+0x28b80>
   3b828:	b	3b558 <__assert_fail@plt+0x28968>
   3b82c:	ldr	r0, [sp, #24]
   3b830:	ldr	r4, [sp, #20]
   3b834:	mov	r1, #0
   3b838:	add	r0, r0, r5
   3b83c:	sub	r2, r4, r5
   3b840:	mov	r5, #0
   3b844:	bl	129b0 <memchr@plt>
   3b848:	cmp	r4, #0
   3b84c:	beq	3b558 <__assert_fail@plt+0x28968>
   3b850:	cmp	r0, #0
   3b854:	ldr	r0, [sp, #24]
   3b858:	str	r9, [sp, #16]
   3b85c:	bne	3b558 <__assert_fail@plt+0x28968>
   3b860:	ldr	r1, [sp, #16]
   3b864:	mov	lr, r4
   3b868:	sub	r8, r4, #1
   3b86c:	mov	r9, #0
   3b870:	mov	ip, r4
   3b874:	mov	r7, #0
   3b878:	sub	r1, r4, r1
   3b87c:	str	r1, [sp, #12]
   3b880:	ldr	r1, [sp, #8]
   3b884:	sub	r2, r1, #1
   3b888:	rsb	r1, r1, #1
   3b88c:	str	r2, [sp, #4]
   3b890:	str	r1, [sp]
   3b894:	add	r0, ip, r0
   3b898:	add	r1, sp, #28
   3b89c:	ldrb	r2, [r0, #-1]
   3b8a0:	ldr	r3, [r1, r2, lsl #2]
   3b8a4:	cmp	r3, #0
   3b8a8:	beq	3b8d0 <__assert_fail@plt+0x28ce0>
   3b8ac:	ldr	r1, [sp, #16]
   3b8b0:	mov	r2, r3
   3b8b4:	cmp	r3, r1
   3b8b8:	ldr	r1, [sp, #12]
   3b8bc:	movcc	r2, r1
   3b8c0:	cmp	r9, #0
   3b8c4:	moveq	r2, r3
   3b8c8:	mov	r9, #0
   3b8cc:	b	3b948 <__assert_fail@plt+0x28d58>
   3b8d0:	ldr	r2, [sp, #8]
   3b8d4:	cmp	r2, r9
   3b8d8:	movcc	r2, r9
   3b8dc:	cmp	r2, r8
   3b8e0:	bcs	3b908 <__assert_fail@plt+0x28d18>
   3b8e4:	ldr	r1, [sp, #24]
   3b8e8:	add	r3, r1, r7
   3b8ec:	ldrb	r5, [r3, r2]
   3b8f0:	ldrb	r4, [r6, r2]
   3b8f4:	cmp	r4, r5
   3b8f8:	bne	3b984 <__assert_fail@plt+0x28d94>
   3b8fc:	add	r2, r2, #1
   3b900:	cmp	r2, r8
   3b904:	bcc	3b8ec <__assert_fail@plt+0x28cfc>
   3b908:	ldr	r1, [sp, #24]
   3b90c:	ldr	r2, [sp, #4]
   3b910:	add	r5, r1, r7
   3b914:	add	r3, r2, #1
   3b918:	cmp	r9, r3
   3b91c:	bcs	3b934 <__assert_fail@plt+0x28d44>
   3b920:	ldrb	r4, [r5, r2]
   3b924:	ldrb	r1, [r6, r2]
   3b928:	sub	r2, r2, #1
   3b92c:	cmp	r1, r4
   3b930:	beq	3b914 <__assert_fail@plt+0x28d24>
   3b934:	add	r1, r9, #1
   3b938:	ldr	r2, [sp, #16]
   3b93c:	ldr	r9, [sp, #12]
   3b940:	cmp	r3, r1
   3b944:	bcc	3b558 <__assert_fail@plt+0x28968>
   3b948:	add	r7, r2, r7
   3b94c:	mov	r1, #0
   3b950:	mov	r4, lr
   3b954:	mov	r5, #0
   3b958:	add	sl, r7, lr
   3b95c:	sub	r2, sl, ip
   3b960:	bl	129b0 <memchr@plt>
   3b964:	cmp	sl, #0
   3b968:	beq	3b558 <__assert_fail@plt+0x28968>
   3b96c:	cmp	r0, #0
   3b970:	ldr	r0, [sp, #24]
   3b974:	mov	ip, sl
   3b978:	mov	lr, r4
   3b97c:	beq	3b894 <__assert_fail@plt+0x28ca4>
   3b980:	b	3b558 <__assert_fail@plt+0x28968>
   3b984:	ldr	r1, [sp]
   3b988:	add	r2, r1, r2
   3b98c:	b	3b8c8 <__assert_fail@plt+0x28cd8>
   3b990:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   3b994:	add	fp, sp, #24
   3b998:	cmp	r1, #3
   3b99c:	bcs	3b9b0 <__assert_fail@plt+0x28dc0>
   3b9a0:	mov	r0, #1
   3b9a4:	str	r0, [r2]
   3b9a8:	sub	r0, r1, #1
   3b9ac:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   3b9b0:	mvn	r8, #0
   3b9b4:	mov	r6, #0
   3b9b8:	mov	r3, #1
   3b9bc:	mov	ip, #1
   3b9c0:	mov	r5, #1
   3b9c4:	add	r4, r5, r8
   3b9c8:	ldrb	r7, [r0, r3]
   3b9cc:	ldrb	r4, [r0, r4]
   3b9d0:	cmp	r7, r4
   3b9d4:	bcs	3b9e4 <__assert_fail@plt+0x28df4>
   3b9d8:	sub	ip, r3, r8
   3b9dc:	mov	r5, #1
   3b9e0:	b	3ba0c <__assert_fail@plt+0x28e1c>
   3b9e4:	bne	3b9fc <__assert_fail@plt+0x28e0c>
   3b9e8:	cmp	r5, ip
   3b9ec:	addne	r5, r5, #1
   3b9f0:	addeq	r6, ip, r6
   3b9f4:	moveq	r5, #1
   3b9f8:	b	3ba10 <__assert_fail@plt+0x28e20>
   3b9fc:	add	r3, r6, #1
   3ba00:	mov	r8, r6
   3ba04:	mov	r5, #1
   3ba08:	mov	ip, #1
   3ba0c:	mov	r6, r3
   3ba10:	add	r3, r5, r6
   3ba14:	cmp	r3, r1
   3ba18:	bcc	3b9c4 <__assert_fail@plt+0x28dd4>
   3ba1c:	cmp	r1, #2
   3ba20:	str	ip, [r2]
   3ba24:	bcc	3baa0 <__assert_fail@plt+0x28eb0>
   3ba28:	mvn	ip, #0
   3ba2c:	mov	r4, #0
   3ba30:	mov	r5, #1
   3ba34:	mov	lr, #1
   3ba38:	mov	r3, #1
   3ba3c:	add	r7, r3, ip
   3ba40:	ldrb	r6, [r0, r5]
   3ba44:	ldrb	r7, [r0, r7]
   3ba48:	cmp	r7, r6
   3ba4c:	bcs	3ba60 <__assert_fail@plt+0x28e70>
   3ba50:	sub	lr, r5, ip
   3ba54:	mov	r3, #1
   3ba58:	mov	r4, r5
   3ba5c:	b	3ba90 <__assert_fail@plt+0x28ea0>
   3ba60:	cmp	r6, r7
   3ba64:	bne	3ba7c <__assert_fail@plt+0x28e8c>
   3ba68:	cmp	r3, lr
   3ba6c:	addne	r3, r3, #1
   3ba70:	addeq	r4, lr, r4
   3ba74:	moveq	r3, #1
   3ba78:	b	3ba90 <__assert_fail@plt+0x28ea0>
   3ba7c:	add	r7, r4, #1
   3ba80:	mov	ip, r4
   3ba84:	mov	r3, #1
   3ba88:	mov	lr, #1
   3ba8c:	mov	r4, r7
   3ba90:	add	r5, r3, r4
   3ba94:	cmp	r5, r1
   3ba98:	bcc	3ba3c <__assert_fail@plt+0x28e4c>
   3ba9c:	b	3baa8 <__assert_fail@plt+0x28eb8>
   3baa0:	mov	lr, #1
   3baa4:	mvn	ip, #0
   3baa8:	add	r0, r8, #1
   3baac:	add	r1, ip, #1
   3bab0:	cmp	r1, r0
   3bab4:	movcs	r0, r1
   3bab8:	strcs	lr, [r2]
   3babc:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   3bac0:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   3bac4:	add	fp, sp, #24
   3bac8:	mov	r4, r0
   3bacc:	cmp	r0, #0
   3bad0:	beq	3baf4 <__assert_fail@plt+0x28f04>
   3bad4:	mov	r0, r4
   3bad8:	bl	128c0 <strlen@plt>
   3badc:	add	r5, r0, #1
   3bae0:	cmp	r5, #58	; 0x3a
   3bae4:	bls	3baf8 <__assert_fail@plt+0x28f08>
   3bae8:	add	r0, r0, #10
   3baec:	bic	r0, r0, #3
   3baf0:	b	3bafc <__assert_fail@plt+0x28f0c>
   3baf4:	mov	r5, #0
   3baf8:	mov	r0, #64	; 0x40
   3bafc:	bl	2de8c <__assert_fail@plt+0x1b29c>
   3bb00:	mov	r6, r0
   3bb04:	cmp	r0, #0
   3bb08:	beq	3bb44 <__assert_fail@plt+0x28f54>
   3bb0c:	cmp	r4, #0
   3bb10:	mov	r0, r4
   3bb14:	mov	r8, #0
   3bb18:	mov	r7, r6
   3bb1c:	movwne	r0, #1
   3bb20:	str	r8, [r6]
   3bb24:	strb	r0, [r6, #4]
   3bb28:	strb	r8, [r7, #5]!
   3bb2c:	beq	3bb44 <__assert_fail@plt+0x28f54>
   3bb30:	mov	r0, r7
   3bb34:	mov	r1, r4
   3bb38:	mov	r2, r5
   3bb3c:	bl	125f0 <memcpy@plt>
   3bb40:	strb	r8, [r7, r5]
   3bb44:	mov	r0, r6
   3bb48:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   3bb4c:	push	{r4, sl, fp, lr}
   3bb50:	add	fp, sp, #8
   3bb54:	cmp	r0, #2
   3bb58:	popcc	{r4, sl, fp, pc}
   3bb5c:	ldr	r4, [r0]
   3bb60:	bl	2bcbc <__assert_fail@plt+0x190cc>
   3bb64:	cmp	r4, #0
   3bb68:	mov	r0, r4
   3bb6c:	bne	3bb5c <__assert_fail@plt+0x28f6c>
   3bb70:	pop	{r4, sl, fp, pc}
   3bb74:	push	{r4, r5, r6, r7, fp, lr}
   3bb78:	add	fp, sp, #16
   3bb7c:	mov	r4, r2
   3bb80:	mov	r7, r1
   3bb84:	cmp	r0, #0
   3bb88:	beq	3bbc8 <__assert_fail@plt+0x28fd8>
   3bb8c:	mov	r6, r0
   3bb90:	bl	3bc00 <__assert_fail@plt+0x29010>
   3bb94:	cmp	r0, #0
   3bb98:	beq	3bbd8 <__assert_fail@plt+0x28fe8>
   3bb9c:	mov	r5, r0
   3bba0:	mov	r0, r7
   3bba4:	mov	r1, r4
   3bba8:	bl	126bc <localtime_r@plt>
   3bbac:	cmp	r0, #0
   3bbb0:	beq	3bbe0 <__assert_fail@plt+0x28ff0>
   3bbb4:	mov	r0, r6
   3bbb8:	mov	r1, r4
   3bbbc:	bl	3bcb4 <__assert_fail@plt+0x290c4>
   3bbc0:	eor	r6, r0, #1
   3bbc4:	b	3bbe4 <__assert_fail@plt+0x28ff4>
   3bbc8:	mov	r0, r7
   3bbcc:	mov	r1, r4
   3bbd0:	pop	{r4, r5, r6, r7, fp, lr}
   3bbd4:	b	124c4 <gmtime_r@plt>
   3bbd8:	mov	r0, #0
   3bbdc:	pop	{r4, r5, r6, r7, fp, pc}
   3bbe0:	mov	r6, #1
   3bbe4:	mov	r0, r5
   3bbe8:	bl	3bddc <__assert_fail@plt+0x291ec>
   3bbec:	cmp	r0, #0
   3bbf0:	movne	r0, r4
   3bbf4:	cmp	r6, #0
   3bbf8:	movwne	r0, #0
   3bbfc:	pop	{r4, r5, r6, r7, fp, pc}
   3bc00:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   3bc04:	add	fp, sp, #24
   3bc08:	mov	r5, r0
   3bc0c:	movw	r0, #10585	; 0x2959
   3bc10:	movt	r0, #4
   3bc14:	bl	127f4 <getenv@plt>
   3bc18:	mov	r4, r0
   3bc1c:	ldrb	r0, [r5, #4]
   3bc20:	cmp	r4, #0
   3bc24:	beq	3bc3c <__assert_fail@plt+0x2904c>
   3bc28:	cmp	r0, #0
   3bc2c:	beq	3bc44 <__assert_fail@plt+0x29054>
   3bc30:	add	r0, r5, #5
   3bc34:	mov	r1, r4
   3bc38:	bl	124f4 <strcmp@plt>
   3bc3c:	cmp	r0, #0
   3bc40:	beq	3bc74 <__assert_fail@plt+0x29084>
   3bc44:	mov	r0, r4
   3bc48:	bl	3bac0 <__assert_fail@plt+0x28ed0>
   3bc4c:	mov	r7, #0
   3bc50:	cmp	r0, #0
   3bc54:	beq	3bcac <__assert_fail@plt+0x290bc>
   3bc58:	mov	r4, r0
   3bc5c:	mov	r0, r5
   3bc60:	bl	3bf20 <__assert_fail@plt+0x29330>
   3bc64:	cmp	r0, #0
   3bc68:	beq	3bc7c <__assert_fail@plt+0x2908c>
   3bc6c:	mov	r7, r4
   3bc70:	b	3bcac <__assert_fail@plt+0x290bc>
   3bc74:	mov	r7, #1
   3bc78:	b	3bcac <__assert_fail@plt+0x290bc>
   3bc7c:	bl	12908 <__errno_location@plt>
   3bc80:	ldr	r8, [r0]
   3bc84:	mov	r5, r0
   3bc88:	cmp	r4, #2
   3bc8c:	bcc	3bca8 <__assert_fail@plt+0x290b8>
   3bc90:	ldr	r6, [r4]
   3bc94:	mov	r0, r4
   3bc98:	bl	2bcbc <__assert_fail@plt+0x190cc>
   3bc9c:	cmp	r6, #0
   3bca0:	mov	r4, r6
   3bca4:	bne	3bc90 <__assert_fail@plt+0x290a0>
   3bca8:	str	r8, [r5]
   3bcac:	mov	r0, r7
   3bcb0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   3bcb4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3bcb8:	add	fp, sp, #28
   3bcbc:	sub	sp, sp, #4
   3bcc0:	ldr	r7, [r1, #40]	; 0x28
   3bcc4:	mov	r8, #1
   3bcc8:	cmp	r7, #0
   3bccc:	beq	3bd6c <__assert_fail@plt+0x2917c>
   3bcd0:	mov	r5, r1
   3bcd4:	mov	r6, r0
   3bcd8:	cmp	r7, r1
   3bcdc:	bcc	3bcec <__assert_fail@plt+0x290fc>
   3bce0:	add	r0, r5, #44	; 0x2c
   3bce4:	cmp	r7, r0
   3bce8:	bcc	3bd6c <__assert_fail@plt+0x2917c>
   3bcec:	ldrb	r0, [r7]
   3bcf0:	cmp	r0, #0
   3bcf4:	beq	3bd60 <__assert_fail@plt+0x29170>
   3bcf8:	add	r4, r6, #5
   3bcfc:	mov	r0, r4
   3bd00:	mov	r1, r7
   3bd04:	bl	124f4 <strcmp@plt>
   3bd08:	cmp	r0, #0
   3bd0c:	beq	3bd68 <__assert_fail@plt+0x29178>
   3bd10:	ldrb	r0, [r4]
   3bd14:	cmp	r0, #0
   3bd18:	bne	3bd34 <__assert_fail@plt+0x29144>
   3bd1c:	add	r0, r6, #5
   3bd20:	cmp	r4, r0
   3bd24:	bne	3bd78 <__assert_fail@plt+0x29188>
   3bd28:	ldrb	r0, [r6, #4]
   3bd2c:	cmp	r0, #0
   3bd30:	beq	3bd78 <__assert_fail@plt+0x29188>
   3bd34:	mov	r0, r4
   3bd38:	bl	128c0 <strlen@plt>
   3bd3c:	add	r4, r0, r4
   3bd40:	ldrb	r0, [r4, #1]!
   3bd44:	cmp	r0, #0
   3bd48:	bne	3bcfc <__assert_fail@plt+0x2910c>
   3bd4c:	ldr	r0, [r6]
   3bd50:	cmp	r0, #0
   3bd54:	addne	r4, r0, #5
   3bd58:	movne	r6, r0
   3bd5c:	b	3bcfc <__assert_fail@plt+0x2910c>
   3bd60:	movw	r4, #61759	; 0xf13f
   3bd64:	movt	r4, #3
   3bd68:	str	r4, [r5, #40]	; 0x28
   3bd6c:	mov	r0, r8
   3bd70:	sub	sp, fp, #28
   3bd74:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3bd78:	sub	r0, r6, r4
   3bd7c:	add	sl, r0, #64	; 0x40
   3bd80:	mov	r0, r7
   3bd84:	bl	128c0 <strlen@plt>
   3bd88:	add	r9, r0, #1
   3bd8c:	cmp	r9, sl
   3bd90:	bge	3bdb0 <__assert_fail@plt+0x291c0>
   3bd94:	mov	r0, r4
   3bd98:	mov	r1, r7
   3bd9c:	mov	r2, r9
   3bda0:	bl	125f0 <memcpy@plt>
   3bda4:	mov	r0, #0
   3bda8:	strb	r0, [r4, r9]
   3bdac:	b	3bd68 <__assert_fail@plt+0x29178>
   3bdb0:	mov	r0, r7
   3bdb4:	bl	3bac0 <__assert_fail@plt+0x28ed0>
   3bdb8:	cmp	r0, #0
   3bdbc:	str	r0, [r6]
   3bdc0:	beq	3bdd4 <__assert_fail@plt+0x291e4>
   3bdc4:	mov	r1, #0
   3bdc8:	add	r4, r0, #5
   3bdcc:	strb	r1, [r0, #4]
   3bdd0:	b	3bd68 <__assert_fail@plt+0x29178>
   3bdd4:	mov	r8, #0
   3bdd8:	b	3bd6c <__assert_fail@plt+0x2917c>
   3bddc:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   3bde0:	add	fp, sp, #24
   3bde4:	cmp	r0, #1
   3bde8:	beq	3be38 <__assert_fail@plt+0x29248>
   3bdec:	mov	r7, r0
   3bdf0:	bl	12908 <__errno_location@plt>
   3bdf4:	ldr	r8, [r0]
   3bdf8:	mov	r6, r0
   3bdfc:	mov	r0, r7
   3be00:	bl	3bf20 <__assert_fail@plt+0x29330>
   3be04:	cmp	r0, #0
   3be08:	mov	r5, r0
   3be0c:	ldreq	r8, [r6]
   3be10:	cmp	r7, #2
   3be14:	bcc	3be30 <__assert_fail@plt+0x29240>
   3be18:	ldr	r4, [r7]
   3be1c:	mov	r0, r7
   3be20:	bl	2bcbc <__assert_fail@plt+0x190cc>
   3be24:	cmp	r4, #0
   3be28:	mov	r7, r4
   3be2c:	bne	3be18 <__assert_fail@plt+0x29228>
   3be30:	str	r8, [r6]
   3be34:	b	3be3c <__assert_fail@plt+0x2924c>
   3be38:	mov	r5, #1
   3be3c:	mov	r0, r5
   3be40:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   3be44:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   3be48:	add	fp, sp, #24
   3be4c:	sub	sp, sp, #48	; 0x30
   3be50:	mov	r4, r1
   3be54:	cmp	r0, #0
   3be58:	beq	3bef8 <__assert_fail@plt+0x29308>
   3be5c:	mov	r6, r0
   3be60:	bl	3bc00 <__assert_fail@plt+0x29010>
   3be64:	cmp	r0, #0
   3be68:	beq	3bf10 <__assert_fail@plt+0x29320>
   3be6c:	mov	r1, #32
   3be70:	mov	r2, r4
   3be74:	mov	r7, r0
   3be78:	mov	r0, sp
   3be7c:	vld1.32	{d16-d17}, [r2], r1
   3be80:	mov	r3, r0
   3be84:	vst1.32	{d16-d17}, [r3], r1
   3be88:	ldr	r1, [r4, #16]
   3be8c:	ldr	r5, [r4, #20]
   3be90:	str	r1, [sp, #16]
   3be94:	mvn	r1, #0
   3be98:	str	r1, [sp, #28]
   3be9c:	str	r5, [sp, #20]
   3bea0:	ldr	r1, [r2]
   3bea4:	str	r1, [r3]
   3bea8:	bl	12548 <mktime@plt>
   3beac:	mov	r5, r0
   3beb0:	ldr	r0, [sp, #28]
   3beb4:	cmn	r0, #1
   3beb8:	ble	3bf08 <__assert_fail@plt+0x29318>
   3bebc:	mov	r8, sp
   3bec0:	mov	r0, r6
   3bec4:	mov	r1, r8
   3bec8:	bl	3bcb4 <__assert_fail@plt+0x290c4>
   3becc:	mov	r6, r0
   3bed0:	mov	r0, r7
   3bed4:	bl	3bddc <__assert_fail@plt+0x291ec>
   3bed8:	cmp	r6, #0
   3bedc:	cmpne	r0, #0
   3bee0:	beq	3bf10 <__assert_fail@plt+0x29320>
   3bee4:	ldm	r8!, {r0, r1, r2, r3, r7}
   3bee8:	stmia	r4!, {r0, r1, r2, r3, r7}
   3beec:	ldm	r8, {r0, r1, r2, r3, r6, r7}
   3bef0:	stm	r4, {r0, r1, r2, r3, r6, r7}
   3bef4:	b	3bf14 <__assert_fail@plt+0x29324>
   3bef8:	mov	r0, r4
   3befc:	sub	sp, fp, #24
   3bf00:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   3bf04:	b	12ab8 <timegm@plt>
   3bf08:	mov	r0, r7
   3bf0c:	bl	3bddc <__assert_fail@plt+0x291ec>
   3bf10:	mvn	r5, #0
   3bf14:	mov	r0, r5
   3bf18:	sub	sp, fp, #24
   3bf1c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   3bf20:	push	{fp, lr}
   3bf24:	mov	fp, sp
   3bf28:	ldrb	r1, [r0, #4]
   3bf2c:	cmp	r1, #0
   3bf30:	beq	3bf4c <__assert_fail@plt+0x2935c>
   3bf34:	add	r1, r0, #5
   3bf38:	movw	r0, #10585	; 0x2959
   3bf3c:	mov	r2, #1
   3bf40:	movt	r0, #4
   3bf44:	bl	128d8 <setenv@plt>
   3bf48:	b	3bf58 <__assert_fail@plt+0x29368>
   3bf4c:	movw	r0, #10585	; 0x2959
   3bf50:	movt	r0, #4
   3bf54:	bl	12b6c <unsetenv@plt>
   3bf58:	mov	r1, #0
   3bf5c:	cmp	r0, #0
   3bf60:	bne	3bf6c <__assert_fail@plt+0x2937c>
   3bf64:	bl	12704 <tzset@plt>
   3bf68:	mov	r1, #1
   3bf6c:	mov	r0, r1
   3bf70:	pop	{fp, pc}
   3bf74:	push	{fp, lr}
   3bf78:	mov	fp, sp
   3bf7c:	movw	r0, #17672	; 0x4508
   3bf80:	movt	r0, #5
   3bf84:	ldr	r0, [r0]
   3bf88:	bl	12884 <exit@plt>
   3bf8c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3bf90:	add	fp, sp, #28
   3bf94:	sub	sp, sp, #12
   3bf98:	mov	r4, r3
   3bf9c:	mov	r6, r2
   3bfa0:	mov	r5, r1
   3bfa4:	mov	sl, r0
   3bfa8:	bl	128c0 <strlen@plt>
   3bfac:	ldr	r8, [r5]
   3bfb0:	cmp	r8, #0
   3bfb4:	beq	3c06c <__assert_fail@plt+0x2947c>
   3bfb8:	mov	r7, r0
   3bfbc:	mov	r0, #0
   3bfc0:	add	r9, r5, #4
   3bfc4:	mov	r5, #0
   3bfc8:	str	r6, [sp, #4]
   3bfcc:	str	r0, [sp]
   3bfd0:	mvn	r0, #0
   3bfd4:	str	r0, [sp, #8]
   3bfd8:	mov	r0, r8
   3bfdc:	mov	r1, sl
   3bfe0:	mov	r2, r7
   3bfe4:	bl	12b90 <strncmp@plt>
   3bfe8:	cmp	r0, #0
   3bfec:	bne	3c044 <__assert_fail@plt+0x29454>
   3bff0:	mov	r0, r8
   3bff4:	bl	128c0 <strlen@plt>
   3bff8:	cmp	r0, r7
   3bffc:	beq	3c070 <__assert_fail@plt+0x29480>
   3c000:	ldr	r0, [sp, #8]
   3c004:	cmn	r0, #1
   3c008:	beq	3c040 <__assert_fail@plt+0x29450>
   3c00c:	ldr	r0, [sp, #4]
   3c010:	cmp	r0, #0
   3c014:	beq	3c034 <__assert_fail@plt+0x29444>
   3c018:	ldr	r1, [sp, #8]
   3c01c:	mov	r2, r4
   3c020:	mla	r0, r1, r4, r0
   3c024:	mov	r1, r6
   3c028:	bl	128a8 <bcmp@plt>
   3c02c:	cmp	r0, #0
   3c030:	beq	3c044 <__assert_fail@plt+0x29454>
   3c034:	mov	r0, #1
   3c038:	str	r0, [sp]
   3c03c:	b	3c044 <__assert_fail@plt+0x29454>
   3c040:	str	r5, [sp, #8]
   3c044:	ldr	r8, [r9, r5, lsl #2]
   3c048:	add	r6, r6, r4
   3c04c:	add	r5, r5, #1
   3c050:	cmp	r8, #0
   3c054:	bne	3bfd8 <__assert_fail@plt+0x293e8>
   3c058:	ldr	r0, [sp]
   3c05c:	tst	r0, #1
   3c060:	ldr	r0, [sp, #8]
   3c064:	mvnne	r0, #1
   3c068:	b	3c074 <__assert_fail@plt+0x29484>
   3c06c:	mvn	r5, #0
   3c070:	mov	r0, r5
   3c074:	sub	sp, fp, #28
   3c078:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3c07c:	push	{r4, r5, r6, sl, fp, lr}
   3c080:	add	fp, sp, #16
   3c084:	sub	sp, sp, #8
   3c088:	mov	r5, r0
   3c08c:	movw	r0, #13440	; 0x3480
   3c090:	mov	r4, r1
   3c094:	movw	r1, #13467	; 0x349b
   3c098:	cmn	r2, #1
   3c09c:	mov	r2, #5
   3c0a0:	movt	r0, #4
   3c0a4:	movt	r1, #4
   3c0a8:	moveq	r1, r0
   3c0ac:	mov	r0, #0
   3c0b0:	bl	12674 <dcgettext@plt>
   3c0b4:	mov	r6, r0
   3c0b8:	mov	r0, #0
   3c0bc:	mov	r1, #8
   3c0c0:	mov	r2, r4
   3c0c4:	bl	294c0 <__assert_fail@plt+0x168d0>
   3c0c8:	mov	r4, r0
   3c0cc:	mov	r0, #1
   3c0d0:	mov	r1, r5
   3c0d4:	bl	29890 <__assert_fail@plt+0x16ca0>
   3c0d8:	str	r0, [sp]
   3c0dc:	mov	r0, #0
   3c0e0:	mov	r1, #0
   3c0e4:	mov	r2, r6
   3c0e8:	mov	r3, r4
   3c0ec:	bl	127b8 <error@plt>
   3c0f0:	sub	sp, fp, #16
   3c0f4:	pop	{r4, r5, r6, sl, fp, pc}
   3c0f8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3c0fc:	add	fp, sp, #28
   3c100:	sub	sp, sp, #4
   3c104:	mov	sl, r1
   3c108:	movw	r1, #13496	; 0x34b8
   3c10c:	mov	r4, r2
   3c110:	mov	r7, r0
   3c114:	mov	r0, #0
   3c118:	mov	r2, #5
   3c11c:	mov	r8, #0
   3c120:	movt	r1, #4
   3c124:	bl	12674 <dcgettext@plt>
   3c128:	movw	r1, #17768	; 0x4568
   3c12c:	movt	r1, #5
   3c130:	ldr	r1, [r1]
   3c134:	bl	12b84 <fputs@plt>
   3c138:	ldr	r6, [r7]
   3c13c:	cmp	r6, #0
   3c140:	bne	3c160 <__assert_fail@plt+0x29570>
   3c144:	movw	r0, #17768	; 0x4568
   3c148:	movt	r0, #5
   3c14c:	ldr	r1, [r0]
   3c150:	mov	r0, #10
   3c154:	sub	sp, fp, #28
   3c158:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3c15c:	b	12ac4 <putc@plt>
   3c160:	add	r0, r7, #4
   3c164:	mov	r9, #0
   3c168:	mov	r7, #0
   3c16c:	str	r0, [sp]
   3c170:	mov	r5, #0
   3c174:	cmp	r9, #0
   3c178:	beq	3c1c4 <__assert_fail@plt+0x295d4>
   3c17c:	add	r1, sl, r8
   3c180:	mov	r0, r7
   3c184:	mov	r2, r4
   3c188:	bl	128a8 <bcmp@plt>
   3c18c:	cmp	r0, #0
   3c190:	mov	r5, r8
   3c194:	bne	3c1c4 <__assert_fail@plt+0x295d4>
   3c198:	movw	r0, #17768	; 0x4568
   3c19c:	movt	r0, #5
   3c1a0:	ldr	r5, [r0]
   3c1a4:	mov	r0, r6
   3c1a8:	bl	298a0 <__assert_fail@plt+0x16cb0>
   3c1ac:	movw	r1, #13525	; 0x34d5
   3c1b0:	mov	r2, r0
   3c1b4:	mov	r0, r5
   3c1b8:	movt	r1, #4
   3c1bc:	bl	128fc <fprintf@plt>
   3c1c0:	b	3c1f0 <__assert_fail@plt+0x29600>
   3c1c4:	movw	r0, #17768	; 0x4568
   3c1c8:	movt	r0, #5
   3c1cc:	ldr	r7, [r0]
   3c1d0:	mov	r0, r6
   3c1d4:	bl	298a0 <__assert_fail@plt+0x16cb0>
   3c1d8:	movw	r1, #13517	; 0x34cd
   3c1dc:	mov	r2, r0
   3c1e0:	mov	r0, r7
   3c1e4:	movt	r1, #4
   3c1e8:	bl	128fc <fprintf@plt>
   3c1ec:	add	r7, sl, r5
   3c1f0:	ldr	r0, [sp]
   3c1f4:	add	r8, r8, r4
   3c1f8:	ldr	r6, [r0, -r9, lsl #2]
   3c1fc:	sub	r9, r9, #1
   3c200:	cmp	r6, #0
   3c204:	bne	3c170 <__assert_fail@plt+0x29580>
   3c208:	b	3c144 <__assert_fail@plt+0x29554>
   3c20c:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   3c210:	add	fp, sp, #24
   3c214:	ldr	r8, [fp, #8]
   3c218:	mov	r6, r0
   3c21c:	mov	r4, r3
   3c220:	mov	r5, r2
   3c224:	mov	r7, r1
   3c228:	mov	r0, r1
   3c22c:	mov	r1, r2
   3c230:	mov	r2, r3
   3c234:	mov	r3, r8
   3c238:	bl	3bf8c <__assert_fail@plt+0x2939c>
   3c23c:	mov	r2, r0
   3c240:	cmn	r0, #1
   3c244:	bgt	3c270 <__assert_fail@plt+0x29680>
   3c248:	ldr	r9, [fp, #12]
   3c24c:	mov	r0, r6
   3c250:	mov	r1, r7
   3c254:	bl	3c07c <__assert_fail@plt+0x2948c>
   3c258:	mov	r0, r5
   3c25c:	mov	r1, r4
   3c260:	mov	r2, r8
   3c264:	bl	3c0f8 <__assert_fail@plt+0x29508>
   3c268:	blx	r9
   3c26c:	mvn	r2, #0
   3c270:	mov	r0, r2
   3c274:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   3c278:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   3c27c:	add	fp, sp, #24
   3c280:	ldr	r6, [r1]
   3c284:	cmp	r6, #0
   3c288:	beq	3c2e8 <__assert_fail@plt+0x296f8>
   3c28c:	mov	r8, r1
   3c290:	mov	r7, r2
   3c294:	mov	r1, r2
   3c298:	mov	r2, r3
   3c29c:	mov	r4, r3
   3c2a0:	mov	r9, r0
   3c2a4:	bl	128a8 <bcmp@plt>
   3c2a8:	cmp	r0, #0
   3c2ac:	beq	3c2ec <__assert_fail@plt+0x296fc>
   3c2b0:	add	r7, r7, r4
   3c2b4:	add	r5, r8, #4
   3c2b8:	ldr	r6, [r5]
   3c2bc:	cmp	r6, #0
   3c2c0:	beq	3c2e8 <__assert_fail@plt+0x296f8>
   3c2c4:	mov	r0, r9
   3c2c8:	mov	r1, r7
   3c2cc:	mov	r2, r4
   3c2d0:	bl	128a8 <bcmp@plt>
   3c2d4:	add	r7, r7, r4
   3c2d8:	add	r5, r5, #4
   3c2dc:	cmp	r0, #0
   3c2e0:	bne	3c2b8 <__assert_fail@plt+0x296c8>
   3c2e4:	b	3c2ec <__assert_fail@plt+0x296fc>
   3c2e8:	mov	r6, #0
   3c2ec:	mov	r0, r6
   3c2f0:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   3c2f4:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   3c2f8:	add	fp, sp, #24
   3c2fc:	sub	sp, sp, #32
   3c300:	mov	r5, r0
   3c304:	ldrb	r0, [r2]
   3c308:	cmp	r0, #0
   3c30c:	beq	3c3e0 <__assert_fail@plt+0x297f0>
   3c310:	movw	r9, #20060	; 0x4e5c
   3c314:	mov	r4, r2
   3c318:	mov	r6, r1
   3c31c:	movt	r9, #5
   3c320:	ldr	r0, [r9]
   3c324:	cmp	r0, #0
   3c328:	bne	3c38c <__assert_fail@plt+0x2979c>
   3c32c:	movw	r0, #6473	; 0x1949
   3c330:	movw	r1, #18688	; 0x4900
   3c334:	movt	r0, #4
   3c338:	movt	r1, #8
   3c33c:	bl	127e8 <open64@plt>
   3c340:	cmn	r0, #1
   3c344:	ble	3c3f8 <__assert_fail@plt+0x29808>
   3c348:	movw	r1, #13530	; 0x34da
   3c34c:	mov	r7, r0
   3c350:	mov	r8, sp
   3c354:	movt	r1, #4
   3c358:	mov	r0, r8
   3c35c:	mov	r2, r7
   3c360:	bl	12a94 <sprintf@plt>
   3c364:	mov	r0, r8
   3c368:	mov	r1, #0
   3c36c:	bl	129c8 <access@plt>
   3c370:	cmp	r0, #0
   3c374:	mvn	r1, #0
   3c378:	mov	r0, r7
   3c37c:	movweq	r1, #1
   3c380:	str	r1, [r9]
   3c384:	bl	12ba8 <close@plt>
   3c388:	ldr	r0, [r9]
   3c38c:	mov	r7, #0
   3c390:	cmp	r0, #0
   3c394:	bmi	3c3ec <__assert_fail@plt+0x297fc>
   3c398:	mov	r0, r4
   3c39c:	bl	128c0 <strlen@plt>
   3c3a0:	add	r0, r0, #27
   3c3a4:	cmp	r0, #4032	; 0xfc0
   3c3a8:	bls	3c3bc <__assert_fail@plt+0x297cc>
   3c3ac:	bl	2de8c <__assert_fail@plt+0x1b29c>
   3c3b0:	mov	r5, r0
   3c3b4:	cmp	r0, #0
   3c3b8:	beq	3c3ec <__assert_fail@plt+0x297fc>
   3c3bc:	movw	r1, #13553	; 0x34f1
   3c3c0:	mov	r0, r5
   3c3c4:	mov	r2, r6
   3c3c8:	movt	r1, #4
   3c3cc:	bl	12a94 <sprintf@plt>
   3c3d0:	add	r0, r5, r0
   3c3d4:	mov	r1, r4
   3c3d8:	bl	12770 <strcpy@plt>
   3c3dc:	b	3c3e8 <__assert_fail@plt+0x297f8>
   3c3e0:	mov	r0, #0
   3c3e4:	strb	r0, [r5]
   3c3e8:	mov	r7, r5
   3c3ec:	mov	r0, r7
   3c3f0:	sub	sp, fp, #24
   3c3f4:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   3c3f8:	mvn	r0, #0
   3c3fc:	mov	r7, #0
   3c400:	str	r0, [r9]
   3c404:	b	3c3ec <__assert_fail@plt+0x297fc>
   3c408:	sub	r0, r0, #1
   3c40c:	ldrb	r3, [r0, #1]!
   3c410:	cmp	r3, #47	; 0x2f
   3c414:	beq	3c40c <__assert_fail@plt+0x2981c>
   3c418:	mov	r2, #0
   3c41c:	mov	r1, r0
   3c420:	uxtb	r3, r3
   3c424:	cmp	r3, #47	; 0x2f
   3c428:	beq	3c444 <__assert_fail@plt+0x29854>
   3c42c:	cmp	r3, #0
   3c430:	bxeq	lr
   3c434:	tst	r2, #1
   3c438:	mov	r2, #0
   3c43c:	movne	r0, r1
   3c440:	b	3c448 <__assert_fail@plt+0x29858>
   3c444:	mov	r2, #1
   3c448:	ldrb	r3, [r1, #1]!
   3c44c:	b	3c420 <__assert_fail@plt+0x29830>
   3c450:	push	{r4, sl, fp, lr}
   3c454:	add	fp, sp, #8
   3c458:	mov	r4, r0
   3c45c:	bl	128c0 <strlen@plt>
   3c460:	mov	r1, r0
   3c464:	sub	r2, r4, #1
   3c468:	mov	r0, r1
   3c46c:	cmp	r1, #2
   3c470:	bcc	3c484 <__assert_fail@plt+0x29894>
   3c474:	ldrb	r3, [r2, r0]
   3c478:	sub	r1, r0, #1
   3c47c:	cmp	r3, #47	; 0x2f
   3c480:	beq	3c468 <__assert_fail@plt+0x29878>
   3c484:	pop	{r4, sl, fp, pc}
   3c488:	push	{r4, r5, r6, sl, fp, lr}
   3c48c:	add	fp, sp, #16
   3c490:	mov	r4, r0
   3c494:	bl	12788 <__fpending@plt>
   3c498:	mov	r5, r0
   3c49c:	mov	r0, r4
   3c4a0:	bl	125b4 <ferror@plt>
   3c4a4:	mov	r6, r0
   3c4a8:	mov	r0, r4
   3c4ac:	bl	129d4 <fclose@plt>
   3c4b0:	cmp	r6, #0
   3c4b4:	beq	3c4d4 <__assert_fail@plt+0x298e4>
   3c4b8:	mvn	r4, #0
   3c4bc:	cmp	r0, #0
   3c4c0:	bne	3c500 <__assert_fail@plt+0x29910>
   3c4c4:	bl	12908 <__errno_location@plt>
   3c4c8:	mov	r1, #0
   3c4cc:	str	r1, [r0]
   3c4d0:	b	3c500 <__assert_fail@plt+0x29910>
   3c4d4:	cmp	r0, #0
   3c4d8:	mov	r4, r0
   3c4dc:	mvnne	r4, #0
   3c4e0:	cmp	r5, #0
   3c4e4:	bne	3c500 <__assert_fail@plt+0x29910>
   3c4e8:	cmp	r0, #0
   3c4ec:	beq	3c500 <__assert_fail@plt+0x29910>
   3c4f0:	bl	12908 <__errno_location@plt>
   3c4f4:	ldr	r0, [r0]
   3c4f8:	subs	r4, r0, #9
   3c4fc:	mvnne	r4, #0
   3c500:	mov	r0, r4
   3c504:	pop	{r4, r5, r6, sl, fp, pc}
   3c508:	movw	r2, #62998	; 0xf616
   3c50c:	mov	r1, #0
   3c510:	movt	r2, #149	; 0x95
   3c514:	str	r1, [r0, #16]
   3c518:	str	r1, [r0, #20]
   3c51c:	str	r2, [r0, #24]
   3c520:	bx	lr
   3c524:	push	{r4, r5, r6, r7, r9, sl, fp, lr}
   3c528:	add	fp, sp, #24
   3c52c:	ldr	r2, [r0, #24]
   3c530:	movw	r3, #62998	; 0xf616
   3c534:	movt	r3, #149	; 0x95
   3c538:	cmp	r2, r3
   3c53c:	bne	3c5d4 <__assert_fail@plt+0x299e4>
   3c540:	add	r3, r0, #16
   3c544:	add	ip, r0, #8
   3c548:	ldrd	r4, [r3]
   3c54c:	orrs	r2, r4, r5
   3c550:	beq	3c58c <__assert_fail@plt+0x2999c>
   3c554:	ldr	r6, [r1, #96]	; 0x60
   3c558:	ldr	r9, [r1, #100]	; 0x64
   3c55c:	ldm	r0, {r2, r7}
   3c560:	eor	r7, r9, r7
   3c564:	eor	r2, r6, r2
   3c568:	orrs	r2, r2, r7
   3c56c:	bne	3c58c <__assert_fail@plt+0x2999c>
   3c570:	ldm	ip, {r2, r7}
   3c574:	ldm	r1, {r6, r9}
   3c578:	eor	r7, r9, r7
   3c57c:	eor	r2, r6, r2
   3c580:	orrs	r2, r2, r7
   3c584:	mov	r2, #1
   3c588:	beq	3c5cc <__assert_fail@plt+0x299dc>
   3c58c:	adds	r6, r4, #1
   3c590:	adc	r7, r5, #0
   3c594:	and	r2, r6, r4
   3c598:	strd	r6, [r3]
   3c59c:	and	r3, r7, r5
   3c5a0:	orrs	r2, r2, r3
   3c5a4:	mov	r2, #0
   3c5a8:	bne	3c5cc <__assert_fail@plt+0x299dc>
   3c5ac:	orrs	r3, r6, r7
   3c5b0:	beq	3c5c8 <__assert_fail@plt+0x299d8>
   3c5b4:	ldrd	r4, [r1]
   3c5b8:	strd	r4, [ip]
   3c5bc:	ldrd	r4, [r1, #96]	; 0x60
   3c5c0:	strd	r4, [r0]
   3c5c4:	b	3c5cc <__assert_fail@plt+0x299dc>
   3c5c8:	mov	r2, #1
   3c5cc:	mov	r0, r2
   3c5d0:	pop	{r4, r5, r6, r7, r9, sl, fp, pc}
   3c5d4:	movw	r0, #13571	; 0x3503
   3c5d8:	movw	r1, #13595	; 0x351b
   3c5dc:	movw	r3, #13609	; 0x3529
   3c5e0:	mov	r2, #60	; 0x3c
   3c5e4:	movt	r0, #4
   3c5e8:	movt	r1, #4
   3c5ec:	movt	r3, #4
   3c5f0:	bl	12bf0 <__assert_fail@plt>
   3c5f4:	push	{r4, r5, r6, r7, fp, lr}
   3c5f8:	add	fp, sp, #16
   3c5fc:	mov	r4, r0
   3c600:	ldr	r0, [r0, #4]
   3c604:	mov	r5, r1
   3c608:	cmp	r0, r1
   3c60c:	bcs	3c63c <__assert_fail@plt+0x29a4c>
   3c610:	mov	r6, r3
   3c614:	cmp	r3, #0
   3c618:	beq	3c644 <__assert_fail@plt+0x29a54>
   3c61c:	mvn	r0, #0
   3c620:	udiv	r0, r0, r6
   3c624:	cmp	r0, r5
   3c628:	bcs	3c644 <__assert_fail@plt+0x29a54>
   3c62c:	bl	12908 <__errno_location@plt>
   3c630:	mov	r1, #12
   3c634:	str	r1, [r0]
   3c638:	b	3c6a8 <__assert_fail@plt+0x29ab8>
   3c63c:	str	r5, [r4]
   3c640:	b	3c6a0 <__assert_fail@plt+0x29ab0>
   3c644:	ldr	r0, [r4, #8]
   3c648:	mul	r1, r6, r5
   3c64c:	cmp	r0, r2
   3c650:	beq	3c668 <__assert_fail@plt+0x29a78>
   3c654:	bl	2e984 <__assert_fail@plt+0x1bd94>
   3c658:	mov	r7, r0
   3c65c:	cmp	r0, #0
   3c660:	bne	3c698 <__assert_fail@plt+0x29aa8>
   3c664:	b	3c6a8 <__assert_fail@plt+0x29ab8>
   3c668:	mov	r0, r1
   3c66c:	bl	2de8c <__assert_fail@plt+0x1b29c>
   3c670:	cmp	r0, #0
   3c674:	beq	3c6a8 <__assert_fail@plt+0x29ab8>
   3c678:	ldr	r1, [r4, #8]
   3c67c:	mov	r7, r0
   3c680:	cmp	r1, #0
   3c684:	beq	3c698 <__assert_fail@plt+0x29aa8>
   3c688:	ldr	r0, [r4]
   3c68c:	mul	r2, r0, r6
   3c690:	mov	r0, r7
   3c694:	bl	125f0 <memcpy@plt>
   3c698:	str	r5, [r4]
   3c69c:	stmib	r4, {r5, r7}
   3c6a0:	mov	r0, #1
   3c6a4:	pop	{r4, r5, r6, r7, fp, pc}
   3c6a8:	mov	r0, #0
   3c6ac:	pop	{r4, r5, r6, r7, fp, pc}
   3c6b0:	mov	r1, r0
   3c6b4:	mov	r0, #0
   3c6b8:	b	125d8 <clock_gettime@plt>
   3c6bc:	push	{fp, lr}
   3c6c0:	mov	fp, sp
   3c6c4:	mov	r1, r0
   3c6c8:	mov	r0, #0
   3c6cc:	bl	125d8 <clock_gettime@plt>
   3c6d0:	pop	{fp, pc}
   3c6d4:	push	{r4, sl, fp, lr}
   3c6d8:	add	fp, sp, #8
   3c6dc:	sub	sp, sp, #264	; 0x108
   3c6e0:	add	r1, sp, #7
   3c6e4:	movw	r2, #257	; 0x101
   3c6e8:	bl	3caa0 <__assert_fail@plt+0x29eb0>
   3c6ec:	mov	r4, #0
   3c6f0:	cmp	r0, #0
   3c6f4:	bne	3c734 <__assert_fail@plt+0x29b44>
   3c6f8:	movw	r1, #55022	; 0xd6ee
   3c6fc:	add	r0, sp, #7
   3c700:	mov	r2, #2
   3c704:	movt	r1, #3
   3c708:	bl	128a8 <bcmp@plt>
   3c70c:	cmp	r0, #0
   3c710:	beq	3c734 <__assert_fail@plt+0x29b44>
   3c714:	movw	r1, #13676	; 0x356c
   3c718:	add	r0, sp, #7
   3c71c:	mov	r2, #6
   3c720:	movt	r1, #4
   3c724:	bl	128a8 <bcmp@plt>
   3c728:	cmp	r0, #0
   3c72c:	mov	r4, r0
   3c730:	movwne	r4, #1
   3c734:	mov	r0, r4
   3c738:	sub	sp, fp, #8
   3c73c:	pop	{r4, sl, fp, pc}
   3c740:	vdup.32	q8, r1
   3c744:	mov	r2, #0
   3c748:	str	r2, [r0, #20]
   3c74c:	str	r2, [r0, #24]
   3c750:	mov	r2, #1
   3c754:	strb	r2, [r0, #28]
   3c758:	vst1.32	{d16-d17}, [r0]!
   3c75c:	str	r1, [r0]
   3c760:	bx	lr
   3c764:	ldrb	r0, [r0, #28]
   3c768:	bx	lr
   3c76c:	push	{fp, lr}
   3c770:	mov	fp, sp
   3c774:	ldrb	r3, [r0, #28]
   3c778:	ldr	r2, [r0, #20]
   3c77c:	eor	lr, r3, #1
   3c780:	add	r2, r2, lr
   3c784:	and	r3, r2, #3
   3c788:	ldr	ip, [r0, r3, lsl #2]
   3c78c:	str	r1, [r0, r3, lsl #2]
   3c790:	str	r3, [r0, #20]
   3c794:	ldr	r1, [r0, #24]
   3c798:	cmp	r3, r1
   3c79c:	addeq	r1, r2, lr
   3c7a0:	andeq	r1, r1, #3
   3c7a4:	streq	r1, [r0, #24]
   3c7a8:	mov	r1, #0
   3c7ac:	strb	r1, [r0, #28]
   3c7b0:	mov	r0, ip
   3c7b4:	pop	{fp, pc}
   3c7b8:	push	{fp, lr}
   3c7bc:	mov	fp, sp
   3c7c0:	ldrb	r1, [r0, #28]
   3c7c4:	cmp	r1, #0
   3c7c8:	bne	3c80c <__assert_fail@plt+0x29c1c>
   3c7cc:	ldr	r3, [r0, #20]
   3c7d0:	ldr	r2, [r0, #16]
   3c7d4:	ldr	r1, [r0, r3, lsl #2]
   3c7d8:	str	r2, [r0, r3, lsl #2]
   3c7dc:	ldr	r2, [r0, #20]
   3c7e0:	ldr	r3, [r0, #24]
   3c7e4:	cmp	r2, r3
   3c7e8:	bne	3c7f8 <__assert_fail@plt+0x29c08>
   3c7ec:	mov	r2, #1
   3c7f0:	strb	r2, [r0, #28]
   3c7f4:	b	3c804 <__assert_fail@plt+0x29c14>
   3c7f8:	sub	r2, r2, #1
   3c7fc:	and	r2, r2, #3
   3c800:	str	r2, [r0, #20]
   3c804:	mov	r0, r1
   3c808:	pop	{fp, pc}
   3c80c:	bl	12b9c <abort@plt>
   3c810:	push	{fp, lr}
   3c814:	mov	fp, sp
   3c818:	mov	r0, #14
   3c81c:	bl	12a64 <nl_langinfo@plt>
   3c820:	movw	r1, #61759	; 0xf13f
   3c824:	cmp	r0, #0
   3c828:	movt	r1, #3
   3c82c:	movne	r1, r0
   3c830:	movw	r0, #13682	; 0x3572
   3c834:	ldrb	r2, [r1]
   3c838:	movt	r0, #4
   3c83c:	cmp	r2, #0
   3c840:	movne	r0, r1
   3c844:	pop	{fp, pc}
   3c848:	push	{r4, sl, fp, lr}
   3c84c:	add	fp, sp, #8
   3c850:	mov	r4, #0
   3c854:	adds	r0, r0, #16
   3c858:	adc	r1, r4, #0
   3c85c:	rsb	r2, r1, #0
   3c860:	eors	r2, r2, r1
   3c864:	movwne	r2, #1
   3c868:	cmp	r0, #0
   3c86c:	bmi	3c8a8 <__assert_fail@plt+0x29cb8>
   3c870:	cmp	r2, #0
   3c874:	asreq	r2, r0, #31
   3c878:	eoreq	r3, r0, r0
   3c87c:	andeq	r2, r2, #1
   3c880:	eoreq	r1, r1, r2
   3c884:	orrseq	r1, r3, r1
   3c888:	bne	3c8a8 <__assert_fail@plt+0x29cb8>
   3c88c:	bl	1280c <malloc@plt>
   3c890:	cmp	r0, #0
   3c894:	addne	r4, r0, #8
   3c898:	movne	r1, #8
   3c89c:	bfine	r4, r1, #0, #4
   3c8a0:	subne	r0, r4, r0
   3c8a4:	strbne	r0, [r4, #-1]
   3c8a8:	mov	r0, r4
   3c8ac:	pop	{r4, sl, fp, pc}
   3c8b0:	push	{fp, lr}
   3c8b4:	mov	fp, sp
   3c8b8:	tst	r0, #7
   3c8bc:	bne	3c8d8 <__assert_fail@plt+0x29ce8>
   3c8c0:	tst	r0, #8
   3c8c4:	popeq	{fp, pc}
   3c8c8:	ldrb	r1, [r0, #-1]
   3c8cc:	sub	r0, r0, r1
   3c8d0:	pop	{fp, lr}
   3c8d4:	b	2bcbc <__assert_fail@plt+0x190cc>
   3c8d8:	bl	12b9c <abort@plt>
   3c8dc:	push	{r4, sl, fp, lr}
   3c8e0:	add	fp, sp, #8
   3c8e4:	mov	r4, r0
   3c8e8:	bl	1256c <wcwidth@plt>
   3c8ec:	cmn	r0, #1
   3c8f0:	popgt	{r4, sl, fp, pc}
   3c8f4:	mov	r0, r4
   3c8f8:	bl	126d4 <iswcntrl@plt>
   3c8fc:	clz	r0, r0
   3c900:	lsr	r0, r0, #5
   3c904:	pop	{r4, sl, fp, pc}
   3c908:	push	{r4, r5, r6, sl, fp, lr}
   3c90c:	add	fp, sp, #16
   3c910:	mov	r4, r0
   3c914:	mov	r0, r1
   3c918:	mov	r5, r1
   3c91c:	ldr	r1, [r0], #16
   3c920:	cmp	r1, r0
   3c924:	beq	3c930 <__assert_fail@plt+0x29d40>
   3c928:	mov	r6, r1
   3c92c:	b	3c940 <__assert_fail@plt+0x29d50>
   3c930:	ldr	r2, [r5, #4]
   3c934:	add	r6, r4, #16
   3c938:	mov	r0, r6
   3c93c:	bl	125f0 <memcpy@plt>
   3c940:	str	r6, [r4]
   3c944:	ldr	r0, [r5, #4]
   3c948:	str	r0, [r4, #4]
   3c94c:	ldrb	r0, [r5, #8]
   3c950:	strb	r0, [r4, #8]
   3c954:	cmp	r0, #0
   3c958:	ldrne	r0, [r5, #12]
   3c95c:	strne	r0, [r4, #12]
   3c960:	pop	{r4, r5, r6, sl, fp, pc}
   3c964:	movw	r2, #13688	; 0x3578
   3c968:	ubfx	r1, r0, #5, #3
   3c96c:	and	r0, r0, #31
   3c970:	movt	r2, #4
   3c974:	ldr	r1, [r2, r1, lsl #2]
   3c978:	mov	r2, #1
   3c97c:	and	r0, r1, r2, lsl r0
   3c980:	cmp	r0, #0
   3c984:	movwne	r0, #1
   3c988:	bx	lr
   3c98c:	push	{r4, r5, r6, sl, fp, lr}
   3c990:	add	fp, sp, #16
   3c994:	sub	sp, sp, #56	; 0x38
   3c998:	mov	r5, r0
   3c99c:	bl	12758 <__ctype_get_mb_cur_max@plt>
   3c9a0:	cmp	r0, #2
   3c9a4:	bcc	3ca30 <__assert_fail@plt+0x29e40>
   3c9a8:	mov	r4, #0
   3c9ac:	mov	r0, sp
   3c9b0:	str	r4, [sp, #8]
   3c9b4:	str	r4, [sp, #4]
   3c9b8:	strb	r4, [sp, #12]
   3c9bc:	strb	r4, [sp]
   3c9c0:	str	r5, [sp, #16]
   3c9c4:	bl	242a8 <__assert_fail@plt+0x116b8>
   3c9c8:	ldrb	r0, [sp, #24]
   3c9cc:	cmp	r0, #0
   3c9d0:	beq	3c9e0 <__assert_fail@plt+0x29df0>
   3c9d4:	ldr	r0, [sp, #28]
   3c9d8:	cmp	r0, #0
   3c9dc:	beq	3ca24 <__assert_fail@plt+0x29e34>
   3c9e0:	mov	r6, #0
   3c9e4:	mov	r5, sp
   3c9e8:	mov	r4, #0
   3c9ec:	strb	r6, [sp, #12]
   3c9f0:	ldr	r0, [sp, #16]
   3c9f4:	ldr	r1, [sp, #20]
   3c9f8:	add	r0, r0, r1
   3c9fc:	str	r0, [sp, #16]
   3ca00:	mov	r0, r5
   3ca04:	bl	242a8 <__assert_fail@plt+0x116b8>
   3ca08:	ldrb	r1, [sp, #24]
   3ca0c:	ldr	r0, [sp, #28]
   3ca10:	add	r4, r4, #1
   3ca14:	cmp	r1, #0
   3ca18:	beq	3c9ec <__assert_fail@plt+0x29dfc>
   3ca1c:	cmp	r0, #0
   3ca20:	bne	3c9ec <__assert_fail@plt+0x29dfc>
   3ca24:	mov	r0, r4
   3ca28:	sub	sp, fp, #16
   3ca2c:	pop	{r4, r5, r6, sl, fp, pc}
   3ca30:	mov	r0, r5
   3ca34:	sub	sp, fp, #16
   3ca38:	pop	{r4, r5, r6, sl, fp, lr}
   3ca3c:	b	128c0 <strlen@plt>
   3ca40:	push	{r4, r5, r6, sl, fp, lr}
   3ca44:	add	fp, sp, #16
   3ca48:	orr	r2, r2, #18688	; 0x4900
   3ca4c:	mov	r4, r3
   3ca50:	orr	r2, r2, #524288	; 0x80000
   3ca54:	bl	249f4 <__assert_fail@plt+0x11e04>
   3ca58:	mov	r5, r0
   3ca5c:	mov	r0, #0
   3ca60:	cmp	r5, #0
   3ca64:	bmi	3ca9c <__assert_fail@plt+0x29eac>
   3ca68:	mov	r0, r5
   3ca6c:	bl	12aac <fdopendir@plt>
   3ca70:	cmp	r0, #0
   3ca74:	beq	3ca80 <__assert_fail@plt+0x29e90>
   3ca78:	str	r5, [r4]
   3ca7c:	pop	{r4, r5, r6, sl, fp, pc}
   3ca80:	bl	12908 <__errno_location@plt>
   3ca84:	ldr	r6, [r0]
   3ca88:	mov	r4, r0
   3ca8c:	mov	r0, r5
   3ca90:	bl	12ba8 <close@plt>
   3ca94:	mov	r0, #0
   3ca98:	str	r6, [r4]
   3ca9c:	pop	{r4, r5, r6, sl, fp, pc}
   3caa0:	push	{r4, r5, r6, r7, fp, lr}
   3caa4:	add	fp, sp, #16
   3caa8:	mov	r4, r1
   3caac:	mov	r1, #0
   3cab0:	mov	r6, r2
   3cab4:	bl	12a1c <setlocale@plt>
   3cab8:	cmp	r0, #0
   3cabc:	beq	3cae8 <__assert_fail@plt+0x29ef8>
   3cac0:	mov	r7, r0
   3cac4:	bl	128c0 <strlen@plt>
   3cac8:	cmp	r0, r6
   3cacc:	bcs	3cafc <__assert_fail@plt+0x29f0c>
   3cad0:	add	r2, r0, #1
   3cad4:	mov	r0, r4
   3cad8:	mov	r1, r7
   3cadc:	bl	125f0 <memcpy@plt>
   3cae0:	mov	r5, #0
   3cae4:	b	3cb24 <__assert_fail@plt+0x29f34>
   3cae8:	cmp	r6, #0
   3caec:	mov	r5, #22
   3caf0:	movne	r0, #0
   3caf4:	strbne	r0, [r4]
   3caf8:	b	3cb24 <__assert_fail@plt+0x29f34>
   3cafc:	mov	r5, #34	; 0x22
   3cb00:	cmp	r6, #0
   3cb04:	beq	3cb24 <__assert_fail@plt+0x29f34>
   3cb08:	sub	r6, r6, #1
   3cb0c:	mov	r0, r4
   3cb10:	mov	r1, r7
   3cb14:	mov	r2, r6
   3cb18:	bl	125f0 <memcpy@plt>
   3cb1c:	mov	r0, #0
   3cb20:	strb	r0, [r4, r6]
   3cb24:	mov	r0, r5
   3cb28:	pop	{r4, r5, r6, r7, fp, pc}
   3cb2c:	mov	r1, #0
   3cb30:	b	12a1c <setlocale@plt>
   3cb34:	eor	r1, r1, #-2147483648	; 0x80000000
   3cb38:	b	3cb40 <__assert_fail@plt+0x29f50>
   3cb3c:	eor	r3, r3, #-2147483648	; 0x80000000
   3cb40:	push	{r4, r5, lr}
   3cb44:	lsl	r4, r1, #1
   3cb48:	lsl	r5, r3, #1
   3cb4c:	teq	r4, r5
   3cb50:	teqeq	r0, r2
   3cb54:	orrsne	ip, r4, r0
   3cb58:	orrsne	ip, r5, r2
   3cb5c:	mvnsne	ip, r4, asr #21
   3cb60:	mvnsne	ip, r5, asr #21
   3cb64:	beq	3cd50 <__assert_fail@plt+0x2a160>
   3cb68:	lsr	r4, r4, #21
   3cb6c:	rsbs	r5, r4, r5, lsr #21
   3cb70:	rsblt	r5, r5, #0
   3cb74:	ble	3cb94 <__assert_fail@plt+0x29fa4>
   3cb78:	add	r4, r4, r5
   3cb7c:	eor	r2, r0, r2
   3cb80:	eor	r3, r1, r3
   3cb84:	eor	r0, r2, r0
   3cb88:	eor	r1, r3, r1
   3cb8c:	eor	r2, r0, r2
   3cb90:	eor	r3, r1, r3
   3cb94:	cmp	r5, #54	; 0x36
   3cb98:	pophi	{r4, r5, pc}
   3cb9c:	tst	r1, #-2147483648	; 0x80000000
   3cba0:	lsl	r1, r1, #12
   3cba4:	mov	ip, #1048576	; 0x100000
   3cba8:	orr	r1, ip, r1, lsr #12
   3cbac:	beq	3cbb8 <__assert_fail@plt+0x29fc8>
   3cbb0:	rsbs	r0, r0, #0
   3cbb4:	rsc	r1, r1, #0
   3cbb8:	tst	r3, #-2147483648	; 0x80000000
   3cbbc:	lsl	r3, r3, #12
   3cbc0:	orr	r3, ip, r3, lsr #12
   3cbc4:	beq	3cbd0 <__assert_fail@plt+0x29fe0>
   3cbc8:	rsbs	r2, r2, #0
   3cbcc:	rsc	r3, r3, #0
   3cbd0:	teq	r4, r5
   3cbd4:	beq	3cd38 <__assert_fail@plt+0x2a148>
   3cbd8:	sub	r4, r4, #1
   3cbdc:	rsbs	lr, r5, #32
   3cbe0:	blt	3cbfc <__assert_fail@plt+0x2a00c>
   3cbe4:	lsl	ip, r2, lr
   3cbe8:	adds	r0, r0, r2, lsr r5
   3cbec:	adc	r1, r1, #0
   3cbf0:	adds	r0, r0, r3, lsl lr
   3cbf4:	adcs	r1, r1, r3, asr r5
   3cbf8:	b	3cc18 <__assert_fail@plt+0x2a028>
   3cbfc:	sub	r5, r5, #32
   3cc00:	add	lr, lr, #32
   3cc04:	cmp	r2, #1
   3cc08:	lsl	ip, r3, lr
   3cc0c:	orrcs	ip, ip, #2
   3cc10:	adds	r0, r0, r3, asr r5
   3cc14:	adcs	r1, r1, r3, asr #31
   3cc18:	and	r5, r1, #-2147483648	; 0x80000000
   3cc1c:	bpl	3cc2c <__assert_fail@plt+0x2a03c>
   3cc20:	rsbs	ip, ip, #0
   3cc24:	rscs	r0, r0, #0
   3cc28:	rsc	r1, r1, #0
   3cc2c:	cmp	r1, #1048576	; 0x100000
   3cc30:	bcc	3cc70 <__assert_fail@plt+0x2a080>
   3cc34:	cmp	r1, #2097152	; 0x200000
   3cc38:	bcc	3cc58 <__assert_fail@plt+0x2a068>
   3cc3c:	lsrs	r1, r1, #1
   3cc40:	rrxs	r0, r0
   3cc44:	rrx	ip, ip
   3cc48:	add	r4, r4, #1
   3cc4c:	lsl	r2, r4, #21
   3cc50:	cmn	r2, #4194304	; 0x400000
   3cc54:	bcs	3cdb0 <__assert_fail@plt+0x2a1c0>
   3cc58:	cmp	ip, #-2147483648	; 0x80000000
   3cc5c:	lsrseq	ip, r0, #1
   3cc60:	adcs	r0, r0, #0
   3cc64:	adc	r1, r1, r4, lsl #20
   3cc68:	orr	r1, r1, r5
   3cc6c:	pop	{r4, r5, pc}
   3cc70:	lsls	ip, ip, #1
   3cc74:	adcs	r0, r0, r0
   3cc78:	adc	r1, r1, r1
   3cc7c:	tst	r1, #1048576	; 0x100000
   3cc80:	sub	r4, r4, #1
   3cc84:	bne	3cc58 <__assert_fail@plt+0x2a068>
   3cc88:	teq	r1, #0
   3cc8c:	moveq	r1, r0
   3cc90:	moveq	r0, #0
   3cc94:	clz	r3, r1
   3cc98:	addeq	r3, r3, #32
   3cc9c:	sub	r3, r3, #11
   3cca0:	subs	r2, r3, #32
   3cca4:	bge	3ccc8 <__assert_fail@plt+0x2a0d8>
   3cca8:	adds	r2, r2, #12
   3ccac:	ble	3ccc4 <__assert_fail@plt+0x2a0d4>
   3ccb0:	add	ip, r2, #20
   3ccb4:	rsb	r2, r2, #12
   3ccb8:	lsl	r0, r1, ip
   3ccbc:	lsr	r1, r1, r2
   3ccc0:	b	3ccd8 <__assert_fail@plt+0x2a0e8>
   3ccc4:	add	r2, r2, #20
   3ccc8:	rsble	ip, r2, #32
   3cccc:	lsl	r1, r1, r2
   3ccd0:	orrle	r1, r1, r0, lsr ip
   3ccd4:	lslle	r0, r0, r2
   3ccd8:	subs	r4, r4, r3
   3ccdc:	addge	r1, r1, r4, lsl #20
   3cce0:	orrge	r1, r1, r5
   3cce4:	popge	{r4, r5, pc}
   3cce8:	mvn	r4, r4
   3ccec:	subs	r4, r4, #31
   3ccf0:	bge	3cd2c <__assert_fail@plt+0x2a13c>
   3ccf4:	adds	r4, r4, #12
   3ccf8:	bgt	3cd14 <__assert_fail@plt+0x2a124>
   3ccfc:	add	r4, r4, #20
   3cd00:	rsb	r2, r4, #32
   3cd04:	lsr	r0, r0, r4
   3cd08:	orr	r0, r0, r1, lsl r2
   3cd0c:	orr	r1, r5, r1, lsr r4
   3cd10:	pop	{r4, r5, pc}
   3cd14:	rsb	r4, r4, #12
   3cd18:	rsb	r2, r4, #32
   3cd1c:	lsr	r0, r0, r2
   3cd20:	orr	r0, r0, r1, lsl r4
   3cd24:	mov	r1, r5
   3cd28:	pop	{r4, r5, pc}
   3cd2c:	lsr	r0, r1, r4
   3cd30:	mov	r1, r5
   3cd34:	pop	{r4, r5, pc}
   3cd38:	teq	r4, #0
   3cd3c:	eor	r3, r3, #1048576	; 0x100000
   3cd40:	eoreq	r1, r1, #1048576	; 0x100000
   3cd44:	addeq	r4, r4, #1
   3cd48:	subne	r5, r5, #1
   3cd4c:	b	3cbd8 <__assert_fail@plt+0x29fe8>
   3cd50:	mvns	ip, r4, asr #21
   3cd54:	mvnsne	ip, r5, asr #21
   3cd58:	beq	3cdc0 <__assert_fail@plt+0x2a1d0>
   3cd5c:	teq	r4, r5
   3cd60:	teqeq	r0, r2
   3cd64:	beq	3cd78 <__assert_fail@plt+0x2a188>
   3cd68:	orrs	ip, r4, r0
   3cd6c:	moveq	r1, r3
   3cd70:	moveq	r0, r2
   3cd74:	pop	{r4, r5, pc}
   3cd78:	teq	r1, r3
   3cd7c:	movne	r1, #0
   3cd80:	movne	r0, #0
   3cd84:	popne	{r4, r5, pc}
   3cd88:	lsrs	ip, r4, #21
   3cd8c:	bne	3cda0 <__assert_fail@plt+0x2a1b0>
   3cd90:	lsls	r0, r0, #1
   3cd94:	adcs	r1, r1, r1
   3cd98:	orrcs	r1, r1, #-2147483648	; 0x80000000
   3cd9c:	pop	{r4, r5, pc}
   3cda0:	adds	r4, r4, #4194304	; 0x400000
   3cda4:	addcc	r1, r1, #1048576	; 0x100000
   3cda8:	popcc	{r4, r5, pc}
   3cdac:	and	r5, r1, #-2147483648	; 0x80000000
   3cdb0:	orr	r1, r5, #2130706432	; 0x7f000000
   3cdb4:	orr	r1, r1, #15728640	; 0xf00000
   3cdb8:	mov	r0, #0
   3cdbc:	pop	{r4, r5, pc}
   3cdc0:	mvns	ip, r4, asr #21
   3cdc4:	movne	r1, r3
   3cdc8:	movne	r0, r2
   3cdcc:	mvnseq	ip, r5, asr #21
   3cdd0:	movne	r3, r1
   3cdd4:	movne	r2, r0
   3cdd8:	orrs	r4, r0, r1, lsl #12
   3cddc:	orrseq	r5, r2, r3, lsl #12
   3cde0:	teqeq	r1, r3
   3cde4:	orrne	r1, r1, #524288	; 0x80000
   3cde8:	pop	{r4, r5, pc}
   3cdec:	teq	r0, #0
   3cdf0:	moveq	r1, #0
   3cdf4:	bxeq	lr
   3cdf8:	push	{r4, r5, lr}
   3cdfc:	mov	r4, #1024	; 0x400
   3ce00:	add	r4, r4, #50	; 0x32
   3ce04:	mov	r5, #0
   3ce08:	mov	r1, #0
   3ce0c:	b	3cc88 <__assert_fail@plt+0x2a098>
   3ce10:	teq	r0, #0
   3ce14:	moveq	r1, #0
   3ce18:	bxeq	lr
   3ce1c:	push	{r4, r5, lr}
   3ce20:	mov	r4, #1024	; 0x400
   3ce24:	add	r4, r4, #50	; 0x32
   3ce28:	ands	r5, r0, #-2147483648	; 0x80000000
   3ce2c:	rsbmi	r0, r0, #0
   3ce30:	mov	r1, #0
   3ce34:	b	3cc88 <__assert_fail@plt+0x2a098>
   3ce38:	lsls	r2, r0, #1
   3ce3c:	asr	r1, r2, #3
   3ce40:	rrx	r1, r1
   3ce44:	lsl	r0, r2, #28
   3ce48:	andsne	r3, r2, #-16777216	; 0xff000000
   3ce4c:	teqne	r3, #-16777216	; 0xff000000
   3ce50:	eorne	r1, r1, #939524096	; 0x38000000
   3ce54:	bxne	lr
   3ce58:	bics	r2, r2, #-16777216	; 0xff000000
   3ce5c:	bxeq	lr
   3ce60:	teq	r3, #-16777216	; 0xff000000
   3ce64:	orreq	r1, r1, #524288	; 0x80000
   3ce68:	bxeq	lr
   3ce6c:	push	{r4, r5, lr}
   3ce70:	mov	r4, #896	; 0x380
   3ce74:	and	r5, r1, #-2147483648	; 0x80000000
   3ce78:	bic	r1, r1, #-2147483648	; 0x80000000
   3ce7c:	b	3cc88 <__assert_fail@plt+0x2a098>
   3ce80:	orrs	r2, r0, r1
   3ce84:	bxeq	lr
   3ce88:	push	{r4, r5, lr}
   3ce8c:	mov	r5, #0
   3ce90:	b	3ceb0 <__assert_fail@plt+0x2a2c0>
   3ce94:	orrs	r2, r0, r1
   3ce98:	bxeq	lr
   3ce9c:	push	{r4, r5, lr}
   3cea0:	ands	r5, r1, #-2147483648	; 0x80000000
   3cea4:	bpl	3ceb0 <__assert_fail@plt+0x2a2c0>
   3cea8:	rsbs	r0, r0, #0
   3ceac:	rsc	r1, r1, #0
   3ceb0:	mov	r4, #1024	; 0x400
   3ceb4:	add	r4, r4, #50	; 0x32
   3ceb8:	lsrs	ip, r1, #22
   3cebc:	beq	3cc2c <__assert_fail@plt+0x2a03c>
   3cec0:	mov	r2, #3
   3cec4:	lsrs	ip, ip, #3
   3cec8:	addne	r2, r2, #3
   3cecc:	lsrs	ip, ip, #3
   3ced0:	addne	r2, r2, #3
   3ced4:	add	r2, r2, ip, lsr #3
   3ced8:	rsb	r3, r2, #32
   3cedc:	lsl	ip, r0, r3
   3cee0:	lsr	r0, r0, r2
   3cee4:	orr	r0, r0, r1, lsl r3
   3cee8:	lsr	r1, r1, r2
   3ceec:	add	r4, r4, r2
   3cef0:	b	3cc2c <__assert_fail@plt+0x2a03c>
   3cef4:	cmp	r3, #0
   3cef8:	cmpeq	r2, #0
   3cefc:	bne	3cf20 <__assert_fail@plt+0x2a330>
   3cf00:	cmp	r1, #0
   3cf04:	movlt	r1, #-2147483648	; 0x80000000
   3cf08:	movlt	r0, #0
   3cf0c:	blt	3cf1c <__assert_fail@plt+0x2a32c>
   3cf10:	cmpeq	r0, #0
   3cf14:	mvnne	r1, #-2147483648	; 0x80000000
   3cf18:	mvnne	r0, #0
   3cf1c:	b	3d004 <__assert_fail@plt+0x2a414>
   3cf20:	sub	sp, sp, #8
   3cf24:	push	{sp, lr}
   3cf28:	cmp	r1, #0
   3cf2c:	blt	3cf4c <__assert_fail@plt+0x2a35c>
   3cf30:	cmp	r3, #0
   3cf34:	blt	3cf80 <__assert_fail@plt+0x2a390>
   3cf38:	bl	3d058 <__assert_fail@plt+0x2a468>
   3cf3c:	ldr	lr, [sp, #4]
   3cf40:	add	sp, sp, #8
   3cf44:	pop	{r2, r3}
   3cf48:	bx	lr
   3cf4c:	rsbs	r0, r0, #0
   3cf50:	sbc	r1, r1, r1, lsl #1
   3cf54:	cmp	r3, #0
   3cf58:	blt	3cfa4 <__assert_fail@plt+0x2a3b4>
   3cf5c:	bl	3d058 <__assert_fail@plt+0x2a468>
   3cf60:	ldr	lr, [sp, #4]
   3cf64:	add	sp, sp, #8
   3cf68:	pop	{r2, r3}
   3cf6c:	rsbs	r0, r0, #0
   3cf70:	sbc	r1, r1, r1, lsl #1
   3cf74:	rsbs	r2, r2, #0
   3cf78:	sbc	r3, r3, r3, lsl #1
   3cf7c:	bx	lr
   3cf80:	rsbs	r2, r2, #0
   3cf84:	sbc	r3, r3, r3, lsl #1
   3cf88:	bl	3d058 <__assert_fail@plt+0x2a468>
   3cf8c:	ldr	lr, [sp, #4]
   3cf90:	add	sp, sp, #8
   3cf94:	pop	{r2, r3}
   3cf98:	rsbs	r0, r0, #0
   3cf9c:	sbc	r1, r1, r1, lsl #1
   3cfa0:	bx	lr
   3cfa4:	rsbs	r2, r2, #0
   3cfa8:	sbc	r3, r3, r3, lsl #1
   3cfac:	bl	3d058 <__assert_fail@plt+0x2a468>
   3cfb0:	ldr	lr, [sp, #4]
   3cfb4:	add	sp, sp, #8
   3cfb8:	pop	{r2, r3}
   3cfbc:	rsbs	r2, r2, #0
   3cfc0:	sbc	r3, r3, r3, lsl #1
   3cfc4:	bx	lr
   3cfc8:	cmp	r3, #0
   3cfcc:	cmpeq	r2, #0
   3cfd0:	bne	3cfe8 <__assert_fail@plt+0x2a3f8>
   3cfd4:	cmp	r1, #0
   3cfd8:	cmpeq	r0, #0
   3cfdc:	mvnne	r1, #0
   3cfe0:	mvnne	r0, #0
   3cfe4:	b	3d004 <__assert_fail@plt+0x2a414>
   3cfe8:	sub	sp, sp, #8
   3cfec:	push	{sp, lr}
   3cff0:	bl	3d058 <__assert_fail@plt+0x2a468>
   3cff4:	ldr	lr, [sp, #4]
   3cff8:	add	sp, sp, #8
   3cffc:	pop	{r2, r3}
   3d000:	bx	lr
   3d004:	push	{r1, lr}
   3d008:	mov	r0, #8
   3d00c:	bl	124ac <raise@plt>
   3d010:	pop	{r1, pc}
   3d014:	andeq	r0, r0, r0
   3d018:	vmov	d6, r0, r1
   3d01c:	vldr	d7, [pc, #36]	; 3d048 <__assert_fail@plt+0x2a458>
   3d020:	vldr	d5, [pc, #40]	; 3d050 <__assert_fail@plt+0x2a460>
   3d024:	vmul.f64	d7, d6, d7
   3d028:	vcvt.u32.f64	s14, d7
   3d02c:	vcvt.f64.u32	d4, s14
   3d030:	vmov	r1, s14
   3d034:	vmls.f64	d6, d4, d5
   3d038:	vcvt.u32.f64	s15, d6
   3d03c:	vmov	r0, s15
   3d040:	bx	lr
   3d044:	nop			; (mov r0, r0)
   3d048:	andeq	r0, r0, r0
   3d04c:	ldclcc	0, cr0, [r0]
   3d050:	andeq	r0, r0, r0
   3d054:	mvnsmi	r0, r0
   3d058:	cmp	r1, r3
   3d05c:	cmpeq	r0, r2
   3d060:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3d064:	mov	r4, r0
   3d068:	movcc	r0, #0
   3d06c:	mov	r5, r1
   3d070:	ldr	lr, [sp, #36]	; 0x24
   3d074:	movcc	r1, r0
   3d078:	bcc	3d174 <__assert_fail@plt+0x2a584>
   3d07c:	cmp	r3, #0
   3d080:	clzeq	ip, r2
   3d084:	clzne	ip, r3
   3d088:	addeq	ip, ip, #32
   3d08c:	cmp	r5, #0
   3d090:	clzeq	r1, r4
   3d094:	addeq	r1, r1, #32
   3d098:	clzne	r1, r5
   3d09c:	sub	ip, ip, r1
   3d0a0:	sub	sl, ip, #32
   3d0a4:	lsl	r9, r3, ip
   3d0a8:	rsb	fp, ip, #32
   3d0ac:	orr	r9, r9, r2, lsl sl
   3d0b0:	orr	r9, r9, r2, lsr fp
   3d0b4:	lsl	r8, r2, ip
   3d0b8:	cmp	r5, r9
   3d0bc:	cmpeq	r4, r8
   3d0c0:	movcc	r0, #0
   3d0c4:	movcc	r1, r0
   3d0c8:	bcc	3d0e4 <__assert_fail@plt+0x2a4f4>
   3d0cc:	mov	r0, #1
   3d0d0:	subs	r4, r4, r8
   3d0d4:	lsl	r1, r0, sl
   3d0d8:	orr	r1, r1, r0, lsr fp
   3d0dc:	lsl	r0, r0, ip
   3d0e0:	sbc	r5, r5, r9
   3d0e4:	cmp	ip, #0
   3d0e8:	beq	3d174 <__assert_fail@plt+0x2a584>
   3d0ec:	lsr	r6, r8, #1
   3d0f0:	orr	r6, r6, r9, lsl #31
   3d0f4:	lsr	r7, r9, #1
   3d0f8:	mov	r2, ip
   3d0fc:	b	3d120 <__assert_fail@plt+0x2a530>
   3d100:	subs	r3, r4, r6
   3d104:	sbc	r8, r5, r7
   3d108:	adds	r3, r3, r3
   3d10c:	adc	r8, r8, r8
   3d110:	adds	r4, r3, #1
   3d114:	adc	r5, r8, #0
   3d118:	subs	r2, r2, #1
   3d11c:	beq	3d13c <__assert_fail@plt+0x2a54c>
   3d120:	cmp	r5, r7
   3d124:	cmpeq	r4, r6
   3d128:	bcs	3d100 <__assert_fail@plt+0x2a510>
   3d12c:	adds	r4, r4, r4
   3d130:	adc	r5, r5, r5
   3d134:	subs	r2, r2, #1
   3d138:	bne	3d120 <__assert_fail@plt+0x2a530>
   3d13c:	lsr	r3, r4, ip
   3d140:	orr	r3, r3, r5, lsl fp
   3d144:	lsr	r2, r5, ip
   3d148:	orr	r3, r3, r5, lsr sl
   3d14c:	adds	r0, r0, r4
   3d150:	mov	r4, r3
   3d154:	lsl	r3, r2, ip
   3d158:	orr	r3, r3, r4, lsl sl
   3d15c:	lsl	ip, r4, ip
   3d160:	orr	r3, r3, r4, lsr fp
   3d164:	adc	r1, r1, r5
   3d168:	subs	r0, r0, ip
   3d16c:	mov	r5, r2
   3d170:	sbc	r1, r1, r3
   3d174:	cmp	lr, #0
   3d178:	strdne	r4, [lr]
   3d17c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3d180:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   3d184:	mov	r7, r0
   3d188:	ldr	r6, [pc, #72]	; 3d1d8 <__assert_fail@plt+0x2a5e8>
   3d18c:	ldr	r5, [pc, #72]	; 3d1dc <__assert_fail@plt+0x2a5ec>
   3d190:	add	r6, pc, r6
   3d194:	add	r5, pc, r5
   3d198:	sub	r6, r6, r5
   3d19c:	mov	r8, r1
   3d1a0:	mov	r9, r2
   3d1a4:	bl	12438 <pthread_mutex_unlock@plt-0x20>
   3d1a8:	asrs	r6, r6, #2
   3d1ac:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   3d1b0:	mov	r4, #0
   3d1b4:	add	r4, r4, #1
   3d1b8:	ldr	r3, [r5], #4
   3d1bc:	mov	r2, r9
   3d1c0:	mov	r1, r8
   3d1c4:	mov	r0, r7
   3d1c8:	blx	r3
   3d1cc:	cmp	r6, r4
   3d1d0:	bne	3d1b4 <__assert_fail@plt+0x2a5c4>
   3d1d4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   3d1d8:	andeq	r6, r1, r4, ror #26
   3d1dc:	andeq	r6, r1, ip, asr sp
   3d1e0:	bx	lr
   3d1e4:	ldr	r3, [pc, #12]	; 3d1f8 <__assert_fail@plt+0x2a608>
   3d1e8:	mov	r1, #0
   3d1ec:	add	r3, pc, r3
   3d1f0:	ldr	r2, [r3]
   3d1f4:	b	1292c <__cxa_atexit@plt>
   3d1f8:	strheq	r7, [r1], -r0
   3d1fc:	mov	r2, r1
   3d200:	mov	r1, r0
   3d204:	mov	r0, #3
   3d208:	b	12b54 <__xstat64@plt>
   3d20c:	mov	r2, r1
   3d210:	mov	r1, r0
   3d214:	mov	r0, #3
   3d218:	b	1271c <__fxstat64@plt>
   3d21c:	mov	r2, r1
   3d220:	mov	r1, r0
   3d224:	mov	r0, #3
   3d228:	b	12bb4 <__lxstat64@plt>
   3d22c:	push	{lr}		; (str lr, [sp, #-4]!)
   3d230:	sub	sp, sp, #12
   3d234:	str	r3, [sp]
   3d238:	mov	r3, r2
   3d23c:	mov	r2, r1
   3d240:	mov	r1, r0
   3d244:	mov	r0, #3
   3d248:	bl	126ec <__fxstatat64@plt>
   3d24c:	add	sp, sp, #12
   3d250:	pop	{pc}		; (ldr pc, [sp], #4)

Disassembly of section .fini:

0003d254 <.fini>:
   3d254:	push	{r3, lr}
   3d258:	pop	{r3, pc}
