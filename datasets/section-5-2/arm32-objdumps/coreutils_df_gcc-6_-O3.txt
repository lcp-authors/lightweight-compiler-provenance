
../repos/coreutils/src/df:     file format elf32-littlearm


Disassembly of section .init:

000112c4 <.init>:
   112c4:	push	{r3, lr}
   112c8:	bl	12d1c <__assert_fail@plt+0x1618>
   112cc:	pop	{r3, pc}

Disassembly of section .plt:

000112d0 <calloc@plt-0x14>:
   112d0:	push	{lr}		; (str lr, [sp, #-4]!)
   112d4:	ldr	lr, [pc, #4]	; 112e0 <calloc@plt-0x4>
   112d8:	add	lr, pc, lr
   112dc:	ldr	pc, [lr, #8]!
   112e0:	andeq	r2, r2, r0, lsr #26

000112e4 <calloc@plt>:
   112e4:	add	ip, pc, #0, 12
   112e8:	add	ip, ip, #139264	; 0x22000
   112ec:	ldr	pc, [ip, #3360]!	; 0xd20

000112f0 <fputs_unlocked@plt>:
   112f0:	add	ip, pc, #0, 12
   112f4:	add	ip, ip, #139264	; 0x22000
   112f8:	ldr	pc, [ip, #3352]!	; 0xd18

000112fc <raise@plt>:
   112fc:	add	ip, pc, #0, 12
   11300:	add	ip, ip, #139264	; 0x22000
   11304:	ldr	pc, [ip, #3344]!	; 0xd10

00011308 <strverscmp@plt>:
   11308:	add	ip, pc, #0, 12
   1130c:	add	ip, ip, #139264	; 0x22000
   11310:	ldr	pc, [ip, #3336]!	; 0xd08

00011314 <__getdelim@plt>:
   11314:	add	ip, pc, #0, 12
   11318:	add	ip, ip, #139264	; 0x22000
   1131c:	ldr	pc, [ip, #3328]!	; 0xd00

00011320 <strcmp@plt>:
   11320:	add	ip, pc, #0, 12
   11324:	add	ip, ip, #139264	; 0x22000
   11328:	ldr	pc, [ip, #3320]!	; 0xcf8

0001132c <fflush@plt>:
   1132c:	add	ip, pc, #0, 12
   11330:	add	ip, ip, #139264	; 0x22000
   11334:	ldr	pc, [ip, #3312]!	; 0xcf0

00011338 <wcwidth@plt>:
   11338:	add	ip, pc, #0, 12
   1133c:	add	ip, ip, #139264	; 0x22000
   11340:	ldr	pc, [ip, #3304]!	; 0xce8

00011344 <memmove@plt>:
   11344:	add	ip, pc, #0, 12
   11348:	add	ip, ip, #139264	; 0x22000
   1134c:	ldr	pc, [ip, #3296]!	; 0xce0

00011350 <free@plt>:
   11350:	add	ip, pc, #0, 12
   11354:	add	ip, ip, #139264	; 0x22000
   11358:	ldr	pc, [ip, #3288]!	; 0xcd8

0001135c <faccessat@plt>:
   1135c:	add	ip, pc, #0, 12
   11360:	add	ip, ip, #139264	; 0x22000
   11364:	ldr	pc, [ip, #3280]!	; 0xcd0

00011368 <_exit@plt>:
   11368:	add	ip, pc, #0, 12
   1136c:	add	ip, ip, #139264	; 0x22000
   11370:	ldr	pc, [ip, #3272]!	; 0xcc8

00011374 <memcpy@plt>:
   11374:	add	ip, pc, #0, 12
   11378:	add	ip, ip, #139264	; 0x22000
   1137c:	ldr	pc, [ip, #3264]!	; 0xcc0

00011380 <__strtoull_internal@plt>:
   11380:	add	ip, pc, #0, 12
   11384:	add	ip, ip, #139264	; 0x22000
   11388:	ldr	pc, [ip, #3256]!	; 0xcb8

0001138c <mbsinit@plt>:
   1138c:	add	ip, pc, #0, 12
   11390:	add	ip, ip, #139264	; 0x22000
   11394:	ldr	pc, [ip, #3248]!	; 0xcb0

00011398 <memcmp@plt>:
   11398:	add	ip, pc, #0, 12
   1139c:	add	ip, ip, #139264	; 0x22000
   113a0:	ldr	pc, [ip, #3240]!	; 0xca8

000113a4 <fputc_unlocked@plt>:
   113a4:	add	ip, pc, #0, 12
   113a8:	add	ip, ip, #139264	; 0x22000
   113ac:	ldr	pc, [ip, #3232]!	; 0xca0

000113b0 <uname@plt>:
   113b0:	add	ip, pc, #0, 12
   113b4:	add	ip, ip, #139264	; 0x22000
   113b8:	ldr	pc, [ip, #3224]!	; 0xc98

000113bc <dcgettext@plt>:
   113bc:	add	ip, pc, #0, 12
   113c0:	add	ip, ip, #139264	; 0x22000
   113c4:	ldr	pc, [ip, #3216]!	; 0xc90

000113c8 <strdup@plt>:
   113c8:	add	ip, pc, #0, 12
   113cc:	add	ip, ip, #139264	; 0x22000
   113d0:	ldr	pc, [ip, #3208]!	; 0xc88

000113d4 <realloc@plt>:
   113d4:	add	ip, pc, #0, 12
   113d8:	add	ip, ip, #139264	; 0x22000
   113dc:	ldr	pc, [ip, #3200]!	; 0xc80

000113e0 <textdomain@plt>:
   113e0:	add	ip, pc, #0, 12
   113e4:	add	ip, ip, #139264	; 0x22000
   113e8:	ldr	pc, [ip, #3192]!	; 0xc78

000113ec <iswcntrl@plt>:
   113ec:	add	ip, pc, #0, 12
   113f0:	add	ip, ip, #139264	; 0x22000
   113f4:	ldr	pc, [ip, #3184]!	; 0xc70

000113f8 <rawmemchr@plt>:
   113f8:	add	ip, pc, #0, 12
   113fc:	add	ip, ip, #139264	; 0x22000
   11400:	ldr	pc, [ip, #3176]!	; 0xc68

00011404 <chdir@plt>:
   11404:	add	ip, pc, #0, 12
   11408:	add	ip, ip, #139264	; 0x22000
   1140c:	ldr	pc, [ip, #3168]!	; 0xc60

00011410 <iswprint@plt>:
   11410:	add	ip, pc, #0, 12
   11414:	add	ip, ip, #139264	; 0x22000
   11418:	ldr	pc, [ip, #3160]!	; 0xc58

0001141c <__fxstat64@plt>:
   1141c:	add	ip, pc, #0, 12
   11420:	add	ip, ip, #139264	; 0x22000
   11424:	ldr	pc, [ip, #3152]!	; 0xc50

00011428 <readlink@plt>:
   11428:	add	ip, pc, #0, 12
   1142c:	add	ip, ip, #139264	; 0x22000
   11430:	ldr	pc, [ip, #3144]!	; 0xc48

00011434 <__memcpy_chk@plt>:
   11434:	add	ip, pc, #0, 12
   11438:	add	ip, ip, #139264	; 0x22000
   1143c:	ldr	pc, [ip, #3136]!	; 0xc40

00011440 <fwrite@plt>:
   11440:	add	ip, pc, #0, 12
   11444:	add	ip, ip, #139264	; 0x22000
   11448:	ldr	pc, [ip, #3128]!	; 0xc38

0001144c <lseek64@plt>:
   1144c:	add	ip, pc, #0, 12
   11450:	add	ip, ip, #139264	; 0x22000
   11454:	ldr	pc, [ip, #3120]!	; 0xc30

00011458 <__ctype_get_mb_cur_max@plt>:
   11458:	add	ip, pc, #0, 12
   1145c:	add	ip, ip, #139264	; 0x22000
   11460:	ldr	pc, [ip, #3112]!	; 0xc28

00011464 <hasmntopt@plt>:
   11464:	add	ip, pc, #0, 12
   11468:	add	ip, ip, #139264	; 0x22000
   1146c:	ldr	pc, [ip, #3104]!	; 0xc20

00011470 <__fpending@plt>:
   11470:	add	ip, pc, #0, 12
   11474:	add	ip, ip, #139264	; 0x22000
   11478:	ldr	pc, [ip, #3096]!	; 0xc18

0001147c <mbrtowc@plt>:
   1147c:	add	ip, pc, #0, 12
   11480:	add	ip, ip, #139264	; 0x22000
   11484:	ldr	pc, [ip, #3088]!	; 0xc10

00011488 <wcstombs@plt>:
   11488:	add	ip, pc, #0, 12
   1148c:	add	ip, ip, #139264	; 0x22000
   11490:	ldr	pc, [ip, #3080]!	; 0xc08

00011494 <error@plt>:
   11494:	add	ip, pc, #0, 12
   11498:	add	ip, ip, #139264	; 0x22000
   1149c:	ldr	pc, [ip, #3072]!	; 0xc00

000114a0 <getmntent@plt>:
   114a0:	add	ip, pc, #0, 12
   114a4:	add	ip, ip, #139264	; 0x22000
   114a8:	ldr	pc, [ip, #3064]!	; 0xbf8

000114ac <open64@plt>:
   114ac:	add	ip, pc, #0, 12
   114b0:	add	ip, ip, #139264	; 0x22000
   114b4:	ldr	pc, [ip, #3056]!	; 0xbf0

000114b8 <__asprintf_chk@plt>:
   114b8:	add	ip, pc, #0, 12
   114bc:	add	ip, ip, #139264	; 0x22000
   114c0:	ldr	pc, [ip, #3048]!	; 0xbe8

000114c4 <getenv@plt>:
   114c4:	add	ip, pc, #0, 12
   114c8:	add	ip, ip, #139264	; 0x22000
   114cc:	ldr	pc, [ip, #3040]!	; 0xbe0

000114d0 <malloc@plt>:
   114d0:	add	ip, pc, #0, 12
   114d4:	add	ip, ip, #139264	; 0x22000
   114d8:	ldr	pc, [ip, #3032]!	; 0xbd8

000114dc <__libc_start_main@plt>:
   114dc:	add	ip, pc, #0, 12
   114e0:	add	ip, ip, #139264	; 0x22000
   114e4:	ldr	pc, [ip, #3024]!	; 0xbd0

000114e8 <__freading@plt>:
   114e8:	add	ip, pc, #0, 12
   114ec:	add	ip, ip, #139264	; 0x22000
   114f0:	ldr	pc, [ip, #3016]!	; 0xbc8

000114f4 <__gmon_start__@plt>:
   114f4:	add	ip, pc, #0, 12
   114f8:	add	ip, ip, #139264	; 0x22000
   114fc:	ldr	pc, [ip, #3008]!	; 0xbc0

00011500 <mempcpy@plt>:
   11500:	add	ip, pc, #0, 12
   11504:	add	ip, ip, #139264	; 0x22000
   11508:	ldr	pc, [ip, #3000]!	; 0xbb8

0001150c <getopt_long@plt>:
   1150c:	add	ip, pc, #0, 12
   11510:	add	ip, ip, #139264	; 0x22000
   11514:	ldr	pc, [ip, #2992]!	; 0xbb0

00011518 <__ctype_b_loc@plt>:
   11518:	add	ip, pc, #0, 12
   1151c:	add	ip, ip, #139264	; 0x22000
   11520:	ldr	pc, [ip, #2984]!	; 0xba8

00011524 <getcwd@plt>:
   11524:	add	ip, pc, #0, 12
   11528:	add	ip, ip, #139264	; 0x22000
   1152c:	ldr	pc, [ip, #2976]!	; 0xba0

00011530 <exit@plt>:
   11530:	add	ip, pc, #0, 12
   11534:	add	ip, ip, #139264	; 0x22000
   11538:	ldr	pc, [ip, #2968]!	; 0xb98

0001153c <strlen@plt>:
   1153c:	add	ip, pc, #0, 12
   11540:	add	ip, ip, #139264	; 0x22000
   11544:	ldr	pc, [ip, #2960]!	; 0xb90

00011548 <strchr@plt>:
   11548:	add	ip, pc, #0, 12
   1154c:	add	ip, ip, #139264	; 0x22000
   11550:	ldr	pc, [ip, #2952]!	; 0xb88

00011554 <openat64@plt>:
   11554:	add	ip, pc, #0, 12
   11558:	add	ip, ip, #139264	; 0x22000
   1155c:	ldr	pc, [ip, #2944]!	; 0xb80

00011560 <memrchr@plt>:
   11560:	add	ip, pc, #0, 12
   11564:	add	ip, ip, #139264	; 0x22000
   11568:	ldr	pc, [ip, #2936]!	; 0xb78

0001156c <__errno_location@plt>:
   1156c:	add	ip, pc, #0, 12
   11570:	add	ip, ip, #139264	; 0x22000
   11574:	ldr	pc, [ip, #2928]!	; 0xb70

00011578 <__sprintf_chk@plt>:
   11578:	add	ip, pc, #0, 12
   1157c:	add	ip, ip, #139264	; 0x22000
   11580:	ldr	pc, [ip, #2920]!	; 0xb68

00011584 <__cxa_atexit@plt>:
   11584:	add	ip, pc, #0, 12
   11588:	add	ip, ip, #139264	; 0x22000
   1158c:	ldr	pc, [ip, #2912]!	; 0xb60

00011590 <memset@plt>:
   11590:	add	ip, pc, #0, 12
   11594:	add	ip, ip, #139264	; 0x22000
   11598:	ldr	pc, [ip, #2904]!	; 0xb58

0001159c <__printf_chk@plt>:
   1159c:	add	ip, pc, #0, 12
   115a0:	add	ip, ip, #139264	; 0x22000
   115a4:	ldr	pc, [ip, #2896]!	; 0xb50

000115a8 <statvfs64@plt>:
   115a8:	add	ip, pc, #0, 12
   115ac:	add	ip, ip, #139264	; 0x22000
   115b0:	ldr	pc, [ip, #2888]!	; 0xb48

000115b4 <fileno@plt>:
   115b4:	add	ip, pc, #0, 12
   115b8:	add	ip, ip, #139264	; 0x22000
   115bc:	ldr	pc, [ip, #2880]!	; 0xb40

000115c0 <__fprintf_chk@plt>:
   115c0:	add	ip, pc, #0, 12
   115c4:	add	ip, ip, #139264	; 0x22000
   115c8:	ldr	pc, [ip, #2872]!	; 0xb38

000115cc <memchr@plt>:
   115cc:	add	ip, pc, #0, 12
   115d0:	add	ip, ip, #139264	; 0x22000
   115d4:	ldr	pc, [ip, #2864]!	; 0xb30

000115d8 <fclose@plt>:
   115d8:	add	ip, pc, #0, 12
   115dc:	add	ip, ip, #139264	; 0x22000
   115e0:	ldr	pc, [ip, #2856]!	; 0xb28

000115e4 <fseeko64@plt>:
   115e4:	add	ip, pc, #0, 12
   115e8:	add	ip, ip, #139264	; 0x22000
   115ec:	ldr	pc, [ip, #2848]!	; 0xb20

000115f0 <endmntent@plt>:
   115f0:	add	ip, pc, #0, 12
   115f4:	add	ip, ip, #139264	; 0x22000
   115f8:	ldr	pc, [ip, #2840]!	; 0xb18

000115fc <fcntl64@plt>:
   115fc:	add	ip, pc, #0, 12
   11600:	add	ip, ip, #139264	; 0x22000
   11604:	ldr	pc, [ip, #2832]!	; 0xb10

00011608 <__overflow@plt>:
   11608:	add	ip, pc, #0, 12
   1160c:	add	ip, ip, #139264	; 0x22000
   11610:	ldr	pc, [ip, #2824]!	; 0xb08

00011614 <setlocale@plt>:
   11614:	add	ip, pc, #0, 12
   11618:	add	ip, ip, #139264	; 0x22000
   1161c:	ldr	pc, [ip, #2816]!	; 0xb00

00011620 <wcswidth@plt>:
   11620:	add	ip, pc, #0, 12
   11624:	add	ip, ip, #139264	; 0x22000
   11628:	ldr	pc, [ip, #2808]!	; 0xaf8

0001162c <strrchr@plt>:
   1162c:	add	ip, pc, #0, 12
   11630:	add	ip, ip, #139264	; 0x22000
   11634:	ldr	pc, [ip, #2800]!	; 0xaf0

00011638 <statfs64@plt>:
   11638:	add	ip, pc, #0, 12
   1163c:	add	ip, ip, #139264	; 0x22000
   11640:	ldr	pc, [ip, #2792]!	; 0xae8

00011644 <nl_langinfo@plt>:
   11644:	add	ip, pc, #0, 12
   11648:	add	ip, ip, #139264	; 0x22000
   1164c:	ldr	pc, [ip, #2784]!	; 0xae0

00011650 <sscanf@plt>:
   11650:	add	ip, pc, #0, 12
   11654:	add	ip, ip, #139264	; 0x22000
   11658:	ldr	pc, [ip, #2776]!	; 0xad8

0001165c <localeconv@plt>:
   1165c:	add	ip, pc, #0, 12
   11660:	add	ip, ip, #139264	; 0x22000
   11664:	ldr	pc, [ip, #2768]!	; 0xad0

00011668 <mbstowcs@plt>:
   11668:	add	ip, pc, #0, 12
   1166c:	add	ip, ip, #139264	; 0x22000
   11670:	ldr	pc, [ip, #2760]!	; 0xac8

00011674 <fchdir@plt>:
   11674:	add	ip, pc, #0, 12
   11678:	add	ip, ip, #139264	; 0x22000
   1167c:	ldr	pc, [ip, #2752]!	; 0xac0

00011680 <canonicalize_file_name@plt>:
   11680:	add	ip, pc, #0, 12
   11684:	add	ip, ip, #139264	; 0x22000
   11688:	ldr	pc, [ip, #2744]!	; 0xab8

0001168c <fopen64@plt>:
   1168c:	add	ip, pc, #0, 12
   11690:	add	ip, ip, #139264	; 0x22000
   11694:	ldr	pc, [ip, #2736]!	; 0xab0

00011698 <setmntent@plt>:
   11698:	add	ip, pc, #0, 12
   1169c:	add	ip, ip, #139264	; 0x22000
   116a0:	ldr	pc, [ip, #2728]!	; 0xaa8

000116a4 <bindtextdomain@plt>:
   116a4:	add	ip, pc, #0, 12
   116a8:	add	ip, ip, #139264	; 0x22000
   116ac:	ldr	pc, [ip, #2720]!	; 0xaa0

000116b0 <sync@plt>:
   116b0:	add	ip, pc, #0, 12
   116b4:	add	ip, ip, #139264	; 0x22000
   116b8:	ldr	pc, [ip, #2712]!	; 0xa98

000116bc <__xstat64@plt>:
   116bc:	add	ip, pc, #0, 12
   116c0:	add	ip, ip, #139264	; 0x22000
   116c4:	ldr	pc, [ip, #2704]!	; 0xa90

000116c8 <isatty@plt>:
   116c8:	add	ip, pc, #0, 12
   116cc:	add	ip, ip, #139264	; 0x22000
   116d0:	ldr	pc, [ip, #2696]!	; 0xa88

000116d4 <strncmp@plt>:
   116d4:	add	ip, pc, #0, 12
   116d8:	add	ip, ip, #139264	; 0x22000
   116dc:	ldr	pc, [ip, #2688]!	; 0xa80

000116e0 <abort@plt>:
   116e0:	add	ip, pc, #0, 12
   116e4:	add	ip, ip, #139264	; 0x22000
   116e8:	ldr	pc, [ip, #2680]!	; 0xa78

000116ec <close@plt>:
   116ec:	add	ip, pc, #0, 12
   116f0:	add	ip, ip, #139264	; 0x22000
   116f4:	ldr	pc, [ip, #2672]!	; 0xa70

000116f8 <strspn@plt>:
   116f8:	add	ip, pc, #0, 12
   116fc:	add	ip, ip, #139264	; 0x22000
   11700:	ldr	pc, [ip, #2664]!	; 0xa68

00011704 <__assert_fail@plt>:
   11704:	add	ip, pc, #0, 12
   11708:	add	ip, ip, #139264	; 0x22000
   1170c:	ldr	pc, [ip, #2656]!	; 0xa60

Disassembly of section .text:

00011710 <.text>:
   11710:	push	{r4, lr}
   11714:	ldr	r3, [pc, #12]	; 11728 <__assert_fail@plt+0x24>
   11718:	ldr	r2, [pc, #12]	; 1172c <__assert_fail@plt+0x28>
   1171c:	ldr	r1, [pc, #12]	; 11730 <__assert_fail@plt+0x2c>
   11720:	ldr	r0, [pc, #12]	; 11734 <__assert_fail@plt+0x30>
   11724:	bl	11704 <__assert_fail@plt>
   11728:	andeq	r1, r2, r8, asr #18
   1172c:	andeq	r0, r0, r9, lsr #3
   11730:			; <UNDEFINED> instruction: 0x00021ab4
   11734:	andeq	r1, r2, r0, asr #21
   11738:	push	{r4, lr}
   1173c:	mov	r2, #64	; 0x40
   11740:	ldr	r3, [pc, #8]	; 11750 <__assert_fail@plt+0x4c>
   11744:	ldr	r1, [pc, #8]	; 11754 <__assert_fail@plt+0x50>
   11748:	ldr	r0, [pc, #8]	; 11758 <__assert_fail@plt+0x54>
   1174c:	bl	11704 <__assert_fail@plt>
   11750:	andeq	r3, r2, r8, ror #2
   11754:	andeq	r3, r2, r0, lsl #3
   11758:	muleq	r2, r4, r1
   1175c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11760:	sub	sp, sp, #180	; 0xb4
   11764:	ldr	r9, [pc, #4036]	; 12730 <__assert_fail@plt+0x102c>
   11768:	str	r0, [sp, #24]
   1176c:	ldr	r0, [r1]
   11770:	str	r1, [sp, #28]
   11774:	bl	1936c <__assert_fail@plt+0x7c68>
   11778:	ldr	r1, [pc, #4020]	; 12734 <__assert_fail@plt+0x1030>
   1177c:	mov	r0, #6
   11780:	bl	11614 <setlocale@plt>
   11784:	ldr	r1, [pc, #4012]	; 12738 <__assert_fail@plt+0x1034>
   11788:	ldr	r0, [pc, #4012]	; 1273c <__assert_fail@plt+0x1038>
   1178c:	bl	116a4 <bindtextdomain@plt>
   11790:	ldr	r0, [pc, #4004]	; 1273c <__assert_fail@plt+0x1038>
   11794:	bl	113e0 <textdomain@plt>
   11798:	mov	sl, #1
   1179c:	ldr	r0, [pc, #3996]	; 12740 <__assert_fail@plt+0x103c>
   117a0:	mov	fp, #0
   117a4:	bl	21924 <__assert_fail@plt+0x10220>
   117a8:	mov	r0, #0
   117ac:	mvn	r3, #0
   117b0:	mov	r2, #5
   117b4:	ldr	r1, [pc, #3976]	; 12744 <__assert_fail@plt+0x1040>
   117b8:	strd	sl, [r9, #56]	; 0x38
   117bc:	str	r3, [r9, #24]
   117c0:	str	r0, [r9, #44]	; 0x2c
   117c4:	str	r0, [r9, #112]	; 0x70
   117c8:	strb	r0, [r9, #41]	; 0x29
   117cc:	strb	r0, [r9, #42]	; 0x2a
   117d0:	strb	r0, [r9, #116]	; 0x74
   117d4:	strb	r0, [r9, #52]	; 0x34
   117d8:	str	r0, [r9, #48]	; 0x30
   117dc:	strb	r0, [r9, #53]	; 0x35
   117e0:	mov	r8, r0
   117e4:	bl	113bc <dcgettext@plt>
   117e8:	ldr	r5, [pc, #3928]	; 12748 <__assert_fail@plt+0x1044>
   117ec:	ldr	r4, [pc, #3928]	; 1274c <__assert_fail@plt+0x1048>
   117f0:	ldr	r6, [pc, #3928]	; 12750 <__assert_fail@plt+0x104c>
   117f4:	ldr	r7, [pc, #3928]	; 12754 <__assert_fail@plt+0x1050>
   117f8:	mov	sl, r0
   117fc:	add	r3, sp, #72	; 0x48
   11800:	str	r3, [sp]
   11804:	mvn	ip, #0
   11808:	mov	r3, r5
   1180c:	mov	r2, r4
   11810:	ldr	r1, [sp, #28]
   11814:	ldr	r0, [sp, #24]
   11818:	str	ip, [sp, #72]	; 0x48
   1181c:	bl	1150c <getopt_long@plt>
   11820:	cmn	r0, #1
   11824:	mov	fp, r0
   11828:	beq	11ad8 <__assert_fail@plt+0x3d4>
   1182c:	cmp	r0, #105	; 0x69
   11830:	beq	11a74 <__assert_fail@plt+0x370>
   11834:	bgt	11878 <__assert_fail@plt+0x174>
   11838:	cmp	r0, #72	; 0x48
   1183c:	beq	11a5c <__assert_fail@plt+0x358>
   11840:	ble	118b0 <__assert_fail@plt+0x1ac>
   11844:	cmp	r0, #84	; 0x54
   11848:	beq	11a44 <__assert_fail@plt+0x340>
   1184c:	ble	11a1c <__assert_fail@plt+0x318>
   11850:	cmp	r0, #97	; 0x61
   11854:	beq	11a04 <__assert_fail@plt+0x300>
   11858:	cmp	r0, #104	; 0x68
   1185c:	bne	11aa8 <__assert_fail@plt+0x3a4>
   11860:	mov	r0, #1
   11864:	mov	r1, #0
   11868:	mov	r3, #176	; 0xb0
   1186c:	strd	r0, [r9, #32]
   11870:	str	r3, [r9, #24]
   11874:	b	117fc <__assert_fail@plt+0xf8>
   11878:	cmp	r0, #118	; 0x76
   1187c:	beq	117fc <__assert_fail@plt+0xf8>
   11880:	ble	118f4 <__assert_fail@plt+0x1f0>
   11884:	ldr	r3, [pc, #3788]	; 12758 <__assert_fail@plt+0x1054>
   11888:	cmp	r0, r3
   1188c:	beq	11a8c <__assert_fail@plt+0x388>
   11890:	bgt	11920 <__assert_fail@plt+0x21c>
   11894:	cmp	r0, #120	; 0x78
   11898:	beq	119e4 <__assert_fail@plt+0x2e0>
   1189c:	cmp	r0, #256	; 0x100
   118a0:	bne	11aa8 <__assert_fail@plt+0x3a4>
   118a4:	mov	r3, #0
   118a8:	strb	r3, [r9, #117]	; 0x75
   118ac:	b	117fc <__assert_fail@plt+0xf8>
   118b0:	cmn	r0, #2
   118b4:	beq	11a98 <__assert_fail@plt+0x394>
   118b8:	ble	1197c <__assert_fail@plt+0x278>
   118bc:	cmp	r0, #66	; 0x42
   118c0:	bne	11aa0 <__assert_fail@plt+0x39c>
   118c4:	ldr	r2, [pc, #3728]	; 1275c <__assert_fail@plt+0x1058>
   118c8:	ldr	r0, [r6]
   118cc:	sub	r1, r2, #8
   118d0:	bl	17c58 <__assert_fail@plt+0x6554>
   118d4:	cmp	r0, #0
   118d8:	beq	117fc <__assert_fail@plt+0xf8>
   118dc:	ldr	r3, [r6]
   118e0:	mov	r2, fp
   118e4:	str	r3, [sp]
   118e8:	ldr	r1, [sp, #72]	; 0x48
   118ec:	ldr	r3, [pc, #3668]	; 12748 <__assert_fail@plt+0x1044>
   118f0:	bl	1e6a0 <__assert_fail@plt+0xcf9c>
   118f4:	cmp	r0, #108	; 0x6c
   118f8:	beq	11a38 <__assert_fail@plt+0x334>
   118fc:	ble	119c4 <__assert_fail@plt+0x2c0>
   11900:	cmp	r0, #109	; 0x6d
   11904:	bne	11ab0 <__assert_fail@plt+0x3ac>
   11908:	mov	r0, #1048576	; 0x100000
   1190c:	mov	r1, #0
   11910:	mov	r3, #0
   11914:	strd	r0, [r9, #32]
   11918:	str	r3, [r9, #24]
   1191c:	b	117fc <__assert_fail@plt+0xf8>
   11920:	cmp	r0, r7
   11924:	beq	11a10 <__assert_fail@plt+0x30c>
   11928:	ldr	r3, [pc, #3632]	; 12760 <__assert_fail@plt+0x105c>
   1192c:	cmp	r0, r3
   11930:	bne	11aa8 <__assert_fail@plt+0x3a4>
   11934:	ldr	r3, [r9, #20]
   11938:	cmp	r3, #1
   1193c:	beq	12b70 <__assert_fail@plt+0x146c>
   11940:	cmp	r3, #0
   11944:	movne	r1, #0
   11948:	andeq	r1, r8, #1
   1194c:	cmp	r1, #0
   11950:	bne	12b2c <__assert_fail@plt+0x1428>
   11954:	ldrb	r3, [r9, #116]	; 0x74
   11958:	cmp	r3, #0
   1195c:	bne	12b50 <__assert_fail@plt+0x144c>
   11960:	ldr	r0, [r6]
   11964:	mov	r3, #4
   11968:	cmp	r0, #0
   1196c:	str	r3, [r9, #20]
   11970:	beq	117fc <__assert_fail@plt+0xf8>
   11974:	bl	14308 <__assert_fail@plt+0x2c04>
   11978:	b	117fc <__assert_fail@plt+0xf8>
   1197c:	cmn	r0, #3
   11980:	bne	11aa8 <__assert_fail@plt+0x3a4>
   11984:	ldr	ip, [pc, #3544]	; 12764 <__assert_fail@plt+0x1060>
   11988:	ldr	r1, [pc, #3544]	; 12768 <__assert_fail@plt+0x1064>
   1198c:	ldr	r3, [pc, #3544]	; 1276c <__assert_fail@plt+0x1068>
   11990:	ldr	r0, [pc, #3680]	; 127f8 <__assert_fail@plt+0x10f4>
   11994:	ldr	r2, [pc, #3540]	; 12770 <__assert_fail@plt+0x106c>
   11998:	mov	r4, #0
   1199c:	ldr	r0, [r0]
   119a0:	ldr	r3, [r3]
   119a4:	stmib	sp, {r1, ip}
   119a8:	str	r2, [sp]
   119ac:	str	r4, [sp, #12]
   119b0:	ldr	r2, [pc, #3516]	; 12774 <__assert_fail@plt+0x1070>
   119b4:	ldr	r1, [pc, #3516]	; 12778 <__assert_fail@plt+0x1074>
   119b8:	bl	1ddfc <__assert_fail@plt+0xc6f8>
   119bc:	mov	r0, r4
   119c0:	bl	11530 <exit@plt>
   119c4:	cmp	r0, #107	; 0x6b
   119c8:	bne	11aa8 <__assert_fail@plt+0x3a4>
   119cc:	mov	r0, #1024	; 0x400
   119d0:	mov	r1, #0
   119d4:	mov	r3, #0
   119d8:	strd	r0, [r9, #32]
   119dc:	str	r3, [r9, #24]
   119e0:	b	117fc <__assert_fail@plt+0xf8>
   119e4:	mov	r0, #8
   119e8:	ldr	fp, [r6]
   119ec:	bl	1dfe4 <__assert_fail@plt+0xc8e0>
   119f0:	ldr	r3, [r9, #112]	; 0x70
   119f4:	str	fp, [r0]
   119f8:	str	r3, [r0, #4]
   119fc:	str	r0, [r9, #112]	; 0x70
   11a00:	b	117fc <__assert_fail@plt+0xf8>
   11a04:	mov	r3, #1
   11a08:	strb	r3, [r9, #41]	; 0x29
   11a0c:	b	117fc <__assert_fail@plt+0xf8>
   11a10:	mov	r3, #1
   11a14:	strb	r3, [r9, #53]	; 0x35
   11a18:	b	117fc <__assert_fail@plt+0xf8>
   11a1c:	cmp	r0, #80	; 0x50
   11a20:	bne	11aa8 <__assert_fail@plt+0x3a4>
   11a24:	ldr	r3, [r9, #20]
   11a28:	cmp	r3, #4
   11a2c:	beq	12b2c <__assert_fail@plt+0x1428>
   11a30:	mov	r8, #1
   11a34:	b	117fc <__assert_fail@plt+0xf8>
   11a38:	mov	r3, #1
   11a3c:	strb	r3, [r9, #40]	; 0x28
   11a40:	b	117fc <__assert_fail@plt+0xf8>
   11a44:	ldr	r3, [r9, #20]
   11a48:	cmp	r3, #4
   11a4c:	beq	12ad8 <__assert_fail@plt+0x13d4>
   11a50:	mov	r3, #1
   11a54:	strb	r3, [r9, #116]	; 0x74
   11a58:	b	117fc <__assert_fail@plt+0xf8>
   11a5c:	mov	r0, #1
   11a60:	mov	r1, #0
   11a64:	mov	r3, #144	; 0x90
   11a68:	strd	r0, [r9, #32]
   11a6c:	str	r3, [r9, #24]
   11a70:	b	117fc <__assert_fail@plt+0xf8>
   11a74:	ldr	r3, [r9, #20]
   11a78:	cmp	r3, #4
   11a7c:	beq	12b70 <__assert_fail@plt+0x146c>
   11a80:	mov	r3, #1
   11a84:	str	r3, [r9, #20]
   11a88:	b	117fc <__assert_fail@plt+0xf8>
   11a8c:	mov	r3, #1
   11a90:	strb	r3, [r9, #117]	; 0x75
   11a94:	b	117fc <__assert_fail@plt+0xf8>
   11a98:	mov	r0, #0
   11a9c:	bl	13f38 <__assert_fail@plt+0x2834>
   11aa0:	cmp	r0, #70	; 0x46
   11aa4:	beq	11ab8 <__assert_fail@plt+0x3b4>
   11aa8:	mov	r0, #1
   11aac:	bl	13f38 <__assert_fail@plt+0x2834>
   11ab0:	cmp	r0, #116	; 0x74
   11ab4:	bne	11aa8 <__assert_fail@plt+0x3a4>
   11ab8:	mov	r0, #8
   11abc:	ldr	fp, [r6]
   11ac0:	bl	1dfe4 <__assert_fail@plt+0xc8e0>
   11ac4:	ldr	r3, [r9, #44]	; 0x2c
   11ac8:	str	fp, [r0]
   11acc:	str	r3, [r0, #4]
   11ad0:	str	r0, [r9, #44]	; 0x2c
   11ad4:	b	117fc <__assert_fail@plt+0xf8>
   11ad8:	ldr	r3, [r9, #24]
   11adc:	cmn	r3, #1
   11ae0:	beq	125cc <__assert_fail@plt+0xec8>
   11ae4:	ldr	r3, [r9, #20]
   11ae8:	cmp	r3, #4
   11aec:	cmpne	r3, #1
   11af0:	beq	11b08 <__assert_fail@plt+0x404>
   11af4:	ldr	r3, [r9, #24]
   11af8:	tst	r3, #16
   11afc:	movne	r3, #2
   11b00:	strne	r3, [r9, #20]
   11b04:	beq	11c14 <__assert_fail@plt+0x510>
   11b08:	ldr	r6, [r9, #44]	; 0x2c
   11b0c:	cmp	r6, #0
   11b10:	beq	11ba4 <__assert_fail@plt+0x4a0>
   11b14:	mov	r7, #0
   11b18:	ldr	fp, [pc, #3164]	; 1277c <__assert_fail@plt+0x1078>
   11b1c:	mov	sl, r7
   11b20:	ldr	r4, [r9, #112]	; 0x70
   11b24:	cmp	r4, #0
   11b28:	beq	11b84 <__assert_fail@plt+0x480>
   11b2c:	ldr	r5, [r6]
   11b30:	b	11b40 <__assert_fail@plt+0x43c>
   11b34:	ldr	r4, [r4, #4]
   11b38:	cmp	r4, #0
   11b3c:	beq	11b84 <__assert_fail@plt+0x480>
   11b40:	ldr	r1, [r4]
   11b44:	mov	r0, r5
   11b48:	bl	11320 <strcmp@plt>
   11b4c:	subs	r8, r0, #0
   11b50:	bne	11b34 <__assert_fail@plt+0x430>
   11b54:	mov	r2, #5
   11b58:	mov	r1, fp
   11b5c:	bl	113bc <dcgettext@plt>
   11b60:	mov	r7, #1
   11b64:	mov	r4, r0
   11b68:	ldr	r0, [r6]
   11b6c:	bl	1d238 <__assert_fail@plt+0xbb34>
   11b70:	mov	r2, r4
   11b74:	mov	r1, sl
   11b78:	mov	r3, r0
   11b7c:	mov	r0, r8
   11b80:	bl	11494 <error@plt>
   11b84:	ldr	r6, [r6, #4]
   11b88:	cmp	r6, #0
   11b8c:	bne	11b20 <__assert_fail@plt+0x41c>
   11b90:	cmp	r7, #0
   11b94:	beq	11ba4 <__assert_fail@plt+0x4a0>
   11b98:	mov	r0, #1
   11b9c:	add	sp, sp, #180	; 0xb4
   11ba0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11ba4:	ldr	r3, [pc, #3028]	; 12780 <__assert_fail@plt+0x107c>
   11ba8:	ldr	r0, [r3]
   11bac:	ldr	r3, [sp, #24]
   11bb0:	cmp	r3, r0
   11bb4:	movle	r3, #0
   11bb8:	strle	r3, [sp, #64]	; 0x40
   11bbc:	bgt	11c2c <__assert_fail@plt+0x528>
   11bc0:	ldr	r3, [r9, #44]	; 0x2c
   11bc4:	cmp	r3, #0
   11bc8:	beq	12700 <__assert_fail@plt+0xffc>
   11bcc:	mov	r0, #1
   11bd0:	and	r0, r0, #1
   11bd4:	bl	189d8 <__assert_fail@plt+0x72d4>
   11bd8:	cmp	r0, #0
   11bdc:	str	r0, [r9, #120]	; 0x78
   11be0:	beq	1268c <__assert_fail@plt+0xf88>
   11be4:	ldrb	r3, [r9, #117]	; 0x75
   11be8:	cmp	r3, #0
   11bec:	bne	11c24 <__assert_fail@plt+0x520>
   11bf0:	ldr	r3, [r9, #20]
   11bf4:	cmp	r3, #4
   11bf8:	ldrls	pc, [pc, r3, lsl #2]
   11bfc:	b	12658 <__assert_fail@plt+0xf54>
   11c00:	andeq	r2, r1, ip, ror r0
   11c04:	andeq	r2, r1, r4, lsr r0
   11c08:	andeq	r1, r1, ip, lsr #26
   11c0c:	ldrdeq	r2, [r1], -ip
   11c10:	andeq	r2, r1, r4, asr #1
   11c14:	cmp	r8, #0
   11c18:	movne	r3, #3
   11c1c:	strne	r3, [r9, #20]
   11c20:	b	11b08 <__assert_fail@plt+0x404>
   11c24:	bl	116b0 <sync@plt>
   11c28:	b	11bf0 <__assert_fail@plt+0x4ec>
   11c2c:	sub	r0, r3, r0
   11c30:	mov	r1, #104	; 0x68
   11c34:	bl	1e0c8 <__assert_fail@plt+0xc9c4>
   11c38:	ldr	r3, [pc, #2880]	; 12780 <__assert_fail@plt+0x107c>
   11c3c:	mov	sl, #104	; 0x68
   11c40:	ldr	r5, [r3]
   11c44:	ldr	r3, [sp, #28]
   11c48:	add	r6, r3, r5, lsl #2
   11c4c:	str	r0, [sp, #64]	; 0x40
   11c50:	b	11cbc <__assert_fail@plt+0x5b8>
   11c54:	mov	r2, r4
   11c58:	mov	r1, fp
   11c5c:	mov	r0, #3
   11c60:	bl	1141c <__fxstat64@plt>
   11c64:	cmp	r0, #0
   11c68:	beq	122c4 <__assert_fail@plt+0xbc0>
   11c6c:	bl	1156c <__errno_location@plt>
   11c70:	ldr	r7, [r0]
   11c74:	mov	r0, fp
   11c78:	bl	116ec <close@plt>
   11c7c:	cmp	r7, #0
   11c80:	beq	11cb8 <__assert_fail@plt+0x5b4>
   11c84:	ldr	r2, [r6, #-4]
   11c88:	mov	r1, #3
   11c8c:	mov	r0, #0
   11c90:	bl	1c344 <__assert_fail@plt+0xac40>
   11c94:	ldr	r2, [pc, #2868]	; 127d0 <__assert_fail@plt+0x10cc>
   11c98:	mov	r1, r7
   11c9c:	mov	r3, r0
   11ca0:	mov	r0, #0
   11ca4:	bl	11494 <error@plt>
   11ca8:	mov	r3, #0
   11cac:	mov	r2, #1
   11cb0:	str	r2, [r9, #48]	; 0x30
   11cb4:	str	r3, [r6, #-4]
   11cb8:	add	r5, r5, #1
   11cbc:	ldr	r3, [sp, #24]
   11cc0:	cmp	r5, r3
   11cc4:	bge	11bc0 <__assert_fail@plt+0x4bc>
   11cc8:	ldr	r3, [pc, #2736]	; 12780 <__assert_fail@plt+0x107c>
   11ccc:	ldr	r8, [r6], #4
   11cd0:	mov	r1, #2304	; 0x900
   11cd4:	ldr	r4, [r3]
   11cd8:	ldr	r3, [sp, #64]	; 0x40
   11cdc:	sub	r4, r5, r4
   11ce0:	mov	r0, r8
   11ce4:	mla	r4, sl, r4, r3
   11ce8:	bl	114ac <open64@plt>
   11cec:	subs	fp, r0, #0
   11cf0:	bge	11c54 <__assert_fail@plt+0x550>
   11cf4:	bl	1156c <__errno_location@plt>
   11cf8:	ldr	r7, [r0]
   11cfc:	mov	fp, r0
   11d00:	cmp	r7, #20
   11d04:	cmpne	r7, #2
   11d08:	beq	11c7c <__assert_fail@plt+0x578>
   11d0c:	mov	r2, r4
   11d10:	mov	r1, r8
   11d14:	mov	r0, #3
   11d18:	bl	116bc <__xstat64@plt>
   11d1c:	cmp	r0, #0
   11d20:	ldrne	r7, [fp]
   11d24:	bne	11c7c <__assert_fail@plt+0x578>
   11d28:	b	11cb8 <__assert_fail@plt+0x5b4>
   11d2c:	mov	r0, #0
   11d30:	bl	12fa4 <__assert_fail@plt+0x18a0>
   11d34:	ldrb	r3, [r9, #116]	; 0x74
   11d38:	cmp	r3, #0
   11d3c:	beq	11d48 <__assert_fail@plt+0x644>
   11d40:	mov	r0, #1
   11d44:	bl	12fa4 <__assert_fail@plt+0x18a0>
   11d48:	ldr	r3, [r9, #4]
   11d4c:	mov	r2, #4
   11d50:	add	r3, r3, #1
   11d54:	mov	r1, r3
   11d58:	ldr	r0, [r9, #8]
   11d5c:	str	r3, [r9, #4]
   11d60:	bl	1e070 <__assert_fail@plt+0xc96c>
   11d64:	ldr	r4, [pc, #2684]	; 127e8 <__assert_fail@plt+0x10e4>
   11d68:	ldr	r3, [r9, #4]
   11d6c:	add	r1, r4, #56	; 0x38
   11d70:	ldrb	r2, [r4, #80]	; 0x50
   11d74:	sub	r3, r3, #-1073741823	; 0xc0000001
   11d78:	cmp	r2, #0
   11d7c:	ldr	r2, [pc, #2560]	; 12784 <__assert_fail@plt+0x1080>
   11d80:	str	r1, [r0, r3, lsl #2]
   11d84:	str	r0, [r9, #8]
   11d88:	str	r2, [r4, #68]	; 0x44
   11d8c:	bne	12b28 <__assert_fail@plt+0x1424>
   11d90:	mov	r5, #1
   11d94:	mov	r0, #3
   11d98:	strb	r5, [r4, #80]	; 0x50
   11d9c:	bl	12fa4 <__assert_fail@plt+0x18a0>
   11da0:	ldr	r3, [r9, #4]
   11da4:	mov	r2, #4
   11da8:	add	r3, r3, r5
   11dac:	mov	r1, r3
   11db0:	ldr	r0, [r9, #8]
   11db4:	str	r3, [r9, #4]
   11db8:	bl	1e070 <__assert_fail@plt+0xc96c>
   11dbc:	ldrb	r2, [r4, #136]	; 0x88
   11dc0:	ldr	r3, [r9, #4]
   11dc4:	add	r1, r4, #112	; 0x70
   11dc8:	sub	r3, r3, #-1073741823	; 0xc0000001
   11dcc:	cmp	r2, #0
   11dd0:	ldr	r2, [pc, #2480]	; 12788 <__assert_fail@plt+0x1084>
   11dd4:	str	r1, [r0, r3, lsl #2]
   11dd8:	str	r0, [r9, #8]
   11ddc:	str	r2, [r4, #124]	; 0x7c
   11de0:	bne	12b28 <__assert_fail@plt+0x1424>
   11de4:	mov	r0, #5
   11de8:	strb	r5, [r4, #136]	; 0x88
   11dec:	bl	12fa4 <__assert_fail@plt+0x18a0>
   11df0:	mov	r0, #10
   11df4:	bl	12fa4 <__assert_fail@plt+0x18a0>
   11df8:	bl	1300c <__assert_fail@plt+0x1908>
   11dfc:	ldr	r3, [sp, #64]	; 0x40
   11e00:	cmp	r3, #0
   11e04:	beq	12808 <__assert_fail@plt+0x1104>
   11e08:	mov	r3, #1
   11e0c:	strb	r3, [r9, #42]	; 0x2a
   11e10:	ldr	r3, [pc, #2408]	; 12780 <__assert_fail@plt+0x107c>
   11e14:	ldr	r3, [r3]
   11e18:	str	r3, [sp, #40]	; 0x28
   11e1c:	ldr	r3, [sp, #40]	; 0x28
   11e20:	ldr	r2, [sp, #24]
   11e24:	cmp	r3, r2
   11e28:	bge	1252c <__assert_fail@plt+0xe28>
   11e2c:	ldr	r1, [sp, #28]
   11e30:	ldr	r2, [sp, #40]	; 0x28
   11e34:	ldr	r3, [r1, r2, lsl #2]
   11e38:	cmp	r3, #0
   11e3c:	mov	fp, r3
   11e40:	str	r3, [sp, #48]	; 0x30
   11e44:	beq	12024 <__assert_fail@plt+0x920>
   11e48:	ldr	r3, [pc, #2352]	; 12780 <__assert_fail@plt+0x107c>
   11e4c:	ldr	r1, [sp, #64]	; 0x40
   11e50:	ldr	r3, [r3]
   11e54:	sub	r3, r2, r3
   11e58:	mov	r2, #104	; 0x68
   11e5c:	mla	r3, r2, r3, r1
   11e60:	str	r3, [sp, #52]	; 0x34
   11e64:	ldr	r3, [r3, #16]
   11e68:	and	r3, r3, #45056	; 0xb000
   11e6c:	cmp	r3, #8192	; 0x2000
   11e70:	bne	121dc <__assert_fail@plt+0xad8>
   11e74:	mov	r0, fp
   11e78:	bl	11680 <canonicalize_file_name@plt>
   11e7c:	subs	r3, r0, #0
   11e80:	mov	r2, r3
   11e84:	str	r3, [sp, #68]	; 0x44
   11e88:	ldreq	fp, [sp, #48]	; 0x30
   11e8c:	beq	11e9c <__assert_fail@plt+0x798>
   11e90:	ldrb	r3, [r3]
   11e94:	cmp	r3, #47	; 0x2f
   11e98:	moveq	fp, r2
   11e9c:	ldr	r5, [r9, #120]	; 0x78
   11ea0:	cmp	r5, #0
   11ea4:	beq	121d4 <__assert_fail@plt+0xad0>
   11ea8:	mov	r3, #0
   11eac:	str	r3, [sp, #32]
   11eb0:	str	r3, [sp, #60]	; 0x3c
   11eb4:	str	r3, [sp, #36]	; 0x24
   11eb8:	mvn	r3, #0
   11ebc:	str	r3, [sp, #44]	; 0x2c
   11ec0:	ldr	r8, [r5]
   11ec4:	mov	r0, r8
   11ec8:	bl	11680 <canonicalize_file_name@plt>
   11ecc:	subs	r6, r0, #0
   11ed0:	beq	11ee0 <__assert_fail@plt+0x7dc>
   11ed4:	ldrb	r3, [r6]
   11ed8:	cmp	r3, #47	; 0x2f
   11edc:	moveq	r8, r6
   11ee0:	mov	r1, r8
   11ee4:	mov	r0, fp
   11ee8:	bl	11320 <strcmp@plt>
   11eec:	subs	sl, r0, #0
   11ef0:	bne	11fb8 <__assert_fail@plt+0x8b4>
   11ef4:	ldr	r7, [r9, #120]	; 0x78
   11ef8:	ldr	r4, [r5, #4]
   11efc:	cmp	r7, #0
   11f00:	beq	122bc <__assert_fail@plt+0xbb8>
   11f04:	ldr	r0, [r7, #4]
   11f08:	mov	r1, r4
   11f0c:	bl	11320 <strcmp@plt>
   11f10:	cmp	r0, #0
   11f14:	moveq	sl, r7
   11f18:	ldr	r7, [r7, #28]
   11f1c:	cmp	r7, #0
   11f20:	bne	11f04 <__assert_fail@plt+0x800>
   11f24:	cmp	sl, #0
   11f28:	beq	122bc <__assert_fail@plt+0xbb8>
   11f2c:	ldr	r0, [sl]
   11f30:	bl	11680 <canonicalize_file_name@plt>
   11f34:	subs	r7, r0, #0
   11f38:	beq	11f48 <__assert_fail@plt+0x844>
   11f3c:	ldrb	r3, [r7]
   11f40:	cmp	r3, #47	; 0x2f
   11f44:	beq	11f5c <__assert_fail@plt+0x858>
   11f48:	mov	r0, r7
   11f4c:	bl	15334 <__assert_fail@plt+0x3c30>
   11f50:	ldr	r0, [sl]
   11f54:	bl	1e5f4 <__assert_fail@plt+0xcef0>
   11f58:	mov	r7, r0
   11f5c:	mov	r1, r8
   11f60:	mov	r0, r7
   11f64:	bl	11320 <strcmp@plt>
   11f68:	cmp	r0, #0
   11f6c:	bne	1216c <__assert_fail@plt+0xa68>
   11f70:	ldr	r4, [r5, #4]
   11f74:	mov	r0, r4
   11f78:	bl	1153c <strlen@plt>
   11f7c:	ldr	r2, [sp, #36]	; 0x24
   11f80:	eor	r8, r2, #1
   11f84:	ldr	r2, [sp, #44]	; 0x2c
   11f88:	uxtb	r8, r8
   11f8c:	cmp	r0, r2
   11f90:	movcs	sl, #0
   11f94:	movcc	sl, #1
   11f98:	orrs	r2, r8, sl
   11f9c:	mov	r3, r0
   11fa0:	str	r2, [sp, #32]
   11fa4:	bne	12178 <__assert_fail@plt+0xa74>
   11fa8:	mov	r3, #1
   11fac:	str	r3, [sp, #36]	; 0x24
   11fb0:	mov	r0, r7
   11fb4:	bl	15334 <__assert_fail@plt+0x3c30>
   11fb8:	mov	r0, r6
   11fbc:	bl	15334 <__assert_fail@plt+0x3c30>
   11fc0:	ldr	r5, [r5, #28]
   11fc4:	cmp	r5, #0
   11fc8:	bne	11ec0 <__assert_fail@plt+0x7bc>
   11fcc:	ldr	r0, [sp, #68]	; 0x44
   11fd0:	bl	15334 <__assert_fail@plt+0x3c30>
   11fd4:	ldr	r3, [sp, #60]	; 0x3c
   11fd8:	cmp	r3, #0
   11fdc:	beq	1243c <__assert_fail@plt+0xd38>
   11fe0:	ldr	r0, [sp, #60]	; 0x3c
   11fe4:	mov	r3, #0
   11fe8:	str	r3, [sp, #16]
   11fec:	str	r3, [sp, #12]
   11ff0:	ldrb	r1, [r0, #24]
   11ff4:	ldr	r2, [sp, #48]	; 0x30
   11ff8:	lsr	r1, r1, #1
   11ffc:	and	r1, r1, #1
   12000:	str	r1, [sp, #8]
   12004:	ldrb	r1, [r0, #24]
   12008:	and	r1, r1, #1
   1200c:	str	r1, [sp, #4]
   12010:	ldr	r1, [r0, #12]
   12014:	str	r1, [sp]
   12018:	ldr	r1, [r0, #4]
   1201c:	ldr	r0, [r0]
   12020:	bl	13314 <__assert_fail@plt+0x1c10>
   12024:	ldr	r3, [sp, #40]	; 0x28
   12028:	add	r3, r3, #1
   1202c:	str	r3, [sp, #40]	; 0x28
   12030:	b	11e1c <__assert_fail@plt+0x718>
   12034:	mov	r0, #0
   12038:	bl	12fa4 <__assert_fail@plt+0x18a0>
   1203c:	ldrb	r3, [r9, #116]	; 0x74
   12040:	cmp	r3, #0
   12044:	beq	12050 <__assert_fail@plt+0x94c>
   12048:	mov	r0, #1
   1204c:	bl	12fa4 <__assert_fail@plt+0x18a0>
   12050:	mov	r0, #6
   12054:	bl	12fa4 <__assert_fail@plt+0x18a0>
   12058:	mov	r0, #7
   1205c:	bl	12fa4 <__assert_fail@plt+0x18a0>
   12060:	mov	r0, #8
   12064:	bl	12fa4 <__assert_fail@plt+0x18a0>
   12068:	mov	r0, #9
   1206c:	bl	12fa4 <__assert_fail@plt+0x18a0>
   12070:	mov	r0, #10
   12074:	bl	12fa4 <__assert_fail@plt+0x18a0>
   12078:	b	11df8 <__assert_fail@plt+0x6f4>
   1207c:	mov	r0, #0
   12080:	bl	12fa4 <__assert_fail@plt+0x18a0>
   12084:	ldrb	r3, [r9, #116]	; 0x74
   12088:	cmp	r3, #0
   1208c:	beq	12098 <__assert_fail@plt+0x994>
   12090:	mov	r0, #1
   12094:	bl	12fa4 <__assert_fail@plt+0x18a0>
   12098:	mov	r0, #2
   1209c:	bl	12fa4 <__assert_fail@plt+0x18a0>
   120a0:	mov	r0, #3
   120a4:	bl	12fa4 <__assert_fail@plt+0x18a0>
   120a8:	mov	r0, #4
   120ac:	bl	12fa4 <__assert_fail@plt+0x18a0>
   120b0:	mov	r0, #5
   120b4:	bl	12fa4 <__assert_fail@plt+0x18a0>
   120b8:	mov	r0, #10
   120bc:	bl	12fa4 <__assert_fail@plt+0x18a0>
   120c0:	b	11df8 <__assert_fail@plt+0x6f4>
   120c4:	ldr	r3, [r9, #4]
   120c8:	cmp	r3, #0
   120cc:	bne	11df8 <__assert_fail@plt+0x6f4>
   120d0:	ldr	r0, [pc, #1716]	; 1278c <__assert_fail@plt+0x1088>
   120d4:	bl	14308 <__assert_fail@plt+0x2c04>
   120d8:	b	11df8 <__assert_fail@plt+0x6f4>
   120dc:	mov	r0, #0
   120e0:	bl	12fa4 <__assert_fail@plt+0x18a0>
   120e4:	ldrb	r3, [r9, #116]	; 0x74
   120e8:	cmp	r3, #0
   120ec:	beq	120f8 <__assert_fail@plt+0x9f4>
   120f0:	mov	r0, #1
   120f4:	bl	12fa4 <__assert_fail@plt+0x18a0>
   120f8:	mov	r0, #2
   120fc:	bl	12fa4 <__assert_fail@plt+0x18a0>
   12100:	mov	r0, #3
   12104:	bl	12fa4 <__assert_fail@plt+0x18a0>
   12108:	mov	r0, #4
   1210c:	bl	12fa4 <__assert_fail@plt+0x18a0>
   12110:	ldr	r3, [r9, #4]
   12114:	mov	r2, #4
   12118:	add	r3, r3, #1
   1211c:	mov	r1, r3
   12120:	ldr	r0, [r9, #8]
   12124:	str	r3, [r9, #4]
   12128:	bl	1e070 <__assert_fail@plt+0xc96c>
   1212c:	ldr	r2, [pc, #1716]	; 127e8 <__assert_fail@plt+0x10e4>
   12130:	ldr	r3, [r9, #4]
   12134:	ldr	r1, [pc, #1620]	; 12790 <__assert_fail@plt+0x108c>
   12138:	ldrb	lr, [r2, #164]	; 0xa4
   1213c:	sub	r3, r3, #-1073741823	; 0xc0000001
   12140:	add	ip, r2, #140	; 0x8c
   12144:	cmp	lr, #0
   12148:	str	ip, [r0, r3, lsl #2]
   1214c:	str	r0, [r9, #8]
   12150:	str	r1, [r2, #152]	; 0x98
   12154:	bne	12b28 <__assert_fail@plt+0x1424>
   12158:	mov	r3, #1
   1215c:	mov	r0, #10
   12160:	strb	r3, [r2, #164]	; 0xa4
   12164:	bl	12fa4 <__assert_fail@plt+0x18a0>
   12168:	b	11df8 <__assert_fail@plt+0x6f4>
   1216c:	mov	r3, #1
   12170:	str	r3, [sp, #32]
   12174:	b	11fb0 <__assert_fail@plt+0x8ac>
   12178:	mov	r1, r4
   1217c:	add	r2, sp, #72	; 0x48
   12180:	mov	r0, #3
   12184:	str	r3, [sp, #56]	; 0x38
   12188:	bl	116bc <__xstat64@plt>
   1218c:	ldr	r3, [sp, #56]	; 0x38
   12190:	cmp	r0, #0
   12194:	beq	121b0 <__assert_fail@plt+0xaac>
   12198:	tst	r8, sl
   1219c:	ldreq	r3, [sp, #36]	; 0x24
   121a0:	streq	r3, [sp, #32]
   121a4:	beq	121c0 <__assert_fail@plt+0xabc>
   121a8:	mov	r2, #0
   121ac:	str	r2, [sp, #32]
   121b0:	cmp	r3, #1
   121b4:	beq	1266c <__assert_fail@plt+0xf68>
   121b8:	str	r3, [sp, #44]	; 0x2c
   121bc:	str	r5, [sp, #60]	; 0x3c
   121c0:	ldr	r3, [sp, #32]
   121c4:	str	r3, [sp, #36]	; 0x24
   121c8:	mov	r3, #0
   121cc:	str	r3, [sp, #32]
   121d0:	b	11fb0 <__assert_fail@plt+0x8ac>
   121d4:	ldr	r0, [sp, #68]	; 0x44
   121d8:	bl	15334 <__assert_fail@plt+0x3c30>
   121dc:	ldr	r0, [sp, #48]	; 0x30
   121e0:	bl	11680 <canonicalize_file_name@plt>
   121e4:	subs	r6, r0, #0
   121e8:	beq	121f8 <__assert_fail@plt+0xaf4>
   121ec:	ldrb	r3, [r6]
   121f0:	cmp	r3, #47	; 0x2f
   121f4:	beq	122d0 <__assert_fail@plt+0xbcc>
   121f8:	mov	r0, r6
   121fc:	bl	15334 <__assert_fail@plt+0x3c30>
   12200:	ldr	r5, [r9, #120]	; 0x78
   12204:	mov	r4, #0
   12208:	ldr	r6, [sp, #52]	; 0x34
   1220c:	b	12214 <__assert_fail@plt+0xb10>
   12210:	ldr	r5, [r5, #28]
   12214:	cmp	r5, #0
   12218:	beq	1256c <__assert_fail@plt+0xe68>
   1221c:	ldrd	r0, [r5, #16]
   12220:	mvn	r3, #0
   12224:	mvn	r2, #0
   12228:	cmp	r1, r3
   1222c:	cmpeq	r0, r2
   12230:	beq	12408 <__assert_fail@plt+0xd04>
   12234:	ldrd	r2, [r6]
   12238:	cmp	r3, r1
   1223c:	cmpeq	r2, r0
   12240:	bne	12210 <__assert_fail@plt+0xb0c>
   12244:	ldr	r1, [pc, #1352]	; 12794 <__assert_fail@plt+0x1090>
   12248:	ldr	r0, [r5, #12]
   1224c:	bl	11320 <strcmp@plt>
   12250:	cmp	r0, #0
   12254:	beq	12210 <__assert_fail@plt+0xb0c>
   12258:	cmp	r4, #0
   1225c:	beq	12278 <__assert_fail@plt+0xb74>
   12260:	ldrb	r3, [r4, #24]
   12264:	tst	r3, #1
   12268:	bne	12278 <__assert_fail@plt+0xb74>
   1226c:	ldrb	r3, [r5, #24]
   12270:	tst	r3, #1
   12274:	bne	12210 <__assert_fail@plt+0xb0c>
   12278:	add	r2, sp, #72	; 0x48
   1227c:	ldr	r1, [r5, #4]
   12280:	mov	r0, #3
   12284:	bl	116bc <__xstat64@plt>
   12288:	cmp	r0, #0
   1228c:	bne	122a8 <__assert_fail@plt+0xba4>
   12290:	ldrd	r0, [sp, #72]	; 0x48
   12294:	ldrd	r2, [r5, #16]
   12298:	cmp	r1, r3
   1229c:	cmpeq	r0, r2
   122a0:	moveq	r4, r5
   122a4:	beq	12210 <__assert_fail@plt+0xb0c>
   122a8:	mvn	r3, #1
   122ac:	str	r3, [r5, #16]
   122b0:	mvn	r3, #0
   122b4:	str	r3, [r5, #20]
   122b8:	b	12210 <__assert_fail@plt+0xb0c>
   122bc:	mov	r7, #0
   122c0:	b	11f74 <__assert_fail@plt+0x870>
   122c4:	mov	r0, fp
   122c8:	bl	116ec <close@plt>
   122cc:	b	11cb8 <__assert_fail@plt+0x5b4>
   122d0:	bl	1153c <strlen@plt>
   122d4:	ldr	r5, [r9, #120]	; 0x78
   122d8:	cmp	r5, #0
   122dc:	beq	121f8 <__assert_fail@plt+0xaf4>
   122e0:	mov	r8, #0
   122e4:	ldr	r7, [pc, #1192]	; 12794 <__assert_fail@plt+0x1090>
   122e8:	mov	r4, r8
   122ec:	mov	fp, r0
   122f0:	str	r6, [sp, #32]
   122f4:	mov	r1, r7
   122f8:	ldr	r0, [r5, #12]
   122fc:	bl	11320 <strcmp@plt>
   12300:	cmp	r0, #0
   12304:	beq	12374 <__assert_fail@plt+0xc70>
   12308:	cmp	r4, #0
   1230c:	beq	12328 <__assert_fail@plt+0xc24>
   12310:	ldrb	r3, [r4, #24]
   12314:	tst	r3, #1
   12318:	bne	12328 <__assert_fail@plt+0xc24>
   1231c:	ldrb	r3, [r5, #24]
   12320:	tst	r3, #1
   12324:	bne	12374 <__assert_fail@plt+0xc70>
   12328:	ldr	r6, [r5, #4]
   1232c:	mov	r0, r6
   12330:	bl	1153c <strlen@plt>
   12334:	cmp	r8, r0
   12338:	movhi	r2, #0
   1233c:	movls	r2, #1
   12340:	cmp	fp, r0
   12344:	movcc	r2, #0
   12348:	cmp	r2, #0
   1234c:	mov	sl, r0
   12350:	beq	12374 <__assert_fail@plt+0xc70>
   12354:	cmp	r0, #1
   12358:	beq	125c0 <__assert_fail@plt+0xebc>
   1235c:	cmp	fp, r0
   12360:	beq	1254c <__assert_fail@plt+0xe48>
   12364:	ldr	r3, [sp, #32]
   12368:	ldrb	r2, [r3, r0]
   1236c:	cmp	r2, #47	; 0x2f
   12370:	beq	1254c <__assert_fail@plt+0xe48>
   12374:	ldr	r5, [r5, #28]
   12378:	cmp	r5, #0
   1237c:	bne	122f4 <__assert_fail@plt+0xbf0>
   12380:	ldr	r6, [sp, #32]
   12384:	mov	r0, r6
   12388:	bl	15334 <__assert_fail@plt+0x3c30>
   1238c:	cmp	r4, #0
   12390:	beq	12200 <__assert_fail@plt+0xafc>
   12394:	add	r2, sp, #72	; 0x48
   12398:	ldr	r1, [r4, #4]
   1239c:	mov	r0, #3
   123a0:	bl	116bc <__xstat64@plt>
   123a4:	cmp	r0, #0
   123a8:	bne	12200 <__assert_fail@plt+0xafc>
   123ac:	ldr	r3, [sp, #52]	; 0x34
   123b0:	ldrd	r0, [sp, #72]	; 0x48
   123b4:	ldrd	r2, [r3]
   123b8:	cmp	r1, r3
   123bc:	cmpeq	r0, r2
   123c0:	bne	12200 <__assert_fail@plt+0xafc>
   123c4:	mov	r3, #0
   123c8:	str	r3, [sp, #16]
   123cc:	str	r3, [sp, #12]
   123d0:	ldrb	r1, [r4, #24]
   123d4:	ldr	r3, [sp, #48]	; 0x30
   123d8:	mov	r2, r3
   123dc:	lsr	r1, r1, #1
   123e0:	and	r1, r1, #1
   123e4:	str	r1, [sp, #8]
   123e8:	ldrb	r1, [r4, #24]
   123ec:	and	r1, r1, #1
   123f0:	str	r1, [sp, #4]
   123f4:	ldr	r1, [r4, #12]
   123f8:	str	r1, [sp]
   123fc:	ldm	r4, {r0, r1}
   12400:	bl	13314 <__assert_fail@plt+0x1c10>
   12404:	b	12024 <__assert_fail@plt+0x920>
   12408:	add	r2, sp, #72	; 0x48
   1240c:	ldr	r1, [r5, #4]
   12410:	mov	r0, #3
   12414:	bl	116bc <__xstat64@plt>
   12418:	cmp	r0, #0
   1241c:	bne	125fc <__assert_fail@plt+0xef8>
   12420:	ldr	r2, [sp, #72]	; 0x48
   12424:	ldr	r3, [sp, #76]	; 0x4c
   12428:	mov	r0, r2
   1242c:	str	r2, [r5, #16]
   12430:	str	r3, [r5, #20]
   12434:	mov	r1, r3
   12438:	b	12234 <__assert_fail@plt+0xb30>
   1243c:	ldr	r3, [sp, #32]
   12440:	cmp	r3, #0
   12444:	beq	121dc <__assert_fail@plt+0xad8>
   12448:	ldr	r5, [sp, #60]	; 0x3c
   1244c:	mov	r2, #5
   12450:	ldr	r1, [pc, #832]	; 12798 <__assert_fail@plt+0x1094>
   12454:	mov	r0, r5
   12458:	bl	113bc <dcgettext@plt>
   1245c:	ldr	r1, [sp, #48]	; 0x30
   12460:	mov	r4, r0
   12464:	mov	r0, #4
   12468:	bl	1b8c8 <__assert_fail@plt+0xa1c4>
   1246c:	mov	r2, r4
   12470:	mov	r1, r5
   12474:	mov	r3, r0
   12478:	mov	r0, r5
   1247c:	bl	11494 <error@plt>
   12480:	mov	r3, #1
   12484:	str	r3, [r9, #48]	; 0x30
   12488:	b	12024 <__assert_fail@plt+0x920>
   1248c:	cmp	sl, #0
   12490:	streq	sl, [r9, #120]	; 0x78
   12494:	moveq	r2, #1
   12498:	beq	124b4 <__assert_fail@plt+0xdb0>
   1249c:	b	124d4 <__assert_fail@plt+0xdd0>
   124a0:	ldr	r3, [fp, #8]
   124a4:	mov	sl, r2
   124a8:	ldr	fp, [fp, #12]
   124ac:	str	r8, [r3, #28]
   124b0:	mov	r8, r3
   124b4:	cmp	fp, #0
   124b8:	bne	124a0 <__assert_fail@plt+0xd9c>
   124bc:	cmp	sl, #0
   124c0:	ldr	r0, [r9]
   124c4:	strne	r8, [r9, #120]	; 0x78
   124c8:	bl	15f70 <__assert_fail@plt+0x486c>
   124cc:	mov	r3, #0
   124d0:	str	r3, [r9]
   124d4:	ldr	r4, [r9, #120]	; 0x78
   124d8:	mov	r6, #1
   124dc:	mov	r5, #0
   124e0:	b	12524 <__assert_fail@plt+0xe20>
   124e4:	str	r6, [sp, #16]
   124e8:	str	r5, [sp, #12]
   124ec:	ldrb	r1, [r4, #24]
   124f0:	mov	r3, #0
   124f4:	mov	r2, r3
   124f8:	lsr	r1, r1, #1
   124fc:	and	r1, r1, #1
   12500:	str	r1, [sp, #8]
   12504:	ldrb	r1, [r4, #24]
   12508:	and	r1, r1, #1
   1250c:	str	r1, [sp, #4]
   12510:	ldr	r1, [r4, #12]
   12514:	str	r1, [sp]
   12518:	ldm	r4, {r0, r1}
   1251c:	bl	13314 <__assert_fail@plt+0x1c10>
   12520:	ldr	r4, [r4, #28]
   12524:	cmp	r4, #0
   12528:	bne	124e4 <__assert_fail@plt+0xde0>
   1252c:	ldrb	r3, [r9, #52]	; 0x34
   12530:	cmp	r3, #0
   12534:	bne	12b94 <__assert_fail@plt+0x1490>
   12538:	ldr	r4, [r9, #48]	; 0x30
   1253c:	cmp	r4, #0
   12540:	beq	12638 <__assert_fail@plt+0xf34>
   12544:	ldr	r0, [r9, #48]	; 0x30
   12548:	bl	11530 <exit@plt>
   1254c:	mov	r0, r6
   12550:	mov	r2, sl
   12554:	ldr	r1, [sp, #32]
   12558:	bl	116d4 <strncmp@plt>
   1255c:	cmp	r0, #0
   12560:	moveq	r8, sl
   12564:	moveq	r4, r5
   12568:	b	12374 <__assert_fail@plt+0xc70>
   1256c:	cmp	r4, #0
   12570:	bne	123c4 <__assert_fail@plt+0xcc0>
   12574:	ldr	r6, [sp, #48]	; 0x30
   12578:	ldr	r1, [sp, #52]	; 0x34
   1257c:	mov	r0, r6
   12580:	bl	14650 <__assert_fail@plt+0x2f4c>
   12584:	subs	r5, r0, #0
   12588:	beq	12024 <__assert_fail@plt+0x920>
   1258c:	mov	r0, r4
   12590:	str	r4, [sp, #16]
   12594:	str	r4, [sp, #12]
   12598:	str	r4, [sp, #8]
   1259c:	str	r4, [sp, #4]
   125a0:	str	r4, [sp]
   125a4:	mov	r2, r6
   125a8:	mov	r3, r4
   125ac:	mov	r1, r5
   125b0:	bl	13314 <__assert_fail@plt+0x1c10>
   125b4:	mov	r0, r5
   125b8:	bl	15334 <__assert_fail@plt+0x3c30>
   125bc:	b	12024 <__assert_fail@plt+0x920>
   125c0:	mov	r8, #1
   125c4:	mov	r4, r5
   125c8:	b	12374 <__assert_fail@plt+0xc70>
   125cc:	cmp	r8, #0
   125d0:	beq	12620 <__assert_fail@plt+0xf1c>
   125d4:	mov	r3, #0
   125d8:	ldr	r0, [pc, #444]	; 1279c <__assert_fail@plt+0x1098>
   125dc:	str	r3, [r9, #24]
   125e0:	bl	114c4 <getenv@plt>
   125e4:	mov	r3, #0
   125e8:	cmp	r0, #0
   125ec:	movne	r2, #512	; 0x200
   125f0:	moveq	r2, #1024	; 0x400
   125f4:	strd	r2, [r9, #32]
   125f8:	b	11ae4 <__assert_fail@plt+0x3e0>
   125fc:	bl	1156c <__errno_location@plt>
   12600:	ldr	r7, [r0]
   12604:	cmp	r7, #5
   12608:	beq	12aa0 <__assert_fail@plt+0x139c>
   1260c:	mvn	r0, #1
   12610:	mvn	r1, #0
   12614:	str	r0, [r5, #16]
   12618:	str	r1, [r5, #20]
   1261c:	b	12234 <__assert_fail@plt+0xb30>
   12620:	ldr	r0, [pc, #376]	; 127a0 <__assert_fail@plt+0x109c>
   12624:	bl	114c4 <getenv@plt>
   12628:	ldr	r2, [pc, #300]	; 1275c <__assert_fail@plt+0x1058>
   1262c:	sub	r1, r2, #8
   12630:	bl	17c58 <__assert_fail@plt+0x6554>
   12634:	b	11ae4 <__assert_fail@plt+0x3e0>
   12638:	mov	r2, #5
   1263c:	ldr	r1, [pc, #352]	; 127a4 <__assert_fail@plt+0x10a0>
   12640:	mov	r0, r4
   12644:	bl	113bc <dcgettext@plt>
   12648:	mov	r1, r4
   1264c:	mov	r2, r0
   12650:	mov	r0, #1
   12654:	bl	11494 <error@plt>
   12658:	ldr	r3, [pc, #328]	; 127a8 <__assert_fail@plt+0x10a4>
   1265c:	ldr	r2, [pc, #328]	; 127ac <__assert_fail@plt+0x10a8>
   12660:	ldr	r1, [pc, #328]	; 127b0 <__assert_fail@plt+0x10ac>
   12664:	ldr	r0, [pc, #328]	; 127b4 <__assert_fail@plt+0x10b0>
   12668:	bl	11704 <__assert_fail@plt>
   1266c:	mov	r0, r7
   12670:	bl	15334 <__assert_fail@plt+0x3c30>
   12674:	mov	r0, r6
   12678:	bl	15334 <__assert_fail@plt+0x3c30>
   1267c:	ldr	r0, [sp, #68]	; 0x44
   12680:	bl	15334 <__assert_fail@plt+0x3c30>
   12684:	str	r5, [sp, #60]	; 0x3c
   12688:	b	11fe0 <__assert_fail@plt+0x8dc>
   1268c:	ldr	r3, [pc, #236]	; 12780 <__assert_fail@plt+0x107c>
   12690:	ldr	r2, [sp, #24]
   12694:	ldr	r3, [r3]
   12698:	cmp	r2, r3
   1269c:	ble	127fc <__assert_fail@plt+0x10f8>
   126a0:	ldrb	r3, [r9, #41]	; 0x29
   126a4:	cmp	r3, #0
   126a8:	bne	127fc <__assert_fail@plt+0x10f8>
   126ac:	ldrb	r3, [r9, #40]	; 0x28
   126b0:	cmp	r3, #0
   126b4:	bne	127fc <__assert_fail@plt+0x10f8>
   126b8:	ldr	r3, [r9, #44]	; 0x2c
   126bc:	cmp	r3, #0
   126c0:	movne	r4, #1
   126c4:	ldrne	r5, [pc, #104]	; 12734 <__assert_fail@plt+0x1030>
   126c8:	beq	12afc <__assert_fail@plt+0x13f8>
   126cc:	bl	1156c <__errno_location@plt>
   126d0:	mov	r2, #5
   126d4:	ldr	r1, [pc, #220]	; 127b8 <__assert_fail@plt+0x10b4>
   126d8:	ldr	r6, [r0]
   126dc:	mov	r0, #0
   126e0:	bl	113bc <dcgettext@plt>
   126e4:	mov	r1, r6
   126e8:	mov	r3, r5
   126ec:	ldr	r2, [pc, #200]	; 127bc <__assert_fail@plt+0x10b8>
   126f0:	str	r0, [sp]
   126f4:	mov	r0, r4
   126f8:	bl	11494 <error@plt>
   126fc:	b	11be4 <__assert_fail@plt+0x4e0>
   12700:	ldr	r3, [r9, #112]	; 0x70
   12704:	cmp	r3, #0
   12708:	bne	11bcc <__assert_fail@plt+0x4c8>
   1270c:	ldrb	r3, [r9, #116]	; 0x74
   12710:	cmp	r3, #0
   12714:	bne	11bcc <__assert_fail@plt+0x4c8>
   12718:	ldr	r3, [pc, #200]	; 127e8 <__assert_fail@plt+0x10e4>
   1271c:	ldrb	r3, [r3, #52]	; 0x34
   12720:	cmp	r3, #0
   12724:	ldrbeq	r0, [r9, #40]	; 0x28
   12728:	beq	11bd0 <__assert_fail@plt+0x4cc>
   1272c:	b	11bcc <__assert_fail@plt+0x4c8>
   12730:	andeq	r4, r3, r0, asr #6
   12734:	andeq	r2, r2, r4, ror sl
   12738:	andeq	r2, r2, ip, lsl #11
   1273c:	andeq	r2, r2, r8, ror r4
   12740:	andeq	r5, r1, ip, lsr #32
   12744:	andeq	r2, r2, r4, lsr #11
   12748:	muleq	r2, r4, r9
   1274c:	ldrdeq	r2, [r2], -r0
   12750:	andeq	r4, r3, r8, lsr r3
   12754:	andeq	r0, r0, r2, lsl #2
   12758:	andeq	r0, r0, r1, lsl #2
   1275c:	andeq	r4, r3, r0, ror #6
   12760:	andeq	r0, r0, r3, lsl #2
   12764:	strdeq	r2, [r2], -ip
   12768:	andeq	r2, r2, r8, lsl #12
   1276c:	ldrdeq	r4, [r3], -r0
   12770:	andeq	r2, r2, r8, lsl r6
   12774:	andeq	r2, r2, r4, ror r4
   12778:	andeq	r1, r2, ip, lsr #22
   1277c:	andeq	r2, r2, ip, asr #12
   12780:	andeq	r4, r3, r8, lsr #6
   12784:	andeq	r2, r2, r4, ror r5
   12788:	andeq	r2, r2, ip, ror r5
   1278c:			; <UNDEFINED> instruction: 0x000226bc
   12790:			; <UNDEFINED> instruction: 0x000226b0
   12794:	andeq	r2, r2, r4, asr r7
   12798:	andeq	r2, r2, r0, lsr #14
   1279c:	andeq	r2, r2, ip, lsr #12
   127a0:	andeq	r2, r2, ip, lsr r6
   127a4:	andeq	r2, r2, ip, asr r7
   127a8:	andeq	r1, r2, r4, lsr #21
   127ac:	andeq	r0, r0, r5, lsr r2
   127b0:			; <UNDEFINED> instruction: 0x00021ab4
   127b4:	andeq	r2, r2, r8, lsl #14
   127b8:	andeq	r2, r2, ip, ror r6
   127bc:	andeq	r2, r2, r8, lsr #13
   127c0:	andeq	r2, r2, r4, ror sl
   127c4:	andeq	r2, r1, ip, lsl #29
   127c8:	andeq	r2, r1, ip, asr #28
   127cc:	andeq	r2, r1, r8, ror #28
   127d0:	andeq	r2, r2, r4, lsl #20
   127d4:	andeq	r2, r2, r8, ror r7
   127d8:	strdeq	r2, [r2], -r8
   127dc:	strdeq	r2, [r2], -r4
   127e0:	andeq	r2, r2, r8, ror #11
   127e4:	andeq	r2, r2, r4, ror #11
   127e8:	andeq	r4, r3, ip, ror r1
   127ec:	andeq	r4, r3, r8, ror r3
   127f0:	andeq	r2, r2, r4, lsl #11
   127f4:	andeq	r1, r2, r0, ror #21
   127f8:	andeq	r4, r3, r4, lsr r3
   127fc:	mov	r4, #1
   12800:	ldr	r5, [pc, #-72]	; 127c0 <__assert_fail@plt+0x10bc>
   12804:	b	126cc <__assert_fail@plt+0xfc8>
   12808:	ldr	r0, [sp, #64]	; 0x40
   1280c:	ldrb	sl, [r9, #41]	; 0x29
   12810:	ldr	fp, [r9, #120]	; 0x78
   12814:	b	12820 <__assert_fail@plt+0x111c>
   12818:	ldr	fp, [fp, #28]
   1281c:	add	r0, r0, #1
   12820:	cmp	fp, #0
   12824:	bne	12818 <__assert_fail@plt+0x1114>
   12828:	ldr	r3, [pc, #-108]	; 127c4 <__assert_fail@plt+0x10c0>
   1282c:	ldr	r2, [pc, #-108]	; 127c8 <__assert_fail@plt+0x10c4>
   12830:	str	r3, [sp]
   12834:	mov	r1, fp
   12838:	ldr	r3, [pc, #-116]	; 127cc <__assert_fail@plt+0x10c8>
   1283c:	bl	15c80 <__assert_fail@plt+0x457c>
   12840:	cmp	r0, #0
   12844:	str	r0, [r9]
   12848:	ldrne	r8, [r9, #120]	; 0x78
   1284c:	beq	12b1c <__assert_fail@plt+0x1418>
   12850:	cmp	r8, #0
   12854:	beq	1248c <__assert_fail@plt+0xd88>
   12858:	ldrb	r3, [r8, #24]
   1285c:	tst	r3, #2
   12860:	beq	12870 <__assert_fail@plt+0x116c>
   12864:	ldrb	r2, [r9, #40]	; 0x28
   12868:	cmp	r2, #0
   1286c:	bne	128cc <__assert_fail@plt+0x11c8>
   12870:	tst	r3, #1
   12874:	beq	12890 <__assert_fail@plt+0x118c>
   12878:	ldrb	r3, [r9, #41]	; 0x29
   1287c:	cmp	r3, #0
   12880:	bne	12890 <__assert_fail@plt+0x118c>
   12884:	ldrb	r3, [r9, #42]	; 0x2a
   12888:	cmp	r3, #0
   1288c:	beq	128cc <__assert_fail@plt+0x11c8>
   12890:	ldr	r5, [r8, #12]
   12894:	ldr	r4, [r9, #44]	; 0x2c
   12898:	clz	r6, r5
   1289c:	cmp	r5, #0
   128a0:	cmpne	r4, #0
   128a4:	lsr	r6, r6, #5
   128a8:	beq	12914 <__assert_fail@plt+0x1210>
   128ac:	ldr	r1, [r4]
   128b0:	mov	r0, r5
   128b4:	bl	11320 <strcmp@plt>
   128b8:	cmp	r0, #0
   128bc:	beq	12914 <__assert_fail@plt+0x1210>
   128c0:	ldr	r4, [r4, #4]
   128c4:	cmp	r4, #0
   128c8:	bne	128ac <__assert_fail@plt+0x11a8>
   128cc:	ldrd	r2, [r8, #16]
   128d0:	strd	r2, [sp, #72]	; 0x48
   128d4:	mov	r0, #24
   128d8:	bl	1dfe4 <__assert_fail@plt+0xc8e0>
   128dc:	ldrd	r2, [sp, #72]	; 0x48
   128e0:	str	r8, [r0, #8]
   128e4:	str	fp, [r0, #12]
   128e8:	mov	r1, r0
   128ec:	strd	r2, [r0]
   128f0:	mov	r4, r0
   128f4:	ldr	r0, [r9]
   128f8:	bl	165e8 <__assert_fail@plt+0x4ee4>
   128fc:	cmp	r0, #0
   12900:	beq	12b1c <__assert_fail@plt+0x1418>
   12904:	ldr	r8, [r8, #28]
   12908:	mov	fp, r4
   1290c:	str	r4, [r0, #16]
   12910:	b	12850 <__assert_fail@plt+0x114c>
   12914:	ldr	r4, [r9, #112]	; 0x70
   12918:	cmp	r4, #0
   1291c:	orreq	r6, r6, #1
   12920:	cmp	r6, #0
   12924:	beq	12938 <__assert_fail@plt+0x1234>
   12928:	b	12950 <__assert_fail@plt+0x124c>
   1292c:	ldr	r4, [r4, #4]
   12930:	cmp	r4, #0
   12934:	beq	12950 <__assert_fail@plt+0x124c>
   12938:	ldr	r1, [r4]
   1293c:	mov	r0, r5
   12940:	bl	11320 <strcmp@plt>
   12944:	cmp	r0, #0
   12948:	bne	1292c <__assert_fail@plt+0x1228>
   1294c:	b	128cc <__assert_fail@plt+0x11c8>
   12950:	add	r2, sp, #72	; 0x48
   12954:	ldr	r1, [r8, #4]
   12958:	mov	r0, #3
   1295c:	bl	116bc <__xstat64@plt>
   12960:	cmn	r0, #1
   12964:	beq	128cc <__assert_fail@plt+0x11c8>
   12968:	ldrd	r0, [sp, #72]	; 0x48
   1296c:	bl	12e90 <__assert_fail@plt+0x178c>
   12970:	subs	r3, r0, #0
   12974:	str	r3, [sp, #24]
   12978:	beq	128d4 <__assert_fail@plt+0x11d0>
   1297c:	ldr	r4, [r3, #8]
   12980:	ldr	r3, [r4, #4]
   12984:	mov	r0, r3
   12988:	str	r3, [sp, #28]
   1298c:	bl	1153c <strlen@plt>
   12990:	ldr	r6, [r8, #4]
   12994:	str	r0, [sp, #32]
   12998:	mov	r0, r6
   1299c:	bl	1153c <strlen@plt>
   129a0:	str	r0, [sp, #36]	; 0x24
   129a4:	ldr	r0, [r4, #8]
   129a8:	cmp	r0, #0
   129ac:	beq	12b20 <__assert_fail@plt+0x141c>
   129b0:	ldr	r7, [r8, #8]
   129b4:	cmp	r7, #0
   129b8:	beq	12b20 <__assert_fail@plt+0x141c>
   129bc:	bl	1153c <strlen@plt>
   129c0:	mov	r5, r0
   129c4:	mov	r0, r7
   129c8:	bl	1153c <strlen@plt>
   129cc:	cmp	r5, r0
   129d0:	movcs	r5, #0
   129d4:	movcc	r5, #1
   129d8:	ldrb	r3, [r9, #53]	; 0x35
   129dc:	cmp	r3, #0
   129e0:	bne	12a10 <__assert_fail@plt+0x130c>
   129e4:	ldrb	r3, [r8, #24]
   129e8:	tst	r3, #2
   129ec:	beq	12a10 <__assert_fail@plt+0x130c>
   129f0:	ldrb	r3, [r4, #24]
   129f4:	tst	r3, #2
   129f8:	beq	12a10 <__assert_fail@plt+0x130c>
   129fc:	ldr	r1, [r8]
   12a00:	ldr	r0, [r4]
   12a04:	bl	11320 <strcmp@plt>
   12a08:	cmp	r0, #0
   12a0c:	bne	128d4 <__assert_fail@plt+0x11d0>
   12a10:	ldr	r7, [r8]
   12a14:	mov	r1, #47	; 0x2f
   12a18:	mov	r0, r7
   12a1c:	bl	11548 <strchr@plt>
   12a20:	cmp	r0, #0
   12a24:	beq	12a3c <__assert_fail@plt+0x1338>
   12a28:	mov	r1, #47	; 0x2f
   12a2c:	ldr	r0, [r4]
   12a30:	bl	11548 <strchr@plt>
   12a34:	cmp	r0, #0
   12a38:	beq	12a80 <__assert_fail@plt+0x137c>
   12a3c:	ldr	r3, [sp, #32]
   12a40:	ldr	r2, [sp, #36]	; 0x24
   12a44:	cmp	r3, r2
   12a48:	movls	r3, #0
   12a4c:	movhi	r3, #1
   12a50:	bics	r3, r3, r5
   12a54:	bne	12a80 <__assert_fail@plt+0x137c>
   12a58:	mov	r1, r7
   12a5c:	ldr	r0, [r4]
   12a60:	bl	11320 <strcmp@plt>
   12a64:	cmp	r0, #0
   12a68:	beq	12ad0 <__assert_fail@plt+0x13cc>
   12a6c:	ldr	r1, [sp, #28]
   12a70:	mov	r0, r6
   12a74:	bl	11320 <strcmp@plt>
   12a78:	cmp	r0, #0
   12a7c:	bne	12ad0 <__assert_fail@plt+0x13cc>
   12a80:	ldr	r3, [sp, #24]
   12a84:	str	r8, [r3, #8]
   12a88:	cmp	sl, #0
   12a8c:	ldr	r8, [r8, #28]
   12a90:	bne	12850 <__assert_fail@plt+0x114c>
   12a94:	mov	r0, r4
   12a98:	bl	1932c <__assert_fail@plt+0x7c28>
   12a9c:	b	12850 <__assert_fail@plt+0x114c>
   12aa0:	ldr	r2, [r5, #4]
   12aa4:	mov	r1, #3
   12aa8:	mov	r0, #0
   12aac:	bl	1c344 <__assert_fail@plt+0xac40>
   12ab0:	mov	r1, r7
   12ab4:	ldr	r2, [pc, #-748]	; 127d0 <__assert_fail@plt+0x10cc>
   12ab8:	mov	r3, r0
   12abc:	mov	r0, #0
   12ac0:	bl	11494 <error@plt>
   12ac4:	mov	r3, #1
   12ac8:	str	r3, [r9, #48]	; 0x30
   12acc:	b	1260c <__assert_fail@plt+0xf08>
   12ad0:	mov	r4, r8
   12ad4:	b	12a88 <__assert_fail@plt+0x1384>
   12ad8:	ldr	r3, [pc, #-768]	; 127e0 <__assert_fail@plt+0x10dc>
   12adc:	mov	r1, #0
   12ae0:	str	r3, [sp]
   12ae4:	mov	r0, r1
   12ae8:	mov	r2, sl
   12aec:	ldr	r3, [pc, #-792]	; 127dc <__assert_fail@plt+0x10d8>
   12af0:	bl	11494 <error@plt>
   12af4:	mov	r0, #1
   12af8:	bl	13f38 <__assert_fail@plt+0x2834>
   12afc:	ldr	r4, [r9, #112]	; 0x70
   12b00:	cmp	r4, #0
   12b04:	bne	127fc <__assert_fail@plt+0x10f8>
   12b08:	mov	r2, #5
   12b0c:	ldr	r1, [pc, #-832]	; 127d4 <__assert_fail@plt+0x10d0>
   12b10:	bl	113bc <dcgettext@plt>
   12b14:	mov	r5, r0
   12b18:	b	126cc <__assert_fail@plt+0xfc8>
   12b1c:	bl	1e62c <__assert_fail@plt+0xcf28>
   12b20:	mov	r5, #0
   12b24:	b	129d8 <__assert_fail@plt+0x12d4>
   12b28:	bl	11710 <__assert_fail@plt+0xc>
   12b2c:	ldr	r3, [pc, #-852]	; 127e0 <__assert_fail@plt+0x10dc>
   12b30:	mov	r1, #0
   12b34:	str	r3, [sp]
   12b38:	mov	r0, r1
   12b3c:	mov	r2, sl
   12b40:	ldr	r3, [pc, #-880]	; 127d8 <__assert_fail@plt+0x10d4>
   12b44:	bl	11494 <error@plt>
   12b48:	mov	r0, #1
   12b4c:	bl	13f38 <__assert_fail@plt+0x2834>
   12b50:	ldr	r3, [pc, #-888]	; 127e0 <__assert_fail@plt+0x10dc>
   12b54:	mov	r0, r1
   12b58:	str	r3, [sp]
   12b5c:	mov	r2, sl
   12b60:	ldr	r3, [pc, #-908]	; 127dc <__assert_fail@plt+0x10d8>
   12b64:	bl	11494 <error@plt>
   12b68:	mov	r0, #1
   12b6c:	bl	13f38 <__assert_fail@plt+0x2834>
   12b70:	ldr	r3, [pc, #-920]	; 127e0 <__assert_fail@plt+0x10dc>
   12b74:	mov	r1, #0
   12b78:	str	r3, [sp]
   12b7c:	mov	r0, r1
   12b80:	mov	r2, sl
   12b84:	ldr	r3, [pc, #-936]	; 127e4 <__assert_fail@plt+0x10e0>
   12b88:	bl	11494 <error@plt>
   12b8c:	mov	r0, #1
   12b90:	bl	13f38 <__assert_fail@plt+0x2834>
   12b94:	ldrb	r3, [r9, #53]	; 0x35
   12b98:	cmp	r3, #0
   12b9c:	beq	12bdc <__assert_fail@plt+0x14d8>
   12ba0:	ldr	r3, [pc, #-960]	; 127e8 <__assert_fail@plt+0x10e4>
   12ba4:	ldr	r2, [pc, #-960]	; 127ec <__assert_fail@plt+0x10e8>
   12ba8:	ldr	r0, [pc, #-960]	; 127f0 <__assert_fail@plt+0x10ec>
   12bac:	ldrb	ip, [r3, #24]
   12bb0:	mov	r3, #0
   12bb4:	ldr	r1, [pc, #-968]	; 127f4 <__assert_fail@plt+0x10f0>
   12bb8:	cmp	ip, r3
   12bbc:	str	r2, [sp, #12]
   12bc0:	moveq	r1, r0
   12bc4:	str	r3, [sp, #16]
   12bc8:	str	r3, [sp, #8]
   12bcc:	str	r3, [sp, #4]
   12bd0:	str	r3, [sp]
   12bd4:	mov	r2, r3
   12bd8:	bl	13314 <__assert_fail@plt+0x1c10>
   12bdc:	ldr	r6, [pc, #-1004]	; 127f8 <__assert_fail@plt+0x10f4>
   12be0:	mov	r5, #0
   12be4:	mov	r7, #32
   12be8:	ldr	r3, [r9, #12]
   12bec:	cmp	r5, r3
   12bf0:	bcs	12544 <__assert_fail@plt+0xe40>
   12bf4:	lsl	r8, r5, #2
   12bf8:	mov	r4, #0
   12bfc:	b	12c94 <__assert_fail@plt+0x1590>
   12c00:	ldr	r3, [r9, #16]
   12c04:	cmp	r4, #0
   12c08:	lsl	sl, r4, #2
   12c0c:	ldr	r3, [r3, r8]
   12c10:	ldr	fp, [r3, r4, lsl #2]
   12c14:	beq	12c38 <__assert_fail@plt+0x1534>
   12c18:	ldr	r0, [r6]
   12c1c:	ldr	r3, [r0, #20]
   12c20:	ldr	r2, [r0, #24]
   12c24:	cmp	r3, r2
   12c28:	addcc	r2, r3, #1
   12c2c:	strcc	r2, [r0, #20]
   12c30:	strbcc	r7, [r3]
   12c34:	bcs	12cd4 <__assert_fail@plt+0x15d0>
   12c38:	ldr	r2, [r9, #8]
   12c3c:	ldr	r3, [r9, #4]
   12c40:	mov	r0, fp
   12c44:	ldr	r2, [r2, sl]
   12c48:	sub	r3, r3, #1
   12c4c:	cmp	r4, r3
   12c50:	ldr	ip, [r2, #16]
   12c54:	moveq	r3, #8
   12c58:	movne	r3, #0
   12c5c:	ldr	r2, [r2, #20]
   12c60:	add	r1, sp, #72	; 0x48
   12c64:	str	ip, [sp, #72]	; 0x48
   12c68:	bl	18240 <__assert_fail@plt+0x6b3c>
   12c6c:	ldr	r1, [r6]
   12c70:	add	r4, r4, #1
   12c74:	subs	fp, r0, #0
   12c78:	movne	r0, fp
   12c7c:	ldreq	r3, [r9, #16]
   12c80:	ldreq	r3, [r3, r8]
   12c84:	ldreq	r0, [r3, sl]
   12c88:	bl	112f0 <fputs_unlocked@plt>
   12c8c:	mov	r0, fp
   12c90:	bl	15334 <__assert_fail@plt+0x3c30>
   12c94:	ldr	r3, [r9, #4]
   12c98:	cmp	r4, r3
   12c9c:	bcc	12c00 <__assert_fail@plt+0x14fc>
   12ca0:	ldr	r0, [r6]
   12ca4:	ldr	r3, [r0, #20]
   12ca8:	ldr	r2, [r0, #24]
   12cac:	cmp	r3, r2
   12cb0:	addcc	r1, r3, #1
   12cb4:	movcc	r2, #10
   12cb8:	strcc	r1, [r0, #20]
   12cbc:	strbcc	r2, [r3]
   12cc0:	bcc	12ccc <__assert_fail@plt+0x15c8>
   12cc4:	mov	r1, #10
   12cc8:	bl	11608 <__overflow@plt>
   12ccc:	add	r5, r5, #1
   12cd0:	b	12be8 <__assert_fail@plt+0x14e4>
   12cd4:	mov	r1, r7
   12cd8:	bl	11608 <__overflow@plt>
   12cdc:	b	12c38 <__assert_fail@plt+0x1534>
   12ce0:	mov	fp, #0
   12ce4:	mov	lr, #0
   12ce8:	pop	{r1}		; (ldr r1, [sp], #4)
   12cec:	mov	r2, sp
   12cf0:	push	{r2}		; (str r2, [sp, #-4]!)
   12cf4:	push	{r0}		; (str r0, [sp, #-4]!)
   12cf8:	ldr	ip, [pc, #16]	; 12d10 <__assert_fail@plt+0x160c>
   12cfc:	push	{ip}		; (str ip, [sp, #-4]!)
   12d00:	ldr	r0, [pc, #12]	; 12d14 <__assert_fail@plt+0x1610>
   12d04:	ldr	r3, [pc, #12]	; 12d18 <__assert_fail@plt+0x1614>
   12d08:	bl	114dc <__libc_start_main@plt>
   12d0c:	bl	116e0 <abort@plt>
   12d10:	andeq	r1, r2, r0, lsr #18
   12d14:	andeq	r1, r1, ip, asr r7
   12d18:	andeq	r1, r2, r0, asr #17
   12d1c:	ldr	r3, [pc, #20]	; 12d38 <__assert_fail@plt+0x1634>
   12d20:	ldr	r2, [pc, #20]	; 12d3c <__assert_fail@plt+0x1638>
   12d24:	add	r3, pc, r3
   12d28:	ldr	r2, [r3, r2]
   12d2c:	cmp	r2, #0
   12d30:	bxeq	lr
   12d34:	b	114f4 <__gmon_start__@plt>
   12d38:	ldrdeq	r1, [r2], -r4
   12d3c:	andeq	r0, r0, r0, ror r1
   12d40:	ldr	r3, [pc, #28]	; 12d64 <__assert_fail@plt+0x1660>
   12d44:	ldr	r0, [pc, #28]	; 12d68 <__assert_fail@plt+0x1664>
   12d48:	sub	r3, r3, r0
   12d4c:	cmp	r3, #6
   12d50:	bxls	lr
   12d54:	ldr	r3, [pc, #16]	; 12d6c <__assert_fail@plt+0x1668>
   12d58:	cmp	r3, #0
   12d5c:	bxeq	lr
   12d60:	bx	r3
   12d64:	andeq	r4, r3, r3, lsr #6
   12d68:	andeq	r4, r3, r0, lsr #6
   12d6c:	andeq	r0, r0, r0
   12d70:	ldr	r1, [pc, #36]	; 12d9c <__assert_fail@plt+0x1698>
   12d74:	ldr	r0, [pc, #36]	; 12da0 <__assert_fail@plt+0x169c>
   12d78:	sub	r1, r1, r0
   12d7c:	asr	r1, r1, #2
   12d80:	add	r1, r1, r1, lsr #31
   12d84:	asrs	r1, r1, #1
   12d88:	bxeq	lr
   12d8c:	ldr	r3, [pc, #16]	; 12da4 <__assert_fail@plt+0x16a0>
   12d90:	cmp	r3, #0
   12d94:	bxeq	lr
   12d98:	bx	r3
   12d9c:	andeq	r4, r3, r0, lsr #6
   12da0:	andeq	r4, r3, r0, lsr #6
   12da4:	andeq	r0, r0, r0
   12da8:	push	{r4, lr}
   12dac:	ldr	r4, [pc, #24]	; 12dcc <__assert_fail@plt+0x16c8>
   12db0:	ldrb	r3, [r4]
   12db4:	cmp	r3, #0
   12db8:	popne	{r4, pc}
   12dbc:	bl	12d40 <__assert_fail@plt+0x163c>
   12dc0:	mov	r3, #1
   12dc4:	strb	r3, [r4]
   12dc8:	pop	{r4, pc}
   12dcc:	andeq	r4, r3, ip, lsr r3
   12dd0:	ldr	r0, [pc, #40]	; 12e00 <__assert_fail@plt+0x16fc>
   12dd4:	ldr	r3, [r0]
   12dd8:	cmp	r3, #0
   12ddc:	bne	12de4 <__assert_fail@plt+0x16e0>
   12de0:	b	12d70 <__assert_fail@plt+0x166c>
   12de4:	ldr	r3, [pc, #24]	; 12e04 <__assert_fail@plt+0x1700>
   12de8:	cmp	r3, #0
   12dec:	beq	12de0 <__assert_fail@plt+0x16dc>
   12df0:	push	{r4, lr}
   12df4:	blx	r3
   12df8:	pop	{r4, lr}
   12dfc:	b	12d70 <__assert_fail@plt+0x166c>
   12e00:	andeq	r3, r3, r4, lsl pc
   12e04:	andeq	r0, r0, r0
   12e08:	ldrb	r3, [r0]
   12e0c:	cmp	r3, #0
   12e10:	bxeq	lr
   12e14:	mov	r2, #63	; 0x3f
   12e18:	b	12e30 <__assert_fail@plt+0x172c>
   12e1c:	cmp	r3, #127	; 0x7f
   12e20:	beq	12e38 <__assert_fail@plt+0x1734>
   12e24:	ldrb	r3, [r0, #1]!
   12e28:	cmp	r3, #0
   12e2c:	beq	12e48 <__assert_fail@plt+0x1744>
   12e30:	cmp	r3, #31
   12e34:	bhi	12e1c <__assert_fail@plt+0x1718>
   12e38:	strb	r2, [r0]
   12e3c:	ldrb	r3, [r0, #1]!
   12e40:	cmp	r3, #0
   12e44:	bne	12e30 <__assert_fail@plt+0x172c>
   12e48:	bx	lr
   12e4c:	push	{r4, lr}
   12e50:	mov	r2, r1
   12e54:	mov	r3, #0
   12e58:	ldrd	r0, [r0]
   12e5c:	bl	21700 <__assert_fail@plt+0xfffc>
   12e60:	mov	r0, r2
   12e64:	pop	{r4, pc}
   12e68:	push	{r4, r5}
   12e6c:	ldrd	r2, [r1]
   12e70:	ldrd	r4, [r0]
   12e74:	cmp	r5, r3
   12e78:	cmpeq	r4, r2
   12e7c:	moveq	r0, #1
   12e80:	movne	r0, #0
   12e84:	pop	{r4, r5}
   12e88:	bx	lr
   12e8c:	b	15334 <__assert_fail@plt+0x3c30>
   12e90:	ldr	r3, [pc, #76]	; 12ee4 <__assert_fail@plt+0x17e0>
   12e94:	ldr	ip, [r3]
   12e98:	cmp	ip, #0
   12e9c:	beq	12edc <__assert_fail@plt+0x17d8>
   12ea0:	push	{lr}		; (str lr, [sp, #-4]!)
   12ea4:	sub	sp, sp, #28
   12ea8:	mov	r2, r0
   12eac:	mov	r3, r1
   12eb0:	add	r1, sp, #24
   12eb4:	mov	r0, ip
   12eb8:	strd	r2, [r1, #-24]!	; 0xffffffe8
   12ebc:	bl	159a0 <__assert_fail@plt+0x429c>
   12ec0:	cmp	r0, #0
   12ec4:	beq	12ed4 <__assert_fail@plt+0x17d0>
   12ec8:	ldr	r0, [r0, #16]
   12ecc:	add	sp, sp, #28
   12ed0:	pop	{pc}		; (ldr pc, [sp], #4)
   12ed4:	mov	r0, #0
   12ed8:	b	12ecc <__assert_fail@plt+0x17c8>
   12edc:	mov	r0, #0
   12ee0:	bx	lr
   12ee4:	andeq	r4, r3, r0, asr #6
   12ee8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12eec:	sub	sp, sp, #20
   12ef0:	mov	r6, r0
   12ef4:	bl	1153c <strlen@plt>
   12ef8:	mov	r9, #0
   12efc:	str	r9, [sp, #12]
   12f00:	str	r9, [sp, #8]
   12f04:	add	r8, r6, r0
   12f08:	cmp	r6, r8
   12f0c:	beq	12f94 <__assert_fail@plt+0x1890>
   12f10:	mov	r4, r6
   12f14:	mov	fp, #63	; 0x3f
   12f18:	mov	sl, #1
   12f1c:	b	12f50 <__assert_fail@plt+0x184c>
   12f20:	ldr	r0, [sp, #4]
   12f24:	bl	113ec <iswcntrl@plt>
   12f28:	mov	r2, r5
   12f2c:	mov	r1, r4
   12f30:	cmp	r0, #0
   12f34:	mov	r0, r6
   12f38:	bne	12f78 <__assert_fail@plt+0x1874>
   12f3c:	add	r4, r4, r5
   12f40:	bl	11344 <memmove@plt>
   12f44:	cmp	r8, r4
   12f48:	add	r6, r6, r5
   12f4c:	beq	12f94 <__assert_fail@plt+0x1890>
   12f50:	sub	r7, r8, r4
   12f54:	mov	r2, r7
   12f58:	add	r3, sp, #8
   12f5c:	mov	r1, r4
   12f60:	add	r0, sp, #4
   12f64:	bl	17e78 <__assert_fail@plt+0x6774>
   12f68:	cmp	r7, r0
   12f6c:	mov	r5, r0
   12f70:	bcs	12f20 <__assert_fail@plt+0x181c>
   12f74:	mov	r5, sl
   12f78:	add	r4, r4, r5
   12f7c:	cmp	r8, r4
   12f80:	strb	fp, [r6]
   12f84:	str	r9, [sp, #8]
   12f88:	add	r6, r6, #1
   12f8c:	str	r9, [sp, #12]
   12f90:	bne	12f50 <__assert_fail@plt+0x184c>
   12f94:	mov	r3, #0
   12f98:	strb	r3, [r6]
   12f9c:	add	sp, sp, #20
   12fa0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12fa4:	push	{r4, r5, r6, lr}
   12fa8:	mov	r2, #4
   12fac:	ldr	r4, [pc, #80]	; 13004 <__assert_fail@plt+0x1900>
   12fb0:	mov	r5, r0
   12fb4:	ldr	r3, [r4, #4]
   12fb8:	ldr	r0, [r4, #8]
   12fbc:	add	r3, r3, #1
   12fc0:	mov	r1, r3
   12fc4:	str	r3, [r4, #4]
   12fc8:	bl	1e070 <__assert_fail@plt+0xc96c>
   12fcc:	rsb	r5, r5, r5, lsl #3
   12fd0:	ldr	r3, [pc, #48]	; 13008 <__assert_fail@plt+0x1904>
   12fd4:	ldr	r2, [r4, #4]
   12fd8:	add	r3, r3, r5, lsl #2
   12fdc:	sub	r2, r2, #-1073741823	; 0xc0000001
   12fe0:	ldrb	r1, [r3, #24]
   12fe4:	cmp	r1, #0
   12fe8:	str	r0, [r4, #8]
   12fec:	str	r3, [r0, r2, lsl #2]
   12ff0:	bne	13000 <__assert_fail@plt+0x18fc>
   12ff4:	mov	r2, #1
   12ff8:	strb	r2, [r3, #24]
   12ffc:	pop	{r4, r5, r6, pc}
   13000:	bl	11710 <__assert_fail@plt+0xc>
   13004:	andeq	r4, r3, r0, asr #6
   13008:	andeq	r4, r3, ip, ror r1
   1300c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13010:	mov	r2, #4
   13014:	ldr	r8, [pc, #732]	; 132f8 <__assert_fail@plt+0x1bf4>
   13018:	sub	sp, sp, #692	; 0x2b4
   1301c:	ldr	r3, [r8, #12]
   13020:	ldr	r0, [r8, #16]
   13024:	add	r3, r3, #1
   13028:	mov	r1, r3
   1302c:	str	r3, [r8, #12]
   13030:	bl	1e070 <__assert_fail@plt+0xc96c>
   13034:	mov	r1, #4
   13038:	ldr	r4, [r8, #12]
   1303c:	sub	r4, r4, #-1073741823	; 0xc0000001
   13040:	mov	r5, r0
   13044:	ldr	r0, [r8, #4]
   13048:	str	r5, [r8, #16]
   1304c:	bl	1e0c8 <__assert_fail@plt+0xc9c4>
   13050:	ldr	r3, [r8, #4]
   13054:	cmp	r3, #0
   13058:	str	r0, [r5, r4, lsl #2]
   1305c:	beq	132f0 <__assert_fail@plt+0x1bec>
   13060:	ldr	r6, [r8, #8]
   13064:	mov	fp, #0
   13068:	b	130f4 <__assert_fail@plt+0x19f0>
   1306c:	mov	r0, r5
   13070:	bl	113c8 <strdup@plt>
   13074:	mov	r4, r0
   13078:	str	r0, [sp, #32]
   1307c:	cmp	r4, #0
   13080:	beq	132c4 <__assert_fail@plt+0x1bc0>
   13084:	ldr	r3, [pc, #624]	; 132fc <__assert_fail@plt+0x1bf8>
   13088:	ldr	r0, [r3, #336]	; 0x150
   1308c:	cmp	r0, #0
   13090:	blt	132c8 <__assert_fail@plt+0x1bc4>
   13094:	ldr	r2, [pc, #612]	; 13300 <__assert_fail@plt+0x1bfc>
   13098:	cmp	r0, #0
   1309c:	ldr	r3, [pc, #608]	; 13304 <__assert_fail@plt+0x1c00>
   130a0:	mov	r0, r4
   130a4:	movne	r3, r2
   130a8:	blx	r3
   130ac:	ldr	r3, [r8, #12]
   130b0:	ldr	r1, [r8, #16]
   130b4:	sub	r3, r3, #-1073741823	; 0xc0000001
   130b8:	ldr	r2, [sp, #32]
   130bc:	ldr	r3, [r1, r3, lsl #2]
   130c0:	mov	r1, #0
   130c4:	add	fp, fp, #1
   130c8:	str	r2, [r3, sl]
   130cc:	ldr	r0, [sp, #32]
   130d0:	bl	18908 <__assert_fail@plt+0x7204>
   130d4:	ldmib	r8, {r1, r6}
   130d8:	ldr	r2, [r6, sl]
   130dc:	ldr	r3, [r2, #16]
   130e0:	cmp	r3, r0
   130e4:	movcs	r0, r3
   130e8:	cmp	r1, fp
   130ec:	str	r0, [r2, #16]
   130f0:	bls	132f0 <__assert_fail@plt+0x1bec>
   130f4:	ldr	r3, [r6, fp, lsl #2]
   130f8:	mov	r4, #0
   130fc:	mov	r0, r4
   13100:	ldr	r1, [r3, #12]
   13104:	mov	r2, #5
   13108:	str	r4, [sp, #32]
   1310c:	bl	113bc <dcgettext@plt>
   13110:	ldr	r3, [r6, fp, lsl #2]
   13114:	lsl	sl, fp, #2
   13118:	ldr	r3, [r3]
   1311c:	cmp	r3, #2
   13120:	mov	r5, r0
   13124:	bne	1306c <__assert_fail@plt+0x1968>
   13128:	ldr	r3, [r8, #20]
   1312c:	cmp	r3, r4
   13130:	beq	13198 <__assert_fail@plt+0x1a94>
   13134:	cmp	r3, #4
   13138:	beq	1318c <__assert_fail@plt+0x1a88>
   1313c:	cmp	r3, #3
   13140:	bne	1306c <__assert_fail@plt+0x1968>
   13144:	add	r2, sp, #36	; 0x24
   13148:	ldrd	r0, [r8, #32]
   1314c:	bl	17e10 <__assert_fail@plt+0x670c>
   13150:	mov	r2, #5
   13154:	ldr	r1, [pc, #428]	; 13308 <__assert_fail@plt+0x1c04>
   13158:	mov	r6, r0
   1315c:	mov	r0, r4
   13160:	bl	113bc <dcgettext@plt>
   13164:	mov	r3, r6
   13168:	str	r5, [sp]
   1316c:	mov	r1, #1
   13170:	mov	r2, r0
   13174:	add	r0, sp, #32
   13178:	bl	114b8 <__asprintf_chk@plt>
   1317c:	cmn	r0, #1
   13180:	streq	r4, [sp, #32]
   13184:	ldr	r4, [sp, #32]
   13188:	b	1307c <__assert_fail@plt+0x1978>
   1318c:	ldr	r3, [r8, #24]
   13190:	tst	r3, #16
   13194:	bne	1306c <__assert_fail@plt+0x1968>
   13198:	ldr	r2, [r8, #36]	; 0x24
   1319c:	ldr	r3, [r8, #32]
   131a0:	ldr	r1, [r8, #24]
   131a4:	mov	r6, r2
   131a8:	mov	r5, r2
   131ac:	mov	r7, r3
   131b0:	str	r3, [sp, #16]
   131b4:	mov	r4, r3
   131b8:	and	r3, r1, #292	; 0x124
   131bc:	str	r2, [sp, #20]
   131c0:	str	r1, [sp, #28]
   131c4:	str	r3, [sp, #24]
   131c8:	mov	r0, r7
   131cc:	mov	r1, r6
   131d0:	mov	r2, #1000	; 0x3e8
   131d4:	mov	r3, #0
   131d8:	bl	21700 <__assert_fail@plt+0xfffc>
   131dc:	mov	r0, r7
   131e0:	mov	r1, r6
   131e4:	orrs	r3, r2, r3
   131e8:	mov	r2, #1000	; 0x3e8
   131ec:	mov	r3, #0
   131f0:	moveq	r9, #1
   131f4:	movne	r9, #0
   131f8:	bl	21700 <__assert_fail@plt+0xfffc>
   131fc:	ldr	r2, [pc, #264]	; 1330c <__assert_fail@plt+0x1c08>
   13200:	mov	r3, #0
   13204:	and	r2, r2, r4
   13208:	and	r3, r3, r5
   1320c:	orrs	r3, r2, r3
   13210:	moveq	r2, #1
   13214:	lsr	r3, r4, #10
   13218:	movne	r2, #0
   1321c:	orr	r3, r3, r5, lsl #22
   13220:	tst	r9, r2
   13224:	mov	r4, r3
   13228:	mov	r6, r1
   1322c:	lsr	r1, r5, #10
   13230:	mov	r7, r0
   13234:	mov	r5, r1
   13238:	bne	131c8 <__assert_fail@plt+0x1ac4>
   1323c:	cmp	r9, r2
   13240:	bge	132dc <__assert_fail@plt+0x1bd8>
   13244:	ldr	r3, [sp, #24]
   13248:	orr	r3, r3, #184	; 0xb8
   1324c:	mov	r4, #1
   13250:	mov	r5, #0
   13254:	tst	r3, #32
   13258:	orreq	r3, r3, #256	; 0x100
   1325c:	strd	r4, [sp, #8]
   13260:	strd	r4, [sp]
   13264:	ldr	r1, [sp, #20]
   13268:	add	r2, sp, #36	; 0x24
   1326c:	ldr	r0, [sp, #16]
   13270:	bl	16e30 <__assert_fail@plt+0x572c>
   13274:	mov	r2, #5
   13278:	ldr	r1, [pc, #144]	; 13310 <__assert_fail@plt+0x1c0c>
   1327c:	mov	r4, r0
   13280:	mov	r0, #0
   13284:	bl	113bc <dcgettext@plt>
   13288:	mov	r2, #5
   1328c:	ldr	r1, [pc, #116]	; 13308 <__assert_fail@plt+0x1c04>
   13290:	mov	r5, r0
   13294:	mov	r0, #0
   13298:	bl	113bc <dcgettext@plt>
   1329c:	str	r5, [sp]
   132a0:	mov	r3, r4
   132a4:	mov	r1, #1
   132a8:	mov	r2, r0
   132ac:	add	r0, sp, #32
   132b0:	bl	114b8 <__asprintf_chk@plt>
   132b4:	cmn	r0, #1
   132b8:	bne	13184 <__assert_fail@plt+0x1a80>
   132bc:	mov	r3, #0
   132c0:	str	r3, [sp, #32]
   132c4:	bl	1e62c <__assert_fail@plt+0xcf28>
   132c8:	mov	r0, #1
   132cc:	bl	116c8 <isatty@plt>
   132d0:	ldr	r3, [pc, #36]	; 132fc <__assert_fail@plt+0x1bf8>
   132d4:	str	r0, [r3, #336]	; 0x150
   132d8:	b	13094 <__assert_fail@plt+0x1990>
   132dc:	ldrgt	r3, [sp, #28]
   132e0:	ldrle	r3, [sp, #24]
   132e4:	andgt	r3, r3, #260	; 0x104
   132e8:	orr	r3, r3, #152	; 0x98
   132ec:	b	1324c <__assert_fail@plt+0x1b48>
   132f0:	add	sp, sp, #692	; 0x2b4
   132f4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   132f8:	andeq	r4, r3, r0, asr #6
   132fc:	andeq	r4, r3, ip, ror r1
   13300:	andeq	r2, r1, r8, ror #29
   13304:	andeq	r2, r1, r8, lsl #28
   13308:	ldrdeq	r1, [r2], -r8
   1330c:	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   13310:	ldrdeq	r1, [r2], -r0
   13314:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13318:	vpush	{d8-d11}
   1331c:	mov	r5, r3
   13320:	mov	r6, r0
   13324:	ldr	fp, [pc, #1812]	; 13a40 <__assert_fail@plt+0x233c>
   13328:	sub	sp, sp, #924	; 0x39c
   1332c:	ldrb	r4, [sp, #1000]	; 0x3e8
   13330:	str	r1, [sp, #20]
   13334:	str	r2, [sp, #48]	; 0x30
   13338:	cmp	r4, #0
   1333c:	ldr	sl, [sp, #992]	; 0x3e0
   13340:	ldrb	r3, [sp, #996]	; 0x3e4
   13344:	ldrb	r7, [sp, #1008]	; 0x3f0
   13348:	beq	13364 <__assert_fail@plt+0x1c60>
   1334c:	ldrb	r2, [fp, #40]	; 0x28
   13350:	cmp	r2, #0
   13354:	beq	13364 <__assert_fail@plt+0x1c60>
   13358:	add	sp, sp, #924	; 0x39c
   1335c:	vpop	{d8-d11}
   13360:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13364:	cmp	r3, #0
   13368:	bne	133a8 <__assert_fail@plt+0x1ca4>
   1336c:	ldr	r9, [fp, #44]	; 0x2c
   13370:	clz	r8, sl
   13374:	cmp	sl, #0
   13378:	cmpne	r9, #0
   1337c:	lsr	r8, r8, #5
   13380:	beq	133c4 <__assert_fail@plt+0x1cc0>
   13384:	ldr	r1, [r9]
   13388:	mov	r0, sl
   1338c:	bl	11320 <strcmp@plt>
   13390:	cmp	r0, #0
   13394:	beq	133c4 <__assert_fail@plt+0x1cc0>
   13398:	ldr	r9, [r9, #4]
   1339c:	cmp	r9, #0
   133a0:	bne	13384 <__assert_fail@plt+0x1c80>
   133a4:	b	13358 <__assert_fail@plt+0x1c54>
   133a8:	ldrb	r3, [fp, #41]	; 0x29
   133ac:	cmp	r3, #0
   133b0:	bne	1336c <__assert_fail@plt+0x1c68>
   133b4:	ldrb	r3, [fp, #42]	; 0x2a
   133b8:	cmp	r3, #0
   133bc:	beq	13358 <__assert_fail@plt+0x1c54>
   133c0:	b	1336c <__assert_fail@plt+0x1c68>
   133c4:	ldr	r3, [fp, #112]	; 0x70
   133c8:	cmp	r3, #0
   133cc:	orreq	r8, r8, #1
   133d0:	cmp	r8, #0
   133d4:	moveq	r8, r3
   133d8:	bne	133fc <__assert_fail@plt+0x1cf8>
   133dc:	ldr	r1, [r8]
   133e0:	mov	r0, sl
   133e4:	bl	11320 <strcmp@plt>
   133e8:	cmp	r0, #0
   133ec:	beq	13358 <__assert_fail@plt+0x1c54>
   133f0:	ldr	r8, [r8, #4]
   133f4:	cmp	r8, #0
   133f8:	bne	133dc <__assert_fail@plt+0x1cd8>
   133fc:	ldr	r3, [sp, #1004]	; 0x3ec
   13400:	clz	r9, r3
   13404:	ldr	r3, [sp, #20]
   13408:	lsr	r9, r9, #5
   1340c:	cmp	r3, #0
   13410:	moveq	r3, #0
   13414:	andne	r3, r9, #1
   13418:	cmp	r3, #0
   1341c:	beq	13430 <__assert_fail@plt+0x1d2c>
   13420:	ldr	r3, [sp, #20]
   13424:	ldrb	r3, [r3]
   13428:	cmp	r3, #47	; 0x2f
   1342c:	bne	13358 <__assert_fail@plt+0x1c54>
   13430:	cmp	r5, #0
   13434:	beq	1399c <__assert_fail@plt+0x2298>
   13438:	ldr	r3, [sp, #1004]	; 0x3ec
   1343c:	cmp	r3, #0
   13440:	beq	139ac <__assert_fail@plt+0x22a8>
   13444:	mov	lr, r3
   13448:	add	ip, sp, #80	; 0x50
   1344c:	ldm	lr!, {r0, r1, r2, r3}
   13450:	add	r8, sp, #88	; 0x58
   13454:	stmia	ip!, {r0, r1, r2, r3}
   13458:	ldm	lr!, {r0, r1, r2, r3}
   1345c:	ldrd	r4, [r8]
   13460:	stmia	ip!, {r0, r1, r2, r3}
   13464:	ldm	lr!, {r0, r1, r2, r3}
   13468:	stmia	ip!, {r0, r1, r2, r3}
   1346c:	orrs	r3, r4, r5
   13470:	ldm	lr, {r0, r1}
   13474:	stm	ip, {r0, r1}
   13478:	bne	13494 <__assert_fail@plt+0x1d90>
   1347c:	ldrb	r3, [fp, #41]	; 0x29
   13480:	cmp	r3, #0
   13484:	bne	13494 <__assert_fail@plt+0x1d90>
   13488:	ldrb	r3, [fp, #42]	; 0x2a
   1348c:	cmp	r3, #0
   13490:	beq	13358 <__assert_fail@plt+0x1c54>
   13494:	ldr	r3, [sp, #1004]	; 0x3ec
   13498:	cmp	r3, #0
   1349c:	beq	13a1c <__assert_fail@plt+0x2318>
   134a0:	ldr	r3, [fp, #12]
   134a4:	mov	r2, #4
   134a8:	add	r3, r3, #1
   134ac:	mov	r1, r3
   134b0:	ldr	r0, [fp, #16]
   134b4:	str	r3, [fp, #12]
   134b8:	bl	1e070 <__assert_fail@plt+0xc96c>
   134bc:	mov	r1, #4
   134c0:	ldr	r4, [fp, #12]
   134c4:	sub	r4, r4, #-1073741823	; 0xc0000001
   134c8:	mov	r5, r0
   134cc:	ldr	r0, [fp, #4]
   134d0:	str	r5, [fp, #16]
   134d4:	bl	1e0c8 <__assert_fail@plt+0xc9c4>
   134d8:	ldr	r2, [sp, #48]	; 0x30
   134dc:	ldr	r3, [pc, #1376]	; 13a44 <__assert_fail@plt+0x2340>
   134e0:	subs	r1, r2, #0
   134e4:	moveq	r1, r3
   134e8:	cmp	r6, #0
   134ec:	str	r1, [sp, #48]	; 0x30
   134f0:	str	r0, [r5, r4, lsl #2]
   134f4:	movne	r0, r6
   134f8:	moveq	r0, r3
   134fc:	bl	1e5f4 <__assert_fail@plt+0xcef0>
   13500:	cmp	r7, #0
   13504:	mov	r4, r0
   13508:	str	r0, [sp, #52]	; 0x34
   1350c:	beq	13554 <__assert_fail@plt+0x1e50>
   13510:	bl	1153c <strlen@plt>
   13514:	cmp	r0, #36	; 0x24
   13518:	bls	13554 <__assert_fail@plt+0x1e50>
   1351c:	sub	r0, r0, #36	; 0x24
   13520:	add	r0, r4, r0
   13524:	ldr	r1, [pc, #1308]	; 13a48 <__assert_fail@plt+0x2344>
   13528:	bl	116f8 <strspn@plt>
   1352c:	cmp	r0, #36	; 0x24
   13530:	bne	13554 <__assert_fail@plt+0x1e50>
   13534:	mov	r0, r4
   13538:	mov	r1, #0
   1353c:	bl	14910 <__assert_fail@plt+0x320c>
   13540:	subs	r4, r0, #0
   13544:	beq	13554 <__assert_fail@plt+0x1e50>
   13548:	ldr	r0, [sp, #52]	; 0x34
   1354c:	bl	15334 <__assert_fail@plt+0x3c30>
   13550:	str	r4, [sp, #52]	; 0x34
   13554:	ldrd	r2, [r8, #32]
   13558:	ldr	r1, [pc, #1252]	; 13a44 <__assert_fail@plt+0x2340>
   1355c:	cmp	sl, #0
   13560:	mov	r7, r3
   13564:	mov	r6, r2
   13568:	ldrd	r2, [r8, #40]	; 0x28
   1356c:	moveq	sl, r1
   13570:	mov	r1, r7
   13574:	strd	r2, [sp, #24]
   13578:	ldrd	r4, [sp, #24]
   1357c:	mvn	r3, #0
   13580:	cmp	r7, r3
   13584:	mvn	r2, #2
   13588:	cmpeq	r6, r2
   1358c:	movls	r1, #1
   13590:	movhi	r1, #0
   13594:	cmp	r5, r3
   13598:	cmpeq	r4, r2
   1359c:	andls	r3, r1, #1
   135a0:	movhi	r3, #0
   135a4:	mvn	r1, #0
   135a8:	mvn	r0, #0
   135ac:	mov	r2, #1
   135b0:	cmp	r3, #0
   135b4:	mov	r3, #0
   135b8:	strd	r0, [sp, #248]	; 0xf8
   135bc:	mov	r1, #0
   135c0:	strd	r6, [sp, #64]	; 0x40
   135c4:	strd	r6, [sp, #216]	; 0xd8
   135c8:	strd	r4, [sp, #240]	; 0xf0
   135cc:	strd	r4, [sp, #224]	; 0xe0
   135d0:	strd	r2, [sp, #208]	; 0xd0
   135d4:	strd	r2, [sp, #200]	; 0xc8
   135d8:	strb	r1, [sp, #232]	; 0xe8
   135dc:	strb	r1, [sp, #256]	; 0x100
   135e0:	bne	13770 <__assert_fail@plt+0x206c>
   135e4:	ldrd	r2, [r8, #16]
   135e8:	ldrb	lr, [sp, #112]	; 0x70
   135ec:	ldrd	r4, [r8, #8]
   135f0:	mov	r6, r2
   135f4:	mov	r7, r3
   135f8:	ldrd	r2, [r8]
   135fc:	strd	r6, [sp, #56]	; 0x38
   13600:	strd	r6, [sp, #160]	; 0xa0
   13604:	mov	r1, r3
   13608:	mvn	r3, #0
   1360c:	cmp	r7, r3
   13610:	mov	r0, r2
   13614:	mvn	r2, #2
   13618:	cmpeq	r6, r2
   1361c:	movhi	lr, #0
   13620:	andls	lr, lr, #1
   13624:	cmp	r1, r3
   13628:	cmpeq	r0, r2
   1362c:	strd	r0, [sp, #32]
   13630:	ldrd	r6, [fp, #32]
   13634:	movls	r1, #1
   13638:	movhi	r1, #0
   1363c:	cmp	r5, r3
   13640:	cmpeq	r4, r2
   13644:	movhi	r1, #0
   13648:	andls	r1, r1, #1
   1364c:	mvn	r3, #0
   13650:	cmp	r1, #0
   13654:	mvn	r2, #0
   13658:	ldrd	r0, [sp, #32]
   1365c:	strd	r6, [sp, #144]	; 0x90
   13660:	ldmdb	r8, {r6, ip}
   13664:	strd	r2, [sp, #184]	; 0xb8
   13668:	mov	r3, #0
   1366c:	strd	r4, [sp, #40]	; 0x28
   13670:	strb	lr, [sp, #168]	; 0xa8
   13674:	strd	r0, [sp, #152]	; 0x98
   13678:	strd	r4, [sp, #176]	; 0xb0
   1367c:	str	ip, [sp, #140]	; 0x8c
   13680:	str	r6, [sp, #136]	; 0x88
   13684:	strb	r3, [sp, #192]	; 0xc0
   13688:	beq	136b8 <__assert_fail@plt+0x1fb4>
   1368c:	subs	r4, r0, r4
   13690:	sbc	r5, r1, r5
   13694:	mov	r2, r4
   13698:	mov	r3, r5
   1369c:	ldrd	r4, [sp, #40]	; 0x28
   136a0:	strd	r2, [sp, #184]	; 0xb8
   136a4:	cmp	r1, r5
   136a8:	cmpeq	r0, r4
   136ac:	movcc	r1, #1
   136b0:	movcs	r1, #0
   136b4:	strb	r1, [sp, #192]	; 0xc0
   136b8:	ldrb	r3, [fp, #53]	; 0x35
   136bc:	tst	r9, r3
   136c0:	bne	13be8 <__assert_fail@plt+0x24e4>
   136c4:	ldr	r3, [fp, #4]
   136c8:	cmp	r3, #0
   136cc:	beq	13824 <__assert_fail@plt+0x2120>
   136d0:	vldr	d8, [pc, #848]	; 13a28 <__assert_fail@plt+0x2324>
   136d4:	vldr	d10, [pc, #852]	; 13a30 <__assert_fail@plt+0x232c>
   136d8:	vldr	d9, [pc, #856]	; 13a38 <__assert_fail@plt+0x2334>
   136dc:	ldr	r2, [fp, #8]
   136e0:	ldr	r9, [pc, #860]	; 13a44 <__assert_fail@plt+0x2340>
   136e4:	mov	r8, #0
   136e8:	ldr	r3, [r2, r8, lsl #2]
   136ec:	lsl	r6, r8, #2
   136f0:	ldr	r2, [r3, #8]
   136f4:	cmp	r2, #1
   136f8:	beq	1374c <__assert_fail@plt+0x2048>
   136fc:	bcc	13768 <__assert_fail@plt+0x2064>
   13700:	cmp	r2, #2
   13704:	bne	13754 <__assert_fail@plt+0x2050>
   13708:	mov	r4, #0
   1370c:	ldr	r3, [r3]
   13710:	cmp	r3, #11
   13714:	ldrls	pc, [pc, r3, lsl #2]
   13718:	b	13988 <__assert_fail@plt+0x2284>
   1371c:	andeq	r3, r1, r0, lsr r8
   13720:	andeq	r3, r1, r0, lsr #15
   13724:	andeq	r3, r1, r4, lsr #18
   13728:	andeq	r3, r1, r0, lsl r9
   1372c:	andeq	r3, r1, r4, lsr #17
   13730:	andeq	r3, r1, ip, ror #16
   13734:	andeq	r3, r1, r4, lsr #18
   13738:	andeq	r3, r1, r0, lsl r9
   1373c:	andeq	r3, r1, r4, lsr #17
   13740:	andeq	r3, r1, ip, ror #16
   13744:	andeq	r3, r1, r8, asr r8
   13748:	andeq	r3, r1, r4, asr #16
   1374c:	add	r4, sp, #200	; 0xc8
   13750:	b	1370c <__assert_fail@plt+0x2008>
   13754:	ldr	r3, [pc, #752]	; 13a4c <__assert_fail@plt+0x2348>
   13758:	ldr	r2, [pc, #752]	; 13a50 <__assert_fail@plt+0x234c>
   1375c:	ldr	r1, [pc, #752]	; 13a54 <__assert_fail@plt+0x2350>
   13760:	ldr	r0, [pc, #752]	; 13a58 <__assert_fail@plt+0x2354>
   13764:	bl	11704 <__assert_fail@plt>
   13768:	add	r4, sp, #136	; 0x88
   1376c:	b	1370c <__assert_fail@plt+0x2008>
   13770:	subs	r0, r6, r4
   13774:	sbc	r1, r7, r5
   13778:	cmp	r7, r5
   1377c:	mov	r3, r1
   13780:	cmpeq	r6, r4
   13784:	mov	r2, r0
   13788:	mov	r1, r7
   1378c:	movcc	r1, #1
   13790:	movcs	r1, #0
   13794:	strd	r2, [sp, #248]	; 0xf8
   13798:	strb	r1, [sp, #256]	; 0x100
   1379c:	b	135e4 <__assert_fail@plt+0x1ee0>
   137a0:	mov	r0, sl
   137a4:	bl	1e5f4 <__assert_fail@plt+0xcef0>
   137a8:	mov	r4, r0
   137ac:	str	r0, [sp, #76]	; 0x4c
   137b0:	ldr	r5, [pc, #676]	; 13a5c <__assert_fail@plt+0x2358>
   137b4:	ldr	r2, [r5, #336]	; 0x150
   137b8:	cmp	r2, #0
   137bc:	blt	13944 <__assert_fail@plt+0x2240>
   137c0:	ldr	r1, [pc, #664]	; 13a60 <__assert_fail@plt+0x235c>
   137c4:	cmp	r2, #0
   137c8:	ldr	r3, [pc, #660]	; 13a64 <__assert_fail@plt+0x2360>
   137cc:	mov	r0, r4
   137d0:	movne	r3, r1
   137d4:	blx	r3
   137d8:	mov	r1, #0
   137dc:	ldr	r0, [sp, #76]	; 0x4c
   137e0:	bl	18908 <__assert_fail@plt+0x7204>
   137e4:	ldr	r2, [fp, #8]
   137e8:	ldr	r1, [fp, #12]
   137ec:	ldr	lr, [fp, #16]
   137f0:	ldr	ip, [r2, r6]
   137f4:	sub	r1, r1, #-1073741823	; 0xc0000001
   137f8:	ldr	r4, [fp, #4]
   137fc:	ldr	r3, [ip, #16]
   13800:	ldr	r1, [lr, r1, lsl #2]
   13804:	add	r8, r8, #1
   13808:	ldr	lr, [sp, #76]	; 0x4c
   1380c:	cmp	r3, r0
   13810:	movcs	r0, r3
   13814:	cmp	r4, r8
   13818:	str	r0, [ip, #16]
   1381c:	str	lr, [r1, r6]
   13820:	bhi	136e8 <__assert_fail@plt+0x1fe4>
   13824:	ldr	r0, [sp, #52]	; 0x34
   13828:	bl	15334 <__assert_fail@plt+0x3c30>
   1382c:	b	13358 <__assert_fail@plt+0x1c54>
   13830:	ldr	r0, [sp, #52]	; 0x34
   13834:	bl	1e5f4 <__assert_fail@plt+0xcef0>
   13838:	mov	r4, r0
   1383c:	str	r0, [sp, #76]	; 0x4c
   13840:	b	137b0 <__assert_fail@plt+0x20ac>
   13844:	ldr	r0, [sp, #48]	; 0x30
   13848:	bl	1e5f4 <__assert_fail@plt+0xcef0>
   1384c:	mov	r4, r0
   13850:	str	r0, [sp, #76]	; 0x4c
   13854:	b	137b0 <__assert_fail@plt+0x20ac>
   13858:	ldr	r0, [sp, #20]
   1385c:	bl	1e5f4 <__assert_fail@plt+0xcef0>
   13860:	mov	r4, r0
   13864:	str	r0, [sp, #76]	; 0x4c
   13868:	b	137b0 <__assert_fail@plt+0x20ac>
   1386c:	ldrd	r0, [r4, #48]	; 0x30
   13870:	mvn	r3, #0
   13874:	mvn	r2, #2
   13878:	cmp	r1, r3
   1387c:	cmpeq	r0, r2
   13880:	strd	r0, [sp, #24]
   13884:	bls	13a70 <__assert_fail@plt+0x236c>
   13888:	mov	r0, r9
   1388c:	bl	113c8 <strdup@plt>
   13890:	mov	r4, r0
   13894:	str	r0, [sp, #76]	; 0x4c
   13898:	cmp	r4, #0
   1389c:	bne	137b0 <__assert_fail@plt+0x20ac>
   138a0:	bl	1e62c <__assert_fail@plt+0xcf28>
   138a4:	ldrb	ip, [r4, #32]
   138a8:	ldrd	r2, [r4, #24]
   138ac:	mvn	r0, #2
   138b0:	mvn	r1, #0
   138b4:	cmp	r3, r1
   138b8:	cmpeq	r2, r0
   138bc:	ldrd	r0, [r4]
   138c0:	strd	r0, [sp, #24]
   138c4:	ldrd	r0, [r4, #8]
   138c8:	bls	13958 <__assert_fail@plt+0x2254>
   138cc:	cmp	ip, #0
   138d0:	beq	1393c <__assert_fail@plt+0x2238>
   138d4:	ldr	lr, [fp, #24]
   138d8:	strd	r0, [sp, #8]
   138dc:	ldrd	r0, [sp, #24]
   138e0:	strd	r0, [sp]
   138e4:	rsbs	r0, r2, #0
   138e8:	add	r2, sp, #264	; 0x108
   138ec:	rsc	r1, r3, #0
   138f0:	add	r2, r2, ip
   138f4:	mov	r3, lr
   138f8:	bl	16e30 <__assert_fail@plt+0x572c>
   138fc:	mov	r2, #45	; 0x2d
   13900:	mov	r3, r0
   13904:	sub	r0, r0, #1
   13908:	strb	r2, [r3, #-1]
   1390c:	b	13848 <__assert_fail@plt+0x2144>
   13910:	ldrd	r2, [r4, #48]	; 0x30
   13914:	mvn	r0, #2
   13918:	mvn	r1, #0
   1391c:	ldrb	ip, [r4, #56]	; 0x38
   13920:	b	138b4 <__assert_fail@plt+0x21b0>
   13924:	ldrd	r0, [r4, #16]
   13928:	mvn	r3, #0
   1392c:	mvn	r2, #2
   13930:	cmp	r1, r3
   13934:	cmpeq	r0, r2
   13938:	bls	13b84 <__assert_fail@plt+0x2480>
   1393c:	mov	r0, r9
   13940:	b	13848 <__assert_fail@plt+0x2144>
   13944:	mov	r0, #1
   13948:	bl	116c8 <isatty@plt>
   1394c:	mov	r2, r0
   13950:	str	r0, [r5, #336]	; 0x150
   13954:	b	137c0 <__assert_fail@plt+0x20bc>
   13958:	cmp	ip, #0
   1395c:	bne	138d4 <__assert_fail@plt+0x21d0>
   13960:	ldr	ip, [fp, #24]
   13964:	strd	r0, [sp, #8]
   13968:	ldrd	r0, [sp, #24]
   1396c:	strd	r0, [sp]
   13970:	mov	r1, r3
   13974:	mov	r0, r2
   13978:	mov	r3, ip
   1397c:	add	r2, sp, #264	; 0x108
   13980:	bl	16e30 <__assert_fail@plt+0x572c>
   13984:	b	13848 <__assert_fail@plt+0x2144>
   13988:	ldr	r3, [pc, #188]	; 13a4c <__assert_fail@plt+0x2348>
   1398c:	ldr	r2, [pc, #212]	; 13a68 <__assert_fail@plt+0x2364>
   13990:	ldr	r1, [pc, #188]	; 13a54 <__assert_fail@plt+0x2350>
   13994:	ldr	r0, [pc, #208]	; 13a6c <__assert_fail@plt+0x2368>
   13998:	bl	11704 <__assert_fail@plt>
   1399c:	ldr	r3, [sp, #20]
   139a0:	subs	r5, r3, #0
   139a4:	moveq	r5, r6
   139a8:	b	13438 <__assert_fail@plt+0x1d34>
   139ac:	add	r2, sp, #80	; 0x50
   139b0:	mov	r1, r6
   139b4:	mov	r0, r5
   139b8:	bl	1538c <__assert_fail@plt+0x3c88>
   139bc:	cmp	r0, #0
   139c0:	beq	13bb4 <__assert_fail@plt+0x24b0>
   139c4:	cmp	r7, #0
   139c8:	beq	13d60 <__assert_fail@plt+0x265c>
   139cc:	bl	1156c <__errno_location@plt>
   139d0:	ldr	r4, [r0]
   139d4:	cmp	r4, #2
   139d8:	cmpne	r4, #13
   139dc:	bne	13d68 <__assert_fail@plt+0x2664>
   139e0:	ldrb	r3, [fp, #41]	; 0x29
   139e4:	cmp	r3, #0
   139e8:	beq	13358 <__assert_fail@plt+0x1c54>
   139ec:	ldrb	r1, [sp, #1004]	; 0x3ec
   139f0:	ldr	sl, [pc, #76]	; 13a44 <__assert_fail@plt+0x2340>
   139f4:	add	r8, sp, #88	; 0x58
   139f8:	mvn	r2, #0
   139fc:	mvn	r3, #0
   13a00:	strb	r1, [sp, #112]	; 0x70
   13a04:	strd	r2, [r8, #40]	; 0x28
   13a08:	strd	r2, [r8, #32]
   13a0c:	strd	r2, [r8, #16]
   13a10:	strd	r2, [r8, #8]
   13a14:	strd	r2, [r8]
   13a18:	strd	r2, [r8, #-8]
   13a1c:	mov	r3, #1
   13a20:	strb	r3, [fp, #52]	; 0x34
   13a24:	b	134a0 <__assert_fail@plt+0x1d9c>
	...
   13a34:	subsmi	r0, r9, r0
   13a38:	andeq	r0, r0, r0
   13a3c:	svccc	0x00f00000	; IMB
   13a40:	andeq	r4, r3, r0, asr #6
   13a44:	andeq	r1, r2, r0, ror #21
   13a48:	andeq	r1, r2, r4, ror #21
   13a4c:	andeq	r1, r2, r4, asr r9
   13a50:	andeq	r0, r0, r6, lsl #9
   13a54:			; <UNDEFINED> instruction: 0x00021ab4
   13a58:	strdeq	r1, [r2], -ip
   13a5c:	andeq	r4, r3, ip, ror r1
   13a60:	andeq	r2, r1, r8, ror #29
   13a64:	andeq	r2, r1, r8, lsl #28
   13a68:	andeq	r0, r0, ip, ror #9
   13a6c:	andeq	r1, r2, r8, lsl fp
   13a70:	ldrd	r0, [r4, #24]
   13a74:	cmp	r1, r3
   13a78:	cmpeq	r0, r2
   13a7c:	strd	r0, [sp, #40]	; 0x28
   13a80:	strd	r0, [sp, #32]
   13a84:	bhi	13888 <__assert_fail@plt+0x2184>
   13a88:	ldrb	r3, [r4, #56]	; 0x38
   13a8c:	cmp	r3, #0
   13a90:	bne	13d40 <__assert_fail@plt+0x263c>
   13a94:	add	r3, pc, #852	; 0x354
   13a98:	ldrd	r2, [r3]
   13a9c:	ldrd	r0, [sp, #24]
   13aa0:	cmp	r1, r3
   13aa4:	cmpeq	r0, r2
   13aa8:	bhi	13dc0 <__assert_fail@plt+0x26bc>
   13aac:	mov	r2, r0
   13ab0:	mov	r3, r1
   13ab4:	ldrd	r0, [sp, #32]
   13ab8:	adds	r2, r2, r0
   13abc:	adc	r3, r3, r1
   13ac0:	mov	r0, r2
   13ac4:	mov	r1, r3
   13ac8:	orrs	r3, r0, r1
   13acc:	strd	r0, [sp, #32]
   13ad0:	bne	13e6c <__assert_fail@plt+0x2768>
   13ad4:	ldrb	r4, [r4, #32]
   13ad8:	ldrd	r0, [sp, #24]
   13adc:	bl	2168c <__assert_fail@plt+0xff88>
   13ae0:	vmov	d11, r0, r1
   13ae4:	cmp	r4, #0
   13ae8:	ldrd	r0, [sp, #40]	; 0x28
   13aec:	beq	13db8 <__assert_fail@plt+0x26b4>
   13af0:	rsbs	r0, r0, #0
   13af4:	rsc	r1, r1, #0
   13af8:	bl	2168c <__assert_fail@plt+0xff88>
   13afc:	eor	r1, r1, #-2147483648	; 0x80000000
   13b00:	vmov	d7, r0, r1
   13b04:	vadd.f64	d6, d11, d7
   13b08:	vcmp.f64	d6, d8
   13b0c:	vmrs	APSR_nzcv, fpscr
   13b10:	beq	13888 <__assert_fail@plt+0x2184>
   13b14:	vmul.f64	d11, d11, d10
   13b18:	vdiv.f64	d7, d11, d6
   13b1c:	vcvt.s32.f64	s12, d7
   13b20:	vcvt.f64.s32	d6, s12
   13b24:	vsub.f64	d5, d6, d9
   13b28:	vcmpe.f64	d7, d5
   13b2c:	vmrs	APSR_nzcv, fpscr
   13b30:	ble	13b54 <__assert_fail@plt+0x2450>
   13b34:	vadd.f64	d5, d6, d9
   13b38:	vcmpe.f64	d7, d5
   13b3c:	vmrs	APSR_nzcv, fpscr
   13b40:	bhi	13b54 <__assert_fail@plt+0x2450>
   13b44:	vcmpe.f64	d7, d6
   13b48:	vmrs	APSR_nzcv, fpscr
   13b4c:	vaddle.f64	d5, d6, d8
   13b50:	vmov.f64	d7, d5
   13b54:	vcmpe.f64	d7, d8
   13b58:	vmrs	APSR_nzcv, fpscr
   13b5c:	blt	13888 <__assert_fail@plt+0x2184>
   13b60:	vstr	d7, [sp]
   13b64:	ldr	r2, [pc, #652]	; 13df8 <__assert_fail@plt+0x26f4>
   13b68:	mov	r1, #1
   13b6c:	add	r0, sp, #76	; 0x4c
   13b70:	bl	114b8 <__asprintf_chk@plt>
   13b74:	cmn	r0, #1
   13b78:	beq	13ba8 <__assert_fail@plt+0x24a4>
   13b7c:	ldr	r4, [sp, #76]	; 0x4c
   13b80:	b	13898 <__assert_fail@plt+0x2194>
   13b84:	ldrd	r2, [r4, #8]
   13b88:	ldr	ip, [fp, #24]
   13b8c:	strd	r2, [sp, #8]
   13b90:	ldrd	r4, [r4]
   13b94:	mov	r3, ip
   13b98:	add	r2, sp, #264	; 0x108
   13b9c:	strd	r4, [sp]
   13ba0:	bl	16e30 <__assert_fail@plt+0x572c>
   13ba4:	b	13848 <__assert_fail@plt+0x2144>
   13ba8:	mov	r3, #0
   13bac:	str	r3, [sp, #76]	; 0x4c
   13bb0:	b	138a0 <__assert_fail@plt+0x219c>
   13bb4:	cmp	r7, #0
   13bb8:	beq	13d98 <__assert_fail@plt+0x2694>
   13bbc:	ldrb	r3, [fp, #41]	; 0x29
   13bc0:	cmp	r3, #0
   13bc4:	bne	13e04 <__assert_fail@plt+0x2700>
   13bc8:	add	r8, sp, #88	; 0x58
   13bcc:	ldrd	r2, [r8]
   13bd0:	orrs	r3, r2, r3
   13bd4:	bne	13a1c <__assert_fail@plt+0x2318>
   13bd8:	ldrb	r3, [fp, #42]	; 0x2a
   13bdc:	cmp	r3, #0
   13be0:	beq	13358 <__assert_fail@plt+0x1c54>
   13be4:	b	13a1c <__assert_fail@plt+0x2318>
   13be8:	ldrd	r0, [sp, #64]	; 0x40
   13bec:	mvn	r3, #0
   13bf0:	mvn	r2, #2
   13bf4:	cmp	r1, r3
   13bf8:	cmpeq	r0, r2
   13bfc:	bhi	13c18 <__assert_fail@plt+0x2514>
   13c00:	ldrd	r2, [fp, #96]	; 0x60
   13c04:	adds	r0, r0, r2
   13c08:	adc	r1, r1, r3
   13c0c:	mov	r2, r0
   13c10:	mov	r3, r1
   13c14:	strd	r2, [fp, #96]	; 0x60
   13c18:	ldrd	r0, [sp, #24]
   13c1c:	mvn	r3, #0
   13c20:	mvn	r2, #2
   13c24:	cmp	r1, r3
   13c28:	cmpeq	r0, r2
   13c2c:	bhi	13c40 <__assert_fail@plt+0x253c>
   13c30:	ldrd	r2, [fp, #104]	; 0x68
   13c34:	adds	r0, r0, r2
   13c38:	adc	r1, r1, r3
   13c3c:	strd	r0, [fp, #104]	; 0x68
   13c40:	ldrd	r0, [sp, #32]
   13c44:	mvn	r3, #0
   13c48:	mvn	r2, #2
   13c4c:	cmp	r1, r3
   13c50:	cmpeq	r0, r2
   13c54:	bhi	13c7c <__assert_fail@plt+0x2578>
   13c58:	mov	r2, r0
   13c5c:	mul	r1, r6, r1
   13c60:	umull	r4, r5, r6, r2
   13c64:	mla	r1, ip, r2, r1
   13c68:	ldrd	r2, [fp, #64]	; 0x40
   13c6c:	add	r5, r1, r5
   13c70:	adds	r0, r2, r4
   13c74:	adc	r1, r3, r5
   13c78:	strd	r0, [fp, #64]	; 0x40
   13c7c:	ldrd	r0, [sp, #40]	; 0x28
   13c80:	mvn	r3, #0
   13c84:	mvn	r2, #2
   13c88:	cmp	r1, r3
   13c8c:	cmpeq	r0, r2
   13c90:	bhi	13cb8 <__assert_fail@plt+0x25b4>
   13c94:	mov	r2, r0
   13c98:	mul	r1, r6, r1
   13c9c:	umull	r4, r5, r6, r2
   13ca0:	mla	r1, ip, r2, r1
   13ca4:	ldrd	r2, [fp, #72]	; 0x48
   13ca8:	add	r5, r1, r5
   13cac:	adds	r0, r2, r4
   13cb0:	adc	r1, r3, r5
   13cb4:	strd	r0, [fp, #72]	; 0x48
   13cb8:	ldrd	r0, [sp, #56]	; 0x38
   13cbc:	mvn	r3, #0
   13cc0:	mvn	r2, #2
   13cc4:	cmp	r1, r3
   13cc8:	cmpeq	r0, r2
   13ccc:	bhi	136c4 <__assert_fail@plt+0x1fc0>
   13cd0:	mul	r3, r6, r1
   13cd4:	mov	r4, r0
   13cd8:	umull	r0, r1, r6, r0
   13cdc:	mla	r3, ip, r4, r3
   13ce0:	ldrb	ip, [fp, #88]	; 0x58
   13ce4:	add	r1, r3, r1
   13ce8:	cmp	ip, lr
   13cec:	beq	13f24 <__assert_fail@plt+0x2820>
   13cf0:	cmp	ip, #0
   13cf4:	bne	13ee0 <__assert_fail@plt+0x27dc>
   13cf8:	ldrd	r4, [fp, #80]	; 0x50
   13cfc:	cmp	lr, #0
   13d00:	beq	13d0c <__assert_fail@plt+0x2608>
   13d04:	rsbs	r0, r0, #0
   13d08:	rsc	r1, r1, #0
   13d0c:	cmp	r1, r5
   13d10:	cmpeq	r0, r4
   13d14:	bcs	13dd0 <__assert_fail@plt+0x26cc>
   13d18:	subs	r4, r4, r0
   13d1c:	sbc	r5, r5, r1
   13d20:	mov	r6, r4
   13d24:	mov	r7, r5
   13d28:	cmp	ip, #0
   13d2c:	beq	13dc8 <__assert_fail@plt+0x26c4>
   13d30:	rsbs	r2, r6, #0
   13d34:	rsc	r3, r7, #0
   13d38:	strd	r2, [fp, #80]	; 0x50
   13d3c:	b	136c4 <__assert_fail@plt+0x1fc0>
   13d40:	ldrd	r0, [sp, #24]
   13d44:	rsbs	r0, r0, #0
   13d48:	rsc	r1, r1, #0
   13d4c:	bl	2168c <__assert_fail@plt+0xff88>
   13d50:	ldrb	r4, [r4, #32]
   13d54:	vmov	d7, r0, r1
   13d58:	vneg.f64	d11, d7
   13d5c:	b	13ae4 <__assert_fail@plt+0x23e0>
   13d60:	bl	1156c <__errno_location@plt>
   13d64:	ldr	r4, [r0]
   13d68:	mov	r2, r5
   13d6c:	mov	r1, #3
   13d70:	mov	r0, #0
   13d74:	bl	1c344 <__assert_fail@plt+0xac40>
   13d78:	mov	r1, r4
   13d7c:	ldr	r2, [pc, #120]	; 13dfc <__assert_fail@plt+0x26f8>
   13d80:	mov	r3, r0
   13d84:	mov	r0, #0
   13d88:	bl	11494 <error@plt>
   13d8c:	mov	r3, #1
   13d90:	str	r3, [fp, #48]	; 0x30
   13d94:	b	13358 <__assert_fail@plt+0x1c54>
   13d98:	add	r8, sp, #88	; 0x58
   13d9c:	ldrd	r2, [r8]
   13da0:	orrs	r3, r2, r3
   13da4:	bne	13a1c <__assert_fail@plt+0x2318>
   13da8:	ldrb	r3, [fp, #41]	; 0x29
   13dac:	cmp	r3, #0
   13db0:	bne	13a1c <__assert_fail@plt+0x2318>
   13db4:	b	13488 <__assert_fail@plt+0x1d84>
   13db8:	bl	2168c <__assert_fail@plt+0xff88>
   13dbc:	b	13b00 <__assert_fail@plt+0x23fc>
   13dc0:	ldrb	r4, [r4, #32]
   13dc4:	b	13adc <__assert_fail@plt+0x23d8>
   13dc8:	strd	r6, [fp, #80]	; 0x50
   13dcc:	b	136c4 <__assert_fail@plt+0x1fc0>
   13dd0:	subs	r0, r0, r4
   13dd4:	sbc	r1, r1, r5
   13dd8:	mov	r6, r0
   13ddc:	mov	r7, r1
   13de0:	mov	ip, lr
   13de4:	strb	lr, [fp, #88]	; 0x58
   13de8:	b	13d28 <__assert_fail@plt+0x2624>
   13dec:	nop			; (mov r0, r0)
   13df0:			; <UNDEFINED> instruction: 0xf5c28f5c
   13df4:	addeq	r5, pc, #40, 24	; 0x2800
   13df8:	andeq	r1, r2, r0, lsl fp
   13dfc:	andeq	r2, r2, r4, lsl #20
   13e00:	andeq	r1, r2, r0, ror #21
   13e04:	mov	r1, r5
   13e08:	add	r2, sp, #264	; 0x108
   13e0c:	mov	r0, #3
   13e10:	bl	116bc <__xstat64@plt>
   13e14:	cmp	r0, #0
   13e18:	bne	13d98 <__assert_fail@plt+0x2694>
   13e1c:	add	r3, sp, #264	; 0x108
   13e20:	ldrd	r0, [r3]
   13e24:	bl	12e90 <__assert_fail@plt+0x178c>
   13e28:	cmp	r0, #0
   13e2c:	beq	13d98 <__assert_fail@plt+0x2694>
   13e30:	ldr	r5, [r0, #8]
   13e34:	cmp	r5, #0
   13e38:	beq	13d98 <__assert_fail@plt+0x2694>
   13e3c:	mov	r1, r6
   13e40:	ldr	r0, [r5]
   13e44:	bl	11320 <strcmp@plt>
   13e48:	cmp	r0, #0
   13e4c:	beq	13d98 <__assert_fail@plt+0x2694>
   13e50:	ldrb	r3, [r5, #24]
   13e54:	add	r8, sp, #88	; 0x58
   13e58:	and	r4, r4, r3, lsr #1
   13e5c:	tst	r4, #1
   13e60:	beq	13ef4 <__assert_fail@plt+0x27f0>
   13e64:	ldrd	r2, [r8]
   13e68:	b	13da0 <__assert_fail@plt+0x269c>
   13e6c:	mov	r3, r1
   13e70:	ldrd	r0, [sp, #24]
   13e74:	ldrb	r4, [r4, #32]
   13e78:	cmp	r1, r3
   13e7c:	cmpeq	r0, r2
   13e80:	movhi	r3, #1
   13e84:	movls	r3, #0
   13e88:	cmp	r3, r4
   13e8c:	bne	13adc <__assert_fail@plt+0x23d8>
   13e90:	mov	ip, #100	; 0x64
   13e94:	ldrd	r2, [sp, #32]
   13e98:	umull	r4, r5, r0, ip
   13e9c:	mla	r5, ip, r1, r5
   13ea0:	mov	r0, r4
   13ea4:	mov	r1, r5
   13ea8:	bl	21700 <__assert_fail@plt+0xfffc>
   13eac:	mov	r0, r4
   13eb0:	mov	r1, r5
   13eb4:	mov	r5, #0
   13eb8:	orrs	r3, r2, r3
   13ebc:	ldrd	r2, [sp, #32]
   13ec0:	movne	r4, #1
   13ec4:	moveq	r4, #0
   13ec8:	bl	21700 <__assert_fail@plt+0xfffc>
   13ecc:	adds	r0, r0, r4
   13ed0:	adc	r1, r1, r5
   13ed4:	bl	2168c <__assert_fail@plt+0xff88>
   13ed8:	vmov	d7, r0, r1
   13edc:	b	13b54 <__assert_fail@plt+0x2450>
   13ee0:	ldrd	r2, [fp, #80]	; 0x50
   13ee4:	rsbs	r4, r2, #0
   13ee8:	rsc	r5, r3, #0
   13eec:	strd	r4, [fp, #80]	; 0x50
   13ef0:	b	13cfc <__assert_fail@plt+0x25f8>
   13ef4:	ldrb	r1, [sp, #1004]	; 0x3ec
   13ef8:	mvn	r2, #0
   13efc:	mvn	r3, #0
   13f00:	strb	r1, [sp, #112]	; 0x70
   13f04:	strd	r2, [r8, #40]	; 0x28
   13f08:	strd	r2, [r8, #32]
   13f0c:	strd	r2, [r8, #16]
   13f10:	strd	r2, [r8, #8]
   13f14:	strd	r2, [r8]
   13f18:	strd	r2, [r8, #-8]
   13f1c:	ldr	sl, [pc, #-292]	; 13e00 <__assert_fail@plt+0x26fc>
   13f20:	b	13da0 <__assert_fail@plt+0x269c>
   13f24:	ldrd	r2, [fp, #80]	; 0x50
   13f28:	adds	r4, r2, r0
   13f2c:	adc	r5, r3, r1
   13f30:	strd	r4, [fp, #80]	; 0x50
   13f34:	b	136c4 <__assert_fail@plt+0x1fc0>
   13f38:	subs	r5, r0, #0
   13f3c:	push	{r7, lr}
   13f40:	sub	sp, sp, #56	; 0x38
   13f44:	beq	13f80 <__assert_fail@plt+0x287c>
   13f48:	ldr	r3, [pc, #836]	; 14294 <__assert_fail@plt+0x2b90>
   13f4c:	mov	r2, #5
   13f50:	ldr	r1, [pc, #832]	; 14298 <__assert_fail@plt+0x2b94>
   13f54:	mov	r0, #0
   13f58:	ldr	r4, [r3]
   13f5c:	bl	113bc <dcgettext@plt>
   13f60:	ldr	r3, [pc, #820]	; 1429c <__assert_fail@plt+0x2b98>
   13f64:	mov	r1, #1
   13f68:	ldr	r3, [r3]
   13f6c:	mov	r2, r0
   13f70:	mov	r0, r4
   13f74:	bl	115c0 <__fprintf_chk@plt>
   13f78:	mov	r0, r5
   13f7c:	bl	11530 <exit@plt>
   13f80:	mov	r2, #5
   13f84:	ldr	r1, [pc, #788]	; 142a0 <__assert_fail@plt+0x2b9c>
   13f88:	bl	113bc <dcgettext@plt>
   13f8c:	ldr	r3, [pc, #776]	; 1429c <__assert_fail@plt+0x2b98>
   13f90:	ldr	r6, [pc, #780]	; 142a4 <__assert_fail@plt+0x2ba0>
   13f94:	ldr	r4, [pc, #780]	; 142a8 <__assert_fail@plt+0x2ba4>
   13f98:	ldr	r2, [r3]
   13f9c:	mov	r1, r0
   13fa0:	mov	r0, #1
   13fa4:	bl	1159c <__printf_chk@plt>
   13fa8:	mov	r2, #5
   13fac:	ldr	r1, [pc, #760]	; 142ac <__assert_fail@plt+0x2ba8>
   13fb0:	mov	r0, r5
   13fb4:	bl	113bc <dcgettext@plt>
   13fb8:	ldr	r1, [r6]
   13fbc:	bl	112f0 <fputs_unlocked@plt>
   13fc0:	mov	r2, #5
   13fc4:	ldr	r1, [pc, #740]	; 142b0 <__assert_fail@plt+0x2bac>
   13fc8:	mov	r0, r5
   13fcc:	bl	113bc <dcgettext@plt>
   13fd0:	ldr	r1, [r6]
   13fd4:	bl	112f0 <fputs_unlocked@plt>
   13fd8:	mov	r2, #5
   13fdc:	ldr	r1, [pc, #720]	; 142b4 <__assert_fail@plt+0x2bb0>
   13fe0:	mov	r0, r5
   13fe4:	bl	113bc <dcgettext@plt>
   13fe8:	ldr	r1, [r6]
   13fec:	bl	112f0 <fputs_unlocked@plt>
   13ff0:	mov	r2, #5
   13ff4:	ldr	r1, [pc, #700]	; 142b8 <__assert_fail@plt+0x2bb4>
   13ff8:	mov	r0, r5
   13ffc:	bl	113bc <dcgettext@plt>
   14000:	ldr	r1, [r6]
   14004:	bl	112f0 <fputs_unlocked@plt>
   14008:	mov	r2, #5
   1400c:	ldr	r1, [pc, #680]	; 142bc <__assert_fail@plt+0x2bb8>
   14010:	mov	r0, r5
   14014:	bl	113bc <dcgettext@plt>
   14018:	ldr	r1, [r6]
   1401c:	bl	112f0 <fputs_unlocked@plt>
   14020:	mov	r2, #5
   14024:	ldr	r1, [pc, #660]	; 142c0 <__assert_fail@plt+0x2bbc>
   14028:	mov	r0, r5
   1402c:	bl	113bc <dcgettext@plt>
   14030:	ldr	r1, [r6]
   14034:	bl	112f0 <fputs_unlocked@plt>
   14038:	mov	r2, #5
   1403c:	ldr	r1, [pc, #640]	; 142c4 <__assert_fail@plt+0x2bc0>
   14040:	mov	r0, r5
   14044:	bl	113bc <dcgettext@plt>
   14048:	ldr	r1, [r6]
   1404c:	bl	112f0 <fputs_unlocked@plt>
   14050:	mov	r2, #5
   14054:	ldr	r1, [pc, #620]	; 142c8 <__assert_fail@plt+0x2bc4>
   14058:	mov	r0, r5
   1405c:	bl	113bc <dcgettext@plt>
   14060:	ldr	r1, [r6]
   14064:	bl	112f0 <fputs_unlocked@plt>
   14068:	mov	r2, #5
   1406c:	ldr	r1, [pc, #600]	; 142cc <__assert_fail@plt+0x2bc8>
   14070:	mov	r0, r5
   14074:	bl	113bc <dcgettext@plt>
   14078:	ldr	r1, [r6]
   1407c:	bl	112f0 <fputs_unlocked@plt>
   14080:	mov	r2, #5
   14084:	ldr	r1, [pc, #580]	; 142d0 <__assert_fail@plt+0x2bcc>
   14088:	mov	r0, r5
   1408c:	bl	113bc <dcgettext@plt>
   14090:	ldr	r2, [pc, #572]	; 142d4 <__assert_fail@plt+0x2bd0>
   14094:	mov	r1, r0
   14098:	mov	r0, #1
   1409c:	bl	1159c <__printf_chk@plt>
   140a0:	mov	r2, #5
   140a4:	ldr	r1, [pc, #556]	; 142d8 <__assert_fail@plt+0x2bd4>
   140a8:	mov	r0, r5
   140ac:	bl	113bc <dcgettext@plt>
   140b0:	ldr	r1, [r6]
   140b4:	bl	112f0 <fputs_unlocked@plt>
   140b8:	mov	r2, #5
   140bc:	ldr	r1, [pc, #536]	; 142dc <__assert_fail@plt+0x2bd8>
   140c0:	mov	r0, r5
   140c4:	bl	113bc <dcgettext@plt>
   140c8:	ldr	r1, [r6]
   140cc:	bl	112f0 <fputs_unlocked@plt>
   140d0:	ldm	r4!, {r0, r1, r2, r3}
   140d4:	mov	lr, sp
   140d8:	stmia	lr!, {r0, r1, r2, r3}
   140dc:	ldm	r4!, {r0, r1, r2, r3}
   140e0:	ldr	ip, [sp]
   140e4:	stmia	lr!, {r0, r1, r2, r3}
   140e8:	cmp	ip, #0
   140ec:	ldm	r4!, {r0, r1, r2, r3}
   140f0:	stmia	lr!, {r0, r1, r2, r3}
   140f4:	ldm	r4, {r0, r1}
   140f8:	moveq	r4, sp
   140fc:	stm	lr, {r0, r1}
   14100:	beq	14130 <__assert_fail@plt+0x2a2c>
   14104:	ldr	r7, [pc, #468]	; 142e0 <__assert_fail@plt+0x2bdc>
   14108:	mov	r4, sp
   1410c:	b	1411c <__assert_fail@plt+0x2a18>
   14110:	ldr	ip, [r4, #8]!
   14114:	cmp	ip, #0
   14118:	beq	14130 <__assert_fail@plt+0x2a2c>
   1411c:	mov	r1, ip
   14120:	mov	r0, r7
   14124:	bl	11320 <strcmp@plt>
   14128:	cmp	r0, #0
   1412c:	bne	14110 <__assert_fail@plt+0x2a0c>
   14130:	ldr	r4, [r4, #4]
   14134:	mov	r2, #5
   14138:	cmp	r4, #0
   1413c:	ldr	r1, [pc, #416]	; 142e4 <__assert_fail@plt+0x2be0>
   14140:	beq	141e8 <__assert_fail@plt+0x2ae4>
   14144:	mov	r0, #0
   14148:	bl	113bc <dcgettext@plt>
   1414c:	ldr	r3, [pc, #404]	; 142e8 <__assert_fail@plt+0x2be4>
   14150:	ldr	r2, [pc, #404]	; 142ec <__assert_fail@plt+0x2be8>
   14154:	mov	r1, r0
   14158:	mov	r0, #1
   1415c:	bl	1159c <__printf_chk@plt>
   14160:	mov	r1, #0
   14164:	mov	r0, #5
   14168:	bl	11614 <setlocale@plt>
   1416c:	cmp	r0, #0
   14170:	ldreq	r7, [pc, #360]	; 142e0 <__assert_fail@plt+0x2bdc>
   14174:	beq	14190 <__assert_fail@plt+0x2a8c>
   14178:	mov	r2, #3
   1417c:	ldr	r1, [pc, #364]	; 142f0 <__assert_fail@plt+0x2bec>
   14180:	bl	116d4 <strncmp@plt>
   14184:	ldr	r7, [pc, #340]	; 142e0 <__assert_fail@plt+0x2bdc>
   14188:	cmp	r0, #0
   1418c:	bne	14278 <__assert_fail@plt+0x2b74>
   14190:	mov	r2, #5
   14194:	ldr	r1, [pc, #344]	; 142f4 <__assert_fail@plt+0x2bf0>
   14198:	mov	r0, #0
   1419c:	bl	113bc <dcgettext@plt>
   141a0:	ldr	r3, [pc, #312]	; 142e0 <__assert_fail@plt+0x2bdc>
   141a4:	ldr	r2, [pc, #316]	; 142e8 <__assert_fail@plt+0x2be4>
   141a8:	mov	r1, r0
   141ac:	mov	r0, #1
   141b0:	bl	1159c <__printf_chk@plt>
   141b4:	mov	r2, #5
   141b8:	ldr	r1, [pc, #312]	; 142f8 <__assert_fail@plt+0x2bf4>
   141bc:	mov	r0, #0
   141c0:	bl	113bc <dcgettext@plt>
   141c4:	ldr	r2, [pc, #304]	; 142fc <__assert_fail@plt+0x2bf8>
   141c8:	cmp	r4, r7
   141cc:	ldr	r3, [pc, #300]	; 14300 <__assert_fail@plt+0x2bfc>
   141d0:	movne	r3, r2
   141d4:	mov	r1, r0
   141d8:	mov	r2, r4
   141dc:	mov	r0, #1
   141e0:	bl	1159c <__printf_chk@plt>
   141e4:	b	13f78 <__assert_fail@plt+0x2874>
   141e8:	mov	r0, r4
   141ec:	bl	113bc <dcgettext@plt>
   141f0:	ldr	r3, [pc, #240]	; 142e8 <__assert_fail@plt+0x2be4>
   141f4:	ldr	r2, [pc, #240]	; 142ec <__assert_fail@plt+0x2be8>
   141f8:	mov	r1, r0
   141fc:	mov	r0, #1
   14200:	bl	1159c <__printf_chk@plt>
   14204:	mov	r1, r4
   14208:	mov	r0, #5
   1420c:	bl	11614 <setlocale@plt>
   14210:	cmp	r0, #0
   14214:	beq	1422c <__assert_fail@plt+0x2b28>
   14218:	mov	r2, #3
   1421c:	ldr	r1, [pc, #204]	; 142f0 <__assert_fail@plt+0x2bec>
   14220:	bl	116d4 <strncmp@plt>
   14224:	cmp	r0, #0
   14228:	bne	14270 <__assert_fail@plt+0x2b6c>
   1422c:	mov	r2, #5
   14230:	ldr	r1, [pc, #188]	; 142f4 <__assert_fail@plt+0x2bf0>
   14234:	mov	r0, #0
   14238:	bl	113bc <dcgettext@plt>
   1423c:	ldr	r3, [pc, #156]	; 142e0 <__assert_fail@plt+0x2bdc>
   14240:	ldr	r2, [pc, #160]	; 142e8 <__assert_fail@plt+0x2be4>
   14244:	mov	r4, r3
   14248:	mov	r1, r0
   1424c:	mov	r0, #1
   14250:	bl	1159c <__printf_chk@plt>
   14254:	ldr	r1, [pc, #156]	; 142f8 <__assert_fail@plt+0x2bf4>
   14258:	mov	r2, #5
   1425c:	mov	r0, #0
   14260:	bl	113bc <dcgettext@plt>
   14264:	ldr	r3, [pc, #148]	; 14300 <__assert_fail@plt+0x2bfc>
   14268:	mov	r1, r0
   1426c:	b	141d8 <__assert_fail@plt+0x2ad4>
   14270:	ldr	r7, [pc, #104]	; 142e0 <__assert_fail@plt+0x2bdc>
   14274:	mov	r4, r7
   14278:	mov	r2, #5
   1427c:	ldr	r1, [pc, #128]	; 14304 <__assert_fail@plt+0x2c00>
   14280:	mov	r0, #0
   14284:	bl	113bc <dcgettext@plt>
   14288:	ldr	r1, [r6]
   1428c:	bl	112f0 <fputs_unlocked@plt>
   14290:	b	14190 <__assert_fail@plt+0x2a8c>
   14294:	andeq	r4, r3, r0, lsr r3
   14298:	andeq	r1, r2, r0, lsr fp
   1429c:	andeq	r4, r3, r4, asr #7
   142a0:	andeq	r1, r2, r8, asr fp
   142a4:	andeq	r4, r3, r4, lsr r3
   142a8:	andeq	r1, r2, ip, asr r9
   142ac:	andeq	r1, r2, ip, ror fp
   142b0:	andeq	r1, r2, r0, ror #23
   142b4:	andeq	r1, r2, ip, lsr #24
   142b8:	andeq	r1, r2, r8, asr #27
   142bc:	andeq	r1, r2, r8, asr #29
   142c0:	ldrdeq	r1, [r2], -r4
   142c4:	andeq	r2, r2, r8, asr r0
   142c8:	andeq	r2, r2, r8, lsr r1
   142cc:	andeq	r2, r2, r8, ror #2
   142d0:	andeq	r2, r2, r0, lsr #3
   142d4:	andeq	r2, r2, r0, lsl #5
   142d8:	andeq	r2, r2, r4, lsl #5
   142dc:	andeq	r2, r2, r8, asr r3
   142e0:	andeq	r1, r2, ip, lsr #22
   142e4:	andeq	r2, r2, r4, lsr r4
   142e8:	andeq	r2, r2, ip, asr #8
   142ec:	andeq	r2, r2, r4, ror r4
   142f0:	andeq	r2, r2, r4, lsl #9
   142f4:	ldrdeq	r2, [r2], -r0
   142f8:	andeq	r2, r2, ip, ror #9
   142fc:	andeq	r2, r2, r4, ror sl
   14300:	andeq	r2, r2, ip, lsl #15
   14304:	andeq	r2, r2, r8, lsl #9
   14308:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1430c:	sub	sp, sp, #12
   14310:	bl	1e5f4 <__assert_fail@plt+0xcef0>
   14314:	ldr	r4, [pc, #792]	; 14634 <__assert_fail@plt+0x2f30>
   14318:	ldr	r6, [pc, #792]	; 14638 <__assert_fail@plt+0x2f34>
   1431c:	ldr	fp, [pc, #792]	; 1463c <__assert_fail@plt+0x2f38>
   14320:	add	sl, r4, #56	; 0x38
   14324:	mov	r9, #44	; 0x2c
   14328:	mov	r7, r0
   1432c:	str	r0, [sp, #4]
   14330:	mov	r1, r9
   14334:	mov	r0, r7
   14338:	bl	11548 <strchr@plt>
   1433c:	mov	r1, r7
   14340:	subs	r5, r0, #0
   14344:	movne	r3, #0
   14348:	strbne	r3, [r5]
   1434c:	ldr	r0, [r4, #4]
   14350:	addne	r5, r5, #1
   14354:	bl	11320 <strcmp@plt>
   14358:	cmp	r0, #0
   1435c:	beq	14474 <__assert_fail@plt+0x2d70>
   14360:	mov	r1, r7
   14364:	ldr	r0, [r4, #32]
   14368:	bl	11320 <strcmp@plt>
   1436c:	cmp	r0, #0
   14370:	beq	144ec <__assert_fail@plt+0x2de8>
   14374:	mov	r1, r7
   14378:	ldr	r0, [r4, #60]	; 0x3c
   1437c:	bl	11320 <strcmp@plt>
   14380:	cmp	r0, #0
   14384:	beq	144f4 <__assert_fail@plt+0x2df0>
   14388:	mov	r1, r7
   1438c:	ldr	r0, [r4, #88]	; 0x58
   14390:	bl	11320 <strcmp@plt>
   14394:	cmp	r0, #0
   14398:	beq	14548 <__assert_fail@plt+0x2e44>
   1439c:	mov	r1, r7
   143a0:	ldr	r0, [r4, #116]	; 0x74
   143a4:	bl	11320 <strcmp@plt>
   143a8:	cmp	r0, #0
   143ac:	beq	14550 <__assert_fail@plt+0x2e4c>
   143b0:	mov	r1, r7
   143b4:	ldr	r0, [r4, #144]	; 0x90
   143b8:	bl	11320 <strcmp@plt>
   143bc:	cmp	r0, #0
   143c0:	beq	145ac <__assert_fail@plt+0x2ea8>
   143c4:	mov	r1, r7
   143c8:	ldr	r0, [r4, #172]	; 0xac
   143cc:	bl	11320 <strcmp@plt>
   143d0:	cmp	r0, #0
   143d4:	beq	145b4 <__assert_fail@plt+0x2eb0>
   143d8:	mov	r1, r7
   143dc:	ldr	r0, [r4, #200]	; 0xc8
   143e0:	bl	11320 <strcmp@plt>
   143e4:	cmp	r0, #0
   143e8:	beq	145bc <__assert_fail@plt+0x2eb8>
   143ec:	mov	r1, r7
   143f0:	ldr	r0, [r4, #228]	; 0xe4
   143f4:	bl	11320 <strcmp@plt>
   143f8:	cmp	r0, #0
   143fc:	beq	145c4 <__assert_fail@plt+0x2ec0>
   14400:	mov	r1, r7
   14404:	ldr	r0, [r4, #256]	; 0x100
   14408:	bl	11320 <strcmp@plt>
   1440c:	cmp	r0, #0
   14410:	beq	145cc <__assert_fail@plt+0x2ec8>
   14414:	mov	r1, r7
   14418:	ldr	r0, [r4, #284]	; 0x11c
   1441c:	bl	11320 <strcmp@plt>
   14420:	cmp	r0, #0
   14424:	beq	145d4 <__assert_fail@plt+0x2ed0>
   14428:	mov	r1, r7
   1442c:	ldr	r0, [r4, #312]	; 0x138
   14430:	bl	11320 <strcmp@plt>
   14434:	cmp	r0, #0
   14438:	beq	145dc <__assert_fail@plt+0x2ed8>
   1443c:	mov	r2, #5
   14440:	ldr	r1, [pc, #504]	; 14640 <__assert_fail@plt+0x2f3c>
   14444:	mov	r0, #0
   14448:	bl	113bc <dcgettext@plt>
   1444c:	mov	r4, r0
   14450:	mov	r0, r7
   14454:	bl	1d238 <__assert_fail@plt+0xbb34>
   14458:	mov	r2, r4
   1445c:	mov	r3, r0
   14460:	mov	r1, #0
   14464:	mov	r0, r1
   14468:	bl	11494 <error@plt>
   1446c:	mov	r0, #1
   14470:	bl	13f38 <__assert_fail@plt+0x2834>
   14474:	mov	r8, r0
   14478:	lsl	r3, r8, #3
   1447c:	sub	r7, r3, r8
   14480:	add	r7, r4, r7, lsl #2
   14484:	ldrb	r2, [r7, #24]
   14488:	cmp	r2, #0
   1448c:	bne	145ec <__assert_fail@plt+0x2ee8>
   14490:	ldr	r3, [r6, #4]
   14494:	mov	r2, #4
   14498:	add	r3, r3, #1
   1449c:	mov	r1, r3
   144a0:	ldr	r0, [r6, #8]
   144a4:	str	r3, [r6, #4]
   144a8:	bl	1e070 <__assert_fail@plt+0xc96c>
   144ac:	ldrb	r2, [r7, #24]
   144b0:	ldr	r3, [r6, #4]
   144b4:	sub	r3, r3, #-1073741823	; 0xc0000001
   144b8:	cmp	r2, #0
   144bc:	str	r0, [r6, #8]
   144c0:	str	r7, [r0, r3, lsl #2]
   144c4:	bne	14630 <__assert_fail@plt+0x2f2c>
   144c8:	mov	r3, #1
   144cc:	strb	r3, [r7, #24]
   144d0:	cmp	r5, #0
   144d4:	mov	r7, r5
   144d8:	bne	14330 <__assert_fail@plt+0x2c2c>
   144dc:	ldr	r0, [sp, #4]
   144e0:	add	sp, sp, #12
   144e4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   144e8:	b	15334 <__assert_fail@plt+0x3c30>
   144ec:	mov	r8, #1
   144f0:	b	14478 <__assert_fail@plt+0x2d74>
   144f4:	ldrb	r3, [r4, #80]	; 0x50
   144f8:	cmp	r3, #0
   144fc:	bne	145e4 <__assert_fail@plt+0x2ee0>
   14500:	ldr	r3, [r6, #4]
   14504:	mov	r2, #4
   14508:	add	r3, r3, #1
   1450c:	mov	r1, r3
   14510:	ldr	r0, [r6, #8]
   14514:	str	r3, [r6, #4]
   14518:	bl	1e070 <__assert_fail@plt+0xc96c>
   1451c:	ldrb	r2, [r4, #80]	; 0x50
   14520:	ldr	r3, [r6, #4]
   14524:	sub	r3, r3, #-1073741823	; 0xc0000001
   14528:	cmp	r2, #0
   1452c:	str	sl, [r0, r3, lsl #2]
   14530:	str	r0, [r6, #8]
   14534:	str	fp, [r4, #68]	; 0x44
   14538:	bne	14630 <__assert_fail@plt+0x2f2c>
   1453c:	mov	r3, #1
   14540:	strb	r3, [r4, #80]	; 0x50
   14544:	b	144d0 <__assert_fail@plt+0x2dcc>
   14548:	mov	r8, #3
   1454c:	b	14478 <__assert_fail@plt+0x2d74>
   14550:	ldrb	r3, [r4, #136]	; 0x88
   14554:	cmp	r3, #0
   14558:	bne	14624 <__assert_fail@plt+0x2f20>
   1455c:	ldr	r3, [r6, #4]
   14560:	mov	r2, #4
   14564:	add	r3, r3, #1
   14568:	mov	r1, r3
   1456c:	ldr	r0, [r6, #8]
   14570:	str	r3, [r6, #4]
   14574:	bl	1e070 <__assert_fail@plt+0xc96c>
   14578:	ldrb	r2, [r4, #136]	; 0x88
   1457c:	ldr	r3, [r6, #4]
   14580:	cmp	r2, #0
   14584:	sub	r3, r3, #-1073741823	; 0xc0000001
   14588:	ldr	r2, [pc, #180]	; 14644 <__assert_fail@plt+0x2f40>
   1458c:	str	r2, [r0, r3, lsl #2]
   14590:	ldr	r3, [pc, #176]	; 14648 <__assert_fail@plt+0x2f44>
   14594:	str	r0, [r6, #8]
   14598:	str	r3, [r4, #124]	; 0x7c
   1459c:	bne	14630 <__assert_fail@plt+0x2f2c>
   145a0:	mov	r3, #1
   145a4:	strb	r3, [r4, #136]	; 0x88
   145a8:	b	144d0 <__assert_fail@plt+0x2dcc>
   145ac:	mov	r8, #5
   145b0:	b	14478 <__assert_fail@plt+0x2d74>
   145b4:	mov	r8, #6
   145b8:	b	14478 <__assert_fail@plt+0x2d74>
   145bc:	mov	r8, #7
   145c0:	b	14478 <__assert_fail@plt+0x2d74>
   145c4:	mov	r8, #8
   145c8:	b	14478 <__assert_fail@plt+0x2d74>
   145cc:	mov	r8, #9
   145d0:	b	14478 <__assert_fail@plt+0x2d74>
   145d4:	mov	r8, #10
   145d8:	b	14478 <__assert_fail@plt+0x2d74>
   145dc:	mov	r8, #11
   145e0:	b	14478 <__assert_fail@plt+0x2d74>
   145e4:	mov	r8, #2
   145e8:	mov	r3, #16
   145ec:	mov	r2, #5
   145f0:	ldr	r1, [pc, #84]	; 1464c <__assert_fail@plt+0x2f48>
   145f4:	mov	r0, #0
   145f8:	str	r3, [sp, #4]
   145fc:	bl	113bc <dcgettext@plt>
   14600:	ldr	r3, [sp, #4]
   14604:	sub	r3, r3, r8
   14608:	add	r4, r4, r3, lsl #2
   1460c:	mov	r5, r0
   14610:	ldr	r0, [r4, #4]
   14614:	bl	1d238 <__assert_fail@plt+0xbb34>
   14618:	mov	r2, r5
   1461c:	mov	r3, r0
   14620:	b	14460 <__assert_fail@plt+0x2d5c>
   14624:	mov	r8, #4
   14628:	mov	r3, #32
   1462c:	b	145ec <__assert_fail@plt+0x2ee8>
   14630:	bl	11710 <__assert_fail@plt+0xc>
   14634:	andeq	r4, r3, ip, ror r1
   14638:	andeq	r4, r3, r0, asr #6
   1463c:	andeq	r2, r2, r4, ror r5
   14640:	andeq	r2, r2, r0, lsr #10
   14644:	andeq	r4, r3, ip, ror #3
   14648:	andeq	r2, r2, ip, ror r5
   1464c:	andeq	r2, r2, r4, asr #10
   14650:	push	{r4, r5, r6, r7, r8, fp, lr}
   14654:	add	fp, sp, #24
   14658:	mov	r7, r0
   1465c:	sub	sp, sp, #220	; 0xdc
   14660:	sub	r0, fp, #244	; 0xf4
   14664:	mov	r4, r1
   14668:	bl	1d3b8 <__assert_fail@plt+0xbcb4>
   1466c:	subs	r6, r0, #0
   14670:	bne	148a0 <__assert_fail@plt+0x319c>
   14674:	ldr	r3, [r4, #16]
   14678:	and	r3, r3, #61440	; 0xf000
   1467c:	cmp	r3, #16384	; 0x4000
   14680:	beq	147dc <__assert_fail@plt+0x30d8>
   14684:	mov	r0, r7
   14688:	bl	15110 <__assert_fail@plt+0x3a0c>
   1468c:	mov	r4, r0
   14690:	bl	1153c <strlen@plt>
   14694:	mov	r1, r4
   14698:	add	r3, r0, #15
   1469c:	bic	r3, r3, #7
   146a0:	sub	sp, sp, r3
   146a4:	add	r2, r0, #1
   146a8:	mov	r0, sp
   146ac:	bl	11374 <memcpy@plt>
   146b0:	mov	r7, r0
   146b4:	mov	r0, r4
   146b8:	bl	15334 <__assert_fail@plt+0x3c30>
   146bc:	mov	r0, r7
   146c0:	bl	11404 <chdir@plt>
   146c4:	cmp	r0, #0
   146c8:	blt	14800 <__assert_fail@plt+0x30fc>
   146cc:	sub	r5, fp, #236	; 0xec
   146d0:	mov	r2, r5
   146d4:	ldr	r1, [pc, #536]	; 148f4 <__assert_fail@plt+0x31f0>
   146d8:	mov	r0, #3
   146dc:	bl	116bc <__xstat64@plt>
   146e0:	cmp	r0, #0
   146e4:	blt	14858 <__assert_fail@plt+0x3154>
   146e8:	ldr	r4, [pc, #520]	; 148f8 <__assert_fail@plt+0x31f4>
   146ec:	mov	r6, #3
   146f0:	mov	r7, #104	; 0x68
   146f4:	b	14740 <__assert_fail@plt+0x303c>
   146f8:	ldrd	r0, [fp, #-132]	; 0xffffff7c
   146fc:	ldrd	r2, [fp, #-236]	; 0xffffff14
   14700:	cmp	r1, r3
   14704:	cmpeq	r0, r2
   14708:	bne	147c8 <__assert_fail@plt+0x30c4>
   1470c:	ldrd	r0, [fp, #-36]	; 0xffffffdc
   14710:	ldrd	r2, [fp, #-140]	; 0xffffff74
   14714:	cmp	r1, r3
   14718:	cmpeq	r0, r2
   1471c:	beq	147c8 <__assert_fail@plt+0x30c4>
   14720:	mov	r0, r4
   14724:	bl	11404 <chdir@plt>
   14728:	cmp	r0, #0
   1472c:	blt	14844 <__assert_fail@plt+0x3140>
   14730:	mov	r2, r7
   14734:	sub	r1, fp, #132	; 0x84
   14738:	mov	r0, r5
   1473c:	bl	11374 <memcpy@plt>
   14740:	sub	r2, fp, #132	; 0x84
   14744:	mov	r1, r4
   14748:	mov	r0, r6
   1474c:	bl	116bc <__xstat64@plt>
   14750:	cmp	r0, #0
   14754:	bge	146f8 <__assert_fail@plt+0x2ff4>
   14758:	bl	1156c <__errno_location@plt>
   1475c:	ldr	r1, [pc, #408]	; 148fc <__assert_fail@plt+0x31f8>
   14760:	mov	r2, #5
   14764:	mov	r4, r0
   14768:	mov	r0, #0
   1476c:	ldr	r5, [r4]
   14770:	bl	113bc <dcgettext@plt>
   14774:	ldr	r1, [pc, #380]	; 148f8 <__assert_fail@plt+0x31f4>
   14778:	mov	r6, r0
   1477c:	mov	r0, #4
   14780:	bl	1b8c8 <__assert_fail@plt+0xa1c4>
   14784:	mov	r1, r5
   14788:	mov	r2, r6
   1478c:	mov	r5, #0
   14790:	mov	r3, r0
   14794:	mov	r0, #0
   14798:	bl	11494 <error@plt>
   1479c:	sub	r0, fp, #244	; 0xf4
   147a0:	ldr	r6, [r4]
   147a4:	bl	1d40c <__assert_fail@plt+0xbd08>
   147a8:	cmp	r0, #0
   147ac:	bne	148d0 <__assert_fail@plt+0x31cc>
   147b0:	sub	r0, fp, #244	; 0xf4
   147b4:	bl	1d428 <__assert_fail@plt+0xbd24>
   147b8:	str	r6, [r4]
   147bc:	mov	r0, r5
   147c0:	sub	sp, fp, #24
   147c4:	pop	{r4, r5, r6, r7, r8, fp, pc}
   147c8:	bl	1e66c <__assert_fail@plt+0xcf68>
   147cc:	mov	r5, r0
   147d0:	bl	1156c <__errno_location@plt>
   147d4:	mov	r4, r0
   147d8:	b	1479c <__assert_fail@plt+0x3098>
   147dc:	sub	r5, fp, #236	; 0xec
   147e0:	mov	r1, r4
   147e4:	mov	r2, #104	; 0x68
   147e8:	mov	r0, r5
   147ec:	bl	11374 <memcpy@plt>
   147f0:	mov	r0, r7
   147f4:	bl	11404 <chdir@plt>
   147f8:	cmp	r0, #0
   147fc:	bge	146e8 <__assert_fail@plt+0x2fe4>
   14800:	bl	1156c <__errno_location@plt>
   14804:	mov	r2, #5
   14808:	ldr	r1, [pc, #240]	; 14900 <__assert_fail@plt+0x31fc>
   1480c:	mov	r5, r6
   14810:	ldr	r4, [r0]
   14814:	mov	r0, r6
   14818:	bl	113bc <dcgettext@plt>
   1481c:	mov	r1, r7
   14820:	mov	r8, r0
   14824:	mov	r0, #4
   14828:	bl	1b8c8 <__assert_fail@plt+0xa1c4>
   1482c:	mov	r2, r8
   14830:	mov	r1, r4
   14834:	mov	r3, r0
   14838:	mov	r0, r6
   1483c:	bl	11494 <error@plt>
   14840:	b	147bc <__assert_fail@plt+0x30b8>
   14844:	bl	1156c <__errno_location@plt>
   14848:	mov	r2, #5
   1484c:	ldr	r1, [pc, #172]	; 14900 <__assert_fail@plt+0x31fc>
   14850:	mov	r4, r0
   14854:	b	14768 <__assert_fail@plt+0x3064>
   14858:	bl	1156c <__errno_location@plt>
   1485c:	mov	r2, #5
   14860:	ldr	r1, [pc, #156]	; 14904 <__assert_fail@plt+0x3200>
   14864:	mov	r4, r0
   14868:	mov	r0, r6
   1486c:	ldr	r5, [r4]
   14870:	bl	113bc <dcgettext@plt>
   14874:	mov	r1, r7
   14878:	mov	r8, r0
   1487c:	mov	r0, #4
   14880:	bl	1b8c8 <__assert_fail@plt+0xa1c4>
   14884:	mov	r1, r5
   14888:	mov	r2, r8
   1488c:	mov	r5, r6
   14890:	mov	r3, r0
   14894:	mov	r0, r6
   14898:	bl	11494 <error@plt>
   1489c:	b	1479c <__assert_fail@plt+0x3098>
   148a0:	bl	1156c <__errno_location@plt>
   148a4:	mov	r5, #0
   148a8:	mov	r2, #5
   148ac:	ldr	r1, [pc, #84]	; 14908 <__assert_fail@plt+0x3204>
   148b0:	ldr	r4, [r0]
   148b4:	mov	r0, r5
   148b8:	bl	113bc <dcgettext@plt>
   148bc:	mov	r1, r4
   148c0:	mov	r2, r0
   148c4:	mov	r0, r5
   148c8:	bl	11494 <error@plt>
   148cc:	b	147bc <__assert_fail@plt+0x30b8>
   148d0:	mov	r2, #5
   148d4:	ldr	r1, [pc, #48]	; 1490c <__assert_fail@plt+0x3208>
   148d8:	mov	r0, #0
   148dc:	ldr	r4, [r4]
   148e0:	bl	113bc <dcgettext@plt>
   148e4:	mov	r1, r4
   148e8:	mov	r2, r0
   148ec:	mov	r0, #1
   148f0:	bl	11494 <error@plt>
   148f4:	andeq	r2, r2, r0, ror r9
   148f8:	muleq	r2, ip, r9
   148fc:	andeq	r2, r2, r0, lsr #19
   14900:	andeq	r2, r2, r0, asr r9
   14904:	andeq	r2, r2, r4, ror r9
   14908:	andeq	r2, r2, r0, lsr r9
   1490c:			; <UNDEFINED> instruction: 0x000229b0
   14910:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14914:	and	r9, r1, #3
   14918:	sub	r3, r9, #1
   1491c:	sub	sp, sp, #3232	; 0xca0
   14920:	tst	r3, r9
   14924:	sub	sp, sp, #12
   14928:	bne	14b0c <__assert_fail@plt+0x3408>
   1492c:	cmp	r0, #0
   14930:	mov	r8, r0
   14934:	beq	14b0c <__assert_fail@plt+0x3408>
   14938:	ldrb	r6, [r0]
   1493c:	cmp	r6, #0
   14940:	beq	14b48 <__assert_fail@plt+0x3444>
   14944:	add	fp, sp, #2208	; 0x8a0
   14948:	mov	r5, r1
   1494c:	add	r3, sp, #1184	; 0x4a0
   14950:	mov	r1, #1024	; 0x400
   14954:	add	fp, fp, #8
   14958:	add	sl, sp, #152	; 0x98
   1495c:	cmp	r6, #47	; 0x2f
   14960:	str	r3, [sp, #1176]	; 0x498
   14964:	str	r1, [sp, #1180]	; 0x49c
   14968:	str	r1, [sp, #2212]	; 0x8a4
   1496c:	str	r1, [sp, #148]	; 0x94
   14970:	str	fp, [sp, #2208]	; 0x8a0
   14974:	str	sl, [sp, #144]	; 0x90
   14978:	beq	14a24 <__assert_fail@plt+0x3320>
   1497c:	mov	r4, sl
   14980:	sub	r6, sl, #8
   14984:	mov	r0, r4
   14988:	bl	11524 <getcwd@plt>
   1498c:	cmp	r0, #0
   14990:	bne	14cc4 <__assert_fail@plt+0x35c0>
   14994:	bl	1156c <__errno_location@plt>
   14998:	ldr	r3, [r0]
   1499c:	cmp	r3, #12
   149a0:	beq	14b08 <__assert_fail@plt+0x3404>
   149a4:	cmp	r3, #34	; 0x22
   149a8:	beq	14a08 <__assert_fail@plt+0x3304>
   149ac:	mov	r5, r4
   149b0:	mov	r6, #1
   149b4:	ldr	r0, [sp, #1176]	; 0x498
   149b8:	add	r3, sp, #1184	; 0x4a0
   149bc:	cmp	r0, r3
   149c0:	beq	149c8 <__assert_fail@plt+0x32c4>
   149c4:	bl	15334 <__assert_fail@plt+0x3c30>
   149c8:	ldr	r0, [sp, #2208]	; 0x8a0
   149cc:	cmp	r0, fp
   149d0:	beq	149d8 <__assert_fail@plt+0x32d4>
   149d4:	bl	15334 <__assert_fail@plt+0x3c30>
   149d8:	cmp	r6, #0
   149dc:	beq	14b2c <__assert_fail@plt+0x3428>
   149e0:	ldr	r0, [sp, #144]	; 0x90
   149e4:	cmp	r0, sl
   149e8:	moveq	r6, #0
   149ec:	beq	149f8 <__assert_fail@plt+0x32f4>
   149f0:	bl	15334 <__assert_fail@plt+0x3c30>
   149f4:	mov	r6, #0
   149f8:	mov	r0, r6
   149fc:	add	sp, sp, #3232	; 0xca0
   14a00:	add	sp, sp, #12
   14a04:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14a08:	mov	r0, r6
   14a0c:	bl	1d49c <__assert_fail@plt+0xbd98>
   14a10:	cmp	r0, #0
   14a14:	beq	14b08 <__assert_fail@plt+0x3404>
   14a18:	ldr	r4, [sp, #144]	; 0x90
   14a1c:	ldr	r1, [sp, #148]	; 0x94
   14a20:	b	14984 <__assert_fail@plt+0x3280>
   14a24:	mov	r4, sl
   14a28:	add	r0, sl, #1
   14a2c:	strb	r6, [sp, #152]	; 0x98
   14a30:	mov	r3, #0
   14a34:	and	r2, r5, #4
   14a38:	str	r3, [sp, #24]
   14a3c:	str	r2, [sp, #8]
   14a40:	str	r3, [sp, #12]
   14a44:	str	r3, [sp, #16]
   14a48:	str	r9, [sp, #20]
   14a4c:	cmp	r6, #0
   14a50:	beq	14e28 <__assert_fail@plt+0x3724>
   14a54:	cmp	r6, #47	; 0x2f
   14a58:	movne	r3, r6
   14a5c:	bne	14a74 <__assert_fail@plt+0x3370>
   14a60:	ldrb	r3, [r8, #1]!
   14a64:	cmp	r3, #47	; 0x2f
   14a68:	beq	14a60 <__assert_fail@plt+0x335c>
   14a6c:	cmp	r3, #0
   14a70:	beq	14e28 <__assert_fail@plt+0x3724>
   14a74:	mov	r5, r8
   14a78:	ldrb	r6, [r5, #1]!
   14a7c:	cmp	r6, #0
   14a80:	cmpne	r6, #47	; 0x2f
   14a84:	bne	14a78 <__assert_fail@plt+0x3374>
   14a88:	subs	r7, r5, r8
   14a8c:	beq	14e28 <__assert_fail@plt+0x3724>
   14a90:	cmp	r7, #1
   14a94:	beq	14c14 <__assert_fail@plt+0x3510>
   14a98:	cmp	r7, #2
   14a9c:	cmpeq	r3, #46	; 0x2e
   14aa0:	beq	14b58 <__assert_fail@plt+0x3454>
   14aa4:	ldrb	r3, [r0, #-1]
   14aa8:	add	r6, r7, #2
   14aac:	cmp	r3, #47	; 0x2f
   14ab0:	movne	r3, #47	; 0x2f
   14ab4:	strbne	r3, [r0]
   14ab8:	ldr	r3, [sp, #148]	; 0x94
   14abc:	addne	r0, r0, #1
   14ac0:	add	r3, r4, r3
   14ac4:	sub	r3, r3, r0
   14ac8:	cmp	r3, r6
   14acc:	bcs	14bac <__assert_fail@plt+0x34a8>
   14ad0:	mov	r9, r0
   14ad4:	b	14af4 <__assert_fail@plt+0x33f0>
   14ad8:	ldr	r3, [sp, #148]	; 0x94
   14adc:	ldr	r4, [sp, #144]	; 0x90
   14ae0:	sub	r3, r3, r9
   14ae4:	cmp	r3, r6
   14ae8:	add	r9, r4, r9
   14aec:	mov	r0, r9
   14af0:	bcs	14bac <__assert_fail@plt+0x34a8>
   14af4:	add	r0, sp, #144	; 0x90
   14af8:	bl	1d514 <__assert_fail@plt+0xbe10>
   14afc:	sub	r9, r9, r4
   14b00:	cmp	r0, #0
   14b04:	bne	14ad8 <__assert_fail@plt+0x33d4>
   14b08:	bl	1e62c <__assert_fail@plt+0xcf28>
   14b0c:	bl	1156c <__errno_location@plt>
   14b10:	mov	r6, #0
   14b14:	mov	r3, #22
   14b18:	str	r3, [r0]
   14b1c:	mov	r0, r6
   14b20:	add	sp, sp, #3232	; 0xca0
   14b24:	add	sp, sp, #12
   14b28:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14b2c:	strb	r6, [r4], #1
   14b30:	sub	r0, sl, #8
   14b34:	sub	r1, r4, r5
   14b38:	bl	1d44c <__assert_fail@plt+0xbd48>
   14b3c:	subs	r6, r0, #0
   14b40:	bne	149f8 <__assert_fail@plt+0x32f4>
   14b44:	b	14b08 <__assert_fail@plt+0x3404>
   14b48:	bl	1156c <__errno_location@plt>
   14b4c:	mov	r3, #2
   14b50:	str	r3, [r0]
   14b54:	b	149f8 <__assert_fail@plt+0x32f4>
   14b58:	ldrb	r3, [r8, #1]
   14b5c:	cmp	r3, #46	; 0x2e
   14b60:	bne	14aa4 <__assert_fail@plt+0x33a0>
   14b64:	add	r3, r4, #1
   14b68:	cmp	r0, r3
   14b6c:	bls	14ba4 <__assert_fail@plt+0x34a0>
   14b70:	sub	r3, r0, #1
   14b74:	cmp	r4, r3
   14b78:	bcs	14ff0 <__assert_fail@plt+0x38ec>
   14b7c:	ldrb	r2, [r0, #-2]
   14b80:	cmp	r2, #47	; 0x2f
   14b84:	beq	14ff0 <__assert_fail@plt+0x38ec>
   14b88:	sub	r3, r0, #2
   14b8c:	cmp	r3, r4
   14b90:	mov	r0, r3
   14b94:	beq	14ba4 <__assert_fail@plt+0x34a0>
   14b98:	ldrb	r2, [r3, #-1]!
   14b9c:	cmp	r2, #47	; 0x2f
   14ba0:	bne	14b8c <__assert_fail@plt+0x3488>
   14ba4:	mov	r8, r5
   14ba8:	b	14a4c <__assert_fail@plt+0x3348>
   14bac:	mov	r2, r7
   14bb0:	mov	r1, r8
   14bb4:	bl	11500 <mempcpy@plt>
   14bb8:	ldr	r3, [sp, #8]
   14bbc:	cmp	r3, #0
   14bc0:	mov	r3, #0
   14bc4:	str	r0, [sp, #28]
   14bc8:	strb	r3, [r0]
   14bcc:	bne	14c20 <__assert_fail@plt+0x351c>
   14bd0:	sub	r3, fp, #8
   14bd4:	mov	r9, r3
   14bd8:	str	r5, [sp, #32]
   14bdc:	ldr	r6, [sp, #2212]	; 0x8a4
   14be0:	ldr	r5, [sp, #2208]	; 0x8a0
   14be4:	sub	r6, r6, #1
   14be8:	mov	r2, r6
   14bec:	mov	r1, r5
   14bf0:	mov	r0, r4
   14bf4:	bl	11428 <readlink@plt>
   14bf8:	cmp	r6, r0
   14bfc:	bgt	14cd8 <__assert_fail@plt+0x35d4>
   14c00:	mov	r0, r9
   14c04:	bl	1d49c <__assert_fail@plt+0xbd98>
   14c08:	cmp	r0, #0
   14c0c:	bne	14bdc <__assert_fail@plt+0x34d8>
   14c10:	b	14b08 <__assert_fail@plt+0x3404>
   14c14:	cmp	r3, #46	; 0x2e
   14c18:	bne	14aa4 <__assert_fail@plt+0x33a0>
   14c1c:	b	14ba4 <__assert_fail@plt+0x34a0>
   14c20:	ldr	r3, [sp, #20]
   14c24:	cmp	r3, #2
   14c28:	beq	14ec0 <__assert_fail@plt+0x37bc>
   14c2c:	ldrb	r2, [r5]
   14c30:	mov	r3, r5
   14c34:	mov	r1, r2
   14c38:	cmp	r1, #47	; 0x2f
   14c3c:	beq	14c48 <__assert_fail@plt+0x3544>
   14c40:	b	14c90 <__assert_fail@plt+0x358c>
   14c44:	mov	r3, r0
   14c48:	ldrb	r1, [r3, #1]
   14c4c:	add	r0, r3, #1
   14c50:	cmp	r1, #47	; 0x2f
   14c54:	beq	14c44 <__assert_fail@plt+0x3540>
   14c58:	cmp	r1, #0
   14c5c:	add	r3, r3, #2
   14c60:	beq	14edc <__assert_fail@plt+0x37d8>
   14c64:	cmp	r1, #46	; 0x2e
   14c68:	bne	14c90 <__assert_fail@plt+0x358c>
   14c6c:	ldrb	r1, [r0, #1]
   14c70:	cmp	r1, #0
   14c74:	beq	14edc <__assert_fail@plt+0x37d8>
   14c78:	cmp	r1, #46	; 0x2e
   14c7c:	bne	14c38 <__assert_fail@plt+0x3534>
   14c80:	ldrb	r3, [r0, #2]
   14c84:	cmp	r3, #47	; 0x2f
   14c88:	cmpne	r3, #0
   14c8c:	beq	14edc <__assert_fail@plt+0x37d8>
   14c90:	ldr	r3, [sp, #8]
   14c94:	cmp	r3, #0
   14c98:	bne	14f9c <__assert_fail@plt+0x3898>
   14c9c:	bl	1156c <__errno_location@plt>
   14ca0:	ldr	r6, [r0]
   14ca4:	subs	r6, r6, #22
   14ca8:	movne	r6, #1
   14cac:	cmp	r6, #0
   14cb0:	bne	14f0c <__assert_fail@plt+0x3808>
   14cb4:	ldrb	r2, [r5]
   14cb8:	mov	r6, r2
   14cbc:	ldr	r0, [sp, #28]
   14cc0:	b	14ba4 <__assert_fail@plt+0x34a0>
   14cc4:	mov	r1, #0
   14cc8:	mov	r0, r4
   14ccc:	bl	113f8 <rawmemchr@plt>
   14cd0:	ldrb	r6, [r8]
   14cd4:	b	14a30 <__assert_fail@plt+0x332c>
   14cd8:	cmp	r0, #0
   14cdc:	mov	r9, r5
   14ce0:	mov	r6, r0
   14ce4:	ldr	r5, [sp, #32]
   14ce8:	blt	14c20 <__assert_fail@plt+0x351c>
   14cec:	ldr	r3, [sp, #16]
   14cf0:	cmp	r3, #19
   14cf4:	addle	r3, r3, #1
   14cf8:	strle	r3, [sp, #16]
   14cfc:	ble	14dc0 <__assert_fail@plt+0x36bc>
   14d00:	ldrb	r3, [r8]
   14d04:	cmp	r3, #0
   14d08:	beq	14dc0 <__assert_fail@plt+0x36bc>
   14d0c:	ldr	r2, [sp, #28]
   14d10:	rsb	r7, r7, #0
   14d14:	mov	r3, #0
   14d18:	strb	r3, [r2, r7]
   14d1c:	ldrb	r1, [r4]
   14d20:	add	r3, sp, #40	; 0x28
   14d24:	mov	r2, r3
   14d28:	cmp	r1, #0
   14d2c:	ldr	r3, [pc, #708]	; 14ff8 <__assert_fail@plt+0x38f4>
   14d30:	movne	r3, r4
   14d34:	mov	r1, r3
   14d38:	mov	r0, #3
   14d3c:	bl	116bc <__xstat64@plt>
   14d40:	cmp	r0, #0
   14d44:	bne	14d90 <__assert_fail@plt+0x368c>
   14d48:	ldrb	r3, [r8]
   14d4c:	ldr	r1, [sp, #24]
   14d50:	ldr	r2, [sp, #28]
   14d54:	cmp	r1, #0
   14d58:	strb	r3, [r2, r7]
   14d5c:	beq	14fac <__assert_fail@plt+0x38a8>
   14d60:	add	r2, sp, #40	; 0x28
   14d64:	mov	r1, r8
   14d68:	ldr	r0, [sp, #24]
   14d6c:	bl	152ec <__assert_fail@plt+0x3be8>
   14d70:	cmp	r0, #0
   14d74:	beq	14db0 <__assert_fail@plt+0x36ac>
   14d78:	ldr	r3, [sp, #20]
   14d7c:	cmp	r3, #2
   14d80:	beq	14ec0 <__assert_fail@plt+0x37bc>
   14d84:	bl	1156c <__errno_location@plt>
   14d88:	mov	r3, #40	; 0x28
   14d8c:	str	r3, [r0]
   14d90:	mov	r5, r4
   14d94:	ldr	r4, [sp, #28]
   14d98:	mov	r6, #1
   14d9c:	ldr	r0, [sp, #24]
   14da0:	cmp	r0, #0
   14da4:	beq	149b4 <__assert_fail@plt+0x32b0>
   14da8:	bl	15f70 <__assert_fail@plt+0x486c>
   14dac:	b	149b4 <__assert_fail@plt+0x32b0>
   14db0:	add	r2, sp, #40	; 0x28
   14db4:	mov	r1, r8
   14db8:	ldr	r0, [sp, #24]
   14dbc:	bl	15284 <__assert_fail@plt+0x3b80>
   14dc0:	mov	r3, #0
   14dc4:	strb	r3, [r9, r6]
   14dc8:	ldr	r2, [sp, #12]
   14dcc:	ldr	r8, [sp, #1176]	; 0x498
   14dd0:	cmp	r2, r3
   14dd4:	subne	r3, r5, r8
   14dd8:	moveq	r3, r2
   14ddc:	mov	r0, r5
   14de0:	str	r3, [sp, #36]	; 0x24
   14de4:	bl	1153c <strlen@plt>
   14de8:	adds	r7, r6, r0
   14dec:	str	r0, [sp, #32]
   14df0:	bcs	14b08 <__assert_fail@plt+0x3404>
   14df4:	ldr	r3, [sp, #1180]	; 0x49c
   14df8:	cmp	r3, r7
   14dfc:	bls	14e10 <__assert_fail@plt+0x370c>
   14e00:	b	14e54 <__assert_fail@plt+0x3750>
   14e04:	ldr	r3, [sp, #1180]	; 0x49c
   14e08:	cmp	r7, r3
   14e0c:	bcc	14e50 <__assert_fail@plt+0x374c>
   14e10:	add	r0, sp, #1168	; 0x490
   14e14:	add	r0, r0, #8
   14e18:	bl	1d514 <__assert_fail@plt+0xbe10>
   14e1c:	cmp	r0, #0
   14e20:	bne	14e04 <__assert_fail@plt+0x3700>
   14e24:	b	14b08 <__assert_fail@plt+0x3404>
   14e28:	add	r3, r4, #1
   14e2c:	cmp	r0, r3
   14e30:	bls	14ecc <__assert_fail@plt+0x37c8>
   14e34:	ldrb	r3, [r0, #-1]
   14e38:	mov	r5, r4
   14e3c:	mov	r6, #0
   14e40:	cmp	r3, #47	; 0x2f
   14e44:	subeq	r4, r0, #1
   14e48:	movne	r4, r0
   14e4c:	b	14d9c <__assert_fail@plt+0x3698>
   14e50:	ldr	r8, [sp, #1176]	; 0x498
   14e54:	ldr	r3, [sp, #12]
   14e58:	add	r0, r8, r6
   14e5c:	cmp	r3, #0
   14e60:	ldrne	r3, [sp, #36]	; 0x24
   14e64:	addne	r5, r8, r3
   14e68:	ldr	r3, [sp, #32]
   14e6c:	mov	r1, r5
   14e70:	add	r2, r3, #1
   14e74:	bl	11344 <memmove@plt>
   14e78:	mov	r2, r6
   14e7c:	mov	r1, r9
   14e80:	mov	r0, r8
   14e84:	bl	11374 <memcpy@plt>
   14e88:	ldrb	r2, [r9]
   14e8c:	cmp	r2, #47	; 0x2f
   14e90:	mov	r3, r0
   14e94:	beq	14fd4 <__assert_fail@plt+0x38d0>
   14e98:	ldr	r1, [sp, #28]
   14e9c:	add	r2, r4, #1
   14ea0:	cmp	r1, r2
   14ea4:	bhi	14f4c <__assert_fail@plt+0x3848>
   14ea8:	ldrb	r6, [r3]
   14eac:	mov	r5, r3
   14eb0:	mov	r3, #1
   14eb4:	mov	r0, r1
   14eb8:	str	r3, [sp, #12]
   14ebc:	b	14ba4 <__assert_fail@plt+0x34a0>
   14ec0:	ldr	r0, [sp, #28]
   14ec4:	ldrb	r6, [r5]
   14ec8:	b	14ba4 <__assert_fail@plt+0x34a0>
   14ecc:	mov	r5, r4
   14ed0:	mov	r6, #0
   14ed4:	mov	r4, r0
   14ed8:	b	14d9c <__assert_fail@plt+0x3698>
   14edc:	ldr	r3, [pc, #280]	; 14ffc <__assert_fail@plt+0x38f8>
   14ee0:	ldr	r0, [sp, #28]
   14ee4:	mov	r2, #0
   14ee8:	ldrh	r1, [r3]
   14eec:	mov	r3, #512	; 0x200
   14ef0:	strh	r1, [r0]
   14ef4:	mov	r1, r4
   14ef8:	mvn	r0, #99	; 0x63
   14efc:	bl	1135c <faccessat@plt>
   14f00:	adds	r6, r0, #0
   14f04:	movne	r6, #1
   14f08:	b	14cac <__assert_fail@plt+0x35a8>
   14f0c:	ldr	r3, [sp, #20]
   14f10:	cmp	r3, #1
   14f14:	bne	14f40 <__assert_fail@plt+0x383c>
   14f18:	bl	1156c <__errno_location@plt>
   14f1c:	ldr	r3, [r0]
   14f20:	cmp	r3, #2
   14f24:	bne	14f40 <__assert_fail@plt+0x383c>
   14f28:	ldr	r1, [pc, #204]	; 14ffc <__assert_fail@plt+0x38f8>
   14f2c:	mov	r0, r5
   14f30:	bl	116f8 <strspn@plt>
   14f34:	ldrb	r3, [r5, r0]
   14f38:	cmp	r3, #0
   14f3c:	beq	14ec0 <__assert_fail@plt+0x37bc>
   14f40:	mov	r5, r4
   14f44:	ldr	r4, [sp, #28]
   14f48:	b	14d9c <__assert_fail@plt+0x3698>
   14f4c:	sub	r0, r1, #1
   14f50:	cmp	r0, r4
   14f54:	bls	14f88 <__assert_fail@plt+0x3884>
   14f58:	ldrb	r2, [r1, #-2]
   14f5c:	cmp	r2, #47	; 0x2f
   14f60:	beq	14f88 <__assert_fail@plt+0x3884>
   14f64:	ldr	r2, [sp, #28]
   14f68:	sub	r2, r2, #2
   14f6c:	cmp	r4, r2
   14f70:	mov	r0, r2
   14f74:	beq	14f88 <__assert_fail@plt+0x3884>
   14f78:	ldrb	r1, [r2, #-1]
   14f7c:	sub	r2, r2, #1
   14f80:	cmp	r1, #47	; 0x2f
   14f84:	bne	14f6c <__assert_fail@plt+0x3868>
   14f88:	ldrb	r6, [r3]
   14f8c:	mov	r5, r3
   14f90:	mov	r3, #1
   14f94:	str	r3, [sp, #12]
   14f98:	b	14ba4 <__assert_fail@plt+0x34a0>
   14f9c:	cmp	r2, #0
   14fa0:	bne	14cb8 <__assert_fail@plt+0x35b4>
   14fa4:	mov	r3, #512	; 0x200
   14fa8:	b	14ef4 <__assert_fail@plt+0x37f0>
   14fac:	ldr	r3, [pc, #76]	; 15000 <__assert_fail@plt+0x38fc>
   14fb0:	ldr	r2, [pc, #76]	; 15004 <__assert_fail@plt+0x3900>
   14fb4:	str	r3, [sp]
   14fb8:	mov	r0, #7
   14fbc:	ldr	r3, [pc, #68]	; 15008 <__assert_fail@plt+0x3904>
   14fc0:	bl	15c80 <__assert_fail@plt+0x457c>
   14fc4:	subs	r3, r0, #0
   14fc8:	str	r3, [sp, #24]
   14fcc:	bne	14d60 <__assert_fail@plt+0x365c>
   14fd0:	b	14b08 <__assert_fail@plt+0x3404>
   14fd4:	mov	r3, #1
   14fd8:	strb	r2, [r4]
   14fdc:	mov	r5, r0
   14fe0:	ldrb	r6, [r0]
   14fe4:	str	r3, [sp, #12]
   14fe8:	add	r0, r4, #1
   14fec:	b	14ba4 <__assert_fail@plt+0x34a0>
   14ff0:	mov	r0, r3
   14ff4:	b	14ba4 <__assert_fail@plt+0x34a0>
   14ff8:	andeq	r2, r2, r0, ror r9
   14ffc:	strdeq	r2, [r2], -r0
   15000:	andeq	r6, r1, r0, lsl lr
   15004:	andeq	r6, r1, ip, lsl #27
   15008:	andeq	r6, r1, r4, asr #27
   1500c:	ldr	r3, [pc, #4]	; 15018 <__assert_fail@plt+0x3914>
   15010:	str	r0, [r3]
   15014:	bx	lr
   15018:			; <UNDEFINED> instruction: 0x000343bc
   1501c:	ldr	r3, [pc, #4]	; 15028 <__assert_fail@plt+0x3924>
   15020:	strb	r0, [r3, #4]
   15024:	bx	lr
   15028:			; <UNDEFINED> instruction: 0x000343bc
   1502c:	ldr	r3, [pc, #192]	; 150f4 <__assert_fail@plt+0x39f0>
   15030:	push	{r4, r5, r6, lr}
   15034:	sub	sp, sp, #8
   15038:	ldr	r0, [r3]
   1503c:	bl	208dc <__assert_fail@plt+0xf1d8>
   15040:	cmp	r0, #0
   15044:	beq	15068 <__assert_fail@plt+0x3964>
   15048:	ldr	r4, [pc, #168]	; 150f8 <__assert_fail@plt+0x39f4>
   1504c:	ldrb	r3, [r4, #4]
   15050:	cmp	r3, #0
   15054:	beq	15084 <__assert_fail@plt+0x3980>
   15058:	bl	1156c <__errno_location@plt>
   1505c:	ldr	r3, [r0]
   15060:	cmp	r3, #32
   15064:	bne	15084 <__assert_fail@plt+0x3980>
   15068:	ldr	r3, [pc, #140]	; 150fc <__assert_fail@plt+0x39f8>
   1506c:	ldr	r0, [r3]
   15070:	bl	208dc <__assert_fail@plt+0xf1d8>
   15074:	cmp	r0, #0
   15078:	bne	150cc <__assert_fail@plt+0x39c8>
   1507c:	add	sp, sp, #8
   15080:	pop	{r4, r5, r6, pc}
   15084:	mov	r2, #5
   15088:	ldr	r1, [pc, #112]	; 15100 <__assert_fail@plt+0x39fc>
   1508c:	mov	r0, #0
   15090:	bl	113bc <dcgettext@plt>
   15094:	ldr	r4, [r4]
   15098:	cmp	r4, #0
   1509c:	mov	r5, r0
   150a0:	beq	150d8 <__assert_fail@plt+0x39d4>
   150a4:	bl	1156c <__errno_location@plt>
   150a8:	ldr	r6, [r0]
   150ac:	mov	r0, r4
   150b0:	bl	1bfd8 <__assert_fail@plt+0xa8d4>
   150b4:	mov	r1, r6
   150b8:	str	r5, [sp]
   150bc:	ldr	r2, [pc, #64]	; 15104 <__assert_fail@plt+0x3a00>
   150c0:	mov	r3, r0
   150c4:	mov	r0, #0
   150c8:	bl	11494 <error@plt>
   150cc:	ldr	r3, [pc, #52]	; 15108 <__assert_fail@plt+0x3a04>
   150d0:	ldr	r0, [r3]
   150d4:	bl	11368 <_exit@plt>
   150d8:	bl	1156c <__errno_location@plt>
   150dc:	mov	r3, r5
   150e0:	ldr	r2, [pc, #36]	; 1510c <__assert_fail@plt+0x3a08>
   150e4:	ldr	r1, [r0]
   150e8:	mov	r0, r4
   150ec:	bl	11494 <error@plt>
   150f0:	b	150cc <__assert_fail@plt+0x39c8>
   150f4:	andeq	r4, r3, r4, lsr r3
   150f8:			; <UNDEFINED> instruction: 0x000343bc
   150fc:	andeq	r4, r3, r0, lsr r3
   15100:	strdeq	r2, [r2], -r4
   15104:	andeq	r2, r2, r0, lsl #20
   15108:	ldrdeq	r4, [r3], -r4	; <UNPREDICTABLE>
   1510c:	andeq	r2, r2, r4, lsl #20
   15110:	push	{r4, lr}
   15114:	bl	1519c <__assert_fail@plt+0x3a98>
   15118:	cmp	r0, #0
   1511c:	popne	{r4, pc}
   15120:	bl	1e62c <__assert_fail@plt+0xcf28>
   15124:	push	{r4, r5, r6, lr}
   15128:	mov	r5, r0
   1512c:	ldrb	r4, [r0]
   15130:	bl	20504 <__assert_fail@plt+0xee00>
   15134:	sub	r4, r4, #47	; 0x2f
   15138:	clz	r4, r4
   1513c:	lsr	r4, r4, #5
   15140:	sub	r0, r0, r5
   15144:	cmp	r0, r4
   15148:	bls	15194 <__assert_fail@plt+0x3a90>
   1514c:	sub	r3, r0, #1
   15150:	add	r2, r5, r3
   15154:	ldrb	r1, [r5, r3]
   15158:	cmp	r1, #47	; 0x2f
   1515c:	beq	15178 <__assert_fail@plt+0x3a74>
   15160:	b	15194 <__assert_fail@plt+0x3a90>
   15164:	ldrb	r1, [r2, #-1]!
   15168:	sub	r0, r3, #1
   1516c:	cmp	r1, #47	; 0x2f
   15170:	bne	15188 <__assert_fail@plt+0x3a84>
   15174:	mov	r3, r0
   15178:	cmp	r4, r3
   1517c:	bne	15164 <__assert_fail@plt+0x3a60>
   15180:	mov	r0, r4
   15184:	pop	{r4, r5, r6, pc}
   15188:	mov	r4, r3
   1518c:	mov	r0, r4
   15190:	pop	{r4, r5, r6, pc}
   15194:	mov	r4, r0
   15198:	b	15180 <__assert_fail@plt+0x3a7c>
   1519c:	push	{r4, r5, r6, r7, r8, lr}
   151a0:	mov	r6, r0
   151a4:	ldrb	r4, [r0]
   151a8:	bl	20504 <__assert_fail@plt+0xee00>
   151ac:	sub	r4, r4, #47	; 0x2f
   151b0:	clz	r4, r4
   151b4:	lsr	r4, r4, #5
   151b8:	sub	r5, r0, r6
   151bc:	cmp	r5, r4
   151c0:	bls	1527c <__assert_fail@plt+0x3b78>
   151c4:	sub	r3, r5, #1
   151c8:	add	r2, r6, r3
   151cc:	ldrb	r1, [r6, r3]
   151d0:	cmp	r1, #47	; 0x2f
   151d4:	beq	151f0 <__assert_fail@plt+0x3aec>
   151d8:	b	1524c <__assert_fail@plt+0x3b48>
   151dc:	ldrb	r0, [r2, #-1]!
   151e0:	sub	ip, r3, #1
   151e4:	cmp	r0, #47	; 0x2f
   151e8:	bne	15248 <__assert_fail@plt+0x3b44>
   151ec:	mov	r3, ip
   151f0:	cmp	r4, r3
   151f4:	bne	151dc <__assert_fail@plt+0x3ad8>
   151f8:	eor	r3, r4, #1
   151fc:	and	r3, r3, #1
   15200:	add	r0, r4, #1
   15204:	add	r0, r0, r3
   15208:	uxtb	r5, r3
   1520c:	bl	1f564 <__assert_fail@plt+0xde60>
   15210:	subs	r7, r0, #0
   15214:	beq	15274 <__assert_fail@plt+0x3b70>
   15218:	mov	r1, r6
   1521c:	mov	r2, r4
   15220:	bl	11374 <memcpy@plt>
   15224:	cmp	r5, #0
   15228:	movne	r5, #1
   1522c:	moveq	r5, r4
   15230:	movne	r3, #46	; 0x2e
   15234:	strbne	r3, [r7]
   15238:	mov	r3, #0
   1523c:	strb	r3, [r7, r5]
   15240:	mov	r0, r7
   15244:	pop	{r4, r5, r6, r7, r8, pc}
   15248:	mov	r5, r3
   1524c:	add	r0, r5, #1
   15250:	cmp	r5, #0
   15254:	addeq	r0, r0, #1
   15258:	bl	1f564 <__assert_fail@plt+0xde60>
   1525c:	subs	r7, r0, #0
   15260:	beq	15274 <__assert_fail@plt+0x3b70>
   15264:	mov	r1, r6
   15268:	mov	r2, r5
   1526c:	bl	11374 <memcpy@plt>
   15270:	b	15238 <__assert_fail@plt+0x3b34>
   15274:	mov	r7, #0
   15278:	b	15240 <__assert_fail@plt+0x3b3c>
   1527c:	mov	r4, r5
   15280:	b	151f8 <__assert_fail@plt+0x3af4>
   15284:	push	{r4, r5, r6, r7, r8, lr}
   15288:	subs	r8, r0, #0
   1528c:	popeq	{r4, r5, r6, r7, r8, pc}
   15290:	mov	r0, #24
   15294:	mov	r4, r1
   15298:	mov	r7, r2
   1529c:	bl	1dfe4 <__assert_fail@plt+0xc8e0>
   152a0:	mov	r6, r0
   152a4:	mov	r0, r4
   152a8:	bl	1e5f4 <__assert_fail@plt+0xcef0>
   152ac:	ldrd	r4, [r7, #96]	; 0x60
   152b0:	ldrd	r2, [r7]
   152b4:	mov	r1, r6
   152b8:	strd	r4, [r6, #8]
   152bc:	strd	r2, [r6, #16]
   152c0:	str	r0, [r6]
   152c4:	mov	r0, r8
   152c8:	bl	165e8 <__assert_fail@plt+0x4ee4>
   152cc:	cmp	r0, #0
   152d0:	beq	152e8 <__assert_fail@plt+0x3be4>
   152d4:	cmp	r6, r0
   152d8:	popeq	{r4, r5, r6, r7, r8, pc}
   152dc:	mov	r0, r6
   152e0:	pop	{r4, r5, r6, r7, r8, lr}
   152e4:	b	16e10 <__assert_fail@plt+0x570c>
   152e8:	bl	1e62c <__assert_fail@plt+0xcf28>
   152ec:	subs	r3, r0, #0
   152f0:	beq	1532c <__assert_fail@plt+0x3c28>
   152f4:	push	{r4, r5, lr}
   152f8:	sub	sp, sp, #28
   152fc:	ldrd	r4, [r2, #96]	; 0x60
   15300:	ldrd	r2, [r2]
   15304:	mov	ip, r1
   15308:	mov	r1, sp
   1530c:	str	ip, [sp]
   15310:	strd	r4, [sp, #8]
   15314:	strd	r2, [sp, #16]
   15318:	bl	159a0 <__assert_fail@plt+0x429c>
   1531c:	adds	r0, r0, #0
   15320:	movne	r0, #1
   15324:	add	sp, sp, #28
   15328:	pop	{r4, r5, pc}
   1532c:	mov	r0, r3
   15330:	bx	lr
   15334:	push	{r4, r5, lr}
   15338:	sub	sp, sp, #12
   1533c:	mov	r5, r0
   15340:	bl	1156c <__errno_location@plt>
   15344:	mov	r2, #0
   15348:	mov	r4, r0
   1534c:	ldr	r3, [r0]
   15350:	str	r2, [r4]
   15354:	mov	r0, r5
   15358:	str	r3, [sp]
   1535c:	str	r3, [sp, #4]
   15360:	bl	11350 <free@plt>
   15364:	ldr	r3, [r4]
   15368:	add	r2, sp, #8
   1536c:	cmp	r3, #0
   15370:	moveq	r3, #4
   15374:	movne	r3, #0
   15378:	add	r3, r2, r3
   1537c:	ldr	r3, [r3, #-8]
   15380:	str	r3, [r4]
   15384:	add	sp, sp, #12
   15388:	pop	{r4, r5, pc}
   1538c:	push	{r4, r5, r6, r7, r8, r9, lr}
   15390:	sub	sp, sp, #396	; 0x18c
   15394:	ldr	r5, [pc, #344]	; 154f4 <__assert_fail@plt+0x3df0>
   15398:	mov	r6, r0
   1539c:	mov	r8, r2
   153a0:	ldr	r9, [r5]
   153a4:	mov	r4, sp
   153a8:	cmp	r9, #0
   153ac:	blt	154c4 <__assert_fail@plt+0x3dc0>
   153b0:	cmp	r9, #0
   153b4:	mov	r1, r4
   153b8:	mov	r0, r6
   153bc:	beq	15438 <__assert_fail@plt+0x3d34>
   153c0:	bl	115a8 <statvfs64@plt>
   153c4:	cmp	r0, #0
   153c8:	blt	154b4 <__assert_fail@plt+0x3db0>
   153cc:	ldr	r3, [sp, #4]
   153d0:	cmp	r3, #0
   153d4:	beq	154a0 <__assert_fail@plt+0x3d9c>
   153d8:	cmn	r3, #1
   153dc:	mov	r2, r3
   153e0:	movne	r3, #0
   153e4:	beq	154ac <__assert_fail@plt+0x3da8>
   153e8:	ldrd	r4, [sp, #8]
   153ec:	str	r2, [r8]
   153f0:	ldr	r2, [sp, #28]
   153f4:	ldrd	r0, [sp, #16]
   153f8:	ldrd	r6, [sp, #32]
   153fc:	strd	r4, [r8, #8]
   15400:	ldrd	r4, [sp, #40]	; 0x28
   15404:	str	r3, [r8, #4]
   15408:	ldr	r3, [sp, #24]
   1540c:	str	r2, [r8, #28]
   15410:	mov	r9, #0
   15414:	lsr	r2, r2, #31
   15418:	strd	r0, [r8, #16]
   1541c:	strb	r2, [r8, #32]
   15420:	mov	r0, r9
   15424:	strd	r6, [r8, #40]	; 0x28
   15428:	strd	r4, [r8, #48]	; 0x30
   1542c:	str	r3, [r8, #24]
   15430:	add	sp, sp, #396	; 0x18c
   15434:	pop	{r4, r5, r6, r7, r8, r9, pc}
   15438:	bl	11638 <statfs64@plt>
   1543c:	cmp	r0, #0
   15440:	blt	154b4 <__assert_fail@plt+0x3db0>
   15444:	ldr	r2, [sp, #60]	; 0x3c
   15448:	ldr	r1, [sp, #28]
   1544c:	cmn	r2, #1
   15450:	ldrd	r4, [sp, #8]
   15454:	asrne	r3, r2, #31
   15458:	mvneq	r2, #0
   1545c:	mvneq	r3, #0
   15460:	ldrd	r6, [sp, #32]
   15464:	strd	r2, [r8]
   15468:	str	r1, [r8, #28]
   1546c:	ldrd	r2, [sp, #16]
   15470:	lsr	r1, r1, #31
   15474:	strd	r4, [r8, #8]
   15478:	ldrd	r4, [sp, #40]	; 0x28
   1547c:	strb	r1, [r8, #32]
   15480:	ldr	r1, [sp, #24]
   15484:	mov	r0, r9
   15488:	strd	r2, [r8, #16]
   1548c:	strd	r6, [r8, #40]	; 0x28
   15490:	strd	r4, [r8, #48]	; 0x30
   15494:	str	r1, [r8, #24]
   15498:	add	sp, sp, #396	; 0x18c
   1549c:	pop	{r4, r5, r6, r7, r8, r9, pc}
   154a0:	ldr	r2, [sp]
   154a4:	cmn	r2, #1
   154a8:	bne	153e8 <__assert_fail@plt+0x3ce4>
   154ac:	mov	r3, r2
   154b0:	b	153e8 <__assert_fail@plt+0x3ce4>
   154b4:	mvn	r9, #0
   154b8:	mov	r0, r9
   154bc:	add	sp, sp, #396	; 0x18c
   154c0:	pop	{r4, r5, r6, r7, r8, r9, pc}
   154c4:	mov	r0, sp
   154c8:	bl	113b0 <uname@plt>
   154cc:	cmp	r0, #0
   154d0:	movne	r9, #0
   154d4:	bne	154ec <__assert_fail@plt+0x3de8>
   154d8:	ldr	r1, [pc, #24]	; 154f8 <__assert_fail@plt+0x3df4>
   154dc:	add	r0, sp, #130	; 0x82
   154e0:	bl	11308 <strverscmp@plt>
   154e4:	mvn	r9, r0
   154e8:	lsr	r9, r9, #31
   154ec:	str	r9, [r5]
   154f0:	b	153b0 <__assert_fail@plt+0x3cac>
   154f4:	ldrdeq	r4, [r3], -r8
   154f8:	andeq	r2, r2, r8, lsl #20
   154fc:	andeq	r0, r0, r0
   15500:	push	{r4, lr}
   15504:	ror	r0, r0, #3
   15508:	bl	210e8 <__assert_fail@plt+0xf9e4>
   1550c:	mov	r0, r1
   15510:	pop	{r4, pc}
   15514:	sub	r0, r1, r0
   15518:	clz	r0, r0
   1551c:	lsr	r0, r0, #5
   15520:	bx	lr
   15524:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   15528:	mov	r5, r1
   1552c:	mov	r6, r0
   15530:	ldr	r4, [r0, #24]
   15534:	ldr	r1, [r0, #8]
   15538:	mov	r0, r5
   1553c:	mov	r8, r3
   15540:	mov	sl, r2
   15544:	blx	r4
   15548:	ldr	r3, [r6, #8]
   1554c:	cmp	r0, r3
   15550:	bcs	15640 <__assert_fail@plt+0x3f3c>
   15554:	ldr	r9, [r6]
   15558:	mov	r7, r0
   1555c:	add	r4, r9, r0, lsl #3
   15560:	str	r4, [sl]
   15564:	ldr	r3, [r9, r0, lsl #3]
   15568:	cmp	r3, #0
   1556c:	beq	15600 <__assert_fail@plt+0x3efc>
   15570:	cmp	r5, r3
   15574:	beq	15594 <__assert_fail@plt+0x3e90>
   15578:	mov	r1, r3
   1557c:	mov	r0, r5
   15580:	ldr	r3, [r6, #28]
   15584:	blx	r3
   15588:	cmp	r0, #0
   1558c:	beq	155f4 <__assert_fail@plt+0x3ef0>
   15590:	ldr	r3, [r9, r7, lsl #3]
   15594:	cmp	r8, #0
   15598:	beq	155c4 <__assert_fail@plt+0x3ec0>
   1559c:	ldr	r2, [r4, #4]
   155a0:	cmp	r2, #0
   155a4:	movne	ip, #0
   155a8:	ldmne	r2, {r0, r1}
   155ac:	streq	r2, [r9, r7, lsl #3]
   155b0:	stmne	r4, {r0, r1}
   155b4:	strne	ip, [r2]
   155b8:	ldrne	r1, [r6, #36]	; 0x24
   155bc:	strne	r1, [r2, #4]
   155c0:	strne	r2, [r6, #36]	; 0x24
   155c4:	mov	r0, r3
   155c8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   155cc:	ldr	r3, [r2]
   155d0:	cmp	r5, r3
   155d4:	beq	15614 <__assert_fail@plt+0x3f10>
   155d8:	mov	r1, r3
   155dc:	mov	r0, r5
   155e0:	ldr	r3, [r6, #28]
   155e4:	blx	r3
   155e8:	cmp	r0, #0
   155ec:	bne	1560c <__assert_fail@plt+0x3f08>
   155f0:	ldr	r4, [r4, #4]
   155f4:	ldr	r2, [r4, #4]
   155f8:	cmp	r2, #0
   155fc:	bne	155cc <__assert_fail@plt+0x3ec8>
   15600:	mov	r3, #0
   15604:	mov	r0, r3
   15608:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1560c:	ldr	r2, [r4, #4]
   15610:	ldr	r3, [r2]
   15614:	cmp	r8, #0
   15618:	beq	155c4 <__assert_fail@plt+0x3ec0>
   1561c:	ldr	r0, [r2, #4]
   15620:	mov	r1, #0
   15624:	str	r0, [r4, #4]
   15628:	str	r1, [r2]
   1562c:	ldr	r1, [r6, #36]	; 0x24
   15630:	mov	r0, r3
   15634:	str	r1, [r2, #4]
   15638:	str	r2, [r6, #36]	; 0x24
   1563c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   15640:	bl	116e0 <abort@plt>
   15644:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15648:	ldr	r6, [r1]
   1564c:	ldr	r3, [r1, #4]
   15650:	cmp	r6, r3
   15654:	bcs	15724 <__assert_fail@plt+0x4020>
   15658:	mov	r9, r2
   1565c:	mov	r5, r0
   15660:	mov	r8, r1
   15664:	add	r6, r6, #8
   15668:	mov	sl, #0
   1566c:	ldr	fp, [r6, #-8]
   15670:	mov	r7, r6
   15674:	cmp	fp, #0
   15678:	beq	15718 <__assert_fail@plt+0x4014>
   1567c:	ldr	r4, [r6, #-4]
   15680:	cmp	r4, #0
   15684:	beq	15708 <__assert_fail@plt+0x4004>
   15688:	ldr	r1, [r5, #8]
   1568c:	b	156a8 <__assert_fail@plt+0x3fa4>
   15690:	ldr	r3, [ip, #4]
   15694:	cmp	r2, #0
   15698:	str	r3, [r4, #4]
   1569c:	str	r4, [ip, #4]
   156a0:	beq	15704 <__assert_fail@plt+0x4000>
   156a4:	mov	r4, r2
   156a8:	ldr	fp, [r4]
   156ac:	ldr	r3, [r5, #24]
   156b0:	mov	r0, fp
   156b4:	blx	r3
   156b8:	ldr	r1, [r5, #8]
   156bc:	cmp	r0, r1
   156c0:	bcs	157c4 <__assert_fail@plt+0x40c0>
   156c4:	ldr	r3, [r5]
   156c8:	ldr	r2, [r4, #4]
   156cc:	add	ip, r3, r0, lsl #3
   156d0:	ldr	lr, [r3, r0, lsl #3]
   156d4:	cmp	lr, #0
   156d8:	bne	15690 <__assert_fail@plt+0x3f8c>
   156dc:	ldr	ip, [r5, #12]
   156e0:	str	fp, [r3, r0, lsl #3]
   156e4:	add	r3, ip, #1
   156e8:	str	r3, [r5, #12]
   156ec:	str	lr, [r4]
   156f0:	ldr	r3, [r5, #36]	; 0x24
   156f4:	cmp	r2, #0
   156f8:	str	r3, [r4, #4]
   156fc:	str	r4, [r5, #36]	; 0x24
   15700:	bne	156a4 <__assert_fail@plt+0x3fa0>
   15704:	ldr	fp, [r6, #-8]
   15708:	cmp	r9, #0
   1570c:	str	sl, [r6, #-4]
   15710:	beq	1572c <__assert_fail@plt+0x4028>
   15714:	ldr	r3, [r8, #4]
   15718:	cmp	r3, r7
   1571c:	add	r6, r6, #8
   15720:	bhi	1566c <__assert_fail@plt+0x3f68>
   15724:	mov	r0, #1
   15728:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1572c:	ldr	r3, [r5, #24]
   15730:	ldr	r1, [r5, #8]
   15734:	mov	r0, fp
   15738:	blx	r3
   1573c:	ldr	r3, [r5, #8]
   15740:	cmp	r0, r3
   15744:	bcs	157c4 <__assert_fail@plt+0x40c0>
   15748:	ldr	r3, [r5]
   1574c:	add	r4, r3, r0, lsl #3
   15750:	ldr	r2, [r3, r0, lsl #3]
   15754:	cmp	r2, #0
   15758:	beq	15798 <__assert_fail@plt+0x4094>
   1575c:	ldr	r0, [r5, #36]	; 0x24
   15760:	cmp	r0, #0
   15764:	beq	157ac <__assert_fail@plt+0x40a8>
   15768:	ldr	r3, [r0, #4]
   1576c:	str	r3, [r5, #36]	; 0x24
   15770:	ldr	r3, [r4, #4]
   15774:	str	fp, [r0]
   15778:	str	r3, [r0, #4]
   1577c:	str	r0, [r4, #4]
   15780:	ldr	r2, [r8, #12]
   15784:	str	sl, [r6, #-8]
   15788:	sub	r2, r2, #1
   1578c:	ldr	r3, [r8, #4]
   15790:	str	r2, [r8, #12]
   15794:	b	15718 <__assert_fail@plt+0x4014>
   15798:	ldr	r2, [r5, #12]
   1579c:	str	fp, [r3, r0, lsl #3]
   157a0:	add	r3, r2, #1
   157a4:	str	r3, [r5, #12]
   157a8:	b	15780 <__assert_fail@plt+0x407c>
   157ac:	mov	r0, #8
   157b0:	bl	1f564 <__assert_fail@plt+0xde60>
   157b4:	cmp	r0, #0
   157b8:	bne	15770 <__assert_fail@plt+0x406c>
   157bc:	mov	r0, r9
   157c0:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   157c4:	bl	116e0 <abort@plt>
   157c8:	ldr	r0, [r0, #8]
   157cc:	bx	lr
   157d0:	ldr	r0, [r0, #12]
   157d4:	bx	lr
   157d8:	ldr	r0, [r0, #16]
   157dc:	bx	lr
   157e0:	ldm	r0, {r1, ip}
   157e4:	mov	r0, #0
   157e8:	cmp	r1, ip
   157ec:	bcs	15834 <__assert_fail@plt+0x4130>
   157f0:	ldr	r3, [r1]
   157f4:	cmp	r3, #0
   157f8:	beq	15824 <__assert_fail@plt+0x4120>
   157fc:	ldr	r3, [r1, #4]
   15800:	mov	r2, #1
   15804:	cmp	r3, #0
   15808:	beq	1581c <__assert_fail@plt+0x4118>
   1580c:	ldr	r3, [r3, #4]
   15810:	add	r2, r2, #1
   15814:	cmp	r3, #0
   15818:	bne	1580c <__assert_fail@plt+0x4108>
   1581c:	cmp	r0, r2
   15820:	movcc	r0, r2
   15824:	add	r1, r1, #8
   15828:	cmp	r1, ip
   1582c:	bcc	157f0 <__assert_fail@plt+0x40ec>
   15830:	bx	lr
   15834:	bx	lr
   15838:	push	{lr}		; (str lr, [sp, #-4]!)
   1583c:	mov	r2, #0
   15840:	ldm	r0, {r1, lr}
   15844:	mov	ip, r2
   15848:	cmp	r1, lr
   1584c:	bcs	1588c <__assert_fail@plt+0x4188>
   15850:	ldr	r3, [r1]
   15854:	cmp	r3, #0
   15858:	beq	15880 <__assert_fail@plt+0x417c>
   1585c:	ldr	r3, [r1, #4]
   15860:	add	ip, ip, #1
   15864:	cmp	r3, #0
   15868:	add	r2, r2, #1
   1586c:	beq	15880 <__assert_fail@plt+0x417c>
   15870:	ldr	r3, [r3, #4]
   15874:	add	r2, r2, #1
   15878:	cmp	r3, #0
   1587c:	bne	15870 <__assert_fail@plt+0x416c>
   15880:	add	r1, r1, #8
   15884:	cmp	r1, lr
   15888:	bcc	15850 <__assert_fail@plt+0x414c>
   1588c:	ldr	r3, [r0, #12]
   15890:	cmp	r3, ip
   15894:	ldreq	r0, [r0, #16]
   15898:	subeq	r0, r0, r2
   1589c:	clzeq	r0, r0
   158a0:	lsreq	r0, r0, #5
   158a4:	movne	r0, #0
   158a8:	pop	{pc}		; (ldr pc, [sp], #4)
   158ac:	push	{r4, r5, r6, r7, lr}
   158b0:	mov	r5, r1
   158b4:	ldm	r0, {ip, lr}
   158b8:	sub	sp, sp, #12
   158bc:	ldr	r3, [r0, #16]
   158c0:	cmp	ip, lr
   158c4:	mov	r4, #0
   158c8:	ldr	r6, [r0, #8]
   158cc:	ldr	r7, [r0, #12]
   158d0:	bcs	15914 <__assert_fail@plt+0x4210>
   158d4:	ldr	r2, [ip]
   158d8:	cmp	r2, #0
   158dc:	beq	15908 <__assert_fail@plt+0x4204>
   158e0:	ldr	r2, [ip, #4]
   158e4:	mov	r1, #1
   158e8:	cmp	r2, #0
   158ec:	beq	15900 <__assert_fail@plt+0x41fc>
   158f0:	ldr	r2, [r2, #4]
   158f4:	add	r1, r1, #1
   158f8:	cmp	r2, #0
   158fc:	bne	158f0 <__assert_fail@plt+0x41ec>
   15900:	cmp	r4, r1
   15904:	movcc	r4, r1
   15908:	add	ip, ip, #8
   1590c:	cmp	ip, lr
   15910:	bcc	158d4 <__assert_fail@plt+0x41d0>
   15914:	ldr	r2, [pc, #116]	; 15990 <__assert_fail@plt+0x428c>
   15918:	mov	r1, #1
   1591c:	mov	r0, r5
   15920:	bl	115c0 <__fprintf_chk@plt>
   15924:	mov	r3, r6
   15928:	ldr	r2, [pc, #100]	; 15994 <__assert_fail@plt+0x4290>
   1592c:	mov	r1, #1
   15930:	mov	r0, r5
   15934:	bl	115c0 <__fprintf_chk@plt>
   15938:	vmov	s15, r7
   1593c:	vldr	d5, [pc, #68]	; 15988 <__assert_fail@plt+0x4284>
   15940:	mov	r3, r7
   15944:	ldr	r2, [pc, #76]	; 15998 <__assert_fail@plt+0x4294>
   15948:	vcvt.f64.u32	d6, s15
   1594c:	vmov	s15, r6
   15950:	mov	r1, #1
   15954:	mov	r0, r5
   15958:	vcvt.f64.u32	d7, s15
   1595c:	vmul.f64	d6, d6, d5
   15960:	vdiv.f64	d5, d6, d7
   15964:	vstr	d5, [sp]
   15968:	bl	115c0 <__fprintf_chk@plt>
   1596c:	mov	r3, r4
   15970:	mov	r0, r5
   15974:	ldr	r2, [pc, #32]	; 1599c <__assert_fail@plt+0x4298>
   15978:	mov	r1, #1
   1597c:	add	sp, sp, #12
   15980:	pop	{r4, r5, r6, r7, lr}
   15984:	b	115c0 <__fprintf_chk@plt>
   15988:	andeq	r0, r0, r0
   1598c:	subsmi	r0, r9, r0
   15990:	andeq	r2, r2, r4, lsr #20
   15994:	andeq	r2, r2, ip, lsr sl
   15998:	andeq	r2, r2, r4, asr sl
   1599c:	andeq	r2, r2, r8, ror sl
   159a0:	push	{r4, r5, r6, lr}
   159a4:	mov	r5, r1
   159a8:	ldr	r3, [r0, #24]
   159ac:	mov	r6, r0
   159b0:	ldr	r1, [r0, #8]
   159b4:	mov	r0, r5
   159b8:	blx	r3
   159bc:	ldr	r3, [r6, #8]
   159c0:	cmp	r0, r3
   159c4:	bcs	15a24 <__assert_fail@plt+0x4320>
   159c8:	ldr	r3, [r6]
   159cc:	add	r4, r3, r0, lsl #3
   159d0:	ldr	r1, [r3, r0, lsl #3]
   159d4:	cmp	r1, #0
   159d8:	bne	159e4 <__assert_fail@plt+0x42e0>
   159dc:	b	15a0c <__assert_fail@plt+0x4308>
   159e0:	ldr	r1, [r4]
   159e4:	cmp	r5, r1
   159e8:	beq	15a14 <__assert_fail@plt+0x4310>
   159ec:	ldr	r3, [r6, #28]
   159f0:	mov	r0, r5
   159f4:	blx	r3
   159f8:	cmp	r0, #0
   159fc:	bne	15a1c <__assert_fail@plt+0x4318>
   15a00:	ldr	r4, [r4, #4]
   15a04:	cmp	r4, #0
   15a08:	bne	159e0 <__assert_fail@plt+0x42dc>
   15a0c:	mov	r0, #0
   15a10:	pop	{r4, r5, r6, pc}
   15a14:	mov	r0, r5
   15a18:	pop	{r4, r5, r6, pc}
   15a1c:	ldr	r0, [r4]
   15a20:	pop	{r4, r5, r6, pc}
   15a24:	bl	116e0 <abort@plt>
   15a28:	ldr	r3, [r0, #16]
   15a2c:	cmp	r3, #0
   15a30:	beq	15a64 <__assert_fail@plt+0x4360>
   15a34:	ldr	r3, [r0]
   15a38:	ldr	r2, [r0, #4]
   15a3c:	cmp	r3, r2
   15a40:	bcc	15a54 <__assert_fail@plt+0x4350>
   15a44:	b	15a6c <__assert_fail@plt+0x4368>
   15a48:	add	r3, r3, #8
   15a4c:	cmp	r3, r2
   15a50:	bcs	15a6c <__assert_fail@plt+0x4368>
   15a54:	ldr	r0, [r3]
   15a58:	cmp	r0, #0
   15a5c:	beq	15a48 <__assert_fail@plt+0x4344>
   15a60:	bx	lr
   15a64:	mov	r0, r3
   15a68:	bx	lr
   15a6c:	push	{r4, lr}
   15a70:	bl	116e0 <abort@plt>
   15a74:	push	{r4, r5, r6, lr}
   15a78:	mov	r4, r1
   15a7c:	ldr	r3, [r0, #24]
   15a80:	mov	r5, r0
   15a84:	ldr	r1, [r0, #8]
   15a88:	mov	r0, r4
   15a8c:	blx	r3
   15a90:	ldr	r3, [r5, #8]
   15a94:	cmp	r0, r3
   15a98:	bcs	15afc <__assert_fail@plt+0x43f8>
   15a9c:	ldr	r3, [r5]
   15aa0:	add	r0, r3, r0, lsl #3
   15aa4:	mov	r3, r0
   15aa8:	b	15ab4 <__assert_fail@plt+0x43b0>
   15aac:	cmp	r3, #0
   15ab0:	beq	15ac8 <__assert_fail@plt+0x43c4>
   15ab4:	ldm	r3, {r2, r3}
   15ab8:	cmp	r4, r2
   15abc:	bne	15aac <__assert_fail@plt+0x43a8>
   15ac0:	cmp	r3, #0
   15ac4:	bne	15af4 <__assert_fail@plt+0x43f0>
   15ac8:	ldr	r2, [r5, #4]
   15acc:	mov	r3, r0
   15ad0:	b	15ae0 <__assert_fail@plt+0x43dc>
   15ad4:	ldr	r0, [r3]
   15ad8:	cmp	r0, #0
   15adc:	popne	{r4, r5, r6, pc}
   15ae0:	add	r3, r3, #8
   15ae4:	cmp	r3, r2
   15ae8:	bcc	15ad4 <__assert_fail@plt+0x43d0>
   15aec:	mov	r0, #0
   15af0:	pop	{r4, r5, r6, pc}
   15af4:	ldr	r0, [r3]
   15af8:	pop	{r4, r5, r6, pc}
   15afc:	bl	116e0 <abort@plt>
   15b00:	push	{r4, r5, r6, lr}
   15b04:	mov	r5, r0
   15b08:	ldr	r4, [r0]
   15b0c:	ldr	r0, [r0, #4]
   15b10:	cmp	r4, r0
   15b14:	bcs	15b90 <__assert_fail@plt+0x448c>
   15b18:	add	r4, r4, #8
   15b1c:	mov	ip, #0
   15b20:	ldr	r3, [r4, #-8]
   15b24:	mov	r6, r4
   15b28:	cmp	r3, #0
   15b2c:	beq	15b78 <__assert_fail@plt+0x4474>
   15b30:	cmp	r2, ip
   15b34:	bls	15b84 <__assert_fail@plt+0x4480>
   15b38:	str	r3, [r1, ip, lsl #2]
   15b3c:	ldr	r3, [r4, #-4]
   15b40:	add	r0, ip, #1
   15b44:	cmp	r3, #0
   15b48:	add	ip, r1, ip, lsl #2
   15b4c:	beq	15b70 <__assert_fail@plt+0x446c>
   15b50:	cmp	r2, r0
   15b54:	beq	15b8c <__assert_fail@plt+0x4488>
   15b58:	ldr	lr, [r3]
   15b5c:	add	r0, r0, #1
   15b60:	str	lr, [ip, #4]!
   15b64:	ldr	r3, [r3, #4]
   15b68:	cmp	r3, #0
   15b6c:	bne	15b50 <__assert_fail@plt+0x444c>
   15b70:	mov	ip, r0
   15b74:	ldr	r0, [r5, #4]
   15b78:	cmp	r0, r6
   15b7c:	add	r4, r4, #8
   15b80:	bhi	15b20 <__assert_fail@plt+0x441c>
   15b84:	mov	r0, ip
   15b88:	pop	{r4, r5, r6, pc}
   15b8c:	pop	{r4, r5, r6, pc}
   15b90:	mov	r0, #0
   15b94:	pop	{r4, r5, r6, pc}
   15b98:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   15b9c:	ldr	r3, [r0, #4]
   15ba0:	ldr	r8, [r0]
   15ba4:	cmp	r8, r3
   15ba8:	bcs	15c0c <__assert_fail@plt+0x4508>
   15bac:	mov	r7, r2
   15bb0:	mov	r6, r1
   15bb4:	mov	r9, r0
   15bb8:	mov	r5, #0
   15bbc:	ldr	r0, [r8]
   15bc0:	cmp	r0, #0
   15bc4:	beq	15bf8 <__assert_fail@plt+0x44f4>
   15bc8:	mov	r4, r8
   15bcc:	b	15bd4 <__assert_fail@plt+0x44d0>
   15bd0:	ldr	r0, [r4]
   15bd4:	mov	r1, r7
   15bd8:	blx	r6
   15bdc:	cmp	r0, #0
   15be0:	beq	15c04 <__assert_fail@plt+0x4500>
   15be4:	ldr	r4, [r4, #4]
   15be8:	add	r5, r5, #1
   15bec:	cmp	r4, #0
   15bf0:	bne	15bd0 <__assert_fail@plt+0x44cc>
   15bf4:	ldr	r3, [r9, #4]
   15bf8:	add	r8, r8, #8
   15bfc:	cmp	r3, r8
   15c00:	bhi	15bbc <__assert_fail@plt+0x44b8>
   15c04:	mov	r0, r5
   15c08:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   15c0c:	mov	r5, #0
   15c10:	b	15c04 <__assert_fail@plt+0x4500>
   15c14:	push	{r4, r5, r6, lr}
   15c18:	mov	r4, r0
   15c1c:	ldrb	r0, [r0]
   15c20:	cmp	r0, #0
   15c24:	beq	15c54 <__assert_fail@plt+0x4550>
   15c28:	mov	r5, r1
   15c2c:	mov	r1, #0
   15c30:	rsb	r1, r1, r1, lsl #5
   15c34:	add	r0, r1, r0
   15c38:	mov	r1, r5
   15c3c:	bl	210e8 <__assert_fail@plt+0xf9e4>
   15c40:	ldrb	r0, [r4, #1]!
   15c44:	cmp	r0, #0
   15c48:	bne	15c30 <__assert_fail@plt+0x452c>
   15c4c:	mov	r0, r1
   15c50:	pop	{r4, r5, r6, pc}
   15c54:	mov	r1, r0
   15c58:	b	15c4c <__assert_fail@plt+0x4548>
   15c5c:	push	{lr}		; (str lr, [sp, #-4]!)
   15c60:	mov	ip, r0
   15c64:	ldr	lr, [pc, #16]	; 15c7c <__assert_fail@plt+0x4578>
   15c68:	ldm	lr!, {r0, r1, r2, r3}
   15c6c:	ldr	lr, [lr]
   15c70:	stmia	ip!, {r0, r1, r2, r3}
   15c74:	str	lr, [ip]
   15c78:	pop	{pc}		; (ldr pc, [sp], #4)
   15c7c:	andeq	r2, r2, r0, lsl sl
   15c80:	cmp	r2, #0
   15c84:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15c88:	mov	r4, r0
   15c8c:	ldr	sl, [pc, #548]	; 15eb8 <__assert_fail@plt+0x47b4>
   15c90:	mov	r0, #40	; 0x28
   15c94:	movne	sl, r2
   15c98:	cmp	r3, #0
   15c9c:	ldr	fp, [pc, #536]	; 15ebc <__assert_fail@plt+0x47b8>
   15ca0:	mov	r5, r1
   15ca4:	movne	fp, r3
   15ca8:	bl	1f564 <__assert_fail@plt+0xde60>
   15cac:	subs	r8, r0, #0
   15cb0:	beq	15d48 <__assert_fail@plt+0x4644>
   15cb4:	cmp	r5, #0
   15cb8:	ldr	r3, [pc, #512]	; 15ec0 <__assert_fail@plt+0x47bc>
   15cbc:	beq	15d50 <__assert_fail@plt+0x464c>
   15cc0:	cmp	r5, r3
   15cc4:	str	r5, [r8, #20]
   15cc8:	beq	15d54 <__assert_fail@plt+0x4650>
   15ccc:	vldr	s15, [r5, #8]
   15cd0:	vldr	s14, [pc, #456]	; 15ea0 <__assert_fail@plt+0x479c>
   15cd4:	vcmpe.f32	s15, s14
   15cd8:	vmrs	APSR_nzcv, fpscr
   15cdc:	ble	15d38 <__assert_fail@plt+0x4634>
   15ce0:	vldr	s13, [pc, #444]	; 15ea4 <__assert_fail@plt+0x47a0>
   15ce4:	vcmpe.f32	s15, s13
   15ce8:	vmrs	APSR_nzcv, fpscr
   15cec:	bpl	15d38 <__assert_fail@plt+0x4634>
   15cf0:	vldr	s13, [pc, #432]	; 15ea8 <__assert_fail@plt+0x47a4>
   15cf4:	vldr	s12, [r5, #12]
   15cf8:	vcmpe.f32	s12, s13
   15cfc:	vmrs	APSR_nzcv, fpscr
   15d00:	ble	15d38 <__assert_fail@plt+0x4634>
   15d04:	vldr	s13, [r5]
   15d08:	vcmpe.f32	s13, #0.0
   15d0c:	vmrs	APSR_nzcv, fpscr
   15d10:	blt	15d38 <__assert_fail@plt+0x4634>
   15d14:	vadd.f32	s14, s13, s14
   15d18:	vldr	s13, [r5, #4]
   15d1c:	vcmpe.f32	s14, s13
   15d20:	vmrs	APSR_nzcv, fpscr
   15d24:	bpl	15d38 <__assert_fail@plt+0x4634>
   15d28:	vldr	s12, [pc, #380]	; 15eac <__assert_fail@plt+0x47a8>
   15d2c:	vcmpe.f32	s13, s12
   15d30:	vmrs	APSR_nzcv, fpscr
   15d34:	bls	15e84 <__assert_fail@plt+0x4780>
   15d38:	str	r3, [r8, #20]
   15d3c:	mov	r0, r8
   15d40:	bl	15334 <__assert_fail@plt+0x3c30>
   15d44:	mov	r8, #0
   15d48:	mov	r0, r8
   15d4c:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15d50:	str	r3, [r8, #20]
   15d54:	vldr	s15, [pc, #340]	; 15eb0 <__assert_fail@plt+0x47ac>
   15d58:	vmov	s14, r4
   15d5c:	vldr	s13, [pc, #336]	; 15eb4 <__assert_fail@plt+0x47b0>
   15d60:	vcvt.f32.u32	s12, s14
   15d64:	vdiv.f32	s14, s12, s15
   15d68:	vcmpe.f32	s14, s13
   15d6c:	vmrs	APSR_nzcv, fpscr
   15d70:	bge	15e70 <__assert_fail@plt+0x476c>
   15d74:	vcvt.u32.f32	s15, s14
   15d78:	vmov	r4, s15
   15d7c:	cmp	r4, #10
   15d80:	movcc	r4, #10
   15d84:	orr	r7, r4, #1
   15d88:	cmn	r7, #1
   15d8c:	ldrne	r9, [pc, #304]	; 15ec4 <__assert_fail@plt+0x47c0>
   15d90:	beq	15e08 <__assert_fail@plt+0x4704>
   15d94:	cmp	r7, #9
   15d98:	bls	15e7c <__assert_fail@plt+0x4778>
   15d9c:	umull	r2, r3, r9, r7
   15da0:	lsr	r3, r3, #1
   15da4:	add	r3, r3, r3, lsl #1
   15da8:	cmp	r7, r3
   15dac:	beq	15dfc <__assert_fail@plt+0x46f8>
   15db0:	mov	r6, #16
   15db4:	mov	r5, #9
   15db8:	mov	r4, #3
   15dbc:	b	15dd0 <__assert_fail@plt+0x46cc>
   15dc0:	bl	210e8 <__assert_fail@plt+0xf9e4>
   15dc4:	add	r6, r6, #8
   15dc8:	cmp	r1, #0
   15dcc:	beq	15dfc <__assert_fail@plt+0x46f8>
   15dd0:	add	r5, r5, r6
   15dd4:	add	r4, r4, #2
   15dd8:	cmp	r5, r7
   15ddc:	mov	r0, r7
   15de0:	mov	r1, r4
   15de4:	bcc	15dc0 <__assert_fail@plt+0x46bc>
   15de8:	mov	r1, r4
   15dec:	mov	r0, r7
   15df0:	bl	210e8 <__assert_fail@plt+0xf9e4>
   15df4:	cmp	r1, #0
   15df8:	bne	15e08 <__assert_fail@plt+0x4704>
   15dfc:	add	r7, r7, #2
   15e00:	cmn	r7, #1
   15e04:	bne	15d94 <__assert_fail@plt+0x4690>
   15e08:	lsrs	r3, r7, #30
   15e0c:	movne	r4, #1
   15e10:	moveq	r4, #0
   15e14:	tst	r7, #536870912	; 0x20000000
   15e18:	bne	15e70 <__assert_fail@plt+0x476c>
   15e1c:	cmp	r4, #0
   15e20:	bne	15e70 <__assert_fail@plt+0x476c>
   15e24:	str	r7, [r8, #8]
   15e28:	mov	r0, r7
   15e2c:	mov	r1, #8
   15e30:	bl	1f51c <__assert_fail@plt+0xde18>
   15e34:	cmp	r0, #0
   15e38:	str	r0, [r8]
   15e3c:	beq	15d3c <__assert_fail@plt+0x4638>
   15e40:	ldr	r3, [r8, #8]
   15e44:	str	r4, [r8, #12]
   15e48:	str	r4, [r8, #16]
   15e4c:	add	r0, r0, r3, lsl #3
   15e50:	ldr	r3, [sp, #40]	; 0x28
   15e54:	str	r0, [r8, #4]
   15e58:	str	sl, [r8, #24]
   15e5c:	str	fp, [r8, #28]
   15e60:	str	r3, [r8, #32]
   15e64:	str	r4, [r8, #36]	; 0x24
   15e68:	mov	r0, r8
   15e6c:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15e70:	mov	r3, #0
   15e74:	str	r3, [r8, #8]
   15e78:	b	15d3c <__assert_fail@plt+0x4638>
   15e7c:	mov	r4, #3
   15e80:	b	15de8 <__assert_fail@plt+0x46e4>
   15e84:	vcmpe.f32	s15, s14
   15e88:	vmrs	APSR_nzcv, fpscr
   15e8c:	ble	15d38 <__assert_fail@plt+0x4634>
   15e90:	ldrb	r3, [r5, #16]
   15e94:	cmp	r3, #0
   15e98:	bne	15d7c <__assert_fail@plt+0x4678>
   15e9c:	b	15d58 <__assert_fail@plt+0x4654>
   15ea0:	stclcc	12, cr12, [ip, #820]	; 0x334
   15ea4:	svccc	0x00666666
   15ea8:	svccc	0x008ccccd
   15eac:	svccc	0x00800000
   15eb0:	svccc	0x004ccccd
   15eb4:	svcmi	0x00800000
   15eb8:	andeq	r5, r1, r0, lsl #10
   15ebc:	andeq	r5, r1, r4, lsl r5
   15ec0:	andeq	r2, r2, r0, lsl sl
   15ec4:	bge	feac0978 <optarg@@GLIBC_2.4+0xfea8c640>
   15ec8:	push	{r4, r5, r6, r7, r8, lr}
   15ecc:	mov	r5, r0
   15ed0:	ldr	r7, [r0]
   15ed4:	ldr	r3, [r0, #4]
   15ed8:	cmp	r7, r3
   15edc:	addcc	r7, r7, #8
   15ee0:	movcc	r6, #0
   15ee4:	bcs	15f60 <__assert_fail@plt+0x485c>
   15ee8:	ldr	r2, [r7, #-8]
   15eec:	mov	r8, r7
   15ef0:	cmp	r2, #0
   15ef4:	beq	15f54 <__assert_fail@plt+0x4850>
   15ef8:	ldr	r4, [r7, #-4]
   15efc:	ldr	r2, [r5, #32]
   15f00:	cmp	r4, #0
   15f04:	beq	15f38 <__assert_fail@plt+0x4834>
   15f08:	cmp	r2, #0
   15f0c:	beq	15f1c <__assert_fail@plt+0x4818>
   15f10:	ldr	r0, [r4]
   15f14:	blx	r2
   15f18:	ldr	r2, [r5, #32]
   15f1c:	ldr	r3, [r4, #4]
   15f20:	ldr	r1, [r5, #36]	; 0x24
   15f24:	str	r6, [r4]
   15f28:	str	r1, [r4, #4]
   15f2c:	str	r4, [r5, #36]	; 0x24
   15f30:	subs	r4, r3, #0
   15f34:	bne	15f08 <__assert_fail@plt+0x4804>
   15f38:	cmp	r2, #0
   15f3c:	beq	15f48 <__assert_fail@plt+0x4844>
   15f40:	ldr	r0, [r7, #-8]
   15f44:	blx	r2
   15f48:	str	r6, [r7, #-8]
   15f4c:	str	r6, [r7, #-4]
   15f50:	ldr	r3, [r5, #4]
   15f54:	cmp	r3, r8
   15f58:	add	r7, r7, #8
   15f5c:	bhi	15ee8 <__assert_fail@plt+0x47e4>
   15f60:	mov	r3, #0
   15f64:	str	r3, [r5, #12]
   15f68:	str	r3, [r5, #16]
   15f6c:	pop	{r4, r5, r6, r7, r8, pc}
   15f70:	ldr	r3, [r0, #32]
   15f74:	push	{r4, r5, r6, lr}
   15f78:	cmp	r3, #0
   15f7c:	mov	r5, r0
   15f80:	beq	15fe0 <__assert_fail@plt+0x48dc>
   15f84:	ldr	r3, [r0, #16]
   15f88:	cmp	r3, #0
   15f8c:	beq	15fe0 <__assert_fail@plt+0x48dc>
   15f90:	ldr	r6, [r0]
   15f94:	ldr	r3, [r0, #4]
   15f98:	cmp	r6, r3
   15f9c:	bcs	1601c <__assert_fail@plt+0x4918>
   15fa0:	ldr	r0, [r6]
   15fa4:	cmp	r0, #0
   15fa8:	beq	15fd0 <__assert_fail@plt+0x48cc>
   15fac:	mov	r4, r6
   15fb0:	b	15fb8 <__assert_fail@plt+0x48b4>
   15fb4:	ldr	r0, [r4]
   15fb8:	ldr	r3, [r5, #32]
   15fbc:	blx	r3
   15fc0:	ldr	r4, [r4, #4]
   15fc4:	cmp	r4, #0
   15fc8:	bne	15fb4 <__assert_fail@plt+0x48b0>
   15fcc:	ldr	r3, [r5, #4]
   15fd0:	add	r6, r6, #8
   15fd4:	cmp	r3, r6
   15fd8:	bhi	15fa0 <__assert_fail@plt+0x489c>
   15fdc:	b	15fe4 <__assert_fail@plt+0x48e0>
   15fe0:	ldr	r3, [r5, #4]
   15fe4:	ldr	r6, [r5]
   15fe8:	cmp	r6, r3
   15fec:	bcs	1601c <__assert_fail@plt+0x4918>
   15ff0:	ldr	r0, [r6, #4]
   15ff4:	cmp	r0, #0
   15ff8:	beq	16010 <__assert_fail@plt+0x490c>
   15ffc:	ldr	r4, [r0, #4]
   16000:	bl	15334 <__assert_fail@plt+0x3c30>
   16004:	subs	r0, r4, #0
   16008:	bne	15ffc <__assert_fail@plt+0x48f8>
   1600c:	ldr	r3, [r5, #4]
   16010:	add	r6, r6, #8
   16014:	cmp	r3, r6
   16018:	bhi	15ff0 <__assert_fail@plt+0x48ec>
   1601c:	ldr	r0, [r5, #36]	; 0x24
   16020:	cmp	r0, #0
   16024:	beq	16038 <__assert_fail@plt+0x4934>
   16028:	ldr	r4, [r0, #4]
   1602c:	bl	15334 <__assert_fail@plt+0x3c30>
   16030:	subs	r0, r4, #0
   16034:	bne	16028 <__assert_fail@plt+0x4924>
   16038:	ldr	r0, [r5]
   1603c:	bl	15334 <__assert_fail@plt+0x3c30>
   16040:	mov	r0, r5
   16044:	pop	{r4, r5, r6, lr}
   16048:	b	15334 <__assert_fail@plt+0x3c30>
   1604c:	ldr	r3, [r0, #20]
   16050:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   16054:	mov	r8, r0
   16058:	ldrb	r2, [r3, #16]
   1605c:	sub	sp, sp, #40	; 0x28
   16060:	cmp	r2, #0
   16064:	bne	16090 <__assert_fail@plt+0x498c>
   16068:	vmov	s15, r1
   1606c:	vldr	s13, [r3, #8]
   16070:	vldr	s14, [pc, #648]	; 16300 <__assert_fail@plt+0x4bfc>
   16074:	vcvt.f32.u32	s12, s15
   16078:	vdiv.f32	s15, s12, s13
   1607c:	vcmpe.f32	s15, s14
   16080:	vmrs	APSR_nzcv, fpscr
   16084:	bge	162b8 <__assert_fail@plt+0x4bb4>
   16088:	vcvt.u32.f32	s15, s15
   1608c:	vmov	r1, s15
   16090:	cmp	r1, #10
   16094:	movcc	r1, #10
   16098:	orr	r7, r1, #1
   1609c:	cmn	r7, #1
   160a0:	ldrne	r9, [pc, #604]	; 16304 <__assert_fail@plt+0x4c00>
   160a4:	beq	1611c <__assert_fail@plt+0x4a18>
   160a8:	cmp	r7, #9
   160ac:	bls	162c8 <__assert_fail@plt+0x4bc4>
   160b0:	umull	r2, r3, r9, r7
   160b4:	lsr	r3, r3, #1
   160b8:	add	r3, r3, r3, lsl #1
   160bc:	cmp	r7, r3
   160c0:	beq	16110 <__assert_fail@plt+0x4a0c>
   160c4:	mov	r6, #16
   160c8:	mov	r5, #9
   160cc:	mov	r4, #3
   160d0:	b	160ec <__assert_fail@plt+0x49e8>
   160d4:	mov	r1, r4
   160d8:	mov	r0, r7
   160dc:	bl	210e8 <__assert_fail@plt+0xf9e4>
   160e0:	add	r6, r6, #8
   160e4:	cmp	r1, #0
   160e8:	beq	16110 <__assert_fail@plt+0x4a0c>
   160ec:	add	r5, r5, r6
   160f0:	cmp	r5, r7
   160f4:	add	r4, r4, #2
   160f8:	bcc	160d4 <__assert_fail@plt+0x49d0>
   160fc:	mov	r1, r4
   16100:	mov	r0, r7
   16104:	bl	210e8 <__assert_fail@plt+0xf9e4>
   16108:	cmp	r1, #0
   1610c:	bne	1611c <__assert_fail@plt+0x4a18>
   16110:	add	r7, r7, #2
   16114:	cmn	r7, #1
   16118:	bne	160a8 <__assert_fail@plt+0x49a4>
   1611c:	lsrs	r3, r7, #30
   16120:	movne	r4, #1
   16124:	moveq	r4, #0
   16128:	tst	r7, #536870912	; 0x20000000
   1612c:	bne	162b8 <__assert_fail@plt+0x4bb4>
   16130:	cmp	r4, #0
   16134:	bne	162b8 <__assert_fail@plt+0x4bb4>
   16138:	ldr	r3, [r8, #8]
   1613c:	cmp	r3, r7
   16140:	beq	162a8 <__assert_fail@plt+0x4ba4>
   16144:	mov	r1, #8
   16148:	mov	r0, r7
   1614c:	bl	1f51c <__assert_fail@plt+0xde18>
   16150:	cmp	r0, #0
   16154:	str	r0, [sp]
   16158:	beq	162b8 <__assert_fail@plt+0x4bb4>
   1615c:	ldr	r1, [r8, #24]
   16160:	ldr	r5, [r8, #20]
   16164:	ldr	lr, [r8, #28]
   16168:	ldr	ip, [r8, #32]
   1616c:	add	r0, r0, r7, lsl #3
   16170:	ldr	r3, [r8, #36]	; 0x24
   16174:	str	r0, [sp, #4]
   16178:	str	r1, [sp, #24]
   1617c:	mov	r2, r4
   16180:	mov	r0, sp
   16184:	mov	r1, r8
   16188:	str	r7, [sp, #8]
   1618c:	str	r4, [sp, #12]
   16190:	str	r4, [sp, #16]
   16194:	str	r5, [sp, #20]
   16198:	str	lr, [sp, #28]
   1619c:	str	ip, [sp, #32]
   161a0:	str	r3, [sp, #36]	; 0x24
   161a4:	bl	15644 <__assert_fail@plt+0x3f40>
   161a8:	subs	r9, r0, #0
   161ac:	bne	162d0 <__assert_fail@plt+0x4bcc>
   161b0:	ldr	r5, [sp]
   161b4:	ldr	r2, [sp, #4]
   161b8:	ldr	r3, [sp, #36]	; 0x24
   161bc:	cmp	r5, r2
   161c0:	str	r3, [r8, #36]	; 0x24
   161c4:	addcc	r5, r5, #8
   161c8:	movcc	r7, r9
   161cc:	bcs	1627c <__assert_fail@plt+0x4b78>
   161d0:	ldr	r3, [r5, #-8]
   161d4:	mov	r6, r5
   161d8:	cmp	r3, #0
   161dc:	beq	16270 <__assert_fail@plt+0x4b6c>
   161e0:	ldr	r4, [r5, #-4]
   161e4:	cmp	r4, #0
   161e8:	beq	1626c <__assert_fail@plt+0x4b68>
   161ec:	ldr	r1, [r8, #8]
   161f0:	b	1620c <__assert_fail@plt+0x4b08>
   161f4:	ldr	r3, [ip, #4]
   161f8:	cmp	r2, #0
   161fc:	str	r3, [r4, #4]
   16200:	str	r4, [ip, #4]
   16204:	beq	16268 <__assert_fail@plt+0x4b64>
   16208:	mov	r4, r2
   1620c:	ldr	sl, [r4]
   16210:	ldr	r3, [r8, #24]
   16214:	mov	r0, sl
   16218:	blx	r3
   1621c:	ldr	r1, [r8, #8]
   16220:	cmp	r0, r1
   16224:	bcs	162fc <__assert_fail@plt+0x4bf8>
   16228:	ldr	r3, [r8]
   1622c:	ldr	r2, [r4, #4]
   16230:	add	ip, r3, r0, lsl #3
   16234:	ldr	lr, [r3, r0, lsl #3]
   16238:	cmp	lr, #0
   1623c:	bne	161f4 <__assert_fail@plt+0x4af0>
   16240:	ldr	ip, [r8, #12]
   16244:	str	sl, [r3, r0, lsl #3]
   16248:	add	r3, ip, #1
   1624c:	str	r3, [r8, #12]
   16250:	str	lr, [r4]
   16254:	ldr	r3, [r8, #36]	; 0x24
   16258:	cmp	r2, #0
   1625c:	str	r3, [r4, #4]
   16260:	str	r4, [r8, #36]	; 0x24
   16264:	bne	16208 <__assert_fail@plt+0x4b04>
   16268:	ldr	r2, [sp, #4]
   1626c:	str	r7, [r5, #-4]
   16270:	cmp	r6, r2
   16274:	add	r5, r5, #8
   16278:	bcc	161d0 <__assert_fail@plt+0x4acc>
   1627c:	mov	r1, sp
   16280:	mov	r0, r8
   16284:	mov	r2, #0
   16288:	bl	15644 <__assert_fail@plt+0x3f40>
   1628c:	cmp	r0, #0
   16290:	beq	162fc <__assert_fail@plt+0x4bf8>
   16294:	ldr	r0, [sp]
   16298:	bl	15334 <__assert_fail@plt+0x3c30>
   1629c:	mov	r0, r9
   162a0:	add	sp, sp, #40	; 0x28
   162a4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   162a8:	mov	r9, #1
   162ac:	mov	r0, r9
   162b0:	add	sp, sp, #40	; 0x28
   162b4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   162b8:	mov	r9, #0
   162bc:	mov	r0, r9
   162c0:	add	sp, sp, #40	; 0x28
   162c4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   162c8:	mov	r4, #3
   162cc:	b	160fc <__assert_fail@plt+0x49f8>
   162d0:	ldr	r0, [r8]
   162d4:	bl	15334 <__assert_fail@plt+0x3c30>
   162d8:	ldmib	sp, {r0, r1, r2}
   162dc:	ldr	ip, [sp]
   162e0:	ldr	r3, [sp, #36]	; 0x24
   162e4:	stmib	r8, {r0, r1, r2}
   162e8:	mov	r0, r9
   162ec:	str	ip, [r8]
   162f0:	str	r3, [r8, #36]	; 0x24
   162f4:	add	sp, sp, #40	; 0x28
   162f8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   162fc:	bl	116e0 <abort@plt>
   16300:	svcmi	0x00800000
   16304:	bge	feac0db8 <optarg@@GLIBC_2.4+0xfea8ca80>
   16308:	push	{r4, r5, r6, r7, r8, r9, lr}
   1630c:	subs	r5, r1, #0
   16310:	sub	sp, sp, #12
   16314:	beq	16530 <__assert_fail@plt+0x4e2c>
   16318:	ldr	r3, [r0, #24]
   1631c:	mov	r6, r0
   16320:	ldr	r1, [r0, #8]
   16324:	mov	r0, r5
   16328:	mov	r7, r2
   1632c:	blx	r3
   16330:	ldr	r3, [r6, #8]
   16334:	cmp	r0, r3
   16338:	mov	r8, r0
   1633c:	bcs	16530 <__assert_fail@plt+0x4e2c>
   16340:	ldr	r9, [r6]
   16344:	add	r4, r9, r0, lsl #3
   16348:	ldr	r1, [r9, r0, lsl #3]
   1634c:	str	r4, [sp, #4]
   16350:	cmp	r1, #0
   16354:	beq	16534 <__assert_fail@plt+0x4e30>
   16358:	cmp	r5, r1
   1635c:	beq	163b4 <__assert_fail@plt+0x4cb0>
   16360:	ldr	r3, [r6, #28]
   16364:	mov	r0, r5
   16368:	blx	r3
   1636c:	cmp	r0, #0
   16370:	bne	163c8 <__assert_fail@plt+0x4cc4>
   16374:	ldr	r3, [r4, #4]
   16378:	cmp	r3, #0
   1637c:	bne	163a8 <__assert_fail@plt+0x4ca4>
   16380:	b	163d4 <__assert_fail@plt+0x4cd0>
   16384:	ldr	r3, [r6, #28]
   16388:	mov	r0, r5
   1638c:	blx	r3
   16390:	cmp	r0, #0
   16394:	bne	16448 <__assert_fail@plt+0x4d44>
   16398:	ldr	r4, [r4, #4]
   1639c:	ldr	r3, [r4, #4]
   163a0:	cmp	r3, #0
   163a4:	beq	163d4 <__assert_fail@plt+0x4cd0>
   163a8:	ldr	r1, [r3]
   163ac:	cmp	r5, r1
   163b0:	bne	16384 <__assert_fail@plt+0x4c80>
   163b4:	mov	r0, #0
   163b8:	cmp	r7, #0
   163bc:	strne	r1, [r7]
   163c0:	add	sp, sp, #12
   163c4:	pop	{r4, r5, r6, r7, r8, r9, pc}
   163c8:	ldr	r1, [r9, r8, lsl #3]
   163cc:	cmp	r1, #0
   163d0:	bne	163b4 <__assert_fail@plt+0x4cb0>
   163d4:	vldr	s15, [r6, #8]
   163d8:	ldr	r3, [r6, #20]
   163dc:	vldr	s14, [r6, #12]
   163e0:	vcvt.f32.u32	s15, s15
   163e4:	vldr	s13, [r3, #8]
   163e8:	vcvt.f32.u32	s14, s14
   163ec:	vmul.f32	s12, s13, s15
   163f0:	vcmpe.f32	s14, s12
   163f4:	vmrs	APSR_nzcv, fpscr
   163f8:	bgt	16454 <__assert_fail@plt+0x4d50>
   163fc:	ldr	r4, [sp, #4]
   16400:	ldr	r3, [r4]
   16404:	cmp	r3, #0
   16408:	beq	16598 <__assert_fail@plt+0x4e94>
   1640c:	ldr	r3, [r6, #36]	; 0x24
   16410:	cmp	r3, #0
   16414:	beq	16580 <__assert_fail@plt+0x4e7c>
   16418:	ldr	r2, [r3, #4]
   1641c:	str	r2, [r6, #36]	; 0x24
   16420:	ldr	r2, [r6, #16]
   16424:	ldr	r1, [r4, #4]
   16428:	add	r2, r2, #1
   1642c:	str	r5, [r3]
   16430:	str	r1, [r3, #4]
   16434:	mov	r0, #1
   16438:	str	r3, [r4, #4]
   1643c:	str	r2, [r6, #16]
   16440:	add	sp, sp, #12
   16444:	pop	{r4, r5, r6, r7, r8, r9, pc}
   16448:	ldr	r3, [r4, #4]
   1644c:	ldr	r1, [r3]
   16450:	b	163cc <__assert_fail@plt+0x4cc8>
   16454:	ldr	r2, [pc, #392]	; 165e4 <__assert_fail@plt+0x4ee0>
   16458:	cmp	r3, r2
   1645c:	beq	164e0 <__assert_fail@plt+0x4ddc>
   16460:	vldr	s12, [pc, #352]	; 165c8 <__assert_fail@plt+0x4ec4>
   16464:	vcmpe.f32	s13, s12
   16468:	vmrs	APSR_nzcv, fpscr
   1646c:	ble	164c8 <__assert_fail@plt+0x4dc4>
   16470:	vldr	s11, [pc, #340]	; 165cc <__assert_fail@plt+0x4ec8>
   16474:	vcmpe.f32	s13, s11
   16478:	vmrs	APSR_nzcv, fpscr
   1647c:	bpl	164c8 <__assert_fail@plt+0x4dc4>
   16480:	vldr	s11, [r3, #12]
   16484:	vldr	s10, [pc, #324]	; 165d0 <__assert_fail@plt+0x4ecc>
   16488:	vcmpe.f32	s11, s10
   1648c:	vmrs	APSR_nzcv, fpscr
   16490:	ble	164c8 <__assert_fail@plt+0x4dc4>
   16494:	vldr	s10, [r3]
   16498:	vcmpe.f32	s10, #0.0
   1649c:	vmrs	APSR_nzcv, fpscr
   164a0:	blt	164c8 <__assert_fail@plt+0x4dc4>
   164a4:	vadd.f32	s12, s10, s12
   164a8:	vldr	s10, [r3, #4]
   164ac:	vcmpe.f32	s12, s10
   164b0:	vmrs	APSR_nzcv, fpscr
   164b4:	bpl	164c8 <__assert_fail@plt+0x4dc4>
   164b8:	vldr	s9, [pc, #276]	; 165d4 <__assert_fail@plt+0x4ed0>
   164bc:	vcmpe.f32	s10, s9
   164c0:	vmrs	APSR_nzcv, fpscr
   164c4:	bls	165a8 <__assert_fail@plt+0x4ea4>
   164c8:	vldr	s13, [pc, #264]	; 165d8 <__assert_fail@plt+0x4ed4>
   164cc:	str	r2, [r6, #20]
   164d0:	vmul.f32	s12, s15, s13
   164d4:	vcmpe.f32	s12, s14
   164d8:	vmrs	APSR_nzcv, fpscr
   164dc:	bpl	163fc <__assert_fail@plt+0x4cf8>
   164e0:	vldr	s11, [pc, #244]	; 165dc <__assert_fail@plt+0x4ed8>
   164e4:	vmul.f32	s15, s15, s11
   164e8:	vmul.f32	s15, s15, s13
   164ec:	vldr	s14, [pc, #236]	; 165e0 <__assert_fail@plt+0x4edc>
   164f0:	vcmpe.f32	s15, s14
   164f4:	vmrs	APSR_nzcv, fpscr
   164f8:	bge	165a0 <__assert_fail@plt+0x4e9c>
   164fc:	vcvt.u32.f32	s15, s15
   16500:	mov	r0, r6
   16504:	vmov	r1, s15
   16508:	bl	1604c <__assert_fail@plt+0x4948>
   1650c:	cmp	r0, #0
   16510:	beq	165a0 <__assert_fail@plt+0x4e9c>
   16514:	mov	r3, #0
   16518:	add	r2, sp, #4
   1651c:	mov	r1, r5
   16520:	mov	r0, r6
   16524:	bl	15524 <__assert_fail@plt+0x3e20>
   16528:	cmp	r0, #0
   1652c:	beq	163fc <__assert_fail@plt+0x4cf8>
   16530:	bl	116e0 <abort@plt>
   16534:	vmov	s15, r3
   16538:	ldr	r2, [r6, #12]
   1653c:	ldr	r3, [r6, #20]
   16540:	vcvt.f32.u32	s15, s15
   16544:	vldr	s13, [r3, #8]
   16548:	vmov	s14, r2
   1654c:	vcvt.f32.u32	s14, s14
   16550:	vmul.f32	s12, s13, s15
   16554:	vcmpe.f32	s14, s12
   16558:	vmrs	APSR_nzcv, fpscr
   1655c:	bgt	16454 <__assert_fail@plt+0x4d50>
   16560:	ldr	r3, [r6, #16]
   16564:	add	r2, r2, #1
   16568:	add	r3, r3, #1
   1656c:	str	r5, [r4]
   16570:	mov	r0, #1
   16574:	str	r2, [r6, #12]
   16578:	str	r3, [r6, #16]
   1657c:	b	163c0 <__assert_fail@plt+0x4cbc>
   16580:	mov	r0, #8
   16584:	bl	1f564 <__assert_fail@plt+0xde60>
   16588:	subs	r3, r0, #0
   1658c:	beq	165a0 <__assert_fail@plt+0x4e9c>
   16590:	ldr	r4, [sp, #4]
   16594:	b	16420 <__assert_fail@plt+0x4d1c>
   16598:	ldr	r2, [r6, #12]
   1659c:	b	16560 <__assert_fail@plt+0x4e5c>
   165a0:	mvn	r0, #0
   165a4:	b	163c0 <__assert_fail@plt+0x4cbc>
   165a8:	vcmpe.f32	s12, s13
   165ac:	vmrs	APSR_nzcv, fpscr
   165b0:	bpl	164c8 <__assert_fail@plt+0x4dc4>
   165b4:	ldrb	r3, [r3, #16]
   165b8:	cmp	r3, #0
   165bc:	vmulne.f32	s15, s11, s15
   165c0:	bne	164ec <__assert_fail@plt+0x4de8>
   165c4:	b	164e4 <__assert_fail@plt+0x4de0>
   165c8:	stclcc	12, cr12, [ip, #820]	; 0x334
   165cc:	svccc	0x00666666
   165d0:	svccc	0x008ccccd
   165d4:	svccc	0x00800000
   165d8:	svccc	0x004ccccd
   165dc:	svccc	0x00b4fdf4
   165e0:	svcmi	0x00800000
   165e4:	andeq	r2, r2, r0, lsl sl
   165e8:	push	{r4, r5, r6, r7, r8, lr}
   165ec:	subs	r5, r1, #0
   165f0:	sub	sp, sp, #8
   165f4:	beq	167f8 <__assert_fail@plt+0x50f4>
   165f8:	ldr	r3, [r0, #24]
   165fc:	mov	r6, r0
   16600:	ldr	r1, [r0, #8]
   16604:	mov	r0, r5
   16608:	blx	r3
   1660c:	ldr	r3, [r6, #8]
   16610:	cmp	r0, r3
   16614:	mov	r7, r0
   16618:	bcs	167f8 <__assert_fail@plt+0x50f4>
   1661c:	ldr	r8, [r6]
   16620:	add	r4, r8, r0, lsl #3
   16624:	ldr	r1, [r8, r0, lsl #3]
   16628:	str	r4, [sp, #4]
   1662c:	cmp	r1, #0
   16630:	beq	167fc <__assert_fail@plt+0x50f8>
   16634:	cmp	r5, r1
   16638:	beq	1665c <__assert_fail@plt+0x4f58>
   1663c:	ldr	r3, [r6, #28]
   16640:	mov	r0, r5
   16644:	blx	r3
   16648:	cmp	r0, #0
   1664c:	beq	1668c <__assert_fail@plt+0x4f88>
   16650:	ldr	r1, [r8, r7, lsl #3]
   16654:	cmp	r1, #0
   16658:	beq	16698 <__assert_fail@plt+0x4f94>
   1665c:	mov	r0, r1
   16660:	add	sp, sp, #8
   16664:	pop	{r4, r5, r6, r7, r8, pc}
   16668:	ldr	r1, [r3]
   1666c:	cmp	r5, r1
   16670:	beq	1665c <__assert_fail@plt+0x4f58>
   16674:	ldr	r3, [r6, #28]
   16678:	mov	r0, r5
   1667c:	blx	r3
   16680:	cmp	r0, #0
   16684:	bne	16710 <__assert_fail@plt+0x500c>
   16688:	ldr	r4, [r4, #4]
   1668c:	ldr	r3, [r4, #4]
   16690:	cmp	r3, #0
   16694:	bne	16668 <__assert_fail@plt+0x4f64>
   16698:	vldr	s15, [r6, #8]
   1669c:	ldr	r3, [r6, #20]
   166a0:	vldr	s14, [r6, #12]
   166a4:	vcvt.f32.u32	s15, s15
   166a8:	vldr	s13, [r3, #8]
   166ac:	vcvt.f32.u32	s14, s14
   166b0:	vmul.f32	s12, s13, s15
   166b4:	vcmpe.f32	s14, s12
   166b8:	vmrs	APSR_nzcv, fpscr
   166bc:	bgt	1671c <__assert_fail@plt+0x5018>
   166c0:	ldr	r4, [sp, #4]
   166c4:	ldr	r3, [r4]
   166c8:	cmp	r3, #0
   166cc:	beq	1685c <__assert_fail@plt+0x5158>
   166d0:	ldr	r0, [r6, #36]	; 0x24
   166d4:	cmp	r0, #0
   166d8:	beq	16844 <__assert_fail@plt+0x5140>
   166dc:	ldr	r3, [r0, #4]
   166e0:	str	r3, [r6, #36]	; 0x24
   166e4:	ldr	r3, [r6, #16]
   166e8:	ldr	r2, [r4, #4]
   166ec:	add	r3, r3, #1
   166f0:	str	r5, [r0]
   166f4:	str	r2, [r0, #4]
   166f8:	str	r0, [r4, #4]
   166fc:	str	r3, [r6, #16]
   16700:	mov	r1, r5
   16704:	mov	r0, r1
   16708:	add	sp, sp, #8
   1670c:	pop	{r4, r5, r6, r7, r8, pc}
   16710:	ldr	r3, [r4, #4]
   16714:	ldr	r1, [r3]
   16718:	b	16654 <__assert_fail@plt+0x4f50>
   1671c:	ldr	r2, [pc, #388]	; 168a8 <__assert_fail@plt+0x51a4>
   16720:	cmp	r3, r2
   16724:	beq	167a8 <__assert_fail@plt+0x50a4>
   16728:	vldr	s12, [pc, #348]	; 1688c <__assert_fail@plt+0x5188>
   1672c:	vcmpe.f32	s13, s12
   16730:	vmrs	APSR_nzcv, fpscr
   16734:	ble	16790 <__assert_fail@plt+0x508c>
   16738:	vldr	s11, [pc, #336]	; 16890 <__assert_fail@plt+0x518c>
   1673c:	vcmpe.f32	s13, s11
   16740:	vmrs	APSR_nzcv, fpscr
   16744:	bpl	16790 <__assert_fail@plt+0x508c>
   16748:	vldr	s11, [r3, #12]
   1674c:	vldr	s10, [pc, #320]	; 16894 <__assert_fail@plt+0x5190>
   16750:	vcmpe.f32	s11, s10
   16754:	vmrs	APSR_nzcv, fpscr
   16758:	ble	16790 <__assert_fail@plt+0x508c>
   1675c:	vldr	s10, [r3]
   16760:	vcmpe.f32	s10, #0.0
   16764:	vmrs	APSR_nzcv, fpscr
   16768:	blt	16790 <__assert_fail@plt+0x508c>
   1676c:	vadd.f32	s12, s10, s12
   16770:	vldr	s10, [r3, #4]
   16774:	vcmpe.f32	s12, s10
   16778:	vmrs	APSR_nzcv, fpscr
   1677c:	bpl	16790 <__assert_fail@plt+0x508c>
   16780:	vldr	s9, [pc, #272]	; 16898 <__assert_fail@plt+0x5194>
   16784:	vcmpe.f32	s10, s9
   16788:	vmrs	APSR_nzcv, fpscr
   1678c:	bls	1686c <__assert_fail@plt+0x5168>
   16790:	vldr	s13, [pc, #260]	; 1689c <__assert_fail@plt+0x5198>
   16794:	str	r2, [r6, #20]
   16798:	vmul.f32	s12, s15, s13
   1679c:	vcmpe.f32	s12, s14
   167a0:	vmrs	APSR_nzcv, fpscr
   167a4:	bpl	166c0 <__assert_fail@plt+0x4fbc>
   167a8:	vldr	s11, [pc, #240]	; 168a0 <__assert_fail@plt+0x519c>
   167ac:	vmul.f32	s15, s15, s11
   167b0:	vmul.f32	s15, s15, s13
   167b4:	vldr	s14, [pc, #232]	; 168a4 <__assert_fail@plt+0x51a0>
   167b8:	vcmpe.f32	s15, s14
   167bc:	vmrs	APSR_nzcv, fpscr
   167c0:	bge	16864 <__assert_fail@plt+0x5160>
   167c4:	vcvt.u32.f32	s15, s15
   167c8:	mov	r0, r6
   167cc:	vmov	r1, s15
   167d0:	bl	1604c <__assert_fail@plt+0x4948>
   167d4:	cmp	r0, #0
   167d8:	beq	16864 <__assert_fail@plt+0x5160>
   167dc:	mov	r3, #0
   167e0:	add	r2, sp, #4
   167e4:	mov	r1, r5
   167e8:	mov	r0, r6
   167ec:	bl	15524 <__assert_fail@plt+0x3e20>
   167f0:	cmp	r0, #0
   167f4:	beq	166c0 <__assert_fail@plt+0x4fbc>
   167f8:	bl	116e0 <abort@plt>
   167fc:	vmov	s15, r3
   16800:	ldr	r2, [r6, #12]
   16804:	ldr	r3, [r6, #20]
   16808:	vcvt.f32.u32	s15, s15
   1680c:	vldr	s13, [r3, #8]
   16810:	vmov	s14, r2
   16814:	vcvt.f32.u32	s14, s14
   16818:	vmul.f32	s12, s15, s13
   1681c:	vcmpe.f32	s12, s14
   16820:	vmrs	APSR_nzcv, fpscr
   16824:	bmi	1671c <__assert_fail@plt+0x5018>
   16828:	ldr	r3, [r6, #16]
   1682c:	add	r2, r2, #1
   16830:	add	r3, r3, #1
   16834:	str	r5, [r4]
   16838:	str	r2, [r6, #12]
   1683c:	str	r3, [r6, #16]
   16840:	b	16700 <__assert_fail@plt+0x4ffc>
   16844:	mov	r0, #8
   16848:	bl	1f564 <__assert_fail@plt+0xde60>
   1684c:	cmp	r0, #0
   16850:	beq	16864 <__assert_fail@plt+0x5160>
   16854:	ldr	r4, [sp, #4]
   16858:	b	166e4 <__assert_fail@plt+0x4fe0>
   1685c:	ldr	r2, [r6, #12]
   16860:	b	16828 <__assert_fail@plt+0x5124>
   16864:	mov	r1, #0
   16868:	b	1665c <__assert_fail@plt+0x4f58>
   1686c:	vcmpe.f32	s12, s13
   16870:	vmrs	APSR_nzcv, fpscr
   16874:	bpl	16790 <__assert_fail@plt+0x508c>
   16878:	ldrb	r3, [r3, #16]
   1687c:	cmp	r3, #0
   16880:	vmulne.f32	s15, s11, s15
   16884:	bne	167b4 <__assert_fail@plt+0x50b0>
   16888:	b	167ac <__assert_fail@plt+0x50a8>
   1688c:	stclcc	12, cr12, [ip, #820]	; 0x334
   16890:	svccc	0x00666666
   16894:	svccc	0x008ccccd
   16898:	svccc	0x00800000
   1689c:	svccc	0x004ccccd
   168a0:	svccc	0x00b4fdf4
   168a4:	svcmi	0x00800000
   168a8:	andeq	r2, r2, r0, lsl sl
   168ac:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   168b0:	mov	r7, r1
   168b4:	ldr	r3, [r0, #24]
   168b8:	mov	r6, r0
   168bc:	ldr	r1, [r0, #8]
   168c0:	mov	r0, r7
   168c4:	blx	r3
   168c8:	ldr	r3, [r6, #8]
   168cc:	cmp	r0, r3
   168d0:	bcs	16afc <__assert_fail@plt+0x53f8>
   168d4:	ldr	r9, [r6]
   168d8:	mov	r8, r0
   168dc:	add	r5, r9, r0, lsl #3
   168e0:	ldr	r4, [r9, r0, lsl #3]
   168e4:	cmp	r4, #0
   168e8:	beq	16994 <__assert_fail@plt+0x5290>
   168ec:	cmp	r7, r4
   168f0:	beq	16910 <__assert_fail@plt+0x520c>
   168f4:	mov	r1, r4
   168f8:	ldr	r3, [r6, #28]
   168fc:	mov	r0, r7
   16900:	blx	r3
   16904:	cmp	r0, #0
   16908:	beq	16988 <__assert_fail@plt+0x5284>
   1690c:	ldr	r4, [r9, r8, lsl #3]
   16910:	ldr	r3, [r5, #4]
   16914:	cmp	r3, #0
   16918:	movne	r2, #0
   1691c:	ldmne	r3, {r0, r1}
   16920:	streq	r3, [r9, r8, lsl #3]
   16924:	stmne	r5, {r0, r1}
   16928:	strne	r2, [r3]
   1692c:	ldrne	r2, [r6, #36]	; 0x24
   16930:	strne	r2, [r3, #4]
   16934:	strne	r3, [r6, #36]	; 0x24
   16938:	cmp	r4, #0
   1693c:	beq	16994 <__assert_fail@plt+0x5290>
   16940:	ldr	r2, [r9, r8, lsl #3]
   16944:	ldr	r3, [r6, #16]
   16948:	cmp	r2, #0
   1694c:	sub	r3, r3, #1
   16950:	str	r3, [r6, #16]
   16954:	beq	169c8 <__assert_fail@plt+0x52c4>
   16958:	mov	r0, r4
   1695c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   16960:	ldr	r4, [r3]
   16964:	cmp	r7, r4
   16968:	beq	169a8 <__assert_fail@plt+0x52a4>
   1696c:	mov	r1, r4
   16970:	ldr	r3, [r6, #28]
   16974:	mov	r0, r7
   16978:	blx	r3
   1697c:	cmp	r0, #0
   16980:	bne	169a0 <__assert_fail@plt+0x529c>
   16984:	ldr	r5, [r5, #4]
   16988:	ldr	r3, [r5, #4]
   1698c:	cmp	r3, #0
   16990:	bne	16960 <__assert_fail@plt+0x525c>
   16994:	mov	r4, #0
   16998:	mov	r0, r4
   1699c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   169a0:	ldr	r3, [r5, #4]
   169a4:	ldr	r4, [r3]
   169a8:	ldr	r1, [r3, #4]
   169ac:	mov	r2, #0
   169b0:	str	r1, [r5, #4]
   169b4:	str	r2, [r3]
   169b8:	ldr	r2, [r6, #36]	; 0x24
   169bc:	str	r2, [r3, #4]
   169c0:	str	r3, [r6, #36]	; 0x24
   169c4:	b	16938 <__assert_fail@plt+0x5234>
   169c8:	vldr	s15, [r6, #8]
   169cc:	ldr	r3, [r6, #12]
   169d0:	ldr	r2, [r6, #20]
   169d4:	sub	r3, r3, #1
   169d8:	vcvt.f32.u32	s14, s15
   169dc:	vldr	s13, [r2]
   169e0:	vmov	s15, r3
   169e4:	str	r3, [r6, #12]
   169e8:	vcvt.f32.u32	s15, s15
   169ec:	vmul.f32	s12, s13, s14
   169f0:	vcmpe.f32	s15, s12
   169f4:	vmrs	APSR_nzcv, fpscr
   169f8:	bpl	16958 <__assert_fail@plt+0x5254>
   169fc:	ldr	r3, [pc, #276]	; 16b18 <__assert_fail@plt+0x5414>
   16a00:	cmp	r2, r3
   16a04:	beq	16ae4 <__assert_fail@plt+0x53e0>
   16a08:	vldr	s12, [r2, #8]
   16a0c:	vldr	s11, [pc, #236]	; 16b00 <__assert_fail@plt+0x53fc>
   16a10:	vcmpe.f32	s12, s11
   16a14:	vmrs	APSR_nzcv, fpscr
   16a18:	ble	16acc <__assert_fail@plt+0x53c8>
   16a1c:	vldr	s10, [pc, #224]	; 16b04 <__assert_fail@plt+0x5400>
   16a20:	vcmpe.f32	s12, s10
   16a24:	vmrs	APSR_nzcv, fpscr
   16a28:	bpl	16acc <__assert_fail@plt+0x53c8>
   16a2c:	vldr	s10, [pc, #212]	; 16b08 <__assert_fail@plt+0x5404>
   16a30:	vldr	s9, [r2, #12]
   16a34:	vcmpe.f32	s9, s10
   16a38:	vmrs	APSR_nzcv, fpscr
   16a3c:	ble	16acc <__assert_fail@plt+0x53c8>
   16a40:	vcmpe.f32	s13, #0.0
   16a44:	vmrs	APSR_nzcv, fpscr
   16a48:	blt	16acc <__assert_fail@plt+0x53c8>
   16a4c:	vadd.f32	s13, s13, s11
   16a50:	vldr	s11, [r2, #4]
   16a54:	vcmpe.f32	s13, s11
   16a58:	vmrs	APSR_nzcv, fpscr
   16a5c:	bpl	16acc <__assert_fail@plt+0x53c8>
   16a60:	vldr	s10, [pc, #164]	; 16b0c <__assert_fail@plt+0x5408>
   16a64:	vcmpe.f32	s11, s10
   16a68:	vmrs	APSR_nzcv, fpscr
   16a6c:	bhi	16acc <__assert_fail@plt+0x53c8>
   16a70:	vcmpe.f32	s12, s13
   16a74:	vmrs	APSR_nzcv, fpscr
   16a78:	ble	16acc <__assert_fail@plt+0x53c8>
   16a7c:	ldrb	r3, [r2, #16]
   16a80:	cmp	r3, #0
   16a84:	beq	16aec <__assert_fail@plt+0x53e8>
   16a88:	vmul.f32	s15, s14, s11
   16a8c:	vcvt.u32.f32	s15, s15
   16a90:	vmov	r1, s15
   16a94:	mov	r0, r6
   16a98:	bl	1604c <__assert_fail@plt+0x4948>
   16a9c:	cmp	r0, #0
   16aa0:	bne	16958 <__assert_fail@plt+0x5254>
   16aa4:	ldr	r0, [r6, #36]	; 0x24
   16aa8:	cmp	r0, #0
   16aac:	beq	16ac0 <__assert_fail@plt+0x53bc>
   16ab0:	ldr	r5, [r0, #4]
   16ab4:	bl	15334 <__assert_fail@plt+0x3c30>
   16ab8:	subs	r0, r5, #0
   16abc:	bne	16ab0 <__assert_fail@plt+0x53ac>
   16ac0:	mov	r3, #0
   16ac4:	str	r3, [r6, #36]	; 0x24
   16ac8:	b	16958 <__assert_fail@plt+0x5254>
   16acc:	vldr	s13, [pc, #60]	; 16b10 <__assert_fail@plt+0x540c>
   16ad0:	str	r3, [r6, #20]
   16ad4:	vmul.f32	s13, s14, s13
   16ad8:	vcmpe.f32	s15, s13
   16adc:	vmrs	APSR_nzcv, fpscr
   16ae0:	bpl	16958 <__assert_fail@plt+0x5254>
   16ae4:	vldr	s12, [pc, #40]	; 16b14 <__assert_fail@plt+0x5410>
   16ae8:	vldr	s11, [pc, #28]	; 16b0c <__assert_fail@plt+0x5408>
   16aec:	vmul.f32	s15, s14, s11
   16af0:	vmul.f32	s15, s15, s12
   16af4:	vcvt.u32.f32	s15, s15
   16af8:	b	16a90 <__assert_fail@plt+0x538c>
   16afc:	bl	116e0 <abort@plt>
   16b00:	stclcc	12, cr12, [ip, #820]	; 0x334
   16b04:	svccc	0x00666666
   16b08:	svccc	0x008ccccd
   16b0c:	svccc	0x00800000
   16b10:	andeq	r0, r0, r0
   16b14:	svccc	0x004ccccd
   16b18:	andeq	r2, r2, r0, lsl sl
   16b1c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   16b20:	mov	r7, r1
   16b24:	ldr	r3, [r0, #24]
   16b28:	mov	r6, r0
   16b2c:	ldr	r1, [r0, #8]
   16b30:	mov	r0, r7
   16b34:	blx	r3
   16b38:	ldr	r3, [r6, #8]
   16b3c:	cmp	r0, r3
   16b40:	bcs	16d6c <__assert_fail@plt+0x5668>
   16b44:	ldr	r9, [r6]
   16b48:	mov	r8, r0
   16b4c:	add	r5, r9, r0, lsl #3
   16b50:	ldr	r4, [r9, r0, lsl #3]
   16b54:	cmp	r4, #0
   16b58:	beq	16c04 <__assert_fail@plt+0x5500>
   16b5c:	cmp	r7, r4
   16b60:	beq	16b80 <__assert_fail@plt+0x547c>
   16b64:	mov	r1, r4
   16b68:	ldr	r3, [r6, #28]
   16b6c:	mov	r0, r7
   16b70:	blx	r3
   16b74:	cmp	r0, #0
   16b78:	beq	16bf8 <__assert_fail@plt+0x54f4>
   16b7c:	ldr	r4, [r9, r8, lsl #3]
   16b80:	ldr	r3, [r5, #4]
   16b84:	cmp	r3, #0
   16b88:	movne	r2, #0
   16b8c:	ldmne	r3, {r0, r1}
   16b90:	streq	r3, [r9, r8, lsl #3]
   16b94:	stmne	r5, {r0, r1}
   16b98:	strne	r2, [r3]
   16b9c:	ldrne	r2, [r6, #36]	; 0x24
   16ba0:	strne	r2, [r3, #4]
   16ba4:	strne	r3, [r6, #36]	; 0x24
   16ba8:	cmp	r4, #0
   16bac:	beq	16c04 <__assert_fail@plt+0x5500>
   16bb0:	ldr	r2, [r9, r8, lsl #3]
   16bb4:	ldr	r3, [r6, #16]
   16bb8:	cmp	r2, #0
   16bbc:	sub	r3, r3, #1
   16bc0:	str	r3, [r6, #16]
   16bc4:	beq	16c38 <__assert_fail@plt+0x5534>
   16bc8:	mov	r0, r4
   16bcc:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   16bd0:	ldr	r4, [r3]
   16bd4:	cmp	r7, r4
   16bd8:	beq	16c18 <__assert_fail@plt+0x5514>
   16bdc:	mov	r1, r4
   16be0:	ldr	r3, [r6, #28]
   16be4:	mov	r0, r7
   16be8:	blx	r3
   16bec:	cmp	r0, #0
   16bf0:	bne	16c10 <__assert_fail@plt+0x550c>
   16bf4:	ldr	r5, [r5, #4]
   16bf8:	ldr	r3, [r5, #4]
   16bfc:	cmp	r3, #0
   16c00:	bne	16bd0 <__assert_fail@plt+0x54cc>
   16c04:	mov	r4, #0
   16c08:	mov	r0, r4
   16c0c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   16c10:	ldr	r3, [r5, #4]
   16c14:	ldr	r4, [r3]
   16c18:	ldr	r1, [r3, #4]
   16c1c:	mov	r2, #0
   16c20:	str	r1, [r5, #4]
   16c24:	str	r2, [r3]
   16c28:	ldr	r2, [r6, #36]	; 0x24
   16c2c:	str	r2, [r3, #4]
   16c30:	str	r3, [r6, #36]	; 0x24
   16c34:	b	16ba8 <__assert_fail@plt+0x54a4>
   16c38:	vldr	s15, [r6, #8]
   16c3c:	ldr	r3, [r6, #12]
   16c40:	ldr	r2, [r6, #20]
   16c44:	sub	r3, r3, #1
   16c48:	vcvt.f32.u32	s14, s15
   16c4c:	vldr	s13, [r2]
   16c50:	vmov	s15, r3
   16c54:	str	r3, [r6, #12]
   16c58:	vcvt.f32.u32	s15, s15
   16c5c:	vmul.f32	s12, s13, s14
   16c60:	vcmpe.f32	s15, s12
   16c64:	vmrs	APSR_nzcv, fpscr
   16c68:	bpl	16bc8 <__assert_fail@plt+0x54c4>
   16c6c:	ldr	r3, [pc, #276]	; 16d88 <__assert_fail@plt+0x5684>
   16c70:	cmp	r2, r3
   16c74:	beq	16d54 <__assert_fail@plt+0x5650>
   16c78:	vldr	s12, [r2, #8]
   16c7c:	vldr	s11, [pc, #236]	; 16d70 <__assert_fail@plt+0x566c>
   16c80:	vcmpe.f32	s12, s11
   16c84:	vmrs	APSR_nzcv, fpscr
   16c88:	ble	16d3c <__assert_fail@plt+0x5638>
   16c8c:	vldr	s10, [pc, #224]	; 16d74 <__assert_fail@plt+0x5670>
   16c90:	vcmpe.f32	s12, s10
   16c94:	vmrs	APSR_nzcv, fpscr
   16c98:	bpl	16d3c <__assert_fail@plt+0x5638>
   16c9c:	vldr	s10, [pc, #212]	; 16d78 <__assert_fail@plt+0x5674>
   16ca0:	vldr	s9, [r2, #12]
   16ca4:	vcmpe.f32	s9, s10
   16ca8:	vmrs	APSR_nzcv, fpscr
   16cac:	ble	16d3c <__assert_fail@plt+0x5638>
   16cb0:	vcmpe.f32	s13, #0.0
   16cb4:	vmrs	APSR_nzcv, fpscr
   16cb8:	blt	16d3c <__assert_fail@plt+0x5638>
   16cbc:	vadd.f32	s13, s13, s11
   16cc0:	vldr	s11, [r2, #4]
   16cc4:	vcmpe.f32	s13, s11
   16cc8:	vmrs	APSR_nzcv, fpscr
   16ccc:	bpl	16d3c <__assert_fail@plt+0x5638>
   16cd0:	vldr	s10, [pc, #164]	; 16d7c <__assert_fail@plt+0x5678>
   16cd4:	vcmpe.f32	s11, s10
   16cd8:	vmrs	APSR_nzcv, fpscr
   16cdc:	bhi	16d3c <__assert_fail@plt+0x5638>
   16ce0:	vcmpe.f32	s12, s13
   16ce4:	vmrs	APSR_nzcv, fpscr
   16ce8:	ble	16d3c <__assert_fail@plt+0x5638>
   16cec:	ldrb	r3, [r2, #16]
   16cf0:	cmp	r3, #0
   16cf4:	beq	16d5c <__assert_fail@plt+0x5658>
   16cf8:	vmul.f32	s15, s14, s11
   16cfc:	vcvt.u32.f32	s15, s15
   16d00:	vmov	r1, s15
   16d04:	mov	r0, r6
   16d08:	bl	1604c <__assert_fail@plt+0x4948>
   16d0c:	cmp	r0, #0
   16d10:	bne	16bc8 <__assert_fail@plt+0x54c4>
   16d14:	ldr	r0, [r6, #36]	; 0x24
   16d18:	cmp	r0, #0
   16d1c:	beq	16d30 <__assert_fail@plt+0x562c>
   16d20:	ldr	r5, [r0, #4]
   16d24:	bl	15334 <__assert_fail@plt+0x3c30>
   16d28:	subs	r0, r5, #0
   16d2c:	bne	16d20 <__assert_fail@plt+0x561c>
   16d30:	mov	r3, #0
   16d34:	str	r3, [r6, #36]	; 0x24
   16d38:	b	16bc8 <__assert_fail@plt+0x54c4>
   16d3c:	vldr	s13, [pc, #60]	; 16d80 <__assert_fail@plt+0x567c>
   16d40:	str	r3, [r6, #20]
   16d44:	vmul.f32	s13, s14, s13
   16d48:	vcmpe.f32	s15, s13
   16d4c:	vmrs	APSR_nzcv, fpscr
   16d50:	bpl	16bc8 <__assert_fail@plt+0x54c4>
   16d54:	vldr	s12, [pc, #40]	; 16d84 <__assert_fail@plt+0x5680>
   16d58:	vldr	s11, [pc, #28]	; 16d7c <__assert_fail@plt+0x5678>
   16d5c:	vmul.f32	s15, s14, s11
   16d60:	vmul.f32	s15, s15, s12
   16d64:	vcvt.u32.f32	s15, s15
   16d68:	b	16d00 <__assert_fail@plt+0x55fc>
   16d6c:	bl	116e0 <abort@plt>
   16d70:	stclcc	12, cr12, [ip, #820]	; 0x334
   16d74:	svccc	0x00666666
   16d78:	svccc	0x008ccccd
   16d7c:	svccc	0x00800000
   16d80:	andeq	r0, r0, r0
   16d84:	svccc	0x004ccccd
   16d88:	andeq	r2, r2, r0, lsl sl
   16d8c:	push	{r4, r5, r6, lr}
   16d90:	mov	r4, r0
   16d94:	ldr	r0, [r0]
   16d98:	mov	r6, r1
   16d9c:	bl	20b8c <__assert_fail@plt+0xf488>
   16da0:	ldrd	r4, [r4, #8]
   16da4:	mov	r2, r6
   16da8:	mov	r3, #0
   16dac:	eor	r4, r4, r0
   16db0:	mov	r0, r4
   16db4:	mov	r1, r5
   16db8:	bl	21700 <__assert_fail@plt+0xfffc>
   16dbc:	mov	r0, r2
   16dc0:	pop	{r4, r5, r6, pc}
   16dc4:	ldrd	r2, [r1, #8]
   16dc8:	push	{r4, r5, r6, lr}
   16dcc:	ldrd	r4, [r0, #8]
   16dd0:	cmp	r5, r3
   16dd4:	cmpeq	r4, r2
   16dd8:	beq	16de4 <__assert_fail@plt+0x56e0>
   16ddc:	mov	r0, #0
   16de0:	pop	{r4, r5, r6, pc}
   16de4:	ldrd	r4, [r0, #16]
   16de8:	ldrd	r2, [r1, #16]
   16dec:	cmp	r5, r3
   16df0:	cmpeq	r4, r2
   16df4:	bne	16ddc <__assert_fail@plt+0x56d8>
   16df8:	ldr	r1, [r1]
   16dfc:	ldr	r0, [r0]
   16e00:	bl	11320 <strcmp@plt>
   16e04:	clz	r0, r0
   16e08:	lsr	r0, r0, #5
   16e0c:	pop	{r4, r5, r6, pc}
   16e10:	push	{r4, lr}
   16e14:	mov	r4, r0
   16e18:	ldr	r0, [r0]
   16e1c:	bl	15334 <__assert_fail@plt+0x3c30>
   16e20:	mov	r0, r4
   16e24:	pop	{r4, lr}
   16e28:	b	15334 <__assert_fail@plt+0x3c30>
   16e2c:	andeq	r0, r0, r0
   16e30:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16e34:	vpush	{d8-d9}
   16e38:	mov	r4, r3
   16e3c:	ands	r3, r3, #32
   16e40:	mov	r9, r1
   16e44:	sub	sp, sp, #108	; 0x6c
   16e48:	mov	r8, r0
   16e4c:	str	r3, [sp, #36]	; 0x24
   16e50:	and	r3, r4, #3
   16e54:	str	r3, [sp, #8]
   16e58:	movne	r3, #1024	; 0x400
   16e5c:	moveq	r3, #1000	; 0x3e8
   16e60:	str	r2, [sp, #12]
   16e64:	strne	r3, [sp, #40]	; 0x28
   16e68:	movne	r2, #1024	; 0x400
   16e6c:	moveq	r2, #1000	; 0x3e8
   16e70:	strne	r3, [sp, #28]
   16e74:	streq	r3, [sp, #40]	; 0x28
   16e78:	streq	r3, [sp, #28]
   16e7c:	mov	r3, #0
   16e80:	ldrd	r6, [sp, #160]	; 0xa0
   16e84:	strd	r2, [sp, #16]
   16e88:	bl	1165c <localeconv@plt>
   16e8c:	ldr	r3, [sp, #12]
   16e90:	add	r3, r3, #644	; 0x284
   16e94:	str	r3, [sp, #24]
   16e98:	ldr	fp, [r0]
   16e9c:	mov	r5, r0
   16ea0:	mov	r0, fp
   16ea4:	bl	1153c <strlen@plt>
   16ea8:	ldr	sl, [r5, #4]
   16eac:	ldr	r1, [pc, #684]	; 17160 <__assert_fail@plt+0x5a5c>
   16eb0:	mov	r2, r0
   16eb4:	sub	r0, r0, #1
   16eb8:	cmp	r0, #16
   16ebc:	movcs	r2, #1
   16ec0:	str	r2, [sp, #48]	; 0x30
   16ec4:	mov	r0, sl
   16ec8:	movcc	r2, fp
   16ecc:	movcs	r2, r1
   16ed0:	str	r2, [sp, #52]	; 0x34
   16ed4:	bl	1153c <strlen@plt>
   16ed8:	ldr	r3, [sp, #24]
   16edc:	ldr	r2, [pc, #640]	; 17164 <__assert_fail@plt+0x5a60>
   16ee0:	add	r3, r3, #3
   16ee4:	str	r3, [sp, #8]
   16ee8:	ldr	r5, [r5, #8]
   16eec:	cmp	r0, #16
   16ef0:	movhi	sl, r2
   16ef4:	ldrd	r2, [sp, #168]	; 0xa8
   16ef8:	str	sl, [sp, #32]
   16efc:	cmp	r3, r7
   16f00:	cmpeq	r2, r6
   16f04:	bhi	17170 <__assert_fail@plt+0x5a6c>
   16f08:	mov	r0, r6
   16f0c:	mov	r1, r7
   16f10:	bl	21700 <__assert_fail@plt+0xfffc>
   16f14:	orrs	r3, r2, r3
   16f18:	bne	16f5c <__assert_fail@plt+0x5858>
   16f1c:	ldrd	r2, [sp, #168]	; 0xa8
   16f20:	mov	r0, r6
   16f24:	mov	r1, r7
   16f28:	bl	21700 <__assert_fail@plt+0xfffc>
   16f2c:	mov	r2, r0
   16f30:	mul	r0, r0, r9
   16f34:	umull	sl, fp, r2, r8
   16f38:	mla	r0, r8, r1, r0
   16f3c:	mov	r3, r1
   16f40:	add	fp, r0, fp
   16f44:	mov	r1, fp
   16f48:	mov	r0, sl
   16f4c:	bl	21700 <__assert_fail@plt+0xfffc>
   16f50:	cmp	r9, r1
   16f54:	cmpeq	r8, r0
   16f58:	beq	17828 <__assert_fail@plt+0x6124>
   16f5c:	mov	r0, r6
   16f60:	mov	r1, r7
   16f64:	bl	2168c <__assert_fail@plt+0xff88>
   16f68:	vmov	d9, r0, r1
   16f6c:	ldrd	r0, [sp, #168]	; 0xa8
   16f70:	bl	2168c <__assert_fail@plt+0xff88>
   16f74:	vmov	d7, r0, r1
   16f78:	mov	r0, r8
   16f7c:	mov	r1, r9
   16f80:	vdiv.f64	d8, d9, d7
   16f84:	bl	2168c <__assert_fail@plt+0xff88>
   16f88:	ands	r8, r4, #16
   16f8c:	vmov	d7, r0, r1
   16f90:	vmul.f64	d8, d8, d7
   16f94:	beq	175a0 <__assert_fail@plt+0x5e9c>
   16f98:	vldr	s15, [sp, #40]	; 0x28
   16f9c:	vcvt.f64.s32	d7, s15
   16fa0:	vmul.f64	d6, d7, d7
   16fa4:	vcmpe.f64	d8, d6
   16fa8:	vmrs	APSR_nzcv, fpscr
   16fac:	blt	17b00 <__assert_fail@plt+0x63fc>
   16fb0:	vmul.f64	d5, d7, d6
   16fb4:	vcmpe.f64	d8, d5
   16fb8:	vmrs	APSR_nzcv, fpscr
   16fbc:	blt	17b0c <__assert_fail@plt+0x6408>
   16fc0:	vmul.f64	d6, d7, d5
   16fc4:	vcmpe.f64	d8, d6
   16fc8:	vmrs	APSR_nzcv, fpscr
   16fcc:	blt	17b14 <__assert_fail@plt+0x6410>
   16fd0:	vmul.f64	d5, d7, d6
   16fd4:	vcmpe.f64	d8, d5
   16fd8:	vmrs	APSR_nzcv, fpscr
   16fdc:	blt	17b20 <__assert_fail@plt+0x641c>
   16fe0:	vmul.f64	d6, d7, d5
   16fe4:	vcmpe.f64	d8, d6
   16fe8:	vmrs	APSR_nzcv, fpscr
   16fec:	blt	17b28 <__assert_fail@plt+0x6424>
   16ff0:	vmul.f64	d5, d7, d6
   16ff4:	vcmpe.f64	d8, d5
   16ff8:	vmrs	APSR_nzcv, fpscr
   16ffc:	blt	17b34 <__assert_fail@plt+0x6430>
   17000:	vmul.f64	d6, d7, d5
   17004:	vcmpe.f64	d8, d6
   17008:	vmrs	APSR_nzcv, fpscr
   1700c:	blt	17b3c <__assert_fail@plt+0x6438>
   17010:	mov	r9, #8
   17014:	and	r8, r4, #3
   17018:	cmp	r8, #1
   1701c:	vdiv.f64	d9, d8, d6
   17020:	beq	176cc <__assert_fail@plt+0x5fc8>
   17024:	vldr	d7, [pc, #292]	; 17150 <__assert_fail@plt+0x5a4c>
   17028:	vmov	r0, r1, d9
   1702c:	vcmpe.f64	d9, d7
   17030:	vmrs	APSR_nzcv, fpscr
   17034:	bpl	1707c <__assert_fail@plt+0x5978>
   17038:	bl	21750 <__assert_fail@plt+0x1004c>
   1703c:	cmp	r8, #0
   17040:	mov	r6, r0
   17044:	mov	r7, r1
   17048:	movne	r0, #0
   1704c:	bne	17068 <__assert_fail@plt+0x5964>
   17050:	bl	2168c <__assert_fail@plt+0xff88>
   17054:	vmov	d7, r0, r1
   17058:	vcmp.f64	d7, d9
   1705c:	vmrs	APSR_nzcv, fpscr
   17060:	movne	r0, #1
   17064:	moveq	r0, #0
   17068:	adds	r2, r6, r0
   1706c:	adc	r3, r7, #0
   17070:	mov	r0, r2
   17074:	mov	r1, r3
   17078:	bl	2168c <__assert_fail@plt+0xff88>
   1707c:	ldr	r6, [sp, #12]
   17080:	strd	r0, [sp]
   17084:	ldr	r3, [pc, #220]	; 17168 <__assert_fail@plt+0x5a64>
   17088:	mvn	r2, #0
   1708c:	mov	r1, #1
   17090:	mov	r0, r6
   17094:	bl	11578 <__sprintf_chk@plt>
   17098:	ldr	r3, [sp, #48]	; 0x30
   1709c:	mov	r0, r6
   170a0:	add	r6, r3, #1
   170a4:	bl	1153c <strlen@plt>
   170a8:	ands	r3, r4, #32
   170ac:	cmp	r3, #0
   170b0:	movne	r3, #1
   170b4:	moveq	r3, #2
   170b8:	add	r3, r3, r6
   170bc:	cmp	r0, r3
   170c0:	mov	r7, r0
   170c4:	bls	17718 <__assert_fail@plt+0x6014>
   170c8:	vldr	d7, [pc, #136]	; 17158 <__assert_fail@plt+0x5a54>
   170cc:	vmul.f64	d9, d9, d7
   170d0:	vldr	d7, [pc, #120]	; 17150 <__assert_fail@plt+0x5a4c>
   170d4:	vcmpe.f64	d9, d7
   170d8:	vmrs	APSR_nzcv, fpscr
   170dc:	bpl	17118 <__assert_fail@plt+0x5a14>
   170e0:	vmov	r0, r1, d9
   170e4:	bl	21750 <__assert_fail@plt+0x1004c>
   170e8:	and	r3, r4, #3
   170ec:	cmp	r3, #0
   170f0:	mov	r6, r0
   170f4:	mov	r7, r1
   170f8:	movne	r0, #0
   170fc:	beq	17a4c <__assert_fail@plt+0x6348>
   17100:	adds	r2, r6, r0
   17104:	adc	r3, r7, #0
   17108:	mov	r0, r2
   1710c:	mov	r1, r3
   17110:	bl	2168c <__assert_fail@plt+0xff88>
   17114:	vmov	d9, r0, r1
   17118:	vldr	d6, [pc, #56]	; 17158 <__assert_fail@plt+0x5a54>
   1711c:	ldr	r7, [sp, #12]
   17120:	ldr	r3, [pc, #68]	; 1716c <__assert_fail@plt+0x5a68>
   17124:	mvn	r2, #0
   17128:	vdiv.f64	d7, d9, d6
   1712c:	mov	r1, #1
   17130:	mov	r0, r7
   17134:	mov	r6, #0
   17138:	vstr	d7, [sp]
   1713c:	bl	11578 <__sprintf_chk@plt>
   17140:	mov	r0, r7
   17144:	bl	1153c <strlen@plt>
   17148:	mov	r7, r0
   1714c:	b	175ec <__assert_fail@plt+0x5ee8>
   17150:	andeq	r0, r0, r0
   17154:	mvnsmi	r0, #0
   17158:	andeq	r0, r0, r0
   1715c:	eormi	r0, r4, r0
   17160:	andeq	r2, r2, r0, ror r9
   17164:	andeq	r2, r2, r4, ror sl
   17168:			; <UNDEFINED> instruction: 0x00022ab8
   1716c:			; <UNDEFINED> instruction: 0x00022ab0
   17170:	orrs	r3, r6, r7
   17174:	beq	16f5c <__assert_fail@plt+0x5858>
   17178:	mov	r2, r6
   1717c:	mov	r3, r7
   17180:	ldrd	r0, [sp, #168]	; 0xa8
   17184:	bl	21700 <__assert_fail@plt+0xfffc>
   17188:	orrs	r3, r2, r3
   1718c:	bne	16f5c <__assert_fail@plt+0x5858>
   17190:	mov	r2, r6
   17194:	mov	r3, r7
   17198:	ldrd	r0, [sp, #168]	; 0xa8
   1719c:	bl	21700 <__assert_fail@plt+0xfffc>
   171a0:	mov	sl, r0
   171a4:	mov	fp, r1
   171a8:	mov	r2, r0
   171ac:	mov	r3, r1
   171b0:	mov	r0, r8
   171b4:	mov	r1, r9
   171b8:	bl	21700 <__assert_fail@plt+0xfffc>
   171bc:	mov	r1, #10
   171c0:	umull	r6, r7, r2, r1
   171c4:	mla	r7, r1, r3, r7
   171c8:	mov	r2, sl
   171cc:	mov	r3, fp
   171d0:	mov	r0, r6
   171d4:	mov	r1, r7
   171d8:	bl	21700 <__assert_fail@plt+0xfffc>
   171dc:	mov	r0, r8
   171e0:	mov	r1, r9
   171e4:	strd	sl, [sp, #40]	; 0x28
   171e8:	lsls	r8, r2, #1
   171ec:	adc	r9, r3, r3
   171f0:	mov	r2, sl
   171f4:	mov	r3, fp
   171f8:	bl	21700 <__assert_fail@plt+0xfffc>
   171fc:	ldrd	r2, [sp, #40]	; 0x28
   17200:	mov	sl, r0
   17204:	mov	fp, r1
   17208:	mov	r0, r6
   1720c:	mov	r1, r7
   17210:	bl	21700 <__assert_fail@plt+0xfffc>
   17214:	ldrd	r2, [sp, #40]	; 0x28
   17218:	cmp	r3, r9
   1721c:	cmpeq	r2, r8
   17220:	mov	r6, r0
   17224:	bls	17a30 <__assert_fail@plt+0x632c>
   17228:	orrs	r3, r8, r9
   1722c:	movne	r8, #1
   17230:	moveq	r8, #0
   17234:	ands	r3, r4, #16
   17238:	str	r3, [sp, #40]	; 0x28
   1723c:	beq	1793c <__assert_fail@plt+0x6238>
   17240:	ldrd	r2, [sp, #16]
   17244:	cmp	fp, r3
   17248:	cmpeq	sl, r2
   1724c:	bcc	17a3c <__assert_fail@plt+0x6338>
   17250:	mov	r0, sl
   17254:	mov	r1, fp
   17258:	bl	21700 <__assert_fail@plt+0xfffc>
   1725c:	ldr	r1, [sp, #28]
   17260:	add	r2, r2, r2, lsl #2
   17264:	add	r7, r6, r2, lsl #1
   17268:	mov	r0, r7
   1726c:	bl	210e8 <__assert_fail@plt+0xf9e4>
   17270:	asr	r6, r8, #1
   17274:	ldrd	r2, [sp, #16]
   17278:	mov	r0, sl
   1727c:	add	r9, r6, r1, lsl #1
   17280:	mov	r1, fp
   17284:	bl	21700 <__assert_fail@plt+0xfffc>
   17288:	mov	sl, r0
   1728c:	mov	fp, r1
   17290:	mov	r0, r7
   17294:	ldr	r1, [sp, #28]
   17298:	bl	20efc <__assert_fail@plt+0xf7f8>
   1729c:	ldr	r3, [sp, #28]
   172a0:	cmp	r3, r9
   172a4:	mov	r6, r0
   172a8:	bls	17a74 <__assert_fail@plt+0x6370>
   172ac:	cmn	r8, r9
   172b0:	movne	r8, #1
   172b4:	moveq	r8, #0
   172b8:	ldrd	r2, [sp, #16]
   172bc:	cmp	r3, fp
   172c0:	cmpeq	r2, sl
   172c4:	bhi	17be8 <__assert_fail@plt+0x64e4>
   172c8:	mov	r0, sl
   172cc:	mov	r1, fp
   172d0:	bl	21700 <__assert_fail@plt+0xfffc>
   172d4:	ldr	r1, [sp, #28]
   172d8:	add	r2, r2, r2, lsl #2
   172dc:	add	r7, r6, r2, lsl #1
   172e0:	mov	r0, r7
   172e4:	bl	210e8 <__assert_fail@plt+0xf9e4>
   172e8:	asr	r6, r8, #1
   172ec:	ldrd	r2, [sp, #16]
   172f0:	mov	r0, sl
   172f4:	add	r9, r6, r1, lsl #1
   172f8:	mov	r1, fp
   172fc:	bl	21700 <__assert_fail@plt+0xfffc>
   17300:	mov	sl, r0
   17304:	mov	fp, r1
   17308:	mov	r0, r7
   1730c:	ldr	r1, [sp, #28]
   17310:	bl	20efc <__assert_fail@plt+0xf7f8>
   17314:	ldr	r3, [sp, #28]
   17318:	cmp	r3, r9
   1731c:	mov	r6, r0
   17320:	mov	r7, r0
   17324:	bls	17a8c <__assert_fail@plt+0x6388>
   17328:	cmn	r8, r9
   1732c:	movne	r8, #1
   17330:	moveq	r8, #0
   17334:	ldrd	r2, [sp, #16]
   17338:	cmp	fp, r3
   1733c:	cmpeq	sl, r2
   17340:	bcc	17bf0 <__assert_fail@plt+0x64ec>
   17344:	mov	r0, sl
   17348:	mov	r1, fp
   1734c:	bl	21700 <__assert_fail@plt+0xfffc>
   17350:	ldr	r9, [sp, #28]
   17354:	mov	r1, r9
   17358:	add	r2, r2, r2, lsl #2
   1735c:	add	r6, r7, r2, lsl #1
   17360:	mov	r0, r6
   17364:	bl	210e8 <__assert_fail@plt+0xf9e4>
   17368:	asr	r7, r8, #1
   1736c:	ldrd	r2, [sp, #16]
   17370:	mov	r0, sl
   17374:	add	r7, r7, r1, lsl #1
   17378:	mov	r1, fp
   1737c:	bl	21700 <__assert_fail@plt+0xfffc>
   17380:	mov	sl, r0
   17384:	mov	fp, r1
   17388:	mov	r0, r6
   1738c:	mov	r1, r9
   17390:	bl	20efc <__assert_fail@plt+0xf7f8>
   17394:	cmp	r9, r7
   17398:	mov	r6, r0
   1739c:	mov	r9, r0
   173a0:	bls	17aa4 <__assert_fail@plt+0x63a0>
   173a4:	cmn	r8, r7
   173a8:	movne	r8, #1
   173ac:	moveq	r8, #0
   173b0:	ldrd	r2, [sp, #16]
   173b4:	cmp	fp, r3
   173b8:	cmpeq	sl, r2
   173bc:	bcc	17bf8 <__assert_fail@plt+0x64f4>
   173c0:	mov	r0, sl
   173c4:	mov	r1, fp
   173c8:	bl	21700 <__assert_fail@plt+0xfffc>
   173cc:	ldr	r1, [sp, #28]
   173d0:	asr	r7, r8, #1
   173d4:	add	r2, r2, r2, lsl #2
   173d8:	add	r6, r9, r2, lsl #1
   173dc:	mov	r0, r6
   173e0:	bl	210e8 <__assert_fail@plt+0xf9e4>
   173e4:	ldrd	r2, [sp, #16]
   173e8:	mov	r0, sl
   173ec:	add	r7, r7, r1, lsl #1
   173f0:	mov	r1, fp
   173f4:	bl	21700 <__assert_fail@plt+0xfffc>
   173f8:	ldr	r9, [sp, #28]
   173fc:	mov	sl, r0
   17400:	mov	fp, r1
   17404:	mov	r0, r6
   17408:	mov	r1, r9
   1740c:	bl	20efc <__assert_fail@plt+0xf7f8>
   17410:	cmp	r9, r7
   17414:	mov	r6, r0
   17418:	mov	r9, r0
   1741c:	bls	17abc <__assert_fail@plt+0x63b8>
   17420:	cmn	r8, r7
   17424:	movne	r8, #1
   17428:	moveq	r8, #0
   1742c:	ldrd	r2, [sp, #16]
   17430:	cmp	fp, r3
   17434:	cmpeq	sl, r2
   17438:	bcc	17c30 <__assert_fail@plt+0x652c>
   1743c:	mov	r0, sl
   17440:	mov	r1, fp
   17444:	bl	21700 <__assert_fail@plt+0xfffc>
   17448:	ldr	r1, [sp, #28]
   1744c:	asr	r7, r8, #1
   17450:	add	r2, r2, r2, lsl #2
   17454:	add	r6, r9, r2, lsl #1
   17458:	mov	r0, r6
   1745c:	bl	210e8 <__assert_fail@plt+0xf9e4>
   17460:	ldrd	r2, [sp, #16]
   17464:	mov	r0, sl
   17468:	add	r7, r7, r1, lsl #1
   1746c:	mov	r1, fp
   17470:	bl	21700 <__assert_fail@plt+0xfffc>
   17474:	ldr	r9, [sp, #28]
   17478:	mov	sl, r0
   1747c:	mov	fp, r1
   17480:	mov	r0, r6
   17484:	mov	r1, r9
   17488:	bl	20efc <__assert_fail@plt+0xf7f8>
   1748c:	cmp	r9, r7
   17490:	mov	r6, r0
   17494:	mov	r9, r0
   17498:	bls	17ad4 <__assert_fail@plt+0x63d0>
   1749c:	cmn	r8, r7
   174a0:	movne	r8, #1
   174a4:	moveq	r8, #0
   174a8:	ldrd	r2, [sp, #16]
   174ac:	cmp	r3, fp
   174b0:	cmpeq	r2, sl
   174b4:	bhi	17c38 <__assert_fail@plt+0x6534>
   174b8:	mov	r0, sl
   174bc:	mov	r1, fp
   174c0:	bl	21700 <__assert_fail@plt+0xfffc>
   174c4:	ldr	r1, [sp, #28]
   174c8:	asr	r7, r8, #1
   174cc:	add	r2, r2, r2, lsl #2
   174d0:	add	r6, r9, r2, lsl #1
   174d4:	mov	r0, r6
   174d8:	bl	210e8 <__assert_fail@plt+0xf9e4>
   174dc:	ldrd	r2, [sp, #16]
   174e0:	mov	r0, sl
   174e4:	add	r7, r7, r1, lsl #1
   174e8:	mov	r1, fp
   174ec:	bl	21700 <__assert_fail@plt+0xfffc>
   174f0:	ldr	r9, [sp, #28]
   174f4:	mov	sl, r0
   174f8:	mov	fp, r1
   174fc:	mov	r0, r6
   17500:	mov	r1, r9
   17504:	bl	20efc <__assert_fail@plt+0xf7f8>
   17508:	cmp	r9, r7
   1750c:	mov	r6, r0
   17510:	bls	17aec <__assert_fail@plt+0x63e8>
   17514:	cmn	r8, r7
   17518:	movne	r8, #1
   1751c:	moveq	r8, #0
   17520:	mov	r9, #6
   17524:	cmp	fp, #0
   17528:	cmpeq	sl, #9
   1752c:	bhi	17bdc <__assert_fail@plt+0x64d8>
   17530:	and	r3, r4, #3
   17534:	cmp	r3, #1
   17538:	beq	17b70 <__assert_fail@plt+0x646c>
   1753c:	cmp	r8, #0
   17540:	and	r3, r4, #3
   17544:	clz	r3, r3
   17548:	lsr	r3, r3, #5
   1754c:	moveq	r3, #0
   17550:	cmp	r3, #0
   17554:	beq	17b48 <__assert_fail@plt+0x6444>
   17558:	add	r6, r6, #1
   1755c:	cmp	r6, #10
   17560:	beq	17bc0 <__assert_fail@plt+0x64bc>
   17564:	add	r7, r6, #48	; 0x30
   17568:	uxtb	r3, r7
   1756c:	ldr	r2, [sp, #24]
   17570:	ldr	r0, [sp, #12]
   17574:	add	r7, r2, #2
   17578:	ldr	r2, [sp, #48]	; 0x30
   1757c:	strb	r3, [r0, #646]	; 0x286
   17580:	sub	r1, r7, r2
   17584:	str	r1, [sp, #24]
   17588:	mov	r0, r1
   1758c:	mov	r8, #0
   17590:	ldr	r1, [sp, #52]	; 0x34
   17594:	bl	11374 <memcpy@plt>
   17598:	mov	r6, r8
   1759c:	b	17948 <__assert_fail@plt+0x6244>
   175a0:	and	r9, r4, #3
   175a4:	cmp	r9, #1
   175a8:	beq	175bc <__assert_fail@plt+0x5eb8>
   175ac:	vldr	d7, [pc, #876]	; 17920 <__assert_fail@plt+0x621c>
   175b0:	vcmpe.f64	d8, d7
   175b4:	vmrs	APSR_nzcv, fpscr
   175b8:	bmi	177e4 <__assert_fail@plt+0x60e0>
   175bc:	ldr	r6, [sp, #12]
   175c0:	ldr	r3, [pc, #872]	; 17930 <__assert_fail@plt+0x622c>
   175c4:	mvn	r2, #0
   175c8:	mov	r1, #1
   175cc:	mov	r0, r6
   175d0:	vstr	d8, [sp]
   175d4:	bl	11578 <__sprintf_chk@plt>
   175d8:	mov	r0, r6
   175dc:	bl	1153c <strlen@plt>
   175e0:	mov	r6, #0
   175e4:	mvn	r9, #0
   175e8:	mov	r7, r0
   175ec:	ldr	r3, [sp, #8]
   175f0:	mov	r2, r7
   175f4:	sub	r8, r3, r7
   175f8:	mov	r0, r8
   175fc:	ldr	r1, [sp, #12]
   17600:	bl	11344 <memmove@plt>
   17604:	sub	r7, r7, r6
   17608:	add	r7, r8, r7
   1760c:	tst	r4, #4
   17610:	bne	1774c <__assert_fail@plt+0x6048>
   17614:	tst	r4, #128	; 0x80
   17618:	beq	176b0 <__assert_fail@plt+0x5fac>
   1761c:	cmn	r9, #1
   17620:	beq	17834 <__assert_fail@plt+0x6130>
   17624:	and	r3, r4, #256	; 0x100
   17628:	orrs	r2, r9, r3
   1762c:	beq	176b0 <__assert_fail@plt+0x5fac>
   17630:	tst	r4, #64	; 0x40
   17634:	ldrne	r1, [sp, #12]
   17638:	addne	r2, r1, #648	; 0x288
   1763c:	strne	r2, [sp, #8]
   17640:	movne	r2, #32
   17644:	strbne	r2, [r1, #647]	; 0x287
   17648:	cmp	r9, #0
   1764c:	beq	17c40 <__assert_fail@plt+0x653c>
   17650:	ldr	r2, [sp, #36]	; 0x24
   17654:	ldr	r0, [sp, #8]
   17658:	cmp	r2, #0
   1765c:	cmpeq	r9, #1
   17660:	ldr	r2, [sp, #8]
   17664:	ldrne	r1, [pc, #712]	; 17934 <__assert_fail@plt+0x6230>
   17668:	moveq	r1, #107	; 0x6b
   1766c:	add	r2, r2, #1
   17670:	ldrbne	r1, [r1, r9]
   17674:	cmp	r3, #0
   17678:	streq	r2, [sp, #8]
   1767c:	strb	r1, [r0]
   17680:	beq	176b0 <__assert_fail@plt+0x5fac>
   17684:	ldr	r3, [sp, #36]	; 0x24
   17688:	cmp	r9, #0
   1768c:	cmpne	r3, #0
   17690:	movne	r2, r0
   17694:	movne	r3, #105	; 0x69
   17698:	strbne	r3, [r2, #1]
   1769c:	addne	r2, r2, #2
   176a0:	mov	r3, #66	; 0x42
   176a4:	strb	r3, [r2]
   176a8:	add	r3, r2, #1
   176ac:	str	r3, [sp, #8]
   176b0:	ldr	r2, [sp, #8]
   176b4:	mov	r3, #0
   176b8:	mov	r0, r8
   176bc:	strb	r3, [r2]
   176c0:	add	sp, sp, #108	; 0x6c
   176c4:	vpop	{d8-d9}
   176c8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   176cc:	ldr	r6, [sp, #12]
   176d0:	ldr	r3, [pc, #608]	; 17938 <__assert_fail@plt+0x6234>
   176d4:	mvn	r2, #0
   176d8:	and	r1, r4, #3
   176dc:	mov	r0, r6
   176e0:	vstr	d9, [sp]
   176e4:	bl	11578 <__sprintf_chk@plt>
   176e8:	ldr	r3, [sp, #48]	; 0x30
   176ec:	mov	r0, r6
   176f0:	add	r6, r3, #1
   176f4:	bl	1153c <strlen@plt>
   176f8:	ands	r3, r4, #32
   176fc:	cmp	r3, #0
   17700:	movne	r3, #1
   17704:	moveq	r3, #2
   17708:	add	r3, r3, r6
   1770c:	cmp	r3, r0
   17710:	mov	r7, r0
   17714:	bcc	17a68 <__assert_fail@plt+0x6364>
   17718:	tst	r4, #8
   1771c:	beq	175ec <__assert_fail@plt+0x5ee8>
   17720:	ldr	r3, [sp, #12]
   17724:	add	r3, r3, r7
   17728:	ldrb	r3, [r3, #-1]
   1772c:	cmp	r3, #48	; 0x30
   17730:	bne	175ec <__assert_fail@plt+0x5ee8>
   17734:	vldr	d7, [pc, #492]	; 17928 <__assert_fail@plt+0x6224>
   17738:	and	r3, r4, #3
   1773c:	cmp	r3, #1
   17740:	vmul.f64	d9, d9, d7
   17744:	beq	17118 <__assert_fail@plt+0x5a14>
   17748:	b	170d0 <__assert_fail@plt+0x59cc>
   1774c:	ldr	r0, [sp, #32]
   17750:	bl	1153c <strlen@plt>
   17754:	sub	r6, r7, r8
   17758:	mov	r1, r8
   1775c:	mov	r2, r6
   17760:	mov	r3, #41	; 0x29
   17764:	mvn	sl, #0
   17768:	mov	fp, r0
   1776c:	add	r0, sp, #60	; 0x3c
   17770:	bl	11434 <__memcpy_chk@plt>
   17774:	ldr	r8, [sp, #32]
   17778:	b	17780 <__assert_fail@plt+0x607c>
   1777c:	bl	11374 <memcpy@plt>
   17780:	ldrb	r3, [r5]
   17784:	cmp	r3, #0
   17788:	beq	1779c <__assert_fail@plt+0x6098>
   1778c:	cmp	r3, #255	; 0xff
   17790:	movne	sl, r3
   17794:	moveq	sl, r6
   17798:	add	r5, r5, #1
   1779c:	cmp	sl, r6
   177a0:	movcs	sl, r6
   177a4:	sub	r3, r7, sl
   177a8:	sub	r6, r6, sl
   177ac:	add	r2, sp, #60	; 0x3c
   177b0:	add	r1, r2, r6
   177b4:	mov	r0, r3
   177b8:	mov	r2, sl
   177bc:	sub	r7, r3, fp
   177c0:	bl	11374 <memcpy@plt>
   177c4:	cmp	r6, #0
   177c8:	mov	r2, fp
   177cc:	mov	r1, r8
   177d0:	mov	r3, r0
   177d4:	mov	r0, r7
   177d8:	bne	1777c <__assert_fail@plt+0x6078>
   177dc:	mov	r8, r3
   177e0:	b	17614 <__assert_fail@plt+0x5f10>
   177e4:	vmov	r0, r1, d8
   177e8:	bl	21750 <__assert_fail@plt+0x1004c>
   177ec:	cmp	r9, #0
   177f0:	mov	r6, r0
   177f4:	mov	r7, r1
   177f8:	bne	17814 <__assert_fail@plt+0x6110>
   177fc:	bl	2168c <__assert_fail@plt+0xff88>
   17800:	vmov	d7, r0, r1
   17804:	vcmp.f64	d7, d8
   17808:	vmrs	APSR_nzcv, fpscr
   1780c:	movne	r8, #1
   17810:	moveq	r8, #0
   17814:	adds	r0, r6, r8
   17818:	adc	r1, r7, #0
   1781c:	bl	2168c <__assert_fail@plt+0xff88>
   17820:	vmov	d8, r0, r1
   17824:	b	175bc <__assert_fail@plt+0x5eb8>
   17828:	mov	r8, #0
   1782c:	mov	r6, r8
   17830:	b	17234 <__assert_fail@plt+0x5b30>
   17834:	ldrd	r2, [sp, #168]	; 0xa8
   17838:	cmp	r3, #0
   1783c:	cmpeq	r2, #1
   17840:	bls	17b60 <__assert_fail@plt+0x645c>
   17844:	ldrd	r6, [sp, #16]
   17848:	mov	r1, r3
   1784c:	mov	r0, r2
   17850:	cmp	r1, r7
   17854:	cmpeq	r0, r6
   17858:	bls	17b68 <__assert_fail@plt+0x6464>
   1785c:	mul	r1, r6, r7
   17860:	umull	r2, r3, r6, r6
   17864:	add	r3, r3, r1, lsl #1
   17868:	ldrd	r0, [sp, #168]	; 0xa8
   1786c:	cmp	r1, r3
   17870:	cmpeq	r0, r2
   17874:	bls	17b88 <__assert_fail@plt+0x6484>
   17878:	mul	r3, r6, r3
   1787c:	umull	r0, r1, r6, r2
   17880:	mla	r2, r2, r7, r3
   17884:	add	r1, r2, r1
   17888:	ldrd	r2, [sp, #168]	; 0xa8
   1788c:	cmp	r3, r1
   17890:	cmpeq	r2, r0
   17894:	bls	17b90 <__assert_fail@plt+0x648c>
   17898:	mul	r1, r6, r1
   1789c:	umull	r2, r3, r6, r0
   178a0:	mla	r0, r0, r7, r1
   178a4:	add	r3, r0, r3
   178a8:	ldrd	r0, [sp, #168]	; 0xa8
   178ac:	cmp	r1, r3
   178b0:	cmpeq	r0, r2
   178b4:	bls	17b98 <__assert_fail@plt+0x6494>
   178b8:	mul	r3, r6, r3
   178bc:	umull	r0, r1, r6, r2
   178c0:	mla	r2, r2, r7, r3
   178c4:	add	r1, r2, r1
   178c8:	ldrd	r2, [sp, #168]	; 0xa8
   178cc:	cmp	r3, r1
   178d0:	cmpeq	r2, r0
   178d4:	bls	17ba0 <__assert_fail@plt+0x649c>
   178d8:	mul	r1, r6, r1
   178dc:	umull	r2, r3, r6, r0
   178e0:	mla	r0, r0, r7, r1
   178e4:	add	r3, r0, r3
   178e8:	ldrd	r0, [sp, #168]	; 0xa8
   178ec:	cmp	r1, r3
   178f0:	cmpeq	r0, r2
   178f4:	bls	17ba8 <__assert_fail@plt+0x64a4>
   178f8:	mul	r3, r6, r3
   178fc:	umull	r0, r1, r6, r2
   17900:	mla	r2, r2, r7, r3
   17904:	add	r1, r2, r1
   17908:	ldrd	r2, [sp, #168]	; 0xa8
   1790c:	cmp	r3, r1
   17910:	cmpeq	r2, r0
   17914:	movhi	r9, #8
   17918:	movls	r9, #7
   1791c:	b	17624 <__assert_fail@plt+0x5f20>
   17920:	andeq	r0, r0, r0
   17924:	mvnsmi	r0, #0
   17928:	andeq	r0, r0, r0
   1792c:	eormi	r0, r4, r0
   17930:			; <UNDEFINED> instruction: 0x00022ab0
   17934:	muleq	r2, r0, sl
   17938:			; <UNDEFINED> instruction: 0x00022ab8
   1793c:	ldr	r3, [sp, #8]
   17940:	mvn	r9, #0
   17944:	str	r3, [sp, #24]
   17948:	and	r3, r4, #3
   1794c:	cmp	r3, #1
   17950:	beq	179b4 <__assert_fail@plt+0x62b0>
   17954:	and	r3, r4, #3
   17958:	cmp	r3, #0
   1795c:	bne	179dc <__assert_fail@plt+0x62d8>
   17960:	add	r7, r6, r8
   17964:	cmp	r7, #0
   17968:	ble	179dc <__assert_fail@plt+0x62d8>
   1796c:	adds	sl, sl, #1
   17970:	adc	fp, fp, #0
   17974:	ands	r3, r4, #16
   17978:	cmp	r3, #0
   1797c:	beq	179dc <__assert_fail@plt+0x62d8>
   17980:	ldrd	r2, [sp, #16]
   17984:	cmp	fp, r3
   17988:	cmpeq	sl, r2
   1798c:	bne	179dc <__assert_fail@plt+0x62d8>
   17990:	tst	r4, #8
   17994:	add	r9, r9, #1
   17998:	beq	17c00 <__assert_fail@plt+0x64fc>
   1799c:	ldr	r2, [sp, #24]
   179a0:	mov	r3, #49	; 0x31
   179a4:	sub	r8, r2, #1
   179a8:	strb	r3, [r2, #-1]
   179ac:	mov	r7, r2
   179b0:	b	1760c <__assert_fail@plt+0x5f08>
   179b4:	and	r2, sl, #1
   179b8:	adds	r2, r2, r8
   179bc:	mov	r3, #0
   179c0:	adc	r3, r3, r8, asr #31
   179c4:	orr	r7, r2, r3
   179c8:	cmp	r7, #0
   179cc:	moveq	r7, r6
   179d0:	addne	r7, r6, #1
   179d4:	cmp	r7, #5
   179d8:	bgt	1796c <__assert_fail@plt+0x6268>
   179dc:	ldr	r8, [sp, #24]
   179e0:	mov	r6, #10
   179e4:	mov	r7, #0
   179e8:	mov	r0, sl
   179ec:	mov	r1, fp
   179f0:	mov	r2, r6
   179f4:	mov	r3, r7
   179f8:	bl	21700 <__assert_fail@plt+0xfffc>
   179fc:	mov	r0, sl
   17a00:	mov	r1, fp
   17a04:	mov	r3, r7
   17a08:	add	r2, r2, #48	; 0x30
   17a0c:	strb	r2, [r8, #-1]!
   17a10:	mov	r2, r6
   17a14:	bl	21700 <__assert_fail@plt+0xfffc>
   17a18:	mov	sl, r0
   17a1c:	mov	fp, r1
   17a20:	orrs	r3, sl, fp
   17a24:	bne	179e8 <__assert_fail@plt+0x62e4>
   17a28:	ldr	r7, [sp, #24]
   17a2c:	b	1760c <__assert_fail@plt+0x5f08>
   17a30:	movcc	r8, #3
   17a34:	movcs	r8, #2
   17a38:	b	17234 <__assert_fail@plt+0x5b30>
   17a3c:	ldr	r3, [sp, #8]
   17a40:	mov	r9, #0
   17a44:	str	r3, [sp, #24]
   17a48:	b	17948 <__assert_fail@plt+0x6244>
   17a4c:	bl	2168c <__assert_fail@plt+0xff88>
   17a50:	vmov	d7, r0, r1
   17a54:	vcmp.f64	d7, d9
   17a58:	vmrs	APSR_nzcv, fpscr
   17a5c:	movne	r0, #1
   17a60:	moveq	r0, #0
   17a64:	b	17100 <__assert_fail@plt+0x59fc>
   17a68:	vldr	d7, [pc, #480]	; 17c50 <__assert_fail@plt+0x654c>
   17a6c:	vmul.f64	d9, d9, d7
   17a70:	b	17118 <__assert_fail@plt+0x5a14>
   17a74:	mov	r2, r3
   17a78:	add	r3, r8, r9
   17a7c:	cmp	r2, r3
   17a80:	movcs	r8, #2
   17a84:	movcc	r8, #3
   17a88:	b	172b8 <__assert_fail@plt+0x5bb4>
   17a8c:	mov	r2, r3
   17a90:	add	r3, r8, r9
   17a94:	cmp	r2, r3
   17a98:	movcs	r8, #2
   17a9c:	movcc	r8, #3
   17aa0:	b	17334 <__assert_fail@plt+0x5c30>
   17aa4:	ldr	r3, [sp, #28]
   17aa8:	add	r7, r8, r7
   17aac:	cmp	r3, r7
   17ab0:	movcs	r8, #2
   17ab4:	movcc	r8, #3
   17ab8:	b	173b0 <__assert_fail@plt+0x5cac>
   17abc:	ldr	r3, [sp, #28]
   17ac0:	add	r7, r8, r7
   17ac4:	cmp	r3, r7
   17ac8:	movcs	r8, #2
   17acc:	movcc	r8, #3
   17ad0:	b	1742c <__assert_fail@plt+0x5d28>
   17ad4:	ldr	r3, [sp, #28]
   17ad8:	add	r7, r8, r7
   17adc:	cmp	r3, r7
   17ae0:	movcs	r8, #2
   17ae4:	movcc	r8, #3
   17ae8:	b	174a8 <__assert_fail@plt+0x5da4>
   17aec:	add	r7, r8, r7
   17af0:	cmp	r9, r7
   17af4:	movcs	r8, #2
   17af8:	movcc	r8, #3
   17afc:	b	17520 <__assert_fail@plt+0x5e1c>
   17b00:	vmov.f64	d6, d7
   17b04:	mov	r9, #1
   17b08:	b	17014 <__assert_fail@plt+0x5910>
   17b0c:	mov	r9, #2
   17b10:	b	17014 <__assert_fail@plt+0x5910>
   17b14:	vmov.f64	d6, d5
   17b18:	mov	r9, #3
   17b1c:	b	17014 <__assert_fail@plt+0x5910>
   17b20:	mov	r9, #4
   17b24:	b	17014 <__assert_fail@plt+0x5910>
   17b28:	vmov.f64	d6, d5
   17b2c:	mov	r9, #5
   17b30:	b	17014 <__assert_fail@plt+0x5910>
   17b34:	mov	r9, #6
   17b38:	b	17014 <__assert_fail@plt+0x5910>
   17b3c:	vmov.f64	d6, d5
   17b40:	mov	r9, #7
   17b44:	b	17014 <__assert_fail@plt+0x5910>
   17b48:	cmp	r6, #0
   17b4c:	bne	17564 <__assert_fail@plt+0x5e60>
   17b50:	tst	r4, #8
   17b54:	bne	17bb0 <__assert_fail@plt+0x64ac>
   17b58:	mov	r3, #48	; 0x30
   17b5c:	b	1756c <__assert_fail@plt+0x5e68>
   17b60:	mov	r9, #0
   17b64:	b	17624 <__assert_fail@plt+0x5f20>
   17b68:	mov	r9, #1
   17b6c:	b	17624 <__assert_fail@plt+0x5f20>
   17b70:	and	r3, r6, #1
   17b74:	add	r3, r3, r8
   17b78:	cmp	r3, #2
   17b7c:	movle	r3, #0
   17b80:	movgt	r3, #1
   17b84:	b	17550 <__assert_fail@plt+0x5e4c>
   17b88:	mov	r9, #2
   17b8c:	b	17624 <__assert_fail@plt+0x5f20>
   17b90:	mov	r9, #3
   17b94:	b	17624 <__assert_fail@plt+0x5f20>
   17b98:	mov	r9, #4
   17b9c:	b	17624 <__assert_fail@plt+0x5f20>
   17ba0:	mov	r9, #5
   17ba4:	b	17624 <__assert_fail@plt+0x5f20>
   17ba8:	mov	r9, #6
   17bac:	b	17624 <__assert_fail@plt+0x5f20>
   17bb0:	ldr	r3, [sp, #8]
   17bb4:	mov	r6, #0
   17bb8:	str	r3, [sp, #24]
   17bbc:	b	17948 <__assert_fail@plt+0x6244>
   17bc0:	adds	sl, sl, #1
   17bc4:	adc	fp, fp, #0
   17bc8:	cmp	fp, #0
   17bcc:	cmpeq	sl, #10
   17bd0:	mov	r8, #0
   17bd4:	moveq	r6, r8
   17bd8:	bne	17b50 <__assert_fail@plt+0x644c>
   17bdc:	ldr	r3, [sp, #8]
   17be0:	str	r3, [sp, #24]
   17be4:	b	17948 <__assert_fail@plt+0x6244>
   17be8:	mov	r9, #1
   17bec:	b	17524 <__assert_fail@plt+0x5e20>
   17bf0:	mov	r9, #2
   17bf4:	b	17524 <__assert_fail@plt+0x5e20>
   17bf8:	mov	r9, #3
   17bfc:	b	17524 <__assert_fail@plt+0x5e20>
   17c00:	ldr	ip, [sp, #48]	; 0x30
   17c04:	ldr	r1, [sp, #24]
   17c08:	mvn	r3, ip
   17c0c:	add	r3, r1, r3
   17c10:	mov	r2, #48	; 0x30
   17c14:	strb	r2, [r1, #-1]
   17c18:	mov	r0, r3
   17c1c:	ldr	r1, [sp, #52]	; 0x34
   17c20:	mov	r2, ip
   17c24:	str	r3, [sp, #24]
   17c28:	bl	11374 <memcpy@plt>
   17c2c:	b	1799c <__assert_fail@plt+0x6298>
   17c30:	mov	r9, #4
   17c34:	b	17524 <__assert_fail@plt+0x5e20>
   17c38:	mov	r9, #5
   17c3c:	b	17524 <__assert_fail@plt+0x5e20>
   17c40:	cmp	r3, #0
   17c44:	ldrne	r2, [sp, #8]
   17c48:	bne	176a0 <__assert_fail@plt+0x5f9c>
   17c4c:	b	176b0 <__assert_fail@plt+0x5fac>
   17c50:	andeq	r0, r0, r0
   17c54:	eormi	r0, r4, r0
   17c58:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17c5c:	subs	r4, r0, #0
   17c60:	sub	sp, sp, #20
   17c64:	mov	r8, r1
   17c68:	mov	r7, r2
   17c6c:	beq	17d7c <__assert_fail@plt+0x6678>
   17c70:	ldrb	r3, [r4]
   17c74:	ldr	r5, [pc, #384]	; 17dfc <__assert_fail@plt+0x66f8>
   17c78:	cmp	r3, #39	; 0x27
   17c7c:	addeq	r4, r4, #1
   17c80:	mov	r3, #4
   17c84:	add	r2, r5, #12
   17c88:	add	r1, r5, #20
   17c8c:	mov	r0, r4
   17c90:	moveq	r9, #164	; 0xa4
   17c94:	moveq	fp, #420	; 0x1a4
   17c98:	moveq	sl, #388	; 0x184
   17c9c:	moveq	r6, #4
   17ca0:	movne	r9, #160	; 0xa0
   17ca4:	movne	fp, #416	; 0x1a0
   17ca8:	movne	sl, #384	; 0x180
   17cac:	movne	r6, #0
   17cb0:	bl	1ff4c <__assert_fail@plt+0xe848>
   17cb4:	cmp	r0, #0
   17cb8:	blt	17d18 <__assert_fail@plt+0x6614>
   17cbc:	add	r5, r5, r0, lsl #2
   17cc0:	mov	r1, #0
   17cc4:	ldr	ip, [r5, #12]
   17cc8:	mov	r0, #1
   17ccc:	mov	r2, r0
   17cd0:	orr	r6, r6, ip
   17cd4:	mov	r3, r1
   17cd8:	str	r0, [r7]
   17cdc:	str	r1, [r7, #4]
   17ce0:	mov	r0, #0
   17ce4:	str	r6, [r8]
   17ce8:	orrs	r3, r2, r3
   17cec:	bne	17d10 <__assert_fail@plt+0x660c>
   17cf0:	ldr	r0, [pc, #264]	; 17e00 <__assert_fail@plt+0x66fc>
   17cf4:	bl	114c4 <getenv@plt>
   17cf8:	mov	r3, #0
   17cfc:	cmp	r0, #0
   17d00:	movne	r2, #512	; 0x200
   17d04:	moveq	r2, #1024	; 0x400
   17d08:	mov	r0, #4
   17d0c:	strd	r2, [r7]
   17d10:	add	sp, sp, #20
   17d14:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17d18:	ldr	r2, [pc, #228]	; 17e04 <__assert_fail@plt+0x6700>
   17d1c:	mov	r3, r7
   17d20:	str	r2, [sp]
   17d24:	add	r1, sp, #12
   17d28:	mov	r2, #0
   17d2c:	mov	r0, r4
   17d30:	bl	1e750 <__assert_fail@plt+0xd04c>
   17d34:	cmp	r0, #0
   17d38:	bne	17dc0 <__assert_fail@plt+0x66bc>
   17d3c:	ldrb	r3, [r4]
   17d40:	sub	r3, r3, #48	; 0x30
   17d44:	cmp	r3, #9
   17d48:	bls	17d74 <__assert_fail@plt+0x6670>
   17d4c:	ldr	r2, [sp, #12]
   17d50:	cmp	r4, r2
   17d54:	bne	17d64 <__assert_fail@plt+0x6660>
   17d58:	b	17dd0 <__assert_fail@plt+0x66cc>
   17d5c:	cmp	r2, r4
   17d60:	beq	17dd0 <__assert_fail@plt+0x66cc>
   17d64:	ldrb	r3, [r4, #1]!
   17d68:	sub	r3, r3, #48	; 0x30
   17d6c:	cmp	r3, #9
   17d70:	bhi	17d5c <__assert_fail@plt+0x6658>
   17d74:	ldrd	r2, [r7]
   17d78:	b	17ce0 <__assert_fail@plt+0x65dc>
   17d7c:	ldr	r0, [pc, #132]	; 17e08 <__assert_fail@plt+0x6704>
   17d80:	bl	114c4 <getenv@plt>
   17d84:	subs	r4, r0, #0
   17d88:	bne	17c70 <__assert_fail@plt+0x656c>
   17d8c:	ldr	r0, [pc, #120]	; 17e0c <__assert_fail@plt+0x6708>
   17d90:	bl	114c4 <getenv@plt>
   17d94:	subs	r4, r0, #0
   17d98:	bne	17c70 <__assert_fail@plt+0x656c>
   17d9c:	ldr	r0, [pc, #92]	; 17e00 <__assert_fail@plt+0x66fc>
   17da0:	bl	114c4 <getenv@plt>
   17da4:	mov	r3, #0
   17da8:	mov	r6, #0
   17dac:	cmp	r0, #0
   17db0:	movne	r2, #512	; 0x200
   17db4:	moveq	r2, #1024	; 0x400
   17db8:	strd	r2, [r7]
   17dbc:	b	17ce0 <__assert_fail@plt+0x65dc>
   17dc0:	mov	r3, #0
   17dc4:	str	r3, [r8]
   17dc8:	ldrd	r2, [r7]
   17dcc:	b	17ce8 <__assert_fail@plt+0x65e4>
   17dd0:	ldrb	r3, [r2, #-1]
   17dd4:	cmp	r3, #66	; 0x42
   17dd8:	beq	17de4 <__assert_fail@plt+0x66e0>
   17ddc:	mov	r6, r9
   17de0:	b	17d74 <__assert_fail@plt+0x6670>
   17de4:	ldrb	r3, [r2, #-2]
   17de8:	cmp	r3, #105	; 0x69
   17dec:	movne	r6, sl
   17df0:	bne	17d74 <__assert_fail@plt+0x6670>
   17df4:	mov	r9, fp
   17df8:	b	17ddc <__assert_fail@plt+0x66d8>
   17dfc:	muleq	r2, r0, sl
   17e00:	andeq	r2, r2, ip, lsr #12
   17e04:	ldrdeq	r2, [r2], -r8
   17e08:	andeq	r2, r2, r0, asr #21
   17e0c:	andeq	r2, r2, ip, asr #21
   17e10:	push	{r4, r5, r6, r8, r9, lr}
   17e14:	mov	r4, r0
   17e18:	mov	r5, r1
   17e1c:	add	r6, r2, #20
   17e20:	mov	r8, #10
   17e24:	mov	r9, #0
   17e28:	mov	r3, #0
   17e2c:	strb	r3, [r2, #20]
   17e30:	mov	r0, r4
   17e34:	mov	r1, r5
   17e38:	mov	r2, r8
   17e3c:	mov	r3, r9
   17e40:	bl	21700 <__assert_fail@plt+0xfffc>
   17e44:	mov	r0, r4
   17e48:	mov	r1, r5
   17e4c:	mov	r3, r9
   17e50:	add	r2, r2, #48	; 0x30
   17e54:	strb	r2, [r6, #-1]!
   17e58:	mov	r2, r8
   17e5c:	bl	21700 <__assert_fail@plt+0xfffc>
   17e60:	mov	r4, r0
   17e64:	mov	r5, r1
   17e68:	orrs	r3, r4, r5
   17e6c:	bne	17e30 <__assert_fail@plt+0x672c>
   17e70:	mov	r0, r6
   17e74:	pop	{r4, r5, r6, r8, r9, pc}
   17e78:	push	{r4, r5, r6, r7, lr}
   17e7c:	subs	r6, r0, #0
   17e80:	sub	sp, sp, #12
   17e84:	addeq	r6, sp, #4
   17e88:	mov	r0, r6
   17e8c:	mov	r5, r2
   17e90:	mov	r7, r1
   17e94:	bl	1147c <mbrtowc@plt>
   17e98:	cmp	r5, #0
   17e9c:	cmnne	r0, #3
   17ea0:	mov	r4, r0
   17ea4:	bls	17ec0 <__assert_fail@plt+0x67bc>
   17ea8:	mov	r0, #0
   17eac:	bl	20b30 <__assert_fail@plt+0xf42c>
   17eb0:	cmp	r0, #0
   17eb4:	moveq	r4, #1
   17eb8:	ldrbeq	r3, [r7]
   17ebc:	streq	r3, [r6]
   17ec0:	mov	r0, r4
   17ec4:	add	sp, sp, #12
   17ec8:	pop	{r4, r5, r6, r7, pc}
   17ecc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17ed0:	sub	sp, sp, #12
   17ed4:	mov	r9, r3
   17ed8:	mov	r4, r1
   17edc:	str	r2, [sp]
   17ee0:	mov	fp, r0
   17ee4:	bl	1153c <strlen@plt>
   17ee8:	ldr	r3, [sp, #52]	; 0x34
   17eec:	ands	r5, r3, #2
   17ef0:	mov	r7, r0
   17ef4:	beq	18054 <__assert_fail@plt+0x6950>
   17ef8:	mov	r8, #0
   17efc:	mov	sl, r8
   17f00:	mov	r5, r7
   17f04:	ldr	r2, [r9]
   17f08:	cmp	r5, r2
   17f0c:	movhi	r7, r2
   17f10:	movhi	r6, #0
   17f14:	bls	18014 <__assert_fail@plt+0x6910>
   17f18:	ldr	r3, [sp, #48]	; 0x30
   17f1c:	str	r2, [r9]
   17f20:	cmp	r3, #0
   17f24:	beq	18038 <__assert_fail@plt+0x6934>
   17f28:	cmp	r3, #1
   17f2c:	moveq	r9, #0
   17f30:	bne	18044 <__assert_fail@plt+0x6940>
   17f34:	ldr	r3, [sp, #52]	; 0x34
   17f38:	tst	r3, #4
   17f3c:	movne	r6, #0
   17f40:	tst	r3, #8
   17f44:	ldr	r3, [sp]
   17f48:	movne	r9, #0
   17f4c:	cmp	r3, #0
   17f50:	beq	17fec <__assert_fail@plt+0x68e8>
   17f54:	sub	r5, r3, #1
   17f58:	add	r5, r4, r5
   17f5c:	cmp	r6, #0
   17f60:	cmpne	r4, r5
   17f64:	sub	r3, r6, #1
   17f68:	bcs	17f90 <__assert_fail@plt+0x688c>
   17f6c:	mov	r1, #32
   17f70:	strb	r1, [r4], #1
   17f74:	cmp	r3, #0
   17f78:	cmpne	r5, r4
   17f7c:	movhi	r2, #1
   17f80:	movls	r2, #0
   17f84:	cmp	r2, #0
   17f88:	sub	r3, r3, #1
   17f8c:	bne	17f70 <__assert_fail@plt+0x686c>
   17f90:	sub	r2, r5, r4
   17f94:	cmp	r2, r7
   17f98:	mov	r3, #0
   17f9c:	movcs	r2, r7
   17fa0:	strb	r3, [r4]
   17fa4:	mov	r1, fp
   17fa8:	mov	r0, r4
   17fac:	bl	11500 <mempcpy@plt>
   17fb0:	sub	r3, r9, #1
   17fb4:	cmp	r9, #0
   17fb8:	cmpne	r5, r0
   17fbc:	bls	17fe4 <__assert_fail@plt+0x68e0>
   17fc0:	mov	r1, #32
   17fc4:	strb	r1, [r0], #1
   17fc8:	cmp	r3, #0
   17fcc:	cmpne	r5, r0
   17fd0:	movhi	r2, #1
   17fd4:	movls	r2, #0
   17fd8:	cmp	r2, #0
   17fdc:	sub	r3, r3, #1
   17fe0:	bne	17fc4 <__assert_fail@plt+0x68c0>
   17fe4:	mov	r3, #0
   17fe8:	strb	r3, [r0]
   17fec:	add	r6, r6, r7
   17ff0:	add	r9, r6, r9
   17ff4:	mov	r0, r8
   17ff8:	bl	15334 <__assert_fail@plt+0x3c30>
   17ffc:	mov	r0, sl
   18000:	bl	15334 <__assert_fail@plt+0x3c30>
   18004:	mov	r0, r9
   18008:	add	sp, sp, #12
   1800c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18010:	mov	sl, #0
   18014:	ldr	r3, [sp, #48]	; 0x30
   18018:	cmp	r5, r2
   1801c:	movcs	r2, r5
   18020:	subcc	r6, r2, r5
   18024:	movcs	r6, #0
   18028:	movcc	r2, r5
   1802c:	cmp	r3, #0
   18030:	str	r2, [r9]
   18034:	bne	17f28 <__assert_fail@plt+0x6824>
   18038:	mov	r9, r6
   1803c:	ldr	r6, [sp, #48]	; 0x30
   18040:	b	17f34 <__assert_fail@plt+0x6830>
   18044:	lsr	r9, r6, #1
   18048:	and	r6, r6, #1
   1804c:	add	r6, r6, r9
   18050:	b	17f34 <__assert_fail@plt+0x6830>
   18054:	bl	11458 <__ctype_get_mb_cur_max@plt>
   18058:	cmp	r0, #1
   1805c:	bls	17ef8 <__assert_fail@plt+0x67f4>
   18060:	mov	r2, r5
   18064:	mov	r1, fp
   18068:	mov	r0, r5
   1806c:	bl	11668 <mbstowcs@plt>
   18070:	cmn	r0, #1
   18074:	bne	18094 <__assert_fail@plt+0x6990>
   18078:	ldr	r3, [sp, #52]	; 0x34
   1807c:	tst	r3, #1
   18080:	bne	17ef8 <__assert_fail@plt+0x67f4>
   18084:	mov	r8, #0
   18088:	mov	sl, r8
   1808c:	mvn	r9, #0
   18090:	b	17ff4 <__assert_fail@plt+0x68f0>
   18094:	add	sl, r0, #1
   18098:	lsl	r6, sl, #2
   1809c:	mov	r0, r6
   180a0:	bl	1f564 <__assert_fail@plt+0xde60>
   180a4:	subs	r8, r0, #0
   180a8:	beq	18218 <__assert_fail@plt+0x6b14>
   180ac:	mov	r2, sl
   180b0:	mov	r1, fp
   180b4:	bl	11668 <mbstowcs@plt>
   180b8:	cmp	r0, #0
   180bc:	beq	181c4 <__assert_fail@plt+0x6ac0>
   180c0:	add	r6, r8, r6
   180c4:	str	r5, [r6, #-4]
   180c8:	ldr	r6, [r8]
   180cc:	cmp	r6, #0
   180d0:	beq	181d0 <__assert_fail@plt+0x6acc>
   180d4:	mov	r3, r5
   180d8:	mov	r0, r6
   180dc:	mov	r5, r8
   180e0:	mov	r6, r3
   180e4:	bl	11410 <iswprint@plt>
   180e8:	cmp	r0, #0
   180ec:	moveq	r6, #1
   180f0:	ldreq	r3, [pc, #324]	; 1823c <__assert_fail@plt+0x6b38>
   180f4:	streq	r3, [r5]
   180f8:	ldr	r0, [r5, #4]!
   180fc:	cmp	r0, #0
   18100:	bne	180e4 <__assert_fail@plt+0x69e0>
   18104:	str	r6, [sp, #4]
   18108:	mov	r1, sl
   1810c:	mov	r6, r0
   18110:	mov	r0, r8
   18114:	bl	11620 <wcswidth@plt>
   18118:	ldr	r3, [sp, #4]
   1811c:	cmp	r3, #0
   18120:	mov	r5, r0
   18124:	beq	181e0 <__assert_fail@plt+0x6adc>
   18128:	mov	r2, r6
   1812c:	mov	r1, r8
   18130:	mov	r0, r6
   18134:	bl	11488 <wcstombs@plt>
   18138:	add	r3, r0, #1
   1813c:	mov	r0, r3
   18140:	str	r3, [sp, #4]
   18144:	bl	1f564 <__assert_fail@plt+0xde60>
   18148:	subs	sl, r0, #0
   1814c:	beq	18204 <__assert_fail@plt+0x6b00>
   18150:	ldr	r0, [r8]
   18154:	ldr	r6, [r9]
   18158:	cmp	r0, #0
   1815c:	beq	18230 <__assert_fail@plt+0x6b2c>
   18160:	mov	r7, r8
   18164:	mov	r5, #0
   18168:	mov	fp, #1
   1816c:	b	18180 <__assert_fail@plt+0x6a7c>
   18170:	ldr	r0, [r7, #4]!
   18174:	mov	r5, r3
   18178:	cmp	r0, #0
   1817c:	beq	181a0 <__assert_fail@plt+0x6a9c>
   18180:	bl	11338 <wcwidth@plt>
   18184:	cmn	r0, #1
   18188:	moveq	r0, fp
   1818c:	ldreq	r3, [pc, #168]	; 1823c <__assert_fail@plt+0x6b38>
   18190:	streq	r3, [r7]
   18194:	add	r3, r5, r0
   18198:	cmp	r6, r3
   1819c:	bcs	18170 <__assert_fail@plt+0x6a6c>
   181a0:	mov	r0, #0
   181a4:	str	r0, [r7]
   181a8:	ldr	r2, [sp, #4]
   181ac:	mov	r1, r8
   181b0:	mov	r0, sl
   181b4:	bl	11488 <wcstombs@plt>
   181b8:	mov	fp, sl
   181bc:	mov	r7, r0
   181c0:	b	17f04 <__assert_fail@plt+0x6800>
   181c4:	mov	sl, r0
   181c8:	mov	r5, r7
   181cc:	b	17f04 <__assert_fail@plt+0x6800>
   181d0:	mov	r1, sl
   181d4:	mov	r0, r8
   181d8:	bl	11620 <wcswidth@plt>
   181dc:	mov	r5, r0
   181e0:	ldr	r2, [r9]
   181e4:	cmp	r2, r5
   181e8:	bcs	18010 <__assert_fail@plt+0x690c>
   181ec:	add	r3, r7, #1
   181f0:	mov	r0, r3
   181f4:	str	r3, [sp, #4]
   181f8:	bl	1f564 <__assert_fail@plt+0xde60>
   181fc:	subs	sl, r0, #0
   18200:	bne	18150 <__assert_fail@plt+0x6a4c>
   18204:	ldr	r3, [sp, #52]	; 0x34
   18208:	tst	r3, #1
   1820c:	mvneq	r9, #0
   18210:	beq	17ff4 <__assert_fail@plt+0x68f0>
   18214:	b	17f04 <__assert_fail@plt+0x6800>
   18218:	ldr	r3, [sp, #52]	; 0x34
   1821c:	tst	r3, #1
   18220:	beq	18084 <__assert_fail@plt+0x6980>
   18224:	mov	r5, r7
   18228:	mov	sl, r8
   1822c:	b	17f04 <__assert_fail@plt+0x6800>
   18230:	mov	r5, r0
   18234:	mov	r7, r8
   18238:	b	181a0 <__assert_fail@plt+0x6a9c>
   1823c:	strdeq	pc, [r0], -sp
   18240:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18244:	sub	sp, sp, #44	; 0x2c
   18248:	mov	r4, #0
   1824c:	str	r1, [sp, #4]
   18250:	ldr	r1, [r1]
   18254:	str	r2, [sp, #20]
   18258:	and	r2, r3, #2
   1825c:	str	r2, [sp, #16]
   18260:	mov	r5, r1
   18264:	and	r2, r3, #1
   18268:	mov	r6, #32
   1826c:	str	r2, [sp, #36]	; 0x24
   18270:	and	r2, r3, #4
   18274:	and	r3, r3, #8
   18278:	str	r1, [sp, #12]
   1827c:	str	r0, [sp, #8]
   18280:	str	r2, [sp, #24]
   18284:	str	r3, [sp, #28]
   18288:	add	r7, r5, #1
   1828c:	mov	r1, r7
   18290:	mov	r0, r4
   18294:	bl	1f590 <__assert_fail@plt+0xde8c>
   18298:	subs	r8, r0, #0
   1829c:	beq	186a4 <__assert_fail@plt+0x6fa0>
   182a0:	ldr	r3, [sp, #4]
   182a4:	ldr	r2, [sp, #12]
   182a8:	ldr	r0, [sp, #8]
   182ac:	str	r2, [r3]
   182b0:	bl	1153c <strlen@plt>
   182b4:	ldr	r3, [sp, #16]
   182b8:	cmp	r3, #0
   182bc:	mov	r4, r0
   182c0:	beq	18458 <__assert_fail@plt+0x6d54>
   182c4:	mov	r3, #0
   182c8:	ldr	r2, [sp, #12]
   182cc:	ldr	r1, [sp, #8]
   182d0:	mov	r9, r0
   182d4:	mov	sl, r3
   182d8:	str	r3, [sp]
   182dc:	cmp	r9, r2
   182e0:	movhi	r4, r2
   182e4:	movhi	fp, #0
   182e8:	bls	18434 <__assert_fail@plt+0x6d30>
   182ec:	ldr	r3, [sp, #20]
   182f0:	ldr	r0, [sp, #4]
   182f4:	cmp	r3, #0
   182f8:	str	r2, [r0]
   182fc:	beq	1844c <__assert_fail@plt+0x6d48>
   18300:	cmp	r3, #1
   18304:	moveq	r3, #0
   18308:	lsrne	r3, fp, #1
   1830c:	andne	fp, fp, #1
   18310:	addne	fp, fp, r3
   18314:	ldr	r2, [sp, #24]
   18318:	cmp	r2, #0
   1831c:	ldr	r2, [sp, #28]
   18320:	movne	fp, #0
   18324:	cmp	r2, #0
   18328:	movne	r3, #0
   1832c:	cmp	r7, #0
   18330:	beq	183f4 <__assert_fail@plt+0x6cf0>
   18334:	add	r5, r8, r5
   18338:	cmp	fp, #0
   1833c:	cmpne	r8, r5
   18340:	mov	r0, r8
   18344:	sub	r2, fp, #1
   18348:	bcs	1836c <__assert_fail@plt+0x6c68>
   1834c:	strb	r6, [r0], #1
   18350:	cmp	r2, #0
   18354:	cmpne	r5, r0
   18358:	movhi	ip, #1
   1835c:	movls	ip, #0
   18360:	cmp	ip, #0
   18364:	sub	r2, r2, #1
   18368:	bne	1834c <__assert_fail@plt+0x6c48>
   1836c:	sub	r2, r5, r0
   18370:	cmp	r2, r4
   18374:	str	r3, [sp, #32]
   18378:	mov	r3, #0
   1837c:	movcs	r2, r4
   18380:	strb	r3, [r0]
   18384:	bl	11500 <mempcpy@plt>
   18388:	ldr	r3, [sp, #32]
   1838c:	sub	r2, r3, #1
   18390:	cmp	r3, #0
   18394:	cmpne	r5, r0
   18398:	bls	183bc <__assert_fail@plt+0x6cb8>
   1839c:	strb	r6, [r0], #1
   183a0:	cmp	r2, #0
   183a4:	cmpne	r5, r0
   183a8:	movhi	r1, #1
   183ac:	movls	r1, #0
   183b0:	cmp	r1, #0
   183b4:	sub	r2, r2, #1
   183b8:	bne	1839c <__assert_fail@plt+0x6c98>
   183bc:	mov	r2, #0
   183c0:	strb	r2, [r0]
   183c4:	add	r5, fp, r4
   183c8:	ldr	r0, [sp]
   183cc:	add	r5, r5, r3
   183d0:	bl	15334 <__assert_fail@plt+0x3c30>
   183d4:	mov	r0, sl
   183d8:	bl	15334 <__assert_fail@plt+0x3c30>
   183dc:	cmn	r5, #1
   183e0:	beq	18498 <__assert_fail@plt+0x6d94>
   183e4:	cmp	r7, r5
   183e8:	bhi	18420 <__assert_fail@plt+0x6d1c>
   183ec:	mov	r4, r8
   183f0:	b	18288 <__assert_fail@plt+0x6b84>
   183f4:	ldr	r0, [sp]
   183f8:	add	r5, fp, r4
   183fc:	add	r5, r5, r3
   18400:	bl	15334 <__assert_fail@plt+0x3c30>
   18404:	mov	r0, sl
   18408:	bl	15334 <__assert_fail@plt+0x3c30>
   1840c:	cmn	r5, #1
   18410:	bne	183ec <__assert_fail@plt+0x6ce8>
   18414:	mov	r0, r8
   18418:	bl	15334 <__assert_fail@plt+0x3c30>
   1841c:	mov	r8, #0
   18420:	mov	r0, r8
   18424:	add	sp, sp, #44	; 0x2c
   18428:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1842c:	ldr	r1, [sp, #8]
   18430:	mov	sl, #0
   18434:	cmp	r2, r9
   18438:	subhi	fp, r2, r9
   1843c:	movls	r2, r9
   18440:	movhi	r2, r9
   18444:	movls	fp, #0
   18448:	b	182ec <__assert_fail@plt+0x6be8>
   1844c:	mov	r3, fp
   18450:	ldr	fp, [sp, #20]
   18454:	b	18314 <__assert_fail@plt+0x6c10>
   18458:	bl	11458 <__ctype_get_mb_cur_max@plt>
   1845c:	cmp	r0, #1
   18460:	bls	184b0 <__assert_fail@plt+0x6dac>
   18464:	mov	r2, #0
   18468:	ldr	r1, [sp, #8]
   1846c:	ldr	r0, [sp, #16]
   18470:	bl	11668 <mbstowcs@plt>
   18474:	cmn	r0, #1
   18478:	bne	184d0 <__assert_fail@plt+0x6dcc>
   1847c:	ldr	r3, [sp, #36]	; 0x24
   18480:	cmp	r3, #0
   18484:	bne	184b0 <__assert_fail@plt+0x6dac>
   18488:	mov	r0, #0
   1848c:	bl	15334 <__assert_fail@plt+0x3c30>
   18490:	mov	r0, #0
   18494:	bl	15334 <__assert_fail@plt+0x3c30>
   18498:	mov	r0, r8
   1849c:	bl	15334 <__assert_fail@plt+0x3c30>
   184a0:	mov	r8, #0
   184a4:	mov	r0, r8
   184a8:	add	sp, sp, #44	; 0x2c
   184ac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   184b0:	ldr	r3, [sp, #4]
   184b4:	mov	r9, r4
   184b8:	ldr	r1, [sp, #8]
   184bc:	ldr	r2, [r3]
   184c0:	mov	r3, #0
   184c4:	str	r3, [sp]
   184c8:	ldr	sl, [sp, #16]
   184cc:	b	182dc <__assert_fail@plt+0x6bd8>
   184d0:	add	fp, r0, #1
   184d4:	lsl	sl, fp, #2
   184d8:	mov	r0, sl
   184dc:	bl	1f564 <__assert_fail@plt+0xde60>
   184e0:	subs	r3, r0, #0
   184e4:	str	r3, [sp]
   184e8:	beq	18618 <__assert_fail@plt+0x6f14>
   184ec:	mov	r2, fp
   184f0:	ldr	r1, [sp, #8]
   184f4:	bl	11668 <mbstowcs@plt>
   184f8:	cmp	r0, #0
   184fc:	beq	18624 <__assert_fail@plt+0x6f20>
   18500:	ldr	r3, [sp]
   18504:	ldr	r2, [sp, #16]
   18508:	add	sl, r3, sl
   1850c:	str	r2, [sl, #-4]
   18510:	ldr	sl, [r3]
   18514:	cmp	sl, #0
   18518:	beq	1863c <__assert_fail@plt+0x6f38>
   1851c:	mov	r9, r3
   18520:	mov	r3, #0
   18524:	mov	r0, sl
   18528:	mov	sl, r3
   1852c:	bl	11410 <iswprint@plt>
   18530:	cmp	r0, #0
   18534:	moveq	sl, #1
   18538:	ldreq	r3, [pc, #376]	; 186b8 <__assert_fail@plt+0x6fb4>
   1853c:	streq	r3, [r9]
   18540:	ldr	r0, [r9, #4]!
   18544:	cmp	r0, #0
   18548:	bne	1852c <__assert_fail@plt+0x6e28>
   1854c:	str	sl, [sp, #32]
   18550:	mov	r1, fp
   18554:	mov	sl, r0
   18558:	ldr	r0, [sp]
   1855c:	bl	11620 <wcswidth@plt>
   18560:	ldr	r3, [sp, #32]
   18564:	cmp	r3, #0
   18568:	mov	r9, r0
   1856c:	beq	1864c <__assert_fail@plt+0x6f48>
   18570:	mov	r0, sl
   18574:	mov	r2, #0
   18578:	ldr	r1, [sp]
   1857c:	bl	11488 <wcstombs@plt>
   18580:	add	r3, r0, #1
   18584:	mov	r0, r3
   18588:	str	r3, [sp, #32]
   1858c:	bl	1f564 <__assert_fail@plt+0xde60>
   18590:	subs	sl, r0, #0
   18594:	beq	18674 <__assert_fail@plt+0x6f70>
   18598:	ldr	r3, [sp]
   1859c:	ldr	r2, [sp, #4]
   185a0:	mov	fp, r3
   185a4:	ldr	r0, [r3]
   185a8:	ldr	r4, [r2]
   185ac:	cmp	r0, #0
   185b0:	mov	r9, #0
   185b4:	bne	185cc <__assert_fail@plt+0x6ec8>
   185b8:	b	185ec <__assert_fail@plt+0x6ee8>
   185bc:	ldr	r0, [fp, #4]!
   185c0:	mov	r9, r3
   185c4:	cmp	r0, #0
   185c8:	beq	185ec <__assert_fail@plt+0x6ee8>
   185cc:	bl	11338 <wcwidth@plt>
   185d0:	cmn	r0, #1
   185d4:	moveq	r0, #1
   185d8:	ldreq	r3, [pc, #216]	; 186b8 <__assert_fail@plt+0x6fb4>
   185dc:	streq	r3, [fp]
   185e0:	add	r3, r0, r9
   185e4:	cmp	r4, r3
   185e8:	bcs	185bc <__assert_fail@plt+0x6eb8>
   185ec:	mov	r3, #0
   185f0:	str	r3, [fp]
   185f4:	ldr	r2, [sp, #32]
   185f8:	ldr	r1, [sp]
   185fc:	mov	r0, sl
   18600:	bl	11488 <wcstombs@plt>
   18604:	ldr	r3, [sp, #4]
   18608:	mov	r1, sl
   1860c:	ldr	r2, [r3]
   18610:	mov	r4, r0
   18614:	b	182dc <__assert_fail@plt+0x6bd8>
   18618:	ldr	r3, [sp, #36]	; 0x24
   1861c:	cmp	r3, #0
   18620:	beq	18488 <__assert_fail@plt+0x6d84>
   18624:	ldr	r3, [sp, #4]
   18628:	mov	r9, r4
   1862c:	ldr	r1, [sp, #8]
   18630:	ldr	r2, [r3]
   18634:	mov	sl, #0
   18638:	b	182dc <__assert_fail@plt+0x6bd8>
   1863c:	mov	r0, r3
   18640:	mov	r1, fp
   18644:	bl	11620 <wcswidth@plt>
   18648:	mov	r9, r0
   1864c:	ldr	r3, [sp, #4]
   18650:	ldr	r2, [r3]
   18654:	cmp	r2, r9
   18658:	bcs	1842c <__assert_fail@plt+0x6d28>
   1865c:	add	r3, r4, #1
   18660:	mov	r0, r3
   18664:	str	r3, [sp, #32]
   18668:	bl	1f564 <__assert_fail@plt+0xde60>
   1866c:	subs	sl, r0, #0
   18670:	bne	18598 <__assert_fail@plt+0x6e94>
   18674:	ldr	r3, [sp, #36]	; 0x24
   18678:	cmp	r3, #0
   1867c:	bne	18694 <__assert_fail@plt+0x6f90>
   18680:	ldr	r0, [sp]
   18684:	bl	15334 <__assert_fail@plt+0x3c30>
   18688:	ldr	r0, [sp, #36]	; 0x24
   1868c:	bl	15334 <__assert_fail@plt+0x3c30>
   18690:	b	18498 <__assert_fail@plt+0x6d94>
   18694:	ldr	r3, [sp, #4]
   18698:	ldr	r1, [sp, #8]
   1869c:	ldr	r2, [r3]
   186a0:	b	182dc <__assert_fail@plt+0x6bd8>
   186a4:	mov	r0, r4
   186a8:	bl	15334 <__assert_fail@plt+0x3c30>
   186ac:	mov	r0, r8
   186b0:	add	sp, sp, #44	; 0x2c
   186b4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   186b8:	strdeq	pc, [r0], -sp
   186bc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   186c0:	sub	sp, sp, #20
   186c4:	mov	r5, r0
   186c8:	add	r7, r0, r1
   186cc:	mov	sl, r2
   186d0:	bl	11458 <__ctype_get_mb_cur_max@plt>
   186d4:	cmp	r0, #1
   186d8:	bls	1887c <__assert_fail@plt+0x7178>
   186dc:	cmp	r5, r7
   186e0:	mov	r6, #0
   186e4:	bcs	187e0 <__assert_fail@plt+0x70dc>
   186e8:	and	fp, sl, #2
   186ec:	mov	r9, r6
   186f0:	and	sl, sl, #1
   186f4:	mvn	r8, #-2147483648	; 0x80000000
   186f8:	b	18720 <__assert_fail@plt+0x701c>
   186fc:	cmp	r3, #37	; 0x25
   18700:	bcs	18710 <__assert_fail@plt+0x700c>
   18704:	sub	r3, r3, #32
   18708:	cmp	r3, #3
   1870c:	bhi	18748 <__assert_fail@plt+0x7044>
   18710:	add	r5, r5, #1
   18714:	add	r6, r6, #1
   18718:	cmp	r7, r5
   1871c:	bls	187e0 <__assert_fail@plt+0x70dc>
   18720:	ldrb	r3, [r5]
   18724:	cmp	r3, #63	; 0x3f
   18728:	bls	186fc <__assert_fail@plt+0x6ff8>
   1872c:	cmp	r3, #65	; 0x41
   18730:	bcc	18748 <__assert_fail@plt+0x7044>
   18734:	cmp	r3, #95	; 0x5f
   18738:	bls	18710 <__assert_fail@plt+0x700c>
   1873c:	sub	r3, r3, #97	; 0x61
   18740:	cmp	r3, #29
   18744:	bls	18710 <__assert_fail@plt+0x700c>
   18748:	cmp	fp, #0
   1874c:	str	r9, [sp, #8]
   18750:	str	r9, [sp, #12]
   18754:	beq	1877c <__assert_fail@plt+0x7078>
   18758:	b	18828 <__assert_fail@plt+0x7124>
   1875c:	cmp	r0, r3
   18760:	bgt	187dc <__assert_fail@plt+0x70d8>
   18764:	add	r6, r6, r0
   18768:	add	r0, sp, #8
   1876c:	bl	1138c <mbsinit@plt>
   18770:	add	r5, r5, r4
   18774:	cmp	r0, #0
   18778:	bne	18718 <__assert_fail@plt+0x7014>
   1877c:	add	r3, sp, #8
   18780:	sub	r2, r7, r5
   18784:	mov	r1, r5
   18788:	add	r0, sp, #4
   1878c:	bl	17e78 <__assert_fail@plt+0x6774>
   18790:	cmn	r0, #1
   18794:	mov	r4, r0
   18798:	beq	18864 <__assert_fail@plt+0x7160>
   1879c:	cmn	r0, #2
   187a0:	beq	18850 <__assert_fail@plt+0x714c>
   187a4:	ldr	r0, [sp, #4]
   187a8:	bl	11338 <wcwidth@plt>
   187ac:	cmp	r4, #0
   187b0:	moveq	r4, #1
   187b4:	sub	r3, r8, r6
   187b8:	cmp	r0, #0
   187bc:	bge	1875c <__assert_fail@plt+0x7058>
   187c0:	ldr	r0, [sp, #4]
   187c4:	bl	113ec <iswcntrl@plt>
   187c8:	cmp	r0, #0
   187cc:	bne	18768 <__assert_fail@plt+0x7064>
   187d0:	cmn	r6, #-2147483647	; 0x80000001
   187d4:	add	r6, r6, #1
   187d8:	bne	18768 <__assert_fail@plt+0x7064>
   187dc:	mvn	r6, #-2147483648	; 0x80000000
   187e0:	mov	r0, r6
   187e4:	add	sp, sp, #20
   187e8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   187ec:	ldr	r0, [sp, #4]
   187f0:	bl	11338 <wcwidth@plt>
   187f4:	cmp	r4, #0
   187f8:	moveq	r4, #1
   187fc:	sub	r2, r8, r6
   18800:	add	r5, r5, r4
   18804:	subs	r3, r0, #0
   18808:	add	r6, r6, r3
   1880c:	add	r0, sp, #8
   18810:	blt	1886c <__assert_fail@plt+0x7168>
   18814:	cmp	r3, r2
   18818:	bgt	187dc <__assert_fail@plt+0x70d8>
   1881c:	bl	1138c <mbsinit@plt>
   18820:	cmp	r0, #0
   18824:	bne	18718 <__assert_fail@plt+0x7014>
   18828:	add	r3, sp, #8
   1882c:	sub	r2, r7, r5
   18830:	mov	r1, r5
   18834:	add	r0, sp, #4
   18838:	bl	17e78 <__assert_fail@plt+0x6774>
   1883c:	cmn	r0, #1
   18840:	mov	r4, r0
   18844:	beq	18864 <__assert_fail@plt+0x7160>
   18848:	cmn	r0, #2
   1884c:	bne	187ec <__assert_fail@plt+0x70e8>
   18850:	cmp	sl, #0
   18854:	bne	1886c <__assert_fail@plt+0x7168>
   18858:	add	r6, r6, #1
   1885c:	mov	r5, r7
   18860:	b	18718 <__assert_fail@plt+0x7014>
   18864:	cmp	sl, #0
   18868:	beq	18710 <__assert_fail@plt+0x700c>
   1886c:	mvn	r6, #0
   18870:	mov	r0, r6
   18874:	add	sp, sp, #20
   18878:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1887c:	cmp	r5, r7
   18880:	movcs	r6, #0
   18884:	bcs	187e0 <__assert_fail@plt+0x70dc>
   18888:	bl	11518 <__ctype_b_loc@plt>
   1888c:	ands	r6, sl, #2
   18890:	ldr	r2, [r0]
   18894:	bne	188d4 <__assert_fail@plt+0x71d0>
   18898:	ldrb	r3, [r5], #1
   1889c:	lsl	r3, r3, #1
   188a0:	ldrh	r3, [r2, r3]
   188a4:	tst	r3, #16384	; 0x4000
   188a8:	bne	188b4 <__assert_fail@plt+0x71b0>
   188ac:	tst	r3, #2
   188b0:	bne	188c0 <__assert_fail@plt+0x71bc>
   188b4:	cmn	r6, #-2147483647	; 0x80000001
   188b8:	beq	187e0 <__assert_fail@plt+0x70dc>
   188bc:	add	r6, r6, #1
   188c0:	cmp	r7, r5
   188c4:	bne	18898 <__assert_fail@plt+0x7194>
   188c8:	mov	r0, r6
   188cc:	add	sp, sp, #20
   188d0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   188d4:	mov	r6, #0
   188d8:	b	188f0 <__assert_fail@plt+0x71ec>
   188dc:	cmn	r6, #-2147483647	; 0x80000001
   188e0:	beq	187e0 <__assert_fail@plt+0x70dc>
   188e4:	cmp	r7, r5
   188e8:	add	r6, r6, #1
   188ec:	beq	187e0 <__assert_fail@plt+0x70dc>
   188f0:	ldrb	r3, [r5], #1
   188f4:	lsl	r3, r3, #1
   188f8:	ldrh	r3, [r2, r3]
   188fc:	tst	r3, #16384	; 0x4000
   18900:	beq	1886c <__assert_fail@plt+0x7168>
   18904:	b	188dc <__assert_fail@plt+0x71d8>
   18908:	push	{r4, r5, r6, lr}
   1890c:	mov	r5, r1
   18910:	mov	r4, r0
   18914:	bl	1153c <strlen@plt>
   18918:	mov	r2, r5
   1891c:	mov	r1, r0
   18920:	mov	r0, r4
   18924:	pop	{r4, r5, r6, lr}
   18928:	b	186bc <__assert_fail@plt+0x6fb8>
   1892c:	andeq	r0, r0, r0
   18930:	push	{r4, r5, r6, r7, r8, lr}
   18934:	mov	r4, r0
   18938:	bl	1153c <strlen@plt>
   1893c:	adds	r0, r0, #1
   18940:	popeq	{r4, r5, r6, r7, r8, pc}
   18944:	mov	r2, r4
   18948:	mov	r3, #0
   1894c:	b	18964 <__assert_fail@plt+0x7260>
   18950:	mov	r3, ip
   18954:	strb	r1, [r2]
   18958:	cmp	r0, r3
   1895c:	add	r2, r2, #1
   18960:	bls	189d4 <__assert_fail@plt+0x72d0>
   18964:	ldrb	r1, [r4, r3]
   18968:	add	ip, r3, #1
   1896c:	cmp	r1, #92	; 0x5c
   18970:	bne	18950 <__assert_fail@plt+0x724c>
   18974:	add	lr, r3, #4
   18978:	cmp	r0, lr
   1897c:	bls	18950 <__assert_fail@plt+0x724c>
   18980:	ldrb	r5, [r4, ip]
   18984:	add	r3, r4, r3
   18988:	sub	r5, r5, #48	; 0x30
   1898c:	uxtb	r6, r5
   18990:	cmp	r6, #3
   18994:	bhi	18950 <__assert_fail@plt+0x724c>
   18998:	ldrb	r6, [r3, #2]
   1899c:	sub	r6, r6, #48	; 0x30
   189a0:	uxtb	r7, r6
   189a4:	cmp	r7, #7
   189a8:	bhi	18950 <__assert_fail@plt+0x724c>
   189ac:	ldrb	r7, [r3, #3]
   189b0:	mov	r3, lr
   189b4:	add	r5, r6, r5, lsl #3
   189b8:	sub	lr, r7, #48	; 0x30
   189bc:	uxtb	lr, lr
   189c0:	cmp	lr, #7
   189c4:	add	r5, lr, r5, lsl #3
   189c8:	strbls	r5, [r2]
   189cc:	bls	18958 <__assert_fail@plt+0x7254>
   189d0:	b	18950 <__assert_fail@plt+0x724c>
   189d4:	pop	{r4, r5, r6, r7, r8, pc}
   189d8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   189dc:	sub	sp, sp, #68	; 0x44
   189e0:	ldr	r1, [pc, #1312]	; 18f08 <__assert_fail@plt+0x7804>
   189e4:	ldr	r0, [pc, #1312]	; 18f0c <__assert_fail@plt+0x7808>
   189e8:	bl	1168c <fopen64@plt>
   189ec:	subs	r7, r0, #0
   189f0:	beq	18f98 <__assert_fail@plt+0x7894>
   189f4:	add	sl, sp, #40	; 0x28
   189f8:	ldr	r9, [pc, #1296]	; 18f10 <__assert_fail@plt+0x780c>
   189fc:	mov	r5, sl
   18a00:	mov	r3, #0
   18a04:	str	r3, [sp, #44]	; 0x2c
   18a08:	str	r3, [sp, #48]	; 0x30
   18a0c:	mov	r3, r7
   18a10:	mov	r2, #10
   18a14:	add	r1, sp, #48	; 0x30
   18a18:	add	r0, sp, #44	; 0x2c
   18a1c:	bl	11314 <__getdelim@plt>
   18a20:	cmn	r0, #1
   18a24:	beq	18c74 <__assert_fail@plt+0x7570>
   18a28:	add	r3, sp, #60	; 0x3c
   18a2c:	str	r3, [sp]
   18a30:	ldr	r0, [sp, #44]	; 0x2c
   18a34:	add	r3, sp, #56	; 0x38
   18a38:	add	r2, sp, #52	; 0x34
   18a3c:	mov	r1, r9
   18a40:	bl	11650 <sscanf@plt>
   18a44:	sub	r0, r0, #2
   18a48:	cmp	r0, #1
   18a4c:	bhi	18a0c <__assert_fail@plt+0x7308>
   18a50:	ldr	r3, [sp, #60]	; 0x3c
   18a54:	ldr	sl, [sp, #44]	; 0x2c
   18a58:	mov	r1, #32
   18a5c:	add	sl, sl, r3
   18a60:	mov	r0, sl
   18a64:	bl	11548 <strchr@plt>
   18a68:	subs	r6, r0, #0
   18a6c:	beq	18a0c <__assert_fail@plt+0x7308>
   18a70:	mov	r8, #0
   18a74:	strb	r8, [r6], #1
   18a78:	mov	r1, #32
   18a7c:	mov	r0, r6
   18a80:	bl	11548 <strchr@plt>
   18a84:	cmp	r0, #0
   18a88:	beq	18a0c <__assert_fail@plt+0x7308>
   18a8c:	ldr	r1, [pc, #1152]	; 18f14 <__assert_fail@plt+0x7810>
   18a90:	strb	r8, [r0], #1
   18a94:	bl	1fa98 <__assert_fail@plt+0xe394>
   18a98:	cmp	r0, #0
   18a9c:	beq	18a0c <__assert_fail@plt+0x7308>
   18aa0:	add	fp, r0, #3
   18aa4:	mov	r0, fp
   18aa8:	mov	r1, #32
   18aac:	bl	11548 <strchr@plt>
   18ab0:	subs	r3, r0, #0
   18ab4:	beq	18a0c <__assert_fail@plt+0x7308>
   18ab8:	strb	r8, [r3], #1
   18abc:	mov	r1, #32
   18ac0:	mov	r0, r3
   18ac4:	str	r3, [sp, #32]
   18ac8:	bl	11548 <strchr@plt>
   18acc:	cmp	r0, #0
   18ad0:	beq	18a0c <__assert_fail@plt+0x7308>
   18ad4:	ldr	r3, [sp, #32]
   18ad8:	strb	r8, [r0]
   18adc:	mov	r0, r3
   18ae0:	bl	18930 <__assert_fail@plt+0x722c>
   18ae4:	mov	r0, r6
   18ae8:	bl	18930 <__assert_fail@plt+0x722c>
   18aec:	mov	r0, sl
   18af0:	bl	18930 <__assert_fail@plt+0x722c>
   18af4:	mov	r0, fp
   18af8:	bl	18930 <__assert_fail@plt+0x722c>
   18afc:	mov	r0, #32
   18b00:	bl	1dfe4 <__assert_fail@plt+0xc8e0>
   18b04:	ldr	r3, [sp, #32]
   18b08:	mov	r4, r0
   18b0c:	mov	r0, r3
   18b10:	bl	1e5f4 <__assert_fail@plt+0xcef0>
   18b14:	str	r8, [sp, #12]
   18b18:	str	r8, [sp, #20]
   18b1c:	str	r0, [r4]
   18b20:	mov	r0, r6
   18b24:	bl	1e5f4 <__assert_fail@plt+0xcef0>
   18b28:	str	r0, [r4, #4]
   18b2c:	mov	r0, sl
   18b30:	bl	1e5f4 <__assert_fail@plt+0xcef0>
   18b34:	ldr	sl, [pc, #988]	; 18f18 <__assert_fail@plt+0x7814>
   18b38:	str	r0, [r4, #8]
   18b3c:	mov	r0, fp
   18b40:	bl	1e5f4 <__assert_fail@plt+0xcef0>
   18b44:	ldr	r3, [sp, #52]	; 0x34
   18b48:	mov	fp, #0
   18b4c:	str	r3, [sp, #28]
   18b50:	lsr	r2, r3, #24
   18b54:	lsl	r3, r3, #8
   18b58:	str	r2, [sp, #12]
   18b5c:	str	r3, [sp, #8]
   18b60:	ldrd	r2, [sp, #8]
   18b64:	str	r8, [sp, #24]
   18b68:	ldr	r1, [sp, #56]	; 0x38
   18b6c:	and	r2, r2, sl
   18b70:	and	r3, r3, fp
   18b74:	ldr	fp, [pc, #928]	; 18f1c <__assert_fail@plt+0x7818>
   18b78:	strd	r2, [sp, #32]
   18b7c:	ldrd	r2, [sp, #24]
   18b80:	mov	sl, #0
   18b84:	lsr	ip, r1, #20
   18b88:	and	sl, sl, r2
   18b8c:	and	fp, fp, r3
   18b90:	mov	r2, sl
   18b94:	mov	r3, fp
   18b98:	ldrd	sl, [sp, #32]
   18b9c:	str	ip, [sp, #20]
   18ba0:	ldrb	ip, [r4, #24]
   18ba4:	orr	sl, sl, r2
   18ba8:	orr	fp, fp, r3
   18bac:	lsl	r3, r1, #12
   18bb0:	uxtb	r1, r1
   18bb4:	orr	sl, sl, r1
   18bb8:	str	r3, [sp, #16]
   18bbc:	strd	sl, [sp, #32]
   18bc0:	add	r3, pc, #824	; 0x338
   18bc4:	ldrd	r2, [r3]
   18bc8:	ldrd	sl, [sp, #16]
   18bcc:	orr	ip, ip, #4
   18bd0:	strb	ip, [r4, #24]
   18bd4:	and	sl, sl, r2
   18bd8:	and	fp, fp, r3
   18bdc:	mov	r2, sl
   18be0:	mov	r3, fp
   18be4:	ldrd	sl, [sp, #32]
   18be8:	ldr	r1, [pc, #828]	; 18f2c <__assert_fail@plt+0x7828>
   18bec:	str	r0, [r4, #12]
   18bf0:	orr	sl, sl, r2
   18bf4:	orr	fp, fp, r3
   18bf8:	mov	r2, sl
   18bfc:	mov	r3, fp
   18c00:	mov	r6, r0
   18c04:	strd	r2, [r4, #16]
   18c08:	bl	11320 <strcmp@plt>
   18c0c:	cmp	r0, r8
   18c10:	beq	18c28 <__assert_fail@plt+0x7524>
   18c14:	ldr	r1, [pc, #788]	; 18f30 <__assert_fail@plt+0x782c>
   18c18:	mov	r0, r6
   18c1c:	bl	11320 <strcmp@plt>
   18c20:	cmp	r0, r8
   18c24:	bne	18cb0 <__assert_fail@plt+0x75ac>
   18c28:	mov	r0, #1
   18c2c:	ldrb	r3, [r4, #24]
   18c30:	ldr	r8, [r4]
   18c34:	mov	r1, #58	; 0x3a
   18c38:	bic	r3, r3, #1
   18c3c:	orr	r3, r0, r3
   18c40:	strb	r3, [r4, #24]
   18c44:	mov	r0, r8
   18c48:	bl	11548 <strchr@plt>
   18c4c:	cmp	r0, #0
   18c50:	beq	18da4 <__assert_fail@plt+0x76a0>
   18c54:	mov	r3, #1
   18c58:	ldrb	r0, [r4, #24]
   18c5c:	bic	r0, r0, #2
   18c60:	orr	r0, r0, r3, lsl #1
   18c64:	strb	r0, [r4, #24]
   18c68:	str	r4, [r5]
   18c6c:	add	r5, r4, #28
   18c70:	b	18a0c <__assert_fail@plt+0x7308>
   18c74:	ldr	r0, [sp, #44]	; 0x2c
   18c78:	bl	15334 <__assert_fail@plt+0x3c30>
   18c7c:	ldr	r3, [r7]
   18c80:	mov	sl, r5
   18c84:	tst	r3, #32
   18c88:	bne	18e7c <__assert_fail@plt+0x7778>
   18c8c:	mov	r0, r7
   18c90:	bl	20958 <__assert_fail@plt+0xf254>
   18c94:	cmn	r0, #1
   18c98:	beq	1927c <__assert_fail@plt+0x7b78>
   18c9c:	mov	r3, #0
   18ca0:	str	r3, [sl]
   18ca4:	ldr	r0, [sp, #40]	; 0x28
   18ca8:	add	sp, sp, #68	; 0x44
   18cac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18cb0:	ldr	r1, [pc, #636]	; 18f34 <__assert_fail@plt+0x7830>
   18cb4:	mov	r0, r6
   18cb8:	bl	11320 <strcmp@plt>
   18cbc:	cmp	r0, r8
   18cc0:	beq	18c28 <__assert_fail@plt+0x7524>
   18cc4:	ldr	r1, [pc, #620]	; 18f38 <__assert_fail@plt+0x7834>
   18cc8:	mov	r0, r6
   18ccc:	bl	11320 <strcmp@plt>
   18cd0:	cmp	r0, r8
   18cd4:	beq	18c28 <__assert_fail@plt+0x7524>
   18cd8:	ldr	r1, [pc, #604]	; 18f3c <__assert_fail@plt+0x7838>
   18cdc:	mov	r0, r6
   18ce0:	bl	11320 <strcmp@plt>
   18ce4:	cmp	r0, r8
   18ce8:	beq	18c28 <__assert_fail@plt+0x7524>
   18cec:	ldr	r1, [pc, #588]	; 18f40 <__assert_fail@plt+0x783c>
   18cf0:	mov	r0, r6
   18cf4:	bl	11320 <strcmp@plt>
   18cf8:	cmp	r0, r8
   18cfc:	beq	18c28 <__assert_fail@plt+0x7524>
   18d00:	ldr	r1, [pc, #572]	; 18f44 <__assert_fail@plt+0x7840>
   18d04:	mov	r0, r6
   18d08:	bl	11320 <strcmp@plt>
   18d0c:	cmp	r0, r8
   18d10:	beq	18c28 <__assert_fail@plt+0x7524>
   18d14:	ldr	r1, [pc, #556]	; 18f48 <__assert_fail@plt+0x7844>
   18d18:	mov	r0, r6
   18d1c:	bl	11320 <strcmp@plt>
   18d20:	cmp	r0, r8
   18d24:	beq	18c28 <__assert_fail@plt+0x7524>
   18d28:	ldr	r1, [pc, #540]	; 18f4c <__assert_fail@plt+0x7848>
   18d2c:	mov	r0, r6
   18d30:	bl	11320 <strcmp@plt>
   18d34:	cmp	r0, r8
   18d38:	beq	18c28 <__assert_fail@plt+0x7524>
   18d3c:	ldr	r1, [pc, #524]	; 18f50 <__assert_fail@plt+0x784c>
   18d40:	mov	r0, r6
   18d44:	bl	11320 <strcmp@plt>
   18d48:	cmp	r0, r8
   18d4c:	beq	18c28 <__assert_fail@plt+0x7524>
   18d50:	ldr	r1, [pc, #508]	; 18f54 <__assert_fail@plt+0x7850>
   18d54:	mov	r0, r6
   18d58:	bl	11320 <strcmp@plt>
   18d5c:	cmp	r0, r8
   18d60:	beq	18c28 <__assert_fail@plt+0x7524>
   18d64:	ldr	r1, [pc, #492]	; 18f58 <__assert_fail@plt+0x7854>
   18d68:	mov	r0, r6
   18d6c:	bl	11320 <strcmp@plt>
   18d70:	cmp	r0, r8
   18d74:	beq	18c28 <__assert_fail@plt+0x7524>
   18d78:	ldr	r1, [pc, #476]	; 18f5c <__assert_fail@plt+0x7858>
   18d7c:	mov	r0, r6
   18d80:	bl	11320 <strcmp@plt>
   18d84:	cmp	r0, r8
   18d88:	beq	18c28 <__assert_fail@plt+0x7524>
   18d8c:	ldr	r1, [pc, #460]	; 18f60 <__assert_fail@plt+0x785c>
   18d90:	mov	r0, r6
   18d94:	bl	11320 <strcmp@plt>
   18d98:	clz	r0, r0
   18d9c:	lsr	r0, r0, #5
   18da0:	b	18c2c <__assert_fail@plt+0x7528>
   18da4:	ldrb	r3, [r8]
   18da8:	cmp	r3, #47	; 0x2f
   18dac:	beq	1928c <__assert_fail@plt+0x7b88>
   18db0:	ldr	r1, [pc, #428]	; 18f64 <__assert_fail@plt+0x7860>
   18db4:	mov	r0, r6
   18db8:	bl	11320 <strcmp@plt>
   18dbc:	cmp	r0, #0
   18dc0:	beq	18c54 <__assert_fail@plt+0x7550>
   18dc4:	ldr	r1, [pc, #412]	; 18f68 <__assert_fail@plt+0x7864>
   18dc8:	mov	r0, r6
   18dcc:	bl	11320 <strcmp@plt>
   18dd0:	cmp	r0, #0
   18dd4:	beq	18c54 <__assert_fail@plt+0x7550>
   18dd8:	ldr	r1, [pc, #396]	; 18f6c <__assert_fail@plt+0x7868>
   18ddc:	mov	r0, r6
   18de0:	bl	11320 <strcmp@plt>
   18de4:	cmp	r0, #0
   18de8:	beq	18c54 <__assert_fail@plt+0x7550>
   18dec:	ldr	r1, [pc, #380]	; 18f70 <__assert_fail@plt+0x786c>
   18df0:	mov	r0, r6
   18df4:	bl	11320 <strcmp@plt>
   18df8:	cmp	r0, #0
   18dfc:	beq	18c54 <__assert_fail@plt+0x7550>
   18e00:	ldr	r1, [pc, #364]	; 18f74 <__assert_fail@plt+0x7870>
   18e04:	mov	r0, r6
   18e08:	bl	11320 <strcmp@plt>
   18e0c:	cmp	r0, #0
   18e10:	beq	18c54 <__assert_fail@plt+0x7550>
   18e14:	ldr	r1, [pc, #348]	; 18f78 <__assert_fail@plt+0x7874>
   18e18:	mov	r0, r6
   18e1c:	bl	11320 <strcmp@plt>
   18e20:	cmp	r0, #0
   18e24:	beq	18c54 <__assert_fail@plt+0x7550>
   18e28:	ldr	r1, [pc, #332]	; 18f7c <__assert_fail@plt+0x7878>
   18e2c:	mov	r0, r6
   18e30:	bl	11320 <strcmp@plt>
   18e34:	cmp	r0, #0
   18e38:	beq	18c54 <__assert_fail@plt+0x7550>
   18e3c:	ldr	r1, [pc, #316]	; 18f80 <__assert_fail@plt+0x787c>
   18e40:	mov	r0, r6
   18e44:	bl	11320 <strcmp@plt>
   18e48:	cmp	r0, #0
   18e4c:	beq	18c54 <__assert_fail@plt+0x7550>
   18e50:	mov	r0, r6
   18e54:	ldr	r1, [pc, #296]	; 18f84 <__assert_fail@plt+0x7880>
   18e58:	bl	11320 <strcmp@plt>
   18e5c:	cmp	r0, #0
   18e60:	beq	18c54 <__assert_fail@plt+0x7550>
   18e64:	mov	r1, r8
   18e68:	ldr	r0, [pc, #280]	; 18f88 <__assert_fail@plt+0x7884>
   18e6c:	bl	11320 <strcmp@plt>
   18e70:	clz	r3, r0
   18e74:	lsr	r3, r3, #5
   18e78:	b	18c58 <__assert_fail@plt+0x7554>
   18e7c:	bl	1156c <__errno_location@plt>
   18e80:	mov	r6, r0
   18e84:	mov	r0, r7
   18e88:	ldr	r7, [r6]
   18e8c:	bl	20958 <__assert_fail@plt+0xf254>
   18e90:	str	r7, [r6]
   18e94:	mov	r3, #0
   18e98:	str	r3, [sl]
   18e9c:	ldr	r4, [sp, #40]	; 0x28
   18ea0:	cmp	r4, r3
   18ea4:	beq	18eec <__assert_fail@plt+0x77e8>
   18ea8:	ldr	r0, [r4]
   18eac:	ldr	r5, [r4, #28]
   18eb0:	bl	15334 <__assert_fail@plt+0x3c30>
   18eb4:	ldr	r0, [r4, #4]
   18eb8:	bl	15334 <__assert_fail@plt+0x3c30>
   18ebc:	ldr	r0, [r4, #8]
   18ec0:	bl	15334 <__assert_fail@plt+0x3c30>
   18ec4:	ldrb	r3, [r4, #24]
   18ec8:	tst	r3, #4
   18ecc:	beq	18ed8 <__assert_fail@plt+0x77d4>
   18ed0:	ldr	r0, [r4, #12]
   18ed4:	bl	15334 <__assert_fail@plt+0x3c30>
   18ed8:	mov	r0, r4
   18edc:	bl	15334 <__assert_fail@plt+0x3c30>
   18ee0:	subs	r4, r5, #0
   18ee4:	str	r5, [sp, #40]	; 0x28
   18ee8:	bne	18ea8 <__assert_fail@plt+0x77a4>
   18eec:	mov	r0, #0
   18ef0:	str	r7, [r6]
   18ef4:	add	sp, sp, #68	; 0x44
   18ef8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18efc:	nop			; (mov r0, r0)
   18f00:			; <UNDEFINED> instruction: 0xfff00000	; IMB
   18f04:	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   18f08:	andeq	r2, r2, r8, lsl #23
   18f0c:	andeq	r2, r2, ip, ror #21
   18f10:	andeq	r2, r2, r4, lsl #22
   18f14:	andeq	r2, r2, r8, lsl fp
   18f18:	andeq	pc, pc, r0, lsl #30
   18f1c:			; <UNDEFINED> instruction: 0xfffff000
   18f20:	strdeq	r2, [r2], -ip
   18f24:	andeq	r2, r2, r0, lsl #24
   18f28:	andeq	r2, r2, ip, lsl #24
   18f2c:	andeq	r2, r2, ip, lsl fp
   18f30:	andeq	r2, r2, r4, lsr #22
   18f34:	andeq	r2, r2, ip, lsr #22
   18f38:	andeq	r2, r2, r4, lsr fp
   18f3c:	andeq	r2, r2, ip, lsr fp
   18f40:	andeq	r2, r2, r4, asr #22
   18f44:	andeq	r2, r2, ip, asr #22
   18f48:	andeq	r2, r2, r8, asr fp
   18f4c:	andeq	r2, r2, r0, ror #22
   18f50:	andeq	r2, r2, ip, ror #22
   18f54:	andeq	r2, r2, r4, ror fp
   18f58:	andeq	r2, r2, ip, ror fp
   18f5c:	andeq	r2, r2, r4, lsl #23
   18f60:	andeq	r2, r2, ip, lsl #23
   18f64:	andeq	r2, r2, ip, lsr #23
   18f68:			; <UNDEFINED> instruction: 0x00022bb4
   18f6c:			; <UNDEFINED> instruction: 0x00022bb8
   18f70:	andeq	r2, r2, r0, asr #23
   18f74:	andeq	r2, r2, ip, asr #23
   18f78:	ldrdeq	r2, [r2], -r4
   18f7c:	ldrdeq	r2, [r2], -ip
   18f80:	andeq	r2, r2, r4, ror #23
   18f84:	andeq	r2, r2, ip, ror #23
   18f88:	strdeq	r2, [r2], -r4
   18f8c:	muleq	r2, r4, fp
   18f90:	muleq	r2, ip, fp
   18f94:	andeq	r2, r2, r4, lsr #23
   18f98:	ldr	r1, [pc, #-128]	; 18f20 <__assert_fail@plt+0x781c>
   18f9c:	ldr	r0, [pc, #-128]	; 18f24 <__assert_fail@plt+0x7820>
   18fa0:	bl	11698 <setmntent@plt>
   18fa4:	subs	r5, r0, #0
   18fa8:	beq	19324 <__assert_fail@plt+0x7c20>
   18fac:	ldr	r8, [pc, #-140]	; 18f28 <__assert_fail@plt+0x7824>
   18fb0:	ldr	r7, [pc, #-140]	; 18f2c <__assert_fail@plt+0x7828>
   18fb4:	ldr	r9, [pc, #-140]	; 18f30 <__assert_fail@plt+0x782c>
   18fb8:	add	sl, sp, #40	; 0x28
   18fbc:	mov	r0, r5
   18fc0:	bl	114a0 <getmntent@plt>
   18fc4:	subs	r6, r0, #0
   18fc8:	beq	1926c <__assert_fail@plt+0x7b68>
   18fcc:	mov	r1, r8
   18fd0:	bl	11464 <hasmntopt@plt>
   18fd4:	mov	fp, r0
   18fd8:	mov	r0, #32
   18fdc:	bl	1dfe4 <__assert_fail@plt+0xc8e0>
   18fe0:	mov	r4, r0
   18fe4:	ldr	r0, [r6]
   18fe8:	bl	1e5f4 <__assert_fail@plt+0xcef0>
   18fec:	str	r0, [r4]
   18ff0:	ldr	r0, [r6, #4]
   18ff4:	bl	1e5f4 <__assert_fail@plt+0xcef0>
   18ff8:	mov	r3, #0
   18ffc:	stmib	r4, {r0, r3}
   19000:	ldr	r0, [r6, #8]
   19004:	bl	1e5f4 <__assert_fail@plt+0xcef0>
   19008:	ldrb	r3, [r4, #24]
   1900c:	mov	r1, r7
   19010:	orr	r3, r3, #4
   19014:	strb	r3, [r4, #24]
   19018:	str	r0, [r4, #12]
   1901c:	mov	r6, r0
   19020:	bl	11320 <strcmp@plt>
   19024:	cmp	r0, #0
   19028:	beq	1913c <__assert_fail@plt+0x7a38>
   1902c:	mov	r1, r9
   19030:	mov	r0, r6
   19034:	bl	11320 <strcmp@plt>
   19038:	cmp	r0, #0
   1903c:	beq	1913c <__assert_fail@plt+0x7a38>
   19040:	ldr	r1, [pc, #-276]	; 18f34 <__assert_fail@plt+0x7830>
   19044:	mov	r0, r6
   19048:	bl	11320 <strcmp@plt>
   1904c:	cmp	r0, #0
   19050:	beq	1913c <__assert_fail@plt+0x7a38>
   19054:	ldr	r1, [pc, #-292]	; 18f38 <__assert_fail@plt+0x7834>
   19058:	mov	r0, r6
   1905c:	bl	11320 <strcmp@plt>
   19060:	cmp	r0, #0
   19064:	beq	1913c <__assert_fail@plt+0x7a38>
   19068:	ldr	r1, [pc, #-308]	; 18f3c <__assert_fail@plt+0x7838>
   1906c:	mov	r0, r6
   19070:	bl	11320 <strcmp@plt>
   19074:	cmp	r0, #0
   19078:	beq	1913c <__assert_fail@plt+0x7a38>
   1907c:	ldr	r1, [pc, #-324]	; 18f40 <__assert_fail@plt+0x783c>
   19080:	mov	r0, r6
   19084:	bl	11320 <strcmp@plt>
   19088:	cmp	r0, #0
   1908c:	beq	1913c <__assert_fail@plt+0x7a38>
   19090:	ldr	r1, [pc, #-340]	; 18f44 <__assert_fail@plt+0x7840>
   19094:	mov	r0, r6
   19098:	bl	11320 <strcmp@plt>
   1909c:	cmp	r0, #0
   190a0:	beq	1913c <__assert_fail@plt+0x7a38>
   190a4:	ldr	r1, [pc, #-356]	; 18f48 <__assert_fail@plt+0x7844>
   190a8:	mov	r0, r6
   190ac:	bl	11320 <strcmp@plt>
   190b0:	cmp	r0, #0
   190b4:	beq	1913c <__assert_fail@plt+0x7a38>
   190b8:	ldr	r1, [pc, #-372]	; 18f4c <__assert_fail@plt+0x7848>
   190bc:	mov	r0, r6
   190c0:	bl	11320 <strcmp@plt>
   190c4:	cmp	r0, #0
   190c8:	beq	1913c <__assert_fail@plt+0x7a38>
   190cc:	ldr	r1, [pc, #-388]	; 18f50 <__assert_fail@plt+0x784c>
   190d0:	mov	r0, r6
   190d4:	bl	11320 <strcmp@plt>
   190d8:	cmp	r0, #0
   190dc:	beq	1913c <__assert_fail@plt+0x7a38>
   190e0:	ldr	r1, [pc, #-404]	; 18f54 <__assert_fail@plt+0x7850>
   190e4:	mov	r0, r6
   190e8:	bl	11320 <strcmp@plt>
   190ec:	cmp	r0, #0
   190f0:	beq	1913c <__assert_fail@plt+0x7a38>
   190f4:	ldr	r1, [pc, #-420]	; 18f58 <__assert_fail@plt+0x7854>
   190f8:	mov	r0, r6
   190fc:	bl	11320 <strcmp@plt>
   19100:	cmp	r0, #0
   19104:	beq	1913c <__assert_fail@plt+0x7a38>
   19108:	ldr	r1, [pc, #-436]	; 18f5c <__assert_fail@plt+0x7858>
   1910c:	mov	r0, r6
   19110:	bl	11320 <strcmp@plt>
   19114:	cmp	r0, #0
   19118:	beq	1913c <__assert_fail@plt+0x7a38>
   1911c:	ldr	r1, [pc, #-452]	; 18f60 <__assert_fail@plt+0x785c>
   19120:	mov	r0, r6
   19124:	bl	11320 <strcmp@plt>
   19128:	cmp	r0, #0
   1912c:	cmpeq	fp, #0
   19130:	moveq	r0, #1
   19134:	movne	r0, #0
   19138:	b	19140 <__assert_fail@plt+0x7a3c>
   1913c:	mov	r0, #1
   19140:	ldrb	r3, [r4, #24]
   19144:	ldr	fp, [r4]
   19148:	mov	r1, #58	; 0x3a
   1914c:	bic	r3, r3, #1
   19150:	orr	r3, r0, r3
   19154:	strb	r3, [r4, #24]
   19158:	mov	r0, fp
   1915c:	bl	11548 <strchr@plt>
   19160:	cmp	r0, #0
   19164:	beq	19194 <__assert_fail@plt+0x7a90>
   19168:	mov	r1, #1
   1916c:	ldrb	r0, [r4, #24]
   19170:	mvn	r2, #0
   19174:	mvn	r3, #0
   19178:	bic	r0, r0, #2
   1917c:	orr	r0, r0, r1, lsl #1
   19180:	strb	r0, [r4, #24]
   19184:	strd	r2, [r4, #16]
   19188:	str	r4, [sl]
   1918c:	add	sl, r4, #28
   19190:	b	18fbc <__assert_fail@plt+0x78b8>
   19194:	ldrb	r3, [fp]
   19198:	cmp	r3, #47	; 0x2f
   1919c:	beq	192d8 <__assert_fail@plt+0x7bd4>
   191a0:	ldr	r1, [pc, #-580]	; 18f64 <__assert_fail@plt+0x7860>
   191a4:	mov	r0, r6
   191a8:	bl	11320 <strcmp@plt>
   191ac:	cmp	r0, #0
   191b0:	beq	19168 <__assert_fail@plt+0x7a64>
   191b4:	ldr	r1, [pc, #-596]	; 18f68 <__assert_fail@plt+0x7864>
   191b8:	mov	r0, r6
   191bc:	bl	11320 <strcmp@plt>
   191c0:	cmp	r0, #0
   191c4:	beq	19168 <__assert_fail@plt+0x7a64>
   191c8:	ldr	r1, [pc, #-612]	; 18f6c <__assert_fail@plt+0x7868>
   191cc:	mov	r0, r6
   191d0:	bl	11320 <strcmp@plt>
   191d4:	cmp	r0, #0
   191d8:	beq	19168 <__assert_fail@plt+0x7a64>
   191dc:	ldr	r1, [pc, #-628]	; 18f70 <__assert_fail@plt+0x786c>
   191e0:	mov	r0, r6
   191e4:	bl	11320 <strcmp@plt>
   191e8:	cmp	r0, #0
   191ec:	beq	19168 <__assert_fail@plt+0x7a64>
   191f0:	ldr	r1, [pc, #-644]	; 18f74 <__assert_fail@plt+0x7870>
   191f4:	mov	r0, r6
   191f8:	bl	11320 <strcmp@plt>
   191fc:	cmp	r0, #0
   19200:	beq	19168 <__assert_fail@plt+0x7a64>
   19204:	ldr	r1, [pc, #-660]	; 18f78 <__assert_fail@plt+0x7874>
   19208:	mov	r0, r6
   1920c:	bl	11320 <strcmp@plt>
   19210:	cmp	r0, #0
   19214:	beq	19168 <__assert_fail@plt+0x7a64>
   19218:	ldr	r1, [pc, #-676]	; 18f7c <__assert_fail@plt+0x7878>
   1921c:	mov	r0, r6
   19220:	bl	11320 <strcmp@plt>
   19224:	cmp	r0, #0
   19228:	beq	19168 <__assert_fail@plt+0x7a64>
   1922c:	ldr	r1, [pc, #-692]	; 18f80 <__assert_fail@plt+0x787c>
   19230:	mov	r0, r6
   19234:	bl	11320 <strcmp@plt>
   19238:	cmp	r0, #0
   1923c:	beq	19168 <__assert_fail@plt+0x7a64>
   19240:	mov	r0, r6
   19244:	ldr	r1, [pc, #-712]	; 18f84 <__assert_fail@plt+0x7880>
   19248:	bl	11320 <strcmp@plt>
   1924c:	cmp	r0, #0
   19250:	beq	19168 <__assert_fail@plt+0x7a64>
   19254:	mov	r1, fp
   19258:	ldr	r0, [pc, #-728]	; 18f88 <__assert_fail@plt+0x7884>
   1925c:	bl	11320 <strcmp@plt>
   19260:	clz	r1, r0
   19264:	lsr	r1, r1, #5
   19268:	b	1916c <__assert_fail@plt+0x7a68>
   1926c:	mov	r0, r5
   19270:	bl	115f0 <endmntent@plt>
   19274:	cmp	r0, #0
   19278:	bne	18c9c <__assert_fail@plt+0x7598>
   1927c:	bl	1156c <__errno_location@plt>
   19280:	mov	r6, r0
   19284:	ldr	r7, [r0]
   19288:	b	18e94 <__assert_fail@plt+0x7790>
   1928c:	ldrb	r3, [r8, #1]
   19290:	cmp	r3, #47	; 0x2f
   19294:	bne	18db0 <__assert_fail@plt+0x76ac>
   19298:	ldr	r1, [pc, #-788]	; 18f8c <__assert_fail@plt+0x7888>
   1929c:	mov	r0, r6
   192a0:	bl	11320 <strcmp@plt>
   192a4:	cmp	r0, #0
   192a8:	beq	18c54 <__assert_fail@plt+0x7550>
   192ac:	ldr	r1, [pc, #-804]	; 18f90 <__assert_fail@plt+0x788c>
   192b0:	mov	r0, r6
   192b4:	bl	11320 <strcmp@plt>
   192b8:	cmp	r0, #0
   192bc:	beq	18c54 <__assert_fail@plt+0x7550>
   192c0:	ldr	r1, [pc, #-820]	; 18f94 <__assert_fail@plt+0x7890>
   192c4:	mov	r0, r6
   192c8:	bl	11320 <strcmp@plt>
   192cc:	cmp	r0, #0
   192d0:	beq	18c54 <__assert_fail@plt+0x7550>
   192d4:	b	18db0 <__assert_fail@plt+0x76ac>
   192d8:	ldrb	r3, [fp, #1]
   192dc:	cmp	r3, #47	; 0x2f
   192e0:	bne	191a0 <__assert_fail@plt+0x7a9c>
   192e4:	ldr	r1, [pc, #-864]	; 18f8c <__assert_fail@plt+0x7888>
   192e8:	mov	r0, r6
   192ec:	bl	11320 <strcmp@plt>
   192f0:	cmp	r0, #0
   192f4:	beq	19168 <__assert_fail@plt+0x7a64>
   192f8:	ldr	r1, [pc, #-880]	; 18f90 <__assert_fail@plt+0x788c>
   192fc:	mov	r0, r6
   19300:	bl	11320 <strcmp@plt>
   19304:	cmp	r0, #0
   19308:	beq	19168 <__assert_fail@plt+0x7a64>
   1930c:	ldr	r1, [pc, #-896]	; 18f94 <__assert_fail@plt+0x7890>
   19310:	mov	r0, r6
   19314:	bl	11320 <strcmp@plt>
   19318:	cmp	r0, #0
   1931c:	beq	19168 <__assert_fail@plt+0x7a64>
   19320:	b	191a0 <__assert_fail@plt+0x7a9c>
   19324:	mov	r0, r5
   19328:	b	18ca8 <__assert_fail@plt+0x75a4>
   1932c:	push	{r4, lr}
   19330:	mov	r4, r0
   19334:	ldr	r0, [r0]
   19338:	bl	15334 <__assert_fail@plt+0x3c30>
   1933c:	ldr	r0, [r4, #4]
   19340:	bl	15334 <__assert_fail@plt+0x3c30>
   19344:	ldr	r0, [r4, #8]
   19348:	bl	15334 <__assert_fail@plt+0x3c30>
   1934c:	ldrb	r3, [r4, #24]
   19350:	tst	r3, #4
   19354:	beq	19360 <__assert_fail@plt+0x7c5c>
   19358:	ldr	r0, [r4, #12]
   1935c:	bl	15334 <__assert_fail@plt+0x3c30>
   19360:	mov	r0, r4
   19364:	pop	{r4, lr}
   19368:	b	15334 <__assert_fail@plt+0x3c30>
   1936c:	push	{r4, r5, r6, lr}
   19370:	subs	r4, r0, #0
   19374:	beq	193e8 <__assert_fail@plt+0x7ce4>
   19378:	mov	r1, #47	; 0x2f
   1937c:	bl	1162c <strrchr@plt>
   19380:	subs	r5, r0, #0
   19384:	beq	193d4 <__assert_fail@plt+0x7cd0>
   19388:	add	r6, r5, #1
   1938c:	sub	r3, r6, r4
   19390:	cmp	r3, #6
   19394:	ble	193d4 <__assert_fail@plt+0x7cd0>
   19398:	mov	r2, #7
   1939c:	ldr	r1, [pc, #96]	; 19404 <__assert_fail@plt+0x7d00>
   193a0:	sub	r0, r5, #6
   193a4:	bl	116d4 <strncmp@plt>
   193a8:	cmp	r0, #0
   193ac:	bne	193d4 <__assert_fail@plt+0x7cd0>
   193b0:	mov	r2, #3
   193b4:	ldr	r1, [pc, #76]	; 19408 <__assert_fail@plt+0x7d04>
   193b8:	mov	r0, r6
   193bc:	bl	116d4 <strncmp@plt>
   193c0:	cmp	r0, #0
   193c4:	movne	r4, r6
   193c8:	ldreq	r3, [pc, #60]	; 1940c <__assert_fail@plt+0x7d08>
   193cc:	addeq	r4, r5, #4
   193d0:	streq	r4, [r3]
   193d4:	ldr	r2, [pc, #52]	; 19410 <__assert_fail@plt+0x7d0c>
   193d8:	ldr	r3, [pc, #52]	; 19414 <__assert_fail@plt+0x7d10>
   193dc:	str	r4, [r2]
   193e0:	str	r4, [r3]
   193e4:	pop	{r4, r5, r6, pc}
   193e8:	ldr	r3, [pc, #40]	; 19418 <__assert_fail@plt+0x7d14>
   193ec:	mov	r2, #55	; 0x37
   193f0:	mov	r1, #1
   193f4:	ldr	r3, [r3]
   193f8:	ldr	r0, [pc, #28]	; 1941c <__assert_fail@plt+0x7d18>
   193fc:	bl	11440 <fwrite@plt>
   19400:	bl	116e0 <abort@plt>
   19404:	andeq	r2, r2, ip, asr #24
   19408:	andeq	r2, r2, r4, asr ip
   1940c:	andeq	r4, r3, r0, lsr #6
   19410:	andeq	r4, r3, r4, asr #7
   19414:	andeq	r4, r3, r4, lsr #6
   19418:	andeq	r4, r3, r0, lsr r3
   1941c:	andeq	r2, r2, r4, lsl ip
   19420:	push	{r4, r5, r6, lr}
   19424:	mov	r4, r0
   19428:	mov	r5, r1
   1942c:	bl	20bc8 <__assert_fail@plt+0xf4c4>
   19430:	ldrb	r3, [r0]
   19434:	bic	r3, r3, #32
   19438:	cmp	r3, #85	; 0x55
   1943c:	bne	1949c <__assert_fail@plt+0x7d98>
   19440:	ldrb	r3, [r0, #1]
   19444:	bic	r3, r3, #32
   19448:	cmp	r3, #84	; 0x54
   1944c:	bne	194d8 <__assert_fail@plt+0x7dd4>
   19450:	ldrb	r3, [r0, #2]
   19454:	bic	r3, r3, #32
   19458:	cmp	r3, #70	; 0x46
   1945c:	bne	194d8 <__assert_fail@plt+0x7dd4>
   19460:	ldrb	r3, [r0, #3]
   19464:	cmp	r3, #45	; 0x2d
   19468:	bne	194d8 <__assert_fail@plt+0x7dd4>
   1946c:	ldrb	r3, [r0, #4]
   19470:	cmp	r3, #56	; 0x38
   19474:	bne	194d8 <__assert_fail@plt+0x7dd4>
   19478:	ldrb	r3, [r0, #5]
   1947c:	cmp	r3, #0
   19480:	bne	194d8 <__assert_fail@plt+0x7dd4>
   19484:	ldrb	r2, [r4]
   19488:	ldr	r3, [pc, #152]	; 19528 <__assert_fail@plt+0x7e24>
   1948c:	ldr	r0, [pc, #152]	; 1952c <__assert_fail@plt+0x7e28>
   19490:	cmp	r2, #96	; 0x60
   19494:	movne	r0, r3
   19498:	pop	{r4, r5, r6, pc}
   1949c:	cmp	r3, #71	; 0x47
   194a0:	bne	194d8 <__assert_fail@plt+0x7dd4>
   194a4:	ldrb	r3, [r0, #1]
   194a8:	bic	r3, r3, #32
   194ac:	cmp	r3, #66	; 0x42
   194b0:	bne	194d8 <__assert_fail@plt+0x7dd4>
   194b4:	ldrb	r3, [r0, #2]
   194b8:	cmp	r3, #49	; 0x31
   194bc:	bne	194d8 <__assert_fail@plt+0x7dd4>
   194c0:	ldrb	r3, [r0, #3]
   194c4:	cmp	r3, #56	; 0x38
   194c8:	bne	194d8 <__assert_fail@plt+0x7dd4>
   194cc:	ldrb	r3, [r0, #4]
   194d0:	cmp	r3, #48	; 0x30
   194d4:	beq	194ec <__assert_fail@plt+0x7de8>
   194d8:	ldr	r3, [pc, #80]	; 19530 <__assert_fail@plt+0x7e2c>
   194dc:	cmp	r5, #9
   194e0:	ldr	r0, [pc, #76]	; 19534 <__assert_fail@plt+0x7e30>
   194e4:	movne	r0, r3
   194e8:	pop	{r4, r5, r6, pc}
   194ec:	ldrb	r3, [r0, #5]
   194f0:	cmp	r3, #51	; 0x33
   194f4:	bne	194d8 <__assert_fail@plt+0x7dd4>
   194f8:	ldrb	r3, [r0, #6]
   194fc:	cmp	r3, #48	; 0x30
   19500:	bne	194d8 <__assert_fail@plt+0x7dd4>
   19504:	ldrb	r3, [r0, #7]
   19508:	cmp	r3, #0
   1950c:	bne	194d8 <__assert_fail@plt+0x7dd4>
   19510:	ldrb	r2, [r4]
   19514:	ldr	r3, [pc, #28]	; 19538 <__assert_fail@plt+0x7e34>
   19518:	ldr	r0, [pc, #28]	; 1953c <__assert_fail@plt+0x7e38>
   1951c:	cmp	r2, #96	; 0x60
   19520:	movne	r0, r3
   19524:	pop	{r4, r5, r6, pc}
   19528:			; <UNDEFINED> instruction: 0x00022cb0
   1952c:	andeq	r2, r2, ip, lsr #25
   19530:			; <UNDEFINED> instruction: 0x00022cbc
   19534:	andeq	r1, r2, ip, asr #21
   19538:			; <UNDEFINED> instruction: 0x00022cb8
   1953c:			; <UNDEFINED> instruction: 0x00022cb4
   19540:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19544:	sub	sp, sp, #140	; 0x8c
   19548:	mov	r9, r1
   1954c:	str	r3, [sp, #24]
   19550:	mov	r3, #1
   19554:	mov	sl, r0
   19558:	str	r2, [sp, #44]	; 0x2c
   1955c:	str	r3, [sp, #28]
   19560:	bl	11458 <__ctype_get_mb_cur_max@plt>
   19564:	ldr	r3, [sp, #180]	; 0xb4
   19568:	mov	fp, r9
   1956c:	mov	r9, sl
   19570:	lsr	r3, r3, #1
   19574:	and	r3, r3, #1
   19578:	str	r3, [sp, #40]	; 0x28
   1957c:	ldr	r3, [sp, #180]	; 0xb4
   19580:	mov	r2, #0
   19584:	and	r3, r3, #4
   19588:	str	r3, [sp, #100]	; 0x64
   1958c:	ldr	r3, [sp, #180]	; 0xb4
   19590:	str	r2, [sp, #76]	; 0x4c
   19594:	and	r3, r3, #1
   19598:	str	r3, [sp, #96]	; 0x60
   1959c:	str	r2, [sp, #36]	; 0x24
   195a0:	str	r2, [sp, #56]	; 0x38
   195a4:	str	r2, [sp, #68]	; 0x44
   195a8:	str	r2, [sp, #72]	; 0x48
   195ac:	str	r2, [sp, #84]	; 0x54
   195b0:	str	r0, [sp, #80]	; 0x50
   195b4:	ldr	r3, [sp, #176]	; 0xb0
   195b8:	cmp	r3, #10
   195bc:	ldrls	pc, [pc, r3, lsl #2]
   195c0:	b	1a798 <__assert_fail@plt+0x9094>
   195c4:	strdeq	r9, [r1], -r0
   195c8:	andeq	r9, r1, r0, lsl r9
   195cc:	andeq	r9, r1, r8, ror #20
   195d0:	andeq	r9, r1, r4, asr #18
   195d4:			; <UNDEFINED> instruction: 0x00019abc
   195d8:	muleq	r1, ip, sl
   195dc:	andeq	r9, r1, r4, ror #18
   195e0:	andeq	r9, r1, r8, lsl #19
   195e4:			; <UNDEFINED> instruction: 0x000199b0
   195e8:			; <UNDEFINED> instruction: 0x000199b0
   195ec:			; <UNDEFINED> instruction: 0x000199b0
   195f0:	mov	r3, #0
   195f4:	ldr	r1, [sp, #56]	; 0x38
   195f8:	ldr	r2, [sp, #176]	; 0xb0
   195fc:	ldr	lr, [sp, #176]	; 0xb0
   19600:	mov	r8, r3
   19604:	mov	ip, r3
   19608:	str	r3, [sp, #40]	; 0x28
   1960c:	mov	r3, r1
   19610:	cmp	r2, #2
   19614:	moveq	r3, #0
   19618:	andne	r3, r3, #1
   1961c:	mov	r0, r3
   19620:	str	r3, [sp, #92]	; 0x5c
   19624:	ldr	r3, [sp, #68]	; 0x44
   19628:	sub	lr, lr, #2
   1962c:	adds	r2, r3, #0
   19630:	movne	r2, #1
   19634:	and	r3, r1, ip
   19638:	and	r3, r2, r3
   1963c:	clz	lr, lr
   19640:	str	r3, [sp, #88]	; 0x58
   19644:	lsr	lr, lr, #5
   19648:	mov	r3, ip
   1964c:	and	r3, r3, lr
   19650:	mov	sl, #0
   19654:	and	r0, r2, r0
   19658:	str	r3, [sp, #64]	; 0x40
   1965c:	eor	r3, r1, #1
   19660:	str	lr, [sp, #52]	; 0x34
   19664:	str	r0, [sp, #48]	; 0x30
   19668:	str	r3, [sp, #60]	; 0x3c
   1966c:	ldr	r3, [sp, #24]
   19670:	cmn	r3, #1
   19674:	beq	19ba4 <__assert_fail@plt+0x84a0>
   19678:	subs	r7, r3, sl
   1967c:	movne	r7, #1
   19680:	cmp	r7, #0
   19684:	beq	19bbc <__assert_fail@plt+0x84b8>
   19688:	ldr	r3, [sp, #48]	; 0x30
   1968c:	cmp	r3, #0
   19690:	beq	19f28 <__assert_fail@plt+0x8824>
   19694:	ldr	r2, [sp, #68]	; 0x44
   19698:	ldr	r1, [sp, #24]
   1969c:	cmp	r2, #1
   196a0:	mov	r3, r2
   196a4:	movls	r3, #0
   196a8:	movhi	r3, #1
   196ac:	cmn	r1, #1
   196b0:	movne	r3, #0
   196b4:	cmp	r3, #0
   196b8:	add	r4, sl, r2
   196bc:	beq	196cc <__assert_fail@plt+0x7fc8>
   196c0:	ldr	r0, [sp, #44]	; 0x2c
   196c4:	bl	1153c <strlen@plt>
   196c8:	str	r0, [sp, #24]
   196cc:	ldr	r3, [sp, #24]
   196d0:	cmp	r3, r4
   196d4:	ldr	r3, [sp, #44]	; 0x2c
   196d8:	add	r5, r3, sl
   196dc:	bcc	19f30 <__assert_fail@plt+0x882c>
   196e0:	mov	r0, r5
   196e4:	ldr	r2, [sp, #68]	; 0x44
   196e8:	ldr	r1, [sp, #72]	; 0x48
   196ec:	bl	11398 <memcmp@plt>
   196f0:	cmp	r0, #0
   196f4:	bne	19f30 <__assert_fail@plt+0x882c>
   196f8:	ldr	r3, [sp, #40]	; 0x28
   196fc:	cmp	r3, #0
   19700:	bne	1a8ec <__assert_fail@plt+0x91e8>
   19704:	ldrb	r4, [r5]
   19708:	cmp	r4, #126	; 0x7e
   1970c:	ldrls	pc, [pc, r4, lsl #2]
   19710:	b	1a828 <__assert_fail@plt+0x9124>
   19714:	andeq	r9, r1, r8, ror #27
   19718:	andeq	sl, r1, r8, lsr #16
   1971c:	andeq	sl, r1, r8, lsr #16
   19720:	andeq	sl, r1, r8, lsr #16
   19724:	andeq	sl, r1, r8, lsr #16
   19728:	andeq	sl, r1, r8, lsr #16
   1972c:	andeq	sl, r1, r8, lsr #16
   19730:	ldrdeq	r9, [r1], -r4
   19734:	andeq	r9, r1, r0, asr #27
   19738:	muleq	r1, ip, sp
   1973c:	andeq	r9, r1, ip, ror sp
   19740:	andeq	r9, r1, ip, lsr #27
   19744:	andeq	r9, r1, r4, ror #25
   19748:	andeq	r9, r1, r8, lsl pc
   1974c:	andeq	sl, r1, r8, lsr #16
   19750:	andeq	sl, r1, r8, lsr #16
   19754:	andeq	sl, r1, r8, lsr #16
   19758:	andeq	sl, r1, r8, lsr #16
   1975c:	andeq	sl, r1, r8, lsr #16
   19760:	andeq	sl, r1, r8, lsr #16
   19764:	andeq	sl, r1, r8, lsr #16
   19768:	andeq	sl, r1, r8, lsr #16
   1976c:	andeq	sl, r1, r8, lsr #16
   19770:	andeq	sl, r1, r8, lsr #16
   19774:	andeq	sl, r1, r8, lsr #16
   19778:	andeq	sl, r1, r8, lsr #16
   1977c:	andeq	sl, r1, r8, lsr #16
   19780:	andeq	sl, r1, r8, lsr #16
   19784:	andeq	sl, r1, r8, lsr #16
   19788:	andeq	sl, r1, r8, lsr #16
   1978c:	andeq	sl, r1, r8, lsr #16
   19790:	andeq	sl, r1, r8, lsr #16
   19794:	andeq	r9, r1, r8, lsl #30
   19798:	andeq	r9, r1, r8, ror #29
   1979c:	andeq	r9, r1, r8, ror #29
   197a0:	andeq	r9, r1, r8, asr #29
   197a4:	andeq	r9, r1, r8, ror #29
   197a8:	ldrdeq	r9, [r1], -r4
   197ac:	andeq	r9, r1, r8, ror #29
   197b0:			; <UNDEFINED> instruction: 0x00019cb0
   197b4:	andeq	r9, r1, r8, ror #29
   197b8:	andeq	r9, r1, r8, ror #29
   197bc:	andeq	r9, r1, r8, ror #29
   197c0:	ldrdeq	r9, [r1], -r4
   197c4:	ldrdeq	r9, [r1], -r4
   197c8:	ldrdeq	r9, [r1], -r4
   197cc:	ldrdeq	r9, [r1], -r4
   197d0:	ldrdeq	r9, [r1], -r4
   197d4:	ldrdeq	r9, [r1], -r4
   197d8:	ldrdeq	r9, [r1], -r4
   197dc:	ldrdeq	r9, [r1], -r4
   197e0:	ldrdeq	r9, [r1], -r4
   197e4:	ldrdeq	r9, [r1], -r4
   197e8:	ldrdeq	r9, [r1], -r4
   197ec:	ldrdeq	r9, [r1], -r4
   197f0:	ldrdeq	r9, [r1], -r4
   197f4:	ldrdeq	r9, [r1], -r4
   197f8:	ldrdeq	r9, [r1], -r4
   197fc:	ldrdeq	r9, [r1], -r4
   19800:	andeq	r9, r1, r8, ror #29
   19804:	andeq	r9, r1, r8, ror #29
   19808:	andeq	r9, r1, r8, ror #29
   1980c:	andeq	r9, r1, r8, ror #29
   19810:	andeq	r9, r1, r0, ror #24
   19814:	andeq	sl, r1, r8, lsr #16
   19818:	ldrdeq	r9, [r1], -r4
   1981c:	ldrdeq	r9, [r1], -r4
   19820:	ldrdeq	r9, [r1], -r4
   19824:	ldrdeq	r9, [r1], -r4
   19828:	ldrdeq	r9, [r1], -r4
   1982c:	ldrdeq	r9, [r1], -r4
   19830:	ldrdeq	r9, [r1], -r4
   19834:	ldrdeq	r9, [r1], -r4
   19838:	ldrdeq	r9, [r1], -r4
   1983c:	ldrdeq	r9, [r1], -r4
   19840:	ldrdeq	r9, [r1], -r4
   19844:	ldrdeq	r9, [r1], -r4
   19848:	ldrdeq	r9, [r1], -r4
   1984c:	ldrdeq	r9, [r1], -r4
   19850:	ldrdeq	r9, [r1], -r4
   19854:	ldrdeq	r9, [r1], -r4
   19858:	ldrdeq	r9, [r1], -r4
   1985c:	ldrdeq	r9, [r1], -r4
   19860:	ldrdeq	r9, [r1], -r4
   19864:	ldrdeq	r9, [r1], -r4
   19868:	ldrdeq	r9, [r1], -r4
   1986c:	ldrdeq	r9, [r1], -r4
   19870:	ldrdeq	r9, [r1], -r4
   19874:	ldrdeq	r9, [r1], -r4
   19878:	ldrdeq	r9, [r1], -r4
   1987c:	ldrdeq	r9, [r1], -r4
   19880:	andeq	r9, r1, r8, ror #29
   19884:	andeq	r9, r1, ip, lsr #24
   19888:	ldrdeq	r9, [r1], -r4
   1988c:	andeq	r9, r1, r8, ror #29
   19890:	ldrdeq	r9, [r1], -r4
   19894:	andeq	r9, r1, r8, ror #29
   19898:	ldrdeq	r9, [r1], -r4
   1989c:	ldrdeq	r9, [r1], -r4
   198a0:	ldrdeq	r9, [r1], -r4
   198a4:	ldrdeq	r9, [r1], -r4
   198a8:	ldrdeq	r9, [r1], -r4
   198ac:	ldrdeq	r9, [r1], -r4
   198b0:	ldrdeq	r9, [r1], -r4
   198b4:	ldrdeq	r9, [r1], -r4
   198b8:	ldrdeq	r9, [r1], -r4
   198bc:	ldrdeq	r9, [r1], -r4
   198c0:	ldrdeq	r9, [r1], -r4
   198c4:	ldrdeq	r9, [r1], -r4
   198c8:	ldrdeq	r9, [r1], -r4
   198cc:	ldrdeq	r9, [r1], -r4
   198d0:	ldrdeq	r9, [r1], -r4
   198d4:	ldrdeq	r9, [r1], -r4
   198d8:	ldrdeq	r9, [r1], -r4
   198dc:	ldrdeq	r9, [r1], -r4
   198e0:	ldrdeq	r9, [r1], -r4
   198e4:	ldrdeq	r9, [r1], -r4
   198e8:	ldrdeq	r9, [r1], -r4
   198ec:	ldrdeq	r9, [r1], -r4
   198f0:	ldrdeq	r9, [r1], -r4
   198f4:	ldrdeq	r9, [r1], -r4
   198f8:	ldrdeq	r9, [r1], -r4
   198fc:	ldrdeq	r9, [r1], -r4
   19900:	andeq	r9, r1, r4, ror #21
   19904:	andeq	r9, r1, r8, ror #29
   19908:	andeq	r9, r1, r4, ror #21
   1990c:	andeq	r9, r1, r8, asr #29
   19910:	mov	r3, #1
   19914:	str	r3, [sp, #40]	; 0x28
   19918:	str	r3, [sp, #68]	; 0x44
   1991c:	mov	r8, #0
   19920:	ldr	r3, [pc, #4056]	; 1a900 <__assert_fail@plt+0x91fc>
   19924:	str	r3, [sp, #72]	; 0x48
   19928:	mov	r3, #2
   1992c:	str	r3, [sp, #176]	; 0xb0
   19930:	ldr	r1, [sp, #56]	; 0x38
   19934:	mov	r2, r3
   19938:	ldr	ip, [sp, #40]	; 0x28
   1993c:	mov	lr, r3
   19940:	b	1960c <__assert_fail@plt+0x7f08>
   19944:	mov	r3, #1
   19948:	str	r3, [sp, #56]	; 0x38
   1994c:	str	r3, [sp, #68]	; 0x44
   19950:	str	r3, [sp, #40]	; 0x28
   19954:	ldr	r3, [pc, #4004]	; 1a900 <__assert_fail@plt+0x91fc>
   19958:	mov	r8, #0
   1995c:	str	r3, [sp, #72]	; 0x48
   19960:	b	19928 <__assert_fail@plt+0x8224>
   19964:	mov	r3, #1
   19968:	str	r3, [sp, #56]	; 0x38
   1996c:	str	r3, [sp, #68]	; 0x44
   19970:	str	r3, [sp, #40]	; 0x28
   19974:	ldr	r3, [pc, #3976]	; 1a904 <__assert_fail@plt+0x9200>
   19978:	mov	r8, #0
   1997c:	str	r3, [sp, #72]	; 0x48
   19980:	mov	r3, #5
   19984:	b	1992c <__assert_fail@plt+0x8228>
   19988:	mov	r3, #0
   1998c:	str	r3, [sp, #40]	; 0x28
   19990:	mov	r3, #1
   19994:	str	r3, [sp, #56]	; 0x38
   19998:	mov	r8, #0
   1999c:	mov	r1, r3
   199a0:	ldr	r2, [sp, #176]	; 0xb0
   199a4:	ldr	ip, [sp, #40]	; 0x28
   199a8:	ldr	lr, [sp, #176]	; 0xb0
   199ac:	b	1960c <__assert_fail@plt+0x7f08>
   199b0:	ldr	r3, [sp, #176]	; 0xb0
   199b4:	cmp	r3, #10
   199b8:	beq	199fc <__assert_fail@plt+0x82f8>
   199bc:	mov	r2, #5
   199c0:	ldr	r1, [pc, #3904]	; 1a908 <__assert_fail@plt+0x9204>
   199c4:	mov	r0, #0
   199c8:	bl	113bc <dcgettext@plt>
   199cc:	ldr	r2, [pc, #3892]	; 1a908 <__assert_fail@plt+0x9204>
   199d0:	cmp	r0, r2
   199d4:	str	r0, [sp, #188]	; 0xbc
   199d8:	beq	1aa94 <__assert_fail@plt+0x9390>
   199dc:	mov	r2, #5
   199e0:	ldr	r1, [pc, #3864]	; 1a900 <__assert_fail@plt+0x91fc>
   199e4:	mov	r0, #0
   199e8:	bl	113bc <dcgettext@plt>
   199ec:	ldr	r2, [pc, #3852]	; 1a900 <__assert_fail@plt+0x91fc>
   199f0:	cmp	r0, r2
   199f4:	str	r0, [sp, #192]	; 0xc0
   199f8:	beq	1aa84 <__assert_fail@plt+0x9380>
   199fc:	ldr	r8, [sp, #40]	; 0x28
   19a00:	cmp	r8, #0
   19a04:	movne	r8, #0
   19a08:	bne	19a38 <__assert_fail@plt+0x8334>
   19a0c:	ldr	r3, [sp, #188]	; 0xbc
   19a10:	ldrb	r3, [r3]
   19a14:	cmp	r3, #0
   19a18:	beq	19a38 <__assert_fail@plt+0x8334>
   19a1c:	ldr	r2, [sp, #188]	; 0xbc
   19a20:	cmp	fp, r8
   19a24:	strbhi	r3, [r9, r8]
   19a28:	ldrb	r3, [r2, #1]!
   19a2c:	add	r8, r8, #1
   19a30:	cmp	r3, #0
   19a34:	bne	19a20 <__assert_fail@plt+0x831c>
   19a38:	ldr	r0, [sp, #192]	; 0xc0
   19a3c:	bl	1153c <strlen@plt>
   19a40:	ldr	r3, [sp, #192]	; 0xc0
   19a44:	ldr	r2, [sp, #176]	; 0xb0
   19a48:	str	r3, [sp, #72]	; 0x48
   19a4c:	mov	r3, #1
   19a50:	str	r3, [sp, #56]	; 0x38
   19a54:	mov	r1, r3
   19a58:	ldr	ip, [sp, #40]	; 0x28
   19a5c:	ldr	lr, [sp, #176]	; 0xb0
   19a60:	str	r0, [sp, #68]	; 0x44
   19a64:	b	1960c <__assert_fail@plt+0x7f08>
   19a68:	ldr	r3, [sp, #40]	; 0x28
   19a6c:	cmp	r3, #0
   19a70:	beq	1a718 <__assert_fail@plt+0x9014>
   19a74:	mov	r3, #1
   19a78:	str	r3, [sp, #68]	; 0x44
   19a7c:	ldr	r3, [pc, #3708]	; 1a900 <__assert_fail@plt+0x91fc>
   19a80:	str	r3, [sp, #72]	; 0x48
   19a84:	mov	r8, #0
   19a88:	ldr	r1, [sp, #56]	; 0x38
   19a8c:	ldr	r2, [sp, #176]	; 0xb0
   19a90:	ldr	ip, [sp, #40]	; 0x28
   19a94:	ldr	lr, [sp, #176]	; 0xb0
   19a98:	b	1960c <__assert_fail@plt+0x7f08>
   19a9c:	ldr	r3, [sp, #40]	; 0x28
   19aa0:	cmp	r3, #0
   19aa4:	beq	1a79c <__assert_fail@plt+0x9098>
   19aa8:	str	r3, [sp, #56]	; 0x38
   19aac:	mov	r3, #1
   19ab0:	str	r3, [sp, #68]	; 0x44
   19ab4:	ldr	r3, [pc, #3656]	; 1a904 <__assert_fail@plt+0x9200>
   19ab8:	b	19a80 <__assert_fail@plt+0x837c>
   19abc:	ldr	r3, [sp, #40]	; 0x28
   19ac0:	cmp	r3, #0
   19ac4:	mov	r3, #1
   19ac8:	streq	r3, [sp, #56]	; 0x38
   19acc:	beq	1a718 <__assert_fail@plt+0x9014>
   19ad0:	str	r3, [sp, #68]	; 0x44
   19ad4:	ldr	r3, [pc, #3620]	; 1a900 <__assert_fail@plt+0x91fc>
   19ad8:	mov	r8, #0
   19adc:	str	r3, [sp, #72]	; 0x48
   19ae0:	b	19928 <__assert_fail@plt+0x8224>
   19ae4:	ldr	r3, [sp, #24]
   19ae8:	ldr	r6, [sp, #48]	; 0x30
   19aec:	cmn	r3, #1
   19af0:	beq	1a14c <__assert_fail@plt+0x8a48>
   19af4:	subs	r3, r3, #1
   19af8:	movne	r3, #1
   19afc:	cmp	r3, #0
   19b00:	beq	19ecc <__assert_fail@plt+0x87c8>
   19b04:	ldr	r1, [sp, #52]	; 0x34
   19b08:	mov	r7, r3
   19b0c:	mov	r3, #0
   19b10:	str	r3, [sp, #32]
   19b14:	ldr	r3, [sp, #60]	; 0x3c
   19b18:	orr	r2, r1, r3
   19b1c:	ldr	r3, [sp, #40]	; 0x28
   19b20:	eor	r2, r2, #1
   19b24:	orr	r2, r3, r2
   19b28:	tst	r2, #255	; 0xff
   19b2c:	bne	1a450 <__assert_fail@plt+0x8d4c>
   19b30:	cmp	r6, #0
   19b34:	bne	19d10 <__assert_fail@plt+0x860c>
   19b38:	ldr	r3, [sp, #36]	; 0x24
   19b3c:	add	sl, sl, #1
   19b40:	and	r3, r3, r7
   19b44:	uxtb	r6, r3
   19b48:	cmp	r6, #0
   19b4c:	beq	19b78 <__assert_fail@plt+0x8474>
   19b50:	cmp	fp, r8
   19b54:	movhi	r3, #39	; 0x27
   19b58:	strbhi	r3, [r9, r8]
   19b5c:	add	r3, r8, #1
   19b60:	cmp	fp, r3
   19b64:	movhi	r2, #39	; 0x27
   19b68:	add	r8, r8, #2
   19b6c:	strbhi	r2, [r9, r3]
   19b70:	mov	r3, #0
   19b74:	str	r3, [sp, #36]	; 0x24
   19b78:	ldr	r2, [sp, #32]
   19b7c:	cmp	r8, fp
   19b80:	ldr	r3, [sp, #28]
   19b84:	strbcc	r4, [r9, r8]
   19b88:	cmp	r2, #0
   19b8c:	moveq	r3, #0
   19b90:	str	r3, [sp, #28]
   19b94:	ldr	r3, [sp, #24]
   19b98:	add	r8, r8, #1
   19b9c:	cmn	r3, #1
   19ba0:	bne	19678 <__assert_fail@plt+0x7f74>
   19ba4:	ldr	r3, [sp, #44]	; 0x2c
   19ba8:	ldrb	r3, [r3, sl]
   19bac:	adds	r7, r3, #0
   19bb0:	movne	r7, #1
   19bb4:	cmp	r7, #0
   19bb8:	bne	19688 <__assert_fail@plt+0x7f84>
   19bbc:	ldr	r3, [sp, #64]	; 0x40
   19bc0:	cmp	r8, #0
   19bc4:	movne	r3, #0
   19bc8:	andeq	r3, r3, #1
   19bcc:	cmp	r3, #0
   19bd0:	str	r3, [sp, #64]	; 0x40
   19bd4:	bne	1a678 <__assert_fail@plt+0x8f74>
   19bd8:	ldr	r3, [sp, #40]	; 0x28
   19bdc:	ldr	r2, [sp, #52]	; 0x34
   19be0:	eor	r3, r3, #1
   19be4:	ands	r2, r2, r3
   19be8:	beq	1aaa4 <__assert_fail@plt+0x93a0>
   19bec:	ldr	r3, [sp, #76]	; 0x4c
   19bf0:	cmp	r3, #0
   19bf4:	beq	1aa74 <__assert_fail@plt+0x9370>
   19bf8:	ldr	r3, [sp, #28]
   19bfc:	cmp	r3, #0
   19c00:	bne	1aa30 <__assert_fail@plt+0x932c>
   19c04:	ldr	r2, [sp, #84]	; 0x54
   19c08:	clz	r3, fp
   19c0c:	cmp	r2, #0
   19c10:	lsr	r3, r3, #5
   19c14:	moveq	r3, #0
   19c18:	cmp	r3, #0
   19c1c:	beq	1a9d0 <__assert_fail@plt+0x92cc>
   19c20:	mov	fp, r2
   19c24:	str	r3, [sp, #76]	; 0x4c
   19c28:	b	195b4 <__assert_fail@plt+0x7eb0>
   19c2c:	ldr	r3, [sp, #176]	; 0xb0
   19c30:	ldr	r6, [sp, #48]	; 0x30
   19c34:	cmp	r3, #2
   19c38:	beq	1a170 <__assert_fail@plt+0x8a6c>
   19c3c:	ldr	r3, [sp, #88]	; 0x58
   19c40:	cmp	r3, #0
   19c44:	beq	1a6f4 <__assert_fail@plt+0x8ff0>
   19c48:	mov	r3, #0
   19c4c:	add	sl, sl, #1
   19c50:	ldr	r6, [sp, #36]	; 0x24
   19c54:	str	r3, [sp, #32]
   19c58:	mov	r4, #92	; 0x5c
   19c5c:	b	19b48 <__assert_fail@plt+0x8444>
   19c60:	ldr	r3, [sp, #176]	; 0xb0
   19c64:	ldr	r6, [sp, #48]	; 0x30
   19c68:	cmp	r3, #2
   19c6c:	beq	1a1a0 <__assert_fail@plt+0x8a9c>
   19c70:	cmp	r3, #5
   19c74:	bne	1a704 <__assert_fail@plt+0x9000>
   19c78:	ldr	r3, [sp, #100]	; 0x64
   19c7c:	cmp	r3, #0
   19c80:	beq	1a768 <__assert_fail@plt+0x9064>
   19c84:	ldr	r2, [sp, #24]
   19c88:	add	r3, sl, #2
   19c8c:	cmp	r2, r3
   19c90:	bls	19ca0 <__assert_fail@plt+0x859c>
   19c94:	ldrb	r4, [r5, #1]
   19c98:	cmp	r4, #63	; 0x3f
   19c9c:	beq	1a910 <__assert_fail@plt+0x920c>
   19ca0:	mov	r1, #0
   19ca4:	str	r1, [sp, #32]
   19ca8:	mov	r4, #63	; 0x3f
   19cac:	b	19b14 <__assert_fail@plt+0x8410>
   19cb0:	ldr	r3, [sp, #176]	; 0xb0
   19cb4:	ldr	r6, [sp, #48]	; 0x30
   19cb8:	cmp	r3, #2
   19cbc:	beq	1a1cc <__assert_fail@plt+0x8ac8>
   19cc0:	str	r7, [sp, #32]
   19cc4:	str	r7, [sp, #76]	; 0x4c
   19cc8:	mov	r1, #0
   19ccc:	mov	r4, #39	; 0x27
   19cd0:	b	19b14 <__assert_fail@plt+0x8410>
   19cd4:	ldr	r6, [sp, #48]	; 0x30
   19cd8:	ldr	r1, [sp, #52]	; 0x34
   19cdc:	str	r7, [sp, #32]
   19ce0:	b	19b14 <__assert_fail@plt+0x8410>
   19ce4:	ldr	r6, [sp, #48]	; 0x30
   19ce8:	ldr	r1, [sp, #52]	; 0x34
   19cec:	mov	r4, #12
   19cf0:	mov	r3, #102	; 0x66
   19cf4:	ldr	r2, [sp, #56]	; 0x38
   19cf8:	cmp	r2, #0
   19cfc:	streq	r2, [sp, #32]
   19d00:	beq	19b14 <__assert_fail@plt+0x8410>
   19d04:	mov	r4, r3
   19d08:	mov	r3, #0
   19d0c:	str	r3, [sp, #32]
   19d10:	ldr	r3, [sp, #40]	; 0x28
   19d14:	cmp	r3, #0
   19d18:	bne	1a488 <__assert_fail@plt+0x8d84>
   19d1c:	ldr	r3, [sp, #36]	; 0x24
   19d20:	eor	r3, r3, #1
   19d24:	and	r3, r3, r1
   19d28:	ands	r3, r3, #255	; 0xff
   19d2c:	beq	19d64 <__assert_fail@plt+0x8660>
   19d30:	cmp	fp, r8
   19d34:	movhi	r2, #39	; 0x27
   19d38:	strbhi	r2, [r9, r8]
   19d3c:	add	r2, r8, #1
   19d40:	cmp	fp, r2
   19d44:	movhi	r1, #36	; 0x24
   19d48:	strbhi	r1, [r9, r2]
   19d4c:	add	r2, r8, #2
   19d50:	cmp	fp, r2
   19d54:	add	r8, r8, #3
   19d58:	movhi	r1, #39	; 0x27
   19d5c:	strbhi	r1, [r9, r2]
   19d60:	str	r3, [sp, #36]	; 0x24
   19d64:	cmp	fp, r8
   19d68:	movhi	r3, #92	; 0x5c
   19d6c:	strbhi	r3, [r9, r8]
   19d70:	add	sl, sl, #1
   19d74:	add	r8, r8, #1
   19d78:	b	19b78 <__assert_fail@plt+0x8474>
   19d7c:	ldr	r6, [sp, #48]	; 0x30
   19d80:	mov	r4, #10
   19d84:	mov	r3, #110	; 0x6e
   19d88:	ldr	r2, [sp, #64]	; 0x40
   19d8c:	cmp	r2, #0
   19d90:	bne	1a810 <__assert_fail@plt+0x910c>
   19d94:	ldr	r1, [sp, #52]	; 0x34
   19d98:	b	19cf4 <__assert_fail@plt+0x85f0>
   19d9c:	ldr	r6, [sp, #48]	; 0x30
   19da0:	ldr	r1, [sp, #52]	; 0x34
   19da4:	mov	r3, #116	; 0x74
   19da8:	b	19cf4 <__assert_fail@plt+0x85f0>
   19dac:	ldr	r6, [sp, #48]	; 0x30
   19db0:	ldr	r1, [sp, #52]	; 0x34
   19db4:	mov	r4, #11
   19db8:	mov	r3, #118	; 0x76
   19dbc:	b	19cf4 <__assert_fail@plt+0x85f0>
   19dc0:	ldr	r6, [sp, #48]	; 0x30
   19dc4:	ldr	r1, [sp, #52]	; 0x34
   19dc8:	mov	r4, #8
   19dcc:	mov	r3, #98	; 0x62
   19dd0:	b	19cf4 <__assert_fail@plt+0x85f0>
   19dd4:	ldr	r6, [sp, #48]	; 0x30
   19dd8:	ldr	r1, [sp, #52]	; 0x34
   19ddc:	mov	r4, #7
   19de0:	mov	r3, #97	; 0x61
   19de4:	b	19cf4 <__assert_fail@plt+0x85f0>
   19de8:	ldr	r3, [sp, #56]	; 0x38
   19dec:	ldr	r6, [sp, #48]	; 0x30
   19df0:	cmp	r3, #0
   19df4:	beq	1a2b8 <__assert_fail@plt+0x8bb4>
   19df8:	ldr	r3, [sp, #40]	; 0x28
   19dfc:	cmp	r3, #0
   19e00:	bne	1a8ec <__assert_fail@plt+0x91e8>
   19e04:	ldr	r3, [sp, #36]	; 0x24
   19e08:	ldr	r2, [sp, #52]	; 0x34
   19e0c:	eor	r3, r3, #1
   19e10:	ands	r3, r2, r3
   19e14:	moveq	r2, r8
   19e18:	beq	19e50 <__assert_fail@plt+0x874c>
   19e1c:	cmp	fp, r8
   19e20:	movhi	r2, #39	; 0x27
   19e24:	strbhi	r2, [r9, r8]
   19e28:	add	r2, r8, #1
   19e2c:	cmp	fp, r2
   19e30:	movhi	r1, #36	; 0x24
   19e34:	strbhi	r1, [r9, r2]
   19e38:	add	r2, r8, #2
   19e3c:	cmp	fp, r2
   19e40:	movhi	r1, #39	; 0x27
   19e44:	strbhi	r1, [r9, r2]
   19e48:	add	r2, r8, #3
   19e4c:	str	r3, [sp, #36]	; 0x24
   19e50:	cmp	fp, r2
   19e54:	movhi	r3, #92	; 0x5c
   19e58:	strbhi	r3, [r9, r2]
   19e5c:	ldr	r3, [sp, #92]	; 0x5c
   19e60:	add	r8, r2, #1
   19e64:	cmp	r3, #0
   19e68:	beq	1a7ec <__assert_fail@plt+0x90e8>
   19e6c:	ldr	r1, [sp, #24]
   19e70:	add	r3, sl, #1
   19e74:	cmp	r1, r3
   19e78:	bls	19eb0 <__assert_fail@plt+0x87ac>
   19e7c:	ldr	r1, [sp, #44]	; 0x2c
   19e80:	ldrb	r3, [r1, r3]
   19e84:	sub	r3, r3, #48	; 0x30
   19e88:	cmp	r3, #9
   19e8c:	bhi	19eb0 <__assert_fail@plt+0x87ac>
   19e90:	cmp	fp, r8
   19e94:	movhi	r3, #48	; 0x30
   19e98:	strbhi	r3, [r9, r8]
   19e9c:	add	r3, r2, #2
   19ea0:	cmp	fp, r3
   19ea4:	add	r8, r2, #3
   19ea8:	movhi	r1, #48	; 0x30
   19eac:	strbhi	r1, [r9, r3]
   19eb0:	ldr	r3, [sp, #40]	; 0x28
   19eb4:	ldr	r1, [sp, #52]	; 0x34
   19eb8:	mov	r7, r3
   19ebc:	str	r3, [sp, #32]
   19ec0:	mov	r4, #48	; 0x30
   19ec4:	b	19b14 <__assert_fail@plt+0x8410>
   19ec8:	ldr	r6, [sp, #48]	; 0x30
   19ecc:	cmp	sl, #0
   19ed0:	streq	r7, [sp, #32]
   19ed4:	beq	19ef4 <__assert_fail@plt+0x87f0>
   19ed8:	mov	r3, #0
   19edc:	ldr	r1, [sp, #52]	; 0x34
   19ee0:	str	r3, [sp, #32]
   19ee4:	b	19b14 <__assert_fail@plt+0x8410>
   19ee8:	ldr	r6, [sp, #48]	; 0x30
   19eec:	mov	r3, #0
   19ef0:	str	r3, [sp, #32]
   19ef4:	ldr	r3, [sp, #64]	; 0x40
   19ef8:	cmp	r3, #0
   19efc:	bne	1a678 <__assert_fail@plt+0x8f74>
   19f00:	ldr	r1, [sp, #52]	; 0x34
   19f04:	b	19b14 <__assert_fail@plt+0x8410>
   19f08:	ldr	r3, [sp, #48]	; 0x30
   19f0c:	mov	r6, r3
   19f10:	str	r3, [sp, #32]
   19f14:	b	19ef4 <__assert_fail@plt+0x87f0>
   19f18:	ldr	r6, [sp, #48]	; 0x30
   19f1c:	mov	r4, #13
   19f20:	mov	r3, #114	; 0x72
   19f24:	b	19d88 <__assert_fail@plt+0x8684>
   19f28:	ldr	r3, [sp, #44]	; 0x2c
   19f2c:	add	r5, r3, sl
   19f30:	ldrb	r4, [r5]
   19f34:	cmp	r4, #126	; 0x7e
   19f38:	ldrls	pc, [pc, r4, lsl #2]
   19f3c:	b	1a2d8 <__assert_fail@plt+0x8bd4>
   19f40:	andeq	sl, r1, r8, lsr #5
   19f44:	ldrdeq	sl, [r1], -r8
   19f48:	ldrdeq	sl, [r1], -r8
   19f4c:	ldrdeq	sl, [r1], -r8
   19f50:	ldrdeq	sl, [r1], -r8
   19f54:	ldrdeq	sl, [r1], -r8
   19f58:	ldrdeq	sl, [r1], -r8
   19f5c:	andeq	sl, r1, r0, lsr #5
   19f60:	muleq	r1, r8, r2
   19f64:	andeq	sl, r1, ip, lsl #5
   19f68:	andeq	sl, r1, r4, lsl #5
   19f6c:	andeq	sl, r1, ip, ror r2
   19f70:	andeq	sl, r1, r4, ror r2
   19f74:	andeq	sl, r1, ip, ror #4
   19f78:	ldrdeq	sl, [r1], -r8
   19f7c:	ldrdeq	sl, [r1], -r8
   19f80:	ldrdeq	sl, [r1], -r8
   19f84:	ldrdeq	sl, [r1], -r8
   19f88:	ldrdeq	sl, [r1], -r8
   19f8c:	ldrdeq	sl, [r1], -r8
   19f90:	ldrdeq	sl, [r1], -r8
   19f94:	ldrdeq	sl, [r1], -r8
   19f98:	ldrdeq	sl, [r1], -r8
   19f9c:	ldrdeq	sl, [r1], -r8
   19fa0:	ldrdeq	sl, [r1], -r8
   19fa4:	ldrdeq	sl, [r1], -r8
   19fa8:	ldrdeq	sl, [r1], -r8
   19fac:	ldrdeq	sl, [r1], -r8
   19fb0:	ldrdeq	sl, [r1], -r8
   19fb4:	ldrdeq	sl, [r1], -r8
   19fb8:	ldrdeq	sl, [r1], -r8
   19fbc:	ldrdeq	sl, [r1], -r8
   19fc0:	andeq	sl, r1, r0, ror #4
   19fc4:	andeq	sl, r1, r8, asr r2
   19fc8:	andeq	sl, r1, r8, asr r2
   19fcc:	andeq	sl, r1, r0, asr r2
   19fd0:	andeq	sl, r1, r8, asr r2
   19fd4:	andeq	sl, r1, r8, asr #4
   19fd8:	andeq	sl, r1, r8, asr r2
   19fdc:			; <UNDEFINED> instruction: 0x0001a1bc
   19fe0:	andeq	sl, r1, r8, asr r2
   19fe4:	andeq	sl, r1, r8, asr r2
   19fe8:	andeq	sl, r1, r8, asr r2
   19fec:	andeq	sl, r1, r8, asr #4
   19ff0:	andeq	sl, r1, r8, asr #4
   19ff4:	andeq	sl, r1, r8, asr #4
   19ff8:	andeq	sl, r1, r8, asr #4
   19ffc:	andeq	sl, r1, r8, asr #4
   1a000:	andeq	sl, r1, r8, asr #4
   1a004:	andeq	sl, r1, r8, asr #4
   1a008:	andeq	sl, r1, r8, asr #4
   1a00c:	andeq	sl, r1, r8, asr #4
   1a010:	andeq	sl, r1, r8, asr #4
   1a014:	andeq	sl, r1, r8, asr #4
   1a018:	andeq	sl, r1, r8, asr #4
   1a01c:	andeq	sl, r1, r8, asr #4
   1a020:	andeq	sl, r1, r8, asr #4
   1a024:	andeq	sl, r1, r8, asr #4
   1a028:	andeq	sl, r1, r8, asr #4
   1a02c:	andeq	sl, r1, r8, asr r2
   1a030:	andeq	sl, r1, r8, asr r2
   1a034:	andeq	sl, r1, r8, asr r2
   1a038:	andeq	sl, r1, r8, asr r2
   1a03c:	muleq	r1, r0, r1
   1a040:	ldrdeq	sl, [r1], -r8
   1a044:	andeq	sl, r1, r8, asr #4
   1a048:	andeq	sl, r1, r8, asr #4
   1a04c:	andeq	sl, r1, r8, asr #4
   1a050:	andeq	sl, r1, r8, asr #4
   1a054:	andeq	sl, r1, r8, asr #4
   1a058:	andeq	sl, r1, r8, asr #4
   1a05c:	andeq	sl, r1, r8, asr #4
   1a060:	andeq	sl, r1, r8, asr #4
   1a064:	andeq	sl, r1, r8, asr #4
   1a068:	andeq	sl, r1, r8, asr #4
   1a06c:	andeq	sl, r1, r8, asr #4
   1a070:	andeq	sl, r1, r8, asr #4
   1a074:	andeq	sl, r1, r8, asr #4
   1a078:	andeq	sl, r1, r8, asr #4
   1a07c:	andeq	sl, r1, r8, asr #4
   1a080:	andeq	sl, r1, r8, asr #4
   1a084:	andeq	sl, r1, r8, asr #4
   1a088:	andeq	sl, r1, r8, asr #4
   1a08c:	andeq	sl, r1, r8, asr #4
   1a090:	andeq	sl, r1, r8, asr #4
   1a094:	andeq	sl, r1, r8, asr #4
   1a098:	andeq	sl, r1, r8, asr #4
   1a09c:	andeq	sl, r1, r8, asr #4
   1a0a0:	andeq	sl, r1, r8, asr #4
   1a0a4:	andeq	sl, r1, r8, asr #4
   1a0a8:	andeq	sl, r1, r8, asr #4
   1a0ac:	andeq	sl, r1, r8, asr r2
   1a0b0:	andeq	sl, r1, r0, ror #2
   1a0b4:	andeq	sl, r1, r8, asr #4
   1a0b8:	andeq	sl, r1, r8, asr r2
   1a0bc:	andeq	sl, r1, r8, asr #4
   1a0c0:	andeq	sl, r1, r8, asr r2
   1a0c4:	andeq	sl, r1, r8, asr #4
   1a0c8:	andeq	sl, r1, r8, asr #4
   1a0cc:	andeq	sl, r1, r8, asr #4
   1a0d0:	andeq	sl, r1, r8, asr #4
   1a0d4:	andeq	sl, r1, r8, asr #4
   1a0d8:	andeq	sl, r1, r8, asr #4
   1a0dc:	andeq	sl, r1, r8, asr #4
   1a0e0:	andeq	sl, r1, r8, asr #4
   1a0e4:	andeq	sl, r1, r8, asr #4
   1a0e8:	andeq	sl, r1, r8, asr #4
   1a0ec:	andeq	sl, r1, r8, asr #4
   1a0f0:	andeq	sl, r1, r8, asr #4
   1a0f4:	andeq	sl, r1, r8, asr #4
   1a0f8:	andeq	sl, r1, r8, asr #4
   1a0fc:	andeq	sl, r1, r8, asr #4
   1a100:	andeq	sl, r1, r8, asr #4
   1a104:	andeq	sl, r1, r8, asr #4
   1a108:	andeq	sl, r1, r8, asr #4
   1a10c:	andeq	sl, r1, r8, asr #4
   1a110:	andeq	sl, r1, r8, asr #4
   1a114:	andeq	sl, r1, r8, asr #4
   1a118:	andeq	sl, r1, r8, asr #4
   1a11c:	andeq	sl, r1, r8, asr #4
   1a120:	andeq	sl, r1, r8, asr #4
   1a124:	andeq	sl, r1, r8, asr #4
   1a128:	andeq	sl, r1, r8, asr #4
   1a12c:	andeq	sl, r1, ip, lsr r1
   1a130:	andeq	sl, r1, r8, asr r2
   1a134:	andeq	sl, r1, ip, lsr r1
   1a138:	andeq	sl, r1, r0, asr r2
   1a13c:	ldr	r3, [sp, #24]
   1a140:	mov	r6, #0
   1a144:	cmn	r3, #1
   1a148:	bne	19af4 <__assert_fail@plt+0x83f0>
   1a14c:	ldr	r3, [sp, #44]	; 0x2c
   1a150:	ldrb	r3, [r3, #1]
   1a154:	adds	r3, r3, #0
   1a158:	movne	r3, #1
   1a15c:	b	19afc <__assert_fail@plt+0x83f8>
   1a160:	ldr	r3, [sp, #176]	; 0xb0
   1a164:	mov	r6, #0
   1a168:	cmp	r3, #2
   1a16c:	bne	19c3c <__assert_fail@plt+0x8538>
   1a170:	ldr	r3, [sp, #64]	; 0x40
   1a174:	cmp	r3, #0
   1a178:	bne	1a9b0 <__assert_fail@plt+0x92ac>
   1a17c:	add	sl, sl, #1
   1a180:	ldr	r6, [sp, #36]	; 0x24
   1a184:	str	r3, [sp, #32]
   1a188:	mov	r4, #92	; 0x5c
   1a18c:	b	19b48 <__assert_fail@plt+0x8444>
   1a190:	ldr	r3, [sp, #176]	; 0xb0
   1a194:	mov	r6, #0
   1a198:	cmp	r3, #2
   1a19c:	bne	19c70 <__assert_fail@plt+0x856c>
   1a1a0:	ldr	r3, [sp, #40]	; 0x28
   1a1a4:	cmp	r3, #0
   1a1a8:	bne	1a48c <__assert_fail@plt+0x8d88>
   1a1ac:	mov	r1, r7
   1a1b0:	str	r3, [sp, #32]
   1a1b4:	mov	r4, #63	; 0x3f
   1a1b8:	b	19b14 <__assert_fail@plt+0x8410>
   1a1bc:	ldr	r3, [sp, #176]	; 0xb0
   1a1c0:	mov	r6, #0
   1a1c4:	cmp	r3, #2
   1a1c8:	bne	19cc0 <__assert_fail@plt+0x85bc>
   1a1cc:	ldr	r3, [sp, #64]	; 0x40
   1a1d0:	cmp	r3, #0
   1a1d4:	bne	1a9b0 <__assert_fail@plt+0x92ac>
   1a1d8:	ldr	r2, [sp, #84]	; 0x54
   1a1dc:	adds	r3, fp, #0
   1a1e0:	movne	r3, #1
   1a1e4:	cmp	r2, #0
   1a1e8:	movne	r3, #0
   1a1ec:	cmp	r3, #0
   1a1f0:	strne	fp, [sp, #84]	; 0x54
   1a1f4:	movne	fp, #0
   1a1f8:	bne	1a228 <__assert_fail@plt+0x8b24>
   1a1fc:	cmp	fp, r8
   1a200:	movhi	r3, #39	; 0x27
   1a204:	strbhi	r3, [r9, r8]
   1a208:	add	r3, r8, #1
   1a20c:	cmp	fp, r3
   1a210:	movhi	r2, #92	; 0x5c
   1a214:	strbhi	r2, [r9, r3]
   1a218:	add	r3, r8, #2
   1a21c:	cmp	fp, r3
   1a220:	movhi	r2, #39	; 0x27
   1a224:	strbhi	r2, [r9, r3]
   1a228:	ldr	r3, [sp, #64]	; 0x40
   1a22c:	add	r8, r8, #3
   1a230:	mov	r1, r7
   1a234:	str	r7, [sp, #32]
   1a238:	str	r7, [sp, #76]	; 0x4c
   1a23c:	str	r3, [sp, #36]	; 0x24
   1a240:	mov	r4, #39	; 0x27
   1a244:	b	19b14 <__assert_fail@plt+0x8410>
   1a248:	mov	r6, #0
   1a24c:	b	19cd8 <__assert_fail@plt+0x85d4>
   1a250:	mov	r6, #0
   1a254:	b	19ecc <__assert_fail@plt+0x87c8>
   1a258:	mov	r6, #0
   1a25c:	b	19eec <__assert_fail@plt+0x87e8>
   1a260:	str	r7, [sp, #32]
   1a264:	mov	r6, #0
   1a268:	b	19ef4 <__assert_fail@plt+0x87f0>
   1a26c:	mov	r6, #0
   1a270:	b	19f1c <__assert_fail@plt+0x8818>
   1a274:	mov	r6, #0
   1a278:	b	19ce8 <__assert_fail@plt+0x85e4>
   1a27c:	mov	r6, #0
   1a280:	b	19db0 <__assert_fail@plt+0x86ac>
   1a284:	mov	r6, #0
   1a288:	b	19d80 <__assert_fail@plt+0x867c>
   1a28c:	mov	r6, #0
   1a290:	mov	r3, #116	; 0x74
   1a294:	b	19d88 <__assert_fail@plt+0x8684>
   1a298:	mov	r6, #0
   1a29c:	b	19dc4 <__assert_fail@plt+0x86c0>
   1a2a0:	mov	r6, #0
   1a2a4:	b	19dd8 <__assert_fail@plt+0x86d4>
   1a2a8:	ldr	r3, [sp, #56]	; 0x38
   1a2ac:	mov	r6, #0
   1a2b0:	cmp	r3, #0
   1a2b4:	bne	19df8 <__assert_fail@plt+0x86f4>
   1a2b8:	ldr	r3, [sp, #96]	; 0x60
   1a2bc:	cmp	r3, #0
   1a2c0:	addne	sl, sl, #1
   1a2c4:	bne	1966c <__assert_fail@plt+0x7f68>
   1a2c8:	ldr	r1, [sp, #52]	; 0x34
   1a2cc:	str	r3, [sp, #32]
   1a2d0:	mov	r4, r3
   1a2d4:	b	19b14 <__assert_fail@plt+0x8410>
   1a2d8:	mov	r6, #0
   1a2dc:	ldr	r3, [sp, #80]	; 0x50
   1a2e0:	cmp	r3, #1
   1a2e4:	bne	1a4d4 <__assert_fail@plt+0x8dd0>
   1a2e8:	bl	11518 <__ctype_b_loc@plt>
   1a2ec:	ldr	r2, [sp, #80]	; 0x50
   1a2f0:	sxth	r3, r4
   1a2f4:	mov	r1, r2
   1a2f8:	lsl	r3, r3, #1
   1a2fc:	ldr	r2, [r0]
   1a300:	ldrh	r3, [r2, r3]
   1a304:	and	r3, r3, #16384	; 0x4000
   1a308:	cmp	r3, #0
   1a30c:	movne	r3, #1
   1a310:	moveq	r3, #0
   1a314:	str	r3, [sp, #32]
   1a318:	moveq	r3, #1
   1a31c:	movne	r3, #0
   1a320:	ldr	r2, [sp, #56]	; 0x38
   1a324:	and	r3, r3, r2
   1a328:	ands	r3, r3, #255	; 0xff
   1a32c:	beq	19f00 <__assert_fail@plt+0x87fc>
   1a330:	add	r1, sl, r1
   1a334:	mov	r0, #0
   1a338:	ldr	r7, [sp, #40]	; 0x28
   1a33c:	ldr	r2, [sp, #36]	; 0x24
   1a340:	ldr	lr, [sp, #52]	; 0x34
   1a344:	b	1a3f4 <__assert_fail@plt+0x8cf0>
   1a348:	cmp	r7, #0
   1a34c:	bne	1a748 <__assert_fail@plt+0x9044>
   1a350:	eor	r0, r2, #1
   1a354:	ands	r0, lr, r0
   1a358:	beq	1a390 <__assert_fail@plt+0x8c8c>
   1a35c:	cmp	fp, r8
   1a360:	movhi	r2, #39	; 0x27
   1a364:	strbhi	r2, [r9, r8]
   1a368:	add	r2, r8, #1
   1a36c:	cmp	fp, r2
   1a370:	movhi	ip, #36	; 0x24
   1a374:	strbhi	ip, [r9, r2]
   1a378:	add	r2, r8, #2
   1a37c:	cmp	fp, r2
   1a380:	movhi	ip, #39	; 0x27
   1a384:	strbhi	ip, [r9, r2]
   1a388:	add	r8, r8, #3
   1a38c:	mov	r2, r0
   1a390:	cmp	fp, r8
   1a394:	movhi	r0, #92	; 0x5c
   1a398:	strbhi	r0, [r9, r8]
   1a39c:	add	r0, r8, #1
   1a3a0:	cmp	fp, r0
   1a3a4:	lsrhi	ip, r4, #6
   1a3a8:	addhi	ip, ip, #48	; 0x30
   1a3ac:	strbhi	ip, [r9, r0]
   1a3b0:	add	ip, r8, #2
   1a3b4:	cmp	fp, ip
   1a3b8:	lsrhi	r0, r4, #3
   1a3bc:	andhi	r0, r0, #7
   1a3c0:	addhi	r0, r0, #48	; 0x30
   1a3c4:	add	sl, sl, #1
   1a3c8:	strbhi	r0, [r9, ip]
   1a3cc:	and	r4, r4, #7
   1a3d0:	cmp	sl, r1
   1a3d4:	add	r4, r4, #48	; 0x30
   1a3d8:	add	r8, r8, #3
   1a3dc:	bcs	1a760 <__assert_fail@plt+0x905c>
   1a3e0:	mov	r0, r3
   1a3e4:	cmp	fp, r8
   1a3e8:	strbhi	r4, [r9, r8]
   1a3ec:	ldrb	r4, [r5, #1]!
   1a3f0:	add	r8, r8, #1
   1a3f4:	cmp	r3, #0
   1a3f8:	bne	1a348 <__assert_fail@plt+0x8c44>
   1a3fc:	cmp	r6, #0
   1a400:	bne	1a4a4 <__assert_fail@plt+0x8da0>
   1a404:	eor	r6, r0, #1
   1a408:	and	r6, r6, r2
   1a40c:	add	sl, sl, #1
   1a410:	cmp	r1, sl
   1a414:	uxtb	r6, r6
   1a418:	bls	1a4cc <__assert_fail@plt+0x8dc8>
   1a41c:	cmp	r6, #0
   1a420:	beq	1a3e4 <__assert_fail@plt+0x8ce0>
   1a424:	cmp	fp, r8
   1a428:	movhi	r2, #39	; 0x27
   1a42c:	strbhi	r2, [r9, r8]
   1a430:	add	r2, r8, #1
   1a434:	cmp	fp, r2
   1a438:	movhi	ip, #39	; 0x27
   1a43c:	strbhi	ip, [r9, r2]
   1a440:	add	r8, r8, #2
   1a444:	mov	r6, r3
   1a448:	mov	r2, r3
   1a44c:	b	1a3e4 <__assert_fail@plt+0x8ce0>
   1a450:	ldr	r3, [sp, #184]	; 0xb8
   1a454:	cmp	r3, #0
   1a458:	beq	19b30 <__assert_fail@plt+0x842c>
   1a45c:	lsr	r2, r4, #5
   1a460:	mov	r0, r3
   1a464:	uxtb	r2, r2
   1a468:	and	r3, r4, #31
   1a46c:	ldr	r2, [r0, r2, lsl #2]
   1a470:	lsr	r3, r2, r3
   1a474:	tst	r3, #1
   1a478:	beq	19b30 <__assert_fail@plt+0x842c>
   1a47c:	ldr	r3, [sp, #40]	; 0x28
   1a480:	cmp	r3, #0
   1a484:	beq	19d1c <__assert_fail@plt+0x8618>
   1a488:	mov	r3, r1
   1a48c:	str	r3, [sp, #64]	; 0x40
   1a490:	mov	sl, r9
   1a494:	ldr	r3, [sp, #56]	; 0x38
   1a498:	mov	r9, fp
   1a49c:	ldr	r2, [sp, #64]	; 0x40
   1a4a0:	b	1a690 <__assert_fail@plt+0x8f8c>
   1a4a4:	cmp	fp, r8
   1a4a8:	eor	r6, r0, #1
   1a4ac:	movhi	ip, #92	; 0x5c
   1a4b0:	and	r6, r6, r2
   1a4b4:	add	sl, sl, #1
   1a4b8:	strbhi	ip, [r9, r8]
   1a4bc:	cmp	r1, sl
   1a4c0:	add	r8, r8, #1
   1a4c4:	uxtb	r6, r6
   1a4c8:	bhi	1a41c <__assert_fail@plt+0x8d18>
   1a4cc:	str	r2, [sp, #36]	; 0x24
   1a4d0:	b	19b48 <__assert_fail@plt+0x8444>
   1a4d4:	ldr	r3, [sp, #24]
   1a4d8:	cmn	r3, #1
   1a4dc:	mov	r3, #0
   1a4e0:	str	r3, [sp, #128]	; 0x80
   1a4e4:	str	r3, [sp, #132]	; 0x84
   1a4e8:	beq	1a7dc <__assert_fail@plt+0x90d8>
   1a4ec:	mov	r2, r7
   1a4f0:	mov	r3, #0
   1a4f4:	str	r7, [sp, #104]	; 0x68
   1a4f8:	str	r5, [sp, #116]	; 0x74
   1a4fc:	mov	r7, r3
   1a500:	mov	r5, r2
   1a504:	str	r4, [sp, #32]
   1a508:	str	r6, [sp, #108]	; 0x6c
   1a50c:	str	r8, [sp, #112]	; 0x70
   1a510:	ldr	r3, [sp, #44]	; 0x2c
   1a514:	add	r6, sl, r7
   1a518:	add	r4, r3, r6
   1a51c:	ldr	r3, [sp, #24]
   1a520:	mov	r1, r4
   1a524:	sub	r2, r3, r6
   1a528:	add	r0, sp, #124	; 0x7c
   1a52c:	add	r3, sp, #128	; 0x80
   1a530:	bl	17e78 <__assert_fail@plt+0x6774>
   1a534:	subs	r8, r0, #0
   1a538:	beq	1a8c0 <__assert_fail@plt+0x91bc>
   1a53c:	cmn	r8, #1
   1a540:	beq	1a898 <__assert_fail@plt+0x9194>
   1a544:	cmn	r8, #2
   1a548:	beq	1a830 <__assert_fail@plt+0x912c>
   1a54c:	ldr	r3, [sp, #64]	; 0x40
   1a550:	cmp	r3, #0
   1a554:	beq	1a614 <__assert_fail@plt+0x8f10>
   1a558:	cmp	r8, #1
   1a55c:	beq	1a614 <__assert_fail@plt+0x8f10>
   1a560:	sub	r3, r8, #1
   1a564:	add	r6, r3, r6
   1a568:	ldr	r3, [sp, #44]	; 0x2c
   1a56c:	add	r6, r3, r6
   1a570:	ldrb	r3, [r4, #1]!
   1a574:	sub	r3, r3, #91	; 0x5b
   1a578:	cmp	r3, #33	; 0x21
   1a57c:	ldrls	pc, [pc, r3, lsl #2]
   1a580:	b	1a60c <__assert_fail@plt+0x8f08>
   1a584:	andeq	sl, r1, r8, ror r6
   1a588:	andeq	sl, r1, r8, ror r6
   1a58c:	andeq	sl, r1, ip, lsl #12
   1a590:	andeq	sl, r1, r8, ror r6
   1a594:	andeq	sl, r1, ip, lsl #12
   1a598:	andeq	sl, r1, r8, ror r6
   1a59c:	andeq	sl, r1, ip, lsl #12
   1a5a0:	andeq	sl, r1, ip, lsl #12
   1a5a4:	andeq	sl, r1, ip, lsl #12
   1a5a8:	andeq	sl, r1, ip, lsl #12
   1a5ac:	andeq	sl, r1, ip, lsl #12
   1a5b0:	andeq	sl, r1, ip, lsl #12
   1a5b4:	andeq	sl, r1, ip, lsl #12
   1a5b8:	andeq	sl, r1, ip, lsl #12
   1a5bc:	andeq	sl, r1, ip, lsl #12
   1a5c0:	andeq	sl, r1, ip, lsl #12
   1a5c4:	andeq	sl, r1, ip, lsl #12
   1a5c8:	andeq	sl, r1, ip, lsl #12
   1a5cc:	andeq	sl, r1, ip, lsl #12
   1a5d0:	andeq	sl, r1, ip, lsl #12
   1a5d4:	andeq	sl, r1, ip, lsl #12
   1a5d8:	andeq	sl, r1, ip, lsl #12
   1a5dc:	andeq	sl, r1, ip, lsl #12
   1a5e0:	andeq	sl, r1, ip, lsl #12
   1a5e4:	andeq	sl, r1, ip, lsl #12
   1a5e8:	andeq	sl, r1, ip, lsl #12
   1a5ec:	andeq	sl, r1, ip, lsl #12
   1a5f0:	andeq	sl, r1, ip, lsl #12
   1a5f4:	andeq	sl, r1, ip, lsl #12
   1a5f8:	andeq	sl, r1, ip, lsl #12
   1a5fc:	andeq	sl, r1, ip, lsl #12
   1a600:	andeq	sl, r1, ip, lsl #12
   1a604:	andeq	sl, r1, ip, lsl #12
   1a608:	andeq	sl, r1, r8, ror r6
   1a60c:	cmp	r6, r4
   1a610:	bne	1a570 <__assert_fail@plt+0x8e6c>
   1a614:	ldr	r0, [sp, #124]	; 0x7c
   1a618:	bl	11410 <iswprint@plt>
   1a61c:	add	r7, r7, r8
   1a620:	cmp	r0, #0
   1a624:	add	r0, sp, #128	; 0x80
   1a628:	moveq	r5, #0
   1a62c:	bl	1138c <mbsinit@plt>
   1a630:	cmp	r0, #0
   1a634:	beq	1a510 <__assert_fail@plt+0x8e0c>
   1a638:	ldr	r4, [sp, #32]
   1a63c:	str	r5, [sp, #32]
   1a640:	ldr	r3, [sp, #32]
   1a644:	mov	r1, r7
   1a648:	eor	r3, r3, #1
   1a64c:	ldr	r7, [sp, #104]	; 0x68
   1a650:	ldr	r6, [sp, #108]	; 0x6c
   1a654:	ldr	r8, [sp, #112]	; 0x70
   1a658:	ldr	r5, [sp, #116]	; 0x74
   1a65c:	uxtb	r3, r3
   1a660:	cmp	r1, #1
   1a664:	bls	1a320 <__assert_fail@plt+0x8c1c>
   1a668:	ldr	r2, [sp, #56]	; 0x38
   1a66c:	and	r3, r3, r2
   1a670:	uxtb	r3, r3
   1a674:	b	1a330 <__assert_fail@plt+0x8c2c>
   1a678:	mov	r3, #2
   1a67c:	str	r3, [sp, #176]	; 0xb0
   1a680:	ldr	r2, [sp, #64]	; 0x40
   1a684:	ldr	r3, [sp, #56]	; 0x38
   1a688:	mov	sl, r9
   1a68c:	mov	r9, fp
   1a690:	and	r3, r3, r2
   1a694:	tst	r3, #255	; 0xff
   1a698:	ldr	r3, [sp, #176]	; 0xb0
   1a69c:	movne	r3, #4
   1a6a0:	str	r3, [sp, #176]	; 0xb0
   1a6a4:	ldr	r3, [sp, #180]	; 0xb4
   1a6a8:	mov	ip, #0
   1a6ac:	bic	r3, r3, #2
   1a6b0:	str	r3, [sp, #4]
   1a6b4:	ldr	r3, [sp, #192]	; 0xc0
   1a6b8:	ldr	r2, [sp, #44]	; 0x2c
   1a6bc:	str	r3, [sp, #16]
   1a6c0:	ldr	r3, [sp, #188]	; 0xbc
   1a6c4:	mov	r1, r9
   1a6c8:	str	r3, [sp, #12]
   1a6cc:	ldr	r3, [sp, #176]	; 0xb0
   1a6d0:	mov	r0, sl
   1a6d4:	str	r3, [sp]
   1a6d8:	str	ip, [sp, #8]
   1a6dc:	ldr	r3, [sp, #24]
   1a6e0:	bl	19540 <__assert_fail@plt+0x7e3c>
   1a6e4:	mov	fp, r0
   1a6e8:	mov	r0, fp
   1a6ec:	add	sp, sp, #140	; 0x8c
   1a6f0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a6f4:	mov	r4, #92	; 0x5c
   1a6f8:	mov	r1, #0
   1a6fc:	mov	r3, r4
   1a700:	b	19cf4 <__assert_fail@plt+0x85f0>
   1a704:	mov	r3, #0
   1a708:	ldr	r1, [sp, #52]	; 0x34
   1a70c:	str	r3, [sp, #32]
   1a710:	mov	r4, #63	; 0x3f
   1a714:	b	19b14 <__assert_fail@plt+0x8410>
   1a718:	cmp	fp, #0
   1a71c:	beq	1a778 <__assert_fail@plt+0x9074>
   1a720:	mov	r3, #39	; 0x27
   1a724:	strb	r3, [r9]
   1a728:	mov	r3, #0
   1a72c:	str	r3, [sp, #40]	; 0x28
   1a730:	mov	r3, #1
   1a734:	str	r3, [sp, #68]	; 0x44
   1a738:	ldr	r3, [pc, #448]	; 1a900 <__assert_fail@plt+0x91fc>
   1a73c:	mov	r8, #1
   1a740:	str	r3, [sp, #72]	; 0x48
   1a744:	b	19928 <__assert_fail@plt+0x8224>
   1a748:	ldr	r3, [sp, #40]	; 0x28
   1a74c:	mov	sl, r9
   1a750:	str	r3, [sp, #56]	; 0x38
   1a754:	mov	r9, fp
   1a758:	ldr	r2, [sp, #64]	; 0x40
   1a75c:	b	1a690 <__assert_fail@plt+0x8f8c>
   1a760:	str	r2, [sp, #36]	; 0x24
   1a764:	b	19b78 <__assert_fail@plt+0x8474>
   1a768:	mov	r1, #0
   1a76c:	str	r3, [sp, #32]
   1a770:	mov	r4, #63	; 0x3f
   1a774:	b	19b14 <__assert_fail@plt+0x8410>
   1a778:	ldr	r3, [pc, #384]	; 1a900 <__assert_fail@plt+0x91fc>
   1a77c:	str	r3, [sp, #72]	; 0x48
   1a780:	mov	r3, #0
   1a784:	str	r3, [sp, #40]	; 0x28
   1a788:	mov	r3, #1
   1a78c:	str	r3, [sp, #68]	; 0x44
   1a790:	mov	r8, r3
   1a794:	b	19928 <__assert_fail@plt+0x8224>
   1a798:	bl	116e0 <abort@plt>
   1a79c:	cmp	fp, #0
   1a7a0:	beq	1a800 <__assert_fail@plt+0x90fc>
   1a7a4:	mov	r2, #1
   1a7a8:	mov	r3, #34	; 0x22
   1a7ac:	strb	r3, [r9]
   1a7b0:	mov	r8, r2
   1a7b4:	mov	r3, r2
   1a7b8:	str	r2, [sp, #68]	; 0x44
   1a7bc:	str	r3, [sp, #56]	; 0x38
   1a7c0:	ldr	r3, [pc, #316]	; 1a904 <__assert_fail@plt+0x9200>
   1a7c4:	ldr	r1, [sp, #56]	; 0x38
   1a7c8:	str	r3, [sp, #72]	; 0x48
   1a7cc:	ldr	r2, [sp, #176]	; 0xb0
   1a7d0:	ldr	ip, [sp, #40]	; 0x28
   1a7d4:	ldr	lr, [sp, #176]	; 0xb0
   1a7d8:	b	1960c <__assert_fail@plt+0x7f08>
   1a7dc:	ldr	r0, [sp, #44]	; 0x2c
   1a7e0:	bl	1153c <strlen@plt>
   1a7e4:	str	r0, [sp, #24]
   1a7e8:	b	1a4ec <__assert_fail@plt+0x8de8>
   1a7ec:	mov	r7, #0
   1a7f0:	ldr	r1, [sp, #52]	; 0x34
   1a7f4:	str	r3, [sp, #32]
   1a7f8:	mov	r4, #48	; 0x30
   1a7fc:	b	19b14 <__assert_fail@plt+0x8410>
   1a800:	mov	r3, #1
   1a804:	str	r3, [sp, #68]	; 0x44
   1a808:	mov	r8, r3
   1a80c:	b	1a7bc <__assert_fail@plt+0x90b8>
   1a810:	mov	r3, #2
   1a814:	mov	sl, r9
   1a818:	str	r3, [sp, #176]	; 0xb0
   1a81c:	mov	r9, fp
   1a820:	ldr	r3, [sp, #56]	; 0x38
   1a824:	b	1a690 <__assert_fail@plt+0x8f8c>
   1a828:	ldr	r6, [sp, #48]	; 0x30
   1a82c:	b	1a2dc <__assert_fail@plt+0x8bd8>
   1a830:	ldr	r0, [sp, #24]
   1a834:	mov	ip, r6
   1a838:	cmp	r0, ip
   1a83c:	mov	r1, r7
   1a840:	mov	r2, r4
   1a844:	ldr	r7, [sp, #104]	; 0x68
   1a848:	ldr	r4, [sp, #32]
   1a84c:	ldr	r6, [sp, #108]	; 0x6c
   1a850:	ldr	r8, [sp, #112]	; 0x70
   1a854:	ldr	r5, [sp, #116]	; 0x74
   1a858:	bls	1a888 <__assert_fail@plt+0x9184>
   1a85c:	ldrb	r3, [r2]
   1a860:	cmp	r3, #0
   1a864:	bne	1a878 <__assert_fail@plt+0x9174>
   1a868:	b	1a998 <__assert_fail@plt+0x9294>
   1a86c:	ldrb	r3, [r2, #1]!
   1a870:	cmp	r3, #0
   1a874:	beq	1a998 <__assert_fail@plt+0x9294>
   1a878:	add	r1, r1, #1
   1a87c:	add	r3, sl, r1
   1a880:	cmp	r0, r3
   1a884:	bhi	1a86c <__assert_fail@plt+0x9168>
   1a888:	mov	r2, #0
   1a88c:	mov	r3, r7
   1a890:	str	r2, [sp, #32]
   1a894:	b	1a660 <__assert_fail@plt+0x8f5c>
   1a898:	mov	r1, r7
   1a89c:	ldr	r7, [sp, #104]	; 0x68
   1a8a0:	mov	r2, #0
   1a8a4:	ldr	r4, [sp, #32]
   1a8a8:	ldr	r6, [sp, #108]	; 0x6c
   1a8ac:	ldr	r8, [sp, #112]	; 0x70
   1a8b0:	ldr	r5, [sp, #116]	; 0x74
   1a8b4:	mov	r3, r7
   1a8b8:	str	r2, [sp, #32]
   1a8bc:	b	1a660 <__assert_fail@plt+0x8f5c>
   1a8c0:	mov	r3, r5
   1a8c4:	eor	r3, r3, #1
   1a8c8:	ldr	r4, [sp, #32]
   1a8cc:	mov	r1, r7
   1a8d0:	str	r5, [sp, #32]
   1a8d4:	ldr	r7, [sp, #104]	; 0x68
   1a8d8:	ldr	r6, [sp, #108]	; 0x6c
   1a8dc:	ldr	r8, [sp, #112]	; 0x70
   1a8e0:	ldr	r5, [sp, #116]	; 0x74
   1a8e4:	uxtb	r3, r3
   1a8e8:	b	1a660 <__assert_fail@plt+0x8f5c>
   1a8ec:	mov	sl, r9
   1a8f0:	str	r3, [sp, #56]	; 0x38
   1a8f4:	mov	r9, fp
   1a8f8:	ldr	r2, [sp, #64]	; 0x40
   1a8fc:	b	1a690 <__assert_fail@plt+0x8f8c>
   1a900:			; <UNDEFINED> instruction: 0x00022cbc
   1a904:	andeq	r1, r2, ip, asr #21
   1a908:	andeq	r2, r2, r0, asr #25
   1a90c:	stmdacc	r0, {r0, r6, r7, r8, ip, lr}
   1a910:	ldr	r2, [sp, #44]	; 0x2c
   1a914:	ldrb	r1, [r2, r3]
   1a918:	sub	r2, r1, #33	; 0x21
   1a91c:	uxtb	r2, r2
   1a920:	cmp	r2, #29
   1a924:	bhi	1a9a4 <__assert_fail@plt+0x92a0>
   1a928:	ldr	r0, [pc, #-36]	; 1a90c <__assert_fail@plt+0x9208>
   1a92c:	mov	ip, #1
   1a930:	ands	r2, r0, ip, lsl r2
   1a934:	beq	1a9c4 <__assert_fail@plt+0x92c0>
   1a938:	ldr	r2, [sp, #40]	; 0x28
   1a93c:	cmp	r2, #0
   1a940:	bne	1aab8 <__assert_fail@plt+0x93b4>
   1a944:	add	r2, r8, #1
   1a948:	cmp	fp, r8
   1a94c:	strbhi	r4, [r9, r8]
   1a950:	cmp	fp, r2
   1a954:	movhi	r0, #34	; 0x22
   1a958:	strbhi	r0, [r9, r2]
   1a95c:	add	r2, r8, #2
   1a960:	cmp	fp, r2
   1a964:	movhi	r0, #34	; 0x22
   1a968:	strbhi	r0, [r9, r2]
   1a96c:	add	r2, r8, #3
   1a970:	cmp	fp, r2
   1a974:	mov	sl, r3
   1a978:	ldr	r3, [sp, #40]	; 0x28
   1a97c:	movhi	r0, #63	; 0x3f
   1a980:	mov	r4, r1
   1a984:	strbhi	r0, [r9, r2]
   1a988:	add	r8, r8, #4
   1a98c:	mov	r1, r3
   1a990:	str	r3, [sp, #32]
   1a994:	b	19b14 <__assert_fail@plt+0x8410>
   1a998:	str	r3, [sp, #32]
   1a99c:	mov	r3, r7
   1a9a0:	b	1a660 <__assert_fail@plt+0x8f5c>
   1a9a4:	mov	r1, #0
   1a9a8:	str	r1, [sp, #32]
   1a9ac:	b	19b14 <__assert_fail@plt+0x8410>
   1a9b0:	mov	sl, r9
   1a9b4:	ldr	r3, [sp, #56]	; 0x38
   1a9b8:	mov	r9, fp
   1a9bc:	ldr	r2, [sp, #64]	; 0x40
   1a9c0:	b	1a690 <__assert_fail@plt+0x8f8c>
   1a9c4:	str	r2, [sp, #32]
   1a9c8:	mov	r1, #0
   1a9cc:	b	19b14 <__assert_fail@plt+0x8410>
   1a9d0:	ldr	r2, [sp, #76]	; 0x4c
   1a9d4:	mov	sl, r9
   1a9d8:	mov	r9, fp
   1a9dc:	mov	fp, r8
   1a9e0:	ldr	r1, [sp, #72]	; 0x48
   1a9e4:	cmp	r1, #0
   1a9e8:	moveq	r3, #0
   1a9ec:	andne	r3, r2, #1
   1a9f0:	cmp	r3, #0
   1a9f4:	beq	1aa20 <__assert_fail@plt+0x931c>
   1a9f8:	ldrb	r3, [r1]
   1a9fc:	cmp	r3, #0
   1aa00:	beq	1aa20 <__assert_fail@plt+0x931c>
   1aa04:	mov	r2, r1
   1aa08:	cmp	r9, fp
   1aa0c:	strbhi	r3, [sl, fp]
   1aa10:	ldrb	r3, [r2, #1]!
   1aa14:	add	fp, fp, #1
   1aa18:	cmp	r3, #0
   1aa1c:	bne	1aa08 <__assert_fail@plt+0x9304>
   1aa20:	cmp	r9, fp
   1aa24:	movhi	r3, #0
   1aa28:	strbhi	r3, [sl, fp]
   1aa2c:	b	1a6e8 <__assert_fail@plt+0x8fe4>
   1aa30:	ldr	r3, [sp, #192]	; 0xc0
   1aa34:	mov	ip, #5
   1aa38:	str	r3, [sp, #16]
   1aa3c:	ldr	r3, [sp, #188]	; 0xbc
   1aa40:	ldr	r2, [sp, #44]	; 0x2c
   1aa44:	str	r3, [sp, #12]
   1aa48:	ldr	r3, [sp, #184]	; 0xb8
   1aa4c:	ldr	r1, [sp, #84]	; 0x54
   1aa50:	str	r3, [sp, #8]
   1aa54:	ldr	r3, [sp, #180]	; 0xb4
   1aa58:	mov	r0, r9
   1aa5c:	str	r3, [sp, #4]
   1aa60:	str	ip, [sp]
   1aa64:	ldr	r3, [sp, #24]
   1aa68:	bl	19540 <__assert_fail@plt+0x7e3c>
   1aa6c:	mov	fp, r0
   1aa70:	b	1a6e8 <__assert_fail@plt+0x8fe4>
   1aa74:	mov	sl, r9
   1aa78:	mov	r9, fp
   1aa7c:	mov	fp, r8
   1aa80:	b	1a9e0 <__assert_fail@plt+0x92dc>
   1aa84:	ldr	r1, [sp, #176]	; 0xb0
   1aa88:	bl	19420 <__assert_fail@plt+0x7d1c>
   1aa8c:	str	r0, [sp, #192]	; 0xc0
   1aa90:	b	199fc <__assert_fail@plt+0x82f8>
   1aa94:	ldr	r1, [sp, #176]	; 0xb0
   1aa98:	bl	19420 <__assert_fail@plt+0x7d1c>
   1aa9c:	str	r0, [sp, #188]	; 0xbc
   1aaa0:	b	199dc <__assert_fail@plt+0x82d8>
   1aaa4:	mov	sl, r9
   1aaa8:	mov	r2, r3
   1aaac:	mov	r9, fp
   1aab0:	mov	fp, r8
   1aab4:	b	1a9e0 <__assert_fail@plt+0x92dc>
   1aab8:	mov	sl, r9
   1aabc:	mov	r9, fp
   1aac0:	b	1a6a4 <__assert_fail@plt+0x8fa0>
   1aac4:	push	{r4, r5, r6, lr}
   1aac8:	mov	r5, r0
   1aacc:	bl	1156c <__errno_location@plt>
   1aad0:	cmp	r5, #0
   1aad4:	mov	r1, #48	; 0x30
   1aad8:	mov	r4, r0
   1aadc:	ldr	r0, [pc, #16]	; 1aaf4 <__assert_fail@plt+0x93f0>
   1aae0:	ldr	r6, [r4]
   1aae4:	movne	r0, r5
   1aae8:	bl	1e550 <__assert_fail@plt+0xce4c>
   1aaec:	str	r6, [r4]
   1aaf0:	pop	{r4, r5, r6, pc}
   1aaf4:	andeq	r4, r3, r8, asr #7
   1aaf8:	ldr	r3, [pc, #12]	; 1ab0c <__assert_fail@plt+0x9408>
   1aafc:	cmp	r0, #0
   1ab00:	moveq	r0, r3
   1ab04:	ldr	r0, [r0]
   1ab08:	bx	lr
   1ab0c:	andeq	r4, r3, r8, asr #7
   1ab10:	ldr	r3, [pc, #12]	; 1ab24 <__assert_fail@plt+0x9420>
   1ab14:	cmp	r0, #0
   1ab18:	moveq	r0, r3
   1ab1c:	str	r1, [r0]
   1ab20:	bx	lr
   1ab24:	andeq	r4, r3, r8, asr #7
   1ab28:	ldr	r3, [pc, #52]	; 1ab64 <__assert_fail@plt+0x9460>
   1ab2c:	cmp	r0, #0
   1ab30:	moveq	r0, r3
   1ab34:	add	r3, r0, #8
   1ab38:	push	{lr}		; (str lr, [sp, #-4]!)
   1ab3c:	lsr	lr, r1, #5
   1ab40:	and	r1, r1, #31
   1ab44:	ldr	ip, [r3, lr, lsl #2]
   1ab48:	lsr	r0, ip, r1
   1ab4c:	eor	r2, r2, r0
   1ab50:	and	r2, r2, #1
   1ab54:	and	r0, r0, #1
   1ab58:	eor	r1, ip, r2, lsl r1
   1ab5c:	str	r1, [r3, lr, lsl #2]
   1ab60:	pop	{pc}		; (ldr pc, [sp], #4)
   1ab64:	andeq	r4, r3, r8, asr #7
   1ab68:	ldr	r3, [pc, #16]	; 1ab80 <__assert_fail@plt+0x947c>
   1ab6c:	cmp	r0, #0
   1ab70:	movne	r3, r0
   1ab74:	ldr	r0, [r3, #4]
   1ab78:	str	r1, [r3, #4]
   1ab7c:	bx	lr
   1ab80:	andeq	r4, r3, r8, asr #7
   1ab84:	ldr	r3, [pc, #44]	; 1abb8 <__assert_fail@plt+0x94b4>
   1ab88:	cmp	r0, #0
   1ab8c:	moveq	r0, r3
   1ab90:	mov	ip, #10
   1ab94:	cmp	r2, #0
   1ab98:	cmpne	r1, #0
   1ab9c:	str	ip, [r0]
   1aba0:	beq	1abb0 <__assert_fail@plt+0x94ac>
   1aba4:	str	r1, [r0, #40]	; 0x28
   1aba8:	str	r2, [r0, #44]	; 0x2c
   1abac:	bx	lr
   1abb0:	push	{r4, lr}
   1abb4:	bl	116e0 <abort@plt>
   1abb8:	andeq	r4, r3, r8, asr #7
   1abbc:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1abc0:	sub	sp, sp, #24
   1abc4:	ldr	ip, [pc, #108]	; 1ac38 <__assert_fail@plt+0x9534>
   1abc8:	ldr	r4, [sp, #56]	; 0x38
   1abcc:	mov	r9, r2
   1abd0:	cmp	r4, #0
   1abd4:	moveq	r4, ip
   1abd8:	mov	sl, r3
   1abdc:	mov	r7, r0
   1abe0:	mov	r8, r1
   1abe4:	bl	1156c <__errno_location@plt>
   1abe8:	ldr	r3, [r4, #44]	; 0x2c
   1abec:	mov	r1, r8
   1abf0:	ldr	r6, [r0]
   1abf4:	str	r3, [sp, #16]
   1abf8:	ldr	r2, [r4, #40]	; 0x28
   1abfc:	add	r3, r4, #8
   1ac00:	str	r3, [sp, #8]
   1ac04:	str	r2, [sp, #12]
   1ac08:	ldr	r2, [r4, #4]
   1ac0c:	mov	r5, r0
   1ac10:	str	r2, [sp, #4]
   1ac14:	ldr	ip, [r4]
   1ac18:	mov	r3, sl
   1ac1c:	mov	r2, r9
   1ac20:	mov	r0, r7
   1ac24:	str	ip, [sp]
   1ac28:	bl	19540 <__assert_fail@plt+0x7e3c>
   1ac2c:	str	r6, [r5]
   1ac30:	add	sp, sp, #24
   1ac34:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1ac38:	andeq	r4, r3, r8, asr #7
   1ac3c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ac40:	cmp	r2, #0
   1ac44:	sub	sp, sp, #36	; 0x24
   1ac48:	ldr	r4, [pc, #164]	; 1acf4 <__assert_fail@plt+0x95f0>
   1ac4c:	mov	r8, r1
   1ac50:	movne	r4, r2
   1ac54:	mov	r7, r0
   1ac58:	bl	1156c <__errno_location@plt>
   1ac5c:	ldr	r3, [r4, #44]	; 0x2c
   1ac60:	ldr	r5, [r4, #4]
   1ac64:	add	r9, r4, #8
   1ac68:	orr	r5, r5, #1
   1ac6c:	mov	r1, #0
   1ac70:	mov	r2, r7
   1ac74:	ldr	fp, [r0]
   1ac78:	str	r3, [sp, #16]
   1ac7c:	ldr	r3, [r4, #40]	; 0x28
   1ac80:	stmib	sp, {r5, r9}
   1ac84:	str	r3, [sp, #12]
   1ac88:	ldr	r3, [r4]
   1ac8c:	mov	r6, r0
   1ac90:	str	r3, [sp]
   1ac94:	mov	r0, r1
   1ac98:	mov	r3, r8
   1ac9c:	bl	19540 <__assert_fail@plt+0x7e3c>
   1aca0:	add	r1, r0, #1
   1aca4:	mov	r0, r1
   1aca8:	str	r1, [sp, #28]
   1acac:	bl	1e00c <__assert_fail@plt+0xc908>
   1acb0:	ldr	r3, [r4, #44]	; 0x2c
   1acb4:	ldr	r1, [sp, #28]
   1acb8:	str	r3, [sp, #16]
   1acbc:	ldr	r3, [r4, #40]	; 0x28
   1acc0:	str	r5, [sp, #4]
   1acc4:	str	r3, [sp, #12]
   1acc8:	str	r9, [sp, #8]
   1accc:	ldr	ip, [r4]
   1acd0:	mov	r3, r8
   1acd4:	mov	r2, r7
   1acd8:	str	ip, [sp]
   1acdc:	mov	sl, r0
   1ace0:	bl	19540 <__assert_fail@plt+0x7e3c>
   1ace4:	mov	r0, sl
   1ace8:	str	fp, [r6]
   1acec:	add	sp, sp, #36	; 0x24
   1acf0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1acf4:	andeq	r4, r3, r8, asr #7
   1acf8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1acfc:	cmp	r3, #0
   1ad00:	sub	sp, sp, #44	; 0x2c
   1ad04:	ldr	r4, [pc, #192]	; 1adcc <__assert_fail@plt+0x96c8>
   1ad08:	mov	r6, r2
   1ad0c:	movne	r4, r3
   1ad10:	mov	r9, r1
   1ad14:	mov	r8, r0
   1ad18:	bl	1156c <__errno_location@plt>
   1ad1c:	ldr	r3, [r4, #44]	; 0x2c
   1ad20:	ldr	r5, [r4, #4]
   1ad24:	add	sl, r4, #8
   1ad28:	cmp	r6, #0
   1ad2c:	orreq	r5, r5, #1
   1ad30:	mov	r1, #0
   1ad34:	ldr	r2, [r0]
   1ad38:	str	r3, [sp, #16]
   1ad3c:	ldr	r3, [r4, #40]	; 0x28
   1ad40:	stmib	sp, {r5, sl}
   1ad44:	str	r3, [sp, #12]
   1ad48:	ldr	r3, [r4]
   1ad4c:	mov	r7, r0
   1ad50:	str	r2, [sp, #28]
   1ad54:	str	r3, [sp]
   1ad58:	mov	r2, r8
   1ad5c:	mov	r3, r9
   1ad60:	mov	r0, r1
   1ad64:	bl	19540 <__assert_fail@plt+0x7e3c>
   1ad68:	add	r1, r0, #1
   1ad6c:	mov	fp, r0
   1ad70:	mov	r0, r1
   1ad74:	str	r1, [sp, #36]	; 0x24
   1ad78:	bl	1e00c <__assert_fail@plt+0xc908>
   1ad7c:	ldr	r3, [r4, #44]	; 0x2c
   1ad80:	mov	r2, r8
   1ad84:	str	r3, [sp, #16]
   1ad88:	ldr	r3, [r4, #40]	; 0x28
   1ad8c:	str	r5, [sp, #4]
   1ad90:	str	r3, [sp, #12]
   1ad94:	str	sl, [sp, #8]
   1ad98:	ldr	ip, [r4]
   1ad9c:	ldr	r1, [sp, #36]	; 0x24
   1ada0:	mov	r3, r9
   1ada4:	str	ip, [sp]
   1ada8:	str	r0, [sp, #32]
   1adac:	bl	19540 <__assert_fail@plt+0x7e3c>
   1adb0:	ldr	r2, [sp, #28]
   1adb4:	cmp	r6, #0
   1adb8:	str	r2, [r7]
   1adbc:	ldr	r0, [sp, #32]
   1adc0:	strne	fp, [r6]
   1adc4:	add	sp, sp, #44	; 0x2c
   1adc8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1adcc:	andeq	r4, r3, r8, asr #7
   1add0:	push	{r4, r5, r6, r7, r8, lr}
   1add4:	ldr	r6, [pc, #116]	; 1ae50 <__assert_fail@plt+0x974c>
   1add8:	ldr	r3, [r6, #4]
   1addc:	ldr	r7, [r6]
   1ade0:	cmp	r3, #1
   1ade4:	movgt	r5, r7
   1ade8:	movgt	r4, #1
   1adec:	ble	1ae0c <__assert_fail@plt+0x9708>
   1adf0:	ldr	r0, [r5, #12]
   1adf4:	bl	15334 <__assert_fail@plt+0x3c30>
   1adf8:	ldr	r3, [r6, #4]
   1adfc:	add	r4, r4, #1
   1ae00:	cmp	r3, r4
   1ae04:	add	r5, r5, #8
   1ae08:	bgt	1adf0 <__assert_fail@plt+0x96ec>
   1ae0c:	ldr	r0, [r7, #4]
   1ae10:	ldr	r4, [pc, #60]	; 1ae54 <__assert_fail@plt+0x9750>
   1ae14:	cmp	r0, r4
   1ae18:	beq	1ae2c <__assert_fail@plt+0x9728>
   1ae1c:	bl	15334 <__assert_fail@plt+0x3c30>
   1ae20:	mov	r3, #256	; 0x100
   1ae24:	str	r4, [r6, #12]
   1ae28:	str	r3, [r6, #8]
   1ae2c:	ldr	r4, [pc, #36]	; 1ae58 <__assert_fail@plt+0x9754>
   1ae30:	cmp	r7, r4
   1ae34:	beq	1ae44 <__assert_fail@plt+0x9740>
   1ae38:	mov	r0, r7
   1ae3c:	bl	15334 <__assert_fail@plt+0x3c30>
   1ae40:	str	r4, [r6]
   1ae44:	mov	r3, #1
   1ae48:	str	r3, [r6, #4]
   1ae4c:	pop	{r4, r5, r6, r7, r8, pc}
   1ae50:	ldrdeq	r4, [r3], -ip
   1ae54:	strdeq	r4, [r3], -r8
   1ae58:	andeq	r4, r3, r4, ror #5
   1ae5c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ae60:	sub	sp, sp, #44	; 0x2c
   1ae64:	mov	r5, r0
   1ae68:	mov	sl, r1
   1ae6c:	bl	1156c <__errno_location@plt>
   1ae70:	ldr	r4, [pc, #400]	; 1b008 <__assert_fail@plt+0x9904>
   1ae74:	cmn	r5, #-2147483647	; 0x80000001
   1ae78:	ldr	r6, [r4]
   1ae7c:	mov	r8, r0
   1ae80:	movne	r0, #0
   1ae84:	moveq	r0, #1
   1ae88:	ldr	r3, [r8]
   1ae8c:	orrs	r0, r0, r5, lsr #31
   1ae90:	str	r3, [sp, #24]
   1ae94:	bne	1b004 <__assert_fail@plt+0x9900>
   1ae98:	ldr	r2, [r4, #4]
   1ae9c:	cmp	r5, r2
   1aea0:	blt	1af00 <__assert_fail@plt+0x97fc>
   1aea4:	add	r7, r4, #8
   1aea8:	cmp	r6, r7
   1aeac:	str	r2, [sp, #36]	; 0x24
   1aeb0:	beq	1afd4 <__assert_fail@plt+0x98d0>
   1aeb4:	mov	r3, #8
   1aeb8:	sub	r2, r5, r2
   1aebc:	mov	r0, r6
   1aec0:	str	r3, [sp]
   1aec4:	add	r2, r2, #1
   1aec8:	mvn	r3, #-2147483648	; 0x80000000
   1aecc:	add	r1, sp, #36	; 0x24
   1aed0:	bl	1e228 <__assert_fail@plt+0xcb24>
   1aed4:	mov	r6, r0
   1aed8:	str	r0, [r4]
   1aedc:	ldr	r0, [r4, #4]
   1aee0:	ldr	r2, [sp, #36]	; 0x24
   1aee4:	mov	r1, #0
   1aee8:	sub	r2, r2, r0
   1aeec:	add	r0, r6, r0, lsl #3
   1aef0:	lsl	r2, r2, #3
   1aef4:	bl	11590 <memset@plt>
   1aef8:	ldr	r3, [sp, #36]	; 0x24
   1aefc:	str	r3, [r4, #4]
   1af00:	ldr	r4, [pc, #260]	; 1b00c <__assert_fail@plt+0x9908>
   1af04:	add	fp, r6, r5, lsl #3
   1af08:	ldr	r9, [r6, r5, lsl #3]
   1af0c:	ldr	r0, [r4, #4]
   1af10:	ldr	r3, [r4]
   1af14:	ldr	r7, [fp, #4]
   1af18:	ldr	r1, [r4, #44]	; 0x2c
   1af1c:	ldr	r2, [r4, #40]	; 0x28
   1af20:	orr	r0, r0, #1
   1af24:	str	r3, [sp]
   1af28:	add	r3, r4, #8
   1af2c:	str	r0, [sp, #28]
   1af30:	str	r0, [sp, #4]
   1af34:	str	r1, [sp, #16]
   1af38:	str	r2, [sp, #12]
   1af3c:	str	r3, [sp, #8]
   1af40:	mov	r0, r7
   1af44:	mov	r1, r9
   1af48:	mvn	r3, #0
   1af4c:	mov	r2, sl
   1af50:	bl	19540 <__assert_fail@plt+0x7e3c>
   1af54:	cmp	r9, r0
   1af58:	bhi	1afc0 <__assert_fail@plt+0x98bc>
   1af5c:	add	r3, r4, #48	; 0x30
   1af60:	add	r9, r0, #1
   1af64:	cmp	r7, r3
   1af68:	str	r9, [r6, r5, lsl #3]
   1af6c:	beq	1af78 <__assert_fail@plt+0x9874>
   1af70:	mov	r0, r7
   1af74:	bl	15334 <__assert_fail@plt+0x3c30>
   1af78:	mov	r0, r9
   1af7c:	bl	1e00c <__assert_fail@plt+0xc908>
   1af80:	ldr	ip, [r4, #44]	; 0x2c
   1af84:	ldr	r3, [r4]
   1af88:	ldr	lr, [r4, #40]	; 0x28
   1af8c:	ldr	r4, [pc, #124]	; 1b010 <__assert_fail@plt+0x990c>
   1af90:	mov	r2, sl
   1af94:	mov	r1, r9
   1af98:	str	r0, [fp, #4]
   1af9c:	str	r4, [sp, #8]
   1afa0:	ldr	r4, [sp, #28]
   1afa4:	str	r3, [sp]
   1afa8:	str	r4, [sp, #4]
   1afac:	str	ip, [sp, #16]
   1afb0:	str	lr, [sp, #12]
   1afb4:	mvn	r3, #0
   1afb8:	mov	r7, r0
   1afbc:	bl	19540 <__assert_fail@plt+0x7e3c>
   1afc0:	ldr	r3, [sp, #24]
   1afc4:	mov	r0, r7
   1afc8:	str	r3, [r8]
   1afcc:	add	sp, sp, #44	; 0x2c
   1afd0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1afd4:	mov	r3, #8
   1afd8:	sub	r2, r5, r2
   1afdc:	str	r3, [sp]
   1afe0:	add	r1, sp, #36	; 0x24
   1afe4:	add	r2, r2, #1
   1afe8:	mvn	r3, #-2147483648	; 0x80000000
   1afec:	bl	1e228 <__assert_fail@plt+0xcb24>
   1aff0:	mov	r6, r0
   1aff4:	ldm	r7, {r0, r1}
   1aff8:	str	r6, [r4]
   1affc:	stm	r6, {r0, r1}
   1b000:	b	1aedc <__assert_fail@plt+0x97d8>
   1b004:	bl	116e0 <abort@plt>
   1b008:	ldrdeq	r4, [r3], -ip
   1b00c:	andeq	r4, r3, r8, asr #7
   1b010:	ldrdeq	r4, [r3], -r0
   1b014:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b018:	sub	sp, sp, #52	; 0x34
   1b01c:	mov	r5, r0
   1b020:	mov	sl, r1
   1b024:	mov	fp, r2
   1b028:	bl	1156c <__errno_location@plt>
   1b02c:	ldr	r4, [pc, #408]	; 1b1cc <__assert_fail@plt+0x9ac8>
   1b030:	cmn	r5, #-2147483647	; 0x80000001
   1b034:	ldr	r6, [r4]
   1b038:	mov	r8, r0
   1b03c:	movne	r0, #0
   1b040:	moveq	r0, #1
   1b044:	ldr	r3, [r8]
   1b048:	orrs	r0, r0, r5, lsr #31
   1b04c:	str	r3, [sp, #28]
   1b050:	bne	1b1c8 <__assert_fail@plt+0x9ac4>
   1b054:	ldr	r2, [r4, #4]
   1b058:	cmp	r5, r2
   1b05c:	blt	1b0bc <__assert_fail@plt+0x99b8>
   1b060:	add	r7, r4, #8
   1b064:	cmp	r6, r7
   1b068:	str	r2, [sp, #44]	; 0x2c
   1b06c:	beq	1b198 <__assert_fail@plt+0x9a94>
   1b070:	mov	r3, #8
   1b074:	sub	r2, r5, r2
   1b078:	mov	r0, r6
   1b07c:	str	r3, [sp]
   1b080:	add	r2, r2, #1
   1b084:	mvn	r3, #-2147483648	; 0x80000000
   1b088:	add	r1, sp, #44	; 0x2c
   1b08c:	bl	1e228 <__assert_fail@plt+0xcb24>
   1b090:	mov	r6, r0
   1b094:	str	r0, [r4]
   1b098:	ldr	r0, [r4, #4]
   1b09c:	ldr	r2, [sp, #44]	; 0x2c
   1b0a0:	mov	r1, #0
   1b0a4:	sub	r2, r2, r0
   1b0a8:	add	r0, r6, r0, lsl #3
   1b0ac:	lsl	r2, r2, #3
   1b0b0:	bl	11590 <memset@plt>
   1b0b4:	ldr	r3, [sp, #44]	; 0x2c
   1b0b8:	str	r3, [r4, #4]
   1b0bc:	ldr	r4, [pc, #268]	; 1b1d0 <__assert_fail@plt+0x9acc>
   1b0c0:	add	r3, r6, r5, lsl #3
   1b0c4:	str	r3, [sp, #32]
   1b0c8:	ldr	r7, [r3, #4]
   1b0cc:	ldr	r0, [r4, #4]
   1b0d0:	ldr	r3, [r4]
   1b0d4:	ldr	r9, [r6, r5, lsl #3]
   1b0d8:	ldr	r1, [r4, #44]	; 0x2c
   1b0dc:	ldr	r2, [r4, #40]	; 0x28
   1b0e0:	orr	r0, r0, #1
   1b0e4:	str	r3, [sp]
   1b0e8:	add	r3, r4, #8
   1b0ec:	str	r0, [sp, #36]	; 0x24
   1b0f0:	str	r0, [sp, #4]
   1b0f4:	str	r1, [sp, #16]
   1b0f8:	str	r2, [sp, #12]
   1b0fc:	str	r3, [sp, #8]
   1b100:	mov	r0, r7
   1b104:	mov	r1, r9
   1b108:	mov	r3, fp
   1b10c:	mov	r2, sl
   1b110:	bl	19540 <__assert_fail@plt+0x7e3c>
   1b114:	cmp	r9, r0
   1b118:	bhi	1b184 <__assert_fail@plt+0x9a80>
   1b11c:	add	r3, r4, #48	; 0x30
   1b120:	add	r9, r0, #1
   1b124:	cmp	r7, r3
   1b128:	str	r9, [r6, r5, lsl #3]
   1b12c:	beq	1b138 <__assert_fail@plt+0x9a34>
   1b130:	mov	r0, r7
   1b134:	bl	15334 <__assert_fail@plt+0x3c30>
   1b138:	mov	r0, r9
   1b13c:	bl	1e00c <__assert_fail@plt+0xc908>
   1b140:	ldr	ip, [sp, #32]
   1b144:	ldr	lr, [r4, #44]	; 0x2c
   1b148:	ldr	r5, [r4, #40]	; 0x28
   1b14c:	mov	r3, fp
   1b150:	mov	r2, sl
   1b154:	mov	r1, r9
   1b158:	str	r0, [ip, #4]
   1b15c:	ldr	ip, [r4]
   1b160:	ldr	r4, [pc, #108]	; 1b1d4 <__assert_fail@plt+0x9ad0>
   1b164:	str	lr, [sp, #16]
   1b168:	str	r4, [sp, #8]
   1b16c:	ldr	r4, [sp, #36]	; 0x24
   1b170:	str	r5, [sp, #12]
   1b174:	str	r4, [sp, #4]
   1b178:	str	ip, [sp]
   1b17c:	mov	r7, r0
   1b180:	bl	19540 <__assert_fail@plt+0x7e3c>
   1b184:	ldr	r3, [sp, #28]
   1b188:	mov	r0, r7
   1b18c:	str	r3, [r8]
   1b190:	add	sp, sp, #52	; 0x34
   1b194:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b198:	mov	r3, #8
   1b19c:	sub	r2, r5, r2
   1b1a0:	str	r3, [sp]
   1b1a4:	add	r1, sp, #44	; 0x2c
   1b1a8:	add	r2, r2, #1
   1b1ac:	mvn	r3, #-2147483648	; 0x80000000
   1b1b0:	bl	1e228 <__assert_fail@plt+0xcb24>
   1b1b4:	mov	r6, r0
   1b1b8:	ldm	r7, {r0, r1}
   1b1bc:	str	r6, [r4]
   1b1c0:	stm	r6, {r0, r1}
   1b1c4:	b	1b098 <__assert_fail@plt+0x9994>
   1b1c8:	bl	116e0 <abort@plt>
   1b1cc:	ldrdeq	r4, [r3], -ip
   1b1d0:	andeq	r4, r3, r8, asr #7
   1b1d4:	ldrdeq	r4, [r3], -r0
   1b1d8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b1dc:	sub	sp, sp, #44	; 0x2c
   1b1e0:	mov	sl, r0
   1b1e4:	bl	1156c <__errno_location@plt>
   1b1e8:	ldr	r4, [pc, #352]	; 1b350 <__assert_fail@plt+0x9c4c>
   1b1ec:	ldr	r2, [r4, #4]
   1b1f0:	ldr	r5, [r4]
   1b1f4:	cmp	r2, #0
   1b1f8:	ldr	r3, [r0]
   1b1fc:	mov	r8, r0
   1b200:	str	r3, [sp, #28]
   1b204:	bgt	1b260 <__assert_fail@plt+0x9b5c>
   1b208:	add	r6, r4, #8
   1b20c:	cmp	r5, r6
   1b210:	str	r2, [sp, #36]	; 0x24
   1b214:	beq	1b320 <__assert_fail@plt+0x9c1c>
   1b218:	mov	r3, #8
   1b21c:	mov	r0, r5
   1b220:	str	r3, [sp]
   1b224:	rsb	r2, r2, #1
   1b228:	mvn	r3, #-2147483648	; 0x80000000
   1b22c:	add	r1, sp, #36	; 0x24
   1b230:	bl	1e228 <__assert_fail@plt+0xcb24>
   1b234:	mov	r5, r0
   1b238:	str	r0, [r4]
   1b23c:	ldr	r0, [r4, #4]
   1b240:	ldr	r2, [sp, #36]	; 0x24
   1b244:	mov	r1, #0
   1b248:	sub	r2, r2, r0
   1b24c:	add	r0, r5, r0, lsl #3
   1b250:	lsl	r2, r2, #3
   1b254:	bl	11590 <memset@plt>
   1b258:	ldr	r3, [sp, #36]	; 0x24
   1b25c:	str	r3, [r4, #4]
   1b260:	ldr	r4, [pc, #236]	; 1b354 <__assert_fail@plt+0x9c50>
   1b264:	ldr	r9, [r5]
   1b268:	ldr	r6, [r5, #4]
   1b26c:	ldr	r7, [r4, #4]
   1b270:	ldr	r1, [r4, #44]	; 0x2c
   1b274:	ldr	r2, [r4, #40]	; 0x28
   1b278:	ldr	r3, [r4]
   1b27c:	orr	r7, r7, #1
   1b280:	add	fp, r4, #8
   1b284:	str	r1, [sp, #16]
   1b288:	str	r2, [sp, #12]
   1b28c:	str	r3, [sp]
   1b290:	str	r7, [sp, #4]
   1b294:	str	fp, [sp, #8]
   1b298:	mov	r1, r9
   1b29c:	mov	r0, r6
   1b2a0:	mvn	r3, #0
   1b2a4:	mov	r2, sl
   1b2a8:	bl	19540 <__assert_fail@plt+0x7e3c>
   1b2ac:	cmp	r9, r0
   1b2b0:	bhi	1b30c <__assert_fail@plt+0x9c08>
   1b2b4:	add	r3, r4, #48	; 0x30
   1b2b8:	add	r9, r0, #1
   1b2bc:	cmp	r6, r3
   1b2c0:	str	r9, [r5]
   1b2c4:	beq	1b2d0 <__assert_fail@plt+0x9bcc>
   1b2c8:	mov	r0, r6
   1b2cc:	bl	15334 <__assert_fail@plt+0x3c30>
   1b2d0:	mov	r0, r9
   1b2d4:	bl	1e00c <__assert_fail@plt+0xc908>
   1b2d8:	ldr	ip, [r4, #44]	; 0x2c
   1b2dc:	ldr	r3, [r4]
   1b2e0:	ldr	lr, [r4, #40]	; 0x28
   1b2e4:	mov	r2, sl
   1b2e8:	mov	r1, r9
   1b2ec:	str	r0, [r5, #4]
   1b2f0:	str	r3, [sp]
   1b2f4:	stmib	sp, {r7, fp}
   1b2f8:	str	ip, [sp, #16]
   1b2fc:	str	lr, [sp, #12]
   1b300:	mvn	r3, #0
   1b304:	mov	r6, r0
   1b308:	bl	19540 <__assert_fail@plt+0x7e3c>
   1b30c:	ldr	r3, [sp, #28]
   1b310:	mov	r0, r6
   1b314:	str	r3, [r8]
   1b318:	add	sp, sp, #44	; 0x2c
   1b31c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b320:	mov	r3, #8
   1b324:	str	r3, [sp]
   1b328:	add	r1, sp, #36	; 0x24
   1b32c:	rsb	r2, r2, #1
   1b330:	mvn	r3, #-2147483648	; 0x80000000
   1b334:	mov	r0, #0
   1b338:	bl	1e228 <__assert_fail@plt+0xcb24>
   1b33c:	mov	r5, r0
   1b340:	ldm	r6, {r0, r1}
   1b344:	str	r5, [r4]
   1b348:	stm	r5, {r0, r1}
   1b34c:	b	1b23c <__assert_fail@plt+0x9b38>
   1b350:	ldrdeq	r4, [r3], -ip
   1b354:	andeq	r4, r3, r8, asr #7
   1b358:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b35c:	sub	sp, sp, #44	; 0x2c
   1b360:	mov	r9, r0
   1b364:	mov	sl, r1
   1b368:	bl	1156c <__errno_location@plt>
   1b36c:	ldr	r4, [pc, #364]	; 1b4e0 <__assert_fail@plt+0x9ddc>
   1b370:	ldr	r2, [r4, #4]
   1b374:	ldr	r5, [r4]
   1b378:	cmp	r2, #0
   1b37c:	ldr	r3, [r0]
   1b380:	mov	r7, r0
   1b384:	str	r3, [sp, #24]
   1b388:	bgt	1b3e4 <__assert_fail@plt+0x9ce0>
   1b38c:	add	r6, r4, #8
   1b390:	cmp	r5, r6
   1b394:	str	r2, [sp, #36]	; 0x24
   1b398:	beq	1b4b0 <__assert_fail@plt+0x9dac>
   1b39c:	mov	r3, #8
   1b3a0:	mov	r0, r5
   1b3a4:	str	r3, [sp]
   1b3a8:	rsb	r2, r2, #1
   1b3ac:	mvn	r3, #-2147483648	; 0x80000000
   1b3b0:	add	r1, sp, #36	; 0x24
   1b3b4:	bl	1e228 <__assert_fail@plt+0xcb24>
   1b3b8:	mov	r5, r0
   1b3bc:	str	r0, [r4]
   1b3c0:	ldr	r0, [r4, #4]
   1b3c4:	ldr	r2, [sp, #36]	; 0x24
   1b3c8:	mov	r1, #0
   1b3cc:	sub	r2, r2, r0
   1b3d0:	add	r0, r5, r0, lsl #3
   1b3d4:	lsl	r2, r2, #3
   1b3d8:	bl	11590 <memset@plt>
   1b3dc:	ldr	r3, [sp, #36]	; 0x24
   1b3e0:	str	r3, [r4, #4]
   1b3e4:	ldr	r4, [pc, #248]	; 1b4e4 <__assert_fail@plt+0x9de0>
   1b3e8:	ldr	r8, [r5]
   1b3ec:	ldr	r6, [r5, #4]
   1b3f0:	ldr	r0, [r4, #4]
   1b3f4:	ldr	r1, [r4, #44]	; 0x2c
   1b3f8:	ldr	r2, [r4, #40]	; 0x28
   1b3fc:	ldr	r3, [r4]
   1b400:	orr	r0, r0, #1
   1b404:	add	fp, r4, #8
   1b408:	str	r0, [sp, #28]
   1b40c:	str	r0, [sp, #4]
   1b410:	str	r1, [sp, #16]
   1b414:	str	r2, [sp, #12]
   1b418:	str	r3, [sp]
   1b41c:	str	fp, [sp, #8]
   1b420:	mov	r1, r8
   1b424:	mov	r0, r6
   1b428:	mov	r3, sl
   1b42c:	mov	r2, r9
   1b430:	bl	19540 <__assert_fail@plt+0x7e3c>
   1b434:	cmp	r8, r0
   1b438:	bhi	1b49c <__assert_fail@plt+0x9d98>
   1b43c:	add	r3, r4, #48	; 0x30
   1b440:	add	r8, r0, #1
   1b444:	cmp	r6, r3
   1b448:	str	r8, [r5]
   1b44c:	beq	1b458 <__assert_fail@plt+0x9d54>
   1b450:	mov	r0, r6
   1b454:	bl	15334 <__assert_fail@plt+0x3c30>
   1b458:	mov	r0, r8
   1b45c:	bl	1e00c <__assert_fail@plt+0xc908>
   1b460:	ldr	lr, [r4, #44]	; 0x2c
   1b464:	ldr	ip, [r4]
   1b468:	mov	r3, sl
   1b46c:	mov	r2, r9
   1b470:	mov	r1, r8
   1b474:	str	r0, [r5, #4]
   1b478:	ldr	r5, [r4, #40]	; 0x28
   1b47c:	ldr	r4, [sp, #28]
   1b480:	str	fp, [sp, #8]
   1b484:	str	r4, [sp, #4]
   1b488:	str	lr, [sp, #16]
   1b48c:	str	r5, [sp, #12]
   1b490:	str	ip, [sp]
   1b494:	mov	r6, r0
   1b498:	bl	19540 <__assert_fail@plt+0x7e3c>
   1b49c:	ldr	r3, [sp, #24]
   1b4a0:	mov	r0, r6
   1b4a4:	str	r3, [r7]
   1b4a8:	add	sp, sp, #44	; 0x2c
   1b4ac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b4b0:	mov	r3, #8
   1b4b4:	str	r3, [sp]
   1b4b8:	add	r1, sp, #36	; 0x24
   1b4bc:	rsb	r2, r2, #1
   1b4c0:	mvn	r3, #-2147483648	; 0x80000000
   1b4c4:	mov	r0, #0
   1b4c8:	bl	1e228 <__assert_fail@plt+0xcb24>
   1b4cc:	mov	r5, r0
   1b4d0:	ldm	r6, {r0, r1}
   1b4d4:	str	r5, [r4]
   1b4d8:	stm	r5, {r0, r1}
   1b4dc:	b	1b3c0 <__assert_fail@plt+0x9cbc>
   1b4e0:	ldrdeq	r4, [r3], -ip
   1b4e4:	andeq	r4, r3, r8, asr #7
   1b4e8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b4ec:	sub	sp, sp, #132	; 0x84
   1b4f0:	mov	r5, r1
   1b4f4:	mov	r4, r0
   1b4f8:	mov	r9, r2
   1b4fc:	add	r0, sp, #80	; 0x50
   1b500:	mov	r2, #48	; 0x30
   1b504:	mov	r1, #0
   1b508:	bl	11590 <memset@plt>
   1b50c:	cmp	r5, #10
   1b510:	beq	1b6c8 <__assert_fail@plt+0x9fc4>
   1b514:	add	lr, sp, #80	; 0x50
   1b518:	str	r5, [sp, #80]	; 0x50
   1b51c:	ldm	lr!, {r0, r1, r2, r3}
   1b520:	add	ip, sp, #32
   1b524:	ldr	r6, [pc, #416]	; 1b6cc <__assert_fail@plt+0x9fc8>
   1b528:	stmia	ip!, {r0, r1, r2, r3}
   1b52c:	ldm	lr!, {r0, r1, r2, r3}
   1b530:	stmia	ip!, {r0, r1, r2, r3}
   1b534:	ldm	lr, {r0, r1, r2, r3}
   1b538:	stm	ip, {r0, r1, r2, r3}
   1b53c:	bl	1156c <__errno_location@plt>
   1b540:	cmn	r4, #-2147483647	; 0x80000001
   1b544:	ldr	r5, [r6]
   1b548:	mov	r7, r0
   1b54c:	movne	r0, #0
   1b550:	moveq	r0, #1
   1b554:	ldr	r3, [r7]
   1b558:	orrs	r0, r0, r4, lsr #31
   1b55c:	str	r3, [sp, #24]
   1b560:	bne	1b6c8 <__assert_fail@plt+0x9fc4>
   1b564:	ldr	r2, [r6, #4]
   1b568:	cmp	r4, r2
   1b56c:	blt	1b5cc <__assert_fail@plt+0x9ec8>
   1b570:	add	r8, r6, #8
   1b574:	cmp	r5, r8
   1b578:	str	r2, [sp, #80]	; 0x50
   1b57c:	beq	1b698 <__assert_fail@plt+0x9f94>
   1b580:	mov	r3, #8
   1b584:	sub	r2, r4, r2
   1b588:	mov	r0, r5
   1b58c:	str	r3, [sp]
   1b590:	add	r2, r2, #1
   1b594:	add	r1, sp, #80	; 0x50
   1b598:	mvn	r3, #-2147483648	; 0x80000000
   1b59c:	bl	1e228 <__assert_fail@plt+0xcb24>
   1b5a0:	mov	r5, r0
   1b5a4:	str	r0, [r6]
   1b5a8:	ldr	r0, [r6, #4]
   1b5ac:	ldr	r2, [sp, #80]	; 0x50
   1b5b0:	mov	r1, #0
   1b5b4:	sub	r2, r2, r0
   1b5b8:	add	r0, r5, r0, lsl #3
   1b5bc:	lsl	r2, r2, #3
   1b5c0:	bl	11590 <memset@plt>
   1b5c4:	ldr	r3, [sp, #80]	; 0x50
   1b5c8:	str	r3, [r6, #4]
   1b5cc:	add	fp, r5, r4, lsl #3
   1b5d0:	ldr	r1, [sp, #36]	; 0x24
   1b5d4:	ldr	r8, [r5, r4, lsl #3]
   1b5d8:	ldr	r6, [fp, #4]
   1b5dc:	ldr	r2, [sp, #72]	; 0x48
   1b5e0:	ldr	r3, [sp, #32]
   1b5e4:	ldr	ip, [sp, #76]	; 0x4c
   1b5e8:	orr	r1, r1, #1
   1b5ec:	add	sl, sp, #40	; 0x28
   1b5f0:	str	r1, [sp, #28]
   1b5f4:	str	r1, [sp, #4]
   1b5f8:	str	r2, [sp, #12]
   1b5fc:	str	r3, [sp]
   1b600:	mov	r0, r6
   1b604:	mov	r1, r8
   1b608:	str	ip, [sp, #16]
   1b60c:	str	sl, [sp, #8]
   1b610:	mvn	r3, #0
   1b614:	mov	r2, r9
   1b618:	bl	19540 <__assert_fail@plt+0x7e3c>
   1b61c:	cmp	r8, r0
   1b620:	bhi	1b684 <__assert_fail@plt+0x9f80>
   1b624:	ldr	r3, [pc, #164]	; 1b6d0 <__assert_fail@plt+0x9fcc>
   1b628:	add	r8, r0, #1
   1b62c:	cmp	r6, r3
   1b630:	str	r8, [r5, r4, lsl #3]
   1b634:	beq	1b640 <__assert_fail@plt+0x9f3c>
   1b638:	mov	r0, r6
   1b63c:	bl	15334 <__assert_fail@plt+0x3c30>
   1b640:	mov	r0, r8
   1b644:	bl	1e00c <__assert_fail@plt+0xc908>
   1b648:	ldr	lr, [sp, #76]	; 0x4c
   1b64c:	ldr	r3, [sp, #32]
   1b650:	ldr	ip, [sp, #72]	; 0x48
   1b654:	ldr	r4, [sp, #28]
   1b658:	mov	r2, r9
   1b65c:	mov	r1, r8
   1b660:	str	r0, [fp, #4]
   1b664:	str	r3, [sp]
   1b668:	str	sl, [sp, #8]
   1b66c:	str	r4, [sp, #4]
   1b670:	str	lr, [sp, #16]
   1b674:	str	ip, [sp, #12]
   1b678:	mvn	r3, #0
   1b67c:	mov	r6, r0
   1b680:	bl	19540 <__assert_fail@plt+0x7e3c>
   1b684:	ldr	r3, [sp, #24]
   1b688:	mov	r0, r6
   1b68c:	str	r3, [r7]
   1b690:	add	sp, sp, #132	; 0x84
   1b694:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b698:	mov	r3, #8
   1b69c:	sub	r2, r4, r2
   1b6a0:	add	r1, sp, #80	; 0x50
   1b6a4:	str	r3, [sp]
   1b6a8:	add	r2, r2, #1
   1b6ac:	mvn	r3, #-2147483648	; 0x80000000
   1b6b0:	bl	1e228 <__assert_fail@plt+0xcb24>
   1b6b4:	mov	r5, r0
   1b6b8:	ldm	r8, {r0, r1}
   1b6bc:	str	r5, [r6]
   1b6c0:	stm	r5, {r0, r1}
   1b6c4:	b	1b5a8 <__assert_fail@plt+0x9ea4>
   1b6c8:	bl	116e0 <abort@plt>
   1b6cc:	ldrdeq	r4, [r3], -ip
   1b6d0:	strdeq	r4, [r3], -r8
   1b6d4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b6d8:	sub	sp, sp, #132	; 0x84
   1b6dc:	mov	r5, r1
   1b6e0:	mov	r4, r0
   1b6e4:	mov	r9, r2
   1b6e8:	add	r0, sp, #80	; 0x50
   1b6ec:	mov	r2, #48	; 0x30
   1b6f0:	mov	r1, #0
   1b6f4:	mov	sl, r3
   1b6f8:	bl	11590 <memset@plt>
   1b6fc:	cmp	r5, #10
   1b700:	beq	1b8bc <__assert_fail@plt+0xa1b8>
   1b704:	add	lr, sp, #80	; 0x50
   1b708:	str	r5, [sp, #80]	; 0x50
   1b70c:	ldm	lr!, {r0, r1, r2, r3}
   1b710:	add	ip, sp, #32
   1b714:	ldr	r6, [pc, #420]	; 1b8c0 <__assert_fail@plt+0xa1bc>
   1b718:	stmia	ip!, {r0, r1, r2, r3}
   1b71c:	ldm	lr!, {r0, r1, r2, r3}
   1b720:	stmia	ip!, {r0, r1, r2, r3}
   1b724:	ldm	lr, {r0, r1, r2, r3}
   1b728:	stm	ip, {r0, r1, r2, r3}
   1b72c:	bl	1156c <__errno_location@plt>
   1b730:	cmn	r4, #-2147483647	; 0x80000001
   1b734:	ldr	r5, [r6]
   1b738:	mov	r7, r0
   1b73c:	movne	r0, #0
   1b740:	moveq	r0, #1
   1b744:	ldr	r3, [r7]
   1b748:	orrs	r0, r0, r4, lsr #31
   1b74c:	str	r3, [sp, #24]
   1b750:	bne	1b8bc <__assert_fail@plt+0xa1b8>
   1b754:	ldr	r2, [r6, #4]
   1b758:	cmp	r4, r2
   1b75c:	blt	1b7bc <__assert_fail@plt+0xa0b8>
   1b760:	add	r8, r6, #8
   1b764:	cmp	r5, r8
   1b768:	str	r2, [sp, #80]	; 0x50
   1b76c:	beq	1b88c <__assert_fail@plt+0xa188>
   1b770:	mov	r3, #8
   1b774:	sub	r2, r4, r2
   1b778:	mov	r0, r5
   1b77c:	str	r3, [sp]
   1b780:	add	r2, r2, #1
   1b784:	add	r1, sp, #80	; 0x50
   1b788:	mvn	r3, #-2147483648	; 0x80000000
   1b78c:	bl	1e228 <__assert_fail@plt+0xcb24>
   1b790:	mov	r5, r0
   1b794:	str	r0, [r6]
   1b798:	ldr	r0, [r6, #4]
   1b79c:	ldr	r2, [sp, #80]	; 0x50
   1b7a0:	mov	r1, #0
   1b7a4:	sub	r2, r2, r0
   1b7a8:	add	r0, r5, r0, lsl #3
   1b7ac:	lsl	r2, r2, #3
   1b7b0:	bl	11590 <memset@plt>
   1b7b4:	ldr	r3, [sp, #80]	; 0x50
   1b7b8:	str	r3, [r6, #4]
   1b7bc:	add	fp, r5, r4, lsl #3
   1b7c0:	ldr	r3, [sp, #32]
   1b7c4:	ldr	r1, [sp, #36]	; 0x24
   1b7c8:	ldr	r8, [r5, r4, lsl #3]
   1b7cc:	ldr	r6, [fp, #4]
   1b7d0:	ldr	r2, [sp, #72]	; 0x48
   1b7d4:	ldr	ip, [sp, #76]	; 0x4c
   1b7d8:	orr	r1, r1, #1
   1b7dc:	str	r3, [sp]
   1b7e0:	add	r3, sp, #40	; 0x28
   1b7e4:	str	r1, [sp, #28]
   1b7e8:	str	r1, [sp, #4]
   1b7ec:	str	r2, [sp, #12]
   1b7f0:	str	r3, [sp, #8]
   1b7f4:	mov	r0, r6
   1b7f8:	mov	r1, r8
   1b7fc:	str	ip, [sp, #16]
   1b800:	mov	r3, sl
   1b804:	mov	r2, r9
   1b808:	bl	19540 <__assert_fail@plt+0x7e3c>
   1b80c:	cmp	r8, r0
   1b810:	bhi	1b878 <__assert_fail@plt+0xa174>
   1b814:	ldr	r3, [pc, #168]	; 1b8c4 <__assert_fail@plt+0xa1c0>
   1b818:	add	r8, r0, #1
   1b81c:	cmp	r6, r3
   1b820:	str	r8, [r5, r4, lsl #3]
   1b824:	beq	1b830 <__assert_fail@plt+0xa12c>
   1b828:	mov	r0, r6
   1b82c:	bl	15334 <__assert_fail@plt+0x3c30>
   1b830:	mov	r0, r8
   1b834:	bl	1e00c <__assert_fail@plt+0xc908>
   1b838:	add	lr, sp, #40	; 0x28
   1b83c:	ldr	ip, [sp, #76]	; 0x4c
   1b840:	ldr	r4, [sp, #72]	; 0x48
   1b844:	ldr	r5, [sp, #28]
   1b848:	mov	r3, sl
   1b84c:	mov	r2, r9
   1b850:	mov	r1, r8
   1b854:	str	r0, [fp, #4]
   1b858:	str	lr, [sp, #8]
   1b85c:	ldr	lr, [sp, #32]
   1b860:	str	r5, [sp, #4]
   1b864:	str	ip, [sp, #16]
   1b868:	str	r4, [sp, #12]
   1b86c:	str	lr, [sp]
   1b870:	mov	r6, r0
   1b874:	bl	19540 <__assert_fail@plt+0x7e3c>
   1b878:	ldr	r3, [sp, #24]
   1b87c:	mov	r0, r6
   1b880:	str	r3, [r7]
   1b884:	add	sp, sp, #132	; 0x84
   1b888:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b88c:	mov	r3, #8
   1b890:	sub	r2, r4, r2
   1b894:	add	r1, sp, #80	; 0x50
   1b898:	str	r3, [sp]
   1b89c:	add	r2, r2, #1
   1b8a0:	mvn	r3, #-2147483648	; 0x80000000
   1b8a4:	bl	1e228 <__assert_fail@plt+0xcb24>
   1b8a8:	mov	r5, r0
   1b8ac:	ldm	r8, {r0, r1}
   1b8b0:	str	r5, [r6]
   1b8b4:	stm	r5, {r0, r1}
   1b8b8:	b	1b798 <__assert_fail@plt+0xa094>
   1b8bc:	bl	116e0 <abort@plt>
   1b8c0:	ldrdeq	r4, [r3], -ip
   1b8c4:	strdeq	r4, [r3], -r8
   1b8c8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b8cc:	sub	sp, sp, #124	; 0x7c
   1b8d0:	mov	r4, r0
   1b8d4:	mov	r9, r1
   1b8d8:	add	r0, sp, #72	; 0x48
   1b8dc:	mov	r2, #48	; 0x30
   1b8e0:	mov	r1, #0
   1b8e4:	bl	11590 <memset@plt>
   1b8e8:	cmp	r4, #10
   1b8ec:	beq	1ba78 <__assert_fail@plt+0xa374>
   1b8f0:	add	lr, sp, #72	; 0x48
   1b8f4:	str	r4, [sp, #72]	; 0x48
   1b8f8:	ldm	lr!, {r0, r1, r2, r3}
   1b8fc:	add	ip, sp, #24
   1b900:	ldr	r5, [pc, #372]	; 1ba7c <__assert_fail@plt+0xa378>
   1b904:	stmia	ip!, {r0, r1, r2, r3}
   1b908:	ldm	lr!, {r0, r1, r2, r3}
   1b90c:	stmia	ip!, {r0, r1, r2, r3}
   1b910:	ldm	lr, {r0, r1, r2, r3}
   1b914:	stm	ip, {r0, r1, r2, r3}
   1b918:	bl	1156c <__errno_location@plt>
   1b91c:	ldr	r2, [r5, #4]
   1b920:	ldr	r4, [r5]
   1b924:	cmp	r2, #0
   1b928:	mov	r7, r0
   1b92c:	ldr	fp, [r0]
   1b930:	bgt	1b98c <__assert_fail@plt+0xa288>
   1b934:	add	r6, r5, #8
   1b938:	cmp	r4, r6
   1b93c:	str	r2, [sp, #72]	; 0x48
   1b940:	beq	1ba48 <__assert_fail@plt+0xa344>
   1b944:	mov	r3, #8
   1b948:	mov	r0, r4
   1b94c:	str	r3, [sp]
   1b950:	rsb	r2, r2, #1
   1b954:	add	r1, sp, #72	; 0x48
   1b958:	mvn	r3, #-2147483648	; 0x80000000
   1b95c:	bl	1e228 <__assert_fail@plt+0xcb24>
   1b960:	mov	r4, r0
   1b964:	str	r0, [r5]
   1b968:	ldr	r0, [r5, #4]
   1b96c:	ldr	r2, [sp, #72]	; 0x48
   1b970:	mov	r1, #0
   1b974:	sub	r2, r2, r0
   1b978:	add	r0, r4, r0, lsl #3
   1b97c:	lsl	r2, r2, #3
   1b980:	bl	11590 <memset@plt>
   1b984:	ldr	r3, [sp, #72]	; 0x48
   1b988:	str	r3, [r5, #4]
   1b98c:	ldr	r6, [sp, #28]
   1b990:	ldr	r8, [r4]
   1b994:	ldr	r5, [r4, #4]
   1b998:	ldr	r2, [sp, #64]	; 0x40
   1b99c:	ldr	r3, [sp, #24]
   1b9a0:	ldr	ip, [sp, #68]	; 0x44
   1b9a4:	orr	r6, r6, #1
   1b9a8:	add	sl, sp, #32
   1b9ac:	str	r2, [sp, #12]
   1b9b0:	str	r3, [sp]
   1b9b4:	str	r6, [sp, #4]
   1b9b8:	mov	r1, r8
   1b9bc:	mov	r0, r5
   1b9c0:	str	ip, [sp, #16]
   1b9c4:	str	sl, [sp, #8]
   1b9c8:	mvn	r3, #0
   1b9cc:	mov	r2, r9
   1b9d0:	bl	19540 <__assert_fail@plt+0x7e3c>
   1b9d4:	cmp	r8, r0
   1b9d8:	bhi	1ba38 <__assert_fail@plt+0xa334>
   1b9dc:	ldr	r3, [pc, #156]	; 1ba80 <__assert_fail@plt+0xa37c>
   1b9e0:	add	r8, r0, #1
   1b9e4:	cmp	r5, r3
   1b9e8:	str	r8, [r4]
   1b9ec:	beq	1b9f8 <__assert_fail@plt+0xa2f4>
   1b9f0:	mov	r0, r5
   1b9f4:	bl	15334 <__assert_fail@plt+0x3c30>
   1b9f8:	mov	r0, r8
   1b9fc:	bl	1e00c <__assert_fail@plt+0xc908>
   1ba00:	ldr	lr, [sp, #68]	; 0x44
   1ba04:	ldr	r3, [sp, #24]
   1ba08:	ldr	ip, [sp, #64]	; 0x40
   1ba0c:	mov	r2, r9
   1ba10:	mov	r1, r8
   1ba14:	str	r0, [r4, #4]
   1ba18:	str	r3, [sp]
   1ba1c:	str	sl, [sp, #8]
   1ba20:	str	r6, [sp, #4]
   1ba24:	str	lr, [sp, #16]
   1ba28:	str	ip, [sp, #12]
   1ba2c:	mvn	r3, #0
   1ba30:	mov	r5, r0
   1ba34:	bl	19540 <__assert_fail@plt+0x7e3c>
   1ba38:	mov	r0, r5
   1ba3c:	str	fp, [r7]
   1ba40:	add	sp, sp, #124	; 0x7c
   1ba44:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ba48:	mov	r3, #8
   1ba4c:	add	r1, sp, #72	; 0x48
   1ba50:	str	r3, [sp]
   1ba54:	rsb	r2, r2, #1
   1ba58:	mvn	r3, #-2147483648	; 0x80000000
   1ba5c:	mov	r0, #0
   1ba60:	bl	1e228 <__assert_fail@plt+0xcb24>
   1ba64:	mov	r4, r0
   1ba68:	ldm	r6, {r0, r1}
   1ba6c:	str	r4, [r5]
   1ba70:	stm	r4, {r0, r1}
   1ba74:	b	1b968 <__assert_fail@plt+0xa264>
   1ba78:	bl	116e0 <abort@plt>
   1ba7c:	ldrdeq	r4, [r3], -ip
   1ba80:	strdeq	r4, [r3], -r8
   1ba84:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ba88:	sub	sp, sp, #132	; 0x84
   1ba8c:	mov	r4, r0
   1ba90:	mov	r9, r1
   1ba94:	mov	sl, r2
   1ba98:	add	r0, sp, #80	; 0x50
   1ba9c:	mov	r2, #48	; 0x30
   1baa0:	mov	r1, #0
   1baa4:	bl	11590 <memset@plt>
   1baa8:	cmp	r4, #10
   1baac:	beq	1bc40 <__assert_fail@plt+0xa53c>
   1bab0:	add	lr, sp, #80	; 0x50
   1bab4:	str	r4, [sp, #80]	; 0x50
   1bab8:	ldm	lr!, {r0, r1, r2, r3}
   1babc:	add	ip, sp, #32
   1bac0:	ldr	r5, [pc, #380]	; 1bc44 <__assert_fail@plt+0xa540>
   1bac4:	stmia	ip!, {r0, r1, r2, r3}
   1bac8:	ldm	lr!, {r0, r1, r2, r3}
   1bacc:	stmia	ip!, {r0, r1, r2, r3}
   1bad0:	ldm	lr, {r0, r1, r2, r3}
   1bad4:	stm	ip, {r0, r1, r2, r3}
   1bad8:	bl	1156c <__errno_location@plt>
   1badc:	ldr	r2, [r5, #4]
   1bae0:	ldr	r4, [r5]
   1bae4:	cmp	r2, #0
   1bae8:	ldr	r3, [r0]
   1baec:	mov	r7, r0
   1baf0:	str	r3, [sp, #28]
   1baf4:	bgt	1bb50 <__assert_fail@plt+0xa44c>
   1baf8:	add	r6, r5, #8
   1bafc:	cmp	r4, r6
   1bb00:	str	r2, [sp, #80]	; 0x50
   1bb04:	beq	1bc10 <__assert_fail@plt+0xa50c>
   1bb08:	mov	r3, #8
   1bb0c:	mov	r0, r4
   1bb10:	str	r3, [sp]
   1bb14:	rsb	r2, r2, #1
   1bb18:	add	r1, sp, #80	; 0x50
   1bb1c:	mvn	r3, #-2147483648	; 0x80000000
   1bb20:	bl	1e228 <__assert_fail@plt+0xcb24>
   1bb24:	mov	r4, r0
   1bb28:	str	r0, [r5]
   1bb2c:	ldr	r0, [r5, #4]
   1bb30:	ldr	r2, [sp, #80]	; 0x50
   1bb34:	mov	r1, #0
   1bb38:	sub	r2, r2, r0
   1bb3c:	add	r0, r4, r0, lsl #3
   1bb40:	lsl	r2, r2, #3
   1bb44:	bl	11590 <memset@plt>
   1bb48:	ldr	r3, [sp, #80]	; 0x50
   1bb4c:	str	r3, [r5, #4]
   1bb50:	ldr	r6, [sp, #36]	; 0x24
   1bb54:	ldr	r8, [r4]
   1bb58:	ldr	r5, [r4, #4]
   1bb5c:	ldr	r2, [sp, #72]	; 0x48
   1bb60:	ldr	r3, [sp, #32]
   1bb64:	ldr	ip, [sp, #76]	; 0x4c
   1bb68:	orr	r6, r6, #1
   1bb6c:	add	fp, sp, #40	; 0x28
   1bb70:	str	r2, [sp, #12]
   1bb74:	str	r3, [sp]
   1bb78:	str	r6, [sp, #4]
   1bb7c:	mov	r1, r8
   1bb80:	mov	r0, r5
   1bb84:	str	ip, [sp, #16]
   1bb88:	str	fp, [sp, #8]
   1bb8c:	mov	r3, sl
   1bb90:	mov	r2, r9
   1bb94:	bl	19540 <__assert_fail@plt+0x7e3c>
   1bb98:	cmp	r8, r0
   1bb9c:	bhi	1bbfc <__assert_fail@plt+0xa4f8>
   1bba0:	ldr	r3, [pc, #160]	; 1bc48 <__assert_fail@plt+0xa544>
   1bba4:	add	r8, r0, #1
   1bba8:	cmp	r5, r3
   1bbac:	str	r8, [r4]
   1bbb0:	beq	1bbbc <__assert_fail@plt+0xa4b8>
   1bbb4:	mov	r0, r5
   1bbb8:	bl	15334 <__assert_fail@plt+0x3c30>
   1bbbc:	mov	r0, r8
   1bbc0:	bl	1e00c <__assert_fail@plt+0xc908>
   1bbc4:	ldr	ip, [sp, #76]	; 0x4c
   1bbc8:	ldr	lr, [sp, #32]
   1bbcc:	mov	r3, sl
   1bbd0:	mov	r2, r9
   1bbd4:	mov	r1, r8
   1bbd8:	str	r0, [r4, #4]
   1bbdc:	ldr	r4, [sp, #72]	; 0x48
   1bbe0:	str	fp, [sp, #8]
   1bbe4:	str	r6, [sp, #4]
   1bbe8:	str	ip, [sp, #16]
   1bbec:	str	r4, [sp, #12]
   1bbf0:	str	lr, [sp]
   1bbf4:	mov	r5, r0
   1bbf8:	bl	19540 <__assert_fail@plt+0x7e3c>
   1bbfc:	ldr	r3, [sp, #28]
   1bc00:	mov	r0, r5
   1bc04:	str	r3, [r7]
   1bc08:	add	sp, sp, #132	; 0x84
   1bc0c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1bc10:	mov	r3, #8
   1bc14:	add	r1, sp, #80	; 0x50
   1bc18:	str	r3, [sp]
   1bc1c:	rsb	r2, r2, #1
   1bc20:	mvn	r3, #-2147483648	; 0x80000000
   1bc24:	mov	r0, #0
   1bc28:	bl	1e228 <__assert_fail@plt+0xcb24>
   1bc2c:	mov	r4, r0
   1bc30:	ldm	r6, {r0, r1}
   1bc34:	str	r4, [r5]
   1bc38:	stm	r4, {r0, r1}
   1bc3c:	b	1bb2c <__assert_fail@plt+0xa428>
   1bc40:	bl	116e0 <abort@plt>
   1bc44:	ldrdeq	r4, [r3], -ip
   1bc48:	strdeq	r4, [r3], -r8
   1bc4c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1bc50:	mov	r4, r2
   1bc54:	ldr	lr, [pc, #432]	; 1be0c <__assert_fail@plt+0xa708>
   1bc58:	mov	sl, r0
   1bc5c:	mov	fp, r1
   1bc60:	ldm	lr!, {r0, r1, r2, r3}
   1bc64:	sub	sp, sp, #92	; 0x5c
   1bc68:	add	ip, sp, #40	; 0x28
   1bc6c:	lsr	r7, r4, #5
   1bc70:	stmia	ip!, {r0, r1, r2, r3}
   1bc74:	add	r6, sp, #48	; 0x30
   1bc78:	ldm	lr!, {r0, r1, r2, r3}
   1bc7c:	and	r4, r4, #31
   1bc80:	ldr	r5, [pc, #392]	; 1be10 <__assert_fail@plt+0xa70c>
   1bc84:	stmia	ip!, {r0, r1, r2, r3}
   1bc88:	ldm	lr, {r0, r1, r2, r3}
   1bc8c:	stm	ip, {r0, r1, r2, r3}
   1bc90:	ldr	r2, [r6, r7, lsl #2]
   1bc94:	lsr	r3, r2, r4
   1bc98:	eor	r3, r3, #1
   1bc9c:	and	r3, r3, #1
   1bca0:	eor	r4, r2, r3, lsl r4
   1bca4:	str	r4, [r6, r7, lsl #2]
   1bca8:	bl	1156c <__errno_location@plt>
   1bcac:	ldr	r2, [r5, #4]
   1bcb0:	ldr	r4, [r5]
   1bcb4:	cmp	r2, #0
   1bcb8:	ldr	r3, [r0]
   1bcbc:	mov	r8, r0
   1bcc0:	str	r3, [sp, #28]
   1bcc4:	bgt	1bd20 <__assert_fail@plt+0xa61c>
   1bcc8:	add	r7, r5, #8
   1bccc:	cmp	r4, r7
   1bcd0:	str	r2, [sp, #36]	; 0x24
   1bcd4:	beq	1bddc <__assert_fail@plt+0xa6d8>
   1bcd8:	mov	r3, #8
   1bcdc:	mov	r0, r4
   1bce0:	str	r3, [sp]
   1bce4:	rsb	r2, r2, #1
   1bce8:	mvn	r3, #-2147483648	; 0x80000000
   1bcec:	add	r1, sp, #36	; 0x24
   1bcf0:	bl	1e228 <__assert_fail@plt+0xcb24>
   1bcf4:	mov	r4, r0
   1bcf8:	str	r0, [r5]
   1bcfc:	ldr	r0, [r5, #4]
   1bd00:	ldr	r2, [sp, #36]	; 0x24
   1bd04:	mov	r1, #0
   1bd08:	sub	r2, r2, r0
   1bd0c:	add	r0, r4, r0, lsl #3
   1bd10:	lsl	r2, r2, #3
   1bd14:	bl	11590 <memset@plt>
   1bd18:	ldr	r3, [sp, #36]	; 0x24
   1bd1c:	str	r3, [r5, #4]
   1bd20:	ldr	r7, [sp, #44]	; 0x2c
   1bd24:	ldr	r9, [r4]
   1bd28:	ldr	r5, [r4, #4]
   1bd2c:	ldr	r2, [sp, #80]	; 0x50
   1bd30:	ldr	r3, [sp, #40]	; 0x28
   1bd34:	ldr	ip, [sp, #84]	; 0x54
   1bd38:	orr	r7, r7, #1
   1bd3c:	str	r2, [sp, #12]
   1bd40:	str	r3, [sp]
   1bd44:	str	r7, [sp, #4]
   1bd48:	str	r6, [sp, #8]
   1bd4c:	mov	r1, r9
   1bd50:	mov	r0, r5
   1bd54:	str	ip, [sp, #16]
   1bd58:	mov	r3, fp
   1bd5c:	mov	r2, sl
   1bd60:	bl	19540 <__assert_fail@plt+0x7e3c>
   1bd64:	cmp	r9, r0
   1bd68:	bhi	1bdc8 <__assert_fail@plt+0xa6c4>
   1bd6c:	ldr	r3, [pc, #160]	; 1be14 <__assert_fail@plt+0xa710>
   1bd70:	add	r9, r0, #1
   1bd74:	cmp	r5, r3
   1bd78:	str	r9, [r4]
   1bd7c:	beq	1bd88 <__assert_fail@plt+0xa684>
   1bd80:	mov	r0, r5
   1bd84:	bl	15334 <__assert_fail@plt+0x3c30>
   1bd88:	mov	r0, r9
   1bd8c:	bl	1e00c <__assert_fail@plt+0xc908>
   1bd90:	ldr	ip, [sp, #84]	; 0x54
   1bd94:	ldr	lr, [sp, #40]	; 0x28
   1bd98:	mov	r3, fp
   1bd9c:	mov	r2, sl
   1bda0:	mov	r1, r9
   1bda4:	str	r0, [r4, #4]
   1bda8:	ldr	r4, [sp, #80]	; 0x50
   1bdac:	str	r6, [sp, #8]
   1bdb0:	str	r7, [sp, #4]
   1bdb4:	str	ip, [sp, #16]
   1bdb8:	str	r4, [sp, #12]
   1bdbc:	str	lr, [sp]
   1bdc0:	mov	r5, r0
   1bdc4:	bl	19540 <__assert_fail@plt+0x7e3c>
   1bdc8:	ldr	r3, [sp, #28]
   1bdcc:	mov	r0, r5
   1bdd0:	str	r3, [r8]
   1bdd4:	add	sp, sp, #92	; 0x5c
   1bdd8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1bddc:	mov	r3, #8
   1bde0:	str	r3, [sp]
   1bde4:	add	r1, sp, #36	; 0x24
   1bde8:	rsb	r2, r2, #1
   1bdec:	mvn	r3, #-2147483648	; 0x80000000
   1bdf0:	mov	r0, #0
   1bdf4:	bl	1e228 <__assert_fail@plt+0xcb24>
   1bdf8:	mov	r4, r0
   1bdfc:	ldm	r7, {r0, r1}
   1be00:	str	r4, [r5]
   1be04:	stm	r4, {r0, r1}
   1be08:	b	1bcfc <__assert_fail@plt+0xa5f8>
   1be0c:	andeq	r4, r3, r8, asr #7
   1be10:	ldrdeq	r4, [r3], -ip
   1be14:	strdeq	r4, [r3], -r8
   1be18:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1be1c:	mov	r4, r1
   1be20:	ldr	lr, [pc, #420]	; 1bfcc <__assert_fail@plt+0xa8c8>
   1be24:	mov	r6, r0
   1be28:	sub	sp, sp, #84	; 0x54
   1be2c:	ldm	lr!, {r0, r1, r2, r3}
   1be30:	add	ip, sp, #32
   1be34:	lsr	r8, r4, #5
   1be38:	add	r5, sp, #40	; 0x28
   1be3c:	stmia	ip!, {r0, r1, r2, r3}
   1be40:	and	r4, r4, #31
   1be44:	ldm	lr!, {r0, r1, r2, r3}
   1be48:	ldr	r7, [pc, #384]	; 1bfd0 <__assert_fail@plt+0xa8cc>
   1be4c:	stmia	ip!, {r0, r1, r2, r3}
   1be50:	ldm	lr, {r0, r1, r2, r3}
   1be54:	stm	ip, {r0, r1, r2, r3}
   1be58:	ldr	r2, [r5, r8, lsl #2]
   1be5c:	lsr	r3, r2, r4
   1be60:	eor	r3, r3, #1
   1be64:	and	r3, r3, #1
   1be68:	eor	r4, r2, r3, lsl r4
   1be6c:	str	r4, [r5, r8, lsl #2]
   1be70:	bl	1156c <__errno_location@plt>
   1be74:	ldr	r2, [r7, #4]
   1be78:	ldr	r4, [r7]
   1be7c:	cmp	r2, #0
   1be80:	mov	r9, r0
   1be84:	ldr	sl, [r0]
   1be88:	bgt	1bee4 <__assert_fail@plt+0xa7e0>
   1be8c:	add	r8, r7, #8
   1be90:	cmp	r4, r8
   1be94:	str	r2, [sp, #28]
   1be98:	beq	1bf9c <__assert_fail@plt+0xa898>
   1be9c:	mov	r3, #8
   1bea0:	mov	r0, r4
   1bea4:	str	r3, [sp]
   1bea8:	rsb	r2, r2, #1
   1beac:	mvn	r3, #-2147483648	; 0x80000000
   1beb0:	add	r1, sp, #28
   1beb4:	bl	1e228 <__assert_fail@plt+0xcb24>
   1beb8:	mov	r4, r0
   1bebc:	str	r0, [r7]
   1bec0:	ldr	r0, [r7, #4]
   1bec4:	ldr	r2, [sp, #28]
   1bec8:	mov	r1, #0
   1becc:	sub	r2, r2, r0
   1bed0:	add	r0, r4, r0, lsl #3
   1bed4:	lsl	r2, r2, #3
   1bed8:	bl	11590 <memset@plt>
   1bedc:	ldr	r3, [sp, #28]
   1bee0:	str	r3, [r7, #4]
   1bee4:	ldr	r8, [sp, #36]	; 0x24
   1bee8:	ldr	fp, [r4]
   1beec:	ldr	r7, [r4, #4]
   1bef0:	ldr	r2, [sp, #72]	; 0x48
   1bef4:	ldr	r3, [sp, #32]
   1bef8:	ldr	ip, [sp, #76]	; 0x4c
   1befc:	orr	r8, r8, #1
   1bf00:	str	r2, [sp, #12]
   1bf04:	str	r3, [sp]
   1bf08:	str	r8, [sp, #4]
   1bf0c:	str	r5, [sp, #8]
   1bf10:	mov	r1, fp
   1bf14:	mov	r0, r7
   1bf18:	str	ip, [sp, #16]
   1bf1c:	mvn	r3, #0
   1bf20:	mov	r2, r6
   1bf24:	bl	19540 <__assert_fail@plt+0x7e3c>
   1bf28:	cmp	fp, r0
   1bf2c:	bhi	1bf8c <__assert_fail@plt+0xa888>
   1bf30:	ldr	r3, [pc, #156]	; 1bfd4 <__assert_fail@plt+0xa8d0>
   1bf34:	add	fp, r0, #1
   1bf38:	cmp	r7, r3
   1bf3c:	str	fp, [r4]
   1bf40:	beq	1bf4c <__assert_fail@plt+0xa848>
   1bf44:	mov	r0, r7
   1bf48:	bl	15334 <__assert_fail@plt+0x3c30>
   1bf4c:	mov	r0, fp
   1bf50:	bl	1e00c <__assert_fail@plt+0xc908>
   1bf54:	ldr	lr, [sp, #76]	; 0x4c
   1bf58:	ldr	r3, [sp, #32]
   1bf5c:	ldr	ip, [sp, #72]	; 0x48
   1bf60:	mov	r2, r6
   1bf64:	mov	r1, fp
   1bf68:	str	r0, [r4, #4]
   1bf6c:	str	r3, [sp]
   1bf70:	str	r5, [sp, #8]
   1bf74:	str	r8, [sp, #4]
   1bf78:	str	lr, [sp, #16]
   1bf7c:	str	ip, [sp, #12]
   1bf80:	mvn	r3, #0
   1bf84:	mov	r7, r0
   1bf88:	bl	19540 <__assert_fail@plt+0x7e3c>
   1bf8c:	mov	r0, r7
   1bf90:	str	sl, [r9]
   1bf94:	add	sp, sp, #84	; 0x54
   1bf98:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1bf9c:	mov	r3, #8
   1bfa0:	str	r3, [sp]
   1bfa4:	add	r1, sp, #28
   1bfa8:	rsb	r2, r2, #1
   1bfac:	mvn	r3, #-2147483648	; 0x80000000
   1bfb0:	mov	r0, #0
   1bfb4:	bl	1e228 <__assert_fail@plt+0xcb24>
   1bfb8:	mov	r4, r0
   1bfbc:	ldm	r8, {r0, r1}
   1bfc0:	str	r4, [r7]
   1bfc4:	stm	r4, {r0, r1}
   1bfc8:	b	1bec0 <__assert_fail@plt+0xa7bc>
   1bfcc:	andeq	r4, r3, r8, asr #7
   1bfd0:	ldrdeq	r4, [r3], -ip
   1bfd4:	strdeq	r4, [r3], -r8
   1bfd8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1bfdc:	mov	r6, r0
   1bfe0:	ldr	lr, [pc, #404]	; 1c17c <__assert_fail@plt+0xaa78>
   1bfe4:	sub	sp, sp, #84	; 0x54
   1bfe8:	add	ip, sp, #32
   1bfec:	ldm	lr!, {r0, r1, r2, r3}
   1bff0:	ldr	r5, [pc, #392]	; 1c180 <__assert_fail@plt+0xaa7c>
   1bff4:	stmia	ip!, {r0, r1, r2, r3}
   1bff8:	ldm	lr!, {r0, r1, r2, r3}
   1bffc:	ldr	r4, [sp, #44]	; 0x2c
   1c000:	stmia	ip!, {r0, r1, r2, r3}
   1c004:	ldm	lr, {r0, r1, r2, r3}
   1c008:	mvn	lr, r4
   1c00c:	and	lr, lr, #67108864	; 0x4000000
   1c010:	eor	lr, lr, r4
   1c014:	stm	ip, {r0, r1, r2, r3}
   1c018:	str	lr, [sp, #44]	; 0x2c
   1c01c:	bl	1156c <__errno_location@plt>
   1c020:	ldr	r2, [r5, #4]
   1c024:	ldr	r4, [r5]
   1c028:	cmp	r2, #0
   1c02c:	mov	r8, r0
   1c030:	ldr	sl, [r0]
   1c034:	bgt	1c090 <__assert_fail@plt+0xa98c>
   1c038:	add	r7, r5, #8
   1c03c:	cmp	r4, r7
   1c040:	str	r2, [sp, #28]
   1c044:	beq	1c14c <__assert_fail@plt+0xaa48>
   1c048:	mov	r3, #8
   1c04c:	mov	r0, r4
   1c050:	str	r3, [sp]
   1c054:	rsb	r2, r2, #1
   1c058:	mvn	r3, #-2147483648	; 0x80000000
   1c05c:	add	r1, sp, #28
   1c060:	bl	1e228 <__assert_fail@plt+0xcb24>
   1c064:	mov	r4, r0
   1c068:	str	r0, [r5]
   1c06c:	ldr	r0, [r5, #4]
   1c070:	ldr	r2, [sp, #28]
   1c074:	mov	r1, #0
   1c078:	sub	r2, r2, r0
   1c07c:	add	r0, r4, r0, lsl #3
   1c080:	lsl	r2, r2, #3
   1c084:	bl	11590 <memset@plt>
   1c088:	ldr	r3, [sp, #28]
   1c08c:	str	r3, [r5, #4]
   1c090:	ldr	r7, [sp, #36]	; 0x24
   1c094:	ldr	r9, [r4]
   1c098:	ldr	r5, [r4, #4]
   1c09c:	ldr	r2, [sp, #72]	; 0x48
   1c0a0:	ldr	r3, [sp, #32]
   1c0a4:	ldr	ip, [sp, #76]	; 0x4c
   1c0a8:	orr	r7, r7, #1
   1c0ac:	add	fp, sp, #40	; 0x28
   1c0b0:	str	r2, [sp, #12]
   1c0b4:	str	r3, [sp]
   1c0b8:	str	r7, [sp, #4]
   1c0bc:	mov	r1, r9
   1c0c0:	mov	r0, r5
   1c0c4:	str	ip, [sp, #16]
   1c0c8:	str	fp, [sp, #8]
   1c0cc:	mvn	r3, #0
   1c0d0:	mov	r2, r6
   1c0d4:	bl	19540 <__assert_fail@plt+0x7e3c>
   1c0d8:	cmp	r9, r0
   1c0dc:	bhi	1c13c <__assert_fail@plt+0xaa38>
   1c0e0:	ldr	r3, [pc, #156]	; 1c184 <__assert_fail@plt+0xaa80>
   1c0e4:	add	r9, r0, #1
   1c0e8:	cmp	r5, r3
   1c0ec:	str	r9, [r4]
   1c0f0:	beq	1c0fc <__assert_fail@plt+0xa9f8>
   1c0f4:	mov	r0, r5
   1c0f8:	bl	15334 <__assert_fail@plt+0x3c30>
   1c0fc:	mov	r0, r9
   1c100:	bl	1e00c <__assert_fail@plt+0xc908>
   1c104:	ldr	lr, [sp, #76]	; 0x4c
   1c108:	ldr	r3, [sp, #32]
   1c10c:	ldr	ip, [sp, #72]	; 0x48
   1c110:	mov	r2, r6
   1c114:	mov	r1, r9
   1c118:	str	r0, [r4, #4]
   1c11c:	str	r3, [sp]
   1c120:	str	fp, [sp, #8]
   1c124:	str	r7, [sp, #4]
   1c128:	str	lr, [sp, #16]
   1c12c:	str	ip, [sp, #12]
   1c130:	mvn	r3, #0
   1c134:	mov	r5, r0
   1c138:	bl	19540 <__assert_fail@plt+0x7e3c>
   1c13c:	mov	r0, r5
   1c140:	str	sl, [r8]
   1c144:	add	sp, sp, #84	; 0x54
   1c148:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c14c:	mov	r3, #8
   1c150:	str	r3, [sp]
   1c154:	add	r1, sp, #28
   1c158:	rsb	r2, r2, #1
   1c15c:	mvn	r3, #-2147483648	; 0x80000000
   1c160:	mov	r0, #0
   1c164:	bl	1e228 <__assert_fail@plt+0xcb24>
   1c168:	mov	r4, r0
   1c16c:	ldm	r7, {r0, r1}
   1c170:	str	r4, [r5]
   1c174:	stm	r4, {r0, r1}
   1c178:	b	1c06c <__assert_fail@plt+0xa968>
   1c17c:	andeq	r4, r3, r8, asr #7
   1c180:	ldrdeq	r4, [r3], -ip
   1c184:	strdeq	r4, [r3], -r8
   1c188:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c18c:	mov	r9, r0
   1c190:	ldr	lr, [pc, #416]	; 1c338 <__assert_fail@plt+0xac34>
   1c194:	mov	sl, r1
   1c198:	sub	sp, sp, #92	; 0x5c
   1c19c:	ldm	lr!, {r0, r1, r2, r3}
   1c1a0:	add	ip, sp, #40	; 0x28
   1c1a4:	ldr	r5, [pc, #400]	; 1c33c <__assert_fail@plt+0xac38>
   1c1a8:	stmia	ip!, {r0, r1, r2, r3}
   1c1ac:	ldm	lr!, {r0, r1, r2, r3}
   1c1b0:	ldr	r4, [sp, #52]	; 0x34
   1c1b4:	stmia	ip!, {r0, r1, r2, r3}
   1c1b8:	ldm	lr, {r0, r1, r2, r3}
   1c1bc:	mvn	lr, r4
   1c1c0:	and	lr, lr, #67108864	; 0x4000000
   1c1c4:	eor	lr, lr, r4
   1c1c8:	stm	ip, {r0, r1, r2, r3}
   1c1cc:	str	lr, [sp, #52]	; 0x34
   1c1d0:	bl	1156c <__errno_location@plt>
   1c1d4:	ldr	r2, [r5, #4]
   1c1d8:	ldr	r4, [r5]
   1c1dc:	cmp	r2, #0
   1c1e0:	ldr	r3, [r0]
   1c1e4:	mov	r7, r0
   1c1e8:	str	r3, [sp, #28]
   1c1ec:	bgt	1c248 <__assert_fail@plt+0xab44>
   1c1f0:	add	r6, r5, #8
   1c1f4:	cmp	r4, r6
   1c1f8:	str	r2, [sp, #36]	; 0x24
   1c1fc:	beq	1c308 <__assert_fail@plt+0xac04>
   1c200:	mov	r3, #8
   1c204:	mov	r0, r4
   1c208:	str	r3, [sp]
   1c20c:	rsb	r2, r2, #1
   1c210:	mvn	r3, #-2147483648	; 0x80000000
   1c214:	add	r1, sp, #36	; 0x24
   1c218:	bl	1e228 <__assert_fail@plt+0xcb24>
   1c21c:	mov	r4, r0
   1c220:	str	r0, [r5]
   1c224:	ldr	r0, [r5, #4]
   1c228:	ldr	r2, [sp, #36]	; 0x24
   1c22c:	mov	r1, #0
   1c230:	sub	r2, r2, r0
   1c234:	add	r0, r4, r0, lsl #3
   1c238:	lsl	r2, r2, #3
   1c23c:	bl	11590 <memset@plt>
   1c240:	ldr	r3, [sp, #36]	; 0x24
   1c244:	str	r3, [r5, #4]
   1c248:	ldr	r6, [sp, #44]	; 0x2c
   1c24c:	ldr	r8, [r4]
   1c250:	ldr	r5, [r4, #4]
   1c254:	ldr	r2, [sp, #80]	; 0x50
   1c258:	ldr	r3, [sp, #40]	; 0x28
   1c25c:	ldr	ip, [sp, #84]	; 0x54
   1c260:	orr	r6, r6, #1
   1c264:	add	fp, sp, #48	; 0x30
   1c268:	str	r2, [sp, #12]
   1c26c:	str	r3, [sp]
   1c270:	str	r6, [sp, #4]
   1c274:	mov	r1, r8
   1c278:	mov	r0, r5
   1c27c:	str	ip, [sp, #16]
   1c280:	str	fp, [sp, #8]
   1c284:	mov	r3, sl
   1c288:	mov	r2, r9
   1c28c:	bl	19540 <__assert_fail@plt+0x7e3c>
   1c290:	cmp	r8, r0
   1c294:	bhi	1c2f4 <__assert_fail@plt+0xabf0>
   1c298:	ldr	r3, [pc, #160]	; 1c340 <__assert_fail@plt+0xac3c>
   1c29c:	add	r8, r0, #1
   1c2a0:	cmp	r5, r3
   1c2a4:	str	r8, [r4]
   1c2a8:	beq	1c2b4 <__assert_fail@plt+0xabb0>
   1c2ac:	mov	r0, r5
   1c2b0:	bl	15334 <__assert_fail@plt+0x3c30>
   1c2b4:	mov	r0, r8
   1c2b8:	bl	1e00c <__assert_fail@plt+0xc908>
   1c2bc:	ldr	ip, [sp, #84]	; 0x54
   1c2c0:	ldr	lr, [sp, #40]	; 0x28
   1c2c4:	mov	r3, sl
   1c2c8:	mov	r2, r9
   1c2cc:	mov	r1, r8
   1c2d0:	str	r0, [r4, #4]
   1c2d4:	ldr	r4, [sp, #80]	; 0x50
   1c2d8:	str	fp, [sp, #8]
   1c2dc:	str	r6, [sp, #4]
   1c2e0:	str	ip, [sp, #16]
   1c2e4:	str	r4, [sp, #12]
   1c2e8:	str	lr, [sp]
   1c2ec:	mov	r5, r0
   1c2f0:	bl	19540 <__assert_fail@plt+0x7e3c>
   1c2f4:	ldr	r3, [sp, #28]
   1c2f8:	mov	r0, r5
   1c2fc:	str	r3, [r7]
   1c300:	add	sp, sp, #92	; 0x5c
   1c304:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c308:	mov	r3, #8
   1c30c:	str	r3, [sp]
   1c310:	add	r1, sp, #36	; 0x24
   1c314:	rsb	r2, r2, #1
   1c318:	mvn	r3, #-2147483648	; 0x80000000
   1c31c:	mov	r0, #0
   1c320:	bl	1e228 <__assert_fail@plt+0xcb24>
   1c324:	mov	r4, r0
   1c328:	ldm	r6, {r0, r1}
   1c32c:	str	r4, [r5]
   1c330:	stm	r4, {r0, r1}
   1c334:	b	1c224 <__assert_fail@plt+0xab20>
   1c338:	andeq	r4, r3, r8, asr #7
   1c33c:	ldrdeq	r4, [r3], -ip
   1c340:	strdeq	r4, [r3], -r8
   1c344:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c348:	sub	sp, sp, #180	; 0xb4
   1c34c:	mov	r6, r1
   1c350:	mov	r4, r0
   1c354:	mov	r9, r2
   1c358:	add	r0, sp, #80	; 0x50
   1c35c:	mov	r2, #48	; 0x30
   1c360:	mov	r1, #0
   1c364:	bl	11590 <memset@plt>
   1c368:	cmp	r6, #10
   1c36c:	beq	1c54c <__assert_fail@plt+0xae48>
   1c370:	add	r5, sp, #80	; 0x50
   1c374:	str	r6, [sp, #80]	; 0x50
   1c378:	ldm	r5!, {r0, r1, r2, r3}
   1c37c:	add	ip, sp, #128	; 0x80
   1c380:	mov	r7, ip
   1c384:	add	lr, sp, #32
   1c388:	stmia	ip!, {r0, r1, r2, r3}
   1c38c:	mov	r8, #67108864	; 0x4000000
   1c390:	ldm	r5!, {r0, r1, r2, r3}
   1c394:	ldr	r6, [pc, #436]	; 1c550 <__assert_fail@plt+0xae4c>
   1c398:	stmia	ip!, {r0, r1, r2, r3}
   1c39c:	ldm	r5, {r0, r1, r2, r3}
   1c3a0:	stm	ip, {r0, r1, r2, r3}
   1c3a4:	ldm	r7!, {r0, r1, r2, r3}
   1c3a8:	stmia	lr!, {r0, r1, r2, r3}
   1c3ac:	ldm	r7!, {r0, r1, r2, r3}
   1c3b0:	str	r8, [sp, #44]	; 0x2c
   1c3b4:	stmia	lr!, {r0, r1, r2, r3}
   1c3b8:	ldm	ip, {r0, r1, r2, r3}
   1c3bc:	stm	lr, {r0, r1, r2, r3}
   1c3c0:	bl	1156c <__errno_location@plt>
   1c3c4:	cmn	r4, #-2147483647	; 0x80000001
   1c3c8:	ldr	r5, [r6]
   1c3cc:	mov	r7, r0
   1c3d0:	movne	r0, #0
   1c3d4:	moveq	r0, #1
   1c3d8:	ldr	r3, [r7]
   1c3dc:	orrs	r0, r0, r4, lsr #31
   1c3e0:	str	r3, [sp, #24]
   1c3e4:	bne	1c54c <__assert_fail@plt+0xae48>
   1c3e8:	ldr	r2, [r6, #4]
   1c3ec:	cmp	r4, r2
   1c3f0:	blt	1c450 <__assert_fail@plt+0xad4c>
   1c3f4:	add	r8, r6, #8
   1c3f8:	cmp	r5, r8
   1c3fc:	str	r2, [sp, #80]	; 0x50
   1c400:	beq	1c51c <__assert_fail@plt+0xae18>
   1c404:	mov	r3, #8
   1c408:	sub	r2, r4, r2
   1c40c:	mov	r0, r5
   1c410:	str	r3, [sp]
   1c414:	add	r2, r2, #1
   1c418:	add	r1, sp, #80	; 0x50
   1c41c:	mvn	r3, #-2147483648	; 0x80000000
   1c420:	bl	1e228 <__assert_fail@plt+0xcb24>
   1c424:	mov	r5, r0
   1c428:	str	r0, [r6]
   1c42c:	ldr	r0, [r6, #4]
   1c430:	ldr	r2, [sp, #80]	; 0x50
   1c434:	mov	r1, #0
   1c438:	sub	r2, r2, r0
   1c43c:	add	r0, r5, r0, lsl #3
   1c440:	lsl	r2, r2, #3
   1c444:	bl	11590 <memset@plt>
   1c448:	ldr	r3, [sp, #80]	; 0x50
   1c44c:	str	r3, [r6, #4]
   1c450:	add	fp, r5, r4, lsl #3
   1c454:	ldr	r1, [sp, #36]	; 0x24
   1c458:	ldr	r8, [r5, r4, lsl #3]
   1c45c:	ldr	r6, [fp, #4]
   1c460:	ldr	r2, [sp, #72]	; 0x48
   1c464:	ldr	r3, [sp, #32]
   1c468:	ldr	ip, [sp, #76]	; 0x4c
   1c46c:	orr	r1, r1, #1
   1c470:	add	sl, sp, #40	; 0x28
   1c474:	str	r1, [sp, #28]
   1c478:	str	r1, [sp, #4]
   1c47c:	str	r2, [sp, #12]
   1c480:	str	r3, [sp]
   1c484:	mov	r0, r6
   1c488:	mov	r1, r8
   1c48c:	str	ip, [sp, #16]
   1c490:	str	sl, [sp, #8]
   1c494:	mvn	r3, #0
   1c498:	mov	r2, r9
   1c49c:	bl	19540 <__assert_fail@plt+0x7e3c>
   1c4a0:	cmp	r8, r0
   1c4a4:	bhi	1c508 <__assert_fail@plt+0xae04>
   1c4a8:	ldr	r3, [pc, #164]	; 1c554 <__assert_fail@plt+0xae50>
   1c4ac:	add	r8, r0, #1
   1c4b0:	cmp	r6, r3
   1c4b4:	str	r8, [r5, r4, lsl #3]
   1c4b8:	beq	1c4c4 <__assert_fail@plt+0xadc0>
   1c4bc:	mov	r0, r6
   1c4c0:	bl	15334 <__assert_fail@plt+0x3c30>
   1c4c4:	mov	r0, r8
   1c4c8:	bl	1e00c <__assert_fail@plt+0xc908>
   1c4cc:	ldr	lr, [sp, #76]	; 0x4c
   1c4d0:	ldr	r3, [sp, #32]
   1c4d4:	ldr	ip, [sp, #72]	; 0x48
   1c4d8:	ldr	r4, [sp, #28]
   1c4dc:	mov	r2, r9
   1c4e0:	mov	r1, r8
   1c4e4:	str	r0, [fp, #4]
   1c4e8:	str	r3, [sp]
   1c4ec:	str	sl, [sp, #8]
   1c4f0:	str	r4, [sp, #4]
   1c4f4:	str	lr, [sp, #16]
   1c4f8:	str	ip, [sp, #12]
   1c4fc:	mvn	r3, #0
   1c500:	mov	r6, r0
   1c504:	bl	19540 <__assert_fail@plt+0x7e3c>
   1c508:	ldr	r3, [sp, #24]
   1c50c:	mov	r0, r6
   1c510:	str	r3, [r7]
   1c514:	add	sp, sp, #180	; 0xb4
   1c518:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c51c:	mov	r3, #8
   1c520:	sub	r2, r4, r2
   1c524:	add	r1, sp, #80	; 0x50
   1c528:	str	r3, [sp]
   1c52c:	add	r2, r2, #1
   1c530:	mvn	r3, #-2147483648	; 0x80000000
   1c534:	bl	1e228 <__assert_fail@plt+0xcb24>
   1c538:	mov	r5, r0
   1c53c:	ldm	r8, {r0, r1}
   1c540:	str	r5, [r6]
   1c544:	stm	r5, {r0, r1}
   1c548:	b	1c42c <__assert_fail@plt+0xad28>
   1c54c:	bl	116e0 <abort@plt>
   1c550:	ldrdeq	r4, [r3], -ip
   1c554:	strdeq	r4, [r3], -r8
   1c558:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c55c:	mov	r7, r1
   1c560:	ldr	lr, [pc, #492]	; 1c754 <__assert_fail@plt+0xb050>
   1c564:	mov	r8, r2
   1c568:	mov	r4, r0
   1c56c:	mov	fp, r3
   1c570:	ldm	lr!, {r0, r1, r2, r3}
   1c574:	sub	sp, sp, #100	; 0x64
   1c578:	add	ip, sp, #48	; 0x30
   1c57c:	mov	sl, #10
   1c580:	stmia	ip!, {r0, r1, r2, r3}
   1c584:	cmp	r8, #0
   1c588:	cmpne	r7, #0
   1c58c:	ldm	lr!, {r0, r1, r2, r3}
   1c590:	str	sl, [sp, #48]	; 0x30
   1c594:	stmia	ip!, {r0, r1, r2, r3}
   1c598:	ldm	lr, {r0, r1, r2, r3}
   1c59c:	stm	ip, {r0, r1, r2, r3}
   1c5a0:	beq	1c750 <__assert_fail@plt+0xb04c>
   1c5a4:	str	r7, [sp, #88]	; 0x58
   1c5a8:	str	r8, [sp, #92]	; 0x5c
   1c5ac:	bl	1156c <__errno_location@plt>
   1c5b0:	ldr	r6, [pc, #416]	; 1c758 <__assert_fail@plt+0xb054>
   1c5b4:	cmn	r4, #-2147483647	; 0x80000001
   1c5b8:	ldr	r5, [r6]
   1c5bc:	mov	r9, r0
   1c5c0:	movne	r0, #0
   1c5c4:	moveq	r0, #1
   1c5c8:	ldr	r3, [r9]
   1c5cc:	orrs	r0, r0, r4, lsr #31
   1c5d0:	str	r3, [sp, #28]
   1c5d4:	bne	1c750 <__assert_fail@plt+0xb04c>
   1c5d8:	ldr	r2, [r6, #4]
   1c5dc:	cmp	r4, r2
   1c5e0:	movlt	r3, sl
   1c5e4:	blt	1c650 <__assert_fail@plt+0xaf4c>
   1c5e8:	add	r7, r6, #8
   1c5ec:	cmp	r5, r7
   1c5f0:	str	r2, [sp, #44]	; 0x2c
   1c5f4:	beq	1c720 <__assert_fail@plt+0xb01c>
   1c5f8:	mov	r3, #8
   1c5fc:	sub	r2, r4, r2
   1c600:	mov	r0, r5
   1c604:	str	r3, [sp]
   1c608:	add	r2, r2, #1
   1c60c:	mvn	r3, #-2147483648	; 0x80000000
   1c610:	add	r1, sp, #44	; 0x2c
   1c614:	bl	1e228 <__assert_fail@plt+0xcb24>
   1c618:	mov	r5, r0
   1c61c:	str	r0, [r6]
   1c620:	ldr	r0, [r6, #4]
   1c624:	ldr	r2, [sp, #44]	; 0x2c
   1c628:	mov	r1, #0
   1c62c:	sub	r2, r2, r0
   1c630:	add	r0, r5, r0, lsl #3
   1c634:	lsl	r2, r2, #3
   1c638:	bl	11590 <memset@plt>
   1c63c:	ldr	r3, [sp, #48]	; 0x30
   1c640:	ldr	r7, [sp, #88]	; 0x58
   1c644:	ldr	r8, [sp, #92]	; 0x5c
   1c648:	ldr	r2, [sp, #44]	; 0x2c
   1c64c:	str	r2, [r6, #4]
   1c650:	add	r2, r5, r4, lsl #3
   1c654:	mov	r1, r2
   1c658:	str	r2, [sp, #32]
   1c65c:	ldr	r2, [sp, #52]	; 0x34
   1c660:	ldr	r6, [r1, #4]
   1c664:	ldr	sl, [r5, r4, lsl #3]
   1c668:	orr	r2, r2, #1
   1c66c:	str	r3, [sp]
   1c670:	add	r3, sp, #56	; 0x38
   1c674:	str	r2, [sp, #36]	; 0x24
   1c678:	str	r2, [sp, #4]
   1c67c:	str	r3, [sp, #8]
   1c680:	mov	r0, r6
   1c684:	str	r8, [sp, #16]
   1c688:	str	r7, [sp, #12]
   1c68c:	mov	r1, sl
   1c690:	mvn	r3, #0
   1c694:	mov	r2, fp
   1c698:	bl	19540 <__assert_fail@plt+0x7e3c>
   1c69c:	cmp	sl, r0
   1c6a0:	bhi	1c70c <__assert_fail@plt+0xb008>
   1c6a4:	ldr	r3, [pc, #176]	; 1c75c <__assert_fail@plt+0xb058>
   1c6a8:	add	r7, r0, #1
   1c6ac:	cmp	r6, r3
   1c6b0:	str	r7, [r5, r4, lsl #3]
   1c6b4:	beq	1c6c0 <__assert_fail@plt+0xafbc>
   1c6b8:	mov	r0, r6
   1c6bc:	bl	15334 <__assert_fail@plt+0x3c30>
   1c6c0:	mov	r0, r7
   1c6c4:	bl	1e00c <__assert_fail@plt+0xc908>
   1c6c8:	ldr	r3, [sp, #32]
   1c6cc:	ldr	lr, [sp, #92]	; 0x5c
   1c6d0:	ldr	ip, [sp, #88]	; 0x58
   1c6d4:	ldr	r4, [sp, #36]	; 0x24
   1c6d8:	mov	r2, fp
   1c6dc:	mov	r1, r7
   1c6e0:	str	r0, [r3, #4]
   1c6e4:	add	r3, sp, #56	; 0x38
   1c6e8:	str	r3, [sp, #8]
   1c6ec:	ldr	r3, [sp, #48]	; 0x30
   1c6f0:	str	r4, [sp, #4]
   1c6f4:	str	r3, [sp]
   1c6f8:	str	lr, [sp, #16]
   1c6fc:	str	ip, [sp, #12]
   1c700:	mvn	r3, #0
   1c704:	mov	r6, r0
   1c708:	bl	19540 <__assert_fail@plt+0x7e3c>
   1c70c:	ldr	r3, [sp, #28]
   1c710:	mov	r0, r6
   1c714:	str	r3, [r9]
   1c718:	add	sp, sp, #100	; 0x64
   1c71c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c720:	mov	r3, #8
   1c724:	sub	r2, r4, r2
   1c728:	str	r3, [sp]
   1c72c:	add	r1, sp, #44	; 0x2c
   1c730:	add	r2, r2, #1
   1c734:	mvn	r3, #-2147483648	; 0x80000000
   1c738:	bl	1e228 <__assert_fail@plt+0xcb24>
   1c73c:	mov	r5, r0
   1c740:	ldm	r7, {r0, r1}
   1c744:	str	r5, [r6]
   1c748:	stm	r5, {r0, r1}
   1c74c:	b	1c620 <__assert_fail@plt+0xaf1c>
   1c750:	bl	116e0 <abort@plt>
   1c754:	andeq	r4, r3, r8, asr #7
   1c758:	ldrdeq	r4, [r3], -ip
   1c75c:	strdeq	r4, [r3], -r8
   1c760:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c764:	mov	r7, r1
   1c768:	ldr	lr, [pc, #492]	; 1c95c <__assert_fail@plt+0xb258>
   1c76c:	mov	r8, r2
   1c770:	mov	r4, r0
   1c774:	mov	fp, r3
   1c778:	ldm	lr!, {r0, r1, r2, r3}
   1c77c:	sub	sp, sp, #100	; 0x64
   1c780:	add	ip, sp, #48	; 0x30
   1c784:	mov	sl, #10
   1c788:	stmia	ip!, {r0, r1, r2, r3}
   1c78c:	cmp	r8, #0
   1c790:	cmpne	r7, #0
   1c794:	ldm	lr!, {r0, r1, r2, r3}
   1c798:	str	sl, [sp, #48]	; 0x30
   1c79c:	stmia	ip!, {r0, r1, r2, r3}
   1c7a0:	ldm	lr, {r0, r1, r2, r3}
   1c7a4:	stm	ip, {r0, r1, r2, r3}
   1c7a8:	beq	1c958 <__assert_fail@plt+0xb254>
   1c7ac:	str	r7, [sp, #88]	; 0x58
   1c7b0:	str	r8, [sp, #92]	; 0x5c
   1c7b4:	bl	1156c <__errno_location@plt>
   1c7b8:	ldr	r6, [pc, #416]	; 1c960 <__assert_fail@plt+0xb25c>
   1c7bc:	cmn	r4, #-2147483647	; 0x80000001
   1c7c0:	ldr	r5, [r6]
   1c7c4:	mov	r9, r0
   1c7c8:	movne	r0, #0
   1c7cc:	moveq	r0, #1
   1c7d0:	ldr	r3, [r9]
   1c7d4:	orrs	r0, r0, r4, lsr #31
   1c7d8:	str	r3, [sp, #28]
   1c7dc:	bne	1c958 <__assert_fail@plt+0xb254>
   1c7e0:	ldr	r2, [r6, #4]
   1c7e4:	cmp	r4, r2
   1c7e8:	movlt	r3, sl
   1c7ec:	blt	1c858 <__assert_fail@plt+0xb154>
   1c7f0:	add	r7, r6, #8
   1c7f4:	cmp	r5, r7
   1c7f8:	str	r2, [sp, #44]	; 0x2c
   1c7fc:	beq	1c928 <__assert_fail@plt+0xb224>
   1c800:	mov	r3, #8
   1c804:	sub	r2, r4, r2
   1c808:	mov	r0, r5
   1c80c:	str	r3, [sp]
   1c810:	add	r2, r2, #1
   1c814:	mvn	r3, #-2147483648	; 0x80000000
   1c818:	add	r1, sp, #44	; 0x2c
   1c81c:	bl	1e228 <__assert_fail@plt+0xcb24>
   1c820:	mov	r5, r0
   1c824:	str	r0, [r6]
   1c828:	ldr	r0, [r6, #4]
   1c82c:	ldr	r2, [sp, #44]	; 0x2c
   1c830:	mov	r1, #0
   1c834:	sub	r2, r2, r0
   1c838:	add	r0, r5, r0, lsl #3
   1c83c:	lsl	r2, r2, #3
   1c840:	bl	11590 <memset@plt>
   1c844:	ldr	r3, [sp, #48]	; 0x30
   1c848:	ldr	r7, [sp, #88]	; 0x58
   1c84c:	ldr	r8, [sp, #92]	; 0x5c
   1c850:	ldr	r2, [sp, #44]	; 0x2c
   1c854:	str	r2, [r6, #4]
   1c858:	add	r2, r5, r4, lsl #3
   1c85c:	mov	r1, r2
   1c860:	str	r2, [sp, #32]
   1c864:	ldr	r2, [sp, #52]	; 0x34
   1c868:	ldr	r6, [r1, #4]
   1c86c:	ldr	sl, [r5, r4, lsl #3]
   1c870:	orr	r2, r2, #1
   1c874:	str	r3, [sp]
   1c878:	add	r3, sp, #56	; 0x38
   1c87c:	str	r2, [sp, #36]	; 0x24
   1c880:	str	r2, [sp, #4]
   1c884:	str	r3, [sp, #8]
   1c888:	mov	r0, r6
   1c88c:	str	r8, [sp, #16]
   1c890:	str	r7, [sp, #12]
   1c894:	mov	r1, sl
   1c898:	ldr	r3, [sp, #136]	; 0x88
   1c89c:	mov	r2, fp
   1c8a0:	bl	19540 <__assert_fail@plt+0x7e3c>
   1c8a4:	cmp	sl, r0
   1c8a8:	bhi	1c914 <__assert_fail@plt+0xb210>
   1c8ac:	ldr	r3, [pc, #176]	; 1c964 <__assert_fail@plt+0xb260>
   1c8b0:	add	r7, r0, #1
   1c8b4:	cmp	r6, r3
   1c8b8:	str	r7, [r5, r4, lsl #3]
   1c8bc:	beq	1c8c8 <__assert_fail@plt+0xb1c4>
   1c8c0:	mov	r0, r6
   1c8c4:	bl	15334 <__assert_fail@plt+0x3c30>
   1c8c8:	mov	r0, r7
   1c8cc:	bl	1e00c <__assert_fail@plt+0xc908>
   1c8d0:	ldr	r3, [sp, #32]
   1c8d4:	ldr	lr, [sp, #92]	; 0x5c
   1c8d8:	ldr	ip, [sp, #88]	; 0x58
   1c8dc:	ldr	r4, [sp, #36]	; 0x24
   1c8e0:	mov	r2, fp
   1c8e4:	mov	r1, r7
   1c8e8:	str	r0, [r3, #4]
   1c8ec:	add	r3, sp, #56	; 0x38
   1c8f0:	str	r3, [sp, #8]
   1c8f4:	ldr	r3, [sp, #48]	; 0x30
   1c8f8:	str	r4, [sp, #4]
   1c8fc:	str	r3, [sp]
   1c900:	str	lr, [sp, #16]
   1c904:	str	ip, [sp, #12]
   1c908:	ldr	r3, [sp, #136]	; 0x88
   1c90c:	mov	r6, r0
   1c910:	bl	19540 <__assert_fail@plt+0x7e3c>
   1c914:	ldr	r3, [sp, #28]
   1c918:	mov	r0, r6
   1c91c:	str	r3, [r9]
   1c920:	add	sp, sp, #100	; 0x64
   1c924:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c928:	mov	r3, #8
   1c92c:	sub	r2, r4, r2
   1c930:	str	r3, [sp]
   1c934:	add	r1, sp, #44	; 0x2c
   1c938:	add	r2, r2, #1
   1c93c:	mvn	r3, #-2147483648	; 0x80000000
   1c940:	bl	1e228 <__assert_fail@plt+0xcb24>
   1c944:	mov	r5, r0
   1c948:	ldm	r7, {r0, r1}
   1c94c:	str	r5, [r6]
   1c950:	stm	r5, {r0, r1}
   1c954:	b	1c828 <__assert_fail@plt+0xb124>
   1c958:	bl	116e0 <abort@plt>
   1c95c:	andeq	r4, r3, r8, asr #7
   1c960:	ldrdeq	r4, [r3], -ip
   1c964:	strdeq	r4, [r3], -r8
   1c968:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c96c:	mov	r5, r0
   1c970:	ldr	lr, [pc, #452]	; 1cb3c <__assert_fail@plt+0xb438>
   1c974:	mov	r6, r1
   1c978:	mov	sl, r2
   1c97c:	ldm	lr!, {r0, r1, r2, r3}
   1c980:	sub	sp, sp, #92	; 0x5c
   1c984:	add	ip, sp, #40	; 0x28
   1c988:	cmp	r6, #0
   1c98c:	cmpne	r5, #0
   1c990:	stmia	ip!, {r0, r1, r2, r3}
   1c994:	mov	r9, #10
   1c998:	ldm	lr!, {r0, r1, r2, r3}
   1c99c:	moveq	fp, #1
   1c9a0:	movne	fp, #0
   1c9a4:	str	r9, [sp, #40]	; 0x28
   1c9a8:	stmia	ip!, {r0, r1, r2, r3}
   1c9ac:	ldm	lr, {r0, r1, r2, r3}
   1c9b0:	stm	ip, {r0, r1, r2, r3}
   1c9b4:	beq	1cb38 <__assert_fail@plt+0xb434>
   1c9b8:	str	r5, [sp, #80]	; 0x50
   1c9bc:	str	r6, [sp, #84]	; 0x54
   1c9c0:	bl	1156c <__errno_location@plt>
   1c9c4:	ldr	r7, [pc, #372]	; 1cb40 <__assert_fail@plt+0xb43c>
   1c9c8:	ldr	r2, [r7, #4]
   1c9cc:	ldr	r4, [r7]
   1c9d0:	cmp	r2, #0
   1c9d4:	ldr	r3, [r0]
   1c9d8:	mov	r8, r0
   1c9dc:	str	r3, [sp, #24]
   1c9e0:	movgt	r3, r9
   1c9e4:	bgt	1ca4c <__assert_fail@plt+0xb348>
   1c9e8:	add	r5, r7, #8
   1c9ec:	cmp	r4, r5
   1c9f0:	str	r2, [sp, #36]	; 0x24
   1c9f4:	beq	1cb08 <__assert_fail@plt+0xb404>
   1c9f8:	mov	r3, #8
   1c9fc:	mov	r0, r4
   1ca00:	str	r3, [sp]
   1ca04:	rsb	r2, r2, #1
   1ca08:	mvn	r3, #-2147483648	; 0x80000000
   1ca0c:	add	r1, sp, #36	; 0x24
   1ca10:	bl	1e228 <__assert_fail@plt+0xcb24>
   1ca14:	mov	r4, r0
   1ca18:	str	r0, [r7]
   1ca1c:	ldr	r0, [r7, #4]
   1ca20:	ldr	r2, [sp, #36]	; 0x24
   1ca24:	mov	r1, #0
   1ca28:	sub	r2, r2, r0
   1ca2c:	add	r0, r4, r0, lsl #3
   1ca30:	lsl	r2, r2, #3
   1ca34:	bl	11590 <memset@plt>
   1ca38:	ldr	r3, [sp, #40]	; 0x28
   1ca3c:	ldr	r5, [sp, #80]	; 0x50
   1ca40:	ldr	r6, [sp, #84]	; 0x54
   1ca44:	ldr	r2, [sp, #36]	; 0x24
   1ca48:	str	r2, [r7, #4]
   1ca4c:	ldr	r2, [sp, #44]	; 0x2c
   1ca50:	ldr	r9, [r4]
   1ca54:	ldr	r7, [r4, #4]
   1ca58:	orr	r2, r2, #1
   1ca5c:	add	fp, sp, #48	; 0x30
   1ca60:	str	r2, [sp, #28]
   1ca64:	str	r2, [sp, #4]
   1ca68:	str	r3, [sp]
   1ca6c:	str	r6, [sp, #16]
   1ca70:	str	r5, [sp, #12]
   1ca74:	mov	r1, r9
   1ca78:	mov	r0, r7
   1ca7c:	str	fp, [sp, #8]
   1ca80:	mvn	r3, #0
   1ca84:	mov	r2, sl
   1ca88:	bl	19540 <__assert_fail@plt+0x7e3c>
   1ca8c:	cmp	r9, r0
   1ca90:	bhi	1caf4 <__assert_fail@plt+0xb3f0>
   1ca94:	ldr	r3, [pc, #168]	; 1cb44 <__assert_fail@plt+0xb440>
   1ca98:	add	r5, r0, #1
   1ca9c:	cmp	r7, r3
   1caa0:	str	r5, [r4]
   1caa4:	beq	1cab0 <__assert_fail@plt+0xb3ac>
   1caa8:	mov	r0, r7
   1caac:	bl	15334 <__assert_fail@plt+0x3c30>
   1cab0:	mov	r0, r5
   1cab4:	bl	1e00c <__assert_fail@plt+0xc908>
   1cab8:	ldr	lr, [sp, #84]	; 0x54
   1cabc:	ldr	r3, [sp, #40]	; 0x28
   1cac0:	ldr	ip, [sp, #80]	; 0x50
   1cac4:	mov	r2, sl
   1cac8:	mov	r1, r5
   1cacc:	str	r0, [r4, #4]
   1cad0:	ldr	r4, [sp, #28]
   1cad4:	str	r3, [sp]
   1cad8:	str	fp, [sp, #8]
   1cadc:	str	r4, [sp, #4]
   1cae0:	str	lr, [sp, #16]
   1cae4:	str	ip, [sp, #12]
   1cae8:	mvn	r3, #0
   1caec:	mov	r7, r0
   1caf0:	bl	19540 <__assert_fail@plt+0x7e3c>
   1caf4:	ldr	r3, [sp, #24]
   1caf8:	mov	r0, r7
   1cafc:	str	r3, [r8]
   1cb00:	add	sp, sp, #92	; 0x5c
   1cb04:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1cb08:	mov	r3, #8
   1cb0c:	str	r3, [sp]
   1cb10:	add	r1, sp, #36	; 0x24
   1cb14:	rsb	r2, r2, #1
   1cb18:	mov	r0, fp
   1cb1c:	mvn	r3, #-2147483648	; 0x80000000
   1cb20:	bl	1e228 <__assert_fail@plt+0xcb24>
   1cb24:	mov	r4, r0
   1cb28:	ldm	r5, {r0, r1}
   1cb2c:	str	r4, [r7]
   1cb30:	stm	r4, {r0, r1}
   1cb34:	b	1ca1c <__assert_fail@plt+0xb318>
   1cb38:	bl	116e0 <abort@plt>
   1cb3c:	andeq	r4, r3, r8, asr #7
   1cb40:	ldrdeq	r4, [r3], -ip
   1cb44:	strdeq	r4, [r3], -r8
   1cb48:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1cb4c:	mov	r5, r0
   1cb50:	ldr	lr, [pc, #464]	; 1cd28 <__assert_fail@plt+0xb624>
   1cb54:	mov	r6, r1
   1cb58:	mov	sl, r2
   1cb5c:	mov	fp, r3
   1cb60:	ldm	lr!, {r0, r1, r2, r3}
   1cb64:	sub	sp, sp, #92	; 0x5c
   1cb68:	add	ip, sp, #40	; 0x28
   1cb6c:	cmp	r6, #0
   1cb70:	cmpne	r5, #0
   1cb74:	stmia	ip!, {r0, r1, r2, r3}
   1cb78:	moveq	r4, #1
   1cb7c:	ldm	lr!, {r0, r1, r2, r3}
   1cb80:	movne	r4, #0
   1cb84:	mov	r9, #10
   1cb88:	str	r4, [sp, #28]
   1cb8c:	stmia	ip!, {r0, r1, r2, r3}
   1cb90:	ldm	lr, {r0, r1, r2, r3}
   1cb94:	str	r9, [sp, #40]	; 0x28
   1cb98:	stm	ip, {r0, r1, r2, r3}
   1cb9c:	beq	1cd24 <__assert_fail@plt+0xb620>
   1cba0:	str	r5, [sp, #80]	; 0x50
   1cba4:	str	r6, [sp, #84]	; 0x54
   1cba8:	bl	1156c <__errno_location@plt>
   1cbac:	ldr	r7, [pc, #376]	; 1cd2c <__assert_fail@plt+0xb628>
   1cbb0:	ldr	r2, [r7, #4]
   1cbb4:	ldr	r4, [r7]
   1cbb8:	cmp	r2, #0
   1cbbc:	ldr	r3, [r0]
   1cbc0:	mov	r8, r0
   1cbc4:	str	r3, [sp, #24]
   1cbc8:	movgt	r3, r9
   1cbcc:	bgt	1cc34 <__assert_fail@plt+0xb530>
   1cbd0:	add	r5, r7, #8
   1cbd4:	cmp	r4, r5
   1cbd8:	str	r2, [sp, #36]	; 0x24
   1cbdc:	beq	1ccf4 <__assert_fail@plt+0xb5f0>
   1cbe0:	mov	r3, #8
   1cbe4:	mov	r0, r4
   1cbe8:	str	r3, [sp]
   1cbec:	rsb	r2, r2, #1
   1cbf0:	mvn	r3, #-2147483648	; 0x80000000
   1cbf4:	add	r1, sp, #36	; 0x24
   1cbf8:	bl	1e228 <__assert_fail@plt+0xcb24>
   1cbfc:	mov	r4, r0
   1cc00:	str	r0, [r7]
   1cc04:	ldr	r0, [r7, #4]
   1cc08:	ldr	r2, [sp, #36]	; 0x24
   1cc0c:	mov	r1, #0
   1cc10:	sub	r2, r2, r0
   1cc14:	add	r0, r4, r0, lsl #3
   1cc18:	lsl	r2, r2, #3
   1cc1c:	bl	11590 <memset@plt>
   1cc20:	ldr	r3, [sp, #40]	; 0x28
   1cc24:	ldr	r5, [sp, #80]	; 0x50
   1cc28:	ldr	r6, [sp, #84]	; 0x54
   1cc2c:	ldr	r2, [sp, #36]	; 0x24
   1cc30:	str	r2, [r7, #4]
   1cc34:	ldr	r2, [sp, #44]	; 0x2c
   1cc38:	ldr	r9, [r4]
   1cc3c:	ldr	r7, [r4, #4]
   1cc40:	orr	r2, r2, #1
   1cc44:	str	r3, [sp]
   1cc48:	add	r3, sp, #48	; 0x30
   1cc4c:	str	r2, [sp, #28]
   1cc50:	str	r2, [sp, #4]
   1cc54:	str	r3, [sp, #8]
   1cc58:	str	r6, [sp, #16]
   1cc5c:	str	r5, [sp, #12]
   1cc60:	mov	r1, r9
   1cc64:	mov	r0, r7
   1cc68:	mov	r3, fp
   1cc6c:	mov	r2, sl
   1cc70:	bl	19540 <__assert_fail@plt+0x7e3c>
   1cc74:	cmp	r9, r0
   1cc78:	bhi	1cce0 <__assert_fail@plt+0xb5dc>
   1cc7c:	ldr	r3, [pc, #172]	; 1cd30 <__assert_fail@plt+0xb62c>
   1cc80:	add	r5, r0, #1
   1cc84:	cmp	r7, r3
   1cc88:	str	r5, [r4]
   1cc8c:	beq	1cc98 <__assert_fail@plt+0xb594>
   1cc90:	mov	r0, r7
   1cc94:	bl	15334 <__assert_fail@plt+0x3c30>
   1cc98:	mov	r0, r5
   1cc9c:	bl	1e00c <__assert_fail@plt+0xc908>
   1cca0:	add	lr, sp, #48	; 0x30
   1cca4:	ldr	ip, [sp, #84]	; 0x54
   1cca8:	mov	r1, r5
   1ccac:	ldr	r5, [sp, #28]
   1ccb0:	mov	r3, fp
   1ccb4:	mov	r2, sl
   1ccb8:	str	r0, [r4, #4]
   1ccbc:	ldr	r4, [sp, #80]	; 0x50
   1ccc0:	str	lr, [sp, #8]
   1ccc4:	ldr	lr, [sp, #40]	; 0x28
   1ccc8:	str	r5, [sp, #4]
   1cccc:	str	ip, [sp, #16]
   1ccd0:	str	r4, [sp, #12]
   1ccd4:	str	lr, [sp]
   1ccd8:	mov	r7, r0
   1ccdc:	bl	19540 <__assert_fail@plt+0x7e3c>
   1cce0:	ldr	r3, [sp, #24]
   1cce4:	mov	r0, r7
   1cce8:	str	r3, [r8]
   1ccec:	add	sp, sp, #92	; 0x5c
   1ccf0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ccf4:	mov	r3, #8
   1ccf8:	str	r3, [sp]
   1ccfc:	add	r1, sp, #36	; 0x24
   1cd00:	rsb	r2, r2, #1
   1cd04:	ldr	r0, [sp, #28]
   1cd08:	mvn	r3, #-2147483648	; 0x80000000
   1cd0c:	bl	1e228 <__assert_fail@plt+0xcb24>
   1cd10:	mov	r4, r0
   1cd14:	ldm	r5, {r0, r1}
   1cd18:	str	r4, [r7]
   1cd1c:	stm	r4, {r0, r1}
   1cd20:	b	1cc04 <__assert_fail@plt+0xb500>
   1cd24:	bl	116e0 <abort@plt>
   1cd28:	andeq	r4, r3, r8, asr #7
   1cd2c:	ldrdeq	r4, [r3], -ip
   1cd30:	strdeq	r4, [r3], -r8
   1cd34:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1cd38:	sub	sp, sp, #52	; 0x34
   1cd3c:	mov	r5, r0
   1cd40:	mov	sl, r1
   1cd44:	mov	fp, r2
   1cd48:	bl	1156c <__errno_location@plt>
   1cd4c:	ldr	r4, [pc, #404]	; 1cee8 <__assert_fail@plt+0xb7e4>
   1cd50:	cmn	r5, #-2147483647	; 0x80000001
   1cd54:	ldr	r6, [r4]
   1cd58:	mov	r8, r0
   1cd5c:	movne	r0, #0
   1cd60:	moveq	r0, #1
   1cd64:	ldr	r3, [r8]
   1cd68:	orrs	r0, r0, r5, lsr #31
   1cd6c:	str	r3, [sp, #28]
   1cd70:	bne	1cee4 <__assert_fail@plt+0xb7e0>
   1cd74:	ldr	r2, [r4, #4]
   1cd78:	cmp	r5, r2
   1cd7c:	blt	1cddc <__assert_fail@plt+0xb6d8>
   1cd80:	add	r7, r4, #8
   1cd84:	cmp	r6, r7
   1cd88:	str	r2, [sp, #44]	; 0x2c
   1cd8c:	beq	1ceb4 <__assert_fail@plt+0xb7b0>
   1cd90:	mov	r3, #8
   1cd94:	sub	r2, r5, r2
   1cd98:	mov	r0, r6
   1cd9c:	str	r3, [sp]
   1cda0:	add	r2, r2, #1
   1cda4:	mvn	r3, #-2147483648	; 0x80000000
   1cda8:	add	r1, sp, #44	; 0x2c
   1cdac:	bl	1e228 <__assert_fail@plt+0xcb24>
   1cdb0:	mov	r6, r0
   1cdb4:	str	r0, [r4]
   1cdb8:	ldr	r0, [r4, #4]
   1cdbc:	ldr	r2, [sp, #44]	; 0x2c
   1cdc0:	mov	r1, #0
   1cdc4:	sub	r2, r2, r0
   1cdc8:	add	r0, r6, r0, lsl #3
   1cdcc:	lsl	r2, r2, #3
   1cdd0:	bl	11590 <memset@plt>
   1cdd4:	ldr	r3, [sp, #44]	; 0x2c
   1cdd8:	str	r3, [r4, #4]
   1cddc:	ldr	r2, [r4, #56]	; 0x38
   1cde0:	add	r3, r6, r5, lsl #3
   1cde4:	ldr	r1, [r4, #20]
   1cde8:	ldr	r7, [r3, #4]
   1cdec:	ldr	r9, [r6, r5, lsl #3]
   1cdf0:	ldr	ip, [r4, #60]	; 0x3c
   1cdf4:	str	r3, [sp, #32]
   1cdf8:	ldr	r3, [r4, #16]
   1cdfc:	str	r2, [sp, #12]
   1ce00:	ldr	r2, [pc, #228]	; 1ceec <__assert_fail@plt+0xb7e8>
   1ce04:	orr	r1, r1, #1
   1ce08:	str	r1, [sp, #36]	; 0x24
   1ce0c:	str	r1, [sp, #4]
   1ce10:	str	r2, [sp, #8]
   1ce14:	str	r3, [sp]
   1ce18:	mov	r0, r7
   1ce1c:	mov	r1, r9
   1ce20:	str	ip, [sp, #16]
   1ce24:	mov	r3, fp
   1ce28:	mov	r2, sl
   1ce2c:	bl	19540 <__assert_fail@plt+0x7e3c>
   1ce30:	cmp	r9, r0
   1ce34:	bhi	1cea0 <__assert_fail@plt+0xb79c>
   1ce38:	ldr	r3, [pc, #176]	; 1cef0 <__assert_fail@plt+0xb7ec>
   1ce3c:	add	r9, r0, #1
   1ce40:	cmp	r7, r3
   1ce44:	str	r9, [r6, r5, lsl #3]
   1ce48:	beq	1ce54 <__assert_fail@plt+0xb750>
   1ce4c:	mov	r0, r7
   1ce50:	bl	15334 <__assert_fail@plt+0x3c30>
   1ce54:	mov	r0, r9
   1ce58:	bl	1e00c <__assert_fail@plt+0xc908>
   1ce5c:	ldr	ip, [sp, #32]
   1ce60:	ldr	lr, [r4, #60]	; 0x3c
   1ce64:	ldr	r5, [r4, #56]	; 0x38
   1ce68:	mov	r3, fp
   1ce6c:	mov	r2, sl
   1ce70:	mov	r1, r9
   1ce74:	str	r0, [ip, #4]
   1ce78:	ldr	ip, [r4, #16]
   1ce7c:	ldr	r4, [pc, #104]	; 1ceec <__assert_fail@plt+0xb7e8>
   1ce80:	str	lr, [sp, #16]
   1ce84:	str	r4, [sp, #8]
   1ce88:	ldr	r4, [sp, #36]	; 0x24
   1ce8c:	str	r5, [sp, #12]
   1ce90:	str	r4, [sp, #4]
   1ce94:	str	ip, [sp]
   1ce98:	mov	r7, r0
   1ce9c:	bl	19540 <__assert_fail@plt+0x7e3c>
   1cea0:	ldr	r3, [sp, #28]
   1cea4:	mov	r0, r7
   1cea8:	str	r3, [r8]
   1ceac:	add	sp, sp, #52	; 0x34
   1ceb0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ceb4:	mov	r3, #8
   1ceb8:	sub	r2, r5, r2
   1cebc:	str	r3, [sp]
   1cec0:	add	r1, sp, #44	; 0x2c
   1cec4:	add	r2, r2, #1
   1cec8:	mvn	r3, #-2147483648	; 0x80000000
   1cecc:	bl	1e228 <__assert_fail@plt+0xcb24>
   1ced0:	mov	r6, r0
   1ced4:	ldm	r7, {r0, r1}
   1ced8:	str	r6, [r4]
   1cedc:	stm	r6, {r0, r1}
   1cee0:	b	1cdb8 <__assert_fail@plt+0xb6b4>
   1cee4:	bl	116e0 <abort@plt>
   1cee8:	ldrdeq	r4, [r3], -ip
   1ceec:	strdeq	r4, [r3], -r4	; <UNPREDICTABLE>
   1cef0:	strdeq	r4, [r3], -r8
   1cef4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1cef8:	sub	sp, sp, #44	; 0x2c
   1cefc:	mov	r9, r0
   1cf00:	mov	sl, r1
   1cf04:	bl	1156c <__errno_location@plt>
   1cf08:	ldr	r4, [pc, #360]	; 1d078 <__assert_fail@plt+0xb974>
   1cf0c:	ldr	r2, [r4, #4]
   1cf10:	ldr	r5, [r4]
   1cf14:	cmp	r2, #0
   1cf18:	ldr	r3, [r0]
   1cf1c:	mov	r7, r0
   1cf20:	str	r3, [sp, #24]
   1cf24:	bgt	1cf80 <__assert_fail@plt+0xb87c>
   1cf28:	add	r6, r4, #8
   1cf2c:	cmp	r5, r6
   1cf30:	str	r2, [sp, #36]	; 0x24
   1cf34:	beq	1d048 <__assert_fail@plt+0xb944>
   1cf38:	mov	r3, #8
   1cf3c:	mov	r0, r5
   1cf40:	str	r3, [sp]
   1cf44:	rsb	r2, r2, #1
   1cf48:	mvn	r3, #-2147483648	; 0x80000000
   1cf4c:	add	r1, sp, #36	; 0x24
   1cf50:	bl	1e228 <__assert_fail@plt+0xcb24>
   1cf54:	mov	r5, r0
   1cf58:	str	r0, [r4]
   1cf5c:	ldr	r0, [r4, #4]
   1cf60:	ldr	r2, [sp, #36]	; 0x24
   1cf64:	mov	r1, #0
   1cf68:	sub	r2, r2, r0
   1cf6c:	add	r0, r5, r0, lsl #3
   1cf70:	lsl	r2, r2, #3
   1cf74:	bl	11590 <memset@plt>
   1cf78:	ldr	r3, [sp, #36]	; 0x24
   1cf7c:	str	r3, [r4, #4]
   1cf80:	ldr	r1, [r4, #20]
   1cf84:	ldr	r8, [r5]
   1cf88:	ldr	r6, [r5, #4]
   1cf8c:	ldr	r2, [r4, #56]	; 0x38
   1cf90:	ldr	r3, [r4, #16]
   1cf94:	ldr	ip, [r4, #60]	; 0x3c
   1cf98:	ldr	fp, [pc, #220]	; 1d07c <__assert_fail@plt+0xb978>
   1cf9c:	orr	r1, r1, #1
   1cfa0:	str	r1, [sp, #28]
   1cfa4:	str	r1, [sp, #4]
   1cfa8:	str	r2, [sp, #12]
   1cfac:	str	r3, [sp]
   1cfb0:	mov	r1, r8
   1cfb4:	mov	r0, r6
   1cfb8:	str	ip, [sp, #16]
   1cfbc:	str	fp, [sp, #8]
   1cfc0:	mov	r3, sl
   1cfc4:	mov	r2, r9
   1cfc8:	bl	19540 <__assert_fail@plt+0x7e3c>
   1cfcc:	cmp	r8, r0
   1cfd0:	bhi	1d034 <__assert_fail@plt+0xb930>
   1cfd4:	ldr	r3, [pc, #164]	; 1d080 <__assert_fail@plt+0xb97c>
   1cfd8:	add	r8, r0, #1
   1cfdc:	cmp	r6, r3
   1cfe0:	str	r8, [r5]
   1cfe4:	beq	1cff0 <__assert_fail@plt+0xb8ec>
   1cfe8:	mov	r0, r6
   1cfec:	bl	15334 <__assert_fail@plt+0x3c30>
   1cff0:	mov	r0, r8
   1cff4:	bl	1e00c <__assert_fail@plt+0xc908>
   1cff8:	ldr	lr, [r4, #60]	; 0x3c
   1cffc:	ldr	ip, [r4, #16]
   1d000:	mov	r3, sl
   1d004:	mov	r2, r9
   1d008:	mov	r1, r8
   1d00c:	str	r0, [r5, #4]
   1d010:	ldr	r5, [r4, #56]	; 0x38
   1d014:	ldr	r4, [sp, #28]
   1d018:	str	fp, [sp, #8]
   1d01c:	str	r4, [sp, #4]
   1d020:	str	lr, [sp, #16]
   1d024:	str	r5, [sp, #12]
   1d028:	str	ip, [sp]
   1d02c:	mov	r6, r0
   1d030:	bl	19540 <__assert_fail@plt+0x7e3c>
   1d034:	ldr	r3, [sp, #24]
   1d038:	mov	r0, r6
   1d03c:	str	r3, [r7]
   1d040:	add	sp, sp, #44	; 0x2c
   1d044:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d048:	mov	r3, #8
   1d04c:	str	r3, [sp]
   1d050:	add	r1, sp, #36	; 0x24
   1d054:	rsb	r2, r2, #1
   1d058:	mvn	r3, #-2147483648	; 0x80000000
   1d05c:	mov	r0, #0
   1d060:	bl	1e228 <__assert_fail@plt+0xcb24>
   1d064:	mov	r5, r0
   1d068:	ldm	r6, {r0, r1}
   1d06c:	str	r5, [r4]
   1d070:	stm	r5, {r0, r1}
   1d074:	b	1cf5c <__assert_fail@plt+0xb858>
   1d078:	ldrdeq	r4, [r3], -ip
   1d07c:	strdeq	r4, [r3], -r4	; <UNPREDICTABLE>
   1d080:	strdeq	r4, [r3], -r8
   1d084:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d088:	sub	sp, sp, #44	; 0x2c
   1d08c:	mov	r5, r0
   1d090:	mov	sl, r1
   1d094:	bl	1156c <__errno_location@plt>
   1d098:	ldr	r4, [pc, #396]	; 1d22c <__assert_fail@plt+0xbb28>
   1d09c:	cmn	r5, #-2147483647	; 0x80000001
   1d0a0:	ldr	r6, [r4]
   1d0a4:	mov	r8, r0
   1d0a8:	movne	r0, #0
   1d0ac:	moveq	r0, #1
   1d0b0:	ldr	r3, [r8]
   1d0b4:	orrs	r0, r0, r5, lsr #31
   1d0b8:	str	r3, [sp, #24]
   1d0bc:	bne	1d228 <__assert_fail@plt+0xbb24>
   1d0c0:	ldr	r2, [r4, #4]
   1d0c4:	cmp	r5, r2
   1d0c8:	blt	1d128 <__assert_fail@plt+0xba24>
   1d0cc:	add	r7, r4, #8
   1d0d0:	cmp	r6, r7
   1d0d4:	str	r2, [sp, #36]	; 0x24
   1d0d8:	beq	1d1f8 <__assert_fail@plt+0xbaf4>
   1d0dc:	mov	r3, #8
   1d0e0:	sub	r2, r5, r2
   1d0e4:	mov	r0, r6
   1d0e8:	str	r3, [sp]
   1d0ec:	add	r2, r2, #1
   1d0f0:	mvn	r3, #-2147483648	; 0x80000000
   1d0f4:	add	r1, sp, #36	; 0x24
   1d0f8:	bl	1e228 <__assert_fail@plt+0xcb24>
   1d0fc:	mov	r6, r0
   1d100:	str	r0, [r4]
   1d104:	ldr	r0, [r4, #4]
   1d108:	ldr	r2, [sp, #36]	; 0x24
   1d10c:	mov	r1, #0
   1d110:	sub	r2, r2, r0
   1d114:	add	r0, r6, r0, lsl #3
   1d118:	lsl	r2, r2, #3
   1d11c:	bl	11590 <memset@plt>
   1d120:	ldr	r3, [sp, #36]	; 0x24
   1d124:	str	r3, [r4, #4]
   1d128:	ldr	r2, [r4, #56]	; 0x38
   1d12c:	add	fp, r6, r5, lsl #3
   1d130:	ldr	r1, [r4, #20]
   1d134:	ldr	r9, [r6, r5, lsl #3]
   1d138:	ldr	r7, [fp, #4]
   1d13c:	ldr	r3, [r4, #16]
   1d140:	ldr	ip, [r4, #60]	; 0x3c
   1d144:	str	r2, [sp, #12]
   1d148:	ldr	r2, [pc, #224]	; 1d230 <__assert_fail@plt+0xbb2c>
   1d14c:	orr	r1, r1, #1
   1d150:	str	r1, [sp, #28]
   1d154:	str	r1, [sp, #4]
   1d158:	str	r2, [sp, #8]
   1d15c:	str	r3, [sp]
   1d160:	mov	r0, r7
   1d164:	mov	r1, r9
   1d168:	str	ip, [sp, #16]
   1d16c:	mvn	r3, #0
   1d170:	mov	r2, sl
   1d174:	bl	19540 <__assert_fail@plt+0x7e3c>
   1d178:	cmp	r9, r0
   1d17c:	bhi	1d1e4 <__assert_fail@plt+0xbae0>
   1d180:	ldr	r3, [pc, #172]	; 1d234 <__assert_fail@plt+0xbb30>
   1d184:	add	r9, r0, #1
   1d188:	cmp	r7, r3
   1d18c:	str	r9, [r6, r5, lsl #3]
   1d190:	beq	1d19c <__assert_fail@plt+0xba98>
   1d194:	mov	r0, r7
   1d198:	bl	15334 <__assert_fail@plt+0x3c30>
   1d19c:	mov	r0, r9
   1d1a0:	bl	1e00c <__assert_fail@plt+0xc908>
   1d1a4:	ldr	ip, [r4, #60]	; 0x3c
   1d1a8:	ldr	r3, [r4, #16]
   1d1ac:	ldr	lr, [r4, #56]	; 0x38
   1d1b0:	ldr	r4, [pc, #120]	; 1d230 <__assert_fail@plt+0xbb2c>
   1d1b4:	mov	r2, sl
   1d1b8:	mov	r1, r9
   1d1bc:	str	r0, [fp, #4]
   1d1c0:	str	r4, [sp, #8]
   1d1c4:	ldr	r4, [sp, #28]
   1d1c8:	str	r3, [sp]
   1d1cc:	str	r4, [sp, #4]
   1d1d0:	str	ip, [sp, #16]
   1d1d4:	str	lr, [sp, #12]
   1d1d8:	mvn	r3, #0
   1d1dc:	mov	r7, r0
   1d1e0:	bl	19540 <__assert_fail@plt+0x7e3c>
   1d1e4:	ldr	r3, [sp, #24]
   1d1e8:	mov	r0, r7
   1d1ec:	str	r3, [r8]
   1d1f0:	add	sp, sp, #44	; 0x2c
   1d1f4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d1f8:	mov	r3, #8
   1d1fc:	sub	r2, r5, r2
   1d200:	str	r3, [sp]
   1d204:	add	r1, sp, #36	; 0x24
   1d208:	add	r2, r2, #1
   1d20c:	mvn	r3, #-2147483648	; 0x80000000
   1d210:	bl	1e228 <__assert_fail@plt+0xcb24>
   1d214:	mov	r6, r0
   1d218:	ldm	r7, {r0, r1}
   1d21c:	str	r6, [r4]
   1d220:	stm	r6, {r0, r1}
   1d224:	b	1d104 <__assert_fail@plt+0xba00>
   1d228:	bl	116e0 <abort@plt>
   1d22c:	ldrdeq	r4, [r3], -ip
   1d230:	strdeq	r4, [r3], -r4	; <UNPREDICTABLE>
   1d234:	strdeq	r4, [r3], -r8
   1d238:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d23c:	sub	sp, sp, #44	; 0x2c
   1d240:	mov	sl, r0
   1d244:	bl	1156c <__errno_location@plt>
   1d248:	ldr	r4, [pc, #348]	; 1d3ac <__assert_fail@plt+0xbca8>
   1d24c:	ldr	r2, [r4, #4]
   1d250:	ldr	r5, [r4]
   1d254:	cmp	r2, #0
   1d258:	ldr	r3, [r0]
   1d25c:	mov	r8, r0
   1d260:	str	r3, [sp, #28]
   1d264:	bgt	1d2c0 <__assert_fail@plt+0xbbbc>
   1d268:	add	r6, r4, #8
   1d26c:	cmp	r5, r6
   1d270:	str	r2, [sp, #36]	; 0x24
   1d274:	beq	1d37c <__assert_fail@plt+0xbc78>
   1d278:	mov	r3, #8
   1d27c:	mov	r0, r5
   1d280:	str	r3, [sp]
   1d284:	rsb	r2, r2, #1
   1d288:	mvn	r3, #-2147483648	; 0x80000000
   1d28c:	add	r1, sp, #36	; 0x24
   1d290:	bl	1e228 <__assert_fail@plt+0xcb24>
   1d294:	mov	r5, r0
   1d298:	str	r0, [r4]
   1d29c:	ldr	r0, [r4, #4]
   1d2a0:	ldr	r2, [sp, #36]	; 0x24
   1d2a4:	mov	r1, #0
   1d2a8:	sub	r2, r2, r0
   1d2ac:	add	r0, r5, r0, lsl #3
   1d2b0:	lsl	r2, r2, #3
   1d2b4:	bl	11590 <memset@plt>
   1d2b8:	ldr	r3, [sp, #36]	; 0x24
   1d2bc:	str	r3, [r4, #4]
   1d2c0:	ldr	r7, [r4, #20]
   1d2c4:	ldr	r9, [r5]
   1d2c8:	ldr	r6, [r5, #4]
   1d2cc:	ldr	r2, [r4, #56]	; 0x38
   1d2d0:	ldr	r3, [r4, #16]
   1d2d4:	ldr	ip, [r4, #60]	; 0x3c
   1d2d8:	ldr	fp, [pc, #208]	; 1d3b0 <__assert_fail@plt+0xbcac>
   1d2dc:	orr	r7, r7, #1
   1d2e0:	str	r2, [sp, #12]
   1d2e4:	str	r3, [sp]
   1d2e8:	str	r7, [sp, #4]
   1d2ec:	mov	r1, r9
   1d2f0:	mov	r0, r6
   1d2f4:	str	ip, [sp, #16]
   1d2f8:	str	fp, [sp, #8]
   1d2fc:	mvn	r3, #0
   1d300:	mov	r2, sl
   1d304:	bl	19540 <__assert_fail@plt+0x7e3c>
   1d308:	cmp	r9, r0
   1d30c:	bhi	1d368 <__assert_fail@plt+0xbc64>
   1d310:	ldr	r3, [pc, #156]	; 1d3b4 <__assert_fail@plt+0xbcb0>
   1d314:	add	r9, r0, #1
   1d318:	cmp	r6, r3
   1d31c:	str	r9, [r5]
   1d320:	beq	1d32c <__assert_fail@plt+0xbc28>
   1d324:	mov	r0, r6
   1d328:	bl	15334 <__assert_fail@plt+0x3c30>
   1d32c:	mov	r0, r9
   1d330:	bl	1e00c <__assert_fail@plt+0xc908>
   1d334:	ldr	ip, [r4, #60]	; 0x3c
   1d338:	ldr	r3, [r4, #16]
   1d33c:	ldr	lr, [r4, #56]	; 0x38
   1d340:	mov	r2, sl
   1d344:	mov	r1, r9
   1d348:	str	r0, [r5, #4]
   1d34c:	str	r3, [sp]
   1d350:	stmib	sp, {r7, fp}
   1d354:	str	ip, [sp, #16]
   1d358:	str	lr, [sp, #12]
   1d35c:	mvn	r3, #0
   1d360:	mov	r6, r0
   1d364:	bl	19540 <__assert_fail@plt+0x7e3c>
   1d368:	ldr	r3, [sp, #28]
   1d36c:	mov	r0, r6
   1d370:	str	r3, [r8]
   1d374:	add	sp, sp, #44	; 0x2c
   1d378:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d37c:	mov	r3, #8
   1d380:	str	r3, [sp]
   1d384:	add	r1, sp, #36	; 0x24
   1d388:	rsb	r2, r2, #1
   1d38c:	mvn	r3, #-2147483648	; 0x80000000
   1d390:	mov	r0, #0
   1d394:	bl	1e228 <__assert_fail@plt+0xcb24>
   1d398:	mov	r5, r0
   1d39c:	ldm	r6, {r0, r1}
   1d3a0:	str	r5, [r4]
   1d3a4:	stm	r5, {r0, r1}
   1d3a8:	b	1d29c <__assert_fail@plt+0xbb98>
   1d3ac:	ldrdeq	r4, [r3], -ip
   1d3b0:	strdeq	r4, [r3], -r4	; <UNPREDICTABLE>
   1d3b4:	strdeq	r4, [r3], -r8
   1d3b8:	push	{r4, r5, r6, lr}
   1d3bc:	mov	r4, #0
   1d3c0:	mov	r5, r0
   1d3c4:	str	r4, [r0, #4]
   1d3c8:	mov	r1, #524288	; 0x80000
   1d3cc:	ldr	r0, [pc, #52]	; 1d408 <__assert_fail@plt+0xbd04>
   1d3d0:	bl	209f8 <__assert_fail@plt+0xf2f4>
   1d3d4:	cmp	r0, r4
   1d3d8:	str	r0, [r5]
   1d3dc:	blt	1d3e8 <__assert_fail@plt+0xbce4>
   1d3e0:	mov	r0, r4
   1d3e4:	pop	{r4, r5, r6, pc}
   1d3e8:	mov	r1, r4
   1d3ec:	mov	r0, r4
   1d3f0:	bl	11524 <getcwd@plt>
   1d3f4:	cmp	r0, r4
   1d3f8:	str	r0, [r5, #4]
   1d3fc:	movne	r0, #0
   1d400:	mvneq	r0, #0
   1d404:	pop	{r4, r5, r6, pc}
   1d408:	andeq	r2, r2, r0, ror r9
   1d40c:	ldr	r3, [r0]
   1d410:	cmp	r3, #0
   1d414:	blt	1d420 <__assert_fail@plt+0xbd1c>
   1d418:	mov	r0, r3
   1d41c:	b	11674 <fchdir@plt>
   1d420:	ldr	r0, [r0, #4]
   1d424:	b	205b0 <__assert_fail@plt+0xeeac>
   1d428:	push	{r4, lr}
   1d42c:	mov	r4, r0
   1d430:	ldr	r0, [r0]
   1d434:	cmp	r0, #0
   1d438:	blt	1d440 <__assert_fail@plt+0xbd3c>
   1d43c:	bl	116ec <close@plt>
   1d440:	ldr	r0, [r4, #4]
   1d444:	pop	{r4, lr}
   1d448:	b	15334 <__assert_fail@plt+0x3c30>
   1d44c:	push	{r4, r5, r6, lr}
   1d450:	ldr	r4, [r0], #8
   1d454:	cmp	r4, r0
   1d458:	beq	1d478 <__assert_fail@plt+0xbd74>
   1d45c:	mov	r0, r4
   1d460:	bl	1f590 <__assert_fail@plt+0xde8c>
   1d464:	cmp	r0, #0
   1d468:	movne	r3, r0
   1d46c:	moveq	r3, r4
   1d470:	mov	r0, r3
   1d474:	pop	{r4, r5, r6, pc}
   1d478:	mov	r0, r1
   1d47c:	mov	r5, r1
   1d480:	bl	1f564 <__assert_fail@plt+0xde60>
   1d484:	subs	r3, r0, #0
   1d488:	beq	1d470 <__assert_fail@plt+0xbd6c>
   1d48c:	mov	r2, r5
   1d490:	mov	r1, r4
   1d494:	pop	{r4, r5, r6, lr}
   1d498:	b	11374 <memcpy@plt>
   1d49c:	push	{r4, r5, r6, lr}
   1d4a0:	mov	r5, r0
   1d4a4:	ldr	r3, [r0, #4]
   1d4a8:	mov	r4, r0
   1d4ac:	ldr	r0, [r5], #8
   1d4b0:	lsl	r6, r3, #1
   1d4b4:	cmp	r0, r5
   1d4b8:	beq	1d4c4 <__assert_fail@plt+0xbdc0>
   1d4bc:	bl	15334 <__assert_fail@plt+0x3c30>
   1d4c0:	ldr	r3, [r4, #4]
   1d4c4:	cmp	r6, r3
   1d4c8:	bcc	1d4f8 <__assert_fail@plt+0xbdf4>
   1d4cc:	mov	r0, r6
   1d4d0:	bl	1f564 <__assert_fail@plt+0xde60>
   1d4d4:	cmp	r0, #0
   1d4d8:	mov	r3, r0
   1d4dc:	mov	r2, r0
   1d4e0:	moveq	r3, r5
   1d4e4:	moveq	r6, #1024	; 0x400
   1d4e8:	movne	r2, #1
   1d4ec:	stm	r4, {r3, r6}
   1d4f0:	mov	r0, r2
   1d4f4:	pop	{r4, r5, r6, pc}
   1d4f8:	bl	1156c <__errno_location@plt>
   1d4fc:	mov	r1, #12
   1d500:	mov	r3, r5
   1d504:	mov	r6, #1024	; 0x400
   1d508:	mov	r2, #0
   1d50c:	str	r1, [r0]
   1d510:	b	1d4ec <__assert_fail@plt+0xbde8>
   1d514:	push	{r4, r5, r6, r7, r8, lr}
   1d518:	mov	r5, r0
   1d51c:	ldr	r3, [r0, #4]
   1d520:	ldr	r8, [r5], #8
   1d524:	mov	r4, r0
   1d528:	cmp	r8, r5
   1d52c:	lsl	r7, r3, #1
   1d530:	beq	1d588 <__assert_fail@plt+0xbe84>
   1d534:	cmp	r3, r7
   1d538:	bhi	1d560 <__assert_fail@plt+0xbe5c>
   1d53c:	mov	r0, r8
   1d540:	mov	r1, r7
   1d544:	bl	1f590 <__assert_fail@plt+0xde8c>
   1d548:	subs	r6, r0, #0
   1d54c:	ldreq	r8, [r4]
   1d550:	beq	1d56c <__assert_fail@plt+0xbe68>
   1d554:	stm	r4, {r6, r7}
   1d558:	mov	r0, #1
   1d55c:	pop	{r4, r5, r6, r7, r8, pc}
   1d560:	bl	1156c <__errno_location@plt>
   1d564:	mov	r3, #12
   1d568:	str	r3, [r0]
   1d56c:	mov	r0, r8
   1d570:	bl	15334 <__assert_fail@plt+0x3c30>
   1d574:	mov	r3, #1024	; 0x400
   1d578:	str	r5, [r4]
   1d57c:	str	r3, [r4, #4]
   1d580:	mov	r0, #0
   1d584:	pop	{r4, r5, r6, r7, r8, pc}
   1d588:	mov	r0, r7
   1d58c:	bl	1f564 <__assert_fail@plt+0xde60>
   1d590:	subs	r6, r0, #0
   1d594:	beq	1d580 <__assert_fail@plt+0xbe7c>
   1d598:	mov	r1, r8
   1d59c:	ldr	r2, [r4, #4]
   1d5a0:	bl	11374 <memcpy@plt>
   1d5a4:	b	1d554 <__assert_fail@plt+0xbe50>
   1d5a8:	push	{r4, r5, r6, lr}
   1d5ac:	sub	sp, sp, #32
   1d5b0:	cmp	r1, #0
   1d5b4:	mov	r4, r0
   1d5b8:	ldr	r5, [sp, #48]	; 0x30
   1d5bc:	ldr	r6, [sp, #52]	; 0x34
   1d5c0:	beq	1d8d8 <__assert_fail@plt+0xc1d4>
   1d5c4:	stm	sp, {r2, r3}
   1d5c8:	mov	r3, r1
   1d5cc:	ldr	r2, [pc, #808]	; 1d8fc <__assert_fail@plt+0xc1f8>
   1d5d0:	mov	r1, #1
   1d5d4:	bl	115c0 <__fprintf_chk@plt>
   1d5d8:	mov	r2, #5
   1d5dc:	ldr	r1, [pc, #796]	; 1d900 <__assert_fail@plt+0xc1fc>
   1d5e0:	mov	r0, #0
   1d5e4:	bl	113bc <dcgettext@plt>
   1d5e8:	ldr	r3, [pc, #788]	; 1d904 <__assert_fail@plt+0xc200>
   1d5ec:	ldr	r2, [pc, #788]	; 1d908 <__assert_fail@plt+0xc204>
   1d5f0:	str	r3, [sp]
   1d5f4:	mov	r1, #1
   1d5f8:	mov	r3, r0
   1d5fc:	mov	r0, r4
   1d600:	bl	115c0 <__fprintf_chk@plt>
   1d604:	mov	r1, r4
   1d608:	mov	r0, #10
   1d60c:	bl	113a4 <fputc_unlocked@plt>
   1d610:	mov	r2, #5
   1d614:	ldr	r1, [pc, #752]	; 1d90c <__assert_fail@plt+0xc208>
   1d618:	mov	r0, #0
   1d61c:	bl	113bc <dcgettext@plt>
   1d620:	mov	r1, #1
   1d624:	ldr	r3, [pc, #740]	; 1d910 <__assert_fail@plt+0xc20c>
   1d628:	mov	r2, r0
   1d62c:	mov	r0, r4
   1d630:	bl	115c0 <__fprintf_chk@plt>
   1d634:	mov	r1, r4
   1d638:	mov	r0, #10
   1d63c:	bl	113a4 <fputc_unlocked@plt>
   1d640:	cmp	r6, #9
   1d644:	ldrls	pc, [pc, r6, lsl #2]
   1d648:	b	1d8f0 <__assert_fail@plt+0xc1ec>
   1d64c:	ldrdeq	sp, [r1], -r0
   1d650:	ldrdeq	sp, [r1], -r8
   1d654:	andeq	sp, r1, r4, lsl #14
   1d658:	andeq	sp, r1, r8, lsr r7
   1d65c:	andeq	sp, r1, r4, ror r7
   1d660:			; <UNDEFINED> instruction: 0x0001d7b0
   1d664:	andeq	sp, r1, ip, ror #15
   1d668:	andeq	sp, r1, r0, lsr r8
   1d66c:	andeq	sp, r1, r0, lsl #17
   1d670:	andeq	sp, r1, r4, ror r6
   1d674:	ldr	r1, [pc, #664]	; 1d914 <__assert_fail@plt+0xc210>
   1d678:	mov	r2, #5
   1d67c:	mov	r0, #0
   1d680:	bl	113bc <dcgettext@plt>
   1d684:	ldr	ip, [r5, #32]
   1d688:	ldr	r1, [r5, #28]
   1d68c:	ldr	r2, [r5, #24]
   1d690:	ldr	r3, [r5]
   1d694:	ldr	r6, [r5, #20]
   1d698:	str	ip, [sp, #28]
   1d69c:	ldr	lr, [r5, #16]
   1d6a0:	str	r1, [sp, #24]
   1d6a4:	ldr	ip, [r5, #12]
   1d6a8:	str	r2, [sp, #20]
   1d6ac:	ldr	r1, [r5, #8]
   1d6b0:	ldr	r2, [r5, #4]
   1d6b4:	str	r6, [sp, #16]
   1d6b8:	stmib	sp, {r1, ip, lr}
   1d6bc:	mov	r1, #1
   1d6c0:	str	r2, [sp]
   1d6c4:	mov	r2, r0
   1d6c8:	mov	r0, r4
   1d6cc:	bl	115c0 <__fprintf_chk@plt>
   1d6d0:	add	sp, sp, #32
   1d6d4:	pop	{r4, r5, r6, pc}
   1d6d8:	mov	r2, #5
   1d6dc:	ldr	r1, [pc, #564]	; 1d918 <__assert_fail@plt+0xc214>
   1d6e0:	mov	r0, #0
   1d6e4:	bl	113bc <dcgettext@plt>
   1d6e8:	ldr	r3, [r5]
   1d6ec:	mov	r1, #1
   1d6f0:	mov	r2, r0
   1d6f4:	mov	r0, r4
   1d6f8:	add	sp, sp, #32
   1d6fc:	pop	{r4, r5, r6, lr}
   1d700:	b	115c0 <__fprintf_chk@plt>
   1d704:	mov	r2, #5
   1d708:	ldr	r1, [pc, #524]	; 1d91c <__assert_fail@plt+0xc218>
   1d70c:	mov	r0, #0
   1d710:	bl	113bc <dcgettext@plt>
   1d714:	ldr	r2, [r5, #4]
   1d718:	ldr	r3, [r5]
   1d71c:	mov	r1, #1
   1d720:	str	r2, [sp, #48]	; 0x30
   1d724:	mov	r2, r0
   1d728:	mov	r0, r4
   1d72c:	add	sp, sp, #32
   1d730:	pop	{r4, r5, r6, lr}
   1d734:	b	115c0 <__fprintf_chk@plt>
   1d738:	mov	r2, #5
   1d73c:	ldr	r1, [pc, #476]	; 1d920 <__assert_fail@plt+0xc21c>
   1d740:	mov	r0, #0
   1d744:	bl	113bc <dcgettext@plt>
   1d748:	ldr	r1, [r5, #8]
   1d74c:	ldr	r2, [r5, #4]
   1d750:	ldr	r3, [r5]
   1d754:	str	r1, [sp, #52]	; 0x34
   1d758:	str	r2, [sp, #48]	; 0x30
   1d75c:	mov	r1, #1
   1d760:	mov	r2, r0
   1d764:	mov	r0, r4
   1d768:	add	sp, sp, #32
   1d76c:	pop	{r4, r5, r6, lr}
   1d770:	b	115c0 <__fprintf_chk@plt>
   1d774:	mov	r2, #5
   1d778:	ldr	r1, [pc, #420]	; 1d924 <__assert_fail@plt+0xc220>
   1d77c:	mov	r0, #0
   1d780:	bl	113bc <dcgettext@plt>
   1d784:	ldr	r1, [r5, #8]
   1d788:	ldr	ip, [r5, #12]
   1d78c:	ldr	r2, [r5, #4]
   1d790:	ldr	r3, [r5]
   1d794:	stmib	sp, {r1, ip}
   1d798:	str	r2, [sp]
   1d79c:	mov	r1, #1
   1d7a0:	mov	r2, r0
   1d7a4:	mov	r0, r4
   1d7a8:	bl	115c0 <__fprintf_chk@plt>
   1d7ac:	b	1d6d0 <__assert_fail@plt+0xbfcc>
   1d7b0:	mov	r2, #5
   1d7b4:	ldr	r1, [pc, #364]	; 1d928 <__assert_fail@plt+0xc224>
   1d7b8:	mov	r0, #0
   1d7bc:	bl	113bc <dcgettext@plt>
   1d7c0:	add	r1, r5, #8
   1d7c4:	ldr	r2, [r5, #4]
   1d7c8:	ldm	r1, {r1, ip, lr}
   1d7cc:	ldr	r3, [r5]
   1d7d0:	str	r2, [sp]
   1d7d4:	stmib	sp, {r1, ip, lr}
   1d7d8:	mov	r1, #1
   1d7dc:	mov	r2, r0
   1d7e0:	mov	r0, r4
   1d7e4:	bl	115c0 <__fprintf_chk@plt>
   1d7e8:	b	1d6d0 <__assert_fail@plt+0xbfcc>
   1d7ec:	mov	r2, #5
   1d7f0:	ldr	r1, [pc, #308]	; 1d92c <__assert_fail@plt+0xc228>
   1d7f4:	mov	r0, #0
   1d7f8:	bl	113bc <dcgettext@plt>
   1d7fc:	add	r1, r5, #8
   1d800:	ldr	r2, [r5, #4]
   1d804:	ldm	r1, {r1, ip, lr}
   1d808:	ldr	r6, [r5, #20]
   1d80c:	ldr	r3, [r5]
   1d810:	stmib	sp, {r1, ip, lr}
   1d814:	mov	r1, #1
   1d818:	str	r2, [sp]
   1d81c:	str	r6, [sp, #16]
   1d820:	mov	r2, r0
   1d824:	mov	r0, r4
   1d828:	bl	115c0 <__fprintf_chk@plt>
   1d82c:	b	1d6d0 <__assert_fail@plt+0xbfcc>
   1d830:	mov	r2, #5
   1d834:	ldr	r1, [pc, #244]	; 1d930 <__assert_fail@plt+0xc22c>
   1d838:	mov	r0, #0
   1d83c:	bl	113bc <dcgettext@plt>
   1d840:	ldr	r2, [r5, #24]
   1d844:	ldr	r3, [r5]
   1d848:	ldr	r6, [r5, #20]
   1d84c:	ldr	lr, [r5, #16]
   1d850:	ldr	ip, [r5, #12]
   1d854:	str	r2, [sp, #20]
   1d858:	ldr	r1, [r5, #8]
   1d85c:	ldr	r2, [r5, #4]
   1d860:	str	r6, [sp, #16]
   1d864:	stmib	sp, {r1, ip, lr}
   1d868:	mov	r1, #1
   1d86c:	str	r2, [sp]
   1d870:	mov	r2, r0
   1d874:	mov	r0, r4
   1d878:	bl	115c0 <__fprintf_chk@plt>
   1d87c:	b	1d6d0 <__assert_fail@plt+0xbfcc>
   1d880:	mov	r2, #5
   1d884:	ldr	r1, [pc, #168]	; 1d934 <__assert_fail@plt+0xc230>
   1d888:	mov	r0, #0
   1d88c:	bl	113bc <dcgettext@plt>
   1d890:	ldr	r1, [r5, #28]
   1d894:	ldr	r2, [r5, #24]
   1d898:	ldr	r3, [r5]
   1d89c:	ldr	r6, [r5, #20]
   1d8a0:	ldr	lr, [r5, #16]
   1d8a4:	str	r1, [sp, #24]
   1d8a8:	ldr	ip, [r5, #12]
   1d8ac:	str	r2, [sp, #20]
   1d8b0:	ldr	r1, [r5, #8]
   1d8b4:	ldr	r2, [r5, #4]
   1d8b8:	str	r6, [sp, #16]
   1d8bc:	stmib	sp, {r1, ip, lr}
   1d8c0:	mov	r1, #1
   1d8c4:	str	r2, [sp]
   1d8c8:	mov	r2, r0
   1d8cc:	mov	r0, r4
   1d8d0:	bl	115c0 <__fprintf_chk@plt>
   1d8d4:	b	1d6d0 <__assert_fail@plt+0xbfcc>
   1d8d8:	str	r3, [sp]
   1d8dc:	mov	r1, #1
   1d8e0:	mov	r3, r2
   1d8e4:	ldr	r2, [pc, #76]	; 1d938 <__assert_fail@plt+0xc234>
   1d8e8:	bl	115c0 <__fprintf_chk@plt>
   1d8ec:	b	1d5d8 <__assert_fail@plt+0xbed4>
   1d8f0:	mov	r2, #5
   1d8f4:	ldr	r1, [pc, #64]	; 1d93c <__assert_fail@plt+0xc238>
   1d8f8:	b	1d67c <__assert_fail@plt+0xbf78>
   1d8fc:	andeq	r2, r2, r8, lsr #26
   1d900:	andeq	r2, r2, ip, lsr sp
   1d904:	andeq	r0, r0, r6, ror #15
   1d908:	andeq	r3, r2, r4, lsl r0
   1d90c:	andeq	r2, r2, r0, asr #26
   1d910:	andeq	r2, r2, ip, ror #27
   1d914:	andeq	r2, r2, ip, lsl pc
   1d918:	andeq	r2, r2, r0, lsl lr
   1d91c:	andeq	r2, r2, r0, lsr #28
   1d920:	andeq	r2, r2, r8, lsr lr
   1d924:	andeq	r2, r2, r4, asr lr
   1d928:	andeq	r2, r2, r4, ror lr
   1d92c:	muleq	r2, r8, lr
   1d930:	andeq	r2, r2, r0, asr #29
   1d934:	andeq	r2, r2, ip, ror #29
   1d938:	andeq	r2, r2, r4, lsr sp
   1d93c:	andeq	r2, r2, r0, asr pc
   1d940:	push	{r4, r5, lr}
   1d944:	sub	sp, sp, #12
   1d948:	ldr	r5, [sp, #24]
   1d94c:	ldr	ip, [r5]
   1d950:	cmp	ip, #0
   1d954:	beq	1d970 <__assert_fail@plt+0xc26c>
   1d958:	mov	lr, r5
   1d95c:	mov	ip, #0
   1d960:	ldr	r4, [lr, #4]!
   1d964:	add	ip, ip, #1
   1d968:	cmp	r4, #0
   1d96c:	bne	1d960 <__assert_fail@plt+0xc25c>
   1d970:	stm	sp, {r5, ip}
   1d974:	bl	1d5a8 <__assert_fail@plt+0xbea4>
   1d978:	add	sp, sp, #12
   1d97c:	pop	{r4, r5, pc}
   1d980:	push	{r4, r5, lr}
   1d984:	sub	sp, sp, #76	; 0x4c
   1d988:	mov	r5, r0
   1d98c:	ldr	ip, [sp, #88]	; 0x58
   1d990:	ldr	r0, [ip]
   1d994:	cmp	r0, #0
   1d998:	str	r0, [sp, #32]
   1d99c:	beq	1dd70 <__assert_fail@plt+0xc66c>
   1d9a0:	ldr	r0, [ip, #4]
   1d9a4:	cmp	r0, #0
   1d9a8:	str	r0, [sp, #36]	; 0x24
   1d9ac:	beq	1dd78 <__assert_fail@plt+0xc674>
   1d9b0:	ldr	r0, [ip, #8]
   1d9b4:	cmp	r0, #0
   1d9b8:	str	r0, [sp, #40]	; 0x28
   1d9bc:	beq	1dd80 <__assert_fail@plt+0xc67c>
   1d9c0:	ldr	r0, [ip, #12]
   1d9c4:	cmp	r0, #0
   1d9c8:	str	r0, [sp, #44]	; 0x2c
   1d9cc:	beq	1dd88 <__assert_fail@plt+0xc684>
   1d9d0:	ldr	r0, [ip, #16]
   1d9d4:	cmp	r0, #0
   1d9d8:	str	r0, [sp, #48]	; 0x30
   1d9dc:	beq	1dd90 <__assert_fail@plt+0xc68c>
   1d9e0:	ldr	r0, [ip, #20]
   1d9e4:	cmp	r0, #0
   1d9e8:	str	r0, [sp, #52]	; 0x34
   1d9ec:	beq	1dd98 <__assert_fail@plt+0xc694>
   1d9f0:	ldr	r0, [ip, #24]
   1d9f4:	cmp	r0, #0
   1d9f8:	str	r0, [sp, #56]	; 0x38
   1d9fc:	beq	1dda0 <__assert_fail@plt+0xc69c>
   1da00:	ldr	r0, [ip, #28]
   1da04:	cmp	r0, #0
   1da08:	str	r0, [sp, #60]	; 0x3c
   1da0c:	beq	1dda8 <__assert_fail@plt+0xc6a4>
   1da10:	ldr	r0, [ip, #32]
   1da14:	cmp	r0, #0
   1da18:	str	r0, [sp, #64]	; 0x40
   1da1c:	beq	1ddb0 <__assert_fail@plt+0xc6ac>
   1da20:	ldr	r0, [ip, #36]	; 0x24
   1da24:	cmp	r0, #0
   1da28:	movne	r4, #10
   1da2c:	moveq	r4, #9
   1da30:	cmp	r1, #0
   1da34:	beq	1dd48 <__assert_fail@plt+0xc644>
   1da38:	stm	sp, {r2, r3}
   1da3c:	mov	r0, r5
   1da40:	mov	r3, r1
   1da44:	ldr	r2, [pc, #876]	; 1ddb8 <__assert_fail@plt+0xc6b4>
   1da48:	mov	r1, #1
   1da4c:	bl	115c0 <__fprintf_chk@plt>
   1da50:	mov	r2, #5
   1da54:	ldr	r1, [pc, #864]	; 1ddbc <__assert_fail@plt+0xc6b8>
   1da58:	mov	r0, #0
   1da5c:	bl	113bc <dcgettext@plt>
   1da60:	ldr	r3, [pc, #856]	; 1ddc0 <__assert_fail@plt+0xc6bc>
   1da64:	ldr	r2, [pc, #856]	; 1ddc4 <__assert_fail@plt+0xc6c0>
   1da68:	str	r3, [sp]
   1da6c:	mov	r1, #1
   1da70:	mov	r3, r0
   1da74:	mov	r0, r5
   1da78:	bl	115c0 <__fprintf_chk@plt>
   1da7c:	mov	r1, r5
   1da80:	mov	r0, #10
   1da84:	bl	113a4 <fputc_unlocked@plt>
   1da88:	mov	r2, #5
   1da8c:	ldr	r1, [pc, #820]	; 1ddc8 <__assert_fail@plt+0xc6c4>
   1da90:	mov	r0, #0
   1da94:	bl	113bc <dcgettext@plt>
   1da98:	mov	r1, #1
   1da9c:	ldr	r3, [pc, #808]	; 1ddcc <__assert_fail@plt+0xc6c8>
   1daa0:	mov	r2, r0
   1daa4:	mov	r0, r5
   1daa8:	bl	115c0 <__fprintf_chk@plt>
   1daac:	mov	r1, r5
   1dab0:	mov	r0, #10
   1dab4:	bl	113a4 <fputc_unlocked@plt>
   1dab8:	cmp	r4, #9
   1dabc:	ldrls	pc, [pc, r4, lsl #2]
   1dac0:	b	1dd64 <__assert_fail@plt+0xc660>
   1dac4:	andeq	sp, r1, r8, asr #22
   1dac8:	andeq	sp, r1, r0, asr fp
   1dacc:	andeq	sp, r1, ip, ror fp
   1dad0:			; <UNDEFINED> instruction: 0x0001dbb0
   1dad4:	andeq	sp, r1, r8, ror #23
   1dad8:	andeq	sp, r1, r4, lsr #24
   1dadc:	andeq	sp, r1, r0, ror #24
   1dae0:	andeq	sp, r1, r4, lsr #25
   1dae4:	strdeq	sp, [r1], -r0
   1dae8:	andeq	sp, r1, ip, ror #21
   1daec:	ldr	r1, [pc, #732]	; 1ddd0 <__assert_fail@plt+0xc6cc>
   1daf0:	mov	r2, #5
   1daf4:	mov	r0, #0
   1daf8:	bl	113bc <dcgettext@plt>
   1dafc:	ldr	ip, [sp, #64]	; 0x40
   1db00:	ldr	r1, [sp, #60]	; 0x3c
   1db04:	ldr	r2, [sp, #56]	; 0x38
   1db08:	ldr	lr, [sp, #48]	; 0x30
   1db0c:	str	ip, [sp, #28]
   1db10:	str	r1, [sp, #24]
   1db14:	ldr	ip, [sp, #44]	; 0x2c
   1db18:	ldr	r1, [sp, #40]	; 0x28
   1db1c:	ldr	r4, [sp, #52]	; 0x34
   1db20:	str	r2, [sp, #20]
   1db24:	ldr	r2, [sp, #36]	; 0x24
   1db28:	stmib	sp, {r1, ip, lr}
   1db2c:	mov	r1, #1
   1db30:	str	r2, [sp]
   1db34:	ldr	r3, [sp, #32]
   1db38:	str	r4, [sp, #16]
   1db3c:	mov	r2, r0
   1db40:	mov	r0, r5
   1db44:	bl	115c0 <__fprintf_chk@plt>
   1db48:	add	sp, sp, #76	; 0x4c
   1db4c:	pop	{r4, r5, pc}
   1db50:	mov	r2, #5
   1db54:	ldr	r1, [pc, #632]	; 1ddd4 <__assert_fail@plt+0xc6d0>
   1db58:	mov	r0, #0
   1db5c:	bl	113bc <dcgettext@plt>
   1db60:	ldr	r3, [sp, #32]
   1db64:	mov	r1, #1
   1db68:	mov	r2, r0
   1db6c:	mov	r0, r5
   1db70:	add	sp, sp, #76	; 0x4c
   1db74:	pop	{r4, r5, lr}
   1db78:	b	115c0 <__fprintf_chk@plt>
   1db7c:	mov	r2, #5
   1db80:	ldr	r1, [pc, #592]	; 1ddd8 <__assert_fail@plt+0xc6d4>
   1db84:	mov	r0, #0
   1db88:	bl	113bc <dcgettext@plt>
   1db8c:	ldr	r2, [sp, #36]	; 0x24
   1db90:	ldr	r3, [sp, #32]
   1db94:	str	r2, [sp, #88]	; 0x58
   1db98:	mov	r1, #1
   1db9c:	mov	r2, r0
   1dba0:	mov	r0, r5
   1dba4:	add	sp, sp, #76	; 0x4c
   1dba8:	pop	{r4, r5, lr}
   1dbac:	b	115c0 <__fprintf_chk@plt>
   1dbb0:	mov	r2, #5
   1dbb4:	ldr	r1, [pc, #544]	; 1dddc <__assert_fail@plt+0xc6d8>
   1dbb8:	mov	r0, #0
   1dbbc:	bl	113bc <dcgettext@plt>
   1dbc0:	ldr	r1, [sp, #40]	; 0x28
   1dbc4:	ldr	r2, [sp, #36]	; 0x24
   1dbc8:	str	r1, [sp, #4]
   1dbcc:	str	r2, [sp]
   1dbd0:	ldr	r3, [sp, #32]
   1dbd4:	mov	r1, #1
   1dbd8:	mov	r2, r0
   1dbdc:	mov	r0, r5
   1dbe0:	bl	115c0 <__fprintf_chk@plt>
   1dbe4:	b	1db48 <__assert_fail@plt+0xc444>
   1dbe8:	mov	r2, #5
   1dbec:	ldr	r1, [pc, #492]	; 1dde0 <__assert_fail@plt+0xc6dc>
   1dbf0:	mov	r0, #0
   1dbf4:	bl	113bc <dcgettext@plt>
   1dbf8:	ldr	r1, [sp, #40]	; 0x28
   1dbfc:	ldr	ip, [sp, #44]	; 0x2c
   1dc00:	ldr	r2, [sp, #36]	; 0x24
   1dc04:	ldr	r3, [sp, #32]
   1dc08:	stmib	sp, {r1, ip}
   1dc0c:	str	r2, [sp]
   1dc10:	mov	r1, #1
   1dc14:	mov	r2, r0
   1dc18:	mov	r0, r5
   1dc1c:	bl	115c0 <__fprintf_chk@plt>
   1dc20:	b	1db48 <__assert_fail@plt+0xc444>
   1dc24:	mov	r2, #5
   1dc28:	ldr	r1, [pc, #436]	; 1dde4 <__assert_fail@plt+0xc6e0>
   1dc2c:	mov	r0, #0
   1dc30:	bl	113bc <dcgettext@plt>
   1dc34:	add	r1, sp, #40	; 0x28
   1dc38:	ldr	r2, [sp, #36]	; 0x24
   1dc3c:	ldm	r1, {r1, ip, lr}
   1dc40:	ldr	r3, [sp, #32]
   1dc44:	str	r2, [sp]
   1dc48:	stmib	sp, {r1, ip, lr}
   1dc4c:	mov	r1, #1
   1dc50:	mov	r2, r0
   1dc54:	mov	r0, r5
   1dc58:	bl	115c0 <__fprintf_chk@plt>
   1dc5c:	b	1db48 <__assert_fail@plt+0xc444>
   1dc60:	mov	r2, #5
   1dc64:	ldr	r1, [pc, #380]	; 1dde8 <__assert_fail@plt+0xc6e4>
   1dc68:	mov	r0, #0
   1dc6c:	bl	113bc <dcgettext@plt>
   1dc70:	add	r1, sp, #40	; 0x28
   1dc74:	ldr	r2, [sp, #36]	; 0x24
   1dc78:	ldm	r1, {r1, ip, lr}
   1dc7c:	ldr	r4, [sp, #52]	; 0x34
   1dc80:	str	r2, [sp]
   1dc84:	stmib	sp, {r1, ip, lr}
   1dc88:	mov	r1, #1
   1dc8c:	ldr	r3, [sp, #32]
   1dc90:	str	r4, [sp, #16]
   1dc94:	mov	r2, r0
   1dc98:	mov	r0, r5
   1dc9c:	bl	115c0 <__fprintf_chk@plt>
   1dca0:	b	1db48 <__assert_fail@plt+0xc444>
   1dca4:	mov	r2, #5
   1dca8:	ldr	r1, [pc, #316]	; 1ddec <__assert_fail@plt+0xc6e8>
   1dcac:	mov	r0, #0
   1dcb0:	bl	113bc <dcgettext@plt>
   1dcb4:	add	r1, sp, #40	; 0x28
   1dcb8:	ldr	r2, [sp, #56]	; 0x38
   1dcbc:	ldm	r1, {r1, ip, lr}
   1dcc0:	ldr	r4, [sp, #52]	; 0x34
   1dcc4:	str	r2, [sp, #20]
   1dcc8:	ldr	r2, [sp, #36]	; 0x24
   1dccc:	stmib	sp, {r1, ip, lr}
   1dcd0:	mov	r1, #1
   1dcd4:	str	r2, [sp]
   1dcd8:	ldr	r3, [sp, #32]
   1dcdc:	str	r4, [sp, #16]
   1dce0:	mov	r2, r0
   1dce4:	mov	r0, r5
   1dce8:	bl	115c0 <__fprintf_chk@plt>
   1dcec:	b	1db48 <__assert_fail@plt+0xc444>
   1dcf0:	mov	r2, #5
   1dcf4:	ldr	r1, [pc, #244]	; 1ddf0 <__assert_fail@plt+0xc6ec>
   1dcf8:	mov	r0, #0
   1dcfc:	bl	113bc <dcgettext@plt>
   1dd00:	ldr	r1, [sp, #60]	; 0x3c
   1dd04:	ldr	r2, [sp, #56]	; 0x38
   1dd08:	ldr	lr, [sp, #48]	; 0x30
   1dd0c:	ldr	ip, [sp, #44]	; 0x2c
   1dd10:	str	r1, [sp, #24]
   1dd14:	ldr	r1, [sp, #40]	; 0x28
   1dd18:	ldr	r4, [sp, #52]	; 0x34
   1dd1c:	str	r2, [sp, #20]
   1dd20:	ldr	r2, [sp, #36]	; 0x24
   1dd24:	stmib	sp, {r1, ip, lr}
   1dd28:	mov	r1, #1
   1dd2c:	str	r2, [sp]
   1dd30:	ldr	r3, [sp, #32]
   1dd34:	str	r4, [sp, #16]
   1dd38:	mov	r2, r0
   1dd3c:	mov	r0, r5
   1dd40:	bl	115c0 <__fprintf_chk@plt>
   1dd44:	b	1db48 <__assert_fail@plt+0xc444>
   1dd48:	str	r3, [sp]
   1dd4c:	mov	r1, #1
   1dd50:	mov	r3, r2
   1dd54:	mov	r0, r5
   1dd58:	ldr	r2, [pc, #148]	; 1ddf4 <__assert_fail@plt+0xc6f0>
   1dd5c:	bl	115c0 <__fprintf_chk@plt>
   1dd60:	b	1da50 <__assert_fail@plt+0xc34c>
   1dd64:	mov	r2, #5
   1dd68:	ldr	r1, [pc, #136]	; 1ddf8 <__assert_fail@plt+0xc6f4>
   1dd6c:	b	1daf4 <__assert_fail@plt+0xc3f0>
   1dd70:	mov	r4, r0
   1dd74:	b	1da30 <__assert_fail@plt+0xc32c>
   1dd78:	mov	r4, #1
   1dd7c:	b	1da30 <__assert_fail@plt+0xc32c>
   1dd80:	mov	r4, #2
   1dd84:	b	1da30 <__assert_fail@plt+0xc32c>
   1dd88:	mov	r4, #3
   1dd8c:	b	1da30 <__assert_fail@plt+0xc32c>
   1dd90:	mov	r4, #4
   1dd94:	b	1da30 <__assert_fail@plt+0xc32c>
   1dd98:	mov	r4, #5
   1dd9c:	b	1da30 <__assert_fail@plt+0xc32c>
   1dda0:	mov	r4, #6
   1dda4:	b	1da30 <__assert_fail@plt+0xc32c>
   1dda8:	mov	r4, #7
   1ddac:	b	1da30 <__assert_fail@plt+0xc32c>
   1ddb0:	mov	r4, #8
   1ddb4:	b	1da30 <__assert_fail@plt+0xc32c>
   1ddb8:	andeq	r2, r2, r8, lsr #26
   1ddbc:	andeq	r2, r2, ip, lsr sp
   1ddc0:	andeq	r0, r0, r6, ror #15
   1ddc4:	andeq	r3, r2, r4, lsl r0
   1ddc8:	andeq	r2, r2, r0, asr #26
   1ddcc:	andeq	r2, r2, ip, ror #27
   1ddd0:	andeq	r2, r2, ip, lsl pc
   1ddd4:	andeq	r2, r2, r0, lsl lr
   1ddd8:	andeq	r2, r2, r0, lsr #28
   1dddc:	andeq	r2, r2, r8, lsr lr
   1dde0:	andeq	r2, r2, r4, asr lr
   1dde4:	andeq	r2, r2, r4, ror lr
   1dde8:	muleq	r2, r8, lr
   1ddec:	andeq	r2, r2, r0, asr #29
   1ddf0:	andeq	r2, r2, ip, ror #29
   1ddf4:	andeq	r2, r2, r4, lsr sp
   1ddf8:	andeq	r2, r2, r0, asr pc
   1ddfc:	push	{r3}		; (str r3, [sp, #-4]!)
   1de00:	push	{lr}		; (str lr, [sp, #-4]!)
   1de04:	sub	sp, sp, #56	; 0x38
   1de08:	add	r3, sp, #64	; 0x40
   1de0c:	ldr	ip, [sp, #64]	; 0x40
   1de10:	str	r3, [sp, #12]
   1de14:	cmp	ip, #0
   1de18:	str	ip, [sp, #16]
   1de1c:	beq	1deb4 <__assert_fail@plt+0xc7b0>
   1de20:	ldr	ip, [sp, #68]	; 0x44
   1de24:	cmp	ip, #0
   1de28:	str	ip, [sp, #20]
   1de2c:	beq	1ded4 <__assert_fail@plt+0xc7d0>
   1de30:	ldr	ip, [sp, #72]	; 0x48
   1de34:	cmp	ip, #0
   1de38:	str	ip, [sp, #24]
   1de3c:	beq	1dedc <__assert_fail@plt+0xc7d8>
   1de40:	ldr	ip, [sp, #76]	; 0x4c
   1de44:	cmp	ip, #0
   1de48:	str	ip, [sp, #28]
   1de4c:	beq	1dee4 <__assert_fail@plt+0xc7e0>
   1de50:	ldr	ip, [sp, #80]	; 0x50
   1de54:	cmp	ip, #0
   1de58:	str	ip, [sp, #32]
   1de5c:	beq	1deec <__assert_fail@plt+0xc7e8>
   1de60:	ldr	ip, [sp, #84]	; 0x54
   1de64:	cmp	ip, #0
   1de68:	str	ip, [sp, #36]	; 0x24
   1de6c:	beq	1def4 <__assert_fail@plt+0xc7f0>
   1de70:	ldr	ip, [sp, #88]	; 0x58
   1de74:	cmp	ip, #0
   1de78:	str	ip, [sp, #40]	; 0x28
   1de7c:	beq	1defc <__assert_fail@plt+0xc7f8>
   1de80:	ldr	ip, [sp, #92]	; 0x5c
   1de84:	cmp	ip, #0
   1de88:	str	ip, [sp, #44]	; 0x2c
   1de8c:	beq	1df04 <__assert_fail@plt+0xc800>
   1de90:	ldr	ip, [sp, #96]	; 0x60
   1de94:	cmp	ip, #0
   1de98:	str	ip, [sp, #48]	; 0x30
   1de9c:	beq	1df0c <__assert_fail@plt+0xc808>
   1dea0:	ldr	ip, [sp, #100]	; 0x64
   1dea4:	cmp	ip, #0
   1dea8:	str	ip, [sp, #52]	; 0x34
   1deac:	movne	ip, #10
   1deb0:	moveq	ip, #9
   1deb4:	add	r3, sp, #16
   1deb8:	stm	sp, {r3, ip}
   1debc:	ldr	r3, [sp, #60]	; 0x3c
   1dec0:	bl	1d5a8 <__assert_fail@plt+0xbea4>
   1dec4:	add	sp, sp, #56	; 0x38
   1dec8:	pop	{lr}		; (ldr lr, [sp], #4)
   1decc:	add	sp, sp, #4
   1ded0:	bx	lr
   1ded4:	mov	ip, #1
   1ded8:	b	1deb4 <__assert_fail@plt+0xc7b0>
   1dedc:	mov	ip, #2
   1dee0:	b	1deb4 <__assert_fail@plt+0xc7b0>
   1dee4:	mov	ip, #3
   1dee8:	b	1deb4 <__assert_fail@plt+0xc7b0>
   1deec:	mov	ip, #4
   1def0:	b	1deb4 <__assert_fail@plt+0xc7b0>
   1def4:	mov	ip, #5
   1def8:	b	1deb4 <__assert_fail@plt+0xc7b0>
   1defc:	mov	ip, #6
   1df00:	b	1deb4 <__assert_fail@plt+0xc7b0>
   1df04:	mov	ip, #7
   1df08:	b	1deb4 <__assert_fail@plt+0xc7b0>
   1df0c:	mov	ip, #8
   1df10:	b	1deb4 <__assert_fail@plt+0xc7b0>
   1df14:	ldr	r3, [pc, #116]	; 1df90 <__assert_fail@plt+0xc88c>
   1df18:	push	{r4, lr}
   1df1c:	mov	r0, #10
   1df20:	ldr	r1, [r3]
   1df24:	bl	113a4 <fputc_unlocked@plt>
   1df28:	mov	r2, #5
   1df2c:	ldr	r1, [pc, #96]	; 1df94 <__assert_fail@plt+0xc890>
   1df30:	mov	r0, #0
   1df34:	bl	113bc <dcgettext@plt>
   1df38:	ldr	r2, [pc, #88]	; 1df98 <__assert_fail@plt+0xc894>
   1df3c:	mov	r1, r0
   1df40:	mov	r0, #1
   1df44:	bl	1159c <__printf_chk@plt>
   1df48:	mov	r2, #5
   1df4c:	ldr	r1, [pc, #72]	; 1df9c <__assert_fail@plt+0xc898>
   1df50:	mov	r0, #0
   1df54:	bl	113bc <dcgettext@plt>
   1df58:	ldr	r3, [pc, #64]	; 1dfa0 <__assert_fail@plt+0xc89c>
   1df5c:	ldr	r2, [pc, #64]	; 1dfa4 <__assert_fail@plt+0xc8a0>
   1df60:	mov	r1, r0
   1df64:	mov	r0, #1
   1df68:	bl	1159c <__printf_chk@plt>
   1df6c:	mov	r2, #5
   1df70:	ldr	r1, [pc, #48]	; 1dfa8 <__assert_fail@plt+0xc8a4>
   1df74:	mov	r0, #0
   1df78:	bl	113bc <dcgettext@plt>
   1df7c:	ldr	r2, [pc, #40]	; 1dfac <__assert_fail@plt+0xc8a8>
   1df80:	pop	{r4, lr}
   1df84:	mov	r1, r0
   1df88:	mov	r0, #1
   1df8c:	b	1159c <__printf_chk@plt>
   1df90:	andeq	r4, r3, r4, lsr r3
   1df94:	andeq	r2, r2, ip, lsl #31
   1df98:	andeq	r2, r2, r0, lsr #31
   1df9c:			; <UNDEFINED> instruction: 0x00022fb8
   1dfa0:	andeq	r2, r2, ip, asr #8
   1dfa4:	andeq	r2, r2, r4, ror r4
   1dfa8:	andeq	r2, r2, ip, asr #31
   1dfac:	strdeq	r2, [r2], -r4
   1dfb0:	push	{r4, r5, r6, lr}
   1dfb4:	mov	r6, r0
   1dfb8:	mov	r5, r1
   1dfbc:	mov	r4, r2
   1dfc0:	bl	20bfc <__assert_fail@plt+0xf4f8>
   1dfc4:	cmp	r0, #0
   1dfc8:	popne	{r4, r5, r6, pc}
   1dfcc:	cmp	r6, #0
   1dfd0:	beq	1dfe0 <__assert_fail@plt+0xc8dc>
   1dfd4:	cmp	r5, #0
   1dfd8:	cmpne	r4, #0
   1dfdc:	popeq	{r4, r5, r6, pc}
   1dfe0:	bl	1e62c <__assert_fail@plt+0xcf28>
   1dfe4:	push	{r4, lr}
   1dfe8:	bl	1f564 <__assert_fail@plt+0xde60>
   1dfec:	cmp	r0, #0
   1dff0:	popne	{r4, pc}
   1dff4:	bl	1e62c <__assert_fail@plt+0xcf28>
   1dff8:	push	{r4, lr}
   1dffc:	bl	1f564 <__assert_fail@plt+0xde60>
   1e000:	cmp	r0, #0
   1e004:	popne	{r4, pc}
   1e008:	bl	1e62c <__assert_fail@plt+0xcf28>
   1e00c:	push	{r4, lr}
   1e010:	bl	1f564 <__assert_fail@plt+0xde60>
   1e014:	cmp	r0, #0
   1e018:	popne	{r4, pc}
   1e01c:	bl	1e62c <__assert_fail@plt+0xcf28>
   1e020:	push	{r4, r5, r6, lr}
   1e024:	mov	r5, r0
   1e028:	mov	r4, r1
   1e02c:	bl	1f590 <__assert_fail@plt+0xde8c>
   1e030:	cmp	r0, #0
   1e034:	popne	{r4, r5, r6, pc}
   1e038:	adds	r4, r4, #0
   1e03c:	movne	r4, #1
   1e040:	cmp	r5, #0
   1e044:	orreq	r4, r4, #1
   1e048:	cmp	r4, #0
   1e04c:	popeq	{r4, r5, r6, pc}
   1e050:	bl	1e62c <__assert_fail@plt+0xcf28>
   1e054:	push	{r4, lr}
   1e058:	cmp	r1, #0
   1e05c:	orreq	r1, r1, #1
   1e060:	bl	1f590 <__assert_fail@plt+0xde8c>
   1e064:	cmp	r0, #0
   1e068:	popne	{r4, pc}
   1e06c:	bl	1e62c <__assert_fail@plt+0xcf28>
   1e070:	push	{r4, r5, r6, lr}
   1e074:	mov	r6, r0
   1e078:	mov	r5, r1
   1e07c:	mov	r4, r2
   1e080:	bl	20bfc <__assert_fail@plt+0xf4f8>
   1e084:	cmp	r0, #0
   1e088:	popne	{r4, r5, r6, pc}
   1e08c:	cmp	r6, #0
   1e090:	beq	1e0a0 <__assert_fail@plt+0xc99c>
   1e094:	cmp	r5, #0
   1e098:	cmpne	r4, #0
   1e09c:	popeq	{r4, r5, r6, pc}
   1e0a0:	bl	1e62c <__assert_fail@plt+0xcf28>
   1e0a4:	cmp	r2, #0
   1e0a8:	cmpne	r1, #0
   1e0ac:	moveq	r2, #1
   1e0b0:	moveq	r1, r2
   1e0b4:	push	{r4, lr}
   1e0b8:	bl	20bfc <__assert_fail@plt+0xf4f8>
   1e0bc:	cmp	r0, #0
   1e0c0:	popne	{r4, pc}
   1e0c4:	bl	1e62c <__assert_fail@plt+0xcf28>
   1e0c8:	push	{r4, lr}
   1e0cc:	mov	r2, r1
   1e0d0:	mov	r1, r0
   1e0d4:	mov	r0, #0
   1e0d8:	bl	20bfc <__assert_fail@plt+0xf4f8>
   1e0dc:	cmp	r0, #0
   1e0e0:	popne	{r4, pc}
   1e0e4:	bl	1e62c <__assert_fail@plt+0xcf28>
   1e0e8:	cmp	r1, #0
   1e0ec:	cmpne	r0, #0
   1e0f0:	moveq	r2, #1
   1e0f4:	movne	r2, r1
   1e0f8:	moveq	r1, r2
   1e0fc:	movne	r1, r0
   1e100:	push	{r4, lr}
   1e104:	mov	r0, #0
   1e108:	bl	20bfc <__assert_fail@plt+0xf4f8>
   1e10c:	cmp	r0, #0
   1e110:	popne	{r4, pc}
   1e114:	bl	1e62c <__assert_fail@plt+0xcf28>
   1e118:	cmp	r0, #0
   1e11c:	push	{r4, r5, r6, lr}
   1e120:	mov	r5, r1
   1e124:	ldr	r4, [r1]
   1e128:	beq	1e164 <__assert_fail@plt+0xca60>
   1e12c:	lsr	r2, r4, #1
   1e130:	add	r3, r2, #1
   1e134:	mvn	r3, r3
   1e138:	cmp	r4, r3
   1e13c:	bhi	1e180 <__assert_fail@plt+0xca7c>
   1e140:	add	r4, r4, #1
   1e144:	add	r4, r4, r2
   1e148:	mov	r1, r4
   1e14c:	mov	r2, #1
   1e150:	bl	20bfc <__assert_fail@plt+0xf4f8>
   1e154:	cmp	r0, #0
   1e158:	beq	1e184 <__assert_fail@plt+0xca80>
   1e15c:	str	r4, [r5]
   1e160:	pop	{r4, r5, r6, pc}
   1e164:	cmp	r4, #0
   1e168:	moveq	r4, #64	; 0x40
   1e16c:	mov	r1, r4
   1e170:	mov	r2, #1
   1e174:	bl	20bfc <__assert_fail@plt+0xf4f8>
   1e178:	cmp	r0, #0
   1e17c:	bne	1e15c <__assert_fail@plt+0xca58>
   1e180:	bl	1e62c <__assert_fail@plt+0xcf28>
   1e184:	cmp	r4, #0
   1e188:	bne	1e180 <__assert_fail@plt+0xca7c>
   1e18c:	str	r4, [r5]
   1e190:	pop	{r4, r5, r6, pc}
   1e194:	cmp	r0, #0
   1e198:	push	{r4, r5, r6, lr}
   1e19c:	mov	r5, r1
   1e1a0:	ldr	r4, [r1]
   1e1a4:	mov	r6, r2
   1e1a8:	beq	1e1ec <__assert_fail@plt+0xcae8>
   1e1ac:	lsr	r1, r4, #1
   1e1b0:	add	r3, r1, #1
   1e1b4:	mvn	r3, r3
   1e1b8:	cmp	r4, r3
   1e1bc:	bhi	1e224 <__assert_fail@plt+0xcb20>
   1e1c0:	add	r4, r4, #1
   1e1c4:	add	r4, r4, r1
   1e1c8:	mov	r1, r4
   1e1cc:	bl	20bfc <__assert_fail@plt+0xf4f8>
   1e1d0:	cmp	r0, #0
   1e1d4:	bne	1e1e4 <__assert_fail@plt+0xcae0>
   1e1d8:	cmp	r4, #0
   1e1dc:	cmpne	r6, #0
   1e1e0:	bne	1e224 <__assert_fail@plt+0xcb20>
   1e1e4:	str	r4, [r5]
   1e1e8:	pop	{r4, r5, r6, pc}
   1e1ec:	cmp	r4, #0
   1e1f0:	bne	1e20c <__assert_fail@plt+0xcb08>
   1e1f4:	mov	r1, r2
   1e1f8:	mov	r0, #64	; 0x40
   1e1fc:	bl	20efc <__assert_fail@plt+0xf7f8>
   1e200:	cmp	r0, #0
   1e204:	movne	r4, r0
   1e208:	addeq	r4, r0, #1
   1e20c:	mov	r2, r6
   1e210:	mov	r1, r4
   1e214:	mov	r0, #0
   1e218:	bl	20bfc <__assert_fail@plt+0xf4f8>
   1e21c:	cmp	r0, #0
   1e220:	bne	1e1e4 <__assert_fail@plt+0xcae0>
   1e224:	bl	1e62c <__assert_fail@plt+0xcf28>
   1e228:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e22c:	sub	sp, sp, #12
   1e230:	ldr	r6, [r1]
   1e234:	mov	r8, r1
   1e238:	mov	r9, r0
   1e23c:	asrs	r4, r6, #1
   1e240:	mov	sl, r2
   1e244:	mov	fp, r3
   1e248:	ldr	r7, [sp, #48]	; 0x30
   1e24c:	bmi	1e3c8 <__assert_fail@plt+0xccc4>
   1e250:	mvn	r1, #-2147483648	; 0x80000000
   1e254:	sub	r1, r1, r4
   1e258:	cmp	r6, r1
   1e25c:	movle	r1, #0
   1e260:	movgt	r1, #1
   1e264:	mvn	r3, fp
   1e268:	cmp	r1, #0
   1e26c:	addeq	r4, r4, r6
   1e270:	mvnne	r4, #-2147483648	; 0x80000000
   1e274:	lsr	r3, r3, #31
   1e278:	cmp	fp, r4
   1e27c:	movge	r2, #0
   1e280:	andlt	r2, r3, #1
   1e284:	cmp	r2, #0
   1e288:	beq	1e378 <__assert_fail@plt+0xcc74>
   1e28c:	cmp	r7, #0
   1e290:	blt	1e460 <__assert_fail@plt+0xcd5c>
   1e294:	bne	1e458 <__assert_fail@plt+0xcd54>
   1e298:	mov	r5, #64	; 0x40
   1e29c:	mov	r1, r7
   1e2a0:	mov	r0, r5
   1e2a4:	str	r3, [sp, #4]
   1e2a8:	bl	21108 <__assert_fail@plt+0xfa04>
   1e2ac:	mov	r1, r7
   1e2b0:	mov	r4, r0
   1e2b4:	mov	r0, r5
   1e2b8:	bl	21328 <__assert_fail@plt+0xfc24>
   1e2bc:	ldr	r3, [sp, #4]
   1e2c0:	sub	r5, r5, r1
   1e2c4:	cmp	r9, #0
   1e2c8:	sub	r2, r4, r6
   1e2cc:	streq	r9, [r8]
   1e2d0:	cmp	r2, sl
   1e2d4:	bge	1e358 <__assert_fail@plt+0xcc54>
   1e2d8:	cmp	sl, #0
   1e2dc:	blt	1e3f8 <__assert_fail@plt+0xccf4>
   1e2e0:	cmp	r6, #0
   1e2e4:	blt	1e304 <__assert_fail@plt+0xcc00>
   1e2e8:	mvn	r2, #-2147483648	; 0x80000000
   1e2ec:	sub	r2, r2, sl
   1e2f0:	cmp	r6, r2
   1e2f4:	movle	r2, #0
   1e2f8:	movgt	r2, #1
   1e2fc:	cmp	r2, #0
   1e300:	bne	1e3f4 <__assert_fail@plt+0xccf0>
   1e304:	add	r6, r6, sl
   1e308:	cmp	fp, r6
   1e30c:	movge	r3, #0
   1e310:	andlt	r3, r3, #1
   1e314:	cmp	r3, #0
   1e318:	mov	r4, r6
   1e31c:	bne	1e3f4 <__assert_fail@plt+0xccf0>
   1e320:	cmp	r7, #0
   1e324:	blt	1e40c <__assert_fail@plt+0xcd08>
   1e328:	beq	1e354 <__assert_fail@plt+0xcc50>
   1e32c:	cmp	r6, #0
   1e330:	blt	1e4b0 <__assert_fail@plt+0xcdac>
   1e334:	mov	r1, r7
   1e338:	mvn	r0, #-2147483648	; 0x80000000
   1e33c:	bl	21108 <__assert_fail@plt+0xfa04>
   1e340:	cmp	r6, r0
   1e344:	movle	r0, #0
   1e348:	movgt	r0, #1
   1e34c:	cmp	r0, #0
   1e350:	bne	1e3f4 <__assert_fail@plt+0xccf0>
   1e354:	mul	r5, r6, r7
   1e358:	mov	r1, r5
   1e35c:	mov	r0, r9
   1e360:	bl	1f590 <__assert_fail@plt+0xde8c>
   1e364:	cmp	r0, #0
   1e368:	beq	1e3dc <__assert_fail@plt+0xccd8>
   1e36c:	str	r4, [r8]
   1e370:	add	sp, sp, #12
   1e374:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e378:	cmp	r7, #0
   1e37c:	blt	1e438 <__assert_fail@plt+0xcd34>
   1e380:	beq	1e298 <__assert_fail@plt+0xcb94>
   1e384:	cmp	r4, #0
   1e388:	blt	1e468 <__assert_fail@plt+0xcd64>
   1e38c:	mov	r1, r7
   1e390:	mvn	r0, #-2147483648	; 0x80000000
   1e394:	str	r3, [sp, #4]
   1e398:	bl	21108 <__assert_fail@plt+0xfa04>
   1e39c:	ldr	r3, [sp, #4]
   1e3a0:	cmp	r0, r4
   1e3a4:	movge	r0, #0
   1e3a8:	movlt	r0, #1
   1e3ac:	cmp	r0, #0
   1e3b0:	mvnne	r5, #-2147483648	; 0x80000000
   1e3b4:	bne	1e29c <__assert_fail@plt+0xcb98>
   1e3b8:	mul	r5, r7, r4
   1e3bc:	cmp	r5, #63	; 0x3f
   1e3c0:	bgt	1e2c4 <__assert_fail@plt+0xcbc0>
   1e3c4:	b	1e298 <__assert_fail@plt+0xcb94>
   1e3c8:	rsb	r1, r4, #-2147483648	; 0x80000000
   1e3cc:	cmp	r6, r1
   1e3d0:	movge	r1, #0
   1e3d4:	movlt	r1, #1
   1e3d8:	b	1e264 <__assert_fail@plt+0xcb60>
   1e3dc:	adds	r5, r5, #0
   1e3e0:	movne	r5, #1
   1e3e4:	cmp	r9, #0
   1e3e8:	orreq	r5, r5, #1
   1e3ec:	cmp	r5, #0
   1e3f0:	beq	1e36c <__assert_fail@plt+0xcc68>
   1e3f4:	bl	1e62c <__assert_fail@plt+0xcf28>
   1e3f8:	rsb	r2, sl, #-2147483648	; 0x80000000
   1e3fc:	cmp	r6, r2
   1e400:	movge	r2, #0
   1e404:	movlt	r2, #1
   1e408:	b	1e2fc <__assert_fail@plt+0xcbf8>
   1e40c:	cmp	r6, #0
   1e410:	blt	1e494 <__assert_fail@plt+0xcd90>
   1e414:	cmn	r7, #1
   1e418:	beq	1e354 <__assert_fail@plt+0xcc50>
   1e41c:	mov	r1, r7
   1e420:	mov	r0, #-2147483648	; 0x80000000
   1e424:	bl	21108 <__assert_fail@plt+0xfa04>
   1e428:	cmp	r6, r0
   1e42c:	movle	r0, #0
   1e430:	movgt	r0, #1
   1e434:	b	1e34c <__assert_fail@plt+0xcc48>
   1e438:	cmp	r4, #0
   1e43c:	blt	1e4d4 <__assert_fail@plt+0xcdd0>
   1e440:	cmn	r7, #1
   1e444:	beq	1e3b8 <__assert_fail@plt+0xccb4>
   1e448:	str	r3, [sp, #4]
   1e44c:	mov	r1, r7
   1e450:	mov	r0, #-2147483648	; 0x80000000
   1e454:	b	1e398 <__assert_fail@plt+0xcc94>
   1e458:	mov	r4, fp
   1e45c:	b	1e38c <__assert_fail@plt+0xcc88>
   1e460:	mov	r4, fp
   1e464:	b	1e440 <__assert_fail@plt+0xcd3c>
   1e468:	cmn	r4, #1
   1e46c:	beq	1e3b8 <__assert_fail@plt+0xccb4>
   1e470:	mov	r1, r4
   1e474:	mov	r0, #-2147483648	; 0x80000000
   1e478:	str	r3, [sp, #4]
   1e47c:	bl	21108 <__assert_fail@plt+0xfa04>
   1e480:	ldr	r3, [sp, #4]
   1e484:	cmp	r7, r0
   1e488:	movle	r0, #0
   1e48c:	movgt	r0, #1
   1e490:	b	1e3ac <__assert_fail@plt+0xcca8>
   1e494:	mov	r1, r7
   1e498:	mvn	r0, #-2147483648	; 0x80000000
   1e49c:	bl	21108 <__assert_fail@plt+0xfa04>
   1e4a0:	cmp	r6, r0
   1e4a4:	movge	r0, #0
   1e4a8:	movlt	r0, #1
   1e4ac:	b	1e34c <__assert_fail@plt+0xcc48>
   1e4b0:	cmn	r6, #1
   1e4b4:	beq	1e354 <__assert_fail@plt+0xcc50>
   1e4b8:	mov	r1, r6
   1e4bc:	mov	r0, #-2147483648	; 0x80000000
   1e4c0:	bl	21108 <__assert_fail@plt+0xfa04>
   1e4c4:	cmp	r7, r0
   1e4c8:	movle	r0, #0
   1e4cc:	movgt	r0, #1
   1e4d0:	b	1e34c <__assert_fail@plt+0xcc48>
   1e4d4:	mov	r1, r7
   1e4d8:	mvn	r0, #-2147483648	; 0x80000000
   1e4dc:	str	r3, [sp, #4]
   1e4e0:	bl	21108 <__assert_fail@plt+0xfa04>
   1e4e4:	ldr	r3, [sp, #4]
   1e4e8:	cmp	r0, r4
   1e4ec:	movle	r0, #0
   1e4f0:	movgt	r0, #1
   1e4f4:	b	1e3ac <__assert_fail@plt+0xcca8>
   1e4f8:	push	{r4, lr}
   1e4fc:	mov	r1, #1
   1e500:	bl	1f51c <__assert_fail@plt+0xde18>
   1e504:	cmp	r0, #0
   1e508:	popne	{r4, pc}
   1e50c:	bl	1e62c <__assert_fail@plt+0xcf28>
   1e510:	push	{r4, lr}
   1e514:	mov	r1, #1
   1e518:	bl	1f51c <__assert_fail@plt+0xde18>
   1e51c:	cmp	r0, #0
   1e520:	popne	{r4, pc}
   1e524:	bl	1e62c <__assert_fail@plt+0xcf28>
   1e528:	push	{r4, lr}
   1e52c:	bl	1f51c <__assert_fail@plt+0xde18>
   1e530:	cmp	r0, #0
   1e534:	popne	{r4, pc}
   1e538:	bl	1e62c <__assert_fail@plt+0xcf28>
   1e53c:	push	{r4, lr}
   1e540:	bl	1f51c <__assert_fail@plt+0xde18>
   1e544:	cmp	r0, #0
   1e548:	popne	{r4, pc}
   1e54c:	bl	1e62c <__assert_fail@plt+0xcf28>
   1e550:	push	{r4, r5, r6, lr}
   1e554:	mov	r6, r0
   1e558:	mov	r0, r1
   1e55c:	mov	r4, r1
   1e560:	bl	1f564 <__assert_fail@plt+0xde60>
   1e564:	subs	r5, r0, #0
   1e568:	beq	1e580 <__assert_fail@plt+0xce7c>
   1e56c:	mov	r2, r4
   1e570:	mov	r1, r6
   1e574:	bl	11374 <memcpy@plt>
   1e578:	mov	r0, r5
   1e57c:	pop	{r4, r5, r6, pc}
   1e580:	bl	1e62c <__assert_fail@plt+0xcf28>
   1e584:	push	{r4, r5, r6, lr}
   1e588:	mov	r6, r0
   1e58c:	mov	r0, r1
   1e590:	mov	r4, r1
   1e594:	bl	1f564 <__assert_fail@plt+0xde60>
   1e598:	subs	r5, r0, #0
   1e59c:	beq	1e5b4 <__assert_fail@plt+0xceb0>
   1e5a0:	mov	r2, r4
   1e5a4:	mov	r1, r6
   1e5a8:	bl	11374 <memcpy@plt>
   1e5ac:	mov	r0, r5
   1e5b0:	pop	{r4, r5, r6, pc}
   1e5b4:	bl	1e62c <__assert_fail@plt+0xcf28>
   1e5b8:	push	{r4, r5, r6, lr}
   1e5bc:	mov	r6, r0
   1e5c0:	add	r0, r1, #1
   1e5c4:	mov	r4, r1
   1e5c8:	bl	1f564 <__assert_fail@plt+0xde60>
   1e5cc:	subs	r5, r0, #0
   1e5d0:	beq	1e5f0 <__assert_fail@plt+0xceec>
   1e5d4:	mov	r3, #0
   1e5d8:	mov	r1, r6
   1e5dc:	strb	r3, [r5, r4]
   1e5e0:	mov	r2, r4
   1e5e4:	bl	11374 <memcpy@plt>
   1e5e8:	mov	r0, r5
   1e5ec:	pop	{r4, r5, r6, pc}
   1e5f0:	bl	1e62c <__assert_fail@plt+0xcf28>
   1e5f4:	push	{r4, r5, r6, lr}
   1e5f8:	mov	r6, r0
   1e5fc:	bl	1153c <strlen@plt>
   1e600:	add	r4, r0, #1
   1e604:	mov	r0, r4
   1e608:	bl	1f564 <__assert_fail@plt+0xde60>
   1e60c:	subs	r5, r0, #0
   1e610:	beq	1e628 <__assert_fail@plt+0xcf24>
   1e614:	mov	r2, r4
   1e618:	mov	r1, r6
   1e61c:	bl	11374 <memcpy@plt>
   1e620:	mov	r0, r5
   1e624:	pop	{r4, r5, r6, pc}
   1e628:	bl	1e62c <__assert_fail@plt+0xcf28>
   1e62c:	ldr	r3, [pc, #44]	; 1e660 <__assert_fail@plt+0xcf5c>
   1e630:	push	{r4, lr}
   1e634:	mov	r2, #5
   1e638:	ldr	r1, [pc, #36]	; 1e664 <__assert_fail@plt+0xcf60>
   1e63c:	mov	r0, #0
   1e640:	ldr	r4, [r3]
   1e644:	bl	113bc <dcgettext@plt>
   1e648:	ldr	r2, [pc, #24]	; 1e668 <__assert_fail@plt+0xcf64>
   1e64c:	mov	r1, #0
   1e650:	mov	r3, r0
   1e654:	mov	r0, r4
   1e658:	bl	11494 <error@plt>
   1e65c:	bl	116e0 <abort@plt>
   1e660:	ldrdeq	r4, [r3], -r4	; <UNPREDICTABLE>
   1e664:	andeq	r3, r2, r4, asr #32
   1e668:	andeq	r2, r2, r4, lsl #20
   1e66c:	mov	r1, #0
   1e670:	push	{r4, lr}
   1e674:	mov	r0, r1
   1e678:	bl	11524 <getcwd@plt>
   1e67c:	subs	r4, r0, #0
   1e680:	beq	1e68c <__assert_fail@plt+0xcf88>
   1e684:	mov	r0, r4
   1e688:	pop	{r4, pc}
   1e68c:	bl	1156c <__errno_location@plt>
   1e690:	ldr	r3, [r0]
   1e694:	cmp	r3, #12
   1e698:	bne	1e684 <__assert_fail@plt+0xcf80>
   1e69c:	bl	1e62c <__assert_fail@plt+0xcf28>
   1e6a0:	ldr	ip, [pc, #148]	; 1e73c <__assert_fail@plt+0xd038>
   1e6a4:	sub	r0, r0, #1
   1e6a8:	push	{lr}		; (str lr, [sp, #-4]!)
   1e6ac:	sub	sp, sp, #20
   1e6b0:	ldr	r5, [ip]
   1e6b4:	cmp	r0, #3
   1e6b8:	ldrls	pc, [pc, r0, lsl #2]
   1e6bc:	b	1e728 <__assert_fail@plt+0xd024>
   1e6c0:	andeq	lr, r1, r4, lsr r7
   1e6c4:	andeq	lr, r1, ip, lsr #14
   1e6c8:	andeq	lr, r1, ip, lsr #14
   1e6cc:	ldrdeq	lr, [r1], -r0
   1e6d0:	ldr	r0, [pc, #104]	; 1e740 <__assert_fail@plt+0xd03c>
   1e6d4:	cmp	r1, #0
   1e6d8:	movlt	r3, #0
   1e6dc:	ldrlt	r4, [pc, #96]	; 1e744 <__assert_fail@plt+0xd040>
   1e6e0:	ldrge	r6, [r3, r1, lsl #4]
   1e6e4:	sublt	r4, r4, r1
   1e6e8:	strblt	r2, [sp, #12]
   1e6ec:	mov	r1, r0
   1e6f0:	mov	r2, #5
   1e6f4:	mov	r0, #0
   1e6f8:	strblt	r3, [sp, #13]
   1e6fc:	addlt	r6, sp, #12
   1e700:	ldrge	r4, [pc, #60]	; 1e744 <__assert_fail@plt+0xd040>
   1e704:	bl	113bc <dcgettext@plt>
   1e708:	ldr	r3, [sp, #24]
   1e70c:	str	r6, [sp]
   1e710:	str	r3, [sp, #4]
   1e714:	mov	r1, #0
   1e718:	mov	r3, r4
   1e71c:	mov	r2, r0
   1e720:	mov	r0, r5
   1e724:	bl	11494 <error@plt>
   1e728:	bl	116e0 <abort@plt>
   1e72c:	ldr	r0, [pc, #20]	; 1e748 <__assert_fail@plt+0xd044>
   1e730:	b	1e6d4 <__assert_fail@plt+0xcfd0>
   1e734:	ldr	r0, [pc, #16]	; 1e74c <__assert_fail@plt+0xd048>
   1e738:	b	1e6d4 <__assert_fail@plt+0xcfd0>
   1e73c:	ldrdeq	r4, [r3], -r4	; <UNPREDICTABLE>
   1e740:	andeq	r3, r2, r8, asr r0
   1e744:	strheq	r3, [r2], -ip
   1e748:	andeq	r3, r2, r4, ror r0
   1e74c:	muleq	r2, ip, r0
   1e750:	cmp	r2, #36	; 0x24
   1e754:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e758:	sub	sp, sp, #52	; 0x34
   1e75c:	bhi	1f4ec <__assert_fail@plt+0xdde8>
   1e760:	cmp	r1, #0
   1e764:	mov	r6, r2
   1e768:	mov	sl, r0
   1e76c:	mov	r5, r1
   1e770:	mov	r8, r3
   1e774:	addeq	r5, sp, #44	; 0x2c
   1e778:	bl	1156c <__errno_location@plt>
   1e77c:	mov	r3, #0
   1e780:	str	r3, [r0]
   1e784:	mov	fp, r0
   1e788:	bl	11518 <__ctype_b_loc@plt>
   1e78c:	ldrb	r3, [sl]
   1e790:	mov	r2, sl
   1e794:	ldr	r0, [r0]
   1e798:	b	1e7a0 <__assert_fail@plt+0xd09c>
   1e79c:	ldrb	r3, [r2, #1]!
   1e7a0:	lsl	r1, r3, #1
   1e7a4:	ldrh	r4, [r0, r1]
   1e7a8:	ands	r4, r4, #8192	; 0x2000
   1e7ac:	bne	1e79c <__assert_fail@plt+0xd098>
   1e7b0:	cmp	r3, #45	; 0x2d
   1e7b4:	bne	1e7c8 <__assert_fail@plt+0xd0c4>
   1e7b8:	mov	r4, #4
   1e7bc:	mov	r0, r4
   1e7c0:	add	sp, sp, #52	; 0x34
   1e7c4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e7c8:	mov	r2, r6
   1e7cc:	mov	r3, r4
   1e7d0:	mov	r1, r5
   1e7d4:	mov	r0, sl
   1e7d8:	bl	11380 <__strtoull_internal@plt>
   1e7dc:	ldr	r9, [r5]
   1e7e0:	cmp	sl, r9
   1e7e4:	mov	r6, r0
   1e7e8:	mov	r7, r1
   1e7ec:	beq	1e834 <__assert_fail@plt+0xd130>
   1e7f0:	ldr	r4, [fp]
   1e7f4:	cmp	r4, #0
   1e7f8:	bne	1e824 <__assert_fail@plt+0xd120>
   1e7fc:	ldr	r3, [sp, #88]	; 0x58
   1e800:	cmp	r3, #0
   1e804:	beq	1e814 <__assert_fail@plt+0xd110>
   1e808:	ldrb	sl, [r9]
   1e80c:	cmp	sl, #0
   1e810:	bne	1e868 <__assert_fail@plt+0xd164>
   1e814:	mov	r0, r4
   1e818:	strd	r6, [r8]
   1e81c:	add	sp, sp, #52	; 0x34
   1e820:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e824:	cmp	r4, #34	; 0x22
   1e828:	bne	1e7b8 <__assert_fail@plt+0xd0b4>
   1e82c:	mov	r4, #1
   1e830:	b	1e7fc <__assert_fail@plt+0xd0f8>
   1e834:	ldr	r3, [sp, #88]	; 0x58
   1e838:	cmp	r3, #0
   1e83c:	beq	1e7b8 <__assert_fail@plt+0xd0b4>
   1e840:	ldrb	sl, [r9]
   1e844:	cmp	sl, #0
   1e848:	beq	1e7b8 <__assert_fail@plt+0xd0b4>
   1e84c:	mov	r1, sl
   1e850:	mov	r0, r3
   1e854:	bl	11548 <strchr@plt>
   1e858:	cmp	r0, #0
   1e85c:	movne	r6, #1
   1e860:	movne	r7, #0
   1e864:	beq	1e7b8 <__assert_fail@plt+0xd0b4>
   1e868:	mov	r1, sl
   1e86c:	ldr	r0, [sp, #88]	; 0x58
   1e870:	bl	11548 <strchr@plt>
   1e874:	cmp	r0, #0
   1e878:	beq	1f3d8 <__assert_fail@plt+0xdcd4>
   1e87c:	sub	r3, sl, #69	; 0x45
   1e880:	cmp	r3, #47	; 0x2f
   1e884:	ldrls	pc, [pc, r3, lsl #2]
   1e888:	b	1e97c <__assert_fail@plt+0xd278>
   1e88c:	andeq	lr, r1, ip, asr #18
   1e890:	andeq	lr, r1, ip, ror r9
   1e894:	andeq	lr, r1, ip, asr #18
   1e898:	andeq	lr, r1, ip, ror r9
   1e89c:	andeq	lr, r1, ip, ror r9
   1e8a0:	andeq	lr, r1, ip, ror r9
   1e8a4:	andeq	lr, r1, ip, asr #18
   1e8a8:	andeq	lr, r1, ip, ror r9
   1e8ac:	andeq	lr, r1, ip, asr #18
   1e8b0:	andeq	lr, r1, ip, ror r9
   1e8b4:	andeq	lr, r1, ip, ror r9
   1e8b8:	andeq	lr, r1, ip, asr #18
   1e8bc:	andeq	lr, r1, ip, ror r9
   1e8c0:	andeq	lr, r1, ip, ror r9
   1e8c4:	andeq	lr, r1, ip, ror r9
   1e8c8:	andeq	lr, r1, ip, asr #18
   1e8cc:	andeq	lr, r1, ip, ror r9
   1e8d0:	andeq	lr, r1, ip, ror r9
   1e8d4:	andeq	lr, r1, ip, ror r9
   1e8d8:	andeq	lr, r1, ip, ror r9
   1e8dc:	andeq	lr, r1, ip, asr #18
   1e8e0:	andeq	lr, r1, ip, asr #18
   1e8e4:	andeq	lr, r1, ip, ror r9
   1e8e8:	andeq	lr, r1, ip, ror r9
   1e8ec:	andeq	lr, r1, ip, ror r9
   1e8f0:	andeq	lr, r1, ip, ror r9
   1e8f4:	andeq	lr, r1, ip, ror r9
   1e8f8:	andeq	lr, r1, ip, ror r9
   1e8fc:	andeq	lr, r1, ip, ror r9
   1e900:	andeq	lr, r1, ip, ror r9
   1e904:	andeq	lr, r1, ip, ror r9
   1e908:	andeq	lr, r1, ip, ror r9
   1e90c:	andeq	lr, r1, ip, ror r9
   1e910:	andeq	lr, r1, ip, ror r9
   1e914:	andeq	lr, r1, ip, asr #18
   1e918:	andeq	lr, r1, ip, ror r9
   1e91c:	andeq	lr, r1, ip, ror r9
   1e920:	andeq	lr, r1, ip, ror r9
   1e924:	andeq	lr, r1, ip, asr #18
   1e928:	andeq	lr, r1, ip, ror r9
   1e92c:	andeq	lr, r1, ip, asr #18
   1e930:	andeq	lr, r1, ip, ror r9
   1e934:	andeq	lr, r1, ip, ror r9
   1e938:	andeq	lr, r1, ip, ror r9
   1e93c:	andeq	lr, r1, ip, ror r9
   1e940:	andeq	lr, r1, ip, ror r9
   1e944:	andeq	lr, r1, ip, ror r9
   1e948:	andeq	lr, r1, ip, asr #18
   1e94c:	mov	r1, #48	; 0x30
   1e950:	ldr	r0, [sp, #88]	; 0x58
   1e954:	bl	11548 <strchr@plt>
   1e958:	cmp	r0, #0
   1e95c:	beq	1f46c <__assert_fail@plt+0xdd68>
   1e960:	ldrb	r3, [r9, #1]
   1e964:	cmp	r3, #68	; 0x44
   1e968:	beq	1f44c <__assert_fail@plt+0xdd48>
   1e96c:	cmp	r3, #105	; 0x69
   1e970:	beq	1f41c <__assert_fail@plt+0xdd18>
   1e974:	cmp	r3, #66	; 0x42
   1e978:	beq	1f44c <__assert_fail@plt+0xdd48>
   1e97c:	ldr	r3, [pc, #2948]	; 1f508 <__assert_fail@plt+0xde04>
   1e980:	mvn	r2, #0
   1e984:	mov	r1, #1024	; 0x400
   1e988:	mov	lr, #0
   1e98c:	strd	r2, [sp]
   1e990:	mov	r3, #1
   1e994:	str	r3, [sp, #12]
   1e998:	sub	sl, sl, #66	; 0x42
   1e99c:	cmp	sl, #53	; 0x35
   1e9a0:	ldrls	pc, [pc, sl, lsl #2]
   1e9a4:	b	1f3d8 <__assert_fail@plt+0xdcd4>
   1e9a8:	andeq	pc, r1, r8, lsr #7
   1e9ac:	ldrdeq	pc, [r1], -r8
   1e9b0:	ldrdeq	pc, [r1], -r8
   1e9b4:	andeq	pc, r1, r4, lsr #4
   1e9b8:	ldrdeq	pc, [r1], -r8
   1e9bc:	andeq	pc, r1, r0, ror #2
   1e9c0:	ldrdeq	pc, [r1], -r8
   1e9c4:	ldrdeq	pc, [r1], -r8
   1e9c8:	ldrdeq	pc, [r1], -r8
   1e9cc:	andeq	pc, r1, r4, ror #7
   1e9d0:	ldrdeq	pc, [r1], -r8
   1e9d4:	andeq	lr, r1, r0, lsl #21
   1e9d8:	ldrdeq	pc, [r1], -r8
   1e9dc:	ldrdeq	pc, [r1], -r8
   1e9e0:	andeq	lr, r1, ip, lsl #22
   1e9e4:	ldrdeq	pc, [r1], -r8
   1e9e8:	ldrdeq	pc, [r1], -r8
   1e9ec:	ldrdeq	pc, [r1], -r8
   1e9f0:	andeq	lr, r1, ip, lsl #29
   1e9f4:	ldrdeq	pc, [r1], -r8
   1e9f8:	ldrdeq	pc, [r1], -r8
   1e9fc:	ldrdeq	pc, [r1], -r8
   1ea00:	ldrdeq	pc, [r1], -r8
   1ea04:	andeq	lr, r1, r4, ror #24
   1ea08:	andeq	lr, r1, r0, asr #31
   1ea0c:	ldrdeq	pc, [r1], -r8
   1ea10:	ldrdeq	pc, [r1], -r8
   1ea14:	ldrdeq	pc, [r1], -r8
   1ea18:	ldrdeq	pc, [r1], -r8
   1ea1c:	ldrdeq	pc, [r1], -r8
   1ea20:	ldrdeq	pc, [r1], -r8
   1ea24:	ldrdeq	pc, [r1], -r8
   1ea28:	muleq	r1, r0, pc	; <UNPREDICTABLE>
   1ea2c:	andeq	lr, r1, r8, lsl #31
   1ea30:	ldrdeq	pc, [r1], -r8
   1ea34:	ldrdeq	pc, [r1], -r8
   1ea38:	ldrdeq	pc, [r1], -r8
   1ea3c:	andeq	pc, r1, r0, ror #2
   1ea40:	ldrdeq	pc, [r1], -r8
   1ea44:	ldrdeq	pc, [r1], -r8
   1ea48:	ldrdeq	pc, [r1], -r8
   1ea4c:	andeq	pc, r1, r4, ror #7
   1ea50:	ldrdeq	pc, [r1], -r8
   1ea54:	andeq	lr, r1, r0, lsl #21
   1ea58:	ldrdeq	pc, [r1], -r8
   1ea5c:	ldrdeq	pc, [r1], -r8
   1ea60:	ldrdeq	pc, [r1], -r8
   1ea64:	ldrdeq	pc, [r1], -r8
   1ea68:	ldrdeq	pc, [r1], -r8
   1ea6c:	ldrdeq	pc, [r1], -r8
   1ea70:	andeq	lr, r1, ip, lsl #29
   1ea74:	ldrdeq	pc, [r1], -r8
   1ea78:	ldrdeq	pc, [r1], -r8
   1ea7c:	andeq	lr, r1, ip, ror #30
   1ea80:	mul	r0, r6, lr
   1ea84:	ldrd	sl, [sp]
   1ea88:	umull	r2, r3, r6, r1
   1ea8c:	mla	r0, r1, r7, r0
   1ea90:	cmp	r7, fp
   1ea94:	cmpeq	r6, sl
   1ea98:	add	r3, r0, r3
   1ea9c:	mvnhi	r3, #0
   1eaa0:	mvnhi	r2, #0
   1eaa4:	mul	r6, r1, r3
   1eaa8:	umull	r0, r1, r1, r2
   1eaac:	mla	lr, lr, r2, r6
   1eab0:	ldrd	r6, [sp]
   1eab4:	movhi	ip, #1
   1eab8:	movls	ip, #0
   1eabc:	cmp	r7, r3
   1eac0:	cmpeq	r6, r2
   1eac4:	mvncc	r0, #0
   1eac8:	add	r1, lr, r1
   1eacc:	mov	sl, r6
   1ead0:	movcc	r1, r0
   1ead4:	mov	fp, r7
   1ead8:	cmp	fp, r3
   1eadc:	cmpeq	sl, r2
   1eae0:	mov	r6, r0
   1eae4:	mov	r7, r1
   1eae8:	orrcc	ip, ip, #1
   1eaec:	ldr	r2, [sp, #12]
   1eaf0:	orr	r4, r4, ip
   1eaf4:	add	r3, r9, r2
   1eaf8:	str	r3, [r5]
   1eafc:	ldrb	r3, [r9, r2]
   1eb00:	cmp	r3, #0
   1eb04:	orrne	r4, r4, #2
   1eb08:	b	1e814 <__assert_fail@plt+0xd110>
   1eb0c:	ldrd	sl, [sp]
   1eb10:	umull	r2, r3, r6, r1
   1eb14:	mul	r0, r6, lr
   1eb18:	cmp	r7, fp
   1eb1c:	cmpeq	r6, sl
   1eb20:	mvnhi	r2, #0
   1eb24:	mla	r0, r1, r7, r0
   1eb28:	umull	sl, fp, r2, r1
   1eb2c:	add	r3, r0, r3
   1eb30:	mul	r0, lr, r2
   1eb34:	mvnhi	r3, #0
   1eb38:	strd	sl, [sp, #16]
   1eb3c:	ldrd	sl, [sp]
   1eb40:	mla	r0, r1, r3, r0
   1eb44:	ldr	ip, [sp, #20]
   1eb48:	cmp	r3, fp
   1eb4c:	add	r0, r0, ip
   1eb50:	cmpeq	r2, sl
   1eb54:	str	r0, [sp, #20]
   1eb58:	bls	1eb70 <__assert_fail@plt+0xd46c>
   1eb5c:	mvn	sl, #0
   1eb60:	mvn	fp, #0
   1eb64:	strd	sl, [sp, #16]
   1eb68:	ldr	r0, [sp, #20]
   1eb6c:	ldrd	sl, [sp]
   1eb70:	cmp	r7, fp
   1eb74:	cmpeq	r6, sl
   1eb78:	mul	r0, r1, r0
   1eb7c:	ldrd	r6, [sp, #16]
   1eb80:	mla	ip, lr, r6, r0
   1eb84:	mov	r0, r6
   1eb88:	movhi	r0, #1
   1eb8c:	movls	r0, #0
   1eb90:	cmp	r3, fp
   1eb94:	cmpeq	r2, sl
   1eb98:	ldrd	r2, [sp, #16]
   1eb9c:	umull	r6, r7, r1, r6
   1eba0:	orrhi	r0, r0, #1
   1eba4:	cmp	fp, r3
   1eba8:	cmpeq	sl, r2
   1ebac:	add	r7, ip, r7
   1ebb0:	bcc	1f4bc <__assert_fail@plt+0xddb8>
   1ebb4:	mov	sl, r6
   1ebb8:	mov	fp, r7
   1ebbc:	strd	r6, [sp, #24]
   1ebc0:	mul	r3, r1, fp
   1ebc4:	umull	r6, r7, r1, sl
   1ebc8:	mla	ip, lr, sl, r3
   1ebcc:	ldrd	sl, [sp]
   1ebd0:	ldrd	r2, [sp, #16]
   1ebd4:	add	r7, ip, r7
   1ebd8:	cmp	fp, r3
   1ebdc:	cmpeq	sl, r2
   1ebe0:	mov	r3, fp
   1ebe4:	mov	r2, sl
   1ebe8:	ldrd	sl, [sp, #24]
   1ebec:	orrcc	r0, r0, #1
   1ebf0:	str	r0, [sp, #16]
   1ebf4:	cmp	r3, fp
   1ebf8:	cmpeq	r2, sl
   1ebfc:	bcs	1f154 <__assert_fail@plt+0xda50>
   1ec00:	mvn	r2, #0
   1ec04:	mvn	r3, #0
   1ec08:	mul	ip, lr, r2
   1ec0c:	ldrd	sl, [sp]
   1ec10:	mla	ip, r1, r3, ip
   1ec14:	umull	r6, r7, r2, r1
   1ec18:	ldrd	r0, [sp, #24]
   1ec1c:	add	r7, ip, r7
   1ec20:	cmp	fp, r1
   1ec24:	ldr	r1, [sp, #16]
   1ec28:	cmpeq	sl, r0
   1ec2c:	orrcc	r1, r1, #1
   1ec30:	cmp	r3, fp
   1ec34:	cmpeq	r2, sl
   1ec38:	mvnhi	r0, #0
   1ec3c:	movls	ip, r7
   1ec40:	movhi	ip, r0
   1ec44:	movls	r0, r6
   1ec48:	cmp	r3, fp
   1ec4c:	cmpeq	r2, sl
   1ec50:	mov	r7, ip
   1ec54:	mov	r6, r0
   1ec58:	movls	ip, r1
   1ec5c:	orrhi	ip, r1, #1
   1ec60:	b	1eaec <__assert_fail@plt+0xd3e8>
   1ec64:	ldrd	sl, [sp]
   1ec68:	umull	r2, r3, r6, r1
   1ec6c:	mul	r0, r6, lr
   1ec70:	cmp	r7, fp
   1ec74:	cmpeq	r6, sl
   1ec78:	mvnhi	r2, #0
   1ec7c:	mla	r0, r1, r7, r0
   1ec80:	umull	sl, fp, r2, r1
   1ec84:	add	r3, r0, r3
   1ec88:	mul	r0, lr, r2
   1ec8c:	mvnhi	r3, #0
   1ec90:	strd	sl, [sp, #16]
   1ec94:	ldrd	sl, [sp]
   1ec98:	mla	r0, r1, r3, r0
   1ec9c:	ldr	ip, [sp, #20]
   1eca0:	cmp	r3, fp
   1eca4:	add	r0, r0, ip
   1eca8:	cmpeq	r2, sl
   1ecac:	str	r0, [sp, #20]
   1ecb0:	mvnhi	sl, #0
   1ecb4:	mvnhi	fp, #0
   1ecb8:	strdhi	sl, [sp, #16]
   1ecbc:	ldrdhi	sl, [sp]
   1ecc0:	ldr	r0, [sp, #16]
   1ecc4:	cmp	r3, fp
   1ecc8:	ldr	r3, [sp, #20]
   1eccc:	mul	r0, lr, r0
   1ecd0:	cmpeq	r2, sl
   1ecd4:	mla	r0, r1, r3, r0
   1ecd8:	ldr	r3, [sp, #16]
   1ecdc:	umull	r2, r3, r3, r1
   1ece0:	strd	r2, [sp, #24]
   1ece4:	movhi	r3, #1
   1ece8:	movls	r3, #0
   1ecec:	cmp	r7, fp
   1ecf0:	cmpeq	r6, sl
   1ecf4:	ldrd	r6, [sp, #16]
   1ecf8:	ldr	r2, [sp, #28]
   1ecfc:	movls	ip, r3
   1ed00:	orrhi	ip, r3, #1
   1ed04:	cmp	r7, fp
   1ed08:	add	r2, r0, r2
   1ed0c:	cmpeq	r6, sl
   1ed10:	str	r2, [sp, #28]
   1ed14:	mvnhi	r2, #0
   1ed18:	mvnhi	r3, #0
   1ed1c:	strdhi	r2, [sp, #24]
   1ed20:	ldrd	r6, [sp, #24]
   1ed24:	mul	r2, r1, r7
   1ed28:	umull	sl, fp, r1, r6
   1ed2c:	mla	r3, lr, r6, r2
   1ed30:	ldrd	r6, [sp]
   1ed34:	str	r3, [sp, #32]
   1ed38:	ldrd	r2, [sp, #16]
   1ed3c:	cmp	r3, r7
   1ed40:	cmpeq	r2, r6
   1ed44:	ldrd	r2, [sp, #24]
   1ed48:	orrhi	ip, ip, #1
   1ed4c:	cmp	r3, r7
   1ed50:	ldr	r3, [sp, #32]
   1ed54:	cmpeq	r2, r6
   1ed58:	add	r2, r3, fp
   1ed5c:	mov	fp, r2
   1ed60:	bhi	1f4a4 <__assert_fail@plt+0xdda0>
   1ed64:	strd	sl, [sp, #16]
   1ed68:	mul	r2, r1, fp
   1ed6c:	umull	r6, r7, r1, sl
   1ed70:	mla	r3, lr, sl, r2
   1ed74:	ldrd	sl, [sp]
   1ed78:	str	r3, [sp, #32]
   1ed7c:	ldrd	r2, [sp, #24]
   1ed80:	cmp	r3, fp
   1ed84:	cmpeq	r2, sl
   1ed88:	ldrd	r2, [sp, #16]
   1ed8c:	orrhi	ip, ip, #1
   1ed90:	cmp	fp, r3
   1ed94:	ldr	r3, [sp, #32]
   1ed98:	cmpeq	sl, r2
   1ed9c:	add	r2, r3, r7
   1eda0:	mov	r7, r2
   1eda4:	mvncc	r7, #0
   1eda8:	mvncc	r6, #0
   1edac:	mul	r2, r1, r7
   1edb0:	mov	sl, r6
   1edb4:	strd	r6, [sp, #24]
   1edb8:	mla	r0, lr, sl, r2
   1edbc:	ldrd	r2, [sp, #16]
   1edc0:	ldrd	sl, [sp]
   1edc4:	umull	r6, r7, r1, r6
   1edc8:	cmp	fp, r3
   1edcc:	cmpeq	sl, r2
   1edd0:	mov	r3, fp
   1edd4:	mov	r2, sl
   1edd8:	ldrd	sl, [sp, #24]
   1eddc:	orrcc	ip, ip, #1
   1ede0:	add	r7, r0, r7
   1ede4:	cmp	r3, fp
   1ede8:	cmpeq	r2, sl
   1edec:	mvncc	r6, #0
   1edf0:	mvncc	r7, #0
   1edf4:	umull	sl, fp, r1, r6
   1edf8:	mul	r3, r1, r7
   1edfc:	strd	sl, [sp, #16]
   1ee00:	mla	r0, lr, r6, r3
   1ee04:	ldrd	sl, [sp, #24]
   1ee08:	ldrd	r2, [sp]
   1ee0c:	cmp	r3, fp
   1ee10:	cmpeq	r2, sl
   1ee14:	orrcc	ip, ip, #1
   1ee18:	cmp	r3, r7
   1ee1c:	ldr	r3, [sp, #20]
   1ee20:	cmpeq	r2, r6
   1ee24:	add	r3, r0, r3
   1ee28:	str	r3, [sp, #20]
   1ee2c:	mvncc	r2, #0
   1ee30:	mvncc	r3, #0
   1ee34:	ldrdcs	r2, [sp, #16]
   1ee38:	ldrd	sl, [sp]
   1ee3c:	mul	r0, r1, r3
   1ee40:	cmp	fp, r7
   1ee44:	str	r0, [sp, #16]
   1ee48:	cmpeq	sl, r6
   1ee4c:	ldr	r6, [sp, #16]
   1ee50:	umull	r0, r1, r1, r2
   1ee54:	mla	lr, lr, r2, r6
   1ee58:	orrcc	ip, ip, #1
   1ee5c:	cmp	r3, fp
   1ee60:	cmpeq	r2, sl
   1ee64:	add	r1, lr, r1
   1ee68:	bls	1ee74 <__assert_fail@plt+0xd770>
   1ee6c:	mvn	r0, #0
   1ee70:	mov	r1, r0
   1ee74:	cmp	r3, fp
   1ee78:	cmpeq	r2, sl
   1ee7c:	mov	r6, r0
   1ee80:	mov	r7, r1
   1ee84:	orrhi	ip, ip, #1
   1ee88:	b	1eaec <__assert_fail@plt+0xd3e8>
   1ee8c:	ldrd	sl, [sp]
   1ee90:	umull	r2, r3, r6, r1
   1ee94:	mul	r0, r6, lr
   1ee98:	cmp	r7, fp
   1ee9c:	cmpeq	r6, sl
   1eea0:	mvnhi	r2, #0
   1eea4:	mla	r0, r1, r7, r0
   1eea8:	umull	sl, fp, r1, r2
   1eeac:	add	r3, r0, r3
   1eeb0:	mvnhi	r3, #0
   1eeb4:	strd	sl, [sp, #16]
   1eeb8:	mul	r0, r1, r3
   1eebc:	ldrd	sl, [sp]
   1eec0:	mla	r0, lr, r2, r0
   1eec4:	ldr	ip, [sp, #20]
   1eec8:	cmp	fp, r3
   1eecc:	add	r0, r0, ip
   1eed0:	cmpeq	sl, r2
   1eed4:	str	r0, [sp, #20]
   1eed8:	mvncc	sl, #0
   1eedc:	mvncc	fp, #0
   1eee0:	strdcc	sl, [sp, #16]
   1eee4:	ldrdcc	sl, [sp]
   1eee8:	ldr	r0, [sp, #16]
   1eeec:	cmp	fp, r3
   1eef0:	cmpeq	sl, r2
   1eef4:	mul	r0, lr, r0
   1eef8:	ldr	r2, [sp, #20]
   1eefc:	ldr	r3, [sp, #16]
   1ef00:	movcc	ip, #1
   1ef04:	movcs	ip, #0
   1ef08:	cmp	r7, fp
   1ef0c:	cmpeq	r6, sl
   1ef10:	ldrd	r6, [sp, #16]
   1ef14:	mla	r0, r1, r2, r0
   1ef18:	umull	r2, r3, r3, r1
   1ef1c:	orrhi	ip, ip, #1
   1ef20:	cmp	r7, fp
   1ef24:	cmpeq	r6, sl
   1ef28:	add	r3, r0, r3
   1ef2c:	mvnhi	r3, #0
   1ef30:	mvnhi	r2, #0
   1ef34:	mul	r0, r1, r3
   1ef38:	cmp	r7, fp
   1ef3c:	str	r0, [sp, #24]
   1ef40:	cmpeq	r6, sl
   1ef44:	ldr	r6, [sp, #24]
   1ef48:	umull	r0, r1, r1, r2
   1ef4c:	mla	lr, lr, r2, r6
   1ef50:	orrhi	ip, ip, #1
   1ef54:	cmp	fp, r3
   1ef58:	cmpeq	sl, r2
   1ef5c:	mvncc	r0, #0
   1ef60:	add	r1, lr, r1
   1ef64:	movcc	r1, r0
   1ef68:	b	1ead8 <__assert_fail@plt+0xd3d4>
   1ef6c:	cmp	r6, #0
   1ef70:	sbcs	r3, r7, #0
   1ef74:	blt	1f40c <__assert_fail@plt+0xdd08>
   1ef78:	adds	r6, r6, r6
   1ef7c:	adc	r7, r7, r7
   1ef80:	mov	ip, #0
   1ef84:	b	1eaec <__assert_fail@plt+0xd3e8>
   1ef88:	mov	ip, #0
   1ef8c:	b	1eaec <__assert_fail@plt+0xd3e8>
   1ef90:	ldr	r3, [pc, #1396]	; 1f50c <__assert_fail@plt+0xde08>
   1ef94:	mvn	r2, #0
   1ef98:	cmp	r7, r3
   1ef9c:	cmpeq	r6, r2
   1efa0:	bhi	1f40c <__assert_fail@plt+0xdd08>
   1efa4:	lsl	r3, r7, #9
   1efa8:	orr	r3, r3, r6, lsr #23
   1efac:	lsl	r2, r6, #9
   1efb0:	mov	r6, r2
   1efb4:	mov	r7, r3
   1efb8:	mov	ip, #0
   1efbc:	b	1eaec <__assert_fail@plt+0xd3e8>
   1efc0:	ldrd	sl, [sp]
   1efc4:	umull	r2, r3, r6, r1
   1efc8:	mul	r0, r6, lr
   1efcc:	cmp	r7, fp
   1efd0:	cmpeq	r6, sl
   1efd4:	mvnhi	r2, #0
   1efd8:	mla	r0, r1, r7, r0
   1efdc:	umull	sl, fp, r2, r1
   1efe0:	add	r3, r0, r3
   1efe4:	mul	r0, lr, r2
   1efe8:	mvnhi	r3, #0
   1efec:	strd	sl, [sp, #16]
   1eff0:	ldrd	sl, [sp]
   1eff4:	mla	r0, r1, r3, r0
   1eff8:	ldr	ip, [sp, #20]
   1effc:	cmp	r3, fp
   1f000:	add	r0, r0, ip
   1f004:	cmpeq	r2, sl
   1f008:	str	r0, [sp, #20]
   1f00c:	mvnhi	sl, #0
   1f010:	mvnhi	fp, #0
   1f014:	strdhi	sl, [sp, #16]
   1f018:	ldrdhi	sl, [sp]
   1f01c:	ldr	r0, [sp, #16]
   1f020:	cmp	r3, fp
   1f024:	ldr	r3, [sp, #20]
   1f028:	mul	r0, lr, r0
   1f02c:	cmpeq	r2, sl
   1f030:	mla	r0, r1, r3, r0
   1f034:	ldr	r3, [sp, #16]
   1f038:	umull	r2, r3, r3, r1
   1f03c:	strd	r2, [sp, #24]
   1f040:	movhi	r3, #1
   1f044:	movls	r3, #0
   1f048:	cmp	r7, fp
   1f04c:	cmpeq	r6, sl
   1f050:	ldrd	r6, [sp, #16]
   1f054:	ldr	r2, [sp, #28]
   1f058:	movls	ip, r3
   1f05c:	orrhi	ip, r3, #1
   1f060:	cmp	r7, fp
   1f064:	add	r2, r0, r2
   1f068:	cmpeq	r6, sl
   1f06c:	str	r2, [sp, #28]
   1f070:	mvnhi	r2, #0
   1f074:	mvnhi	r3, #0
   1f078:	strdhi	r2, [sp, #24]
   1f07c:	ldrd	r6, [sp, #24]
   1f080:	mul	r2, lr, r6
   1f084:	umull	sl, fp, r6, r1
   1f088:	mla	r3, r1, r7, r2
   1f08c:	ldrd	r6, [sp]
   1f090:	str	r3, [sp, #32]
   1f094:	ldrd	r2, [sp, #16]
   1f098:	cmp	r3, r7
   1f09c:	cmpeq	r2, r6
   1f0a0:	ldrd	r2, [sp, #24]
   1f0a4:	orrhi	ip, ip, #1
   1f0a8:	cmp	r3, r7
   1f0ac:	ldr	r3, [sp, #32]
   1f0b0:	cmpeq	r2, r6
   1f0b4:	add	r2, r3, fp
   1f0b8:	mov	fp, r2
   1f0bc:	bhi	1f4d4 <__assert_fail@plt+0xddd0>
   1f0c0:	strd	sl, [sp, #16]
   1f0c4:	mul	r2, lr, sl
   1f0c8:	umull	r6, r7, sl, r1
   1f0cc:	mla	r3, r1, fp, r2
   1f0d0:	ldrd	sl, [sp]
   1f0d4:	str	r3, [sp, #32]
   1f0d8:	ldrd	r2, [sp, #24]
   1f0dc:	cmp	r3, fp
   1f0e0:	cmpeq	r2, sl
   1f0e4:	ldrd	r2, [sp, #16]
   1f0e8:	orrhi	ip, ip, #1
   1f0ec:	cmp	r3, fp
   1f0f0:	ldr	r3, [sp, #32]
   1f0f4:	cmpeq	r2, sl
   1f0f8:	add	r2, r3, r7
   1f0fc:	mov	r7, r2
   1f100:	mvnhi	r7, #0
   1f104:	mvnhi	r6, #0
   1f108:	mul	r2, r1, r7
   1f10c:	mov	sl, r6
   1f110:	strd	r6, [sp, #24]
   1f114:	mla	r0, lr, sl, r2
   1f118:	ldrd	sl, [sp]
   1f11c:	ldrd	r2, [sp, #16]
   1f120:	umull	r6, r7, r1, r6
   1f124:	cmp	r3, fp
   1f128:	cmpeq	r2, sl
   1f12c:	mov	r3, ip
   1f130:	orrhi	r3, r3, #1
   1f134:	mov	r2, sl
   1f138:	str	r3, [sp, #16]
   1f13c:	mov	r3, fp
   1f140:	ldrd	sl, [sp, #24]
   1f144:	add	r7, r0, r7
   1f148:	cmp	r3, fp
   1f14c:	cmpeq	r2, sl
   1f150:	bcc	1ec00 <__assert_fail@plt+0xd4fc>
   1f154:	mov	r2, r6
   1f158:	mov	r3, r7
   1f15c:	b	1ec08 <__assert_fail@plt+0xd504>
   1f160:	ldrd	sl, [sp]
   1f164:	umull	r2, r3, r6, r1
   1f168:	mul	r0, r6, lr
   1f16c:	cmp	r7, fp
   1f170:	cmpeq	r6, sl
   1f174:	mvnhi	r2, #0
   1f178:	mla	r0, r1, r7, r0
   1f17c:	umull	sl, fp, r2, r1
   1f180:	add	r3, r0, r3
   1f184:	mul	r0, lr, r2
   1f188:	mvnhi	r3, #0
   1f18c:	strd	sl, [sp, #16]
   1f190:	ldrd	sl, [sp]
   1f194:	mla	r0, r1, r3, r0
   1f198:	ldr	ip, [sp, #20]
   1f19c:	cmp	r3, fp
   1f1a0:	add	r0, r0, ip
   1f1a4:	cmpeq	r2, sl
   1f1a8:	str	r0, [sp, #20]
   1f1ac:	mvnhi	sl, #0
   1f1b0:	mvnhi	fp, #0
   1f1b4:	strdhi	sl, [sp, #16]
   1f1b8:	ldrdhi	sl, [sp]
   1f1bc:	ldr	r0, [sp, #16]
   1f1c0:	cmp	r3, fp
   1f1c4:	ldr	ip, [sp, #20]
   1f1c8:	mul	r0, lr, r0
   1f1cc:	ldr	r3, [sp, #16]
   1f1d0:	cmpeq	r2, sl
   1f1d4:	mla	r0, r1, ip, r0
   1f1d8:	umull	r2, r3, r3, r1
   1f1dc:	movhi	r1, #1
   1f1e0:	movls	r1, #0
   1f1e4:	cmp	r7, fp
   1f1e8:	cmpeq	r6, sl
   1f1ec:	ldrd	r6, [sp, #16]
   1f1f0:	movls	ip, r1
   1f1f4:	orrhi	ip, r1, #1
   1f1f8:	cmp	r7, fp
   1f1fc:	cmpeq	r6, sl
   1f200:	mvnhi	r2, #0
   1f204:	add	r3, r0, r3
   1f208:	movhi	r3, r2
   1f20c:	cmp	r7, fp
   1f210:	cmpeq	r6, sl
   1f214:	mov	r7, r3
   1f218:	mov	r6, r2
   1f21c:	orrhi	ip, ip, #1
   1f220:	b	1eaec <__assert_fail@plt+0xd3e8>
   1f224:	ldrd	sl, [sp]
   1f228:	umull	r2, r3, r6, r1
   1f22c:	mul	r0, r6, lr
   1f230:	cmp	r7, fp
   1f234:	cmpeq	r6, sl
   1f238:	mvnhi	r2, #0
   1f23c:	mla	r0, r1, r7, r0
   1f240:	umull	sl, fp, r1, r2
   1f244:	add	r3, r0, r3
   1f248:	mvnhi	r3, #0
   1f24c:	strd	sl, [sp, #16]
   1f250:	mul	r0, r1, r3
   1f254:	ldrd	sl, [sp]
   1f258:	mla	r0, lr, r2, r0
   1f25c:	ldr	ip, [sp, #20]
   1f260:	cmp	fp, r3
   1f264:	add	r0, r0, ip
   1f268:	cmpeq	sl, r2
   1f26c:	str	r0, [sp, #20]
   1f270:	mvncc	sl, #0
   1f274:	mvncc	fp, #0
   1f278:	strdcc	sl, [sp, #16]
   1f27c:	ldrdcc	sl, [sp]
   1f280:	ldr	r0, [sp, #16]
   1f284:	cmp	fp, r3
   1f288:	ldr	r3, [sp, #20]
   1f28c:	mul	r0, lr, r0
   1f290:	cmpeq	sl, r2
   1f294:	mla	r0, r1, r3, r0
   1f298:	ldr	r3, [sp, #16]
   1f29c:	umull	r2, r3, r3, r1
   1f2a0:	strd	r2, [sp, #24]
   1f2a4:	movcc	r3, #1
   1f2a8:	movcs	r3, #0
   1f2ac:	cmp	r7, fp
   1f2b0:	cmpeq	r6, sl
   1f2b4:	movls	ip, r3
   1f2b8:	orrhi	ip, r3, #1
   1f2bc:	ldrd	r2, [sp, #16]
   1f2c0:	cmp	r3, fp
   1f2c4:	ldr	r3, [sp, #28]
   1f2c8:	cmpeq	r2, sl
   1f2cc:	add	r3, r0, r3
   1f2d0:	str	r3, [sp, #28]
   1f2d4:	bhi	1f48c <__assert_fail@plt+0xdd88>
   1f2d8:	ldrd	r2, [sp, #24]
   1f2dc:	mov	sl, r2
   1f2e0:	mov	fp, r3
   1f2e4:	mul	r2, lr, sl
   1f2e8:	umull	r6, r7, sl, r1
   1f2ec:	mla	r0, r1, fp, r2
   1f2f0:	ldrd	r2, [sp]
   1f2f4:	add	r7, r0, r7
   1f2f8:	mov	sl, r2
   1f2fc:	mov	fp, r3
   1f300:	strd	r2, [sp, #32]
   1f304:	ldrd	r2, [sp, #16]
   1f308:	cmp	r3, fp
   1f30c:	cmpeq	r2, sl
   1f310:	ldrd	r2, [sp, #32]
   1f314:	ldrd	sl, [sp, #24]
   1f318:	orrhi	ip, ip, #1
   1f31c:	cmp	fp, r3
   1f320:	cmpeq	sl, r2
   1f324:	mvnhi	r6, #0
   1f328:	mvnhi	r7, #0
   1f32c:	umull	sl, fp, r6, r1
   1f330:	mul	r3, lr, r6
   1f334:	strd	sl, [sp, #16]
   1f338:	mla	r0, r1, r7, r3
   1f33c:	ldrd	sl, [sp, #24]
   1f340:	ldrd	r2, [sp]
   1f344:	cmp	fp, r3
   1f348:	cmpeq	sl, r2
   1f34c:	orrhi	ip, ip, #1
   1f350:	cmp	r7, r3
   1f354:	ldr	r3, [sp, #20]
   1f358:	cmpeq	r6, r2
   1f35c:	add	r3, r0, r3
   1f360:	str	r3, [sp, #20]
   1f364:	mvnhi	r2, #0
   1f368:	mvnhi	r3, #0
   1f36c:	ldrdls	r2, [sp, #16]
   1f370:	ldrd	sl, [sp]
   1f374:	mul	r0, r1, r3
   1f378:	cmp	r7, fp
   1f37c:	str	r0, [sp, #16]
   1f380:	cmpeq	r6, sl
   1f384:	ldr	r6, [sp, #16]
   1f388:	umull	r0, r1, r1, r2
   1f38c:	mla	lr, lr, r2, r6
   1f390:	orrhi	ip, ip, #1
   1f394:	cmp	r3, fp
   1f398:	cmpeq	r2, sl
   1f39c:	add	r1, lr, r1
   1f3a0:	bls	1ee74 <__assert_fail@plt+0xd770>
   1f3a4:	b	1ee6c <__assert_fail@plt+0xd768>
   1f3a8:	ldr	r3, [pc, #344]	; 1f508 <__assert_fail@plt+0xde04>
   1f3ac:	mvn	r2, #0
   1f3b0:	cmp	r7, r3
   1f3b4:	cmpeq	r6, r2
   1f3b8:	bhi	1f40c <__assert_fail@plt+0xdd08>
   1f3bc:	lsl	r3, r7, #10
   1f3c0:	orr	r3, r3, r6, lsr #22
   1f3c4:	lsl	r2, r6, #10
   1f3c8:	mov	r6, r2
   1f3cc:	mov	r7, r3
   1f3d0:	mov	ip, #0
   1f3d4:	b	1eaec <__assert_fail@plt+0xd3e8>
   1f3d8:	strd	r6, [r8]
   1f3dc:	orr	r4, r4, #2
   1f3e0:	b	1e7bc <__assert_fail@plt+0xd0b8>
   1f3e4:	ldrd	r2, [sp]
   1f3e8:	cmp	r7, r3
   1f3ec:	cmpeq	r6, r2
   1f3f0:	bhi	1f40c <__assert_fail@plt+0xdd08>
   1f3f4:	mul	r3, r6, lr
   1f3f8:	mov	ip, #0
   1f3fc:	mla	r3, r1, r7, r3
   1f400:	umull	r6, r7, r6, r1
   1f404:	add	r7, r3, r7
   1f408:	b	1eaec <__assert_fail@plt+0xd3e8>
   1f40c:	mvn	r6, #0
   1f410:	mvn	r7, #0
   1f414:	mov	ip, #1
   1f418:	b	1eaec <__assert_fail@plt+0xd3e8>
   1f41c:	ldrb	r3, [r9, #2]
   1f420:	mvn	r2, #0
   1f424:	mov	r1, #1024	; 0x400
   1f428:	cmp	r3, #66	; 0x42
   1f42c:	ldr	r3, [pc, #212]	; 1f508 <__assert_fail@plt+0xde04>
   1f430:	mov	lr, #0
   1f434:	strd	r2, [sp]
   1f438:	moveq	r3, #3
   1f43c:	streq	r3, [sp, #12]
   1f440:	movne	r3, #1
   1f444:	strne	r3, [sp, #12]
   1f448:	b	1e998 <__assert_fail@plt+0xd294>
   1f44c:	add	r3, pc, #172	; 0xac
   1f450:	ldrd	r2, [r3]
   1f454:	mov	r1, #1000	; 0x3e8
   1f458:	mov	lr, #0
   1f45c:	strd	r2, [sp]
   1f460:	mov	r3, #2
   1f464:	str	r3, [sp, #12]
   1f468:	b	1e998 <__assert_fail@plt+0xd294>
   1f46c:	ldr	r3, [pc, #148]	; 1f508 <__assert_fail@plt+0xde04>
   1f470:	mvn	r2, #0
   1f474:	mov	lr, r0
   1f478:	strd	r2, [sp]
   1f47c:	mov	r3, #1
   1f480:	mov	r1, #1024	; 0x400
   1f484:	str	r3, [sp, #12]
   1f488:	b	1e998 <__assert_fail@plt+0xd294>
   1f48c:	mvn	r2, #0
   1f490:	mvn	r3, #0
   1f494:	mov	sl, r2
   1f498:	strd	r2, [sp, #24]
   1f49c:	mov	fp, r3
   1f4a0:	b	1f2e4 <__assert_fail@plt+0xdbe0>
   1f4a4:	mvn	r2, #0
   1f4a8:	mvn	r3, #0
   1f4ac:	mov	sl, r2
   1f4b0:	strd	r2, [sp, #16]
   1f4b4:	mov	fp, r3
   1f4b8:	b	1ed68 <__assert_fail@plt+0xd664>
   1f4bc:	mvn	r2, #0
   1f4c0:	mvn	r3, #0
   1f4c4:	mov	sl, r2
   1f4c8:	strd	r2, [sp, #24]
   1f4cc:	mov	fp, r3
   1f4d0:	b	1ebc0 <__assert_fail@plt+0xd4bc>
   1f4d4:	mvn	r2, #0
   1f4d8:	mvn	r3, #0
   1f4dc:	mov	sl, r2
   1f4e0:	strd	r2, [sp, #16]
   1f4e4:	mov	fp, r3
   1f4e8:	b	1f0c4 <__assert_fail@plt+0xd9c0>
   1f4ec:	ldr	r3, [pc, #28]	; 1f510 <__assert_fail@plt+0xde0c>
   1f4f0:	mov	r2, #85	; 0x55
   1f4f4:	ldr	r1, [pc, #24]	; 1f514 <__assert_fail@plt+0xde10>
   1f4f8:	ldr	r0, [pc, #24]	; 1f518 <__assert_fail@plt+0xde14>
   1f4fc:	bl	11704 <__assert_fail@plt>
   1f500:	blmi	ff1c94c4 <optarg@@GLIBC_2.4+0xff19518c>
   1f504:	subeq	r8, r1, r7, lsr r9
   1f508:	ldrshteq	pc, [pc], -pc	; <UNPREDICTABLE>
   1f50c:	ldrshteq	pc, [pc], #-255	; <UNPREDICTABLE>
   1f510:	andeq	r3, r2, r0, asr #1
   1f514:	andeq	r3, r2, ip, asr #1
   1f518:	ldrdeq	r3, [r2], -ip
   1f51c:	cmp	r1, #0
   1f520:	cmpne	r0, #0
   1f524:	moveq	r1, #1
   1f528:	moveq	r0, r1
   1f52c:	umull	r2, r3, r0, r1
   1f530:	adds	r3, r3, #0
   1f534:	movne	r3, #1
   1f538:	cmp	r2, #0
   1f53c:	blt	1f54c <__assert_fail@plt+0xde48>
   1f540:	cmp	r3, #0
   1f544:	bne	1f54c <__assert_fail@plt+0xde48>
   1f548:	b	112e4 <calloc@plt>
   1f54c:	push	{r4, lr}
   1f550:	bl	1156c <__errno_location@plt>
   1f554:	mov	r3, #12
   1f558:	str	r3, [r0]
   1f55c:	mov	r0, #0
   1f560:	pop	{r4, pc}
   1f564:	cmp	r0, #0
   1f568:	moveq	r0, #1
   1f56c:	cmp	r0, #0
   1f570:	blt	1f578 <__assert_fail@plt+0xde74>
   1f574:	b	114d0 <malloc@plt>
   1f578:	push	{r4, lr}
   1f57c:	bl	1156c <__errno_location@plt>
   1f580:	mov	r3, #12
   1f584:	str	r3, [r0]
   1f588:	mov	r0, #0
   1f58c:	pop	{r4, pc}
   1f590:	cmp	r0, #0
   1f594:	beq	1f5b8 <__assert_fail@plt+0xdeb4>
   1f598:	cmp	r1, #0
   1f59c:	push	{lr}		; (str lr, [sp, #-4]!)
   1f5a0:	sub	sp, sp, #12
   1f5a4:	beq	1f5c0 <__assert_fail@plt+0xdebc>
   1f5a8:	blt	1f5d8 <__assert_fail@plt+0xded4>
   1f5ac:	add	sp, sp, #12
   1f5b0:	pop	{lr}		; (ldr lr, [sp], #4)
   1f5b4:	b	113d4 <realloc@plt>
   1f5b8:	mov	r0, r1
   1f5bc:	b	1f564 <__assert_fail@plt+0xde60>
   1f5c0:	str	r1, [sp, #4]
   1f5c4:	bl	15334 <__assert_fail@plt+0x3c30>
   1f5c8:	ldr	r3, [sp, #4]
   1f5cc:	mov	r0, r3
   1f5d0:	add	sp, sp, #12
   1f5d4:	pop	{pc}		; (ldr pc, [sp], #4)
   1f5d8:	bl	1156c <__errno_location@plt>
   1f5dc:	mov	r2, #12
   1f5e0:	mov	r3, #0
   1f5e4:	str	r2, [r0]
   1f5e8:	b	1f5cc <__assert_fail@plt+0xdec8>
   1f5ec:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f5f0:	cmp	r3, #2
   1f5f4:	sub	sp, sp, #1040	; 0x410
   1f5f8:	sub	sp, sp, #12
   1f5fc:	mov	r4, r3
   1f600:	mov	r5, r0
   1f604:	mov	fp, r1
   1f608:	mov	r6, r2
   1f60c:	bhi	1f968 <__assert_fail@plt+0xe264>
   1f610:	sub	r3, r3, #1
   1f614:	mov	r7, r3
   1f618:	mov	r3, #1
   1f61c:	str	r3, [sp]
   1f620:	add	r2, sp, #1040	; 0x410
   1f624:	add	r3, sp, #20
   1f628:	add	r2, r2, #4
   1f62c:	str	r4, [r3, #4]!
   1f630:	cmp	r2, r3
   1f634:	bne	1f62c <__assert_fail@plt+0xdf28>
   1f638:	cmp	r4, #0
   1f63c:	subne	r3, r4, #1
   1f640:	subne	r1, r6, #1
   1f644:	beq	1f664 <__assert_fail@plt+0xdf60>
   1f648:	ldrb	r2, [r1, #1]!
   1f64c:	add	r0, sp, #1040	; 0x410
   1f650:	add	r0, r0, #8
   1f654:	add	r2, r0, r2, lsl #2
   1f658:	str	r3, [r2, #-1024]	; 0xfffffc00
   1f65c:	subs	r3, r3, #1
   1f660:	bcs	1f648 <__assert_fail@plt+0xdf44>
   1f664:	ldr	r8, [sp]
   1f668:	mov	r2, r7
   1f66c:	add	r1, r6, r8
   1f670:	mov	r0, r6
   1f674:	bl	11398 <memcmp@plt>
   1f678:	subs	sl, r0, #0
   1f67c:	bne	1f7fc <__assert_fail@plt+0xe0f8>
   1f680:	sub	r2, r7, #1
   1f684:	str	r2, [sp, #4]
   1f688:	add	r2, r6, r2
   1f68c:	mov	r3, r7
   1f690:	str	r2, [sp, #16]
   1f694:	sub	r2, r4, r8
   1f698:	str	r2, [sp, #12]
   1f69c:	rsb	r2, r3, #1
   1f6a0:	str	r6, [sp, #8]
   1f6a4:	mov	r9, sl
   1f6a8:	sub	r7, r4, #1
   1f6ac:	str	r2, [sp, #20]
   1f6b0:	mov	r0, fp
   1f6b4:	mov	r6, r3
   1f6b8:	b	1f6d8 <__assert_fail@plt+0xdfd4>
   1f6bc:	ldr	r3, [sp]
   1f6c0:	cmp	sl, #0
   1f6c4:	cmpne	ip, r3
   1f6c8:	mov	sl, #0
   1f6cc:	ldrcc	ip, [sp, #12]
   1f6d0:	add	r9, r9, ip
   1f6d4:	mov	r0, r8
   1f6d8:	add	r8, r9, r4
   1f6dc:	sub	r2, r8, r0
   1f6e0:	mov	r1, #0
   1f6e4:	add	r0, r5, r0
   1f6e8:	bl	115cc <memchr@plt>
   1f6ec:	cmp	r8, #0
   1f6f0:	clz	r0, r0
   1f6f4:	lsr	r0, r0, #5
   1f6f8:	moveq	r0, #0
   1f6fc:	cmp	r0, #0
   1f700:	beq	1f93c <__assert_fail@plt+0xe238>
   1f704:	add	r3, r5, r8
   1f708:	add	r2, sp, #1040	; 0x410
   1f70c:	ldrb	r3, [r3, #-1]
   1f710:	add	r2, r2, #8
   1f714:	add	r3, r2, r3, lsl #2
   1f718:	ldr	ip, [r3, #-1024]	; 0xfffffc00
   1f71c:	cmp	ip, #0
   1f720:	bne	1f6bc <__assert_fail@plt+0xdfb8>
   1f724:	cmp	sl, r6
   1f728:	movcs	r3, sl
   1f72c:	movcc	r3, r6
   1f730:	cmp	r7, r3
   1f734:	bls	1f778 <__assert_fail@plt+0xe074>
   1f738:	ldr	r1, [sp, #8]
   1f73c:	add	r2, r9, r3
   1f740:	ldrb	lr, [r1, r3]
   1f744:	ldrb	r0, [r5, r2]
   1f748:	add	r1, r1, r3
   1f74c:	add	r2, r5, r2
   1f750:	cmp	lr, r0
   1f754:	beq	1f76c <__assert_fail@plt+0xe068>
   1f758:	b	1f7e8 <__assert_fail@plt+0xe0e4>
   1f75c:	ldrb	lr, [r1, #1]!
   1f760:	ldrb	r0, [r2, #1]!
   1f764:	cmp	lr, r0
   1f768:	bne	1f7e8 <__assert_fail@plt+0xe0e4>
   1f76c:	add	r3, r3, #1
   1f770:	cmp	r7, r3
   1f774:	bhi	1f75c <__assert_fail@plt+0xe058>
   1f778:	cmp	sl, r6
   1f77c:	ldr	r1, [sp, #4]
   1f780:	bcs	1fa90 <__assert_fail@plt+0xe38c>
   1f784:	ldr	ip, [sp, #16]
   1f788:	add	r2, r9, r1
   1f78c:	ldrb	r3, [ip]
   1f790:	ldrb	r0, [r5, r2]
   1f794:	add	r2, r5, r2
   1f798:	cmp	r0, r3
   1f79c:	bne	1fa90 <__assert_fail@plt+0xe38c>
   1f7a0:	mov	r0, ip
   1f7a4:	sub	fp, sl, #1
   1f7a8:	b	1f7c0 <__assert_fail@plt+0xe0bc>
   1f7ac:	ldrb	lr, [r0, #-1]!
   1f7b0:	ldrb	ip, [r2, #-1]!
   1f7b4:	cmp	lr, ip
   1f7b8:	bne	1f7cc <__assert_fail@plt+0xe0c8>
   1f7bc:	mov	r1, r3
   1f7c0:	sub	r3, r1, #1
   1f7c4:	cmp	r3, fp
   1f7c8:	bne	1f7ac <__assert_fail@plt+0xe0a8>
   1f7cc:	add	sl, sl, #1
   1f7d0:	cmp	sl, r1
   1f7d4:	bhi	1f938 <__assert_fail@plt+0xe234>
   1f7d8:	ldr	r3, [sp]
   1f7dc:	ldr	sl, [sp, #12]
   1f7e0:	add	r9, r9, r3
   1f7e4:	b	1f6d4 <__assert_fail@plt+0xdfd0>
   1f7e8:	ldr	r2, [sp, #20]
   1f7ec:	mov	sl, ip
   1f7f0:	add	r9, r2, r9
   1f7f4:	add	r9, r3, r9
   1f7f8:	b	1f6d4 <__assert_fail@plt+0xdfd0>
   1f7fc:	sub	r3, r4, r7
   1f800:	cmp	r3, r7
   1f804:	movcc	r3, r7
   1f808:	sub	r1, r7, #1
   1f80c:	add	r3, r3, #1
   1f810:	mov	r2, r7
   1f814:	mov	r9, #0
   1f818:	str	r3, [sp, #8]
   1f81c:	add	r3, r6, r1
   1f820:	str	r3, [sp, #12]
   1f824:	sub	r7, r4, #1
   1f828:	add	r3, r6, r2
   1f82c:	mov	r0, fp
   1f830:	mov	sl, r9
   1f834:	mov	fp, r6
   1f838:	mov	r6, r4
   1f83c:	mov	r4, r2
   1f840:	str	r3, [sp]
   1f844:	rsb	r3, r2, #1
   1f848:	str	r1, [sp, #4]
   1f84c:	str	r3, [sp, #16]
   1f850:	add	r8, r9, r6
   1f854:	sub	r2, r8, r0
   1f858:	mov	r1, sl
   1f85c:	add	r0, r5, r0
   1f860:	bl	115cc <memchr@plt>
   1f864:	adds	r3, r8, #0
   1f868:	movne	r3, #1
   1f86c:	cmp	r0, #0
   1f870:	movne	r3, #0
   1f874:	cmp	r3, #0
   1f878:	mov	r0, r3
   1f87c:	beq	1f93c <__assert_fail@plt+0xe238>
   1f880:	add	r2, r5, r8
   1f884:	add	r3, sp, #1040	; 0x410
   1f888:	ldrb	r2, [r2, #-1]
   1f88c:	add	r3, r3, #8
   1f890:	add	r2, r3, r2, lsl #2
   1f894:	ldr	r2, [r2, #-1024]	; 0xfffffc00
   1f898:	cmp	r2, #0
   1f89c:	bne	1f950 <__assert_fail@plt+0xe24c>
   1f8a0:	cmp	r4, r7
   1f8a4:	bcs	1f8f0 <__assert_fail@plt+0xe1ec>
   1f8a8:	ldr	r3, [sp]
   1f8ac:	add	r1, r9, r4
   1f8b0:	ldrb	r0, [r3]
   1f8b4:	ldrb	r2, [r5, r1]
   1f8b8:	add	r1, r5, r1
   1f8bc:	cmp	r0, r2
   1f8c0:	movne	r2, r4
   1f8c4:	bne	1f948 <__assert_fail@plt+0xe244>
   1f8c8:	mov	r0, r3
   1f8cc:	mov	r2, r4
   1f8d0:	b	1f8e4 <__assert_fail@plt+0xe1e0>
   1f8d4:	ldrb	ip, [r0, #1]!
   1f8d8:	ldrb	r3, [r1, #1]!
   1f8dc:	cmp	ip, r3
   1f8e0:	bne	1f948 <__assert_fail@plt+0xe244>
   1f8e4:	add	r2, r2, #1
   1f8e8:	cmp	r2, r7
   1f8ec:	bcc	1f8d4 <__assert_fail@plt+0xe1d0>
   1f8f0:	ldr	r3, [sp, #4]
   1f8f4:	cmn	r3, #1
   1f8f8:	beq	1f938 <__assert_fail@plt+0xe234>
   1f8fc:	add	r1, r9, r3
   1f900:	ldr	r3, [sp, #12]
   1f904:	ldrb	r2, [r5, r1]
   1f908:	add	r1, r5, r1
   1f90c:	ldrb	r0, [r3]
   1f910:	cmp	r0, r2
   1f914:	bne	1f95c <__assert_fail@plt+0xe258>
   1f918:	mov	r2, r3
   1f91c:	b	1f930 <__assert_fail@plt+0xe22c>
   1f920:	ldrb	r0, [r2, #-1]!
   1f924:	ldrb	r3, [r1, #-1]!
   1f928:	cmp	r0, r3
   1f92c:	bne	1f95c <__assert_fail@plt+0xe258>
   1f930:	cmp	fp, r2
   1f934:	bne	1f920 <__assert_fail@plt+0xe21c>
   1f938:	add	r0, r5, r9
   1f93c:	add	sp, sp, #1040	; 0x410
   1f940:	add	sp, sp, #12
   1f944:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f948:	ldr	r3, [sp, #16]
   1f94c:	add	r9, r3, r9
   1f950:	add	r9, r2, r9
   1f954:	mov	r0, r8
   1f958:	b	1f850 <__assert_fail@plt+0xe14c>
   1f95c:	ldr	r3, [sp, #8]
   1f960:	add	r9, r9, r3
   1f964:	b	1f954 <__assert_fail@plt+0xe250>
   1f968:	mov	ip, #1
   1f96c:	mov	r2, ip
   1f970:	mov	r8, ip
   1f974:	mov	r1, #0
   1f978:	mvn	r0, #0
   1f97c:	add	r3, r2, r1
   1f980:	cmp	r4, r3
   1f984:	add	lr, r6, r0
   1f988:	bls	1f9b8 <__assert_fail@plt+0xe2b4>
   1f98c:	ldrb	lr, [lr, r2]
   1f990:	ldrb	r7, [r6, r3]
   1f994:	cmp	r7, lr
   1f998:	bcs	1fa4c <__assert_fail@plt+0xe348>
   1f99c:	mov	r1, r3
   1f9a0:	mov	r2, #1
   1f9a4:	sub	ip, r3, r0
   1f9a8:	add	r3, r2, r1
   1f9ac:	cmp	r4, r3
   1f9b0:	add	lr, r6, r0
   1f9b4:	bhi	1f98c <__assert_fail@plt+0xe288>
   1f9b8:	mov	r3, #1
   1f9bc:	mov	r8, r3
   1f9c0:	mov	r2, r3
   1f9c4:	mov	r1, #0
   1f9c8:	mvn	r7, #0
   1f9cc:	str	r3, [sp]
   1f9d0:	add	r3, r2, r1
   1f9d4:	cmp	r4, r3
   1f9d8:	add	lr, r6, r7
   1f9dc:	bls	1fa10 <__assert_fail@plt+0xe30c>
   1f9e0:	ldrb	lr, [lr, r2]
   1f9e4:	ldrb	r9, [r6, r3]
   1f9e8:	cmp	r9, lr
   1f9ec:	bls	1fa34 <__assert_fail@plt+0xe330>
   1f9f0:	sub	r2, r3, r7
   1f9f4:	str	r2, [sp]
   1f9f8:	mov	r1, r3
   1f9fc:	mov	r2, #1
   1fa00:	add	r3, r2, r1
   1fa04:	cmp	r4, r3
   1fa08:	add	lr, r6, r7
   1fa0c:	bhi	1f9e0 <__assert_fail@plt+0xe2dc>
   1fa10:	add	r3, r7, #1
   1fa14:	add	r0, r0, #1
   1fa18:	cmp	r3, r0
   1fa1c:	ldr	r2, [sp]
   1fa20:	movcc	r3, r0
   1fa24:	movcc	r2, ip
   1fa28:	str	r2, [sp]
   1fa2c:	mov	r7, r3
   1fa30:	b	1f620 <__assert_fail@plt+0xdf1c>
   1fa34:	beq	1fa64 <__assert_fail@plt+0xe360>
   1fa38:	mov	r7, r1
   1fa3c:	str	r8, [sp]
   1fa40:	add	r1, r1, #1
   1fa44:	mov	r2, #1
   1fa48:	b	1f9d0 <__assert_fail@plt+0xe2cc>
   1fa4c:	beq	1fa7c <__assert_fail@plt+0xe378>
   1fa50:	mov	r0, r1
   1fa54:	mov	ip, r8
   1fa58:	add	r1, r1, #1
   1fa5c:	mov	r2, #1
   1fa60:	b	1f97c <__assert_fail@plt+0xe278>
   1fa64:	ldr	lr, [sp]
   1fa68:	cmp	r2, lr
   1fa6c:	addne	r2, r2, #1
   1fa70:	moveq	r1, r3
   1fa74:	moveq	r2, #1
   1fa78:	b	1f9d0 <__assert_fail@plt+0xe2cc>
   1fa7c:	cmp	r2, ip
   1fa80:	addne	r2, r2, #1
   1fa84:	moveq	r1, r3
   1fa88:	moveq	r2, #1
   1fa8c:	b	1f97c <__assert_fail@plt+0xe278>
   1fa90:	mov	r1, r6
   1fa94:	b	1f7cc <__assert_fail@plt+0xe0c8>
   1fa98:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1fa9c:	sub	sp, sp, #28
   1faa0:	ldrb	r2, [r0]
   1faa4:	cmp	r2, #0
   1faa8:	beq	1ff30 <__assert_fail@plt+0xe82c>
   1faac:	ldrb	ip, [r1]
   1fab0:	cmp	ip, #0
   1fab4:	beq	1fb68 <__assert_fail@plt+0xe464>
   1fab8:	mov	r8, r0
   1fabc:	add	lr, r1, #1
   1fac0:	mov	sl, #1
   1fac4:	b	1fad4 <__assert_fail@plt+0xe3d0>
   1fac8:	ldrb	ip, [lr], #1
   1facc:	cmp	ip, #0
   1fad0:	beq	1fafc <__assert_fail@plt+0xe3f8>
   1fad4:	cmp	ip, r2
   1fad8:	movne	sl, #0
   1fadc:	andeq	sl, sl, #1
   1fae0:	ldrb	r2, [r8, #1]!
   1fae4:	mov	r6, lr
   1fae8:	cmp	r2, #0
   1faec:	bne	1fac8 <__assert_fail@plt+0xe3c4>
   1faf0:	ldrb	r3, [r6]
   1faf4:	cmp	r3, #0
   1faf8:	bne	1fb64 <__assert_fail@plt+0xe460>
   1fafc:	cmp	sl, #0
   1fb00:	bne	1fb68 <__assert_fail@plt+0xe464>
   1fb04:	mov	r4, r1
   1fb08:	mov	r5, r0
   1fb0c:	ldrb	r1, [r1]
   1fb10:	add	r0, r0, #1
   1fb14:	bl	11548 <strchr@plt>
   1fb18:	sub	r4, r6, r4
   1fb1c:	subs	r7, r0, #0
   1fb20:	beq	1fb64 <__assert_fail@plt+0xe460>
   1fb24:	cmp	r4, #1
   1fb28:	beq	1ff28 <__assert_fail@plt+0xe824>
   1fb2c:	add	r0, r5, r4
   1fb30:	cmp	r7, r0
   1fb34:	subls	r1, r0, r7
   1fb38:	movhi	r1, #1
   1fb3c:	cmp	r4, #31
   1fb40:	sub	r6, r6, r4
   1fb44:	mov	r9, r1
   1fb48:	bls	1fb70 <__assert_fail@plt+0xe46c>
   1fb4c:	mov	r3, r4
   1fb50:	mov	r2, r6
   1fb54:	mov	r0, r7
   1fb58:	add	sp, sp, #28
   1fb5c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1fb60:	b	1f5ec <__assert_fail@plt+0xdee8>
   1fb64:	mov	r0, #0
   1fb68:	add	sp, sp, #28
   1fb6c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1fb70:	cmp	r4, #2
   1fb74:	bhi	1fdf8 <__assert_fail@plt+0xe6f4>
   1fb78:	mov	r3, #1
   1fb7c:	sub	r8, r4, #1
   1fb80:	mov	r5, r3
   1fb84:	str	r3, [sp, #4]
   1fb88:	mov	r2, r8
   1fb8c:	add	r1, r6, r5
   1fb90:	mov	r0, r6
   1fb94:	bl	11398 <memcmp@plt>
   1fb98:	subs	fp, r0, #0
   1fb9c:	bne	1fcd4 <__assert_fail@plt+0xe5d0>
   1fba0:	sub	r3, r8, #1
   1fba4:	str	r3, [sp, #8]
   1fba8:	add	r3, r6, r3
   1fbac:	str	r3, [sp, #20]
   1fbb0:	mov	sl, fp
   1fbb4:	sub	r3, r4, r5
   1fbb8:	mov	r0, r9
   1fbbc:	str	r3, [sp, #16]
   1fbc0:	rsb	r3, r8, #1
   1fbc4:	str	r3, [sp, #12]
   1fbc8:	add	r5, r4, sl
   1fbcc:	sub	r2, r5, r0
   1fbd0:	mov	r1, #0
   1fbd4:	add	r0, r7, r0
   1fbd8:	bl	115cc <memchr@plt>
   1fbdc:	adds	r3, r5, #0
   1fbe0:	movne	r3, #1
   1fbe4:	cmp	r0, #0
   1fbe8:	movne	r3, #0
   1fbec:	cmp	r3, #0
   1fbf0:	mov	r0, r3
   1fbf4:	beq	1fb68 <__assert_fail@plt+0xe464>
   1fbf8:	cmp	r8, fp
   1fbfc:	movcs	r3, r8
   1fc00:	movcc	r3, fp
   1fc04:	cmp	r4, r3
   1fc08:	bls	1fc48 <__assert_fail@plt+0xe544>
   1fc0c:	add	r2, r3, sl
   1fc10:	ldrb	r1, [r6, r3]
   1fc14:	ldrb	r0, [r7, r2]
   1fc18:	add	ip, r6, r3
   1fc1c:	add	r2, r7, r2
   1fc20:	cmp	r1, r0
   1fc24:	beq	1fc3c <__assert_fail@plt+0xe538>
   1fc28:	b	1fcc0 <__assert_fail@plt+0xe5bc>
   1fc2c:	ldrb	r0, [ip, #1]!
   1fc30:	ldrb	r1, [r2, #1]!
   1fc34:	cmp	r0, r1
   1fc38:	bne	1fcc0 <__assert_fail@plt+0xe5bc>
   1fc3c:	add	r3, r3, #1
   1fc40:	cmp	r4, r3
   1fc44:	bne	1fc2c <__assert_fail@plt+0xe528>
   1fc48:	ldr	r3, [sp, #8]
   1fc4c:	cmp	r8, fp
   1fc50:	mov	r1, r3
   1fc54:	bls	1ff20 <__assert_fail@plt+0xe81c>
   1fc58:	ldr	ip, [sp, #20]
   1fc5c:	add	r2, sl, r3
   1fc60:	ldrb	r3, [ip]
   1fc64:	ldrb	r0, [r7, r2]
   1fc68:	add	r2, r7, r2
   1fc6c:	cmp	r0, r3
   1fc70:	bne	1ff20 <__assert_fail@plt+0xe81c>
   1fc74:	mov	r0, ip
   1fc78:	sub	r9, fp, #1
   1fc7c:	b	1fc94 <__assert_fail@plt+0xe590>
   1fc80:	ldrb	lr, [r0, #-1]!
   1fc84:	ldrb	ip, [r2, #-1]!
   1fc88:	cmp	lr, ip
   1fc8c:	bne	1fca0 <__assert_fail@plt+0xe59c>
   1fc90:	mov	r1, r3
   1fc94:	sub	r3, r1, #1
   1fc98:	cmp	r3, r9
   1fc9c:	bne	1fc80 <__assert_fail@plt+0xe57c>
   1fca0:	add	fp, fp, #1
   1fca4:	cmp	fp, r1
   1fca8:	bhi	1ff3c <__assert_fail@plt+0xe838>
   1fcac:	ldr	r3, [sp, #4]
   1fcb0:	ldr	fp, [sp, #16]
   1fcb4:	add	sl, sl, r3
   1fcb8:	mov	r0, r5
   1fcbc:	b	1fbc8 <__assert_fail@plt+0xe4c4>
   1fcc0:	ldr	r2, [sp, #12]
   1fcc4:	mov	fp, #0
   1fcc8:	add	sl, r2, sl
   1fccc:	add	sl, sl, r3
   1fcd0:	b	1fcb8 <__assert_fail@plt+0xe5b4>
   1fcd4:	sub	r3, r4, r8
   1fcd8:	cmp	r3, r8
   1fcdc:	movcc	r3, r8
   1fce0:	sub	r2, r8, #1
   1fce4:	add	r3, r3, #1
   1fce8:	str	r3, [sp, #8]
   1fcec:	add	r3, r6, r2
   1fcf0:	str	r3, [sp, #12]
   1fcf4:	add	sl, r6, r8
   1fcf8:	rsb	r3, r8, #1
   1fcfc:	mov	r0, r9
   1fd00:	mov	r5, #0
   1fd04:	mov	r9, r8
   1fd08:	mov	r8, r2
   1fd0c:	str	r3, [sp, #4]
   1fd10:	add	fp, r4, r5
   1fd14:	sub	r2, fp, r0
   1fd18:	mov	r1, #0
   1fd1c:	add	r0, r7, r0
   1fd20:	bl	115cc <memchr@plt>
   1fd24:	cmp	fp, #0
   1fd28:	clz	r0, r0
   1fd2c:	lsr	r0, r0, #5
   1fd30:	moveq	r0, #0
   1fd34:	cmp	r0, #0
   1fd38:	beq	1fb68 <__assert_fail@plt+0xe464>
   1fd3c:	cmp	r4, r9
   1fd40:	bls	1fd88 <__assert_fail@plt+0xe684>
   1fd44:	add	r1, r9, r5
   1fd48:	ldrb	r0, [sl]
   1fd4c:	ldrb	r2, [r7, r1]
   1fd50:	add	r1, r7, r1
   1fd54:	cmp	r0, r2
   1fd58:	movne	r2, r9
   1fd5c:	bne	1fdd8 <__assert_fail@plt+0xe6d4>
   1fd60:	mov	r0, sl
   1fd64:	mov	r2, r9
   1fd68:	b	1fd7c <__assert_fail@plt+0xe678>
   1fd6c:	ldrb	ip, [r0, #1]!
   1fd70:	ldrb	r3, [r1, #1]!
   1fd74:	cmp	ip, r3
   1fd78:	bne	1fdd8 <__assert_fail@plt+0xe6d4>
   1fd7c:	add	r2, r2, #1
   1fd80:	cmp	r4, r2
   1fd84:	bhi	1fd6c <__assert_fail@plt+0xe668>
   1fd88:	cmn	r8, #1
   1fd8c:	beq	1fdcc <__assert_fail@plt+0xe6c8>
   1fd90:	ldr	r3, [sp, #12]
   1fd94:	add	r1, r5, r8
   1fd98:	ldrb	r2, [r3]
   1fd9c:	ldrb	r0, [r7, r1]
   1fda0:	add	r1, r7, r1
   1fda4:	cmp	r0, r2
   1fda8:	bne	1fdec <__assert_fail@plt+0xe6e8>
   1fdac:	mov	r2, r3
   1fdb0:	b	1fdc4 <__assert_fail@plt+0xe6c0>
   1fdb4:	ldrb	r0, [r2, #-1]!
   1fdb8:	ldrb	r3, [r1, #-1]!
   1fdbc:	cmp	r0, r3
   1fdc0:	bne	1fdec <__assert_fail@plt+0xe6e8>
   1fdc4:	cmp	r6, r2
   1fdc8:	bne	1fdb4 <__assert_fail@plt+0xe6b0>
   1fdcc:	add	r0, r7, r5
   1fdd0:	add	sp, sp, #28
   1fdd4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1fdd8:	ldr	r3, [sp, #4]
   1fddc:	add	r5, r3, r5
   1fde0:	add	r5, r5, r2
   1fde4:	mov	r0, fp
   1fde8:	b	1fd10 <__assert_fail@plt+0xe60c>
   1fdec:	ldr	r3, [sp, #8]
   1fdf0:	add	r5, r5, r3
   1fdf4:	b	1fde4 <__assert_fail@plt+0xe6e0>
   1fdf8:	mov	ip, #1
   1fdfc:	mov	r2, ip
   1fe00:	mov	r8, ip
   1fe04:	mov	r1, #0
   1fe08:	mvn	r0, #0
   1fe0c:	add	r3, r2, r1
   1fe10:	cmp	r4, r3
   1fe14:	add	lr, r6, r2
   1fe18:	bls	1fe48 <__assert_fail@plt+0xe744>
   1fe1c:	ldrb	lr, [lr, r0]
   1fe20:	ldrb	r5, [r6, r3]
   1fe24:	cmp	r5, lr
   1fe28:	bcs	1fedc <__assert_fail@plt+0xe7d8>
   1fe2c:	mov	r2, #1
   1fe30:	mov	r1, r3
   1fe34:	sub	ip, r3, r0
   1fe38:	add	r3, r2, r1
   1fe3c:	cmp	r4, r3
   1fe40:	add	lr, r6, r2
   1fe44:	bhi	1fe1c <__assert_fail@plt+0xe718>
   1fe48:	mov	r3, #1
   1fe4c:	mov	r5, r3
   1fe50:	mov	r2, r3
   1fe54:	mov	r1, #0
   1fe58:	mvn	r8, #0
   1fe5c:	str	r3, [sp, #4]
   1fe60:	add	r3, r2, r1
   1fe64:	cmp	r4, r3
   1fe68:	add	lr, r6, r8
   1fe6c:	bls	1fea0 <__assert_fail@plt+0xe79c>
   1fe70:	ldrb	lr, [lr, r2]
   1fe74:	ldrb	sl, [r6, r3]
   1fe78:	cmp	sl, lr
   1fe7c:	bls	1fec4 <__assert_fail@plt+0xe7c0>
   1fe80:	sub	r2, r3, r8
   1fe84:	str	r2, [sp, #4]
   1fe88:	mov	r1, r3
   1fe8c:	mov	r2, #1
   1fe90:	add	r3, r2, r1
   1fe94:	cmp	r4, r3
   1fe98:	add	lr, r6, r8
   1fe9c:	bhi	1fe70 <__assert_fail@plt+0xe76c>
   1fea0:	add	r8, r8, #1
   1fea4:	add	r0, r0, #1
   1fea8:	ldr	r3, [sp, #4]
   1feac:	cmp	r8, r0
   1feb0:	movcc	r3, ip
   1feb4:	str	r3, [sp, #4]
   1feb8:	movcc	r8, r0
   1febc:	mov	r5, r3
   1fec0:	b	1fb88 <__assert_fail@plt+0xe484>
   1fec4:	beq	1fef4 <__assert_fail@plt+0xe7f0>
   1fec8:	mov	r8, r1
   1fecc:	str	r5, [sp, #4]
   1fed0:	add	r1, r1, #1
   1fed4:	mov	r2, #1
   1fed8:	b	1fe60 <__assert_fail@plt+0xe75c>
   1fedc:	beq	1ff0c <__assert_fail@plt+0xe808>
   1fee0:	mov	r0, r1
   1fee4:	mov	ip, r8
   1fee8:	add	r1, r1, #1
   1feec:	mov	r2, #1
   1fef0:	b	1fe0c <__assert_fail@plt+0xe708>
   1fef4:	ldr	lr, [sp, #4]
   1fef8:	cmp	r2, lr
   1fefc:	addne	r2, r2, #1
   1ff00:	moveq	r1, r3
   1ff04:	moveq	r2, #1
   1ff08:	b	1fe60 <__assert_fail@plt+0xe75c>
   1ff0c:	cmp	r2, ip
   1ff10:	addne	r2, r2, #1
   1ff14:	moveq	r1, r3
   1ff18:	moveq	r2, #1
   1ff1c:	b	1fe0c <__assert_fail@plt+0xe708>
   1ff20:	mov	r1, r8
   1ff24:	b	1fca0 <__assert_fail@plt+0xe59c>
   1ff28:	mov	r0, r7
   1ff2c:	b	1fb68 <__assert_fail@plt+0xe464>
   1ff30:	mov	r6, r1
   1ff34:	mov	sl, #1
   1ff38:	b	1faf0 <__assert_fail@plt+0xe3ec>
   1ff3c:	add	r0, r7, sl
   1ff40:	b	1fb68 <__assert_fail@plt+0xe464>
   1ff44:	mov	r0, #1
   1ff48:	b	13f38 <__assert_fail@plt+0x2834>
   1ff4c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ff50:	mov	r4, r1
   1ff54:	sub	sp, sp, #12
   1ff58:	mov	r5, r2
   1ff5c:	str	r2, [sp, #4]
   1ff60:	mov	r7, r3
   1ff64:	mov	sl, r0
   1ff68:	bl	1153c <strlen@plt>
   1ff6c:	ldr	fp, [r4]
   1ff70:	cmp	fp, #0
   1ff74:	beq	20088 <__assert_fail@plt+0xe984>
   1ff78:	cmp	r5, #0
   1ff7c:	mov	r8, r0
   1ff80:	mov	r3, r5
   1ff84:	beq	20030 <__assert_fail@plt+0xe92c>
   1ff88:	mov	r2, #0
   1ff8c:	mov	r5, r2
   1ff90:	mov	r6, r3
   1ff94:	mvn	r9, #0
   1ff98:	str	r2, [sp]
   1ff9c:	mov	r2, r8
   1ffa0:	mov	r1, sl
   1ffa4:	mov	r0, fp
   1ffa8:	bl	116d4 <strncmp@plt>
   1ffac:	cmp	r0, #0
   1ffb0:	mov	r0, fp
   1ffb4:	bne	1fff4 <__assert_fail@plt+0xe8f0>
   1ffb8:	bl	1153c <strlen@plt>
   1ffbc:	ldr	r3, [sp, #4]
   1ffc0:	mov	r2, r7
   1ffc4:	mov	r1, r6
   1ffc8:	cmp	r8, r0
   1ffcc:	mla	r0, r7, r9, r3
   1ffd0:	beq	20020 <__assert_fail@plt+0xe91c>
   1ffd4:	cmn	r9, #1
   1ffd8:	moveq	r9, r5
   1ffdc:	beq	1fff4 <__assert_fail@plt+0xe8f0>
   1ffe0:	bl	11398 <memcmp@plt>
   1ffe4:	ldr	r3, [sp]
   1ffe8:	cmp	r0, #0
   1ffec:	movne	r3, #1
   1fff0:	str	r3, [sp]
   1fff4:	ldr	fp, [r4, #4]!
   1fff8:	add	r5, r5, #1
   1fffc:	cmp	fp, #0
   20000:	add	r6, r6, r7
   20004:	bne	1ff9c <__assert_fail@plt+0xe898>
   20008:	ldr	r3, [sp]
   2000c:	cmp	r3, #0
   20010:	mvnne	r9, #1
   20014:	mov	r0, r9
   20018:	add	sp, sp, #12
   2001c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20020:	mov	r9, r5
   20024:	mov	r0, r9
   20028:	add	sp, sp, #12
   2002c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20030:	mov	r6, r5
   20034:	mvn	r9, #0
   20038:	mov	r2, r8
   2003c:	mov	r1, sl
   20040:	mov	r0, fp
   20044:	bl	116d4 <strncmp@plt>
   20048:	cmp	r0, #0
   2004c:	mov	r0, fp
   20050:	bne	2006c <__assert_fail@plt+0xe968>
   20054:	bl	1153c <strlen@plt>
   20058:	cmp	r8, r0
   2005c:	beq	20020 <__assert_fail@plt+0xe91c>
   20060:	cmn	r9, #1
   20064:	moveq	r9, r5
   20068:	movne	r6, #1
   2006c:	ldr	fp, [r4, #4]!
   20070:	add	r5, r5, #1
   20074:	cmp	fp, #0
   20078:	bne	20038 <__assert_fail@plt+0xe934>
   2007c:	str	r6, [sp]
   20080:	mov	r3, r6
   20084:	b	2000c <__assert_fail@plt+0xe908>
   20088:	mvn	r9, #0
   2008c:	b	20014 <__assert_fail@plt+0xe910>
   20090:	push	{r4, r5, r6, lr}
   20094:	mov	r6, r0
   20098:	ldr	r0, [r1]
   2009c:	cmp	r0, #0
   200a0:	beq	200d8 <__assert_fail@plt+0xe9d4>
   200a4:	mov	r4, r1
   200a8:	mov	r5, #0
   200ac:	b	200c0 <__assert_fail@plt+0xe9bc>
   200b0:	ldr	r0, [r4, #4]!
   200b4:	add	r5, r5, #1
   200b8:	cmp	r0, #0
   200bc:	beq	200d8 <__assert_fail@plt+0xe9d4>
   200c0:	mov	r1, r6
   200c4:	bl	11320 <strcmp@plt>
   200c8:	cmp	r0, #0
   200cc:	bne	200b0 <__assert_fail@plt+0xe9ac>
   200d0:	mov	r0, r5
   200d4:	pop	{r4, r5, r6, pc}
   200d8:	mvn	r0, #0
   200dc:	pop	{r4, r5, r6, pc}
   200e0:	cmn	r2, #1
   200e4:	push	{r4, r5, r6, lr}
   200e8:	mov	r2, #5
   200ec:	sub	sp, sp, #8
   200f0:	mov	r4, r1
   200f4:	mov	r5, r0
   200f8:	ldreq	r1, [pc, #76]	; 2014c <__assert_fail@plt+0xea48>
   200fc:	ldrne	r1, [pc, #76]	; 20150 <__assert_fail@plt+0xea4c>
   20100:	mov	r0, #0
   20104:	bl	113bc <dcgettext@plt>
   20108:	mov	r2, r4
   2010c:	mov	r1, #8
   20110:	mov	r6, r0
   20114:	mov	r0, #0
   20118:	bl	1b4e8 <__assert_fail@plt+0x9de4>
   2011c:	mov	r1, r5
   20120:	mov	r4, r0
   20124:	mov	r0, #1
   20128:	bl	1d084 <__assert_fail@plt+0xb980>
   2012c:	mov	r1, #0
   20130:	mov	r3, r4
   20134:	mov	r2, r6
   20138:	str	r0, [sp]
   2013c:	mov	r0, r1
   20140:	bl	11494 <error@plt>
   20144:	add	sp, sp, #8
   20148:	pop	{r4, r5, r6, pc}
   2014c:	andeq	r3, r2, r4, lsl #2
   20150:	andeq	r3, r2, r0, lsr #2
   20154:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20158:	mov	r6, r0
   2015c:	ldr	r9, [pc, #232]	; 2024c <__assert_fail@plt+0xeb48>
   20160:	mov	r4, r1
   20164:	mov	r7, r2
   20168:	ldr	r1, [pc, #224]	; 20250 <__assert_fail@plt+0xeb4c>
   2016c:	mov	r2, #5
   20170:	mov	r0, #0
   20174:	bl	113bc <dcgettext@plt>
   20178:	ldr	r1, [r9]
   2017c:	bl	112f0 <fputs_unlocked@plt>
   20180:	ldr	fp, [r6]
   20184:	cmp	fp, #0
   20188:	movne	r8, #0
   2018c:	movne	r5, r8
   20190:	movne	sl, #1
   20194:	bne	201d4 <__assert_fail@plt+0xead0>
   20198:	b	20218 <__assert_fail@plt+0xeb14>
   2019c:	mov	r0, fp
   201a0:	ldr	r8, [r9]
   201a4:	bl	1d238 <__assert_fail@plt+0xbb34>
   201a8:	ldr	r2, [pc, #164]	; 20254 <__assert_fail@plt+0xeb50>
   201ac:	mov	r1, sl
   201b0:	mov	r3, r0
   201b4:	mov	r0, r8
   201b8:	bl	115c0 <__fprintf_chk@plt>
   201bc:	mov	r8, r4
   201c0:	ldr	fp, [r6, #4]!
   201c4:	add	r5, r5, #1
   201c8:	cmp	fp, #0
   201cc:	add	r4, r4, r7
   201d0:	beq	20218 <__assert_fail@plt+0xeb14>
   201d4:	cmp	r5, #0
   201d8:	mov	r1, r4
   201dc:	mov	r2, r7
   201e0:	mov	r0, r8
   201e4:	beq	2019c <__assert_fail@plt+0xea98>
   201e8:	bl	11398 <memcmp@plt>
   201ec:	cmp	r0, #0
   201f0:	bne	2019c <__assert_fail@plt+0xea98>
   201f4:	mov	r0, fp
   201f8:	ldr	fp, [r9]
   201fc:	bl	1d238 <__assert_fail@plt+0xbb34>
   20200:	ldr	r2, [pc, #80]	; 20258 <__assert_fail@plt+0xeb54>
   20204:	mov	r1, sl
   20208:	mov	r3, r0
   2020c:	mov	r0, fp
   20210:	bl	115c0 <__fprintf_chk@plt>
   20214:	b	201c0 <__assert_fail@plt+0xeabc>
   20218:	ldr	r0, [r9]
   2021c:	ldr	r3, [r0, #20]
   20220:	ldr	r2, [r0, #24]
   20224:	cmp	r3, r2
   20228:	bcs	20240 <__assert_fail@plt+0xeb3c>
   2022c:	add	r1, r3, #1
   20230:	mov	r2, #10
   20234:	str	r1, [r0, #20]
   20238:	strb	r2, [r3]
   2023c:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20240:	mov	r1, #10
   20244:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20248:	b	11608 <__overflow@plt>
   2024c:	andeq	r4, r3, r0, lsr r3
   20250:	andeq	r3, r2, r0, asr #2
   20254:	andeq	r3, r2, r8, asr r1
   20258:	andeq	r3, r2, r0, ror #2
   2025c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20260:	sub	sp, sp, #36	; 0x24
   20264:	mov	r6, r1
   20268:	ldrb	ip, [sp, #80]	; 0x50
   2026c:	str	r0, [sp, #28]
   20270:	str	r2, [sp, #24]
   20274:	cmp	ip, #0
   20278:	str	ip, [sp, #20]
   2027c:	str	r3, [sp, #12]
   20280:	ldr	r7, [sp, #72]	; 0x48
   20284:	bne	2033c <__assert_fail@plt+0xec38>
   20288:	ldr	r0, [r2]
   2028c:	cmp	r0, #0
   20290:	movne	sl, ip
   20294:	movne	r4, r2
   20298:	bne	20320 <__assert_fail@plt+0xec1c>
   2029c:	mov	r2, #5
   202a0:	ldr	r1, [pc, #512]	; 204a8 <__assert_fail@plt+0xeda4>
   202a4:	mov	r0, #0
   202a8:	bl	113bc <dcgettext@plt>
   202ac:	mov	r4, r0
   202b0:	mov	r2, r6
   202b4:	mov	r1, #8
   202b8:	mov	r0, #0
   202bc:	bl	1b4e8 <__assert_fail@plt+0x9de4>
   202c0:	ldr	r1, [sp, #28]
   202c4:	mvn	sl, #0
   202c8:	mov	r5, r0
   202cc:	mov	r0, #1
   202d0:	bl	1d084 <__assert_fail@plt+0xb980>
   202d4:	mov	r1, #0
   202d8:	mov	r3, r5
   202dc:	mov	r2, r4
   202e0:	str	r0, [sp]
   202e4:	mov	r0, r1
   202e8:	bl	11494 <error@plt>
   202ec:	ldr	r0, [sp, #24]
   202f0:	mov	r2, r7
   202f4:	ldr	r1, [sp, #12]
   202f8:	bl	20154 <__assert_fail@plt+0xea50>
   202fc:	ldr	r3, [sp, #76]	; 0x4c
   20300:	blx	r3
   20304:	mov	r0, sl
   20308:	add	sp, sp, #36	; 0x24
   2030c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20310:	ldr	r0, [r4, #4]!
   20314:	add	sl, sl, #1
   20318:	cmp	r0, #0
   2031c:	beq	2029c <__assert_fail@plt+0xeb98>
   20320:	mov	r1, r6
   20324:	bl	11320 <strcmp@plt>
   20328:	cmp	r0, #0
   2032c:	bne	20310 <__assert_fail@plt+0xec0c>
   20330:	mov	r0, sl
   20334:	add	sp, sp, #36	; 0x24
   20338:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2033c:	mov	r0, r1
   20340:	bl	1153c <strlen@plt>
   20344:	ldr	r3, [sp, #24]
   20348:	ldr	fp, [r3]
   2034c:	cmp	fp, #0
   20350:	mov	r9, r0
   20354:	beq	2029c <__assert_fail@plt+0xeb98>
   20358:	ldr	r2, [sp, #12]
   2035c:	cmp	r2, #0
   20360:	beq	2041c <__assert_fail@plt+0xed18>
   20364:	mov	r1, #0
   20368:	mov	r4, r1
   2036c:	mov	r8, r3
   20370:	mov	r5, r2
   20374:	mvn	sl, #0
   20378:	str	r1, [sp, #16]
   2037c:	mov	r2, r9
   20380:	mov	r1, r6
   20384:	mov	r0, fp
   20388:	bl	116d4 <strncmp@plt>
   2038c:	cmp	r0, #0
   20390:	mov	r0, fp
   20394:	bne	203d8 <__assert_fail@plt+0xecd4>
   20398:	bl	1153c <strlen@plt>
   2039c:	ldr	r3, [sp, #12]
   203a0:	mov	r2, r7
   203a4:	mov	r1, r5
   203a8:	cmp	r9, r0
   203ac:	mla	r0, r7, sl, r3
   203b0:	beq	2040c <__assert_fail@plt+0xed08>
   203b4:	cmn	sl, #1
   203b8:	moveq	sl, r4
   203bc:	beq	203d8 <__assert_fail@plt+0xecd4>
   203c0:	bl	11398 <memcmp@plt>
   203c4:	ldr	r2, [sp, #20]
   203c8:	ldr	r3, [sp, #16]
   203cc:	cmp	r0, #0
   203d0:	movne	r3, r2
   203d4:	str	r3, [sp, #16]
   203d8:	ldr	fp, [r8, #4]!
   203dc:	add	r4, r4, #1
   203e0:	cmp	fp, #0
   203e4:	add	r5, r5, r7
   203e8:	bne	2037c <__assert_fail@plt+0xec78>
   203ec:	ldr	r3, [sp, #16]
   203f0:	cmp	r3, #0
   203f4:	bne	20490 <__assert_fail@plt+0xed8c>
   203f8:	cmn	sl, #1
   203fc:	beq	2029c <__assert_fail@plt+0xeb98>
   20400:	mov	r0, sl
   20404:	add	sp, sp, #36	; 0x24
   20408:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2040c:	mov	sl, r4
   20410:	mov	r0, sl
   20414:	add	sp, sp, #36	; 0x24
   20418:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2041c:	mov	r5, r3
   20420:	ldr	r3, [sp, #12]
   20424:	str	r7, [sp, #72]	; 0x48
   20428:	mov	r7, fp
   2042c:	ldr	fp, [sp, #20]
   20430:	mov	r8, r3
   20434:	mvn	sl, #0
   20438:	mov	r4, r3
   2043c:	mov	r2, r9
   20440:	mov	r1, r6
   20444:	mov	r0, r7
   20448:	bl	116d4 <strncmp@plt>
   2044c:	cmp	r0, #0
   20450:	mov	r0, r7
   20454:	bne	20470 <__assert_fail@plt+0xed6c>
   20458:	bl	1153c <strlen@plt>
   2045c:	cmp	r9, r0
   20460:	beq	2040c <__assert_fail@plt+0xed08>
   20464:	cmn	sl, #1
   20468:	moveq	sl, r4
   2046c:	movne	r8, fp
   20470:	ldr	r7, [r5, #4]!
   20474:	add	r4, r4, #1
   20478:	cmp	r7, #0
   2047c:	bne	2043c <__assert_fail@plt+0xed38>
   20480:	str	r8, [sp, #16]
   20484:	ldr	r7, [sp, #72]	; 0x48
   20488:	mov	r3, r8
   2048c:	b	203f0 <__assert_fail@plt+0xecec>
   20490:	mov	r2, #5
   20494:	ldr	r1, [pc, #16]	; 204ac <__assert_fail@plt+0xeda8>
   20498:	mov	r0, #0
   2049c:	bl	113bc <dcgettext@plt>
   204a0:	mov	r4, r0
   204a4:	b	202b0 <__assert_fail@plt+0xebac>
   204a8:	andeq	r3, r2, r4, lsl #2
   204ac:	andeq	r3, r2, r0, lsr #2
   204b0:	push	{r4, r5, r6, r7, r8, lr}
   204b4:	ldr	r7, [r1]
   204b8:	cmp	r7, #0
   204bc:	beq	204fc <__assert_fail@plt+0xedf8>
   204c0:	mov	r6, r3
   204c4:	mov	r8, r0
   204c8:	mov	r4, r2
   204cc:	mov	r5, r1
   204d0:	b	204e0 <__assert_fail@plt+0xeddc>
   204d4:	ldr	r7, [r5, #4]!
   204d8:	cmp	r7, #0
   204dc:	beq	204fc <__assert_fail@plt+0xedf8>
   204e0:	mov	r1, r4
   204e4:	mov	r2, r6
   204e8:	mov	r0, r8
   204ec:	bl	11398 <memcmp@plt>
   204f0:	add	r4, r4, r6
   204f4:	cmp	r0, #0
   204f8:	bne	204d4 <__assert_fail@plt+0xedd0>
   204fc:	mov	r0, r7
   20500:	pop	{r4, r5, r6, r7, r8, pc}
   20504:	ldrb	r3, [r0]
   20508:	cmp	r3, #47	; 0x2f
   2050c:	bne	2051c <__assert_fail@plt+0xee18>
   20510:	ldrb	r3, [r0, #1]!
   20514:	cmp	r3, #47	; 0x2f
   20518:	beq	20510 <__assert_fail@plt+0xee0c>
   2051c:	cmp	r3, #0
   20520:	bxeq	lr
   20524:	mov	r2, #0
   20528:	push	{lr}		; (str lr, [sp, #-4]!)
   2052c:	mov	ip, r2
   20530:	mov	r1, r0
   20534:	mov	lr, #1
   20538:	cmp	r3, #47	; 0x2f
   2053c:	moveq	r2, lr
   20540:	beq	20550 <__assert_fail@plt+0xee4c>
   20544:	cmp	r2, #0
   20548:	movne	r0, r1
   2054c:	movne	r2, ip
   20550:	ldrb	r3, [r1, #1]!
   20554:	cmp	r3, #0
   20558:	bne	20538 <__assert_fail@plt+0xee34>
   2055c:	pop	{pc}		; (ldr pc, [sp], #4)
   20560:	push	{r4, lr}
   20564:	mov	r4, r0
   20568:	bl	1153c <strlen@plt>
   2056c:	cmp	r0, #1
   20570:	popls	{r4, pc}
   20574:	sub	r3, r0, #1
   20578:	add	r2, r4, r3
   2057c:	ldrb	r1, [r4, r3]
   20580:	cmp	r1, #47	; 0x2f
   20584:	popne	{r4, pc}
   20588:	cmp	r3, #1
   2058c:	beq	205a0 <__assert_fail@plt+0xee9c>
   20590:	ldrb	r1, [r2, #-1]!
   20594:	sub	r0, r3, #1
   20598:	cmp	r1, #47	; 0x2f
   2059c:	beq	205a8 <__assert_fail@plt+0xeea4>
   205a0:	mov	r0, r3
   205a4:	pop	{r4, pc}
   205a8:	mov	r3, r0
   205ac:	b	20588 <__assert_fail@plt+0xee84>
   205b0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   205b4:	sub	sp, sp, #12
   205b8:	mov	r9, r0
   205bc:	bl	11404 <chdir@plt>
   205c0:	subs	r4, r0, #0
   205c4:	beq	205dc <__assert_fail@plt+0xeed8>
   205c8:	bl	1156c <__errno_location@plt>
   205cc:	ldr	r3, [r0]
   205d0:	str	r0, [sp, #4]
   205d4:	cmp	r3, #36	; 0x24
   205d8:	beq	205e8 <__assert_fail@plt+0xeee4>
   205dc:	mov	r0, r4
   205e0:	add	sp, sp, #12
   205e4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   205e8:	mov	r0, r9
   205ec:	bl	1153c <strlen@plt>
   205f0:	subs	r6, r0, #0
   205f4:	beq	20890 <__assert_fail@plt+0xf18c>
   205f8:	cmp	r6, #4096	; 0x1000
   205fc:	bcc	208a4 <__assert_fail@plt+0xf1a0>
   20600:	ldr	r1, [pc, #688]	; 208b8 <__assert_fail@plt+0xf1b4>
   20604:	mov	r0, r9
   20608:	bl	116f8 <strspn@plt>
   2060c:	cmp	r0, #2
   20610:	mov	r4, r0
   20614:	beq	20720 <__assert_fail@plt+0xf01c>
   20618:	cmp	r0, #0
   2061c:	moveq	r4, r9
   20620:	mvneq	r5, #99	; 0x63
   20624:	bne	207fc <__assert_fail@plt+0xf0f8>
   20628:	ldrb	r3, [r4]
   2062c:	cmp	r3, #47	; 0x2f
   20630:	beq	2087c <__assert_fail@plt+0xf178>
   20634:	add	r9, r9, r6
   20638:	cmp	r4, r9
   2063c:	bhi	20868 <__assert_fail@plt+0xf164>
   20640:	ldr	r6, [pc, #628]	; 208bc <__assert_fail@plt+0xf1b8>
   20644:	sub	r3, r9, r4
   20648:	cmp	r3, r6
   2064c:	movle	r8, r5
   20650:	ble	20774 <__assert_fail@plt+0xf070>
   20654:	mov	sl, #4096	; 0x1000
   20658:	mov	r7, #47	; 0x2f
   2065c:	b	2069c <__assert_fail@plt+0xef98>
   20660:	cmp	r5, #0
   20664:	blt	20678 <__assert_fail@plt+0xef74>
   20668:	mov	r0, r5
   2066c:	bl	116ec <close@plt>
   20670:	cmp	r0, #0
   20674:	bne	20864 <__assert_fail@plt+0xf160>
   20678:	strb	r7, [fp], #1
   2067c:	ldr	r1, [pc, #564]	; 208b8 <__assert_fail@plt+0xf1b4>
   20680:	mov	r0, fp
   20684:	bl	116f8 <strspn@plt>
   20688:	mov	r5, r8
   2068c:	add	r4, fp, r0
   20690:	sub	r3, r9, r4
   20694:	cmp	r3, r6
   20698:	ble	20774 <__assert_fail@plt+0xf070>
   2069c:	mov	r2, sl
   206a0:	mov	r1, r7
   206a4:	mov	r0, r4
   206a8:	bl	11560 <memrchr@plt>
   206ac:	subs	fp, r0, #0
   206b0:	beq	207c8 <__assert_fail@plt+0xf0c4>
   206b4:	sub	r3, fp, r4
   206b8:	cmp	r3, r6
   206bc:	mov	r3, #0
   206c0:	strb	r3, [fp]
   206c4:	bgt	20850 <__assert_fail@plt+0xf14c>
   206c8:	mov	r1, r4
   206cc:	mov	r2, #18688	; 0x4900
   206d0:	mov	r0, r5
   206d4:	bl	11554 <openat64@plt>
   206d8:	subs	r8, r0, #0
   206dc:	bge	20660 <__assert_fail@plt+0xef5c>
   206e0:	mov	r2, #47	; 0x2f
   206e4:	strb	r2, [fp]
   206e8:	ldr	r3, [sp, #4]
   206ec:	cmp	r5, #0
   206f0:	ldr	r4, [r3]
   206f4:	blt	20708 <__assert_fail@plt+0xf004>
   206f8:	mov	r0, r5
   206fc:	bl	116ec <close@plt>
   20700:	cmp	r0, #0
   20704:	bne	20864 <__assert_fail@plt+0xf160>
   20708:	ldr	r3, [sp, #4]
   2070c:	str	r4, [r3]
   20710:	mvn	r4, #0
   20714:	mov	r0, r4
   20718:	add	sp, sp, #12
   2071c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20720:	sub	r2, r6, #3
   20724:	mov	r1, #47	; 0x2f
   20728:	add	r0, r9, #3
   2072c:	bl	115cc <memchr@plt>
   20730:	subs	r4, r0, #0
   20734:	beq	207f4 <__assert_fail@plt+0xf0f0>
   20738:	mov	r3, #0
   2073c:	strb	r3, [r4]
   20740:	mov	r2, #18688	; 0x4900
   20744:	mov	r1, r9
   20748:	mvn	r0, #99	; 0x63
   2074c:	bl	11554 <openat64@plt>
   20750:	mov	r3, #47	; 0x2f
   20754:	subs	r5, r0, #0
   20758:	blt	20840 <__assert_fail@plt+0xf13c>
   2075c:	strb	r3, [r4], #1
   20760:	ldr	r1, [pc, #336]	; 208b8 <__assert_fail@plt+0xf1b4>
   20764:	mov	r0, r4
   20768:	bl	116f8 <strspn@plt>
   2076c:	add	r4, r4, r0
   20770:	b	20628 <__assert_fail@plt+0xef24>
   20774:	cmp	r9, r4
   20778:	bls	207dc <__assert_fail@plt+0xf0d8>
   2077c:	mov	r1, r4
   20780:	mov	r2, #18688	; 0x4900
   20784:	mov	r0, r8
   20788:	bl	11554 <openat64@plt>
   2078c:	subs	r5, r0, #0
   20790:	blt	207ec <__assert_fail@plt+0xf0e8>
   20794:	cmp	r8, #0
   20798:	blt	207ac <__assert_fail@plt+0xf0a8>
   2079c:	mov	r0, r8
   207a0:	bl	116ec <close@plt>
   207a4:	cmp	r0, #0
   207a8:	bne	20864 <__assert_fail@plt+0xf160>
   207ac:	mov	r0, r5
   207b0:	bl	11674 <fchdir@plt>
   207b4:	cmp	r0, #0
   207b8:	beq	20828 <__assert_fail@plt+0xf124>
   207bc:	ldr	r3, [sp, #4]
   207c0:	ldr	r4, [r3]
   207c4:	b	206f8 <__assert_fail@plt+0xeff4>
   207c8:	ldr	r2, [sp, #4]
   207cc:	mov	r3, #36	; 0x24
   207d0:	mvn	r4, #0
   207d4:	str	r3, [r2]
   207d8:	b	205dc <__assert_fail@plt+0xeed8>
   207dc:	mov	r0, r8
   207e0:	bl	11674 <fchdir@plt>
   207e4:	cmp	r0, #0
   207e8:	beq	2081c <__assert_fail@plt+0xf118>
   207ec:	mov	r5, r8
   207f0:	b	206e8 <__assert_fail@plt+0xefe4>
   207f4:	mvn	r4, #0
   207f8:	b	205dc <__assert_fail@plt+0xeed8>
   207fc:	mov	r2, #18688	; 0x4900
   20800:	ldr	r1, [pc, #176]	; 208b8 <__assert_fail@plt+0xf1b4>
   20804:	mvn	r0, #99	; 0x63
   20808:	bl	11554 <openat64@plt>
   2080c:	subs	r5, r0, #0
   20810:	blt	20844 <__assert_fail@plt+0xf140>
   20814:	add	r4, r9, r4
   20818:	b	20628 <__assert_fail@plt+0xef24>
   2081c:	cmp	r8, #0
   20820:	blt	20838 <__assert_fail@plt+0xf134>
   20824:	mov	r5, r8
   20828:	mov	r0, r5
   2082c:	bl	116ec <close@plt>
   20830:	cmp	r0, #0
   20834:	bne	20864 <__assert_fail@plt+0xf160>
   20838:	mov	r4, #0
   2083c:	b	205dc <__assert_fail@plt+0xeed8>
   20840:	strb	r3, [r4]
   20844:	ldr	r3, [sp, #4]
   20848:	ldr	r4, [r3]
   2084c:	b	20708 <__assert_fail@plt+0xf004>
   20850:	ldr	r3, [pc, #104]	; 208c0 <__assert_fail@plt+0xf1bc>
   20854:	mov	r2, #179	; 0xb3
   20858:	ldr	r1, [pc, #100]	; 208c4 <__assert_fail@plt+0xf1c0>
   2085c:	ldr	r0, [pc, #100]	; 208c8 <__assert_fail@plt+0xf1c4>
   20860:	bl	11704 <__assert_fail@plt>
   20864:	bl	11738 <__assert_fail@plt+0x34>
   20868:	ldr	r3, [pc, #80]	; 208c0 <__assert_fail@plt+0xf1bc>
   2086c:	mov	r2, #163	; 0xa3
   20870:	ldr	r1, [pc, #76]	; 208c4 <__assert_fail@plt+0xf1c0>
   20874:	ldr	r0, [pc, #80]	; 208cc <__assert_fail@plt+0xf1c8>
   20878:	bl	11704 <__assert_fail@plt>
   2087c:	ldr	r3, [pc, #60]	; 208c0 <__assert_fail@plt+0xf1bc>
   20880:	mov	r2, #162	; 0xa2
   20884:	ldr	r1, [pc, #56]	; 208c4 <__assert_fail@plt+0xf1c0>
   20888:	ldr	r0, [pc, #64]	; 208d0 <__assert_fail@plt+0xf1cc>
   2088c:	bl	11704 <__assert_fail@plt>
   20890:	ldr	r3, [pc, #40]	; 208c0 <__assert_fail@plt+0xf1bc>
   20894:	mov	r2, #126	; 0x7e
   20898:	ldr	r1, [pc, #36]	; 208c4 <__assert_fail@plt+0xf1c0>
   2089c:	ldr	r0, [pc, #48]	; 208d4 <__assert_fail@plt+0xf1d0>
   208a0:	bl	11704 <__assert_fail@plt>
   208a4:	ldr	r3, [pc, #20]	; 208c0 <__assert_fail@plt+0xf1bc>
   208a8:	mov	r2, #127	; 0x7f
   208ac:	ldr	r1, [pc, #16]	; 208c4 <__assert_fail@plt+0xf1c0>
   208b0:	ldr	r0, [pc, #32]	; 208d8 <__assert_fail@plt+0xf1d4>
   208b4:	bl	11704 <__assert_fail@plt>
   208b8:	strdeq	r2, [r2], -r0
   208bc:	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   208c0:	andeq	r3, r2, r4, ror r1
   208c4:	andeq	r3, r2, r0, lsl #3
   208c8:	ldrdeq	r3, [r2], -r4
   208cc:	andeq	r3, r2, r4, asr #3
   208d0:			; <UNDEFINED> instruction: 0x000231b8
   208d4:	andeq	r3, r2, r4, lsr #3
   208d8:	andeq	r3, r2, ip, lsr #3
   208dc:	push	{r4, r5, r6, lr}
   208e0:	mov	r4, r0
   208e4:	bl	11470 <__fpending@plt>
   208e8:	ldr	r5, [r4]
   208ec:	and	r5, r5, #32
   208f0:	mov	r6, r0
   208f4:	mov	r0, r4
   208f8:	bl	20958 <__assert_fail@plt+0xf254>
   208fc:	cmp	r5, #0
   20900:	mov	r4, r0
   20904:	bne	20924 <__assert_fail@plt+0xf220>
   20908:	cmp	r0, #0
   2090c:	beq	2091c <__assert_fail@plt+0xf218>
   20910:	cmp	r6, #0
   20914:	beq	20940 <__assert_fail@plt+0xf23c>
   20918:	mvn	r4, #0
   2091c:	mov	r0, r4
   20920:	pop	{r4, r5, r6, pc}
   20924:	cmp	r0, #0
   20928:	bne	20918 <__assert_fail@plt+0xf214>
   2092c:	bl	1156c <__errno_location@plt>
   20930:	str	r4, [r0]
   20934:	mvn	r4, #0
   20938:	mov	r0, r4
   2093c:	pop	{r4, r5, r6, pc}
   20940:	bl	1156c <__errno_location@plt>
   20944:	ldr	r4, [r0]
   20948:	subs	r4, r4, #9
   2094c:	mvnne	r4, #0
   20950:	mov	r0, r4
   20954:	pop	{r4, r5, r6, pc}
   20958:	push	{r4, r5, lr}
   2095c:	sub	sp, sp, #12
   20960:	mov	r4, r0
   20964:	bl	115b4 <fileno@plt>
   20968:	cmp	r0, #0
   2096c:	mov	r0, r4
   20970:	blt	209ec <__assert_fail@plt+0xf2e8>
   20974:	bl	114e8 <__freading@plt>
   20978:	cmp	r0, #0
   2097c:	bne	209b8 <__assert_fail@plt+0xf2b4>
   20980:	mov	r0, r4
   20984:	bl	20a30 <__assert_fail@plt+0xf32c>
   20988:	cmp	r0, #0
   2098c:	beq	209e8 <__assert_fail@plt+0xf2e4>
   20990:	bl	1156c <__errno_location@plt>
   20994:	mov	r5, r0
   20998:	mov	r0, r4
   2099c:	ldr	r4, [r5]
   209a0:	bl	115d8 <fclose@plt>
   209a4:	cmp	r4, #0
   209a8:	mvnne	r0, #0
   209ac:	strne	r4, [r5]
   209b0:	add	sp, sp, #12
   209b4:	pop	{r4, r5, pc}
   209b8:	mov	r0, r4
   209bc:	bl	115b4 <fileno@plt>
   209c0:	mov	r3, #1
   209c4:	str	r3, [sp]
   209c8:	mov	r2, #0
   209cc:	mov	r3, #0
   209d0:	bl	1144c <lseek64@plt>
   209d4:	mvn	r3, #0
   209d8:	mvn	r2, #0
   209dc:	cmp	r1, r3
   209e0:	cmpeq	r0, r2
   209e4:	bne	20980 <__assert_fail@plt+0xf27c>
   209e8:	mov	r0, r4
   209ec:	add	sp, sp, #12
   209f0:	pop	{r4, r5, lr}
   209f4:	b	115d8 <fclose@plt>
   209f8:	push	{r1, r2, r3}
   209fc:	push	{lr}		; (str lr, [sp, #-4]!)
   20a00:	sub	sp, sp, #8
   20a04:	ldr	r1, [sp, #12]
   20a08:	ands	r2, r1, #64	; 0x40
   20a0c:	addne	r3, sp, #16
   20a10:	ldrne	r2, [sp, #16]
   20a14:	strne	r3, [sp, #4]
   20a18:	bl	114ac <open64@plt>
   20a1c:	bl	20ce0 <__assert_fail@plt+0xf5dc>
   20a20:	add	sp, sp, #8
   20a24:	pop	{lr}		; (ldr lr, [sp], #4)
   20a28:	add	sp, sp, #12
   20a2c:	bx	lr
   20a30:	push	{r4, lr}
   20a34:	subs	r4, r0, #0
   20a38:	sub	sp, sp, #8
   20a3c:	beq	20a58 <__assert_fail@plt+0xf354>
   20a40:	bl	114e8 <__freading@plt>
   20a44:	cmp	r0, #0
   20a48:	beq	20a58 <__assert_fail@plt+0xf354>
   20a4c:	ldr	r3, [r4]
   20a50:	tst	r3, #256	; 0x100
   20a54:	bne	20a68 <__assert_fail@plt+0xf364>
   20a58:	mov	r0, r4
   20a5c:	add	sp, sp, #8
   20a60:	pop	{r4, lr}
   20a64:	b	1132c <fflush@plt>
   20a68:	mov	r3, #1
   20a6c:	str	r3, [sp]
   20a70:	mov	r2, #0
   20a74:	mov	r3, #0
   20a78:	mov	r0, r4
   20a7c:	bl	20a90 <__assert_fail@plt+0xf38c>
   20a80:	mov	r0, r4
   20a84:	add	sp, sp, #8
   20a88:	pop	{r4, lr}
   20a8c:	b	1132c <fflush@plt>
   20a90:	push	{r4, r5, r6, r7, r8, lr}
   20a94:	sub	sp, sp, #8
   20a98:	ldmib	r0, {ip, lr}
   20a9c:	mov	r4, r0
   20aa0:	ldr	r5, [sp, #32]
   20aa4:	cmp	lr, ip
   20aa8:	beq	20ac0 <__assert_fail@plt+0xf3bc>
   20aac:	str	r5, [sp, #32]
   20ab0:	mov	r0, r4
   20ab4:	add	sp, sp, #8
   20ab8:	pop	{r4, r5, r6, r7, r8, lr}
   20abc:	b	115e4 <fseeko64@plt>
   20ac0:	ldr	lr, [r0, #20]
   20ac4:	ldr	ip, [r0, #16]
   20ac8:	cmp	lr, ip
   20acc:	bne	20aac <__assert_fail@plt+0xf3a8>
   20ad0:	ldr	r8, [r0, #36]	; 0x24
   20ad4:	cmp	r8, #0
   20ad8:	bne	20aac <__assert_fail@plt+0xf3a8>
   20adc:	mov	r6, r2
   20ae0:	mov	r7, r3
   20ae4:	bl	115b4 <fileno@plt>
   20ae8:	mov	r2, r6
   20aec:	mov	r3, r7
   20af0:	str	r5, [sp]
   20af4:	bl	1144c <lseek64@plt>
   20af8:	mvn	r3, #0
   20afc:	mvn	r2, #0
   20b00:	cmp	r1, r3
   20b04:	cmpeq	r0, r2
   20b08:	beq	20b28 <__assert_fail@plt+0xf424>
   20b0c:	ldr	r3, [r4]
   20b10:	strd	r0, [r4, #80]	; 0x50
   20b14:	mov	r0, r8
   20b18:	bic	r3, r3, #16
   20b1c:	str	r3, [r4]
   20b20:	add	sp, sp, #8
   20b24:	pop	{r4, r5, r6, r7, r8, pc}
   20b28:	mvn	r0, #0
   20b2c:	b	20b20 <__assert_fail@plt+0xf41c>
   20b30:	push	{lr}		; (str lr, [sp, #-4]!)
   20b34:	sub	sp, sp, #268	; 0x10c
   20b38:	add	r1, sp, #4
   20b3c:	ldr	r2, [pc, #60]	; 20b80 <__assert_fail@plt+0xf47c>
   20b40:	bl	20c48 <__assert_fail@plt+0xf544>
   20b44:	cmp	r0, #0
   20b48:	movne	r0, #0
   20b4c:	bne	20b78 <__assert_fail@plt+0xf474>
   20b50:	ldr	r1, [pc, #44]	; 20b84 <__assert_fail@plt+0xf480>
   20b54:	add	r0, sp, #4
   20b58:	bl	11320 <strcmp@plt>
   20b5c:	cmp	r0, #0
   20b60:	beq	20b78 <__assert_fail@plt+0xf474>
   20b64:	add	r0, sp, #4
   20b68:	ldr	r1, [pc, #24]	; 20b88 <__assert_fail@plt+0xf484>
   20b6c:	bl	11320 <strcmp@plt>
   20b70:	adds	r0, r0, #0
   20b74:	movne	r0, #1
   20b78:	add	sp, sp, #268	; 0x10c
   20b7c:	pop	{pc}		; (ldr pc, [sp], #4)
   20b80:	andeq	r0, r0, r1, lsl #2
   20b84:	andeq	r3, r2, r8, ror #3
   20b88:	andeq	r3, r2, ip, ror #3
   20b8c:	ldrb	r3, [r0]
   20b90:	cmp	r3, #0
   20b94:	beq	20bc0 <__assert_fail@plt+0xf4bc>
   20b98:	mov	r2, r0
   20b9c:	mov	r0, #0
   20ba0:	push	{r4, lr}
   20ba4:	add	r0, r3, r0, ror #23
   20ba8:	ldrb	r3, [r2, #1]!
   20bac:	cmp	r3, #0
   20bb0:	bne	20ba4 <__assert_fail@plt+0xf4a0>
   20bb4:	bl	210e8 <__assert_fail@plt+0xf9e4>
   20bb8:	mov	r0, r1
   20bbc:	pop	{r4, pc}
   20bc0:	mov	r0, r3
   20bc4:	bx	lr
   20bc8:	push	{r4, lr}
   20bcc:	mov	r0, #14
   20bd0:	bl	11644 <nl_langinfo@plt>
   20bd4:	cmp	r0, #0
   20bd8:	beq	20bf0 <__assert_fail@plt+0xf4ec>
   20bdc:	ldrb	r2, [r0]
   20be0:	ldr	r3, [pc, #16]	; 20bf8 <__assert_fail@plt+0xf4f4>
   20be4:	cmp	r2, #0
   20be8:	moveq	r0, r3
   20bec:	pop	{r4, pc}
   20bf0:	ldr	r0, [pc]	; 20bf8 <__assert_fail@plt+0xf4f4>
   20bf4:	pop	{r4, pc}
   20bf8:	strdeq	r3, [r2], -r4
   20bfc:	push	{r4, r5, r6, lr}
   20c00:	subs	r4, r2, #0
   20c04:	mov	r6, r0
   20c08:	mov	r5, r1
   20c0c:	beq	20c38 <__assert_fail@plt+0xf534>
   20c10:	mov	r1, r4
   20c14:	mvn	r0, #0
   20c18:	bl	20efc <__assert_fail@plt+0xf7f8>
   20c1c:	cmp	r0, r5
   20c20:	bcs	20c38 <__assert_fail@plt+0xf534>
   20c24:	bl	1156c <__errno_location@plt>
   20c28:	mov	r3, #12
   20c2c:	str	r3, [r0]
   20c30:	mov	r0, #0
   20c34:	pop	{r4, r5, r6, pc}
   20c38:	mul	r1, r5, r4
   20c3c:	mov	r0, r6
   20c40:	pop	{r4, r5, r6, lr}
   20c44:	b	1f590 <__assert_fail@plt+0xde8c>
   20c48:	push	{r4, r5, r6, lr}
   20c4c:	mov	r5, r1
   20c50:	mov	r1, #0
   20c54:	mov	r4, r2
   20c58:	bl	11614 <setlocale@plt>
   20c5c:	subs	r6, r0, #0
   20c60:	beq	20cbc <__assert_fail@plt+0xf5b8>
   20c64:	bl	1153c <strlen@plt>
   20c68:	cmp	r4, r0
   20c6c:	bhi	20ca4 <__assert_fail@plt+0xf5a0>
   20c70:	cmp	r4, #0
   20c74:	bne	20c80 <__assert_fail@plt+0xf57c>
   20c78:	mov	r0, #34	; 0x22
   20c7c:	pop	{r4, r5, r6, pc}
   20c80:	sub	r4, r4, #1
   20c84:	mov	r1, r6
   20c88:	mov	r2, r4
   20c8c:	mov	r0, r5
   20c90:	bl	11374 <memcpy@plt>
   20c94:	mov	r3, #0
   20c98:	strb	r3, [r5, r4]
   20c9c:	mov	r0, #34	; 0x22
   20ca0:	pop	{r4, r5, r6, pc}
   20ca4:	add	r2, r0, #1
   20ca8:	mov	r1, r6
   20cac:	mov	r0, r5
   20cb0:	bl	11374 <memcpy@plt>
   20cb4:	mov	r0, #0
   20cb8:	pop	{r4, r5, r6, pc}
   20cbc:	cmp	r4, #0
   20cc0:	beq	20cd0 <__assert_fail@plt+0xf5cc>
   20cc4:	strb	r6, [r5]
   20cc8:	mov	r0, #22
   20ccc:	pop	{r4, r5, r6, pc}
   20cd0:	mov	r0, #22
   20cd4:	pop	{r4, r5, r6, pc}
   20cd8:	mov	r1, #0
   20cdc:	b	11614 <setlocale@plt>
   20ce0:	cmp	r0, #2
   20ce4:	push	{r4, r5, r6, r7, r8, lr}
   20ce8:	mov	r4, r0
   20cec:	bhi	20d14 <__assert_fail@plt+0xf610>
   20cf0:	bl	20d1c <__assert_fail@plt+0xf618>
   20cf4:	mov	r7, r0
   20cf8:	bl	1156c <__errno_location@plt>
   20cfc:	mov	r5, r0
   20d00:	mov	r0, r4
   20d04:	ldr	r6, [r5]
   20d08:	mov	r4, r7
   20d0c:	bl	116ec <close@plt>
   20d10:	str	r6, [r5]
   20d14:	mov	r0, r4
   20d18:	pop	{r4, r5, r6, r7, r8, pc}
   20d1c:	mov	r2, #3
   20d20:	mov	r1, #0
   20d24:	b	20d28 <__assert_fail@plt+0xf624>
   20d28:	push	{r1, r2, r3}
   20d2c:	push	{r4, r5, r6, r7, lr}
   20d30:	sub	sp, sp, #8
   20d34:	add	r3, sp, #32
   20d38:	ldr	r1, [sp, #28]
   20d3c:	str	r3, [sp, #4]
   20d40:	cmp	r1, #0
   20d44:	beq	20ddc <__assert_fail@plt+0xf6d8>
   20d48:	ldr	r2, [pc, #412]	; 20eec <__assert_fail@plt+0xf7e8>
   20d4c:	mov	r5, r0
   20d50:	cmp	r1, r2
   20d54:	bne	20da0 <__assert_fail@plt+0xf69c>
   20d58:	ldr	r6, [pc, #400]	; 20ef0 <__assert_fail@plt+0xf7ec>
   20d5c:	ldr	r7, [r3]
   20d60:	add	r2, sp, #36	; 0x24
   20d64:	ldr	r3, [r6]
   20d68:	str	r2, [sp, #4]
   20d6c:	cmp	r3, #0
   20d70:	mov	r2, r7
   20d74:	blt	20ea0 <__assert_fail@plt+0xf79c>
   20d78:	bl	115fc <fcntl64@plt>
   20d7c:	subs	r4, r0, #0
   20d80:	blt	20e24 <__assert_fail@plt+0xf720>
   20d84:	mov	r3, #1
   20d88:	str	r3, [r6]
   20d8c:	mov	r0, r4
   20d90:	add	sp, sp, #8
   20d94:	pop	{r4, r5, r6, r7, lr}
   20d98:	add	sp, sp, #12
   20d9c:	bx	lr
   20da0:	cmp	r1, #11
   20da4:	beq	20dcc <__assert_fail@plt+0xf6c8>
   20da8:	bgt	20dec <__assert_fail@plt+0xf6e8>
   20dac:	cmp	r1, #3
   20db0:	beq	20dcc <__assert_fail@plt+0xf6c8>
   20db4:	ble	20ee0 <__assert_fail@plt+0xf7dc>
   20db8:	cmp	r1, #8
   20dbc:	beq	20e0c <__assert_fail@plt+0xf708>
   20dc0:	ble	20e0c <__assert_fail@plt+0xf708>
   20dc4:	cmp	r1, #9
   20dc8:	bne	20e0c <__assert_fail@plt+0xf708>
   20dcc:	mov	r0, r5
   20dd0:	bl	115fc <fcntl64@plt>
   20dd4:	mov	r4, r0
   20dd8:	b	20d8c <__assert_fail@plt+0xf688>
   20ddc:	ldr	r2, [sp, #32]
   20de0:	bl	115fc <fcntl64@plt>
   20de4:	mov	r4, r0
   20de8:	b	20d8c <__assert_fail@plt+0xf688>
   20dec:	ldr	r3, [pc, #256]	; 20ef4 <__assert_fail@plt+0xf7f0>
   20df0:	cmp	r1, r3
   20df4:	bgt	20ec0 <__assert_fail@plt+0xf7bc>
   20df8:	cmp	r1, r2
   20dfc:	bge	20e0c <__assert_fail@plt+0xf708>
   20e00:	sub	r3, r3, #6
   20e04:	cmp	r1, r3
   20e08:	beq	20dcc <__assert_fail@plt+0xf6c8>
   20e0c:	ldr	r3, [sp, #4]
   20e10:	mov	r0, r5
   20e14:	ldr	r2, [r3]
   20e18:	bl	115fc <fcntl64@plt>
   20e1c:	mov	r4, r0
   20e20:	b	20d8c <__assert_fail@plt+0xf688>
   20e24:	bl	1156c <__errno_location@plt>
   20e28:	ldr	r3, [r0]
   20e2c:	cmp	r3, #22
   20e30:	bne	20d84 <__assert_fail@plt+0xf680>
   20e34:	mov	r2, r7
   20e38:	mov	r0, r5
   20e3c:	mov	r1, #0
   20e40:	bl	115fc <fcntl64@plt>
   20e44:	subs	r4, r0, #0
   20e48:	blt	20d8c <__assert_fail@plt+0xf688>
   20e4c:	mvn	r3, #0
   20e50:	str	r3, [r6]
   20e54:	mov	r1, #1
   20e58:	mov	r0, r4
   20e5c:	bl	115fc <fcntl64@plt>
   20e60:	subs	r2, r0, #0
   20e64:	blt	20e80 <__assert_fail@plt+0xf77c>
   20e68:	orr	r2, r2, #1
   20e6c:	mov	r1, #2
   20e70:	mov	r0, r4
   20e74:	bl	115fc <fcntl64@plt>
   20e78:	cmn	r0, #1
   20e7c:	bne	20d8c <__assert_fail@plt+0xf688>
   20e80:	bl	1156c <__errno_location@plt>
   20e84:	mov	r5, r0
   20e88:	mov	r0, r4
   20e8c:	ldr	r6, [r5]
   20e90:	mvn	r4, #0
   20e94:	bl	116ec <close@plt>
   20e98:	str	r6, [r5]
   20e9c:	b	20d8c <__assert_fail@plt+0xf688>
   20ea0:	mov	r1, #0
   20ea4:	bl	115fc <fcntl64@plt>
   20ea8:	subs	r4, r0, #0
   20eac:	blt	20d8c <__assert_fail@plt+0xf688>
   20eb0:	ldr	r3, [r6]
   20eb4:	cmn	r3, #1
   20eb8:	beq	20e54 <__assert_fail@plt+0xf750>
   20ebc:	b	20d8c <__assert_fail@plt+0xf688>
   20ec0:	ldr	r3, [pc, #48]	; 20ef8 <__assert_fail@plt+0xf7f4>
   20ec4:	cmp	r1, r3
   20ec8:	beq	20e0c <__assert_fail@plt+0xf708>
   20ecc:	blt	20dcc <__assert_fail@plt+0xf6c8>
   20ed0:	add	r3, r3, #1
   20ed4:	cmp	r1, r3
   20ed8:	bne	20e0c <__assert_fail@plt+0xf708>
   20edc:	b	20dcc <__assert_fail@plt+0xf6c8>
   20ee0:	cmp	r1, #1
   20ee4:	bne	20e0c <__assert_fail@plt+0xf708>
   20ee8:	b	20dcc <__assert_fail@plt+0xf6c8>
   20eec:	andeq	r0, r0, r6, lsl #8
   20ef0:	strdeq	r4, [r3], -r8
   20ef4:	andeq	r0, r0, r7, lsl #8
   20ef8:	andeq	r0, r0, r9, lsl #8
   20efc:	subs	r2, r1, #1
   20f00:	bxeq	lr
   20f04:	bcc	210dc <__assert_fail@plt+0xf9d8>
   20f08:	cmp	r0, r1
   20f0c:	bls	210c0 <__assert_fail@plt+0xf9bc>
   20f10:	tst	r1, r2
   20f14:	beq	210cc <__assert_fail@plt+0xf9c8>
   20f18:	clz	r3, r0
   20f1c:	clz	r2, r1
   20f20:	sub	r3, r2, r3
   20f24:	rsbs	r3, r3, #31
   20f28:	addne	r3, r3, r3, lsl #1
   20f2c:	mov	r2, #0
   20f30:	addne	pc, pc, r3, lsl #2
   20f34:	nop			; (mov r0, r0)
   20f38:	cmp	r0, r1, lsl #31
   20f3c:	adc	r2, r2, r2
   20f40:	subcs	r0, r0, r1, lsl #31
   20f44:	cmp	r0, r1, lsl #30
   20f48:	adc	r2, r2, r2
   20f4c:	subcs	r0, r0, r1, lsl #30
   20f50:	cmp	r0, r1, lsl #29
   20f54:	adc	r2, r2, r2
   20f58:	subcs	r0, r0, r1, lsl #29
   20f5c:	cmp	r0, r1, lsl #28
   20f60:	adc	r2, r2, r2
   20f64:	subcs	r0, r0, r1, lsl #28
   20f68:	cmp	r0, r1, lsl #27
   20f6c:	adc	r2, r2, r2
   20f70:	subcs	r0, r0, r1, lsl #27
   20f74:	cmp	r0, r1, lsl #26
   20f78:	adc	r2, r2, r2
   20f7c:	subcs	r0, r0, r1, lsl #26
   20f80:	cmp	r0, r1, lsl #25
   20f84:	adc	r2, r2, r2
   20f88:	subcs	r0, r0, r1, lsl #25
   20f8c:	cmp	r0, r1, lsl #24
   20f90:	adc	r2, r2, r2
   20f94:	subcs	r0, r0, r1, lsl #24
   20f98:	cmp	r0, r1, lsl #23
   20f9c:	adc	r2, r2, r2
   20fa0:	subcs	r0, r0, r1, lsl #23
   20fa4:	cmp	r0, r1, lsl #22
   20fa8:	adc	r2, r2, r2
   20fac:	subcs	r0, r0, r1, lsl #22
   20fb0:	cmp	r0, r1, lsl #21
   20fb4:	adc	r2, r2, r2
   20fb8:	subcs	r0, r0, r1, lsl #21
   20fbc:	cmp	r0, r1, lsl #20
   20fc0:	adc	r2, r2, r2
   20fc4:	subcs	r0, r0, r1, lsl #20
   20fc8:	cmp	r0, r1, lsl #19
   20fcc:	adc	r2, r2, r2
   20fd0:	subcs	r0, r0, r1, lsl #19
   20fd4:	cmp	r0, r1, lsl #18
   20fd8:	adc	r2, r2, r2
   20fdc:	subcs	r0, r0, r1, lsl #18
   20fe0:	cmp	r0, r1, lsl #17
   20fe4:	adc	r2, r2, r2
   20fe8:	subcs	r0, r0, r1, lsl #17
   20fec:	cmp	r0, r1, lsl #16
   20ff0:	adc	r2, r2, r2
   20ff4:	subcs	r0, r0, r1, lsl #16
   20ff8:	cmp	r0, r1, lsl #15
   20ffc:	adc	r2, r2, r2
   21000:	subcs	r0, r0, r1, lsl #15
   21004:	cmp	r0, r1, lsl #14
   21008:	adc	r2, r2, r2
   2100c:	subcs	r0, r0, r1, lsl #14
   21010:	cmp	r0, r1, lsl #13
   21014:	adc	r2, r2, r2
   21018:	subcs	r0, r0, r1, lsl #13
   2101c:	cmp	r0, r1, lsl #12
   21020:	adc	r2, r2, r2
   21024:	subcs	r0, r0, r1, lsl #12
   21028:	cmp	r0, r1, lsl #11
   2102c:	adc	r2, r2, r2
   21030:	subcs	r0, r0, r1, lsl #11
   21034:	cmp	r0, r1, lsl #10
   21038:	adc	r2, r2, r2
   2103c:	subcs	r0, r0, r1, lsl #10
   21040:	cmp	r0, r1, lsl #9
   21044:	adc	r2, r2, r2
   21048:	subcs	r0, r0, r1, lsl #9
   2104c:	cmp	r0, r1, lsl #8
   21050:	adc	r2, r2, r2
   21054:	subcs	r0, r0, r1, lsl #8
   21058:	cmp	r0, r1, lsl #7
   2105c:	adc	r2, r2, r2
   21060:	subcs	r0, r0, r1, lsl #7
   21064:	cmp	r0, r1, lsl #6
   21068:	adc	r2, r2, r2
   2106c:	subcs	r0, r0, r1, lsl #6
   21070:	cmp	r0, r1, lsl #5
   21074:	adc	r2, r2, r2
   21078:	subcs	r0, r0, r1, lsl #5
   2107c:	cmp	r0, r1, lsl #4
   21080:	adc	r2, r2, r2
   21084:	subcs	r0, r0, r1, lsl #4
   21088:	cmp	r0, r1, lsl #3
   2108c:	adc	r2, r2, r2
   21090:	subcs	r0, r0, r1, lsl #3
   21094:	cmp	r0, r1, lsl #2
   21098:	adc	r2, r2, r2
   2109c:	subcs	r0, r0, r1, lsl #2
   210a0:	cmp	r0, r1, lsl #1
   210a4:	adc	r2, r2, r2
   210a8:	subcs	r0, r0, r1, lsl #1
   210ac:	cmp	r0, r1
   210b0:	adc	r2, r2, r2
   210b4:	subcs	r0, r0, r1
   210b8:	mov	r0, r2
   210bc:	bx	lr
   210c0:	moveq	r0, #1
   210c4:	movne	r0, #0
   210c8:	bx	lr
   210cc:	clz	r2, r1
   210d0:	rsb	r2, r2, #31
   210d4:	lsr	r0, r0, r2
   210d8:	bx	lr
   210dc:	cmp	r0, #0
   210e0:	mvnne	r0, #0
   210e4:	b	2173c <__assert_fail@plt+0x10038>
   210e8:	cmp	r1, #0
   210ec:	beq	210dc <__assert_fail@plt+0xf9d8>
   210f0:	push	{r0, r1, lr}
   210f4:	bl	20efc <__assert_fail@plt+0xf7f8>
   210f8:	pop	{r1, r2, lr}
   210fc:	mul	r3, r2, r0
   21100:	sub	r1, r1, r3
   21104:	bx	lr
   21108:	cmp	r1, #0
   2110c:	beq	21318 <__assert_fail@plt+0xfc14>
   21110:	eor	ip, r0, r1
   21114:	rsbmi	r1, r1, #0
   21118:	subs	r2, r1, #1
   2111c:	beq	212e4 <__assert_fail@plt+0xfbe0>
   21120:	movs	r3, r0
   21124:	rsbmi	r3, r0, #0
   21128:	cmp	r3, r1
   2112c:	bls	212f0 <__assert_fail@plt+0xfbec>
   21130:	tst	r1, r2
   21134:	beq	21300 <__assert_fail@plt+0xfbfc>
   21138:	clz	r2, r3
   2113c:	clz	r0, r1
   21140:	sub	r2, r0, r2
   21144:	rsbs	r2, r2, #31
   21148:	addne	r2, r2, r2, lsl #1
   2114c:	mov	r0, #0
   21150:	addne	pc, pc, r2, lsl #2
   21154:	nop			; (mov r0, r0)
   21158:	cmp	r3, r1, lsl #31
   2115c:	adc	r0, r0, r0
   21160:	subcs	r3, r3, r1, lsl #31
   21164:	cmp	r3, r1, lsl #30
   21168:	adc	r0, r0, r0
   2116c:	subcs	r3, r3, r1, lsl #30
   21170:	cmp	r3, r1, lsl #29
   21174:	adc	r0, r0, r0
   21178:	subcs	r3, r3, r1, lsl #29
   2117c:	cmp	r3, r1, lsl #28
   21180:	adc	r0, r0, r0
   21184:	subcs	r3, r3, r1, lsl #28
   21188:	cmp	r3, r1, lsl #27
   2118c:	adc	r0, r0, r0
   21190:	subcs	r3, r3, r1, lsl #27
   21194:	cmp	r3, r1, lsl #26
   21198:	adc	r0, r0, r0
   2119c:	subcs	r3, r3, r1, lsl #26
   211a0:	cmp	r3, r1, lsl #25
   211a4:	adc	r0, r0, r0
   211a8:	subcs	r3, r3, r1, lsl #25
   211ac:	cmp	r3, r1, lsl #24
   211b0:	adc	r0, r0, r0
   211b4:	subcs	r3, r3, r1, lsl #24
   211b8:	cmp	r3, r1, lsl #23
   211bc:	adc	r0, r0, r0
   211c0:	subcs	r3, r3, r1, lsl #23
   211c4:	cmp	r3, r1, lsl #22
   211c8:	adc	r0, r0, r0
   211cc:	subcs	r3, r3, r1, lsl #22
   211d0:	cmp	r3, r1, lsl #21
   211d4:	adc	r0, r0, r0
   211d8:	subcs	r3, r3, r1, lsl #21
   211dc:	cmp	r3, r1, lsl #20
   211e0:	adc	r0, r0, r0
   211e4:	subcs	r3, r3, r1, lsl #20
   211e8:	cmp	r3, r1, lsl #19
   211ec:	adc	r0, r0, r0
   211f0:	subcs	r3, r3, r1, lsl #19
   211f4:	cmp	r3, r1, lsl #18
   211f8:	adc	r0, r0, r0
   211fc:	subcs	r3, r3, r1, lsl #18
   21200:	cmp	r3, r1, lsl #17
   21204:	adc	r0, r0, r0
   21208:	subcs	r3, r3, r1, lsl #17
   2120c:	cmp	r3, r1, lsl #16
   21210:	adc	r0, r0, r0
   21214:	subcs	r3, r3, r1, lsl #16
   21218:	cmp	r3, r1, lsl #15
   2121c:	adc	r0, r0, r0
   21220:	subcs	r3, r3, r1, lsl #15
   21224:	cmp	r3, r1, lsl #14
   21228:	adc	r0, r0, r0
   2122c:	subcs	r3, r3, r1, lsl #14
   21230:	cmp	r3, r1, lsl #13
   21234:	adc	r0, r0, r0
   21238:	subcs	r3, r3, r1, lsl #13
   2123c:	cmp	r3, r1, lsl #12
   21240:	adc	r0, r0, r0
   21244:	subcs	r3, r3, r1, lsl #12
   21248:	cmp	r3, r1, lsl #11
   2124c:	adc	r0, r0, r0
   21250:	subcs	r3, r3, r1, lsl #11
   21254:	cmp	r3, r1, lsl #10
   21258:	adc	r0, r0, r0
   2125c:	subcs	r3, r3, r1, lsl #10
   21260:	cmp	r3, r1, lsl #9
   21264:	adc	r0, r0, r0
   21268:	subcs	r3, r3, r1, lsl #9
   2126c:	cmp	r3, r1, lsl #8
   21270:	adc	r0, r0, r0
   21274:	subcs	r3, r3, r1, lsl #8
   21278:	cmp	r3, r1, lsl #7
   2127c:	adc	r0, r0, r0
   21280:	subcs	r3, r3, r1, lsl #7
   21284:	cmp	r3, r1, lsl #6
   21288:	adc	r0, r0, r0
   2128c:	subcs	r3, r3, r1, lsl #6
   21290:	cmp	r3, r1, lsl #5
   21294:	adc	r0, r0, r0
   21298:	subcs	r3, r3, r1, lsl #5
   2129c:	cmp	r3, r1, lsl #4
   212a0:	adc	r0, r0, r0
   212a4:	subcs	r3, r3, r1, lsl #4
   212a8:	cmp	r3, r1, lsl #3
   212ac:	adc	r0, r0, r0
   212b0:	subcs	r3, r3, r1, lsl #3
   212b4:	cmp	r3, r1, lsl #2
   212b8:	adc	r0, r0, r0
   212bc:	subcs	r3, r3, r1, lsl #2
   212c0:	cmp	r3, r1, lsl #1
   212c4:	adc	r0, r0, r0
   212c8:	subcs	r3, r3, r1, lsl #1
   212cc:	cmp	r3, r1
   212d0:	adc	r0, r0, r0
   212d4:	subcs	r3, r3, r1
   212d8:	cmp	ip, #0
   212dc:	rsbmi	r0, r0, #0
   212e0:	bx	lr
   212e4:	teq	ip, r0
   212e8:	rsbmi	r0, r0, #0
   212ec:	bx	lr
   212f0:	movcc	r0, #0
   212f4:	asreq	r0, ip, #31
   212f8:	orreq	r0, r0, #1
   212fc:	bx	lr
   21300:	clz	r2, r1
   21304:	rsb	r2, r2, #31
   21308:	cmp	ip, #0
   2130c:	lsr	r0, r3, r2
   21310:	rsbmi	r0, r0, #0
   21314:	bx	lr
   21318:	cmp	r0, #0
   2131c:	mvngt	r0, #-2147483648	; 0x80000000
   21320:	movlt	r0, #-2147483648	; 0x80000000
   21324:	b	2173c <__assert_fail@plt+0x10038>
   21328:	cmp	r1, #0
   2132c:	beq	21318 <__assert_fail@plt+0xfc14>
   21330:	push	{r0, r1, lr}
   21334:	bl	21110 <__assert_fail@plt+0xfa0c>
   21338:	pop	{r1, r2, lr}
   2133c:	mul	r3, r2, r0
   21340:	sub	r1, r1, r3
   21344:	bx	lr
   21348:	eor	r1, r1, #-2147483648	; 0x80000000
   2134c:	b	21354 <__assert_fail@plt+0xfc50>
   21350:	eor	r3, r3, #-2147483648	; 0x80000000
   21354:	push	{r4, r5, lr}
   21358:	lsl	r4, r1, #1
   2135c:	lsl	r5, r3, #1
   21360:	teq	r4, r5
   21364:	teqeq	r0, r2
   21368:	orrsne	ip, r4, r0
   2136c:	orrsne	ip, r5, r2
   21370:	mvnsne	ip, r4, asr #21
   21374:	mvnsne	ip, r5, asr #21
   21378:	beq	21564 <__assert_fail@plt+0xfe60>
   2137c:	lsr	r4, r4, #21
   21380:	rsbs	r5, r4, r5, lsr #21
   21384:	rsblt	r5, r5, #0
   21388:	ble	213a8 <__assert_fail@plt+0xfca4>
   2138c:	add	r4, r4, r5
   21390:	eor	r2, r0, r2
   21394:	eor	r3, r1, r3
   21398:	eor	r0, r2, r0
   2139c:	eor	r1, r3, r1
   213a0:	eor	r2, r0, r2
   213a4:	eor	r3, r1, r3
   213a8:	cmp	r5, #54	; 0x36
   213ac:	pophi	{r4, r5, pc}
   213b0:	tst	r1, #-2147483648	; 0x80000000
   213b4:	lsl	r1, r1, #12
   213b8:	mov	ip, #1048576	; 0x100000
   213bc:	orr	r1, ip, r1, lsr #12
   213c0:	beq	213cc <__assert_fail@plt+0xfcc8>
   213c4:	rsbs	r0, r0, #0
   213c8:	rsc	r1, r1, #0
   213cc:	tst	r3, #-2147483648	; 0x80000000
   213d0:	lsl	r3, r3, #12
   213d4:	orr	r3, ip, r3, lsr #12
   213d8:	beq	213e4 <__assert_fail@plt+0xfce0>
   213dc:	rsbs	r2, r2, #0
   213e0:	rsc	r3, r3, #0
   213e4:	teq	r4, r5
   213e8:	beq	2154c <__assert_fail@plt+0xfe48>
   213ec:	sub	r4, r4, #1
   213f0:	rsbs	lr, r5, #32
   213f4:	blt	21410 <__assert_fail@plt+0xfd0c>
   213f8:	lsl	ip, r2, lr
   213fc:	adds	r0, r0, r2, lsr r5
   21400:	adc	r1, r1, #0
   21404:	adds	r0, r0, r3, lsl lr
   21408:	adcs	r1, r1, r3, asr r5
   2140c:	b	2142c <__assert_fail@plt+0xfd28>
   21410:	sub	r5, r5, #32
   21414:	add	lr, lr, #32
   21418:	cmp	r2, #1
   2141c:	lsl	ip, r3, lr
   21420:	orrcs	ip, ip, #2
   21424:	adds	r0, r0, r3, asr r5
   21428:	adcs	r1, r1, r3, asr #31
   2142c:	and	r5, r1, #-2147483648	; 0x80000000
   21430:	bpl	21440 <__assert_fail@plt+0xfd3c>
   21434:	rsbs	ip, ip, #0
   21438:	rscs	r0, r0, #0
   2143c:	rsc	r1, r1, #0
   21440:	cmp	r1, #1048576	; 0x100000
   21444:	bcc	21484 <__assert_fail@plt+0xfd80>
   21448:	cmp	r1, #2097152	; 0x200000
   2144c:	bcc	2146c <__assert_fail@plt+0xfd68>
   21450:	lsrs	r1, r1, #1
   21454:	rrxs	r0, r0
   21458:	rrx	ip, ip
   2145c:	add	r4, r4, #1
   21460:	lsl	r2, r4, #21
   21464:	cmn	r2, #4194304	; 0x400000
   21468:	bcs	215c4 <__assert_fail@plt+0xfec0>
   2146c:	cmp	ip, #-2147483648	; 0x80000000
   21470:	lsrseq	ip, r0, #1
   21474:	adcs	r0, r0, #0
   21478:	adc	r1, r1, r4, lsl #20
   2147c:	orr	r1, r1, r5
   21480:	pop	{r4, r5, pc}
   21484:	lsls	ip, ip, #1
   21488:	adcs	r0, r0, r0
   2148c:	adc	r1, r1, r1
   21490:	tst	r1, #1048576	; 0x100000
   21494:	sub	r4, r4, #1
   21498:	bne	2146c <__assert_fail@plt+0xfd68>
   2149c:	teq	r1, #0
   214a0:	moveq	r1, r0
   214a4:	moveq	r0, #0
   214a8:	clz	r3, r1
   214ac:	addeq	r3, r3, #32
   214b0:	sub	r3, r3, #11
   214b4:	subs	r2, r3, #32
   214b8:	bge	214dc <__assert_fail@plt+0xfdd8>
   214bc:	adds	r2, r2, #12
   214c0:	ble	214d8 <__assert_fail@plt+0xfdd4>
   214c4:	add	ip, r2, #20
   214c8:	rsb	r2, r2, #12
   214cc:	lsl	r0, r1, ip
   214d0:	lsr	r1, r1, r2
   214d4:	b	214ec <__assert_fail@plt+0xfde8>
   214d8:	add	r2, r2, #20
   214dc:	rsble	ip, r2, #32
   214e0:	lsl	r1, r1, r2
   214e4:	orrle	r1, r1, r0, lsr ip
   214e8:	lslle	r0, r0, r2
   214ec:	subs	r4, r4, r3
   214f0:	addge	r1, r1, r4, lsl #20
   214f4:	orrge	r1, r1, r5
   214f8:	popge	{r4, r5, pc}
   214fc:	mvn	r4, r4
   21500:	subs	r4, r4, #31
   21504:	bge	21540 <__assert_fail@plt+0xfe3c>
   21508:	adds	r4, r4, #12
   2150c:	bgt	21528 <__assert_fail@plt+0xfe24>
   21510:	add	r4, r4, #20
   21514:	rsb	r2, r4, #32
   21518:	lsr	r0, r0, r4
   2151c:	orr	r0, r0, r1, lsl r2
   21520:	orr	r1, r5, r1, lsr r4
   21524:	pop	{r4, r5, pc}
   21528:	rsb	r4, r4, #12
   2152c:	rsb	r2, r4, #32
   21530:	lsr	r0, r0, r2
   21534:	orr	r0, r0, r1, lsl r4
   21538:	mov	r1, r5
   2153c:	pop	{r4, r5, pc}
   21540:	lsr	r0, r1, r4
   21544:	mov	r1, r5
   21548:	pop	{r4, r5, pc}
   2154c:	teq	r4, #0
   21550:	eor	r3, r3, #1048576	; 0x100000
   21554:	eoreq	r1, r1, #1048576	; 0x100000
   21558:	addeq	r4, r4, #1
   2155c:	subne	r5, r5, #1
   21560:	b	213ec <__assert_fail@plt+0xfce8>
   21564:	mvns	ip, r4, asr #21
   21568:	mvnsne	ip, r5, asr #21
   2156c:	beq	215d4 <__assert_fail@plt+0xfed0>
   21570:	teq	r4, r5
   21574:	teqeq	r0, r2
   21578:	beq	2158c <__assert_fail@plt+0xfe88>
   2157c:	orrs	ip, r4, r0
   21580:	moveq	r1, r3
   21584:	moveq	r0, r2
   21588:	pop	{r4, r5, pc}
   2158c:	teq	r1, r3
   21590:	movne	r1, #0
   21594:	movne	r0, #0
   21598:	popne	{r4, r5, pc}
   2159c:	lsrs	ip, r4, #21
   215a0:	bne	215b4 <__assert_fail@plt+0xfeb0>
   215a4:	lsls	r0, r0, #1
   215a8:	adcs	r1, r1, r1
   215ac:	orrcs	r1, r1, #-2147483648	; 0x80000000
   215b0:	pop	{r4, r5, pc}
   215b4:	adds	r4, r4, #4194304	; 0x400000
   215b8:	addcc	r1, r1, #1048576	; 0x100000
   215bc:	popcc	{r4, r5, pc}
   215c0:	and	r5, r1, #-2147483648	; 0x80000000
   215c4:	orr	r1, r5, #2130706432	; 0x7f000000
   215c8:	orr	r1, r1, #15728640	; 0xf00000
   215cc:	mov	r0, #0
   215d0:	pop	{r4, r5, pc}
   215d4:	mvns	ip, r4, asr #21
   215d8:	movne	r1, r3
   215dc:	movne	r0, r2
   215e0:	mvnseq	ip, r5, asr #21
   215e4:	movne	r3, r1
   215e8:	movne	r2, r0
   215ec:	orrs	r4, r0, r1, lsl #12
   215f0:	orrseq	r5, r2, r3, lsl #12
   215f4:	teqeq	r1, r3
   215f8:	orrne	r1, r1, #524288	; 0x80000
   215fc:	pop	{r4, r5, pc}
   21600:	teq	r0, #0
   21604:	moveq	r1, #0
   21608:	bxeq	lr
   2160c:	push	{r4, r5, lr}
   21610:	mov	r4, #1024	; 0x400
   21614:	add	r4, r4, #50	; 0x32
   21618:	mov	r5, #0
   2161c:	mov	r1, #0
   21620:	b	2149c <__assert_fail@plt+0xfd98>
   21624:	teq	r0, #0
   21628:	moveq	r1, #0
   2162c:	bxeq	lr
   21630:	push	{r4, r5, lr}
   21634:	mov	r4, #1024	; 0x400
   21638:	add	r4, r4, #50	; 0x32
   2163c:	ands	r5, r0, #-2147483648	; 0x80000000
   21640:	rsbmi	r0, r0, #0
   21644:	mov	r1, #0
   21648:	b	2149c <__assert_fail@plt+0xfd98>
   2164c:	lsls	r2, r0, #1
   21650:	asr	r1, r2, #3
   21654:	rrx	r1, r1
   21658:	lsl	r0, r2, #28
   2165c:	andsne	r3, r2, #-16777216	; 0xff000000
   21660:	teqne	r3, #-16777216	; 0xff000000
   21664:	eorne	r1, r1, #939524096	; 0x38000000
   21668:	bxne	lr
   2166c:	teq	r2, #0
   21670:	teqne	r3, #-16777216	; 0xff000000
   21674:	bxeq	lr
   21678:	push	{r4, r5, lr}
   2167c:	mov	r4, #896	; 0x380
   21680:	and	r5, r1, #-2147483648	; 0x80000000
   21684:	bic	r1, r1, #-2147483648	; 0x80000000
   21688:	b	2149c <__assert_fail@plt+0xfd98>
   2168c:	orrs	r2, r0, r1
   21690:	bxeq	lr
   21694:	push	{r4, r5, lr}
   21698:	mov	r5, #0
   2169c:	b	216bc <__assert_fail@plt+0xffb8>
   216a0:	orrs	r2, r0, r1
   216a4:	bxeq	lr
   216a8:	push	{r4, r5, lr}
   216ac:	ands	r5, r1, #-2147483648	; 0x80000000
   216b0:	bpl	216bc <__assert_fail@plt+0xffb8>
   216b4:	rsbs	r0, r0, #0
   216b8:	rsc	r1, r1, #0
   216bc:	mov	r4, #1024	; 0x400
   216c0:	add	r4, r4, #50	; 0x32
   216c4:	lsrs	ip, r1, #22
   216c8:	beq	21440 <__assert_fail@plt+0xfd3c>
   216cc:	mov	r2, #3
   216d0:	lsrs	ip, ip, #3
   216d4:	addne	r2, r2, #3
   216d8:	lsrs	ip, ip, #3
   216dc:	addne	r2, r2, #3
   216e0:	add	r2, r2, ip, lsr #3
   216e4:	rsb	r3, r2, #32
   216e8:	lsl	ip, r0, r3
   216ec:	lsr	r0, r0, r2
   216f0:	orr	r0, r0, r1, lsl r3
   216f4:	lsr	r1, r1, r2
   216f8:	add	r4, r4, r2
   216fc:	b	21440 <__assert_fail@plt+0xfd3c>
   21700:	cmp	r3, #0
   21704:	cmpeq	r2, #0
   21708:	bne	21720 <__assert_fail@plt+0x1001c>
   2170c:	cmp	r1, #0
   21710:	cmpeq	r0, #0
   21714:	mvnne	r1, #0
   21718:	mvnne	r0, #0
   2171c:	b	2173c <__assert_fail@plt+0x10038>
   21720:	sub	sp, sp, #8
   21724:	push	{sp, lr}
   21728:	bl	21798 <__assert_fail@plt+0x10094>
   2172c:	ldr	lr, [sp, #4]
   21730:	add	sp, sp, #8
   21734:	pop	{r2, r3}
   21738:	bx	lr
   2173c:	push	{r1, lr}
   21740:	mov	r0, #8
   21744:	bl	112fc <raise@plt>
   21748:	pop	{r1, pc}
   2174c:	andeq	r0, r0, r0
   21750:	vmov	d7, r0, r1
   21754:	vldr	d6, [pc, #44]	; 21788 <__assert_fail@plt+0x10084>
   21758:	vldr	d5, [pc, #48]	; 21790 <__assert_fail@plt+0x1008c>
   2175c:	mov	r0, #0
   21760:	vmul.f64	d6, d7, d6
   21764:	vcvt.u32.f64	s12, d6
   21768:	vcvt.f64.u32	d4, s12
   2176c:	vmov	r1, s12
   21770:	vmls.f64	d7, d4, d5
   21774:	vcvt.u32.f64	s14, d7
   21778:	vmov	r3, s14
   2177c:	orr	r0, r0, r3
   21780:	bx	lr
   21784:	nop			; (mov r0, r0)
   21788:	andeq	r0, r0, r0
   2178c:	ldclcc	0, cr0, [r0]
   21790:	andeq	r0, r0, r0
   21794:	mvnsmi	r0, r0
   21798:	cmp	r1, r3
   2179c:	push	{r4, r5, r6, r7, r8, r9, lr}
   217a0:	cmpeq	r0, r2
   217a4:	mov	r4, r0
   217a8:	mov	r5, r1
   217ac:	ldr	r9, [sp, #28]
   217b0:	movcc	r0, #0
   217b4:	movcc	r1, #0
   217b8:	bcc	218b0 <__assert_fail@plt+0x101ac>
   217bc:	cmp	r3, #0
   217c0:	clzeq	ip, r2
   217c4:	clzne	ip, r3
   217c8:	addeq	ip, ip, #32
   217cc:	cmp	r5, #0
   217d0:	clzeq	r1, r4
   217d4:	addeq	r1, r1, #32
   217d8:	clzne	r1, r5
   217dc:	sub	ip, ip, r1
   217e0:	sub	lr, ip, #32
   217e4:	lsl	r7, r3, ip
   217e8:	rsb	r8, ip, #32
   217ec:	orr	r7, r7, r2, lsl lr
   217f0:	orr	r7, r7, r2, lsr r8
   217f4:	lsl	r6, r2, ip
   217f8:	cmp	r5, r7
   217fc:	cmpeq	r4, r6
   21800:	movcc	r0, #0
   21804:	movcc	r1, #0
   21808:	bcc	21824 <__assert_fail@plt+0x10120>
   2180c:	mov	r3, #1
   21810:	subs	r4, r4, r6
   21814:	lsl	r1, r3, lr
   21818:	lsl	r0, r3, ip
   2181c:	orr	r1, r1, r3, lsr r8
   21820:	sbc	r5, r5, r7
   21824:	cmp	ip, #0
   21828:	beq	218b0 <__assert_fail@plt+0x101ac>
   2182c:	lsrs	r3, r7, #1
   21830:	rrx	r2, r6
   21834:	mov	r6, ip
   21838:	b	2185c <__assert_fail@plt+0x10158>
   2183c:	subs	r4, r4, r2
   21840:	sbc	r5, r5, r3
   21844:	adds	r4, r4, r4
   21848:	adc	r5, r5, r5
   2184c:	adds	r4, r4, #1
   21850:	adc	r5, r5, #0
   21854:	subs	r6, r6, #1
   21858:	beq	21878 <__assert_fail@plt+0x10174>
   2185c:	cmp	r5, r3
   21860:	cmpeq	r4, r2
   21864:	bcs	2183c <__assert_fail@plt+0x10138>
   21868:	adds	r4, r4, r4
   2186c:	adc	r5, r5, r5
   21870:	subs	r6, r6, #1
   21874:	bne	2185c <__assert_fail@plt+0x10158>
   21878:	lsr	r6, r4, ip
   2187c:	lsr	r7, r5, ip
   21880:	orr	r6, r6, r5, lsl r8
   21884:	adds	r2, r0, r4
   21888:	orr	r6, r6, r5, lsr lr
   2188c:	adc	r3, r1, r5
   21890:	lsl	r1, r7, ip
   21894:	orr	r1, r1, r6, lsl lr
   21898:	lsl	r0, r6, ip
   2189c:	orr	r1, r1, r6, lsr r8
   218a0:	subs	r0, r2, r0
   218a4:	mov	r4, r6
   218a8:	mov	r5, r7
   218ac:	sbc	r1, r3, r1
   218b0:	cmp	r9, #0
   218b4:	popeq	{r4, r5, r6, r7, r8, r9, pc}
   218b8:	strd	r4, [r9]
   218bc:	pop	{r4, r5, r6, r7, r8, r9, pc}
   218c0:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   218c4:	mov	r7, r0
   218c8:	ldr	r6, [pc, #72]	; 21918 <__assert_fail@plt+0x10214>
   218cc:	ldr	r5, [pc, #72]	; 2191c <__assert_fail@plt+0x10218>
   218d0:	add	r6, pc, r6
   218d4:	add	r5, pc, r5
   218d8:	sub	r6, r6, r5
   218dc:	mov	r8, r1
   218e0:	mov	r9, r2
   218e4:	bl	112c4 <calloc@plt-0x20>
   218e8:	asrs	r6, r6, #2
   218ec:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   218f0:	mov	r4, #0
   218f4:	add	r4, r4, #1
   218f8:	ldr	r3, [r5], #4
   218fc:	mov	r2, r9
   21900:	mov	r1, r8
   21904:	mov	r0, r7
   21908:	blx	r3
   2190c:	cmp	r6, r4
   21910:	bne	218f4 <__assert_fail@plt+0x101f0>
   21914:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   21918:	andeq	r2, r1, r8, lsr r6
   2191c:	andeq	r2, r1, r0, lsr r6
   21920:	bx	lr
   21924:	ldr	r3, [pc, #12]	; 21938 <__assert_fail@plt+0x10234>
   21928:	mov	r1, #0
   2192c:	add	r3, pc, r3
   21930:	ldr	r2, [r3]
   21934:	b	11584 <__cxa_atexit@plt>
   21938:	andeq	r2, r1, r4, asr #16

Disassembly of section .fini:

0002193c <.fini>:
   2193c:	push	{r3, lr}
   21940:	pop	{r3, pc}
