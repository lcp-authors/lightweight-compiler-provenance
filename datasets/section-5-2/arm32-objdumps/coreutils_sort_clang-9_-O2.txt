
../repos/coreutils/src/sort:     file format elf32-littlearm


Disassembly of section .init:

00011df4 <.init>:
   11df4:	push	{r3, lr}
   11df8:	bl	123bc <__assert_fail@plt+0x50>
   11dfc:	pop	{r3, pc}

Disassembly of section .plt:

00011e00 <pthread_mutex_unlock@plt-0x14>:
   11e00:	push	{lr}		; (str lr, [sp, #-4]!)
   11e04:	ldr	lr, [pc, #4]	; 11e10 <pthread_mutex_unlock@plt-0x4>
   11e08:	add	lr, pc, lr
   11e0c:	ldr	pc, [lr, #8]!
   11e10:	strdeq	r6, [r2], -r0

00011e14 <pthread_mutex_unlock@plt>:
   11e14:	add	ip, pc, #0, 12
   11e18:	add	ip, ip, #155648	; 0x26000
   11e1c:	ldr	pc, [ip, #496]!	; 0x1f0

00011e20 <fdopen@plt>:
   11e20:	add	ip, pc, #0, 12
   11e24:	add	ip, ip, #155648	; 0x26000
   11e28:	ldr	pc, [ip, #488]!	; 0x1e8

00011e2c <calloc@plt>:
   11e2c:	add	ip, pc, #0, 12
   11e30:	add	ip, ip, #155648	; 0x26000
   11e34:	ldr	pc, [ip, #480]!	; 0x1e0

00011e38 <fputs_unlocked@plt>:
   11e38:	add	ip, pc, #0, 12
   11e3c:	add	ip, ip, #155648	; 0x26000
   11e40:	ldr	pc, [ip, #472]!	; 0x1d8

00011e44 <raise@plt>:
   11e44:	add	ip, pc, #0, 12
   11e48:	add	ip, ip, #155648	; 0x26000
   11e4c:	ldr	pc, [ip, #464]!	; 0x1d0

00011e50 <strcmp@plt>:
   11e50:	add	ip, pc, #0, 12
   11e54:	add	ip, ip, #155648	; 0x26000
   11e58:	ldr	pc, [ip, #456]!	; 0x1c8

00011e5c <strtol@plt>:
   11e5c:	add	ip, pc, #0, 12
   11e60:	add	ip, ip, #155648	; 0x26000
   11e64:	ldr	pc, [ip, #448]!	; 0x1c0

00011e68 <posix_fadvise64@plt>:
   11e68:	add	ip, pc, #0, 12
   11e6c:	add	ip, ip, #155648	; 0x26000
   11e70:	ldr	pc, [ip, #440]!	; 0x1b8

00011e74 <pause@plt>:
   11e74:	add	ip, pc, #0, 12
   11e78:	add	ip, ip, #155648	; 0x26000
   11e7c:	ldr	pc, [ip, #432]!	; 0x1b0

00011e80 <pthread_mutex_destroy@plt>:
   11e80:	add	ip, pc, #0, 12
   11e84:	add	ip, ip, #155648	; 0x26000
   11e88:	ldr	pc, [ip, #424]!	; 0x1a8

00011e8c <fflush@plt>:
   11e8c:	add	ip, pc, #0, 12
   11e90:	add	ip, ip, #155648	; 0x26000
   11e94:	ldr	pc, [ip, #416]!	; 0x1a0

00011e98 <wcwidth@plt>:
   11e98:	add	ip, pc, #0, 12
   11e9c:	add	ip, ip, #155648	; 0x26000
   11ea0:	ldr	pc, [ip, #408]!	; 0x198

00011ea4 <memmove@plt>:
   11ea4:	add	ip, pc, #0, 12
   11ea8:	add	ip, ip, #155648	; 0x26000
   11eac:	ldr	pc, [ip, #400]!	; 0x190

00011eb0 <free@plt>:
   11eb0:	add	ip, pc, #0, 12
   11eb4:	add	ip, ip, #155648	; 0x26000
   11eb8:	ldr	pc, [ip, #392]!	; 0x188

00011ebc <pthread_mutex_lock@plt>:
   11ebc:	add	ip, pc, #0, 12
   11ec0:	add	ip, ip, #155648	; 0x26000
   11ec4:	ldr	pc, [ip, #384]!	; 0x180

00011ec8 <nanosleep@plt>:
   11ec8:	add	ip, pc, #0, 12
   11ecc:	add	ip, ip, #155648	; 0x26000
   11ed0:	ldr	pc, [ip, #376]!	; 0x178

00011ed4 <ferror@plt>:
   11ed4:	add	ip, pc, #0, 12
   11ed8:	add	ip, ip, #155648	; 0x26000
   11edc:	ldr	pc, [ip, #368]!	; 0x170

00011ee0 <_exit@plt>:
   11ee0:	add	ip, pc, #0, 12
   11ee4:	add	ip, ip, #155648	; 0x26000
   11ee8:	ldr	pc, [ip, #360]!	; 0x168

00011eec <memcpy@plt>:
   11eec:	add	ip, pc, #0, 12
   11ef0:	add	ip, ip, #155648	; 0x26000
   11ef4:	ldr	pc, [ip, #352]!	; 0x160

00011ef8 <execlp@plt>:
   11ef8:	add	ip, pc, #0, 12
   11efc:	add	ip, ip, #155648	; 0x26000
   11f00:	ldr	pc, [ip, #344]!	; 0x158

00011f04 <pthread_mutex_init@plt>:
   11f04:	add	ip, pc, #0, 12
   11f08:	add	ip, ip, #155648	; 0x26000
   11f0c:	ldr	pc, [ip, #336]!	; 0x150

00011f10 <__strtoull_internal@plt>:
   11f10:	add	ip, pc, #0, 12
   11f14:	add	ip, ip, #155648	; 0x26000
   11f18:	ldr	pc, [ip, #328]!	; 0x148

00011f1c <mbsinit@plt>:
   11f1c:	add	ip, pc, #0, 12
   11f20:	add	ip, ip, #155648	; 0x26000
   11f24:	ldr	pc, [ip, #320]!	; 0x140

00011f28 <signal@plt>:
   11f28:	add	ip, pc, #0, 12
   11f2c:	add	ip, ip, #155648	; 0x26000
   11f30:	ldr	pc, [ip, #312]!	; 0x138

00011f34 <__sched_cpucount@plt>:
   11f34:	add	ip, pc, #0, 12
   11f38:	add	ip, ip, #155648	; 0x26000
   11f3c:	ldr	pc, [ip, #304]!	; 0x130

00011f40 <strtold@plt>:
   11f40:	add	ip, pc, #0, 12
   11f44:	add	ip, ip, #155648	; 0x26000
   11f48:	ldr	pc, [ip, #296]!	; 0x128

00011f4c <ftruncate64@plt>:
   11f4c:	add	ip, pc, #0, 12
   11f50:	add	ip, ip, #155648	; 0x26000
   11f54:	ldr	pc, [ip, #288]!	; 0x120

00011f58 <fwrite_unlocked@plt>:
   11f58:	add	ip, pc, #0, 12
   11f5c:	add	ip, ip, #155648	; 0x26000
   11f60:	ldr	pc, [ip, #280]!	; 0x118

00011f64 <memcmp@plt>:
   11f64:	add	ip, pc, #0, 12
   11f68:	add	ip, ip, #155648	; 0x26000
   11f6c:	ldr	pc, [ip, #272]!	; 0x110

00011f70 <stpcpy@plt>:
   11f70:	add	ip, pc, #0, 12
   11f74:	add	ip, ip, #155648	; 0x26000
   11f78:	ldr	pc, [ip, #264]!	; 0x108

00011f7c <dcgettext@plt>:
   11f7c:	add	ip, pc, #0, 12
   11f80:	add	ip, ip, #155648	; 0x26000
   11f84:	ldr	pc, [ip, #256]!	; 0x100

00011f88 <pthread_cond_init@plt>:
   11f88:	add	ip, pc, #0, 12
   11f8c:	add	ip, ip, #155648	; 0x26000
   11f90:	ldr	pc, [ip, #248]!	; 0xf8

00011f94 <sysconf@plt>:
   11f94:	add	ip, pc, #0, 12
   11f98:	add	ip, ip, #155648	; 0x26000
   11f9c:	ldr	pc, [ip, #240]!	; 0xf0

00011fa0 <unlink@plt>:
   11fa0:	add	ip, pc, #0, 12
   11fa4:	add	ip, ip, #155648	; 0x26000
   11fa8:	ldr	pc, [ip, #232]!	; 0xe8

00011fac <dup2@plt>:
   11fac:	add	ip, pc, #0, 12
   11fb0:	add	ip, ip, #155648	; 0x26000
   11fb4:	ldr	pc, [ip, #224]!	; 0xe0

00011fb8 <getrlimit64@plt>:
   11fb8:	add	ip, pc, #0, 12
   11fbc:	add	ip, ip, #155648	; 0x26000
   11fc0:	ldr	pc, [ip, #216]!	; 0xd8

00011fc4 <realloc@plt>:
   11fc4:	add	ip, pc, #0, 12
   11fc8:	add	ip, ip, #155648	; 0x26000
   11fcc:	ldr	pc, [ip, #208]!	; 0xd0

00011fd0 <sigismember@plt>:
   11fd0:	add	ip, pc, #0, 12
   11fd4:	add	ip, ip, #155648	; 0x26000
   11fd8:	ldr	pc, [ip, #200]!	; 0xc8

00011fdc <textdomain@plt>:
   11fdc:	add	ip, pc, #0, 12
   11fe0:	add	ip, ip, #155648	; 0x26000
   11fe4:	ldr	pc, [ip, #192]!	; 0xc0

00011fe8 <iswcntrl@plt>:
   11fe8:	add	ip, pc, #0, 12
   11fec:	add	ip, ip, #155648	; 0x26000
   11ff0:	ldr	pc, [ip, #184]!	; 0xb8

00011ff4 <pthread_cond_destroy@plt>:
   11ff4:	add	ip, pc, #0, 12
   11ff8:	add	ip, ip, #155648	; 0x26000
   11ffc:	ldr	pc, [ip, #176]!	; 0xb0

00012000 <fflush_unlocked@plt>:
   12000:	add	ip, pc, #0, 12
   12004:	add	ip, ip, #155648	; 0x26000
   12008:	ldr	pc, [ip, #168]!	; 0xa8

0001200c <iswprint@plt>:
   1200c:	add	ip, pc, #0, 12
   12010:	add	ip, ip, #155648	; 0x26000
   12014:	ldr	pc, [ip, #160]!	; 0xa0

00012018 <__fxstat64@plt>:
   12018:	add	ip, pc, #0, 12
   1201c:	add	ip, ip, #155648	; 0x26000
   12020:	ldr	pc, [ip, #152]!	; 0x98

00012024 <sigaction@plt>:
   12024:	add	ip, pc, #0, 12
   12028:	add	ip, ip, #155648	; 0x26000
   1202c:	ldr	pc, [ip, #144]!	; 0x90

00012030 <mkostemp64@plt>:
   12030:	add	ip, pc, #0, 12
   12034:	add	ip, ip, #155648	; 0x26000
   12038:	ldr	pc, [ip, #136]!	; 0x88

0001203c <fwrite@plt>:
   1203c:	add	ip, pc, #0, 12
   12040:	add	ip, ip, #155648	; 0x26000
   12044:	ldr	pc, [ip, #128]!	; 0x80

00012048 <lseek64@plt>:
   12048:	add	ip, pc, #0, 12
   1204c:	add	ip, ip, #155648	; 0x26000
   12050:	ldr	pc, [ip, #120]!	; 0x78

00012054 <__stpcpy_chk@plt>:
   12054:	add	ip, pc, #0, 12
   12058:	add	ip, ip, #155648	; 0x26000
   1205c:	ldr	pc, [ip, #112]!	; 0x70

00012060 <waitpid@plt>:
   12060:	add	ip, pc, #0, 12
   12064:	add	ip, ip, #155648	; 0x26000
   12068:	ldr	pc, [ip, #104]!	; 0x68

0001206c <__ctype_get_mb_cur_max@plt>:
   1206c:	add	ip, pc, #0, 12
   12070:	add	ip, ip, #155648	; 0x26000
   12074:	ldr	pc, [ip, #96]!	; 0x60

00012078 <pthread_sigmask@plt>:
   12078:	add	ip, pc, #0, 12
   1207c:	add	ip, ip, #155648	; 0x26000
   12080:	ldr	pc, [ip, #88]!	; 0x58

00012084 <pthread_create@plt>:
   12084:	add	ip, pc, #0, 12
   12088:	add	ip, ip, #155648	; 0x26000
   1208c:	ldr	pc, [ip, #80]!	; 0x50

00012090 <__fpending@plt>:
   12090:	add	ip, pc, #0, 12
   12094:	add	ip, ip, #155648	; 0x26000
   12098:	ldr	pc, [ip, #72]!	; 0x48

0001209c <mbrtowc@plt>:
   1209c:	add	ip, pc, #0, 12
   120a0:	add	ip, ip, #155648	; 0x26000
   120a4:	ldr	pc, [ip, #64]!	; 0x40

000120a8 <error@plt>:
   120a8:	add	ip, pc, #0, 12
   120ac:	add	ip, ip, #155648	; 0x26000
   120b0:	ldr	pc, [ip, #56]!	; 0x38

000120b4 <open64@plt>:
   120b4:	add	ip, pc, #0, 12
   120b8:	add	ip, ip, #155648	; 0x26000
   120bc:	ldr	pc, [ip, #48]!	; 0x30

000120c0 <strcoll@plt>:
   120c0:	add	ip, pc, #0, 12
   120c4:	add	ip, ip, #155648	; 0x26000
   120c8:	ldr	pc, [ip, #40]!	; 0x28

000120cc <getenv@plt>:
   120cc:	add	ip, pc, #0, 12
   120d0:	add	ip, ip, #155648	; 0x26000
   120d4:	ldr	pc, [ip, #32]!

000120d8 <mkstemp64@plt>:
   120d8:	add	ip, pc, #0, 12
   120dc:	add	ip, ip, #155648	; 0x26000
   120e0:	ldr	pc, [ip, #24]!

000120e4 <sysinfo@plt>:
   120e4:	add	ip, pc, #0, 12
   120e8:	add	ip, ip, #155648	; 0x26000
   120ec:	ldr	pc, [ip, #16]!

000120f0 <malloc@plt>:
   120f0:	add	ip, pc, #0, 12
   120f4:	add	ip, ip, #155648	; 0x26000
   120f8:	ldr	pc, [ip, #8]!

000120fc <sigaddset@plt>:
   120fc:	add	ip, pc, #0, 12
   12100:	add	ip, ip, #155648	; 0x26000
   12104:	ldr	pc, [ip, #0]!

00012108 <__libc_start_main@plt>:
   12108:	add	ip, pc, #0, 12
   1210c:	add	ip, ip, #151552	; 0x25000
   12110:	ldr	pc, [ip, #4088]!	; 0xff8

00012114 <__freading@plt>:
   12114:	add	ip, pc, #0, 12
   12118:	add	ip, ip, #151552	; 0x25000
   1211c:	ldr	pc, [ip, #4080]!	; 0xff0

00012120 <__ctype_toupper_loc@plt>:
   12120:	add	ip, pc, #0, 12
   12124:	add	ip, ip, #151552	; 0x25000
   12128:	ldr	pc, [ip, #4072]!	; 0xfe8

0001212c <__gmon_start__@plt>:
   1212c:	add	ip, pc, #0, 12
   12130:	add	ip, ip, #151552	; 0x25000
   12134:	ldr	pc, [ip, #4064]!	; 0xfe0

00012138 <getopt_long@plt>:
   12138:	add	ip, pc, #0, 12
   1213c:	add	ip, ip, #151552	; 0x25000
   12140:	ldr	pc, [ip, #4056]!	; 0xfd8

00012144 <__ctype_b_loc@plt>:
   12144:	add	ip, pc, #0, 12
   12148:	add	ip, ip, #151552	; 0x25000
   1214c:	ldr	pc, [ip, #4048]!	; 0xfd0

00012150 <exit@plt>:
   12150:	add	ip, pc, #0, 12
   12154:	add	ip, ip, #151552	; 0x25000
   12158:	ldr	pc, [ip, #4040]!	; 0xfc8

0001215c <bcmp@plt>:
   1215c:	add	ip, pc, #0, 12
   12160:	add	ip, ip, #151552	; 0x25000
   12164:	ldr	pc, [ip, #4032]!	; 0xfc0

00012168 <strtoul@plt>:
   12168:	add	ip, pc, #0, 12
   1216c:	add	ip, ip, #151552	; 0x25000
   12170:	ldr	pc, [ip, #4024]!	; 0xfb8

00012174 <strlen@plt>:
   12174:	add	ip, pc, #0, 12
   12178:	add	ip, ip, #151552	; 0x25000
   1217c:	ldr	pc, [ip, #4016]!	; 0xfb0

00012180 <strchr@plt>:
   12180:	add	ip, pc, #0, 12
   12184:	add	ip, ip, #151552	; 0x25000
   12188:	ldr	pc, [ip, #4008]!	; 0xfa8

0001218c <strxfrm@plt>:
   1218c:	add	ip, pc, #0, 12
   12190:	add	ip, ip, #151552	; 0x25000
   12194:	ldr	pc, [ip, #4000]!	; 0xfa0

00012198 <__errno_location@plt>:
   12198:	add	ip, pc, #0, 12
   1219c:	add	ip, ip, #151552	; 0x25000
   121a0:	ldr	pc, [ip, #3992]!	; 0xf98

000121a4 <__cxa_atexit@plt>:
   121a4:	add	ip, pc, #0, 12
   121a8:	add	ip, ip, #151552	; 0x25000
   121ac:	ldr	pc, [ip, #3984]!	; 0xf90

000121b0 <setvbuf@plt>:
   121b0:	add	ip, pc, #0, 12
   121b4:	add	ip, ip, #151552	; 0x25000
   121b8:	ldr	pc, [ip, #3976]!	; 0xf88

000121bc <memset@plt>:
   121bc:	add	ip, pc, #0, 12
   121c0:	add	ip, ip, #151552	; 0x25000
   121c4:	ldr	pc, [ip, #3968]!	; 0xf80

000121c8 <fgetc@plt>:
   121c8:	add	ip, pc, #0, 12
   121cc:	add	ip, ip, #151552	; 0x25000
   121d0:	ldr	pc, [ip, #3960]!	; 0xf78

000121d4 <__printf_chk@plt>:
   121d4:	add	ip, pc, #0, 12
   121d8:	add	ip, ip, #151552	; 0x25000
   121dc:	ldr	pc, [ip, #3952]!	; 0xf70

000121e0 <write@plt>:
   121e0:	add	ip, pc, #0, 12
   121e4:	add	ip, ip, #151552	; 0x25000
   121e8:	ldr	pc, [ip, #3944]!	; 0xf68

000121ec <fileno@plt>:
   121ec:	add	ip, pc, #0, 12
   121f0:	add	ip, ip, #151552	; 0x25000
   121f4:	ldr	pc, [ip, #3936]!	; 0xf60

000121f8 <__fprintf_chk@plt>:
   121f8:	add	ip, pc, #0, 12
   121fc:	add	ip, ip, #151552	; 0x25000
   12200:	ldr	pc, [ip, #3928]!	; 0xf58

00012204 <memchr@plt>:
   12204:	add	ip, pc, #0, 12
   12208:	add	ip, ip, #151552	; 0x25000
   1220c:	ldr	pc, [ip, #3920]!	; 0xf50

00012210 <fclose@plt>:
   12210:	add	ip, pc, #0, 12
   12214:	add	ip, ip, #151552	; 0x25000
   12218:	ldr	pc, [ip, #3912]!	; 0xf48

0001221c <pipe@plt>:
   1221c:	add	ip, pc, #0, 12
   12220:	add	ip, ip, #151552	; 0x25000
   12224:	ldr	pc, [ip, #3904]!	; 0xf40

00012228 <fseeko64@plt>:
   12228:	add	ip, pc, #0, 12
   1222c:	add	ip, ip, #151552	; 0x25000
   12230:	ldr	pc, [ip, #3896]!	; 0xf38

00012234 <fcntl64@plt>:
   12234:	add	ip, pc, #0, 12
   12238:	add	ip, ip, #151552	; 0x25000
   1223c:	ldr	pc, [ip, #3888]!	; 0xf30

00012240 <__overflow@plt>:
   12240:	add	ip, pc, #0, 12
   12244:	add	ip, ip, #151552	; 0x25000
   12248:	ldr	pc, [ip, #3880]!	; 0xf28

0001224c <setlocale@plt>:
   1224c:	add	ip, pc, #0, 12
   12250:	add	ip, ip, #151552	; 0x25000
   12254:	ldr	pc, [ip, #3872]!	; 0xf20

00012258 <sigemptyset@plt>:
   12258:	add	ip, pc, #0, 12
   1225c:	add	ip, ip, #151552	; 0x25000
   12260:	ldr	pc, [ip, #3864]!	; 0xf18

00012264 <fork@plt>:
   12264:	add	ip, pc, #0, 12
   12268:	add	ip, ip, #151552	; 0x25000
   1226c:	ldr	pc, [ip, #3856]!	; 0xf10

00012270 <__explicit_bzero_chk@plt>:
   12270:	add	ip, pc, #0, 12
   12274:	add	ip, ip, #151552	; 0x25000
   12278:	ldr	pc, [ip, #3848]!	; 0xf08

0001227c <strrchr@plt>:
   1227c:	add	ip, pc, #0, 12
   12280:	add	ip, ip, #151552	; 0x25000
   12284:	ldr	pc, [ip, #3840]!	; 0xf00

00012288 <pthread_join@plt>:
   12288:	add	ip, pc, #0, 12
   1228c:	add	ip, ip, #151552	; 0x25000
   12290:	ldr	pc, [ip, #3832]!	; 0xef8

00012294 <nl_langinfo@plt>:
   12294:	add	ip, pc, #0, 12
   12298:	add	ip, ip, #151552	; 0x25000
   1229c:	ldr	pc, [ip, #3824]!	; 0xef0

000122a0 <localeconv@plt>:
   122a0:	add	ip, pc, #0, 12
   122a4:	add	ip, ip, #151552	; 0x25000
   122a8:	ldr	pc, [ip, #3816]!	; 0xee8

000122ac <clearerr_unlocked@plt>:
   122ac:	add	ip, pc, #0, 12
   122b0:	add	ip, ip, #151552	; 0x25000
   122b4:	ldr	pc, [ip, #3808]!	; 0xee0

000122b8 <fopen64@plt>:
   122b8:	add	ip, pc, #0, 12
   122bc:	add	ip, ip, #151552	; 0x25000
   122c0:	ldr	pc, [ip, #3800]!	; 0xed8

000122c4 <qsort@plt>:
   122c4:	add	ip, pc, #0, 12
   122c8:	add	ip, ip, #151552	; 0x25000
   122cc:	ldr	pc, [ip, #3792]!	; 0xed0

000122d0 <pipe2@plt>:
   122d0:	add	ip, pc, #0, 12
   122d4:	add	ip, ip, #151552	; 0x25000
   122d8:	ldr	pc, [ip, #3784]!	; 0xec8

000122dc <pthread_cond_wait@plt>:
   122dc:	add	ip, pc, #0, 12
   122e0:	add	ip, ip, #151552	; 0x25000
   122e4:	ldr	pc, [ip, #3776]!	; 0xec0

000122e8 <euidaccess@plt>:
   122e8:	add	ip, pc, #0, 12
   122ec:	add	ip, ip, #151552	; 0x25000
   122f0:	ldr	pc, [ip, #3768]!	; 0xeb8

000122f4 <sched_getaffinity@plt>:
   122f4:	add	ip, pc, #0, 12
   122f8:	add	ip, ip, #151552	; 0x25000
   122fc:	ldr	pc, [ip, #3760]!	; 0xeb0

00012300 <bindtextdomain@plt>:
   12300:	add	ip, pc, #0, 12
   12304:	add	ip, ip, #151552	; 0x25000
   12308:	ldr	pc, [ip, #3752]!	; 0xea8

0001230c <fread_unlocked@plt>:
   1230c:	add	ip, pc, #0, 12
   12310:	add	ip, ip, #151552	; 0x25000
   12314:	ldr	pc, [ip, #3744]!	; 0xea0

00012318 <getrandom@plt>:
   12318:	add	ip, pc, #0, 12
   1231c:	add	ip, ip, #151552	; 0x25000
   12320:	ldr	pc, [ip, #3736]!	; 0xe98

00012324 <__xstat64@plt>:
   12324:	add	ip, pc, #0, 12
   12328:	add	ip, ip, #151552	; 0x25000
   1232c:	ldr	pc, [ip, #3728]!	; 0xe90

00012330 <strncmp@plt>:
   12330:	add	ip, pc, #0, 12
   12334:	add	ip, ip, #151552	; 0x25000
   12338:	ldr	pc, [ip, #3720]!	; 0xe88

0001233c <pthread_cond_signal@plt>:
   1233c:	add	ip, pc, #0, 12
   12340:	add	ip, ip, #151552	; 0x25000
   12344:	ldr	pc, [ip, #3712]!	; 0xe80

00012348 <abort@plt>:
   12348:	add	ip, pc, #0, 12
   1234c:	add	ip, ip, #151552	; 0x25000
   12350:	ldr	pc, [ip, #3704]!	; 0xe78

00012354 <close@plt>:
   12354:	add	ip, pc, #0, 12
   12358:	add	ip, ip, #151552	; 0x25000
   1235c:	ldr	pc, [ip, #3696]!	; 0xe70

00012360 <dcngettext@plt>:
   12360:	add	ip, pc, #0, 12
   12364:	add	ip, ip, #151552	; 0x25000
   12368:	ldr	pc, [ip, #3688]!	; 0xe68

0001236c <__assert_fail@plt>:
   1236c:	add	ip, pc, #0, 12
   12370:	add	ip, ip, #151552	; 0x25000
   12374:	ldr	pc, [ip, #3680]!	; 0xe60

Disassembly of section .text:

00012380 <_obstack_begin@@Base-0x123e4>:
   12380:	mov	fp, #0
   12384:	mov	lr, #0
   12388:	pop	{r1}		; (ldr r1, [sp], #4)
   1238c:	mov	r2, sp
   12390:	push	{r2}		; (str r2, [sp, #-4]!)
   12394:	push	{r0}		; (str r0, [sp, #-4]!)
   12398:	ldr	ip, [pc, #16]	; 123b0 <__assert_fail@plt+0x44>
   1239c:	push	{ip}		; (str ip, [sp, #-4]!)
   123a0:	ldr	r0, [pc, #12]	; 123b4 <__assert_fail@plt+0x48>
   123a4:	ldr	r3, [pc, #12]	; 123b8 <__assert_fail@plt+0x4c>
   123a8:	bl	12108 <__libc_start_main@plt>
   123ac:	bl	12348 <abort@plt>
   123b0:	andeq	r5, r2, r0, lsl #3
   123b4:	andeq	r2, r1, r0, asr #17
   123b8:	andeq	r5, r2, r0, lsr #2
   123bc:	ldr	r3, [pc, #20]	; 123d8 <__assert_fail@plt+0x6c>
   123c0:	ldr	r2, [pc, #20]	; 123dc <__assert_fail@plt+0x70>
   123c4:	add	r3, pc, r3
   123c8:	ldr	r2, [r3, r2]
   123cc:	cmp	r2, #0
   123d0:	bxeq	lr
   123d4:	b	1212c <__gmon_start__@plt>
   123d8:	andeq	r5, r2, r4, lsr ip
   123dc:	ldrdeq	r0, [r0], -r8
   123e0:	ldr	r0, [pc, #24]	; 12400 <__assert_fail@plt+0x94>
   123e4:	ldr	r3, [pc, #24]	; 12404 <__assert_fail@plt+0x98>
   123e8:	cmp	r3, r0
   123ec:	bxeq	lr
   123f0:	ldr	r3, [pc, #16]	; 12408 <__assert_fail@plt+0x9c>
   123f4:	cmp	r3, #0
   123f8:	bxeq	lr
   123fc:	bx	r3
   12400:			; <UNDEFINED> instruction: 0x000382bc
   12404:			; <UNDEFINED> instruction: 0x000382bc
   12408:	andeq	r0, r0, r0
   1240c:	ldr	r0, [pc, #36]	; 12438 <__assert_fail@plt+0xcc>
   12410:	ldr	r1, [pc, #36]	; 1243c <__assert_fail@plt+0xd0>
   12414:	sub	r1, r1, r0
   12418:	asr	r1, r1, #2
   1241c:	add	r1, r1, r1, lsr #31
   12420:	asrs	r1, r1, #1
   12424:	bxeq	lr
   12428:	ldr	r3, [pc, #16]	; 12440 <__assert_fail@plt+0xd4>
   1242c:	cmp	r3, #0
   12430:	bxeq	lr
   12434:	bx	r3
   12438:			; <UNDEFINED> instruction: 0x000382bc
   1243c:			; <UNDEFINED> instruction: 0x000382bc
   12440:	andeq	r0, r0, r0
   12444:	push	{r4, lr}
   12448:	ldr	r4, [pc, #24]	; 12468 <__assert_fail@plt+0xfc>
   1244c:	ldrb	r3, [r4]
   12450:	cmp	r3, #0
   12454:	popne	{r4, pc}
   12458:	bl	123e0 <__assert_fail@plt+0x74>
   1245c:	mov	r3, #1
   12460:	strb	r3, [r4]
   12464:	pop	{r4, pc}
   12468:	andeq	r8, r3, r4, ror #5
   1246c:	b	1240c <__assert_fail@plt+0xa0>
   12470:	push	{fp, lr}
   12474:	mov	fp, sp
   12478:	sub	sp, sp, #56	; 0x38
   1247c:	mov	r4, r0
   12480:	cmp	r0, #0
   12484:	bne	12878 <__assert_fail@plt+0x50c>
   12488:	movw	r1, #20947	; 0x51d3
   1248c:	mov	r0, #0
   12490:	mov	r2, #5
   12494:	movt	r1, #2
   12498:	bl	11f7c <dcgettext@plt>
   1249c:	mov	r1, r0
   124a0:	movw	r0, #35024	; 0x88d0
   124a4:	movt	r0, #3
   124a8:	ldr	r2, [r0]
   124ac:	mov	r0, #1
   124b0:	mov	r3, r2
   124b4:	bl	121d4 <__printf_chk@plt>
   124b8:	movw	r1, #21018	; 0x521a
   124bc:	mov	r0, #0
   124c0:	mov	r2, #5
   124c4:	movt	r1, #2
   124c8:	bl	11f7c <dcgettext@plt>
   124cc:	movw	r7, #33500	; 0x82dc
   124d0:	movt	r7, #3
   124d4:	ldr	r1, [r7]
   124d8:	bl	11e38 <fputs_unlocked@plt>
   124dc:	movw	r1, #25584	; 0x63f0
   124e0:	mov	r0, #0
   124e4:	mov	r2, #5
   124e8:	movt	r1, #2
   124ec:	bl	11f7c <dcgettext@plt>
   124f0:	ldr	r1, [r7]
   124f4:	bl	11e38 <fputs_unlocked@plt>
   124f8:	movw	r1, #25640	; 0x6428
   124fc:	mov	r0, #0
   12500:	mov	r2, #5
   12504:	movt	r1, #2
   12508:	bl	11f7c <dcgettext@plt>
   1250c:	ldr	r1, [r7]
   12510:	bl	11e38 <fputs_unlocked@plt>
   12514:	movw	r1, #21081	; 0x5259
   12518:	mov	r0, #0
   1251c:	mov	r2, #5
   12520:	movt	r1, #2
   12524:	bl	11f7c <dcgettext@plt>
   12528:	ldr	r1, [r7]
   1252c:	bl	11e38 <fputs_unlocked@plt>
   12530:	movw	r1, #21101	; 0x526d
   12534:	mov	r0, #0
   12538:	mov	r2, #5
   1253c:	movt	r1, #2
   12540:	bl	11f7c <dcgettext@plt>
   12544:	ldr	r1, [r7]
   12548:	bl	11e38 <fputs_unlocked@plt>
   1254c:	movw	r1, #21305	; 0x5339
   12550:	mov	r0, #0
   12554:	mov	r2, #5
   12558:	movt	r1, #2
   1255c:	bl	11f7c <dcgettext@plt>
   12560:	ldr	r1, [r7]
   12564:	bl	11e38 <fputs_unlocked@plt>
   12568:	movw	r1, #21516	; 0x540c
   1256c:	mov	r0, #0
   12570:	mov	r2, #5
   12574:	movt	r1, #2
   12578:	bl	11f7c <dcgettext@plt>
   1257c:	ldr	r1, [r7]
   12580:	bl	11e38 <fputs_unlocked@plt>
   12584:	movw	r1, #21592	; 0x5458
   12588:	mov	r0, #0
   1258c:	mov	r2, #5
   12590:	movt	r1, #2
   12594:	bl	11f7c <dcgettext@plt>
   12598:	ldr	r1, [r7]
   1259c:	bl	11e38 <fputs_unlocked@plt>
   125a0:	movw	r1, #21866	; 0x556a
   125a4:	mov	r0, #0
   125a8:	mov	r2, #5
   125ac:	movt	r1, #2
   125b0:	bl	11f7c <dcgettext@plt>
   125b4:	ldr	r1, [r7]
   125b8:	bl	11e38 <fputs_unlocked@plt>
   125bc:	movw	r1, #22144	; 0x5680
   125c0:	mov	r0, #0
   125c4:	mov	r2, #5
   125c8:	movt	r1, #2
   125cc:	bl	11f7c <dcgettext@plt>
   125d0:	ldr	r1, [r7]
   125d4:	bl	11e38 <fputs_unlocked@plt>
   125d8:	movw	r1, #22161	; 0x5691
   125dc:	mov	r0, #0
   125e0:	mov	r2, #5
   125e4:	movt	r1, #2
   125e8:	bl	11f7c <dcgettext@plt>
   125ec:	ldr	r1, [r7]
   125f0:	bl	11e38 <fputs_unlocked@plt>
   125f4:	movw	r1, #22279	; 0x5707
   125f8:	mov	r0, #0
   125fc:	mov	r2, #5
   12600:	movt	r1, #2
   12604:	bl	11f7c <dcgettext@plt>
   12608:	ldr	r1, [r7]
   1260c:	bl	11e38 <fputs_unlocked@plt>
   12610:	movw	r1, #22556	; 0x581c
   12614:	mov	r0, #0
   12618:	mov	r2, #5
   1261c:	movt	r1, #2
   12620:	bl	11f7c <dcgettext@plt>
   12624:	ldr	r1, [r7]
   12628:	bl	11e38 <fputs_unlocked@plt>
   1262c:	movw	r1, #22904	; 0x5978
   12630:	mov	r0, #0
   12634:	mov	r2, #5
   12638:	movt	r1, #2
   1263c:	bl	11f7c <dcgettext@plt>
   12640:	ldr	r1, [r7]
   12644:	bl	11e38 <fputs_unlocked@plt>
   12648:	movw	r1, #23048	; 0x5a08
   1264c:	mov	r0, #0
   12650:	mov	r2, #5
   12654:	movt	r1, #2
   12658:	bl	11f7c <dcgettext@plt>
   1265c:	ldr	r1, [r7]
   12660:	bl	11e38 <fputs_unlocked@plt>
   12664:	movw	r1, #23264	; 0x5ae0
   12668:	mov	r0, #0
   1266c:	mov	r2, #5
   12670:	movt	r1, #2
   12674:	bl	11f7c <dcgettext@plt>
   12678:	movw	r2, #23717	; 0x5ca5
   1267c:	mov	r1, r0
   12680:	mov	r0, #1
   12684:	movt	r2, #2
   12688:	bl	121d4 <__printf_chk@plt>
   1268c:	movw	r1, #23722	; 0x5caa
   12690:	mov	r0, #0
   12694:	mov	r2, #5
   12698:	movt	r1, #2
   1269c:	bl	11f7c <dcgettext@plt>
   126a0:	ldr	r1, [r7]
   126a4:	bl	11e38 <fputs_unlocked@plt>
   126a8:	movw	r1, #23786	; 0x5cea
   126ac:	mov	r0, #0
   126b0:	mov	r2, #5
   126b4:	movt	r1, #2
   126b8:	bl	11f7c <dcgettext@plt>
   126bc:	ldr	r1, [r7]
   126c0:	bl	11e38 <fputs_unlocked@plt>
   126c4:	movw	r1, #23831	; 0x5d17
   126c8:	mov	r0, #0
   126cc:	mov	r2, #5
   126d0:	movt	r1, #2
   126d4:	bl	11f7c <dcgettext@plt>
   126d8:	ldr	r1, [r7]
   126dc:	bl	11e38 <fputs_unlocked@plt>
   126e0:	movw	r1, #23885	; 0x5d4d
   126e4:	mov	r0, #0
   126e8:	mov	r2, #5
   126ec:	movt	r1, #2
   126f0:	bl	11f7c <dcgettext@plt>
   126f4:	ldr	r1, [r7]
   126f8:	bl	11e38 <fputs_unlocked@plt>
   126fc:	movw	r1, #24489	; 0x5fa9
   12700:	mov	r0, #0
   12704:	mov	r2, #5
   12708:	movt	r1, #2
   1270c:	bl	11f7c <dcgettext@plt>
   12710:	ldr	r1, [r7]
   12714:	bl	11e38 <fputs_unlocked@plt>
   12718:	movw	r0, #28672	; 0x7000
   1271c:	mov	r2, #48	; 0x30
   12720:	mov	r6, sp
   12724:	movw	r5, #24874	; 0x612a
   12728:	movt	r0, #2
   1272c:	movt	r5, #2
   12730:	add	r1, r0, #32
   12734:	add	r3, r0, #16
   12738:	vld1.64	{d18-d19}, [r0], r2
   1273c:	vld1.64	{d16-d17}, [r1]
   12740:	vld1.64	{d20-d21}, [r3]
   12744:	vldr	d22, [r0]
   12748:	add	r1, r6, #32
   1274c:	add	r0, r6, #16
   12750:	vst1.64	{d16-d17}, [r1]
   12754:	movw	r1, #25715	; 0x6473
   12758:	vst1.64	{d20-d21}, [r0]
   1275c:	mov	r0, r6
   12760:	movt	r1, #2
   12764:	vst1.64	{d18-d19}, [r0], r2
   12768:	vstr	d22, [r0]
   1276c:	mov	r0, r5
   12770:	bl	11e50 <strcmp@plt>
   12774:	cmp	r0, #0
   12778:	ldrne	r1, [r6, #8]!
   1277c:	cmpne	r1, #0
   12780:	bne	1276c <__assert_fail@plt+0x400>
   12784:	movw	r1, #25810	; 0x64d2
   12788:	ldr	r6, [r6, #4]
   1278c:	mov	r0, #0
   12790:	mov	r2, #5
   12794:	movt	r1, #2
   12798:	bl	11f7c <dcgettext@plt>
   1279c:	movw	r2, #25148	; 0x623c
   127a0:	movw	r3, #25833	; 0x64e9
   127a4:	mov	r1, r0
   127a8:	mov	r0, #1
   127ac:	movt	r2, #2
   127b0:	movt	r3, #2
   127b4:	bl	121d4 <__printf_chk@plt>
   127b8:	cmp	r6, #0
   127bc:	mov	r0, #5
   127c0:	mov	r1, #0
   127c4:	moveq	r6, r5
   127c8:	bl	1224c <setlocale@plt>
   127cc:	cmp	r0, #0
   127d0:	beq	12808 <__assert_fail@plt+0x49c>
   127d4:	movw	r1, #25873	; 0x6511
   127d8:	mov	r2, #3
   127dc:	movt	r1, #2
   127e0:	bl	12330 <strncmp@plt>
   127e4:	cmp	r0, #0
   127e8:	beq	12808 <__assert_fail@plt+0x49c>
   127ec:	movw	r1, #25877	; 0x6515
   127f0:	mov	r0, #0
   127f4:	mov	r2, #5
   127f8:	movt	r1, #2
   127fc:	bl	11f7c <dcgettext@plt>
   12800:	ldr	r1, [r7]
   12804:	bl	11e38 <fputs_unlocked@plt>
   12808:	movw	r1, #25948	; 0x655c
   1280c:	mov	r0, #0
   12810:	mov	r2, #5
   12814:	movt	r1, #2
   12818:	bl	11f7c <dcgettext@plt>
   1281c:	movw	r2, #25833	; 0x64e9
   12820:	mov	r1, r0
   12824:	mov	r0, #1
   12828:	mov	r3, r5
   1282c:	movt	r2, #2
   12830:	bl	121d4 <__printf_chk@plt>
   12834:	movw	r1, #25975	; 0x6577
   12838:	mov	r0, #0
   1283c:	mov	r2, #5
   12840:	movt	r1, #2
   12844:	bl	11f7c <dcgettext@plt>
   12848:	mov	r1, r0
   1284c:	movw	r0, #25743	; 0x648f
   12850:	movw	r3, #21100	; 0x526c
   12854:	cmp	r6, r5
   12858:	mov	r2, r6
   1285c:	movt	r0, #2
   12860:	movt	r3, #2
   12864:	moveq	r3, r0
   12868:	mov	r0, #1
   1286c:	bl	121d4 <__printf_chk@plt>
   12870:	mov	r0, r4
   12874:	bl	12150 <exit@plt>
   12878:	movw	r0, #33488	; 0x82d0
   1287c:	movw	r1, #20908	; 0x51ac
   12880:	mov	r2, #5
   12884:	movt	r0, #3
   12888:	movt	r1, #2
   1288c:	ldr	r5, [r0]
   12890:	mov	r0, #0
   12894:	bl	11f7c <dcgettext@plt>
   12898:	mov	r2, r0
   1289c:	movw	r0, #35024	; 0x88d0
   128a0:	mov	r1, #1
   128a4:	movt	r0, #3
   128a8:	ldr	r3, [r0]
   128ac:	mov	r0, r5
   128b0:	bl	121f8 <__fprintf_chk@plt>
   128b4:	mov	r0, r4
   128b8:	bl	12150 <exit@plt>
   128bc:	nop	{0}
   128c0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   128c4:	add	fp, sp, #28
   128c8:	sub	sp, sp, #4
   128cc:	vpush	{d12-d13}
   128d0:	vpush	{d8-d10}
   128d4:	sub	sp, sp, #528	; 0x210
   128d8:	str	r0, [sp, #112]	; 0x70
   128dc:	movw	r0, #24718	; 0x608e
   128e0:	mov	r5, r1
   128e4:	movt	r0, #2
   128e8:	bl	120cc <getenv@plt>
   128ec:	str	r0, [sp, #116]	; 0x74
   128f0:	bl	1f120 <__assert_fail@plt+0xcdb4>
   128f4:	mov	r4, r0
   128f8:	ldr	r0, [r5]
   128fc:	str	r5, [sp, #120]	; 0x78
   12900:	bl	1f17c <__assert_fail@plt+0xce10>
   12904:	movw	r1, #21100	; 0x526c
   12908:	mov	r0, #6
   1290c:	movt	r1, #2
   12910:	str	r1, [sp, #20]
   12914:	bl	1224c <setlocale@plt>
   12918:	movw	r5, #25152	; 0x6240
   1291c:	movw	r1, #24734	; 0x609e
   12920:	str	r0, [sp, #96]	; 0x60
   12924:	movt	r5, #2
   12928:	movt	r1, #2
   1292c:	mov	r0, r5
   12930:	bl	12300 <bindtextdomain@plt>
   12934:	mov	r0, r5
   12938:	bl	11fdc <textdomain@plt>
   1293c:	movw	r0, #33392	; 0x8270
   12940:	mov	r1, #2
   12944:	movt	r0, #3
   12948:	str	r1, [r0]
   1294c:	mov	r0, #3
   12950:	bl	1d218 <__assert_fail@plt+0xaeac>
   12954:	movw	r1, #33512	; 0x82e8
   12958:	movt	r1, #3
   1295c:	strb	r0, [r1]
   12960:	mov	r0, #2
   12964:	bl	1d218 <__assert_fail@plt+0xaeac>
   12968:	movw	r8, #33513	; 0x82e9
   1296c:	movt	r8, #3
   12970:	strb	r0, [r8]
   12974:	bl	122a0 <localeconv@plt>
   12978:	ldr	r1, [r0]
   1297c:	sub	r3, r4, #3504	; 0xdb0
   12980:	movw	r7, #33514	; 0x82ea
   12984:	mov	r6, #0
   12988:	sub	r3, r3, #196608	; 0x30000
   1298c:	movt	r7, #3
   12990:	cmp	r3, #696	; 0x2b8
   12994:	movwhi	r6, #1
   12998:	ldrb	r2, [r1]
   1299c:	str	r6, [sp, #108]	; 0x6c
   129a0:	cmp	r2, #0
   129a4:	strb	r2, [r7]
   129a8:	beq	129b8 <__assert_fail@plt+0x64c>
   129ac:	ldrb	r1, [r1, #1]
   129b0:	cmp	r1, #0
   129b4:	beq	129c0 <__assert_fail@plt+0x654>
   129b8:	mov	r1, #46	; 0x2e
   129bc:	strb	r1, [r7]
   129c0:	ldr	r0, [r0, #4]
   129c4:	movw	r2, #33516	; 0x82ec
   129c8:	movt	r2, #3
   129cc:	ldrb	r1, [r0]
   129d0:	cmp	r1, #0
   129d4:	str	r1, [r2]
   129d8:	beq	129f8 <__assert_fail@plt+0x68c>
   129dc:	ldrb	r0, [r0, #1]
   129e0:	cmp	r0, #0
   129e4:	beq	12a00 <__assert_fail@plt+0x694>
   129e8:	movw	r0, #33520	; 0x82f0
   129ec:	mov	r1, #1
   129f0:	movt	r0, #3
   129f4:	strb	r1, [r0]
   129f8:	mov	r0, #256	; 0x100
   129fc:	str	r0, [r2]
   12a00:	movw	r0, #33521	; 0x82f1
   12a04:	mov	r4, #0
   12a08:	movt	r0, #3
   12a0c:	strb	r4, [r0]
   12a10:	bl	12144 <__ctype_b_loc@plt>
   12a14:	mov	r7, r0
   12a18:	bl	12120 <__ctype_toupper_loc@plt>
   12a1c:	movw	ip, #33936	; 0x8490
   12a20:	movw	lr, #33680	; 0x8390
   12a24:	movw	r9, #34192	; 0x8590
   12a28:	movw	r2, #34448	; 0x8690
   12a2c:	mov	r1, #1
   12a30:	mov	r3, #0
   12a34:	str	r7, [sp, #124]	; 0x7c
   12a38:	movt	ip, #3
   12a3c:	movt	lr, #3
   12a40:	movt	r9, #3
   12a44:	movt	r2, #3
   12a48:	ldr	r7, [sp, #124]	; 0x7c
   12a4c:	sub	r5, r3, #10
   12a50:	clz	r5, r5
   12a54:	lsr	r5, r5, #5
   12a58:	ldr	r7, [r7]
   12a5c:	add	r7, r7, r4
   12a60:	add	r4, r4, #2
   12a64:	ldrh	r7, [r7]
   12a68:	bic	r6, r1, r7, lsr #14
   12a6c:	strb	r6, [ip, r3]
   12a70:	and	r6, r7, #1
   12a74:	and	r7, r7, #8
   12a78:	orr	r5, r6, r5
   12a7c:	eor	r6, r6, #1
   12a80:	eor	r7, r1, r7, lsr #3
   12a84:	strb	r5, [lr, r3]
   12a88:	subs	r5, r3, #10
   12a8c:	movwne	r5, #1
   12a90:	and	r6, r5, r6
   12a94:	and	r7, r7, r6
   12a98:	strb	r7, [r9, r3]
   12a9c:	ldr	r7, [r0]
   12aa0:	ldr	r7, [r7, r3, lsl #2]
   12aa4:	strb	r7, [r2, r3]
   12aa8:	ldr	r7, [sp, #124]	; 0x7c
   12aac:	add	r3, r3, #1
   12ab0:	cmp	r3, #256	; 0x100
   12ab4:	bne	12a48 <__assert_fail@plt+0x6dc>
   12ab8:	ldrb	r0, [r8]
   12abc:	cmp	r0, #0
   12ac0:	beq	12b88 <__assert_fail@plt+0x81c>
   12ac4:	movw	sl, #14
   12ac8:	movw	r8, #33280	; 0x8200
   12acc:	movw	r5, #34448	; 0x8690
   12ad0:	mov	r9, #0
   12ad4:	movt	sl, #2
   12ad8:	movt	r8, #3
   12adc:	movt	r5, #3
   12ae0:	b	12af4 <__assert_fail@plt+0x788>
   12ae4:	mov	r2, #0
   12ae8:	cmp	r9, #12
   12aec:	strb	r2, [r0, r1]
   12af0:	beq	12b64 <__assert_fail@plt+0x7f8>
   12af4:	add	r0, r9, sl
   12af8:	bl	12294 <nl_langinfo@plt>
   12afc:	mov	r4, r0
   12b00:	bl	12174 <strlen@plt>
   12b04:	mov	r6, r0
   12b08:	add	r0, r0, #1
   12b0c:	bl	22720 <__assert_fail@plt+0x103b4>
   12b10:	mov	r1, r8
   12b14:	cmp	r6, #0
   12b18:	str	r0, [r1, r9, lsl #3]!
   12b1c:	add	r9, r9, #1
   12b20:	str	r9, [r1, #4]
   12b24:	mov	r1, #0
   12b28:	beq	12ae4 <__assert_fail@plt+0x778>
   12b2c:	mov	r1, #0
   12b30:	b	12b40 <__assert_fail@plt+0x7d4>
   12b34:	add	r4, r4, #1
   12b38:	subs	r6, r6, #1
   12b3c:	beq	12ae4 <__assert_fail@plt+0x778>
   12b40:	ldrb	r2, [r4]
   12b44:	ldr	r3, [r7]
   12b48:	ldrb	r3, [r3, r2, lsl #1]
   12b4c:	tst	r3, #1
   12b50:	bne	12b34 <__assert_fail@plt+0x7c8>
   12b54:	ldrb	r2, [r5, r2]
   12b58:	strb	r2, [r0, r1]
   12b5c:	add	r1, r1, #1
   12b60:	b	12b34 <__assert_fail@plt+0x7c8>
   12b64:	movw	r0, #33280	; 0x8200
   12b68:	movw	r3, #29784	; 0x7458
   12b6c:	mov	r1, #12
   12b70:	mov	r2, #8
   12b74:	movt	r0, #3
   12b78:	movt	r3, #1
   12b7c:	bl	122c4 <qsort@plt>
   12b80:	movw	r9, #34192	; 0x8590
   12b84:	movt	r9, #3
   12b88:	movw	r6, #33528	; 0x82f8
   12b8c:	movt	r6, #3
   12b90:	mov	r0, r6
   12b94:	bl	12258 <sigemptyset@plt>
   12b98:	movw	r7, #28040	; 0x6d88
   12b9c:	mov	r4, #0
   12ba0:	add	r8, sp, #128	; 0x80
   12ba4:	movt	r7, #2
   12ba8:	b	12bb8 <__assert_fail@plt+0x84c>
   12bac:	sub	r4, r4, #1
   12bb0:	cmn	r4, #11
   12bb4:	beq	12be8 <__assert_fail@plt+0x87c>
   12bb8:	ldr	r5, [r7, -r4, lsl #2]
   12bbc:	mov	r1, #0
   12bc0:	mov	r2, r8
   12bc4:	mov	r0, r5
   12bc8:	bl	12024 <sigaction@plt>
   12bcc:	ldr	r0, [sp, #128]	; 0x80
   12bd0:	cmp	r0, #1
   12bd4:	beq	12bac <__assert_fail@plt+0x840>
   12bd8:	mov	r0, r6
   12bdc:	mov	r1, r5
   12be0:	bl	120fc <sigaddset@plt>
   12be4:	b	12bac <__assert_fail@plt+0x840>
   12be8:	movw	r0, #26632	; 0x6808
   12bec:	movw	r5, #33528	; 0x82f8
   12bf0:	mov	r2, #128	; 0x80
   12bf4:	movt	r0, #1
   12bf8:	movt	r5, #3
   12bfc:	str	r0, [sp, #128]	; 0x80
   12c00:	add	r0, r8, #4
   12c04:	mov	r1, r5
   12c08:	bl	11eec <memcpy@plt>
   12c0c:	mov	r0, #0
   12c10:	mov	r1, #14
   12c14:	str	r0, [sp, #260]	; 0x104
   12c18:	mov	r0, r5
   12c1c:	bl	11fd0 <sigismember@plt>
   12c20:	cmp	r0, #0
   12c24:	beq	12c38 <__assert_fail@plt+0x8cc>
   12c28:	add	r1, sp, #128	; 0x80
   12c2c:	mov	r0, #14
   12c30:	mov	r2, #0
   12c34:	bl	12024 <sigaction@plt>
   12c38:	movw	r0, #33528	; 0x82f8
   12c3c:	mov	r1, #1
   12c40:	movt	r0, #3
   12c44:	bl	11fd0 <sigismember@plt>
   12c48:	cmp	r0, #0
   12c4c:	beq	12c60 <__assert_fail@plt+0x8f4>
   12c50:	add	r1, sp, #128	; 0x80
   12c54:	mov	r0, #1
   12c58:	mov	r2, #0
   12c5c:	bl	12024 <sigaction@plt>
   12c60:	movw	r0, #33528	; 0x82f8
   12c64:	mov	r1, #2
   12c68:	movt	r0, #3
   12c6c:	bl	11fd0 <sigismember@plt>
   12c70:	cmp	r0, #0
   12c74:	beq	12c88 <__assert_fail@plt+0x91c>
   12c78:	add	r1, sp, #128	; 0x80
   12c7c:	mov	r0, #2
   12c80:	mov	r2, #0
   12c84:	bl	12024 <sigaction@plt>
   12c88:	movw	r0, #33528	; 0x82f8
   12c8c:	mov	r1, #13
   12c90:	movt	r0, #3
   12c94:	bl	11fd0 <sigismember@plt>
   12c98:	cmp	r0, #0
   12c9c:	beq	12cb0 <__assert_fail@plt+0x944>
   12ca0:	add	r1, sp, #128	; 0x80
   12ca4:	mov	r0, #13
   12ca8:	mov	r2, #0
   12cac:	bl	12024 <sigaction@plt>
   12cb0:	movw	r0, #33528	; 0x82f8
   12cb4:	mov	r1, #3
   12cb8:	movt	r0, #3
   12cbc:	bl	11fd0 <sigismember@plt>
   12cc0:	cmp	r0, #0
   12cc4:	beq	12cd8 <__assert_fail@plt+0x96c>
   12cc8:	add	r1, sp, #128	; 0x80
   12ccc:	mov	r0, #3
   12cd0:	mov	r2, #0
   12cd4:	bl	12024 <sigaction@plt>
   12cd8:	movw	r0, #33528	; 0x82f8
   12cdc:	mov	r1, #15
   12ce0:	movt	r0, #3
   12ce4:	bl	11fd0 <sigismember@plt>
   12ce8:	cmp	r0, #0
   12cec:	beq	12d00 <__assert_fail@plt+0x994>
   12cf0:	add	r1, sp, #128	; 0x80
   12cf4:	mov	r0, #15
   12cf8:	mov	r2, #0
   12cfc:	bl	12024 <sigaction@plt>
   12d00:	movw	r0, #33528	; 0x82f8
   12d04:	mov	r1, #29
   12d08:	movt	r0, #3
   12d0c:	bl	11fd0 <sigismember@plt>
   12d10:	cmp	r0, #0
   12d14:	beq	12d28 <__assert_fail@plt+0x9bc>
   12d18:	add	r1, sp, #128	; 0x80
   12d1c:	mov	r0, #29
   12d20:	mov	r2, #0
   12d24:	bl	12024 <sigaction@plt>
   12d28:	movw	r0, #33528	; 0x82f8
   12d2c:	mov	r1, #27
   12d30:	movt	r0, #3
   12d34:	bl	11fd0 <sigismember@plt>
   12d38:	cmp	r0, #0
   12d3c:	beq	12d50 <__assert_fail@plt+0x9e4>
   12d40:	add	r1, sp, #128	; 0x80
   12d44:	mov	r0, #27
   12d48:	mov	r2, #0
   12d4c:	bl	12024 <sigaction@plt>
   12d50:	movw	r0, #33528	; 0x82f8
   12d54:	mov	r1, #26
   12d58:	movt	r0, #3
   12d5c:	bl	11fd0 <sigismember@plt>
   12d60:	cmp	r0, #0
   12d64:	beq	12d78 <__assert_fail@plt+0xa0c>
   12d68:	add	r1, sp, #128	; 0x80
   12d6c:	mov	r0, #26
   12d70:	mov	r2, #0
   12d74:	bl	12024 <sigaction@plt>
   12d78:	movw	r0, #33528	; 0x82f8
   12d7c:	mov	r1, #24
   12d80:	movt	r0, #3
   12d84:	bl	11fd0 <sigismember@plt>
   12d88:	cmp	r0, #0
   12d8c:	beq	12da0 <__assert_fail@plt+0xa34>
   12d90:	add	r1, sp, #128	; 0x80
   12d94:	mov	r0, #24
   12d98:	mov	r2, #0
   12d9c:	bl	12024 <sigaction@plt>
   12da0:	movw	r0, #33528	; 0x82f8
   12da4:	mov	r1, #25
   12da8:	movt	r0, #3
   12dac:	bl	11fd0 <sigismember@plt>
   12db0:	cmp	r0, #0
   12db4:	beq	12dc8 <__assert_fail@plt+0xa5c>
   12db8:	add	r1, sp, #128	; 0x80
   12dbc:	mov	r0, #25
   12dc0:	mov	r2, #0
   12dc4:	bl	12024 <sigaction@plt>
   12dc8:	mov	r0, #17
   12dcc:	mov	r1, #0
   12dd0:	mov	sl, #0
   12dd4:	bl	11f28 <signal@plt>
   12dd8:	movw	r0, #26716	; 0x685c
   12ddc:	movt	r0, #1
   12de0:	bl	25184 <_obstack_memory_used@@Base+0x69c>
   12de4:	vmov.i32	q8, #0	; 0x00000000
   12de8:	ldr	r5, [sp, #112]	; 0x70
   12dec:	add	r0, sp, #272	; 0x110
   12df0:	str	sl, [sp, #308]	; 0x134
   12df4:	add	r1, r0, #4
   12df8:	add	r0, r0, #20
   12dfc:	vst1.32	{d16-d17}, [r0]
   12e00:	mvn	r0, #0
   12e04:	vst1.32	{d16-d17}, [r1]
   12e08:	mov	r1, #4
   12e0c:	str	r0, [sp, #272]	; 0x110
   12e10:	str	r0, [sp, #280]	; 0x118
   12e14:	mov	r0, r5
   12e18:	bl	227f0 <__assert_fail@plt+0x10484>
   12e1c:	add	r1, r8, #1
   12e20:	mov	r8, r0
   12e24:	sub	r0, fp, #288	; 0x120
   12e28:	mvn	lr, #0
   12e2c:	mov	ip, #0
   12e30:	mov	r4, #0
   12e34:	str	r1, [sp, #104]	; 0x68
   12e38:	add	r1, r0, #12
   12e3c:	str	r1, [sp, #80]	; 0x50
   12e40:	orr	r1, r0, #4
   12e44:	add	r0, r0, #8
   12e48:	str	r0, [sp, #88]	; 0x58
   12e4c:	ldr	r0, [sp, #116]	; 0x74
   12e50:	str	r1, [sp, #84]	; 0x54
   12e54:	clz	r0, r0
   12e58:	lsr	r0, r0, #5
   12e5c:	str	r0, [sp, #76]	; 0x4c
   12e60:	mov	r0, #0
   12e64:	str	r0, [sp, #28]
   12e68:	mov	r0, #0
   12e6c:	str	r0, [sp, #100]	; 0x64
   12e70:	mov	r0, #0
   12e74:	str	r0, [sp, #64]	; 0x40
   12e78:	mov	r0, #0
   12e7c:	str	r0, [sp, #32]
   12e80:	mov	r0, #0
   12e84:	b	12e8c <__assert_fail@plt+0xb20>
   12e88:	mov	r0, r6
   12e8c:	mov	r1, r4
   12e90:	cmn	r4, #1
   12e94:	mov	r6, r0
   12e98:	mvn	r4, #0
   12e9c:	str	lr, [fp, #-104]	; 0xffffff98
   12ea0:	beq	13528 <__assert_fail@plt+0x11bc>
   12ea4:	ldr	r0, [sp, #116]	; 0x74
   12ea8:	cmp	r0, #0
   12eac:	cmpne	sl, #0
   12eb0:	bne	134bc <__assert_fail@plt+0x1150>
   12eb4:	ldr	r1, [sp, #120]	; 0x78
   12eb8:	movw	r2, #28084	; 0x6db4
   12ebc:	movw	r3, #28116	; 0x6dd4
   12ec0:	sub	r0, fp, #104	; 0x68
   12ec4:	mov	r7, ip
   12ec8:	movt	r2, #2
   12ecc:	movt	r3, #2
   12ed0:	str	r0, [sp]
   12ed4:	mov	r0, r5
   12ed8:	bl	12138 <getopt_long@plt>
   12edc:	ldr	r5, [sp, #112]	; 0x70
   12ee0:	movw	r3, #34448	; 0x8690
   12ee4:	mov	r4, r0
   12ee8:	add	r1, r0, #3
   12eec:	movw	r0, #266	; 0x10a
   12ef0:	mvn	lr, #0
   12ef4:	movt	r3, #3
   12ef8:	cmp	r1, r0
   12efc:	bhi	162f8 <__assert_fail@plt+0x3f8c>
   12f00:	add	r2, pc, #8
   12f04:	mov	ip, r7
   12f08:	mov	r0, #1
   12f0c:	ldr	pc, [r2, r1, lsl #2]
   12f10:	andeq	r6, r1, r0, lsl #6
   12f14:	andeq	r6, r1, r4, asr r3
   12f18:	andeq	r3, r1, r8, lsr #10
   12f1c:	strdeq	r6, [r1], -r8
   12f20:	andeq	r3, r1, r0, lsr r9
   12f24:	strdeq	r6, [r1], -r8
   12f28:	strdeq	r6, [r1], -r8
   12f2c:	strdeq	r6, [r1], -r8
   12f30:	strdeq	r6, [r1], -r8
   12f34:	strdeq	r6, [r1], -r8
   12f38:	strdeq	r6, [r1], -r8
   12f3c:	strdeq	r6, [r1], -r8
   12f40:	strdeq	r6, [r1], -r8
   12f44:	strdeq	r6, [r1], -r8
   12f48:	strdeq	r6, [r1], -r8
   12f4c:	strdeq	r6, [r1], -r8
   12f50:	strdeq	r6, [r1], -r8
   12f54:	strdeq	r6, [r1], -r8
   12f58:	strdeq	r6, [r1], -r8
   12f5c:	strdeq	r6, [r1], -r8
   12f60:	strdeq	r6, [r1], -r8
   12f64:	strdeq	r6, [r1], -r8
   12f68:	strdeq	r6, [r1], -r8
   12f6c:	strdeq	r6, [r1], -r8
   12f70:	strdeq	r6, [r1], -r8
   12f74:	strdeq	r6, [r1], -r8
   12f78:	strdeq	r6, [r1], -r8
   12f7c:	strdeq	r6, [r1], -r8
   12f80:	strdeq	r6, [r1], -r8
   12f84:	strdeq	r6, [r1], -r8
   12f88:	strdeq	r6, [r1], -r8
   12f8c:	strdeq	r6, [r1], -r8
   12f90:	strdeq	r6, [r1], -r8
   12f94:	strdeq	r6, [r1], -r8
   12f98:	strdeq	r6, [r1], -r8
   12f9c:	strdeq	r6, [r1], -r8
   12fa0:	strdeq	r6, [r1], -r8
   12fa4:	strdeq	r6, [r1], -r8
   12fa8:	strdeq	r6, [r1], -r8
   12fac:	strdeq	r6, [r1], -r8
   12fb0:	strdeq	r6, [r1], -r8
   12fb4:	strdeq	r6, [r1], -r8
   12fb8:	strdeq	r6, [r1], -r8
   12fbc:	strdeq	r6, [r1], -r8
   12fc0:	strdeq	r6, [r1], -r8
   12fc4:	strdeq	r6, [r1], -r8
   12fc8:	strdeq	r6, [r1], -r8
   12fcc:	strdeq	r6, [r1], -r8
   12fd0:	strdeq	r6, [r1], -r8
   12fd4:	strdeq	r6, [r1], -r8
   12fd8:	strdeq	r6, [r1], -r8
   12fdc:	strdeq	r6, [r1], -r8
   12fe0:	strdeq	r6, [r1], -r8
   12fe4:	strdeq	r6, [r1], -r8
   12fe8:	strdeq	r6, [r1], -r8
   12fec:	strdeq	r6, [r1], -r8
   12ff0:	strdeq	r6, [r1], -r8
   12ff4:	strdeq	r6, [r1], -r8
   12ff8:	strdeq	r6, [r1], -r8
   12ffc:	strdeq	r6, [r1], -r8
   13000:	strdeq	r6, [r1], -r8
   13004:	strdeq	r6, [r1], -r8
   13008:	strdeq	r6, [r1], -r8
   1300c:	strdeq	r6, [r1], -r8
   13010:	strdeq	r6, [r1], -r8
   13014:	strdeq	r6, [r1], -r8
   13018:	strdeq	r6, [r1], -r8
   1301c:	strdeq	r6, [r1], -r8
   13020:	strdeq	r6, [r1], -r8
   13024:	strdeq	r6, [r1], -r8
   13028:	muleq	r1, r0, r2
   1302c:	strdeq	r6, [r1], -r8
   13030:	strdeq	r6, [r1], -r8
   13034:	strdeq	r6, [r1], -r8
   13038:	strdeq	r6, [r1], -r8
   1303c:	strdeq	r6, [r1], -r8
   13040:	strdeq	r6, [r1], -r8
   13044:	strdeq	r6, [r1], -r8
   13048:	strdeq	r6, [r1], -r8
   1304c:	strdeq	r6, [r1], -r8
   13050:	andeq	r3, r1, ip, lsr r3
   13054:	strdeq	r6, [r1], -r8
   13058:	strdeq	r6, [r1], -r8
   1305c:	strdeq	r6, [r1], -r8
   13060:	strdeq	r6, [r1], -r8
   13064:	andeq	r3, r1, ip, lsr r3
   13068:	andeq	r3, r1, r4, lsr #11
   1306c:	strdeq	r3, [r1], -ip
   13070:	strdeq	r6, [r1], -r8
   13074:	andeq	r3, r1, ip, lsr r3
   13078:	strdeq	r6, [r1], -r8
   1307c:	strdeq	r6, [r1], -r8
   13080:	strdeq	r6, [r1], -r8
   13084:	strdeq	r6, [r1], -r8
   13088:	strdeq	r6, [r1], -r8
   1308c:	strdeq	r6, [r1], -r8
   13090:	strdeq	r6, [r1], -r8
   13094:	strdeq	r6, [r1], -r8
   13098:	strdeq	r6, [r1], -r8
   1309c:	strdeq	r6, [r1], -r8
   130a0:	strdeq	r6, [r1], -r8
   130a4:	andeq	r3, r1, ip, lsr r3
   130a8:	muleq	r1, r0, r2
   130ac:	andeq	r3, r1, ip, lsr r3
   130b0:	strdeq	r6, [r1], -r8
   130b4:	andeq	r3, r1, ip, lsr r3
   130b8:	andeq	r3, r1, ip, lsr r3
   130bc:	andeq	r3, r1, ip, lsr r3
   130c0:	andeq	r3, r1, ip, lsr r3
   130c4:	strdeq	r6, [r1], -r8
   130c8:	muleq	r1, r4, r6
   130cc:	strdeq	r6, [r1], -r8
   130d0:	andeq	r2, r1, ip, lsl #29
   130d4:	andeq	r3, r1, ip, lsr r3
   130d8:	andeq	r3, r1, r8, lsl r8
   130dc:	strdeq	r6, [r1], -r8
   130e0:	strdeq	r6, [r1], -r8
   130e4:	andeq	r3, r1, ip, lsr r3
   130e8:	andeq	r3, r1, r0, ror #21
   130ec:	andeq	r3, r1, ip, lsr #14
   130f0:	andeq	r3, r1, r0, lsr #15
   130f4:	strdeq	r6, [r1], -r8
   130f8:	strdeq	r6, [r1], -r8
   130fc:	strdeq	r6, [r1], -r8
   13100:	ldrdeq	r3, [r1], -r4
   13104:	andeq	r3, r1, ip, ror fp
   13108:	strdeq	r6, [r1], -r8
   1310c:	strdeq	r6, [r1], -r8
   13110:	strdeq	r6, [r1], -r8
   13114:	strdeq	r6, [r1], -r8
   13118:	strdeq	r6, [r1], -r8
   1311c:	strdeq	r6, [r1], -r8
   13120:	strdeq	r6, [r1], -r8
   13124:	strdeq	r6, [r1], -r8
   13128:	strdeq	r6, [r1], -r8
   1312c:	strdeq	r6, [r1], -r8
   13130:	strdeq	r6, [r1], -r8
   13134:	strdeq	r6, [r1], -r8
   13138:	strdeq	r6, [r1], -r8
   1313c:	strdeq	r6, [r1], -r8
   13140:	strdeq	r6, [r1], -r8
   13144:	strdeq	r6, [r1], -r8
   13148:	strdeq	r6, [r1], -r8
   1314c:	strdeq	r6, [r1], -r8
   13150:	strdeq	r6, [r1], -r8
   13154:	strdeq	r6, [r1], -r8
   13158:	strdeq	r6, [r1], -r8
   1315c:	strdeq	r6, [r1], -r8
   13160:	strdeq	r6, [r1], -r8
   13164:	strdeq	r6, [r1], -r8
   13168:	strdeq	r6, [r1], -r8
   1316c:	strdeq	r6, [r1], -r8
   13170:	strdeq	r6, [r1], -r8
   13174:	strdeq	r6, [r1], -r8
   13178:	strdeq	r6, [r1], -r8
   1317c:	strdeq	r6, [r1], -r8
   13180:	strdeq	r6, [r1], -r8
   13184:	strdeq	r6, [r1], -r8
   13188:	strdeq	r6, [r1], -r8
   1318c:	strdeq	r6, [r1], -r8
   13190:	strdeq	r6, [r1], -r8
   13194:	strdeq	r6, [r1], -r8
   13198:	strdeq	r6, [r1], -r8
   1319c:	strdeq	r6, [r1], -r8
   131a0:	strdeq	r6, [r1], -r8
   131a4:	strdeq	r6, [r1], -r8
   131a8:	strdeq	r6, [r1], -r8
   131ac:	strdeq	r6, [r1], -r8
   131b0:	strdeq	r6, [r1], -r8
   131b4:	strdeq	r6, [r1], -r8
   131b8:	strdeq	r6, [r1], -r8
   131bc:	strdeq	r6, [r1], -r8
   131c0:	strdeq	r6, [r1], -r8
   131c4:	strdeq	r6, [r1], -r8
   131c8:	strdeq	r6, [r1], -r8
   131cc:	strdeq	r6, [r1], -r8
   131d0:	strdeq	r6, [r1], -r8
   131d4:	strdeq	r6, [r1], -r8
   131d8:	strdeq	r6, [r1], -r8
   131dc:	strdeq	r6, [r1], -r8
   131e0:	strdeq	r6, [r1], -r8
   131e4:	strdeq	r6, [r1], -r8
   131e8:	strdeq	r6, [r1], -r8
   131ec:	strdeq	r6, [r1], -r8
   131f0:	strdeq	r6, [r1], -r8
   131f4:	strdeq	r6, [r1], -r8
   131f8:	strdeq	r6, [r1], -r8
   131fc:	strdeq	r6, [r1], -r8
   13200:	strdeq	r6, [r1], -r8
   13204:	strdeq	r6, [r1], -r8
   13208:	strdeq	r6, [r1], -r8
   1320c:	strdeq	r6, [r1], -r8
   13210:	strdeq	r6, [r1], -r8
   13214:	strdeq	r6, [r1], -r8
   13218:	strdeq	r6, [r1], -r8
   1321c:	strdeq	r6, [r1], -r8
   13220:	strdeq	r6, [r1], -r8
   13224:	strdeq	r6, [r1], -r8
   13228:	strdeq	r6, [r1], -r8
   1322c:	strdeq	r6, [r1], -r8
   13230:	strdeq	r6, [r1], -r8
   13234:	strdeq	r6, [r1], -r8
   13238:	strdeq	r6, [r1], -r8
   1323c:	strdeq	r6, [r1], -r8
   13240:	strdeq	r6, [r1], -r8
   13244:	strdeq	r6, [r1], -r8
   13248:	strdeq	r6, [r1], -r8
   1324c:	strdeq	r6, [r1], -r8
   13250:	strdeq	r6, [r1], -r8
   13254:	strdeq	r6, [r1], -r8
   13258:	strdeq	r6, [r1], -r8
   1325c:	strdeq	r6, [r1], -r8
   13260:	strdeq	r6, [r1], -r8
   13264:	strdeq	r6, [r1], -r8
   13268:	strdeq	r6, [r1], -r8
   1326c:	strdeq	r6, [r1], -r8
   13270:	strdeq	r6, [r1], -r8
   13274:	strdeq	r6, [r1], -r8
   13278:	strdeq	r6, [r1], -r8
   1327c:	strdeq	r6, [r1], -r8
   13280:	strdeq	r6, [r1], -r8
   13284:	strdeq	r6, [r1], -r8
   13288:	strdeq	r6, [r1], -r8
   1328c:	strdeq	r6, [r1], -r8
   13290:	strdeq	r6, [r1], -r8
   13294:	strdeq	r6, [r1], -r8
   13298:	strdeq	r6, [r1], -r8
   1329c:	strdeq	r6, [r1], -r8
   132a0:	strdeq	r6, [r1], -r8
   132a4:	strdeq	r6, [r1], -r8
   132a8:	strdeq	r6, [r1], -r8
   132ac:	strdeq	r6, [r1], -r8
   132b0:	strdeq	r6, [r1], -r8
   132b4:	strdeq	r6, [r1], -r8
   132b8:	strdeq	r6, [r1], -r8
   132bc:	strdeq	r6, [r1], -r8
   132c0:	strdeq	r6, [r1], -r8
   132c4:	strdeq	r6, [r1], -r8
   132c8:	strdeq	r6, [r1], -r8
   132cc:	strdeq	r6, [r1], -r8
   132d0:	strdeq	r6, [r1], -r8
   132d4:	strdeq	r6, [r1], -r8
   132d8:	strdeq	r6, [r1], -r8
   132dc:	strdeq	r6, [r1], -r8
   132e0:	strdeq	r6, [r1], -r8
   132e4:	strdeq	r6, [r1], -r8
   132e8:	strdeq	r6, [r1], -r8
   132ec:	strdeq	r6, [r1], -r8
   132f0:	strdeq	r6, [r1], -r8
   132f4:	strdeq	r6, [r1], -r8
   132f8:	strdeq	r6, [r1], -r8
   132fc:	strdeq	r6, [r1], -r8
   13300:	strdeq	r6, [r1], -r8
   13304:	strdeq	r6, [r1], -r8
   13308:	strdeq	r6, [r1], -r8
   1330c:	strdeq	r6, [r1], -r8
   13310:	strdeq	r6, [r1], -r8
   13314:	strdeq	r6, [r1], -r8
   13318:	strdeq	r6, [r1], -r8
   1331c:	andeq	r3, r1, r4, lsr r6
   13320:	andeq	r3, r1, ip, asr r5
   13324:	andeq	r3, r1, ip, lsr #25
   13328:	andeq	r3, r1, r8, asr #25
   1332c:	muleq	r1, r8, fp
   13330:	andeq	r3, r1, r0, asr ip
   13334:	andeq	r3, r1, r4, ror r8
   13338:			; <UNDEFINED> instruction: 0x000137bc
   1333c:	mov	r0, #0
   13340:	mov	r1, r4
   13344:	strb	r0, [sp, #129]	; 0x81
   13348:	ldr	r0, [sp, #104]	; 0x68
   1334c:	strb	r4, [sp, #128]	; 0x80
   13350:	b	13360 <__assert_fail@plt+0xff4>
   13354:	mov	r1, #1
   13358:	strb	r1, [sp, #301]	; 0x12d
   1335c:	ldrb	r1, [r0], #1
   13360:	mvn	r2, #76	; 0x4c
   13364:	uxtab	r1, r2, r1
   13368:	cmp	r1, #37	; 0x25
   1336c:	bhi	12e88 <__assert_fail@plt+0xb1c>
   13370:	add	r2, pc, #0
   13374:	ldr	pc, [r2, r1, lsl #2]
   13378:	andeq	r3, r1, r0, lsl r4
   1337c:	andeq	r2, r1, r8, lsl #29
   13380:	andeq	r2, r1, r8, lsl #29
   13384:	andeq	r2, r1, r8, lsl #29
   13388:	andeq	r2, r1, r8, lsl #29
   1338c:	andeq	r3, r1, ip, lsl #9
   13390:	andeq	r2, r1, r8, lsl #29
   13394:	andeq	r2, r1, r8, lsl #29
   13398:	andeq	r2, r1, r8, lsl #29
   1339c:	andeq	r3, r1, r0, ror r4
   133a0:	andeq	r2, r1, r8, lsl #29
   133a4:	andeq	r2, r1, r8, lsl #29
   133a8:	andeq	r2, r1, r8, lsl #29
   133ac:	andeq	r2, r1, r8, lsl #29
   133b0:	andeq	r2, r1, r8, lsl #29
   133b4:	andeq	r2, r1, r8, lsl #29
   133b8:	andeq	r2, r1, r8, lsl #29
   133bc:	andeq	r2, r1, r8, lsl #29
   133c0:	andeq	r2, r1, r8, lsl #29
   133c4:	andeq	r2, r1, r8, lsl #29
   133c8:	andeq	r2, r1, r8, lsl #29
   133cc:	andeq	r3, r1, ip, asr #8
   133d0:	andeq	r2, r1, r8, lsl #29
   133d4:	andeq	r3, r1, r0, lsl #9
   133d8:	andeq	r2, r1, r8, lsl #29
   133dc:	andeq	r3, r1, r0, asr #8
   133e0:	andeq	r3, r1, r0, ror #8
   133e4:	andeq	r3, r1, r4, asr r3
   133e8:	andeq	r3, r1, r0, lsr #8
   133ec:	andeq	r2, r1, r8, lsl #29
   133f0:	andeq	r2, r1, r8, lsl #29
   133f4:	andeq	r2, r1, r8, lsl #29
   133f8:	andeq	r2, r1, r8, lsl #29
   133fc:	andeq	r3, r1, ip, lsr #9
   13400:	andeq	r2, r1, r8, lsl #29
   13404:	andeq	r2, r1, r8, lsl #29
   13408:	andeq	r2, r1, r8, lsl #29
   1340c:	muleq	r1, ip, r4
   13410:	mov	r1, #1
   13414:	strb	r1, [sp, #302]	; 0x12e
   13418:	ldrb	r1, [r0], #1
   1341c:	b	13360 <__assert_fail@plt+0xff4>
   13420:	ldr	r1, [sp, #288]	; 0x120
   13424:	cmp	r1, #0
   13428:	bne	13478 <__assert_fail@plt+0x110c>
   1342c:	movw	r1, #33936	; 0x8490
   13430:	movt	r1, #3
   13434:	str	r1, [sp, #288]	; 0x120
   13438:	ldrb	r1, [r0], #1
   1343c:	b	13360 <__assert_fail@plt+0xff4>
   13440:	ldrb	r1, [r0], #1
   13444:	str	r3, [sp, #292]	; 0x124
   13448:	b	13360 <__assert_fail@plt+0xff4>
   1344c:	movw	r1, #257	; 0x101
   13450:	add	r2, sp, #256	; 0x100
   13454:	strh	r1, [r2, #40]	; 0x28
   13458:	ldrb	r1, [r0], #1
   1345c:	b	13360 <__assert_fail@plt+0xff4>
   13460:	mov	r1, #1
   13464:	strb	r1, [sp, #300]	; 0x12c
   13468:	ldrb	r1, [r0], #1
   1346c:	b	13360 <__assert_fail@plt+0xff4>
   13470:	mov	r1, #1
   13474:	strb	r1, [sp, #304]	; 0x130
   13478:	ldrb	r1, [r0], #1
   1347c:	b	13360 <__assert_fail@plt+0xff4>
   13480:	ldrb	r1, [r0], #1
   13484:	str	r9, [sp, #288]	; 0x120
   13488:	b	13360 <__assert_fail@plt+0xff4>
   1348c:	mov	r1, #1
   13490:	strb	r1, [sp, #299]	; 0x12b
   13494:	ldrb	r1, [r0], #1
   13498:	b	13360 <__assert_fail@plt+0xff4>
   1349c:	mov	r1, #1
   134a0:	strb	r1, [sp, #303]	; 0x12f
   134a4:	ldrb	r1, [r0], #1
   134a8:	b	13360 <__assert_fail@plt+0xff4>
   134ac:	mov	r1, #1
   134b0:	strb	r1, [sp, #298]	; 0x12a
   134b4:	ldrb	r1, [r0], #1
   134b8:	b	13360 <__assert_fail@plt+0xff4>
   134bc:	tst	ip, #255	; 0xff
   134c0:	ldreq	r0, [sp, #108]	; 0x6c
   134c4:	eoreq	r0, r0, #1
   134c8:	tsteq	r0, #1
   134cc:	bne	13524 <__assert_fail@plt+0x11b8>
   134d0:	movw	r0, #33480	; 0x82c8
   134d4:	movt	r0, #3
   134d8:	ldr	r2, [r0]
   134dc:	cmp	r2, r5
   134e0:	beq	13524 <__assert_fail@plt+0x11b8>
   134e4:	ldr	r0, [sp, #120]	; 0x78
   134e8:	ldr	r0, [r0, r2, lsl #2]
   134ec:	ldrb	r3, [r0]
   134f0:	cmp	r3, #45	; 0x2d
   134f4:	bne	13524 <__assert_fail@plt+0x11b8>
   134f8:	ldrb	r3, [r0, #1]
   134fc:	cmp	r3, #111	; 0x6f
   13500:	bne	13524 <__assert_fail@plt+0x11b8>
   13504:	add	r2, r2, #1
   13508:	cmp	r2, r5
   1350c:	bne	12eb4 <__assert_fail@plt+0xb48>
   13510:	ldrb	r0, [r0, #2]
   13514:	mov	r4, r1
   13518:	cmp	r0, #0
   1351c:	beq	13528 <__assert_fail@plt+0x11bc>
   13520:	b	12eb4 <__assert_fail@plt+0xb48>
   13524:	mov	r4, r1
   13528:	movw	r2, #33480	; 0x82c8
   1352c:	movt	r2, #3
   13530:	ldr	r0, [r2]
   13534:	cmp	r0, r5
   13538:	bge	1494c <__assert_fail@plt+0x25e0>
   1353c:	add	r1, r0, #1
   13540:	str	r1, [r2]
   13544:	ldr	r1, [sp, #120]	; 0x78
   13548:	ldr	r0, [r1, r0, lsl #2]
   1354c:	str	r0, [r8, sl, lsl #2]
   13550:	add	sl, sl, #1
   13554:	mov	r0, r6
   13558:	b	12e8c <__assert_fail@plt+0xb20>
   1355c:	mov	r7, r6
   13560:	movw	r6, #33656	; 0x8378
   13564:	mov	r9, r8
   13568:	mov	r8, ip
   1356c:	movt	r6, #3
   13570:	ldr	r0, [r6]
   13574:	cmp	r0, #0
   13578:	beq	14274 <__assert_fail@plt+0x1f08>
   1357c:	movw	r1, #33504	; 0x82e0
   13580:	movt	r1, #3
   13584:	ldr	r4, [r1]
   13588:	mov	r1, r4
   1358c:	bl	11e50 <strcmp@plt>
   13590:	ldr	r5, [sp, #112]	; 0x70
   13594:	mvn	lr, #0
   13598:	cmp	r0, #0
   1359c:	beq	14280 <__assert_fail@plt+0x1f14>
   135a0:	b	163f0 <__assert_fail@plt+0x4084>
   135a4:	movw	r0, #33504	; 0x82e0
   135a8:	ldr	r4, [fp, #-104]	; 0xffffff98
   135ac:	sub	r1, fp, #208	; 0xd0
   135b0:	add	r3, sp, #128	; 0x80
   135b4:	mov	r2, #10
   135b8:	movt	r0, #3
   135bc:	ldr	r5, [r0]
   135c0:	movw	r0, #26679	; 0x6837
   135c4:	movt	r0, #2
   135c8:	str	r0, [sp]
   135cc:	mov	r0, r5
   135d0:	bl	23004 <__assert_fail@plt+0x10c98>
   135d4:	cmp	r0, #2
   135d8:	str	r5, [sp, #92]	; 0x5c
   135dc:	beq	13ce4 <__assert_fail@plt+0x1978>
   135e0:	cmp	r0, #0
   135e4:	bne	16578 <__assert_fail@plt+0x420c>
   135e8:	ldr	r0, [fp, #-208]	; 0xffffff30
   135ec:	ldr	r5, [sp, #112]	; 0x70
   135f0:	mov	ip, r7
   135f4:	mvn	lr, #0
   135f8:	ldrb	r0, [r0, #-1]
   135fc:	sub	r0, r0, #48	; 0x30
   13600:	cmp	r0, #9
   13604:	bhi	13d7c <__assert_fail@plt+0x1a10>
   13608:	ldr	r1, [sp, #132]	; 0x84
   1360c:	mov	r0, #0
   13610:	cmp	r0, r1, lsr #22
   13614:	bne	16574 <__assert_fail@plt+0x4208>
   13618:	ldr	r2, [sp, #128]	; 0x80
   1361c:	lsl	r1, r1, #10
   13620:	orr	r1, r1, r2, lsr #22
   13624:	lsl	r0, r2, #10
   13628:	str	r0, [sp, #128]	; 0x80
   1362c:	str	r1, [sp, #132]	; 0x84
   13630:	b	13d84 <__assert_fail@plt+0x1a18>
   13634:	movw	r0, #33504	; 0x82e0
   13638:	movt	r0, #3
   1363c:	ldr	r1, [r0]
   13640:	cmp	r1, #0
   13644:	beq	1428c <__assert_fail@plt+0x1f20>
   13648:	movw	r0, #33388	; 0x826c
   1364c:	movw	r4, #28648	; 0x6fe8
   13650:	mov	r2, #1
   13654:	movt	r0, #3
   13658:	movt	r4, #2
   1365c:	str	r2, [sp]
   13660:	ldr	r0, [r0]
   13664:	mov	r3, r4
   13668:	stmib	sp, {r0, r2}
   1366c:	movw	r0, #24879	; 0x612f
   13670:	movw	r2, #28652	; 0x6fec
   13674:	movt	r0, #2
   13678:	movt	r2, #2
   1367c:	bl	1b9c8 <__assert_fail@plt+0x965c>
   13680:	ldr	r5, [sp, #112]	; 0x70
   13684:	ldrb	r4, [r4, r0]
   13688:	mvn	lr, #0
   1368c:	mov	ip, r7
   13690:	b	14290 <__assert_fail@plt+0x1f24>
   13694:	vmov.i32	q8, #0	; 0x00000000
   13698:	sub	r1, fp, #288	; 0x120
   1369c:	movw	r4, #33504	; 0x82e0
   136a0:	mov	r0, #36	; 0x24
   136a4:	mov	r2, r1
   136a8:	movt	r4, #3
   136ac:	vst1.64	{d16-d17}, [r2], r0
   136b0:	mov	r0, #0
   136b4:	str	r0, [r2]
   136b8:	add	r2, r1, #16
   136bc:	str	r0, [fp, #-256]	; 0xffffff00
   136c0:	mvn	r0, #0
   136c4:	vst1.64	{d16-d17}, [r2]
   136c8:	str	r0, [fp, #-280]	; 0xfffffee8
   136cc:	ldr	r0, [r4]
   136d0:	movw	r2, #24927	; 0x615f
   136d4:	movt	r2, #2
   136d8:	bl	168f4 <__assert_fail@plt+0x4588>
   136dc:	ldr	r2, [fp, #-288]	; 0xfffffee0
   136e0:	sub	r1, r2, #1
   136e4:	cmp	r2, #0
   136e8:	str	r1, [fp, #-288]	; 0xfffffee0
   136ec:	beq	16594 <__assert_fail@plt+0x4228>
   136f0:	ldrb	r2, [r0]
   136f4:	cmp	r2, #46	; 0x2e
   136f8:	bne	13dd4 <__assert_fail@plt+0x1a68>
   136fc:	ldr	r1, [sp, #84]	; 0x54
   13700:	movw	r2, #24817	; 0x60f1
   13704:	add	r0, r0, #1
   13708:	movt	r2, #2
   1370c:	bl	168f4 <__assert_fail@plt+0x4588>
   13710:	ldr	r1, [fp, #-284]	; 0xfffffee4
   13714:	sub	r2, r1, #1
   13718:	cmp	r1, #0
   1371c:	str	r2, [fp, #-284]	; 0xfffffee4
   13720:	beq	163fc <__assert_fail@plt+0x4090>
   13724:	ldr	r1, [fp, #-288]	; 0xfffffee0
   13728:	b	13dd8 <__assert_fail@plt+0x1a6c>
   1372c:	mov	r7, r6
   13730:	movw	r6, #33504	; 0x82e0
   13734:	movt	r6, #3
   13738:	ldr	r0, [r6]
   1373c:	ldrb	r1, [r0]
   13740:	cmp	r1, #0
   13744:	beq	1640c <__assert_fail@plt+0x40a0>
   13748:	ldrb	r2, [r0, #1]
   1374c:	mov	r9, r8
   13750:	mov	r8, ip
   13754:	cmp	r2, #0
   13758:	beq	1377c <__assert_fail@plt+0x1410>
   1375c:	movw	r1, #25104	; 0x6210
   13760:	movt	r1, #2
   13764:	bl	11e50 <strcmp@plt>
   13768:	ldr	r5, [sp, #112]	; 0x70
   1376c:	mvn	lr, #0
   13770:	mov	r1, #0
   13774:	cmp	r0, #0
   13778:	bne	16418 <__assert_fail@plt+0x40ac>
   1377c:	movw	r0, #33256	; 0x81e8
   13780:	movt	r0, #3
   13784:	ldr	r2, [r0]
   13788:	cmp	r2, #256	; 0x100
   1378c:	cmpne	r2, r1
   13790:	bne	1643c <__assert_fail@plt+0x40d0>
   13794:	str	r1, [r0]
   13798:	mov	r4, #116	; 0x74
   1379c:	b	142b8 <__assert_fail@plt+0x1f4c>
   137a0:	movw	r0, #33662	; 0x837e
   137a4:	mov	r1, #1
   137a8:	mov	r4, #117	; 0x75
   137ac:	movt	r0, #3
   137b0:	strb	r1, [r0]
   137b4:	mov	r0, r6
   137b8:	b	12e8c <__assert_fail@plt+0xb20>
   137bc:	movw	r0, #33504	; 0x82e0
   137c0:	mov	r7, r6
   137c4:	ldr	r4, [fp, #-104]	; 0xffffff98
   137c8:	add	r3, sp, #128	; 0x80
   137cc:	mov	r1, #0
   137d0:	mov	r2, #10
   137d4:	mov	r9, ip
   137d8:	movt	r0, #3
   137dc:	ldr	r6, [r0]
   137e0:	movw	r0, #21100	; 0x526c
   137e4:	movt	r0, #2
   137e8:	str	r0, [sp]
   137ec:	mov	r0, r6
   137f0:	bl	23004 <__assert_fail@plt+0x10c98>
   137f4:	cmp	r0, #0
   137f8:	beq	13fc8 <__assert_fail@plt+0x1c5c>
   137fc:	ldr	r5, [sp, #112]	; 0x70
   13800:	mvn	r1, #0
   13804:	cmp	r0, #1
   13808:	mvn	lr, #0
   1380c:	str	r1, [sp, #28]
   13810:	beq	142e0 <__assert_fail@plt+0x1f74>
   13814:	b	16448 <__assert_fail@plt+0x40dc>
   13818:	movw	r0, #33504	; 0x82e0
   1381c:	mov	r7, r6
   13820:	mov	r9, r8
   13824:	mov	r8, ip
   13828:	mov	r4, #111	; 0x6f
   1382c:	movt	r0, #3
   13830:	ldr	r6, [r0]
   13834:	ldr	r0, [sp, #64]	; 0x40
   13838:	cmp	r0, #0
   1383c:	beq	142ac <__assert_fail@plt+0x1f40>
   13840:	mov	r1, r6
   13844:	bl	11e50 <strcmp@plt>
   13848:	ldr	r5, [sp, #112]	; 0x70
   1384c:	mov	ip, r8
   13850:	mov	r8, r9
   13854:	movw	r9, #34192	; 0x8590
   13858:	cmp	r0, #0
   1385c:	mvn	lr, #0
   13860:	mov	r0, r7
   13864:	str	r6, [sp, #64]	; 0x40
   13868:	movt	r9, #3
   1386c:	beq	12e8c <__assert_fail@plt+0xb20>
   13870:	b	16460 <__assert_fail@plt+0x40f4>
   13874:	movw	r0, #33504	; 0x82e0
   13878:	movw	r4, #28612	; 0x6fc4
   1387c:	mov	r2, #1
   13880:	movt	r0, #3
   13884:	movt	r4, #2
   13888:	str	r2, [sp]
   1388c:	ldr	r1, [r0]
   13890:	movw	r0, #33388	; 0x826c
   13894:	mov	r3, r4
   13898:	movt	r0, #3
   1389c:	ldr	r0, [r0]
   138a0:	stmib	sp, {r0, r2}
   138a4:	movw	r0, #24872	; 0x6128
   138a8:	movw	r2, #28620	; 0x6fcc
   138ac:	movt	r0, #2
   138b0:	movt	r2, #2
   138b4:	bl	1b9c8 <__assert_fail@plt+0x965c>
   138b8:	ldr	r5, [sp, #112]	; 0x70
   138bc:	ldrb	r4, [r4, r0]
   138c0:	movw	r3, #34448	; 0x8690
   138c4:	mvn	lr, #0
   138c8:	mov	ip, r7
   138cc:	movt	r3, #3
   138d0:	b	1333c <__assert_fail@plt+0xfd0>
   138d4:	movw	r7, #33480	; 0x82c8
   138d8:	ldr	r1, [sp, #120]	; 0x78
   138dc:	mov	r4, #121	; 0x79
   138e0:	movt	r7, #3
   138e4:	ldr	r0, [r7]
   138e8:	add	r1, r1, r0, lsl #2
   138ec:	ldr	r2, [r1, #-4]
   138f0:	movw	r1, #33504	; 0x82e0
   138f4:	movt	r1, #3
   138f8:	ldr	r1, [r1]
   138fc:	cmp	r1, r2
   13900:	beq	1390c <__assert_fail@plt+0x15a0>
   13904:	mov	r0, r6
   13908:	b	12e8c <__assert_fail@plt+0xb20>
   1390c:	ldrb	r2, [r1], #1
   13910:	sub	r3, r2, #48	; 0x30
   13914:	cmp	r3, #10
   13918:	bcc	1390c <__assert_fail@plt+0x15a0>
   1391c:	cmp	r2, #0
   13920:	subne	r0, r0, #1
   13924:	str	r0, [r7]
   13928:	mov	r0, r6
   1392c:	b	12e8c <__assert_fail@plt+0xb20>
   13930:	str	r6, [sp, #24]
   13934:	mov	r6, sl
   13938:	movw	sl, #33504	; 0x82e0
   1393c:	str	ip, [sp, #36]	; 0x24
   13940:	movt	sl, #3
   13944:	ldr	r1, [sl]
   13948:	ldrb	r0, [r1]
   1394c:	cmp	r0, #43	; 0x2b
   13950:	bne	14214 <__assert_fail@plt+0x1ea8>
   13954:	movw	r0, #33480	; 0x82c8
   13958:	mov	r9, #0
   1395c:	mov	r2, #0
   13960:	movt	r0, #3
   13964:	ldr	r3, [r0]
   13968:	mov	r0, #0
   1396c:	cmp	r3, r5
   13970:	beq	139ac <__assert_fail@plt+0x1640>
   13974:	ldr	r2, [sp, #120]	; 0x78
   13978:	mov	r9, #0
   1397c:	ldr	r3, [r2, r3, lsl #2]
   13980:	ldrb	r2, [r3]
   13984:	cmp	r2, #45	; 0x2d
   13988:	mov	r2, #0
   1398c:	bne	139ac <__assert_fail@plt+0x1640>
   13990:	ldrb	r2, [r3, #1]
   13994:	mov	r9, #0
   13998:	sub	r2, r2, #48	; 0x30
   1399c:	cmp	r2, #10
   139a0:	ldr	r2, [sp, #76]	; 0x4c
   139a4:	movwcc	r9, #1
   139a8:	and	r2, r9, r2
   139ac:	ldr	r3, [sp, #108]	; 0x6c
   139b0:	orr	r2, r3, r2
   139b4:	tst	r2, #1
   139b8:	beq	14218 <__assert_fail@plt+0x1eac>
   139bc:	vmov.i32	q8, #0	; 0x00000000
   139c0:	sub	r3, fp, #288	; 0x120
   139c4:	mov	r0, #36	; 0x24
   139c8:	mov	r4, #0
   139cc:	mov	r2, r3
   139d0:	str	r4, [fp, #-256]	; 0xffffff00
   139d4:	vst1.64	{d16-d17}, [r2], r0
   139d8:	add	r0, r3, #16
   139dc:	add	r3, sp, #128	; 0x80
   139e0:	vst1.64	{d16-d17}, [r0]
   139e4:	mvn	r0, #0
   139e8:	str	r4, [r2]
   139ec:	mov	r2, #10
   139f0:	str	r0, [fp, #-280]	; 0xfffffee8
   139f4:	movw	r0, #21100	; 0x526c
   139f8:	movt	r0, #2
   139fc:	str	r0, [sp]
   13a00:	add	r0, r1, #1
   13a04:	sub	r1, fp, #208	; 0xd0
   13a08:	bl	23004 <__assert_fail@plt+0x10c98>
   13a0c:	cmp	r0, #4
   13a10:	bhi	13a4c <__assert_fail@plt+0x16e0>
   13a14:	add	r1, pc, #0
   13a18:	ldr	pc, [r1, r0, lsl #2]
   13a1c:	andeq	r3, r1, r0, lsr sl
   13a20:	andeq	r3, r1, r4, asr #20
   13a24:	andeq	r3, r1, r0, lsr sl
   13a28:	andeq	r3, r1, r4, asr #20
   13a2c:	andeq	r4, r1, r0, lsl #6
   13a30:	ldr	r1, [sp, #132]	; 0x84
   13a34:	ldr	r0, [sp, #128]	; 0x80
   13a38:	cmp	r1, #0
   13a3c:	str	r0, [fp, #-288]	; 0xfffffee0
   13a40:	beq	13a4c <__assert_fail@plt+0x16e0>
   13a44:	mvn	r0, #0
   13a48:	str	r0, [fp, #-288]	; 0xfffffee0
   13a4c:	ldr	r0, [fp, #-208]	; 0xffffff30
   13a50:	ldr	r5, [sp, #112]	; 0x70
   13a54:	movw	r3, #34448	; 0x8690
   13a58:	mvn	lr, #0
   13a5c:	movt	r3, #3
   13a60:	cmp	r0, #0
   13a64:	beq	14314 <__assert_fail@plt+0x1fa8>
   13a68:	ldrb	r1, [r0]
   13a6c:	cmp	r1, #46	; 0x2e
   13a70:	bne	142f8 <__assert_fail@plt+0x1f8c>
   13a74:	movw	r1, #21100	; 0x526c
   13a78:	add	r0, r0, #1
   13a7c:	add	r3, sp, #128	; 0x80
   13a80:	mov	r2, #10
   13a84:	movt	r1, #2
   13a88:	str	r1, [sp]
   13a8c:	sub	r1, fp, #208	; 0xd0
   13a90:	bl	23004 <__assert_fail@plt+0x10c98>
   13a94:	cmp	r0, #4
   13a98:	bhi	13ad8 <__assert_fail@plt+0x176c>
   13a9c:	add	r1, pc, #4
   13aa0:	mov	r4, #0
   13aa4:	ldr	pc, [r1, r0, lsl #2]
   13aa8:			; <UNDEFINED> instruction: 0x00013abc
   13aac:	ldrdeq	r3, [r1], -r0
   13ab0:			; <UNDEFINED> instruction: 0x00013abc
   13ab4:	ldrdeq	r3, [r1], -r0
   13ab8:	andeq	r4, r1, r4, lsl #6
   13abc:	ldr	r1, [sp, #132]	; 0x84
   13ac0:	ldr	r0, [sp, #128]	; 0x80
   13ac4:	cmp	r1, #0
   13ac8:	str	r0, [fp, #-284]	; 0xfffffee4
   13acc:	beq	13ad8 <__assert_fail@plt+0x176c>
   13ad0:	mvn	r0, #0
   13ad4:	str	r0, [fp, #-284]	; 0xfffffee4
   13ad8:	ldr	r4, [fp, #-208]	; 0xffffff30
   13adc:	b	14304 <__assert_fail@plt+0x1f98>
   13ae0:	movw	r0, #33661	; 0x837d
   13ae4:	mov	r1, #1
   13ae8:	mov	r4, #115	; 0x73
   13aec:	movt	r0, #3
   13af0:	strb	r1, [r0]
   13af4:	mov	r0, r6
   13af8:	b	12e8c <__assert_fail@plt+0xb20>
   13afc:	movw	r0, #33504	; 0x82e0
   13b00:	movw	r4, #33672	; 0x8388
   13b04:	mov	r7, r8
   13b08:	mov	r8, r6
   13b0c:	ldr	r2, [sp, #64]	; 0x40
   13b10:	mov	r3, ip
   13b14:	movt	r0, #3
   13b18:	movt	r4, #3
   13b1c:	ldr	r6, [r0]
   13b20:	movw	r0, #34708	; 0x8794
   13b24:	ldr	r1, [r4]
   13b28:	movt	r0, #3
   13b2c:	ldr	r0, [r0]
   13b30:	cmp	r1, r0
   13b34:	bne	14244 <__assert_fail@plt+0x1ed8>
   13b38:	movw	r9, #34712	; 0x8798
   13b3c:	movw	r1, #34708	; 0x8794
   13b40:	mov	r2, #4
   13b44:	str	r3, [sp, #36]	; 0x24
   13b48:	movt	r9, #3
   13b4c:	movt	r1, #3
   13b50:	ldr	r0, [r9]
   13b54:	bl	228cc <__assert_fail@plt+0x10560>
   13b58:	ldr	r5, [sp, #112]	; 0x70
   13b5c:	ldr	r3, [sp, #36]	; 0x24
   13b60:	ldr	r2, [sp, #64]	; 0x40
   13b64:	ldr	r1, [r4]
   13b68:	str	r0, [r9]
   13b6c:	movw	r9, #34192	; 0x8590
   13b70:	mvn	lr, #0
   13b74:	movt	r9, #3
   13b78:	b	14250 <__assert_fail@plt+0x1ee4>
   13b7c:	movw	r0, #33663	; 0x837f
   13b80:	mov	r1, #1
   13b84:	mov	r4, #122	; 0x7a
   13b88:	movt	r0, #3
   13b8c:	strb	r1, [r0]
   13b90:	mov	r0, r6
   13b94:	b	12e8c <__assert_fail@plt+0xb20>
   13b98:	movw	r0, #33504	; 0x82e0
   13b9c:	sub	r3, fp, #240	; 0xf0
   13ba0:	mov	r2, #10
   13ba4:	str	r8, [sp, #92]	; 0x5c
   13ba8:	mov	r8, ip
   13bac:	mov	r7, sl
   13bb0:	movt	r0, #3
   13bb4:	ldr	r1, [r0]
   13bb8:	ldr	r0, [fp, #-104]	; 0xffffff98
   13bbc:	str	r0, [sp, #72]	; 0x48
   13bc0:	movw	r0, #21100	; 0x526c
   13bc4:	str	r1, [sp, #68]	; 0x44
   13bc8:	movt	r0, #2
   13bcc:	str	r0, [sp]
   13bd0:	mov	r0, r1
   13bd4:	mov	r1, #0
   13bd8:	bl	23004 <__assert_fail@plt+0x10c98>
   13bdc:	mov	r4, r0
   13be0:	add	r1, sp, #128	; 0x80
   13be4:	mov	r0, #7
   13be8:	bl	11fb8 <getrlimit64@plt>
   13bec:	ldr	r1, [sp, #128]	; 0x80
   13bf0:	cmp	r0, #0
   13bf4:	mov	sl, #17
   13bf8:	subeq	sl, r1, #3
   13bfc:	cmp	r4, #0
   13c00:	bne	1646c <__assert_fail@plt+0x4100>
   13c04:	ldr	r1, [fp, #-236]	; 0xffffff14
   13c08:	ldr	r0, [fp, #-240]	; 0xffffff10
   13c0c:	ldr	r5, [sp, #112]	; 0x70
   13c10:	movw	r2, #33272	; 0x81f8
   13c14:	mvn	lr, #0
   13c18:	movt	r2, #3
   13c1c:	cmp	r1, #0
   13c20:	str	r0, [r2]
   13c24:	bne	16474 <__assert_fail@plt+0x4108>
   13c28:	cmp	r0, #1
   13c2c:	bls	164e4 <__assert_fail@plt+0x4178>
   13c30:	cmp	sl, r0
   13c34:	bcc	16474 <__assert_fail@plt+0x4108>
   13c38:	mov	ip, r8
   13c3c:	ldr	r8, [sp, #92]	; 0x5c
   13c40:	mov	r4, #260	; 0x104
   13c44:	mov	r0, r6
   13c48:	mov	sl, r7
   13c4c:	b	12e8c <__assert_fail@plt+0xb20>
   13c50:	movw	r0, #33504	; 0x82e0
   13c54:	mov	r7, r6
   13c58:	mov	r9, r8
   13c5c:	mov	r8, ip
   13c60:	movw	r4, #261	; 0x105
   13c64:	movt	r0, #3
   13c68:	ldr	r6, [r0]
   13c6c:	ldr	r0, [sp, #32]
   13c70:	cmp	r0, #0
   13c74:	beq	142b4 <__assert_fail@plt+0x1f48>
   13c78:	mov	r1, r6
   13c7c:	bl	11e50 <strcmp@plt>
   13c80:	ldr	r5, [sp, #112]	; 0x70
   13c84:	mov	ip, r8
   13c88:	mov	r8, r9
   13c8c:	movw	r9, #34192	; 0x8590
   13c90:	cmp	r0, #0
   13c94:	mvn	lr, #0
   13c98:	mov	r0, r7
   13c9c:	str	r6, [sp, #32]
   13ca0:	movt	r9, #3
   13ca4:	beq	12e8c <__assert_fail@plt+0xb20>
   13ca8:	b	16568 <__assert_fail@plt+0x41fc>
   13cac:	movw	r0, #33660	; 0x837c
   13cb0:	mov	r1, #1
   13cb4:	movw	r4, #258	; 0x102
   13cb8:	movt	r0, #3
   13cbc:	strb	r1, [r0]
   13cc0:	mov	r0, r6
   13cc4:	b	12e8c <__assert_fail@plt+0xb20>
   13cc8:	movw	r0, #33504	; 0x82e0
   13ccc:	movw	r4, #259	; 0x103
   13cd0:	movt	r0, #3
   13cd4:	ldr	r0, [r0]
   13cd8:	str	r0, [sp, #100]	; 0x64
   13cdc:	mov	r0, r6
   13ce0:	b	12e8c <__assert_fail@plt+0xb20>
   13ce4:	ldr	r1, [fp, #-208]	; 0xffffff30
   13ce8:	ldrb	r0, [r1, #-1]
   13cec:	sub	r2, r0, #48	; 0x30
   13cf0:	mov	r0, #2
   13cf4:	cmp	r2, #9
   13cf8:	bhi	16578 <__assert_fail@plt+0x420c>
   13cfc:	ldrb	r2, [r1, #1]
   13d00:	ldr	r5, [sp, #112]	; 0x70
   13d04:	mvn	lr, #0
   13d08:	cmp	r2, #0
   13d0c:	bne	16578 <__assert_fail@plt+0x420c>
   13d10:	ldrb	r1, [r1]
   13d14:	mov	ip, r7
   13d18:	cmp	r1, #98	; 0x62
   13d1c:	beq	13d7c <__assert_fail@plt+0x1a10>
   13d20:	cmp	r1, #37	; 0x25
   13d24:	bne	16578 <__assert_fail@plt+0x420c>
   13d28:	bl	1ede8 <__assert_fail@plt+0xca7c>
   13d2c:	ldr	r0, [sp, #128]	; 0x80
   13d30:	ldr	r1, [sp, #132]	; 0x84
   13d34:	vmov.f64	d8, d0
   13d38:	bl	24ef4 <_obstack_memory_used@@Base+0x40c>
   13d3c:	vmov	d16, r0, r1
   13d40:	vldr	d17, [pc, #1008]	; 14138 <__assert_fail@plt+0x1dcc>
   13d44:	vldr	d18, [pc, #1012]	; 14140 <__assert_fail@plt+0x1dd4>
   13d48:	vmul.f64	d16, d8, d16
   13d4c:	vdiv.f64	d16, d16, d17
   13d50:	vcmpe.f64	d16, d18
   13d54:	vmrs	APSR_nzcv, fpscr
   13d58:	bpl	16574 <__assert_fail@plt+0x4208>
   13d5c:	vmov	r0, r1, d16
   13d60:	bl	24fb8 <_obstack_memory_used@@Base+0x4d0>
   13d64:	ldr	r5, [sp, #112]	; 0x70
   13d68:	str	r1, [sp, #132]	; 0x84
   13d6c:	str	r0, [sp, #128]	; 0x80
   13d70:	mov	ip, r7
   13d74:	mvn	lr, #0
   13d78:	b	13d84 <__assert_fail@plt+0x1a18>
   13d7c:	ldr	r0, [sp, #128]	; 0x80
   13d80:	ldr	r1, [sp, #132]	; 0x84
   13d84:	movw	r2, #33676	; 0x838c
   13d88:	movt	r2, #3
   13d8c:	ldr	r3, [r2]
   13d90:	subs	r3, r0, r3
   13d94:	sbcs	r3, r1, #0
   13d98:	bcc	13dc8 <__assert_fail@plt+0x1a5c>
   13d9c:	cmp	r1, #0
   13da0:	str	r0, [r2]
   13da4:	bne	16574 <__assert_fail@plt+0x4208>
   13da8:	movw	r1, #33272	; 0x81f8
   13dac:	movt	r1, #3
   13db0:	ldr	r1, [r1]
   13db4:	add	r1, r1, r1, lsl #3
   13db8:	lsl	r1, r1, #1
   13dbc:	cmp	r1, r0
   13dc0:	movcc	r1, r0
   13dc4:	str	r1, [r2]
   13dc8:	mov	r4, #83	; 0x53
   13dcc:	mov	r0, r6
   13dd0:	b	12e8c <__assert_fail@plt+0xb20>
   13dd4:	ldr	r2, [fp, #-284]	; 0xfffffee4
   13dd8:	movw	r3, #34448	; 0x8690
   13ddc:	orrs	r1, r1, r2
   13de0:	movt	r3, #3
   13de4:	mvneq	r1, #0
   13de8:	streq	r1, [fp, #-288]	; 0xfffffee0
   13dec:	b	13df8 <__assert_fail@plt+0x1a8c>
   13df0:	mov	r1, #1
   13df4:	strb	r1, [fp, #-259]	; 0xfffffefd
   13df8:	add	r0, r0, #1
   13dfc:	ldrb	r1, [r0, #-1]
   13e00:	sub	r1, r1, #44	; 0x2c
   13e04:	cmp	r1, #70	; 0x46
   13e08:	bhi	13fb0 <__assert_fail@plt+0x1c44>
   13e0c:	add	r2, pc, #0
   13e10:	ldr	pc, [r2, r1, lsl #2]
   13e14:	strdeq	r3, [r1], -r8
   13e18:			; <UNDEFINED> instruction: 0x00013fb0
   13e1c:			; <UNDEFINED> instruction: 0x00013fb0
   13e20:			; <UNDEFINED> instruction: 0x00013fb0
   13e24:			; <UNDEFINED> instruction: 0x00013fb0
   13e28:			; <UNDEFINED> instruction: 0x00013fb0
   13e2c:			; <UNDEFINED> instruction: 0x00013fb0
   13e30:			; <UNDEFINED> instruction: 0x00013fb0
   13e34:			; <UNDEFINED> instruction: 0x00013fb0
   13e38:			; <UNDEFINED> instruction: 0x00013fb0
   13e3c:			; <UNDEFINED> instruction: 0x00013fb0
   13e40:			; <UNDEFINED> instruction: 0x00013fb0
   13e44:			; <UNDEFINED> instruction: 0x00013fb0
   13e48:			; <UNDEFINED> instruction: 0x00013fb0
   13e4c:			; <UNDEFINED> instruction: 0x00013fb0
   13e50:			; <UNDEFINED> instruction: 0x00013fb0
   13e54:			; <UNDEFINED> instruction: 0x00013fb0
   13e58:			; <UNDEFINED> instruction: 0x00013fb0
   13e5c:			; <UNDEFINED> instruction: 0x00013fb0
   13e60:			; <UNDEFINED> instruction: 0x00013fb0
   13e64:			; <UNDEFINED> instruction: 0x00013fb0
   13e68:			; <UNDEFINED> instruction: 0x00013fb0
   13e6c:			; <UNDEFINED> instruction: 0x00013fb0
   13e70:			; <UNDEFINED> instruction: 0x00013fb0
   13e74:			; <UNDEFINED> instruction: 0x00013fb0
   13e78:			; <UNDEFINED> instruction: 0x00013fb0
   13e7c:			; <UNDEFINED> instruction: 0x00013fb0
   13e80:			; <UNDEFINED> instruction: 0x00013fb0
   13e84:			; <UNDEFINED> instruction: 0x00013fb0
   13e88:			; <UNDEFINED> instruction: 0x00013fb0
   13e8c:			; <UNDEFINED> instruction: 0x00013fb0
   13e90:			; <UNDEFINED> instruction: 0x00013fb0
   13e94:			; <UNDEFINED> instruction: 0x00013fb0
   13e98:	andeq	r3, r1, r0, lsr pc
   13e9c:			; <UNDEFINED> instruction: 0x00013fb0
   13ea0:			; <UNDEFINED> instruction: 0x00013fb0
   13ea4:			; <UNDEFINED> instruction: 0x00013fb0
   13ea8:			; <UNDEFINED> instruction: 0x00013fb0
   13eac:	andeq	r3, r1, r8, asr pc
   13eb0:			; <UNDEFINED> instruction: 0x00013fb0
   13eb4:			; <UNDEFINED> instruction: 0x00013fb0
   13eb8:			; <UNDEFINED> instruction: 0x00013fb0
   13ebc:	andeq	r3, r1, r8, ror pc
   13ec0:			; <UNDEFINED> instruction: 0x00013fb0
   13ec4:			; <UNDEFINED> instruction: 0x00013fb0
   13ec8:			; <UNDEFINED> instruction: 0x00013fb0
   13ecc:			; <UNDEFINED> instruction: 0x00013fb0
   13ed0:			; <UNDEFINED> instruction: 0x00013fb0
   13ed4:			; <UNDEFINED> instruction: 0x00013fb0
   13ed8:			; <UNDEFINED> instruction: 0x00013fb0
   13edc:			; <UNDEFINED> instruction: 0x00013fb0
   13ee0:			; <UNDEFINED> instruction: 0x00013fb0
   13ee4:			; <UNDEFINED> instruction: 0x00013fb0
   13ee8:			; <UNDEFINED> instruction: 0x00013fb0
   13eec:	andeq	r3, r1, r4, ror #30
   13ef0:			; <UNDEFINED> instruction: 0x00013fb0
   13ef4:	andeq	r3, r1, r0, ror pc
   13ef8:			; <UNDEFINED> instruction: 0x00013fb0
   13efc:	andeq	r3, r1, r4, lsl #31
   13f00:	andeq	r3, r1, ip, lsl #31
   13f04:	strdeq	r3, [r1], -r0
   13f08:	andeq	r3, r1, ip, lsr pc
   13f0c:			; <UNDEFINED> instruction: 0x00013fb0
   13f10:			; <UNDEFINED> instruction: 0x00013fb0
   13f14:			; <UNDEFINED> instruction: 0x00013fb0
   13f18:			; <UNDEFINED> instruction: 0x00013fb0
   13f1c:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   13f20:			; <UNDEFINED> instruction: 0x00013fb0
   13f24:			; <UNDEFINED> instruction: 0x00013fb0
   13f28:			; <UNDEFINED> instruction: 0x00013fb0
   13f2c:	andeq	r3, r1, r4, lsr #31
   13f30:	mov	r1, #1
   13f34:	strb	r1, [fp, #-258]	; 0xfffffefe
   13f38:	b	13df8 <__assert_fail@plt+0x1a8c>
   13f3c:	ldr	r1, [fp, #-272]	; 0xfffffef0
   13f40:	cmp	r1, #0
   13f44:	bne	13df8 <__assert_fail@plt+0x1a8c>
   13f48:	movw	r1, #33936	; 0x8490
   13f4c:	movt	r1, #3
   13f50:	str	r1, [fp, #-272]	; 0xfffffef0
   13f54:	b	13df8 <__assert_fail@plt+0x1a8c>
   13f58:	mov	r1, #1
   13f5c:	strb	r1, [fp, #-261]	; 0xfffffefb
   13f60:	b	13df8 <__assert_fail@plt+0x1a8c>
   13f64:	mov	r1, #1
   13f68:	strb	r1, [fp, #-264]	; 0xfffffef8
   13f6c:	b	13df8 <__assert_fail@plt+0x1a8c>
   13f70:	str	r9, [fp, #-272]	; 0xfffffef0
   13f74:	b	13df8 <__assert_fail@plt+0x1a8c>
   13f78:	mov	r1, #1
   13f7c:	strb	r1, [fp, #-256]	; 0xffffff00
   13f80:	b	13df8 <__assert_fail@plt+0x1a8c>
   13f84:	str	r3, [fp, #-268]	; 0xfffffef4
   13f88:	b	13df8 <__assert_fail@plt+0x1a8c>
   13f8c:	mov	r1, #1
   13f90:	strb	r1, [fp, #-260]	; 0xfffffefc
   13f94:	b	13df8 <__assert_fail@plt+0x1a8c>
   13f98:	mov	r1, #1
   13f9c:	strb	r1, [fp, #-262]	; 0xfffffefa
   13fa0:	b	13df8 <__assert_fail@plt+0x1a8c>
   13fa4:	mov	r1, #1
   13fa8:	strb	r1, [fp, #-257]	; 0xfffffeff
   13fac:	b	13df8 <__assert_fail@plt+0x1a8c>
   13fb0:	mov	r1, #0
   13fb4:	str	r1, [fp, #-276]	; 0xfffffeec
   13fb8:	mvn	r1, #0
   13fbc:	str	r1, [fp, #-280]	; 0xfffffee8
   13fc0:	ldrb	r1, [r0, #-1]
   13fc4:	b	141c0 <__assert_fail@plt+0x1e54>
   13fc8:	ldr	r0, [sp, #132]	; 0x84
   13fcc:	cmp	r0, #0
   13fd0:	beq	142c8 <__assert_fail@plt+0x1f5c>
   13fd4:	ldr	r5, [sp, #112]	; 0x70
   13fd8:	mov	r0, #0
   13fdc:	mvn	r1, #0
   13fe0:	mvn	lr, #0
   13fe4:	str	r0, [sp, #132]	; 0x84
   13fe8:	mvn	r0, #0
   13fec:	str	r1, [sp, #128]	; 0x80
   13ff0:	str	r0, [sp, #28]
   13ff4:	b	142e0 <__assert_fail@plt+0x1f74>
   13ff8:	ldr	r1, [sp, #88]	; 0x58
   13ffc:	movw	r2, #25003	; 0x61ab
   14000:	movt	r2, #2
   14004:	bl	168f4 <__assert_fail@plt+0x4588>
   14008:	ldr	r1, [fp, #-280]	; 0xfffffee8
   1400c:	sub	r2, r1, #1
   14010:	cmp	r1, #0
   14014:	str	r2, [fp, #-280]	; 0xfffffee8
   14018:	beq	16594 <__assert_fail@plt+0x4228>
   1401c:	ldrb	r1, [r0]
   14020:	cmp	r1, #46	; 0x2e
   14024:	bne	1403c <__assert_fail@plt+0x1cd0>
   14028:	ldr	r1, [sp, #80]	; 0x50
   1402c:	movw	r2, #24817	; 0x60f1
   14030:	add	r0, r0, #1
   14034:	movt	r2, #2
   14038:	bl	168f4 <__assert_fail@plt+0x4588>
   1403c:	movw	r5, #34448	; 0x8690
   14040:	movt	r5, #3
   14044:	b	14054 <__assert_fail@plt+0x1ce8>
   14048:	mov	r1, #1
   1404c:	add	r0, r0, #1
   14050:	strb	r1, [fp, #-259]	; 0xfffffefd
   14054:	ldrb	r1, [r0]
   14058:	sub	r2, r1, #77	; 0x4d
   1405c:	cmp	r2, #37	; 0x25
   14060:	bhi	141c0 <__assert_fail@plt+0x1e54>
   14064:	add	r3, pc, #0
   14068:	ldr	pc, [r3, r2, lsl #2]
   1406c:	andeq	r4, r1, r4, lsl #2
   14070:	andeq	r4, r1, r0, asr #3
   14074:	andeq	r4, r1, r0, asr #3
   14078:	andeq	r4, r1, r0, asr #3
   1407c:	andeq	r4, r1, r0, asr #3
   14080:	muleq	r1, r0, r1
   14084:	andeq	r4, r1, r0, asr #3
   14088:	andeq	r4, r1, r0, asr #3
   1408c:	andeq	r4, r1, r0, asr #3
   14090:	andeq	r4, r1, r4, ror r1
   14094:	andeq	r4, r1, r0, asr #3
   14098:	andeq	r4, r1, r0, asr #3
   1409c:	andeq	r4, r1, r0, asr #3
   140a0:	andeq	r4, r1, r0, asr #3
   140a4:	andeq	r4, r1, r0, asr #3
   140a8:	andeq	r4, r1, r0, asr #3
   140ac:	andeq	r4, r1, r0, asr #3
   140b0:	andeq	r4, r1, r0, asr #3
   140b4:	andeq	r4, r1, r0, asr #3
   140b8:	andeq	r4, r1, r0, asr #3
   140bc:	andeq	r4, r1, r0, asr #3
   140c0:	andeq	r4, r1, r4, asr r1
   140c4:	andeq	r4, r1, r0, asr #3
   140c8:	andeq	r4, r1, r4, lsl #3
   140cc:	andeq	r4, r1, r0, asr #3
   140d0:	andeq	r4, r1, r8, asr #2
   140d4:	andeq	r4, r1, r4, ror #2
   140d8:	andeq	r4, r1, r8, asr #32
   140dc:	andeq	r4, r1, r4, lsl r1
   140e0:	andeq	r4, r1, r0, asr #3
   140e4:	andeq	r4, r1, r0, asr #3
   140e8:	andeq	r4, r1, r0, asr #3
   140ec:	andeq	r4, r1, r0, asr #3
   140f0:			; <UNDEFINED> instruction: 0x000141b0
   140f4:	andeq	r4, r1, r0, asr #3
   140f8:	andeq	r4, r1, r0, asr #3
   140fc:	andeq	r4, r1, r0, asr #3
   14100:	andeq	r4, r1, r0, lsr #3
   14104:	mov	r1, #1
   14108:	add	r0, r0, #1
   1410c:	strb	r1, [fp, #-258]	; 0xfffffefe
   14110:	b	14054 <__assert_fail@plt+0x1ce8>
   14114:	ldr	r1, [fp, #-272]	; 0xfffffef0
   14118:	cmp	r1, #0
   1411c:	bne	1417c <__assert_fail@plt+0x1e10>
   14120:	movw	r1, #33936	; 0x8490
   14124:	add	r0, r0, #1
   14128:	movt	r1, #3
   1412c:	str	r1, [fp, #-272]	; 0xfffffef0
   14130:	b	14054 <__assert_fail@plt+0x1ce8>
   14134:	nop	{0}
   14138:	andeq	r0, r0, r0
   1413c:	subsmi	r0, r9, r0
   14140:	andeq	r0, r0, r0
   14144:	mvnsmi	r0, #0
   14148:	str	r5, [fp, #-268]	; 0xfffffef4
   1414c:	add	r0, r0, #1
   14150:	b	14054 <__assert_fail@plt+0x1ce8>
   14154:	mov	r1, #1
   14158:	add	r0, r0, #1
   1415c:	strb	r1, [fp, #-263]	; 0xfffffef9
   14160:	b	14054 <__assert_fail@plt+0x1ce8>
   14164:	mov	r1, #1
   14168:	add	r0, r0, #1
   1416c:	strb	r1, [fp, #-260]	; 0xfffffefc
   14170:	b	14054 <__assert_fail@plt+0x1ce8>
   14174:	mov	r1, #1
   14178:	strb	r1, [fp, #-256]	; 0xffffff00
   1417c:	add	r0, r0, #1
   14180:	b	14054 <__assert_fail@plt+0x1ce8>
   14184:	str	r9, [fp, #-272]	; 0xfffffef0
   14188:	add	r0, r0, #1
   1418c:	b	14054 <__assert_fail@plt+0x1ce8>
   14190:	mov	r1, #1
   14194:	add	r0, r0, #1
   14198:	strb	r1, [fp, #-261]	; 0xfffffefb
   1419c:	b	14054 <__assert_fail@plt+0x1ce8>
   141a0:	mov	r1, #1
   141a4:	add	r0, r0, #1
   141a8:	strb	r1, [fp, #-257]	; 0xfffffeff
   141ac:	b	14054 <__assert_fail@plt+0x1ce8>
   141b0:	mov	r1, #1
   141b4:	add	r0, r0, #1
   141b8:	strb	r1, [fp, #-262]	; 0xfffffefa
   141bc:	b	14054 <__assert_fail@plt+0x1ce8>
   141c0:	cmp	r1, #0
   141c4:	bne	165a4 <__assert_fail@plt+0x4238>
   141c8:	sub	r0, fp, #288	; 0x120
   141cc:	mov	r1, #40	; 0x28
   141d0:	bl	22b80 <__assert_fail@plt+0x10814>
   141d4:	movw	r1, #33664	; 0x8380
   141d8:	movt	r1, #3
   141dc:	ldr	r3, [r1]
   141e0:	mov	r2, r1
   141e4:	add	r1, r3, #36	; 0x24
   141e8:	cmp	r3, #0
   141ec:	bne	141dc <__assert_fail@plt+0x1e70>
   141f0:	mov	r1, #0
   141f4:	str	r0, [r2]
   141f8:	mov	r4, #107	; 0x6b
   141fc:	str	r1, [r0, #36]	; 0x24
   14200:	mov	r0, r6
   14204:	ldr	r5, [sp, #112]	; 0x70
   14208:	mov	ip, r7
   1420c:	mvn	lr, #0
   14210:	b	12e8c <__assert_fail@plt+0xb20>
   14214:	ldr	r0, [sp, #108]	; 0x6c
   14218:	ldr	r1, [sl]
   1421c:	str	r0, [sp, #108]	; 0x6c
   14220:	ldr	r0, [sp, #24]
   14224:	ldr	ip, [sp, #36]	; 0x24
   14228:	movw	r9, #34192	; 0x8590
   1422c:	mov	sl, r6
   14230:	add	sl, r6, #1
   14234:	mov	r4, #1
   14238:	movt	r9, #3
   1423c:	str	r1, [r8, r6, lsl #2]
   14240:	b	12e8c <__assert_fail@plt+0xb20>
   14244:	movw	r0, #34712	; 0x8798
   14248:	movt	r0, #3
   1424c:	ldr	r0, [r0]
   14250:	str	r2, [sp, #64]	; 0x40
   14254:	add	r2, r1, #1
   14258:	mov	ip, r3
   1425c:	str	r2, [r4]
   14260:	str	r6, [r0, r1, lsl #2]
   14264:	mov	r0, r8
   14268:	mov	r4, #84	; 0x54
   1426c:	mov	r8, r7
   14270:	b	12e8c <__assert_fail@plt+0xb20>
   14274:	movw	r0, #33504	; 0x82e0
   14278:	movt	r0, #3
   1427c:	ldr	r4, [r0]
   14280:	str	r4, [r6]
   14284:	movw	r4, #257	; 0x101
   14288:	b	142b8 <__assert_fail@plt+0x1f4c>
   1428c:	mov	r4, #99	; 0x63
   14290:	uxtb	r0, ip
   14294:	cmp	r0, #0
   14298:	cmpne	r4, r0
   1429c:	bne	165b4 <__assert_fail@plt+0x4248>
   142a0:	mov	r0, r6
   142a4:	mov	ip, r4
   142a8:	b	12e8c <__assert_fail@plt+0xb20>
   142ac:	str	r6, [sp, #64]	; 0x40
   142b0:	b	142b8 <__assert_fail@plt+0x1f4c>
   142b4:	str	r6, [sp, #32]
   142b8:	mov	ip, r8
   142bc:	mov	r0, r7
   142c0:	mov	r8, r9
   142c4:	b	142ec <__assert_fail@plt+0x1f80>
   142c8:	ldr	r1, [sp, #128]	; 0x80
   142cc:	ldr	r5, [sp, #112]	; 0x70
   142d0:	mvn	lr, #0
   142d4:	orrs	r0, r1, r0
   142d8:	str	r1, [sp, #28]
   142dc:	beq	165c0 <__assert_fail@plt+0x4254>
   142e0:	movw	r4, #263	; 0x107
   142e4:	mov	r0, r7
   142e8:	mov	ip, r9
   142ec:	movw	r9, #34192	; 0x8590
   142f0:	movt	r9, #3
   142f4:	b	12e8c <__assert_fail@plt+0xb20>
   142f8:	mov	r4, r0
   142fc:	b	14314 <__assert_fail@plt+0x1fa8>
   14300:	mov	r4, #0
   14304:	ldr	r5, [sp, #112]	; 0x70
   14308:	movw	r3, #34448	; 0x8690
   1430c:	mvn	lr, #0
   14310:	movt	r3, #3
   14314:	ldr	r0, [fp, #-288]	; 0xfffffee0
   14318:	ldr	r1, [fp, #-284]	; 0xfffffee4
   1431c:	orrs	r0, r0, r1
   14320:	mvneq	r0, #0
   14324:	streq	r0, [fp, #-288]	; 0xfffffee0
   14328:	mov	r0, #1
   1432c:	cmp	r4, #0
   14330:	bne	14344 <__assert_fail@plt+0x1fd8>
   14334:	b	14218 <__assert_fail@plt+0x1eac>
   14338:	mov	r1, #1
   1433c:	add	r4, r4, #1
   14340:	strb	r1, [fp, #-259]	; 0xfffffefd
   14344:	ldrb	r1, [r4]
   14348:	cmp	r1, #114	; 0x72
   1434c:	bhi	14218 <__assert_fail@plt+0x1eac>
   14350:	add	r2, pc, #0
   14354:	ldr	pc, [r2, r1, lsl #2]
   14358:	andeq	r4, r1, ip, asr #11
   1435c:	andeq	r4, r1, r8, lsl r2
   14360:	andeq	r4, r1, r8, lsl r2
   14364:	andeq	r4, r1, r8, lsl r2
   14368:	andeq	r4, r1, r8, lsl r2
   1436c:	andeq	r4, r1, r8, lsl r2
   14370:	andeq	r4, r1, r8, lsl r2
   14374:	andeq	r4, r1, r8, lsl r2
   14378:	andeq	r4, r1, r8, lsl r2
   1437c:	andeq	r4, r1, r8, lsl r2
   14380:	andeq	r4, r1, r8, lsl r2
   14384:	andeq	r4, r1, r8, lsl r2
   14388:	andeq	r4, r1, r8, lsl r2
   1438c:	andeq	r4, r1, r8, lsl r2
   14390:	andeq	r4, r1, r8, lsl r2
   14394:	andeq	r4, r1, r8, lsl r2
   14398:	andeq	r4, r1, r8, lsl r2
   1439c:	andeq	r4, r1, r8, lsl r2
   143a0:	andeq	r4, r1, r8, lsl r2
   143a4:	andeq	r4, r1, r8, lsl r2
   143a8:	andeq	r4, r1, r8, lsl r2
   143ac:	andeq	r4, r1, r8, lsl r2
   143b0:	andeq	r4, r1, r8, lsl r2
   143b4:	andeq	r4, r1, r8, lsl r2
   143b8:	andeq	r4, r1, r8, lsl r2
   143bc:	andeq	r4, r1, r8, lsl r2
   143c0:	andeq	r4, r1, r8, lsl r2
   143c4:	andeq	r4, r1, r8, lsl r2
   143c8:	andeq	r4, r1, r8, lsl r2
   143cc:	andeq	r4, r1, r8, lsl r2
   143d0:	andeq	r4, r1, r8, lsl r2
   143d4:	andeq	r4, r1, r8, lsl r2
   143d8:	andeq	r4, r1, r8, lsl r2
   143dc:	andeq	r4, r1, r8, lsl r2
   143e0:	andeq	r4, r1, r8, lsl r2
   143e4:	andeq	r4, r1, r8, lsl r2
   143e8:	andeq	r4, r1, r8, lsl r2
   143ec:	andeq	r4, r1, r8, lsl r2
   143f0:	andeq	r4, r1, r8, lsl r2
   143f4:	andeq	r4, r1, r8, lsl r2
   143f8:	andeq	r4, r1, r8, lsl r2
   143fc:	andeq	r4, r1, r8, lsl r2
   14400:	andeq	r4, r1, r8, lsl r2
   14404:	andeq	r4, r1, r8, lsl r2
   14408:	andeq	r4, r1, r8, lsl r2
   1440c:	andeq	r4, r1, r8, lsl r2
   14410:	andeq	r4, r1, r8, lsl r2
   14414:	andeq	r4, r1, r8, lsl r2
   14418:	andeq	r4, r1, r8, lsl r2
   1441c:	andeq	r4, r1, r8, lsl r2
   14420:	andeq	r4, r1, r8, lsl r2
   14424:	andeq	r4, r1, r8, lsl r2
   14428:	andeq	r4, r1, r8, lsl r2
   1442c:	andeq	r4, r1, r8, lsl r2
   14430:	andeq	r4, r1, r8, lsl r2
   14434:	andeq	r4, r1, r8, lsl r2
   14438:	andeq	r4, r1, r8, lsl r2
   1443c:	andeq	r4, r1, r8, lsl r2
   14440:	andeq	r4, r1, r8, lsl r2
   14444:	andeq	r4, r1, r8, lsl r2
   14448:	andeq	r4, r1, r8, lsl r2
   1444c:	andeq	r4, r1, r8, lsl r2
   14450:	andeq	r4, r1, r8, lsl r2
   14454:	andeq	r4, r1, r8, lsl r2
   14458:	andeq	r4, r1, r8, lsl r2
   1445c:	andeq	r4, r1, r8, lsl r2
   14460:	andeq	r4, r1, r8, lsl r2
   14464:	andeq	r4, r1, r8, lsl r2
   14468:	andeq	r4, r1, r8, lsl r2
   1446c:	andeq	r4, r1, r8, lsl r2
   14470:	andeq	r4, r1, r8, lsl r2
   14474:	andeq	r4, r1, r8, lsl r2
   14478:	andeq	r4, r1, r8, lsl r2
   1447c:	andeq	r4, r1, r8, lsl r2
   14480:	andeq	r4, r1, r8, lsl r2
   14484:	andeq	r4, r1, r8, lsl r2
   14488:	andeq	r4, r1, r8, lsl r2
   1448c:	andeq	r4, r1, r4, lsr #10
   14490:	andeq	r4, r1, r8, lsl r2
   14494:	andeq	r4, r1, r8, lsl r2
   14498:	andeq	r4, r1, r8, lsl r2
   1449c:	andeq	r4, r1, r8, lsl r2
   144a0:	andeq	r4, r1, ip, asr #10
   144a4:	andeq	r4, r1, r8, lsl r2
   144a8:	andeq	r4, r1, r8, lsl r2
   144ac:	andeq	r4, r1, r8, lsl r2
   144b0:	andeq	r4, r1, r0, lsl #11
   144b4:	andeq	r4, r1, r8, lsl r2
   144b8:	andeq	r4, r1, r8, lsl r2
   144bc:	andeq	r4, r1, r8, lsl r2
   144c0:	andeq	r4, r1, r8, lsl r2
   144c4:	andeq	r4, r1, r8, lsl r2
   144c8:	andeq	r4, r1, r8, lsl r2
   144cc:	andeq	r4, r1, r8, lsl r2
   144d0:	andeq	r4, r1, r8, lsl r2
   144d4:	andeq	r4, r1, r8, lsl r2
   144d8:	andeq	r4, r1, r8, lsl r2
   144dc:	andeq	r4, r1, r8, lsl r2
   144e0:	andeq	r4, r1, ip, asr r5
   144e4:	andeq	r4, r1, r8, lsl r2
   144e8:	andeq	r4, r1, ip, ror #10
   144ec:	andeq	r4, r1, r8, lsl r2
   144f0:	muleq	r1, r0, r5
   144f4:	muleq	r1, ip, r5
   144f8:	andeq	r4, r1, r8, lsr r3
   144fc:	andeq	r4, r1, r4, lsr r5
   14500:	andeq	r4, r1, r8, lsl r2
   14504:	andeq	r4, r1, r8, lsl r2
   14508:	andeq	r4, r1, r8, lsl r2
   1450c:	andeq	r4, r1, r8, lsl r2
   14510:	andeq	r4, r1, ip, lsr #11
   14514:	andeq	r4, r1, r8, lsl r2
   14518:	andeq	r4, r1, r8, lsl r2
   1451c:	andeq	r4, r1, r8, lsl r2
   14520:			; <UNDEFINED> instruction: 0x000145bc
   14524:	mov	r1, #1
   14528:	add	r4, r4, #1
   1452c:	strb	r1, [fp, #-258]	; 0xfffffefe
   14530:	b	14344 <__assert_fail@plt+0x1fd8>
   14534:	ldr	r1, [fp, #-272]	; 0xfffffef0
   14538:	cmp	r1, #0
   1453c:	bne	14588 <__assert_fail@plt+0x221c>
   14540:	movw	r1, #33936	; 0x8490
   14544:	movt	r1, #3
   14548:	b	14574 <__assert_fail@plt+0x2208>
   1454c:	mov	r1, #1
   14550:	add	r4, r4, #1
   14554:	strb	r1, [fp, #-261]	; 0xfffffefb
   14558:	b	14344 <__assert_fail@plt+0x1fd8>
   1455c:	mov	r1, #1
   14560:	add	r4, r4, #1
   14564:	strb	r1, [fp, #-264]	; 0xfffffef8
   14568:	b	14344 <__assert_fail@plt+0x1fd8>
   1456c:	movw	r1, #34192	; 0x8590
   14570:	movt	r1, #3
   14574:	str	r1, [fp, #-272]	; 0xfffffef0
   14578:	add	r4, r4, #1
   1457c:	b	14344 <__assert_fail@plt+0x1fd8>
   14580:	mov	r1, #1
   14584:	strb	r1, [fp, #-256]	; 0xffffff00
   14588:	add	r4, r4, #1
   1458c:	b	14344 <__assert_fail@plt+0x1fd8>
   14590:	str	r3, [fp, #-268]	; 0xfffffef4
   14594:	add	r4, r4, #1
   14598:	b	14344 <__assert_fail@plt+0x1fd8>
   1459c:	mov	r1, #1
   145a0:	add	r4, r4, #1
   145a4:	strb	r1, [fp, #-260]	; 0xfffffefc
   145a8:	b	14344 <__assert_fail@plt+0x1fd8>
   145ac:	mov	r1, #1
   145b0:	add	r4, r4, #1
   145b4:	strb	r1, [fp, #-262]	; 0xfffffefa
   145b8:	b	14344 <__assert_fail@plt+0x1fd8>
   145bc:	mov	r1, #1
   145c0:	add	r4, r4, #1
   145c4:	strb	r1, [fp, #-257]	; 0xfffffeff
   145c8:	b	14344 <__assert_fail@plt+0x1fd8>
   145cc:	mov	sl, r6
   145d0:	ldr	r6, [sp, #24]
   145d4:	ldr	r7, [sp, #36]	; 0x24
   145d8:	cmp	r9, #0
   145dc:	movw	r9, #34192	; 0x8590
   145e0:	movt	r9, #3
   145e4:	beq	14900 <__assert_fail@plt+0x2594>
   145e8:	movw	r0, #33480	; 0x82c8
   145ec:	movt	r0, #3
   145f0:	mov	r2, r0
   145f4:	ldr	r0, [r0]
   145f8:	add	r1, r0, #1
   145fc:	str	r1, [r2]
   14600:	ldr	r1, [sp, #120]	; 0x78
   14604:	movw	r2, #24758	; 0x60b6
   14608:	movt	r2, #2
   1460c:	ldr	r4, [r1, r0, lsl #2]
   14610:	ldr	r1, [sp, #88]	; 0x58
   14614:	add	r0, r4, #1
   14618:	bl	168f4 <__assert_fail@plt+0x4588>
   1461c:	cmp	r0, #0
   14620:	beq	165e4 <__assert_fail@plt+0x4278>
   14624:	ldrb	r1, [r0]
   14628:	cmp	r1, #46	; 0x2e
   1462c:	bne	14644 <__assert_fail@plt+0x22d8>
   14630:	ldr	r1, [sp, #80]	; 0x50
   14634:	movw	r2, #24817	; 0x60f1
   14638:	add	r0, r0, #1
   1463c:	movt	r2, #2
   14640:	bl	168f4 <__assert_fail@plt+0x4588>
   14644:	ldr	r1, [fp, #-276]	; 0xfffffeec
   14648:	cmp	r1, #0
   1464c:	bne	14660 <__assert_fail@plt+0x22f4>
   14650:	ldr	r1, [fp, #-280]	; 0xfffffee8
   14654:	cmp	r1, #0
   14658:	subne	r1, r1, #1
   1465c:	strne	r1, [fp, #-280]	; 0xfffffee8
   14660:	movw	r3, #34448	; 0x8690
   14664:	movt	r3, #3
   14668:	ldrb	r1, [r0]
   1466c:	cmp	r1, #114	; 0x72
   14670:	bhi	16604 <__assert_fail@plt+0x4298>
   14674:	add	r2, pc, #0
   14678:	ldr	pc, [r2, r1, lsl #2]
   1467c:	andeq	r4, r1, r0, lsl #18
   14680:	andeq	r6, r1, r4, lsl #12
   14684:	andeq	r6, r1, r4, lsl #12
   14688:	andeq	r6, r1, r4, lsl #12
   1468c:	andeq	r6, r1, r4, lsl #12
   14690:	andeq	r6, r1, r4, lsl #12
   14694:	andeq	r6, r1, r4, lsl #12
   14698:	andeq	r6, r1, r4, lsl #12
   1469c:	andeq	r6, r1, r4, lsl #12
   146a0:	andeq	r6, r1, r4, lsl #12
   146a4:	andeq	r6, r1, r4, lsl #12
   146a8:	andeq	r6, r1, r4, lsl #12
   146ac:	andeq	r6, r1, r4, lsl #12
   146b0:	andeq	r6, r1, r4, lsl #12
   146b4:	andeq	r6, r1, r4, lsl #12
   146b8:	andeq	r6, r1, r4, lsl #12
   146bc:	andeq	r6, r1, r4, lsl #12
   146c0:	andeq	r6, r1, r4, lsl #12
   146c4:	andeq	r6, r1, r4, lsl #12
   146c8:	andeq	r6, r1, r4, lsl #12
   146cc:	andeq	r6, r1, r4, lsl #12
   146d0:	andeq	r6, r1, r4, lsl #12
   146d4:	andeq	r6, r1, r4, lsl #12
   146d8:	andeq	r6, r1, r4, lsl #12
   146dc:	andeq	r6, r1, r4, lsl #12
   146e0:	andeq	r6, r1, r4, lsl #12
   146e4:	andeq	r6, r1, r4, lsl #12
   146e8:	andeq	r6, r1, r4, lsl #12
   146ec:	andeq	r6, r1, r4, lsl #12
   146f0:	andeq	r6, r1, r4, lsl #12
   146f4:	andeq	r6, r1, r4, lsl #12
   146f8:	andeq	r6, r1, r4, lsl #12
   146fc:	andeq	r6, r1, r4, lsl #12
   14700:	andeq	r6, r1, r4, lsl #12
   14704:	andeq	r6, r1, r4, lsl #12
   14708:	andeq	r6, r1, r4, lsl #12
   1470c:	andeq	r6, r1, r4, lsl #12
   14710:	andeq	r6, r1, r4, lsl #12
   14714:	andeq	r6, r1, r4, lsl #12
   14718:	andeq	r6, r1, r4, lsl #12
   1471c:	andeq	r6, r1, r4, lsl #12
   14720:	andeq	r6, r1, r4, lsl #12
   14724:	andeq	r6, r1, r4, lsl #12
   14728:	andeq	r6, r1, r4, lsl #12
   1472c:	andeq	r6, r1, r4, lsl #12
   14730:	andeq	r6, r1, r4, lsl #12
   14734:	andeq	r6, r1, r4, lsl #12
   14738:	andeq	r6, r1, r4, lsl #12
   1473c:	andeq	r6, r1, r4, lsl #12
   14740:	andeq	r6, r1, r4, lsl #12
   14744:	andeq	r6, r1, r4, lsl #12
   14748:	andeq	r6, r1, r4, lsl #12
   1474c:	andeq	r6, r1, r4, lsl #12
   14750:	andeq	r6, r1, r4, lsl #12
   14754:	andeq	r6, r1, r4, lsl #12
   14758:	andeq	r6, r1, r4, lsl #12
   1475c:	andeq	r6, r1, r4, lsl #12
   14760:	andeq	r6, r1, r4, lsl #12
   14764:	andeq	r6, r1, r4, lsl #12
   14768:	andeq	r6, r1, r4, lsl #12
   1476c:	andeq	r6, r1, r4, lsl #12
   14770:	andeq	r6, r1, r4, lsl #12
   14774:	andeq	r6, r1, r4, lsl #12
   14778:	andeq	r6, r1, r4, lsl #12
   1477c:	andeq	r6, r1, r4, lsl #12
   14780:	andeq	r6, r1, r4, lsl #12
   14784:	andeq	r6, r1, r4, lsl #12
   14788:	andeq	r6, r1, r4, lsl #12
   1478c:	andeq	r6, r1, r4, lsl #12
   14790:	andeq	r6, r1, r4, lsl #12
   14794:	andeq	r6, r1, r4, lsl #12
   14798:	andeq	r6, r1, r4, lsl #12
   1479c:	andeq	r6, r1, r4, lsl #12
   147a0:	andeq	r6, r1, r4, lsl #12
   147a4:	andeq	r6, r1, r4, lsl #12
   147a8:	andeq	r6, r1, r4, lsl #12
   147ac:	andeq	r6, r1, r4, lsl #12
   147b0:	andeq	r4, r1, r8, asr #16
   147b4:	andeq	r6, r1, r4, lsl #12
   147b8:	andeq	r6, r1, r4, lsl #12
   147bc:	andeq	r6, r1, r4, lsl #12
   147c0:	andeq	r6, r1, r4, lsl #12
   147c4:	andeq	r4, r1, r4, lsr #17
   147c8:	andeq	r6, r1, r4, lsl #12
   147cc:	andeq	r6, r1, r4, lsl #12
   147d0:	andeq	r6, r1, r4, lsl #12
   147d4:			; <UNDEFINED> instruction: 0x000148b4
   147d8:	andeq	r6, r1, r4, lsl #12
   147dc:	andeq	r6, r1, r4, lsl #12
   147e0:	andeq	r6, r1, r4, lsl #12
   147e4:	andeq	r6, r1, r4, lsl #12
   147e8:	andeq	r6, r1, r4, lsl #12
   147ec:	andeq	r6, r1, r4, lsl #12
   147f0:	andeq	r6, r1, r4, lsl #12
   147f4:	andeq	r6, r1, r4, lsl #12
   147f8:	andeq	r6, r1, r4, lsl #12
   147fc:	andeq	r6, r1, r4, lsl #12
   14800:	andeq	r6, r1, r4, lsl #12
   14804:	andeq	r4, r1, r4, asr #17
   14808:	andeq	r6, r1, r4, lsl #12
   1480c:	muleq	r1, r8, r8
   14810:	andeq	r6, r1, r4, lsl #12
   14814:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14818:	andeq	r4, r1, r8, lsl #17
   1481c:	andeq	r4, r1, r0, ror #17
   14820:	andeq	r4, r1, r8, ror #16
   14824:	andeq	r6, r1, r4, lsl #12
   14828:	andeq	r6, r1, r4, lsl #12
   1482c:	andeq	r6, r1, r4, lsl #12
   14830:	andeq	r6, r1, r4, lsl #12
   14834:	strdeq	r4, [r1], -r0
   14838:	andeq	r6, r1, r4, lsl #12
   1483c:	andeq	r6, r1, r4, lsl #12
   14840:	andeq	r6, r1, r4, lsl #12
   14844:	andeq	r4, r1, r8, asr r8
   14848:	mov	r1, #1
   1484c:	add	r0, r0, #1
   14850:	strb	r1, [fp, #-258]	; 0xfffffefe
   14854:	b	14668 <__assert_fail@plt+0x22fc>
   14858:	mov	r1, #1
   1485c:	add	r0, r0, #1
   14860:	strb	r1, [fp, #-257]	; 0xfffffeff
   14864:	b	14668 <__assert_fail@plt+0x22fc>
   14868:	ldr	r1, [fp, #-272]	; 0xfffffef0
   1486c:	cmp	r1, #0
   14870:	bne	148bc <__assert_fail@plt+0x2550>
   14874:	movw	r1, #33936	; 0x8490
   14878:	add	r0, r0, #1
   1487c:	movt	r1, #3
   14880:	str	r1, [fp, #-272]	; 0xfffffef0
   14884:	b	14668 <__assert_fail@plt+0x22fc>
   14888:	mov	r1, #1
   1488c:	add	r0, r0, #1
   14890:	strb	r1, [fp, #-260]	; 0xfffffefc
   14894:	b	14668 <__assert_fail@plt+0x22fc>
   14898:	str	r9, [fp, #-272]	; 0xfffffef0
   1489c:	add	r0, r0, #1
   148a0:	b	14668 <__assert_fail@plt+0x22fc>
   148a4:	mov	r1, #1
   148a8:	add	r0, r0, #1
   148ac:	strb	r1, [fp, #-261]	; 0xfffffefb
   148b0:	b	14668 <__assert_fail@plt+0x22fc>
   148b4:	mov	r1, #1
   148b8:	strb	r1, [fp, #-256]	; 0xffffff00
   148bc:	add	r0, r0, #1
   148c0:	b	14668 <__assert_fail@plt+0x22fc>
   148c4:	mov	r1, #1
   148c8:	add	r0, r0, #1
   148cc:	strb	r1, [fp, #-263]	; 0xfffffef9
   148d0:	b	14668 <__assert_fail@plt+0x22fc>
   148d4:	str	r3, [fp, #-268]	; 0xfffffef4
   148d8:	add	r0, r0, #1
   148dc:	b	14668 <__assert_fail@plt+0x22fc>
   148e0:	mov	r1, #1
   148e4:	add	r0, r0, #1
   148e8:	strb	r1, [fp, #-259]	; 0xfffffefd
   148ec:	b	14668 <__assert_fail@plt+0x22fc>
   148f0:	mov	r1, #1
   148f4:	add	r0, r0, #1
   148f8:	strb	r1, [fp, #-262]	; 0xfffffefa
   148fc:	b	14668 <__assert_fail@plt+0x22fc>
   14900:	mov	r0, #1
   14904:	mov	r1, #40	; 0x28
   14908:	strb	r0, [fp, #-255]	; 0xffffff01
   1490c:	sub	r0, fp, #288	; 0x120
   14910:	bl	22b80 <__assert_fail@plt+0x10814>
   14914:	movw	r1, #33664	; 0x8380
   14918:	movt	r1, #3
   1491c:	ldr	r3, [r1]
   14920:	mov	r2, r1
   14924:	add	r1, r3, #36	; 0x24
   14928:	cmp	r3, #0
   1492c:	bne	1491c <__assert_fail@plt+0x25b0>
   14930:	mov	r1, #0
   14934:	str	r0, [r2]
   14938:	mov	r4, #1
   1493c:	str	r1, [r0, #36]	; 0x24
   14940:	mov	r0, #1
   14944:	str	r0, [sp, #108]	; 0x6c
   14948:	b	14200 <__assert_fail@plt+0x1e94>
   1494c:	ldr	r0, [sp, #100]	; 0x64
   14950:	cmp	r0, #0
   14954:	beq	14a4c <__assert_fail@plt+0x26e0>
   14958:	cmp	sl, #0
   1495c:	bne	16694 <__assert_fail@plt+0x4328>
   14960:	ldr	r0, [sp, #100]	; 0x64
   14964:	movw	r1, #26134	; 0x6616
   14968:	mov	r9, ip
   1496c:	movt	r1, #2
   14970:	bl	17464 <__assert_fail@plt+0x50f8>
   14974:	cmp	r0, #0
   14978:	beq	1670c <__assert_fail@plt+0x43a0>
   1497c:	add	r5, sp, #128	; 0x80
   14980:	mov	r4, r0
   14984:	mov	r0, r5
   14988:	bl	21768 <__assert_fail@plt+0xf3fc>
   1498c:	mov	r0, r4
   14990:	mov	r1, r5
   14994:	bl	2181c <__assert_fail@plt+0xf4b0>
   14998:	cmp	r0, #0
   1499c:	beq	16728 <__assert_fail@plt+0x43bc>
   149a0:	ldr	r1, [sp, #100]	; 0x64
   149a4:	mov	r0, r4
   149a8:	mov	r7, r6
   149ac:	bl	16a64 <__assert_fail@plt+0x46f8>
   149b0:	ldr	r0, [sp, #128]	; 0x80
   149b4:	cmp	r0, #0
   149b8:	beq	16734 <__assert_fail@plt+0x43c8>
   149bc:	mov	r0, r8
   149c0:	bl	1d148 <__assert_fail@plt+0xaddc>
   149c4:	ldr	sl, [sp, #128]	; 0x80
   149c8:	ldr	r8, [sp, #132]	; 0x84
   149cc:	movw	r4, #26862	; 0x68ee
   149d0:	mov	r6, #0
   149d4:	movt	r4, #2
   149d8:	cmp	sl, r6
   149dc:	beq	14a3c <__assert_fail@plt+0x26d0>
   149e0:	ldr	r5, [r8, r6, lsl #2]
   149e4:	mov	r1, r4
   149e8:	mov	r0, r5
   149ec:	bl	11e50 <strcmp@plt>
   149f0:	cmp	r0, #0
   149f4:	beq	1637c <__assert_fail@plt+0x4010>
   149f8:	ldrb	r0, [r5]
   149fc:	add	r6, r6, #1
   14a00:	cmp	r0, #0
   14a04:	bne	149d8 <__assert_fail@plt+0x266c>
   14a08:	movw	r1, #25350	; 0x6306
   14a0c:	mov	r0, #0
   14a10:	mov	r2, #5
   14a14:	movt	r1, #2
   14a18:	bl	11f7c <dcgettext@plt>
   14a1c:	ldr	r2, [sp, #100]	; 0x64
   14a20:	mov	r4, r0
   14a24:	mov	r0, #0
   14a28:	mov	r1, #3
   14a2c:	bl	20b24 <__assert_fail@plt+0xe7b8>
   14a30:	mov	r3, r0
   14a34:	str	r6, [sp]
   14a38:	b	163a4 <__assert_fail@plt+0x4038>
   14a3c:	mov	ip, r9
   14a40:	movw	r9, #34192	; 0x8590
   14a44:	mov	r6, r7
   14a48:	movt	r9, #3
   14a4c:	movw	r0, #33664	; 0x8380
   14a50:	ldr	r5, [sp, #64]	; 0x40
   14a54:	mov	r7, #0
   14a58:	movt	r0, #3
   14a5c:	ldr	r0, [r0]
   14a60:	cmp	r0, #0
   14a64:	beq	14b80 <__assert_fail@plt+0x2814>
   14a68:	mov	r7, #0
   14a6c:	mov	r1, r0
   14a70:	b	14a90 <__assert_fail@plt+0x2724>
   14a74:	ldrb	r2, [r1, #27]
   14a78:	ldr	r1, [r1, #36]	; 0x24
   14a7c:	and	r3, r7, #1
   14a80:	orrs	r7, r2, r3
   14a84:	movwne	r7, #1
   14a88:	cmp	r1, #0
   14a8c:	beq	14b70 <__assert_fail@plt+0x2804>
   14a90:	ldr	r2, [r1, #16]
   14a94:	cmp	r2, #0
   14a98:	bne	14a74 <__assert_fail@plt+0x2708>
   14a9c:	ldr	r2, [r1, #20]
   14aa0:	cmp	r2, #0
   14aa4:	bne	14a74 <__assert_fail@plt+0x2708>
   14aa8:	ldrb	r2, [r1, #24]
   14aac:	cmp	r2, #0
   14ab0:	bne	14a74 <__assert_fail@plt+0x2708>
   14ab4:	ldrb	r2, [r1, #25]
   14ab8:	cmp	r2, #0
   14abc:	bne	14a74 <__assert_fail@plt+0x2708>
   14ac0:	ldrb	r2, [r1, #26]
   14ac4:	cmp	r2, #0
   14ac8:	bne	14a74 <__assert_fail@plt+0x2708>
   14acc:	ldrb	r2, [r1, #28]
   14ad0:	cmp	r2, #0
   14ad4:	bne	14a74 <__assert_fail@plt+0x2708>
   14ad8:	ldrb	r2, [r1, #29]
   14adc:	cmp	r2, #0
   14ae0:	bne	14a74 <__assert_fail@plt+0x2708>
   14ae4:	ldrb	r2, [r1, #30]
   14ae8:	cmp	r2, #0
   14aec:	bne	14a74 <__assert_fail@plt+0x2708>
   14af0:	ldrb	r2, [r1, #32]
   14af4:	cmp	r2, #0
   14af8:	bne	14a74 <__assert_fail@plt+0x2708>
   14afc:	ldrb	r2, [r1, #27]
   14b00:	cmp	r2, #0
   14b04:	bne	14a74 <__assert_fail@plt+0x2708>
   14b08:	ldrb	r2, [r1, #31]
   14b0c:	cmp	r2, #0
   14b10:	bne	14a74 <__assert_fail@plt+0x2708>
   14b14:	ldr	r2, [sp, #288]	; 0x120
   14b18:	str	r2, [r1, #16]
   14b1c:	ldr	r2, [sp, #292]	; 0x124
   14b20:	str	r2, [r1, #20]
   14b24:	ldrb	r2, [sp, #296]	; 0x128
   14b28:	strb	r2, [r1, #24]
   14b2c:	ldrb	r2, [sp, #297]	; 0x129
   14b30:	strb	r2, [r1, #25]
   14b34:	ldrb	r2, [sp, #302]	; 0x12e
   14b38:	strb	r2, [r1, #30]
   14b3c:	ldrb	r2, [sp, #298]	; 0x12a
   14b40:	strb	r2, [r1, #26]
   14b44:	ldrb	r2, [sp, #300]	; 0x12c
   14b48:	strb	r2, [r1, #28]
   14b4c:	ldrb	r2, [sp, #301]	; 0x12d
   14b50:	strb	r2, [r1, #29]
   14b54:	ldrb	r2, [sp, #304]	; 0x130
   14b58:	strb	r2, [r1, #32]
   14b5c:	ldrb	r2, [sp, #299]	; 0x12b
   14b60:	strb	r2, [r1, #27]
   14b64:	ldrb	r2, [sp, #303]	; 0x12f
   14b68:	strb	r2, [r1, #31]
   14b6c:	b	14a74 <__assert_fail@plt+0x2708>
   14b70:	mov	r1, #0
   14b74:	cmp	r0, #0
   14b78:	str	r1, [sp, #68]	; 0x44
   14b7c:	bne	14c38 <__assert_fail@plt+0x28cc>
   14b80:	ldrb	r0, [sp, #297]	; 0x129
   14b84:	ldrb	r1, [sp, #296]	; 0x128
   14b88:	orr	r0, r1, r0
   14b8c:	ldrb	r1, [sp, #298]	; 0x12a
   14b90:	orr	r0, r0, r1
   14b94:	ldrb	r1, [sp, #300]	; 0x12c
   14b98:	orr	r0, r0, r1
   14b9c:	ldrb	r1, [sp, #301]	; 0x12d
   14ba0:	orr	r0, r0, r1
   14ba4:	ldrb	r1, [sp, #302]	; 0x12e
   14ba8:	orr	r0, r0, r1
   14bac:	ldrb	r1, [sp, #304]	; 0x130
   14bb0:	orr	r0, r0, r1
   14bb4:	ldrb	r1, [sp, #299]	; 0x12b
   14bb8:	orrs	r0, r0, r1
   14bbc:	bne	14bd4 <__assert_fail@plt+0x2868>
   14bc0:	ldr	r0, [sp, #288]	; 0x120
   14bc4:	cmp	r0, #0
   14bc8:	ldreq	r0, [sp, #292]	; 0x124
   14bcc:	cmpeq	r0, #0
   14bd0:	beq	14c88 <__assert_fail@plt+0x291c>
   14bd4:	add	r0, sp, #272	; 0x110
   14bd8:	mov	r1, #40	; 0x28
   14bdc:	mov	r4, ip
   14be0:	bl	22b80 <__assert_fail@plt+0x10814>
   14be4:	movw	r2, #33664	; 0x8380
   14be8:	movt	r2, #3
   14bec:	ldr	r3, [r2]
   14bf0:	mov	r1, r2
   14bf4:	add	r2, r3, #36	; 0x24
   14bf8:	cmp	r3, #0
   14bfc:	bne	14bec <__assert_fail@plt+0x2880>
   14c00:	str	r0, [r1]
   14c04:	mov	r1, #0
   14c08:	mov	ip, r4
   14c0c:	str	r1, [r0, #36]	; 0x24
   14c10:	ldrb	r0, [sp, #299]	; 0x12b
   14c14:	mov	r1, #1
   14c18:	str	r1, [sp, #68]	; 0x44
   14c1c:	orrs	r7, r0, r7
   14c20:	movw	r0, #33664	; 0x8380
   14c24:	movt	r0, #3
   14c28:	movwne	r7, #1
   14c2c:	ldr	r0, [r0]
   14c30:	cmp	r0, #0
   14c34:	beq	14c90 <__assert_fail@plt+0x2924>
   14c38:	ldrb	r1, [r0, #32]
   14c3c:	ldrb	r2, [r0, #27]
   14c40:	ldrb	r3, [r0, #28]
   14c44:	orr	r1, r2, r1
   14c48:	ldr	r2, [r0, #16]
   14c4c:	cmp	r2, #0
   14c50:	ldrb	r2, [r0, #26]
   14c54:	movwne	r1, #1
   14c58:	add	r2, r3, r2
   14c5c:	ldrb	r3, [r0, #29]
   14c60:	add	r2, r2, r3
   14c64:	ldrb	r3, [r0, #30]
   14c68:	add	r2, r2, r3
   14c6c:	uxtab	r1, r1, r2
   14c70:	cmp	r1, #2
   14c74:	bcs	1635c <__assert_fail@plt+0x3ff0>
   14c78:	ldr	r0, [r0, #36]	; 0x24
   14c7c:	cmp	r0, #0
   14c80:	bne	14c38 <__assert_fail@plt+0x28cc>
   14c84:	b	14c90 <__assert_fail@plt+0x2924>
   14c88:	mov	r0, #0
   14c8c:	str	r0, [sp, #68]	; 0x44
   14c90:	movw	r0, #33660	; 0x837c
   14c94:	str	r5, [sp, #64]	; 0x40
   14c98:	movt	r0, #3
   14c9c:	ldrb	r0, [r0]
   14ca0:	cmp	r0, #1
   14ca4:	bne	158e4 <__assert_fail@plt+0x3578>
   14ca8:	cmp	r5, #0
   14cac:	tsteq	ip, #255	; 0xff
   14cb0:	beq	14ccc <__assert_fail@plt+0x2960>
   14cb4:	movw	r0, #33260	; 0x81ec
   14cb8:	tst	ip, #255	; 0xff
   14cbc:	movt	r0, #3
   14cc0:	moveq	ip, #111	; 0x6f
   14cc4:	strb	ip, [r0]
   14cc8:	bl	16a30 <__assert_fail@plt+0x46c4>
   14ccc:	ldr	r0, [sp, #96]	; 0x60
   14cd0:	str	r7, [sp, #16]
   14cd4:	str	ip, [sp, #36]	; 0x24
   14cd8:	cmp	r0, #0
   14cdc:	beq	14cf8 <__assert_fail@plt+0x298c>
   14ce0:	movw	r1, #21100	; 0x526c
   14ce4:	mov	r0, #3
   14ce8:	movt	r1, #2
   14cec:	bl	1224c <setlocale@plt>
   14cf0:	cmp	r0, #0
   14cf4:	bne	14d24 <__assert_fail@plt+0x29b8>
   14cf8:	movw	r1, #25405	; 0x633d
   14cfc:	mov	r0, #0
   14d00:	mov	r2, #5
   14d04:	movt	r1, #2
   14d08:	bl	11f7c <dcgettext@plt>
   14d0c:	movw	r2, #29102	; 0x71ae
   14d10:	mov	r3, r0
   14d14:	mov	r0, #0
   14d18:	mov	r1, #0
   14d1c:	movt	r2, #2
   14d20:	bl	120a8 <error@plt>
   14d24:	movw	r0, #33512	; 0x82e8
   14d28:	str	r8, [sp, #92]	; 0x5c
   14d2c:	str	sl, [sp, #72]	; 0x48
   14d30:	str	r6, [sp, #24]
   14d34:	movt	r0, #3
   14d38:	ldrb	r0, [r0]
   14d3c:	cmp	r0, #0
   14d40:	beq	14d80 <__assert_fail@plt+0x2a14>
   14d44:	movw	r1, #25426	; 0x6352
   14d48:	mov	r0, #0
   14d4c:	mov	r2, #5
   14d50:	movt	r1, #2
   14d54:	bl	11f7c <dcgettext@plt>
   14d58:	mov	r5, r0
   14d5c:	mov	r0, #3
   14d60:	mov	r1, #0
   14d64:	bl	1224c <setlocale@plt>
   14d68:	bl	20dd0 <__assert_fail@plt+0xea64>
   14d6c:	mov	r3, r0
   14d70:	mov	r0, #0
   14d74:	mov	r1, #0
   14d78:	mov	r2, r5
   14d7c:	b	14da8 <__assert_fail@plt+0x2a3c>
   14d80:	movw	r1, #25473	; 0x6381
   14d84:	mov	r0, #0
   14d88:	mov	r2, #5
   14d8c:	movt	r1, #2
   14d90:	bl	11f7c <dcgettext@plt>
   14d94:	movw	r2, #29102	; 0x71ae
   14d98:	mov	r3, r0
   14d9c:	mov	r0, #0
   14da0:	mov	r1, #0
   14da4:	movt	r2, #2
   14da8:	bl	120a8 <error@plt>
   14dac:	movw	r0, #33664	; 0x8380
   14db0:	ldrb	r7, [sp, #304]	; 0x130
   14db4:	ldrb	r4, [sp, #303]	; 0x12f
   14db8:	ldrb	r6, [sp, #296]	; 0x128
   14dbc:	ldr	r5, [sp, #288]	; 0x120
   14dc0:	ldr	lr, [sp, #292]	; 0x124
   14dc4:	movt	r0, #3
   14dc8:	ldr	sl, [r0]
   14dcc:	ldrb	r0, [sp, #302]	; 0x12e
   14dd0:	str	r0, [sp, #112]	; 0x70
   14dd4:	ldrb	r0, [sp, #301]	; 0x12d
   14dd8:	cmp	sl, #0
   14ddc:	str	r0, [sp, #108]	; 0x6c
   14de0:	ldrb	r0, [sp, #300]	; 0x12c
   14de4:	str	r0, [sp, #104]	; 0x68
   14de8:	ldrb	r0, [sp, #299]	; 0x12b
   14dec:	str	r0, [sp, #120]	; 0x78
   14df0:	ldrb	r0, [sp, #298]	; 0x12a
   14df4:	str	r0, [sp, #116]	; 0x74
   14df8:	ldrb	r0, [sp, #297]	; 0x129
   14dfc:	str	r0, [sp, #100]	; 0x64
   14e00:	beq	15338 <__assert_fail@plt+0x2fcc>
   14e04:	sub	r0, fp, #208	; 0xd0
   14e08:	mov	r8, #1
   14e0c:	mov	r1, r5
   14e10:	orr	r0, r0, #3
   14e14:	str	r0, [sp, #52]	; 0x34
   14e18:	sub	r0, fp, #240	; 0xf0
   14e1c:	orr	r0, r0, #1
   14e20:	str	r0, [sp, #48]	; 0x30
   14e24:	mov	r0, #0
   14e28:	str	r0, [sp, #80]	; 0x50
   14e2c:	mov	r0, #0
   14e30:	str	r0, [sp, #76]	; 0x4c
   14e34:	mov	r0, #0
   14e38:	str	r0, [sp, #44]	; 0x2c
   14e3c:	mov	r0, #0
   14e40:	str	r0, [sp, #40]	; 0x28
   14e44:	mov	r0, lr
   14e48:	b	14f04 <__assert_fail@plt+0x2b98>
   14e4c:	ldrb	r3, [sl, #27]
   14e50:	ldr	r6, [sp, #120]	; 0x78
   14e54:	ldrb	r0, [sl, #31]
   14e58:	ldrb	r2, [sl, #26]
   14e5c:	ldrb	r1, [sl, #25]
   14e60:	add	r8, r8, #1
   14e64:	eor	r3, r3, #1
   14e68:	eor	r0, r0, #1
   14e6c:	eor	r2, r2, #1
   14e70:	eor	r1, r1, #1
   14e74:	and	r6, r3, r6
   14e78:	ldrb	r3, [sl, #29]
   14e7c:	and	r4, r0, r4
   14e80:	ldrb	r0, [sl, #32]
   14e84:	str	r6, [sp, #120]	; 0x78
   14e88:	ldr	r6, [sp, #108]	; 0x6c
   14e8c:	eor	r3, r3, #1
   14e90:	eor	r0, r0, #1
   14e94:	and	r6, r3, r6
   14e98:	ldrb	r3, [sl, #28]
   14e9c:	and	r7, r0, r7
   14ea0:	ldrb	r0, [sl, #24]
   14ea4:	str	r6, [sp, #108]	; 0x6c
   14ea8:	ldr	r6, [sp, #104]	; 0x68
   14eac:	eor	r3, r3, #1
   14eb0:	eor	r0, r0, #1
   14eb4:	and	r6, r3, r6
   14eb8:	ldr	r3, [sp, #116]	; 0x74
   14ebc:	str	r6, [sp, #104]	; 0x68
   14ec0:	ldr	r6, [sp, #96]	; 0x60
   14ec4:	and	r3, r2, r3
   14ec8:	ldrb	r2, [sl, #30]
   14ecc:	ldr	sl, [sl, #36]	; 0x24
   14ed0:	str	r3, [sp, #116]	; 0x74
   14ed4:	ldr	r3, [sp, #112]	; 0x70
   14ed8:	and	r6, r0, r6
   14edc:	mov	r0, lr
   14ee0:	eor	r2, r2, #1
   14ee4:	cmp	sl, #0
   14ee8:	and	r3, r2, r3
   14eec:	ldr	r2, [sp, #100]	; 0x64
   14ef0:	str	r3, [sp, #112]	; 0x70
   14ef4:	and	r2, r1, r2
   14ef8:	mov	r1, r5
   14efc:	str	r2, [sp, #100]	; 0x64
   14f00:	beq	152cc <__assert_fail@plt+0x2f60>
   14f04:	str	r1, [sp, #84]	; 0x54
   14f08:	str	r0, [sp, #88]	; 0x58
   14f0c:	ldrb	r1, [sl, #26]
   14f10:	ldrb	r0, [sl, #28]
   14f14:	str	r6, [sp, #96]	; 0x60
   14f18:	orr	r1, r0, r1
   14f1c:	tst	r1, #255	; 0xff
   14f20:	bne	14f30 <__assert_fail@plt+0x2bc4>
   14f24:	ldrb	r1, [sl, #29]
   14f28:	cmp	r1, #0
   14f2c:	beq	14f58 <__assert_fail@plt+0x2bec>
   14f30:	ldr	r2, [sp, #76]	; 0x4c
   14f34:	cmp	r0, #0
   14f38:	clz	r1, r0
   14f3c:	movwne	r0, #1
   14f40:	orr	r2, r2, r0
   14f44:	lsr	r0, r1, #5
   14f48:	ldr	r1, [sp, #80]	; 0x50
   14f4c:	str	r2, [sp, #76]	; 0x4c
   14f50:	orr	r1, r1, r0
   14f54:	str	r1, [sp, #80]	; 0x50
   14f58:	ldrb	r0, [sl, #33]	; 0x21
   14f5c:	sub	r5, fp, #104	; 0x68
   14f60:	cmp	r0, #0
   14f64:	beq	150ac <__assert_fail@plt+0x2d40>
   14f68:	ldr	r0, [sl]
   14f6c:	mov	r1, #43	; 0x2b
   14f70:	str	r4, [sp, #60]	; 0x3c
   14f74:	ldr	r4, [sl, #8]
   14f78:	mov	r2, r5
   14f7c:	str	r7, [sp, #56]	; 0x38
   14f80:	strh	r1, [fp, #-240]	; 0xffffff10
   14f84:	mvn	r1, #0
   14f88:	subs	r6, r0, r1
   14f8c:	mov	r1, #0
   14f90:	movne	r6, r0
   14f94:	mov	r0, r6
   14f98:	bl	1e840 <__assert_fail@plt+0xc4d4>
   14f9c:	mov	r1, r0
   14fa0:	ldr	r0, [sp, #48]	; 0x30
   14fa4:	mov	r2, #25
   14fa8:	bl	12054 <__stpcpy_chk@plt>
   14fac:	mov	r9, r0
   14fb0:	movw	r0, #27437	; 0x6b2d
   14fb4:	mov	r1, #0
   14fb8:	mov	r2, r5
   14fbc:	movt	r0, #32
   14fc0:	str	r0, [fp, #-208]	; 0xffffff30
   14fc4:	add	r0, r6, #1
   14fc8:	bl	1e840 <__assert_fail@plt+0xc4d4>
   14fcc:	mov	r1, r0
   14fd0:	ldr	r0, [sp, #52]	; 0x34
   14fd4:	mov	r2, #24
   14fd8:	bl	12054 <__stpcpy_chk@plt>
   14fdc:	mov	r6, r0
   14fe0:	ldr	r0, [sl, #8]
   14fe4:	cmn	r0, #1
   14fe8:	beq	15050 <__assert_fail@plt+0x2ce4>
   14fec:	movw	r0, #11552	; 0x2d20
   14ff0:	mov	r7, r5
   14ff4:	add	r5, r4, #1
   14ff8:	mov	r1, #0
   14ffc:	strh	r0, [r9]
   15000:	mov	r0, #0
   15004:	mov	r2, r7
   15008:	strb	r0, [r9, #2]!
   1500c:	mov	r0, r5
   15010:	bl	1e840 <__assert_fail@plt+0xc4d4>
   15014:	mov	r1, r0
   15018:	mov	r0, r9
   1501c:	bl	11f70 <stpcpy@plt>
   15020:	mov	r0, #44	; 0x2c
   15024:	mov	r1, #0
   15028:	mov	r2, r7
   1502c:	strh	r0, [r6], #1
   15030:	ldr	r0, [sl, #12]
   15034:	cmn	r0, #1
   15038:	addeq	r5, r4, #2
   1503c:	mov	r0, r5
   15040:	bl	1e840 <__assert_fail@plt+0xc4d4>
   15044:	mov	r1, r0
   15048:	mov	r0, r6
   1504c:	bl	11f70 <stpcpy@plt>
   15050:	movw	r1, #26864	; 0x68f0
   15054:	mov	r0, #0
   15058:	mov	r2, #5
   1505c:	movt	r1, #2
   15060:	bl	11f7c <dcgettext@plt>
   15064:	mov	r5, r0
   15068:	mov	r0, #0
   1506c:	sub	r1, fp, #240	; 0xf0
   15070:	bl	20dc0 <__assert_fail@plt+0xea54>
   15074:	mov	r6, r0
   15078:	mov	r0, #1
   1507c:	sub	r1, fp, #208	; 0xd0
   15080:	bl	20dc0 <__assert_fail@plt+0xea54>
   15084:	str	r0, [sp]
   15088:	mov	r0, #0
   1508c:	mov	r1, #0
   15090:	mov	r2, r5
   15094:	mov	r3, r6
   15098:	bl	120a8 <error@plt>
   1509c:	ldr	r4, [sp, #60]	; 0x3c
   150a0:	ldr	r7, [sp, #56]	; 0x38
   150a4:	movw	r9, #34192	; 0x8590
   150a8:	movt	r9, #3
   150ac:	ldr	r1, [sl]
   150b0:	mov	r0, #0
   150b4:	cmn	r1, #1
   150b8:	beq	150f4 <__assert_fail@plt+0x2d88>
   150bc:	ldr	r2, [sl, #8]
   150c0:	cmp	r2, r1
   150c4:	bcs	150f4 <__assert_fail@plt+0x2d88>
   150c8:	movw	r1, #26909	; 0x691d
   150cc:	mov	r0, #0
   150d0:	mov	r2, #5
   150d4:	movt	r1, #2
   150d8:	bl	11f7c <dcgettext@plt>
   150dc:	mov	r2, r0
   150e0:	mov	r0, #0
   150e4:	mov	r1, #0
   150e8:	mov	r3, r8
   150ec:	bl	120a8 <error@plt>
   150f0:	mov	r0, #1
   150f4:	ldrb	r2, [sl, #26]
   150f8:	mov	r1, #1
   150fc:	cmp	r2, #0
   15100:	bne	15128 <__assert_fail@plt+0x2dbc>
   15104:	ldrb	r2, [sl, #28]
   15108:	cmp	r2, #0
   1510c:	bne	15128 <__assert_fail@plt+0x2dbc>
   15110:	ldrb	r2, [sl, #29]
   15114:	cmp	r2, #0
   15118:	bne	15128 <__assert_fail@plt+0x2dbc>
   1511c:	ldrb	r1, [sl, #30]
   15120:	cmp	r1, #0
   15124:	movwne	r1, #1
   15128:	ldr	r3, [sl, #8]
   1512c:	mov	r2, #0
   15130:	cmp	r3, #0
   15134:	beq	15144 <__assert_fail@plt+0x2dd8>
   15138:	cmp	r0, #0
   1513c:	beq	15158 <__assert_fail@plt+0x2dec>
   15140:	b	151f0 <__assert_fail@plt+0x2e84>
   15144:	ldr	r2, [sl, #12]
   15148:	cmp	r2, #0
   1514c:	movwne	r2, #1
   15150:	cmp	r0, #0
   15154:	bne	151f0 <__assert_fail@plt+0x2e84>
   15158:	movw	r0, #33256	; 0x81e8
   1515c:	ldr	r3, [sp, #68]	; 0x44
   15160:	movt	r0, #3
   15164:	ldr	r0, [r0]
   15168:	subs	r0, r0, #256	; 0x100
   1516c:	movwne	r0, #1
   15170:	orr	r0, r3, r0
   15174:	orrs	r0, r2, r0
   15178:	bne	151f0 <__assert_fail@plt+0x2e84>
   1517c:	ldrb	r0, [sl, #24]
   15180:	cmp	r0, #0
   15184:	mov	r2, r0
   15188:	movwne	r2, #1
   1518c:	orr	r1, r1, r2
   15190:	cmp	r1, #1
   15194:	bne	151c8 <__assert_fail@plt+0x2e5c>
   15198:	cmp	r0, #0
   1519c:	beq	151bc <__assert_fail@plt+0x2e50>
   151a0:	ldrb	r0, [sl, #25]
   151a4:	cmp	r0, #0
   151a8:	bne	151f0 <__assert_fail@plt+0x2e84>
   151ac:	ldr	r0, [sl, #12]
   151b0:	cmp	r0, #0
   151b4:	bne	151c8 <__assert_fail@plt+0x2e5c>
   151b8:	b	151f0 <__assert_fail@plt+0x2e84>
   151bc:	ldr	r0, [sl, #4]
   151c0:	cmp	r0, #0
   151c4:	beq	151a0 <__assert_fail@plt+0x2e34>
   151c8:	movw	r1, #26952	; 0x6948
   151cc:	mov	r0, #0
   151d0:	mov	r2, #5
   151d4:	movt	r1, #2
   151d8:	bl	11f7c <dcgettext@plt>
   151dc:	mov	r2, r0
   151e0:	mov	r0, #0
   151e4:	mov	r1, #0
   151e8:	mov	r3, r8
   151ec:	bl	120a8 <error@plt>
   151f0:	ldr	r0, [sp, #68]	; 0x44
   151f4:	cmp	r0, #0
   151f8:	bne	15290 <__assert_fail@plt+0x2f24>
   151fc:	ldrb	r0, [sl, #26]
   15200:	cmp	r0, #0
   15204:	bne	15220 <__assert_fail@plt+0x2eb4>
   15208:	ldrb	r0, [sl, #28]
   1520c:	cmp	r0, #0
   15210:	bne	15220 <__assert_fail@plt+0x2eb4>
   15214:	ldrb	r0, [sl, #29]
   15218:	cmp	r0, #0
   1521c:	beq	15290 <__assert_fail@plt+0x2f24>
   15220:	ldr	r0, [sl]
   15224:	ldr	r1, [sl, #8]
   15228:	mov	r2, #1
   1522c:	adds	r0, r0, #1
   15230:	movcs	r0, r2
   15234:	cmp	r1, r0
   15238:	bcc	15290 <__assert_fail@plt+0x2f24>
   1523c:	movw	r1, #27024	; 0x6990
   15240:	mov	r0, #0
   15244:	mov	r2, #5
   15248:	movt	r1, #2
   1524c:	bl	11f7c <dcgettext@plt>
   15250:	mov	r2, r0
   15254:	mov	r0, #0
   15258:	mov	r1, #0
   1525c:	mov	r3, r8
   15260:	bl	120a8 <error@plt>
   15264:	ldrb	r0, [sl, #28]
   15268:	ldr	r2, [sp, #40]	; 0x28
   1526c:	cmp	r0, #0
   15270:	clz	r1, r0
   15274:	movwne	r0, #1
   15278:	orr	r2, r2, r0
   1527c:	lsr	r0, r1, #5
   15280:	ldr	r1, [sp, #44]	; 0x2c
   15284:	str	r2, [sp, #40]	; 0x28
   15288:	orr	r1, r1, r0
   1528c:	str	r1, [sp, #44]	; 0x2c
   15290:	ldr	r2, [sp, #84]	; 0x54
   15294:	ldr	r1, [sp, #88]	; 0x58
   15298:	mov	lr, #0
   1529c:	mov	r5, #0
   152a0:	cmp	r2, #0
   152a4:	beq	152b4 <__assert_fail@plt+0x2f48>
   152a8:	ldr	r0, [sl, #16]
   152ac:	subs	r5, r2, r0
   152b0:	movne	r5, r2
   152b4:	cmp	r1, #0
   152b8:	beq	14e4c <__assert_fail@plt+0x2ae0>
   152bc:	ldr	r0, [sl, #20]
   152c0:	subs	lr, r1, r0
   152c4:	movne	lr, r1
   152c8:	b	14e4c <__assert_fail@plt+0x2ae0>
   152cc:	ldr	r0, [sp, #44]	; 0x2c
   152d0:	str	r6, [sp, #96]	; 0x60
   152d4:	str	r4, [sp, #60]	; 0x3c
   152d8:	str	r7, [sp, #56]	; 0x38
   152dc:	tst	r0, #1
   152e0:	beq	1536c <__assert_fail@plt+0x3000>
   152e4:	movw	r0, #33516	; 0x82ec
   152e8:	ldr	sl, [sp, #72]	; 0x48
   152ec:	ldr	r8, [sp, #92]	; 0x5c
   152f0:	mov	r4, #0
   152f4:	movt	r0, #3
   152f8:	ldr	r1, [r0]
   152fc:	movw	r0, #33256	; 0x81e8
   15300:	movt	r0, #3
   15304:	ldr	r0, [r0]
   15308:	cmp	r0, #256	; 0x100
   1530c:	bne	15388 <__assert_fail@plt+0x301c>
   15310:	cmp	r1, #256	; 0x100
   15314:	beq	1556c <__assert_fail@plt+0x3200>
   15318:	ldr	r0, [sp, #124]	; 0x7c
   1531c:	uxtb	r1, r1
   15320:	mov	r4, #0
   15324:	ldr	r0, [r0]
   15328:	ldrb	r0, [r0, r1, lsl #1]
   1532c:	tst	r0, #1
   15330:	bne	15390 <__assert_fail@plt+0x3024>
   15334:	b	153ec <__assert_fail@plt+0x3080>
   15338:	str	r7, [sp, #56]	; 0x38
   1533c:	ldr	sl, [sp, #72]	; 0x48
   15340:	ldr	r8, [sp, #92]	; 0x5c
   15344:	ldr	ip, [sp, #36]	; 0x24
   15348:	ldr	r7, [sp, #16]
   1534c:	str	r4, [sp, #60]	; 0x3c
   15350:	str	r6, [sp, #96]	; 0x60
   15354:	mov	r1, #0
   15358:	mov	r0, #0
   1535c:	mov	r4, #0
   15360:	cmp	r4, #0
   15364:	beq	15584 <__assert_fail@plt+0x3218>
   15368:	b	1563c <__assert_fail@plt+0x32d0>
   1536c:	ldr	r0, [sp, #40]	; 0x28
   15370:	ldr	sl, [sp, #72]	; 0x48
   15374:	ldr	r8, [sp, #92]	; 0x5c
   15378:	mov	r4, #0
   1537c:	tst	r0, #1
   15380:	bne	153ec <__assert_fail@plt+0x3080>
   15384:	b	1556c <__assert_fail@plt+0x3200>
   15388:	cmp	r0, r1
   1538c:	bne	1543c <__assert_fail@plt+0x30d0>
   15390:	movw	r1, #27069	; 0x69bd
   15394:	mov	r0, #0
   15398:	mov	r2, #5
   1539c:	mov	r4, #0
   153a0:	mov	r6, lr
   153a4:	movt	r1, #2
   153a8:	bl	11f7c <dcgettext@plt>
   153ac:	mov	r8, r0
   153b0:	movw	r0, #33516	; 0x82ec
   153b4:	strb	r4, [fp, #-239]	; 0xffffff11
   153b8:	movt	r0, #3
   153bc:	ldr	r0, [r0]
   153c0:	strb	r0, [fp, #-240]	; 0xffffff10
   153c4:	sub	r0, fp, #240	; 0xf0
   153c8:	bl	20dd0 <__assert_fail@plt+0xea64>
   153cc:	mov	r2, r8
   153d0:	ldr	r8, [sp, #92]	; 0x5c
   153d4:	mov	r3, r0
   153d8:	mov	r0, #0
   153dc:	mov	r1, #0
   153e0:	bl	120a8 <error@plt>
   153e4:	mov	lr, r6
   153e8:	mov	r4, #1
   153ec:	movw	r0, #33256	; 0x81e8
   153f0:	movt	r0, #3
   153f4:	ldr	r0, [r0]
   153f8:	cmp	r0, #256	; 0x100
   153fc:	bne	1543c <__assert_fail@plt+0x30d0>
   15400:	movw	r0, #33516	; 0x82ec
   15404:	movt	r0, #3
   15408:	ldr	r0, [r0]
   1540c:	cmp	r0, #256	; 0x100
   15410:	beq	1556c <__assert_fail@plt+0x3200>
   15414:	ldr	r1, [sp, #124]	; 0x7c
   15418:	movw	r8, #33514	; 0x82ea
   1541c:	movt	r8, #3
   15420:	ldrb	r0, [r8]
   15424:	ldr	r1, [r1]
   15428:	ldrb	r0, [r1, r0, lsl #1]
   1542c:	tst	r0, #1
   15430:	bne	15450 <__assert_fail@plt+0x30e4>
   15434:	ldr	r8, [sp, #92]	; 0x5c
   15438:	b	1556c <__assert_fail@plt+0x3200>
   1543c:	movw	r8, #33514	; 0x82ea
   15440:	movt	r8, #3
   15444:	ldrb	r1, [r8]
   15448:	cmp	r0, r1
   1544c:	bne	154c8 <__assert_fail@plt+0x315c>
   15450:	movw	r1, #27131	; 0x69fb
   15454:	mov	r0, #0
   15458:	mov	r2, #5
   1545c:	mov	r9, #0
   15460:	mov	r6, lr
   15464:	movt	r1, #2
   15468:	bl	11f7c <dcgettext@plt>
   1546c:	mov	r7, r0
   15470:	ldrb	r0, [r8]
   15474:	strb	r9, [fp, #-103]	; 0xffffff99
   15478:	movw	r9, #34192	; 0x8590
   1547c:	movt	r9, #3
   15480:	strb	r0, [fp, #-104]	; 0xffffff98
   15484:	sub	r0, fp, #104	; 0x68
   15488:	bl	20dd0 <__assert_fail@plt+0xea64>
   1548c:	ldr	r4, [sp, #36]	; 0x24
   15490:	ldr	r8, [sp, #92]	; 0x5c
   15494:	mov	r3, r0
   15498:	mov	r0, #0
   1549c:	mov	r1, #0
   154a0:	mov	r2, r7
   154a4:	bl	120a8 <error@plt>
   154a8:	ldr	r0, [sp, #80]	; 0x50
   154ac:	ldr	r7, [sp, #16]
   154b0:	mov	lr, r6
   154b4:	mov	ip, r4
   154b8:	tst	r0, #1
   154bc:	ldr	r4, [sp, #60]	; 0x3c
   154c0:	bne	15648 <__assert_fail@plt+0x32dc>
   154c4:	b	15698 <__assert_fail@plt+0x332c>
   154c8:	cmp	r0, #45	; 0x2d
   154cc:	bne	154e0 <__assert_fail@plt+0x3174>
   154d0:	movw	r1, #27191	; 0x6a37
   154d4:	mov	r8, #0
   154d8:	movt	r1, #2
   154dc:	b	1550c <__assert_fail@plt+0x31a0>
   154e0:	ldr	r1, [sp, #40]	; 0x28
   154e4:	subs	r0, r0, #43	; 0x2b
   154e8:	ldr	r8, [sp, #92]	; 0x5c
   154ec:	movwne	r0, #1
   154f0:	mvn	r1, r1
   154f4:	orr	r0, r1, r0
   154f8:	tst	r0, #1
   154fc:	bne	1556c <__assert_fail@plt+0x3200>
   15500:	movw	r1, #27248	; 0x6a70
   15504:	mov	r8, #0
   15508:	movt	r1, #2
   1550c:	mov	r0, #0
   15510:	mov	r2, #5
   15514:	mov	r6, lr
   15518:	bl	11f7c <dcgettext@plt>
   1551c:	mov	r7, r0
   15520:	movw	r0, #33256	; 0x81e8
   15524:	strb	r8, [fp, #-103]	; 0xffffff99
   15528:	movt	r0, #3
   1552c:	ldr	r0, [r0]
   15530:	strb	r0, [fp, #-104]	; 0xffffff98
   15534:	sub	r0, fp, #104	; 0x68
   15538:	bl	20dd0 <__assert_fail@plt+0xea64>
   1553c:	mov	r2, r7
   15540:	ldr	r7, [sp, #36]	; 0x24
   15544:	ldr	r8, [sp, #92]	; 0x5c
   15548:	movw	r9, #34192	; 0x8590
   1554c:	mov	r3, r0
   15550:	mov	r0, #0
   15554:	mov	r1, #0
   15558:	movt	r9, #3
   1555c:	bl	120a8 <error@plt>
   15560:	mov	lr, r6
   15564:	mov	ip, r7
   15568:	b	15570 <__assert_fail@plt+0x3204>
   1556c:	ldr	ip, [sp, #36]	; 0x24
   15570:	ldr	r7, [sp, #16]
   15574:	ldr	r1, [sp, #80]	; 0x50
   15578:	ldr	r0, [sp, #76]	; 0x4c
   1557c:	cmp	r4, #0
   15580:	bne	1563c <__assert_fail@plt+0x32d0>
   15584:	orr	r0, r1, r0
   15588:	tst	r0, #1
   1558c:	beq	1563c <__assert_fail@plt+0x32d0>
   15590:	mov	r9, r1
   15594:	movw	r1, #27304	; 0x6aa8
   15598:	mov	r0, #0
   1559c:	mov	r2, #5
   155a0:	mov	r6, lr
   155a4:	movt	r1, #2
   155a8:	bl	11f7c <dcgettext@plt>
   155ac:	movw	r4, #33514	; 0x82ea
   155b0:	movw	r1, #33256	; 0x81e8
   155b4:	mov	r7, r0
   155b8:	movt	r1, #3
   155bc:	movt	r4, #3
   155c0:	ldrb	r0, [r4]
   155c4:	ldr	r1, [r1]
   155c8:	cmp	r1, r0
   155cc:	beq	155ec <__assert_fail@plt+0x3280>
   155d0:	movw	r1, #27355	; 0x6adb
   155d4:	mov	r0, #0
   155d8:	mov	r2, #5
   155dc:	movt	r1, #2
   155e0:	bl	11f7c <dcgettext@plt>
   155e4:	str	r0, [sp, #20]
   155e8:	ldrb	r0, [r4]
   155ec:	mov	r1, #0
   155f0:	strb	r1, [fp, #-243]	; 0xffffff0d
   155f4:	strb	r0, [fp, #-244]	; 0xffffff0c
   155f8:	sub	r0, fp, #244	; 0xf4
   155fc:	bl	20dd0 <__assert_fail@plt+0xea64>
   15600:	ldr	r3, [sp, #20]
   15604:	str	r0, [sp]
   15608:	mov	r0, #0
   1560c:	mov	r1, #0
   15610:	mov	r2, r7
   15614:	bl	120a8 <error@plt>
   15618:	ldr	ip, [sp, #36]	; 0x24
   1561c:	ldr	r7, [sp, #16]
   15620:	ldr	r4, [sp, #60]	; 0x3c
   15624:	tst	r9, #1
   15628:	movw	r9, #34192	; 0x8590
   1562c:	mov	lr, r6
   15630:	movt	r9, #3
   15634:	bne	15648 <__assert_fail@plt+0x32dc>
   15638:	b	15698 <__assert_fail@plt+0x332c>
   1563c:	tst	r1, #1
   15640:	ldr	r4, [sp, #60]	; 0x3c
   15644:	beq	15698 <__assert_fail@plt+0x332c>
   15648:	movw	r0, #33520	; 0x82f0
   1564c:	movt	r0, #3
   15650:	ldrb	r0, [r0]
   15654:	cmp	r0, #1
   15658:	bne	15698 <__assert_fail@plt+0x332c>
   1565c:	movw	r1, #27361	; 0x6ae1
   15660:	mov	r0, #0
   15664:	mov	r2, #5
   15668:	str	r4, [sp, #60]	; 0x3c
   1566c:	mov	r4, ip
   15670:	mov	r6, lr
   15674:	movt	r1, #2
   15678:	bl	11f7c <dcgettext@plt>
   1567c:	mov	r2, r0
   15680:	mov	r0, #0
   15684:	mov	r1, #0
   15688:	bl	120a8 <error@plt>
   1568c:	mov	ip, r4
   15690:	ldr	r4, [sp, #60]	; 0x3c
   15694:	mov	lr, r6
   15698:	ldr	r0, [sp, #100]	; 0x64
   1569c:	ldr	r1, [sp, #96]	; 0x60
   156a0:	cmp	lr, #0
   156a4:	cmpeq	r5, #0
   156a8:	orr	r1, r1, r0
   156ac:	beq	156e4 <__assert_fail@plt+0x3378>
   156b0:	movw	r0, #33661	; 0x837d
   156b4:	movt	r0, #3
   156b8:	ldrb	r0, [r0]
   156bc:	movw	r2, #33662	; 0x837e
   156c0:	tst	r1, #255	; 0xff
   156c4:	movt	r2, #3
   156c8:	ldrb	r2, [r2]
   156cc:	beq	15768 <__assert_fail@plt+0x33fc>
   156d0:	mov	r1, #98	; 0x62
   156d4:	strb	r1, [fp, #-208]	; 0xffffff30
   156d8:	sub	r1, fp, #208	; 0xd0
   156dc:	add	r1, r1, #1
   156e0:	b	1576c <__assert_fail@plt+0x3400>
   156e4:	ldr	r0, [sp, #56]	; 0x38
   156e8:	ldr	r2, [sp, #112]	; 0x70
   156ec:	orr	r0, r2, r0
   156f0:	ldr	r2, [sp, #108]	; 0x6c
   156f4:	orr	r0, r0, r2
   156f8:	ldr	r2, [sp, #104]	; 0x68
   156fc:	orr	r0, r0, r2
   15700:	ldr	r2, [sp, #120]	; 0x78
   15704:	orr	r0, r0, r2
   15708:	ldr	r2, [sp, #116]	; 0x74
   1570c:	orr	r0, r0, r2
   15710:	orr	r0, r0, r1
   15714:	tst	r0, #255	; 0xff
   15718:	bne	156b0 <__assert_fail@plt+0x3344>
   1571c:	tst	r4, #255	; 0xff
   15720:	beq	158e0 <__assert_fail@plt+0x3574>
   15724:	movw	r0, #33661	; 0x837d
   15728:	movt	r0, #3
   1572c:	ldrb	r0, [r0]
   15730:	cmp	r0, #0
   15734:	bne	15750 <__assert_fail@plt+0x33e4>
   15738:	movw	r2, #33662	; 0x837e
   1573c:	movt	r2, #3
   15740:	ldrb	r3, [r2]
   15744:	mov	r2, #1
   15748:	cmp	r3, #1
   1574c:	bne	15898 <__assert_fail@plt+0x352c>
   15750:	movw	r2, #33664	; 0x8380
   15754:	movt	r2, #3
   15758:	ldr	r2, [r2]
   1575c:	cmp	r2, #0
   15760:	bne	156bc <__assert_fail@plt+0x3350>
   15764:	b	15880 <__assert_fail@plt+0x3514>
   15768:	sub	r1, fp, #208	; 0xd0
   1576c:	cmp	r5, r9
   15770:	moveq	r3, #100	; 0x64
   15774:	strbeq	r3, [r1], #1
   15778:	cmp	lr, #0
   1577c:	movne	r3, #102	; 0x66
   15780:	strbne	r3, [r1], #1
   15784:	ldr	r3, [sp, #104]	; 0x68
   15788:	tst	r3, #255	; 0xff
   1578c:	movne	r3, #103	; 0x67
   15790:	strbne	r3, [r1], #1
   15794:	ldr	r3, [sp, #108]	; 0x6c
   15798:	tst	r3, #255	; 0xff
   1579c:	movne	r3, #104	; 0x68
   157a0:	strbne	r3, [r1], #1
   157a4:	movw	r3, #33936	; 0x8490
   157a8:	movt	r3, #3
   157ac:	cmp	r5, r3
   157b0:	moveq	r3, #105	; 0x69
   157b4:	strbeq	r3, [r1], #1
   157b8:	ldr	r3, [sp, #112]	; 0x70
   157bc:	tst	r3, #255	; 0xff
   157c0:	movne	r3, #77	; 0x4d
   157c4:	strbne	r3, [r1], #1
   157c8:	ldr	r3, [sp, #116]	; 0x74
   157cc:	tst	r3, #255	; 0xff
   157d0:	movne	r3, #110	; 0x6e
   157d4:	strbne	r3, [r1], #1
   157d8:	ldr	r3, [sp, #120]	; 0x78
   157dc:	tst	r3, #255	; 0xff
   157e0:	movne	r3, #82	; 0x52
   157e4:	strbne	r3, [r1], #1
   157e8:	tst	r4, #255	; 0xff
   157ec:	beq	15804 <__assert_fail@plt+0x3498>
   157f0:	orr	r0, r0, r2
   157f4:	eor	r0, r0, #1
   157f8:	tst	r0, #1
   157fc:	moveq	r0, #114	; 0x72
   15800:	strbeq	r0, [r1], #1
   15804:	ldr	r0, [sp, #56]	; 0x38
   15808:	sub	r5, fp, #208	; 0xd0
   1580c:	mov	r6, r4
   15810:	mov	r4, ip
   15814:	tst	r0, #255	; 0xff
   15818:	movne	r0, #86	; 0x56
   1581c:	strbne	r0, [r1], #1
   15820:	mov	r0, #0
   15824:	strb	r0, [r1]
   15828:	mov	r0, r5
   1582c:	bl	12174 <strlen@plt>
   15830:	movw	r1, #27431	; 0x6b27
   15834:	movw	r2, #27455	; 0x6b3f
   15838:	mov	r3, r0
   1583c:	mov	r0, #5
   15840:	movt	r1, #2
   15844:	movt	r2, #2
   15848:	str	r0, [sp]
   1584c:	mov	r0, #0
   15850:	bl	12360 <dcngettext@plt>
   15854:	mov	r2, r0
   15858:	mov	r0, #0
   1585c:	mov	r1, #0
   15860:	mov	r3, r5
   15864:	bl	120a8 <error@plt>
   15868:	tst	r6, #255	; 0xff
   1586c:	mov	ip, r4
   15870:	beq	158e0 <__assert_fail@plt+0x3574>
   15874:	movw	r0, #33661	; 0x837d
   15878:	movt	r0, #3
   1587c:	ldrb	r0, [r0]
   15880:	cmp	r0, #0
   15884:	bne	158e0 <__assert_fail@plt+0x3574>
   15888:	movw	r0, #33662	; 0x837e
   1588c:	movt	r0, #3
   15890:	ldrb	r0, [r0]
   15894:	eor	r2, r0, #1
   15898:	tst	r2, #1
   1589c:	beq	158e0 <__assert_fail@plt+0x3574>
   158a0:	movw	r0, #33664	; 0x8380
   158a4:	movt	r0, #3
   158a8:	ldr	r0, [r0]
   158ac:	cmp	r0, #0
   158b0:	beq	158e0 <__assert_fail@plt+0x3574>
   158b4:	movw	r1, #27481	; 0x6b59
   158b8:	mov	r0, #0
   158bc:	mov	r2, #5
   158c0:	mov	r4, ip
   158c4:	movt	r1, #2
   158c8:	bl	11f7c <dcgettext@plt>
   158cc:	mov	r2, r0
   158d0:	mov	r0, #0
   158d4:	mov	r1, #0
   158d8:	bl	120a8 <error@plt>
   158dc:	mov	ip, r4
   158e0:	ldr	r6, [sp, #24]
   158e4:	ldrb	r0, [sp, #303]	; 0x12f
   158e8:	movw	r1, #33668	; 0x8384
   158ec:	cmp	r7, #0
   158f0:	movt	r1, #3
   158f4:	strb	r0, [r1]
   158f8:	beq	15958 <__assert_fail@plt+0x35ec>
   158fc:	ldr	r0, [sp, #32]
   15900:	mov	r1, #16
   15904:	mov	r7, ip
   15908:	bl	20f1c <__assert_fail@plt+0xebb0>
   1590c:	cmp	r0, #0
   15910:	beq	1676c <__assert_fail@plt+0x4400>
   15914:	sub	r1, fp, #208	; 0xd0
   15918:	mov	r2, #16
   1591c:	mov	r4, r0
   15920:	bl	2108c <__assert_fail@plt+0xed20>
   15924:	mov	r0, r4
   15928:	bl	211e4 <__assert_fail@plt+0xee78>
   1592c:	cmp	r0, #0
   15930:	bne	16798 <__assert_fail@plt+0x442c>
   15934:	movw	r4, #34824	; 0x8808
   15938:	movt	r4, #3
   1593c:	mov	r0, r4
   15940:	bl	1bd50 <__assert_fail@plt+0x99e4>
   15944:	sub	r0, fp, #208	; 0xd0
   15948:	mov	r1, #16
   1594c:	mov	r2, r4
   15950:	bl	1c9b0 <__assert_fail@plt+0xa644>
   15954:	mov	ip, r7
   15958:	movw	r4, #33672	; 0x8388
   1595c:	movt	r4, #3
   15960:	ldr	r0, [r4]
   15964:	cmp	r0, #0
   15968:	beq	16234 <__assert_fail@plt+0x3ec8>
   1596c:	cmp	sl, #0
   15970:	beq	162c8 <__assert_fail@plt+0x3f5c>
   15974:	movw	r2, #33676	; 0x838c
   15978:	mov	r9, r8
   1597c:	movt	r2, #3
   15980:	ldr	r0, [r2]
   15984:	cmp	r0, #0
   15988:	beq	159a8 <__assert_fail@plt+0x363c>
   1598c:	movw	r1, #33272	; 0x81f8
   15990:	movt	r1, #3
   15994:	ldr	r1, [r1]
   15998:	add	r1, r1, r1, lsl #3
   1599c:	cmp	r0, r1, lsl #1
   159a0:	lslls	r0, r1, #1
   159a4:	str	r0, [r2]
   159a8:	tst	ip, #255	; 0xff
   159ac:	str	r9, [sp, #92]	; 0x5c
   159b0:	bne	16650 <__assert_fail@plt+0x42e4>
   159b4:	mov	r8, r6
   159b8:	ldr	r6, [sp, #92]	; 0x5c
   159bc:	movw	r4, #26862	; 0x68ee
   159c0:	mov	r7, sl
   159c4:	movt	r4, #2
   159c8:	b	159d8 <__assert_fail@plt+0x366c>
   159cc:	subs	r7, r7, #1
   159d0:	add	r6, r6, #4
   159d4:	beq	15a20 <__assert_fail@plt+0x36b4>
   159d8:	ldr	r5, [r6]
   159dc:	mov	r1, r4
   159e0:	mov	r0, r5
   159e4:	bl	11e50 <strcmp@plt>
   159e8:	cmp	r0, #0
   159ec:	beq	159cc <__assert_fail@plt+0x3660>
   159f0:	mov	r0, r5
   159f4:	mov	r1, #4
   159f8:	bl	122e8 <euidaccess@plt>
   159fc:	cmp	r0, #0
   15a00:	beq	159cc <__assert_fail@plt+0x3660>
   15a04:	movw	r1, #27727	; 0x6c4f
   15a08:	mov	r0, #0
   15a0c:	mov	r2, #5
   15a10:	movt	r1, #2
   15a14:	bl	11f7c <dcgettext@plt>
   15a18:	ldr	r1, [r6]
   15a1c:	bl	173f0 <__assert_fail@plt+0x5084>
   15a20:	ldr	r0, [sp, #64]	; 0x40
   15a24:	ldr	r9, [sp, #92]	; 0x5c
   15a28:	cmp	r0, #0
   15a2c:	beq	15a6c <__assert_fail@plt+0x3700>
   15a30:	ldr	r0, [sp, #64]	; 0x40
   15a34:	movw	r1, #65	; 0x41
   15a38:	movw	r2, #438	; 0x1b6
   15a3c:	movt	r1, #8
   15a40:	bl	120b4 <open64@plt>
   15a44:	cmn	r0, #1
   15a48:	ble	16750 <__assert_fail@plt+0x43e4>
   15a4c:	mov	r4, r0
   15a50:	cmp	r0, #1
   15a54:	beq	15a6c <__assert_fail@plt+0x3700>
   15a58:	mov	r0, r4
   15a5c:	mov	r1, #1
   15a60:	bl	11fac <dup2@plt>
   15a64:	mov	r0, r4
   15a68:	bl	12354 <close@plt>
   15a6c:	tst	r8, #1
   15a70:	beq	15af8 <__assert_fail@plt+0x378c>
   15a74:	mov	r0, sl
   15a78:	mov	r1, #8
   15a7c:	bl	22b34 <__assert_fail@plt+0x107c8>
   15a80:	ldr	r3, [sp, #64]	; 0x40
   15a84:	cmp	sl, #0
   15a88:	beq	15ae8 <__assert_fail@plt+0x377c>
   15a8c:	and	r1, sl, #1
   15a90:	mov	r2, #0
   15a94:	cmp	sl, #1
   15a98:	beq	15ad4 <__assert_fail@plt+0x3768>
   15a9c:	ldr	r2, [sp, #92]	; 0x5c
   15aa0:	sub	r4, sl, r1
   15aa4:	add	r7, r0, #8
   15aa8:	add	r6, r2, #4
   15aac:	mov	r2, #0
   15ab0:	ldr	r5, [r6, #-4]
   15ab4:	add	r2, r2, #2
   15ab8:	cmp	r4, r2
   15abc:	str	r5, [r7, #-8]
   15ac0:	ldr	r5, [r6]
   15ac4:	add	r6, r6, #8
   15ac8:	str	r5, [r7]
   15acc:	add	r7, r7, #16
   15ad0:	bne	15ab0 <__assert_fail@plt+0x3744>
   15ad4:	ldr	r9, [sp, #92]	; 0x5c
   15ad8:	cmp	r1, #0
   15adc:	beq	15ae8 <__assert_fail@plt+0x377c>
   15ae0:	ldr	r1, [r9, r2, lsl #2]
   15ae4:	str	r1, [r0, r2, lsl #3]
   15ae8:	mov	r1, #0
   15aec:	mov	r2, sl
   15af0:	bl	16e1c <__assert_fail@plt+0x4ab0>
   15af4:	b	161f0 <__assert_fail@plt+0x3e84>
   15af8:	ldr	r0, [sp, #28]
   15afc:	cmp	r0, #0
   15b00:	bne	15b14 <__assert_fail@plt+0x37a8>
   15b04:	mov	r0, #2
   15b08:	bl	1ec08 <__assert_fail@plt+0xc89c>
   15b0c:	cmp	r0, #8
   15b10:	movcs	r0, #8
   15b14:	movw	r2, #7281	; 0x1c71
   15b18:	mov	r1, #0
   15b1c:	ldr	r8, [sp, #64]	; 0x40
   15b20:	vmov.f64	d9, #104	; 0x3f400000  0.750
   15b24:	vmov.f64	d10, #64	; 0x3e000000  0.125
   15b28:	vmov.i32	q6, #0	; 0x00000000
   15b2c:	sub	r7, fp, #240	; 0xf0
   15b30:	mov	r5, #0
   15b34:	movt	r2, #455	; 0x1c7
   15b38:	str	r1, [fp, #-228]	; 0xffffff1c
   15b3c:	cmp	r0, r2
   15b40:	movcc	r2, r0
   15b44:	sub	r0, r1, r2, lsl #1
   15b48:	str	r2, [sp, #80]	; 0x50
   15b4c:	str	r0, [sp, #60]	; 0x3c
   15b50:	add	r0, r2, r2, lsl #3
   15b54:	lsl	r0, r0, #4
   15b58:	str	r0, [sp, #76]	; 0x4c
   15b5c:	sub	r0, fp, #208	; 0xd0
   15b60:	add	r1, r0, #32
   15b64:	str	r1, [sp, #100]	; 0x64
   15b68:	orr	r1, r0, #4
   15b6c:	add	r0, r0, #48	; 0x30
   15b70:	str	r1, [sp, #96]	; 0x60
   15b74:	movw	r1, #26134	; 0x6616
   15b78:	str	r0, [sp, #56]	; 0x38
   15b7c:	lsl	r0, r2, #1
   15b80:	movt	r1, #2
   15b84:	str	r0, [sp, #68]	; 0x44
   15b88:	ldr	r0, [r9]
   15b8c:	str	r0, [sp, #108]	; 0x6c
   15b90:	bl	17464 <__assert_fail@plt+0x50f8>
   15b94:	cmp	r0, #0
   15b98:	str	r0, [sp, #112]	; 0x70
   15b9c:	beq	16634 <__assert_fail@plt+0x42c8>
   15ba0:	ldr	r2, [sp, #80]	; 0x50
   15ba4:	mov	r3, #24
   15ba8:	cmp	r2, #2
   15bac:	bcc	15bcc <__assert_fail@plt+0x3860>
   15bb0:	mov	r0, #1
   15bb4:	mov	r3, #16
   15bb8:	lsl	r1, r0, #1
   15bbc:	cmp	r2, r0, lsl #1
   15bc0:	add	r3, r3, #16
   15bc4:	mov	r0, r1
   15bc8:	bhi	15bb8 <__assert_fail@plt+0x384c>
   15bcc:	orr	r0, r3, #1
   15bd0:	str	r3, [sp, #84]	; 0x54
   15bd4:	str	r0, [sp, #116]	; 0x74
   15bd8:	ldr	r0, [fp, #-228]	; 0xffffff1c
   15bdc:	cmp	r0, #0
   15be0:	bne	15e90 <__assert_fail@plt+0x3b24>
   15be4:	str	r5, [sp, #104]	; 0x68
   15be8:	orr	r5, r3, #2
   15bec:	mov	r6, #0
   15bf0:	str	r9, [sp, #92]	; 0x5c
   15bf4:	cmp	r6, #0
   15bf8:	beq	15c2c <__assert_fail@plt+0x38c0>
   15bfc:	ldr	r4, [r9, r6, lsl #2]
   15c00:	movw	r1, #26862	; 0x68ee
   15c04:	movt	r1, #2
   15c08:	mov	r0, r4
   15c0c:	bl	11e50 <strcmp@plt>
   15c10:	cmp	r0, #0
   15c14:	beq	15c40 <__assert_fail@plt+0x38d4>
   15c18:	mov	r0, #3
   15c1c:	mov	r1, r4
   15c20:	sub	r2, fp, #208	; 0xd0
   15c24:	bl	12324 <__xstat64@plt>
   15c28:	b	15c50 <__assert_fail@plt+0x38e4>
   15c2c:	ldr	r0, [sp, #112]	; 0x70
   15c30:	bl	121ec <fileno@plt>
   15c34:	mov	r1, r0
   15c38:	mov	r0, #3
   15c3c:	b	15c48 <__assert_fail@plt+0x38dc>
   15c40:	mov	r0, #3
   15c44:	mov	r1, #0
   15c48:	sub	r2, fp, #208	; 0xd0
   15c4c:	bl	12018 <__fxstat64@plt>
   15c50:	cmp	r0, #0
   15c54:	sub	r2, fp, #104	; 0x68
   15c58:	bne	163d4 <__assert_fail@plt+0x4068>
   15c5c:	ldr	r0, [fp, #-192]	; 0xffffff40
   15c60:	and	r0, r0, #61440	; 0xf000
   15c64:	cmp	r0, #32768	; 0x8000
   15c68:	bne	15c78 <__assert_fail@plt+0x390c>
   15c6c:	ldr	r0, [sp, #56]	; 0x38
   15c70:	ldm	r0, {r4, r9}
   15c74:	b	15c94 <__assert_fail@plt+0x3928>
   15c78:	movw	r0, #33676	; 0x838c
   15c7c:	movt	r0, #3
   15c80:	ldr	r0, [r0]
   15c84:	cmp	r0, #0
   15c88:	bne	15e30 <__assert_fail@plt+0x3ac4>
   15c8c:	mov	r9, #0
   15c90:	mov	r4, #131072	; 0x20000
   15c94:	movw	r0, #35008	; 0x88c0
   15c98:	ldr	r7, [sp, #116]	; 0x74
   15c9c:	movt	r0, #3
   15ca0:	ldr	r0, [r0]
   15ca4:	cmp	r0, #0
   15ca8:	bne	15df0 <__assert_fail@plt+0x3a84>
   15cac:	movw	r0, #33676	; 0x838c
   15cb0:	movw	r1, #35008	; 0x88c0
   15cb4:	movt	r0, #3
   15cb8:	movt	r1, #3
   15cbc:	ldr	r0, [r0]
   15cc0:	cmp	r0, #0
   15cc4:	str	r0, [r1]
   15cc8:	bne	15df0 <__assert_fail@plt+0x3a84>
   15ccc:	mov	r0, #2
   15cd0:	mov	r1, r2
   15cd4:	bl	11fb8 <getrlimit64@plt>
   15cd8:	mvn	r8, #0
   15cdc:	cmp	r0, #0
   15ce0:	bne	15cfc <__assert_fail@plt+0x3990>
   15ce4:	ldr	r8, [fp, #-104]	; 0xffffff98
   15ce8:	ldr	r0, [fp, #-100]	; 0xffffff9c
   15cec:	mvn	r2, #0
   15cf0:	subs	r1, r8, r2
   15cf4:	sbcs	r0, r0, #0
   15cf8:	movcs	r8, r2
   15cfc:	mov	r0, #9
   15d00:	sub	r1, fp, #104	; 0x68
   15d04:	bl	11fb8 <getrlimit64@plt>
   15d08:	cmp	r0, #0
   15d0c:	bne	15d24 <__assert_fail@plt+0x39b8>
   15d10:	ldr	r0, [fp, #-104]	; 0xffffff98
   15d14:	ldr	r1, [fp, #-100]	; 0xffffff9c
   15d18:	subs	r2, r0, r8
   15d1c:	sbcs	r1, r1, #0
   15d20:	movcc	r8, r0
   15d24:	mov	r0, #5
   15d28:	sub	r1, fp, #104	; 0x68
   15d2c:	bl	11fb8 <getrlimit64@plt>
   15d30:	lsr	r8, r8, #1
   15d34:	cmp	r0, #0
   15d38:	bne	15d70 <__assert_fail@plt+0x3a04>
   15d3c:	ldr	r0, [fp, #-104]	; 0xffffff98
   15d40:	ldr	r1, [fp, #-100]	; 0xffffff9c
   15d44:	lsr	r2, r1, #4
   15d48:	lsr	r0, r0, #4
   15d4c:	lsl	r2, r2, #4
   15d50:	orr	r0, r0, r1, lsl #28
   15d54:	sub	r2, r2, r1, lsr #4
   15d58:	mov	r1, #15
   15d5c:	umull	r0, r1, r0, r1
   15d60:	add	r1, r1, r2
   15d64:	subs	r2, r0, r8
   15d68:	sbcs	r1, r1, #0
   15d6c:	movcc	r8, r0
   15d70:	bl	1ee68 <__assert_fail@plt+0xcafc>
   15d74:	vmov.f64	d8, d0
   15d78:	bl	1ede8 <__assert_fail@plt+0xca7c>
   15d7c:	vmul.f64	d16, d0, d9
   15d80:	vmov	s2, r8
   15d84:	vmul.f64	d17, d0, d10
   15d88:	vcvt.u32.f64	s0, d16
   15d8c:	vcvt.f64.u32	d18, s2
   15d90:	vcmpe.f64	d8, d17
   15d94:	vmrs	APSR_nzcv, fpscr
   15d98:	vselgt.f64	d17, d8, d17
   15d9c:	vcmpe.f64	d16, d18
   15da0:	vmov	r1, s0
   15da4:	vcvt.u32.f64	s0, d17
   15da8:	vmrs	APSR_nzcv, fpscr
   15dac:	movpl	r1, r8
   15db0:	vmov	s2, r1
   15db4:	vmov	r0, s0
   15db8:	vcvt.f64.u32	d16, s2
   15dbc:	ldr	r8, [sp, #64]	; 0x40
   15dc0:	vcmpe.f64	d17, d16
   15dc4:	vmrs	APSR_nzcv, fpscr
   15dc8:	movpl	r0, r1
   15dcc:	movw	r1, #33272	; 0x81f8
   15dd0:	movt	r1, #3
   15dd4:	ldr	r1, [r1]
   15dd8:	add	r1, r1, r1, lsl #3
   15ddc:	cmp	r0, r1, lsl #1
   15de0:	lslls	r0, r1, #1
   15de4:	movw	r1, #35008	; 0x88c0
   15de8:	movt	r1, #3
   15dec:	str	r0, [r1]
   15df0:	mul	r1, r7, r4
   15df4:	sub	r2, r0, r5
   15df8:	add	r1, r1, #1
   15dfc:	cmp	r2, r1
   15e00:	bls	15e2c <__assert_fail@plt+0x3ac0>
   15e04:	udiv	r2, r1, r7
   15e08:	eor	r2, r4, r2
   15e0c:	orrs	r2, r2, r9
   15e10:	ldr	r9, [sp, #92]	; 0x5c
   15e14:	bne	15e30 <__assert_fail@plt+0x3ac4>
   15e18:	add	r6, r6, #1
   15e1c:	add	r5, r1, r5
   15e20:	cmp	sl, r6
   15e24:	bne	15bf4 <__assert_fail@plt+0x3888>
   15e28:	b	15e34 <__assert_fail@plt+0x3ac8>
   15e2c:	ldr	r9, [sp, #92]	; 0x5c
   15e30:	mov	r5, r0
   15e34:	sub	r7, fp, #240	; 0xf0
   15e38:	and	r0, r5, #15
   15e3c:	sub	r0, r5, r0
   15e40:	add	r4, r0, #16
   15e44:	mov	r0, r4
   15e48:	bl	23cf8 <__assert_fail@plt+0x1198c>
   15e4c:	cmp	r0, #0
   15e50:	bne	15e68 <__assert_fail@plt+0x3afc>
   15e54:	ldr	r0, [sp, #116]	; 0x74
   15e58:	lsr	r5, r4, #1
   15e5c:	cmp	r0, r4, lsr #1
   15e60:	bcc	15e38 <__assert_fail@plt+0x3acc>
   15e64:	b	163b4 <__assert_fail@plt+0x4048>
   15e68:	ldr	r1, [sp, #84]	; 0x54
   15e6c:	ldr	r5, [sp, #104]	; 0x68
   15e70:	str	r1, [fp, #-220]	; 0xffffff24
   15e74:	str	r0, [fp, #-240]	; 0xffffff10
   15e78:	mov	r0, #0
   15e7c:	str	r4, [fp, #-228]	; 0xffffff1c
   15e80:	str	r0, [fp, #-224]	; 0xffffff20
   15e84:	str	r0, [fp, #-232]	; 0xffffff18
   15e88:	strb	r0, [fp, #-216]	; 0xffffff28
   15e8c:	str	r0, [fp, #-236]	; 0xffffff14
   15e90:	mov	r0, #0
   15e94:	sub	sl, sl, #1
   15e98:	add	r9, r9, #4
   15e9c:	strb	r0, [fp, #-216]	; 0xffffff28
   15ea0:	str	sl, [sp, #72]	; 0x48
   15ea4:	str	r9, [sp, #92]	; 0x5c
   15ea8:	b	15ee0 <__assert_fail@plt+0x3b74>
   15eac:	vld1.32	{d16-d17}, [r4]
   15eb0:	vst1.64	{d16-d17}, [r1]
   15eb4:	mov	r0, r4
   15eb8:	ldr	r4, [sp, #124]	; 0x7c
   15ebc:	mov	r1, r6
   15ec0:	mov	r2, r4
   15ec4:	bl	189f8 <__assert_fail@plt+0x668c>
   15ec8:	mov	r0, r6
   15ecc:	mov	r1, r4
   15ed0:	bl	16a64 <__assert_fail@plt+0x46f8>
   15ed4:	ldr	r0, [sp, #120]	; 0x78
   15ed8:	cmp	r0, #0
   15edc:	bne	161c0 <__assert_fail@plt+0x3e54>
   15ee0:	ldr	r1, [sp, #112]	; 0x70
   15ee4:	ldr	r2, [sp, #108]	; 0x6c
   15ee8:	mov	r0, r7
   15eec:	bl	176d4 <__assert_fail@plt+0x5368>
   15ef0:	cmp	r0, #0
   15ef4:	beq	1613c <__assert_fail@plt+0x3dd0>
   15ef8:	ldrb	r0, [fp, #-216]	; 0xffffff28
   15efc:	ldr	r4, [fp, #-228]	; 0xffffff1c
   15f00:	cmp	sl, #0
   15f04:	cmpne	r0, #0
   15f08:	beq	15f2c <__assert_fail@plt+0x3bc0>
   15f0c:	ldr	r1, [fp, #-236]	; 0xffffff14
   15f10:	ldr	r2, [fp, #-232]	; 0xffffff18
   15f14:	ldr	r6, [sp, #84]	; 0x54
   15f18:	sub	r3, r4, r1
   15f1c:	mls	r2, r2, r6, r3
   15f20:	ldr	r3, [sp, #116]	; 0x74
   15f24:	cmp	r3, r2
   15f28:	bcc	16138 <__assert_fail@plt+0x3dcc>
   15f2c:	ldr	r6, [fp, #-240]	; 0xffffff10
   15f30:	movw	r2, #34992	; 0x88b0
   15f34:	cmp	r0, #0
   15f38:	mov	r1, #0
   15f3c:	movt	r2, #3
   15f40:	str	r1, [r2]
   15f44:	beq	15f90 <__assert_fail@plt+0x3c24>
   15f48:	ldr	r1, [fp, #-224]	; 0xffffff20
   15f4c:	orr	r0, r5, sl
   15f50:	orrs	r0, r0, r1
   15f54:	bne	15f90 <__assert_fail@plt+0x3c24>
   15f58:	ldr	r0, [sp, #112]	; 0x70
   15f5c:	ldr	r1, [sp, #108]	; 0x6c
   15f60:	bl	16a64 <__assert_fail@plt+0x46f8>
   15f64:	movw	r1, #27739	; 0x6c5b
   15f68:	mov	r0, r8
   15f6c:	movt	r1, #2
   15f70:	bl	17464 <__assert_fail@plt+0x50f8>
   15f74:	cmp	r0, #0
   15f78:	beq	163b8 <__assert_fail@plt+0x404c>
   15f7c:	str	r0, [fp, #-244]	; 0xffffff0c
   15f80:	mov	r0, #1
   15f84:	str	r8, [sp, #124]	; 0x7c
   15f88:	str	r0, [sp, #120]	; 0x78
   15f8c:	b	15fb0 <__assert_fail@plt+0x3c44>
   15f90:	mov	r0, #0
   15f94:	mov	r1, #0
   15f98:	str	r0, [sp, #120]	; 0x78
   15f9c:	sub	r0, fp, #244	; 0xf4
   15fa0:	bl	1a24c <__assert_fail@plt+0x7ee0>
   15fa4:	add	r0, r0, #9
   15fa8:	add	r5, r5, #1
   15fac:	str	r0, [sp, #124]	; 0x7c
   15fb0:	ldr	sl, [fp, #-232]	; 0xffffff18
   15fb4:	add	r4, r6, r4
   15fb8:	str	r6, [sp, #88]	; 0x58
   15fbc:	cmp	sl, #2
   15fc0:	bcc	160dc <__assert_fail@plt+0x3d70>
   15fc4:	ldr	r1, [sp, #68]	; 0x44
   15fc8:	movw	r0, #45888	; 0xb340
   15fcc:	str	r5, [sp, #104]	; 0x68
   15fd0:	movt	r0, #1
   15fd4:	bl	1e568 <__assert_fail@plt+0xc1fc>
   15fd8:	str	r0, [fp, #-208]	; 0xffffff30
   15fdc:	ldr	r0, [sp, #96]	; 0x60
   15fe0:	mov	r1, #0
   15fe4:	bl	11f04 <pthread_mutex_init@plt>
   15fe8:	ldr	r0, [sp, #100]	; 0x64
   15fec:	mov	r1, #0
   15ff0:	bl	11f88 <pthread_cond_init@plt>
   15ff4:	ldr	r0, [sp, #76]	; 0x4c
   15ff8:	bl	22720 <__assert_fail@plt+0x103b4>
   15ffc:	mov	r8, r0
   16000:	mov	r6, #0
   16004:	mov	r5, r0
   16008:	mov	r1, #0
   1600c:	strb	r6, [r0, #44]	; 0x2c
   16010:	str	r6, [r0, #40]	; 0x28
   16014:	str	r6, [r0, #16]
   16018:	str	sl, [r0, #20]
   1601c:	str	sl, [r0, #24]
   16020:	str	r6, [r0, #28]
   16024:	mov	r0, #72	; 0x48
   16028:	add	r7, r8, #48	; 0x30
   1602c:	vst1.32	{d12-d13}, [r5], r0
   16030:	mov	r0, r7
   16034:	bl	11f04 <pthread_mutex_init@plt>
   16038:	ldr	r9, [sp, #80]	; 0x50
   1603c:	mov	r0, r8
   16040:	mov	r1, r5
   16044:	mov	r2, r4
   16048:	str	sl, [sp]
   1604c:	str	r6, [sp, #4]
   16050:	mov	r3, r9
   16054:	bl	1b378 <__assert_fail@plt+0x900c>
   16058:	sub	r0, fp, #208	; 0xd0
   1605c:	ldr	r6, [fp, #-244]	; 0xffffff0c
   16060:	mov	r1, r9
   16064:	mov	r2, sl
   16068:	mov	r3, r5
   1606c:	stm	sp, {r0, r6}
   16070:	ldr	r0, [sp, #124]	; 0x7c
   16074:	str	r0, [sp, #8]
   16078:	mov	r0, r4
   1607c:	bl	1a9e0 <__assert_fail@plt+0x8674>
   16080:	cmp	r9, #0
   16084:	beq	160a0 <__assert_fail@plt+0x3d34>
   16088:	ldr	r4, [sp, #60]	; 0x3c
   1608c:	mov	r0, r7
   16090:	bl	11e80 <pthread_mutex_destroy@plt>
   16094:	adds	r4, r4, #1
   16098:	add	r7, r7, #72	; 0x48
   1609c:	bcc	1608c <__assert_fail@plt+0x3d20>
   160a0:	mov	r0, r8
   160a4:	bl	1d148 <__assert_fail@plt+0xaddc>
   160a8:	ldr	r0, [fp, #-208]	; 0xffffff30
   160ac:	bl	1e5cc <__assert_fail@plt+0xc260>
   160b0:	ldr	r0, [sp, #100]	; 0x64
   160b4:	bl	11ff4 <pthread_cond_destroy@plt>
   160b8:	ldr	r0, [sp, #96]	; 0x60
   160bc:	bl	11e80 <pthread_mutex_destroy@plt>
   160c0:	ldr	r8, [sp, #64]	; 0x40
   160c4:	ldr	r9, [sp, #92]	; 0x5c
   160c8:	ldr	sl, [sp, #72]	; 0x48
   160cc:	ldr	r5, [sp, #104]	; 0x68
   160d0:	ldr	r4, [sp, #124]	; 0x7c
   160d4:	sub	r7, fp, #240	; 0xf0
   160d8:	b	15ec8 <__assert_fail@plt+0x3b5c>
   160dc:	movw	r0, #33662	; 0x837e
   160e0:	ldr	r6, [fp, #-244]	; 0xffffff0c
   160e4:	ldr	sl, [sp, #72]	; 0x48
   160e8:	sub	r4, r4, #16
   160ec:	movt	r0, #3
   160f0:	ldrb	r0, [r0]
   160f4:	cmp	r0, #1
   160f8:	bne	15eb4 <__assert_fail@plt+0x3b48>
   160fc:	movw	r1, #34992	; 0x88b0
   16100:	movt	r1, #3
   16104:	ldr	r0, [r1]
   16108:	cmp	r0, #0
   1610c:	beq	15eac <__assert_fail@plt+0x3b40>
   16110:	movw	r1, #34992	; 0x88b0
   16114:	mov	r0, r4
   16118:	movt	r1, #3
   1611c:	bl	179f8 <__assert_fail@plt+0x568c>
   16120:	movw	r1, #34992	; 0x88b0
   16124:	cmp	r0, #0
   16128:	movt	r1, #3
   1612c:	bne	15eac <__assert_fail@plt+0x3b40>
   16130:	ldr	r4, [sp, #124]	; 0x7c
   16134:	b	15ec8 <__assert_fail@plt+0x3b5c>
   16138:	str	r1, [fp, #-224]	; 0xffffff20
   1613c:	ldr	r0, [sp, #112]	; 0x70
   16140:	ldr	r1, [sp, #108]	; 0x6c
   16144:	bl	16a64 <__assert_fail@plt+0x46f8>
   16148:	movw	r1, #26134	; 0x6616
   1614c:	cmp	sl, #0
   16150:	movt	r1, #2
   16154:	bne	15b88 <__assert_fail@plt+0x381c>
   16158:	ldr	r0, [fp, #-240]	; 0xffffff10
   1615c:	bl	1d148 <__assert_fail@plt+0xaddc>
   16160:	movw	r1, #34704	; 0x8790
   16164:	mov	r0, r5
   16168:	movt	r1, #3
   1616c:	mov	r6, r0
   16170:	ldr	r5, [r1]
   16174:	mov	r1, #8
   16178:	bl	227f0 <__assert_fail@plt+0x10484>
   1617c:	mov	r4, r0
   16180:	cmp	r5, #0
   16184:	beq	161a4 <__assert_fail@plt+0x3e38>
   16188:	add	r0, r4, #4
   1618c:	add	r1, r5, #9
   16190:	stmda	r0, {r1, r5}
   16194:	add	r0, r0, #8
   16198:	ldr	r5, [r5]
   1619c:	cmp	r5, #0
   161a0:	bne	1618c <__assert_fail@plt+0x3e20>
   161a4:	mov	r0, r4
   161a8:	mov	r1, r6
   161ac:	mov	r2, r6
   161b0:	mov	r3, r8
   161b4:	bl	16e1c <__assert_fail@plt+0x4ab0>
   161b8:	mov	r0, r4
   161bc:	b	161c4 <__assert_fail@plt+0x3e58>
   161c0:	ldr	r0, [sp, #88]	; 0x58
   161c4:	bl	1d148 <__assert_fail@plt+0xaddc>
   161c8:	movw	r4, #34984	; 0x88a8
   161cc:	movt	r4, #3
   161d0:	ldr	r0, [r4]
   161d4:	cmp	r0, #1
   161d8:	blt	161f0 <__assert_fail@plt+0x3e84>
   161dc:	mvn	r0, #0
   161e0:	bl	1a768 <__assert_fail@plt+0x83fc>
   161e4:	ldr	r0, [r4]
   161e8:	cmp	r0, #0
   161ec:	bgt	161dc <__assert_fail@plt+0x3e70>
   161f0:	movw	r0, #33521	; 0x82f1
   161f4:	movt	r0, #3
   161f8:	ldrb	r0, [r0]
   161fc:	cmp	r0, #1
   16200:	bne	1621c <__assert_fail@plt+0x3eb0>
   16204:	movw	r0, #33496	; 0x82d8
   16208:	movt	r0, #3
   1620c:	ldr	r0, [r0]
   16210:	bl	1cbbc <__assert_fail@plt+0xa850>
   16214:	cmn	r0, #1
   16218:	beq	167d8 <__assert_fail@plt+0x446c>
   1621c:	mov	r0, #0
   16220:	sub	sp, fp, #72	; 0x48
   16224:	vpop	{d8-d10}
   16228:	vpop	{d12-d13}
   1622c:	add	sp, sp, #4
   16230:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16234:	movw	r0, #25526	; 0x63b6
   16238:	mov	r7, ip
   1623c:	movt	r0, #2
   16240:	bl	120cc <getenv@plt>
   16244:	movw	r5, #23717	; 0x5ca5
   16248:	cmp	r0, #0
   1624c:	movt	r5, #2
   16250:	movne	r5, r0
   16254:	movw	r0, #34708	; 0x8794
   16258:	movt	r0, #3
   1625c:	ldr	r0, [r0]
   16260:	cmp	r0, #0
   16264:	beq	16280 <__assert_fail@plt+0x3f14>
   16268:	movw	r0, #34712	; 0x8798
   1626c:	mov	r1, #0
   16270:	mov	ip, r7
   16274:	movt	r0, #3
   16278:	ldr	r0, [r0]
   1627c:	b	162b4 <__assert_fail@plt+0x3f48>
   16280:	str	r7, [sp, #36]	; 0x24
   16284:	mov	r7, r6
   16288:	movw	r6, #34712	; 0x8798
   1628c:	movw	r1, #34708	; 0x8794
   16290:	mov	r2, #4
   16294:	movt	r6, #3
   16298:	movt	r1, #3
   1629c:	ldr	r0, [r6]
   162a0:	bl	228cc <__assert_fail@plt+0x10560>
   162a4:	ldr	ip, [sp, #36]	; 0x24
   162a8:	ldr	r1, [r4]
   162ac:	str	r0, [r6]
   162b0:	mov	r6, r7
   162b4:	add	r2, r1, #1
   162b8:	str	r2, [r4]
   162bc:	str	r5, [r0, r1, lsl #2]
   162c0:	cmp	sl, #0
   162c4:	bne	15974 <__assert_fail@plt+0x3608>
   162c8:	mov	r0, r8
   162cc:	mov	r4, ip
   162d0:	bl	1d148 <__assert_fail@plt+0xaddc>
   162d4:	mov	r0, #4
   162d8:	bl	22720 <__assert_fail@plt+0x103b4>
   162dc:	mov	r8, r0
   162e0:	movw	r0, #26862	; 0x68ee
   162e4:	mov	ip, r4
   162e8:	mov	sl, #1
   162ec:	movt	r0, #2
   162f0:	str	r0, [r8]
   162f4:	b	15974 <__assert_fail@plt+0x3608>
   162f8:	mov	r0, #2
   162fc:	bl	12470 <__assert_fail@plt+0x104>
   16300:	movw	r0, #33384	; 0x8268
   16304:	movw	r2, #25175	; 0x6257
   16308:	mov	r1, #0
   1630c:	movw	r7, #25162	; 0x624a
   16310:	movt	r0, #3
   16314:	movt	r2, #2
   16318:	str	r1, [sp, #8]
   1631c:	movw	r1, #24874	; 0x612a
   16320:	movt	r7, #2
   16324:	movt	r1, #2
   16328:	ldr	r3, [r0]
   1632c:	movw	r0, #33500	; 0x82dc
   16330:	str	r2, [sp, #4]
   16334:	movw	r2, #25148	; 0x623c
   16338:	str	r7, [sp]
   1633c:	movt	r0, #3
   16340:	movt	r2, #2
   16344:	ldr	r0, [r0]
   16348:	bl	224ec <__assert_fail@plt+0x10180>
   1634c:	mov	r0, #0
   16350:	bl	12150 <exit@plt>
   16354:	mov	r0, #0
   16358:	bl	12470 <__assert_fail@plt+0x104>
   1635c:	mov	r1, #0
   16360:	sub	r4, fp, #208	; 0xd0
   16364:	strb	r1, [r0, #31]
   16368:	strh	r1, [r0, #24]
   1636c:	mov	r1, r4
   16370:	bl	175f8 <__assert_fail@plt+0x528c>
   16374:	mov	r0, r4
   16378:	bl	16a30 <__assert_fail@plt+0x46c4>
   1637c:	movw	r1, #25287	; 0x62c7
   16380:	mov	r0, #0
   16384:	mov	r2, #5
   16388:	movt	r1, #2
   1638c:	bl	11f7c <dcgettext@plt>
   16390:	ldr	r1, [r8, r6, lsl #2]
   16394:	mov	r4, r0
   16398:	mov	r0, #4
   1639c:	bl	208a8 <__assert_fail@plt+0xe53c>
   163a0:	mov	r3, r0
   163a4:	mov	r0, #2
   163a8:	mov	r1, #0
   163ac:	mov	r2, r4
   163b0:	bl	120a8 <error@plt>
   163b4:	bl	22c5c <__assert_fail@plt+0x108f0>
   163b8:	movw	r1, #26727	; 0x6867
   163bc:	mov	r0, #0
   163c0:	mov	r2, #5
   163c4:	movt	r1, #2
   163c8:	bl	11f7c <dcgettext@plt>
   163cc:	mov	r1, r8
   163d0:	bl	173f0 <__assert_fail@plt+0x5084>
   163d4:	movw	r1, #28005	; 0x6d65
   163d8:	mov	r0, #0
   163dc:	mov	r2, #5
   163e0:	movt	r1, #2
   163e4:	bl	11f7c <dcgettext@plt>
   163e8:	ldr	r1, [r9, r6, lsl #2]
   163ec:	bl	173f0 <__assert_fail@plt+0x5084>
   163f0:	movw	r1, #24890	; 0x613a
   163f4:	movt	r1, #2
   163f8:	b	165c8 <__assert_fail@plt+0x425c>
   163fc:	ldr	r0, [r4]
   16400:	movw	r1, #24978	; 0x6192
   16404:	movt	r1, #2
   16408:	bl	169d0 <__assert_fail@plt+0x4664>
   1640c:	movw	r1, #25094	; 0x6206
   16410:	movt	r1, #2
   16414:	b	165c8 <__assert_fail@plt+0x425c>
   16418:	movw	r1, #25107	; 0x6213
   1641c:	mov	r0, #0
   16420:	mov	r2, #5
   16424:	movt	r1, #2
   16428:	bl	11f7c <dcgettext@plt>
   1642c:	mov	r4, r0
   16430:	ldr	r0, [r6]
   16434:	bl	20dd0 <__assert_fail@plt+0xea64>
   16438:	b	163a0 <__assert_fail@plt+0x4034>
   1643c:	movw	r1, #25130	; 0x622a
   16440:	movt	r1, #2
   16444:	b	165c8 <__assert_fail@plt+0x425c>
   16448:	movw	r3, #28116	; 0x6dd4
   1644c:	mov	r1, r4
   16450:	mov	r2, #7
   16454:	str	r6, [sp]
   16458:	movt	r3, #2
   1645c:	bl	22f40 <__assert_fail@plt+0x10bd4>
   16460:	movw	r1, #25028	; 0x61c4
   16464:	movt	r1, #2
   16468:	b	165c8 <__assert_fail@plt+0x425c>
   1646c:	cmp	r4, #1
   16470:	bne	16614 <__assert_fail@plt+0x42a8>
   16474:	movw	r1, #26604	; 0x67ec
   16478:	mov	r0, #0
   1647c:	mov	r2, #5
   16480:	movt	r1, #2
   16484:	bl	11f7c <dcgettext@plt>
   16488:	mov	r4, r0
   1648c:	ldr	r0, [sp, #68]	; 0x44
   16490:	bl	20dd0 <__assert_fail@plt+0xea64>
   16494:	ldr	r1, [sp, #72]	; 0x48
   16498:	str	r0, [sp]
   1649c:	movw	r0, #28116	; 0x6dd4
   164a0:	mov	r2, r4
   164a4:	movt	r0, #2
   164a8:	ldr	r5, [r0, r1, lsl #4]
   164ac:	mov	r0, #0
   164b0:	mov	r1, #0
   164b4:	mov	r3, r5
   164b8:	bl	120a8 <error@plt>
   164bc:	movw	r1, #26631	; 0x6807
   164c0:	mov	r0, #0
   164c4:	mov	r2, #5
   164c8:	movt	r1, #2
   164cc:	bl	11f7c <dcgettext@plt>
   164d0:	mov	r4, r0
   164d4:	sub	r1, fp, #208	; 0xd0
   164d8:	mov	r0, sl
   164dc:	bl	1e800 <__assert_fail@plt+0xc494>
   164e0:	b	16550 <__assert_fail@plt+0x41e4>
   164e4:	movw	r1, #26549	; 0x67b5
   164e8:	mov	r0, #0
   164ec:	mov	r2, #5
   164f0:	movt	r1, #2
   164f4:	bl	11f7c <dcgettext@plt>
   164f8:	mov	r4, r0
   164fc:	ldr	r0, [sp, #68]	; 0x44
   16500:	bl	20dd0 <__assert_fail@plt+0xea64>
   16504:	ldr	r1, [sp, #72]	; 0x48
   16508:	str	r0, [sp]
   1650c:	movw	r0, #28116	; 0x6dd4
   16510:	mov	r2, r4
   16514:	movt	r0, #2
   16518:	ldr	r5, [r0, r1, lsl #4]
   1651c:	mov	r0, #0
   16520:	mov	r1, #0
   16524:	mov	r3, r5
   16528:	bl	120a8 <error@plt>
   1652c:	movw	r1, #26574	; 0x67ce
   16530:	mov	r0, #0
   16534:	mov	r2, #5
   16538:	movt	r1, #2
   1653c:	bl	11f7c <dcgettext@plt>
   16540:	mov	r4, r0
   16544:	movw	r0, #26602	; 0x67ea
   16548:	movt	r0, #2
   1654c:	bl	20dd0 <__assert_fail@plt+0xea64>
   16550:	str	r0, [sp]
   16554:	mov	r0, #2
   16558:	mov	r1, #0
   1655c:	mov	r2, r4
   16560:	mov	r3, r5
   16564:	bl	120a8 <error@plt>
   16568:	movw	r1, #25060	; 0x61e4
   1656c:	movt	r1, #2
   16570:	b	165c8 <__assert_fail@plt+0x425c>
   16574:	mov	r0, #1
   16578:	ldr	r1, [sp, #92]	; 0x5c
   1657c:	movw	r3, #28116	; 0x6dd4
   16580:	mov	r2, #83	; 0x53
   16584:	movt	r3, #2
   16588:	str	r1, [sp]
   1658c:	mov	r1, r4
   16590:	bl	22f40 <__assert_fail@plt+0x10bd4>
   16594:	ldr	r0, [r4]
   16598:	movw	r1, #24957	; 0x617d
   1659c:	movt	r1, #2
   165a0:	bl	169d0 <__assert_fail@plt+0x4664>
   165a4:	ldr	r0, [r4]
   165a8:	movw	r1, #24842	; 0x610a
   165ac:	movt	r1, #2
   165b0:	bl	169d0 <__assert_fail@plt+0x4664>
   165b4:	movw	r0, #24887	; 0x6137
   165b8:	movt	r0, #2
   165bc:	bl	16a30 <__assert_fail@plt+0x46c4>
   165c0:	movw	r1, #26692	; 0x6844
   165c4:	movt	r1, #2
   165c8:	mov	r0, #0
   165cc:	mov	r2, #5
   165d0:	bl	11f7c <dcgettext@plt>
   165d4:	mov	r2, r0
   165d8:	mov	r0, #2
   165dc:	mov	r1, #0
   165e0:	bl	120a8 <error@plt>
   165e4:	movw	r0, #29103	; 0x71af
   165e8:	movw	r1, #24783	; 0x60cf
   165ec:	movw	r3, #24794	; 0x60da
   165f0:	movw	r2, #4449	; 0x1161
   165f4:	movt	r0, #2
   165f8:	movt	r1, #2
   165fc:	movt	r3, #2
   16600:	bl	1236c <__assert_fail@plt>
   16604:	movw	r1, #24842	; 0x610a
   16608:	mov	r0, r4
   1660c:	movt	r1, #2
   16610:	bl	169d0 <__assert_fail@plt+0x4664>
   16614:	ldr	r0, [sp, #68]	; 0x44
   16618:	ldr	r1, [sp, #72]	; 0x48
   1661c:	movw	r3, #28116	; 0x6dd4
   16620:	mov	r2, #4
   16624:	movt	r3, #2
   16628:	str	r0, [sp]
   1662c:	mov	r0, r4
   16630:	bl	22f40 <__assert_fail@plt+0x10bd4>
   16634:	movw	r1, #26727	; 0x6867
   16638:	mov	r0, #0
   1663c:	mov	r2, #5
   16640:	movt	r1, #2
   16644:	bl	11f7c <dcgettext@plt>
   16648:	ldr	r1, [sp, #108]	; 0x6c
   1664c:	bl	173f0 <__assert_fail@plt+0x5084>
   16650:	mov	r7, ip
   16654:	cmp	sl, #2
   16658:	bcc	167b4 <__assert_fail@plt+0x4448>
   1665c:	movw	r1, #25533	; 0x63bd
   16660:	mov	r0, #0
   16664:	mov	r2, #5
   16668:	movt	r1, #2
   1666c:	bl	11f7c <dcgettext@plt>
   16670:	mov	r4, r0
   16674:	ldr	r0, [sp, #92]	; 0x5c
   16678:	ldr	r1, [r0, #4]
   1667c:	mov	r0, #4
   16680:	bl	208a8 <__assert_fail@plt+0xe53c>
   16684:	mov	r3, r0
   16688:	uxtb	r0, r7
   1668c:	str	r0, [sp]
   16690:	b	163a4 <__assert_fail@plt+0x4038>
   16694:	movw	r1, #25187	; 0x6263
   16698:	mov	r0, #0
   1669c:	mov	r2, #5
   166a0:	movt	r1, #2
   166a4:	bl	11f7c <dcgettext@plt>
   166a8:	ldr	r1, [r8]
   166ac:	mov	r4, r0
   166b0:	mov	r0, #4
   166b4:	bl	208a8 <__assert_fail@plt+0xe53c>
   166b8:	mov	r3, r0
   166bc:	mov	r0, #0
   166c0:	mov	r1, #0
   166c4:	mov	r2, r4
   166c8:	bl	120a8 <error@plt>
   166cc:	movw	r0, #33488	; 0x82d0
   166d0:	movw	r1, #25204	; 0x6274
   166d4:	mov	r2, #5
   166d8:	movt	r0, #3
   166dc:	movt	r1, #2
   166e0:	ldr	r4, [r0]
   166e4:	mov	r0, #0
   166e8:	bl	11f7c <dcgettext@plt>
   166ec:	movw	r2, #29662	; 0x73de
   166f0:	mov	r3, r0
   166f4:	mov	r0, r4
   166f8:	mov	r1, #1
   166fc:	movt	r2, #2
   16700:	bl	121f8 <__fprintf_chk@plt>
   16704:	mov	r0, #2
   16708:	bl	12470 <__assert_fail@plt+0x104>
   1670c:	movw	r1, #26727	; 0x6867
   16710:	mov	r0, #0
   16714:	mov	r2, #5
   16718:	movt	r1, #2
   1671c:	bl	11f7c <dcgettext@plt>
   16720:	ldr	r1, [sp, #100]	; 0x64
   16724:	bl	173f0 <__assert_fail@plt+0x5084>
   16728:	movw	r1, #25256	; 0x62a8
   1672c:	movt	r1, #2
   16730:	b	1673c <__assert_fail@plt+0x43d0>
   16734:	movw	r1, #25388	; 0x632c
   16738:	movt	r1, #2
   1673c:	mov	r0, #0
   16740:	mov	r2, #5
   16744:	bl	11f7c <dcgettext@plt>
   16748:	ldr	r1, [sp, #100]	; 0x64
   1674c:	b	16394 <__assert_fail@plt+0x4028>
   16750:	movw	r1, #26727	; 0x6867
   16754:	mov	r0, #0
   16758:	mov	r2, #5
   1675c:	movt	r1, #2
   16760:	bl	11f7c <dcgettext@plt>
   16764:	ldr	r1, [sp, #64]	; 0x40
   16768:	bl	173f0 <__assert_fail@plt+0x5084>
   1676c:	movw	r1, #26727	; 0x6867
   16770:	mov	r0, #0
   16774:	mov	r2, #5
   16778:	movt	r1, #2
   1677c:	bl	11f7c <dcgettext@plt>
   16780:	ldr	r2, [sp, #32]
   16784:	movw	r1, #27532	; 0x6b8c
   16788:	movt	r1, #2
   1678c:	cmp	r2, #0
   16790:	movne	r1, r2
   16794:	bl	173f0 <__assert_fail@plt+0x5084>
   16798:	movw	r1, #25571	; 0x63e3
   1679c:	mov	r0, #0
   167a0:	mov	r2, #5
   167a4:	movt	r1, #2
   167a8:	bl	11f7c <dcgettext@plt>
   167ac:	ldr	r1, [sp, #32]
   167b0:	bl	173f0 <__assert_fail@plt+0x5084>
   167b4:	ldr	r0, [sp, #64]	; 0x40
   167b8:	cmp	r0, #0
   167bc:	bne	167f8 <__assert_fail@plt+0x448c>
   167c0:	ldr	r0, [sp, #92]	; 0x5c
   167c4:	uxtb	r1, r7
   167c8:	ldr	r0, [r0]
   167cc:	bl	16ae0 <__assert_fail@plt+0x4774>
   167d0:	eor	r0, r0, #1
   167d4:	bl	12150 <exit@plt>
   167d8:	movw	r1, #25571	; 0x63e3
   167dc:	mov	r0, #0
   167e0:	mov	r2, #5
   167e4:	movt	r1, #2
   167e8:	bl	11f7c <dcgettext@plt>
   167ec:	movw	r1, #26862	; 0x68ee
   167f0:	movt	r1, #2
   167f4:	bl	173f0 <__assert_fail@plt+0x5084>
   167f8:	movw	r0, #33276	; 0x81fc
   167fc:	movt	r0, #3
   16800:	strb	r7, [r0]
   16804:	bl	16a30 <__assert_fail@plt+0x46c4>
   16808:	push	{r4, r5, r6, sl, fp, lr}
   1680c:	add	fp, sp, #16
   16810:	movw	r5, #34704	; 0x8790
   16814:	mov	r4, r0
   16818:	movt	r5, #3
   1681c:	ldr	r6, [r5]
   16820:	cmp	r6, #0
   16824:	beq	1683c <__assert_fail@plt+0x44d0>
   16828:	add	r0, r6, #9
   1682c:	bl	11fa0 <unlink@plt>
   16830:	ldr	r6, [r6]
   16834:	cmp	r6, #0
   16838:	bne	16828 <__assert_fail@plt+0x44bc>
   1683c:	mov	r0, #0
   16840:	mov	r1, #0
   16844:	str	r0, [r5]
   16848:	mov	r0, r4
   1684c:	bl	11f28 <signal@plt>
   16850:	mov	r0, r4
   16854:	pop	{r4, r5, r6, sl, fp, lr}
   16858:	b	11e44 <raise@plt>
   1685c:	push	{r4, r5, r6, r7, fp, lr}
   16860:	add	fp, sp, #16
   16864:	sub	sp, sp, #136	; 0x88
   16868:	movw	r5, #34704	; 0x8790
   1686c:	movt	r5, #3
   16870:	ldr	r0, [r5]
   16874:	cmp	r0, #0
   16878:	beq	168e8 <__assert_fail@plt+0x457c>
   1687c:	movw	r1, #33528	; 0x82f8
   16880:	add	r0, sp, #4
   16884:	mov	r6, #0
   16888:	add	r4, r0, #4
   1688c:	movt	r1, #3
   16890:	mov	r0, #0
   16894:	mov	r2, r4
   16898:	bl	12078 <pthread_sigmask@plt>
   1689c:	clz	r0, r0
   168a0:	lsr	r0, r0, #5
   168a4:	strb	r0, [sp, #4]
   168a8:	ldr	r7, [r5]
   168ac:	cmp	r7, #0
   168b0:	beq	168cc <__assert_fail@plt+0x4560>
   168b4:	add	r0, r7, #9
   168b8:	bl	11fa0 <unlink@plt>
   168bc:	ldr	r7, [r7]
   168c0:	cmp	r7, #0
   168c4:	bne	168b4 <__assert_fail@plt+0x4548>
   168c8:	ldrb	r0, [sp, #4]
   168cc:	cmp	r0, #0
   168d0:	str	r6, [r5]
   168d4:	beq	168e8 <__assert_fail@plt+0x457c>
   168d8:	mov	r0, #2
   168dc:	mov	r1, r4
   168e0:	mov	r2, #0
   168e4:	bl	12078 <pthread_sigmask@plt>
   168e8:	bl	1bc5c <__assert_fail@plt+0x98f0>
   168ec:	sub	sp, fp, #16
   168f0:	pop	{r4, r5, r6, r7, fp, pc}
   168f4:	push	{r4, r5, r6, sl, fp, lr}
   168f8:	add	fp, sp, #16
   168fc:	sub	sp, sp, #24
   16900:	mov	r4, r0
   16904:	movw	r0, #21100	; 0x526c
   16908:	mov	r5, r2
   1690c:	mov	r6, r1
   16910:	add	r1, sp, #20
   16914:	add	r3, sp, #8
   16918:	mov	r2, #10
   1691c:	movt	r0, #2
   16920:	str	r0, [sp]
   16924:	mov	r0, r4
   16928:	bl	23004 <__assert_fail@plt+0x10c98>
   1692c:	cmp	r0, #4
   16930:	bhi	1696c <__assert_fail@plt+0x4600>
   16934:	add	r1, pc, #0
   16938:	ldr	pc, [r1, r0, lsl #2]
   1693c:	andeq	r6, r1, r0, asr r9
   16940:	andeq	r6, r1, r4, ror #18
   16944:	andeq	r6, r1, r0, asr r9
   16948:	andeq	r6, r1, r4, ror #18
   1694c:	andeq	r6, r1, r8, ror r9
   16950:	ldr	r1, [sp, #12]
   16954:	ldr	r0, [sp, #8]
   16958:	cmp	r1, #0
   1695c:	str	r0, [r6]
   16960:	beq	1696c <__assert_fail@plt+0x4600>
   16964:	mvn	r0, #0
   16968:	str	r0, [r6]
   1696c:	ldr	r0, [sp, #20]
   16970:	sub	sp, fp, #16
   16974:	pop	{r4, r5, r6, sl, fp, pc}
   16978:	mov	r0, #0
   1697c:	cmp	r5, #0
   16980:	beq	16970 <__assert_fail@plt+0x4604>
   16984:	movw	r1, #26386	; 0x6712
   16988:	mov	r0, #0
   1698c:	mov	r2, #5
   16990:	movt	r1, #2
   16994:	bl	11f7c <dcgettext@plt>
   16998:	mov	r6, r0
   1699c:	mov	r0, #0
   169a0:	mov	r1, r5
   169a4:	mov	r2, #5
   169a8:	bl	11f7c <dcgettext@plt>
   169ac:	mov	r5, r0
   169b0:	mov	r0, r4
   169b4:	bl	20dd0 <__assert_fail@plt+0xea64>
   169b8:	str	r0, [sp]
   169bc:	mov	r0, #2
   169c0:	mov	r1, #0
   169c4:	mov	r2, r6
   169c8:	mov	r3, r5
   169cc:	bl	120a8 <error@plt>
   169d0:	push	{fp, lr}
   169d4:	mov	fp, sp
   169d8:	sub	sp, sp, #8
   169dc:	mov	r4, r1
   169e0:	movw	r1, #26419	; 0x6733
   169e4:	mov	r5, r0
   169e8:	mov	r0, #0
   169ec:	mov	r2, #5
   169f0:	movt	r1, #2
   169f4:	bl	11f7c <dcgettext@plt>
   169f8:	mov	r6, r0
   169fc:	mov	r0, #0
   16a00:	mov	r1, r4
   16a04:	mov	r2, #5
   16a08:	bl	11f7c <dcgettext@plt>
   16a0c:	mov	r4, r0
   16a10:	mov	r0, r5
   16a14:	bl	20dd0 <__assert_fail@plt+0xea64>
   16a18:	str	r0, [sp]
   16a1c:	mov	r0, #2
   16a20:	mov	r1, #0
   16a24:	mov	r2, r6
   16a28:	mov	r3, r4
   16a2c:	bl	120a8 <error@plt>
   16a30:	push	{fp, lr}
   16a34:	mov	fp, sp
   16a38:	movw	r1, #26518	; 0x6796
   16a3c:	mov	r4, r0
   16a40:	mov	r0, #0
   16a44:	mov	r2, #5
   16a48:	movt	r1, #2
   16a4c:	bl	11f7c <dcgettext@plt>
   16a50:	mov	r2, r0
   16a54:	mov	r0, #2
   16a58:	mov	r1, #0
   16a5c:	mov	r3, r4
   16a60:	bl	120a8 <error@plt>
   16a64:	push	{r4, r5, fp, lr}
   16a68:	add	fp, sp, #8
   16a6c:	mov	r4, r1
   16a70:	mov	r5, r0
   16a74:	bl	121ec <fileno@plt>
   16a78:	cmp	r0, #1
   16a7c:	beq	16a94 <__assert_fail@plt+0x4728>
   16a80:	cmp	r0, #0
   16a84:	bne	16aa8 <__assert_fail@plt+0x473c>
   16a88:	mov	r0, r5
   16a8c:	pop	{r4, r5, fp, lr}
   16a90:	b	122ac <clearerr_unlocked@plt>
   16a94:	mov	r0, r5
   16a98:	bl	12000 <fflush_unlocked@plt>
   16a9c:	cmp	r0, #0
   16aa0:	bne	16ad4 <__assert_fail@plt+0x4768>
   16aa4:	pop	{r4, r5, fp, pc}
   16aa8:	mov	r0, r5
   16aac:	bl	1cbbc <__assert_fail@plt+0xa850>
   16ab0:	cmp	r0, #0
   16ab4:	popeq	{r4, r5, fp, pc}
   16ab8:	movw	r1, #25571	; 0x63e3
   16abc:	movt	r1, #2
   16ac0:	mov	r0, #0
   16ac4:	mov	r2, #5
   16ac8:	bl	11f7c <dcgettext@plt>
   16acc:	mov	r1, r4
   16ad0:	bl	173f0 <__assert_fail@plt+0x5084>
   16ad4:	movw	r1, #26847	; 0x68df
   16ad8:	movt	r1, #2
   16adc:	b	16ac0 <__assert_fail@plt+0x4754>
   16ae0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16ae4:	add	fp, sp, #28
   16ae8:	sub	sp, sp, #100	; 0x64
   16aec:	mov	r9, r1
   16af0:	movw	r1, #26134	; 0x6616
   16af4:	mov	r5, r0
   16af8:	movt	r1, #2
   16afc:	bl	17464 <__assert_fail@plt+0x50f8>
   16b00:	cmp	r0, #0
   16b04:	beq	16e00 <__assert_fail@plt+0x4a94>
   16b08:	mov	r4, r0
   16b0c:	movw	r0, #33376	; 0x8260
   16b10:	movt	r0, #3
   16b14:	ldr	r1, [r0]
   16b18:	movw	r0, #33676	; 0x838c
   16b1c:	movt	r0, #3
   16b20:	ldr	r0, [r0]
   16b24:	cmp	r1, r0
   16b28:	movhi	r0, r1
   16b2c:	movw	r1, #33664	; 0x8380
   16b30:	movt	r1, #3
   16b34:	ldr	r1, [r1]
   16b38:	str	r1, [sp, #20]
   16b3c:	movw	r1, #33662	; 0x837e
   16b40:	movt	r1, #3
   16b44:	ldrb	r1, [r1]
   16b48:	eor	r8, r1, #1
   16b4c:	and	r1, r0, #15
   16b50:	sub	r0, r0, r1
   16b54:	add	r6, r0, #16
   16b58:	mov	r0, r6
   16b5c:	bl	23cf8 <__assert_fail@plt+0x1198c>
   16b60:	cmp	r0, #0
   16b64:	bne	16b78 <__assert_fail@plt+0x480c>
   16b68:	lsr	r0, r6, #1
   16b6c:	cmp	r6, #35	; 0x23
   16b70:	bhi	16b4c <__assert_fail@plt+0x47e0>
   16b74:	bl	22c5c <__assert_fail@plt+0x108f0>
   16b78:	mov	r1, #16
   16b7c:	mov	r2, r5
   16b80:	str	r1, [fp, #-36]	; 0xffffffdc
   16b84:	str	r0, [fp, #-56]	; 0xffffffc8
   16b88:	str	r6, [fp, #-44]	; 0xffffffd4
   16b8c:	mov	r6, #0
   16b90:	sub	r0, fp, #56	; 0x38
   16b94:	mov	r1, r4
   16b98:	str	r6, [fp, #-40]	; 0xffffffd8
   16b9c:	str	r6, [fp, #-48]	; 0xffffffd0
   16ba0:	strb	r6, [fp, #-32]	; 0xffffffe0
   16ba4:	str	r6, [fp, #-52]	; 0xffffffcc
   16ba8:	str	r6, [sp, #56]	; 0x38
   16bac:	bl	176d4 <__assert_fail@plt+0x5368>
   16bb0:	mov	r7, #1
   16bb4:	cmp	r0, #0
   16bb8:	beq	16dd0 <__assert_fail@plt+0x4a64>
   16bbc:	str	r9, [sp, #8]
   16bc0:	and	r7, r8, #1
   16bc4:	mov	r0, #0
   16bc8:	mov	r6, #0
   16bcc:	mov	r9, #0
   16bd0:	mov	r8, #0
   16bd4:	str	r5, [sp, #16]
   16bd8:	str	r4, [sp, #12]
   16bdc:	str	r0, [sp, #28]
   16be0:	ldr	r0, [fp, #-56]	; 0xffffffc8
   16be4:	ldr	r1, [fp, #-44]	; 0xffffffd4
   16be8:	ldr	r4, [fp, #-48]	; 0xffffffd0
   16bec:	str	r8, [sp, #24]
   16bf0:	cmp	r9, #0
   16bf4:	add	r8, r0, r1
   16bf8:	beq	16c10 <__assert_fail@plt+0x48a4>
   16bfc:	sub	r1, r8, #16
   16c00:	add	r0, sp, #56	; 0x38
   16c04:	bl	179f8 <__assert_fail@plt+0x568c>
   16c08:	cmp	r0, r7
   16c0c:	bge	16df8 <__assert_fail@plt+0x4a8c>
   16c10:	sub	r5, r8, r4, lsl #4
   16c14:	sub	sl, r8, #32
   16c18:	add	r0, sl, #16
   16c1c:	cmp	r5, r0
   16c20:	bcs	16c3c <__assert_fail@plt+0x48d0>
   16c24:	mov	r1, sl
   16c28:	bl	179f8 <__assert_fail@plt+0x568c>
   16c2c:	sub	sl, sl, #16
   16c30:	cmp	r0, r7
   16c34:	blt	16c18 <__assert_fail@plt+0x48ac>
   16c38:	b	16d10 <__assert_fail@plt+0x49a4>
   16c3c:	ldr	r8, [sp, #24]
   16c40:	ldr	r0, [sp, #28]
   16c44:	ldr	r2, [sl, #20]
   16c48:	adds	r8, r8, r4
   16c4c:	adc	r0, r0, #0
   16c50:	cmp	r9, r2
   16c54:	str	r0, [sp, #28]
   16c58:	bcs	16c80 <__assert_fail@plt+0x4914>
   16c5c:	ldr	r5, [sp, #16]
   16c60:	ldr	r4, [sp, #12]
   16c64:	mov	r1, #0
   16c68:	cmp	r1, r9, lsl #1
   16c6c:	beq	16c8c <__assert_fail@plt+0x4920>
   16c70:	lsl	r9, r9, #1
   16c74:	cmp	r9, r2
   16c78:	bcc	16c68 <__assert_fail@plt+0x48fc>
   16c7c:	b	16c90 <__assert_fail@plt+0x4924>
   16c80:	ldr	r5, [sp, #16]
   16c84:	ldr	r4, [sp, #12]
   16c88:	b	16cac <__assert_fail@plt+0x4940>
   16c8c:	mov	r9, r2
   16c90:	mov	r0, r6
   16c94:	bl	1d148 <__assert_fail@plt+0xaddc>
   16c98:	mov	r0, r9
   16c9c:	bl	22720 <__assert_fail@plt+0x103b4>
   16ca0:	str	r0, [sp, #56]	; 0x38
   16ca4:	mov	r6, r0
   16ca8:	ldr	r2, [sl, #20]
   16cac:	ldr	r1, [sl, #16]
   16cb0:	mov	r0, r6
   16cb4:	bl	11eec <memcpy@plt>
   16cb8:	ldr	r0, [sl, #20]
   16cbc:	str	r0, [sp, #60]	; 0x3c
   16cc0:	ldr	r0, [sp, #20]
   16cc4:	cmp	r0, #0
   16cc8:	beq	16cf0 <__assert_fail@plt+0x4984>
   16ccc:	ldr	r0, [sl, #16]
   16cd0:	ldr	r1, [sl, #24]
   16cd4:	sub	r1, r1, r0
   16cd8:	add	r1, r6, r1
   16cdc:	str	r1, [sp, #64]	; 0x40
   16ce0:	ldr	r1, [sl, #28]
   16ce4:	sub	r0, r1, r0
   16ce8:	add	r0, r6, r0
   16cec:	str	r0, [sp, #68]	; 0x44
   16cf0:	sub	r0, fp, #56	; 0x38
   16cf4:	mov	r1, r4
   16cf8:	mov	r2, r5
   16cfc:	bl	176d4 <__assert_fail@plt+0x5368>
   16d00:	cmp	r0, #0
   16d04:	bne	16be0 <__assert_fail@plt+0x4874>
   16d08:	mov	r7, #1
   16d0c:	b	16dd0 <__assert_fail@plt+0x4a64>
   16d10:	add	r5, sl, #32
   16d14:	ldr	r0, [sp, #8]
   16d18:	mov	r7, #0
   16d1c:	cmp	r0, #99	; 0x63
   16d20:	bne	16dc8 <__assert_fail@plt+0x4a5c>
   16d24:	movw	r4, #33488	; 0x82d0
   16d28:	movw	r1, #27542	; 0x6b96
   16d2c:	mov	r2, #5
   16d30:	movt	r4, #3
   16d34:	movt	r1, #2
   16d38:	ldr	r0, [r4]
   16d3c:	str	r0, [sp, #20]
   16d40:	mov	r0, #0
   16d44:	bl	11f7c <dcgettext@plt>
   16d48:	mov	r7, r0
   16d4c:	ldr	r0, [sp, #24]
   16d50:	ldr	r2, [sp, #28]
   16d54:	sub	sl, r5, #16
   16d58:	sub	r1, r8, sl
   16d5c:	adds	r0, r0, r1, asr #4
   16d60:	adc	r1, r2, r1, asr #31
   16d64:	movw	r2, #35024	; 0x88d0
   16d68:	movt	r2, #3
   16d6c:	ldr	r9, [r2]
   16d70:	add	r2, sp, #35	; 0x23
   16d74:	bl	1e840 <__assert_fail@plt+0xc4d4>
   16d78:	ldr	r5, [sp, #16]
   16d7c:	str	r0, [sp, #4]
   16d80:	ldr	r0, [sp, #20]
   16d84:	mov	r2, r7
   16d88:	mov	r1, #1
   16d8c:	mov	r3, r9
   16d90:	mov	r7, #0
   16d94:	str	r5, [sp]
   16d98:	bl	121f8 <__fprintf_chk@plt>
   16d9c:	movw	r1, #27564	; 0x6bac
   16da0:	ldr	r4, [r4]
   16da4:	mov	r0, #0
   16da8:	mov	r2, #5
   16dac:	movt	r1, #2
   16db0:	bl	11f7c <dcgettext@plt>
   16db4:	mov	r2, r0
   16db8:	mov	r0, sl
   16dbc:	mov	r1, r4
   16dc0:	bl	189f8 <__assert_fail@plt+0x668c>
   16dc4:	b	16dcc <__assert_fail@plt+0x4a60>
   16dc8:	ldr	r5, [sp, #16]
   16dcc:	ldr	r4, [sp, #12]
   16dd0:	mov	r0, r4
   16dd4:	mov	r1, r5
   16dd8:	bl	16a64 <__assert_fail@plt+0x46f8>
   16ddc:	ldr	r0, [fp, #-56]	; 0xffffffc8
   16de0:	bl	1d148 <__assert_fail@plt+0xaddc>
   16de4:	mov	r0, r6
   16de8:	bl	1d148 <__assert_fail@plt+0xaddc>
   16dec:	mov	r0, r7
   16df0:	sub	sp, fp, #28
   16df4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16df8:	mov	r5, r8
   16dfc:	b	16d14 <__assert_fail@plt+0x49a8>
   16e00:	movw	r1, #26727	; 0x6867
   16e04:	mov	r0, #0
   16e08:	mov	r2, #5
   16e0c:	movt	r1, #2
   16e10:	bl	11f7c <dcgettext@plt>
   16e14:	mov	r1, r5
   16e18:	bl	173f0 <__assert_fail@plt+0x5084>
   16e1c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16e20:	add	fp, sp, #28
   16e24:	sub	sp, sp, #148	; 0x94
   16e28:	mov	r9, r0
   16e2c:	movw	r0, #33272	; 0x81f8
   16e30:	mov	r7, r2
   16e34:	str	r3, [sp, #12]
   16e38:	str	r1, [sp, #32]
   16e3c:	movt	r0, #3
   16e40:	str	r9, [sp, #16]
   16e44:	ldr	r4, [r0]
   16e48:	cmp	r4, r2
   16e4c:	bcc	16e8c <__assert_fail@plt+0x4b20>
   16e50:	b	17050 <__assert_fail@plt+0x4ce4>
   16e54:	ldr	r8, [sp, #32]
   16e58:	ldr	r6, [sp, #20]
   16e5c:	add	r0, r9, r2, lsl #3
   16e60:	mov	r7, r2
   16e64:	add	r1, r9, r5, lsl #3
   16e68:	sub	r2, r6, r5
   16e6c:	lsl	r2, r2, #3
   16e70:	bl	11ea4 <memmove@plt>
   16e74:	add	r0, r7, r6
   16e78:	add	r8, r8, r7
   16e7c:	sub	r7, r0, r5
   16e80:	str	r8, [sp, #32]
   16e84:	cmp	r4, r7
   16e88:	bcs	17050 <__assert_fail@plt+0x4ce4>
   16e8c:	cmp	r4, r7
   16e90:	str	r7, [sp, #20]
   16e94:	bls	16eac <__assert_fail@plt+0x4b40>
   16e98:	movw	r6, #33272	; 0x81f8
   16e9c:	mov	r2, #0
   16ea0:	mov	r5, #0
   16ea4:	movt	r6, #3
   16ea8:	b	16f84 <__assert_fail@plt+0x4c18>
   16eac:	movw	r6, #33272	; 0x81f8
   16eb0:	mov	r5, #0
   16eb4:	mov	r2, #0
   16eb8:	movt	r6, #3
   16ebc:	b	16f38 <__assert_fail@plt+0x4bcc>
   16ec0:	ldr	r6, [sp, #32]
   16ec4:	ldr	r0, [sp, #40]	; 0x28
   16ec8:	ldr	r3, [sp, #24]
   16ecc:	add	r8, sl, #9
   16ed0:	mov	r2, r4
   16ed4:	str	r8, [sp]
   16ed8:	cmp	r6, r9
   16edc:	str	r0, [sp, #4]
   16ee0:	mov	r0, r7
   16ee4:	movcc	r9, r6
   16ee8:	mov	r1, r9
   16eec:	bl	19860 <__assert_fail@plt+0x74f4>
   16ef0:	ldr	r9, [sp, #16]
   16ef4:	ldr	r2, [sp, #28]
   16ef8:	cmp	r6, r4
   16efc:	add	r5, r4, r5
   16f00:	movcc	r4, r6
   16f04:	sub	r6, r6, r4
   16f08:	mov	r0, r9
   16f0c:	str	r8, [r0, r2, lsl #3]!
   16f10:	str	r6, [sp, #32]
   16f14:	movw	r6, #33272	; 0x81f8
   16f18:	add	r2, r2, #1
   16f1c:	movt	r6, #3
   16f20:	str	sl, [r0, #4]
   16f24:	ldr	r0, [sp, #20]
   16f28:	ldr	r4, [r6]
   16f2c:	sub	r7, r0, r5
   16f30:	cmp	r4, r7
   16f34:	bhi	16f84 <__assert_fail@plt+0x4c18>
   16f38:	sub	r0, fp, #32
   16f3c:	mov	r1, #0
   16f40:	str	r2, [sp, #28]
   16f44:	bl	1a24c <__assert_fail@plt+0x7ee0>
   16f48:	mov	sl, r0
   16f4c:	add	r7, r9, r5, lsl #3
   16f50:	ldr	r9, [r6]
   16f54:	ldr	r0, [fp, #-32]	; 0xffffffe0
   16f58:	add	r2, sp, #40	; 0x28
   16f5c:	str	r0, [sp, #24]
   16f60:	mov	r0, r7
   16f64:	mov	r1, r9
   16f68:	bl	19594 <__assert_fail@plt+0x7228>
   16f6c:	mov	r4, r0
   16f70:	cmp	r0, r9
   16f74:	bcs	16ec0 <__assert_fail@plt+0x4b54>
   16f78:	cmp	r4, #1
   16f7c:	bhi	16ec0 <__assert_fail@plt+0x4b54>
   16f80:	b	17360 <__assert_fail@plt+0x4ff4>
   16f84:	udiv	r0, r2, r4
   16f88:	mul	r0, r0, r4
   16f8c:	sub	r0, r0, r2
   16f90:	add	r8, r4, r0
   16f94:	cmp	r7, r8
   16f98:	bls	16e54 <__assert_fail@plt+0x4ae8>
   16f9c:	sub	r0, fp, #32
   16fa0:	mov	r1, #0
   16fa4:	str	r2, [sp, #28]
   16fa8:	bl	1a24c <__assert_fail@plt+0x7ee0>
   16fac:	mov	r1, r9
   16fb0:	mov	r9, r0
   16fb4:	add	r2, sp, #40	; 0x28
   16fb8:	add	r0, r1, r5, lsl #3
   16fbc:	sub	r1, r7, r8
   16fc0:	add	r7, r1, #1
   16fc4:	ldr	r1, [fp, #-32]	; 0xffffffe0
   16fc8:	str	r0, [sp, #24]
   16fcc:	str	r1, [sp, #8]
   16fd0:	mov	r1, r7
   16fd4:	bl	19594 <__assert_fail@plt+0x7228>
   16fd8:	mov	r4, r0
   16fdc:	cmp	r0, r7
   16fe0:	bcs	16fec <__assert_fail@plt+0x4c80>
   16fe4:	cmp	r4, #1
   16fe8:	bls	173b4 <__assert_fail@plt+0x5048>
   16fec:	ldr	r0, [sp, #40]	; 0x28
   16ff0:	ldr	r8, [sp, #32]
   16ff4:	ldr	r3, [sp, #8]
   16ff8:	add	sl, r9, #9
   16ffc:	mov	r2, r4
   17000:	str	sl, [sp]
   17004:	str	r0, [sp, #4]
   17008:	ldr	r0, [sp, #24]
   1700c:	cmp	r8, r7
   17010:	movcc	r7, r8
   17014:	mov	r1, r7
   17018:	bl	19860 <__assert_fail@plt+0x74f4>
   1701c:	ldr	r1, [sp, #16]
   17020:	ldr	r2, [sp, #28]
   17024:	cmp	r8, r4
   17028:	add	r5, r4, r5
   1702c:	movcc	r4, r8
   17030:	sub	r8, r8, r4
   17034:	mov	r0, r1
   17038:	str	sl, [r0, r2, lsl #3]!
   1703c:	add	r2, r2, #1
   17040:	str	r9, [r0, #4]
   17044:	mov	r9, r1
   17048:	ldr	r4, [r6]
   1704c:	b	16e58 <__assert_fail@plt+0x4aec>
   17050:	ldr	r0, [sp, #32]
   17054:	cmp	r0, r7
   17058:	bcs	17224 <__assert_fail@plt+0x4eb8>
   1705c:	ldr	r1, [sp, #32]
   17060:	ldr	r0, [sp, #16]
   17064:	add	r6, sp, #40	; 0x28
   17068:	mov	r9, #0
   1706c:	str	r7, [sp, #20]
   17070:	add	r4, r0, r1, lsl #3
   17074:	sub	sl, r7, r1
   17078:	add	r0, r6, #96	; 0x60
   1707c:	str	r0, [sp, #28]
   17080:	b	17098 <__assert_fail@plt+0x4d2c>
   17084:	ldr	r7, [sp, #20]
   17088:	mov	r6, ip
   1708c:	add	r4, r4, #8
   17090:	subs	sl, sl, #1
   17094:	beq	17224 <__assert_fail@plt+0x4eb8>
   17098:	ldr	r7, [r4]
   1709c:	movw	r1, #26862	; 0x68ee
   170a0:	movt	r1, #2
   170a4:	mov	r0, r7
   170a8:	bl	11e50 <strcmp@plt>
   170ac:	mov	r8, r0
   170b0:	ldr	r0, [sp, #12]
   170b4:	cmp	r0, #0
   170b8:	beq	17140 <__assert_fail@plt+0x4dd4>
   170bc:	ldr	r0, [sp, #12]
   170c0:	mov	r1, r7
   170c4:	bl	11e50 <strcmp@plt>
   170c8:	cmp	r8, #0
   170cc:	beq	17140 <__assert_fail@plt+0x4dd4>
   170d0:	cmp	r0, #0
   170d4:	bne	17140 <__assert_fail@plt+0x4dd4>
   170d8:	cmp	r9, #0
   170dc:	bne	17130 <__assert_fail@plt+0x4dc4>
   170e0:	add	r0, sp, #36	; 0x24
   170e4:	mov	r1, #0
   170e8:	bl	1a24c <__assert_fail@plt+0x7ee0>
   170ec:	ldr	r7, [sp, #36]	; 0x24
   170f0:	mov	r9, r0
   170f4:	mov	r0, r4
   170f8:	mov	r1, #1
   170fc:	sub	r2, fp, #32
   17100:	bl	19594 <__assert_fail@plt+0x7228>
   17104:	cmp	r0, #0
   17108:	beq	173d4 <__assert_fail@plt+0x5068>
   1710c:	mov	r2, r0
   17110:	ldr	r0, [fp, #-32]	; 0xffffffe0
   17114:	add	r1, r9, #9
   17118:	mov	r3, r7
   1711c:	str	r1, [sp]
   17120:	mov	r1, #0
   17124:	str	r0, [sp, #4]
   17128:	mov	r0, r4
   1712c:	bl	19860 <__assert_fail@plt+0x74f4>
   17130:	add	r0, r9, #9
   17134:	stm	r4, {r0, r9}
   17138:	ldr	r7, [sp, #20]
   1713c:	b	1708c <__assert_fail@plt+0x4d20>
   17140:	movw	r0, #34716	; 0x879c
   17144:	ldr	r7, [sp, #20]
   17148:	movt	r0, #3
   1714c:	ldr	r5, [r0]
   17150:	cmp	r5, #0
   17154:	bne	17190 <__assert_fail@plt+0x4e24>
   17158:	movw	r2, #34720	; 0x87a0
   1715c:	mov	r0, #3
   17160:	mov	r1, #1
   17164:	movt	r2, #3
   17168:	bl	12018 <__fxstat64@plt>
   1716c:	cmp	r0, #0
   17170:	beq	17180 <__assert_fail@plt+0x4e14>
   17174:	bl	12198 <__errno_location@plt>
   17178:	ldr	r5, [r0]
   1717c:	b	17184 <__assert_fail@plt+0x4e18>
   17180:	mvn	r5, #0
   17184:	movw	r0, #34716	; 0x879c
   17188:	movt	r0, #3
   1718c:	str	r5, [r0]
   17190:	cmn	r5, #1
   17194:	bgt	17224 <__assert_fail@plt+0x4eb8>
   17198:	cmp	r8, #0
   1719c:	beq	171bc <__assert_fail@plt+0x4e50>
   171a0:	ldr	r1, [r4]
   171a4:	mov	r0, #3
   171a8:	mov	r2, r6
   171ac:	bl	12324 <__xstat64@plt>
   171b0:	cmp	r0, #0
   171b4:	bne	1708c <__assert_fail@plt+0x4d20>
   171b8:	b	171d4 <__assert_fail@plt+0x4e68>
   171bc:	mov	r0, #3
   171c0:	mov	r1, #0
   171c4:	mov	r2, r6
   171c8:	bl	12018 <__fxstat64@plt>
   171cc:	cmp	r0, #0
   171d0:	bne	1708c <__assert_fail@plt+0x4d20>
   171d4:	movw	r0, #34720	; 0x87a0
   171d8:	ldr	r1, [sp, #28]
   171dc:	mov	ip, r6
   171e0:	movt	r0, #3
   171e4:	and	r0, r0, r5, asr #31
   171e8:	ldrd	r6, [r1]
   171ec:	ldrd	r2, [r0, #96]	; 0x60
   171f0:	eor	r1, r7, r3
   171f4:	eor	r2, r6, r2
   171f8:	orrs	r1, r2, r1
   171fc:	bne	17084 <__assert_fail@plt+0x4d18>
   17200:	ldrd	r0, [r0]
   17204:	ldr	r2, [sp, #40]	; 0x28
   17208:	ldr	r3, [sp, #44]	; 0x2c
   1720c:	mov	r6, ip
   17210:	eor	r1, r3, r1
   17214:	eor	r0, r2, r0
   17218:	orrs	r0, r0, r1
   1721c:	beq	170d8 <__assert_fail@plt+0x4d6c>
   17220:	b	17138 <__assert_fail@plt+0x4dcc>
   17224:	ldr	r6, [sp, #16]
   17228:	ldr	r9, [sp, #32]
   1722c:	sub	r8, fp, #32
   17230:	sub	r5, r6, #8
   17234:	add	r0, r6, #8
   17238:	str	r0, [sp, #28]
   1723c:	mov	r0, r6
   17240:	mov	r1, r7
   17244:	add	r2, sp, #40	; 0x28
   17248:	bl	19594 <__assert_fail@plt+0x7228>
   1724c:	mov	sl, r0
   17250:	cmp	r0, r7
   17254:	str	r7, [sp, #20]
   17258:	bne	17290 <__assert_fail@plt+0x4f24>
   1725c:	ldr	r0, [sp, #12]
   17260:	movw	r1, #27739	; 0x6c5b
   17264:	movt	r1, #2
   17268:	bl	17464 <__assert_fail@plt+0x50f8>
   1726c:	cmp	r0, #0
   17270:	bne	17334 <__assert_fail@plt+0x4fc8>
   17274:	bl	12198 <__errno_location@plt>
   17278:	cmp	r7, #3
   1727c:	bcc	1737c <__assert_fail@plt+0x5010>
   17280:	ldr	r0, [r0]
   17284:	cmp	r0, #24
   17288:	beq	17298 <__assert_fail@plt+0x4f2c>
   1728c:	b	1737c <__assert_fail@plt+0x5010>
   17290:	cmp	sl, #2
   17294:	bls	17398 <__assert_fail@plt+0x502c>
   17298:	ldr	r6, [sp, #40]	; 0x28
   1729c:	sub	r4, r6, #4
   172a0:	ldr	r1, [r5, sl, lsl #3]
   172a4:	ldr	r0, [r4, sl, lsl #2]
   172a8:	bl	16a64 <__assert_fail@plt+0x46f8>
   172ac:	sub	sl, sl, #1
   172b0:	mov	r1, #0
   172b4:	mov	r0, r8
   172b8:	cmp	sl, #2
   172bc:	movwhi	r1, #1
   172c0:	bl	1a24c <__assert_fail@plt+0x7ee0>
   172c4:	cmp	r0, #0
   172c8:	beq	172a0 <__assert_fail@plt+0x4f34>
   172cc:	add	r4, r0, #9
   172d0:	ldr	r3, [fp, #-32]	; 0xffffffe0
   172d4:	mov	r7, r0
   172d8:	cmp	r9, sl
   172dc:	mov	r0, r9
   172e0:	str	r9, [sp, #32]
   172e4:	mov	r9, sl
   172e8:	mov	r2, sl
   172ec:	stm	sp, {r4, r6}
   172f0:	ldr	r6, [sp, #16]
   172f4:	movcc	r9, r0
   172f8:	mov	r1, r9
   172fc:	mov	r0, r6
   17300:	bl	19860 <__assert_fail@plt+0x74f4>
   17304:	stm	r6, {r4, r7}
   17308:	add	r1, r6, sl, lsl #3
   1730c:	ldr	r0, [sp, #20]
   17310:	sub	r4, r0, sl
   17314:	ldr	r0, [sp, #28]
   17318:	lsl	r2, r4, #3
   1731c:	bl	11ea4 <memmove@plt>
   17320:	ldr	r0, [sp, #32]
   17324:	add	r7, r4, #1
   17328:	sub	r0, r0, r9
   1732c:	add	r9, r0, #1
   17330:	b	1723c <__assert_fail@plt+0x4ed0>
   17334:	mov	r3, r0
   17338:	ldr	r0, [sp, #40]	; 0x28
   1733c:	ldr	r1, [sp, #12]
   17340:	mov	r2, r7
   17344:	str	r1, [sp]
   17348:	str	r0, [sp, #4]
   1734c:	mov	r0, r6
   17350:	mov	r1, r9
   17354:	bl	19860 <__assert_fail@plt+0x74f4>
   17358:	sub	sp, fp, #28
   1735c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17360:	movw	r1, #26727	; 0x6867
   17364:	mov	r0, #0
   17368:	mov	r2, #5
   1736c:	movt	r1, #2
   17370:	bl	11f7c <dcgettext@plt>
   17374:	ldr	r1, [r7, r4, lsl #3]
   17378:	bl	173f0 <__assert_fail@plt+0x5084>
   1737c:	movw	r1, #26727	; 0x6867
   17380:	mov	r0, #0
   17384:	mov	r2, #5
   17388:	movt	r1, #2
   1738c:	bl	11f7c <dcgettext@plt>
   17390:	ldr	r1, [sp, #12]
   17394:	bl	173f0 <__assert_fail@plt+0x5084>
   17398:	movw	r1, #26727	; 0x6867
   1739c:	mov	r0, #0
   173a0:	mov	r2, #5
   173a4:	movt	r1, #2
   173a8:	bl	11f7c <dcgettext@plt>
   173ac:	ldr	r1, [r6, sl, lsl #3]
   173b0:	bl	173f0 <__assert_fail@plt+0x5084>
   173b4:	movw	r1, #26727	; 0x6867
   173b8:	mov	r0, #0
   173bc:	mov	r2, #5
   173c0:	movt	r1, #2
   173c4:	bl	11f7c <dcgettext@plt>
   173c8:	ldr	r1, [sp, #24]
   173cc:	ldr	r1, [r1, r4, lsl #3]
   173d0:	bl	173f0 <__assert_fail@plt+0x5084>
   173d4:	movw	r1, #26727	; 0x6867
   173d8:	mov	r0, #0
   173dc:	mov	r2, #5
   173e0:	movt	r1, #2
   173e4:	bl	11f7c <dcgettext@plt>
   173e8:	ldr	r1, [r4]
   173ec:	bl	173f0 <__assert_fail@plt+0x5084>
   173f0:	push	{fp, lr}
   173f4:	mov	fp, sp
   173f8:	sub	sp, sp, #8
   173fc:	mov	r6, r1
   17400:	mov	r4, r0
   17404:	bl	12198 <__errno_location@plt>
   17408:	ldr	r5, [r0]
   1740c:	cmp	r6, #0
   17410:	bne	1742c <__assert_fail@plt+0x50c0>
   17414:	movw	r1, #28024	; 0x6d78
   17418:	mov	r0, #0
   1741c:	mov	r2, #5
   17420:	movt	r1, #2
   17424:	bl	11f7c <dcgettext@plt>
   17428:	mov	r6, r0
   1742c:	mov	r0, #0
   17430:	mov	r1, #3
   17434:	mov	r2, r6
   17438:	bl	20b24 <__assert_fail@plt+0xe7b8>
   1743c:	movw	r2, #28017	; 0x6d71
   17440:	str	r0, [sp]
   17444:	mov	r0, #2
   17448:	mov	r1, r5
   1744c:	mov	r3, r4
   17450:	movt	r2, #2
   17454:	bl	120a8 <error@plt>
   17458:	ldr	r1, [r1]
   1745c:	ldr	r0, [r0]
   17460:	b	11e50 <strcmp@plt>
   17464:	push	{r4, r5, r6, r7, fp, lr}
   17468:	add	fp, sp, #16
   1746c:	mov	r4, r0
   17470:	ldrb	r0, [r1]
   17474:	cmp	r0, #119	; 0x77
   17478:	beq	174c4 <__assert_fail@plt+0x5158>
   1747c:	cmp	r0, #114	; 0x72
   17480:	bne	1759c <__assert_fail@plt+0x5230>
   17484:	mov	r5, r1
   17488:	movw	r1, #26862	; 0x68ee
   1748c:	mov	r0, r4
   17490:	movt	r1, #2
   17494:	bl	11e50 <strcmp@plt>
   17498:	cmp	r0, #0
   1749c:	beq	17528 <__assert_fail@plt+0x51bc>
   174a0:	mov	r0, r4
   174a4:	mov	r1, #524288	; 0x80000
   174a8:	bl	120b4 <open64@plt>
   174ac:	cmp	r0, #0
   174b0:	bmi	17548 <__assert_fail@plt+0x51dc>
   174b4:	mov	r1, r5
   174b8:	bl	11e20 <fdopen@plt>
   174bc:	mov	r4, r0
   174c0:	b	1754c <__assert_fail@plt+0x51e0>
   174c4:	cmp	r4, #0
   174c8:	beq	17588 <__assert_fail@plt+0x521c>
   174cc:	mov	r0, #1
   174d0:	mov	r2, #0
   174d4:	mov	r3, #0
   174d8:	bl	11f4c <ftruncate64@plt>
   174dc:	cmp	r0, #0
   174e0:	beq	17588 <__assert_fail@plt+0x521c>
   174e4:	bl	12198 <__errno_location@plt>
   174e8:	movw	r7, #34716	; 0x879c
   174ec:	mov	r6, r0
   174f0:	movt	r7, #3
   174f4:	ldr	r5, [r6]
   174f8:	ldr	r0, [r7]
   174fc:	cmp	r0, #0
   17500:	bne	17568 <__assert_fail@plt+0x51fc>
   17504:	movw	r2, #34720	; 0x87a0
   17508:	mov	r0, #3
   1750c:	mov	r1, #1
   17510:	movt	r2, #3
   17514:	bl	12018 <__fxstat64@plt>
   17518:	cmp	r0, #0
   1751c:	beq	17560 <__assert_fail@plt+0x51f4>
   17520:	ldr	r0, [r6]
   17524:	b	17564 <__assert_fail@plt+0x51f8>
   17528:	movw	r0, #33521	; 0x82f1
   1752c:	mov	r1, #1
   17530:	movt	r0, #3
   17534:	strb	r1, [r0]
   17538:	movw	r0, #33496	; 0x82d8
   1753c:	movt	r0, #3
   17540:	ldr	r4, [r0]
   17544:	b	1754c <__assert_fail@plt+0x51e0>
   17548:	mov	r4, #0
   1754c:	mov	r0, r4
   17550:	mov	r1, #2
   17554:	bl	1cb80 <__assert_fail@plt+0xa814>
   17558:	mov	r0, r4
   1755c:	pop	{r4, r5, r6, r7, fp, pc}
   17560:	mvn	r0, #0
   17564:	str	r0, [r7]
   17568:	cmn	r0, #1
   1756c:	bgt	175bc <__assert_fail@plt+0x5250>
   17570:	movw	r0, #34720	; 0x87a0
   17574:	movt	r0, #3
   17578:	ldr	r0, [r0, #16]
   1757c:	and	r0, r0, #61440	; 0xf000
   17580:	cmp	r0, #32768	; 0x8000
   17584:	beq	175bc <__assert_fail@plt+0x5250>
   17588:	movw	r0, #33500	; 0x82dc
   1758c:	movt	r0, #3
   17590:	ldr	r4, [r0]
   17594:	mov	r0, r4
   17598:	pop	{r4, r5, r6, r7, fp, pc}
   1759c:	movw	r0, #26760	; 0x6888
   175a0:	movw	r1, #24783	; 0x60cf
   175a4:	movw	r3, #26801	; 0x68b1
   175a8:	movw	r2, #981	; 0x3d5
   175ac:	movt	r0, #2
   175b0:	movt	r1, #2
   175b4:	movt	r3, #2
   175b8:	bl	1236c <__assert_fail@plt>
   175bc:	movw	r1, #26739	; 0x6873
   175c0:	mov	r0, #0
   175c4:	mov	r2, #5
   175c8:	movt	r1, #2
   175cc:	bl	11f7c <dcgettext@plt>
   175d0:	mov	r6, r0
   175d4:	mov	r0, #0
   175d8:	mov	r1, #3
   175dc:	mov	r2, r4
   175e0:	bl	20b24 <__assert_fail@plt+0xe7b8>
   175e4:	mov	r3, r0
   175e8:	mov	r0, #2
   175ec:	mov	r1, r5
   175f0:	mov	r2, r6
   175f4:	bl	120a8 <error@plt>
   175f8:	ldrb	r2, [r0, #24]
   175fc:	cmp	r2, #0
   17600:	bne	17610 <__assert_fail@plt+0x52a4>
   17604:	ldrb	r2, [r0, #25]
   17608:	cmp	r2, #0
   1760c:	beq	17618 <__assert_fail@plt+0x52ac>
   17610:	mov	r2, #98	; 0x62
   17614:	strb	r2, [r1], #1
   17618:	ldr	r2, [r0, #16]
   1761c:	movw	r3, #34192	; 0x8590
   17620:	movt	r3, #3
   17624:	cmp	r2, r3
   17628:	movw	r3, #33936	; 0x8490
   1762c:	moveq	r2, #100	; 0x64
   17630:	movt	r3, #3
   17634:	strbeq	r2, [r1], #1
   17638:	ldr	r2, [r0, #20]
   1763c:	cmp	r2, #0
   17640:	movne	r2, #102	; 0x66
   17644:	strbne	r2, [r1], #1
   17648:	ldrb	r2, [r0, #28]
   1764c:	cmp	r2, #0
   17650:	movne	r2, #103	; 0x67
   17654:	strbne	r2, [r1], #1
   17658:	ldrb	r2, [r0, #29]
   1765c:	cmp	r2, #0
   17660:	movne	r2, #104	; 0x68
   17664:	strbne	r2, [r1], #1
   17668:	ldr	r2, [r0, #16]
   1766c:	cmp	r2, r3
   17670:	moveq	r2, #105	; 0x69
   17674:	strbeq	r2, [r1], #1
   17678:	ldrb	r2, [r0, #30]
   1767c:	cmp	r2, #0
   17680:	movne	r2, #77	; 0x4d
   17684:	strbne	r2, [r1], #1
   17688:	ldrb	r2, [r0, #26]
   1768c:	cmp	r2, #0
   17690:	movne	r2, #110	; 0x6e
   17694:	strbne	r2, [r1], #1
   17698:	ldrb	r2, [r0, #27]
   1769c:	cmp	r2, #0
   176a0:	movne	r2, #82	; 0x52
   176a4:	strbne	r2, [r1], #1
   176a8:	ldrb	r2, [r0, #31]
   176ac:	cmp	r2, #0
   176b0:	movne	r2, #114	; 0x72
   176b4:	strbne	r2, [r1], #1
   176b8:	ldrb	r0, [r0, #32]
   176bc:	cmp	r0, #0
   176c0:	movne	r0, #86	; 0x56
   176c4:	strbne	r0, [r1], #1
   176c8:	mov	r0, #0
   176cc:	strb	r0, [r1]
   176d0:	bx	lr
   176d4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   176d8:	add	fp, sp, #28
   176dc:	sub	sp, sp, #36	; 0x24
   176e0:	mov	r8, r0
   176e4:	movw	r0, #33663	; 0x837f
   176e8:	mov	r6, #10
   176ec:	movt	r0, #3
   176f0:	ldrb	r3, [r8, #24]
   176f4:	ldrb	r0, [r0]
   176f8:	cmp	r0, #0
   176fc:	mov	r0, #0
   17700:	movwne	r6, #0
   17704:	cmp	r3, #0
   17708:	beq	17714 <__assert_fail@plt+0x53a8>
   1770c:	sub	sp, fp, #28
   17710:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17714:	ldr	r0, [r8, #20]
   17718:	str	r2, [sp, #4]
   1771c:	ldr	r2, [r8, #16]
   17720:	ldr	ip, [r8, #4]
   17724:	str	r1, [sp, #16]
   17728:	str	r0, [sp, #20]
   1772c:	movw	r0, #33664	; 0x8380
   17730:	cmp	ip, r2
   17734:	movt	r0, #3
   17738:	ldr	r4, [r0]
   1773c:	movw	r0, #33376	; 0x8260
   17740:	movt	r0, #3
   17744:	ldr	r5, [r0]
   17748:	beq	1776c <__assert_fail@plt+0x5400>
   1774c:	ldr	r0, [r8]
   17750:	add	r1, r0, ip
   17754:	sub	r1, r1, r2
   17758:	bl	11ea4 <memmove@plt>
   1775c:	ldr	ip, [r8, #16]
   17760:	mov	r0, #0
   17764:	str	ip, [r8, #4]
   17768:	str	r0, [r8, #8]
   1776c:	ldr	r0, [sp, #20]
   17770:	str	r6, [sp, #24]
   17774:	ldr	sl, [r8]
   17778:	sub	r5, r5, #18
   1777c:	str	r8, [sp, #12]
   17780:	add	r6, r0, #1
   17784:	ldr	r0, [r8, #12]
   17788:	str	r6, [sp, #8]
   1778c:	add	r3, sl, r0
   17790:	ldr	r2, [r8, #8]
   17794:	ldr	r0, [sp, #20]
   17798:	mls	r7, r0, r2, r3
   1779c:	add	r0, sl, ip
   177a0:	cmp	r2, #0
   177a4:	beq	177bc <__assert_fail@plt+0x5450>
   177a8:	rsb	ip, r2, #0
   177ac:	mov	r1, r3
   177b0:	ldr	ip, [r1, ip, lsl #4]!
   177b4:	ldr	r1, [r1, #4]
   177b8:	add	sl, ip, r1
   177bc:	sub	r9, r3, r2, lsl #4
   177c0:	sub	r7, r7, r0
   177c4:	cmp	r6, r7
   177c8:	bcc	177f4 <__assert_fail@plt+0x5488>
   177cc:	b	17954 <__assert_fail@plt+0x55e8>
   177d0:	ldr	r8, [sp, #12]
   177d4:	ldr	r2, [sp, #28]
   177d8:	ldr	r6, [sp, #8]
   177dc:	ldrb	r0, [r8, #24]
   177e0:	cmp	r0, #0
   177e4:	mov	r0, r2
   177e8:	bne	17958 <__assert_fail@plt+0x55ec>
   177ec:	cmp	r6, r7
   177f0:	bcs	17954 <__assert_fail@plt+0x55e8>
   177f4:	sub	r1, r7, #1
   177f8:	ldr	r3, [sp, #16]
   177fc:	mov	r8, r0
   17800:	udiv	r6, r1, r6
   17804:	mov	r1, #1
   17808:	mov	r2, r6
   1780c:	bl	1230c <fread_unlocked@plt>
   17810:	add	ip, r8, r0
   17814:	cmp	r0, r6
   17818:	bne	17824 <__assert_fail@plt+0x54b8>
   1781c:	ldr	r1, [sp, #24]
   17820:	b	17870 <__assert_fail@plt+0x5504>
   17824:	ldr	r1, [sp, #16]
   17828:	ldr	r2, [r1]
   1782c:	ldr	r1, [sp, #24]
   17830:	tst	r2, #32
   17834:	bne	179dc <__assert_fail@plt+0x5670>
   17838:	ldr	r6, [sp, #12]
   1783c:	tst	r2, #16
   17840:	beq	17870 <__assert_fail@plt+0x5504>
   17844:	mov	r2, #1
   17848:	strb	r2, [r6, #24]
   1784c:	ldr	r2, [r6]
   17850:	cmp	r2, ip
   17854:	beq	179ac <__assert_fail@plt+0x5640>
   17858:	cmp	sl, ip
   1785c:	mov	r2, sl
   17860:	beq	17874 <__assert_fail@plt+0x5508>
   17864:	ldrb	r2, [ip, #-1]
   17868:	cmp	r2, r1
   1786c:	strbne	r1, [ip], #1
   17870:	mov	r2, ip
   17874:	sub	r7, r7, r0
   17878:	str	r2, [sp, #28]
   1787c:	sub	r2, r2, r8
   17880:	mov	r0, r8
   17884:	bl	12204 <memchr@plt>
   17888:	cmp	r0, #0
   1788c:	beq	177d0 <__assert_fail@plt+0x5464>
   17890:	mov	r6, sl
   17894:	mov	r8, r9
   17898:	b	178dc <__assert_fail@plt+0x5570>
   1789c:	mov	r0, r9
   178a0:	mov	r1, r4
   178a4:	bl	19338 <__assert_fail@plt+0x6fcc>
   178a8:	mov	r6, r0
   178ac:	str	r6, [r8, #-8]
   178b0:	ldr	r0, [sp, #20]
   178b4:	ldr	r1, [sp, #24]
   178b8:	sub	r7, r7, r0
   178bc:	ldr	r0, [sp, #28]
   178c0:	sub	r2, r0, sl
   178c4:	mov	r0, sl
   178c8:	bl	12204 <memchr@plt>
   178cc:	cmp	r0, #0
   178d0:	mov	r6, sl
   178d4:	mov	r8, r9
   178d8:	beq	177d0 <__assert_fail@plt+0x5464>
   178dc:	mov	sl, r0
   178e0:	mov	r1, #0
   178e4:	strb	r1, [sl], #1
   178e8:	str	r6, [r9, #-16]!
   178ec:	sub	r1, sl, r6
   178f0:	cmp	r5, r1
   178f4:	str	r1, [r9, #4]
   178f8:	movls	r5, r1
   178fc:	cmp	r4, #0
   17900:	beq	178b0 <__assert_fail@plt+0x5544>
   17904:	ldr	r1, [r4, #8]
   17908:	cmn	r1, #1
   1790c:	movne	r0, r9
   17910:	movne	r1, r4
   17914:	blne	191d4 <__assert_fail@plt+0x6e68>
   17918:	str	r0, [r8, #-4]
   1791c:	ldr	r0, [r4]
   17920:	cmn	r0, #1
   17924:	bne	1789c <__assert_fail@plt+0x5530>
   17928:	ldrb	r0, [r4, #24]
   1792c:	cmp	r0, #0
   17930:	beq	178ac <__assert_fail@plt+0x5540>
   17934:	movw	r1, #33680	; 0x8390
   17938:	sub	r6, r6, #1
   1793c:	movt	r1, #3
   17940:	ldrb	r0, [r6, #1]!
   17944:	ldrb	r0, [r1, r0]
   17948:	cmp	r0, #0
   1794c:	bne	17940 <__assert_fail@plt+0x55d4>
   17950:	b	178ac <__assert_fail@plt+0x5540>
   17954:	mov	r2, r0
   17958:	ldr	r0, [r8]
   1795c:	ldr	r1, [r8, #12]
   17960:	add	r3, r0, r1
   17964:	sub	r7, r2, r0
   17968:	subs	r3, r3, r9
   1796c:	str	r7, [r8, #4]
   17970:	asr	r3, r3, #4
   17974:	str	r3, [r8, #8]
   17978:	bne	179b8 <__assert_fail@plt+0x564c>
   1797c:	lsr	r1, r1, #4
   17980:	mov	r2, #16
   17984:	str	r1, [sp, #32]
   17988:	add	r1, sp, #32
   1798c:	bl	228cc <__assert_fail@plt+0x10560>
   17990:	str	r0, [r8]
   17994:	mov	sl, r0
   17998:	ldr	r0, [sp, #32]
   1799c:	lsl	r0, r0, #4
   179a0:	str	r0, [r8, #12]
   179a4:	ldr	ip, [r8, #4]
   179a8:	b	1778c <__assert_fail@plt+0x5420>
   179ac:	mov	r0, #0
   179b0:	sub	sp, fp, #28
   179b4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   179b8:	movw	r1, #33376	; 0x8260
   179bc:	sub	r0, r2, sl
   179c0:	movt	r1, #3
   179c4:	str	r0, [r8, #16]
   179c8:	add	r0, r5, #18
   179cc:	str	r0, [r1]
   179d0:	mov	r0, #1
   179d4:	sub	sp, fp, #28
   179d8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   179dc:	movw	r1, #27579	; 0x6bbb
   179e0:	mov	r0, #0
   179e4:	mov	r2, #5
   179e8:	movt	r1, #2
   179ec:	bl	11f7c <dcgettext@plt>
   179f0:	ldr	r1, [sp, #4]
   179f4:	bl	173f0 <__assert_fail@plt+0x5084>
   179f8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   179fc:	add	fp, sp, #28
   17a00:	sub	sp, sp, #4
   17a04:	vpush	{d8}
   17a08:	sub	sp, sp, #8448	; 0x2100
   17a0c:	mov	r9, r0
   17a10:	movw	r0, #33664	; 0x8380
   17a14:	mov	r8, r1
   17a18:	movt	r0, #3
   17a1c:	ldr	ip, [r0]
   17a20:	cmp	ip, #0
   17a24:	beq	18940 <__assert_fail@plt+0x65d4>
   17a28:	add	lr, sp, #3072	; 0xc00
   17a2c:	ldr	sl, [r8, #8]
   17a30:	ldr	r7, [r9, #8]
   17a34:	ldr	r6, [r9, #12]
   17a38:	str	r9, [sp, #64]	; 0x40
   17a3c:	str	r8, [sp, #60]	; 0x3c
   17a40:	add	r0, lr, #1016	; 0x3f8
   17a44:	sub	lr, fp, #3072	; 0xc00
   17a48:	sub	r1, lr, #1016	; 0x3f8
   17a4c:	ldr	lr, [r8, #12]
   17a50:	add	r0, r0, #156	; 0x9c
   17a54:	add	r1, r1, #16
   17a58:	str	r0, [sp, #24]
   17a5c:	str	r1, [sp, #4]
   17a60:	b	17a9c <__assert_fail@plt+0x5730>
   17a64:	mov	r0, r9
   17a68:	mov	r1, ip
   17a6c:	mov	r5, r6
   17a70:	mov	r4, ip
   17a74:	mov	r6, lr
   17a78:	bl	19338 <__assert_fail@plt+0x6fcc>
   17a7c:	mov	r7, r0
   17a80:	mov	r0, r8
   17a84:	mov	r1, r4
   17a88:	bl	19338 <__assert_fail@plt+0x6fcc>
   17a8c:	mov	lr, r6
   17a90:	mov	r6, r5
   17a94:	mov	ip, r4
   17a98:	mov	sl, r0
   17a9c:	movw	r0, #33512	; 0x82e8
   17aa0:	cmp	sl, lr
   17aa4:	ldr	r9, [ip, #16]
   17aa8:	ldr	r8, [ip, #20]
   17aac:	str	ip, [sp, #84]	; 0x54
   17ab0:	movt	r0, #3
   17ab4:	movhi	lr, sl
   17ab8:	cmp	r7, r6
   17abc:	movhi	r6, r7
   17ac0:	sub	r5, lr, sl
   17ac4:	ldrb	r0, [r0]
   17ac8:	sub	r4, r6, r7
   17acc:	cmp	r0, #0
   17ad0:	bne	17b1c <__assert_fail@plt+0x57b0>
   17ad4:	ldrb	r0, [ip, #26]
   17ad8:	cmp	r0, #0
   17adc:	bne	17b1c <__assert_fail@plt+0x57b0>
   17ae0:	ldrb	r0, [ip, #28]
   17ae4:	cmp	r0, #0
   17ae8:	bne	17b1c <__assert_fail@plt+0x57b0>
   17aec:	ldrb	r0, [ip, #29]
   17af0:	cmp	r0, #0
   17af4:	bne	17b1c <__assert_fail@plt+0x57b0>
   17af8:	ldrb	r0, [ip, #30]
   17afc:	cmp	r0, #0
   17b00:	bne	17b1c <__assert_fail@plt+0x57b0>
   17b04:	ldrb	r0, [ip, #27]
   17b08:	cmp	r0, #0
   17b0c:	bne	17b1c <__assert_fail@plt+0x57b0>
   17b10:	ldrb	r0, [ip, #32]
   17b14:	cmp	r0, #0
   17b18:	beq	18704 <__assert_fail@plt+0x6398>
   17b1c:	orrs	r0, r8, r9
   17b20:	movwne	r0, #1
   17b24:	str	r0, [sp, #76]	; 0x4c
   17b28:	beq	17bb8 <__assert_fail@plt+0x584c>
   17b2c:	add	r0, r5, r4
   17b30:	mov	r1, #0
   17b34:	mov	r6, #0
   17b38:	add	r2, sp, #88	; 0x58
   17b3c:	add	r0, r0, #2
   17b40:	str	r1, [sp, #68]	; 0x44
   17b44:	cmp	r0, #4000	; 0xfa0
   17b48:	bls	17b5c <__assert_fail@plt+0x57f0>
   17b4c:	bl	22720 <__assert_fail@plt+0x103b4>
   17b50:	ldr	ip, [sp, #84]	; 0x54
   17b54:	mov	r2, r0
   17b58:	str	r0, [sp, #68]	; 0x44
   17b5c:	add	r0, r2, r4
   17b60:	cmp	r4, #0
   17b64:	beq	17bec <__assert_fail@plt+0x5880>
   17b68:	mov	r6, #0
   17b6c:	cmp	r9, #0
   17b70:	bne	17ba4 <__assert_fail@plt+0x5838>
   17b74:	cmp	r8, #0
   17b78:	mov	r1, r7
   17b7c:	ldrbne	r1, [r7]
   17b80:	addne	r1, r8, r1
   17b84:	ldrb	r1, [r1]
   17b88:	strb	r1, [r2, r6]
   17b8c:	add	r6, r6, #1
   17b90:	subs	r4, r4, #1
   17b94:	add	r7, r7, #1
   17b98:	beq	17bec <__assert_fail@plt+0x5880>
   17b9c:	cmp	r9, #0
   17ba0:	beq	17b74 <__assert_fail@plt+0x5808>
   17ba4:	ldrb	r1, [r7]
   17ba8:	ldrb	r1, [r9, r1]
   17bac:	cmp	r1, #0
   17bb0:	bne	17b90 <__assert_fail@plt+0x5824>
   17bb4:	b	17b74 <__assert_fail@plt+0x5808>
   17bb8:	ldrb	r0, [r6]
   17bbc:	movw	r3, #33680	; 0x8390
   17bc0:	mov	r2, r7
   17bc4:	str	r4, [sp, #80]	; 0x50
   17bc8:	mov	r7, sl
   17bcc:	mov	r4, r5
   17bd0:	movt	r3, #3
   17bd4:	str	r0, [sp, #52]	; 0x34
   17bd8:	mov	r0, #0
   17bdc:	strb	r0, [r6]
   17be0:	ldrb	r1, [lr]
   17be4:	str	r1, [sp, #48]	; 0x30
   17be8:	b	17c64 <__assert_fail@plt+0x58f8>
   17bec:	movw	r3, #33680	; 0x8390
   17bf0:	mov	r4, #0
   17bf4:	add	r7, r0, #1
   17bf8:	cmp	r5, #0
   17bfc:	movt	r3, #3
   17c00:	strb	r4, [r2, r6]
   17c04:	beq	17c58 <__assert_fail@plt+0x58ec>
   17c08:	mov	r4, #0
   17c0c:	cmp	r9, #0
   17c10:	bne	17c44 <__assert_fail@plt+0x58d8>
   17c14:	cmp	r8, #0
   17c18:	mov	r0, sl
   17c1c:	ldrbne	r0, [sl]
   17c20:	addne	r0, r8, r0
   17c24:	ldrb	r0, [r0]
   17c28:	strb	r0, [r7, r4]
   17c2c:	add	r4, r4, #1
   17c30:	subs	r5, r5, #1
   17c34:	add	sl, sl, #1
   17c38:	beq	17c58 <__assert_fail@plt+0x58ec>
   17c3c:	cmp	r9, #0
   17c40:	beq	17c14 <__assert_fail@plt+0x58a8>
   17c44:	ldrb	r0, [sl]
   17c48:	ldrb	r0, [r9, r0]
   17c4c:	cmp	r0, #0
   17c50:	bne	17c30 <__assert_fail@plt+0x58c4>
   17c54:	b	17c14 <__assert_fail@plt+0x58a8>
   17c58:	str	r6, [sp, #80]	; 0x50
   17c5c:	add	lr, r7, r4
   17c60:	mov	r0, #0
   17c64:	strb	r0, [lr]
   17c68:	str	r2, [sp, #72]	; 0x48
   17c6c:	ldrb	r0, [ip, #26]
   17c70:	cmp	r0, #0
   17c74:	beq	17ce4 <__assert_fail@plt+0x5978>
   17c78:	ldr	r8, [sp, #80]	; 0x50
   17c7c:	sub	r0, r2, #1
   17c80:	ldrb	r1, [r0, #1]!
   17c84:	ldrb	r1, [r3, r1]
   17c88:	cmp	r1, #0
   17c8c:	bne	17c80 <__assert_fail@plt+0x5914>
   17c90:	ldr	r5, [sp, #76]	; 0x4c
   17c94:	sub	r1, r7, #1
   17c98:	ldrb	r2, [r1, #1]!
   17c9c:	ldrb	r2, [r3, r2]
   17ca0:	cmp	r2, #0
   17ca4:	bne	17c98 <__assert_fail@plt+0x592c>
   17ca8:	movw	r2, #33516	; 0x82ec
   17cac:	movt	r2, #3
   17cb0:	ldr	r3, [r2]
   17cb4:	movw	r2, #33514	; 0x82ea
   17cb8:	movt	r2, #3
   17cbc:	ldrb	r2, [r2]
   17cc0:	bl	21b68 <__assert_fail@plt+0xf7fc>
   17cc4:	mov	r3, r0
   17cc8:	cmp	r5, #0
   17ccc:	beq	17e28 <__assert_fail@plt+0x5abc>
   17cd0:	ldr	r0, [sp, #68]	; 0x44
   17cd4:	mov	r4, r3
   17cd8:	bl	1d148 <__assert_fail@plt+0xaddc>
   17cdc:	mov	r3, r4
   17ce0:	b	17e3c <__assert_fail@plt+0x5ad0>
   17ce4:	ldrb	r0, [ip, #28]
   17ce8:	ldr	r8, [sp, #80]	; 0x50
   17cec:	cmp	r0, #0
   17cf0:	beq	17d5c <__assert_fail@plt+0x59f0>
   17cf4:	sub	lr, fp, #3072	; 0xc00
   17cf8:	mov	r0, r2
   17cfc:	sub	r1, lr, #1016	; 0x3f8
   17d00:	bl	11f40 <strtold@plt>
   17d04:	mov	r0, r7
   17d08:	sub	r1, fp, #52	; 0x34
   17d0c:	vmov.f64	d8, d0
   17d10:	bl	11f40 <strtold@plt>
   17d14:	add	lr, sp, #3072	; 0xc00
   17d18:	ldr	r2, [sp, #72]	; 0x48
   17d1c:	ldr	r0, [fp, #-52]	; 0xffffffcc
   17d20:	add	r1, lr, #1016	; 0x3f8
   17d24:	ldr	r1, [r1, #312]	; 0x138
   17d28:	cmp	r1, r2
   17d2c:	beq	17e14 <__assert_fail@plt+0x5aa8>
   17d30:	ldr	r5, [sp, #76]	; 0x4c
   17d34:	mov	r3, #1
   17d38:	cmp	r0, r7
   17d3c:	beq	17cc8 <__assert_fail@plt+0x595c>
   17d40:	vcmpe.f64	d8, d0
   17d44:	vmrs	APSR_nzcv, fpscr
   17d48:	bpl	17fe0 <__assert_fail@plt+0x5c74>
   17d4c:	mvn	r3, #0
   17d50:	cmp	r5, #0
   17d54:	bne	17cd0 <__assert_fail@plt+0x5964>
   17d58:	b	17e28 <__assert_fail@plt+0x5abc>
   17d5c:	ldrb	r0, [ip, #29]
   17d60:	cmp	r0, #0
   17d64:	beq	17f30 <__assert_fail@plt+0x5bc4>
   17d68:	sub	r0, r2, #1
   17d6c:	ldrb	r8, [r0, #1]!
   17d70:	ldrb	r1, [r3, r8]
   17d74:	cmp	r1, #0
   17d78:	bne	17d6c <__assert_fail@plt+0x5a00>
   17d7c:	sub	r1, r7, #1
   17d80:	str	r4, [sp, #12]
   17d84:	ldrb	lr, [r1, #1]!
   17d88:	ldrb	r2, [r3, lr]
   17d8c:	cmp	r2, #0
   17d90:	bne	17d84 <__assert_fail@plt+0x5a18>
   17d94:	cmp	r8, #45	; 0x2d
   17d98:	mov	r9, r0
   17d9c:	str	r7, [sp, #8]
   17da0:	addeq	r9, r9, #1
   17da4:	mov	r4, r9
   17da8:	ldrb	r5, [r4], #1
   17dac:	sub	r2, r5, #48	; 0x30
   17db0:	cmp	r2, #9
   17db4:	bhi	18064 <__assert_fail@plt+0x5cf8>
   17db8:	movw	r2, #33516	; 0x82ec
   17dbc:	mov	sl, #0
   17dc0:	movt	r2, #3
   17dc4:	ldr	ip, [r2]
   17dc8:	mov	r2, r4
   17dcc:	uxtb	r3, r5
   17dd0:	uxtb	r4, sl
   17dd4:	mov	r7, r2
   17dd8:	cmp	r4, r3
   17ddc:	ldrb	r3, [r2]
   17de0:	movcc	sl, r5
   17de4:	cmp	ip, r3
   17de8:	addeq	r7, r9, #2
   17dec:	mov	r4, r7
   17df0:	mov	r9, r7
   17df4:	ldrb	r5, [r4], #1
   17df8:	sub	r6, r5, #48	; 0x30
   17dfc:	cmp	r6, #10
   17e00:	bcc	17dc8 <__assert_fail@plt+0x5a5c>
   17e04:	cmp	ip, r3
   17e08:	bne	1814c <__assert_fail@plt+0x5de0>
   17e0c:	sub	r4, r7, #1
   17e10:	b	1819c <__assert_fail@plt+0x5e30>
   17e14:	ldr	r5, [sp, #76]	; 0x4c
   17e18:	subs	r3, r0, r7
   17e1c:	mvnne	r3, #0
   17e20:	cmp	r5, #0
   17e24:	bne	17cd0 <__assert_fail@plt+0x5964>
   17e28:	ldr	r0, [sp, #52]	; 0x34
   17e2c:	ldr	r1, [sp, #72]	; 0x48
   17e30:	strb	r0, [r1, r8]
   17e34:	ldr	r0, [sp, #48]	; 0x30
   17e38:	strb	r0, [r7, r4]
   17e3c:	ldr	ip, [sp, #84]	; 0x54
   17e40:	cmp	r3, #0
   17e44:	bne	188f8 <__assert_fail@plt+0x658c>
   17e48:	ldr	ip, [ip, #36]	; 0x24
   17e4c:	ldr	r9, [sp, #64]	; 0x40
   17e50:	ldr	r8, [sp, #60]	; 0x3c
   17e54:	cmp	ip, #0
   17e58:	beq	18914 <__assert_fail@plt+0x65a8>
   17e5c:	ldr	r0, [ip, #8]
   17e60:	cmn	r0, #1
   17e64:	beq	17e94 <__assert_fail@plt+0x5b28>
   17e68:	mov	r0, r9
   17e6c:	mov	r1, ip
   17e70:	mov	r4, ip
   17e74:	bl	191d4 <__assert_fail@plt+0x6e68>
   17e78:	mov	r6, r0
   17e7c:	mov	r0, r8
   17e80:	mov	r1, r4
   17e84:	bl	191d4 <__assert_fail@plt+0x6e68>
   17e88:	mov	ip, r4
   17e8c:	mov	lr, r0
   17e90:	b	17eac <__assert_fail@plt+0x5b40>
   17e94:	ldm	r8, {r0, r1}
   17e98:	add	r0, r0, r1
   17e9c:	sub	lr, r0, #1
   17ea0:	ldm	r9, {r0, r1}
   17ea4:	add	r0, r0, r1
   17ea8:	sub	r6, r0, #1
   17eac:	ldr	r0, [ip]
   17eb0:	cmn	r0, #1
   17eb4:	bne	17a64 <__assert_fail@plt+0x56f8>
   17eb8:	ldrb	r0, [ip, #24]
   17ebc:	ldr	sl, [r8]
   17ec0:	ldr	r7, [r9]
   17ec4:	cmp	r0, #0
   17ec8:	beq	17a9c <__assert_fail@plt+0x5730>
   17ecc:	cmp	r7, r6
   17ed0:	bcs	17efc <__assert_fail@plt+0x5b90>
   17ed4:	movw	r1, #33680	; 0x8390
   17ed8:	movt	r1, #3
   17edc:	ldrb	r0, [r7]
   17ee0:	ldrb	r0, [r1, r0]
   17ee4:	cmp	r0, #0
   17ee8:	beq	17efc <__assert_fail@plt+0x5b90>
   17eec:	add	r7, r7, #1
   17ef0:	cmp	r6, r7
   17ef4:	bne	17edc <__assert_fail@plt+0x5b70>
   17ef8:	mov	r7, r6
   17efc:	cmp	sl, lr
   17f00:	bcs	17a9c <__assert_fail@plt+0x5730>
   17f04:	movw	r1, #33680	; 0x8390
   17f08:	movt	r1, #3
   17f0c:	ldrb	r0, [sl]
   17f10:	ldrb	r0, [r1, r0]
   17f14:	cmp	r0, #0
   17f18:	beq	17a9c <__assert_fail@plt+0x5730>
   17f1c:	add	sl, sl, #1
   17f20:	cmp	lr, sl
   17f24:	bne	17f0c <__assert_fail@plt+0x5ba0>
   17f28:	mov	sl, lr
   17f2c:	b	17a9c <__assert_fail@plt+0x5730>
   17f30:	ldrb	r0, [ip, #30]
   17f34:	cmp	r0, #0
   17f38:	beq	182e0 <__assert_fail@plt+0x5f74>
   17f3c:	mov	r9, r7
   17f40:	sub	r0, r2, #1
   17f44:	ldrb	r1, [r0, #1]!
   17f48:	ldrb	r1, [r3, r1]
   17f4c:	cmp	r1, #0
   17f50:	bne	17f44 <__assert_fail@plt+0x5bd8>
   17f54:	mov	sl, r4
   17f58:	mov	r2, #12
   17f5c:	mov	ip, #0
   17f60:	movw	r7, #33280	; 0x8200
   17f64:	add	r3, r2, ip
   17f68:	movt	r7, #3
   17f6c:	lsr	r3, r3, #1
   17f70:	ldr	r7, [r7, r3, lsl #3]
   17f74:	ldrb	r5, [r7]
   17f78:	cmp	r5, #0
   17f7c:	beq	1806c <__assert_fail@plt+0x5d00>
   17f80:	add	r7, r7, #1
   17f84:	mov	r6, #0
   17f88:	ldrb	r4, [r0, r6]
   17f8c:	movw	r1, #34448	; 0x8690
   17f90:	uxtb	r5, r5
   17f94:	movt	r1, #3
   17f98:	ldrb	r4, [r1, r4]
   17f9c:	cmp	r4, r5
   17fa0:	bcc	17fbc <__assert_fail@plt+0x5c50>
   17fa4:	bhi	17fcc <__assert_fail@plt+0x5c60>
   17fa8:	ldrb	r5, [r7, r6]
   17fac:	add	r6, r6, #1
   17fb0:	cmp	r5, #0
   17fb4:	bne	17f88 <__assert_fail@plt+0x5c1c>
   17fb8:	b	1806c <__assert_fail@plt+0x5d00>
   17fbc:	mov	r2, r3
   17fc0:	cmp	ip, r2
   17fc4:	bcc	17f60 <__assert_fail@plt+0x5bf4>
   17fc8:	b	17fd8 <__assert_fail@plt+0x5c6c>
   17fcc:	add	ip, r3, #1
   17fd0:	cmp	ip, r2
   17fd4:	bcc	17f60 <__assert_fail@plt+0x5bf4>
   17fd8:	mov	ip, #0
   17fdc:	b	1807c <__assert_fail@plt+0x5d10>
   17fe0:	vcmpe.f64	d8, d0
   17fe4:	vmrs	APSR_nzcv, fpscr
   17fe8:	bgt	17cc8 <__assert_fail@plt+0x595c>
   17fec:	vcmp.f64	d8, d0
   17ff0:	mov	r3, #0
   17ff4:	vmrs	APSR_nzcv, fpscr
   17ff8:	beq	17cc8 <__assert_fail@plt+0x595c>
   17ffc:	vcmpe.f64	d0, d0
   18000:	mvn	r3, #0
   18004:	vmrs	APSR_nzcv, fpscr
   18008:	bvc	17cc8 <__assert_fail@plt+0x595c>
   1800c:	vcmpe.f64	d8, d8
   18010:	mov	r3, #1
   18014:	vmrs	APSR_nzcv, fpscr
   18018:	bvc	17cc8 <__assert_fail@plt+0x595c>
   1801c:	ldr	r0, [sp, #72]	; 0x48
   18020:	mov	r1, #0
   18024:	bl	11f40 <strtold@plt>
   18028:	add	lr, sp, #3072	; 0xc00
   1802c:	mov	r6, r4
   18030:	mov	r0, r7
   18034:	mov	r1, #0
   18038:	add	r4, lr, #1016	; 0x3f8
   1803c:	vstr	d0, [r4, #344]	; 0x158
   18040:	bl	11f40 <strtold@plt>
   18044:	sub	lr, fp, #3072	; 0xc00
   18048:	mov	r1, r4
   1804c:	mov	r2, #8
   18050:	vstr	d0, [r4]
   18054:	mov	r4, r6
   18058:	sub	r0, lr, #984	; 0x3d8
   1805c:	bl	11f64 <memcmp@plt>
   18060:	b	17cc4 <__assert_fail@plt+0x5958>
   18064:	mov	sl, #0
   18068:	b	18150 <__assert_fail@plt+0x5de4>
   1806c:	movw	r0, #33280	; 0x8200
   18070:	movt	r0, #3
   18074:	add	r0, r0, r3, lsl #3
   18078:	ldr	ip, [r0, #4]
   1807c:	movw	r0, #33680	; 0x8390
   18080:	sub	r1, r9, #1
   18084:	movt	r0, #3
   18088:	ldrb	r2, [r1, #1]!
   1808c:	ldrb	r2, [r0, r2]
   18090:	cmp	r2, #0
   18094:	bne	18088 <__assert_fail@plt+0x5d1c>
   18098:	mov	r7, #12
   1809c:	mov	lr, #0
   180a0:	movw	r0, #33280	; 0x8200
   180a4:	add	r3, r7, lr
   180a8:	movt	r0, #3
   180ac:	lsr	r3, r3, #1
   180b0:	ldr	r6, [r0, r3, lsl #3]
   180b4:	ldrb	r4, [r6]
   180b8:	cmp	r4, #0
   180bc:	beq	18120 <__assert_fail@plt+0x5db4>
   180c0:	add	r6, r6, #1
   180c4:	mov	r5, #0
   180c8:	ldrb	r0, [r1, r5]
   180cc:	movw	r2, #34448	; 0x8690
   180d0:	uxtb	r4, r4
   180d4:	movt	r2, #3
   180d8:	ldrb	r0, [r2, r0]
   180dc:	cmp	r0, r4
   180e0:	bcc	180fc <__assert_fail@plt+0x5d90>
   180e4:	bhi	1810c <__assert_fail@plt+0x5da0>
   180e8:	ldrb	r4, [r6, r5]
   180ec:	add	r5, r5, #1
   180f0:	cmp	r4, #0
   180f4:	bne	180c8 <__assert_fail@plt+0x5d5c>
   180f8:	b	18120 <__assert_fail@plt+0x5db4>
   180fc:	mov	r7, r3
   18100:	cmp	lr, r7
   18104:	bcc	180a0 <__assert_fail@plt+0x5d34>
   18108:	b	18118 <__assert_fail@plt+0x5dac>
   1810c:	add	lr, r3, #1
   18110:	cmp	lr, r7
   18114:	bcc	180a0 <__assert_fail@plt+0x5d34>
   18118:	mov	r1, #0
   1811c:	b	18130 <__assert_fail@plt+0x5dc4>
   18120:	movw	r0, #33280	; 0x8200
   18124:	movt	r0, #3
   18128:	add	r1, r0, r3, lsl #3
   1812c:	ldr	r1, [r1, #4]
   18130:	ldr	r5, [sp, #76]	; 0x4c
   18134:	sub	r3, ip, r1
   18138:	mov	r7, r9
   1813c:	mov	r4, sl
   18140:	cmp	r5, #0
   18144:	bne	17cd0 <__assert_fail@plt+0x5964>
   18148:	b	17e28 <__assert_fail@plt+0x5abc>
   1814c:	mov	r9, r2
   18150:	movw	r2, #33514	; 0x82ea
   18154:	movt	r2, #3
   18158:	ldrb	r2, [r2]
   1815c:	cmp	r5, r2
   18160:	bne	18198 <__assert_fail@plt+0x5e2c>
   18164:	ldrb	r2, [r4]
   18168:	sub	r3, r2, #48	; 0x30
   1816c:	cmp	r3, #9
   18170:	bhi	1819c <__assert_fail@plt+0x5e30>
   18174:	uxtb	r3, r2
   18178:	uxtb	r7, sl
   1817c:	cmp	r7, r3
   18180:	movcc	sl, r2
   18184:	ldrb	r2, [r4, #1]!
   18188:	sub	r3, r2, #48	; 0x30
   1818c:	cmp	r3, #10
   18190:	bcc	18174 <__assert_fail@plt+0x5e08>
   18194:	b	1819c <__assert_fail@plt+0x5e30>
   18198:	mov	r4, r9
   1819c:	uxtb	r2, sl
   181a0:	mov	sl, #0
   181a4:	mov	ip, #0
   181a8:	cmp	r2, #49	; 0x31
   181ac:	bcc	181c8 <__assert_fail@plt+0x5e5c>
   181b0:	ldrb	r2, [r4]
   181b4:	movw	r3, #28728	; 0x7038
   181b8:	cmp	r8, #45	; 0x2d
   181bc:	movt	r3, #2
   181c0:	ldrb	ip, [r3, r2]
   181c4:	rsbeq	ip, ip, #0
   181c8:	cmp	lr, #45	; 0x2d
   181cc:	mov	r9, r1
   181d0:	addeq	r9, r9, #1
   181d4:	mov	r3, r9
   181d8:	ldrb	r4, [r3], #1
   181dc:	sub	r2, r4, #48	; 0x30
   181e0:	cmp	r2, #9
   181e4:	bhi	18250 <__assert_fail@plt+0x5ee4>
   181e8:	movw	r2, #33516	; 0x82ec
   181ec:	mov	sl, #0
   181f0:	movt	r2, #3
   181f4:	ldr	r8, [r2]
   181f8:	mov	r7, r3
   181fc:	uxtb	r2, r4
   18200:	uxtb	r3, sl
   18204:	ldrb	r6, [r7]
   18208:	cmp	r3, r2
   1820c:	mov	r2, r7
   18210:	movcc	sl, r4
   18214:	cmp	r8, r6
   18218:	addeq	r2, r9, #2
   1821c:	mov	r3, r2
   18220:	mov	r9, r2
   18224:	ldrb	r4, [r3], #1
   18228:	sub	r5, r4, #48	; 0x30
   1822c:	cmp	r5, #10
   18230:	bcc	181f8 <__assert_fail@plt+0x5e8c>
   18234:	cmp	r8, r6
   18238:	bne	1824c <__assert_fail@plt+0x5ee0>
   1823c:	ldr	r8, [sp, #80]	; 0x50
   18240:	ldr	r7, [sp, #8]
   18244:	sub	r3, r2, #1
   18248:	b	182a4 <__assert_fail@plt+0x5f38>
   1824c:	mov	r9, r7
   18250:	movw	r2, #33514	; 0x82ea
   18254:	ldr	r8, [sp, #80]	; 0x50
   18258:	ldr	r7, [sp, #8]
   1825c:	movt	r2, #3
   18260:	ldrb	r2, [r2]
   18264:	cmp	r4, r2
   18268:	bne	182a0 <__assert_fail@plt+0x5f34>
   1826c:	ldrb	r2, [r3]
   18270:	sub	r4, r2, #48	; 0x30
   18274:	cmp	r4, #9
   18278:	bhi	182a4 <__assert_fail@plt+0x5f38>
   1827c:	uxtb	r4, r2
   18280:	uxtb	r5, sl
   18284:	cmp	r5, r4
   18288:	movcc	sl, r2
   1828c:	ldrb	r2, [r3, #1]!
   18290:	sub	r4, r2, #48	; 0x30
   18294:	cmp	r4, #10
   18298:	bcc	1827c <__assert_fail@plt+0x5f10>
   1829c:	b	182a4 <__assert_fail@plt+0x5f38>
   182a0:	mov	r3, r9
   182a4:	uxtb	r4, sl
   182a8:	mov	r2, #0
   182ac:	cmp	r4, #49	; 0x31
   182b0:	bcc	182cc <__assert_fail@plt+0x5f60>
   182b4:	ldrb	r2, [r3]
   182b8:	movw	r3, #28728	; 0x7038
   182bc:	cmp	lr, #45	; 0x2d
   182c0:	movt	r3, #2
   182c4:	ldrb	r2, [r3, r2]
   182c8:	rsbeq	r2, r2, #0
   182cc:	ldr	r5, [sp, #76]	; 0x4c
   182d0:	ldr	r4, [sp, #12]
   182d4:	subs	r3, ip, r2
   182d8:	bne	17cc8 <__assert_fail@plt+0x595c>
   182dc:	b	17ca8 <__assert_fail@plt+0x593c>
   182e0:	ldrb	r0, [ip, #27]
   182e4:	cmp	r0, #0
   182e8:	beq	185bc <__assert_fail@plt+0x6250>
   182ec:	str	r4, [sp, #12]
   182f0:	movw	r4, #34824	; 0x8808
   182f4:	ldr	r0, [sp, #24]
   182f8:	mov	r2, #156	; 0x9c
   182fc:	movt	r4, #3
   18300:	mov	r1, r4
   18304:	bl	11eec <memcpy@plt>
   18308:	add	lr, sp, #3072	; 0xc00
   1830c:	mov	r1, r4
   18310:	mov	r2, #156	; 0x9c
   18314:	add	r0, lr, #1016	; 0x3f8
   18318:	bl	11eec <memcpy@plt>
   1831c:	movw	r0, #33512	; 0x82e8
   18320:	movt	r0, #3
   18324:	ldrb	r0, [r0]
   18328:	cmp	r0, #0
   1832c:	beq	185e8 <__assert_fail@plt+0x627c>
   18330:	ldr	r0, [sp, #12]
   18334:	sub	lr, fp, #3072	; 0xc00
   18338:	mov	sl, #4000	; 0xfa0
   1833c:	mov	r9, r7
   18340:	add	r1, r7, r0
   18344:	add	r0, r0, r8
   18348:	add	r0, r0, r0, lsl #1
   1834c:	str	r1, [sp, #36]	; 0x24
   18350:	ldr	r1, [sp, #72]	; 0x48
   18354:	add	r0, r0, #2
   18358:	str	r0, [sp, #16]
   1835c:	mov	r0, #0
   18360:	str	r0, [sp, #32]
   18364:	sub	r0, lr, #984	; 0x3d8
   18368:	add	r2, r1, r8
   1836c:	str	r1, [sp, #56]	; 0x38
   18370:	str	r0, [sp, #40]	; 0x28
   18374:	mov	r0, #0
   18378:	str	r2, [sp, #44]	; 0x2c
   1837c:	str	r0, [sp, #20]
   18380:	b	183c8 <__assert_fail@plt+0x605c>
   18384:	mov	r9, r4
   18388:	ldr	r4, [sp, #40]	; 0x28
   1838c:	add	lr, sp, #3072	; 0xc00
   18390:	mov	r1, r8
   18394:	str	r6, [sp, #56]	; 0x38
   18398:	add	r2, lr, #1016	; 0x3f8
   1839c:	mov	r0, r4
   183a0:	bl	1c9b0 <__assert_fail@plt+0xa644>
   183a4:	ldr	r5, [sp, #28]
   183a8:	ldr	r2, [sp, #24]
   183ac:	add	r4, r4, r8
   183b0:	mov	r0, r4
   183b4:	mov	r1, r5
   183b8:	bl	1c9b0 <__assert_fail@plt+0xa644>
   183bc:	ldr	r0, [sp, #20]
   183c0:	cmp	r0, #0
   183c4:	beq	18570 <__assert_fail@plt+0x6204>
   183c8:	ldr	r4, [sp, #16]
   183cc:	cmp	sl, r4
   183d0:	bcs	18410 <__assert_fail@plt+0x60a4>
   183d4:	ldr	r0, [sp, #32]
   183d8:	bl	1d148 <__assert_fail@plt+0xaddc>
   183dc:	add	r0, sl, sl, lsl #1
   183e0:	cmp	r4, r0, lsr #1
   183e4:	lsrls	r4, r0, #1
   183e8:	mov	r0, r4
   183ec:	bl	23cf8 <__assert_fail@plt+0x1198c>
   183f0:	sub	lr, fp, #3072	; 0xc00
   183f4:	cmp	r0, #0
   183f8:	str	r0, [sp, #32]
   183fc:	mov	r5, r0
   18400:	sub	r0, lr, #984	; 0x3d8
   18404:	movweq	r4, #4000	; 0xfa0
   18408:	moveq	r5, r0
   1840c:	b	18418 <__assert_fail@plt+0x60ac>
   18410:	ldr	r5, [sp, #40]	; 0x28
   18414:	mov	r4, sl
   18418:	ldr	r0, [sp, #44]	; 0x2c
   1841c:	ldr	r1, [sp, #56]	; 0x38
   18420:	mov	r6, #0
   18424:	mov	r8, #0
   18428:	cmp	r1, r0
   1842c:	bcs	18444 <__assert_fail@plt+0x60d8>
   18430:	ldr	r1, [sp, #56]	; 0x38
   18434:	mov	r0, r5
   18438:	mov	r2, r4
   1843c:	bl	194ac <__assert_fail@plt+0x7140>
   18440:	add	r8, r0, #1
   18444:	ldr	r0, [sp, #36]	; 0x24
   18448:	cmp	r9, r0
   1844c:	bcs	18474 <__assert_fail@plt+0x6108>
   18450:	cmp	r4, r8
   18454:	mov	r1, #0
   18458:	mov	r0, #0
   1845c:	sub	r2, r4, r8
   18460:	movcc	r2, r1
   18464:	addcs	r0, r5, r8
   18468:	mov	r1, r9
   1846c:	bl	194ac <__assert_fail@plt+0x7140>
   18470:	add	r6, r0, #1
   18474:	add	sl, r6, r8
   18478:	str	r5, [sp, #40]	; 0x28
   1847c:	str	r6, [sp, #28]
   18480:	cmp	sl, r4
   18484:	bhi	18498 <__assert_fail@plt+0x612c>
   18488:	cmp	r4, r8
   1848c:	bcc	18498 <__assert_fail@plt+0x612c>
   18490:	mov	sl, r4
   18494:	b	18504 <__assert_fail@plt+0x6198>
   18498:	ldr	r0, [sp, #32]
   1849c:	bl	1d148 <__assert_fail@plt+0xaddc>
   184a0:	movw	r1, #21845	; 0x5555
   184a4:	add	r0, sl, sl, lsl #1
   184a8:	movt	r1, #21845	; 0x5555
   184ac:	cmp	sl, r1
   184b0:	lsrcc	sl, r0, #1
   184b4:	mov	r0, sl
   184b8:	bl	22720 <__assert_fail@plt+0x103b4>
   184bc:	str	r0, [sp, #32]
   184c0:	ldr	r0, [sp, #44]	; 0x2c
   184c4:	ldr	r1, [sp, #56]	; 0x38
   184c8:	cmp	r1, r0
   184cc:	bcs	184e0 <__assert_fail@plt+0x6174>
   184d0:	ldr	r0, [sp, #32]
   184d4:	ldr	r1, [sp, #56]	; 0x38
   184d8:	mov	r2, r8
   184dc:	bl	1218c <strxfrm@plt>
   184e0:	ldr	r0, [sp, #36]	; 0x24
   184e4:	cmp	r9, r0
   184e8:	bcs	1850c <__assert_fail@plt+0x61a0>
   184ec:	ldr	r4, [sp, #32]
   184f0:	ldr	r2, [sp, #28]
   184f4:	mov	r1, r9
   184f8:	add	r0, r4, r8
   184fc:	bl	1218c <strxfrm@plt>
   18500:	str	r4, [sp, #40]	; 0x28
   18504:	mov	r4, r9
   18508:	b	18518 <__assert_fail@plt+0x61ac>
   1850c:	ldr	r0, [sp, #32]
   18510:	mov	r4, r9
   18514:	str	r0, [sp, #40]	; 0x28
   18518:	ldr	r6, [sp, #56]	; 0x38
   1851c:	ldr	r0, [sp, #44]	; 0x2c
   18520:	cmp	r6, r0
   18524:	bcs	18538 <__assert_fail@plt+0x61cc>
   18528:	mov	r0, r6
   1852c:	bl	12174 <strlen@plt>
   18530:	add	r0, r0, r6
   18534:	add	r6, r0, #1
   18538:	ldr	r0, [sp, #36]	; 0x24
   1853c:	cmp	r4, r0
   18540:	bcs	18554 <__assert_fail@plt+0x61e8>
   18544:	mov	r0, r4
   18548:	bl	12174 <strlen@plt>
   1854c:	add	r0, r0, r4
   18550:	add	r4, r0, #1
   18554:	ldr	r0, [sp, #44]	; 0x2c
   18558:	cmp	r6, r0
   1855c:	bcc	18384 <__assert_fail@plt+0x6018>
   18560:	ldr	r0, [sp, #36]	; 0x24
   18564:	cmp	r4, r0
   18568:	bcc	18384 <__assert_fail@plt+0x6018>
   1856c:	b	185ac <__assert_fail@plt+0x6240>
   18570:	ldr	r0, [sp, #40]	; 0x28
   18574:	cmp	r8, r5
   18578:	mov	r2, r5
   1857c:	mov	r1, r4
   18580:	movcc	r2, r8
   18584:	bl	11f64 <memcmp@plt>
   18588:	cmp	r0, #0
   1858c:	str	r0, [sp, #20]
   18590:	bne	183c8 <__assert_fail@plt+0x605c>
   18594:	cmp	r8, r5
   18598:	mov	r0, #0
   1859c:	movwhi	r0, #1
   185a0:	subcc	r0, r0, #1
   185a4:	str	r0, [sp, #20]
   185a8:	b	183c8 <__assert_fail@plt+0x605c>
   185ac:	ldr	r4, [sp, #40]	; 0x28
   185b0:	ldr	sl, [sp, #28]
   185b4:	add	r9, r4, r8
   185b8:	b	18604 <__assert_fail@plt+0x6298>
   185bc:	ldrb	r0, [ip, #32]
   185c0:	cmp	r0, #0
   185c4:	beq	186d8 <__assert_fail@plt+0x636c>
   185c8:	mov	r0, r2
   185cc:	mov	r1, r7
   185d0:	bl	1ccb4 <__assert_fail@plt+0xa948>
   185d4:	ldr	r5, [sp, #76]	; 0x4c
   185d8:	mov	r3, r0
   185dc:	cmp	r5, #0
   185e0:	bne	17cd0 <__assert_fail@plt+0x5964>
   185e4:	b	17e28 <__assert_fail@plt+0x5abc>
   185e8:	ldr	sl, [sp, #12]
   185ec:	ldr	r4, [sp, #72]	; 0x48
   185f0:	mov	r0, #0
   185f4:	mov	r9, r7
   185f8:	str	r0, [sp, #32]
   185fc:	mov	r0, #0
   18600:	str	r0, [sp, #20]
   18604:	add	lr, sp, #3072	; 0xc00
   18608:	mov	r0, r4
   1860c:	mov	r1, r8
   18610:	add	r5, lr, #1016	; 0x3f8
   18614:	mov	r2, r5
   18618:	bl	1c9b0 <__assert_fail@plt+0xa644>
   1861c:	sub	lr, fp, #3072	; 0xc00
   18620:	mov	r0, r5
   18624:	sub	r5, lr, #1016	; 0x3f8
   18628:	mov	r1, r5
   1862c:	bl	1bdb8 <__assert_fail@plt+0x9a4c>
   18630:	ldr	r6, [sp, #24]
   18634:	mov	r0, r9
   18638:	mov	r1, sl
   1863c:	mov	r2, r6
   18640:	bl	1c9b0 <__assert_fail@plt+0xa644>
   18644:	mov	r0, r6
   18648:	ldr	r6, [sp, #4]
   1864c:	mov	r1, r6
   18650:	bl	1bdb8 <__assert_fail@plt+0x9a4c>
   18654:	mov	r0, r5
   18658:	mov	r1, r6
   1865c:	mov	r2, #16
   18660:	bl	11f64 <memcmp@plt>
   18664:	mov	r1, r0
   18668:	cmp	r0, #0
   1866c:	bne	186b0 <__assert_fail@plt+0x6344>
   18670:	ldr	r1, [sp, #20]
   18674:	cmp	r1, #0
   18678:	bne	186b0 <__assert_fail@plt+0x6344>
   1867c:	cmp	r8, sl
   18680:	mov	r2, sl
   18684:	mov	r0, r4
   18688:	mov	r1, r9
   1868c:	movcc	r2, r8
   18690:	bl	11f64 <memcmp@plt>
   18694:	mov	r1, r0
   18698:	cmp	r0, #0
   1869c:	bne	186b0 <__assert_fail@plt+0x6344>
   186a0:	cmp	r8, sl
   186a4:	mov	r1, #0
   186a8:	movwhi	r1, #1
   186ac:	subcc	r1, r1, #1
   186b0:	ldr	r0, [sp, #32]
   186b4:	mov	r4, r1
   186b8:	bl	1d148 <__assert_fail@plt+0xaddc>
   186bc:	mov	r3, r4
   186c0:	ldr	r5, [sp, #76]	; 0x4c
   186c4:	ldr	r8, [sp, #80]	; 0x50
   186c8:	ldr	r4, [sp, #12]
   186cc:	cmp	r5, #0
   186d0:	bne	17cd0 <__assert_fail@plt+0x5964>
   186d4:	b	17e28 <__assert_fail@plt+0x5abc>
   186d8:	ldr	r5, [sp, #76]	; 0x4c
   186dc:	cmp	r8, #0
   186e0:	beq	187a0 <__assert_fail@plt+0x6434>
   186e4:	cmp	r4, #0
   186e8:	beq	187ac <__assert_fail@plt+0x6440>
   186ec:	mov	r0, r2
   186f0:	add	r1, r8, #1
   186f4:	add	r3, r4, #1
   186f8:	mov	r2, r7
   186fc:	bl	22d90 <__assert_fail@plt+0x10a24>
   18700:	b	17cc4 <__assert_fail@plt+0x5958>
   18704:	cmp	r9, #0
   18708:	beq	187bc <__assert_fail@plt+0x6450>
   1870c:	cmp	r8, #0
   18710:	beq	18814 <__assert_fail@plt+0x64a8>
   18714:	mov	r0, #0
   18718:	cmp	r7, r6
   1871c:	bcs	1873c <__assert_fail@plt+0x63d0>
   18720:	ldrb	r1, [r7]
   18724:	ldrb	r1, [r9, r1]
   18728:	cmp	r1, #0
   1872c:	beq	1874c <__assert_fail@plt+0x63e0>
   18730:	add	r7, r7, #1
   18734:	cmp	r7, r6
   18738:	bcc	18720 <__assert_fail@plt+0x63b4>
   1873c:	mov	r1, #0
   18740:	cmp	sl, lr
   18744:	bcc	18758 <__assert_fail@plt+0x63ec>
   18748:	b	18888 <__assert_fail@plt+0x651c>
   1874c:	mov	r1, #1
   18750:	cmp	sl, lr
   18754:	bcs	18888 <__assert_fail@plt+0x651c>
   18758:	ldrb	r5, [sl]
   1875c:	ldrb	r3, [r9, r5]
   18760:	cmp	r3, #0
   18764:	beq	18778 <__assert_fail@plt+0x640c>
   18768:	add	sl, sl, #1
   1876c:	cmp	sl, lr
   18770:	bcc	18758 <__assert_fail@plt+0x63ec>
   18774:	b	18888 <__assert_fail@plt+0x651c>
   18778:	cmp	r1, #0
   1877c:	beq	18884 <__assert_fail@plt+0x6518>
   18780:	ldrb	r1, [r7]
   18784:	ldrb	r0, [r8, r5]
   18788:	ldrb	r1, [r8, r1]
   1878c:	subs	r3, r1, r0
   18790:	bne	188f8 <__assert_fail@plt+0x658c>
   18794:	add	sl, sl, #1
   18798:	add	r7, r7, #1
   1879c:	b	18714 <__assert_fail@plt+0x63a8>
   187a0:	cmp	r4, #0
   187a4:	mov	r3, r4
   187a8:	b	17e1c <__assert_fail@plt+0x5ab0>
   187ac:	mov	r3, #1
   187b0:	cmp	r5, #0
   187b4:	bne	17cd0 <__assert_fail@plt+0x5964>
   187b8:	b	17e28 <__assert_fail@plt+0x5abc>
   187bc:	cmp	r4, #0
   187c0:	beq	18898 <__assert_fail@plt+0x652c>
   187c4:	cmp	r5, #0
   187c8:	beq	188ec <__assert_fail@plt+0x6580>
   187cc:	cmp	r8, #0
   187d0:	beq	188b0 <__assert_fail@plt+0x6544>
   187d4:	cmp	sl, lr
   187d8:	cmpcc	r7, r6
   187dc:	bcs	188d4 <__assert_fail@plt+0x6568>
   187e0:	ldrb	r0, [sl], #1
   187e4:	ldrb	r1, [r7], #1
   187e8:	ldrb	r0, [r8, r0]
   187ec:	ldrb	r1, [r8, r1]
   187f0:	subs	r3, r1, r0
   187f4:	beq	187d4 <__assert_fail@plt+0x6468>
   187f8:	b	188f8 <__assert_fail@plt+0x658c>
   187fc:	ldrb	r0, [r7]
   18800:	subs	r3, r0, r6
   18804:	bne	188f8 <__assert_fail@plt+0x658c>
   18808:	mov	r6, r2
   1880c:	add	sl, sl, #1
   18810:	add	r7, r7, #1
   18814:	mov	r0, #0
   18818:	cmp	r7, r6
   1881c:	bcs	1883c <__assert_fail@plt+0x64d0>
   18820:	ldrb	r1, [r7]
   18824:	ldrb	r1, [r9, r1]
   18828:	cmp	r1, #0
   1882c:	beq	1884c <__assert_fail@plt+0x64e0>
   18830:	add	r7, r7, #1
   18834:	cmp	r7, r6
   18838:	bcc	18820 <__assert_fail@plt+0x64b4>
   1883c:	mov	r1, #0
   18840:	cmp	sl, lr
   18844:	bcc	18858 <__assert_fail@plt+0x64ec>
   18848:	b	18888 <__assert_fail@plt+0x651c>
   1884c:	mov	r1, #1
   18850:	cmp	sl, lr
   18854:	bcs	18888 <__assert_fail@plt+0x651c>
   18858:	mov	r2, r6
   1885c:	ldrb	r6, [sl]
   18860:	ldrb	r3, [r9, r6]
   18864:	cmp	r3, #0
   18868:	beq	1887c <__assert_fail@plt+0x6510>
   1886c:	add	sl, sl, #1
   18870:	cmp	sl, lr
   18874:	bcc	1885c <__assert_fail@plt+0x64f0>
   18878:	b	18888 <__assert_fail@plt+0x651c>
   1887c:	cmp	r1, #0
   18880:	bne	187fc <__assert_fail@plt+0x6490>
   18884:	mov	r0, #1
   18888:	sub	r3, r1, r0
   1888c:	cmp	r3, #0
   18890:	beq	17e48 <__assert_fail@plt+0x5adc>
   18894:	b	188f8 <__assert_fail@plt+0x658c>
   18898:	cmp	r5, #0
   1889c:	mvnne	r5, #0
   188a0:	mov	r3, r5
   188a4:	cmp	r3, #0
   188a8:	beq	17e48 <__assert_fail@plt+0x5adc>
   188ac:	b	188f8 <__assert_fail@plt+0x658c>
   188b0:	cmp	r4, r5
   188b4:	mov	r2, r5
   188b8:	mov	r0, r7
   188bc:	mov	r1, sl
   188c0:	movcc	r2, r4
   188c4:	bl	11f64 <memcmp@plt>
   188c8:	ldr	ip, [sp, #84]	; 0x54
   188cc:	cmp	r0, #0
   188d0:	bne	188f4 <__assert_fail@plt+0x6588>
   188d4:	subs	r3, r4, r5
   188d8:	movwne	r3, #1
   188dc:	cmp	r4, r5
   188e0:	bcs	17e40 <__assert_fail@plt+0x5ad4>
   188e4:	mvn	r3, #0
   188e8:	b	188f8 <__assert_fail@plt+0x658c>
   188ec:	mov	r3, #1
   188f0:	b	188f8 <__assert_fail@plt+0x658c>
   188f4:	mov	r3, r0
   188f8:	ldrb	r0, [ip, #31]
   188fc:	ldr	r9, [sp, #64]	; 0x40
   18900:	ldr	r8, [sp, #60]	; 0x3c
   18904:	cmp	r0, #0
   18908:	rsbne	r3, r3, #0
   1890c:	cmp	r3, #0
   18910:	bne	189e4 <__assert_fail@plt+0x6678>
   18914:	movw	r0, #33662	; 0x837e
   18918:	mov	r3, #0
   1891c:	movt	r0, #3
   18920:	ldrb	r0, [r0]
   18924:	cmp	r0, #0
   18928:	bne	189e4 <__assert_fail@plt+0x6678>
   1892c:	movw	r0, #33661	; 0x837d
   18930:	movt	r0, #3
   18934:	ldrb	r0, [r0]
   18938:	cmp	r0, #0
   1893c:	bne	189e4 <__assert_fail@plt+0x6678>
   18940:	ldr	r3, [r8, #4]
   18944:	ldr	r1, [r9, #4]
   18948:	sub	r4, r3, #1
   1894c:	subs	r5, r1, #1
   18950:	beq	18984 <__assert_fail@plt+0x6618>
   18954:	cmp	r4, #0
   18958:	beq	18994 <__assert_fail@plt+0x6628>
   1895c:	movw	r7, #33512	; 0x82e8
   18960:	ldr	r2, [r8]
   18964:	ldr	r0, [r9]
   18968:	movt	r7, #3
   1896c:	ldrb	r7, [r7]
   18970:	cmp	r7, #0
   18974:	beq	1899c <__assert_fail@plt+0x6630>
   18978:	bl	22d90 <__assert_fail@plt+0x10a24>
   1897c:	mov	r3, r0
   18980:	b	189d0 <__assert_fail@plt+0x6664>
   18984:	cmp	r4, #0
   18988:	mvnne	r4, #0
   1898c:	mov	r3, r4
   18990:	b	189d0 <__assert_fail@plt+0x6664>
   18994:	mov	r3, #1
   18998:	b	189d0 <__assert_fail@plt+0x6664>
   1899c:	cmp	r5, r4
   189a0:	mov	r3, r4
   189a4:	mov	r1, r2
   189a8:	movcc	r3, r5
   189ac:	mov	r2, r3
   189b0:	bl	11f64 <memcmp@plt>
   189b4:	mov	r3, r0
   189b8:	cmp	r0, #0
   189bc:	bne	189d0 <__assert_fail@plt+0x6664>
   189c0:	subs	r3, r5, r4
   189c4:	movwne	r3, #1
   189c8:	cmp	r5, r4
   189cc:	mvncc	r3, #0
   189d0:	movw	r0, #33668	; 0x8384
   189d4:	movt	r0, #3
   189d8:	ldrb	r0, [r0]
   189dc:	cmp	r0, #0
   189e0:	rsbne	r3, r3, #0
   189e4:	mov	r0, r3
   189e8:	sub	sp, fp, #40	; 0x28
   189ec:	vpop	{d8}
   189f0:	add	sp, sp, #4
   189f4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   189f8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   189fc:	add	fp, sp, #28
   18a00:	sub	sp, sp, #4
   18a04:	vpush	{d10-d11}
   18a08:	vpush	{d8}
   18a0c:	sub	sp, sp, #40	; 0x28
   18a10:	ldr	r5, [r0]
   18a14:	ldr	r7, [r0, #4]
   18a18:	mov	r8, r2
   18a1c:	mov	r4, r1
   18a20:	cmp	r2, #0
   18a24:	str	r0, [sp, #8]
   18a28:	add	r6, r5, r7
   18a2c:	bne	18ac0 <__assert_fail@plt+0x6754>
   18a30:	movw	r0, #33660	; 0x837c
   18a34:	movt	r0, #3
   18a38:	ldrb	r0, [r0]
   18a3c:	cmp	r0, #1
   18a40:	bne	18ac0 <__assert_fail@plt+0x6754>
   18a44:	cmp	r7, #1
   18a48:	blt	18b14 <__assert_fail@plt+0x67a8>
   18a4c:	sub	r7, r7, #1
   18a50:	ldrb	r0, [r5], #1
   18a54:	cmp	r7, #0
   18a58:	ldr	r2, [r4, #24]
   18a5c:	mov	r1, r0
   18a60:	movweq	r1, #10
   18a64:	cmp	r0, #9
   18a68:	ldr	r0, [r4, #20]
   18a6c:	movweq	r1, #62	; 0x3e
   18a70:	cmp	r0, r2
   18a74:	bcs	18a94 <__assert_fail@plt+0x6728>
   18a78:	add	r2, r0, #1
   18a7c:	str	r2, [r4, #20]
   18a80:	strb	r1, [r0]
   18a84:	sub	r7, r7, #1
   18a88:	cmp	r5, r6
   18a8c:	bcc	18a50 <__assert_fail@plt+0x66e4>
   18a90:	b	18b14 <__assert_fail@plt+0x67a8>
   18a94:	mov	r0, r4
   18a98:	bl	12240 <__overflow@plt>
   18a9c:	cmn	r0, #1
   18aa0:	bne	18a84 <__assert_fail@plt+0x6718>
   18aa4:	movw	r1, #27694	; 0x6c2e
   18aa8:	mov	r0, #0
   18aac:	mov	r2, #5
   18ab0:	movt	r1, #2
   18ab4:	bl	11f7c <dcgettext@plt>
   18ab8:	mov	r1, #0
   18abc:	bl	173f0 <__assert_fail@plt+0x5084>
   18ac0:	movw	r0, #33663	; 0x837f
   18ac4:	mov	r1, #10
   18ac8:	mov	r2, r7
   18acc:	mov	r3, r4
   18ad0:	movt	r0, #3
   18ad4:	ldrb	r0, [r0]
   18ad8:	cmp	r0, #0
   18adc:	mov	r0, r5
   18ae0:	movwne	r1, #0
   18ae4:	strb	r1, [r6, #-1]
   18ae8:	mov	r1, #1
   18aec:	bl	11f58 <fwrite_unlocked@plt>
   18af0:	cmp	r0, r7
   18af4:	bne	191b8 <__assert_fail@plt+0x6e4c>
   18af8:	mov	r0, #0
   18afc:	strb	r0, [r6, #-1]
   18b00:	sub	sp, fp, #56	; 0x38
   18b04:	vpop	{d8}
   18b08:	vpop	{d10-d11}
   18b0c:	add	sp, sp, #4
   18b10:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18b14:	movw	r0, #33664	; 0x8380
   18b18:	movw	sl, #33500	; 0x82dc
   18b1c:	movw	r9, #33680	; 0x8390
   18b20:	vmov.i16	d8, #9	; 0x0009
   18b24:	vmov.i32	q5, #1	; 0x00000001
   18b28:	movt	r0, #3
   18b2c:	movt	sl, #3
   18b30:	movt	r9, #3
   18b34:	ldr	r4, [r0]
   18b38:	ldr	r0, [sp, #8]
   18b3c:	cmp	r4, #0
   18b40:	str	r4, [sp, #4]
   18b44:	ldr	r7, [r0]
   18b48:	ldr	r0, [r0, #4]
   18b4c:	add	r0, r7, r0
   18b50:	sub	r6, r0, #1
   18b54:	beq	18c14 <__assert_fail@plt+0x68a8>
   18b58:	ldr	r5, [r4]
   18b5c:	mov	r8, r7
   18b60:	cmn	r5, #1
   18b64:	beq	18b78 <__assert_fail@plt+0x680c>
   18b68:	ldr	r0, [sp, #8]
   18b6c:	mov	r1, r4
   18b70:	bl	19338 <__assert_fail@plt+0x6fcc>
   18b74:	mov	r8, r0
   18b78:	ldr	r0, [r4, #8]
   18b7c:	cmn	r0, #1
   18b80:	beq	18b94 <__assert_fail@plt+0x6828>
   18b84:	ldr	r0, [sp, #8]
   18b88:	mov	r1, r4
   18b8c:	bl	191d4 <__assert_fail@plt+0x6e68>
   18b90:	mov	r6, r0
   18b94:	ldrb	r0, [r4, #24]
   18b98:	cmp	r0, #0
   18b9c:	beq	18ba8 <__assert_fail@plt+0x683c>
   18ba0:	cmn	r5, #1
   18ba4:	beq	18bd8 <__assert_fail@plt+0x686c>
   18ba8:	ldrb	r0, [r4, #30]
   18bac:	cmp	r0, #0
   18bb0:	bne	18bd8 <__assert_fail@plt+0x686c>
   18bb4:	ldrb	r0, [r4, #26]
   18bb8:	cmp	r0, #0
   18bbc:	bne	18bd8 <__assert_fail@plt+0x686c>
   18bc0:	ldrb	r0, [r4, #28]
   18bc4:	cmp	r0, #0
   18bc8:	bne	18bd8 <__assert_fail@plt+0x686c>
   18bcc:	ldrb	r0, [r4, #29]
   18bd0:	cmp	r0, #0
   18bd4:	beq	1919c <__assert_fail@plt+0x6e30>
   18bd8:	ldrb	r3, [r6]
   18bdc:	mov	r0, #0
   18be0:	sub	r8, r8, #1
   18be4:	strb	r0, [r6]
   18be8:	mov	r0, r8
   18bec:	ldrb	r1, [r8, #1]!
   18bf0:	ldrb	r1, [r9, r1]
   18bf4:	cmp	r1, #0
   18bf8:	bne	18be8 <__assert_fail@plt+0x687c>
   18bfc:	cmp	r6, r8
   18c00:	str	r8, [sp, #36]	; 0x24
   18c04:	bcs	18c20 <__assert_fail@plt+0x68b4>
   18c08:	mov	r9, r6
   18c0c:	str	r6, [sp, #36]	; 0x24
   18c10:	b	18db4 <__assert_fail@plt+0x6a48>
   18c14:	mov	r9, r6
   18c18:	mov	r8, r7
   18c1c:	b	18db8 <__assert_fail@plt+0x6a4c>
   18c20:	ldrb	r1, [r4, #30]
   18c24:	cmp	r1, #0
   18c28:	beq	18ccc <__assert_fail@plt+0x6960>
   18c2c:	str	r3, [sp]
   18c30:	ldrb	r1, [r0, #1]!
   18c34:	ldrb	r1, [r9, r1]
   18c38:	cmp	r1, #0
   18c3c:	bne	18c30 <__assert_fail@plt+0x68c4>
   18c40:	mov	r2, #12
   18c44:	mov	ip, #0
   18c48:	movw	r1, #33280	; 0x8200
   18c4c:	add	r3, r2, ip
   18c50:	movt	r1, #3
   18c54:	lsr	r3, r3, #1
   18c58:	ldr	r5, [r1, r3, lsl #3]
   18c5c:	ldrb	r4, [r5]
   18c60:	cmp	r4, #0
   18c64:	beq	18da8 <__assert_fail@plt+0x6a3c>
   18c68:	add	r5, r5, #1
   18c6c:	mov	r9, r0
   18c70:	ldrb	r1, [r9]
   18c74:	movw	lr, #34448	; 0x8690
   18c78:	uxtb	r4, r4
   18c7c:	movt	lr, #3
   18c80:	ldrb	r1, [lr, r1]
   18c84:	cmp	r1, r4
   18c88:	bcc	18ca4 <__assert_fail@plt+0x6938>
   18c8c:	bhi	18cb4 <__assert_fail@plt+0x6948>
   18c90:	ldrb	r4, [r5], #1
   18c94:	add	r9, r9, #1
   18c98:	cmp	r4, #0
   18c9c:	bne	18c70 <__assert_fail@plt+0x6904>
   18ca0:	b	18dac <__assert_fail@plt+0x6a40>
   18ca4:	mov	r2, r3
   18ca8:	cmp	ip, r2
   18cac:	bcc	18c48 <__assert_fail@plt+0x68dc>
   18cb0:	b	18cc0 <__assert_fail@plt+0x6954>
   18cb4:	add	ip, r3, #1
   18cb8:	cmp	ip, r2
   18cbc:	bcc	18c48 <__assert_fail@plt+0x68dc>
   18cc0:	ldr	r3, [sp]
   18cc4:	mov	r9, r8
   18cc8:	b	18db4 <__assert_fail@plt+0x6a48>
   18ccc:	ldrb	r0, [r4, #28]
   18cd0:	cmp	r0, #0
   18cd4:	beq	18cf4 <__assert_fail@plt+0x6988>
   18cd8:	mov	r0, r8
   18cdc:	add	r1, sp, #36	; 0x24
   18ce0:	mov	r5, r3
   18ce4:	bl	11f40 <strtold@plt>
   18ce8:	ldr	r9, [sp, #36]	; 0x24
   18cec:	mov	r3, r5
   18cf0:	b	18db4 <__assert_fail@plt+0x6a48>
   18cf4:	ldrb	r0, [r4, #26]
   18cf8:	cmp	r0, #0
   18cfc:	bne	18d0c <__assert_fail@plt+0x69a0>
   18d00:	ldrb	r0, [r4, #29]
   18d04:	cmp	r0, #0
   18d08:	beq	18c08 <__assert_fail@plt+0x689c>
   18d0c:	mov	r9, #0
   18d10:	cmp	r8, r6
   18d14:	mov	r1, #0
   18d18:	bcs	18d2c <__assert_fail@plt+0x69c0>
   18d1c:	ldrb	r1, [r8]
   18d20:	sub	r1, r1, #45	; 0x2d
   18d24:	clz	r1, r1
   18d28:	lsr	r1, r1, #5
   18d2c:	mov	lr, r8
   18d30:	ldrb	r2, [lr, r1]!
   18d34:	add	r5, lr, #1
   18d38:	sub	r1, r2, #48	; 0x30
   18d3c:	cmp	r1, #9
   18d40:	bhi	1910c <__assert_fail@plt+0x6da0>
   18d44:	movw	r0, #33516	; 0x82ec
   18d48:	mov	r9, #0
   18d4c:	str	r3, [sp]
   18d50:	movt	r0, #3
   18d54:	ldr	ip, [r0]
   18d58:	uxtb	r1, r2
   18d5c:	uxtb	r4, r9
   18d60:	mov	r3, r5
   18d64:	cmp	r4, r1
   18d68:	ldrb	r4, [r5]
   18d6c:	mov	r1, r5
   18d70:	movcc	r9, r2
   18d74:	cmp	ip, r4
   18d78:	addeq	r1, lr, #2
   18d7c:	mov	r5, r1
   18d80:	mov	lr, r1
   18d84:	ldrb	r2, [r5], #1
   18d88:	sub	r0, r2, #48	; 0x30
   18d8c:	cmp	r0, #10
   18d90:	bcc	18d58 <__assert_fail@plt+0x69ec>
   18d94:	cmp	ip, r4
   18d98:	bne	19104 <__assert_fail@plt+0x6d98>
   18d9c:	ldm	sp, {r3, r4}
   18da0:	sub	r5, r1, #1
   18da4:	b	19158 <__assert_fail@plt+0x6dec>
   18da8:	mov	r9, r0
   18dac:	ldr	r3, [sp]
   18db0:	str	r9, [sp, #36]	; 0x24
   18db4:	strb	r3, [r6]
   18db8:	sub	r5, r8, r7
   18dbc:	mov	r0, r7
   18dc0:	mov	r2, #0
   18dc4:	mov	r1, r5
   18dc8:	bl	1e8c4 <__assert_fail@plt+0xc558>
   18dcc:	mov	r4, r0
   18dd0:	cmp	r8, r7
   18dd4:	bls	18ec4 <__assert_fail@plt+0x6b58>
   18dd8:	cmp	r5, #4
   18ddc:	bcc	18eb0 <__assert_fail@plt+0x6b44>
   18de0:	mov	r1, #0
   18de4:	bic	ip, r5, #3
   18de8:	mov	r3, #1
   18dec:	vdup.32	q8, r1
   18df0:	subs	r2, ip, #4
   18df4:	add	r3, r3, r2, lsr #2
   18df8:	and	lr, r3, #1
   18dfc:	vmov.32	d16[0], r4
   18e00:	beq	18e64 <__assert_fail@plt+0x6af8>
   18e04:	sub	r3, r3, lr
   18e08:	mov	r1, #0
   18e0c:	add	r0, sp, #28
   18e10:	add	r2, sp, #32
   18e14:	mov	r6, r7
   18e18:	subs	r3, r3, #2
   18e1c:	ldr	r4, [r6, r1]!
   18e20:	add	r1, r1, #8
   18e24:	str	r4, [sp, #28]
   18e28:	ldr	r6, [r6, #4]
   18e2c:	vld1.32	{d18[0]}, [r0 :32]
   18e30:	str	r6, [sp, #32]
   18e34:	vld1.32	{d19[0]}, [r2 :32]
   18e38:	vmovl.u8	q10, d18
   18e3c:	vceq.i16	d20, d20, d8
   18e40:	vmovl.u8	q9, d19
   18e44:	vmovl.u16	q10, d20
   18e48:	vceq.i16	d18, d18, d8
   18e4c:	vand	q10, q10, q5
   18e50:	vmovl.u16	q9, d18
   18e54:	vadd.i32	q8, q8, q10
   18e58:	vand	q9, q9, q5
   18e5c:	vadd.i32	q8, q8, q9
   18e60:	bne	18e14 <__assert_fail@plt+0x6aa8>
   18e64:	cmp	lr, #0
   18e68:	beq	18e90 <__assert_fail@plt+0x6b24>
   18e6c:	ldr	r1, [r7, r1]
   18e70:	str	r1, [sp, #24]
   18e74:	add	r1, sp, #24
   18e78:	vld1.32	{d18[0]}, [r1 :32]
   18e7c:	vmovl.u8	q9, d18
   18e80:	vceq.i16	d18, d18, d8
   18e84:	vmovl.u16	q9, d18
   18e88:	vand	q9, q9, q5
   18e8c:	vadd.i32	q8, q8, q9
   18e90:	vext.8	q9, q8, q8, #8
   18e94:	cmp	ip, r5
   18e98:	vadd.i32	q8, q8, q9
   18e9c:	vdup.32	q9, d16[1]
   18ea0:	vadd.i32	q8, q8, q9
   18ea4:	vmov.32	r4, d16[0]
   18ea8:	beq	18ec4 <__assert_fail@plt+0x6b58>
   18eac:	add	r7, r7, ip
   18eb0:	ldrb	r0, [r7], #1
   18eb4:	cmp	r0, #9
   18eb8:	addeq	r4, r4, #1
   18ebc:	cmp	r8, r7
   18ec0:	bne	18eb0 <__assert_fail@plt+0x6b44>
   18ec4:	sub	r7, r9, r8
   18ec8:	mov	r0, r8
   18ecc:	mov	r2, #0
   18ed0:	mov	r1, r7
   18ed4:	bl	1e8c4 <__assert_fail@plt+0xc558>
   18ed8:	mov	r6, r0
   18edc:	cmp	r9, r8
   18ee0:	bls	18fd4 <__assert_fail@plt+0x6c68>
   18ee4:	cmp	r7, #4
   18ee8:	add	r0, sp, #16
   18eec:	add	r5, sp, #20
   18ef0:	bcc	18fc0 <__assert_fail@plt+0x6c54>
   18ef4:	mov	r1, #0
   18ef8:	bic	ip, r7, #3
   18efc:	mov	r3, #1
   18f00:	mov	lr, r7
   18f04:	vdup.32	q8, r1
   18f08:	subs	r2, ip, #4
   18f0c:	add	r3, r3, r2, lsr #2
   18f10:	and	r2, r3, #1
   18f14:	vmov.32	d16[0], r6
   18f18:	beq	18f74 <__assert_fail@plt+0x6c08>
   18f1c:	sub	r3, r3, r2
   18f20:	mov	r1, #0
   18f24:	mov	r7, r8
   18f28:	subs	r3, r3, #2
   18f2c:	ldr	r6, [r7, r1]!
   18f30:	add	r1, r1, #8
   18f34:	str	r6, [sp, #16]
   18f38:	ldr	r7, [r7, #4]
   18f3c:	vld1.32	{d18[0]}, [r0 :32]
   18f40:	str	r7, [sp, #20]
   18f44:	vld1.32	{d19[0]}, [r5 :32]
   18f48:	vmovl.u8	q10, d18
   18f4c:	vceq.i16	d20, d20, d8
   18f50:	vmovl.u8	q9, d19
   18f54:	vmovl.u16	q10, d20
   18f58:	vceq.i16	d18, d18, d8
   18f5c:	vand	q10, q10, q5
   18f60:	vmovl.u16	q9, d18
   18f64:	vadd.i32	q8, q8, q10
   18f68:	vand	q9, q9, q5
   18f6c:	vadd.i32	q8, q8, q9
   18f70:	bne	18f24 <__assert_fail@plt+0x6bb8>
   18f74:	cmp	r2, #0
   18f78:	beq	18fa0 <__assert_fail@plt+0x6c34>
   18f7c:	ldr	r1, [r8, r1]
   18f80:	str	r1, [sp, #12]
   18f84:	add	r1, sp, #12
   18f88:	vld1.32	{d18[0]}, [r1 :32]
   18f8c:	vmovl.u8	q9, d18
   18f90:	vceq.i16	d18, d18, d8
   18f94:	vmovl.u16	q9, d18
   18f98:	vand	q9, q9, q5
   18f9c:	vadd.i32	q8, q8, q9
   18fa0:	vext.8	q9, q8, q8, #8
   18fa4:	cmp	ip, lr
   18fa8:	vadd.i32	q8, q8, q9
   18fac:	vdup.32	q9, d16[1]
   18fb0:	vadd.i32	q8, q8, q9
   18fb4:	vmov.32	r6, d16[0]
   18fb8:	beq	18fd4 <__assert_fail@plt+0x6c68>
   18fbc:	add	r8, r8, ip
   18fc0:	ldrb	r0, [r8], #1
   18fc4:	cmp	r0, #9
   18fc8:	addeq	r6, r6, #1
   18fcc:	cmp	r9, r8
   18fd0:	bne	18fc0 <__assert_fail@plt+0x6c54>
   18fd4:	movw	r9, #33680	; 0x8390
   18fd8:	cmp	r4, #0
   18fdc:	mov	r5, #95	; 0x5f
   18fe0:	mov	r7, #32
   18fe4:	movt	r9, #3
   18fe8:	beq	1902c <__assert_fail@plt+0x6cc0>
   18fec:	ldr	r0, [sl]
   18ff0:	sub	r4, r4, #1
   18ff4:	ldr	r1, [r0, #20]
   18ff8:	ldr	r2, [r0, #24]
   18ffc:	cmp	r1, r2
   19000:	bcs	1901c <__assert_fail@plt+0x6cb0>
   19004:	add	r2, r1, #1
   19008:	str	r2, [r0, #20]
   1900c:	strb	r7, [r1]
   19010:	cmp	r4, #0
   19014:	bne	18fec <__assert_fail@plt+0x6c80>
   19018:	b	1902c <__assert_fail@plt+0x6cc0>
   1901c:	mov	r1, #32
   19020:	bl	12240 <__overflow@plt>
   19024:	cmp	r4, #0
   19028:	bne	18fec <__assert_fail@plt+0x6c80>
   1902c:	ldr	r4, [sp, #4]
   19030:	cmp	r6, #0
   19034:	beq	190a4 <__assert_fail@plt+0x6d38>
   19038:	ldr	r0, [sl]
   1903c:	ldr	r1, [r0, #20]
   19040:	ldr	r2, [r0, #24]
   19044:	cmp	r1, r2
   19048:	bcs	19064 <__assert_fail@plt+0x6cf8>
   1904c:	add	r2, r1, #1
   19050:	str	r2, [r0, #20]
   19054:	strb	r5, [r1]
   19058:	subs	r6, r6, #1
   1905c:	bne	19038 <__assert_fail@plt+0x6ccc>
   19060:	b	19074 <__assert_fail@plt+0x6d08>
   19064:	mov	r1, #95	; 0x5f
   19068:	bl	12240 <__overflow@plt>
   1906c:	subs	r6, r6, #1
   19070:	bne	19038 <__assert_fail@plt+0x6ccc>
   19074:	ldr	r0, [sl]
   19078:	ldr	r1, [r0, #20]
   1907c:	ldr	r2, [r0, #24]
   19080:	cmp	r1, r2
   19084:	bcs	191a4 <__assert_fail@plt+0x6e38>
   19088:	add	r2, r1, #1
   1908c:	str	r2, [r0, #20]
   19090:	mov	r0, #10
   19094:	strb	r0, [r1]
   19098:	cmp	r4, #0
   1909c:	bne	190cc <__assert_fail@plt+0x6d60>
   190a0:	b	18b00 <__assert_fail@plt+0x6794>
   190a4:	movw	r1, #27707	; 0x6c3b
   190a8:	mov	r0, #0
   190ac:	mov	r2, #5
   190b0:	movt	r1, #2
   190b4:	bl	11f7c <dcgettext@plt>
   190b8:	mov	r1, r0
   190bc:	mov	r0, #1
   190c0:	bl	121d4 <__printf_chk@plt>
   190c4:	cmp	r4, #0
   190c8:	beq	18b00 <__assert_fail@plt+0x6794>
   190cc:	ldr	r4, [r4, #36]	; 0x24
   190d0:	cmp	r4, #0
   190d4:	bne	18b38 <__assert_fail@plt+0x67cc>
   190d8:	movw	r0, #33662	; 0x837e
   190dc:	movt	r0, #3
   190e0:	ldrb	r0, [r0]
   190e4:	cmp	r0, #0
   190e8:	bne	18b00 <__assert_fail@plt+0x6794>
   190ec:	movw	r0, #33661	; 0x837d
   190f0:	movt	r0, #3
   190f4:	ldrb	r0, [r0]
   190f8:	cmp	r0, #0
   190fc:	beq	18b38 <__assert_fail@plt+0x67cc>
   19100:	b	18b00 <__assert_fail@plt+0x6794>
   19104:	mov	lr, r3
   19108:	ldm	sp, {r3, r4}
   1910c:	movw	r0, #33514	; 0x82ea
   19110:	movt	r0, #3
   19114:	ldrb	r0, [r0]
   19118:	cmp	r2, r0
   1911c:	bne	19154 <__assert_fail@plt+0x6de8>
   19120:	ldrb	r1, [r5]
   19124:	sub	r0, r1, #48	; 0x30
   19128:	cmp	r0, #9
   1912c:	bhi	19158 <__assert_fail@plt+0x6dec>
   19130:	uxtb	r0, r1
   19134:	uxtb	r2, r9
   19138:	cmp	r2, r0
   1913c:	movcc	r9, r1
   19140:	ldrb	r1, [r5, #1]!
   19144:	sub	r0, r1, #48	; 0x30
   19148:	cmp	r0, #10
   1914c:	bcc	19130 <__assert_fail@plt+0x6dc4>
   19150:	b	19158 <__assert_fail@plt+0x6dec>
   19154:	mov	r5, lr
   19158:	uxtb	r0, r9
   1915c:	mov	r9, r8
   19160:	cmp	r0, #48	; 0x30
   19164:	bcc	18db4 <__assert_fail@plt+0x6a48>
   19168:	ldrb	r0, [r4, #29]
   1916c:	cmp	r0, #0
   19170:	beq	19190 <__assert_fail@plt+0x6e24>
   19174:	ldrb	r0, [r5]
   19178:	movw	r1, #28728	; 0x7038
   1917c:	movt	r1, #2
   19180:	ldrb	r0, [r1, r0]
   19184:	cmp	r0, #0
   19188:	movwne	r0, #1
   1918c:	b	19194 <__assert_fail@plt+0x6e28>
   19190:	mov	r0, #0
   19194:	add	r9, r5, r0
   19198:	b	18db0 <__assert_fail@plt+0x6a44>
   1919c:	mov	r9, r6
   191a0:	b	18db8 <__assert_fail@plt+0x6a4c>
   191a4:	mov	r1, #10
   191a8:	bl	12240 <__overflow@plt>
   191ac:	cmp	r4, #0
   191b0:	bne	190cc <__assert_fail@plt+0x6d60>
   191b4:	b	18b00 <__assert_fail@plt+0x6794>
   191b8:	movw	r1, #27694	; 0x6c2e
   191bc:	mov	r0, #0
   191c0:	mov	r2, #5
   191c4:	movt	r1, #2
   191c8:	bl	11f7c <dcgettext@plt>
   191cc:	mov	r1, r8
   191d0:	bl	173f0 <__assert_fail@plt+0x5084>
   191d4:	push	{r4, r5, fp, lr}
   191d8:	add	fp, sp, #8
   191dc:	mov	r2, r0
   191e0:	movw	r0, #33256	; 0x81e8
   191e4:	ldr	ip, [r1, #12]
   191e8:	ldr	r5, [r1, #8]
   191ec:	movt	r0, #3
   191f0:	ldr	r3, [r0]
   191f4:	ldm	r2, {r0, r2}
   191f8:	cmp	ip, #0
   191fc:	addeq	r5, r5, #1
   19200:	add	r2, r0, r2
   19204:	cmp	r3, #256	; 0x100
   19208:	sub	r2, r2, #1
   1920c:	bne	1922c <__assert_fail@plt+0x6ec0>
   19210:	cmp	r0, r2
   19214:	bcs	192e4 <__assert_fail@plt+0x6f78>
   19218:	movw	lr, #33680	; 0x8390
   1921c:	movt	lr, #3
   19220:	cmp	r5, #0
   19224:	bne	19284 <__assert_fail@plt+0x6f18>
   19228:	b	192e4 <__assert_fail@plt+0x6f78>
   1922c:	cmp	r0, r2
   19230:	bcs	192e4 <__assert_fail@plt+0x6f78>
   19234:	cmp	r5, #0
   19238:	beq	192e4 <__assert_fail@plt+0x6f78>
   1923c:	sub	r5, r5, #1
   19240:	cmp	r0, r2
   19244:	bcs	1922c <__assert_fail@plt+0x6ec0>
   19248:	ldrb	r4, [r0]
   1924c:	cmp	r3, r4
   19250:	beq	19264 <__assert_fail@plt+0x6ef8>
   19254:	add	r0, r0, #1
   19258:	cmp	r2, r0
   1925c:	bne	19248 <__assert_fail@plt+0x6edc>
   19260:	b	192e0 <__assert_fail@plt+0x6f74>
   19264:	orrs	r4, r5, ip
   19268:	addne	r0, r0, #1
   1926c:	b	1922c <__assert_fail@plt+0x6ec0>
   19270:	sub	r5, r5, #1
   19274:	cmp	r0, r2
   19278:	bcs	192e4 <__assert_fail@plt+0x6f78>
   1927c:	cmp	r5, #0
   19280:	beq	192e4 <__assert_fail@plt+0x6f78>
   19284:	cmp	r0, r2
   19288:	bcs	192ac <__assert_fail@plt+0x6f40>
   1928c:	ldrb	r3, [r0]
   19290:	ldrb	r3, [lr, r3]
   19294:	cmp	r3, #0
   19298:	beq	192ac <__assert_fail@plt+0x6f40>
   1929c:	add	r0, r0, #1
   192a0:	cmp	r2, r0
   192a4:	bne	1928c <__assert_fail@plt+0x6f20>
   192a8:	b	192d0 <__assert_fail@plt+0x6f64>
   192ac:	cmp	r0, r2
   192b0:	bcs	19270 <__assert_fail@plt+0x6f04>
   192b4:	ldrb	r3, [r0]
   192b8:	ldrb	r3, [lr, r3]
   192bc:	cmp	r3, #0
   192c0:	bne	19270 <__assert_fail@plt+0x6f04>
   192c4:	add	r0, r0, #1
   192c8:	cmp	r2, r0
   192cc:	bne	192b4 <__assert_fail@plt+0x6f48>
   192d0:	mov	r0, r2
   192d4:	cmp	ip, #0
   192d8:	bne	192ec <__assert_fail@plt+0x6f80>
   192dc:	pop	{r4, r5, fp, pc}
   192e0:	mov	r0, r2
   192e4:	cmp	ip, #0
   192e8:	beq	192dc <__assert_fail@plt+0x6f70>
   192ec:	ldrb	r1, [r1, #25]
   192f0:	cmp	r1, #0
   192f4:	beq	19328 <__assert_fail@plt+0x6fbc>
   192f8:	cmp	r0, r2
   192fc:	bcs	19328 <__assert_fail@plt+0x6fbc>
   19300:	movw	r1, #33680	; 0x8390
   19304:	movt	r1, #3
   19308:	ldrb	r3, [r0]
   1930c:	ldrb	r3, [r1, r3]
   19310:	cmp	r3, #0
   19314:	beq	19328 <__assert_fail@plt+0x6fbc>
   19318:	add	r0, r0, #1
   1931c:	cmp	r2, r0
   19320:	bne	19308 <__assert_fail@plt+0x6f9c>
   19324:	mov	r0, r2
   19328:	add	r0, r0, ip
   1932c:	cmp	r2, r0
   19330:	movcc	r0, r2
   19334:	pop	{r4, r5, fp, pc}
   19338:	push	{r4, r5, r6, sl, fp, lr}
   1933c:	add	fp, sp, #16
   19340:	movw	r2, #33256	; 0x81e8
   19344:	ldr	r3, [r0]
   19348:	ldr	r0, [r0, #4]
   1934c:	movt	r2, #3
   19350:	ldr	r4, [r2]
   19354:	ldm	r1, {r2, ip}
   19358:	add	r0, r3, r0
   1935c:	sub	lr, r0, #1
   19360:	cmp	r4, #256	; 0x100
   19364:	bne	193e0 <__assert_fail@plt+0x7074>
   19368:	cmp	r3, lr
   1936c:	bcs	19460 <__assert_fail@plt+0x70f4>
   19370:	movw	r0, #33680	; 0x8390
   19374:	movt	r0, #3
   19378:	cmp	r2, #0
   1937c:	beq	19460 <__assert_fail@plt+0x70f4>
   19380:	cmp	r3, lr
   19384:	bcs	193a8 <__assert_fail@plt+0x703c>
   19388:	ldrb	r4, [r3]
   1938c:	ldrb	r4, [r0, r4]
   19390:	cmp	r4, #0
   19394:	beq	193a8 <__assert_fail@plt+0x703c>
   19398:	add	r3, r3, #1
   1939c:	cmp	lr, r3
   193a0:	bne	19388 <__assert_fail@plt+0x701c>
   193a4:	b	19498 <__assert_fail@plt+0x712c>
   193a8:	cmp	r3, lr
   193ac:	bcs	193d0 <__assert_fail@plt+0x7064>
   193b0:	ldrb	r4, [r3]
   193b4:	ldrb	r4, [r0, r4]
   193b8:	cmp	r4, #0
   193bc:	bne	193d0 <__assert_fail@plt+0x7064>
   193c0:	add	r3, r3, #1
   193c4:	cmp	lr, r3
   193c8:	bne	193b0 <__assert_fail@plt+0x7044>
   193cc:	b	19498 <__assert_fail@plt+0x712c>
   193d0:	sub	r2, r2, #1
   193d4:	cmp	r3, lr
   193d8:	bcc	19378 <__assert_fail@plt+0x700c>
   193dc:	b	19460 <__assert_fail@plt+0x70f4>
   193e0:	cmp	r3, lr
   193e4:	bcs	19460 <__assert_fail@plt+0x70f4>
   193e8:	sub	r0, r0, #2
   193ec:	cmp	r2, #0
   193f0:	bne	19424 <__assert_fail@plt+0x70b8>
   193f4:	b	19460 <__assert_fail@plt+0x70f4>
   193f8:	mov	r3, lr
   193fc:	cmp	r5, lr
   19400:	mov	r5, #0
   19404:	movwcc	r5, #1
   19408:	cmp	r5, #0
   1940c:	addne	r3, r3, #1
   19410:	sub	r2, r2, #1
   19414:	cmp	r3, lr
   19418:	bcs	19460 <__assert_fail@plt+0x70f4>
   1941c:	cmp	r2, #0
   19420:	beq	19460 <__assert_fail@plt+0x70f4>
   19424:	cmp	r3, lr
   19428:	bcs	19410 <__assert_fail@plt+0x70a4>
   1942c:	ldrb	r6, [r3]
   19430:	mov	r5, #1
   19434:	cmp	r4, r6
   19438:	beq	19408 <__assert_fail@plt+0x709c>
   1943c:	add	r5, r3, #1
   19440:	cmp	r0, r3
   19444:	beq	193f8 <__assert_fail@plt+0x708c>
   19448:	ldrb	r3, [r3, #1]
   1944c:	cmp	r4, r3
   19450:	mov	r3, r5
   19454:	bne	1943c <__assert_fail@plt+0x70d0>
   19458:	mov	r3, r5
   1945c:	b	193fc <__assert_fail@plt+0x7090>
   19460:	ldrb	r0, [r1, #24]
   19464:	cmp	r0, #0
   19468:	beq	1949c <__assert_fail@plt+0x7130>
   1946c:	cmp	r3, lr
   19470:	bcs	1949c <__assert_fail@plt+0x7130>
   19474:	movw	r0, #33680	; 0x8390
   19478:	movt	r0, #3
   1947c:	ldrb	r1, [r3]
   19480:	ldrb	r1, [r0, r1]
   19484:	cmp	r1, #0
   19488:	beq	1949c <__assert_fail@plt+0x7130>
   1948c:	add	r3, r3, #1
   19490:	cmp	lr, r3
   19494:	bne	1947c <__assert_fail@plt+0x7110>
   19498:	mov	r3, lr
   1949c:	add	r0, r3, ip
   194a0:	cmp	lr, r0
   194a4:	movcc	r0, lr
   194a8:	pop	{r4, r5, r6, sl, fp, pc}
   194ac:	push	{r4, r5, r6, r7, fp, lr}
   194b0:	add	fp, sp, #16
   194b4:	mov	r5, r2
   194b8:	mov	r4, r1
   194bc:	mov	r6, r0
   194c0:	bl	12198 <__errno_location@plt>
   194c4:	mov	r7, r0
   194c8:	mov	r0, #0
   194cc:	mov	r1, r4
   194d0:	mov	r2, r5
   194d4:	str	r0, [r7]
   194d8:	mov	r0, r6
   194dc:	bl	1218c <strxfrm@plt>
   194e0:	ldr	r5, [r7]
   194e4:	cmp	r5, #0
   194e8:	popeq	{r4, r5, r6, r7, fp, pc}
   194ec:	movw	r1, #27591	; 0x6bc7
   194f0:	mov	r0, #0
   194f4:	mov	r2, #5
   194f8:	movt	r1, #2
   194fc:	bl	11f7c <dcgettext@plt>
   19500:	mov	r2, r0
   19504:	mov	r0, #0
   19508:	mov	r1, r5
   1950c:	bl	120a8 <error@plt>
   19510:	movw	r1, #27620	; 0x6be4
   19514:	mov	r0, #0
   19518:	mov	r2, #5
   1951c:	movt	r1, #2
   19520:	bl	11f7c <dcgettext@plt>
   19524:	mov	r2, r0
   19528:	mov	r0, #0
   1952c:	mov	r1, #0
   19530:	bl	120a8 <error@plt>
   19534:	movw	r1, #27662	; 0x6c0e
   19538:	mov	r0, #0
   1953c:	mov	r2, #5
   19540:	movt	r1, #2
   19544:	bl	11f7c <dcgettext@plt>
   19548:	mov	r5, r0
   1954c:	mov	r0, #0
   19550:	mov	r1, #8
   19554:	mov	r2, r4
   19558:	bl	20800 <__assert_fail@plt+0xe494>
   1955c:	mov	r3, r0
   19560:	mov	r0, #2
   19564:	mov	r1, #0
   19568:	mov	r2, r5
   1956c:	bl	120a8 <error@plt>
   19570:	cmp	r0, r1
   19574:	bxeq	lr
   19578:	push	{r4, sl, fp, lr}
   1957c:	add	fp, sp, #8
   19580:	mov	r4, r0
   19584:	bl	11fac <dup2@plt>
   19588:	mov	r0, r4
   1958c:	pop	{r4, sl, fp, lr}
   19590:	b	12354 <close@plt>
   19594:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19598:	add	fp, sp, #28
   1959c:	sub	sp, sp, #28
   195a0:	mov	r5, r0
   195a4:	mov	r6, r1
   195a8:	mov	r0, r1
   195ac:	mov	r1, #4
   195b0:	mov	r4, r2
   195b4:	bl	227f0 <__assert_fail@plt+0x10484>
   195b8:	cmp	r6, #0
   195bc:	str	r0, [r4]
   195c0:	beq	197a8 <__assert_fail@plt+0x743c>
   195c4:	movw	r9, #26134	; 0x6616
   195c8:	mov	r7, r0
   195cc:	mov	r4, #0
   195d0:	stmib	sp, {r0, r5, r6}
   195d4:	movt	r9, #2
   195d8:	add	r0, r5, r4, lsl #3
   195dc:	ldr	sl, [r0, #4]
   195e0:	cmp	sl, #0
   195e4:	beq	19730 <__assert_fail@plt+0x73c4>
   195e8:	ldrb	r0, [sl, #8]
   195ec:	cmp	r0, #0
   195f0:	beq	19730 <__assert_fail@plt+0x73c4>
   195f4:	cmp	r0, #1
   195f8:	bne	19630 <__assert_fail@plt+0x72c4>
   195fc:	movw	r0, #34980	; 0x88a4
   19600:	ldr	r6, [sl, #4]
   19604:	add	r1, sp, #16
   19608:	movt	r0, #3
   1960c:	ldr	r0, [r0]
   19610:	str	r6, [sp, #20]
   19614:	bl	1e2c0 <__assert_fail@plt+0xbf54>
   19618:	cmp	r0, #0
   1961c:	movne	r1, #2
   19620:	strbne	r1, [r0, #8]
   19624:	movne	r0, r6
   19628:	blne	1a768 <__assert_fail@plt+0x83fc>
   1962c:	ldr	r7, [sp, #4]
   19630:	add	r0, sl, #9
   19634:	mov	r1, #0
   19638:	mov	r5, r9
   1963c:	mov	r8, #0
   19640:	bl	120b4 <open64@plt>
   19644:	cmp	r0, #0
   19648:	bmi	1975c <__assert_fail@plt+0x73f0>
   1964c:	mov	r9, r0
   19650:	add	r0, sp, #16
   19654:	mov	r1, #9
   19658:	bl	1a510 <__assert_fail@plt+0x81a4>
   1965c:	cmn	r0, #1
   19660:	beq	1976c <__assert_fail@plt+0x7400>
   19664:	cmp	r0, #0
   19668:	beq	197c0 <__assert_fail@plt+0x7454>
   1966c:	str	r0, [sl, #4]
   19670:	movw	r0, #34980	; 0x88a4
   19674:	movt	r0, #3
   19678:	ldr	r0, [r0]
   1967c:	cmp	r0, #0
   19680:	bne	196bc <__assert_fail@plt+0x7350>
   19684:	movw	r2, #43148	; 0xa88c
   19688:	movw	r3, #43164	; 0xa89c
   1968c:	mov	r0, #0
   19690:	mov	r1, #0
   19694:	movt	r2, #1
   19698:	movt	r3, #1
   1969c:	str	r0, [sp]
   196a0:	mov	r0, #47	; 0x2f
   196a4:	bl	1d72c <__assert_fail@plt+0xb3c0>
   196a8:	movw	r1, #34980	; 0x88a4
   196ac:	cmp	r0, #0
   196b0:	movt	r1, #3
   196b4:	str	r0, [r1]
   196b8:	beq	19814 <__assert_fail@plt+0x74a8>
   196bc:	mov	r1, #1
   196c0:	strb	r1, [sl, #8]
   196c4:	mov	r1, sl
   196c8:	bl	1e280 <__assert_fail@plt+0xbf14>
   196cc:	cmp	r0, #0
   196d0:	beq	19814 <__assert_fail@plt+0x74a8>
   196d4:	mov	r0, r9
   196d8:	bl	12354 <close@plt>
   196dc:	ldr	r0, [sp, #20]
   196e0:	bl	12354 <close@plt>
   196e4:	ldr	r0, [sp, #16]
   196e8:	mov	r1, r5
   196ec:	mov	r9, r5
   196f0:	bl	11e20 <fdopen@plt>
   196f4:	ldr	r6, [sp, #12]
   196f8:	mov	r8, r0
   196fc:	cmp	r0, #0
   19700:	bne	19728 <__assert_fail@plt+0x73bc>
   19704:	bl	12198 <__errno_location@plt>
   19708:	mov	r6, r0
   1970c:	ldr	r7, [r0]
   19710:	ldr	r0, [sp, #16]
   19714:	bl	12354 <close@plt>
   19718:	str	r7, [r6]
   1971c:	ldr	r7, [sp, #4]
   19720:	ldr	r6, [sp, #12]
   19724:	mov	r8, #0
   19728:	ldr	r5, [sp, #8]
   1972c:	b	19740 <__assert_fail@plt+0x73d4>
   19730:	ldr	r0, [r5, r4, lsl #3]
   19734:	mov	r1, r9
   19738:	bl	17464 <__assert_fail@plt+0x50f8>
   1973c:	mov	r8, r0
   19740:	cmp	r8, #0
   19744:	str	r8, [r7, r4, lsl #2]
   19748:	beq	197b4 <__assert_fail@plt+0x7448>
   1974c:	add	r4, r4, #1
   19750:	cmp	r6, r4
   19754:	bne	195d8 <__assert_fail@plt+0x726c>
   19758:	b	197b0 <__assert_fail@plt+0x7444>
   1975c:	mov	r9, r5
   19760:	ldr	r6, [sp, #12]
   19764:	ldr	r5, [sp, #8]
   19768:	b	19740 <__assert_fail@plt+0x73d4>
   1976c:	bl	12198 <__errno_location@plt>
   19770:	ldr	r6, [r0]
   19774:	cmp	r6, #24
   19778:	bne	19818 <__assert_fail@plt+0x74ac>
   1977c:	mov	r7, r0
   19780:	mov	r0, r9
   19784:	bl	12354 <close@plt>
   19788:	mov	r0, #24
   1978c:	mov	r9, r5
   19790:	ldr	r6, [sp, #12]
   19794:	ldr	r5, [sp, #8]
   19798:	mov	r8, #0
   1979c:	str	r0, [r7]
   197a0:	ldr	r7, [sp, #4]
   197a4:	b	19740 <__assert_fail@plt+0x73d4>
   197a8:	mov	r4, #0
   197ac:	b	197b4 <__assert_fail@plt+0x7448>
   197b0:	mov	r4, r6
   197b4:	mov	r0, r4
   197b8:	sub	sp, fp, #28
   197bc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   197c0:	ldr	r0, [sp, #16]
   197c4:	bl	12354 <close@plt>
   197c8:	mov	r0, r9
   197cc:	mov	r1, #0
   197d0:	bl	19570 <__assert_fail@plt+0x7204>
   197d4:	ldr	r0, [sp, #20]
   197d8:	mov	r1, #1
   197dc:	bl	19570 <__assert_fail@plt+0x7204>
   197e0:	movw	r0, #33656	; 0x8378
   197e4:	movw	r2, #27772	; 0x6c7c
   197e8:	mov	r3, #0
   197ec:	movt	r0, #3
   197f0:	movt	r2, #2
   197f4:	ldr	r0, [r0]
   197f8:	mov	r1, r0
   197fc:	bl	11ef8 <execlp@plt>
   19800:	bl	12198 <__errno_location@plt>
   19804:	ldr	r0, [r0]
   19808:	movw	r1, #27775	; 0x6c7f
   1980c:	movt	r1, #2
   19810:	bl	1a6dc <__assert_fail@plt+0x8370>
   19814:	bl	22c5c <__assert_fail@plt+0x108f0>
   19818:	movw	r1, #27741	; 0x6c5d
   1981c:	mov	r0, #0
   19820:	mov	r2, #5
   19824:	movt	r1, #2
   19828:	bl	11f7c <dcgettext@plt>
   1982c:	mov	r4, r0
   19830:	movw	r0, #33656	; 0x8378
   19834:	movt	r0, #3
   19838:	ldr	r1, [r0]
   1983c:	mov	r0, #4
   19840:	bl	208a8 <__assert_fail@plt+0xe53c>
   19844:	mov	r3, r0
   19848:	mov	r0, #2
   1984c:	mov	r1, r6
   19850:	mov	r2, r4
   19854:	bl	120a8 <error@plt>
   19858:	nop	{0}
   1985c:	nop	{0}
   19860:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19864:	add	fp, sp, #28
   19868:	sub	sp, sp, #84	; 0x54
   1986c:	str	r1, [sp, #44]	; 0x2c
   19870:	str	r0, [fp, #-48]	; 0xffffffd0
   19874:	mov	r0, r2
   19878:	mov	r1, #28
   1987c:	str	r3, [sp, #32]
   19880:	mov	r9, r2
   19884:	bl	227f0 <__assert_fail@plt+0x10484>
   19888:	str	r0, [fp, #-52]	; 0xffffffcc
   1988c:	mov	r0, r9
   19890:	mov	r1, #4
   19894:	bl	227f0 <__assert_fail@plt+0x10484>
   19898:	str	r0, [sp, #56]	; 0x38
   1989c:	mov	r0, r9
   198a0:	mov	r1, #4
   198a4:	bl	227f0 <__assert_fail@plt+0x10484>
   198a8:	str	r0, [sp, #48]	; 0x30
   198ac:	mov	r0, r9
   198b0:	mov	r1, #4
   198b4:	bl	227f0 <__assert_fail@plt+0x10484>
   198b8:	ldr	sl, [fp, #12]
   198bc:	mov	r8, r0
   198c0:	mov	r0, #0
   198c4:	cmp	r9, #0
   198c8:	str	r0, [fp, #-44]	; 0xffffffd4
   198cc:	beq	1a210 <__assert_fail@plt+0x7ea4>
   198d0:	movw	r0, #33664	; 0x8380
   198d4:	str	r8, [sp, #52]	; 0x34
   198d8:	movt	r0, #3
   198dc:	ldr	r0, [r0]
   198e0:	str	r0, [sp, #16]
   198e4:	ldr	r0, [fp, #-48]	; 0xffffffd0
   198e8:	add	r0, r0, #16
   198ec:	str	r0, [sp, #40]	; 0x28
   198f0:	add	r0, sl, #4
   198f4:	mov	sl, #0
   198f8:	str	r0, [sp, #24]
   198fc:	b	1994c <__assert_fail@plt+0x75e0>
   19900:	andeq	r0, r0, r0
   19904:	andeq	r0, r0, r1
   19908:	andeq	r0, r0, r2
   1990c:	andeq	r0, r0, r3
   19910:	ldr	r0, [r5]
   19914:	ldr	r1, [r6]
   19918:	ldr	r2, [sp, #56]	; 0x38
   1991c:	mov	r9, r8
   19920:	ldr	r8, [sp, #52]	; 0x34
   19924:	add	r0, r1, r0
   19928:	sub	r1, r0, #16
   1992c:	str	r1, [r2, sl, lsl #2]
   19930:	ldr	r1, [r7]
   19934:	sub	r0, r0, r1, lsl #4
   19938:	ldr	r1, [sp, #48]	; 0x30
   1993c:	str	r0, [r1, sl, lsl #2]
   19940:	add	sl, sl, #1
   19944:	cmp	sl, r9
   19948:	bcs	19b64 <__assert_fail@plt+0x77f8>
   1994c:	ldr	r1, [fp, #-52]	; 0xffffffcc
   19950:	rsb	r0, sl, sl, lsl #3
   19954:	add	r6, r1, r0, lsl #2
   19958:	movw	r0, #33676	; 0x838c
   1995c:	movw	r1, #33376	; 0x8260
   19960:	movt	r0, #3
   19964:	movt	r1, #3
   19968:	ldr	r0, [r0]
   1996c:	ldr	r1, [r1]
   19970:	udiv	r0, r0, r9
   19974:	cmp	r1, r0
   19978:	movhi	r0, r1
   1997c:	and	r1, r0, #15
   19980:	sub	r0, r0, r1
   19984:	add	r7, r0, #16
   19988:	mov	r0, r7
   1998c:	bl	23cf8 <__assert_fail@plt+0x1198c>
   19990:	cmp	r0, #0
   19994:	str	r0, [r6]
   19998:	bne	199ac <__assert_fail@plt+0x7640>
   1999c:	lsr	r0, r7, #1
   199a0:	cmp	r7, #35	; 0x23
   199a4:	bhi	1997c <__assert_fail@plt+0x7610>
   199a8:	b	19c44 <__assert_fail@plt+0x78d8>
   199ac:	mov	r5, r6
   199b0:	mov	r8, r9
   199b4:	ldr	r9, [fp, #-48]	; 0xffffffd0
   199b8:	ldr	r4, [fp, #12]
   199bc:	mov	r0, #0
   199c0:	mov	r1, #16
   199c4:	str	r7, [r5, #12]!
   199c8:	mov	r7, r5
   199cc:	str	r0, [r5, #4]
   199d0:	str	r1, [r5, #8]
   199d4:	strb	r0, [r5, #12]
   199d8:	str	r0, [r5, #-8]
   199dc:	str	r0, [r7, #-4]!
   199e0:	mov	r0, r6
   199e4:	ldr	r2, [r9, sl, lsl #3]
   199e8:	ldr	r1, [r4, sl, lsl #2]
   199ec:	bl	176d4 <__assert_fail@plt+0x5368>
   199f0:	cmp	r0, #0
   199f4:	bne	19910 <__assert_fail@plt+0x75a4>
   199f8:	ldr	r1, [r9, sl, lsl #3]
   199fc:	ldr	r0, [r4, sl, lsl #2]
   19a00:	bl	16a64 <__assert_fail@plt+0x46f8>
   19a04:	ldr	r5, [sp, #44]	; 0x2c
   19a08:	cmp	sl, r5
   19a0c:	bcs	19a20 <__assert_fail@plt+0x76b4>
   19a10:	ldr	r0, [r9, sl, lsl #3]
   19a14:	bl	1a8b4 <__assert_fail@plt+0x8548>
   19a18:	sub	r5, r5, #1
   19a1c:	str	r5, [sp, #44]	; 0x2c
   19a20:	ldr	r0, [r6]
   19a24:	bl	1d148 <__assert_fail@plt+0xaddc>
   19a28:	sub	r9, r8, #1
   19a2c:	cmp	sl, r9
   19a30:	bcs	19b58 <__assert_fail@plt+0x77ec>
   19a34:	mvn	r1, sl
   19a38:	mov	r4, r8
   19a3c:	add	r2, r8, r1
   19a40:	ldr	r8, [sp, #52]	; 0x34
   19a44:	mov	r1, sl
   19a48:	cmp	r2, #2
   19a4c:	bcc	19ab0 <__assert_fail@plt+0x7744>
   19a50:	ldr	r7, [fp, #-48]	; 0xffffffd0
   19a54:	ldr	r1, [fp, #12]
   19a58:	add	r3, r1, sl, lsl #2
   19a5c:	add	r1, r1, r4, lsl #2
   19a60:	add	r7, r7, sl, lsl #3
   19a64:	cmp	r7, r1
   19a68:	bcs	19a80 <__assert_fail@plt+0x7714>
   19a6c:	ldr	r1, [fp, #-48]	; 0xffffffd0
   19a70:	add	r1, r1, r4, lsl #3
   19a74:	cmp	r3, r1
   19a78:	mov	r1, sl
   19a7c:	bcc	19ab0 <__assert_fail@plt+0x7744>
   19a80:	bic	ip, r2, #1
   19a84:	add	r1, sl, ip
   19a88:	mov	r6, ip
   19a8c:	add	r5, r7, #8
   19a90:	subs	r6, r6, #2
   19a94:	vld1.32	{d16-d17}, [r5]
   19a98:	vst1.32	{d16-d17}, [r7]!
   19a9c:	vldr	d16, [r3, #4]
   19aa0:	vst1.32	{d16}, [r3]!
   19aa4:	bne	19a8c <__assert_fail@plt+0x7720>
   19aa8:	cmp	r2, ip
   19aac:	beq	19944 <__assert_fail@plt+0x75d8>
   19ab0:	mvn	r2, r1
   19ab4:	add	r3, r4, r2
   19ab8:	sub	r2, r4, #2
   19abc:	tst	r3, #1
   19ac0:	mov	r3, r1
   19ac4:	beq	19af4 <__assert_fail@plt+0x7788>
   19ac8:	ldr	r5, [fp, #-48]	; 0xffffffd0
   19acc:	add	r3, r1, #1
   19ad0:	mov	r7, r5
   19ad4:	ldr	r6, [r7, r3, lsl #3]!
   19ad8:	ldr	r7, [r7, #4]
   19adc:	str	r6, [r5, r1, lsl #3]!
   19ae0:	str	r7, [r5, #4]
   19ae4:	ldr	r7, [fp, #12]
   19ae8:	mov	r6, r7
   19aec:	ldr	r7, [r7, r3, lsl #2]
   19af0:	str	r7, [r6, r1, lsl #2]
   19af4:	cmp	r2, r1
   19af8:	beq	19944 <__assert_fail@plt+0x75d8>
   19afc:	ldr	r1, [sp, #40]	; 0x28
   19b00:	ldr	r2, [sp, #24]
   19b04:	add	r1, r1, r3, lsl #3
   19b08:	add	r2, r2, r3, lsl #2
   19b0c:	mvn	r3, r3
   19b10:	add	r3, r3, r4
   19b14:	ldr	r7, [r1, #-8]
   19b18:	ldr	r6, [r1, #-4]
   19b1c:	subs	r3, r3, #2
   19b20:	str	r6, [r1, #-12]
   19b24:	str	r7, [r1, #-16]
   19b28:	ldr	r7, [r2]
   19b2c:	str	r7, [r2, #-4]
   19b30:	ldr	r7, [r1]
   19b34:	ldr	r6, [r1, #4]
   19b38:	str	r6, [r1, #-4]
   19b3c:	str	r7, [r1, #-8]
   19b40:	add	r1, r1, #16
   19b44:	ldr	r7, [r2, #4]
   19b48:	str	r7, [r2]
   19b4c:	add	r2, r2, #8
   19b50:	bne	19b14 <__assert_fail@plt+0x77a8>
   19b54:	b	19944 <__assert_fail@plt+0x75d8>
   19b58:	ldr	r8, [sp, #52]	; 0x34
   19b5c:	cmp	sl, r9
   19b60:	bcc	1994c <__assert_fail@plt+0x75e0>
   19b64:	ldr	sl, [fp, #12]
   19b68:	cmp	r9, #0
   19b6c:	beq	1a210 <__assert_fail@plt+0x7ea4>
   19b70:	mov	r0, #0
   19b74:	cmp	r9, #3
   19b78:	bls	19c50 <__assert_fail@plt+0x78e4>
   19b7c:	bic	r0, r9, #3
   19b80:	mov	r1, #1
   19b84:	sub	r3, pc, #652	; 0x28c
   19b88:	sub	r7, r0, #4
   19b8c:	add	r2, r1, r7, lsr #2
   19b90:	cmp	r7, #12
   19b94:	and	r1, r2, #3
   19b98:	bcs	19bb0 <__assert_fail@plt+0x7844>
   19b9c:	vld1.64	{d16-d17}, [r3 :128]
   19ba0:	mov	r2, #0
   19ba4:	cmp	r1, #0
   19ba8:	bne	19c20 <__assert_fail@plt+0x78b4>
   19bac:	b	19c48 <__assert_fail@plt+0x78dc>
   19bb0:	sub	r7, pc, #696	; 0x2b8
   19bb4:	vmov.i32	q9, #12	; 0x0000000c
   19bb8:	vmov.i32	q10, #8	; 0x00000008
   19bbc:	vmov.i32	q11, #4	; 0x00000004
   19bc0:	vmov.i32	q12, #16	; 0x00000010
   19bc4:	sub	r3, r2, r1
   19bc8:	mov	r2, #0
   19bcc:	mov	r5, r8
   19bd0:	mov	r6, r8
   19bd4:	vld1.64	{d16-d17}, [r7 :128]
   19bd8:	mov	r7, #64	; 0x40
   19bdc:	vadd.i32	q13, q8, q9
   19be0:	add	r4, r5, #48	; 0x30
   19be4:	vadd.i32	q14, q8, q10
   19be8:	vadd.i32	q15, q8, q11
   19bec:	subs	r3, r3, #4
   19bf0:	add	r2, r2, #16
   19bf4:	vst1.32	{d26-d27}, [r4]
   19bf8:	vst1.32	{d16-d17}, [r6], r7
   19bfc:	vadd.i32	q8, q8, q12
   19c00:	add	r4, r5, #32
   19c04:	add	r5, r5, #16
   19c08:	vst1.32	{d28-d29}, [r4]
   19c0c:	vst1.32	{d30-d31}, [r5]
   19c10:	mov	r5, r6
   19c14:	bne	19bdc <__assert_fail@plt+0x7870>
   19c18:	cmp	r1, #0
   19c1c:	beq	19c48 <__assert_fail@plt+0x78dc>
   19c20:	vmov.i32	q9, #4	; 0x00000004
   19c24:	add	r2, r8, r2, lsl #2
   19c28:	rsb	r1, r1, #0
   19c2c:	vadd.i32	q10, q8, q9
   19c30:	vst1.32	{d16-d17}, [r2]!
   19c34:	adds	r1, r1, #1
   19c38:	vorr	q8, q10, q10
   19c3c:	bcc	19c2c <__assert_fail@plt+0x78c0>
   19c40:	b	19c48 <__assert_fail@plt+0x78dc>
   19c44:	bl	22c5c <__assert_fail@plt+0x108f0>
   19c48:	cmp	r9, r0
   19c4c:	beq	19c5c <__assert_fail@plt+0x78f0>
   19c50:	str	r0, [r8, r0, lsl #2]
   19c54:	add	r0, r0, #1
   19c58:	b	19c48 <__assert_fail@plt+0x78dc>
   19c5c:	ldr	r2, [sp, #56]	; 0x38
   19c60:	cmp	r9, #2
   19c64:	bcc	19cb8 <__assert_fail@plt+0x794c>
   19c68:	mov	r6, #1
   19c6c:	b	19c80 <__assert_fail@plt+0x7914>
   19c70:	ldr	r2, [sp, #56]	; 0x38
   19c74:	add	r6, r6, #1
   19c78:	cmp	r6, r9
   19c7c:	bcs	19cb8 <__assert_fail@plt+0x794c>
   19c80:	ldr	r0, [r8, r6, lsl #2]
   19c84:	sub	r4, r6, #1
   19c88:	ldr	r1, [r2, r0, lsl #2]
   19c8c:	ldr	r0, [r8, r4, lsl #2]
   19c90:	ldr	r0, [r2, r0, lsl #2]
   19c94:	bl	179f8 <__assert_fail@plt+0x568c>
   19c98:	cmp	r0, #1
   19c9c:	blt	19c70 <__assert_fail@plt+0x7904>
   19ca0:	ldr	r0, [r8, r4, lsl #2]
   19ca4:	ldr	r1, [r8, r6, lsl #2]
   19ca8:	str	r1, [r8, r4, lsl #2]
   19cac:	str	r0, [r8, r6, lsl #2]
   19cb0:	mov	r6, #0
   19cb4:	b	19c70 <__assert_fail@plt+0x7904>
   19cb8:	cmp	r9, #0
   19cbc:	beq	1a210 <__assert_fail@plt+0x7ea4>
   19cc0:	add	r0, r8, #4
   19cc4:	ldr	r4, [sp, #56]	; 0x38
   19cc8:	mov	r7, #0
   19ccc:	str	r9, [sp, #40]	; 0x28
   19cd0:	str	r0, [sp, #20]
   19cd4:	ldr	r0, [sp, #48]	; 0x30
   19cd8:	add	r0, r0, #4
   19cdc:	str	r0, [sp, #12]
   19ce0:	add	r0, r4, #4
   19ce4:	str	r0, [sp, #8]
   19ce8:	ldr	r0, [fp, #-52]	; 0xffffffcc
   19cec:	add	r0, r0, #28
   19cf0:	str	r0, [sp, #4]
   19cf4:	mov	r0, #0
   19cf8:	str	r0, [sp, #28]
   19cfc:	b	19d18 <__assert_fail@plt+0x79ac>
   19d00:	mov	r5, lr
   19d04:	str	r7, [r8, r5, lsl #2]
   19d08:	ldr	r7, [sp, #36]	; 0x24
   19d0c:	cmp	r9, #0
   19d10:	str	r9, [sp, #40]	; 0x28
   19d14:	beq	1a1d8 <__assert_fail@plt+0x7e6c>
   19d18:	ldr	r0, [r8]
   19d1c:	ldr	sl, [r4, r0, lsl #2]
   19d20:	movw	r0, #33662	; 0x837e
   19d24:	movt	r0, #3
   19d28:	ldrb	r0, [r0]
   19d2c:	cmp	r0, #1
   19d30:	bne	19d98 <__assert_fail@plt+0x7a2c>
   19d34:	ldr	r0, [sp, #28]
   19d38:	ldr	r6, [fp, #-48]	; 0xffffffd0
   19d3c:	cmp	r0, #0
   19d40:	beq	19d64 <__assert_fail@plt+0x79f8>
   19d44:	mov	r1, sl
   19d48:	bl	179f8 <__assert_fail@plt+0x568c>
   19d4c:	cmp	r0, #0
   19d50:	beq	19dcc <__assert_fail@plt+0x7a60>
   19d54:	ldr	r1, [sp, #32]
   19d58:	ldr	r2, [fp, #8]
   19d5c:	sub	r0, fp, #44	; 0x2c
   19d60:	bl	189f8 <__assert_fail@plt+0x668c>
   19d64:	ldr	r2, [sl, #4]
   19d68:	cmp	r7, r2
   19d6c:	bcs	19dbc <__assert_fail@plt+0x7a50>
   19d70:	ldr	r5, [fp, #-52]	; 0xffffffcc
   19d74:	ldr	r9, [sp, #40]	; 0x28
   19d78:	mov	r0, r7
   19d7c:	cmp	r0, #0
   19d80:	beq	19dd8 <__assert_fail@plt+0x7a6c>
   19d84:	lsl	r7, r0, #1
   19d88:	cmp	r2, r0, lsl #1
   19d8c:	mov	r0, r7
   19d90:	bhi	19d7c <__assert_fail@plt+0x7a10>
   19d94:	b	19ddc <__assert_fail@plt+0x7a70>
   19d98:	ldr	r1, [sp, #32]
   19d9c:	ldr	r2, [fp, #8]
   19da0:	mov	r0, sl
   19da4:	str	r7, [sp, #36]	; 0x24
   19da8:	bl	189f8 <__assert_fail@plt+0x668c>
   19dac:	ldr	r5, [fp, #-52]	; 0xffffffcc
   19db0:	ldr	r6, [fp, #-48]	; 0xffffffd0
   19db4:	ldr	r9, [sp, #40]	; 0x28
   19db8:	b	19e40 <__assert_fail@plt+0x7ad4>
   19dbc:	ldr	r0, [fp, #-44]	; 0xffffffd4
   19dc0:	ldr	r5, [fp, #-52]	; 0xffffffcc
   19dc4:	ldr	r9, [sp, #40]	; 0x28
   19dc8:	b	19df4 <__assert_fail@plt+0x7a88>
   19dcc:	ldr	r5, [fp, #-52]	; 0xffffffcc
   19dd0:	str	r7, [sp, #36]	; 0x24
   19dd4:	b	19db4 <__assert_fail@plt+0x7a48>
   19dd8:	mov	r7, r2
   19ddc:	ldr	r0, [fp, #-44]	; 0xffffffd4
   19de0:	bl	1d148 <__assert_fail@plt+0xaddc>
   19de4:	mov	r0, r7
   19de8:	bl	22720 <__assert_fail@plt+0x103b4>
   19dec:	str	r0, [fp, #-44]	; 0xffffffd4
   19df0:	ldr	r2, [sl, #4]
   19df4:	str	r2, [fp, #-40]	; 0xffffffd8
   19df8:	ldr	r1, [sl]
   19dfc:	bl	11eec <memcpy@plt>
   19e00:	ldr	r0, [sp, #16]
   19e04:	str	r7, [sp, #36]	; 0x24
   19e08:	cmp	r0, #0
   19e0c:	beq	19e38 <__assert_fail@plt+0x7acc>
   19e10:	ldr	r0, [sl]
   19e14:	ldr	r1, [sl, #8]
   19e18:	ldr	r2, [fp, #-44]	; 0xffffffd4
   19e1c:	sub	r1, r1, r0
   19e20:	add	r1, r2, r1
   19e24:	str	r1, [fp, #-36]	; 0xffffffdc
   19e28:	ldr	r1, [sl, #12]
   19e2c:	sub	r0, r1, r0
   19e30:	add	r0, r2, r0
   19e34:	str	r0, [fp, #-32]	; 0xffffffe0
   19e38:	sub	r0, fp, #44	; 0x2c
   19e3c:	str	r0, [sp, #28]
   19e40:	ldr	r7, [r8]
   19e44:	ldr	r0, [sp, #48]	; 0x30
   19e48:	ldr	r0, [r0, r7, lsl #2]
   19e4c:	cmp	r0, sl
   19e50:	bcs	19e64 <__assert_fail@plt+0x7af8>
   19e54:	sub	r0, sl, #16
   19e58:	ldr	sl, [fp, #12]
   19e5c:	str	r0, [r4, r7, lsl #2]
   19e60:	b	19eb4 <__assert_fail@plt+0x7b48>
   19e64:	ldr	sl, [fp, #12]
   19e68:	ldr	r2, [r6, r7, lsl #3]
   19e6c:	rsb	r0, r7, r7, lsl #3
   19e70:	add	r0, r5, r0, lsl #2
   19e74:	ldr	r1, [sl, r7, lsl #2]
   19e78:	bl	176d4 <__assert_fail@plt+0x5368>
   19e7c:	cmp	r0, #0
   19e80:	beq	19f8c <__assert_fail@plt+0x7c20>
   19e84:	ldr	r7, [r8]
   19e88:	mov	r1, r5
   19e8c:	rsb	r0, r7, r7, lsl #3
   19e90:	ldr	r0, [r1, r0, lsl #2]!
   19e94:	ldr	r2, [r1, #8]
   19e98:	ldr	r1, [r1, #12]
   19e9c:	add	r1, r0, r1
   19ea0:	sub	r0, r1, #16
   19ea4:	sub	r1, r1, r2, lsl #4
   19ea8:	ldr	r2, [sp, #48]	; 0x30
   19eac:	str	r0, [r4, r7, lsl #2]
   19eb0:	str	r1, [r2, r7, lsl #2]
   19eb4:	mov	r5, #0
   19eb8:	cmp	r9, #2
   19ebc:	bcc	19d04 <__assert_fail@plt+0x7998>
   19ec0:	mov	sl, r9
   19ec4:	mov	r9, #1
   19ec8:	mov	r6, #1
   19ecc:	b	19ee8 <__assert_fail@plt+0x7b7c>
   19ed0:	mov	sl, r9
   19ed4:	cmp	r6, sl
   19ed8:	bcs	19f18 <__assert_fail@plt+0x7bac>
   19edc:	ldr	r0, [r4, r7, lsl #2]
   19ee0:	add	r1, sl, r6
   19ee4:	lsr	r9, r1, #1
   19ee8:	ldr	r1, [r8, r9, lsl #2]
   19eec:	ldr	r1, [r4, r1, lsl #2]
   19ef0:	bl	179f8 <__assert_fail@plt+0x568c>
   19ef4:	cmp	r0, #0
   19ef8:	bmi	19ed0 <__assert_fail@plt+0x7b64>
   19efc:	bne	19f0c <__assert_fail@plt+0x7ba0>
   19f00:	ldr	r0, [r8, r9, lsl #2]
   19f04:	cmp	r7, r0
   19f08:	bcc	19ed0 <__assert_fail@plt+0x7b64>
   19f0c:	add	r6, r9, #1
   19f10:	cmp	r6, sl
   19f14:	bcc	19edc <__assert_fail@plt+0x7b70>
   19f18:	ldr	sl, [fp, #12]
   19f1c:	ldr	r9, [sp, #40]	; 0x28
   19f20:	subs	lr, r6, #1
   19f24:	beq	19d04 <__assert_fail@plt+0x7998>
   19f28:	mov	r1, #0
   19f2c:	cmp	lr, #4
   19f30:	bcc	1a1b0 <__assert_fail@plt+0x7e44>
   19f34:	bic	r1, lr, #3
   19f38:	mov	r3, #1
   19f3c:	subs	r2, r1, #4
   19f40:	add	r2, r3, r2, lsr #2
   19f44:	and	ip, r2, #1
   19f48:	beq	1a184 <__assert_fail@plt+0x7e18>
   19f4c:	sub	r5, ip, r2
   19f50:	mov	r2, #0
   19f54:	mov	r4, r8
   19f58:	mov	r0, #20
   19f5c:	add	r3, r4, #4
   19f60:	adds	r5, r5, #2
   19f64:	add	r2, r2, #8
   19f68:	vld1.32	{d16-d17}, [r3]
   19f6c:	mov	r3, r4
   19f70:	vst1.32	{d16-d17}, [r3], r0
   19f74:	vld1.32	{d16-d17}, [r3]
   19f78:	add	r3, r4, #16
   19f7c:	add	r4, r4, #32
   19f80:	vst1.32	{d16-d17}, [r3]
   19f84:	bne	19f5c <__assert_fail@plt+0x7bf0>
   19f88:	b	1a188 <__assert_fail@plt+0x7e1c>
   19f8c:	ldr	r4, [sp, #44]	; 0x2c
   19f90:	cmp	r9, #2
   19f94:	bcc	19fc0 <__assert_fail@plt+0x7c54>
   19f98:	ldr	r1, [sp, #20]
   19f9c:	sub	r0, r9, #1
   19fa0:	ldr	r2, [r1]
   19fa4:	ldr	r3, [r8]
   19fa8:	cmp	r2, r3
   19fac:	subhi	r2, r2, #1
   19fb0:	strhi	r2, [r1]
   19fb4:	add	r1, r1, #4
   19fb8:	subs	r0, r0, #1
   19fbc:	bne	19fa0 <__assert_fail@plt+0x7c34>
   19fc0:	ldr	r0, [r8]
   19fc4:	ldr	r1, [r6, r0, lsl #3]
   19fc8:	ldr	r0, [sl, r0, lsl #2]
   19fcc:	bl	16a64 <__assert_fail@plt+0x46f8>
   19fd0:	ldr	r0, [r8]
   19fd4:	sub	r9, r9, #1
   19fd8:	cmp	r0, r4
   19fdc:	bcs	19ff4 <__assert_fail@plt+0x7c88>
   19fe0:	ldr	r0, [r6, r0, lsl #3]
   19fe4:	bl	1a8b4 <__assert_fail@plt+0x8548>
   19fe8:	ldr	r0, [r8]
   19fec:	sub	r4, r4, #1
   19ff0:	str	r4, [sp, #44]	; 0x2c
   19ff4:	ldr	r1, [fp, #-52]	; 0xffffffcc
   19ff8:	rsb	r0, r0, r0, lsl #3
   19ffc:	ldr	r0, [r1, r0, lsl #2]
   1a000:	bl	1d148 <__assert_fail@plt+0xaddc>
   1a004:	ldr	r6, [r8]
   1a008:	mvn	sl, #15
   1a00c:	cmp	r6, r9
   1a010:	bcs	1a0ac <__assert_fail@plt+0x7d40>
   1a014:	ldr	r2, [fp, #-48]	; 0xffffffd0
   1a018:	ldr	r5, [sp, #40]	; 0x28
   1a01c:	ldr	r0, [sp, #12]
   1a020:	ldr	r1, [sp, #8]
   1a024:	mvn	r3, r6
   1a028:	add	r7, r2, r6, lsl #3
   1a02c:	ldr	r2, [sp, #24]
   1a030:	add	lr, r3, r5
   1a034:	ldr	r3, [sp, #4]
   1a038:	add	r0, r0, r6, lsl #2
   1a03c:	add	r1, r1, r6, lsl #2
   1a040:	mov	r4, r7
   1a044:	add	r2, r2, r6, lsl #2
   1a048:	rsb	r6, r6, r6, lsl #3
   1a04c:	add	r3, r3, r6, lsl #2
   1a050:	ldr	r5, [r2]
   1a054:	mov	r6, r3
   1a058:	subs	lr, lr, #1
   1a05c:	str	r5, [r2, #-4]
   1a060:	add	r2, r2, #4
   1a064:	ldr	r5, [r4, #8]!
   1a068:	ldr	ip, [r7, #12]
   1a06c:	stm	r7, {r5, ip}
   1a070:	add	r7, r3, #12
   1a074:	vld1.32	{d18-d19}, [r7]
   1a078:	vld1.32	{d16-d17}, [r6], sl
   1a07c:	sub	r7, r3, #28
   1a080:	add	r3, r3, #28
   1a084:	vst1.32	{d18-d19}, [r6]
   1a088:	vst1.32	{d16-d17}, [r7]
   1a08c:	ldr	r7, [r1]
   1a090:	str	r7, [r1, #-4]
   1a094:	ldr	r7, [r0]
   1a098:	add	r1, r1, #4
   1a09c:	str	r7, [r0, #-4]
   1a0a0:	add	r0, r0, #4
   1a0a4:	mov	r7, r4
   1a0a8:	bne	1a050 <__assert_fail@plt+0x7ce4>
   1a0ac:	ldr	r4, [sp, #56]	; 0x38
   1a0b0:	ldr	sl, [fp, #12]
   1a0b4:	ldr	r7, [sp, #36]	; 0x24
   1a0b8:	cmp	r9, #0
   1a0bc:	beq	1a1d8 <__assert_fail@plt+0x7e6c>
   1a0c0:	mov	r0, #0
   1a0c4:	cmp	r9, #3
   1a0c8:	bls	1a148 <__assert_fail@plt+0x7ddc>
   1a0cc:	bic	r0, r9, #3
   1a0d0:	mov	r2, #1
   1a0d4:	subs	r1, r0, #4
   1a0d8:	add	r1, r2, r1, lsr #2
   1a0dc:	and	r2, r1, #1
   1a0e0:	beq	1a174 <__assert_fail@plt+0x7e08>
   1a0e4:	sub	r3, r2, r1
   1a0e8:	mov	r1, #0
   1a0ec:	mov	r5, r8
   1a0f0:	add	r6, r5, #4
   1a0f4:	mov	r7, r5
   1a0f8:	adds	r3, r3, #2
   1a0fc:	add	r1, r1, #8
   1a100:	vld1.32	{d16-d17}, [r6]
   1a104:	mov	r6, #20
   1a108:	vst1.32	{d16-d17}, [r7], r6
   1a10c:	vld1.32	{d16-d17}, [r7]
   1a110:	add	r7, r5, #16
   1a114:	add	r5, r5, #32
   1a118:	vst1.32	{d16-d17}, [r7]
   1a11c:	bne	1a0f0 <__assert_fail@plt+0x7d84>
   1a120:	cmp	r2, #0
   1a124:	beq	1a13c <__assert_fail@plt+0x7dd0>
   1a128:	orr	r2, r1, #1
   1a12c:	add	r1, r8, r1, lsl #2
   1a130:	add	r2, r8, r2, lsl #2
   1a134:	vld1.32	{d16-d17}, [r2]
   1a138:	vst1.32	{d16-d17}, [r1]
   1a13c:	ldr	r7, [sp, #36]	; 0x24
   1a140:	cmp	r9, r0
   1a144:	beq	19d0c <__assert_fail@plt+0x79a0>
   1a148:	ldr	r1, [sp, #20]
   1a14c:	ldr	r2, [sp, #40]	; 0x28
   1a150:	add	r1, r1, r0, lsl #2
   1a154:	mvn	r0, r0
   1a158:	add	r0, r0, r2
   1a15c:	ldr	r2, [r1]
   1a160:	subs	r0, r0, #1
   1a164:	str	r2, [r1, #-4]
   1a168:	add	r1, r1, #4
   1a16c:	bne	1a15c <__assert_fail@plt+0x7df0>
   1a170:	b	19d0c <__assert_fail@plt+0x79a0>
   1a174:	mov	r1, #0
   1a178:	cmp	r2, #0
   1a17c:	bne	1a128 <__assert_fail@plt+0x7dbc>
   1a180:	b	1a13c <__assert_fail@plt+0x7dd0>
   1a184:	mov	r2, #0
   1a188:	ldr	r4, [sp, #56]	; 0x38
   1a18c:	cmp	ip, #0
   1a190:	beq	1a1a8 <__assert_fail@plt+0x7e3c>
   1a194:	orr	r3, r2, #1
   1a198:	add	r2, r8, r2, lsl #2
   1a19c:	add	r3, r8, r3, lsl #2
   1a1a0:	vld1.32	{d16-d17}, [r3]
   1a1a4:	vst1.32	{d16-d17}, [r2]
   1a1a8:	cmp	lr, r1
   1a1ac:	beq	19d00 <__assert_fail@plt+0x7994>
   1a1b0:	ldr	r2, [sp, #20]
   1a1b4:	add	r2, r2, r1, lsl #2
   1a1b8:	mvn	r1, r1
   1a1bc:	add	r1, r1, r6
   1a1c0:	ldr	r3, [r2]
   1a1c4:	subs	r1, r1, #1
   1a1c8:	str	r3, [r2, #-4]
   1a1cc:	add	r2, r2, #4
   1a1d0:	bne	1a1c0 <__assert_fail@plt+0x7e54>
   1a1d4:	b	19d00 <__assert_fail@plt+0x7994>
   1a1d8:	ldr	r0, [sp, #28]
   1a1dc:	cmp	r0, #0
   1a1e0:	beq	1a210 <__assert_fail@plt+0x7ea4>
   1a1e4:	movw	r0, #33662	; 0x837e
   1a1e8:	movt	r0, #3
   1a1ec:	ldrb	r0, [r0]
   1a1f0:	cmp	r0, #0
   1a1f4:	beq	1a210 <__assert_fail@plt+0x7ea4>
   1a1f8:	ldr	r1, [sp, #32]
   1a1fc:	ldr	r2, [fp, #8]
   1a200:	sub	r0, fp, #44	; 0x2c
   1a204:	bl	189f8 <__assert_fail@plt+0x668c>
   1a208:	ldr	r0, [fp, #-44]	; 0xffffffd4
   1a20c:	bl	1d148 <__assert_fail@plt+0xaddc>
   1a210:	ldr	r0, [sp, #32]
   1a214:	ldr	r1, [fp, #8]
   1a218:	bl	16a64 <__assert_fail@plt+0x46f8>
   1a21c:	mov	r0, sl
   1a220:	bl	1d148 <__assert_fail@plt+0xaddc>
   1a224:	ldr	r0, [fp, #-52]	; 0xffffffcc
   1a228:	bl	1d148 <__assert_fail@plt+0xaddc>
   1a22c:	mov	r0, r8
   1a230:	bl	1d148 <__assert_fail@plt+0xaddc>
   1a234:	ldr	r0, [sp, #48]	; 0x30
   1a238:	bl	1d148 <__assert_fail@plt+0xaddc>
   1a23c:	ldr	r0, [sp, #56]	; 0x38
   1a240:	bl	1d148 <__assert_fail@plt+0xaddc>
   1a244:	sub	sp, fp, #28
   1a248:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a24c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a250:	add	fp, sp, #28
   1a254:	sub	sp, sp, #148	; 0x94
   1a258:	movw	r7, #34988	; 0x88ac
   1a25c:	str	r1, [sp, #8]
   1a260:	movw	r1, #34712	; 0x8798
   1a264:	str	r0, [sp, #12]
   1a268:	movt	r1, #3
   1a26c:	movt	r7, #3
   1a270:	ldr	r0, [r7]
   1a274:	ldr	r1, [r1]
   1a278:	ldr	r6, [r1, r0, lsl #2]
   1a27c:	mov	r0, r6
   1a280:	bl	12174 <strlen@plt>
   1a284:	mov	r5, r0
   1a288:	add	r0, r0, #24
   1a28c:	bic	r0, r0, #3
   1a290:	bl	22720 <__assert_fail@plt+0x103b4>
   1a294:	add	sl, r0, #9
   1a298:	mov	r4, r0
   1a29c:	mov	r1, r6
   1a2a0:	mov	r2, r5
   1a2a4:	mov	r0, sl
   1a2a8:	bl	11eec <memcpy@plt>
   1a2ac:	movw	r0, #28984	; 0x7138
   1a2b0:	movw	r1, #22616	; 0x5858
   1a2b4:	movt	r0, #2
   1a2b8:	movt	r1, #88	; 0x58
   1a2bc:	vldr	d16, [r0]
   1a2c0:	add	r0, sl, r5
   1a2c4:	str	r1, [r0, #8]
   1a2c8:	vst1.8	{d16}, [r0]
   1a2cc:	mov	r0, #0
   1a2d0:	str	r0, [r4]
   1a2d4:	movw	r0, #33672	; 0x8388
   1a2d8:	movt	r0, #3
   1a2dc:	ldr	r1, [r7]
   1a2e0:	ldr	r0, [r0]
   1a2e4:	add	r1, r1, #1
   1a2e8:	subs	r0, r1, r0
   1a2ec:	movne	r0, r1
   1a2f0:	movw	r1, #33528	; 0x82f8
   1a2f4:	str	r0, [r7]
   1a2f8:	add	r0, sp, #16
   1a2fc:	movt	r1, #3
   1a300:	add	r9, r0, #4
   1a304:	mov	r0, #0
   1a308:	mov	r2, r9
   1a30c:	bl	12078 <pthread_sigmask@plt>
   1a310:	clz	r0, r0
   1a314:	mov	r1, #524288	; 0x80000
   1a318:	lsr	r0, r0, #5
   1a31c:	strb	r0, [sp, #16]
   1a320:	mov	r0, sl
   1a324:	bl	21b4c <__assert_fail@plt+0xf7e0>
   1a328:	mov	r7, r0
   1a32c:	cmp	r0, #0
   1a330:	bmi	1a348 <__assert_fail@plt+0x7fdc>
   1a334:	movw	r0, #33380	; 0x8264
   1a338:	movt	r0, #3
   1a33c:	ldr	r1, [r0]
   1a340:	str	r4, [r1]
   1a344:	str	r4, [r0]
   1a348:	bl	12198 <__errno_location@plt>
   1a34c:	mov	r5, r0
   1a350:	ldr	r8, [r0]
   1a354:	ldrb	r0, [sp, #16]
   1a358:	cmp	r0, #0
   1a35c:	beq	1a370 <__assert_fail@plt+0x8004>
   1a360:	mov	r0, #2
   1a364:	mov	r1, r9
   1a368:	mov	r2, #0
   1a36c:	bl	12078 <pthread_sigmask@plt>
   1a370:	cmn	r7, #1
   1a374:	str	r8, [r5]
   1a378:	ble	1a424 <__assert_fail@plt+0x80b8>
   1a37c:	movw	r6, #33656	; 0x8378
   1a380:	mov	r0, #0
   1a384:	movt	r6, #3
   1a388:	strb	r0, [r4, #8]
   1a38c:	ldr	r0, [r6]
   1a390:	cmp	r0, #0
   1a394:	beq	1a450 <__assert_fail@plt+0x80e4>
   1a398:	add	r0, sp, #16
   1a39c:	mov	r1, #4
   1a3a0:	bl	1a510 <__assert_fail@plt+0x81a4>
   1a3a4:	cmp	r0, #1
   1a3a8:	str	r0, [r4, #4]
   1a3ac:	blt	1a448 <__assert_fail@plt+0x80dc>
   1a3b0:	mov	r0, r7
   1a3b4:	bl	12354 <close@plt>
   1a3b8:	ldr	r0, [sp, #16]
   1a3bc:	bl	12354 <close@plt>
   1a3c0:	movw	r5, #34980	; 0x88a4
   1a3c4:	ldr	r7, [sp, #20]
   1a3c8:	movt	r5, #3
   1a3cc:	ldr	r0, [r5]
   1a3d0:	cmp	r0, #0
   1a3d4:	bne	1a408 <__assert_fail@plt+0x809c>
   1a3d8:	movw	r2, #43148	; 0xa88c
   1a3dc:	movw	r3, #43164	; 0xa89c
   1a3e0:	mov	r0, #0
   1a3e4:	mov	r1, #0
   1a3e8:	movt	r2, #1
   1a3ec:	movt	r3, #1
   1a3f0:	str	r0, [sp]
   1a3f4:	mov	r0, #47	; 0x2f
   1a3f8:	bl	1d72c <__assert_fail@plt+0xb3c0>
   1a3fc:	cmp	r0, #0
   1a400:	str	r0, [r5]
   1a404:	beq	1a420 <__assert_fail@plt+0x80b4>
   1a408:	mov	r1, #1
   1a40c:	strb	r1, [r4, #8]
   1a410:	mov	r1, r4
   1a414:	bl	1e280 <__assert_fail@plt+0xbf14>
   1a418:	cmp	r0, #0
   1a41c:	bne	1a450 <__assert_fail@plt+0x80e4>
   1a420:	bl	22c5c <__assert_fail@plt+0x108f0>
   1a424:	cmp	r8, #24
   1a428:	bne	1a47c <__assert_fail@plt+0x8110>
   1a42c:	ldr	r0, [sp, #8]
   1a430:	cmp	r0, #0
   1a434:	beq	1a47c <__assert_fail@plt+0x8110>
   1a438:	mov	r0, r4
   1a43c:	bl	1d148 <__assert_fail@plt+0xaddc>
   1a440:	mov	r4, #0
   1a444:	b	1a470 <__assert_fail@plt+0x8104>
   1a448:	cmp	r0, #0
   1a44c:	beq	1a4d0 <__assert_fail@plt+0x8164>
   1a450:	movw	r1, #27739	; 0x6c5b
   1a454:	mov	r0, r7
   1a458:	movt	r1, #2
   1a45c:	bl	11e20 <fdopen@plt>
   1a460:	ldr	r1, [sp, #12]
   1a464:	cmp	r0, #0
   1a468:	str	r0, [r1]
   1a46c:	beq	1a4b4 <__assert_fail@plt+0x8148>
   1a470:	mov	r0, r4
   1a474:	sub	sp, fp, #28
   1a478:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a47c:	movw	r1, #27970	; 0x6d42
   1a480:	mov	r0, #0
   1a484:	mov	r2, #5
   1a488:	movt	r1, #2
   1a48c:	bl	11f7c <dcgettext@plt>
   1a490:	mov	r4, r0
   1a494:	mov	r0, #4
   1a498:	mov	r1, r6
   1a49c:	bl	208a8 <__assert_fail@plt+0xe53c>
   1a4a0:	mov	r3, r0
   1a4a4:	mov	r0, #2
   1a4a8:	mov	r1, r8
   1a4ac:	mov	r2, r4
   1a4b0:	bl	120a8 <error@plt>
   1a4b4:	movw	r1, #27939	; 0x6d23
   1a4b8:	mov	r0, #0
   1a4bc:	mov	r2, #5
   1a4c0:	movt	r1, #2
   1a4c4:	bl	11f7c <dcgettext@plt>
   1a4c8:	mov	r1, sl
   1a4cc:	bl	173f0 <__assert_fail@plt+0x5084>
   1a4d0:	ldr	r0, [sp, #20]
   1a4d4:	bl	12354 <close@plt>
   1a4d8:	mov	r0, r7
   1a4dc:	mov	r1, #1
   1a4e0:	bl	19570 <__assert_fail@plt+0x7204>
   1a4e4:	ldr	r0, [sp, #16]
   1a4e8:	mov	r1, #0
   1a4ec:	bl	19570 <__assert_fail@plt+0x7204>
   1a4f0:	ldr	r0, [r6]
   1a4f4:	mov	r2, #0
   1a4f8:	mov	r1, r0
   1a4fc:	bl	11ef8 <execlp@plt>
   1a500:	ldr	r0, [r5]
   1a504:	movw	r1, #27905	; 0x6d01
   1a508:	movt	r1, #2
   1a50c:	bl	1a6dc <__assert_fail@plt+0x8370>
   1a510:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a514:	add	fp, sp, #28
   1a518:	sub	sp, sp, #4
   1a51c:	vpush	{d8}
   1a520:	sub	sp, sp, #144	; 0x90
   1a524:	mov	sl, r1
   1a528:	mov	r1, #524288	; 0x80000
   1a52c:	mov	r4, r0
   1a530:	bl	1ef60 <__assert_fail@plt+0xcbf4>
   1a534:	cmp	r0, #0
   1a538:	bmi	1a684 <__assert_fail@plt+0x8318>
   1a53c:	movw	r1, #33272	; 0x81f8
   1a540:	movw	r7, #34984	; 0x88a8
   1a544:	movt	r1, #3
   1a548:	movt	r7, #3
   1a54c:	ldr	r1, [r1]
   1a550:	ldr	r0, [r7]
   1a554:	add	r1, r1, #1
   1a558:	cmp	r1, r0
   1a55c:	bcs	1a584 <__assert_fail@plt+0x8218>
   1a560:	mvn	r0, #0
   1a564:	bl	1a768 <__assert_fail@plt+0x83fc>
   1a568:	ldr	r0, [r7]
   1a56c:	cmp	r0, #1
   1a570:	blt	1a584 <__assert_fail@plt+0x8218>
   1a574:	mov	r0, #0
   1a578:	bl	1a768 <__assert_fail@plt+0x83fc>
   1a57c:	cmp	r0, #0
   1a580:	bne	1a568 <__assert_fail@plt+0x81fc>
   1a584:	cmp	sl, #0
   1a588:	beq	1a68c <__assert_fail@plt+0x8320>
   1a58c:	str	r4, [sp, #4]
   1a590:	movw	r4, #34704	; 0x8790
   1a594:	vmov.f64	d8, #80	; 0x3e800000  0.250
   1a598:	add	r0, sp, #12
   1a59c:	movt	r4, #3
   1a5a0:	add	r0, r0, #4
   1a5a4:	str	r0, [sp, #8]
   1a5a8:	b	1a5b4 <__assert_fail@plt+0x8248>
   1a5ac:	cmp	sl, #0
   1a5b0:	beq	1a664 <__assert_fail@plt+0x82f8>
   1a5b4:	ldr	r2, [sp, #8]
   1a5b8:	movw	r1, #33528	; 0x82f8
   1a5bc:	mov	r0, #0
   1a5c0:	movt	r1, #3
   1a5c4:	bl	12078 <pthread_sigmask@plt>
   1a5c8:	ldr	r8, [r4]
   1a5cc:	clz	r0, r0
   1a5d0:	mov	r1, #0
   1a5d4:	lsr	r0, r0, #5
   1a5d8:	str	r1, [r4]
   1a5dc:	strb	r0, [sp, #12]
   1a5e0:	bl	12264 <fork@plt>
   1a5e4:	mov	r6, r0
   1a5e8:	bl	12198 <__errno_location@plt>
   1a5ec:	mov	r5, r4
   1a5f0:	cmp	r6, #0
   1a5f4:	ldr	r9, [r0]
   1a5f8:	mov	r4, r0
   1a5fc:	strne	r8, [r5]
   1a600:	ldrb	r0, [sp, #12]
   1a604:	cmp	r0, #0
   1a608:	beq	1a61c <__assert_fail@plt+0x82b0>
   1a60c:	ldr	r1, [sp, #8]
   1a610:	mov	r0, #2
   1a614:	mov	r2, #0
   1a618:	bl	12078 <pthread_sigmask@plt>
   1a61c:	cmn	r6, #1
   1a620:	str	r9, [r4]
   1a624:	bgt	1a664 <__assert_fail@plt+0x82f8>
   1a628:	cmp	r9, #11
   1a62c:	bne	1a664 <__assert_fail@plt+0x82f8>
   1a630:	vmov.f64	d0, d8
   1a634:	mov	r4, r5
   1a638:	sub	sl, sl, #1
   1a63c:	bl	22e80 <__assert_fail@plt+0x10b14>
   1a640:	vadd.f64	d8, d8, d8
   1a644:	ldr	r0, [r7]
   1a648:	cmp	r0, #1
   1a64c:	blt	1a5ac <__assert_fail@plt+0x8240>
   1a650:	mov	r0, #0
   1a654:	bl	1a768 <__assert_fail@plt+0x83fc>
   1a658:	cmp	r0, #0
   1a65c:	bne	1a644 <__assert_fail@plt+0x82d8>
   1a660:	b	1a5ac <__assert_fail@plt+0x8240>
   1a664:	cmn	r6, #1
   1a668:	ble	1a6a4 <__assert_fail@plt+0x8338>
   1a66c:	cmp	r6, #0
   1a670:	beq	1a68c <__assert_fail@plt+0x8320>
   1a674:	ldr	r0, [r7]
   1a678:	add	r0, r0, #1
   1a67c:	str	r0, [r7]
   1a680:	b	1a6c8 <__assert_fail@plt+0x835c>
   1a684:	mvn	r6, #0
   1a688:	b	1a6c8 <__assert_fail@plt+0x835c>
   1a68c:	mov	r0, #0
   1a690:	mov	r6, #0
   1a694:	bl	12354 <close@plt>
   1a698:	mov	r0, #1
   1a69c:	bl	12354 <close@plt>
   1a6a0:	b	1a6c8 <__assert_fail@plt+0x835c>
   1a6a4:	bl	12198 <__errno_location@plt>
   1a6a8:	ldr	r7, [sp, #4]
   1a6ac:	mov	r4, r0
   1a6b0:	ldr	r5, [r0]
   1a6b4:	ldr	r0, [r7]
   1a6b8:	bl	12354 <close@plt>
   1a6bc:	ldr	r0, [r7, #4]
   1a6c0:	bl	12354 <close@plt>
   1a6c4:	str	r5, [r4]
   1a6c8:	mov	r0, r6
   1a6cc:	sub	sp, fp, #40	; 0x28
   1a6d0:	vpop	{d8}
   1a6d4:	add	sp, sp, #4
   1a6d8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a6dc:	push	{fp, lr}
   1a6e0:	mov	fp, sp
   1a6e4:	sub	sp, sp, #16
   1a6e8:	mov	r4, r0
   1a6ec:	mov	r0, r1
   1a6f0:	mov	r5, r1
   1a6f4:	bl	12174 <strlen@plt>
   1a6f8:	mov	r2, r0
   1a6fc:	mov	r0, #2
   1a700:	mov	r1, r5
   1a704:	bl	121e0 <write@plt>
   1a708:	cmp	r4, #0
   1a70c:	beq	1a74c <__assert_fail@plt+0x83e0>
   1a710:	add	r1, sp, #4
   1a714:	mov	r0, r4
   1a718:	bl	1e770 <__assert_fail@plt+0xc404>
   1a71c:	movw	r1, #27869	; 0x6cdd
   1a720:	mov	r4, r0
   1a724:	mov	r0, #2
   1a728:	mov	r2, #8
   1a72c:	movt	r1, #2
   1a730:	bl	121e0 <write@plt>
   1a734:	mov	r0, r4
   1a738:	bl	12174 <strlen@plt>
   1a73c:	mov	r2, r0
   1a740:	mov	r0, #2
   1a744:	mov	r1, r4
   1a748:	bl	121e0 <write@plt>
   1a74c:	movw	r1, #21099	; 0x526b
   1a750:	mov	r0, #2
   1a754:	mov	r2, #1
   1a758:	movt	r1, #2
   1a75c:	bl	121e0 <write@plt>
   1a760:	mov	r0, #2
   1a764:	bl	11ee0 <_exit@plt>
   1a768:	push	{r4, r5, fp, lr}
   1a76c:	add	fp, sp, #8
   1a770:	sub	sp, sp, #16
   1a774:	mov	r5, r0
   1a778:	cmp	r0, #0
   1a77c:	clz	r1, r5
   1a780:	mvneq	r0, #0
   1a784:	lsr	r2, r1, #5
   1a788:	mov	r1, sp
   1a78c:	bl	12060 <waitpid@plt>
   1a790:	cmn	r0, #1
   1a794:	ble	1a804 <__assert_fail@plt+0x8498>
   1a798:	mov	r4, r0
   1a79c:	cmp	r0, #0
   1a7a0:	beq	1a7f8 <__assert_fail@plt+0x848c>
   1a7a4:	cmp	r5, #0
   1a7a8:	bgt	1a7d4 <__assert_fail@plt+0x8468>
   1a7ac:	movw	r0, #34980	; 0x88a4
   1a7b0:	add	r1, sp, #4
   1a7b4:	str	r4, [sp, #8]
   1a7b8:	movt	r0, #3
   1a7bc:	ldr	r0, [r0]
   1a7c0:	bl	1e2c0 <__assert_fail@plt+0xbf54>
   1a7c4:	cmp	r0, #0
   1a7c8:	beq	1a7f8 <__assert_fail@plt+0x848c>
   1a7cc:	mov	r1, #2
   1a7d0:	strb	r1, [r0, #8]
   1a7d4:	ldrh	r0, [sp]
   1a7d8:	mvn	r1, #128	; 0x80
   1a7dc:	tst	r0, r1
   1a7e0:	bne	1a84c <__assert_fail@plt+0x84e0>
   1a7e4:	movw	r0, #34984	; 0x88a8
   1a7e8:	movt	r0, #3
   1a7ec:	ldr	r1, [r0]
   1a7f0:	sub	r1, r1, #1
   1a7f4:	str	r1, [r0]
   1a7f8:	mov	r0, r4
   1a7fc:	sub	sp, fp, #8
   1a800:	pop	{r4, r5, fp, pc}
   1a804:	bl	12198 <__errno_location@plt>
   1a808:	movw	r1, #27819	; 0x6cab
   1a80c:	ldr	r4, [r0]
   1a810:	mov	r0, #0
   1a814:	mov	r2, #5
   1a818:	movt	r1, #2
   1a81c:	bl	11f7c <dcgettext@plt>
   1a820:	mov	r5, r0
   1a824:	movw	r0, #33656	; 0x8378
   1a828:	movt	r0, #3
   1a82c:	ldr	r1, [r0]
   1a830:	mov	r0, #4
   1a834:	bl	208a8 <__assert_fail@plt+0xe53c>
   1a838:	mov	r3, r0
   1a83c:	mov	r0, #2
   1a840:	mov	r1, r4
   1a844:	mov	r2, r5
   1a848:	bl	120a8 <error@plt>
   1a84c:	movw	r1, #27839	; 0x6cbf
   1a850:	mov	r0, #0
   1a854:	mov	r2, #5
   1a858:	movt	r1, #2
   1a85c:	bl	11f7c <dcgettext@plt>
   1a860:	mov	r4, r0
   1a864:	movw	r0, #33656	; 0x8378
   1a868:	movt	r0, #3
   1a86c:	ldr	r1, [r0]
   1a870:	mov	r0, #4
   1a874:	bl	208a8 <__assert_fail@plt+0xe53c>
   1a878:	mov	r3, r0
   1a87c:	mov	r0, #2
   1a880:	mov	r1, #0
   1a884:	mov	r2, r4
   1a888:	bl	120a8 <error@plt>
   1a88c:	ldr	r0, [r0, #4]
   1a890:	udiv	r2, r0, r1
   1a894:	mls	r0, r2, r1, r0
   1a898:	bx	lr
   1a89c:	ldr	r1, [r1, #4]
   1a8a0:	ldr	r0, [r0, #4]
   1a8a4:	sub	r0, r0, r1
   1a8a8:	clz	r0, r0
   1a8ac:	lsr	r0, r0, #5
   1a8b0:	bx	lr
   1a8b4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a8b8:	add	fp, sp, #28
   1a8bc:	sub	sp, sp, #132	; 0x84
   1a8c0:	movw	r4, #34704	; 0x8790
   1a8c4:	mov	r5, r0
   1a8c8:	movt	r4, #3
   1a8cc:	mov	r6, r4
   1a8d0:	ldr	r4, [r4]
   1a8d4:	add	r0, r4, #9
   1a8d8:	cmp	r0, r5
   1a8dc:	bne	1a8cc <__assert_fail@plt+0x8560>
   1a8e0:	ldrb	r0, [r4, #8]
   1a8e4:	cmp	r0, #1
   1a8e8:	bne	1a91c <__assert_fail@plt+0x85b0>
   1a8ec:	movw	r0, #34980	; 0x88a4
   1a8f0:	ldr	r7, [r4, #4]
   1a8f4:	mov	r1, sp
   1a8f8:	movt	r0, #3
   1a8fc:	ldr	r0, [r0]
   1a900:	str	r7, [sp, #4]
   1a904:	bl	1e2c0 <__assert_fail@plt+0xbf54>
   1a908:	cmp	r0, #0
   1a90c:	movne	r1, #2
   1a910:	strbne	r1, [r0, #8]
   1a914:	movne	r0, r7
   1a918:	blne	1a768 <__assert_fail@plt+0x83fc>
   1a91c:	movw	r1, #33528	; 0x82f8
   1a920:	mov	r0, sp
   1a924:	ldr	sl, [r4]
   1a928:	add	r7, r0, #4
   1a92c:	movt	r1, #3
   1a930:	mov	r0, #0
   1a934:	mov	r2, r7
   1a938:	bl	12078 <pthread_sigmask@plt>
   1a93c:	clz	r0, r0
   1a940:	lsr	r0, r0, #5
   1a944:	strb	r0, [sp]
   1a948:	mov	r0, r5
   1a94c:	bl	11fa0 <unlink@plt>
   1a950:	mov	r9, r0
   1a954:	bl	12198 <__errno_location@plt>
   1a958:	ldr	r8, [r0]
   1a95c:	str	sl, [r6]
   1a960:	ldrb	r0, [sp]
   1a964:	cmp	r0, #0
   1a968:	beq	1a97c <__assert_fail@plt+0x8610>
   1a96c:	mov	r0, #2
   1a970:	mov	r1, r7
   1a974:	mov	r2, #0
   1a978:	bl	12078 <pthread_sigmask@plt>
   1a97c:	cmp	r9, #0
   1a980:	beq	1a9c0 <__assert_fail@plt+0x8654>
   1a984:	movw	r1, #27878	; 0x6ce6
   1a988:	mov	r0, #0
   1a98c:	mov	r2, #5
   1a990:	movt	r1, #2
   1a994:	bl	11f7c <dcgettext@plt>
   1a998:	mov	r7, r0
   1a99c:	mov	r0, #0
   1a9a0:	mov	r1, #3
   1a9a4:	mov	r2, r5
   1a9a8:	bl	20b24 <__assert_fail@plt+0xe7b8>
   1a9ac:	mov	r3, r0
   1a9b0:	mov	r0, #0
   1a9b4:	mov	r1, r8
   1a9b8:	mov	r2, r7
   1a9bc:	bl	120a8 <error@plt>
   1a9c0:	cmp	sl, #0
   1a9c4:	movweq	r0, #33380	; 0x8264
   1a9c8:	movteq	r0, #3
   1a9cc:	streq	r6, [r0]
   1a9d0:	mov	r0, r4
   1a9d4:	bl	1d148 <__assert_fail@plt+0xaddc>
   1a9d8:	sub	sp, fp, #28
   1a9dc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a9e0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a9e4:	add	fp, sp, #28
   1a9e8:	sub	sp, sp, #92	; 0x5c
   1a9ec:	mov	r4, r1
   1a9f0:	mov	r8, r0
   1a9f4:	mov	r0, r2
   1a9f8:	lsr	r0, r1, #1
   1a9fc:	ldr	r1, [fp, #16]
   1aa00:	ldr	r6, [r3, #20]
   1aa04:	ldr	r7, [r3, #24]
   1aa08:	str	r2, [sp, #68]	; 0x44
   1aa0c:	mov	r5, r3
   1aa10:	str	r2, [sp, #20]
   1aa14:	str	r0, [sp, #64]	; 0x40
   1aa18:	str	r8, [sp, #60]	; 0x3c
   1aa1c:	cmp	r4, #2
   1aa20:	ldr	r0, [r3, #32]
   1aa24:	str	r1, [sp, #84]	; 0x54
   1aa28:	ldr	r1, [fp, #12]
   1aa2c:	str	r1, [sp, #80]	; 0x50
   1aa30:	ldr	r1, [fp, #8]
   1aa34:	str	r1, [sp, #76]	; 0x4c
   1aa38:	str	r0, [sp, #72]	; 0x48
   1aa3c:	addcs	r0, r7, r6
   1aa40:	cmpcs	r0, #131072	; 0x20000
   1aa44:	bcs	1b2d4 <__assert_fail@plt+0x8f68>
   1aa48:	ldr	r0, [sp, #20]
   1aa4c:	cmp	r7, #2
   1aa50:	sub	r4, r8, r0, lsl #4
   1aa54:	bcc	1aa74 <__assert_fail@plt+0x8708>
   1aa58:	mvn	r1, #8
   1aa5c:	sub	r0, r8, r6, lsl #4
   1aa60:	mov	r3, #0
   1aa64:	and	r1, r1, r6, lsl #3
   1aa68:	sub	r2, r4, r1
   1aa6c:	mov	r1, r7
   1aa70:	bl	1b4a0 <__assert_fail@plt+0x9134>
   1aa74:	cmp	r6, #2
   1aa78:	bcc	1aa90 <__assert_fail@plt+0x8724>
   1aa7c:	mov	r0, r8
   1aa80:	mov	r1, r6
   1aa84:	mov	r2, r4
   1aa88:	mov	r3, #0
   1aa8c:	bl	1b4a0 <__assert_fail@plt+0x9134>
   1aa90:	ldr	r4, [fp, #8]
   1aa94:	sub	r0, r8, r6, lsl #4
   1aa98:	str	r8, [r5]
   1aa9c:	sub	r1, r0, r7, lsl #4
   1aaa0:	str	r0, [r5, #4]
   1aaa4:	str	r0, [r5, #8]
   1aaa8:	add	sl, r4, #4
   1aaac:	str	r1, [r5, #12]
   1aab0:	mov	r0, sl
   1aab4:	bl	11ebc <pthread_mutex_lock@plt>
   1aab8:	mov	r7, r4
   1aabc:	mov	r1, r5
   1aac0:	ldr	r0, [r7], #32
   1aac4:	bl	1e5ec <__assert_fail@plt+0xc280>
   1aac8:	mov	r0, #1
   1aacc:	strb	r0, [r5, #44]	; 0x2c
   1aad0:	mov	r0, r7
   1aad4:	bl	1233c <pthread_cond_signal@plt>
   1aad8:	str	sl, [sp, #32]
   1aadc:	str	r7, [sp, #24]
   1aae0:	str	sl, [sp, #16]
   1aae4:	b	1ab0c <__assert_fail@plt+0x87a0>
   1aae8:	ldr	r0, [r8, #28]
   1aaec:	add	r0, r0, #48	; 0x30
   1aaf0:	bl	11ebc <pthread_mutex_lock@plt>
   1aaf4:	ldr	r9, [r8, #28]
   1aaf8:	ldrb	r0, [r9, #44]	; 0x2c
   1aafc:	cmp	r0, #0
   1ab00:	beq	1add8 <__assert_fail@plt+0x8a6c>
   1ab04:	add	r0, r9, #48	; 0x30
   1ab08:	bl	11e14 <pthread_mutex_unlock@plt>
   1ab0c:	ldr	r0, [sp, #32]
   1ab10:	bl	11e14 <pthread_mutex_unlock@plt>
   1ab14:	mov	r0, sl
   1ab18:	bl	11ebc <pthread_mutex_lock@plt>
   1ab1c:	ldr	r0, [r4]
   1ab20:	bl	1e694 <__assert_fail@plt+0xc328>
   1ab24:	mov	r8, r0
   1ab28:	cmp	r0, #0
   1ab2c:	bne	1ab50 <__assert_fail@plt+0x87e4>
   1ab30:	mov	r0, r7
   1ab34:	mov	r1, sl
   1ab38:	bl	122dc <pthread_cond_wait@plt>
   1ab3c:	ldr	r0, [r4]
   1ab40:	bl	1e694 <__assert_fail@plt+0xc328>
   1ab44:	cmp	r0, #0
   1ab48:	beq	1ab30 <__assert_fail@plt+0x87c4>
   1ab4c:	mov	r8, r0
   1ab50:	mov	r0, sl
   1ab54:	bl	11e14 <pthread_mutex_unlock@plt>
   1ab58:	add	r0, r8, #48	; 0x30
   1ab5c:	str	r0, [sp, #32]
   1ab60:	bl	11ebc <pthread_mutex_lock@plt>
   1ab64:	mov	r0, #0
   1ab68:	strb	r0, [r8, #44]	; 0x2c
   1ab6c:	ldr	r1, [r8, #40]	; 0x28
   1ab70:	cmp	r1, #0
   1ab74:	beq	1b298 <__assert_fail@plt+0x8f2c>
   1ab78:	ldr	r2, [sp, #20]
   1ab7c:	mov	r0, #2
   1ab80:	mov	r3, #1
   1ab84:	ldr	r7, [r8]
   1ab88:	cmp	r1, #1
   1ab8c:	add	r0, r0, r1, lsl #1
   1ab90:	add	r9, r3, r2, lsr r0
   1ab94:	ldr	r2, [r8, #4]
   1ab98:	str	r7, [sp, #36]	; 0x24
   1ab9c:	str	r2, [sp, #40]	; 0x28
   1aba0:	bne	1acfc <__assert_fail@plt+0x8990>
   1aba4:	ldr	sl, [r8, #8]
   1aba8:	cmp	r7, sl
   1abac:	beq	1ae04 <__assert_fail@plt+0x8a98>
   1abb0:	ldr	r0, [r8, #12]
   1abb4:	mov	r5, r7
   1abb8:	str	r7, [sp, #48]	; 0x30
   1abbc:	str	r7, [sp, #28]
   1abc0:	str	r0, [sp, #44]	; 0x2c
   1abc4:	ldr	r0, [sp, #40]	; 0x28
   1abc8:	mov	r1, r0
   1abcc:	mov	r2, r0
   1abd0:	str	r0, [sp, #56]	; 0x38
   1abd4:	b	1ac0c <__assert_fail@plt+0x88a0>
   1abd8:	vld1.32	{d16-d17}, [r6]
   1abdc:	vst1.64	{d16-d17}, [r5]
   1abe0:	ldr	r1, [fp, #12]
   1abe4:	ldr	r2, [fp, #16]
   1abe8:	mov	r0, r6
   1abec:	bl	189f8 <__assert_fail@plt+0x668c>
   1abf0:	mov	r1, r6
   1abf4:	mov	r2, r6
   1abf8:	mov	r5, r7
   1abfc:	str	r6, [sp, #56]	; 0x38
   1ac00:	sub	r9, r9, #1
   1ac04:	cmp	r5, sl
   1ac08:	beq	1ae60 <__assert_fail@plt+0x8af4>
   1ac0c:	ldr	r0, [sp, #44]	; 0x2c
   1ac10:	cmp	r2, r0
   1ac14:	beq	1ae50 <__assert_fail@plt+0x8ae4>
   1ac18:	cmp	r9, #0
   1ac1c:	beq	1ae58 <__assert_fail@plt+0x8aec>
   1ac20:	mov	r7, r5
   1ac24:	sub	r5, r5, #16
   1ac28:	sub	r6, r2, #16
   1ac2c:	str	r1, [sp, #52]	; 0x34
   1ac30:	mov	r4, r2
   1ac34:	mov	r0, r5
   1ac38:	mov	r1, r6
   1ac3c:	bl	179f8 <__assert_fail@plt+0x568c>
   1ac40:	cmp	r0, #0
   1ac44:	ble	1ac8c <__assert_fail@plt+0x8920>
   1ac48:	movw	r0, #33662	; 0x837e
   1ac4c:	str	r6, [r8, #4]
   1ac50:	movt	r0, #3
   1ac54:	ldrb	r0, [r0]
   1ac58:	cmp	r0, #1
   1ac5c:	bne	1abe0 <__assert_fail@plt+0x8874>
   1ac60:	movw	r5, #34992	; 0x88b0
   1ac64:	movt	r5, #3
   1ac68:	ldr	r0, [r5]
   1ac6c:	cmp	r0, #0
   1ac70:	beq	1abd8 <__assert_fail@plt+0x886c>
   1ac74:	mov	r0, r6
   1ac78:	mov	r1, r5
   1ac7c:	bl	179f8 <__assert_fail@plt+0x568c>
   1ac80:	cmp	r0, #0
   1ac84:	bne	1abd8 <__assert_fail@plt+0x886c>
   1ac88:	b	1abf0 <__assert_fail@plt+0x8884>
   1ac8c:	movw	r0, #33662	; 0x837e
   1ac90:	str	r5, [r8]
   1ac94:	mov	r6, r4
   1ac98:	movt	r0, #3
   1ac9c:	ldrb	r0, [r0]
   1aca0:	cmp	r0, #1
   1aca4:	bne	1acd8 <__assert_fail@plt+0x896c>
   1aca8:	movw	r4, #34992	; 0x88b0
   1acac:	movt	r4, #3
   1acb0:	ldr	r0, [r4]
   1acb4:	cmp	r0, #0
   1acb8:	beq	1acd0 <__assert_fail@plt+0x8964>
   1acbc:	mov	r0, r5
   1acc0:	mov	r1, r4
   1acc4:	bl	179f8 <__assert_fail@plt+0x568c>
   1acc8:	cmp	r0, #0
   1accc:	beq	1ace8 <__assert_fail@plt+0x897c>
   1acd0:	vld1.32	{d16-d17}, [r5]
   1acd4:	vst1.64	{d16-d17}, [r4]
   1acd8:	ldr	r1, [fp, #12]
   1acdc:	ldr	r2, [fp, #16]
   1ace0:	mov	r0, r5
   1ace4:	bl	189f8 <__assert_fail@plt+0x668c>
   1ace8:	ldr	r1, [sp, #52]	; 0x34
   1acec:	str	r5, [sp, #48]	; 0x30
   1acf0:	str	r5, [sp, #28]
   1acf4:	mov	r2, r6
   1acf8:	b	1ac00 <__assert_fail@plt+0x8894>
   1acfc:	ldr	r1, [r8, #16]
   1ad00:	ldr	r2, [r8, #8]
   1ad04:	ldr	sl, [r1]
   1ad08:	cmp	r7, r2
   1ad0c:	str	r1, [sp, #28]
   1ad10:	str	r2, [sp, #52]	; 0x34
   1ad14:	beq	1ae28 <__assert_fail@plt+0x8abc>
   1ad18:	ldr	r2, [r8, #12]
   1ad1c:	ldr	r1, [sp, #40]	; 0x28
   1ad20:	cmp	r1, r2
   1ad24:	str	r2, [sp, #44]	; 0x2c
   1ad28:	beq	1ae40 <__assert_fail@plt+0x8ad4>
   1ad2c:	cmp	r9, #0
   1ad30:	beq	1b054 <__assert_fail@plt+0x8ce8>
   1ad34:	ldr	r1, [sp, #20]
   1ad38:	ldr	r2, [sp, #40]	; 0x28
   1ad3c:	str	r7, [sp, #48]	; 0x30
   1ad40:	lsr	r1, r1, r0
   1ad44:	sub	r0, sl, #16
   1ad48:	mov	ip, r2
   1ad4c:	str	r2, [sp, #56]	; 0x38
   1ad50:	rsb	r4, r1, #0
   1ad54:	mov	r1, r7
   1ad58:	sub	r6, ip, #16
   1ad5c:	sub	r5, r7, #16
   1ad60:	mov	sl, r0
   1ad64:	mov	r9, ip
   1ad68:	mov	r0, r5
   1ad6c:	mov	r1, r6
   1ad70:	bl	179f8 <__assert_fail@plt+0x568c>
   1ad74:	cmp	r0, #0
   1ad78:	ble	1ad90 <__assert_fail@plt+0x8a24>
   1ad7c:	str	r6, [r8, #4]
   1ad80:	mov	ip, r6
   1ad84:	str	r6, [sp, #56]	; 0x38
   1ad88:	vld1.32	{d16-d17}, [r6]
   1ad8c:	b	1ada4 <__assert_fail@plt+0x8a38>
   1ad90:	str	r5, [r8]
   1ad94:	str	r5, [sp, #48]	; 0x30
   1ad98:	mov	r7, r5
   1ad9c:	mov	ip, r9
   1ada0:	vld1.32	{d16-d17}, [r5]
   1ada4:	vst1.32	{d16-d17}, [sl]
   1ada8:	ldr	r0, [sp, #52]	; 0x34
   1adac:	cmp	r7, r0
   1adb0:	beq	1b06c <__assert_fail@plt+0x8d00>
   1adb4:	ldr	r0, [sp, #44]	; 0x2c
   1adb8:	cmp	ip, r0
   1adbc:	beq	1b074 <__assert_fail@plt+0x8d08>
   1adc0:	add	r4, r4, #1
   1adc4:	sub	r0, sl, #16
   1adc8:	cmp	r4, #1
   1adcc:	bne	1ad58 <__assert_fail@plt+0x89ec>
   1add0:	mvn	r9, #0
   1add4:	b	1b07c <__assert_fail@plt+0x8d10>
   1add8:	ldr	r2, [r9]
   1addc:	ldr	r1, [r9, #12]
   1ade0:	ldmib	r9, {r0, r3}
   1ade4:	cmp	r2, r3
   1ade8:	bne	1b00c <__assert_fail@plt+0x8ca0>
   1adec:	cmp	r0, r1
   1adf0:	beq	1ab04 <__assert_fail@plt+0x8798>
   1adf4:	ldr	r0, [r9, #20]
   1adf8:	cmp	r0, #0
   1adfc:	bne	1ab04 <__assert_fail@plt+0x8798>
   1ae00:	b	1b020 <__assert_fail@plt+0x8cb4>
   1ae04:	ldr	r0, [sp, #40]	; 0x28
   1ae08:	str	r7, [sp, #48]	; 0x30
   1ae0c:	mov	r5, r7
   1ae10:	mov	sl, r7
   1ae14:	str	r7, [sp, #28]
   1ae18:	str	r0, [sp, #56]	; 0x38
   1ae1c:	mov	r2, r0
   1ae20:	mov	r1, r0
   1ae24:	b	1ae68 <__assert_fail@plt+0x8afc>
   1ae28:	ldr	r1, [sp, #40]	; 0x28
   1ae2c:	str	r7, [sp, #48]	; 0x30
   1ae30:	mov	r0, r7
   1ae34:	str	r1, [sp, #56]	; 0x38
   1ae38:	mov	ip, r1
   1ae3c:	b	1b088 <__assert_fail@plt+0x8d1c>
   1ae40:	str	r1, [sp, #56]	; 0x38
   1ae44:	str	r7, [sp, #48]	; 0x30
   1ae48:	mov	ip, r1
   1ae4c:	b	1b080 <__assert_fail@plt+0x8d14>
   1ae50:	ldr	r2, [sp, #44]	; 0x2c
   1ae54:	b	1ae64 <__assert_fail@plt+0x8af8>
   1ae58:	mvn	r9, #0
   1ae5c:	b	1ae64 <__assert_fail@plt+0x8af8>
   1ae60:	mov	r5, sl
   1ae64:	ldr	r0, [sp, #40]	; 0x28
   1ae68:	ldr	r6, [r8, #24]
   1ae6c:	sub	r0, r0, r1
   1ae70:	cmp	r6, r0, asr #4
   1ae74:	bne	1ae98 <__assert_fail@plt+0x8b2c>
   1ae78:	ldr	r7, [sp, #24]
   1ae7c:	cmp	r5, sl
   1ae80:	asr	r6, r0, #4
   1ae84:	cmpne	r9, #0
   1ae88:	bne	1af68 <__assert_fail@plt+0x8bfc>
   1ae8c:	ldr	r4, [fp, #8]
   1ae90:	ldr	sl, [sp, #16]
   1ae94:	b	1b1ac <__assert_fail@plt+0x8e40>
   1ae98:	ldr	r0, [sp, #36]	; 0x24
   1ae9c:	ldr	r1, [sp, #28]
   1aea0:	ldr	r4, [fp, #8]
   1aea4:	ldr	sl, [sp, #16]
   1aea8:	sub	r0, r0, r1
   1aeac:	ldr	r1, [r8, #20]
   1aeb0:	cmp	r1, r0, asr #4
   1aeb4:	bne	1b1a8 <__assert_fail@plt+0x8e3c>
   1aeb8:	cmp	r9, #0
   1aebc:	beq	1b1a8 <__assert_fail@plt+0x8e3c>
   1aec0:	ldr	r4, [r8, #12]
   1aec4:	cmp	r2, r4
   1aec8:	beq	1b1a4 <__assert_fail@plt+0x8e38>
   1aecc:	ldr	r7, [sp, #24]
   1aed0:	str	r6, [sp, #52]	; 0x34
   1aed4:	sub	r6, r9, #1
   1aed8:	movw	r9, #34992	; 0x88b0
   1aedc:	sub	r5, r2, #16
   1aee0:	movt	r9, #3
   1aee4:	movw	r0, #33662	; 0x837e
   1aee8:	str	r5, [r8, #4]
   1aeec:	movt	r0, #3
   1aef0:	ldrb	r0, [r0]
   1aef4:	cmp	r0, #1
   1aef8:	bne	1af24 <__assert_fail@plt+0x8bb8>
   1aefc:	ldr	r0, [r9]
   1af00:	cmp	r0, #0
   1af04:	beq	1af1c <__assert_fail@plt+0x8bb0>
   1af08:	mov	r0, r5
   1af0c:	mov	r1, r9
   1af10:	bl	179f8 <__assert_fail@plt+0x568c>
   1af14:	cmp	r0, #0
   1af18:	beq	1af34 <__assert_fail@plt+0x8bc8>
   1af1c:	vld1.32	{d16-d17}, [r5]
   1af20:	vst1.64	{d16-d17}, [r9]
   1af24:	ldr	r1, [fp, #12]
   1af28:	ldr	r2, [fp, #16]
   1af2c:	mov	r0, r5
   1af30:	bl	189f8 <__assert_fail@plt+0x668c>
   1af34:	sub	r0, r5, #16
   1af38:	cmp	r4, r5
   1af3c:	beq	1af54 <__assert_fail@plt+0x8be8>
   1af40:	sub	r1, r6, #1
   1af44:	cmp	r6, #0
   1af48:	mov	r5, r0
   1af4c:	mov	r6, r1
   1af50:	bne	1aee4 <__assert_fail@plt+0x8b78>
   1af54:	ldr	r4, [fp, #8]
   1af58:	ldr	r9, [sp, #40]	; 0x28
   1af5c:	add	r0, r0, #16
   1af60:	str	r0, [sp, #56]	; 0x38
   1af64:	b	1b004 <__assert_fail@plt+0x8c98>
   1af68:	sub	r7, r9, #1
   1af6c:	ldr	r4, [fp, #8]
   1af70:	ldr	r9, [sp, #40]	; 0x28
   1af74:	str	r6, [sp, #52]	; 0x34
   1af78:	movw	r6, #34992	; 0x88b0
   1af7c:	sub	r5, r5, #16
   1af80:	movt	r6, #3
   1af84:	movw	r0, #33662	; 0x837e
   1af88:	str	r5, [r8]
   1af8c:	movt	r0, #3
   1af90:	ldrb	r0, [r0]
   1af94:	cmp	r0, #1
   1af98:	bne	1afc4 <__assert_fail@plt+0x8c58>
   1af9c:	ldr	r0, [r6]
   1afa0:	cmp	r0, #0
   1afa4:	beq	1afbc <__assert_fail@plt+0x8c50>
   1afa8:	mov	r0, r5
   1afac:	mov	r1, r6
   1afb0:	bl	179f8 <__assert_fail@plt+0x568c>
   1afb4:	cmp	r0, #0
   1afb8:	beq	1afd4 <__assert_fail@plt+0x8c68>
   1afbc:	vld1.32	{d16-d17}, [r5]
   1afc0:	vst1.64	{d16-d17}, [r6]
   1afc4:	ldr	r1, [fp, #12]
   1afc8:	ldr	r2, [fp, #16]
   1afcc:	mov	r0, r5
   1afd0:	bl	189f8 <__assert_fail@plt+0x668c>
   1afd4:	sub	r0, r5, #16
   1afd8:	cmp	sl, r5
   1afdc:	beq	1aff4 <__assert_fail@plt+0x8c88>
   1afe0:	sub	r1, r7, #1
   1afe4:	cmp	r7, #0
   1afe8:	mov	r5, r0
   1afec:	mov	r7, r1
   1aff0:	bne	1af84 <__assert_fail@plt+0x8c18>
   1aff4:	ldr	sl, [sp, #16]
   1aff8:	ldr	r7, [sp, #24]
   1affc:	add	r0, r0, #16
   1b000:	str	r0, [sp, #48]	; 0x30
   1b004:	ldr	r6, [sp, #52]	; 0x34
   1b008:	b	1b1b0 <__assert_fail@plt+0x8e44>
   1b00c:	cmp	r0, r1
   1b010:	bne	1b020 <__assert_fail@plt+0x8cb4>
   1b014:	ldr	r0, [r9, #24]
   1b018:	cmp	r0, #0
   1b01c:	bne	1ab04 <__assert_fail@plt+0x8798>
   1b020:	mov	r0, sl
   1b024:	bl	11ebc <pthread_mutex_lock@plt>
   1b028:	ldr	r0, [r4]
   1b02c:	mov	r1, r9
   1b030:	bl	1e5ec <__assert_fail@plt+0xc280>
   1b034:	mov	r0, #1
   1b038:	strb	r0, [r9, #44]	; 0x2c
   1b03c:	mov	r0, r7
   1b040:	bl	1233c <pthread_cond_signal@plt>
   1b044:	mov	r0, sl
   1b048:	bl	11e14 <pthread_mutex_unlock@plt>
   1b04c:	ldr	r9, [r8, #28]
   1b050:	b	1ab04 <__assert_fail@plt+0x8798>
   1b054:	ldr	r0, [sp, #40]	; 0x28
   1b058:	str	r7, [sp, #48]	; 0x30
   1b05c:	mvn	r9, #0
   1b060:	str	r0, [sp, #56]	; 0x38
   1b064:	mov	ip, r0
   1b068:	b	1b080 <__assert_fail@plt+0x8d14>
   1b06c:	ldr	r7, [sp, #52]	; 0x34
   1b070:	b	1b078 <__assert_fail@plt+0x8d0c>
   1b074:	ldr	ip, [sp, #44]	; 0x2c
   1b078:	rsb	r9, r4, #0
   1b07c:	ldr	r4, [fp, #8]
   1b080:	ldr	r0, [sp, #52]	; 0x34
   1b084:	ldr	r1, [sp, #40]	; 0x28
   1b088:	ldr	r6, [r8, #24]
   1b08c:	sub	r1, r1, ip
   1b090:	cmp	r6, r1, asr #4
   1b094:	bne	1b108 <__assert_fail@plt+0x8d9c>
   1b098:	cmp	r7, r0
   1b09c:	cmpne	r9, #0
   1b0a0:	beq	1b18c <__assert_fail@plt+0x8e20>
   1b0a4:	ldr	r0, [sp, #52]	; 0x34
   1b0a8:	sub	r1, r9, #1
   1b0ac:	mov	r2, #0
   1b0b0:	sub	r0, r0, r7
   1b0b4:	add	r0, r0, #16
   1b0b8:	add	r3, r7, r2
   1b0bc:	cmp	r0, r2
   1b0c0:	sub	r3, r3, #16
   1b0c4:	vld1.32	{d16-d17}, [r3]
   1b0c8:	add	r3, sl, r2
   1b0cc:	sub	r3, r3, #16
   1b0d0:	vst1.32	{d16-d17}, [r3]
   1b0d4:	sub	r3, r2, #16
   1b0d8:	beq	1b0f0 <__assert_fail@plt+0x8d84>
   1b0dc:	sub	r2, r1, #1
   1b0e0:	cmp	r1, #0
   1b0e4:	mov	r1, r2
   1b0e8:	mov	r2, r3
   1b0ec:	bne	1b0b8 <__assert_fail@plt+0x8d4c>
   1b0f0:	add	r0, r7, r3
   1b0f4:	ldr	r7, [sp, #24]
   1b0f8:	add	sl, sl, r3
   1b0fc:	str	r0, [sp, #48]	; 0x30
   1b100:	str	r0, [r8]
   1b104:	b	1b190 <__assert_fail@plt+0x8e24>
   1b108:	ldr	r0, [sp, #36]	; 0x24
   1b10c:	ldr	r1, [r8, #20]
   1b110:	sub	r0, r0, r7
   1b114:	cmp	r1, r0, asr #4
   1b118:	bne	1b18c <__assert_fail@plt+0x8e20>
   1b11c:	cmp	r9, #0
   1b120:	ldr	r7, [sp, #24]
   1b124:	ldrne	r0, [r8, #12]
   1b128:	cmpne	ip, r0
   1b12c:	beq	1b190 <__assert_fail@plt+0x8e24>
   1b130:	sub	r0, r0, ip
   1b134:	sub	r1, r9, #1
   1b138:	mov	r2, #0
   1b13c:	add	r0, r0, #16
   1b140:	add	r3, ip, r2
   1b144:	cmp	r0, r2
   1b148:	sub	r3, r3, #16
   1b14c:	vld1.32	{d16-d17}, [r3]
   1b150:	add	r3, sl, r2
   1b154:	sub	r3, r3, #16
   1b158:	vst1.32	{d16-d17}, [r3]
   1b15c:	sub	r3, r2, #16
   1b160:	beq	1b178 <__assert_fail@plt+0x8e0c>
   1b164:	sub	r2, r1, #1
   1b168:	cmp	r1, #0
   1b16c:	mov	r1, r2
   1b170:	mov	r2, r3
   1b174:	bne	1b140 <__assert_fail@plt+0x8dd4>
   1b178:	add	r0, ip, r3
   1b17c:	add	sl, sl, r3
   1b180:	str	r0, [sp, #56]	; 0x38
   1b184:	str	r0, [r8, #4]
   1b188:	b	1b190 <__assert_fail@plt+0x8e24>
   1b18c:	ldr	r7, [sp, #24]
   1b190:	ldr	r0, [sp, #28]
   1b194:	ldr	r9, [sp, #40]	; 0x28
   1b198:	str	sl, [r0]
   1b19c:	ldr	sl, [sp, #16]
   1b1a0:	b	1b1b0 <__assert_fail@plt+0x8e44>
   1b1a4:	ldr	r4, [fp, #8]
   1b1a8:	ldr	r7, [sp, #24]
   1b1ac:	ldr	r9, [sp, #40]	; 0x28
   1b1b0:	ldr	r0, [sp, #56]	; 0x38
   1b1b4:	ldr	r1, [sp, #36]	; 0x24
   1b1b8:	ldr	r2, [sp, #48]	; 0x30
   1b1bc:	sub	r0, r9, r0
   1b1c0:	sub	r1, r1, r2
   1b1c4:	sub	r0, r6, r0, asr #4
   1b1c8:	str	r0, [r8, #24]
   1b1cc:	ldr	r2, [r8, #20]
   1b1d0:	sub	r2, r2, r1, asr #4
   1b1d4:	str	r2, [r8, #20]
   1b1d8:	ldrb	r1, [r8, #44]	; 0x2c
   1b1dc:	cmp	r1, #0
   1b1e0:	bne	1b248 <__assert_fail@plt+0x8edc>
   1b1e4:	ldr	r7, [r8]
   1b1e8:	ldr	r3, [r8, #12]
   1b1ec:	ldmib	r8, {r1, r6}
   1b1f0:	cmp	r7, r6
   1b1f4:	bne	1b208 <__assert_fail@plt+0x8e9c>
   1b1f8:	ldr	r7, [sp, #24]
   1b1fc:	cmp	r2, #0
   1b200:	beq	1b214 <__assert_fail@plt+0x8ea8>
   1b204:	b	1b248 <__assert_fail@plt+0x8edc>
   1b208:	ldr	r7, [sp, #24]
   1b20c:	cmp	r0, #0
   1b210:	beq	1b21c <__assert_fail@plt+0x8eb0>
   1b214:	cmp	r1, r3
   1b218:	beq	1b248 <__assert_fail@plt+0x8edc>
   1b21c:	mov	r0, sl
   1b220:	bl	11ebc <pthread_mutex_lock@plt>
   1b224:	ldr	r0, [r4]
   1b228:	mov	r1, r8
   1b22c:	bl	1e5ec <__assert_fail@plt+0xc280>
   1b230:	mov	r0, #1
   1b234:	strb	r0, [r8, #44]	; 0x2c
   1b238:	mov	r0, r7
   1b23c:	bl	1233c <pthread_cond_signal@plt>
   1b240:	mov	r0, sl
   1b244:	bl	11e14 <pthread_mutex_unlock@plt>
   1b248:	ldr	r0, [r8, #40]	; 0x28
   1b24c:	cmp	r0, #2
   1b250:	bcs	1aae8 <__assert_fail@plt+0x877c>
   1b254:	ldr	r0, [r8, #20]
   1b258:	ldr	r1, [r8, #24]
   1b25c:	cmn	r0, r1
   1b260:	bne	1ab0c <__assert_fail@plt+0x87a0>
   1b264:	ldr	r5, [r8, #28]
   1b268:	mov	r0, sl
   1b26c:	bl	11ebc <pthread_mutex_lock@plt>
   1b270:	ldr	r0, [r4]
   1b274:	mov	r1, r5
   1b278:	bl	1e5ec <__assert_fail@plt+0xc280>
   1b27c:	mov	r0, #1
   1b280:	strb	r0, [r5, #44]	; 0x2c
   1b284:	mov	r0, r7
   1b288:	bl	1233c <pthread_cond_signal@plt>
   1b28c:	mov	r0, sl
   1b290:	bl	11e14 <pthread_mutex_unlock@plt>
   1b294:	b	1ab0c <__assert_fail@plt+0x87a0>
   1b298:	ldr	r0, [sp, #32]
   1b29c:	bl	11e14 <pthread_mutex_unlock@plt>
   1b2a0:	mov	r0, sl
   1b2a4:	bl	11ebc <pthread_mutex_lock@plt>
   1b2a8:	ldr	r0, [r4]
   1b2ac:	mov	r1, r8
   1b2b0:	bl	1e5ec <__assert_fail@plt+0xc280>
   1b2b4:	mov	r0, #1
   1b2b8:	strb	r0, [r8, #44]	; 0x2c
   1b2bc:	mov	r0, r7
   1b2c0:	bl	1233c <pthread_cond_signal@plt>
   1b2c4:	mov	r0, sl
   1b2c8:	bl	11e14 <pthread_mutex_unlock@plt>
   1b2cc:	sub	sp, fp, #28
   1b2d0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b2d4:	movw	r2, #46180	; 0xb464
   1b2d8:	sub	r0, fp, #32
   1b2dc:	add	r3, sp, #60	; 0x3c
   1b2e0:	mov	r1, #0
   1b2e4:	movt	r2, #1
   1b2e8:	bl	12084 <pthread_create@plt>
   1b2ec:	ldr	r6, [r5, #20]
   1b2f0:	cmp	r0, #0
   1b2f4:	beq	1b300 <__assert_fail@plt+0x8f94>
   1b2f8:	ldr	r7, [r5, #24]
   1b2fc:	b	1aa48 <__assert_fail@plt+0x86dc>
   1b300:	ldr	r0, [fp, #8]
   1b304:	ldr	r3, [r5, #36]	; 0x24
   1b308:	ldr	r2, [sp, #20]
   1b30c:	sub	r1, r4, r4, lsr #1
   1b310:	str	r0, [sp]
   1b314:	ldr	r0, [fp, #12]
   1b318:	str	r0, [sp, #4]
   1b31c:	ldr	r0, [fp, #16]
   1b320:	str	r0, [sp, #8]
   1b324:	sub	r0, r8, r6, lsl #4
   1b328:	bl	1a9e0 <__assert_fail@plt+0x8674>
   1b32c:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1b330:	mov	r1, #0
   1b334:	bl	12288 <pthread_join@plt>
   1b338:	sub	sp, fp, #28
   1b33c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b340:	ldr	r2, [r1, #40]	; 0x28
   1b344:	ldr	r3, [r0, #40]	; 0x28
   1b348:	cmp	r3, r2
   1b34c:	ldreq	r2, [r1, #20]
   1b350:	ldreq	r1, [r1, #24]
   1b354:	movne	r0, #0
   1b358:	addeq	r1, r1, r2
   1b35c:	ldreq	r2, [r0, #20]
   1b360:	ldreq	r0, [r0, #24]
   1b364:	addeq	r2, r0, r2
   1b368:	moveq	r0, #0
   1b36c:	cmpeq	r2, r1
   1b370:	movwcc	r0, #1
   1b374:	bx	lr
   1b378:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b37c:	add	fp, sp, #28
   1b380:	sub	sp, sp, #12
   1b384:	mov	r4, r1
   1b388:	ldr	r1, [fp, #8]
   1b38c:	mov	r6, r2
   1b390:	ldr	r2, [fp, #12]
   1b394:	mov	r5, r3
   1b398:	mov	sl, #0
   1b39c:	mov	r8, #1
   1b3a0:	rsb	r9, r1, #0
   1b3a4:	ands	r1, r2, #1
   1b3a8:	mov	r2, #24
   1b3ac:	add	r7, r6, r9, lsl #4
   1b3b0:	add	r3, r0, #12
   1b3b4:	movwne	r2, #20
   1b3b8:	cmp	r1, #0
   1b3bc:	ldr	r2, [r0, r2]
   1b3c0:	addne	r3, r0, #8
   1b3c4:	str	r7, [r4]
   1b3c8:	sub	r1, r2, r2, lsr #1
   1b3cc:	lsr	r2, r2, #1
   1b3d0:	sub	r6, r7, r2, lsl #4
   1b3d4:	stmib	r4, {r6, r7}
   1b3d8:	str	r6, [r4, #12]
   1b3dc:	str	r3, [r4, #16]
   1b3e0:	str	r2, [r4, #20]
   1b3e4:	str	r1, [r4, #24]
   1b3e8:	str	r0, [r4, #28]
   1b3ec:	mov	r1, #0
   1b3f0:	ldr	r0, [r0, #40]	; 0x28
   1b3f4:	strb	sl, [r4, #44]	; 0x2c
   1b3f8:	add	r0, r0, #1
   1b3fc:	str	r0, [r4, #40]	; 0x28
   1b400:	add	r0, r4, #48	; 0x30
   1b404:	bl	11f04 <pthread_mutex_init@plt>
   1b408:	add	r1, r4, #72	; 0x48
   1b40c:	cmp	r5, #2
   1b410:	bcc	1b44c <__assert_fail@plt+0x90e0>
   1b414:	ldr	r0, [fp, #8]
   1b418:	str	r1, [r4, #32]
   1b41c:	lsr	r3, r5, #1
   1b420:	mov	r2, r7
   1b424:	stm	sp, {r0, r8}
   1b428:	mov	r0, r4
   1b42c:	bl	1b378 <__assert_fail@plt+0x900c>
   1b430:	mov	r1, r0
   1b434:	str	r0, [r4, #36]	; 0x24
   1b438:	mov	r0, r4
   1b43c:	sub	r5, r5, r5, lsr #1
   1b440:	mov	r2, #0
   1b444:	mov	r4, r1
   1b448:	b	1b3a4 <__assert_fail@plt+0x9038>
   1b44c:	mov	r0, #0
   1b450:	str	r0, [r4, #32]
   1b454:	str	r0, [r4, #36]	; 0x24
   1b458:	mov	r0, r1
   1b45c:	sub	sp, fp, #28
   1b460:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b464:	push	{r4, sl, fp, lr}
   1b468:	add	fp, sp, #8
   1b46c:	sub	sp, sp, #16
   1b470:	ldr	ip, [r0]
   1b474:	ldmib	r0, {r1, r2, r3, lr}
   1b478:	ldr	r4, [r0, #20]
   1b47c:	ldr	r0, [r0, #24]
   1b480:	str	lr, [sp]
   1b484:	str	r0, [sp, #8]
   1b488:	mov	r0, ip
   1b48c:	str	r4, [sp, #4]
   1b490:	bl	1a9e0 <__assert_fail@plt+0x8674>
   1b494:	mov	r0, #0
   1b498:	sub	sp, fp, #8
   1b49c:	pop	{r4, sl, fp, pc}
   1b4a0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b4a4:	add	fp, sp, #28
   1b4a8:	sub	sp, sp, #4
   1b4ac:	mov	r7, r3
   1b4b0:	mov	r9, r2
   1b4b4:	mov	r8, r0
   1b4b8:	cmp	r1, #2
   1b4bc:	bne	1b51c <__assert_fail@plt+0x91b0>
   1b4c0:	sub	r6, r8, #16
   1b4c4:	sub	r5, r8, #32
   1b4c8:	mov	r0, r6
   1b4cc:	mov	r1, r5
   1b4d0:	bl	179f8 <__assert_fail@plt+0x568c>
   1b4d4:	cmp	r7, #0
   1b4d8:	beq	1b574 <__assert_fail@plt+0x9208>
   1b4dc:	cmp	r0, #0
   1b4e0:	mvn	r1, #15
   1b4e4:	mvngt	r1, #31
   1b4e8:	cmp	r0, #0
   1b4ec:	add	r1, r8, r1
   1b4f0:	vld1.32	{d16-d17}, [r1]
   1b4f4:	sub	r1, r9, #16
   1b4f8:	vst1.32	{d16-d17}, [r1]
   1b4fc:	mvn	r1, #31
   1b500:	mvngt	r1, #15
   1b504:	add	r0, r8, r1
   1b508:	vld1.32	{d16-d17}, [r0]
   1b50c:	sub	r0, r9, #32
   1b510:	vst1.32	{d16-d17}, [r0]
   1b514:	sub	sp, fp, #28
   1b518:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b51c:	mov	r5, r1
   1b520:	lsr	r4, r1, #1
   1b524:	mov	r1, #0
   1b528:	cmp	r7, #0
   1b52c:	mov	r3, r7
   1b530:	sub	r2, r1, r5, lsr #1
   1b534:	mov	r1, r7
   1b538:	sub	r6, r5, r5, lsr #1
   1b53c:	sub	r0, r8, r4, lsl #4
   1b540:	movne	r1, r2
   1b544:	str	r2, [sp]
   1b548:	add	r2, r9, r1, lsl #4
   1b54c:	mov	r1, r6
   1b550:	bl	1b4a0 <__assert_fail@plt+0x9134>
   1b554:	cmp	r5, #4
   1b558:	bcc	1b5a0 <__assert_fail@plt+0x9234>
   1b55c:	eor	r3, r7, #1
   1b560:	mov	r0, r8
   1b564:	mov	r1, r4
   1b568:	mov	r2, r9
   1b56c:	bl	1b4a0 <__assert_fail@plt+0x9134>
   1b570:	b	1b5b8 <__assert_fail@plt+0x924c>
   1b574:	cmp	r0, #1
   1b578:	blt	1b6ac <__assert_fail@plt+0x9340>
   1b57c:	vld1.32	{d16-d17}, [r6]
   1b580:	sub	r0, r9, #16
   1b584:	vst1.32	{d16-d17}, [r0]
   1b588:	vld1.32	{d16-d17}, [r5]
   1b58c:	vst1.32	{d16-d17}, [r6]
   1b590:	vld1.32	{d16-d17}, [r0]
   1b594:	vst1.32	{d16-d17}, [r5]
   1b598:	sub	sp, fp, #28
   1b59c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b5a0:	cmp	r7, #0
   1b5a4:	bne	1b5b8 <__assert_fail@plt+0x924c>
   1b5a8:	sub	r0, r8, #16
   1b5ac:	vld1.32	{d16-d17}, [r0]
   1b5b0:	sub	r0, r9, #16
   1b5b4:	vst1.32	{d16-d17}, [r0]
   1b5b8:	ldr	r0, [sp]
   1b5bc:	cmp	r7, #0
   1b5c0:	mov	sl, r9
   1b5c4:	movne	sl, r8
   1b5c8:	movne	r8, r9
   1b5cc:	add	r5, r8, r0, lsl #4
   1b5d0:	str	r4, [sp]
   1b5d4:	sub	r9, r5, #16
   1b5d8:	sub	r7, sl, #16
   1b5dc:	mov	r4, #0
   1b5e0:	add	r1, r9, r4
   1b5e4:	mov	r0, r7
   1b5e8:	bl	179f8 <__assert_fail@plt+0x568c>
   1b5ec:	add	r1, r8, r4
   1b5f0:	cmp	r0, #0
   1b5f4:	sub	r1, r1, #16
   1b5f8:	ble	1b61c <__assert_fail@plt+0x92b0>
   1b5fc:	add	r0, r5, r4
   1b600:	sub	r4, r4, #16
   1b604:	subs	r6, r6, #1
   1b608:	sub	r0, r0, #16
   1b60c:	vld1.32	{d16-d17}, [r0]
   1b610:	vst1.32	{d16-d17}, [r1]
   1b614:	bne	1b5e0 <__assert_fail@plt+0x9274>
   1b618:	b	1b640 <__assert_fail@plt+0x92d4>
   1b61c:	vld1.32	{d16-d17}, [r7]
   1b620:	add	r5, r5, r4
   1b624:	ldr	r4, [sp]
   1b628:	mov	r8, r1
   1b62c:	mov	sl, r7
   1b630:	subs	r4, r4, #1
   1b634:	vst1.32	{d16-d17}, [r1]
   1b638:	bne	1b5d0 <__assert_fail@plt+0x9264>
   1b63c:	b	1b6ac <__assert_fail@plt+0x9340>
   1b640:	ldr	r1, [sp]
   1b644:	tst	r1, #1
   1b648:	bne	1b660 <__assert_fail@plt+0x92f4>
   1b64c:	add	r2, r8, r4
   1b650:	mov	r0, r1
   1b654:	cmp	r1, #1
   1b658:	bne	1b680 <__assert_fail@plt+0x9314>
   1b65c:	b	1b6ac <__assert_fail@plt+0x9340>
   1b660:	sub	sl, sl, #16
   1b664:	add	r0, r8, r4
   1b668:	vld1.32	{d16-d17}, [sl]
   1b66c:	sub	r2, r0, #16
   1b670:	sub	r0, r1, #1
   1b674:	vst1.32	{d16-d17}, [r2]
   1b678:	cmp	r1, #1
   1b67c:	beq	1b6ac <__assert_fail@plt+0x9340>
   1b680:	sub	r1, sl, #16
   1b684:	sub	r2, r2, #16
   1b688:	mvn	r3, #31
   1b68c:	sub	r7, r1, #16
   1b690:	vld1.32	{d16-d17}, [r1], r3
   1b694:	sub	r6, r2, #16
   1b698:	subs	r0, r0, #2
   1b69c:	vst1.32	{d16-d17}, [r2], r3
   1b6a0:	vld1.32	{d16-d17}, [r7]
   1b6a4:	vst1.32	{d16-d17}, [r6]
   1b6a8:	bne	1b68c <__assert_fail@plt+0x9320>
   1b6ac:	sub	sp, fp, #28
   1b6b0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b6b4:	mov	r0, #1
   1b6b8:	b	12470 <__assert_fail@plt+0x104>
   1b6bc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b6c0:	add	fp, sp, #28
   1b6c4:	sub	sp, sp, #12
   1b6c8:	mov	r4, r3
   1b6cc:	mov	r6, r2
   1b6d0:	mov	r5, r1
   1b6d4:	mov	sl, r0
   1b6d8:	bl	12174 <strlen@plt>
   1b6dc:	ldr	r8, [r5]
   1b6e0:	cmp	r8, #0
   1b6e4:	beq	1b7a4 <__assert_fail@plt+0x9438>
   1b6e8:	mov	r7, r0
   1b6ec:	mov	r0, #0
   1b6f0:	add	r9, r5, #4
   1b6f4:	mov	r5, #0
   1b6f8:	str	r6, [sp, #4]
   1b6fc:	str	r0, [sp]
   1b700:	mvn	r0, #0
   1b704:	str	r0, [sp, #8]
   1b708:	b	1b724 <__assert_fail@plt+0x93b8>
   1b70c:	str	r5, [sp, #8]
   1b710:	ldr	r8, [r9, r5, lsl #2]
   1b714:	add	r6, r6, r4
   1b718:	add	r5, r5, #1
   1b71c:	cmp	r8, #0
   1b720:	beq	1b78c <__assert_fail@plt+0x9420>
   1b724:	mov	r0, r8
   1b728:	mov	r1, sl
   1b72c:	mov	r2, r7
   1b730:	bl	12330 <strncmp@plt>
   1b734:	cmp	r0, #0
   1b738:	bne	1b710 <__assert_fail@plt+0x93a4>
   1b73c:	mov	r0, r8
   1b740:	bl	12174 <strlen@plt>
   1b744:	cmp	r0, r7
   1b748:	beq	1b7a8 <__assert_fail@plt+0x943c>
   1b74c:	ldr	r0, [sp, #8]
   1b750:	cmn	r0, #1
   1b754:	beq	1b70c <__assert_fail@plt+0x93a0>
   1b758:	ldr	r0, [sp, #4]
   1b75c:	cmp	r0, #0
   1b760:	beq	1b780 <__assert_fail@plt+0x9414>
   1b764:	ldr	r1, [sp, #8]
   1b768:	mov	r2, r4
   1b76c:	mla	r0, r1, r4, r0
   1b770:	mov	r1, r6
   1b774:	bl	1215c <bcmp@plt>
   1b778:	cmp	r0, #0
   1b77c:	beq	1b710 <__assert_fail@plt+0x93a4>
   1b780:	mov	r0, #1
   1b784:	str	r0, [sp]
   1b788:	b	1b710 <__assert_fail@plt+0x93a4>
   1b78c:	ldr	r0, [sp]
   1b790:	tst	r0, #1
   1b794:	ldr	r0, [sp, #8]
   1b798:	mvnne	r0, #1
   1b79c:	sub	sp, fp, #28
   1b7a0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b7a4:	mvn	r5, #0
   1b7a8:	mov	r0, r5
   1b7ac:	sub	sp, fp, #28
   1b7b0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b7b4:	push	{r4, r5, r6, r7, fp, lr}
   1b7b8:	add	fp, sp, #16
   1b7bc:	mov	r5, r0
   1b7c0:	ldr	r0, [r1]
   1b7c4:	mvn	r4, #0
   1b7c8:	cmp	r0, #0
   1b7cc:	beq	1b7f8 <__assert_fail@plt+0x948c>
   1b7d0:	add	r7, r1, #4
   1b7d4:	mov	r6, #0
   1b7d8:	mov	r1, r5
   1b7dc:	bl	11e50 <strcmp@plt>
   1b7e0:	cmp	r0, #0
   1b7e4:	beq	1b800 <__assert_fail@plt+0x9494>
   1b7e8:	ldr	r0, [r7, r6, lsl #2]
   1b7ec:	add	r6, r6, #1
   1b7f0:	cmp	r0, #0
   1b7f4:	bne	1b7d8 <__assert_fail@plt+0x946c>
   1b7f8:	mov	r0, r4
   1b7fc:	pop	{r4, r5, r6, r7, fp, pc}
   1b800:	mov	r0, r6
   1b804:	pop	{r4, r5, r6, r7, fp, pc}
   1b808:	push	{r4, r5, r6, sl, fp, lr}
   1b80c:	add	fp, sp, #16
   1b810:	sub	sp, sp, #8
   1b814:	mov	r5, r0
   1b818:	movw	r0, #29015	; 0x7157
   1b81c:	mov	r4, r1
   1b820:	movw	r1, #29042	; 0x7172
   1b824:	cmn	r2, #1
   1b828:	mov	r2, #5
   1b82c:	movt	r0, #2
   1b830:	movt	r1, #2
   1b834:	moveq	r1, r0
   1b838:	mov	r0, #0
   1b83c:	bl	11f7c <dcgettext@plt>
   1b840:	mov	r6, r0
   1b844:	mov	r0, #0
   1b848:	mov	r1, #8
   1b84c:	mov	r2, r4
   1b850:	bl	20800 <__assert_fail@plt+0xe494>
   1b854:	mov	r4, r0
   1b858:	mov	r0, #1
   1b85c:	mov	r1, r5
   1b860:	bl	20dc0 <__assert_fail@plt+0xea54>
   1b864:	str	r0, [sp]
   1b868:	mov	r0, #0
   1b86c:	mov	r1, #0
   1b870:	mov	r2, r6
   1b874:	mov	r3, r4
   1b878:	bl	120a8 <error@plt>
   1b87c:	sub	sp, fp, #16
   1b880:	pop	{r4, r5, r6, sl, fp, pc}
   1b884:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b888:	add	fp, sp, #28
   1b88c:	sub	sp, sp, #4
   1b890:	mov	sl, r1
   1b894:	movw	r1, #29071	; 0x718f
   1b898:	mov	r4, r2
   1b89c:	mov	r6, r0
   1b8a0:	mov	r0, #0
   1b8a4:	mov	r2, #5
   1b8a8:	mov	r8, #0
   1b8ac:	movt	r1, #2
   1b8b0:	bl	11f7c <dcgettext@plt>
   1b8b4:	movw	r1, #33488	; 0x82d0
   1b8b8:	movt	r1, #3
   1b8bc:	ldr	r1, [r1]
   1b8c0:	bl	11e38 <fputs_unlocked@plt>
   1b8c4:	ldr	r7, [r6]
   1b8c8:	cmp	r7, #0
   1b8cc:	beq	1b988 <__assert_fail@plt+0x961c>
   1b8d0:	add	r0, r6, #4
   1b8d4:	mov	r9, #0
   1b8d8:	mov	r6, #0
   1b8dc:	str	r0, [sp]
   1b8e0:	cmp	r9, #0
   1b8e4:	bne	1b93c <__assert_fail@plt+0x95d0>
   1b8e8:	mov	r5, #0
   1b8ec:	movw	r0, #33488	; 0x82d0
   1b8f0:	movt	r0, #3
   1b8f4:	ldr	r6, [r0]
   1b8f8:	mov	r0, r7
   1b8fc:	bl	20dd0 <__assert_fail@plt+0xea64>
   1b900:	movw	r2, #29092	; 0x71a4
   1b904:	mov	r3, r0
   1b908:	mov	r0, r6
   1b90c:	mov	r1, #1
   1b910:	movt	r2, #2
   1b914:	bl	121f8 <__fprintf_chk@plt>
   1b918:	add	r6, sl, r5
   1b91c:	ldr	r0, [sp]
   1b920:	add	r8, r8, r4
   1b924:	ldr	r7, [r0, -r9, lsl #2]
   1b928:	sub	r9, r9, #1
   1b92c:	cmp	r7, #0
   1b930:	beq	1b988 <__assert_fail@plt+0x961c>
   1b934:	cmp	r9, #0
   1b938:	beq	1b8e8 <__assert_fail@plt+0x957c>
   1b93c:	add	r1, sl, r8
   1b940:	mov	r0, r6
   1b944:	mov	r2, r4
   1b948:	bl	1215c <bcmp@plt>
   1b94c:	cmp	r0, #0
   1b950:	mov	r5, r8
   1b954:	bne	1b8ec <__assert_fail@plt+0x9580>
   1b958:	movw	r0, #33488	; 0x82d0
   1b95c:	movt	r0, #3
   1b960:	ldr	r5, [r0]
   1b964:	mov	r0, r7
   1b968:	bl	20dd0 <__assert_fail@plt+0xea64>
   1b96c:	movw	r2, #29100	; 0x71ac
   1b970:	mov	r3, r0
   1b974:	mov	r0, r5
   1b978:	mov	r1, #1
   1b97c:	movt	r2, #2
   1b980:	bl	121f8 <__fprintf_chk@plt>
   1b984:	b	1b91c <__assert_fail@plt+0x95b0>
   1b988:	movw	r0, #33488	; 0x82d0
   1b98c:	movt	r0, #3
   1b990:	ldr	r0, [r0]
   1b994:	ldr	r1, [r0, #20]
   1b998:	ldr	r2, [r0, #24]
   1b99c:	cmp	r1, r2
   1b9a0:	addcc	r2, r1, #1
   1b9a4:	strcc	r2, [r0, #20]
   1b9a8:	movcc	r0, #10
   1b9ac:	strbcc	r0, [r1]
   1b9b0:	subcc	sp, fp, #28
   1b9b4:	popcc	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b9b8:	mov	r1, #10
   1b9bc:	sub	sp, fp, #28
   1b9c0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b9c4:	b	12240 <__overflow@plt>
   1b9c8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b9cc:	add	fp, sp, #28
   1b9d0:	sub	sp, sp, #20
   1b9d4:	mov	r9, r0
   1b9d8:	ldr	r0, [fp, #16]
   1b9dc:	mov	r8, r3
   1b9e0:	mov	sl, r2
   1b9e4:	mov	r7, r1
   1b9e8:	cmp	r0, #0
   1b9ec:	beq	1baac <__assert_fail@plt+0x9740>
   1b9f0:	mov	r0, r7
   1b9f4:	str	r9, [sp, #8]
   1b9f8:	str	r8, [sp, #16]
   1b9fc:	bl	12174 <strlen@plt>
   1ba00:	ldr	r9, [sl]
   1ba04:	cmp	r9, #0
   1ba08:	beq	1bb1c <__assert_fail@plt+0x97b0>
   1ba0c:	str	sl, [sp, #4]
   1ba10:	add	r8, sl, #4
   1ba14:	ldr	sl, [sp, #16]
   1ba18:	mov	r4, r0
   1ba1c:	mov	r0, #0
   1ba20:	mvn	r6, #0
   1ba24:	mov	r5, #0
   1ba28:	str	r0, [sp, #12]
   1ba2c:	b	1ba4c <__assert_fail@plt+0x96e0>
   1ba30:	mov	r6, r5
   1ba34:	ldr	r9, [r8, r5, lsl #2]
   1ba38:	ldr	r0, [fp, #8]
   1ba3c:	add	r5, r5, #1
   1ba40:	add	sl, sl, r0
   1ba44:	cmp	r9, #0
   1ba48:	beq	1baec <__assert_fail@plt+0x9780>
   1ba4c:	mov	r0, r9
   1ba50:	mov	r1, r7
   1ba54:	mov	r2, r4
   1ba58:	bl	12330 <strncmp@plt>
   1ba5c:	cmp	r0, #0
   1ba60:	bne	1ba34 <__assert_fail@plt+0x96c8>
   1ba64:	mov	r0, r9
   1ba68:	bl	12174 <strlen@plt>
   1ba6c:	cmp	r0, r4
   1ba70:	beq	1bba0 <__assert_fail@plt+0x9834>
   1ba74:	cmn	r6, #1
   1ba78:	beq	1ba30 <__assert_fail@plt+0x96c4>
   1ba7c:	ldr	r0, [sp, #16]
   1ba80:	cmp	r0, #0
   1ba84:	beq	1baa0 <__assert_fail@plt+0x9734>
   1ba88:	ldr	r2, [fp, #8]
   1ba8c:	mov	r1, sl
   1ba90:	mla	r0, r6, r2, r0
   1ba94:	bl	1215c <bcmp@plt>
   1ba98:	cmp	r0, #0
   1ba9c:	beq	1ba34 <__assert_fail@plt+0x96c8>
   1baa0:	mov	r0, #1
   1baa4:	str	r0, [sp, #12]
   1baa8:	b	1ba34 <__assert_fail@plt+0x96c8>
   1baac:	ldr	r0, [sl]
   1bab0:	movw	r4, #29015	; 0x7157
   1bab4:	movt	r4, #2
   1bab8:	cmp	r0, #0
   1babc:	beq	1bb2c <__assert_fail@plt+0x97c0>
   1bac0:	add	r5, sl, #4
   1bac4:	mov	r6, #0
   1bac8:	mov	r1, r7
   1bacc:	bl	11e50 <strcmp@plt>
   1bad0:	cmp	r0, #0
   1bad4:	beq	1bb04 <__assert_fail@plt+0x9798>
   1bad8:	ldr	r0, [r5, r6, lsl #2]
   1badc:	add	r6, r6, #1
   1bae0:	cmp	r0, #0
   1bae4:	bne	1bac8 <__assert_fail@plt+0x975c>
   1bae8:	b	1bb2c <__assert_fail@plt+0x97c0>
   1baec:	ldr	r0, [sp, #12]
   1baf0:	ldr	r8, [sp, #16]
   1baf4:	ldr	sl, [sp, #4]
   1baf8:	ldr	r9, [sp, #8]
   1bafc:	tst	r0, #1
   1bb00:	bne	1bb10 <__assert_fail@plt+0x97a4>
   1bb04:	cmn	r6, #1
   1bb08:	bgt	1bb94 <__assert_fail@plt+0x9828>
   1bb0c:	beq	1bb24 <__assert_fail@plt+0x97b8>
   1bb10:	movw	r4, #29042	; 0x7172
   1bb14:	movt	r4, #2
   1bb18:	b	1bb2c <__assert_fail@plt+0x97c0>
   1bb1c:	ldr	r8, [sp, #16]
   1bb20:	ldr	r9, [sp, #8]
   1bb24:	movw	r4, #29015	; 0x7157
   1bb28:	movt	r4, #2
   1bb2c:	ldr	r6, [fp, #12]
   1bb30:	mov	r0, #0
   1bb34:	mov	r1, r4
   1bb38:	mov	r2, #5
   1bb3c:	bl	11f7c <dcgettext@plt>
   1bb40:	mov	r4, r0
   1bb44:	mov	r0, #0
   1bb48:	mov	r1, #8
   1bb4c:	mov	r2, r7
   1bb50:	bl	20800 <__assert_fail@plt+0xe494>
   1bb54:	mov	r5, r0
   1bb58:	mov	r0, #1
   1bb5c:	mov	r1, r9
   1bb60:	bl	20dc0 <__assert_fail@plt+0xea54>
   1bb64:	str	r0, [sp]
   1bb68:	mov	r0, #0
   1bb6c:	mov	r1, #0
   1bb70:	mov	r2, r4
   1bb74:	mov	r3, r5
   1bb78:	bl	120a8 <error@plt>
   1bb7c:	ldr	r2, [fp, #8]
   1bb80:	mov	r0, sl
   1bb84:	mov	r1, r8
   1bb88:	bl	1b884 <__assert_fail@plt+0x9518>
   1bb8c:	blx	r6
   1bb90:	mvn	r6, #0
   1bb94:	mov	r0, r6
   1bb98:	sub	sp, fp, #28
   1bb9c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1bba0:	ldr	r8, [sp, #16]
   1bba4:	ldr	sl, [sp, #4]
   1bba8:	ldr	r9, [sp, #8]
   1bbac:	mov	r6, r5
   1bbb0:	cmn	r6, #1
   1bbb4:	bgt	1bb94 <__assert_fail@plt+0x9828>
   1bbb8:	b	1bb0c <__assert_fail@plt+0x97a0>
   1bbbc:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1bbc0:	add	fp, sp, #24
   1bbc4:	ldr	r6, [r1]
   1bbc8:	cmp	r6, #0
   1bbcc:	beq	1bc30 <__assert_fail@plt+0x98c4>
   1bbd0:	mov	r8, r1
   1bbd4:	mov	r7, r2
   1bbd8:	mov	r1, r2
   1bbdc:	mov	r2, r3
   1bbe0:	mov	r4, r3
   1bbe4:	mov	r9, r0
   1bbe8:	bl	1215c <bcmp@plt>
   1bbec:	cmp	r0, #0
   1bbf0:	beq	1bc28 <__assert_fail@plt+0x98bc>
   1bbf4:	add	r7, r7, r4
   1bbf8:	add	r5, r8, #4
   1bbfc:	ldr	r6, [r5]
   1bc00:	cmp	r6, #0
   1bc04:	beq	1bc30 <__assert_fail@plt+0x98c4>
   1bc08:	mov	r0, r9
   1bc0c:	mov	r1, r7
   1bc10:	mov	r2, r4
   1bc14:	bl	1215c <bcmp@plt>
   1bc18:	add	r7, r7, r4
   1bc1c:	add	r5, r5, #4
   1bc20:	cmp	r0, #0
   1bc24:	bne	1bbfc <__assert_fail@plt+0x9890>
   1bc28:	mov	r0, r6
   1bc2c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1bc30:	mov	r6, #0
   1bc34:	mov	r0, r6
   1bc38:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1bc3c:	movw	r1, #35012	; 0x88c4
   1bc40:	movt	r1, #3
   1bc44:	str	r0, [r1]
   1bc48:	bx	lr
   1bc4c:	movw	r1, #35016	; 0x88c8
   1bc50:	movt	r1, #3
   1bc54:	strb	r0, [r1]
   1bc58:	bx	lr
   1bc5c:	push	{r4, r5, r6, sl, fp, lr}
   1bc60:	add	fp, sp, #16
   1bc64:	sub	sp, sp, #8
   1bc68:	movw	r0, #33500	; 0x82dc
   1bc6c:	movt	r0, #3
   1bc70:	ldr	r0, [r0]
   1bc74:	bl	240a0 <__assert_fail@plt+0x11d34>
   1bc78:	cmp	r0, #0
   1bc7c:	beq	1bca4 <__assert_fail@plt+0x9938>
   1bc80:	movw	r0, #35016	; 0x88c8
   1bc84:	movt	r0, #3
   1bc88:	ldrb	r0, [r0]
   1bc8c:	cmp	r0, #0
   1bc90:	beq	1bcc4 <__assert_fail@plt+0x9958>
   1bc94:	bl	12198 <__errno_location@plt>
   1bc98:	ldr	r0, [r0]
   1bc9c:	cmp	r0, #32
   1bca0:	bne	1bcc4 <__assert_fail@plt+0x9958>
   1bca4:	movw	r0, #33488	; 0x82d0
   1bca8:	movt	r0, #3
   1bcac:	ldr	r0, [r0]
   1bcb0:	bl	240a0 <__assert_fail@plt+0x11d34>
   1bcb4:	cmp	r0, #0
   1bcb8:	subeq	sp, fp, #16
   1bcbc:	popeq	{r4, r5, r6, sl, fp, pc}
   1bcc0:	b	1bd34 <__assert_fail@plt+0x99c8>
   1bcc4:	movw	r1, #29105	; 0x71b1
   1bcc8:	mov	r0, #0
   1bccc:	mov	r2, #5
   1bcd0:	movt	r1, #2
   1bcd4:	bl	11f7c <dcgettext@plt>
   1bcd8:	mov	r4, r0
   1bcdc:	movw	r0, #35012	; 0x88c4
   1bce0:	movt	r0, #3
   1bce4:	ldr	r6, [r0]
   1bce8:	bl	12198 <__errno_location@plt>
   1bcec:	ldr	r5, [r0]
   1bcf0:	cmp	r6, #0
   1bcf4:	bne	1bd10 <__assert_fail@plt+0x99a4>
   1bcf8:	movw	r2, #29102	; 0x71ae
   1bcfc:	mov	r0, #0
   1bd00:	mov	r1, r5
   1bd04:	mov	r3, r4
   1bd08:	movt	r2, #2
   1bd0c:	b	1bd30 <__assert_fail@plt+0x99c4>
   1bd10:	mov	r0, r6
   1bd14:	bl	20a48 <__assert_fail@plt+0xe6dc>
   1bd18:	movw	r2, #28017	; 0x6d71
   1bd1c:	mov	r3, r0
   1bd20:	str	r4, [sp]
   1bd24:	mov	r0, #0
   1bd28:	mov	r1, r5
   1bd2c:	movt	r2, #2
   1bd30:	bl	120a8 <error@plt>
   1bd34:	movw	r0, #33392	; 0x8270
   1bd38:	movt	r0, #3
   1bd3c:	ldr	r0, [r0]
   1bd40:	bl	11ee0 <_exit@plt>
	...
   1bd50:	add	r2, pc, #40	; 0x28
   1bd54:	mov	r1, #0
   1bd58:	vld1.64	{d16-d17}, [r2 :128]
   1bd5c:	mov	r2, #20
   1bd60:	str	r1, [r0, #24]
   1bd64:	str	r1, [r0, #16]
   1bd68:	vst1.32	{d16-d17}, [r0], r2
   1bd6c:	str	r1, [r0]
   1bd70:	bx	lr
   1bd74:	nop	{0}
   1bd78:	nop	{0}
   1bd7c:	nop	{0}
   1bd80:	strbvs	r2, [r5, -r1, lsl #6]
   1bd84:	svc	0x00cdab89
   1bd88:	ldmls	sl!, {r1, r2, r3, r4, r5, r6, r7, sl, fp, ip, lr, pc}
   1bd8c:	eorsne	r5, r2, r6, ror r4
   1bd90:	ldr	r2, [r0]
   1bd94:	str	r2, [r1]
   1bd98:	ldr	r2, [r0, #4]
   1bd9c:	str	r2, [r1, #4]
   1bda0:	ldr	r2, [r0, #8]
   1bda4:	str	r2, [r1, #8]
   1bda8:	ldr	r0, [r0, #12]
   1bdac:	str	r0, [r1, #12]
   1bdb0:	mov	r0, r1
   1bdb4:	bx	lr
   1bdb8:	push	{r4, r5, r6, r7, fp, lr}
   1bdbc:	add	fp, sp, #16
   1bdc0:	mov	r4, r1
   1bdc4:	ldr	r1, [r0, #24]
   1bdc8:	ldr	r2, [r0, #16]
   1bdcc:	mov	r5, r0
   1bdd0:	mov	r7, #32
   1bdd4:	add	r0, r2, r1
   1bdd8:	cmp	r1, #56	; 0x38
   1bddc:	movwcc	r7, #16
   1bde0:	cmp	r0, r2
   1bde4:	str	r0, [r5, #16]
   1bde8:	bcs	1bdf8 <__assert_fail@plt+0x9a8c>
   1bdec:	ldr	r2, [r5, #20]
   1bdf0:	add	r2, r2, #1
   1bdf4:	str	r2, [r5, #20]
   1bdf8:	mvn	r2, #7
   1bdfc:	add	r6, r5, #28
   1be00:	lsl	r3, r0, #3
   1be04:	add	r2, r2, r7, lsl #2
   1be08:	add	ip, r6, r7, lsl #2
   1be0c:	str	r3, [r6, r2]
   1be10:	sub	r2, r2, r1
   1be14:	ldr	r3, [r5, #20]
   1be18:	lsl	r3, r3, #3
   1be1c:	orr	r0, r3, r0, lsr #29
   1be20:	str	r0, [ip, #-4]
   1be24:	add	r0, r6, r1
   1be28:	movw	r1, #29120	; 0x71c0
   1be2c:	movt	r1, #2
   1be30:	bl	11eec <memcpy@plt>
   1be34:	lsl	r1, r7, #2
   1be38:	mov	r0, r6
   1be3c:	mov	r2, r5
   1be40:	bl	1be6c <__assert_fail@plt+0x9b00>
   1be44:	ldr	r0, [r5]
   1be48:	str	r0, [r4]
   1be4c:	ldr	r0, [r5, #4]
   1be50:	str	r0, [r4, #4]
   1be54:	ldr	r0, [r5, #8]
   1be58:	str	r0, [r4, #8]
   1be5c:	ldr	r0, [r5, #12]
   1be60:	str	r0, [r4, #12]
   1be64:	mov	r0, r4
   1be68:	pop	{r4, r5, r6, r7, fp, pc}
   1be6c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1be70:	add	fp, sp, #28
   1be74:	sub	sp, sp, #88	; 0x58
   1be78:	ldr	r3, [r2, #16]
   1be7c:	adds	r3, r3, r1
   1be80:	bic	r1, r1, #3
   1be84:	str	r3, [r2, #16]
   1be88:	add	lr, r0, r1
   1be8c:	ldr	r3, [r2, #20]
   1be90:	adc	r3, r3, #0
   1be94:	cmp	lr, r0
   1be98:	str	r3, [r2, #20]
   1be9c:	ldr	r1, [r2, #12]
   1bea0:	ldm	r2, {r3, r4, ip}
   1bea4:	str	r2, [sp]
   1bea8:	bls	1c8bc <__assert_fail@plt+0xa550>
   1beac:	mov	sl, r0
   1beb0:	str	lr, [sp, #4]
   1beb4:	eor	r2, ip, r1
   1beb8:	ldr	r0, [sl]
   1bebc:	str	r3, [sp, #24]
   1bec0:	mov	r6, r4
   1bec4:	str	r1, [sp, #28]
   1bec8:	str	ip, [fp, #-40]	; 0xffffffd8
   1becc:	ldr	r5, [sl, #8]
   1bed0:	ldr	lr, [sl, #12]
   1bed4:	ldr	r8, [sl, #36]	; 0x24
   1bed8:	and	r2, r4, r2
   1bedc:	ldr	r4, [sl, #4]
   1bee0:	eor	r7, r6, ip
   1bee4:	eor	r2, r2, r1
   1bee8:	add	r2, r3, r2
   1beec:	movw	r3, #42104	; 0xa478
   1bef0:	movt	r3, #55146	; 0xd76a
   1bef4:	add	r2, r2, r0
   1bef8:	str	r5, [fp, #-36]	; 0xffffffdc
   1befc:	str	r0, [fp, #-44]	; 0xffffffd4
   1bf00:	ldr	r0, [sl, #16]
   1bf04:	str	lr, [fp, #-52]	; 0xffffffcc
   1bf08:	str	r8, [fp, #-56]	; 0xffffffc8
   1bf0c:	str	r4, [fp, #-32]	; 0xffffffe0
   1bf10:	add	r2, r2, r3
   1bf14:	mov	r3, r6
   1bf18:	add	r2, r6, r2, ror #25
   1bf1c:	add	r6, r1, r4
   1bf20:	movw	r1, #46934	; 0xb756
   1bf24:	str	r3, [sp, #20]
   1bf28:	movt	r1, #59591	; 0xe8c7
   1bf2c:	str	r0, [sp, #44]	; 0x2c
   1bf30:	and	r7, r2, r7
   1bf34:	eor	r7, r7, ip
   1bf38:	ldr	ip, [sl, #24]
   1bf3c:	add	r7, r6, r7
   1bf40:	eor	r6, r2, r3
   1bf44:	add	r7, r7, r1
   1bf48:	ldr	r1, [fp, #-40]	; 0xffffffd8
   1bf4c:	add	r7, r2, r7, ror #20
   1bf50:	str	ip, [sp, #48]	; 0x30
   1bf54:	and	r6, r7, r6
   1bf58:	add	r4, r1, r5
   1bf5c:	movw	r1, #28891	; 0x70db
   1bf60:	eor	r6, r6, r3
   1bf64:	add	r5, r3, lr
   1bf68:	movt	r1, #9248	; 0x2420
   1bf6c:	add	r6, r4, r6
   1bf70:	add	r6, r6, r1
   1bf74:	movw	r1, #52974	; 0xceee
   1bf78:	add	r4, r7, r6, ror #15
   1bf7c:	eor	r6, r7, r2
   1bf80:	movt	r1, #49597	; 0xc1bd
   1bf84:	and	r6, r4, r6
   1bf88:	eor	r6, r6, r2
   1bf8c:	add	r2, r0, r2
   1bf90:	ldr	r0, [sl, #20]
   1bf94:	add	r6, r5, r6
   1bf98:	add	r6, r6, r1
   1bf9c:	movw	r1, #4015	; 0xfaf
   1bfa0:	add	r5, r4, r6, ror #10
   1bfa4:	eor	r6, r4, r7
   1bfa8:	movt	r1, #62844	; 0xf57c
   1bfac:	str	r0, [sp, #32]
   1bfb0:	and	r6, r5, r6
   1bfb4:	eor	r6, r6, r7
   1bfb8:	add	r7, r0, r7
   1bfbc:	ldr	r0, [sl, #28]
   1bfc0:	add	r2, r2, r6
   1bfc4:	movw	r6, #38145	; 0x9501
   1bfc8:	add	r2, r2, r1
   1bfcc:	movw	r1, #50730	; 0xc62a
   1bfd0:	movt	r6, #64838	; 0xfd46
   1bfd4:	add	r3, r5, r2, ror #25
   1bfd8:	eor	r2, r5, r4
   1bfdc:	movt	r1, #18311	; 0x4787
   1bfe0:	str	r0, [sp, #16]
   1bfe4:	and	r2, r3, r2
   1bfe8:	eor	r2, r2, r4
   1bfec:	add	r4, ip, r4
   1bff0:	add	r2, r7, r2
   1bff4:	add	r2, r2, r1
   1bff8:	movw	r1, #17939	; 0x4613
   1bffc:	add	r7, r3, r2, ror #20
   1c000:	eor	r2, r3, r5
   1c004:	movt	r1, #43056	; 0xa830
   1c008:	and	r2, r7, r2
   1c00c:	eor	r2, r2, r5
   1c010:	add	r5, r0, r5
   1c014:	ldr	r0, [sl, #32]
   1c018:	add	r2, r4, r2
   1c01c:	add	r2, r2, r1
   1c020:	add	r4, r7, r2, ror #15
   1c024:	eor	r2, r7, r3
   1c028:	str	r0, [sp, #40]	; 0x28
   1c02c:	and	r2, r4, r2
   1c030:	eor	r1, r2, r3
   1c034:	add	r3, r0, r3
   1c038:	ldr	r0, [sl, #40]	; 0x28
   1c03c:	ldr	r2, [sl, #44]	; 0x2c
   1c040:	add	r1, r5, r1
   1c044:	eor	r5, r4, r7
   1c048:	add	r1, r1, r6
   1c04c:	movw	r6, #39128	; 0x98d8
   1c050:	add	r1, r4, r1, ror #10
   1c054:	movt	r6, #27008	; 0x6980
   1c058:	str	r2, [fp, #-48]	; 0xffffffd0
   1c05c:	str	r0, [sp, #52]	; 0x34
   1c060:	and	r5, r1, r5
   1c064:	eor	lr, r5, r7
   1c068:	movw	r5, #63407	; 0xf7af
   1c06c:	add	r7, r8, r7
   1c070:	add	r3, r3, lr
   1c074:	movt	r5, #35652	; 0x8b44
   1c078:	add	r3, r3, r6
   1c07c:	add	lr, r1, r3, ror #25
   1c080:	eor	r3, r1, r4
   1c084:	and	r3, lr, r3
   1c088:	eor	r3, r3, r4
   1c08c:	add	r4, r0, r4
   1c090:	add	r3, r7, r3
   1c094:	add	r3, r3, r5
   1c098:	add	r7, lr, r3, ror #20
   1c09c:	eor	r3, lr, r1
   1c0a0:	and	r3, r7, r3
   1c0a4:	eor	r5, r7, lr
   1c0a8:	eor	r9, r3, r1
   1c0ac:	movw	r3, #42063	; 0xa44f
   1c0b0:	add	r1, r2, r1
   1c0b4:	add	r4, r4, r9
   1c0b8:	sub	r4, r4, r3
   1c0bc:	movw	r3, #55230	; 0xd7be
   1c0c0:	add	r4, r7, r4, ror #15
   1c0c4:	movt	r3, #35164	; 0x895c
   1c0c8:	and	r5, r4, r5
   1c0cc:	eor	r5, r5, lr
   1c0d0:	add	r1, r1, r5
   1c0d4:	add	r1, r1, r3
   1c0d8:	ldr	r3, [sl, #48]	; 0x30
   1c0dc:	add	r5, r4, r1, ror #10
   1c0e0:	eor	r1, r4, r7
   1c0e4:	and	r1, r5, r1
   1c0e8:	str	r3, [sp, #56]	; 0x38
   1c0ec:	add	r6, r3, lr
   1c0f0:	movw	r3, #4386	; 0x1122
   1c0f4:	eor	r1, r1, r7
   1c0f8:	movt	r3, #27536	; 0x6b90
   1c0fc:	add	r1, r6, r1
   1c100:	add	r1, r1, r3
   1c104:	ldr	r3, [sl, #56]	; 0x38
   1c108:	add	r6, r5, r1, ror #25
   1c10c:	eor	r1, r5, r4
   1c110:	and	r1, r6, r1
   1c114:	eor	lr, r1, r4
   1c118:	ldr	r1, [sl, #52]	; 0x34
   1c11c:	add	r4, r3, r4
   1c120:	mov	r9, r3
   1c124:	str	r3, [sp, #8]
   1c128:	movw	r3, #17294	; 0x438e
   1c12c:	movt	r3, #42617	; 0xa679
   1c130:	add	r7, r1, r7
   1c134:	str	r1, [sp, #36]	; 0x24
   1c138:	movw	r1, #29075	; 0x7193
   1c13c:	movt	r1, #64920	; 0xfd98
   1c140:	add	r7, r7, lr
   1c144:	add	r7, r7, r1
   1c148:	eor	r1, r6, r5
   1c14c:	add	r7, r6, r7, ror #20
   1c150:	and	r1, r7, r1
   1c154:	eor	r1, r1, r5
   1c158:	add	r1, r4, r1
   1c15c:	eor	r4, r7, r6
   1c160:	add	r1, r1, r3
   1c164:	ldr	r3, [sl, #60]	; 0x3c
   1c168:	add	sl, sl, #64	; 0x40
   1c16c:	add	r1, r7, r1, ror #15
   1c170:	and	r4, r1, r4
   1c174:	add	r5, r3, r5
   1c178:	mov	lr, r3
   1c17c:	str	r3, [sp, #12]
   1c180:	movw	r3, #2081	; 0x821
   1c184:	eor	r4, r4, r6
   1c188:	movt	r3, #18868	; 0x49b4
   1c18c:	add	r4, r5, r4
   1c190:	add	r4, r4, r3
   1c194:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1c198:	add	r4, r1, r4, ror #10
   1c19c:	eor	r5, r4, r1
   1c1a0:	and	r5, r5, r7
   1c1a4:	add	r6, r3, r6
   1c1a8:	movw	r3, #9570	; 0x2562
   1c1ac:	add	r7, ip, r7
   1c1b0:	ldr	ip, [sp, #32]
   1c1b4:	eor	r5, r5, r1
   1c1b8:	movt	r3, #63006	; 0xf61e
   1c1bc:	add	r5, r6, r5
   1c1c0:	add	r5, r5, r3
   1c1c4:	movw	r3, #45888	; 0xb340
   1c1c8:	add	r5, r4, r5, ror #27
   1c1cc:	movt	r3, #49216	; 0xc040
   1c1d0:	eor	r6, r5, r4
   1c1d4:	and	r6, r6, r1
   1c1d8:	add	r1, r2, r1
   1c1dc:	ldr	r2, [fp, #-44]	; 0xffffffd4
   1c1e0:	eor	r6, r6, r4
   1c1e4:	add	r6, r7, r6
   1c1e8:	add	r6, r6, r3
   1c1ec:	movw	r3, #23121	; 0x5a51
   1c1f0:	add	r6, r5, r6, ror #23
   1c1f4:	movt	r3, #9822	; 0x265e
   1c1f8:	eor	r7, r6, r5
   1c1fc:	and	r7, r7, r4
   1c200:	add	r4, r2, r4
   1c204:	ldr	r2, [fp, #-36]	; 0xffffffdc
   1c208:	eor	r7, r7, r5
   1c20c:	add	r1, r1, r7
   1c210:	add	r1, r1, r3
   1c214:	movw	r3, #51114	; 0xc7aa
   1c218:	add	r1, r6, r1, ror #18
   1c21c:	movt	r3, #59830	; 0xe9b6
   1c220:	eor	r7, r1, r6
   1c224:	and	r7, r7, r5
   1c228:	add	r5, ip, r5
   1c22c:	eor	r7, r7, r6
   1c230:	add	r4, r4, r7
   1c234:	add	r4, r4, r3
   1c238:	movw	r3, #4189	; 0x105d
   1c23c:	add	r4, r1, r4, ror #12
   1c240:	movt	r3, #54831	; 0xd62f
   1c244:	eor	r7, r4, r1
   1c248:	and	r7, r7, r6
   1c24c:	add	r6, r0, r6
   1c250:	ldr	r0, [fp, #-52]	; 0xffffffcc
   1c254:	eor	r7, r7, r1
   1c258:	add	r5, r5, r7
   1c25c:	add	r5, r5, r3
   1c260:	movw	r3, #5203	; 0x1453
   1c264:	add	r5, r4, r5, ror #27
   1c268:	movt	r3, #580	; 0x244
   1c26c:	eor	r7, r5, r4
   1c270:	and	r7, r7, r1
   1c274:	add	r1, lr, r1
   1c278:	ldr	lr, [sp, #44]	; 0x2c
   1c27c:	eor	r7, r7, r4
   1c280:	add	r6, r6, r7
   1c284:	add	r6, r6, r3
   1c288:	movw	r3, #59009	; 0xe681
   1c28c:	add	r6, r5, r6, ror #23
   1c290:	movt	r3, #55457	; 0xd8a1
   1c294:	eor	r7, r6, r5
   1c298:	and	r7, r7, r4
   1c29c:	add	r4, lr, r4
   1c2a0:	eor	r7, r7, r5
   1c2a4:	add	r1, r1, r7
   1c2a8:	add	r1, r1, r3
   1c2ac:	movw	r3, #64456	; 0xfbc8
   1c2b0:	add	r1, r6, r1, ror #18
   1c2b4:	movt	r3, #59347	; 0xe7d3
   1c2b8:	eor	r7, r1, r6
   1c2bc:	and	r7, r7, r5
   1c2c0:	add	r5, r8, r5
   1c2c4:	ldr	r8, [sp, #36]	; 0x24
   1c2c8:	eor	r7, r7, r6
   1c2cc:	add	r4, r4, r7
   1c2d0:	add	r4, r4, r3
   1c2d4:	movw	r3, #52710	; 0xcde6
   1c2d8:	add	r4, r1, r4, ror #12
   1c2dc:	movt	r3, #8673	; 0x21e1
   1c2e0:	eor	r7, r4, r1
   1c2e4:	and	r7, r7, r6
   1c2e8:	add	r6, r9, r6
   1c2ec:	ldr	r9, [sp, #56]	; 0x38
   1c2f0:	eor	r7, r7, r1
   1c2f4:	add	r5, r5, r7
   1c2f8:	add	r5, r5, r3
   1c2fc:	movw	r3, #2006	; 0x7d6
   1c300:	add	r5, r4, r5, ror #27
   1c304:	movt	r3, #49975	; 0xc337
   1c308:	eor	r7, r5, r4
   1c30c:	and	r7, r7, r1
   1c310:	add	r1, r0, r1
   1c314:	ldr	r0, [sp, #40]	; 0x28
   1c318:	eor	r7, r7, r4
   1c31c:	add	r6, r6, r7
   1c320:	add	r6, r6, r3
   1c324:	movw	r3, #3463	; 0xd87
   1c328:	add	r6, r5, r6, ror #23
   1c32c:	movt	r3, #62677	; 0xf4d5
   1c330:	eor	r7, r6, r5
   1c334:	and	r7, r7, r4
   1c338:	add	r4, r0, r4
   1c33c:	eor	r7, r7, r5
   1c340:	add	r1, r1, r7
   1c344:	add	r1, r1, r3
   1c348:	movw	r3, #5357	; 0x14ed
   1c34c:	add	r1, r6, r1, ror #18
   1c350:	movt	r3, #17754	; 0x455a
   1c354:	eor	r7, r1, r6
   1c358:	and	r7, r7, r5
   1c35c:	add	r5, r8, r5
   1c360:	eor	r7, r7, r6
   1c364:	add	r4, r4, r7
   1c368:	add	r4, r4, r3
   1c36c:	movw	r3, #59653	; 0xe905
   1c370:	add	r4, r1, r4, ror #12
   1c374:	movt	r3, #43491	; 0xa9e3
   1c378:	eor	r7, r4, r1
   1c37c:	and	r7, r7, r6
   1c380:	add	r6, r2, r6
   1c384:	ldr	r2, [sp, #16]
   1c388:	eor	r7, r7, r1
   1c38c:	add	r5, r5, r7
   1c390:	add	r5, r5, r3
   1c394:	movw	r3, #41976	; 0xa3f8
   1c398:	add	r5, r4, r5, ror #27
   1c39c:	movt	r3, #64751	; 0xfcef
   1c3a0:	eor	r7, r5, r4
   1c3a4:	and	r7, r7, r1
   1c3a8:	add	r1, r2, r1
   1c3ac:	eor	r7, r7, r4
   1c3b0:	add	r6, r6, r7
   1c3b4:	add	r6, r6, r3
   1c3b8:	movw	r3, #729	; 0x2d9
   1c3bc:	add	r6, r5, r6, ror #23
   1c3c0:	movt	r3, #26479	; 0x676f
   1c3c4:	eor	r7, r6, r5
   1c3c8:	and	r7, r7, r4
   1c3cc:	add	r4, r9, r4
   1c3d0:	ldr	r9, [fp, #-52]	; 0xffffffcc
   1c3d4:	eor	r7, r7, r5
   1c3d8:	add	r1, r1, r7
   1c3dc:	add	r1, r1, r3
   1c3e0:	add	r1, r6, r1, ror #18
   1c3e4:	eor	r7, r1, r6
   1c3e8:	and	r3, r7, r5
   1c3ec:	add	r5, ip, r5
   1c3f0:	ldr	ip, [sp, #8]
   1c3f4:	eor	r3, r3, r6
   1c3f8:	add	r6, r0, r6
   1c3fc:	ldr	r0, [sp, #48]	; 0x30
   1c400:	add	r3, r4, r3
   1c404:	movw	r4, #19594	; 0x4c8a
   1c408:	movt	r4, #36138	; 0x8d2a
   1c40c:	add	r3, r3, r4
   1c410:	add	r3, r1, r3, ror #12
   1c414:	eor	r4, r7, r3
   1c418:	ldr	r7, [fp, #-48]	; 0xffffffd0
   1c41c:	add	r4, r5, r4
   1c420:	movw	r5, #14658	; 0x3942
   1c424:	movt	r5, #65530	; 0xfffa
   1c428:	add	r4, r4, r5
   1c42c:	eor	r5, r3, r1
   1c430:	add	r1, r7, r1
   1c434:	ldr	r7, [fp, #-32]	; 0xffffffe0
   1c438:	add	r4, r3, r4, ror #28
   1c43c:	eor	r5, r5, r4
   1c440:	add	r5, r6, r5
   1c444:	movw	r6, #63105	; 0xf681
   1c448:	movt	r6, #34673	; 0x8771
   1c44c:	add	r5, r5, r6
   1c450:	eor	r6, r4, r3
   1c454:	add	r3, ip, r3
   1c458:	add	r5, r4, r5, ror #21
   1c45c:	eor	r6, r6, r5
   1c460:	add	r1, r1, r6
   1c464:	movw	r6, #24866	; 0x6122
   1c468:	movt	r6, #28061	; 0x6d9d
   1c46c:	add	r1, r1, r6
   1c470:	eor	r6, r5, r4
   1c474:	add	r4, r7, r4
   1c478:	ldr	r7, [sp, #52]	; 0x34
   1c47c:	add	r1, r5, r1, ror #16
   1c480:	eor	r6, r6, r1
   1c484:	add	r3, r3, r6
   1c488:	movw	r6, #14348	; 0x380c
   1c48c:	movt	r6, #64997	; 0xfde5
   1c490:	add	r3, r3, r6
   1c494:	eor	r6, r1, r5
   1c498:	add	r5, lr, r5
   1c49c:	ldr	lr, [sp, #12]
   1c4a0:	add	r3, r1, r3, ror #9
   1c4a4:	eor	r6, r6, r3
   1c4a8:	add	r4, r4, r6
   1c4ac:	movw	r6, #59972	; 0xea44
   1c4b0:	movt	r6, #42174	; 0xa4be
   1c4b4:	add	r4, r4, r6
   1c4b8:	eor	r6, r3, r1
   1c4bc:	add	r1, r2, r1
   1c4c0:	add	r4, r3, r4, ror #28
   1c4c4:	eor	r6, r6, r4
   1c4c8:	add	r5, r5, r6
   1c4cc:	movw	r6, #53161	; 0xcfa9
   1c4d0:	movt	r6, #19422	; 0x4bde
   1c4d4:	add	r5, r5, r6
   1c4d8:	eor	r6, r4, r3
   1c4dc:	add	r3, r7, r3
   1c4e0:	ldr	r7, [fp, #-36]	; 0xffffffdc
   1c4e4:	add	r5, r4, r5, ror #21
   1c4e8:	eor	r6, r6, r5
   1c4ec:	add	r1, r1, r6
   1c4f0:	movw	r6, #19296	; 0x4b60
   1c4f4:	movt	r6, #63163	; 0xf6bb
   1c4f8:	add	r1, r1, r6
   1c4fc:	eor	r6, r5, r4
   1c500:	add	r4, r8, r4
   1c504:	ldr	r8, [fp, #-44]	; 0xffffffd4
   1c508:	add	r1, r5, r1, ror #16
   1c50c:	eor	r6, r6, r1
   1c510:	add	r3, r3, r6
   1c514:	movw	r6, #48240	; 0xbc70
   1c518:	movt	r6, #48831	; 0xbebf
   1c51c:	add	r3, r3, r6
   1c520:	eor	r6, r1, r5
   1c524:	add	r5, r8, r5
   1c528:	add	r3, r1, r3, ror #9
   1c52c:	eor	r6, r6, r3
   1c530:	add	r4, r4, r6
   1c534:	movw	r6, #32454	; 0x7ec6
   1c538:	movt	r6, #10395	; 0x289b
   1c53c:	add	r4, r4, r6
   1c540:	eor	r6, r3, r1
   1c544:	add	r1, r9, r1
   1c548:	add	r4, r3, r4, ror #28
   1c54c:	eor	r6, r6, r4
   1c550:	add	r5, r5, r6
   1c554:	movw	r6, #10234	; 0x27fa
   1c558:	movt	r6, #60065	; 0xeaa1
   1c55c:	add	r5, r5, r6
   1c560:	eor	r6, r4, r3
   1c564:	add	r3, r0, r3
   1c568:	ldr	r0, [fp, #-56]	; 0xffffffc8
   1c56c:	add	r5, r4, r5, ror #21
   1c570:	eor	r6, r6, r5
   1c574:	add	r1, r1, r6
   1c578:	movw	r6, #12421	; 0x3085
   1c57c:	movt	r6, #54511	; 0xd4ef
   1c580:	add	r1, r1, r6
   1c584:	eor	r6, r5, r4
   1c588:	add	r4, r0, r4
   1c58c:	ldr	r0, [sp, #56]	; 0x38
   1c590:	add	r1, r5, r1, ror #16
   1c594:	eor	r6, r6, r1
   1c598:	add	r3, r3, r6
   1c59c:	movw	r6, #7429	; 0x1d05
   1c5a0:	movt	r6, #1160	; 0x488
   1c5a4:	add	r3, r3, r6
   1c5a8:	eor	r6, r1, r5
   1c5ac:	add	r5, r0, r5
   1c5b0:	add	r3, r1, r3, ror #9
   1c5b4:	eor	r6, r6, r3
   1c5b8:	add	r4, r4, r6
   1c5bc:	movw	r6, #53305	; 0xd039
   1c5c0:	movt	r6, #55764	; 0xd9d4
   1c5c4:	add	r4, r4, r6
   1c5c8:	eor	r6, r3, r1
   1c5cc:	add	r1, lr, r1
   1c5d0:	add	r4, r3, r4, ror #28
   1c5d4:	eor	r6, r6, r4
   1c5d8:	add	r5, r5, r6
   1c5dc:	movw	r6, #39397	; 0x99e5
   1c5e0:	movt	r6, #59099	; 0xe6db
   1c5e4:	add	r5, r5, r6
   1c5e8:	eor	r6, r4, r3
   1c5ec:	add	r3, r7, r3
   1c5f0:	ldr	r7, [sp, #32]
   1c5f4:	add	r5, r4, r5, ror #21
   1c5f8:	eor	r6, r6, r5
   1c5fc:	add	r2, r2, r5
   1c600:	add	r1, r1, r6
   1c604:	movw	r6, #31992	; 0x7cf8
   1c608:	movt	r6, #8098	; 0x1fa2
   1c60c:	add	r1, r1, r6
   1c610:	eor	r6, r5, r4
   1c614:	add	r4, r8, r4
   1c618:	add	r1, r5, r1, ror #16
   1c61c:	eor	r6, r6, r1
   1c620:	add	r3, r3, r6
   1c624:	movw	r6, #22117	; 0x5665
   1c628:	movt	r6, #50348	; 0xc4ac
   1c62c:	add	r3, r3, r6
   1c630:	mvn	r6, r5
   1c634:	movw	r5, #65431	; 0xff97
   1c638:	add	r3, r1, r3, ror #9
   1c63c:	movt	r5, #17194	; 0x432a
   1c640:	orr	r6, r3, r6
   1c644:	eor	r6, r6, r1
   1c648:	add	r4, r4, r6
   1c64c:	movw	r6, #8772	; 0x2244
   1c650:	movt	r6, #62505	; 0xf429
   1c654:	add	r4, r4, r6
   1c658:	mvn	r6, r1
   1c65c:	add	r1, ip, r1
   1c660:	ldr	ip, [fp, #-40]	; 0xffffffd8
   1c664:	add	r4, r3, r4, ror #26
   1c668:	orr	r6, r4, r6
   1c66c:	eor	r6, r6, r3
   1c670:	add	r2, r2, r6
   1c674:	add	r2, r2, r5
   1c678:	mvn	r5, r3
   1c67c:	add	r3, r7, r3
   1c680:	add	r2, r4, r2, ror #22
   1c684:	orr	r5, r2, r5
   1c688:	eor	r5, r5, r4
   1c68c:	add	r1, r1, r5
   1c690:	movw	r5, #9127	; 0x23a7
   1c694:	movt	r5, #43924	; 0xab94
   1c698:	add	r1, r1, r5
   1c69c:	mvn	r5, r4
   1c6a0:	add	r4, r0, r4
   1c6a4:	ldr	r0, [sp, #52]	; 0x34
   1c6a8:	add	r1, r2, r1, ror #17
   1c6ac:	orr	r5, r1, r5
   1c6b0:	eor	r5, r5, r2
   1c6b4:	add	r3, r3, r5
   1c6b8:	movw	r5, #41017	; 0xa039
   1c6bc:	movt	r5, #64659	; 0xfc93
   1c6c0:	add	r3, r3, r5
   1c6c4:	mvn	r5, r2
   1c6c8:	add	r2, r9, r2
   1c6cc:	add	r3, r1, r3, ror #11
   1c6d0:	orr	r5, r3, r5
   1c6d4:	eor	r5, r5, r1
   1c6d8:	add	r4, r4, r5
   1c6dc:	movw	r5, #22979	; 0x59c3
   1c6e0:	movt	r5, #25947	; 0x655b
   1c6e4:	add	r4, r4, r5
   1c6e8:	mvn	r5, r1
   1c6ec:	add	r1, r0, r1
   1c6f0:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1c6f4:	add	r4, r3, r4, ror #26
   1c6f8:	orr	r5, r4, r5
   1c6fc:	eor	r5, r5, r3
   1c700:	add	r2, r2, r5
   1c704:	movw	r5, #52370	; 0xcc92
   1c708:	movt	r5, #36620	; 0x8f0c
   1c70c:	add	r2, r2, r5
   1c710:	mvn	r5, r3
   1c714:	add	r3, r0, r3
   1c718:	ldr	r0, [sp, #40]	; 0x28
   1c71c:	add	r2, r4, r2, ror #22
   1c720:	orr	r5, r2, r5
   1c724:	eor	r5, r5, r4
   1c728:	add	r1, r1, r5
   1c72c:	movw	r5, #62589	; 0xf47d
   1c730:	movt	r5, #65519	; 0xffef
   1c734:	add	r1, r1, r5
   1c738:	mvn	r5, r4
   1c73c:	add	r4, r0, r4
   1c740:	ldr	r0, [sp, #48]	; 0x30
   1c744:	add	r1, r2, r1, ror #17
   1c748:	orr	r5, r1, r5
   1c74c:	eor	r5, r5, r2
   1c750:	add	r3, r3, r5
   1c754:	movw	r5, #24017	; 0x5dd1
   1c758:	movt	r5, #34180	; 0x8584
   1c75c:	add	r3, r3, r5
   1c760:	mvn	r5, r2
   1c764:	add	r2, lr, r2
   1c768:	ldr	lr, [sp, #4]
   1c76c:	add	r3, r1, r3, ror #11
   1c770:	orr	r5, r3, r5
   1c774:	mvn	r7, r3
   1c778:	eor	r5, r5, r1
   1c77c:	cmp	sl, lr
   1c780:	add	r4, r4, r5
   1c784:	movw	r5, #32335	; 0x7e4f
   1c788:	movt	r5, #28584	; 0x6fa8
   1c78c:	add	r4, r4, r5
   1c790:	mvn	r5, r1
   1c794:	add	r1, r0, r1
   1c798:	ldr	r0, [sp, #36]	; 0x24
   1c79c:	add	r4, r3, r4, ror #26
   1c7a0:	orr	r5, r4, r5
   1c7a4:	eor	r5, r5, r3
   1c7a8:	add	r3, r0, r3
   1c7ac:	ldr	r0, [sp, #44]	; 0x2c
   1c7b0:	add	r2, r2, r5
   1c7b4:	movw	r5, #59104	; 0xe6e0
   1c7b8:	movt	r5, #65068	; 0xfe2c
   1c7bc:	add	r2, r2, r5
   1c7c0:	movw	r5, #17172	; 0x4314
   1c7c4:	add	r6, r0, r4
   1c7c8:	ldr	r0, [fp, #-48]	; 0xffffffd0
   1c7cc:	add	r2, r4, r2, ror #22
   1c7d0:	movt	r5, #41729	; 0xa301
   1c7d4:	orr	r7, r2, r7
   1c7d8:	eor	r7, r7, r4
   1c7dc:	add	r1, r1, r7
   1c7e0:	mvn	r7, r4
   1c7e4:	movw	r4, #32386	; 0x7e82
   1c7e8:	add	r1, r1, r5
   1c7ec:	movw	r5, #4513	; 0x11a1
   1c7f0:	movt	r4, #63315	; 0xf753
   1c7f4:	add	r1, r2, r1, ror #17
   1c7f8:	movt	r5, #19976	; 0x4e08
   1c7fc:	orr	r7, r1, r7
   1c800:	eor	r7, r7, r2
   1c804:	add	r3, r3, r7
   1c808:	mvn	r7, r2
   1c80c:	add	r2, r0, r2
   1c810:	ldr	r0, [fp, #-36]	; 0xffffffdc
   1c814:	add	r3, r3, r5
   1c818:	add	r3, r1, r3, ror #11
   1c81c:	orr	r7, r3, r7
   1c820:	eor	r7, r7, r1
   1c824:	add	r7, r6, r7
   1c828:	mvn	r6, r1
   1c82c:	add	r1, r0, r1
   1c830:	ldr	r0, [fp, #-56]	; 0xffffffc8
   1c834:	add	r7, r7, r4
   1c838:	movw	r4, #62005	; 0xf235
   1c83c:	add	r7, r3, r7, ror #26
   1c840:	movt	r4, #48442	; 0xbd3a
   1c844:	orr	r6, r7, r6
   1c848:	mvn	r5, r7
   1c84c:	eor	r6, r6, r3
   1c850:	add	r2, r2, r6
   1c854:	mvn	r6, r3
   1c858:	add	r3, r0, r3
   1c85c:	add	r2, r2, r4
   1c860:	movw	r4, #53947	; 0xd2bb
   1c864:	add	r2, r7, r2, ror #22
   1c868:	movt	r4, #10967	; 0x2ad7
   1c86c:	orr	r6, r2, r6
   1c870:	eor	r6, r6, r7
   1c874:	add	r1, r1, r6
   1c878:	add	r1, r1, r4
   1c87c:	ldr	r4, [sp, #20]
   1c880:	add	r1, r2, r1, ror #17
   1c884:	orr	r5, r1, r5
   1c888:	add	ip, r1, ip
   1c88c:	add	r6, r1, r4
   1c890:	movw	r4, #54161	; 0xd391
   1c894:	eor	r5, r5, r2
   1c898:	ldr	r1, [sp, #28]
   1c89c:	movt	r4, #60294	; 0xeb86
   1c8a0:	add	r3, r3, r5
   1c8a4:	add	r3, r3, r4
   1c8a8:	add	r4, r6, r3, ror #11
   1c8ac:	ldr	r3, [sp, #24]
   1c8b0:	add	r1, r2, r1
   1c8b4:	add	r3, r7, r3
   1c8b8:	bcc	1beb4 <__assert_fail@plt+0x9b48>
   1c8bc:	ldr	r0, [sp]
   1c8c0:	stm	r0, {r3, r4, ip}
   1c8c4:	str	r1, [r0, #12]
   1c8c8:	sub	sp, fp, #28
   1c8cc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c8d0:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1c8d4:	add	fp, sp, #24
   1c8d8:	sub	sp, sp, #160	; 0xa0
   1c8dc:	mov	r8, r2
   1c8e0:	add	r2, pc, #184	; 0xb8
   1c8e4:	add	r5, sp, #4
   1c8e8:	vld1.64	{d16-d17}, [r2 :128]
   1c8ec:	mov	r2, #20
   1c8f0:	mov	r3, r5
   1c8f4:	vst1.32	{d16-d17}, [r3], r2
   1c8f8:	mov	r2, #0
   1c8fc:	str	r2, [r3]
   1c900:	str	r2, [sp, #28]
   1c904:	str	r2, [sp, #20]
   1c908:	mov	r2, r5
   1c90c:	bl	1c9b0 <__assert_fail@plt+0xa644>
   1c910:	ldr	r1, [sp, #28]
   1c914:	ldr	r2, [sp, #20]
   1c918:	mov	r7, #32
   1c91c:	add	r0, r2, r1
   1c920:	cmp	r1, #56	; 0x38
   1c924:	movwcc	r7, #16
   1c928:	cmp	r0, r2
   1c92c:	str	r0, [sp, #20]
   1c930:	bcs	1c940 <__assert_fail@plt+0xa5d4>
   1c934:	ldr	r2, [sp, #24]
   1c938:	add	r2, r2, #1
   1c93c:	str	r2, [sp, #24]
   1c940:	mvn	r2, #7
   1c944:	add	r6, r5, #28
   1c948:	lsl	r3, r0, #3
   1c94c:	add	r2, r2, r7, lsl #2
   1c950:	str	r3, [r6, r2]
   1c954:	add	r3, r6, r7, lsl #2
   1c958:	sub	r2, r2, r1
   1c95c:	ldr	r4, [sp, #24]
   1c960:	lsl	r4, r4, #3
   1c964:	orr	r0, r4, r0, lsr #29
   1c968:	str	r0, [r3, #-4]
   1c96c:	add	r0, r6, r1
   1c970:	movw	r1, #29120	; 0x71c0
   1c974:	movt	r1, #2
   1c978:	bl	11eec <memcpy@plt>
   1c97c:	lsl	r1, r7, #2
   1c980:	mov	r0, r6
   1c984:	mov	r2, r5
   1c988:	bl	1be6c <__assert_fail@plt+0x9b00>
   1c98c:	vld1.32	{d16-d17}, [r5]
   1c990:	mov	r0, r8
   1c994:	vst1.8	{d16-d17}, [r8]
   1c998:	sub	sp, fp, #24
   1c99c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1c9a0:	strbvs	r2, [r5, -r1, lsl #6]
   1c9a4:	svc	0x00cdab89
   1c9a8:	ldmls	sl!, {r1, r2, r3, r4, r5, r6, r7, sl, fp, ip, lr, pc}
   1c9ac:	eorsne	r5, r2, r6, ror r4
   1c9b0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c9b4:	add	fp, sp, #28
   1c9b8:	sub	sp, sp, #12
   1c9bc:	ldr	r5, [r2, #24]
   1c9c0:	mov	r4, r2
   1c9c4:	mov	r8, r1
   1c9c8:	mov	r6, r0
   1c9cc:	cmp	r5, #0
   1c9d0:	beq	1ca40 <__assert_fail@plt+0xa6d4>
   1c9d4:	rsb	r7, r5, #128	; 0x80
   1c9d8:	add	r9, r4, #28
   1c9dc:	mov	r1, r6
   1c9e0:	cmp	r7, r8
   1c9e4:	add	r0, r9, r5
   1c9e8:	movhi	r7, r8
   1c9ec:	mov	r2, r7
   1c9f0:	bl	11eec <memcpy@plt>
   1c9f4:	ldr	r0, [r4, #24]
   1c9f8:	add	r0, r0, r7
   1c9fc:	cmp	r0, #65	; 0x41
   1ca00:	str	r0, [r4, #24]
   1ca04:	bcc	1ca38 <__assert_fail@plt+0xa6cc>
   1ca08:	bic	r1, r0, #63	; 0x3f
   1ca0c:	mov	r0, r9
   1ca10:	mov	r2, r4
   1ca14:	bl	1be6c <__assert_fail@plt+0x9b00>
   1ca18:	ldr	r0, [r4, #24]
   1ca1c:	and	r2, r0, #63	; 0x3f
   1ca20:	add	r0, r7, r5
   1ca24:	bic	r0, r0, #63	; 0x3f
   1ca28:	str	r2, [r4, #24]
   1ca2c:	add	r1, r9, r0
   1ca30:	mov	r0, r9
   1ca34:	bl	11eec <memcpy@plt>
   1ca38:	sub	r8, r8, r7
   1ca3c:	add	r6, r6, r7
   1ca40:	cmp	r8, #64	; 0x40
   1ca44:	bcc	1cae4 <__assert_fail@plt+0xa778>
   1ca48:	tst	r6, #3
   1ca4c:	beq	1caf8 <__assert_fail@plt+0xa78c>
   1ca50:	cmp	r8, #65	; 0x41
   1ca54:	bcc	1cb20 <__assert_fail@plt+0xa7b4>
   1ca58:	add	r5, r4, #28
   1ca5c:	sub	r0, r8, #65	; 0x41
   1ca60:	mov	r7, r6
   1ca64:	str	r8, [sp, #8]
   1ca68:	bic	r0, r0, #63	; 0x3f
   1ca6c:	add	sl, r5, #32
   1ca70:	add	r9, r5, #16
   1ca74:	str	r0, [sp, #4]
   1ca78:	mov	r0, #64	; 0x40
   1ca7c:	add	r1, r6, #48	; 0x30
   1ca80:	mov	r2, r4
   1ca84:	vld1.8	{d16-d17}, [r7], r0
   1ca88:	add	r0, r6, #32
   1ca8c:	vld1.8	{d18-d19}, [r1]
   1ca90:	mov	r1, #48	; 0x30
   1ca94:	vld1.8	{d20-d21}, [r0]
   1ca98:	mov	r0, r5
   1ca9c:	vst1.8	{d16-d17}, [r0], r1
   1caa0:	add	r1, r6, #16
   1caa4:	vld1.8	{d16-d17}, [r1]
   1caa8:	vst1.8	{d18-d19}, [r0]
   1caac:	mov	r0, r5
   1cab0:	mov	r1, #64	; 0x40
   1cab4:	vst1.8	{d20-d21}, [sl]
   1cab8:	vst1.8	{d16-d17}, [r9]
   1cabc:	bl	1be6c <__assert_fail@plt+0x9b00>
   1cac0:	sub	r8, r8, #64	; 0x40
   1cac4:	mov	r6, r7
   1cac8:	cmp	r8, #64	; 0x40
   1cacc:	bhi	1ca78 <__assert_fail@plt+0xa70c>
   1cad0:	ldr	r0, [sp, #8]
   1cad4:	ldr	r1, [sp, #4]
   1cad8:	sub	r0, r0, r1
   1cadc:	sub	r8, r0, #64	; 0x40
   1cae0:	b	1cb28 <__assert_fail@plt+0xa7bc>
   1cae4:	mov	r7, r6
   1cae8:	cmp	r8, #0
   1caec:	bne	1cb28 <__assert_fail@plt+0xa7bc>
   1caf0:	sub	sp, fp, #28
   1caf4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1caf8:	bic	r5, r8, #63	; 0x3f
   1cafc:	mov	r0, r6
   1cb00:	mov	r2, r4
   1cb04:	mov	r1, r5
   1cb08:	bl	1be6c <__assert_fail@plt+0x9b00>
   1cb0c:	add	r7, r6, r5
   1cb10:	and	r8, r8, #63	; 0x3f
   1cb14:	cmp	r8, #0
   1cb18:	bne	1cb28 <__assert_fail@plt+0xa7bc>
   1cb1c:	b	1caf0 <__assert_fail@plt+0xa784>
   1cb20:	mov	r7, r6
   1cb24:	mov	r8, #64	; 0x40
   1cb28:	ldr	r5, [r4, #24]
   1cb2c:	add	r6, r4, #28
   1cb30:	mov	r1, r7
   1cb34:	mov	r2, r8
   1cb38:	add	r0, r6, r5
   1cb3c:	bl	11eec <memcpy@plt>
   1cb40:	add	r5, r5, r8
   1cb44:	cmp	r5, #64	; 0x40
   1cb48:	bcc	1cb70 <__assert_fail@plt+0xa804>
   1cb4c:	mov	r0, r6
   1cb50:	mov	r1, #64	; 0x40
   1cb54:	mov	r2, r4
   1cb58:	bl	1be6c <__assert_fail@plt+0x9b00>
   1cb5c:	sub	r5, r5, #64	; 0x40
   1cb60:	add	r1, r4, #92	; 0x5c
   1cb64:	mov	r0, r6
   1cb68:	mov	r2, r5
   1cb6c:	bl	11eec <memcpy@plt>
   1cb70:	str	r5, [r4, #24]
   1cb74:	sub	sp, fp, #28
   1cb78:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1cb7c:	b	11e68 <posix_fadvise64@plt>
   1cb80:	cmp	r0, #0
   1cb84:	bxeq	lr
   1cb88:	push	{r4, sl, fp, lr}
   1cb8c:	add	fp, sp, #8
   1cb90:	sub	sp, sp, #16
   1cb94:	mov	r4, r1
   1cb98:	bl	121ec <fileno@plt>
   1cb9c:	mov	r1, #0
   1cba0:	mov	r2, #0
   1cba4:	mov	r3, #0
   1cba8:	str	r1, [sp]
   1cbac:	stmib	sp, {r1, r4}
   1cbb0:	bl	11e68 <posix_fadvise64@plt>
   1cbb4:	sub	sp, fp, #8
   1cbb8:	pop	{r4, sl, fp, pc}
   1cbbc:	push	{r4, r5, r6, sl, fp, lr}
   1cbc0:	add	fp, sp, #16
   1cbc4:	sub	sp, sp, #8
   1cbc8:	mov	r4, r0
   1cbcc:	bl	121ec <fileno@plt>
   1cbd0:	cmn	r0, #1
   1cbd4:	ble	1cc48 <__assert_fail@plt+0xa8dc>
   1cbd8:	mov	r0, r4
   1cbdc:	bl	12114 <__freading@plt>
   1cbe0:	cmp	r0, #0
   1cbe4:	beq	1cc10 <__assert_fail@plt+0xa8a4>
   1cbe8:	mov	r0, r4
   1cbec:	bl	121ec <fileno@plt>
   1cbf0:	mov	r1, #1
   1cbf4:	mov	r2, #0
   1cbf8:	mov	r3, #0
   1cbfc:	str	r1, [sp]
   1cc00:	bl	12048 <lseek64@plt>
   1cc04:	and	r0, r0, r1
   1cc08:	cmn	r0, #1
   1cc0c:	beq	1cc48 <__assert_fail@plt+0xa8dc>
   1cc10:	mov	r0, r4
   1cc14:	bl	1cc58 <__assert_fail@plt+0xa8ec>
   1cc18:	cmp	r0, #0
   1cc1c:	beq	1cc48 <__assert_fail@plt+0xa8dc>
   1cc20:	bl	12198 <__errno_location@plt>
   1cc24:	ldr	r6, [r0]
   1cc28:	mov	r5, r0
   1cc2c:	mov	r0, r4
   1cc30:	bl	12210 <fclose@plt>
   1cc34:	cmp	r6, #0
   1cc38:	strne	r6, [r5]
   1cc3c:	mvnne	r0, #0
   1cc40:	sub	sp, fp, #16
   1cc44:	pop	{r4, r5, r6, sl, fp, pc}
   1cc48:	mov	r0, r4
   1cc4c:	sub	sp, fp, #16
   1cc50:	pop	{r4, r5, r6, sl, fp, lr}
   1cc54:	b	12210 <fclose@plt>
   1cc58:	push	{r4, sl, fp, lr}
   1cc5c:	add	fp, sp, #8
   1cc60:	sub	sp, sp, #8
   1cc64:	mov	r4, r0
   1cc68:	cmp	r0, #0
   1cc6c:	beq	1cca4 <__assert_fail@plt+0xa938>
   1cc70:	mov	r0, r4
   1cc74:	bl	12114 <__freading@plt>
   1cc78:	cmp	r0, #0
   1cc7c:	beq	1cca4 <__assert_fail@plt+0xa938>
   1cc80:	ldrb	r0, [r4, #1]
   1cc84:	tst	r0, #1
   1cc88:	beq	1cca4 <__assert_fail@plt+0xa938>
   1cc8c:	mov	r0, #1
   1cc90:	mov	r2, #0
   1cc94:	mov	r3, #0
   1cc98:	str	r0, [sp]
   1cc9c:	mov	r0, r4
   1cca0:	bl	1d170 <__assert_fail@plt+0xae04>
   1cca4:	mov	r0, r4
   1cca8:	sub	sp, fp, #8
   1ccac:	pop	{r4, sl, fp, lr}
   1ccb0:	b	11e8c <fflush@plt>
   1ccb4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ccb8:	add	fp, sp, #28
   1ccbc:	sub	sp, sp, #12
   1ccc0:	mov	r8, r1
   1ccc4:	mov	r9, r0
   1ccc8:	bl	11e50 <strcmp@plt>
   1cccc:	cmp	r0, #0
   1ccd0:	beq	1cd6c <__assert_fail@plt+0xaa00>
   1ccd4:	ldrb	r4, [r9]
   1ccd8:	cmp	r4, #0
   1ccdc:	beq	1cd60 <__assert_fail@plt+0xa9f4>
   1cce0:	ldrb	r6, [r8]
   1cce4:	cmp	r6, #0
   1cce8:	beq	1d120 <__assert_fail@plt+0xadb4>
   1ccec:	mov	sl, r0
   1ccf0:	movw	r0, #29185	; 0x7201
   1ccf4:	mov	r1, r9
   1ccf8:	movt	r0, #2
   1ccfc:	bl	11e50 <strcmp@plt>
   1cd00:	cmp	r0, #0
   1cd04:	beq	1cd60 <__assert_fail@plt+0xa9f4>
   1cd08:	movw	r0, #29185	; 0x7201
   1cd0c:	mov	r1, r8
   1cd10:	movt	r0, #2
   1cd14:	bl	11e50 <strcmp@plt>
   1cd18:	cmp	r0, #0
   1cd1c:	beq	1d120 <__assert_fail@plt+0xadb4>
   1cd20:	movw	r0, #29184	; 0x7200
   1cd24:	mov	r1, r9
   1cd28:	movt	r0, #2
   1cd2c:	bl	11e50 <strcmp@plt>
   1cd30:	cmp	r0, #0
   1cd34:	beq	1cd60 <__assert_fail@plt+0xa9f4>
   1cd38:	movw	r0, #29184	; 0x7200
   1cd3c:	mov	r1, r8
   1cd40:	movt	r0, #2
   1cd44:	bl	11e50 <strcmp@plt>
   1cd48:	cmp	r0, #0
   1cd4c:	beq	1d120 <__assert_fail@plt+0xadb4>
   1cd50:	cmp	r4, #46	; 0x2e
   1cd54:	bne	1cd78 <__assert_fail@plt+0xaa0c>
   1cd58:	cmp	r6, #46	; 0x2e
   1cd5c:	beq	1cd78 <__assert_fail@plt+0xaa0c>
   1cd60:	mvn	r0, #0
   1cd64:	sub	sp, fp, #28
   1cd68:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1cd6c:	mov	r0, #0
   1cd70:	sub	sp, fp, #28
   1cd74:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1cd78:	cmp	r4, #46	; 0x2e
   1cd7c:	bne	1cda8 <__assert_fail@plt+0xaa3c>
   1cd80:	mov	r4, #46	; 0x2e
   1cd84:	cmp	r6, #46	; 0x2e
   1cd88:	bne	1cdb0 <__assert_fail@plt+0xaa44>
   1cd8c:	ldrb	r4, [r9, #1]!
   1cd90:	add	r8, r8, #1
   1cd94:	cmp	r4, #0
   1cd98:	bne	1cdb0 <__assert_fail@plt+0xaa44>
   1cd9c:	mov	r7, #0
   1cda0:	mov	r6, r9
   1cda4:	b	1ce40 <__assert_fail@plt+0xaad4>
   1cda8:	cmp	r6, #46	; 0x2e
   1cdac:	beq	1d120 <__assert_fail@plt+0xadb4>
   1cdb0:	mov	r1, #0
   1cdb4:	mvn	r5, #64	; 0x40
   1cdb8:	mov	r6, r9
   1cdbc:	mov	r7, #0
   1cdc0:	tst	r1, #1
   1cdc4:	beq	1ce10 <__assert_fail@plt+0xaaa4>
   1cdc8:	b	1cdec <__assert_fail@plt+0xaa80>
   1cdcc:	cmp	r7, #0
   1cdd0:	mov	r1, #1
   1cdd4:	moveq	r7, r6
   1cdd8:	ldrb	r4, [r6, #1]!
   1cddc:	cmp	r4, #0
   1cde0:	beq	1ce40 <__assert_fail@plt+0xaad4>
   1cde4:	tst	r1, #1
   1cde8:	beq	1ce10 <__assert_fail@plt+0xaaa4>
   1cdec:	uxtab	r0, r5, r4
   1cdf0:	mov	r1, #0
   1cdf4:	cmp	r0, #26
   1cdf8:	bcc	1cdd8 <__assert_fail@plt+0xaa6c>
   1cdfc:	uxtb	r0, r4
   1ce00:	sub	r2, r0, #97	; 0x61
   1ce04:	cmp	r2, #26
   1ce08:	bcc	1cdd8 <__assert_fail@plt+0xaa6c>
   1ce0c:	b	1ce30 <__assert_fail@plt+0xaac4>
   1ce10:	uxtb	r0, r4
   1ce14:	cmp	r0, #46	; 0x2e
   1ce18:	beq	1cdcc <__assert_fail@plt+0xaa60>
   1ce1c:	bl	23d7c <__assert_fail@plt+0x11a10>
   1ce20:	mov	r1, #0
   1ce24:	cmp	r0, #0
   1ce28:	bne	1cdd8 <__assert_fail@plt+0xaa6c>
   1ce2c:	ldrb	r0, [r6]
   1ce30:	mov	r1, #0
   1ce34:	cmp	r0, #126	; 0x7e
   1ce38:	movne	r7, r1
   1ce3c:	b	1cdd8 <__assert_fail@plt+0xaa6c>
   1ce40:	ldrb	r0, [r8]
   1ce44:	str	r7, [sp, #8]
   1ce48:	cmp	r0, #0
   1ce4c:	beq	1cee0 <__assert_fail@plt+0xab74>
   1ce50:	mov	r1, #0
   1ce54:	mvn	r5, #64	; 0x40
   1ce58:	mov	r4, r8
   1ce5c:	mov	r7, #0
   1ce60:	tst	r1, #1
   1ce64:	beq	1ceb0 <__assert_fail@plt+0xab44>
   1ce68:	b	1ce8c <__assert_fail@plt+0xab20>
   1ce6c:	cmp	r7, #0
   1ce70:	mov	r1, #1
   1ce74:	moveq	r7, r4
   1ce78:	ldrb	r0, [r4, #1]!
   1ce7c:	cmp	r0, #0
   1ce80:	beq	1cee8 <__assert_fail@plt+0xab7c>
   1ce84:	tst	r1, #1
   1ce88:	beq	1ceb0 <__assert_fail@plt+0xab44>
   1ce8c:	uxtab	r2, r5, r0
   1ce90:	mov	r1, #0
   1ce94:	cmp	r2, #26
   1ce98:	bcc	1ce78 <__assert_fail@plt+0xab0c>
   1ce9c:	uxtb	r0, r0
   1cea0:	sub	r2, r0, #97	; 0x61
   1cea4:	cmp	r2, #26
   1cea8:	bcc	1ce78 <__assert_fail@plt+0xab0c>
   1ceac:	b	1ced0 <__assert_fail@plt+0xab64>
   1ceb0:	uxtb	r0, r0
   1ceb4:	cmp	r0, #46	; 0x2e
   1ceb8:	beq	1ce6c <__assert_fail@plt+0xab00>
   1cebc:	bl	23d7c <__assert_fail@plt+0x11a10>
   1cec0:	mov	r1, #0
   1cec4:	cmp	r0, #0
   1cec8:	bne	1ce78 <__assert_fail@plt+0xab0c>
   1cecc:	ldrb	r0, [r4]
   1ced0:	mov	r1, #0
   1ced4:	cmp	r0, #126	; 0x7e
   1ced8:	movne	r7, r1
   1cedc:	b	1ce78 <__assert_fail@plt+0xab0c>
   1cee0:	mov	r7, #0
   1cee4:	mov	r4, r8
   1cee8:	ldr	r1, [sp, #8]
   1ceec:	cmp	r7, #0
   1cef0:	mov	r0, r4
   1cef4:	movne	r0, r7
   1cef8:	sub	lr, r0, r8
   1cefc:	mov	r0, r6
   1cf00:	cmp	r1, #0
   1cf04:	movne	r0, r1
   1cf08:	sub	r2, r0, r9
   1cf0c:	orrs	r0, r1, r7
   1cf10:	beq	1cf40 <__assert_fail@plt+0xabd4>
   1cf14:	cmp	r2, lr
   1cf18:	bne	1cf40 <__assert_fail@plt+0xabd4>
   1cf1c:	mov	r0, r9
   1cf20:	mov	r1, r8
   1cf24:	mov	r5, r2
   1cf28:	bl	12330 <strncmp@plt>
   1cf2c:	cmp	r0, #0
   1cf30:	mov	r2, r5
   1cf34:	mov	lr, r5
   1cf38:	subeq	lr, r4, r8
   1cf3c:	subeq	r2, r6, r9
   1cf40:	mov	ip, #0
   1cf44:	mov	r6, #0
   1cf48:	cmp	ip, lr
   1cf4c:	cmpcs	r6, r2
   1cf50:	bcs	1d13c <__assert_fail@plt+0xadd0>
   1cf54:	cmp	r6, r2
   1cf58:	bcs	1cf6c <__assert_fail@plt+0xac00>
   1cf5c:	ldrb	r0, [r9, r6]
   1cf60:	sub	r0, r0, #48	; 0x30
   1cf64:	cmp	r0, #9
   1cf68:	bhi	1cf84 <__assert_fail@plt+0xac18>
   1cf6c:	cmp	ip, lr
   1cf70:	bcs	1d04c <__assert_fail@plt+0xace0>
   1cf74:	ldrb	r0, [r8, ip]
   1cf78:	sub	r0, r0, #48	; 0x30
   1cf7c:	cmp	r0, #10
   1cf80:	bcc	1d04c <__assert_fail@plt+0xace0>
   1cf84:	mov	r0, #0
   1cf88:	cmp	r2, r6
   1cf8c:	mov	r1, #0
   1cf90:	beq	1cfe0 <__assert_fail@plt+0xac74>
   1cf94:	ldrb	r3, [r9, r6]
   1cf98:	sub	r1, r3, #48	; 0x30
   1cf9c:	cmp	r1, #10
   1cfa0:	mov	r1, #0
   1cfa4:	bcc	1cfe0 <__assert_fail@plt+0xac74>
   1cfa8:	sub	r1, r3, #65	; 0x41
   1cfac:	cmp	r1, #26
   1cfb0:	bcc	1cfdc <__assert_fail@plt+0xac70>
   1cfb4:	sub	r1, r3, #97	; 0x61
   1cfb8:	cmp	r1, #26
   1cfbc:	mov	r1, r3
   1cfc0:	bcc	1cfe0 <__assert_fail@plt+0xac74>
   1cfc4:	cmp	r3, #126	; 0x7e
   1cfc8:	orr	r1, r3, #256	; 0x100
   1cfcc:	mvneq	r1, #0
   1cfd0:	cmp	lr, ip
   1cfd4:	bne	1cfe8 <__assert_fail@plt+0xac7c>
   1cfd8:	b	1d030 <__assert_fail@plt+0xacc4>
   1cfdc:	mov	r1, r3
   1cfe0:	cmp	lr, ip
   1cfe4:	beq	1d030 <__assert_fail@plt+0xacc4>
   1cfe8:	ldrb	r3, [r8, ip]
   1cfec:	sub	r7, r3, #48	; 0x30
   1cff0:	cmp	r7, #10
   1cff4:	bcc	1d030 <__assert_fail@plt+0xacc4>
   1cff8:	sub	r0, r3, #65	; 0x41
   1cffc:	cmp	r0, #26
   1d000:	bcc	1d02c <__assert_fail@plt+0xacc0>
   1d004:	sub	r0, r3, #97	; 0x61
   1d008:	cmp	r0, #26
   1d00c:	mov	r0, r3
   1d010:	bcc	1d030 <__assert_fail@plt+0xacc4>
   1d014:	cmp	r3, #126	; 0x7e
   1d018:	orr	r0, r3, #256	; 0x100
   1d01c:	mvneq	r0, #0
   1d020:	cmp	r1, r0
   1d024:	beq	1d038 <__assert_fail@plt+0xaccc>
   1d028:	b	1d12c <__assert_fail@plt+0xadc0>
   1d02c:	mov	r0, r3
   1d030:	cmp	r1, r0
   1d034:	bne	1d12c <__assert_fail@plt+0xadc0>
   1d038:	add	ip, ip, #1
   1d03c:	add	r6, r6, #1
   1d040:	cmp	r6, r2
   1d044:	bcc	1cf5c <__assert_fail@plt+0xabf0>
   1d048:	b	1cf6c <__assert_fail@plt+0xac00>
   1d04c:	mov	r3, r6
   1d050:	ldrb	r4, [r9, r3]
   1d054:	add	r3, r3, #1
   1d058:	cmp	r4, #48	; 0x30
   1d05c:	beq	1d050 <__assert_fail@plt+0xace4>
   1d060:	sub	r6, r3, #1
   1d064:	ldrb	r5, [r8, ip]
   1d068:	add	ip, ip, #1
   1d06c:	cmp	r5, #48	; 0x30
   1d070:	beq	1d064 <__assert_fail@plt+0xacf8>
   1d074:	sub	r1, r5, #48	; 0x30
   1d078:	sub	r7, r4, #48	; 0x30
   1d07c:	mov	r0, #0
   1d080:	cmp	r1, #10
   1d084:	mov	r1, #0
   1d088:	movwcc	r1, #1
   1d08c:	cmp	r7, #9
   1d090:	bhi	1d108 <__assert_fail@plt+0xad9c>
   1d094:	add	r0, r8, ip
   1d098:	mvn	r6, #0
   1d09c:	mov	r7, r9
   1d0a0:	str	lr, [sp, #4]
   1d0a4:	str	r0, [sp, #8]
   1d0a8:	mov	r0, #0
   1d0ac:	tst	r1, #1
   1d0b0:	beq	1d120 <__assert_fail@plt+0xadb4>
   1d0b4:	ldr	r1, [sp, #8]
   1d0b8:	cmp	r0, #0
   1d0bc:	subeq	r0, r4, r5
   1d0c0:	ldrb	r4, [r7, r3]
   1d0c4:	add	r7, r7, #1
   1d0c8:	add	r1, r1, r6
   1d0cc:	add	r6, r6, #1
   1d0d0:	ldrb	r5, [r1, #1]
   1d0d4:	sub	lr, r4, #48	; 0x30
   1d0d8:	sub	r1, r5, #48	; 0x30
   1d0dc:	cmp	r1, #10
   1d0e0:	mov	r1, #0
   1d0e4:	movwcc	r1, #1
   1d0e8:	cmp	lr, #10
   1d0ec:	bcc	1d0ac <__assert_fail@plt+0xad40>
   1d0f0:	ldr	lr, [sp, #4]
   1d0f4:	add	ip, ip, r6
   1d0f8:	add	r6, r3, r6
   1d0fc:	cmp	r1, #0
   1d100:	beq	1d114 <__assert_fail@plt+0xada8>
   1d104:	b	1cd60 <__assert_fail@plt+0xa9f4>
   1d108:	sub	ip, ip, #1
   1d10c:	cmp	r1, #0
   1d110:	bne	1cd60 <__assert_fail@plt+0xa9f4>
   1d114:	cmp	r0, #0
   1d118:	beq	1cf48 <__assert_fail@plt+0xabdc>
   1d11c:	b	1d134 <__assert_fail@plt+0xadc8>
   1d120:	mov	r0, #1
   1d124:	sub	sp, fp, #28
   1d128:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d12c:	subs	r0, r1, r0
   1d130:	moveq	r0, sl
   1d134:	sub	sp, fp, #28
   1d138:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d13c:	mov	r0, sl
   1d140:	sub	sp, fp, #28
   1d144:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d148:	push	{r4, r5, r6, sl, fp, lr}
   1d14c:	add	fp, sp, #16
   1d150:	mov	r4, r0
   1d154:	bl	12198 <__errno_location@plt>
   1d158:	ldr	r6, [r0]
   1d15c:	mov	r5, r0
   1d160:	mov	r0, r4
   1d164:	bl	11eb0 <free@plt>
   1d168:	str	r6, [r5]
   1d16c:	pop	{r4, r5, r6, sl, fp, pc}
   1d170:	push	{r4, r5, r6, r7, fp, lr}
   1d174:	add	fp, sp, #16
   1d178:	sub	sp, sp, #8
   1d17c:	mov	r4, r0
   1d180:	ldr	r0, [r0, #4]
   1d184:	mov	r5, r3
   1d188:	mov	r6, r2
   1d18c:	ldr	r1, [r4, #8]
   1d190:	cmp	r1, r0
   1d194:	bne	1d1b0 <__assert_fail@plt+0xae44>
   1d198:	ldrd	r0, [r4, #16]
   1d19c:	cmp	r1, r0
   1d1a0:	bne	1d1b0 <__assert_fail@plt+0xae44>
   1d1a4:	ldr	r0, [r4, #36]	; 0x24
   1d1a8:	cmp	r0, #0
   1d1ac:	beq	1d1c8 <__assert_fail@plt+0xae5c>
   1d1b0:	mov	r0, r4
   1d1b4:	mov	r2, r6
   1d1b8:	mov	r3, r5
   1d1bc:	sub	sp, fp, #16
   1d1c0:	pop	{r4, r5, r6, r7, fp, lr}
   1d1c4:	b	12228 <fseeko64@plt>
   1d1c8:	ldr	r7, [fp, #8]
   1d1cc:	mov	r0, r4
   1d1d0:	bl	121ec <fileno@plt>
   1d1d4:	mov	r2, r6
   1d1d8:	mov	r3, r5
   1d1dc:	str	r7, [sp]
   1d1e0:	bl	12048 <lseek64@plt>
   1d1e4:	and	r2, r0, r1
   1d1e8:	cmn	r2, #1
   1d1ec:	beq	1d20c <__assert_fail@plt+0xaea0>
   1d1f0:	strd	r0, [r4, #80]	; 0x50
   1d1f4:	ldr	r0, [r4]
   1d1f8:	bic	r0, r0, #16
   1d1fc:	str	r0, [r4]
   1d200:	mov	r0, #0
   1d204:	sub	sp, fp, #16
   1d208:	pop	{r4, r5, r6, r7, fp, pc}
   1d20c:	mvn	r0, #0
   1d210:	sub	sp, fp, #16
   1d214:	pop	{r4, r5, r6, r7, fp, pc}
   1d218:	push	{r4, sl, fp, lr}
   1d21c:	add	fp, sp, #8
   1d220:	sub	sp, sp, #264	; 0x108
   1d224:	add	r1, sp, #7
   1d228:	movw	r2, #257	; 0x101
   1d22c:	bl	21a98 <__assert_fail@plt+0xf72c>
   1d230:	mov	r4, #0
   1d234:	cmp	r0, #0
   1d238:	bne	1d278 <__assert_fail@plt+0xaf0c>
   1d23c:	movw	r1, #26036	; 0x65b4
   1d240:	add	r0, sp, #7
   1d244:	mov	r2, #2
   1d248:	movt	r1, #2
   1d24c:	bl	1215c <bcmp@plt>
   1d250:	cmp	r0, #0
   1d254:	beq	1d278 <__assert_fail@plt+0xaf0c>
   1d258:	movw	r1, #29187	; 0x7203
   1d25c:	add	r0, sp, #7
   1d260:	mov	r2, #6
   1d264:	movt	r1, #2
   1d268:	bl	1215c <bcmp@plt>
   1d26c:	cmp	r0, #0
   1d270:	mov	r4, r0
   1d274:	movwne	r4, #1
   1d278:	mov	r0, r4
   1d27c:	sub	sp, fp, #8
   1d280:	pop	{r4, sl, fp, pc}
   1d284:	andeq	r0, r0, r0
   1d288:	ldr	r0, [r0, #8]
   1d28c:	bx	lr
   1d290:	ldr	r0, [r0, #12]
   1d294:	bx	lr
   1d298:	ldr	r0, [r0, #16]
   1d29c:	bx	lr
   1d2a0:	ldm	r0, {r2, ip}
   1d2a4:	mov	r0, #0
   1d2a8:	cmp	r2, ip
   1d2ac:	bxcs	lr
   1d2b0:	mov	r0, #0
   1d2b4:	b	1d2c4 <__assert_fail@plt+0xaf58>
   1d2b8:	add	r2, r2, #8
   1d2bc:	cmp	r2, ip
   1d2c0:	bcs	1d2f4 <__assert_fail@plt+0xaf88>
   1d2c4:	ldr	r1, [r2]
   1d2c8:	cmp	r1, #0
   1d2cc:	beq	1d2b8 <__assert_fail@plt+0xaf4c>
   1d2d0:	mov	r3, #0
   1d2d4:	mov	r1, r2
   1d2d8:	ldr	r1, [r1, #4]
   1d2dc:	add	r3, r3, #1
   1d2e0:	cmp	r1, #0
   1d2e4:	bne	1d2d8 <__assert_fail@plt+0xaf6c>
   1d2e8:	cmp	r3, r0
   1d2ec:	movhi	r0, r3
   1d2f0:	b	1d2b8 <__assert_fail@plt+0xaf4c>
   1d2f4:	bx	lr
   1d2f8:	push	{fp, lr}
   1d2fc:	mov	fp, sp
   1d300:	ldm	r0, {r3, ip}
   1d304:	mov	lr, #0
   1d308:	mov	r1, #0
   1d30c:	cmp	r3, ip
   1d310:	bcs	1d354 <__assert_fail@plt+0xafe8>
   1d314:	mov	r1, #0
   1d318:	mov	lr, #0
   1d31c:	b	1d32c <__assert_fail@plt+0xafc0>
   1d320:	add	r3, r3, #8
   1d324:	cmp	r3, ip
   1d328:	bcs	1d354 <__assert_fail@plt+0xafe8>
   1d32c:	ldr	r2, [r3]
   1d330:	cmp	r2, #0
   1d334:	beq	1d320 <__assert_fail@plt+0xafb4>
   1d338:	mov	r2, r3
   1d33c:	ldr	r2, [r2, #4]
   1d340:	add	r1, r1, #1
   1d344:	cmp	r2, #0
   1d348:	bne	1d33c <__assert_fail@plt+0xafd0>
   1d34c:	add	lr, lr, #1
   1d350:	b	1d320 <__assert_fail@plt+0xafb4>
   1d354:	ldr	r2, [r0, #12]
   1d358:	cmp	lr, r2
   1d35c:	bne	1d374 <__assert_fail@plt+0xb008>
   1d360:	ldr	r2, [r0, #16]
   1d364:	mov	r0, #1
   1d368:	cmp	r1, r2
   1d36c:	movne	r0, #0
   1d370:	pop	{fp, pc}
   1d374:	mov	r0, #0
   1d378:	pop	{fp, pc}
   1d37c:	nop	{0}
   1d380:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1d384:	add	fp, sp, #24
   1d388:	sub	sp, sp, #8
   1d38c:	ldr	r6, [r0]
   1d390:	ldmib	r0, {r2, r7, r8}
   1d394:	ldr	r3, [r0, #16]
   1d398:	mov	r4, r1
   1d39c:	mov	r5, #0
   1d3a0:	cmp	r6, r2
   1d3a4:	bcs	1d3ec <__assert_fail@plt+0xb080>
   1d3a8:	mov	r5, #0
   1d3ac:	b	1d3bc <__assert_fail@plt+0xb050>
   1d3b0:	add	r6, r6, #8
   1d3b4:	cmp	r6, r2
   1d3b8:	bcs	1d3ec <__assert_fail@plt+0xb080>
   1d3bc:	ldr	r0, [r6]
   1d3c0:	cmp	r0, #0
   1d3c4:	beq	1d3b0 <__assert_fail@plt+0xb044>
   1d3c8:	mov	r0, #0
   1d3cc:	mov	r1, r6
   1d3d0:	ldr	r1, [r1, #4]
   1d3d4:	add	r0, r0, #1
   1d3d8:	cmp	r1, #0
   1d3dc:	bne	1d3d0 <__assert_fail@plt+0xb064>
   1d3e0:	cmp	r0, r5
   1d3e4:	movhi	r5, r0
   1d3e8:	b	1d3b0 <__assert_fail@plt+0xb044>
   1d3ec:	movw	r2, #29193	; 0x7209
   1d3f0:	mov	r0, r4
   1d3f4:	mov	r1, #1
   1d3f8:	movt	r2, #2
   1d3fc:	bl	121f8 <__fprintf_chk@plt>
   1d400:	movw	r2, #29217	; 0x7221
   1d404:	mov	r0, r4
   1d408:	mov	r1, #1
   1d40c:	mov	r3, r7
   1d410:	movt	r2, #2
   1d414:	bl	121f8 <__fprintf_chk@plt>
   1d418:	vmov	s0, r8
   1d41c:	vldr	d16, [pc, #76]	; 1d470 <__assert_fail@plt+0xb104>
   1d420:	movw	r2, #29241	; 0x7239
   1d424:	mov	r0, r4
   1d428:	mov	r1, #1
   1d42c:	mov	r3, r8
   1d430:	movt	r2, #2
   1d434:	vcvt.f64.u32	d17, s0
   1d438:	vmov	s0, r7
   1d43c:	vcvt.f64.u32	d18, s0
   1d440:	vmul.f64	d16, d17, d16
   1d444:	vdiv.f64	d16, d16, d18
   1d448:	vstr	d16, [sp]
   1d44c:	bl	121f8 <__fprintf_chk@plt>
   1d450:	movw	r2, #29274	; 0x725a
   1d454:	mov	r0, r4
   1d458:	mov	r1, #1
   1d45c:	mov	r3, r5
   1d460:	movt	r2, #2
   1d464:	sub	sp, fp, #24
   1d468:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   1d46c:	b	121f8 <__fprintf_chk@plt>
   1d470:	andeq	r0, r0, r0
   1d474:	subsmi	r0, r9, r0
   1d478:	push	{r4, r5, r6, r7, fp, lr}
   1d47c:	add	fp, sp, #16
   1d480:	mov	r4, r1
   1d484:	ldr	r1, [r0, #8]
   1d488:	ldr	r2, [r0, #24]
   1d48c:	mov	r5, r0
   1d490:	mov	r0, r4
   1d494:	blx	r2
   1d498:	ldr	r1, [r5, #8]
   1d49c:	cmp	r0, r1
   1d4a0:	bcs	1d508 <__assert_fail@plt+0xb19c>
   1d4a4:	ldr	r7, [r5]
   1d4a8:	mov	r6, #0
   1d4ac:	ldr	r1, [r7, r0, lsl #3]!
   1d4b0:	cmp	r1, #0
   1d4b4:	cmpne	r7, #0
   1d4b8:	bne	1d4e8 <__assert_fail@plt+0xb17c>
   1d4bc:	mov	r0, r6
   1d4c0:	pop	{r4, r5, r6, r7, fp, pc}
   1d4c4:	ldr	r2, [r5, #28]
   1d4c8:	mov	r0, r4
   1d4cc:	blx	r2
   1d4d0:	cmp	r0, #0
   1d4d4:	bne	1d4fc <__assert_fail@plt+0xb190>
   1d4d8:	ldr	r7, [r7, #4]
   1d4dc:	cmp	r7, #0
   1d4e0:	beq	1d4bc <__assert_fail@plt+0xb150>
   1d4e4:	ldr	r1, [r7]
   1d4e8:	cmp	r1, r4
   1d4ec:	bne	1d4c4 <__assert_fail@plt+0xb158>
   1d4f0:	mov	r6, r4
   1d4f4:	mov	r0, r6
   1d4f8:	pop	{r4, r5, r6, r7, fp, pc}
   1d4fc:	ldr	r6, [r7]
   1d500:	mov	r0, r6
   1d504:	pop	{r4, r5, r6, r7, fp, pc}
   1d508:	bl	12348 <abort@plt>
   1d50c:	push	{fp, lr}
   1d510:	mov	fp, sp
   1d514:	ldr	r1, [r0, #16]
   1d518:	cmp	r1, #0
   1d51c:	beq	1d53c <__assert_fail@plt+0xb1d0>
   1d520:	ldm	r0, {r1, r2}
   1d524:	cmp	r1, r2
   1d528:	bcs	1d544 <__assert_fail@plt+0xb1d8>
   1d52c:	ldr	r0, [r1], #8
   1d530:	cmp	r0, #0
   1d534:	beq	1d524 <__assert_fail@plt+0xb1b8>
   1d538:	pop	{fp, pc}
   1d53c:	mov	r0, #0
   1d540:	pop	{fp, pc}
   1d544:	bl	12348 <abort@plt>
   1d548:	push	{r4, r5, fp, lr}
   1d54c:	add	fp, sp, #8
   1d550:	mov	r5, r1
   1d554:	ldr	r1, [r0, #8]
   1d558:	ldr	r2, [r0, #24]
   1d55c:	mov	r4, r0
   1d560:	mov	r0, r5
   1d564:	blx	r2
   1d568:	ldr	r1, [r4, #8]
   1d56c:	cmp	r0, r1
   1d570:	bcs	1d5d4 <__assert_fail@plt+0xb268>
   1d574:	ldr	r1, [r4]
   1d578:	add	r2, r1, r0, lsl #3
   1d57c:	ldr	r3, [r2]
   1d580:	ldr	r2, [r2, #4]
   1d584:	cmp	r3, r5
   1d588:	beq	1d598 <__assert_fail@plt+0xb22c>
   1d58c:	cmp	r2, #0
   1d590:	bne	1d57c <__assert_fail@plt+0xb210>
   1d594:	b	1d5a8 <__assert_fail@plt+0xb23c>
   1d598:	cmp	r2, #0
   1d59c:	beq	1d5a8 <__assert_fail@plt+0xb23c>
   1d5a0:	ldr	r0, [r2]
   1d5a4:	pop	{r4, r5, fp, pc}
   1d5a8:	ldr	r2, [r4, #4]
   1d5ac:	add	r0, r1, r0, lsl #3
   1d5b0:	add	r1, r0, #8
   1d5b4:	cmp	r1, r2
   1d5b8:	bcs	1d5cc <__assert_fail@plt+0xb260>
   1d5bc:	ldr	r0, [r1], #8
   1d5c0:	cmp	r0, #0
   1d5c4:	beq	1d5b4 <__assert_fail@plt+0xb248>
   1d5c8:	pop	{r4, r5, fp, pc}
   1d5cc:	mov	r0, #0
   1d5d0:	pop	{r4, r5, fp, pc}
   1d5d4:	bl	12348 <abort@plt>
   1d5d8:	push	{r4, r5, fp, lr}
   1d5dc:	add	fp, sp, #8
   1d5e0:	ldm	r0, {r5, lr}
   1d5e4:	mov	ip, r0
   1d5e8:	mov	r0, #0
   1d5ec:	cmp	r5, lr
   1d5f0:	popcs	{r4, r5, fp, pc}
   1d5f4:	mov	r0, #0
   1d5f8:	b	1d60c <__assert_fail@plt+0xb2a0>
   1d5fc:	ldr	lr, [ip, #4]
   1d600:	add	r5, r5, #8
   1d604:	cmp	r5, lr
   1d608:	bcs	1d644 <__assert_fail@plt+0xb2d8>
   1d60c:	ldr	r3, [r5]
   1d610:	cmp	r3, #0
   1d614:	cmpne	r5, #0
   1d618:	beq	1d600 <__assert_fail@plt+0xb294>
   1d61c:	mov	r3, r5
   1d620:	cmp	r0, r2
   1d624:	bcs	1d644 <__assert_fail@plt+0xb2d8>
   1d628:	ldr	r4, [r3]
   1d62c:	str	r4, [r1, r0, lsl #2]
   1d630:	add	r0, r0, #1
   1d634:	ldr	r3, [r3, #4]
   1d638:	cmp	r3, #0
   1d63c:	bne	1d620 <__assert_fail@plt+0xb2b4>
   1d640:	b	1d5fc <__assert_fail@plt+0xb290>
   1d644:	pop	{r4, r5, fp, pc}
   1d648:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1d64c:	add	fp, sp, #24
   1d650:	mov	r5, r1
   1d654:	ldr	r4, [r0]
   1d658:	ldr	r1, [r0, #4]
   1d65c:	mov	r6, #0
   1d660:	cmp	r4, r1
   1d664:	bcs	1d6d0 <__assert_fail@plt+0xb364>
   1d668:	mov	r9, r2
   1d66c:	mov	r8, r0
   1d670:	mov	r6, #0
   1d674:	b	1d688 <__assert_fail@plt+0xb31c>
   1d678:	ldr	r1, [r8, #4]
   1d67c:	add	r4, r4, #8
   1d680:	cmp	r4, r1
   1d684:	bcs	1d6d0 <__assert_fail@plt+0xb364>
   1d688:	ldr	r0, [r4]
   1d68c:	cmp	r0, #0
   1d690:	cmpne	r4, #0
   1d694:	beq	1d67c <__assert_fail@plt+0xb310>
   1d698:	mov	r1, r9
   1d69c:	blx	r5
   1d6a0:	cmp	r0, #0
   1d6a4:	beq	1d6d0 <__assert_fail@plt+0xb364>
   1d6a8:	mov	r7, r4
   1d6ac:	ldr	r7, [r7, #4]
   1d6b0:	add	r6, r6, #1
   1d6b4:	cmp	r7, #0
   1d6b8:	beq	1d678 <__assert_fail@plt+0xb30c>
   1d6bc:	ldr	r0, [r7]
   1d6c0:	mov	r1, r9
   1d6c4:	blx	r5
   1d6c8:	cmp	r0, #0
   1d6cc:	bne	1d6ac <__assert_fail@plt+0xb340>
   1d6d0:	mov	r0, r6
   1d6d4:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1d6d8:	ldrb	r2, [r0]
   1d6dc:	cmp	r2, #0
   1d6e0:	moveq	r0, #0
   1d6e4:	bxeq	lr
   1d6e8:	add	r3, r0, #1
   1d6ec:	mov	r0, #0
   1d6f0:	rsb	r0, r0, r0, lsl #5
   1d6f4:	uxtab	r0, r0, r2
   1d6f8:	udiv	r2, r0, r1
   1d6fc:	mls	r0, r2, r1, r0
   1d700:	ldrb	r2, [r3], #1
   1d704:	cmp	r2, #0
   1d708:	bne	1d6f0 <__assert_fail@plt+0xb384>
   1d70c:	bx	lr
   1d710:	movw	r1, #29304	; 0x7278
   1d714:	movt	r1, #2
   1d718:	vld1.32	{d16-d17}, [r1]!
   1d71c:	ldr	r1, [r1]
   1d720:	vst1.32	{d16-d17}, [r0]!
   1d724:	str	r1, [r0]
   1d728:	bx	lr
   1d72c:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1d730:	add	fp, sp, #24
   1d734:	movw	r9, #55636	; 0xd954
   1d738:	cmp	r3, #0
   1d73c:	movw	r5, #55616	; 0xd940
   1d740:	mov	r6, r0
   1d744:	mov	r0, #40	; 0x28
   1d748:	mov	r7, r1
   1d74c:	movt	r9, #1
   1d750:	movne	r9, r3
   1d754:	cmp	r2, #0
   1d758:	movt	r5, #1
   1d75c:	movne	r5, r2
   1d760:	bl	23cf8 <__assert_fail@plt+0x1198c>
   1d764:	mov	r8, #0
   1d768:	cmp	r0, #0
   1d76c:	beq	1d928 <__assert_fail@plt+0xb5bc>
   1d770:	mov	r4, r0
   1d774:	movw	r0, #29304	; 0x7278
   1d778:	cmp	r7, #0
   1d77c:	movt	r0, #2
   1d780:	moveq	r7, r0
   1d784:	cmp	r7, r0
   1d788:	str	r7, [r4, #20]
   1d78c:	beq	1d808 <__assert_fail@plt+0xb49c>
   1d790:	vldr	s2, [pc, #408]	; 1d930 <__assert_fail@plt+0xb5c4>
   1d794:	vldr	s0, [r7, #8]
   1d798:	vcmpe.f32	s0, s2
   1d79c:	vmrs	APSR_nzcv, fpscr
   1d7a0:	ble	1d8b4 <__assert_fail@plt+0xb548>
   1d7a4:	vldr	s4, [pc, #392]	; 1d934 <__assert_fail@plt+0xb5c8>
   1d7a8:	vcmpe.f32	s0, s4
   1d7ac:	vmrs	APSR_nzcv, fpscr
   1d7b0:	bpl	1d8b4 <__assert_fail@plt+0xb548>
   1d7b4:	vldr	s4, [pc, #380]	; 1d938 <__assert_fail@plt+0xb5cc>
   1d7b8:	vldr	s6, [r7, #12]
   1d7bc:	vcmpe.f32	s6, s4
   1d7c0:	vmrs	APSR_nzcv, fpscr
   1d7c4:	ble	1d8b4 <__assert_fail@plt+0xb548>
   1d7c8:	vldr	s4, [r7]
   1d7cc:	vcmpe.f32	s4, #0.0
   1d7d0:	vmrs	APSR_nzcv, fpscr
   1d7d4:	blt	1d8b4 <__assert_fail@plt+0xb548>
   1d7d8:	vadd.f32	s2, s4, s2
   1d7dc:	vcmpe.f32	s2, s0
   1d7e0:	vmrs	APSR_nzcv, fpscr
   1d7e4:	bpl	1d8b4 <__assert_fail@plt+0xb548>
   1d7e8:	vldr	s0, [r7, #4]
   1d7ec:	vmov.f32	s4, #112	; 0x3f800000  1.0
   1d7f0:	vcmpe.f32	s0, s4
   1d7f4:	vmrs	APSR_nzcv, fpscr
   1d7f8:	bhi	1d8b4 <__assert_fail@plt+0xb548>
   1d7fc:	vcmpe.f32	s2, s0
   1d800:	vmrs	APSR_nzcv, fpscr
   1d804:	bpl	1d8b4 <__assert_fail@plt+0xb548>
   1d808:	ldrb	r0, [r7, #16]
   1d80c:	cmp	r0, #0
   1d810:	bne	1d83c <__assert_fail@plt+0xb4d0>
   1d814:	vmov	s2, r6
   1d818:	vldr	s0, [r7, #8]
   1d81c:	vldr	s4, [pc, #280]	; 1d93c <__assert_fail@plt+0xb5d0>
   1d820:	vcvt.f32.u32	s2, s2
   1d824:	vdiv.f32	s2, s2, s0
   1d828:	vcvt.u32.f32	s0, s2
   1d82c:	vcmpe.f32	s2, s4
   1d830:	vmrs	APSR_nzcv, fpscr
   1d834:	bge	1d8c4 <__assert_fail@plt+0xb558>
   1d838:	vmov	r6, s0
   1d83c:	cmp	r6, #10
   1d840:	movls	r6, #10
   1d844:	orr	r0, r6, #1
   1d848:	cmn	r0, #1
   1d84c:	beq	1d8c4 <__assert_fail@plt+0xb558>
   1d850:	ldr	r6, [fp, #8]
   1d854:	mov	r1, #3
   1d858:	cmp	r0, #10
   1d85c:	bcc	1d894 <__assert_fail@plt+0xb528>
   1d860:	mov	r1, #3
   1d864:	mov	r3, #9
   1d868:	mov	r2, #12
   1d86c:	udiv	r7, r0, r1
   1d870:	mls	r7, r7, r1, r0
   1d874:	cmp	r7, #0
   1d878:	beq	1d894 <__assert_fail@plt+0xb528>
   1d87c:	add	r3, r3, r2
   1d880:	add	r2, r2, #8
   1d884:	add	r1, r1, #2
   1d888:	add	r3, r3, #4
   1d88c:	cmp	r3, r0
   1d890:	bcc	1d86c <__assert_fail@plt+0xb500>
   1d894:	udiv	r2, r0, r1
   1d898:	mls	r1, r2, r1, r0
   1d89c:	cmp	r1, #0
   1d8a0:	bne	1d8bc <__assert_fail@plt+0xb550>
   1d8a4:	add	r0, r0, #2
   1d8a8:	cmn	r0, #1
   1d8ac:	bne	1d854 <__assert_fail@plt+0xb4e8>
   1d8b0:	b	1d8c4 <__assert_fail@plt+0xb558>
   1d8b4:	str	r0, [r4, #20]
   1d8b8:	b	1d8cc <__assert_fail@plt+0xb560>
   1d8bc:	cmp	r0, #536870912	; 0x20000000
   1d8c0:	bcc	1d8dc <__assert_fail@plt+0xb570>
   1d8c4:	mov	r0, #0
   1d8c8:	str	r0, [r4, #8]
   1d8cc:	mov	r0, r4
   1d8d0:	bl	1d148 <__assert_fail@plt+0xaddc>
   1d8d4:	mov	r0, r8
   1d8d8:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1d8dc:	cmp	r0, #0
   1d8e0:	str	r0, [r4, #8]
   1d8e4:	beq	1d8cc <__assert_fail@plt+0xb560>
   1d8e8:	mov	r1, #8
   1d8ec:	bl	23ca4 <__assert_fail@plt+0x11938>
   1d8f0:	cmp	r0, #0
   1d8f4:	str	r0, [r4]
   1d8f8:	beq	1d8cc <__assert_fail@plt+0xb560>
   1d8fc:	mov	r1, #0
   1d900:	str	r5, [r4, #24]
   1d904:	str	r9, [r4, #28]
   1d908:	str	r6, [r4, #32]
   1d90c:	mov	r8, r4
   1d910:	str	r1, [r4, #36]	; 0x24
   1d914:	str	r1, [r4, #12]
   1d918:	str	r1, [r4, #16]
   1d91c:	ldr	r1, [r4, #8]
   1d920:	add	r0, r0, r1, lsl #3
   1d924:	str	r0, [r4, #4]
   1d928:	mov	r0, r8
   1d92c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1d930:	stclcc	12, cr12, [ip, #820]	; 0x334
   1d934:	svccc	0x00666666
   1d938:	svccc	0x008ccccd
   1d93c:	svcmi	0x00800000
   1d940:	ror	r2, r0, #3
   1d944:	udiv	r2, r2, r1
   1d948:	mul	r1, r2, r1
   1d94c:	rsb	r0, r1, r0, ror #3
   1d950:	bx	lr
   1d954:	sub	r0, r0, r1
   1d958:	clz	r0, r0
   1d95c:	lsr	r0, r0, #5
   1d960:	bx	lr
   1d964:	push	{r4, r5, r6, r7, fp, lr}
   1d968:	add	fp, sp, #16
   1d96c:	mov	r4, r0
   1d970:	ldr	r5, [r0]
   1d974:	ldr	r0, [r0, #4]
   1d978:	cmp	r5, r0
   1d97c:	bcs	1da20 <__assert_fail@plt+0xb6b4>
   1d980:	mov	r6, #0
   1d984:	b	1d9a0 <__assert_fail@plt+0xb634>
   1d988:	str	r6, [r5]
   1d98c:	str	r6, [r5, #4]
   1d990:	ldr	r0, [r4, #4]
   1d994:	add	r5, r5, #8
   1d998:	cmp	r5, r0
   1d99c:	bcs	1da20 <__assert_fail@plt+0xb6b4>
   1d9a0:	ldr	r1, [r5]
   1d9a4:	cmp	r1, #0
   1d9a8:	beq	1d994 <__assert_fail@plt+0xb628>
   1d9ac:	ldr	r1, [r4, #32]
   1d9b0:	ldr	r7, [r5, #4]
   1d9b4:	cmp	r1, #0
   1d9b8:	mov	r0, r1
   1d9bc:	movwne	r0, #1
   1d9c0:	cmp	r7, #0
   1d9c4:	bne	1da08 <__assert_fail@plt+0xb69c>
   1d9c8:	cmp	r0, #0
   1d9cc:	beq	1d988 <__assert_fail@plt+0xb61c>
   1d9d0:	ldr	r0, [r5]
   1d9d4:	blx	r1
   1d9d8:	b	1d988 <__assert_fail@plt+0xb61c>
   1d9dc:	str	r6, [r7]
   1d9e0:	cmp	r1, #0
   1d9e4:	ldr	r2, [r7, #4]
   1d9e8:	ldr	r0, [r4, #36]	; 0x24
   1d9ec:	str	r0, [r7, #4]
   1d9f0:	mov	r0, r1
   1d9f4:	str	r7, [r4, #36]	; 0x24
   1d9f8:	movwne	r0, #1
   1d9fc:	cmp	r2, #0
   1da00:	mov	r7, r2
   1da04:	beq	1d9c8 <__assert_fail@plt+0xb65c>
   1da08:	tst	r0, #1
   1da0c:	beq	1d9dc <__assert_fail@plt+0xb670>
   1da10:	ldr	r0, [r7]
   1da14:	blx	r1
   1da18:	ldr	r1, [r4, #32]
   1da1c:	b	1d9dc <__assert_fail@plt+0xb670>
   1da20:	mov	r0, #0
   1da24:	str	r0, [r4, #12]
   1da28:	str	r0, [r4, #16]
   1da2c:	pop	{r4, r5, r6, r7, fp, pc}
   1da30:	push	{r4, r5, r6, sl, fp, lr}
   1da34:	add	fp, sp, #16
   1da38:	mov	r4, r0
   1da3c:	ldr	r0, [r0, #32]
   1da40:	cmp	r0, #0
   1da44:	beq	1dab8 <__assert_fail@plt+0xb74c>
   1da48:	ldr	r0, [r4, #16]
   1da4c:	cmp	r0, #0
   1da50:	beq	1dab8 <__assert_fail@plt+0xb74c>
   1da54:	ldr	r5, [r4]
   1da58:	ldr	r1, [r4, #4]
   1da5c:	cmp	r5, r1
   1da60:	bcc	1da78 <__assert_fail@plt+0xb70c>
   1da64:	b	1dab8 <__assert_fail@plt+0xb74c>
   1da68:	ldr	r1, [r4, #4]
   1da6c:	add	r5, r5, #8
   1da70:	cmp	r5, r1
   1da74:	bcs	1dab8 <__assert_fail@plt+0xb74c>
   1da78:	ldr	r0, [r5]
   1da7c:	cmp	r0, #0
   1da80:	cmpne	r5, #0
   1da84:	beq	1da6c <__assert_fail@plt+0xb700>
   1da88:	ldr	r1, [r4, #32]
   1da8c:	blx	r1
   1da90:	ldr	r6, [r5, #4]
   1da94:	cmp	r6, #0
   1da98:	beq	1da68 <__assert_fail@plt+0xb6fc>
   1da9c:	ldr	r1, [r4, #32]
   1daa0:	ldr	r0, [r6]
   1daa4:	blx	r1
   1daa8:	ldr	r6, [r6, #4]
   1daac:	cmp	r6, #0
   1dab0:	bne	1da9c <__assert_fail@plt+0xb730>
   1dab4:	b	1da68 <__assert_fail@plt+0xb6fc>
   1dab8:	ldr	r5, [r4]
   1dabc:	ldr	r1, [r4, #4]
   1dac0:	cmp	r5, r1
   1dac4:	bcc	1dad8 <__assert_fail@plt+0xb76c>
   1dac8:	b	1db00 <__assert_fail@plt+0xb794>
   1dacc:	add	r5, r5, #8
   1dad0:	cmp	r5, r1
   1dad4:	bcs	1db00 <__assert_fail@plt+0xb794>
   1dad8:	ldr	r0, [r5, #4]
   1dadc:	cmp	r0, #0
   1dae0:	beq	1dacc <__assert_fail@plt+0xb760>
   1dae4:	ldr	r6, [r0, #4]
   1dae8:	bl	1d148 <__assert_fail@plt+0xaddc>
   1daec:	cmp	r6, #0
   1daf0:	mov	r0, r6
   1daf4:	bne	1dae4 <__assert_fail@plt+0xb778>
   1daf8:	ldr	r1, [r4, #4]
   1dafc:	b	1dacc <__assert_fail@plt+0xb760>
   1db00:	ldr	r0, [r4, #36]	; 0x24
   1db04:	cmp	r0, #0
   1db08:	beq	1db20 <__assert_fail@plt+0xb7b4>
   1db0c:	ldr	r5, [r0, #4]
   1db10:	bl	1d148 <__assert_fail@plt+0xaddc>
   1db14:	cmp	r5, #0
   1db18:	mov	r0, r5
   1db1c:	bne	1db0c <__assert_fail@plt+0xb7a0>
   1db20:	ldr	r0, [r4]
   1db24:	bl	1d148 <__assert_fail@plt+0xaddc>
   1db28:	mov	r0, r4
   1db2c:	pop	{r4, r5, r6, sl, fp, lr}
   1db30:	b	1d148 <__assert_fail@plt+0xaddc>
   1db34:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1db38:	add	fp, sp, #28
   1db3c:	sub	sp, sp, #44	; 0x2c
   1db40:	mov	r7, r0
   1db44:	mov	r4, r0
   1db48:	ldr	r0, [r7, #20]!
   1db4c:	ldrb	r2, [r0, #16]
   1db50:	cmp	r2, #0
   1db54:	bne	1db84 <__assert_fail@plt+0xb818>
   1db58:	vmov	s2, r1
   1db5c:	vldr	s0, [r0, #8]
   1db60:	vldr	s4, [pc, #564]	; 1dd9c <__assert_fail@plt+0xba30>
   1db64:	mov	r5, #0
   1db68:	vcvt.f32.u32	s2, s2
   1db6c:	vdiv.f32	s2, s2, s0
   1db70:	vcvt.u32.f32	s0, s2
   1db74:	vcmpe.f32	s2, s4
   1db78:	vmrs	APSR_nzcv, fpscr
   1db7c:	bge	1dd8c <__assert_fail@plt+0xba20>
   1db80:	vmov	r1, s0
   1db84:	cmp	r1, #10
   1db88:	mov	r5, #0
   1db8c:	movls	r1, #10
   1db90:	orr	r6, r1, #1
   1db94:	cmn	r6, #1
   1db98:	beq	1dd8c <__assert_fail@plt+0xba20>
   1db9c:	mov	r0, #3
   1dba0:	cmp	r6, #10
   1dba4:	bcc	1dbdc <__assert_fail@plt+0xb870>
   1dba8:	mov	r0, #3
   1dbac:	mov	r2, #9
   1dbb0:	mov	r1, #12
   1dbb4:	udiv	r3, r6, r0
   1dbb8:	mls	r3, r3, r0, r6
   1dbbc:	cmp	r3, #0
   1dbc0:	beq	1dbdc <__assert_fail@plt+0xb870>
   1dbc4:	add	r2, r2, r1
   1dbc8:	add	r1, r1, #8
   1dbcc:	add	r0, r0, #2
   1dbd0:	add	r2, r2, #4
   1dbd4:	cmp	r2, r6
   1dbd8:	bcc	1dbb4 <__assert_fail@plt+0xb848>
   1dbdc:	udiv	r1, r6, r0
   1dbe0:	mls	r0, r1, r0, r6
   1dbe4:	cmp	r0, #0
   1dbe8:	bne	1dbfc <__assert_fail@plt+0xb890>
   1dbec:	add	r6, r6, #2
   1dbf0:	cmn	r6, #1
   1dbf4:	bne	1db9c <__assert_fail@plt+0xb830>
   1dbf8:	b	1dd8c <__assert_fail@plt+0xba20>
   1dbfc:	sub	r0, r6, #1
   1dc00:	cmn	r0, #-536870910	; 0xe0000002
   1dc04:	bhi	1dd8c <__assert_fail@plt+0xba20>
   1dc08:	ldr	r0, [r4, #8]
   1dc0c:	cmp	r6, r0
   1dc10:	bne	1dc1c <__assert_fail@plt+0xb8b0>
   1dc14:	mov	r5, #1
   1dc18:	b	1dd8c <__assert_fail@plt+0xba20>
   1dc1c:	mov	r0, r6
   1dc20:	mov	r1, #8
   1dc24:	bl	23ca4 <__assert_fail@plt+0x11938>
   1dc28:	cmp	r0, #0
   1dc2c:	str	r0, [sp, #4]
   1dc30:	beq	1dd8c <__assert_fail@plt+0xba20>
   1dc34:	add	r0, r0, r6, lsl #3
   1dc38:	mov	r1, #0
   1dc3c:	add	r5, sp, #4
   1dc40:	mov	sl, r4
   1dc44:	mov	r2, #0
   1dc48:	str	r1, [sp, #20]
   1dc4c:	str	r1, [sp, #16]
   1dc50:	str	r6, [sp, #12]
   1dc54:	mov	r1, r4
   1dc58:	str	r0, [sp, #8]
   1dc5c:	add	r0, r5, #20
   1dc60:	vld1.32	{d16-d17}, [r7]
   1dc64:	vst1.32	{d16-d17}, [r0]
   1dc68:	ldr	r0, [sl, #36]!	; 0x24
   1dc6c:	str	r0, [sp, #40]	; 0x28
   1dc70:	mov	r0, r5
   1dc74:	bl	1dda0 <__assert_fail@plt+0xba34>
   1dc78:	cmp	r0, #0
   1dc7c:	beq	1dca4 <__assert_fail@plt+0xb938>
   1dc80:	ldr	r0, [r4]
   1dc84:	bl	1d148 <__assert_fail@plt+0xaddc>
   1dc88:	mov	r0, #36	; 0x24
   1dc8c:	vld1.32	{d16-d17}, [r5], r0
   1dc90:	vst1.32	{d16-d17}, [r4], r0
   1dc94:	ldr	r0, [r5]
   1dc98:	mov	r5, #1
   1dc9c:	str	r0, [r4]
   1dca0:	b	1dd8c <__assert_fail@plt+0xba20>
   1dca4:	ldr	r0, [sp, #40]	; 0x28
   1dca8:	str	r0, [sl]
   1dcac:	ldr	r0, [sp, #8]
   1dcb0:	ldr	r8, [sp, #4]
   1dcb4:	cmp	r8, r0
   1dcb8:	str	r0, [sp]
   1dcbc:	bcs	1dd68 <__assert_fail@plt+0xb9fc>
   1dcc0:	mov	r9, #0
   1dcc4:	b	1dcdc <__assert_fail@plt+0xb970>
   1dcc8:	str	r9, [r8, #4]
   1dccc:	ldr	r0, [sp]
   1dcd0:	add	r8, r8, #8
   1dcd4:	cmp	r8, r0
   1dcd8:	bcs	1dd68 <__assert_fail@plt+0xb9fc>
   1dcdc:	ldr	r0, [r8]
   1dce0:	cmp	r0, #0
   1dce4:	beq	1dccc <__assert_fail@plt+0xb960>
   1dce8:	ldr	r6, [r8, #4]
   1dcec:	cmp	r6, #0
   1dcf0:	beq	1dcc8 <__assert_fail@plt+0xb95c>
   1dcf4:	ldr	r1, [r4, #8]
   1dcf8:	b	1dd1c <__assert_fail@plt+0xb9b0>
   1dcfc:	add	r0, r3, r0, lsl #3
   1dd00:	add	r0, r0, #4
   1dd04:	ldr	r3, [r0]
   1dd08:	cmp	r2, #0
   1dd0c:	str	r3, [r6, #4]
   1dd10:	str	r6, [r0]
   1dd14:	mov	r6, r2
   1dd18:	beq	1dcc8 <__assert_fail@plt+0xb95c>
   1dd1c:	ldr	r5, [r6]
   1dd20:	ldr	r2, [r4, #24]
   1dd24:	mov	r0, r5
   1dd28:	blx	r2
   1dd2c:	ldr	r1, [r4, #8]
   1dd30:	cmp	r0, r1
   1dd34:	bcs	1dd98 <__assert_fail@plt+0xba2c>
   1dd38:	ldr	r3, [r4]
   1dd3c:	ldr	r2, [r6, #4]
   1dd40:	ldr	r7, [r3, r0, lsl #3]
   1dd44:	cmp	r7, #0
   1dd48:	bne	1dcfc <__assert_fail@plt+0xb990>
   1dd4c:	str	r5, [r3, r0, lsl #3]
   1dd50:	ldr	r0, [r4, #12]
   1dd54:	add	r0, r0, #1
   1dd58:	str	r0, [r4, #12]
   1dd5c:	mov	r0, sl
   1dd60:	str	r9, [r6]
   1dd64:	b	1dd04 <__assert_fail@plt+0xb998>
   1dd68:	add	r1, sp, #4
   1dd6c:	mov	r0, r4
   1dd70:	mov	r2, #0
   1dd74:	mov	r5, #0
   1dd78:	bl	1dda0 <__assert_fail@plt+0xba34>
   1dd7c:	cmp	r0, #0
   1dd80:	beq	1dd98 <__assert_fail@plt+0xba2c>
   1dd84:	ldr	r0, [sp, #4]
   1dd88:	bl	1d148 <__assert_fail@plt+0xaddc>
   1dd8c:	mov	r0, r5
   1dd90:	sub	sp, fp, #28
   1dd94:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1dd98:	bl	12348 <abort@plt>
   1dd9c:	svcmi	0x00800000
   1dda0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1dda4:	add	fp, sp, #28
   1dda8:	sub	sp, sp, #12
   1ddac:	ldr	sl, [r1]
   1ddb0:	str	r1, [sp, #8]
   1ddb4:	ldr	r1, [r1, #4]
   1ddb8:	mov	r7, r0
   1ddbc:	mov	r0, #1
   1ddc0:	str	r2, [sp, #4]
   1ddc4:	cmp	sl, r1
   1ddc8:	bcs	1df24 <__assert_fail@plt+0xbbb8>
   1ddcc:	add	r8, r7, #36	; 0x24
   1ddd0:	mov	r9, #0
   1ddd4:	b	1de10 <__assert_fail@plt+0xbaa4>
   1ddd8:	str	r4, [r6, r5, lsl #3]
   1dddc:	ldr	r0, [r7, #12]
   1dde0:	add	r0, r0, #1
   1dde4:	str	r0, [r7, #12]
   1dde8:	ldr	r1, [sp, #8]
   1ddec:	str	r9, [sl]
   1ddf0:	ldr	r0, [r1, #12]
   1ddf4:	sub	r0, r0, #1
   1ddf8:	str	r0, [r1, #12]
   1ddfc:	ldr	r0, [sp, #8]
   1de00:	add	sl, sl, #8
   1de04:	ldr	r0, [r0, #4]
   1de08:	cmp	sl, r0
   1de0c:	bcs	1df20 <__assert_fail@plt+0xbbb4>
   1de10:	ldr	r4, [sl]
   1de14:	cmp	r4, #0
   1de18:	beq	1ddfc <__assert_fail@plt+0xba90>
   1de1c:	ldr	r5, [sl, #4]
   1de20:	cmp	r5, #0
   1de24:	beq	1dea0 <__assert_fail@plt+0xbb34>
   1de28:	ldr	r1, [r7, #8]
   1de2c:	b	1de60 <__assert_fail@plt+0xbaf4>
   1de30:	str	r4, [r3, r0, lsl #3]
   1de34:	ldr	r0, [r7, #12]
   1de38:	add	r0, r0, #1
   1de3c:	str	r0, [r7, #12]
   1de40:	mov	r0, r8
   1de44:	str	r9, [r5]
   1de48:	ldr	r3, [r0]
   1de4c:	cmp	r2, #0
   1de50:	str	r3, [r5, #4]
   1de54:	str	r5, [r0]
   1de58:	mov	r5, r2
   1de5c:	beq	1de9c <__assert_fail@plt+0xbb30>
   1de60:	ldr	r4, [r5]
   1de64:	ldr	r2, [r7, #24]
   1de68:	mov	r0, r4
   1de6c:	blx	r2
   1de70:	ldr	r1, [r7, #8]
   1de74:	cmp	r0, r1
   1de78:	bcs	1df38 <__assert_fail@plt+0xbbcc>
   1de7c:	ldr	r3, [r7]
   1de80:	ldr	r2, [r5, #4]
   1de84:	ldr	r6, [r3, r0, lsl #3]
   1de88:	cmp	r6, #0
   1de8c:	beq	1de30 <__assert_fail@plt+0xbac4>
   1de90:	add	r0, r3, r0, lsl #3
   1de94:	add	r0, r0, #4
   1de98:	b	1de48 <__assert_fail@plt+0xbadc>
   1de9c:	ldr	r4, [sl]
   1dea0:	ldr	r0, [sp, #4]
   1dea4:	str	r9, [sl, #4]
   1dea8:	cmp	r0, #0
   1deac:	bne	1ddfc <__assert_fail@plt+0xba90>
   1deb0:	ldr	r1, [r7, #8]
   1deb4:	ldr	r2, [r7, #24]
   1deb8:	mov	r0, r4
   1debc:	blx	r2
   1dec0:	mov	r5, r0
   1dec4:	ldr	r0, [r7, #8]
   1dec8:	cmp	r5, r0
   1decc:	bcs	1df38 <__assert_fail@plt+0xbbcc>
   1ded0:	ldr	r6, [r7]
   1ded4:	ldr	r0, [r6, r5, lsl #3]
   1ded8:	cmp	r0, #0
   1dedc:	beq	1ddd8 <__assert_fail@plt+0xba6c>
   1dee0:	ldr	r0, [r8]
   1dee4:	cmp	r0, #0
   1dee8:	beq	1def8 <__assert_fail@plt+0xbb8c>
   1deec:	ldr	r1, [r0, #4]
   1def0:	str	r1, [r8]
   1def4:	b	1df08 <__assert_fail@plt+0xbb9c>
   1def8:	mov	r0, #8
   1defc:	bl	23cf8 <__assert_fail@plt+0x1198c>
   1df00:	cmp	r0, #0
   1df04:	beq	1df2c <__assert_fail@plt+0xbbc0>
   1df08:	add	r1, r6, r5, lsl #3
   1df0c:	str	r4, [r0]
   1df10:	ldr	r2, [r1, #4]
   1df14:	str	r2, [r0, #4]
   1df18:	str	r0, [r1, #4]
   1df1c:	b	1dde8 <__assert_fail@plt+0xba7c>
   1df20:	mov	r0, #1
   1df24:	sub	sp, fp, #28
   1df28:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1df2c:	mov	r0, #0
   1df30:	sub	sp, fp, #28
   1df34:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1df38:	bl	12348 <abort@plt>
   1df3c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1df40:	add	fp, sp, #28
   1df44:	sub	sp, sp, #4
   1df48:	cmp	r1, #0
   1df4c:	beq	1e268 <__assert_fail@plt+0xbefc>
   1df50:	mov	r8, r2
   1df54:	mov	sl, r1
   1df58:	ldr	r1, [r0, #8]
   1df5c:	ldr	r2, [r0, #24]
   1df60:	mov	r4, r0
   1df64:	mov	r0, sl
   1df68:	blx	r2
   1df6c:	mov	r7, r0
   1df70:	ldr	r0, [r4, #8]
   1df74:	cmp	r7, r0
   1df78:	bcs	1e268 <__assert_fail@plt+0xbefc>
   1df7c:	ldr	r5, [r4]
   1df80:	mov	r9, r5
   1df84:	ldr	r1, [r9, r7, lsl #3]!
   1df88:	cmp	r1, #0
   1df8c:	beq	1e018 <__assert_fail@plt+0xbcac>
   1df90:	cmp	r1, sl
   1df94:	beq	1dfc0 <__assert_fail@plt+0xbc54>
   1df98:	ldr	r2, [r4, #28]
   1df9c:	mov	r0, sl
   1dfa0:	blx	r2
   1dfa4:	cmp	r0, #0
   1dfa8:	mov	r6, r9
   1dfac:	beq	1dfd4 <__assert_fail@plt+0xbc68>
   1dfb0:	ldr	r0, [r6]
   1dfb4:	cmp	r0, #0
   1dfb8:	bne	1dfc4 <__assert_fail@plt+0xbc58>
   1dfbc:	b	1e018 <__assert_fail@plt+0xbcac>
   1dfc0:	mov	r0, sl
   1dfc4:	cmp	r8, #0
   1dfc8:	mov	r7, #0
   1dfcc:	strne	r0, [r8]
   1dfd0:	b	1e204 <__assert_fail@plt+0xbe98>
   1dfd4:	add	r6, r5, r7, lsl #3
   1dfd8:	ldr	r0, [r6, #4]!
   1dfdc:	cmp	r0, #0
   1dfe0:	beq	1e018 <__assert_fail@plt+0xbcac>
   1dfe4:	ldr	r1, [r0]
   1dfe8:	cmp	r1, sl
   1dfec:	beq	1e00c <__assert_fail@plt+0xbca0>
   1dff0:	ldr	r2, [r4, #28]
   1dff4:	mov	r0, sl
   1dff8:	blx	r2
   1dffc:	ldr	r6, [r6]
   1e000:	cmp	r0, #0
   1e004:	beq	1dfd8 <__assert_fail@plt+0xbc6c>
   1e008:	b	1dfb0 <__assert_fail@plt+0xbc44>
   1e00c:	mov	r0, sl
   1e010:	cmp	r0, #0
   1e014:	bne	1dfc4 <__assert_fail@plt+0xbc58>
   1e018:	vldr	s0, [r4, #8]
   1e01c:	vldr	s2, [r4, #12]
   1e020:	ldr	r0, [r4, #20]
   1e024:	vcvt.f32.u32	s0, s0
   1e028:	vcvt.f32.u32	s4, s2
   1e02c:	vldr	s2, [r0, #8]
   1e030:	vmul.f32	s6, s2, s0
   1e034:	vcmpe.f32	s6, s4
   1e038:	vmrs	APSR_nzcv, fpscr
   1e03c:	bpl	1e190 <__assert_fail@plt+0xbe24>
   1e040:	movw	r1, #29304	; 0x7278
   1e044:	movt	r1, #2
   1e048:	cmp	r0, r1
   1e04c:	beq	1e0d8 <__assert_fail@plt+0xbd6c>
   1e050:	vldr	s6, [pc, #532]	; 1e26c <__assert_fail@plt+0xbf00>
   1e054:	vcmpe.f32	s2, s6
   1e058:	vmrs	APSR_nzcv, fpscr
   1e05c:	ble	1e0c4 <__assert_fail@plt+0xbd58>
   1e060:	vldr	s8, [pc, #520]	; 1e270 <__assert_fail@plt+0xbf04>
   1e064:	vcmpe.f32	s2, s8
   1e068:	vmrs	APSR_nzcv, fpscr
   1e06c:	bpl	1e0c4 <__assert_fail@plt+0xbd58>
   1e070:	vldr	s8, [pc, #508]	; 1e274 <__assert_fail@plt+0xbf08>
   1e074:	vldr	s10, [r0, #12]
   1e078:	vcmpe.f32	s10, s8
   1e07c:	vmrs	APSR_nzcv, fpscr
   1e080:	ble	1e0c4 <__assert_fail@plt+0xbd58>
   1e084:	vldr	s8, [r0]
   1e088:	vcmpe.f32	s8, #0.0
   1e08c:	vmrs	APSR_nzcv, fpscr
   1e090:	blt	1e0c4 <__assert_fail@plt+0xbd58>
   1e094:	vadd.f32	s6, s8, s6
   1e098:	vcmpe.f32	s6, s2
   1e09c:	vmrs	APSR_nzcv, fpscr
   1e0a0:	bpl	1e0c4 <__assert_fail@plt+0xbd58>
   1e0a4:	vldr	s8, [r0, #4]
   1e0a8:	vmov.f32	s10, #112	; 0x3f800000  1.0
   1e0ac:	vcmpe.f32	s8, s10
   1e0b0:	vmrs	APSR_nzcv, fpscr
   1e0b4:	bhi	1e0c4 <__assert_fail@plt+0xbd58>
   1e0b8:	vcmpe.f32	s6, s8
   1e0bc:	vmrs	APSR_nzcv, fpscr
   1e0c0:	bmi	1e0dc <__assert_fail@plt+0xbd70>
   1e0c4:	vldr	s2, [pc, #428]	; 1e278 <__assert_fail@plt+0xbf0c>
   1e0c8:	movw	r0, #29304	; 0x7278
   1e0cc:	movt	r0, #2
   1e0d0:	str	r0, [r4, #20]
   1e0d4:	b	1e0dc <__assert_fail@plt+0xbd70>
   1e0d8:	mov	r0, r1
   1e0dc:	vmul.f32	s6, s2, s0
   1e0e0:	vcmpe.f32	s6, s4
   1e0e4:	vmrs	APSR_nzcv, fpscr
   1e0e8:	bpl	1e190 <__assert_fail@plt+0xbe24>
   1e0ec:	vldr	s4, [r0, #12]
   1e0f0:	ldrb	r0, [r0, #16]
   1e0f4:	mvn	r7, #0
   1e0f8:	cmp	r0, #0
   1e0fc:	vmul.f32	s0, s4, s0
   1e100:	vldr	s4, [pc, #372]	; 1e27c <__assert_fail@plt+0xbf10>
   1e104:	vmul.f32	s2, s2, s0
   1e108:	vseleq.f32	s0, s2, s0
   1e10c:	vcmpe.f32	s0, s4
   1e110:	vmrs	APSR_nzcv, fpscr
   1e114:	bge	1e204 <__assert_fail@plt+0xbe98>
   1e118:	vcvt.u32.f32	s0, s0
   1e11c:	mov	r0, r4
   1e120:	vmov	r1, s0
   1e124:	bl	1db34 <__assert_fail@plt+0xb7c8>
   1e128:	cmp	r0, #0
   1e12c:	beq	1e204 <__assert_fail@plt+0xbe98>
   1e130:	ldr	r1, [r4, #8]
   1e134:	ldr	r2, [r4, #24]
   1e138:	mov	r0, sl
   1e13c:	blx	r2
   1e140:	mov	r7, r0
   1e144:	ldr	r0, [r4, #8]
   1e148:	cmp	r7, r0
   1e14c:	bcs	1e268 <__assert_fail@plt+0xbefc>
   1e150:	ldr	r5, [r4]
   1e154:	mov	r9, r5
   1e158:	ldr	r1, [r9, r7, lsl #3]!
   1e15c:	cmp	r1, #0
   1e160:	beq	1e190 <__assert_fail@plt+0xbe24>
   1e164:	cmp	r1, sl
   1e168:	mov	r0, sl
   1e16c:	beq	1e188 <__assert_fail@plt+0xbe1c>
   1e170:	ldr	r2, [r4, #28]
   1e174:	mov	r0, sl
   1e178:	blx	r2
   1e17c:	cmp	r0, #0
   1e180:	beq	1e218 <__assert_fail@plt+0xbeac>
   1e184:	ldr	r0, [r9]
   1e188:	cmp	r0, #0
   1e18c:	bne	1e268 <__assert_fail@plt+0xbefc>
   1e190:	ldr	r0, [r9]
   1e194:	cmp	r0, #0
   1e198:	beq	1e1b4 <__assert_fail@plt+0xbe48>
   1e19c:	ldr	r0, [r4, #36]	; 0x24
   1e1a0:	cmp	r0, #0
   1e1a4:	beq	1e1d4 <__assert_fail@plt+0xbe68>
   1e1a8:	ldr	r1, [r0, #4]
   1e1ac:	str	r1, [r4, #36]	; 0x24
   1e1b0:	b	1e1e4 <__assert_fail@plt+0xbe78>
   1e1b4:	str	sl, [r9]
   1e1b8:	ldr	r0, [r4, #12]
   1e1bc:	ldr	r1, [r4, #16]
   1e1c0:	add	r0, r0, #1
   1e1c4:	add	r1, r1, #1
   1e1c8:	str	r0, [r4, #12]
   1e1cc:	str	r1, [r4, #16]
   1e1d0:	b	1e200 <__assert_fail@plt+0xbe94>
   1e1d4:	mov	r0, #8
   1e1d8:	bl	23cf8 <__assert_fail@plt+0x1198c>
   1e1dc:	cmp	r0, #0
   1e1e0:	beq	1e210 <__assert_fail@plt+0xbea4>
   1e1e4:	str	sl, [r0]
   1e1e8:	ldr	r1, [r9, #4]
   1e1ec:	str	r1, [r0, #4]
   1e1f0:	str	r0, [r9, #4]
   1e1f4:	ldr	r0, [r4, #16]
   1e1f8:	add	r0, r0, #1
   1e1fc:	str	r0, [r4, #16]
   1e200:	mov	r7, #1
   1e204:	mov	r0, r7
   1e208:	sub	sp, fp, #28
   1e20c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e210:	mvn	r7, #0
   1e214:	b	1e204 <__assert_fail@plt+0xbe98>
   1e218:	add	r6, r5, r7, lsl #3
   1e21c:	ldr	r0, [r6, #4]!
   1e220:	cmp	r0, #0
   1e224:	beq	1e190 <__assert_fail@plt+0xbe24>
   1e228:	ldr	r1, [r0]
   1e22c:	cmp	r1, sl
   1e230:	beq	1e25c <__assert_fail@plt+0xbef0>
   1e234:	ldr	r2, [r4, #28]
   1e238:	mov	r0, sl
   1e23c:	blx	r2
   1e240:	ldr	r6, [r6]
   1e244:	cmp	r0, #0
   1e248:	beq	1e21c <__assert_fail@plt+0xbeb0>
   1e24c:	ldr	r0, [r6]
   1e250:	cmp	r0, #0
   1e254:	beq	1e190 <__assert_fail@plt+0xbe24>
   1e258:	b	1e268 <__assert_fail@plt+0xbefc>
   1e25c:	mov	r0, sl
   1e260:	cmp	r0, #0
   1e264:	beq	1e190 <__assert_fail@plt+0xbe24>
   1e268:	bl	12348 <abort@plt>
   1e26c:	stclcc	12, cr12, [ip, #820]	; 0x334
   1e270:	svccc	0x00666666
   1e274:	svccc	0x008ccccd
   1e278:	svccc	0x004ccccd
   1e27c:	svcmi	0x00800000
   1e280:	push	{r4, sl, fp, lr}
   1e284:	add	fp, sp, #8
   1e288:	sub	sp, sp, #8
   1e28c:	add	r2, sp, #4
   1e290:	mov	r4, r1
   1e294:	bl	1df3c <__assert_fail@plt+0xbbd0>
   1e298:	cmn	r0, #1
   1e29c:	beq	1e2b0 <__assert_fail@plt+0xbf44>
   1e2a0:	ldr	r1, [sp, #4]
   1e2a4:	cmp	r0, #0
   1e2a8:	moveq	r4, r1
   1e2ac:	b	1e2b4 <__assert_fail@plt+0xbf48>
   1e2b0:	mov	r4, #0
   1e2b4:	mov	r0, r4
   1e2b8:	sub	sp, fp, #8
   1e2bc:	pop	{r4, sl, fp, pc}
   1e2c0:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1e2c4:	add	fp, sp, #24
   1e2c8:	mov	r9, r1
   1e2cc:	ldr	r1, [r0, #8]
   1e2d0:	ldr	r2, [r0, #24]
   1e2d4:	mov	r5, r0
   1e2d8:	mov	r0, r9
   1e2dc:	blx	r2
   1e2e0:	mov	r7, r0
   1e2e4:	ldr	r0, [r5, #8]
   1e2e8:	cmp	r7, r0
   1e2ec:	bcs	1e550 <__assert_fail@plt+0xc1e4>
   1e2f0:	ldr	r6, [r5]
   1e2f4:	mov	r8, #0
   1e2f8:	mov	r4, r6
   1e2fc:	ldr	r1, [r4, r7, lsl #3]!
   1e300:	cmp	r1, #0
   1e304:	beq	1e3b8 <__assert_fail@plt+0xc04c>
   1e308:	cmp	r1, r9
   1e30c:	beq	1e328 <__assert_fail@plt+0xbfbc>
   1e310:	ldr	r2, [r5, #28]
   1e314:	mov	r0, r9
   1e318:	blx	r2
   1e31c:	cmp	r0, #0
   1e320:	beq	1e360 <__assert_fail@plt+0xbff4>
   1e324:	ldr	r9, [r4]
   1e328:	add	r0, r6, r7, lsl #3
   1e32c:	ldr	r0, [r0, #4]
   1e330:	cmp	r0, #0
   1e334:	beq	1e3a8 <__assert_fail@plt+0xc03c>
   1e338:	ldm	r0, {r1, r2}
   1e33c:	stm	r4, {r1, r2}
   1e340:	mov	r1, #0
   1e344:	str	r1, [r0]
   1e348:	ldr	r1, [r5, #36]	; 0x24
   1e34c:	str	r1, [r0, #4]
   1e350:	str	r0, [r5, #36]	; 0x24
   1e354:	cmp	r9, #0
   1e358:	bne	1e3f0 <__assert_fail@plt+0xc084>
   1e35c:	b	1e3b8 <__assert_fail@plt+0xc04c>
   1e360:	add	r7, r6, r7, lsl #3
   1e364:	ldr	r0, [r7, #4]!
   1e368:	cmp	r0, #0
   1e36c:	beq	1e3b8 <__assert_fail@plt+0xc04c>
   1e370:	ldr	r1, [r0]
   1e374:	cmp	r1, r9
   1e378:	beq	1e3c0 <__assert_fail@plt+0xc054>
   1e37c:	ldr	r2, [r5, #28]
   1e380:	mov	r0, r9
   1e384:	blx	r2
   1e388:	ldr	r1, [r7]
   1e38c:	cmp	r0, #0
   1e390:	bne	1e3c8 <__assert_fail@plt+0xc05c>
   1e394:	ldr	r0, [r1, #4]!
   1e398:	mov	r7, r1
   1e39c:	cmp	r0, #0
   1e3a0:	bne	1e370 <__assert_fail@plt+0xc004>
   1e3a4:	b	1e3b8 <__assert_fail@plt+0xc04c>
   1e3a8:	mov	r0, #0
   1e3ac:	str	r0, [r4]
   1e3b0:	cmp	r9, #0
   1e3b4:	bne	1e3f0 <__assert_fail@plt+0xc084>
   1e3b8:	mov	r0, r8
   1e3bc:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1e3c0:	mov	r1, r0
   1e3c4:	b	1e3cc <__assert_fail@plt+0xc060>
   1e3c8:	ldr	r9, [r1]
   1e3cc:	ldr	r0, [r1, #4]
   1e3d0:	str	r0, [r7]
   1e3d4:	mov	r0, #0
   1e3d8:	str	r0, [r1]
   1e3dc:	ldr	r0, [r5, #36]	; 0x24
   1e3e0:	str	r0, [r1, #4]
   1e3e4:	str	r1, [r5, #36]	; 0x24
   1e3e8:	cmp	r9, #0
   1e3ec:	beq	1e3b8 <__assert_fail@plt+0xc04c>
   1e3f0:	ldr	r0, [r5, #16]
   1e3f4:	sub	r0, r0, #1
   1e3f8:	str	r0, [r5, #16]
   1e3fc:	ldr	r0, [r4]
   1e400:	cmp	r0, #0
   1e404:	bne	1e544 <__assert_fail@plt+0xc1d8>
   1e408:	ldr	r0, [r5, #12]
   1e40c:	vldr	s0, [r5, #8]
   1e410:	sub	r1, r0, #1
   1e414:	str	r1, [r5, #12]
   1e418:	vmov	s2, r1
   1e41c:	ldr	r0, [r5, #20]
   1e420:	vcvt.f32.u32	s0, s0
   1e424:	vcvt.f32.u32	s2, s2
   1e428:	vldr	s4, [r0]
   1e42c:	vmul.f32	s6, s4, s0
   1e430:	vcmpe.f32	s6, s2
   1e434:	vmrs	APSR_nzcv, fpscr
   1e438:	ble	1e544 <__assert_fail@plt+0xc1d8>
   1e43c:	movw	r1, #29304	; 0x7278
   1e440:	movt	r1, #2
   1e444:	cmp	r0, r1
   1e448:	beq	1e4d4 <__assert_fail@plt+0xc168>
   1e44c:	vldr	s8, [pc, #256]	; 1e554 <__assert_fail@plt+0xc1e8>
   1e450:	vldr	s6, [r0, #8]
   1e454:	vcmpe.f32	s6, s8
   1e458:	vmrs	APSR_nzcv, fpscr
   1e45c:	ble	1e4c0 <__assert_fail@plt+0xc154>
   1e460:	vldr	s10, [pc, #240]	; 1e558 <__assert_fail@plt+0xc1ec>
   1e464:	vcmpe.f32	s6, s10
   1e468:	vmrs	APSR_nzcv, fpscr
   1e46c:	bpl	1e4c0 <__assert_fail@plt+0xc154>
   1e470:	vcmpe.f32	s4, #0.0
   1e474:	vmrs	APSR_nzcv, fpscr
   1e478:	blt	1e4c0 <__assert_fail@plt+0xc154>
   1e47c:	vldr	s10, [r0, #12]
   1e480:	vldr	s12, [pc, #212]	; 1e55c <__assert_fail@plt+0xc1f0>
   1e484:	vcmpe.f32	s10, s12
   1e488:	vmrs	APSR_nzcv, fpscr
   1e48c:	ble	1e4c0 <__assert_fail@plt+0xc154>
   1e490:	vadd.f32	s8, s4, s8
   1e494:	vcmpe.f32	s8, s6
   1e498:	vmrs	APSR_nzcv, fpscr
   1e49c:	bpl	1e4c0 <__assert_fail@plt+0xc154>
   1e4a0:	vldr	s6, [r0, #4]
   1e4a4:	vmov.f32	s10, #112	; 0x3f800000  1.0
   1e4a8:	vcmpe.f32	s6, s10
   1e4ac:	vmrs	APSR_nzcv, fpscr
   1e4b0:	bhi	1e4c0 <__assert_fail@plt+0xc154>
   1e4b4:	vcmpe.f32	s8, s6
   1e4b8:	vmrs	APSR_nzcv, fpscr
   1e4bc:	bmi	1e4d8 <__assert_fail@plt+0xc16c>
   1e4c0:	vldr	s4, [pc, #152]	; 1e560 <__assert_fail@plt+0xc1f4>
   1e4c4:	movw	r0, #29304	; 0x7278
   1e4c8:	movt	r0, #2
   1e4cc:	str	r0, [r5, #20]
   1e4d0:	b	1e4d8 <__assert_fail@plt+0xc16c>
   1e4d4:	mov	r0, r1
   1e4d8:	vmul.f32	s4, s4, s0
   1e4dc:	vcmpe.f32	s4, s2
   1e4e0:	vmrs	APSR_nzcv, fpscr
   1e4e4:	ble	1e544 <__assert_fail@plt+0xc1d8>
   1e4e8:	vldr	s2, [r0, #4]
   1e4ec:	ldrb	r1, [r0, #16]
   1e4f0:	cmp	r1, #0
   1e4f4:	vmul.f32	s0, s2, s0
   1e4f8:	bne	1e504 <__assert_fail@plt+0xc198>
   1e4fc:	vldr	s2, [r0, #8]
   1e500:	vmul.f32	s0, s0, s2
   1e504:	vcvt.u32.f32	s0, s0
   1e508:	mov	r0, r5
   1e50c:	vmov	r1, s0
   1e510:	bl	1db34 <__assert_fail@plt+0xb7c8>
   1e514:	cmp	r0, #0
   1e518:	bne	1e544 <__assert_fail@plt+0xc1d8>
   1e51c:	ldr	r0, [r5, #36]	; 0x24
   1e520:	cmp	r0, #0
   1e524:	beq	1e53c <__assert_fail@plt+0xc1d0>
   1e528:	ldr	r4, [r0, #4]
   1e52c:	bl	1d148 <__assert_fail@plt+0xaddc>
   1e530:	cmp	r4, #0
   1e534:	mov	r0, r4
   1e538:	bne	1e528 <__assert_fail@plt+0xc1bc>
   1e53c:	mov	r0, #0
   1e540:	str	r0, [r5, #36]	; 0x24
   1e544:	mov	r8, r9
   1e548:	mov	r0, r8
   1e54c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1e550:	bl	12348 <abort@plt>
   1e554:	stclcc	12, cr12, [ip, #820]	; 0x334
   1e558:	svccc	0x00666666
   1e55c:	svccc	0x008ccccd
   1e560:	andeq	r0, r0, r0
   1e564:	b	1e2c0 <__assert_fail@plt+0xbf54>
   1e568:	push	{r4, r5, r6, sl, fp, lr}
   1e56c:	add	fp, sp, #16
   1e570:	mov	r5, r0
   1e574:	mov	r0, #16
   1e578:	mov	r4, r1
   1e57c:	bl	22720 <__assert_fail@plt+0x103b4>
   1e580:	cmp	r4, #0
   1e584:	mov	r6, r0
   1e588:	mov	r1, #4
   1e58c:	movweq	r4, #1
   1e590:	mov	r0, r4
   1e594:	bl	227f0 <__assert_fail@plt+0x10484>
   1e598:	movw	r2, #58820	; 0xe5c4
   1e59c:	mov	r1, #0
   1e5a0:	cmp	r5, #0
   1e5a4:	stm	r6, {r0, r4}
   1e5a8:	movt	r2, #1
   1e5ac:	str	r1, [r0]
   1e5b0:	mov	r0, r6
   1e5b4:	movne	r2, r5
   1e5b8:	str	r1, [r6, #8]
   1e5bc:	str	r2, [r6, #12]
   1e5c0:	pop	{r4, r5, r6, sl, fp, pc}
   1e5c4:	mov	r0, #0
   1e5c8:	bx	lr
   1e5cc:	push	{r4, sl, fp, lr}
   1e5d0:	add	fp, sp, #8
   1e5d4:	mov	r4, r0
   1e5d8:	ldr	r0, [r0]
   1e5dc:	bl	1d148 <__assert_fail@plt+0xaddc>
   1e5e0:	mov	r0, r4
   1e5e4:	pop	{r4, sl, fp, lr}
   1e5e8:	b	1d148 <__assert_fail@plt+0xaddc>
   1e5ec:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1e5f0:	add	fp, sp, #24
   1e5f4:	mov	r6, r1
   1e5f8:	mov	r1, r0
   1e5fc:	mov	r4, r0
   1e600:	ldr	r0, [r1, #4]!
   1e604:	ldr	r2, [r1, #4]
   1e608:	sub	r0, r0, #1
   1e60c:	cmp	r0, r2
   1e610:	bls	1e61c <__assert_fail@plt+0xc2b0>
   1e614:	ldr	r0, [r4]
   1e618:	b	1e630 <__assert_fail@plt+0xc2c4>
   1e61c:	ldr	r0, [r4]
   1e620:	mov	r2, #4
   1e624:	bl	228cc <__assert_fail@plt+0x10560>
   1e628:	str	r0, [r4]
   1e62c:	ldr	r2, [r4, #8]
   1e630:	add	r5, r2, #1
   1e634:	mov	r8, #1
   1e638:	cmp	r2, #0
   1e63c:	str	r5, [r4, #8]
   1e640:	str	r6, [r0, r5, lsl #2]
   1e644:	ldr	r6, [r4]
   1e648:	ldr	r9, [r6, r5, lsl #2]
   1e64c:	beq	1e688 <__assert_fail@plt+0xc31c>
   1e650:	ldr	r4, [r4, #12]
   1e654:	lsr	r7, r5, #1
   1e658:	mov	r1, r9
   1e65c:	ldr	r0, [r6, r7, lsl #2]
   1e660:	blx	r4
   1e664:	cmp	r0, #0
   1e668:	bgt	1e684 <__assert_fail@plt+0xc318>
   1e66c:	ldr	r0, [r6, r7, lsl #2]
   1e670:	cmp	r7, #1
   1e674:	str	r0, [r6, r5, lsl #2]
   1e678:	mov	r5, r7
   1e67c:	bne	1e654 <__assert_fail@plt+0xc2e8>
   1e680:	b	1e688 <__assert_fail@plt+0xc31c>
   1e684:	mov	r8, r5
   1e688:	mov	r0, #0
   1e68c:	str	r9, [r6, r8, lsl #2]
   1e690:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1e694:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e698:	add	fp, sp, #28
   1e69c:	sub	sp, sp, #12
   1e6a0:	ldr	r1, [r0, #8]
   1e6a4:	cmp	r1, #0
   1e6a8:	beq	1e748 <__assert_fail@plt+0xc3dc>
   1e6ac:	ldr	r2, [r0]
   1e6b0:	sub	r9, r1, #1
   1e6b4:	ldr	r3, [r2, #4]
   1e6b8:	str	r9, [r0, #8]
   1e6bc:	ldr	r1, [r2, r1, lsl #2]
   1e6c0:	str	r3, [sp, #4]
   1e6c4:	str	r1, [r2, #4]
   1e6c8:	mov	r1, #0
   1e6cc:	ldr	r6, [r0]
   1e6d0:	cmp	r1, r9, lsr #1
   1e6d4:	ldr	r7, [r6, #4]
   1e6d8:	beq	1e754 <__assert_fail@plt+0xc3e8>
   1e6dc:	ldr	sl, [r0, #12]
   1e6e0:	lsr	r5, r9, #1
   1e6e4:	mov	r8, #1
   1e6e8:	str	r7, [sp, #8]
   1e6ec:	cmp	r9, r8, lsl #1
   1e6f0:	lsl	r4, r8, #1
   1e6f4:	bls	1e71c <__assert_fail@plt+0xc3b0>
   1e6f8:	mov	r7, r9
   1e6fc:	orr	r9, r4, #1
   1e700:	ldr	r0, [r6, r4, lsl #2]
   1e704:	ldr	r1, [r6, r9, lsl #2]
   1e708:	blx	sl
   1e70c:	cmp	r0, #0
   1e710:	movmi	r4, r9
   1e714:	mov	r9, r7
   1e718:	ldr	r7, [sp, #8]
   1e71c:	ldr	r0, [r6, r4, lsl #2]
   1e720:	mov	r1, r7
   1e724:	blx	sl
   1e728:	cmp	r0, #1
   1e72c:	blt	1e75c <__assert_fail@plt+0xc3f0>
   1e730:	ldr	r0, [r6, r4, lsl #2]
   1e734:	cmp	r4, r5
   1e738:	str	r0, [r6, r8, lsl #2]
   1e73c:	mov	r8, r4
   1e740:	bls	1e6ec <__assert_fail@plt+0xc380>
   1e744:	b	1e760 <__assert_fail@plt+0xc3f4>
   1e748:	mov	r0, #0
   1e74c:	sub	sp, fp, #28
   1e750:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e754:	mov	r4, #1
   1e758:	b	1e760 <__assert_fail@plt+0xc3f4>
   1e75c:	mov	r4, r8
   1e760:	ldr	r0, [sp, #4]
   1e764:	str	r7, [r6, r4, lsl #2]
   1e768:	sub	sp, fp, #28
   1e76c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e770:	movw	ip, #26215	; 0x6667
   1e774:	mov	r2, #0
   1e778:	cmp	r0, #0
   1e77c:	movt	ip, #26214	; 0x6666
   1e780:	strb	r2, [r1, #11]
   1e784:	add	r1, r1, #10
   1e788:	bmi	1e7c4 <__assert_fail@plt+0xc458>
   1e78c:	smmul	r3, r0, ip
   1e790:	asr	r2, r3, #2
   1e794:	add	r2, r2, r3, lsr #31
   1e798:	add	r3, r2, r2, lsl #2
   1e79c:	sub	r3, r0, r3, lsl #1
   1e7a0:	add	r0, r0, #9
   1e7a4:	cmp	r0, #18
   1e7a8:	mov	r0, r2
   1e7ac:	add	r3, r3, #48	; 0x30
   1e7b0:	strb	r3, [r1], #-1
   1e7b4:	bhi	1e78c <__assert_fail@plt+0xc420>
   1e7b8:	add	r1, r1, #1
   1e7bc:	mov	r0, r1
   1e7c0:	bx	lr
   1e7c4:	smmul	r3, r0, ip
   1e7c8:	asr	r2, r3, #2
   1e7cc:	add	r2, r2, r3, lsr #31
   1e7d0:	add	r3, r2, r2, lsl #2
   1e7d4:	rsb	r3, r0, r3, lsl #1
   1e7d8:	add	r0, r0, #9
   1e7dc:	cmp	r0, #18
   1e7e0:	mov	r0, r2
   1e7e4:	add	r3, r3, #48	; 0x30
   1e7e8:	strb	r3, [r1], #-1
   1e7ec:	bhi	1e7c4 <__assert_fail@plt+0xc458>
   1e7f0:	mov	r0, #45	; 0x2d
   1e7f4:	strb	r0, [r1]
   1e7f8:	mov	r0, r1
   1e7fc:	bx	lr
   1e800:	movw	ip, #52429	; 0xcccd
   1e804:	mov	r2, #0
   1e808:	movt	ip, #52428	; 0xcccc
   1e80c:	strb	r2, [r1, #10]
   1e810:	add	r1, r1, #9
   1e814:	umull	r3, r2, r0, ip
   1e818:	cmp	r0, #9
   1e81c:	lsr	r2, r2, #3
   1e820:	add	r3, r2, r2, lsl #2
   1e824:	sub	r3, r0, r3, lsl #1
   1e828:	mov	r0, r2
   1e82c:	orr	r3, r3, #48	; 0x30
   1e830:	strb	r3, [r1], #-1
   1e834:	bhi	1e814 <__assert_fail@plt+0xc4a8>
   1e838:	add	r0, r1, #1
   1e83c:	bx	lr
   1e840:	push	{r4, r5, r6, sl, fp, lr}
   1e844:	add	fp, sp, #16
   1e848:	mov	r5, r0
   1e84c:	mov	r0, #0
   1e850:	mov	r4, r1
   1e854:	add	r6, r2, #19
   1e858:	strb	r0, [r2, #20]
   1e85c:	mov	r0, r5
   1e860:	mov	r1, r4
   1e864:	mov	r2, #10
   1e868:	mov	r3, #0
   1e86c:	bl	24f68 <_obstack_memory_used@@Base+0x480>
   1e870:	add	r2, r0, r0, lsl #2
   1e874:	sub	r2, r5, r2, lsl #1
   1e878:	orr	r2, r2, #48	; 0x30
   1e87c:	strb	r2, [r6], #-1
   1e880:	rsbs	r2, r5, #9
   1e884:	mov	r5, r0
   1e888:	rscs	r2, r4, #0
   1e88c:	mov	r4, r1
   1e890:	bcc	1e85c <__assert_fail@plt+0xc4f0>
   1e894:	add	r0, r6, #1
   1e898:	pop	{r4, r5, r6, sl, fp, pc}
   1e89c:	push	{r4, r5, fp, lr}
   1e8a0:	add	fp, sp, #8
   1e8a4:	mov	r4, r1
   1e8a8:	mov	r5, r0
   1e8ac:	bl	12174 <strlen@plt>
   1e8b0:	mov	r1, r0
   1e8b4:	mov	r0, r5
   1e8b8:	mov	r2, r4
   1e8bc:	pop	{r4, r5, fp, lr}
   1e8c0:	b	1e8c4 <__assert_fail@plt+0xc558>
   1e8c4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e8c8:	add	fp, sp, #28
   1e8cc:	sub	sp, sp, #20
   1e8d0:	mov	r5, r2
   1e8d4:	mov	r6, r1
   1e8d8:	mov	r4, r0
   1e8dc:	add	r7, r0, r1
   1e8e0:	bl	1206c <__ctype_get_mb_cur_max@plt>
   1e8e4:	cmp	r0, #1
   1e8e8:	bls	1eb90 <__assert_fail@plt+0xc824>
   1e8ec:	cmp	r6, #1
   1e8f0:	blt	1ebe8 <__assert_fail@plt+0xc87c>
   1e8f4:	and	r2, r5, #1
   1e8f8:	and	sl, r5, #2
   1e8fc:	mov	r3, #0
   1e900:	add	r8, sp, #4
   1e904:	add	r9, sp, #8
   1e908:	mov	r5, #0
   1e90c:	ldrb	r0, [r4]
   1e910:	sub	r0, r0, #32
   1e914:	cmp	r0, #94	; 0x5e
   1e918:	bhi	1eab4 <__assert_fail@plt+0xc748>
   1e91c:	add	r1, pc, #0
   1e920:	ldr	pc, [r1, r0, lsl #2]
   1e924:	andeq	lr, r1, r0, lsr #21
   1e928:	andeq	lr, r1, r0, lsr #21
   1e92c:	andeq	lr, r1, r0, lsr #21
   1e930:	andeq	lr, r1, r0, lsr #21
   1e934:			; <UNDEFINED> instruction: 0x0001eab4
   1e938:	andeq	lr, r1, r0, lsr #21
   1e93c:	andeq	lr, r1, r0, lsr #21
   1e940:	andeq	lr, r1, r0, lsr #21
   1e944:	andeq	lr, r1, r0, lsr #21
   1e948:	andeq	lr, r1, r0, lsr #21
   1e94c:	andeq	lr, r1, r0, lsr #21
   1e950:	andeq	lr, r1, r0, lsr #21
   1e954:	andeq	lr, r1, r0, lsr #21
   1e958:	andeq	lr, r1, r0, lsr #21
   1e95c:	andeq	lr, r1, r0, lsr #21
   1e960:	andeq	lr, r1, r0, lsr #21
   1e964:	andeq	lr, r1, r0, lsr #21
   1e968:	andeq	lr, r1, r0, lsr #21
   1e96c:	andeq	lr, r1, r0, lsr #21
   1e970:	andeq	lr, r1, r0, lsr #21
   1e974:	andeq	lr, r1, r0, lsr #21
   1e978:	andeq	lr, r1, r0, lsr #21
   1e97c:	andeq	lr, r1, r0, lsr #21
   1e980:	andeq	lr, r1, r0, lsr #21
   1e984:	andeq	lr, r1, r0, lsr #21
   1e988:	andeq	lr, r1, r0, lsr #21
   1e98c:	andeq	lr, r1, r0, lsr #21
   1e990:	andeq	lr, r1, r0, lsr #21
   1e994:	andeq	lr, r1, r0, lsr #21
   1e998:	andeq	lr, r1, r0, lsr #21
   1e99c:	andeq	lr, r1, r0, lsr #21
   1e9a0:	andeq	lr, r1, r0, lsr #21
   1e9a4:			; <UNDEFINED> instruction: 0x0001eab4
   1e9a8:	andeq	lr, r1, r0, lsr #21
   1e9ac:	andeq	lr, r1, r0, lsr #21
   1e9b0:	andeq	lr, r1, r0, lsr #21
   1e9b4:	andeq	lr, r1, r0, lsr #21
   1e9b8:	andeq	lr, r1, r0, lsr #21
   1e9bc:	andeq	lr, r1, r0, lsr #21
   1e9c0:	andeq	lr, r1, r0, lsr #21
   1e9c4:	andeq	lr, r1, r0, lsr #21
   1e9c8:	andeq	lr, r1, r0, lsr #21
   1e9cc:	andeq	lr, r1, r0, lsr #21
   1e9d0:	andeq	lr, r1, r0, lsr #21
   1e9d4:	andeq	lr, r1, r0, lsr #21
   1e9d8:	andeq	lr, r1, r0, lsr #21
   1e9dc:	andeq	lr, r1, r0, lsr #21
   1e9e0:	andeq	lr, r1, r0, lsr #21
   1e9e4:	andeq	lr, r1, r0, lsr #21
   1e9e8:	andeq	lr, r1, r0, lsr #21
   1e9ec:	andeq	lr, r1, r0, lsr #21
   1e9f0:	andeq	lr, r1, r0, lsr #21
   1e9f4:	andeq	lr, r1, r0, lsr #21
   1e9f8:	andeq	lr, r1, r0, lsr #21
   1e9fc:	andeq	lr, r1, r0, lsr #21
   1ea00:	andeq	lr, r1, r0, lsr #21
   1ea04:	andeq	lr, r1, r0, lsr #21
   1ea08:	andeq	lr, r1, r0, lsr #21
   1ea0c:	andeq	lr, r1, r0, lsr #21
   1ea10:	andeq	lr, r1, r0, lsr #21
   1ea14:	andeq	lr, r1, r0, lsr #21
   1ea18:	andeq	lr, r1, r0, lsr #21
   1ea1c:	andeq	lr, r1, r0, lsr #21
   1ea20:	andeq	lr, r1, r0, lsr #21
   1ea24:			; <UNDEFINED> instruction: 0x0001eab4
   1ea28:	andeq	lr, r1, r0, lsr #21
   1ea2c:	andeq	lr, r1, r0, lsr #21
   1ea30:	andeq	lr, r1, r0, lsr #21
   1ea34:	andeq	lr, r1, r0, lsr #21
   1ea38:	andeq	lr, r1, r0, lsr #21
   1ea3c:	andeq	lr, r1, r0, lsr #21
   1ea40:	andeq	lr, r1, r0, lsr #21
   1ea44:	andeq	lr, r1, r0, lsr #21
   1ea48:	andeq	lr, r1, r0, lsr #21
   1ea4c:	andeq	lr, r1, r0, lsr #21
   1ea50:	andeq	lr, r1, r0, lsr #21
   1ea54:	andeq	lr, r1, r0, lsr #21
   1ea58:	andeq	lr, r1, r0, lsr #21
   1ea5c:	andeq	lr, r1, r0, lsr #21
   1ea60:	andeq	lr, r1, r0, lsr #21
   1ea64:	andeq	lr, r1, r0, lsr #21
   1ea68:	andeq	lr, r1, r0, lsr #21
   1ea6c:	andeq	lr, r1, r0, lsr #21
   1ea70:	andeq	lr, r1, r0, lsr #21
   1ea74:	andeq	lr, r1, r0, lsr #21
   1ea78:	andeq	lr, r1, r0, lsr #21
   1ea7c:	andeq	lr, r1, r0, lsr #21
   1ea80:	andeq	lr, r1, r0, lsr #21
   1ea84:	andeq	lr, r1, r0, lsr #21
   1ea88:	andeq	lr, r1, r0, lsr #21
   1ea8c:	andeq	lr, r1, r0, lsr #21
   1ea90:	andeq	lr, r1, r0, lsr #21
   1ea94:	andeq	lr, r1, r0, lsr #21
   1ea98:	andeq	lr, r1, r0, lsr #21
   1ea9c:	andeq	lr, r1, r0, lsr #21
   1eaa0:	add	r5, r5, #1
   1eaa4:	add	r4, r4, #1
   1eaa8:	cmp	r4, r7
   1eaac:	bcc	1e90c <__assert_fail@plt+0xc5a0>
   1eab0:	b	1ebfc <__assert_fail@plt+0xc890>
   1eab4:	str	r2, [sp]
   1eab8:	str	r3, [sp, #12]
   1eabc:	str	r3, [sp, #8]
   1eac0:	b	1eaec <__assert_fail@plt+0xc780>
   1eac4:	mvn	r1, #-2147483648	; 0x80000000
   1eac8:	sub	r1, r1, r5
   1eacc:	cmp	r0, r1
   1ead0:	bgt	1ebf0 <__assert_fail@plt+0xc884>
   1ead4:	add	r5, r0, r5
   1ead8:	mov	r0, r9
   1eadc:	add	r4, r4, r6
   1eae0:	bl	11f1c <mbsinit@plt>
   1eae4:	cmp	r0, #0
   1eae8:	bne	1eb84 <__assert_fail@plt+0xc818>
   1eaec:	sub	r2, r7, r4
   1eaf0:	mov	r0, r8
   1eaf4:	mov	r1, r4
   1eaf8:	mov	r3, r9
   1eafc:	bl	24514 <__assert_fail@plt+0x121a8>
   1eb00:	cmp	r0, #0
   1eb04:	beq	1eb20 <__assert_fail@plt+0xc7b4>
   1eb08:	mov	r6, r0
   1eb0c:	cmn	r0, #2
   1eb10:	beq	1eb5c <__assert_fail@plt+0xc7f0>
   1eb14:	cmn	r6, #1
   1eb18:	bne	1eb24 <__assert_fail@plt+0xc7b8>
   1eb1c:	b	1eb70 <__assert_fail@plt+0xc804>
   1eb20:	mov	r6, #1
   1eb24:	ldr	r0, [sp, #4]
   1eb28:	bl	11e98 <wcwidth@plt>
   1eb2c:	cmp	r0, #0
   1eb30:	bpl	1eac4 <__assert_fail@plt+0xc758>
   1eb34:	cmp	sl, #0
   1eb38:	bne	1ebf8 <__assert_fail@plt+0xc88c>
   1eb3c:	ldr	r0, [sp, #4]
   1eb40:	bl	11fe8 <iswcntrl@plt>
   1eb44:	cmp	r0, #0
   1eb48:	bne	1ead8 <__assert_fail@plt+0xc76c>
   1eb4c:	cmn	r5, #-2147483647	; 0x80000001
   1eb50:	beq	1ebf0 <__assert_fail@plt+0xc884>
   1eb54:	add	r5, r5, #1
   1eb58:	b	1ead8 <__assert_fail@plt+0xc76c>
   1eb5c:	ldr	r0, [sp]
   1eb60:	mov	r4, r7
   1eb64:	cmp	r0, #0
   1eb68:	beq	1eb80 <__assert_fail@plt+0xc814>
   1eb6c:	b	1ebf8 <__assert_fail@plt+0xc88c>
   1eb70:	ldr	r0, [sp]
   1eb74:	cmp	r0, #0
   1eb78:	bne	1ebf8 <__assert_fail@plt+0xc88c>
   1eb7c:	add	r4, r4, #1
   1eb80:	add	r5, r5, #1
   1eb84:	ldr	r2, [sp]
   1eb88:	mov	r3, #0
   1eb8c:	b	1eaa8 <__assert_fail@plt+0xc73c>
   1eb90:	cmp	r6, #1
   1eb94:	blt	1ebe8 <__assert_fail@plt+0xc87c>
   1eb98:	and	r6, r5, #2
   1eb9c:	bl	12144 <__ctype_b_loc@plt>
   1eba0:	ldr	r0, [r0]
   1eba4:	mov	r5, #0
   1eba8:	b	1ebb4 <__assert_fail@plt+0xc848>
   1ebac:	cmp	r4, r7
   1ebb0:	bcs	1ebfc <__assert_fail@plt+0xc890>
   1ebb4:	ldrb	r1, [r4], #1
   1ebb8:	add	r1, r0, r1, lsl #1
   1ebbc:	ldrh	r1, [r1]
   1ebc0:	tst	r1, #16384	; 0x4000
   1ebc4:	bne	1ebd8 <__assert_fail@plt+0xc86c>
   1ebc8:	cmp	r6, #0
   1ebcc:	bne	1ebf8 <__assert_fail@plt+0xc88c>
   1ebd0:	tst	r1, #2
   1ebd4:	bne	1ebac <__assert_fail@plt+0xc840>
   1ebd8:	cmn	r5, #-2147483647	; 0x80000001
   1ebdc:	beq	1ebf0 <__assert_fail@plt+0xc884>
   1ebe0:	add	r5, r5, #1
   1ebe4:	b	1ebac <__assert_fail@plt+0xc840>
   1ebe8:	mov	r5, #0
   1ebec:	b	1ebfc <__assert_fail@plt+0xc890>
   1ebf0:	mvn	r5, #-2147483648	; 0x80000000
   1ebf4:	b	1ebfc <__assert_fail@plt+0xc890>
   1ebf8:	mvn	r5, #0
   1ebfc:	mov	r0, r5
   1ec00:	sub	sp, fp, #28
   1ec04:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ec08:	push	{r4, r5, fp, lr}
   1ec0c:	add	fp, sp, #8
   1ec10:	sub	sp, sp, #128	; 0x80
   1ec14:	mvn	r4, #0
   1ec18:	cmp	r0, #2
   1ec1c:	bne	1ec6c <__assert_fail@plt+0xc900>
   1ec20:	movw	r0, #29324	; 0x728c
   1ec24:	movt	r0, #2
   1ec28:	bl	120cc <getenv@plt>
   1ec2c:	bl	1ed34 <__assert_fail@plt+0xc9c8>
   1ec30:	mov	r5, r0
   1ec34:	movw	r0, #29340	; 0x729c
   1ec38:	movt	r0, #2
   1ec3c:	bl	120cc <getenv@plt>
   1ec40:	bl	1ed34 <__assert_fail@plt+0xc9c8>
   1ec44:	cmp	r0, #0
   1ec48:	mov	r1, r0
   1ec4c:	mvneq	r1, #0
   1ec50:	cmp	r5, r1
   1ec54:	mov	r4, r1
   1ec58:	movcc	r4, r5
   1ec5c:	cmp	r5, #0
   1ec60:	bne	1ed28 <__assert_fail@plt+0xc9bc>
   1ec64:	mov	r0, #1
   1ec68:	mov	r4, r1
   1ec6c:	cmp	r0, #1
   1ec70:	bne	1eca4 <__assert_fail@plt+0xc938>
   1ec74:	mov	r2, sp
   1ec78:	mov	r0, #0
   1ec7c:	mov	r1, #128	; 0x80
   1ec80:	bl	122f4 <sched_getaffinity@plt>
   1ec84:	cmp	r0, #0
   1ec88:	beq	1ed08 <__assert_fail@plt+0xc99c>
   1ec8c:	mov	r0, #84	; 0x54
   1ec90:	bl	11f94 <sysconf@plt>
   1ec94:	cmp	r0, #0
   1ec98:	mov	r5, r0
   1ec9c:	movle	r5, #1
   1eca0:	b	1ed20 <__assert_fail@plt+0xc9b4>
   1eca4:	mov	r0, #83	; 0x53
   1eca8:	bl	11f94 <sysconf@plt>
   1ecac:	mov	r5, r0
   1ecb0:	sub	r0, r0, #1
   1ecb4:	cmp	r0, #1
   1ecb8:	bhi	1ecf0 <__assert_fail@plt+0xc984>
   1ecbc:	mov	r2, sp
   1ecc0:	mov	r0, #0
   1ecc4:	mov	r1, #128	; 0x80
   1ecc8:	bl	122f4 <sched_getaffinity@plt>
   1eccc:	cmp	r0, #0
   1ecd0:	bne	1ed20 <__assert_fail@plt+0xc9b4>
   1ecd4:	mov	r1, sp
   1ecd8:	mov	r0, #128	; 0x80
   1ecdc:	bl	11f34 <__sched_cpucount@plt>
   1ece0:	cmp	r0, #0
   1ece4:	cmpne	r0, r5
   1ece8:	bls	1ed20 <__assert_fail@plt+0xc9b4>
   1ecec:	b	1ecf4 <__assert_fail@plt+0xc988>
   1ecf0:	mov	r0, r5
   1ecf4:	cmp	r0, #0
   1ecf8:	mov	r5, r0
   1ecfc:	bgt	1ed20 <__assert_fail@plt+0xc9b4>
   1ed00:	mov	r5, #1
   1ed04:	b	1ed20 <__assert_fail@plt+0xc9b4>
   1ed08:	mov	r1, sp
   1ed0c:	mov	r0, #128	; 0x80
   1ed10:	bl	11f34 <__sched_cpucount@plt>
   1ed14:	cmp	r0, #0
   1ed18:	beq	1ec8c <__assert_fail@plt+0xc920>
   1ed1c:	mov	r5, r0
   1ed20:	cmp	r5, r4
   1ed24:	movcc	r4, r5
   1ed28:	mov	r0, r4
   1ed2c:	sub	sp, fp, #8
   1ed30:	pop	{r4, r5, fp, pc}
   1ed34:	push	{fp, lr}
   1ed38:	mov	fp, sp
   1ed3c:	sub	sp, sp, #8
   1ed40:	mov	r2, r0
   1ed44:	mov	r0, #0
   1ed48:	cmp	r2, #0
   1ed4c:	bne	1ed58 <__assert_fail@plt+0xc9ec>
   1ed50:	b	1edcc <__assert_fail@plt+0xca60>
   1ed54:	add	r2, r2, #1
   1ed58:	ldrb	r1, [r2]
   1ed5c:	sub	r3, r1, #9
   1ed60:	cmp	r3, #5
   1ed64:	bcc	1ed54 <__assert_fail@plt+0xc9e8>
   1ed68:	cmp	r1, #32
   1ed6c:	beq	1ed54 <__assert_fail@plt+0xc9e8>
   1ed70:	sub	r1, r1, #48	; 0x30
   1ed74:	cmp	r1, #9
   1ed78:	bhi	1edcc <__assert_fail@plt+0xca60>
   1ed7c:	mov	r0, #0
   1ed80:	add	r1, sp, #4
   1ed84:	str	r0, [sp, #4]
   1ed88:	mov	r0, r2
   1ed8c:	mov	r2, #10
   1ed90:	bl	12168 <strtoul@plt>
   1ed94:	ldr	r1, [sp, #4]
   1ed98:	cmp	r1, #0
   1ed9c:	bne	1eda8 <__assert_fail@plt+0xca3c>
   1eda0:	b	1edd8 <__assert_fail@plt+0xca6c>
   1eda4:	add	r1, r1, #1
   1eda8:	ldrb	r2, [r1]
   1edac:	sub	r3, r2, #9
   1edb0:	cmp	r3, #5
   1edb4:	bcc	1eda4 <__assert_fail@plt+0xca38>
   1edb8:	cmp	r2, #32
   1edbc:	beq	1eda4 <__assert_fail@plt+0xca38>
   1edc0:	cmp	r2, #0
   1edc4:	cmpne	r2, #44	; 0x2c
   1edc8:	bne	1edd4 <__assert_fail@plt+0xca68>
   1edcc:	mov	sp, fp
   1edd0:	pop	{fp, pc}
   1edd4:	str	r1, [sp, #4]
   1edd8:	mov	r0, #0
   1eddc:	mov	sp, fp
   1ede0:	pop	{fp, pc}
   1ede4:	andeq	r0, r0, r0
   1ede8:	push	{r4, sl, fp, lr}
   1edec:	add	fp, sp, #8
   1edf0:	sub	sp, sp, #64	; 0x40
   1edf4:	mov	r0, #85	; 0x55
   1edf8:	bl	11f94 <sysconf@plt>
   1edfc:	mov	r4, r0
   1ee00:	mov	r0, #30
   1ee04:	bl	11f94 <sysconf@plt>
   1ee08:	orr	r1, r0, r4
   1ee0c:	cmn	r1, #1
   1ee10:	ble	1ee30 <__assert_fail@plt+0xcac4>
   1ee14:	vmov	s0, r0
   1ee18:	vcvt.f64.s32	d16, s0
   1ee1c:	vmov	s0, r4
   1ee20:	vcvt.f64.s32	d17, s0
   1ee24:	vmul.f64	d0, d17, d16
   1ee28:	sub	sp, fp, #8
   1ee2c:	pop	{r4, sl, fp, pc}
   1ee30:	mov	r0, sp
   1ee34:	bl	120e4 <sysinfo@plt>
   1ee38:	cmp	r0, #0
   1ee3c:	beq	1ee4c <__assert_fail@plt+0xcae0>
   1ee40:	vldr	d0, [pc, #24]	; 1ee60 <__assert_fail@plt+0xcaf4>
   1ee44:	sub	sp, fp, #8
   1ee48:	pop	{r4, sl, fp, pc}
   1ee4c:	vldr	s0, [sp, #16]
   1ee50:	vldr	s2, [sp, #52]	; 0x34
   1ee54:	vcvt.f64.u32	d16, s2
   1ee58:	vcvt.f64.u32	d17, s0
   1ee5c:	b	1ee24 <__assert_fail@plt+0xcab8>
   1ee60:	andeq	r0, r0, r0
   1ee64:	orrsmi	r0, r0, r0
   1ee68:	push	{r4, sl, fp, lr}
   1ee6c:	add	fp, sp, #8
   1ee70:	sub	sp, sp, #64	; 0x40
   1ee74:	mov	r0, #86	; 0x56
   1ee78:	bl	11f94 <sysconf@plt>
   1ee7c:	mov	r4, r0
   1ee80:	mov	r0, #30
   1ee84:	bl	11f94 <sysconf@plt>
   1ee88:	orrs	r1, r0, r4
   1ee8c:	bmi	1eeac <__assert_fail@plt+0xcb40>
   1ee90:	vmov	s0, r0
   1ee94:	vcvt.f64.s32	d16, s0
   1ee98:	vmov	s0, r4
   1ee9c:	vcvt.f64.s32	d17, s0
   1eea0:	vmul.f64	d0, d17, d16
   1eea4:	sub	sp, fp, #8
   1eea8:	pop	{r4, sl, fp, pc}
   1eeac:	mov	r0, sp
   1eeb0:	bl	120e4 <sysinfo@plt>
   1eeb4:	cmp	r0, #0
   1eeb8:	beq	1eef4 <__assert_fail@plt+0xcb88>
   1eebc:	mov	r0, #85	; 0x55
   1eec0:	bl	11f94 <sysconf@plt>
   1eec4:	mov	r4, r0
   1eec8:	mov	r0, #30
   1eecc:	bl	11f94 <sysconf@plt>
   1eed0:	orr	r1, r0, r4
   1eed4:	cmn	r1, #1
   1eed8:	ble	1ef1c <__assert_fail@plt+0xcbb0>
   1eedc:	vmov	s0, r0
   1eee0:	vcvt.f64.s32	d16, s0
   1eee4:	vmov	s0, r4
   1eee8:	vcvt.f64.s32	d17, s0
   1eeec:	vmul.f64	d16, d17, d16
   1eef0:	b	1ef30 <__assert_fail@plt+0xcbc4>
   1eef4:	vldr	s0, [sp, #20]
   1eef8:	vldr	s2, [sp, #28]
   1eefc:	vldr	s4, [sp, #52]	; 0x34
   1ef00:	vcvt.f64.u32	d16, s2
   1ef04:	vcvt.f64.u32	d17, s0
   1ef08:	vcvt.f64.u32	d18, s4
   1ef0c:	vadd.f64	d16, d17, d16
   1ef10:	vmul.f64	d0, d16, d18
   1ef14:	sub	sp, fp, #8
   1ef18:	pop	{r4, sl, fp, pc}
   1ef1c:	mov	r0, sp
   1ef20:	bl	120e4 <sysinfo@plt>
   1ef24:	cmp	r0, #0
   1ef28:	beq	1ef40 <__assert_fail@plt+0xcbd4>
   1ef2c:	vldr	d16, [pc, #36]	; 1ef58 <__assert_fail@plt+0xcbec>
   1ef30:	vmov.f64	d17, #80	; 0x3e800000  0.250
   1ef34:	vmul.f64	d0, d16, d17
   1ef38:	sub	sp, fp, #8
   1ef3c:	pop	{r4, sl, fp, pc}
   1ef40:	vldr	s0, [sp, #16]
   1ef44:	vldr	s2, [sp, #52]	; 0x34
   1ef48:	vcvt.f64.u32	d16, s2
   1ef4c:	vcvt.f64.u32	d17, s0
   1ef50:	b	1eeec <__assert_fail@plt+0xcb80>
   1ef54:	nop	{0}
   1ef58:	andeq	r0, r0, r0
   1ef5c:	orrsmi	r0, r0, r0
   1ef60:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1ef64:	add	fp, sp, #24
   1ef68:	movw	r7, #35020	; 0x88cc
   1ef6c:	mov	r4, r0
   1ef70:	ldr	r9, [r0]
   1ef74:	ldr	r8, [r0, #4]
   1ef78:	mov	r5, r1
   1ef7c:	movt	r7, #3
   1ef80:	ldr	r0, [r7]
   1ef84:	cmp	r0, #0
   1ef88:	bmi	1efbc <__assert_fail@plt+0xcc50>
   1ef8c:	mov	r0, r4
   1ef90:	mov	r1, r5
   1ef94:	bl	122d0 <pipe2@plt>
   1ef98:	mov	r6, r0
   1ef9c:	cmn	r0, #1
   1efa0:	bgt	1efe4 <__assert_fail@plt+0xcc78>
   1efa4:	bl	12198 <__errno_location@plt>
   1efa8:	ldr	r0, [r0]
   1efac:	cmp	r0, #38	; 0x26
   1efb0:	bne	1efe4 <__assert_fail@plt+0xcc78>
   1efb4:	mvn	r0, #0
   1efb8:	str	r0, [r7]
   1efbc:	movw	r0, #63487	; 0xf7ff
   1efc0:	movt	r0, #65527	; 0xfff7
   1efc4:	tst	r5, r0
   1efc8:	beq	1eff4 <__assert_fail@plt+0xcc88>
   1efcc:	bl	12198 <__errno_location@plt>
   1efd0:	mov	r1, #22
   1efd4:	str	r1, [r0]
   1efd8:	mvn	r6, #0
   1efdc:	mov	r0, r6
   1efe0:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1efe4:	mov	r0, #1
   1efe8:	str	r0, [r7]
   1efec:	mov	r0, r6
   1eff0:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1eff4:	mov	r0, r4
   1eff8:	bl	1221c <pipe@plt>
   1effc:	mvn	r6, #0
   1f000:	cmp	r0, #0
   1f004:	bmi	1efdc <__assert_fail@plt+0xcc70>
   1f008:	tst	r5, #2048	; 0x800
   1f00c:	bne	1f08c <__assert_fail@plt+0xcd20>
   1f010:	mov	r6, #0
   1f014:	tst	r5, #524288	; 0x80000
   1f018:	beq	1efdc <__assert_fail@plt+0xcc70>
   1f01c:	ldr	r0, [r4, #4]
   1f020:	mov	r1, #1
   1f024:	mov	r2, #0
   1f028:	bl	241f0 <__assert_fail@plt+0x11e84>
   1f02c:	cmp	r0, #0
   1f030:	bmi	1f0f4 <__assert_fail@plt+0xcd88>
   1f034:	ldr	r1, [r4, #4]
   1f038:	orr	r2, r0, #1
   1f03c:	mov	r0, r1
   1f040:	mov	r1, #2
   1f044:	bl	241f0 <__assert_fail@plt+0x11e84>
   1f048:	cmn	r0, #1
   1f04c:	beq	1f0f4 <__assert_fail@plt+0xcd88>
   1f050:	ldr	r0, [r4]
   1f054:	mov	r1, #1
   1f058:	mov	r2, #0
   1f05c:	mov	r6, #0
   1f060:	bl	241f0 <__assert_fail@plt+0x11e84>
   1f064:	cmp	r0, #0
   1f068:	bmi	1f0f4 <__assert_fail@plt+0xcd88>
   1f06c:	ldr	r1, [r4]
   1f070:	orr	r2, r0, #1
   1f074:	mov	r0, r1
   1f078:	mov	r1, #2
   1f07c:	bl	241f0 <__assert_fail@plt+0x11e84>
   1f080:	cmn	r0, #1
   1f084:	bne	1efdc <__assert_fail@plt+0xcc70>
   1f088:	b	1f0f4 <__assert_fail@plt+0xcd88>
   1f08c:	ldr	r0, [r4, #4]
   1f090:	mov	r1, #3
   1f094:	mov	r2, #0
   1f098:	bl	241f0 <__assert_fail@plt+0x11e84>
   1f09c:	cmp	r0, #0
   1f0a0:	bmi	1f0f4 <__assert_fail@plt+0xcd88>
   1f0a4:	ldr	r1, [r4, #4]
   1f0a8:	orr	r2, r0, #2048	; 0x800
   1f0ac:	mov	r0, r1
   1f0b0:	mov	r1, #4
   1f0b4:	bl	241f0 <__assert_fail@plt+0x11e84>
   1f0b8:	cmn	r0, #1
   1f0bc:	beq	1f0f4 <__assert_fail@plt+0xcd88>
   1f0c0:	ldr	r0, [r4]
   1f0c4:	mov	r1, #3
   1f0c8:	mov	r2, #0
   1f0cc:	bl	241f0 <__assert_fail@plt+0x11e84>
   1f0d0:	cmp	r0, #0
   1f0d4:	bmi	1f0f4 <__assert_fail@plt+0xcd88>
   1f0d8:	ldr	r1, [r4]
   1f0dc:	orr	r2, r0, #2048	; 0x800
   1f0e0:	mov	r0, r1
   1f0e4:	mov	r1, #4
   1f0e8:	bl	241f0 <__assert_fail@plt+0x11e84>
   1f0ec:	cmn	r0, #1
   1f0f0:	bne	1f010 <__assert_fail@plt+0xcca4>
   1f0f4:	bl	12198 <__errno_location@plt>
   1f0f8:	mov	r5, r0
   1f0fc:	ldr	r6, [r0]
   1f100:	ldr	r0, [r4]
   1f104:	bl	12354 <close@plt>
   1f108:	ldr	r0, [r4, #4]
   1f10c:	bl	12354 <close@plt>
   1f110:	str	r9, [r4]
   1f114:	str	r8, [r4, #4]
   1f118:	str	r6, [r5]
   1f11c:	b	1efd8 <__assert_fail@plt+0xcc6c>
   1f120:	push	{r4, sl, fp, lr}
   1f124:	add	fp, sp, #8
   1f128:	sub	sp, sp, #8
   1f12c:	movw	r0, #29357	; 0x72ad
   1f130:	movt	r0, #2
   1f134:	bl	120cc <getenv@plt>
   1f138:	movw	r4, #4201	; 0x1069
   1f13c:	cmp	r0, #0
   1f140:	movt	r4, #3
   1f144:	beq	1f170 <__assert_fail@plt+0xce04>
   1f148:	ldrb	r1, [r0]
   1f14c:	cmp	r1, #0
   1f150:	beq	1f170 <__assert_fail@plt+0xce04>
   1f154:	add	r1, sp, #4
   1f158:	mov	r2, #10
   1f15c:	bl	11e5c <strtol@plt>
   1f160:	ldr	r1, [sp, #4]
   1f164:	ldrb	r1, [r1]
   1f168:	cmp	r1, #0
   1f16c:	moveq	r4, r0
   1f170:	mov	r0, r4
   1f174:	sub	sp, fp, #8
   1f178:	pop	{r4, sl, fp, pc}
   1f17c:	push	{r4, r5, fp, lr}
   1f180:	add	fp, sp, #8
   1f184:	cmp	r0, #0
   1f188:	beq	1f21c <__assert_fail@plt+0xceb0>
   1f18c:	mov	r1, #47	; 0x2f
   1f190:	mov	r4, r0
   1f194:	bl	1227c <strrchr@plt>
   1f198:	cmp	r0, #0
   1f19c:	mov	r5, r4
   1f1a0:	addne	r5, r0, #1
   1f1a4:	sub	r0, r5, r4
   1f1a8:	cmp	r0, #7
   1f1ac:	blt	1f200 <__assert_fail@plt+0xce94>
   1f1b0:	movw	r1, #29429	; 0x72f5
   1f1b4:	sub	r0, r5, #7
   1f1b8:	mov	r2, #7
   1f1bc:	movt	r1, #2
   1f1c0:	bl	12330 <strncmp@plt>
   1f1c4:	cmp	r0, #0
   1f1c8:	bne	1f200 <__assert_fail@plt+0xce94>
   1f1cc:	movw	r1, #29437	; 0x72fd
   1f1d0:	mov	r0, r5
   1f1d4:	mov	r2, #3
   1f1d8:	movt	r1, #2
   1f1dc:	bl	12330 <strncmp@plt>
   1f1e0:	cmp	r0, #0
   1f1e4:	beq	1f1f0 <__assert_fail@plt+0xce84>
   1f1e8:	mov	r4, r5
   1f1ec:	b	1f200 <__assert_fail@plt+0xce94>
   1f1f0:	movw	r0, #33472	; 0x82c0
   1f1f4:	add	r4, r5, #3
   1f1f8:	movt	r0, #3
   1f1fc:	str	r4, [r0]
   1f200:	movw	r0, #33476	; 0x82c4
   1f204:	movt	r0, #3
   1f208:	str	r4, [r0]
   1f20c:	movw	r0, #35024	; 0x88d0
   1f210:	movt	r0, #3
   1f214:	str	r4, [r0]
   1f218:	pop	{r4, r5, fp, pc}
   1f21c:	movw	r0, #33488	; 0x82d0
   1f220:	mov	r1, #55	; 0x37
   1f224:	mov	r2, #1
   1f228:	movt	r0, #3
   1f22c:	ldr	r3, [r0]
   1f230:	movw	r0, #29373	; 0x72bd
   1f234:	movt	r0, #2
   1f238:	bl	1203c <fwrite@plt>
   1f23c:	bl	12348 <abort@plt>
   1f240:	push	{r4, r5, r6, sl, fp, lr}
   1f244:	add	fp, sp, #16
   1f248:	mov	r4, r0
   1f24c:	movw	r0, #35032	; 0x88d8
   1f250:	movt	r0, #3
   1f254:	cmp	r4, #0
   1f258:	moveq	r4, r0
   1f25c:	bl	12198 <__errno_location@plt>
   1f260:	ldr	r6, [r0]
   1f264:	mov	r5, r0
   1f268:	mov	r0, r4
   1f26c:	mov	r1, #48	; 0x30
   1f270:	bl	22b80 <__assert_fail@plt+0x10814>
   1f274:	str	r6, [r5]
   1f278:	pop	{r4, r5, r6, sl, fp, pc}
   1f27c:	movw	r1, #35032	; 0x88d8
   1f280:	cmp	r0, #0
   1f284:	movt	r1, #3
   1f288:	movne	r1, r0
   1f28c:	ldr	r0, [r1]
   1f290:	bx	lr
   1f294:	movw	r2, #35032	; 0x88d8
   1f298:	cmp	r0, #0
   1f29c:	movt	r2, #3
   1f2a0:	movne	r2, r0
   1f2a4:	str	r1, [r2]
   1f2a8:	bx	lr
   1f2ac:	movw	r3, #35032	; 0x88d8
   1f2b0:	cmp	r0, #0
   1f2b4:	and	r2, r2, #1
   1f2b8:	movt	r3, #3
   1f2bc:	movne	r3, r0
   1f2c0:	ubfx	r0, r1, #5, #3
   1f2c4:	and	r1, r1, #31
   1f2c8:	add	ip, r3, r0, lsl #2
   1f2cc:	mov	r0, #1
   1f2d0:	ldr	r3, [ip, #8]
   1f2d4:	and	r0, r0, r3, lsr r1
   1f2d8:	eor	r2, r0, r2
   1f2dc:	eor	r1, r3, r2, lsl r1
   1f2e0:	str	r1, [ip, #8]
   1f2e4:	bx	lr
   1f2e8:	movw	r2, #35032	; 0x88d8
   1f2ec:	cmp	r0, #0
   1f2f0:	movt	r2, #3
   1f2f4:	movne	r2, r0
   1f2f8:	ldr	r0, [r2, #4]
   1f2fc:	str	r1, [r2, #4]
   1f300:	bx	lr
   1f304:	push	{fp, lr}
   1f308:	mov	fp, sp
   1f30c:	movw	r3, #35032	; 0x88d8
   1f310:	cmp	r0, #0
   1f314:	movt	r3, #3
   1f318:	movne	r3, r0
   1f31c:	cmp	r1, #0
   1f320:	mov	r0, #10
   1f324:	cmpne	r2, #0
   1f328:	str	r0, [r3]
   1f32c:	bne	1f334 <__assert_fail@plt+0xcfc8>
   1f330:	bl	12348 <abort@plt>
   1f334:	str	r1, [r3, #40]	; 0x28
   1f338:	str	r2, [r3, #44]	; 0x2c
   1f33c:	pop	{fp, pc}
   1f340:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f344:	add	fp, sp, #28
   1f348:	sub	sp, sp, #20
   1f34c:	mov	r7, r0
   1f350:	ldr	r0, [fp, #8]
   1f354:	movw	r5, #35032	; 0x88d8
   1f358:	mov	r8, r3
   1f35c:	mov	r9, r2
   1f360:	mov	sl, r1
   1f364:	movt	r5, #3
   1f368:	cmp	r0, #0
   1f36c:	movne	r5, r0
   1f370:	bl	12198 <__errno_location@plt>
   1f374:	ldr	r2, [r5, #40]	; 0x28
   1f378:	ldr	r3, [r5, #44]	; 0x2c
   1f37c:	mov	r4, r0
   1f380:	ldm	r5, {r0, r1}
   1f384:	add	r5, r5, #8
   1f388:	ldr	r6, [r4]
   1f38c:	stm	sp, {r0, r1, r5}
   1f390:	mov	r0, r7
   1f394:	mov	r1, sl
   1f398:	str	r2, [sp, #12]
   1f39c:	str	r3, [sp, #16]
   1f3a0:	mov	r2, r9
   1f3a4:	mov	r3, r8
   1f3a8:	bl	1f3b8 <__assert_fail@plt+0xd04c>
   1f3ac:	str	r6, [r4]
   1f3b0:	sub	sp, fp, #28
   1f3b4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f3b8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f3bc:	add	fp, sp, #28
   1f3c0:	sub	sp, sp, #156	; 0x9c
   1f3c4:	mov	r5, r0
   1f3c8:	add	r0, r2, #1
   1f3cc:	mov	r6, r1
   1f3d0:	mov	sl, r3
   1f3d4:	str	r2, [fp, #-80]	; 0xffffffb0
   1f3d8:	str	r0, [sp, #72]	; 0x48
   1f3dc:	ldr	r0, [fp, #12]
   1f3e0:	and	r1, r0, #1
   1f3e4:	str	r1, [sp, #36]	; 0x24
   1f3e8:	and	r1, r0, #4
   1f3ec:	str	r1, [sp, #32]
   1f3f0:	ubfx	r9, r0, #1, #1
   1f3f4:	bl	1206c <__ctype_get_mb_cur_max@plt>
   1f3f8:	str	r0, [sp, #40]	; 0x28
   1f3fc:	ldr	r0, [fp, #24]
   1f400:	ldr	r7, [fp, #8]
   1f404:	mov	r1, #0
   1f408:	str	r5, [fp, #-84]	; 0xffffffac
   1f40c:	str	r1, [fp, #-56]	; 0xffffffc8
   1f410:	mov	r1, #0
   1f414:	str	r1, [sp, #60]	; 0x3c
   1f418:	mov	r1, #1
   1f41c:	str	r1, [fp, #-48]	; 0xffffffd0
   1f420:	str	r0, [sp, #80]	; 0x50
   1f424:	ldr	r0, [fp, #20]
   1f428:	str	r0, [sp, #76]	; 0x4c
   1f42c:	mov	r0, #0
   1f430:	str	r0, [sp, #56]	; 0x38
   1f434:	mov	r0, #0
   1f438:	str	r0, [fp, #-88]	; 0xffffffa8
   1f43c:	mov	r0, #0
   1f440:	str	r0, [fp, #-72]	; 0xffffffb8
   1f444:	mov	r0, #0
   1f448:	cmp	r7, #10
   1f44c:	bhi	203e0 <__assert_fail@plt+0xe074>
   1f450:	add	r1, pc, #24
   1f454:	ldr	ip, [fp, #-80]	; 0xffffffb0
   1f458:	mov	r4, r6
   1f45c:	mov	r8, #0
   1f460:	mov	r2, #1
   1f464:	mov	r3, #0
   1f468:	mov	lr, sl
   1f46c:	ldr	pc, [r1, r7, lsl #2]
   1f470:	andeq	pc, r1, r4, lsr r5	; <UNPREDICTABLE>
   1f474:	andeq	pc, r1, r8, lsl #11
   1f478:	andeq	pc, r1, r8, asr #10
   1f47c:	andeq	pc, r1, ip, lsr #10
   1f480:	andeq	pc, r1, ip, ror r5	; <UNPREDICTABLE>
   1f484:			; <UNDEFINED> instruction: 0x0001f5b0
   1f488:	andeq	pc, r1, r8, asr r5	; <UNPREDICTABLE>
   1f48c:	andeq	pc, r1, r4, lsr r6	; <UNPREDICTABLE>
   1f490:	muleq	r1, ip, r4
   1f494:	muleq	r1, ip, r4
   1f498:	andeq	pc, r1, r4, asr #9
   1f49c:	movw	r0, #29517	; 0x734d
   1f4a0:	mov	r1, r7
   1f4a4:	movt	r0, #2
   1f4a8:	bl	20de8 <__assert_fail@plt+0xea7c>
   1f4ac:	str	r0, [sp, #76]	; 0x4c
   1f4b0:	movw	r0, #25026	; 0x61c2
   1f4b4:	mov	r1, r7
   1f4b8:	movt	r0, #2
   1f4bc:	bl	20de8 <__assert_fail@plt+0xea7c>
   1f4c0:	str	r0, [sp, #80]	; 0x50
   1f4c4:	mov	r8, #0
   1f4c8:	tst	r9, #1
   1f4cc:	bne	1f504 <__assert_fail@plt+0xd198>
   1f4d0:	ldr	r0, [sp, #76]	; 0x4c
   1f4d4:	ldrb	r0, [r0]
   1f4d8:	cmp	r0, #0
   1f4dc:	beq	1f504 <__assert_fail@plt+0xd198>
   1f4e0:	ldr	r1, [sp, #76]	; 0x4c
   1f4e4:	mov	r8, #0
   1f4e8:	add	r1, r1, #1
   1f4ec:	cmp	r8, r4
   1f4f0:	strbcc	r0, [r5, r8]
   1f4f4:	ldrb	r0, [r1, r8]
   1f4f8:	add	r8, r8, #1
   1f4fc:	cmp	r0, #0
   1f500:	bne	1f4ec <__assert_fail@plt+0xd180>
   1f504:	ldr	r6, [sp, #80]	; 0x50
   1f508:	mov	r0, r6
   1f50c:	bl	12174 <strlen@plt>
   1f510:	ldr	ip, [fp, #-80]	; 0xffffffb0
   1f514:	str	r0, [fp, #-72]	; 0xffffffb8
   1f518:	str	r6, [fp, #-88]	; 0xffffffa8
   1f51c:	mov	r2, #1
   1f520:	mov	r3, r9
   1f524:	mov	lr, sl
   1f528:	b	1f634 <__assert_fail@plt+0xd2c8>
   1f52c:	mov	r0, #1
   1f530:	b	1f588 <__assert_fail@plt+0xd21c>
   1f534:	mov	r7, #0
   1f538:	mov	r8, #0
   1f53c:	mov	r2, r0
   1f540:	mov	r3, #0
   1f544:	b	1f634 <__assert_fail@plt+0xd2c8>
   1f548:	tst	r9, #1
   1f54c:	bne	1f588 <__assert_fail@plt+0xd21c>
   1f550:	mov	r2, r0
   1f554:	b	1f5e0 <__assert_fail@plt+0xd274>
   1f558:	mov	r0, #1
   1f55c:	mov	r8, #0
   1f560:	mov	r7, #5
   1f564:	mov	r2, #1
   1f568:	str	r0, [fp, #-72]	; 0xffffffb8
   1f56c:	movw	r0, #26799	; 0x68af
   1f570:	movt	r0, #2
   1f574:	str	r0, [fp, #-88]	; 0xffffffa8
   1f578:	b	1f5a8 <__assert_fail@plt+0xd23c>
   1f57c:	mov	r2, #1
   1f580:	tst	r9, #1
   1f584:	beq	1f5e0 <__assert_fail@plt+0xd274>
   1f588:	mov	r1, #1
   1f58c:	mov	r8, #0
   1f590:	mov	r7, #2
   1f594:	mov	r2, r0
   1f598:	str	r1, [fp, #-72]	; 0xffffffb8
   1f59c:	movw	r1, #25026	; 0x61c2
   1f5a0:	movt	r1, #2
   1f5a4:	str	r1, [fp, #-88]	; 0xffffffa8
   1f5a8:	mov	r3, #1
   1f5ac:	b	1f634 <__assert_fail@plt+0xd2c8>
   1f5b0:	tst	r9, #1
   1f5b4:	beq	1f604 <__assert_fail@plt+0xd298>
   1f5b8:	mov	r0, #1
   1f5bc:	mov	r8, #0
   1f5c0:	mov	r2, #1
   1f5c4:	mov	r3, #1
   1f5c8:	mov	r7, #5
   1f5cc:	str	r0, [fp, #-72]	; 0xffffffb8
   1f5d0:	movw	r0, #26799	; 0x68af
   1f5d4:	movt	r0, #2
   1f5d8:	str	r0, [fp, #-88]	; 0xffffffa8
   1f5dc:	b	1f634 <__assert_fail@plt+0xd2c8>
   1f5e0:	cmp	r4, #0
   1f5e4:	mov	r8, #1
   1f5e8:	mov	r3, #0
   1f5ec:	mov	r7, #2
   1f5f0:	movne	r0, #39	; 0x27
   1f5f4:	strbne	r0, [r5]
   1f5f8:	movw	r0, #25026	; 0x61c2
   1f5fc:	movt	r0, #2
   1f600:	b	1f628 <__assert_fail@plt+0xd2bc>
   1f604:	cmp	r4, #0
   1f608:	mov	r8, #1
   1f60c:	mov	r2, #1
   1f610:	mov	r7, #5
   1f614:	mov	r3, #0
   1f618:	movne	r0, #34	; 0x22
   1f61c:	strbne	r0, [r5]
   1f620:	movw	r0, #26799	; 0x68af
   1f624:	movt	r0, #2
   1f628:	str	r0, [fp, #-88]	; 0xffffffa8
   1f62c:	mov	r0, #1
   1f630:	str	r0, [fp, #-72]	; 0xffffffb8
   1f634:	ldr	r0, [fp, #-72]	; 0xffffffb8
   1f638:	eor	r6, r3, #1
   1f63c:	str	r7, [fp, #-68]	; 0xffffffbc
   1f640:	str	r3, [fp, #-76]	; 0xffffffb4
   1f644:	str	r2, [sp, #84]	; 0x54
   1f648:	str	r6, [sp, #92]	; 0x5c
   1f64c:	cmp	r0, #0
   1f650:	movwne	r0, #1
   1f654:	and	r1, r0, r3
   1f658:	and	r1, r2, r1
   1f65c:	str	r1, [sp, #48]	; 0x30
   1f660:	sub	r1, r7, #2
   1f664:	clz	r1, r1
   1f668:	lsr	r1, r1, #5
   1f66c:	and	r1, r1, r3
   1f670:	str	r1, [sp, #64]	; 0x40
   1f674:	subs	r1, r7, #2
   1f678:	mov	r7, #0
   1f67c:	movwne	r1, #1
   1f680:	orr	r6, r1, r6
   1f684:	and	r1, r1, r2
   1f688:	and	r0, r0, r1
   1f68c:	str	r6, [sp, #68]	; 0x44
   1f690:	str	r0, [fp, #-60]	; 0xffffffc4
   1f694:	orr	r0, r1, r3
   1f698:	ldr	r1, [fp, #16]
   1f69c:	eor	r0, r0, #1
   1f6a0:	clz	r1, r1
   1f6a4:	lsr	r1, r1, #5
   1f6a8:	orr	r0, r1, r0
   1f6ac:	str	r0, [fp, #-64]	; 0xffffffc0
   1f6b0:	eor	r0, r2, #1
   1f6b4:	str	r0, [sp, #52]	; 0x34
   1f6b8:	cmn	lr, #1
   1f6bc:	beq	1f6cc <__assert_fail@plt+0xd360>
   1f6c0:	cmp	r7, lr
   1f6c4:	bne	1f6d8 <__assert_fail@plt+0xd36c>
   1f6c8:	b	20220 <__assert_fail@plt+0xdeb4>
   1f6cc:	ldrb	r0, [ip, r7]
   1f6d0:	cmp	r0, #0
   1f6d4:	beq	20228 <__assert_fail@plt+0xdebc>
   1f6d8:	ldr	r0, [fp, #-60]	; 0xffffffc4
   1f6dc:	mov	sl, #0
   1f6e0:	cmp	r0, #0
   1f6e4:	beq	1f71c <__assert_fail@plt+0xd3b0>
   1f6e8:	ldr	r0, [fp, #-72]	; 0xffffffb8
   1f6ec:	add	r5, r7, r0
   1f6f0:	cmp	r0, #2
   1f6f4:	bcc	1f710 <__assert_fail@plt+0xd3a4>
   1f6f8:	cmn	lr, #1
   1f6fc:	bne	1f710 <__assert_fail@plt+0xd3a4>
   1f700:	mov	r0, ip
   1f704:	bl	12174 <strlen@plt>
   1f708:	ldr	ip, [fp, #-80]	; 0xffffffb0
   1f70c:	mov	lr, r0
   1f710:	cmp	r5, lr
   1f714:	bls	1f724 <__assert_fail@plt+0xd3b8>
   1f718:	ldr	r5, [fp, #-84]	; 0xffffffac
   1f71c:	mov	r0, #0
   1f720:	b	1f770 <__assert_fail@plt+0xd404>
   1f724:	ldr	r1, [fp, #-88]	; 0xffffffa8
   1f728:	ldr	r2, [fp, #-72]	; 0xffffffb8
   1f72c:	add	r0, ip, r7
   1f730:	mov	r6, r4
   1f734:	mov	r4, lr
   1f738:	bl	1215c <bcmp@plt>
   1f73c:	ldr	r2, [sp, #92]	; 0x5c
   1f740:	cmp	r0, #0
   1f744:	ldr	r5, [fp, #-84]	; 0xffffffac
   1f748:	mov	r1, r0
   1f74c:	movwne	r1, #1
   1f750:	orr	r1, r1, r2
   1f754:	tst	r1, #1
   1f758:	beq	202b0 <__assert_fail@plt+0xdf44>
   1f75c:	ldr	ip, [fp, #-80]	; 0xffffffb0
   1f760:	clz	r0, r0
   1f764:	mov	lr, r4
   1f768:	mov	r4, r6
   1f76c:	lsr	r0, r0, #5
   1f770:	str	r0, [fp, #-52]	; 0xffffffcc
   1f774:	ldrb	r6, [ip, r7]
   1f778:	cmp	r6, #126	; 0x7e
   1f77c:	bhi	1fcac <__assert_fail@plt+0xd940>
   1f780:	add	r3, pc, #16
   1f784:	mov	r9, #1
   1f788:	mov	r2, #110	; 0x6e
   1f78c:	mov	r0, #97	; 0x61
   1f790:	mov	r1, #0
   1f794:	ldr	pc, [r3, r6, lsl #2]
   1f798:	andeq	pc, r1, ip, lsl #22
   1f79c:	andeq	pc, r1, ip, lsr #25
   1f7a0:	andeq	pc, r1, ip, lsr #25
   1f7a4:	andeq	pc, r1, ip, lsr #25
   1f7a8:	andeq	pc, r1, ip, lsr #25
   1f7ac:	andeq	pc, r1, ip, lsr #25
   1f7b0:	andeq	pc, r1, ip, lsr #25
   1f7b4:	andeq	pc, r1, r8, lsl #27
   1f7b8:	andeq	pc, r1, ip, ror #21
   1f7bc:	andeq	pc, r1, r4, ror #21
   1f7c0:	strdeq	pc, [r1], -r8
   1f7c4:	andeq	pc, r1, r4, lsl ip	; <UNPREDICTABLE>
   1f7c8:	ldrdeq	pc, [r1], -ip
   1f7cc:	strdeq	pc, [r1], -r4
   1f7d0:	andeq	pc, r1, ip, lsr #25
   1f7d4:	andeq	pc, r1, ip, lsr #25
   1f7d8:	andeq	pc, r1, ip, lsr #25
   1f7dc:	andeq	pc, r1, ip, lsr #25
   1f7e0:	andeq	pc, r1, ip, lsr #25
   1f7e4:	andeq	pc, r1, ip, lsr #25
   1f7e8:	andeq	pc, r1, ip, lsr #25
   1f7ec:	andeq	pc, r1, ip, lsr #25
   1f7f0:	andeq	pc, r1, ip, lsr #25
   1f7f4:	andeq	pc, r1, ip, lsr #25
   1f7f8:	andeq	pc, r1, ip, lsr #25
   1f7fc:	andeq	pc, r1, ip, lsr #25
   1f800:	andeq	pc, r1, ip, lsr #25
   1f804:	andeq	pc, r1, ip, lsr #25
   1f808:	andeq	pc, r1, ip, lsr #25
   1f80c:	andeq	pc, r1, ip, lsr #25
   1f810:	andeq	pc, r1, ip, lsr #25
   1f814:	andeq	pc, r1, ip, lsr #25
   1f818:	muleq	r1, r0, sl
   1f81c:	muleq	r1, r4, sl
   1f820:	muleq	r1, r4, sl
   1f824:	andeq	pc, r1, ip, ror sl	; <UNPREDICTABLE>
   1f828:	muleq	r1, r4, sl
   1f82c:	muleq	r1, r4, r9
   1f830:	muleq	r1, r4, sl
   1f834:	andeq	pc, r1, ip, lsl ip	; <UNPREDICTABLE>
   1f838:	muleq	r1, r4, sl
   1f83c:	muleq	r1, r4, sl
   1f840:	muleq	r1, r4, sl
   1f844:	muleq	r1, r4, r9
   1f848:	muleq	r1, r4, r9
   1f84c:	muleq	r1, r4, r9
   1f850:	muleq	r1, r4, r9
   1f854:	muleq	r1, r4, r9
   1f858:	muleq	r1, r4, r9
   1f85c:	muleq	r1, r4, r9
   1f860:	muleq	r1, r4, r9
   1f864:	muleq	r1, r4, r9
   1f868:	muleq	r1, r4, r9
   1f86c:	muleq	r1, r4, r9
   1f870:	muleq	r1, r4, r9
   1f874:	muleq	r1, r4, r9
   1f878:	muleq	r1, r4, r9
   1f87c:	muleq	r1, r4, r9
   1f880:	muleq	r1, r4, r9
   1f884:	muleq	r1, r4, sl
   1f888:	muleq	r1, r4, sl
   1f88c:	muleq	r1, r4, sl
   1f890:	muleq	r1, r4, sl
   1f894:	andeq	pc, r1, r4, ror #23
   1f898:	andeq	pc, r1, ip, lsr #25
   1f89c:	muleq	r1, r4, r9
   1f8a0:	muleq	r1, r4, r9
   1f8a4:	muleq	r1, r4, r9
   1f8a8:	muleq	r1, r4, r9
   1f8ac:	muleq	r1, r4, r9
   1f8b0:	muleq	r1, r4, r9
   1f8b4:	muleq	r1, r4, r9
   1f8b8:	muleq	r1, r4, r9
   1f8bc:	muleq	r1, r4, r9
   1f8c0:	muleq	r1, r4, r9
   1f8c4:	muleq	r1, r4, r9
   1f8c8:	muleq	r1, r4, r9
   1f8cc:	muleq	r1, r4, r9
   1f8d0:	muleq	r1, r4, r9
   1f8d4:	muleq	r1, r4, r9
   1f8d8:	muleq	r1, r4, r9
   1f8dc:	muleq	r1, r4, r9
   1f8e0:	muleq	r1, r4, r9
   1f8e4:	muleq	r1, r4, r9
   1f8e8:	muleq	r1, r4, r9
   1f8ec:	muleq	r1, r4, r9
   1f8f0:	muleq	r1, r4, r9
   1f8f4:	muleq	r1, r4, r9
   1f8f8:	muleq	r1, r4, r9
   1f8fc:	muleq	r1, r4, r9
   1f900:	muleq	r1, r4, r9
   1f904:	muleq	r1, r4, sl
   1f908:			; <UNDEFINED> instruction: 0x0001fabc
   1f90c:	muleq	r1, r4, r9
   1f910:	muleq	r1, r4, sl
   1f914:	muleq	r1, r4, r9
   1f918:	muleq	r1, r4, sl
   1f91c:	muleq	r1, r4, r9
   1f920:	muleq	r1, r4, r9
   1f924:	muleq	r1, r4, r9
   1f928:	muleq	r1, r4, r9
   1f92c:	muleq	r1, r4, r9
   1f930:	muleq	r1, r4, r9
   1f934:	muleq	r1, r4, r9
   1f938:	muleq	r1, r4, r9
   1f93c:	muleq	r1, r4, r9
   1f940:	muleq	r1, r4, r9
   1f944:	muleq	r1, r4, r9
   1f948:	muleq	r1, r4, r9
   1f94c:	muleq	r1, r4, r9
   1f950:	muleq	r1, r4, r9
   1f954:	muleq	r1, r4, r9
   1f958:	muleq	r1, r4, r9
   1f95c:	muleq	r1, r4, r9
   1f960:	muleq	r1, r4, r9
   1f964:	muleq	r1, r4, r9
   1f968:	muleq	r1, r4, r9
   1f96c:	muleq	r1, r4, r9
   1f970:	muleq	r1, r4, r9
   1f974:	muleq	r1, r4, r9
   1f978:	muleq	r1, r4, r9
   1f97c:	muleq	r1, r4, r9
   1f980:	muleq	r1, r4, r9
   1f984:	andeq	pc, r1, r0, asr sl	; <UNPREDICTABLE>
   1f988:	muleq	r1, r4, sl
   1f98c:	andeq	pc, r1, r0, asr sl	; <UNPREDICTABLE>
   1f990:	andeq	pc, r1, ip, ror sl	; <UNPREDICTABLE>
   1f994:	ldr	r0, [fp, #-64]	; 0xffffffc0
   1f998:	tst	r0, #1
   1f99c:	bne	1f9c8 <__assert_fail@plt+0xd65c>
   1f9a0:	ldr	r1, [fp, #16]
   1f9a4:	ubfx	r0, r6, #5, #3
   1f9a8:	mov	r2, #1
   1f9ac:	ldr	r0, [r1, r0, lsl #2]
   1f9b0:	and	r1, r6, #31
   1f9b4:	tst	r0, r2, lsl r1
   1f9b8:	beq	1f9c8 <__assert_fail@plt+0xd65c>
   1f9bc:	mov	r0, r6
   1f9c0:	mov	r1, r9
   1f9c4:	b	1f9dc <__assert_fail@plt+0xd670>
   1f9c8:	ldr	r0, [fp, #-52]	; 0xffffffcc
   1f9cc:	mov	r1, r9
   1f9d0:	cmp	r0, #0
   1f9d4:	mov	r0, r6
   1f9d8:	beq	1fd1c <__assert_fail@plt+0xd9b0>
   1f9dc:	ldr	r2, [fp, #-76]	; 0xffffffb4
   1f9e0:	tst	r2, #1
   1f9e4:	bne	202ec <__assert_fail@plt+0xdf80>
   1f9e8:	ldr	r2, [fp, #-68]	; 0xffffffbc
   1f9ec:	ldr	r3, [fp, #-56]	; 0xffffffc8
   1f9f0:	subs	r2, r2, #2
   1f9f4:	movwne	r2, #1
   1f9f8:	orr	r2, r2, r3
   1f9fc:	tst	r2, #1
   1fa00:	bne	1fa3c <__assert_fail@plt+0xd6d0>
   1fa04:	cmp	r8, r4
   1fa08:	movcc	r2, #39	; 0x27
   1fa0c:	strbcc	r2, [r5, r8]
   1fa10:	add	r2, r8, #1
   1fa14:	cmp	r2, r4
   1fa18:	movcc	r3, #36	; 0x24
   1fa1c:	strbcc	r3, [r5, r2]
   1fa20:	add	r2, r8, #2
   1fa24:	add	r8, r8, #3
   1fa28:	cmp	r2, r4
   1fa2c:	movcc	r3, #39	; 0x27
   1fa30:	strbcc	r3, [r5, r2]
   1fa34:	mov	r2, #1
   1fa38:	str	r2, [fp, #-56]	; 0xffffffc8
   1fa3c:	cmp	r8, r4
   1fa40:	movcc	r2, #92	; 0x5c
   1fa44:	strbcc	r2, [r5, r8]
   1fa48:	add	r8, r8, #1
   1fa4c:	b	1fd60 <__assert_fail@plt+0xd9f4>
   1fa50:	cmp	lr, #1
   1fa54:	beq	1fa7c <__assert_fail@plt+0xd710>
   1fa58:	mov	r9, #0
   1fa5c:	cmn	lr, #1
   1fa60:	bne	1fa88 <__assert_fail@plt+0xd71c>
   1fa64:	ldrb	r0, [ip, #1]
   1fa68:	cmp	r0, #0
   1fa6c:	beq	1fa7c <__assert_fail@plt+0xd710>
   1fa70:	mvn	lr, #0
   1fa74:	mov	sl, #0
   1fa78:	b	1f994 <__assert_fail@plt+0xd628>
   1fa7c:	mov	r9, #0
   1fa80:	cmp	r7, #0
   1fa84:	beq	1fa90 <__assert_fail@plt+0xd724>
   1fa88:	mov	sl, #0
   1fa8c:	b	1f994 <__assert_fail@plt+0xd628>
   1fa90:	mov	r1, #1
   1fa94:	ldr	r0, [fp, #-68]	; 0xffffffbc
   1fa98:	cmp	r0, #2
   1fa9c:	bne	1fab4 <__assert_fail@plt+0xd748>
   1faa0:	ldr	r0, [fp, #-76]	; 0xffffffb4
   1faa4:	mov	r9, r1
   1faa8:	tst	r0, #1
   1faac:	beq	1f994 <__assert_fail@plt+0xd628>
   1fab0:	b	202ec <__assert_fail@plt+0xdf80>
   1fab4:	mov	r9, r1
   1fab8:	b	1f994 <__assert_fail@plt+0xd628>
   1fabc:	ldr	r0, [fp, #-68]	; 0xffffffbc
   1fac0:	cmp	r0, #2
   1fac4:	bne	1fd00 <__assert_fail@plt+0xd994>
   1fac8:	ldr	r0, [fp, #-76]	; 0xffffffb4
   1facc:	tst	r0, #1
   1fad0:	bne	202ec <__assert_fail@plt+0xdf80>
   1fad4:	mov	sl, #0
   1fad8:	b	1fd14 <__assert_fail@plt+0xd9a8>
   1fadc:	mov	r0, #102	; 0x66
   1fae0:	b	1fd88 <__assert_fail@plt+0xda1c>
   1fae4:	mov	r2, #116	; 0x74
   1fae8:	b	1faf8 <__assert_fail@plt+0xd78c>
   1faec:	mov	r0, #98	; 0x62
   1faf0:	b	1fd88 <__assert_fail@plt+0xda1c>
   1faf4:	mov	r2, #114	; 0x72
   1faf8:	ldr	r0, [sp, #68]	; 0x44
   1fafc:	tst	r0, #1
   1fb00:	mov	r0, r2
   1fb04:	bne	1fd88 <__assert_fail@plt+0xda1c>
   1fb08:	b	202ec <__assert_fail@plt+0xdf80>
   1fb0c:	ldr	r0, [sp, #84]	; 0x54
   1fb10:	tst	r0, #1
   1fb14:	beq	1fda4 <__assert_fail@plt+0xda38>
   1fb18:	ldr	r0, [fp, #-76]	; 0xffffffb4
   1fb1c:	tst	r0, #1
   1fb20:	bne	203d8 <__assert_fail@plt+0xe06c>
   1fb24:	ldr	r0, [fp, #-68]	; 0xffffffbc
   1fb28:	ldr	r1, [fp, #-56]	; 0xffffffc8
   1fb2c:	subs	r0, r0, #2
   1fb30:	movwne	r0, #1
   1fb34:	orr	r0, r0, r1
   1fb38:	tst	r0, #1
   1fb3c:	bne	1fb78 <__assert_fail@plt+0xd80c>
   1fb40:	cmp	r8, r4
   1fb44:	movcc	r0, #39	; 0x27
   1fb48:	strbcc	r0, [r5, r8]
   1fb4c:	add	r0, r8, #1
   1fb50:	cmp	r0, r4
   1fb54:	movcc	r1, #36	; 0x24
   1fb58:	strbcc	r1, [r5, r0]
   1fb5c:	add	r0, r8, #2
   1fb60:	add	r8, r8, #3
   1fb64:	cmp	r0, r4
   1fb68:	movcc	r1, #39	; 0x27
   1fb6c:	strbcc	r1, [r5, r0]
   1fb70:	mov	r0, #1
   1fb74:	str	r0, [fp, #-56]	; 0xffffffc8
   1fb78:	ldr	r1, [fp, #-68]	; 0xffffffbc
   1fb7c:	cmp	r8, r4
   1fb80:	mov	r9, #0
   1fb84:	mov	sl, #1
   1fb88:	mov	r6, #48	; 0x30
   1fb8c:	movcc	r0, #92	; 0x5c
   1fb90:	strbcc	r0, [r5, r8]
   1fb94:	add	r0, r8, #1
   1fb98:	cmp	r1, #2
   1fb9c:	beq	1ff6c <__assert_fail@plt+0xdc00>
   1fba0:	add	r1, r7, #1
   1fba4:	cmp	r1, lr
   1fba8:	bcs	1ff6c <__assert_fail@plt+0xdc00>
   1fbac:	ldrb	r1, [ip, r1]
   1fbb0:	sub	r1, r1, #48	; 0x30
   1fbb4:	uxtb	r1, r1
   1fbb8:	cmp	r1, #9
   1fbbc:	bhi	1ff6c <__assert_fail@plt+0xdc00>
   1fbc0:	cmp	r0, r4
   1fbc4:	movcc	r1, #48	; 0x30
   1fbc8:	strbcc	r1, [r5, r0]
   1fbcc:	add	r0, r8, #2
   1fbd0:	add	r8, r8, #3
   1fbd4:	cmp	r0, r4
   1fbd8:	movcc	r1, #48	; 0x30
   1fbdc:	strbcc	r1, [r5, r0]
   1fbe0:	b	1f994 <__assert_fail@plt+0xd628>
   1fbe4:	ldr	r0, [fp, #-68]	; 0xffffffbc
   1fbe8:	mov	sl, #0
   1fbec:	mov	r6, #63	; 0x3f
   1fbf0:	cmp	r0, #5
   1fbf4:	beq	1ff74 <__assert_fail@plt+0xdc08>
   1fbf8:	cmp	r0, #2
   1fbfc:	bne	2001c <__assert_fail@plt+0xdcb0>
   1fc00:	ldr	r0, [fp, #-76]	; 0xffffffb4
   1fc04:	mov	r9, #0
   1fc08:	tst	r0, #1
   1fc0c:	beq	1f994 <__assert_fail@plt+0xd628>
   1fc10:	b	202ec <__assert_fail@plt+0xdf80>
   1fc14:	mov	r0, #118	; 0x76
   1fc18:	b	1fd88 <__assert_fail@plt+0xda1c>
   1fc1c:	mov	r0, #1
   1fc20:	mov	r6, #39	; 0x27
   1fc24:	str	r0, [sp, #60]	; 0x3c
   1fc28:	ldr	r0, [fp, #-68]	; 0xffffffbc
   1fc2c:	cmp	r0, #2
   1fc30:	bne	1fdc0 <__assert_fail@plt+0xda54>
   1fc34:	ldr	r0, [fp, #-76]	; 0xffffffb4
   1fc38:	tst	r0, #1
   1fc3c:	bne	202ec <__assert_fail@plt+0xdf80>
   1fc40:	ldr	r2, [sp, #56]	; 0x38
   1fc44:	clz	r1, r4
   1fc48:	mov	sl, #0
   1fc4c:	mov	r9, #1
   1fc50:	lsr	r1, r1, #5
   1fc54:	cmp	r2, #0
   1fc58:	mov	r0, r2
   1fc5c:	movwne	r0, #1
   1fc60:	orrs	r0, r0, r1
   1fc64:	moveq	r2, r4
   1fc68:	moveq	r4, r0
   1fc6c:	cmp	r8, r4
   1fc70:	str	r2, [sp, #56]	; 0x38
   1fc74:	movcc	r0, #39	; 0x27
   1fc78:	strbcc	r0, [r5, r8]
   1fc7c:	add	r0, r8, #1
   1fc80:	cmp	r0, r4
   1fc84:	movcc	r1, #92	; 0x5c
   1fc88:	strbcc	r1, [r5, r0]
   1fc8c:	add	r0, r8, #2
   1fc90:	add	r8, r8, #3
   1fc94:	cmp	r0, r4
   1fc98:	movcc	r1, #39	; 0x27
   1fc9c:	strbcc	r1, [r5, r0]
   1fca0:	mov	r0, #0
   1fca4:	str	r0, [fp, #-56]	; 0xffffffc8
   1fca8:	b	1f994 <__assert_fail@plt+0xd628>
   1fcac:	ldr	r0, [sp, #40]	; 0x28
   1fcb0:	str	r4, [sp, #88]	; 0x58
   1fcb4:	cmp	r0, #1
   1fcb8:	bne	1fdc8 <__assert_fail@plt+0xda5c>
   1fcbc:	str	lr, [sp, #28]
   1fcc0:	bl	12144 <__ctype_b_loc@plt>
   1fcc4:	ldr	r0, [r0]
   1fcc8:	ldr	ip, [fp, #-80]	; 0xffffffb0
   1fccc:	mov	r2, #1
   1fcd0:	add	r0, r0, r6, lsl #1
   1fcd4:	ldrb	r0, [r0, #1]
   1fcd8:	ubfx	r9, r0, #6, #1
   1fcdc:	ldr	r0, [sp, #52]	; 0x34
   1fce0:	cmp	r2, #1
   1fce4:	orr	r0, r9, r0
   1fce8:	bhi	20024 <__assert_fail@plt+0xdcb8>
   1fcec:	tst	r0, #1
   1fcf0:	beq	20024 <__assert_fail@plt+0xdcb8>
   1fcf4:	ldr	lr, [sp, #28]
   1fcf8:	ldr	r4, [sp, #88]	; 0x58
   1fcfc:	b	1f994 <__assert_fail@plt+0xd628>
   1fd00:	ldr	r1, [sp, #48]	; 0x30
   1fd04:	mov	sl, #0
   1fd08:	mov	r0, #92	; 0x5c
   1fd0c:	cmp	r1, #0
   1fd10:	beq	1fd88 <__assert_fail@plt+0xda1c>
   1fd14:	mov	r6, #92	; 0x5c
   1fd18:	mov	r9, #0
   1fd1c:	cmp	sl, #0
   1fd20:	bne	1fd58 <__assert_fail@plt+0xd9ec>
   1fd24:	ldr	r0, [fp, #-56]	; 0xffffffc8
   1fd28:	tst	r0, #1
   1fd2c:	beq	1fd58 <__assert_fail@plt+0xd9ec>
   1fd30:	cmp	r8, r4
   1fd34:	movcc	r0, #39	; 0x27
   1fd38:	strbcc	r0, [r5, r8]
   1fd3c:	add	r0, r8, #1
   1fd40:	add	r8, r8, #2
   1fd44:	cmp	r0, r4
   1fd48:	movcc	r1, #39	; 0x27
   1fd4c:	strbcc	r1, [r5, r0]
   1fd50:	mov	r0, #0
   1fd54:	str	r0, [fp, #-56]	; 0xffffffc8
   1fd58:	mov	r1, r9
   1fd5c:	mov	r0, r6
   1fd60:	cmp	r8, r4
   1fd64:	strbcc	r0, [r5, r8]
   1fd68:	ldr	r0, [fp, #-48]	; 0xffffffd0
   1fd6c:	add	r8, r8, #1
   1fd70:	and	r0, r0, r1
   1fd74:	str	r0, [fp, #-48]	; 0xffffffd0
   1fd78:	add	r7, r7, #1
   1fd7c:	cmn	lr, #1
   1fd80:	bne	1f6c0 <__assert_fail@plt+0xd354>
   1fd84:	b	1f6cc <__assert_fail@plt+0xd360>
   1fd88:	ldr	r1, [sp, #84]	; 0x54
   1fd8c:	mov	sl, #0
   1fd90:	mov	r9, #0
   1fd94:	tst	r1, #1
   1fd98:	mov	r1, #0
   1fd9c:	beq	1f994 <__assert_fail@plt+0xd628>
   1fda0:	b	1f9dc <__assert_fail@plt+0xd670>
   1fda4:	ldr	r0, [sp, #36]	; 0x24
   1fda8:	mov	r6, #0
   1fdac:	mov	sl, #0
   1fdb0:	mov	r9, #0
   1fdb4:	cmp	r0, #0
   1fdb8:	beq	1f994 <__assert_fail@plt+0xd628>
   1fdbc:	b	1fd78 <__assert_fail@plt+0xda0c>
   1fdc0:	mov	r9, #1
   1fdc4:	b	1f994 <__assert_fail@plt+0xd628>
   1fdc8:	mov	r0, #0
   1fdcc:	cmn	lr, #1
   1fdd0:	sub	r4, fp, #40	; 0x28
   1fdd4:	str	r0, [fp, #-36]	; 0xffffffdc
   1fdd8:	str	r0, [fp, #-40]	; 0xffffffd8
   1fddc:	bne	1fdf0 <__assert_fail@plt+0xda84>
   1fde0:	mov	r0, ip
   1fde4:	bl	12174 <strlen@plt>
   1fde8:	ldr	ip, [fp, #-80]	; 0xffffffb0
   1fdec:	mov	lr, r0
   1fdf0:	ldr	r0, [sp, #72]	; 0x48
   1fdf4:	mov	r9, #1
   1fdf8:	mov	r2, #0
   1fdfc:	str	lr, [sp, #28]
   1fe00:	add	r0, r0, r7
   1fe04:	str	r0, [sp, #20]
   1fe08:	b	1fe4c <__assert_fail@plt+0xdae0>
   1fe0c:	ldr	r5, [sp, #44]	; 0x2c
   1fe10:	add	r5, r0, r5
   1fe14:	ldr	r0, [fp, #-44]	; 0xffffffd4
   1fe18:	bl	1200c <iswprint@plt>
   1fe1c:	cmp	r0, #0
   1fe20:	sub	r4, fp, #40	; 0x28
   1fe24:	movwne	r0, #1
   1fe28:	and	r9, r9, r0
   1fe2c:	mov	r0, r4
   1fe30:	bl	11f1c <mbsinit@plt>
   1fe34:	mov	r2, r5
   1fe38:	ldr	lr, [sp, #28]
   1fe3c:	ldr	r5, [fp, #-84]	; 0xffffffac
   1fe40:	ldr	ip, [fp, #-80]	; 0xffffffb0
   1fe44:	cmp	r0, #0
   1fe48:	bne	1fcdc <__assert_fail@plt+0xd970>
   1fe4c:	add	r0, r2, r7
   1fe50:	str	r2, [sp, #44]	; 0x2c
   1fe54:	mov	r3, r4
   1fe58:	add	r1, ip, r0
   1fe5c:	str	r0, [sp, #24]
   1fe60:	sub	r2, lr, r0
   1fe64:	sub	r0, fp, #44	; 0x2c
   1fe68:	bl	24514 <__assert_fail@plt+0x121a8>
   1fe6c:	cmp	r0, #0
   1fe70:	beq	20214 <__assert_fail@plt+0xdea8>
   1fe74:	cmn	r0, #1
   1fe78:	beq	201d0 <__assert_fail@plt+0xde64>
   1fe7c:	ldr	lr, [sp, #28]
   1fe80:	cmn	r0, #2
   1fe84:	beq	201d8 <__assert_fail@plt+0xde6c>
   1fe88:	ldr	r2, [sp, #64]	; 0x40
   1fe8c:	ldr	r4, [sp, #88]	; 0x58
   1fe90:	ldr	ip, [sp, #84]	; 0x54
   1fe94:	cmp	r0, #2
   1fe98:	mov	r1, #0
   1fe9c:	movwcc	r1, #1
   1fea0:	eor	r2, r2, #1
   1fea4:	orrs	r1, r2, r1
   1fea8:	bne	1fe0c <__assert_fail@plt+0xdaa0>
   1feac:	ldr	r1, [sp, #44]	; 0x2c
   1feb0:	ldr	r2, [sp, #20]
   1feb4:	add	r1, r2, r1
   1feb8:	sub	r2, r0, #1
   1febc:	b	1fecc <__assert_fail@plt+0xdb60>
   1fec0:	add	r1, r1, #1
   1fec4:	subs	r2, r2, #1
   1fec8:	beq	1fe0c <__assert_fail@plt+0xdaa0>
   1fecc:	ldrb	r3, [r1]
   1fed0:	sub	r3, r3, #91	; 0x5b
   1fed4:	cmp	r3, #33	; 0x21
   1fed8:	bhi	1fec0 <__assert_fail@plt+0xdb54>
   1fedc:	add	r5, pc, #0
   1fee0:	ldr	pc, [r5, r3, lsl #2]
   1fee4:	andeq	r0, r2, r8, asr #5
   1fee8:	andeq	r0, r2, r8, asr #5
   1feec:	andeq	pc, r1, r0, asr #29
   1fef0:	andeq	r0, r2, r8, asr #5
   1fef4:	andeq	pc, r1, r0, asr #29
   1fef8:	andeq	r0, r2, r8, asr #5
   1fefc:	andeq	pc, r1, r0, asr #29
   1ff00:	andeq	pc, r1, r0, asr #29
   1ff04:	andeq	pc, r1, r0, asr #29
   1ff08:	andeq	pc, r1, r0, asr #29
   1ff0c:	andeq	pc, r1, r0, asr #29
   1ff10:	andeq	pc, r1, r0, asr #29
   1ff14:	andeq	pc, r1, r0, asr #29
   1ff18:	andeq	pc, r1, r0, asr #29
   1ff1c:	andeq	pc, r1, r0, asr #29
   1ff20:	andeq	pc, r1, r0, asr #29
   1ff24:	andeq	pc, r1, r0, asr #29
   1ff28:	andeq	pc, r1, r0, asr #29
   1ff2c:	andeq	pc, r1, r0, asr #29
   1ff30:	andeq	pc, r1, r0, asr #29
   1ff34:	andeq	pc, r1, r0, asr #29
   1ff38:	andeq	pc, r1, r0, asr #29
   1ff3c:	andeq	pc, r1, r0, asr #29
   1ff40:	andeq	pc, r1, r0, asr #29
   1ff44:	andeq	pc, r1, r0, asr #29
   1ff48:	andeq	pc, r1, r0, asr #29
   1ff4c:	andeq	pc, r1, r0, asr #29
   1ff50:	andeq	pc, r1, r0, asr #29
   1ff54:	andeq	pc, r1, r0, asr #29
   1ff58:	andeq	pc, r1, r0, asr #29
   1ff5c:	andeq	pc, r1, r0, asr #29
   1ff60:	andeq	pc, r1, r0, asr #29
   1ff64:	andeq	pc, r1, r0, asr #29
   1ff68:	andeq	r0, r2, r8, asr #5
   1ff6c:	mov	r8, r0
   1ff70:	b	1f994 <__assert_fail@plt+0xd628>
   1ff74:	ldr	r0, [sp, #32]
   1ff78:	cmp	r0, #0
   1ff7c:	beq	2001c <__assert_fail@plt+0xdcb0>
   1ff80:	add	r0, r7, #2
   1ff84:	cmp	r0, lr
   1ff88:	bcs	2001c <__assert_fail@plt+0xdcb0>
   1ff8c:	add	r1, r7, ip
   1ff90:	ldrb	r1, [r1, #1]
   1ff94:	cmp	r1, #63	; 0x3f
   1ff98:	bne	2001c <__assert_fail@plt+0xdcb0>
   1ff9c:	ldrb	r9, [ip, r0]
   1ffa0:	sub	r2, r9, #33	; 0x21
   1ffa4:	cmp	r2, #29
   1ffa8:	bhi	2001c <__assert_fail@plt+0xdcb0>
   1ffac:	movw	r1, #20929	; 0x51c1
   1ffb0:	mov	r3, #1
   1ffb4:	movt	r1, #14336	; 0x3800
   1ffb8:	tst	r1, r3, lsl r2
   1ffbc:	beq	2001c <__assert_fail@plt+0xdcb0>
   1ffc0:	ldr	r1, [fp, #-76]	; 0xffffffb4
   1ffc4:	tst	r1, #1
   1ffc8:	bne	202ec <__assert_fail@plt+0xdf80>
   1ffcc:	cmp	r8, r4
   1ffd0:	add	r2, r8, #1
   1ffd4:	mov	r6, r9
   1ffd8:	mov	r7, r0
   1ffdc:	mov	r9, #0
   1ffe0:	movcc	r1, #63	; 0x3f
   1ffe4:	strbcc	r1, [r5, r8]
   1ffe8:	cmp	r2, r4
   1ffec:	movcc	r1, #34	; 0x22
   1fff0:	strbcc	r1, [r5, r2]
   1fff4:	add	r2, r8, #2
   1fff8:	cmp	r2, r4
   1fffc:	movcc	r1, #34	; 0x22
   20000:	strbcc	r1, [r5, r2]
   20004:	add	r2, r8, #3
   20008:	add	r8, r8, #4
   2000c:	cmp	r2, r4
   20010:	movcc	r1, #63	; 0x3f
   20014:	strbcc	r1, [r5, r2]
   20018:	b	1f994 <__assert_fail@plt+0xd628>
   2001c:	mov	r9, #0
   20020:	b	1f994 <__assert_fail@plt+0xd628>
   20024:	ldr	lr, [sp, #28]
   20028:	ldr	r4, [fp, #-56]	; 0xffffffc8
   2002c:	add	r1, r2, r7
   20030:	mov	r2, #0
   20034:	str	r1, [sp, #44]	; 0x2c
   20038:	tst	r0, #1
   2003c:	bne	20158 <__assert_fail@plt+0xddec>
   20040:	ldr	r1, [fp, #-76]	; 0xffffffb4
   20044:	tst	r1, #1
   20048:	bne	202e8 <__assert_fail@plt+0xdf7c>
   2004c:	ldr	r1, [fp, #-68]	; 0xffffffbc
   20050:	subs	r2, r1, #2
   20054:	movwne	r2, #1
   20058:	orr	r2, r2, r4
   2005c:	tst	r2, #1
   20060:	bne	200a4 <__assert_fail@plt+0xdd38>
   20064:	ldr	r1, [sp, #88]	; 0x58
   20068:	add	r2, r8, #1
   2006c:	mov	r4, #1
   20070:	cmp	r8, r1
   20074:	movcc	r1, #39	; 0x27
   20078:	strbcc	r1, [r5, r8]
   2007c:	ldr	r1, [sp, #88]	; 0x58
   20080:	cmp	r2, r1
   20084:	movcc	r1, #36	; 0x24
   20088:	strbcc	r1, [r5, r2]
   2008c:	ldr	r1, [sp, #88]	; 0x58
   20090:	add	r2, r8, #2
   20094:	add	r8, r8, #3
   20098:	cmp	r2, r1
   2009c:	movcc	r1, #39	; 0x27
   200a0:	strbcc	r1, [r5, r2]
   200a4:	ldr	r1, [sp, #88]	; 0x58
   200a8:	add	r2, r8, #1
   200ac:	cmp	r8, r1
   200b0:	movcc	r1, #92	; 0x5c
   200b4:	strbcc	r1, [r5, r8]
   200b8:	ldr	r1, [sp, #88]	; 0x58
   200bc:	cmp	r2, r1
   200c0:	bcs	200d4 <__assert_fail@plt+0xdd68>
   200c4:	uxtb	r3, r6
   200c8:	mov	r1, #48	; 0x30
   200cc:	orr	r3, r1, r3, lsr #6
   200d0:	strb	r3, [r5, r2]
   200d4:	ldr	r1, [sp, #88]	; 0x58
   200d8:	add	r2, r8, #2
   200dc:	add	r8, r8, #3
   200e0:	cmp	r2, r1
   200e4:	lsrcc	r3, r6, #3
   200e8:	movcc	r1, #6
   200ec:	bficc	r3, r1, #3, #29
   200f0:	mov	r1, #6
   200f4:	bfi	r6, r1, #3, #29
   200f8:	strbcc	r3, [r5, r2]
   200fc:	mov	r2, #1
   20100:	b	20180 <__assert_fail@plt+0xde14>
   20104:	ldr	r1, [sp, #88]	; 0x58
   20108:	ldr	r5, [fp, #-84]	; 0xffffffac
   2010c:	ldr	r4, [sp, #88]	; 0x58
   20110:	cmp	r8, r1
   20114:	movcc	r1, #39	; 0x27
   20118:	strbcc	r1, [r5, r8]
   2011c:	add	r1, r8, #1
   20120:	add	r8, r8, #2
   20124:	cmp	r1, r4
   20128:	movcc	r4, #39	; 0x27
   2012c:	strbcc	r4, [r5, r1]
   20130:	mov	r4, #0
   20134:	ldr	r1, [sp, #88]	; 0x58
   20138:	cmp	r8, r1
   2013c:	ldr	r1, [sp, #72]	; 0x48
   20140:	strbcc	r6, [r5, r8]
   20144:	add	r8, r8, #1
   20148:	ldrb	r6, [r1, r7]
   2014c:	mov	r7, r3
   20150:	tst	r0, #1
   20154:	beq	20040 <__assert_fail@plt+0xdcd4>
   20158:	ldr	r1, [fp, #-52]	; 0xffffffcc
   2015c:	tst	r1, #1
   20160:	beq	20178 <__assert_fail@plt+0xde0c>
   20164:	ldr	r1, [sp, #88]	; 0x58
   20168:	cmp	r8, r1
   2016c:	movcc	r1, #92	; 0x5c
   20170:	strbcc	r1, [r5, r8]
   20174:	add	r8, r8, #1
   20178:	mov	r1, #0
   2017c:	str	r1, [fp, #-52]	; 0xffffffcc
   20180:	ldr	r1, [sp, #44]	; 0x2c
   20184:	add	r3, r7, #1
   20188:	and	sl, r2, #1
   2018c:	cmp	r1, r3
   20190:	bls	201b4 <__assert_fail@plt+0xde48>
   20194:	cmp	sl, #0
   20198:	mvn	r5, r4
   2019c:	movwne	sl, #1
   201a0:	orr	r5, r5, sl
   201a4:	tst	r5, #1
   201a8:	beq	20104 <__assert_fail@plt+0xdd98>
   201ac:	ldr	r5, [fp, #-84]	; 0xffffffac
   201b0:	b	20134 <__assert_fail@plt+0xddc8>
   201b4:	str	r4, [fp, #-56]	; 0xffffffc8
   201b8:	ldr	r4, [sp, #88]	; 0x58
   201bc:	cmp	sl, #0
   201c0:	movwne	sl, #1
   201c4:	cmp	sl, #0
   201c8:	beq	1fd24 <__assert_fail@plt+0xd9b8>
   201cc:	b	1fd58 <__assert_fail@plt+0xd9ec>
   201d0:	mov	r9, #0
   201d4:	b	20214 <__assert_fail@plt+0xdea8>
   201d8:	ldr	r0, [sp, #24]
   201dc:	mov	r9, #0
   201e0:	cmp	lr, r0
   201e4:	bls	20214 <__assert_fail@plt+0xdea8>
   201e8:	ldr	ip, [fp, #-80]	; 0xffffffb0
   201ec:	ldr	r2, [sp, #44]	; 0x2c
   201f0:	add	r0, ip, r7
   201f4:	ldrb	r1, [r0, r2]
   201f8:	cmp	r1, #0
   201fc:	beq	1fcdc <__assert_fail@plt+0xd970>
   20200:	add	r2, r2, #1
   20204:	add	r1, r7, r2
   20208:	cmp	r1, lr
   2020c:	bcc	201f4 <__assert_fail@plt+0xde88>
   20210:	b	1fcdc <__assert_fail@plt+0xd970>
   20214:	ldr	ip, [fp, #-80]	; 0xffffffb0
   20218:	ldr	r2, [sp, #44]	; 0x2c
   2021c:	b	1fcdc <__assert_fail@plt+0xd970>
   20220:	mov	lr, r7
   20224:	b	2022c <__assert_fail@plt+0xdec0>
   20228:	mvn	lr, #0
   2022c:	ldr	r1, [fp, #-68]	; 0xffffffbc
   20230:	ldr	r2, [fp, #-76]	; 0xffffffb4
   20234:	eor	r0, r1, #2
   20238:	orr	r0, r0, r8
   2023c:	clz	r0, r0
   20240:	lsr	r0, r0, #5
   20244:	tst	r2, r0
   20248:	bne	202ec <__assert_fail@plt+0xdf80>
   2024c:	subs	r0, r1, #2
   20250:	movwne	r0, #1
   20254:	orr	r0, r2, r0
   20258:	tst	r0, #1
   2025c:	ldreq	r0, [sp, #60]	; 0x3c
   20260:	eoreq	r0, r0, #1
   20264:	tsteq	r0, #1
   20268:	bne	20380 <__assert_fail@plt+0xe014>
   2026c:	ldr	r0, [fp, #-48]	; 0xffffffd0
   20270:	mov	sl, lr
   20274:	tst	r0, #1
   20278:	bne	2034c <__assert_fail@plt+0xdfe0>
   2027c:	ldr	r6, [sp, #56]	; 0x38
   20280:	mov	r9, #0
   20284:	cmp	r6, #0
   20288:	beq	20378 <__assert_fail@plt+0xe00c>
   2028c:	ldr	r0, [sp, #84]	; 0x54
   20290:	mov	r1, #0
   20294:	mov	r7, #2
   20298:	cmp	r4, #0
   2029c:	str	r1, [fp, #-48]	; 0xffffffd0
   202a0:	mov	r1, #0
   202a4:	str	r1, [fp, #-76]	; 0xffffffb4
   202a8:	beq	1f448 <__assert_fail@plt+0xd0dc>
   202ac:	b	20380 <__assert_fail@plt+0xe014>
   202b0:	ldr	ip, [fp, #-80]	; 0xffffffb0
   202b4:	ldr	r1, [fp, #12]
   202b8:	ldr	r2, [fp, #-68]	; 0xffffffbc
   202bc:	mov	lr, r4
   202c0:	mov	r4, r6
   202c4:	b	2030c <__assert_fail@plt+0xdfa0>
   202c8:	tst	ip, #1
   202cc:	ldr	r5, [fp, #-84]	; 0xffffffac
   202d0:	ldr	ip, [fp, #-80]	; 0xffffffb0
   202d4:	ldr	r1, [fp, #12]
   202d8:	mov	r0, #2
   202dc:	movwne	r0, #4
   202e0:	mov	r2, r0
   202e4:	b	2030c <__assert_fail@plt+0xdfa0>
   202e8:	ldr	r4, [sp, #88]	; 0x58
   202ec:	ldr	r1, [sp, #84]	; 0x54
   202f0:	mov	r0, #2
   202f4:	tst	r1, #1
   202f8:	movwne	r0, #4
   202fc:	ldr	r2, [fp, #-68]	; 0xffffffbc
   20300:	ldr	r1, [fp, #12]
   20304:	cmp	r2, #2
   20308:	moveq	r2, r0
   2030c:	mov	r0, #0
   20310:	bic	r1, r1, #2
   20314:	str	r2, [sp]
   20318:	mov	r2, ip
   2031c:	mov	r3, lr
   20320:	str	r0, [sp, #8]
   20324:	ldr	r0, [sp, #76]	; 0x4c
   20328:	str	r1, [sp, #4]
   2032c:	mov	r1, r4
   20330:	str	r0, [sp, #12]
   20334:	ldr	r0, [sp, #80]	; 0x50
   20338:	str	r0, [sp, #16]
   2033c:	mov	r0, r5
   20340:	bl	1f3b8 <__assert_fail@plt+0xd04c>
   20344:	mov	r8, r0
   20348:	b	203cc <__assert_fail@plt+0xe060>
   2034c:	mov	r0, #5
   20350:	ldr	r1, [sp, #56]	; 0x38
   20354:	ldr	r2, [fp, #-80]	; 0xffffffb0
   20358:	mov	r3, sl
   2035c:	str	r0, [sp]
   20360:	ldr	r0, [fp, #12]
   20364:	str	r0, [sp, #4]
   20368:	ldr	r0, [fp, #16]
   2036c:	str	r0, [sp, #8]
   20370:	ldr	r0, [sp, #76]	; 0x4c
   20374:	b	20330 <__assert_fail@plt+0xdfc4>
   20378:	mov	r0, #0
   2037c:	str	r0, [fp, #-76]	; 0xffffffb4
   20380:	ldr	r1, [fp, #-88]	; 0xffffffa8
   20384:	cmp	r1, #0
   20388:	beq	203c0 <__assert_fail@plt+0xe054>
   2038c:	ldr	r0, [fp, #-76]	; 0xffffffb4
   20390:	tst	r0, #1
   20394:	bne	203c0 <__assert_fail@plt+0xe054>
   20398:	ldrb	r0, [r1]
   2039c:	cmp	r0, #0
   203a0:	beq	203c0 <__assert_fail@plt+0xe054>
   203a4:	add	r1, r1, #1
   203a8:	cmp	r8, r4
   203ac:	strbcc	r0, [r5, r8]
   203b0:	add	r8, r8, #1
   203b4:	ldrb	r0, [r1], #1
   203b8:	cmp	r0, #0
   203bc:	bne	203a8 <__assert_fail@plt+0xe03c>
   203c0:	cmp	r8, r4
   203c4:	movcc	r0, #0
   203c8:	strbcc	r0, [r5, r8]
   203cc:	mov	r0, r8
   203d0:	sub	sp, fp, #28
   203d4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   203d8:	mov	r0, #4
   203dc:	b	202fc <__assert_fail@plt+0xdf90>
   203e0:	bl	12348 <abort@plt>
   203e4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   203e8:	add	fp, sp, #28
   203ec:	sub	sp, sp, #28
   203f0:	movw	r5, #35032	; 0x88d8
   203f4:	cmp	r2, #0
   203f8:	mov	r4, r1
   203fc:	mov	r7, r0
   20400:	str	r0, [sp, #20]
   20404:	movt	r5, #3
   20408:	movne	r5, r2
   2040c:	bl	12198 <__errno_location@plt>
   20410:	mov	sl, r0
   20414:	ldr	r2, [r5, #40]	; 0x28
   20418:	ldr	r3, [r5, #44]	; 0x2c
   2041c:	ldm	r5, {r0, r1}
   20420:	orr	r8, r1, #1
   20424:	add	r9, r5, #8
   20428:	mov	r1, #0
   2042c:	ldr	r6, [sl]
   20430:	stm	sp, {r0, r8, r9}
   20434:	mov	r0, #0
   20438:	str	r2, [sp, #12]
   2043c:	str	r3, [sp, #16]
   20440:	mov	r2, r7
   20444:	mov	r3, r4
   20448:	str	r6, [sp, #24]
   2044c:	mov	r6, r4
   20450:	bl	1f3b8 <__assert_fail@plt+0xd04c>
   20454:	add	r7, r0, #1
   20458:	mov	r0, r7
   2045c:	bl	22750 <__assert_fail@plt+0x103e4>
   20460:	mov	r4, r0
   20464:	ldr	r0, [r5]
   20468:	ldr	r2, [r5, #44]	; 0x2c
   2046c:	ldr	r1, [r5, #40]	; 0x28
   20470:	mov	r3, r6
   20474:	stm	sp, {r0, r8, r9}
   20478:	str	r2, [sp, #16]
   2047c:	ldr	r2, [sp, #20]
   20480:	str	r1, [sp, #12]
   20484:	mov	r0, r4
   20488:	mov	r1, r7
   2048c:	bl	1f3b8 <__assert_fail@plt+0xd04c>
   20490:	ldr	r0, [sp, #24]
   20494:	str	r0, [sl]
   20498:	mov	r0, r4
   2049c:	sub	sp, fp, #28
   204a0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   204a4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   204a8:	add	fp, sp, #28
   204ac:	sub	sp, sp, #36	; 0x24
   204b0:	movw	r8, #35032	; 0x88d8
   204b4:	cmp	r3, #0
   204b8:	mov	r4, r2
   204bc:	str	r2, [sp, #24]
   204c0:	mov	r5, r1
   204c4:	mov	r6, r0
   204c8:	str	r0, [sp, #20]
   204cc:	movt	r8, #3
   204d0:	movne	r8, r3
   204d4:	bl	12198 <__errno_location@plt>
   204d8:	str	r0, [sp, #28]
   204dc:	ldr	r1, [r8, #40]	; 0x28
   204e0:	ldr	r2, [r8, #44]	; 0x2c
   204e4:	ldr	r7, [r0]
   204e8:	cmp	r4, #0
   204ec:	add	sl, r8, #8
   204f0:	mov	r0, #0
   204f4:	ldm	r8, {r3, r9}
   204f8:	orreq	r9, r9, #1
   204fc:	stm	sp, {r3, r9, sl}
   20500:	str	r1, [sp, #12]
   20504:	str	r2, [sp, #16]
   20508:	mov	r1, #0
   2050c:	mov	r2, r6
   20510:	mov	r3, r5
   20514:	str	r7, [sp, #32]
   20518:	mov	r7, r5
   2051c:	bl	1f3b8 <__assert_fail@plt+0xd04c>
   20520:	add	r4, r0, #1
   20524:	mov	r5, r0
   20528:	mov	r0, r4
   2052c:	bl	22750 <__assert_fail@plt+0x103e4>
   20530:	mov	r6, r0
   20534:	ldr	r0, [r8]
   20538:	ldr	r2, [r8, #44]	; 0x2c
   2053c:	ldr	r1, [r8, #40]	; 0x28
   20540:	mov	r3, r7
   20544:	stm	sp, {r0, r9, sl}
   20548:	str	r2, [sp, #16]
   2054c:	ldr	r2, [sp, #20]
   20550:	str	r1, [sp, #12]
   20554:	mov	r0, r6
   20558:	mov	r1, r4
   2055c:	bl	1f3b8 <__assert_fail@plt+0xd04c>
   20560:	ldr	r0, [sp, #24]
   20564:	ldr	r1, [sp, #32]
   20568:	ldr	r2, [sp, #28]
   2056c:	cmp	r0, #0
   20570:	str	r1, [r2]
   20574:	strne	r5, [r0]
   20578:	mov	r0, r6
   2057c:	sub	sp, fp, #28
   20580:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20584:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   20588:	add	fp, sp, #24
   2058c:	movw	r5, #33404	; 0x827c
   20590:	movw	r8, #33400	; 0x8278
   20594:	movt	r5, #3
   20598:	movt	r8, #3
   2059c:	ldr	r0, [r5]
   205a0:	ldr	r4, [r8]
   205a4:	cmp	r0, #2
   205a8:	blt	205d4 <__assert_fail@plt+0xe268>
   205ac:	add	r7, r4, #12
   205b0:	mov	r6, #0
   205b4:	ldr	r0, [r7, r6, lsl #3]
   205b8:	bl	1d148 <__assert_fail@plt+0xaddc>
   205bc:	ldr	r1, [r5]
   205c0:	add	r2, r6, #2
   205c4:	add	r0, r6, #1
   205c8:	mov	r6, r0
   205cc:	cmp	r2, r1
   205d0:	blt	205b4 <__assert_fail@plt+0xe248>
   205d4:	ldr	r0, [r4, #4]
   205d8:	movw	r9, #35080	; 0x8908
   205dc:	movw	r7, #33408	; 0x8280
   205e0:	movt	r9, #3
   205e4:	movt	r7, #3
   205e8:	cmp	r0, r9
   205ec:	beq	205fc <__assert_fail@plt+0xe290>
   205f0:	bl	1d148 <__assert_fail@plt+0xaddc>
   205f4:	mov	r0, #256	; 0x100
   205f8:	stm	r7, {r0, r9}
   205fc:	cmp	r4, r7
   20600:	beq	20610 <__assert_fail@plt+0xe2a4>
   20604:	mov	r0, r4
   20608:	bl	1d148 <__assert_fail@plt+0xaddc>
   2060c:	str	r7, [r8]
   20610:	mov	r0, #1
   20614:	str	r0, [r5]
   20618:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   2061c:	movw	r3, #35032	; 0x88d8
   20620:	mvn	r2, #0
   20624:	movt	r3, #3
   20628:	b	2062c <__assert_fail@plt+0xe2c0>
   2062c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20630:	add	fp, sp, #28
   20634:	sub	sp, sp, #44	; 0x2c
   20638:	mov	r7, r3
   2063c:	str	r2, [sp, #36]	; 0x24
   20640:	str	r1, [sp, #32]
   20644:	mov	r5, r0
   20648:	bl	12198 <__errno_location@plt>
   2064c:	cmp	r5, #0
   20650:	bmi	207c0 <__assert_fail@plt+0xe454>
   20654:	cmn	r5, #-2147483647	; 0x80000001
   20658:	beq	207c0 <__assert_fail@plt+0xe454>
   2065c:	movw	r8, #33404	; 0x827c
   20660:	movw	r4, #33400	; 0x8278
   20664:	str	r0, [sp, #28]
   20668:	ldr	r0, [r0]
   2066c:	movt	r8, #3
   20670:	movt	r4, #3
   20674:	ldr	r1, [r8]
   20678:	ldr	r6, [r4]
   2067c:	str	r0, [sp, #24]
   20680:	cmp	r1, r5
   20684:	ble	20690 <__assert_fail@plt+0xe324>
   20688:	mov	sl, r6
   2068c:	b	206fc <__assert_fail@plt+0xe390>
   20690:	movw	r9, #33408	; 0x8280
   20694:	mov	r0, #8
   20698:	str	r1, [fp, #-32]	; 0xffffffe0
   2069c:	sub	r1, r5, r1
   206a0:	mvn	r3, #-2147483648	; 0x80000000
   206a4:	movt	r9, #3
   206a8:	str	r0, [sp]
   206ac:	add	r2, r1, #1
   206b0:	sub	r1, fp, #32
   206b4:	subs	r0, r6, r9
   206b8:	movne	r0, r6
   206bc:	bl	22950 <__assert_fail@plt+0x105e4>
   206c0:	mov	sl, r0
   206c4:	cmp	r6, r9
   206c8:	str	r0, [r4]
   206cc:	bne	206d8 <__assert_fail@plt+0xe36c>
   206d0:	ldrd	r0, [r9]
   206d4:	stm	sl, {r0, r1}
   206d8:	ldr	r1, [r8]
   206dc:	ldr	r2, [fp, #-32]	; 0xffffffe0
   206e0:	add	r0, sl, r1, lsl #3
   206e4:	sub	r1, r2, r1
   206e8:	lsl	r2, r1, #3
   206ec:	mov	r1, #0
   206f0:	bl	121bc <memset@plt>
   206f4:	ldr	r0, [fp, #-32]	; 0xffffffe0
   206f8:	str	r0, [r8]
   206fc:	mov	r9, sl
   20700:	ldm	r7, {r0, r1}
   20704:	orr	r8, r1, #1
   20708:	add	r1, r7, #8
   2070c:	ldr	r2, [r7, #40]	; 0x28
   20710:	ldr	r3, [r7, #44]	; 0x2c
   20714:	ldr	r6, [r9, r5, lsl #3]!
   20718:	str	r1, [sp, #20]
   2071c:	ldr	r4, [r9, #4]!
   20720:	stm	sp, {r0, r8}
   20724:	add	r0, sp, #8
   20728:	stm	r0, {r1, r2, r3}
   2072c:	ldr	r2, [sp, #32]
   20730:	ldr	r3, [sp, #36]	; 0x24
   20734:	mov	r1, r6
   20738:	mov	r0, r4
   2073c:	bl	1f3b8 <__assert_fail@plt+0xd04c>
   20740:	cmp	r6, r0
   20744:	bhi	207a8 <__assert_fail@plt+0xe43c>
   20748:	add	r6, r0, #1
   2074c:	movw	r0, #35080	; 0x8908
   20750:	movt	r0, #3
   20754:	str	r6, [sl, r5, lsl #3]
   20758:	cmp	r4, r0
   2075c:	beq	20768 <__assert_fail@plt+0xe3fc>
   20760:	mov	r0, r4
   20764:	bl	1d148 <__assert_fail@plt+0xaddc>
   20768:	mov	r0, r6
   2076c:	bl	22750 <__assert_fail@plt+0x103e4>
   20770:	str	r0, [r9]
   20774:	mov	r4, r0
   20778:	add	r3, sp, #8
   2077c:	ldr	r0, [r7]
   20780:	ldr	r1, [r7, #40]	; 0x28
   20784:	ldr	r2, [r7, #44]	; 0x2c
   20788:	stm	sp, {r0, r8}
   2078c:	ldr	r0, [sp, #20]
   20790:	stm	r3, {r0, r1, r2}
   20794:	ldr	r2, [sp, #32]
   20798:	ldr	r3, [sp, #36]	; 0x24
   2079c:	mov	r0, r4
   207a0:	mov	r1, r6
   207a4:	bl	1f3b8 <__assert_fail@plt+0xd04c>
   207a8:	ldr	r0, [sp, #28]
   207ac:	ldr	r1, [sp, #24]
   207b0:	str	r1, [r0]
   207b4:	mov	r0, r4
   207b8:	sub	sp, fp, #28
   207bc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   207c0:	bl	12348 <abort@plt>
   207c4:	movw	r3, #35032	; 0x88d8
   207c8:	movt	r3, #3
   207cc:	b	2062c <__assert_fail@plt+0xe2c0>
   207d0:	movw	r3, #35032	; 0x88d8
   207d4:	mov	r1, r0
   207d8:	mov	r0, #0
   207dc:	mvn	r2, #0
   207e0:	movt	r3, #3
   207e4:	b	2062c <__assert_fail@plt+0xe2c0>
   207e8:	movw	r3, #35032	; 0x88d8
   207ec:	mov	r2, r1
   207f0:	mov	r1, r0
   207f4:	mov	r0, #0
   207f8:	movt	r3, #3
   207fc:	b	2062c <__assert_fail@plt+0xe2c0>
   20800:	push	{fp, lr}
   20804:	mov	fp, sp
   20808:	sub	sp, sp, #48	; 0x30
   2080c:	vmov.i32	q8, #0	; 0x00000000
   20810:	mov	ip, #32
   20814:	mov	r3, sp
   20818:	mov	lr, r2
   2081c:	cmp	r1, #10
   20820:	add	r2, r3, #16
   20824:	vst1.64	{d16-d17}, [r3], ip
   20828:	vst1.64	{d16-d17}, [r2]
   2082c:	vst1.64	{d16-d17}, [r3]
   20830:	beq	20850 <__assert_fail@plt+0xe4e4>
   20834:	str	r1, [sp]
   20838:	mov	r3, sp
   2083c:	mov	r1, lr
   20840:	mvn	r2, #0
   20844:	bl	2062c <__assert_fail@plt+0xe2c0>
   20848:	mov	sp, fp
   2084c:	pop	{fp, pc}
   20850:	bl	12348 <abort@plt>
   20854:	push	{r4, sl, fp, lr}
   20858:	add	fp, sp, #8
   2085c:	sub	sp, sp, #48	; 0x30
   20860:	vmov.i32	q8, #0	; 0x00000000
   20864:	mov	ip, r3
   20868:	mov	r3, sp
   2086c:	mov	lr, #32
   20870:	cmp	r1, #10
   20874:	add	r4, r3, #16
   20878:	vst1.64	{d16-d17}, [r3], lr
   2087c:	vst1.64	{d16-d17}, [r4]
   20880:	vst1.64	{d16-d17}, [r3]
   20884:	beq	208a4 <__assert_fail@plt+0xe538>
   20888:	str	r1, [sp]
   2088c:	mov	r1, r2
   20890:	mov	r3, sp
   20894:	mov	r2, ip
   20898:	bl	2062c <__assert_fail@plt+0xe2c0>
   2089c:	sub	sp, fp, #8
   208a0:	pop	{r4, sl, fp, pc}
   208a4:	bl	12348 <abort@plt>
   208a8:	push	{fp, lr}
   208ac:	mov	fp, sp
   208b0:	sub	sp, sp, #48	; 0x30
   208b4:	vmov.i32	q8, #0	; 0x00000000
   208b8:	mov	r3, sp
   208bc:	mov	ip, #32
   208c0:	cmp	r0, #10
   208c4:	add	r2, r3, #16
   208c8:	vst1.64	{d16-d17}, [r3], ip
   208cc:	vst1.64	{d16-d17}, [r2]
   208d0:	vst1.64	{d16-d17}, [r3]
   208d4:	beq	208f4 <__assert_fail@plt+0xe588>
   208d8:	str	r0, [sp]
   208dc:	mov	r3, sp
   208e0:	mov	r0, #0
   208e4:	mvn	r2, #0
   208e8:	bl	2062c <__assert_fail@plt+0xe2c0>
   208ec:	mov	sp, fp
   208f0:	pop	{fp, pc}
   208f4:	bl	12348 <abort@plt>
   208f8:	push	{fp, lr}
   208fc:	mov	fp, sp
   20900:	sub	sp, sp, #48	; 0x30
   20904:	vmov.i32	q8, #0	; 0x00000000
   20908:	mov	r3, sp
   2090c:	mov	ip, #32
   20910:	cmp	r0, #10
   20914:	add	lr, r3, #16
   20918:	vst1.64	{d16-d17}, [r3], ip
   2091c:	vst1.64	{d16-d17}, [lr]
   20920:	vst1.64	{d16-d17}, [r3]
   20924:	beq	20940 <__assert_fail@plt+0xe5d4>
   20928:	str	r0, [sp]
   2092c:	mov	r3, sp
   20930:	mov	r0, #0
   20934:	bl	2062c <__assert_fail@plt+0xe2c0>
   20938:	mov	sp, fp
   2093c:	pop	{fp, pc}
   20940:	bl	12348 <abort@plt>
   20944:	push	{r4, sl, fp, lr}
   20948:	add	fp, sp, #8
   2094c:	sub	sp, sp, #48	; 0x30
   20950:	mov	lr, r0
   20954:	movw	r0, #35032	; 0x88d8
   20958:	mov	ip, r1
   2095c:	mov	r1, #32
   20960:	mov	r4, #1
   20964:	movt	r0, #3
   20968:	add	r3, r0, #16
   2096c:	vld1.64	{d16-d17}, [r0], r1
   20970:	vld1.64	{d20-d21}, [r0]
   20974:	vld1.64	{d18-d19}, [r3]
   20978:	mov	r3, sp
   2097c:	add	r0, r3, #32
   20980:	add	r1, r3, #16
   20984:	vst1.64	{d20-d21}, [r0]
   20988:	mov	r0, #28
   2098c:	vst1.64	{d18-d19}, [r1]
   20990:	mov	r1, r3
   20994:	and	r0, r0, r2, lsr #3
   20998:	and	r2, r2, #31
   2099c:	vst1.64	{d16-d17}, [r1], r0
   209a0:	ldr	r0, [r1, #8]
   209a4:	bic	r4, r4, r0, lsr r2
   209a8:	eor	r0, r0, r4, lsl r2
   209ac:	mov	r2, ip
   209b0:	str	r0, [r1, #8]
   209b4:	mov	r0, #0
   209b8:	mov	r1, lr
   209bc:	bl	2062c <__assert_fail@plt+0xe2c0>
   209c0:	sub	sp, fp, #8
   209c4:	pop	{r4, sl, fp, pc}
   209c8:	push	{fp, lr}
   209cc:	mov	fp, sp
   209d0:	sub	sp, sp, #48	; 0x30
   209d4:	mov	ip, r0
   209d8:	movw	r0, #35032	; 0x88d8
   209dc:	mov	r2, #32
   209e0:	movt	r0, #3
   209e4:	add	r3, r0, #16
   209e8:	vld1.64	{d16-d17}, [r0], r2
   209ec:	vld1.64	{d20-d21}, [r0]
   209f0:	vld1.64	{d18-d19}, [r3]
   209f4:	mov	r3, sp
   209f8:	add	r0, r3, #32
   209fc:	add	r2, r3, #16
   20a00:	vst1.64	{d20-d21}, [r0]
   20a04:	mov	r0, #28
   20a08:	vst1.64	{d18-d19}, [r2]
   20a0c:	mov	r2, r3
   20a10:	and	r0, r0, r1, lsr #3
   20a14:	and	r1, r1, #31
   20a18:	vst1.64	{d16-d17}, [r2], r0
   20a1c:	mov	r0, #1
   20a20:	ldr	lr, [r2, #8]
   20a24:	bic	r0, r0, lr, lsr r1
   20a28:	eor	r0, lr, r0, lsl r1
   20a2c:	mov	r1, ip
   20a30:	str	r0, [r2, #8]
   20a34:	mov	r0, #0
   20a38:	mvn	r2, #0
   20a3c:	bl	2062c <__assert_fail@plt+0xe2c0>
   20a40:	mov	sp, fp
   20a44:	pop	{fp, pc}
   20a48:	push	{fp, lr}
   20a4c:	mov	fp, sp
   20a50:	sub	sp, sp, #48	; 0x30
   20a54:	mov	r1, r0
   20a58:	movw	r0, #35032	; 0x88d8
   20a5c:	mov	r3, #32
   20a60:	movt	r0, #3
   20a64:	add	r2, r0, #16
   20a68:	vld1.64	{d16-d17}, [r0], r3
   20a6c:	mov	r3, sp
   20a70:	vld1.64	{d18-d19}, [r2]
   20a74:	vld1.64	{d20-d21}, [r0]
   20a78:	add	r2, r3, #16
   20a7c:	add	r0, r3, #32
   20a80:	vst1.64	{d18-d19}, [r2]
   20a84:	vst1.64	{d20-d21}, [r0]
   20a88:	mov	r0, #12
   20a8c:	mov	r2, r3
   20a90:	vst1.64	{d16-d17}, [r2], r0
   20a94:	ldr	r0, [r2]
   20a98:	orr	r0, r0, #67108864	; 0x4000000
   20a9c:	str	r0, [r2]
   20aa0:	mov	r0, #0
   20aa4:	mvn	r2, #0
   20aa8:	bl	2062c <__assert_fail@plt+0xe2c0>
   20aac:	mov	sp, fp
   20ab0:	pop	{fp, pc}
   20ab4:	push	{fp, lr}
   20ab8:	mov	fp, sp
   20abc:	sub	sp, sp, #48	; 0x30
   20ac0:	mov	ip, r1
   20ac4:	mov	r1, r0
   20ac8:	movw	r0, #35032	; 0x88d8
   20acc:	mov	r2, #32
   20ad0:	movt	r0, #3
   20ad4:	add	r3, r0, #16
   20ad8:	vld1.64	{d16-d17}, [r0], r2
   20adc:	vld1.64	{d18-d19}, [r3]
   20ae0:	vld1.64	{d20-d21}, [r0]
   20ae4:	mov	r3, sp
   20ae8:	add	r2, r3, #16
   20aec:	add	r0, r3, #32
   20af0:	vst1.64	{d18-d19}, [r2]
   20af4:	vst1.64	{d20-d21}, [r0]
   20af8:	mov	r0, #12
   20afc:	mov	r2, r3
   20b00:	vst1.64	{d16-d17}, [r2], r0
   20b04:	ldr	r0, [r2]
   20b08:	orr	r0, r0, #67108864	; 0x4000000
   20b0c:	str	r0, [r2]
   20b10:	mov	r0, #0
   20b14:	mov	r2, ip
   20b18:	bl	2062c <__assert_fail@plt+0xe2c0>
   20b1c:	mov	sp, fp
   20b20:	pop	{fp, pc}
   20b24:	push	{r4, sl, fp, lr}
   20b28:	add	fp, sp, #8
   20b2c:	sub	sp, sp, #96	; 0x60
   20b30:	vmov.i32	q8, #0	; 0x00000000
   20b34:	mov	ip, r2
   20b38:	mov	r2, sp
   20b3c:	mov	r4, #28
   20b40:	cmp	r1, #10
   20b44:	mov	r3, r2
   20b48:	add	lr, r2, #16
   20b4c:	vst1.64	{d16-d17}, [r3], r4
   20b50:	vst1.64	{d16-d17}, [lr]
   20b54:	vst1.32	{d16-d17}, [r3]
   20b58:	beq	20ba8 <__assert_fail@plt+0xe83c>
   20b5c:	vld1.64	{d16-d17}, [r2], r4
   20b60:	vld1.64	{d18-d19}, [lr]
   20b64:	add	r3, sp, #48	; 0x30
   20b68:	vld1.32	{d20-d21}, [r2]
   20b6c:	add	r2, r3, #20
   20b70:	add	r4, r3, #4
   20b74:	vst1.32	{d18-d19}, [r2]
   20b78:	add	r2, r3, #32
   20b7c:	vst1.32	{d16-d17}, [r4]
   20b80:	vst1.32	{d20-d21}, [r2]
   20b84:	str	r1, [sp, #48]	; 0x30
   20b88:	mvn	r2, #0
   20b8c:	ldr	r1, [sp, #60]	; 0x3c
   20b90:	orr	r1, r1, #67108864	; 0x4000000
   20b94:	str	r1, [sp, #60]	; 0x3c
   20b98:	mov	r1, ip
   20b9c:	bl	2062c <__assert_fail@plt+0xe2c0>
   20ba0:	sub	sp, fp, #8
   20ba4:	pop	{r4, sl, fp, pc}
   20ba8:	bl	12348 <abort@plt>
   20bac:	push	{r4, r5, r6, sl, fp, lr}
   20bb0:	add	fp, sp, #16
   20bb4:	sub	sp, sp, #48	; 0x30
   20bb8:	mov	ip, r3
   20bbc:	movw	r3, #35032	; 0x88d8
   20bc0:	mov	r6, #32
   20bc4:	cmp	r1, #0
   20bc8:	mov	r4, sp
   20bcc:	movt	r3, #3
   20bd0:	cmpne	r2, #0
   20bd4:	add	r5, r4, #16
   20bd8:	add	lr, r3, #16
   20bdc:	vld1.64	{d16-d17}, [r3], r6
   20be0:	vld1.64	{d18-d19}, [lr]
   20be4:	vld1.64	{d20-d21}, [r3]
   20be8:	mov	r3, #10
   20bec:	vst1.64	{d16-d17}, [r4], r6
   20bf0:	vst1.64	{d18-d19}, [r5]
   20bf4:	vst1.64	{d20-d21}, [r4]
   20bf8:	str	r3, [sp]
   20bfc:	bne	20c04 <__assert_fail@plt+0xe898>
   20c00:	bl	12348 <abort@plt>
   20c04:	str	r2, [sp, #44]	; 0x2c
   20c08:	str	r1, [sp, #40]	; 0x28
   20c0c:	mov	r3, sp
   20c10:	mov	r1, ip
   20c14:	mvn	r2, #0
   20c18:	bl	2062c <__assert_fail@plt+0xe2c0>
   20c1c:	sub	sp, fp, #16
   20c20:	pop	{r4, r5, r6, sl, fp, pc}
   20c24:	push	{r4, r5, r6, sl, fp, lr}
   20c28:	add	fp, sp, #16
   20c2c:	sub	sp, sp, #48	; 0x30
   20c30:	mov	lr, r3
   20c34:	movw	r3, #35032	; 0x88d8
   20c38:	mov	r6, #32
   20c3c:	cmp	r1, #0
   20c40:	mov	r4, sp
   20c44:	movt	r3, #3
   20c48:	cmpne	r2, #0
   20c4c:	add	r5, r4, #16
   20c50:	add	ip, r3, #16
   20c54:	vld1.64	{d16-d17}, [r3], r6
   20c58:	vld1.64	{d18-d19}, [ip]
   20c5c:	vld1.64	{d20-d21}, [r3]
   20c60:	mov	r3, #10
   20c64:	vst1.64	{d16-d17}, [r4], r6
   20c68:	vst1.64	{d18-d19}, [r5]
   20c6c:	vst1.64	{d20-d21}, [r4]
   20c70:	str	r3, [sp]
   20c74:	bne	20c7c <__assert_fail@plt+0xe910>
   20c78:	bl	12348 <abort@plt>
   20c7c:	ldr	ip, [fp, #8]
   20c80:	str	r2, [sp, #44]	; 0x2c
   20c84:	str	r1, [sp, #40]	; 0x28
   20c88:	mov	r3, sp
   20c8c:	mov	r1, lr
   20c90:	mov	r2, ip
   20c94:	bl	2062c <__assert_fail@plt+0xe2c0>
   20c98:	sub	sp, fp, #16
   20c9c:	pop	{r4, r5, r6, sl, fp, pc}
   20ca0:	push	{r4, sl, fp, lr}
   20ca4:	add	fp, sp, #8
   20ca8:	sub	sp, sp, #48	; 0x30
   20cac:	movw	r3, #35032	; 0x88d8
   20cb0:	mov	lr, #32
   20cb4:	mov	ip, r2
   20cb8:	cmp	r0, #0
   20cbc:	movt	r3, #3
   20cc0:	cmpne	r1, #0
   20cc4:	add	r2, r3, #16
   20cc8:	vld1.64	{d16-d17}, [r3], lr
   20ccc:	vld1.64	{d20-d21}, [r3]
   20cd0:	vld1.64	{d18-d19}, [r2]
   20cd4:	mov	r2, sp
   20cd8:	add	r4, r2, #16
   20cdc:	vst1.64	{d16-d17}, [r2], lr
   20ce0:	vst1.64	{d20-d21}, [r2]
   20ce4:	mov	r2, #10
   20ce8:	vst1.64	{d18-d19}, [r4]
   20cec:	str	r2, [sp]
   20cf0:	bne	20cf8 <__assert_fail@plt+0xe98c>
   20cf4:	bl	12348 <abort@plt>
   20cf8:	str	r1, [sp, #44]	; 0x2c
   20cfc:	str	r0, [sp, #40]	; 0x28
   20d00:	mov	r3, sp
   20d04:	mov	r0, #0
   20d08:	mov	r1, ip
   20d0c:	mvn	r2, #0
   20d10:	bl	2062c <__assert_fail@plt+0xe2c0>
   20d14:	sub	sp, fp, #8
   20d18:	pop	{r4, sl, fp, pc}
   20d1c:	push	{r4, r5, fp, lr}
   20d20:	add	fp, sp, #8
   20d24:	sub	sp, sp, #48	; 0x30
   20d28:	mov	ip, r3
   20d2c:	movw	r3, #35032	; 0x88d8
   20d30:	mov	r4, #32
   20d34:	mov	lr, r2
   20d38:	cmp	r0, #0
   20d3c:	movt	r3, #3
   20d40:	cmpne	r1, #0
   20d44:	add	r2, r3, #16
   20d48:	vld1.64	{d16-d17}, [r3], r4
   20d4c:	vld1.64	{d20-d21}, [r3]
   20d50:	vld1.64	{d18-d19}, [r2]
   20d54:	mov	r2, sp
   20d58:	add	r5, r2, #16
   20d5c:	vst1.64	{d16-d17}, [r2], r4
   20d60:	vst1.64	{d20-d21}, [r2]
   20d64:	mov	r2, #10
   20d68:	vst1.64	{d18-d19}, [r5]
   20d6c:	str	r2, [sp]
   20d70:	bne	20d78 <__assert_fail@plt+0xea0c>
   20d74:	bl	12348 <abort@plt>
   20d78:	str	r1, [sp, #44]	; 0x2c
   20d7c:	str	r0, [sp, #40]	; 0x28
   20d80:	mov	r3, sp
   20d84:	mov	r0, #0
   20d88:	mov	r1, lr
   20d8c:	mov	r2, ip
   20d90:	bl	2062c <__assert_fail@plt+0xe2c0>
   20d94:	sub	sp, fp, #8
   20d98:	pop	{r4, r5, fp, pc}
   20d9c:	movw	r3, #33416	; 0x8288
   20da0:	movt	r3, #3
   20da4:	b	2062c <__assert_fail@plt+0xe2c0>
   20da8:	movw	r3, #33416	; 0x8288
   20dac:	mov	r2, r1
   20db0:	mov	r1, r0
   20db4:	mov	r0, #0
   20db8:	movt	r3, #3
   20dbc:	b	2062c <__assert_fail@plt+0xe2c0>
   20dc0:	movw	r3, #33416	; 0x8288
   20dc4:	mvn	r2, #0
   20dc8:	movt	r3, #3
   20dcc:	b	2062c <__assert_fail@plt+0xe2c0>
   20dd0:	movw	r3, #33416	; 0x8288
   20dd4:	mov	r1, r0
   20dd8:	mov	r0, #0
   20ddc:	mvn	r2, #0
   20de0:	movt	r3, #3
   20de4:	b	2062c <__assert_fail@plt+0xe2c0>
   20de8:	push	{r4, r5, fp, lr}
   20dec:	add	fp, sp, #8
   20df0:	mov	r5, r0
   20df4:	mov	r4, r1
   20df8:	mov	r0, #0
   20dfc:	mov	r2, #5
   20e00:	mov	r1, r5
   20e04:	bl	11f7c <dcgettext@plt>
   20e08:	cmp	r0, r5
   20e0c:	popne	{r4, r5, fp, pc}
   20e10:	bl	244dc <__assert_fail@plt+0x12170>
   20e14:	ldrb	r1, [r0]
   20e18:	and	r1, r1, #223	; 0xdf
   20e1c:	cmp	r1, #71	; 0x47
   20e20:	beq	20e88 <__assert_fail@plt+0xeb1c>
   20e24:	cmp	r1, #85	; 0x55
   20e28:	bne	20ee0 <__assert_fail@plt+0xeb74>
   20e2c:	ldrb	r1, [r0, #1]
   20e30:	and	r1, r1, #223	; 0xdf
   20e34:	cmp	r1, #84	; 0x54
   20e38:	bne	20ee0 <__assert_fail@plt+0xeb74>
   20e3c:	ldrb	r1, [r0, #2]
   20e40:	and	r1, r1, #223	; 0xdf
   20e44:	cmp	r1, #70	; 0x46
   20e48:	bne	20ee0 <__assert_fail@plt+0xeb74>
   20e4c:	ldrb	r1, [r0, #3]
   20e50:	cmp	r1, #45	; 0x2d
   20e54:	bne	20ee0 <__assert_fail@plt+0xeb74>
   20e58:	ldrb	r1, [r0, #4]
   20e5c:	cmp	r1, #56	; 0x38
   20e60:	bne	20ee0 <__assert_fail@plt+0xeb74>
   20e64:	ldrb	r0, [r0, #5]
   20e68:	cmp	r0, #0
   20e6c:	bne	20ee0 <__assert_fail@plt+0xeb74>
   20e70:	ldrb	r1, [r5]
   20e74:	movw	r2, #29519	; 0x734f
   20e78:	movw	r0, #29523	; 0x7353
   20e7c:	movt	r2, #2
   20e80:	movt	r0, #2
   20e84:	b	20f10 <__assert_fail@plt+0xeba4>
   20e88:	ldrb	r1, [r0, #1]
   20e8c:	and	r1, r1, #223	; 0xdf
   20e90:	cmp	r1, #66	; 0x42
   20e94:	bne	20ee0 <__assert_fail@plt+0xeb74>
   20e98:	ldrb	r1, [r0, #2]
   20e9c:	cmp	r1, #49	; 0x31
   20ea0:	bne	20ee0 <__assert_fail@plt+0xeb74>
   20ea4:	ldrb	r1, [r0, #3]
   20ea8:	cmp	r1, #56	; 0x38
   20eac:	bne	20ee0 <__assert_fail@plt+0xeb74>
   20eb0:	ldrb	r1, [r0, #4]
   20eb4:	cmp	r1, #48	; 0x30
   20eb8:	bne	20ee0 <__assert_fail@plt+0xeb74>
   20ebc:	ldrb	r1, [r0, #5]
   20ec0:	cmp	r1, #51	; 0x33
   20ec4:	bne	20ee0 <__assert_fail@plt+0xeb74>
   20ec8:	ldrb	r1, [r0, #6]
   20ecc:	cmp	r1, #48	; 0x30
   20ed0:	bne	20ee0 <__assert_fail@plt+0xeb74>
   20ed4:	ldrb	r0, [r0, #7]
   20ed8:	cmp	r0, #0
   20edc:	beq	20efc <__assert_fail@plt+0xeb90>
   20ee0:	movw	r1, #26799	; 0x68af
   20ee4:	movw	r0, #25026	; 0x61c2
   20ee8:	cmp	r4, #9
   20eec:	movt	r1, #2
   20ef0:	movt	r0, #2
   20ef4:	moveq	r0, r1
   20ef8:	pop	{r4, r5, fp, pc}
   20efc:	ldrb	r1, [r5]
   20f00:	movw	r2, #29527	; 0x7357
   20f04:	movw	r0, #29531	; 0x735b
   20f08:	movt	r2, #2
   20f0c:	movt	r0, #2
   20f10:	cmp	r1, #96	; 0x60
   20f14:	moveq	r0, r2
   20f18:	pop	{r4, r5, fp, pc}
   20f1c:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   20f20:	add	fp, sp, #24
   20f24:	cmp	r1, #0
   20f28:	beq	20f64 <__assert_fail@plt+0xebf8>
   20f2c:	mov	r5, r1
   20f30:	mov	r6, r0
   20f34:	cmp	r0, #0
   20f38:	beq	20f8c <__assert_fail@plt+0xec20>
   20f3c:	movw	r1, #29620	; 0x73b4
   20f40:	mov	r0, r6
   20f44:	movt	r1, #2
   20f48:	bl	2442c <__assert_fail@plt+0x120c0>
   20f4c:	mov	r7, r0
   20f50:	cmp	r0, #0
   20f54:	bne	20f90 <__assert_fail@plt+0xec24>
   20f58:	mov	r9, #0
   20f5c:	mov	r0, r9
   20f60:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   20f64:	movw	r0, #2076	; 0x81c
   20f68:	bl	22720 <__assert_fail@plt+0x103b4>
   20f6c:	movw	r1, #4644	; 0x1224
   20f70:	mov	r9, r0
   20f74:	mov	r0, #0
   20f78:	movt	r1, #2
   20f7c:	stm	r9, {r0, r1}
   20f80:	str	r0, [r9, #8]
   20f84:	mov	r0, r9
   20f88:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   20f8c:	mov	r7, #0
   20f90:	movw	r0, #2076	; 0x81c
   20f94:	bl	22720 <__assert_fail@plt+0x103b4>
   20f98:	mov	r9, r0
   20f9c:	movw	r0, #4644	; 0x1224
   20fa0:	cmp	r7, #0
   20fa4:	movt	r0, #2
   20fa8:	str	r7, [r9]
   20fac:	stmib	r9, {r0, r6}
   20fb0:	beq	20fd8 <__assert_fail@plt+0xec6c>
   20fb4:	cmp	r5, #2048	; 0x800
   20fb8:	add	r1, r9, #12
   20fbc:	mov	r0, r7
   20fc0:	mov	r2, #0
   20fc4:	movcs	r5, #2048	; 0x800
   20fc8:	mov	r3, r5
   20fcc:	bl	121b0 <setvbuf@plt>
   20fd0:	mov	r0, r9
   20fd4:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   20fd8:	cmp	r5, #1024	; 0x400
   20fdc:	mov	r0, #0
   20fe0:	add	r8, r9, #16
   20fe4:	movcs	r5, #1024	; 0x400
   20fe8:	str	r0, [r9, #12]
   20fec:	cmp	r5, #1
   20ff0:	blt	2106c <__assert_fail@plt+0xed00>
   20ff4:	add	r6, r8, r5
   20ff8:	mov	r5, r8
   20ffc:	b	2100c <__assert_fail@plt+0xeca0>
   21000:	add	r5, r5, r0
   21004:	cmp	r5, r6
   21008:	bcs	2106c <__assert_fail@plt+0xed00>
   2100c:	sub	r1, r6, r5
   21010:	mov	r0, r5
   21014:	mov	r2, #0
   21018:	bl	12318 <getrandom@plt>
   2101c:	cmp	r0, #0
   21020:	bpl	21000 <__assert_fail@plt+0xec94>
   21024:	bl	12198 <__errno_location@plt>
   21028:	ldr	r4, [r0]
   2102c:	cmp	r4, #4
   21030:	beq	21004 <__assert_fail@plt+0xec98>
   21034:	ldr	r5, [r9]
   21038:	mov	r7, r0
   2103c:	mov	r0, r9
   21040:	movw	r1, #2076	; 0x81c
   21044:	movw	r2, #2076	; 0x81c
   21048:	bl	12270 <__explicit_bzero_chk@plt>
   2104c:	mov	r0, r9
   21050:	bl	1d148 <__assert_fail@plt+0xaddc>
   21054:	cmp	r5, #0
   21058:	beq	21064 <__assert_fail@plt+0xecf8>
   2105c:	mov	r0, r5
   21060:	bl	1cbbc <__assert_fail@plt+0xa850>
   21064:	str	r4, [r7]
   21068:	b	20f58 <__assert_fail@plt+0xebec>
   2106c:	mov	r0, r8
   21070:	bl	214d8 <__assert_fail@plt+0xf16c>
   21074:	mov	r0, r9
   21078:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   2107c:	str	r1, [r0, #4]
   21080:	bx	lr
   21084:	str	r1, [r0, #8]
   21088:	bx	lr
   2108c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21090:	add	fp, sp, #28
   21094:	sub	sp, sp, #4
   21098:	ldr	r3, [r0]
   2109c:	mov	r6, r2
   210a0:	mov	r5, r1
   210a4:	mov	sl, r0
   210a8:	cmp	r3, #0
   210ac:	beq	21128 <__assert_fail@plt+0xedbc>
   210b0:	mov	r0, r5
   210b4:	mov	r1, #1
   210b8:	mov	r2, r6
   210bc:	bl	1230c <fread_unlocked@plt>
   210c0:	mov	r4, r0
   210c4:	sub	r6, r6, r0
   210c8:	bl	12198 <__errno_location@plt>
   210cc:	cmp	r6, #0
   210d0:	beq	21120 <__assert_fail@plt+0xedb4>
   210d4:	mov	r7, r0
   210d8:	ldr	r1, [sl]
   210dc:	ldr	r0, [r7]
   210e0:	ldr	r1, [r1]
   210e4:	lsl	r1, r1, #26
   210e8:	and	r0, r0, r1, asr #31
   210ec:	str	r0, [r7]
   210f0:	ldr	r1, [sl, #4]
   210f4:	ldr	r0, [sl, #8]
   210f8:	blx	r1
   210fc:	ldr	r3, [sl]
   21100:	add	r5, r5, r4
   21104:	mov	r1, #1
   21108:	mov	r2, r6
   2110c:	mov	r0, r5
   21110:	bl	1230c <fread_unlocked@plt>
   21114:	mov	r4, r0
   21118:	subs	r6, r6, r0
   2111c:	bne	210d8 <__assert_fail@plt+0xed6c>
   21120:	sub	sp, fp, #28
   21124:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21128:	ldr	r7, [sl, #12]
   2112c:	movw	r0, #1052	; 0x41c
   21130:	add	r9, sl, r0
   21134:	sub	r0, r9, r7
   21138:	cmp	r7, r6
   2113c:	add	r1, r0, #1024	; 0x400
   21140:	bcs	211b8 <__assert_fail@plt+0xee4c>
   21144:	add	r8, sl, #16
   21148:	mov	r0, r5
   2114c:	mov	r2, r7
   21150:	bl	11eec <memcpy@plt>
   21154:	add	r5, r5, r7
   21158:	sub	r6, r6, r7
   2115c:	tst	r5, #3
   21160:	beq	2119c <__assert_fail@plt+0xee30>
   21164:	mov	r0, r8
   21168:	mov	r1, r9
   2116c:	bl	21294 <__assert_fail@plt+0xef28>
   21170:	mov	r7, #1024	; 0x400
   21174:	cmp	r6, #1024	; 0x400
   21178:	mov	r1, r9
   2117c:	bhi	21148 <__assert_fail@plt+0xeddc>
   21180:	b	211bc <__assert_fail@plt+0xee50>
   21184:	mov	r0, r8
   21188:	mov	r1, r5
   2118c:	bl	21294 <__assert_fail@plt+0xef28>
   21190:	subs	r6, r6, #1024	; 0x400
   21194:	add	r5, r5, #1024	; 0x400
   21198:	beq	211dc <__assert_fail@plt+0xee70>
   2119c:	cmp	r6, #1024	; 0x400
   211a0:	bcs	21184 <__assert_fail@plt+0xee18>
   211a4:	mov	r0, r8
   211a8:	mov	r1, r9
   211ac:	bl	21294 <__assert_fail@plt+0xef28>
   211b0:	mov	r7, #1024	; 0x400
   211b4:	b	211bc <__assert_fail@plt+0xee50>
   211b8:	mov	r9, r1
   211bc:	mov	r0, r5
   211c0:	mov	r1, r9
   211c4:	mov	r2, r6
   211c8:	bl	11eec <memcpy@plt>
   211cc:	sub	r0, r7, r6
   211d0:	str	r0, [sl, #12]
   211d4:	sub	sp, fp, #28
   211d8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   211dc:	mov	r0, #0
   211e0:	b	211d0 <__assert_fail@plt+0xee64>
   211e4:	push	{r4, r5, fp, lr}
   211e8:	add	fp, sp, #8
   211ec:	ldr	r4, [r0]
   211f0:	movw	r1, #2076	; 0x81c
   211f4:	mvn	r2, #0
   211f8:	mov	r5, r0
   211fc:	bl	12270 <__explicit_bzero_chk@plt>
   21200:	mov	r0, r5
   21204:	bl	1d148 <__assert_fail@plt+0xaddc>
   21208:	cmp	r4, #0
   2120c:	beq	2121c <__assert_fail@plt+0xeeb0>
   21210:	mov	r0, r4
   21214:	pop	{r4, r5, fp, lr}
   21218:	b	1cbbc <__assert_fail@plt+0xa850>
   2121c:	mov	r0, #0
   21220:	pop	{r4, r5, fp, pc}
   21224:	push	{fp, lr}
   21228:	mov	fp, sp
   2122c:	cmp	r0, #0
   21230:	beq	21290 <__assert_fail@plt+0xef24>
   21234:	mov	r4, r0
   21238:	movw	r0, #33392	; 0x8270
   2123c:	movt	r0, #3
   21240:	ldr	r5, [r0]
   21244:	bl	12198 <__errno_location@plt>
   21248:	ldr	r6, [r0]
   2124c:	movw	r0, #29623	; 0x73b7
   21250:	movw	r1, #29639	; 0x73c7
   21254:	mov	r2, #5
   21258:	movt	r0, #2
   2125c:	movt	r1, #2
   21260:	cmp	r6, #0
   21264:	moveq	r1, r0
   21268:	mov	r0, #0
   2126c:	bl	11f7c <dcgettext@plt>
   21270:	mov	r7, r0
   21274:	mov	r0, r4
   21278:	bl	20dd0 <__assert_fail@plt+0xea64>
   2127c:	mov	r3, r0
   21280:	mov	r0, r5
   21284:	mov	r1, r6
   21288:	mov	r2, r7
   2128c:	bl	120a8 <error@plt>
   21290:	bl	12348 <abort@plt>
   21294:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21298:	add	fp, sp, #28
   2129c:	sub	sp, sp, #8
   212a0:	ldr	r7, [r0, #1032]	; 0x408
   212a4:	ldr	r2, [r0, #1028]	; 0x404
   212a8:	ldr	r3, [r0, #1024]	; 0x400
   212ac:	add	ip, r0, #512	; 0x200
   212b0:	mov	r8, #0
   212b4:	add	r7, r7, #1
   212b8:	add	r6, r7, r2
   212bc:	str	r7, [r0, #1032]	; 0x408
   212c0:	mov	r7, r0
   212c4:	eor	r3, r3, r3, lsl #13
   212c8:	ldr	r4, [r7, r8]!
   212cc:	ldr	r2, [r7, #512]	; 0x200
   212d0:	and	r5, r4, #1020	; 0x3fc
   212d4:	ldr	r5, [r0, r5]
   212d8:	add	r2, r3, r2
   212dc:	add	r3, r2, r6
   212e0:	eor	r2, r2, r2, lsr #6
   212e4:	add	r3, r3, r5
   212e8:	str	r3, [r7]
   212ec:	ubfx	r3, r3, #10, #8
   212f0:	ldr	r3, [r0, r3, lsl #2]
   212f4:	add	r3, r3, r4
   212f8:	mov	r4, r1
   212fc:	str	r3, [r4, r8]!
   21300:	add	r8, r8, #16
   21304:	ldr	r5, [r7, #516]	; 0x204
   21308:	ldr	r6, [r7, #4]
   2130c:	add	lr, r0, r8
   21310:	cmp	lr, ip
   21314:	add	r2, r5, r2
   21318:	and	r5, r6, #1020	; 0x3fc
   2131c:	ldr	r5, [r0, r5]
   21320:	add	r3, r2, r3
   21324:	eor	r2, r2, r2, lsl #2
   21328:	add	r3, r3, r5
   2132c:	str	r3, [r7, #4]
   21330:	ubfx	r3, r3, #10, #8
   21334:	ldr	r3, [r0, r3, lsl #2]
   21338:	add	r3, r3, r6
   2133c:	str	r3, [r4, #4]
   21340:	ldr	r5, [r7, #520]	; 0x208
   21344:	ldr	r6, [r7, #8]
   21348:	add	r2, r5, r2
   2134c:	and	r5, r6, #1020	; 0x3fc
   21350:	ldr	r5, [r0, r5]
   21354:	add	r3, r2, r3
   21358:	eor	r2, r2, r2, lsr #16
   2135c:	add	r3, r3, r5
   21360:	str	r3, [r7, #8]
   21364:	ubfx	r3, r3, #10, #8
   21368:	ldr	r3, [r0, r3, lsl #2]
   2136c:	add	r6, r3, r6
   21370:	str	r6, [r4, #8]
   21374:	ldr	r3, [r7, #524]	; 0x20c
   21378:	ldr	r5, [r7, #12]
   2137c:	add	r3, r3, r2
   21380:	add	r2, r3, r6
   21384:	and	r6, r5, #1020	; 0x3fc
   21388:	ldr	r6, [r0, r6]
   2138c:	add	r2, r2, r6
   21390:	str	r2, [r7, #12]
   21394:	ubfx	r2, r2, #10, #8
   21398:	ldr	r2, [r0, r2, lsl #2]
   2139c:	add	r6, r2, r5
   213a0:	str	r6, [r4, #12]
   213a4:	bcc	212c0 <__assert_fail@plt+0xef54>
   213a8:	add	r2, r1, r8
   213ac:	mov	r5, #0
   213b0:	str	r2, [sp, #4]
   213b4:	add	r2, r0, #1024	; 0x400
   213b8:	str	r2, [sp]
   213bc:	ldr	r2, [lr, r5]
   213c0:	eor	r3, r3, r3, lsl #13
   213c4:	and	r7, r2, #1020	; 0x3fc
   213c8:	ldr	sl, [r0, r7]
   213cc:	add	r7, lr, r5
   213d0:	ldr	r4, [r7, #-512]	; 0xfffffe00
   213d4:	add	r3, r3, r4
   213d8:	add	r4, r3, r6
   213dc:	eor	r3, r3, r3, lsr #6
   213e0:	add	r4, r4, sl
   213e4:	str	r4, [lr, r5]
   213e8:	ubfx	r4, r4, #10, #8
   213ec:	ldr	r6, [sp, #4]
   213f0:	ldr	r4, [r0, r4, lsl #2]
   213f4:	add	r2, r4, r2
   213f8:	str	r2, [r6, r5]
   213fc:	ldr	r4, [r7, #-508]	; 0xfffffe04
   21400:	add	r3, r4, r3
   21404:	add	r4, r0, r5
   21408:	add	r6, r4, r8
   2140c:	add	sl, r3, r2
   21410:	ldr	r4, [r6, #4]
   21414:	and	r2, r4, #1020	; 0x3fc
   21418:	ldr	r2, [r0, r2]
   2141c:	add	r2, sl, r2
   21420:	eor	sl, r3, r3, lsl #2
   21424:	str	r2, [r6, #4]
   21428:	ubfx	r2, r2, #10, #8
   2142c:	ldr	r2, [r0, r2, lsl #2]
   21430:	add	r2, r2, r4
   21434:	add	r4, r1, r5
   21438:	add	ip, r4, r8
   2143c:	str	r2, [ip, #4]
   21440:	ldr	r3, [r7, #-504]	; 0xfffffe08
   21444:	add	r3, r3, sl
   21448:	add	sl, r3, r2
   2144c:	ldr	r2, [r7, #8]
   21450:	eor	r3, r3, r3, lsr #16
   21454:	and	r9, r2, #1020	; 0x3fc
   21458:	ldr	r4, [r0, r9]
   2145c:	add	r4, sl, r4
   21460:	str	r4, [r7, #8]
   21464:	ubfx	r4, r4, #10, #8
   21468:	ldr	r4, [r0, r4, lsl #2]
   2146c:	add	r2, r4, r2
   21470:	str	r2, [ip, #8]
   21474:	mov	ip, r1
   21478:	ldr	r4, [r7, #-500]	; 0xfffffe0c
   2147c:	add	r3, r4, r3
   21480:	ldr	r4, [r6, #12]
   21484:	add	r2, r3, r2
   21488:	and	r1, r4, #1020	; 0x3fc
   2148c:	ldr	r1, [r0, r1]
   21490:	add	r1, r2, r1
   21494:	str	r1, [r6, #12]
   21498:	ubfx	r1, r1, #10, #8
   2149c:	ldr	r2, [sp]
   214a0:	ldr	r1, [r0, r1, lsl #2]
   214a4:	add	r6, r1, r4
   214a8:	ldr	r1, [sp, #4]
   214ac:	add	r1, r1, r5
   214b0:	add	r5, r5, #16
   214b4:	str	r6, [r1, #12]
   214b8:	add	r1, r7, #16
   214bc:	cmp	r1, r2
   214c0:	mov	r1, ip
   214c4:	bcc	213bc <__assert_fail@plt+0xf050>
   214c8:	str	r3, [r0, #1024]	; 0x400
   214cc:	str	r6, [r0, #1028]	; 0x404
   214d0:	sub	sp, fp, #28
   214d4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   214d8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   214dc:	add	fp, sp, #28
   214e0:	sub	sp, sp, #28
   214e4:	str	r0, [sp, #20]
   214e8:	add	r7, r0, #28
   214ec:	movw	r0, #19064	; 0x4a78
   214f0:	movw	r6, #57178	; 0xdf5a
   214f4:	movw	r5, #89	; 0x59
   214f8:	movw	r1, #15947	; 0x3e4b
   214fc:	movw	sl, #6872	; 0x1ad8
   21500:	movw	r8, #15433	; 0x3c49
   21504:	movw	lr, #37145	; 0x9119
   21508:	mov	r9, #0
   2150c:	movt	r0, #55594	; 0xd92a
   21510:	movt	r6, #4967	; 0x1367
   21514:	movt	r5, #38361	; 0x95d9
   21518:	movt	r1, #49942	; 0xc316
   2151c:	movt	sl, #3906	; 0xf42
   21520:	movt	r8, #42266	; 0xa51a
   21524:	movt	lr, #12384	; 0x3060
   21528:	str	r0, [sp, #16]
   2152c:	movw	r0, #59931	; 0xea1b
   21530:	movt	r0, #50415	; 0xc4ef
   21534:	ldr	r3, [r7, #-28]	; 0xffffffe4
   21538:	str	r0, [sp, #24]
   2153c:	ldr	r0, [r7]
   21540:	str	lr, [sp, #4]
   21544:	add	r6, r3, r6
   21548:	ldr	r3, [sp, #20]
   2154c:	str	r0, [sp, #12]
   21550:	add	r3, r3, r9, lsl #2
   21554:	add	r9, r9, #8
   21558:	cmp	r9, #256	; 0x100
   2155c:	ldmib	r3, {r2, lr}
   21560:	ldr	r0, [r3, #12]
   21564:	add	r4, lr, r1
   21568:	ldr	ip, [r3, #16]
   2156c:	add	r5, r2, r5
   21570:	eor	r6, r6, r5, lsl #11
   21574:	add	r2, r0, sl
   21578:	add	r5, r4, r5
   2157c:	add	r2, r2, r6
   21580:	str	r6, [sp, #8]
   21584:	add	r6, r2, r4
   21588:	eor	r4, r5, r4, lsr #2
   2158c:	eor	r0, r6, r2, lsl #8
   21590:	ldr	r6, [r3, #20]
   21594:	str	r4, [sp]
   21598:	add	r1, r6, r8
   2159c:	ldr	r6, [sp, #16]
   215a0:	add	r1, r1, r0
   215a4:	add	r5, ip, r6
   215a8:	add	r5, r5, r4
   215ac:	ldr	r4, [sp, #4]
   215b0:	add	r2, r5, r2
   215b4:	add	r6, r1, r5
   215b8:	eor	sl, r2, r5, lsr #16
   215bc:	ldr	r5, [r3, #24]
   215c0:	ldr	r2, [sp, #24]
   215c4:	eor	ip, r6, r1, lsl #10
   215c8:	ldr	r6, [sp, #12]
   215cc:	str	ip, [sp, #16]
   215d0:	add	r5, r5, r2
   215d4:	add	r6, r6, r4
   215d8:	ldr	r2, [sp]
   215dc:	add	r5, r5, sl
   215e0:	add	r6, r6, ip
   215e4:	add	r1, r5, r1
   215e8:	eor	r8, r1, r5, lsr #4
   215ec:	ldr	r1, [sp, #8]
   215f0:	add	r5, r6, r5
   215f4:	add	r4, r8, r1
   215f8:	add	r1, r4, r6
   215fc:	eor	lr, r1, r4, lsr #9
   21600:	add	r1, lr, r0
   21604:	eor	r0, r5, r6, lsl #8
   21608:	add	r5, r0, r2
   2160c:	add	r6, r5, r4
   21610:	str	r6, [r7, #-28]	; 0xffffffe4
   21614:	str	r5, [r3, #4]
   21618:	str	r1, [r3, #8]
   2161c:	str	sl, [r3, #12]
   21620:	str	ip, [r3, #16]
   21624:	str	r8, [r3, #20]
   21628:	str	r0, [r3, #24]
   2162c:	str	lr, [r7]
   21630:	add	r7, r7, #32
   21634:	bcc	21534 <__assert_fail@plt+0xf1c8>
   21638:	ldr	r3, [sp, #20]
   2163c:	ldr	r9, [sp, #16]
   21640:	mov	r4, #0
   21644:	add	r7, r3, #28
   21648:	str	r0, [sp, #24]
   2164c:	ldr	r0, [r7]
   21650:	ldr	r3, [r7, #-28]	; 0xffffffe4
   21654:	str	r0, [sp, #16]
   21658:	add	r0, r3, r6
   2165c:	str	r0, [sp, #12]
   21660:	ldr	r0, [sp, #20]
   21664:	add	r3, r0, r4, lsl #2
   21668:	add	r4, r4, #8
   2166c:	cmp	r4, #256	; 0x100
   21670:	ldr	r2, [r3, #16]
   21674:	ldmib	r3, {r6, ip}
   21678:	ldr	r0, [r3, #12]
   2167c:	add	r1, ip, r1
   21680:	add	r5, r6, r5
   21684:	str	r2, [sp, #8]
   21688:	ldr	r2, [sp, #12]
   2168c:	add	r0, r0, sl
   21690:	eor	r2, r2, r5, lsl #11
   21694:	add	r0, r0, r2
   21698:	str	r2, [sp, #12]
   2169c:	add	r2, r0, r1
   216a0:	eor	ip, r2, r0, lsl #8
   216a4:	ldr	r2, [r3, #20]
   216a8:	add	r2, r2, r8
   216ac:	add	r6, r2, ip
   216b0:	add	r2, r1, r5
   216b4:	eor	r5, r2, r1, lsr #2
   216b8:	ldr	r1, [sp, #8]
   216bc:	add	r1, r1, r9
   216c0:	add	r1, r1, r5
   216c4:	add	r0, r1, r0
   216c8:	add	r2, r6, r1
   216cc:	eor	sl, r0, r1, lsr #16
   216d0:	ldr	r0, [r3, #24]
   216d4:	ldr	r1, [sp, #24]
   216d8:	eor	r9, r2, r6, lsl #10
   216dc:	ldr	r2, [sp, #16]
   216e0:	add	r0, r0, r1
   216e4:	add	r2, r2, lr
   216e8:	add	r0, r0, sl
   216ec:	add	lr, r2, r9
   216f0:	add	r1, r0, r6
   216f4:	eor	r8, r1, r0, lsr #4
   216f8:	ldr	r1, [sp, #12]
   216fc:	add	r0, lr, r0
   21700:	eor	r0, r0, lr, lsl #8
   21704:	add	r5, r0, r5
   21708:	add	r6, r8, r1
   2170c:	add	r1, r6, lr
   21710:	eor	r1, r1, r6, lsr #9
   21714:	add	r6, r5, r6
   21718:	str	r6, [r7, #-28]	; 0xffffffe4
   2171c:	str	r5, [r3, #4]
   21720:	add	r2, r1, ip
   21724:	mov	lr, r1
   21728:	str	r2, [r3, #8]
   2172c:	str	sl, [r3, #12]
   21730:	str	r9, [r3, #16]
   21734:	str	r8, [r3, #20]
   21738:	str	r0, [r3, #24]
   2173c:	str	lr, [r7]
   21740:	mov	r1, r2
   21744:	add	r7, r7, #32
   21748:	bcc	21648 <__assert_fail@plt+0xf2dc>
   2174c:	ldr	r0, [sp, #20]
   21750:	mov	r1, #0
   21754:	str	r1, [r0, #1024]	; 0x400
   21758:	str	r1, [r0, #1028]	; 0x404
   2175c:	str	r1, [r0, #1032]	; 0x408
   21760:	sub	sp, fp, #28
   21764:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21768:	push	{r4, r5, r6, sl, fp, lr}
   2176c:	add	fp, sp, #16
   21770:	sub	sp, sp, #8
   21774:	movw	r5, #15608	; 0x3cf8
   21778:	movw	r6, #53576	; 0xd148
   2177c:	mov	r4, r0
   21780:	mov	r0, #0
   21784:	mov	r1, #0
   21788:	mov	r2, #0
   2178c:	movt	r5, #2
   21790:	movt	r6, #1
   21794:	str	r0, [r4]
   21798:	str	r0, [r4, #4]
   2179c:	str	r0, [r4, #8]
   217a0:	add	r0, r4, #12
   217a4:	mov	r3, r5
   217a8:	str	r6, [sp]
   217ac:	bl	24764 <_obstack_begin@@Base>
   217b0:	add	r0, r4, #56	; 0x38
   217b4:	mov	r1, #0
   217b8:	mov	r2, #0
   217bc:	mov	r3, r5
   217c0:	str	r6, [sp]
   217c4:	bl	24764 <_obstack_begin@@Base>
   217c8:	add	r0, r4, #100	; 0x64
   217cc:	mov	r1, #0
   217d0:	mov	r2, #0
   217d4:	mov	r3, r5
   217d8:	str	r6, [sp]
   217dc:	bl	24764 <_obstack_begin@@Base>
   217e0:	sub	sp, fp, #16
   217e4:	pop	{r4, r5, r6, sl, fp, pc}
   217e8:	push	{r4, sl, fp, lr}
   217ec:	add	fp, sp, #8
   217f0:	mov	r4, r0
   217f4:	add	r0, r0, #12
   217f8:	mov	r1, #0
   217fc:	bl	24a44 <_obstack_free@@Base>
   21800:	add	r0, r4, #56	; 0x38
   21804:	mov	r1, #0
   21808:	bl	24a44 <_obstack_free@@Base>
   2180c:	add	r0, r4, #100	; 0x64
   21810:	mov	r1, #0
   21814:	pop	{r4, sl, fp, lr}
   21818:	b	24a44 <_obstack_free@@Base>
   2181c:	push	{r4, r5, r6, r7, fp, lr}
   21820:	add	fp, sp, #16
   21824:	mov	r5, r1
   21828:	mov	r4, r0
   2182c:	bl	121c8 <fgetc@plt>
   21830:	cmn	r0, #1
   21834:	beq	21894 <__assert_fail@plt+0xf528>
   21838:	mov	r7, r0
   2183c:	add	r6, r5, #12
   21840:	b	21870 <__assert_fail@plt+0xf504>
   21844:	add	r1, r0, #1
   21848:	cmp	r7, #0
   2184c:	str	r1, [r5, #24]
   21850:	strb	r7, [r0]
   21854:	moveq	r0, r5
   21858:	bleq	219c0 <__assert_fail@plt+0xf654>
   2185c:	mov	r0, r4
   21860:	bl	121c8 <fgetc@plt>
   21864:	mov	r7, r0
   21868:	cmn	r0, #1
   2186c:	beq	21894 <__assert_fail@plt+0xf528>
   21870:	ldr	r0, [r5, #24]
   21874:	ldr	r1, [r5, #28]
   21878:	cmp	r1, r0
   2187c:	bne	21844 <__assert_fail@plt+0xf4d8>
   21880:	mov	r0, r6
   21884:	mov	r1, #1
   21888:	bl	248b8 <_obstack_newchunk@@Base>
   2188c:	ldr	r0, [r5, #24]
   21890:	b	21844 <__assert_fail@plt+0xf4d8>
   21894:	ldr	r1, [r5, #20]
   21898:	ldr	r0, [r5, #24]
   2189c:	cmp	r0, r1
   218a0:	beq	218d8 <__assert_fail@plt+0xf56c>
   218a4:	ldr	r1, [r5, #28]
   218a8:	cmp	r1, r0
   218ac:	bne	218c0 <__assert_fail@plt+0xf554>
   218b0:	add	r0, r5, #12
   218b4:	mov	r1, #1
   218b8:	bl	248b8 <_obstack_newchunk@@Base>
   218bc:	ldr	r0, [r5, #24]
   218c0:	add	r1, r0, #1
   218c4:	str	r1, [r5, #24]
   218c8:	mov	r1, #0
   218cc:	strb	r1, [r0]
   218d0:	mov	r0, r5
   218d4:	bl	219c0 <__assert_fail@plt+0xf654>
   218d8:	ldr	r0, [r5, #68]	; 0x44
   218dc:	ldr	r1, [r5, #72]	; 0x48
   218e0:	sub	r1, r1, r0
   218e4:	cmp	r1, #4
   218e8:	bcs	218fc <__assert_fail@plt+0xf590>
   218ec:	add	r0, r5, #56	; 0x38
   218f0:	mov	r1, #4
   218f4:	bl	248b8 <_obstack_newchunk@@Base>
   218f8:	ldr	r0, [r5, #68]	; 0x44
   218fc:	mov	r1, #0
   21900:	str	r1, [r0]
   21904:	ldr	r1, [r5, #68]	; 0x44
   21908:	ldr	r0, [r5, #64]	; 0x40
   2190c:	add	r2, r1, #4
   21910:	cmp	r2, r0
   21914:	str	r2, [r5, #68]	; 0x44
   21918:	bne	21928 <__assert_fail@plt+0xf5bc>
   2191c:	ldrb	r1, [r5, #96]	; 0x60
   21920:	orr	r1, r1, #2
   21924:	strb	r1, [r5, #96]	; 0x60
   21928:	ldr	r7, [r5, #80]	; 0x50
   2192c:	ldr	r3, [r5, #60]	; 0x3c
   21930:	ldr	r1, [r5, #72]	; 0x48
   21934:	add	r2, r7, r2
   21938:	bic	r2, r2, r7
   2193c:	sub	r7, r2, r3
   21940:	sub	r3, r1, r3
   21944:	str	r2, [r5, #68]	; 0x44
   21948:	cmp	r7, r3
   2194c:	movhi	r2, r1
   21950:	strhi	r1, [r5, #68]	; 0x44
   21954:	str	r0, [r5, #4]
   21958:	str	r2, [r5, #64]	; 0x40
   2195c:	ldr	r0, [r5, #108]	; 0x6c
   21960:	ldr	r2, [r5, #112]	; 0x70
   21964:	cmp	r2, r0
   21968:	bne	21978 <__assert_fail@plt+0xf60c>
   2196c:	ldrb	r1, [r5, #140]	; 0x8c
   21970:	orr	r1, r1, #2
   21974:	strb	r1, [r5, #140]	; 0x8c
   21978:	ldr	r7, [r5, #124]	; 0x7c
   2197c:	ldr	r3, [r5, #104]	; 0x68
   21980:	ldr	r1, [r5, #116]	; 0x74
   21984:	add	r2, r7, r2
   21988:	bic	r2, r2, r7
   2198c:	sub	r7, r2, r3
   21990:	sub	r3, r1, r3
   21994:	str	r2, [r5, #112]	; 0x70
   21998:	cmp	r7, r3
   2199c:	strhi	r1, [r5, #112]	; 0x70
   219a0:	str	r0, [r5, #8]
   219a4:	movhi	r2, r1
   219a8:	mov	r0, r4
   219ac:	str	r2, [r5, #108]	; 0x6c
   219b0:	bl	11ed4 <ferror@plt>
   219b4:	clz	r0, r0
   219b8:	lsr	r0, r0, #5
   219bc:	pop	{r4, r5, r6, r7, fp, pc}
   219c0:	push	{r4, r5, r6, r7, fp, lr}
   219c4:	add	fp, sp, #16
   219c8:	ldr	r5, [r0, #20]
   219cc:	ldr	r6, [r0, #24]
   219d0:	mov	r4, r0
   219d4:	cmp	r6, r5
   219d8:	bne	219e8 <__assert_fail@plt+0xf67c>
   219dc:	ldrb	r0, [r4, #52]	; 0x34
   219e0:	orr	r0, r0, #2
   219e4:	strb	r0, [r4, #52]	; 0x34
   219e8:	ldr	r1, [r4, #36]	; 0x24
   219ec:	ldr	r2, [r4, #16]
   219f0:	ldr	r0, [r4, #28]
   219f4:	mvn	r7, r5
   219f8:	add	r3, r1, r6
   219fc:	bic	r1, r3, r1
   21a00:	sub	r3, r1, r2
   21a04:	sub	r2, r0, r2
   21a08:	str	r1, [r4, #24]
   21a0c:	cmp	r3, r2
   21a10:	movhi	r1, r0
   21a14:	strhi	r0, [r4, #24]
   21a18:	str	r1, [r4, #20]
   21a1c:	ldr	r0, [r4, #68]	; 0x44
   21a20:	ldr	r1, [r4, #72]	; 0x48
   21a24:	sub	r1, r1, r0
   21a28:	cmp	r1, #4
   21a2c:	bcs	21a40 <__assert_fail@plt+0xf6d4>
   21a30:	add	r0, r4, #56	; 0x38
   21a34:	mov	r1, #4
   21a38:	bl	248b8 <_obstack_newchunk@@Base>
   21a3c:	ldr	r0, [r4, #68]	; 0x44
   21a40:	str	r5, [r0]
   21a44:	add	r6, r6, r7
   21a48:	ldr	r1, [r4, #68]	; 0x44
   21a4c:	ldr	r0, [r4, #112]	; 0x70
   21a50:	ldr	r2, [r4, #116]	; 0x74
   21a54:	add	r1, r1, #4
   21a58:	str	r1, [r4, #68]	; 0x44
   21a5c:	sub	r1, r2, r0
   21a60:	cmp	r1, #4
   21a64:	bcs	21a78 <__assert_fail@plt+0xf70c>
   21a68:	add	r0, r4, #100	; 0x64
   21a6c:	mov	r1, #4
   21a70:	bl	248b8 <_obstack_newchunk@@Base>
   21a74:	ldr	r0, [r4, #112]	; 0x70
   21a78:	str	r6, [r0]
   21a7c:	ldr	r0, [r4]
   21a80:	ldr	r1, [r4, #112]	; 0x70
   21a84:	add	r1, r1, #4
   21a88:	add	r0, r0, #1
   21a8c:	str	r1, [r4, #112]	; 0x70
   21a90:	str	r0, [r4]
   21a94:	pop	{r4, r5, r6, r7, fp, pc}
   21a98:	push	{r4, r5, r6, r7, fp, lr}
   21a9c:	add	fp, sp, #16
   21aa0:	mov	r4, r1
   21aa4:	mov	r1, #0
   21aa8:	mov	r6, r2
   21aac:	bl	1224c <setlocale@plt>
   21ab0:	cmp	r0, #0
   21ab4:	beq	21ae4 <__assert_fail@plt+0xf778>
   21ab8:	mov	r7, r0
   21abc:	bl	12174 <strlen@plt>
   21ac0:	cmp	r0, r6
   21ac4:	bcs	21b00 <__assert_fail@plt+0xf794>
   21ac8:	add	r2, r0, #1
   21acc:	mov	r0, r4
   21ad0:	mov	r1, r7
   21ad4:	bl	11eec <memcpy@plt>
   21ad8:	mov	r5, #0
   21adc:	mov	r0, r5
   21ae0:	pop	{r4, r5, r6, r7, fp, pc}
   21ae4:	mov	r5, #22
   21ae8:	cmp	r6, #0
   21aec:	beq	21b28 <__assert_fail@plt+0xf7bc>
   21af0:	mov	r0, #0
   21af4:	strb	r0, [r4]
   21af8:	mov	r0, r5
   21afc:	pop	{r4, r5, r6, r7, fp, pc}
   21b00:	mov	r5, #34	; 0x22
   21b04:	cmp	r6, #0
   21b08:	beq	21b28 <__assert_fail@plt+0xf7bc>
   21b0c:	sub	r6, r6, #1
   21b10:	mov	r0, r4
   21b14:	mov	r1, r7
   21b18:	mov	r2, r6
   21b1c:	bl	11eec <memcpy@plt>
   21b20:	mov	r0, #0
   21b24:	strb	r0, [r4, r6]
   21b28:	mov	r0, r5
   21b2c:	pop	{r4, r5, r6, r7, fp, pc}
   21b30:	mov	r1, #0
   21b34:	b	1224c <setlocale@plt>
   21b38:	push	{fp, lr}
   21b3c:	mov	fp, sp
   21b40:	bl	120d8 <mkstemp64@plt>
   21b44:	pop	{fp, lr}
   21b48:	b	22020 <__assert_fail@plt+0xfcb4>
   21b4c:	push	{r4, sl, fp, lr}
   21b50:	add	fp, sp, #8
   21b54:	mov	r4, r1
   21b58:	bl	12030 <mkostemp64@plt>
   21b5c:	mov	r1, r4
   21b60:	pop	{r4, sl, fp, lr}
   21b64:	b	243d0 <__assert_fail@plt+0x12064>
   21b68:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   21b6c:	add	fp, sp, #24
   21b70:	ldrb	lr, [r0]
   21b74:	ldrb	r5, [r1]
   21b78:	cmp	lr, #45	; 0x2d
   21b7c:	bne	21bf4 <__assert_fail@plt+0xf888>
   21b80:	ldrb	r4, [r0, #1]!
   21b84:	cmp	r4, #48	; 0x30
   21b88:	beq	21b80 <__assert_fail@plt+0xf814>
   21b8c:	cmp	r4, r3
   21b90:	beq	21b80 <__assert_fail@plt+0xf814>
   21b94:	cmp	r5, #45	; 0x2d
   21b98:	bne	21cb8 <__assert_fail@plt+0xf94c>
   21b9c:	ldrb	r5, [r1, #1]!
   21ba0:	cmp	r5, #48	; 0x30
   21ba4:	beq	21b9c <__assert_fail@plt+0xf830>
   21ba8:	cmp	r5, r3
   21bac:	beq	21b9c <__assert_fail@plt+0xf830>
   21bb0:	sub	r6, r4, #48	; 0x30
   21bb4:	mov	ip, #0
   21bb8:	cmp	r6, #10
   21bbc:	mov	lr, #0
   21bc0:	movwcc	lr, #1
   21bc4:	cmp	r6, #9
   21bc8:	bhi	21cf8 <__assert_fail@plt+0xf98c>
   21bcc:	cmp	r5, r4
   21bd0:	bne	21cf8 <__assert_fail@plt+0xf98c>
   21bd4:	ldrb	r4, [r0, #1]!
   21bd8:	cmp	r4, r3
   21bdc:	beq	21bd4 <__assert_fail@plt+0xf868>
   21be0:	ldrb	r5, [r1, #1]!
   21be4:	cmp	r5, r3
   21be8:	beq	21be0 <__assert_fail@plt+0xf874>
   21bec:	sub	r6, r4, #48	; 0x30
   21bf0:	b	21bb8 <__assert_fail@plt+0xf84c>
   21bf4:	cmp	r5, #45	; 0x2d
   21bf8:	bne	21c54 <__assert_fail@plt+0xf8e8>
   21bfc:	ldrb	r6, [r1, #1]!
   21c00:	cmp	r6, #48	; 0x30
   21c04:	beq	21bfc <__assert_fail@plt+0xf890>
   21c08:	cmp	r6, r3
   21c0c:	beq	21bfc <__assert_fail@plt+0xf890>
   21c10:	cmp	r6, r2
   21c14:	bne	21c2c <__assert_fail@plt+0xf8c0>
   21c18:	mov	r7, #1
   21c1c:	ldrb	r6, [r1, r7]
   21c20:	add	r7, r7, #1
   21c24:	cmp	r6, #48	; 0x30
   21c28:	beq	21c1c <__assert_fail@plt+0xf8b0>
   21c2c:	sub	r1, r6, #48	; 0x30
   21c30:	mov	ip, #1
   21c34:	cmp	r1, #10
   21c38:	bcc	2200c <__assert_fail@plt+0xfca0>
   21c3c:	cmp	lr, #48	; 0x30
   21c40:	cmpne	lr, r3
   21c44:	bne	21ed8 <__assert_fail@plt+0xfb6c>
   21c48:	ldrb	lr, [r0, #1]!
   21c4c:	b	21c3c <__assert_fail@plt+0xf8d0>
   21c50:	ldrb	lr, [r0, #1]!
   21c54:	cmp	lr, #48	; 0x30
   21c58:	cmpne	lr, r3
   21c5c:	beq	21c50 <__assert_fail@plt+0xf8e4>
   21c60:	b	21c68 <__assert_fail@plt+0xf8fc>
   21c64:	ldrb	r5, [r1, #1]!
   21c68:	cmp	r5, #48	; 0x30
   21c6c:	cmpne	r5, r3
   21c70:	beq	21c64 <__assert_fail@plt+0xf8f8>
   21c74:	sub	r6, lr, #48	; 0x30
   21c78:	mov	ip, #0
   21c7c:	cmp	r6, #10
   21c80:	mov	r4, #0
   21c84:	movwcc	r4, #1
   21c88:	cmp	r6, #9
   21c8c:	bhi	21da0 <__assert_fail@plt+0xfa34>
   21c90:	cmp	lr, r5
   21c94:	bne	21da0 <__assert_fail@plt+0xfa34>
   21c98:	ldrb	lr, [r0, #1]!
   21c9c:	cmp	lr, r3
   21ca0:	beq	21c98 <__assert_fail@plt+0xf92c>
   21ca4:	ldrb	r5, [r1, #1]!
   21ca8:	cmp	r5, r3
   21cac:	beq	21ca4 <__assert_fail@plt+0xf938>
   21cb0:	sub	r6, lr, #48	; 0x30
   21cb4:	b	21c7c <__assert_fail@plt+0xf910>
   21cb8:	cmp	r4, r2
   21cbc:	bne	21cd4 <__assert_fail@plt+0xf968>
   21cc0:	mov	r7, #1
   21cc4:	ldrb	r4, [r0, r7]
   21cc8:	add	r7, r7, #1
   21ccc:	cmp	r4, #48	; 0x30
   21cd0:	beq	21cc4 <__assert_fail@plt+0xf958>
   21cd4:	sub	r0, r4, #48	; 0x30
   21cd8:	mvn	ip, #0
   21cdc:	cmp	r0, #10
   21ce0:	bcc	2200c <__assert_fail@plt+0xfca0>
   21ce4:	cmp	r5, #48	; 0x30
   21ce8:	cmpne	r5, r3
   21cec:	bne	21ef8 <__assert_fail@plt+0xfb8c>
   21cf0:	ldrb	r5, [r1, #1]!
   21cf4:	b	21ce4 <__assert_fail@plt+0xf978>
   21cf8:	sub	r6, r5, r2
   21cfc:	subs	r7, r4, r2
   21d00:	sub	r8, r5, #48	; 0x30
   21d04:	clz	r6, r6
   21d08:	movwne	r7, #1
   21d0c:	cmp	r8, #10
   21d10:	lsr	r9, r6, #5
   21d14:	eor	r6, lr, #1
   21d18:	movwcc	ip, #1
   21d1c:	tst	r9, r6
   21d20:	bne	21e48 <__assert_fail@plt+0xfadc>
   21d24:	orrs	r7, ip, r7
   21d28:	beq	21e48 <__assert_fail@plt+0xfadc>
   21d2c:	sub	r7, r4, #48	; 0x30
   21d30:	mov	r2, #0
   21d34:	mov	ip, #0
   21d38:	cmp	r7, #9
   21d3c:	bhi	21d60 <__assert_fail@plt+0xf9f4>
   21d40:	mov	ip, #0
   21d44:	ldrb	r7, [r0, #1]!
   21d48:	cmp	r7, r3
   21d4c:	beq	21d44 <__assert_fail@plt+0xf9d8>
   21d50:	sub	r7, r7, #48	; 0x30
   21d54:	add	ip, ip, #1
   21d58:	cmp	r7, #10
   21d5c:	bcc	21d44 <__assert_fail@plt+0xf9d8>
   21d60:	cmp	r8, #9
   21d64:	bhi	21d88 <__assert_fail@plt+0xfa1c>
   21d68:	mov	r2, #0
   21d6c:	ldrb	r0, [r1, #1]!
   21d70:	cmp	r0, r3
   21d74:	beq	21d6c <__assert_fail@plt+0xfa00>
   21d78:	sub	r0, r0, #48	; 0x30
   21d7c:	add	r2, r2, #1
   21d80:	cmp	r0, #10
   21d84:	bcc	21d6c <__assert_fail@plt+0xfa00>
   21d88:	cmp	ip, r2
   21d8c:	bne	21f68 <__assert_fail@plt+0xfbfc>
   21d90:	cmp	ip, #0
   21d94:	subne	ip, r5, r4
   21d98:	mov	r0, ip
   21d9c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   21da0:	sub	r6, r5, r2
   21da4:	subs	r7, lr, r2
   21da8:	sub	r8, r5, #48	; 0x30
   21dac:	eor	r4, r4, #1
   21db0:	clz	r6, r6
   21db4:	movwne	r7, #1
   21db8:	cmp	r8, #10
   21dbc:	lsr	r6, r6, #5
   21dc0:	movwcc	ip, #1
   21dc4:	tst	r6, r4
   21dc8:	bne	21e90 <__assert_fail@plt+0xfb24>
   21dcc:	orrs	r7, ip, r7
   21dd0:	beq	21e90 <__assert_fail@plt+0xfb24>
   21dd4:	sub	r7, lr, #48	; 0x30
   21dd8:	mov	r2, #0
   21ddc:	mov	ip, #0
   21de0:	cmp	r7, #9
   21de4:	bhi	21e08 <__assert_fail@plt+0xfa9c>
   21de8:	mov	ip, #0
   21dec:	ldrb	r4, [r0, #1]!
   21df0:	cmp	r4, r3
   21df4:	beq	21dec <__assert_fail@plt+0xfa80>
   21df8:	sub	r4, r4, #48	; 0x30
   21dfc:	add	ip, ip, #1
   21e00:	cmp	r4, #10
   21e04:	bcc	21dec <__assert_fail@plt+0xfa80>
   21e08:	cmp	r8, #9
   21e0c:	bhi	21e30 <__assert_fail@plt+0xfac4>
   21e10:	mov	r2, #0
   21e14:	ldrb	r0, [r1, #1]!
   21e18:	cmp	r0, r3
   21e1c:	beq	21e14 <__assert_fail@plt+0xfaa8>
   21e20:	sub	r0, r0, #48	; 0x30
   21e24:	add	r2, r2, #1
   21e28:	cmp	r0, #10
   21e2c:	bcc	21e14 <__assert_fail@plt+0xfaa8>
   21e30:	cmp	ip, r2
   21e34:	bne	21f70 <__assert_fail@plt+0xfc04>
   21e38:	cmp	ip, #0
   21e3c:	subne	ip, lr, r5
   21e40:	mov	r0, ip
   21e44:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   21e48:	uxtb	r2, r2
   21e4c:	cmp	r5, r2
   21e50:	bne	21f18 <__assert_fail@plt+0xfbac>
   21e54:	cmp	r4, r2
   21e58:	bne	21f80 <__assert_fail@plt+0xfc14>
   21e5c:	add	r0, r0, #1
   21e60:	add	r1, r1, #1
   21e64:	mov	ip, #0
   21e68:	ldrb	r7, [r1]
   21e6c:	ldrb	r3, [r0]
   21e70:	sub	r2, r7, #48	; 0x30
   21e74:	cmp	r7, r3
   21e78:	bne	21fc0 <__assert_fail@plt+0xfc54>
   21e7c:	add	r0, r0, #1
   21e80:	add	r1, r1, #1
   21e84:	cmp	r2, #10
   21e88:	bcc	21e68 <__assert_fail@plt+0xfafc>
   21e8c:	b	2200c <__assert_fail@plt+0xfca0>
   21e90:	uxtb	r2, r2
   21e94:	cmp	lr, r2
   21e98:	bne	21f3c <__assert_fail@plt+0xfbd0>
   21e9c:	cmp	r5, lr
   21ea0:	bne	21f98 <__assert_fail@plt+0xfc2c>
   21ea4:	add	r1, r1, #1
   21ea8:	add	r0, r0, #1
   21eac:	mov	ip, #0
   21eb0:	ldrb	r7, [r0]
   21eb4:	ldrb	r3, [r1]
   21eb8:	sub	r2, r7, #48	; 0x30
   21ebc:	cmp	r7, r3
   21ec0:	bne	21fe8 <__assert_fail@plt+0xfc7c>
   21ec4:	add	r1, r1, #1
   21ec8:	add	r0, r0, #1
   21ecc:	cmp	r2, #10
   21ed0:	bcc	21eb0 <__assert_fail@plt+0xfb44>
   21ed4:	b	2200c <__assert_fail@plt+0xfca0>
   21ed8:	cmp	lr, r2
   21edc:	bne	21ef0 <__assert_fail@plt+0xfb84>
   21ee0:	add	r0, r0, #1
   21ee4:	ldrb	lr, [r0], #1
   21ee8:	cmp	lr, #48	; 0x30
   21eec:	beq	21ee4 <__assert_fail@plt+0xfb78>
   21ef0:	sub	r0, lr, #48	; 0x30
   21ef4:	b	21fac <__assert_fail@plt+0xfc40>
   21ef8:	cmp	r5, r2
   21efc:	bne	21f10 <__assert_fail@plt+0xfba4>
   21f00:	add	r0, r1, #1
   21f04:	ldrb	r5, [r0], #1
   21f08:	cmp	r5, #48	; 0x30
   21f0c:	beq	21f04 <__assert_fail@plt+0xfb98>
   21f10:	sub	r0, r5, #48	; 0x30
   21f14:	b	21f5c <__assert_fail@plt+0xfbf0>
   21f18:	mov	ip, #0
   21f1c:	cmp	r4, r2
   21f20:	bne	2200c <__assert_fail@plt+0xfca0>
   21f24:	add	r0, r0, #1
   21f28:	ldrb	r1, [r0], #1
   21f2c:	cmp	r1, #48	; 0x30
   21f30:	beq	21f28 <__assert_fail@plt+0xfbbc>
   21f34:	sub	r0, r1, #48	; 0x30
   21f38:	b	21f5c <__assert_fail@plt+0xfbf0>
   21f3c:	mov	ip, #0
   21f40:	cmp	r5, r2
   21f44:	bne	2200c <__assert_fail@plt+0xfca0>
   21f48:	add	r1, r1, #1
   21f4c:	ldrb	r0, [r1], #1
   21f50:	cmp	r0, #48	; 0x30
   21f54:	beq	21f4c <__assert_fail@plt+0xfbe0>
   21f58:	sub	r0, r0, #48	; 0x30
   21f5c:	mov	ip, #0
   21f60:	cmp	r0, #10
   21f64:	b	21f74 <__assert_fail@plt+0xfc08>
   21f68:	mvn	ip, #0
   21f6c:	b	21fb4 <__assert_fail@plt+0xfc48>
   21f70:	mov	ip, #1
   21f74:	mvncc	ip, #0
   21f78:	mov	r0, ip
   21f7c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   21f80:	add	r1, r1, #1
   21f84:	ldrb	r0, [r1], #1
   21f88:	cmp	r0, #48	; 0x30
   21f8c:	beq	21f84 <__assert_fail@plt+0xfc18>
   21f90:	sub	r0, r0, #48	; 0x30
   21f94:	b	21fac <__assert_fail@plt+0xfc40>
   21f98:	add	r0, r0, #1
   21f9c:	ldrb	r1, [r0], #1
   21fa0:	cmp	r1, #48	; 0x30
   21fa4:	beq	21f9c <__assert_fail@plt+0xfc30>
   21fa8:	sub	r0, r1, #48	; 0x30
   21fac:	mov	ip, #0
   21fb0:	cmp	r0, #10
   21fb4:	movwcc	ip, #1
   21fb8:	mov	r0, ip
   21fbc:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   21fc0:	sub	r6, r3, #48	; 0x30
   21fc4:	cmp	r2, #9
   21fc8:	cmpls	r6, #9
   21fcc:	bls	22014 <__assert_fail@plt+0xfca8>
   21fd0:	cmp	r2, #10
   21fd4:	bcc	21f84 <__assert_fail@plt+0xfc18>
   21fd8:	mov	ip, #0
   21fdc:	cmp	r6, #10
   21fe0:	bcc	21f28 <__assert_fail@plt+0xfbbc>
   21fe4:	b	2200c <__assert_fail@plt+0xfca0>
   21fe8:	sub	r6, r3, #48	; 0x30
   21fec:	cmp	r2, #9
   21ff0:	cmpls	r6, #9
   21ff4:	bls	22014 <__assert_fail@plt+0xfca8>
   21ff8:	cmp	r2, #10
   21ffc:	bcc	21f9c <__assert_fail@plt+0xfc30>
   22000:	mov	ip, #0
   22004:	cmp	r6, #10
   22008:	bcc	21f4c <__assert_fail@plt+0xfbe0>
   2200c:	mov	r0, ip
   22010:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   22014:	sub	ip, r7, r3
   22018:	mov	r0, ip
   2201c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   22020:	push	{r4, r5, r6, r7, fp, lr}
   22024:	add	fp, sp, #16
   22028:	mov	r4, r0
   2202c:	cmp	r0, #2
   22030:	bhi	22060 <__assert_fail@plt+0xfcf4>
   22034:	mov	r0, r4
   22038:	bl	24b9c <_obstack_memory_used@@Base+0xb4>
   2203c:	mov	r5, r0
   22040:	bl	12198 <__errno_location@plt>
   22044:	ldr	r7, [r0]
   22048:	mov	r6, r0
   2204c:	mov	r0, r4
   22050:	bl	12354 <close@plt>
   22054:	mov	r0, r5
   22058:	str	r7, [r6]
   2205c:	pop	{r4, r5, r6, r7, fp, pc}
   22060:	mov	r0, r4
   22064:	pop	{r4, r5, r6, r7, fp, pc}
   22068:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   2206c:	add	fp, sp, #24
   22070:	sub	sp, sp, #32
   22074:	ldr	r6, [fp, #12]
   22078:	ldr	r7, [fp, #8]
   2207c:	mov	r4, r2
   22080:	mov	r8, r0
   22084:	cmp	r1, #0
   22088:	beq	220b0 <__assert_fail@plt+0xfd44>
   2208c:	movw	r2, #29654	; 0x73d6
   22090:	mov	r5, r1
   22094:	str	r3, [sp, #4]
   22098:	str	r4, [sp]
   2209c:	mov	r0, r8
   220a0:	mov	r1, #1
   220a4:	movt	r2, #2
   220a8:	mov	r3, r5
   220ac:	b	220c8 <__assert_fail@plt+0xfd5c>
   220b0:	movw	r2, #29666	; 0x73e2
   220b4:	str	r3, [sp]
   220b8:	mov	r0, r8
   220bc:	mov	r1, #1
   220c0:	mov	r3, r4
   220c4:	movt	r2, #2
   220c8:	bl	121f8 <__fprintf_chk@plt>
   220cc:	movw	r1, #29673	; 0x73e9
   220d0:	mov	r0, #0
   220d4:	mov	r2, #5
   220d8:	movt	r1, #2
   220dc:	bl	11f7c <dcgettext@plt>
   220e0:	movw	r2, #30391	; 0x76b7
   220e4:	mov	r3, r0
   220e8:	movw	r0, #2022	; 0x7e6
   220ec:	mov	r1, #1
   220f0:	movt	r2, #2
   220f4:	str	r0, [sp]
   220f8:	mov	r0, r8
   220fc:	bl	121f8 <__fprintf_chk@plt>
   22100:	movw	r4, #21099	; 0x526b
   22104:	mov	r1, r8
   22108:	movt	r4, #2
   2210c:	mov	r0, r4
   22110:	bl	11e38 <fputs_unlocked@plt>
   22114:	movw	r1, #29677	; 0x73ed
   22118:	mov	r0, #0
   2211c:	mov	r2, #5
   22120:	movt	r1, #2
   22124:	bl	11f7c <dcgettext@plt>
   22128:	movw	r3, #29848	; 0x7498
   2212c:	mov	r2, r0
   22130:	mov	r0, r8
   22134:	mov	r1, #1
   22138:	movt	r3, #2
   2213c:	bl	121f8 <__fprintf_chk@plt>
   22140:	mov	r0, r4
   22144:	mov	r1, r8
   22148:	bl	11e38 <fputs_unlocked@plt>
   2214c:	cmp	r6, #9
   22150:	bhi	2218c <__assert_fail@plt+0xfe20>
   22154:	add	r0, pc, #0
   22158:	ldr	pc, [r0, r6, lsl #2]
   2215c:	andeq	r2, r2, r4, lsl #3
   22160:	muleq	r2, r8, r1
   22164:	andeq	r2, r2, r8, asr #3
   22168:	strdeq	r2, [r2], -r0
   2216c:	andeq	r2, r2, r8, lsl r2
   22170:	andeq	r2, r2, r0, asr #4
   22174:	andeq	r2, r2, r8, ror #4
   22178:	andeq	r2, r2, r0, lsr #5
   2217c:	andeq	r2, r2, r0, asr #6
   22180:	andeq	r2, r2, r8, ror #5
   22184:	sub	sp, fp, #24
   22188:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   2218c:	movw	r1, #30201	; 0x75f9
   22190:	movt	r1, #2
   22194:	b	222f0 <__assert_fail@plt+0xff84>
   22198:	movw	r1, #29882	; 0x74ba
   2219c:	mov	r0, #0
   221a0:	mov	r2, #5
   221a4:	movt	r1, #2
   221a8:	bl	11f7c <dcgettext@plt>
   221ac:	ldr	r3, [r7]
   221b0:	mov	r2, r0
   221b4:	mov	r0, r8
   221b8:	mov	r1, #1
   221bc:	sub	sp, fp, #24
   221c0:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   221c4:	b	121f8 <__fprintf_chk@plt>
   221c8:	movw	r1, #29898	; 0x74ca
   221cc:	mov	r0, #0
   221d0:	mov	r2, #5
   221d4:	movt	r1, #2
   221d8:	bl	11f7c <dcgettext@plt>
   221dc:	mov	r2, r0
   221e0:	ldr	r3, [r7]
   221e4:	ldr	r0, [r7, #4]
   221e8:	str	r0, [sp]
   221ec:	b	222dc <__assert_fail@plt+0xff70>
   221f0:	movw	r1, #29921	; 0x74e1
   221f4:	mov	r0, #0
   221f8:	mov	r2, #5
   221fc:	movt	r1, #2
   22200:	bl	11f7c <dcgettext@plt>
   22204:	mov	r2, r0
   22208:	ldr	r3, [r7]
   2220c:	ldmib	r7, {r0, r1}
   22210:	stm	sp, {r0, r1}
   22214:	b	222dc <__assert_fail@plt+0xff70>
   22218:	movw	r1, #29949	; 0x74fd
   2221c:	mov	r0, #0
   22220:	mov	r2, #5
   22224:	movt	r1, #2
   22228:	bl	11f7c <dcgettext@plt>
   2222c:	ldr	r3, [r7]
   22230:	mov	r2, r0
   22234:	ldmib	r7, {r0, r1, r7}
   22238:	stm	sp, {r0, r1, r7}
   2223c:	b	222dc <__assert_fail@plt+0xff70>
   22240:	movw	r1, #29981	; 0x751d
   22244:	mov	r0, #0
   22248:	mov	r2, #5
   2224c:	movt	r1, #2
   22250:	bl	11f7c <dcgettext@plt>
   22254:	ldr	r3, [r7]
   22258:	mov	r2, r0
   2225c:	ldmib	r7, {r0, r1, r6, r7}
   22260:	stm	sp, {r0, r1, r6, r7}
   22264:	b	222dc <__assert_fail@plt+0xff70>
   22268:	movw	r1, #30017	; 0x7541
   2226c:	mov	r0, #0
   22270:	mov	r2, #5
   22274:	movt	r1, #2
   22278:	bl	11f7c <dcgettext@plt>
   2227c:	mov	r2, r0
   22280:	ldr	r3, [r7]
   22284:	ldmib	r7, {r0, r1, r6}
   22288:	ldr	r5, [r7, #16]
   2228c:	ldr	r7, [r7, #20]
   22290:	stm	sp, {r0, r1, r6}
   22294:	str	r5, [sp, #12]
   22298:	str	r7, [sp, #16]
   2229c:	b	222dc <__assert_fail@plt+0xff70>
   222a0:	movw	r1, #30057	; 0x7569
   222a4:	mov	r0, #0
   222a8:	mov	r2, #5
   222ac:	movt	r1, #2
   222b0:	bl	11f7c <dcgettext@plt>
   222b4:	mov	r2, r0
   222b8:	ldr	r3, [r7]
   222bc:	ldmib	r7, {r0, r1, r6}
   222c0:	ldr	r5, [r7, #16]
   222c4:	ldr	r4, [r7, #20]
   222c8:	ldr	r7, [r7, #24]
   222cc:	stm	sp, {r0, r1, r6}
   222d0:	str	r5, [sp, #12]
   222d4:	str	r4, [sp, #16]
   222d8:	str	r7, [sp, #20]
   222dc:	mov	r0, r8
   222e0:	mov	r1, #1
   222e4:	b	22390 <__assert_fail@plt+0x10024>
   222e8:	movw	r1, #30149	; 0x75c5
   222ec:	movt	r1, #2
   222f0:	mov	r0, #0
   222f4:	mov	r2, #5
   222f8:	bl	11f7c <dcgettext@plt>
   222fc:	mov	ip, r0
   22300:	ldr	r3, [r7]
   22304:	ldr	r0, [r7, #4]
   22308:	ldr	r1, [r7, #8]
   2230c:	ldr	r6, [r7, #12]
   22310:	ldr	r5, [r7, #16]
   22314:	ldr	r4, [r7, #20]
   22318:	ldr	r2, [r7, #24]
   2231c:	ldr	lr, [r7, #28]
   22320:	ldr	r7, [r7, #32]
   22324:	stm	sp, {r0, r1, r6}
   22328:	str	r5, [sp, #12]
   2232c:	str	r4, [sp, #16]
   22330:	str	r2, [sp, #20]
   22334:	str	lr, [sp, #24]
   22338:	str	r7, [sp, #28]
   2233c:	b	22384 <__assert_fail@plt+0x10018>
   22340:	movw	r1, #30101	; 0x7595
   22344:	mov	r0, #0
   22348:	mov	r2, #5
   2234c:	movt	r1, #2
   22350:	bl	11f7c <dcgettext@plt>
   22354:	mov	ip, r0
   22358:	ldr	r3, [r7]
   2235c:	ldmib	r7, {r0, r1, r6}
   22360:	ldr	r5, [r7, #16]
   22364:	ldr	r4, [r7, #20]
   22368:	ldr	r2, [r7, #24]
   2236c:	ldr	r7, [r7, #28]
   22370:	stm	sp, {r0, r1, r6}
   22374:	str	r5, [sp, #12]
   22378:	str	r4, [sp, #16]
   2237c:	str	r2, [sp, #20]
   22380:	str	r7, [sp, #24]
   22384:	mov	r0, r8
   22388:	mov	r1, #1
   2238c:	mov	r2, ip
   22390:	bl	121f8 <__fprintf_chk@plt>
   22394:	sub	sp, fp, #24
   22398:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   2239c:	push	{r4, sl, fp, lr}
   223a0:	add	fp, sp, #8
   223a4:	sub	sp, sp, #8
   223a8:	ldr	ip, [fp, #8]
   223ac:	mov	lr, #0
   223b0:	ldr	r4, [ip, lr, lsl #2]
   223b4:	add	lr, lr, #1
   223b8:	cmp	r4, #0
   223bc:	bne	223b0 <__assert_fail@plt+0x10044>
   223c0:	sub	r4, lr, #1
   223c4:	str	ip, [sp]
   223c8:	str	r4, [sp, #4]
   223cc:	bl	22068 <__assert_fail@plt+0xfcfc>
   223d0:	sub	sp, fp, #8
   223d4:	pop	{r4, sl, fp, pc}
   223d8:	push	{fp, lr}
   223dc:	mov	fp, sp
   223e0:	sub	sp, sp, #48	; 0x30
   223e4:	ldr	ip, [fp, #8]
   223e8:	ldr	lr, [ip]
   223ec:	cmp	lr, #0
   223f0:	str	lr, [sp, #8]
   223f4:	beq	22490 <__assert_fail@plt+0x10124>
   223f8:	ldr	lr, [ip, #4]
   223fc:	cmp	lr, #0
   22400:	str	lr, [sp, #12]
   22404:	beq	22498 <__assert_fail@plt+0x1012c>
   22408:	ldr	lr, [ip, #8]
   2240c:	cmp	lr, #0
   22410:	str	lr, [sp, #16]
   22414:	beq	224a0 <__assert_fail@plt+0x10134>
   22418:	ldr	lr, [ip, #12]
   2241c:	cmp	lr, #0
   22420:	str	lr, [sp, #20]
   22424:	beq	224a8 <__assert_fail@plt+0x1013c>
   22428:	ldr	lr, [ip, #16]
   2242c:	cmp	lr, #0
   22430:	str	lr, [sp, #24]
   22434:	beq	224b0 <__assert_fail@plt+0x10144>
   22438:	ldr	lr, [ip, #20]
   2243c:	cmp	lr, #0
   22440:	str	lr, [sp, #28]
   22444:	beq	224b8 <__assert_fail@plt+0x1014c>
   22448:	ldr	lr, [ip, #24]
   2244c:	cmp	lr, #0
   22450:	str	lr, [sp, #32]
   22454:	beq	224c0 <__assert_fail@plt+0x10154>
   22458:	ldr	lr, [ip, #28]
   2245c:	cmp	lr, #0
   22460:	str	lr, [sp, #36]	; 0x24
   22464:	beq	224c8 <__assert_fail@plt+0x1015c>
   22468:	ldr	lr, [ip, #32]
   2246c:	cmp	lr, #0
   22470:	str	lr, [sp, #40]	; 0x28
   22474:	beq	224d0 <__assert_fail@plt+0x10164>
   22478:	ldr	lr, [ip, #36]	; 0x24
   2247c:	mov	ip, #10
   22480:	cmp	lr, #0
   22484:	str	lr, [sp, #44]	; 0x2c
   22488:	movweq	ip, #9
   2248c:	b	224d4 <__assert_fail@plt+0x10168>
   22490:	mov	ip, #0
   22494:	b	224d4 <__assert_fail@plt+0x10168>
   22498:	mov	ip, #1
   2249c:	b	224d4 <__assert_fail@plt+0x10168>
   224a0:	mov	ip, #2
   224a4:	b	224d4 <__assert_fail@plt+0x10168>
   224a8:	mov	ip, #3
   224ac:	b	224d4 <__assert_fail@plt+0x10168>
   224b0:	mov	ip, #4
   224b4:	b	224d4 <__assert_fail@plt+0x10168>
   224b8:	mov	ip, #5
   224bc:	b	224d4 <__assert_fail@plt+0x10168>
   224c0:	mov	ip, #6
   224c4:	b	224d4 <__assert_fail@plt+0x10168>
   224c8:	mov	ip, #7
   224cc:	b	224d4 <__assert_fail@plt+0x10168>
   224d0:	mov	ip, #8
   224d4:	add	lr, sp, #8
   224d8:	str	ip, [sp, #4]
   224dc:	str	lr, [sp]
   224e0:	bl	22068 <__assert_fail@plt+0xfcfc>
   224e4:	mov	sp, fp
   224e8:	pop	{fp, pc}
   224ec:	push	{fp, lr}
   224f0:	mov	fp, sp
   224f4:	sub	sp, sp, #56	; 0x38
   224f8:	add	ip, fp, #8
   224fc:	str	ip, [sp, #12]
   22500:	ldr	lr, [fp, #8]
   22504:	cmp	lr, #0
   22508:	str	lr, [sp, #16]
   2250c:	beq	225a8 <__assert_fail@plt+0x1023c>
   22510:	ldr	lr, [ip, #4]
   22514:	cmp	lr, #0
   22518:	str	lr, [sp, #20]
   2251c:	beq	225b0 <__assert_fail@plt+0x10244>
   22520:	ldr	lr, [ip, #8]
   22524:	cmp	lr, #0
   22528:	str	lr, [sp, #24]
   2252c:	beq	225b8 <__assert_fail@plt+0x1024c>
   22530:	ldr	lr, [ip, #12]
   22534:	cmp	lr, #0
   22538:	str	lr, [sp, #28]
   2253c:	beq	225c0 <__assert_fail@plt+0x10254>
   22540:	ldr	lr, [ip, #16]
   22544:	cmp	lr, #0
   22548:	str	lr, [sp, #32]
   2254c:	beq	225c8 <__assert_fail@plt+0x1025c>
   22550:	ldr	lr, [ip, #20]
   22554:	cmp	lr, #0
   22558:	str	lr, [sp, #36]	; 0x24
   2255c:	beq	225d0 <__assert_fail@plt+0x10264>
   22560:	ldr	lr, [ip, #24]
   22564:	cmp	lr, #0
   22568:	str	lr, [sp, #40]	; 0x28
   2256c:	beq	225d8 <__assert_fail@plt+0x1026c>
   22570:	ldr	lr, [ip, #28]
   22574:	cmp	lr, #0
   22578:	str	lr, [sp, #44]	; 0x2c
   2257c:	beq	225e0 <__assert_fail@plt+0x10274>
   22580:	ldr	lr, [ip, #32]
   22584:	cmp	lr, #0
   22588:	str	lr, [sp, #48]	; 0x30
   2258c:	beq	225e8 <__assert_fail@plt+0x1027c>
   22590:	ldr	lr, [ip, #36]	; 0x24
   22594:	mov	ip, #10
   22598:	cmp	lr, #0
   2259c:	str	lr, [sp, #52]	; 0x34
   225a0:	movweq	ip, #9
   225a4:	b	225ec <__assert_fail@plt+0x10280>
   225a8:	mov	ip, #0
   225ac:	b	225ec <__assert_fail@plt+0x10280>
   225b0:	mov	ip, #1
   225b4:	b	225ec <__assert_fail@plt+0x10280>
   225b8:	mov	ip, #2
   225bc:	b	225ec <__assert_fail@plt+0x10280>
   225c0:	mov	ip, #3
   225c4:	b	225ec <__assert_fail@plt+0x10280>
   225c8:	mov	ip, #4
   225cc:	b	225ec <__assert_fail@plt+0x10280>
   225d0:	mov	ip, #5
   225d4:	b	225ec <__assert_fail@plt+0x10280>
   225d8:	mov	ip, #6
   225dc:	b	225ec <__assert_fail@plt+0x10280>
   225e0:	mov	ip, #7
   225e4:	b	225ec <__assert_fail@plt+0x10280>
   225e8:	mov	ip, #8
   225ec:	add	lr, sp, #16
   225f0:	str	ip, [sp, #4]
   225f4:	str	lr, [sp]
   225f8:	bl	22068 <__assert_fail@plt+0xfcfc>
   225fc:	mov	sp, fp
   22600:	pop	{fp, pc}
   22604:	push	{fp, lr}
   22608:	mov	fp, sp
   2260c:	movw	r0, #33500	; 0x82dc
   22610:	movt	r0, #3
   22614:	ldr	r1, [r0]
   22618:	movw	r0, #21099	; 0x526b
   2261c:	movt	r0, #2
   22620:	bl	11e38 <fputs_unlocked@plt>
   22624:	movw	r1, #30261	; 0x7635
   22628:	mov	r0, #0
   2262c:	mov	r2, #5
   22630:	movt	r1, #2
   22634:	bl	11f7c <dcgettext@plt>
   22638:	movw	r2, #30281	; 0x7649
   2263c:	mov	r1, r0
   22640:	mov	r0, #1
   22644:	movt	r2, #2
   22648:	bl	121d4 <__printf_chk@plt>
   2264c:	movw	r1, #30303	; 0x765f
   22650:	mov	r0, #0
   22654:	mov	r2, #5
   22658:	movt	r1, #2
   2265c:	bl	11f7c <dcgettext@plt>
   22660:	movw	r2, #25148	; 0x623c
   22664:	movw	r3, #25833	; 0x64e9
   22668:	mov	r1, r0
   2266c:	mov	r0, #1
   22670:	movt	r2, #2
   22674:	movt	r3, #2
   22678:	bl	121d4 <__printf_chk@plt>
   2267c:	movw	r1, #30323	; 0x7673
   22680:	mov	r0, #0
   22684:	mov	r2, #5
   22688:	movt	r1, #2
   2268c:	bl	11f7c <dcgettext@plt>
   22690:	movw	r2, #30362	; 0x769a
   22694:	mov	r1, r0
   22698:	mov	r0, #1
   2269c:	movt	r2, #2
   226a0:	pop	{fp, lr}
   226a4:	b	121d4 <__printf_chk@plt>
   226a8:	push	{r4, r5, r6, sl, fp, lr}
   226ac:	add	fp, sp, #16
   226b0:	mov	r4, r2
   226b4:	mov	r5, r1
   226b8:	mov	r6, r0
   226bc:	bl	24b60 <_obstack_memory_used@@Base+0x78>
   226c0:	cmp	r0, #0
   226c4:	popne	{r4, r5, r6, sl, fp, pc}
   226c8:	cmp	r6, #0
   226cc:	beq	226e0 <__assert_fail@plt+0x10374>
   226d0:	cmp	r5, #0
   226d4:	cmpne	r4, #0
   226d8:	bne	226e0 <__assert_fail@plt+0x10374>
   226dc:	pop	{r4, r5, r6, sl, fp, pc}
   226e0:	bl	22c5c <__assert_fail@plt+0x108f0>
   226e4:	push	{r4, r5, r6, sl, fp, lr}
   226e8:	add	fp, sp, #16
   226ec:	mov	r4, r2
   226f0:	mov	r5, r1
   226f4:	mov	r6, r0
   226f8:	bl	24b60 <_obstack_memory_used@@Base+0x78>
   226fc:	cmp	r0, #0
   22700:	popne	{r4, r5, r6, sl, fp, pc}
   22704:	cmp	r6, #0
   22708:	beq	2271c <__assert_fail@plt+0x103b0>
   2270c:	cmp	r5, #0
   22710:	cmpne	r4, #0
   22714:	bne	2271c <__assert_fail@plt+0x103b0>
   22718:	pop	{r4, r5, r6, sl, fp, pc}
   2271c:	bl	22c5c <__assert_fail@plt+0x108f0>
   22720:	push	{fp, lr}
   22724:	mov	fp, sp
   22728:	bl	23cf8 <__assert_fail@plt+0x1198c>
   2272c:	cmp	r0, #0
   22730:	popne	{fp, pc}
   22734:	bl	22c5c <__assert_fail@plt+0x108f0>
   22738:	push	{fp, lr}
   2273c:	mov	fp, sp
   22740:	bl	23cf8 <__assert_fail@plt+0x1198c>
   22744:	cmp	r0, #0
   22748:	popne	{fp, pc}
   2274c:	bl	22c5c <__assert_fail@plt+0x108f0>
   22750:	push	{fp, lr}
   22754:	mov	fp, sp
   22758:	bl	23cf8 <__assert_fail@plt+0x1198c>
   2275c:	cmp	r0, #0
   22760:	popne	{fp, pc}
   22764:	bl	22c5c <__assert_fail@plt+0x108f0>
   22768:	push	{r4, r5, fp, lr}
   2276c:	add	fp, sp, #8
   22770:	mov	r4, r1
   22774:	mov	r5, r0
   22778:	bl	23d28 <__assert_fail@plt+0x119bc>
   2277c:	cmp	r0, #0
   22780:	popne	{r4, r5, fp, pc}
   22784:	cmp	r5, #0
   22788:	beq	22798 <__assert_fail@plt+0x1042c>
   2278c:	cmp	r4, #0
   22790:	bne	22798 <__assert_fail@plt+0x1042c>
   22794:	pop	{r4, r5, fp, pc}
   22798:	bl	22c5c <__assert_fail@plt+0x108f0>
   2279c:	push	{fp, lr}
   227a0:	mov	fp, sp
   227a4:	cmp	r1, #0
   227a8:	orreq	r1, r1, #1
   227ac:	bl	23d28 <__assert_fail@plt+0x119bc>
   227b0:	cmp	r0, #0
   227b4:	popne	{fp, pc}
   227b8:	bl	22c5c <__assert_fail@plt+0x108f0>
   227bc:	push	{fp, lr}
   227c0:	mov	fp, sp
   227c4:	clz	r3, r2
   227c8:	lsr	ip, r3, #5
   227cc:	clz	r3, r1
   227d0:	lsr	r3, r3, #5
   227d4:	orrs	r3, r3, ip
   227d8:	movwne	r1, #1
   227dc:	movwne	r2, #1
   227e0:	bl	24b60 <_obstack_memory_used@@Base+0x78>
   227e4:	cmp	r0, #0
   227e8:	popne	{fp, pc}
   227ec:	bl	22c5c <__assert_fail@plt+0x108f0>
   227f0:	push	{fp, lr}
   227f4:	mov	fp, sp
   227f8:	mov	r2, r1
   227fc:	mov	r1, r0
   22800:	mov	r0, #0
   22804:	bl	24b60 <_obstack_memory_used@@Base+0x78>
   22808:	cmp	r0, #0
   2280c:	popne	{fp, pc}
   22810:	bl	22c5c <__assert_fail@plt+0x108f0>
   22814:	push	{fp, lr}
   22818:	mov	fp, sp
   2281c:	mov	r2, r1
   22820:	mov	r1, r0
   22824:	clz	r0, r2
   22828:	clz	r3, r1
   2282c:	lsr	r0, r0, #5
   22830:	lsr	r3, r3, #5
   22834:	orrs	r0, r3, r0
   22838:	mov	r0, #0
   2283c:	movwne	r1, #1
   22840:	movwne	r2, #1
   22844:	bl	24b60 <_obstack_memory_used@@Base+0x78>
   22848:	cmp	r0, #0
   2284c:	popne	{fp, pc}
   22850:	bl	22c5c <__assert_fail@plt+0x108f0>
   22854:	push	{r4, r5, r6, sl, fp, lr}
   22858:	add	fp, sp, #16
   2285c:	ldr	r5, [r1]
   22860:	mov	r4, r1
   22864:	mov	r6, r0
   22868:	cmp	r0, #0
   2286c:	beq	22884 <__assert_fail@plt+0x10518>
   22870:	mov	r0, #1
   22874:	add	r0, r0, r5, lsr #1
   22878:	adds	r5, r5, r0
   2287c:	bcc	2288c <__assert_fail@plt+0x10520>
   22880:	b	228c8 <__assert_fail@plt+0x1055c>
   22884:	cmp	r5, #0
   22888:	movweq	r5, #64	; 0x40
   2288c:	mov	r0, r6
   22890:	mov	r1, r5
   22894:	mov	r2, #1
   22898:	bl	24b60 <_obstack_memory_used@@Base+0x78>
   2289c:	cmp	r5, #0
   228a0:	mov	r1, r5
   228a4:	movwne	r1, #1
   228a8:	cmp	r0, #0
   228ac:	bne	228c0 <__assert_fail@plt+0x10554>
   228b0:	clz	r2, r6
   228b4:	lsr	r2, r2, #5
   228b8:	orrs	r1, r2, r1
   228bc:	bne	228c8 <__assert_fail@plt+0x1055c>
   228c0:	str	r5, [r4]
   228c4:	pop	{r4, r5, r6, sl, fp, pc}
   228c8:	bl	22c5c <__assert_fail@plt+0x108f0>
   228cc:	push	{r4, r5, r6, r7, fp, lr}
   228d0:	add	fp, sp, #16
   228d4:	ldr	r5, [r1]
   228d8:	mov	r6, r2
   228dc:	mov	r4, r1
   228e0:	mov	r7, r0
   228e4:	cmp	r0, #0
   228e8:	beq	22900 <__assert_fail@plt+0x10594>
   228ec:	mov	r0, #1
   228f0:	add	r0, r0, r5, lsr #1
   228f4:	adds	r5, r5, r0
   228f8:	bcc	22918 <__assert_fail@plt+0x105ac>
   228fc:	b	2294c <__assert_fail@plt+0x105e0>
   22900:	cmp	r5, #0
   22904:	bne	22918 <__assert_fail@plt+0x105ac>
   22908:	mov	r0, #64	; 0x40
   2290c:	cmp	r6, #64	; 0x40
   22910:	udiv	r5, r0, r6
   22914:	addhi	r5, r5, #1
   22918:	mov	r0, r7
   2291c:	mov	r1, r5
   22920:	mov	r2, r6
   22924:	bl	24b60 <_obstack_memory_used@@Base+0x78>
   22928:	cmp	r0, #0
   2292c:	bne	22944 <__assert_fail@plt+0x105d8>
   22930:	cmp	r7, #0
   22934:	beq	2294c <__assert_fail@plt+0x105e0>
   22938:	cmp	r6, #0
   2293c:	cmpne	r5, #0
   22940:	bne	2294c <__assert_fail@plt+0x105e0>
   22944:	str	r5, [r4]
   22948:	pop	{r4, r5, r6, r7, fp, pc}
   2294c:	bl	22c5c <__assert_fail@plt+0x108f0>
   22950:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   22954:	add	fp, sp, #24
   22958:	mov	r8, r1
   2295c:	ldr	r1, [r1]
   22960:	mov	r5, r0
   22964:	add	r0, r1, r1, asr #1
   22968:	cmp	r0, r1
   2296c:	mvnvs	r0, #-2147483648	; 0x80000000
   22970:	cmp	r0, r3
   22974:	mov	r7, r0
   22978:	movgt	r7, r3
   2297c:	cmn	r3, #1
   22980:	movle	r7, r0
   22984:	ldr	r0, [fp, #8]
   22988:	cmn	r0, #1
   2298c:	ble	229b4 <__assert_fail@plt+0x10648>
   22990:	cmp	r0, #0
   22994:	beq	22a08 <__assert_fail@plt+0x1069c>
   22998:	cmn	r7, #1
   2299c:	ble	229dc <__assert_fail@plt+0x10670>
   229a0:	mvn	r4, #-2147483648	; 0x80000000
   229a4:	udiv	r6, r4, r0
   229a8:	cmp	r6, r7
   229ac:	bge	22a08 <__assert_fail@plt+0x1069c>
   229b0:	b	22a18 <__assert_fail@plt+0x106ac>
   229b4:	cmn	r7, #1
   229b8:	ble	229f8 <__assert_fail@plt+0x1068c>
   229bc:	cmn	r0, #1
   229c0:	beq	22a08 <__assert_fail@plt+0x1069c>
   229c4:	mov	r6, #-2147483648	; 0x80000000
   229c8:	mvn	r4, #-2147483648	; 0x80000000
   229cc:	sdiv	r6, r6, r0
   229d0:	cmp	r6, r7
   229d4:	bge	22a08 <__assert_fail@plt+0x1069c>
   229d8:	b	22a18 <__assert_fail@plt+0x106ac>
   229dc:	beq	22a08 <__assert_fail@plt+0x1069c>
   229e0:	mov	r6, #-2147483648	; 0x80000000
   229e4:	mvn	r4, #-2147483648	; 0x80000000
   229e8:	sdiv	r6, r6, r7
   229ec:	cmp	r6, r0
   229f0:	bge	22a08 <__assert_fail@plt+0x1069c>
   229f4:	b	22a18 <__assert_fail@plt+0x106ac>
   229f8:	mvn	r4, #-2147483648	; 0x80000000
   229fc:	sdiv	r6, r4, r0
   22a00:	cmp	r7, r6
   22a04:	blt	22a18 <__assert_fail@plt+0x106ac>
   22a08:	mul	r6, r7, r0
   22a0c:	mov	r4, #64	; 0x40
   22a10:	cmp	r6, #63	; 0x3f
   22a14:	bgt	22a20 <__assert_fail@plt+0x106b4>
   22a18:	sdiv	r7, r4, r0
   22a1c:	mul	r6, r7, r0
   22a20:	cmp	r5, #0
   22a24:	moveq	r4, #0
   22a28:	streq	r4, [r8]
   22a2c:	sub	r4, r7, r1
   22a30:	cmp	r4, r2
   22a34:	bge	22ae0 <__assert_fail@plt+0x10774>
   22a38:	add	r7, r1, r2
   22a3c:	mov	r6, #0
   22a40:	mov	r2, #0
   22a44:	cmp	r7, r3
   22a48:	movwgt	r6, #1
   22a4c:	cmn	r3, #1
   22a50:	movwgt	r2, #1
   22a54:	cmp	r7, r1
   22a58:	bvs	22b14 <__assert_fail@plt+0x107a8>
   22a5c:	ands	r1, r2, r6
   22a60:	bne	22b14 <__assert_fail@plt+0x107a8>
   22a64:	cmn	r0, #1
   22a68:	ble	22a90 <__assert_fail@plt+0x10724>
   22a6c:	cmp	r0, #0
   22a70:	beq	22adc <__assert_fail@plt+0x10770>
   22a74:	cmn	r7, #1
   22a78:	ble	22ab4 <__assert_fail@plt+0x10748>
   22a7c:	mvn	r1, #-2147483648	; 0x80000000
   22a80:	udiv	r1, r1, r0
   22a84:	cmp	r1, r7
   22a88:	bge	22adc <__assert_fail@plt+0x10770>
   22a8c:	b	22b14 <__assert_fail@plt+0x107a8>
   22a90:	cmn	r7, #1
   22a94:	ble	22acc <__assert_fail@plt+0x10760>
   22a98:	cmn	r0, #1
   22a9c:	beq	22adc <__assert_fail@plt+0x10770>
   22aa0:	mov	r1, #-2147483648	; 0x80000000
   22aa4:	sdiv	r1, r1, r0
   22aa8:	cmp	r1, r7
   22aac:	bge	22adc <__assert_fail@plt+0x10770>
   22ab0:	b	22b14 <__assert_fail@plt+0x107a8>
   22ab4:	beq	22adc <__assert_fail@plt+0x10770>
   22ab8:	mov	r1, #-2147483648	; 0x80000000
   22abc:	sdiv	r1, r1, r7
   22ac0:	cmp	r1, r0
   22ac4:	bge	22adc <__assert_fail@plt+0x10770>
   22ac8:	b	22b14 <__assert_fail@plt+0x107a8>
   22acc:	mvn	r1, #-2147483648	; 0x80000000
   22ad0:	sdiv	r1, r1, r0
   22ad4:	cmp	r7, r1
   22ad8:	blt	22b14 <__assert_fail@plt+0x107a8>
   22adc:	mul	r6, r7, r0
   22ae0:	mov	r0, r5
   22ae4:	mov	r1, r6
   22ae8:	bl	23d28 <__assert_fail@plt+0x119bc>
   22aec:	cmp	r6, #0
   22af0:	movwne	r6, #1
   22af4:	cmp	r0, #0
   22af8:	bne	22b0c <__assert_fail@plt+0x107a0>
   22afc:	clz	r1, r5
   22b00:	lsr	r1, r1, #5
   22b04:	orrs	r1, r1, r6
   22b08:	bne	22b14 <__assert_fail@plt+0x107a8>
   22b0c:	str	r7, [r8]
   22b10:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   22b14:	bl	22c5c <__assert_fail@plt+0x108f0>
   22b18:	push	{fp, lr}
   22b1c:	mov	fp, sp
   22b20:	mov	r1, #1
   22b24:	bl	23ca4 <__assert_fail@plt+0x11938>
   22b28:	cmp	r0, #0
   22b2c:	popne	{fp, pc}
   22b30:	bl	22c5c <__assert_fail@plt+0x108f0>
   22b34:	push	{fp, lr}
   22b38:	mov	fp, sp
   22b3c:	bl	23ca4 <__assert_fail@plt+0x11938>
   22b40:	cmp	r0, #0
   22b44:	popne	{fp, pc}
   22b48:	bl	22c5c <__assert_fail@plt+0x108f0>
   22b4c:	push	{fp, lr}
   22b50:	mov	fp, sp
   22b54:	mov	r1, #1
   22b58:	bl	23ca4 <__assert_fail@plt+0x11938>
   22b5c:	cmp	r0, #0
   22b60:	popne	{fp, pc}
   22b64:	bl	22c5c <__assert_fail@plt+0x108f0>
   22b68:	push	{fp, lr}
   22b6c:	mov	fp, sp
   22b70:	bl	23ca4 <__assert_fail@plt+0x11938>
   22b74:	cmp	r0, #0
   22b78:	popne	{fp, pc}
   22b7c:	bl	22c5c <__assert_fail@plt+0x108f0>
   22b80:	push	{r4, r5, fp, lr}
   22b84:	add	fp, sp, #8
   22b88:	mov	r5, r0
   22b8c:	mov	r0, r1
   22b90:	mov	r4, r1
   22b94:	bl	23cf8 <__assert_fail@plt+0x1198c>
   22b98:	cmp	r0, #0
   22b9c:	beq	22bb0 <__assert_fail@plt+0x10844>
   22ba0:	mov	r1, r5
   22ba4:	mov	r2, r4
   22ba8:	pop	{r4, r5, fp, lr}
   22bac:	b	11eec <memcpy@plt>
   22bb0:	bl	22c5c <__assert_fail@plt+0x108f0>
   22bb4:	push	{r4, r5, fp, lr}
   22bb8:	add	fp, sp, #8
   22bbc:	mov	r5, r0
   22bc0:	mov	r0, r1
   22bc4:	mov	r4, r1
   22bc8:	bl	23cf8 <__assert_fail@plt+0x1198c>
   22bcc:	cmp	r0, #0
   22bd0:	beq	22be4 <__assert_fail@plt+0x10878>
   22bd4:	mov	r1, r5
   22bd8:	mov	r2, r4
   22bdc:	pop	{r4, r5, fp, lr}
   22be0:	b	11eec <memcpy@plt>
   22be4:	bl	22c5c <__assert_fail@plt+0x108f0>
   22be8:	push	{r4, r5, fp, lr}
   22bec:	add	fp, sp, #8
   22bf0:	mov	r5, r0
   22bf4:	add	r0, r1, #1
   22bf8:	mov	r4, r1
   22bfc:	bl	23cf8 <__assert_fail@plt+0x1198c>
   22c00:	cmp	r0, #0
   22c04:	beq	22c20 <__assert_fail@plt+0x108b4>
   22c08:	mov	r1, #0
   22c0c:	mov	r2, r4
   22c10:	strb	r1, [r0, r4]
   22c14:	mov	r1, r5
   22c18:	pop	{r4, r5, fp, lr}
   22c1c:	b	11eec <memcpy@plt>
   22c20:	bl	22c5c <__assert_fail@plt+0x108f0>
   22c24:	push	{r4, r5, fp, lr}
   22c28:	add	fp, sp, #8
   22c2c:	mov	r4, r0
   22c30:	bl	12174 <strlen@plt>
   22c34:	add	r5, r0, #1
   22c38:	mov	r0, r5
   22c3c:	bl	23cf8 <__assert_fail@plt+0x1198c>
   22c40:	cmp	r0, #0
   22c44:	beq	22c58 <__assert_fail@plt+0x108ec>
   22c48:	mov	r1, r4
   22c4c:	mov	r2, r5
   22c50:	pop	{r4, r5, fp, lr}
   22c54:	b	11eec <memcpy@plt>
   22c58:	bl	22c5c <__assert_fail@plt+0x108f0>
   22c5c:	push	{fp, lr}
   22c60:	mov	fp, sp
   22c64:	movw	r0, #33392	; 0x8270
   22c68:	movw	r1, #30438	; 0x76e6
   22c6c:	mov	r2, #5
   22c70:	movt	r0, #3
   22c74:	movt	r1, #2
   22c78:	ldr	r4, [r0]
   22c7c:	mov	r0, #0
   22c80:	bl	11f7c <dcgettext@plt>
   22c84:	movw	r2, #29102	; 0x71ae
   22c88:	mov	r3, r0
   22c8c:	mov	r0, r4
   22c90:	mov	r1, #0
   22c94:	movt	r2, #2
   22c98:	bl	120a8 <error@plt>
   22c9c:	bl	12348 <abort@plt>
   22ca0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   22ca4:	add	fp, sp, #28
   22ca8:	sub	sp, sp, #4
   22cac:	mov	r9, r3
   22cb0:	mov	r6, r2
   22cb4:	mov	r7, r1
   22cb8:	mov	r4, r0
   22cbc:	bl	24578 <__assert_fail@plt+0x1220c>
   22cc0:	mov	r8, r0
   22cc4:	bl	12198 <__errno_location@plt>
   22cc8:	ldr	r5, [r0]
   22ccc:	cmp	r5, #0
   22cd0:	beq	22d84 <__assert_fail@plt+0x10a18>
   22cd4:	movw	r1, #30455	; 0x76f7
   22cd8:	mov	r0, #0
   22cdc:	mov	r2, #5
   22ce0:	movt	r1, #2
   22ce4:	bl	11f7c <dcgettext@plt>
   22ce8:	mov	r2, r0
   22cec:	mov	r0, #0
   22cf0:	mov	r1, r5
   22cf4:	bl	120a8 <error@plt>
   22cf8:	movw	r1, #30480	; 0x7710
   22cfc:	mov	r0, #0
   22d00:	mov	r2, #5
   22d04:	movt	r1, #2
   22d08:	bl	11f7c <dcgettext@plt>
   22d0c:	mov	r2, r0
   22d10:	mov	r0, #0
   22d14:	mov	r1, #0
   22d18:	bl	120a8 <error@plt>
   22d1c:	movw	r0, #33392	; 0x8270
   22d20:	movw	r1, #30523	; 0x773b
   22d24:	mov	r2, #5
   22d28:	movt	r0, #3
   22d2c:	movt	r1, #2
   22d30:	ldr	sl, [r0]
   22d34:	mov	r0, #0
   22d38:	bl	11f7c <dcgettext@plt>
   22d3c:	mov	r5, r0
   22d40:	mov	r0, #0
   22d44:	mov	r1, #8
   22d48:	mov	r2, r4
   22d4c:	mov	r3, r7
   22d50:	bl	20854 <__assert_fail@plt+0xe4e8>
   22d54:	mov	r4, r0
   22d58:	mov	r0, #1
   22d5c:	mov	r1, #8
   22d60:	mov	r2, r6
   22d64:	mov	r3, r9
   22d68:	bl	20854 <__assert_fail@plt+0xe4e8>
   22d6c:	str	r0, [sp]
   22d70:	mov	r0, sl
   22d74:	mov	r1, #0
   22d78:	mov	r2, r5
   22d7c:	mov	r3, r4
   22d80:	bl	120a8 <error@plt>
   22d84:	mov	r0, r8
   22d88:	sub	sp, fp, #28
   22d8c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   22d90:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   22d94:	add	fp, sp, #28
   22d98:	sub	sp, sp, #4
   22d9c:	mov	r6, r3
   22da0:	mov	r9, r2
   22da4:	mov	r4, r1
   22da8:	mov	r7, r0
   22dac:	bl	24694 <__assert_fail@plt+0x12328>
   22db0:	mov	r8, r0
   22db4:	bl	12198 <__errno_location@plt>
   22db8:	ldr	r5, [r0]
   22dbc:	cmp	r5, #0
   22dc0:	beq	22e74 <__assert_fail@plt+0x10b08>
   22dc4:	movw	r1, #30455	; 0x76f7
   22dc8:	mov	r0, #0
   22dcc:	mov	r2, #5
   22dd0:	movt	r1, #2
   22dd4:	bl	11f7c <dcgettext@plt>
   22dd8:	mov	r2, r0
   22ddc:	mov	r0, #0
   22de0:	mov	r1, r5
   22de4:	bl	120a8 <error@plt>
   22de8:	movw	r1, #30480	; 0x7710
   22dec:	mov	r0, #0
   22df0:	mov	r2, #5
   22df4:	movt	r1, #2
   22df8:	bl	11f7c <dcgettext@plt>
   22dfc:	mov	r2, r0
   22e00:	mov	r0, #0
   22e04:	mov	r1, #0
   22e08:	bl	120a8 <error@plt>
   22e0c:	movw	r0, #33392	; 0x8270
   22e10:	movw	r1, #30523	; 0x773b
   22e14:	mov	r2, #5
   22e18:	movt	r0, #3
   22e1c:	movt	r1, #2
   22e20:	ldr	sl, [r0]
   22e24:	mov	r0, #0
   22e28:	bl	11f7c <dcgettext@plt>
   22e2c:	mov	r5, r0
   22e30:	sub	r3, r4, #1
   22e34:	mov	r0, #0
   22e38:	mov	r1, #8
   22e3c:	mov	r2, r7
   22e40:	bl	20854 <__assert_fail@plt+0xe4e8>
   22e44:	mov	r4, r0
   22e48:	sub	r3, r6, #1
   22e4c:	mov	r0, #1
   22e50:	mov	r1, #8
   22e54:	mov	r2, r9
   22e58:	bl	20854 <__assert_fail@plt+0xe4e8>
   22e5c:	str	r0, [sp]
   22e60:	mov	r0, sl
   22e64:	mov	r1, #0
   22e68:	mov	r2, r5
   22e6c:	mov	r3, r4
   22e70:	bl	120a8 <error@plt>
   22e74:	mov	r0, r8
   22e78:	sub	sp, fp, #28
   22e7c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   22e80:	push	{r4, r5, r6, sl, fp, lr}
   22e84:	add	fp, sp, #16
   22e88:	vpush	{d8}
   22e8c:	sub	sp, sp, #8
   22e90:	vldr	d16, [pc, #160]	; 22f38 <__assert_fail@plt+0x10bcc>
   22e94:	vmov.f64	d8, d0
   22e98:	vcmpe.f64	d0, d16
   22e9c:	vmrs	APSR_nzcv, fpscr
   22ea0:	blt	22eb8 <__assert_fail@plt+0x10b4c>
   22ea4:	bl	11e74 <pause@plt>
   22ea8:	bl	12198 <__errno_location@plt>
   22eac:	ldr	r0, [r0]
   22eb0:	cmp	r0, #4
   22eb4:	beq	22ea4 <__assert_fail@plt+0x10b38>
   22eb8:	vmov.f64	d0, d8
   22ebc:	mov	r6, sp
   22ec0:	mov	r0, r6
   22ec4:	bl	24128 <__assert_fail@plt+0x11dbc>
   22ec8:	bl	12198 <__errno_location@plt>
   22ecc:	mov	r5, #0
   22ed0:	mov	r4, r0
   22ed4:	mov	r1, r6
   22ed8:	str	r5, [r0]
   22edc:	mov	r0, r6
   22ee0:	bl	11ec8 <nanosleep@plt>
   22ee4:	cmp	r0, #0
   22ee8:	beq	22f24 <__assert_fail@plt+0x10bb8>
   22eec:	mov	r6, sp
   22ef0:	mov	r5, #0
   22ef4:	ldr	r0, [r4]
   22ef8:	orr	r0, r0, #4
   22efc:	cmp	r0, #4
   22f00:	bne	22f20 <__assert_fail@plt+0x10bb4>
   22f04:	mov	r0, r6
   22f08:	mov	r1, r6
   22f0c:	str	r5, [r4]
   22f10:	bl	11ec8 <nanosleep@plt>
   22f14:	cmp	r0, #0
   22f18:	bne	22ef4 <__assert_fail@plt+0x10b88>
   22f1c:	b	22f24 <__assert_fail@plt+0x10bb8>
   22f20:	mvn	r5, #0
   22f24:	mov	r0, r5
   22f28:	sub	sp, fp, #24
   22f2c:	vpop	{d8}
   22f30:	pop	{r4, r5, r6, sl, fp, pc}
   22f34:	nop	{0}
   22f38:	andeq	r0, r0, r0
   22f3c:	mvnmi	r0, r0
   22f40:	push	{fp, lr}
   22f44:	mov	fp, sp
   22f48:	sub	sp, sp, #8
   22f4c:	movw	ip, #33392	; 0x8270
   22f50:	movt	ip, #3
   22f54:	ldr	ip, [ip]
   22f58:	str	ip, [sp, #4]
   22f5c:	ldr	ip, [fp, #8]
   22f60:	str	ip, [sp]
   22f64:	bl	22f6c <__assert_fail@plt+0x10c00>
   22f68:	bl	12348 <abort@plt>
   22f6c:	push	{r4, r5, r6, r7, fp, lr}
   22f70:	add	fp, sp, #16
   22f74:	sub	sp, sp, #16
   22f78:	sub	r0, r0, #1
   22f7c:	cmp	r0, #4
   22f80:	bcs	23000 <__assert_fail@plt+0x10c94>
   22f84:	mov	r5, r1
   22f88:	movw	r1, #30656	; 0x77c0
   22f8c:	ldr	r4, [fp, #12]
   22f90:	ldr	r6, [fp, #8]
   22f94:	movt	r1, #2
   22f98:	cmn	r5, #1
   22f9c:	ldr	r1, [r1, r0, lsl #2]
   22fa0:	ble	22fb4 <__assert_fail@plt+0x10c48>
   22fa4:	ldr	r7, [r3, r5, lsl #4]
   22fa8:	movw	r5, #30560	; 0x7760
   22fac:	movt	r5, #2
   22fb0:	b	22fd0 <__assert_fail@plt+0x10c64>
   22fb4:	mov	r0, #0
   22fb8:	add	r7, sp, #14
   22fbc:	strb	r0, [sp, #15]
   22fc0:	movw	r0, #30560	; 0x7760
   22fc4:	strb	r2, [sp, #14]
   22fc8:	movt	r0, #2
   22fcc:	sub	r5, r0, r5
   22fd0:	mov	r0, #0
   22fd4:	mov	r2, #5
   22fd8:	bl	11f7c <dcgettext@plt>
   22fdc:	mov	r2, r0
   22fe0:	mov	r0, r4
   22fe4:	mov	r1, #0
   22fe8:	mov	r3, r5
   22fec:	str	r7, [sp]
   22ff0:	str	r6, [sp, #4]
   22ff4:	bl	120a8 <error@plt>
   22ff8:	sub	sp, fp, #16
   22ffc:	pop	{r4, r5, r6, r7, fp, pc}
   23000:	bl	12348 <abort@plt>
   23004:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   23008:	add	fp, sp, #28
   2300c:	sub	sp, sp, #44	; 0x2c
   23010:	cmp	r2, #37	; 0x25
   23014:	bcs	23c84 <__assert_fail@plt+0x11918>
   23018:	ldr	sl, [fp, #8]
   2301c:	mov	r6, r2
   23020:	mov	r7, r1
   23024:	mov	r4, r0
   23028:	str	r3, [sp, #36]	; 0x24
   2302c:	bl	12198 <__errno_location@plt>
   23030:	mov	r5, r0
   23034:	mov	r0, #0
   23038:	str	r0, [r5]
   2303c:	bl	12144 <__ctype_b_loc@plt>
   23040:	ldr	r1, [r0]
   23044:	mov	r2, r4
   23048:	ldrb	r0, [r2], #1
   2304c:	add	r3, r1, r0, lsl #1
   23050:	ldrb	r3, [r3, #1]
   23054:	tst	r3, #32
   23058:	bne	23048 <__assert_fail@plt+0x10cdc>
   2305c:	cmp	r7, #0
   23060:	sub	r9, fp, #32
   23064:	mov	r8, #4
   23068:	movne	r9, r7
   2306c:	cmp	r0, #45	; 0x2d
   23070:	beq	23c78 <__assert_fail@plt+0x1190c>
   23074:	mov	r0, r4
   23078:	mov	r1, r9
   2307c:	mov	r2, r6
   23080:	mov	r3, #0
   23084:	bl	11f10 <__strtoull_internal@plt>
   23088:	mov	r7, r1
   2308c:	ldr	r1, [r9]
   23090:	cmp	r1, r4
   23094:	beq	230c0 <__assert_fail@plt+0x10d54>
   23098:	mov	r6, r0
   2309c:	ldr	r0, [r5]
   230a0:	cmp	r0, #0
   230a4:	beq	230fc <__assert_fail@plt+0x10d90>
   230a8:	cmp	r0, #34	; 0x22
   230ac:	bne	23c78 <__assert_fail@plt+0x1190c>
   230b0:	mov	r8, #1
   230b4:	cmp	sl, #0
   230b8:	bne	23108 <__assert_fail@plt+0x10d9c>
   230bc:	b	23c70 <__assert_fail@plt+0x11904>
   230c0:	cmp	sl, #0
   230c4:	beq	23c78 <__assert_fail@plt+0x1190c>
   230c8:	mov	r5, r1
   230cc:	ldrb	r1, [r4]
   230d0:	cmp	r1, #0
   230d4:	beq	23c78 <__assert_fail@plt+0x1190c>
   230d8:	mov	r0, sl
   230dc:	bl	12180 <strchr@plt>
   230e0:	cmp	r0, #0
   230e4:	beq	23c78 <__assert_fail@plt+0x1190c>
   230e8:	mov	r1, r5
   230ec:	mov	r8, #0
   230f0:	mov	r6, #1
   230f4:	mov	r7, #0
   230f8:	b	23108 <__assert_fail@plt+0x10d9c>
   230fc:	mov	r8, r0
   23100:	cmp	sl, #0
   23104:	beq	23c70 <__assert_fail@plt+0x11904>
   23108:	ldrb	r4, [r1]
   2310c:	cmp	r4, #0
   23110:	beq	23c70 <__assert_fail@plt+0x11904>
   23114:	str	r1, [sp, #32]
   23118:	mov	r0, sl
   2311c:	mov	r1, r4
   23120:	bl	12180 <strchr@plt>
   23124:	cmp	r0, #0
   23128:	beq	233f0 <__assert_fail@plt+0x11084>
   2312c:	sub	r0, r4, #69	; 0x45
   23130:	mov	r1, #1
   23134:	mov	r3, #0
   23138:	mov	r5, #1024	; 0x400
   2313c:	cmp	r0, #47	; 0x2f
   23140:	str	r1, [sp, #28]
   23144:	bhi	23248 <__assert_fail@plt+0x10edc>
   23148:	add	r1, pc, #0
   2314c:	ldr	pc, [r1, r0, lsl #2]
   23150:	andeq	r3, r2, r0, lsl r2
   23154:	andeq	r3, r2, r8, asr #4
   23158:	andeq	r3, r2, r0, lsl r2
   2315c:	andeq	r3, r2, r8, asr #4
   23160:	andeq	r3, r2, r8, asr #4
   23164:	andeq	r3, r2, r8, asr #4
   23168:	andeq	r3, r2, r0, lsl r2
   2316c:	andeq	r3, r2, r8, asr #4
   23170:	andeq	r3, r2, r0, lsl r2
   23174:	andeq	r3, r2, r8, asr #4
   23178:	andeq	r3, r2, r8, asr #4
   2317c:	andeq	r3, r2, r0, lsl r2
   23180:	andeq	r3, r2, r8, asr #4
   23184:	andeq	r3, r2, r8, asr #4
   23188:	andeq	r3, r2, r8, asr #4
   2318c:	andeq	r3, r2, r0, lsl r2
   23190:	andeq	r3, r2, r8, asr #4
   23194:	andeq	r3, r2, r8, asr #4
   23198:	andeq	r3, r2, r8, asr #4
   2319c:	andeq	r3, r2, r8, asr #4
   231a0:	andeq	r3, r2, r0, lsl r2
   231a4:	andeq	r3, r2, r0, lsl r2
   231a8:	andeq	r3, r2, r8, asr #4
   231ac:	andeq	r3, r2, r8, asr #4
   231b0:	andeq	r3, r2, r8, asr #4
   231b4:	andeq	r3, r2, r8, asr #4
   231b8:	andeq	r3, r2, r8, asr #4
   231bc:	andeq	r3, r2, r8, asr #4
   231c0:	andeq	r3, r2, r8, asr #4
   231c4:	andeq	r3, r2, r8, asr #4
   231c8:	andeq	r3, r2, r8, asr #4
   231cc:	andeq	r3, r2, r8, asr #4
   231d0:	andeq	r3, r2, r8, asr #4
   231d4:	andeq	r3, r2, r8, asr #4
   231d8:	andeq	r3, r2, r0, lsl r2
   231dc:	andeq	r3, r2, r8, asr #4
   231e0:	andeq	r3, r2, r8, asr #4
   231e4:	andeq	r3, r2, r8, asr #4
   231e8:	andeq	r3, r2, r0, lsl r2
   231ec:	andeq	r3, r2, r8, asr #4
   231f0:	andeq	r3, r2, r0, lsl r2
   231f4:	andeq	r3, r2, r8, asr #4
   231f8:	andeq	r3, r2, r8, asr #4
   231fc:	andeq	r3, r2, r8, asr #4
   23200:	andeq	r3, r2, r8, asr #4
   23204:	andeq	r3, r2, r8, asr #4
   23208:	andeq	r3, r2, r8, asr #4
   2320c:	andeq	r3, r2, r0, lsl r2
   23210:	mov	r0, sl
   23214:	mov	r1, #48	; 0x30
   23218:	bl	12180 <strchr@plt>
   2321c:	cmp	r0, #0
   23220:	beq	23244 <__assert_fail@plt+0x10ed8>
   23224:	ldr	r1, [sp, #32]
   23228:	ldrb	r0, [r1, #1]
   2322c:	cmp	r0, #66	; 0x42
   23230:	cmpne	r0, #68	; 0x44
   23234:	bne	233fc <__assert_fail@plt+0x11090>
   23238:	mov	r5, #1000	; 0x3e8
   2323c:	mov	r0, #2
   23240:	str	r0, [sp, #28]
   23244:	mov	r3, #0
   23248:	sub	r0, r4, #66	; 0x42
   2324c:	cmp	r0, #53	; 0x35
   23250:	bhi	233f0 <__assert_fail@plt+0x11084>
   23254:	add	r1, pc, #0
   23258:	ldr	pc, [r1, r0, lsl #2]
   2325c:	andeq	r3, r2, r8, ror r7
   23260:	strdeq	r3, [r2], -r0
   23264:	strdeq	r3, [r2], -r0
   23268:	andeq	r3, r2, r0, lsr #15
   2326c:	strdeq	r3, [r2], -r0
   23270:	andeq	r3, r2, r4, lsr r3
   23274:	strdeq	r3, [r2], -r0
   23278:	strdeq	r3, [r2], -r0
   2327c:	strdeq	r3, [r2], -r0
   23280:	andeq	r3, r2, r0, lsr #8
   23284:	strdeq	r3, [r2], -r0
   23288:	andeq	r3, r2, r8, ror #8
   2328c:	strdeq	r3, [r2], -r0
   23290:	strdeq	r3, [r2], -r0
   23294:	strdeq	r3, [r2], -r8
   23298:	strdeq	r3, [r2], -r0
   2329c:	strdeq	r3, [r2], -r0
   232a0:	strdeq	r3, [r2], -r0
   232a4:	strdeq	r3, [r2], -r4
   232a8:	strdeq	r3, [r2], -r0
   232ac:	strdeq	r3, [r2], -r0
   232b0:	strdeq	r3, [r2], -r0
   232b4:	strdeq	r3, [r2], -r0
   232b8:	andeq	r3, r2, r0, lsr #20
   232bc:	ldrdeq	r3, [r2], -ip
   232c0:	strdeq	r3, [r2], -r0
   232c4:	strdeq	r3, [r2], -r0
   232c8:	strdeq	r3, [r2], -r0
   232cc:	strdeq	r3, [r2], -r0
   232d0:	strdeq	r3, [r2], -r0
   232d4:	strdeq	r3, [r2], -r0
   232d8:	strdeq	r3, [r2], -r0
   232dc:	strdeq	r3, [r2], -r8
   232e0:	andeq	r3, r2, r0, asr ip
   232e4:	strdeq	r3, [r2], -r0
   232e8:	strdeq	r3, [r2], -r0
   232ec:	strdeq	r3, [r2], -r0
   232f0:	andeq	r3, r2, r4, lsr r3
   232f4:	strdeq	r3, [r2], -r0
   232f8:	strdeq	r3, [r2], -r0
   232fc:	strdeq	r3, [r2], -r0
   23300:	andeq	r3, r2, r0, lsr #8
   23304:	strdeq	r3, [r2], -r0
   23308:	andeq	r3, r2, r8, ror #8
   2330c:	strdeq	r3, [r2], -r0
   23310:	strdeq	r3, [r2], -r0
   23314:	strdeq	r3, [r2], -r0
   23318:	strdeq	r3, [r2], -r0
   2331c:	strdeq	r3, [r2], -r0
   23320:	strdeq	r3, [r2], -r0
   23324:	strdeq	r3, [r2], -r4
   23328:	strdeq	r3, [r2], -r0
   2332c:	strdeq	r3, [r2], -r0
   23330:	andeq	r3, r2, ip, lsr #24
   23334:	mvn	r0, #0
   23338:	mvn	r1, #0
   2333c:	mov	r2, r5
   23340:	mov	sl, r3
   23344:	bl	24f68 <_obstack_memory_used@@Base+0x480>
   23348:	subs	r3, r0, r6
   2334c:	umull	r4, r2, r6, r5
   23350:	mov	lr, #0
   23354:	str	r1, [sp, #20]
   23358:	sbcs	r3, r1, r7
   2335c:	movwcc	lr, #1
   23360:	mla	ip, r6, sl, r2
   23364:	mov	r2, r1
   23368:	mov	r2, #0
   2336c:	cmp	lr, #0
   23370:	mla	r7, r7, r5, ip
   23374:	mvnne	r4, #0
   23378:	mvnne	r7, #0
   2337c:	subs	r6, r0, r4
   23380:	sbcs	r6, r1, r7
   23384:	umull	r3, r6, r4, r5
   23388:	movwcc	r2, #1
   2338c:	cmp	r2, #0
   23390:	mvnne	r3, #0
   23394:	cmp	r2, #0
   23398:	str	r6, [sp, #16]
   2339c:	umull	r6, ip, r3, r5
   233a0:	mla	r1, r3, sl, ip
   233a4:	ldr	ip, [sp, #16]
   233a8:	str	r1, [sp, #12]
   233ac:	mla	r4, r4, sl, ip
   233b0:	mla	r4, r7, r5, r4
   233b4:	mvnne	r4, #0
   233b8:	subs	r0, r0, r3
   233bc:	ldr	r0, [sp, #20]
   233c0:	ldr	r7, [sp, #12]
   233c4:	sbcs	r0, r0, r4
   233c8:	mov	r0, #0
   233cc:	mla	r7, r4, r5, r7
   233d0:	movwcc	r0, #1
   233d4:	cmp	r0, #0
   233d8:	mov	r1, r0
   233dc:	orr	r0, lr, r2
   233e0:	mvnne	r7, #0
   233e4:	mvnne	r6, #0
   233e8:	orr	r3, r0, r1
   233ec:	b	23c50 <__assert_fail@plt+0x118e4>
   233f0:	ldr	r0, [sp, #36]	; 0x24
   233f4:	orr	r8, r8, #2
   233f8:	b	23c74 <__assert_fail@plt+0x11908>
   233fc:	cmp	r0, #105	; 0x69
   23400:	mov	r3, #0
   23404:	bne	23248 <__assert_fail@plt+0x10edc>
   23408:	ldrb	r0, [r1, #2]
   2340c:	mov	r1, #1
   23410:	cmp	r0, #66	; 0x42
   23414:	movweq	r1, #3
   23418:	str	r1, [sp, #28]
   2341c:	b	23248 <__assert_fail@plt+0x10edc>
   23420:	mvn	r0, #0
   23424:	mvn	r1, #0
   23428:	mov	r2, r5
   2342c:	mov	r4, r3
   23430:	bl	24f68 <_obstack_memory_used@@Base+0x480>
   23434:	subs	r0, r0, r6
   23438:	mov	r2, #0
   2343c:	sbcs	r0, r1, r7
   23440:	umull	r0, r1, r6, r5
   23444:	movwcc	r2, #1
   23448:	cmp	r2, #0
   2344c:	mla	r1, r6, r4, r1
   23450:	mov	r3, r2
   23454:	mvnne	r0, #0
   23458:	mla	r7, r7, r5, r1
   2345c:	mvnne	r7, #0
   23460:	mov	r6, r0
   23464:	b	23c50 <__assert_fail@plt+0x118e4>
   23468:	mvn	r0, #0
   2346c:	mvn	r1, #0
   23470:	mov	r2, r5
   23474:	str	r3, [sp, #24]
   23478:	bl	24f68 <_obstack_memory_used@@Base+0x480>
   2347c:	subs	r3, r0, r6
   23480:	mov	ip, r0
   23484:	umull	r4, r0, r6, r5
   23488:	mov	sl, #0
   2348c:	sbcs	r3, r1, r7
   23490:	mov	r3, #0
   23494:	movwcc	r3, #1
   23498:	cmp	r3, #0
   2349c:	str	r0, [sp, #20]
   234a0:	ldr	r0, [sp, #24]
   234a4:	mvnne	r4, #0
   234a8:	cmp	r3, #0
   234ac:	umull	lr, r2, r4, r5
   234b0:	mla	r2, r4, r0, r2
   234b4:	str	r2, [sp, #16]
   234b8:	ldr	r2, [sp, #20]
   234bc:	mla	r6, r6, r0, r2
   234c0:	ldr	r0, [sp, #16]
   234c4:	mla	r6, r7, r5, r6
   234c8:	mvnne	r6, #0
   234cc:	mla	r7, r6, r5, r0
   234d0:	subs	r0, ip, r4
   234d4:	sbcs	r0, r1, r6
   234d8:	movwcc	sl, #1
   234dc:	cmp	sl, #0
   234e0:	orr	r3, r3, sl
   234e4:	mvnne	lr, #0
   234e8:	mvnne	r7, #0
   234ec:	mov	r6, lr
   234f0:	b	23c50 <__assert_fail@plt+0x118e4>
   234f4:	mvn	r0, #0
   234f8:	mvn	r1, #0
   234fc:	mov	r2, r5
   23500:	mov	sl, r3
   23504:	bl	24f68 <_obstack_memory_used@@Base+0x480>
   23508:	subs	r3, r0, r6
   2350c:	mov	ip, r1
   23510:	umull	r2, lr, r6, r5
   23514:	str	r0, [sp, #20]
   23518:	sbcs	r3, r1, r7
   2351c:	mov	r1, #0
   23520:	str	ip, [sp, #16]
   23524:	movwcc	r1, #1
   23528:	mla	r6, r6, sl, lr
   2352c:	mov	lr, #0
   23530:	cmp	r1, #0
   23534:	mla	r7, r7, r5, r6
   23538:	mvnne	r2, #0
   2353c:	cmp	r1, #0
   23540:	umull	r3, r4, r2, r5
   23544:	mvnne	r7, #0
   23548:	mla	r4, r2, sl, r4
   2354c:	subs	r2, r0, r2
   23550:	sbcs	r2, ip, r7
   23554:	mla	r4, r7, r5, r4
   23558:	mov	r2, #0
   2355c:	movwcc	lr, #1
   23560:	cmp	lr, #0
   23564:	mvnne	r3, #0
   23568:	mvnne	r4, #0
   2356c:	subs	r7, r0, r3
   23570:	mov	r0, r5
   23574:	sbcs	r7, ip, r4
   23578:	umull	r5, r7, r3, r5
   2357c:	movwcc	r2, #1
   23580:	cmp	r2, #0
   23584:	mla	r3, r3, sl, r7
   23588:	mvnne	r5, #0
   2358c:	cmp	r2, #0
   23590:	mla	r3, r4, r0, r3
   23594:	umull	r6, ip, r5, r0
   23598:	mvnne	r3, #0
   2359c:	mla	ip, r5, sl, ip
   235a0:	mla	r7, r3, r0, ip
   235a4:	ldr	r0, [sp, #20]
   235a8:	subs	r0, r0, r5
   235ac:	ldr	r0, [sp, #16]
   235b0:	sbcs	r0, r0, r3
   235b4:	mov	r0, #0
   235b8:	movwcc	r0, #1
   235bc:	cmp	r0, #0
   235c0:	mov	r3, r0
   235c4:	orr	r0, r1, lr
   235c8:	orr	r0, r0, r2
   235cc:	mvnne	r7, #0
   235d0:	mvnne	r6, #0
   235d4:	orr	r3, r0, r3
   235d8:	b	23c50 <__assert_fail@plt+0x118e4>
   235dc:	mvn	r0, #0
   235e0:	mvn	r1, #0
   235e4:	mov	r2, r5
   235e8:	mov	r4, r3
   235ec:	str	r3, [sp, #24]
   235f0:	bl	24f68 <_obstack_memory_used@@Base+0x480>
   235f4:	umull	r3, r2, r6, r5
   235f8:	mla	r2, r6, r4, r2
   235fc:	subs	r6, r0, r6
   23600:	sbcs	r6, r1, r7
   23604:	mov	r6, #0
   23608:	mla	ip, r7, r5, r2
   2360c:	ldr	r2, [sp, #24]
   23610:	movwcc	r6, #1
   23614:	cmp	r6, #0
   23618:	str	r6, [sp, #20]
   2361c:	mov	r6, #0
   23620:	mvnne	r3, #0
   23624:	mvnne	ip, #0
   23628:	subs	r4, r0, r3
   2362c:	umull	r7, lr, r3, r5
   23630:	sbcs	r4, r1, ip
   23634:	movwcc	r6, #1
   23638:	mla	r3, r3, r2, lr
   2363c:	cmp	r6, #0
   23640:	str	r6, [sp, #16]
   23644:	mvnne	r7, #0
   23648:	cmp	r6, #0
   2364c:	umull	sl, r4, r7, r5
   23650:	mla	r4, r7, r2, r4
   23654:	mla	r2, ip, r5, r3
   23658:	mvnne	r2, #0
   2365c:	subs	r3, r0, r7
   23660:	mov	ip, #0
   23664:	mla	r6, r2, r5, r4
   23668:	sbcs	r2, r1, r2
   2366c:	mov	r4, r0
   23670:	mov	r0, #0
   23674:	movwcc	r0, #1
   23678:	mov	r3, r4
   2367c:	cmp	r0, #0
   23680:	str	r0, [sp, #12]
   23684:	mov	r0, r1
   23688:	str	r3, [sp, #4]
   2368c:	mvnne	sl, #0
   23690:	mvnne	r6, #0
   23694:	str	r0, [sp, #8]
   23698:	subs	r2, r4, sl
   2369c:	ldr	r4, [sp, #24]
   236a0:	sbcs	r2, r1, r6
   236a4:	umull	r7, r2, sl, r5
   236a8:	movwcc	ip, #1
   236ac:	cmp	ip, #0
   236b0:	mvnne	r7, #0
   236b4:	mla	r2, sl, r4, r2
   236b8:	cmp	ip, #0
   236bc:	mov	sl, #0
   236c0:	umull	r1, lr, r7, r5
   236c4:	mla	r2, r6, r5, r2
   236c8:	mvnne	r2, #0
   236cc:	subs	r6, r3, r7
   236d0:	mla	lr, r7, r4, lr
   236d4:	mla	lr, r2, r5, lr
   236d8:	sbcs	r2, r0, r2
   236dc:	mov	r2, #0
   236e0:	movwcc	sl, #1
   236e4:	cmp	sl, #0
   236e8:	mvnne	r1, #0
   236ec:	mvnne	lr, #0
   236f0:	subs	r6, r3, r1
   236f4:	ldr	r3, [sp, #24]
   236f8:	sbcs	r6, r0, lr
   236fc:	umull	r0, r7, r1, r5
   23700:	movwcc	r2, #1
   23704:	cmp	r2, #0
   23708:	mvnne	r0, #0
   2370c:	mla	r1, r1, r3, r7
   23710:	cmp	r2, #0
   23714:	umull	r6, r4, r0, r5
   23718:	mla	r1, lr, r5, r1
   2371c:	mvnne	r1, #0
   23720:	mla	r4, r0, r3, r4
   23724:	ldr	r3, [sp, #4]
   23728:	mla	r7, r1, r5, r4
   2372c:	ldr	r5, [sp, #16]
   23730:	subs	r0, r3, r0
   23734:	ldr	r0, [sp, #8]
   23738:	sbcs	r0, r0, r1
   2373c:	mov	r0, #0
   23740:	movwcc	r0, #1
   23744:	cmp	r0, #0
   23748:	mov	r1, r0
   2374c:	ldr	r0, [sp, #20]
   23750:	mvnne	r7, #0
   23754:	mvnne	r6, #0
   23758:	orr	r0, r0, r5
   2375c:	ldr	r5, [sp, #12]
   23760:	orr	r0, r0, r5
   23764:	orr	r0, r0, ip
   23768:	orr	r0, r0, sl
   2376c:	orr	r0, r0, r2
   23770:	orr	r0, r0, r1
   23774:	b	23bf0 <__assert_fail@plt+0x11884>
   23778:	mov	r1, #0
   2377c:	lsl	r2, r7, #10
   23780:	lsl	r0, r6, #10
   23784:	lsr	r3, r7, #22
   23788:	cmp	r1, r7, lsr #22
   2378c:	orr	r2, r2, r6, lsr #22
   23790:	mvnne	r0, #0
   23794:	movwne	r3, #1
   23798:	cmp	r1, r7, lsr #22
   2379c:	b	23c1c <__assert_fail@plt+0x118b0>
   237a0:	mvn	r0, #0
   237a4:	mvn	r1, #0
   237a8:	mov	r2, r5
   237ac:	mov	sl, r3
   237b0:	bl	24f68 <_obstack_memory_used@@Base+0x480>
   237b4:	subs	r2, r0, r6
   237b8:	mov	ip, r0
   237bc:	mov	r0, #0
   237c0:	sbcs	r2, r1, r7
   237c4:	umull	r4, r2, r6, r5
   237c8:	movwcc	r0, #1
   237cc:	cmp	r0, #0
   237d0:	mla	r2, r6, sl, r2
   237d4:	str	r0, [sp, #20]
   237d8:	mvnne	r4, #0
   237dc:	cmp	r0, #0
   237e0:	mla	r2, r7, r5, r2
   237e4:	mov	r0, #0
   237e8:	umull	lr, r3, r4, r5
   237ec:	mvnne	r2, #0
   237f0:	mla	r3, r4, sl, r3
   237f4:	mla	r6, r2, r5, r3
   237f8:	subs	r3, ip, r4
   237fc:	mov	r3, r1
   23800:	sbcs	r2, r1, r2
   23804:	str	r3, [sp, #8]
   23808:	movwcc	r0, #1
   2380c:	cmp	r0, #0
   23810:	str	r0, [sp, #16]
   23814:	mov	r0, ip
   23818:	mvnne	lr, #0
   2381c:	mvnne	r6, #0
   23820:	str	r0, [sp, #12]
   23824:	subs	r2, ip, lr
   23828:	umull	r7, r4, lr, r5
   2382c:	sbcs	r2, r1, r6
   23830:	mov	r2, #0
   23834:	movwcc	r2, #1
   23838:	mla	r4, lr, sl, r4
   2383c:	cmp	r2, #0
   23840:	mla	r6, r6, r5, r4
   23844:	mov	r4, #0
   23848:	mvnne	r7, #0
   2384c:	cmp	r2, #0
   23850:	umull	r1, ip, r7, r5
   23854:	mvnne	r6, #0
   23858:	mla	ip, r7, sl, ip
   2385c:	subs	r7, r0, r7
   23860:	sbcs	r7, r3, r6
   23864:	mla	lr, r6, r5, ip
   23868:	mov	ip, #0
   2386c:	movwcc	ip, #1
   23870:	cmp	ip, #0
   23874:	mvnne	r1, #0
   23878:	mvnne	lr, #0
   2387c:	subs	r7, r0, r1
   23880:	sbcs	r7, r3, lr
   23884:	umull	r0, r7, r1, r5
   23888:	movwcc	r4, #1
   2388c:	cmp	r4, #0
   23890:	mla	r1, r1, sl, r7
   23894:	mvnne	r0, #0
   23898:	cmp	r4, #0
   2389c:	mla	r1, lr, r5, r1
   238a0:	umull	r6, r3, r0, r5
   238a4:	mvnne	r1, #0
   238a8:	mla	r3, r0, sl, r3
   238ac:	mla	r7, r1, r5, r3
   238b0:	ldr	r3, [sp, #12]
   238b4:	subs	r0, r3, r0
   238b8:	ldr	r0, [sp, #8]
   238bc:	ldr	r3, [sp, #16]
   238c0:	sbcs	r0, r0, r1
   238c4:	mov	r0, #0
   238c8:	movwcc	r0, #1
   238cc:	cmp	r0, #0
   238d0:	mov	r1, r0
   238d4:	ldr	r0, [sp, #20]
   238d8:	mvnne	r7, #0
   238dc:	mvnne	r6, #0
   238e0:	orr	r0, r0, r3
   238e4:	orr	r0, r0, r2
   238e8:	orr	r0, r0, ip
   238ec:	orr	r0, r0, r4
   238f0:	orr	r3, r0, r1
   238f4:	b	23c50 <__assert_fail@plt+0x118e4>
   238f8:	mvn	r0, #0
   238fc:	mvn	r1, #0
   23900:	mov	r2, r5
   23904:	mov	sl, r3
   23908:	bl	24f68 <_obstack_memory_used@@Base+0x480>
   2390c:	umull	r3, r2, r6, r5
   23910:	mov	lr, r1
   23914:	mov	r1, r0
   23918:	mla	r2, r6, sl, r2
   2391c:	subs	r6, r0, r6
   23920:	mov	r0, #0
   23924:	sbcs	r6, lr, r7
   23928:	mla	r2, r7, r5, r2
   2392c:	movwcc	r0, #1
   23930:	cmp	r0, #0
   23934:	str	r0, [sp, #20]
   23938:	mov	r0, r1
   2393c:	mvnne	r3, #0
   23940:	mvnne	r2, #0
   23944:	str	r0, [sp, #16]
   23948:	subs	r4, r1, r3
   2394c:	umull	r7, ip, r3, r5
   23950:	sbcs	r4, lr, r2
   23954:	mov	r4, #0
   23958:	movwcc	r4, #1
   2395c:	mla	r3, r3, sl, ip
   23960:	mov	ip, #0
   23964:	cmp	r4, #0
   23968:	mla	r2, r2, r5, r3
   2396c:	mvnne	r7, #0
   23970:	cmp	r4, #0
   23974:	umull	r1, r6, r7, r5
   23978:	mvnne	r2, #0
   2397c:	mla	r6, r7, sl, r6
   23980:	mla	r3, r2, r5, r6
   23984:	subs	r6, r0, r7
   23988:	sbcs	r2, lr, r2
   2398c:	mov	r2, #0
   23990:	movwcc	ip, #1
   23994:	cmp	ip, #0
   23998:	mvnne	r1, #0
   2399c:	mvnne	r3, #0
   239a0:	subs	r6, r0, r1
   239a4:	sbcs	r6, lr, r3
   239a8:	umull	r0, r6, r1, r5
   239ac:	movwcc	r2, #1
   239b0:	cmp	r2, #0
   239b4:	mvnne	r0, #0
   239b8:	cmp	r2, #0
   239bc:	str	r6, [sp, #12]
   239c0:	umull	r6, r7, r0, r5
   239c4:	mla	r7, r0, sl, r7
   239c8:	str	r7, [sp, #8]
   239cc:	ldr	r7, [sp, #12]
   239d0:	mla	r1, r1, sl, r7
   239d4:	mla	r1, r3, r5, r1
   239d8:	ldr	r3, [sp, #8]
   239dc:	mvnne	r1, #0
   239e0:	mla	r7, r1, r5, r3
   239e4:	ldr	r3, [sp, #16]
   239e8:	subs	r0, r3, r0
   239ec:	sbcs	r0, lr, r1
   239f0:	mov	r0, #0
   239f4:	movwcc	r0, #1
   239f8:	cmp	r0, #0
   239fc:	mov	r1, r0
   23a00:	ldr	r0, [sp, #20]
   23a04:	mvnne	r7, #0
   23a08:	mvnne	r6, #0
   23a0c:	orr	r0, r0, r4
   23a10:	orr	r0, r0, ip
   23a14:	orr	r0, r0, r2
   23a18:	orr	r3, r0, r1
   23a1c:	b	23c50 <__assert_fail@plt+0x118e4>
   23a20:	mvn	r0, #0
   23a24:	mvn	r1, #0
   23a28:	mov	r2, r5
   23a2c:	mov	sl, r3
   23a30:	bl	24f68 <_obstack_memory_used@@Base+0x480>
   23a34:	mov	lr, r0
   23a38:	subs	r0, r0, r6
   23a3c:	mov	r2, #0
   23a40:	mov	ip, r1
   23a44:	str	sl, [sp, #24]
   23a48:	sbcs	r0, r1, r7
   23a4c:	umull	r3, r1, r6, r5
   23a50:	str	lr, [sp, #4]
   23a54:	movwcc	r2, #1
   23a58:	cmp	r2, #0
   23a5c:	mla	r6, r6, sl, r1
   23a60:	mov	r1, #0
   23a64:	str	r2, [sp, #20]
   23a68:	mvnne	r3, #0
   23a6c:	cmp	r2, #0
   23a70:	mla	r7, r7, r5, r6
   23a74:	mov	r2, #0
   23a78:	umull	r0, r4, r3, r5
   23a7c:	mvnne	r7, #0
   23a80:	mla	r4, r3, sl, r4
   23a84:	subs	r3, lr, r3
   23a88:	sbcs	r3, ip, r7
   23a8c:	mla	r4, r7, r5, r4
   23a90:	movwcc	r1, #1
   23a94:	cmp	r1, #0
   23a98:	str	r1, [sp, #16]
   23a9c:	mvnne	r0, #0
   23aa0:	mvnne	r4, #0
   23aa4:	subs	r3, lr, r0
   23aa8:	sbcs	r3, ip, r4
   23aac:	umull	r6, r3, r0, r5
   23ab0:	movwcc	r2, #1
   23ab4:	cmp	r2, #0
   23ab8:	mla	r0, r0, sl, r3
   23abc:	str	r2, [sp, #12]
   23ac0:	mvnne	r6, #0
   23ac4:	cmp	r2, #0
   23ac8:	mla	r0, r4, r5, r0
   23acc:	ldr	r4, [sp, #24]
   23ad0:	umull	r1, r7, r6, r5
   23ad4:	mvnne	r0, #0
   23ad8:	subs	r3, lr, r6
   23adc:	mov	r3, ip
   23ae0:	str	r3, [sp]
   23ae4:	mla	r7, r6, sl, r7
   23ae8:	mla	r7, r0, r5, r7
   23aec:	sbcs	r0, ip, r0
   23af0:	mov	r0, #0
   23af4:	movwcc	r0, #1
   23af8:	cmp	r0, #0
   23afc:	str	r0, [sp, #8]
   23b00:	mvnne	r1, #0
   23b04:	mvnne	r7, #0
   23b08:	subs	r0, lr, r1
   23b0c:	sbcs	r0, ip, r7
   23b10:	mov	ip, #0
   23b14:	umull	r6, r0, r1, r5
   23b18:	movwcc	ip, #1
   23b1c:	cmp	ip, #0
   23b20:	mla	r1, r1, r4, r0
   23b24:	mov	r0, lr
   23b28:	mvnne	r6, #0
   23b2c:	cmp	ip, #0
   23b30:	mla	r1, r7, r5, r1
   23b34:	umull	r2, sl, r6, r5
   23b38:	mvnne	r1, #0
   23b3c:	mla	sl, r6, r4, sl
   23b40:	subs	r6, lr, r6
   23b44:	mov	lr, #0
   23b48:	mla	r7, r1, r5, sl
   23b4c:	sbcs	r1, r3, r1
   23b50:	ldr	r1, [sp, #24]
   23b54:	movwcc	lr, #1
   23b58:	cmp	lr, #0
   23b5c:	mvnne	r2, #0
   23b60:	mvnne	r7, #0
   23b64:	subs	r6, r0, r2
   23b68:	umull	r0, sl, r2, r5
   23b6c:	sbcs	r6, r3, r7
   23b70:	mov	r3, #0
   23b74:	movwcc	r3, #1
   23b78:	mla	r2, r2, r1, sl
   23b7c:	cmp	r3, #0
   23b80:	mla	r2, r7, r5, r2
   23b84:	mvnne	r0, #0
   23b88:	cmp	r3, #0
   23b8c:	umull	r6, r4, r0, r5
   23b90:	mvnne	r2, #0
   23b94:	mla	r4, r0, r1, r4
   23b98:	ldr	r1, [sp, #4]
   23b9c:	mla	r7, r2, r5, r4
   23ba0:	ldr	r5, [sp, #16]
   23ba4:	subs	r0, r1, r0
   23ba8:	ldr	r0, [sp]
   23bac:	sbcs	r0, r0, r2
   23bb0:	mov	r0, #0
   23bb4:	movwcc	r0, #1
   23bb8:	cmp	r0, #0
   23bbc:	mov	r2, r0
   23bc0:	ldr	r0, [sp, #20]
   23bc4:	mvnne	r7, #0
   23bc8:	mvnne	r6, #0
   23bcc:	orr	r0, r0, r5
   23bd0:	ldr	r5, [sp, #12]
   23bd4:	orr	r0, r0, r5
   23bd8:	ldr	r5, [sp, #8]
   23bdc:	orr	r0, r0, r5
   23be0:	orr	r0, r0, ip
   23be4:	orr	r0, r0, lr
   23be8:	orr	r0, r0, r3
   23bec:	orr	r0, r0, r2
   23bf0:	and	r3, r0, #1
   23bf4:	b	23c50 <__assert_fail@plt+0x118e4>
   23bf8:	mov	r1, #0
   23bfc:	lsl	r2, r7, #9
   23c00:	lsl	r0, r6, #9
   23c04:	lsr	r3, r7, #23
   23c08:	cmp	r1, r7, lsr #23
   23c0c:	orr	r2, r2, r6, lsr #23
   23c10:	mvnne	r0, #0
   23c14:	movwne	r3, #1
   23c18:	cmp	r1, r7, lsr #23
   23c1c:	mvnne	r2, #0
   23c20:	mov	r6, r0
   23c24:	mov	r7, r2
   23c28:	b	23c50 <__assert_fail@plt+0x118e4>
   23c2c:	lsl	r1, r7, #1
   23c30:	cmp	r7, #0
   23c34:	lsl	r0, r6, #1
   23c38:	lsr	r3, r7, #31
   23c3c:	orr	r1, r1, r6, lsr #31
   23c40:	mvnmi	r0, #0
   23c44:	mvnmi	r1, #0
   23c48:	mov	r6, r0
   23c4c:	mov	r7, r1
   23c50:	ldr	r1, [sp, #32]
   23c54:	ldr	r2, [sp, #28]
   23c58:	orr	r8, r3, r8
   23c5c:	add	r0, r1, r2
   23c60:	str	r0, [r9]
   23c64:	ldrb	r0, [r1, r2]
   23c68:	cmp	r0, #0
   23c6c:	orrne	r8, r8, #2
   23c70:	ldr	r0, [sp, #36]	; 0x24
   23c74:	strd	r6, [r0]
   23c78:	mov	r0, r8
   23c7c:	sub	sp, fp, #28
   23c80:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   23c84:	movw	r0, #30672	; 0x77d0
   23c88:	movw	r1, #30710	; 0x77f6
   23c8c:	movw	r3, #30726	; 0x7806
   23c90:	mov	r2, #85	; 0x55
   23c94:	movt	r0, #2
   23c98:	movt	r1, #2
   23c9c:	movt	r3, #2
   23ca0:	bl	1236c <__assert_fail@plt>
   23ca4:	clz	r2, r1
   23ca8:	clz	r3, r0
   23cac:	lsr	r2, r2, #5
   23cb0:	lsr	r3, r3, #5
   23cb4:	orrs	r2, r3, r2
   23cb8:	movwne	r1, #1
   23cbc:	movwne	r0, #1
   23cc0:	cmp	r1, #0
   23cc4:	beq	23cf4 <__assert_fail@plt+0x11988>
   23cc8:	mvn	r2, #-2147483648	; 0x80000000
   23ccc:	udiv	r2, r2, r1
   23cd0:	cmp	r2, r0
   23cd4:	bcs	23cf4 <__assert_fail@plt+0x11988>
   23cd8:	push	{fp, lr}
   23cdc:	mov	fp, sp
   23ce0:	bl	12198 <__errno_location@plt>
   23ce4:	mov	r1, #12
   23ce8:	str	r1, [r0]
   23cec:	mov	r0, #0
   23cf0:	pop	{fp, pc}
   23cf4:	b	11e2c <calloc@plt>
   23cf8:	cmp	r0, #0
   23cfc:	movweq	r0, #1
   23d00:	cmn	r0, #1
   23d04:	ble	23d0c <__assert_fail@plt+0x119a0>
   23d08:	b	120f0 <malloc@plt>
   23d0c:	push	{fp, lr}
   23d10:	mov	fp, sp
   23d14:	bl	12198 <__errno_location@plt>
   23d18:	mov	r1, #12
   23d1c:	str	r1, [r0]
   23d20:	mov	r0, #0
   23d24:	pop	{fp, pc}
   23d28:	push	{fp, lr}
   23d2c:	mov	fp, sp
   23d30:	cmp	r0, #0
   23d34:	beq	23d50 <__assert_fail@plt+0x119e4>
   23d38:	cmp	r1, #0
   23d3c:	beq	23d5c <__assert_fail@plt+0x119f0>
   23d40:	cmn	r1, #1
   23d44:	ble	23d68 <__assert_fail@plt+0x119fc>
   23d48:	pop	{fp, lr}
   23d4c:	b	11fc4 <realloc@plt>
   23d50:	mov	r0, r1
   23d54:	pop	{fp, lr}
   23d58:	b	23cf8 <__assert_fail@plt+0x1198c>
   23d5c:	bl	1d148 <__assert_fail@plt+0xaddc>
   23d60:	mov	r0, #0
   23d64:	pop	{fp, pc}
   23d68:	bl	12198 <__errno_location@plt>
   23d6c:	mov	r1, #12
   23d70:	str	r1, [r0]
   23d74:	mov	r0, #0
   23d78:	pop	{fp, pc}
   23d7c:	sub	r2, r0, #65	; 0x41
   23d80:	mov	r1, r0
   23d84:	mov	r0, #1
   23d88:	cmp	r2, #26
   23d8c:	subcs	r2, r1, #97	; 0x61
   23d90:	cmpcs	r2, #26
   23d94:	bcs	23d9c <__assert_fail@plt+0x11a30>
   23d98:	bx	lr
   23d9c:	sub	r1, r1, #48	; 0x30
   23da0:	cmp	r1, #10
   23da4:	movcs	r0, #0
   23da8:	bx	lr
   23dac:	sub	r2, r0, #65	; 0x41
   23db0:	mov	r1, r0
   23db4:	mov	r0, #1
   23db8:	cmp	r2, #26
   23dbc:	subcs	r1, r1, #97	; 0x61
   23dc0:	cmpcs	r1, #26
   23dc4:	movcs	r0, #0
   23dc8:	bx	lr
   23dcc:	cmp	r0, #128	; 0x80
   23dd0:	mov	r1, #0
   23dd4:	movwcc	r1, #1
   23dd8:	mov	r0, r1
   23ddc:	bx	lr
   23de0:	sub	r1, r0, #9
   23de4:	sub	r0, r0, #32
   23de8:	clz	r1, r1
   23dec:	clz	r0, r0
   23df0:	lsr	r1, r1, #5
   23df4:	lsr	r0, r0, #5
   23df8:	orr	r0, r0, r1
   23dfc:	bx	lr
   23e00:	mov	r1, r0
   23e04:	mov	r0, #1
   23e08:	cmp	r1, #32
   23e0c:	bxcc	lr
   23e10:	cmp	r1, #127	; 0x7f
   23e14:	movne	r0, #0
   23e18:	bx	lr
   23e1c:	sub	r1, r0, #48	; 0x30
   23e20:	mov	r0, #0
   23e24:	cmp	r1, #10
   23e28:	movwcc	r0, #1
   23e2c:	bx	lr
   23e30:	sub	r1, r0, #33	; 0x21
   23e34:	mov	r0, #0
   23e38:	cmp	r1, #94	; 0x5e
   23e3c:	movwcc	r0, #1
   23e40:	bx	lr
   23e44:	sub	r1, r0, #97	; 0x61
   23e48:	mov	r0, #0
   23e4c:	cmp	r1, #26
   23e50:	movwcc	r0, #1
   23e54:	bx	lr
   23e58:	sub	r1, r0, #32
   23e5c:	mov	r0, #0
   23e60:	cmp	r1, #95	; 0x5f
   23e64:	movwcc	r0, #1
   23e68:	bx	lr
   23e6c:	sub	r1, r0, #33	; 0x21
   23e70:	cmp	r1, #93	; 0x5d
   23e74:	bhi	24000 <__assert_fail@plt+0x11c94>
   23e78:	add	r2, pc, #4
   23e7c:	mov	r0, #1
   23e80:	ldr	pc, [r2, r1, lsl #2]
   23e84:	strdeq	r3, [r2], -ip
   23e88:	strdeq	r3, [r2], -ip
   23e8c:	strdeq	r3, [r2], -ip
   23e90:	strdeq	r3, [r2], -ip
   23e94:	strdeq	r3, [r2], -ip
   23e98:	strdeq	r3, [r2], -ip
   23e9c:	strdeq	r3, [r2], -ip
   23ea0:	strdeq	r3, [r2], -ip
   23ea4:	strdeq	r3, [r2], -ip
   23ea8:	strdeq	r3, [r2], -ip
   23eac:	strdeq	r3, [r2], -ip
   23eb0:	strdeq	r3, [r2], -ip
   23eb4:	strdeq	r3, [r2], -ip
   23eb8:	strdeq	r3, [r2], -ip
   23ebc:	strdeq	r3, [r2], -ip
   23ec0:	andeq	r4, r2, r0
   23ec4:	andeq	r4, r2, r0
   23ec8:	andeq	r4, r2, r0
   23ecc:	andeq	r4, r2, r0
   23ed0:	andeq	r4, r2, r0
   23ed4:	andeq	r4, r2, r0
   23ed8:	andeq	r4, r2, r0
   23edc:	andeq	r4, r2, r0
   23ee0:	andeq	r4, r2, r0
   23ee4:	andeq	r4, r2, r0
   23ee8:	strdeq	r3, [r2], -ip
   23eec:	strdeq	r3, [r2], -ip
   23ef0:	strdeq	r3, [r2], -ip
   23ef4:	strdeq	r3, [r2], -ip
   23ef8:	strdeq	r3, [r2], -ip
   23efc:	strdeq	r3, [r2], -ip
   23f00:	strdeq	r3, [r2], -ip
   23f04:	andeq	r4, r2, r0
   23f08:	andeq	r4, r2, r0
   23f0c:	andeq	r4, r2, r0
   23f10:	andeq	r4, r2, r0
   23f14:	andeq	r4, r2, r0
   23f18:	andeq	r4, r2, r0
   23f1c:	andeq	r4, r2, r0
   23f20:	andeq	r4, r2, r0
   23f24:	andeq	r4, r2, r0
   23f28:	andeq	r4, r2, r0
   23f2c:	andeq	r4, r2, r0
   23f30:	andeq	r4, r2, r0
   23f34:	andeq	r4, r2, r0
   23f38:	andeq	r4, r2, r0
   23f3c:	andeq	r4, r2, r0
   23f40:	andeq	r4, r2, r0
   23f44:	andeq	r4, r2, r0
   23f48:	andeq	r4, r2, r0
   23f4c:	andeq	r4, r2, r0
   23f50:	andeq	r4, r2, r0
   23f54:	andeq	r4, r2, r0
   23f58:	andeq	r4, r2, r0
   23f5c:	andeq	r4, r2, r0
   23f60:	andeq	r4, r2, r0
   23f64:	andeq	r4, r2, r0
   23f68:	andeq	r4, r2, r0
   23f6c:	strdeq	r3, [r2], -ip
   23f70:	strdeq	r3, [r2], -ip
   23f74:	strdeq	r3, [r2], -ip
   23f78:	strdeq	r3, [r2], -ip
   23f7c:	strdeq	r3, [r2], -ip
   23f80:	strdeq	r3, [r2], -ip
   23f84:	andeq	r4, r2, r0
   23f88:	andeq	r4, r2, r0
   23f8c:	andeq	r4, r2, r0
   23f90:	andeq	r4, r2, r0
   23f94:	andeq	r4, r2, r0
   23f98:	andeq	r4, r2, r0
   23f9c:	andeq	r4, r2, r0
   23fa0:	andeq	r4, r2, r0
   23fa4:	andeq	r4, r2, r0
   23fa8:	andeq	r4, r2, r0
   23fac:	andeq	r4, r2, r0
   23fb0:	andeq	r4, r2, r0
   23fb4:	andeq	r4, r2, r0
   23fb8:	andeq	r4, r2, r0
   23fbc:	andeq	r4, r2, r0
   23fc0:	andeq	r4, r2, r0
   23fc4:	andeq	r4, r2, r0
   23fc8:	andeq	r4, r2, r0
   23fcc:	andeq	r4, r2, r0
   23fd0:	andeq	r4, r2, r0
   23fd4:	andeq	r4, r2, r0
   23fd8:	andeq	r4, r2, r0
   23fdc:	andeq	r4, r2, r0
   23fe0:	andeq	r4, r2, r0
   23fe4:	andeq	r4, r2, r0
   23fe8:	andeq	r4, r2, r0
   23fec:	strdeq	r3, [r2], -ip
   23ff0:	strdeq	r3, [r2], -ip
   23ff4:	strdeq	r3, [r2], -ip
   23ff8:	strdeq	r3, [r2], -ip
   23ffc:	bx	lr
   24000:	mov	r0, #0
   24004:	bx	lr
   24008:	sub	r0, r0, #9
   2400c:	cmp	r0, #23
   24010:	movhi	r0, #0
   24014:	bxhi	lr
   24018:	movw	r1, #31
   2401c:	bic	r0, r0, #-16777216	; 0xff000000
   24020:	mov	r2, #1
   24024:	movt	r1, #128	; 0x80
   24028:	and	r0, r2, r1, lsr r0
   2402c:	bx	lr
   24030:	sub	r1, r0, #65	; 0x41
   24034:	mov	r0, #0
   24038:	cmp	r1, #26
   2403c:	movwcc	r0, #1
   24040:	bx	lr
   24044:	sub	r2, r0, #48	; 0x30
   24048:	mov	r1, r0
   2404c:	mov	r0, #1
   24050:	cmp	r2, #22
   24054:	bhi	2406c <__assert_fail@plt+0x11d00>
   24058:	movw	r3, #1023	; 0x3ff
   2405c:	mov	ip, #1
   24060:	movt	r3, #126	; 0x7e
   24064:	tst	r3, ip, lsl r2
   24068:	bxne	lr
   2406c:	sub	r1, r1, #97	; 0x61
   24070:	cmp	r1, #6
   24074:	movcs	r0, #0
   24078:	bxcs	lr
   2407c:	bx	lr
   24080:	sub	r1, r0, #65	; 0x41
   24084:	cmp	r1, #26
   24088:	addcc	r0, r0, #32
   2408c:	bx	lr
   24090:	sub	r1, r0, #97	; 0x61
   24094:	cmp	r1, #26
   24098:	subcc	r0, r0, #32
   2409c:	bx	lr
   240a0:	push	{r4, r5, r6, sl, fp, lr}
   240a4:	add	fp, sp, #16
   240a8:	mov	r4, r0
   240ac:	bl	12090 <__fpending@plt>
   240b0:	ldr	r6, [r4]
   240b4:	mov	r5, r0
   240b8:	mov	r0, r4
   240bc:	bl	1cbbc <__assert_fail@plt+0xa850>
   240c0:	tst	r6, #32
   240c4:	bne	240fc <__assert_fail@plt+0x11d90>
   240c8:	cmp	r0, #0
   240cc:	mov	r4, r0
   240d0:	mvnne	r4, #0
   240d4:	cmp	r5, #0
   240d8:	bne	24108 <__assert_fail@plt+0x11d9c>
   240dc:	cmp	r0, #0
   240e0:	beq	24108 <__assert_fail@plt+0x11d9c>
   240e4:	bl	12198 <__errno_location@plt>
   240e8:	ldr	r0, [r0]
   240ec:	subs	r4, r0, #9
   240f0:	mvnne	r4, #0
   240f4:	mov	r0, r4
   240f8:	pop	{r4, r5, r6, sl, fp, pc}
   240fc:	mvn	r4, #0
   24100:	cmp	r0, #0
   24104:	beq	24110 <__assert_fail@plt+0x11da4>
   24108:	mov	r0, r4
   2410c:	pop	{r4, r5, r6, sl, fp, pc}
   24110:	bl	12198 <__errno_location@plt>
   24114:	mov	r1, #0
   24118:	str	r1, [r0]
   2411c:	mov	r0, r4
   24120:	pop	{r4, r5, r6, sl, fp, pc}
   24124:	andeq	r0, r0, r0
   24128:	push	{fp, lr}
   2412c:	mov	fp, sp
   24130:	vldr	d16, [pc, #160]	; 241d8 <__assert_fail@plt+0x11e6c>
   24134:	vcmpe.f64	d0, d16
   24138:	vmrs	APSR_nzcv, fpscr
   2413c:	ble	241b4 <__assert_fail@plt+0x11e48>
   24140:	vldr	d16, [pc, #152]	; 241e0 <__assert_fail@plt+0x11e74>
   24144:	movw	ip, #51712	; 0xca00
   24148:	movt	ip, #15258	; 0x3b9a
   2414c:	vcmpe.f64	d0, d16
   24150:	vmrs	APSR_nzcv, fpscr
   24154:	bpl	241c0 <__assert_fail@plt+0x11e54>
   24158:	vcvt.s32.f64	s2, d0
   2415c:	vldr	d16, [pc, #132]	; 241e8 <__assert_fail@plt+0x11e7c>
   24160:	movw	r1, #12193	; 0x2fa1
   24164:	movt	r1, #17592	; 0x44b8
   24168:	vcvt.f64.s32	d17, s2
   2416c:	vmov	lr, s2
   24170:	vsub.f64	d17, d0, d17
   24174:	vmul.f64	d16, d17, d16
   24178:	vcvt.s32.f64	s0, d16
   2417c:	vcvt.f64.s32	d17, s0
   24180:	vmov	r2, s0
   24184:	vcmpe.f64	d16, d17
   24188:	vmrs	APSR_nzcv, fpscr
   2418c:	addgt	r2, r2, #1
   24190:	smmul	r1, r2, r1
   24194:	asr	r3, r1, #28
   24198:	add	r1, r3, r1, lsr #31
   2419c:	mls	r2, r1, ip, r2
   241a0:	add	r1, r1, lr
   241a4:	add	r3, r1, r2, asr #31
   241a8:	cmp	r2, #0
   241ac:	addmi	r2, r2, ip
   241b0:	b	241c8 <__assert_fail@plt+0x11e5c>
   241b4:	mov	r2, #0
   241b8:	mov	r3, #-2147483648	; 0x80000000
   241bc:	b	241c8 <__assert_fail@plt+0x11e5c>
   241c0:	sub	r2, ip, #1
   241c4:	mvn	r3, #-2147483648	; 0x80000000
   241c8:	str	r3, [r0]
   241cc:	str	r2, [r0, #4]
   241d0:	pop	{fp, pc}
   241d4:	nop	{0}
   241d8:	andeq	r0, r0, r0
   241dc:	mvngt	r0, r0
   241e0:	andeq	r0, r0, r0
   241e4:	mvnmi	r0, r0
   241e8:	andeq	r0, r0, r0
   241ec:	bicmi	ip, sp, r5, ror #26
   241f0:	sub	sp, sp, #8
   241f4:	push	{r4, r5, r6, r7, fp, lr}
   241f8:	add	fp, sp, #16
   241fc:	sub	sp, sp, #8
   24200:	mov	r5, r0
   24204:	add	r0, fp, #8
   24208:	cmp	r1, #11
   2420c:	str	r2, [fp, #8]
   24210:	str	r3, [fp, #12]
   24214:	str	r0, [sp, #4]
   24218:	bhi	24254 <__assert_fail@plt+0x11ee8>
   2421c:	mov	r0, #1
   24220:	movw	r2, #1300	; 0x514
   24224:	tst	r2, r0, lsl r1
   24228:	bne	24314 <__assert_fail@plt+0x11fa8>
   2422c:	movw	r2, #2570	; 0xa0a
   24230:	tst	r2, r0, lsl r1
   24234:	bne	2427c <__assert_fail@plt+0x11f10>
   24238:	cmp	r1, #0
   2423c:	bne	24254 <__assert_fail@plt+0x11ee8>
   24240:	ldr	r0, [sp, #4]
   24244:	add	r1, r0, #4
   24248:	str	r1, [sp, #4]
   2424c:	mov	r1, #0
   24250:	b	24320 <__assert_fail@plt+0x11fb4>
   24254:	sub	r0, r1, #1024	; 0x400
   24258:	cmp	r0, #10
   2425c:	bhi	24314 <__assert_fail@plt+0x11fa8>
   24260:	mov	r2, #1
   24264:	movw	r3, #645	; 0x285
   24268:	tst	r3, r2, lsl r0
   2426c:	bne	24314 <__assert_fail@plt+0x11fa8>
   24270:	movw	r3, #1282	; 0x502
   24274:	tst	r3, r2, lsl r0
   24278:	beq	24288 <__assert_fail@plt+0x11f1c>
   2427c:	mov	r0, r5
   24280:	bl	12234 <fcntl64@plt>
   24284:	b	2432c <__assert_fail@plt+0x11fc0>
   24288:	cmp	r0, #6
   2428c:	bne	24314 <__assert_fail@plt+0x11fa8>
   24290:	ldr	r0, [sp, #4]
   24294:	movw	r7, #35336	; 0x8a08
   24298:	movt	r7, #3
   2429c:	add	r1, r0, #4
   242a0:	str	r1, [sp, #4]
   242a4:	ldr	r6, [r0]
   242a8:	ldr	r0, [r7]
   242ac:	cmp	r0, #0
   242b0:	bmi	24350 <__assert_fail@plt+0x11fe4>
   242b4:	mov	r0, r5
   242b8:	movw	r1, #1030	; 0x406
   242bc:	mov	r2, r6
   242c0:	bl	12234 <fcntl64@plt>
   242c4:	mov	r4, r0
   242c8:	cmn	r0, #1
   242cc:	bgt	24344 <__assert_fail@plt+0x11fd8>
   242d0:	bl	12198 <__errno_location@plt>
   242d4:	ldr	r0, [r0]
   242d8:	cmp	r0, #22
   242dc:	bne	24344 <__assert_fail@plt+0x11fd8>
   242e0:	mov	r0, r5
   242e4:	mov	r1, #0
   242e8:	mov	r2, r6
   242ec:	bl	12234 <fcntl64@plt>
   242f0:	mov	r4, r0
   242f4:	cmp	r0, #0
   242f8:	bmi	24330 <__assert_fail@plt+0x11fc4>
   242fc:	mvn	r0, #0
   24300:	str	r0, [r7]
   24304:	mov	r0, #1
   24308:	cmp	r0, #0
   2430c:	bne	2437c <__assert_fail@plt+0x12010>
   24310:	b	24330 <__assert_fail@plt+0x11fc4>
   24314:	ldr	r0, [sp, #4]
   24318:	add	r2, r0, #4
   2431c:	str	r2, [sp, #4]
   24320:	ldr	r2, [r0]
   24324:	mov	r0, r5
   24328:	bl	12234 <fcntl64@plt>
   2432c:	mov	r4, r0
   24330:	mov	r0, r4
   24334:	sub	sp, fp, #16
   24338:	pop	{r4, r5, r6, r7, fp, lr}
   2433c:	add	sp, sp, #8
   24340:	bx	lr
   24344:	mov	r0, #1
   24348:	str	r0, [r7]
   2434c:	b	24330 <__assert_fail@plt+0x11fc4>
   24350:	mov	r0, r5
   24354:	mov	r1, #0
   24358:	mov	r2, r6
   2435c:	bl	12234 <fcntl64@plt>
   24360:	mov	r4, r0
   24364:	ldr	r0, [r7]
   24368:	add	r0, r0, #1
   2436c:	clz	r0, r0
   24370:	lsr	r0, r0, #5
   24374:	cmp	r0, #0
   24378:	beq	24330 <__assert_fail@plt+0x11fc4>
   2437c:	cmp	r4, #0
   24380:	bmi	24330 <__assert_fail@plt+0x11fc4>
   24384:	mov	r0, r4
   24388:	mov	r1, #1
   2438c:	bl	12234 <fcntl64@plt>
   24390:	cmp	r0, #0
   24394:	bmi	243b0 <__assert_fail@plt+0x12044>
   24398:	orr	r2, r0, #1
   2439c:	mov	r0, r4
   243a0:	mov	r1, #2
   243a4:	bl	12234 <fcntl64@plt>
   243a8:	cmn	r0, #1
   243ac:	bne	24330 <__assert_fail@plt+0x11fc4>
   243b0:	bl	12198 <__errno_location@plt>
   243b4:	ldr	r6, [r0]
   243b8:	mov	r5, r0
   243bc:	mov	r0, r4
   243c0:	bl	12354 <close@plt>
   243c4:	str	r6, [r5]
   243c8:	mvn	r4, #0
   243cc:	b	24330 <__assert_fail@plt+0x11fc4>
   243d0:	push	{r4, r5, r6, r7, fp, lr}
   243d4:	add	fp, sp, #16
   243d8:	mov	r4, r0
   243dc:	cmp	r0, #2
   243e0:	bhi	24410 <__assert_fail@plt+0x120a4>
   243e4:	mov	r0, r4
   243e8:	bl	24418 <__assert_fail@plt+0x120ac>
   243ec:	mov	r5, r0
   243f0:	bl	12198 <__errno_location@plt>
   243f4:	ldr	r7, [r0]
   243f8:	mov	r6, r0
   243fc:	mov	r0, r4
   24400:	bl	12354 <close@plt>
   24404:	mov	r0, r5
   24408:	str	r7, [r6]
   2440c:	pop	{r4, r5, r6, r7, fp, pc}
   24410:	mov	r0, r4
   24414:	pop	{r4, r5, r6, r7, fp, pc}
   24418:	lsl	r1, r1, #12
   2441c:	movw	r2, #1030	; 0x406
   24420:	and	r1, r2, r1, asr #31
   24424:	mov	r2, #3
   24428:	b	241f0 <__assert_fail@plt+0x11e84>
   2442c:	push	{r4, r5, r6, r7, fp, lr}
   24430:	add	fp, sp, #16
   24434:	mov	r5, r1
   24438:	bl	122b8 <fopen64@plt>
   2443c:	mov	r4, #0
   24440:	cmp	r0, #0
   24444:	beq	244ac <__assert_fail@plt+0x12140>
   24448:	mov	r6, r0
   2444c:	bl	121ec <fileno@plt>
   24450:	cmp	r0, #2
   24454:	bhi	244b4 <__assert_fail@plt+0x12148>
   24458:	bl	24b9c <_obstack_memory_used@@Base+0xb4>
   2445c:	cmn	r0, #1
   24460:	ble	244bc <__assert_fail@plt+0x12150>
   24464:	mov	r7, r0
   24468:	mov	r0, r6
   2446c:	bl	1cbbc <__assert_fail@plt+0xa850>
   24470:	cmp	r0, #0
   24474:	bne	24490 <__assert_fail@plt+0x12124>
   24478:	mov	r0, r7
   2447c:	mov	r1, r5
   24480:	bl	11e20 <fdopen@plt>
   24484:	mov	r4, r0
   24488:	cmp	r0, #0
   2448c:	bne	244ac <__assert_fail@plt+0x12140>
   24490:	bl	12198 <__errno_location@plt>
   24494:	ldr	r5, [r0]
   24498:	mov	r4, r0
   2449c:	mov	r0, r7
   244a0:	bl	12354 <close@plt>
   244a4:	str	r5, [r4]
   244a8:	mov	r4, #0
   244ac:	mov	r0, r4
   244b0:	pop	{r4, r5, r6, r7, fp, pc}
   244b4:	mov	r0, r6
   244b8:	pop	{r4, r5, r6, r7, fp, pc}
   244bc:	bl	12198 <__errno_location@plt>
   244c0:	ldr	r7, [r0]
   244c4:	mov	r5, r0
   244c8:	mov	r0, r6
   244cc:	bl	1cbbc <__assert_fail@plt+0xa850>
   244d0:	mov	r0, r4
   244d4:	str	r7, [r5]
   244d8:	pop	{r4, r5, r6, r7, fp, pc}
   244dc:	push	{fp, lr}
   244e0:	mov	fp, sp
   244e4:	mov	r0, #14
   244e8:	bl	12294 <nl_langinfo@plt>
   244ec:	movw	r1, #21100	; 0x526c
   244f0:	cmp	r0, #0
   244f4:	movt	r1, #2
   244f8:	movne	r1, r0
   244fc:	movw	r0, #30805	; 0x7855
   24500:	ldrb	r2, [r1]
   24504:	movt	r0, #2
   24508:	cmp	r2, #0
   2450c:	movne	r0, r1
   24510:	pop	{fp, pc}
   24514:	push	{r4, r5, r6, r7, fp, lr}
   24518:	add	fp, sp, #16
   2451c:	sub	sp, sp, #8
   24520:	cmp	r0, #0
   24524:	add	r5, sp, #4
   24528:	mov	r7, r2
   2452c:	mov	r4, r1
   24530:	movne	r5, r0
   24534:	mov	r0, r5
   24538:	bl	1209c <mbrtowc@plt>
   2453c:	mov	r6, r0
   24540:	cmp	r7, #0
   24544:	beq	2456c <__assert_fail@plt+0x12200>
   24548:	cmn	r6, #2
   2454c:	bcc	2456c <__assert_fail@plt+0x12200>
   24550:	mov	r0, #0
   24554:	bl	1d218 <__assert_fail@plt+0xaeac>
   24558:	cmp	r0, #0
   2455c:	bne	2456c <__assert_fail@plt+0x12200>
   24560:	ldrb	r0, [r4]
   24564:	mov	r6, #1
   24568:	str	r0, [r5]
   2456c:	mov	r0, r6
   24570:	sub	sp, fp, #16
   24574:	pop	{r4, r5, r6, r7, fp, pc}
   24578:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2457c:	add	fp, sp, #28
   24580:	sub	sp, sp, #28
   24584:	mov	r4, r3
   24588:	mov	r6, r2
   2458c:	mov	r5, r1
   24590:	mov	r7, r0
   24594:	cmp	r1, r3
   24598:	bne	245b4 <__assert_fail@plt+0x12248>
   2459c:	mov	r0, r7
   245a0:	mov	r1, r6
   245a4:	mov	r2, r5
   245a8:	bl	1215c <bcmp@plt>
   245ac:	cmp	r0, #0
   245b0:	beq	2467c <__assert_fail@plt+0x12310>
   245b4:	ldrb	r0, [r6, r4]
   245b8:	mov	r9, #0
   245bc:	str	r4, [sp, #24]
   245c0:	add	r8, r4, #1
   245c4:	str	r5, [sp, #16]
   245c8:	add	sl, r5, #1
   245cc:	str	r0, [sp, #8]
   245d0:	ldrb	r0, [r7, r5]
   245d4:	strb	r9, [r7, r5]
   245d8:	strb	r9, [r6, r4]
   245dc:	str	r0, [sp, #4]
   245e0:	bl	12198 <__errno_location@plt>
   245e4:	mov	r4, r7
   245e8:	mov	r5, r0
   245ec:	mov	r7, r6
   245f0:	str	r6, [sp, #20]
   245f4:	str	r4, [sp, #12]
   245f8:	mov	r0, r4
   245fc:	mov	r1, r7
   24600:	str	r9, [r5]
   24604:	bl	120c0 <strcoll@plt>
   24608:	cmp	r0, #0
   2460c:	bne	2465c <__assert_fail@plt+0x122f0>
   24610:	mov	r0, r4
   24614:	bl	12174 <strlen@plt>
   24618:	add	r6, r0, #1
   2461c:	mov	r0, r7
   24620:	sub	sl, sl, r6
   24624:	bl	12174 <strlen@plt>
   24628:	add	r0, r0, #1
   2462c:	cmp	sl, #0
   24630:	sub	r8, r8, r0
   24634:	beq	24650 <__assert_fail@plt+0x122e4>
   24638:	add	r4, r4, r6
   2463c:	add	r7, r7, r0
   24640:	cmp	r8, #0
   24644:	bne	245f8 <__assert_fail@plt+0x1228c>
   24648:	mov	r0, #1
   2464c:	b	2465c <__assert_fail@plt+0x122f0>
   24650:	cmp	r8, #0
   24654:	mvnne	r8, #0
   24658:	mov	r0, r8
   2465c:	ldr	r1, [sp, #24]
   24660:	ldr	r2, [sp, #20]
   24664:	ldr	r3, [sp, #16]
   24668:	ldmib	sp, {r5, r6, r7}
   2466c:	strb	r5, [r7, r3]
   24670:	strb	r6, [r2, r1]
   24674:	sub	sp, fp, #28
   24678:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2467c:	bl	12198 <__errno_location@plt>
   24680:	mov	r1, r0
   24684:	mov	r0, #0
   24688:	str	r0, [r1]
   2468c:	sub	sp, fp, #28
   24690:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   24694:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   24698:	add	fp, sp, #28
   2469c:	sub	sp, sp, #4
   246a0:	mov	sl, r3
   246a4:	mov	r5, r2
   246a8:	mov	r6, r1
   246ac:	mov	r7, r0
   246b0:	cmp	r1, r3
   246b4:	bne	246d0 <__assert_fail@plt+0x12364>
   246b8:	mov	r0, r7
   246bc:	mov	r1, r5
   246c0:	mov	r2, r6
   246c4:	bl	1215c <bcmp@plt>
   246c8:	cmp	r0, #0
   246cc:	beq	2474c <__assert_fail@plt+0x123e0>
   246d0:	bl	12198 <__errno_location@plt>
   246d4:	mov	r8, r0
   246d8:	mov	r9, #0
   246dc:	mov	r0, r7
   246e0:	mov	r1, r5
   246e4:	str	r9, [r8]
   246e8:	bl	120c0 <strcoll@plt>
   246ec:	cmp	r0, #0
   246f0:	bne	24730 <__assert_fail@plt+0x123c4>
   246f4:	mov	r0, r7
   246f8:	bl	12174 <strlen@plt>
   246fc:	add	r4, r0, #1
   24700:	mov	r0, r5
   24704:	sub	r6, r6, r4
   24708:	bl	12174 <strlen@plt>
   2470c:	add	r0, r0, #1
   24710:	cmp	r6, #0
   24714:	sub	sl, sl, r0
   24718:	beq	24738 <__assert_fail@plt+0x123cc>
   2471c:	add	r7, r7, r4
   24720:	add	r5, r5, r0
   24724:	cmp	sl, #0
   24728:	bne	246dc <__assert_fail@plt+0x12370>
   2472c:	mov	r0, #1
   24730:	sub	sp, fp, #28
   24734:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   24738:	cmp	sl, #0
   2473c:	mvnne	sl, #0
   24740:	mov	r0, sl
   24744:	sub	sp, fp, #28
   24748:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2474c:	bl	12198 <__errno_location@plt>
   24750:	mov	r1, r0
   24754:	mov	r0, #0
   24758:	str	r0, [r1]
   2475c:	sub	sp, fp, #28
   24760:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

00024764 <_obstack_begin@@Base>:
   24764:	push	{r4, r5, r6, sl, fp, lr}
   24768:	add	fp, sp, #16
   2476c:	cmp	r1, #0
   24770:	mov	r4, r0
   24774:	str	r3, [r0, #28]
   24778:	mov	r5, r2
   2477c:	movweq	r1, #4072	; 0xfe8
   24780:	cmp	r2, #0
   24784:	str	r1, [r0]
   24788:	ldr	r0, [fp, #8]
   2478c:	movweq	r5, #8
   24790:	sub	r6, r5, #1
   24794:	str	r0, [r4, #32]
   24798:	str	r6, [r4, #24]
   2479c:	ldrb	r0, [r4, #40]	; 0x28
   247a0:	and	r0, r0, #254	; 0xfe
   247a4:	strb	r0, [r4, #40]	; 0x28
   247a8:	mov	r0, r1
   247ac:	blx	r3
   247b0:	cmp	r0, #0
   247b4:	str	r0, [r4, #4]
   247b8:	addne	r1, r0, r6
   247bc:	rsbne	r2, r5, #0
   247c0:	addne	r1, r1, #8
   247c4:	andne	r1, r1, r2
   247c8:	strne	r1, [r4, #12]
   247cc:	strne	r1, [r4, #8]
   247d0:	ldrne	r1, [r4]
   247d4:	addne	r1, r0, r1
   247d8:	strne	r1, [r0]
   247dc:	strne	r1, [r4, #16]
   247e0:	movne	r1, #0
   247e4:	strne	r1, [r0, #4]
   247e8:	ldrbne	r0, [r4, #40]	; 0x28
   247ec:	andne	r0, r0, #249	; 0xf9
   247f0:	strbne	r0, [r4, #40]	; 0x28
   247f4:	movne	r0, #1
   247f8:	popne	{r4, r5, r6, sl, fp, pc}
   247fc:	movw	r0, #33464	; 0x82b8
   24800:	movt	r0, #3
   24804:	ldr	r0, [r0]
   24808:	blx	r0

0002480c <_obstack_begin_1@@Base>:
   2480c:	push	{r4, r5, r6, sl, fp, lr}
   24810:	add	fp, sp, #16
   24814:	cmp	r1, #0
   24818:	mov	r5, r2
   2481c:	mov	r4, r0
   24820:	str	r3, [r0, #28]
   24824:	ldr	r2, [fp, #8]
   24828:	movweq	r1, #4072	; 0xfe8
   2482c:	cmp	r5, #0
   24830:	str	r1, [r0]
   24834:	ldr	r0, [fp, #12]
   24838:	movweq	r5, #8
   2483c:	sub	r6, r5, #1
   24840:	str	r0, [r4, #36]	; 0x24
   24844:	str	r2, [r4, #32]
   24848:	str	r6, [r4, #24]
   2484c:	ldrb	r2, [r4, #40]	; 0x28
   24850:	orr	r2, r2, #1
   24854:	strb	r2, [r4, #40]	; 0x28
   24858:	blx	r3
   2485c:	cmp	r0, #0
   24860:	str	r0, [r4, #4]
   24864:	addne	r1, r0, r6
   24868:	rsbne	r2, r5, #0
   2486c:	addne	r1, r1, #8
   24870:	andne	r1, r1, r2
   24874:	strne	r1, [r4, #12]
   24878:	strne	r1, [r4, #8]
   2487c:	ldrne	r1, [r4]
   24880:	addne	r1, r0, r1
   24884:	strne	r1, [r0]
   24888:	strne	r1, [r4, #16]
   2488c:	movne	r1, #0
   24890:	strne	r1, [r0, #4]
   24894:	ldrbne	r0, [r4, #40]	; 0x28
   24898:	andne	r0, r0, #249	; 0xf9
   2489c:	strbne	r0, [r4, #40]	; 0x28
   248a0:	movne	r0, #1
   248a4:	popne	{r4, r5, r6, sl, fp, pc}
   248a8:	movw	r0, #33464	; 0x82b8
   248ac:	movt	r0, #3
   248b0:	ldr	r0, [r0]
   248b4:	blx	r0

000248b8 <_obstack_newchunk@@Base>:
   248b8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   248bc:	add	fp, sp, #28
   248c0:	sub	sp, sp, #4
   248c4:	mov	r4, r0
   248c8:	ldr	r2, [r0]
   248cc:	ldr	r0, [r0, #8]
   248d0:	ldr	r3, [r4, #12]
   248d4:	sub	r9, r3, r0
   248d8:	ldr	r0, [r4, #24]
   248dc:	mov	r3, #0
   248e0:	add	r1, r9, r1
   248e4:	adds	r6, r1, r0
   248e8:	adc	r0, r3, #0
   248ec:	mov	r3, #100	; 0x64
   248f0:	add	r3, r3, r9, lsr #3
   248f4:	adds	r7, r3, r6
   248f8:	movcs	r7, r6
   248fc:	cmp	r7, r2
   24900:	movcc	r7, r2
   24904:	cmp	r1, r9
   24908:	bcc	24a00 <_obstack_newchunk@@Base+0x148>
   2490c:	cmp	r0, #0
   24910:	bne	24a00 <_obstack_newchunk@@Base+0x148>
   24914:	ldrb	r0, [r4, #40]	; 0x28
   24918:	ldr	r8, [r4, #4]
   2491c:	tst	r0, #1
   24920:	bne	24934 <_obstack_newchunk@@Base+0x7c>
   24924:	ldr	r1, [r4, #28]
   24928:	mov	r0, r7
   2492c:	blx	r1
   24930:	b	24944 <_obstack_newchunk@@Base+0x8c>
   24934:	ldr	r2, [r4, #28]
   24938:	ldr	r0, [r4, #36]	; 0x24
   2493c:	mov	r1, r7
   24940:	blx	r2
   24944:	mov	r6, r0
   24948:	cmp	r0, #0
   2494c:	beq	24a00 <_obstack_newchunk@@Base+0x148>
   24950:	add	r0, r6, r7
   24954:	str	r6, [r4, #4]
   24958:	str	r8, [r6, #4]
   2495c:	mov	r2, r9
   24960:	str	r0, [r4, #16]
   24964:	str	r0, [r6]
   24968:	ldr	r5, [r4, #24]
   2496c:	ldr	sl, [r4, #8]
   24970:	add	r0, r6, r5
   24974:	mov	r1, sl
   24978:	add	r0, r0, #8
   2497c:	bic	r7, r0, r5
   24980:	mov	r0, r7
   24984:	bl	11eec <memcpy@plt>
   24988:	ldrb	r0, [r4, #40]	; 0x28
   2498c:	tst	r0, #2
   24990:	bne	249e0 <_obstack_newchunk@@Base+0x128>
   24994:	add	r1, r8, r5
   24998:	mvn	r0, r5
   2499c:	add	r1, r1, #8
   249a0:	and	r0, r1, r0
   249a4:	cmp	sl, r0
   249a8:	bne	249e0 <_obstack_newchunk@@Base+0x128>
   249ac:	ldr	r0, [r8, #4]
   249b0:	str	r0, [r6, #4]
   249b4:	ldrb	r0, [r4, #40]	; 0x28
   249b8:	tst	r0, #1
   249bc:	bne	249d0 <_obstack_newchunk@@Base+0x118>
   249c0:	ldr	r1, [r4, #32]
   249c4:	mov	r0, r8
   249c8:	blx	r1
   249cc:	b	249e0 <_obstack_newchunk@@Base+0x128>
   249d0:	ldr	r2, [r4, #32]
   249d4:	ldr	r0, [r4, #36]	; 0x24
   249d8:	mov	r1, r8
   249dc:	blx	r2
   249e0:	add	r0, r7, r9
   249e4:	str	r7, [r4, #8]
   249e8:	str	r0, [r4, #12]
   249ec:	ldrb	r0, [r4, #40]	; 0x28
   249f0:	and	r0, r0, #253	; 0xfd
   249f4:	strb	r0, [r4, #40]	; 0x28
   249f8:	sub	sp, fp, #28
   249fc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   24a00:	movw	r0, #33464	; 0x82b8
   24a04:	movt	r0, #3
   24a08:	ldr	r0, [r0]
   24a0c:	blx	r0

00024a10 <_obstack_allocated_p@@Base>:
   24a10:	ldr	r2, [r0, #4]
   24a14:	mov	r0, #0
   24a18:	b	24a20 <_obstack_allocated_p@@Base+0x10>
   24a1c:	ldr	r2, [r2, #4]
   24a20:	cmp	r2, #0
   24a24:	bxeq	lr
   24a28:	cmp	r2, r1
   24a2c:	bcs	24a1c <_obstack_allocated_p@@Base+0xc>
   24a30:	ldr	r3, [r2]
   24a34:	cmp	r3, r1
   24a38:	bcc	24a1c <_obstack_allocated_p@@Base+0xc>
   24a3c:	mov	r0, #1
   24a40:	bx	lr

00024a44 <_obstack_free@@Base>:
   24a44:	push	{r4, r5, r6, sl, fp, lr}
   24a48:	add	fp, sp, #16
   24a4c:	mov	r5, r1
   24a50:	ldr	r1, [r0, #4]
   24a54:	cmp	r1, #0
   24a58:	beq	24ac4 <_obstack_free@@Base+0x80>
   24a5c:	mov	r4, r0
   24a60:	cmp	r1, r5
   24a64:	bcs	24aa4 <_obstack_free@@Base+0x60>
   24a68:	b	24a98 <_obstack_free@@Base+0x54>
   24a6c:	ldr	r2, [r4, #32]
   24a70:	mov	r0, r1
   24a74:	blx	r2
   24a78:	ldrb	r0, [r4, #40]	; 0x28
   24a7c:	cmp	r6, #0
   24a80:	mov	r1, r6
   24a84:	orr	r0, r0, #2
   24a88:	strb	r0, [r4, #40]	; 0x28
   24a8c:	beq	24ac4 <_obstack_free@@Base+0x80>
   24a90:	cmp	r1, r5
   24a94:	bcs	24aa4 <_obstack_free@@Base+0x60>
   24a98:	ldr	r0, [r1]
   24a9c:	cmp	r0, r5
   24aa0:	bcs	24ad0 <_obstack_free@@Base+0x8c>
   24aa4:	ldrb	r0, [r4, #40]	; 0x28
   24aa8:	ldr	r6, [r1, #4]
   24aac:	tst	r0, #1
   24ab0:	beq	24a6c <_obstack_free@@Base+0x28>
   24ab4:	ldr	r2, [r4, #32]
   24ab8:	ldr	r0, [r4, #36]	; 0x24
   24abc:	blx	r2
   24ac0:	b	24a78 <_obstack_free@@Base+0x34>
   24ac4:	cmp	r5, #0
   24ac8:	popeq	{r4, r5, r6, sl, fp, pc}
   24acc:	bl	12348 <abort@plt>
   24ad0:	str	r5, [r4, #8]
   24ad4:	str	r5, [r4, #12]
   24ad8:	ldr	r0, [r1]
   24adc:	str	r1, [r4, #4]
   24ae0:	str	r0, [r4, #16]
   24ae4:	pop	{r4, r5, r6, sl, fp, pc}

00024ae8 <_obstack_memory_used@@Base>:
   24ae8:	ldr	r1, [r0, #4]
   24aec:	mov	r0, #0
   24af0:	b	24b04 <_obstack_memory_used@@Base+0x1c>
   24af4:	ldr	r2, [r1]
   24af8:	sub	r0, r0, r1
   24afc:	ldr	r1, [r1, #4]
   24b00:	add	r0, r0, r2
   24b04:	cmp	r1, #0
   24b08:	bxeq	lr
   24b0c:	b	24af4 <_obstack_memory_used@@Base+0xc>
   24b10:	push	{fp, lr}
   24b14:	mov	fp, sp
   24b18:	movw	r0, #33488	; 0x82d0
   24b1c:	movw	r1, #30438	; 0x76e6
   24b20:	mov	r2, #5
   24b24:	movt	r0, #3
   24b28:	movt	r1, #2
   24b2c:	ldr	r4, [r0]
   24b30:	mov	r0, #0
   24b34:	bl	11f7c <dcgettext@plt>
   24b38:	movw	r2, #29662	; 0x73de
   24b3c:	mov	r3, r0
   24b40:	mov	r0, r4
   24b44:	mov	r1, #1
   24b48:	movt	r2, #2
   24b4c:	bl	121f8 <__fprintf_chk@plt>
   24b50:	movw	r0, #33392	; 0x8270
   24b54:	movt	r0, #3
   24b58:	ldr	r0, [r0]
   24b5c:	bl	12150 <exit@plt>
   24b60:	cmp	r2, #0
   24b64:	beq	24b94 <_obstack_memory_used@@Base+0xac>
   24b68:	mvn	r3, #0
   24b6c:	udiv	r3, r3, r2
   24b70:	cmp	r3, r1
   24b74:	bcs	24b94 <_obstack_memory_used@@Base+0xac>
   24b78:	push	{fp, lr}
   24b7c:	mov	fp, sp
   24b80:	bl	12198 <__errno_location@plt>
   24b84:	mov	r1, #12
   24b88:	str	r1, [r0]
   24b8c:	mov	r0, #0
   24b90:	pop	{fp, pc}
   24b94:	mul	r1, r2, r1
   24b98:	b	23d28 <__assert_fail@plt+0x119bc>
   24b9c:	mov	r1, #0
   24ba0:	mov	r2, #3
   24ba4:	b	241f0 <__assert_fail@plt+0x11e84>
   24ba8:	eor	r1, r1, #-2147483648	; 0x80000000
   24bac:	b	24bb4 <_obstack_memory_used@@Base+0xcc>
   24bb0:	eor	r3, r3, #-2147483648	; 0x80000000
   24bb4:	push	{r4, r5, lr}
   24bb8:	lsl	r4, r1, #1
   24bbc:	lsl	r5, r3, #1
   24bc0:	teq	r4, r5
   24bc4:	teqeq	r0, r2
   24bc8:	orrsne	ip, r4, r0
   24bcc:	orrsne	ip, r5, r2
   24bd0:	mvnsne	ip, r4, asr #21
   24bd4:	mvnsne	ip, r5, asr #21
   24bd8:	beq	24dc4 <_obstack_memory_used@@Base+0x2dc>
   24bdc:	lsr	r4, r4, #21
   24be0:	rsbs	r5, r4, r5, lsr #21
   24be4:	rsblt	r5, r5, #0
   24be8:	ble	24c08 <_obstack_memory_used@@Base+0x120>
   24bec:	add	r4, r4, r5
   24bf0:	eor	r2, r0, r2
   24bf4:	eor	r3, r1, r3
   24bf8:	eor	r0, r2, r0
   24bfc:	eor	r1, r3, r1
   24c00:	eor	r2, r0, r2
   24c04:	eor	r3, r1, r3
   24c08:	cmp	r5, #54	; 0x36
   24c0c:	pophi	{r4, r5, pc}
   24c10:	tst	r1, #-2147483648	; 0x80000000
   24c14:	lsl	r1, r1, #12
   24c18:	mov	ip, #1048576	; 0x100000
   24c1c:	orr	r1, ip, r1, lsr #12
   24c20:	beq	24c2c <_obstack_memory_used@@Base+0x144>
   24c24:	rsbs	r0, r0, #0
   24c28:	rsc	r1, r1, #0
   24c2c:	tst	r3, #-2147483648	; 0x80000000
   24c30:	lsl	r3, r3, #12
   24c34:	orr	r3, ip, r3, lsr #12
   24c38:	beq	24c44 <_obstack_memory_used@@Base+0x15c>
   24c3c:	rsbs	r2, r2, #0
   24c40:	rsc	r3, r3, #0
   24c44:	teq	r4, r5
   24c48:	beq	24dac <_obstack_memory_used@@Base+0x2c4>
   24c4c:	sub	r4, r4, #1
   24c50:	rsbs	lr, r5, #32
   24c54:	blt	24c70 <_obstack_memory_used@@Base+0x188>
   24c58:	lsl	ip, r2, lr
   24c5c:	adds	r0, r0, r2, lsr r5
   24c60:	adc	r1, r1, #0
   24c64:	adds	r0, r0, r3, lsl lr
   24c68:	adcs	r1, r1, r3, asr r5
   24c6c:	b	24c8c <_obstack_memory_used@@Base+0x1a4>
   24c70:	sub	r5, r5, #32
   24c74:	add	lr, lr, #32
   24c78:	cmp	r2, #1
   24c7c:	lsl	ip, r3, lr
   24c80:	orrcs	ip, ip, #2
   24c84:	adds	r0, r0, r3, asr r5
   24c88:	adcs	r1, r1, r3, asr #31
   24c8c:	and	r5, r1, #-2147483648	; 0x80000000
   24c90:	bpl	24ca0 <_obstack_memory_used@@Base+0x1b8>
   24c94:	rsbs	ip, ip, #0
   24c98:	rscs	r0, r0, #0
   24c9c:	rsc	r1, r1, #0
   24ca0:	cmp	r1, #1048576	; 0x100000
   24ca4:	bcc	24ce4 <_obstack_memory_used@@Base+0x1fc>
   24ca8:	cmp	r1, #2097152	; 0x200000
   24cac:	bcc	24ccc <_obstack_memory_used@@Base+0x1e4>
   24cb0:	lsrs	r1, r1, #1
   24cb4:	rrxs	r0, r0
   24cb8:	rrx	ip, ip
   24cbc:	add	r4, r4, #1
   24cc0:	lsl	r2, r4, #21
   24cc4:	cmn	r2, #4194304	; 0x400000
   24cc8:	bcs	24e24 <_obstack_memory_used@@Base+0x33c>
   24ccc:	cmp	ip, #-2147483648	; 0x80000000
   24cd0:	lsrseq	ip, r0, #1
   24cd4:	adcs	r0, r0, #0
   24cd8:	adc	r1, r1, r4, lsl #20
   24cdc:	orr	r1, r1, r5
   24ce0:	pop	{r4, r5, pc}
   24ce4:	lsls	ip, ip, #1
   24ce8:	adcs	r0, r0, r0
   24cec:	adc	r1, r1, r1
   24cf0:	tst	r1, #1048576	; 0x100000
   24cf4:	sub	r4, r4, #1
   24cf8:	bne	24ccc <_obstack_memory_used@@Base+0x1e4>
   24cfc:	teq	r1, #0
   24d00:	moveq	r1, r0
   24d04:	moveq	r0, #0
   24d08:	clz	r3, r1
   24d0c:	addeq	r3, r3, #32
   24d10:	sub	r3, r3, #11
   24d14:	subs	r2, r3, #32
   24d18:	bge	24d3c <_obstack_memory_used@@Base+0x254>
   24d1c:	adds	r2, r2, #12
   24d20:	ble	24d38 <_obstack_memory_used@@Base+0x250>
   24d24:	add	ip, r2, #20
   24d28:	rsb	r2, r2, #12
   24d2c:	lsl	r0, r1, ip
   24d30:	lsr	r1, r1, r2
   24d34:	b	24d4c <_obstack_memory_used@@Base+0x264>
   24d38:	add	r2, r2, #20
   24d3c:	rsble	ip, r2, #32
   24d40:	lsl	r1, r1, r2
   24d44:	orrle	r1, r1, r0, lsr ip
   24d48:	lslle	r0, r0, r2
   24d4c:	subs	r4, r4, r3
   24d50:	addge	r1, r1, r4, lsl #20
   24d54:	orrge	r1, r1, r5
   24d58:	popge	{r4, r5, pc}
   24d5c:	mvn	r4, r4
   24d60:	subs	r4, r4, #31
   24d64:	bge	24da0 <_obstack_memory_used@@Base+0x2b8>
   24d68:	adds	r4, r4, #12
   24d6c:	bgt	24d88 <_obstack_memory_used@@Base+0x2a0>
   24d70:	add	r4, r4, #20
   24d74:	rsb	r2, r4, #32
   24d78:	lsr	r0, r0, r4
   24d7c:	orr	r0, r0, r1, lsl r2
   24d80:	orr	r1, r5, r1, lsr r4
   24d84:	pop	{r4, r5, pc}
   24d88:	rsb	r4, r4, #12
   24d8c:	rsb	r2, r4, #32
   24d90:	lsr	r0, r0, r2
   24d94:	orr	r0, r0, r1, lsl r4
   24d98:	mov	r1, r5
   24d9c:	pop	{r4, r5, pc}
   24da0:	lsr	r0, r1, r4
   24da4:	mov	r1, r5
   24da8:	pop	{r4, r5, pc}
   24dac:	teq	r4, #0
   24db0:	eor	r3, r3, #1048576	; 0x100000
   24db4:	eoreq	r1, r1, #1048576	; 0x100000
   24db8:	addeq	r4, r4, #1
   24dbc:	subne	r5, r5, #1
   24dc0:	b	24c4c <_obstack_memory_used@@Base+0x164>
   24dc4:	mvns	ip, r4, asr #21
   24dc8:	mvnsne	ip, r5, asr #21
   24dcc:	beq	24e34 <_obstack_memory_used@@Base+0x34c>
   24dd0:	teq	r4, r5
   24dd4:	teqeq	r0, r2
   24dd8:	beq	24dec <_obstack_memory_used@@Base+0x304>
   24ddc:	orrs	ip, r4, r0
   24de0:	moveq	r1, r3
   24de4:	moveq	r0, r2
   24de8:	pop	{r4, r5, pc}
   24dec:	teq	r1, r3
   24df0:	movne	r1, #0
   24df4:	movne	r0, #0
   24df8:	popne	{r4, r5, pc}
   24dfc:	lsrs	ip, r4, #21
   24e00:	bne	24e14 <_obstack_memory_used@@Base+0x32c>
   24e04:	lsls	r0, r0, #1
   24e08:	adcs	r1, r1, r1
   24e0c:	orrcs	r1, r1, #-2147483648	; 0x80000000
   24e10:	pop	{r4, r5, pc}
   24e14:	adds	r4, r4, #4194304	; 0x400000
   24e18:	addcc	r1, r1, #1048576	; 0x100000
   24e1c:	popcc	{r4, r5, pc}
   24e20:	and	r5, r1, #-2147483648	; 0x80000000
   24e24:	orr	r1, r5, #2130706432	; 0x7f000000
   24e28:	orr	r1, r1, #15728640	; 0xf00000
   24e2c:	mov	r0, #0
   24e30:	pop	{r4, r5, pc}
   24e34:	mvns	ip, r4, asr #21
   24e38:	movne	r1, r3
   24e3c:	movne	r0, r2
   24e40:	mvnseq	ip, r5, asr #21
   24e44:	movne	r3, r1
   24e48:	movne	r2, r0
   24e4c:	orrs	r4, r0, r1, lsl #12
   24e50:	orrseq	r5, r2, r3, lsl #12
   24e54:	teqeq	r1, r3
   24e58:	orrne	r1, r1, #524288	; 0x80000
   24e5c:	pop	{r4, r5, pc}
   24e60:	teq	r0, #0
   24e64:	moveq	r1, #0
   24e68:	bxeq	lr
   24e6c:	push	{r4, r5, lr}
   24e70:	mov	r4, #1024	; 0x400
   24e74:	add	r4, r4, #50	; 0x32
   24e78:	mov	r5, #0
   24e7c:	mov	r1, #0
   24e80:	b	24cfc <_obstack_memory_used@@Base+0x214>
   24e84:	teq	r0, #0
   24e88:	moveq	r1, #0
   24e8c:	bxeq	lr
   24e90:	push	{r4, r5, lr}
   24e94:	mov	r4, #1024	; 0x400
   24e98:	add	r4, r4, #50	; 0x32
   24e9c:	ands	r5, r0, #-2147483648	; 0x80000000
   24ea0:	rsbmi	r0, r0, #0
   24ea4:	mov	r1, #0
   24ea8:	b	24cfc <_obstack_memory_used@@Base+0x214>
   24eac:	lsls	r2, r0, #1
   24eb0:	asr	r1, r2, #3
   24eb4:	rrx	r1, r1
   24eb8:	lsl	r0, r2, #28
   24ebc:	andsne	r3, r2, #-16777216	; 0xff000000
   24ec0:	teqne	r3, #-16777216	; 0xff000000
   24ec4:	eorne	r1, r1, #939524096	; 0x38000000
   24ec8:	bxne	lr
   24ecc:	bics	r2, r2, #-16777216	; 0xff000000
   24ed0:	bxeq	lr
   24ed4:	teq	r3, #-16777216	; 0xff000000
   24ed8:	orreq	r1, r1, #524288	; 0x80000
   24edc:	bxeq	lr
   24ee0:	push	{r4, r5, lr}
   24ee4:	mov	r4, #896	; 0x380
   24ee8:	and	r5, r1, #-2147483648	; 0x80000000
   24eec:	bic	r1, r1, #-2147483648	; 0x80000000
   24ef0:	b	24cfc <_obstack_memory_used@@Base+0x214>
   24ef4:	orrs	r2, r0, r1
   24ef8:	bxeq	lr
   24efc:	push	{r4, r5, lr}
   24f00:	mov	r5, #0
   24f04:	b	24f24 <_obstack_memory_used@@Base+0x43c>
   24f08:	orrs	r2, r0, r1
   24f0c:	bxeq	lr
   24f10:	push	{r4, r5, lr}
   24f14:	ands	r5, r1, #-2147483648	; 0x80000000
   24f18:	bpl	24f24 <_obstack_memory_used@@Base+0x43c>
   24f1c:	rsbs	r0, r0, #0
   24f20:	rsc	r1, r1, #0
   24f24:	mov	r4, #1024	; 0x400
   24f28:	add	r4, r4, #50	; 0x32
   24f2c:	lsrs	ip, r1, #22
   24f30:	beq	24ca0 <_obstack_memory_used@@Base+0x1b8>
   24f34:	mov	r2, #3
   24f38:	lsrs	ip, ip, #3
   24f3c:	addne	r2, r2, #3
   24f40:	lsrs	ip, ip, #3
   24f44:	addne	r2, r2, #3
   24f48:	add	r2, r2, ip, lsr #3
   24f4c:	rsb	r3, r2, #32
   24f50:	lsl	ip, r0, r3
   24f54:	lsr	r0, r0, r2
   24f58:	orr	r0, r0, r1, lsl r3
   24f5c:	lsr	r1, r1, r2
   24f60:	add	r4, r4, r2
   24f64:	b	24ca0 <_obstack_memory_used@@Base+0x1b8>
   24f68:	cmp	r3, #0
   24f6c:	cmpeq	r2, #0
   24f70:	bne	24f88 <_obstack_memory_used@@Base+0x4a0>
   24f74:	cmp	r1, #0
   24f78:	cmpeq	r0, #0
   24f7c:	mvnne	r1, #0
   24f80:	mvnne	r0, #0
   24f84:	b	24fa4 <_obstack_memory_used@@Base+0x4bc>
   24f88:	sub	sp, sp, #8
   24f8c:	push	{sp, lr}
   24f90:	bl	24ff8 <_obstack_memory_used@@Base+0x510>
   24f94:	ldr	lr, [sp, #4]
   24f98:	add	sp, sp, #8
   24f9c:	pop	{r2, r3}
   24fa0:	bx	lr
   24fa4:	push	{r1, lr}
   24fa8:	mov	r0, #8
   24fac:	bl	11e44 <raise@plt>
   24fb0:	pop	{r1, pc}
   24fb4:	andeq	r0, r0, r0
   24fb8:	vmov	d6, r0, r1
   24fbc:	vldr	d7, [pc, #36]	; 24fe8 <_obstack_memory_used@@Base+0x500>
   24fc0:	vldr	d5, [pc, #40]	; 24ff0 <_obstack_memory_used@@Base+0x508>
   24fc4:	vmul.f64	d7, d6, d7
   24fc8:	vcvt.u32.f64	s14, d7
   24fcc:	vcvt.f64.u32	d4, s14
   24fd0:	vmov	r1, s14
   24fd4:	vmls.f64	d6, d4, d5
   24fd8:	vcvt.u32.f64	s15, d6
   24fdc:	vmov	r0, s15
   24fe0:	bx	lr
   24fe4:	nop			; (mov r0, r0)
   24fe8:	andeq	r0, r0, r0
   24fec:	ldclcc	0, cr0, [r0]
   24ff0:	andeq	r0, r0, r0
   24ff4:	mvnsmi	r0, r0
   24ff8:	cmp	r1, r3
   24ffc:	cmpeq	r0, r2
   25000:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   25004:	mov	r4, r0
   25008:	movcc	r0, #0
   2500c:	mov	r5, r1
   25010:	ldr	lr, [sp, #36]	; 0x24
   25014:	movcc	r1, r0
   25018:	bcc	25114 <_obstack_memory_used@@Base+0x62c>
   2501c:	cmp	r3, #0
   25020:	clzeq	ip, r2
   25024:	clzne	ip, r3
   25028:	addeq	ip, ip, #32
   2502c:	cmp	r5, #0
   25030:	clzeq	r1, r4
   25034:	addeq	r1, r1, #32
   25038:	clzne	r1, r5
   2503c:	sub	ip, ip, r1
   25040:	sub	sl, ip, #32
   25044:	lsl	r9, r3, ip
   25048:	rsb	fp, ip, #32
   2504c:	orr	r9, r9, r2, lsl sl
   25050:	orr	r9, r9, r2, lsr fp
   25054:	lsl	r8, r2, ip
   25058:	cmp	r5, r9
   2505c:	cmpeq	r4, r8
   25060:	movcc	r0, #0
   25064:	movcc	r1, r0
   25068:	bcc	25084 <_obstack_memory_used@@Base+0x59c>
   2506c:	mov	r0, #1
   25070:	subs	r4, r4, r8
   25074:	lsl	r1, r0, sl
   25078:	orr	r1, r1, r0, lsr fp
   2507c:	lsl	r0, r0, ip
   25080:	sbc	r5, r5, r9
   25084:	cmp	ip, #0
   25088:	beq	25114 <_obstack_memory_used@@Base+0x62c>
   2508c:	lsr	r6, r8, #1
   25090:	orr	r6, r6, r9, lsl #31
   25094:	lsr	r7, r9, #1
   25098:	mov	r2, ip
   2509c:	b	250c0 <_obstack_memory_used@@Base+0x5d8>
   250a0:	subs	r3, r4, r6
   250a4:	sbc	r8, r5, r7
   250a8:	adds	r3, r3, r3
   250ac:	adc	r8, r8, r8
   250b0:	adds	r4, r3, #1
   250b4:	adc	r5, r8, #0
   250b8:	subs	r2, r2, #1
   250bc:	beq	250dc <_obstack_memory_used@@Base+0x5f4>
   250c0:	cmp	r5, r7
   250c4:	cmpeq	r4, r6
   250c8:	bcs	250a0 <_obstack_memory_used@@Base+0x5b8>
   250cc:	adds	r4, r4, r4
   250d0:	adc	r5, r5, r5
   250d4:	subs	r2, r2, #1
   250d8:	bne	250c0 <_obstack_memory_used@@Base+0x5d8>
   250dc:	lsr	r3, r4, ip
   250e0:	orr	r3, r3, r5, lsl fp
   250e4:	lsr	r2, r5, ip
   250e8:	orr	r3, r3, r5, lsr sl
   250ec:	adds	r0, r0, r4
   250f0:	mov	r4, r3
   250f4:	lsl	r3, r2, ip
   250f8:	orr	r3, r3, r4, lsl sl
   250fc:	lsl	ip, r4, ip
   25100:	orr	r3, r3, r4, lsr fp
   25104:	adc	r1, r1, r5
   25108:	subs	r0, r0, ip
   2510c:	mov	r5, r2
   25110:	sbc	r1, r1, r3
   25114:	cmp	lr, #0
   25118:	strdne	r4, [lr]
   2511c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   25120:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   25124:	mov	r7, r0
   25128:	ldr	r6, [pc, #72]	; 25178 <_obstack_memory_used@@Base+0x690>
   2512c:	ldr	r5, [pc, #72]	; 2517c <_obstack_memory_used@@Base+0x694>
   25130:	add	r6, pc, r6
   25134:	add	r5, pc, r5
   25138:	sub	r6, r6, r5
   2513c:	mov	r8, r1
   25140:	mov	r9, r2
   25144:	bl	11df4 <pthread_mutex_unlock@plt-0x20>
   25148:	asrs	r6, r6, #2
   2514c:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   25150:	mov	r4, #0
   25154:	add	r4, r4, #1
   25158:	ldr	r3, [r5], #4
   2515c:	mov	r2, r9
   25160:	mov	r1, r8
   25164:	mov	r0, r7
   25168:	blx	r3
   2516c:	cmp	r6, r4
   25170:	bne	25154 <_obstack_memory_used@@Base+0x66c>
   25174:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   25178:	andeq	r2, r1, ip, asr #27
   2517c:	andeq	r2, r1, r4, asr #27
   25180:	bx	lr
   25184:	ldr	r3, [pc, #12]	; 25198 <_obstack_memory_used@@Base+0x6b0>
   25188:	mov	r1, #0
   2518c:	add	r3, pc, r3
   25190:	ldr	r2, [r3]
   25194:	b	121a4 <__cxa_atexit@plt>
   25198:	andeq	r3, r1, r0, asr r0

Disassembly of section .fini:

0002519c <.fini>:
   2519c:	push	{r3, lr}
   251a0:	pop	{r3, pc}
