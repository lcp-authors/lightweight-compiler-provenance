
../repos/coreutils/src/stdbuf:     file format elf32-littlearm


Disassembly of section .init:

00010cdc <.init>:
   10cdc:	push	{r3, lr}
   10ce0:	bl	116e0 <__assert_fail@plt+0x75c>
   10ce4:	pop	{r3, pc}

Disassembly of section .plt:

00010ce8 <calloc@plt-0x14>:
   10ce8:	push	{lr}		; (str lr, [sp, #-4]!)
   10cec:	ldr	lr, [pc, #4]	; 10cf8 <calloc@plt-0x4>
   10cf0:	add	lr, pc, lr
   10cf4:	ldr	pc, [lr, #8]!
   10cf8:	andeq	r6, r1, r8, lsl #6

00010cfc <calloc@plt>:
   10cfc:	add	ip, pc, #0, 12
   10d00:	add	ip, ip, #90112	; 0x16000
   10d04:	ldr	pc, [ip, #776]!	; 0x308

00010d08 <fputs_unlocked@plt>:
   10d08:	add	ip, pc, #0, 12
   10d0c:	add	ip, ip, #90112	; 0x16000
   10d10:	ldr	pc, [ip, #768]!	; 0x300

00010d14 <strcmp@plt>:
   10d14:	add	ip, pc, #0, 12
   10d18:	add	ip, ip, #90112	; 0x16000
   10d1c:	ldr	pc, [ip, #760]!	; 0x2f8

00010d20 <fflush@plt>:
   10d20:	add	ip, pc, #0, 12
   10d24:	add	ip, ip, #90112	; 0x16000
   10d28:	ldr	pc, [ip, #752]!	; 0x2f0

00010d2c <free@plt>:
   10d2c:	add	ip, pc, #0, 12
   10d30:	add	ip, ip, #90112	; 0x16000
   10d34:	ldr	pc, [ip, #744]!	; 0x2e8

00010d38 <_exit@plt>:
   10d38:	add	ip, pc, #0, 12
   10d3c:	add	ip, ip, #90112	; 0x16000
   10d40:	ldr	pc, [ip, #736]!	; 0x2e0

00010d44 <memcpy@plt>:
   10d44:	add	ip, pc, #0, 12
   10d48:	add	ip, ip, #90112	; 0x16000
   10d4c:	ldr	pc, [ip, #728]!	; 0x2d8

00010d50 <execvp@plt>:
   10d50:	add	ip, pc, #0, 12
   10d54:	add	ip, ip, #90112	; 0x16000
   10d58:	ldr	pc, [ip, #720]!	; 0x2d0

00010d5c <__strtoull_internal@plt>:
   10d5c:	add	ip, pc, #0, 12
   10d60:	add	ip, ip, #90112	; 0x16000
   10d64:	ldr	pc, [ip, #712]!	; 0x2c8

00010d68 <mbsinit@plt>:
   10d68:	add	ip, pc, #0, 12
   10d6c:	add	ip, ip, #90112	; 0x16000
   10d70:	ldr	pc, [ip, #704]!	; 0x2c0

00010d74 <memcmp@plt>:
   10d74:	add	ip, pc, #0, 12
   10d78:	add	ip, ip, #90112	; 0x16000
   10d7c:	ldr	pc, [ip, #696]!	; 0x2b8

00010d80 <fputc_unlocked@plt>:
   10d80:	add	ip, pc, #0, 12
   10d84:	add	ip, ip, #90112	; 0x16000
   10d88:	ldr	pc, [ip, #688]!	; 0x2b0

00010d8c <dcgettext@plt>:
   10d8c:	add	ip, pc, #0, 12
   10d90:	add	ip, ip, #90112	; 0x16000
   10d94:	ldr	pc, [ip, #680]!	; 0x2a8

00010d98 <realloc@plt>:
   10d98:	add	ip, pc, #0, 12
   10d9c:	add	ip, ip, #90112	; 0x16000
   10da0:	ldr	pc, [ip, #672]!	; 0x2a0

00010da4 <textdomain@plt>:
   10da4:	add	ip, pc, #0, 12
   10da8:	add	ip, ip, #90112	; 0x16000
   10dac:	ldr	pc, [ip, #664]!	; 0x298

00010db0 <iswprint@plt>:
   10db0:	add	ip, pc, #0, 12
   10db4:	add	ip, ip, #90112	; 0x16000
   10db8:	ldr	pc, [ip, #656]!	; 0x290

00010dbc <readlink@plt>:
   10dbc:	add	ip, pc, #0, 12
   10dc0:	add	ip, ip, #90112	; 0x16000
   10dc4:	ldr	pc, [ip, #648]!	; 0x288

00010dc8 <fwrite@plt>:
   10dc8:	add	ip, pc, #0, 12
   10dcc:	add	ip, ip, #90112	; 0x16000
   10dd0:	ldr	pc, [ip, #640]!	; 0x280

00010dd4 <lseek64@plt>:
   10dd4:	add	ip, pc, #0, 12
   10dd8:	add	ip, ip, #90112	; 0x16000
   10ddc:	ldr	pc, [ip, #632]!	; 0x278

00010de0 <__ctype_get_mb_cur_max@plt>:
   10de0:	add	ip, pc, #0, 12
   10de4:	add	ip, ip, #90112	; 0x16000
   10de8:	ldr	pc, [ip, #624]!	; 0x270

00010dec <__fpending@plt>:
   10dec:	add	ip, pc, #0, 12
   10df0:	add	ip, ip, #90112	; 0x16000
   10df4:	ldr	pc, [ip, #616]!	; 0x268

00010df8 <mbrtowc@plt>:
   10df8:	add	ip, pc, #0, 12
   10dfc:	add	ip, ip, #90112	; 0x16000
   10e00:	ldr	pc, [ip, #608]!	; 0x260

00010e04 <error@plt>:
   10e04:	add	ip, pc, #0, 12
   10e08:	add	ip, ip, #90112	; 0x16000
   10e0c:	ldr	pc, [ip, #600]!	; 0x258

00010e10 <__asprintf_chk@plt>:
   10e10:	add	ip, pc, #0, 12
   10e14:	add	ip, ip, #90112	; 0x16000
   10e18:	ldr	pc, [ip, #592]!	; 0x250

00010e1c <getenv@plt>:
   10e1c:	add	ip, pc, #0, 12
   10e20:	add	ip, ip, #90112	; 0x16000
   10e24:	ldr	pc, [ip, #584]!	; 0x248

00010e28 <malloc@plt>:
   10e28:	add	ip, pc, #0, 12
   10e2c:	add	ip, ip, #90112	; 0x16000
   10e30:	ldr	pc, [ip, #576]!	; 0x240

00010e34 <__libc_start_main@plt>:
   10e34:	add	ip, pc, #0, 12
   10e38:	add	ip, ip, #90112	; 0x16000
   10e3c:	ldr	pc, [ip, #568]!	; 0x238

00010e40 <__freading@plt>:
   10e40:	add	ip, pc, #0, 12
   10e44:	add	ip, ip, #90112	; 0x16000
   10e48:	ldr	pc, [ip, #560]!	; 0x230

00010e4c <__ctype_toupper_loc@plt>:
   10e4c:	add	ip, pc, #0, 12
   10e50:	add	ip, ip, #90112	; 0x16000
   10e54:	ldr	pc, [ip, #552]!	; 0x228

00010e58 <__gmon_start__@plt>:
   10e58:	add	ip, pc, #0, 12
   10e5c:	add	ip, ip, #90112	; 0x16000
   10e60:	ldr	pc, [ip, #544]!	; 0x220

00010e64 <mempcpy@plt>:
   10e64:	add	ip, pc, #0, 12
   10e68:	add	ip, ip, #90112	; 0x16000
   10e6c:	ldr	pc, [ip, #536]!	; 0x218

00010e70 <getopt_long@plt>:
   10e70:	add	ip, pc, #0, 12
   10e74:	add	ip, ip, #90112	; 0x16000
   10e78:	ldr	pc, [ip, #528]!	; 0x210

00010e7c <__ctype_b_loc@plt>:
   10e7c:	add	ip, pc, #0, 12
   10e80:	add	ip, ip, #90112	; 0x16000
   10e84:	ldr	pc, [ip, #520]!	; 0x208

00010e88 <exit@plt>:
   10e88:	add	ip, pc, #0, 12
   10e8c:	add	ip, ip, #90112	; 0x16000
   10e90:	ldr	pc, [ip, #512]!	; 0x200

00010e94 <strlen@plt>:
   10e94:	add	ip, pc, #0, 12
   10e98:	add	ip, ip, #90112	; 0x16000
   10e9c:	ldr	pc, [ip, #504]!	; 0x1f8

00010ea0 <strchr@plt>:
   10ea0:	add	ip, pc, #0, 12
   10ea4:	add	ip, ip, #90112	; 0x16000
   10ea8:	ldr	pc, [ip, #496]!	; 0x1f0

00010eac <__errno_location@plt>:
   10eac:	add	ip, pc, #0, 12
   10eb0:	add	ip, ip, #90112	; 0x16000
   10eb4:	ldr	pc, [ip, #488]!	; 0x1e8

00010eb8 <__cxa_atexit@plt>:
   10eb8:	add	ip, pc, #0, 12
   10ebc:	add	ip, ip, #90112	; 0x16000
   10ec0:	ldr	pc, [ip, #480]!	; 0x1e0

00010ec4 <memset@plt>:
   10ec4:	add	ip, pc, #0, 12
   10ec8:	add	ip, ip, #90112	; 0x16000
   10ecc:	ldr	pc, [ip, #472]!	; 0x1d8

00010ed0 <__printf_chk@plt>:
   10ed0:	add	ip, pc, #0, 12
   10ed4:	add	ip, ip, #90112	; 0x16000
   10ed8:	ldr	pc, [ip, #464]!	; 0x1d0

00010edc <fileno@plt>:
   10edc:	add	ip, pc, #0, 12
   10ee0:	add	ip, ip, #90112	; 0x16000
   10ee4:	ldr	pc, [ip, #456]!	; 0x1c8

00010ee8 <__fprintf_chk@plt>:
   10ee8:	add	ip, pc, #0, 12
   10eec:	add	ip, ip, #90112	; 0x16000
   10ef0:	ldr	pc, [ip, #448]!	; 0x1c0

00010ef4 <access@plt>:
   10ef4:	add	ip, pc, #0, 12
   10ef8:	add	ip, ip, #90112	; 0x16000
   10efc:	ldr	pc, [ip, #440]!	; 0x1b8

00010f00 <fclose@plt>:
   10f00:	add	ip, pc, #0, 12
   10f04:	add	ip, ip, #90112	; 0x16000
   10f08:	ldr	pc, [ip, #432]!	; 0x1b0

00010f0c <fseeko64@plt>:
   10f0c:	add	ip, pc, #0, 12
   10f10:	add	ip, ip, #90112	; 0x16000
   10f14:	ldr	pc, [ip, #424]!	; 0x1a8

00010f18 <strtok@plt>:
   10f18:	add	ip, pc, #0, 12
   10f1c:	add	ip, ip, #90112	; 0x16000
   10f20:	ldr	pc, [ip, #416]!	; 0x1a0

00010f24 <setlocale@plt>:
   10f24:	add	ip, pc, #0, 12
   10f28:	add	ip, ip, #90112	; 0x16000
   10f2c:	ldr	pc, [ip, #408]!	; 0x198

00010f30 <putenv@plt>:
   10f30:	add	ip, pc, #0, 12
   10f34:	add	ip, ip, #90112	; 0x16000
   10f38:	ldr	pc, [ip, #400]!	; 0x190

00010f3c <strrchr@plt>:
   10f3c:	add	ip, pc, #0, 12
   10f40:	add	ip, ip, #90112	; 0x16000
   10f44:	ldr	pc, [ip, #392]!	; 0x188

00010f48 <nl_langinfo@plt>:
   10f48:	add	ip, pc, #0, 12
   10f4c:	add	ip, ip, #90112	; 0x16000
   10f50:	ldr	pc, [ip, #384]!	; 0x180

00010f54 <bindtextdomain@plt>:
   10f54:	add	ip, pc, #0, 12
   10f58:	add	ip, ip, #90112	; 0x16000
   10f5c:	ldr	pc, [ip, #376]!	; 0x178

00010f60 <__xstat64@plt>:
   10f60:	add	ip, pc, #0, 12
   10f64:	add	ip, ip, #90112	; 0x16000
   10f68:	ldr	pc, [ip, #368]!	; 0x170

00010f6c <strncmp@plt>:
   10f6c:	add	ip, pc, #0, 12
   10f70:	add	ip, ip, #90112	; 0x16000
   10f74:	ldr	pc, [ip, #360]!	; 0x168

00010f78 <abort@plt>:
   10f78:	add	ip, pc, #0, 12
   10f7c:	add	ip, ip, #90112	; 0x16000
   10f80:	ldr	pc, [ip, #352]!	; 0x160

00010f84 <__assert_fail@plt>:
   10f84:	add	ip, pc, #0, 12
   10f88:	add	ip, ip, #90112	; 0x16000
   10f8c:	ldr	pc, [ip, #344]!	; 0x158

Disassembly of section .text:

00010f90 <.text>:
   10f90:	strd	r4, [sp, #-36]!	; 0xffffffdc
   10f94:	mov	r4, r1
   10f98:	strd	r6, [sp, #8]
   10f9c:	strd	r8, [sp, #16]
   10fa0:	mov	r9, r0
   10fa4:	strd	sl, [sp, #24]
   10fa8:	str	lr, [sp, #32]
   10fac:	sub	sp, sp, #156	; 0x9c
   10fb0:	ldr	r0, [r1]
   10fb4:	bl	11ef8 <__assert_fail@plt+0xf74>
   10fb8:	ldr	r8, [pc, #1756]	; 1169c <__assert_fail@plt+0x718>
   10fbc:	movw	r1, #25156	; 0x6244
   10fc0:	movt	r1, #1
   10fc4:	mov	r0, #6
   10fc8:	bl	10f24 <setlocale@plt>
   10fcc:	movw	r1, #26040	; 0x65b8
   10fd0:	movt	r1, #1
   10fd4:	movw	r0, #25872	; 0x6510
   10fd8:	movt	r0, #1
   10fdc:	bl	10f54 <bindtextdomain@plt>
   10fe0:	movw	r0, #25872	; 0x6510
   10fe4:	movt	r0, #1
   10fe8:	bl	10da4 <textdomain@plt>
   10fec:	movw	r3, #28920	; 0x70f8
   10ff0:	movt	r3, #2
   10ff4:	mov	r2, #125	; 0x7d
   10ff8:	movw	r0, #7028	; 0x1b74
   10ffc:	movt	r0, #1
   11000:	sub	sl, r8, #108	; 0x6c
   11004:	str	r2, [r3]
   11008:	bl	15ee0 <__assert_fail@plt+0x4f5c>
   1100c:	movw	r6, #26224	; 0x6670
   11010:	movt	r6, #1
   11014:	mov	r5, #0
   11018:	mov	r3, r8
   1101c:	mov	r2, r6
   11020:	mov	r1, r4
   11024:	mov	r0, r9
   11028:	str	r5, [sp]
   1102c:	bl	10e70 <getopt_long@plt>
   11030:	cmn	r0, #1
   11034:	beq	111fc <__assert_fail@plt+0x278>
   11038:	cmp	r0, #101	; 0x65
   1103c:	beq	11094 <__assert_fail@plt+0x110>
   11040:	bgt	1108c <__assert_fail@plt+0x108>
   11044:	cmn	r0, #3
   11048:	bne	111b8 <__assert_fail@plt+0x234>
   1104c:	movw	r2, #26208	; 0x6660
   11050:	movt	r2, #1
   11054:	movw	r3, #28916	; 0x70f4
   11058:	movt	r3, #2
   1105c:	movw	r0, #29012	; 0x7154
   11060:	movt	r0, #2
   11064:	stm	sp, {r2, r5}
   11068:	movw	r1, #24528	; 0x5fd0
   1106c:	movt	r1, #1
   11070:	ldr	r0, [r0]
   11074:	movw	r2, #25868	; 0x650c
   11078:	movt	r2, #1
   1107c:	ldr	r3, [r3]
   11080:	bl	14684 <__assert_fail@plt+0x3700>
   11084:	mov	r0, r5
   11088:	bl	10e88 <exit@plt>
   1108c:	cmp	r0, #105	; 0x69
   11090:	bne	111a8 <__assert_fail@plt+0x224>
   11094:	add	r3, sl, r0, lsl #2
   11098:	ldr	fp, [r3, #-348]	; 0xfffffea4
   1109c:	cmp	fp, #2
   110a0:	bhi	115ec <__assert_fail@plt+0x668>
   110a4:	lsl	ip, fp, #1
   110a8:	movw	r7, #29016	; 0x7158
   110ac:	movt	r7, #2
   110b0:	ldr	r2, [r7]
   110b4:	movw	r5, #29024	; 0x7160
   110b8:	movt	r5, #2
   110bc:	add	r3, ip, fp
   110c0:	add	r3, r5, r3, lsl #2
   110c4:	str	r0, [r3, #4]
   110c8:	mov	r3, r2
   110cc:	ldrb	r1, [r2], #1
   110d0:	cmp	r1, #9
   110d4:	bcc	110fc <__assert_fail@plt+0x178>
   110d8:	cmp	r1, #13
   110dc:	bls	110e8 <__assert_fail@plt+0x164>
   110e0:	cmp	r1, #32
   110e4:	bne	110fc <__assert_fail@plt+0x178>
   110e8:	mov	r3, r2
   110ec:	str	r2, [r7]
   110f0:	ldrb	r1, [r2], #1
   110f4:	cmp	r1, #9
   110f8:	bcs	110d8 <__assert_fail@plt+0x154>
   110fc:	add	ip, ip, fp
   11100:	cmp	r0, #105	; 0x69
   11104:	add	ip, r5, ip, lsl #2
   11108:	str	r3, [ip, #8]
   1110c:	beq	111c8 <__assert_fail@plt+0x244>
   11110:	mov	r0, r3
   11114:	movw	r1, #26176	; 0x6640
   11118:	movt	r1, #1
   1111c:	str	r3, [sp, #16]
   11120:	bl	10d14 <strcmp@plt>
   11124:	cmp	r0, #0
   11128:	ldr	r3, [sp, #16]
   1112c:	beq	11014 <__assert_fail@plt+0x90>
   11130:	movw	r1, #26180	; 0x6644
   11134:	movt	r1, #1
   11138:	mov	r0, r3
   1113c:	mov	r2, #10
   11140:	add	r3, sp, #48	; 0x30
   11144:	str	r1, [sp]
   11148:	mov	r1, #0
   1114c:	bl	14c88 <__assert_fail@plt+0x3d04>
   11150:	mov	r6, r0
   11154:	bl	10eac <__errno_location@plt>
   11158:	cmp	r6, #0
   1115c:	mov	ip, r0
   11160:	beq	11540 <__assert_fail@plt+0x5bc>
   11164:	cmp	r6, #1
   11168:	beq	11648 <__assert_fail@plt+0x6c4>
   1116c:	ldr	r4, [r0]
   11170:	movw	r1, #26192	; 0x6650
   11174:	movt	r1, #1
   11178:	str	r4, [ip]
   1117c:	mov	r2, #5
   11180:	mov	r0, #0
   11184:	bl	10d8c <dcgettext@plt>
   11188:	mov	r5, r0
   1118c:	ldr	r0, [r7]
   11190:	bl	141e8 <__assert_fail@plt+0x3264>
   11194:	mov	r3, r0
   11198:	mov	r2, r5
   1119c:	mov	r1, r4
   111a0:	mov	r0, #125	; 0x7d
   111a4:	bl	10e04 <error@plt>
   111a8:	cmp	r0, #111	; 0x6f
   111ac:	beq	11094 <__assert_fail@plt+0x110>
   111b0:	mov	r0, #125	; 0x7d
   111b4:	bl	11794 <__assert_fail@plt+0x810>
   111b8:	cmn	r0, #2
   111bc:	bne	111b0 <__assert_fail@plt+0x22c>
   111c0:	mov	r0, r5
   111c4:	bl	11794 <__assert_fail@plt+0x810>
   111c8:	ldrb	r2, [r3]
   111cc:	cmp	r2, #76	; 0x4c
   111d0:	bne	11110 <__assert_fail@plt+0x18c>
   111d4:	movw	r1, #26140	; 0x661c
   111d8:	movt	r1, #1
   111dc:	mov	r2, #5
   111e0:	mov	r0, #0
   111e4:	bl	10d8c <dcgettext@plt>
   111e8:	mov	r1, #0
   111ec:	mov	r2, r0
   111f0:	mov	r0, r1
   111f4:	bl	10e04 <error@plt>
   111f8:	b	111b0 <__assert_fail@plt+0x22c>
   111fc:	movw	r3, #29000	; 0x7148
   11200:	movt	r3, #2
   11204:	ldr	r3, [r3]
   11208:	sub	r9, r9, r3
   1120c:	str	r3, [sp, #16]
   11210:	add	r3, r4, r3, lsl #2
   11214:	cmp	r9, r5
   11218:	movwle	r1, #26232	; 0x6678
   1121c:	movtle	r1, #1
   11220:	str	r3, [sp, #20]
   11224:	ble	111dc <__assert_fail@plt+0x258>
   11228:	movw	sl, #29024	; 0x7160
   1122c:	movt	sl, #2
   11230:	mov	fp, r5
   11234:	mov	r6, r5
   11238:	movw	r7, #26248	; 0x6688
   1123c:	movt	r7, #1
   11240:	movw	r8, #26268	; 0x669c
   11244:	movt	r8, #1
   11248:	movw	r9, #26260	; 0x6694
   1124c:	movt	r9, #1
   11250:	mov	r5, sl
   11254:	ldr	r3, [r5, #8]
   11258:	cmp	r3, #0
   1125c:	beq	112cc <__assert_fail@plt+0x348>
   11260:	ldrb	r3, [r3]
   11264:	ldr	fp, [r5, #4]
   11268:	cmp	r3, #76	; 0x4c
   1126c:	add	r3, fp, #128	; 0x80
   11270:	beq	1149c <__assert_fail@plt+0x518>
   11274:	cmp	r3, #384	; 0x180
   11278:	bcs	11288 <__assert_fail@plt+0x304>
   1127c:	bl	10e4c <__ctype_toupper_loc@plt>
   11280:	ldr	r3, [r0]
   11284:	ldr	fp, [r3, fp, lsl #2]
   11288:	str	fp, [sp]
   1128c:	mov	r0, #0
   11290:	mov	r3, r7
   11294:	ldr	ip, [r5]
   11298:	mov	r2, r8
   1129c:	mov	r1, #1
   112a0:	str	ip, [sp, #8]
   112a4:	str	r0, [sp, #12]
   112a8:	add	r0, sp, #28
   112ac:	bl	10e10 <__asprintf_chk@plt>
   112b0:	cmp	r0, #0
   112b4:	blt	11608 <__assert_fail@plt+0x684>
   112b8:	ldr	r0, [sp, #28]
   112bc:	bl	10f30 <putenv@plt>
   112c0:	cmp	r0, #0
   112c4:	bne	11650 <__assert_fail@plt+0x6cc>
   112c8:	mov	fp, #1
   112cc:	add	r6, r6, #1
   112d0:	add	r5, r5, #12
   112d4:	cmp	r6, #3
   112d8:	bne	11254 <__assert_fail@plt+0x2d0>
   112dc:	cmp	fp, #0
   112e0:	movweq	r1, #26324	; 0x66d4
   112e4:	movteq	r1, #1
   112e8:	beq	111dc <__assert_fail@plt+0x258>
   112ec:	movw	r3, #29072	; 0x7190
   112f0:	movt	r3, #2
   112f4:	ldr	r5, [r3]
   112f8:	mov	r1, #47	; 0x2f
   112fc:	mov	r0, r5
   11300:	bl	10ea0 <strchr@plt>
   11304:	cmp	r0, #0
   11308:	beq	114e4 <__assert_fail@plt+0x560>
   1130c:	mov	r0, r5
   11310:	bl	11c60 <__assert_fail@plt+0xcdc>
   11314:	str	r0, [sl, #36]	; 0x24
   11318:	movw	r0, #26424	; 0x6738
   1131c:	movt	r0, #1
   11320:	bl	10e1c <getenv@plt>
   11324:	ldr	r5, [sl, #36]	; 0x24
   11328:	movw	r3, #26436	; 0x6744
   1132c:	movt	r3, #1
   11330:	mov	r2, #0
   11334:	mov	fp, r0
   11338:	str	r3, [sp, #40]	; 0x28
   1133c:	ldrb	r3, [r5]
   11340:	str	r5, [sp, #36]	; 0x24
   11344:	str	r2, [sp, #44]	; 0x2c
   11348:	cmp	r3, r2
   1134c:	beq	114cc <__assert_fail@plt+0x548>
   11350:	movw	r8, #26468	; 0x6764
   11354:	movt	r8, #1
   11358:	movw	r7, #26484	; 0x6774
   1135c:	movt	r7, #1
   11360:	add	r6, sp, #36	; 0x24
   11364:	mov	r3, r5
   11368:	b	1138c <__assert_fail@plt+0x408>
   1136c:	ldr	r0, [sp, #32]
   11370:	bl	11e98 <__assert_fail@plt+0xf14>
   11374:	ldr	r3, [r6, #4]!
   11378:	cmp	r3, #0
   1137c:	beq	1160c <__assert_fail@plt+0x688>
   11380:	ldrb	r2, [r3]
   11384:	cmp	r2, #0
   11388:	beq	114d0 <__assert_fail@plt+0x54c>
   1138c:	mov	r2, r7
   11390:	mov	r1, #1
   11394:	str	r8, [sp]
   11398:	add	r0, sp, #32
   1139c:	bl	10e10 <__asprintf_chk@plt>
   113a0:	cmp	r0, #0
   113a4:	blt	11608 <__assert_fail@plt+0x684>
   113a8:	add	r2, sp, #48	; 0x30
   113ac:	mov	r0, #3
   113b0:	ldr	r1, [sp, #32]
   113b4:	bl	10f60 <__xstat64@plt>
   113b8:	cmp	r0, #0
   113bc:	add	r9, sp, #48	; 0x30
   113c0:	bne	1136c <__assert_fail@plt+0x3e8>
   113c4:	cmp	fp, #0
   113c8:	movw	r3, #26424	; 0x6738
   113cc:	movt	r3, #1
   113d0:	mov	r0, r9
   113d4:	ldr	r1, [sp, #32]
   113d8:	beq	11528 <__assert_fail@plt+0x5a4>
   113dc:	movw	r2, #26512	; 0x6790
   113e0:	movt	r2, #1
   113e4:	str	fp, [sp]
   113e8:	str	r1, [sp, #4]
   113ec:	mov	r1, #1
   113f0:	bl	10e10 <__asprintf_chk@plt>
   113f4:	cmp	r0, #0
   113f8:	blt	11608 <__assert_fail@plt+0x684>
   113fc:	ldr	r0, [sp, #32]
   11400:	bl	11e98 <__assert_fail@plt+0xf14>
   11404:	ldr	r0, [sp, #48]	; 0x30
   11408:	bl	10f30 <putenv@plt>
   1140c:	mov	r5, r0
   11410:	bl	10eac <__errno_location@plt>
   11414:	cmp	r5, #0
   11418:	mov	r6, r0
   1141c:	bne	11678 <__assert_fail@plt+0x6f4>
   11420:	ldr	r0, [sl, #36]	; 0x24
   11424:	bl	11e98 <__assert_fail@plt+0xf14>
   11428:	ldr	r9, [sp, #16]
   1142c:	ldr	r1, [sp, #20]
   11430:	ldr	r0, [r4, r9, lsl #2]
   11434:	bl	10d50 <execvp@plt>
   11438:	ldr	r6, [r6]
   1143c:	mov	r2, #5
   11440:	mov	r0, r5
   11444:	movw	r1, #26532	; 0x67a4
   11448:	movt	r1, #1
   1144c:	cmp	r6, #2
   11450:	moveq	r7, #127	; 0x7f
   11454:	movne	r7, #126	; 0x7e
   11458:	bl	10d8c <dcgettext@plt>
   1145c:	mov	r8, r0
   11460:	ldr	r0, [r4, r9, lsl #2]
   11464:	bl	141e8 <__assert_fail@plt+0x3264>
   11468:	mov	r3, r0
   1146c:	mov	r2, r8
   11470:	mov	r0, r5
   11474:	mov	r1, r6
   11478:	bl	10e04 <error@plt>
   1147c:	mov	r0, r7
   11480:	add	sp, sp, #156	; 0x9c
   11484:	ldrd	r4, [sp]
   11488:	ldrd	r6, [sp, #8]
   1148c:	ldrd	r8, [sp, #16]
   11490:	ldrd	sl, [sp, #24]
   11494:	add	sp, sp, #32
   11498:	pop	{pc}		; (ldr pc, [sp], #4)
   1149c:	cmp	r3, #384	; 0x180
   114a0:	bcs	114b0 <__assert_fail@plt+0x52c>
   114a4:	bl	10e4c <__ctype_toupper_loc@plt>
   114a8:	ldr	r3, [r0]
   114ac:	ldr	fp, [r3, fp, lsl #2]
   114b0:	mov	r3, r7
   114b4:	mov	r2, r9
   114b8:	str	fp, [sp]
   114bc:	mov	r1, #1
   114c0:	add	r0, sp, #28
   114c4:	bl	10e10 <__asprintf_chk@plt>
   114c8:	b	112b0 <__assert_fail@plt+0x32c>
   114cc:	add	r9, sp, #48	; 0x30
   114d0:	movw	r0, #26468	; 0x6764
   114d4:	movt	r0, #1
   114d8:	bl	14be4 <__assert_fail@plt+0x3c60>
   114dc:	str	r0, [sp, #32]
   114e0:	b	113c4 <__assert_fail@plt+0x440>
   114e4:	movw	r0, #26368	; 0x6700
   114e8:	movt	r0, #1
   114ec:	bl	14c50 <__assert_fail@plt+0x3ccc>
   114f0:	subs	r6, r0, #0
   114f4:	beq	1156c <__assert_fail@plt+0x5e8>
   114f8:	bl	11c60 <__assert_fail@plt+0xcdc>
   114fc:	str	r0, [sl, #36]	; 0x24
   11500:	mov	r0, r6
   11504:	bl	11e98 <__assert_fail@plt+0xf14>
   11508:	ldr	r3, [sl, #36]	; 0x24
   1150c:	cmp	r3, #0
   11510:	bne	11318 <__assert_fail@plt+0x394>
   11514:	movw	r0, #26396	; 0x671c
   11518:	movt	r0, #1
   1151c:	bl	14be4 <__assert_fail@plt+0x3c60>
   11520:	str	r0, [sl, #36]	; 0x24
   11524:	b	11318 <__assert_fail@plt+0x394>
   11528:	movw	r2, #26524	; 0x679c
   1152c:	movt	r2, #1
   11530:	str	r1, [sp]
   11534:	mov	r1, #1
   11538:	bl	10e10 <__asprintf_chk@plt>
   1153c:	b	113f4 <__assert_fail@plt+0x470>
   11540:	ldrd	r0, [sp, #48]	; 0x30
   11544:	mov	r3, #0
   11548:	mvn	r2, #0
   1154c:	cmp	r1, r3
   11550:	cmpeq	r0, r2
   11554:	bhi	11648 <__assert_fail@plt+0x6c4>
   11558:	mov	r3, #12
   1155c:	str	r6, [ip]
   11560:	mul	r3, r3, fp
   11564:	str	r0, [r5, r3]
   11568:	b	1100c <__assert_fail@plt+0x88>
   1156c:	movw	r0, #26384	; 0x6710
   11570:	movt	r0, #1
   11574:	bl	10e1c <getenv@plt>
   11578:	subs	r6, r0, #0
   1157c:	beq	11500 <__assert_fail@plt+0x57c>
   11580:	bl	14be4 <__assert_fail@plt+0x3c60>
   11584:	movw	r1, #26392	; 0x6718
   11588:	movt	r1, #1
   1158c:	mov	r6, r0
   11590:	mov	r7, r1
   11594:	bl	10f18 <strtok@plt>
   11598:	b	115ac <__assert_fail@plt+0x628>
   1159c:	bl	11e98 <__assert_fail@plt+0xf14>
   115a0:	mov	r1, r7
   115a4:	mov	r0, #0
   115a8:	bl	10f18 <strtok@plt>
   115ac:	cmp	r0, #0
   115b0:	beq	11500 <__assert_fail@plt+0x57c>
   115b4:	mov	r2, #0
   115b8:	mov	r1, r5
   115bc:	bl	11d78 <__assert_fail@plt+0xdf4>
   115c0:	mov	r1, #1
   115c4:	mov	r8, r0
   115c8:	bl	10ef4 <access@plt>
   115cc:	cmp	r0, #0
   115d0:	mov	r0, r8
   115d4:	bne	1159c <__assert_fail@plt+0x618>
   115d8:	bl	11c60 <__assert_fail@plt+0xcdc>
   115dc:	str	r0, [sl, #36]	; 0x24
   115e0:	mov	r0, r8
   115e4:	bl	11e98 <__assert_fail@plt+0xf14>
   115e8:	b	11500 <__assert_fail@plt+0x57c>
   115ec:	movw	r1, #26064	; 0x65d0
   115f0:	movt	r1, #1
   115f4:	ldr	r3, [pc, #164]	; 116a0 <__assert_fail@plt+0x71c>
   115f8:	movw	r0, #26080	; 0x65e0
   115fc:	movt	r0, #1
   11600:	mov	r2, #336	; 0x150
   11604:	bl	10f84 <__assert_fail@plt>
   11608:	bl	14c0c <__assert_fail@plt+0x3c88>
   1160c:	mov	r2, #5
   11610:	mov	r0, r3
   11614:	movw	r1, #26492	; 0x677c
   11618:	movt	r1, #1
   1161c:	mov	r5, r3
   11620:	bl	10d8c <dcgettext@plt>
   11624:	mov	r4, r0
   11628:	movw	r0, #26468	; 0x6764
   1162c:	movt	r0, #1
   11630:	bl	141e8 <__assert_fail@plt+0x3264>
   11634:	mov	r3, r0
   11638:	mov	r2, r4
   1163c:	mov	r1, r5
   11640:	mov	r0, #125	; 0x7d
   11644:	bl	10e04 <error@plt>
   11648:	mov	r4, #75	; 0x4b
   1164c:	b	11170 <__assert_fail@plt+0x1ec>
   11650:	bl	10eac <__errno_location@plt>
   11654:	movw	r1, #26280	; 0x66a8
   11658:	movt	r1, #1
   1165c:	ldr	r4, [r0]
   11660:	mov	r2, #5
   11664:	mov	r0, #0
   11668:	bl	10d8c <dcgettext@plt>
   1166c:	mov	r5, r0
   11670:	ldr	r0, [sp, #28]
   11674:	b	11190 <__assert_fail@plt+0x20c>
   11678:	movw	r1, #26280	; 0x66a8
   1167c:	movt	r1, #1
   11680:	ldr	r4, [r6]
   11684:	mov	r2, #5
   11688:	mov	r0, #0
   1168c:	bl	10d8c <dcgettext@plt>
   11690:	mov	r5, r0
   11694:	ldr	r0, [sp, #48]	; 0x30
   11698:	b	11190 <__assert_fail@plt+0x20c>
   1169c:	andeq	r5, r1, r0, ror pc
   116a0:	andeq	r5, r1, r8, ror #30
   116a4:	mov	fp, #0
   116a8:	mov	lr, #0
   116ac:	pop	{r1}		; (ldr r1, [sp], #4)
   116b0:	mov	r2, sp
   116b4:	push	{r2}		; (str r2, [sp, #-4]!)
   116b8:	push	{r0}		; (str r0, [sp, #-4]!)
   116bc:	ldr	ip, [pc, #16]	; 116d4 <__assert_fail@plt+0x750>
   116c0:	push	{ip}		; (str ip, [sp, #-4]!)
   116c4:	ldr	r0, [pc, #12]	; 116d8 <__assert_fail@plt+0x754>
   116c8:	ldr	r3, [pc, #12]	; 116dc <__assert_fail@plt+0x758>
   116cc:	bl	10e34 <__libc_start_main@plt>
   116d0:	bl	10f78 <abort@plt>
   116d4:	ldrdeq	r5, [r1], -ip
   116d8:	muleq	r1, r0, pc	; <UNPREDICTABLE>
   116dc:	andeq	r5, r1, ip, ror lr
   116e0:	ldr	r3, [pc, #20]	; 116fc <__assert_fail@plt+0x778>
   116e4:	ldr	r2, [pc, #20]	; 11700 <__assert_fail@plt+0x77c>
   116e8:	add	r3, pc, r3
   116ec:	ldr	r2, [r3, r2]
   116f0:	cmp	r2, #0
   116f4:	bxeq	lr
   116f8:	b	10e58 <__gmon_start__@plt>
   116fc:	andeq	r5, r1, r0, lsl r9
   11700:	andeq	r0, r0, r8, ror #1
   11704:	ldr	r0, [pc, #24]	; 11724 <__assert_fail@plt+0x7a0>
   11708:	ldr	r3, [pc, #24]	; 11728 <__assert_fail@plt+0x7a4>
   1170c:	cmp	r3, r0
   11710:	bxeq	lr
   11714:	ldr	r3, [pc, #16]	; 1172c <__assert_fail@plt+0x7a8>
   11718:	cmp	r3, #0
   1171c:	bxeq	lr
   11720:	bx	r3
   11724:	andeq	r7, r2, ip, lsr r1
   11728:	andeq	r7, r2, ip, lsr r1
   1172c:	andeq	r0, r0, r0
   11730:	ldr	r0, [pc, #36]	; 1175c <__assert_fail@plt+0x7d8>
   11734:	ldr	r1, [pc, #36]	; 11760 <__assert_fail@plt+0x7dc>
   11738:	sub	r1, r1, r0
   1173c:	asr	r1, r1, #2
   11740:	add	r1, r1, r1, lsr #31
   11744:	asrs	r1, r1, #1
   11748:	bxeq	lr
   1174c:	ldr	r3, [pc, #16]	; 11764 <__assert_fail@plt+0x7e0>
   11750:	cmp	r3, #0
   11754:	bxeq	lr
   11758:	bx	r3
   1175c:	andeq	r7, r2, ip, lsr r1
   11760:	andeq	r7, r2, ip, lsr r1
   11764:	andeq	r0, r0, r0
   11768:	push	{r4, lr}
   1176c:	ldr	r4, [pc, #24]	; 1178c <__assert_fail@plt+0x808>
   11770:	ldrb	r3, [r4]
   11774:	cmp	r3, #0
   11778:	popne	{r4, pc}
   1177c:	bl	11704 <__assert_fail@plt+0x780>
   11780:	mov	r3, #1
   11784:	strb	r3, [r4]
   11788:	pop	{r4, pc}
   1178c:	andeq	r7, r2, ip, asr r1
   11790:	b	11730 <__assert_fail@plt+0x7ac>
   11794:	subs	r6, r0, #0
   11798:	str	r7, [sp, #-8]!
   1179c:	str	lr, [sp, #4]
   117a0:	sub	sp, sp, #56	; 0x38
   117a4:	beq	117ec <__assert_fail@plt+0x868>
   117a8:	movw	r3, #29008	; 0x7150
   117ac:	movt	r3, #2
   117b0:	ldr	r4, [r3]
   117b4:	mov	r2, #5
   117b8:	movw	r1, #24536	; 0x5fd8
   117bc:	movt	r1, #1
   117c0:	mov	r0, #0
   117c4:	bl	10d8c <dcgettext@plt>
   117c8:	movw	r3, #29072	; 0x7190
   117cc:	movt	r3, #2
   117d0:	mov	r2, r0
   117d4:	mov	r1, #1
   117d8:	ldr	r3, [r3]
   117dc:	mov	r0, r4
   117e0:	bl	10ee8 <__fprintf_chk@plt>
   117e4:	mov	r0, r6
   117e8:	bl	10e88 <exit@plt>
   117ec:	mov	r2, #5
   117f0:	movw	r1, #24576	; 0x6000
   117f4:	movt	r1, #1
   117f8:	movw	r7, #29012	; 0x7154
   117fc:	movt	r7, #2
   11800:	bl	10d8c <dcgettext@plt>
   11804:	movw	r3, #29072	; 0x7190
   11808:	movt	r3, #2
   1180c:	mov	r1, r0
   11810:	mov	r0, #1
   11814:	ldr	r2, [r3]
   11818:	bl	10ed0 <__printf_chk@plt>
   1181c:	mov	r2, #5
   11820:	movw	r1, #24608	; 0x6020
   11824:	movt	r1, #1
   11828:	mov	r0, r6
   1182c:	bl	10d8c <dcgettext@plt>
   11830:	ldr	r1, [r7]
   11834:	bl	10d08 <fputs_unlocked@plt>
   11838:	mov	r2, #5
   1183c:	movw	r1, #24684	; 0x606c
   11840:	movt	r1, #1
   11844:	mov	r0, r6
   11848:	bl	10d8c <dcgettext@plt>
   1184c:	ldr	r1, [r7]
   11850:	bl	10d08 <fputs_unlocked@plt>
   11854:	mov	r2, #5
   11858:	movw	r1, #24760	; 0x60b8
   1185c:	movt	r1, #1
   11860:	mov	r0, r6
   11864:	bl	10d8c <dcgettext@plt>
   11868:	ldr	r1, [r7]
   1186c:	bl	10d08 <fputs_unlocked@plt>
   11870:	mov	r2, #5
   11874:	movw	r1, #24944	; 0x6170
   11878:	movt	r1, #1
   1187c:	mov	r0, r6
   11880:	bl	10d8c <dcgettext@plt>
   11884:	ldr	r1, [r7]
   11888:	bl	10d08 <fputs_unlocked@plt>
   1188c:	mov	r2, #5
   11890:	movw	r1, #24992	; 0x61a0
   11894:	movt	r1, #1
   11898:	mov	r0, r6
   1189c:	bl	10d8c <dcgettext@plt>
   118a0:	ldr	r1, [r7]
   118a4:	bl	10d08 <fputs_unlocked@plt>
   118a8:	mov	r2, #5
   118ac:	movw	r1, #25048	; 0x61d8
   118b0:	movt	r1, #1
   118b4:	mov	r0, r6
   118b8:	bl	10d8c <dcgettext@plt>
   118bc:	ldr	r1, [r7]
   118c0:	bl	10d08 <fputs_unlocked@plt>
   118c4:	mov	r2, #5
   118c8:	movw	r1, #25160	; 0x6248
   118cc:	movt	r1, #1
   118d0:	mov	r0, r6
   118d4:	bl	10d8c <dcgettext@plt>
   118d8:	ldr	r1, [r7]
   118dc:	bl	10d08 <fputs_unlocked@plt>
   118e0:	mov	r2, #5
   118e4:	movw	r1, #25224	; 0x6288
   118e8:	movt	r1, #1
   118ec:	mov	r0, r6
   118f0:	bl	10d8c <dcgettext@plt>
   118f4:	ldr	r1, [r7]
   118f8:	bl	10d08 <fputs_unlocked@plt>
   118fc:	mov	r2, #5
   11900:	movw	r1, #25536	; 0x63c0
   11904:	movt	r1, #1
   11908:	mov	r0, r6
   1190c:	bl	10d8c <dcgettext@plt>
   11910:	ldr	r1, [r7]
   11914:	bl	10d08 <fputs_unlocked@plt>
   11918:	movw	lr, #24324	; 0x5f04
   1191c:	movt	lr, #1
   11920:	ldr	ip, [lr]
   11924:	ldr	r4, [lr, #4]
   11928:	ldrd	r8, [lr, #8]
   1192c:	subs	r1, ip, #0
   11930:	str	ip, [sp]
   11934:	ldrd	r2, [lr, #16]
   11938:	str	r4, [sp, #4]
   1193c:	ldrd	r4, [lr, #24]
   11940:	strd	r8, [sp, #8]
   11944:	ldrd	r8, [lr, #32]
   11948:	strd	r2, [sp, #16]
   1194c:	ldrd	r2, [lr, #40]	; 0x28
   11950:	strd	r4, [sp, #24]
   11954:	ldrd	r4, [lr, #48]	; 0x30
   11958:	strd	r8, [sp, #32]
   1195c:	strd	r2, [sp, #40]	; 0x28
   11960:	strd	r4, [sp, #48]	; 0x30
   11964:	movwne	r5, #24528	; 0x5fd0
   11968:	mov	r4, sp
   1196c:	movtne	r5, #1
   11970:	bne	11a68 <__assert_fail@plt+0xae4>
   11974:	ldr	r4, [r4, #4]
   11978:	movw	r1, #25804	; 0x64cc
   1197c:	movt	r1, #1
   11980:	mov	r2, #5
   11984:	cmp	r4, #0
   11988:	beq	11a7c <__assert_fail@plt+0xaf8>
   1198c:	mov	r0, #0
   11990:	bl	10d8c <dcgettext@plt>
   11994:	mov	r1, r0
   11998:	movw	r3, #25828	; 0x64e4
   1199c:	movt	r3, #1
   119a0:	movw	r2, #25868	; 0x650c
   119a4:	movt	r2, #1
   119a8:	mov	r0, #1
   119ac:	bl	10ed0 <__printf_chk@plt>
   119b0:	mov	r1, #0
   119b4:	mov	r0, #5
   119b8:	bl	10f24 <setlocale@plt>
   119bc:	cmp	r0, #0
   119c0:	movweq	r5, #24528	; 0x5fd0
   119c4:	movteq	r5, #1
   119c8:	beq	119ec <__assert_fail@plt+0xa68>
   119cc:	movw	r1, #25884	; 0x651c
   119d0:	movt	r1, #1
   119d4:	mov	r2, #3
   119d8:	movw	r5, #24528	; 0x5fd0
   119dc:	movt	r5, #1
   119e0:	bl	10f6c <strncmp@plt>
   119e4:	cmp	r0, #0
   119e8:	bne	11b34 <__assert_fail@plt+0xbb0>
   119ec:	mov	r2, #5
   119f0:	movw	r1, #25960	; 0x6568
   119f4:	movt	r1, #1
   119f8:	mov	r0, #0
   119fc:	bl	10d8c <dcgettext@plt>
   11a00:	mov	r1, r0
   11a04:	movw	r3, #24528	; 0x5fd0
   11a08:	movt	r3, #1
   11a0c:	movw	r2, #25828	; 0x64e4
   11a10:	movt	r2, #1
   11a14:	mov	r0, #1
   11a18:	bl	10ed0 <__printf_chk@plt>
   11a1c:	mov	r2, #5
   11a20:	movw	r1, #25988	; 0x6584
   11a24:	movt	r1, #1
   11a28:	mov	r0, #0
   11a2c:	bl	10d8c <dcgettext@plt>
   11a30:	movw	r2, #26568	; 0x67c8
   11a34:	movt	r2, #1
   11a38:	cmp	r4, r5
   11a3c:	movw	r3, #25156	; 0x6244
   11a40:	movt	r3, #1
   11a44:	mov	r1, r0
   11a48:	moveq	r3, r2
   11a4c:	mov	r2, r4
   11a50:	mov	r0, #1
   11a54:	bl	10ed0 <__printf_chk@plt>
   11a58:	b	117e4 <__assert_fail@plt+0x860>
   11a5c:	ldr	r1, [r4, #8]!
   11a60:	cmp	r1, #0
   11a64:	beq	11974 <__assert_fail@plt+0x9f0>
   11a68:	mov	r0, r5
   11a6c:	bl	10d14 <strcmp@plt>
   11a70:	cmp	r0, #0
   11a74:	bne	11a5c <__assert_fail@plt+0xad8>
   11a78:	b	11974 <__assert_fail@plt+0x9f0>
   11a7c:	mov	r0, r4
   11a80:	bl	10d8c <dcgettext@plt>
   11a84:	mov	r1, r0
   11a88:	movw	r3, #25828	; 0x64e4
   11a8c:	movt	r3, #1
   11a90:	movw	r2, #25868	; 0x650c
   11a94:	movt	r2, #1
   11a98:	mov	r0, #1
   11a9c:	bl	10ed0 <__printf_chk@plt>
   11aa0:	mov	r1, r4
   11aa4:	mov	r0, #5
   11aa8:	bl	10f24 <setlocale@plt>
   11aac:	cmp	r0, #0
   11ab0:	beq	11acc <__assert_fail@plt+0xb48>
   11ab4:	movw	r1, #25884	; 0x651c
   11ab8:	movt	r1, #1
   11abc:	mov	r2, #3
   11ac0:	bl	10f6c <strncmp@plt>
   11ac4:	cmp	r0, #0
   11ac8:	bne	11b28 <__assert_fail@plt+0xba4>
   11acc:	mov	r2, #5
   11ad0:	movw	r1, #25960	; 0x6568
   11ad4:	movt	r1, #1
   11ad8:	mov	r0, #0
   11adc:	bl	10d8c <dcgettext@plt>
   11ae0:	mov	r1, r0
   11ae4:	movw	r3, #24528	; 0x5fd0
   11ae8:	movt	r3, #1
   11aec:	movw	r2, #25828	; 0x64e4
   11af0:	movt	r2, #1
   11af4:	mov	r0, #1
   11af8:	bl	10ed0 <__printf_chk@plt>
   11afc:	movw	r1, #25988	; 0x6584
   11b00:	movt	r1, #1
   11b04:	mov	r2, #5
   11b08:	mov	r0, #0
   11b0c:	bl	10d8c <dcgettext@plt>
   11b10:	movw	r4, #24528	; 0x5fd0
   11b14:	movt	r4, #1
   11b18:	movw	r3, #26568	; 0x67c8
   11b1c:	movt	r3, #1
   11b20:	mov	r1, r0
   11b24:	b	11a4c <__assert_fail@plt+0xac8>
   11b28:	movw	r5, #24528	; 0x5fd0
   11b2c:	movt	r5, #1
   11b30:	mov	r4, r5
   11b34:	mov	r2, #5
   11b38:	movw	r1, #25888	; 0x6520
   11b3c:	movt	r1, #1
   11b40:	mov	r0, #0
   11b44:	bl	10d8c <dcgettext@plt>
   11b48:	ldr	r1, [r7]
   11b4c:	bl	10d08 <fputs_unlocked@plt>
   11b50:	b	119ec <__assert_fail@plt+0xa68>
   11b54:	movw	r3, #29064	; 0x7188
   11b58:	movt	r3, #2
   11b5c:	str	r0, [r3]
   11b60:	bx	lr
   11b64:	movw	r3, #29064	; 0x7188
   11b68:	movt	r3, #2
   11b6c:	strb	r0, [r3, #4]
   11b70:	bx	lr
   11b74:	movw	r3, #29012	; 0x7154
   11b78:	movt	r3, #2
   11b7c:	strd	r4, [sp, #-16]!
   11b80:	ldr	r0, [r3]
   11b84:	str	r6, [sp, #8]
   11b88:	str	lr, [sp, #12]
   11b8c:	sub	sp, sp, #8
   11b90:	bl	15a00 <__assert_fail@plt+0x4a7c>
   11b94:	cmp	r0, #0
   11b98:	beq	11bc4 <__assert_fail@plt+0xc40>
   11b9c:	movw	r4, #29064	; 0x7188
   11ba0:	movt	r4, #2
   11ba4:	ldrb	r6, [r4, #4]
   11ba8:	bl	10eac <__errno_location@plt>
   11bac:	mov	r5, r0
   11bb0:	cmp	r6, #0
   11bb4:	beq	11bf0 <__assert_fail@plt+0xc6c>
   11bb8:	ldr	r3, [r0]
   11bbc:	cmp	r3, #32
   11bc0:	bne	11bf0 <__assert_fail@plt+0xc6c>
   11bc4:	movw	r3, #29008	; 0x7150
   11bc8:	movt	r3, #2
   11bcc:	ldr	r0, [r3]
   11bd0:	bl	15a00 <__assert_fail@plt+0x4a7c>
   11bd4:	cmp	r0, #0
   11bd8:	bne	11c38 <__assert_fail@plt+0xcb4>
   11bdc:	add	sp, sp, #8
   11be0:	ldrd	r4, [sp]
   11be4:	ldr	r6, [sp, #8]
   11be8:	add	sp, sp, #12
   11bec:	pop	{pc}		; (ldr pc, [sp], #4)
   11bf0:	movw	r1, #26724	; 0x6864
   11bf4:	movt	r1, #1
   11bf8:	mov	r2, #5
   11bfc:	mov	r0, #0
   11c00:	bl	10d8c <dcgettext@plt>
   11c04:	mov	r6, r0
   11c08:	ldr	r0, [r4]
   11c0c:	cmp	r0, #0
   11c10:	beq	11c48 <__assert_fail@plt+0xcc4>
   11c14:	ldr	r4, [r5]
   11c18:	bl	13ffc <__assert_fail@plt+0x3078>
   11c1c:	mov	r3, r0
   11c20:	movw	r2, #26736	; 0x6870
   11c24:	movt	r2, #1
   11c28:	mov	r0, #0
   11c2c:	str	r6, [sp]
   11c30:	mov	r1, r4
   11c34:	bl	10e04 <error@plt>
   11c38:	movw	r3, #28920	; 0x70f8
   11c3c:	movt	r3, #2
   11c40:	ldr	r0, [r3]
   11c44:	bl	10d38 <_exit@plt>
   11c48:	mov	r3, r6
   11c4c:	movw	r2, #26740	; 0x6874
   11c50:	movt	r2, #1
   11c54:	ldr	r1, [r5]
   11c58:	bl	10e04 <error@plt>
   11c5c:	b	11c38 <__assert_fail@plt+0xcb4>
   11c60:	str	r4, [sp, #-8]!
   11c64:	str	lr, [sp, #4]
   11c68:	bl	11d04 <__assert_fail@plt+0xd80>
   11c6c:	cmp	r0, #0
   11c70:	beq	11c80 <__assert_fail@plt+0xcfc>
   11c74:	ldr	r4, [sp]
   11c78:	add	sp, sp, #4
   11c7c:	pop	{pc}		; (ldr pc, [sp], #4)
   11c80:	bl	14c0c <__assert_fail@plt+0x3c88>
   11c84:	strd	r4, [sp, #-16]!
   11c88:	mov	r4, r0
   11c8c:	str	r6, [sp, #8]
   11c90:	str	lr, [sp, #12]
   11c94:	ldrb	ip, [r0]
   11c98:	sub	r5, ip, #47	; 0x2f
   11c9c:	clz	r5, r5
   11ca0:	bl	15794 <__assert_fail@plt+0x4810>
   11ca4:	lsr	r5, r5, #5
   11ca8:	sub	r0, r0, r4
   11cac:	cmp	r0, r5
   11cb0:	bls	11cf4 <__assert_fail@plt+0xd70>
   11cb4:	add	r3, r4, r0
   11cb8:	ldrb	r3, [r3, #-1]
   11cbc:	cmp	r3, #47	; 0x2f
   11cc0:	bne	11cf4 <__assert_fail@plt+0xd70>
   11cc4:	sub	r0, r0, #2
   11cc8:	sub	ip, r4, #1
   11ccc:	add	r3, r4, r0
   11cd0:	add	ip, ip, r5
   11cd4:	rsb	r2, r4, #1
   11cd8:	b	11ce8 <__assert_fail@plt+0xd64>
   11cdc:	ldrb	r1, [r3], #-1
   11ce0:	cmp	r1, #47	; 0x2f
   11ce4:	bne	11cf4 <__assert_fail@plt+0xd70>
   11ce8:	cmp	r3, ip
   11cec:	add	r0, r2, r3
   11cf0:	bne	11cdc <__assert_fail@plt+0xd58>
   11cf4:	ldrd	r4, [sp]
   11cf8:	ldr	r6, [sp, #8]
   11cfc:	add	sp, sp, #12
   11d00:	pop	{pc}		; (ldr pc, [sp], #4)
   11d04:	strd	r4, [sp, #-16]!
   11d08:	str	r6, [sp, #8]
   11d0c:	mov	r6, r0
   11d10:	str	lr, [sp, #12]
   11d14:	bl	11c84 <__assert_fail@plt+0xd00>
   11d18:	add	r3, r0, #1
   11d1c:	mov	r4, r0
   11d20:	cmp	r0, #0
   11d24:	movne	r0, r3
   11d28:	addeq	r0, r3, #1
   11d2c:	bl	156a4 <__assert_fail@plt+0x4720>
   11d30:	subs	r5, r0, #0
   11d34:	beq	11d54 <__assert_fail@plt+0xdd0>
   11d38:	mov	r1, r6
   11d3c:	mov	r2, r4
   11d40:	bl	10d44 <memcpy@plt>
   11d44:	cmp	r4, #0
   11d48:	beq	11d68 <__assert_fail@plt+0xde4>
   11d4c:	mov	r3, #0
   11d50:	strb	r3, [r5, r4]
   11d54:	mov	r0, r5
   11d58:	ldrd	r4, [sp]
   11d5c:	ldr	r6, [sp, #8]
   11d60:	add	sp, sp, #12
   11d64:	pop	{pc}		; (ldr pc, [sp], #4)
   11d68:	mov	r3, #46	; 0x2e
   11d6c:	mov	r4, #1
   11d70:	strb	r3, [r5]
   11d74:	b	11d4c <__assert_fail@plt+0xdc8>
   11d78:	str	r4, [sp, #-8]!
   11d7c:	str	lr, [sp, #4]
   11d80:	bl	11d9c <__assert_fail@plt+0xe18>
   11d84:	cmp	r0, #0
   11d88:	beq	11d98 <__assert_fail@plt+0xe14>
   11d8c:	ldr	r4, [sp]
   11d90:	add	sp, sp, #4
   11d94:	pop	{pc}		; (ldr pc, [sp], #4)
   11d98:	bl	14c0c <__assert_fail@plt+0x3c88>
   11d9c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   11da0:	strd	r6, [sp, #8]
   11da4:	mov	r6, r1
   11da8:	mov	r7, r0
   11dac:	strd	r8, [sp, #16]
   11db0:	mov	r9, r2
   11db4:	strd	sl, [sp, #24]
   11db8:	str	lr, [sp, #32]
   11dbc:	sub	sp, sp, #4
   11dc0:	bl	15794 <__assert_fail@plt+0x4810>
   11dc4:	mov	r4, r0
   11dc8:	bl	157e4 <__assert_fail@plt+0x4860>
   11dcc:	mov	r5, r0
   11dd0:	mov	r0, r6
   11dd4:	bl	10e94 <strlen@plt>
   11dd8:	sub	r4, r4, r7
   11ddc:	cmp	r5, #0
   11de0:	add	r4, r4, r5
   11de4:	mov	r8, r0
   11de8:	beq	11e80 <__assert_fail@plt+0xefc>
   11dec:	add	r3, r7, r4
   11df0:	ldrb	r3, [r3, #-1]
   11df4:	cmp	r3, #47	; 0x2f
   11df8:	beq	11e74 <__assert_fail@plt+0xef0>
   11dfc:	ldrb	r3, [r6]
   11e00:	cmp	r3, #47	; 0x2f
   11e04:	beq	11e74 <__assert_fail@plt+0xef0>
   11e08:	mov	r5, #1
   11e0c:	mov	sl, #47	; 0x2f
   11e10:	add	r0, r8, #1
   11e14:	add	r0, r0, r4
   11e18:	add	r0, r0, r5
   11e1c:	bl	156a4 <__assert_fail@plt+0x4720>
   11e20:	subs	fp, r0, #0
   11e24:	beq	11e54 <__assert_fail@plt+0xed0>
   11e28:	mov	r2, r4
   11e2c:	mov	r1, r7
   11e30:	bl	10e64 <mempcpy@plt>
   11e34:	cmp	r9, #0
   11e38:	mov	r2, r8
   11e3c:	strb	sl, [r0], r5
   11e40:	mov	r1, r6
   11e44:	strne	r0, [r9]
   11e48:	bl	10e64 <mempcpy@plt>
   11e4c:	mov	r3, #0
   11e50:	strb	r3, [r0]
   11e54:	mov	r0, fp
   11e58:	add	sp, sp, #4
   11e5c:	ldrd	r4, [sp]
   11e60:	ldrd	r6, [sp, #8]
   11e64:	ldrd	r8, [sp, #16]
   11e68:	ldrd	sl, [sp, #24]
   11e6c:	add	sp, sp, #32
   11e70:	pop	{pc}		; (ldr pc, [sp], #4)
   11e74:	mov	r5, #0
   11e78:	mov	sl, r5
   11e7c:	b	11e10 <__assert_fail@plt+0xe8c>
   11e80:	ldrb	r3, [r6]
   11e84:	cmp	r3, #47	; 0x2f
   11e88:	moveq	r5, #1
   11e8c:	movne	sl, #0
   11e90:	moveq	sl, #46	; 0x2e
   11e94:	b	11e10 <__assert_fail@plt+0xe8c>
   11e98:	strd	r4, [sp, #-12]!
   11e9c:	mov	r5, r0
   11ea0:	str	lr, [sp, #8]
   11ea4:	sub	sp, sp, #12
   11ea8:	bl	10eac <__errno_location@plt>
   11eac:	mov	r4, r0
   11eb0:	mov	r2, #0
   11eb4:	ldr	r3, [r4]
   11eb8:	mov	r0, r5
   11ebc:	str	r2, [r4]
   11ec0:	str	r3, [sp]
   11ec4:	str	r3, [sp, #4]
   11ec8:	bl	10d2c <free@plt>
   11ecc:	ldr	r3, [r4]
   11ed0:	add	r2, sp, #8
   11ed4:	clz	r3, r3
   11ed8:	lsr	r3, r3, #5
   11edc:	add	r3, r2, r3, lsl #2
   11ee0:	ldr	r3, [r3, #-8]
   11ee4:	str	r3, [r4]
   11ee8:	add	sp, sp, #12
   11eec:	ldrd	r4, [sp]
   11ef0:	add	sp, sp, #8
   11ef4:	pop	{pc}		; (ldr pc, [sp], #4)
   11ef8:	strd	r4, [sp, #-16]!
   11efc:	subs	r4, r0, #0
   11f00:	str	r6, [sp, #8]
   11f04:	str	lr, [sp, #12]
   11f08:	beq	11fa0 <__assert_fail@plt+0x101c>
   11f0c:	mov	r1, #47	; 0x2f
   11f10:	bl	10f3c <strrchr@plt>
   11f14:	subs	r5, r0, #0
   11f18:	beq	11f78 <__assert_fail@plt+0xff4>
   11f1c:	add	r6, r5, #1
   11f20:	sub	r3, r6, r4
   11f24:	cmp	r3, #6
   11f28:	ble	11f78 <__assert_fail@plt+0xff4>
   11f2c:	movw	r1, #26800	; 0x68b0
   11f30:	movt	r1, #1
   11f34:	mov	r2, #7
   11f38:	sub	r0, r5, #6
   11f3c:	bl	10f6c <strncmp@plt>
   11f40:	cmp	r0, #0
   11f44:	bne	11f78 <__assert_fail@plt+0xff4>
   11f48:	movw	r1, #26808	; 0x68b8
   11f4c:	movt	r1, #1
   11f50:	mov	r2, #3
   11f54:	mov	r0, r6
   11f58:	bl	10f6c <strncmp@plt>
   11f5c:	cmp	r0, #0
   11f60:	movne	r4, r6
   11f64:	bne	11f78 <__assert_fail@plt+0xff4>
   11f68:	add	r4, r5, #4
   11f6c:	movw	r3, #28992	; 0x7140
   11f70:	movt	r3, #2
   11f74:	str	r4, [r3]
   11f78:	movw	r2, #29072	; 0x7190
   11f7c:	movt	r2, #2
   11f80:	ldr	r6, [sp, #8]
   11f84:	movw	r3, #28996	; 0x7144
   11f88:	movt	r3, #2
   11f8c:	str	r4, [r2]
   11f90:	str	r4, [r3]
   11f94:	ldrd	r4, [sp]
   11f98:	add	sp, sp, #12
   11f9c:	pop	{pc}		; (ldr pc, [sp], #4)
   11fa0:	movw	r3, #29008	; 0x7150
   11fa4:	movt	r3, #2
   11fa8:	movw	r0, #26744	; 0x6878
   11fac:	movt	r0, #1
   11fb0:	ldr	r3, [r3]
   11fb4:	mov	r2, #55	; 0x37
   11fb8:	mov	r1, #1
   11fbc:	bl	10dc8 <fwrite@plt>
   11fc0:	bl	10f78 <abort@plt>
   11fc4:	strd	r4, [sp, #-16]!
   11fc8:	mov	r4, #0
   11fcc:	mov	r5, #0
   11fd0:	cmp	r1, #10
   11fd4:	str	r6, [sp, #8]
   11fd8:	strd	r4, [r0]
   11fdc:	strd	r4, [r0, #8]
   11fe0:	str	lr, [sp, #12]
   11fe4:	strd	r4, [r0, #16]
   11fe8:	strd	r4, [r0, #24]
   11fec:	strd	r4, [r0, #32]
   11ff0:	strd	r4, [r0, #40]	; 0x28
   11ff4:	beq	1200c <__assert_fail@plt+0x1088>
   11ff8:	ldrd	r4, [sp]
   11ffc:	str	r1, [r0]
   12000:	ldr	r6, [sp, #8]
   12004:	add	sp, sp, #12
   12008:	pop	{pc}		; (ldr pc, [sp], #4)
   1200c:	bl	10f78 <abort@plt>
   12010:	mov	r2, #5
   12014:	strd	r4, [sp, #-16]!
   12018:	mov	r5, r0
   1201c:	str	r6, [sp, #8]
   12020:	mov	r6, r1
   12024:	mov	r1, r0
   12028:	mov	r0, #0
   1202c:	str	lr, [sp, #12]
   12030:	bl	10d8c <dcgettext@plt>
   12034:	cmp	r5, r0
   12038:	mov	r4, r0
   1203c:	beq	12054 <__assert_fail@plt+0x10d0>
   12040:	mov	r0, r4
   12044:	ldrd	r4, [sp]
   12048:	ldr	r6, [sp, #8]
   1204c:	add	sp, sp, #12
   12050:	pop	{pc}		; (ldr pc, [sp], #4)
   12054:	bl	15c6c <__assert_fail@plt+0x4ce8>
   12058:	ldrb	r3, [r0]
   1205c:	bic	r3, r3, #32
   12060:	cmp	r3, #85	; 0x55
   12064:	bne	120cc <__assert_fail@plt+0x1148>
   12068:	ldrb	r3, [r0, #1]
   1206c:	bic	r3, r3, #32
   12070:	cmp	r3, #84	; 0x54
   12074:	bne	1214c <__assert_fail@plt+0x11c8>
   12078:	ldrb	r3, [r0, #2]
   1207c:	bic	r3, r3, #32
   12080:	cmp	r3, #70	; 0x46
   12084:	bne	1214c <__assert_fail@plt+0x11c8>
   12088:	ldrb	r3, [r0, #3]
   1208c:	cmp	r3, #45	; 0x2d
   12090:	bne	1214c <__assert_fail@plt+0x11c8>
   12094:	ldrb	r3, [r0, #4]
   12098:	cmp	r3, #56	; 0x38
   1209c:	bne	1214c <__assert_fail@plt+0x11c8>
   120a0:	ldrb	r3, [r0, #5]
   120a4:	cmp	r3, #0
   120a8:	bne	1214c <__assert_fail@plt+0x11c8>
   120ac:	ldrb	r2, [r4]
   120b0:	movw	r3, #26900	; 0x6914
   120b4:	movt	r3, #1
   120b8:	movw	r4, #26912	; 0x6920
   120bc:	movt	r4, #1
   120c0:	cmp	r2, #96	; 0x60
   120c4:	movne	r4, r3
   120c8:	b	12040 <__assert_fail@plt+0x10bc>
   120cc:	cmp	r3, #71	; 0x47
   120d0:	bne	1214c <__assert_fail@plt+0x11c8>
   120d4:	ldrb	r3, [r0, #1]
   120d8:	bic	r3, r3, #32
   120dc:	cmp	r3, #66	; 0x42
   120e0:	bne	1214c <__assert_fail@plt+0x11c8>
   120e4:	ldrb	r3, [r0, #2]
   120e8:	cmp	r3, #49	; 0x31
   120ec:	bne	1214c <__assert_fail@plt+0x11c8>
   120f0:	ldrb	r3, [r0, #3]
   120f4:	cmp	r3, #56	; 0x38
   120f8:	bne	1214c <__assert_fail@plt+0x11c8>
   120fc:	ldrb	r3, [r0, #4]
   12100:	cmp	r3, #48	; 0x30
   12104:	bne	1214c <__assert_fail@plt+0x11c8>
   12108:	ldrb	r3, [r0, #5]
   1210c:	cmp	r3, #51	; 0x33
   12110:	bne	1214c <__assert_fail@plt+0x11c8>
   12114:	ldrb	r3, [r0, #6]
   12118:	cmp	r3, #48	; 0x30
   1211c:	bne	1214c <__assert_fail@plt+0x11c8>
   12120:	ldrb	r3, [r0, #7]
   12124:	cmp	r3, #0
   12128:	bne	1214c <__assert_fail@plt+0x11c8>
   1212c:	ldrb	r2, [r4]
   12130:	movw	r3, #26904	; 0x6918
   12134:	movt	r3, #1
   12138:	movw	r4, #26908	; 0x691c
   1213c:	movt	r4, #1
   12140:	cmp	r2, #96	; 0x60
   12144:	movne	r4, r3
   12148:	b	12040 <__assert_fail@plt+0x10bc>
   1214c:	movw	r3, #26916	; 0x6924
   12150:	movt	r3, #1
   12154:	cmp	r6, #9
   12158:	movw	r4, #26896	; 0x6910
   1215c:	movt	r4, #1
   12160:	movne	r4, r3
   12164:	b	12040 <__assert_fail@plt+0x10bc>
   12168:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1216c:	strd	r6, [sp, #8]
   12170:	strd	r8, [sp, #16]
   12174:	strd	sl, [sp, #24]
   12178:	mov	fp, r0
   1217c:	mov	sl, r1
   12180:	str	lr, [sp, #32]
   12184:	sub	sp, sp, #116	; 0x74
   12188:	ldr	r8, [sp, #152]	; 0x98
   1218c:	str	r3, [sp, #28]
   12190:	ldr	r3, [sp, #156]	; 0x9c
   12194:	str	r2, [sp, #32]
   12198:	and	r4, r3, #2
   1219c:	ubfx	r3, r3, #1, #1
   121a0:	str	r3, [sp, #44]	; 0x2c
   121a4:	bl	10de0 <__ctype_get_mb_cur_max@plt>
   121a8:	str	r0, [sp, #64]	; 0x40
   121ac:	cmp	r8, #10
   121b0:	ldrls	pc, [pc, r8, lsl #2]
   121b4:	b	13924 <__assert_fail@plt+0x29a0>
   121b8:			; <UNDEFINED> instruction: 0x000125bc
   121bc:	andeq	r2, r1, r8, asr r6
   121c0:	andeq	r2, r1, r4, lsr ip
   121c4:	andeq	r2, r1, r8, ror r6
   121c8:	andeq	r2, r1, r0, lsr #10
   121cc:	andeq	r2, r1, ip, ror #10
   121d0:	andeq	r2, r1, ip, ror #11
   121d4:	andeq	r2, r1, r8, lsr #12
   121d8:	andeq	r2, r1, r4, ror #3
   121dc:	andeq	r2, r1, r4, ror #3
   121e0:	andeq	r2, r1, r4, ror #3
   121e4:	cmp	r8, #10
   121e8:	beq	12214 <__assert_fail@plt+0x1290>
   121ec:	mov	r1, r8
   121f0:	movw	r0, #26920	; 0x6928
   121f4:	movt	r0, #1
   121f8:	bl	12010 <__assert_fail@plt+0x108c>
   121fc:	mov	r1, r8
   12200:	str	r0, [sp, #164]	; 0xa4
   12204:	movw	r0, #26916	; 0x6924
   12208:	movt	r0, #1
   1220c:	bl	12010 <__assert_fail@plt+0x108c>
   12210:	str	r0, [sp, #168]	; 0xa8
   12214:	cmp	r4, #0
   12218:	movne	r4, #0
   1221c:	beq	13600 <__assert_fail@plt+0x267c>
   12220:	mov	r3, #1
   12224:	mov	r5, #0
   12228:	ldr	r0, [sp, #168]	; 0xa8
   1222c:	str	r3, [sp, #36]	; 0x24
   12230:	str	r3, [sp, #40]	; 0x28
   12234:	str	r5, [sp, #68]	; 0x44
   12238:	bl	10e94 <strlen@plt>
   1223c:	ldr	r3, [sp, #168]	; 0xa8
   12240:	str	r5, [sp, #48]	; 0x30
   12244:	str	r0, [sp, #56]	; 0x38
   12248:	str	r3, [sp, #60]	; 0x3c
   1224c:	str	r5, [sp, #72]	; 0x48
   12250:	str	r8, [sp, #152]	; 0x98
   12254:	mov	r8, fp
   12258:	mov	r9, #0
   1225c:	ldr	fp, [sp, #152]	; 0x98
   12260:	ldr	r3, [sp, #28]
   12264:	cmn	r3, #1
   12268:	beq	127c8 <__assert_fail@plt+0x1844>
   1226c:	ldr	r3, [sp, #28]
   12270:	subs	r6, r3, r9
   12274:	movne	r6, #1
   12278:	cmp	r6, #0
   1227c:	beq	127e0 <__assert_fail@plt+0x185c>
   12280:	ldr	r0, [sp, #32]
   12284:	ldr	r7, [sp, #40]	; 0x28
   12288:	add	r3, r0, r9
   1228c:	cmp	fp, #2
   12290:	moveq	r7, #0
   12294:	andne	r7, r7, #1
   12298:	str	r3, [sp, #52]	; 0x34
   1229c:	cmp	r7, #0
   122a0:	beq	12c7c <__assert_fail@plt+0x1cf8>
   122a4:	ldr	r2, [sp, #56]	; 0x38
   122a8:	cmp	r2, #0
   122ac:	beq	12f18 <__assert_fail@plt+0x1f94>
   122b0:	ldr	r1, [sp, #28]
   122b4:	cmp	r2, #1
   122b8:	mov	r3, r2
   122bc:	movls	r3, #0
   122c0:	movhi	r3, #1
   122c4:	add	r5, r9, r2
   122c8:	cmn	r1, #1
   122cc:	movne	r3, #0
   122d0:	cmp	r3, #0
   122d4:	beq	122e0 <__assert_fail@plt+0x135c>
   122d8:	bl	10e94 <strlen@plt>
   122dc:	str	r0, [sp, #28]
   122e0:	ldr	r3, [sp, #28]
   122e4:	cmp	r5, r3
   122e8:	bhi	12f18 <__assert_fail@plt+0x1f94>
   122ec:	ldr	r0, [sp, #52]	; 0x34
   122f0:	ldr	r2, [sp, #56]	; 0x38
   122f4:	ldr	r1, [sp, #60]	; 0x3c
   122f8:	bl	10d74 <memcmp@plt>
   122fc:	cmp	r0, #0
   12300:	bne	12f18 <__assert_fail@plt+0x1f94>
   12304:	ldr	r3, [sp, #44]	; 0x2c
   12308:	cmp	r3, #0
   1230c:	bne	13848 <__assert_fail@plt+0x28c4>
   12310:	ldr	r3, [sp, #52]	; 0x34
   12314:	ldrb	r5, [r3]
   12318:	cmp	r5, #126	; 0x7e
   1231c:	ldrls	pc, [pc, r5, lsl #2]
   12320:	b	12bd8 <__assert_fail@plt+0x1c54>
   12324:	ldrdeq	r2, [r1], -ip
   12328:	ldrdeq	r2, [r1], -r8
   1232c:	ldrdeq	r2, [r1], -r8
   12330:	ldrdeq	r2, [r1], -r8
   12334:	ldrdeq	r2, [r1], -r8
   12338:	ldrdeq	r2, [r1], -r8
   1233c:	ldrdeq	r2, [r1], -r8
   12340:			; <UNDEFINED> instruction: 0x00012ab0
   12344:	andeq	r2, r1, r8, lsr #21
   12348:	strdeq	r2, [r1], -r0
   1234c:	muleq	r1, ip, sl
   12350:	andeq	r2, r1, r8, ror #19
   12354:	andeq	r2, r1, r8, ror sl
   12358:	andeq	r2, r1, r4, asr #21
   1235c:	ldrdeq	r2, [r1], -r8
   12360:	ldrdeq	r2, [r1], -r8
   12364:	ldrdeq	r2, [r1], -r8
   12368:	ldrdeq	r2, [r1], -r8
   1236c:	ldrdeq	r2, [r1], -r8
   12370:	ldrdeq	r2, [r1], -r8
   12374:	ldrdeq	r2, [r1], -r8
   12378:	ldrdeq	r2, [r1], -r8
   1237c:	ldrdeq	r2, [r1], -r8
   12380:	ldrdeq	r2, [r1], -r8
   12384:	ldrdeq	r2, [r1], -r8
   12388:	ldrdeq	r2, [r1], -r8
   1238c:	ldrdeq	r2, [r1], -r8
   12390:	ldrdeq	r2, [r1], -r8
   12394:	ldrdeq	r2, [r1], -r8
   12398:	ldrdeq	r2, [r1], -r8
   1239c:	ldrdeq	r2, [r1], -r8
   123a0:	ldrdeq	r2, [r1], -r8
   123a4:			; <UNDEFINED> instruction: 0x00012bb4
   123a8:			; <UNDEFINED> instruction: 0x00012abc
   123ac:			; <UNDEFINED> instruction: 0x00012abc
   123b0:	muleq	r1, r8, fp
   123b4:			; <UNDEFINED> instruction: 0x00012abc
   123b8:	andeq	r2, r1, ip, asr #23
   123bc:			; <UNDEFINED> instruction: 0x00012abc
   123c0:	andeq	r2, r1, r8, lsl r9
   123c4:			; <UNDEFINED> instruction: 0x00012abc
   123c8:			; <UNDEFINED> instruction: 0x00012abc
   123cc:			; <UNDEFINED> instruction: 0x00012abc
   123d0:	andeq	r2, r1, ip, asr #23
   123d4:	andeq	r2, r1, ip, asr #23
   123d8:	andeq	r2, r1, ip, asr #23
   123dc:	andeq	r2, r1, ip, asr #23
   123e0:	andeq	r2, r1, ip, asr #23
   123e4:	andeq	r2, r1, ip, asr #23
   123e8:	andeq	r2, r1, ip, asr #23
   123ec:	andeq	r2, r1, ip, asr #23
   123f0:	andeq	r2, r1, ip, asr #23
   123f4:	andeq	r2, r1, ip, asr #23
   123f8:	andeq	r2, r1, ip, asr #23
   123fc:	andeq	r2, r1, ip, asr #23
   12400:	andeq	r2, r1, ip, asr #23
   12404:	andeq	r2, r1, ip, asr #23
   12408:	andeq	r2, r1, ip, asr #23
   1240c:	andeq	r2, r1, ip, asr #23
   12410:			; <UNDEFINED> instruction: 0x00012abc
   12414:			; <UNDEFINED> instruction: 0x00012abc
   12418:			; <UNDEFINED> instruction: 0x00012abc
   1241c:			; <UNDEFINED> instruction: 0x00012abc
   12420:	andeq	r2, r1, ip, ror #17
   12424:	ldrdeq	r2, [r1], -r8
   12428:	andeq	r2, r1, ip, asr #23
   1242c:	andeq	r2, r1, ip, asr #23
   12430:	andeq	r2, r1, ip, asr #23
   12434:	andeq	r2, r1, ip, asr #23
   12438:	andeq	r2, r1, ip, asr #23
   1243c:	andeq	r2, r1, ip, asr #23
   12440:	andeq	r2, r1, ip, asr #23
   12444:	andeq	r2, r1, ip, asr #23
   12448:	andeq	r2, r1, ip, asr #23
   1244c:	andeq	r2, r1, ip, asr #23
   12450:	andeq	r2, r1, ip, asr #23
   12454:	andeq	r2, r1, ip, asr #23
   12458:	andeq	r2, r1, ip, asr #23
   1245c:	andeq	r2, r1, ip, asr #23
   12460:	andeq	r2, r1, ip, asr #23
   12464:	andeq	r2, r1, ip, asr #23
   12468:	andeq	r2, r1, ip, asr #23
   1246c:	andeq	r2, r1, ip, asr #23
   12470:	andeq	r2, r1, ip, asr #23
   12474:	andeq	r2, r1, ip, asr #23
   12478:	andeq	r2, r1, ip, asr #23
   1247c:	andeq	r2, r1, ip, asr #23
   12480:	andeq	r2, r1, ip, asr #23
   12484:	andeq	r2, r1, ip, asr #23
   12488:	andeq	r2, r1, ip, asr #23
   1248c:	andeq	r2, r1, ip, asr #23
   12490:			; <UNDEFINED> instruction: 0x00012abc
   12494:	muleq	r1, r4, r8
   12498:	andeq	r2, r1, ip, asr #23
   1249c:			; <UNDEFINED> instruction: 0x00012abc
   124a0:	andeq	r2, r1, ip, asr #23
   124a4:			; <UNDEFINED> instruction: 0x00012abc
   124a8:	andeq	r2, r1, ip, asr #23
   124ac:	andeq	r2, r1, ip, asr #23
   124b0:	andeq	r2, r1, ip, asr #23
   124b4:	andeq	r2, r1, ip, asr #23
   124b8:	andeq	r2, r1, ip, asr #23
   124bc:	andeq	r2, r1, ip, asr #23
   124c0:	andeq	r2, r1, ip, asr #23
   124c4:	andeq	r2, r1, ip, asr #23
   124c8:	andeq	r2, r1, ip, asr #23
   124cc:	andeq	r2, r1, ip, asr #23
   124d0:	andeq	r2, r1, ip, asr #23
   124d4:	andeq	r2, r1, ip, asr #23
   124d8:	andeq	r2, r1, ip, asr #23
   124dc:	andeq	r2, r1, ip, asr #23
   124e0:	andeq	r2, r1, ip, asr #23
   124e4:	andeq	r2, r1, ip, asr #23
   124e8:	andeq	r2, r1, ip, asr #23
   124ec:	andeq	r2, r1, ip, asr #23
   124f0:	andeq	r2, r1, ip, asr #23
   124f4:	andeq	r2, r1, ip, asr #23
   124f8:	andeq	r2, r1, ip, asr #23
   124fc:	andeq	r2, r1, ip, asr #23
   12500:	andeq	r2, r1, ip, asr #23
   12504:	andeq	r2, r1, ip, asr #23
   12508:	andeq	r2, r1, ip, asr #23
   1250c:	andeq	r2, r1, ip, asr #23
   12510:			; <UNDEFINED> instruction: 0x000126b8
   12514:			; <UNDEFINED> instruction: 0x00012abc
   12518:			; <UNDEFINED> instruction: 0x000126b8
   1251c:	muleq	r1, r8, fp
   12520:	cmp	r4, #0
   12524:	moveq	r3, #1
   12528:	streq	r3, [sp, #40]	; 0x28
   1252c:	beq	12c40 <__assert_fail@plt+0x1cbc>
   12530:	mov	r3, #0
   12534:	mov	r2, #1
   12538:	mov	r4, r3
   1253c:	str	r2, [sp, #36]	; 0x24
   12540:	str	r2, [sp, #44]	; 0x2c
   12544:	str	r2, [sp, #56]	; 0x38
   12548:	str	r3, [sp, #68]	; 0x44
   1254c:	movw	r3, #26916	; 0x6924
   12550:	movt	r3, #1
   12554:	str	r4, [sp, #40]	; 0x28
   12558:	mov	r8, #2
   1255c:	str	r4, [sp, #48]	; 0x30
   12560:	str	r3, [sp, #60]	; 0x3c
   12564:	str	r4, [sp, #72]	; 0x48
   12568:	b	12250 <__assert_fail@plt+0x12cc>
   1256c:	cmp	r4, #0
   12570:	bne	137bc <__assert_fail@plt+0x2838>
   12574:	cmp	sl, #0
   12578:	beq	1357c <__assert_fail@plt+0x25f8>
   1257c:	mov	r3, #34	; 0x22
   12580:	mov	r1, r4
   12584:	mov	r2, #1
   12588:	strb	r3, [fp]
   1258c:	movw	r3, #26896	; 0x6910
   12590:	movt	r3, #1
   12594:	mov	r4, r2
   12598:	str	r2, [sp, #36]	; 0x24
   1259c:	str	r2, [sp, #40]	; 0x28
   125a0:	str	r1, [sp, #44]	; 0x2c
   125a4:	str	r1, [sp, #48]	; 0x30
   125a8:	str	r2, [sp, #56]	; 0x38
   125ac:	str	r3, [sp, #60]	; 0x3c
   125b0:	str	r1, [sp, #68]	; 0x44
   125b4:	str	r1, [sp, #72]	; 0x48
   125b8:	b	12250 <__assert_fail@plt+0x12cc>
   125bc:	mov	r3, #0
   125c0:	mov	r4, r8
   125c4:	str	r3, [sp, #40]	; 0x28
   125c8:	str	r3, [sp, #44]	; 0x2c
   125cc:	str	r3, [sp, #48]	; 0x30
   125d0:	str	r8, [sp, #56]	; 0x38
   125d4:	str	r3, [sp, #60]	; 0x3c
   125d8:	str	r3, [sp, #68]	; 0x44
   125dc:	mov	r3, #1
   125e0:	str	r3, [sp, #36]	; 0x24
   125e4:	str	r8, [sp, #72]	; 0x48
   125e8:	b	12250 <__assert_fail@plt+0x12cc>
   125ec:	mov	r3, #1
   125f0:	mov	r2, #0
   125f4:	mov	r4, r2
   125f8:	mov	r8, #5
   125fc:	str	r3, [sp, #36]	; 0x24
   12600:	str	r3, [sp, #40]	; 0x28
   12604:	str	r3, [sp, #44]	; 0x2c
   12608:	str	r2, [sp, #48]	; 0x30
   1260c:	str	r3, [sp, #56]	; 0x38
   12610:	movw	r3, #26896	; 0x6910
   12614:	movt	r3, #1
   12618:	str	r3, [sp, #60]	; 0x3c
   1261c:	str	r2, [sp, #68]	; 0x44
   12620:	str	r2, [sp, #72]	; 0x48
   12624:	b	12250 <__assert_fail@plt+0x12cc>
   12628:	mov	r3, #0
   1262c:	mov	r2, #1
   12630:	mov	r4, r3
   12634:	str	r2, [sp, #36]	; 0x24
   12638:	str	r2, [sp, #40]	; 0x28
   1263c:	str	r3, [sp, #44]	; 0x2c
   12640:	str	r3, [sp, #48]	; 0x30
   12644:	str	r3, [sp, #56]	; 0x38
   12648:	str	r3, [sp, #60]	; 0x3c
   1264c:	str	r3, [sp, #68]	; 0x44
   12650:	str	r3, [sp, #72]	; 0x48
   12654:	b	12250 <__assert_fail@plt+0x12cc>
   12658:	mov	r2, #1
   1265c:	mov	r3, #0
   12660:	mov	r4, r3
   12664:	str	r2, [sp, #36]	; 0x24
   12668:	str	r2, [sp, #44]	; 0x2c
   1266c:	str	r8, [sp, #56]	; 0x38
   12670:	str	r3, [sp, #68]	; 0x44
   12674:	b	1254c <__assert_fail@plt+0x15c8>
   12678:	mov	r3, #1
   1267c:	mov	r2, #0
   12680:	mov	r4, r2
   12684:	mov	r8, #2
   12688:	str	r3, [sp, #36]	; 0x24
   1268c:	str	r3, [sp, #40]	; 0x28
   12690:	str	r3, [sp, #44]	; 0x2c
   12694:	str	r2, [sp, #48]	; 0x30
   12698:	str	r3, [sp, #56]	; 0x38
   1269c:	movw	r3, #26916	; 0x6924
   126a0:	movt	r3, #1
   126a4:	str	r3, [sp, #60]	; 0x3c
   126a8:	str	r2, [sp, #68]	; 0x44
   126ac:	str	r2, [sp, #72]	; 0x48
   126b0:	b	12250 <__assert_fail@plt+0x12cc>
   126b4:	mov	r7, #0
   126b8:	ldr	r3, [sp, #28]
   126bc:	cmn	r3, #1
   126c0:	beq	13198 <__assert_fail@plt+0x2214>
   126c4:	ldr	r3, [sp, #28]
   126c8:	subs	r2, r3, #1
   126cc:	movne	r2, #1
   126d0:	sub	r3, fp, #2
   126d4:	cmp	r2, #0
   126d8:	clz	r3, r3
   126dc:	lsr	r3, r3, #5
   126e0:	bne	126ec <__assert_fail@plt+0x1768>
   126e4:	cmp	r9, #0
   126e8:	beq	12ef8 <__assert_fail@plt+0x1f74>
   126ec:	mov	r6, #0
   126f0:	ldr	r2, [sp, #40]	; 0x28
   126f4:	eor	r2, r2, #1
   126f8:	orrs	r3, r3, r2
   126fc:	bne	128d4 <__assert_fail@plt+0x1950>
   12700:	ldr	r2, [sp, #160]	; 0xa0
   12704:	cmp	r2, #0
   12708:	beq	12728 <__assert_fail@plt+0x17a4>
   1270c:	ldr	r0, [sp, #160]	; 0xa0
   12710:	ubfx	r1, r5, #5, #8
   12714:	and	r2, r5, #31
   12718:	ldr	r1, [r0, r1, lsl #2]
   1271c:	lsr	r2, r1, r2
   12720:	tst	r2, #1
   12724:	bne	12730 <__assert_fail@plt+0x17ac>
   12728:	cmp	r7, #0
   1272c:	beq	129a0 <__assert_fail@plt+0x1a1c>
   12730:	ldr	r2, [sp, #44]	; 0x2c
   12734:	sub	r3, fp, #2
   12738:	clz	r3, r3
   1273c:	lsr	r3, r3, #5
   12740:	cmp	r2, #0
   12744:	bne	134ec <__assert_fail@plt+0x2568>
   12748:	ldr	r2, [sp, #48]	; 0x30
   1274c:	eor	r2, r2, #1
   12750:	ands	r3, r3, r2
   12754:	beq	1278c <__assert_fail@plt+0x1808>
   12758:	cmp	sl, r4
   1275c:	str	r3, [sp, #48]	; 0x30
   12760:	movhi	r2, #39	; 0x27
   12764:	strbhi	r2, [r8, r4]
   12768:	add	r2, r4, #1
   1276c:	cmp	sl, r2
   12770:	movhi	r1, #36	; 0x24
   12774:	strbhi	r1, [r8, r2]
   12778:	add	r2, r4, #2
   1277c:	add	r4, r4, #3
   12780:	cmp	sl, r2
   12784:	movhi	r1, #39	; 0x27
   12788:	strbhi	r1, [r8, r2]
   1278c:	cmp	r4, sl
   12790:	add	r9, r9, #1
   12794:	movcc	r3, #92	; 0x5c
   12798:	strbcc	r3, [r8, r4]
   1279c:	add	r4, r4, #1
   127a0:	cmp	r4, sl
   127a4:	ldr	r3, [sp, #36]	; 0x24
   127a8:	strbcc	r5, [r8, r4]
   127ac:	cmp	r6, #0
   127b0:	add	r4, r4, #1
   127b4:	moveq	r3, #0
   127b8:	str	r3, [sp, #36]	; 0x24
   127bc:	ldr	r3, [sp, #28]
   127c0:	cmn	r3, #1
   127c4:	bne	1226c <__assert_fail@plt+0x12e8>
   127c8:	ldr	r3, [sp, #32]
   127cc:	ldrb	r6, [r3, r9]
   127d0:	adds	r6, r6, #0
   127d4:	movne	r6, #1
   127d8:	cmp	r6, #0
   127dc:	bne	12280 <__assert_fail@plt+0x12fc>
   127e0:	str	fp, [sp, #152]	; 0x98
   127e4:	mov	fp, r8
   127e8:	cmp	r4, #0
   127ec:	ldr	r1, [sp, #44]	; 0x2c
   127f0:	movne	r3, #0
   127f4:	ldr	r8, [sp, #152]	; 0x98
   127f8:	sub	r2, r8, #2
   127fc:	clz	r2, r2
   12800:	lsr	r2, r2, #5
   12804:	andeq	r3, r2, r1
   12808:	cmp	r3, #0
   1280c:	bne	138c8 <__assert_fail@plt+0x2944>
   12810:	eor	r3, r1, #1
   12814:	ands	r2, r2, r3
   12818:	beq	137f4 <__assert_fail@plt+0x2870>
   1281c:	ldr	r3, [sp, #68]	; 0x44
   12820:	cmp	r3, #0
   12824:	beq	137f8 <__assert_fail@plt+0x2874>
   12828:	ldr	r3, [sp, #36]	; 0x24
   1282c:	cmp	r3, #0
   12830:	bne	13884 <__assert_fail@plt+0x2900>
   12834:	ldr	r3, [sp, #72]	; 0x48
   12838:	adds	r3, r3, #0
   1283c:	movne	r3, #1
   12840:	cmp	sl, #0
   12844:	movne	r3, #0
   12848:	cmp	r3, #0
   1284c:	ldreq	r2, [sp, #68]	; 0x44
   12850:	beq	137f8 <__assert_fail@plt+0x2874>
   12854:	ldr	r2, [sp, #72]	; 0x48
   12858:	str	r3, [sp, #68]	; 0x44
   1285c:	movw	r3, #26916	; 0x6924
   12860:	movt	r3, #1
   12864:	mov	r1, #39	; 0x27
   12868:	mov	r4, #1
   1286c:	ldr	sl, [sp, #72]	; 0x48
   12870:	mov	r8, #2
   12874:	str	r3, [sp, #60]	; 0x3c
   12878:	mov	r3, #0
   1287c:	strb	r1, [fp]
   12880:	str	r3, [sp, #44]	; 0x2c
   12884:	str	r4, [sp, #56]	; 0x38
   12888:	str	r2, [sp, #72]	; 0x48
   1288c:	b	12250 <__assert_fail@plt+0x12cc>
   12890:	mov	r7, #0
   12894:	cmp	fp, #2
   12898:	beq	13178 <__assert_fail@plt+0x21f4>
   1289c:	ldr	r2, [sp, #40]	; 0x28
   128a0:	ldr	r3, [sp, #56]	; 0x38
   128a4:	ldr	r1, [sp, #44]	; 0x2c
   128a8:	cmp	r3, #0
   128ac:	moveq	r3, #0
   128b0:	andne	r3, r2, r1
   128b4:	cmp	r3, #0
   128b8:	moveq	r5, #92	; 0x5c
   128bc:	moveq	r3, r5
   128c0:	bne	13184 <__assert_fail@plt+0x2200>
   128c4:	ldr	r2, [sp, #40]	; 0x28
   128c8:	cmp	r2, #0
   128cc:	bne	135c0 <__assert_fail@plt+0x263c>
   128d0:	mov	r6, #0
   128d4:	ldr	r3, [sp, #44]	; 0x2c
   128d8:	cmp	r3, #0
   128dc:	beq	13170 <__assert_fail@plt+0x21ec>
   128e0:	mov	r3, #0
   128e4:	b	12700 <__assert_fail@plt+0x177c>
   128e8:	mov	r7, #0
   128ec:	cmp	fp, #2
   128f0:	beq	131e8 <__assert_fail@plt+0x2264>
   128f4:	cmp	fp, #5
   128f8:	beq	131ac <__assert_fail@plt+0x2228>
   128fc:	sub	r3, fp, #2
   12900:	mov	r6, #0
   12904:	clz	r3, r3
   12908:	mov	r5, #63	; 0x3f
   1290c:	lsr	r3, r3, #5
   12910:	b	126f0 <__assert_fail@plt+0x176c>
   12914:	mov	r7, #0
   12918:	cmp	fp, #2
   1291c:	movne	r3, #0
   12920:	movne	r5, #39	; 0x27
   12924:	strne	r6, [sp, #68]	; 0x44
   12928:	bne	126f0 <__assert_fail@plt+0x176c>
   1292c:	ldr	r3, [sp, #44]	; 0x2c
   12930:	cmp	r3, #0
   12934:	bne	135f0 <__assert_fail@plt+0x266c>
   12938:	ldr	r3, [sp, #72]	; 0x48
   1293c:	cmp	sl, #0
   12940:	clz	r3, r3
   12944:	lsr	r3, r3, #5
   12948:	moveq	r3, #0
   1294c:	cmp	r3, #0
   12950:	bne	1351c <__assert_fail@plt+0x2598>
   12954:	cmp	sl, r4
   12958:	movhi	r3, #39	; 0x27
   1295c:	strbhi	r3, [r8, r4]
   12960:	add	r3, r4, #1
   12964:	cmp	sl, r3
   12968:	movhi	r2, #92	; 0x5c
   1296c:	strbhi	r2, [r8, r3]
   12970:	add	r3, r4, #2
   12974:	cmp	sl, r3
   12978:	bls	12984 <__assert_fail@plt+0x1a00>
   1297c:	mov	r2, #39	; 0x27
   12980:	strb	r2, [r8, r3]
   12984:	mov	r3, #0
   12988:	cmp	r7, #0
   1298c:	add	r4, r4, #3
   12990:	mov	r5, #39	; 0x27
   12994:	str	r3, [sp, #48]	; 0x30
   12998:	str	r6, [sp, #68]	; 0x44
   1299c:	bne	12730 <__assert_fail@plt+0x17ac>
   129a0:	ldr	r2, [sp, #48]	; 0x30
   129a4:	eor	r3, r3, #1
   129a8:	add	r9, r9, #1
   129ac:	and	r3, r3, r2
   129b0:	uxtb	r3, r3
   129b4:	cmp	r3, #0
   129b8:	beq	127a0 <__assert_fail@plt+0x181c>
   129bc:	cmp	sl, r4
   129c0:	movhi	r3, #39	; 0x27
   129c4:	strbhi	r3, [r8, r4]
   129c8:	add	r3, r4, #1
   129cc:	add	r4, r4, #2
   129d0:	cmp	sl, r3
   129d4:	movhi	r2, #39	; 0x27
   129d8:	strbhi	r2, [r8, r3]
   129dc:	mov	r3, #0
   129e0:	str	r3, [sp, #48]	; 0x30
   129e4:	b	127a0 <__assert_fail@plt+0x181c>
   129e8:	mov	r3, #118	; 0x76
   129ec:	b	128c4 <__assert_fail@plt+0x1940>
   129f0:	mov	r3, #116	; 0x74
   129f4:	ldr	r2, [sp, #44]	; 0x2c
   129f8:	cmp	fp, #2
   129fc:	movne	r2, #0
   12a00:	andeq	r2, r2, #1
   12a04:	cmp	r2, #0
   12a08:	beq	128c4 <__assert_fail@plt+0x1940>
   12a0c:	mov	fp, r8
   12a10:	mov	r8, #2
   12a14:	ldr	r3, [sp, #40]	; 0x28
   12a18:	cmp	r3, #0
   12a1c:	movne	r8, #4
   12a20:	mov	lr, #0
   12a24:	mov	r0, fp
   12a28:	ldr	r2, [sp, #32]
   12a2c:	ldr	r3, [sp, #156]	; 0x9c
   12a30:	ldr	r1, [sp, #164]	; 0xa4
   12a34:	bic	ip, r3, #2
   12a38:	ldr	r3, [sp, #28]
   12a3c:	stm	sp, {r8, ip, lr}
   12a40:	ldr	ip, [sp, #168]	; 0xa8
   12a44:	str	r1, [sp, #12]
   12a48:	mov	r1, sl
   12a4c:	str	ip, [sp, #16]
   12a50:	bl	12168 <__assert_fail@plt+0x11e4>
   12a54:	mov	r4, r0
   12a58:	mov	r0, r4
   12a5c:	add	sp, sp, #116	; 0x74
   12a60:	ldrd	r4, [sp]
   12a64:	ldrd	r6, [sp, #8]
   12a68:	ldrd	r8, [sp, #16]
   12a6c:	ldrd	sl, [sp, #24]
   12a70:	add	sp, sp, #32
   12a74:	pop	{pc}		; (ldr pc, [sp], #4)
   12a78:	mov	r5, #102	; 0x66
   12a7c:	ldr	r2, [sp, #44]	; 0x2c
   12a80:	sub	r3, fp, #2
   12a84:	clz	r3, r3
   12a88:	lsr	r3, r3, #5
   12a8c:	cmp	r2, #0
   12a90:	bne	134ec <__assert_fail@plt+0x2568>
   12a94:	mov	r6, r2
   12a98:	b	1278c <__assert_fail@plt+0x1808>
   12a9c:	mov	r5, #110	; 0x6e
   12aa0:	mov	r6, #0
   12aa4:	b	12730 <__assert_fail@plt+0x17ac>
   12aa8:	mov	r5, #98	; 0x62
   12aac:	b	12a7c <__assert_fail@plt+0x1af8>
   12ab0:	mov	r5, #97	; 0x61
   12ab4:	b	12a7c <__assert_fail@plt+0x1af8>
   12ab8:	mov	r7, #0
   12abc:	mov	r6, #0
   12ac0:	b	128e0 <__assert_fail@plt+0x195c>
   12ac4:	mov	r5, #114	; 0x72
   12ac8:	b	12aa0 <__assert_fail@plt+0x1b1c>
   12acc:	ldr	r3, [sp, #44]	; 0x2c
   12ad0:	cmp	r3, #0
   12ad4:	bne	13864 <__assert_fail@plt+0x28e0>
   12ad8:	mov	r7, r3
   12adc:	ldr	r3, [sp, #48]	; 0x30
   12ae0:	sub	r2, fp, #2
   12ae4:	clz	r2, r2
   12ae8:	lsr	r2, r2, #5
   12aec:	eor	r3, r3, #1
   12af0:	ands	r3, r2, r3
   12af4:	beq	13508 <__assert_fail@plt+0x2584>
   12af8:	cmp	sl, r4
   12afc:	movhi	r1, #39	; 0x27
   12b00:	strbhi	r1, [r8, r4]
   12b04:	add	r1, r4, #1
   12b08:	cmp	sl, r1
   12b0c:	movhi	r0, #36	; 0x24
   12b10:	strbhi	r0, [r8, r1]
   12b14:	add	r1, r4, #2
   12b18:	cmp	sl, r1
   12b1c:	movhi	r0, #39	; 0x27
   12b20:	strbhi	r0, [r8, r1]
   12b24:	add	r1, r4, #3
   12b28:	cmp	sl, r1
   12b2c:	bls	13560 <__assert_fail@plt+0x25dc>
   12b30:	mov	r4, r1
   12b34:	mov	r1, #92	; 0x5c
   12b38:	mov	r0, r4
   12b3c:	str	r3, [sp, #48]	; 0x30
   12b40:	strb	r1, [r8, r4]
   12b44:	cmp	fp, #2
   12b48:	add	r4, r4, #1
   12b4c:	beq	135b0 <__assert_fail@plt+0x262c>
   12b50:	ldr	r1, [sp, #28]
   12b54:	add	r3, r9, #1
   12b58:	cmp	r3, r1
   12b5c:	bcs	12b74 <__assert_fail@plt+0x1bf0>
   12b60:	ldr	r1, [sp, #32]
   12b64:	ldrb	r3, [r1, r3]
   12b68:	sub	r3, r3, #48	; 0x30
   12b6c:	cmp	r3, #9
   12b70:	bls	135c8 <__assert_fail@plt+0x2644>
   12b74:	mov	r5, #48	; 0x30
   12b78:	ldr	r3, [sp, #40]	; 0x28
   12b7c:	eor	r3, r3, #1
   12b80:	orrs	r2, r2, r3
   12b84:	mov	r3, r6
   12b88:	moveq	r6, r2
   12b8c:	beq	12700 <__assert_fail@plt+0x177c>
   12b90:	mov	r6, #0
   12b94:	b	12728 <__assert_fail@plt+0x17a4>
   12b98:	cmp	r9, #0
   12b9c:	mov	r2, r7
   12ba0:	bne	13140 <__assert_fail@plt+0x21bc>
   12ba4:	mov	r6, r7
   12ba8:	mov	r3, r9
   12bac:	mov	r7, r2
   12bb0:	b	126f0 <__assert_fail@plt+0x176c>
   12bb4:	mov	r2, r7
   12bb8:	mov	r6, r7
   12bbc:	mov	r3, #0
   12bc0:	mov	r7, r2
   12bc4:	mov	r5, #32
   12bc8:	b	126f0 <__assert_fail@plt+0x176c>
   12bcc:	mov	r6, r7
   12bd0:	b	128e0 <__assert_fail@plt+0x195c>
   12bd4:	mov	r7, #0
   12bd8:	ldr	r3, [sp, #64]	; 0x40
   12bdc:	cmp	r3, #1
   12be0:	bne	13200 <__assert_fail@plt+0x227c>
   12be4:	bl	10e7c <__ctype_b_loc@plt>
   12be8:	ldr	r2, [r0]
   12bec:	sxth	r3, r5
   12bf0:	lsl	r3, r3, #1
   12bf4:	ldr	r1, [sp, #64]	; 0x40
   12bf8:	ldrh	r3, [r2, r3]
   12bfc:	mov	ip, r1
   12c00:	and	r3, r3, #16384	; 0x4000
   12c04:	cmp	r3, #0
   12c08:	ldr	r3, [sp, #40]	; 0x28
   12c0c:	movne	r6, #1
   12c10:	moveq	r6, #0
   12c14:	movne	r2, #0
   12c18:	andeq	r2, r3, #1
   12c1c:	cmp	r2, #0
   12c20:	bne	13548 <__assert_fail@plt+0x25c4>
   12c24:	sub	r3, fp, #2
   12c28:	clz	r3, r3
   12c2c:	lsr	r3, r3, #5
   12c30:	b	126f0 <__assert_fail@plt+0x176c>
   12c34:	cmp	r4, #0
   12c38:	bne	138d8 <__assert_fail@plt+0x2954>
   12c3c:	str	r4, [sp, #40]	; 0x28
   12c40:	cmp	sl, #0
   12c44:	bne	13908 <__assert_fail@plt+0x2984>
   12c48:	mov	r3, #1
   12c4c:	movw	r2, #26916	; 0x6924
   12c50:	movt	r2, #1
   12c54:	mov	r4, r3
   12c58:	mov	r8, #2
   12c5c:	str	r3, [sp, #36]	; 0x24
   12c60:	str	sl, [sp, #44]	; 0x2c
   12c64:	str	sl, [sp, #48]	; 0x30
   12c68:	str	r3, [sp, #56]	; 0x38
   12c6c:	str	r2, [sp, #60]	; 0x3c
   12c70:	str	sl, [sp, #68]	; 0x44
   12c74:	str	sl, [sp, #72]	; 0x48
   12c78:	b	12250 <__assert_fail@plt+0x12cc>
   12c7c:	ldr	r3, [sp, #32]
   12c80:	ldrb	r5, [r3, r9]
   12c84:	cmp	r5, #126	; 0x7e
   12c88:	ldrls	pc, [pc, r5, lsl #2]
   12c8c:	b	12bd8 <__assert_fail@plt+0x1c54>
   12c90:			; <UNDEFINED> instruction: 0x00012eb4
   12c94:	ldrdeq	r2, [r1], -r8
   12c98:	ldrdeq	r2, [r1], -r8
   12c9c:	ldrdeq	r2, [r1], -r8
   12ca0:	ldrdeq	r2, [r1], -r8
   12ca4:	ldrdeq	r2, [r1], -r8
   12ca8:	ldrdeq	r2, [r1], -r8
   12cac:	andeq	r2, r1, ip, lsr #29
   12cb0:	andeq	r2, r1, r4, lsr #29
   12cb4:	strdeq	r2, [r1], -r0
   12cb8:	muleq	r1, ip, lr
   12cbc:	andeq	r2, r1, r8, ror #19
   12cc0:	muleq	r1, r4, lr
   12cc4:	andeq	r2, r1, ip, lsl #29
   12cc8:	ldrdeq	r2, [r1], -r8
   12ccc:	ldrdeq	r2, [r1], -r8
   12cd0:	ldrdeq	r2, [r1], -r8
   12cd4:	ldrdeq	r2, [r1], -r8
   12cd8:	ldrdeq	r2, [r1], -r8
   12cdc:	ldrdeq	r2, [r1], -r8
   12ce0:	ldrdeq	r2, [r1], -r8
   12ce4:	ldrdeq	r2, [r1], -r8
   12ce8:	ldrdeq	r2, [r1], -r8
   12cec:	ldrdeq	r2, [r1], -r8
   12cf0:	ldrdeq	r2, [r1], -r8
   12cf4:	ldrdeq	r2, [r1], -r8
   12cf8:	ldrdeq	r2, [r1], -r8
   12cfc:	ldrdeq	r2, [r1], -r8
   12d00:	ldrdeq	r2, [r1], -r8
   12d04:	ldrdeq	r2, [r1], -r8
   12d08:	ldrdeq	r2, [r1], -r8
   12d0c:	ldrdeq	r2, [r1], -r8
   12d10:	andeq	r2, r1, r8, lsl #30
   12d14:	andeq	r2, r1, r8, ror #29
   12d18:	andeq	r2, r1, r8, ror #29
   12d1c:	ldrdeq	r2, [r1], -r8
   12d20:	andeq	r2, r1, r8, ror #29
   12d24:	andeq	r2, r1, r4, lsr #24
   12d28:	andeq	r2, r1, r8, ror #29
   12d2c:	andeq	r2, r1, r8, lsl r9
   12d30:	andeq	r2, r1, r8, ror #29
   12d34:	andeq	r2, r1, r8, ror #29
   12d38:	andeq	r2, r1, r8, ror #29
   12d3c:	andeq	r2, r1, r4, lsr #24
   12d40:	andeq	r2, r1, r4, lsr #24
   12d44:	andeq	r2, r1, r4, lsr #24
   12d48:	andeq	r2, r1, r4, lsr #24
   12d4c:	andeq	r2, r1, r4, lsr #24
   12d50:	andeq	r2, r1, r4, lsr #24
   12d54:	andeq	r2, r1, r4, lsr #24
   12d58:	andeq	r2, r1, r4, lsr #24
   12d5c:	andeq	r2, r1, r4, lsr #24
   12d60:	andeq	r2, r1, r4, lsr #24
   12d64:	andeq	r2, r1, r4, lsr #24
   12d68:	andeq	r2, r1, r4, lsr #24
   12d6c:	andeq	r2, r1, r4, lsr #24
   12d70:	andeq	r2, r1, r4, lsr #24
   12d74:	andeq	r2, r1, r4, lsr #24
   12d78:	andeq	r2, r1, r4, lsr #24
   12d7c:	andeq	r2, r1, r8, ror #29
   12d80:	andeq	r2, r1, r8, ror #29
   12d84:	andeq	r2, r1, r8, ror #29
   12d88:	andeq	r2, r1, r8, ror #29
   12d8c:	andeq	r2, r1, ip, ror #17
   12d90:	ldrdeq	r2, [r1], -r8
   12d94:	andeq	r2, r1, r4, lsr #24
   12d98:	andeq	r2, r1, r4, lsr #24
   12d9c:	andeq	r2, r1, r4, lsr #24
   12da0:	andeq	r2, r1, r4, lsr #24
   12da4:	andeq	r2, r1, r4, lsr #24
   12da8:	andeq	r2, r1, r4, lsr #24
   12dac:	andeq	r2, r1, r4, lsr #24
   12db0:	andeq	r2, r1, r4, lsr #24
   12db4:	andeq	r2, r1, r4, lsr #24
   12db8:	andeq	r2, r1, r4, lsr #24
   12dbc:	andeq	r2, r1, r4, lsr #24
   12dc0:	andeq	r2, r1, r4, lsr #24
   12dc4:	andeq	r2, r1, r4, lsr #24
   12dc8:	andeq	r2, r1, r4, lsr #24
   12dcc:	andeq	r2, r1, r4, lsr #24
   12dd0:	andeq	r2, r1, r4, lsr #24
   12dd4:	andeq	r2, r1, r4, lsr #24
   12dd8:	andeq	r2, r1, r4, lsr #24
   12ddc:	andeq	r2, r1, r4, lsr #24
   12de0:	andeq	r2, r1, r4, lsr #24
   12de4:	andeq	r2, r1, r4, lsr #24
   12de8:	andeq	r2, r1, r4, lsr #24
   12dec:	andeq	r2, r1, r4, lsr #24
   12df0:	andeq	r2, r1, r4, lsr #24
   12df4:	andeq	r2, r1, r4, lsr #24
   12df8:	andeq	r2, r1, r4, lsr #24
   12dfc:	andeq	r2, r1, r8, ror #29
   12e00:	muleq	r1, r4, r8
   12e04:	andeq	r2, r1, r4, lsr #24
   12e08:	andeq	r2, r1, r8, ror #29
   12e0c:	andeq	r2, r1, r4, lsr #24
   12e10:	andeq	r2, r1, r8, ror #29
   12e14:	andeq	r2, r1, r4, lsr #24
   12e18:	andeq	r2, r1, r4, lsr #24
   12e1c:	andeq	r2, r1, r4, lsr #24
   12e20:	andeq	r2, r1, r4, lsr #24
   12e24:	andeq	r2, r1, r4, lsr #24
   12e28:	andeq	r2, r1, r4, lsr #24
   12e2c:	andeq	r2, r1, r4, lsr #24
   12e30:	andeq	r2, r1, r4, lsr #24
   12e34:	andeq	r2, r1, r4, lsr #24
   12e38:	andeq	r2, r1, r4, lsr #24
   12e3c:	andeq	r2, r1, r4, lsr #24
   12e40:	andeq	r2, r1, r4, lsr #24
   12e44:	andeq	r2, r1, r4, lsr #24
   12e48:	andeq	r2, r1, r4, lsr #24
   12e4c:	andeq	r2, r1, r4, lsr #24
   12e50:	andeq	r2, r1, r4, lsr #24
   12e54:	andeq	r2, r1, r4, lsr #24
   12e58:	andeq	r2, r1, r4, lsr #24
   12e5c:	andeq	r2, r1, r4, lsr #24
   12e60:	andeq	r2, r1, r4, lsr #24
   12e64:	andeq	r2, r1, r4, lsr #24
   12e68:	andeq	r2, r1, r4, lsr #24
   12e6c:	andeq	r2, r1, r4, lsr #24
   12e70:	andeq	r2, r1, r4, lsr #24
   12e74:	andeq	r2, r1, r4, lsr #24
   12e78:	andeq	r2, r1, r4, lsr #24
   12e7c:			; <UNDEFINED> instruction: 0x000126b8
   12e80:	andeq	r2, r1, r8, ror #29
   12e84:			; <UNDEFINED> instruction: 0x000126b8
   12e88:	ldrdeq	r2, [r1], -r8
   12e8c:	mov	r3, #114	; 0x72
   12e90:	b	129f4 <__assert_fail@plt+0x1a70>
   12e94:	mov	r3, #102	; 0x66
   12e98:	b	128c4 <__assert_fail@plt+0x1940>
   12e9c:	mov	r3, #110	; 0x6e
   12ea0:	b	129f4 <__assert_fail@plt+0x1a70>
   12ea4:	mov	r3, #98	; 0x62
   12ea8:	b	128c4 <__assert_fail@plt+0x1940>
   12eac:	mov	r3, #97	; 0x61
   12eb0:	b	128c4 <__assert_fail@plt+0x1940>
   12eb4:	ldr	r3, [sp, #40]	; 0x28
   12eb8:	cmp	r3, #0
   12ebc:	bne	12acc <__assert_fail@plt+0x1b48>
   12ec0:	ldr	r3, [sp, #156]	; 0x9c
   12ec4:	tst	r3, #1
   12ec8:	addne	r9, r9, #1
   12ecc:	bne	12260 <__assert_fail@plt+0x12dc>
   12ed0:	ldr	r7, [sp, #40]	; 0x28
   12ed4:	b	128d0 <__assert_fail@plt+0x194c>
   12ed8:	sub	r3, fp, #2
   12edc:	clz	r3, r3
   12ee0:	lsr	r3, r3, #5
   12ee4:	b	126e4 <__assert_fail@plt+0x1760>
   12ee8:	sub	r3, fp, #2
   12eec:	mov	r6, #0
   12ef0:	clz	r3, r3
   12ef4:	lsr	r3, r3, #5
   12ef8:	ldr	r2, [sp, #44]	; 0x2c
   12efc:	tst	r2, r3
   12f00:	beq	126f0 <__assert_fail@plt+0x176c>
   12f04:	b	12a0c <__assert_fail@plt+0x1a88>
   12f08:	sub	r3, fp, #2
   12f0c:	clz	r3, r3
   12f10:	lsr	r3, r3, #5
   12f14:	b	12ef8 <__assert_fail@plt+0x1f74>
   12f18:	ldr	r3, [sp, #52]	; 0x34
   12f1c:	ldrb	r5, [r3]
   12f20:	cmp	r5, #126	; 0x7e
   12f24:	ldrls	pc, [pc, r5, lsl #2]
   12f28:	b	12bd4 <__assert_fail@plt+0x1c50>
   12f2c:	andeq	r2, r1, ip, asr #21
   12f30:	ldrdeq	r2, [r1], -r4
   12f34:	ldrdeq	r2, [r1], -r4
   12f38:	ldrdeq	r2, [r1], -r4
   12f3c:	ldrdeq	r2, [r1], -r4
   12f40:	ldrdeq	r2, [r1], -r4
   12f44:	ldrdeq	r2, [r1], -r4
   12f48:			; <UNDEFINED> instruction: 0x00012ab0
   12f4c:	andeq	r2, r1, r8, lsr #21
   12f50:	andeq	r3, r1, r4, ror #2
   12f54:	muleq	r1, ip, sl
   12f58:	andeq	r3, r1, r8, asr r1
   12f5c:	andeq	r2, r1, r8, ror sl
   12f60:	andeq	r2, r1, r4, asr #21
   12f64:	ldrdeq	r2, [r1], -r4
   12f68:	ldrdeq	r2, [r1], -r4
   12f6c:	ldrdeq	r2, [r1], -r4
   12f70:	ldrdeq	r2, [r1], -r4
   12f74:	ldrdeq	r2, [r1], -r4
   12f78:	ldrdeq	r2, [r1], -r4
   12f7c:	ldrdeq	r2, [r1], -r4
   12f80:	ldrdeq	r2, [r1], -r4
   12f84:	ldrdeq	r2, [r1], -r4
   12f88:	ldrdeq	r2, [r1], -r4
   12f8c:	ldrdeq	r2, [r1], -r4
   12f90:	ldrdeq	r2, [r1], -r4
   12f94:	ldrdeq	r2, [r1], -r4
   12f98:	ldrdeq	r2, [r1], -r4
   12f9c:	ldrdeq	r2, [r1], -r4
   12fa0:	ldrdeq	r2, [r1], -r4
   12fa4:	ldrdeq	r2, [r1], -r4
   12fa8:	ldrdeq	r2, [r1], -r4
   12fac:	andeq	r3, r1, r0, asr r1
   12fb0:			; <UNDEFINED> instruction: 0x00012ab8
   12fb4:			; <UNDEFINED> instruction: 0x00012ab8
   12fb8:	andeq	r3, r1, r4, lsr r1
   12fbc:			; <UNDEFINED> instruction: 0x00012ab8
   12fc0:	andeq	r3, r1, r8, lsr #2
   12fc4:			; <UNDEFINED> instruction: 0x00012ab8
   12fc8:	andeq	r2, r1, r4, lsl r9
   12fcc:			; <UNDEFINED> instruction: 0x00012ab8
   12fd0:			; <UNDEFINED> instruction: 0x00012ab8
   12fd4:			; <UNDEFINED> instruction: 0x00012ab8
   12fd8:	andeq	r3, r1, r8, lsr #2
   12fdc:	andeq	r3, r1, r8, lsr #2
   12fe0:	andeq	r3, r1, r8, lsr #2
   12fe4:	andeq	r3, r1, r8, lsr #2
   12fe8:	andeq	r3, r1, r8, lsr #2
   12fec:	andeq	r3, r1, r8, lsr #2
   12ff0:	andeq	r3, r1, r8, lsr #2
   12ff4:	andeq	r3, r1, r8, lsr #2
   12ff8:	andeq	r3, r1, r8, lsr #2
   12ffc:	andeq	r3, r1, r8, lsr #2
   13000:	andeq	r3, r1, r8, lsr #2
   13004:	andeq	r3, r1, r8, lsr #2
   13008:	andeq	r3, r1, r8, lsr #2
   1300c:	andeq	r3, r1, r8, lsr #2
   13010:	andeq	r3, r1, r8, lsr #2
   13014:	andeq	r3, r1, r8, lsr #2
   13018:			; <UNDEFINED> instruction: 0x00012ab8
   1301c:			; <UNDEFINED> instruction: 0x00012ab8
   13020:			; <UNDEFINED> instruction: 0x00012ab8
   13024:			; <UNDEFINED> instruction: 0x00012ab8
   13028:	andeq	r2, r1, r8, ror #17
   1302c:	ldrdeq	r2, [r1], -r4
   13030:	andeq	r3, r1, r8, lsr #2
   13034:	andeq	r3, r1, r8, lsr #2
   13038:	andeq	r3, r1, r8, lsr #2
   1303c:	andeq	r3, r1, r8, lsr #2
   13040:	andeq	r3, r1, r8, lsr #2
   13044:	andeq	r3, r1, r8, lsr #2
   13048:	andeq	r3, r1, r8, lsr #2
   1304c:	andeq	r3, r1, r8, lsr #2
   13050:	andeq	r3, r1, r8, lsr #2
   13054:	andeq	r3, r1, r8, lsr #2
   13058:	andeq	r3, r1, r8, lsr #2
   1305c:	andeq	r3, r1, r8, lsr #2
   13060:	andeq	r3, r1, r8, lsr #2
   13064:	andeq	r3, r1, r8, lsr #2
   13068:	andeq	r3, r1, r8, lsr #2
   1306c:	andeq	r3, r1, r8, lsr #2
   13070:	andeq	r3, r1, r8, lsr #2
   13074:	andeq	r3, r1, r8, lsr #2
   13078:	andeq	r3, r1, r8, lsr #2
   1307c:	andeq	r3, r1, r8, lsr #2
   13080:	andeq	r3, r1, r8, lsr #2
   13084:	andeq	r3, r1, r8, lsr #2
   13088:	andeq	r3, r1, r8, lsr #2
   1308c:	andeq	r3, r1, r8, lsr #2
   13090:	andeq	r3, r1, r8, lsr #2
   13094:	andeq	r3, r1, r8, lsr #2
   13098:			; <UNDEFINED> instruction: 0x00012ab8
   1309c:	muleq	r1, r0, r8
   130a0:	andeq	r3, r1, r8, lsr #2
   130a4:			; <UNDEFINED> instruction: 0x00012ab8
   130a8:	andeq	r3, r1, r8, lsr #2
   130ac:			; <UNDEFINED> instruction: 0x00012ab8
   130b0:	andeq	r3, r1, r8, lsr #2
   130b4:	andeq	r3, r1, r8, lsr #2
   130b8:	andeq	r3, r1, r8, lsr #2
   130bc:	andeq	r3, r1, r8, lsr #2
   130c0:	andeq	r3, r1, r8, lsr #2
   130c4:	andeq	r3, r1, r8, lsr #2
   130c8:	andeq	r3, r1, r8, lsr #2
   130cc:	andeq	r3, r1, r8, lsr #2
   130d0:	andeq	r3, r1, r8, lsr #2
   130d4:	andeq	r3, r1, r8, lsr #2
   130d8:	andeq	r3, r1, r8, lsr #2
   130dc:	andeq	r3, r1, r8, lsr #2
   130e0:	andeq	r3, r1, r8, lsr #2
   130e4:	andeq	r3, r1, r8, lsr #2
   130e8:	andeq	r3, r1, r8, lsr #2
   130ec:	andeq	r3, r1, r8, lsr #2
   130f0:	andeq	r3, r1, r8, lsr #2
   130f4:	andeq	r3, r1, r8, lsr #2
   130f8:	andeq	r3, r1, r8, lsr #2
   130fc:	andeq	r3, r1, r8, lsr #2
   13100:	andeq	r3, r1, r8, lsr #2
   13104:	andeq	r3, r1, r8, lsr #2
   13108:	andeq	r3, r1, r8, lsr #2
   1310c:	andeq	r3, r1, r8, lsr #2
   13110:	andeq	r3, r1, r8, lsr #2
   13114:	andeq	r3, r1, r8, lsr #2
   13118:			; <UNDEFINED> instruction: 0x000126b4
   1311c:			; <UNDEFINED> instruction: 0x00012ab8
   13120:			; <UNDEFINED> instruction: 0x000126b4
   13124:	andeq	r3, r1, r4, lsr r1
   13128:	mov	r6, r7
   1312c:	mov	r7, #0
   13130:	b	128e0 <__assert_fail@plt+0x195c>
   13134:	cmp	r9, #0
   13138:	mov	r2, #0
   1313c:	beq	12ba4 <__assert_fail@plt+0x1c20>
   13140:	mov	r6, #0
   13144:	mov	r7, r2
   13148:	mov	r3, r6
   1314c:	b	12700 <__assert_fail@plt+0x177c>
   13150:	mov	r2, #0
   13154:	b	12bb8 <__assert_fail@plt+0x1c34>
   13158:	mov	r7, #0
   1315c:	mov	r3, #118	; 0x76
   13160:	b	128c4 <__assert_fail@plt+0x1940>
   13164:	mov	r7, #0
   13168:	mov	r3, #116	; 0x74
   1316c:	b	129f4 <__assert_fail@plt+0x1a70>
   13170:	ldr	r3, [sp, #44]	; 0x2c
   13174:	b	12728 <__assert_fail@plt+0x17a4>
   13178:	ldr	r3, [sp, #44]	; 0x2c
   1317c:	cmp	r3, #0
   13180:	bne	135f0 <__assert_fail@plt+0x266c>
   13184:	add	r9, r9, #1
   13188:	mov	r6, #0
   1318c:	ldr	r3, [sp, #48]	; 0x30
   13190:	mov	r5, #92	; 0x5c
   13194:	b	129b4 <__assert_fail@plt+0x1a30>
   13198:	ldr	r3, [sp, #32]
   1319c:	ldrb	r2, [r3, #1]
   131a0:	adds	r2, r2, #0
   131a4:	movne	r2, #1
   131a8:	b	126d0 <__assert_fail@plt+0x174c>
   131ac:	ldr	r3, [sp, #156]	; 0x9c
   131b0:	ands	r3, r3, #4
   131b4:	beq	131dc <__assert_fail@plt+0x2258>
   131b8:	ldr	r2, [sp, #28]
   131bc:	add	r3, r9, #2
   131c0:	cmp	r3, r2
   131c4:	bcs	131d8 <__assert_fail@plt+0x2254>
   131c8:	ldr	r2, [sp, #52]	; 0x34
   131cc:	ldrb	r5, [r2, #1]
   131d0:	cmp	r5, #63	; 0x3f
   131d4:	beq	13654 <__assert_fail@plt+0x26d0>
   131d8:	mov	r3, #0
   131dc:	mov	r5, #63	; 0x3f
   131e0:	mov	r6, r3
   131e4:	b	126f0 <__assert_fail@plt+0x176c>
   131e8:	ldr	r3, [sp, #44]	; 0x2c
   131ec:	cmp	r3, #0
   131f0:	bne	135f0 <__assert_fail@plt+0x266c>
   131f4:	mov	r6, r3
   131f8:	mov	r5, #63	; 0x3f
   131fc:	b	12728 <__assert_fail@plt+0x17a4>
   13200:	ldr	r1, [sp, #28]
   13204:	mov	r2, #0
   13208:	mov	r3, #0
   1320c:	strd	r2, [sp, #104]	; 0x68
   13210:	cmn	r1, #1
   13214:	bne	13224 <__assert_fail@plt+0x22a0>
   13218:	ldr	r0, [sp, #32]
   1321c:	bl	10e94 <strlen@plt>
   13220:	str	r0, [sp, #28]
   13224:	str	r8, [sp, #76]	; 0x4c
   13228:	mov	r3, #0
   1322c:	str	sl, [sp, #80]	; 0x50
   13230:	ldr	sl, [sp, #32]
   13234:	str	r5, [sp, #84]	; 0x54
   13238:	mov	r5, r3
   1323c:	ldr	r8, [sp, #44]	; 0x2c
   13240:	str	r7, [sp, #88]	; 0x58
   13244:	str	r4, [sp, #92]	; 0x5c
   13248:	ldr	r2, [sp, #28]
   1324c:	add	r4, r9, r5
   13250:	add	r3, sp, #104	; 0x68
   13254:	add	r7, sl, r4
   13258:	add	r0, sp, #100	; 0x64
   1325c:	mov	r1, r7
   13260:	sub	r2, r2, r4
   13264:	bl	15cb8 <__assert_fail@plt+0x4d34>
   13268:	subs	r1, r0, #0
   1326c:	beq	132b8 <__assert_fail@plt+0x2334>
   13270:	cmn	r1, #1
   13274:	beq	13630 <__assert_fail@plt+0x26ac>
   13278:	cmn	r1, #2
   1327c:	beq	13750 <__assert_fail@plt+0x27cc>
   13280:	cmp	fp, #2
   13284:	movne	r3, #0
   13288:	andeq	r3, r8, #1
   1328c:	cmp	r3, #0
   13290:	bne	1341c <__assert_fail@plt+0x2498>
   13294:	ldr	r0, [sp, #100]	; 0x64
   13298:	add	r5, r5, r1
   1329c:	bl	10db0 <iswprint@plt>
   132a0:	cmp	r0, #0
   132a4:	add	r0, sp, #104	; 0x68
   132a8:	moveq	r6, #0
   132ac:	bl	10d68 <mbsinit@plt>
   132b0:	cmp	r0, #0
   132b4:	beq	13248 <__assert_fail@plt+0x22c4>
   132b8:	ldr	r3, [sp, #40]	; 0x28
   132bc:	mov	ip, r5
   132c0:	eor	r2, r6, #1
   132c4:	ldr	r8, [sp, #76]	; 0x4c
   132c8:	ldr	sl, [sp, #80]	; 0x50
   132cc:	and	r2, r2, r3
   132d0:	ldr	r5, [sp, #84]	; 0x54
   132d4:	ldr	r7, [sp, #88]	; 0x58
   132d8:	ldr	r4, [sp, #92]	; 0x5c
   132dc:	cmp	ip, #1
   132e0:	bls	12c1c <__assert_fail@plt+0x1c98>
   132e4:	add	r1, ip, r9
   132e8:	mov	r0, #39	; 0x27
   132ec:	ldr	lr, [sp, #52]	; 0x34
   132f0:	mov	ip, #0
   132f4:	str	r6, [sp, #52]	; 0x34
   132f8:	ldr	r6, [sp, #48]	; 0x30
   132fc:	b	133b8 <__assert_fail@plt+0x2434>
   13300:	ldr	ip, [sp, #44]	; 0x2c
   13304:	sub	r3, fp, #2
   13308:	clz	r3, r3
   1330c:	lsr	r3, r3, #5
   13310:	cmp	ip, #0
   13314:	bne	13528 <__assert_fail@plt+0x25a4>
   13318:	eor	ip, r6, #1
   1331c:	ands	r3, r3, ip
   13320:	beq	13350 <__assert_fail@plt+0x23cc>
   13324:	cmp	sl, r4
   13328:	add	ip, r4, #1
   1332c:	strbhi	r0, [r8, r4]
   13330:	cmp	sl, ip
   13334:	movhi	r6, #36	; 0x24
   13338:	strbhi	r6, [r8, ip]
   1333c:	add	ip, r4, #2
   13340:	mov	r6, r3
   13344:	cmp	sl, ip
   13348:	add	r4, r4, #3
   1334c:	strbhi	r0, [r8, ip]
   13350:	cmp	sl, r4
   13354:	movhi	r3, #92	; 0x5c
   13358:	strbhi	r3, [r8, r4]
   1335c:	add	r3, r4, #1
   13360:	cmp	sl, r3
   13364:	bls	13374 <__assert_fail@plt+0x23f0>
   13368:	lsr	ip, r5, #6
   1336c:	add	ip, ip, #48	; 0x30
   13370:	strb	ip, [r8, r3]
   13374:	add	r3, r4, #2
   13378:	cmp	sl, r3
   1337c:	bls	1338c <__assert_fail@plt+0x2408>
   13380:	ubfx	ip, r5, #3, #3
   13384:	add	ip, ip, #48	; 0x30
   13388:	strb	ip, [r8, r3]
   1338c:	add	r9, r9, #1
   13390:	and	r5, r5, #7
   13394:	cmp	r9, r1
   13398:	add	r5, r5, #48	; 0x30
   1339c:	add	r4, r4, #3
   133a0:	bcs	13554 <__assert_fail@plt+0x25d0>
   133a4:	mov	ip, r2
   133a8:	cmp	sl, r4
   133ac:	strbhi	r5, [r8, r4]
   133b0:	add	r4, r4, #1
   133b4:	ldrb	r5, [lr, #1]!
   133b8:	cmp	r2, #0
   133bc:	bne	13300 <__assert_fail@plt+0x237c>
   133c0:	eor	r3, ip, #1
   133c4:	cmp	r7, #0
   133c8:	and	r3, r3, r6
   133cc:	uxtb	r3, r3
   133d0:	beq	133e4 <__assert_fail@plt+0x2460>
   133d4:	cmp	sl, r4
   133d8:	movhi	r7, #92	; 0x5c
   133dc:	strbhi	r7, [r8, r4]
   133e0:	add	r4, r4, #1
   133e4:	add	r9, r9, #1
   133e8:	cmp	r9, r1
   133ec:	bcs	1353c <__assert_fail@plt+0x25b8>
   133f0:	cmp	r3, #0
   133f4:	beq	13574 <__assert_fail@plt+0x25f0>
   133f8:	cmp	sl, r4
   133fc:	add	r3, r4, #1
   13400:	mov	r7, #0
   13404:	strbhi	r0, [r8, r4]
   13408:	cmp	sl, r3
   1340c:	add	r4, r4, #2
   13410:	mov	r6, r7
   13414:	strbhi	r0, [r8, r3]
   13418:	b	133a8 <__assert_fail@plt+0x2424>
   1341c:	cmp	r1, #1
   13420:	beq	13294 <__assert_fail@plt+0x2310>
   13424:	add	r2, r4, #1
   13428:	add	r3, sl, r1
   1342c:	add	r2, sl, r2
   13430:	add	r4, r3, r4
   13434:	ldrb	r3, [r2], #1
   13438:	sub	r3, r3, #91	; 0x5b
   1343c:	cmp	r3, #33	; 0x21
   13440:	ldrls	pc, [pc, r3, lsl #2]
   13444:	b	134d0 <__assert_fail@plt+0x254c>
   13448:	ldrdeq	r3, [r1], -ip
   1344c:	ldrdeq	r3, [r1], -ip
   13450:	ldrdeq	r3, [r1], -r0
   13454:	ldrdeq	r3, [r1], -ip
   13458:	ldrdeq	r3, [r1], -r0
   1345c:	ldrdeq	r3, [r1], -ip
   13460:	ldrdeq	r3, [r1], -r0
   13464:	ldrdeq	r3, [r1], -r0
   13468:	ldrdeq	r3, [r1], -r0
   1346c:	ldrdeq	r3, [r1], -r0
   13470:	ldrdeq	r3, [r1], -r0
   13474:	ldrdeq	r3, [r1], -r0
   13478:	ldrdeq	r3, [r1], -r0
   1347c:	ldrdeq	r3, [r1], -r0
   13480:	ldrdeq	r3, [r1], -r0
   13484:	ldrdeq	r3, [r1], -r0
   13488:	ldrdeq	r3, [r1], -r0
   1348c:	ldrdeq	r3, [r1], -r0
   13490:	ldrdeq	r3, [r1], -r0
   13494:	ldrdeq	r3, [r1], -r0
   13498:	ldrdeq	r3, [r1], -r0
   1349c:	ldrdeq	r3, [r1], -r0
   134a0:	ldrdeq	r3, [r1], -r0
   134a4:	ldrdeq	r3, [r1], -r0
   134a8:	ldrdeq	r3, [r1], -r0
   134ac:	ldrdeq	r3, [r1], -r0
   134b0:	ldrdeq	r3, [r1], -r0
   134b4:	ldrdeq	r3, [r1], -r0
   134b8:	ldrdeq	r3, [r1], -r0
   134bc:	ldrdeq	r3, [r1], -r0
   134c0:	ldrdeq	r3, [r1], -r0
   134c4:	ldrdeq	r3, [r1], -r0
   134c8:	ldrdeq	r3, [r1], -r0
   134cc:	ldrdeq	r3, [r1], -ip
   134d0:	cmp	r4, r2
   134d4:	bne	13434 <__assert_fail@plt+0x24b0>
   134d8:	b	13294 <__assert_fail@plt+0x2310>
   134dc:	mov	r8, #2
   134e0:	ldr	fp, [sp, #76]	; 0x4c
   134e4:	ldr	sl, [sp, #80]	; 0x50
   134e8:	b	12a14 <__assert_fail@plt+0x1a90>
   134ec:	ldr	r2, [sp, #40]	; 0x28
   134f0:	str	fp, [sp, #152]	; 0x98
   134f4:	mov	fp, r8
   134f8:	ldr	r8, [sp, #152]	; 0x98
   134fc:	and	r2, r2, r3
   13500:	str	r2, [sp, #40]	; 0x28
   13504:	b	12a14 <__assert_fail@plt+0x1a90>
   13508:	cmp	sl, r4
   1350c:	movls	r0, r4
   13510:	bls	12b44 <__assert_fail@plt+0x1bc0>
   13514:	ldr	r3, [sp, #48]	; 0x30
   13518:	b	12b34 <__assert_fail@plt+0x1bb0>
   1351c:	str	sl, [sp, #72]	; 0x48
   13520:	ldr	sl, [sp, #44]	; 0x2c
   13524:	b	12984 <__assert_fail@plt+0x1a00>
   13528:	str	r3, [sp, #40]	; 0x28
   1352c:	str	fp, [sp, #152]	; 0x98
   13530:	mov	fp, r8
   13534:	ldr	r8, [sp, #152]	; 0x98
   13538:	b	12a14 <__assert_fail@plt+0x1a90>
   1353c:	str	r6, [sp, #48]	; 0x30
   13540:	ldr	r6, [sp, #52]	; 0x34
   13544:	b	129b4 <__assert_fail@plt+0x1a30>
   13548:	mov	r6, #0
   1354c:	ldr	r2, [sp, #40]	; 0x28
   13550:	b	132e4 <__assert_fail@plt+0x2360>
   13554:	str	r6, [sp, #48]	; 0x30
   13558:	ldr	r6, [sp, #52]	; 0x34
   1355c:	b	127a0 <__assert_fail@plt+0x181c>
   13560:	add	r4, r4, #4
   13564:	mov	r6, #0
   13568:	str	r3, [sp, #48]	; 0x30
   1356c:	mov	r5, #48	; 0x30
   13570:	b	12728 <__assert_fail@plt+0x17a4>
   13574:	mov	r7, r3
   13578:	b	133a8 <__assert_fail@plt+0x2424>
   1357c:	mov	r3, #1
   13580:	movw	r2, #26896	; 0x6910
   13584:	movt	r2, #1
   13588:	mov	r4, r3
   1358c:	str	r3, [sp, #36]	; 0x24
   13590:	str	r3, [sp, #40]	; 0x28
   13594:	str	sl, [sp, #44]	; 0x2c
   13598:	str	sl, [sp, #48]	; 0x30
   1359c:	str	r3, [sp, #56]	; 0x38
   135a0:	str	r2, [sp, #60]	; 0x3c
   135a4:	str	sl, [sp, #68]	; 0x44
   135a8:	str	sl, [sp, #72]	; 0x48
   135ac:	b	12250 <__assert_fail@plt+0x12cc>
   135b0:	mov	r3, r6
   135b4:	mov	r5, #48	; 0x30
   135b8:	mov	r6, #0
   135bc:	b	12728 <__assert_fail@plt+0x17a4>
   135c0:	mov	r5, r3
   135c4:	b	12aa0 <__assert_fail@plt+0x1b1c>
   135c8:	cmp	sl, r4
   135cc:	mov	r5, #48	; 0x30
   135d0:	movhi	r3, #48	; 0x30
   135d4:	strbhi	r3, [r8, r4]
   135d8:	add	r3, r0, #2
   135dc:	add	r4, r0, #3
   135e0:	cmp	sl, r3
   135e4:	movhi	r1, #48	; 0x30
   135e8:	strbhi	r1, [r8, r3]
   135ec:	b	12b78 <__assert_fail@plt+0x1bf4>
   135f0:	str	fp, [sp, #152]	; 0x98
   135f4:	mov	fp, r8
   135f8:	ldr	r8, [sp, #152]	; 0x98
   135fc:	b	12a14 <__assert_fail@plt+0x1a90>
   13600:	ldr	r3, [sp, #164]	; 0xa4
   13604:	ldrb	r3, [r3]
   13608:	cmp	r3, #0
   1360c:	beq	12220 <__assert_fail@plt+0x129c>
   13610:	ldr	r2, [sp, #164]	; 0xa4
   13614:	cmp	sl, r4
   13618:	strbhi	r3, [fp, r4]
   1361c:	add	r4, r4, #1
   13620:	ldrb	r3, [r2, #1]!
   13624:	cmp	r3, #0
   13628:	bne	13614 <__assert_fail@plt+0x2690>
   1362c:	b	12220 <__assert_fail@plt+0x129c>
   13630:	mov	ip, r5
   13634:	mov	r6, #0
   13638:	ldr	r2, [sp, #40]	; 0x28
   1363c:	ldr	r8, [sp, #76]	; 0x4c
   13640:	ldr	sl, [sp, #80]	; 0x50
   13644:	ldr	r5, [sp, #84]	; 0x54
   13648:	ldr	r7, [sp, #88]	; 0x58
   1364c:	ldr	r4, [sp, #92]	; 0x5c
   13650:	b	132dc <__assert_fail@plt+0x2358>
   13654:	ldr	r2, [sp, #32]
   13658:	ldrb	r1, [r2, r3]
   1365c:	sub	r2, r1, #33	; 0x21
   13660:	cmp	r2, #29
   13664:	ldrls	pc, [pc, r2, lsl #2]
   13668:	b	13744 <__assert_fail@plt+0x27c0>
   1366c:	andeq	r3, r1, r4, ror #13
   13670:	andeq	r3, r1, r4, asr #14
   13674:	andeq	r3, r1, r4, asr #14
   13678:	andeq	r3, r1, r4, asr #14
   1367c:	andeq	r3, r1, r4, asr #14
   13680:	andeq	r3, r1, r4, asr #14
   13684:	andeq	r3, r1, r4, ror #13
   13688:	andeq	r3, r1, r4, ror #13
   1368c:	andeq	r3, r1, r4, ror #13
   13690:	andeq	r3, r1, r4, asr #14
   13694:	andeq	r3, r1, r4, asr #14
   13698:	andeq	r3, r1, r4, asr #14
   1369c:	andeq	r3, r1, r4, ror #13
   136a0:	andeq	r3, r1, r4, asr #14
   136a4:	andeq	r3, r1, r4, ror #13
   136a8:	andeq	r3, r1, r4, asr #14
   136ac:	andeq	r3, r1, r4, asr #14
   136b0:	andeq	r3, r1, r4, asr #14
   136b4:	andeq	r3, r1, r4, asr #14
   136b8:	andeq	r3, r1, r4, asr #14
   136bc:	andeq	r3, r1, r4, asr #14
   136c0:	andeq	r3, r1, r4, asr #14
   136c4:	andeq	r3, r1, r4, asr #14
   136c8:	andeq	r3, r1, r4, asr #14
   136cc:	andeq	r3, r1, r4, asr #14
   136d0:	andeq	r3, r1, r4, asr #14
   136d4:	andeq	r3, r1, r4, asr #14
   136d8:	andeq	r3, r1, r4, ror #13
   136dc:	andeq	r3, r1, r4, ror #13
   136e0:	andeq	r3, r1, r4, ror #13
   136e4:	ldr	r2, [sp, #44]	; 0x2c
   136e8:	cmp	r2, #0
   136ec:	bne	13848 <__assert_fail@plt+0x28c4>
   136f0:	cmp	sl, r4
   136f4:	mov	r5, r1
   136f8:	movhi	r2, #63	; 0x3f
   136fc:	mov	r9, r3
   13700:	strbhi	r2, [r8, r4]
   13704:	add	r2, r4, #1
   13708:	cmp	sl, r2
   1370c:	movhi	r0, #34	; 0x22
   13710:	strbhi	r0, [r8, r2]
   13714:	add	r2, r4, #2
   13718:	cmp	sl, r2
   1371c:	movhi	r0, #34	; 0x22
   13720:	strbhi	r0, [r8, r2]
   13724:	add	r2, r4, #3
   13728:	add	r4, r4, #4
   1372c:	cmp	sl, r2
   13730:	movhi	r0, #63	; 0x3f
   13734:	strbhi	r0, [r8, r2]
   13738:	mov	r2, #0
   1373c:	mov	r6, r2
   13740:	b	12b78 <__assert_fail@plt+0x1bf4>
   13744:	mov	r3, #0
   13748:	mov	r6, r3
   1374c:	b	126f0 <__assert_fail@plt+0x176c>
   13750:	ldr	r0, [sp, #28]
   13754:	mov	r1, r4
   13758:	mov	r2, r7
   1375c:	mov	r3, r5
   13760:	mov	ip, r5
   13764:	ldr	r8, [sp, #76]	; 0x4c
   13768:	ldr	sl, [sp, #80]	; 0x50
   1376c:	cmp	r1, r0
   13770:	ldr	r5, [sp, #84]	; 0x54
   13774:	ldr	r7, [sp, #88]	; 0x58
   13778:	ldr	r4, [sp, #92]	; 0x5c
   1377c:	bcs	137b0 <__assert_fail@plt+0x282c>
   13780:	ldrb	r6, [r2]
   13784:	cmp	r6, #0
   13788:	bne	1379c <__assert_fail@plt+0x2818>
   1378c:	b	138d0 <__assert_fail@plt+0x294c>
   13790:	ldrb	r6, [r2, #1]!
   13794:	cmp	r6, #0
   13798:	beq	13858 <__assert_fail@plt+0x28d4>
   1379c:	add	r3, r3, #1
   137a0:	add	r1, r9, r3
   137a4:	cmp	r1, r0
   137a8:	bcc	13790 <__assert_fail@plt+0x280c>
   137ac:	mov	ip, r3
   137b0:	mov	r6, #0
   137b4:	ldr	r2, [sp, #40]	; 0x28
   137b8:	b	132dc <__assert_fail@plt+0x2358>
   137bc:	mov	r3, #1
   137c0:	mov	r2, #0
   137c4:	mov	r4, r2
   137c8:	str	r3, [sp, #36]	; 0x24
   137cc:	str	r3, [sp, #40]	; 0x28
   137d0:	str	r3, [sp, #44]	; 0x2c
   137d4:	str	r2, [sp, #48]	; 0x30
   137d8:	str	r3, [sp, #56]	; 0x38
   137dc:	movw	r3, #26896	; 0x6910
   137e0:	movt	r3, #1
   137e4:	str	r3, [sp, #60]	; 0x3c
   137e8:	str	r2, [sp, #68]	; 0x44
   137ec:	str	r2, [sp, #72]	; 0x48
   137f0:	b	12250 <__assert_fail@plt+0x12cc>
   137f4:	mov	r2, r3
   137f8:	ldr	r3, [sp, #60]	; 0x3c
   137fc:	cmp	r3, #0
   13800:	moveq	r2, #0
   13804:	andne	r2, r2, #1
   13808:	cmp	r2, #0
   1380c:	beq	13838 <__assert_fail@plt+0x28b4>
   13810:	mov	r2, r3
   13814:	ldrb	r3, [r3]
   13818:	cmp	r3, #0
   1381c:	beq	13838 <__assert_fail@plt+0x28b4>
   13820:	cmp	sl, r4
   13824:	strbhi	r3, [fp, r4]
   13828:	add	r4, r4, #1
   1382c:	ldrb	r3, [r2, #1]!
   13830:	cmp	r3, #0
   13834:	bne	13820 <__assert_fail@plt+0x289c>
   13838:	cmp	sl, r4
   1383c:	movhi	r3, #0
   13840:	strbhi	r3, [fp, r4]
   13844:	b	12a58 <__assert_fail@plt+0x1ad4>
   13848:	str	fp, [sp, #152]	; 0x98
   1384c:	mov	fp, r8
   13850:	ldr	r8, [sp, #152]	; 0x98
   13854:	b	12a20 <__assert_fail@plt+0x1a9c>
   13858:	mov	ip, r3
   1385c:	ldr	r2, [sp, #40]	; 0x28
   13860:	b	132dc <__assert_fail@plt+0x2358>
   13864:	str	fp, [sp, #152]	; 0x98
   13868:	mov	fp, r8
   1386c:	ldr	r8, [sp, #152]	; 0x98
   13870:	sub	r3, r8, #2
   13874:	clz	r3, r3
   13878:	lsr	r3, r3, #5
   1387c:	str	r3, [sp, #40]	; 0x28
   13880:	b	12a14 <__assert_fail@plt+0x1a90>
   13884:	mov	ip, #5
   13888:	ldr	r3, [sp, #28]
   1388c:	str	ip, [sp]
   13890:	ldr	r2, [sp, #156]	; 0x9c
   13894:	ldr	ip, [sp, #164]	; 0xa4
   13898:	ldr	r0, [sp, #160]	; 0xa0
   1389c:	str	r2, [sp, #4]
   138a0:	ldr	r2, [sp, #32]
   138a4:	ldr	r1, [sp, #72]	; 0x48
   138a8:	str	ip, [sp, #12]
   138ac:	ldr	ip, [sp, #168]	; 0xa8
   138b0:	str	r0, [sp, #8]
   138b4:	mov	r0, fp
   138b8:	str	ip, [sp, #16]
   138bc:	bl	12168 <__assert_fail@plt+0x11e4>
   138c0:	mov	r4, r0
   138c4:	b	12a58 <__assert_fail@plt+0x1ad4>
   138c8:	mov	r8, #2
   138cc:	b	12a14 <__assert_fail@plt+0x1a90>
   138d0:	ldr	r2, [sp, #40]	; 0x28
   138d4:	b	132dc <__assert_fail@plt+0x2358>
   138d8:	mov	r3, #0
   138dc:	mov	r2, #1
   138e0:	mov	r4, r3
   138e4:	strd	r2, [sp, #36]	; 0x24
   138e8:	strd	r2, [sp, #44]	; 0x2c
   138ec:	str	r2, [sp, #56]	; 0x38
   138f0:	str	r3, [sp, #68]	; 0x44
   138f4:	str	r3, [sp, #72]	; 0x48
   138f8:	movw	r3, #26916	; 0x6924
   138fc:	movt	r3, #1
   13900:	str	r3, [sp, #60]	; 0x3c
   13904:	b	12250 <__assert_fail@plt+0x12cc>
   13908:	mov	r3, #0
   1390c:	mov	r1, #1
   13910:	mov	r2, r3
   13914:	str	r1, [sp, #36]	; 0x24
   13918:	str	r3, [sp, #48]	; 0x30
   1391c:	str	sl, [sp, #72]	; 0x48
   13920:	b	12858 <__assert_fail@plt+0x18d4>
   13924:	bl	10f78 <abort@plt>
   13928:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1392c:	mov	r4, r0
   13930:	mov	r5, r3
   13934:	strd	r6, [sp, #8]
   13938:	movw	r7, #28924	; 0x70fc
   1393c:	movt	r7, #2
   13940:	strd	r8, [sp, #16]
   13944:	strd	sl, [sp, #24]
   13948:	mov	sl, r1
   1394c:	mov	fp, r2
   13950:	str	lr, [sp, #32]
   13954:	sub	sp, sp, #60	; 0x3c
   13958:	bl	10eac <__errno_location@plt>
   1395c:	mov	r8, r0
   13960:	cmn	r4, #-2147483647	; 0x80000001
   13964:	ldr	r6, [r7]
   13968:	movne	r0, #0
   1396c:	moveq	r0, #1
   13970:	ldr	r3, [r8]
   13974:	orrs	r0, r0, r4, lsr #31
   13978:	str	r3, [sp, #28]
   1397c:	bne	13b0c <__assert_fail@plt+0x2b88>
   13980:	ldr	r3, [r7, #4]
   13984:	cmp	r3, r4
   13988:	bgt	139e8 <__assert_fail@plt+0x2a64>
   1398c:	add	r1, r7, #8
   13990:	sub	r2, r4, r3
   13994:	str	r3, [sp, #52]	; 0x34
   13998:	cmp	r6, r1
   1399c:	add	r2, r2, #1
   139a0:	beq	13ae4 <__assert_fail@plt+0x2b60>
   139a4:	mov	r1, #8
   139a8:	mov	r0, r6
   139ac:	mvn	r3, #-2147483648	; 0x80000000
   139b0:	str	r1, [sp]
   139b4:	add	r1, sp, #52	; 0x34
   139b8:	bl	1498c <__assert_fail@plt+0x3a08>
   139bc:	mov	r6, r0
   139c0:	str	r0, [r7]
   139c4:	ldr	r0, [r7, #4]
   139c8:	mov	r1, #0
   139cc:	ldr	r2, [sp, #52]	; 0x34
   139d0:	sub	r2, r2, r0
   139d4:	add	r0, r6, r0, lsl #3
   139d8:	lsl	r2, r2, #3
   139dc:	bl	10ec4 <memset@plt>
   139e0:	ldr	r3, [sp, #52]	; 0x34
   139e4:	str	r3, [r7, #4]
   139e8:	ldr	r1, [r5, #4]
   139ec:	add	r0, r6, r4, lsl #3
   139f0:	add	ip, r5, #8
   139f4:	mov	r3, fp
   139f8:	mov	r2, sl
   139fc:	ldr	r7, [r0, #4]
   13a00:	str	r0, [sp, #36]	; 0x24
   13a04:	str	ip, [sp, #40]	; 0x28
   13a08:	orr	r0, r1, #1
   13a0c:	ldr	r9, [r6, r4, lsl #3]
   13a10:	str	ip, [sp, #8]
   13a14:	ldr	lr, [r5, #44]	; 0x2c
   13a18:	str	r0, [sp, #4]
   13a1c:	ldr	ip, [r5]
   13a20:	mov	r1, r9
   13a24:	str	ip, [sp, #32]
   13a28:	ldr	ip, [r5, #40]	; 0x28
   13a2c:	str	ip, [sp, #12]
   13a30:	ldr	ip, [sp, #32]
   13a34:	str	lr, [sp, #16]
   13a38:	str	r0, [sp, #44]	; 0x2c
   13a3c:	mov	r0, r7
   13a40:	str	ip, [sp]
   13a44:	bl	12168 <__assert_fail@plt+0x11e4>
   13a48:	cmp	r9, r0
   13a4c:	bhi	13abc <__assert_fail@plt+0x2b38>
   13a50:	add	r9, r0, #1
   13a54:	movw	r3, #29076	; 0x7194
   13a58:	movt	r3, #2
   13a5c:	cmp	r7, r3
   13a60:	str	r9, [r6, r4, lsl #3]
   13a64:	beq	13a70 <__assert_fail@plt+0x2aec>
   13a68:	mov	r0, r7
   13a6c:	bl	11e98 <__assert_fail@plt+0xf14>
   13a70:	mov	r0, r9
   13a74:	bl	147dc <__assert_fail@plt+0x3858>
   13a78:	ldr	ip, [r5]
   13a7c:	mov	r3, fp
   13a80:	mov	r2, sl
   13a84:	mov	r1, r9
   13a88:	mov	r7, r0
   13a8c:	ldr	lr, [sp, #36]	; 0x24
   13a90:	ldr	r4, [r5, #40]	; 0x28
   13a94:	str	r0, [lr, #4]
   13a98:	ldr	lr, [r5, #44]	; 0x2c
   13a9c:	str	ip, [sp]
   13aa0:	ldr	ip, [sp, #44]	; 0x2c
   13aa4:	str	ip, [sp, #4]
   13aa8:	ldr	ip, [sp, #40]	; 0x28
   13aac:	str	r4, [sp, #12]
   13ab0:	str	lr, [sp, #16]
   13ab4:	str	ip, [sp, #8]
   13ab8:	bl	12168 <__assert_fail@plt+0x11e4>
   13abc:	ldr	r3, [sp, #28]
   13ac0:	mov	r0, r7
   13ac4:	str	r3, [r8]
   13ac8:	add	sp, sp, #60	; 0x3c
   13acc:	ldrd	r4, [sp]
   13ad0:	ldrd	r6, [sp, #8]
   13ad4:	ldrd	r8, [sp, #16]
   13ad8:	ldrd	sl, [sp, #24]
   13adc:	add	sp, sp, #32
   13ae0:	pop	{pc}		; (ldr pc, [sp], #4)
   13ae4:	mov	r1, #8
   13ae8:	mvn	r3, #-2147483648	; 0x80000000
   13aec:	str	r1, [sp]
   13af0:	add	r1, sp, #52	; 0x34
   13af4:	bl	1498c <__assert_fail@plt+0x3a08>
   13af8:	ldrd	r2, [r7, #8]
   13afc:	mov	r6, r0
   13b00:	str	r0, [r7]
   13b04:	strd	r2, [r0]
   13b08:	b	139c4 <__assert_fail@plt+0x2a40>
   13b0c:	bl	10f78 <abort@plt>
   13b10:	strd	r4, [sp, #-16]!
   13b14:	mov	r5, r0
   13b18:	str	r6, [sp, #8]
   13b1c:	str	lr, [sp, #12]
   13b20:	bl	10eac <__errno_location@plt>
   13b24:	mov	r4, r0
   13b28:	cmp	r5, #0
   13b2c:	ldr	r0, [pc, #32]	; 13b54 <__assert_fail@plt+0x2bd0>
   13b30:	mov	r1, #48	; 0x30
   13b34:	movne	r0, r5
   13b38:	ldr	r6, [r4]
   13b3c:	bl	14b04 <__assert_fail@plt+0x3b80>
   13b40:	str	r6, [r4]
   13b44:	ldrd	r4, [sp]
   13b48:	ldr	r6, [sp, #8]
   13b4c:	add	sp, sp, #12
   13b50:	pop	{pc}		; (ldr pc, [sp], #4)
   13b54:	muleq	r2, r4, r2
   13b58:	ldr	r3, [pc, #12]	; 13b6c <__assert_fail@plt+0x2be8>
   13b5c:	cmp	r0, #0
   13b60:	moveq	r0, r3
   13b64:	ldr	r0, [r0]
   13b68:	bx	lr
   13b6c:	muleq	r2, r4, r2
   13b70:	ldr	r3, [pc, #12]	; 13b84 <__assert_fail@plt+0x2c00>
   13b74:	cmp	r0, #0
   13b78:	moveq	r0, r3
   13b7c:	str	r1, [r0]
   13b80:	bx	lr
   13b84:	muleq	r2, r4, r2
   13b88:	ldr	r3, [pc, #52]	; 13bc4 <__assert_fail@plt+0x2c40>
   13b8c:	cmp	r0, #0
   13b90:	push	{lr}		; (str lr, [sp, #-4]!)
   13b94:	lsr	lr, r1, #5
   13b98:	and	r1, r1, #31
   13b9c:	moveq	r0, r3
   13ba0:	add	r3, r0, #8
   13ba4:	ldr	ip, [r3, lr, lsl #2]
   13ba8:	lsr	r0, ip, r1
   13bac:	eor	r2, r2, r0
   13bb0:	and	r0, r0, #1
   13bb4:	and	r2, r2, #1
   13bb8:	eor	r1, ip, r2, lsl r1
   13bbc:	str	r1, [r3, lr, lsl #2]
   13bc0:	pop	{pc}		; (ldr pc, [sp], #4)
   13bc4:	muleq	r2, r4, r2
   13bc8:	ldr	r3, [pc, #16]	; 13be0 <__assert_fail@plt+0x2c5c>
   13bcc:	cmp	r0, #0
   13bd0:	movne	r3, r0
   13bd4:	ldr	r0, [r3, #4]
   13bd8:	str	r1, [r3, #4]
   13bdc:	bx	lr
   13be0:	muleq	r2, r4, r2
   13be4:	ldr	r3, [pc, #48]	; 13c1c <__assert_fail@plt+0x2c98>
   13be8:	cmp	r0, #0
   13bec:	mov	ip, #10
   13bf0:	moveq	r0, r3
   13bf4:	cmp	r2, #0
   13bf8:	cmpne	r1, #0
   13bfc:	str	ip, [r0]
   13c00:	beq	13c10 <__assert_fail@plt+0x2c8c>
   13c04:	str	r1, [r0, #40]	; 0x28
   13c08:	str	r2, [r0, #44]	; 0x2c
   13c0c:	bx	lr
   13c10:	str	r4, [sp, #-8]!
   13c14:	str	lr, [sp, #4]
   13c18:	bl	10f78 <abort@plt>
   13c1c:	muleq	r2, r4, r2
   13c20:	strd	r4, [sp, #-28]!	; 0xffffffe4
   13c24:	strd	r6, [sp, #8]
   13c28:	mov	r7, r0
   13c2c:	mov	r6, r1
   13c30:	strd	r8, [sp, #16]
   13c34:	mov	r8, r2
   13c38:	mov	r9, r3
   13c3c:	str	lr, [sp, #24]
   13c40:	sub	sp, sp, #28
   13c44:	ldr	r4, [sp, #56]	; 0x38
   13c48:	ldr	ip, [pc, #104]	; 13cb8 <__assert_fail@plt+0x2d34>
   13c4c:	cmp	r4, #0
   13c50:	moveq	r4, ip
   13c54:	bl	10eac <__errno_location@plt>
   13c58:	ldr	ip, [r4, #44]	; 0x2c
   13c5c:	mov	r5, r0
   13c60:	mov	r1, r6
   13c64:	add	lr, r4, #8
   13c68:	mov	r3, r9
   13c6c:	ldr	r6, [r5]
   13c70:	mov	r2, r8
   13c74:	mov	r0, r7
   13c78:	str	ip, [sp, #16]
   13c7c:	ldr	ip, [r4, #40]	; 0x28
   13c80:	str	lr, [sp, #8]
   13c84:	str	ip, [sp, #12]
   13c88:	ldr	ip, [r4, #4]
   13c8c:	str	ip, [sp, #4]
   13c90:	ldr	ip, [r4]
   13c94:	str	ip, [sp]
   13c98:	bl	12168 <__assert_fail@plt+0x11e4>
   13c9c:	str	r6, [r5]
   13ca0:	add	sp, sp, #28
   13ca4:	ldrd	r4, [sp]
   13ca8:	ldrd	r6, [sp, #8]
   13cac:	ldrd	r8, [sp, #16]
   13cb0:	add	sp, sp, #24
   13cb4:	pop	{pc}		; (ldr pc, [sp], #4)
   13cb8:	muleq	r2, r4, r2
   13cbc:	strd	r4, [sp, #-36]!	; 0xffffffdc
   13cc0:	cmp	r3, #0
   13cc4:	ldr	r4, [pc, #220]	; 13da8 <__assert_fail@plt+0x2e24>
   13cc8:	movne	r4, r3
   13ccc:	strd	r6, [sp, #8]
   13cd0:	mov	r6, r2
   13cd4:	strd	r8, [sp, #16]
   13cd8:	mov	r9, r0
   13cdc:	strd	sl, [sp, #24]
   13ce0:	mov	sl, r1
   13ce4:	str	lr, [sp, #32]
   13ce8:	sub	sp, sp, #44	; 0x2c
   13cec:	bl	10eac <__errno_location@plt>
   13cf0:	ldr	r5, [r4, #4]
   13cf4:	mov	r7, r0
   13cf8:	mov	r1, #0
   13cfc:	add	r8, r4, #8
   13d00:	mov	r3, sl
   13d04:	ldr	ip, [r4, #44]	; 0x2c
   13d08:	mov	r2, r9
   13d0c:	mov	r0, r1
   13d10:	ldr	lr, [r7]
   13d14:	cmp	r6, r1
   13d18:	orreq	r5, r5, #1
   13d1c:	str	ip, [sp, #16]
   13d20:	ldr	ip, [r4, #40]	; 0x28
   13d24:	stmib	sp, {r5, r8, ip}
   13d28:	ldr	ip, [r4]
   13d2c:	str	lr, [sp, #28]
   13d30:	str	ip, [sp]
   13d34:	bl	12168 <__assert_fail@plt+0x11e4>
   13d38:	add	r1, r0, #1
   13d3c:	mov	fp, r0
   13d40:	mov	r0, r1
   13d44:	str	r1, [sp, #36]	; 0x24
   13d48:	bl	147dc <__assert_fail@plt+0x3858>
   13d4c:	ldr	ip, [r4, #44]	; 0x2c
   13d50:	mov	r3, sl
   13d54:	mov	r2, r9
   13d58:	ldr	r1, [sp, #36]	; 0x24
   13d5c:	str	ip, [sp, #16]
   13d60:	ldr	ip, [r4, #40]	; 0x28
   13d64:	str	r0, [sp, #32]
   13d68:	stmib	sp, {r5, r8, ip}
   13d6c:	ldr	ip, [r4]
   13d70:	str	ip, [sp]
   13d74:	bl	12168 <__assert_fail@plt+0x11e4>
   13d78:	ldr	lr, [sp, #28]
   13d7c:	cmp	r6, #0
   13d80:	ldr	r0, [sp, #32]
   13d84:	str	lr, [r7]
   13d88:	strne	fp, [r6]
   13d8c:	add	sp, sp, #44	; 0x2c
   13d90:	ldrd	r4, [sp]
   13d94:	ldrd	r6, [sp, #8]
   13d98:	ldrd	r8, [sp, #16]
   13d9c:	ldrd	sl, [sp, #24]
   13da0:	add	sp, sp, #32
   13da4:	pop	{pc}		; (ldr pc, [sp], #4)
   13da8:	muleq	r2, r4, r2
   13dac:	mov	r3, r2
   13db0:	mov	r2, #0
   13db4:	b	13cbc <__assert_fail@plt+0x2d38>
   13db8:	strd	r4, [sp, #-24]!	; 0xffffffe8
   13dbc:	movw	r5, #28924	; 0x70fc
   13dc0:	movt	r5, #2
   13dc4:	ldr	r3, [r5, #4]
   13dc8:	strd	r6, [sp, #8]
   13dcc:	str	r8, [sp, #16]
   13dd0:	str	lr, [sp, #20]
   13dd4:	ldr	r7, [r5]
   13dd8:	cmp	r3, #1
   13ddc:	ble	13e00 <__assert_fail@plt+0x2e7c>
   13de0:	mov	r4, #1
   13de4:	add	r6, r7, #4
   13de8:	ldr	r0, [r6, r4, lsl #3]
   13dec:	add	r4, r4, #1
   13df0:	bl	11e98 <__assert_fail@plt+0xf14>
   13df4:	ldr	r3, [r5, #4]
   13df8:	cmp	r3, r4
   13dfc:	bgt	13de8 <__assert_fail@plt+0x2e64>
   13e00:	ldr	r0, [r7, #4]
   13e04:	movw	r4, #29076	; 0x7194
   13e08:	movt	r4, #2
   13e0c:	cmp	r0, r4
   13e10:	beq	13e24 <__assert_fail@plt+0x2ea0>
   13e14:	bl	11e98 <__assert_fail@plt+0xf14>
   13e18:	mov	r3, #256	; 0x100
   13e1c:	str	r3, [r5, #8]
   13e20:	str	r4, [r5, #12]
   13e24:	ldr	r4, [pc, #44]	; 13e58 <__assert_fail@plt+0x2ed4>
   13e28:	cmp	r7, r4
   13e2c:	beq	13e3c <__assert_fail@plt+0x2eb8>
   13e30:	mov	r0, r7
   13e34:	bl	11e98 <__assert_fail@plt+0xf14>
   13e38:	str	r4, [r5]
   13e3c:	mov	r3, #1
   13e40:	ldrd	r6, [sp, #8]
   13e44:	str	r3, [r5, #4]
   13e48:	ldrd	r4, [sp]
   13e4c:	ldr	r8, [sp, #16]
   13e50:	add	sp, sp, #20
   13e54:	pop	{pc}		; (ldr pc, [sp], #4)
   13e58:	andeq	r7, r2, r4, lsl #2
   13e5c:	ldr	r3, [pc, #4]	; 13e68 <__assert_fail@plt+0x2ee4>
   13e60:	mvn	r2, #0
   13e64:	b	13928 <__assert_fail@plt+0x29a4>
   13e68:	muleq	r2, r4, r2
   13e6c:	ldr	r3, [pc]	; 13e74 <__assert_fail@plt+0x2ef0>
   13e70:	b	13928 <__assert_fail@plt+0x29a4>
   13e74:	muleq	r2, r4, r2
   13e78:	mov	r1, r0
   13e7c:	ldr	r3, [pc, #8]	; 13e8c <__assert_fail@plt+0x2f08>
   13e80:	mvn	r2, #0
   13e84:	mov	r0, #0
   13e88:	b	13928 <__assert_fail@plt+0x29a4>
   13e8c:	muleq	r2, r4, r2
   13e90:	mov	r2, r1
   13e94:	ldr	r3, [pc, #8]	; 13ea4 <__assert_fail@plt+0x2f20>
   13e98:	mov	r1, r0
   13e9c:	mov	r0, #0
   13ea0:	b	13928 <__assert_fail@plt+0x29a4>
   13ea4:	muleq	r2, r4, r2
   13ea8:	strd	r4, [sp, #-12]!
   13eac:	mov	r5, r2
   13eb0:	mov	r4, r0
   13eb4:	str	lr, [sp, #8]
   13eb8:	sub	sp, sp, #52	; 0x34
   13ebc:	mov	r0, sp
   13ec0:	bl	11fc4 <__assert_fail@plt+0x1040>
   13ec4:	mov	r3, sp
   13ec8:	mov	r1, r5
   13ecc:	mov	r0, r4
   13ed0:	mvn	r2, #0
   13ed4:	bl	13928 <__assert_fail@plt+0x29a4>
   13ed8:	add	sp, sp, #52	; 0x34
   13edc:	ldrd	r4, [sp]
   13ee0:	add	sp, sp, #8
   13ee4:	pop	{pc}		; (ldr pc, [sp], #4)
   13ee8:	strd	r4, [sp, #-16]!
   13eec:	mov	r5, r2
   13ef0:	mov	r4, r0
   13ef4:	str	r6, [sp, #8]
   13ef8:	mov	r6, r3
   13efc:	str	lr, [sp, #12]
   13f00:	sub	sp, sp, #48	; 0x30
   13f04:	mov	r0, sp
   13f08:	bl	11fc4 <__assert_fail@plt+0x1040>
   13f0c:	mov	r3, sp
   13f10:	mov	r2, r6
   13f14:	mov	r1, r5
   13f18:	mov	r0, r4
   13f1c:	bl	13928 <__assert_fail@plt+0x29a4>
   13f20:	add	sp, sp, #48	; 0x30
   13f24:	ldrd	r4, [sp]
   13f28:	ldr	r6, [sp, #8]
   13f2c:	add	sp, sp, #12
   13f30:	pop	{pc}		; (ldr pc, [sp], #4)
   13f34:	mov	r2, r1
   13f38:	mov	r1, r0
   13f3c:	mov	r0, #0
   13f40:	b	13ea8 <__assert_fail@plt+0x2f24>
   13f44:	mov	r3, r2
   13f48:	mov	r2, r1
   13f4c:	mov	r1, r0
   13f50:	mov	r0, #0
   13f54:	b	13ee8 <__assert_fail@plt+0x2f64>
   13f58:	ldr	ip, [pc, #140]	; 13fec <__assert_fail@plt+0x3068>
   13f5c:	strd	r4, [sp, #-28]!	; 0xffffffe4
   13f60:	ldrd	r4, [ip]
   13f64:	strd	r6, [sp, #8]
   13f68:	ldrd	r6, [ip, #8]
   13f6c:	strd	r8, [sp, #16]
   13f70:	lsr	r9, r2, #5
   13f74:	str	lr, [sp, #24]
   13f78:	sub	sp, sp, #52	; 0x34
   13f7c:	and	lr, r2, #31
   13f80:	add	r8, sp, #8
   13f84:	mov	r2, r1
   13f88:	strd	r4, [sp]
   13f8c:	mov	r1, r0
   13f90:	mov	r3, sp
   13f94:	strd	r6, [sp, #8]
   13f98:	mov	r0, #0
   13f9c:	ldrd	r4, [ip, #16]
   13fa0:	ldrd	r6, [ip, #24]
   13fa4:	strd	r4, [sp, #16]
   13fa8:	ldrd	r4, [ip, #32]
   13fac:	strd	r6, [sp, #24]
   13fb0:	ldrd	r6, [ip, #40]	; 0x28
   13fb4:	strd	r4, [sp, #32]
   13fb8:	strd	r6, [sp, #40]	; 0x28
   13fbc:	ldr	ip, [r8, r9, lsl #2]
   13fc0:	mvn	r4, ip, lsr lr
   13fc4:	and	r4, r4, #1
   13fc8:	eor	lr, ip, r4, lsl lr
   13fcc:	str	lr, [r8, r9, lsl #2]
   13fd0:	bl	13928 <__assert_fail@plt+0x29a4>
   13fd4:	add	sp, sp, #52	; 0x34
   13fd8:	ldrd	r4, [sp]
   13fdc:	ldrd	r6, [sp, #8]
   13fe0:	ldrd	r8, [sp, #16]
   13fe4:	add	sp, sp, #24
   13fe8:	pop	{pc}		; (ldr pc, [sp], #4)
   13fec:	muleq	r2, r4, r2
   13ff0:	mov	r2, r1
   13ff4:	mvn	r1, #0
   13ff8:	b	13f58 <__assert_fail@plt+0x2fd4>
   13ffc:	mov	r2, #58	; 0x3a
   14000:	mvn	r1, #0
   14004:	b	13f58 <__assert_fail@plt+0x2fd4>
   14008:	mov	r2, #58	; 0x3a
   1400c:	b	13f58 <__assert_fail@plt+0x2fd4>
   14010:	strd	r4, [sp, #-20]!	; 0xffffffec
   14014:	strd	r6, [sp, #8]
   14018:	mov	r6, r0
   1401c:	mov	r7, r2
   14020:	str	lr, [sp, #16]
   14024:	sub	sp, sp, #100	; 0x64
   14028:	mov	r0, sp
   1402c:	bl	11fc4 <__assert_fail@plt+0x1040>
   14030:	ldrd	r4, [sp, #8]
   14034:	mov	r1, r7
   14038:	mov	r0, r6
   1403c:	add	r3, sp, #48	; 0x30
   14040:	mvn	r2, #0
   14044:	ldrd	r6, [sp]
   14048:	strd	r4, [sp, #56]	; 0x38
   1404c:	ldrd	r4, [sp, #16]
   14050:	strd	r6, [sp, #48]	; 0x30
   14054:	ldrd	r6, [sp, #32]
   14058:	ldr	lr, [sp, #60]	; 0x3c
   1405c:	strd	r4, [sp, #64]	; 0x40
   14060:	ldrd	r4, [sp, #24]
   14064:	mvn	ip, lr
   14068:	and	ip, ip, #67108864	; 0x4000000
   1406c:	strd	r4, [sp, #72]	; 0x48
   14070:	eor	ip, ip, lr
   14074:	ldrd	r4, [sp, #40]	; 0x28
   14078:	str	ip, [sp, #60]	; 0x3c
   1407c:	strd	r6, [sp, #80]	; 0x50
   14080:	strd	r4, [sp, #88]	; 0x58
   14084:	bl	13928 <__assert_fail@plt+0x29a4>
   14088:	add	sp, sp, #100	; 0x64
   1408c:	ldrd	r4, [sp]
   14090:	ldrd	r6, [sp, #8]
   14094:	add	sp, sp, #16
   14098:	pop	{pc}		; (ldr pc, [sp], #4)
   1409c:	ldr	ip, [pc, #156]	; 14140 <__assert_fail@plt+0x31bc>
   140a0:	cmp	r2, #0
   140a4:	cmpne	r1, #0
   140a8:	strd	r4, [sp, #-32]!	; 0xffffffe0
   140ac:	strd	r6, [sp, #8]
   140b0:	mov	r6, r2
   140b4:	str	r8, [sp, #16]
   140b8:	mov	r8, r3
   140bc:	strd	sl, [sp, #20]
   140c0:	ldrd	r4, [ip]
   140c4:	str	lr, [sp, #28]
   140c8:	sub	sp, sp, #48	; 0x30
   140cc:	mov	lr, #10
   140d0:	ldrd	r2, [ip, #8]
   140d4:	ldrd	sl, [ip, #16]
   140d8:	strd	r4, [sp]
   140dc:	ldrd	r4, [ip, #32]
   140e0:	str	lr, [sp]
   140e4:	strd	r2, [sp, #8]
   140e8:	strd	sl, [sp, #16]
   140ec:	ldrd	r2, [ip, #24]
   140f0:	ldrd	sl, [ip, #40]	; 0x28
   140f4:	strd	r2, [sp, #24]
   140f8:	strd	r4, [sp, #32]
   140fc:	strd	sl, [sp, #40]	; 0x28
   14100:	beq	1413c <__assert_fail@plt+0x31b8>
   14104:	ldr	r2, [sp, #80]	; 0x50
   14108:	mov	r7, r1
   1410c:	mov	r3, sp
   14110:	mov	r1, r8
   14114:	str	r7, [sp, #40]	; 0x28
   14118:	str	r6, [sp, #44]	; 0x2c
   1411c:	bl	13928 <__assert_fail@plt+0x29a4>
   14120:	add	sp, sp, #48	; 0x30
   14124:	ldrd	r4, [sp]
   14128:	ldrd	r6, [sp, #8]
   1412c:	ldr	r8, [sp, #16]
   14130:	ldrd	sl, [sp, #20]
   14134:	add	sp, sp, #28
   14138:	pop	{pc}		; (ldr pc, [sp], #4)
   1413c:	bl	10f78 <abort@plt>
   14140:	muleq	r2, r4, r2
   14144:	mvn	ip, #0
   14148:	push	{lr}		; (str lr, [sp, #-4]!)
   1414c:	sub	sp, sp, #12
   14150:	str	ip, [sp]
   14154:	bl	1409c <__assert_fail@plt+0x3118>
   14158:	add	sp, sp, #12
   1415c:	pop	{pc}		; (ldr pc, [sp], #4)
   14160:	mvn	ip, #0
   14164:	push	{lr}		; (str lr, [sp, #-4]!)
   14168:	sub	sp, sp, #12
   1416c:	mov	r3, r2
   14170:	mov	r2, r1
   14174:	mov	r1, r0
   14178:	mov	r0, #0
   1417c:	str	ip, [sp]
   14180:	bl	1409c <__assert_fail@plt+0x3118>
   14184:	add	sp, sp, #12
   14188:	pop	{pc}		; (ldr pc, [sp], #4)
   1418c:	push	{lr}		; (str lr, [sp, #-4]!)
   14190:	sub	sp, sp, #12
   14194:	str	r3, [sp]
   14198:	mov	r3, r2
   1419c:	mov	r2, r1
   141a0:	mov	r1, r0
   141a4:	mov	r0, #0
   141a8:	bl	1409c <__assert_fail@plt+0x3118>
   141ac:	add	sp, sp, #12
   141b0:	pop	{pc}		; (ldr pc, [sp], #4)
   141b4:	ldr	r3, [pc]	; 141bc <__assert_fail@plt+0x3238>
   141b8:	b	13928 <__assert_fail@plt+0x29a4>
   141bc:	andeq	r7, r2, ip, lsl #2
   141c0:	mov	r2, r1
   141c4:	ldr	r3, [pc, #8]	; 141d4 <__assert_fail@plt+0x3250>
   141c8:	mov	r1, r0
   141cc:	mov	r0, #0
   141d0:	b	13928 <__assert_fail@plt+0x29a4>
   141d4:	andeq	r7, r2, ip, lsl #2
   141d8:	ldr	r3, [pc, #4]	; 141e4 <__assert_fail@plt+0x3260>
   141dc:	mvn	r2, #0
   141e0:	b	13928 <__assert_fail@plt+0x29a4>
   141e4:	andeq	r7, r2, ip, lsl #2
   141e8:	mov	r1, r0
   141ec:	ldr	r3, [pc, #8]	; 141fc <__assert_fail@plt+0x3278>
   141f0:	mvn	r2, #0
   141f4:	mov	r0, #0
   141f8:	b	13928 <__assert_fail@plt+0x29a4>
   141fc:	andeq	r7, r2, ip, lsl #2
   14200:	cmp	r1, #0
   14204:	strd	r4, [sp, #-16]!
   14208:	mov	ip, r3
   1420c:	str	r6, [sp, #8]
   14210:	mov	r4, r0
   14214:	str	lr, [sp, #12]
   14218:	sub	sp, sp, #32
   1421c:	ldr	r5, [sp, #48]	; 0x30
   14220:	ldr	r6, [sp, #52]	; 0x34
   14224:	beq	14368 <__assert_fail@plt+0x33e4>
   14228:	mov	r3, r1
   1422c:	mov	r1, #1
   14230:	stm	sp, {r2, ip}
   14234:	movw	r2, #27024	; 0x6990
   14238:	movt	r2, #1
   1423c:	bl	10ee8 <__fprintf_chk@plt>
   14240:	mov	r2, #5
   14244:	movw	r1, #27044	; 0x69a4
   14248:	movt	r1, #1
   1424c:	mov	r0, #0
   14250:	bl	10d8c <dcgettext@plt>
   14254:	movw	ip, #2022	; 0x7e6
   14258:	mov	r3, r0
   1425c:	mov	r1, #1
   14260:	movw	r2, #27772	; 0x6c7c
   14264:	movt	r2, #1
   14268:	mov	r0, r4
   1426c:	str	ip, [sp]
   14270:	bl	10ee8 <__fprintf_chk@plt>
   14274:	mov	r1, r4
   14278:	mov	r0, #10
   1427c:	bl	10d80 <fputc_unlocked@plt>
   14280:	mov	r2, #5
   14284:	movw	r1, #27048	; 0x69a8
   14288:	movt	r1, #1
   1428c:	mov	r0, #0
   14290:	bl	10d8c <dcgettext@plt>
   14294:	mov	r2, r0
   14298:	mov	r1, #1
   1429c:	movw	r3, #27220	; 0x6a54
   142a0:	movt	r3, #1
   142a4:	mov	r0, r4
   142a8:	bl	10ee8 <__fprintf_chk@plt>
   142ac:	mov	r1, r4
   142b0:	mov	r0, #10
   142b4:	bl	10d80 <fputc_unlocked@plt>
   142b8:	cmp	r6, #9
   142bc:	ldrls	pc, [pc, r6, lsl #2]
   142c0:	b	145d4 <__assert_fail@plt+0x3650>
   142c4:	andeq	r4, r1, r4, asr r3
   142c8:	andeq	r4, r1, r4, lsl #7
   142cc:	andeq	r4, r1, r0, asr #7
   142d0:	andeq	r4, r1, r0, lsl #8
   142d4:	andeq	r4, r1, r8, asr #8
   142d8:	andeq	r4, r1, r0, lsl #9
   142dc:	andeq	r4, r1, r8, asr #9
   142e0:	andeq	r4, r1, ip, lsl r5
   142e4:	andeq	r4, r1, r4, ror r5
   142e8:	andeq	r4, r1, ip, ror #5
   142ec:	movw	r1, #27524	; 0x6b84
   142f0:	movt	r1, #1
   142f4:	mov	r2, #5
   142f8:	mov	r0, #0
   142fc:	bl	10d8c <dcgettext@plt>
   14300:	ldr	lr, [r5, #4]
   14304:	mov	r2, r0
   14308:	mov	r1, #1
   1430c:	mov	r0, r4
   14310:	ldr	r3, [r5, #8]
   14314:	ldr	ip, [r5, #32]
   14318:	str	lr, [sp]
   1431c:	ldr	lr, [r5, #12]
   14320:	str	ip, [sp, #28]
   14324:	ldr	ip, [r5, #28]
   14328:	str	r3, [sp, #4]
   1432c:	ldr	r3, [r5, #16]
   14330:	str	lr, [sp, #8]
   14334:	ldr	lr, [r5, #20]
   14338:	str	ip, [sp, #24]
   1433c:	ldr	ip, [r5, #24]
   14340:	str	r3, [sp, #12]
   14344:	ldr	r3, [r5]
   14348:	str	lr, [sp, #16]
   1434c:	str	ip, [sp, #20]
   14350:	bl	10ee8 <__fprintf_chk@plt>
   14354:	add	sp, sp, #32
   14358:	ldrd	r4, [sp]
   1435c:	ldr	r6, [sp, #8]
   14360:	add	sp, sp, #12
   14364:	pop	{pc}		; (ldr pc, [sp], #4)
   14368:	mov	r3, r2
   1436c:	mov	r1, #1
   14370:	str	ip, [sp]
   14374:	movw	r2, #27036	; 0x699c
   14378:	movt	r2, #1
   1437c:	bl	10ee8 <__fprintf_chk@plt>
   14380:	b	14240 <__assert_fail@plt+0x32bc>
   14384:	mov	r2, #5
   14388:	movw	r1, #27256	; 0x6a78
   1438c:	movt	r1, #1
   14390:	mov	r0, #0
   14394:	bl	10d8c <dcgettext@plt>
   14398:	ldr	r3, [r5]
   1439c:	mov	r2, r0
   143a0:	mov	r1, #1
   143a4:	mov	r0, r4
   143a8:	add	sp, sp, #32
   143ac:	ldrd	r4, [sp]
   143b0:	ldr	r6, [sp, #8]
   143b4:	ldr	lr, [sp, #12]
   143b8:	add	sp, sp, #16
   143bc:	b	10ee8 <__fprintf_chk@plt>
   143c0:	mov	r2, #5
   143c4:	movw	r1, #27272	; 0x6a88
   143c8:	movt	r1, #1
   143cc:	mov	r0, #0
   143d0:	bl	10d8c <dcgettext@plt>
   143d4:	ldm	r5, {r3, ip}
   143d8:	mov	r2, r0
   143dc:	mov	r1, #1
   143e0:	mov	r0, r4
   143e4:	str	ip, [sp, #48]	; 0x30
   143e8:	add	sp, sp, #32
   143ec:	ldrd	r4, [sp]
   143f0:	ldr	r6, [sp, #8]
   143f4:	ldr	lr, [sp, #12]
   143f8:	add	sp, sp, #16
   143fc:	b	10ee8 <__fprintf_chk@plt>
   14400:	mov	r2, #5
   14404:	movw	r1, #27296	; 0x6aa0
   14408:	movt	r1, #1
   1440c:	mov	r0, #0
   14410:	bl	10d8c <dcgettext@plt>
   14414:	ldm	r5, {r3, lr}
   14418:	mov	r2, r0
   1441c:	mov	r1, #1
   14420:	mov	r0, r4
   14424:	ldr	ip, [r5, #8]
   14428:	str	lr, [sp, #48]	; 0x30
   1442c:	str	ip, [sp, #52]	; 0x34
   14430:	add	sp, sp, #32
   14434:	ldrd	r4, [sp]
   14438:	ldr	r6, [sp, #8]
   1443c:	ldr	lr, [sp, #12]
   14440:	add	sp, sp, #16
   14444:	b	10ee8 <__fprintf_chk@plt>
   14448:	mov	r2, #5
   1444c:	movw	r1, #27324	; 0x6abc
   14450:	movt	r1, #1
   14454:	mov	r0, #0
   14458:	bl	10d8c <dcgettext@plt>
   1445c:	ldmib	r5, {r3, ip, lr}
   14460:	mov	r2, r0
   14464:	mov	r1, #1
   14468:	mov	r0, r4
   1446c:	str	r3, [sp]
   14470:	ldr	r3, [r5]
   14474:	stmib	sp, {ip, lr}
   14478:	bl	10ee8 <__fprintf_chk@plt>
   1447c:	b	14354 <__assert_fail@plt+0x33d0>
   14480:	mov	r2, #5
   14484:	movw	r1, #27356	; 0x6adc
   14488:	movt	r1, #1
   1448c:	mov	r0, #0
   14490:	bl	10d8c <dcgettext@plt>
   14494:	ldmib	r5, {ip, lr}
   14498:	mov	r2, r0
   1449c:	mov	r1, #1
   144a0:	mov	r0, r4
   144a4:	ldr	r3, [r5, #16]
   144a8:	str	ip, [sp]
   144ac:	ldr	ip, [r5, #12]
   144b0:	str	r3, [sp, #12]
   144b4:	ldr	r3, [r5]
   144b8:	str	lr, [sp, #4]
   144bc:	str	ip, [sp, #8]
   144c0:	bl	10ee8 <__fprintf_chk@plt>
   144c4:	b	14354 <__assert_fail@plt+0x33d0>
   144c8:	mov	r2, #5
   144cc:	movw	r1, #27392	; 0x6b00
   144d0:	movt	r1, #1
   144d4:	mov	r0, #0
   144d8:	bl	10d8c <dcgettext@plt>
   144dc:	ldr	lr, [r5, #4]
   144e0:	mov	r2, r0
   144e4:	mov	r1, #1
   144e8:	mov	r0, r4
   144ec:	ldr	r3, [r5, #8]
   144f0:	ldr	ip, [r5, #20]
   144f4:	str	lr, [sp]
   144f8:	ldr	lr, [r5, #12]
   144fc:	str	ip, [sp, #16]
   14500:	ldr	ip, [r5, #16]
   14504:	str	r3, [sp, #4]
   14508:	ldr	r3, [r5]
   1450c:	str	lr, [sp, #8]
   14510:	str	ip, [sp, #12]
   14514:	bl	10ee8 <__fprintf_chk@plt>
   14518:	b	14354 <__assert_fail@plt+0x33d0>
   1451c:	mov	r2, #5
   14520:	movw	r1, #27432	; 0x6b28
   14524:	movt	r1, #1
   14528:	mov	r0, #0
   1452c:	bl	10d8c <dcgettext@plt>
   14530:	ldmib	r5, {r3, ip}
   14534:	mov	r2, r0
   14538:	mov	r1, #1
   1453c:	mov	r0, r4
   14540:	ldr	lr, [r5, #24]
   14544:	str	r3, [sp]
   14548:	ldr	r3, [r5, #12]
   1454c:	str	lr, [sp, #20]
   14550:	ldr	lr, [r5, #20]
   14554:	str	ip, [sp, #4]
   14558:	ldr	ip, [r5, #16]
   1455c:	str	r3, [sp, #8]
   14560:	ldr	r3, [r5]
   14564:	str	ip, [sp, #12]
   14568:	str	lr, [sp, #16]
   1456c:	bl	10ee8 <__fprintf_chk@plt>
   14570:	b	14354 <__assert_fail@plt+0x33d0>
   14574:	mov	r2, #5
   14578:	movw	r1, #27476	; 0x6b54
   1457c:	movt	r1, #1
   14580:	mov	r0, #0
   14584:	bl	10d8c <dcgettext@plt>
   14588:	ldmib	r5, {ip, lr}
   1458c:	mov	r2, r0
   14590:	mov	r1, #1
   14594:	mov	r0, r4
   14598:	ldr	r3, [r5, #28]
   1459c:	str	ip, [sp]
   145a0:	ldr	ip, [r5, #12]
   145a4:	str	r3, [sp, #24]
   145a8:	ldr	r3, [r5, #24]
   145ac:	str	lr, [sp, #4]
   145b0:	ldr	lr, [r5, #16]
   145b4:	str	ip, [sp, #8]
   145b8:	ldr	ip, [r5, #20]
   145bc:	str	r3, [sp, #20]
   145c0:	ldr	r3, [r5]
   145c4:	str	lr, [sp, #12]
   145c8:	str	ip, [sp, #16]
   145cc:	bl	10ee8 <__fprintf_chk@plt>
   145d0:	b	14354 <__assert_fail@plt+0x33d0>
   145d4:	movw	r1, #27576	; 0x6bb8
   145d8:	movt	r1, #1
   145dc:	b	142f4 <__assert_fail@plt+0x3370>
   145e0:	strd	r4, [sp, #-12]!
   145e4:	str	lr, [sp, #8]
   145e8:	sub	sp, sp, #12
   145ec:	ldr	r5, [sp, #24]
   145f0:	ldr	ip, [r5]
   145f4:	cmp	ip, #0
   145f8:	beq	14614 <__assert_fail@plt+0x3690>
   145fc:	mov	lr, r5
   14600:	mov	ip, #0
   14604:	ldr	r4, [lr, #4]!
   14608:	add	ip, ip, #1
   1460c:	cmp	r4, #0
   14610:	bne	14604 <__assert_fail@plt+0x3680>
   14614:	stm	sp, {r5, ip}
   14618:	bl	14200 <__assert_fail@plt+0x327c>
   1461c:	add	sp, sp, #12
   14620:	ldrd	r4, [sp]
   14624:	add	sp, sp, #8
   14628:	pop	{pc}		; (ldr pc, [sp], #4)
   1462c:	strd	r4, [sp, #-16]!
   14630:	mov	ip, #0
   14634:	str	r6, [sp, #8]
   14638:	str	lr, [sp, #12]
   1463c:	sub	sp, sp, #48	; 0x30
   14640:	ldr	r5, [sp, #64]	; 0x40
   14644:	add	r6, sp, #8
   14648:	mov	r4, r6
   1464c:	ldr	lr, [r5], #4
   14650:	cmp	lr, #0
   14654:	str	lr, [r4], #4
   14658:	beq	14668 <__assert_fail@plt+0x36e4>
   1465c:	add	ip, ip, #1
   14660:	cmp	ip, #10
   14664:	bne	1464c <__assert_fail@plt+0x36c8>
   14668:	stm	sp, {r6, ip}
   1466c:	bl	14200 <__assert_fail@plt+0x327c>
   14670:	add	sp, sp, #48	; 0x30
   14674:	ldrd	r4, [sp]
   14678:	ldr	r6, [sp, #8]
   1467c:	add	sp, sp, #12
   14680:	pop	{pc}		; (ldr pc, [sp], #4)
   14684:	push	{r3}		; (str r3, [sp, #-4]!)
   14688:	mov	ip, #0
   1468c:	strd	r4, [sp, #-12]!
   14690:	str	lr, [sp, #8]
   14694:	sub	sp, sp, #56	; 0x38
   14698:	add	r3, sp, #72	; 0x48
   1469c:	add	r5, sp, #16
   146a0:	mov	r4, r3
   146a4:	mov	lr, r5
   146a8:	str	r3, [sp, #12]
   146ac:	ldr	r3, [r4], #4
   146b0:	cmp	r3, #0
   146b4:	str	r3, [lr], #4
   146b8:	beq	146c8 <__assert_fail@plt+0x3744>
   146bc:	add	ip, ip, #1
   146c0:	cmp	ip, #10
   146c4:	bne	146ac <__assert_fail@plt+0x3728>
   146c8:	ldr	r3, [sp, #68]	; 0x44
   146cc:	stm	sp, {r5, ip}
   146d0:	bl	14200 <__assert_fail@plt+0x327c>
   146d4:	add	sp, sp, #56	; 0x38
   146d8:	ldrd	r4, [sp]
   146dc:	ldr	lr, [sp, #8]
   146e0:	add	sp, sp, #12
   146e4:	add	sp, sp, #4
   146e8:	bx	lr
   146ec:	movw	r3, #29012	; 0x7154
   146f0:	movt	r3, #2
   146f4:	str	r4, [sp, #-8]!
   146f8:	mov	r0, #10
   146fc:	ldr	r1, [r3]
   14700:	str	lr, [sp, #4]
   14704:	bl	10d80 <fputc_unlocked@plt>
   14708:	mov	r2, #5
   1470c:	movw	r1, #27636	; 0x6bf4
   14710:	movt	r1, #1
   14714:	mov	r0, #0
   14718:	bl	10d8c <dcgettext@plt>
   1471c:	mov	r1, r0
   14720:	movw	r2, #27656	; 0x6c08
   14724:	movt	r2, #1
   14728:	mov	r0, #1
   1472c:	bl	10ed0 <__printf_chk@plt>
   14730:	mov	r2, #5
   14734:	movw	r1, #27680	; 0x6c20
   14738:	movt	r1, #1
   1473c:	mov	r0, #0
   14740:	bl	10d8c <dcgettext@plt>
   14744:	mov	r1, r0
   14748:	movw	r3, #25828	; 0x64e4
   1474c:	movt	r3, #1
   14750:	movw	r2, #25868	; 0x650c
   14754:	movt	r2, #1
   14758:	mov	r0, #1
   1475c:	bl	10ed0 <__printf_chk@plt>
   14760:	mov	r2, #5
   14764:	movw	r1, #27700	; 0x6c34
   14768:	movt	r1, #1
   1476c:	mov	r0, #0
   14770:	bl	10d8c <dcgettext@plt>
   14774:	mov	r1, r0
   14778:	movw	r2, #27740	; 0x6c5c
   1477c:	movt	r2, #1
   14780:	mov	r0, #1
   14784:	ldr	r4, [sp]
   14788:	ldr	lr, [sp, #4]
   1478c:	add	sp, sp, #8
   14790:	b	10ed0 <__printf_chk@plt>
   14794:	str	r4, [sp, #-8]!
   14798:	str	lr, [sp, #4]
   1479c:	bl	156a4 <__assert_fail@plt+0x4720>
   147a0:	cmp	r0, #0
   147a4:	beq	147b4 <__assert_fail@plt+0x3830>
   147a8:	ldr	r4, [sp]
   147ac:	add	sp, sp, #4
   147b0:	pop	{pc}		; (ldr pc, [sp], #4)
   147b4:	bl	14c0c <__assert_fail@plt+0x3c88>
   147b8:	str	r4, [sp, #-8]!
   147bc:	str	lr, [sp, #4]
   147c0:	bl	156a4 <__assert_fail@plt+0x4720>
   147c4:	cmp	r0, #0
   147c8:	beq	147d8 <__assert_fail@plt+0x3854>
   147cc:	ldr	r4, [sp]
   147d0:	add	sp, sp, #4
   147d4:	pop	{pc}		; (ldr pc, [sp], #4)
   147d8:	bl	14c0c <__assert_fail@plt+0x3c88>
   147dc:	str	r4, [sp, #-8]!
   147e0:	str	lr, [sp, #4]
   147e4:	bl	156a4 <__assert_fail@plt+0x4720>
   147e8:	cmp	r0, #0
   147ec:	beq	147fc <__assert_fail@plt+0x3878>
   147f0:	ldr	r4, [sp]
   147f4:	add	sp, sp, #4
   147f8:	pop	{pc}		; (ldr pc, [sp], #4)
   147fc:	bl	14c0c <__assert_fail@plt+0x3c88>
   14800:	strd	r4, [sp, #-16]!
   14804:	mov	r5, r0
   14808:	mov	r4, r1
   1480c:	str	r6, [sp, #8]
   14810:	str	lr, [sp, #12]
   14814:	bl	156e0 <__assert_fail@plt+0x475c>
   14818:	cmp	r0, #0
   1481c:	beq	14830 <__assert_fail@plt+0x38ac>
   14820:	ldrd	r4, [sp]
   14824:	ldr	r6, [sp, #8]
   14828:	add	sp, sp, #12
   1482c:	pop	{pc}		; (ldr pc, [sp], #4)
   14830:	adds	r4, r4, #0
   14834:	movne	r4, #1
   14838:	cmp	r5, #0
   1483c:	moveq	r4, #1
   14840:	cmp	r4, #0
   14844:	beq	14820 <__assert_fail@plt+0x389c>
   14848:	bl	14c0c <__assert_fail@plt+0x3c88>
   1484c:	cmp	r1, #0
   14850:	orreq	r1, r1, #1
   14854:	str	r4, [sp, #-8]!
   14858:	str	lr, [sp, #4]
   1485c:	bl	156e0 <__assert_fail@plt+0x475c>
   14860:	cmp	r0, #0
   14864:	beq	14874 <__assert_fail@plt+0x38f0>
   14868:	ldr	r4, [sp]
   1486c:	add	sp, sp, #4
   14870:	pop	{pc}		; (ldr pc, [sp], #4)
   14874:	bl	14c0c <__assert_fail@plt+0x3c88>
   14878:	strd	r4, [sp, #-16]!
   1487c:	mov	r4, r0
   14880:	mov	r5, r2
   14884:	str	r6, [sp, #8]
   14888:	mov	r6, r1
   1488c:	str	lr, [sp, #12]
   14890:	bl	15d28 <__assert_fail@plt+0x4da4>
   14894:	cmp	r0, #0
   14898:	beq	148ac <__assert_fail@plt+0x3928>
   1489c:	ldrd	r4, [sp]
   148a0:	ldr	r6, [sp, #8]
   148a4:	add	sp, sp, #12
   148a8:	pop	{pc}		; (ldr pc, [sp], #4)
   148ac:	cmp	r4, #0
   148b0:	beq	148c0 <__assert_fail@plt+0x393c>
   148b4:	cmp	r6, #0
   148b8:	cmpne	r5, #0
   148bc:	beq	1489c <__assert_fail@plt+0x3918>
   148c0:	bl	14c0c <__assert_fail@plt+0x3c88>
   148c4:	b	14878 <__assert_fail@plt+0x38f4>
   148c8:	cmp	r2, #0
   148cc:	cmpne	r1, #0
   148d0:	str	r4, [sp, #-8]!
   148d4:	moveq	r2, #1
   148d8:	str	lr, [sp, #4]
   148dc:	moveq	r1, r2
   148e0:	bl	15d28 <__assert_fail@plt+0x4da4>
   148e4:	cmp	r0, #0
   148e8:	beq	148f8 <__assert_fail@plt+0x3974>
   148ec:	ldr	r4, [sp]
   148f0:	add	sp, sp, #4
   148f4:	pop	{pc}		; (ldr pc, [sp], #4)
   148f8:	bl	14c0c <__assert_fail@plt+0x3c88>
   148fc:	mov	r2, r1
   14900:	mov	r1, r0
   14904:	mov	r0, #0
   14908:	b	14878 <__assert_fail@plt+0x38f4>
   1490c:	mov	r2, r1
   14910:	mov	r1, r0
   14914:	mov	r0, #0
   14918:	b	148c8 <__assert_fail@plt+0x3944>
   1491c:	cmp	r0, #0
   14920:	strd	r4, [sp, #-16]!
   14924:	mov	r5, r1
   14928:	ldr	r4, [r1]
   1492c:	str	r6, [sp, #8]
   14930:	str	lr, [sp, #12]
   14934:	beq	14964 <__assert_fail@plt+0x39e0>
   14938:	lsr	r3, r4, #1
   1493c:	add	r3, r3, #1
   14940:	adds	r4, r4, r3
   14944:	bcs	14980 <__assert_fail@plt+0x39fc>
   14948:	mov	r1, r4
   1494c:	bl	14878 <__assert_fail@plt+0x38f4>
   14950:	ldr	r6, [sp, #8]
   14954:	str	r4, [r5]
   14958:	ldrd	r4, [sp]
   1495c:	add	sp, sp, #12
   14960:	pop	{pc}		; (ldr pc, [sp], #4)
   14964:	cmp	r4, #0
   14968:	bne	14948 <__assert_fail@plt+0x39c4>
   1496c:	mov	r4, #64	; 0x40
   14970:	udiv	r4, r4, r2
   14974:	cmp	r2, #64	; 0x40
   14978:	addhi	r4, r4, #1
   1497c:	b	14948 <__assert_fail@plt+0x39c4>
   14980:	bl	14c0c <__assert_fail@plt+0x3c88>
   14984:	mov	r2, #1
   14988:	b	1491c <__assert_fail@plt+0x3998>
   1498c:	ldr	ip, [r1]
   14990:	strd	r4, [sp, #-32]!	; 0xffffffe0
   14994:	mov	r5, r1
   14998:	strd	r6, [sp, #8]
   1499c:	str	lr, [sp, #28]
   149a0:	strd	r8, [sp, #16]
   149a4:	asr	lr, ip, #1
   149a8:	ldr	r8, [sp, #32]
   149ac:	str	sl, [sp, #24]
   149b0:	adds	r4, ip, lr
   149b4:	mvn	lr, r3
   149b8:	lsr	lr, lr, #31
   149bc:	mvnvs	r4, #-2147483648	; 0x80000000
   149c0:	cmp	r3, r4
   149c4:	movge	r1, #0
   149c8:	andlt	r1, lr, #1
   149cc:	cmp	r1, #0
   149d0:	movne	r4, r3
   149d4:	smull	r6, r7, r4, r8
   149d8:	cmp	r7, r6, asr #31
   149dc:	bne	14a64 <__assert_fail@plt+0x3ae0>
   149e0:	cmp	r6, #63	; 0x3f
   149e4:	mov	r1, r6
   149e8:	ble	14a4c <__assert_fail@plt+0x3ac8>
   149ec:	cmp	r0, #0
   149f0:	sub	r6, r4, ip
   149f4:	streq	r0, [r5]
   149f8:	cmp	r6, r2
   149fc:	bge	14a2c <__assert_fail@plt+0x3aa8>
   14a00:	adds	r4, ip, r2
   14a04:	bvs	14a60 <__assert_fail@plt+0x3adc>
   14a08:	cmp	r4, r3
   14a0c:	movle	r3, #0
   14a10:	andgt	r3, lr, #1
   14a14:	cmp	r3, #0
   14a18:	bne	14a60 <__assert_fail@plt+0x3adc>
   14a1c:	smull	r8, r9, r4, r8
   14a20:	cmp	r9, r8, asr #31
   14a24:	mov	r1, r8
   14a28:	bne	14a60 <__assert_fail@plt+0x3adc>
   14a2c:	bl	14800 <__assert_fail@plt+0x387c>
   14a30:	ldrd	r6, [sp, #8]
   14a34:	ldrd	r8, [sp, #16]
   14a38:	ldr	sl, [sp, #24]
   14a3c:	str	r4, [r5]
   14a40:	ldrd	r4, [sp]
   14a44:	add	sp, sp, #28
   14a48:	pop	{pc}		; (ldr pc, [sp], #4)
   14a4c:	mov	r6, #64	; 0x40
   14a50:	sdiv	r4, r6, r8
   14a54:	mls	r1, r8, r4, r6
   14a58:	sub	r1, r6, r1
   14a5c:	b	149ec <__assert_fail@plt+0x3a68>
   14a60:	bl	14c0c <__assert_fail@plt+0x3c88>
   14a64:	mvn	r6, #-2147483648	; 0x80000000
   14a68:	b	14a50 <__assert_fail@plt+0x3acc>
   14a6c:	mov	r1, #1
   14a70:	str	r4, [sp, #-8]!
   14a74:	str	lr, [sp, #4]
   14a78:	bl	15630 <__assert_fail@plt+0x46ac>
   14a7c:	cmp	r0, #0
   14a80:	beq	14a90 <__assert_fail@plt+0x3b0c>
   14a84:	ldr	r4, [sp]
   14a88:	add	sp, sp, #4
   14a8c:	pop	{pc}		; (ldr pc, [sp], #4)
   14a90:	bl	14c0c <__assert_fail@plt+0x3c88>
   14a94:	mov	r1, #1
   14a98:	str	r4, [sp, #-8]!
   14a9c:	str	lr, [sp, #4]
   14aa0:	bl	15630 <__assert_fail@plt+0x46ac>
   14aa4:	cmp	r0, #0
   14aa8:	beq	14ab8 <__assert_fail@plt+0x3b34>
   14aac:	ldr	r4, [sp]
   14ab0:	add	sp, sp, #4
   14ab4:	pop	{pc}		; (ldr pc, [sp], #4)
   14ab8:	bl	14c0c <__assert_fail@plt+0x3c88>
   14abc:	str	r4, [sp, #-8]!
   14ac0:	str	lr, [sp, #4]
   14ac4:	bl	15630 <__assert_fail@plt+0x46ac>
   14ac8:	cmp	r0, #0
   14acc:	beq	14adc <__assert_fail@plt+0x3b58>
   14ad0:	ldr	r4, [sp]
   14ad4:	add	sp, sp, #4
   14ad8:	pop	{pc}		; (ldr pc, [sp], #4)
   14adc:	bl	14c0c <__assert_fail@plt+0x3c88>
   14ae0:	str	r4, [sp, #-8]!
   14ae4:	str	lr, [sp, #4]
   14ae8:	bl	15630 <__assert_fail@plt+0x46ac>
   14aec:	cmp	r0, #0
   14af0:	beq	14b00 <__assert_fail@plt+0x3b7c>
   14af4:	ldr	r4, [sp]
   14af8:	add	sp, sp, #4
   14afc:	pop	{pc}		; (ldr pc, [sp], #4)
   14b00:	bl	14c0c <__assert_fail@plt+0x3c88>
   14b04:	strd	r4, [sp, #-16]!
   14b08:	mov	r4, r1
   14b0c:	str	r6, [sp, #8]
   14b10:	mov	r6, r0
   14b14:	mov	r0, r1
   14b18:	str	lr, [sp, #12]
   14b1c:	bl	156a4 <__assert_fail@plt+0x4720>
   14b20:	subs	r5, r0, #0
   14b24:	beq	14b48 <__assert_fail@plt+0x3bc4>
   14b28:	mov	r2, r4
   14b2c:	mov	r1, r6
   14b30:	bl	10d44 <memcpy@plt>
   14b34:	mov	r0, r5
   14b38:	ldrd	r4, [sp]
   14b3c:	ldr	r6, [sp, #8]
   14b40:	add	sp, sp, #12
   14b44:	pop	{pc}		; (ldr pc, [sp], #4)
   14b48:	bl	14c0c <__assert_fail@plt+0x3c88>
   14b4c:	strd	r4, [sp, #-16]!
   14b50:	mov	r4, r1
   14b54:	str	r6, [sp, #8]
   14b58:	mov	r6, r0
   14b5c:	mov	r0, r1
   14b60:	str	lr, [sp, #12]
   14b64:	bl	156a4 <__assert_fail@plt+0x4720>
   14b68:	subs	r5, r0, #0
   14b6c:	beq	14b90 <__assert_fail@plt+0x3c0c>
   14b70:	mov	r2, r4
   14b74:	mov	r1, r6
   14b78:	bl	10d44 <memcpy@plt>
   14b7c:	mov	r0, r5
   14b80:	ldrd	r4, [sp]
   14b84:	ldr	r6, [sp, #8]
   14b88:	add	sp, sp, #12
   14b8c:	pop	{pc}		; (ldr pc, [sp], #4)
   14b90:	bl	14c0c <__assert_fail@plt+0x3c88>
   14b94:	strd	r4, [sp, #-16]!
   14b98:	mov	r4, r1
   14b9c:	str	r6, [sp, #8]
   14ba0:	mov	r6, r0
   14ba4:	add	r0, r1, #1
   14ba8:	str	lr, [sp, #12]
   14bac:	bl	156a4 <__assert_fail@plt+0x4720>
   14bb0:	subs	r5, r0, #0
   14bb4:	beq	14be0 <__assert_fail@plt+0x3c5c>
   14bb8:	mov	r3, #0
   14bbc:	mov	r1, r6
   14bc0:	mov	r2, r4
   14bc4:	strb	r3, [r5, r4]
   14bc8:	bl	10d44 <memcpy@plt>
   14bcc:	mov	r0, r5
   14bd0:	ldrd	r4, [sp]
   14bd4:	ldr	r6, [sp, #8]
   14bd8:	add	sp, sp, #12
   14bdc:	pop	{pc}		; (ldr pc, [sp], #4)
   14be0:	bl	14c0c <__assert_fail@plt+0x3c88>
   14be4:	str	r4, [sp, #-8]!
   14be8:	mov	r4, r0
   14bec:	str	lr, [sp, #4]
   14bf0:	bl	10e94 <strlen@plt>
   14bf4:	add	r1, r0, #1
   14bf8:	mov	r0, r4
   14bfc:	ldr	r4, [sp]
   14c00:	ldr	lr, [sp, #4]
   14c04:	add	sp, sp, #8
   14c08:	b	14b04 <__assert_fail@plt+0x3b80>
   14c0c:	movw	r3, #28920	; 0x70f8
   14c10:	movt	r3, #2
   14c14:	str	r4, [sp, #-8]!
   14c18:	ldr	r4, [r3]
   14c1c:	mov	r2, #5
   14c20:	movw	r1, #27820	; 0x6cac
   14c24:	movt	r1, #1
   14c28:	mov	r0, #0
   14c2c:	str	lr, [sp, #4]
   14c30:	bl	10d8c <dcgettext@plt>
   14c34:	mov	r3, r0
   14c38:	movw	r2, #26740	; 0x6874
   14c3c:	movt	r2, #1
   14c40:	mov	r1, #0
   14c44:	mov	r0, r4
   14c48:	bl	10e04 <error@plt>
   14c4c:	bl	10f78 <abort@plt>
   14c50:	str	r4, [sp, #-8]!
   14c54:	str	lr, [sp, #4]
   14c58:	bl	1575c <__assert_fail@plt+0x47d8>
   14c5c:	subs	r4, r0, #0
   14c60:	beq	14c74 <__assert_fail@plt+0x3cf0>
   14c64:	mov	r0, r4
   14c68:	ldr	r4, [sp]
   14c6c:	add	sp, sp, #4
   14c70:	pop	{pc}		; (ldr pc, [sp], #4)
   14c74:	bl	10eac <__errno_location@plt>
   14c78:	ldr	r3, [r0]
   14c7c:	cmp	r3, #12
   14c80:	bne	14c64 <__assert_fail@plt+0x3ce0>
   14c84:	bl	14c0c <__assert_fail@plt+0x3c88>
   14c88:	cmp	r2, #36	; 0x24
   14c8c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   14c90:	strd	r6, [sp, #8]
   14c94:	strd	r8, [sp, #16]
   14c98:	strd	sl, [sp, #24]
   14c9c:	str	lr, [sp, #32]
   14ca0:	sub	sp, sp, #36	; 0x24
   14ca4:	bhi	15534 <__assert_fail@plt+0x45b0>
   14ca8:	cmp	r1, #0
   14cac:	mov	r8, r2
   14cb0:	mov	r6, r0
   14cb4:	mov	r5, r1
   14cb8:	mov	sl, r3
   14cbc:	addeq	r5, sp, #28
   14cc0:	bl	10eac <__errno_location@plt>
   14cc4:	mov	r3, #0
   14cc8:	mov	r7, r0
   14ccc:	str	r3, [r0]
   14cd0:	bl	10e7c <__ctype_b_loc@plt>
   14cd4:	ldrb	r3, [r6]
   14cd8:	mov	r2, r6
   14cdc:	ldr	r0, [r0]
   14ce0:	b	14ce8 <__assert_fail@plt+0x3d64>
   14ce4:	ldrb	r3, [r2, #1]!
   14ce8:	lsl	r1, r3, #1
   14cec:	ldrh	r4, [r0, r1]
   14cf0:	ands	r4, r4, #8192	; 0x2000
   14cf4:	bne	14ce4 <__assert_fail@plt+0x3d60>
   14cf8:	cmp	r3, #45	; 0x2d
   14cfc:	beq	14d9c <__assert_fail@plt+0x3e18>
   14d00:	mov	r2, r8
   14d04:	mov	r3, r4
   14d08:	mov	r1, r5
   14d0c:	mov	r0, r6
   14d10:	bl	10d5c <__strtoull_internal@plt>
   14d14:	ldr	fp, [r5]
   14d18:	mov	r9, r0
   14d1c:	mov	r8, r1
   14d20:	cmp	fp, r6
   14d24:	beq	14d84 <__assert_fail@plt+0x3e00>
   14d28:	ldr	r4, [r7]
   14d2c:	cmp	r4, #0
   14d30:	bne	14d74 <__assert_fail@plt+0x3df0>
   14d34:	ldr	r3, [sp, #72]	; 0x48
   14d38:	cmp	r3, #0
   14d3c:	beq	14d4c <__assert_fail@plt+0x3dc8>
   14d40:	ldrb	r6, [fp]
   14d44:	cmp	r6, #0
   14d48:	bne	1508c <__assert_fail@plt+0x4108>
   14d4c:	str	r9, [sl]
   14d50:	str	r8, [sl, #4]
   14d54:	mov	r0, r4
   14d58:	add	sp, sp, #36	; 0x24
   14d5c:	ldrd	r4, [sp]
   14d60:	ldrd	r6, [sp, #8]
   14d64:	ldrd	r8, [sp, #16]
   14d68:	ldrd	sl, [sp, #24]
   14d6c:	add	sp, sp, #32
   14d70:	pop	{pc}		; (ldr pc, [sp], #4)
   14d74:	cmp	r4, #34	; 0x22
   14d78:	bne	14d9c <__assert_fail@plt+0x3e18>
   14d7c:	mov	r4, #1
   14d80:	b	14d34 <__assert_fail@plt+0x3db0>
   14d84:	ldr	r3, [sp, #72]	; 0x48
   14d88:	cmp	r3, #0
   14d8c:	beq	14d9c <__assert_fail@plt+0x3e18>
   14d90:	ldrb	r6, [r6]
   14d94:	cmp	r6, #0
   14d98:	bne	14da4 <__assert_fail@plt+0x3e20>
   14d9c:	mov	r4, #4
   14da0:	b	14d54 <__assert_fail@plt+0x3dd0>
   14da4:	mov	r1, r6
   14da8:	mov	r0, r3
   14dac:	bl	10ea0 <strchr@plt>
   14db0:	cmp	r0, #0
   14db4:	movne	r9, #1
   14db8:	movne	r8, #0
   14dbc:	beq	14d9c <__assert_fail@plt+0x3e18>
   14dc0:	sub	r3, r6, #69	; 0x45
   14dc4:	cmp	r3, #47	; 0x2f
   14dc8:	ldrls	pc, [pc, r3, lsl #2]
   14dcc:	b	14ed4 <__assert_fail@plt+0x3f50>
   14dd0:	muleq	r1, r0, lr
   14dd4:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14dd8:	muleq	r1, r0, lr
   14ddc:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14de0:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14de4:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14de8:	muleq	r1, r0, lr
   14dec:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14df0:	muleq	r1, r0, lr
   14df4:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14df8:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14dfc:	muleq	r1, r0, lr
   14e00:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14e04:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14e08:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14e0c:	muleq	r1, r0, lr
   14e10:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14e14:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14e18:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14e1c:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14e20:	muleq	r1, r0, lr
   14e24:	muleq	r1, r0, lr
   14e28:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14e2c:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14e30:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14e34:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14e38:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14e3c:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14e40:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14e44:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14e48:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14e4c:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14e50:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14e54:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14e58:	muleq	r1, r0, lr
   14e5c:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14e60:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14e64:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14e68:	muleq	r1, r0, lr
   14e6c:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14e70:	muleq	r1, r0, lr
   14e74:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14e78:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14e7c:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14e80:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14e84:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14e88:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14e8c:	muleq	r1, r0, lr
   14e90:	mov	r1, #48	; 0x30
   14e94:	ldr	r0, [sp, #72]	; 0x48
   14e98:	bl	10ea0 <strchr@plt>
   14e9c:	cmp	r0, #0
   14ea0:	beq	14ed4 <__assert_fail@plt+0x3f50>
   14ea4:	ldrb	r3, [fp, #1]
   14ea8:	cmp	r3, #68	; 0x44
   14eac:	beq	15400 <__assert_fail@plt+0x447c>
   14eb0:	cmp	r3, #105	; 0x69
   14eb4:	beq	150a4 <__assert_fail@plt+0x4120>
   14eb8:	cmp	r3, #66	; 0x42
   14ebc:	moveq	r3, #2
   14ec0:	movne	r3, #1
   14ec4:	moveq	r7, #1000	; 0x3e8
   14ec8:	movne	r7, #1024	; 0x400
   14ecc:	str	r3, [sp, #4]
   14ed0:	b	14ee0 <__assert_fail@plt+0x3f5c>
   14ed4:	mov	r3, #1
   14ed8:	mov	r7, #1024	; 0x400
   14edc:	str	r3, [sp, #4]
   14ee0:	sub	r6, r6, #66	; 0x42
   14ee4:	cmp	r6, #53	; 0x35
   14ee8:	ldrls	pc, [pc, r6, lsl #2]
   14eec:	b	15050 <__assert_fail@plt+0x40cc>
   14ef0:	andeq	r5, r1, r8, lsr #7
   14ef4:	andeq	r5, r1, r0, asr r0
   14ef8:	andeq	r5, r1, r0, asr r0
   14efc:			; <UNDEFINED> instruction: 0x000151b4
   14f00:	andeq	r5, r1, r0, asr r0
   14f04:	andeq	r4, r1, r8, asr #31
   14f08:	andeq	r5, r1, r0, asr r0
   14f0c:	andeq	r5, r1, r0, asr r0
   14f10:	andeq	r5, r1, r0, asr r0
   14f14:	andeq	r5, r1, r8, asr r0
   14f18:	andeq	r5, r1, r0, asr r0
   14f1c:	andeq	r5, r1, r4, asr r3
   14f20:	andeq	r5, r1, r0, asr r0
   14f24:	andeq	r5, r1, r0, asr r0
   14f28:	andeq	r5, r1, r4, lsr #5
   14f2c:	andeq	r5, r1, r0, asr r0
   14f30:	andeq	r5, r1, r0, asr r0
   14f34:	andeq	r5, r1, r0, asr r0
   14f38:	andeq	r5, r1, ip, lsr #4
   14f3c:	andeq	r5, r1, r0, asr r0
   14f40:	andeq	r5, r1, r0, asr r0
   14f44:	andeq	r5, r1, r0, asr r0
   14f48:	andeq	r5, r1, r0, asr r0
   14f4c:	andeq	r5, r1, ip, lsr r1
   14f50:	andeq	r5, r1, r0, asr #1
   14f54:	andeq	r5, r1, r0, asr r0
   14f58:	andeq	r5, r1, r0, asr r0
   14f5c:	andeq	r5, r1, r0, asr r0
   14f60:	andeq	r5, r1, r0, asr r0
   14f64:	andeq	r5, r1, r0, asr r0
   14f68:	andeq	r5, r1, r0, asr r0
   14f6c:	andeq	r5, r1, r0, asr r0
   14f70:	andeq	r5, r1, r4, lsr r3
   14f74:	andeq	r5, r1, r8, lsr r0
   14f78:	andeq	r5, r1, r0, asr r0
   14f7c:	andeq	r5, r1, r0, asr r0
   14f80:	andeq	r5, r1, r0, asr r0
   14f84:	andeq	r4, r1, r8, asr #31
   14f88:	andeq	r5, r1, r0, asr r0
   14f8c:	andeq	r5, r1, r0, asr r0
   14f90:	andeq	r5, r1, r0, asr r0
   14f94:	andeq	r5, r1, r8, asr r0
   14f98:	andeq	r5, r1, r0, asr r0
   14f9c:	andeq	r5, r1, r4, asr r3
   14fa0:	andeq	r5, r1, r0, asr r0
   14fa4:	andeq	r5, r1, r0, asr r0
   14fa8:	andeq	r5, r1, r0, asr r0
   14fac:	andeq	r5, r1, r0, asr r0
   14fb0:	andeq	r5, r1, r0, asr r0
   14fb4:	andeq	r5, r1, r0, asr r0
   14fb8:	andeq	r5, r1, ip, lsr #4
   14fbc:	andeq	r5, r1, r0, asr r0
   14fc0:	andeq	r5, r1, r0, asr r0
   14fc4:	andeq	r5, r1, ip, lsl r3
   14fc8:	asr	r3, r7, #31
   14fcc:	mov	r2, r7
   14fd0:	cmp	r8, #0
   14fd4:	umull	r0, r1, r9, r7
   14fd8:	mov	ip, #0
   14fdc:	strd	r2, [sp, #8]
   14fe0:	bne	15434 <__assert_fail@plt+0x44b0>
   14fe4:	mov	r2, r0
   14fe8:	mov	r3, r1
   14fec:	cmp	ip, #0
   14ff0:	bne	1507c <__assert_fail@plt+0x40f8>
   14ff4:	cmp	r3, #0
   14ff8:	mov	lr, ip
   14ffc:	bne	15498 <__assert_fail@plt+0x4514>
   15000:	umull	r2, r3, r2, r7
   15004:	mov	ip, r2
   15008:	mov	r1, r3
   1500c:	subs	r0, lr, #0
   15010:	bne	1507c <__assert_fail@plt+0x40f8>
   15014:	cmp	r1, #0
   15018:	bne	15478 <__assert_fail@plt+0x44f4>
   1501c:	umull	r2, r3, ip, r7
   15020:	mov	r6, r2
   15024:	mov	r2, r3
   15028:	cmp	r0, #0
   1502c:	mov	r9, r6
   15030:	mov	r8, r2
   15034:	bne	1507c <__assert_fail@plt+0x40f8>
   15038:	ldr	r2, [sp, #4]
   1503c:	add	r3, fp, r2
   15040:	str	r3, [r5]
   15044:	ldrb	r3, [fp, r2]
   15048:	cmp	r3, #0
   1504c:	beq	14d4c <__assert_fail@plt+0x3dc8>
   15050:	orr	r4, r4, #2
   15054:	b	14d4c <__assert_fail@plt+0x3dc8>
   15058:	cmp	r8, #0
   1505c:	umull	r2, r3, r9, r7
   15060:	mov	ip, #0
   15064:	asr	r1, r7, #31
   15068:	bne	153d0 <__assert_fail@plt+0x444c>
   1506c:	mov	r9, r2
   15070:	mov	r8, r3
   15074:	cmp	ip, #0
   15078:	beq	15038 <__assert_fail@plt+0x40b4>
   1507c:	mvn	r9, #0
   15080:	mov	r4, #1
   15084:	mov	r8, r9
   15088:	b	15038 <__assert_fail@plt+0x40b4>
   1508c:	mov	r1, r6
   15090:	ldr	r0, [sp, #72]	; 0x48
   15094:	bl	10ea0 <strchr@plt>
   15098:	cmp	r0, #0
   1509c:	bne	14dc0 <__assert_fail@plt+0x3e3c>
   150a0:	b	15050 <__assert_fail@plt+0x40cc>
   150a4:	ldrb	r3, [fp, #2]
   150a8:	mov	r7, #1024	; 0x400
   150ac:	cmp	r3, #66	; 0x42
   150b0:	movne	r3, #1
   150b4:	moveq	r3, #3
   150b8:	str	r3, [sp, #4]
   150bc:	b	14ee0 <__assert_fail@plt+0x3f5c>
   150c0:	asr	r3, r7, #31
   150c4:	mov	r2, r7
   150c8:	mov	ip, #0
   150cc:	mov	r0, #7
   150d0:	mov	lr, ip
   150d4:	mov	r6, r4
   150d8:	strd	r2, [sp, #8]
   150dc:	str	r5, [sp, #16]
   150e0:	b	1510c <__assert_fail@plt+0x4188>
   150e4:	umull	r2, r3, r9, r7
   150e8:	mov	r9, r2
   150ec:	mov	r8, r3
   150f0:	cmp	r1, #0
   150f4:	beq	15104 <__assert_fail@plt+0x4180>
   150f8:	mvn	r9, #0
   150fc:	mov	ip, #1
   15100:	mov	r8, r9
   15104:	subs	r0, r0, #1
   15108:	beq	153f4 <__assert_fail@plt+0x4470>
   1510c:	cmp	r8, #0
   15110:	mov	r1, #0
   15114:	beq	150e4 <__assert_fail@plt+0x4160>
   15118:	umull	r4, r5, r9, r7
   1511c:	mov	r3, lr
   15120:	mov	r2, r5
   15124:	umlal	r2, r3, r8, r7
   15128:	cmp	r3, #0
   1512c:	bne	15554 <__assert_fail@plt+0x45d0>
   15130:	mov	r9, r4
   15134:	mov	r8, r2
   15138:	b	150f0 <__assert_fail@plt+0x416c>
   1513c:	asr	r3, r7, #31
   15140:	mov	r2, r7
   15144:	mov	r6, #0
   15148:	mov	lr, #8
   1514c:	mov	r0, r4
   15150:	mov	ip, r5
   15154:	strd	r2, [sp, #8]
   15158:	b	15184 <__assert_fail@plt+0x4200>
   1515c:	umull	r2, r3, r9, r7
   15160:	mov	r9, r2
   15164:	mov	r8, r3
   15168:	cmp	r1, #0
   1516c:	beq	1517c <__assert_fail@plt+0x41f8>
   15170:	mvn	r9, #0
   15174:	mov	r6, #1
   15178:	mov	r8, r9
   1517c:	subs	lr, lr, #1
   15180:	beq	153c4 <__assert_fail@plt+0x4440>
   15184:	cmp	r8, #0
   15188:	mov	r1, #0
   1518c:	beq	1515c <__assert_fail@plt+0x41d8>
   15190:	umull	r4, r5, r9, r7
   15194:	mov	r3, #0
   15198:	mov	r2, r5
   1519c:	umlal	r2, r3, r8, r7
   151a0:	cmp	r3, #0
   151a4:	bne	155ac <__assert_fail@plt+0x4628>
   151a8:	mov	r9, r4
   151ac:	mov	r8, r2
   151b0:	b	15168 <__assert_fail@plt+0x41e4>
   151b4:	asr	r3, r7, #31
   151b8:	mov	r2, r7
   151bc:	mov	r6, #0
   151c0:	mov	lr, #6
   151c4:	mov	r0, r4
   151c8:	mov	ip, r5
   151cc:	strd	r2, [sp, #8]
   151d0:	b	151fc <__assert_fail@plt+0x4278>
   151d4:	umull	r2, r3, r9, r7
   151d8:	mov	r9, r2
   151dc:	mov	r8, r3
   151e0:	cmp	r1, #0
   151e4:	beq	151f4 <__assert_fail@plt+0x4270>
   151e8:	mvn	r9, #0
   151ec:	mov	r6, #1
   151f0:	mov	r8, r9
   151f4:	subs	lr, lr, #1
   151f8:	beq	153c4 <__assert_fail@plt+0x4440>
   151fc:	cmp	r8, #0
   15200:	mov	r1, #0
   15204:	beq	151d4 <__assert_fail@plt+0x4250>
   15208:	umull	r4, r5, r9, r7
   1520c:	mov	r3, #0
   15210:	mov	r2, r5
   15214:	umlal	r2, r3, r8, r7
   15218:	cmp	r3, #0
   1521c:	bne	15574 <__assert_fail@plt+0x45f0>
   15220:	mov	r9, r4
   15224:	mov	r8, r2
   15228:	b	151e0 <__assert_fail@plt+0x425c>
   1522c:	asr	r3, r7, #31
   15230:	mov	r2, r7
   15234:	mov	r6, #0
   15238:	mov	lr, #4
   1523c:	mov	r0, r4
   15240:	mov	ip, r5
   15244:	strd	r2, [sp, #8]
   15248:	b	15274 <__assert_fail@plt+0x42f0>
   1524c:	umull	r2, r3, r9, r7
   15250:	mov	r9, r2
   15254:	mov	r8, r3
   15258:	cmp	r1, #0
   1525c:	beq	1526c <__assert_fail@plt+0x42e8>
   15260:	mvn	r9, #0
   15264:	mov	r6, #1
   15268:	mov	r8, r9
   1526c:	subs	lr, lr, #1
   15270:	beq	153c4 <__assert_fail@plt+0x4440>
   15274:	cmp	r8, #0
   15278:	mov	r1, #0
   1527c:	beq	1524c <__assert_fail@plt+0x42c8>
   15280:	umull	r4, r5, r9, r7
   15284:	mov	r3, #0
   15288:	mov	r2, r5
   1528c:	umlal	r2, r3, r8, r7
   15290:	cmp	r3, #0
   15294:	bne	15590 <__assert_fail@plt+0x460c>
   15298:	mov	r9, r4
   1529c:	mov	r8, r2
   152a0:	b	15258 <__assert_fail@plt+0x42d4>
   152a4:	asr	r3, r7, #31
   152a8:	mov	r2, r7
   152ac:	mov	r6, #0
   152b0:	mov	lr, #5
   152b4:	mov	r0, r4
   152b8:	mov	ip, r5
   152bc:	strd	r2, [sp, #8]
   152c0:	b	152ec <__assert_fail@plt+0x4368>
   152c4:	umull	r2, r3, r9, r7
   152c8:	mov	r9, r2
   152cc:	mov	r8, r3
   152d0:	cmp	r1, #0
   152d4:	beq	152e4 <__assert_fail@plt+0x4360>
   152d8:	mvn	r9, #0
   152dc:	mov	r6, #1
   152e0:	mov	r8, r9
   152e4:	subs	lr, lr, #1
   152e8:	beq	153c4 <__assert_fail@plt+0x4440>
   152ec:	cmp	r8, #0
   152f0:	mov	r1, #0
   152f4:	beq	152c4 <__assert_fail@plt+0x4340>
   152f8:	umull	r4, r5, r9, r7
   152fc:	mov	r3, #0
   15300:	mov	r2, r5
   15304:	umlal	r2, r3, r8, r7
   15308:	cmp	r3, #0
   1530c:	bne	154fc <__assert_fail@plt+0x4578>
   15310:	mov	r9, r4
   15314:	mov	r8, r2
   15318:	b	152d0 <__assert_fail@plt+0x434c>
   1531c:	lsr	r3, r8, #31
   15320:	adds	r9, r9, r9
   15324:	adc	r8, r8, r8
   15328:	cmp	r3, #0
   1532c:	beq	15038 <__assert_fail@plt+0x40b4>
   15330:	b	1507c <__assert_fail@plt+0x40f8>
   15334:	lsr	r3, r8, #23
   15338:	lsl	r8, r8, #9
   1533c:	cmp	r3, #0
   15340:	lsl	r3, r9, #9
   15344:	orr	r8, r8, r9, lsr #23
   15348:	bne	1507c <__assert_fail@plt+0x40f8>
   1534c:	mov	r9, r3
   15350:	b	15038 <__assert_fail@plt+0x40b4>
   15354:	asr	r3, r7, #31
   15358:	mov	r2, r7
   1535c:	cmp	r8, #0
   15360:	mov	r1, #0
   15364:	strd	r2, [sp, #8]
   15368:	umull	r2, r3, r9, r7
   1536c:	bne	15410 <__assert_fail@plt+0x448c>
   15370:	mov	r0, r2
   15374:	mov	ip, r3
   15378:	cmp	r1, #0
   1537c:	bne	1507c <__assert_fail@plt+0x40f8>
   15380:	cmp	ip, #0
   15384:	bne	15458 <__assert_fail@plt+0x44d4>
   15388:	umull	r2, r3, r0, r7
   1538c:	mov	r6, r2
   15390:	mov	r2, r3
   15394:	cmp	r1, #0
   15398:	mov	r9, r6
   1539c:	mov	r8, r2
   153a0:	beq	15038 <__assert_fail@plt+0x40b4>
   153a4:	b	1507c <__assert_fail@plt+0x40f8>
   153a8:	lsr	r3, r8, #22
   153ac:	lsl	r8, r8, #10
   153b0:	cmp	r3, #0
   153b4:	lsl	r3, r9, #10
   153b8:	orr	r8, r8, r9, lsr #22
   153bc:	beq	1534c <__assert_fail@plt+0x43c8>
   153c0:	b	1507c <__assert_fail@plt+0x40f8>
   153c4:	mov	r5, ip
   153c8:	orr	r4, r0, r6
   153cc:	b	15038 <__assert_fail@plt+0x40b4>
   153d0:	strd	r2, [sp, #8]
   153d4:	mov	r3, ip
   153d8:	ldr	r2, [sp, #12]
   153dc:	umlal	r2, r3, r8, r7
   153e0:	cmp	r3, #0
   153e4:	bne	15518 <__assert_fail@plt+0x4594>
   153e8:	mov	r8, r2
   153ec:	ldr	r9, [sp, #8]
   153f0:	b	15074 <__assert_fail@plt+0x40f0>
   153f4:	orr	r4, r6, ip
   153f8:	ldr	r5, [sp, #16]
   153fc:	b	15038 <__assert_fail@plt+0x40b4>
   15400:	mov	r3, #2
   15404:	mov	r7, #1000	; 0x3e8
   15408:	str	r3, [sp, #4]
   1540c:	b	14ee0 <__assert_fail@plt+0x3f5c>
   15410:	strd	r2, [sp, #16]
   15414:	mov	r3, r1
   15418:	ldr	r2, [sp, #20]
   1541c:	umlal	r2, r3, r8, r7
   15420:	cmp	r3, #0
   15424:	bne	155e8 <__assert_fail@plt+0x4664>
   15428:	mov	ip, r2
   1542c:	ldr	r0, [sp, #16]
   15430:	b	15378 <__assert_fail@plt+0x43f4>
   15434:	mov	r2, r1
   15438:	mov	r3, ip
   1543c:	umlal	r2, r3, r8, r7
   15440:	cmp	r3, #0
   15444:	strd	r2, [sp, #16]
   15448:	bne	154bc <__assert_fail@plt+0x4538>
   1544c:	mov	r2, r0
   15450:	ldr	r3, [sp, #16]
   15454:	b	14fec <__assert_fail@plt+0x4068>
   15458:	umull	r8, r9, r0, r7
   1545c:	mov	r3, r1
   15460:	mov	r2, r9
   15464:	umlal	r2, r3, ip, r7
   15468:	cmp	r3, #0
   1546c:	bne	155c8 <__assert_fail@plt+0x4644>
   15470:	mov	r6, r8
   15474:	b	15394 <__assert_fail@plt+0x4410>
   15478:	umull	r8, r9, ip, r7
   1547c:	mov	r3, r0
   15480:	mov	r2, r9
   15484:	umlal	r2, r3, r1, r7
   15488:	cmp	r3, #0
   1548c:	bne	15610 <__assert_fail@plt+0x468c>
   15490:	mov	r6, r8
   15494:	b	15028 <__assert_fail@plt+0x40a4>
   15498:	umull	r8, r9, r2, r7
   1549c:	mov	r1, ip
   154a0:	mov	r0, r9
   154a4:	umlal	r0, r1, r3, r7
   154a8:	cmp	r1, #0
   154ac:	bne	154dc <__assert_fail@plt+0x4558>
   154b0:	mov	ip, r8
   154b4:	mov	r1, r0
   154b8:	b	1500c <__assert_fail@plt+0x4088>
   154bc:	ldr	lr, [sp, #8]
   154c0:	mov	r2, r0
   154c4:	mov	ip, #1
   154c8:	ldr	r3, [sp, #12]
   154cc:	mul	r3, r9, r3
   154d0:	mla	r3, lr, r8, r3
   154d4:	add	r3, r3, r1
   154d8:	b	14fec <__assert_fail@plt+0x4068>
   154dc:	ldr	r1, [sp, #12]
   154e0:	mov	lr, #1
   154e4:	mov	ip, r8
   154e8:	mul	r1, r2, r1
   154ec:	ldr	r2, [sp, #8]
   154f0:	mla	r1, r3, r2, r1
   154f4:	add	r1, r1, r9
   154f8:	b	1500c <__assert_fail@plt+0x4088>
   154fc:	ldrd	r2, [sp, #8]
   15500:	mov	r1, #1
   15504:	mul	r3, r9, r3
   15508:	mov	r9, r4
   1550c:	mla	r8, r2, r8, r3
   15510:	add	r8, r8, r5
   15514:	b	152d0 <__assert_fail@plt+0x434c>
   15518:	mul	r3, r9, r1
   1551c:	mov	ip, #1
   15520:	mla	r8, r7, r8, r3
   15524:	ldrd	r6, [sp, #8]
   15528:	mov	r9, r6
   1552c:	add	r8, r8, r7
   15530:	b	15074 <__assert_fail@plt+0x40f0>
   15534:	movw	r3, #27840	; 0x6cc0
   15538:	movt	r3, #1
   1553c:	movw	r1, #27852	; 0x6ccc
   15540:	movt	r1, #1
   15544:	movw	r0, #27868	; 0x6cdc
   15548:	movt	r0, #1
   1554c:	mov	r2, #85	; 0x55
   15550:	bl	10f84 <__assert_fail@plt>
   15554:	ldr	r3, [sp, #12]
   15558:	mov	r1, #1
   1555c:	mul	r2, r9, r3
   15560:	ldr	r3, [sp, #8]
   15564:	mov	r9, r4
   15568:	mla	r8, r3, r8, r2
   1556c:	add	r8, r8, r5
   15570:	b	150f0 <__assert_fail@plt+0x416c>
   15574:	ldrd	r2, [sp, #8]
   15578:	mov	r1, #1
   1557c:	mul	r3, r9, r3
   15580:	mov	r9, r4
   15584:	mla	r8, r2, r8, r3
   15588:	add	r8, r8, r5
   1558c:	b	151e0 <__assert_fail@plt+0x425c>
   15590:	ldrd	r2, [sp, #8]
   15594:	mov	r1, #1
   15598:	mul	r3, r9, r3
   1559c:	mov	r9, r4
   155a0:	mla	r8, r2, r8, r3
   155a4:	add	r8, r8, r5
   155a8:	b	15258 <__assert_fail@plt+0x42d4>
   155ac:	ldrd	r2, [sp, #8]
   155b0:	mov	r1, #1
   155b4:	mul	r3, r9, r3
   155b8:	mov	r9, r4
   155bc:	mla	r8, r2, r8, r3
   155c0:	add	r8, r8, r5
   155c4:	b	15168 <__assert_fail@plt+0x41e4>
   155c8:	ldr	r3, [sp, #12]
   155cc:	mov	r6, r8
   155d0:	mov	r1, #1
   155d4:	mul	r2, r0, r3
   155d8:	ldr	r3, [sp, #8]
   155dc:	mla	r2, ip, r3, r2
   155e0:	add	r2, r2, r9
   155e4:	b	15394 <__assert_fail@plt+0x4410>
   155e8:	ldr	r3, [sp, #12]
   155ec:	mov	r1, #1
   155f0:	ldr	r2, [sp, #16]
   155f4:	mul	ip, r9, r3
   155f8:	ldr	r3, [sp, #8]
   155fc:	mov	r0, r2
   15600:	mla	ip, r3, r8, ip
   15604:	ldr	r3, [sp, #20]
   15608:	add	ip, ip, r3
   1560c:	b	15378 <__assert_fail@plt+0x43f4>
   15610:	ldr	r3, [sp, #12]
   15614:	mov	r6, r8
   15618:	mov	r0, #1
   1561c:	mul	r2, ip, r3
   15620:	ldr	r3, [sp, #8]
   15624:	mla	r2, r1, r3, r2
   15628:	add	r2, r2, r9
   1562c:	b	15028 <__assert_fail@plt+0x40a4>
   15630:	cmp	r1, #0
   15634:	cmpne	r0, #0
   15638:	beq	15684 <__assert_fail@plt+0x4700>
   1563c:	strd	r4, [sp, #-16]!
   15640:	umull	r4, r5, r0, r1
   15644:	str	r6, [sp, #8]
   15648:	str	lr, [sp, #12]
   1564c:	adds	r3, r5, #0
   15650:	movne	r3, #1
   15654:	cmp	r4, #0
   15658:	blt	15664 <__assert_fail@plt+0x46e0>
   1565c:	cmp	r3, #0
   15660:	beq	15690 <__assert_fail@plt+0x470c>
   15664:	bl	10eac <__errno_location@plt>
   15668:	mov	r3, #12
   1566c:	ldrd	r4, [sp]
   15670:	ldr	r6, [sp, #8]
   15674:	add	sp, sp, #12
   15678:	str	r3, [r0]
   1567c:	mov	r0, #0
   15680:	pop	{pc}		; (ldr pc, [sp], #4)
   15684:	mov	r1, #1
   15688:	mov	r0, r1
   1568c:	b	10cfc <calloc@plt>
   15690:	ldrd	r4, [sp]
   15694:	ldr	r6, [sp, #8]
   15698:	ldr	lr, [sp, #12]
   1569c:	add	sp, sp, #16
   156a0:	b	10cfc <calloc@plt>
   156a4:	cmp	r0, #0
   156a8:	beq	156b4 <__assert_fail@plt+0x4730>
   156ac:	blt	156bc <__assert_fail@plt+0x4738>
   156b0:	b	10e28 <malloc@plt>
   156b4:	mov	r0, #1
   156b8:	b	10e28 <malloc@plt>
   156bc:	str	r4, [sp, #-8]!
   156c0:	str	lr, [sp, #4]
   156c4:	bl	10eac <__errno_location@plt>
   156c8:	mov	r3, #12
   156cc:	ldr	r4, [sp]
   156d0:	add	sp, sp, #4
   156d4:	str	r3, [r0]
   156d8:	mov	r0, #0
   156dc:	pop	{pc}		; (ldr pc, [sp], #4)
   156e0:	cmp	r0, #0
   156e4:	beq	1570c <__assert_fail@plt+0x4788>
   156e8:	cmp	r1, #0
   156ec:	str	r4, [sp, #-8]!
   156f0:	str	lr, [sp, #4]
   156f4:	beq	15714 <__assert_fail@plt+0x4790>
   156f8:	blt	15728 <__assert_fail@plt+0x47a4>
   156fc:	ldr	r4, [sp]
   15700:	ldr	lr, [sp, #4]
   15704:	add	sp, sp, #8
   15708:	b	10d98 <realloc@plt>
   1570c:	mov	r0, r1
   15710:	b	156a4 <__assert_fail@plt+0x4720>
   15714:	bl	11e98 <__assert_fail@plt+0xf14>
   15718:	ldr	r4, [sp]
   1571c:	add	sp, sp, #4
   15720:	mov	r0, #0
   15724:	pop	{pc}		; (ldr pc, [sp], #4)
   15728:	bl	10eac <__errno_location@plt>
   1572c:	mov	r3, #12
   15730:	str	r3, [r0]
   15734:	b	15718 <__assert_fail@plt+0x4794>
   15738:	cmn	r0, #100	; 0x64
   1573c:	bne	15750 <__assert_fail@plt+0x47cc>
   15740:	mov	r0, r1
   15744:	mov	r1, r2
   15748:	mov	r2, r3
   1574c:	b	10dbc <readlink@plt>
   15750:	str	r4, [sp, #-8]!
   15754:	str	lr, [sp, #4]
   15758:	bl	10f78 <abort@plt>
   1575c:	movw	ip, #22328	; 0x5738
   15760:	movt	ip, #1
   15764:	push	{lr}		; (str lr, [sp, #-4]!)
   15768:	mov	lr, #0
   1576c:	sub	sp, sp, #12
   15770:	mov	r1, r0
   15774:	mov	r3, lr
   15778:	mov	r2, lr
   1577c:	mvn	r0, #99	; 0x63
   15780:	str	lr, [sp]
   15784:	str	ip, [sp, #4]
   15788:	bl	1584c <__assert_fail@plt+0x48c8>
   1578c:	add	sp, sp, #12
   15790:	pop	{pc}		; (ldr pc, [sp], #4)
   15794:	ldrb	r3, [r0]
   15798:	cmp	r3, #47	; 0x2f
   1579c:	bne	157ac <__assert_fail@plt+0x4828>
   157a0:	ldrb	r3, [r0, #1]!
   157a4:	cmp	r3, #47	; 0x2f
   157a8:	beq	157a0 <__assert_fail@plt+0x481c>
   157ac:	cmp	r3, #0
   157b0:	beq	157e0 <__assert_fail@plt+0x485c>
   157b4:	mov	r2, r0
   157b8:	mov	r1, #0
   157bc:	cmp	r3, #47	; 0x2f
   157c0:	moveq	r1, #1
   157c4:	beq	157d4 <__assert_fail@plt+0x4850>
   157c8:	cmp	r1, #0
   157cc:	movne	r0, r2
   157d0:	movne	r1, #0
   157d4:	ldrb	r3, [r2, #1]!
   157d8:	cmp	r3, #0
   157dc:	bne	157bc <__assert_fail@plt+0x4838>
   157e0:	bx	lr
   157e4:	str	r4, [sp, #-8]!
   157e8:	mov	r4, r0
   157ec:	str	lr, [sp, #4]
   157f0:	bl	10e94 <strlen@plt>
   157f4:	cmp	r0, #1
   157f8:	bls	1581c <__assert_fail@plt+0x4898>
   157fc:	add	r2, r4, r0
   15800:	mov	r3, r0
   15804:	ldrb	r2, [r2, #-1]
   15808:	cmp	r2, #47	; 0x2f
   1580c:	subeq	r3, r0, #2
   15810:	rsbeq	r1, r4, #1
   15814:	addeq	r3, r4, r3
   15818:	beq	15828 <__assert_fail@plt+0x48a4>
   1581c:	ldr	r4, [sp]
   15820:	add	sp, sp, #4
   15824:	pop	{pc}		; (ldr pc, [sp], #4)
   15828:	cmp	r3, r4
   1582c:	add	r0, r1, r3
   15830:	beq	1581c <__assert_fail@plt+0x4898>
   15834:	ldrb	r2, [r3], #-1
   15838:	cmp	r2, #47	; 0x2f
   1583c:	beq	15828 <__assert_fail@plt+0x48a4>
   15840:	ldr	r4, [sp]
   15844:	add	sp, sp, #4
   15848:	pop	{pc}		; (ldr pc, [sp], #4)
   1584c:	strd	r4, [sp, #-32]!	; 0xffffffe0
   15850:	movw	ip, #27916	; 0x6d0c
   15854:	movt	ip, #1
   15858:	strd	r6, [sp, #8]
   1585c:	strd	r8, [sp, #16]
   15860:	mov	r8, r0
   15864:	mov	r9, r1
   15868:	str	sl, [sp, #24]
   1586c:	str	lr, [sp, #28]
   15870:	sub	sp, sp, #1024	; 0x400
   15874:	ldr	r6, [sp, #1056]	; 0x420
   15878:	ldr	sl, [sp, #1060]	; 0x424
   1587c:	cmp	r6, #0
   15880:	moveq	r6, ip
   15884:	subs	r7, r2, #0
   15888:	beq	1593c <__assert_fail@plt+0x49b8>
   1588c:	mvn	r4, #-2147483648	; 0x80000000
   15890:	cmp	r3, r4
   15894:	movcc	r4, r3
   15898:	mov	r5, r7
   1589c:	mov	r3, r4
   158a0:	mov	r2, r5
   158a4:	mov	r1, r9
   158a8:	mov	r0, r8
   158ac:	blx	sl
   158b0:	subs	r3, r0, #0
   158b4:	mov	r0, r5
   158b8:	blt	15948 <__assert_fail@plt+0x49c4>
   158bc:	cmp	r3, r4
   158c0:	blt	15978 <__assert_fail@plt+0x49f4>
   158c4:	cmp	r7, r5
   158c8:	beq	158d4 <__assert_fail@plt+0x4950>
   158cc:	ldr	r3, [r6, #8]
   158d0:	blx	r3
   158d4:	cmn	r4, #-1073741822	; 0xc0000002
   158d8:	lsl	r3, r4, #1
   158dc:	bgt	159bc <__assert_fail@plt+0x4a38>
   158e0:	add	r4, r3, #1
   158e4:	ldr	r3, [r6]
   158e8:	mov	r0, r4
   158ec:	blx	r3
   158f0:	subs	r5, r0, #0
   158f4:	bne	1589c <__assert_fail@plt+0x4918>
   158f8:	ldr	r3, [r6, #12]
   158fc:	cmp	r3, #0
   15900:	beq	1590c <__assert_fail@plt+0x4988>
   15904:	mov	r0, r4
   15908:	blx	r3
   1590c:	bl	10eac <__errno_location@plt>
   15910:	mov	r5, #0
   15914:	mov	r3, #12
   15918:	str	r3, [r0]
   1591c:	mov	r0, r5
   15920:	add	sp, sp, #1024	; 0x400
   15924:	ldrd	r4, [sp]
   15928:	ldrd	r6, [sp, #8]
   1592c:	ldrd	r8, [sp, #16]
   15930:	ldr	sl, [sp, #24]
   15934:	add	sp, sp, #28
   15938:	pop	{pc}		; (ldr pc, [sp], #4)
   1593c:	mov	r4, #1024	; 0x400
   15940:	mov	r7, sp
   15944:	b	15898 <__assert_fail@plt+0x4914>
   15948:	cmp	r7, r5
   1594c:	moveq	r5, #0
   15950:	beq	1591c <__assert_fail@plt+0x4998>
   15954:	bl	10eac <__errno_location@plt>
   15958:	mov	r4, r0
   1595c:	ldr	r3, [r6, #8]
   15960:	mov	r0, r5
   15964:	mov	r5, #0
   15968:	ldr	r6, [r4]
   1596c:	blx	r3
   15970:	str	r6, [r4]
   15974:	b	1591c <__assert_fail@plt+0x4998>
   15978:	mov	r2, #0
   1597c:	mov	r1, sp
   15980:	cmp	r5, r1
   15984:	add	r8, r3, #1
   15988:	strb	r2, [r5, r3]
   1598c:	beq	159d0 <__assert_fail@plt+0x4a4c>
   15990:	cmp	r7, r5
   15994:	cmpne	r8, r4
   15998:	bge	1591c <__assert_fail@plt+0x4998>
   1599c:	ldr	r3, [r6, #4]
   159a0:	cmp	r3, #0
   159a4:	beq	1591c <__assert_fail@plt+0x4998>
   159a8:	mov	r1, r8
   159ac:	blx	r3
   159b0:	cmp	r0, #0
   159b4:	movne	r5, r0
   159b8:	b	1591c <__assert_fail@plt+0x4998>
   159bc:	bl	10eac <__errno_location@plt>
   159c0:	mov	r3, #36	; 0x24
   159c4:	mov	r5, #0
   159c8:	str	r3, [r0]
   159cc:	b	1591c <__assert_fail@plt+0x4998>
   159d0:	mov	r0, r8
   159d4:	ldr	r3, [r6]
   159d8:	blx	r3
   159dc:	cmp	r0, #0
   159e0:	beq	159f8 <__assert_fail@plt+0x4a74>
   159e4:	mov	r1, r5
   159e8:	mov	r2, r8
   159ec:	bl	10d44 <memcpy@plt>
   159f0:	mov	r5, r0
   159f4:	b	1591c <__assert_fail@plt+0x4998>
   159f8:	mov	r4, r8
   159fc:	b	158f8 <__assert_fail@plt+0x4974>
   15a00:	strd	r4, [sp, #-16]!
   15a04:	mov	r4, r0
   15a08:	str	r6, [sp, #8]
   15a0c:	str	lr, [sp, #12]
   15a10:	bl	10dec <__fpending@plt>
   15a14:	ldr	r5, [r4]
   15a18:	mov	r6, r0
   15a1c:	mov	r0, r4
   15a20:	bl	15a88 <__assert_fail@plt+0x4b04>
   15a24:	mov	r4, r0
   15a28:	and	r5, r5, #32
   15a2c:	cmp	r5, #0
   15a30:	bne	15a68 <__assert_fail@plt+0x4ae4>
   15a34:	cmp	r0, #0
   15a38:	beq	15a54 <__assert_fail@plt+0x4ad0>
   15a3c:	cmp	r6, #0
   15a40:	bne	15a80 <__assert_fail@plt+0x4afc>
   15a44:	bl	10eac <__errno_location@plt>
   15a48:	ldr	r4, [r0]
   15a4c:	subs	r4, r4, #9
   15a50:	mvnne	r4, #0
   15a54:	mov	r0, r4
   15a58:	ldrd	r4, [sp]
   15a5c:	ldr	r6, [sp, #8]
   15a60:	add	sp, sp, #12
   15a64:	pop	{pc}		; (ldr pc, [sp], #4)
   15a68:	cmp	r0, #0
   15a6c:	bne	15a80 <__assert_fail@plt+0x4afc>
   15a70:	bl	10eac <__errno_location@plt>
   15a74:	str	r4, [r0]
   15a78:	mvn	r4, #0
   15a7c:	b	15a54 <__assert_fail@plt+0x4ad0>
   15a80:	mvn	r4, #0
   15a84:	b	15a54 <__assert_fail@plt+0x4ad0>
   15a88:	strd	r4, [sp, #-12]!
   15a8c:	mov	r4, r0
   15a90:	str	lr, [sp, #8]
   15a94:	sub	sp, sp, #12
   15a98:	bl	10edc <fileno@plt>
   15a9c:	cmp	r0, #0
   15aa0:	mov	r0, r4
   15aa4:	blt	15b28 <__assert_fail@plt+0x4ba4>
   15aa8:	bl	10e40 <__freading@plt>
   15aac:	cmp	r0, #0
   15ab0:	bne	15af4 <__assert_fail@plt+0x4b70>
   15ab4:	mov	r0, r4
   15ab8:	bl	15b3c <__assert_fail@plt+0x4bb8>
   15abc:	cmp	r0, #0
   15ac0:	beq	15b24 <__assert_fail@plt+0x4ba0>
   15ac4:	bl	10eac <__errno_location@plt>
   15ac8:	mov	r5, r0
   15acc:	mov	r0, r4
   15ad0:	ldr	r4, [r5]
   15ad4:	bl	10f00 <fclose@plt>
   15ad8:	cmp	r4, #0
   15adc:	mvnne	r0, #0
   15ae0:	strne	r4, [r5]
   15ae4:	add	sp, sp, #12
   15ae8:	ldrd	r4, [sp]
   15aec:	add	sp, sp, #8
   15af0:	pop	{pc}		; (ldr pc, [sp], #4)
   15af4:	mov	r0, r4
   15af8:	bl	10edc <fileno@plt>
   15afc:	mov	r1, #1
   15b00:	mov	r2, #0
   15b04:	mov	r3, #0
   15b08:	str	r1, [sp]
   15b0c:	bl	10dd4 <lseek64@plt>
   15b10:	mvn	r3, #0
   15b14:	mvn	r2, #0
   15b18:	cmp	r1, r3
   15b1c:	cmpeq	r0, r2
   15b20:	bne	15ab4 <__assert_fail@plt+0x4b30>
   15b24:	mov	r0, r4
   15b28:	add	sp, sp, #12
   15b2c:	ldrd	r4, [sp]
   15b30:	ldr	lr, [sp, #8]
   15b34:	add	sp, sp, #12
   15b38:	b	10f00 <fclose@plt>
   15b3c:	str	r4, [sp, #-8]!
   15b40:	subs	r4, r0, #0
   15b44:	str	lr, [sp, #4]
   15b48:	sub	sp, sp, #8
   15b4c:	beq	15b68 <__assert_fail@plt+0x4be4>
   15b50:	bl	10e40 <__freading@plt>
   15b54:	cmp	r0, #0
   15b58:	beq	15b68 <__assert_fail@plt+0x4be4>
   15b5c:	ldr	r3, [r4]
   15b60:	tst	r3, #256	; 0x100
   15b64:	bne	15b80 <__assert_fail@plt+0x4bfc>
   15b68:	mov	r0, r4
   15b6c:	add	sp, sp, #8
   15b70:	ldr	r4, [sp]
   15b74:	ldr	lr, [sp, #4]
   15b78:	add	sp, sp, #8
   15b7c:	b	10d20 <fflush@plt>
   15b80:	mov	r1, #1
   15b84:	mov	r2, #0
   15b88:	mov	r3, #0
   15b8c:	mov	r0, r4
   15b90:	str	r1, [sp]
   15b94:	bl	15b9c <__assert_fail@plt+0x4c18>
   15b98:	b	15b68 <__assert_fail@plt+0x4be4>
   15b9c:	strd	r4, [sp, #-24]!	; 0xffffffe8
   15ba0:	mov	r4, r0
   15ba4:	ldr	ip, [r0, #4]
   15ba8:	strd	r6, [sp, #8]
   15bac:	str	lr, [sp, #20]
   15bb0:	ldr	lr, [r0, #8]
   15bb4:	str	r8, [sp, #16]
   15bb8:	sub	sp, sp, #8
   15bbc:	ldr	r5, [sp, #32]
   15bc0:	cmp	lr, ip
   15bc4:	beq	15bec <__assert_fail@plt+0x4c68>
   15bc8:	mov	r0, r4
   15bcc:	str	r5, [sp, #32]
   15bd0:	add	sp, sp, #8
   15bd4:	ldrd	r4, [sp]
   15bd8:	ldrd	r6, [sp, #8]
   15bdc:	ldr	r8, [sp, #16]
   15be0:	ldr	lr, [sp, #20]
   15be4:	add	sp, sp, #24
   15be8:	b	10f0c <fseeko64@plt>
   15bec:	ldr	ip, [r0, #16]
   15bf0:	ldr	lr, [r0, #20]
   15bf4:	cmp	lr, ip
   15bf8:	bne	15bc8 <__assert_fail@plt+0x4c44>
   15bfc:	ldr	r8, [r0, #36]	; 0x24
   15c00:	cmp	r8, #0
   15c04:	bne	15bc8 <__assert_fail@plt+0x4c44>
   15c08:	mov	r6, r2
   15c0c:	mov	r7, r3
   15c10:	bl	10edc <fileno@plt>
   15c14:	mov	r2, r6
   15c18:	mov	r3, r7
   15c1c:	str	r5, [sp]
   15c20:	bl	10dd4 <lseek64@plt>
   15c24:	mvn	r3, #0
   15c28:	mvn	r2, #0
   15c2c:	cmp	r1, r3
   15c30:	cmpeq	r0, r2
   15c34:	beq	15c64 <__assert_fail@plt+0x4ce0>
   15c38:	ldr	r3, [r4]
   15c3c:	strd	r0, [r4, #80]	; 0x50
   15c40:	bic	r3, r3, #16
   15c44:	str	r3, [r4]
   15c48:	mov	r0, r8
   15c4c:	add	sp, sp, #8
   15c50:	ldrd	r4, [sp]
   15c54:	ldrd	r6, [sp, #8]
   15c58:	ldr	r8, [sp, #16]
   15c5c:	add	sp, sp, #20
   15c60:	pop	{pc}		; (ldr pc, [sp], #4)
   15c64:	mvn	r8, #0
   15c68:	b	15c48 <__assert_fail@plt+0x4cc4>
   15c6c:	mov	r0, #14
   15c70:	str	r4, [sp, #-8]!
   15c74:	str	lr, [sp, #4]
   15c78:	bl	10f48 <nl_langinfo@plt>
   15c7c:	cmp	r0, #0
   15c80:	beq	15ca4 <__assert_fail@plt+0x4d20>
   15c84:	ldrb	r2, [r0]
   15c88:	movw	r3, #27908	; 0x6d04
   15c8c:	movt	r3, #1
   15c90:	ldr	r4, [sp]
   15c94:	add	sp, sp, #4
   15c98:	cmp	r2, #0
   15c9c:	moveq	r0, r3
   15ca0:	pop	{pc}		; (ldr pc, [sp], #4)
   15ca4:	ldr	r4, [sp]
   15ca8:	add	sp, sp, #4
   15cac:	movw	r0, #27908	; 0x6d04
   15cb0:	movt	r0, #1
   15cb4:	pop	{pc}		; (ldr pc, [sp], #4)
   15cb8:	strd	r4, [sp, #-20]!	; 0xffffffec
   15cbc:	mov	r5, r2
   15cc0:	strd	r6, [sp, #8]
   15cc4:	subs	r6, r0, #0
   15cc8:	mov	r7, r1
   15ccc:	str	lr, [sp, #16]
   15cd0:	sub	sp, sp, #12
   15cd4:	addeq	r6, sp, #4
   15cd8:	mov	r0, r6
   15cdc:	bl	10df8 <mbrtowc@plt>
   15ce0:	cmp	r5, #0
   15ce4:	cmnne	r0, #3
   15ce8:	mov	r4, r0
   15cec:	bhi	15d08 <__assert_fail@plt+0x4d84>
   15cf0:	mov	r0, r4
   15cf4:	add	sp, sp, #12
   15cf8:	ldrd	r4, [sp]
   15cfc:	ldrd	r6, [sp, #8]
   15d00:	add	sp, sp, #16
   15d04:	pop	{pc}		; (ldr pc, [sp], #4)
   15d08:	mov	r0, #0
   15d0c:	bl	15d60 <__assert_fail@plt+0x4ddc>
   15d10:	cmp	r0, #0
   15d14:	bne	15cf0 <__assert_fail@plt+0x4d6c>
   15d18:	ldrb	r3, [r7]
   15d1c:	mov	r4, #1
   15d20:	str	r3, [r6]
   15d24:	b	15cf0 <__assert_fail@plt+0x4d6c>
   15d28:	umull	r2, r3, r1, r2
   15d2c:	cmp	r3, #0
   15d30:	bne	15d3c <__assert_fail@plt+0x4db8>
   15d34:	mov	r1, r2
   15d38:	b	156e0 <__assert_fail@plt+0x475c>
   15d3c:	str	r4, [sp, #-8]!
   15d40:	str	lr, [sp, #4]
   15d44:	bl	10eac <__errno_location@plt>
   15d48:	mov	r3, #12
   15d4c:	ldr	r4, [sp]
   15d50:	add	sp, sp, #4
   15d54:	str	r3, [r0]
   15d58:	mov	r0, #0
   15d5c:	pop	{pc}		; (ldr pc, [sp], #4)
   15d60:	push	{lr}		; (str lr, [sp, #-4]!)
   15d64:	sub	sp, sp, #268	; 0x10c
   15d68:	movw	r2, #257	; 0x101
   15d6c:	add	r1, sp, #4
   15d70:	bl	15db8 <__assert_fail@plt+0x4e34>
   15d74:	cmp	r0, #0
   15d78:	movne	r0, #0
   15d7c:	bne	15db0 <__assert_fail@plt+0x4e2c>
   15d80:	movw	r1, #27932	; 0x6d1c
   15d84:	movt	r1, #1
   15d88:	add	r0, sp, #4
   15d8c:	bl	10d14 <strcmp@plt>
   15d90:	cmp	r0, #0
   15d94:	beq	15db0 <__assert_fail@plt+0x4e2c>
   15d98:	add	r0, sp, #4
   15d9c:	movw	r1, #27936	; 0x6d20
   15da0:	movt	r1, #1
   15da4:	bl	10d14 <strcmp@plt>
   15da8:	adds	r0, r0, #0
   15dac:	movne	r0, #1
   15db0:	add	sp, sp, #268	; 0x10c
   15db4:	pop	{pc}		; (ldr pc, [sp], #4)
   15db8:	strd	r4, [sp, #-16]!
   15dbc:	mov	r5, r1
   15dc0:	mov	r1, #0
   15dc4:	mov	r4, r2
   15dc8:	str	r6, [sp, #8]
   15dcc:	str	lr, [sp, #12]
   15dd0:	bl	10f24 <setlocale@plt>
   15dd4:	subs	r6, r0, #0
   15dd8:	beq	15e58 <__assert_fail@plt+0x4ed4>
   15ddc:	bl	10e94 <strlen@plt>
   15de0:	cmp	r4, r0
   15de4:	bhi	15e04 <__assert_fail@plt+0x4e80>
   15de8:	cmp	r4, #0
   15dec:	moveq	r0, #34	; 0x22
   15df0:	bne	15e28 <__assert_fail@plt+0x4ea4>
   15df4:	ldrd	r4, [sp]
   15df8:	ldr	r6, [sp, #8]
   15dfc:	add	sp, sp, #12
   15e00:	pop	{pc}		; (ldr pc, [sp], #4)
   15e04:	add	r2, r0, #1
   15e08:	mov	r1, r6
   15e0c:	mov	r0, r5
   15e10:	bl	10d44 <memcpy@plt>
   15e14:	ldrd	r4, [sp]
   15e18:	mov	r0, #0
   15e1c:	ldr	r6, [sp, #8]
   15e20:	add	sp, sp, #12
   15e24:	pop	{pc}		; (ldr pc, [sp], #4)
   15e28:	sub	r4, r4, #1
   15e2c:	mov	r1, r6
   15e30:	mov	r2, r4
   15e34:	mov	r0, r5
   15e38:	bl	10d44 <memcpy@plt>
   15e3c:	mov	r3, #0
   15e40:	mov	r0, #34	; 0x22
   15e44:	strb	r3, [r5, r4]
   15e48:	ldrd	r4, [sp]
   15e4c:	ldr	r6, [sp, #8]
   15e50:	add	sp, sp, #12
   15e54:	pop	{pc}		; (ldr pc, [sp], #4)
   15e58:	cmp	r4, #0
   15e5c:	mov	r0, #22
   15e60:	strbne	r6, [r5]
   15e64:	ldrd	r4, [sp]
   15e68:	ldr	r6, [sp, #8]
   15e6c:	add	sp, sp, #12
   15e70:	pop	{pc}		; (ldr pc, [sp], #4)
   15e74:	mov	r1, #0
   15e78:	b	10f24 <setlocale@plt>
   15e7c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   15e80:	mov	r7, r0
   15e84:	ldr	r6, [pc, #72]	; 15ed4 <__assert_fail@plt+0x4f50>
   15e88:	ldr	r5, [pc, #72]	; 15ed8 <__assert_fail@plt+0x4f54>
   15e8c:	add	r6, pc, r6
   15e90:	add	r5, pc, r5
   15e94:	sub	r6, r6, r5
   15e98:	mov	r8, r1
   15e9c:	mov	r9, r2
   15ea0:	bl	10cdc <calloc@plt-0x20>
   15ea4:	asrs	r6, r6, #2
   15ea8:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   15eac:	mov	r4, #0
   15eb0:	add	r4, r4, #1
   15eb4:	ldr	r3, [r5], #4
   15eb8:	mov	r2, r9
   15ebc:	mov	r1, r8
   15ec0:	mov	r0, r7
   15ec4:	blx	r3
   15ec8:	cmp	r6, r4
   15ecc:	bne	15eb0 <__assert_fail@plt+0x4f2c>
   15ed0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   15ed4:	andeq	r1, r1, r0, lsl #1
   15ed8:	andeq	r1, r1, r8, ror r0
   15edc:	bx	lr
   15ee0:	ldr	r3, [pc, #12]	; 15ef4 <__assert_fail@plt+0x4f70>
   15ee4:	mov	r1, #0
   15ee8:	add	r3, pc, r3
   15eec:	ldr	r2, [r3]
   15ef0:	b	10eb8 <__cxa_atexit@plt>
   15ef4:	andeq	r1, r1, r0, lsl #4

Disassembly of section .fini:

00015ef8 <.fini>:
   15ef8:	push	{r3, lr}
   15efc:	pop	{r3, pc}
